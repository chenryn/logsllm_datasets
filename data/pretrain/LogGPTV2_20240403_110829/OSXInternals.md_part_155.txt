CFBundleIdentifier
com.osxbook.driver.VnodeWatcher
IOClass
com_osxbook_driver_VnodeWatcher
IOProviderClass
IOResources
IOResourceMatch
IOKit
IOUserClientClass
com_osxbook_driver_VnodeWatcherUserClient
...
Finally, let us look at the source for the user program (Figure 1137). It is a reasonably lightweight client in
that it does not perform much processing itselfit merely displays the information contained in the queue
while printing descriptive names of action bits that are set in the reported vnode operation.
Figure 1137. Source for the user-space retrieval program for the vnode-level file system activity monitor
// vnodewatch.c
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include "VnodeWatcher.h"
#define PROGNAME "vnodewatch"
#define VNODE_WATCHER_IOKIT_CLASS "com_osxbook_driver_VnodeWatcher"
#define printIfAction(action, name) \
{ if (action & KAUTH_VNODE_##name) { printf("%s ", #name); } }
void
action_print(UInt32 action, int isdir)
{
printf("{ ");
if (isdir)
goto dir;
printIfAction(action, READ_DATA); // read contents of file
printIfAction(action, WRITE_DATA); // write contents of file
printIfAction(action, EXECUTE); // execute contents of file
printIfAction(action, APPEND_DATA); // append to contents of file
goto common;
dir:
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 87 of 90
printIfAction(action, LIST_DIRECTORY); // enumerate directory contents
printIfAction(action, ADD_FILE); // add file to directory
printIfAction(action, SEARCH); // look up specific directory item
printIfAction(action, ADD_SUBDIRECTORY); // add subdirectory in directory
printIfAction(action, DELETE_CHILD); // delete an item in directory
common:
printIfAction(action, DELETE); // delete a file system object
printIfAction(action, READ_ATTRIBUTES); // read standard attributes
printIfAction(action, WRITE_ATTRIBUTES); // write standard attributes
printIfAction(action, READ_EXTATTRIBUTES); // read extended attributes
printIfAction(action, WRITE_EXTATTRIBUTES); // write extended attributes
printIfAction(action, READ_SECURITY); // read ACL
printIfAction(action, WRITE_SECURITY); // write ACL
printIfAction(action, TAKE_OWNERSHIP); // change ownership
// printIfAction(action, SYNCHRONIZE); // unused
printIfAction(action, LINKTARGET); // create a new hard link
printIfAction(action, CHECKIMMUTABLE); // check for immutability
printIfAction(action, ACCESS); // special flag
printIfAction(action, NOIMMUTABLE); // special flag
printf("}\n");
}
const char *
vtype_name(enum vtype vtype)
{
static const char *vtype_names[] = {
"VNON", "VREG", "VDIR", "VBLK", "VCHR", "VLNK",
"VSOCK", "VFIFO", "VBAD", "VSTR", "VCPLX",
};
return vtype_names[vtype];
}
const char *
vtag_name(enum vtagtype vtag)
{
static const char *vtag_names[] = {
"VT_NON", "VT_UFS", "VT_NFS", "VT_MFS", "VT_MSDOSFS",
"VT_LFS", "VT_LOFS", "VT_FDESC", "VT_PORTAL", "VT_NULL",
"VT_UMAP", "VT_KERNFS", "VT_PROCFS", "VT_AFS", "VT_ISOFS",
"VT_UNION", "VT_HFS", "VT_VOLFS", "VT_DEVFS", "VT_WEBDAV",
"VT_UDF", "VT_AFP", "VT_CDDA", "VT_CIFS", "VT_OTHER",
};
return vtag_names[vtag];
}
static IOReturn
vnodeNotificationHandler(io_connect_t connection)
{
kern_return_t kr;
VnodeWatcherData_t vdata;
UInt32 dataSize;
IODataQueueMemory *queueMappedMemory;
vm_size_t queueMappedMemorySize;
vm_address_t address = nil;
vm_size_t size = 0;
unsigned int msgType = 1; // family-defined port type (arbitrary)
mach_port_t recvPort;
// allocate a Mach port to receive notifications from the IODataQueue
if (!(recvPort = IODataQueueAllocateNotificationPort())) {
fprintf(stderr, "%s: failed to allocate notification port\n", PROGNAME);
return kIOReturnError;
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 88 of 90
// this will call registerNotificationPort() inside our user client class
kr = IOConnectSetNotificationPort(connection, msgType, recvPort, 0);
if (kr != kIOReturnSuccess) {
fprintf(stderr, "%s: failed to register notification port (%d)\n",
PROGNAME, kr);
mach_port_destroy(mach_task_self(), recvPort);
return kr;
}
// this will call clientMemoryForType() inside our user client class
kr = IOConnectMapMemory(connection, kIODefaultMemoryType,
mach_task_self(), &address, &size, kIOMapAnywhere);
if (kr != kIOReturnSuccess) {
fprintf(stderr, "%s: failed to map memory (%d)\n", PROGNAME, kr);
mach_port_destroy(mach_task_self(), recvPort);
return kr;
}
queueMappedMemory = (IODataQueueMemory *)address;
queueMappedMemorySize = size;
while (IODataQueueWaitForAvailableData(queueMappedMemory, recvPort) ==
kIOReturnSuccess) {
while (IODataQueueDataAvailable(queueMappedMemory)) {
dataSize = sizeof(vdata);
kr = IODataQueueDequeue(queueMappedMemory, &vdata, &dataSize);
if (kr == kIOReturnSuccess) {
if (*(UInt8 *)&vdata == kt_kStopListeningToMessages)
goto exit;
printf("\"%s\" %s %s %lu(%s) ",
vdata.path,
vtype_name(vdata.v_type),
vtag_name(vdata.v_tag),
vdata.pid,
vdata.p_comm);
action_print(vdata.action, (vdata.v_type & VDIR));
} else
fprintf(stderr, "*** error in receiving data (%d)\n", kr);
}
}
exit:
kr = IOConnectUnmapMemory(connection, kIODefaultMemoryType,
mach_task_self(), address);
if (kr != kIOReturnSuccess)
fprintf(stderr, "%s: failed to unmap memory (%d)\n", PROGNAME, kr);
mach_port_destroy(mach_task_self(), recvPort);
return kr;
}
#define PRINT_ERROR_AND_RETURN(msg, ret) \
{ fprintf(stderr, "%s: %s\n", PROGNAME, msg); return ret; }
int
main(int argc, char **argv)
{
kern_return_t kr;
int ret;
io_iterator_t iterator;
io_service_t serviceObject;
CFDictionaryRef classToMatch;
pthread_t dataQueueThread;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 89 of 90
io_connect_t connection;
setbuf(stdout, NULL);
if (!(classToMatch = IOServiceMatching(VNODE_WATCHER_IOKIT_CLASS)))
PRINT_ERROR_AND_RETURN("failed to create matching dictionary", -1);
kr = IOServiceGetMatchingServices(kIOMasterPortDefault, classToMatch,
&iterator);
if (kr != kIOReturnSuccess)
PRINT_ERROR_AND_RETURN("failed to retrieve matching services", -1);
serviceObject = IOIteratorNext(iterator);
IOObjectRelease(iterator);
if (!serviceObject)
PRINT_ERROR_AND_RETURN("VnodeWatcher service not found", -1);
kr = IOServiceOpen(serviceObject, mach_task_self(), 0, &connection);
IOObjectRelease(serviceObject);
if (kr != kIOReturnSuccess)
PRINT_ERROR_AND_RETURN("failed to open VnodeWatcher service", kr);
kr = IOConnectMethodScalarIScalarO(connection,
kt_kVnodeWatcherUserClientOpen, 0, 0);
if (kr != KERN_SUCCESS) {
(void)IOServiceClose(connection);
PRINT_ERROR_AND_RETURN("VnodeWatcher service is busy", kr);
}
ret = pthread_create(&dataQueueThread, (pthread_attr_t *)0,
(void *)vnodeNotificationHandler, (void *)connection);
if (ret)
perror("pthread_create");
else
pthread_join(dataQueueThread, (void **)&kr);
(void)IOServiceClose(connection);
return 0;
}
Let us now test the programs we have created in this section. We will assume that the compiled kernel
extension bundle resides as /tmp/VnodeWatcher.kext.
$ gcc -Wall -o vnodewatch vnodewatch.c -framework IOKit
$ sudo kextload -v /tmp/VnodeWatcher.kext
kextload: extension /tmp/VnodeWatcher.kext appears to be valid
kextload: loading extension /tmp/VnodeWatcher.kext
kextload: /tmp/VnodeWatcher.kext loaded successfully
kextload: loading personalities named:
kextload: VnodeWatcher
kextload: sending 1 personality to the kernel
kextload: matching started for /tmp/VnodeWatcher.kext
$ ./vnodewatch
...
"/Users/amit/Desktop/hello.txt" VREG VT_HFS 3898(mdimport) { READ_DATA }
"/Users/amit/Desktop/hello.txt" VREG VT_HFS 3898(mdimport) { READ_ATTRIBUTES }
"/Users/amit/Desktop/hello.txt" VREG VT_HFS 3898(mdimport) { READ_ATTRIBUTES }
"/" VDIR VT_HFS 189(mds) { SEARCH }
"/.vol" VDIR VT_VOLFS 189(mds) { SEARCH }
"/Users/amit/Desktop" VDIR VT_HFS 189(mds) { SEARCH }
...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 90 of 90
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 1 of 81
Chapter 12. The HFS Plus File System
The HFS Plus file system (or simply HFS+) is the preferred and default volume format on Mac OS X. The
term HFS stands for Hierarchical File System, which replaced the flat Macintosh File System (MFS) used in
early Macintosh operating systems. HFS remained the primary volume format for Macintosh systems before
Mac OS 8.1, which was the first Apple operating system to support HFS+. Also called the Mac OS X
Extended volume format, HFS+ is architecturally similar to HFS but provides several important benefits over
the latter.[1] Moreover, HFS+ itself has evolved greatly since its inceptionnot so much in fundamental
architecture but in its implementation. In this chapter, we will discuss features and implementation details of
HFS+ in Mac OS X.
[1] Two of the major limitations in HFS were that it was largely single threaded and that it
supported only 16-bit allocation blocks.
Looking Back
Apple filed a patent for the Macintosh Hierarchical File System (U.S. Patent Number 4,945,475)
in late 1989. The patent was granted in mid-1990. The original HFS was implemented using two
B-Tree data structures: the Catalog B-Tree and the Extents B-Tree. As we will see in this chapter,
HFS+ uses both of these B-Trees. Lisa OSthe operating system for Apple's Lisa computer (1983)
used a hierarchical file system before the Macintosh. Indeed, the HFS volume format benefited
from work done on the Lisa's file system.
As we noted in Chapter 11, one hallmark of HFS was that it lent support to the graphical user
interface by providing a separate data stream in a filethe resource forkfor storing application
icons, resources, and other auxiliary data independently of the file's "main" data.
Noteworthy features of HFS+ include the following:
Support for files up to 263 bytes in size
Unicode-based file/directory name encoding, with support for names containing up to 255 16-bit
Unicode characters[2]
[2] HFS+ stores Unicode characters in canonical, fully decomposed form.
A B+ Tree (the Catalog B-Tree) for storing the file system's hierarchical structure, allowing tree-based
indexing
Extent-based allocation of storage space using 32-bit allocation block numbers, with delayed allocation
of physical blocks
A B+ Tree (the Extents Overflow B-Tree) for recording files' "overflow" extents (the ninth and
subsequentfor files with more than eight extents)
Multiple byte-streams (or forks) per file, with two predefined forks and an arbitrary number of other,
named forks that are stored in a separate B-Tree (see next item).
A B+ Tree (the Attributes B-Tree) for storing arbitrary metadata[3] per file, thus providing native
support for extended file system attributes (the names of which are Unicode strings up to 128 16-bit
Unicode characters in length)
[3] The size of the data associated with a single extended attribute is limited to slightly less
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 2 of 81
than 4KB in Mac OS X 10.4.
Metadata journaling through the kernel's VFS-level journaling mechanism
Multiple mechanisms to allow one file system object to refer to another: aliases, hard links, and
symbolic links
An adaptive clustering scheme called Hot File Clustering for improving the performance of small,
frequently accessed files
Dynamic relocation of small fragmented filesbased on several conditionsto promote file contiguity
Native support for access control lists (ACLs), with ACLs being stored as extended attributes
Unix-style file permissions
BSD-style file flags, allowing files to be designated as append-only, immutable, undeletable, and so on
Support for volume-level user and group quotas
Provision for storing Finder information in a file system object's metadata, allowing per-file
maintenance of properties such as file-extension hiding and color-coded labels
 Support for the searchfs() system call, which searches a volume for file system objects matching the
given criteria (e.g., object name, Finder information, and modification date)
Provision for storing multiple timestamps per file system object, including an explicit creation date
Support for case sensitivity (although by default, HFS+ is case-preserving but not case-sensitive)
The dedicated Startup file, whose location is stored at a fixed offset in the volume header (allowing it to
be found without having to know details of the volume format) and which can be used by a nonMac OS
X operating system to boot from an HFS+ volume
Support for byte-range and whole-file advisory locking[4]
[4] HFS+ does not implement lockingit uses the locking implemented in the kernel's VFS