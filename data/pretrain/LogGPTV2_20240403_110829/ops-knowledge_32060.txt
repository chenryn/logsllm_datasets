### 如何每次都创建最小的工作Docker镜像

#### 目标
每次创建最小的工作Docker镜像。

#### 当前情况
目前，您的Docker镜像大小为1.92 GB。通过在Dockerfile末尾添加清理步骤，您已经将镜像大小减小到1.86 GB。

**当前Dockerfile片段：**
```dockerfile
#clean
RUN apt-get purge -y wget
RUN rm -r a-build-dir
RUN apt-get purge -y a-package
```

#### 讨论
尽管您已经在尝试缩小镜像大小，但仍然觉得它太大。您希望找到一种方法，确保从现在起创建的每个镜像都尽可能小。

#### 解决方案

1. **合并多行命令**
   Dockerfile中的每个`RUN`命令都会创建一个新的层。即使后续命令删除了某些文件，这些文件仍然会存在于之前的层中。因此，将多个命令合并成一个`RUN`指令可以显著减小镜像大小。

   **优化后的Dockerfile片段：**
   ```dockerfile
   RUN apt-get update -y \
       && apt-get install -y wget a-package \
       && mkdir a-build-dir \
       && wget http://some-site/very-big-source-code.tar.gz \
       && tar xzvf very-big-source-code.tar.gz \
       && do-some-compilation \
       && apt-get purge -y wget \
       && cd .. \
       && rm -rf a-build-dir \
       && apt-get purge -y a-package
   ```

2. **选择更轻量的基础镜像**
   使用更轻量的基础镜像（如Alpine Linux）可以显著减小镜像大小。例如，基于Alpine Linux的镜像通常只有10-15 MB，而基于Debian或Ubuntu的镜像可能达到180-250 MB。

   **示例：使用Alpine Linux作为基础镜像**
   ```dockerfile
   FROM alpine:latest

   RUN apk add --no-cache wget a-package
   # 其他构建步骤
   ```

3. **使用多阶段构建**
   多阶段构建允许您在一个Dockerfile中使用多个`FROM`指令，从而在不同的阶段之间共享文件和依赖项。这可以进一步减小最终镜像的大小。

   **示例：多阶段构建**
   ```dockerfile
   # 第一阶段：构建
   FROM alpine:latest as builder
   RUN apk add --no-cache wget a-package
   RUN mkdir a-build-dir
   RUN wget http://some-site/very-big-source-code.tar.gz
   RUN tar xzvf very-big-source-code.tar.gz
   RUN do-some-compilation

   # 第二阶段：最终镜像
   FROM alpine:latest
   COPY --from=builder /path/to/output /app
   CMD ["your-command"]
   ```

通过以上方法，您可以确保每次创建的Docker镜像都尽可能小且高效。