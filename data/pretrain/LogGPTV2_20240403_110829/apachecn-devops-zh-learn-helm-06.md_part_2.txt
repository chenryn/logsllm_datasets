kind: Deployment
{{- range .Values.env }}
          env:
            - name: {{ .name }}
              value: {{ .value }}
{{- end }}
{{- if .Values.enableLiveness }}
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.port }}
            initialDelaySeconds: 5
            periodSeconds: 10
{{- end }}
          ports:
            containerPort: 8080
```
如果`env`和`enableLiveness`值都是`null`，您可以通过运行`helm template`命令来测试该渲染是否仍然会成功:
```
$ helm template my-chart $CHART_DIRECTORY --values my-values.yaml
---
# Source: test-chart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
          ports:
            - containerPort: 8080
```
您会注意到`range`和`if`动作都没有生成。空值或空值没有受到`range`条款影响的任何条目，当提供给`if`操作时，这些值也被评估为`false`。通过向`helm template`提供`env`和`enableLiveness`值，您可以验证您已经编写了使用这些操作正确生成 YAML 的模板。
您可以将这些值添加到一个`values`文件中，如图所示:
```
env:
  - name: BOOK
    value: Learn Helm
enableLiveness: true
```
进行这些更改后，验证`helm template`命令的预期结果，以证明模板被正确写入以使用这些值:
```
---
# Source: test-chart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
          env:
            - name: BOOK
              value: Learn Helm
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
          ports:
            - containerPort: 8080
```
当您在图表中添加额外的控制结构时，您应该确保您有定期使用`helm template`渲染模板的习惯，因为它们会迅速使图表开发过程更加困难，尤其是在控制结构众多或复杂的情况下。
除了检查控制结构是否正确生成之外，您还应该检查您的功能和管道是否按照设计工作，这将在下面讨论。
### 测试功能和管道
`helm template`命令对于验证由函数和管道产生的渲染也很有用，这些函数和管道通常用于产生格式化的 YAML。
以下面的模板为例:
```
apiVersion: apps/v1
kind: Deployment
          resources:
{{ .Values.resources | toYaml | indent 12 }}
```
该模板包含一个管道，该管道对`resources`值进行参数化和格式化，以指定容器的资源需求。明智的做法是在图表的`values.yaml`文件中包含一个合理的默认值，以确保应用有适当的限制来防止过度利用集群资源。
此处显示了该模板的`resources`值示例:
```
resources:
  limits:
    cpu: 200m
    memory: 256Mi
```
您需要运行`helm template`命令，以确保该值被正确转换为有效的`YAML`格式，并且输出被正确缩进以产生有效的部署资源。
对该模板运行`helm template`命令会产生以下输出:
```
apiVersion: apps/v1
kind: Deployment
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
```
接下来，我们将讨论如何在使用 `helm template.`渲染资源时启用服务器端验证
向图表呈现添加服务器端验证
虽然`helm template`命令对于图表开发过程来说是重要的，并且应该经常使用来验证您的图表渲染，但是它确实有一个关键的限制。`helm template`命令的主要目的是提供客户端渲染，也就是说它不与 Kubernetes API 服务器通信来提供资源验证。如果您想确保您的资源在生成后有效，您可以使用`--validate`标志指示`helm template`在资源生成后与 Kubernetes API 服务器通信:
```
$ helm template my-chart $CHART_DIRECTORY --validate
```
任何未生成有效 Kubernetes 资源的生成模板都会提供一条错误消息。例如，假设使用了一个部署模板，其中`apiVersion`值被设置为`apiVersion: v1`。为了生成有效的部署，您必须将`apiVersion`值设置为`apps/v1`，因为这是服务于部署资源的 API 的正确名称。简单地将其设置为`v1`将通过客户端渲染`helm template`生成看似有效的资源，而没有`--validation`标志，但是有了`--validation`标志，您将会看到以下错误:
```
Error: unable to build kubernetes objects from release manifest: unable to recognize '': no matches for kind 'Deployment' in version 'v1'
```
`--validate`标志旨在捕获您生成的资源中的错误。如果您可以访问 Kubernetes 集群，并且想要确定图表是否正在生成有效的 Kubernetes 资源，则应该使用此标志。或者，您可以针对`install`、`upgrade`、`rollback`和`uninstall`命令使用`--dry-run`标志来执行验证。
此处显示了将此标志用于`install`命令的示例:
```
$ helm install my-chart $CHART --dry-run
```
该标志将生成图表模板并执行验证，类似于使用`--validate`标志运行`helm template`命令。使用`--dry-run`会将每个生成的资源打印到命令行，并且不会在 Kubernetes 环境中创建资源。它主要供最终用户在运行安装之前执行健全性检查，以确保他们提供了正确的值，并且安装将产生所需的结果。图表开发人员可以选择以这种方式使用`--dry-run`标志来测试图表渲染和验证，或者他们可以选择使用`helm template`在本地生成图表资源并提供`--validate`来添加额外的服务器端验证。
虽然有必要验证您的模板是按照您的预期方式生成的，但也有必要确保您的模板是按照简化开发和维护的最佳实践方式生成的。Helm 提供了一个名为`helm lint`的命令，可以用于此目的，接下来我们将详细了解。
## 林挺·Helm 图表和模板
林挺您的图表是重要的，以防止错误的图表格式或图表的定义文件和提供了指导最佳做法时，使用 Helm 图表。`helm lint`命令具有以下语法:
```
$ helm lint PATH [flags]
```
`helm lint`命令设计为针对图表目录运行，以确保图表有效且格式正确。
重要提示:
`helm lint`命令不验证渲染的应用编程接口模式或在您的 YAML 风格上执行林挺，而是简单地检查图表是否由有效的 Helm 图表应该具有的适当文件和设置组成。
您可以对您在 [*第 5 章*](05.html#_idTextAnchor265)*中创建的留言簿图表运行`helm lint`命令，或者对位于[https://GitHub . com/PacktPublishing/-Learn-Helm/tree/master/Helm-charts/charts/留言簿](https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook)中 Packt GitHub 存储库中`helm-charts/charts/guestbook`文件夹下的图表运行*命令:**
```
$ helm lint $GUESTBOOK_CHART_PATH
==> Linting guestbook/
[INFO] Chart.yaml: icon is recommended
1 chart(s) linted, 0 chart(s) failed
```
该输出声明图表有效，由`1 chart(s) linted, 0 chart(s) failed`消息记录。`[INFO]`消息建议图表在`Chart.yaml`文件中包含一个`icon`字段，但这不是必需的。其他类型的消息包括`[WARNING]`，表示图表违反了图表惯例，以及`[ERROR]`，表示图表将在安装时失败。
让我们来看几个例子。考虑具有以下文件结构的图表:
```
guestbook/
  templates/
  values.yaml
```
请注意，此图表结构存在问题。该图表缺少定义图表元数据的`Chart.yaml`文件。对具有此结构的图表运行 linter 会产生以下错误:
```
==> Linting .
Error unable to check Chart.yaml file in chart: stat Chart.yaml: no such file or directory
Error: 1 chart(s) linted, 1 chart(s) failed
```
此错误表示 Helm 找不到`Chart.yaml`文件。如果一个空的`Chart.yaml`文件被添加到图表中以提供正确的文件结构，由于`Chart.yaml`文件包含无效的内容，仍然会出现错误:
```
guestbook/
  Chart.yaml  # Empty
  templates/
  values.yaml
```
对照该图表运行短绒会产生以下错误:
```
==> Linting .
[ERROR] Chart.yaml: name is required
[ERROR] Chart.yaml: apiVersion is required. The value must be either 'v1' or 'v2'
[ERROR] Chart.yaml: version is required
[INFO] Chart.yaml: icon is recommended
[ERROR] templates/: validation: chart.metadata.name is required
Error: 1 chart(s) linted, 1 chart(s) failed
```
该输出列出了`Chart.yaml`文件中缺少的必填字段。它表示文件必须包含`name`、`apiVersion`和`version`字段，因此这些字段应该添加到`Chart.yaml`文件中以生成有效的 Helm 图表。短绒机对`apiVersion`和`version`设置提供额外的反馈，检查`apiVersion`值是否设置为`v1`或`v2`，以及`version`设置是否为正确的`SemVer`版本。
linter 还将检查是否存在其他必需或推荐的文件，如`values.yaml`文件和`templates`目录。它还将确保`templates`目录下的文件具有`.yaml`、`.yml`、`.tpl`或`.txt`文件扩展名。`helm lint`命令非常适合检查你的图表是否包含适当的内容，但是它不能在你的图表的 YAML 风格上执行广泛的林挺。
要执行此林挺，您可以使用另一个名为`yamllint`的工具，该工具可以在[https://github.com/adrienverge/yamllint](https://github.com/adrienverge/yamllint)找到。这个工具可以使用`pip`包管理器跨一系列操作系统安装，使用以下命令:
```
pip install yamllint --user
```
它也可以安装在您的操作系统的软件包管理器中，如[https://yamllint.readthedocs.io/en/stable/quickstart.html](https://yamllint.readthedocs.io/en/stable/quickstart.html)的`yamllint`快速启动说明中所述。
为了在图表的 YAML 资源上使用`yamllint`，您必须将其与`helm template`命令结合使用，以移除 Go 模板并生成您的 YAML 资源。
以下是对 Packt GitHub 存储库中的留言簿图表运行该命令的示例:
```
$ helm template my-guestbook Learn-Helm/helm-charts/charts/guestbook | yamllint -
```
该命令将生成`templates/`文件夹下的资源，并将输出传送到`yamllint`。
结果如下所示:
![Figure 6.2 – An example yamllint output ](img/Figure_6.2.jpg)
图 6.2–示例`yamllint`输出
所提供的行号反映了整个`helm template`输出，这使得很难确定`yamllint`输出中的哪一行对应于您的 YAML 资源中的哪一行。
您可以通过重定向`helm template`输出来简化这一过程，使用以下命令对`guestbook`图表确定其行号:
```
$ cat -n <(helm template my-guestbook Learn-Helm/helm-charts/charts/guestbook)
```
`yamllint`会违背许多不同的规则，包括以下:
*   刻痕
*   线长度
*   培训空间
*   空行
*   格式如何
您可以通过创建以下文件之一来指定您自己的规则，从而覆盖默认规则:
*   当前工作目录中的`.yamllint`、`.yamllint.yaml`、`.yamllint.yml`
*   `$XDB_CONFIG_HOME/yamllint/config`
*   `~/.config/yamllint/config`
要覆盖根据留言簿图表报告的缩进规则，您可以在当前工作目录中创建一个包含以下内容的`.yamllint.yaml`文件:
```
rules:
  indentation:
    # Allow      myList