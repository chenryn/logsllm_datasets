directory's entire contents so long as you understand the general
structure of *.git* directories. A *.git* directory is laid out in a
specific way. When you execute the following command in a Git
repository, you should see contents resembling the following:
如果可以访问此文件，只要您理解.git目录的一般结构，就可以下载Git目录的全部内容。.git目录有特定的排列方式。在Git存储库中执行以下命令时，您应该会看到类似以下内容的内容：
    $ ls .git
    COMMIT_EDITMSG HEAD branches config description hooks index info logs objects refs
The output shown here lists a few standard files and folders that are
important for reconstructing the project's source. In particular, the
*/objects* directory is used to store Git objects. This directory
contains additional folders; each has two character names corresponding
to the first two characters of the SHA1 hash of the Git objects stored
in it. Within these subdirectories, you'll find files named after the
rest of the SHA1 hash of the Git object stored in it. In other words,
the Git object with a hash of
`      0a082f2656a655c8b0a87956c7bcdc93dfda23f8     ` will be stored
with the filename of *082f2656a655c8b0a87956c7bcdc93dfda23f8* in the
directory *.git/objects/0a* . For example, the following command will
return a list of folders:
这里显示的输出列出了一些重建项目源的重要标准文件和文件夹。
特别是/objects目录用于存储Git对象。 该目录包含其他文件夹;
每个文件夹都有两个字符的名称，对应于其中存储的Git对象的SHA1哈希的前两个字符。
在这些子目录中，您将找到以其余SHA1哈希命名的文件，这些文件存储在其中的Git对象。
换句话说，具有哈希值0a082f2656a655c8b0a87956c7bcdc93dfda23f8的Git对象将使用文件名082f2656a655c8b0a87956c7bcdc93dfda23f8存储在目录.git
/ objects / 0a中。 例如，以下命令将返回文件夹列表：
    $ ls .git/objects
    00 0a 14 5a 64 6e 82 8c 96 a0 aa b4 be c8 d2 dc e6 f0 fa info pack
And this command will reveal the Git objects stored in a particular
folder:
这个命令将显示在特定文件夹中存储的Git对象。
    $ ls .git/objects/0a
    082f2656a655c8b0a87956c7bcdc93dfda23f8 4a1ee2f3a3d406411a72e1bea63507560092bd 66452433322af3d319a377415a890c70bbd263 8c20ea4482c6d2b0c9cdaf73d4b05c2c8c44e9 ee44c60c73c5a622bb1733338d3fa964b333f0
    0ec99d617a7b78c5466daa1e6317cbd8ee07cc 52113e4f248648117bc4511da04dd4634e6753 72e6850ef963c6aeee4121d38cf9de773865d8
[ ]{#c21.xhtml#Page_330 .pagebreak title="330"} Git stores different
types of objects in . *git/objects* : commits, trees, blobs, and
annotated tags. You can determine an object's type by using this
command:
Git将不同类型的对象存储在.git/objects中：提交、树、blob和注释标签。您可以使用此命令确定对象的类型：
    $ git cat-file -t OBJECT-HASH
*Commit* objects store information such as the commit's tree object
hash, parent commit, author, committer, date, and message of a commit.
*Tree* objects contain the directory listings for commits. *Blob*
objects contain copies of files that were committed (read: actual source
code!). Finally, *tag* objects contain information about tagged objects
and their associated tag names. You can display the file associated with
a Git object by using the following command:
提交对象储存提交的树对象哈希，父提交、作者、提交者、日期以及提交信息等信息。树对象包含提交的目录清单。Blob对象包含已提交的文件的副本（也就是源代码！）。最后，标签对象包含有关已标记的对象及其相关标签名称的信息。您可以使用以下命令显示与Git对象关联的文件：
    $ git cat-file -p OBJECT-HASH
The */config* file is the Git configuration file for the project, and
the */HEAD* file contains a reference to the current branch:
/config 文件是该项目的 Git 配置文件，/HEAD 文件包含对当前分支的引用：
    $ cat .git/HEAD
    ref: refs/heads/master
If you can't access the */.git* folder's directory listing, you have to
download each file you want instead of recursively downloading from the
directory root. But how do you find out which files on the server are
available when object files have complex paths, such as
*.git/objects/0a/72e6850ef963c6aeee4121d38cf9de773865d8* ?
如果您无法访问/.git文件夹的目录列表，您必须下载想要的每个文件，而不是从目录根递归下载。但是，当对象文件具有复杂路径时，例如.git/objects/0a/72e6850ef963c6aeee4121d38cf9de773865d8，您如何找出服务器上可用的文件？
You start with filepaths that you already know exist, like *.git/HEAD* !
Reading this file will give you a reference to the current branch (for
example, *.git/refs/heads/master* ) that you can use to find more files
on the system:
你可以从已知的文件路径开始，比如.git/HEAD！读取这个文件可以给你一个当前分支的引用（例如.git/refs/heads/master），你可以使用它来在系统中找到更多的文件：
    $ cat .git/HEAD
    ref: refs/heads/master
    $ cat .git/refs/heads/master
    0a66452433322af3d319a377415a890c70bbd263
    $ git cat-file -t 0a66452433322af3d319a377415a890c70bbd263
    commit
    $ git cat-file -p 0a66452433322af3d319a377415a890c70bbd263
    tree 0a72e6850ef963c6aeee4121d38cf9de773865d8
The *.git/refs/heads/master* file will point you to the particular
object hash that stores the directory tree of the commit. From there,
you can see that the object is a commit and is associated with a tree
object, `      0a72e6850ef963c6aeee4121d38cf9de773865d8     ` . Now
examine that tree object:
.git/refs/heads/master文件将指向存储提交目录树的特定对象哈希。从那里，你可以看到该对象是一个提交，并与树对象0a72e6850ef963c6aeee4121d38cf9de773865d8关联。现在检查那个树对象：
    $ git cat-file -p 0a72e6850ef963c6aeee4121d38cf9de773865d8
    100644 blob 6ad5fb6b9a351a77c396b5f1163cc3b0abcde895 .gitignore
    040000 blob 4b66088945aab8b967da07ddd8d3cf8c47a3f53c source.py
    040000 blob 9a3227dca45b3977423bb1296bbc312316c2aa0d README
    040000 tree 3b1127d12ee43977423bb1296b8900a316c2ee32 resources
Bingo! You discover some source code files and additional object trees
to explore.
万岁！您找到了一些源代码文件和其他要探索的对象树。
[ ]{#c21.xhtml#Page_331 .pagebreak title="331"} On a remote server, your
requests to discover the different files would look a little different.
For instance, you can use this URL to determine the HEAD:
在远程服务器上，您查找不同文件的请求会有所不同。例如，您可以使用以下网址确定HEAD：
    https://example.com/.git/HEAD
Use this URL to find the object stored in that HEAD:
使用此网址查找存储在该HEAD中的对象：
    https://example.com/.git/refs/heads/master
Use this URL to access the tree associated with the commit:
使用此URL访问与提交相关的树：
    https://example.com/.git/objects/0a/72e6850ef963c6aeee4121d38cf9de773865d8
Finally, use this URL to download the source code stored in the
*source.py* file:
最后，使用该URL下载存储在source.py文件中的源代码：
    https://example.com/.git/objects/4b/66088945aab8b967da07ddd8d3cf8c47a3f53c 
If you are downloading files from a remote server, you'll also need to
decompress the downloaded object file before you read it. This can be
done using some code. You can decompress the object file by using Ruby,
Python, or your preferred language's *zlib* library:
如果你从远程服务器下载文件，你还需要在读取之前解压下载的对象文件。这可以使用一些代码来完成。你可以使用Ruby、Python或你喜欢的语言的zlib库来解压对象文件。
    ruby -rzlib -e 'print Zlib::Inflate.new.inflate(STDIN.read)' 
# [ [ ]{#p04.xhtml#Page_333 .pagebreak title="333"} Part IV ]{.PartNumber} [ Expert Techniques ]{.PartTitle} {.part}
:::
[]{#c22.xhtml}