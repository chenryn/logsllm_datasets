数据接收器：1300 RPS
数据转换器：1250 RPS
数据分发器： 1100 RPS
有了这些信息，我们现在找到了一个瓶颈；它是分发服务器，因为它的性能最接近预测的峰值，并且尽管数据接收器功能服务，将只工作正常，直到负载小于 1100 RPS。下一个瓶颈是数据转换器，因为它是最接近当前瓶颈的组件，等等。
到目前为止，我们知道以下内容：
瓶颈在哪里。我们可以预测瓶颈将产生的下一个位置（实际上这意味着我们还能知道次慢的组件，次次慢的组件，等等）。
每个组件的预期（单个应用程序实例可以处理的消息数，以及该消息在此组件内可能花费的预期时间量，也就是所谓的 SLA）。每个组件的传入/传出流量比率。我们可以预测组件之间的流量，并相应地拟合容量。
总体容量和每个组件的容量，以及实际使用的容量。我们还能够预测各种停机情况下的容量下降，并相应地进行资源预留。队列中的每个主机都表示服务容量的一部分。单个主机的故障将减少总容量，减少此主机表示的数量。根据我们需要维持的故障类型，我们可以提前添加多个主机，以便在此类中断期间，总体服务容量将保持合理，以处理流量。例如，如果 100% 所需的容量是六台主机，但我们需要承受数据中心中断，作为可能的解决方案之一，我们需要在三个数据中心中有九台主机。这些数据中心的故障将使三台主机的总容量减少，但我们在其他两个数据中心中仍有足够的六台主机。
我们的缩放计算基于预测值。请记住，实际流量可能具有不同的特点。持续跟踪可用容量，同时了解所有组件是否都保留在其 SLA 中，可以清楚地告诉我们我们的服务做得多么“好”。真实场景可能会变得更加复杂。每个服务可能有多个 SLA，因为我们可能有多个数据类型，并且每个数据类型可能需要以不同的方式处理（#components_relationship_in_terms_of_slas）。在我们的例子中，不同的消息可能具有不同的优先级和处理时间限制。如果没有每个优先级对应的 SLA，那么如果仅其中一种数据类型的负载增长，就很难说这可能会给系统带来怎样的压力。
两种消息类型的 SLA 和流量模式方面的组件关系
下面是一个简短的示例：由于高优先级消息中的高负载峰值，其他消息传递速度将从几秒钟减慢到几分钟。那么关键问题是，几分钟的延迟是可以接受的吗？通过“分而治之”原则，我们分别声明每种类型的具体标准，如果我们知道确切的障碍值，并且能够快速识别“好”和“坏”值，则采取正确的行动不会有问题。否则，我们将陷入一种不知道的状态，只能猜测该做什么，或者我们是否应该做任何事情。为内部组件建立 SLA 有助于阐明它们之间的关系，并精确协调它们之间的交互。这不仅跨组件，而且跨大型服务也是如此。SRE 主要关注服务效率和质量跟踪对用户至关重要的内容。服务体系结构和所使用的特定应用程序是次要的，至少在服务根据用户的期望提供结果之前是这样。
而且这还不是故事的结局！  
了解外部依赖关系
  你可能还记得，“数据转换器”组件在其工作过程中使用来自单独外部源的信息调整消息内容。这些源称为外部依赖项。我们一直讨论的依赖项和服务组件之间的区别是，与组件相反，我们不能控制依赖项及其行为。在这里，“数据转换器”正在扮演一个客户的角色，而这些外部服务只是一套“黑匣子”。
从这个角度看，问题是，“这些外部服务可以提供怎样的容量，它们的局限性将如何影响我们组件的性能和可扩展性？”我们想知道我们能期待什么，从技术上讲，我们想要一个 SLA。我们需要这样来了解我们是否可以将服务用作依赖项，或者我们需要四处寻找其他解决方案来执行我们的任务。提供的 SLA 将为我们提供有关可用限制（如请求大小）、性能（如响应时间）和可用性的线索，但尽管如此，我们的组件性能会如何受到此影响，是否适合我们的需求？如果我们想象我们是 SysAdmins，他们主要关心服务运行状况和负载，并且与 SLA 无关（顺便说一下，可能根本没有 SLA ），我们提出的问题将很难回答。但是，了解我们自己的服务的精确要求（当我们将观点更改为更接近 SRE 视角时），我们可以轻松地比较 SLA 之间的值，这些值将引导我们获得答案。我看看。例如，如果通过数据转换器组件传递消息的要求是 50 毫秒，而我们仅将一半时间用于内部操作，则我们可以指定 25 毫秒从外部源请求数据。通过为该源设置一个 SLA，指出响应时间应小于 20 毫秒，我们可以自信地说，将此服务用作依赖项是安全的。
作为另一个示例，它可能是一个声明的容量限制，即依赖项每个客户帐户只能提供 900 RPS，如果之前讨论的 1000 RPS 的预测峰值仍然适用，我们要么要求提高限制，要么查看另一个解决方案。最后值得一提的情况是，依赖项的性能决定了我们自己的组件吞吐量。假设没有依赖关系，数据转换器每秒可以处理 2000 个请求。如果外部源的性能为 1100 RPS，则数据转换器将受到其性能影响成为 1100 RPS 的吞吐量。我们绝对能够按其形式使用此服务，但我们应该记住，我们的组件的性能不是受其自身性能或容量的限制，而是受外部依赖功能的限制。这是非常重要的一点，因为如果我们有一天需要扩展高于 1100 RPS 的数据变压器的吞吐量，则更改其容量将毫无意义。
正如这里所演示的，我们现在不仅可以说我们是否可以使用此服务，而且我们还能够预测我们是否将达到依赖项的极限，如果是，在什么情况下会发生。
外部依赖关系的另一个方面是我们组件与此服务之间的关系的紧密性，换句话说，外部服务中断将如何反映我们的组件性能和可用性。为了说明紧密性的含义，让我们看几个例子。最广泛使用的外部依赖项是域名系统 （DNS）。如果组件经常解析域名，DNS 的中断可能会使其完全瘫痪，整个服务将受到影响。相对罕见的情况是，只有一部分服务遇到困难。整个服务也可能受到影响，但跟踪这类问题的根源可能有点困难。
对于第二个示例，我们将讨论一个不太常用的服务，称为轻量级目录访问协议（LDAP）。如果我们假设服务在启动期间仅调用 LDAP 几次，则组件可能受到影响的唯一时刻是服务正在启动或重新启动。
总体而言，与组件和 DNS 之间的关系相比，组件和 LDAP 服务之间关系的紧密度非常低。这两种服务都会影响其依赖项，但故障事件的严重性却大不相同。
为了可视化依赖关系，应该整理出我们使用的所有外部服务及其 SLA 和潜在的故障影响清单。在大规模故障等紧急情况下，手边常备这样的清单可能是至关重要的。这样可以节省许多宝贵的时间，否则将花费许多时间来判断故障的严重程度。每次添加新的主要功能或新依赖项时，都应更新此清单。从 SLA 的角度来看，我们需要确保我们的服务承诺的可靠性级别不会高于所有直接依赖项的最低级别。如果我们注意到这可能是这种情况，我们需要降级 SLA 或找到技术解决方案来缓解差异。为此，在某些情况下，我们可能会开发一个薄的中间层，例如缓存或复制。请记住，我们可能仅需比较直接相关的依赖项，而且服务不仅限于软件，还取决于硬件、电源、网络提供商等，它们都有其自身的可用性限制，都可能会影响我们。
即使在此时，对服务是否正常的理解也在很大程度上取决于个人观点。阻止部分服务的单个依赖项的故障将被视为经典 SysAdmin 角色的一个大问题，但对于 SRE，此服务可能只受到部分影响，甚至完全正常。对于我们的消息传递案例，“数据转换”依赖项的故障可能会完全阻止此组件（系统管理员的服务中断）。但是，即使我们仍然可以接收新消息并存储它们一段时间，高优先级消息在传递时间方面也会立即受到影响。但是，低优先级流量可能根本不受影响（对于 SRE，服务仅部分受到影响）。此外，如果目前没有高优先级流量，则服务完全正常（我们并没有违反低优先级邮件的传递时间限制）。现在，我们看到新观点如何显著地改变我们理解当前服务条件的方式。有趣的是，当我们真正写下我们期望从服务得到的想法，并开始收集相关数据来衡量我们实际上拥有什么时，通常发现服务做得不如我们想象的那么好。
测量结果是不同的，因为如果没有 SLA，我们只能注意到有人抱怨的那些问题。在我们看来，这项服务做得很好，因为过去只有少数投诉，而且似乎得到了成功解决。问题是，我们没有收到关于我们实际存在的所有问题的投诉，实际上，可能有一千个用户只是默默地离开，并没有得到期待的合理服务。  
非技术解决方案
  技术解决方案不是 SLA 潜力的限制。SLA 也会在其他领域为你提供一手资料。例如，SLA 确定将新服务交给 SRE 团队以支持的正确时间。这可以很简单，例如，“如果产品符合预期（即不违反 SLA），则产品已准备就绪；否则，就不应该发布。”当我们谈论移交程序时，首先想到的是一个包含几十个要点的大清单。它涵盖了服务的所有可能方面，从体系结构决策和全面的管理文档到监视警报和故障排除手册。然而，检查所有这些清单很难给你一种强烈的信心：确认它已经准备好被接管。除非你冻结除过渡准备之外的所有活动，否则这是一件非常不寻常的事情；你永远不会 100% 确信会不会有令人惊讶的问题出现。
请考虑这样的情况。所有新的软件项目在通过体系结构评审之前很久就具备了一些先决条件，并且已经构建了几个概念验证模型。当认为应用程序已准备好正式启动并开始为实时生产流量提供服务时，将重置 SLA 和 SLO 计数器可以为所有环境（开发/测试/生产）设置 SLA 和 SLO，但它们都将显示每个特定的环境。每个环境的指标可能相同，但值将是唯一的。启动服务时，我们会重置所有计数器，以避免受到启动前数据的影响。并开始收集真实数据。这是服务条件度量值的起点。由于 SLA 定义只适用于一段时间内的（常常是一个日历年），因此项目应在此状态中持续一段时间（几个月或一个季度），以收集足够的数据点，以确认服务是稳定的有足够的，没有违反协议的风险。如果我们添加“达到预期”目标作为附加检查点以及警报限制（服务在此期间的警报量；例如，“每两周不超过一个报警”），我们将更加确信服务上线很久以前没有出过麻烦，而且它现在没有问题，并且开发人员团队能够保持这种状态，并且不会出现服务质量快速下滑。
与此示例类似，可以通过 SLA 这个窗口来检验任何任务或想法，以查看它对客户的影响，并相应地处理它。这种理解将引导你，不仅了解需要改进的要点，还能发现可能进一步改进的地方，因此可以将注意力转移到其他方面。例如，如果你的 SLA 声明了 99.9% 可用性的要求，但上个季度的服务运行情况高达 99.999%，则无需对该服务执行任何更多的工作。
现在，让我们看看理论如何与实践相遇。
跟踪可用性级别
   好的，假设我们已经成功定义了SLA。 但是从实际角度来看，我们应该如何跟踪所有这些数字和百分位数？
在跳到算术之前，让我们先澄清一些含义。在跳到算术之前，让我们先澄清一些含义。
在这里，我们需要一份所有违反协议条件的列表，以考虑所有条件。让我们将这些条件命名为“失败”，以将它们与以前使用的“错误”区分开来。这种分离是必要的，以强调我们不会交替使用这两个术语。失败不仅包含错误，而且还包含影响可用性指标的各种其他事件。此外，还需要限制包含的错误范围，因为类似“404 未找到”这样的HTTP 错误（多为告警而不是由服务内部引起的实际错误）应从列表中删除。
要回到前面的示例，假设对于“消息总线”服务的“数据接收器”组件的高优先级流量，SLA 定义如下：
所有标有高优先级标志的所有消息，我们将在一个日历年内保证 99.9% 的发送在 10 毫秒内完成。
在这种情况下，失败列表将包含以下内容：
处理时间超过 10 毫秒的消息。
由于内部服务问题，但不是由于不正确的传入请求而无法处理的消息。
要跟踪正在进行的可用性级别，我们需要从收到的消息总数中减去失败数。要跟踪正在进行的可用性级别，我们需要从收到的消息总数中减去失败数。