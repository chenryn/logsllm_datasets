(a ByPosition） Less(i，j
(a ByPosition) Swap(i，j
float64
，计算每辆车到达终点的时间，并按照距离从大到小排序(position越
j int) bool { return a[i].position > a[j].position
int)
{ a[i]， a[j] = a[j]， a[i] } 
 return len(a) }
每辆车i 以恒定的速度 speedi（英里/
---
## Page 819
Example 3: 
 Example 2:
Example 1: 
(A) has score 2 * A, where A is a balanced parentheses string.
AB has score A + B, where A and B are balanced parentheses strings.
0 has score 1 
rule:
 Given a balanced parentheses string S, compute the score of the string based on the following 
题目
856. Score of Parentheses
Output:2
Input:"(())"
output: 1
Input: "()'
position[i]}
return fleet
ifn lastTime {
 cars[i] = car{float64(target-position[i]) / float64(speed[i]],
 return n
lastTime = cars[i].time 
fleet++
---
## Page 820
代码
数
按照括号匹配的原则，一步步的计算每个组合的分数入栈。遇到题目中的3种情况，取出栈顶元素算分
解题思路
计算出括号的分数值。
组。(A)代表2＊A，其中A也是已经满足匹配规则的括号组。给出一个括号字符串，要求按照这些规则
按照以下规则计算括号的分数：（代表1分。AB 代表A+B，A和B分别是已经满足匹配规则的括号
题目大意
Note:
Example 4:
2. 2 = K这一不等式，是为了满足常识二。之后的循环是此题的精髓，从双端队列的末尾开始往前遍
首元素并更新结果 res。队首移除元素，直到不满足 prefixSum[i]-prefixSum[deque[O]]
有以下2点"常识"一定成立：
小。如果固定的 ，那么对于 α，α越大，－× 的差值就越小(因为 α越逼近 )。所以想求
1. 如果 ×1y1，且 y2 的时候取α 还是
，最优解一定优先考虑 ×2。
prefixsum[x1] ≤ prefixsum[y] －k，×2 也能满足题意，并且 ×2 比 ×1 更加接近
为如果 prefixsum[x1] ≤ prefixsum[y] - k， 那么 prefixsum[x2] ≤
---
## Page 823
Example 1: 
can be returned in any order. 
lamsue aui aou aahuen au wo  auesp e aey neu sapou le jo sanien au jo is!l e una
We are given a binary tree (with root node root), a target node, and an integer value K.
题目
863. All Nodes Distance K in Binary Tree
Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2 
The nodes that are a distance 2 from the target node (with value 5)
Output: [7,4,1]
nave values 7, 4, and 1. 
Explanation: 
return -1
if res  0 && prefixsum[i]  O && prefixsum[i]-prefixsum[deque[O]] >= K { 
//下面这个循环希望能找到［deque[O］，i］区间内累加和 >=K，如果找到了就更新答案
[-(anbap)ual:]anbap = anbap 
if res > length { 
deque = deque[l:] 
//找到第一个deque[O］能满足条件以后，就移除它，因为它是最短长度的子序列了
length := i - deque[0]
 res = length 
---
## Page 824
解题思路
提示：
target 距离为K的所有结点的值的列表。
给定一个二叉树（具有根结点root）：
题目大意
Note:
·给出一颗树和一个目标节点 target，一个距离K，要求找到所有距离目标节点target 的距离是K 
4. 0  0 {
if leftDistance == O { 
if root == nil { 
return visit 
findDistanceK(root, target, K, &visit)
visit := []int{} 
return 
if rightDistance > O {
leftDistance := findDistanceK(root.Left, target, K, visit)
历一个点，距离都减一。
找到了 target，反之同理。如果当前节点就是目标节点，那么就可以直接记录这个点。否则每次遍
target，距离当前节点的距离〉0，则还需要在它的右子树中查找剩下的距离。如果是在右子树中
*visit = append(*visit, root.val)
 return
findchild(root.Left, rightDistance-1, visit)
findchild(root, rightDistance, visit)
 findchild(root, leftDistance, visit)
findchild(root, K, visit)
 return -1
findchild(root.Right, K-1, visit)
findchild(root.Left, K-l, visit)
return rightDistance - 1 
return leftDistance - 1 
findchild(root.Right, 
return K -
-1
1
leftDistance-l, visit)
---
## Page 826
走，也无法穿过一堵墙。如果途经一个钥匙，我们就把它捡起来。除非我们手里有对应的钥匙，否则无
匙，（"A","B",….）代表锁。
题目大意
Example 2: 
Return the lowest number of moves to acquire all keys. If it's impossible, return -1.
We are given a 2-dimensional grid. "" is an empty cell, "#" is a wall, "@ is the starting 
864. Shortest Path to Get All Keys
法通过锁。
我们从起点开始出发，一次移动是指向四个基本方向之一行走一个单位空间。我们不能在网格外面行
给定一个二维网格 grid。""代表一个空房间，“#"代表一堵墙，“@"是起点，（"a","b",..）代表钥
Note:
Example 1: 
chosen in the same order as the English alphabet.
and one lock for each key; and also that the letters used to represent the keys and locks were 
For some 1 >16, (state>>8)&0xFF
queue = queue[1:]
if isLock(board, nx, ny) && !canThroughLock {
if flag != 0 { 
newstate := keys 
 return res
if iskey(board, nx, ny) {
if board[nx][ny] == ‘#′ {
if !isInBoard(board, nx, ny) {
ny := starty + dir[i][1]
nx := startx + dir[i][0]
fullkeys |= (l << uint(v-'a'))
flag, canThroughLock := keys&(l<<(board[nx][ny]-'A')), false
-, v := range g { 
 continue 
 canThroughLock = true
 continue 
 continue 
"@"）{
---
## Page 829
[]int{}]
make([][][]bool,
func shortestPathAllkeysl(grid []string) int {
//解法二DFS，但是超时了，剪枝条件不够强
if res == math.MaxInt64 {
 searchKeys(board, &visited, fullkeys, 0, (starty<<16)|(startx<8), &res,
board, visited, startx, starty, res, fullkeys := make([][]byte, len(grid)),
for i := O; i < len(board); i++ {
for i := O; i< len(visited); i++ { 
for i, g := range grid {
for i := O; i < len(grid); i++ {
return -1
 return -1
 visited[i] = make([][]bool, len(board[0]]]
board[i] = []byte(g)
 board[i] = make([]byte, len(grid[o]])
 return 0
for j := O; j < len(board[o]); j++ 
if strings.contains(g,
for .
res++
visited[i][j] = make([]bool, 64)
if v == 'a' ll v == 'b' Il v == 'c' ll v == 'd' Il v =
fullkeys I= (l << uint(v-'a'))
-, v := range g {
visited[nx] [ny][newstate]  = true 
queue = append(queue, (ny<<l6)| (nx<<8)Inewstate)
if visited[nx][ny][newState] { 