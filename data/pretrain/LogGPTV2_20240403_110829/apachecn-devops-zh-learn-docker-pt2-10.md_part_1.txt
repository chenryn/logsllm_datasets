# 十、调试容器
调试已经成为软件工程领域的一个艺术组成部分。所有类型的软件构件，无论是单独的还是共同的，都需要经过软件开发和测试专业人员的深入和决定性的调查，以确保最终软件应用的安全性。由于 Docker 容器被认为是下一代任务关键型软件工作负载的关键运行时环境，因此对容器、工匠和作曲家来说，着手对容器进行系统而明智的验证和确认是相关且至关重要的。
这一章是专门为那些掌握所有准确和相关信息的技术人员编写的，他们可以仔细调试运行在容器内部的应用和容器本身。在本章中，我们还将研究作为容器运行的进程的进程隔离的理论方面。Docker 容器运行在主机上的用户级进程上，通常与操作系统提供的隔离级别相同。有了最新的 Docker 版本，可以使用许多调试工具来有效地调试应用。我们还将介绍主要的 Docker 调试工具，如`docker exec`、`stats`、`ps`、`top`、`events`、`logs`。Docker 的当前版本是用 Go 编写的，它利用了 Linux 内核的几个特性来提供它的功能。
本章将涵盖的主题列表如下:
*   Docker 容器的进程级隔离
*   调试一`Dockerfile`
*   调试容器化应用
All the commands in this chapter are tested on an Ubuntu environment and if you are running them on a local Mac environment, the results would differ.
在主机上安装 Docker 引擎后，可以使用`-D`调试选项启动 Docker 守护程序:
```
$ docker -D login
Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
Username (vinoddandy):   
```
该`-D`调试标志也可以在调试模式下对 Docker 配置文件(`/etc/default/docker`)启用:
```
DOCKER_OPTS="-D"  
```
保存并关闭配置文件后，重新启动 Docker 守护程序。
## Docker 容器的进程级隔离
在虚拟化范例中，虚拟机管理程序模拟计算资源，并提供称为虚拟机的虚拟化环境，以在其上安装操作系统和应用。然而，在容器范例的情况下，单个系统(裸机或虚拟机)被有效地分区以同时运行多个服务，而不会相互干扰。这些服务必须相互隔离，以防止它们踩在彼此的资源或依赖冲突(也称为依赖地狱)。Docker 容器技术本质上是通过利用 Linux 内核结构来实现进程级隔离的，例如名称空间和 cgroups，尤其是名称空间。Linux 内核提供了以下五个强大的名称空间杠杆，用于将全局系统资源相互隔离。这些是用于隔离 IPC 资源的**进程间通信** ( **IPC** )名称空间:
*   **网络**:该命名空间用于隔离网络资源，如网络设备、网络栈和端口号
*   **挂载**:这个名称空间隔离了文件系统挂载点
*   **PID** :这个名字空间隔离进程标识号
*   **用户**:这个命名空间用来隔离用户 ID 和组 ID
*   **UTS** :这个名字空间用来隔离主机名和 NIS 域名
当我们必须调试在容器内运行的服务时，这些名称空间增加了额外的复杂性，您将在下一节详细了解这一点。
在本节中，我们将通过一系列实际示例来讨论 Docker Engine 如何通过利用 Linux 命名空间来提供进程级隔离，这里列出了其中一个示例:
1.  首先使用`docker run`子命令以交互模式启动一个 Ubuntu 容器，如下所示:
```
 $ sudo docker run -it --rm ubuntu /bin/bash
 root@93f5d72c2f21:/#
```
2.  使用不同终端中的`docker inspect`子命令，继续查找前面的`93f5d72c2f21`容器的进程标识:
```
 $ sudo docker inspect \
 --format "{{ .State.Pid }}" 93f5d72c2f21
 2543
```
显然，从前面的输出来看，容器`93f5d72c2f21`的进程 ID 是`2543`。
3.  获得容器的进程标识后，让我们继续使用`ps`命令查看与容器相关联的进程在 Docker 主机中的外观:
```
 $ ps -fp 2543
 UID PID PPID C STIME TTY TIME 
 CMD
 root 2543 6810 0 13:46 pts/7 00:00:00 
 /bin/bash
```
很神奇，不是吗？我们启动了一个以`/bin/bash`为命令的容器，在 Docker 主机中也有`/bin/bash`进程。
4.  让我们更进一步，使用`cat`命令在 Docker 主机中显示`/proc/2543/environ`文件:
```
 $ sudo cat -v /proc/2543/environ
 PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin /bin^@HOSTNAME=93f5d72c2f21^@TERM=xterm^@HOME=/root^@$
```
在前面的输出中，`HOSTNAME=93f5d72c2f21`从其他环境变量中脱颖而出，因为`93f5d72c2f21`是容器 ID，也是我们之前启动的容器的主机名。
5.  现在，让我们回到终端，在那里我们运行我们的交互容器`93f5d72c2f21`，并使用`ps`命令列出在这个容器内运行的所有进程:
```
 root@93f5d72c2f21:/# ps -ef
 UID PID PPID C STIME TTY TIME CMD
 root 1 0 0 18:46 ? 00:00:00 /bin/bash
 root 15 1 0 19:30 ? 00:00:00 ps -ef
```
令人惊讶，不是吗？在容器内部，`/bin/bash`进程的进程 ID 是`1`，而在容器外部，在 Docker 主机中，进程 ID 是`2543`。此外，**父进程标识** ( **PPID** )为`0`(零)。
在 Linux 世界中，每个系统只有一个带有 PID `1`和 PPID `0`的`root`进程，这是该系统完整进程树的根。Docker 框架巧妙地利用了 Linux PID 命名空间来旋转一个全新的进程树；因此，在容器内部运行的进程不能访问 Docker 主机的父进程。但是，Docker 主机拥有 Docker 引擎旋转的子 PID 命名空间的完整视图。
网络命名空间确保所有容器在主机上都有独立的网络接口。此外，每个容器都有自己的环回接口。每个容器都使用自己的网络接口与外界对话。您会惊讶地发现，命名空间不仅有自己的路由表，还有自己的 iptables、链和规则。本章的作者正在他的主机上运行三个容器。在这里，每个容器有三个网络接口是很自然的。让我们运行`docker ps`命令:
```
$ sudo docker ps
41668be6e513 docker-apache2:latest "/bin/sh -c 'apachec
069e73d4f63c nginx:latest "nginx -g ' 
871da6a6cf43 ubuntu "/bin/bash"   
```
因此，有三个接口，每个容器一个。让我们通过运行以下命令来获取它们的详细信息:
```
$ ifconfig
veth2d99bd3 Link encap:EthernetHWaddr 42:b2:cc:a5:d8:f3
inet6addr: fe80::40b2:ccff:fea5:d8f3/64 Scope:Link
 UP BROADCAST RUNNING MTU:9001 Metric:1
veth422c684 Link encap:EthernetHWaddr 02:84:ab:68:42:bf
inet6addr: fe80::84:abff:fe68:42bf/64 Scope:Link
 UP BROADCAST RUNNING MTU:9001 Metric:1
vethc359aec Link encap:EthernetHWaddr 06:be:35:47:0a:c4
inet6addr: fe80::4be:35ff:fe47:ac4/64 Scope:Link
 UP BROADCAST RUNNING MTU:9001 Metric:1  
```
装载命名空间确保装载的文件系统只能由同一命名空间内的进程访问。容器 A 看不到容器 b 的挂载点，如果要检查挂载点，需要先使用`exec`命令登录到自己的容器(下一节描述)，然后转到`/proc/mounts`:
```
root@871da6a6cf43:/# cat /proc/mounts
rootfs / rootfsrw 0 0/dev/mapper/docker-202:1-149807 871da6a6cf4320f625d5c96cc24f657b7b231fe89774e09fc771b3684bf405fb / ext4 rw,relatime,discard,stripe=16,data=ordered 0 0 proc /procproc rw,nosuid,nodev,noexec,relatime 0 0   
```
让我们运行一个带有挂载点的容器，该挂载点作为**存储区域网络** ( **SAN** )或**网络连接存储** ( **NAS** )设备运行，并通过登录到该容器来访问它。这是给你的练习。我在工作中的一个项目中实现了这一点。
这些容器/进程可以隔离到其他名称空间中，即用户、IPC 和 UTS。用户命名空间允许您在命名空间内拥有根权限，而无需向命名空间外的进程授予特定的访问权限。用 IPC 命名空间隔离一个进程会给它自己的 IPC 资源，例如 System V IPC 和 POSIX 消息。UTS 命名空间隔离了系统的主机名。
Docker 已经使用`clone`系统调用实现了这个名称空间。在主机上，可以检查 Docker 为容器创建的命名空间(带 PID `3728`):
```
$ sudo ls /proc/3728/ns/
cgroup ipc mnt netpid user uts  
```
在 Docker 的大多数工业部署中，人们广泛使用打补丁的 Linux 内核来提供特定的需求。此外，一些公司已经修补了他们的内核，将任意进程附加到现有的名称空间，因为他们认为这是部署、控制和编排容器的最方便、最可靠的方法。
### 对照组
Linux 容器依赖于**控制组** ( **控制组**，它们不仅跟踪进程组，还公开 CPU、内存和块 I/O 使用的度量。您可以访问这些指标，也可以获得网络使用情况指标。Cgroups 是 Linux 容器的另一个重要组成部分。Cgroups 已经存在了一段时间，最初被合并到 Linux 内核代码 2.6.24 中。它们确保每个 Docker 容器将获得固定数量的内存、CPU 和磁盘 I/O，因此任何容器在任何情况下都无法在任何时间点关闭主机。Cgroups 在防止一个容器被访问方面没有作用，但是它们对于抵御一些**拒绝服务** ( **DoS** )攻击是必不可少的。
在 Ubuntu 16.04 上，在`/sys/fs/cgroup`路径中实现了一个 cgroup。Docker 的内存信息可在`/sys/fs/cgroup/memory/docker/`路径获得。
同样，在`/sys/fs/cgroup/cpu/docker/`路径中可以获得中央处理器的详细信息。
让我们找出容器可以消耗的最大内存限制(`41668be6e513e845150abd2dd95dd574591912a7fda947f6744a0bfdb5cd9a85`)。
为此，您可以前往 cgroup 内存路径并检查`memory.max_usage_in_bytes`文件:
```
/sys/fs/cgroup/memory/docker/41668be6e513e845150abd2dd95dd574591912a7
fda947f6744a0bfdb5cd9a85
```