---
author: Redhat
category: 代码英雄
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 4123
date: '2020-08-21 00:02:00'
editorchoice: false
excerpt: 这场竞赛的奖品是容器编排的控制权，参赛者包括行业内最快最强的玩家。
fromurl: https://www.redhat.com/en/command-line-heroes/season-1/the-containers-derby
id: 12535
islctt: true
largepic: /data/attachment/album/202008/21/000308a577z40hqta5qhpg.png
permalink: /article-12535-1.html
pic: /data/attachment/album/202008/21/000308a577z40hqta5qhpg.png.thumb.jpg
related:
- displayorder: 0
  raid: 12529
- displayorder: 1
  raid: 12551
reviewer: acyanbird
selector: bestony
summary: 这场竞赛的奖品是容器编排的控制权，参赛者包括行业内最快最强的玩家。
tags:
- 容器
- 代码英雄
thumb: false
title: 《代码英雄》第一季（5）：容器竞赛
titlepic: true
translator: lujun9972
updated: '2020-08-21 00:02:00'
---

> 《代码英雄》讲述了开发人员、程序员、黑客、极客和开源反叛者如何彻底改变技术前景的真实史诗。

**什么是《代码英雄》**

《代码英雄》是由红帽（Red Hat）精心制作的一系列原创音频播客，讲述开发人员、程序员、黑客、极客以及开源反叛者如何彻底改变技术前景的真实故事。该播客邀请了来自谷歌、NASA等重量级企业的众多技术专家，共同探讨开源、操作系统、容器、DevOps及混合云等领域的发展历程。

![](/data/attachment/album/202008/21/000308a577z40hqta5qhpg.png)

本文是《[代码英雄](https://www.redhat.com/en/command-line-heroes)》系列播客[第一季（5）：容器竞赛](https://www.redhat.com/en/command-line-heroes/season-1/the-containers-derby)的[音频](https://dts.podtrac.com/redirect.mp3/audio.simplecast.com/3aed4d5c.mp3)脚本。

随着容器技术的兴起，开发者们迎来了新的机遇，这极大地简化了在不同机器间传递项目的过程。伴随其日益普及，一场关于容器编排控制权的竞争悄然展开。这场竞赛吸引了行业内最顶尖的参与者，他们竞相争夺这一关键领域的主导地位。

容器技术被视为开源运动中的一项重大突破。本期节目中，特别嘉宾Kelsey Hightower、Laura Frank与Clayton Coleman将向我们揭示容器技术对未来的影响，以及编排工具的重要性。

**Saron Yitbarek**：
你是否曾观看过赛马？赛马们排列成行，蹄子刨着地面，蓄势待发。想象一下这样的场景，比赛即将开始，而胜出者将成为佼佼者。

**00:00:30**：
然而，这里竞争的并不是马匹，而是科技界的巨头。那么，是什么让这场比赛如此重要？又是什么样的宝贵奖励，促使这些参赛者争先恐后地加入其中呢？这是一场关乎容器编排规则制定权的竞赛，最终只会有一位胜利者。更重要的是，赢得这场比赛不仅意味着成为当下的赢家，还可能在未来持续保持领先地位。

**00:01:30**：
我是Saron Yitbarek，欢迎收听由红帽公司制作的《代码英雄》播客。第五集，我们将聚焦于容器竞赛。[上一集](/article-12529-1.html)中，我们见证了DevOps的崛起及其对开发者角色认知的影响。而在这一集中，我们将追溯容器技术的发展历史，探讨它如何通过支持新类型的工作进一步扩展了开发者的能力，并了解容器标准化是如何为这场竞赛奠定基础的。

**00:01:30**：
这是一场严肃且全球性的竞赛，吸引了业内速度最快、实力最强的选手参与。他们都准备好全力以赴，冲刺终点线。准备好了吗？比赛开始了！

现在，随着这些“赛马”离开起跑线，也许我们应该了解一下为什么这场比赛如此重要。谁会关心容器呢？好吧，我确实关心。但事实上，一开始我也并不真正理解容器的意义。接下来，我将分享一个小故事——我是如何逐渐认识到容器之美的。

**00:02:00**：
不久前，我还在为我的网站编写代码。有一天，我请朋友Nadia过来帮我实现一些新功能。我在保持代码整洁和可读性方面做得很好，当然也经过了充分测试。因此，再加入一位新的开发者应该不是难事。对吧？如果你也这么想，那你就错了。这个过程其实相当繁琐，尤其是在运行规范化测试时问题尤为突出。

**00:02:30**：
尽管代码在我这里运行正常，但我们无法同时在两台电脑上通过所有测试。我们的电脑存在奇怪的时区设置差异，而且她使用的Ruby on Rails版本与我不一致。这就出现了经典的问题：“在我的电脑上可以运行”，“但在我的电脑上不行”。我不得不对代码进行修改，直到它在我这里正常运行，但当我将其发送给Nadia时，程序又崩溃了。

**00:03:00**：
我意识到，我和Nadia遇到的问题是许多开发者都会经历的，甚至有时会被当作笑话来讲述。有时候，我只能把这些问题视为工作中必须忍受的一部分。我没有意识到的是，这个问题有一个终极解决方案。想象一种方式，可以消除人与人之间的障碍；想象一种方法，让我们能够在开发过程中使用自己喜欢的工具，并且在传递工作成果时毫无阻碍；想象一下，无论有多少人同时参与一个项目的开发，无论这些人分布在世界各地，都能确保从开发到测试再到生产环境的连贯性。如果我能早点了解到容器，就能避免浪费几周时间用笨拙的方法传递工作成果了。

**00:03:30 - Liz Rice**：
一个容器实际上就是一个进程。

**Saron Yitbarek**：
Liz Rice是Aqua Security的技术布道师。她解释了为什么容器如此实用。事实上，容器将一切打包成一个整洁且可迁移的包。

**00:04:00 - Liz Rice**：
这就像任何其他进程一样，不同之处在于容器的世界非常小。例如，当你启动一个容器时，进程会被授予自己的根目录。然后它认为自己正在查看整台计算机的根目录，但实际上它只是在查看文件系统的一个小部分。

**00:04:30 - Saron Yitbarek**：
通过打包可执行文件及其所有依赖项，容器可以在任何笔记本或云中的虚拟机上运行。它自带执行文件、库和依赖项。所有内容都包含在容器内。这就是容器的神奇之处——它在每个环境中都能完全一致地运行。这意味着开发者可以轻松共享并协作开发应用，而不必担心计算机之间不兼容的老问题。

**00:05:00**：
举个类比的例子可能会帮助你更好地理解。你听说过Blue Apron服务吗？该服务提供做饭所需的一切，包括按照菜谱卡片搭配好的所有食材。想象一下，如果Blue Apron不仅能提供未处理的食材，还能提供一个完整的厨房，包括煤气灶和所有你需要的厨具，所有东西都装在一个小盒子里，放在你的门口。这就是一个容器。在我提到的情况下，容器技术可以很好地解决Nadia加入时遇到的问题，就像使用Blue Apron服务做一顿晚餐一样简单。虚拟机也可以提供预装的环境，但要解释这一点，我们就需要放弃蓝围裙的比喻，来看一看具体的细节。

**00:05:30 - Liz Rice**：
许多人认为容器是一种轻量级的虚拟化技术，或者说是轻量级的虚拟机，但实际上并非如此。容器与虚拟机有很大不同。虚拟机有自己独立的操作系统，而容器则共享操作系统。一台计算机上的所有容器共享同一个操作系统。

**00:06:00 - Saron Yitbarek**：
最后一点，容器和虚拟机可以并肩工作。容器不能替代虚拟机。虚拟化技术仍然可以提高老旧系统的效率，并且对于服务器整合非常重要。但容器技术的兴起也为开发者打开了新的大门。如果我们完全依赖虚拟机，运行所有仿真服务器将产生巨大的额外负担。

**00:06:30**：
一台虚拟机的大小至少以G为单位，而一个容器可能只有20M左右。一台虚拟机可能需要几分钟才能启动，这对于部署网页应用来说并不是好消息。长期以来，人们一直渴望有一种更轻量级、更快捷的完整机器虚拟化替代方案出现。

**00:00:07**：