# 三、了解 Docker 网络
到目前为止，我们主要关注当我们位于主机系统的本地时如何访问容器。在一些用例中，可能只需要本地容器访问，但是通常，您会希望向外部用户或系统公开您的容器。向外部用户公开容器并不总是像运行一个容器那么简单。您需要考虑 Docker 提供的各种选项来将您的容器连接到网络。为了避免挫败感，您还应该了解系统如何使用 IP 进行通信，包括关于公开 IP 端口的任何限制。
在本章中，我们将涵盖以下主题:
*   探索 Docker 网络
*   创建用户定义的桥接网络
我们开始吧！
# 技术要求
本章没有任何技术要求。
如果您想使用本章中的示例创建网络，您可以使用我们在 [*第 1 章*](01.html#_idTextAnchor018)*Docker 和 Container Essentials* 中创建的 Docker 主机。我们将在本章示例中使用的网络在以后的章节中不需要。
您可以从第 1 章*Docker 和 Containers Essentials* 访问代码来创建 Docker 主机，方法是访问以下 GitHub 存储库:[https://GitHub . com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide](https://github.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide)。
# 探索 Docker 网络
在本节中，我们将讨论 Docker 中可用的网络选项，以及如何使用它们向外部用户和系统公开您的容器。Docker 包括各种网络选项来将容器连接到您的网络，如果没有一个包含的网络选项符合您的要求，您可以从许多第三方网络附加组件中进行选择，这些附加组件提供的功能可能不包含在基本网络栈中。默认情况下，Docker 网络专注于单个主机，但对于更复杂的用例，它包括网络功能，通过使用 Docker Swarm 来促进跨主机网络。由于该行业已经从使用 Docker Swarm 转向其他产品，如 Kubernetes，本章将重点介绍单主机网络。
为了避免暴露容器时的潜在挫败感，您应该很好地了解 IP 如何使用端口进行通信。你们中的许多人可能很了解 IP，但是我们认为提供一个关于 TCP/IP 如何使用端口进行通信的简短复习将是有益的。
## 快速的 TCP/IP 端口刷新
我们确实假设您有 TCP/IP 的工作知识，但是对于那些对此不熟悉的人来说，重要的是突出本章将参考的一些网络主题。理解端口是充分理解在 Docker 中公开服务的局限性的重要概念。
您可能知道，在系统上配置 IP 时，您会为系统中的每个网络适配器分配一个唯一的 IP 地址。当进行传入或传出连接时，请求包括 IP 地址和`1`和`65535`之间的端口。您可能并不总是在请求中看到端口，因为许多应用会根据所使用的协议自动将其包含在默认请求中。当您在浏览器中输入网址时，通常只需使用协议和主机名输入网址。举个例子，假设你想打开 Kubernetes 主页面，那么你在浏览器中输入 [http://kubernetes.io](http://kubernetes.io) 。未显示或未要求的是端口。HTTP 默认端口为 80，所有浏览器都会默认使用端口`80`的请求——幕后，浏览器正在请求 [http://kubernetes.io:80](http://kubernetes.io:80) 。
这个 IP 地址和端口的组合称为套接字，表示为 ** : ** (即`192.168.1.1:443`)。双向通信需要一个套接字。当您请求网页时，您的计算机将使用从`49152`和`65535`之间随机选择的端口发出请求。如果您是知识产权新手，这可能会有点混乱，因此下面是一个从工作站连接到两个不同 web 服务器的示例:
![Figure 3.1 – Socket example ](img/Fig_3.1_B15514.jpg)
图 3.1–插座示例
在*步骤 1* 中，从工作站向运行在`192.168.100.10`上的网络服务器发送请求。工作站使用随机生成的端口向端口`80`上的网络服务器发起输出请求。接下来，在*步骤 2* 中，网络服务器使用端口`49160`上的客户端 IP `of 192.168.100.150`回复客户端。
我们添加了*步骤 3* 来显示同时连接到另一个网络服务器将生成不同的输出端口，目标是端口 80 上的第二个网络服务器。
## 将端口绑定到服务
在服务器端你可能正在运行一个服务器比如 NGINX 来托管一个网站，你必须绑定一个套接字到 web 服务器进程。绑定的 IP 地址可以是单个 IP，也可以使用 0.0.0.0 地址绑定到所有 IP 地址，0.0.0 地址将端口绑定到服务器上所有可用的 IP 地址。
举个例子，我们将使用一台只有一张网卡和一个 IP 地址的主机。当你想将一个端口绑定到一个进程时，你要配置这个进程，使它使用服务器的 IP，并分配一个端口`80`。我们想突出最后一句的一个关键词，*捆绑*——顾名思义，捆绑某物就是把某物绑或系紧。当您将端口绑定到一个 IP 地址时，它是独占绑定的，不能绑定到使用该 IP 地址的任何其他正在运行的进程。换句话说，由于套接字已经绑定，它不能绑定到主机上的任何其他进程。
如果您尝试在已绑定的端口上配置进程，您将收到类似以下内容的错误:
```
Bind for 192.168.1.1:443 failed: port is already allocated
```
如果您想在主机上运行另一个进程，您只需要指定一个唯一的端口。在运行 NGINX 的同一台服务器上，您可以运行运行在端口`3306`上的 MySQL 服务器。由于该端口不同于运行在端口`80`上的网络服务器，因此它会创建一个唯一的套接字。
根据您对容器使用的 Docker 网络驱动程序，使用端口公开容器的方式会有所不同。在本章中，我们将解释常见的网络选项以及如何在您的主机上配置和使用它们。一旦您理解了这些选项，我们将通过查看如何使用端口分配向本地主机系统之外的用户公开您的容器来完成本章。
首先，让我们从讨论 Docker 包含的各种网络驱动程序开始。
## Docker 网络驱动程序
Docker 的网络系统是模块化的。一个基本的 Docker 安装包括几个网络驱动程序，如果你需要一个专门的网络驱动程序，有其他供应商提供的选项。出于本书的目的，我们将只为我们的网络使用随附的网络驱动程序。
默认情况下，您可以选择使用五种网络选项。现实中，你有四个选项，第五个选项是无；也就是说，禁用网络。下表详细说明了 Docker 包含的选项:
![Figure 3.2 – Docker networking drivers ](img/Fig_3.1a_B15514.jpg)
图 3.2–Docker 网络驱动程序
默认的 Docker 安装将包括几个预配置的网络:
*   默认桥接网络
*   默认主机网络
*   没有人
大多数 Docker 用户只是使用默认的桥接网络，这将适用于大多数用例，但它确实有一些需要考虑的限制。
在本节中，我们将讨论默认网桥网络、自定义网桥网络和无网络选项。当您的主机是 Docker Swarm 的一部分时，主要使用主机网络选项，但是如果您了解使用端口时如何暴露端口的限制，它可以在没有 Swarm 的情况下使用。
## 默认网桥网络
在上表中，您了解到桥接网络仅向运行在同一 Docker 主机上的容器提供网络连接。除非您使用 Docker Swarm 运行多个 Docker 主机，否则您通常会使用带有 Docker 容器的桥接网络。当您安装 Docker 时，它将创建默认的 Docker 桥接网络。通过为所有安装提供默认网桥，Docker 使得在容器中使用网络变得非常简单。许多用户只是开始使用带有默认网络设置和选项的 Docker，从而在不知道默认桥的限制和潜在安全风险的情况下启动容器。在使用 Docker 主机之前，您应该始终考虑根据您的需求创建一个用户定义的桥或多个桥。
Docker 包含一个易于使用的默认网络，那么为什么要考虑创建一个用户定义的网桥呢？由于默认桥保持向后兼容性，许多桥的特性不得不受到限制。由于这些限制，默认桥被认为比用户定义的桥差。虽然这听起来有点刺耳，但请考虑以下列表，其中详细列出了使用默认网桥时要考虑的事项:
*   When a container is started **without** a network specified, it will use the default bridge. This means that multiple containers will be able to communicate by default, without any consideration being given to the workloads.
    *考虑*:如果您正在运行多个容器，并且您想要将一些容器与其他容器隔离，您可能会无意中允许容器之间的通信，因为它们正在使用默认桥。
*   The default bridge limits communications between containers to IP addresses only. Containers connected to user-defined bridges can communicate using container names or IP addresses. Containers that use a user-defined bridge can communicate using IP addresses or host names.
    *考虑*:当你启动一个容器的时候，IP 地址可能和你上次运行镜像的时候不一样。
    如果您想配置一个具有多个交互容器的应用，您可以使用容器名称，这些名称在重新启动时将保持不变。如果您使用默认网桥，您可能需要更改配置文件，因为容器以不同的 IP 地址开始。
*   Containers that use the default bridge need to be stopped before you can move them to a different network. However, on a container using a user-defined switch, you can change the network without restarting the container.
    *考虑*:根据您的工作负载，如果没有同意的维护窗口，您可能无法停止正在运行的容器。虽然在大多数公司中，网络变更仍然需要变更请求，但是如果您使用的是用户定义的桥，则无需停止容器即可完成。这将限制对应用的任何潜在影响，并在新网桥配置错误时提供快速回切。
*   Using a single default bridge limits networking options for all containers. Since all the containers are on a single network, all networking settings are the same for all containers.
    *考虑*:您可能会要求某些容器运行巨型帧，而其他容器将使用标准的 MTU 大小。如果只使用了单个默认网桥，则只能设置一个 MTU 大小。但是，您可以创建一个用户定义的桥，将 MTU 设置为 9000，另一个保持默认 MTU 大小为 1500。
有了这个，你就可以明白为什么我们提到默认桥不如用户定义的桥了。根据您的使用情况，您可能能够使用默认桥来满足您的所有需求，就本书而言，我们将在练习中使用默认桥。但是，在运行 Docker 的生产环境中，您应该**始终**创建一个新的用户定义的桥。
现在，您已经了解了各种网络选项以及每种类型的优缺点，是时候深入研究管理和创建 Docker 网络了。在创建网络之前，我们将了解 Docker 默认包含的默认网络，以及如何使用 Docker CLI 查看网络的详细信息。
## 查看可用网络
要查看 Docker 主机上的所有现有网络，我们可以使用 Docker CLI 中的`network`管理选项和`ls`选项。当您执行 Docker 网络列表时，您的输出将类似于以下内容:
![Figure 3.3 – Default Docker network list ](img/Fig_3.2_B15514.jpg)
图 3.3–默认 Docker 网络列表
上面的列表来自基本的 Docker 安装，因此只有三个默认网络选项可用。
`docker network ls`命令不包含很多信息；它旨在为您提供可用网络的快速摘要。为了更深入地了解网络的细节，您可以请 Docker 检查网络，它将提供所有的网络设置。
## 检索网络上的详细信息
一旦你创建了多个用户定义的网络，你可能会开始忘记每个网络的设置，或者每个网络上运行的是什么容器。您可以使用`docker network inspect `选项查看主机上每个网络的详细信息。`inspect`命令的输出包含网络的详细信息，包括子网、网关、驱动程序类型和所有连接的容器:
![Figure 3.4 – network inspect output ](img/Fig_3.3_B15514.jpg)
图 3.4–网络检查输出
前面的截图显示网络是一座桥，但是我们已经从`"Driver": "bridge"`部分的输出中知道了。在输出的容器部分，可以看到桥上连接了两个容器。第一个容器名为`NGINX1`，IP 地址为`192.168.10.3`，第二个容器名为`frontend`，IP 地址为`192.168.10.2`。`inspect`命令还显示每个容器的分配的媒体访问控制地址，如果启用，还显示 IPV6 地址。
现在，您已经知道如何跟踪主机上的网络，让我们深入了解用户定义的网桥。
# 创建用户定义的网桥网络
当您创建新的用户定义网络时，您可以提供在 Docker 之外创建新网络时使用的大多数标准 IP 选项。您可以为子网、IP 范围和网关设置选项。请记住，您在此定义的网络仅在 Docker 主机内部，您分配的 IP 地址在主机外部不可寻址。要了解更多高级选项，您可以访问[的高级 Docker 网络页面。](https://docs.docker.com/engine/reference/commandline/network_create/#specify-advanced-options)