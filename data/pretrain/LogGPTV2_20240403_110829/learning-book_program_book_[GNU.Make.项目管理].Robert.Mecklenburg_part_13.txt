应的根目录才会返回根目录本身。请注意，你所看到的只是findstring的范例。
事实上，你可以自己编写一个函数来返回当前目录树的根目录。
此外还有两个“搜索和替换”函数：
$(subst search-string,replace-string,text)
这是一个不具通配符能力的“搜索和替换”函数。它最常被用来在文件名列表中将
一个扩展名替换成另一个扩展名：
sources:= count_words.c counter.c lexer.c
objects := $（subst.c,.o,S（sources）)
这可以在S（sources）中将所有出现.c字样的地方都替换成.o，或者较一般的说
接下来的例子，你常可以在说明空格对函数调用的参数有何影响的范例中看到。请
注意，逗号之后不可以有空格。如果我们将前面的代码做如下的改变：
sources:=count_words.c counter.c lexer.c
objects :=S（subst .c,.o,S（sources))
（注意每个逗号之后的空格）$（objects）的值将会变成这样：
count_words.o counter.o lexer.o
这并不是我们想要的结果。问题出在.参数之前的空格是“替换字符串”的一部
分，所以会被放在输出字符串中。c参数之前的空格没有问题，因为第一个参数之
前的任何空白符号都会被make移除。事实上，S（sources）之前的空格也还好，
因为S（objects）最有可能被作为一个简单的命令行参数，此时前导的空格是没
有问题的。然而，我从来不会在一个函数调用中，在逗号之后以不一致的方式加上
空格，即使这么做的结果是正确的：
#这个函数调用加空格的方式实在令人难以捉摸
objects :=S（subst.c,.o,$(source）)
---
## Page 89
函数
79
请注意，subst并不知道什么文件名或扩展名，它只知道字符所构成的字符串，所
以S（source）中只要出现.c字样就会被替换掉。例如，文件名car.cdr.c将会被
转换成car.odr.o。或许这并不是你想要的。
你可以在“自动产生依存关系”一节的最后一个makefile范例中看到它使用subst
这个函数：
VPATH
=srcinclude
CPPFLAGS-I include
SOURCES=count_words.c\
lexer.c
counter.c
count_words.o: counter.h
counter.o:counter.h 1exer.h
lexer.o:lexer.h
include $（subst .c,.d,S(SOURCES))
8.d:8.c
S(CC)-M S(CPPFLAGS)$<>Sθ.SSSS;
sed's，\(s*\)\.ol：1*,\1.o$θ：，g'$@；
rm -f se.ssss
此处，subst函数被用来将源文件列表转换成依存文件列表。因为这些依存文件将
会成为include的参数，所以make会把它们作为必要条件，并且使用&.a规则
来更新它们。
$(patsubst search-pattern,replace-pattern,text)
这是一个具通配符能力的“搜索和替换”函数。照例，此处的模式只可以包含一个
&字符。replace-pattern中的百分比符号会被扩展成与模式相符的文字。切记，
search-pattern必须与text的整个值进行匹配。例如，下面的例子只会删除
text结尾的斜线符号，而不是text中的每个斜线符号：
strip-trailing-slash=$(patsubst$/,&,S(directory-path))
对于相同的替换操作来说，替换引l用（substitutionreference）是个具可移植性的
做法。替换引用的语法如下：
$（variable:search=replace)
其中，search可以是一个简单的字符串，如果是这样的话，只要该字符串出现在
一个单词的结尾（即后面接着空格或变量值的结尾），就会被替换成replace。此
外，search可以包含一个代表通配字符的&，如果是这样的话，make会依照
patsubst的规则进行搜索和替换的操作。我觉得这个语法含糊不清，与patsubst
相比较难读懂。
如我们先前所见，变量通常会包含一串单词。接下来我们会看到可以从一份列表中选出
所需单词的函数、计算列表长度的函数等。如同所有其他的make函数，单词列表中是
以空格为分隔符。
---
## Page 90
80
第四章
S（words text)
此函数会返回text中单词的数量。
CURRENT_PATH := $（SubSt/，，S（HOME))
:spIcM
@echo My HOME path has S（words S（CURRENT_PATH)) directories
本书将会多次使用此函数，稍后我们将会看到，不过它通常需要跟其他函数一起使
用。
$(words n,text)
此函数会返回text中的第n个单词，第-个单词的编号是1。如果n的值大于text
中单词的个数，则此函数将会返回空值。
version_1ist:=S（subst.,，$（MAKE_VERSION）)
minor_version :=$（word 2,s（version_list）)
其中，MAKE_VERSION是一个内置变量（参见“标准的make变量”一节）。
你总是能够以如下的方式取得列表中的最后一个单词：
current := $（wOrd $(words S(MAKEFILE_LIST)),S(MAKEFILE_LIST))
这将会返回最近所读取的makefile的文件名。
S(firstword text)
此函数会返回text中的第一个单词。此功能等效于$（word1，text）。
version_list:=S（subst.,,S(MAKE_VERSION))
major_version := $(firstword $(version_list))
$（wordlist start,end,text)
此函数会返回text中范围从start（含）到end（含）的单词。如同word函数，
第一个单词的编号是1。如果start的值大于单词的个数，则函数所返回的是空
值：如果end的值大于单词的个数，则函数将会自start开始返回所有单词。
#$(calluid_gid,user-name）
uid_gid=$（wordlist3,4,\
$（subst:，，
$（shell grep*~$1:*/etc/passwd））)
重要的杂项函数
在我们使用这些函数来管理文件名之前，让我们先来了解两个非常有用的函数：sort
和shell。
$(sort list)
sort函数会排序它的list参数并且移除重复的项目。此函数运行之后会返回按
照字典编纂顺序排列的不重复的单词列表，并以空格作为分隔符。此外，sort函
数还会删除前导以及结尾的空格。
---
## Page 91
函数
81
dbsd
t}=
=bdst=
因为sort函数是由make直接实现，所以它并不支持sort程序所提供的任何选
项。此函数的参数通常是一个变量或是另一个make函数的返回值。
$（shellcommand)
shell函数的参数会被扩展（就像所有其他的参数）并且传递给subshell来执行。
然后make会读取command的标准输出，并将之返回成函数的值。输出中所出现的
一系列换行符号会被缩减成单一空格符号，任何接在后面的换行符号都会被删除。
标准错误以及任何程序的结束状态都不会被返回。
stdout:=$（shell echo normalmessage)
stderr :=$（shell echo error message 1>&2)
shell-value:
$（stdout）
#（stderr)
如你所见，stderr的信息就像往常那样被送往终端机，所以shell函数的输出中并不
会包含stderr的信息：
$ make
error.message
你可以在下面看到一个用来创建一组目录的循环：
REQUIRED_DIRS =..
_MKDIRS :=$（shel1 for din S（REQUIRED_DIRS）;\
do
p$Sd-TPxu11[[ps$p-1]
done)
通常，若能确保在任何命令脚本运行之前，必要的输出目录已经存在，则makefile
的编写会比较容易。这个make变量（即_MKDIRS）会创建必要的目录，它会使用
bashshell的for循环来确保这些必要的目录已经存在。双中括号是用来进行
bash的条件测试，它的语法跟test程序类似，但是它不会进行单词的分隔以及
路径名称的扩展。因此，如果变量所包含的文件名里有内置的空格符号，则测试的
动作仍会正确地进行（而且不用加上引号）。在makefile文件中，这个make变量的
赋值动作应该提早进行，以确保命令脚本或变量在使用输出目录之前就已经存在。
_MKDIRS的值无关紧要，而且make实际上并不会用到_MKDIRS变量本身。
因为she11函数可用来调用任何外部的程序，所以使用时应该小心以对。特别是，你应
该考虑简单变量与递归变量之间的差异。
START_TIME:= S(shell date)
CURRENT_TIME =S（shel1 date)
---
## Page 92
82
第四章
START_TIME变量会在定义的时候执行一次date命令。在makefile文件中，CURRENT_
TIME变量每被使用一次就会执行一次aate命令。
包含重复的内容：
$(call has-duplicates,word-list)
has-dupiicates=$(fiiter
$(words $1)
$(words S(sort $i))))
这个函数将会分别对单词列表（word-list）的两个版本（一个内容可能重复，另一个内
容绝不会重复）计算单词的数量，然后比较这两个数字。然而，make函数并不了解数
字，只了解字符串，因此我们必须把数字作为字符串来比较。最简单的方法就是使用
filter函数。所以我们会在其他的数字中搜索一个数字。如果这两个数字相同，has-
duplicates函数将会返回一个非空值（non-null）。
使用如下的方法，你可以通过时间戳轻易产生出文件名来：
RELEASE_TAR:=mpwm-S(shel1 date +&F).tar.gz
这会产生如下的文件名：
mpwm-2003-11-11.t.ar.gz
让date多做一点事，我们也可以产生同样的文件名：
RELEASE_TAR:= S（shel1 date +mpwm-8F.tar.gz)
接下来的函数可用来把相对路径（例如相对于com的目录）转换成完整的Java类名：
#S(call file-to-class-name,file-name)
file-to-class-name:= $(subst /,.,S(patsubst 8.java,8,S1))
使用两个subst函数也可以达到相同的目的：
S(call file-to-class-name,file-name)
file-to-class-name :=S(subst /,.,S(subst.java,,$1))
接着，我们可以通过此函数来调用Java类：
CALIBRATE_ELEVATOR:= com/wonka/CalibrateElevator.java
calibrate:
S(JAVA)S(Ca1l file-to-ClasS-name,S(CALIBRATE_ELEVATOR))
---
## Page 93
函数
83
如果你在S（sources）里的文件名发现com之前具有多个上层目录组件，你可以使用
如下的函数，并以自录树的根目录作为第一个参数来移除它们（注3）：
#s（call file-to-class-name,root-dir,file-name）
file-to-class-name := $（subst/..,
$（subst.java，
$（subst $1/,.$2)))
当你看到嵌套函数调用的时候，通常采取“由内而外”的方式最容易理解。让我们从最
里面的subst开始，此函数首先会移除S1/字符串，接着会移除，java字符串，最后会
把所有的斜线符号全都转换成点号。
文件名函数
makefile的编写者通常会花许多时间在文件的处理上。难怪有很多make函数被提供来协
助此工作。
$（wildcard pattern...)
第二章曾提到过，通配符可被用于工作目标、必要条件以及命令脚本等语境中。但
如果我们想将此功能用在其他语境中，例如变量定义，该怎么办？使用shell函
数，我们可以通过subshell来扩展模式，但如果我们需要经常这么做，运行起来将
会非常地慢。此时，我们可以使用wildcard函数：
sources :=$（wildcard*.c*.h)
wildcard函数的参数是一份模式列表，它会对列表中的每个模式进行扩展的动
作。（注4）如果被扩展的模式找不到相符的文件，则会返回空字符串。如同工作目
标和必要条件中的通配符扩展一样，wildcard函数也支持shell的文件名匹配字符
（globbingcharacter）：~、*、？、[...]和{...]。
wildcard的另一个用法，就是在条件语句中测试文件是否存在。与if函数（稍
后会提到）并用时，你常会看到wildcard函数调用的参数中并未包含任何的通
配字符。例如：
dot-emacs-exists:= S（wildcard ~/.emacs)
将会返回空字符串，如果用户的主目录中并未包含.emacs这个文件。
注3：在Java中，包所声明的类名、建议（以颠倒的形式）使用开发者的完整网络域名。此外，
目录结构通常会按照包结构来摆放，因此，许多源代码树看起来会像这样：roor-dir/com/
company-name/dir.
注4：
make3.80的在线使用手册所举的例子都只有一种模式。
---
## Page 94
8
第四章
$(dir list...)
dir函数会返回list中每个单词的目录部分。下面的用户自定义函数会返回包含
C源文件的每个子目录：
source-dirs := S(sort
$(dir
$（shell find.-name*.c')))
find命令会返回当前目录中所有C源文件的文件路径，接着由dir函数删掉文件
名的保留目录的部分，最后由sort移除重复的项目。请注意，为避免每次此变量被
使用时会重新执行find命令（假设在makefile运行期间，源文件会自发性地出现
和不见），此处所定义的变量是一个简单变量。接着举一个需要定义递归变量的例
子：
#$（call source-dirs,dir-list）
source-dirs=$（sort
$(dir
$（shell find S1-name*.c'))）
这个版本的source-dirs变量将会使用目录列表（以空格为分隔符）作为它的第一个
参数。这个参数包含了find命令所要搜索的-个或多个目录。find命令将会以第
一个“破折号”作为目录列表的终止符（我用了几十年，居然没发现这个find功
能！）。
$（notdir name...)
notdir函数会返回文件路径的文件名部分。例如，下面的用户自定义函数会从一
个Java源文件返回Java的类名：
#$(call get-java-class-name,file-name)
get-java-class-name =S(notdir S（subst.java,,S1))
我们经常可以看到air和notdir会被一起使用来产生必要的输出。举例来说，假
设你必须在输出文件所在的目录中执行自定义shell脚本以产生输出文件。