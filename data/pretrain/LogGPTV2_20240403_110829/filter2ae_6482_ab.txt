    # -*- encoding:utf8 -*-    
    def getPassword(str):
        restr=''
        i=1
        while i 
一道代码审计题目，依然很精简。
后来题目环境变了， assert不能使用了，之前assert可以说是个bug，还是要来一遍正规做法。
题目url:
首先要绕过正则，数字字母下划线被过滤，但是需要调用函数，使用create_function创建函数，\create_function就是调用全局的create_function函数，正好绕过了正则，接下来就是拼接字符串。poc
    http://120.79.1.69:10006?action=\create_function&arg=){}system('ls');//
拼入字符串后的结果。
    \create_function(){}system('ls');//,'');
得到flag。
# web7
这道题目依然是代码审计，主要是考弱比较以及MD5等方面的绕过。
题目url:
打开即可获得源码，这里我贴出源码。
     6)) 
    {
        echo "a OR b fail!";
        die();
    }
    if ((strlen($m) > 4) || (strlen($n) > 4)) 
    {
        echo "m OR n fail";
        die();
    }
    $str8 = hash('md5', $a, false);
    $str9 = strtr(hash('md5', $b, false), $m, $n);
    echo "str8 : $str8";
    echo "str9 : $str9";
    if (($str8 == $str9) && !($a === $b) && (strlen($b) === 6))
    {
        echo "You're great,give you flag:";
        echo $flag;
    }
还算比较常规比较简单的源码，主要是考几个php知识点。
1.首先需要传参数str1不能等于str2，但是需要md5一样，不清楚的百度php md5弱比较。也就是字符串QNKCDZO
和字符串s878926199a，这两个加密出来的md5是
    MD5("QNKCDZO")=0e830400451993494058024219903391
    MD5("s878926199a")=0e545993274517709034328855841020
在php中如果是0e开头的字符串进行==比较，会认为是科学记数法0e，0的几次方，所以结果自然是0，这样就达到了字符串比较不相等，但是MD5值相等的绕过方法，前提是0e后面跟的是数字，如果是0e1a223...，0e后面有个a字母则无法转化成0。
2.str3和str4和str1
str2差不多，唯一变化是这次用到了!==需要绕过，但是在这种严密的!==，0e这种不可以绕过了，他会一个一个字符的对比，而不是解析为0，这个时候需要用到数组类型不同来绕过，也就是str3[]=1,str4=0，因为这两种根本不是同一种类型的，所以自然无法比较返回false，进而绕过。
3.str5 str6
str7，首先第一个肯定不能三个相等，但是下面又用严格的判断必须md5相等，在php中===和!==这种几乎是没办法绕过的，所以只能让他们的md5真正相等，如果一开始就去绕可能就陷进去了，这个判断的难点在于找到三个真正相等的MD5值的原型。这里参考一篇文章。
    https://xz.aliyun.com/t/3161#toc-5
基于全等的MD5碰撞绕过这一目录下的讲解，很详细，需要下载他所说的两个工具，然后按照他的命令
    D:\fastcoll>fastcoll_v1.0.0.5.exe -o jlzj0 jlzj1      #-o参数代表随机生成两个相同MD5的文件
    D:\fastcoll>fastcoll_v1.0.0.5.exe -p jlzj1 -o jlzj00 jlzj01  #-p参数代表根据jlzj1文件随机生成两个相同MD5的文件，注意：生成的MD5与jlzj1不同
    D:\fastcoll>tail.exe -c 128 jlzj00 > a                #-c 128代表将jlzj00的最后128位写入文件a，这128位正是jlzj1与jlzj00的MD5不同的原因
    D:\fastcoll>tail.exe -c 128 jlzj01 > b                #同理
    D:\fastcoll>type jlzj0 a > jlzj10                    #这里表示将jlzj0和a文件的内容合并写入jlzj10
    D:\fastcoll>type jlzj0 b > jlzj11                    #同理写入jlzj11
生成文件即可，生成的文件内容进行MD5加密就是相同的，但是需要url编码提交到burp里面发包,如果在浏览器里会自动解码，出现大大小小的各种问题。
    编码参考：https://xz.aliyun.com/t/2232
最终将生成的三个url编码之后的分别复制给str5 str6 str7。
4.第四个点，首先post
a和b，然后进入第二个判断，a必须是大写字母，b必须是数字，(is_numeric函数也有一些漏洞)，b的长度不能大于6，这里我们把视角移到最后一个if判断
    if (($str8 == $str9) && !($a === $b) && (strlen($b) === 6))
这里用===判断，b的长度必须为6，刚刚我们说了===很难绕过，所以b的长度就只能为6，其中a不能等于b，这个很容易做到，str8 == str9，
    $str8 = hash('md5', $a, false); 
    $str9 = strtr(hash('md5', $b, false), $m, $n);
很显然又是需要0e来绕过使得md5后的a
b相等，这里a的值很简单，利用网上现有的MD5之后的原型QNKCDZO，并且都是大写，但是b想要找到六位的并且0e开头能够利用的仿佛并找不到，这里想了很久，不过还好有一个字符替换，
    strtr(hash('md5', $b, false), $m, $n)
这里是将m替换为n，这样我们就可以利用替换，将一些可能构造的md5值构造成我们需要的，比如
0e123123aaa，我们可以让m=a，n=1，替换为0e123123111，这样就可以进行判断绕过了，这里还要提到上面提示了一个点用is_numeric函数的漏洞，他可以接受十六进制，0xFFFF他同样认为是数字，所以我们写个脚本找到0e开头的md5值，然后替换掉其中的字母，最终绕过。
    for($i=1000;$i>";
            echo $c;
            echo "";
        }
    }
选择其中一个
0x6156=====>>0ec4899c94ada8d08a6ada8623c6ff01
刚好md5值有数字 cadf，四个字符刚好用长度最大为4的m n来替换，完整的poc，得到flag。