# S2-057漏洞原作者自述：如何利用自动化工具发现五个RCE

##### 译文声明
本文为翻译文章，原文来源：lgtm.com
原文地址：[链接]
译文仅供参考，具体内容及含义以原文为准。

2018年4月，我向Apache Struts和Struts安全团队报告了一个新的远程代码执行（RCE）漏洞——CVE-2018-11776（S2-057）。该漏洞在某些配置的服务器上运行Struts时，可以通过访问精心构造的URL来触发。这一发现是我对Apache Struts持续安全性研究的一部分。在这篇文章中，我将详细介绍发现漏洞的过程，并说明如何利用以前的漏洞信息来理解Struts内部的工作原理，创建QL查询以高亮显示有问题的代码。这些工程都托管在GitHub上，我们也会继续向此存储库添加更多查询语句和库，以帮助Struts及其他项目的安全性研究。

## 映射攻击面
许多安全漏洞涉及从不受信任的源（例如用户输入）流向特定位置（sink）的数据，并且数据采用了不安全的处理方式，如SQL查询、反序列化等。QL可以轻松搜索此类漏洞。只需描述各种source和sink，然后让DataFlow库完成这些工作。对于特定项目，一种好的方法是查看旧版本软件的已知漏洞，这有助于深入了解你想要查找的source和sink点。
在这个漏洞发现过程中，我首先查看了RCE漏洞S2-032（CVE-2016-3081）、S2-033（CVE-2016-3687）和S2-037（CVE-2016-4438）。与Struts中的许多其他RCE一样，这些漏洞涉及不受信任的输入被转为OGNL表达式，允许攻击者在服务器上运行任意代码。这三个漏洞特别有意思，因为它们不仅揭示了Struts的内部工作机制，而且实际上是同一个问题，但修复了三次！这些问题都是由于远程输入通过变量`methodName`作为方法参数传递给`OgnlUtil::getValue()`造成的。

`ActionProxy`接口定义了多种方法，如`getMethod()`、`getActionName()`和`getNamespace()`。这些方法看起来像是从URL返回信息，因此我假设所有这些方法都可能返回不受信任的输入。接下来，我使用QL开始对这些不受信任的源进行建模。

## 识别OGNL的 sink点
现在我们已经识别并描述了一些不受信任的来源，下一步是为sink点做同样的事情。许多Struts RCE涉及将远程输入解析为OGNL表达式。Struts中有许多函数最终将其参数作为OGNL表达式；对于我们在本文中讨论的三个漏洞，使用了`OgnlUtil::getValue()`，而在漏洞S2-045（CVE-2017-5638）中，则使用了`TextParseUtil::translateVariables()`。我们可以寻找用于执行OGNL表达式的常用函数，如`OgnlUtil::compileAndExecute()`和`OgnlUtil::compileAndExecuteMethod()`。

## 第一次尝试
现在我们已经在QL中定义了source和sink，可以在污点跟踪查询中使用这些定义。通过定义DataFlow配置来使用DataFlow库。这里我使用之前定义的`isActionProxySource`和`isOgnlSink`。我还重载了`isAdditionalFlowStep`，以便包含污染数据传播的额外步骤。例如，如果我有通过某个网络层进行通信的组件，可以在QL中描述这些网络端的代码，允许DataFlow库跟踪被污染的数据。

对于此特定查询，我添加了两个额外的流程步骤供DataFlow库使用。第一个包括标准QL TaintTracking库步骤，用于跟踪标准Java库调用和字符串操作等。第二个是一个近似值，允许我通过字段访问跟踪污点数据。虽然这种方法并不总是准确，但对于挖漏洞非常有用。

## 初始结果和细化查询
我在最新版本的源代码上运行QL，发现因S2-032、S2-033和S2-037仍然被标记。经过分析，我认为尽管最初通过过滤输入修复了漏洞，但在S2-037之后，Struts团队决定通过调用`OgnlUtil::callMethod()`替换对`OgnlUtil::getValue()`的调用来修复它。`callMethod()`封装了`compileAndExecuteMethod()`，后者在执行之前对表达式执行额外检查。这意味着我们可以从sink点中删除`compileAndExecuteMethod()`。重新运行查询后，高亮显示对`getMethod()`作为sink的调用的结果消失了，但仍有一些结果高亮显示了`DefaultActionInvocation.java`中的代码。

## 路径探索和进一步查询细化
为了搞清楚为什么这些结果被标记，需要能够看到DataFlow库用于生成这些结果的每个步骤。QL允许编写特殊的路径问题查询，这些查询可生成可逐节点探索的可变长度路径。在撰写这篇博客的时候，LGTM本身没有关于路径问题查询的路径探索UI，因此我使用了另一个Semmle应用程序：QL for Eclipse。这是一个Eclipse插件，允许完成污点跟踪中的各个步骤。

在`initial.ql`中运行查询，在QL for Eclipse中选择结果后，您可以在Path Explorer窗口中看到从源到接收器的详细路径。通过逐步分析，我发现`getActionName()`返回的值会流入`pkg.getActionConfigs()`返回的对象的`get()`方法的参数中。点击下一步，可以看到`key`到了`ValueStackShadowMap::get()`方法。事实证明，因为`pkg.getActionConfigs()`返回一个`Map`，而`ValueStackShadowMap`实现了`Map`接口，所以理论上`pkg.getActionConfigs()`返回的值可能是`ValueStackShadowMap`的一个实例。因此，QL DataFlow库显示了从变量`chainedTo`到类`ValueStackShadowMap`中的`get()`实现的潜在流程。实际上，`ValueStackShadowMap`类属于jasperreports插件，该类的实例仅在几个地方创建。因此我觉得问题应该不在`ValueStackShadowMap::get()`，我通过在`DataFlow::Configuration`中添加一个barrier来排除这种结果。

## 发现漏洞
只有10对source和sink，很容易通过手工检查这些是否是真正的问题。通过一些路径，我发现有些路径是无效的，因此在查询中添加了一些barrier来过滤掉这些路径。最终的结果比较有意思。以`ServletActionRedirectResult.java`中的源代码为例，在第一步中，调用`getNamespace()`的source通过变量`namespace`流入`ActionMapping`构造函数的参数中。继续跟踪这些步骤，看到`getUriFromActionMapping()`返回一个URL字符串，该字符串使用构造的`ActionMapping`中的命名空间。然后通过变量`tmpLocation`流入`setLocation()`的参数。然后`setLocation()`在超类`StrutsResultSupport`中设置`location`。然后代码在`ServletActionResult`上调用`execute()`，将`location`字段传递给`conditionalParse()`。`conditionalParse()`然后将`location`传递给`translateVariables()`，它将参数转化为引擎盖下的OGNL表达式。所以当在`ServletActionRedirectResult`中没有设置`namespace`参数时，代码从`ActionProxy`获取命名空间，然后将其作为OGNL表达式。

为了验证这个想法，我替换了showcase应用程序中的一个配置文件（例如`struts-actionchaining.xml`）中的`struts`标签，并在本地运行showcase应用程序，访问了一个旨在触发此漏洞的URL并执行shell命令以在我的计算机上打开计算器应用程序。弹出计算器了（中间还花了一些时间绕过OGNL沙箱）。来自`ActionChainResult`、`PostbackResult`和`ServletUrlRenderer`的不可信来源也能弹出计算器！`PortletActionRedirectResult`中的那个可能也可以，但我没有测试。四个RCE足以证明问题的严重性。

## 结论
在这篇文章中，我已经展示了通过使用已知（过去）的漏洞来帮助构建应用程序的污点模型，然后由QL DataFlow库找新的漏洞。特别是通过研究Struts中之前的三个RCE，最终找到了四个（也可能是五个）！鉴于S2-032、S2-033和S2-037都是在短时间内被发现和修复的，安全研究人员清楚地研究了S2-032用以寻找类似问题并发现S2-033和S2-037。这里就有问题了：我发现的漏洞（S2-057）也来自类似的污染源，为什么安全研究人员和供应商之前没发现？在我看来，这是因为S2-032、S2-033和S2-037之间的相似性在某种意义上是局部的，因为它们都出现在源代码中的相似位置（全部在Rest插件中）。S2-057和S2-032之间的相似性处于更加语义的层面。它们由受污染的源链接，而不是源代码的位置，因此任何能够成功找到这样的变体的软件或工具都需要能够在整个代码库中执行这种语义分析，就像我现在可演示的QL。如果你认为我的这些发现只是运气好，因为我假设`ActionProxy`中的命名空间字段已经被污染了，那么请继续关注下一篇文章，我会展示更多的细节问题，并从传入的`HttpRequestServlet`本身开始，从“第一原则”开始进行一些污点跟踪。我还将从我的“漏洞狩猎工具箱”中分享一些工具，以及一些改进查询的一般提示。在这样做的过程中，QL还捕获了漏洞S2-045！