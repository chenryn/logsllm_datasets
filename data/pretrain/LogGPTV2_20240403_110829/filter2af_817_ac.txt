    lib.print_python_bytes(s)
## 新的Python脚本
以下是新Python 3脚本（main_bytes.py）的完整源代码：
    #!/usr/bin/env python3
    '''
    Prints:
    - the address of the bytes object
    - a b"string" (bytes object)
    - information about the bytes object
    And then:
    - reads a char from stdin
    - prints the same (or not :)) information again
    '''
    import sys
    import ctypes
    lib = ctypes.CDLL('./libPython.so')
    lib.print_python_bytes.argtypes = [ctypes.py_object]
    s = b"Holberton"
    print(hex(id(s)))
    print(s)
    lib.print_python_bytes(s)
    sys.stdin.read(1)
    print(hex(id(s)))
    print(s)
    lib.print_python_bytes(s)
运行
    julien@holberton:~/holberton/w/hackthevm1$ ./main_bytes.py 
    0x7f04d721b210
    b'Holberton'
    [.] bytes object info
      address of the object: 0x7f04d721b210
      size: 9
      trying string: Holberton
      address of the data: 0x7f04d721b230
      bytes: 48 6f 6c 62 65 72 74 6f 6e 00
正如所料：
  * id（）返回对象本身的地址（0x7f04d721b210）
  * 对象的数据大小（ob_size）为9
  * 我们的对象的数据是“Holberton”，48 6f 6c 62 65 72 74 6f 6e 00（它以头文件bytesobject.h中指定的00结尾）
## rw_all.py
既然我们对正在发生的事情（指python字节对象结构）有了更多的了解，可以“暴力搜索”映射的内存区域了。让我们更新替换字符串的脚本。不只查看栈或堆，让我们查看进程的所有可读和可写内存区域。这是源代码：
    #!/usr/bin/env python3
    '''
    Locates and replaces (if we have permission) all occurrences of
    an ASCII string in the entire virtual memory of a process.
    Usage: ./rw_all.py PID search_string replace_by_string
    Where:
    - PID is the pid of the target process
    - search_string is the ASCII string you are looking to overwrite
    - replace_by_string is the ASCII string you want to replace
    search_string with
    '''
    import sys
    def print_usage_and_exit():
        print('Usage: {} pid search write'.format(sys.argv[0]))
        exit(1)
    # check usage
    if len(sys.argv) != 4:
        print_usage_and_exit()
    # get the pid from args
    pid = int(sys.argv[1])
    if pid <= 0:
        print_usage_and_exit()
    search_string = str(sys.argv[2])
    if search_string  == "":
        print_usage_and_exit()
    write_string = str(sys.argv[3])
    if search_string  == "":
        print_usage_and_exit()
    # open the maps and mem files of the process
    maps_filename = "/proc/{}/maps".format(pid)
    print("[*] maps: {}".format(maps_filename))
    mem_filename = "/proc/{}/mem".format(pid)
    print("[*] mem: {}".format(mem_filename))
    # try opening the file
    try:
        maps_file = open('/proc/{}/maps'.format(pid), 'r')
    except IOError as e:
        print("[ERROR] Can not open file {}:".format(maps_filename))
        print("        I/O error({}): {}".format(e.errno, e.strerror))
        exit(1)
    for line in maps_file:
        # print the name of the memory region
        sline = line.split(' ')
        name = sline[-1][:-1];
        print("[*] Searching in {}:".format(name))
        # parse line
        addr = sline[0]
        perm = sline[1]
        offset = sline[2]
        device = sline[3]
        inode = sline[4]
        pathname = sline[-1][:-1]
        # check if there are read and write permissions
        if perm[0] != 'r' or perm[1] != 'w':
            print("\t[\x1B[31m!\x1B[m] {} does not have read/write permissions ({})".format(pathname, perm))
            continue
        print("\tpathname = {}".format(pathname))
        print("\taddresses = {}".format(addr))
        print("\tpermisions = {}".format(perm))
        print("\toffset = {}".format(offset))
        print("\tinode = {}".format(inode))
        # get start and end of the memoy region
        addr = addr.split("-")
        if len(addr) != 2: # never trust anyone
            print("[*] Wrong addr format")
            maps_file.close()
            exit(1)
        addr_start = int(addr[0], 16)
        addr_end = int(addr[1], 16)
        print("\tAddr start [{:x}] | end [{:x}]".format(addr_start, addr_end))
        # open and read the memory region
        try:
            mem_file = open(mem_filename, 'rb+')
        except IOError as e:
            print("[ERROR] Can not open file {}:".format(mem_filename))
            print("        I/O error({}): {}".format(e.errno, e.strerror))
            maps_file.close()
        # read the memory region
        mem_file.seek(addr_start)
        region = mem_file.read(addr_end - addr_start)
        # find string
        nb_found = 0;
        try:
            i = region.index(bytes(search_string, "ASCII"))
            while (i):
                print("\t[\x1B[32m:)\x1B[m] Found '{}' at {:x}".format(search_string, i))
                nb_found = nb_found + 1
                # write the new string
            print("\t[:)] Writing '{}' at {:x}".format(write_string, addr_start + i))
                mem_file.seek(addr_start + i)
                mem_file.write(bytes(write_string, "ASCII"))
                mem_file.flush()
                # update our buffer
            region.write(bytes(write_string, "ASCII"), i)
                i = region.index(bytes(search_string, "ASCII"))
        except Exception:
            if nb_found == 0:
                print("\t[\x1B[31m:(\x1B[m] Can't find '{}'".format(search_string))
        mem_file.close()
    # close files
    maps_file.close()
运行
    julien@holberton:~/holberton/w/hackthevm1$ ./main_bytes.py 
    0x7f37f1e01210
    b'Holberton'
    [.] bytes object info
      address of the object: 0x7f37f1e01210
      size: 9
      trying string: Holberton
      address of the data: 0x7f37f1e01230
      bytes: 48 6f 6c 62 65 72 74 6f 6e 00
    julien@holberton:~/holberton/w/hackthevm1$ ps aux | grep main_bytes.py | grep -v grep
    julien     4713  0.0  0.8  37720  8208 pts/0    S+   18:48   0:00 python3 ./main_bytes.py
    julien@holberton:~/holberton/w/hackthevm1$ sudo ./rw_all.py 4713 Holberton "~ Betty ~"
    [*] maps: /proc/4713/maps
    [*] mem: /proc/4713/mem
    [*] Searching in /usr/bin/python3.4:
        [!] /usr/bin/python3.4 does not have read/write permissions (r-xp)
    ...
    [*] Searching in [heap]:
        pathname = [heap]
        addresses = 00e26000-00f11000
        permisions = rw-p
        offset = 00000000
        inode = 0
        Addr start [e26000] | end [f11000]
        [:)] Found 'Holberton' at 8e422
        [:)] Writing '~ Betty ~' at eb4422
    ...
    [*] Searching in :
        pathname = 
        addresses = 7f37f1df1000-7f37f1fa7000
        permisions = rw-p
        offset = 00000000
        inode = 0
        Addr start [7f37f1df1000] | end [7f37f1fa7000]
        [:)] Found 'Holberton' at 10230
        [:)] Writing '~ Betty ~' at 7f37f1e01230
    ...
    [*] Searching in [stack]:
        pathname = [stack]
        addresses = 7ffdc3d0c000-7ffdc3d2d000
        permisions = rw-p
        offset = 00000000
        inode = 0
        Addr start [7ffdc3d0c000] | end [7ffdc3d2d000]
        [:(] Can't find 'Holberton'
    ...
    julien@holberton:~/holberton/w/hackthevm1$
如果我们在运行的main_bytes.py中按Enter键...
    julien@holberton:~/holberton/w/hackthevm1$ ./main_bytes.py 
    0x7f37f1e01210
    b'Holberton'
    [.] bytes object info
      address of the object: 0x7f37f1e01210
      size: 9
      trying string: Holberton
      address of the data: 0x7f37f1e01230
      bytes: 48 6f 6c 62 65 72 74 6f 6e 00
    0x7f37f1e01210
    b'~ Betty ~'
    [.] bytes object info
      address of the object: 0x7f37f1e01210
      size: 9
      trying string: ~ Betty ~
      address of the data: 0x7f37f1e01230
      bytes: 7e 20 42 65 74 74 79 20 7e 00
    julien@holberton:~/holberton/w/hackthevm1$
成功了
## 结尾
我们设法修改Python 3脚本使用的字符串。非常好！但我们仍然有一些问题要回答：
  * [堆]内存区域中的“Holberton”字符串是什么？
  * Python 3如何在堆外分配内存？
  * 如果Python 3没有使用堆，那么它在object.h中说“对象是在堆上分配的结构”是指什么？
这将是下一次的讨论  
与此同时，如果你迫不及待下一篇文章，你可以试着自己找出答案。
## 文件
[这里](https://github.com/holbertonschool/Hack-The-Virtual-Memory/tree/master/01.%20Python%20bytes "这里")包含本教程中创建的所有脚本和动态库的源代码：
  * main.py: 第一个目标
  * main_id.py：第二个目标，打印字节对象的id
  * main_bytes.py：最终目标，使用我们的动态库打印有关字节对象的信息
  * read_write_heap.py：用于查找和替换进程堆中的字符串的“原始”脚本
  * read_write_stack.py：与上一个作用相同，但是在栈中搜索和替换而不是堆
  * rw_all.py：与之前作用相同，但是在每个可读写的内存区域中
  * bytes.c：用于打印有关Python 3字节对象的信息的C函数