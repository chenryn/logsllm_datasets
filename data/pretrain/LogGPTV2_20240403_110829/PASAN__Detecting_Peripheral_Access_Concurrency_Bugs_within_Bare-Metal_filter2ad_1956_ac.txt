and the list of concurrently executable instructions (obtained
above), PASAN identiﬁes the lock objects used to lock in-
structions, and the lock span of each lock object, i.e., the start
(using a lock function) and the end (using an unlock func-
tion) of the lock object.
For example, in Figure 4, the store instruction is placed
between the mutex_lock and mutex_unlock functions with
a lock object lock1. Similarly, a lock object called lock2 is
used for the load instruction. However, in spite of these locks,
different threads (i.e., Threads 1 and 2 in Figure 5) can con-
currently execute these locked instructions because different
locks are used for the two instructions. To detect such cases,
PASAN performs context-sensitive analysis of the complete
call stack. Such call stack shows (1) the called functions on
the stack and (2) the call instruction’s unique identiﬁer (csId)
of its callee in a bottom-up fashion. As shown in Figure 5,
254    30th USENIX Security Symposium
USENIX Association
void @spi_cmd() {…call @mutex_lock(%lock1);store i32 0x10,  i32* 0x40007400mutex_unlock(%lock1);….call @mutex_lock(%lock2);%10 = load i32, i32* 0x40007404call @mutex_unlock(%lock2);….}MMIOAccessInstructionsstore i32 0x10,i32* 0x40007400%10 = load i32,i32* 0x40007404ThreadCallStackListThread1Call Stackspi_cmd, csId: 1233sd_write, csId: 798log_z, csId: 622update_z, csId: 210main, csId: -spi_cmd, csId: 1233sd_write, csId: 798log_z, csId: 622update_z, csId: 210main, csId: -Thread2Call Stackspi_cmd, csId: 1233sd_write, csId: 999log_cmd, csId: 633exe_cmd, csId: 30IOThreadEntry, csId: -spi_cmd, csId: 1233sd_write, csId: 999log_cmd, csId: 633exe_cmd, csId: 30IOThreadEntry, csId: -…Call StackFigure 6: An example of a simple transaction for a peripheral device. The high-level operations are described in the four top
columns. Then, we show transaction spans which should be covered by a respective ideal lock span identiﬁed by PASAN at
the bottom with threads’ call stacks. Here, Thread 1 is executed with main as an entry function, and Thread 2 is executed with
IOThreadEntry as an entry. Both can be executable concurrently.
(cid:46) F is target analysis function
(cid:46) Analyze each instruction in F
else if ISTOOLARGEDISTANCE(L, Thr) then
else if ISCALLINST(cs,c,IR) then
(cid:46) Disconnect a too long transaction span
return L
Initialize L;
for e ∈ E do
if ISINSTBELONGSTOTRANSACTIONSPAN(cs,c,MI) then
(cid:46) Main Function
(cid:46) Iterate all entry functions
(cid:46) Initialize call stack (cs)
return L
C ← GETINSTRUCTIONS(IR,F)
for c ∈ C do
(cid:46) Iterate non-repeated recursive callees
Lin ← L(cid:48)
(cid:46) To keep the currently analyzed a transaction span
cs.PUSH({ce,c}) (cid:46) Update cs with a callee (ce) and call instruction (c)
Lin ← RECURSIVEEXTRACTION(cs,T hr,Lin,IR,MI,F)
cs.POP()
L ← UPDATELOCKSPAN(Lin,L)
(cid:46) Restore cs
Initialize cs;
cs.PUSH({e,NULL})
L(cid:48) ← RECURSIVEEXTRACTION(cs,T hr,L,IR,MI,e)
L ← L∪ DISCONNSPAN(cs,L(cid:48))
L ← EXTENDSPAN(cs,T hr,MI,c,L)
L ← DISCONNSPAN(cs,L)
callees ← GETNONREPEATEDRECURSIVECALLEES(cs,c,IR)
L(cid:48) ← L
for ce ∈ callees do
Algorithm 1 [T4] Transaction Span Extraction Per MMIO Address Range.
Input: Intermediate representation codes (IR), Target MMIO access instruction set
(MI), Entry and interrupt handler bottom functions (E), Threshold values between
device access instructions (T hr)
Output: Extracted transaction spans (L)
1: function TRANSACTIONSPANEXTRACTION(IR,T hr,MI,E)
2:
3:
4:
5:
6:
7:
8:
9: function RECURSIVEEXTRACTION(cs,T hr,L,IR,MI,F)
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
sequence of updates in each alias variable and backtracking
relevant instructions, i.e., store and load instructions and
value-updating instructions on the constant MMIO address
values (e.g., add and or operations). During the backtracking,
when PASAN ﬁnds a constant value for an alias variable, it
maps an MMIO address range covering this constant value
into that alias variable. Finally, the set of (potentially accessi-
ble) MMIO address ranges are mapped to each of the store
and load instructions.
Determining Boundaries of a Transaction. Utilizing the
list of instructions and their accessed MMIO address ranges,
PASAN pursues the intuitive algorithm shown in Algorithm 1
to detect the boundaries (start and end) of a transaction. For
each target instruction, PASAN computes a metric called “ac-
cess distance” which is deﬁned as the number of instructions
between the target instruction and the next related instruction
which access the same MMIO address range. We note that
a large access distance indicates that the peripheral device’s
driver code are not executed for a large number of instructions,
which may indicate the end of a transaction between the host
and the peripheral (Line 14-15). As such, PASAN considers
the target instruction and the next related instruction to belong
to the same transaction if the access distance between them
is smaller than a threshold denoted by T hr (Line 12-13). For
example, in Figure 6, the instructions SEQ.1,3-6 (as shown
in the “MMIO Access Instructions” row) are determined to
be part of the same transaction. We note that PASAN also
collects thread call stacks as shown in the “Thread Call Stack
List” in Figure 6 to check whether each transaction can be
executed concurrently by different threads. We will explain
how to use call stack information in Section 3.5.
Speciﬁcally, PASAN determines whether an MMIO access
instruction belongs to a transaction span (Line 12) if the
following three cases are satisﬁed.
• Case-1: Peripheral MMIO Wait Pattern: The host employs
a wait instruction (e.g., the sleep function call) when it
needs to wait for the completion of a job requested to the
peripheral. In other words, a wait instruction is a part of
the state machine of an ongoing transaction. Hence, in Fig-
ure 6, PASAN considers the instructions SEQ.1 and SEQ.2
to belong to the same transaction (part of Line 12-13).
• Case-2: Different Access Distance Thresholds: PASAN can
encounter a mix of instructions accessing different periph-
erals with different drivers. In such cases, PASAN utilizes
different threshold values for different peripherals. For ex-
ample, to transfer a large amount of data to an Ethernet
card, a device driver may delegate the data copy job to a
direct memory access (DMA) unit. In this case, since it is
usually a temporary, small job, PASAN selects a smaller
threshold value (T hrd) for the access distance instead of the
default longer threshold value (T hri) (part of Line 12-13).
We will further demonstrate the impact of this threshold in
Section 4 and their effectiveness in Section 5.2.
USENIX Association
30th USENIX Security Symposium    255
SEQ.1SEQ.2SEQ.3SEQ.4SEQ.5SEQ.6Access OperationWrite at 0x0 offsetWaitRead at 0x4 offsetWrite at 0x8 offsetWrite at 0x8 offsetWrite at 0x8 offsetPurposeSend a Command Wait for a Command Ready ResponseDeviceReady CheckData TransferData TransferData Transfer DoneMMIO Access Instructionsstorei32 0x10, i32* 0x40007400callvoid @usleep(2000)%10 = loadi32, i32* 0x40007404storei32 %9, i32* 0x40007408storei32 %9, i32* 0x40007408storei32 0xFFFFFFFF, i32* 0x40007408ThreadCall StackListThread 1Call Stackspi_cmd, csId: 1233sd_write, csId: 798log_z, csId: 622update_z, csId: 210main, csId: -spi_wait, csId: 811sd_write, csId: 798log_z, csId: 622update_z, csId: 210main, csId: -spi_wait, csId: 811sd_write, csId: 798log_z, csId: 622update_z, csId: 210main, csId: -spi_write, csId: 937sd_write, csId: 798log_z, csId: 622update_z, csId: 210main, csId: -spi_write, csId: 937sd_write, csId: 798log_z, csId: 622update_z, csId: 210main, csId: -spi_done, csId: 997sd_write,csId: 798log_z, csId: 622update_z, csId: 210main, csId: -Thread 2Call Stackspi_cmd, csId: 1233sd_write, csId: 999log_cmd, csId: 633exe_cmd, csId: 30IOThreadEntry, csId: -spi_wait, csId: 811sd_write, csId: 999log_cmd, csId: 633exe_cmd, csId: 30IOThreadEntry, csId: -spi_wait, csId: 811sd_write, csId: 999log_cmd, csId: 633exe_cmd, csId: 30IOThreadEntry, csId: -spi_write, csId: 937sd_write, csId: 999log_cmd, csId: 633exe_cmd, csId: 30IOThreadEntry, csId: -spi_write, csId: 937sd_write, csId: 999log_cmd, csId: 633exe_cmd, csId: 30IOThreadEntry, csId: -spi_done, csId: 997sd_write, csId: 999log_cmd, csId: 633exe_cmd, csId: 30IOThreadEntry csId: -...Same lockon differentcall stacks?:MMIOAccessFunction:ThreadEntryFunctionFigure 7: An example of a simple transaction for a peripheral device. The high-level operations are described in (a). Then, we
show the example buggy lock enforcement in (b). Finally, we present the transaction span which should be covered by the proper
lock span in (c).
• Case-3: Write Access Inclusion: PASAN considers an ex-
tracted transaction to be a potential target for a concurrency
bug only if the transaction contains at least one write in-
struction. We note that the host can perform a read instruc-
tion (on a register that an MMIO address is mapped into)
without interacting with any peripheral. In most cases, it
usually does not affect the state machine transition of a
peripheral. However, if we include read-only transactions,
it would cause a large number of false positives because the
status of some peripherals (e.g., timer and USART) are not
volatile, and hence not vulnerable to unprotected concurrent
reads as they maintain their own internal states. Therefore,
we chose to use “write-access-inclusion” heuristic to reduce
the false positive rate of concurrency bug detection in the
next step (Section 3.5).
Handling Call Instruction. Once PASAN starts to analyze
a call instruction, it recursively handles that call instruction
ﬁrst. During this step, PASAN keeps tracking the call stack
to abide by context-sensitivity (Line 4-5, 21, 23). Other than
that, PASAN needs to handle two challenges: recursive calls
and indirect calls. To prevent repeated recursive function call
analysis, PASAN generates a non-repeated callee list (Line
17) [68]. To handle the case of indirect calls, PASAN ﬁrst
retrieves the list of callees. If that is a direct call instruction,
there is only one callee in the list. Otherwise, there can be
multiple callees with different call stacks. For that, PASAN
makes copies (corresponding to the number of such callees)
of the transaction under analysis (Line 17-24). Note that these
copied transactions are processed independently to determine
their boundaries.
3.5 Concurrency Bug Detection
Now we describe how PASAN detects concurrency bugs
caused by concurrent transactions of a peripheral. PASAN
takes the following inputs from the previous steps: (1) con-
currently executable instructions, (2) ranges of instructions
locked by certain lock objects, and (3) transaction spans. Then,
PASAN detects which parts of transactions can be concur-
rently executed even with the enforced locks.
We notice that these transaction concurrency bugs prevail
in embedded systems because it is challenging for developers
to correctly enforce every lock span to cover the complete
transaction (we demonstrate two real-world examples in Sec-
tions 5.5 and 5.6). As such, we observe three common charac-
teristics of a buggy lock span as demonstrated in Figure 7: (1)
instructions (e.g., SEQ.1 and SEQ.4) which access different
MMIO addresses are locked separately; (2) an instruction
(e.g., SEQ.2) accessing no MMIO address is not considered
for locking; and (3) a load instruction (e.g., SEQ.3) perform-
ing a read-only access is not locked. In contrast, PASAN takes
a novel approach combining the following two strategies: the
address-range-aware strategy and transaction-aware strat-
egy guided by the extracted complete transaction spans. We
note that these transaction spans are obtained using Algo-
rithm 1 in Section 3.4, e.g., the transaction span shown in
Figure 7(c). Without the guidance of the extracted transaction
spans, traditional concurrency bug detectors would either con-
sider it unnecessary to protect some instructions or protect
them with different locks and separate lock spans as shown
in Figure 7(b). Next, we elaborate on how and why the trans-
action spans are related to the concurrency bug detection.
• Address-range-aware strategy: PASAN must check
whether two accessed MMIO addresses are accessed by
the same peripheral. For example, in Figure 7(a), SEQ.1
accesses the memory at an offset of 0x0 from the base ad-
dress, SEQ.3 accesses the memory at offset of 0x4, and
SEQ.4-SEQ.6 access the memory at an offset of 0x8. With
a naïve strategy, only SEQ.4-6 will be considered as ac-
cesses by the same peripheral, and the resulting discon-
nected locks may cause concurrency issues. Hence, by em-
ploying an address-range aware strategy, PASAN detects
SEQ.1, SEQ.3 and SEQ.4-6 can be accessed by the same
peripheral.
• Transaction-aware strategy: PASAN must also check
whether a sequence of instructions belonging to the same
transaction is protected by a single lock span. For example,
in Figure 7, PASAN detects that SEQ.1 and SEQ.4-SEQ.6
belong to the same transaction. Note that this strategy also
helps to cover sequences SEQ.2 (i.e., the wait pattern that
was not considered as a part of a transaction) and SEQ.3
(detected by the address-range-aware strategy), which are
not normally considered as protection targets in spite of
them being parts of the same transaction spanning from
SEQ.1 to SEQ.6.
256    30th USENIX Security Symposium
USENIX Association
SEQ.1SEQ.2SEQ.3SEQ.4SEQ.5SEQ.6Access DetailWrite at 0x0 offsetWaitRead at 0x4 offsetWrite at 0x8 offsetWrite at 0x8 offsetWrite at 0x8 offsetPurposeSend a Command Wait for a Command Ready ResponseDevice Ready CheckData TransferData TransferData TransferDone(a) In-order Transaction (c) PASAN’sCompleteLock SpanLock 1(b)BuggyLock SpanLock 1Lock 2Lock 2Lock 2(cid:46) Main Function
for Tj ∈ Mt do
Initialize CR;
for Ti ∈ Mt do
Algorithm 2 Concurrency Bug Detection Per MMIO Address Range.
Input: Mapping an instruction into a set of the possible contexts (Minst), Mapping
a MMIO into a set of transaction spans (Mt), Mapping an instruction into alias lock
objects (Mlock)
Output: Concurrency Bug Report (CR)
1: function CONCURRENCYBUGDETECTION(Minst ,Mt ,Mlock)
2:
3:
4:
5:
6:
7: function CONCURRENCYBUGANALYSIS(Ti,Tj,Minst ,Mlock)
8:
9:
10:
11:
12:
13:
14:
for tcs j ∈ Tj do
if ISCONCURRENTLYEXECUTABLE(tcxti ,tcxt j ,Minst ) then
si ← GETLOCKSPAN(tcsi ,Mlock)
s j ← GETLOCKSPAN(tcs j ,Mlock)
if
CR ← CR∪ CONCURRENCYBUGANALYSIS(Ti,Tj,Minst ,Mlock)
(cid:46) Get one transaction with a call stack. cs is a call stack
(cid:46) Get another transaction with a call stack
(cid:46) Get locks and their spans in tcsi
(cid:46) Get locks and their spans in tcs j
then
(cid:46) Get one transaction set
(cid:46) Get another transaction to make a comparison pair
CHECKLOCKSPANANDOBJ(si,s j,tcsi ,tcs j ) == False
Initialize cr;
for tcsi ∈ Ti do
(cid:46) Get one lock span
return CR
(cid:46) Check whether a lock protects both transactions
cr ← cr∪{tcsi ,tcs j}
return cr
15:
16:
(cid:46) Return the concurrency bug result for this pair
Algorithm. To detect concurrency bugs, PASAN ﬁrst identi-
ﬁes the transactions by combining both address-range-aware
and transaction-aware strategies. Then PASAN analyzes con-
currently executable instructions (obtained in Section 3.3) to
check whether the proper lock objects have been employed to
cover the transactions (extracted in Section 3.4).
Algorithm 2 shows the pseudo code of the concurrency
detection mechanism. PASAN ﬁrst takes two transactions (de-
noted as Ti and Tj) accessing the same MMIO address range
from the transaction list (Line 3-4). Then, PASAN checks
whether Ti and Tj can be executable concurrently (Line 7-16).
We note that both transactions can be “identical” (i.e., Ti = Tj)
when they are concurrently executed in two different threads.
For example, two transactions shown in Figure 6 execute the
same MMIO access functions (i.e., sd_write and its callee
functions, such as spi_cmd, as indicated by the same call site
identiﬁer csId). However, those transactions can be executed
concurrently because Thread 1 and Thread 2 (whose entry
functions are main and IOThreadEntry) concurrently exe-
cute the same transaction in different call stacks and call sites
as described in the “Thread Call Stack List” row. As such,
PASAN must consider them for concurrency bugs if the locks
are not identical between different call stacks or they do not
cover SEQ.1-6.
As such, PASAN obtains the call stacks from the transac-
tion (denoted as Tcsi and Tcs j in Line 9-11). If the call stacks
are different, PASAN needs to check if their threads and their
locksets are different. To determine if their threads are differ-
ent, PASAN ﬁrst checks the entry functions of Tcsi and Tcs j
(Line 11). If that is true, PASAN obtains (i) lock spans and
(ii) lock objects for MMIO access instructions of Tcsi and Tcs j
(Line 12-13). Then, PASAN checks whether there is a concur-
rency issue between Tcsi and Tcs j (Line 14). Essentially, if the
existing locks do not cover either Tcsi or Tcs j, each of them has
a concurrency bug. Next, if the lock spans cover each of Tcsi
and Tcs j, PASAN checks whether both of them are locked by
Table 2: Target embedded platforms. NT: the number of
threads; NI: the number of interrupt handlers; and ND: the
number of compiled device drivers.
Platform
OS
Version
NI
ND
Lines of
Compiled
Code
116,815
46,683
17,378
12,762
20,291
5,857
89,405