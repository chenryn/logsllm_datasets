### 优化后的文本

#### 字典方法
- `radiansdict.values()`：以列表形式返回字典中的所有值。
- `pop(key[, default])`：删除并返回字典中与给定键 `key` 对应的值。如果提供了 `default` 参数且 `key` 不存在于字典中，则返回 `default` 值；否则，若 `key` 未给出或不在字典中，将引发 `KeyError`。
- `popitem()`：随机返回并移除字典中的一对键值（通常为最后一个插入的项）。

#### 1.5.5 集合
集合 (`set`) 是一个无序且不重复元素的集合体，主要功能包括关系测试和去重。此外，集合还支持如联合 (`union`)、交集 (`intersection`)、差集 (`difference`) 和对称差集 (`symmetric difference`) 等数学运算。

在 Python 中，可以使用 `"x in set"` 来判断 `x` 是否属于该集合；通过 `len(set)` 获取集合内元素数量；以及利用 `for x in set` 迭代遍历集合内的每个成员。但需要注意的是，由于集合并不记录其内部元素的具体位置，因此它不支持基于索引的位置访问或切片操作。

**示例1-11：** 集合的定义及常用操作
```python
>>> x = set('abcd')  # 创建由单个字符组成的集合 x
>>> y = set(['a', 'bc', 'd', 10])  # 创建由列表元素构成的集合 y
>>> print(x, y)  # 打印 x, y
({'a', 'b', 'c', 'd'}, {10, 'a', 'bc', 'd'})
>>> print(x & y)  # 计算交集
{'a', 'd'}
>>> print(x | y)  # 计算并集
{10, 'a', 'b', 'c', 'd', 'bc'}
>>> print(x - y)  # 差集，即 x 中存在而 y 中不存在的元素
{'b', 'c'}
>>> print(x ^ y)  # 对称差集，即只出现在其中一个集合中的元素
{10, 'b', 'c', 'bc'}
```

**示例1-12：** 利用集合去除列表中的重复元素
```python
>>> a = [11, 22, 33, 44, 11, 22]
>>> b = set(a)
>>> print(b)
{11, 22, 33, 44}
```

表1-7展示了集合的一些基本操作及其等效表达方式：
- `s.add('x')`：向集合 `s` 中添加一项。
- `s.update([10, 37, 42])`：向 `s` 添加多项。
- `s.remove('H')`：从 `s` 中移除指定项，若该项不存在则抛出异常。
- `len(s)`：获取集合 `s` 的大小。
- `x in s` / `x not in s`：检查 `x` 是否存在于/不存在于 `s` 中。
- `s.issubset(t)`：测试 `s` 是否是 `t` 的子集。
- `s.union(t)`：返回包含 `s` 和 `t` 所有元素的新集合。
- `s.intersection(t)`：返回两个集合共有的元素组成的新集合。
- `s.difference(t)`：返回仅在 `s` 而不在 `t` 中出现的元素。
- `s.symmetric_difference(t)`：返回非共同拥有的元素。
- `s.copy()`：创建 `s` 的浅拷贝。
- `s.discard(x)`：尝试从 `s` 中移除 `x`，即使 `x` 不存在也不会报错。
- `s.pop()`：随机移除并返回集合中的一个元素，若集合为空则抛出异常。
- `s.clear()`：清空集合 `s` 内的所有内容。

注意，当使用非运算符版本（例如 `s.union()`) 时，这些函数接受任何可迭代对象作为参数；而运算符版本（如 `&`, `^`, `-`, `|`）则要求参与运算的对象必须是集合类型。

#### 1.5.6 函数
函数是一种封装代码的方式，用于提高程序模块化程度和代码复用率。它们能够隐藏实现细节，减少冗余代码量，并增强程序的可读性。

**示例1-13：** 定义一个简单的梯形面积计算函数
```python
>>> def fun(a, b, h):
...     return (a + b) * h / 2
...
>>> print(fun(3, 4, 5))
17.5
```

**示例1-14：** 多次调用上述函数计算不同梯形的面积
```python
>>> for a, b, h in [(3, 4, 5), (7, 5, 9), (12, 45, 20), (12, 14, 8), (12, 5, 8)]:
...     print(f"上底{a}, 下底{b}, 高{h}的梯形，面积为{fun(a, b, h)}")
...
上底3, 下底4, 高5的梯形，面积为17.5
上底7, 下底5, 高9的梯形，面积为54.0
上底12, 下底45, 高20的梯形，面积为570.0
上底12, 下底14, 高8的梯形，面积为104.0
上底12, 下底5, 高8的梯形，面积为68.0
```
为了提升代码可读性，可以通过命名参数来调用此函数：
```python
>>> def trapezoidal_area(upperLength, bottom, height=5):
...     return (upperLength + bottom) * height / 2
...
>>> print(trapezoidal_area(upperLength=3, bottom=4, height=5))
17.5
>>> print(trapezoidal_area(bottom=4, height=5, upperLength=3))
17.5
```
默认参数值允许我们在调用时省略部分参数，从而简化接口设计。但是，具有默认值的参数应当放置于没有默认值的参数之后。

关于函数是否修改传入变量的值，根据数据类型的可变性分为两种情况：
1. **不可变数据类型**（如字符串、数字、元组）：函数不能改变这些类型的原始值。
2. **可变数据类型**（如列表、字典、集合）：函数可以直接修改这类对象的内容。

**示例1-15：** 展示了不同类型参数如何受函数影响
```python
>>> def change_nothing(var):
...     var = "changed"
...
>>> def change_maybe(var):
...     var.append("new value")
...
>>> param1 = "hello"
>>> change_nothing(param1)  # 字符串不变
>>> print(param1)
'hello'
>>> param2 = ["value"]
>>> change_maybe(param2)  # 列表被更改
>>> print(param2)
['value', 'new value']
```

#### 1.5.7 条件控制与循环语句
##### 1. 条件控制
Python 使用条件语句来根据逻辑表达式的真假决定执行哪段代码块。条件语句的基本结构如下所示：

```python
if 条件1:
    语句1
elif 条件2:
    语句2
else:
    语句3
```

**示例1-16：** 分数分类函数
```python
def score(num):
    if num >= 90:
        print(f"{num} excellent")
    elif num >= 80:
        print(f"{num} fine")
    elif num >= 60:
        print(f"{num} pass")
    else:
        print(f"{num} bad")

score(99)  # 输出: 99 excellent
score(80)  # 输出: 80 fine
score(70)  # 输出: 70 pass
score(60)  # 输出: 60 pass
score(59)  # 输出: 59 bad
```

此外，`if` 语句还可以用来实现简洁的条件赋值，例如：
```python
>>> a, b = 3, 4
>>> c = a if a < b else b
>>> print(c)
3
```

##### 2. 循环语句
Python 提供了 `while` 和 `for` 两种循环机制。
- **While 循环**：
  ```python
  while 条件:
      语句1
  else:
      语句2
  ```
  当条件成立时反复执行 `语句1`，直到条件不再满足时才执行 `else` 子句下的 `语句2`（如果存在的话）。

  **示例1-17：** 无限循环直至用户输入 'q'
  ```python
  flag = True
  while flag:
      input_str = input("请输入一些内容，输入 'q' 退出 -> ")
      print(f"您的输入是 {input_str}")
      if input_str == 'q':
          flag = False
  print("您已退出循环。")
  ```

- **For 循环**：适用于遍历序列中的每一个元素。
  ```python
  for 变量 in 序列:
      语句
  else:
      语句
  ```

  **示例1-18：** 求 1 到 1000 之间所有整数之和
  ```python
  total_sum = 0
  for i in range(1001):  # 注意这里应该是 range(1, 1001) 或者 range(1001) 如果从 0 开始
      total_sum += i
  print(total_sum)  # 结果应为 500500
  ```

循环体内还可以使用 `break` 和 `continue` 关键字来控制流程：
- `break`：立即终止当前循环。
- `continue`：跳过本次循环剩余部分，直接进入下一次迭代。

**示例1-19：** 比较 `break` 和 `continue` 的效果
```python
print("break--------------")
count = 0
while count < 5:
    print(f"aaa {count}")
    count += 1
    if count == 2:
        break
print("bbb", count)

print("continue--------------")
count = 0
while count < 5:
    print(f"aaa {count}")
    count += 1
    if count == 2:
        continue
    print(f"bbb {count}")
```
输出结果会展示两者之间的区别。