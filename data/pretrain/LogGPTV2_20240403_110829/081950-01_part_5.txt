radiansdict.values() 以列表返回字典中的所有值
pop(key[,default]) 删除字典给定键 key 所对应的值，返回值为被删除的值。key
值必须给出。 否则，返回default值
popitem() 随机返回并删除字典中的一对键和值（一般删除末尾对）
1.5.5 集合
集合set是一个无序不重复元素集，基本功能包括关系测试和消除重复元素。集合对象还
支持union（联合）、intersection（交）、difference（差）和sysmmetric difference（对称差集）
等数学运算。
在Python中可以使用“x in set”来判断x是否在集合中，使用“len(set) ”来获取集合元
素个数，使用“for x in set”来遍历集合中的元素。但由于集合不记录元素位置，因此集合不
支持获取元素位置和切片等操作。
【示例1-11】集合的定义和常见用法。
>>> x=set('abcd') #创建集合x由单个字符组成
>>> y=set(['a','bc','d',10]) #创建集合y由列表的元素组成
>>> x,y #打印x,y
({'a', 'b', 'd', 'c'}, {'a', 'd', 10, 'bc'})
>>> x & y #取交集
{'a', 'd'}
>>> x|y #取并集
{'c', 'bc', 'd', 10, 'b', 'a'}
>>> x-y #差集，表示x里有，y里没有的
{'b', 'c'}
>>> x^y #对称差集（项在x或y中，但不会同时出现在二者中）
{'bc', 'c', 10, 'b'}
【示例1-12】使用集去重元素。
>>> a = [11,22,33,44,11,22]
>>> b = set(a)
35
Python自动化运维快速入门
>>> b
set([33, 11, 44, 22])
集合的基本操作可参见表1-7。
表1-7 集合的基本操作
集合 操作
s.add('x') 添加一项
s.update([10,37,42]) 在s中添加多项
s.remove('H') 使用remove()可以删除一项
len(s) set的长度
x in s 测试x是否是s的成员
x not in s 测试x是否不是s的成员
s.issubset(t) 相当于s=t测试是否t中的每一个元素都在s中
s.union(t) 相当于s|t返回一个新的set包含s和t中的每一个元素
s.intersection(t) 相当于s&t返回一个新的set包含s和t中的公共元素
s.difference(t) 相当于s-t返回一个新的set包含s中有是t中没有的元素
s.symmetric_difference(t) 相当于s^t返回一个新的set包含s和t中不重复的元素
s.copy() 返回集合s的一个浅复制
s.discard(x) 如果在set“s”中存在元素x，则删除
s.pop() 删除且返回set“s”中的一个不确定的元素，如果为空，则引发KeyError
s.clear() 删除set“s”中的所有元素
union()、intersection()、difference()和symmetric_difference()的非运算符（non-operator就是
形如s.union()这样的）版本将会接受任何可迭代对象（iterable）作为参数。相反，它们的
运算符版本（&^+-|）要求参数必须是集合对象。
1.5.6 函数
在中学数学中我们知道y=f(x)代表着函数，x是自变量，y是函数f(x)的值。在程序中， 自
变量x可以代表任意的数据类型，可以是字符串、列表、字典、对象，可以是我们认为的任何
东西。
【示例1-13】以简单的数据计算函数为例，定义函数fun(a,b,h)来计算上底为a，下底为b，
高为h的梯形面积。
>>> def fun(a,b,h): #def 定义函数fun，参数为a，b，h
... s=(a+b)*h/2 #使用梯形的面积计算公式，注意此行前有4个空格
... return s #返回面积
...
>>> fun(3,4,5) #计算上底为3，下底为4，高为5的梯形面积
17.5
36
第1章 自动化运维与Python
函数的目的是封装，提高应用的模块性及代码的重复利用率。将常用的处理过程写成函数，
在需要时调用它，可以屏蔽实现细节，减少代码量，增加程序可读性。
【示例1-14】假如多个梯形的面积需要计算，那么：
>>> for a,b,h in [(3,4,5),(7,5,9),(12,45,20),(12,14,8),(12,5,8)]: #指计算5个梯形
面积
... print("上底{},下底{},高{}的梯形，面积为{}".format(a,b,h,fun(a,b,h))) #字符串
格式化函数format
...
上底3,下底4,高5的梯形，面积为17.5
上底7,下底5,高9的梯形，面积为54.0
上底12,下底45,高20的梯形，面积为570.0
上底12,下底14,高8的梯形，面积为104.0
上底12,下底5,高8的梯形，面积为68.0
上例中的调用方法fun(3,4,5)并不直观，为了增加可读性，这里我们稍做调整。
>>> def trapezoidal_area(upperLength,bottom,height):
... return (upperLength+bottom)*height/2
...
>>> trapezoidal_area(upperLength=3,bottom=4,height=5)
17.5
>>> trapezoidal_area(bottom=4,height=5,upperLength=3)
17.5
>>>
在调用此函数传递参数时使用参数关键字，这样参数的位置可以任意放置而不影响运算结
果，增加程序可读性。假如待计算的梯形默认高度均为5，就可以定义带默认值参数的函数。
>>> def trapezoidal_area(upperLength,bottom,height=5):#定义默认值参数
... return (upperLength+bottom)*height/2
...
>>> trapezoidal_area(upperLength=3,bottom=4)
17.5
>>> trapezoidal_area(3,4)
17.5
>>> trapezoidal_area(3,4,5)
17.5
>>> trapezoidal_area(3,4,10)
35.0
带有默认值的参数必须位于不含默认值参数的后面。
关于函数是否会改变传入变量的值有以下两种情况。
（1）对不可变数据类型的参数，函数无法改变其值，如Python标准数据类型中的字符串、
数字、元组。
（2）对可变数据类型的参数，函数可以改变其值，如Python标准数据类型中的列表、字
典、集合。
37
Python自动化运维快速入门
【示例1-15】举例说明。
>>> def change_nothing(var):
... var="changed"
...
>>> def change_mabe(var):
... var.append("new value")
...
>>> param1="hello"
>>> change_nothing(param1) #传入参数为字符串，param1的值不会改变
>>> param1
'hello'
>>> param2=["value"]
>>> change_mabe(param2) #传入参数为列表，param2的值可以被函数改变
>>> param2
['value', 'new value']
1.5.7 条件控制与循环语句
1. 条件控制
Python的条件控制是通过一条或多条语句的执行结果（True或False）来决定执行的代码
块。条件控制的流程如图1.26所示。
开始
条件判断
条件为真
条件为假
执行相应代码
结束
图1.26 条件控制的流程
if语句的一般形式如下：
if 条件1：
语句1
elif 条件2：
语句2
else:
语句3
38
第1章 自动化运维与Python
解释：如果条件1为真，则执行语句1；如果条件1不为真，条件2为真，则执行语句2；
如果条件1、条件2都不为真，则执行语句3。其中elif和else语句不是必需的。
【示例1-16】将下列代码保存为lx_if.py。
1 def score(num): #定义一个函数，判断得分属于哪个分类
2 if num>=90:
3 print(num,'excellent')
4 elif num>=80:
5 print(num,'fine')
6 elif num>=60:
7 print(num,'pass')
8 else:
9 print(num,'bad')
10 score(99) #调用函数，下周
11 score(80)
12 score(70)
13 score(60)
14 score(59)
在命令窗口执行 python lx_if.py后得到如下结果。
99 excellent
80 fine
70 pass
60 pass
59 bad
if 语句还可以用来实现问题表达式。例如：有整数变量a、b、c ，如果a>> a,b = 3,4
>>> c = a if a >> print(c)
3
>>> a,b = 5,4
>>> c = a if a >> print(c)
4
2. 循环语句
Python有两种方式来实现循环：while语句和for语句。
while语句的结构如下 ：
while 条件判断：
执行语句1
else:
执行语句2
当条件判断为真时执行语句1，当条件判断为假时执行语句2，其实只要不是死循环，语
句2就一定会被执行。因此，while语句的结构也可以如下：
39
Python自动化运维快速入门
while 条件判断：
执行语句1
执行语句2
while语句的流程如图1.27所示。
开始
条件判断
进行下一次循环
条件为真
条件为
执行语句1
执行语句2
结束
图1.27 while语句的流程
【示例1-17】将下面的代码保存为lx_while.py。
1 flag=True
2 while flag:
3 input_str=input("please input something,'q' for quit.-> ")
4 print("your input is %s" % input_str)
5 if input_str=='q':
6 flag=False
7 print("You're out of circulation.")
在命令窗口中执行 python lx_while.py ，并尝试输入一些字符，结果如下。
please input something,'q' for quit.-> hello
your input is hello
please input something,'q' for quit.-> python
your input is python
please input something,'q' for quit.-> q
your input is q
You're out of circulation.
Python for循环可以遍历任何序列的项目，如一个列表或一个字符串。for循环的一般格式
如下：
for  in :
40
第1章 自动化运维与Python
else:
【示例1-18】计算1~1000的所有整数的和。
>>> sum=0 #定义求和的结果sum，初始为0
>>> for i in range(1000): #rang(1000)产生一个1~1000的整数列表
... sum+=i #相当于sum=sum+i进行累加
...
>>> print(sum) #打印结果
499500
循环中的 break 语句和 continue 语句：从英文字面意思来理解即可，break 就是中断，跳
出当前的循环，不再继续执行循环内的所有语句；continue就是继续，程序运行至continue处
时，不再执行continue后的循环语句，立即进行下一次循环判断。下面通过一个例子来了解两
者的区别。
【示例1-19】break语句和continue语句的比较（lx_break_continue.py）。
1 print("break--------------")
2 count=0
3 while count<5:
4 print("aaa",count)
5 count+=1
6 if count==2:
7 break
8 print("bbb",count)
9
10 print("continue--------------")
11 count=0
12 while count<5:
13 print("aaa",count)
14 count+=1
15 if count==2:
16 continue
17 print("bbb",count)
在命令行中运行 python lx_break_continue.py将得到如下结果。
break--------------
aaa 0
bbb 1
aaa 1
continue--------------
aaa 0
bbb 1