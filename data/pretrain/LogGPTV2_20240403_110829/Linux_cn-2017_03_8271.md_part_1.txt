---
author: Andy Gross
category: 软件开发
comments_data:
- date: '2017-03-07 17:08:28'
  message: 低功耗的需求日益增大，低功耗的硬件设备日益增多，linux 内核对 CPU 挂起这一块的支持度相当有限。不少 SoC 设备在使用低版本（&lt;4.9）的
    kernel 时，用户会发现开始时还好，但某个时间设备会突然“死机”。其实就是 CPU 进入了深层次的 Cstate 状态。我手头上的 Bay（悲）Trail（催）平板就是这德行。
  postip: 112.0.51.107
  username: 来自江苏南京的 Chrome 51.0|Windows 10 用户
- date: '2017-03-07 21:28:06'
  message: Bay（悲）Trail（催）
  postip: 114.253.19.244
  username: linux [Chrome 56.0|Mac 10.11]
count:
  commentnum: 2
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 8245
date: '2017-03-06 11:34:00'
editorchoice: false
excerpt: 它主要通过软件实现。一般平台的挂起过程包括冻结用户空间并将外围设备调至低耗电模式。但是，系统并不是直接关闭和热插拔掉 CPU，而是静静地强制将 CPU
  进入空闲（idle）状态。
fromurl: http://www.linaro.org/blog/suspend-to-idle/
id: 8271
islctt: true
largepic: /data/attachment/album/201703/06/113436faj81soj81kj6thb.jpg
permalink: /article-8271-1.html
pic: /data/attachment/album/201703/06/113436faj81soj81kj6thb.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 它主要通过软件实现。一般平台的挂起过程包括冻结用户空间并将外围设备调至低耗电模式。但是，系统并不是直接关闭和热插拔掉 CPU，而是静静地强制将 CPU
  进入空闲（idle）状态。
tags:
- 挂起
- CPU
- 休眠
thumb: false
title: 浅述内核中“挂起到空闲”的实现
titlepic: true
translator: beyondworld
updated: '2017-03-06 11:34:00'
---
### 简介
Linux 内核提供了多种睡眠状态，各个状态通过设置系统中的不同部件进入低耗电模式来节约能源。目前总共有四种睡眠状态，分别是： 挂起到空闲   （    suspend to idle    ） 、 加电待机   （    power-on standby（standby）    ） 、 挂起到内存   （    suspend to ram    ） 和 挂起到磁盘   （    suspend to disk    ） 。这些状态分别对应 ACPI 的 4 种状态：S0，S1，S3 和 S4。 挂起到空闲   （    suspend to idle    ） 是纯软件实现的，用于将 CPU 维持在尽可能深的 idle 状态。 加电待机   （    power-on standby（standby）    ） 则使设备处于低功耗状态，并且关闭所有非引导 CPU。 挂起到内存   （    suspend to ram    ） 就更进一步，关闭所有 CPU 并且设置 RAM 进入自刷新模式。 挂起到磁盘   （    suspend to disk    ） 则是最省功耗的模式，关闭尽可能多的系统，包括关闭内存。然后内存中的内容会被写到硬盘，待唤醒计算机的时候将硬盘中的内容重新恢复到内存中。
![](/data/attachment/album/201703/06/113436faj81soj81kj6thb.jpg)
这篇博文主要介绍 挂起到空闲   （    suspend to idle    ） 的实现。如上所说，它主要通过软件实现。一般平台的挂起过程包括冻结用户空间并将外围设备调至低耗电模式。但是，系统并不是直接关闭和热插拔掉 CPU，而是静静地强制将 CPU 进入 空闲   （    idle    ） 状态。随着外围设备进入了低耗电模式，除了唤醒相关的中断外不应有其他中断产生。唤醒中断包括那些设置用于唤醒系统的计时器（比如 RTC，普通计时器等）、或者电源开关、USB 和其它外围设备等。
在冻结过程中，当系统进入空闲状态时会调用一个特殊的 cpu 空闲函数。这个 `enter_freeze()` 函数可以和调用使 cpu 空闲的 `enter()` 函数一样简单，也可以复杂得多。该函数复杂的程度由将 SoC 置为低耗电模式的条件和方法决定。
### 先决条件
#### `platform_suspend_ops`
一般情况，为了支持 S2I，系统必须实现 `platform_suspend_ops` 并提供最低限度的挂起支持。这意味着至少要完成 `platform_suspend_ops` 中的 `valid()` 函数。如果 挂起到空闲   （    suspend to idle    ） 和 挂起到内存   （    suspend to ram    ） 都要支持，valid 函数中应使用 `suspend_valid_only_mem`。
不过，最近内核增加了对 S2I 的自动支持。Sudeep Holla 提出了一个变更，可以让系统不需要满足 `platform_suspend_ops` 条件也能提供 S2I 支持。这个补丁已经被接收并将合并在 4.9 版本中，该补丁可从这里获取： 。
如果定义了 `suspend_ops`，那么可以通过查看 `/sys/power/state` 文件得知系统具体支持哪些挂起状态。如下操作：
```
# cat /sys/power/state
freeze mem
```
这个示例的结果显示该平台支持 S0（ 挂起到空闲   （    suspend to idle    ） ）和 S3（ 挂起到内存   （    suspend to ram    ） ）。按 Sudeep 的变更，那些没有实现 `platform_suspend_ops` 的平台将只显示 freeze 状态。
#### 唤醒中断
一旦系统处于某种睡眠状态，系统必须要接收某个唤醒事件才能恢复系统。这些唤醒事件一般由系统的设备产生。因此一定要确保这些设备驱动使用唤醒中断，并且将自身配置为接收唤醒中断后产生唤醒事件。如果没有正确识别唤醒设备，系统收到中断后会继续保持睡眠状态而不会恢复。
一旦设备正确实现了唤醒接口的调用，就可用来生成唤醒事件。请确保 DT 文件正确配置了唤醒源。下面是一个配置唤醒源示例，该文件来自（`arch/arm/boot/dst/am335x-evm.dts`）:
```
     gpio_keys: volume_keys@0 {
               compatible = “gpio-keys”;
               #address-cells = ;
               #size-cells = ;
               autorepeat;
               switch@9 {
                       label = “volume-up”;
                       linux,code = ;
                       gpios = ;
                       wakeup-source;
               };
               switch@10 {
                       label = “volume-down”;
                       linux,code = ;
                       gpios = ;
                       wakeup-source;
               };
       };