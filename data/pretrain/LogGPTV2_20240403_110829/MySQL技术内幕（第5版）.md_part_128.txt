数据类型名称的规范遵循以下约定。
小于等于M否则，出错。
不能为DATE列指定DEFAULT CURDATE（）。
和DATETIME（自MySQL5.6.5起）两种类型外，其他类型的默认值都必须是常数。例如，
二进制串的长度单位是字符。
数，以及字符串类型的最大长度。在字符串列的定义里，二进制串的长度单位是字节，非
AUTO_INCREMENT属性的整数列、BLOB和TEXT列，以及空间类型列。除了TIMESTAMP
BIT类型的位
---
## Page 564
UNIQUE的缩写形式。
性也可以用于浮点类型列，只是这种做法不太常见。）
当前最大值大1。第3章对AUTO_INCREMENT 列的精确行为作了详细的描述。（AUTO_INCREMENT 属
值插入一个AUTO_INCREMENT列将导致下一个序列值被插入该列里。通常情况下，新序列值比该列的
舍入误差。
型的取值范围，计算过程就将精确地进行而不会产生任何舍入误差。对于近似值类型，计算会产生
类型。对于精确值类型，数值在存储和给定时是完全一致的，只要数值和计算结果没有超出这些类
据想要表示的数值范围来加以选择。此外，还有一种BIT类型，专门用来表示位域值。
B.1
可以创建一个使用它们的表；然后告知MySQL显示最终的表定义：
对该定义的报告内容。例如，如果想不起来字符类型属性UNICODE和缩写数据类型SERIAL的作用，
排序规则逐字符进行比较。
也有影响)。二进制串类型是使用每个字节的数字值逐个字节地比较。非二进制串类型会根据字符集
的。对于其他类型，该数字会因存储在列里的值的长度的不同而有所差异。
来定义列；否则，用非默认值定义。更多相关信息请参考3.2.3节。
才适用。如果在严格模式中没有给出DEFAULT子句，并且能接受NULL值，那么会使用默认的NULL
须将SQL模式设置为允许这种值；否则，有非法值插入时，会出现错误。）
544
一个使用你正迷惑的方式进行定义的列；然后使用SHOWCREATETABLE或DESCRIBE查看MySQL
对于整数类型的列，如果为其指定了AUTO_INCREMENT属性，就必须对它进行索引。把NULL
整数和定点数（DECIMAL）类型都是精确值数据类型。FLOAT和DOUBLE类型都是近似值数据
MySQL提供了精确值和近似值数字数据类型。不同的数字类型有着不同的取值范围，因此要根
比较方式：对于字符串类型，这个值表明了比较操作进行的方式（这对分组、排序和索引操作
默认值：类型定义没有明确设定DEFAULT 属性时的默认值。这只在没有启用严格SQL模式时
零值：适用于时态类型，它指的是如果有非法值插入该类型列里时，实际存入的那个零值。（必
在某些情况下，指定一种属性会导致另外一种属性也被启用。为数字类型指定ZEROFILL属性
适用于整数和浮点数据类型的 SERIALDEFAULTVALUE属性是NOTNULLAUTO_INCREMENT
属性 ZEROFILL 和 UNSIGNED 可以用于除BIT 类型以外的数字类型。
mySql> CREATE TABLE t(c CHAR(10) UNICODE, S SERIAL);
如果不确定自己的MySQL版本会如何处理给定的列定义，可以这样做：创建一个表，让其包含
存储空间要求：存储有关类型的值所需要使用的字节或字符个数。对于某些类型，该值是固定
口如果为某列指定了ZEROFILL属性，那么该列会用前导零将值的长度补齐到列的显示宽度。
Create Table:CREATE TABLEt
备注：与该类型有关的杂项说明。
同义词：类型名称的同义词。
口
半**
果。）
用属性，但因为数字类型在默认情况下就带有正负号，所以使用该属性没有什么实际效
如果为某列指定了UNSIGNED属性，那么该列将不允许出现负值。（SIGNED其实也是一种可
ENGINE=InnoDB DEFAULT CHARSET=latin1
数字类型
UNIQUEKEY
**
附录B数据类型参考
char(10) CHARACTER SET ucs2 DEFAULT NULL,
Table:
---
## Page 565
B.1.1
AUTO_INCREMENT列的值设置为NULL的方式来生成该列的默认值（即下一个序列编号）。
NULL，尽管你无法把一个NULL值插人这个列里去。这说明，你可以通过在创建新行时将
NULL。
会导致该列被自动设定为UNSIGNED。指定AUTO_INCREMENT 属性会导致该列被自动设定为 NOT
请注意，语句 DESCRIBE 和 SHOW COLUMNS 会报告说某个 AUTO_INCREMENT 列的默认值是
BIGINT[(M)]
口1
口M
口S
TINYINT[(M)]
同义词：INTERGER[(M)]和INT4[(M)]
取值范围：有符号数的取值范围是-2147483648～2147483647（-23～2-1）；无符号数的取
取值范围：有符号数的取值范围是-8388608～8388607（-23～2"-1)；无符号数的取值范围
列的默认值为3）。
含义：非常小的整数。M是最大显示宽度，1～255。如果省略，
存储空间要求：4个字节。
默认值：如果列可以为NULL，则默认值为NULL；如果带NOT NULL属性，则默认值为0。
值范围是0~4294967295（0~232-1)。
可用属性：AUTO_INCREMENT、SERIAL DEFAULT VALUE、UNSIGNED、ZEROFILL。
列的默认值为10)。
INT[(M)]
同义词：INT3[（M)]和MIDDLENT[（M)]。
存储空间要求：3个字节。
默认值：如果列可以为NULL，则默认值为NULL；如果带有NOTNULL属性，则默认值为0。
可用属性：AUTO_INCREMENT、SERIAL DEFAULT VALUE、UNSIGNED、ZEROFILL。
列的默认值为8)。
含义：中等大小的整数。M是最大显示宽度，1～255。如果省略，M的默认值是9（UNSIGNED
MEDIUMINT[(M)]
同义词：INT2[(M)]。
默认值：如果列可以为NULL，则默认值为NULL；如果带有NOT NULL属性，则默认值为0。
65535 (0~216-1)。
取值范围：有符号数的取值范围是-32768～32767（-2"～2"-1)；无符号数的取值范围是0～
可用属性：AUTO_INCREMENT、SERIAL DEFAULT VALUE、UNSIGNED、ZEROFILL。
认值为5)。
含义：小整数。M是最大显示宽度，1～255。如果省略，M的默认值是6（UNSIGNED列的默
SMALLINT[(M)]
同义词：INT1[（M)］。此外，BOOL和 BOOLEAN 等同于TINYINT(1）。
默认值：如果列可以为NULL，则默认值为NULL；如果带有NOTNULL属性，则默认值为0。
(0~2-1)。
取值范围：有符号数的取值范围是-128～127（-2”～2"-1)，无符号数的取值范围是0～255
可用属性：AUTO_INCREMENT、SERIAL DEFAULT VALUE、UNSIGNED、ZEROFILL。
整型
义：标准大小的整数。M是最大显示宽度，1～255。如果省略，M的默认值是11（UNSIGNED
储空间要求：2个字节。
储空间要求：1个字节。
，M的默认值是4（UNSIGNED
B.1数字类型
545
---
## Page 566
B.1.3
B.1.2
546
FLOAT[(M,D)]
FLOAT(p)
DECIMAL[(M,[D]）]
默认值：如果列可以为NULL，则默认值为NULL；如果带有NOT NULL属性，则默认值为0。
定了UNSIGNED属性，则不允许出现负值。
取值范围：最小非零值为±1.175494351E-38，最大非零值为±3.402823466E+38。如果该列指
可用属性：UNSIGNED、ZEROFILL。
的最大精度来存储。
小数部分。如果省略M和 D，则显示宽度和小数精度不确定；所有值都会以硬件系统所支持
含义：一种小型浮点数，即单精度浮点数（精度低于DOUBLE类型）。M是有效位数，范围是
存储空间要求：单精度值需要4个字节，双精度值需要8个字节。
为0。
默认值：如果列可以为NULL，则默认值为NULL；如果带有NOTNULL 属性，则默认值
取值范围：参见本节后面对FLOAT和DOUBLE类型的描述。
可用属性：UNSIGNED、ZEROFILL。
0～53以外的p值是非法的。
■p值为25～53的浮点数是双精度浮点数，即相当于不带说明符M和D的DOUBLE类型。
■p值为0～24的浮点数是单精度浮点数，相当于不带说明符M或D的FLOAT类型。
定数据类型是单精度的还是双精度的。
含义：浮点数。在标准 SQL中，精确度p表示至少需要的位数。在MySQL中，p仅用于确
1～255，D是小数点后面的精确位数，范围是0～30。如果D等于0，则列值没有小数点或
同义词：NUMERIC[(M,[D])]、DEC[(M,[D])]和 FIXED[(M,[D]）]。
之和。
字节，最后剩下的数字需要1～4个字节。每个值的存储空间都等于小数点左右两边的存储
存储空间要求：取决于小数点左右两边的数字个数。无论哪一边，都是每9位数字需要4个
默认值：如果列可以为NULL，则默认值为NULL；如果带有NOTNULL属性，则默认值为0。
决定。
取值范围：给定的DECIMAL列的取值范围由M和D的值以及是否给定UNSIGNED属性来
可用属性：UNSIGNED、ZEROFILL。
列值就没有小数点或小数部分。如果同时省略M和D，则默认值分别为10和0。
含义：定点数。M是有效位数，1～65。D是小数点后面的精确位数，0～30。如果D等于0，
定点类型
AUTU_INCREMENTUNIQUE的缩写。
备注：当 SERIAL作为一种数据类型的名字时，它是BIGINT UNSIGNED NOTNULL
同义词：INT8[(M)]。
存储空间要求：8个字节。
默认值：如果列可以为NULL，则默认值为NULL；如果带NOT NULL属性，则默认值为0。
取值范围：有符号数的取值范围是-9223372036854775808～9223372036854775807（-2～
可用属性：AUTO_INCREMENT、SERIAL DEFAULT VALUE、UNSIGNED、ZEROFILL。
含义：大整数。M是最大显示宽度，1～255。如果省略，M的默认值是20。
浮点类型
附录B
数据类型参考
---
## Page 567
节长度会大于n。这种差异会影响非二进制串列的存储空间。
含单字节字符，且字符长度为n，那么其字节长度也为n；但如果它包含的是多字节字符，那么其字
字符长度或字节长度，可以分别使用函数CHAR_LENGHT（）或LENGTH（）。如果某个非二进制串只包
在一个非二进制串列的定义里指定的长度表明的是该列能够容纳的最大字符数。
排序规则的概念。字符集定义的是允许数据类型使用的各种字符；排序规则定义的是字符排列顺序。
字节。二进制串没有字符集的概念，因此对值的比较是以字节值为基础的。
串类型能够容纳的值的最大长度是不一样的，可以根据你想把它们视为二进制串还是非二进制串来
B.2
B.1.4BIT 类型
选择。
MySQL 中的字符串类型是通用类型，通常用来存储二进制或者字符（文本）数据。这些字符
非二进制串值的长度单位通常为字符，但也可以使用字节为单位。若想获得某个非二进制串的
CHAR、VARCHAR 和 TEXT 类型是非二进制串类型。非二进制串是一个字符序列。它有字符集和
除ENUM和 SET 类型外，非二进制串类型（CHAR、VARCHAR、TEXT）也都可以指定字符集和排
BINARY、VARBINARY和BLOB类型是二进制串类型。二进制串是一个字节序列，其长度单位是
口固定长度的列，如CHAR(M)，所需的存储空间必须能够存储下M个给定字符集里的最宽字
口
BIT[(M)]
DOUBLE[(M,D)]
字符串类型
符；外加1个字节，用于存储其长度前缀。
VARCHAR（10）列，它需要0（空串）～20个字节（10字符字符串），用于存储字符串里的字
要能够放得下存储该字符串字节长度的前缀。对于一个字符集为双字节ucs2的
可变长度的列，如VARCHAR（M)，所需的存储空间除了必须能存储下给定值的所有字符，
字节。
符。例如，utf8字符集里的每个字符需要占用1～3个字节，因此CHAR(M)需要占用Mx3个
存储空间要求：大约为（M+7）/8个字节。
默认值：如果列可以为NULL，则默认值为NULL：如果带有NOTNULL属性，则默认值为0。
可用属性：可用属性：除全局属性外，没有其他特殊属性。
果省略，则M默认为1。
含义：位域值。M应该是一个范围为1～64的整数，用于表明每个BIT值的二进制位数。如
的同义词。
式REAL_AS_FLOAT，则其同义词为REAL[(M,D)］。FLOAT8是不带说明符M或D的 DOUBLE
同义词：DOUBLEPRECISION[（M，D)]是DOUBLE[（M，D)】的同义词；如果没有启用SQL模
存储空间要求：8个字节。
默认值：如果列可以为NULL，则默认值为NULL；如果带NOTNULL属性，则默认值为0。
308。如果为该列指定了UNSIGNED，就不允许出现负值。
取值范围：最小非零值是±2.2250738585072014E-308，最大非零值是±1.7976931348623157E+
可用属性：
含义：一种大型浮点数，即双精度浮点数（精度高于FLOAT)。M和D的含义与FLOAT中的
REAL_AS_FLOAT，则 REAL[(M,D)]是FLOAT(M,D)的同义词。
同义词：FLOAT4是不带说明符M或D的FLOAT的同义词。如果启用了SQL 模式
一样。
存储空间要求：4个字节。
UNSIGNED、ZEROFILL。
B.2字符串类型
547
还
---
## Page 568
B.2.1二进制串类型
MySQL 还将生成一条警告消息。在严格 SQL模式下，如果必须截去非空格字符，那么服务器会产
格 SQL模式，则超长值会被截短，以便能刚好存放在该列里。如果被截去的字符不全是空格，那么
INFORMATION_SCHEMA里的CHARACTER_SETS表和COLLATIONS表——它们包含的信息相同。
查询。这些语句将显示出每种字符集的默认排序规则。另外，还可以去查看数据库
序规则。
548
一个错误，并且不会插入任何值。
有些长到无法存储在字符串列里的值，对这些值的处理取决于 SQL模式设置。如果没有启用严
BINARY[(M)]
口对于ENUM和SET类型，在列定义里列出的成员值的任何尾部空格都将被忽略。因此，存储
不同的字符串类型值有不同的尾部填充方式。
服务器支持的字符集和排序规则可以通过SHOWCHARACTERSET和 SHOWCOLLATION语句来
口binary字符集和BINARY列属性需要特别对待的。
口指定排序规则的语法是cOLLATEcollation，其中，collation用于指定给定字符集的某
口指定字符集的语法是CHARACTER SETcharset，其中，
口
口
口又
口如果没有设定字符集或排序规则，那么MySQL将根据表的默认设置来确定。如果只设定了
含义：固定长度（0～M个字节）的二进制串。M应该是一个0～255的整数。如果省略，
SET ucs2的缩写。
值。这同样会影响到比较操作，因为在对ENUM或SET列里的值进行比较的时候，尾部的空
在列里的值没有任何尾部的空格，因为MySQL会把每个值转换为对应于该列成员的内部数
对于BINARY类型，如有必要，在存储时会使用OxO0字节补齐列的整个长度。在检索时，不
对于CHAR类型，如有必要，在存储时会使用空格补齐列的整个长度。在检索时，尾部的空
■BINARY 属性相当于为字符集（以_bin 结尾的排序规则名称）指定二进制排序规则。例如，
个可用排序规则。
时，也不会删除任何内容。
对于VARBINARY、VARCHAR，以及BLOB和TEXT类型，在存储时不会补齐任何内容；在检索
会去掉任何内容。
1atin1、greek或utf8。CHARSET等同于CHARACTER SET。
M的默认值是1。
格不参加比较。
格会被去掉。
H
latin1字符集兼容，但是不兼容于utf8字符集。