evaluate the probability of SDC when a DBE occurs for BERs
ranging from 10−4 to 10−8. The result is shown in Figure 2.
For this evaluation we consider the average miscorrection
rate across ten different (136,128) on-die SEC and (72,64)
in-controller SECDED implementations. We evaluate for
different access protocols; x64 means all 64-bits of SECDED
dataword come from the same DRAM chip while x4 means
there are 16 DRAM chips and each DRAM chips sends 4-
bits per beat of memory transaction. For a BER of 10−4, the
probability of silent data corruption in the case of x16 data
access protocol is non-negligible and can happen once every
3 million 64-bit accesses. As the data width per chip reduces,
the SDC probability decreases. This is because the probability
of a DBE, along with the miscorrected bit, aligning perfectly
within the same beat boundary reduces with decrease in beat
width. Without on-die SEC, the SDC probability, however, is
0 since all double-bit errors within the DRAM array, irrespec-
tive of location, would not get miscorrected and would be
ﬂagged as DUE by the in-controller SECDED decoder. Thus,
while the SEC code does not help with detecting or correcting
the double-bit errors in any scenario, it causes miscorrection
and turns upto 25% of these DBE events into SDC.
IV. DESIGNING ECC TO ELIMINATE SDC
In today’s DDR or LPDDR based systems, during every
read operation, the data that is read into the memory controller
is typically striped across multiple DRAM dies. Each xN
DRAM die sends N-bits data in parallel during each beat of
memory transfer to construct the 72-bit controller codeword.
But inside each DRAM chip, the SEC decoding is performed
on a much larger 128-bit dataword. Only a part of this 128-
bit data is accessed by the memory controller per read (see
Figure 3). This mean that the dataword of on-die ECC gets
striped across multiple in-controller SECDED codewords.
This has signiﬁcant implications on SDC probability. The
DBE probability in a 128-bit word and the SEC-induced
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:36 UTC from IEEE Xplore.  Restrictions apply. 
127
Figure 3: Example showing how steering the miscorrected bit to a different beat transfer boundary during SEC decoding
prevents the SECDED decoder from encountering the problematic triple-bit error within the same 72-bit codeword.
with the knowledge of the SEC code used in the memory
device. A recent work [34] has proposed an efﬁcient way of
reverse engineering the exact on-die SEC implementation.
Once we know the SEC code, we will know all the bit
positions pairs (H column pairs) that lead to a miscorrection
(sum of columns equal to third column) within the same
beat transfer boundary. These are the triplets that eventually
can lead to SDC. We ﬁrst list all such bit positions triplets.
In Hexample provided in Section III-A, one such bit position
triplet is: positions 1, 2 and 4. This is because sum of columns
1 and 2 equal to column 4 and all three bit positions lie
within the same beat transfer boundary. For every triplet, we
then calculate all possible corresponding bit positions in the
SECDED dataword. For example, in an x8 DRAM architec-
ture, bits 1, 2, and 4 in the SEC dataword can correspond to
any of the following bit positions (in their respective order)
in the SECDED dataword (spanning 8 DRAM chips):
• Bits 1, 2 and 4 - Chip 1
• Bits 9, 10 and 12 - Chip 2
• ....
• Bits 57, 58 and 60 - Chip 8
This is because the 64-bit SECDED dataword that
is
decoded in the memory controller in each beat spans across
8 DRAM chips. Hence, bit 1 of the SEC dataword from chip
1 would be bit 1 of the SECDED dataword, but bit 1 of the
SEC dataword from chip 2 would be bit 9 of the SECDED
dataword. The same is true for the rest of the DRAM chips.
We need to consider positions corresponding to all DRAM
chips since they all would use the same on-die SEC code.
Now let us consider the example shown in Figure 4. A
DBE affects bits 1, 2 in chip 2 and bit 4 gets miscorrected by
the SEC decoder. Post data transfer, this translates to triple-bit
error in bit positions 9, 10 and 12 in the SECDED codeword.
This becomes an SDC since the sum of these columns in the
SECDED H matrix is equal to another column (column 63
in the example). The decoder ﬂips bit 63, declares the error
correction as a success, and sends the corrupted data over to
the processor. In order to prevent this SDC from happening
in a system with this particular on-die SEC code,
the
SECDED parity check matrix has to be designed such that
4: Example
showing SDC occurring due
Figure
to
miscorrection introduced by on-die ECC. We have considered
the SEC construction provided in Section III-A where the sum
of columns 1 and 2 in the Hexample matrix is equal to column 4.
• Out of the 128 odd weight columns, we use the single
weighted columns for the last 8 identity sub-matrix
columns. We use the remaining 120 odd-weight options for
the ﬁrst min(128−N,120) columns. None of these columns
would have the problem of aliasing since they are all odd.
• For the remaining X = max(N,8) locations, we use only
even weight columns. We randomly choose a bit position
(say bit 0) and set it to ‘1’ for all X columns. If bit 0 for
all X columns is ‘1’, then the sum of any pair of columns
cannot equal a third column in this set as bit 0 of the sum
would always be ‘0’.
(cid:14)
(cid:14)
The total number of such even weight columns possible
= 64. Therefore, N can be as
=
wide as 64 (largest possible factor of 128). Thus, on-die
SEC-COMET code can be constructed for x4 to x64
DRAMs that can guarantee no silent data corruption. Note
that this SEC-COMET construction requires no knowledge
of the in-controller SECDED code.
B. In-controller SECDED-COMET ECC
(cid:14)
(cid:15)
(cid:14)
(cid:15)
7
5
(cid:15)
7
1
(cid:15)
7
7
+
+
7
3
+
Now we ask the question: In case the DRAM device does
not implement our proposed on-die SEC-COMET ECC pro-
vided in Section IV-A, can we still tackle the problem of SDCs
from the memory controller side? In this section we provide a
technique to redesign the in-controller SECDED code, albeit
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:36 UTC from IEEE Xplore.  Restrictions apply. 
128
the sum of all the sets of columns corresponding to the bit
positions listed above do not match with any of the columns
in the rest of the H matrix. To construct such an H matrix,
we ﬁrst assign any three 8-bit non-zero values to columns
1, 2 and 4. We then store the sum of these three columns in
a don’t-use list. For the next set of three columns (9, 10 and
12), we again choose three random non-zero values that do
not equal the value stored in the don’t-use list. We then sum
these three columns and append the sum to the don’t-use
list. We continue the process for the rest of the columns.
The process has to be repeated for all bit triplets in
the SEC dataword that lead to three-bit errors in the ﬁnal
SECDED codeword. Once all bit
triplets are covered,
the remaining SECDED H-matrix columns are randomly
assigned 8-bit values that do not match anything stored in
the don’t-use list. For a given SEC code and system memory
architecture, for every bit/column triplet in the SECDED
H matrix that can cause SDC, the sum of the columns has
to be such that it equals no other column in the H matrix.
Using this technique, given the exact SEC implementation
and the system architecture, it is possible to construct the
SECDED code that would guarantee prevention of SDCs
when double-bit errors happen.
V. COMET DOUBLE-BIT ERROR CORRECTION
As mentioned previously, on-die ECC adds 6.25% parity
storage overhead without improving error correction capabil-
ity. Previous studies have shown that there is almost no differ-
ence in reliability between DIMMs with 8 chips that have only
on-die ECC and DIMMs with 9 chips that support both on-die
ECC and rank-level in-controller SECDED ECC [28]. Thus,
the two disjoint ECC schemes together do not reduce the
overall system failure probability. Instead we have shown that,
if one of them is not carefully designed, it causes additional
SDCs. So we next try to answer the question: Can we achieve
better reliability from the two codes while keeping the two
code types the same and their constructions independent?
In this section, we show how DBE correction can be
achieved with no extra parity overhead using the redundancy
built within the two codes. We add one more constraint to the
on-die SEC code construction and devise a controller-device
collaborative correction mechanism to get nearly perfect
double-bit error correction. It is important to note that even
though the collaborative technique requires controller-device
communication using a special command, the two ECC
codes can be designed completely independently and does
not require any special in-controller SECDED construction.
A. Constructing on-die SEC code to enable Double-bit
Error Correction (SEC-COMET-DBC)
In order to enable detection and correction of DBEs using
syndrome matching we need to ensure that the sum of any
pair of columns in the parity check matrix H generates a
unique syndrome. However, with just 8-bit redundancy for
a 128-bit dataword, this can be achieved only for a small
subset of columns. We add a constraint to SEC-COMET
code construction from Section IV-A to construct
the
SEC-COMET-DBC code: for every set of x consecutive
(cid:14)
(cid:15)
columns, the sum of every pair of columns within that set
should be unique. For a (136, 128) SEC code, the maximum
value of x (that is also a factor of 128) for which this can
be possible is 16. I.e., a valid SEC-COMET-DBC code can
be constructed for x4, x8, x16 DRAM chips but not for x32.
This is because, for every pair of columns to generate a
=496 unique
unique syndrome in a set of 32 columns,
syndromes are required. This is not possible with 8-bits.
32
2
For such a SEC code, when a double-bit error occurs in bit
positions that belong to the same x-bit chunk, the generated
syndrome and the chunk position can be used to ﬁgure out
the exact DBE locations. The syndrome is generated by the
SEC decoder, but for the correction mechanism to work, the
errors also have to be localized to the exact x-bit chunk which
the SEC decoder is unable to do. For this localization we will
exploit the memory data access architecture and utilize infor-
mation from the in-controller SECDED decoder. For example,
in a standard x8 DDR based ECC DIMM, the beat transfer
width per chip is 8 and therefore, we use x =8 in the (136,
128) SEC-COMET-DBC code. Now when a DBE happens
within the same 8-bit chunk in one of the DRAM chips, the
beat in which the decoder ﬂags a DUE will help to point to the
8-bit chunk position where the DBE has occurred. Next, we
discuss how this information can be sent to the DRAM chips
and the the DBE correction ﬂow. For better understanding
we explain the mechanism using a x8 DDR architecture.
B. Collaborative DBE Correction
1) Detecting the DBE beat
Let us look at all the possible ways a double-bit error can
happen in a 136-bit codeword in a particular DRAM chip
and the possible outcomes after the on-die and in-controller
decoding.
• Case 1: The two error bit positions are in two different
8-bit chunks and the miscorrected bit (if any) belongs to
a third chunk. As a result the erroneous bits get decoded
in the memory controller in separate beats. In each of
these beats, the SECDED decoder ﬂags a CE and corrects
the error. Eventually all the erroneous bits get corrected
and no DUE gets ﬂagged.
• Case 2: The two error bit positions are in two different
8-bit chunks and the miscorrected bit falls in the same
chunk with one of the error bits. Now one 8-bit chunk
that has two errors and one has single-bit error. The
in-controller SECDED decoder will ﬂag a CE when it
decodes the chunk with SBE but will ﬂag a DUE when
the 8-bit chunk with two error bits is decoded.
• Case 3: The two error bit positions are in the same 8-bit
chunk. The SEC-COMET constraint (provided in Sec-
tion IV-A) will ensure that the miscorrected bit lands in a
different 8-bit chunk. Thus, after SEC decoding the 128-bit
dataword either has one 8-bit chunk with two errors (in the
case of no miscorrection) or has an additional 8-bit chunk
with a single-bit error. The SECDED decoder will ﬂag a
DUE when the 8-bit chunk with two error bits is decoded.
Let us consider the example shown in Figure 3 (Case 3).
A DBE occurs in DRAM chip 1 in bits 1 and 2. Because of
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:36 UTC from IEEE Xplore.  Restrictions apply. 
129
our improved SEC construction (shown on the right), it is
ensured that the SEC decoder would steer the miscorrection
to a different 8-bit chunk (in this example the miscorrected bit
is 9). Therefore, during the ﬁrst beat of memory transaction,
the SECDED decoder ﬂags a DUE, while in the second beat
it ﬂags a CE and corrects bit 9. The memory controller uses
a special error correction command to send the original read
command address and the beat number in which the DUE was
ﬂagged to the DRAMs. The SECDED decoder cannot localize
the DBE to a particular chunk in the codeword. Therefore, the
double-bit error could have occurred in any of the 9 DRAM
chips. Every DRAM chip receives the information that there
might be a DBE in the ﬁrst 8-bits of its 128-bit SEC dataword.
2) Correction within each DRAM chip
Once the memory controller sends the special double-bit
error correction command with the beat number, each DRAM
chip checks the original SEC syndrome. We assume that
the special DBE correction command immediately follows
the original READ command. Therefore, the DRAM chips
only need to store the last generated 8-bit syndrome and the
32-bit/64-bit data that was last read. Storing the original data
has negligible overhead but prevents an extra ACTIVATE
during correction and possible change in error signature in
case of closed page policy. If the syndrome was zero, the
DRAM knows that the DBE did not occur in its codeword.
In our example (Figure 3), all DRAMs except chip 1 would
have generated a zero syndrome. If the syndrome is non-zero,
the correction mechanism within the chip tries to match the
syndrome with one of the H matrix columns in the 8-column
set that corresponds to the received beat number. In this case,
DRAM chip 1 tries to match the syndrome against columns 1-
8 (beat 1) in the H matrix. We know that the miscorrected bit
position is 9. Therefore, the generated syndrome would match
with column 9. Since, this column falls outside the target set,
the matching is unsuccessful. The decoder moves on to the
next step where it matches the generated syndrome with the
sum of every pair of columns from the target set. Because
of our improved SEC construction, every pair of columns
should sum up to a unique value. The pair of columns whose
sum equals the generated syndrome (in this example it will
be columns 1 and 2) represent the erroneous bit positions.
The decoder would ﬂip those two bits and send the corrected
data over the DRAM bus to the memory controller. The rest
of the DRAM chips would not take any action since they
had zero syndrome and send the original 8-bit data.
While the example depicts Case 3, let’s look at what hap-
pens in Case 2. In this scenario, the original double-bit errors
are in two separate beat transfer chunks. But the miscorrected
bit lands in the same 8-bit chunk as one of the two errors.
Let’s say this is the second 8-bit chunk. Thus, the SECDED
controller ﬂags DUE in the second beat and sends this infor-
mation to the DRAM chips. When the erroneous chip matches
the generated syndrome against columns 9 to 16 in the H
matrix, it sees that the syndrome matches with the column cor-
responding to the miscorrected bit position. In this case, the
DRAM chip would only ﬂip that particular bit and send over
the data to the DRAM controller. It will not be able to localize
and correct the second error position within that 8-bit chunk.
Considering the rest of the DRAM chips had zero syndrome,
they send their unmodiﬁed data over in the same beat. Since
the erroneous chip could only correct one bit, the overall data
still has one-bit of error that SECDED will be able to correct.
3) Final Correction within the memory controller
The ﬁnal correction step in the DRAM controller involves
multiple rounds of SECDED decoding of the corrected
data. This is to provision for the rare cases where DBE
in one chip coincides with SBEs in other chips within
the same 8-bit chunk. In that case, multiple DRAM chips
would see non-zero syndromes that match with one of the
columns in the target set. All these DRAMs would send data
uncorrected corrupted data that would need to be ﬁltered
out on the memory controller side.
Once the controller receives the new 72-bit codeword from
the DRAMs, it compares it with the one it had received during
the original read. In the ideal case where only a single DRAM
chip has DBE and no other chip has made any corrections,
the two codewords would differ by one/two bits within a
particular 8-bit boundary corresponding to the erroneous chip.
However, in the rare case where multiple DRAM chips send
modiﬁed data, the controller, post comparison, would ﬁnd bit
ﬂips in more than one 8-bit chunk. The four possible multiple-
erroneous-chip scenarios are shown in Figure 5 where one
chip has a DBE and the other chip has a SBE. To prevent
miscorrection and silent data corruption, the controller accepts
changes corresponding to each chip (i.e., each 8-bit chunk)
one at a time and sends the new data through the decoder.
Let’s say chips 1 and 8 send new data. The controller will ﬁrst
accept the change from chip 1, keep the old data from chip
8 and send the entire 64-bit data through the decoder. Then
it will revert chip 1’s change, accept the new data from chip
8 and send this new 64-bit data through the decoder. If one
of these two cases result in zero syndrome (scenarios b and
d), the controller declares the corresponding data as correct
and moves ahead. If both cases return a non-zero syndrome
but in one case the decoder detects and corrects a SBE and
in the other case the decoder detects a DUE (scenario c), the
controller declares the data corresponding to the ﬁrst case
as correct and moved ahead. If both cases result in non-zero
syndrome with the decoder detecting an SBE (scenario a),
the controller panics and declares the error uncorrectable.
This rare scenario arises when DBE Case 2 (explained in
Section V-B1) occurs in one chip and an SBE in another chip.
The likelihood of this uncorrectable case is ∼1 in 300,000