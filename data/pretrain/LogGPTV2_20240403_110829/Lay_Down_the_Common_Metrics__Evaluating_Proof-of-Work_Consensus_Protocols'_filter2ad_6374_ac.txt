secret blocks to publish. Next, the rewards are distributed for
certain blocks if all miners agree that these blocks are settled,
either as main chain blocks, orphans or uncles, i.e., orphans
that are referred to in the main chain. Afterwards, all miners
start mining. The compliant miners choose which chain to
mine on based on public information, whereas the attacker
may choose either chain. The action in an MDP describes the
attacker’s choices on how many blocks to publish and which
chain to mine on. A new block is then mined by either the
attacker or the compliant miners, with probability distribution
according to their mining power shares. New honest blocks are
published immediately, whereas the attacker decides whether
to publish his new block at the beginning of the next step. The
attacker’s old blocks published in the next step might reach
the compliant miners before the new honest block. The MDP
state transition is triggered by the new mining event. The
rationale behind this publish-reward-mine-found sequence is
that rational decisions may only change when a new block is
available [4], [7]. Whenever it is infeasible to model the exact
system, we choose to favor the compliant miners and limit the
attacker’s ability, ensuring the attacker’s utility is achievable
in reality to better demonstrate the protocols’ weaknesses.
IV. CHAIN QUALITY ANALYSIS ON
BETTER-CHAIN-QUALITY PROTOCOLS
This section evaluates the chain quality Q(α) of NC, uni-
form tie-breaking (UTB), smallest-hash tie-breaking (SHTB),
unpredictable deterministic tie-breaking (UDTB) and Publish
or Perish (PoP). We do not consider largest-fee tie-breaking,
as it enables a malicious miner to locally generate a huge-
fee transaction and to embed it in the miner’s own block to
increase the chance of winning a tie. Neither do we consider
GHOST, as it behaves identically to NC when the network
delay is negligible [33]. At last, we leave the evaluation of
DAG-based protocols, such as [23], to future work as the
notion of chain quality is not directly applicable to them.
When orphaned blocks receive no reward and the main
chain blocks receive full rewards, the chain quality is equiva-
lent to the compliant miners’ relative revenue. Therefore, we
implement this reward distribution policy in all MDPs of this
section, and deﬁne the utility as the attacker’s relative revenue
1 − Q(α), in order to ﬁnd the chain quality.
This equivalence also allows us to reuse the relative revenue
MDP designs of previous studies. We re-implement the NC,
UTB and PoP MDPs as described in [4] and [13]. Our imple-
mentation can model block races longer than previous studies,
as we accelerate the programs by allocating memory only
once before assigning values to the state transition matrices.
In this section, we ﬁrst model the mining process of SHTB
and UDTB, and then present the evaluation results.
A. Modeling SHTB
The key challenge of modeling SHTB is to encode in a state
the hashes of the latest blocks, as compliant miners resolve
ties via comparing these hashes. Unfortunately, a block hash
is usually a 256-bit value; encoding which makes the total
number of states too large to be solvable. Therefore, we split
the hash value space into a small number of regions and
only encode the hash region number. When comparing two
hashes from the same region, we consider the public chain
tip to be smaller, which favors the compliant miners. As this
simpliﬁcation discourages the attacker, our MDP computes an
upper bound on SHTB’s chain quality. We defer the detailed
MDP design to Appendix A.
B. Modeling UDTB
The main challenge is to model the pseudorandom function
(PRF) determining a tie’s winner. We address this challenge
by introducing a binary ﬁeld tie in the state representation,
denoting whether the public chain tip has priority over its com-
petitor after applying the PRF. This ﬁeld is meaningful when
the attacker chain is no shorter than the public chain. Every
time the public chain tip is updated, it has equal probability
to be 0 or 1. The design can be found in Appendix B.
C. Evaluation Results
1) Solving for the optimal policies: Our MDPs output the
attacker’s optimal policy and the expected fraction of main
chain blocks following this policy, namely 1− Q(α), allowing
180
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:01 UTC from IEEE Xplore.  Restrictions apply. 
THE PROFITABLE THRESHOLD PT OF NC, UTB, SHTB, UDTB AND POP.
TABLE II
Protocol
NC, γ = 0
NC, γ = 0.5
NC, γ = 1
UTB
PT
0.3333
0.2500
0.0000
0.2321
Protocol
SHTB (upper bounds)
UDTB
PoP
PT
0.0652
0.2321
0.2500
mining privately, whereas in all other protocols except NC,
γ = 1, the weak attacker publishes the block. In other words,
resolving ties by comparing hashes allows the attacker to better
estimate the probability of winning, hence he is more inclined
to deviate when the odds are in favor. Moreover, SHTB enables
“catching up from behind” strategy like UTB and UDTB.
3) Proﬁtable threshold: We calculate the proﬁtable thresh-
old (PT), the maximum α that achieves the ideal chain quality
1 − α and display the results in Table II.
Result 3: To date, no PoW protocol achieves the ideal chain
quality when α > 0.25.
SHTB’s actual PT should be zero, because as long as a se-
cret block’s hash is small enough, the probability of winning a
tie can be arbitrarily high, encouraging the attacker to withhold
the block. The seemingly above-zero result is because we are
unable to encode the hash to arbitrary granularity.
Result 4: No protocol modiﬁcation outperforms NC, γ = 0
when α ≤ 0.39.
NC, γ = 0 achieves the best chain quality for all α ≤ 0.35
in Fig. 2. It is only outperformed by PoP when γ ≥ 0.4. We
locate the exact value where PoP starts to outperform NC with
a binary search: in both PoP and NC, Q(0.3901) = 0.5372.
D. What Goes Wrong: Information Asymmetry
We attribute NC’s poor chain quality to the protocol’s in-
capability in distinguishing the honest chain from the attacker
chain, due to information asymmetry. When two competing
chains simultaneously emerge, no information can help the
compliant miners identify the attacker chain, or even whether
there is an attacker chain, as the fork might be caused by a tem-
porary network partition. In contract, possessing information
of both chains, the attacker makes more informed decisions
of “gambling” only when the odds are in favor. Since this
information asymmetry is not addressed in non-NC protocols,
their attempts to raise the chain quality remain unsatisfactory.
Unfortunately, we believe it is difﬁcult to solve this infor-
mation asymmetry within PoW protocols’ security assump-
tions. In these assumptions, compliant miners can only rely,
almost exclusively, on limited public information, namely the
blockchain topology and block content, to choose which chain
to mine on. While other public information, such as the
network partition status, which is highly likely to be available
to all miners in reality, as well as the compliant miners’
private information such as their network connectivity or the
difference between a block’s timestamp and its receiving time,
is ignored in identifying the attacker chain. The attacker, on the
other hand, is able to act on all available information. In other
Fig. 2. The difference between the chain quality Q(α) and the ideal value
1 − α of NC, UTB, SHTB, UDTB and PoP. Larger number indicates worse
performance. Q(α) does not converge for PoP and SHTB when α = 0.45
and α ≥ 0.4, respectively.
us to compute Q(α). Besides α, another input in NC is γ,
deﬁned as the proportion of compliant mining power that
works on the attacker chain during a tie. We compute Q(α)
for all ﬁve protocols with α between 0.1 and 0.45 with interval
0.05. Three different γ values are chosen for NC: 0, 0.5, and
1. The fail-safe parameter k in PoP is set to 3, following the
authors’ recommendation [13].
For NC, UTB and UDTB, we set the maximum block race
length, denoted as lmax, to 160, which is large enough so that
Q(α)’s lower and upper bounds differ in less than 4 × 10−5
for all inputs. The detailed computation of these bounds can
be found in Sect. 4.2 of [4]. For PoP, lmax is set to 30, which
is larger than the value 12 in the authors’ implementation [26].
For SHTB, we set lmax to be 40 and split the valid hash space
into 15 equal-size regions. Once lmax is reached, the attacker
is forced to publish the attacker chain and end the block race.
For the latter two protocols, we check the convergence by
examining whether the results are affected if lmax decreases
by two. Data points that do not converge are discarded.
2) Chain quality: Our results of NC, UTB and PoP in Fig. 2
match those from previous studies [4], [13], [31]. We list our
new insights as follows.
perform no better than NC when γ ≤ 0.5 for all inputs.
Result 1: UTB and UDTB’s Q(α) are almost identical; they
For all our inputs, UTB’s and UDTB’s Q(α) differ in
at most 1%. UDTB may outperform UTB when natural
forks happen frequently, as these forks are resolved faster
in UDTB due to the compliant miners’ convergence. UTB’s
and UDTB’s unsatisfactory performance is attributed to the
following protocol-speciﬁc strategy: as neither policy takes the
block receiving time into consideration, an attacker who keeps
mining from behind the public chain may still win the block
race with a tie. Consequently, their chain quality is lower than
that of NC when γ = 0.5.
Result 2: SHTB achieves the lowest chain quality among
all better-chain-quality protocols.
An examination of the optimal strategies reveals the cause
of SHTB’s poor chain quality. In SHTB, when α = 0.1, the
optimal action when “the attacker ﬁnds a smallest-hash-region
block before the compliant miners ﬁnd anything” is to keep
181
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:01 UTC from IEEE Xplore.  Restrictions apply. 
00.050.10.150.20.250.30.350.40.10.150.20.250.30.350.40.45(1-α)-Q(α) The attacker's mining power share αNC, γ=0NC, γ=0.5NC, γ=1UTBSHTB (lower bounds)UDTBPoPFig. 3. An RS execution. gap(C(cid:48)) = height(E) − height(C(cid:48)) = 2. When
To = 3, B(cid:48) is not visible even if it is referred to in E as its gap reaches To.
words, the information asymmetry is anchored and intensiﬁed
in these protocols through their unrealistic and inconsistent
security assumptions.
V. INCENTIVE COMPATIBILITY ANALYSIS ON TYPICAL
ATTACK-RESISTANT PROTOCOLS
In the following sections, we analyze the attack resistance
of NC and three most inﬂuential designs, one from each type
of attack-resistant protocols introduced in Sect. II-C2. For
reward-all and reward-lucky protocols, we choose Fruitchains
and Subchains, respectively. For punishment protocols, we im-
plement our own variant of DECOR+ named reward-splitting
protocol (RS). Unlike DECOR+, RS follows NC’s longest
chain and ﬁrst-received fork-resolving policy. This modiﬁ-
cation excludes the inﬂuence of the chain quality from our
attack resistance analysis, as all four protocols in comparison
share the same chain quality. Most insights we gain are direct
generalizable to all protocols of the same type.
A. Modeling Fruitchains
We use Ratiof2b to denote the ratio of fruit difﬁculty target
to block difﬁculty target. For example, Ratiof2b = 2 means
that of all the units—mining products, two thirds are fruits
and one third are blocks in expectation.
The main challenge of modeling Fruitchains is to encode
each fruit’s pointer block. The number of states grows expo-
nentially with the number of steps if we encode all possible
choices of each fruit. To address this complexity, we assume
all compliant miners know when the block race starts and act
optimally to avoid honest fruits being orphaned. Moreover, the
attacker’s action to cause a tie is disabled so that no honest fruit
points at attacker-chain blocks. These assumptions are in favor
of the compliant miners. Consequently, incentive compatibility
is computed as an upper bound, while subversion gain and
censorship susceptibility are computed as lower bounds. Our
Fruitchains MDP design can be found in Appendix C.
B. Deﬁning and Modeling RS
In RS, we deﬁne a block’s gap as the height difference
between the ﬁrst main chain block that refers to the block
and the block itself. A main chain block’s gap is deﬁned as
zero. This deﬁnition, unlike that of Fruitchains, enables an
accurate modeling of our protocol. A block is visible if its gap
is strictly smaller than the timeout threshold To. Each block
reward is split among all visible blocks of the same height.
Other reward-forfeiting mechanisms of DECOR+ are omitted
as they are related to its own fork-resolving policy. Therefore,
RS’s numerical results are not the same as those of DECOR+.
To model RS, we observe that when the attacker wins
a block race, it is uncertain whether the orphaned honest
blocks are rendered invisible, as they might still be included
in the blockchain as uncles. Therefore, we introduce an extra
ﬁeld history, a string of at most To − 1 bits, in our state
representation to encode blocks whose rewards are not settled
prior to the current block race. Each bit in history denotes the
blockchain’s status at a speciﬁc height. Interested readers can
ﬁnd the MDP design in Appendix D.
C. Modeling Subchains
The ratio of weak block difﬁculty target to block difﬁculty
is denoted as Ratiow2b. Note that Ratiow2b is not
target
equivalent to Ratiof2b in Fruitchains. In Fruitchains, a unit
is a fruit as long as the fruit target is met; in Subchains, a unit
is a weak block when the weak-block target is met and the
block target is not met. When Ratiow2b = 2, half of the units
are weak blocks while the other half are blocks in expectation.
A straightforward encoding of a Subchains state includes
both chains’ block/weak-block mining sequences, in which
the number of states grows exponentially with the block race
length. To compress the state space, we observe that in all
outcomes of a block race, the public chain is either adopted
or abandoned by both miners as a whole. Similar argument
applies to the public chain’s competing attacker-chain units.
Therefore, we encode only the number of blocks in both
chains, the attacker chain’s last three units and the length
difference between the two chains instead of two full mining
sequences. This simpliﬁcation limits the attacker’s ability: the
attacker can keep no more than three private units after every
publication. Hence our Subchains MDP favors the compliant
miners. The complete MDP design is in Appendix E.
D. Evaluation Results
Our MDPs output the attacker’s optimal strategies and their
expected relative revenue, namely 1 − I(α). For all three
protocols, we compute I(α) with α between 0.1 and 0.45 with
interval 0.05 and γ = 0, 0.5 and 1, except that our Fruitchains
MDP does not support γ = 0.5.
1) Fruitchains: Fruitchains is evaluated with the following
set of parameters. Ratiof2b is set to 1 so that the expected
number of fruits equals that of blocks, which is the simplest
case. The maximum block race length lmax is set to 20. Two
different To values, 7 and 13 are selected so that we can verify
whether a larger To results in a higher I(α). In practice, To
should be no bigger than σ + 1, where σ is the conﬁrmation
threshold, otherwise an attacker can start mining a competing
chain to double-spend a conﬁrmed transaction without risk-
ing any fruit rewards. Hence the maximum To required by
Bitcoin’s six-conﬁrmation convention and Ethereum’s twelve-
conﬁrmation convention are 7 and 13, respectively. Other MDP
thresholds are set so the probability that these thresholds are
reached before lmax is around one percent. The attacker is
forced to publish the entire chain if any threshold is reached.
The results can be found in the ﬁrst four data lines of Table III.
182
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:01 UTC from IEEE Xplore.  Restrictions apply. 
BCB’AtimeuncleparentDC’D’Efull rewardhalf rewardno rewardTABLE III
INCENTIVE COMPATIBILITY I(α) OF FRUITCHAINS, COMPUTED AS UPPER
BOUNDS, SELECTIVELY SHOWN. ENTRIES THAT PERFORM WORSE THAN
NC ARE IN RED ITALIC. I(0.1) = 0.9 FOR ALL (To, Ratiof2b, γ)
COMBINATIONS.
TABLE IV
I(α) AND PROFITABLE THRESHOLD PT OF REWARD-SPLITTING PROTOCOL
(RS). ENTRIES PERFORM WORSE THAN NC ARE IN RED ITALIC. OMITTED
ENTRIES, INCLUDING ALL ENTRIES WITH α ≤ 0.25, REALIZE THE IDEAL
VALUE I(α) = 1 − α.
(To, Ratiof2b, γ) \ α
(7,1,0)
(7,1,1)
(13,1,0)
(13,1,1)
(13,2,0)
(13,2,1)
(13,0.5,0)