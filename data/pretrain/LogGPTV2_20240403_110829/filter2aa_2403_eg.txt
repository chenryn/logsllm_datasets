有几个可用的流行平衡算法，包括 AVL 树和红黑树。后面的算法采用的办法是将每个节点标注为 red（红）
或者 black（黑），以简化结点的平衡过程。 
不管是 GCC 还是 MSVC 的模板函数 std::map()和 std::set()都使用了红黑树（red-black）的算法。 
在 std::set()中只含有键，而 std::map()中除了键（std::set）还有相应的每个节点的数值。 
MSVC 
#include  
#include  
#include  
#include  
// structure is not packed! 
struct tree_node 
{ 
    struct tree_node *Left; 
    struct tree_node *Parent; 
    struct tree_node *Right; 
    char Color; // 0 - Red, 1 - Black 
    char Isnil; 
    //std::pair Myval; 
    unsigned int first; // called Myval in std::set 
    const char *second; // not present in std::set 
}; 
struct tree_struct 
{ 
    struct tree_node *Myhead; 
    size_t Mysize; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
554 
逆向工程权威指南（下册） 
}; 
void dump_tree_node (struct tree_node *n, bool is_set, bool traverse) 
{ 
    printf ("ptr=0x%p Left=0x%p Parent=0x%p Right=0x%p Color=%d Isnil=%d\n", 
            n, n->Left, n->Parent, n->Right, n->Color, n->Isnil); 
    if (n->Isnil==0) 
    { 
        if (is_set) 
            printf ("first=%d\n", n->first); 
        else 
            printf ("first=%d second=[%s]\n", n->first, n->second); 
    } 
    if (traverse) 
    { 
        if (n->Isnil==1) 
            dump_tree_node (n->Parent, is_set, true); 
        else 
        { 
            if (n->Left->Isnil==0) 
                dump_tree_node (n->Left, is_set, true); 
            if (n->Right->Isnil==0) 
                dump_tree_node (n->Right, is_set, true); 
        }; 
    }; 
}; 
const char* ALOT_OF_TABS="\t\t\t\t\t\t\t\t\t\t\t"; 
void dump_as_tree (int tabs, struct tree_node *n, bool is_set) 
{ 
    if (is_set) 
        printf ("%d\n", n->first); 
    else 
        printf ("%d [%s]\n", n->first, n->second); 
    if (n->Left->Isnil==0) 
    { 
        printf ("%.*sL-------", tabs, ALOT_OF_TABS); 
        dump_as_tree (tabs+1, n->Left, is_set); 
    }; 
    if (n->Right->Isnil==0) 
    { 
        printf ("%.*sR-------", tabs, ALOT_OF_TABS); 
        dump_as_tree (tabs+1, n->Right, is_set); 
    }; 
}; 
void dump_map_and_set(struct tree_struct *m, bool is_set) 
{ 
    printf ("ptr=0x%p, Myhead=0x%p, Mysize=%d\n", m, m->Myhead, m->Mysize); 
    dump_tree_node (m->Myhead, is_set, true); 
    printf ("As a tree:\n"); 
    printf ("root----"); 
    dump_as_tree (1, m->Myhead->Parent, is_set); 
}; 
int main() 
{ 
    // map 
    std::map m; 
    m[10]="ten"; 
    m[20]="twenty"; 
    m[3]="three"; 
    m[101]="one hundred one"; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
555 
    m[100]="one hundred"; 
    m[12]="twelve"; 
    m[107]="one hundred seven"; 
    m[0]="zero"; 
    m[1]="one"; 
    m[6]="six"; 
    m[99]="ninety-nine"; 
    m[5]="five"; 
    m[11]="eleven"; 
    m[1001]="one thousand one"; 
    m[1010]="one thousand ten"; 
    m[2]="two"; 
    m[9]="nine"; 
    printf ("dumping m as map:\n"); 
    dump_map_and_set ((struct tree_struct *)(void*)&m, false); 
    std::map::iterator it1=m.begin(); 
    printf ("m.begin():\n"); 
    dump_tree_node ((struct tree_node *)*(void**)&it1, false, false); 
    it1=m.end(); 
    printf ("m.end():\n"); 
    dump_tree_node ((struct tree_node *)*(void**)&it1, false, false); 
    // set 
    std::set s; 
    s.insert(123); 
    s.insert(456); 
    s.insert(11); 
    s.insert(12); 
    s.insert(100); 
    s.insert(1001); 
    printf ("dumping s as set:\n"); 
    dump_map_and_set ((struct tree_struct *)(void*)&s, true); 
    std::set::iterator it2=s.begin(); 
    printf ("s.begin():\n"); 
    dump_tree_node ((struct tree_node *)*(void**)&it2, true, false); 
    it2=s.end(); 
    printf ("s.end():\n"); 
    dump_tree_node ((struct tree_node *)*(void**)&it2, true, false); 
}; 
指令清单 51.35  MSVC 2012 
dumping m as map: 
ptr=0x0020FE04, Myhead=0x005BB3A0, Mysize=17 
ptr=0x005BB3A0 Left=0x005BB4A0 Parent=0x005BB3C0 Right=0x005BB580 Color=1 Isnil=1 
ptr=0x005BB3C0 Left=0x005BB4C0 Parent=0x005BB3A0 Right=0x005BB440 Color=1 Isnil=0 
first=10 second=[ten] 
ptr=0x005BB4C0 Left=0x005BB4A0 Parent=0x005BB3C0 Right=0x005BB520 Color=1 Isnil=0 
first=1 second=[one] 
ptr=0x005BB4A0 Left=0x005BB3A0 Parent=0x005BB4C0 Right=0x005BB3A0 Color=1 Isnil=0 
first=0 second=[zero] 
ptr=0x005BB520 Left=0x005BB400 Parent=0x005BB4C0 Right=0x005BB4E0 Color=0 Isnil=0 
first=5 second=[five] 
ptr=0x005BB400 Left=0x005BB5A0 Parent=0x005BB520 Right=0x005BB3A0 Color=1 Isnil=0 
first=3 second=[three] 
ptr=0x005BB5A0 Left=0x005BB3A0 Parent=0x005BB400 Right=0x005BB3A0 Color=0 Isnil=0 
first=2 second=[two] 
ptr=0x005BB4E0 Left=0x005BB3A0 Parent=0x005BB520 Right=0x005BB5C0 Color=1 Isnil=0 
first=6 second=[six] 
ptr=0x005BB5C0 Left=0x005BB3A0 Parent=0x005BB4E0 Right=0x005BB3A0 Color=0 Isnil=0 
first=9 second=[nine] 
ptr=0x005BB440 Left=0x005BB3E0 Parent=0x005BB3C0 Right=0x005BB480 Color=1 Isnil=0 
first=100 second=[one hundred] 
ptr=0x005BB3E0 Left=0x005BB460 Parent=0x005BB440 Right=0x005BB500 Color=0 Isnil=0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
556 
逆向工程权威指南（下册） 
first=20 second=[twenty] 
ptr=0x005BB460 Left=0x005BB540 Parent=0x005BB3E0 Right=0x005BB3A0 Color=1 Isnil=0 
first=12 second=[twelve] 
ptr=0x005BB540 Left=0x005BB3A0 Parent=0x005BB460 Right=0x005BB3A0 Color=0 Isnil=0 
first=11 second=[eleven] 
ptr=0x005BB500 Left=0x005BB3A0 Parent=0x005BB3E0 Right=0x005BB3A0 Color=1 Isnil=0 
first=99 second=[ninety-nine] 
ptr=0x005BB480 Left=0x005BB420 Parent=0x005BB440 Right=0x005BB560 Color=0 Isnil=0 
first=107 second=[one hundred seven] 
ptr=0x005BB420 Left=0x005BB3A0 Parent=0x005BB480 Right=0x005BB3A0 Color=1 Isnil=0 
first=101 second=[one hundred one] 
ptr=0x005BB560 Left=0x005BB3A0 Parent=0x005BB480 Right=0x005BB580 Color=1 Isnil=0 
first=1001 second=[one thousand one] 
ptr=0x005BB580 Left=0x005BB3A0 Parent=0x005BB560 Right=0x005BB3A0 Color=0 Isnil=0 
first=1010 second=[one thousand ten] 
As a tree: 
root----10 [ten] 
        L-------1 [one] 
                L-------0 [zero] 
                R-------5 [five] 
                        L-------3 [three] 
                                L-------2 [two] 
                        R-------6 [six] 
                                R-------9 [nine] 
        R-------100 [one hundred] 
                L-------20 [twenty] 
                        L-------12 [twelve] 
                                L-------11 [eleven] 
                        R-------99 [ninety-nine] 
                R-------107 [one hundred seven] 
                        L-------101 [one hundred one] 
                        R-------1001 [one thousand one] 
                                R-------1010 [one thousand ten] 
m.begin(): 
ptr=0x005BB4A0 Left=0x005BB3A0 Parent=0x005BB4C0 Right=0x005BB3A0 Color=1 Isnil=0 
first=0 second=[zero] 
m.end(): 
ptr=0x005BB3A0 Left=0x005BB4A0 Parent=0x005BB3C0 Right=0x005BB580 Color=1 Isnil=1 
dumping s as set: 
ptr=0x0020FDFC, Myhead=0x005BB5E0, Mysize=6 
ptr=0x005BB5E0 Left=0x005BB640 Parent=0x005BB600 Right=0x005BB6A0 Color=1 Isnil=1 
ptr=0x005BB600 Left=0x005BB660 Parent=0x005BB5E0 Right=0x005BB620 Color=1 Isnil=0 
first=123 
ptr=0x005BB660 Left=0x005BB640 Parent=0x005BB600 Right=0x005BB680 Color=1 Isnil=0 
first=12 
ptr=0x005BB640 Left=0x005BB5E0 Parent=0x005BB660 Right=0x005BB5E0 Color=0 Isnil=0 
first=11 
ptr=0x005BB680 Left=0x005BB5E0 Parent=0x005BB660 Right=0x005BB5E0 Color=0 Isnil=0 
first=100 
ptr=0x005BB620 Left=0x005BB5E0 Parent=0x005BB600 Right=0x005BB6A0 Color=1 Isnil=0 
first=456 
ptr=0x005BB6A0 Left=0x005BB5E0 Parent=0x005BB620 Right=0x005BB5E0 Color=0 Isnil=0 
first=1001 
As a tree: 
root----123 
        L-------12 
                L-------11 
                R-------100 
        R-------456 
                R-------1001 
s.begin(): 
ptr=0x005BB640 Left=0x005BB5E0 Parent=0x005BB660 Right=0x005BB5E0 Color=0 Isnil=0 
first=11 
s.end(): 
ptr=0x005BB5E0 Left=0x005BB640 Parent=0x005BB600 Right=0x005BB6A0 Color=1 Isnil=1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
557 
因为结构设计得并不紧密，所以 2 个 char 型值各占用了 4 字节空间。 
对于 std::map 结构来说，first 和 second 的数据数据组合可被视为 std::pair 的一个数据元素。而 std::set
的每个节点则只有 1 个值。 
51.4.2 节介绍过，MSVC 编译器在构造 std::list 的时候会保链表的长度信息。我们可以在程序看到它也
存储了这种数据类型的具体尺寸。 
这两种数据结构和 std::list 的相同之处是，迭代器都是指向节点的指针。.begin()迭代函数指向最小的
键。实际上，整个数据结构里都没有最小键的指针（和链表的情况一样）每当程序调用这个迭代器的时候，
它就遍历所有键、查找出最小值。单目递增运算符 operator --和单目递减运算符 operator++可将指针指向树
里的前一个或后一个节点。MIT 出版社出版的《Introduction to Algorithms, Third Edition》（Thomas H. Cormen 等
人著）介绍了这两个运算符的具体算法。 
迭代器.end()指向了一个隐蔽的虚节点。其 Isnil 为 1，即是说它没有对应的关键字(key)或值（value）、
不是真正意义上的数据结点，仅是一个存储控制信息的容器。这个虚节点的父节点是真正的根节点的指针，
也就是整个信息树的顶点。 
GCC 
#include  
#include  
#include  
#include  
#include  
struct map_pair 
{ 
    int key; 
    const char *value; 
}; 
struct tree_node 
{ 
    int M_color; // 0 - Red, 1 - Black 
    struct tree_node *M_parent; 
    struct tree_node *M_left; 
    struct tree_node *M_right; 
}; 
struct tree_struct 
{ 
    int M_key_compare; 
    struct tree_node M_header; 
    size_t M_node_count; 
}; 
void dump_tree_node (struct tree_node *n, bool is_set, bool traverse,  bool dump_keys_and_values) 
{ 
    printf ("ptr=0x%p M_left=0x%p M_parent=0x%p M_right=0x%p M_color=%d\n", 
            n, n->M_left, n->M_parent, n->M_right, n->M_color); 
    void *point_after_struct=((char*)n)+sizeof(struct tree_node); 
    if (dump_keys_and_values) 
    { 
        if (is_set) 
            printf ("key=%d\n", *(int*)point_after_struct); 
        else 
        { 
            struct map_pair *p=(struct map_pair *)point_after_struct; 
            printf ("key=%d value=[%s]\n", p->key, p->value); 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
558 
逆向工程权威指南（下册） 
        }; 
    }; 
    if (traverse==false) 
        return; 
    if (n->M_left) 
        dump_tree_node (n->M_left, is_set, traverse, dump_keys_and_values); 
    if (n->M_right) 
        dump_tree_node (n->M_right, is_set, traverse, dump_keys_and_values); 
}; 
const char* ALOT_OF_TABS="\t\t\t\t\t\t\t\t\t\t\t"; 
void dump_as_tree (int tabs, struct tree_node *n, bool is_set) 
{ 
    void *point_after_struct=((char*)n)+sizeof(struct tree_node); 
    if (is_set) 
        printf ("%d\n", *(int*)point_after_struct); 
    else 
    { 
        struct map_pair *p=(struct map_pair *)point_after_struct; 
        printf ("%d [%s]\n", p->key, p->value); 
    } 
    if (n->M_left) 
    { 
        printf ("%.*sL-------", tabs, ALOT_OF_TABS); 
        dump_as_tree (tabs+1, n->M_left, is_set); 
    }; 
    if (n->M_right) 
    { 
        printf ("%.*sR-------", tabs, ALOT_OF_TABS); 
        dump_as_tree (tabs+1, n->M_right, is_set); 
    }; 
}; 
void dump_map_and_set(struct tree_struct *m, bool is_set) 
{ 
    printf ("ptr=0x%p, M_key_compare=0x%x, M_header=0x%p, M_node_count=%d\n", 
        m, m->M_key_compare, &m->M_header, m->M_node_count); 
    dump_tree_node (m->M_header.M_parent, is_set, true, true); 
    printf ("As a tree:\n"); 
    printf ("root----"); 
    dump_as_tree (1, m->M_header.M_parent, is_set); 
}; 
int main() 
{ 
    // map 
    std::map m; 