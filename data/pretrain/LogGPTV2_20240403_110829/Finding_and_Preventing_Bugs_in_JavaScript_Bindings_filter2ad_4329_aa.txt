title:Finding and Preventing Bugs in JavaScript Bindings
author:Fraser Brown and
Shravan Narayan and
Riad S. Wahby and
Dawson R. Engler and
Ranjit Jhala and
Deian Stefan
2017 IEEE Symposium on Security and Privacy
Finding and Preventing Bugs in JavaScript Bindings
Fraser Brown(cid:2)
Dawson Engler(cid:2)
Shravan Narayan†
Ranjit Jhala†
Riad S. Wahby(cid:2)
Deian Stefan†
(cid:2)Stanford University
†UC San Diego
Abstract—JavaScript, like many high-level languages, relies on run-
time systems written in low-level C and C++. For example, the
Node.js runtime system gives JavaScript code access to the under-
lying ﬁlesystem, networking, and I/O by implementing utility func-
tions in C++. Since C++’s type system, memory model, and execution
model differ signiﬁcantly from JavaScript’s, JavaScript code must
call these runtime functions via intermediate binding layer code that
translates type, state, and failure between the two languages. Unfor-
tunately, binding code is both hard to avoid and hard to get right.
This paper describes several types of exploitable errors that bind-
ing code creates, and develops both a suite of easily-to-build static
checkers to detect such errors and a backwards-compatible, low-
overhead API to prevent them. We show that binding ﬂaws are a
serious security problem by using our checkers to craft 81 proof-of-
concept exploits for security ﬂaws in the binding layers of the Node.js
and Chrome, runtime systems that support hundreds of millions of
users. As one practical measure of binding bug severity, we were
awarded $6,000 in bounties for just two Chrome bug reports.
1
Many web services and other attacker-facing code bases are
written in high-level scripting languages like JavaScript, Python,
and Ruby. By construction, these languages prevent developers
from introducing entire classes of bugs that plague low-level
languages—e.g., buffer overﬂows, use-after-frees, and memory
leaks. On the other hand, high-level languages introduce new
classes of severe, exploitable ﬂaws that are often less obvious
than low-level code bugs.
Introduction
High-level languages push signiﬁcant functionality to their
runtime systems, which are written in low-level, unsafe lan-
guages (mainly C and C++). Runtime systems provide function-
ality not possible in the base scripting language (e.g., network
and ﬁle system access) or expose fast versions of routines that
would otherwise be too slow (e.g., sorting routines). Since the
high-level, dynamically-typed scripting language and low-level
language have different approaches to typing, memory man-
agement, and failure handling, the scripting code cannot call
runtime routines directly. Instead, it invokes intermediary bind-
ing code that translates between value types, changes value
representations, and propagates failure between the languages.
Binding code has the dangerous distinction of being both
hard to avoid and hard to get right. This paper demonstrates the
severity of the problem by demonstrating 81 proof-of-concept
exploits for bugs in multiple widely-used runtimes for the
JavaScript language. We picked JavaScript because of its ubiq-
uity: it is both the most popular language on GitHub and the
language with the largest growth factor [11, 110]. And though
it was originally conﬁned to web pages, JavaScript now appears
in desktop applications, server-side applications, browser ex-
tensions, and IoT infrastructure. Organizations like PayPal and
Walmart use JavaScript to process critical ﬁnancial information,
and as a result implicitly rely on runtimes and binding code for
secure foundational operations [40, 68, 106]. This paper focuses
on detecting and exploiting ﬂaws in two pervasive JavaScript
runtime systems—Node.js and Chrome—since binding bugs in
these systems endanger hundreds of millions of people (e.g., all
users of the Chrome browser).
JavaScript’s variables are dynamically typed. Therefore,
when JavaScript code calls a binding layer function, that C++
binding function should ﬁrst determine the underlying type of
each incoming parameter. Then, the function should translate
each parameter’s current value to its equivalent statically-typed
representation in C++. The binding code should also determine
if values are legal (e.g., whether an index is within the bounds
of an array); if not, the binding should propagate an error back
to the JavaScript layer. Finally, before the function completes,
it should store any result in the memory and type representation
that JavaScript expects.
In practice, writing binding code is complicated: it can fail at
many points, and bindings should detect failure and correctly
communicate any errors back to JavaScript. Too often, binding
code simply crashes, leading to denial-of-service or covert-
channel attacks (§2). If a binding function does not crash, it
might still skip domain checking (e.g., checking that an array
index is in bounds)—or even ignore type checking, therefore
allowing attackers to use nonsensical values as legal ones. (e.g.,
by invoking a number as a function). One especially insidious
source of errors is the fact that binding code may invoke new
JavaScript routines during type and domain checking. For ex-
ample, in translating to a C++ uint32_t, bindings may use the
Uint32Value method, which could invoke a JavaScript “upcall”
(i.e., a call back into the JavaScript layer). JavaScript gives users
extreme ﬂexibility in redeﬁning fundamental language methods,
which makes it hard to know all methods that an upcall can
transitively invoke, and makes it easy for attackers to circum-
vent security and correctness checks. For example: bindings
may check that a start index is within the bounds of an array
before calling Uint32Value to get the value of an end index.
The Uint32Value call, however, may be hijacked by a mali-
cious client to change the value of the start index, invalidating
all previous bounds checking.
These bugs are neither hypothetical nor easily avoidable.
Our checkers ﬁnd numerous exploitable security holes in both
Node.js and Chrome, heavily-used and actively developed code
bases. Furthermore, security holes in binding code may be sig-
niﬁcantly more dangerous than holes in script code. First, these
bugs render attacks more generic: given an exploitable binding
bug, attackers need only trigger a path to that bug, rather than
craft an entire application-speciﬁc attack. Second, binding ﬂaws
do not appear in scripts themselves: a script implementor can
write correct, ﬂawless code and still introduce security errors
© 2017, Fraser Brown. Under license to IEEE.
DOI 10.1109/SP.2017.68
559
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:26 UTC from IEEE Xplore.  Restrictions apply. 
Violation type
Crash-safety
Possible consequence
DOS attacks, including poison-pill attacks [45]; breaking
language-level security abstractions, including [41, 42,
94, 109], by introducing a new covert channel.
Type-safety
Above + type confusion attacks which, for example, can
be used to carry out remote code execution attacks.
Memory-safety
Above + memory disclosure and memory corruption
attacks which, for example, can be used to leak TLS
keys [28] or turn off the same-origin policy [82].
Table 1—The three types of binding bugs that we describe
if their code calls ﬂawed runtime routines. As a result, writing
secure scripts requires not only understanding the language
(already a high bar for many), but also knowing all of the bugs
in all of the versions of all of the runtime systems on which the
code might run.
To address this threat, this paper makes two contributions:
1. A series of effective checkers that ﬁnd bugs in widely-used
JavaScript runtime systems: Node.js, Chrome’s rendering
engine Blink, the Chrome extension system, and PDFium.
We show how bugs lead to exploitable errors by manually
writing 81 exploits, including multiple out-of-bounds mem-
ory accesses in Node.js and use-after-frees in Chrome’s
PDFium (two of which resulted in $6,000 in bug bounties).
2. A backwards-compatible binding-code library that wraps
the V8 JavaScript engine’s API, preventing bugs without
imposing signiﬁcant overhead. Our library does not break
any of Node.js’s over 1,000 tests or the test suites of 74
external Node.js-dependent modules. By design, the migra-
tion path is simple enough that we are able to automatically
rewrite a portion of Node.js’s bindings to use our safe API.
While we focus on (V8-based) JavaScript runtime systems,
JavaScript is not special: other scripting languages have es-
sentially identical architectures and face essentially identical
challenges; it would be remarkable if these languages did not
contain essentially identical ﬂaws. Therefore, we believe that
other high-level language runtimes (e.g., those for Ruby and
Python) stand to beneﬁt from lightweight checkers and more
principled API design.
2 The Problems with Binding Code
In this section we introduce binding code and explain how
bugs in bindings can lead to violations of JavaScript’s crash-
safety, type-safety, and memory-safety—and how these safety
violations manifest as security holes. Crash-safety violations,
the least severe, can enable JavaScript code—e.g., ads in
Chrome—to carry out denial-of-service attacks. They also pro-
vide a termination covert channel that attackers can leverage
to bypass language-level JavaScript conﬁnement systems, such
as [10, 41, 42, 94].1 Type- and memory-safety bugs have even
more severe security implications. For example, use-after-free
bugs in Blink and PDFium are considered “high severity” since
they may “allow an attacker to execute code in the context of,
Application code
JavaScript
Binding code
V8
C++
Blink runtime system
Figure 1—The Blink runtime system uses the V8 JavaScript engine
to execute JavaScript application code. Blink also uses V8’s APIs to
extend the base JavaScript environment with new functionality and
APIs, such as the DOM. This code—which bridges the JavaScript
application code and Blink’s C++ runtime—is binding code.
or otherwise impersonate other [website] origins” [84]. Table 1
summarizes the security consequences of these classes of bugs.
In §4 we will discuss the precise security implications of safety
violations with respect to the systems that we analyze.
We start with an overview of how binding code works in
runtime systems and how untrusted JavaScript application code
can call into the trusted C++ runtime system to exploit binding
bugs. We ﬁnd that these bugs often arise because JavaScript en-
gines like V8 make it easy for developers to violate JavaScript’s
crash-, type-, and memory-safety; even V8’s “hello world” code
examples depend on hard-crashing functions [105]. We con-
clude with a detailed overview of V8-based binding functions.
Runtime system binding bugs. Runtime systems use
JavaScript engines to execute application code written in
JavaScript. For example, the Chrome rendering engine, Blink,
relies on the V8 engine to interpret and run JavaScript code
embedded in web pages as  elements. The JavaScript
application code embedded in the  elements can use
APIs like the Document Object Model (DOM), a representation
of a web page, to modify the page and content layout. Binding
code makes these modiﬁcations possible: Blink developers use
the V8 engine API to extend the JavaScript application code’s
environment with such new functionality. Figure 1 illustrates
the role that binding code plays in the interaction between the
runtime system, the JavaScript engine, and the application.
To explain the challenges with preserving JavaScript’s crash-,
type-, and memory-safety in bindings, we walk through how to
implement and expose a simpliﬁed version of the Blob interface
to JavaScript [81]. This interface deﬁnes JavaScript Blob ob-
jects, which store binary data that can be sent over the network
via other APIs (e.g., XMLHttpRequest). In order to efﬁciently
pack data in memory, we implement Blobs in C++. We use the
V8 API to expose Blobs to JavaScript—speciﬁcally, we use it
to expose an interface for Blob creation and manipulation. In
WebIDL [62], this interface is:
[Constructor(DOMString[] blobParts)]
interface Blob {
readonly attribute unsigned long size;
readonly attribute DOMString contentType;
Blob slice(optional unsigned long start,
optional unsigned long end);
1A crash or its absence can signal whether a secret is true or false.
};
560
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:26 UTC from IEEE Xplore.  Restrictions apply. 
Implementing this interface in C++ (as binding code) and ex-
posing it to JavaScript allows applications to create Blobs from
the array of strings (e.g., new Blob(["foo", "bar"])). It also
allows JavaScript code to check the byte-length of a Blob (e.g.,
blob.size), get its content type (e.g., blob.contentType),
and extract its subsets (e.g., blob.slice(2)).
The following binding-layer function implements the con-
structor for JavaScript Blobs:
1 void
2 blobConstr(const FunctionCallbackInfo& args)
3 {
4
// Get the current execution context
Local ctx
= args.GetIsolate()->GetCurrentContext();
// Extract first argument after type checking
if (args.Length() != 1 || !args[0]->IsArray())
// ... throw exception and return ...
Local blobParts = args[0].As();
// Create new C++ obj to back the new JS 'this' obj
Blob* blobImpl = new Blob(args.This());
// Add each string part to the blob
uint32_t n = blobParts->Length();
for (uint32_t i = 0; i  part =
blobParts->Get(ctx, i).ToLocalChecked();
// Convert it to a string and add it to the blob
blobImpl->AddV8StringPart(part.As());
}
// Return the receiver to the calling JS code
args.GetReturnValue().Set(args.This());
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29 }
This binding code uses the V8 JavaScript engine APIs to
handle JavaScript values in C++. For example, V8 represents
the JavaScript arguments to the blobConstr function as an
args array. blobConstr takes its ﬁrst argument—an array of
strings—and adds each string part to the underlying object.
Unfortunately, blobConstr misuses V8 functions to introduce
several errors, which we describe in the next paragraphs.
Violating JavaScript’s crash-safety. blobConstr uses a hard-
crashing function to extract elements from an array (line 20):
blobParts->Get(ctx, i).ToLocalChecked(). This line can
hard crash because Get returns either a wrapped value (in case
of a successful get) or an empty wrapper (in case of failure)—
and ToLocalChecked crashes when its receiver is empty. As a
result, an attacker can write the following JavaScript to trigger
a crash in any runtime system that exposes Blobs:
1 var evilarr = [];
2 Object.defineProperty(evilarr, 0, {
3
4 });
5 var blob = new Blob(evilarr);
get: () => { throw 'die!'; }
561
In this case, V8’s Get function calls attacker-deﬁned get;
when get throws an error, Get returns an empty handle, and
ToLocalChecked hard crashes. Attackers can use this kind of
bug to carry out denial-of-service attacks—e.g., in Node.js, a
third-party library can take down a web server while in Chrome,
a third-party advertisement can essentially take down a site by
crashing many users’ tabs.
These security risks are not present in the base JavaScript
language, since JavaScript itself is crash-safe: it will never hard
crash. Instead, errors—even stack frame exhaustion—manifest
as catchable exceptions. In contrast, in C++ code, failing grace-
fully requires nontrivial effort on the part of the programmer;
bindings introduce the possibility of hard crashes to an other-
wise crash-safe language.
Unfortunately, hard-crashing bindings can result from the
design of the binding layer API itself. For example, some of
V8’s type-safe casting APIs are not crash-safe. These functions
(e.g., ToLocalChecked, above) are supposed to convert from
V8’s wrapper types to unwrapped types. Developers have two
options when confronted with a wrapper: they can either (1) in-