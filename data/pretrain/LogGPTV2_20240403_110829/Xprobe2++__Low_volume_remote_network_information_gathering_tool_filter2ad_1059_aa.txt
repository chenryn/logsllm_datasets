# Xprobe2++: A Low-Volume Remote Network Information Gathering Tool

**Authors:**
- Fedor V. Yarochkin
- Ofir Arkin
- Meder Kydyraliev
- Shih-Yao Dai
- Yennun Huang
- Sy-Yen Kuo

**Affiliation:**
Department of Electrical Engineering, National Taiwan University, No. 1, Sec. 4, Roosevelt Road, Taipei, 10617, Taiwan

**Contact:**
sykuo@cc.ee.ntu.edu.tw

**Abstract:**
Active operating system fingerprinting is the process of actively determining a target network system's underlying operating system type and characteristics by probing the target system's network stack with specifically crafted packets and analyzing the received responses. Identifying the underlying operating system of a network host is an important characteristic that can be used to complement network inventory processes, intrusion detection system (IDS) discovery mechanisms, security network scanners, vulnerability analysis systems, and other security tools that need to evaluate vulnerabilities on remote network systems.

In recent years, there have been several publications featuring techniques aimed at confusing or defeating remote network fingerprinting probes. In this paper, we present a new version of Xprobe2, a network mapping and active operating system fingerprinting tool with an improved probing process that addresses most of the defeating techniques discussed in recent literature.

**Keywords:**
- Network scanning
- System fingerprinting
- Network discovery

**Submission Category:**
Software Demonstration

## 1. Introduction

One effective technique for analyzing intrusion alerts from Intrusion Detection Systems (IDS) is to reconstruct attacks based on attack prerequisites [8]. The success rate of exploiting many security vulnerabilities heavily depends on the type and version of the underlying software running on the attacked system, which is one of the basic required components of the attack prerequisite. When such information is not directly available, the IDS correlation engine needs to make an "educated guess" about the possible type and version of the software used on the attacked systems.

For example, if an IDS captures a network payload and matches it to an exploit of a Windows system vulnerability, the risk of such a detected attack would be high only if the target system exists, is indeed running the Windows Operating System, and exposes the vulnerable service.

In this paper, we propose a new version of the Xprobe2 tool, named Xprobe2++, designed to collect such information from remote network systems without having any privileged access to them. The original Xprobe2 tool was developed based on several research works in the field of remote network discovery [12, 3, 1] and includes advanced features such as the use of normalized network packets for system fingerprinting, a "fuzzy" signature matching engine, and a modular architecture with fingerprinting plugins.

The basic functionality principles of Xprobe2++ are similar to those of the earlier version: Xprobe2++ utilizes similar remote system software fingerprinting techniques. However, the tool includes several improvements to the signature engine and fuzzy signature matching process. Additionally, the new version of the tool includes significant enhancements, such as the use of test information gain weighting, originally proposed in [4]. The network traffic overhead minimization algorithm uses the test weights to reorder network probes and optimize module execution sequences.

The new version of the tool also includes modules to perform target system probing at the application layer. This makes the tool capable of successfully identifying the target system even when protocol scrubbers (such as PF on OpenBSD systems) are in front of the probed system and normalize network packets [2, 5]. The use of Honeynet software (such as honeyd) is also known to confuse remote network fingerprinting. These Honeynet systems are typically configured to mimic actual network systems and respond to fingerprinting with packets that match certain OS stack signatures [9]. Xprobe2++ includes an analytical module that attempts to detect and handle such Honeynet configurations.

**References:**
- [1] Original Xprobe2 tool.
- [2] Protocol scrubbing techniques.
- [3] Research work in remote network discovery.
- [4] Test information gain weighting.
- [5] Normalized network packets.
- [8] Attack reconstruction techniques.
- [9] Honeynet software and its impact on fingerprinting.
- [12] Additional research work in remote network discovery.

---

**Note:**
This document is authorized for licensed use limited to Tsinghua University. Downloaded on March 20, 2021, at 05:36:57 UTC from IEEE Xplore. Restrictions apply.