practical PSI protocol that handles billions of set mem-
bers. While more efﬁcient than existing PSI protocols,
it does not scale down when applied to small set sizes
on resource-constrained devices. Because of its reliance
on secret shares instead of bits in the Bloom ﬁlter, the
smallest possible Bloom ﬁlter to handle a maximum of
256 items would be 17736 bytes — two orders of mag-
nitude larger than what SDDR requires. In addition, the
USENIX Association  
23rd USENIX Security Symposium  927
communication cost of this interactive protocol increases
linearly with the number of nearby devices.
Nagy et al. [45] use Bloom ﬁlters to provide a PSI pro-
tocol that allows users of online social networks (OSNs)
to determine common friends while preserving user pri-
vacy. While their solution provides ample efﬁciency
gains over standard PSI, saving an order of magnitude in
communication and computation costs, several seconds
per interactive exchange is too much when running on
power-constrained devices in dense environments.
Authenticated key exchange Secure device discovery
and recognition should not be confused with mutual au-
thentication, or authenticated key exchange (AKE) pro-
tocols [21, 40]. SDDR aims to achieve device discovery
and recognition; guaranteeing mutual authentication is
not a goal of the basic SDDR protocol. As noted in Sec-
tion 4.4, once Alice’s device recognizes Bob’s device,
Alice can authenticate Bob by soliciting an explicit veri-
ﬁcation message from Bob; however, authentication will
only be performed if desired by the higher-level applica-
tion (or user). While secure device discovery and recog-
nition can be achieved by executing an AKE protocol
with each nearby device (for all possible shared secrets),
such a scheme would be prohibitive in an environment
with many nearby peers.
3 Problem Overview
In this section, we review the requirements for a secure
encounter protocol, sketch a strawman design, and make
observations that enable a practical protocol.
Devices executing a secure encounter protocol should
detect nearby participating devices, and learn their cur-
rent ephemeral network identiﬁer. Additionally, each
pair of nearby devices should generate a unique (except
with negligible probability) shared secret key, known
only to the pair. This key allows the devices to: 1)
uniquely refer to a particular encounter; and, 2) authenti-
cate each other as the peer in the encounter and securely
communicate. The pair should learn no other informa-
tion about each other; when the same pair of devices
meet again, the shared secret and network identiﬁers ex-
changed should be unrelated.
By default, devices should remain unlinkable, mean-
ing that no identifying information is exchanged. While
unlinkability is appropriate between strangers’ devices,
friends may wish to enable their devices to recognize
each other. A user who allows her device to be rec-
ognized by a friend during future discoveries is termed
selectively linkable (or simply linkable) by that friend.
When two devices discover each other, a recognition pro-
tocol should determine if the remote device corresponds
to a linkable user. Selectively linkable users must share
a unique secret value such that the devices can authenti-
cate each other during the recognition protocol; we refer
to this shared secret as the link value. Users can derive
the link value from the shared secret established during a
prior encounter, or using an out-of-band protocol.
In general, users may not wish to be recognizable by
their entire set of friends at all times (e.g., Alice may
only want her work colleagues to recognize her device
while at work). Therefore, a user should be able to con-
textually (e.g., in terms of time, place, activity) ﬁlter the
set of friends that can recognize them. This ﬁltering re-
quires that revocation of selective linkability be efﬁcient
(e.g., not require a group re-keying) and unilateral (e.g.,
not require communication). Additionally, the ﬁltering
may take place in one direction: Alice may want to not
be recognizable by Bob, yet still want to recognize him.
Therefore, we consider two distinct sets of link value: the
set of advertiseIDs (i.e., who you are willing to be rec-
ognized by), and the set of listenIDs (i.e., who you want
to recognize). Alice’s device is able to recognize Bob’s
device if and only if their shared link value is in Bob’s
advertiseIDs and in Alice’s listenIDs.
3.1 Security Requirements
We summarize the security requirements below:
Secure communication If Alice and Bob share an en-
counter, they are able to securely communicate using an
untrusted communication channel, both during and after
the encounter, and regardless of whether Alice and Bob
have opted to selectively link their devices.
Unlinkability The information exchanged during a se-
cure encounter reveals no identifying information about
the participating devices, unless the devices have been
explicitly linked.
In particular, unlinked devices that
encounter each other repeatedly are unable to associate
their encounters with a previous encounter.
Selective linkability Alice and Bob can optionally agree
to be linkable, and therefore able to recognize and au-
thenticate each others’ devices in subsequent discover-
ies.
Revocability Alice may, at any time, unilaterally revoke
Bob’s ability to recognize her.
3.2 Threat Model
We assume that user devices, including the operating sys-
tem and any applications the user chooses to run, do not
divulge information identifying or linking the device or
user. Preventing such leaks is an orthogonal concern
outside SDDR’s threat model. User devices attempt to
participate in the protocol with all nearby discovered de-
vices, a subset of which could be controlled by attackers,
who may all collude.
We do not consider radio ﬁngerprinting attacks, which
detect a device by its unique RF signature [22]. Such
928  23rd USENIX Security Symposium 
USENIX Association
attacks may require sophisticated radio hardware, and are
outside our threat model.
3.3 Strawman Protocol
A strawman scheme using existing cryptographic tools,
namely Difﬁe-Hellman [29] (DH) and Private Set Inter-
section [28, 39] (PSI), can meet the requisite security re-
quirements outlined above. Upon detecting a device, the
protocol performs a DH exchange to agree upon a shared
secret key. By generating a new DH public and private
key pair prior to each exchange, devices remain unlink-
able across encounters.
To recognize selectively linkable devices, the proto-
col executes PSI over the devices’ advertised and listen
identiﬁer sets. Selective linkability and revocability prop-
erties are satisﬁed by all PSI protocols; however, in order
to preserve privacy, we require a PSI protocol that sup-
ports unlinkability across multiple executions.
While the DH+PSI strawman achieves the desired se-
curity properties, it is not practical when frequently run
on resource constrained devices. As shown in Section 6,
the computation and communication requirements of ex-
isting PSI constructions are prohibitively high.
3.4 Observations
In order to enable a practical protocol we rely on several
observations:
First, strict unlinkability requires that two different
discoveries between a pair of devices are unlinkable, re-
gardless of how closely the discoveries are spaced in
time. This property cannot be achieved with a non-
interactive protocol, because it requires a change of
ephemeral network ID and DH keys after each discovery.
In order to use a non-interactive protocol, we must set-
tle for the slightly weaker property of long-term unlink-
ability; devices may be linkable within a time epoch, but
they remain unlinkable across epochs. For an epoch on
the order of minutes, long-term unlinkability is sufﬁcient
in practice. It is important to note that epoch boundaries
and durations do not require time synchronization; de-
vices may choose when to change epochs independently.
Second, detecting selectively linked devices requires
an intersection of the sets of advertised link values be-
tween a pair of devices. Even a simple, insecure inter-
section protocol would require the transmission of the
complete sets during each pair-wise device discovery,
which is too expensive. However, we note that in a
large deployment, discoveries among strangers are far
more common than discoveries among linked devices.
Therefore, an over-approximation of the set intersection
may sufﬁce. False positives can be resolved when two
presumed linkable devices attempt to authenticate each
other using the shared link value.
Finally, we can take advantage of the fact that link val-
ues shared between users are high-entropy values taken
from a large space, by design. General purpose PSI pro-
tocols, on the other hand, ensure security even when sets
contain low-entropy values (e.g., dictionary words).
Using these observations, we present the SDDR proto-
col, which meets the security requirements with practical
performance and energy efﬁciency.
4 SDDR Design
4.1 High-Level Protocol
Like the strawman protocol, SDDR uses DH to exchange
a shared secret key with each nearby device; however,
SDDR performs the exchange in a non-interactive man-
ner. Periodically, each device broadcasts its DH public
key and receives broadcasts from other nearby devices,
computing all pair-wise shared secret keys.
SDDR divides time into epochs, during which the
ephemeral network address, DH public/private key pair,
and advertiseIDs set digest remain constant. Devices are
unlinkable across epochs, thus preserving long-term un-
linkability. To avoid expensive synchronous communica-
tion, epochs are not synchronized among devices. As a
result, the DH computation may fail to produce a shared
key if it occurs around an epoch change of either device
in a pair. For instance, Alice receives Bob’s broadcast
in her epoch n, but Bob fails to receive Alice’s broadcast
until her epoch n + 1, so he computes a different key.
Because broadcasts occur more frequently than epoch
changes (seconds versus minutes), however, the proba-
bility that a broadcast round yields a shared key quickly
tends to one with every broadcast round.
Since the link identiﬁers shared between users are
high-entropy values chosen from a large space (e.g., a
shared key produced during a prior discovery), SDDR
can recognize linkable devices by broadcasting salted
hashes of their respective set of advertiseIDs. The DH
public key is used as the salt; since the salt is different
in each epoch, a device cannot be recognized by the bit-
pattern in its Bloom ﬁlter across epochs, that ensuring
long-term unlinkability. Each user then searches over the
hashes using their own set of listenIDs, along with the
corresponding salt value, in order to identify the listenID
(if any) associated with the remote device.
However, the communication required for moderately-
size sets (e.g., 256 advertiseIDs) is still too large for an
efﬁcient implementation in Bluetooth due to (pseudo-)
broadcast message length constraints. By allowing the
recognition protocol to over-approximate the actual in-
tersection between the set of local listenIDs and remote
advertiseIDs, SDDR can use a probabilistic set digest
data structure to reduce the communication needed to de-
termine the intersection. The size of the set digests can be
parameterized based on the message size restrictions of
USENIX Association  
23rd USENIX Security Symposium  929
the radio standard used for communication. The choice
affects performance only; false positives due to the use of
set digests can be resolved using the shared link values,
and therefore have no bearing on the protocol’s security.
The selective linkability property is satisﬁed by the
use of non-deterministic hashes of the link identiﬁers
shared by two users, only allowing linkable users to rec-
ognize each other. The revocation is supported by the
user’s ability to add or remove link values from the set of
advertiseIDs.
4.2 Formal Problem Deﬁnition
We divide the non-interactive SDDR protocol into two
algorithms (GenBeacon and Recognize), which we for-
malize below:
beacon ← GenBeacon(advertiseIDs)
In each epoch, a device wishing to participate in
peer encounters executes the GenBeacon algorithm,
which takes as input the current set of advertiseIDs.
The GenBeacon protocol outputs a message beacon,
which the device then broadcasts to nearby devices.
(sk, listenIDsre, L) ← Recognize(beaconre, listenIDs)
Upon receiving a beaconre from a remote peer, a
device executes the Recognize algorithm, which
additionally takes in the current set of listenIDs.
The Recognize algorithm outputs a secret key sk,
the set of listenIDsre associated with the remote
peer, and the link identiﬁer L for this encounter.
4.3 Detailed Protocol Description
Next, we provide a detailed description of the SDDR pro-
tocol. Pseudo-code for the GenBeacon and Recognize al-
gorithms is shown in Figure 1. In the protocol, as well
as our implementation, we use Bloom ﬁlters as the prob-
abilistic set digest data structure; however, other set di-
gests (e.g. Matrix ﬁlters [46]) could be used instead.
Each user Pi starts by running GenBeacon in order to
generate the beacon message to broadcast during the cur-
rent epoch. GenBeacon ﬁrst selects a random DH private
key αi, which corresponds to the DH public key gαi. Af-
terwards, GenBeacon computes the Bloom ﬁlter by hash-
ing each advertiseID within ASi (the set of advertiseIDs),
using the DH public key as the salt. The resulting beacon
contains the public key and the Bloom ﬁlter.
Each user Pi broadcasts their respective beacon during
the epoch. After receiving a beacon from a remote user
Pj, user Pi runs the Recognize algorithm. Recognize ﬁrst
computes the DH secret key dhki j, using the local user’s
DH private key and the remote user’s DH public key (as
contained in the beacon). Using the dhki j along with
the local and remote DH public keys, Recognize com-
putes the shared link identiﬁer Li j, which can optionally
be used in case the two users wish to selectively link.
Additionally, Recognize computes the key ski j using
the link identiﬁer Li j, which the two devices can use
to authenticate each other as the peer associated with
this encounter, and then securely communicate. Fi-
nally, Recognize queries the Bloom ﬁlter by hashing each
listenID within LSi (the set of listenIDs), using the re-
mote user’s DH public key as the salt, resulting in the set
of matches Mj.
Recall that ski j may not be shared (i.e., ski j (cid:30)= sk ji)
in some cases when individual devices decide to change
epochs. When a device attempts to communicate using
such a key, the authentication will fail, and the device
retries with a key produced in a subsequent discovery.
Also, to make sure a valid link identiﬁer is used, devices
attempt to authenticate each other as part of the pairing
process to selectively link.
Notation: Let BF{S} denote a Bloom ﬁlter encoding the set S. Let
H0, H1, and H2 denote independent hash functions later modeled as
random oracles in the proof.
Inputs: Each user Pi has a set of listenIDs (LSi) and a set of
advertiseIDs (ASi).
Outputs: For all users Pj, discovered by Pi, Pi outputs:
1. ski j: A shared secret key
2.
3. Li j: A shared link identiﬁer
listenIDsre: Set of matching listenID ∈ LSi associated with Pj
Protocol: Each Pi performs the following steps:
GenBeacon(ASi)
Select random αi ∈R Zp
1.
2. Compute BFi := BF{H1(gαi||x) : x ∈ ASi}
3. Create beaconi = (gαi , BFi)
Each user Pi broadcasts beaconi. For each user Pj that user Pi
discovers, Pi runs Recognize.
Recognize(beacon j,LSi)
1. Compute DH key dhki j = (gα j )αi
2. Compute link Li j :=(cid:31)H0(gαi||gα j||dhki j) if gαi < gα j
H0(gα j||gαi||dhki j) otherwise
3. Compute key ski j := H2(Li j)
4. Query for set M j := {x : x ∈ LSi ∧ H1(gα j||x) ∈ BF j}
Figure 1: SDDR Non-Interactive Protocol.
Hiding Bloom ﬁlter load After
receiving multiple
Bloom ﬁlters, and calculating the distribution of the
number of bits set, it is possible to determine the size
of the remote user’s set of advertiseIDs. This leaks infor-
mation, which could be used to link devices across mul-
tiple epochs. To prevent this leak, the Bloom ﬁlters are
padded to a global, uniform target number of elements
N. Rather than computing actual hashes, we randomly
930  23rd USENIX Security Symposium 
USENIX Association
Identiﬁcation and Authentication
select K ∗ (N −|advertiseIDs|) (not necessarily distinct)