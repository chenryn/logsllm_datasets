machines as efﬁcient algorithms.
Universal Composability. We model security in the universal
composability framework from Canetti [50] extended to support
a global setup [51], which lets us model concurrent executions.
We refer the reader to [50] for a comprehensive discussion.
We consider static corruptions, where the adversary announces
at the beginning which parties he corrupts. We denote the
environment by E. For a real protocol Π and an adversary A
we write EXEC τ,A,E to denote the ensemble corresponding
to the protocol execution. For an ideal functionality F and an
6
adversary S we write EXEC F ,S,E to denote the distribution
ensemble of the ideal world execution.
Deﬁnition 1 (Universal Composability): A protocol τ UC-
realizes an ideal functionality F if for any PPT adversary A
there exists a simulator S such that for any environment E the
ensembles EXEC τ,A,E and EXEC F ,S,E are computationally
indistinguishable.
Digital Signatures. A digital signature scheme DS, formally,
has a key generation algorithm KGen(1λ) that takes the security
parameter 1λ and outputs the public/secret key pair (pk , sk ),
a signing algorithm Sign(sk , m) inputs a secret key and a
message m ∈ {0, 1}∗ and outputs a signature σ, and a
veriﬁcation algorithm Vf(pk , m, σ) outputs 1 if σ is a valid
signature on m under the public key pk, and outputs 0 otherwise.
We require the standard notion unforgeability for the signature
scheme [52]. A stronger notion of strong unforgeability for
the signature scheme was shown to be equivalent to the UC
formulation of security [53].
Hard Relations. We recall the notion of a hard relation R
with statement/witness pairs (Y, y). We denote by LR the
associated language deﬁned as LR := {Y |∃y s.t. (Y, y) ∈ R}.
The relation is called a hard relation if the following holds: (i)
There exists a PPT sampling algorithm GenR(1λ) that outputs
a statement/witness pair (Y, y) ∈ R; (ii) The relation is poly-
time decidable; (iii) For all PPT adversaries A the probability
of A on input Y outputting a witness y is negligible.
2-Party Computation. The aim of a secure 2-party computa-
tion (2PC) protocol is for the two participating users P0 and P1
to securely compute some function f over their private inputs
x0 and x1, respectively. Apart from correctness of output, we
require privacy that states that the only information learned by
the parties in the computation is that speciﬁed by the function
output. Note that we require the standard security with aborts,
where the adversary can decide whether the honest party will
receive the output of the computation or not. I.e., we do not
assume any form of fairness or guaranteed output delivery. For
a comprehensive treatment of the formal UC deﬁnition we refer
the reader to [31]. As standard in the UC settings, we work
in the static corruption model, where the adversary declares
which party will be corrupted ahead of time.
Synchrony and Communication. We assume synchronous
communication between users, where the execution of the
protocol happens in rounds. We model this via an ideal
functionality Fclock [54], [55], where all honest parties are
required to indicate that are ready to proceed to the next round
before the clock proceeds. The clock functionality that we
consider is fully described in [51]. This means that all entities
are always aware of the given round. Users can abort a session
at any given round by sending a distinguished message (abort).
We also assume secure message transmission channels between
users modelled by the ideal functionality Fsmt.
Blockchain. We assume the existence of an ideal ledger
(blockchain) functionality B (just as in [9], [46], [56]) that
maintains the list of coins currently associated with each address
and that we model as a trusted append-only bulletin board. For
7
simplicity of notation, we make use of B for the chain of all
the currencies involved in the swap. The corresponding ideal
functionality FB maintains the ledger B locally and updates it
according to the transactions between users. More precisely, it
offers an interface Post(id, A, B, v) to transfer v coins during
a session with identiﬁer id, from address A (with associated
veriﬁcation key pk A), to address B (with associated veriﬁcation
key pk B), if provided with sk A. Users may use the interface to
transact among themselves. An additional interface Register,
is for users to register their address A along with the associated
veriﬁcation key pk A and a value v, which is stored in the ledger.
At any point in the execution, any user U can send a
distinguished message Read to FB, who sends the whole
transcript of B to U. We refer the reader to [56] for a formal
deﬁnition of this functionality.
I V. D E F I N I T I O N S F O R AT O M I C S WA P S
In the following we motivate and present the security
deﬁnition of atomic swaps in the form of an ideal functionality.
The main property the ideal functionality must guarantee is
atomicity: Either both users interested in the swap successfully
swap their coins, or the swap fails and everyone is back to
their initial holdings. For the more general case of n-to-˜n swap
between users U0 and U1, the atomicity notion we set out to
achieve is: if at least one of the ˜n coins is moved to U0, it is
possible for U1 (if has not aborted) to swap all of the n coins.
This notion ensures if U0 initiates the swap, U1 does not lose
coins, and if U0 aborts the swap before initiation, the swap is
aborted and she does not lose coins.
Discussion. Before delving into the description of the ideal
functionality, we discuss why existing deﬁnitions fall short in
capturing the security of universal atomic swaps.
The notion of cryptographic fairness (the analogue of output
atomicity in multi-party computation) has been studied exten-
sively in the literature, even in the context of blockchains [57],
[58]. The UC modelling of such a functionality guarantees that
honest participants in the computation receive their output if
the adversary also receives its. This notion intuitively seems to
capture the security for an atomic swap, i.e., if the adversary
gets an honest party’s digital good, the honest party gets the
adversary’s digital good. However, there are subtle aspects that
make it insufﬁcient to model security in our setting.
To exemplify the problem, consider the scenario where the
adversary has a coin va at address A and the honest party has
a coin vh at address H that they want to swap. Both parties
register the addresses A and H with the ideal functionality. To
complete the swap, the coin va must be transferred from A to
an address for which the honest party knows the authentication
key, and vice versa for the coin vh. A naive idea to implement
this using the fair exchange functionality would be for the
parties to simply exchange the secret keys of their addresses.
Unfortunately, this attempt turns out to lead to a completely
insecure protocol: During the execution of the fair exchange,
the attacker might quickly move all the coins from A to some
other address, before the execution of the protocol is completed.
In the end, the honest party will end up with the secret key
of the empty address A, whereas the attacker will learn the
secret key for H, effectively stealing coins.
Prior works [6] address this issue by leveraging a special coin
freezing functionality of the blockchain, thus preventing the
above described attack. However, the modelling of [6] implicitly
relies on special scripting capabilities of the blockchain to
implement the coin freezing function. Since we are interested
in settings, where the blockchain may not offer such scripts,
we have to work around this issue. Our functionality (largely
inspired by [6]) will implement coin freezing only by using
the standard interfaces offered by any blockchain (i.e., address
registration and transaction posting).
A. Ideal Functionality
We now formally describe our ideal functionality Fswap
(Figure 3) for atomic swaps of coins that circumvents the
above problem. Fswap interacts with the two users U0, U1 and
the simulator S. In the ﬁrst round, user U1 initiates a swap with
the message (swap1, id, V, ˜V , P K, ˜P K, ˜SK) that speciﬁes the
coins V := (v1, . . . , vn) (owned by U0) and ˜V := (˜v1, . . . , ˜v˜n)
(owned by U1) that are to be swapped. User U1 also gives his
authentication keys ˜SK for the addresses ˜PK corresponding to
the coins in ˜V .
In the second round, user U0 also acknowledges the swap
initiation by giving his authentication keys SK for the addresses
PK corresponding to the coins V . The ideal functionality uses
the Freeze subroutine to transfer each of those coins to an
id-speciﬁc address that is controlled by the functionality. The
functionality can do this because it knows the authentication
keys of each of those coins and can interact with FB to transfer
coins to these functionality controlled keys. If some transaction
fails, then the functionality returns the coins frozen so far to
the original owner.
In the third round, if user U0 aborts, all the coins are unfrozen
by the ideal functionality and transferred back to the respective
users. On the other hand, if the functionality receives buy for
some index set J ⊆ [˜n] of coins from U0, then it uses the
Transfer subroutine to transfer the coins ˜vj for j ∈ J from
its control to user U0.
In the last round, if user U1 aborts, all the frozen coins of
user U0 (from V ) are unfrozen by the ideal functionality and
transferred back to user U0. On the other hand, all coins of
U1 that remained frozen (coins not in J) are unfrozen and
transferred back to U1. Otherwise, if user U1 responds with buy
for some index I ⊆ [n], the functionality uses the Transfer
subroutine to transfer the coins vi for i ∈ I to user U1. Finally,
all coins still controlled by the functionality are unfrozen and
transferred to their initial owners.
Atomicity. The functionality ensures that if user U0 in round
3 aborts the swap, all the coins are refunded to both parties.
Instead if U0 initiates a swap for any subset of ˜n coins in
round 3, user U1 is allowed to complete the swap in round 4
for all n coins. Since no party can unilaterally transfer a coin
(as it is locked with functionality), the functionality guarantees
atomicity for the n-to-˜n swap.
The ideal functionality Fswap (in session id) interacts with
users U0 and U1 and the ideal adversary S.
(Round 1) Upon receiving (swap1, id, V, ˜V , P K, ˜P K, ˜SK)
from U1, where V := (v1, . . . , vn) ∈ N,
˜V := (˜v1, . . . , ˜v˜n) ∈ N, P K := (pk 1, . . . , pk n),
˜P K := ( ˜pk 1, . . . , ˜pk ˜n), ˜SK := ( ˜sk 1, . . . , ˜sk ˜n). Send
(swap1, id, V, ˜V , P K, ˜P K, U1) to S and store the input tuple.
(Round 2) Upon receiving (swap2, id, V, ˜V , P K, ˜P K, SK)
from user U0, where SK := (sk 1, . . . , sk n), call the
subroutines Freeze(id, vi, pk i, sk i, i) and
Freeze(id, ˜vj, ˜pk j, ˜sk j, j) for all i ∈ [n] and j ∈ [˜n]. If all of
the invocations are successful, send
(swap2, id, V, ˜V , P K, ˜P K, U0) to S, store the input tuple and
proceed to round 3. Otherwise, revert the coin freezing by
invoking the corresponding subroutines
UnFreeze(id, vi, pk i, i) and UnFreeze(id, ˜vj, ˜pk j, j).
(Round 3) Upon receiving (abort, id) from the user U0,
revert the freezing by calling UnFreeze(id, vi, pk i, i) and
UnFreeze(id, ˜vj, ˜pk j, j) for all i ∈ [n] and j ∈ [˜n].
Otherwise, upon receiving (buy, id, J, pk ), for some J ⊆ [˜n],
call the subroutine Transfer(id, J, pk ). Store J and proceed
to round 4.
(Round 4) Upon receiving (abort, id) from the user U1, call
UnFreeze(id, vi, pk i, i) for all i ∈ [n] and
UnFreeze(id, ˜vj, ˜pk j, j) for all j /∈ J and terminate.
Otherwise, upon receiver (buy, id, I, ˜pk ) from U1 do the
following:
• If I (cid:54)= ∅ call Transfer(id, I, ˜pk ), then
UnFreeze(id, ˜vj, ˜pk j, j) for all j /∈ J and
UnFreeze(id, vi, pk i, i) for all i /∈ I.
• If I = ∅ call UnFreeze(id, vi, pk i, i) and
UnFreeze(id, ˜vj, ˜pk j, j) for all i ∈ [n] and j /∈ J.
Notify S of the outcome of the operation.
Description of the subroutines
Freeze: On input a tuple (id, v, pk , sk , i), transfer v coins
from the address speciﬁed by pk (using sk) to some
id-speciﬁc address pk id controlled by the ideal functionality
via Post(id, pk , pk id, v). The function is successful if the
transaction is accepted by FB.
UnFreeze: On input a tuple (id, v, pk , i) transfer back the v
frozen coins to the corresponding public key pk, via
Post(id, pk id, pk , v).
Transfer: On input a tuple (id, I, pk ), transfer all frozen
coins corresponding to the index set I to the public key pk,
via Post(id, pk id, pk ,(cid:80)
i∈I vi).
Fig. 3: Ideal functionality FB
swap for fair swap of coins
Fungibility. Notice that the functionality only makes standard
Transfer calls to the blockchain B. No additional information
is present, besides veriﬁcation keys and transacted values. Thus
these calls are syntactically identical to regular transactions.
8
V. AT O M I C S WA P S F R O M A D A P T O R S I G N AT U R E S
Here we present an efﬁcient atomic swap protocol for n-
to-˜n swap of coins between two users P0 and P1, under the
condition that transactions are signed using Schnorr or ECDSA
signatures. The fundamental building blocks of our protocol
are adaptor signatures and veriﬁable timed dlog (VTD), both
of which are deﬁned below.
A. Adaptor Signature
Adaptor signatures [47] let users generate a pre-signature
on a message m which by itself is not a valid signature, but
can later be adapted into a valid signature if the user knows
some secret value. The formal deﬁnition of adaptor signatures
is given below.
Deﬁnition 2 (Adaptor Signatures): An adaptor signature
scheme ΠAS w.r.t. a hard relation R and a signature
scheme ΠDS = (KGen, Sign, Vf) consists of algorithms
(pSign, Adapt, pVf, Ext) deﬁned as:
ˆσ ← pSign(sk , m, Y ): The pre-sign algorithm takes as input
a secret key sk, message m ∈ {0, 1}∗ and statement Y ∈ LR,
outputs a pre-signature ˆσ.
0/1 ← pVf(pk , m, Y, ˆσ): The pre-verify algorithm takes as
input a public key pk, message m ∈ {0, 1}∗, statement Y ∈ LR
and pre-signature ˆσ, outputs a bit b.
σ ← Adapt(ˆσ, y): The adapt algorithm takes as input a pre-
signature ˆσ and witness y, outputs a signature σ.
y ← Ext(σ, ˆσ, Y ): The extract algorithm takes as input a
signature σ, pre-signature ˆσ and statement Y ∈ LR, outputs a
witness y such that (Y, y) ∈ R, or ⊥.
In terms of security, we want (i) unforgeability that is similar
to the unforgeability of standard signature schemes, except that
we additionally want that producing a forgery σ for some
message m is hard even given a pre-signature ˜σ on m, with
respect to some uniformly sampled instance Y ∈ LR. We then
want (ii) witness extractability that guarantees that given a
valid signature σ and a pre-signature ˜σ for a message m and
an instance Y , one can efﬁciently extract a witness y for Y .
Finally, we want (iii) pre-signature adaptability that guarantees
that any valid pre-signature ˜σ generated with respect to an
instance Y , can be adapted into a valid signature σ if given
the witness y for the instance Y . For formal deﬁnitions we
refer the reader to Appendix C.
In this work, we consider the constructions proposed in [47]
of adaptor signatures where the signature scheme ΠDS is
of Schnorr or ECDSA. The hard relation R used in their
constructions is that of the discrete log relation, where the
language is deﬁned as: LR := {H : ∃x ∈ Z∗
q, s.t. H = Gx},
where (G, G, q) are the group description, its generator, and
its order, respectively.
B. Veriﬁable Timed DLog
A Veriﬁable timed dlog [34] is deﬁned with respect to a
group G of order q and a generator G. Here, a committer
generates a timed commitment of timing hardness T of a value
x ∈ Z∗
q such that H = Gx where H is public and x is referred
9
to as the dlog. (discrete logarithm) of H (wrt. G). The veriﬁer
checks the well-formedness of the timed commitment and can
learn the value x by force opening the commitment in time T.
The formal deﬁnition is as follows.
Deﬁnition 3 (Veriﬁable Timed Dlog): A VTD for the group
G with generator G and order q is a tuple of four algorithms
(Commit, Verify, Open, ForceOp) where:
(C, π) ← Commit(x, T): the commit algorithm (randomized)
takes as input a discrete log value x ∈ Zq (generated using
KGen(1λ)) and a hiding time T and outputs a commitment C
and a proof π.
0/1 ← Verify(H, C, π): the verify algorithm takes as input a
group element H, a commitment C of hardness T and a proof
π and outputs 1 if and only if, the value x embedded in C
satisﬁes H = Gx. Otherwise it outputs 0.
(x, r) ← Open(C): the open algorithm (run by committer)
takes as input a commitment C and outputs the committed
value x and the randomness r used in generating C.
x ← ForceOp(C): the force open algorithm takes as input the
commitment C and outputs a discrete log value x.
The security requirements for a VTD scheme are that of
(i) soundness where the user is convinced that, given C, the
ForceOp algorithm will produce the committed dlog. value
x in time T and (ii) privacy, where all PRAM algorithms6
whose running time is at most t (where t < T) succeed
in extracting x from the commitment C and π with at most
negligible probability. For formal deﬁnitions we refer the reader
to Appendix E.
The construction of VTD from [34] makes use of time-lock
puzzles [59], a primitive that lets a committer embed a secret
inside a puzzle with the guarantee that the puzzle can be opened
only after time T. Speciﬁcally, the committer embeds the dlog.
value x inside a time-lock puzzle and uses a special NIZK proof
to prove its validity. Speciﬁcally, the NIZK proves that the
time-lock puzzle can be solved in time T and whats embedded
inside satisﬁes the equation H = Gx. They construct such an
efﬁcient NIZK proof using cut-and-choose techniques, Shamir
secret sharing [60] and homomorphic time-lock puzzles [61].
For completeness, we recall their construction in Figure 9.
C. 2-Party Protocols
Joint Key Generation. We require that two parties P0 and
P1 jointly generate (ECDSA and Schnorr) keys. We denote
JKGen, where SIG = Schnorr or
this interactive protocol by ΓSIG
SIG = ECDSA. The joint key generation protocol ΓSIG
JKGen takes
as input the security parameter 1λ and the group description
(G, G, q) as input from both parties. The protocol outputs the
public key pk to both parties and outputs the secret key share
sk 0 to P0 and sk 1 to P1. We efﬁciently instantiate ΓSchnorr
JKGen
with the interactive protocol from [62], where in the end we
have pk = Gsk (sk is the secret key), and sk = (sk 0 + sk 1).