2001-0439
suid Buﬀer overﬂow 2001-1180
Table 1: Initial vulnerability per host in example
network.
To compromise the Data Server, an attacker can exploit
the FTP and SMTP Servers using the ftp/.rhost attack.
Both servers are running ftp server versions that are vul-
nerable to these exploits. In addition, their rhost directories
are not properly write-protected. The consequence of the
ftp/.rhost exploit is that it establishes a trust relation be-
tween the host and attacker machines, and introduces an
Host
*.*.*.*
*.*.*.*
196.216.0.1
196.216.0.1
196.216.0.3
196.216.0.10
Host
Port
21,25
196.216.0.1
21,22
196.216.0.10
196.216.0.2 ANY
196.216.0.3 ANY
196.216.0.2 ANY
196.216.0.2 ANY
Table 2: Connectivity in example network.
authentication bypassing vulnerability in the victim. An at-
tacker can then log in to these servers with user access priv-
ilege. From this point, the attacker can use the connection
to the Data Server to compromise it. The attacker may also
compromise the SMTP Server, or choose to compromise the
Terminal machine in order to delay an attack. The Ter-
minal machine can be compromised via the chain of LICQ
remote to user attack and the local buﬀer overﬂow attack on
the “at” daemon. Finally, the attacker from either the FTP
server, SMTP server, or the Terminal machine can use the
connectivity to the Data Server to compromise it through
the chain of LICQ exploit and “suid” local buﬀer overﬂow
attack. Such attack scenarios, as in our example network
model, are represented using an attack tree, discussed in de-
tails in the next section.
5. ATTACK TREE MODEL
Given the complexity of today’s network infrastructure,
materializing a threat usually requires the combination of
multiple attacks using diﬀerent vulnerabilities. Represent-
ing diﬀerent scenarios under which an asset can be damaged
thus becomes important for preventive analysis. Such repre-
sentations not only provide a picture of the possible ways to
compromise a system, but can also help determine a mini-
mal set of preventive actions. Given the normal operational
state of a network, including the vulnerabilities present, an
attack can possibly open up avenues to launch another at-
tack, thereby taking the attacker a step closer to its goal.
A certain state of the network in terms of access privileges
or machine connectivity can be a prerequisite to be able to
exploit a vulnerability. Once the vulnerability is exploited,
the state of the network can change enabling the attacker to
launch the next attack in the sequence. Such a pre-thought
sequence of attacks gives rise to an attack scenario.
It is worth noting that such a notion of a progressive at-
tack induces a transitive relationship between the vulnera-
bilities present in the network and can be exploited while
deciding on the security measures. Attack graph [1, 11, 14,
18] and attack tree [16, 17] representations have been pro-
posed in network vulnerability management to demonstrate
such cause-consequence relationships. The nodes in these
data structures usually represent a certain network state of
interest to an attacker, with edges connecting them to indi-
cate the cause-consequence relationship. Although diﬀerent
attack scenarios are easily perceived in attack graphs, they
can potentially suﬀer from a state space explosion problem.
Ammann et al. [1] identiﬁed this problem and propose an
alternative formulation, with the assumption of monotonic-
ity. The monotonicity property states that the consequence
of an attack is always preserved once achieved. Such an
assumption can greatly reduce the number of nodes in the
attack graph, although at the expense of further analysis re-
quired to determine the viable attack scenarios. An exploit-
dependency graph can be extracted from their representation
to indicate the various conjunctive and disjunctive relation-
ships between diﬀerent nodes. For the purpose of this study,
we adopt the attack tree representation since it presents a
much clearer picture of the diﬀerent hierarchies present be-
tween attacker sub-goals. An attack tree uses explicit con-
junctive and disjunctive branch decomposition to reduce the
visualization complexity of a sequence of operations. The
representation also helps us calculate the cost factors we are
interested in eﬃciently.
Diﬀerent properties of the network eﬀectuate diﬀerent ways
for an attacker to compromise a system. We ﬁrst deﬁne an
attribute-template that lets us generically categorize these
network properties for further analysis.
Definition 2. Attribute-Template
An attribute-template is a generic property of the hardware
or software conﬁguration of a network which includes, but
not limited to, the following:
• system vulnerabilities (which are often reported in vul-
nerability databases such as BugTraq, CERT/CC, or
NetCat).
• network conﬁguration such as open port, unsafe ﬁre-
wall conﬁguration, etc.
• system conﬁguration such as data accessibility, unsafe
default conﬁguration, or read-write permission in ﬁle
structures.
• access privilege such as user account, guest account, or
root account.
• connectivity.
An attribute-template lets us categorize most of the atomic
properties of the network that might be of some use to
an attacker. For example, “running SSH1 v1.2.23 on FTP
Server” can be considered as an instance of the system vul-
nerabilities template. Similarly, “user access on Terminal ” is
an instance of the access privilege template. Such templates
also let us specify the properties in propositional logic. We
deﬁne an attribute with such a concept in mind.
Definition 3. Attribute
An attribute is a propositional instance of an attribute-
template. It can take either a true or false value.
The success or failure of an attacker reaching its goal de-
pends mostly on what truth values the attributes in a net-
work take. Its also lays the foundations for a security man-
ager to analyze the eﬀects of falsifying some of the attributes
using some security policies. We formally deﬁne an attack
tree model based on such attributes. Since we consider an
attribute as an atomic property of a network, taking either
a true or false value, most of the deﬁnitions are written in
propositional logic involving these attributes.
Definition 4. Attack
Let S be a set of attributes. We deﬁne Att to be a mapping
Att : S × S → {true, f alse} and Att(sc, sp) = truth value of
sp.
a = Att(sc, sp) is an attack if sc (cid:7)= sp ∧ a ≡ sc ↔ sp.
sc and sp are then respectively called a precondition and
postcondition of the attack, denoted by pre(a) and post(a)
respectively.
Att(sc, sp) is a φ–attack if ∃non-empty S(cid:2) ⊂ S|[sc (cid:7)= sp ∧
Att(sc, sp) ≡V
si ∧ sc ↔ sp] where si ∈ S(cid:2)
.
i
An attack relates the truth values of two diﬀerent attributes
so as to embed a cause-consequence relationship between the
two. For example, for the attributes sc =“vulnerable to sshd
BOF on machine A” and sp =“root access privilege on ma-
chine A”, Att(sc, sp) is an attack – the sshd buﬀer overﬂow
attack. We would like to clarify here that the bi-conditional
logical connective “↔” between sc and sp does not imply
that sp can be set to true only by using Att(sc, sp); rather
it means that given the sshd BOF attack, the only way to
make sp true is by having sc true. In fact, Att(“vulnerable
to local BOF on setuid daemon on machine A”,sp) is also
a potential attack. The φ–attack is included to account
for attributes whose truth values do not have any direct
relationship. However, an indirect relationship can be es-
tablished collectively. For example, the attributes sc1 =
“running SSH1 v1.2.25 on machine A” and sc2 = “connec-
tivity(machine B, machine A)” cannot individually inﬂuence
the truth value of sc, but can collectively make sc true, given
they are individually true. In such a case, Att(sc1, sc) and
Att(sc2, sc) are φ–attacks.
Figure 2: Example attack tree.
Definition 5. Attack Tree
Let A be the set of attacks, including the φ–attacks. An
attack tree is a tuple AT = (sroot, S, τ, ε), where
true.
1. sroot is an attribute which the attacker wants to become
2. S = Ninternal ∪ Nexternal ∪ {sroot} is a multiset of
attributes. Nexternal denotes the multiset of attributes si for
which (cid:2)a ∈ A|si ∈ post(a). Ninternal denotes the multiset
of attributes sj for which ∃a1, a2 ∈ A|[sj ∈ pre(a1) ∧ sj ∈
post(a2)].
3. τ ⊆ S × S. An ordered pair (spre, spost) ∈ τ if ∃a ∈
A|[spre ∈ pre(a) ∧ spost ∈ post(a)]. Further, if si ∈ S and
has multiplicity n, then ∃s1, s2, . . . , sn ∈ S|(si, s1), (si,s2), . . .
, (si, sn) ∈ τ , and
4. ε is a set of decomposition tuples of the form (cid:14)sj, dj(cid:15)
deﬁned for all sj ∈ Ninternal∪{sroot} and dj ∈ {AN D, OR}.
dj is AN D when
[si ∧ (si, sj) ∈ τ ] ↔ sj is true, and OR
W
when
[si ∧ (si, sj) ∈ τ ] ↔ sj is true.
i
i
Fig. 2 shows an example attack tree, with the attribute “root
access on machine A” as sroot. The multiset S forms the
nodes of the tree. The multiset Nexternal specify the leaf
nodes of the tree. These nodes reﬂect the initial vulnerabil-
ities present in a network and are prone to exploits. Since,
an attribute can be a precondition for more than one at-
tack, it might have to be duplicated, hence forming a mul-
tiset. The attribute “machine B can connect to machine A”
in the example is one such attribute. The set of ordered
pairs, τ , reﬂect the edges in the tree. The existence of an
edge between two nodes imply that there is a direct or indi-
rect relationship between their truth values, signiﬁed by the
decomposition at each node. The AND decomposition at a
node requires all child nodes to have a truth value of true for
it to be true. The OR decomposition at a node requires only
one child node to have a truth value of true for it to be true.
Using these decompositions, the truth value of an attribute
sj ∈ Ninternal∪{sroot} can be evaluated after assigning a set
of truth values to the attributes si ∈ Nexternal. Fig. 3 shows
the attack tree for our example network model. It depicts
a clear picture of the diﬀerent attack scenarios possible, as
outlined in the previous section. We use an in-house tool to
generate this attack tree.
6. COST MODEL
In order to defend against the attacks possible, a secu-
rity manager (decision maker) can choose to implement a
variety of safeguard technologies, each of which comes with
diﬀerent costs and coverage. For example, to defend against
the ftp/.rhost exploit, one might choose to apply a security
patch, disable the FTP service, or simply tighten the write
protection on the .rhost directory. Each choice of action can
have a diﬀerent cost. Besides, some measures have multiple
Figure 3: Attack tree of example network model.
V
coverage, but with higher costs. A security manager has to
make a decision and choose to implement a subset of these
policies in order to maximize the resource utilization. How-
ever, given the number of permutations possible in choosing
this subset (2n for n policies), this decision is not a trivial
task.
Security planing begins with risk assessment which de-
termines threats, loss expectancy, potential safeguards and
installation costs. Many researchers have studied risk as-
sessment schemes, including the National Institute of Stan-
dards and Technology (NIST) [19]. For simplicity, the secu-
rity manager can choose to evaluate the risks by consider-
ing a relative magnitude of loss and hardening costs [2, 12,
19]. However, relative-cost approaches do not provide suf-
ﬁcient information to prioritize security measures especially
when the organization faces resource constraints. We adapt
Butler’s multi-attribute risk assessment framework [3, 4] to
develop quantitative risk assessments for our security op-
timization. Butler’s framework enables an aggregated rep-
resentation of the various factors dominating the business
model of an organization.
First we deﬁne the notion of a security control in the con-
text of the attack tree deﬁnition.
Definition 6. Security Control
Given an attack tree (sroot, S, τ, ε), the mapping SC :
Nexternal → {true, f alse} is a security control if ∃si ∈
Nexternal|SC(si) = f alse.
In other words, a security control is a preventive measure
to falsify one or more attributes in the attack tree, so as to
stop an attacker from reaching its goal. Further, in the pres-
ence of multiple security controls SCk, the truth value of an
attribute si ∈ Nexternal is taken as
SCk(si). Given a secu-
rity control SC, the set of all si ∈ Nexternal|SC(si) = f alse
is called the coverage of SC. Hence, for a given set of se-
curity controls we can deﬁne the coverage matrix specifying
V
k
the coverage of each control. For a given set of m security
controls, we use the boolean vector (cid:2)T = (T1,T2, . . . , Tm) to
indicate if a security control is chosen by a security manager.
Note that the choice of this vector indirectly speciﬁes which
attributes in the attack tree would be false to begin with.
6.1 Evaluating Potential Damage
The potential damage, Pj , represents a unit-less damage
value that an organization may have to incur in the event
that an attribute sj becomes true. Based on Butler’s frame-
work, we propose four steps to calculate the potential dam-
age for an attribute sj.
Step1: Identify potential consequences of having a true value
for the attribute, induced by some attack. In our case,
we have identiﬁed ﬁve outcomes – lost revenue (mone-
tary), non-productive downtime (time), damage recov-