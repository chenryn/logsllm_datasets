        }
        return res;
    }
    unsigned int encrypt(unsigned int block, unsigned int key1, unsigned int key2){
        unsigned int res = block;
        res = encrypt_data(res, key1);
        res = encrypt_data(res, key2);
        return res;
    }
    unsigned int decrypt(unsigned int block, unsigned int key1, unsigned int key2){
        unsigned int res = block;
        res = decrypt_data(res, key2);
        res = decrypt_data(res, key1);
        return res;
    }
    void init_middle_data(){
        cout (enc,i));
            }
            else{
                unsigned int count = 0;
                unsigned int tmp = 0;
                do{
                    count++;
                    tmp = count (tmp,i));
            }
        }
    }
    unordered_map find_possible_key(unsigned int t){
        cout  result;
        unsigned int dec = 0;
        for(unsigned int i = 0; i (key,middle_data[dec]));
                }
                else{
                    unsigned int count = 0;
                    unsigned int tmp;
                    do{
                        count++;
                        tmp = count (tmp,middle_data[dec]));
                }
                dec_count++;
                dec = dec_count  > possible_keys,vectorenc_labels,unsigned int a0,unsigned int b0,int idxi,int idxj){
        unordered_map choice_keys;
        unsigned int c, c1, b1, a00;
        for(int i = 0; i first;
                if(b1 > 0x1000000) continue;
                unsigned int dec_b1 = b1;
                unsigned int count = 0;
                while(choice_keys.find(b1) != choice_keys.end()){
                    a00 = choice_keys[b1];
                    if(a0 == a00 && decrypt(c,a0,dec_b1) == decrypt(c1,a0,b0)){
                        return dec_b1;
                    }
                    count++;
                    b1 = count  > possible_keys,vectorenc_labels){
        unordered_map  choice_keys, choice_keys2;
        unsigned int c1, b0, a0, p1, c2, a1, b1;
        for(int i = 0; i first;
                    if(b0 >= 0x1000000) continue;
                    unsigned int count = 0;
                    unsigned int dec_b0 = b0;
                    while(choice_keys.find(b0) != choice_keys.end()){
                        a0 = choice_keys[b0];
                        p1 = decrypt(c1, a0, dec_b0);
                        unsigned int b0_tmp = dec_b0;
                        unsigned int count_tmp = 0;
                        while(choice_keys2.find(b0_tmp) != choice_keys2.end()){
                            a1 = choice_keys2[b0_tmp];
                            if(p1 == decrypt(c2,a1,dec_b0)){
                                b1 = recover_key_part2(possible_keys,enc_labels,a0,dec_b0,i,j);
                                if(b1 != 0){
                                    cout  > possible_keys(4);
            vectorenc_labels(4);
            for(int j = 0; j < 4; j++){
                possible_keys[j] = find_possible_key(g_tables[i][j][1]);
                enc_labels[j] = g_tables[i][j][0];
            }
            recover_key(possible_keys,enc_labels);
        }
    }
cpp求解key的1 2 3 4，然后py脚本计算flag
    from block_cipher import decrypt_data, encrypt_data
    from tqdm import tqdm
    import hashlib
    from Crypto.Util.number import *
    key = [
        [13675268, 8343801],
        [12870274, 10251687],
        [12490757, 6827786],
        [3391233, 2096572],
        [], # 1, 2
        [], # 3, 4
        [], # 5, 6
        [] # 7, 4
    ]
    data1 = [(13303835, 2123830),
                (2801785, 11303723),
                (13499998, 248615),
                (13892520, 7462011)]
    data2 = [(3244202, 918053),
                (3277177, 6281266),
                (1016382, 7097624),
                (10016472, 13600867)]
    data3 = [(5944875, 3442862),
                (7358369, 8423543),
                (6495696, 9927178),
                (13271900, 11855272)]
    data4 = [(5333988, 87113),
                (9375869, 11687470),
                (5011062, 14981756),
                (2509493, 12330305)]
    def get_and_key(data, key):
        res = [0, 0]
        for i in data:
            if decrypt_data(decrypt_data(i[1], key[1][0]), key[0][0]) == 0:
                res[0] = decrypt_data(decrypt_data(i[0], key[1][0]), key[0][0])
            if decrypt_data(decrypt_data(i[1], key[1][0]), key[0][1]) == 0:
                res[1] = decrypt_data(decrypt_data(i[0], key[1][0]), key[0][1])
            if decrypt_data(decrypt_data(i[1], key[1][1]), key[0][0]) == 0:
                res[1] = decrypt_data(decrypt_data(i[0], key[1][1]), key[0][0])
            if decrypt_data(decrypt_data(i[1], key[1][1]), key[0][1]) == 0:
                res[1] = decrypt_data(decrypt_data(i[0], key[1][1]), key[0][1])
        return res
    def get_xor_key(data, key):
        res = [0, 0]
        for i in data:
            if decrypt_data(decrypt_data(i[1], key[1][0]), key[0][0]) == 0:
                res[1] = decrypt_data(decrypt_data(i[0], key[1][0]), key[0][0])
            if decrypt_data(decrypt_data(i[1], key[1][0]), key[0][1]) == 0:
                res[0] = decrypt_data(decrypt_data(i[0], key[1][0]), key[0][1])
            if decrypt_data(decrypt_data(i[1], key[1][1]), key[0][0]) == 0:
                res[0] = decrypt_data(decrypt_data(i[0], key[1][1]), key[0][0])
            if decrypt_data(decrypt_data(i[1], key[1][1]), key[0][1]) == 0:
                res[1] = decrypt_data(decrypt_data(i[0], key[1][1]), key[0][1])
        return res
    key[4] = get_and_key(data1, [key[0], key[1]])
    key[5] = get_and_key(data2, [key[2], key[3]])
    key[6] = get_and_key(data3, [key[4], key[5]])
    key[7] = get_xor_key(data4, [key[6], key[3]])
    def xor(A, B):
        return bytes(a ^ b for a, b in zip(A, B))
    the_chaos=b''
    for i in key:
        tmp = sum(i)
        the_chaos += bytes(long_to_bytes(tmp))
    mask = hashlib.md5(the_chaos).digest()
    data = long_to_bytes(0x1661fe85c7b01b3db1d432ad3c5ac83a)
    print(xor(mask, data))