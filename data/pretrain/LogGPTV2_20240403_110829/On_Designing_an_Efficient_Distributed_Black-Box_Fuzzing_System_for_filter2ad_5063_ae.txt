been ﬁxed by all aﬀected vendors: Apple Google, OEM and
telecom operators. This approach is in synonymous with
responsible disclosure best practices.
Storage Utilisation
3.3.5
Table 1 shows the times taken for conducting a 1000 ﬁle
PNG fuzz job with and without BSDiﬀ.
The process trades storage space for only a minor loss in
fuzzing speed as ﬁles have to be patched before every fuzzing
experiment. A small and good seed ﬁle selected by SFAT
helps too. On an iOS device, patching a 1000 job packet
takes less than a minute. The main disadvantage of using
BSDiﬀ patching comes from a lot of CPU time and memory
consumed while the patch for a ﬁle is produced [23]. This
can be easily mitigated when running parallel threads of
fuzzing on a high-performance server and running the tests
on more instances of mobile devices of the same model.
3.4 Results Discussion
From our experiments, we found that preprocessing fuzzed
inputs can be a worthwhile trade-oﬀ to make. In Subsection
3.2.2, spending a few seconds on preprocessing prior
to testing reduced the incidence of repeated tests
by upto 4 times. This of course is only a concern when
dealing with a large number of test cases as was our case.
Usage of SFAT to maximise RFC coverage has beneﬁts.
As explained in Subsection 3.2.1, a ﬁle that would not have
caused a crash was modiﬁed within the constraints of the
ﬁle format. The resulting ﬁle then causes a crash in the
target device due to the modiﬁed bit. This is just one ex-
ample among many others and shows that instead of blind
fuzzing, intelligently crafting the inputs beforehand
really pays dividends. On the other hand, automatically
downloaded and analysed seed ﬁles may not cover 100% of
the code coverage as is evident from [14]. Manual insertion
of less common ﬁelds are still necessary.
FEET is successful in creating fuzz jobs that yield a good
number of crashes. It can be augmented by using the Black-
box fuzz scheduling techniques identiﬁed in [11] to select jobs
based on a smaller epochs and assign weights to determine
probability of selection of subsequent jobs after measuring
crash ratio obtained from fuzzing one epoch. In this way we
could get a crash arrival even faster than by the sole utiliza-
tion of FEET.
To improve the bug variety discovered, fuzzing operators
with a higher entropy such as bit-level operations could pro-
vide better results such as with zzuf[26].
The similarity of the number of crashes for multiple de-
40vices running Android 4.0.4 devices suggests that the bug
is at the Android AOSP level that is independent of device
manufacturer.
Usage of SOFT clients for browser renderable formats are
still not very scalable to new platforms. For ﬁles renderable
in the web browser, the mobile client can be made much
simpler.
Exponential storage space growth is also mitigated at some
expense of fuzzing speed. However, the payoﬀ can be in-
creased with more users joining the fuzzing experiments.
4. RELATED WORK
The concept of fuzzing was originally introduced in 1990
by Miller et al.
[27]. The fuzzer’s targets were Unix utili-
ties. Since then a lot of research work has been conducted
to improve the methodology of fuzzing. However, mobile
Operating systems though Unix based do not expose com-
mand line utilities to the average user. With the changing
IT landscape new data formats will be deﬁned and existing
formats will evolve - all of which require an investment of
time and energy to adapt generational fuzzing methodology.
Therefore, techniques that use probabilistic heuristics such
as mutation ratio, belief metrics and mutation distribution
such as our approach are some of the ﬁrst attempts to pro-
vide intelligence to blind fuzzing.
Google [28] has the necessary space and resources to build
a fuzzing farm where they have full-control of instrumen-
tation. However, independant researchers and smaller labs
have no such luxury. Crowdsourced vulnerability discovery
on the other hand has limited control over the remote de-
vice.
BFF [29] by CERT is an automated system for ﬁnding de-
fects in applications that run on the Linux and Mac OS X
platforms.
It is also integrated with a tool called CERT
Triage Tools that classiﬁes crashes by severity. BFF fuzzes
applications which run on the same system as the BFF it-
self. It is one of the mutational fuzzers that fuzzes a sin-
gle program with a collection of seeds and a set of muta-
tion ratios.
It uses a Multi-Armed-Bandit [32] algorithm
to select the best seed-ratio pairs during a fuzz campaign.
Due to the shared space, it is easier to coordinate fuzzing,
amend fuzzing conﬁguration by feedback and make use of
system tools like GDB and Crashwrangler to capture back
traces. Also, each fuzzed input is not retained. For testing
every new application, the fuzzer is generated and testing
cycle repeated. This introduces unnecessary fuzz genera-
tion time and duplication of malicious ﬁles. There is also no
co-relation of fuzz inputs tested across applications or de-
vices that distributed fuzzing provides. Although BFF as a
framework is eﬃcient, it is not applicable when the target is
a mobile device and runs independently outside the vicini-
ties of the fuzzer without volunteer’s administrative access.
Automatic Exploit Generation [30] sought to automatically
ﬁnd vulnerabilities in an application and immediately write
exploits for them. They have tested the tool on 14 open
source projects and discovered 16 exploits. They make use
of preconditioned symbolic execution of source and binary
code analysis to come up with formula for exploits [30]. This
means that they need to have access to the source code. In
the mobile domain we know that that is not possible. Source
code of Android version in devices is not released as they
contain proprietary code, added on by the OEMs. This is
even more true on iOS. Even if the source code does be-
come accessible, the large program size poses a limitation to
the extent of manual analysis possible. Additionally, with
Mobile OS’s implementing Address Space Randomizations
(ASLR), symbolic execution methodologies are not eﬀective.
The approach described in this paper for selection of good
fuzzing conﬁguration is analogous to the work by both Woo
et. al. [11] and Householder et. al. [21]. The former stud-
ied how to ﬁnd the greatest number of unique bugs in a fuzz
campaign. They particularly developed an analytic frame-
work using a mathematical model of black-box mutational
fuzzing, which modeled black-box mutational fuzzing as a
WCCP process with unknown weights and used the condi-
tion in the No Free Lunch theorem to decide a better online
algorithm. The latter described a workﬂow for black-box
fuzz testing and an algorithm for selecting fuzz parameters
to maximize the number of unique application errors. They
presented an implementation of the algorithm, which was
used to ﬁnd several previously unknown security vulnerabil-
ities.
Robert et. al [11] have devised a general fuzz confgura-
tion scheduling problem-model for selection of seed ﬁles for
fuzzing independent of the fuzzing scheduling algorithm. In
our work on fuzzing, fuzz scheduling is mainly based on the
knowledge of position modiﬁcation. The authors Woo et. al
[8] identiﬁed and tested several belief metrics based on past
fuzzing results to select the next best seed/program pairs for
fuzzing the following campaign. Like our approach, it uses
no information of the target and the ﬁle format.
We can augment FEET by adopting CERT, Robert’s[11]
and Woo’s[8] approach so a crash can be expected sooner.
To summarize, fuzz conﬁguration scheduling algorithms
and belief metrics can be used in conjunction with the se-
lection of modiﬁcation positioning to improve the number
of unique bugs discovered. In particular, the modiﬁed posi-
tions can be a parameter to select diﬀerent seed ﬁles or fuzz
jobs consisting of a disparate set of modiﬁcation positions
based on previously performed experiments.
None of these related work however, address problems as-
sociated with fuzzing in a distributed client-server fashion
such as pre-generation of fuzz input and reduction of stor-
age overhead.
5. FUTURE WORK
This fuzzing paradigm works against downloadable con-
tent which includes documents and multimedia formats. All
of which are vulnerable to today’s drive-by attacks. How-
ever, system level components also involve network protocols
and USB I/O protocols which speak directly to the operat-
ing system. Voluntary fuzzing should also expand to these
targets as a future work.
MVDP uses byte or block level mutation operators. These
operators can be oﬀering overly coarse grained modiﬁcations
that may be specialised to certain control elements of data
formats. Future work can involve the exploration of more
mutation operators that operate at the bit level, synony-
mous to the zzuf [26] fuzzer used by BFF.
We are also working on a specially crafted gateway ap-
pliance that can periodically fetch new crash information
from STAMP. This information can include modiﬁcation po-
sitions of ﬁles that successfully cause an exploitable crash in
41a particular target device. The modiﬁcation information
can be mapped to the initial/seed ﬁle to infer violations of
data-format speciﬁcation predicates. Subsequent incoming
data-streams that match the set of failed predicates will be
rejected by the gateway appliance before it reaches the end-
host. This application is similar to anti-virus apps on de-
vices, but it checks incoming ﬁles rather than applications.
The application could also be made extensible by providing
hooks into which other sources of information feed known
attack signatures.
6. CONCLUSIONS
MVDP was designed to overcome the constraints internet-
scale voluntary fuzzing. We used FEET to ensure the fuzzed
ﬁles are highly unique and uniformly distributed. We de-
signed a method to ensure that the seed ﬁles used for fuzzing
are of high quality and RFC coverage. We also developed
FEET to inform us of the best fuzzing conﬁgurations. STAMP
and SOFT applications are designed to enable fuzz distri-
bution and testing of the mobile device respectively. The
CACE tool enabled automatic binning of unique vulnera-
bilities from crashes obtained from fuzz testing. Analysis
of these crashes and visualizing them according to unique-
ness, crash occurrence and severity give us a better chance
at exploit generation for the sake of mobile security.
7. REFERENCES
[1] A. Imran, Chronic Dev Team Announces ”Tool of
Mass Exploitation”, Install It Now To Help
Community Find Exploits For Untethered Jailbreak
redmonpie.com, November 27, 2011.
[2] J. Drake, Reversing and Auditing Android’s
Propietary Bits RECon, June, 2013.
[3] Michael Sutton, Adam Greene, and Pedram Amini.
2007. Fuzzing: Brute Force Vulnerability Discovery.
Addison-Wesley Professional.
[4] Sophos Press Release: Users Weighed Down by
Multiple Gadgets and Mobile Devices, New Sophos
Survey Reveals March 18 2013, Sophos Ltd.
[5] National Cyber Awareness System - Vulnerability
Summary for CVE-2012-0003 http://web.nvd.nist.
gov/view/vuln/detail?vulnId=CVE-2012-0003
[6] National Cyber Awareness System - Vulnerability
Summary for CVE-2013-0976: http://web.nvd.nist.
gov/view/vuln/detail?vulnId=CVE-2013-0976
[7] National Cyber Awareness System - Vulnerability
Summary for CVE-2013-1750 http://web.nvd.nist.
gov/view/vuln/detail?vulnId=CVE-2013-1750
[8] A.Rebert, S.K.Cha, T.Avgerinos, J.Foote, D.Warren,
G.Grieco, D.Brumley. Optimising Seed Selection for
fuzzing In Proc. 23rd USENIX Security Symposium,
2014.
[9] Graphics Interchange Format, Version 89a, W3C; 31
July 1990.
[10] H.C.Kim, Y.H.Choi, D.H.Lee. Eﬃcient ﬁle fuzz testing
using automated analysis of binary ﬁle format.
Journal of Systems Architecture-Embedded Systems
Design, vol. 57, no. 3, pages 259-268, 2011.
[11] Maverick Woo, Sang Kil Cha, Samantha Gottlieb, and
David Brumley. 2013. Scheduling black-box mutational
fuzzing. In Proceedings of the 2013 ACM SIGSAC
conference on Computer & communications security
(CCS ’13). ACM, New York, NY, USA, 511-522.
[12] Open-source software for volunteer computing and
grid computing. https://boinc.berkeley.edu/
[13] SETI@home http://setiathome.ssl.berkeley.edu/
[14] C. Miller. How smart is intelligent fuzzing or - How
stupid is dumb fuzzing? Independent Security
Evaluators, August 3, 2007.
[15] Google Custom Search Engine.
https://www.google.com/cse/
[16] Bing Search API.
http://datamarket.azure.com/dataset/bing/search
[17] Hachoir Project.
https://pypi.python.org/pypi/hachoir-core
[18] Information technology – Computer graphics and
image processing – Portable Network Graphics
(PNG): Functional speciﬁcation. ISO/IEC 15948:2003
(E) W3C Recommendation 10 November 2003.
[19] Skia 2D graphics library -
https://code.google.com/p/skia/
[20] Apple iOS ImageIO - https://developer.apple.com/
library/ios/documentation/GraphicsImaging/
Conceptual/ImageIOGuide
[21] A. D. Householder and J. M. Foote. Probability-Based
Parameter Selection for Black-Box Fuzz Testing.
Technical Report August, CERT, 2012
[22] !exploitable http://msecdbg.codeplex.com/
[23] Binary Diﬀ Utility FreeBSD Man Pages
[24] Mac Developer Library: Apple Technical Note TN233,
Accessing CrashWrangler to analyze crashes for
security implications, March 2014
[25] (SIGSEGV), fault addr deadbaad
https://groups.google.com/forum/#!topic/android-
ndk/jQg6DM6-D6o
[26] C. Labs. zzuf: multi-purpose fuzzer.
http://caca.zoy.org/wiki/zzuf.
[27] B. P. Miller, L. Fredriksen, and B. So. An Empirical
Study of the Reliability of UNIX Utilities.
Communications of the ACM, 33(12):32(44), 1990.
[28] Chris Evans, Matt Moore and Tavis Ormandy, Google
Security Team: Fuzzing at scale
http://googleonlinesecurity.blogspot.sg/2011/08/fuzzing-
at-scale.html Friday, August 12,
2011
[29] Basic Fuzzing Framework.
http://www.cert.org/vulnerability-
analysis/tools/bﬀ.cfm
[30] Thanassis Avgerinos, Sang Kil Cha, Alexandre
Rebert, Edward J. Schwartz, Maverick Woo, and
David Brumley. 2014. Automatic exploit generation.
Commun. ACM 57, 2 (February 2014), 74-84.
[31] Hex-Rays IDA.
https://www.hex-rays.com/products/ida/
[32] D. A. Berry and B. Fristedt. Bandit
Problems:Sequential Allocation of Experiments.
Chapman and Hall, 1985.
42