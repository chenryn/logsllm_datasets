Partial (Reconstructed) Execution. Fig. 4-(a) shows an exe-
cution trace without any partitioning. It is simply a sequence
of system events (i.e., resource accesses in our context).
Traditionally, a partial execution is often interpreted as a part of
execution between a certain time period as shown in Fig. 4-
(b). This deﬁnition of partial execution essentially includes
all syscalls (i.e., it includes all different types of resource
accesses) that happened between the beginning and the end
of the time period (i.e., from TSTART to TEND in Fig. 4-(b)).
The goal of C2SR is to reconstruct an autonomous task.
Hence, a partial reconstructed execution in our context, as
shown in Fig. 4-(e), is deﬁned as a reconstructed execution
between two user-speciﬁed syscall instances, i.e., SBEGIN and
SEND, in an execution trace where the two syscalls represent
the ﬁrst and last syscalls of the partial execution. Typi-
cally, SBEGIN is a syscall that initiates the entire task (e.g.,
getaddrinfo() to obtain IPs for a domain in a browser tab)
and SEND is the one that delivers the attack (e.g., executing ma-
licious payloads). Note that unlike the traditional (time-sliced)
partial execution, our deﬁnition does not require including all
syscalls between TSTART and TEND. As long as the execution
starting from SBEGIN can reach to SEND without software faults
(e.g., runtime errors), the partial execution is successful.
5
Recording in Production RunResource ReconstructorCybercrime Scene ReconstructionOnlineRecorderReconstructed Resources(e.g., files, network streams)Target Programs(e.g., web browser)Execution TraceResource ReconstructionOfflineTarget Program(e.g., web browser)Execution ReconstructorReconstructedExecution (i.e., Cybercrime scene)Timeline ProjectorOfflineLegendInputOutputSection IV-BSection IV-CSection IV-Din a reconstructed execution are semantically compatible with
its recorded resource accesses.
It relaxes two key restrictions that traditional record-and-
replay techniques have. First, C2SR allows the order of
reproduced syscalls to be different from the recorded exe-
cution. Second, a reconstructed execution does not have to
reproduce every resource access observed during recording. In
other words, even if a reconstructed execution accesses parts
of resources, the reconstructed execution is still considered
successful as long as it does not access resources that are not
accessed during the recording. A reconstructed execution can
have additional syscalls as long as their resource accesses are
consistently reproducible (e.g., reading the parts of resource
already accessed is reproducible) or they do not access exter-
nal resources. The relaxations make reconstructed executions
interactable, meaning that additional syscalls caused by user
interactions can be tolerated, so they do not lead to recon-
struction failures. To this end, a reconstructed execution by
C2SR also tolerates non-determinism as long as it does not
lead to unreproducible resource accesses (e.g., a new network
connection that is never observed during recording).
Typically, user interactions for forensic investigation re-
quest existing resources accessed during the recording. For
example, consider a scenario that an analyst uses a debugger
to inspect a reconstructed execution. The analyst wants to
examine parts of a suspicious ﬁle created by the reconstructed
execution. To do so, the debugger may invoke a few new
syscalls, to read the ﬁle, that were not observed during record-
ing. While such new syscalls would make existing techniques
fail, C2SR can tolerate them because the new syscalls simply
access the existing ﬁle’s content
is already accessed
during the recording. Hence, they can be easily reproduced
by reaccessing the content.
that
B. Formal Deﬁnition of the Concepts Introduced by C2SR
open ࢯ read ࢯ write ࢯ
...
Trace
Syscall
SyscallName
ConcreteValue
Resource
S
T ࢼࢼ=
S ࢼࢼ=
SysName ࢼࢼ=
C ࢼࢼ= Z
R ࢼࢼ= Z
Fig. 5. Deﬁnitions for execution reconstruction.
Deﬁnition Fig. 5 introduces deﬁnitions for recorded execution
trace and executions reconstruction. Speciﬁcally, we deﬁne an
execution trace (T ) as a sequence of syscalls (S). A syscall
is deﬁned as a tuple of a syscall name (SysName), a target
resource handle (R), a set of its argument values (P(CARG)),
and a set of its return values (P(CRET)).
Resource based Execution Partitioning. C2SR reproduces a
partial execution from a resource-partitioned execution trace.
To deﬁne partial execution reconstruction, we introduce two
key concepts. First, we introduce deﬁnitions for the beginning
and the end of a partial execution. Second, we focus on
reproducing consistent results of resource accesses instead of
faithful resource accesses required by existing approaches.
Concept 1: Partial Execution. A partial reconstructed ex-
ecution is deﬁned as a reconstructed execution between two
user-speciﬁed syscall instances in an execution trace: the ﬁrst
and last syscalls of the partial execution.
6
Fig. 4. Resource based Execution Partitioning Illustrated.
Resource based Execution Partitioning. The key enabling
technique for partial execution reconstruction is resource-based
execution partitioning. Given an execution trace, it essentially
groups syscalls that access the same resource, as shown in
Fig. 4-(c). Speciﬁcally, as there are four different resources
(i.e., Resource R, B, Y, and S), syscalls (i.e., events illustrated
as boxes) are partitioned into 4 groups. Fig. 4-(d) shows
resource accesses for each task (e.g., a task corresponds to
a browser tab in a web browser). In Fig. 4-(d), there are 3
tasks: Task X , Y , and Z . Observe that each task accesses
multiple resources, and there are also cases that one resource
(e.g., Resource R and B) is accessed by multiple tasks (e.g.,
multiple websites may access one server for different requests).
Recall that the goal of C2SR is to reconstruct an execution
of a task. A naive approach to reconstruct a recorded execution
is to reproduce the recorded resource accesses of a given task.
For example, to reconstruct Task X , one may try to reproduce
all resource accesses to Resource R and B, marked as F .
Unfortunately, this does not work because a resource can be
accessed by multiple tasks (e.g., Resource R is accessed by
Task X and Y ). Reproducing resource accesses that belong
to another task can break the execution reconstruction. For
example, when the reconstructed task X accesses the third
resource R, reproducing the access of the third access of
resource R that belongs to the task Y can lead to an incorrect
reconstruction. To this end, we propose a concept of consistent
resource access that deﬁnes an execution accessing parts of
resources needed for the execution reconstruction.
Reproducing Consistent Resource Access. A key difference
between C2SR and existing record-and-replay techniques is
that C2SR aims to reproduce consistent results of syscalls
while existing techniques try to reproduce faithful replay of
syscalls (e.g., including the exact order of syscalls). Consistent
results in our context mean that results of resource accesses
Time(a) Execution Trace (No partitioning applied)(b) Time-sliced Execution Trace (from TSTARTto TEND)Time(c) Resource based Execution Partitioning(Events are partitioned by resources)ResourceTimeSBEGINSENDLegendAccess to Resource SAccess to Resource RAccess to Resource BAccess to Resource Y(e) Partial Reconstructed Execution(Requested accesses to resources are reproduced. Some resources are accessed partially)TimeTime(d) Resources Accessed by Each TaskTaskZYXTSTARTTENDFSYBR• Deﬁnition 1 – SBEGIN and SEND: We deﬁne the ﬁrst
syscall (SBEGIN ) and the last syscall (SEND) in a trace
that indicates the beginning and the end of the reconstructed
execution. Typically, SBEGIN is the ﬁrst syscall that accesses
a key resource for the reconstructed execution. For instance,
in our motivation example, SBEGIN is the DNS request for
www.forbes.com (i.e., getaddrinfo()), which should happen
before any other network requests for the domain. SEND is
often a syscall that an analyst wants to reproduce (e.g., creation
of a suspicious ﬁle).
Concept 2: Reproducing Consistent Resource Access. A
key difference between C2SR and existing record-and-replay
techniques is that C2SR aims to reproduce consistent results
of syscalls rather than identical results. Consistent results
mean that (1) results of resource accesses in a reconstructed
execution are logically identical to its recorded execution while
(2) the order of syscalls can be different. For instance, if a
read() on a ﬁle is observed during in the recording, the
reconstructed execution should reproduce consistent values for
the read() on the same ﬁle while it may allow syscalls that are
independent to the ﬁle before the read(). To formally deﬁne
consistent resource accesses, we introduce two deﬁnitions.
• Deﬁnition 2 – Resource-Partitioned Sub-Trace Tr (where
r is a resource): We deﬁne Tr as a sub-trace on a resource r of
the entire trace T . In other words, Tr is a sequence of syscalls
operating on a resource r. For instance, if r is a ﬁle, Tr is a
sequence of syscalls on r (e.g., read(r) and write(r)).
• Deﬁnition 3 – Resource Contents (RC): It is a mapping
between a sub-trace Tr and a set of tuples where each tuple
consists of a concrete value (C) of a resource’s contents and
its offset (O). It represents the concrete contents of a resource.
RC ࢼ Tr  P() where O is an offset (Z+)
For instance, if a ﬁle f is accessed, RC is Tf  P()
where Bi represents a byte value at an offset of i.
Deﬁnition of Successful Execution Reconstruction. We con-
sider an execution reconstruction is successful if (1) a recon-
structed execution correctly reproduces SBEGIN and SEND
and (2) all resource accesses between SBEGIN and SEND are
successfully and consistently reproduced.
Formal Deﬁnition. Let rc1, rc2, ..., rcn be resources accessed
during a recorded execution between SBEGIN and SEND. T c
is an execution trace of the recorded execution. Let rp1, rp2, ...,
rpn be the corresponding reproduced resources accessed in a
reconstructed partial execution. T p is a partial execution trace
to be reproduced. The partial resource-partitioned execution
reconstruction is successful if the two following conditions
are satisﬁed.
• Condition 1. SBEGIN and SEND appear in T p and the
instance of SBEGIN precedes the instance SEND;
• Condition 2. ∀rpi ∈ Rp, RC(T p
means A is equal to or a subset of B.
pi) ⊆ RC(T c
ci), where A ⊆ B
Summary. C2SR partitions an execution by resources and
reproduces consistent results of resource access. Unlike
existing techniques that aim to faithfully replay a recorded
execution (at instruction or system-event level), C2SR allows
two highly desired capabilities for forensic analysis: (1)
a partial execution reconstruction and (2) an interactable
reconstructed execution.
C. C2SR Recorder
C2SR recorder logs syscalls including their arguments and
return values along with timestamps. If syscall arguments
and returns contain values that may vary across executions
(e.g., memory addresses), C2SR abstracts them into the forms
that do not vary across execution (e.g., offsets from the
base addresses and ﬁlenames). As a result, corresponding
syscalls between a recorded and reconstructed execution can
be identiﬁed properly.
To log syscalls, we hook library calls that invoke syscalls
(e.g., libc library calls). Logs are buffered on the memory and
then written to the ﬁle system when it reaches a predeﬁned
threshold to minimize performance overhead caused by I/O
for logging. The threshold is conﬁgurable, and we use 200MB
for this paper. Also, we proﬁle target applications to predict
idle time (e.g., when a program waits for a network response)
and actively ﬂush the log out from the buffer.
D. C2SR Resource Reconstructor
C2SR recovers states of resources and proper content for
each state by inferring them from the recorded execution
trace. It creates reconstructed resources where each of them
consists of an automaton from the reconstructed states and
reconstructed values for each state.
Resource Contents Reconstruction. C2SR uses recorded
syscalls to reconstruct resources. The states and contents of
a resource during recording are inferred by analyzing how
syscalls accessed the resource. For instance, read() syscall
on a ﬁle (with the ﬁle pointer at the beginning of the ﬁle) that
returned ‘P’ indicates that the ﬁle content should start with
‘P’. As different resources may have different internal states
and characteristics, we categorize syscalls that access external
resources into three different types, as shown in Table II. We
use different approaches for each type. Note that C2SR focuses
on syscalls that access external resources. Syscalls for internal
resources (e.g., shared memory and signals) are not traced
and reconstructed. They will be directly executed during the
reconstructed execution. As the goal of C2SR is reproducing
an attack delivery process instead of faithfully replaying a par-
ticular vulnerability exploitation, internal resources are not our
focus (Details in § VI). The complete list of our categorization,
including justiﬁcations, can be found in Appendix § A.
TABLE II.
RESOURCE TYPES AND EXAMPLES.
Resource Type
Random-Access
Sequential-Access
Timing-Dependent
Examples
Files and Folder
Sockets, Pipe, Std. I/O
Clock, Random Devices
Syscalls on the Resource
read(), readdir(), readlink(), ...
send(), recv(), pipe(), read(), ...
clock gettime(), getrandom() ...
1) Random-Access: Resources that permit random accesses
to their contents belong to this category.
• Reconstruction: To access arbitrary contents of random-
access resources, there are syscalls (e.g., lseek()) that can
7
specify the current access position (e.g., ﬁle offset) of the
resource contents. In addition, when a resource is accessed,
the current access position is automatically advanced by the
number of bytes successfully accessed (i.e., read and written).
Hence, we track syscalls that the current position to reconstruct
states of a resource and contents associated with the states.
Fig. 6. Reconstruction of random-access resource.
– Example: Fig. 6-(a) and (b) show syscalls during recording
and the reconstructed ﬁle respectively. It ﬁrst opens a ﬁle
(ﬁle handle is 7, returned at line 1) and reads 20 bytes of
‘A’ (Line 3). Then, it changes the ﬁle offset to 40 (Line 4)
and reads 10 bytes of ‘B’ (Line 5).
C2SR reconstructs the ﬁle content from the recorded
read() and lseek(). Speciﬁcally, the ﬁrst read() (Line 3)
indicates that there are 20 bytes of ‘A’ from the beginning of
the ﬁle. Then, read() (Line 5) happens after the lseek()
(Line 4), which moves the ﬁle offset to 40, meaning that
there are 10 bytes of ‘B’ in the ﬁle from the offset 40
(i.e., the current ﬁle position). Note that other parts (e.g.,
content between the offsets 20 and 39) are unknown as
they were not accessed during recording. We use ‘.’ to
represent unknown (i.e., undeﬁned hence unreproducible)
content. If a reconstructed execution attempts to access the
undeﬁned content, an exception is raised as it indicates that
the reconstruction is failed.
2) Sequential-Access: This category includes resources that
can only be accessed sequentially. Like the random-access
resources, a sequential-access resource may have internal states
that determine the outcome of accesses to it (i.e., return values
of syscalls on the resource), where the internal states may
change each time it is accessed. The state changes are often
done implicitly without explicit syscall invocations.
• Reconstruction: The internal state of a sequential resource is
determined by its access history of the resource (i.e., a trace