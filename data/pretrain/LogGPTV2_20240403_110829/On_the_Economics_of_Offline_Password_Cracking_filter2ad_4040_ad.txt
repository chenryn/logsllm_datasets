+
(1 − ar)t
(cid:4)(t) ≤ 0 if and only
(1 − ar)y
then f
1−a
y)
−a(1 − (t − 1)r
artar
t(t − 1)r−1
≤ y
atar
y) ≤ yt(t − 1)r−1
(1 − ar) ≤ y(t − 1)r−1((t − 1)(1 − ar) + tr)
(1 − ar)(1 − (t − 1)r
r
(cid:14)
Since (t − 1)(1 − ar) ≤ (t − 1)(1 − ar) + tr, then the last
expression certainly holds true if (1−ar) ≤ y(t−1)r−1(t−
≤ (t − 1)r. Thus, by setting
1)(1 − ar) or equivalently, 1
y
(cid:4)(t) ≤ 0 for all t > Z.
Z =
(cid:2)
, it follows that f
(cid:11)1/r
1 +
(cid:10)
(cid:15)
1
y
5. Analysis of Previous Password Breaches
In this section, we apply our economic model to ana-
lyze the consequences of recent password breaches and the
impact of defenses that could have been adopted.
5.1. Breaches
We focus on the following breaches in our analysis:
5.1.1. Yahoo!. Attackers stole password hashes for 500
million Yahoo! users in 2014, though the breach was un-
known to the general public until 2016 [35]. While Yahoo!
860
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:59 UTC from IEEE Xplore.  Restrictions apply. 
used BCRYPT to hash passwords 8, they have not publicly
speciﬁed the number of hash iterations τ that they used.
However, we do have empirical password frequency data
from 70 million Yahoo! users which allowed us to derived
CDF-Zipf parameters y = 0.0211 and r = 0.2166 for
Yahoo! passwords. Thus, we can predict the % of cracked
passwords for different values of τ that Yahoo! might have
chosen.
5.1.2. Dropbox. Attackers stole password hashes for ≈
68.7 million Dropbox users though the breach was unknown
to the general public until 2016 [4]. Dropbox used BCRYPT
8 = 256 hash iterations) to hash
at level 8 (i.e., τ = 2
passwords. We don’t have empirical password data from
Dropbox users from which we can derive Zipf’s law pa-
rameters y and r. However, we have Zipf’s law parameters
for many other datasets such as RockYou, Tianya, CSDN
and Yahoo! allowing us to predict how many passwords a
value v adversary would crack if, say, Dropbox passwords
and RockYou passwords have similar strength. Arguably,
Dropbox passwords could be quite valuable as they are often
used to protect sensitive data.
5.1.3. AshleyMadison. Attackers stole nearly 40 million
AshleyMadison password hashes [36] in 2015 and released
the stolen data publicly a month later. AshleyMadison pri-
12 = 4, 096 hash it-
marily used BCRYPT at level 12 (τ = 2
erations) to hash passwords [37]. However, CynoSure Prime
noticed that some passwords were effectively protected with
MD5 instead of BCRYPT due to an implementation error.
CynoSure Prime managed to crack approximately 11 million
of these MD5 hashes in just 10 days [36], though it has been
claimed that most of the passwords protected by BCRYPT
are uncrackable [37]. Similar to Dropbox, we do not have
Zipf’s law parameters for AshleyMadison users. However, it
is plausible to believe that these parameters are comparable
to the parameters derived from other datasets such as Yahoo!
or RockYou!
5.1.4. LastPass. LastPass was using PBKDF2-SHA256
5 rounds of iteration when they were breached
with τ = 10
in 2015. Similar to AshleyMadison and Dropbox breaches
we don’t currently have Zipf’s law parameters for LastPass
passwords though we can still predict how many passwords
would be breached under the assumption that these pass-
words have similar strength to passwords in other datasets
like RockYou or Yahoo! Arguably master passwords will
be more valuable to an attacker than regular passwords as
a master password will unlock multiple user accounts. On
the other hand previous research [12] has not found a clear
correlation between password strength and account value.
8. An earlier 2013 Yahoo! breach affected approximately 1 billion Ya-
hoo! users [34]. We focus on the 2014 breach because the breach occurred
after Yahoo! upgraded their password hashing algorithm from MD5 to
BCRYPT. We note that any negative ﬁndings about the 2014 breach will
certainly extend to the earlier breach since a weaker hashing algorithm was
involved.
Estimating v. As described in Section 2 the value v
represents the value per password when all passwords are re-
leased on the market. Thus, although the actual black market
prices may vary with supply, the parameter v is ﬁxed. Our
estimate of this value parameter will depend on the current
black market price, and model parameter a (diminishing
returns). In Table 5 we show various estimates of v obtained
from multiple estimates of black market password prices.
These estimates include measurements from Fossi [16] and
more recent estimates from [25], which ﬁnds that Yahoo!
passwords go for 0.70-1.20 USD on the black market. To
obtain the estimates in Table 5, we assume that the black
market prices were observed when just 1% of the passwords
were on the market. This allows us to esimate the value v
if all passwords were to be released using equation 1. We
remark that the difference between the two estimates [25]
and [16] may be explained due to additional black market
supply. We view a = 0.8 as substantial diminishing returns
e.g., the marginal revenue decreases by a factor of 1/3
when the attacker compromises all accounts. An interesting
direction for future work may be to estimate the parameter
a from a longitudinal study of black markets.
Translating between v and v$. Bonneau and
Schechter [29] observed that in 2013, Bitcoin miners were
75 SHA-256 hashes in
able to perform approximately 2
exchange for bitcoin rewards worth about $257M. Corre-
spondingly, one can estimate the cost of evaluating a SHA-
256 hash to be approximately CH = $7 × 10
−15. Alterna-
tively, the cost can be viewed as the economic opportunity
cost of evaluating each hash function (for instance, renting
a botnet or computing on a cloud platform.) Because Bit-
coin mining is almost exclusively performed on application
speciﬁc integrated circuits (ASICs) the above cost analysis
implicitly assumes that the attacker is willing to fabricate
an an ASIC to evaluate PBKDF2-SHA256 or BCYRPT.
We contend that this is a plausible scenario for a rational
attacker, since fabrication costs would amortize over the
number of user accounts being attacked (e.g., 500+ million).
Furthermore, we note that an attacker who is not willing to
pay to fabricate an ASIC could obtain similar performance
gains using a ﬁeld programmable gate array (FPGA).
5.2. Results
In section 4 we showed that, if passwords follow CDF-
Zipf’s law with parameters y and r, and v/k ≥ T (y, r, a)
then a rational adversary will crack 100% of user passwords.
Figure 2(a) plots v = k× T (y, r, 0.8) for various thresholds
from Table 4 including Yahoo! and RockYou. Thus, for a
point (v, τ) lying on the blue line, a value v rational ad-
versary will crack 100% of Yahoo! passwords when he can
compute the hash function at cost k = τ. Note that τ = k
for hash functions like BCRYPT and PBKDF2 — the ones
used by Yahoo!, Dropbox, AshleyMadison and LastPass.
For reference, Figure 2(a) includes the actual values of τ
selected by AshleyMadison, Dropbox and LastPass as well
7. Bonneau and Schechter estimated
as the value τ = 10
7 times in 1 second on
that SHA256 can be evaluated 10
861
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:59 UTC from IEEE Xplore.  Restrictions apply. 
R(t1%) (USD)
a = 0.8
0.70
1.20
4.00
30.00
a = 0.9
a = 1.0
0.28
0.48
1.59
11.94
0.70
1.20
4.00
30.00
TABLE 5: v conversion chart
0.44
0.76
2.52
18.93
7 upper bounds the value of
a modern CPU [38]. Thus, 10
τ that one could select without delaying authentication for
more than 1 second when using PBKDF2-SHA256.
The plots predict that, unless we set τ (cid:8) 10
7, the adversary
will crack 100% of passwords in almost every instance.
In particular,
the levels of key-stretching performed by
Dropbox, AshleyMadison and even Lastpass are all well
below the thresholds necessary to protect Yahoo!, RockYou
or CSDN passwords.
Figure 2(b) is similar to Figure 2(a) except that we
rescale to y axis to show v$, given monetary estimations
of computation cost and password values, so that we can
focus on the number of hash iterations necessary to simply
avoid all passwords being cracked.
While we do not have CDF-Zipf parameters for other
breaches such as AshleyMadison, Dropbox, or LastPass,
we do have the value τ = k for each of these breaches.
Figure 2(c) plots v = k × T (y, r, 0.8) only this time we
hold k constant and allow T (y, r, 0.8) to vary. For example,
5 since LastPass
in the black line we ﬁx k = τ = 10
5 hash iterations and
used PBKDF2-SHA256 with τ = 10
allow T (y, r, 0.8) to vary. The vertical lines represent the
thresholds T (y, r, 0.8) we derive from CDF-Zipf’s law ﬁts
for RockYou, Tianya and Yahoo! Table 4 shows the value
of T (y, r, 0.8) obtained from 10 different password datasets.
Observe that in all of cases we had T (y, r, 0.8) ≤ 7.64×10
7.
As in Figure 2(b) the y-axis in Figure 2(c) is scaled to
show the value v$ in USD (estimated). Thus, if Dropbox
(resp. AshleyMadison/LastPass) passwords have compara-
ble strength to Yahoo! passwords (resp. Tianya, RockYou)
then a rational adversary would crack 100% of these pass-
words. Indeed, Figure 2(c) shows that unless the thresholds
T (y, r, a) for Dropbox/LastPass/AshleyMadison are signif-
icantly larger than the previously observed thresholds, a ra-
tional adversary would be compelled to crack all passwords,
given the range of password values. For example, even if the
threshold T (y, r, a) for Dropbox exceeds the threshold for
Yahoo! by four orders of magnitude then the adversary will
still crack 100% of these passwords.
5.3. Discussion
Figures 2(a), 2(b) and 2(c) paint a grim picture. PBKDF2
and BCRYPT most likely provide dramatically insufﬁcient
protection for most AshleyMadison, Dropbox, Yahoo! and
LastPass users — even if we used the lowest estimation
of the value parameter v from Table 5 (v$ = 0.28 USD)
862
and we assume that the attacker faces substantial dimin-
ishing returns (a = 0.8) for additional cracked passwords.
Furthermore, it would not have been possible to provide
sufﬁcient protection for users using PBKDF2 or BCRYPT
without introducing intolerable authentication delays (≥ 1
second).
Our analysis assumes that the password distribution truly
follows CDF-Zipf’s law. While previous research (e.g., [32],
[11] and our own results in Section 3) strongly supports the
hypothesis that most of the password distribution follows
Zipf’s law, it is not possible to deﬁnitively state that the
tail of the password distribution does not follow Zipf’s law
since each of the passwords in the tail were (by deﬁnition)
observed with low frequency. We stress that even if CDF-
Zipf’s law does not ﬁt the tail of the password distribution
that T (y, r, a) still characterizes adversary behavior. For
example, suppose that the (100 − x)% of passwords follow
a Zipf’s law distribution with parameters y, r while x% of
passwords in the tail of the password distribution do not. In
this case, whenever v/k ≥ T (y, r, a) we a rational adversary
will crack at least (100−x)% of the user’s passwords which
follow Zipf’s Law.
5.4. Memory Hard Functions
2
Memory hard functions potentially provide a way of
increasing computation cost without drastically increasing
computation time. As the name suggests memory hard
functions require a large amount of memory to evaluate.
Thus,
the cost of purchasing/renting hardware for pass-
word cracking, approximated by a functions Area x Time
(AT) complexity, can be substantial for an attacker. Specif-
ically, AT complexity of SCRYPT [9], scales quadratically
with the number of time steps [39]. Thus, as discussed
in Section 2, we estimate k$ = τCH + τ
Cmem, where
CH ≈ $7 × 10
−15 [29] and Cmem ≈ CH
3000 as in [30], [31].
In the last section we assumed that the attacker faced ag-
gressive diminishing marginal returns for additional cracked
passwords and we used the lowest possible estimations of
adversary value ﬁnding that an attacker still cracks 100%
of passwords from a Zipf’s law distribution. By contrast, in
this section we operate under the conservative assumptions
that the attacker does not face diminishing returns and we
use the larger estimations of adversary value in our analysis.
Nevertheless, we ﬁnd that the use of MHFs can substantially
reduce the % of cracked passwords.
Figure 3 plots v$ (estimate) versus the minimum value
of τ necessary to prevent a rational attacker from cracking
100% of passwords. For example, the blue line predicts that
if Yahoo! had adopted memory hard functions with only
20 iterations (0.1 seconds) then a value $30 adversary
τ = 2
will not crack all passwords selected from a CDF-Zipf’s law
distribution with the parameters y = 0.0211 and r = 0.2166,
the parameters for our CDF-Zipf’s ﬁt for Yahoo! passwords.
26 (≈ 7
By contrast, Yahoo! would need to set τ = 2
seconds) when using a function like PBKDF2 or BCRYPT
just to ensure that the adversary does not crack 100% of
passwords when a = 1.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:59 UTC from IEEE Xplore.  Restrictions apply. 
)
6
1
0
1
×
(
v
5
4
3
2
1
0
·10
−2
RockYou
CSDN
Yahoo!
v$ = $0.28 (estimate)
v$ = $0.48 (estimate)
Dropbox τ
AshleyMadison τ
NIST τ
LastPass τ
τ = 10
7 (1sec)
8
10
12
14
16
log2(τ)
18
20
22
24
(a) v/k = T (y, r, 0.8) for RockYou, CSDN
and Yahoo!
$
v
0.5
0.4
0.3
0.2
0.1
0
RockYou
CSDN
Yahoo!
v$ = $0.28 (estimate)
v$ = $0.48 (estimate)
τ = 10
7 (1sec)
Dropbox τ
AshleyMadison τ
NIST τ
LastPass τ
1
0.8
0.6
0.4
0.2
$
v
12)
AshleyMadison (k = 2
8)
Dropbox (k = 2
5)
LastPass (k = 10
4)
NIST (k = 10
v$ = $0.28
v$ = $0.48
RockYou