# Table of Contents
1. **Introduction**
2. **Main Stimulation and Parameters**
3. **Value-Based Data Flow Analysis**
4. **Evaluation**
    - 4.1. **Experimental Setup**
    - 4.2. **Effectiveness**
    - 4.3. **Performance**
5. **Related Work**
6. **Conclusion**
7. **Availability**
8. **Acknowledgments**
9. **References**

---

## 1. Introduction

This document outlines the capabilities and performance of CopperDroid, a dynamic analysis tool for Android malware. CopperDroid uses a system call-centric approach to reconstruct behaviors and employs stimulation techniques to uncover additional behaviors. The tool is designed to be resilient to evasion techniques and provides comprehensive behavioral profiles.

## 2. Main Stimulation and Parameters

CopperDroid handles various events and parameters, as shown in Table I. These include:

- **Location Update**: Geospatial coordinates
- **Battery Status**: Amount of battery
- **Phone Reboot**
- **Keyboard Input**: Typed text
- **Text from Number**: Text, from number
- **Call Duration**: From number, duration

**Table I: Main Stimulations and Parameters**

| Event               | Parameters                  |
|---------------------|-----------------------------|
| Location Update     | Geospatial coordinates      |
| Battery Status      | Amount of battery           |
| Phone Reboot        |                             |
| Keyboard Input      | Typed text                  |
| Text from Number    | Text, from number           |
| Call Duration       | From number, duration       |

## 3. Value-Based Data Flow Analysis

CopperDroid extends its capabilities by abstracting low-level events into high-level behaviors and reconstructing associated resources. This is achieved through a value-based data flow analysis, which involves building a system call-related data dependency graph and def-use chains.

### 3.1. System Call Dependency Graph

Each observed system call is initially considered an unconnected node. A forward slicing algorithm then inserts edges for every inferred dependence between calls. As the slicing proceeds, nodes and edges are annotated with system call argument constraints, which are essential for creating def-use chains.

### 3.2. Def-Use Chains

Def-use chains link each call by def-use dependencies. For example, the output value from one system call (e.g., `open`, `dup`, `dup2`) is the input value to a subsequent system call (e.g., `write`, `writev`). By building a data dependency graph over the set of observed system calls, CopperDroid can recreate file system-related events and the actual resources involved.

### 3.3. Example of File Access Behavior

- **Java Level**:
  ```java
  OutputStreamWriter out = new OutputStreamWriter(
      openFileOutput("samplefile.txt", MODE_WORLD_READABLE));
  out.write("Data write", 0, 10);
  ```

- **System Call Level**:
  ```bash
  open("files/samplefile.txt", 0x20241, 0x180) = 0x1c
  read(0x3f, 0x470bec04, 0xf) = 0xf
  ...
  write(0x1c, "Data write", 0xa) = 0xa
  ```

- **Reconstructed File Access**:
  ```plaintext
  FS_ACCESS::Creation of "sampefile.txt" (link, ancillary info: 10 bytes)
  ```

## 4. Evaluation

### 4.1. Experimental Setup

The experimental setup includes running unmodified Android images on a CopperDroid-enhanced emulator. Each clean image is customized with personal information such as contacts, SMS texts, call logs, and pictures to mimic a real device. Malware samples are installed and traced until a timeout is reached (10 minutes by default). After analysis, a clean execution environment is restored to prevent corruptions.

### 4.2. Effectiveness

To evaluate the effectiveness of CopperDroid's stimulation approach, we analyzed all samples without external stimulation and then performed stimulation-driven analysis. The results show that 836 out of 1,365 (61%) McAfee samples exhibited additional behaviors, with an average of 6.5 additional behaviors out of an average of 22.8 behaviors observed during non-stimulated executions.

**Table II: Summary of Stimulation Results, per Dataset**

| Malware Dataset | Incr. Behav. (Samples) | Avg. Increment | Std. Dev  |
|-----------------|------------------------|----------------|-----------|
| Genome          | 752/1226 (60%)         | 2.9/10.3 (28.1%) | 2.4/11.8  |
| Contagio        | 289/395 (73%)          | 5.2/23.6 (22.0%) | 3.3/19.8  |
| McAfee          | 836/1365 (61%)         | 6.5/22.8 (28.5%) | 9.5/30.1  |

**Table III: Overall Behavior Breakdown of McAfee Dataset**

| Behavior Class             | No Stimulation | Stimulation   |
|----------------------------|----------------|---------------|
| FS Access                  | 889/1365 (65.13%) | 912/1365 (66.81%) |
| Access Personal Info.      | 558/1365 (40.88%) | 903/1365 (66.15%) |
| Network Access             | 457/1365 (33.48%) | 461/1365 (33.77%) |
| Exec. External App.        | 171/1365 (12.52%) | 171/1365 (12.52%) |
| Send SMS                   | 38/1365 (2.78%)   | 42/1365 (3.08%)   |
| Make/Alter Call            | 1/1365 (0.07%)    | 55/1365 (4.03%)   |

### 4.3. Performance

We evaluated CopperDroid's overhead through macrobenchmarks and microbenchmarks. Macrobenchmarks tested common Android-specific actions, while microbenchmarks measured the time required to analyze a subset of interesting system calls.

- **Macrobenchmark Results**:
  - Overhead introduced by targeted analysis: ≈ 26% to ≈ 32%
  - Overhead introduced by system-wide analyses: >2x

- **Microbenchmark Results**:
  - Average time for entry: 0.092ms
  - Average time for exit: 0.091ms

## 5. Related Work

CopperDroid is compared with other dynamic analysis tools such as DroidScope, TaintDroid, AppsPlayground, PuppetDroid, DroidBox, Andrubis, DroidMOSS, DroidRanger, JuxtApp, Aurasium, Google Bouncer, SmartDroid, and VetDroid. Each tool has its strengths and weaknesses, but CopperDroid stands out for its system call-centric approach and resilience to evasion techniques.

## 6. Conclusion

CopperDroid is a VM-based dynamic system call-centric analysis and stimulation technique that automatically reconstructs behaviors of Android malware. It provides a transparent and unified approach to behavior reconstruction, making it effective for large-scale malware analysis.

## 7. Availability

CopperDroid and related research information are available at:
[http://s2lab.isg.rhul.ac.uk/projects/mobsec/](http://s2lab.isg.rhul.ac.uk/projects/mobsec/)

## 8. Acknowledgments

This research was partially supported by the UK EPSRC grant EP/L022710/1 and a donation from Intel Security (McAfee Labs). We thank the anonymous reviewers, Timothy Leek, Andrew Davis, Alessandro Reina, Santanu Dash, Johannes Kinder, Igor Muttik, and Alex Hinchliffe for their valuable suggestions and discussions.

## 9. References

[1] S. Anand, M. Naik, H. Yang, and M. Harrold, “Automated concolic testing of smartphone apps,” in Proc. of FSE, 2012.
...
[49] Y. Zhou and X. Jiang, “Android Malware Genome Project,” [http://www.malgenomeproject.org/](http://www.malgenomeproject.org/).

---