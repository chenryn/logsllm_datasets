最后，31，32 行在屏幕上展示了输出的图片。
### 猫咪检测结果
为了测试我们的 OpenCV 猫咪检测器，可以在原文的最后，下载教程的源码。
然后，在你解压缩之后，你将会得到如下的三个文件/目录:
1. cat\_detector.py：我们的主程序
2. haarcascade\_frontalcatface.xml： 猫咪检测器 Haar cascade
3. images：我们将会使用的检测图片目录。
到这一步，执行以下的命令：
```
$ python cat_detector.py --image images/cat_01.jpg
```
![](/data/attachment/album/201607/21/014400ze2a5fjnnz5unfbu.jpg)
*图 1. 在图片中检测猫脸，甚至是猫咪部分被遮挡了。*
注意，我们已经可以检测猫脸了，即使它的其余部分是被遮挡的。
试下另外的一张图片:
```
python cat_detector.py --image images/cat_02.jpg
```
![](/data/attachment/album/201607/21/014403yfrcjzjvab2vjwwq.jpg)
*图 2. 使用 OpenCV 检测猫脸的第二个例子，这次猫脸稍有不同。*
这次的猫脸和第一次的明显不同，因为它正在发出“喵呜”叫声的当中。这种情况下，我们依旧能检测到正确的猫脸。
在下面这张图片的结果也是正确的：
```
$ python cat_detector.py --image images/cat_03.jpg
```
![](/data/attachment/album/201607/21/014405mghqpzu3sskza33u.jpg)
*图 3. 使用 OpenCV 和 python 检测猫脸*
我们最后的一个样例就是在一张图中检测多张猫脸:
```
$ python cat_detector.py --image images/cat_04.jpg
```
![](/data/attachment/album/201607/21/014359nggjvnaj0zivg5yc.jpg)
*图 4. 在同一张图片中使用 OpenCV 检测多只猫*
注意，Haar cascade 返回的检定框不一定是以你预期的顺序。这种情况下，中间的那只猫会被标记成第三只。你可以通过判断他们的 (x, y) 坐标来自己排序这些检定框。
#### 关于精度的说明
在这个 xml 文件中的注释非常重要，Joseph Hower 提到了这个猫脸检测器有可能会将人脸识别成猫脸。
这种情况下，他推荐使用两种检测器（人脸 & 猫脸），然后将出现在人脸识别结果中的结果剔除掉。
#### Haar cascades 注意事项
这个方法首先出现在 Paul Viola 和 Michael Jones 2001 年出版的 [Rapid Object Detection using a Boosted Cascade of Simple Features](https://www.cs.cmu.edu/~efros/courses/LBMV07/Papers/viola-cvpr-01.pdf) 论文中。现在它已经成为了计算机识别领域引用最多的论文之一。
这个算法能够识别图片中的对象，无论它们的位置和比例。而且最令人感兴趣的或许是它能在现有的硬件条件下实现实时检测。
在他们的论文中，Viola 和 Jones 关注在训练人脸检测器；但是，这个框架也能用来检测各类事物，如汽车、香蕉、路标等等。
#### 问题是？
Haar cascades 最大的问题就是如何确定 `detectMultiScale` 方法的参数正确。特别是 `scaleFactor` 和 `minNeighbors` 参数。你很容易陷入一张一张图片调参数的坑，这个就是该对象检测器很难被实用化的原因。
这个 `scaleFactor` 变量控制了用来检测对象的图片的各种比例的[图像金字塔](http://www.pyimagesearch.com/2015/03/16/image-pyramids-with-python-and-opencv/)。如果 `scaleFactor` 参数过大，你就只需要检测图像金字塔中较少的层，这可能会导致你丢失一些在图像金字塔层之间缩放时少了的对象。
换句话说，如果 `scaleFactor` 参数过低，你会检测过多的金字塔图层。这虽然可以能帮助你检测到更多的对象。但是他会造成计算速度的降低，还会**明显**提高误报率。Haar cascades 分类器就是这样。
为了避免这个，我们通常使用 [Histogram of Oriented Gradients + 线性 SVM 检测](http://www.pyimagesearch.com/2014/11/10/histogram-oriented-gradients-object-detection/) 替代。
上述的 HOG + 线性 SVM 框架的参数更容易调优。而且更好的误报率也更低，但是唯一不好的地方是无法实时运算。
### 对对象识别感兴趣？并且希望了解更多？
![](/data/attachment/album/201607/21/014407ehzc6pffazf9zjn9.jpg)
*图 5. 在 PyImageSearch Gurus 课程中学习如何构建自定义的对象识别器。*
如果你对学习如何训练自己的自定义对象识别器感兴趣，请务必要去了解下 PyImageSearch Gurus 课程。
在这个课程中，我提供了 15 节课，覆盖了超过 168 页的教程，来教你如何从 0 开始构建自定义的对象识别器。你会掌握如何应用 HOG + 线性 SVM 框架来构建自己的对象识别器来识别路标、面孔、汽车（以及附近的其它东西）。
要学习 PyImageSearch Gurus 课程（有 10 节示例免费课程），点此： 
### 总结
在这篇博文里，我们学习了如何使用 OpenCV 默认就有的 Haar cascades 分类器来识别图片中的猫脸。这些 Haar casacades 是由 [Joseph Howse](http://www.pyimagesearch.com/2014/11/10/histogram-oriented-gradients-object-detection/) 训练兵贡献给 OpenCV 项目的。我是在 Kendrick Tan 的[这篇文章](http://kendricktan.github.io/find-cats-in-photos-using-computer-vision.html)中开始注意到这个。
尽管 Haar cascades 相当有用，但是我们也经常用 HOG + 线性 SVM 替代。因为后者相对而言更容易使用，并且可以有效地降低误报率。
我也会[在 PyImageSearch Gurus 课程中](https://www.pyimagesearch.com/pyimagesearch-gurus/)详细的讲述如何构建定制的 HOG + 线性 SVM 对象识别器，来识别包括汽车、路标在内的各种事物。
不管怎样，我希望你喜欢这篇博文。
---
via: 
作者：[Adrian Rosebrock](http://www.pyimagesearch.com/author/adrian/) 译者：[MikeCoder](https://github.com/MikeCoder) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出