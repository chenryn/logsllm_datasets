Sketch Guided Sampling (SGS)
Traditional Packet Sampling (PS) simply samples packets
independently with ﬁxed probability p, and is known to de-
stroy information about θ with remarkable eﬃciency [10,
k=1 λk ,
j ≥ 0
(6)
(cid:17)
236W(cid:88)
11]. Sketch Guided Sampling, introduced in [8], is at heart
a generalised packet sampling method indexed by a sampling
probability function p(k), k ∈ [W ]. A packet will be sampled
with probability p(k) if it is the k-th packet encountered so
far in its ﬂow. Of course, we do not know the in-ﬂow posi-
tion of packets, if one did θ would be already known! The
innovation in [8] was to estimate this quantity by a coarse
counter sketch, hence SGS is a skampling method.
To simplify comparisons, we assist SGS by replacing its
sketch component with oracular knowledge of each packet’s
in-ﬂow position. Assisted SGS is then a pure sampling
method, whose per-ﬂow counter density is characterised by
its sampling matrix B as
cj =
bjkθk,
0 ≤ j ≤ W,
(8)
k=1
where bjk, is the probability that if the original ﬂow had
k packets, only j remain after sampling. The matrix ele-
ment bjk can be calculated via the recursion bj,k+1 = p(k +
1)bj−1,k + q(k + 1)bj,k.
From general sampling results from [11], we can write
J = BTDB,
(9)
where D = diag(Bθ), and I + = J−1 − θθT.
Following [8], we use
p(k) = p(k; β, ) =
1
1 + 2k(2β−1) , 1/2 ≤ β ≤ 1,
(10)
a monotonically decreasing function of k. The idea is that
this creates a bias toward short ﬂows which counteracts the
strong large-ﬂow bias of traditional PS, which corresponds
to β = 1/2.
Note that (true) SGS requires both a ﬂow table and a
sketch, and so is more costly to implement than FS.
Eviction Sketch (ESk)
The data collection method proposed in [9] physically en-
hances Sk by associating to each of its A counters an own-
ership variable taking values in [L], all initialised to L. An
incoming packet is given a random priority class (cid:96) ∈ [L]. If
(cid:96) equals the value of the associated ownership variable its
counter is incremented as normal, but if it is larger (lower
priority than it) the counter is unchanged, and if smaller
(higher priority) the counter is reset to 1, and the ownership
variable is set to (cid:96) recording the fact that class (cid:96) now ‘owns’
the counter. This random eviction of lower class packets is
an implicit packet sampling, reducing the input load α to
an eﬀective load α(cid:48)  0, we seek to minimise the diagonal
elements of
I T (pf ) =
I +
FSS(α)
Nf
I +
FSS(α)
Aα
=
=
1
Aα(cid:48) I +
Sk(α
(cid:48)
)
(15)
over pf ∈ [0, 1], or equivalently, α(cid:48) ∈ [0, α].
Equation (15) is a product of two competing terms, each
a function of pf through α(cid:48) = pf α. The scalar 1/(Aα(cid:48)) de-
pends on the number of ﬂows delivered to the sketch by the
FS component and is monotonically decreasing with pf .
The matrix I +
Sk(α(cid:48)) corresponds to the information stored
per-ﬂow in the counter array. It is monotonically increas-
ing with pf in a positive semideﬁnite sense [13]. The key
question is whether an optimal point exists for any α, that
is, if there is a maximum amount of information that can
be stored in the sketch, so that excessive load is not just a
matter of diminishing returns but actually results in infor-
mation destruction. To answer it, let Ik(x) = (I +
Sk(x)/x)kk.
From (15), (I T (pf ))kk = Ik(α(cid:48))/A.
Theorem 1. For each k, Ik(x) has a global minimum at
k > 0 for any θ with W > 3.
ﬁnite x = α∗∗
The proof is based on the fact that the largest eigenvalue of
I +
Sk(x) is O(xW−2), which defeats the 1/x factor for large x
if W > 3 [13].
k ≤ α∗∗
of a ﬁrst local minimum α∗
now ready to deﬁne OFSS.
Deﬁnition: OFSS(k; A) OFSS(k; A) is FSS(p∗
f (k; α) ∈ (0, 1] is the value that minimises
p∗
(IT (pf ))kk, subject to α(cid:48) = αp∗
The existence of the global minimum implies the existence
k . We are
k > 0 obeying α∗
f ; A), where
f ≤ α∗
k.
Apart from the trivial case of W = 2, we do not know of
any examples where the ﬁrst local minima is not equal to
the global minimum, and conjecture that α∗
in all
cases with W > 3.
k = α∗∗
k
Even if there are cases when α∗
k is not optimal, it is ad-
vantageous to base a deﬁnition on it because
(cid:26) 1,
α  α∗
k, select pf to cut back the input
so that α(cid:48) = α∗
k, otherwise let all ﬂows in. The signiﬁ-
cance of this property is that one only needs to calculate α∗
k
(16)
to know p∗
f (k; α) for all α, a signiﬁcant practical advantage
when adapting p∗
f (k; α) to changing traﬃc conditions, or dif-