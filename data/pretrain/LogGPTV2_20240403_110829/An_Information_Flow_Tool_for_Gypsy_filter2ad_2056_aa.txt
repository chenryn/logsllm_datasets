title:An Information Flow Tool for Gypsy
author:John McHugh
An Information Flow Tool for Gypsy
An Extended Abstract Revisited
John McHugh
CERT/CC R(cid:1), Software Engineering Institute, Carnegie Mellon University
E-mail: PI:EMAIL
Abstract
In 1985, we outlined an information ﬂow tool for the
Gypsy language that could be used to support covert chan-
nel analysis. The proposed tool offered substantial advan-
tages over existing tools in ﬂexibility and promised to be
useful for a variety of analyses. Two versions of the tool
were subsequently built and used for a variety of MLS and
other projects. This paper draws on the original, adding
motivational and explanatory material and adds descrip-
tions of the subsequent tools. It also illustrates a novel use
of one of the tools in developing an architecture for a MLS
windowing system.
1. Introduction
As one component of my dissertation[18] work at the
University of Texas in the early 1980’s, I implemented
a dependency analyzer for the executable portion of the
Gypsy[11] programming and speciﬁcation language. The
purpose of the analyzer was to identify apparently exe-
cutable code that had no effect on the functioning of the
program. This was a problem in Gypsy because intrinsic
functions that represented information about the state of a
computation, e.g. buffer histories containing copies of all
messages sent to a given buffer, were often “computed” and
passed as arguments to other routines where they were used
only in (non-executable) speciﬁcations. The dependency
analyzer marked the internal representations of such code
as not affecting the program results so that the code genera-
tor could omit it from the execution.
In the early to mid 1980’s, Gypsy was one of three speci-
ﬁcation systems1 that were supported by the National Com-
puter Security Center for use in the development of systems
seeking an A1 evaluation under the TCSEC[7]. As the in-
troduction to the original extended abstract[25] stated:
0This work was sponsored by the Department of Defense.
1HDM from SRI and Ina-Jo from SDC were the other two.
The Gypsy [11] language is seeing increasing
use as a tool for designing, specifying, and some-
times implementing computer systems intended
for certiﬁcation at the A1 level by the Depart-
ment of Defense Computer Security Center. One
of the criteria for A1 certiﬁcation [7] is a formal
proof that the information ﬂows within the design
conform to a policy deﬁned by a formal security
model. Despite the fact that it is possible to state
such models in Gypsy and to prove some prop-
erties of programs with respect to a model[30], a
ﬂow analysis tool within the Gypsy environment
would appear to be useful. The GVE (Gypsy Ver-
iﬁcation Environment) contains the basis for such
a tool in the form of a ﬂow analyzer used to detect
unused variables during optimization[18]. In the
discussion below, we will describe a simple infor-
mation ﬂow analyzer based upon this analysis.
At the time the extended abstract was written, several
large multi-level secure systems targeting A1 were either
under development or in the early planning stages. Gypsy
had been used to specify some aspects of the Honeywell
SCOMP (Secure COmmunications Processor) and the lack
of a Covert Channel Analysis tool was seen as a barrier to
the further use in future systems. The extended abstract rep-
resented our thinking on the problem of information ﬂow
characterization, and was, to some extent, an early attempt
to obtain funding for the development of a Gypsy covert
channel analysis tool.
Before proceeding, we brieﬂy discuss covert channels
and MLS systems as these may not be familiar to new-
comers to the ﬁeld. The remainder of the paper contains
substantial quotations from the original, interspersed with
commentary and exposition. This is followed by an account
of subsequent events, i.e.
the development of two gener-
ations of information ﬂow based covert channel analysis
tools for Gypsy and their subsequent use on systems such
as LOCK[28].
1
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:41 UTC from IEEE Xplore.  Restrictions apply. 
2. Multi Level Secure systems and Covert
covert channels are created.
Channels
At the time the abstract was written, MLS systems and
the covert channel problem and its relationship to informa-
tion ﬂow were well known, if only partially understood.
Thus, it is only slightly surprising that the application of the
analyzer to covert channel analysis is nowhere mentioned.
MLS systems are not explicitly mentioned, but A1 systems
are inherently MLS.
Within DoD and similar organizations, there is a need to
handle both classiﬁed and unclassiﬁed information, often at
the same time. In the print world, classiﬁed information is
be kept under appropriate physical security and can often be
used only in speciﬁed locations. Classiﬁed documents are
clearly marked with their classiﬁcations and, at least under
some circumstances, can be accessed concurrently with un-
classiﬁed information. As computers began to be used to
store classiﬁed information, the print model broke down.
Cleared individuals are trusted not to incorporate classiﬁed
information into unclassiﬁed documents that they may be
creating.
In the early 1970s, there was no basis for ex-
tending the human trust model to software nor was there
an appropriate labeling mechanism. This led to the devel-
opment of single level or “system high” systems in which
all material, regardless of its intrinsic classiﬁcation, is effec-
tively classiﬁed at the level of the most sensitive material in
the system. Because highly sensitive material is typically
a small percentage of the total, the resulting over classiﬁ-
cation creates substantial costs and operational difﬁculties.
Against this background, mechanisms[2, 3] were proposed
to allow the safe manipulation of material of differing clas-
siﬁcations within a single computer system. These systems
were characterized by a mandatory security policy in the
style of Bell and LaPadula[4], in which access decisions
are based on labels associated with data containing objects
and with (abstractly) data free subjects that move informa-
tion between objects. At the higher levels of assurance (B3,
A1), the policy is enforced by a security kernel which com-
prises an unbypassable reference monitor through which all
access requests must pass.
Unfortunately, direct access to objects followed by an ex-
plicit, direct transfer of some or all of the object’s contents
to another object is not the only way in which information
ﬂows in a computer system. In most systems, it is possible
for one process to perceive some aspects of the operations
of other processes through conﬂicts in attempts to access
resources. The locking of a record, ﬁle, or device to permit
modiﬁcation without fear of interference is one example.
The variation in response times due to processes competing
for CPU cycles or ﬁle access on a shared disk is another.
Such mechanisms can be manipulated deliberately to sig-
nal between processes and it is from such mechanisms that
Covert channels can arise outside of a MLS context but
they were most commonly considered in the context of sys-
tems that have enforce a mandatory access control policy.
In general, a covert channel is a mechanism that can sig-
nal information across a protection boundary in violation of
the mandatory policy. Original work in this area was done
by Lampson and Lipner[14, 16] in the mid 1970s. Because
signaling rather than direct data transfer is involved, the in-
formation being compromised may be coded and a given
covert signaling scenario may pass a half a bit (or less) per
invocation. By convention, covert channels are classiﬁed
as storage channels in which the sender affects the value of
some storage entity that can be observed by the recipient or
timing channels in which the sender affects the recipients
perception of the time required to carry out some action.
Kemmerer[13] provides deﬁnitions of these as follows:
In order to have a storage channel, the follow-
ing minimum criteria must be satisﬁed:
1. The sending and receiving processes must
have access to the same attribute of a shared
resource.
2. There must be some means by which the
sending process can force the shared at-
tribute to change.
3. There must be some means by which the
receiving process can detect the attribute
change.
4. There must be some mechanism for initiat-
ing the communication between the sending
and receiving processes and for sequencing
the events correctly. This mechanism could
be another channel with a smaller band-
width.
If criteria (1)-(3) are satisﬁed, one must ﬁnd a
scenario that satisﬁes criterion (4). If such a sce-
nario can be found, a storage channel exists. This
last step requires imagination and insight into
the system being analyzed. However, by using
the shared resource matrix approach, attributes of
shared resources that do not satisfy criteria (1)-(3)
can readily be identiﬁed and discarded.
Timing channels are discovered in a similar
manner, but different criteria are used. The mini-
mum criteria necessary in order for a timing chan-
nel to exist are as follows:
1. The sending and receiving processes must
have access to the same attribute of a shared
resource.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:41 UTC from IEEE Xplore.  Restrictions apply. 
2. The sending and receiving processes must
have access to a time reference such as a
real-time clock.
3. The sender must be capable of modulating
the receiver’s response time for detecting a
change in the shared attribute.
4. There must be some mechanism for initi-
ating the processes and for sequencing the
events.
Any time a processor is shared there is a
shared attribute, i.e., the response time of the
CPU. A change in response time is detected by
the receiving process by means of monitoring the
clock.
3. The Information Flow Problem
At the time the ﬂow tool was proposed, I was thinking
primarily in terms of analyzing the ﬂows in running code,
and the exposition given in the abstract follows that model.
Brieﬂy
stated,
the
information
ﬂow
problem[26, 6, 15] is: Given a program and
its sets of input and output variables, determine
for each output variable, the subset of the input
variable set about which it might possibly contain
information after execution of
the program.
In strongly typed languages such as Gypsy or
Ada,
the type mechanism effectively prevents
us from describing information ﬂows among
incompatible types. This is because information
ﬂow as an abstraction is independent of the
type mechanism or value sets of the program
variables.
it is not possible to
specify the nature of the information transferred
from the sequence S to the integer I in the Gypsy
statement
For example,
I := length(S)
using Gypsy speciﬁcations; yet it is clear that an
information ﬂow has taken place. We can over-
come the restrictions in a number of ways. The
work referred to above [30] uses an incomplete
program representation involving pending or not
yet deﬁned types to provide a framework for the
proofs. Unfortunately, this technique cannot be
applied to fully deﬁned or executable programs,
as it is usually necessary to instantiate the types
on which the proof depends in a variety of incom-
patible ways. The SRI MLS tool [9] contains im-
plicit models of both information ﬂow and a ﬂow
policy. The tool described in this paper supports
information ﬂow proofs by creating an abstrac-
tion of the program in which all objects are of the
same type and information ﬂow is the only oper-
ation performed by the abstraction. The user of
the tool can created an information ﬂow theory or
policy in terms of the abstract information type
used in the process and prove properties of both
the program and the policy in a manner similar
to that currently used for proofs of correctness in
Gypsy.
The proposed tool relied heavily on an information ﬂow
analyzer for Gypsy code which had been developed to iden-
tify code fragments that had no observable effect in the
running program. Although the term was unknown at the
time, proponents of static code analysis will recognize the
following description as being a description of program
slicing[31].
The Gypsy optimizer contains code to iden-
tify variables, which have no effect on the out-
puts of the program. Such variables, known as
“ghosts” are often introduced into programs to
facilitate proofs. Elimination of these variables
and any otherwise executable code, which refer-
ences them, can effect a substantial improvement
in program size and performance.
In order to
identify ghosts, the optimizer conducts a detailed
ﬂow analysis, identifying all objects in the pro-
gram, which contribute information to its output
parameters. Any objects, which do not contribute
to the output, are ghosts and can be eliminated.
The ﬂow analysis deﬁnes information ﬂow se-
mantics for each Gypsy construct. The program
is transformed into an information ﬂow analogue
using a procedure similar to the one followed dur-
ing veriﬁcation condition generation. A path set
through each routine is generated, and the con-
tributors to each output parameter of each rou-
tine are determined. The semantics used account
for ﬂows resulting from control constructs and
buffer operations blockage as well as from nor-
mal assignment operations. Procedure calls are
treated as a set of assignment statements exchang-
ing information among the actual parameters of
the routine. Explicit exception paths are handled,
and provision is made for treating implicit excep-
tion paths in a number of ways, depending on the
proof status of the routine and the degree of cau-
tion required.
Gypsy routines can communicate with the
outside world only through their parameters;
these routines do not retain information from one
invocation to another.