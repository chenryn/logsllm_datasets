Cross processor cache attacks. In Proceedings of the
11th ACM on Asia conference on computer and commu-
nications security, pages 353–364, 2016.
[24] Sagar Karandikar, Howard Mao, Donggyu Kim, David
Biancolin, Alon Amid, Dayeol Lee, Nathan Pemberton,
Emmanuel Amaro, Colin Schmidt, Aditya Chopra, et al.
Firesim: Fpga-accelerated cycle-exact scale-out system
simulation in the public cloud. In 2018 ACM/IEEE 45th
Annual International Symposium on Computer Architec-
ture (ISCA), pages 29–42. IEEE, 2018.
[27] David Lilja. Measuring Computer Performance, pages
228–229. Cambridge University Press, 2000.
[28] Fangfei Liu, Qian Ge, Yuval Yarom, Frank Mckeen, Car-
los Rozas, Gernot Heiser, and Ruby B Lee. Catalyst:
Defeating last-level cache side channel attacks in cloud
computing. In 2016 IEEE international symposium on
high performance computer architecture (HPCA), pages
406–418. IEEE, 2016.
[29] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and
Ruby B Lee. Last-level cache side-channel attacks are
In Security and Privacy (SP), 2015 IEEE
practical.
Symposium on, pages 605–622. IEEE, 2015.
[30] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish
Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vi-
jay Janapa Reddi, and Kim Hazelwood. Pin: building
customized program analysis tools with dynamic instru-
mentation. Acm sigplan notices, 40(6):190–200, 2005.
[31] Mayler Martins, Jody Maick Matos, Renato P Ribas,
André Reis, Guilherme Schlinker, Lucio Rech, and Jens
Michelsen. Open cell library in 15nm FreePDK tech-
nology. In ISPD’15, pages 171–178, 2015.
[32] Michael Mitzenmacher. The Power of Two Choices in
Randomized Load Balancing. PhD thesis, University of
California at Berkeley, 1996.
[33] Michael Mitzenmacher. The power of two choices in
randomized load balancing. IEEE Transactions on Par-
allel and Distributed Systems, 12(10):1094–1104, 2001.
[34] Naveen Muralimanohar, Rajeev Balasubramonian, and
Norman P Jouppi. Cacti 6.0: A tool to model large
caches. HP laboratories, 27:28, 2009.
[35] Dag Arne Osvik, Adi Shamir, and Eran Tromer. Cache
attacks and countermeasures: The case of aes. In Pro-
ceedings of the 2006 The Cryptographers’ Track at the
RSA Conference on Topics in Cryptology, CT-RSA’06,
2006.
[36] Rasmus Pagh and Flemming Friche Rodler. Cuckoo
hashing. In European Symposium on Algorithms, pages
121–133. Springer, 2001.
[25] Taesoo Kim, Marcus Peinado, and Gloria Mainar-Ruiz.
STEALTHMEM: System-level protection against cache-
based side channel attacks in the cloud. In 21st USENIX
Security Symposium (USENIX Security 12), 2012.
[37] Antoon Purnal, Lukas Giner, Daniel Gruss, and Ingrid
Verbauwhede. Systematic analysis of randomization-
based protected cache architectures. In 42th IEEE Sym-
posium on Security and Privacy, 2020.
[26] Vladimir Kiriansky, Ilia Lebedev, Saman Amarasinghe,
Srinivas Devadas, and Joel Emer. DAWG: A Defense
Against Cache Timing Attacks in Speculative Execution
Processors. In MICRO, 2018.
[38] Antoon Purnal and Ingrid Verbauwhede. Advanced
proﬁling for probabilistic prime+ probe attacks and
arXiv preprint
covert channels in scattercache.
arXiv:1908.03383, 2019.
1394    30th USENIX Security Symposium
USENIX Association
[39] Moinuddin K. Qureshi. CEASER: Mitigating conﬂict-
based cache attacks via dynamically encrypted address.
In MICRO’18, 2018.
[51] Qinhan Tan, Zhihua Zeng, Kai Bu, and Kui Ren. Phan-
tomcache: Obfuscating cache conﬂicts with localized
randomization. In NDSS, 2020.
[40] Moinuddin K. Qureshi. New attacks and defense for
encrypted-address cache. In ISCA’19, 2019.
[41] Moinuddin K Qureshi, David Thompson, and Yale N
Patt. The V-Way cache: demand-based associativity via
global replacement. In 32nd International Symposium
on Computer Architecture (ISCA’05), 2005.
[42] Himanshu Raj, Ripal Nathuji, Abhishek Singh, and Paul
England. Resource management for isolation enhanced
cloud services. In Proceedings of the 2009 ACM work-
shop on Cloud computing security, 2009.
[43] Andrea W Richa, M Mitzenmacher, and R Sitaraman.
The power of two random choices: A survey of tech-
niques and results. Combinatorial Optimization, 9:255–
304, 2001.
[44] Thomas Ristenpart, Eran Tromer, Hovav Shacham, and
Stefan Savage. Hey, you, get off of my cloud: Exploring
information leakage in third-party compute clouds. In
Proceedings of the 16th ACM Conference on Computer
and Communications Security, CCS ’09, 2009.
[45] Daniel Sanchez and Christos Kozyrakis. The zcache:
Decoupling ways and associativity. In 2010 43rd Annual
IEEE/ACM International Symposium on Microarchitec-
ture, pages 187–198. IEEE, 2010.
[46] Michael Schwarz, Martin Schwarzl, Moritz Lipp, Jon
Masters, and Daniel Gruss. Netspectre: Read arbitrary
In European Symposium on
memory over network.
Research in Computer Security, pages 279–299, 2019.
[47] André Seznec. A case for two-way skewed-associative
caches. In Proceedings of the 20th Annual International
Symposium on Computer Architecture, ISCA ’93, 1993.
[48] Timothy Sherwood, Erez Perelman, Greg Hamerly, and
Brad Calder. Automatically characterizing large scale
In Proceedings of the 10th Inter-
program behavior.
national Conference on Architectural Support for Pro-
gramming Languages and Operating Systems, ASPLOS
X, 2002.
[49] Anatoly Shusterman, Lachlan Kang, Yarden Haskal,
Yosef Meltser, Prateek Mittal, Yossi Oren, and Yuval
Yarom. Robust website ﬁngerprinting through the cache
occupancy channel. In 28th USENIX Security Sympo-
sium (USENIX Security 19), pages 639–656, 2019.
[50] Allan Snavely and Dean M Tullsen. Symbiotic job-
scheduling for a simultaneous multithreaded processor.
In ASPLOS, 2000.
[52] Pepe Vila, Boris Köpf, and José F Morales. Theory
In 2019 IEEE
and practice of ﬁnding eviction sets.
Symposium on Security and Privacy (SP), 2019.
[53] Berthold Vöcking. How asymmetry helps load balanc-
ing. Journal of the ACM (JACM), 50(4):568–589, 2003.
[54] Zhenghong Wang and Ruby B Lee. New cache designs
for thwarting software cache-based side channel attacks.
In ISCA 2007, pages 494–505, 2007.
[55] Zhenghong Wang and Ruby B. Lee. A Novel Cache
Architecture with Enhanced Performance and Security.
In MICRO, 2008.
[56] Don Weiss, John J Wuu, and Victor Chin. The on-chip
3-mb subarray-based third-level cache on an itanium
microprocessor. IEEE Journal of Solid-State Circuits,
37(11):1523–1529, 2002.
[57] Mario Werner, Thomas Unterluggauer, Lukas Giner,
Michael Schwarz, Daniel Gruss, and Stefan Mangard.
Scattercache: Thwarting cache attacks via cache set ran-
domization. In USENIX Security, 2019.
[58] WikiChip. IBM POWER-9. https://en.wikichip.
org/wiki/ibm/microarchitectures/power9.
[59] M. Yan, B. Gopireddy, T. Shull, and J. Torrellas. Se-
cure hierarchy-aware cache replacement policy (sharp):
Defending against cache-based side channel attacks. In
ISCA, 2017.
[60] Mengjia Yan, Christopher Fletcher, and Josep Torrellas.
Cache telepathy: Leveraging shared resource attacks
to learn dnn architectures. In 29th USENIX Security
Symposium (USENIX Security 20), 2020.
[61] Mengjia Yan, Read Sprabery, Bhargava Gopireddy,
Christopher Fletcher, Roy Campbell, and Josep Torrel-
las. Attack directories, not caches: Side channel attacks
in a non-inclusive world. In 2019 IEEE Symposium on
Security and Privacy (SP), pages 888–904. IEEE, 2019.
[62] Mengjia Yan, Jen-Yang Wen, Christopher W Fletcher,
and Josep Torrellas. SecDir: a secure directory to defeat
directory side-channel attacks. In ISCA 2019, 2019.
[63] Yuval Yarom and Katrina Falkner. Flush+ reload: A
high resolution, low noise, l3 cache side-channel attack.
In USENIX Security, 2014.
[64] Ziqiao Zhou, Michael K Reiter, and Yinqian Zhang. A
software approach to defeating side channels in last-
level caches. In CCS 2016, 2016.
USENIX Association
30th USENIX Security Symposium    1395
Workload
Base
Table 10: Execution time (in billion cycles) of RISC-V for
Non-Secure LLC (Base) and randomized cache where the
cache lookup latency is increased by 3 to 6 cycles.
Figure 15: Gem5-based performance evaluation. Performance of Mirage and Scatter-Cache normalized to Non-Secure Baseline
(using the weighted speedup metric). On average, Mirage incurs a slowdown of 0.8%, and Scatter-Cache of 0.7%.
Appendix A Validation with RISC-V RTL
To validate our results with a hardware design, we imple-
mented randomized caches in RISC-V hardware. We use
Firesim [24], the state-of-the-art platform for FPGA-based
cycle-exact simulation of RISC-V cores on AWS FPGAs. Un-
fortunately, all RISC-V processors currently only support a
two-level cache hierarchy by default. While FireSim emulates
a last-level cache (L3 cache), it only models the tag-store
and not the data-store; the timing model on the FPGA is
stalled until the data is functionally accessed from the host
DRAM [6]. Without the data-store for the L3 Cache, it is
infeasible to directly implement Mirage. However, as Mirage
has a similar LLC-miss count as Scatter-Cache and a 1 cycle
higher access latency (due to FPTR lookup), we can estimate
its performance by implementing a randomized cache design
with two-skews (similar to Scatter-Cache) and increasing the
cache access latency by one cycle to account for the FPTR
lookup. For implementing cache randomization, we used a
hardware implementation of 3-cycle PRINCE cipher.
Randomized cache with increased lookup latency
+3 cycles +4 cycles +5 cycles
202
199
42
707
84
44
110
114
191
191
42
699
85
44
109
119
100% 100.6%
perlbench
mcf
omnetpp
x264
deepsjeng
leela
exchange2
xz
MEAN
194
194
41
702
84
45
108
114
99.5%
+6 cycles
203
201
42
707
84
45
109
115
206
200
42
696
84
45
108
115
We perform the study using a 4MB/16-way L3 cache (the
default size of L3 in the FireSim 4-core Rocket-Core design).
Table 10 compares execution time (in billion cycles) for a
baseline set-associative LLC (Base) and the randomized cache
design as the lookup latency of the cache is increased by 3
cycles to 6 cycles. Note that for this evaluation, we run the
SPEC2017-Int workloads to completion. On average, the ran-
domized cache design with even six cycle additional lookup
latency causes only a 1% slowdown on average. Thus, the
slowdown from the RISC-V FPGA-based evaluation is quite
similar to the slowdown from our simulator (2%).
Appendix B Validation with Gem5 Simulator
We also validated our simulator results using Gem5 [7], a
cycle-accurate micro-architecture simulator. As the default
implementation of Gem5 does not support a 3-level cache
hierarchy, which is typical in modern processors, we did not
pick Gem5 for evaluations in our paper. However, for repro-
ducibility, we re-implemented Mirage and Scatter-Cache in
Gem58 for the L2 cache (in the Gem5 2-level cache hierarchy)
and validated that all the misses in Mirage result in Global
Evictions (no SAE). Figure 15 shows the performance of
Scatter-Cache (SC) and Mirage normalized to a non-secure
8The artifact-evaluated Gem5 implementation of Mirage is available
open-source at http://github.com/gururaj-s/MIRAGE.
100.9%
101.0%
set-associative LLC baseline for a 4-core system with an
8MB L2 cache as the LLC running SPEC-CPU2006 work-
loads (simulated for 1 billion instructions after forwarding
the ﬁrst 10 billion instructions). Averaged across 14 memory-
intensive SPEC workloads (4 copies of a benchmark on 4
cores) and 14 mixed workloads (random combinations of 4
benchmarks), Mirage incurs a slowdown of 0.8% while SC
incurs a slowdown of 0.7%, within our simulator results of
2% and 1.7% slowdown respectively.
Appendix C Efﬁcacy of Load-Aware Selection
We provide intuition with the buckets and balls model (buck-
ets equivalent to cache-sets and balls equivalent to cache-
installs) using bounds from Mitzenmacher’s thesis [32]. Con-
sider N-balls thrown in N-buckets (avg-bucket-load = 1).
With one skew (each ball maps to one random bucket), the
non-uniformity in mapping causes some buckets to have
higher load (most-loaded bucket has O(log(N)) balls). With
two skews, a ball can go to two places, but the random skew
selection has no intelligence in placement, i.e. a ball can end
up in a bucket with high-load (the most-loaded bucket still
has O(log(N)) balls). With 2 skews and load-aware skew-
selection, a ball can go to two places and the placement
speciﬁcally avoids the high-load bucket, thus reducing imbal-
ance; this has been shown to reduce the most-loaded bucket
load to O(log(log(N))) balls. The gain from O(log(N)) to
O(log(log(N))) is dramatic, but going beyond 2 skews has
diminishing returns as log(log(N)) already has little variation
as N changes; so we restrict our study of Mirage to 2 skews.
1396    30th USENIX Security Symposium
USENIX Association
lbmsoplexmilcsphinx3libquantumcactusADMbzip2perlbenchhmmergromacssjenggobmkgcch264refmix1mix2mix3mix4mix5mix6mix7mix8mix9mix10mix11mix12mix13mix14 SPEC-14MIX-14ALL-2896%97%98%99%100%101%102%103%104%Norm. Performance (%)GmeanScatter-CacheMirage