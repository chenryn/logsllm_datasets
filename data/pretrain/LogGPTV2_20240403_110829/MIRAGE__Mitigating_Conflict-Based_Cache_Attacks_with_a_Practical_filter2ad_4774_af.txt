### Cross-Processor Cache Attacks
In *Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security*, pages 353–364, 2016.

### Firesim: FPGA-Accelerated Cycle-Exact Scale-Out System Simulation in the Public Cloud
**Authors:** Sagar Karandikar, Howard Mao, Donggyu Kim, David Biancolin, Alon Amid, Dayeol Lee, Nathan Pemberton, Emmanuel Amaro, Colin Schmidt, Aditya Chopra, et al.
*In 2018 ACM/IEEE 45th Annual International Symposium on Computer Architecture (ISCA), pages 29–42. IEEE, 2018.*

### Measuring Computer Performance
**Author:** David Lilja
*Cambridge University Press, 2000, pages 228–229.*

### Catalyst: Defeating Last-Level Cache Side-Channel Attacks in Cloud Computing
**Authors:** Fangfei Liu, Qian Ge, Yuval Yarom, Frank Mckeen, Carlos Rozas, Gernot Heiser, Ruby B. Lee
*In 2016 IEEE International Symposium on High-Performance Computer Architecture (HPCA), pages 406–418. IEEE, 2016.*

### Last-Level Cache Side-Channel Attacks are Practical
**Authors:** Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, Ruby B. Lee
*In 2015 IEEE Symposium on Security and Privacy (SP), pages 605–622. IEEE, 2015.*

### Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation
**Authors:** Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, Kim Hazelwood
*ACM SIGPLAN Notices, 40(6):190–200, 2005.*

### Open Cell Library in 15nm FreePDK Technology
**Authors:** Mayler Martins, Jody Maick Matos, Renato P. Ribas, André Reis, Guilherme Schlinker, Lucio Rech, Jens Michelsen
*In ISPD’15, pages 171–178, 2015.*

### The Power of Two Choices in Randomized Load Balancing
**Author:** Michael Mitzenmacher
*PhD thesis, University of California at Berkeley, 1996.*

### The Power of Two Choices in Randomized Load Balancing
**Author:** Michael Mitzenmacher
*IEEE Transactions on Parallel and Distributed Systems, 12(10):1094–1104, 2001.*

### Cacti 6.0: A Tool to Model Large Caches
**Authors:** Naveen Muralimanohar, Rajeev Balasubramonian, Norman P. Jouppi
*HP Laboratories, 2009, pages 28.*

### Cache Attacks and Countermeasures: The Case of AES
**Authors:** Dag Arne Osvik, Adi Shamir, Eran Tromer
*In Proceedings of the 2006 Cryptographers’ Track at the RSA Conference on Topics in Cryptology (CT-RSA’06), 2006.*

### Cuckoo Hashing
**Authors:** Rasmus Pagh, Flemming Friche Rodler
*In European Symposium on Algorithms, pages 121–133. Springer, 2001.*

### STEALTHMEM: System-Level Protection Against Cache-Based Side-Channel Attacks in the Cloud
**Authors:** Taesoo Kim, Marcus Peinado, Gloria Mainar-Ruiz
*In 21st USENIX Security Symposium (USENIX Security 12), 2012.*

### Systematic Analysis of Randomization-Based Protected Cache Architectures
**Authors:** Antoon Purnal, Lukas Giner, Daniel Gruss, Ingrid Verbauwhede
*In 42nd IEEE Symposium on Security and Privacy, 2020.*

### DAWG: A Defense Against Cache Timing Attacks in Speculative Execution Processors
**Authors:** Vladimir Kiriansky, Ilia Lebedev, Saman Amarasinghe, Srinivas Devadas, Joel Emer
*In MICRO, 2018.*

### Advanced Profiling for Probabilistic Prime+Probe Attacks and Covert Channels in ScatterCache
**Authors:** Antoon Purnal, Ingrid Verbauwhede
*arXiv preprint arXiv:1908.03383, 2019.*

### CEASER: Mitigating Conflict-Based Cache Attacks via Dynamically Encrypted Address
**Author:** Moinuddin K. Qureshi
*In MICRO’18, 2018.*

### PhantomCache: Obfuscating Cache Conflicts with Localized Randomization
**Authors:** Qinhan Tan, Zhihua Zeng, Kai Bu, Kui Ren
*In NDSS, 2020.*

### New Attacks and Defense for Encrypted-Address Cache
**Author:** Moinuddin K. Qureshi
*In ISCA’19, 2019.*

### The V-Way Cache: Demand-Based Associativity via Global Replacement
**Authors:** Moinuddin K. Qureshi, David Thompson, Yale N. Patt
*In 32nd International Symposium on Computer Architecture (ISCA’05), 2005.*

### Resource Management for Isolation Enhanced Cloud Services
**Authors:** Himanshu Raj, Ripal Nathuji, Abhishek Singh, Paul England
*In Proceedings of the 2009 ACM Workshop on Cloud Computing Security, 2009.*

### The Power of Two Random Choices: A Survey of Techniques and Results
**Authors:** Andrea W. Richa, Michael Mitzenmacher, R. Sitaraman
*Combinatorial Optimization, 9:255–304, 2001.*

### Hey, You, Get Off of My Cloud: Exploring Information Leakage in Third-Party Compute Clouds
**Authors:** Thomas Ristenpart, Eran Tromer, Hovav Shacham, Stefan Savage
*In Proceedings of the 16th ACM Conference on Computer and Communications Security (CCS ’09), 2009.*

### The ZCache: Decoupling Ways and Associativity
**Authors:** Daniel Sanchez, Christos Kozyrakis
*In 2010 43rd Annual IEEE/ACM International Symposium on Microarchitecture, pages 187–198. IEEE, 2010.*

### NetSpectre: Read Arbitrary Memory over Network
**Authors:** Michael Schwarz, Martin Schwarzl, Moritz Lipp, Jon Masters, Daniel Gruss
*In European Symposium on Research in Computer Security, pages 279–299, 2019.*

### A Case for Two-Way Skewed-Associative Caches
**Author:** André Seznec
*In Proceedings of the 20th Annual International Symposium on Computer Architecture (ISCA ’93), 1993.*

### Automatically Characterizing Large-Scale Program Behavior
**Authors:** Timothy Sherwood, Erez Perelman, Greg Hamerly, Brad Calder
*In Proceedings of the 10th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS X), 2002.*

### Robust Website Fingerprinting Through the Cache Occupancy Channel
**Authors:** Anatoly Shusterman, Lachlan Kang, Yarden Haskal, Yosef Meltser, Prateek Mittal, Yossi Oren, Yuval Yarom
*In 28th USENIX Security Symposium (USENIX Security 19), pages 639–656, 2019.*

### Symbiotic Job-Scheduling for a Simultaneous Multithreaded Processor
**Authors:** Allan Snavely, Dean M. Tullsen
*In ASPLOS, 2000.*

### Theory and Practice of Finding Eviction Sets
**Authors:** Pepe Vila, Boris Köpf, José F. Morales
*In 2019 IEEE Symposium on Security and Privacy (SP), 2019.*

### How Asymmetry Helps Load Balancing
**Author:** Berthold Vöcking
*Journal of the ACM (JACM), 50(4):568–589, 2003.*

### New Cache Designs for Thwarting Software Cache-Based Side-Channel Attacks
**Authors:** Zhenghong Wang, Ruby B. Lee
*In ISCA 2007, pages 494–505, 2007.*

### A Novel Cache Architecture with Enhanced Performance and Security
**Authors:** Zhenghong Wang, Ruby B. Lee
*In MICRO, 2008.*

### The On-Chip 3-MB Subarray-Based Third-Level Cache on an Itanium Microprocessor
**Authors:** Don Weiss, John J. Wuu, Victor Chin
*IEEE Journal of Solid-State Circuits, 37(11):1523–1529, 2002.*

### ScatterCache: Thwarting Cache Attacks via Cache Set Randomization
**Authors:** Mario Werner, Thomas Unterluggauer, Lukas Giner, Michael Schwarz, Daniel Gruss, Stefan Mangard
*In USENIX Security, 2019.*

### IBM POWER-9
*WikiChip: https://en.wikichip.org/wiki/ibm/microarchitectures/power9*

### Secure Hierarchy-Aware Cache Replacement Policy (SHARP): Defending Against Cache-Based Side-Channel Attacks
**Authors:** M. Yan, B. Gopireddy, T. Shull, J. Torrellas
*In ISCA, 2017.*

### Cache Telepathy: Leveraging Shared Resource Attacks to Learn DNN Architectures
**Authors:** Mengjia Yan, Christopher Fletcher, Josep Torrellas
*In 29th USENIX Security Symposium (USENIX Security 20), 2020.*

### Attack Directories, Not Caches: Side-Channel Attacks in a Non-Inclusive World
**Authors:** Mengjia Yan, Read Sprabery, Bhargava Gopireddy, Christopher Fletcher, Roy Campbell, Josep Torrellas
*In 2019 IEEE Symposium on Security and Privacy (SP), pages 888–904. IEEE, 2019.*

### SecDir: A Secure Directory to Defeat Directory Side-Channel Attacks
**Authors:** Mengjia Yan, Jen-Yang Wen, Christopher W. Fletcher, Josep Torrellas
*In ISCA 2019, 2019.*

### Flush+Reload: A High-Resolution, Low-Noise, L3 Cache Side-Channel Attack
**Authors:** Yuval Yarom, Katrina Falkner
*In USENIX Security, 2014.*

### A Software Approach to Defeating Side Channels in Last-Level Caches
**Authors:** Ziqiao Zhou, Michael K. Reiter, Yinqian Zhang
*In CCS 2016, 2016.*

### Table 10: Execution Time (in Billion Cycles) of RISC-V for Non-Secure LLC (Base) and Randomized Cache
| Workload | Base | +3 Cycles | +4 Cycles | +5 Cycles | +6 Cycles |
|----------|------|-----------|-----------|-----------|-----------|
| perlbench | 202  | 203       | 206       | 201       | 200       |
| mcf      | 199  | 199       | 201       | 200       | 200       |
| omnetpp  | 42   | 42        | 42        | 42        | 42        |
| x264     | 707  | 707       | 702       | 699       | 696       |
| deepsjeng| 84   | 84        | 84        | 84        | 84        |
| leela    | 44   | 44        | 44        | 44        | 45        |
| exchange2| 110  | 109       | 108       | 109       | 108       |
| xz       | 114  | 119       | 114       | 115       | 115       |
| MEAN     | 100% | 100.6%    | 100.9%    | 101.0%    | 99.5%     |

### Figure 15: Gem5-Based Performance Evaluation
*Performance of Mirage and Scatter-Cache normalized to Non-Secure Baseline (using the weighted speedup metric). On average, Mirage incurs a slowdown of 0.8%, and Scatter-Cache of 0.7%.*

### Appendix A: Validation with RISC-V RTL
To validate our results with a hardware design, we implemented randomized caches in RISC-V hardware. We used FireSim [24], the state-of-the-art platform for FPGA-based cycle-exact simulation of RISC-V cores on AWS FPGAs. Unfortunately, all RISC-V processors currently only support a two-level cache hierarchy by default. While FireSim emulates a last-level cache (L3 cache), it only models the tag-store and not the data-store; the timing model on the FPGA is stalled until the data is functionally accessed from the host DRAM [6]. Without the data-store for the L3 Cache, it is infeasible to directly implement Mirage. However, as Mirage has a similar LLC-miss count as Scatter-Cache and a 1 cycle higher access latency (due to FPTR lookup), we can estimate its performance by implementing a randomized cache design with two-skews (similar to Scatter-Cache) and increasing the cache access latency by one cycle to account for the FPTR lookup. For implementing cache randomization, we used a hardware implementation of a 3-cycle PRINCE cipher.

### Table 10: Execution Time (in Billion Cycles) for a Baseline Set-Associative LLC (Base) and the Randomized Cache Design
| Workload | Base | +3 Cycles | +4 Cycles | +5 Cycles | +6 Cycles |
|----------|------|-----------|-----------|-----------|-----------|
| perlbench | 202  | 203       | 206       | 201       | 200       |
| mcf      | 199  | 199       | 201       | 200       | 200       |
| omnetpp  | 42   | 42        | 42        | 42        | 42        |
| x264     | 707  | 707       | 702       | 699       | 696       |
| deepsjeng| 84   | 84        | 84        | 84        | 84        |
| leela    | 44   | 44        | 44        | 44        | 45        |
| exchange2| 110  | 109       | 108       | 109       | 108       |
| xz       | 114  | 119       | 114       | 115       | 115       |
| MEAN     | 100% | 100.6%    | 100.9%    | 101.0%    | 99.5%     |

We perform the study using a 4MB/16-way L3 cache (the default size of L3 in the FireSim 4-core Rocket-Core design). Table 10 compares execution time (in billion cycles) for a baseline set-associative LLC (Base) and the randomized cache design as the lookup latency of the cache is increased by 3 to 6 cycles. Note that for this evaluation, we run the SPEC2017-Int workloads to completion. On average, the randomized cache design with even six additional cycle lookup latency causes only a 1% slowdown on average. Thus, the slowdown from the RISC-V FPGA-based evaluation is quite similar to the slowdown from our simulator (2%).

### Appendix B: Validation with Gem5 Simulator
We also validated our simulator results using Gem5 [7], a cycle-accurate micro-architecture simulator. As the default implementation of Gem5 does not support a 3-level cache hierarchy, which is typical in modern processors, we did not pick Gem5 for evaluations in our paper. However, for reproducibility, we re-implemented Mirage and Scatter-Cache in Gem58 for the L2 cache (in the Gem5 2-level cache hierarchy) and validated that all the misses in Mirage result in Global Evictions (no SAE). Figure 15 shows the performance of Scatter-Cache (SC) and Mirage normalized to a non-secure set-associative LLC baseline for a 4-core system with an 8MB L2 cache as the LLC running SPEC-CPU2006 workloads (simulated for 1 billion instructions after forwarding the first 10 billion instructions). Averaged across 14 memory-intensive SPEC workloads (4 copies of a benchmark on 4 cores) and 14 mixed workloads (random combinations of 4 benchmarks), Mirage incurs a slowdown of 0.8% while SC incurs a slowdown of 0.7%, within our simulator results of 2% and 1.7% slowdown respectively.

### Appendix C: Efficacy of Load-Aware Selection
We provide intuition with the buckets and balls model (buckets equivalent to cache-sets and balls equivalent to cache-installs) using bounds from Mitzenmacher’s thesis [32]. Consider N-balls thrown into N-buckets (avg-bucket-load = 1). With one skew (each ball maps to one random bucket), the non-uniformity in mapping causes some buckets to have higher load (most-loaded bucket has O(log(N)) balls). With two skews, a ball can go to two places, but the random skew selection has no intelligence in placement, i.e., a ball can end up in a bucket with high load (the most-loaded bucket still has O(log(N)) balls). With 2 skews and load-aware skew-selection, a ball can go to two places and the placement specifically avoids the high-load bucket, thus reducing imbalance; this has been shown to reduce the most-loaded bucket load to O(log(log(N))) balls. The gain from O(log(N)) to O(log(log(N))) is dramatic, but going beyond 2 skews has diminishing returns as log(log(N)) already has little variation as N changes; so we restrict our study of Mirage to 2 skews.

### SPEC-14MIX-14ALL-28 Performance Comparison
| Benchmark | Norm. Performance (%) |
|-----------|-----------------------|
| lbmsoplex | 96%                   |
| milc      | 97%                   |
| sphinx3   | 98%                   |
| libquantum| 99%                   |
| cactusADM | 100%                  |
| bzip2     | 101%                  |
| perlbench | 102%                  |
| hmmer     | 103%                  |
| gromacs   | 104%                  |
| sjeng     | 101%                  |
| gobmk     | 102%                  |
| gcc       | 103%                  |
| h264ref   | 104%                  |
| mix1      | 96%                   |
| mix2      | 97%                   |
| mix3      | 98%                   |
| mix4      | 99%                   |
| mix5      | 100%                  |
| mix6      | 101%                  |
| mix7      | 102%                  |
| mix8      | 103%                  |
| mix9      | 104%                  |
| mix10     | 96%                   |
| mix11     | 97%                   |
| mix12     | 98%                   |
| mix13     | 99%                   |
| mix14     | 100%                  |
| Gmean     | 99%                   |

*Figure: Normalized Performance (%) for Scatter-Cache and Mirage.*