in the Attributes B-Tree. The one represented by an HFSPlusAttrData structure holds inline attribute data.
The other two are used for larger attributes that require their extents to be tracked. HFSPlusAttrForkData
includes an HFSPlusForkData structurethat is, up to eight initial extents. If an attribute's on-disk data is more
fragmented, it will require one or more HFSPlusAttrExtents records, each of which will track an additional
eight extents.
12.7.4.1. Working with Extended Attributes
Extended attributes of HFS+ file system objects are manipulated through the BSD system calls setxattr(),
getxattr(), listxattr(), and removexattr(), all of which operate on pathnames.[19] These system calls
also have variantswith an f prefix in their namesthat operate on open file descriptors.
[19] In Mac OS X 10.4, no other application environment besides BSD has interfaces for
manipulating extended attributes.
There is a single, global namespace for attributes. Although attribute names can be arbitrary, Apple
recommends using a reverse-DNS-style naming scheme. Examples of attributes commonly employed by the
operating system include the following:
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 40 of 81
system.extendedsecuritya volume attribute held by the parent of the root folder (i.e., CNID 1) of a
volume on which ACLs are enabled
com.apple.diskimages.recentcksuman attribute used by Apple's Disk Images framework for storing
the checksum of the disk image file to which the attribute applies
com.apple.system.Securityan attribute used for ACLs
com.apple.system.*protected system attributes
com.apple.FinderInfoa fake attribute mapped to a file or folder's Finder information (fake in that it is
not actually stored in the Attributes B-Tree)
com.apple.ResourceForka fake attribute mapped to a file's resource fork
The program shown in Figure 1220 sets and retrieves extended attributes for the given pathname.
Figure 1220. Programmatically setting an extended attribute
// xattr.c
#include 
#include 
#include 
#include 
#include 
#define PROGNAME "xattr"
void
usage()
{
fprintf(stderr, "\
Set or remove extended attributes. Usage:\n\n\
%s -s =  # set\n\
%s -r   # remove\n\n\
Notes:  must not contain a '=' character\n\
 must be the last argument\n", PROGNAME, PROGNAME);
exit(1);
}
int
main(int argc, char **argv)
{
size_t size;
u_int32_t position = 0;
int ch, ret, options = XATTR_NOFOLLOW;
char *path = NULL, *name = NULL, *value = NULL;
if (argc != 4)
usage();
path = argv[argc - 1];
argc--;
while ((ch = getopt(argc, argv, "r:s:")) != -1) {
switch (ch) {
case 'r':
if (ret = removexattr(path, optarg, options))
perror("removexattr");
break;
case 's':
name = optarg;
if ((value = strchr(optarg, '=')) == NULL)
usage();
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 41 of 81
*value = '\0';
value++;
size = strlen(value) + 1;
if (ret = setxattr(path, name, value, size, position, options))
perror("setxattr");
break;
default:
usage();
}
}
exit(ret);
}
$ gcc -Wall -o xattr xattr.c
$ touch /tmp/file.txt
$ ./xattr -s com.osxbook.importance=none /tmp/file.txt
$ sudo hfsdebug /tmp/file.txt
# Attributes
# Attribute Key
keyLength = 66
pad = 0
fileID = 3325378
startBlock = 0
attrNameLen = 27
attrName = com.osxbook.importance
# Inline Data
recordType = 0x10
reserved[0] = 0
reserved[1] = 0
attrSize = 5 bytes
attrData = 6e 6f 6e 65 00
n o n e
Note that HFS+ only stores extended attributesit does not index them. In particular, it does not participate in
search operations performed by the Spotlight search mechanism (see Section 11.8), which uses external index
files, not extended attributes, to store metadata.
12.7.4.2. Examining the Attributes B-Tree
Unlike the Catalog and Extents Overflow B-Trees, the Attributes B-Tree is not a mandatory constituent of an
HFS+ volume. Even if an HFS+ implementation supports extended attributes and ACLs, an attached HFS+
volume may have a zero-length Attributes file if no file system object on that volume has ever used these
features. If this is the case, the volume's Attributes file will be created when a setxattr() operation is
attempted on one of the volume's files or folders, or when ACLs are enabled for the volume.
$ hdiutil create -size 32m -fs HFSJ -volname HFSAttr /tmp/hfsattr.dmg
$ open /tmp/hfsattr.dmg
$ hfsdebug -V /Volumes/HFSAttr -v
...
# Attributes File
logicalSize = 0 bytes
...
$ fsaclctl -p /Volumes/HFSAttr
Access control lists are not supported or currently disabled on /Volumes/HFSAttr.
$ sudo fsaclctl -p /Volumes/HFSAttr -e
$ fsaclctl -p /Volumes/HFSAttr
Access control lists are supported on /Volumes/HFSAttr.
$ hfsdebug -V /Volumes/HFSAttr -v
...
# Attributes File
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 42 of 81
logicalSize = 1048576 bytes
totalBlocks = 256
clumpSize = 1048576 bytes
extents = startBlock blockCount % of file
0xaf9 0x100 100.00 %
256 allocation blocks in 1 extents total.
256.00 allocation blocks per extent on an average.
...
We can create an ACL entry for a file and use hfsdebug to display the corresponding Attributes B-Tree
record, which will illustrate how ACLs are stored as extended attributes on an HFS+ volume.
$ touch /Volumes/HFSAttr/file.txt
$ chmod +a 'amit allow read' /Volumes/HFSAttr/file.txt
$ hfsdebug /Volumes/HFSAttr/file.txt
# Attributes
# Attribute Key
keyLength = 62
pad = 0
fileID = 22
startBlock = 0
attrNameLen = 25
attrName = com.apple.system.Security
# Inline Data
recordType = 0x10
reserved[0] = 0
reserved[1] = 0
attrSize = 68 bytes
attrData = 01 2c c1 6d 00 00 00 00 00 00 00 00 00 00 00 00
, m
...
# File Security Information
fsec_magic = 0x12cc16d
fsec_owner = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
fsec_group = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# ACL Record
acl_entrycount = 1
acl_flags = 0
# ACL Entry
ace_applicable = 53 25 a9 39 2f 3f 49 35 b0 e4 7e f4 71 23 64 e9
user = amit
uid = 501
group = amit
gid = 501
ace_flags = 00000000000000000000000000000001 (0x000001)
. KAUTH_ACE_PERMIT
ace_rights = 00000000000000000000000000000010 (0x000002)
. KAUTH_VNODE_READ_DATA
12.7.5. The Startup File
HFS+ supports an optional Startup file that can contain arbitrary informationsuch as a secondary bootloaderfor
use while booting the system. Since the location of the Startup file is at a well-known offset in the volume
header, it helps a system without built-in HFS+ support (in ROM, say) to boot from an HFS+ volume. A
Startup file is used for booting Mac OS X from an HFS+ volume on an Old World machine. Other hardware
compatibility issues aside, the machine is likely to have booting problems because of its older Open Firmware.
The firmware may not support HFS+. Moreover, it will be programmed to execute the Mac OS ROM instead
of BootX. One solution involves storing the XCOFF version of BootX in the Startup file and creating an HFS
wrapper volume containing a special "system" file that patches Open Firmware such that the firmware does not
execute the Mac OS ROMinstead, it loads BootX from the Startup file.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 43 of 81
12.8. Examining HFS+ Features
In this section, we will look at several standard HFS+ features, such as case sensitivity, journaling, hard links,
symbolic links, and aliases.
12.8.1. Case Sensitivity
By default, HFS+ is a case-preserving, case-insensitive file system, whereas traditional Unix file systems are
case-sensitive. The case insensitivity of HFS+ might be undesirable in certain situations. Suppose you have an
archive containing files called Makefile and makefile in the same directory:
$ tar -tf archive.tar
Makefile
makefile
If we extract these files on an HFS+ volume, the second file to be extracted would overwrite the first:
$ tar -xvf archive.tar
Makefile
makefile
$ ls *akefile
makefile
The default case insensitivity of HFS+ applies only to file and folder names. Extended attribute names are
always case-sensitive.
HFSX was introduced with Mac OS X 10.3 as an extension to HFS+ for supporting case-sensitive file and
folder names. You can create a case-sensitive HFS+ file system by passing the -s option to newfs_hfs. HFSX
disk images can be created using hdiutil.
$ hdiutil create -size 32m -fs HFSX -volname HFSX /tmp/hfsx.dmg
...
created: /tmp/hfsx.dmg
$ open /tmp/hfsx.dmg
$ hfsdebug -V /Volumes/HFSX -v
...
# HFS Plus Volume
Volume size = 32728 KB/31.96 MB/0.03 GB
# HFS Plus Volume Header
signature = 0x4858 (HX)
version = 0x5
...
$
Note the differences from a case-insensitive HFS+ volume: The volume signature is HX instead of H+, and the
version is 5 instead of 4. A signature value of HX is still stored as H+ in memory and therefore is not flushed to
disk.
The case sensitivity of a volume is also recorded in the keyCompareType field of the Catalog B-Tree. If this
field's value is 0xbc, binary comparison (case-sensitive) is used to compare names. If the field's value is 0xcf,
case folding is performed while comparing names. Note that keyCompareType is always 0xbc in the Attributes
B-Tree and is irrelevant in the Extents Overflow B-Tree.
$ sudo hfsdebug -b catalog # root volume, should be case-insensitive by default
...
keyCompareType = 0xcf (kHFSCaseFolding, case-insensitive)
...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 44 of 81
$ hfsdebug -V /Volumes/HFSX -b catalog # case-sensitive volume
...
keyCompareType = 0xbc (kHFSBinaryCompare, case-sensitive)
...
12.8.2. Filename Encodings
HFS+ uses Unicode for encoding names of files, folders, and extended attributes. As we saw in Section 12.7.2,
file and folder names are represented by the HFSUniStr255 structure, which consists of a 16-bit length
followed by up to 255 double-byte Unicode characters. HFS+ stores Unicode characters fully decomposed,
with the composing characters being in canonical order. When strings containing such characters are
exchanged between HFS+ and user space, they are encoded by the kernel as ASCII-compatible UTF-8 bytes
(see Figure 1221). hfsdebug can be used to view the Unicode characters stored on disk corresponding to a
node name.
$ /bin/zsh
$ cd /tmp
$ touch `echo '\xe0\xa4\x85\xe0\xa4\xae\xe0\xa4\xbf\xe0\xa4\xa4'` # UTF-8
$ ls -wi # -w forces raw printing of non-ASCII characters
...
3364139 # Terminal.app can display the name
$ sudo hfsdebug -c 3364139 # the UTF-8-encoded name can also be used here
path = Macintosh HD:/private/tmp/%0905%092e%093f%0924
...
Figure 1221. Unicode filenames in Mac OS X
[View full size image]
HFS+ uses the : character as a path separator, whereas the Unix APIs use the / character. Since : cannot
appear in an HFS+ node name, HFS+ translates any : characters that may appear in a user-provided node
name (through a Unix API function, say) to / when storing them to disk. Conversely, when encoding an HFS+
Unicode string as a UTF-8 string for a Unix function, any / characters are translated to : characters.
UTF-8
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 45 of 81
Unicode is an encoding scheme that maps characters to integers. It is meant to contain characters
for all known languages and various categories of symbols. Such a huge character set requires
multiple bytes to be represented. Traditionally, operating systems have used single-byte
characters. A convenient representation of Unicode on such systems is UTF-8, which is an 8-bit,
variable-length encoding scheme. UTF-8 encodes each 7-bit ASCII character as itself in a single
byte, whereas non-ASCII characters are encoded as multibyte sequences, with the high-order bits
of the first byte indicating the number of bytes that follow. Moreover, UTF-8 preserves the C
convention of null-terminated strings.
UTF-8 was created by Ken Thompson and Rob Pike. It was first implemented on Plan 9.
Older Mac OS APIs use file system names consisting of characters encoded using localization-specific Apple-
only text encodingsfor example, MacDevanagari, MacGreek, MacJapanese, and MacRoman. For the benefit of
these APIs, file and folder records in the Catalog B-Tree contain a hint (the textEncoding field) for name
conversions between Unicode and older text encodings. The various conversion tables are loadable, with the
exception of tables for conversion between HFS MacRoman and Unicodethese are built into the kernel. The
volume header contains a 64-bit encoding bitmap (the encodingsBitmap field) for recording encodings used
on the volume. Based on this bitmap, the appropriate encoding tablesif availablemay be loaded by an
implementation when a volume is mounted. The
directory /System/Library/Filesystems/hfs.fs/Encodings/ contains loadable encodings.
12.8.3. Permissions
HFS+ provides Unix-style file system permissions. Both the HFSPlusCatalogFile and
HFSPlusCatalogFolder structures include an HFSPlusBSDInfo structure that encapsulates information related
to ownership, permissions, and file type.
struct HFSPlusBSDInfo {
// owner ID 99 ("unknown") is treated as the user ID of the calling
// process (substituted on the fly)
u_int32_t ownerID;
// group ID 99 ("unknown") is treated as the owner ID of the calling
// process (substituted on the fly)
u_int32_t groupID;
// superuser-changeable BSD flags, see chflags(2)
u_int8_t adminFlags;
// owner-changeable BSD flags, see chflags(2)
u_int8_t ownerFlags;