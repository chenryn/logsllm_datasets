title:Don't Just BYOD, Bring-Your-Own-App Too! Protection via Virtual Micro
Security Perimeters
author:Gabriel Salles-Loustau and
Luis Garcia and
Kaustubh R. Joshi and
Saman A. Zonouz
2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Don’t just BYOD, Bring-Your-Own-App Too!
Protection via Virtual Micro Security Perimeters
∗
Gabriel Salles-Loustau, Luis Garcia, Kaustubh Joshi
Electrical and Computer Engineering
∗
AT&T Research, Rutgers University
, Saman Zonouz
{gabriel.sallesloustau, l.garcia2, saman.zonouz}@rutgers.edu, PI:EMAIL
Abstract—Mobile devices are increasingly becoming a melting
pot of different types of data ranging from sensitive corporate
documents to commercial media to personal content produced
and shared via online social networks. While it is desirable
for such diverse content to be accessible from the same device
via a uniﬁed user experience and through a rich plethora of
mobile apps, ensuring that this data remains protected has
become challenging. Even though different data types have very
different security and privacy needs and accidental
instances
of data leakage are common, today’s mobile operating systems
include few, if any, facilities for ﬁne-grained data protection and
isolation. In this paper, we present SWIRLS, an Android-based
mobile OS that provides a rich policy-based information-ﬂow data
protection abstraction for mobile apps to support BYOD (bring-
your-own-device) use cases. SWIRLS allows security and privacy
policies to be attached to individual pieces of data contained in
signed and encrypted capsules, and enforces these policies as the
data ﬂows through the device. Unlike current BYOD solutions
like VMs and containers that create duplication and cognitive
overload, SWIRLS provides a single environment that allows users
to access content belonging to different security contexts using the
same applications without fear of inadverdant or malicious data
leakage. SWIRLS also unburdens app developers from having to
worry about security policies, and provides APIs through which
they can create seamless multi-security-context user interfaces. To
implement it’s abstractions, SWIRLS develops a cryptographically
protected capsule distribution and installation scheme, enhances
Taintdroid-based taint-tracking mechanisms to support efﬁcient
kernel and user-space security policy enforcement, implements
techniques for persisting security context along with data, and
provides transparent security-context switching mechanisms. Us-
ing our Android-based prototype (>25K LOC), we show a
number of data protection use-cases such as isolation of personal
and work data, limiting document sharing and preventing leakage
based on document classiﬁcation, and security policies based
on geo- and time-fencing. Our experiments show that SWIRLS
imposes a very minimal overhead in both battery consumption
and performance.
I.
INTRODUCTION
Mobile devices have become the primary platform over
which content with widely varying data protection require-
ments is produced and consumed. Today, conﬁdential corporate
email and documents, sensitive health and ﬁnancial records,
private audio and video conversation streams, and media
intended for public dissemination on online social networks all
jostle for the user’s attention on the same phone. However, data
isolation facilities on current mobile platforms leave much to
be desired, with few OS facilities for preventing sensitive data
from mixing with data for public consumption and leaking to
untrusted endpoints, either accidentally or maliciously, e.g., a
sensitive corporate email accidentally forwarded over a public
email provider, or a private picture being shared over social
media. Solutions do exist for speciﬁc use-cases. For example,
to protect sensitive company data, enterprises often require
their employees to use different phones for work and personal
use, or to use variants of such a scheme, e.g., partitioning
of a single device into virtual “work phone” and “personal
phone” through OS [5] or CPU virtualization
[7]. Even
when BYOD (bring-your-own-device) is permitted, content
owners control the access to protected content by allowing
access only to curated apps that are known to enforce ﬁxed
protection requirements. For instance, corporate email can be
accessed only through a special corporate email client, and
movies, books, or music from a particular publisher can be
read only through that publisher’s app. In most cases sharing
data between apps is either completely disallowed, or restricted
using install-time or runtime permission-based schemes such
as Android’s default permission control, SEAndroid [31], or
ASM [20]. When data protection cannot be guaranteed by any
of these approaches, mobile devices are simply prohibited. For
instance, phones might not be allowed in secret corporate labs
to prevent leaked pictures of prototypes.
Unfortunately, these solutions fall short along key efﬁ-
ciency and usability dimensions. For instance, the development
and maintenance of isolation environments that access similar
types of content can become costly and burdensome for content
owners and users. Content owners have to develop, maintain,
and update BYOD apps for the sole purpose of enforcing
data protection when, otherwise, a third party app might have
sufﬁced. These apps often live in silo’ed containers, unable
to access services provided by the rest of the mobile plat-
form for fear of information contamination, e.g., a corporate
email app might require its own PDF reader. For users, these
multiple-environment systems present a fragmented and often
inconsistent user experience that increases cognitive effort.
They also limit users’ choices to install only the speciﬁc
recommended apps to access the sensitive material. Different
apps for doing similar tasks behave differently, and must be
individually conﬁgured according to user preferences. In cases
where system resources such as cameras, microphones, or even
device location are concerned, container-based (non-system-
wide) approaches fail completely. A corporation concerned
with leakage of unauthorized pictures from a sensitive lab area
cannot simply publish a BYOD app to disable the camera, and
the user may choose to simply ignore the app completely.
We make the key observation that the above approaches are
limited by a fundamental mismatch: while security and privacy
requirements are a property of the data being processed,
the above schemes deﬁne security in terms of the actors,
i.e., environments, processes, and apps. Therefore, they either
suffer from an explosion of actors (one for each data type
that needs a different security context), or they suffer from
low granularity [17]. We propose a contrasting approach to
address this dilemma: one in which security policy is directly
associated with the data by the content owner, and it ﬂows
through the system as the data is processed by various apps.
Thus,
the same app should be able to process data from
different contexts, while still ensuring that each data owner’s
978-1-4673-8891-7/16 $31.00 © 2016 IEEE
DOI 10.1109/DSN.2016.54
526
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:45 UTC from IEEE Xplore.  Restrictions apply. 
potentially differing security requirements are enforced. Such
a scheme can prevent leakage by prohibiting mixing of data
belonging to different security contexts and beneﬁt users,
content-owners, and developers alike. It allows users to use
any apps they want to access content. It allows content-owners
from being forced to write and maintain curated apps simply
to enforce security policies. And ﬁnally, it frees app developers
from having to implement security policies, and enables them
to focus on developing their apps.
To implement such a vision, we present SWIRLS, an OS-
level solution based on Android that provides system-wide
policy-based data isolation by facilitating and controlling the
mixing of data from different contexts. An OS-level solution
is necessary to prevent malicious apps from bypassing the
security policies required by data owners. SWIRLS allows data
to be packaged in micro security perimeters called capsules
that can be securely and dynamically installed or removed from
the mobile device through an authentication and certiﬁcation
protocol. Each capsule lists initial sensitive source objects.
These objects are either data (ﬁles) or system objects that
generate data (SSL sockets). Capsule data is subject to policies
speciﬁed by the capsule owner that dictate whether mixing
with data from other capsules is allowed, whether the data may
leave a device, and whether it must be encrypted or password
protected. Policies can be based on contextual information such
as location, time, data source, or account. SWIRLS tracks the
capsule data propagation through the phone as it is used by
various apps, and enforces policies on both the original capsule
data as well as data derived from it. To do so, we extend
existing techniques for information ﬂow tracking (TaintDroid)
to allow policy control by disallowing operations that result in
data mixing or other policy violations. The policy associated
with a piece of data is persisted if the data is written to
disk or to a system database using a Union ﬁlesystem. Third-
party apps check the installed policies through the SWIRLS
API and provide users with uniﬁed multi-context interfaces
while monitoring their execution from outside the app for
potential policy violations. SWIRLS supports policy-unaware
”unmanaged” apps that can only handle one type of data
at a time by providing a context-switch operation based on
transparently restarting them within a new context. In this
way, SWIRLS provides ﬁne-grained and context-aware data
protection as a mobile OS primitive and eliminates the need
for isolated execution environments.
Contributions. SWIRLS enables a new model for system-
wide and user-transparent data isolation on mobile devices by
associating security policies with data and enforcing them as
the data ﬂows across multiple third-party apps. The technical
contributions of this paper are as follows:
• We propose a new OS abstraction called capsule
that allows content-owners to encapsulate sensitive
data and its corresponding policies in a signed and
encrypted wrapper. We develop a security-veriﬁed
framework for dynamic capsule deﬁnition, distribution
and on-device installation.
• We identify how existing information tracking engines
(speciﬁcally, TaintDroid) can be enhanced to provide
data isolation. Our extensions include efﬁcient support
for synchronizing policy enforcement across kernel
and user-space objects, creating context-speciﬁc views
of persistent data using union ﬁlesystems, persisting
policy information across executions in the ﬁlesystem
and in system databases, and developing efﬁcient
schemes for context switching from one security con-
text to another.
• We propose new OS API interfaces to help third-party
developers develop multi-context apps that present
data from different security contexts to users in a
cohesive and policy-compliant uniﬁed view.
• We implemente a fully-working prototype of SWIRLS
(>25K LOC) on Android 4.1.1 r6, and validate
its proposed dynamic security protection and per-
formance on real-world enterprise BYOD scenarios
(SWIRLS’s demo available at [33]).
SWIRLS considerably raises the bar for BYOD security
against unauthorized corporate data breaches and prevents ac-
cidental sensitive data leakages by third-party apps. However,
like other taint analysis-based solutions, SWIRLS is unable to
protect the systems against truly malicious apps that leverage
implicit ﬂows for information leakage.
The paper is organized as follows. Section II motivates
the need for SWIRLS, and Section III overviews various
components of SWIRLS and their logical
interconnection.
Section IV presents SWIRLS’s threat model. Section V de-
scribes SWIRLS’s individual components and our prototype
implementation details. Section VI describes the evaluation
results. Section VII and Section VIII go over past related
work, and discusses SWIRLS’s limitations. Finally Section IX
concludes the paper.
II. MOTIVATIONS AND USE CASES
SWIRLS is motivated by the following BYOD use-cases,
where employees use or are asked to use their smartphones to
produce, modify, and consume data with different contexts and
protection requirements. The context can range from coarse-
grained, e.g., a user’s work data vs. personal data, to ﬁne-
grained, e.g., data belonging to a sensitive corporate account
vs. a general corporate newsletter. The user’s access level to
data may also have to change based on the user’s role in
the company, time of the day, location, or any combination
thereof. For instance, a company’s accountant may access the
ﬁnancial database only during the work hours and from within
the company. System-wide enforcement of these protection
requirements across all apps without fragmenting the user
experience is challenging and requires system level support.
enterprise
Employer-employee:
sensitive data access.
Rather than providing employees with a separate smartphone
for corporate use, enterprises are increasingly looking to re-
duce costs, provide greater choice, and reduce multi-device
clutter by allowing workers to use their personal phones for
work related apps (and vice versa). Many solutions such as
L4Android [24], VMWare MVP [7], and Cells [5], have been
proposed to address this need. They use either processor or OS
virtualization to create multiple “virtual phones”, one for work
and another for personal use, that run on the same physical
device. Qubes [22] introduces virtual containers to separate
multiple domains based on Xen virtualization with a strict
separation between different contexts.
Such container-based solutions provide complete isolation
of contexts to keep entities related to each context absolutely
separate from one another. Such an inﬂexible ﬁxed architecture
does not allow any data transfer across the contexts (too re-
strictive), while it permits all data communication requests be-
tween apps that belongs to the same context (too permissive).
To guarantee context isolation, almost all existing solutions
duplicate a full subset of system resources, such as context-
speciﬁc copies of the same app, content provider, or system
service. Besides wasting phone resources, such duplication
reduces usability by increasing cognitive load on users. The
527
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:45 UTC from IEEE Xplore.  Restrictions apply. 
user has to keep track of the contexts manually and switch
between them explicitly through a mechanism such as a touch
screen swipe. The same apps have to be manually installed and
updated in each context. A change of user preferences in one