    6ca40a75 5f              pop     edi
    ......//一直单步过
    0:004> 
    eax=00010048 ebx=0019fd70 ecx=0019eba8 edx=00000010 esi=0019eb90 edi=00000001
    eip=6ca40a7b esp=0249c600 ebp=0249c6b4 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    mshtml!CTableColCalc::AdjustForCol+0x61:
    6ca40a7b c20c00          ret     0Ch
    0:004> 
    eax=00010048 ebx=0019fd70 ecx=0019eba8 edx=00000010 esi=0019eb90 edi=00000001
    eip=6c8af47a esp=0249c610 ebp=0249c6b4 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    mshtml!CTableLayout::CalculateMinMax+0x558:
    6c8af47a ff45ec          inc     dword ptr [ebp-14h]  ss:0023:0249c6a0=00000000
    0:004> 
    eax=00010048 ebx=0019fd70 ecx=0019eba8 edx=00000010 esi=0019eb90 edi=00000001
    eip=6c8af47d esp=0249c610 ebp=0249c6b4 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    mshtml!CTableLayout::CalculateMinMax+0x55b:
    6c8af47d 8b45ec          mov     eax,dword ptr [ebp-14h] ss:0023:0249c6a0=00000001
    0:004> 
    eax=00000001 ebx=0019fd70 ecx=0019eba8 edx=00000010 esi=0019eb90 edi=00000001
    eip=6c8af480 esp=0249c610 ebp=0249c6b4 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    mshtml!CTableLayout::CalculateMinMax+0x55e:
    6c8af480 8345dc1c        add     dword ptr [ebp-24h],1Ch ss:0023:0249c690=00000000
    0:004> 
    eax=00000001 ebx=0019fd70 ecx=0019eba8 edx=00000010 esi=0019eb90 edi=00000001
    eip=6c8af484 esp=0249c610 ebp=0249c6b4 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    mshtml!CTableLayout::CalculateMinMax+0x562:
    6c8af484 3b4510          cmp     eax,dword ptr [ebp+10h] ss:0023:0249c6c4=00000006
    0:004> dd ebp-30h
    0249c684  00001004 00000000 0019eb90 0000001c
    0249c694  00000000 00000000 00000000 00000001
    0249c6a4  00000000 00001004 00000000 00000000
    0249c6b4  0249c8d0 6c71a6b8 00000006 0249c948
    0249c6c4  00000006 00000000 0019fd70 0019fd70
    0249c6d4  00000000 6d0c801a 000f6aa8 00000000
    0249c6e4  ffffffff 00000000 00000000 000fd790
    0249c6f4  00000000 00000000 ffffffff 00000000
可以看到出现了inc＋cmp组合，可以猜想这应该就是控制堆空间写入样式信息的循环了，这几条汇编指令的意思就是ebp-14h对应的值每次加1，即每次循环后递增，ebp-24h对应的值每次加0x1C，即每次加一个样式信息的字节数，最后当前的循环次数和ebp+10h对应的值比较，即span属性值。为了验证这个猜想我们多跟几次这个过程，可以发现事实确是如此。
好的，我们来看下通过js脚本动态更新span属性值后，也就是span值变为666时程序第二次在CTableLayout::CalculateMinMax函数入口断下后是个什么情形，理论上是要重新分配堆空间的，毕竟要多写入660个样式信息，而后再获取此时的span值作为循环控制次数，最后才向堆空间写入样式信息。我们来到程序此时断下来的地方，顺便看下之前确实是写入了6个样式信息：
    0:004> bl
     0 e 6c71a078     0001 (0001)  0:**** mshtml!CTableLayout::CalculateMinMax
     1 d 6c7cd7a5     0001 (0001)  0:**** mshtml!_HeapRealloc
     2 d 6c69a6cb     0001 (0001)  0:**** mshtml!CTableCol::GetAAspan
     3 d 0019eb90 w 1 0001 (0001)  0:**** 
    0:004> g
    Breakpoint 0 hit
    eax=ffffffff ebx=0019fd70 ecx=00402c02 edx=ffffffff esi=00000000 edi=0249c12c
    eip=6c71a078 esp=0249bed0 ebp=0249c0e8 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    mshtml!CTableLayout::CalculateMinMax:
    6c71a078 8bff            mov     edi,edi
    0:004> dd 0019eb90 L30
    0019eb90  00001004 00001004 00001004 00000000
    0019eba0  0065006c 002f0000 00010048 00001004
    0019ebb0  00001004 00001004 00000000 007a002f
    0019ebc0  00630040 00010048 00001004 00001004
    0019ebd0  00001004 00000000 007a002f 00630040
    0019ebe0  00010048 00001004 00001004 00001004
    0019ebf0  00000000 0019006c ad860000 00010048
    0019ec00  00001004 00001004 00001004 00000000
    0019ec10  05000005 00009841 00010048 00001004
    0019ec20  00001004 00001004 00000000 00000000
    0019ec30  00000000 00010048 2773a3b8 0c009846
    0019ec40  00000000 001410a0 005c0044 00002001
继续往下应该是要分配堆空间了：
    0:004> be 1 2
    0:004> bl
     0 e 6c71a078     0001 (0001)  0:**** mshtml!CTableLayout::CalculateMinMax
     1 e 6c7cd7a5     0001 (0001)  0:**** mshtml!_HeapRealloc
     2 e 6c69a6cb     0001 (0001)  0:**** mshtml!CTableCol::GetAAspan
     3 d 0019eb90 w 1 0001 (0001)  0:**** 
    0:004> g
    Breakpoint 2 hit
    eax=00183570 ebx=0019fd70 ecx=00000033 edx=00000006 esi=0019ec38 edi=00183570
    eip=6c69a6cb esp=0249be24 ebp=0249becc iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    mshtml!CTableCol::GetAAspan:
    6c69a6cb 8bff            mov     edi,edi
    0:004> gu
    eax=0000029a ebx=0019fd70 ecx=00000002 edx=00148528 esi=0019ec38 edi=00183570
    eip=6c8af31f esp=0249be28 ebp=0249becc iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    mshtml!CTableLayout::CalculateMinMax+0x3ac:
    6c8af31f 3de8030000      cmp     eax,3E8h
但我们却发现程序跳过了分配堆空间的过程，错误的认为之前分配的空间已经足够而转去直接获取控制循环次数的span属性值eax，即0x29a＝666。
接下来和前面一样是写入样式信息的过程，不过这次是对只能容纳6个样式信息的堆空间写入了666个样式信息，从而引发了堆溢出错误：
    0:004> bl
     0 e 6c71a078     0001 (0001)  0:**** mshtml!CTableLayout::CalculateMinMax
     1 d 6c7cd7a5     0001 (0001)  0:**** mshtml!_HeapRealloc
     2 d 6c69a6cb     0001 (0001)  0:**** mshtml!CTableCol::GetAAspan
     3 e 0019eb90 w 1 0001 (0001)  0:**** 
    0:004> g
    Breakpoint 3 hit
    eax=04141148 ebx=00414114 ecx=0019eba8 edx=00004141 esi=0019eb90 edi=0019eba8
    eip=6ca40a49 esp=0249be0c ebp=0249be14 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    mshtml!CTableColCalc::AdjustForCol+0x2f:
    6ca40a49 eb2a            jmp     mshtml!CTableColCalc::AdjustForCol+0x5b (6ca40a75)
    ......//一直单步过
    0:004> 
    eax=00000001 ebx=0019fd70 ecx=0019eba8 edx=00004141 esi=0019eb90 edi=00000001
    eip=6c8af484 esp=0249be28 ebp=0249becc iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    mshtml!CTableLayout::CalculateMinMax+0x562:
    6c8af484 3b4510          cmp     eax,dword ptr [ebp+10h] ss:0023:0249bedc=0000029a
    0:004> dd ebp-30h
    0249be9c  00414114 00000000 0019eb90 0000001c
    0249beac  00000000 00000000 00000000 00000001
    0249bebc  00000000 00414114 00000000 00000000
    0249becc  0249c0e8 6c71a6b8 00000006 0249c160
    0249bedc  0000029a 00000000 0019fd70 0019fd70
    0249beec  6c7c78ad 6cb4b03c 001be050 00000000
    0249befc  ffffffff 00000000 77502fe7 750c0282
    0249bf0c  00000000 00000000 ffffffff 00000000
    0:004> bp 6c8af484 ".if(poi(0249beb8)=29a){}.else{gc}"
    0:004> g
    eax=0000029a ebx=0019fd70 ecx=001A3464 edx=00004141 esi=001A344C edi=00000001
    eip=6c8af484 esp=0249be28 ebp=0249becc iopl=0         nv up ei pl nz ac pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000216
    mshtml!CTableLayout::CalculateMinMax+0x562:
    6c8af484 3b4510          cmp     eax,dword ptr [ebp+10h] ss:0023:0249bedc=0000029a
    0:004> dd ebp-30h
    0249be9c  00414114 00000000 001A344C 000048d8
    0249beac  00000000 00000000 00000000 0000029a
    0249bebc  00000000 00414114 00000000 00000000
    0249becc  0249c0e8 6c71a6b8 00000006 0249c160
    0249bedc  0000029a 00000000 0019fd70 0019fd70
    0249beec  6c7c78ad 6cb4b03c 001be050 00000000
    0249befc  ffffffff 00000000 77502fe7 750c0282
    0249bf0c  00000000 00000000 ffffffff 00000000
可以看到ebp+10h对应此时的span属性值0x29a，所以程序最终将会执行666次循环。堆溢出发生后程序继续运行会造成内存访问违规，从而导致IE浏览器的崩溃。
本文内容比较基础，有兴趣的可以动手操作一遍，漏洞的利用部分我们将在下篇文章中介绍，敬请期待。
### 0x04 参考
(Web Archive)  
* * *