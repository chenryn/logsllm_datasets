## Page 333
在本节中，我们将定义和调用 `templates.cfg` 文件中的配置项。首先，我们通过引用 `local-service` 来定义一个服务：

```cfg
define service {
    use                     local-service
}
```

接下来，通过引用 `linux-server` 模板来定义主机的检查周期、频率及通知时间段：

```cfg
[root@nagios ~]# vim /usr/local/nagios/etc/objects/localhost.cfg
```

此命令用于修改本地服务器资源监控的配置文件（`localhost.cfg`）。

然后，设置报警时间为全天候（7x24小时），通过编辑时间定义配置文件 (`timeperiods.cfg`) 完成：

```cfg
[root@nagios ~]# vim /usr/local/nagios/etc/objects/timeperiods.cfg
define timeperiod {
    alias                   24 Hours A Day, 7 Days A Week
    sunday                  00:00-24:00
    monday                  00:00-24:00
    tuesday                 00:00-24:00
    wednesday               00:00-24:00
    thursday                00:00-24:00
    friday                  00:00-24:00
    saturday                00:00-24:00
}
```

此外，还定义了几个服务及其相关属性，例如HTTP服务和PING测试等。
---

## Page 334
为了实现NRPE远程监控，需先调整允许访问的主机列表，并在 `nrpe.cfg` 中定义具体监控指令：

```cfg
[root@nagios ~]# vim /usr/local/nagios/etc/nrpe.cfg
allowed_hosts=127.0.0.1,192.168.0.10
command[check_users]=/usr/local/nagios/libexec/check_users -w 5 -c 10
...
```

模板文件 (`templates.cfg`) 包含了通用主机和服务联系人定义，这些定义被其他配置文件所引用。如 `generic-host`, `generic-contact` 等，提供了基本的通知选项与事件处理器设置。

示例配置如下所示：

```cfg
define host {
    name                    generic-host
    register                0
    notifications_enabled   1
    eventhandler_enabled    1
    flap_detection_enabled  1
    process_perf_data       1
    retain_nonstatus_information  1
    retain_status_information     1
}

define contact {
    name                    generic-contact
    service_notification_period 24x7
    host_notification_period    24x7
    service_notification_options w,u,c,r,f,s
    host_notification_options   d,r,u,f,s
    service_notification_commands notify-service-by-email
    host_notification_commands   notify-host-by-email
}
```
---

## Page 335
创建用于监控远程服务器的配置文件 `web1.cfg` 和 `web2.cfg`。这里以 `web1.cfg` 为例展示如何配置远程主机及其服务：

```cfg
[root@nagios ~]# vim /usr/local/nagios/etc/objects/web1.cfg

define host {
    use                     linux-server
    host_name               web1
    alias                   webl.example.com
    address                 192.168.0.104
}

define service {
    use                     generic-service
    host_name               web1
    service_description     PING
    check_command           check_ping!100.0,20%!500.0,60%
}

define service {
    use                     generic-service
    host_name               web1
    service_description     Sys_Load
    check_command           check_nrpe!check_load
}

define service {
    use                     generic-service
    host_name               web1
    service_description     Current Users
    check_command           check_nrpe!check_users
}
```

请确保被监控端也已正确安装并配置好 `nagios-plugin` 和 `nrpe` 软件包。
---

## Page 336 & 337
对于客户端（被监控端）上的软件安装过程，请参照以下步骤执行：

1. 下载并解压所需软件包：
   ```bash
   [root@webl ~]# wget http://prdownloads.sourceforge.net/sourceforge/nagiosplug/nagios-plugins-1.4.16.tar.gz
   [root@webl ~]# tar -xzf nagios-plugins-1.4.16.tar.gz -C /usr/src/
   ```

2. 编译安装插件：
   ```bash
   [root@webl ~]# cd /usr/src/nagios-plugins-1.4.16/
   [root@webl nagios-plugins-1.4.16]# ./configure
   [root@webl nagios-plugins-1.4.16]# make
   [root@webl nagios-plugins-1.4.16]# make install
   ```

3. 配置 NRPE 并重启服务：
   ```bash
   [root@webl ~]# vim /usr/local/nagios/etc/nrpe.cfg
   # 添加或修改相应命令
   ...
   [root@webl ~]# /etc/init.d/nagios restart
   ```

完成以上配置后，可以通过浏览器访问Nagios Web界面来查看当前监控状态。
---

## Page 338 & 339
### 第六章：iptables防火墙简介

Linux中的防火墙系统主要由两部分组成：内核级别的 `netfilter` 和用户空间工具 `iptables`。其中，`netfilter` 提供了一组钩子函数，使得开发者可以在数据包处理流程的不同阶段插入自定义逻辑；而 `iptables` 则是用户用来管理这些规则集的命令行接口。

#### iptables 基本概念

- **表 (Tables)**: 如 `filter`, `nat`, `mangle` 等，每种表负责不同类型的数据处理任务。
- **链 (Chains)**: 数据包经过的一系列检查点，常见的有 `INPUT`, `OUTPUT`, `FORWARD`, `PREROUTING` 和 `POSTROUTING`。

使用 `iptables` 命令可以轻松地向这些链中添加或删除规则。例如，要阻止所有来自特定IP地址的入站连接，可以这样操作：

```bash
iptables -A INPUT -s <恶意IP> -j DROP
```

更多关于iptables的具体应用将在后续章节中详细介绍。
---