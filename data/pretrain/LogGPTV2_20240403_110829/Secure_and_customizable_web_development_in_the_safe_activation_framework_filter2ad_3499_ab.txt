13
14
15
16
17
18
19
20
21
22 
23
24 
25
26
27
28 
” q u e r y : INSERT INTO g r o u p s VALUES ( ’ $#g t i t l e ’ , $ u s e r I D ) ”>
Figure 1: HTML buttons with concrete DB queries.
request and generates a database query for which SAFE au-
tomatically veriﬁes various safety and security properties.
These include checks for state consistency, access control,
and prevention of code injection. After the query has been
executed, SAFE automatically triggers all f-units in the ac-
tivation tree which have an out-dated state. These f-units
are immediately rebuilt and refreshed at the client. The
shared application state is automatically synchronized with
all connected clients.
SAFE completely alleviates the developer of an f-unit F
from caring about the freshness of its state while F is up-
dating parts of the application state. Moreover, the devel-
oper does not have to provide code for partial updates of any
f-units in the activation tree. The developer only speciﬁes
the update query that is supposed to be executed for some
event attached to an HTML element inside the f-unit. We
will see examples in Section 3.
3. SAFE DEMONSTRATION
We have chosen two demonstration features which nicely
show how eﬃciently and securely the speciﬁcations in SAFE
are translated to full-ﬂedged Web applications.
3.1 Sandboxing for f-units and users
A new and un-published feature we show in our demonstra-
tion is how SAFE provides two independent kinds of data
separation: every f-unit has its own database tables, which
can only be accessed by the f-unit itself; and every user
has its own data domain, in which only the user herself can
modify data. Dually, SAFE provides mechanisms for data
sharing: f-units can be wired together and user data can be
aggregated and delegated.
3.2 Declarative and secure speciﬁcations
We present various new declarative speciﬁcations of diﬀer-
ent functionality and show the result of the compilation of
these speciﬁcations using the SAFE compiler. The code for
our test case applications generated by the compiler has an
average blow-up factor of 10.57 compared to the size of the
user-speciﬁed code. The generated code contains various
new consistency and security checks which we believe a user
would have to write manually in order to produce Web ap-
plications of comparable (high) quality.
1342As an example, we consider the simple speciﬁcation of
HTML buttons that are linked with the secure execution
of database queries. The code snippet in Figure 1 shows
the corresponding HTML-like speciﬁcation in the SFW lan-
guage. The code is taken from an f-unit to administrate
groups in a social network application. The parts colored in
blue are SFW-speciﬁc deviations from standard HTML. The
code shows a list of groups whose entries are extracted from
the SELECT query as speciﬁed in the  tag in line 4.
The query selects four data ﬁelds each of which is available
in the subsequent scope via the SFW syntax $$ﬁeld , e.g.,
$$name in line 6, or $$ismember in the  tag in line 8.
The content inside the  block is “executed” (or more
precisely: displayed) in the HTML document once for every
result tuple of the query execution. Depending on the values
of $$ismember and $$isowner, the buttons to join (line 13),
to leave (line 9), and to remove a group (line 18) are dis-
played.
In the following, we will focus on the button to
create a new group (line 26).
Instead of specifying a JavaScript function for the onclick
event of a button, the developer simply speciﬁes the actual
database query to be executed. The query for the button
in line 26 inserts two values in the speciﬁed table. The ﬁrst
value is the user input as speciﬁed in the form. SFW oﬀers
the syntactic placeholder $#gtitle to represent the value en-
tered in the HTML input element named gtitle . The second
value $userID is a dynamic value which is no direct user in-
put, but a standard PHP variable. All such dynamic values
occurring in the query need special attention: dynamic val-
ues must also be contained in the corresponding form in the
HTML document (in order to ensure the dynamically eval-
uated values end indeed up in the query). However, such
dynamic values cannot simply appear in the DOM tree in
plaintext since a malicious client could easily modify these
values, for instance by replacing the user ID Alice by the
user ID Eve. We demonstrate how SAFE automatically en-
sures the integrity and conﬁdentiality of dynamic values by
new suitable security mechanisms.
The treatment of dynamic values is just one point on the
list of tasks a traditional Web developer would have to take
care of. We demonstrate and justify the blow-up factor of
roughly 10 after compilation, for which the following (in-
complete) list gives an intuition for the workload in case of
a traditional hand-written database update procedure:
1. Create a regular HTML form inside the current HTML docu-
ment. The protocol (GET, POST, etc.) and the recipient have
to be suitably speciﬁed.
2. Create a PHP ﬁle to answer the submitted form and mention
the URI of the ﬁle in the form.
3. In the PHP ﬁle, authenticate yourself at the database and es-
tablish a secure connection.
4. For each variable transmitted via the form, escape special char-
acters to prevent SQL injection attacks.
5. Insert escaped values in the query.
6. Verify that the authenticated user of the application has suﬃ-
cient permission to execute the query with the current values.
7. Verify that the query can be executed in terms of data con-
sistency, i.e., has the query been issued from a state which is
suﬃciently fresh?
8. Send query to the database for execution.
9. Process the result, output a status message, and refresh parts of
the Web application. Here, it will be necessary to determine the
parts of the Web application which must be updated. Hence,
all relevant dependencies must be derived.
10. Specify event-driven AJAX code to send the form values to the
PHP handler, and to receive the data updates for all corre-
sponding elements in the DOM tree.
11. Implement a comprehensive error handling which takes into ac-
count all possible kinds of errors (database connection errors,
Figure 2: Functional extensions: (left) incremental
search engine, and (right) navigation via tabs.
query execution errors, invalid values, etc.). This error han-
dling has to be speciﬁed at all tiers; hence in PHP, JavaScript,
and possibly also at the database.
We demonstrate how the state update mechanisms of SAFE
implement a superset of the above steps and thereby signiﬁ-
cantly reduce the burden of the developer down to a concise
declarative speciﬁcation as simple as the one shown in Fig-
ure 1. We discuss the compiled code (roughly 248 LOC) for
the example in Figure 1 in the demonstration.
3.3 Customization
In the landscape of application ecosystems, today’s Web 2.0
users wish to personalize not only their browsers with var-
ious extensions or their smartphones with various applica-
tions, but also the various extensions and applications them-
selves. This next generation of platform-independent Web
applications is expected to be customizable not only in style
(how they are displayed), but also extensible in functionality
(what application logic is exposed).
The key to success in SAFE is the encapsulation of func-
tionality within f-units: Every f-unit bundles the code for
all tiers (PHP server code, HTML client code, JavaScript
client code, CSS client code). We demonstrate the complex
integration of a fresh f-unit into an application. We show
how the SAFE tool suite easily manages the f-units for our
social network application (Figure 2).
Moreover, we demonstrate how SAFE addresses the need
for comprehensive personalization and thereby provides var-
ious security guarantees. We show how to securely extend
an existing social network application in two ways: First, we
demonstrate how new functionality is added to an existing
application. This new functionality constitutes an incre-
mental search engine (Figure 2 left), and as such, it must
be integrated deeply into the system. The search engine
shall provide the user with a comfortable experience, and
hence contains a lot of reactive JavaScript code. Moreover,
the search engine needs constraint access to the database
with access control policies and a clear description of which
ﬁelds shall be searched. Finally, the search results have to
be presented in a structured and formatted way using PHP,
HTML, and CSS. Second, we show how to change the navi-
gation inside the social network: the scrolling navigation is
turned into a navigation using tabs (Figure 2 right).
4. REFERENCES
[1] R. M. Reischuk. The oﬃcial SAFE user manual.
http://www.safe-activation.org/, 2013.
[2] R. M. Reischuk, M. Backes, and J. Gehrke. SAFE
extensibility for data-driven web applications. In
WWW ’12, Lyon, France, 2012.
1343