variants using CBC mode or those with unusual ciphers such as Camellia (the Japa-
nese equivalent of AES); you should generally avoid these in IoT applications.
Listing 12.12
Enabling raw PSK cipher suites
Table 12.2
Raw PSK cipher suites
Cipher suite
Description
TLS_PSK_WITH_AES_128_CCM
AES in CCM mode with a 128-bit key and 128-bit 
authentication tag
TLS_PSK_WITH_AES_128_CCM_8
AES in CCM mode with 128-bit keys and 64-bit 
authentication tags
TLS_PSK_WITH_AES_256_CCM
AES in CCM mode with 256-bit keys and 128-bit 
authentication tags
TLS_PSK_WITH_AES_256_CCM_8
AES in CCM mode with 256-bit keys and 64-bit 
authentication tags
TLS_PSK_WITH_AES_128_GCM_SHA256
AES in GCM mode with 128-bit keys
TLS_PSK_WITH_AES_256_GCM_SHA384
AES in GCM mode with 256-bit keys
TLS_PSK_WITH_CHACHA20_POLY1305_SHA256
ChaCha20-Poly1305 with 256-bit keys
Override the 
getSupportedCipherSuites 
method to return raw 
PSK suites.
465
Pre-shared keys
12.2.4 PSK with forward secrecy
I mentioned in section 12.1.3 that the raw PSK cipher suites lack forward secrecy: if
the PSK is compromised, then all previously captured traffic can be easily decrypted.
If confidentiality of data is important to your application and your devices can support
a limited amount of public key cryptography, you can opt for PSK cipher suites com-
bined with ephemeral Diffie-Hellman key agreement to ensure forward secrecy. In
these cipher suites, authentication of the client and server is still guaranteed by the
PSK, but both parties generate random public-private key-pairs and swap the public
keys during the handshake, as shown in figure 12.6. The output of a Diffie-Hellman
key agreement between each side’s ephemeral private key and the other party’s
ephemeral public key is then mixed into the derivation of the session keys. The magic
of Diffie-Hellman ensures that the session keys can’t be recovered by an attacker that
observes the handshake messages, even if they later recover the PSK. The ephemeral
private keys are scrubbed from memory as soon as the handshake completes.
The client and server share the
same pre-shared key (PSK).
Client
Server
PSK
Ephemeral
key pair
PSK
Ephemeral
key pair
ClientHello
ServerHello
ServerKeyExchange:
- PSK ID hint
- Ephemeral PK
ClientKeyExchange:
- PSK ID
- Ephemeral PK
Each side generates a fresh
random ephemeral key pair
for each connection.
The ephemeral public keys
are exchanged during the
handshake in KeyExchange
messages along with the ID
of the PSK.
Figure 12.6
PSK cipher suites with forward secrecy use ephemeral key pairs 
in addition to the PSK. The client and server swap ephemeral public keys in 
key exchange messages during the TLS handshake. A Diffie-Hellman key 
agreement is then performed between each side’s ephemeral private key and 
the received ephemeral public key, which produces an identical secret value 
that is then mixed into the TLS key derivation process.
466
CHAPTER 12
Securing IoT communications
Table 12.3 shows some recommended PSK cipher suites for TLS or DTLS 1.2 that pro-
vide forward secrecy. The ephemeral Diffie-Hellman keys can be based on either the
original finite-field Diffie-Hellman, in which case the suite names contain DHE, or on
elliptic curve Diffie-Hellman, in which case they contain ECDHE. In general, the
ECDHE variants are better-suited to constrained devices because secure parameters
for DHE require large key sizes of 2048 bits or more. The newer X25519 elliptic curve
is efficient and secure when implemented in software, but it has only recently been
standardized for use in TLS 1.3.6 The secp256r1 curve (also known as prime256v1 or
P-256) is commonly implemented by low-cost secure element microchips and is a rea-
sonable choice too.
Custom protocols and the Noise protocol framework
Although for most IoT applications TLS or DTLS should be perfectly adequate for your
needs, you may feel tempted to design your own cryptographic protocol that is a cus-
tom fit for your application. This is almost always a mistake, because even experi-
enced cryptographers have made serious mistakes when designing protocols.
Despite this widely repeated advice, many custom IoT security protocols have been
developed, and new ones continue to be made. If you feel that you must develop a
custom protocol for your application and can’t use TLS or DTLS, the Noise protocol
framework (https://noiseprotocol.org) can be used as a starting point. Noise describes
how to construct a secure protocol from a few basic building blocks and describes a
variety of handshakes that achieve different security goals. Most importantly, Noise
is designed and reviewed by experts and has been used in real-world applications,
such as the WireGuard VPN protocol (https://www.wireguard.com).
6 Support for X25519 has also been added to TLS 1.2 and earlier in a subsequent update; see https://tools
.ietf.org/html/rfc8422.
Table 12.3
PSK cipher suites with forward secrecy
Cipher suite
Description
TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256
PSK with ECDHE followed by AES-CCM 
with 128-bit keys and 128-bit authentica-
tion tags. SHA-256 is used for key deriva-
tion and handshake authentication.
TLS_DHE_PSK_WITH_AES_128_CCM
PSK with DHE followed by AES-CCM with 
either 128-bit or 256-bit keys. These also 
use SHA-256 for key derivation and hand-
shake authentication.
TLS_DHE_PSK_WITH_AES_256_CCM
TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256
PSK with either DHE or ECDHE followed 
by ChaCha20-Poly1305.
TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256
467
End-to-end security
All of the CCM cipher suites also come in a CCM_8 variant that uses a short 64-bit
authentication tag. As previously discussed, these variants should only be used if you
need to save every byte of network use and you are confident that you have alternative
measures in place to ensure authenticity of network traffic. AES-GCM is also sup-
ported by PSK cipher suites, but I would not recommend it in constrained environ-
ments due to the increased risk of accidental nonce reuse.
12.3
End-to-end security
TLS and DTLS provide excellent security when an API client can talk directly to the
server. However, as mentioned in the introduction to section 12.1, in a typical IoT
application messages may travel over multiple different protocols. For example, sen-
sor data produced by devices may be sent over low-power wireless networks to a local
gateway, which then puts them onto a MQTT message queue for transmission to
another service, which aggregates the data and performs a HTTP POST request to a
cloud REST API for analysis and storage. Although each hop on this journey can be
secured using TLS, messages are available unencrypted while being processed at the
intermediate nodes. This makes these intermediate nodes an attractive target for
attackers because, once compromised, they can view and manipulate all data flowing
through that device.
 The solution is to provide end-to-end security of all data, independent of the trans-
port layer security. Rather than relying on the transport protocol to provide encryp-
tion and authentication, the message itself is encrypted and authenticated. For
example, an API that expects requests with a JSON payload (or an efficient binary
alternative) can be adapted to accept data that has been encrypted with an authenti-
cated encryption algorithm, which it then manually decrypts and verifies as shown in
figure 12.7. This ensures that an API request encrypted by the original client can only
be decrypted by the destination API, no matter how many different network protocols
are used to transport the request from the client to its destination.
Pop quiz
3
True or False: PSK cipher suites without forward secrecy derive the same encryp-
tion keys for every session.
4
Which one of the following cryptographic primitives is used to ensure forward
secrecy in PSK cipher suites that support this?
a
RSA encryption
b
RSA signatures
c
HKDF key derivation
d
Diffie-Hellman key agreement
e
Elliptic curve digital signatures
The answers are at the end of the chapter.
468
CHAPTER 12
Securing IoT communications
NOTE
End-to-end security is not a replacement for transport layer security.
Transport protocol messages contain headers and other details that are not
protected by end-to-end encryption or authentication. You should aim to
include security at both layers of your architecture.
End-to-end security involves more than simply encrypting and decrypting data pack-
ets. Secure transport protocols, such as TLS, also ensure that both parties are ade-
quately authenticated, and that data packets cannot be reordered or replayed. In the
next few sections you’ll see how to ensure the same protections are provided when
using end-to-end security.
12.3.1 COSE
If you wanted to ensure end-to-end security of requests to a regular JSON-based REST
API, you might be tempted to look at the JOSE (JSON Object Signing and Encryp-
tion) standards discussed in chapter 6. For IoT applications, JSON is often replaced by
more efficient binary encodings that make better use of constrained memory and net-
work bandwidth and that have compact software implementations. For example,
numeric data such as sensor readings is typically encoded as decimal strings in JSON,
with only 10 possible values for each byte, which is wasteful compared to a packed
binary encoding of the same data. 
Device
Gateway
Gateway
Cloud
API
BLE
MQTT
HTTP
…
…
Device requests are individually encrypted and
authenticated, creating a message envelope.
The encrypted request
passes through gateways
without being decrypted.
Gateways can still translate
the unencrypted transport
protocol headers.
The target API decrypts and
validates the received message to
retrieve the original API request.
Figure 12.7
In end-to-end security, API requests are individually encrypted and 
authenticated by the client device. These encrypted requests can then traverse 
multiple transport protocols without being decrypted. The API can then decrypt the 
request and verify it hasn’t been tampered with before processing the API request.
469
End-to-end security
 Several binary alternatives to JSON have become popular in recent years to over-
come these problems. One popular choice is Concise Binary Object Representation
(CBOR), which provides a compact binary format that roughly follows the same model
as JSON, providing support for objects consisting of key-value fields, arrays, text and
binary strings, and integer and floating-point numbers. Like JSON, CBOR can be
parsed and processed without a schema. On top of CBOR, the CBOR Object Signing
and Encryption (COSE; https://tools.ietf.org/html/rfc8152) standards provide simi-
lar cryptographic capabilities as JOSE does for JSON.
DEFINITION
CBOR (Concise Binary Object Representation) is a binary alterna-
tive to JSON. COSE (CBOR Object Signing and Encryption) provides encryp-
tion and digital signature capabilities for CBOR and is loosely based on JOSE.
Although COSE is loosely based on JOSE, it has diverged quite a lot, both in the algo-
rithms supported and in how messages are formatted. For example, in JOSE symmet-
ric MAC, algorithms like HMAC are part of JWS (JSON Web Signatures) and treated
as equivalent to public key signature algorithms. In COSE, MACs are treated more
like authenticated encryption algorithms, allowing the same key agreement and key
wrapping algorithms to be used to transmit a per-message MAC key.
 In terms of algorithms, COSE supports many of the same algorithms as JOSE, and
adds additional algorithms that are more suited to constrained devices, such as AES-
CCM and ChaCha20-Poly1305 for authenticated encryption, and truncated version of
HMAC-SHA-256 that produces a smaller 64-bit authentication tag. It also removes
some algorithms with perceived weaknesses, such as RSA with PKCS#1 v1.5 padding
and AES in CBC mode with a separate HMAC tag. Unfortunately, dropping support for
CBC mode means that all of the COSE authenticated encryption algorithms require
nonces that are too small to generate randomly. This is a problem, because when
implementing end-to-end encryption, there are no session keys or record sequence
numbers that can be used to safely implement a deterministic nonce.
 Thankfully, COSE has a solution in the form of HKDF (hash-based key derivation
function) that you used in chapter 11. Rather than using a key to directly encrypt a
message, you can instead use the key along with a random nonce to derive a unique
key for every message. Because nonce reuse problems only occur if you reuse a
nonce with the same key, this reduces the risk of accidental nonce reuse consider-
ably, assuming that your devices have access to an adequate source of random data
(see section 12.3.2 if they don’t).
 To demonstrate the use of COSE for encrypting messages, you can use the Java ref-
erence implementation from the COSE working group. Open the pom.xml file in
your editor and add the following lines to the dependencies section:7
7 The author of the reference implementation, Jim Schaad, also runs a winery named August Cellars in Oregon
if you are wondering about the domain name.
470
CHAPTER 12
Securing IoT communications
      com.augustcellars.cose
      cose-java
      1.1.0
Listing 12.13 shows an example of encrypting a message with COSE using HKDF to
derive a unique key for the message and AES-CCM with a 128-bit key for the message
encryption, which requires installing Bouncy Castle as a cryptography provider. For
this example, you can reuse the PSK from the examples in section 12.2.1. COSE
requires a Recipient object to be created for each recipient of a message and the
HKDF algorithm is specified at this level. This allows different key derivation or wrap-
ping algorithms to be used for different recipients of the same message, but in this
example, there’s only a single recipient. The algorithm is specified by adding an attri-
bute to the recipient object. You should add these attributes to the PROTECTED header
region, to ensure they are authenticated. The random nonce is also added to the
recipient object, as the HKDF_Context_PartyU_nonce attribute; I’ll explain the PartyU
part shortly. You then create an EncryptMessage object and set some content for the
message. Here I’ve used a simple string, but you can also pass any array of bytes.
Finally, you specify the content encryption algorithm as an attribute of the message (a
variant of AES-CCM in this case) and then encrypt it.
Security.addProvider(new BouncyCastleProvider());     
var keyMaterial = PskServer.loadPsk("changeit".toCharArray());    
var recipient = new Recipient();                                
var keyData = CBORObject.NewMap()                               
        .Add(KeyKeys.KeyType.AsCBOR(), KeyKeys.KeyType_Octet)   
        .Add(KeyKeys.Octet_K.AsCBOR(), keyMaterial);            
recipient.SetKey(new OneKey(keyData));                          
recipient.addAttribute(HeaderKeys.Algorithm,     
        AlgorithmID.HKDF_HMAC_SHA_256.AsCBOR(),  
        Attribute.PROTECTED);                    
var nonce = new byte[16];                                     
new SecureRandom().nextBytes(nonce);                          
recipient.addAttribute(HeaderKeys.HKDF_Context_PartyU_nonce,  
        CBORObject.FromObject(nonce), Attribute.PROTECTED);   
var message = new EncryptMessage();               
message.SetContent("Hello, World!");              
message.addAttribute(HeaderKeys.Algorithm,        
        AlgorithmID.AES_CCM_16_128_128.AsCBOR(),  
        Attribute.PROTECTED);                     
message.addRecipient(recipient);                  
message.encrypt();                                                
System.out.println(Base64url.encode(message.EncodeToBytes()));    
Listing 12.13
Encrypting a message with COSE HKDF
Install Bouncy Castle to 
get AES-CCM support.
Load the key 
from the 
keystore.
Encode the key
as a COSE key
object and add
to the recipient.
The KDF algorithm is 
specified as an attribute 
of the recipient.
The nonce is
also set as an
attribute on
the recipient.
Create the message 
and specify the 
content encryption 
algorithm.
Encrypt the
message
and output
the encoded
result.
471
End-to-end security
The HKDF algorithm in COSE supports specifying several fields in addition to the
PartyU nonce, as shown in table 12.4, which allows the derived key to be bound to sev-
eral attributes, ensuring that distinct keys are derived for different uses. Each attribute
can be set for either Party U or Party V, which are just arbitrary names for the partici-
pants in a communication protocol. In COSE, the convention is that the sender of a
message is Party U and the recipient is Party V. By simply swapping the Party U and
Party V roles around, you can ensure that distinct keys are derived for each direction
of communication, which provides a useful protection against reflection attacks. Each
party can contribute a nonce to the KDF, as well as identity information and any other
contextual information. For example, if your API can receive many different types of
requests, you could include the request type in the context to ensure that different
keys are used for different types of requests.
DEFINITION
A reflection attack occurs when an attacker intercepts a message
from Alice to Bob and replays that message back to Alice. If symmetric mes-
sage authentication is used, Alice may be unable to distinguish this from a
genuine message from Bob. Using distinct keys for messages from Alice to
Bob than messages from Bob to Alice prevents these attacks.
HKDF context fields can either be explicitly communicated as part of the message, or
they can be agreed on by parties ahead of time and be included in the KDF computa-
tion without being included in the message. If a random nonce is used, then this obvi-
ously needs to be included in the message; otherwise, the other party won’t be able to
guess it. Because the fields are included in the key derivation process, there is no need
to separately authenticate them as part of the message: any attempt to tamper with
them will cause an incorrect key to be derived. For this reason, you can put them in an
UNPROTECTED header which is not protected by a MAC.
 Although HKDF is designed for use with hash-based MACs, COSE also defines a
variant of it that can use a MAC based on AES in CBC mode, known as HKDF-AES-
MAC (this possibility was explicitly discussed in Appendix D of the original HKDF pro-
posal, see https://eprint.iacr.org/2010/264.pdf). This eliminates the need for a hash
Table 12.4
COSE HKDF context fields
Field
Purpose
PartyU identity
An identifier for party U and V. This might be a username or domain name or some 
other application-specific identifier.
PartyV identity
PartyU nonce
Nonces contributed by either or both parties. These can be arbitrary random byte 
arrays or integers. Although these could be simple counters it’s best to generate them 
randomly in most cases.
PartyV nonce
PartyU other
Any application-specific additional context information that should be included in the 
key derivation.
PartyV other
472
CHAPTER 12
Securing IoT communications
function implementation, saving some code size on constrained devices. This can be