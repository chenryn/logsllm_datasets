                ipc_table_index_t request;  /* dead name request notify */
            } index;
        };
用一张书上的图，很清楚的表明了他们之间的关系。
#### 1.3.2 ipc_port
相对而言ipc_port的数据结构就较为简单了。在复制给`space`的`ie_object`之后，通过`ipc_port_init`函数的初始化，就完成了`port`的创建了。
    ipc_port_init(
        ipc_port_t      port,
        ipc_space_t     space,
        mach_port_name_t    name)
    {
        /* port->ip_kobject doesn't have to be initialized */
        port->ip_receiver = space;
        port->ip_receiver_name = name;
        port->ip_mscount = 0;
        port->ip_srights = 0;
        port->ip_sorights = 0;
        port->ip_nsrequest = IP_NULL;
        port->ip_pdrequest = IP_NULL;
        port->ip_requests = IPR_NULL;
        port->ip_premsg = IKM_NULL;
        port->ip_context = 0;
        port->ip_sprequests  = 0;
        port->ip_spimportant = 0;
        port->ip_impdonation = 0;
        port->ip_tempowner   = 0;
        port->ip_guarded      = 0;
        port->ip_strict_guard = 0;
        port->ip_impcount    = 0;
        port->ip_reserved    = 0;
        ipc_mqueue_init(&port->ip_messages,
                FALSE /* !set */, NULL /* no reserved link */);
    }
这里同样的用书上的一张图就可以很简单的解释清楚了。
## 0x02 POC的分析
​ POC原来的writeup在[这里](https://bugs.chromium.org/p/project-zero/issues/detail?id=959&can=1&q=apple&sort=-id)。
​ 原文已经解释的非常清楚了，我就不画蛇添足了。简单记录一下我自己在分析的过程中的一些问题。
### 2.1 port的user reference计数代表了什么？
​ 一个`port`的`user
reference`只表示了某个`entry`在`task`的`space`中被多少个地方使用，和`entry`实际指向哪个`port`没有关系。
​
### 2.2 ipc_right_dealloc函数是只释放了entry还是同时也在内存中释放了port？
​ `ipc_right_dealloc`函数相关部分源码如下：
    kern_return_t
    ipc_right_dealloc(
        ipc_space_t     space,
        mach_port_name_t    name,
        ipc_entry_t     entry)
    {
        ipc_port_t port = IP_NULL;
        ipc_entry_bits_t bits;
        mach_port_type_t type;
        bits = entry->ie_bits;
        type = IE_BITS_TYPE(bits);
        assert(is_active(space));
        switch (type) {
             [...]
            case MACH_PORT_TYPE_SEND: {
            [...]
            port = (ipc_port_t) entry->ie_object;
            [...]
             //如果在task内entry的reference已经为1了就
             //释放entry
             //如果计数不为1，就将计数减一
            if (IE_BITS_UREFS(bits) == 1) {
                if (--port->ip_srights == 0) {
                    nsrequest = port->ip_nsrequest;
                    if (nsrequest != IP_NULL) {
                        port->ip_nsrequest = IP_NULL;
                        mscount = port->ip_mscount;
                    }
                }
                [...]
                entry->ie_object = IO_NULL;
                ipc_entry_dealloc(space, name, entry);
                is_write_unlock(space);
                ip_release(port);
            } else {
                ip_unlock(port);            
                entry->ie_bits = bits-1; /* decrement urefs */
                ipc_entry_modified(space, name, entry);
                is_write_unlock(space);
            }
        [...]
        return KERN_SUCCESS;
    }
所以当`entry`计数为1的时候，调用了`ipc_entry_dealloc`，`ipc_entry_dealloc`不会将`entry`对应的内存释放，而是将其放入一个`free_list`等待重复使用。`entry`的内存不会释放，而且`entry`在`is_table`中的`index`也并不会改变，只是被放到了一个结构管理的队列中去了。
对于`Port`来说，内核调用了`ip_release`，这个函数的作用是减少`ipc_object`自身的`reference`，如果`port`的索引变为0了，那就会被释放，如果系统中还有其他的进程在使用这个`port`，那么这个`port`就不会被释放。
### 2.3 如何通过调试器调试漏洞触发的现场?
一开始我想的方法是对`ipc_right_copyout`下条件断点，条件是`entry->ie_bits&0xffff ==
0xfffe`。但是因为`ipc_right_copyout`这个函数在内核中的调用太过于频繁，导致虚拟机跑太卡了。
只能通过逆向，在汇编代码处下断点。（内核版本10.12_16A323）
对应的就是出bug的代码段。
               if (urefs+1 == MACH_PORT_UREFS_MAX) {
                    if (overflow) {
                        /* leave urefs pegged to maximum */     ip_srights--;
                        ip_unlock(port);
                        ip_release(port);
                        return KERN_SUCCESS;
                    }
                    ip_unlock(port);
                    return KERN_UREFS_OVERFLOW;
                }
所以通过断点
    b *(0xffffff80002e6fbb + kslide)
就可以得到漏洞触发时的情况。
### 2.4 port替换的原理是什么?
port是通过`port
name`在task中来获取的。在前文中提到，`namep`是通过函数`ipc_entry_alloc`来获取的。查看获取到`namep`的核心代码如下：
    kern_return_t
    ipc_entry_claim(
        ipc_space_t     space,
        mach_port_name_t    *namep,
        ipc_entry_t     *entryp)
    {
        ipc_entry_t entry;
        ipc_entry_t table;
        mach_port_index_t first_free;
        mach_port_gen_t gen;
        mach_port_name_t new_name;
        table = &space->is_table[0];
        first_free = table->ie_next;
        assert(first_free != 0);
        entry = &table[first_free];  //[1]
        table->ie_next = entry->ie_next;
        space->is_table_free--;
        assert(table->ie_next is_table_size);
        /*
         *  Initialize the new entry.  We need only
         *  increment the generation number and clear ie_request.
         */
        gen = IE_BITS_NEW_GEN(entry->ie_bits); //[2]
        entry->ie_bits = gen;
        entry->ie_request = IE_REQ_NONE;
        /*
         *  The new name can't be MACH_PORT_NULL because index
         *  is non-zero.  It can't be MACH_PORT_DEAD because
         *  the table isn't allowed to grow big enough.
         *  (See comment in ipc/ipc_table.h.)
         */
        new_name = MACH_PORT_MAKE(first_free, gen); //[3]
        assert(MACH_PORT_VALID(new_name));
        *namep = new_name;
        *entryp = entry;
        return KERN_SUCCESS;
    }
通过[1]可以看到，正如2.2节提到的一样，`entry`在`table`中的`index`是不变的。
通过[2]可以看到，每次使用`entry`来存放一个新`port`时，`gen`的值会加1。
通过[3]可以看到，`namep`就是通过这两个参数生成的。
因为`index`是不变的，所以在通过漏洞释放target_port之后，不断的对目标`entry`进行申请和释放，就可以通过整形溢出，使得`gen`变成和taget_port释放之前使用的entry相同。
那么就实现了在`port_name`不变的情况下替换了`port`的内核对象。
## 0x03 小结
通过CVE-2016-7637的分析和研究加深了对`port`这个数据结构的理解，并且通过对`poc`的分析，体现了一个`port`在单个`task`中的状态变化，实际上是`ipc_space`和`ipc_entry`状态变化。
接下来就要分析学习CVE-2016-7644，通过对CVE-2016-7644的分析学习，可以更加深入的理解port在内核中状态的变化。也就是`port`自身的`port->srights`和`io_reference`的状态变化及漏洞的利用。
## 参考
  1. 《Mac OS X Internals》
  2. [Broken kernel mach port name uref](https://bugs.chromium.org/p/project-zero/issues/detail?id=959&can=1&q=apple&sort=-id)
* * *