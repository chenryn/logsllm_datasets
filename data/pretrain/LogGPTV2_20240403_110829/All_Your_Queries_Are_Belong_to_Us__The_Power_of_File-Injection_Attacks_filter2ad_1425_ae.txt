1 = ri
3: k1 ← Recover(Ri
4: k2 ← Recover(Ri
5: Output (k1,k2).
Figure 11: Non-adaptive attack for a conjunctive query
involving two keywords.
to the previous attack, however, this attack does not al-
ways succeed.
Consider a conjunctive query q involving d keywords.
The basic idea is to inject n files, each containing L key-
words selected uniformly and independently from the
keyword universe.
If parameters are set appropriately,
the search result on q will include some of the injected
files with high probability. By definition, each of those
files contains all d keywords involved in the query, and
hence the intersection of those files also contains all
those keywords. We claim that when parameters are
set appropriately, the intersection contains no additional
keywords. Thus, the server recovers precisely the d key-
words involved in the query by simply taking the inter-
section of the injected files returned in response to the
query. The following theorem formalizes this idea.
Theorem 1. Let L = ( 1
2 )1/d|K| and n = (2 + ε)d log|K|
with ε ≥ 0. Then the success probability of the attack is
roughly e−1/|K|ε/4.
Proof. Fix some conjunctive query q involving d key-
words. The probability that any particular injected file
matches the query is approximately (L/|K|)d = 1/2
since each of the d keywords is included in the file with
USENIX Association  
25th USENIX Security Symposium  717
11
probability roughly L/|K|. Since each file is generated
independently, the expected number of files that match
the query is n/2; moreover, the number n(cid:30) of files that
match the query follows a binomial distribution and so
the Chernoff bound implies
Proceeding in this way, the server learns the lexicograph-
ically largest keyword using log|K| injected files. Once
that keyword kd is recovered, the server repeats this at-
tack but with kd always included in the injected files to
learn the next keyword, and so on. See Figure 12.
Let q be a conjunctive query with keyword k1, . . . ,k d.
Algorithm k ← Attack Conjunctive(q,K)
1: Initialize k = /0.
2: for i = d, . . . ,1 do
3:
4:
5:
Set Ki = K \ k, set b = |Ki|/2.
for j = 2, . . . ,log |Ki| do
Inject F that contains the first b keywords
in Ki and all keywords in k.
Let Rq be the search result of query q on F.
if Rq = 1 then
else
b = b−|Ki|/2 j.
b = b +|Ki|/2 j.
Inject F that contains the first b keywords in Ki
and all keywords in k.
Let Rq be the search result of query q on F.
if Rq = 1 then
Recover ki as the bth keyword in Ki.
Recover ki as the (b + 1)th keyword in Ki.
else
k = k∪{ki}.
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
Setting θ =
n
√n
ε√n
2(2+ε), we have
2 (cid:29) ≤ e−θ 2/2.
Pr(cid:31)(cid:30)(cid:30)(cid:30)n(cid:30) −
2(cid:30)(cid:30)(cid:30) ≥ θ
4(cid:26)d log|K|(cid:25) ≤ e− θ2
Pr(cid:28)n(cid:30) ≤(cid:27)1 +
ε
2 .
Thus, n(cid:30) > (1 + ε
ity.
4 )d log|K| with overwhelming probabil-
The probability that any other keyword is in all these
n(cid:30) files is extremely low. Specifically, for any fixed key-
word not involved in the query, the probability that it lies
in all n(cid:30) files is (L/|K|)n(cid:30). Thus, the probability that no
other keyword lies in all n(cid:30) files is
(cid:24)1−(cid:23) L
|K|(cid:22)n(cid:30)(cid:21)|K|−d
≈(cid:23)1−
1
|K|1+ε/4(cid:22)|K|
(assuming d (cid:24) |K|). The above simplifies to e−1/|K|ε/4.
Note that for any ε > 0 the bound given by the theorem
approaches 1 as |K| tends to infinity. We experimentally
verified the bound in the theorem for |K| = 5,000 and
d = 3. For example, setting ε = 1 we obtain an attack
in which the server injects n = 110 files with L = 3,969
keywords each, and recovers all keywords involved in
the conjunctive query with probability 0.97. For com-
pleteness, we remark that the server can tell whether it
correctly recovers all the keywords or not, assuming d is
known.
7.3 An Adaptive Attack
We can further reduce the number of injected files using
an adaptive attack. The idea is to recover the keywords
involved in the query one-by-one, starting with the lexi-
cographically largest, using an adaptive binary search for
each keyword. The server first injects a file containing
the first |K|/2 keywords. There are two possibilities:
1. If this file is in the search result for the query, the
server learns that all the keywords involved in the
query have index at most |K|/2. It will next inject a
file containing the first |K|/4 keywords.
2. If this file is not in the search result for the query, the
server learns that at least one keyword involved in
the query has index greater than |K|/2. It will next
inject a file containing the first 3|K|/4 keywords.
Figure 12: An adaptive attack for conjunctive queries in-
volving d keywords.
The number of injected files is d log|K|. We remark
that d need not be known in advance, since the attacker
can determine d during the course of the attack.
It is
also worth observing that the number of injected files is
essentially optimal for a deterministic attack with suc-
cess probability 1, because the search results on d log|K|
files contain at most d log|K| bits of information, which
is roughly the entropy of a conjunctive search involving
d keywords from a universe of size |K|.
8 Additional (Potential) Countermeasures
In this section, we briefly discuss some other potential
countermeasures against our attacks.
Semantic filtering. One may be tempted to think that the
files injected by our attacks will not “look like” normal
English text, and can therefore be filtered easily by the
client. We argue that such an approach is unlikely to pre-
vent our attacks. First, although as described our attacks
inject files containing arbitrary sets of keywords, the
718  25th USENIX Security Symposium 
USENIX Association
12
server actually has some flexibility in the choice of key-
words; e.g., the binary-search attack could be modified
to group sets of keywords that appear naturally together.
Second, within each injected file, the server can decide
the order and number of occurrences of the keywords,
can choose variants of the keywords (adding “-ed” or “-
s,” for example), and can freely include non-keywords
(“a,” “the,” etc.) There are several tools (e.g., [21]) that
can potentially be adapted to generate grammatically cor-
rect text from a given set of keywords by ordering key-
words based on n-grams trained from leaked files and
simple grammatical rules. A detailed exploration is be-
yond the scope of our paper.
Batching updates. As mentioned in Section 2, even if
the client shuffles the file identifiers and pads all files to
the same length, the server can identify an injected file
based on the time at which it is inserted by the client.
This suggests a (partial) countermeasure that can be used
in dynamic SE schemes that support updates: rather than
uploading each new file as it arrives, the client should
wait until there are several (say, B) new files and then
upload this “batch” of B files at once. Assuming only
one of those files was injected by the server, this means
the server only learns that the injected file corresponds to
one of B possibilities.
This countermeasure can be trivially circumvented if
the server can inject B files before any other new files ar-
rive. (If the server additionally has the ability to mount
chosen-query attacks—something we have not otherwise
considered in this paper—then the total number of in-
jected files remains the same.) Even if the server can in-
ject only B(cid:31) < B identical3 files into a single “batch,” the
server knows that if fewer than B(cid:31) files from this batch are
returned in response to some query, then the injected files
do not match that query. Finally, even if the server can
only inject a single file per “batch,” the server can inject
the same file repeatedly and with high confidence deter-
mine based on the search results whether the file matches
some query. We leave a more complete analysis of this
countermeasure for future work.
9 Conclusions
Our paper shows that file-injection attacks are devastat-
ing for query privacy in searchable encryption schemes
that leak file-access patterns. This calls into question
the utility of searchable encryption, and raises doubts
as to whether existing SE schemes represent a satisfac-
tory tradeoff between their efficiency and the leakage
they allow. Nevertheless, we briefly argue that search-
able encryption may still be useful in scenarios where
3The files need not be identical; they only need to contain an iden-
tical set of keywords.
file-injection attacks are not a concern, and then suggest
directions for future research.
We have argued that file-injection attacks would be
easy to carry out in the context of searching email. But
in “closed systems,” where a client is searching over
records generated via some other process, file-injection
attacks may not be possible or may be much more diffi-
cult to carry out. Additionally, there may be settings—
e.g., when all files have the same length because they
share some particular format—where even though the
server can inject files, it may not be able to associate
file identifiers with specific files it has injected.
It is
worth noting also that there may be applications of SE
in which the server is trusted (and so, in particular, can
be assumed not to carry out file-injection attacks), and
the threat being defended against is an external attacker
who compromises the server.4
Our work and previous work [10, 4] demonstrate that
leaking file-access patterns in their entirety is dangerous,
and can be exploited by an attacker to learn a signifi-
cant amount of sensitive information. We suggest, there-
fore, that future research on searchable encryption focus
on reducing or eliminating this leakage rather than ac-
cepting it as the default. Our work also highlights the
need to design efficient schemes satisfying forward pri-
vacy. Addressing these challenges may require exploring
new directions, such as interactive protocols [17] or mul-
tiple servers. It would also be of interest to explore lower
bounds on the efficiency that searchable encryption can
achieve as a function of how much about the file-access
pattern is leaked.
References
[1] Enron email dataset. https://www.cs.cmu.edu/~./enron/.
Accessed: 2015-12-14.
[2] Pmail. https://github.com/tonypr/Pmail, 2014.
[3] ADAMIC, L. A., AND HUBERMAN, B. A. Zipfs law and the
internet. Glottometrics 3, 1 (2002), 143–150.
[4] CASH, D., GRUBBS, P., PERRY, J., AND RISTENPART, T.
Leakage-abuse attacks against searchable encryption.
In Pro-
ceedings of the 22nd ACM SIGSAC Conference on Computer and
Communications Security (2015), ACM, pp. 668–679.
[5] CASH, D.,
J.,
JAEGER,
JARECKI, S.,
JUTLA, C. S.,
KRAWCZYK, H., ROSU, M.-C., AND STEINER, M. Dynamic
searchable encryption in very-large databases: Data structures
and implementation.
IACR Cryptology ePrint Archive 2014
(2014), 853.
[6] CASH, D., JARECKI, S., JUTLA, C., KRAWCZYK, H., ROS¸ U,
M.-C., AND STEINER, M. Highly-scalable searchable symmet-
ric encryption with support for boolean queries. In Advances in
Cryptology–CRYPTO 2013. Springer, 2013, pp. 353–373. Full
version available at http://eprint.iacr.org.
4Though even here one must be careful since an external attacker
might have the ability to inject files, and/or be able to learn file-
access patterns from the client-server communication (e.g., based on
file lengths) without compromising the server.
USENIX Association  
25th USENIX Security Symposium  719
13
[7] CHANG, Y.-C., AND MITZENMACHER, M. Privacy preserving
keyword searches on remote encrypted data. In Applied Cryptog-
raphy and Network Security (2005), Springer, pp. 442–455.
[8] CURTMOLA, R., GARAY, J., KAMARA, S., AND OSTROVSKY,
R. Searchable symmetric encryption: improved definitions and
efficient constructions. In Proceedings of the 13th ACM confer-
ence on Computer and communications security (2006), ACM,
pp. 79–88.
[9] GOH, E.-J., ET AL. Secure indexes.
Archive 2003 (2003), 216.
IACR Cryptology ePrint
[10] ISLAM, M. S., KUZU, M., AND KANTARCIOGLU, M. Access
pattern disclosure on searchable encryption: Ramification, attack
and mitigation. In 19th Annual Network and Distributed System
Security Symposium, NDSS 2012, San Diego, California, USA,
February 5-8, 2012 (2012).
[11] KAMARA, S., AND PAPAMANTHOU, C. Parallel and dynamic
searchable symmetric encryption. In Financial cryptography and
data security. Springer, 2013, pp. 258–274.
[12] KAMARA, S., PAPAMANTHOU, C., AND ROEDER, T. Dynamic
In the ACM Conference on
searchable symmetric encryption.
Computer and Communications Security, CCS’12, Raleigh, NC,
USA, October 16-18, 2012 (2012), pp. 965–976.
[13] LAU, B., CHUNG, S., SONG, C., JANG, Y., LEE, W., AND
BOLDYREVA, A. Mimesis aegis: A mimicry privacy shield–
a systems approach to data privacy on public cloud.
In 23rd
USENIX Security Symposium (USENIX Security 14) (2014),
pp. 33–48.
[14] LIU, C., ZHU, L., WANG, M., AND TAN, Y.-A. Search pattern
leakage in searchable encryption: Attacks and new construction.
Information Sciences 265 (2014), 176–188.
[15] NAVEED, M. The fallacy of composition of oblivious ram and
searchable encryption. Tech. rep., Cryptology ePrint Archive,
Report 2015/668, 2015.
[16] NAVEED, M., PRABHAKARAN, M., AND GUNTER, C. A. Dy-
namic searchable encryption via blind storage. In Security and
Privacy (SP), 2014 IEEE Symposium on (2014), IEEE, pp. 639–
654.
[17] POPA, R. A., LI, F. H., AND ZELDOVICH, N. An ideal-security
protocol for order-preserving encoding. In Security and Privacy
(SP), 2013 IEEE Symposium on (2013), IEEE, pp. 463–477.
[18] PORTER, M. F. An algorithm for suffix stripping. Program 14, 3
(1980), 130–137.
[19] SONG, D. X., WAGNER, D., AND PERRIG, A. Practical tech-
niques for searches on encrypted data. In Security and Privacy,
2000. S&P 2000. Proceedings. 2000 IEEE Symposium on (2000),
IEEE, pp. 44–55.
[20] STEFANOV, E., PAPAMANTHOU, C., AND SHI, E. Practical dy-
namic searchable encryption with small leakage. In NDSS (2014),
vol. 14, pp. 23–26.
[21] UCHIMOTO, K., ISAHARA, H., AND SEKINE, S. Text gener-
ation from keywords.
In Proceedings of the 19th international
conference on Computational linguistics-Volume 1 (2002), Asso-
ciation for Computational Linguistics, pp. 1–7.
720  25th USENIX Security Symposium 
USENIX Association
14