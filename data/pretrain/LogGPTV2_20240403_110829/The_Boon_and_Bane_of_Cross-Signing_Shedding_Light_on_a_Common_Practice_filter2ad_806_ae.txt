root store policy that relies on information in the not before field—
like the deprecation of SHA-1 signatures for new certificates [37].
Mozilla lists backdating as problematic practice [67] as backdating
can interfere with future policies (cf. not before rules, Section 5.1.1).
The USERTrust ECC Certification Authority root (valid since 2010)
was cross-signed by AddTrust External CA Root in 2013 [20] using
9Note that Thoma Bravo was not in control of Digicert and Entrust at the same time.
Thoma Bravo acquired Digicert in 2015, two years after selling Entrust to Datacard.
CCS ’20, November 9–13, 2020, Virtual Event, USA
Jens Hiller, Johanna Amann, and Oliver Hohlfeld
a not before date of 2000. Other cross-signs of the root use more
accurate times, e.g., a cross-sign by AAA Certificate Services in 2019.
We find further cross-signs by AddTrust which we believe to
be backdated as their not before date precedes that of the cross-
signed root by several years. We lack clear evidence, but signs
for a reoccurring backdating behavior of the CA are present: All
presumably backdated cross-signs are issued by AddTrust External
CA Root using not before dates from 2000 or 2010. Specifically, the
cross-signs of COMODO Certification Authority, COMODO ECC
Certification Authority COMODO RSA Certification Authority, and
USERTrust RSA Certification Authority list not before dates from
2000 whereas the corresponding roots list dates from 2006, 2008
and 2010. Cross-signs of the Network Solutions Certificate Authority,
a root created in 2006, list dates from 2000 and 2010.
Finally, we find StartCom to set not before to 2006 (correspond-
ing to the original root) when cross-signing StartCom Certification
Authority whereas the cross-signing StartCom Certificate Authority
G2 is valid only since 2010. This case is only a problematic practice
and no strict violation of the policy. However, it is noteworthy that
StartCom already backdated certificates long before the incidents
that led to the removal of trust in WoSign and StartCom. That deci-
sion was partly based on their violation of policies by backdating
certificates to circumvent SHA1 deprecation (cf. Section 5.1).
5.7.2 Missing Insight for Partly Disabled Comodo Root XS-Certs.
Comodo requested the exclusion of some root certificates from root
stores, but kept their cross-signs valid. Specifically, the root certifi-
cates of USERTrust UTN-USERFirst-Hardware and AddTrust Class 1
CA Root were removed from the root stores of Firefox and Android
in 2017 as they are no longer in use [16]. However, corresponding
cross-signs by UTN-USERFirst-Client Authentication and Email (also
trusted by Firefox and Android) have not been revoked as they
are still in use. Especially the USERTrust UTN-USERFirst-Hardware
cross-sign is still heavily used after the withdrawal of its root: We
find valid trust paths for 4,244,104 leaf and 276 CA certificates until
2020. We note that, from everything we can tell, this is—in this
case—desired behavior and not malicious. It shows, however, that it
is hard to tell for an outside observer if cross-signs just have been
forgotten - or are purposefully kept active.
The removal (and eventual revocation) of USERTrust UTN - DAT-
ACorp SGC is a counterexample. It was removed from Firefox and
Android root stores in 2015 due to a planned removal of public trust
by the owner [13, 14]. After additional request by the owner, the in-
termediates were revoked by adding them to Mozilla’s OneCRL [14].
The need for an additional request shows the complexity of revo-
cations in face of cross-signs. In our opinion, the original removal
request should already have raised questions on the revocation of
the cross-signs. Instead, this required an explicit additional request
by the owner—which only happened about 3 months later.
Takeaway: The backdating of certificates might be tempting, e.g.,
to match the validity periods of the original certificate. However, back-
dating is a problematic behavior that hides the issuance date of a
certificate without providing benefits. On top of this, cross-signing
adds a new problem: The legitimacy of an incomplete revocation is
hard to assess as corresponding information is typically unavailable.
To achieve transparency, evaluating cross-signs and requesting infor-
mation about them should be an integral part of revocation processing.
XS-Certs in the Wild – Summary: While cross-signing com-
plicates the PKI, CAs also use it to adopt more secure cryptography
while maintaining compatibility with legacy software. In the follow-
ing, we propose several changes with the goal of establishing secure
cross-signing practices and making cross-signs comprehensible.
6 DISCUSSION AND RECOMMENDATIONS
CAs depend on cross-signing. For example, the fast tremendous
success of Let’s Encrypt would not have been possible without
bootstrapping the CA through cross-signing, and also GoDaddy
started with a cross-sign. Cross-signing also enables CAs to issue
certificates with new, more secure cryptographic algorithms while
maintaining compatibility with legacy applications—as it happened
with the SHA1 to SHA256 transition. Cross-signing can be used to
increase root-store coverage by establishing paths to different root
stores—even in face of differing root store policies and resulting
diverging root store setups. Cross-signing can pro-actively set up
alternative trust paths based on other CA certificates such that end-
user certificates still validate. Thus, cross-signing is a beneficial
mechanism for the PKI ecosystem.
Yet, cross-signing complicates certificate handling and intro-
duces new problems, some concerning the management of cross-
signs. For an observer it is hard to tell if cross-signs intentionally
or unknowingly outlive CA owner-ship changes (see Section 5.6.1).
Problematic practices like backdating of certificates [67] further
complicate the assessment of existing cross-signs. The by most
important problem are undesired trust-paths caused by cross-signs.
While revocation of CA certificates already is a complicated process,
necessitating software updates and/or updates of vendor-specific
CRLs, cross-signs make this process even more complex—and led
to numerous incomplete revocations as shown in Section 5.1. New
cross-signs need careful examination to make sure that they do not
accidentally extend the trust of a CA, or span trust across PKIs.
Cross-sign revocations are a hard to solve problem for applica-
tion software. For example, all major browsers and Microsoft use
their own systems to propagate CA revocation information. This
revocation information is, however, not easily accessible for many
applications. A typical Unix program that uses OpenSSL or NSS has
no easy way to get revocation information. It will typically blindly
trust all CA certificates that it encounters—no matter if it was re-
voked. The same is true for mobile applications on iOS and OSX.
Even on Microsoft Windows one will only get access to some revo-
cation information—and only when using the operating system’s
APIs. Many applications, however, chose to use OpenSSL even on
Windows—e.g., through using the popular libcurl [52]. Program-
ming languages like Go and Java also have their own validation
logic and will thus not get revocation information [75].
Thus, cross-signing puts the security and privacy of users at
risk: It can undermine the security of one of the most critical in-
frastructures in a digitally interconnected world, which—for better
or worse—is the current trust backbone for nearly all secure com-
munication on the Internet.
In the following, we suggest best practices preserving the bene-
fits of cross-signing while limiting future security problems (Sec-
tions 6.1 and 6.6) and ensuring awareness of CAs as well as giving
more transparency to the user (Sections 6.2–6.5). Automated checks
The Boon and Bane of Cross-Signing: Shedding Light on a Common Practice in Public Key Infrastructures
CCS ’20, November 9–13, 2020, Virtual Event, USA
can hint at violations of these practices, but—like for many rules set
up by root store maintainers—manual inspection is often necessary.
6.1 Limit Problems using Short Validities
Typically, cross-signs have validity periods ranging from several
years up to several decades. As a result, security issues often remain
problematic for years—especially for applications that do not use
revocation information.
To limit the impact of security incidents related to cross-signing,
we suggest CAs to limit the maximum validity period of cross-signs.
The benefits of shorter validity periods have been discussed, e.g.,
in [25, 90]. Applications that lack access to revocation information
will benefit greatly from this change—there is a much smaller win-
dow of opportunity for exploitation after a CA certificate should
have been revoked. Continuous renewals of CA certificates will
also limit the validity of cross-sign to the term during which a
business relationship between two entities is ongoing—such cross-
signs cannot just be forgotten after an ownership change. Short
validity periods for cross-signs should not pose an insurmount-
able problem for CAs: Increasing automation of certificate issuance
and renewal—especially advanced by Let’s Encrypt in the recent
years—already enables the deployment and update of short-living
leaf certificates on end-user systems like webservers. Let’s Encrypt
already defaults to a 3-month validity period for leaf certificates.
Our proposal also matches current industry trends: Mozilla, Google,
and Apple already announced to limit the maximum validity period
of leaf certificates to 398 days (1 year + grace period) [51, 83, 95]. To
lessen the impact of problems even more, validity periods should be
reduced to about 4 days [25, 90] and—as underlined by our findings—
also apply to CA certificates [90]. This would necessitate all CAs to
adopt automation similarly to Let’s Encrypt.
A more invasive and less preferable approach could be to couple
a long-living cross-sign with short-lived proofs of freshness pro-
vided by the cross-signing CA. Whenever the certificate is used, the
receiver checks if the proof of freshness is recent. These freshness
proofs can be distributed by the webserver in the TLS handshake
using OCSP stapling—which can be mandated by the certificate
using the OCSP Must-Staple extension [44, 76]. However, OCSP
Must-Staple does not provide the necessary deployment at CAs,
servers, or clients [25, 27]. Thus, short validity periods—which do
not require specific client support [25, 90]—are preferable.
6.2 Shedding Light on Cross-Sign Motivations
Our analysis also shows good and positive use cases for cross-
signing. However, CAs are not required to state their motivation
for a particular cross-sign, although this motivation is important
for assessing if a cross-sign (still) serves a benign purpose or should
be revoked. For example, a bootstrapping cross-sign can be revoked
when the original root has reached the desired trust coverage. Sim-
ilarly, a cross-sign that improves root store coverage should be
revoked when the original CA certificate is no longer used. To shed
light on the motivation and enable corresponding checks, we sug-
gest requiring CAs to encode the motivation(s) for a cross-sign as a
new XS extension in the resulting certificate as follows.
Bootstrapping. The XS extension should encode a reference to
the bootstrapped certificate as well as the targeted root stores of the
bootstrapping. A corresponding pending request for inclusion of
the certificate into the root store must exist—root store maintainers
can provide a proof. The cross-sign must not be renewed any longer
when the bootstrapped certificate is trusted by the targeted stores.
Expanding Trust. A cross-sign that expands the trust should en-
code the corresponding stores in its XS extension. Such a certificate
must only exist if no other certificate of the XS-Cert provides a valid
path to the targeted root store (except for paths that are flagged
as alternative, see below). To limit the impact of coincidentally re-
sulting alternative paths by the cross-sign, applications may ignore
cross-signs that intend to expand the trust to only other root stores
than the store used by the application.
Fall-Back paths. While fall-back paths increase the complexity
of the PKI, they can be necessary to, e.g., support legacy devices
using old versions of trust-stores with old root certificates. Fall-back
cross-signs should encode the targeted root stores and the current
certificate they are a fall-back for. We posit that software that ships
with up-to-date root stores that get updated regularly should ignore
all fall-back certificates. As we describe, other cross-sign use cases
must prove that they do not serve the sole purpose to create fall-
back paths—via verifiable information in the XS extension.
Multiple Algorithms. When providing support for new (signa-
ture) algorithms, the cross-sign must—upon issuance—establish a
valid path to a root store using the desired algorithms only. No
other certificate should provide a valid path to the root store using
these algorithms, except for fall-back paths (see above). To enable
checks of this condition, the XS extension should encode the set of
algorithms which are used to validate the new path; it should also
encode the other CA certificates for this path.
Creation time. In addition to the XS-extension, all newly issued
CA certificates should include signed timestamps of several CT logs.
These can serve as indicator for the time of issuance (rather than
the easily manipulatable not before field).
6.3 Ownership Change: Report on Cross-Signs
As our analysis in Section 5.6 shows, cross-signs typically outlive
ownership changes of involved CAs. However, the public remains
unaware if this is an explicit decision. We suggest providing trans-
parency and raising the awareness for cross-signs when owners
change. To this end, when the owner of a cross-sign changes, the
issuers of the cross-sign should be required to publicly declare if
the cross-sign should remain valid. Likewise, the new owner should
publicly acknowledge that it will adhere to the obligations that arise
from the possession of the cross-sign. We envision such statements
to become a mandatory part of the report on CA ownership change
that is already required by root stores [63]. Incomplete statements
on affected cross-signs would justify revocations and challenge the
trustworthiness of the misbehaving CAs.
6.4 Explain Revocation Inconsistencies
We uncover several revocation inconsistencies for XS-Certs (cf.
Sections 5.1.3 and 5.7.2). However, it is sometimes unclear if these
inconsistencies are accidental—or desired. To enable root store
maintainers and researchers to correctly classify these cases, CAs
should be required to pro-actively explain revocation inconsisten-
cies of XS-Certs—and explain their purpose to allow for the setup
CCS ’20, November 9–13, 2020, Virtual Event, USA
Jens Hiller, Johanna Amann, and Oliver Hohlfeld
of checks (cf. Section 6.2). This information can nicely extend the
existing best practice to explain the reason for a revocation in CRLs.
6.5 Enable Easy Access to Cross-Signs
Easy access to cross-signing information would significantly help
to ensure that cross-signs are (still) legitimate. Certificate Trans-
parency (CT) already aims at making certificate information avail-
able to everyone [55]. CT provides semi-trusted append-only public
log-servers with the goal to contain all currently trusted certificates
in the Internet—and it is well on the way to satisfying this goal [82].
CT is, however, not easily searchable and fragmented in lots of
servers. Due to scalability problems, this fragmentation will likely
increase in the future [82]. Thus, current CT practices do not ensure
a great fit of CT for the evaluation of cross-signs.
Fragmentation of certificates to different CT logs complicates the
search for cross-signs since they can be distributed across different
logs. We suggest requiring CAs to report all certificates of a XS-Cert
to the same CT log(s). This ensures that a single CT log can provide
full information on the cross-signing properties of a certificate. To
account for the high impact of root and intermediate XS-Certs, CAs
should be required to report all CA certificates to a set of CT logs
that only log CA certificates. These CT logs can provide fast and
complete statements on the cross-signing properties of CA certifi-
cates. Due to the limited amount of CA certificates, they should
remain small—and not require a huge infrastructure commitment.
6.6 Use Vendor-Controlled CRLs by Default
In Section 5.1, we show the importance of revocation information
for intermediate certificates. We also highlight that, for the most
part, only large webbrowsers get this revocation information—via
vendor-specific CRLs. This, however, opens a potential window of
attack on all other applications which lack a sufficiently simple way
to get this revocation information [74].
We propose that a new standard system for the revocation of
certificates should be created—which could be equivalent to ei-
ther OneCRL or CRLSets. This system should be supported out-of-
the-box by typical operating systems and SSL/TLS libraries (like