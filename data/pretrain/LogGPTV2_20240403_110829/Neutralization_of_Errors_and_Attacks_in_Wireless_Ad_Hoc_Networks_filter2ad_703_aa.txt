title:Neutralization of Errors and Attacks in Wireless Ad Hoc Networks
author:Claudio Basile and
Zbigniew Kalbarczyk and
Ravishankar K. Iyer
Neutralization of Errors and Attacks in Wireless Ad Hoc Networks
Claudio Basile, Zbigniew Kalbarczyk, Ravi K. Iyer
Center for Reliable and High-Performance Computing
University of Illinois at Urbana-Champaign, IL 61801
{basilecl,kalbar,iyer}@crhc.uiuc.edu
Abstract
This paper proposes and evaluates strategies to build reli-
able and secure wireless ad hoc networks. Our contribution
is based on the notion of inner-circle consistency, where lo-
cal node interaction is used to neutralize errors/attacks at the
source, both preventing errors/attacks from propagating in the
network and improving the ﬁdelity of the propagated infor-
mation. We achieve this goal by combining statistical (a pro-
posed fault-tolerant cluster algorithm) and security (thresh-
old cryptography) techniques with application-aware checks
to exploit the data/computation that is partially and naturally
replicated in wireless applications. We have prototyped an
inner-circle framework with the ns-2 network simulator, and
we use it to demonstrate the idea of inner-circle consistency
in two signiﬁcant wireless scenarios: (1) the neutralization of
black hole attacks in AODV networks and (2) the neutraliza-
tion of sensor errors in a target detection/localization appli-
cation executed over a wireless sensor network.
1. Introduction
A wireless ad hoc network is a group of nodes that are
capable of forming a network without any pre-ﬁxed infras-
tructure. Wireless ad hoc networks (ranging from mobile net-
works of laptops/PDAs to sensor networks) are highly unsta-
ble, highly susceptible to accidental errors (in software and
hardware components), and easy targets of security attacks.
Importantly, these problems stem from the very nature of
wireless networks, i.e., node mobility, deployment in harsh
environments, need for low-cost solutions, limited availability
of communication/computation/energy resources, and broad-
cast communication [1]. The goal of this paper is to propose
and evaluate strategies to build wireless ad hoc networks that
continue to operate correctly in hostile computing environ-
ments, even if some of the nodes have been compromised by
errors1 or attacks. We make the following contributions:
• Introduction of the notion of inner-circle consistency,
where local node interaction (in a one-hop neighbor-
hood) is used to neutralize errors/attacks at the source,
both preventing errors/attacks from propagating in the
network and improving the ﬁdelity of the propagated in-
formation. We achieve this goal by combining (1) a se-
1The focus of this work is not on transmission errors (e.g., due to fading)
but on errors in the computation, communication, or sensing units of wireless
ad hoc nodes. Causes of these errors include hardware transients, software
bugs, and device degradation.
cure topology service, which discovers the local network
topology; (2) a deterministic voting technique, which
embeds application-aware checks that validate the infor-
mation disseminated by exploiting the data/computation
that is partially and naturally replicated in wireless appli-
cations (e.g., neighboring AODV [2] nodes may compute
similar routing information, while near sensor nodes
may collect similar environmental data); (3) a statisti-
cal voting technique, which improves the accuracy of the
propagated information and removes hidden error/attack
data by means of a proposed fault-tolerant cluster algo-
rithm; and (4) threshold cryptography, which guarantees
message integrity despite node intrusions.
• Design and formal speciﬁcation of an inner-circle frame-
work for wireless ad hoc nodes, a reconﬁgurable archi-
tecture that provides a common substrate in which one
can embed a wide range of error/attack-neutralization
techniques. By trading off a targeted dependability level
(i.e., guarantees on message integrity) with resource us-
age, the framework can be scaled to the communication,
computation, and energy resources available on a wire-
less node. The architecture spans both software modules
and hardware modules (Crypto-Processor for tamper-
resistant key-store plus signature creation/veriﬁcation,
Fault-Tolerant Cluster Processor for faulty/malicious
data masking).
• Prototype and evaluation of the inner-circle framework
with the ns-2 network simulator [3] using two signiﬁ-
cant wireless scenarios: (1) the neutralization of black
hole attacks in AODV networks and (2) the neutraliza-
tion of sensor errors in a target detection/localization ap-
plication run over a wireless sensor network. The ﬁrst
scenario is motivated by the devastating impact of black
hole attacks (e.g., 3000% throughput reduction in our ex-
periments) and by the absence of an effective counter-
measure up to the time of this writing [4, 5]. We show
that the inner-circle approach can limit the throughput
degradation to below 22%. The second scenario is mo-
tivated by the experimental evidence that wireless sen-
sor networks can be very unreliable due to sensor de-
vices, which interact directly with the environment and
fail days before the electronics may fail [6]. We show
that the inner-circle approach can halve energy consump-
tion (double network lifetime) while providing a four-
to-six-fold improvement in target detection latency and
target localization accuracy.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
2. System Model
3. Overview of Inner-circle Consistency
The system considered comprises a set N of mobile nodes
that communicate by exchanging messages through wireless
channels. A node does not know the complete set N but can
discover nodes in its proximity by means of periodic beacons.
Correct nodes are associated with unique ids that they main-
tain throughout their life and are aware of their geographic po-
sition [7]. A threshold cryptography scheme is available [8].
A dependability level is an integer L ≥ 1 that a (source)
node x speciﬁes when it wants to diffuse a piece of infor-
mation I in the network. Example criteria for the choice of
L include the importance of the information and the size of
the node’s neighborhood. The inner-circle approach permits
a (remote) recipient node y of information I to infer whether I
was agreed upon by L neighbors of source x. To support this
mechanism, we limit dependability level L to vary within a
predetermined range (e.g., 1 ≤ L ≤ 10) and associate a secret
signing key KL with each value of L. KL is not disclosed to
any node but each node only has an (L + 1)-threshold share
of KL (thus, L + 1 nodes must cooperate to sign a message
with secret key KL). For simplicity, we assume that wireless
nodes obtain their signing key shares from a trusted dealer at
the system’s initialization time; moreover, we do not discuss
potential extensions to support proactive secret sharing [9].
The system computation is modeled by extending the
timed asynchronous model [10] to wireless ad hoc networks.
Each node has access to a local hardware clock, but node
clocks are not required to be globally synchronized.
Node Failure. Nodes may fail by crashing or by becoming
Byzantine. The cause for a node failure may be an accidental
error (e.g., a transient in the hardware or a software bug) or
an adversary that has compromised the node (e.g., by stealing
the node’s secret keys or by reprogramming its software to
execute malicious code). Correct nodes never fail.
Timely Connectivity. In the absence of failures and node
movement, each node is stably connected to its neighbors, and
wireless communication channels are timely, i.e., if a node p
sends a message to a neighbor q at a time t, then q receives
the message by time t + δ (where δ includes both transmis-
sion and processing delays).
In that case we say that p is
t-connected with q at time t. Nonetheless, the system ex-
ecutions we consider are subject to communication failures,
which can be temporary (e.g., a single untimely reception due
to collisions) or permanent (e.g., no further reception due to
node movement or adversary jamming).
Adversary. We make the following assumptions about an
adversary: (1) The cryptographic primitives used by correct
nodes are secure.
(2) The adversary has limited jamming
range and cannot disrupt communication in the whole net-
work. (3) Compromised nodes are not all capable of collud-
ing by communicating (e.g., through out-of-band channels)
and sharing their identities/secret keys [11]. When nodes do
collude, we count them for the number of different identities
they can present.
This section introduces the idea of inner-circle consistency
through an example. Subsequent sections provide a more de-
tailed presentation of the inner-circle consistency algorithms.
Execution Scenario. Consider a hierarchical wireless sen-
sor network deployed over a remote region with the task of
determining the presence of targets/events of interest (e.g.,
a ﬁre in a forest) [12]. At the lowest level, a large number
of sensor nodes, constrained in energy and computation re-
sources, gather environmental data (e.g., sound, temperature,
pressure samples); then, a middle layer of more powerful col-
lector nodes aggregates the data from the sensor nodes and
forwards them to an upper layer of access points, which con-
stitute the gateways to the external world. The remainder of
this example focuses on the middle-layer nodes.
Suppose that a collector node x receives data from a group
of sensor nodes in its proximity, computes an aggregate value
v (e.g., presence/absence of a target) based on the received
data, and propagates value v to a distant access point. A
sensed signal can be affected by environmental noise; thus,
value v can suffer from a natural accuracy error. Also, node x
may be faulty (e.g., physically damaged due to high humidity
or high temperature) or malicious (e.g., compromised by an
adversary) and may report invalid or inconsistent values (e.g.,
wrong target type, or target detection to some access points
and no target to the other access points); this can disrupt the
upper-level node coordination necessary to accomplish addi-
tional tasks (e.g., tracking the detected target).
Inner-circle Concept. To neutralize errors/attacks orig-
inating from a collector node x, all the collector nodes that
are (securely discovered) neighbors of x form an inner-circle
that checks and ﬁlters any value originating from x. To send
a value v, node x selects a dependability level L (see § 2) and
initiates an inner-circle voting protocol. The protocol involves
only x’s inner-circle nodes and terminates only if at least L
neighbors agree on value v—we assume that collector nodes
are deployed densely enough that if a collector node x detects
a target, with high probability, L of its neighbors also do so.
Inner-circle Mechanism.
In agreeing on a proposed
value, the inner-circle voting protocol enables (1) application-
aware checking (deterministic voting) by enforcing that an
agreed value v satisﬁes application-speciﬁc criteria (e.g., v
is contained within a predetermined range) and (2) improv-
ing the accuracy of the proposed value (statistical voting) by
combining it with values from x’s inner-circle nodes.
Whereas x’s errors are handled by its inner-circle nodes
through a deterministic/statistical voting protocol, one must
also consider possible corruption of the value(s) forwarded
outside the inner-circle due to faulty/malicious inner-circle
nodes and faulty/malicious nodes on the forwarding paths. In
our approach, the messages an inner-circle propagates in the
network (as a result of the execution of a voting protocol) are
self-checking, i.e., a recipient node y outside x’s inner-circle
can check whether a message m it receives from node x in-
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
cludes a value agreed upon by at least L of x’s inner-circle
nodes, where L is the dependability level indicated by mes-
sage m. This is achieved through threshold signatures [8].
When initiating an inner-circle voting protocol, a node x
sends a propose message that speciﬁes the dependability level
L that it wishes to use. An inner-circle node that agrees with
x’s proposed value acknowledges its agreement by replying
with a partial signature obtained with its share of secret KL. If
at least L neighbors reply to x (i.e., the inner-circle voting pro-
tocol terminates) then x fuses the received L partial signatures
with its generated partial signature and obtains a signature σKL
of the agreed value v with secret KL. At this point, node x en-
capsulates value v in an agreed message m that includes value
v, dependability level L, and the combined signature σKL. On
receiving message m, a remote node y veriﬁes the validity of
the included signature σKL (to infer whether the included v
was agreed upon by L neighbors of x) before delivering value
v to the local application.
Discussion. A unique characteristic of the inner-circle ap-
proach is that expensive intrusion- and fault-tolerant algo-
rithms are executed only in the proximity of a source node.
The advantage is three-fold: (1) Local interaction enables
fast detection and suppression of errors/attacks, which both
prevents errors/attacks from escalating and avoids an unnec-
essary waste of resources, e.g., messages sent, energy con-
sumed. (2) Executing complex protocols only locally helps
reduce communication overhead and energy consumption;
also, node mobility only affects the execution of the pro-
tocol instances run in a locality of the moving nodes.
(3)
Application-aware checking can be more efﬁcient when per-
formed locally, where redundant application information can
be readily available. Conducting this check far from the
source may be questionable due to node movement and trans-
mission delay, which may obsolete the checked information.
The inner-circle approach does trade off performance for
dependability, since the number of errors/attacks it can tol-
erate is limited by the size of the inner-circle, which can be
less than what one can theoretically achieve with standard
fault tolerance algorithms run across the entire wireless net-
work [13]. Deﬁning larger inner-circles (e.g., including all
nodes two hops away from a source node) can effectively re-
balance this trade-off; for ease of presentation, however, the
remainder of this paper focuses on the case of one-hop inner-
circles in a homogeneous set of nodes.
4. Inner-circle Consistency Node Architecture
This section introduces a wireless node architecture for im-
plementing inner-circle consistency applications (see Fig. 1).
At the bottom of the architecture, a Physical Layer, a Medium
Access Control (MAC) Layer, and a Link Layer provide best-
effort, single-hop unicast/multicast communication. These
services are abstracted out as a Single-hop Communication
Service. At the top of the architecture, the Application rep-
resents a user application that runs on the wireless node, and
the Routing and Forwarding Service corresponds to the ad hoc
routing and forwarding mechanisms implemented in the wire-
less node in support of multi-hop communication. These ser-
vices are not speciﬁc to the inner-circle approach.
Five components are unique to the inner-circle architec-
ture: (1) An Inner-circle Interceptor, which intercepts mes-
sages to/from the link layer and performs extra actions for
those messages that match a registered message template (i.e.,
a description of the messages for which the application re-
quests inner-circle checking). Matching outgoing messages
are redirected to the inner-circle services, while matching in-
coming messages are suppressed if they have originated from
a suspected node (i.e., a potentially misbehaving node) or
if the messages’ signatures are incorrect. (2) A Suspicions
Manager, which receives node misbehavior indications from
other inner-circle services and maintains a list of the sus-
pected nodes. The mechanism is such that a node p sus-
pects a node q permanently only if p has a provable evi-
dence of q’s misbehavior (e.g., when p receives a message
m that is properly signed by q but has an invalid ﬁeld or
violates the currently executing protocol); otherwise, suspi-
cion is only temporary (e.g., for a few minutes). (3) A Se-
cure Topology Service, which enables nodes to discover the
topology of their neighborhood in a secure manner and to
determine in which inner-circle they should participate. (4)
An Inner-circle Voting Service, which enables nodes to per-
form deterministic or statistical voting—as speciﬁed by the
application—on the messages/values sent by an inner-circle’s
center (or source) node. (5) A set of Inner-circle Callbacks,
which are application-provided callback functions that supply
an application-speciﬁc customization to the inner-circle vot-
ing service and are invoked in response to events occurring in
the node, e.g., arrival of a message that needs to be checked.
The proposed inner-circle consistency node architecture
can be customized depending on the available resources and
the characteristics of the application and of the wireless envi-
ronment. Figure 2(a) and Fig. 2(b) provide two instantiations
of the architecture for ad hoc nodes and sensor nodes, respec-
tively. In the examples, the physical layer is fully hardware-
implemented, the MAC layer is partially ﬁrmware, and the
link layer is an integral part of the operating system (kernel or
micro-kernel). Routing and forwarding service is provided by
AODV and Directed Diffusion protocols [2,14]. The architec-
ture also includes two dedicated hardware modules: a Crypto-
Processor, which provides tamper-resistant key-store plus key
cryptographic functions (i.e., signature generation and veriﬁ-
cation), and a Fault-Tolerant Cluster Processor, which pro-
vides key error/attack masking functions (i.e., fault-tolerant
cluster algorithm of § 4.3). These modules can guarantee
high protection against malicious tampering with the wire-
less nodes, high performance, and low energy consumption
(up to two orders of magnitude less energy than in software
implementations). An early Crypto-Processor was introduced
in [15] and has been reconﬁgured to trade off performance for
area occupation and energy consumption. A Fault-Tolerant
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Inner-circle
Callbacks
Application
extractVal
getVal
getAgrDst
extractMsg
check
fuseVal
onAgr
Local
Topology
Inner-circle Voting Service
send
recv
SW
AODV
daemon
user
space
Ad Hoc Application
Inner-circle
Callbacks Shared Library
Inner-circle daemons
(voting, topology, suspicions
manager)
Secure Topology
Service
Routing and
Forwarding
Service
kerne l
space
Linux
Kernel
Inner-circle
Interceptor
Network Subsystem
Crypto-Processor
Driver
FT-Cluster
Processor Driver
output
traffic
input
traffic
demux
Suspicions
Manager
HW
CPU
Memory
Wireless
Card
Crypto-Processor
(signature creation and
verification)
FT-Cluster Processor
(masking of faulty/malicious
data)
Y
Match?
N
   Inner-circle Interceptor
      Inner-circle
      Framework
Match?
send/bcast
recv
Link Layer
MAC Layer
PHY Layer
Extract
Application
Message
Y
IC Signature
OK?
N
Suspect
Sender?
Suspected
List
(a) Ad Hoc Node Embodiment.
Sensor Application
Components
Inner-circle
Callbacks
Component
Inner-circle Components
(voting, topology, suspicions
manager)
SW
Data
Acquisition
Component
TinyOS
Inner-circle
Interceptor Component