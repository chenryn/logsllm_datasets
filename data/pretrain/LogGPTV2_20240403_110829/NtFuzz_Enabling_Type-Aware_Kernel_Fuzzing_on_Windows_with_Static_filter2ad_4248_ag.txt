always initialized to have symbolic boundaries.
The last alternative is to split the abstract memory based on
the given symbolic boundaries. That is, we subdivide the mem-
ory into three: SymLoc(s, [−∞, α]), SymLoc(s, [α, β]),
and SymLoc(s, [β,∞]). However, when there is a subsequent
update with another location SymLoc(s, [γ, δ]), we must
consider the overlap between the two symbolic offsets [α, β]
and [γ, δ]. Thus, the memory state has to grow exponentially
to the number of memory updates.
it
For these reasons,
is not straightforward to integrate
modular analysis with the VSA domain. While this is an
interesting challenge, we leave it as future work. Instead, we
enable modular analysis for binary code by designing a novel
abstract domain that we describe in §V-B1.
REFERENCES
2Precisely speaking, after the ﬁrst instruction (push ebp) of the prologue.
[1] A. V. Aho, M. S. Lam, R. Sethi, and J. D. Ullman, Compilers: Principles,
Techniques, and Tools, 2nd ed. Addison Wesley, 2006.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
691
[2] A. Aiken, S. Bugrara, I. Dillig, T. Dillig, B. Hackett, and P. Hawkins,
“An overview of the saturn project,” in Proceedings of
the ACM
SIGPLAN-SIGSOFT workshop on Program Analysis for Software Tools
and Engineering, 2007, pp. 43–48.
[3] Apple Inc., “Apple security bounty,” https://developer.apple.com/
security-bounty/.
[4] D. Babic, L. Martignoni, S. McCamant, and D. Song, “Statically-
directed dynamic automated test generation,” in Proceedings of the
International Symposium on Software Testing and Analysis, 2011, pp.
12–22.
[5] G. Balakrishnan, R. Gruian, T. Reps,
and T. Teitelbaum,
“CodeSurfer/x86—a platform for analyzing x86 executables,” in
Proceedings of the International Conference on Compiler Construction,
2005, pp. 250–254.
[6] G. Balakrishnan and T. Reps, “Analyzing memory accesses in x86 exe-
cutables,” in Proceedings of the International Conference on Compiler
Construction, 2004, pp. 5–23.
[7] ——, “DIVINE: Discovering variables in executables,” in Proceedings
of the International Workshop on Veriﬁcation, Model Checking, and
Abstract Interpretation, 2007, pp. 1–28.
[8] I. Beer, “pwn4fun spring 2014–safari–part ii,” http://googleprojectzero.
blogspot.com/2014/11/pwn4fun-spring-2014-safari-part-ii.html, 2014.
[9] B. Blanchet, P. Cousot, R. Cousot, J. Feret, L. Mauborgne, A. Min´e,
D. Monniaux, and X. Rival, “A static analyzer for large safety-critical
software,” in Proceedings of the ACM Conference on Programming
Language Design and Implementation, 2003, pp. 196–207.
[10] B. Blunden, The Rootkit Arsenal: Escape and Evasion in the Dark
Corners of the System.
Jones & Bartlett Publishers, 2012.
[11] M. B¨ohme, V. J. M. Man`es, and S. K. Cha, “Boosting fuzzer efﬁciency:
An information theoretic perspective,” in Proceedings of the Interna-
tional Symposium on Foundations of Software Engineering, 2020, pp.
678–689.
[12] F. Brown, D. Stefan, and D. Engler, “Sys: A static/symbolic tool for
the
ﬁnding good bugs in good (browser) code,” in Proceedings of
USENIX Security Symposium, 2020, pp. 199–216.
[13] D. Brumley, I. Jager, T. Avgerinos, and E. J. Schwartz, “BAP: A binary
analysis platform,” in Proceedings of the International Conference on
Computer Aided Veriﬁcation, 2011, pp. 463–469.
[14] J. Caballero and Z. Lin, “Type inference on executables,” ACM Com-
puting Surveys, vol. 48, no. 4, pp. 1–35, 2016.
[15] C. Calcagno, D. Distefano, J. Dubreil, D. Gabi, P. Hooimeijer, M. Luca,
P. O’Hearn, I. Papakonstantinou, J. Purbrick, and D. Rodriguez, “Moving
fast with software veriﬁcation,” in Proceedings of the NASA Formal
Methods Symposium, 2015, pp. 3–11.
[16] S. K. Cha, M. Woo, and D. Brumley, “Program-adaptive mutational
the IEEE Symposium on Security and
fuzzing,” in Proceedings of
Privacy, 2015, pp. 725–741.
[17] J. Choi, J. Jang, C. Han, and S. K. Cha, “Grey-box concolic testing
on binary code,” in Proceedings of the International Conference on
Software Engineering, 2019, pp. 736–747.
[18] J. Corina, A. Machiry, C. Salls, Y. Shoshitaishvili, S. Hao, C. Kruegel,
and G. Vigna, “DIFUZE: Interface aware fuzzing for kernel drivers,” in
Proceedings of the ACM Conference on Computer and Communications
Security, 2017, pp. 2123–2138.
[19] P. Cousot, “Types as abstract interpretations,” in Proceedings of the ACM
Symposium on Principles of Programming Languages, 1997, pp. 316–
331.
[20] P. Cousot and R. Cousot, “Abstract interpretation: A uniﬁed lattice
model for static analysis of programs by construction or approximation
of ﬁxpoints,” in Proceedings of the ACM Symposium on Principles of
Programming Languages, 1977, pp. 238–252.
[21] ——, “Abstract interpretation frameworks,” Journal of Logic and Com-
putation, vol. 2, no. 4, pp. 511–547, 1992.
[22] I. Dillig, T. Dillig, and A. Aiken, “Fluid updates: Beyond strong vs.
weak updates,” in Proceedings of the ACM European Conference on
Programming Languages and Systems, 2010, pp. 246–266.
[23] A. Djoudi and S. Bardin, “BINSEC: Binary code analysis with low-
level regions,” in Proceedings of the International Conference on Tools
and Algorithms for the Construction and Analysis of Systems, 2015, pp.
212–217.
[24] K. ElWazeer, K. Anand, A. Kotha, M. Smithson, and R. Barua, “Scalable
variable and data type detection in a binary rewriter,” in Proceedings of
the ACM Conference on Programming Language Design and Implemen-
tation, 2013, pp. 51–60.
[25] F-Secure LABS,
“KernelFuzzer,” https://github.com/FSecureLABS/
[26] Facebook, Inc., “Infer,” https://github.com/facebook/infer/tree/master/
KernelFuzzer.
infer.
[27] D. Gens, S. Schmitt, L. Davi, and A.-R. Sadeghi, “K-Miner: Uncovering
the Network and
memory corruption in linux,” in Proceedings of
Distributed System Security Symposium, 2018.
[28] Google LLC, “BinNavi,” https://github.com/google/binnavi.
[29] I. Haller, A. Slowinska, M. Neugschwandtner, and H. Bos, “Dowsing
for overﬂows: A guided fuzzer to ﬁnd buffer boundary violations,” in
Proceedings of the USENIX Security Symposium, 2013, pp. 49–64.
[30] H. Han and S. K. Cha, “IMF: Inferred model-based fuzzer,” in Pro-
ceedings of the ACM Conference on Computer and Communications
Security, 2017, pp. 2345–2358.
[31] K. Heo, H. Oh, and K. Yi, “Machine-learning-guided selectively un-
sound static analysis,” in Proceedings of the International Conference
on Software Engineering, 2017, pp. 519–529.
[32] Hex-Rays SA., “IDA Pro,” https://www.hex-rays.com/products/ida/.
[33] hﬁref0x, “NtCall64,” https://github.com/hﬁref0x/NtCall64.
[34] D. R. Jeong, K. Kim, B. Shivakumar, B. Lee, and I. Shin, “Razzer:
Finding kernel race bugs through fuzzing,” in Proceedings of the IEEE
Symposium on Security and Privacy, 2019, pp. 754–768.
[35] D. Jones, “Trinity,” https://github.com/kernelslacker/trinity.
[36] M. Jung, S. Kim, H. Han, J. Choi, and S. K. Cha, “B2R2: Building
an efﬁcient front-end for binary analysis,” in Proceedings of the NDSS
Workshop on Binary Analysis Research, 2019.
“BrokenType,”
https://github.com/googleprojectzero/
[37] M.
Jurczyk,
BrokenType.
[38] ——,
“Windows
freshed
windows-system-call-tables-updated-refreshed-and-reworked/.
and
system
reworked,”
re-
call
https://j00ru.vexillium.org/2016/08/
updated,
tables
[39] V. Kanvar and U. P. Khedker, “Heap abstractions for static analysis,”
ACM Computing Surveys, vol. 49, no. 2, pp. 1–47, 2016.
[40] K. Kim, D. R. Jeong, C. H. Kim, Y. Jang, I. Shin, and B. Lee, “HFL:
Hybrid fuzzing on the linux kernel,” in Proceedings of the Network and
Distributed System Security Symposium, 2020.
[41] S. Y. Kim, S. Lee, I. Yun, W. Xu, B. Lee, Y. Yun, and T. Kim, “CAB-
Fuzz: Practical concolic testing techniques for COTS operating systems,”
in Proceedings of the USENIX Annual Technical Conference, 2017, pp.
689–701.
[42] J. Kinder and H. Veith, “Jakstab: A static analysis platform for binaries,”
in Proceedings of the International Conference on Computer Aided
Veriﬁcation, 2008, pp. 423–427.
[43] P. Koopman, J. Sung, C. Dingman, D. Siewiorek, and T. Marz, “Com-
paring operating systems using robustness benchmarks,” in Proceedings
of the Symposium on Reliable Distributed Systems, 1997, pp. 72–79.
[44] T. Le, “tsys,” http://groups.google.com/groups?q=syscall+crashme&
hl=en&lr=&ie=UTF-8&selm=1991Sep20.232550.5013%40smsc.sony.
com&rnum=1, 1991.
[45] J. Lee, T. Avgerinos, and D. Brumley, “TIE: Principled reverse engi-
neering of types in binary programs,” in Proceedings of the Network
and Distributed System Security Symposium, 2011, pp. 251–268.
[46] W. Lee, W. Lee, and K. Yi, “Sound non-statistical clustering of static
analysis alarms,” in Proceedings of
the International Workshop on
Veriﬁcation, Model Checking, and Abstract Interpretation, 2012, pp.
299–314.
[47] L. Leong, “Make static instrumentation great again: High performance
fuzzing for Windows system,” in BlueHat, 2019.
[48] M. Li, “Active fuzzing as complementary for passive fuzzing,” in PacSec,
2016.
[49] Z. Lin, X. Zhang, and D. Xu, “Automatic reverse engineering of data
structures from binary execution,” in Proceedings of the Network and
Distributed System Security Symposium, 2010.
[50] A. Machiry, C. Spensky, J. Corina, N. Stephens, C. Kruegel, and
G. Vigna, “Dr. Chekcer: A soundy analysis for linux kernel drivers,”
in Proceedings of the USENIX Security Symposium, 2017, pp. 1007–
1024.
[51] V. J. M. Man`es, H. Han, C. Han, S. K. Cha, M. Egele, E. J. Schwartz,
and M. Woo, “The art, science, and engineering of fuzzing: A survey,”
IEEE Transactions on Software Engineering, 2019.
[52] V. J. M. Man`es, S. Kim, and S. K. Cha, “Ankou: Guiding grey-
box fuzzing towards combinatorial difference,” in Proceedings of the
International Conference on Software Engineering, 2020, pp. 1024–
1036.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
692
[53] Microsoft Corporation, “ADV200006: Type 1 font parsing remote
code execution vulnerability,” https://portal.msrc.microsoft.com/en-us/
security-guidance/advisory/adv200006.
[54] ——,
“Debugging
reference,”
https://docs.microsoft.com/en-us/
windows/win32/debug/debugging-reference.
[55] ——,
“Dynamic-link
libraries,”
https://docs.microsoft.com/en-us/
windows/win32/dlls/dynamic-link-libraries.
[56] ——, “Inside native applications,” https://docs.microsoft.com/en-us/
sysinternals/learn/inside-native-applications.
[78] A. Plaskett, “OSXFuzz,” https://github.com/FSecureLABS/OSXFuzz.
[79] ReactOS Team, “ReactOS,” https://reactos.org/.
[80] A. Rebert, S. K. Cha, T. Avgerinos, J. Foote, D. Warren, G. Grieco, and
D. Brumley, “Optimizing seed selection for fuzzing,” in Proceedings of
the USENIX Security Symposium, 2014, pp. 861–875.
[81] M. J. Renzelmann, A. Kadav, and M. M. Swift, “SymDrive: Testing
drivers without devices,” in Proceedings of the USENIX Symposium on
Operating System Design and Implementation, 2012, pp. 279–292.
[82] X. Rival and K. Yi, Introduction to Static Analysis: An Abstract
[57] ——, “Microsoft bug bounty program,” https://www.microsoft.com/
Interpretation Perspective. MIT Press, 2020.
en-us/msrc/bounty.
[58] ——, “Microsoft docs,” https://docs.microsoft.com/.
[59] ——, “Microsoft security advisory 932596,” https://docs.microsoft.com/
en-us/security-updates/securityadvisories/2007/932596.
[60] ——, “Ntddk.h,” https://docs.microsoft.com/en-us/windows-hardware/
[61] ——, “Ntifs.h,” https://docs.microsoft.com/en-us/windows-hardware/
drivers/ddi/ntddk/.
drivers/ddi/ntifs/.
[83] ROPAS Lab, “Sparrow,” https://github.com/ropas/sparrow.
[84] S. Schumilo, C. Aschermann, R. Gawlik, S. Schinzel, and T. Holz,
“kAFL: Hardware-assisted feedback fuzzing for os kernels,” in Pro-
ceedings of the USENIX Security Symposium, 2017, pp. 167–182.
[85] O. Shivers, “Control-ﬂow analysis of higher-order languages,” Ph.D.
dissertation, Carnegie Mellon University, 1991.
[86] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino,
A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel, and G. Vigna,
“(state of) the art of war: Offensive techniques in binary analysis,” in
Proceedings of the IEEE Symposium on Security and Privacy, 2016, pp.
138–157.
[87] A. Slowinska, T. Stancescu, and H. Bos, “Howard: A dynamic excavator
for reverse engineering data structures,” in Proceedings of the Network
and Distributed System Security Symposium, 2011.
[88] Y. Smaragdakis, G. Balatsouras, and G. Kastrinis, “Set-based pre-
processing for points-to analysis,” in Proceedings of the ACM SIGPLAN
International Conference on Object Oriented Programming Systems
Languages & Applications, 2013, pp. 253–270.
[89] D. Syme, “FsLexYacc,” https://github.com/fsprojects/FsLexYacc.
[90] Unity
Technologies,
“Adventure
sample
game,”
https:
//assetstore.unity.com/packages/essentials/tutorial-projects/
adventure-sample-game-76216.
[91] D. Vyukov, “syzkaller,” https://github.com/google/syzkaller.
[92] R. Wang, Y. Shoshitaishvili, A. Bianchi, A. Machiry, J. Grosen,
P. Grosen, C. Kruegel, and G. Vigna, “Ramblr: Making reassembly great
again,” in Proceedings of the Network and Distributed System Security
Symposium, 2017.
[93] W. Wang, K. Lu, and P.-C. Yew, “Check it again: Detecting lacking-
recheck bugs in os kernels,” in Proceedings of the ACM Conference on
Computer and Communications Security, 2018, pp. 1899–1913.
[94] X. Wang, H. Chen, Z. Jia, N. Zeldovich, and M. F. Kaashoek, “Im-
proving integer security for systems with KINT,” in Proceedings of the
USENIX Symposium on Operating System Design and Implementation,
2012, pp. 163–177.
[95] D. Weston, “Keeping windows secure,” in BlueHat, 2020.
[96] Winaero, “Windows 7 games for windows 10,” https://winaero.com/blog/
get-windows-7-games-for-windows-10/.
[97] M. Xu, S. Kashyap, H. Zhao, and T. Kim, “KRACE: Data race fuzzing
for kernel ﬁle systems,” in Proceedings of the IEEE Symposium on
Security and Privacy, 2020, pp. 1643–1660.
[98] M. Xu, C. Qian, K. Lu, M. Backes, and T. Kim, “Precise and scalable
detection of double-fetch bugs in os kernels,” in Proceedings of the IEEE
Symposium on Security and Privacy, 2018, pp. 661–678.
[99] M. Zalewski, “American Fuzzy Lop,” http://lcamtuf.coredump.cx/aﬂ/.
[62] ——, “Programming reference for
the Win32 API,” https://docs.
microsoft.com/en-us/windows/win32/api/.
[63] ——,
“Understanding SAL,” https://docs.microsoft.com/en-us/cpp/
code-quality/understanding-sal?view=vs-2019.
[64] ——, “Wdm.h,” https://docs.microsoft.com/en-us/windows-hardware/
[65] ——, “Windows 10 software development kit,” https://developer.
microsoft.com/en-us/windows/downloads/windows-10-sdk/.
[66] ——, “Winternl.h,” https://docs.microsoft.com/en-us/windows/win32/
drivers/ddi/wdm/.
api/winternl/.
[67] A. Møller and M.
I. Schwartzbach, “Static program analysis,”
https://cs.au.dk/ amoeller/spa/, 2019.
[68] A. Mycroft, “Type-based decompilation,” in Proceedings of the ACM
European Conference on Programming Languages and Systems, 1999,
pp. 208–223.
[69] National
Security
Agency,
“Ghidra,”
https://github.com/
NationalSecurityAgency/ghidra.
[70] NCC Group, “Triforce linux syscall
fuzzer,” https://github.com/
nccgroup/TriforceLinuxSyscallFuzzer.
[71] H. Oh, “Large spurious cycle in global static analyses and its algorithmic
mitigation,” in Proceedings of the Asian Symposium on Programming
Languages and Systems, 2009, pp. 14–29.
[72] H. Oh, K. Heo, W. Lee, W. Lee, and K. Yi, “Design and implementation
of sparse global analyses for c-like languages,” in Proceedings of the
ACM Conference on Programming Language Design and Implementa-
tion, 2012, pp. 229–238.
[73] H. Oh, W. Lee, K. Heo, H. Yang, and K. Yi, “Selective context-
sensitivity guided by impact pre-analysis,” in Proceedings of the ACM
Conference on Programming Language Design and Implementation,
2014, pp. 475–484.
[74] D. Oleksiuk, “Ioctl fuzzer,” https://github.com/Cr4sh/ioctlfuzzer, 2009.
[75] Oracle, “VirtualBox,” https://www.virtualbox.org/.
[76] S. Pailoor, A. Aday, and S. Jana, “MoonShine: Optimizing OS fuzzer
seed selection with trace distillation,” in Proceedings of the USENIX
Security Symposium, 2018, pp. 729–743.
[77] J. Pan, G. Yan, and X. Fan, “Digtool: A virtualization-based framework
for detecting kernel vulnerabilities,” in Proceedings of the USENIX
Security Symposium, 2017, pp. 149–165.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
693