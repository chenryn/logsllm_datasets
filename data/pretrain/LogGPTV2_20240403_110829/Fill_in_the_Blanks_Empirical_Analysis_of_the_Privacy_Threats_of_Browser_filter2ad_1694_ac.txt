fields of a credit card type; when the user clicks on the form element
that will trigger the preview functionality, we dynamically replace
them with drop-down menus and populate them with credit card
numbers. In that way, the browser is tricked into matching the
previewed credit card of the user with the entries in the menus.
Again, this allows us to bypass the size limit for the drop-down
menus. While we can have arbitrarily large numbers of entries in
each menu, we observed that the dynamic replacement of input
element with drop-down menus causes a delay that may affect our
attack if our page probes for millions of values. This delay is due to
the browser parsing all the form elements that are now significantly
larger than a normal form element.
An additional detail that we need to handle in this attack is that
Chromium changes the style properties of all the dynamically in-
cluded drop-down menus during the autocomplete preview. These
properties change even for menus that do not have any value match-
ing those in the user’s profile. This could have prevented us from
differentiating between the menus, but we have observed that the
style properties of the menus that actually have a matching value
change back to their default values when the preview ends (i.e., the
user moves the mouse cursor away from the autocomplete window).
As the properties of the non-matching elements are not restored,
we are still able to infer which values the user has previewed.
Reducing search space. While the number of values probed
by our attack is not actually constrained by the browser, users are
unlikely to stay on a page with a form for a very long time. As
such, attackers can further improve the success of their attack by
reducing the potential size of the search space for the given type of
Scale of attack. Our dynamic replacement of autofillable ele-
ments allows us to induce inconsistencies in the browser’s behavior,
and also removes the limit on the number of options that we can
include in the drop-down menus. In fact, the size limitation is
removed for all types of information when their corresponding
elements are dynamically replaced, not only phone and credit card
numbers. When our page probes up to 40K values, the attack is
instant and there is no discernible delay, and our system can obtain
the values from multiple profiles in the autofill window if the mouse
passes over them (see demo video [16]). When further increasing
the scale of the attack, we are only limited by two factors: (i) the
time required to fetch the form from the web server, and (ii) the
time required for the client-side computations to complete.
During our experiments we found that the attacker can eas-
ily overcome (i) through compression. Due to the nature of the
form’s data, gzip is particularly effective, allowing us to compress
the attack form that probes 150K phone or credit card numbers
to approximately 2MB, which matches the median webpage size
according to the HTTP Archive [7]. The effect of issue (ii) will vary
depending on the capabilities of the client’s device. Currently, we
have tested our proof of concept implementation on a variety of
off-the-shelf laptops and have found that the user needs to stay on
the page for 8-9 seconds per 102K probed values (demo video: [15]).
When the user is on a desktop machine, we found that the same
attack requires 4-5 seconds (demo video: [14]). Attackers can also
selectively increase the number of candidate values for users with
more powerful machines (e.g., deciding based on the WebGL Ren-
derer attribute [19, 28] or other hardware information). We note
that due to the increased browser processing when probing 100K
values, if the mouse hovers over multiple autocomplete profiles our
attack only infers the value from the last previewed profile.
Figure 2: Example notification (yellow strip) shown by Fire-
fox during the autocomplete process.
information they want to infer. For instance, if the attackers want to
infer the user’s street address, they can leverage the user’s IP address
and construct a set of probing values for the user’s city.2 Indicatively,
NYC which is the most populous city in the United States, has a
total of ∼102K named geographic places (streets, bridges, rail lines,
etc.) [10] which can be easily probed within a reasonable time frame.
Similarly, attackers can leverage the IP address to probe phone
numbers that start with that city’s or state’s area code. Probing
for 102K values would, thus, allow the attacker to cover ∼11.3%
of all possible 7-digit combinations for a given area.3 Attackers
trying to exfiltrate credit card numbers could first take advantage
of the structure of credit card numbers to generate valid candidate
values (e.g., targeting specific banks [25]). Alternatively, attackers
can cheaply buy credit card numbers missing the cardholder’s name
in bulk from underground markets [34] and probe those.
Incognito mode. Our preview attack does not require the user
to actually use the autofill functionality, and the autofill window
appears whenever the user clicks on any form element of an aut-
ofillable type. Also, it infers the values from multiple autocomplete
profiles, if the mouse passes over their entry in the preview window.
This renders our attack particularly pertinent against cautious users
that may have a “decoy” profile with bogus values (e..g, with a pseu-
donym and a secondary email address that is entered in untrusted
websites) or who otherwise avoid using autocomplete. Cautious
users may also visit untrusted websites in private (i.e., incognito)
mode. While certain browser functionalities differ in private mode,
we find that our attacks are not prevented by incognito. Currently,
the only way users can prevent this attack is to disable the autofill
functionality entirely, through the browser’s settings.
5 USER-CENTRIC BROWSER MITIGATIONS
Currently, Firefox and Safari are the only major browsers that
attempt to mitigate the surreptitious exfiltration of data by enabling
users to make more informed decisions. While such an approach
can significantly raise the bar for attackers if designed correctly,
users may still ignore the information showed by the browser. As
such, we believe that browsers should also incorporate mechanisms
for detecting and preventing form-field concealment techniques,
which we describe in Section 8. Nonetheless, for our analysis we
2MaxMind reports 80% and 68% accuracy for states and cities respectively [9].
3Phone numbers in the US have 10 digits; the first 3 digits denote the area code.
Figure 3: Hierarchy of Firefox’s notification labels and the field types covered by each label. The field types are ordered from
coarser to more fine-grained and, when needed, additional explanations or example values are provided in a parenthesis.
assume that users take the notification into account, and will focus
on how current approaches are still susceptible to deception.
Firefox presents a notification that states what type of infor-
mation will be autocompleted; an example is shown in Figure 2.
As such, theoretically, even if a form element is hidden through
some deceptive technique the user will be aware of what informa-
tion will be disclosed. As can be seen in Figure 3, the notification
shown to users can only contain five high-level, coarse-grain labels.
This introduces a new avenue for deception; attackers can have a
high-level form element that is visible to users (e.g., country or tele-
phone country code) and have a specific, fine-grained element (e.g.,
street address or phone number) hidden for exfiltrating uniquely-
identifying user information. As such, the user will not be able to
perceive any discrepancy between the form and the notification
message, as all notification labels will correspond to visible form
elements. This may also create a false sense of security for users, as
the browser shows an explicit warning message that verifies their
visual perception of what information the page will obtain.
Safari follows a similar approach, but provides additional fine-
grained information. Specifically, Safari’s message will explicitly
state if the user’s first and/or last name will be provided to the
form, and also more details about the information from their profile
that will be autocompleted. However, while Safari differentiates
between home and work address in the notification, it follows the
same approach with Firefox where these two coarse-grained labels
are used for any of the address-related field types. As such, attackers
can include a visible field for generic address information (e.g.,
country) and have a hidden field that obtains the postal address.
At the same time, Safari’s design is more complex from a user-
interaction standpoint, since clicking on a field other than the name
will present a window with 2 different autofill options, one with
a generic label and one with all the detailed information that will
be autofilled in the form. In this case, the user could likely avoid
disclosing the sensitive information to the hidden fields by selecting
the first option. As typical behavior is to start from the top of the
form [33], it is likely that many users will only see the coarse-
grained labels. Nonetheless, since users have the option to see
exactly what information will be autofilled through the browser’s
UI (albeit not in the typical workflow) we consider Safari’s design
more effective. Nonetheless, explicitly including the fine-grained
labels in all the notification windows will allow users to better
protect their data. We consider a user study on the effectiveness of
these notification messages an interesting future direction.
6 MEASURING DECEPTION IN THE WILD
Here we present our large-scale measurement on the prevalence of
autofill-based deception in the wild. We first describe our methodol-
ogy and practical challenges of identifying the autofillable elements
and detecting those that are concealed, and then continue with a
detailed analysis of our collected dataset.
Crawling. We have instrumented Chromium (v81) and Firefox
(v74) and used Selenium to visit the Alexa Top 100K websites with
both browsers. Our system records the autofill information for each
input field when visiting a website and the autofill functionality
is activated. Upon visiting a website, our crawler identifies all the
input fields and drop-down menus in the page and triggers the
autofill preview functionality in an automated way. At this point,
our instrumented browsers record information about the elements
that are being filled out. After that, we use our heuristics to identify
whether those autofillable elements are visible to the user or not.
In Chromium, once the crawler clicks on an  field and the
preview window appears, we automatically choose the first saved
profile for preview and record the information of autofillable fields.
We noticed that there is a slight difference between Chromium
and Chrome regarding autofill behavior. Chromium comments out
the source code that autofills the company field, while Chrome
supports autofilling this field. Thus, we uncommented the code to
make Chromium consistent with Chrome for our experiments. In
Firefox, we record how it parses the form upon clicking, including
which fields are autofillable and their types. Finally, since a page
may have multiple forms, and fields in one form may not be able to
trigger autofill for those in a different form, we click each 
in the page to ensure that we will record all the autofillable fields.
Detecting Non-Visible Elements. The concealment techniques
that leverage specific CSS property values for making input ele-
ments invisible (i.e., the first three entries in Table 1) are straightfor-
ward to detect. For such cases, our crawler simply checks the values
Table 2: Sites and pages where autofill is triggered, and cases
where our system detected hidden elements.
Sites w/
Sites w/
Autofill Hidden Field Autofill Forms Hidden Autofill
21,589
31,621
92,063
83,054
5,295
1,843
8,760
2,776
Pages w/
Pages w/
Firefox
Chrome
of the corresponding properties. For properties like display and vis-
ibility that are inheritable from ancestors, and the element’s opacity
which can be also affected by the parent’s opacity, our system also
evaluates those properties for the input fields’ ancestors.
To detect fields that are covered by other elements, our heuristics
first estimate the position and effective size of every element in the
page, and then determine whether any of those elements are placed
on top of others. Additionally, we also check the opacity value of the
overlay elements, as they need to be non-transparent to effectively
cover the elements that lie beneath them. In a similar fashion, by
estimating the position and size of the input elements, our heuris-
tics determine whether those are positioned outside of the screen
boundaries, or outside of their ancestors’ overflow boundaries.
Additional visual obstacles. In practice, additional aspects
of modern websites can lead to mislabeling. As such, our system
faces additional challenges for accurately assessing the presence
of deceptive techniques, as common web development practices
can misleadingly make it appear as though an element is being
concealed. Next we provide more details on our approach and
heuristics for handling such cases.
Popup overlays. These are typically a window, lightbox, or full-
screen takeover, typically layered on top of the page’s content; we
need to remove these popups as they render the pages’ content
inaccessible. We detect them and remove them by setting their style
attribute to "display:none !important".
Website navigation and header. For every  and 
element in the page, that are returned by the getElementsByTag-
Name() method, we scroll the page using the scrollIntoView()
method to make the visible ones appear on the screen. We have
observed that some elements might still be temporarily covered
by the website’s navigation bar, banner, or ads. For this reason, if
an element is still not in view after the initial scrolling, we scroll
further upwards and downwards and check if it comes in view.
Cookie consent overlays. During our experiments we observed
that when such overlays are removed, some form elements may also
be removed. For this reason we do not remove them but scroll the
page to make all visible elements appear. It is noted that the cookie
consent overlay is different from the popup overlay. Popup overlays
render the page content inaccessible and, thus, need to be removed.
In contrast, the cookie consent overlay is typically a small banner at
the top or bottom of the page [45] and does not affect accessibility
to the page. While our initial plan was to programmatically interact
with the consent overlays and accept the use of cookies, we found
that the diversity of web pages, the differences in overlay behaviors
(e.g., some may induce navigation to a different page) and the
variance in text language lead to complications that prevent us
from adequately covering all cases. Instead, we found that simply
scrolling was sufficient, as visible elements are brought into view.
Figure 4: Domains w/ autofillable forms and hidden fields
for Firefox and Chrome, grouped based on Alexa rank.
6.1 Measurements
Our crawling lasted from 11/19/2019 to 12/3/2019, where we visited
the landing pages of the Alexa Top 100K websites (using the list
from 11/13/2019), from where we followed all links to other pages
on the same domain. We chose to follow this approach as forms
(e.g., sign up, subscription, etc) are typically accessible from the
landing page. This resulted in more than 214K pages that have
forms with autofillable fields. We also note that the numbers that
we present only take into account hidden elements that are actually
autofilled by each browser; if the form contains hidden elements
that are, for any reason, not filled by the browser we do not include
them in our analysis as they do not affect users.
We break down the results from this process in Table 2. In general,
we see a considerable difference in the overall numbers across
browsers; this is because Chrome and Firefox use different heuristics
for parsing forms, detecting field types, and deciding whether to
autofill a given field. As a result, Chrome is far more aggressive in
autofilling forms (e.g., by ignoring the autocomplete attribute as
discussed in Section 2) resulting in 46.5% more sites where a form
is autofilled compared to Firefox, and 63.1% more forms overall. On
the other hand, Firefox does not have any checks for preventing
hidden elements from being filled, resulting in an almost 3x increase
in the number of autofilled forms that contain hidden elements.
While this lack of checks is likely due to the adoption of the autofill
notification shown to users (Section 5), their current approach does
not adequately protect users as we detail below.
Domain popularity. Figure 4 provides more details on the num-
ber of websites with forms that are autocompleted and their use of
hidden elements, based on their Alexa rank. While we see higher
numbers for both browsers in the most popular bracket (the top
10K), there is no consistent pattern for the remaining groups. Fur-
thermore, in Firefox we detect between 414-631 domains in all bins,
while Chrome fluctuates between 152-250. We also break down
these sites based on their top-level domain and find that around
56.5% of them in both browsers belong to ".com". Somewhat sur-
prisingly we find that ".edu" and ".org" are among the top 4 for
both browsers. We also identified 73 and 24 ".gov.*" domains in
Firefox and Chrome, respectively, that included hidden fields.
 0 500 1000 1500 2000 2500 3000 3500 4000FirefoxDomainsw/ Autofill FormsHide Element(s) 0 500 1000 1500 2000 2500 3000 3500 40000-10k10k-20k20k-30k30k-40k40k-50k50k-60k60k-70k70k-80k80k-90k90k-100kChromeDomain RankTable 3: Number of domains and hidden autofillable form
fields for each deceptive technique seen in the wild.
Firefox
Domains
Chrome
Fields
Technique
1,111
display_none_ancestor
758*
display_none