r yield better efﬁciency. Consequently, this is optimal when
n is prime. The case n even, pr(n) = 2, is the other extreme:
Theorem 3 implies r ≤ n/2− s. Odd values of n support a
larger maximum value for r in relation to n.
Proof. We begin with the case s = 1. We have to show that
we can reconstruct lost data (and parity) when any one or
two strips are lost (e.g., because their disk(s) fail). There
are two cases of single strip loss: (a) the strip is the h-parity
strip or (b) the strip is a data/parity strip. In the ﬁrst case,
no data is lost so the parity can be recomputed by reading
the data in the stripe and recomputing. In the second case,
we can recompute the lost data using either the h-parity or
the v-parity. Using h-parity, a total of rn elements are read
from a total of n strips and each data reconstruction formula
is an n-ary XOR. The lost v-parity element is reconstructed
by an r-ary XOR. On the other hand, using the v-parity each
data element can be reconstructed from r− 1 data elements
(on a diagonal) and its v-parity element (so an r-ary XOR).
The v-parity is reconstructed as before. In this case, a to-
tal of r(r + 1) elements are required from min(n − 1,2r)
strips and each reconstruction formula is an r-ary XOR. As
r ≤ n− 2, using the v-parity is more efﬁcient in both IO and
XOR costs (this also exempliﬁes the performance advan-
tages for smaller values of r; see Section 4.3 for additional
comments).
When two strips are lost, there are two cases:
Case 1: h-parity and one data/parity strip are lost. The
v-parity algorithm above can be used to reconstruct the lost
data/parity strip. Then the h-parity can be recomputed from
the reconstructed data and the remainder of the data ele-
ments in the array. In this case, the entire (good) data ele-
ment substripe and most of the v-parity row needs to be read
(though this is still not necessarily the entire good stripe).
Case 2: two data/parity strips are lost. By rotational
symmetry (wrapping modulo n), we only need to consider
the case where strip(0) and strip(∆) are lost for 1 ≤ ∆ ≤ n/2.
View the v-parity element in strip S as being in position
(r, S) in the stripe. We need a lemma whose proof re-
quires some very simple bookkeeping (which we leave to
the reader):
Lemma 1. For 1 ≤ ∆ ≤ n/2, thediagonal throughtheel-
ement at position (x, S) intersects strip S + ∆ at position
(x− ∆,S + ∆), provided x− ∆ ≥ 0. Otherwise, it does not
intersectatall.
We continue with the proof of Case 2 (s = 1). Consider
a data element on one of the lost strips. It touches two par-
ity elements, one horizontal and one vertical. The h-parity
element is assumed to be good and the h-parity relation
through the given data element must intersect the other lost
strip. That is, this relation has two unknown data elements.
If we reconstruct either of these elements, the other is im-
mediately reconstructible. In contrast, the v-parity element
touched by the given data element falls into three subcases:
(a) it may be on the other lost strip, so is a lost parity el-
ement itself, or (b) it may be good (not on the other lost
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
strip) and the diagonal parity relation (4) does not intersect
the other lost strip, or (c) it may be good and the diagonal
parity relation does intersect the other lost strip. In subcase
(a), the v-parity is useless for any reconstruction. In sub-
case (b), there is only one unknown in the parity relation
(the given data element) and so the element can be recon-
structed.
In case (c), there are two unknowns in (4) and
there is an h-parity element that leads back to the initial lost
strip.
The h-parity and diagonal v-parity relations then build a
set of zig-zag chains through the lost data elements. Each
data element is of one of three types: (a) at the intersection
of a horizontal segment and a diagonal segment with a lost
v-parity endpoint, or (b) at the end-point of a horizontal seg-
ment and can be reconstructed from a diagonal v-parity, or
(c) is an interior point on a zig-zag chain.
These chains partition the set of lost data elements. If
a chain contains an element of type (b), all elements on its
chain are reconstructible. If a chain contains no such ele-
ments (equivalently, the two endpoints must be of type (a)),
then no element on the chain can be reconstructed. This is
the case if and only if there is a chain that connects the two
lost v-parity elements. If such a chain exists, it is unique.
Using the lemma, it is easy to see that the dependency
chain from the lost parity on strip(0) contains:
U(0) → X(r− ∆,∆) → X(r− ∆,0)
→ X(r− 2∆,∆) → X(r− 2∆,0)
→ X(r− k∆,0),
→
···
provided r − k∆ ≥ 0. The chain from the lost v-parity on
strip(∆) starts with U(∆) → X(r − (n− ∆),0). So, the sys-
tem is unrecoverable if and only if there is a k such that
r− k∆ = r− (n− ∆) ≥ 0.
(5)
Suppose the system is unrecoverable. Then such a k ex-
ists and we have (k+1)∆ = n and (n−∆)≤ r, which implies
that ∆|n. We already have ∆ ≤ n/2. The smallest value pos-
sible then for the n− ∆ occurs when ∆ is maximal, that is,
when ∆ = n/pr(n). So, if the system is unrecoverable then
r ≥ n− n/pr(n) as claimed.
Finally, suppose ∆ = n/pr(n) ≤ n/2 and suppose that
r ≥ n−∆. Then k = pr(n)− 1 satisﬁes (5) and the system is
unrecoverable. This completes the proof for s = 1.
For general s ≥ 2, the proof follows the same lines of
reasoning, with the addition of the special case s > n/pr(n)
– this case effectly prevents the v-parity from being located
on a strip with dependent data. We leave out the details. 2
The proof of Case 2 (with s = 1) shows that the set of
dependency chains completely describes the reconstruction
process (partitioning and recursion rules). Now each chain
has an even number of elements (they come in pairs con-
nected by a horizontal segment). When a chain has two
endpoints of type (b), half the lost data elements can be re-
covered from one end of the chain, and the other half from
the other end. By convention, we split such chains into two
separate chains of half-length. This chain splitting mini-
mizes the recursion for a speciﬁc element and so reduces
reconstruction costs. For all failures cases, except when two
adjacent strips are lost (∆ = 1), there are always at least two
chains (after splitting) and so every chain has no more than
r elements (and sometimes as few as one element each).
In the exceptional case when ∆ = 1 (still with s = 1),
there is only one chain and it has one type (b) and one
type (a) endpoint; the chain is maximally long, containing
2r elements. When s ≥ 2, (so the v-parity is separated from
the dependent data by at least one strip), there are always at
least two chains (after splitting). In other words, all chains
have at most r elements and are more efﬁcient for recon-
struction of individual elements.
We remark that for n = p, a prime, both the 1-shift and
the 2-shift allow for r ≤ n− 2, so that there is no efﬁciency
penalty for s = 2 even though we gain the reconstruction ad-
vantage of the 2-shift layout (and in particular, this provides
an advantage over the Samsung DH2 code [13]).
3.2. Three fault tolerance and beyond
There are three natural extensions of the 2-fault toler-
ance code to 3-fault tolerance: (a) add an additional h-parity
strip, v = 1 and h = 2; (b) add an additional v-parity row,
v = 2 and h = 1 (see Section 3.2.1); (c) pack parity ele-
ments more densely keeping v = 1 and h = 1 (see [9]). In
the latter case, it only makes sense to pack into the v-parity
row because the h-parity strip is a single failure domain.
This denser packing is fundamentally how the ZZS [23]
and BCP [1] codes (one parity row, 2-fault tolerant) dif-
fer from the X-code (two parity rows, 2-fault tolerant). We
have not yet discovered an extension of type (a), though
we expect that such codes exist, perhaps as extensions of
Blaum-Roth [4] or EVENODD [2]. (The Nanda code [16]
has h = 2 but is only 2-fault tolerant.)
3.2.1. Two v-parity rows.
In this section we give a con-
struction of a 3-fault tolerant code in the case of v = 2
and h = 1. The theory is weaker here than in the previ-
ous section, but our experimental constructions contain all
array sizes of practical interest. Amongst the many pos-
sible choices, the most obvious seems to be to extend the
[r, n] construction of the previous section by the
HoVer2
1,1
addition of a row of v-parity computed via the “down-
diagonals” in the array. This can be viewed as extending
(a subcode of) the X-code to 3-fault tolerance by adding the
h-parity strip (and dropping the primality constraint on the
array size). Alternative constructions are discussed in [9].
However, placing the down-diagonal parity to the right
of its last entry does not work. We need to left-shift the up-
diagonal and right-shift the down-diagonals as well in order
to get the best range for r.
The following diagram shows an example with both up-
and down-diagonals shifted by 2. In each cell of the data
subarray, the ﬁrst number in the pair indicates the strip num-
ber of the up-diagonal parity element touched by that data
element; the second number is the down-diagonal parity el-
(0)
ement’s strip number. We highlight the diagonal for U2
in bold and for D2
(5) in bold italics.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
0:3
2:5
3:6
4:0
5:1
6:2
0:1
4:5
3:4
5:6
6:0
1:2
0:6
6:5
4:3
5:4
1:0
2:1
0:4
1:5
2:6
6:3
5:2
3:0
(0) U2
(2) U2
(1) U2
(3) U2
(4) U2
(5) U2
U2
(0) D2
(1) D2
(2) D2
(3) D2
(4) D2(5) D2
D2
Mathematically, we compute the two parity rows via:
1:4 H(0)
2:3 H(1)
3:2 H(2)
4:1 H(3)
(6)
(6)
( j) = r−1(cid:1)
( j) = r−1(cid:1)
k=0
k=0
Us0
Ds1
X(r− 1− k,modn( j + k + s0
X(r− 1− k,modn( j− k− s1
)),
)).
(6)
(7)
The following symmetries are inherent in these formulas
] provide a
[r, n] codethenthefollowingsetsofparame-
, s1
(we leave out the simple proof for brevity).
Proposition 1. If the parameters [r, n; s0
valid HoVer3
2,1
tersdoalso:
• [r, n; s1
, s0
• [r, n; n + 1− r− s1
• [r
(cid:5), n; s0
],foranyr
, s1
Furthermore,ifn− r < s0
, n + 1− r− s0
< n orn− r < s1
(cid:5) ≤ r.
];
];
< n,thenthe
codeisinvalid.
, s1
, s1
, s1
, s1
Let r0
(n,[s0
(n,[s0
We do not have a general theorem that determines all
combinations of parameters [r, n; s0
] for which the for-
mulas (6) and (7) provide valid codes. Recall that our goal
is to determine, for a given n, the largest value of r for
which some construction works (that is, the most storage
efﬁcient design). Extensive computer searches over all pos-
sible choices of offsets and all r ≤ n− 3 (the bound of The-
orem 1) lead us to the following theorem and conjectures
that (almost) complete the picture; they depend heavily on
the small prime factors of n, analogous to Theorem 3.
]. Let r0
, s1
]) be the largest value of r so that equa-
[r, n] code with off-
tions (6) and (7) deﬁne a valid HoVer3
2,1
sets [s0
]) over
(n) be the maximum of r0
all offsets [s0
], that is, the best we can achieve with the
up-diagonal and down-diagonal parity formulas (6) and (7).
Recall that pr(n) is the smallest prime divisor and pr2
(n)
is the second smallest distinct prime divisor of n (see the
beginning of Section 3.1).
Theorem 4. For n ≥ 4 therearevalid HoVer3
[r, n] codes
inthefollowingcases:
(n,[1,2]) = n/2−1 (these