# 三、认识 Docker Swarm 模式
在 Dockercon 16 上，Docker 团队提出了一种操作 Swarm 集群的新方法，称为 Swarm 模式。这一宣布被一套新工具的引入略微提前，据说这套工具可以操作任何规模的分布式系统，称为**群集工具包**。
在本章中，我们将:
*   引入群集工具包
*   引入群体模式
*   比较群 v1、群套件和群模式
*   创建一个测试集群，并在其上启动服务
不要跳过阅读群集工具包部分，因为群集工具包是群集模式的基础。看到 Swarmkit 是我们选择引入 Swarm Mode 概念的方式，比如节点、服务、任务。
我们将在[第 4 章](04.html "Chapter 4. Creating a Production-Grade Swarm")*中展示如何创建生产级大集群模式集群，创建生产级集群*。
# 蜂群
除了群模式，Docker 16 的 Docker 团队还发布了群工具包，定义为:
> *“用于在任何规模上编排分布式系统的工具包。它包括用于节点发现、基于 raft 的共识、任务调度等的原语。”*
**集群**集群由活跃的节点组成，既可以作为管理者，也可以作为工作者。
经理通过 Raft 进行协调(也就是说，如[第 2 章](02.html "Chapter 2. Discover the Discovery Services")、*发现发现服务*中所述，他们在法定人数可用时选举领导者)，负责分配资源、协调服务和沿集群分派任务。工人执行任务。
集群的目标是执行*服务*，所以需要运行的是在高层定义的。例如，服务可以是“web”。分配给节点的工作单元被称为**任务**。例如，分配给“web”服务的任务可以是运行 nginx 容器的容器，并且可以被命名为 web.5。
非常重要的一点是要注意，我们说的是服务，服务可能是容器。可能是，没必要。在本书中，我们的重点当然是容器，但是 Swarmkit 的意图是从理论上抽象任何对象的编排。
## 版本和支持
版本注释。我们将在接下来的章节中介绍的 Docker Swarm 模式仅与 Docker 1.12+兼容。相反，使用 Swarmkit，您甚至可以编排 Docker Engines 的早期版本，例如 1.11 或 1.10。
## 群套件架构
**Swarmkit** 是为了处理任何规模的服务集群而发布的编排机制。
在群集工具包集群中，节点可以是**管理人员**(集群的)或**工作人员**(集群的主力，执行计算操作的节点)。
应该有奇数个经理，最好是 3 个或 5 个，这样如果没有分裂的大脑(如[第 2 章](02.html "Chapter 2. Discover the Discovery Services")、*发现发现服务*中所解释的)，大多数经理将驱动集群。Raft 共识算法总是需要法定人数。
一个群集工具包集群可以容纳任意数量的工作人员:1、10、100 或 2，000。
在管理器上，**服务**可以被定义和负载平衡。例如，服务可以是“web”。一个“网络”服务将由运行在集群节点上的几个**任务**组成，包括管理器，例如，一个任务可以是一个 nginx Docker 容器。
![Swarmkit architecture](img/image_03_001.jpg)
在群集工具包中，操作员使用**群集工具**二进制文件与系统远程交互，调用领导者主机上的操作。运行名为**群集**的二进制程序的 Masters 通过 Raft 就领导者达成一致，保持服务和任务的状态，并为工人安排工作。
工作人员运行 Docker 引擎，并将运行它们的作业作为单独的容器。
Swarmkit 架构可能会被重新绘制，但是核心组件(主组件和工作组件)会保留下来。相反，新对象可能会添加插件，用于分配资源，如网络和卷。
### 管理者如何为任务选择最佳节点
群集工具包在集群上生成任务的方式称为**调度**。调度程序是一种算法，它使用过滤器等标准来决定从哪里开始一项任务。
![How a manager chooses the best node for a task](img/image_03_002.jpg)
## 蜂群之心:蜂群
启动 FlowKit 服务的核心二进制文件叫做`swarmd`，它是创建主服务器和连接从服务器的守护程序。
它可以将自己绑定到本地 UNIX 套接字和 TCP 套接字，但在这两种情况下，都可以通过连接到(另一个)专用的 UNIX 本地套接字由`swarmctl`实用程序管理。
在下一节接下来的示例中，我们将使用`swarmd`创建第一个监听端口`4242/tcp`的管理器，然后再次在其他工作节点上使用`swarmd`，使它们加入管理器，最后我们将使用`swarmctl`检查关于我们集群的一些事实。
这些二进制文件被封装到 Docker Hub 上可用的`fsoppelsa/swarmkit`映像中，我们将在这里使用它来简化解释并避免 Go 代码编译。
这是群集的在线帮助。它的可调参数不言自明，所以我们不打算详细介绍所有选项。实际上，最重要的选项是`--listen-remote-api`，定义`swarmd`绑定的`address:port`，以及从其他节点加入集群的`--join-addr`。
![The heart of SwarmKit: swarmd](img/image_03_003.jpg)
## swarm kit 的控制器:swarmctl
`swarmctl`是 SwarmKit 的客户端部分。它是用于操作 SwarmKit 集群的工具，因为它能够显示连接节点的列表、服务和任务的列表以及其他信息。这里，再次从`fsoppelsa/swarmkit``swarmctl`在线帮助:
![The controller of SwarmKit: swarmctl](img/image_03_004.jpg)
## 为群集工具包群集提供 Ansible
在这一节中，我们将提供一个最初由单个管理器和任意数量的从机组成的 FlowKit 集群。
为了创建这样的设置，我们将使用 Ansible 使操作可重复且更加健壮，除了说明命令之外，我们还将继续检查行动手册的结构。您可以轻松地调整这些行动手册，使其在您的提供商或本地运行，但在这里，我们将转到亚马逊 EC2。
要运行这个示例，有一些基本要求。
如果你想在 AWS 上遵循这个例子，当然你必须有一个 AWS 帐户，并配置访问密钥。密钥可从您的**帐户名** | **安全凭证**下的 AWS 控制台中检索。您需要复制以下键的值:
*   访问密钥标识
*   机密访问密钥
我用`awsctl`设置那些键。只要从 *brew* (Mac)或从你的包装系统(如果你使用的是 Linux 或 Windows)安装它，并配置它:
```
aws configure
```
需要时，通过粘贴按键回答提示问题。配置，您可以在其中指定，例如，最喜欢的 AWS 区域(如`us-west-1`)存储在`~/.aws/config`中，而凭据存储在`~/.aws/credentials`中。这样，密钥由 Docker Machine 自动配置和读取。
如果您想运行 Ansible 示例而不是命令，这些是软件要求:
*   Ansible 2.2+
*   与 docker-machine 将在 EC2 上安装的映像兼容的 docker 客户端(在我们的例子中，默认的是 Ubuntu 15.04 LTS)，在编写本文时，Docker 客户端 1.11.2
*   Docker 机器
*   Docker-py 客户端(Ansible 使用的)，可以安装`pip install docker-py`
此外，该示例使用标准端口`4242/tcp`，使集群节点相互交互。因此需要在安全组中打开该端口。
在[https://github.com/fsoppelsa/ansible-swarmkit](https://github.com/fsoppelsa/ansible-swarmkit)克隆存储库，并从设置群集管理器节点开始:
```
ansible-playbook aws_provision_master.yml
```
![Provisioning a SwarmKit cluster with Ansible](img/image_03_005.jpg)
在一些 docker-machine 设置之后，剧本将在管理器主机上启动一个容器，充当一个 SwarmKit 管理器。以下是播放片段:
```
- name: Run the Swarmkit Master 
  docker: 
  name: swarmkit-master 
  image: "fsoppelsa/swarmkit" 
  command: swarmd --listen-remote-api 0.0.0.0:4242 
  expose: 
    - "4242" 
  ports: 
    - "0.0.0.0:4242:4242/tcp" 
  volumes: 
    - "/var/run/docker.sock:/var/run/docker.sock" 
  detach: yes 
  docker_url: "{{ dhost }}" 
  use_tls: encrypt 
  tls_ca_cert: "{{ dcert }}/ca.pem" 
  tls_client_cert: "{{ dcert }}/cert.pem" 
  tls_client_key: "{{ dcert }}/key.pem" 
```
在主机上，映像`fsoppelsa/swarmkit`中名为`swarmkit-master`的容器在管理器模式下运行`swarmd`(它在`0.0.0.0:4242`监听)。`swarmd`二进制直接使用主机上的 Docker 引擎，因此引擎的插座安装在容器内。容器将端口`4242`映射到主机端口`4242`，这样从机通过连接到主机`4242`端口就可以直接到达`swarmd`。
实际上，它相当于这个 Docker 命令:
```
docker run -d -v /var/run/docker.sock:/var/run/docker.sock -p 
    4242:4242 fsoppelsa/swarmkit swarmd --listen-remote-api  
    0.0.0.0:4242
```
该命令以分离模式(`-d`)运行，通过卷(`-v`)传递容器内的 Docker 机器 Docker 套接字，将端口`4242`从容器暴露给主机(`-p`)，并通过在端口`4242`上的任何地址上将容器本身置于监听模式来运行`swarmd`。
剧本完成后，您可以获取`swarmkit-master`机器凭证，并检查我们的容器是否正常运行:
![Provisioning a SwarmKit cluster with Ansible](img/image_03_006.jpg)
现在是时候加入一些奴隶了。要开始一个奴隶，你可以，你猜怎么着，直接跑:
```
ansible-playbook aws_provision_slave.yml
```
但是，由于我们希望将至少几个节点加入到 SwarmKit 集群中，所以我们使用了一点 shell 脚本:
```
for i in $(seq 5); do ansible-playbook aws_provision_slave.yml; 
    done
```
该命令运行五次行动手册，因此创建了五个工作节点。剧本在创建名为`swarmkit-RANDOM`的机器后，将启动一个`fsoppelsa/swarmkit`容器，执行以下操作:
```
- name: Join the slave to the Swarmkit cluster
  docker:
    name: "{{machine_uuid}}"
    image: "fsoppelsa/swarmkit"
    command: swarmd --join-addr "{{ masterip }}":4242
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    detach: yes
    docker_url: "{{ shost }}"
```
这里，集群以加入模式运行，并通过连接到端口`4242/tcp`加入在主机上启动的集群。这相当于以下 docker 命令:
```
docker run -d -v /var/run/docker.sock:/var/run/docker.sock 
    fsoppelsa/swarmkit swarmd --join-addr $(docker-machine ip swarmkit- 
    master):4242
```
ansible `loop`命令需要几分钟才能完成，这取决于有多少工人开始工作。剧本完成后，我们可以使用`swarmctl`控制集群的正确创建。如果您还没有获得`swarmkit-master`机器证书，现在是时候:
```
eval $(docker-machine env swarmkit-master)
```
现在，我们使用 exec 调用运行集群主服务器的容器:
```
docker exec -ti 79d9be555dab swarmctl -s /swarmkitstate/swarmd.sock 
    node ls
```
![Provisioning a SwarmKit cluster with Ansible](img/image_03_007.jpg)
所以，这里我们列出了已经加入主的工人。
## 在群集工具包上创建服务