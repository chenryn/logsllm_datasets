ios where read operations are requested immediately after write operations to
exercise the redirection mechanism under high loads. Based on this performance
benchmarking, we conclude that read redirection mechanism does not impose
a signiﬁcant overhead as we ﬁrst expected. In the following, we demonstrate
that Redemption incurs minimal performance overhead when executing more
realistic workloads for our target audience.
7.4 Real-World Application Testing
To obtain measurable performance indicators to characterize the overhead of
Redemption, we created micro-benchmarks that exercise the critical perfor-
mance paths of Redemption. Note that developing benchmarks and custom
test cases requires careful consideration of factors that might impact the runtime
114
A. Kharraz and E. Kirda
Table 4. Disk I/O performance in a stan-
dard and a Redemption-protected host.
5. Runtime
Table
of
Redemption on a set of end-point
applications
overhead
Operation Original
Write
Rewrite
Read
Create
Redemption
Performance
Performance
112,456.25 KB/s 110094.67KB/s 3.4
68,457.57 KB/s 62501.76 KB/s 8.7
114,124.78 KB/s 112070.53 KB/s 2.8
12,785 files/s
7.3
11,852 files/s
Overhead (%)
66.19
68.58
165.55
182.4
Application Original (s) Redemption (s) Overhead (%)
AESCrypt
AxCrypt
Chrome
IE
Media Player 118.2
134.5
MS Paint
182.17
MS Word
SDelete
219.4
187.5
Vera Crypt
139.7
Winzip
160.8
WinRAR
127.8
zip
Average
-
173.28
191.72
67.02
69.73
118.78
138.91
187.84
231.0
196.46
141.39
163.12
129.32
-
4.67
5.11
1.25
1.67
0.49
3.28
3.11
5.29
4.78
1.21
1.44
1.19
2.6
measurements. For example, a major challenge we had to tackle was automating
the testing of desktop applications with graphical user interfaces. In order to
perform the tests as identical as possible on the standard and Redemption-
enabled machines, we wrote scripts in AutoIt to interact with each application
while monitoring their performance impact. To this end, we called the applica-
tion within the script, and waited for 5 s for the program window to appear. We
then automatically checked whether the GUI of the application is the active win-
dow. The script forced the control’s window of the application to be on top. We
then started interacting with the edit control and other parts of the programs
to exercise the core features of the applications using the handle returned by
the AutoIt script. Similarly to the previous experiment, we repeated each test
10 times. We present the average runtimes in Table 5.
In our experiments, the overhead of protecting a system from ransomware was
under 6% in every test case, and, on average, running applications took only 2.6%
longer to complete their tasks. These results demonstrate that Redemption is
eﬃcient, and that it should not detract from the user experience. These experi-
ments also support that Redemption can provide real time protection against
ransomware without a signiﬁcant performance impact. We must stress that if
Redemption is deployed on machines with a primarily I/O bound workload,
lower performance should be expected as indicated by the benchmark in Sect. 7.3.
7.5 Usability Experiments
We performed a user study experiment with 28 participants to test the usability
of Redemption. We submitted and received IRB waiver for our usability exper-
iments from the oﬃce of Human Subject Research Protection (HSRP). The goal
of the usability test is to determine whether the system provides transparent
monitoring, and also to evaluate how end-users deal with our visual alerts. The
participants were from diﬀerent majors at the authors’ institution. Participants
were recruited by asking for volunteers to help test a security tool. In order
to avoid the eﬀects of priming, the participants were not informed about the
key functionality of Redemption. The recruitment requirement was that the
Redemption: Real-Time Protection Against Ransomware at End-Hosts
115
participants are familiar with text editors and web browsers so that they could
perform the given tasks correctly. All the experiments were conducted using two
identical Windows 7 virtual machines enabled with Redemption on two laptops.
The virtual machines were provided a controlled Internet access as described
in Sect. 7. Redemption was conﬁgured to be in the protection mode on the
entire data space generated for the test user account. A ransomware sample was
automatically started at a random time to observe how the user interacts with
Redemption during a ransomware attack. After each experiment, the virtual
machines were rolled back to the default state. No personal information was
collected from the participants at any point of the experiments.
We asked the participants to perform three tasks to evaluate diﬀerent aspects
of the system. The ﬁrst task was to work with an instance of Microsoft Word
and PowerPoint on the test machines running Redemption. The experiment
observer asked the participants to compare this process with their previous expe-
rience of using Microsoft Word and PowerPoint and rate the diﬃculty involved
in interacting with the test setup on a 5-point Likert scale.
In the second task, the participants were asked to encrypt a folder containing
multiple ﬁles with AxCrypt on the Redemption-enabled machine. This action
caused a visual alert to be displayed to the participant that the operation is
suspended, and ask the user to conﬁrm or deny the action. The participants
were asked to explain why they conﬁrmed or denied the action and the reason
behind their decision.
In the last task, the participants were asked to perform a speciﬁc search on
the Internet. While they were pre-occupied with the task, the ransomware sample
was automatically started. This action was blocked by Redemption and caused
another visual alert to be displayed. Similar to the second task, the experiment
observer monitored how participants handled the alert.
At the end of the ﬁrst phase of the experiment, all 28 participants found the
experience to be identical to using Microsoft Word and PowerPoint on their own
machines. This ﬁnding empirically conﬁrms that Redemption is transparent
to the users. In the second experiment, 26 participants conﬁrmed the action.
Another 2 noticed the alert, but denied the operation so no ﬁle was encrypted.
In the third phase, all the 28 participants noticed the visual alert, and none of
the users conﬁrmed the operation. The participants explained that they were
not sure why they received this visual alert, and could not verify the operation.
These results conﬁrm that Redemption visual alerts are able to draw all par-
ticipants’ attention while they are occupied with other tasks, and are eﬀective in
protecting the user data. Furthermore, the experiments clearly imply that end-
users are more likely to recognize the presence of suspicious operations on their
sensitive data using Redemption indicators. To conﬁrm statistical signiﬁcance,
we performed a hypothesis test where the null hypothesis is that Redemption’s
indicators do not assist in identifying suspicious operations during ransomware
attacks, while the alternative hypothesis is that Redemption’s ransomware indi-
cators do assist in identifying such destructive actions. Using a paired t-test, we
obtain a p-value of 4.9491× 10−7, suﬃcient to reject the null hypothesis at a 1%
signiﬁcance level.
116
A. Kharraz and E. Kirda
8 Discussion and Limitations
Unfortunately, malware research is an arms race. Therefore, there is always the
possibility that malware developers ﬁnd heuristics to bypass the detection on the
analysis systems, or on end-user machines. In the following, we discuss possible
evasion scenarios that can be used by malware authors, and how Redemption
addresses them.
Attacking REDEMPTION Monitor. Note that the interaction of any user-
mode process as well as kernel mode drivers with the ﬁle system is managed
by Windows I/O manager which is responsible for generating appropriate I/O
requests. Since every access in any form should be ﬁrst submitted to the I/O
manager, and Redemption registers callbacks to all the I/O requests, bypassing
Redemption’s monitor is not possible in the user-mode. Furthermore, note that
direct access to the disk or volume is prohibited by Windows from Windows
Vista [27] for user-mode applications in order to protect ﬁle system’s integrity.
Therefore, any other form of requests to access the ﬁles is not possible in the
user-mode, and is guaranteed by the operating system.
Attackers may be able to use social engineering techniques and frustrate users
by creating fake alert messages – accusing a browser to be a ransomware – and
forcing the user to turn oﬀ Redemption. We believe these scenarios are possi-
ble. However, note that such social engineering attacks are well-known security
problems and target all end-point security solutions including our tool. Defend-
ing against such attacks depends more on the security awareness of users and is
out of scope of this work.
Attacking the Malice Score Calculation Function. An attacker may also
target the malice calculation function, and try to keep the malice score of the
process lower than the threshold. For example, an attacker can generate code
that performs selective content overwrite, use a low entropy payload for content
overwrite, or launch periodic ﬁle destruction. If an attacker employs any one
of these techniques by itself, the malice score becomes lower, but the malicious
action would still be distinguishable. For example, if the ﬁle content is overwrit-
ten with low entropy payload, the process receives a lower malice score. However,
since the process overwrites all the content of a ﬁle with a low-entropy payload,
it is itself suspicious, and would be reported to the user.
We believe that the worst case scenario would be if an attacker employs
all the three techniques simultaneously to bypass the malice score calculation
function. This is a fair assumption since developing such a malware is straight-
forward. However, note that in order to launch a successful ransomware attack,
and force the victim to pay the ransom fee, the malicious program needs to
attack more than a ﬁle – preferably all the ﬁles on the system. Hence, even if
the malicious program employs all of the bypassing techniques, it requires some
sort of iteration with write permission over the user ﬁles. This action would
still be seen and captured by Redemption. In this particular case, a malicious
program can successfully encrypt a single user ﬁle, but the subsequent write
attempt on another ﬁle would be reported to the user for the conﬁrmation if the
Redemption: Real-Time Protection Against Ransomware at End-Hosts
117
write request occurs within a pre-deﬁned six hour period after the ﬁrst attempt.
This means a ransomware can successfully encrypt a user ﬁle every six hours.
We should stress that, in this particular scenario, the system cannot guarantee
zero data loss. However, the system signiﬁcantly decreases the eﬀectiveness of
the attack since the number of ﬁles encrypted per day is very small.
Furthermore, since these approaches incur a considerable delay to launch a
successful attack, they also increase the risk of being detected by AV scanners on
the end-point before encrypting a large number of ﬁles, and forcing the user to
pay. Consequently, developing such stealthy ransomware may not be as proﬁtable
as current ransomware attack strategies where the entire point of the attack
is to encrypt as many ﬁles as possible in a short period of time and request
money. An attacker may also avoid performing user ﬁle encryption, and only
lock the desktop once installed. This approach can make the end-user machine
inaccessible. However, such changes are not persistent, and regaining access to
the machine is signiﬁcantly easier, and is out of the scope of this paper.
9 Conclusions
In this paper, we proposed a generic approach, called Redemption, to defend
against ransomware on the end-host. We show that by incorporating the pro-
totype of Redemption as an augmented service to the operating system, it
is possible to successfully stop ransomware attacks on end-user machines. We
showed that the system incurs modest overhead, averaging 2.6% for realistic
workloads. Furthermore, Redemption does not require explicit application sup-
port or any other preconditions to actively protect users against unknown ran-
somware attacks. We provide an anonymous video of Redemption in action
in [4], and hope that the concepts we propose will be useful for end-point pro-
tection providers.
Acknowledgements. This work was supported by the National Science Foundation
(NSF) under grant CNS-1409738, and Secure Business Austria.
References
1. Minotaur Analysis - Malware Repository. minotauranalysis.com/
2. Malware Tips - Your Security Advisor. http://malwaretips.com/forums/virus-ex
change.104/
3. MalwareBlackList - Online Repository of Malicious URLs. http://www.malware
blacklist.com
4. A brief demo on how Redemption operates (2016). https://www.youtube.com/
watch?v=iuEgFVz7a7g
5. AutoIt (2016). https://www.autoitscript.com/site/autoit/
6. IOzone Filesystem Benchmark (2016). www.iozone.org
7. Ajjan, A.: Ransomware: Next-Generation Fake Antivirus (2013). http://www.sop
hos.com/en-us/medialibrary/PDFs/technicalpapers/SophosRansomwareFakeAnti
virus.pdf
118
A. Kharraz and E. Kirda
8. Hern, A.: Major sites including New York Times and BBC hit By Ran-
somware Malvertising (2016). https://www.theguardian.com/technology/2016/
mar/16/major-sites-new-york-times-bbc-ransomware-malvertising
9. Hern, A.: Ransomware threat on the rise as almost 40 percent of bussi-
nesses attacked (2016). https://www.theguardian.com/technology/2016/aug/03/
ransomware-threat-on-the-rise-as-40-of-businesses-attacked
10. Dalton, A.: Hospital paid 17K ransom to hackers of
its computer net-
work (2016). http://bigstory.ap.org/article/d89e63ﬀea8b46d98583bfe06cf2c5af/
hospital-paid-17k-ransom-hackers-its-computer-network
11. BBC News. University pays 20,000 Dollars to ransomware hackers (2016). http://
www.bbc.com/news/technology-36478650
12. Osborne, C.: Researchers launch another salvo at CryptXXX ransomware (2016).
http://www.zdnet.com/article/researchers-launch-another-salvo-at-cryptxxx-rans
omware/
13. Francescani, C.: Ransomware Hackers Blackmail U.S. Police Departments (2016).
http://www.cnbc.com/2016/04/26/ransomware-hackers-blackmail-us-police-depa
rtments.html
14. Mannion, C.: Three U.S. Hospitals Hit in String of Ransomware Attacks (2016).
http://www.nbcnews.com/tech/security/three-u-s-hospitals-hit-string-ransomwar
e-attacks-n544366
15. Continella, A., Guagnelli, A., Zingaro, G., De Pasquale, G., Barenghi, A., Zanero,
S., Maggi, F.: ShieldFS: a self-healing, ransomware-aware ﬁlesystem. In: Proceed-
ings of the 32nd Annual Conference on Computer Security Applications, pp. 336–
347. ACM (2016)
16. Whitcomb, D.: California lawmakers take step toward outlawing ransomware
(2016). http://www.reuters.com/article/us-california-ransomware-idUSKCN0X9
2PA
17. Dell SecureWorks. University of Calgary paid 20K in ransomware attack
(2016). http://www.cbc.ca/news/canada/calgary/university-calgary-ransomware-
cyberattack-1.3620979
18. Gazet, A.: Comparative analysis of various ransomware virii. J. Comput. Virol. 6,
77–90 (2010)
19. Wolf, G.: 8 High Proﬁle Ransomware Attacks You May Not Have Heard Of
(2016). https://www.linkedin.com/pulse/8-high-proﬁle-ransomware-attacks-you-
may-have-heard-gregory-wolf
20. Zremski, J.: New York Senator Seeks to Combat Ransomware (2016). http://www.
govtech.com/security/New-York-Senator-Seeks-to-Combat-Ransomware.html
21. Kharraz, A., Arshad, S., Mulliner, C., Robertson, W., Kirda, E.: A large-scale,
automated approach to detecting ransomware. In: 25th USENIX Security Sympo-
sium (2016)
22. Kharraz, A., Robertson, W., Balzarotti, D., Bilge, L., Kirda, E.: Cutting the
Gordian Knot: a look under the hood of ransomware attacks. In: Almgren, M.,
Gulisano, V., Maggi, F. (eds.) DIMVA 2015. LNCS, vol. 9148, pp. 3–24. Springer,
Cham (2015). doi:10.1007/978-3-319-20550-2 1
23. Kolodenker, E., Koch, W., Stringhini, G., Egele, M.: PayBreak: defense against
cryptographic ransomware. In: Proceedings of the 2017 ACM on Asia Conference
on Computer and Communications Security, ASIA CCS 2017, pp. 599–611. ACM,
New York (2017)
24. Abrams, L.: TeslaCrypt Decrypted: ﬂaw in TeslaCrypt allows Victim’s to
Recover their Files (2016). http://www.bleepingcomputer.com/news/security/
teslacrypt-decrypted-ﬂaw-in-teslacrypt-allows-victims-to-recover-their-ﬁles/
Redemption: Real-Time Protection Against Ransomware at End-Hosts
119
25. Lin, J.: Divergence measures based on the shannon entropy. IEEE Trans. Inform.
Theory 37, 145–151 (1991)
26. Malware Don’t Need Coﬀee. Guess who’s back again? Cryptowall 3.0 (2015).
http://malware.dontneedcoﬀee.com/2015/01/guess-whos-back-again-cryptowall-
30.html
27. Microsoft, Inc. Blocking Direct Write Operations to Volumes and Disks. https://
msdn.microsoft.com/en-us/library/windows/hardware/ﬀ551353(v=vs.85).aspx
28. Microsoft, Inc. Protecting Anti-Malware Services (2016). https://msdn.microsoft.
com/en-us/library/windows/desktop/dn313124(v=vs.85).aspx
29. Ms. Smith. Kansas Heart Hospital hit with ransomware; attackers demand two ran-
soms (2016). http://www.networkworld.com/article/3073495/security/kansas-hea
rt-hospital-hit-with-ransomware-paid-but-attackers-demanded-2nd-ransom.html
30. No-More-Ransomware Project. No More Ransomware! (2016). https://www.
nomoreransom.org/about-the-project.html
31. Scaife, N., Carter, H., Traynor, P., Butler, K.R.: CryptoLock (and Drop It): stop-
ping ransomware attacks on user data. In: IEEE International Conference on Dis-
tributed Computing Systems (ICDCS) (2016)
32. O’Gorman, G., McDonald, G.: Ransomware: A Growing Menance (2012). http://
www.symantec.com/connect/blogs/ransomware-growing-menace
33. Symantec, Inc. Internet Security Threat Report (2014). http://www.symantec.
com/security response/publications/threatreport.jsp
34. TrendLabs. An Onslaught of Online Banking Malware and Ransomware (2013).
http://apac.trendmicro.com/cloud-content/apac/pdfs/security-intelligence/
reports/rpt-cashing-in-on-digital-information.pdf
35. WIRED Magazine. Why Hospitals Are the Perfect Targets for Ransomware
(2016). https://www.wired.com/2016/03/ransomware-why-hospitals-are-the-per
fect-targets/