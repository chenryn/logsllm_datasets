### Verification Cost Analysis for XPilot

**Figure 5.** Verification cost per round using eager round constraints and XPilot-specific optimizations, while checking a 2,000-round XPilot game log.

The verification cost in the eager approach is higher compared to the lazy approach. This is primarily due to the fact that a significant portion of the XPilot client code is dedicated to handling server messages. In the eager case, the verifier preprocesses this portion of the code, resulting in more complex round constraints. In contrast, the lazy approach allows the verifier to know the exact values of the server messages when generating round constraints, leading to simpler and more efficient constraint solving (line 305 of Figure 2).

It is important to note that the lazy and eager approaches are not interchangeable, especially in terms of the effort required by game developers. As discussed in ยง5.4.1, achieving feasible generation of eager round constraints required substantial additional manual tuning, which increases the potential for programmer errors. Therefore, the eager approach appears to be inferior to the lazy approach for XPilot. A different comparison between the two approaches, with varying results, will be provided in ยง6.

### Case Study: Cap-Man

Our client verification technique challenges the current game-design philosophy by allowing servers to relinquish authoritative state to clients while still retaining the ability to validate client behavior and detect cheating. To demonstrate this, we have developed a game called Cap-Man, which is based on Pac-Man.

In some ways, Cap-Man is easier to validate than XPilot. It has a smaller code base (approximately 1,000 lines of C code) and a smaller state size. However, unlike XPilot, which was written with virtually no authoritative client state, Cap-Man intentionally includes a significant amount of authoritative client state, making it more vulnerable to invalid messages. The smaller code base also allows for a more direct comparison between the lazy and eager verification methods.

#### 6.1 The Game

Cap-Man is a Pac-Man-like game where players control an avatar that moves through a discrete, two-dimensional map, aiming to consume all remaining "food" items before being caught by enemies. Each map location can be either an impenetrable wall or an open space. Open spaces can contain an avatar, an enemy, food, a power-up, or nothing. When a player reaches a location with food or a power-up, they automatically consume it. Consuming a power-up puts the player in a temporary "power-up mode," during which enemies reverse course and try to escape. The player can then consume and temporarily displace them if caught. Additionally, Cap-Man introduces a new feature: players can set a bomb at their current location, which detonates after 5 rounds, killing any enemies (or the player) within a certain radius. Players cannot set a second bomb until the first one has detonated.

Cap-Man uses a client-server architecture designed to go against current best practices. The client tracks its own map position, power-up mode time, and bomb placement details. At each round, the client sends a message to the server indicating its current map position and remaining power-up time. If a bomb explodes, the client also reports the explosion's position. The server, in contrast, only sends the updated positions of the enemies, as it maintains the authoritative copy of this state.

This design makes Cap-Man intentionally vulnerable to various invalid-message attacks. For example, a cheating player can adjust their coordinates to move through walls (a cheat known as "telehacking"), put themselves into power-up mode without consuming a power-up, or lie about bomb placements. The server does not have information about the internal logic of the game client, making it crucial to use our verification technique to detect such cheating.

#### 6.2 Evaluation

Using our technique, we can detect various types of invalid-command cheats. We present the results of client-validity checks on a game log consisting of 2,000 rounds (about 6-7 minutes of gameplay), during which the player moved randomly and placed bombs at random intervals.

**Figure 6.** Verification costs for Cap-Man were consistently small, with a mean and standard deviation of 814ms and 1.10s for lazy round constraints (Figure 6(a)) and 260ms and 45.0ms for eager round constraints (Figure 6(b)). The lazy method was, on average, about 2.5 times slower than the eager method, due to the overhead of symbolic execution to compute round constraints for each round individually during verification.

While the XPilot case study showed that eager verification required significantly greater development effort (see ยง5.4.1), this additional effort was unnecessary for Cap-Man due to its relative simplicity.

**Figure 6(c).** The number of satisfiable accumulated constraints did not trend upward during the run and was identical for both eager and lazy approaches. In XPilot, the number of satisfiable accumulated constraints was always 1, but in Cap-Man, there were often multiple accumulated constraints that remained satisfiable at any given round. This increase is primarily due to the hidden state maintained by the Cap-Man client but not immediately reported to the server (e.g., whether a bomb has been set).

The relationship between this hidden state and the number of satisfiable accumulated constraints is crucial. For example, consider verifying a Cap-Man game currently in round \(i\) with no bomb placements in the last 5 rounds. The verifier must maintain accumulated constraints that reflect possible bomb placements at each of rounds \(i-4\) through \(i\). Upon encountering message \(i+1\) with an explosion, the verifier must ensure these constraints are consistent.