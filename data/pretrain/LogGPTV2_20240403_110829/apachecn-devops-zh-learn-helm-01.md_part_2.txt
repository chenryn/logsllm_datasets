我们将在下一节进一步探讨这个问题。
# 资源管理中的方法
为了在 Kubernetes 上部署应用，我们需要与 Kubernetes API 交互来创建资源。`kubectl`是我们用来和 Kubernetes API 对话的工具。`kubectl`是一个**命令行界面** ( **CLI** )工具，用于向最终用户抽象出 Kubernetes API 的复杂性，使他们能够更高效地在平台上工作。
我们来讨论一下`kubectl`如何用来管理 Kubernetes 资源。
## 命令式 和声明式配置
`kubectl`工具提供了系列子命令，以命令方式创建和修改资源。以下是这些命令的小列表:
*   `create`
*   `describe`
*   `edit`
*   `delete`
`kubectl`命令遵循一种通用格式:
```
kubectl   
```
动词指的是`kubectl`子命令之一，名词指的是特定的 Kubernetes 资源。例如，可以运行以下命令来创建部署:
```
kubectl create deployment my-deployment --image=busybox
```
这将指示`kubectl`与部署 API 对话，并使用 Docker Hub 中的 `busybox`映像创建一个名为`my-deployment`的新部署。
您可以使用`kubectl`来获取有关通过使用`describe`子命令创建的部署的更多信息:
```
kubectl describe deployment my-deployment
```
这个命令将检索关于部署的信息，并将结果格式化为可读的格式，允许开发人员检查 Kubernetes 上的实时`my-deployment`部署。
如果需要对部署进行更改，开发人员可以使用`edit`子命令对其进行适当修改:
```
kubectl edit deployment my-deployment
```
该命令将打开一个文本编辑器，允许您修改部署。
删除资源时，用户可以运行`delete`子命令:
```
kubectl delete deployment my-deployment
```
这将指示应用编程接口删除名为`my-deployment`的部署。
Kubernetes 资源一旦创建，就作为 JSON 资源文件存在于集群中，可以作为 YAML 文件导出，以增强可读性。这里可以看到一个 YAML 格式的示例资源:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: busybox
spec:
  replicas: 1
  selector:
    matchLabels:
      app: busybox
  template:
    metadata:
      labels:
        app: busybox
    spec:
      containers:
        - name: main
          image: busybox
          args:
            - sleep
            - infinity
```
前面的 YAML 格式提供了一个非常基本的用例。它从 Docker Hub 部署`busybox`映像，并在有限地运行`sleep`命令，以保持 Pod 运行。
虽然使用我们刚刚描述的`kubectl`子命令创建资源可能更容易，但是 Kubernetes 允许您以声明的方式直接管理 YAML 资源，以获得对资源创建的更多控制。`kubectl`子命令并不总是让您配置所有可能的资源选项，但是直接创建 YAML 文件可以让您更灵活地创建资源并填补`kubectl`子命令可能包含的空白。
当以声明方式创建资源时，用户首先用 YAML 格式写出他们想要创建的资源。接下来，他们使用`kubectl`工具来针对 Kubernetes API 应用资源。在命令式配置中，开发人员使用`kubectl`子命令来管理资源，而声明式配置主要依赖于一个子命令— `apply`。
声明性配置通常采用以下形式:
```
kubectl apply -f my-deployment.yaml
```
该命令为 Kubernetes 提供了一个包含资源规范的 YAML 资源，尽管也可以使用 JSON 格式。Kubernetes 根据资源是否存在来推断要对其执行的操作(创建或修改)。
应用可以通过以下步骤进行声明性配置:
1.  首先，用户可以创建一个名为`deployment.yaml`的文件，并为部署提供一个 YAML 格式的规范。我们将使用与之前相同的示例:
    ```
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: busybox
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: busybox
      template:
        metadata:
          labels:
            app: busybox
        spec:
          containers:
            - name: main
              image: busybox
              args:
                - sleep
                - infinity
    ```
2.  The Deployment can then be created with the following command:
    ```
    kubectl apply -f deployment.yaml
    ```
    运行此命令后，Kubernetes 将尝试按照您指定的方式创建部署。