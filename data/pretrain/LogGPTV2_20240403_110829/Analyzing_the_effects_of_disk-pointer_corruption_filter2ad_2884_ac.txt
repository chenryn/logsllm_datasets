### Corruption and Pointer Integrity in NTFS

**Corruption Implications:**
The term "corruption" often implies that a cluster has been overwritten. By definition, a cluster cannot be inherently corrupted; it is the data within the cluster that can be altered or damaged. 

### Lesson 1: Type Checking for Pointer Corruption
Type checking is a valuable tool for detecting pointer corruption. However, systems that employ type checking should avoid overloading data types. For instance, NTFS does not detect corruption when an index buffer pointer (such as `RootIndxBuf`, `SDH`, `SII`, or `DirIndxBuf`) points to an incorrect index buffer. The data type "INDX" is overloaded, representing different data structures for various purposes. This overloading can lead to further corruption by NTFS. Therefore, it is essential to assign distinct type identifiers to data types used for different purposes to prevent cross-use corruption.

### Pitfall 1: Inadequate and Inconsistent Use of Sanity Checks
We observe that NTFS detects corruption in some pointers with out-of-bounds values, such as `Targetcorrupt`. For example, corruption is immediately detected when `Boot-MFTM` is assigned the value `MFTO` (as shown in Row 2, Column 6 of Figure 1a). These immediate detections indicate the use of sanity checks. However, while NTFS detects corruption when `Boot-MFTM` and `Boot-MFTO` are equal, it allows `MFTO - MFTM` and `MFTO - MFT` to be equal (Row 5, Column 6 in Figure 1a), even though the `Targetoriginal` for each pointer remains the same. This inconsistency highlights the need for a more consistent approach to sanity checks. There are additional examples where some corruptions are recovered from, while others are not even detected.

**Lesson 2: Detailed Sanity Checks for Pointers**
Type checks alone are insufficient for all pointers. Therefore, detailed sanity checks should be implemented. For example, type checking is not useful for pointers like `FileData` because a type identifier cannot be stored in a user data cluster. NTFS fails to perform many simple sanity checks that could determine whether a pointer is corrupt. For instance, NTFS does not check if a pointer pointing to the boot sector (Boot) is greater than a certain value. Not all NTFS behavior can be explained by type or sanity checks. NTFS detects corruption of `UpCase` after reading `Targetcorrupt` in some experiments but fails to do so in others. The nature of these checks is not clearly understood.

### Reactions to Corruption
NTFS responds to detected corruption in various ways, including recovery, error reporting, and retrying mount operations. Table 5 provides details on how NTFS behaves when its pointers are corrupted.

**Observation 2: Replication for Recovery**
NTFS typically uses replication to recover from corruption. For example, it uses a replica of MFT VCN 0 to recover from corruption in the `Boot-MFTO` pointer. Similarly, redundant information in MFT VCN 0 is used to recover from corruption in `Boot-MFTM`. Interestingly, this recovery is temporary, and the correct value is not written back to the corrupt pointer, leading to potential unrecoverable data loss in the event of a second failure.

**Observation 3: Error Reporting and Retries**
When unable to recover, NTFS reports errors and retries the mount operation. For instance, for pointers like `MFTO-MFT` and `LogFile`, NTFS reports an error to the application and retries the mount, hoping the corruption is transient. These retries fail if the corruption is persistent.

**Observation 4: Attempted Data Structure Repair**
NTFS attempts to repair certain data structures it believes to be corrupt. For example, if the `SDS` pointer is corrupted, NTFS assumes the security descriptors are corrupt and reinitializes the data structure, potentially causing more harm. Similar behavior occurs when `LogFile` points to `LogResDup` instead of `LogRes`.

**Pitfall 2: Incorrect Target vs. Pointer Detection**
NTFS sometimes trusts the pointer to be correct while suspecting the target cluster is corrupt. Attempting to repair the target can cause more damage if the corruption is actually in the pointer.

### Summary of NTFS Behavior
Table 6 summarizes NTFS behavior on pointer corruption. Despite having redundant information, NTFS detects errors but fails to recover in 87 cases and causes further corruption in 88 cases.

**Pitfall 3: Ineffective Replica Management**
- **(a) Not Using Available Replicas:** NTFS does not use replicas available in the MFT mirror for most scenarios.
- **(b) Destroying Secondary Replicas:** NTFS overwrites the MFT mirror with data from the corrupt MFT, destroying the secondary replica.
- **(c) Lack of Independent Access Paths:** Some data structures use a single pointer to access both the regular copy and the replica, making both inaccessible if the pointer is corrupted.

**Pitfall 4: Misunderstanding Index Importance**
NTFS uses indexes like `SDH` and `SII` for security descriptors. While these indexes are primarily for performance, their unavailability should not cause complete failure. However, NTFS does not recover when these indexes are corrupted.

### User-Visible Results
**Observation 5: Correct System Operation with Recovery**
The system operates correctly in 61 scenarios (17%) where NTFS detects and recovers from corruption. For example, corruption in the boot sector's `MFT` or `MFTMirror` does not affect normal operation.

**Observation 6: Unmountable File System**
The file system becomes unmountable in 133 scenarios (37%) when NTFS detects but cannot recover from corruption, or when undetected corruption (e.g., in `FileData`) corrupts key data structures.

**Observation 7: Other User-Visible Results**
- **(a) Data or Metadata Loss:** Occurs in 102 scenarios (28%). For example, corruption in `DirIndxBuf`, `RootSecDesc`, `SDS`, and `UpCase` renders data inaccessible.
- **(b) File Operation Failures:** In 127 scenarios (35%), file operations fail due to pointer corruption. For instance, creating files fails when `SDH` is corrupted.
- **(c) User Data Corruption:** Occurs in 8 scenarios (2%) when user file data is overwritten with other data or metadata.

**Lesson 3: Security Risks of Undetected Corruption**
Undetected pointer corruption can pose significant security risks. For example, corruption in `MFTBitmap` can result in a system crash, affecting the entire system.

By systematically setting bits in `Targetcorrupt`, we can better understand and mitigate the impact of pointer corruption in NTFS.