1;2
1;2
1;2
1;4
1;2
1;5
POODLE
Query Time
rank (discovRE) Multi-MH Multi-k-MH
7.2 · 105
3.2 · 106
6.4 · 106
2.2 · 105
9.7 · 105
1.9 · 106
1
1
1
1
1
1
1
1
1
see above
see above
discovRE
55.2 ms
76.1 ms
80.9 ms
54.7 ms
72.4 ms
84.2 ms
51.2 ms
77.0 ms
81.3 ms
TABLE VII: Results for searching different bugs in whole ﬁrmware images.
robust against code modiﬁcations. BINJUICE [40] normalized
instructions of a basic block to extract its semantic “juice”,
which presents the relationships established by the block.
Semantically similar basic blocks were then identiﬁed through
lexical comparisons of juices. This approach only works at
the basic block level and was extended to ﬁnd similar code
fragments that span several blocks. BINHASH [36] models
functions as a set of features that represent the input-output
behavior of a basic block. EXPOS ´E [52] is a search engine for
binary code that uses simple features such as the number of
functions to identify a set of candidate function matches. These
candidates are then veriﬁed by symbolically executing both
functions and leveraging a theorem prover. EXPOS ´E assumes
that all functions use the cdecl calling convention, which
is a very limiting assumptions even for binaries of the same
architecture. David et al. [21] proposed to decompose functions
into continuous, short, partial traces of an execution called
tracelets. The similarity between two tracelets is computed
by measuring how many rewrites are required to reach one
tracelet from another. In the experiments the authors only
considered functions with at least 100 basic blocks, which is
rarely the case. Moreover, this method is not robust against
compiler optimizations. TEDEM [54] automatically identiﬁes
binary code regions that are similar to code regions containing
a known bug. It uses tree edit distances as a basic block centric
metric for code similarity.
The most recent and advanced method to search for known
bugs in binary code across different architectures was proposed
by Pewny et al. [53]. First, the binary code is translated into the
Valgrind intermediate representation VEX [9]. Then, concrete
inputs are sampled to observe the input-output behavior of
basic blocks, which grasps their semantics. Finally, the I/O
behavior is used to ﬁnd code parts that behave similarly to the
bug signature. While the use of semantics similarity delivers
precise results, it is too slow to be applicable to large code
bases.
Previous work also explored methods that rely on dynamic
analysis. Egele et al. [23] proposed Blanket Execution (BLEX)
to match functions in binaries. To this end, BLEX executes
each function for several calling contexts and collects the
side effects of functions during execution under a controlled
randomized environment. Two functions are considered sim-
ilar if their corresponding side effects are similar. Dynamic
analysis approaches use architecture-speciﬁc tools to run and
instrument executables. For this reason, they are inherently
difﬁcult to extend to different architectures.
VII. CONCLUSION AND FUTURE WORK
We presented a system to efﬁciently identify already known
bugs in binary code across different compilers, compiler op-
timizations, CPU architectures, and operating systems. In the
preparation phase, a code base of known functions is analyzed
and their numeric and structural features are stored. When a
new bug is published, the vulnerable function is identiﬁed and
that function is queried. Our approach employs a two-staged
ﬁltering approach to quickly identify the buggy function even
in large code bases. The ﬁrst ﬁlter relies on a set of robust
numeric features to retrieve very similar functions based on the
kNN algorithm. These functions serve as candidates to the next
13
stage that measures the structural similarity of these candidates
to the target function. To this end we use an approximation of
the maximum common subgraph isomorphism.
We implemented our methods in a tool called discovRE and
evaluated its efﬁcacy on real-world ﬁrmware images with up
to 3 million basic blocks. Here, the preparation time was about
50 minutes. discovRE could correctly identify buggy function
(e.g., Heartbleed or POODLE) from ARM, MIPS and x86 in
three complete ﬁrmware images in about 80 ms.
A. Future Work
One outstanding source of a large distance between two
functions with the same label is the different implementation
of string operations. While some compilers invoke a function
by pointing to the appropriate code, others apply the respective
string operation directly. Additionally, some string operations
are expressed differently, e.g., through rep preﬁxes vs. loops.
This leads to substantial differences in the respective CFGs.
Hence, a different representation could eliminate some of
the described drawbacks of function inlining. For example,
Yakdan et al. present a method to outline functions such as
strcpy [61]. Other graph representations of functions are
also interesting subjects for scrutinization and left for future
work, e.g., the abstract syntax tree or the program dependence
graph [62]. Additionally, we want to identify unrolled loops
to further improve the recognition rate.
In the future, we plan to evaluate the false positive rate
of discovRE. In our evaluation, the target function was in the
queried code base. If the queried function does not exist in
the binary or the binary has a patched version of the queried
function, the result is false positive. We plan to investigate
the possibility of introducing a threshold on the distance
measure to classify functions as real matches or false positives.
Additionally, the structural distance function can be modiﬁed
into a similarity score between the queried function and the
returned match.
In the future, we plan further research on using discovRE to
assist manual reverse engineering of malware. In this setting, a
malware analyst can use discovRE to ﬁnd similar functions in
a new version of malware. This helps her to quickly identify
new functionality in the new version. Another line of research
that we intend to follow in the future is employing discovRE
for clustering malware families.
ACKNOWLEDGEMENTS
We thank our shepherd Thorsten Holz for his support in
ﬁnalizing this paper. We would also like to thank the anony-
mous reviewers for their valuable feedback. We are grateful to
Jannik Pewny for sharing the binaries and experiment results.
REFERENCES
[1] BitDHT. http://bitdht.sourceforge.net/ (last visit: 2015-07-30).
[2] GnuPG. http://www.gnupg.org/ (last visit: 2015-07-30).
[3] SQLite. http://www.sqlite.org (last visit: 2015-01-30).
[4] stunnel. http://www.stunnel.org/ (last visit: 2015-07-30).
[5] The Heartbleed Vulnerability. http://heartbleed.com/.
(last visit 2015-
[6] The IDA Pro Disassembler and Debugger. http://www.hex-rays.com/
08-10).
idapro/.
[7] The POODLE Vulnerability. https://www.poodletest.com/.
(last visit
[8] The Shellshock Vulnerability. https://shellshocker.net/. (last visit 2015-
2015-08-10).
08-10).
[9] Valgrind Documentation.
http://valgrind.org/docs/manual/index.html.
(last visit 2015-10-08).
[10] DD-WRT Firmware Image r21676, 2013.
ftp://ftp.dd-wrt.com/others/
eko/BrainSlayer-V24-preSP2/2013/05-27-2013-r21676/senao-eoc5610/
linux.bin (last visit: 2015-04-14).
[11] ReadyNAS Firmware Image v6.1.6, 2013.
http://www.downloads.
netgear.com/ﬁles/GDC/READYNAS-100/ReadyNASOS-6.1.6-arm.zip
(last visit: 2015-04-14).
[12] A. V. Aho. Compilers: Principles, Techniques and Tools, 2/e. Pearson
Education India, 2003.
[13] A. V. Aho, J. E. Hopcroft, and J. D. Vilman. The Design and Analysis
of Computer Algorithms. Addison-Wesley, 1st edition, 1974.
[14] T. Avgerinos, S. K. Cha, B. L. T. Hao, and D. Brumley. AEG:
In Network and Distributed System
Automatic Exploit Generation.
Security Symposium (NDSS), 2011.
[15] G. Balakrishnan. WYSINWYX: What You See Is Not What You eXecute.
PhD thesis, Computer Science Department, University of Wisconsin-
Madison, 2007.
[16] T. Bao, J. Burket, M. Woo, R. Turner, and D. Brumley. BYTEWEIGHT:
Learning to Recognize Functions in Binary Code. In Proceedings of the
23rd USENIX Security Symposium, 2014.
[17] D. Brumley, T. Chiueh, R. Johnson, H. Lin, and D. Song. RICH:
In
the 14th Network and Distributed System Security
Automatically Protecting Against Integer-Based Vulnerabilities.
Proceedings of
Symposium (NDSS), 2007.
[18] H. Bunke and K. Shearer. A graph distance metric based on the maximal
common subgraph. Pattern Recognition Letters, 19(3–4):255–259, 1998.
[19] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley. Unleashing
Mayhem on Binary Code. In Proceedings of the 2012 IEEE Symposium
on Security and Privacy (S&P), 2012.
[20] K. Coogan, G. Lu, and S. Debray. Deobfuscation of Virtualization-
obfuscated Software: A Semantics-based Approach. In Proceedings of
the 18th ACM Conference on Computer and Communications Security
(CCS), 2011.
[21] Y. David and E. Yahav. Tracelet-based code search in executables. In
Proceedings of the 35th ACM SIGPLAN Conference on Programming
Language Design and Implementation, page 37. ACM, 2014.
[22] T. Dullien and R. Rolles. Graph-based comparison of executable objects.
SSTIC, 5:1–3, 2005.
[23] M. Egele, M. Woo, P. Chapman, and D. Brumley. Blanket Execution:
Dynamic Similarity Testing for Program Binaries and Components. In
Proceedings of the 23rd USENIX Security Symposium, 2014.
[24] H. Flake. Structural Comparison of Executable Objects. In Proceedings
of the IEEE Conference on Detection of Intrusions and Malware &
Vulnerability Assessment (DIMVA), pages 161–173, 2004.
[25] Free Software Foundation. GCC, the GNU Compiler Collection, 2010.
http://gcc.gnu.org/ (last visit: 2015-01-30).
[26] D. Gao, M. K. Reiter, , and D. Song. BinHunt: Automatically Finding
In Proceedings of the 4th
Semantic Differences in Binary Programs.
International Conference on Information Systems Security, 2008.
[27] F. Gauthier, T. Lavoie, and E. Merlo. Uncovering Access Control
Weaknesses and Flaws with Security-discordant Software Clones.
In
Proceedings of the 29th Annual Computer Security Applications Con-
ference (ACSAC), 2013.
[28] I. Guilfanov. Fast Library Identiﬁcation and Recognition Technology in
IDA Pro, 12 1997. https://www.hex-rays.com/products/ida/tech/ﬂirt/in
depth.shtml (last visit: 2015-01-22).
[29] X. Hu, T.-c. Chiueh, and K. G. Shin. Large-scale malware indexing
using function-call graphs. In Proceedings of the 16th ACM conference
on Computer and communications security, pages 611–620. ACM, 2009.
[30] ImageMagick Studio LLC. ImageMagick. http://www.imagemagick.org
(last visit: 2015-07-30).
[31] Intel Corporation. Intel C++ Compiler. http://software.intel.com/en-us/
intel-compilers/ (last visit: 2015-01-30).
[32] Intel Corporation. The OpenCV Library. http://sourceforge.net/projects/
opencvlibrary/ (last visit: 2015-07-30).
[33] Intel Corporation. Intel 64 and IA-32 Architectures Software Developer’s
Manuals 1–3, 2009.
[34] J. Jang, D. Brumley, and A. Agrawal. ReDeBug: Finding Unpatched
In Proceedings of the 33rd
Code Clones in Entire OS Distributions.
IEEE Symposium on Security and Privacy (S&P), 2012.
14
[35] L. Jiang, G. Misherghi, Z. Su, and S. Glondu. DECKARD: Scalable and
Accurate Tree-Based Detection of Code Clones. In Proceedings of the
29th International Conference on Software Engineering (ICSE), 2007.
[36] W. Jin, S. Chaki, C. Cohen, A. Gurﬁnkel, J. Havrilla, C. Hines, and
P. Narasimhan. Binary function clustering using semantic hashes.
In
Machine Learning and Applications (ICMLA), 2012 11th International
Conference on, volume 1, pages 386–391. IEEE, 2012.
[37] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A Static Analysis Tool
In Proceedings of the
for Detecting Web Application Vulnerabilities.
2006 IEEE Symposium on Security and Privacy (S&P), 2006.
[38] T. Kamiya, S. Kusumoto, and K. Inoue. CCFinder: A Multilinguistic
Token-based Code Clone Detection System for Large Scale Source Code.
IEEE Trans. Softw. Eng., 28(7):654–670, July 2002.
[39] C. Kruegel, W. Robertson, F. Valeur, and G. Vigna. Static Disassembly of
Obfuscated Binaries. In Proceedings of the 13th Conference on USENIX
Security Symposium, 2004.
[40] A. Lakhotia, M. D. Preda, and R. Giacobazzi. Fast Location of Similar
In Proceedings of the 2Nd
Code Fragments Using Semantic ’Juice’.
ACM SIGPLAN Program Protection and Reverse Engineering Workshop
(PPREW), 2013.
[41] C. Lattner and V. Adve. Llvm: A compilation framework for lifelong
program analysis & transformation. In Code Generation and Optimiza-
tion, 2004. CGO 2004. International Symposium on, pages 75–86. IEEE,
2004.
[42] B. Lee, C. Song, T. Kim, and W. Lee. Type Casting Veriﬁcation:
Stopping an Emerging Attack Vector. In Proceedings of the 24th USENIX
Security Symposium, 2015.
[43] Z. Li, S. Lu, S. Myagmar, and Y. Zhou. CP-Miner: A Tool for Finding
Copy-paste and Related Bugs in Operating System Code. In Proceedings
of the 6th Conference on Symposium on Opearting Systems Design &
Implementation (OSDI), 2004.
[44] L. Luo, J. Ming, D. Wu, P. Liu, and S. Zhu.
Semantics-based
Obfuscation-resilient Binary Code Similarity Comparison with Appli-
cations to Software Plagiarism Detection. In Proceedings of the 22nd
ACM SIGSOFT International Symposium on Foundations of Software
Engineering (FSE), 2014.
[45] R. Marimont and M. Shapiro. Nearest neighbour searches and the curse
of dimensionality. IMA Journal of Applied Mathematics, 24(1):59–70,
1979.
[46] McCabe Software. More Complex = Less Secure. Miss a Test Path
and You Could Get Hacked, 2012. http://www.mccabe.com/pdf/More%
20Complex%20Equals%20Less%20Secure-McCabe.pdf
visit:
2015-04-14).
[47] J. J. McGregor. Backtrack search algorithms and the maximal common
subgraph problem. Software: Practice and Experience, 12(1):23–34,
1982.
(last
[48] Microsoft Corporation. Microsoft Visual C++, 2007.
http://msdn.
microsoft.com/visualc (last visit: 2015-01-30).
[49] J. Ming, M. Pan, and D. Gao.
procedural Control Flow.
Conference on Information Security and Cryptology, 2013.
iBinHunt: Binary Hunting with Inter-
In Proceedings of the 15th International
[50] M. Muja and D. G. Lowe. Fast approximate nearest neighbors with
automatic algorithm conﬁguration. VISAPP (1), 2, 2009.
[51] G. Myles and C. Collberg. K-gram Based Software Birthmarks.
In
Proceedings of the 2005 ACM Symposium on Applied Computing (SAC),
2005.
[52] B. H. Ng and A. Prakash. Expos´e: Discovering Potential Binary Code
In Proceedings of the 37th Annual IEEE Computer Software
Re-use.
and Applications Conference (COMPSAC), 2013.
[53] J. Pewny, B. Garmany, R. Gawlik, C. Rossow, and T. Holz. Cross-
Architecture Bug Search in Binary Executables. In Proceedings of the
36th IEEE Symposium on Security and Privacy (S&P), 2015.
[54] J. Pewny, F. Schuster, L. Bernhard, T. Holz, and C. Rossow. Leveraging
Semantic Signatures for Bug Search in Binary Programs. In Proceedings
of the 30th Annual Computer Security Applications Conference (ACSAC),
2014.
[55] E. C. R. Shin, D. Song, and R. Moazzezi. Recognizing Functions in
In Proceedings of the 24th USENIX
Binaries with Neural Networks.
Security Symposium, 2015.
[56] Source Forge. http://sourceforge.net (last visit: 2015-02-20).
[57] The LAME Project. LAME MP3 Encoder. http://lame.sourceforge.net
(last visit: 2015-01-30).
[58] M. Wall. Galib: A c++ library of genetic algorithm components. Mechan-
ical Engineering Department, Massachusetts Institute of Technology,
87:54, 1996.
[59] X. Wang, H. Chen, Z. Jia, N. Zeldovich, and M. F. Kaashoek. Improving
In Proceedings of the 10th
Integer Security for Systems with KINT.
USENIX Conference on Operating Systems Design and Implementation
(OSDI), 2012.
[60] B. Yadegari, B. Johannesmeyer, B. Whitely, and S. Debray. A Generic
Approach to Automatic Deobfuscation of Executable Code. In Proceed-
ings of the 36th IEEE Symposium on Security and Privacy (S&P), 2015.
[61] K. Yakdan, S. Eschweiler, E. Gerhards-Padilla, and M. Smith. No
More Gotos: Decompilation Using Pattern-Independent Control-Flow
Structuring and Semantics-Preserving Transformations. In Proceedings
of the 22nd Annual Network and Distributed System Security Symposium
(NDSS), 2015.
[62] F. Yamaguchi, N. Golde, D. Arp, and K. Rieck. Modeling and
Discovering Vulnerabilities with Code Property Graphs. In Proceedings
of the 35th IEEE Symposium on Security and Privacy (S&P), 2014.
[63] F. Yamaguchi, M. Lottmann, and K. Rieck. Generalized Vulnerability
Extrapolation Using Abstract Syntax Trees. In Proceedings of the 28th
Annual Computer Security Applications Conference (ACSAC), 2012.
[64] P. N. Yianilos. Data structures and algorithms for nearest neighbor search
In Proceedings of the fourth annual ACM-
in general metric spaces.
SIAM Symposium on Discrete algorithms, pages 311–321. Society for
Industrial and Applied Mathematics, 1993.
[65] J. Zeng, Y. Fu, K. A. Miller, Z. Lin, X. Zhang, and D. Xu. Obfuscation
Resilient Binary Code Reuse Through Trace-oriented Programming. In
Proceedings of the 20th ACM Conference on Computer and Communi-
cations Security (CCS), 2013.
[66] M. Zitser, R. Lippmann, and T. Leek. Testing Static Analysis Tools
Using Exploitable Buffer Overﬂows from Open Source Code. In Pro-
ceedings of the 12th ACM SIGSOFT Twelfth International Symposium
on Foundations of Software Engineering (SIGSOFT FSE), 2004.
15