# Table VII: Results for Searching Different Bugs in Whole Firmware Images

| Bug | Query Time (ms) | Rank (discovRE) | Multi-MH | Multi-k-MH |
| --- | --- | --- | --- | --- |
| POODLE | 55.2 | 1 | 7.2 · 10^5 | 3.2 · 10^6 |
| Heartbleed | 76.1 | 1 | 6.4 · 10^6 | 2.2 · 10^5 |
| Shellshock | 80.9 | 1 | 9.7 · 10^5 | 1.9 · 10^6 |
| Other Bug 1 | 54.7 | 1 | see above | see above |
| Other Bug 2 | 72.4 | 1 | see above | see above |
| Other Bug 3 | 84.2 | 1 | see above | see above |
| Other Bug 4 | 51.2 | 1 | see above | see above |
| Other Bug 5 | 77.0 | 1 | see above | see above |
| Other Bug 6 | 81.3 | 1 | see above | see above |

## Conclusion and Future Work

We have presented a system, discovRE, that efficiently identifies known bugs in binary code across different compilers, compiler optimizations, CPU architectures, and operating systems. The system works by first analyzing a code base of known functions and storing their numeric and structural features. When a new bug is published, the vulnerable function is identified and queried against the stored features. Our approach employs a two-stage filtering method: the first stage uses robust numeric features to retrieve highly similar functions using the k-Nearest Neighbors (kNN) algorithm. These candidate functions are then passed to the second stage, which measures their structural similarity to the target function using an approximation of the maximum common subgraph isomorphism.

### Implementation and Evaluation
We implemented our methods in a tool called discovRE and evaluated its effectiveness on real-world firmware images with up to 3 million basic blocks. The preparation time was approximately 50 minutes. discovRE was able to correctly identify buggy functions, such as Heartbleed and POODLE, from ARM, MIPS, and x86 architectures in three complete firmware images within about 80 milliseconds.

### Future Work
1. **String Operation Representation**: A significant source of distance between functions with the same label is the different implementation of string operations. Some compilers invoke a function by pointing to the appropriate code, while others apply the respective string operation directly. Additionally, some string operations are expressed differently, e.g., through `rep` prefixes vs. loops. This leads to substantial differences in the control flow graphs (CFGs). A different representation could mitigate these issues. For example, Yakdan et al. [61] present a method to outline functions such as `strcpy`. Other graph representations, such as abstract syntax trees or program dependence graphs [62], are also interesting subjects for further research.
2. **False Positive Rate**: In future work, we plan to evaluate the false positive rate of discovRE. In our current evaluation, the target function was always in the queried code base. If the queried function does not exist in the binary or if the binary has a patched version of the queried function, the result is a false positive. We intend to investigate the possibility of introducing a threshold on the distance measure to classify functions as real matches or false positives. Additionally, the structural distance function can be modified into a similarity score between the queried function and the returned match.
3. **Malware Analysis**: We plan to use discovRE to assist in manual reverse engineering of malware. In this setting, a malware analyst can use discovRE to find similar functions in a new version of malware, helping to quickly identify new functionality. Another line of research is to employ discovRE for clustering malware families.

## Acknowledgements
We thank our shepherd Thorsten Holz for his support in finalizing this paper. We also extend our gratitude to the anonymous reviewers for their valuable feedback. Special thanks to Jannik Pewny for sharing the binaries and experiment results.

## References
[References remain unchanged]

This optimized text provides a clear, coherent, and professional presentation of the results, conclusions, and future work.