42156
53018
Table 2. Cycles to make ten transitions
memory type used
instruction store, pkt access in register
same, with pkt access in SDRAM
SRAM, pkt access in register
same, with pkt access in SDRAM
cycles
330
410
760
830
easily handle the traﬃc (even when we did not store any states in instruction-
store whatsoever).
As a second experiment, we examined the number of cycles that were needed
to process packets of various sizes. The results are shown in Table 1. These
speeds suggest that a single thread could process approximately 52.5 Mbps for
maximum-sized non-TCP packets. By gross approximation, we estimate that
with eight processing threads this leads to a throughput of roughly 400 Mbps
(accounting neither for adverse eﬀects of memory stalls, or beneﬁcial eﬀects from
latency hiding). We show that in reality we perform a little better.
The penalty for in-memory DFA transitions, compared to inline transitions
is shown in Table 2. The table lists the number of cycles needed for ten state
transitions in the DFA. For inline and in-memory we measure the results both
when the packet is still in SDRAM, and when the packet data is already in
read registers on-chip. The diﬀerence is 70-80 cycles. The table shows that in-
memory state transitions are approximately twice as expensive as inline ones.
One might expect that this also results in a maximum sustainable rate for a
completely in-memory implementation that is half of that of a completely inline
implementation, but this is not the case, as memory latency hiding techniques
with multiple threads is quite eﬀective.
Our ﬁnal experiment is a stress-test in which we blast CardGuard with packets
sent by iperf (running for 3 minutes) from a 1.8GHz P4 running a Linux 2.4
kernel equiped with a SysKonnect GigE interface. We evaluate the throughput
that CardGuard achieves under worst case conditions. Worst case means that
the payload of every single packet needs to be checked from start to ﬁnish. This
is not a realistic scenario, as snort rules tend to apply to a single protocol and
one destination port only. For example, it makes no sense to check web rules
for non-webtraﬃc. In this experiment, we deliberately send traﬃc of which each
packet is checked in its entirety. The assumption is that if we are able to achieve
realistic network speeds under these circumstances, we will surely have met the
requirements deﬁned in Section 1.
Figure 4(b) shows the throughput achieved for various types of traﬃc and
actions (median values over a series of runs). Note that as long as the network is
not under heavy attack, the results are hardly inﬂuenced by which rule sets and
traces are used, due to the locality of reference observed earlier. The top line
Towards Software-Based Signature Detection for Intrusion Prevention
119
Fig. 4. (a) locality in Aho-Corasick, and (b) CardGuard’ UDP and TCP throughput
shows the throughput when all UDP packets are checked and forwarded (with
the two MEh/t microengines turned into MEac microengines), so for UDP we
achieve maximum throughput. The line below UDP shows the throughput of
TCP, when TCP segments are simply forwarded, but not checked. The reason
why it performs fairly poorly, compared to UDP is that the traﬃc generator was
the bottleneck, not CardGuard (rude was used as UDP generator). Finally, the
most important line is the bottom line, which shows the maximum throughput
for TCP when the full streams are reconstructed and the entire stream is scanned.
We conclude that CardGuard meets the requirement of handling 100 Mbps under
worst case assumptions.
CardGuard adds one additional feature: it is able to limit the number of
incoming and outgoing connections. The default conﬁguration is that ten in-
bound and ten outbound connections are premitted. With this conﬁguration,
we are able to sustain the maximum rates at worst-case conditions. More ﬂows
are possible, but in that case the aggregate rate drops (the system tops out at
100 Mbps for ≤ 10 connections). This is unlikely to be a problem for most ap-
plications, but some (e.g., some peer-to-peer clients) may suﬀer from reduced
bandwidth. In our view, ten is a reasonable choice for most end-user set-ups, be-
cause end-user systems are not expected to have many connections open at the
same time. For servers these numbers may be increased. As systems in practice
do not work under such extreme conditions where every packet needs a full scan,
we expect to sustain high rates even with larger numbers of connections. Note
that CardGuard always remains on the conservative side. If the rate cannot be
supported, the packets are dropped. In other words, it does not suﬀer from false
negatives.
Discussion: Network Processing on the Card
While we have shown that CardGuard performs well, despite its ﬁve year old
network processor, we now return to two questions that were touched upon in
Section 1: (1) whether it is necessary to perform signature detection on the
card, and if so, (2) whether a network processor is the most appropriate choice.
Alternative approaches may be a centralised ﬁrewall with payload scanning,
120
H. Bos and K. Huang
signature detection on the end node’s main processor, and detection on the card
with a diﬀerent processor (e.g., an ASIC, FPGA, or full-blown CPU).
Technically, it may be diﬃcult to perform payload scanning at high rates in a
centralised ﬁrewall. While the CPU of a modern PC probably is powerful enough
to scan an end user’s traﬃc, we should bear in mind that network speed grows
harder than Moore’s law. Furthermore, the ﬁrst question has as much to do with
policies and politics as with technology. A programmable network card is remote
from the user and hence simpler to protect from manipulation. Moreover, while
host processors may be fast enough to perform signature detection, doing so
consumes many cycles. When we evaluated the same signature detection algo-
rithm on a 1.8 GHz P4 (Linux 2.4 kernel) equiped with a SysKonnect GigE card,
we were unable to achieve rates greater than 69 Mbps. Note that this is at a
clock rate that is 8 times higher than that of the IXP1200. Over the loopback
device we were able to achieve signiﬁcantly more than 100 Mbps, but only at
the cost of high CPU loads that leave few cycles for useful work. Breaking down
the overhead, we found that the signature detection algorithm consumes over
90% of the processing time, suggesting that perhaps it is a better candidate for
oﬀ-loading than TCP is for TOEs.
The second question concerns whether a network processor is the best choice
on the card. ASICs and FPGAs are attractive alternatives in terms of speed.
On the other hand, they are more complex to modify. Additionally, compared to
C programmers, VHDL/Verilog programmers are scarce. In contrast, we experi-
enced at ﬁrst hand how simple it was to modify an older version of CardGuard
for students with only experience in C programming. While the same would be
true a fortiori for general purpose processors, installing such a processor on a
NIC is probably overkill and requires more extensive cooling as it needs to run
at higher frequencies to keep up.
More importantly, this paper is meant to explore the design space by studying
the feasibility of one the extremes in the design space: a software-only solution on
the NIC. While the other approaches have been studied previously, to the best of
our knowledge, this is the ﬁrst time anyone has explored this extreme.
6 Related Work
According to the taxonomy in [22], our work would be categorised as a knowledge-
based IDS with an active response based on the packet scanning using continuous
monitoring with state-based detection. As such it diﬀers from (a) passive sys-
tems like HayStack [23], (b) approaches that use network traﬃc statistics like
GrIDS [24], (c) transition-based approaches like Netranger [25], (d) periodic an-
alyzers like Satan [26]. In the terminology of [27], CardGuard is a ‘containment’
solution, which the authors identify as the most promising approach to stop
self-propagating code. Unlike passive systems, CardGuard does not exhibit the
‘fail-open’ ﬂaw identiﬁed in most existing IDSs in [28]. Since the IDS/IPS is the
forwarding engine, there is no way to bypass it.
Towards Software-Based Signature Detection for Intrusion Prevention
121
CardGuard is more static than the IDS approach advocated in [29] which
suggests that the IDS should be adaptive to the environment. In CardGuard
this is not an option, as all capacity is fully used.
The use of sensors in the OS kernel for detecting intrusion attempts [30] also
adds a light-weight intrusion detection system in the datapath. An important
diﬀerence with CardGuard is that it requires a reconﬁguration of the kernel and
is therefore OS-speciﬁc.
A well-known IDS is Paxson’s Bro [11]. Compared to CardGuard, Bro gives
more attention to event handling and policy implementation. On the other hand
it counts over 27.000 lines of C++ code and is designed to operate at a very
high level (e.g., on top of libpcap). It relies on policy script interpreters to
take the necessary precautions whenever an unusual event occurs. In contrast,
CardGuard sits at a very low-level and takes simple, but high-speed actions
whenever it detects a suspicious pattern.
The Aho-Corasick algorithm is used in several modern ‘general-purpose’ net-
work intrusion detection systems, such as the latest version of Snort [14]. To
our knowledge, ours is the ﬁrst implementation of the algorithm on an NPU.
Recent work at Georgia Tech uses IXP1200s for TCP stream reconstruction in
an IDS for an individual host [4]. In this approach, a completely separate FPGA
board was used to perform the pattern matching. IXPs have also been applied
to intrusion detection in [16]. Detection in this case is limited to packet headers
and uses a simpler matching algorithm.
The ability to ‘sanitise’ protocols before scanning the data for intrusion at-
tempts is similar to the protocol scrubber [19] and norm [20], except that it was
implemented in a much more resource-constrained environment. As a result, the
mechanisms in CardGuard are considerably simpler (but possibly faster).
7 Conclusions
This paper demonstrates that signature detection can be performed in software
on a NIC equiped with a network processor, before the packets hit the host’s PCI
and memory bus. While the hardware that was used in CardGuard is rather old,
the principles remain valid for newer hardware. As modern NPUs oﬀer higher
clock rates and support more (and more poweful) microengines we are conﬁdent
that much higher rates are possible. Perhaps that makes CardGuard amenable
to implementation on edge routers also. We conclude that CardGuard represents
a ﬁrst step towards providing intrusion detection on a NIC in software and the
evaluation of an unexplored corner of the design space.
Acknowledgments
Our gratitude goes to Intel for donating a large set of IXP12EB boards and to the
University of Pennsylvania for letting us use one of its ENP2506 boards. Many
thanks to Kees Verstoep for commenting on an earlier version of this paper.
122
H. Bos and K. Huang
References
[1] Moore, D., Paxson, V., Savage, S., Shannon, C., Staniford, S., Weaver, N.: The
spread of the Sapphire/Slammer worm, technical report. Technical report, CAIDA
(2003) http://www.caida.org/outreach/papers/2003/sapphire/.
[2] Bellovin, S.M.: Distributed ﬁrewalls. Usenix ;login:, Special issue on Security
(1999) 37–39
[3] Ioannidis, S., Keromytis, A.D., Bellovin, S.M., Smith, J.M.: Implementing a dis-
tributed ﬁrewall. In: CCS ’00: Proceedings of the 7th ACM conference on Com-
puter and communications security, ACM Press (2000) 190–199
[4] Clark, C., Lee, W., Schimmel, D., Contis, D., Kon´e, M., Thomas, A.: A hardware
platform for network intrusion detection and prevention. In: Third Workshop on
Network Processors and Applications, Madrid, Spain (2004)
[5] Toelle, J., Niggemann, O.: Supporting intrusion detection by graph clustering and
graph drawing. In: Proc. RAID’00, Toulouse, France (2000)
[6] Barford, P., Kline, J., Plonka, D., Ron, A.: A signal analysis of network traﬃc
anomalies. In: SIGCOMM Internet Measurement Workshop, Miami, FLA (2003)
[7] Krishnamurthy, B., Sen, S., Zhang, Y., Chen, Y.: Sketch-based change detection:
In: SIGCOMM Internet Measurement
Methods, evaluation, and applications.
Workshop, Miami, FLA (2003)
[8] Yegneswaran, V., Barford, P., Ullrich, J.: Internet intrusions: Global characteris-
tics and prevalence. In: Proc. of ACM SIGMETRICS. (2003)
[9] Estan, C., Savage, S., Varghese, G.: Automatically inferring patterns of resource
consumption in network traﬃc. In: Proc. of SIGCOMM’03. (2003)
[10] Aho, A.V., Corasick, M.J.: Eﬃcient string matching: an aid to bibliographic
search. Communications of the ACM 18 (1975) 333–340
[11] Paxson, V.: Bro: A system for detecting network intruders in real-time. Computer
Networks 31(23-24) (1999) 2435–2463
[12] Jung, J., Paxson, V., Berger, A.W., Balakrishnan, H.: Fast Portscan Detection
Using Sequential Hypothesis Testing. In: IEEE SP’04, Oakland, CA (2004)
[13] Kompella, R.R., Singh, S., Varghese, G.: On scalable attack detection in the
network. In: SIGCOMM Internet measurement conference. (2004) 187–200
[14] Roesch, M.: Snort: Lightweight intrusion detection for networks. In: Proceedings
of the 1999 USENIX LISA Systems Adminstration Conference. (1999)
[15] N.Shalaby, L.Peterson, A.Bavier, Y.Gottlieb, S.Karlin, A.Nakao, X.Qie,
T.Spalink, M.Wawrzoniak: Extensible routers for active networks. In: DANCE’02.
(2002)
[16] I.Charitakis, D.Pnevmatikatos, E.Markatos, K.Anagnostakis: S2I: a tool for auto-
matic rule match compilation for the IXP network processor. In: SCOPES 2003,
Vienna, Austria (2003) 226–239
[17] Mogul, J.: TCP oﬄoad is a bad idea whose time has come. In: Proc. of HotOS
IX, Lihue. Hawaii, USA (2003)
[18] Tuck, N., Sherwood, T., Calder, B., Varghese, G..: Deterministic memory-eﬃcient
string matching algorithms for intrusion detection. In: Proceedings of IEEE Info-
com, Hong Kong, China (2004)
[19] Malan, R., Watson, D., Jahanian, F., Howell, P.: Transport and application pro-
tocol scrubbing. In: Infocom’2000, Tel-Aviv, Israel (2000)
[20] Handley, M., Paxson, V., Kreibich, C.: Network intrusion detection: Evasion,
traﬃc normalization, and end-to-end protocol semantics. In: USENIX-Sec’2001,
Washington, D.C., USA (2001)
Towards Software-Based Signature Detection for Intrusion Prevention
123
[21] Johnson, E.J., Kunze, A.R.: IXP1200 Programming. Intel Press (2002)
[22] Debar, H., Dacier, M., Wepsi, A.: A revised taxonomy for intrusion-detection
systems. Technical report, IBM Research, Zurich (1999)
[23] Smaha, S.E.: Haystack: An intrusion detection system. In: IEEE Fourth Aerospace
Computer Security Applications Conference, Orlando, FL, USA (1988)
[24] Cheung, S., Crawford, R., Dilger, M., Frank, J., Hoagland, J., Levitt, K., Rowe, J.,
Staniford, S., Yip, R., Zerkle, D.: The design of GrIDS: A graph-based intrusion
detection system. Technical Report CSE-99-2, UC Davis (1999)
[25] Cisco: Cisco secure intrusion detection system version 2.2.0 (netranger) (2002)
[26] Farmer, D., Venema, W.: Improving the security of your site by breaking into it.
Technical report, Internet White Paper (1993) http://www.fish.com/security/.
[27] Moore, D., Shannon, C., Voelker, G., Savage, S.: Internet quarantine: Require-
ments for containing self-propagating code. In: Infocom, San Francisco, CA (2003)
[28] Ptacek, T.H., Newsham, T.N.: Insertion, evasion, and denial of service: Eluding
network intrusion detection. Technical report, Secure Networks Inc. (1998)
[29] Lee, W., Cabrera, J.B.D., Thomas, A., Balwalli, N., Saluja, S., Zhang, Y.: Perfor-
mance adaptation in real-time intrusion detection systems. In: RAID’02, Zurich,
Switzerland (2002)
[30] Kerschbaum, F., Spaﬀord, E.H., Zamboni, D.: Using embedded sensors for de-
tecting network attack. Technical report, Purdue University (2000)