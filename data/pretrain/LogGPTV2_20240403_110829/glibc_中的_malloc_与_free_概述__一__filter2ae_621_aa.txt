# glibc 中的 malloc 与 free 概述 (一)
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 〇.
最近做一些堆利用的题目时感觉基础掌握的不是很牢靠，之前没有仔细的研究过 glibc 中的内存管理策略，导致遇到某些题目的时候总是会忽略掉重要的细节(libc
层面)，所以这次就来仔细研究一下 malloc 和 free 的实现。
## 内存管理
动态内存管理是很重要的功能，内存一直都是很宝贵的资源，一个好的内存管理策略可以极大地提升系统性能，就 C 内存管理而言，主要的管理程序有
    Doug Lea Malloc
    BSD Malloc
    Hoard
    TCMalloc
    ptmalloc
目前主流 Linux 系统所使用的都是 ptmalloc，由 Wolfram Gloger 基于 Doug Lea Malloc 修改而来。ptmalloc
包括 malloc free 等一组函数，实现了动态的内存管理，区别一个内存管理器好坏的重要标准就是 分配和释放内存的速度。
当 Linux 加载了一个可执行程序时，会先将程序从硬盘上映射到内存中， 以 32 位程序为例，映射的顺序为
.text段、.data段、.bss段，接着会生成 stack 区域以及 heap 区域、mmap 区域。一个典型的 32 位程序的内存布局大致如下
其中，内核区域占据 1GB 空间，用户程序占据 3GB
空间，但是同一时间可以运行多个程序，如果整个内存被一个程序全部占据的话，其他程序是不是就无法运行了呢？其实不然，可以参考 windows
的实现方法，系统为每个程序分配了虚拟内存，只是在逻辑上每个程序占据着整块内存，但实际上物理内存中同时存在很多程序，操作系统通过虚拟内存管理器将虚拟地址映射到物理地址上面，保证系统正常工作。
实现内存管理主要有三个层面，分别是用户管理层、C 运行时库层以及操作系统层，操作系统层提供了最底层的内存管理方案如 syscall，linux
操作系统提供了 brk() 函数来实现内存的分配，而 C 运行时库则提供了 sbrk() 函数，我们常用的 malloc free 等类似的函数就是使用了
C 运行库提供的函数。
当程序向操作系统申请动态内存时，系统会调用相应的函数分配内存，但是这种分配并不是实时的，首先内核会给程序分配一个线性区(虚拟内存)，只有当用户开始使用这块内存时，才会分配物理页面。当释放一块内存时，会通过线性区找到物理页面，然后才执行释放操作。
为了提高内存管理效率，ptmalloc 设置了一些缓冲区，当用户分配内存时，ptmalloc
会优先检查缓冲区中是否存在合适的空间，如果存在就直接返回给用户，这样大大降低了向内核申请空间的次数。同样的，当用户释放某块内存时，ptmalloc
会将这块内存插入对应的缓冲区内，以便于下一次分配使用，这些缓冲区就是所谓的 fastbin、smallbin 等等链表。  
ptmalloc 的几个特性
    1. 需要长时间保存、使用的内存(存活期长)的分配使用 mmap
    2. 很大的内存分配使用 mmap
    3. 存活期短的内存块使用 brk 分配
    4. 尽量只缓存较小的内存块，很大的内存块在释放之后立即归还操作系统
    5. 空闲的内存块(处于缓冲区中)只在 malloc 和 free 时进行合并
## malloc
本部分根据 malloc.c 代码注释以及逻辑对 malloc 进行了简要分析。
代码可以在
[woboq](https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#_M/void)
找到。
###  ptmalloc 的适应性
一个内存管理器最理想的情况是针对项目进行专门的优化，也就是说，每个项目针对自身情况开发出的内存管理器才是最优的，但是这样做的成本太高，而且开发一个内存管理器难度也是很高的，既要考量和内核的兼容性，又要可移植，效率要高并且稳定，所以，最好的办法是有一个折中的内存管理机制，各方面不需要很突出，但是适用性广，可以很好地兼容在各种大型项目中。  
ptmalloc 的设计思想就是这样，它具有良好的兼容性、可移植性、稳定性，并且兼具效率，这样一个内存管理器对于开发一些正常的项目足够了。
###  main_arena and non_main_arena
又称为主分配区和非主分配区，main_arena 是一个结构体，定义在 malloc.c 中的 malloc_state
    struct malloc_state
    {
      /* Serialize access.  */
      __libc_lock_define (, mutex);
      /* Flags (formerly in max_fast).  */
      int flags;
      /* Set if the fastbin chunks contain recently inserted free blocks.  */
      /* Note this is a bool but not all targets support atomics on booleans.  */
      int have_fastchunks;
      /* Fastbins */
      mfastbinptr fastbinsY[NFASTBINS];
      /* Base of the topmost chunk -- not otherwise kept in a bin */
      mchunkptr top;
      /* The remainder from the most recent split of a small request */
      mchunkptr last_remainder;
      /* Normal bins packed as described above */
      mchunkptr bins[NBINS * 2 - 2];
      /* Bitmap of bins */
      unsigned int binmap[BINMAPSIZE];
      /* Linked list */
      struct malloc_state *next;
      /* Linked list for free arenas.  Access to this field is serialized
         by free_list_lock in arena.c.  */
      struct malloc_state *next_free;
      /* Number of threads attached to this arena.  0 if the arena is on
         the free list.  Access to this field is serialized by
         free_list_lock in arena.c.  */
      INTERNAL_SIZE_T attached_threads;
      /* Memory allocated from the system in this arena.  */
      INTERNAL_SIZE_T system_mem;
      INTERNAL_SIZE_T max_system_mem;
    };
结构体对每一个成员给出了解释，第一个成员是 linux 下的锁，Doug Lea
实现的内存分配器只有一个主分配区，为了兼容多线程，每次分配内存之前都要对主分配区加锁，防止多线程对内存分配造成影响，这样就导致多线程锁的激烈竞争，降低了内存分配效率，而
ptmalloc 支持多线程，增加了 non_main_arena (非主分配区)，所谓 non_main_arena
其结构和主分配区相同，很多分配区通过环形链表相互串联，这样，多个线程就无需争夺同一个分配区了。但是分配区的数量毕竟是有限的，在极端情况下多个线程还是会竞争同一个分配区，所以锁依旧有用，先加锁的进程可以优先使用分配区，如果全部分配区都被加锁，那么后面的进程就会进入阻塞状态。对于
32 位系统来说，arena 最多为核心数量的 2 倍，64 位系统下 arena 最多为核心数量的 8 倍。
第二个成员是标志位，第三个成员用来标识最近是否有新的内存块被插入 fastbin 链表。
第四个成员是 fastbin 链表，第五个成员是 top chunk 的地址，在堆利用中可能会用到。第六个成员标识最后一次拆分 top chunk
得到的剩余部分，第七个成员是 smallbin、largebin 和 unsortedbin 的集合体，一共有 126 个表项。
> 补：为什么有 126 个表项？这是由于 bin[0] 和 bin[127] 没有被使用，并且 bin[1] 是整个 bin 的头部。 注意 bin
> 定义的数量为 NBINS * 2 – 2 = 254，为什么是 254？ 这是由于缓冲区链表主要有 fd 和 bk 两个指针，smallbin 62
> 个、largebin 63 个，加在一起是 125 个，再加上一个头结点 bin[1] 共 126 个表项，换算成 index 一共有 252 个，所以
> 254 个指针空间是完全足够的！
第八个成员可以视为一张地图，标识链表是否为空。第九个成员是 next 指针，指向下一个 arena。
第十个成员指向下一个为空的 arena。第十一个成员用来标识绑定在当前 arena 线程的总量。
最后两个成员用来跟踪当前被系统分配的内存总量。
这个 glibc 版本比较新的，有一些新加入的定义。
###  chunk
chunk 称为堆块，是堆的重要组成部分，当用户申请内存块时，系统就会将空间以堆块的形式返回，堆块具有一定的结构，且按照大小分为 4 类，堆块的结构定义在
malloc.c 中，代码如下
    struct malloc_chunk {
      INTERNAL_SIZE_T      mchunk_prev_size;  /* Size of previous chunk (if free).  */
      INTERNAL_SIZE_T      mchunk_size;       /* Size in bytes, including overhead. */
      struct malloc_chunk* fd;         /* double links -- used only if free. */
      struct malloc_chunk* bk;
      /* Only used for large blocks: pointer to next larger size.  */
      struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */
      struct malloc_chunk* bk_nextsize;
    };
基本结构包含 6 个成员，首先是 mchunk_prev_size，如果当前堆块的前一个堆块是空闲的，那么此字段就是前一个堆块的 size。
接着是当前堆块的 size，然后有两个指针，由于各种 bin 的存在，当堆块被释放后会进入对应的缓冲区中，并且以链表的形式存在，这里的 fd 和 bk
就是链表的前向后向指针，最后两个也是指针，但是它们只会出现在 largebin chunk 中，具体会在后面提到。
一个堆块可能会是下面的状态
        chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                |             Size of previous chunk, if unallocated (P clear)  |
                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                |             Size of chunk, in bytes                     |A|M|P|
          mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                |             User data starts here...                          .
                .                                                               .
                .             (malloc_usable_size() bytes)                      .
                .                                                               |
    nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                |             (size of chunk, but used for application data)    |
                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                |             Size of next chunk, in bytes                |A|0|1|
                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
需要注意 size 标志位的最低三位 A、M、P，由于对齐的原因，如果把 size 转换成二进制，它的最低三个 bit 始终都是
0，所以它们就有了新的用途。  
A(NON_MAIN_ARENA) 用来表示当前堆块是否属于 main_arena，M(IS_MAPPED)用来表示当前堆块是否由 mmap
分配，P(PREV_INUSE)是最为常用的标志位，用来表示当前堆块的前一个堆块是否空闲。
###  bins
接下来是链表的分类，前面提到为了加快内存分配效率，ptmalloc
引入了缓冲区，把较小的堆块保存在缓冲区中，这样就可以减少和操作系统申请内存的次数，提高效率。缓冲区有一定的格式，按照堆块的大小分成了 4 类即
fastbin、smallbin、largebin、unsortedbin。
第一类是 fastbin chunk，它的基本结构如下
    +-----------------+-----------------+
    |                 |                 |
    |     prev_size   |      size       |
    |                 |                 |
    +-----------------------------------+
    |                 |                 |
    |        fd       |                 |
    |                 |                 |
    +-----------------+                 |
    |                                   |
    |            user data              |
    |                                   |
    +-----------------------------------+
fastbin chunk 的大小限制在 0x10 ~ 0x40(0x20 ~ 0x80 if OS is 64 bit)，这些 chunk 通过 fd
连接成一条单向链表，在主分配区中定义了 fastbins 指针，我们可以将它展开
       index         size
    fastbinY[0]      0x20
    fastbinY[1]      0x30
    fastbinY[2]      0x40
    fastbinY[3]      0x50
    fastbinY[4]      0x60
    fastbinY[5]      0x70
    fastbinY[6]      0x80
    fastbinY[7]      N/A
    fastbinY[8]      N/A
    fastbinY[9]      N/A