ICV, calculated as a 32-bit CRC, is no longer valid. However, due
to the linearity of a CRC, if one knows the plaintext value of the
chopped-off byte, a valid ICV can be reconstructed [13]. Using an
oracle, the adversary can learn if the modified message resulted
in a valid ICV, thereby learning the plaintext value of a byte. In
the original ChopChop attack against WEP, the oracle consisted of
(a)
(b)
(c)
Message
Message
ICV
ICV
⊕
ICV Correction
Message’
ICV’
Figure 2: Illustration of the ChopChop Attack.
having the Access Point (AP) relay a message within the network.
When the adversary injects the chopped packet, the AP will verify
the ICV. If an erroneous guess was made for the plaintext value of
the chopped-off byte the packet will be silently dropped, if guessed
correctly it will be relayed by the AP, thereby revealing the correct
guess. Alternatively, an adversary can send the message to the AP
coming from an unauthenticated client [29]. If the ICV was con-
structed correctly, the AP will generate and sent an error message,
otherwise the packet is silently discarded. Thus, by guessing all 256
(28) possible values, or 128 on average, one can recover the plaintext
value of a byte. Figure 2 provides an illustration of the ChopChop
attack. A WEP-encrypted message (a) consists of a Message and
4-byte ICV. The ChopChop attack will repeatedly chop off the last
byte, and perform an ICV Correction based on the guessed plaintext
value, as seen in (b). This results in a newly constructed message
(c) that, if guessed correctly, will contain a valid ICV.
Tews and Beck used a variant on this technique to decrypt pack-
ets directed towards a client in a wireless network using TKIP.
Packets have to be injected into the network using a different QoS
channel, having a lower TSC. This allows the adversary to bypass
the TSC verification in TKIP, and have the client verify the ICV. If
the guessed value for the chopped-off byte was incorrect, the frame
will be silently dropped, since it has an invalid ICV. If it was correct,
the frame will be processed, and is likely to result in a Michael
MIC failure. Upon detecting a Michael MIC failure, the client will
sent a Michael MIC Failure Report. The adversary can listen for
such reports, as an oracle, therefore learning if the guessed value
was correct. Due to the TKIP countermeasures, an adversary can
decrypt at most one byte per minute. The attack can only target
traffic towards the client, since the AP does not send Michael MIC
Failure Reports.
Tews and Beck showed how this attack can be used to decrypt an
ARP reply message in an average of 12 to 15 minutes [29]. They do
so by decrypting the last 12-bytes, consisting of the 8-byte Michael
MIC and 4-byte ICV. When the plaintext Michael MIC and ICV are
recovered, it is possible to guess the remaining bytes since most of
Session 5B: Fault Attacks and Side Channel AnalysisAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand417the bytes in an ARP reply are known. The guesses can be verified
by calculating the ICV and matching it with the decrypted result.
Using the inverse Michael algorithm [39], the Michael MIC key
for AP-to-client traffic can be recovered. In combination with the
recovered keystream from the ARP reply, an adversary is able to
forge a new message for every available QoS channel [29]. The
length of the forged messages can be equal to at most the length of
the recovered keystream.
Countermeasures against the Beck and Tews attack consist of
using a short rekeying interval, and disabling the transmission of
the failure reports [29]. Alternatively, a random time-delay could
be added to the transmission of the failure reports. In particular, for
Linux systems, if the CONFIG_DELAYED_MIC_ERROR_REPORT build
option in HostAPs supplicant is set, the client delays the transmis-
sion of the Michael MIC Failure Report by a random amount of
time between 0 and 60 seconds [19].
Over the years, several improvements have been made to the
original attack of Beck and Tews [22, 30, 32], allowing for an im-
proved execution time of 7 to 8 minutes [30]. Section 7 provides
additional information on these related works. Like the original
Beck and Tews attack, all of these improvements are based on the
transmission of Michael MIC Failure Reports. In this paper we will
show how, even when the transmission of failure reports is disabled,
we still succeed in devising attacks against WPA-TKIP.
3 MOTIVATION
To better understand the usage of WPA-TKIP in today’s wireless
networks, we conducted an extensive survey. This survey was
conducted in December 2018 in four distinct neighborhoods, across
three different countries: (1) Back Bay and Fenway in Boston of the
United States; (2) Hasselt in Belgium; and (3) Leipzig in Germany.
We used Kismet to passively collect beacon frames by channel
hopping over channels 1, 6 and 11. These three channels are the only
non-overlapping channels in the 2.4 GHz band. The experiment
was conducted on a Raspberry Pi 3 using a TP-Link TL-WN722N
Wi-Fi Dongle. The collected beacon frames contain the Service Set
Identifier (SSID), the AP’s MAC address (i.e. the BBSID), and the Ro-
bust Secure Network (RSN) information of a wireless network. The
RSN element contains information such as the supported pairwise
cipher suites, and the group cipher suite. The group cipher defines
the cipher that is used to encrypt multicast and broadcast traffic.
In a mixed-mode network, where the AP supports both TKIP and
CCMP for the pairwise ciphers, the oldest cipher is chosen as the
group cipher. This assures that all clients in the network support
the group cipher, and hence can receive encrypted multicast and
broadcast frames. All this information in the RSN element was used
to build a list of unique networks and the cipher suites they support.
The uniqueness of a wireless network is based on its BSSID.
We discovered a total of 29550 unique networks, of which 80.97
percent (23926 out of 29550) supported encryption. Since we want
to know how people configure protected Wi-Fi networks, we ex-
clude open networks in the remainder of our analysis. That is, our
analysis only considers protected Wi-Fi networks. Out of the 23926
protected networks, we discovered 15839 in Boston, 5531 in Hasselt,
and 2556 in Leipzig. Surprisingly, a total of 44.81 percent (10722 out
of 23926 protected networks) support TKIP as their group cipher
Table 1: Usage of TKIP in protected Wi-Fi networks.
Region
Back Bay
Fenway
Hasselt
Leipzig
TKIP
4958 (44.82%)
1818 (38.03%)
3221 (58.24%)
725 (28.36%)
10722 (44.81%)
CCMP
6101
2962
2310
1831
13204
Total
11059
4780
5531
2556
23926
suite. More detailed statistics of the usage of WPA-TKIP in each
region are provided in Table 1. For comparison, in April 2016, an
independent study of Vanhoef showed that 57.52 percent of en-
crypted wireless networks supported WPA-TKIP [31]. In spite of
the work of researchers, vendors disabling TKIP, and the Wi-Fi
Alliance who is discouraging the usage of WPA-TKIP, we still find
that nearly half of all protected Wi-Fi network uses WPA-TKIP,
which is a deeply concerning amount.
Another concern is that, even though researchers discovered
several weaknesses in TKIP, the IEEE has not yet deprecated TKIP.
Although in July 2017 members of the IEEE unanimously agreed
that TKIP should either be removed from the standard, or that TKIP
should at least be deprecated, in the end no action was taken [24].
Instead, in May 2018, members of the IEEE voted to keep WEP
and TKIP in the 802.11 standard [25]. Moreover, they also voted
that TKIP should not yet be marked as deprecated. This decision
was made because there are still known implementations of TKIP
on the market [27], and because the countermeasures discussed in
Section 2.3 and 2.5 mitigate most weaknesses. As a result, we expect
that without extra action, TKIP will keep being used in practice.
Motivated by this ever-lasting support for the insecure TKIP
protocol, our goal is to devise new attacks against it. In particular,
we show how we can bypass all existing countermeasures, and
show that our attacks are significantly faster than existing ones.
We hope this paper will help accelerate the process of completely
deprecating support for WPA-TKIP.
4 FINDING NEW SIDE-CHANNELS
In this section we systematically analyze the security of TKIP imple-
mentations. Unfortunately, even when all countermeasures against
known attacks are enabled, we found that devices are still vulnera-
ble to new attacks. In particular, we inspected the full Wi-Fi stack of
TKIP implementations, and discovered various new side-channels.
4.1 Security Analysis Methodology
To assess the security of devices that implement TKIP, we systemati-
cally analyze the Wi-Fi stack of several operating systems. Note that
previous works on TKIP only focused on the entity that generates
MIC failures, instead of inspecting the full Wi-Fi stack, meaning
they were unable to detect all side-channel vulnerabilities. However,
in this paper we analyze all the major components of the Wi-Fi
stack. As illustrated in Figure 3, the main components encompasses
the firmware running on the network card, the driver and Wi-Fi
subsystem in the operating systems, and the Wi-Fi management
code that runs in user space (e.g. Linux’s hostapd). Investigating all
Session 5B: Fault Attacks and Side Channel AnalysisAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand418Hardware
Firmware
Operating System
Driver
Wi-Fi Subsystem
User Space
Wi-Fi Client
Figure 3: Main components of a Wi-Fi stack.
these components enabled us to discover cross-layer attacks that
abuse properties of various components of the Wi-Fi stack. More
precisely, we analyzed all components of the Wi-Fi stack in the
following manner:
(1) We analyzed the countermeasures that were implemented
to mitigate existing TKIP attacks.
(2) We searched for logical bugs, such as forgetting to verify the
integrity of (fragmented) frames.
(3) We looked for new side-channel vulnerabilities that reveal
whether the ICV of a TKIP frame is correct.
We specifically investigated open-source operating systems such
as Linux and OpenBSD. Additionally, we inspected the source code
of MediaTek and Broadcom routers. Analyzing these implemen-
tations results in a representative overview of the state of TKIP
security, since open source code is heavily used in both clients
and access points. Another advantage of focusing on open-source
implementations, is that the discovered attacks are easier to debug
and reproduce, and that implementations can be more thoroughly
analyzed since the code is public. All combined, investigating the
full Wi-Fi stack of these implementations led to the discovery of
various new (cross-layer) side-channel attacks.
4.2 Deployed Countermeasures
Our code inspection of client-side TKIP implementations revealed
that Ubuntu implements the delayed reporting of MIC failures.
This means the client delays the transmission of MIC failures by
a random amount of time between 0 and 60 seconds. Similarly,
Debian, Gentoo, Alpine Linux, and several other Linux distributions,
also delay the transmission of MIC failures. This countermeasure
prevents all variants of the Beck and Tews attack.
On OpenBSD, the client sends two MIC failure reports back-to-
back when it encounters two MIC failures within a minute. Addi-
tionally, after sending both failure reports, it disconnects from the
network. In case there is only one MIC failure within a minute, no
failure reports are transmitted. This countermeasure prevents all
variants of the Beck and Tews attack.
The iNet wireless daemon (iwd) on Linux does not send MIC
failure reports at all. Although this prevents all variants of the Beck
and Tews attack, this approach is not recommended since it might
enable novel (brute-force) attacks against the Michael algorithm.
Listing 1: Sequence of IEEE 802.11 Rx handlers in Linux ker-
nel version 3.11.
1 void ieee80211_rx_handlers(struct ieee80211_rx_data *rx,
struct sk_buff_head *frames)
2
3
4
5
6
7
8
9
10 }
// Surrounding code is skipped for brevity
CALL_RXH(ieee80211_rx_h_decrypt)
CALL_RXH(ieee80211_rx_h_check_more_data)
CALL_RXH(ieee80211_rx_h_uapsd_and_pspoll)
CALL_RXH(ieee80211_rx_h_sta_process)
CALL_RXH(ieee80211_rx_h_defragment)
CALL_RXH(ieee80211_rx_h_michael_mic_verify)
On the AP side, Linux’s hostapd daemon by default refreshes the
group key every 10 minutes if TKIP is used. However, by default it
does not periodically refresh the pairwise session key. Finally, the
Mediatek and Broadcom routers that we inspected typically refresh
the group key every 60 minutes.
All combined, we can observe that most implementations have
adopted countermeasures that mitigate, or even completely prevent,
all variants of the Beck and Tews attacks. Unfortunately, our new
side-channel attacks are able to bypass these countermeasures.
4.3 Linux Power Management Oracle
Against Linux, we discovered that power management features of
Wi-Fi can be abused to determine whether the ICV of an injected
TKIP frame is correct. In particular, we can abuse the advanced
power management features that were added to the standard in 2005
by amendment 802.11e [2]. This amendment defines features that
allow a device to enter a long-term sleep mode. Devices can then
either wake-up at scheduled intervals to receive buffered data from
the AP (called S-APSD), or they can wake up at random moments
in time to request buffered data from the AP (called U-APSD). With
U-APSD, the client requests buffered data from the AP by sending
a PS-Poll frame towards it. The PS-Poll frame is a control frame
and is transmitted unauthenticated and unencrypted. When the AP
receives the PS-Poll frame, it will reply with the buffered data, or
with a Null-frame if there is no buffered data available.
We found that U-APSD, with its PS-Poll frame, can be used as an
oracle against Linux devices. To understand why the oracle works,
we have to look at the Linux kernel code. In Linux kernel versions
3.11 and lower, there is a logical flaw in the way received frames
are processed. Frames will be decrypted first, before their header
flags, such as the power save mode, are checked. As a result, a
client is marked by the AP as being in power save mode only when
decryption has succeeded. Listing 1 shows the sequence of 802.11
receive (Rx) handlers in Linux kernel version 3.11. On the receipt of