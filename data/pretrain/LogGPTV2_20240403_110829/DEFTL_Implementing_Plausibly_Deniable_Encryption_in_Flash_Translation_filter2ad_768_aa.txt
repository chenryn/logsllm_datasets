title:DEFTL: Implementing Plausibly Deniable Encryption in Flash Translation
Layer
author:Shijie Jia and
Luning Xia and
Bo Chen and
Peng Liu
DEFTL: Implementing Plausibly Deniable Encryption in Flash
Translation Layer
Shijie Jia†‡, Luning Xia†‡, Bo Chen§, Peng Liu¶
†Data Assurance and Communication Security Research Center, Chinese Academy of Sciences, Beijing, China
‡State Key Laboratory of Information Security, Institute of Information Engineering, Chinese Academy of Sciences,
Beijing, China
§Department of Computer Science, Michigan Technological University, USA
¶College of Information Sciences and Technology, The Pennsylvania State University, USA
{jiashijie,xialuning}@iie.ac.cn,PI:EMAIL,PI:EMAIL
ABSTRACT
Mobile devices today have been increasingly used to store and
process sensitive information. To protect sensitive data, mobile
operating systems usually incorporate a certain level of encryption
to protect sensitive data. However, conventional encryption cannot
defend against a coercive attacker who can capture the device
owner, and force the owner to disclose keys used for decrypting
sensitive information. To defend against such a coercive adversary,
Plausibly Deniable Encryption (PDE) was introduced to allow the
device owner to deny the very existence of sensitive data stored
on his/her device. The existing PDE systems, built on (cid:30)ash storage
devices, are problematic, since they either neglect the special nature
of the underlying storage medium (which is usually NAND (cid:30)ash),
or su(cid:29)er from deniability compromises.
In this paper, we propose DEFTL, a Deniability Enabling Flash
Translation Layer for devices which use (cid:30)ash-based block devices
as storage media. DEFTL is the (cid:27)rst PDE design which incorporates
deniability to Flash Translation Layer (FTL), a pervasively deployed
“translation layer” which stays between NAND (cid:30)ash and the (cid:27)le
system in literally all the computing devices. A salient advantage
of DEFTL lies in its capability of achieving deniability while being
able to accommodate the special nature of NAND (cid:30)ash as well as
eliminate deniability compromises from it. We implement DEFTL
using an open-source NAND (cid:30)ash controller. The experimental
results show that, compared to conventional encryption which
does not provide deniability, our DEFTL design only incurs a small
overhead.
CCS CONCEPTS
• Security and privacy → Embedded systems security;
KEYWORDS
Plausibly Deniable Encryption; Flash Memory; FTL
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for pro(cid:27)t or commercial advantage and that copies bear this notice and the full citation
on the (cid:27)rst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speci(cid:27)c permission and/or a
fee. Request permissions from permissions@acm.org.
CCS’17, Oct. 30–Nov. 3, 2017, Dallas, TX, USA.
© 2017 ACM. ISBN 978-1-4503-4946-8/17/10...$15.00
DOI: http://dx.doi.org/10.1145/3133956.3134011
1 INTRODUCTION
Mobile computing devices (e.g., smart phones and tablets) are in-
creasingly ubiquitous nowadays. Due to their portability and mo-
bility, more and more people today turn to such devices for daily
communications, web browsing, online shopping, electronic bank-
ing, etc. This however, leaves large amounts of sensitive personal/-
corporate data in these devices. To protect sensitive information,
all the major mobile operating systems have incorporated a certain
level of encryption [2, 25]. A broadly used encryption technique is
full disk encryption (FDE), which has been available on Android
phones since version 3.0 [35]. FDE can defend against a passive
attacker who tries to retrieve sensitive information from the data
storage. However, it cannot defend against an active attacker, who
can capture the device owner, and force the owner to disclose the
key used for decrypting the sensitive information. This applies to a
lot of real world scenarios. For example, a professional journalist
or human rights worker collects criminal evidence using his/her
mobile device in a region of oppression or con(cid:30)ict, and stores the
information encrypted. However, when he/she tries to cross the bor-
der, the boarder inspector may notice the existence of the encrypted
data and may coerce him/her to disclose the decryption key. We
need a technique which can protect the sensitive data even when
the data owner faces such a coercive attack. This is a necessary
technique for protecting the sensitive data as well as the people
who possess them. In 2012, a videographer smuggled evidence of
human rights violations out of Syria. Due to lack of e(cid:29)ective data
protection mechanisms, he instead hid a MicroSD card in a wound
on his arm [27, 31].
Plausibly Deniable Encryption (PDE) has been proposed to de-
fend against adversaries who can coerce users into revealing the
encrypted sensitive content (e.g., by forcing the victims to disclose
the keys for decryption). The high-level idea of PDE is: the original
sensitive data are encrypted into a cipher-text in such a way that,
when using a decoy key, a di(cid:29)erent reasonable and innocuous plain-
text will be generated; only when using the true key, the original
sensitive data will be disclosed. Upon being coerced, the victim can
simply disclose the decoy key to avoid being tortured. Leveraging
the concept of PDE, a variety of deniable storage systems have been
proposed for PC platforms, e.g., TrueCrypt [38], Rubberhose [16],
HIVE [3], Gracewipe [45], Steganographic File Systems [1, 23, 30],
etc.
Session J4:  Flash SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA2217However, achieving deniability in modern mobile platforms is
much more challenging than in PC platforms because: First, com-
pared to a PC platform, a mobile platform is usually equipped with
limited computational resources and sensitive to energy consump-
tion. In other words, the PDE designs for mobile platforms have
much higher requirements in e(cid:28)ciency and energy e(cid:29)ectiveness.
Therefore, the existing PDE systems [1, 3, 23, 30, 38] built for PC
platforms are not immediately applicable to the mobile platforms
due to their large overhead. Second, modern mobile devices usually
use NAND (cid:30)ash as storage media. Flash storage products like SD
cards, MicroSD cards, and eMMC cards have dominated the stor-
age of mobile devices. Compared to mechanical disks which are
used broadly in the PC platforms, (cid:30)ash memory has signi(cid:27)cantly
di(cid:29)erent nature: 1) Flash memory is update unfriendly. A (cid:30)ash cell
cannot be over-written before it has been erased. However, the
erase can only be performed on the basis of a large region (i.e.,
a 128-KB block); 2) Flash memory is vulnerable to wear. A (cid:30)ash
cell can only be programmed/erased for a limited number of times
before the wear begins to deteriorate its integrity.
Although deniable storage systems have also been proposed
for mobile platforms (e.g., Mobi(cid:30)age [33, 34], Mobihydra [44], Mo-
bipluto [6], DEFY [31], etc.), most of the existing PDE systems
for mobile devices [6, 33, 34, 44], unfortunately, neglect the above
unique nature of the underlying (cid:30)ash memory and view the (cid:30)ash
storage as block devices. This can simplify the PDE designs, but
the resulting PDE systems may su(cid:29)er from deniability compro-
mises in the underlying (cid:30)ash storage, which usually incorporates
special techniques to accommodate (cid:30)ash memory’s unique nature
(concrete attacks are shown in Sec. 3.1). When deniability is (par-
tially) compromised, the concrete attacks we will present shortly
in Sec. 3.1 show that the attacker can (cid:27)gure out the existence of
hidden sensitive data.
DEFY [31] is till now the sole PDE system which works with
(cid:30)ash memory to achieve deniability while being able to accommo-
date the special nature of (cid:30)ash memory. However, DEFY su(cid:29)ers
from several de(cid:27)ciencies. First, DEFY heavily relies on the special
properties provided by a speci(cid:27)c (cid:30)ash (cid:27)le system (i.e., YAFFS2),
which signi(cid:27)cantly limits its broad applications in mobile devices.
Due to DEFY’s strong coupling with YAFFS2, it cannot be applied
to other (cid:30)ash (cid:27)le systems including F2FS and UBIFS. In addition, an
overwhelming majority of mobile devices nowadays do not allow
applications to directly access the raw NAND (cid:30)ash, which signi(cid:27)-
cantly inhibits the deployment of (cid:30)ash (cid:27)le systems. Instead, many
mobile devices (e.g., Android phones from Samsung, LG, HTC and
Motorola) use (cid:30)ash memory in the form of a (cid:30)ash-based block
device, by introducing a new (cid:30)ash translation layer (FTL) to trans-
parently handle the special nature of (cid:30)ash memory and exposing a
block-based access interface. DEFY unfortunately is incompatible
with this popular (cid:30)ash storage architecture. Second, DEFY cannot
completely eliminate deniability compromises in (cid:30)ash memory.
This is because, DEFY relies on disabling active garbage collection
in a lower security level to avoid overwriting the hidden sensitive
data in a higher security level. This however, opens a door for the
attacker to compromise deniability (Sec. 3.2).
In this paper, we present DEFTL, a Deniability Enabling Flash
Translation Layer for mobile devices which use (cid:30)ash-based block
devices as storage. DEFTL is the (cid:27)rst design that incorporates PDE
in FTL, a pervasively deployed “translation layer” which stays be-
tween the physical (cid:30)ash layer and the (cid:27)le system layer in literally
all the mobile computing devices. Our design relies on several key
insights:
First, having observed that most of the existing PDE systems
incorporate deniability in the upper layers (e.g., (cid:27)le system layer [1,
23, 30] and block layer [3, 6, 33, 34, 38, 44]) and may su(cid:29)er from
deniability compromises in the lower layers (e.g., storage medium
layer), we move the PDE design downwards. This is especially
necessary for mobile devices equipped with (cid:30)ash storage, because
the adversary can have access to the raw (cid:30)ash, and obtain a view
di(cid:29)erent from the PDE systems working on the upper layers. Such a
di(cid:29)erent view may allow the adversary to observe those unexpected
“traces” of the sensitive data (due to handling the special nature
of (cid:30)ash memory), whose existence need to be denied. By moving
PDE to the lower layers, we make it possible to eliminate those
deniability compromises in the raw (cid:30)ash, since we can now have the
same view as the adversary. In addition, our design is compatible
with (cid:30)ash-based block devices, the most popular form of (cid:30)ash
storage which exposes a block access interface. This can allow
any block-based (cid:27)le systems (e.g., EXT4, FAT32) to be deployed,
achieving (cid:27)le system friendliness.
Second, we incorporate two modes, a public mode and a PDE
mode, into FTL, and carefully isolate the two modes to achieve
deniability. When operating in the public mode, the user can store
and process public non-sensitive data which can be known by the
adversary; when operating in the PDE mode, the user can store and
process sensitive data which should be hidden and their existence
should be able to be denied. The deniability is achieved by using the
data (and their behavior) in the public mode to deny the data (and
their behavior) in the PDE mode. To avoid deniability compromises,
the public mode should not have any knowledge on the existence
of the PDE mode. This however, will lead to an over-write issue,
in which the data written in the public mode may over-write the
data written in the PDE mode. To address the over-write issue,
we carefully modify the block allocation and garbage collection
strategies in FTL such that the two modes can be “stealthily” isolated
without being known by the adversary.
Contributions. Our contributions are summarized in the follow-
ing:
• We introduce the (cid:27)rst concrete attacks on the existing PDE
systems for mobile devices. Our attacks can successfully
compromise deniability provided by all the prior mobile
PDE systems.
• Eliminating deniability compromises from (cid:30)ash-based block
devices is an open problem which has not been addressed
in prior work. DEFTL is the (cid:27)rst design which directly
incorporates deniability in the (cid:30)ash translation layer, and
is able to eliminate the deniability compromises present
in (cid:30)ash storage. In addition, the inherent over-write issue
of PDE systems can be mitigated by modifying the block
allocation and the garbage collection such that the public
non-sensitive data and the hidden sensitive data can be
“stealthily” isolated.
Session J4:  Flash SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA2218• We provide security analysis and a proof-of-concept im-
plementation of DEFTL using an open source NAND (cid:30)ash
controller framework. Compared to conventional encryp-
tion (e.g., FDE) in (cid:30)ash-based block devices, our DEFTL
can achieve deniability with a small additional overhead.
2 BACKGROUND
2.1 Flash Memory
Flash memory is a non-volatile storage medium which can be elec-
trically erased and reprogrammed. Compared to traditional mechan-
ical drives, (cid:30)ash memory can achieve much higher I/O throughput
with much lower power consumption, and thus gains popularity in
the modern computing devices. The (cid:30)ash memory family contains
NAND-type and NOR-type (cid:30)ash. In this work, we focus on NAND
(cid:30)ash, which has been used extensively in popular (cid:30)ash storage
media including eMMC cards, SD cards, MicroSD cards, SSD drives
and USB sticks.
NAND (cid:30)ash stores information using an array of memory cells.