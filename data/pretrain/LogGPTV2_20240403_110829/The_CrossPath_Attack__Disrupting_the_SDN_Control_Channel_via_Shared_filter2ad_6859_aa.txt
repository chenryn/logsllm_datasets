title:The CrossPath Attack: Disrupting the SDN Control Channel via Shared
Links
author:Jiahao Cao and
Qi Li and
Renjie Xie and
Kun Sun and
Guofei Gu and
Mingwei Xu and
Yuan Yang
The CrossPath Attack: Disrupting the 
SDN Control Channel via Shared Links
Jiahao Cao, Qi Li, and Renjie Xie, Tsinghua University; Kun Sun, George Mason University; 
Guofei Gu, Texas A&M University; Mingwei Xu and Yuan Yang, Tsinghua University
https://www.usenix.org/conference/usenixsecurity19/presentation/cao
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.The CrossPath Attack: Disrupting the SDN Control Channel via Shared Links
Jiahao Cao1,2, Qi Li2,3, Renjie Xie1,2, Kun Sun4, Guofei Gu5,
Mingwei Xu1,2, and Yuan Yang1,2
1Department of Computer Science and Technology, Tsinghua University
2Beijing National Research Center for Information Science and Technology, Tsinghua University
3Institute for Network Sciences and Cyberspace, Tsinghua University
4Department of Information Sciences and Technology, George Mason University
5SUCCESS LAB, Texas A&M University
Abstract
Software-Deﬁned Networking (SDN) enables network inno-
vations with a centralized controller controlling the whole
network through the control channel. Because the control
channel delivers all network control trafﬁc, its security and
reliability are of great importance. For the ﬁrst time in the
literature, we propose the CrossPath attack that disrupts the
SDN control channel by exploiting the shared links in paths
of control trafﬁc and data trafﬁc. In this attack, crafted data
trafﬁc can implicitly disrupt the forwarding of control trafﬁc
in the shared links. As the data trafﬁc does not enter the con-
trol channel, the attack is stealthy and cannot be easily per-
ceived by the controller. In order to identify the target paths
containing the shared links to attack, we develop a novel
technique called adversarial path reconnaissance. Both the-
oretic analysis and experimental results demonstrate its fea-
sibility and efﬁciency of identifying the target paths. We
systematically study the impacts of the attack on various net-
work applications in a real SDN testbed. Experiments show
the attack signiﬁcantly degrades the performance of exist-
ing network applications and causes serious network anoma-
lies, e.g., routing blackhole, ﬂow table resetting, and even
network-wide DoS.
1 Introduction
Software-Deﬁned Networking (SDN) becomes increasingly
popular and is being widely deployed in data centers [32],
cloud networks [13], and wide area networks [11]. In SDN,
the control plane and data plane are decoupled. A logically
centralized controller communicates with SDN switches to
exchange control messages, e.g., routing decisions, via the
control channel built upon a southbound protocol, e.g.,
OpenFlow [47]. SDN enables diversiﬁed packet processing
and drives network innovation. A large number of network
services and applications [26, 40, 33] beneﬁt from it.
Unfortunately, the SDN control channel between the con-
trol plane and data plane is not well protected and can be
exploited though the conﬁdentiality and integrity of the com-
munication over the channel are protected by the TLS/SSL
protocol. We ﬁnd that the control channel is under the risk
of the Denial-of-Service (DoS) attack. In particular, a small
portion of trafﬁc may tear down the communication over
the control channel. Existing studies focus on many secu-
rity aspects of SDN, including malicious or buggy applica-
tions [63, 48], attacks on crashing controllers [60, 49, 65], at-
tacks on disrupting switches [22, 51], and information leak-
age in SDN [25, 56, 19, 45] , but the security of the SDN
control channel is still an open problem.
In this paper, we propose a novel attack named CrossPath
Attack, which disrupts the SDN control channel by exploit-
ing the shared links between paths of control trafﬁc and data
trafﬁc. Our attack is stealthy and cannot be easily perceived
by the controller since it does not directly send a large vol-
ume of control trafﬁc to the controller. Instead, it generates
well-crafted data trafﬁc in the shared links to implicitly in-
terfere with the delivery of the control trafﬁc while the data
trafﬁc does not reach the controller. Thereby, real-time con-
trol messages delivered between the SDN controller and the
switches are signiﬁcantly delayed or dropped. In particular,
since the controller performs centralized control over all net-
work switches via the control channel, an attacker can easily
break down all network functionalities enabled by various
SDN applications running on the controller. The root cause
of the vulnerability is the side effect incurred by shared links
between paths of control trafﬁc and data trafﬁc in SDN. Such
link sharing is a common practice in SDN with in-band con-
trol [21, 65], which can greatly reduce the cost of building
a dedicated control network and simplify network mainte-
nance, especially for large networks. However, it also opens
the door for an attacker to disrupt the control channel by
sending malicious data trafﬁc to the shared links.
It is challenging to construct the attack in real networks.
Unlike traditional IP networks where almost all links deliver
both control trafﬁc (e.g., OSPF or BGP updates [1, 2]) and
data trafﬁc at the same time, only a few number of links for-
ward control trafﬁc in SDN. For instance, an SDN network
USENIX Association
28th USENIX Security Symposium    19
with m switches can have O(m2) links. However, there may
be m links forming a spanning tree connecting m switches
with a controller to deliver the control trafﬁc. Thus, an at-
tacker needs to ﬁnd a target path that contains the shared
links between control and data trafﬁc to send the attack traf-
ﬁc. However, it is difﬁcult to know since the network topol-
ogy and the routing information are invisible to end users.
Moreover, none of the information can be inferred by scan-
ning tools used in traditional IP networks due to different for-
warding actions in SDN. For example, Traceroute [17] can-
not work well because SDN switches usually do not decrease
the time-to-live (TTL) values in packet headers.
To address the above challenge, we present a probing tech-
nique called adversarial path reconnaissance to ﬁnd a tar-
get path of data trafﬁc that contains the shared links. The
key observation is that the delays of control messages on the
SDN control channel will become higher if a short-term burst
of data trafﬁc passes through the shared links. Meanwhile,
such delays that indicate the path of the current data traf-
ﬁc has shared links with control trafﬁc can be measured by
a host. The reason one host can measure the delays is that
the ﬁrst packet of a new ﬂow will be sent to the controller
to query forwarding actions, which incurs extra delays of
control messages other than that of the following packets di-
rectly processed in the data plane. Thus, by crafting timing
packets to measure the latency variation of the control mes-
sages with/without injecting a short-term burst of data trafﬁc,
a path containing the shared links can be correctly identiﬁed.
By conducting the above reconnaissances on each possible
path, a target path can ﬁnally be found.
We note the probing technique may fail to identify a tar-
get path in rare cases. We study the conditions of successful
probing, and our experiments with 261 real network topolo-
gies [4] demonstrate that these conditions can be easily met
in practice. Moreover, we analyze the expected number of
paths that need to be explored for an attacker to ﬁnd a tar-
get path. Both theoretical analysis and experimental results
show the high efﬁciency of our probing technique. For ex-
ample, it only needs to explore less than 50 paths on average
if there are 1,000 paths and only 2% of them contains shared
links. Experimental results in a real SDN testbed show our
reconnaissances can achieve more than 90% accuracy.
In order to ensure the stealthiness of the attack, we lever-
age the low-rate TCP-targeted DoS [41] to generate data traf-
ﬁc consisting of periodic pulses in the shared links, instead
of directly ﬂooding shared links to disrupt the network. The
low-rate TCP targeted DoS incurs repeated TCP retransmis-
sion timeout for TCP connections of the control channel.
Compared with direct link ﬂooding on the shared links, it
signiﬁcantly reduces the volume of attack trafﬁc. Note the
TCP-targeted DoS cannot effectively disrupt SDN networks
without the knowledge of shared links obtained by our prob-
ing technique. Moreover, our attack is signiﬁcantly different
from the packet-in ﬂooding attacks [55, 60] that trigger a
huge volume of control trafﬁc with bogus packets to saturate
the SDN control channel. Instead, it leverages low-rate data
trafﬁc to disrupt the control channel and can thus succeed
even in the presence of state-of-the-art SDN defenses, such
as FloodGuard [60], FloodDefender [52], and SPHINX [27].
We systematically study the impacts of the attack on dif-
ferent SDN applications that achieve diversiﬁed network
functionalities. We ﬁnd that almost all SDN applications can
be affected by our attack since our attack targets at disrupt-
ing the core services in SDN controllers that support these
applications. In order to understand the impacts, we conduct
experiments with four typical applications that have been
widely deployed in SDN controllers, i.e., ARP Proxy [5],
Learning Switch [6], Reactive Routing [9], and Load Bal-
ancer [7]. The results show (1) the performance of ARP
Proxy can be signiﬁcantly degraded, such as 10 times in-
crease in the response delays and 95% reduction in the num-
ber of the ARP replies; (2) Learning Switch cannot success-
fully install forwarding decisions in the data plane and thus
the throughput of the data plane is reduced to 0 Mbps; (3)
Reactive Routing cannot update routing information in time
and obtain incorrect topology information, which incurs var-
ious routing anomalies, e.g., routing loop, routing blackhole,
routing path eviction, and ﬂow table resetting; and (4) Load
Balancer generates wrong decisions, resulting in link over-
loading.
In summary, our paper makes the following contributions:
• We present the CrossPath attack to signiﬁcantly disrupt
the SDN control channel by exploiting the shared links
between paths of control trafﬁc and data trafﬁc.
• We develop a probing technique called adversarial path
reconnaissance that can ﬁnd a target path containing the
shared links with a high accuracy.
• We prove the conditions of successful probing, analyze
the expected number of explored paths to ﬁnd a target
path, and validate our analysis with experiments.
• We perform a systematical study and conduct exten-
sive experiments on four typical SDN applications to
demonstrate the impacts of the attack on various SDN
network functionalities.
The rest of the paper is organized as follows. Section 2
provides background information about SDN and threat
model. Section 3 presents the CrossPath attack along with
an effective probing technique. Section 4 evaluates the fea-
sibility and effectiveness of the attack both in large-scale
simulations and real SDN testbeds. Section 5 further stud-
ies the impacts of the attack on different SDN applications
by detailed analysis and extensive experiments. Section 6
discusses defense mechanisms that can be immediately de-
ployed in practice to mitigate the attack. Section 7 reviews
related work. Section 8 concludes the paper.
20    28th USENIX Security Symposium
USENIX Association
2 Background and Threat Model
2.1 Background
In this section, we brieﬂy review the SDN architecture and
a typical protocol of SDN, i.e., the OpenFlow protocol [47].
SDN enables network innovations by decoupling the control
and data planes and provide programmability as well as ﬂex-
ibility. The control plane is logically centralized and can be
deployed on commodity servers. The SDN architecture can
be divided into three layers. The control layer and the appli-
cation layer constitute the control plane, which runs as a net-
work operating system, a.k.a. a controller. Various network
applications can be deployed in the application layer to en-
able diversiﬁed network functions, such as routing, network
monitoring, anomaly detection, and load balancing. The data
plane layer, which consists of “dumb” SDN switches, per-
forms low-level packet processing and forwarding based on
the decisions generated by the control layer.
The dominant communication protocol between the con-
trol and data planes is OpenFlow, which has been stan-
dardized by the Open Networking Foundation (ONF) [14].
OpenFlow allows a controller to dynamically specify SDN
switches’ forwarding behaviors by installing ﬂow rules.
Each ﬂow rule contains match ﬁelds to match against in-
coming packets, a set of instructions that describe how to
process the matched packets, and counters that count the
number and the total bytes of matched packets. OpenFlow
also deﬁnes how to handle packets in a switch. When a
switch receives a packet, it processes the packet based on
the rule that matches the packet with the highest priority. If
no rules match the packet, the switch sends the packet to the
SDN controller through the control channel with a packet in
message. Applications running on the controller analyze the
packet and make decisions. Once the decisions are made,
the packet will be sent back to the switch with a packet out
message. The corresponding ﬂow rules will be installed into
all switches forwarding the packet with ﬂow mod messages.
Such a packet processing procedure is called reactive rule
installation, which has been widely used in OpenFlow net-
works [60, 52]. Moreover, to reduce the cost of building a
dedicated control network and operating networks, in partic-
ular in large-scale networks [21, 65], OpenFlow allows the
control and data trafﬁc to share some links in the network,
which is called in-band control.
2.2 Threat Model
In this paper, we consider an SDN network deployed with
the OpenFlow protocol. The network uses a reactive ap-
proach to install ﬂow rules, which is widely adopted in prac-
tice [60, 52], over an in-band control channel [21, 65]. We
assume that an attacker has or compromises at least one host
attached in the network, which can be easily achieved, e.g.,
by renting a virtual machine in an SDN-based cloud network.
The goal of the attacker is to craft data trafﬁc to disrupt the
SDN control channel that delivers control trafﬁc.
An attacker does not need to have prior knowledge on
the network and any privileges of network operation. The
CrossPath attack does not require the attacker to compro-
mise the controllers, applications, and switches, or to con-
struct man-in-the-middle attacks on the control channel to
manipulate the control messages. The control channel can be
protected with TLS/SSL. Furthermore, we assume that con-
trollers, switches, and applications are well protected. For
example, the network applies strict access control policies to
prevent communication between controllers and attackers.
3 The CrossPath Attack
In this section, we present the CrossPath attack on disrupting
the SDN control channel. Particularly, we develop a probing
technique called adversarial path reconnaissance to accu-
rately ﬁnd a target path containing shared links.
3.1 Overview
The CrossPath attack aims to disrupt the SDN control chan-
nel by exploiting the shared links between paths of control
trafﬁc and data trafﬁc. An attacker interferes with the trans-
mission of control trafﬁc by generating data trafﬁc pass-
ing through the shared links. Thereby, the real-time con-
trol messages delivered in the control channel are delayed or
dropped. As the SDN controller performs centralized control
over all switches via the control channel, an attacker can al-
most break down all network functionalities enabled by SDN
by constructing the attack. To achieve this, an attacker needs
to use a host attached in the network to generate probing traf-
ﬁc so as to identify which path of data trafﬁc (i.e., a target
path) shares links with paths of control trafﬁc. Then, the at-
tacker can send attack trafﬁc to the target path to disrupt the
control channel. In order to decrease the attack rate, the at-
tack utilizes the low-rate TCP-targeted DoS (LDoS) [41] to
generate periodic on-off “square-wave” trafﬁc, which leads
to repeated TCP retransmission timeout for the TCP connec-
tions of the control channel.
Now let us use a simple example to illustrate the attack.
For the ease of explanation, we use data path to denote the
path where the data trafﬁc is delivered and control path to de-
note the path where the control trafﬁc is delivered. As shown
in Figure 1, the network has ﬁve switches {s1, s2, s3, s4, s5}.
Host h1 and h3 communicate with each other via the data
path h1 → s2 → s3 → s4 → h3, while the control path be-
tween s2 and the controller is s2 → s3 → s5 → c. We can ob-
serve that the link between s2 and s3 is shared by the control
and data path. Assume host h1 compromised by an attacker
sends crafted LDoS trafﬁc to h3. Since the link and corre-
sponding queues of switch ports are also used by the control
USENIX Association
28th USENIX Security Symposium    21
affected
switches
(cid:350)
s1
s2
s3
(cid:349)
shared link
h1
attacker
(cid:346)
s5
(cid:347)(cid:348)
c
SDN Controller
Control Path
Data Path
Link
s4
h3
user
h2
user
Figure 1: An example of disrupting the SDN control channel.
paths of s2 and s1, the control messages delivered between
the switches and the SDN controller can be signiﬁcantly de-
layed or dropped, resulting in abnormal network behaviors.
In order to successfully launch the attack, an attacker
should correctly choose a target path that contains shared
links. However, it is challenging to ﬁnd target paths in SDN.
Different from traditional IP networks that almost each link
delivers data and control trafﬁc at the same time, there are
only a few number of links delivering control trafﬁc in SDN.
For instance, given an SDN network with m switches, there
may be m2/2 links. m links may be used to deliver control
trafﬁc so that the connectivity between the controller and all
SDN switches can be ensured. Thus, only a limited number
of data paths include the links shared with control paths. To
identify such data paths, the attacker needs to know the net-
work topology and routing information. Nevertheless, they
are stored in the SDN controller and are invisible to the at-
tacker. Moreover, existing scanning tools cannot be used in
SDN to infer the network topology and routing information
because SDN has different forwarding behaviors compared
to traditional IP networks. For example, Traceroute [17] can-
not infer the routing path of the packets, as SDN usually does
not decrease the time-to-live (TTL) values in packet headers.
3.2 Adversarial Path Reconnaissance
To address the challenges above, we develop a probing tech-
nique called adversarial path reconnaissance to ﬁnd target
data paths that have links shared with control paths. The
technique inspired by the key observation that the delay of
a control path is higher if a short-term burst of the data traf-
ﬁc passes through the shared links. Thus, an attacker can
use a host in SDN to identify the key data paths by gener-