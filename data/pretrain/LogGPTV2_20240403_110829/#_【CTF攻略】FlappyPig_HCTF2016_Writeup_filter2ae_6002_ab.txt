    [[0, 0, 0], [0, 0, 0], [0, 1, 0]]
    [[0, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 1], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 1, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 1]]
    [[1, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 1], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 1, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 1], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 1], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[1, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 1], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 1, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 1], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 1, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[1, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 1, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 1, 0]]
    [[1, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 1], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 1, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 1]]
    [[0, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 1], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 1, 0]]
    [[0, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 1], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[1, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 1], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 1, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[1, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 1, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 1]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 1], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 1, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[1, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 1, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[1, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 1], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 1, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 1, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 1, 0]]
    [[0, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 1], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 1, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 1]]
    [[1, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 1], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 1, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[1, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[1, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 1], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 1, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 1, 0]]
    [[1, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 1]]
    [[0, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 1], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 1, 0], [0, 0, 0], [0, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [1, 0, 0]]
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
每四个组确定两个半字节，相当于一个字节，一共104组可以获得26字节，加上前面的6字节获得全部32字节
然后就是去推出，输入的forward_char和back_char了，由于限制在0f之中所以使用爆破的方式
脚本如下
    init = [2, 0, 128, 128, 2, 6, 192, 256, 3, 6, 128, 0, 0, 6, 64, 0, 2, 4, 64, 0, 1, 2, 64, 0, 0, 6, 192, 0, 0, 6, 192, 0, 3, 2, 128, 128, 3, 6, 192, 256, 2, 4, 64, 128, 2, 4, 64, 0, 1, 4, 128, 0, 3, 2, 128, 256, 0, 4, 192, 0, 3, 2, 64, 0, 0, 0, 192, 0, 3, 6, 192, 0, 2, 0, 192, 128, 2, 6, 192, 256, 3, 6, 128, 0, 1, 2, 0, 0, 1, 6, 192, 128, 3, 0, 64, 256, 2, 6, 64, 0, 2, 2, 64, 0]
    key = [0,0,0,0]
    list1 = [0,1,6,7]
    list2 = [1,2,7,8]
    #tmp = ['h','c','t','f','{']
    list3 = [None]*52
    list3[0] = ord('h')&0x0f
    list3[1] = (ord('h')&0xF0)>>4
    list3[2] = ord('c')&0x0f
    list3[3] = (ord('c')&0xF0)>>4
    list3[4] = ord('t')&0x0f
    list3[5] = (ord('t')&0xF0)>>4
    list3[6] = ord('f')&0x0f
    list3[7] = (ord('f')&0xF0)>>4
    list3[8] = ord('{')&0x0f
    list3[9] = (ord('{')&0xF0)>>4
    print len(init)
    for k in range(26):
                  for i in range(256):
                         for l in range(4):
                                z = 0
                                v8 = (i&0xF0)>>4
                                if (k
解出的是pbar-p，用pbar减去该值即可。
    from Crypto.Util.number import long_to_bytes, bytes_to_long