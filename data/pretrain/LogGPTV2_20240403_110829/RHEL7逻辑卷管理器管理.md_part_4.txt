-   ::: para
    无法限制精简快照卷的大小。必要时，快照会使用精简池中的所有空间。这样不太适合您的需要。
    :::
:::
::: para
通常，在决定使用哪种快照格式时应考虑您网站的具体要求。
:::
::: para
有关创建精简快照卷的详情，请查看 [第 4.4.7 节
"创建精简配置快照卷"](#LVM_CLI.html#thinly_provisioned_snapshot_creation){.xref}。
:::
:::
::: section
::: titlepage
## [⁠]{#LVM_components.html#cache_volumes}2.3.7. 缓存卷 {.title}
:::
[]{#LVM_components.html#idm140426152357088 .indexterm}
::: para
从 Red Hat Enterprise Linux 7.1 发行本开始，LVM 支持使用快速块设备（比如
SSD
驱动器）作为较大慢速块设备的回写或写入缓存。用户可创建缓存逻辑卷以改进其现有逻辑卷的性能，或创建由一个小且快速设备与一个大慢速设备组成的新缓存逻辑卷。
:::
::: para
有关 LVM 缓存的详情，包括卷创建示例，请查看 `lvmcache`{.command}(7) man
page。
:::
:::
:::
:::
[]{#LVM_administration.html}
::: chapter
::: titlepage
# [⁠]{#LVM_administration.html#LVM_administration}第 3 章 LVM 管理概述 {.title}
:::
[]{#LVM_administration.html#idm140426168540592 .indexterm}
::: para
本章提供了用来配置 LVM
逻辑卷的管理流程概述，旨在提供对其所包含步骤的一般了解。有关常用 LVM
配置流程的具体步骤示例，请参考 [第 5 章 *LVM
配置示例*](#LVM_examples.html){.xref}。
:::
::: para
有关用来执行 LVM 管理的 CLI 命令，请参考 [第 4 章 *使用 CLI 命令管理
LVM*](#LVM_CLI.html){.xref}。
:::
::: section
::: titlepage
# [⁠]{#LVM_administration.html#cluster_setup}3.1. 在集群中创建 LVM 卷 {.title}
:::
[]{#LVM_administration.html#idm140426176133104
.indexterm}[]{#LVM_administration.html#idm140426169130848 .indexterm}
::: para
可使用一组 LVM
集群扩展，即集群的逻辑卷管理器（CLVM）在集群环境中创建逻辑卷。这些扩展允许计算机集群使用
LVM 管理共享存储（例如：在 SAN 中）。
:::
::: para
在 Red Hat Enterprise Linux 7 中使用 Pacermaker 管理集群。只有与
Pacemaker 集群联合使用方可支持集群的 LVM
逻辑卷，且必须将其配置为集群资源。
:::
::: para
以下为您提供将集群 LVM 卷配置为集群资源时所需步骤概述。
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    安装集群软件和 LVM
    软件包，启动集群软件，并创建集群。必须为该集群配置
    fencing。文档*《高可用附加组件管理》*中提供了创建集群，并为该集群中的每个节点配置
    fencing
    的示例步骤。文档*《高可用附加组件管理》*提供了有关集群组件配置的详情。
    :::
2.  ::: para
    CLVM 要求为每个节点的 `/etc/lvm/lvm.conf`{.filename}
    文件启用集群锁定。可以作为 root 用户使用
    `lvmconf --enable-cluster`{.command}
    命令启用集群锁定。执行这个命令更改锁定类型并禁用 `lvmetad`{.command}
    守护进程。有关 `lvmetad`{.command} 守护进程的详情，请查看 [第 3.6 节
    "元数据守护进程（lvmetad）"](#LVM_administration.html#metadatadaemon){.xref}。
    :::
    ::: para
    有关手动配置 `lvm.conf`{.filename} 文件支持集群锁定的详情，请查看
    `lvm.conf`{.filename} 文件本身的内容。有关 `lvm.conf`{.filename}
    文件的详情，请查看 [附录 B, *LVM
    配置文件*](#config_file.html){.xref}。
    :::
3.  ::: para
    为集群设定 `dlm`{.literal}
    资源。可将该资源作为克隆资源创建，以便其可以在该集群的每个节点中运行。
    :::
    ``` screen
    # pcs resource create dlm ocf:pacemaker:controld op monitor interval=30s on-fail=fence clone interleave=true ordered=true
    ```
4.  ::: para
    将 `clvmd`{.literal} 配置为集群资源。与 `dlm`{.literal}
    资源一样，可将其配置为克隆的资源，以便在集群的所有节点中运行。
    :::
    ``` screen
    # pcs resource create clvmd ocf:heartbeat:clvm op monitor interval=30s on-fail=fence clone interleave=true ordered=true
    ```
5.  ::: para
    设定 `clvmd`{.literal} 和 `dlm`{.literal}
    的相依性及启动顺序。`clvmd`{.literal} 必须在 `dlm`{.literal}
    之后启动，且必须与 `dlm`{.literal} 在同一节点中运行。
    :::
    ``` screen
    # pcs constraint order start dlm-clone then clvmd-clone
    # pcs constraint colocation add clvmd-clone with dlm-clone
    ```
6.  ::: para
    创建集群的逻辑卷。在集群环境中创建 LVM 逻辑卷和在单一节点创建 LVM
    逻辑卷是一样的。LVM 命令本身没有什么不同。要启用您在集群中创建的 LVM
    卷，集群构架必须正在运行且集群必须可以仲裁。
    :::
:::
::: para
默认情况下，在所有可访问共享存储的计算机中都可看到在共享存储中使用 CLVM
创建的逻辑卷。但也可能只有从集群中的某一个节点才可看到存储设备中创建逻辑卷。还可将逻辑卷状态从本地卷改为集群卷。有关详情请参考
[第 4.3.3 节 "在集群中创建卷组"](#LVM_CLI.html#VG_create_cluster){.xref}
以及 [第 4.3.8 节 "更改卷组参数"](#LVM_CLI.html#VG_change){.xref}。
:::
::: {.warning xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**警告**
:::
::: admonition
::: para
使用 CLVM
在共享存储中创建卷组时，必须确定该集群中的所有节点都可访问组成该卷组的物理卷。不对称的集群配置可导致有些节点可访问该存储而有些则不能。
:::
:::
:::
::: para
在集群中创建镜像逻辑卷的示例请参考 [第 5.5 节 "在集群中创建镜像 LVM
逻辑卷"](#LVM_examples.html#mirvol_create_ex){.xref}。
:::
:::
::: section
::: titlepage
# [⁠]{#LVM_administration.html#creation_overview}3.2. 创建逻辑卷概述 {.title}
:::
[]{#LVM_administration.html#idm140426178459584 .indexterm}
::: para
以下总结了创建 LVM 逻辑卷的步骤。
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    将要用作 LVM 卷的分区初始化为物理卷（这样可标记它们）。
    :::
2.  ::: para
    创建卷组。
    :::
3.  ::: para
    创建逻辑卷。
    :::
:::
::: para
创建逻辑卷后，可以生成并挂载该文件系统。本文档示例使用的是 GFS2
文件系统。
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    在逻辑卷中用 `gfs_mkfs2`{.command} 创建 GFS2 文件系统。
    :::
2.  ::: para
    使用 `mkdir`{.command}
    命令创建一个新的挂载点。在集群的系统中，在集群的所有节点中创建挂载点。
    :::
3.  ::: para
    挂载文件系统。需要在 `fstab`{.filename} 为系统中的每个节点添加一行。
    :::
:::
::: para
另外，可以使用 LVM GUI 创建并挂载 GFS2 文件系统。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
虽然可在独立系统中部署 GFS2 文件系统，也可将其作为集群配置的一部分，但在
Red Hat Enterprise Linux 7 中不支持将 GFS2 作为独立文件系统使用。Red Hat
将继续为集群文件系统挂载快照支持单一节点 GFS2
文件系统（例如：用于备份）。
:::
:::
:::
::: para
创建 LVM 卷在每台机器上都是不同的，因为保存 LVM
设置信息的区域是在物理卷中，而不是在创建该卷的机器中。使用存储的服务器有本地副本，但可使用物理卷中的内容重新生成。如果
LVM 版本兼容，则可以将物理卷附加到不同服务器中。
:::
:::
::: section
::: titlepage
# [⁠]{#LVM_administration.html#fsgrow_overview}3.3. 在逻辑卷中增大文件系统 {.title}
:::
[]{#LVM_administration.html#idm140426169204608
.indexterm}[]{#LVM_administration.html#idm140426152825600 .indexterm}
::: para
要在逻辑卷中增大文件系统，请按以下步骤执行：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    创建新物理卷。
    :::
2.  ::: para
    扩展带有您想要增大的文件系统逻辑卷的卷组，使其包含新的物理卷。
    :::
3.  ::: para
    扩展逻辑卷使其包含新的物理卷。
    :::
4.  ::: para
    增大文件系统。
    :::
:::
::: para
如果卷组中有足够的未分配空间，则可以使用那些空间来扩展逻辑卷，而不是执行步骤
1 和 2。
:::
:::
::: section
::: titlepage
# [⁠]{#LVM_administration.html#backup}3.4. 逻辑卷备份 {.title}
:::
[]{#LVM_administration.html#idm140426142393520
.indexterm}[]{#LVM_administration.html#idm140426142392080
.indexterm}[]{#LVM_administration.html#idm140426164225792
.indexterm}[]{#LVM_administration.html#idm140426164224352 .indexterm}
::: para
元数据备份和归档会在每次修改卷组和逻辑卷配置时自动进行，除非在
`lvm.conf`{.filename} 文件中禁用了此功能。默认情况下，元数据备份保存在
`/etc/lvm/backup`{.filename} 文件中，元数据归档保存在
`/etc/lvm/archive`{.filename} 文件中。元数据归档在
`/etc/lvm/archive`{.filename} 文件中保存的时间和多少取决于您在
`lvm.conf`{.filename} 文件中设定的参数。日常系统备份应该在备份中包含
`/etc/lvm`{.filename} 目录的内容。
:::
::: para
注意：元数据备份并不包含逻辑卷中的用户和系统数据。
:::
::: para
可以手动使用 `vgcfgbackup`{.command} 命令将元数据备份到
`/etc/lvm/backup`{.filename} 文件中。可以使用 `vgcfgrestore`{.command}
恢复元数据。有关 `vgcfgbackup`{.command} 和 `vgcfgrestore`{.command}
命令的论述请参考 [第 4.3.13 节
"备份卷组元数据"](#LVM_CLI.html#VG_backup){.xref}。
:::
:::
::: section
::: titlepage
# [⁠]{#LVM_administration.html#logging}3.5. 日志 {.title}
:::
[]{#LVM_administration.html#idm140426114037248
.indexterm}[]{#LVM_administration.html#idm140426114036288 .indexterm}
::: para
所有信息输出都是通过日志模块传递，日志模式根据日志级别有不同的选择：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    标准输出/错误
    :::
-   ::: para
    系统日志
    :::
-   ::: para
    日志文件
    :::
-   ::: para
    外部日志功能
    :::
:::
::: para
在 `/etc/lvm/lvm.conf`{.filename} 中设定日志级别，有关详情请参考
[附录 B, *LVM 配置文件*](#config_file.html){.xref}。
:::
:::
::: section
::: titlepage