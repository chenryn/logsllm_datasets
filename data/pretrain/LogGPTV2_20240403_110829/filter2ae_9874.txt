现在的逆向C++题越来越多，经常上来就是一堆容器、标准模板库，这个系列主要记录这些方面的逆向学习心得
本文主要介绍`std::vector`，因为逆向题中的C++代码可能会故意写的很绕，比如输入一个数组，直接给`vector`赋值即可，但是也可以用稍微费解的方法`连续push_back()`，也算是一种混淆的手段，文章中的示例会逆向一些故意写的繁琐的程序
# vector
## 内存布局
仍然用vs调试，观察内存布局
`vector a`的第一个字段是`size 大小`第二个字段是`capacity 容量`
和`std::string`差不多
当`size>capacity`也就是空间不够用时
首先配置一块新空间，然后将元素从旧空间一一搬往新空间，再把旧空间归还给操作系统
## 内存增长机制
测试代码：
    #include
    #include
    using namespace std;
    int main(int argc, char** argv) {
        std::vector a;
        int num[16];
        for (int i = 0; i  too long");
        _Xlen();
    else if (_Capacity _Alval.allocate(_Capacity);//申请新空间
        pointer _Ptr = _Newvec;
        _TRY_BEGIN
            _Ptr = _Umove(_Myfirst, _VEC_ITER_BASE(_Where),
                _Newvec);   //move原先的数据
        _Ptr = _Ucopy(_First, _Last, _Ptr); //copy新增的数据到新内存之后
        _Umove(_VEC_ITER_BASE(_Where), _Mylast, _Ptr);  
        _CATCH_ALL
            _Destroy(_Newvec, _Ptr);
        this->_Alval.deallocate(_Newvec, _Capacity);//释放原来申请的内存
        _RERAISE;
        _CATCH_END
    ...
详见注释，注意这句`扩容1.5倍后依然不够用，则容量等于当前数据个数加上新增数据个数`，也就解释了一开始的增长是`1 2 3 4`的原因
### 调试
具体调试一下，当`push_back`(0)和(1)时：
注意一开始的内存窗口，每次动态扩容时确实已经改变了存储空间的地址
再F5执行到断点，内存窗口的`红色`说明这块内存刚动过，已经被操作系统回收了，`vector`中的元素也已经改变了存放地址
## accumulate
上次写西湖论剑`easyCpp`的探究时有朋友说再举一些`std::accumulate`的例子...
> 关于用`std::accumulate + lambda`反转`vector`，在上一篇文章已经写过了
>
> [西湖论剑初赛easyCpp探究](https://xz.aliyun.com/t/4880)
在这边就算是补个例子
    #include
    #include
    #include
    #include
    using namespace std;
    int main(int argc, char** argv) {
        std::vector v(5);
        for (int i = 0; i > v[i];
        }
        int sum = std::accumulate(v.begin(), v.end(), 0,
            [](int acc, int _) {return acc + _; });
        std::cout ::const_iterator iter=ivec.begin();iter!=ivec.end();++iter){
        /*...*/ 
    }
### IDA视角
IDA中打开，因为是windows下vs编译的，看不出`vector`和`accumulate`和`lambda`的特征了
分析一下，开了一块内存0x14字节，也就是对应我们的5个int
依次输入赋值，最后用一个指针++遍历这个地址
获得累加和并输出
## transform
换个稍复杂的`std::transform`的例子，保留特征，用g++编译
    #include
    #include
    #include
    #include
    using namespace std;
    int main(int argc, char** argv) {
        std::vector a = { 1,2,3,4,5};
        std::vector b(5);
        std::vector result;
        for (int i = 0; i > b[i]; }
        std::transform(a.begin(), a.end(), b.begin(), std::back_inserter(result),
            [](int _1, int _2) { return _1 * _2; });
        for (int i = 0; i  注意，`vector b`大小一定要超过`vector a`，从参数中也可以看出来，`b`只传入了`begin()`
>
> 如果`vector b`较小，后面的内存存放的是未知的数据
>
> 会造成未定义行为 UB
### IDA视角
IDA打开可以看到`vector`相关代码，但是命名很乱，根据`std::transform` **二元操作符** 的特征我们可以更改一下变量名
我们定义的`vector{1,2,3,4,5}`在内存中如下
跟进`std::transform`
一眼注意到最关键的`lambda`，其他都是`operator* = ++`等重载的迭代器相关的操作符
熟悉`transform`的话显然没有需要我们关注的东西
`lambda`中也只是我们实现的简单乘法运算
算法很简单，只要输入5个2就会得到`win`了
## vector存vector
这个程序写的有点...没事找事，用于再深入分析一下
> 比如输入10个数，分别放入size为1 2 3 4的四个vector，并且把4个vector一起放在一个vector中,再进行运算  
>  虽然正常程序不会这么写，但是作为逆向的混淆感觉效果不错
    #include
    #include
    #include
    #include
    using namespace std;
    int main(int argc, char** argv) {
        std::vector> a;
        a.push_back(std::vector{1, 2, 3});
        a.push_back(std::vector{6, 7});
        for (auto v : a) {
            for (auto n : v) {
                std::cout  >.push_back(&vec1)`
> 可以理解为外层`vector`存了内层`vector`的"指针"
输出部分：
稍微有些不理解，看起来两个内层`vector`的迭代器之间有一些优化
`vec1 =
end(vec2_addr)`，这一句没怎么看懂，因为上传附件经常丢失...没有上传例程，通过源码编译比较简单，大佬们有兴趣可以试着逆一下逻辑
不过主线还是清晰的
  * 外层`vector`的迭代器`operator ++`和`operator !=`
  * 双层循环，内层循环分别得到每个内层`vector`的`*iterator`，通过`ostream`输出
## 小总结
`vector`中连续内存里存的是 **类型的数据结构** ，比如`int`的数据结构，`vector`的数据结构
但无论如何，每个`vector`用于存数据的内存都是连续的
比如 `{1,2,3}`,`vector{1,2},vector{3,4,5}`这两个`vector`