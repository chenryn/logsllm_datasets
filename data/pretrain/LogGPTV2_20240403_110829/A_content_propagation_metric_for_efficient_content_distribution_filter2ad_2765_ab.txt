blocks and a τ of 30 seconds, the example block propagation band-
width is approximately 120 KBytes/s.
Block propagation bandwidth enables peers to compare the rel-
ative beneﬁts of their block uploads to competing swarms over a
common time interval τ . To illustrate the metric and its relation to
328s1
s2
p
s1
s2
p1
p2
s3
Figure 5: Block propagations in two competing swarms. Solid
edges indicate the propagation of a particular block uploaded by
peer p. Dashed edges indicate transfers of other blocks that com-
pete with p’s block for peers’ upload bandwidth. p’s block propa-
gates more widely in swarm s1 than in s2.
Figure 6: Three competing swarms. Peer p1 in swarms s1 and
s2 and peer p2 in swarms s1 and s3 converge on the allocation
of bandwidth indicated by the gray arrows. p2’s CPM value for
s3 is smaller than for s1 due to the swarms’ sizes; p1 allocates
its bandwidth to s2, where its blocks do not compete with p2’s
uploads.
the value of a block upload, consider the block propagations shown
in Figure 5. Peer p is a member of swarms s1 and s2, to which
p uploads tracked blocks. On average, peers in s1 distribute their
blocks more widely than peers in s2, as indicated by solid edges.
Dashed edges indicate peer-to-peer transfers of other blocks, which
compete for peers’ upload bandwidth. The higher average block
propagation in s1 can be due to several factors, including swarm
size, competing uploads, peer behavior, and network conditions.
4.2 Content Propagation Metric
Block propagation bandwidth captures the utility of a given block
upload, which may suffer from a high rate of ﬂuctuation depend-
ing on that block’s relative rarity and peer r, the peer that receives
the block in the tracked transfer. To compensate for such ﬂuctua-
tions, the CPM is based on a statistical sample of blocks that are
disseminated by each peer.
The CPM captures the utility of a peer to a given swarm based
on its recent uploads. A peer’s CPM value for a particular swarm
is computed from block propagation bandwidths obtained within a
recent time interval π = t′ − t. Formally, let
p,s = (cid:8)vt1,t′
V t,t′
p,r1,b1 , vt2,t′
p,r2 ,b2 , . . .(cid:9)
1
2
be the set of all block propagation measurements where blocks
b1, b2, . . . are from swarm s and t < t′
i ≤ t′ for all i. Then,
CPMt,t′
p,s = (cid:16) X
v∈V t,t′
p,s
v(cid:17)/(cid:12)(cid:12)V t,t′
p,s (cid:12)(cid:12),
the average of the measurements. We deﬁne
CPMp,s = CPMt∗
p,s
−π,t∗
,
with the times omitted, to be p’s current value for swarm s dur-
ing the most recent time interval π, where t∗ is the current time.
Each value CPMp,s is implemented as a rolling average that is
continually updated as new block propagation bandwidths become
available and old measurements become stale.
The CPM distills the salient properties of response curves for de-
ciding to which swarms peers should upload their blocks in order to
yield high aggregate bandwidth. A peer’s CPM value for a particu-
lar swarm approximates the instantaneous slope of the swarm’s re-
sponse curve at its point of operation. Whereas Antfarm measures
a response curve and uses its slope to predict a swarm’s bandwidth
yield for any amount of seeder bandwidth, the CPM directly mea-
sures the slope of the response curve without the need to explicitly
generate the curve.
To illustrate the CPM, consider the bandwidth allocation of two
peers originating content for three new swarms with identical net-
work conditions and no competition from other uploaders, as de-
picted in Figure 6. Swarms s1 and s2 distribute popular content,
with new downloaders joining at a higher rate than swarm s3. Peer
p1 possesses content for s1 and s2, and peer p2 possesses content
for s1 and s3. After uploading a few blocks and measuring CPM
values, p2 identiﬁes s1 as the swarm that beneﬁts more from its
bandwidth due to, in this example, its larger size. p1 likewise mea-
sures a high CPM value for s1, but blocks uploaded by p2 interfere
with p1’s uploads, causing both peers’ CPM values for s1 to dimin-
ish. Consequently, p1 allocates its bandwidth to s2, which lacks the
competition of p2’s uploads.
As swarm dynamics change, CPM values shift to adjust peers’
bandwidth allocations. Continuing the above example, after s1 has
received sufﬁciently many blocks, its peers may be able to sustain
high aggregate bandwidth without support from p2. In this case,
p2’s block uploads to the swarm would compete with a large num-
ber of uploads from the peers themselves, causing p2’s blocks to
propagate less. In turn, p2’s CPM value for s3 may exceed its CPM
value for s1, causing p2 to allocate its bandwidth to s3 instead.
The CPM provides peers information to allocate bandwidth based
on current swarm dynamics. It might be tempting to instead use a
global rarest policy, where peers request rare blocks from neigh-
bors regardless of swarm, and peers in multiple swarms preferen-
tially satisfy requests for blocks that are rarest within their respec-
tive swarms. However, such a policy operates solely based on the
number of replicas of each block, and disregards swarm dynamics
and peer behavior.
A peer’s CPM value provides an accurate estimate of the peer’s
value to a swarm relative to competing swarms. The CPM captures
the average beneﬁt that peers’ recent block uploads had on their
swarms, providing a useful prediction of the value of future block
uploads.
4.3 Robustness of the CPM
The CPM handles changes in swarm membership and highly dy-
namic swarms, and achieves high performance in deployments with
swarms of vastly different sizes. The CPM naturally dampens oscil-
lations to converge on a stable allocation of bandwidth. We discuss
these issues in turn.
329s1
s2
p
Figure 7: Measurement time interval. Edges indicate the prop-
agation of blocks originating at peer p in swarms s1 and s2. Solid
edges show the propagations within a time interval τ that is too
small for p to differentiate its beneﬁt to the competing swarms. Us-
ing a larger τ , indicated by dashed edges, makes it clear that s2
receives more beneﬁt from p’s blocks.
4.3.1 Probing Swarms
Highly dynamic swarms pose two challenges for determining ef-
ﬁcient bandwidth allocations. First, when peers join swarms for
which they have no block propagation data, they are unable to
compute the marginal beneﬁt to the system from uploading blocks
to the new swarm versus uploading blocks to a competing swarm.
Second, swarms with high peer churn can respond very differently
to a peer’s contributions from one moment to the next. Conse-
quently, such swarms can regularly invalidate many peers’ CPM
values, causing them to operate suboptimally.
Probing swarms enables calculation of CPM values for these
problematic swarms with minimal overhead. To probe a swarm, a
peer temporarily prioritizes requests for blocks in that swarm above
other block requests until it has uploaded a small, constant number
of blocks to the swarm. Data blocks are typically 128–256 KBytes,
and we have found two block uploads to be sufﬁcient for computing
provisional CPM values to adapt to highly dynamic swarms.
4.3.2 Measurement Time Interval
The CPM measures the initial surge of block exchanges that oc-
curs when a peer injects blocks into a swarm. The growth of a
block’s propagation tree reﬂects the swarm’s demand for the block
with respect to block availability, peer behavior, and network condi-
tions within the vicinity of its tracked uploader. The wide range of
swarm behavior means that using a globally constant time interval
τ for measuring block propagations from all peers is insufﬁcient.
Figure 7 gives an intuition of how the choice of measurement
time interval affects a peer’s ability to differentiate among com-
peting swarms. Swarm s1 is signiﬁcantly smaller than s2, but, as-
suming comparable network conditions and competition for blocks,
using a small τ prevents p from recognizing that s2 receives more
beneﬁt from each block. The propagation trees for small τ , rep-
resented by solid edges, are nearly identical in the two swarms,
causing p to allocate its bandwidth equally between them. Increas-
ing τ enables p to discover s2’s ability to achieve higher aggregate
bandwidth than s1 for each block.
Measuring block propagation with a τ that is unnecessarily large
likewise decreases performance. A large measurement time inter-
val increases the delay between the time p ﬁnishes uploading a
block and the time p has an updated CPM value that incorporates
the newly measured block propagations. Thus, choosing a suitable
τ is a tradeoff between system performance, measured as aggre-
gate bandwidth, and system adaptability, or the time required for
the system to converge on a new allocation of bandwidth in highly
dynamic deployments.
Our implementation of V-Formation addresses the CPM’s sensi-
tivity to the measurement time interval by choosing an interval for
each peer that teases apart the peer’s highest-valued swarms. The
system maintains a measurement time interval τp speciﬁc to each
peer p. Based on recent block propagation data, the system adjusts
τp in order to account for changes in size of p’s swarms. To do this,
the system periodically uses its record of p’s recent block uploads
to measure block propagation bandwidths for three different values
of τ : τp, τ low
p = 2·τp. It then updates τp with
the smallest of the three time intervals for which p achieves differ-
ent CPM values for its two swarms with the largest CPM values,
corresponding to the swarms for which p has the greatest impact.
Thus, the system continuously and iteratively computes τp, adjust-
ing its value over time.
p = 1/2·τp, and τ high
4.3.3 Stabilization
The CPM mitigates oscillations in bandwidth allocations despite
complex interactions among peers that inﬂuence multiple swarms.
First, changes in CPM values only affect the bandwidth allocations
of peers that belong to multiple swarms. The remaining major-
ity of peers propagate blocks within their respective swarms re-
gardless of CPM values, dampening the effects of shifting band-
width allocations on a swarm’s aggregate bandwidth. Second, a
peer’s CPM values for competing swarms regulate the peer’s band-
width allocation among the swarms. A peer’s CPM value for a
swarm naturally decreases as the peer uploads to the swarm be-
cause the uploads increase competition for downloading peers’ up-
load bandwidth. Once the CPM value drops below the CPM value
of a competing swarm, the uploading peer allocates its bandwidth
elsewhere, leaving the swarm with sufﬁcient content to temporarily
maintain a steady aggregate bandwidth. In Section 6, we show that
system aggregate bandwidth converges stably when there are mul-
tiple swarms vying for bandwidth from cache servers with limited
upload capacity.
5.
IMPLEMENTATION
We have implemented our approach to content distribution based
on the CPM in a system called V-Formation. V-Formation adopts
a hybrid architecture that combines peer-to-peer exchanges with
bandwidth from optional cache servers managed by a logically cen-
tralized coordinator. The coordinator tracks block exchanges in
swarms based on the transfer of tokens and uses its measurements
to compute CPM values. Tokens are unforgeable credits minted by
the coordinator that function as a virtual currency; peers exchange
tokens with each other for content blocks and reveal spent tokens
to the coordinator as proof of contribution. Each token can only be
spent once, and the coordinator veriﬁes that each token is spent for
a block within the swarm for which it was minted. V-Formation
augments Antfarm’s token protocol to include an identiﬁer for the
speciﬁc block for which a token was exchanged.
This section ﬁrst discusses the operation of the coordinator, then
the operation of peers based on the coordinator’s guidance. For
simplicity, the discussion assumes compliant peers that follow the
protocol as proscribed; we address incentive compatibility in Sec-
tion 5.4.
5.1 Coordinator
V-Formation’s logically centralized coordinator consists of three
components: web servers, processors, and a shared state layer (Fig-
ure 8). First, web servers process requests from peers to dispense
330cache servers
e
t
a
t
s
d
e
t
u
b
i
r
t
s
i
d
,
d
e
r
a
h
s
processors
coordinator
web
servers
swarms of
end users
Figure 8: The V-Formation coordinator. Web servers communi-
cate with peers (including cache servers) to gather information on
swarm dynamics. Processors use swarm dynamics to compute peer
bandwidth allocations. Web servers and processors communicate
via a distributed state layer.
fresh tokens, collect spent tokens, and notify peers of computed
bandwidth allocations. Second, processors use token exchanges
aggregated by the web servers to calculate peer bandwidth alloca-
tions. Third, a distributed state layer grants web servers and pro-
cessors read and write access for consolidating block exchange in-
formation and bandwidth allocations. The web servers, processors,
and state can be distributed across multiple physical machines, or
they can run on a single physical host for smaller deployments. We
describe the operations of web servers and processors in turn, fol-
lowed by a summary of all information stored in the distributed
state layer.
5.1.1 Web Servers
V-Formation’s peer-facing web servers function as an augmented
tracker for facilitating swarms, similar a BitTorrent tracker. Web
servers accept three types of requests asynchronously from peers:
announce, get_tokens, and deposit_tokens. Peers issue periodic
announce requests for each of their swarms to obtain addresses of
other peers and to discover how to allocate bandwidth to swarms.
An announce request contains the requesting peer’s identiﬁer and
a swarm’s identiﬁer, represented as a 20-byte hash. A web server
responds to an announce request with addresses of a random set
of peers and the requesting peer’s most recent CPM value for the
swarm. Announce intervals are dynamically adjusted to achieve a
constant CPU utilization of the web servers.
The get_tokens and deposit_tokens requests facilitate the exchange
of fresh and spent tokens between peers and the coordinator, re-
spectively. The coordinator maintains a credit balance for each
peer that represents the total number of tokens that the peer can
obtain across all swarms. A get_tokens request deducts from the
issuer’s credit balance in exchange for fresh tokens for a particular
swarm, to be exchanged for blocks within a speciﬁc time interval.
When a peer receives a token from another peer in exchange for a
block, the peer sends it to the coordinator in a deposit_tokens re-
quest. The web server veriﬁes the token’s authenticity, increases
the peer’s balance accordingly, and, if the coordinator is tracking
the block referenced in the token, records the block exchange in
the state layer.
Web servers record block exchanges in block exchange forests
for use by processors. A block exchange forest contains a set of
peer identiﬁers as vertices and recent block exchanges as time-
stamped, directed edges. Each forest is speciﬁc to a particular block
in a particular swarm; web servers build a separate forest for each
block that the coordinator is tracking. To add a block exchange to
a forest, a web server simply adds an edge from the block’s sender
to its recipient, timestamped using the coordinator’s clock upon re-
ceiving the token.
5.1.2 Processors
Processors continuously iterate over block exchange forests to
extract block propagation bandwidths. A single forest contains a
propagation bandwidth for each edge timestamped prior to the cur-