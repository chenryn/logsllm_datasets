### 3.2 Explanations for Detection Techniques

In this section, we provide detailed explanations for the detection techniques outlined in Section 2.3, using q-grams from both static and dynamic analysis reports. The optimal q-gram size (q) for each analysis type was determined in a previous experiment.

#### 3.2.1 Static Analysis Examples

**Heap-Spraying Attack:**
Figure 6(a) illustrates the top five 4-grams contributing to the detection of a heap-spraying attack by Cujo. Notable patterns include:
- The first q-grams match a loop involving strings.
- The last q-grams reflect an empty try-catch block.

These patterns are characteristic of heap-spraying attacks, where the loop is used for memory corruption and the try-catch block inhibits exceptions during the process.

**Obfuscated Drive-by Download:**
Figure 6(b) shows the top 4-grams for the static detection of an obfuscated drive-by download. Initially, these q-grams may not appear malicious, but they reveal the presence of a XOR-based decryption routine. The combination of a loop, the XOR operator, and a call to the EVAL function contributes to the detection of the obfuscation.

| Contribution | Features | φs(x) · ws |
|--------------|----------|------------|
| 0.044        | STR.01, STR.01 WHILE ( ID . = ID + ID { TRY { VAR ) { } } | s ∈ S (4-grams) |
| 0.043        | STR.01, STR.01 WHILE ( ID . = ID + ID { TRY { VAR ) { } } | s ∈ S (4-grams) |
| 0.042        | STR.01, STR.01 WHILE ( ID . = ID + ID { TRY { VAR ) { } } | s ∈ S (4-grams) |
| 0.039        | STR.01, STR.01 WHILE ( ID . = ID + ID { TRY { VAR ) { } } | s ∈ S (4-grams) |
| 0.039        | STR.01, STR.01 WHILE ( ID . = ID + ID { TRY { VAR ) { } } | s ∈ S (4-grams) |

| Contribution | Features | φs(x) · ws |
|--------------|----------|------------|
| 0.124        | = ID + ID ; EVAL ( ID ( ID ) ^ ) ; } ; STR.01 ; FOR ( | s ∈ S (4-grams) |
| 0.121        | = ID + ID ; EVAL ( ID ( ID ) ^ ) ; } ; STR.01 ; FOR ( | s ∈ S (4-grams) |
| 0.112        | = ID + ID ; EVAL ( ID ( ID ) ^ ) ; } ; STR.01 ; FOR ( | s ∈ S (4-grams) |
| 0.104        | = ID + ID ; EVAL ( ID ( ID ) ^ ) ; } ; STR.01 ; FOR ( | s ∈ S (4-grams) |
| 0.096        | = ID + ID ; EVAL ( ID ( ID ) ^ ) ; } ; STR.01 ; FOR ( | s ∈ S (4-grams) |

Overall, this experiment demonstrates Cujo's excellent detection performance, identifying the majority of drive-by downloads with minimal false alarms, even when the attacks were previously unknown. Cujo outperforms current anti-virus tools and is nearly on par with the offline analysis system Jsand.

### 3.3 Dynamic Analysis Examples

**Heap-Spraying Attack:**
Figure 7(a) presents the top 3-grams contributing to the dynamic detection of a heap-spraying attack. The attack type is clearly indicated by the first q-gram, which corresponds to the abstract operation "HEAP SPRAYING DETECTED," triggered by our sandbox. The remaining q-grams reflect typical patterns of shellcode construction, including unescaping an encoded string and a NOP sled.

**Obfuscated Attack:**
Figure 7(b) shows the top 5 3-grams for an obfuscated attack. Several calls to functions typical for obfuscation, such as eval and unescape, are visible, along with conversion functions like parseInt and fromCharCode. The last q-gram reflects the instantiation of an object, likely related to a browser extension vulnerability.

| Contribution | Features | φs(x) · ws |
|--------------|----------|------------|
| 0.190        | HEAP SPRAYING DETECTED CALL unescape SET global.shellcode TO unescape SET global.shellcode TO "%90%90%90%90%90%90%90... | s ∈ S (3-grams) |
| 0.121        | HEAP SPRAYING DETECTED CALL unescape SET global.shellcode TO unescape SET global.shellcode TO "%90%90%90%90%90%90%90... | s ∈ S (3-grams) |
| 0.053        | HEAP SPRAYING DETECTED CALL unescape SET global.shellcode TO unescape SET global.shellcode TO "%90%90%90%90%90%90%90... | s ∈ S (3-grams) |
| 0.053        | HEAP SPRAYING DETECTED CALL unescape SET global.shellcode TO unescape SET global.shellcode TO "%90%90%90%90%90%90%90... | s ∈ S (3-grams) |
| 0.036        | HEAP SPRAYING DETECTED CALL unescape SET global.shellcode TO unescape SET global.shellcode TO "%90%90%90%90%90%90%90... | s ∈ S (3-grams) |

| Contribution | Features | φs(x) · ws |
|--------------|----------|------------|
| 0.036        | CALL unescape CALL CALL fromCharCode CALL eval CONVERT parseInt CALL fromCharCode CALL createElement ("object") | s ∈ S (3-grams) |
| 0.030        | CALL unescape CALL CALL fromCharCode CALL eval CONVERT parseInt CALL fromCharCode CALL createElement ("object") | s ∈ S (3-grams) |
| 0.025        | CALL unescape CALL CALL fromCharCode CALL eval CONVERT parseInt CALL fromCharCode CALL createElement ("object") | s ∈ S (3-grams) |
| 0.024        | CALL unescape CALL CALL fromCharCode CALL eval CONVERT parseInt CALL fromCharCode CALL createElement ("object") | s ∈ S (3-grams) |
| 0.024        | CALL unescape CALL CALL fromCharCode CALL eval CONVERT parseInt CALL fromCharCode CALL createElement ("object") | s ∈ S (3-grams) |

It is important to note that these explanations are specific to individual attacks and should not be interpreted as standalone detection rules. While only the top q-grams are shown, the underlying detection models involve several million different q-grams, making the decision function more complex.

### 3.4 Run-time Performance

To ensure practical application, we evaluate Cujo's run-time performance. We first examine the individual run-time of each system component and then study the overall processing time in a real application setting with multiple users. All run-time experiments were conducted on a system with an Intel Core 2 Duo 3 GHz processor and 4 GB of memory.

#### 3.4.1 Run-time of Components

We split the total run-time of Cujo into contributions from individual components, as shown in Figure 1. By adding extra timing information to the JavaScript analysis, feature extraction, and learning-based detection, we measure the exact contributions to the total run-time on a sample of 10,000 URLs from the Alexa-200k data set.

Figure 8 shows the median run-time per URL in milliseconds, including loading, pre-loading, and the actual analysis by Cujo. Surprisingly, most of the time is spent on loading and pre-loading content, with only 14% devoted to Cujo's analysis. This imbalance can be mitigated using regular caching techniques.

A detailed statistical breakdown of the analysis run-time is presented in Figure 9, showing the distributions of run-time per URL for static and dynamic analysis. Each distribution is displayed as a boxplot, with the box representing 50% of the data, and the lower and upper markers indicating the minimum and maximum run-time per URL. The median is given as a middle line in each box. Except for the sandbox emulation, all components induce a small run-time overhead ranging from 0.01 to 10 ms per URL. The sandbox analysis requires a median run-time of 370 ms per URL, which is costly but still significantly faster than related sandbox approaches.

#### 3.4.2 Operating Run-time

In the final experiment, we evaluate Cujo's run-time in a real application setting. We deploy Cujo as a web proxy and measure the time required per delivery of a web page. For reproducible measurements, we use the Surfing data set, which contains multiple surfing sessions of five individual users. For comparison, we also employ a regular web proxy that simply forwards data to the users. Caching capabilities are enabled in both Cujo and the regular proxy.

Results are shown in Figure 10, where the distribution of run-time per URL is presented as a density plot. The regular proxy has a median processing speed of approximately 150 ms per request. Cujo's run-time is slightly higher, with a median of around 500 ms per web page, inducing only a minimal delay at the web client. For example, the median run-time for visiting web pages from google.com and yahoo.com using Cujo is 460 ms and 266 ms, respectively.

Cujo's run-time distribution shows an elongated tail, with few web pages requiring more than 3,000 ms due to excessive JavaScript code analysis. For instance, visiting pages from facebook.com induces a median run-time of 1,560 ms. However, this experiment demonstrates that Cujo benefits significantly from caching, resulting in only a minor delay at the web client.