2
Make outgoing connection to 
Figure 4: Bitcoin’s peer selection logic and routing-aware
peering (RAP) improvement. When IPnew is chosen for a
new outgoing connection, the RAP function checks whether
a malicious AS will likely be on the path.
The routing-aware peering (RAP) defense requires each
Bitcoin node to obtain the routing knowledge (i.e., the inter-
domain routes) for all of its peering connections. We call this
new core functionality the route inference logic, and we add it
to the existing Bitcoin’s peer selection algorithm. Essentially,
the route inference returns an estimated AS path from the
client (i.e., itself) to any given IP address.
Figure 4 illustrates how the current Bitcoin’s peer selection
logic is implemented and how it can be augmented for RAP.
When a Bitcoin client wishes to make one more outgoing
connection, it selects an IP address IPnew from its internal
tables at random; see step ➊. The current implementation
immediately attempts to make a new outgoing connection to
IPnew; see step ➋. Instead, the RAP implementation takes
the chosen IPnew and checks if the new connection will likely
include any potentially malicious AS before opening a con-
nection to it. Using the route inference logic, RAP obtains
the inferred routes to IPnew and to all existing outgoing peer
IPs (i.e., IP1, · · · , IPk). If a potentially malicious AS appears
in more than τ routes, RAP rejects this new IPnew; otherwise,
it proceeds to make an outgoing connection to it.
The threshold τ is an adjustable parameter deﬁning the
maximum number of allowed connections that share a poten-
tially malicious AS. It controls how strictly the RAP function
is operated. When τ is set to a low value, not many peer con-
nections can share the same intermediate ASes; thus, more
route diversity among peer connections is expected. On the
contrary, if τ is set to a high value, the node allows multiple
of its peering connections to share the same intermediate AS.
Note that τ = 1 forces all the peering routes to be disjoint and
τ = 10 disables RAP. An individual Bitcoin node can easily
adjust the value of τ, and the effect of different values of τ is
analyzed later in Section 6.2.
5 Why RAP Fails to Prevent the Erebus At-
tacks
We have explained why RAP is believed to be effective pre-
vention of the Erebus attacks. However, our discussion in
Section 4 conveniently ignores the implementation details of
the route inference logic, which is the core component of any
Bitcoin RAP implementations. We ﬁrst review and evaluate
several implementation choices for the route inference logic
in RAP and show that there must inevitably exist some route
inference error cases (§5.1). Then, we introduce a subtle but
powerful Erebus attack strategy that exploits even a tiny por-
tion of route inference errors (§5.2). The exploitation gives
an asymmetric advantage to the Erebus adversaries, allowing
them to successfully isolate (or eclipse) the targeted Bitcoin
node with a RAP defense for the majority of cases (§5.3).
5.1 The Devil Is in the Detail: Non-idealities of
Route Inference in RAP
We exhaustively list the possible ways of route inference in
RAP and quantitatively compare them with our large-scale
experiments in the Internet.
We ﬁrst divide all feasible approaches (to the best of our
knowledge) into three categories, i.e., (1) control-plane es-
timation, (2) control-plane look-up, and (3) data-plane mea-
surement, and discuss their pros and cons.
(1) Control-plane estimation: A Bitcoin node locally com-
putes the estimated inter-domain route for a given destination
address. Based on the publicly available data (e.g., AS-level
topology [10], BGP feeds [44, 49]), there have been several
proposals and algorithms on inter-domain route estimation
(e.g., [1,37,47]). (Pros) Individual nodes can run the full route
computation locally, and pre-computation can also be done to
remove the on-line computation burden. (Cons) Estimation
algorithms are imperfect; thus, the BGP route inference may
be prone to estimation errors.
(2) Control-plane look-up: A Bitcoin node directly learns
the BGP routes to a speciﬁc destination from the routing table
(e.g., RIB) of its local BGP gateway. Unlike the previous
BGP estimation, this results from the actual BGP operation
of BGP-speaking routers. (Pros) Bitcoin nodes can obtain
the up-to-date BGP path to the destination by making on-
demand queries to the local BGP gateways. Minimum one
query has to be made to obtain the BGP route to an IP ad-
dress. For this, network operators’ assistance is necessary;
for example, cloud service providers, access ISPs, or cam-
pus networks can provide APIs to the Bitcoin nodes in their
networks for requesting the AS path to a certain destination.
Note that such APIs are already widely available in most
legacy BGP routers; e.g., BGP look-up service in Looking
Glass servers [33]. (Cons) Large networks, such as cloud
service providers, often have multiple BGP exit gateways
interfacing multiple different peering ASes across different
regions. When querying the BGP path to a destination IP ad-
dress, the returned path may differ depending on the speciﬁc
BGP gateways to which the query is made. This is due to
the well-known interaction between intra- and inter-domain
routing protocols (e.g., hot-potato routing [55]). A practical
USENIX Association
30th USENIX Security Symposium    1259
Table 2: A quick comparison between three notable BGP
route estimation algorithms in the literature.
Algorithms
by Authors
Mao et al.
[37]
Qiu et al.
[47]
Akhoondi
et al. [1]
Input Data
Advantages
AS-level
ness relationship
topology and busi-
Lightweight, minimal
dependencies
(all above) and BGP feed data
More ﬁne-grained and
accurate estimation
(all above) and estimated AS
path lengths
Over-estimation of in-
termediate ASes
Measured route
 exists
 does not exist
True Positive
False Positive
Inferred
route
 exists
False Negative
 does 
not exist
True Negative
Figure 5: Confusion matrix for evaluating an inferred route
from v to IPnew, given the potentially malicious AS M.
deployment of a control-plane look-up should take this issue
into account.
(3) Data-plane measurement: A Bitcoin node directly mea-
sures the route towards a speciﬁc destination via probing tools,
such as traceroute. (Pros) This approach requires minimal
reliance on external data. Moreover, a Bitcoin node can ob-
tain a ﬁne-grained (i.e., IP-router level) paths that actual IP
packets would likely travel. (Cons) This cannot be used in
practice. The main problem is that a malicious Erebus AS can
easily manipulate the traceroute measurements. The ma-
nipulation can be done by simply dropping the traceroute
probe packets; worse, more careful manipulation of measured
paths is also possible. Detection of such manipulation (e.g.,
anomaly detection in the longitudinal traceroute analysis)
is extremely difﬁcult because of the dynamic nature of route
changes; see our anomaly detection of traceroute results
in Appendix D. The bottom line is that due to the lack of
authentication in the measured routing paths, detecting such
spooﬁng is extremely challenging, making data-plane mea-
surement an impractical option.
Evaluation setup. We, therefore, implement three state-of-
the-art control-plane estimation schemes (i.e., Mao et al.’s
algorithm [37], Qiu et al.’s algorithm [47], Akhoondi et al.’s
algorithm [1]) and the control-plane look-up mechanism, and
compare them particularly in terms of inference accuracy.
We summarize the three control-plane estimation schemes in
Table 2 and provide their brief descriptions as follows.
• Mao et al.’s algorithm [37] determines the inter-domain
path between two ASes is the shortest AS path among
all “valley-free” paths [22] between them based on the
inferred business relationship [10]. We apply the following
widely practiced BGP policies in order [23]: only valley-
free paths are selected [22]; the shortest AS-path length
route is preferred; and if multiple best paths exist, paths
with smaller next-hop AS numbers are chosen.
• Qiu et al.’s algorithm [47] improves the AS path estimation
for a preﬁx destination (instead of AS) by exploiting the
known AS paths observed by globally-distributed BGP col-
lectors. To implement this algorithm, we use the snapshot
of 850 million AS paths to all IPv4 preﬁxes from 20 RIS
collectors [44] and 25 Routeviews vantage points [49]. The
collected AS paths are used to improve the simulation of
the BGP propagation of these AS paths.
• Akhoondi et al.’s algorithm [1] does not output a single
AS path between two ASes, unlike the other estimation
algorithms, but over-estimates a set of ASes that the trafﬁc
likely traverses. The algorithm extracts all the segments
of three consecutive ASes that appear in the collected AS
paths from BGP collectors. Then it constructs all possible
paths from the computed segments with the consideration
of the given estimated length of the route between two
ASes.6 All unique ASes that appear in these paths are con-
sidered as the intermediate transit ASes between source
and destination ASes.
For the control-plane look-up scheme, we use a PEER-
ING client [50] to access the real-time inter-domain routes
installed at all PEERING servers. While there exist other
live BGP streaming frameworks that allow real-time access
to the collected routes (e.g., BGPStream [11], RIS Live [43]),
PEERING is the only publicly accessible platform that allows
both control-plane look-up and data-plane route measurement
to be performed on the same machine, to the best of our
knowledge. To get the up-to-date BGP paths, we take the
snapshots of the routing tables of all PEERING servers every
hour.
To calculate the accuracy of the three control-plane estima-
tion algorithms and the control-plane look-up mechanism, we
test whether the inferred routes correctly identify a potentially
malicious AS. If both the inferred and measured routes from a
node v to the same IP address include a potentially malicious
AS M, we consider the inferred route a True Positive. Figure 5
shows the confusion matrix that summarizes other evaluation
outcomes. Similar to our evaluation in Section 3.2, we con-
sider top-100 ASes as adversaries and our 59 measurement
nodes as the victim Bitcoin nodes. Hence, we have nearly
6,000 pairs when evaluating the three control-plane estimation
algorithms and 1,200 pairs when evaluating the control-plane
look-up scheme (because the route look-up is only applica-
ble to 12 PEERING nodes). With each attacker-victim pair,
we use TP, FP, FN, and TN to represent the total number of
6The Lastor system in the original paper queries the estimated length be-
tween two arbitrary ASes from the iPlane platform [36], which unfortunately
no longer operational at the time of this writing. Our implementation used
the estimated length from the Qiu et al.’s algorithm instead.
1260    30th USENIX Security Symposium
USENIX Association
1
0.8
0.6
0.4
0.2
0
e
t
a
R
s
s
i
M
1
0.8
0.6
0.4
0.2
0
e
t
a
R
y
c
a
r
u
c
c
A
Mao et al. Qiu et al. Akhoondi
Control-plane 
Mao et al. Qiu et al. Akhoondi
Control-plane 
et al.
look-up 
et al.
look-up 
Control-plane estimation algorithms
Control-plane estimation algorithms
(a) Miss Rate.
(b) Accuracy Rate.
Figure 6: Average Miss Rate and Accuracy Rate with the
standard deviation of the three control-plane estimation algo-
rithms and the control-plane look-up scheme.
FN
TP+TN
TP+FP+FN+TN ) of all the route inference approaches.
True Positive, False Positive, False Negative, and True Neg-
ative inferred routes, respectively, among routes to all IPv4
addresses. We compute the Miss Rate or the False Negative
TP+FN ) to denote the probability of misidentifying
Rate (i.e.,
an IP address as “not traversing AS M” when, in fact, the
route to the IP address does include M. The Miss Rate is
an important metric because it directly shows how often a
victim node v would misidentify an IP address sent by the at-
tacker AS M and connect to it. We also compute the accuracy
(i.e.,
Results. Figure 6a shows the average Miss Rate computed
from all attacker-victim pairs for four different route inference
mechanisms. Among all tested approaches, the control-plane
look-up mechanism yields the lowest average Miss Rate of
0.06. This means that RAP implementing the control-plane
look-up would miss, on average, only 6% of routes that in-
clude the malicious AS. The over-approximation algorithm
by Akhoondi et al. [1] also results in a similar Miss Rate. The
two other algorithms [37, 47] have the average Miss Rates of
0.35 and 0.25, respectively, making them unﬁt for the RAP
implementation. Such high Miss Rates may seem incorrect
to some, especially considering that these route estimation
algorithms, in particular Mao et al.’s algorithm [37], have
been so widely used in academic papers (e.g., [7, 19, 48, 58]
to name a few) for more than a decade. This can be explained
when we see the pretty high accuracy of most route estimation
algorithms in Figure 6b. The accuracy of two widely used
route inference models (see the two leftmost bars) is higher
than 97%, explaining why they have been widely used in ex-
isting works. The algorithm by Akhoondi et al. [1] has much
lower accuracy (e.g., 90%) because its primary purpose is to
over-estimate the intermediary ASes, not to infer a single AS
path accurately.
In a nutshell, most of the existing BGP route estimation
algorithms are highly accurate in inferring the overall view
of the BGP routes of today’s Internet. When it comes to
estimating an exclusion of a malicious AS M on a given path
that does include M for RAP, control-plane look-up is the
most suitable scheme with the lowest yet non-ideal Miss Rate
of 6%.
5.2 How to Exploit Route-inference Errors
Both the adversary AS and the victim Bitcoin node with RAP
can obtain the inferred routes and, as a result, an estimation
of the attacker IPs set. However, only the adversary AS can
obtain the ground-truth set of her IPs because the victim node
cannot accurately obtain the measured routes; refer to Sec-
tion 5.1 to see why direct route measurement by Bitcoin node
is impractical. This offers a fundamental asymmetric advan-
tage to the Erebus adversary compared to the victim Bitcoin
node because the victim has no reliable way of learning a
small subset of attacker IPs. Here, we discuss how the Ere-
bus adversary can exploit this new advantage to enhance her
attacks when RAP is deployed.
We clarify the key terminologies for two speciﬁc types of
IP addresses that are useful for attacks:
• Shadow IP: An IP address whose data-plane route from
the victim to itself includes a malicious AS. The attacker
AS can utilize shadow IPs to create peering connections
that will be under its control. We use the same terminology
from the Erebus attack [57].
• Hidden-shadow IP: A shadow IP address whose inferred
victim-to-itself route does not include the malicious AS.
All the shadow IPs correspond to the union of the True Pos-
itive and False Negative cases in Figure 5 because the ad-
versary AS M does exist on the data-plane paths towards
the IP addresses. Among the shadow IPs, some are hidden-
shadow IPs, and they correspond to the False Negative cases
in Figure 5 as the inferred routes to hidden-shadow IPs do not
include the adversary AS M.
Finding hidden-shadow IPs. An adversary AS can obtain
the accurate shadow-IP set. She can simply send a vic-
tim Bitcoin node an IP packet with a spoofed source IP p,
which triggers a response from the victim node (e.g., ping,
SYN). If the adversary AS sees a corresponding response
(e.g., ICMP Echo Reply, SYN/ACK) from the victim node, the
IP p is conﬁrmed shadow. To obtain the shadow-IP set, the
adversary repeats the same process for all available IPv4
preﬁxes (about 800K) in the Internet. Note that the probe
packets sent to the victim node have all different source IP
addresses. To avoid suspicion, the adversary AS can spread
out the probing over a longer period of time. Also, to reduce
the number of probes to the victim node, the probing can
be made to other public servers (e.g., SSH, DNS, NTP, HTTP,
HTTPS) in the same subnet with the victim node. These public
servers can be easily found with widely available scanning
tools; e.g., Nmap [35], ZMap [16]. To obtain the hidden-
shadow-IP set, the adversary can infer the routes to the enu-
merated shadow IPs by following the RAP defense’s detailed
algorithms, which are supposed to be publicly available, and
remove the True Positive cases.
How many hidden-shadow IPs are found? Figure 7 shows
the availability of hidden-shadow IPs and their distribution in
1,200 attacker-victim scenarios; i.e., adversaries are top 100
USENIX Association
30th USENIX Security Symposium    1261
# IPs
shadow IPs
# hidden-shadow IPs
# /16 prefixes
1
0.8
0.6
0.4
0.2
F
D
C
# ASes
1
0.8
0.6
0.4
0.2
F