attacker modiﬁes e1, then with very high probability sk(cid:48)(cid:48) = ⊥ by the authenticity property of
Construction A.14. Assuming, the attacker does not modify e1, if e2 is modiﬁed then, D(cid:48)
sk(cid:48)(cid:48)(e2) =
⊥, with overwhelming probability, by the authenticity property of Construction A.16. The ﬁnal
construction has ciphertext and key length l(2k + log2 k, k) + k + |s| = 18k + 8 log2 k + |s|.
A.4 Multi-codeword Randomness Simulatable NMC
Deﬁnition A.17 (Multi-codeword RSS-NMC). Let (Enc, Dec) be a (κ, ν)-coding scheme and F
be a family of functions f : {0, 1}ν → {0, 1}ν. For every f ∈ F and s = (s1, . . . , s(cid:96)) ∈ ({0, 1}κ)(cid:96),
deﬁne the tampering experiment
(cid:26) ci ← Enc(si), i ∈ [(cid:96)], ˜c ← f (c1, . . . , c(cid:96)), (˜sr, ˜s) = Dec(˜c)
family F, if for every f ∈ F and any s0, s1 ∈ ({0, 1}κ)(cid:96), we have (cid:8)MultiTamperf
(cid:8)MultiTamperf
k∈N ≈
k∈N, where “≈” may refer to statistical, or computational, indistinguishability.
which is a random variable over the randomness of Enc and Dec. A coding scheme (Enc, Dec)
is multi-codeword, randomness simulatable, strongly non-malleable, with respect to the function
Output same∗ if ∃i : ˜c = ci, and (˜sr, ˜s) otherwise.
MultiTamperf
s
(cid:27)
(cid:9)
(cid:9)
s1
def=
s0
For coding schemes in the common reference string model, the deﬁnition is analogous.
B Proofs
B.1 Proof of Lemma 3.2
((cid:96), auxAv , auxE ) is 0, and As succeeds in
Proof. We are given that the output of Exps,hzAv,As,EH
Av
producing a valid pre-image (˜sr, ˜s) for a new hash, ˜v. Since the output of the experiment is 0,
produces a valid pre-image (ˆsr, ˆs) for ˜v. Assuming, (ˆsr, ˆs) (cid:54)= (˜sr, ˜s), we break
we know that EH
Av
the collision resistance property of Hk.
info auxE , algorithm As, and vector of messages s, such that
Concretely, assume there exist Av with auxiliary info auxAv , extractor EH
Av
(cid:35)
((cid:96), auxAv , auxE ) = 0, hz(˜sr, ˜s) = ˜v, ˜v (cid:54)= vi, i ∈ [(cid:96)] :
with auxiliary
(cid:34)
Exps,hzAv,As,EH
Av
Pr
hz←Hk
(ˆsr, ˆs) (cid:54)= (˜sr, ˜s)
> ,
(2)
for  = 1/poly(k). We deﬁne an adversary A who simulates Exps,hzAv,As,EH
playing against the collision ﬁnding experiment HcollA,Hk . A is deﬁned as follows:
Av
((cid:96), auxAv , auxE ) while
• A1 outputs the security parameter, k, the experiment samples z ← Gen(1k), and sends z
to A.
• A2 simulates Exps,hzAv,As,EH
x1 is the output of As and x2 is the output of EH
Av
experiment.
Av
((cid:96), auxAv , auxE ) and outputs x1 = (˜sr, ˜s) and x2 = (ˆsr, ˆs), i.e.,
, received during the execution of the
Then, assuming Relation 2 holds, we have hz(x1) = hz(x2), and the collision resistance property
(cid:4)
of hz breaks, with non-negligible probability.
31
B.2 Proof of Lemma 3.5
Proof. Let k ∈ N, t = O(poly(k)), and let G be a group-generation algorithm, for which the
discrete logarithm problem is hard. Assuming the hash function family H∗ is 1-more extractable
with respect to G, we deﬁne a PPT attacker A = (A1,A2) that breaks the hardness assumption
on the discrete logarithm problem with non-negligible probability in k. A executes the following
steps
1. (Deﬁne Av, auxAv ): Av(h∗
Zp, and auxAv , st, are zero-length strings.
z, v, auxAv ) = (vx, st), where x is a ﬁxed, non-zero, element in
2. (Deﬁne As): As(h∗
3. (Interact with DLogA,G):
z, s, st) = xs.
(a) A1 supplies the experiment DLogA,G with k; the experiment sends (G, g, p, w) to A,
where w = gs(cid:48)
and s(cid:48) is uniform over Zp.
(b) A2 samples (a, r, s) $← Zp×Zt
p×Zt−1
p
, s = (s1, . . . , st−1), i.e., it samples a hash function
from H∗ and a vector message s with t−1 coordinates. It then sets z = (G, gr, gar) and
partially simulates Exps(cid:48),h∗
(1, auxAv , auxE ), where s(cid:48) = (s(cid:48), s1, . . . , st−1), without
zAv,As,EH∗
Av
accessing s(cid:48). Here, EH∗
and auxE are totally deﬁned by Av and auxAv , since we assume
Av
that H∗ is 1-more extractable. Then, A2 executes the following steps:
i. computes h∗
z(s(cid:48), s1, . . . , st−1) while not having access to s(cid:48), i.e., computes v =
((gs(cid:48)
)r1 · gd, (gs(cid:48)
ii. samples (˜v, st) ← Av(h∗
z, v, auxAv ), where by deﬁnition
(cid:16)(cid:16)
)ar1 · gad), where d = (cid:104)[r](2:t), s(cid:105).
(cid:16)
˜v = vx =
z, v, auxE ), and sends s = r−1
(h∗
g(r1s(cid:48)+d)(cid:17)x
,
ga(r1s(cid:48)+d)(cid:17)x(cid:17)
.
iii. samples ˆs ← EH∗
Av
1 (x−1(cid:104)r, ˆs(cid:105) − d) to DLogA,G.
It is not hard to see that v and ˜v are valid hash values with respect to H∗, and the execution of
As(h∗
z, s(cid:48), st) would yield xs(cid:48) = (xs(cid:48), xs1, . . . , xst−1), which is a valid pre-image for ˜v. Moreover,
A, that is not aware of s(cid:48), does not need to fully simulate Exps(cid:48),h∗
(1, auxAv , auxE ), since
, does not depend on As. In other words, with overwhelming probability, in
the extractor, EH∗
Av
the execution of Exps(cid:48),h∗
(1, auxAv , auxE ), As would output the right pre-image for ˜v while
zAv,As,EH∗
Av
having access to s(cid:48), still we don’t have to trigger the speciﬁc event in order for EH∗
Av
to output a
valid pre-image for ˜v. Concretely, and assuming H∗ is 1-more extractable we have
zAv,As,EH∗
Av
where
Pr
z←H∗
h∗
k
[h∗
z(ˆs) = ˜v] = Pr
Pr
z←H∗
h∗
k
z(ˆs) = ˜v] ≥ 1 − negl(k),
[h∗
(cid:16)
g, g(cid:17)
(cid:104)(cid:16)
gx(r1s(cid:48)+d), gax(r1s(cid:48)+d)(cid:17)(cid:105)
=
= Pr[= x(r1s(cid:48) + d)]
= Pr[r−1
1 (x−1  −d) = s(cid:48)] = Pr[s = s(cid:48)].
By Relations (3) and (4) we have
Pr[s = s(cid:48)] ≥ 1 − negl(k),
and DLogA,G(k) = 1, i.e., gs = gs(cid:48)
, with non-negligible probability in k.
32
(3)
(4)
(cid:4)
B.3 Proof (sketch) of Lemma 6.2
Proof. Recall that, any f ∈ Faﬀ produces a valid, new codeword, ˜c, with respect to (Enc, Dec),
s is same∗,
only when ˜c is independent of the original codeword. Moreover, the output of Tamperf
only if f = (0, 1), where Tamper is the tampering experiment of Deﬁnition 5.1 (for brevity we
omit the CRS). Those facts imply that, when considering multiple codewords/messages and
the code (Enc, Dec) against Faﬀ, any tampering function f = (f1, . . . , f(cid:96)) ∈ ¯F (cid:96)
aﬀ, makes the
tampering experiment of Deﬁnition A.17 to output same∗, only if a single fm = (bm, dm) is the
identity function, i.e., bm = 0, dm = 1, while the remaining functions are the zero-functions, i.e.,
bj = 0, dj = 0, j ∈ [(cid:96)]\{m}. We will refer to such a tampering function using the term projection
function. Now, given a tampering function f = (f1, . . . , f(cid:96)) ∈ ¯F (cid:96)
aﬀ, and messages s = (s1, . . . , s(cid:96)),
we can easily construct f(cid:48) ∈ Faﬀ, s(cid:48), for which MultiTamperf
s(cid:48) , where MultiTamper is
the tampering experiment of Deﬁnition A.17. If f(cid:48) is a projection function with respect to index
m, we set f(cid:48) = (0, 1) and s(cid:48) = sm, and clearly, both experiments output same∗. Otherwise,
i=2 fi(Enc(si)) and we set f(cid:48) = (b + b1, d1), s(cid:48) = s1,
and we can prove, exactly as in the proof of Theorem 5.9, that either the tampered codeword is
independent of the original, and the outputs for both experiments are decidable by inspecting
the tampering function, or both experiments output ⊥. Thus, assuming that we can distinguish
between MultiTamperf
aﬀ and messages s0, s1, we can
and Tamperf(cid:48)
construct f(cid:48) ∈ Faﬀ, s(cid:48)
, breaking RSS-non-
s(cid:48)
(cid:4)
malleability for Construction 5.8.
assuming f1 = (b1, d1), we compute b =(cid:80)(cid:96)
s1, for some f ∈ ¯F (cid:96)
s0 and MultiTamperf
0, s(cid:48)
1, and distinguish between Tamperf(cid:48)
s(cid:48)
s = Tamperf(cid:48)
0
1
33