outage tracking
out-of-band checks and balances,342,357
operational work(see toil)
operationalunderload,132
operational overload,130
operational load
on-call
olderreleasesbildin9
number of“nines”,38,477
NORADTracksSanta website,369
networking,
network security,106
Network Quality of Service(QoS),157,252
network partitions,287
network load balancer,227
0
Escalator,178
benefitsof182
types of, 407
cross-industrylessons,467
training materials, 397
trainingfor,395-401
time requirements,128
team building,391
target event volume,8
shadowon-call,405
rotation schedules,126
resourcesfor,129
overviewof125,406
learning checklists,403
inappropriateoperational loads,130
formalincident-management protocols,130
educationpractices,392,395
continuing education,406
best practicesfor,393,400-405
benefitsof,132
balanced on-call,127
17
post hoc analysis,58
policies and procedures, enforcing, 89
planned changes, 277
periodic scheduling (see cron)
periodic pipelines,328
performancetests,186
performance
packet encapsulation,228
overhead,49
Outalator
efficiency and,12
ClassicPaxos algorithm,301
utilization signals,253
retrying requests,254
approaches to,247
tagging in, 180
reporting and communication, 181
benefits of,178
aggregation in,180
Outalator,178-182
EgalitarianPaxos consensus algorithm,302
diskaccess and,303
requestcriticality,251
product launches and,383
per-requestretrybudget,54
per-customerlimits,248
overviewof,258
loadfromconnections,257
best practicesfor,483
incident analysis,181
(see also consensus algorithms)
astPaxosconsensus algorithm,301,320
lient-side throttling,249
(see also cascading failures)
（see also retries,RPC）
索
445
---
## Page 488
446
protocol buffers (protobufs), 19, 202
production tests,187
production probes,202
production meetings,426-430
productioninconsistencies
production environment (see Google produc-
product launches
Prodtest(Production
process updates,277
process death, 276
problem reports,136
proactive testing,159
privacy,341
postmortems
engagement model)
agenda example,497
detecting with Prodtest,76
tionenvironment)
techniques forreliable,380-384
rate of,370
processes for,372
overviewof,387
launchcoordinationengineering370
launch coordination checklists,373-380,
drivi
defined,370
best practices for,480
triggers for, 170
rewarding participation in, 174
ongoing improvements to, 175
introducing postmortem cultures172
Google's philosophy for,169
formal review and publication of 171
examplepostmortem,487-490
cross-industry lessons,465-467
concept of,169
best practicesor,171-174,48
benefits of,169
493
ving convergence and simplification,374
neering（LCE),384-387
索引
Test),76
281
reliability testing
regression tests,186
redundancy,347,354
recursiveseparation of responsibilities163
recursiveDNS servers,225
recursion(seerecursion)
recovery systems,345
recovery,359
Rapid automatedrelease system,90,91
RAID,354
Raft consensus protocol,298,302
quorum (see distributed consensus systems)
8
queuing-as-work-distribution pattern,295
queuing
QueryofDeath,276
“queries per second”model, 248
Python's safe_load,201
push frequency, 34
PRR(Production Readiness Review) model,
Protocol Data Units,229
amount required,184
continuous build and deployment, 90-94
(see also consensus algorithms)
management of,266,294
first-in,first-out,67
controlled delay,267
442,444-448
canary tests,189
break-glass mechanisms, 201
benefitsof,204
wider application of, 95
the roleof release engineers,87
defined,87
---
## Page 489
request latency,38,60
replication,347,354
replicated statemachine(RSM),291
replicas
RemoteProcedure Call（RPC),19,138,252
reliablereplicateddatastores,292
numberdeployed,304
locationof06,10
drawbacksofleaderreplicas08
RPC criticality,251
retries,268-271
deadlines
bimodal, 273
unit tests,185
timing of,187
testing atscale,192-204
system tests,186
stress tests,188
statistical tests,196
speedof,196
smoketests,186
segregated environments and,198
sanity testing,186
production tests,187
production probes,202
proactive,159
MTTRand,184
integrationtests,18601
importance of, xvi
goals of,183
expectingtestfailure,199-200
errorbudgets,8,33-35,481
creating test and build environments,190