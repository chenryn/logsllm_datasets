>>> a.__name__
'test'
>>> a
⽽ lambda 只有变量引⽤，没有⾃⼰的名字。
>>> test = lambda: None
!136
学习笔记 . 第三版
>>> a = test
>>> a.__name__
''
就连创建过程都是路⼈甲待遇。
>>> dis.dis(compile("def test(): pass", "", "exec"))
1 0 LOAD_CONST 0 () # 有名有姓。
2 LOAD_CONST 1 ('test') # 静态名字。
4 MAKE_FUNCTION 0
6 STORE_NAME 0 (test) # 在上下⽂文中使⽤用⾃自⼰己的名字。
8 LOAD_CONST 2 (None)
10 RETURN_VALUE
>>> dis.dis(compile("lambda: None", "", "exec"))
1 0 LOAD_CONST 0 (>) # 没有名字，统统路路⼈人甲。
2 LOAD_CONST 1 ('') # 路路⼈人甲。
4 MAKE_FUNCTION 0 # 创建完了了，直接返回。
6 POP_TOP # 如没有变量量赋值，那就⾛走丢了了。
8 LOAD_CONST 2 (None)
10 RETURN_VALUE
但是，在适⽤场合，lambda 远⽐普通函数更加灵活和⾃由。
>>> map(lambda x: x ** 2, range(3)) # 直接作为参数。
>>> ops = {
"add": lambda x, y: x + y, # 构建⽅方法表。
"sub": lambda x, y: x - y,
}
>>> ops["add"](2, 3)
5
>>> def make(n):
return [lambda: print("hello") for i in range(n)] # 作为推导式输出结果。
!137
学习笔记 . 第三版
同样⽀持嵌套，还可直接调⽤。
>>> test = lambda x: (lambda y: x + y) # 将另⼀一个 lambda 作为返回值，⽀支持闭包。
>>> add = test(2)
>>> add(3)
5
>>> (lambda x: print(x))("hello") # 使⽤用括号避免语法错误。
hello
!138
学习笔记 . 第三版
2. 参数
如果动态语⾔是妖精，那么 Python 对参数的处理⽅式就是⿎动她去魅惑世⼈。我相信，
再难找到如这般功能丰富得让⼈ “头疼” 的语⾔。
按定义和传参⽅式，参数可分作位置（positional）和键值（keyword）两类。允许设置默
认值和余参收集，但不⽀持参数嵌套。
def name ( arg ,... * kwarg ,... )
函数名 位置参数 键值参数
形参出现在函数定义的参数列表中，可视作函数局部变量，仅能在函数内部使⽤。⽽实参由调⽤
⽅提供，通常以复制⽅式将值传递个形参。形参在函数调⽤结束后销毁，⽽实参则受调⽤⽅作⽤
域影响。不同于形参以变量形式存在，实参可以是变量、常量、表达式等，总之须有确定值可供
复制传递。
不管实参是名字、引⽤，还是指针，都以值复制⽅式传递，随后形参变化不会影响实参。当然，
对该指针或引⽤⽬标的修改，与此⽆关。
形参如普通局部变量出现在函数名字空间内。实参按顺序传递，也可以星号展开。
def test(a, b, c = 3):
print(locals())
>>> test(1, 2) # 忽略略有默认值参数。
{'c': 3, 'b': 2, 'a': 1}
>>> test(1, 2, 30) # 为默认值参数显式提供实参。
{'c': 30, 'b': 2, 'a': 1}
>>> test(*(1, 2, 30)) # 星号展开。
{'c': 30, 'b': 2, 'a': 1}
使⽤命名⽅式传递时，⽆需理会参数顺序。这对于字典展开⾮常⽅便。
!139
学习笔记 . 第三版
>>> test(b = 2, a = 1)
{'c': 3, 'b': 2, 'a': 1}
>>> test(**{"b": 2, "a":1}) # 键值展开后，等同命名传递。
{'c': 3, 'b': 2, 'a': 1}
如混⽤两种⽅式，须确保顺序在命名之前。
>>> test(1, c = 30, b = 2)
{'c': 30, 'b': 2, 'a': 1}
>>> test(c = 30, 1, 2)
SyntaxError: positional argument follows keyword argument
位置参数
位置参数按排列顺序，又可细分为：
1. 普通位置参数，零到多个。
2. 有默认值的位置参数，零到多个。
3. 单星号收集参数，仅⼀个。
def name ( arg ,... arg = default ,... *args )
函数名 位置参数 含默认值的位置参数 位置参数收集
收集参数将多余的参数值收纳到⼀个元组对象⾥。所谓多余，是指对普通参数和有默认值
参数全部赋值以后的结余。
def test(a, b, c = 3, d = 4, *args):
print(locals())
>>> test(1, 2, 33) # 不不⾜足以填充普通参数和默认值参数。
{'args': (), 'd': 4, 'c': 33, 'b': 2, 'a': 1}
!140
学习笔记 . 第三版
>>> test(1, 2, 33, 44, 5, 6, 7) # 填充完普通和默认值参数后，收集剩余参数值。
{'args': (5, 6, 7), 'd': 44, 'c': 33, 'b': 2, 'a': 1}
不能对收集参数命名传参。
def test(a, *args):
pass
>>> test(a = 1, args = (2, 3))
TypeError: test() got an unexpected keyword argument 'args'
键值参数
最简单做法，是在位置参数列表后放置⼀个键值收集参数。
def test(a, b, *args, **kwargs):
print(kwargs)
>>> test(1, 2, 3, x = 1, y = 2) # 多余位置参数被 args 收集。
{'x': 1, 'y': 2}
>>> test(b = 2, a = 1, x = 3, y = 4) # kwargs 收集多余的键值参数。
{'x': 3, 'y': 4}
键值收集仅针对命名传参，对多余的位置参数没兴趣。
def test(a, b, **kwargs): pass
>>> test(1, 2, 3, x = 1)
TypeError: test() takes 2 positional arguments but 3 were given
在此基础上，Python 3 新增了⼀种名为 keyword-only 的键值参数类型。
!141
学习笔记 . 第三版
def name ( ,... * kw-only ,... kw = default **kwargs )
函数名 位置参数 键值参数 有默认值键值参数 键值参数收集
1. 与位置参数列表分隔边界，星号。
2. 普通 keyword-only 参数，零到多个。
3. 有默认值的 keyword-only 参数，零到多个。
4. 双星号键值收集参数，仅⼀个。
⽆默认值的 keyword-only 必须显式命名传参，否则视为普通位置参数。
def test(a, b, *, c):
print(locals())
>>> test(1, 2, 3)
TypeError: test() takes 2 positional arguments but 3 were given
>>> test(1, 2)
TypeError: test() missing 1 required keyword-only argument: 'c'
>>> test(1, 2, c = 3)
{'c': 3, 'b': 2, 'a': 1}
即便没有位置参数，keyword-only 也须按规则传递。
def test(*, c): pass
>>> test(1)
TypeError: test() takes 0 positional arguments but 1 was given
>>> test(c = 1)
除单星号外，位置收集参数（*args）也可作为边界。但只取其⼀，不能同时出现。
!142
学习笔记 . 第三版
def test(a, *args, c, d = 99, **kwargs):
print(locals())
>>> test(1, 2, 3, c = 88, x = 10, y = 20)
{
a : 1,
args : (2, 3),
c : 88,
d : 99,
kwargs : {'x': 10, 'y': 20},
}
同样，不应对键值收集参数命名传参。其结果是弄巧成拙，被当作普通参数收集。
def test(**kwargs):
print(kwargs)
>>> test(kwargs = {"a":1, "b":2}) # 被当作普通键值参数收集，kwargs["kwargs"]。
{'kwargs': {'a': 1, 'b': 2}}
>>> test(**{"a":1, "b":2}) # 这才是正确的收集姿势。
{'a': 1, 'b': 2}
默认值
参数默认值允许省略实参传值，让函数调⽤更加灵活。尤其是那些参数众多，或具有缺省
设定的函数。
但需注意，默认值在函数创建时⽣成，保存到特定属性（__defaults__），为每次调⽤所
共享。如此，其⾏为类似静态局部变量，会 “记住” 以往调⽤状态。
def test(a, x = [1, 2]):
x.append(a)
print(x)
>>> test.__defaults__
!143
学习笔记 . 第三版
([1, 2],)
默认值对象作为函数构建参数存在。
>>> dis.dis(compile("def test(a, x = [1, 2]): pass", "", "exec"))
1 0 LOAD_CONST 0 (1)
2 LOAD_CONST 1 (2)
4 BUILD_LIST 2 # 构建默认值对象。
6 BUILD_TUPLE 1 # 作为构建参数。
8 LOAD_CONST 2 ()
10 LOAD_CONST 3 ('test')
12 MAKE_FUNCTION 1 # 参数 1 表示包含缺省参数。
如默认值为可变类型，且在函数内做了修改（⽐如本节⽰例）。那么后续调⽤会观察到本
次改动，导致默认值失去原本含义。
>>> test(3)
[1, 2, 3]
>>> test(4) # 在上次调⽤用基础上，添加。
[1, 2, 3, 4]
故建议默认值选⽤不可变类型，或以 None 表⽰可忽略。
def test(a, x = None):
x = x or [] # 忽略略时，主动新建。
x.append(a)
return x
>>> test(1)
[1]
>>> test(2)
[2]
>>> test(3, [1, 2]) # 提供⾮非默认值实参。
[1, 2, 3]
!144
学习笔记 . 第三版
要说静态局部变量还是有实际⽤处的，可在不⽤外部变量的情况下维持函数状态。⽐如，
⽤来设计调⽤计数等。但相⽐参数默认值，正确做法是为函数创建⼀个状态属性。毕竟变
量为函数内部使⽤，⽽参数属对外接⼜。所创建属性等同函数对象⽣命周期，不会随函数
调⽤结束⽽终结。
def test():
test.__x__ = hasattr(test, "__x__") and test.__x__ + 1 or 1
print(test.__x__)
>>> test()
1
>>> test()
2
>>> test()
3
形参赋值
总结解释器对形参赋值过程。
1. 按顺序对位置参数赋值。
2. 按命名⽅式对指定参数赋值。
3. 收集多余的位置参数。
4. 收集多余键值参数。
5. 为没有赋值的参数设置默认值。
6. 检查参数列表，确保⾮收集参数都已赋值。
收集参数 args、kwargs 属习惯性命名，⾮强制。
对应形参顺序，实参也有些基本规则。
• ⽆默认值参数，必须有实参传⼊。
• 键值参数总是以命名⽅式传⼊。
• 不能对同⼀参数重复传值。
!145
学习笔记 . 第三版
⽆论是以位置和命名两种不同⽅式，还是多个星号展开⾥有重复主键，都不能导致对同⼀
参数重复传值。
def test(a, b): pass
>>> test(1, 2, a = 1)
TypeError: test() got multiple values for argument 'a'
>>> test(**{"a":1, "b":2}, **{"a":1})
TypeError: test() got multiple values for keyword argument 'a'
>>> test(*(1, 2), **{"a":1})
TypeError: test() got multiple values for argument 'a'
键值收集参数会维持传⼊顺序（PEP468）。如键值参数存在次序依赖，那么此功能就有实际意
义。还有，收集参数并不计⼊ __code__.co_argcount 中。
签名设计
设计⼀个 print 函数，那么其理想签名应该是：
def printx(*objects, sep = ",", end = "\n"):
参数分作两部分：待显⽰对象为主，可忽略的显⽰设置（options）为次。从设计⾓度讲，
待显⽰对象是外部资源，⽽设置项⽤于控制函数⾃⾝⾏为，分属不同范畴。如同卡车所装
载货物，与车⾃⾝控制系统的差别。
据此接⼜，对象数量未定，设置除默认值外，还可显式调整。如使⽤ Python 2，作为收集
参数的 objects 就只能放在参数列表尾部。
def printx(sep = ",", end = "\n", *objects):
print(locals())
!146
学习笔记 . 第三版
除主次不分导致不美观外，最⼤⿇烦是不能绕开默认设置，单独为 objects 传值。加上收
集参数⽆法命名传参，直接导致默认配置项毫⽆意义。
>>> printx(1, 2, 3)
{'objects': (3,), 'end': 2, 'sep': 1}
>>> printx(objects = (1, 2))
TypeError: printx() got an unexpected keyword argument 'objects'
幸好，Python 3 提供 keyword-only 参数⽅式可完美解决此问题。
def printx(*objects, sep = ",", end = "\n"):
print(locals())
>>> printx(1, 2, 3)
{'objects': (1, 2, 3), 'end': '\n', 'sep': ','}