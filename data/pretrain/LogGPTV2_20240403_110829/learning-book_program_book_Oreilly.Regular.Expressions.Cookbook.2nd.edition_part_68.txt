favorite programming language.
Follow Recipe 8.19 if you don’t know in advance that your string holds a valid Windows
path.
8.24ExtracttheFileExtensionfromaWindowsPath
Problem
You have a string that holds a (syntactically) valid path to a file or folder on a Windows
PC or network, and you want to extract the file extension, if any, from the path. For
example, you want to extract μext from c: \folder\file ext.
Solution
\.[^.\\/:*?"<>|\r\n]+$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
We can use the same technique for extracting the file extension as we used forextracting
the whole filename in Recipe 8.23.
The only difference is in how we handle dots. The regex in Recipe 8.23 does not include
any dots. The negated character class in that regex will simply match any dots that
happen to be in the filename.
A file extension must begin with a dot. Thus, we add *^> to match a literal dot at the
start of the regex.
Filenames such as Version 2.o.txt may contain multiple dots. The last dot is the one
that delimits the extension from the filename. The extension itself should not contain
any dots. We specify this in the regex by puting a dot inside the character class. The
dot is simply a literal character inside character classes, so we don’t need to escape it.
The 1]+
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Replacement
Leave the replacement text blank.
Replacement text flavors: .NET, Java, JavaScript, PHP, Perl, Python, Ruby
Discussion
The characters /:**?<>| are not valid in Windows filenames. These characters are
used to delimit drives and folders, to quote paths, or to specify wildcards and redirec-
tion on the command line.
We can easily match those characters with the character class |]. The
backslash is a metacharacter inside character classes, so we need to escape it with
another backslash. All the other characters are always literal characters inside character
classes.
We repeat the character class with a ) and end tag (). An element's start tag may contain at-
ributes, which are described later. Berween the tags is the element’s content, which
can be composed of text and other elements or left empty. Elements may
be nested, but cannot overlap (e.g,  is OK, but not
). For some elements (such as , which marks a para-
graph), the end tag is optional. A few elements (including , which terminates
a line) cannot contain content, and never use an end tag. However, an empty ele-
ment may still contain attributes. Empty elements may optionally end with />, as
in ,. HTML element names start with a letter from AZ. All valid elements
use only letters and numbers in their names. Element names are case-insensitive.
 and  or , even if it appears within a
comment or string inside the style or scripting language.
Attributes appear within an element’s start tag after the element name, and are
separated by one or more whitespace characters. Most atributes are written as
name-value pairs. The following example shows an  (anchor) element with two
attributes and the content *Click me!":
Click me!
As shown here, an attribute’s name and value are separated by an equals sign and
optional whitespace. The value is enclosed with single or double quotes. To use
the enclosing quote type within the value, you must use a character reference (de-
scribed next). The enclosing quote characters are not required if the value does not
contain any of the characters double quote, single quote, grave accent, equals, less
than, greater than, or whitespace (written in regex, that's [^<>s]+$). A few
attributes (such as the selected and checked attributes used with some form ele
ments) affect the element that contains them simply by their presence, and do not
require a value. In these cases, the equals sign that separates an attributes name
504 | Chapter 9: Markup and Data Fermats
---
## Page 521
and value is also omitted. Alternatively, these *minimized? attributes may reuse
their name as their value (e.g., selected=*selected"). Attribute names start with a
letter from AZ. All valid attributes use only leters, hyphens, and colons in their
names. Attributes may appear in any order, and their names are case-insensitive.
HTML5 defines more than 2,000 named character references1 and more than a
million numeric character references (collectively, we'll call these character refer-
ences). Numeric character references refer to a character by its Unicode code point,
and use the format &nnnn; or &#xhhhh;, where nnn is one or more decimal digits
from 09 and hhhh is one or more hexadecimal digits 09 and AF
(case-insensitive). Named character references are written as &entitynowe; (case-
sensitive, unlike most other aspects of HTML), and are especially helpful when
enteringliteral characters that are sensitive in some contexts, such as angle brackets
(&lt; and &gt;), double quotes (&quot;), and ampersands (&anp;).
Also common is the &nbsp; entity (no-break space, position OxA0), which is par-
ticularly useful since all occurrences of this character are rendered, even when they
appear in sequence. Spaces, tabs, and line breaks are all normally rendered as a
single space character, even if many of them are entered in a row. The ampersand
character (8) cannot be used outside of character references.
HTML commens have the following syntax:
Content within comments has no special meaning, and is hidden from view by
most user agents. For compatibility with ancient (pre-1995) browsers, some people
surround the content of  and  elements with an HTML comment.
Modern browsers ignore these comments and process the script or style content
normally.
HTML documents often start with a docaoment type declaration (informally, a
DOCTYPE), which identifies the permitted and prohibited content for the docu-
ment. The DOCTYPE looks a bit similar to an HTML element, as shown in the
following line used with documents wishing to conform to the HTML 4.01 strict
definition:
Here is the standard HTML5 DOCTYPE:
1. Many characters have more than one corresponding named character reference in HTM1.5. For instance,
the symbol = has six: &asyep;, 8ap;, Bapprox, 指thkap;, &thickapprox, and &T11deT11de;-
Processing Markup and Data Formats with RegularExpresions | 505
---
## Page 522
Finally, HTML5 allows CDATA sections, but only within embedded MathML and
SVG content. CDATA sections were brought over from XML, and are used to
escape blocks of text. They begin with the string 
So that'’s the physical structure of an HTML document in a nutshell.2 Be aware
that real-world HTML is often rife with deviations from these rules, and that most
browsers are happy to accommodate the deviations. Beyond these basics, each
  deu snee   ssa sq a
order for an HTML document to be considered valid. Such content rules are be-
yond the scope of this book, but O'Reilly's HTML & XHTML: The Definitive
Gcide by Chuck Musciano and Bill Kennedy is a good source if you need more
information.
Because the syntax of HTML is very similar to XHTML and XML
(both described next),many regular expressons in this chapter are
Extensible Hypertext Markap Language (XHTML)
XHTML was designed as the successor to HTML 4.01, and migrated HTML from
its SGML heritage to an XML foundation. However, development of HTML con-
-oads gINLH aq1 po 1ued se padoaaap Suxq mou s! SINLHX Xa1eaedas panu
fication, and will be the XML serialization of HTML5 rather than introducing new
features of its own. This book covers XHTML 1.0, 1.1, and 5.3 Although XHTML
syntax is largely backward-compatible with HTML., there are a few key differences
from the HTML structure we’ve just described:
• XHTML documents may start with an XML declaration such as .
• Nonempty elements must have a closing tag. Empty elements must either use
3 closing tag or end with />.
• Element and attribute names are case-sensitive and use lowercase.
• Due to the use of XML namespace prefixes, both element and attribute names
may include a colon, in addition to the characters found in HTML names.
2. HTML. 4.01 defines some esoteric SGMI. features, including processing instructions (using a different
syntax than XML) and shoethand markup, but recommends against their use. In this chapter, we act as
if these features don’t exist, because browsers do the same don’t support them. If you wish, you can read
about their syntax in Appendix B of the HTML 4.01 specification, m sections B.3.57. HTML5 explicirly
removes suport for these features, which browsers don’t use anyway.
3. If you're wondering about the missing version numbers, XHTML. 2.0 was in development by the W3C
for several years before being scrapped in favor of a refocus on HTML5. XHTML. version numbers 34
were skipped outright.
506 I Chapter 9: Markup and Data Fermats
---
## Page 523
• Unquoted artribute values are not allowed. Artribute values must be enclosed
in single or double quotes.
• Attributes must have an accompanying value.
There are a number of other differences berween HTML and XHTML that mostly
affect edge cases and error handling, but generally they do not affect the regexes
in this chapter. For more on the differences between HTML and XHTML
see http://www.w3.org/TR/xkhtml1/#diffs and hrtp://wiki. whatwg.org/wiki/HTML
_Vs._XHTML.
Because the syntax of XHTMIL is a subset of HTML (as of HTML.5)
and is formed from XML, many regular expressions in this chapter
 are written t support ll three of these marlp languages.Recipes
that refer to °(X)HTML" handle HTML and XHTML equally. You
usually cannot depend on a document using only HTML or
XHTML conventions, since mix-ups are common and web brows-
ers generally don't mind.
Extensible Markap Language (XML)
XML is a general-purpose language designed primarily for sharing structured data.
It is used as the foundation to create a wide array of markup languages, including
XHTML., which we’ve just discussed. This book covers XML versions 1.0 and 1.1.
A full description of XML features and grammar is beyond the scope of this book,
but for our purposes, there are only a few key diferences from the HTML syntax
we’ve already described:
• XML documents may start with an XML declaration such as , and may contain other, similarly formatted
processing instructions. For example,  specifies that the XSL transformation file
transform.xslt should be applied to the document.
• The DOCTYPE may include internal markup declarations within square
brackets. For example:
]>
•Nonempty elements must have a closing tag. Empty elements must either use
a closing tag or end with />.
•XML names which goverm the rules for element, attribute, and character ref-
erence names) are case-sensitive, and may use a large group of Unicode char-
acters. The allowed characters include AZ, az, colon, and underscore, as
well as 09, hyphen, and period after the first character. See Recipe 9.4 for
more details.
Processing Markup and Data Formats with RegularExpresions |507
---
## Page 524
• Unquoted artribute values are not allowed. Attribute values must be enclosed
in single or double quotes.
• Attributes must have an accompanying value.
There are many other rules that must be adhered to when authoring well-formed
XML documents, or if you want to write your own conforming XML parser. How-
ever, the rules we’ve just described (appended to the structure we’ve already out-
lined for HTML documents) are generally enough for simple regex searches.
Because the syntax of XML is very similar to HTML and forms the
basis of XHTML, many regular expressions in this chapter are
to *XML-style" markup handle XML, XHTML, and HTML
equally.
Comma-Separated Values (CSV)
CSV is an old but still very common file format used for spreadsheet-like data. The
CSV format is supported by most spreadsheets and database management systems,
aau qanoqy suoeodlde uaamaq eep gugueqoxa aop neqndod ajeoadss s! pue
is no official CSV specification, an attempt at a common definition was published
in October 2005 as RFC 4180 and registered with IANA as MIME type °text/csv."*
Before this RFC was published, the CSV conventions used by Microsoft Excel had
been established as more or less a de facto standard. Because the RFC specifies
rules that are very similar to those used by Excel, this doesn’t present much of a
problem. This chapter covers the CSV formats specified by RFC 4180 and used by
Microsoft Excel 2003 and later.
As the name suggests, CSV files contain a list of values, known as record tems or
fields, that are separated by commas. Each row, or record, starts on a new line. The
last field in a record is not followed by a comma. The last record in a file may or
may not be followed by a line break. Throughout the entire file, each record should
have the same number of fields.
The value of each CSV field may be unadorned or enclosed with double quotes.
Fields may also be entirely empty. Any field that contains commas, double quotes,
or line breaks must be enclosed in double quotes. A double quote appearing inside
a field is escaped by preceding it with another double quote.
The first record in a CSV file is sometimes used as a header with the names of each