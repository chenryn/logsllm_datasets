title:Third time's not a charm: exploiting SNMPv3 for router fingerprinting
author:Taha Albakour and
Oliver Gasser and
Robert Beverly and
Georgios Smaragdakis
Third Time‚Äôs Not a Charm:
Exploiting SNMPv3 for Router Fingerprinting
Taha Albakour
TU Berlin
Robert Beverly
Naval Postgraduate School
Oliver Gasser
Max Planck Institute for Informatics
Georgios Smaragdakis
TU Delft
ABSTRACT
In this paper, we show that adoption of the SNMPv3 network man-
agement protocol standard offers a unique‚Äîbut likely unintended‚Äî
opportunity for remotely fingerprinting network infrastructure in
the wild. Specifically, by sending unsolicited and unauthenticated
SNMPv3 requests, we obtain detailed information about the con-
figuration and status of network devices including vendor, uptime,
and the number of restarts. More importantly, the reply contains a
persistent and strong identifier that allows for lightweight Internet-
scale alias resolution and dual-stack association. By launching ac-
tive Internet-wide SNMPv3 scan campaigns, we show that our tech-
nique can fingerprint more than 4.6 million devices of which around
350k are network routers. Not only is our technique lightweight
and accurate, it is complementary to existing alias resolution, dual-
stack inference, and device fingerprinting approaches. Our analysis
not only provides fresh insights into the router deployment strate-
gies of network operators worldwide, but also highlights potential
vulnerabilities of SNMPv3 as currently deployed.
CCS CONCEPTS
‚Ä¢ Networks ‚Üí Network protocols; Network management.
KEYWORDS
Simple Network Management Protocol (SNMP), Device Fingerprint-
ing, Alias Resolution.
ACM Reference Format:
Taha Albakour, Oliver Gasser, Robert Beverly, and Georgios Smaragdakis. 
2021. Third Time‚Äôs Not a Charm: Exploiting SNMPv3 for Router Finger-
printing. In ACM Internet Measurement Conference (IMC ‚Äô21), November 
2‚Äì4, 2021, Virtual Event, USA. ACM, New York, NY, USA, 15 pages. https: 
//doi.org/10.1145/3487552.3487848
INTRODUCTION
1 
Remote management functionalities are fundamental to efficient
network operation. To address this need, the Simple Network Man-
agement Protocol (SNMP) was introduced in the 1980s and has
since served as the de facto protocol for fault notification, diag-
nostics, configuration management, and statistics gathering in IP
This work is licensed under a Creative Commons Attribution International 4.0 License.
IMC ‚Äô21, November 2‚Äì4, 2021, Virtual Event, USA 
¬© 2021 Copyright held by the owner/author(s). 
ACM ISBN 978-1-4503-9129-0/21/11.
https://doi.org/10.1145/3487552.3487848
150
networks [8]. As a core IP management protocol that is widely
implemented, it is unsurprising that SNMP has been both exploited
and leveraged as an attack vector‚Äîindeed, there are over 400 SNMP-
related CVEs [41]. The protocol itself has historically been insecure,
with the first standardized versions (SNMPv1 and SNMPv2) includ-
ing only basic authentication via unencrypted ‚Äúcommunity strings.‚Äù
Security conscious operators were therefore forced to restrict SNMP
access to internal networks.
The current SNMPv3 standard, introduced in 2002, is imple-
mented on virtually all modern network equipment [29]. The pri-
mary focus of SNMPv3 is to provide a secure version of the protocol
by including mechanisms for robust authentication, integrity, and
privacy. Of direct relevance to our work is the so-called SNMP
‚Äúengine ID.‚Äù During synchronization with a client, the SNMPv3
agent exchanges its engine ID as a unique identifier. As noted in
the RFC: the ‚ÄúsnmpEngineID is the unique and unambiguous iden-
tifier of an SNMP engine. Since there is a one-to-one association
between SNMP engines and SNMP entities, it also uniquely and
unambiguously identifies the SNMP entity‚Äù [29].
As the engine ID is integral to the protocol‚Äôs key localization
mechanism, the SNMPv3 agent returns this strong device identifier
even in response to unsolicited and unauthenticated requests. More-
over, real-world implementations commonly use one of the device‚Äôs
MAC addresses when forming the engine ID. This behavior offers
unique‚Äîbut likely unintended‚Äîopportunities for remotely finger-
printing network devices in the wild. We leverage the engine ID to
not only identify device vendors, but also to perform IP alias resolu-
tion for both IPv4 and IPv6, and thus, dual-stack identification. Our
method introduces a new avenue to characterize network routers
and other infrastructure that is typically impervious to traditional
methods such as TCP/IP stack fingerprinting, due to closed security
postures and a lack of responding services. And, as compared to
previously explored router identifiers such as low-entropy IP IDs
(16 bits), engine IDs formed from MAC addresses can provide a
strong, persistent, and accurate identifier.
In addition to the engine ID, critical information about the config-
uration and operation of devices running SNMPv3 can be obtained
via unauthenticated requests. For example, we show that it is pos-
sible to retrieve the uptime of a device as well as the number of
reboots. The combination of these two parameters can also be used
as a unique device identifier.
To the best of our knowledge, previous studies and scans that
considered SNMP [19, 33] focused on SNMPv2 or SNMPv2c and
were thus unable to establish communication with the majority of
devices in the wild. In contrast, our Internet-wide scans find more
than 12 million IPs returning a unique identifier to unsolicited and
IMC ‚Äô21, November 2‚Äì4, 2021, Virtual Event, USA
Taha Albakour et al.
Figure 1: Unauthenticated, unsolicited SNMPv3 probes to
router IPs return the SNMP engine uptime, reboot count, and
engine ID. The engine ID is a unique, persistent identifier,
typically formed from a MAC address on the device. Here,
IPv4 interfaces ùê¥ and ùêµ return the same engine ID, facili-
tating efficient alias resolution and vendor fingerprinting.
Similarly, our technique can identify dual-stack aliases, e.g.,
IPv6 address ùëÄ is an alias of ùê¥, ùêµ and ùê∂.
devices running SNMPv3, including routers.
unauthenticated SNMPv3 requests. Our controlled lab experiments,
show that some vendors enable SNMPv3 by default once SNMPv2
is enabled, suggesting that network operators may be unaware that
their devices are responding to our queries. Among the 12M unique
SNMPv3 responses, we discover and characterize approximately
350k routers. Our contributions thus include:
‚Ä¢ A general and lightweight technique to fingerprint the vendor of
‚Ä¢ A new accurate and efficient large-scale alias resolution method,
including the first that can reliably identify dual-stack IPv4/IPv6
router aliases. We show that our alias resolution complements
existing techniques.
‚Ä¢ Unique insights into router deployment strategies by network
operators worldwide, including market share estimates and net-
work device homogeneity.
‚Ä¢ Uncovering previously unrecognized concerns in potential vul-
‚Ä¢ Sharing our datasets and analysis scripts with interested re-
searchers and providing updated graphs at https://snmpv3.io.
nerabilities and misuse of SNMPv3 as deployed in the wild.
2 BACKGROUND
The Simple Network Management Protocol (SNMP) is an Internet
standard to remotely manage, configure, and monitor network
devices. While a wide variety of equipment implements SNMP,
some of the most common devices running SNMP include routers,
switches, and servers. Over several decades, SNMP has continued
to mature and evolve.
2.1 SNMP Evolution
SNMPv1: Introduced in the late 1980s, and now deprecated, SN-
MPv1 became the de facto network management protocol [8, 9]. In
SNMPv1, requests to a device are authenticated using a clear-text
community string. Thus, in addition to weaknesses arising from
common and default communities or brute forcing, an eavesdropper
able to view messages can easily obtain the community. Security
conscious operators were therefore forced to restrict SNMP access
to internal or out-of-band management networks.
SNMPv2: The second generation of SNMP addressed some of the
shortcomings of SNMPv1, especially performance and security [10,
11]. However, the security mechanisms of SNMPv2 were largely
not adopted due to their complexity. Instead, the community string-
based approach of SNMPv1 was reused to create SNMPv2c [12,
13], which was widely deployed. As with SNMPv1, the SNMPv2
standards are now in historical or obsolete status within the IETF.
SNMPv3: Our work concerns the current SNMP version [29]. SN-
MPv3 was designed to be secure by including strong user-based
authentication, integrity, replay protection, and encryption. We
detail aspects of SNMPv3 relevant to our research next.
2.2 SNMPv3 Unsolicited Request
As with other SNMP versions, SNMPv3 uses UDP. Because an ex-
plicit goal of SNMPv3 was to be stateless, it does not employ a
challenge-response authentication mechanism [56]. Instead, mes-
sages include a digest produced via a keyed HMAC (either HMAC-
MD5-96 or HMAC-SHA1-96). This message authentication code
serves both to authenticate the message and provide integrity pro-
tection. In order to resist brute force attacks and ensure that each
agent stores a different key, SNMPv3 employs key localization. The
localized key is stretched and derived from the user key and the
device‚Äôs engine ID.
In order to communicate with an agent, the client must know
this engine ID so that it too may derive the appropriate key to
facilitate a different shared symmetric key per device. Thus, any
client can initiate an unsolicited request, with a missing engine ID,
in order to retrieve the authoritative agent‚Äôs own engine ID (steps
1 and 2 of Figure 1). Because an authenticated message must, by
definition, know the engine ID in order to create the HMAC, this
synchronization message is not authenticated. Hence, any client
can send this request, even if it does not know a valid username or
password. Note that without valid credentials, we are still unable
to retrieve any of the device‚Äôs configuration or statistics. However,
we trivially obtain the engine ID and other important meta-data
including the ‚Äúengine time‚Äù and ‚Äúengine boots‚Äù.
Compared to previous versions of the protocol, SNMPv3‚Äôs au-
thentication design makes it substantially easier to send unsolicited
requests, as there is no need to guess or capture community strings.
Instead, as shown in the dissected request packet of Figure 2, the
synchronization request includes an empty engine ID and no pass-
word or username. As observed by HD Moore in 2020, the SNMPv3
response includes, in addition to the engine ID, variables related
to configuration and operation of the device [42]. As shown in
Figure 3, we find information about the SNMPv3 implementation
(conformance), the format of the engine ID (engine ID format), the
vendor (engine enterprise ID), the number of device boots (engine
boots), and the uptime of the SNMP agent (engine time).
2.3 SNMPv3 Unique Identifiers
Engine ID as a Unique Identifier: As described in RFC 3411 [29],
different information can be used to form the engine ID: (i) an IPv4
or IPv6 address, (ii) a MAC address, (iii) ASCII text, (iv) byte values,
or vendor-specific formats.
Although the engine ID can be created in various ways, its value
is critical to the derived key from the key localization process [5].
151
IPv4: AIPv4: BIPv4: CIPv6: M1. snmpv3 get, dst=A, EngId=null2. snmpv3 report, Boots=5, Time=1234,EngId=11:22:33:44:55:663. snmpv3 get, dst=B, EngId=null4. snmpv3 report, Boots=5, Time=4567,EngId=11:22:33:44:55:66int1int2int3Prober......Third Time‚Äôs Not a Charm: Exploiting SNMPv3 for Router Fingerprinting
IMC ‚Äô21, November 2‚Äì4, 2021, Virtual Event, USA
Simple Network Management Protocol
msgVersion: snmpv3 (3)
msgGlobalData
msgAuthoritativeEngineID: 
msgAuthoritativeEngineBoots: 0
msgAuthoritativeEngineTime: 0
msgUserName:
msgAuthenticationParameters: 
msgPrivacyParameters: 
msgData: plaintext (0)
Figure 2: SNMPv3 unsolicited synchronization request.
Simple Network Management Protocol
msgVersion: snmpv3 (3)
msgGlobalData
msgAuthoritativeEngineID: 800007c703748ef831db80
1... .... = Engine ID Conformance: RFC3411 (SNMPv3)
Engine Enterprise ID: Brocade Communication Systems, Inc.
Engine ID Format: MAC address (3)
Engine ID Data: BrocadeC_31:db:80 (74:8e:f8:31:db:80)
msgAuthoritativeEngineBoots: 148
msgAuthoritativeEngineTime: 10043812
msgUserName:
msgAuthenticationParameters: 
msgPrivacyParameters: 
msgData: plaintext (0)
Figure 3: SNMPv3 synchronization response containing en-
gine ID.
If the engine ID changes, then the stored, localized keys, must be
re-generated. Because this re-keying is cumbersome, the RFC rec-
ommends that the engine ID ‚Äúpersist across re-initializations‚Äù [29].
Two of the major vendors report in their documentation on the
need to reconfigure SNMP users if the engine ID changes [15, 31].
Hence, in many popular implementations, the engine ID is not an
IP address (which may change), but instead one of the device‚Äôs IEEE
hardware MAC addresses.