## Page 1171
还有一个很重要的地方，那就是除了每个窗口底部的模式行以及其
他类似的东西，Emacs在向用户显示文本信息时首先会将其放在缓
冲区中，然后将缓冲区的内容显示在某些窗口中。帮助信息、搜索
结果、目录列表以及其他类似的内容，保存在缓冲区中的内容都有
相应的名称。这看起来是一个拙劣的实现技巧，虽然它简化了
Emacs的内核，但实际上它是相当有价值的，因为这样做可以使得
这些不同的内容都被当作可编辑的文本内容来处理：你可以使用相
同的命令来在这些内容中导航、搜索、组织、剪裁、排序，就像文
本缓冲区中的其他内容那样。任何命令的输出都可以作为其他命令
的输入。这与诸如MicrosoftVisualStudio之类的编程环境形成了鲜
明的对比，在这些环境中，搜索结果等只能在相应的工具中才有
用。不过这也不是MicrosoftVisualStudio独有的，绝大多数图形界
面的编程环境都有这样的缺点。
例如，在上面的屏幕截图中，左边的顿中位于中间的窗口展示了一
个目录列表。和大多数目录浏览器一样，该窗口为复制、删除、重
命名、文件比较、通过匹配模式或正则表达式筛选一组文件、通过
Emacs打开文件提供相应的快捷键命令。但与大多数目录浏览器不
同，在Emacs中该列表本身也是纯文本的，保存在一个缓冲区中。
Emacs中所有通用的搜索机制（包括优秀的增量搜索命令）都可以
使用。只要你需要，都可将列表中的内容复制并粘贴到临时缓冲区
中，然后删除列表中的其他元数据以得到一个文件名列表，接着使
用正则表达式剔除我们不感兴趣的文件名，最后就能够得到一个传
给新命令的文件名列表。当你习惯了这种操作，那么使用常见的目
录浏览器时就会感到恼火：不能对显示出来的信息进行处理，很多
命令受到了限制。在有些时候，甚至会觉得命令行中的组合命令也
不好用，因为要想看到这些命令的中间结果是很不容易的。
这将使我们想起本章最并始时提到的三个问题中的第一个，我们可
以问所有用户界面一个问题：如何方便地将一个命令的输出结果作
为另一个命令的输入？用户界面提供的命令能否相互组合？或者在
命令运行结束之前，中间结果能否显示？我认为许多程序员喜欢
UNIX命令行环境的一个主要原因在于这些命令能够有效地作为一部
分整合到复杂的脚本中，虽然这些环境存在一些无理由的不一致、
数据模型过于简单以及其他的一些缺点。由于写一个能够脚本化的
程序是十分简单的，因此很少走入死胡同。Emacs实现了相同的目
标，尽管是以完全不同的方式实现的。
1170
---
## Page 1172
1]绝大多数图形界面中都称为窗口，在Emacs中称为顿，因为
Emacs将术语“窗口"用来描述更小的部分。这似乎是不合时宜的，
不过Emacs的术语早在图形界面被广为接受之前就确定了，因此
Emacs的维护人员通常不倾向对它进行修改。
11.2Emacs的架构
Emacs架构所采用的是在交互式应用程序中应用广泛的模型-视图-控
制器模式，如图11-2所示。在该模式中，模型是程序所操作数据的
底层描述；视图则是向用户展示数据的方法；而控制器则负责实现
用户与视图的交互（按键、点击鼠标、选择菜单项等），并对模型
进行相应的更新。在本章中，我谈及该模式时将使用模型、视图和
控制器进行描述。在Emacs中，控制器基本上是完全用EmacsLisp语
言编写的。Lisp最初是用来操作缓冲区中的内容（模型）以及窗口
布局的。负责重绘的代码（视图）将完成对显示内容的更新，它无
须直接受Lisp代码控制。不管是缓冲区的操作还是负责重绘的代码
都可以通过Lisp代码进行定制。
11.2.1模型：缓冲区
Emacs是用来编辑文本文件的，因此Emacs的模型中最为核心的是用
来保存文本信息的缓冲区。缓冲区就是简单的字符串，在每一行的
行末是新行字符；它并不是一个行的列表，也不是像Web浏览器展
示HTML文档时使用的文档对象模型那样的节点树。EmacsLisp对于
缓冲区的基本操作包括添加、删除文本，以字符事的形式析取缓冲
区中文本的一部分，通过精确的字符串或正则表达式来搜索匹配的
字符串等。缓冲区能够保存各种字符集中的字符，包括亚洲、欧洲
可能使用到的一些字符。
1171
---
## Page 1173
显示
键盘输入、鼠标
操作、菜单选择
视图
Lisp等级
的事件
控制器
帧、窗口增量显
Lisp解释程序
示更新逻辑
Lisp代码
窗口基本
Lisp对象
操作
缓冲区内容显示
模型
缓冲区基本
缓冲区、文本属性、
访问操作
标记、覆盖图
图11-2：Emacs中的模型-视图-控制器模式
每个缓冲区都有一种模式（mode），它用来指定针对特定类型文本
进行编辑时的缓冲区行为。Emacs中提供了针对C语言程序、XML文
本等大量类型的模式。在Lisp等级，模式将使用缓冲区局部键绑定
来为用户提供特定于某种模式的命令，然后使用缓冲区的局部变量
来维护缓冲区状态。通过它们的组合，这些功能使缓冲区的模式与
对象的类十分类似：模式用来确定哪些命令是可用的，并根据这些
命令所依赖的Lisp实现来提供相应的变量。
对于每个缓冲区，基本的文本编辑功能维护了一个“撤销”日志，它
为撤销某些操作保存了足够的信息。这个“撤销”日志将记住各个用
户命令之间的边界，因此每个用户命令都承载了用来撤销该操作的
基本操作。
1172
---
## Page 1174
当EmacsLisp代码对缓冲区进行操作时，可以通过整数在缓冲区文
本中定位某个字符。这是一种简单的方法，但在对特定的文本块进
行插入和删除操作时，必将导致表示位置的数字发生变化。要在缓
冲区内容被修改时跟踪其位置，Lisp代码可以创建一个标记
（marker）对象，它将随着文本的移动而变化。各种基本操作既可
以接受以整数表示的位置参数，也能够接受标记对象的方法表示的
位置参数。
Lisp代码可以为缓冲区中的字符添加文本属性。每个文本属性都将
有一个名称和一个值，它们的内容可以是任何Lisp对象。从逻辑上
看，每个字符属性都是相互独立的，不过对文本属性的表示法却在
同样的文本属性中有效地存储了一组连贯的特性，并且EmacsLisp
还提供了一些基本操作，用来快速地定位文本属性被修改的字符位
置，因此实际上文本属性还能够用来标记文本的范围。文本属性能
够告诉Emacs该如何显示文本，文本如何应对鼠标的操作。文本属
性还能够指定当鼠标放在某个文本上时可以提供什么样的键盘命
令。缓冲区的“撤销”日志除了记录文本本身的改变之外，还将记录
文本属性的改变。EmacsLisp中的字符串也可以拥有文本属性：从
缓冲区中析取一段文本并以字符事形式保存，并且可以将该字符事
插入到缓冲区的任何位置，它将拥有相同的字符属性。覆盖图
（overlay）用来表示缓冲区中某些文字的相邻区域。覆盖图的起点
和终点包含其覆盖的文本以及标记。和文字属性类似，覆盖图也会
影响显示的结果，对于其包含的文本也能够响应鼠标的操作，但与
文本属性相比也有不同之处，覆盖图不被视为缓冲区文本的一部
分：字符串是不能拥有覆盖图的，而且“撤销”日志也无法记录对覆
盖图终点的修改。
11.2.2视图：Emacs重绘引擎
当用户编辑文本信息、在窗口上进行操作时，Emacs的重绘引擎将
确保显示信息做出相应的更新。Emacs重绘引擎有两个重要的特
性：
Emacs将自动更新显示
Lisp代码无法指定如何对显示结果进行更新。它可以自由地操纵缓
冲区文本、属性、覆盖图，对窗口进行所需的配置，而不用关心显
示结果最终将做出怎么样的改变。当进行这些操作时，Emacs的重
绘代码将审视这些修改，然后确定一组有效的界面重绘操作，以便
1173
---
## Page 1175
使得界面显示体现出模型的新状态。通过解除Lisp代码管理显示结
果的职责，Emacs显著地简化了编写正确扩展插件的任务。
Emacs仅当等待用户输入时更新显示
一个命令将执行多个缓冲区基本操作，对缓冲区的任意部分进行修
改，或者对多个不同的缓冲区进行修改。同样，用户可以调用一个
事先录制好的、包含一系列命令的键盘宏。对于这种情况，Emacs
不是快速地（看起来就像在闪炼）显示出缓冲区的中间状态，而是
直到用户输人结束之后更新显示，只展示最后的效果。这样就避免
了Lisp程序员尝试对缓冲区和窗口基本操作进行优化，以便展示出
更平滑的显示效果。最简单的方法看起来也相当好。
通过更新显示，以自动、高效地体现编辑操作的效果，Emacs彻底
地简化了Lisp创建者的工具。有些系统世借鉴了类似的行为模式，
最有代表性的是JavaScript，嵌入在Web页面中的程序将对页面内容
进行编辑，而浏览器将进行相应的显示更新工作。不过，很多系统
要求扩展插件认真处理扩展插件代码和显示更新代码之间的交互，
这大大增加了扩展插件创建者的负担。
当Emacs最早出现时，它所针对的用户是那些通过串口线或调制解
调器连接到计算机上的独立终端。这样的连接通常不是很稳定，因
此文本编辑器是否能够找到一组合理的重绘操作来完成显示的更新
操作，对于编辑器的可用性有很大的影响。Emacs在解决这方面的
问题上花费了很多的心思，提供了一个更新策略体系，从“快速但
受限"的策略到“工作更多但也很彻底”的策略一应俱全。后来还使用
了诸如dif之类文件比较程序中常用的动态编程技术，以寻找一组
最小的操作集，将原始的屏幕显示转化成新的屏幕显示。直到现
在，虽然Emacs仍然使用这些算法来使更新工作最小化，但大部分
努力都是多余的，随着CPU处理速度、网络速度越来越快，采用简
单的算法也能够很好地完成这些工作。
11.2.3控制器：EmacsLisp
Emacs的核心是用自己独立的Lisp语言变体开发的。在Emacs实现的
模型-视图-控制器模式中，Lisp代码扮演的是控制器的角色：你调
用的所有命令，不管是通过键盘、菜单还是名称，几乎都是一个
Lisp功能模块。EmacsLisp是Emacs能够成功地随看其发展提供大量
功能的核心基础。
1174
---
## Page 1176
Lisp的五分钟教程
第一次接触Lisp的并发人员总是会发现它是一种难以阅读的语言。
其主要原因是Lisp提供的语法构造要比绝大多语言少得多，但基于
这些语法构造的确能够获得更丰富的功能。为了让读者有些直观的
感受，我们来看看将Python程序转成Lisp时的一些规则：
1.程序控制结构的写法与功能调用类似。例如，whilex*y<z:
q（）将写成while（x*y<zq（））。虽然表示方法修改了，但它仍
然是一个while循环。
2.中缀表达式的写法与功能调用类似，写出来的结果就像是一个名
字古怪的功能函数。例如表达式x*y<z将写成<（*（xy），z）。
这里使用的圆括号只是用来分组的（而不是用来指定功能函数的参
数），可以将多余的删除掉。
3.现在所有的东西看起来都像是功能调用，包括程序控制结构和基