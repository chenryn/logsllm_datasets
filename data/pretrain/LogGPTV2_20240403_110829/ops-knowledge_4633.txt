User: Background: I have a small Python application that makes life for developers releasing software in our company a bit easier. I build an executable for Windows using py2exe. The application as well as the binary are checked into Subversion. Distribution happens by people just checking out the directory from SVN. The program has about 6 different Python library dependencies (e.g. ElementTree, Mako)
The situation: Developers want to hack on the source of this tool and then run it without having to build the binary. Currently this means that they need a python 2.6 interpreter (which is fine) and also have the 6 libraries installed locally using easy_install.
The Problem

This is not a public, classical open source environment: I'm inside a corporate network, the tool will never leave the "walled garden" and we have seriously inconvenient barriers to getting to the outside internet (NTLM authenticating proxies and/or machines without direct internet access).
I want the hurdles to starting to hack on this tool to be minimal: nobody should have to hunt for the right dependency in the right version, they should have to execute as little setup as possible. Optimally the prerequisites would be having a Python installation and just checking out the program from Subversion.

Anecdote: The more self-contained the process is the easier it is to repeat it. I had my machine swapped out for a new one and went through the unpleasant process of having to reverse engineer the dependencies, reinstall distutils, hunting down the libraries online and getting them to install (see corporate internet restrictions above).
Assistant: "I dislike the fact that developers (or me starting on a clean new machine) have to jump through the distutils hoops of having to install the libraries locally before they can get started"
Why?
What -- specifically -- is wrong with this?
You did it to create the project.  Your project is so popular others want to do the same.
I don't see a problem.  Please update your question with specific problems you need solved.  Disliking the way open source is distributed isn't a problem -- it's the way that open source works.
Edit.  The "walled garden" doesn't matter very much.  
Choice 1.  You could, BTW, build an "installer" that runs easy_install 6 times for them.
Choice 2.  You can save all of the installer kits that easy_install would have used.  Then you can provide a script that does an unzip and a python setup.py install for all six.
Choice 3.  You can provide a zipped version of your site-packages.  After they install Python, they unzip your site-packages directory into `C:\Python2.5\lib\site-packages``.
Choice 4.  You can build your own MSI installer kit for your Python environment.
Choice 5.  You can host your own pypi-like server and provide an easy_install that checks your server first.