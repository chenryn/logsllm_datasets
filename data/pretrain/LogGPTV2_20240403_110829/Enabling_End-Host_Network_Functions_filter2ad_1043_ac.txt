dst_ip, dst_port,
proto >
Meta-data
{msg id, msg type,
key, msg size}
{msg id, msg type,
url, msg size}
{msg id}
S0
S1
S2
getStageInfo ()
returns the ﬁelds that the stage can use to classify data,
and the meta-data ﬁelds it can output
createStageRule (Rule set s, Classiﬁer c, Class id i,
creates classiﬁcation rule  → [i, {m}] in rule set s
returns a unique identifer for the rule
removeStageRule (Rule set s, Rule id r)
Meta-data set m)
Table 2: Classiﬁcation capabilities of a few
stages.
Table 3: Stage API, used by the controller to
program data-plane stages.
r1 :  → [GET, {msg_id, msg_size}]
r1 :  → [PUT, {msg_id, msg_size}]
→ [DEFAULT, {msg_id, msg_size}]
r2 : 
r3 :  → [GETA, {msg_id, msg_size}]
r3 :  → [A, {msg_id, msg_size}]
r3 : 
→ [OTHER, {msg_id, msg_size}]
Figure 6: Examples of classiﬁcation rules and
rule-sets
client can classify its messages based on whether it is a
GET or a PUT (msg_type) and the key being accessed
by the message. Furthermore, the stage can associate
the message with meta-data comprising a unique (mes-
sage) identiﬁer, the message type, the key being ac-
cessed, and the message size.
Beyond applications, the Eden enclave itself can also
classify traﬃc. It operates at the granularity of packets,
and like Open vSwitch, it can classify packets based on
diﬀerent network headers, including the IP ﬁve-tuple.
This is shown in the last line of Table 2. Thus, when
classiﬁcation is done at the granularity of TCP ﬂows,
each transport connection is a message.
Classiﬁcation rules. A stage maintains classiﬁca-
tion rules, written as  → [class_name,
{meta-data}]. The classifier is an expression that
deﬁnes the class, while the meta-data speciﬁes informa-
tion, including a message identiﬁer, that should be asso-
ciated with messages belonging to this class. The mes-
sage identiﬁer allows the enclave to later recover packets
carrying data for the same message. Classiﬁcation rules
are arranged into rule-sets such that a message matches
at most one rule in each rule-set. Rule-sets are needed
since diﬀerent network functions may require stages to
classify their data diﬀerently. A given message can be
marked as belonging to many classes, one for each rule-
set.
Figure 6 lists a few example classiﬁcation rules for the
memcached stage. Rule-set r1 comprises two rules, the
ﬁrst one matches all GET messages while the second
matches PUT messages. The messages are marked as
belonging to classes named “GET” and “PUT”, and are
associated with meta-data including a unique message
identiﬁer and the message size. Rule-set r2 simply puts
all messages into the “DEFAULT” class and associates
them with a message identiﬁer. Finally, rule-set r3 clas-
siﬁes any GET requests for the key named “a” into the
“GETA” class, any other request for key “a” into the “A”
class, and all other requests to the “OTHER” class.
External to a stage, a class is referred to using its fully
qualiﬁed name: stage.rule-set.class_name. Thus,
the class named “GET” in rule-set r1 is referred to as
memcached.r1.GET. Given the rule-sets above, a PUT
request for key “a” would be classiﬁed as belonging to
three classes, memcached.r1.PUT, memcached.r2.DEFAULT,
and memcached.r3.A.
Stage-Controller interface. The controller can pro-
gram stages using the stage API shown in Table 3.
Through getStageInfo, the controller can discover a
stage’s classiﬁcation abilities, what ﬁelds can be used as
classiﬁers and the meta-data it can generate. The con-
troller can also create and remove classiﬁcation rules at
stages (S1,S2 calls in Table 3).
3.4 Eden enclave
The enclave resides along the end host network stack,
and operates on packets being sent and received. The
enclave comprises two components:
1). A set of tables with match-action rules that, de-
pending on a packet’s class, determine the action func-
tion to apply.
2). A runtime that can execute the action functions.
3.4.1 Match-action tables
In allowing data-plane programmability through enclaves,
we wanted to achieve ﬂexibility without sacriﬁcing for-
warding performance. We chose a match-action model
for the enclave for two reasons. First, it is possible
to eﬃciently implement lookup tables using TCAMs
when the enclave is implemented in hardware. Secondly,
thanks to the popularity of the OpenFlow community,
match-action programming is already a familiar model
for programmers to express network functions.
As shown in Table 4, each rule matches on class names
and produces an action function which is written in a
domain speciﬁc language. This is in contrast to the pre-
deﬁned set of actions with today’s SDN design. Match-
499Match
—>
Action
1 fun(packet :
Packet,
msg :
Message,
_global :
 —> f (pkt, . . .)
Table 4: Match-action table in the enclave
ing on class names allows for two types of functions.
First, packet header based classiﬁcation at the enclave
enables functions that simply need to operate at, say,
the granularity of a TCP ﬂow. Second, classiﬁcation by
stages means that the enclave can implement functions
that operate on a higher-level grouping of packets as
deﬁned by applications. Next, we describe the action
function language and how enclaves execute the func-
tions.
3.4.2 Action functions
Action functions are written in a domain speciﬁc lan-
guage (DSL) built using F# code quotations.1 The use
of a DSL makes it easier to check safety properties of
the function. For example, action functions cannot per-
form pointer arithmetic and they need to rely on limited
stack and heap space. We discuss the choice of the spe-
ciﬁc language in Section 6. As summarized below, the
language provides features that allow expressing basic
computations including loops, and to manipulate both
packets and any state at the enclave.
The action function language is a subset of F#. This
subset does not include objects, exceptions, and ﬂoat-
ing point operations. Such features beneﬁt large code
bases;
instead, we expect small functions running in
the enclave, and hence, the overhead of implementing
those features oﬀers little value. Floating point oper-
ations are typically not supported in the kernel, and
they are also not supported by the programmable NICs
we experimented with. The subset of F# that we sup-
port includes basic arithmetic operations, assignments,
function deﬁnitions, and basic control operations.
Action Function example. We use an example to il-
lustrate Eden’s action functions. Figure 7 shows how
the PIAS function discussed in Section 2 (pseudo code
in Figure 4) is written in our action function language.
The function takes three parameters, packet, msg and
_global. packet refers to the actual packet.
It is important to understand message in the context
of the program. For an action function, a message refers
to packets that should be treated as a unit by it. A mes-
sage could be a TCP ﬂow, a GET/PUT request, or a
HTTP page. As mentioned above, the enclave runtime
determines a packet’s message identiﬁer. The msg pa-
rameter thus lets the function access state shared for
the processing of all packets of the same message (Sec-
tion 3.4.4 details how this state is maintained). Finally,
the _global parameter gives access to state shared by
all instances of the action function that may run in par-
allel.
1https://msdn.microsoft.com/en-us/library/dd233212.
aspx.
Global) ->
2
3
4
5
6
7
8
9
then
10
11
12
13
14
15
16
let msg_size = msg.Size + packet.Size
msg.Size = priorities.Length then 0
elif msg_size ]
type Packet () =
class
[]
[]
[]
member val Size = 0L with get, set
[]
[]
member val Priority = 0 with get, set
end
Figure 8: Example of annotations used by the
priority selection policy. The HeaderMap anno-
tations specify the ﬁeld in the header that corre-
sponds to the property. While the Packet type
appears to be a generic class, we expect them to
just contain properties of basic types with asso-
ciated attributes. We also expect the properties
to provide default initializers.
lation of the abstract syntax tree to bytecode, is more
straightforward. Value types are preferentially placed
in the stack and otherwise in the local variables and
the heap. More complicated types, such as arrays, are
placed in the program heap (when necessary by copying
the values from the ﬂow or function state). The layout
is then used to generate the bytecode of the program. In
the current version, we perform a number of optimiza-
tions such as recognizing tail recursion and compiling it
as a loop.
Concurrency model. As discussed, the programmer
speciﬁes the lifetime and access model of the state used
by the action function with type annotations (Figure 8).
The authoritative state is maintained in the enclave,
and the annotations determine the concurrency model
for the action functions. The enclave creates a consis-
tent copy of the state needed by the program in the heap
and stack. If the action function requires read-only ac-
cess to message and global state, the enclave is allowed
to schedule multiple invocations of that program in par-
allel (i.e., the program is allowed to write only to packet
state). The state stored by the enclave may change dur-
ing program execution; however, the program will not
see the change.
If the action function requires write-access to the state
maintained at the message level, then only one packet
from that message can be processed in parallel. Further,
if the action function requires write-access to global
state, then only one parallel invocation of the action