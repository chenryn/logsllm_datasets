vol. 2002-January, pp. 273–284.
[59] SITARAMAN, S., AND VENKATESAN, S. Forensic analysis of
file system intrusions using improved backtracking. IWIA ’05.
[60] SUNDARARAMAN, S., SIVATHANU, G., AND ZADOK, E. Selec-
tive versioning in a secure disk system. Usenix Security’08.
[61] TIAN, D. J., BATES, A., BUTLER, K. R., AND RANGASWAMI,
R. Provusb: Block-level provenance-based data protection for
usb storage devices. In Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security (New
York, NY, USA, 2016), CCS ’16, ACM, pp. 242–253.
[62] WRIGHT, C., COWAN, C., SMALLEY, S., MORRIS, J., AND
KROAH-HARTMAN, G. Linux security modules: General security
support for the linux kernel. In Proceedings of the 11th USENIX
Security Symposium (Berkeley, CA, USA, 2002), USENIX Asso-
ciation, pp. 17–31.
[63] XIE, Y., FENG, D., TAN, Z., CHEN, L., MUNISWAMY-REDDY,
K.-K., LI, Y., AND LONG, D. D. A hybrid approach for efficient
provenance storage. CIKM ’12.
[64] XIE, Y., MUNISWAMY-REDDY, K.-K., FENG, D., LI, Y., AND
LONG, D. D. Evaluation of a hybrid approach for efficient prove-
nance storage. ACM Transactions on Storage (TOS) 9, 4 (2013),
14.
[65] XIE, Y., MUNISWAMY-REDDY, K.-K., LONG, D. D., AMER,
A., FENG, D., AND TAN, Z. Compressing provenance graphs.
TaPP’11.
[66] XU, W., HUANG, L., FOX, A., PATTERSON, D., AND JORDAN,
M. I. Detecting large-scale system problems by mining console
logs. SOSP’09.
[67] XU, Z., WU, Z., LI, Z., JEE, K., RHEE, J., XIAO, X., XU, F.,
WANG, H., AND JIANG, G. High fidelity data reduction for big
data security dependency analysis. CCS ’16.
[68] ZELDOVICH, N., BOYD-WICKIZER, S., KOHLER, E., AND
MAZIÈRES, D. Making information flow explicit in histar. OSDI
’06.
[69] ZHU, N., AND CHIUEH, T.-C. Design, implementation, and
evaluation of repairable file service. DSN’13.
A Run Time Optimization
MPI emits special syscall events to denote unit context
switches, and channel reads/writes. During causal graph
construction Appendix B, the unit context switch events
are used to derive unit boundaries and the channel events
are used to derive inter-unit dependencies. Note that chan-
nel operations are essentially memory reads and writes
that need to be exposed as system events. Otherwise, they
are invisible to MPI. Inter-unit communication through
system resources such as files, sockets, and the system
clipboard can be captured by the default underlying sys-
tem event tracking module without the intervention of
MPI.
A naive solution is to emit a unit context switch event
upon any indicator update and a channel event upon any
channel read/write. However in practice, we observe
that (1) an indicator update may not imply the change
of the unit context and (2) even though the unit context
changes, there may not be any system events that happen
in between the two unit context switches. Both cases
lead to redundant unit context switch events. Similarly,
there are often multiple accesses to the same channel
object within the same unit. These accesses must induce
the same causality and hence cause redundancy. Since
emitting an event entails a system call and hence a context
switch, preventing redundant event emission is critical
to the efficiency of MPI. We have two approaches to
address this problem. One is through the static analysis
( §3.4) and the other is runtime optimization. MPI does
USENIX Association
26th USENIX Security Symposium    1125
not emit any event upon an indicator update. Instead,
it simply updates the current unit context (in memory),
which has much lower overhead compared to a system
call. Upon a regular system call (e.g., file read), it checks
if the current unit context is the same as the previous
context that was emitted. If not, it emits a unit context
switch event right before the system call. Otherwise, it
does not emit. Similarly, upon a channel operation, MPI
checks if a channel operation by the same unit was logged
before. If so, it avoids logging the channel operation.
B Causal Graph Construction
In this section, we discuss the causal graph construction
algorithms for backward tracking starting from a symp-
tom event and forward tracking starting from a root cause
event. Algorithm 1 shows how to generate the backward
tracking causal graph for a specific perspective with a
given log file and a symptom event. Generating the graphs
for all perspectives only requires an easy extension.
Algorithm 1 Backward Causal Graph Construction
Input:
Output:
Variable:
L - the event log
l - unit type (i.e., perspective) given in the @indicator
annotation
es - symptom event
Gl - the generated causal graph for perspective l
ob js - system objects/subjects relevant to es
se, pide - the system object/pid of event e
bUnit - if the current unit causally related with es
eventUnit[pid] - the events in the current unit of process
pid
eventUnit[pid].add(e)
if e is not a unit context switch event then
if e updates any object or subject in ob js then
1: ob js ← { pides , ses}
2: bUnit ← true
3: for each event e ∈ L in reverse order, starting from es do
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
if e is a unit context switch event then
if e does not switch to a l unit then
continue
else
if bUnit then
bUnit ← true
add events in eventUnit[pide] to Gl
add accessed objects/subjects in eventUnit[pide] to
ob js
15:
16:
17: return Gl
eventUnit[pide] ← ∅
bUnit ← f alse
We use an ob js set to represent the system objects,
subjects, and channels between units that are directly
or indirectly related to the symptom event. The overall
procedure of the algorithm is to traverse the log in a
reverse order to populate the set and identifies events
causally related to the symptom by correlating to some
entity in ob js. At line 1, the algorithm initializes the set to
contain the system object accessed by the symptom event
and the system subject (i.e., the process of the event). It
also marks the current unit as correlated to the symptom
(line 2). Then it traverses all the events in the log file in
a reverse order, starting from the symptom event (lines
3-17). If the current event e is not a unit context switch
event, the algorithm saves it in a temporary list of events
for the current unit (line 4-5). If e updates an object (e.g.,
file and pipe) or spawns a subject (i.e., process) that was
identified as related to the symptom (and hence in the
ob js set), a flag is set to indicate that the current unit
is correlated (lines 6-7). If e is a unit context switch,
the algorithm further tests if e switches to a unit in the
given perspective. If not, the switch event is irrelevant
and simply skipped (lines 9-10). Otherwise, it indicates
a unit boundary of our interest. The algorithm checks
the flag to see if the current unit is causally related to
the symptom (lines 11-12). If so, it adds all the events
in the current unit to the result graph. It also updates
ob js with all the objects read by any event in the current
unit and all the subjects spawned in the unit (lines 13-
14). The temporary event list and the flag are then reset
(lines 15-16). Note that when the events are added to the
graph, nodes are created and further connected to existing
nodes in the graph by the dependencies implied by the
events. For example, a file read event entails connecting
to the (previously created) file node. Details are elided
for brevity.
□ Example. Figure 20 shows an example of constructing
the backward causal graph. The simplified log entries
are shown on the left while the generated graph is shown
on the right. The graph is also annotated with events to
explain why nodes/edges are introduced. The algorithm
generates the graph starting from the symptom event at
line 8, which is a write event to the socket a.a.a.a. It
traverses back and reaches line 7, which is a unit context
switch (UCX) event whose indicator is 5 and the identifier
value is 7. Two nodes are hence created representing that
a process (node) wrote to a socket (node) whose value is
a.a.a.a. Going backward, the algorithm further identifies
another unit represented in lines 4-6 with the indicator
value 5 and the identifier value 3. This is a different unit
instance of the same type and it has no causal relation
with the object set that currently contains the socket object
and the process. Therefore, all the events in this unit are
dropped. The algorithm continues to traverse backward
and encounter another unit in lines 1-3. Line 2 indicates
that it reads file index.html, so the subgraph for lines 1-3
is file index.html being read by the process. Note that
the value of identifier indicates lines 1-3 and lines 7-8
belong to the same unit (instance), which means that the
application is working on the same task. Hence, the global
causal graph is updated by joining the two subgraphs. The
result graph is shown on the right hand side.
1126    26th USENIX Security Symposium
USENIX Association
Figure 20: An example of constructing backward causal graph.
(UCX is short for Unit Context Switch, FDR is short for File
Descriptor Read, and SKW is short for Socket Write.)
The forward graph construction algorithm is similar
and hence omitted.
Essence of MPI and Memory Dependencies. From the
graph construction Algorithm 1, one can observe that all
the events in a unit are considered correlated. If there
is a single event (within a unit) that has any direct/indi-
rect dependency with the symptom, all the events in the
unit are added to the graph and all the objects/subjects
accessed by the unit are considered correlated. As such,
MPI does not need to track any fine-grained (memory)
dependencies within a unit. Dependencies across units
are either captured through system level dependencies
(e.g., file/socket reads and writes) or explicitly indicated
by the user through the channel annotation.
C Case Studies
Case: Insider Threat. In attacks such as watering hole
and phishing emails, the adversaries apply external in-
fluences and wait for the employees to make mistakes.
However, it is also very common that attacks are launched
from inside the enterprise (e.g., by malicious or former
employees). In fact, a large number of such cases had
been reported [29, 36, 42, 56]. Next, we simulate such an
attack.
A computer game development company noticed that
the graphical design of a to-be-announced game was
leaked on an online gaming forum. The company started
investigation, trying to understand how this design was
leaked and who should be held responsible. The inves-
tigator first conducted forward tracking from the design
file but found that the file was neither sent outside by any
email nor copied by any employee to their own devices.
She further suspected that some old version of the file
was leaked instead of the current version. Even though
the old versions of the design file did not explicitly exist
any more, the provenance of the file was tracked by the
audit system.
She first conducted backward tracking to disclose all
the past versions (with the name “p_v” plus the version
number) and then forward tracking to see how these ver-
sions were propagated/used. Assume that she used BEEP
first. She quickly noticed a number of problems in the
BEEP graph that makes manual inspection difficult.
Figure 21: Event handling loop based solution
The resulting graphs by BEEP are shown in Figure 21.
White boxes represent units for TuxPaint [15], gray boxes
are for the editor, Vim, and red boxes are for other apps.
First of all, the graph is very large (containing 1832
nodes). This is because many people had contributed
to the file in the past using TuxPaint, a graph drawing
tool. There were a lot of interactions (e.g., copy & paste)
among multiple image files, some of which were from
Internet. The various historic versions of the design file
were propagated to other places. Second, there are many
“empty” execution units, which are execution units just
have boundary events. This is because many operations
in UI intensive program TuxPaint have no real effects on
the provenance. These operations include, but are not
limited to, switching painting tools (frequently), clicking
menu bars and so on. Third, she found that most execu-
tion units for TuxPaint only have memory dependency
events. This is because TuxPaint stores the image buffers
in memory, and flushes them to disk only when the user
clicks the save button. In the editing units (e.g., choosing
tools and drawing figures), TuxPaint only operates on the
image buffers. These units are only connected by memory
dependency and do not invoke any system calls. How-
ever, these units are important as they are responsible for
chaining up the important behaviors.
After inspecting such a large graph, the inspector still
could not spot any suspicious behavior. The reason is that
there are broken links in the graph such that some updates
to the design file are missing from the graph. Specifically,
some of the editing actions were not in the BEEP training
set such that the corresponding memory dependencies
are not visible, leading to broken provenance, e.g., “p_-
v14.png” and “p_v20.png”.
Figure 22: MPI solution
The inspector switched to MPI. She used individual
image files as the perspective. The resulting (simplified)
graph is in Figure 22. Now each white box represents all
the editing operations on a single file. It can be clearly
seen that a version of the design file, “p_v20.png”, was
USENIX Association
26th USENIX Security Symposium    1127
UCX: IND=5, ID=7FDR: index.html……UCX: IND=5, ID=3FDR: about.html……UCX: IND=5, ID=7SKW: a.a.a.a1:2:3:4:5:6:7:8:Processindex.html8: SKW2: FDR1: UCXa.a.a.aProcessindex.html8: SKW2: FDR1:UCX7:UCXa.a.a.aProcess7:UCXp_v0.pngp_v12.pngp_v13.pngp_v14.pngslogan.txttitle.txtp_v19.pngp_v20.pngp_v47.pngp_v0.pngp_s.pngplan.txtproposal.txtmvp_v21.pngp_v47.pngp_archivebashnoticepinep_v20.pngread by a TuxPaint unit that operated on file “p_s.png”,
which was later archived with a number of text files. The
archive was renamed and sent through an email. The link
from the design file to file “p_s.png” was missed by BEEP
because the attacker opened the design file, conducted
a few editing actions whose memory dependencies are
missed by BEEP such that the later save-as unit is discon-
nected from the file read unit. Note that all these actions
are individual units in BEEP that need to be chained up by
memory dependencies, whereas they belong to the same
unit in MPI. Overall, the MPI graph is precise, much
smaller (152 nodes) and cleaner. We also want to point
out that a graph similar to the MPI graph cannot be gen-
erated by post-processing the BEEP graph as the missing
links cannot be inferred and it is difficult to determine
which low-level nodes belong to an image file.
We also conduct experiments to measure space over-
head for the same application with different partitioning
choices, and the results are shown in Figure 24. We se-
lect two programs, Firefox and Apache. For Firefox, we
choose three different ways to instrument: windows, i.e.,
a unit for a top level residence window for tabs (note that
multiple windows may be driven by the same Firefox pro-
cess internally); tabs and elements (inside a page). We do
not show the numbers for each web site instance, because
the instrumentations are similar to those of tabs, and the
only difference lies in the expressions used in the @iden-
tifier annotation (see §3). For Apache, we use two ways
to instrument: each connection (each client instance), and
each request. The results show that with different levels
of instrumentation, the overhead is significantly different.
Instrumenting the applications at a higher level causes
less overhead. For both cases, a lower level suggests 2-3
times overhead increase.
Figure 23: Firefox browsing history of page perspective
Case: Complex Browsing Behavior in Firefox. In this
case study, we show how MPI precisely captures the
causality of complex browsing behavior of Firefox. Dur-
ing browsing, the user first opened Bing from the book-
mark bar, and searched a key word, and then used dif-
ferent ways to open new pages including clicking links,
choosing “open page in a new tab/window” in the right-
click menu, going back to the previous page, and opening
new pages from Javascript code automatically. In the end,
the user downloaded a PDF file. We collected the log
with the page perspective and generated a causal graph by
conducting backward traversal starting from the PDF file.
The graph is shown in Figure 23. Observe that the entire
browsing history is precisely captured by the graph, in-
cluding visiting the LinkedIn page from the search result
page and then going back to the search result page. In
contrast, the BEEP’s graph only includes the page hosting
the PDF file, missing all the other pages along the causal
chain, due to missing memory dependencies.
D Additional Experimental Results
Figure 25: Overhead for a whole day
The last space overhead experiment we did is to run
the instrumented applications on our machine for a whole
day with Linux audit system enabled and measure the
events generated by MPI. The workload includes regular
uses such as web surfing, checking and responding emails.
The result is shown in Figure 25. The black solid line
shows the log size generated by the Linux audit system,
and the dashed blue line shows the log size generated
by MPI. From the graph, we can see that the log size
generated by the Linux audit is more than 600 MB while
our instrumentation issues less than 80 MB.
Figure 24: Overhead for applications with different partitioning
1128    26th USENIX Security Symposium
USENIX Association
firefox: Bingfirefox: Search Resultfirefox: LinkedInfirefoxfirefoxx.x.x.20firefoxz.z.z.9y.y.y.200k.k.k.222caffee.pdf~/mpi-firefox/firefox-build/dist/bin/firefoxWindowTabElementConnRequest    Firefox                                  Apache0.0%5.0%10.0%15.0%20.0%25.0%30.0%35.0%40.0%45.0%Space overhead(%)0510152025Time (h)0100200300400500600700Log Size(MB)Total Log SizeMPI-Log Size