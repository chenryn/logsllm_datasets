C = gRO(sid, ‘C’(cid:107)dmsg(cid:107)dro(cid:107)s(cid:48)), (b) TRec(cro, aC, dro) = 1, (c) aC = gRO(sid, ‘C’(cid:107)m(cid:107)dmsg(cid:107)s),
(a) a(cid:48)
(d) TRec(cmsg, m, dmsg) = 1.
Eﬃciency The commitment protocol has the following complexity. Round Complexity. The
protocol requires 2 rounds for the commitment phase and 3 rounds for the decommitment phase.
Exponentiations. The total number of exponentiations is 10. Hash evaluations. The total number
of hash evaluations is 6.
4.1 Proof of Security
We present the security proof for (cid:104)C, R(cid:105) in two parts. The ﬁrst part concerns with the case where
the environment corrupts the receiver, while the second part concerns with the corrupted committer.
In each case, we construct a simulator SA for the corrupted party A and argue indistinguishability
of the real and ideal world experiments.
Security Against Malicious Receiver We describe the strategy of the simulator SR for the
commitment and decommitment phases:
Commitment phase: Upon receiving the message (receipt, sid, ‘C’, ‘R’) from the trusted party, SR
ﬁrst obtains the list Q|sid from the ideal functionalities Ftcom and GgRO, then computes the second
round of the commitment phase as follows.
It computes two trapdoor commitments to the all
zeros string, namely, (cmsg, dmsg) ← TCom(pk, 0|n|) and (cro, dro) ← TCom(pk, 0|n|), and then sends
(cmsg, cro) to R∗.
Decommitment phase: Upon receiving the decommitment message (decommit, sid, ‘C’, ‘R’, m) from
the trusted party, SR proceeds as follows:
• Trapdoor extraction: If there exists a query in Qsid of the form sid(cid:107)‘R’(cid:107)sk(cid:48)(cid:107)r(cid:48) such that
If no such query exists, then it
TVer(pk, sk(cid:48)) = 1, then SR records sk(cid:48) as the trapdoor.
sets sk(cid:48) = ⊥.
TEquiv(sk, cmsg, m) as a valid opening for cmsg to string m. (b) Next, it samples a random
• Equivocation: If SR successfully extracted a valid trapdoor in the previous step, then it
proceeds to perform the following “equivocation” steps: (a) It starts by computing (cid:103)dmsg ←
string s and queries the gRO on the string sid(cid:107)‘C’(cid:107)m(cid:107)(cid:103)dmsg(cid:107)s. Let aC be the answer received
from gRO. (c) It then computes (cid:102)dro ← TEquiv(sk, cro, aC) as a valid opening for cro to string
aC.
C ← gRO(sid(cid:107)‘C’(cid:107)(cid:103)dmsg(cid:107)(cid:102)dro(cid:107)s(cid:48)).
Now, SR samples a random string s(cid:48) and performs the following steps: If sk(cid:48) = ⊥, then SR sim-
C ← gRO(sid(cid:107)‘C’(cid:107)0|n|(cid:107)s(cid:48)); otherwise, it computes a(cid:48)
ply computes a(cid:48)
C to R∗ in the ﬁrst round of this phase. Next, upon receiving the message
It then sends a(cid:48)
19
(sk, r) from R∗, SR veriﬁes its correctness by following the honest committer strategy as de-
If the veriﬁcation fails, then it aborts the protocol. Otherwise, it reveals
scribed above.
(m, (cid:103)dmsg,(cid:102)dro, s, s(cid:48)) to R.
This completes the description of SR. We now brieﬂy argue the correctness of simulation.
First note that it follows from the hiding property of the trapdoor commitment scheme that
the (trapdoor) commitments sent by SR in the commitment phase are indistinguishable from those
send by an honest committer in the real world. Further, since the outputs of the random oracle
are random, the random oracle points sent by SR in the commitment and decommitment phase are
indistinguishable from those sent by the honest committer. Finally, we argue that conditioned on
the event that the adversarial receiver reveals a valid trapdoor value in the decommitment phase,
the decommitments sent by SR are accepting.
(This is suﬃcient since if the adversary fails to
reveal a valid trapdoor, then both the honest committer and SR abort the protocol.) This follows
from the observability property of the gRO model. Speciﬁcally, since SR extracts the trapdoor
from the receiver during the commitment phase, it follows from the correctness of the equivocation
algorithm (of the trapdoor commitment scheme) that SR can compute accepting decommitments
for the output received from the trusted party, and then behave honestly in the decommitment
phase.
Security Against Malicious Committer We describe the strategy of the simulator SC for the
commitment and decommitment phases:
Commitment phase: SC follows the honest receiver strategy to generate the ﬁrst receiver message.
Upon receiving the second message (cmsg, cro) of this phase from C∗, SC performs the following
steps:
• Extraction: Let Qsid be the list of queries made to gRO by any party. If there exists a query
q of the form q = sid(cid:107)‘C’(cid:107)m(cid:107)dmsg(cid:107)s such that TRec(cmsg, m, dmsg) = 1, then it sets m(cid:48) = m;
otherwise it sets m(cid:48) to a dummy value (say) 0|n|.
SC sends the message (commit, sid, ‘C’, ‘R’, m(cid:48)) to the trusted party.
Decommitment phase: SC follows the honest receiver strategy in this phase. If the receiver algorithm
R accepts a value m∗ from C∗, then SC performs the following steps: If m∗ = m, it sends the message
(decommit, sid, ‘C’, ‘R’) to the trusted party. Otherwise, if m∗ (cid:54)= m, then SC outputs the special ⊥
symbol and stops.
This completes the description of SC. We now brieﬂy argue the correctness of simulation. Note
that since SC follows the honest receiver strategy in sending its messages, we only need to argue the
following: Conditioned on the event that the adversarial sender successfully decommits to a string
m in the decommitment phase, the simulator SC successfully extracts the same string m during the
commitment phase. This follows from the binding property of the trapdoor commitment scheme.
Speciﬁcally, we build an adversary A for the trapdoor commitment scheme that obtains the public
key pk from its challenger. A runs the adversarial committer C∗ for the protocol (cid:104)C, R(cid:105) and plays
the role of the honest receiver using the public key pk. We only consider a partial protocol execution
that stops at the end of the ﬁrst message in the decommitment phase. By the observability of the
gRO model, it follows that A can extract the committed value from C∗ if this partial transcript is
a preﬁx of a full protocol transcript that is sampled from the space of accepting transcripts.
20
5 One-sided UC-Simulatable OT
The NISC protocol of [AMPR14] builds upon the eﬃcient PVW OT protocol of [PVW08], which
is UC-secure in the CRS model (more speciﬁcally, they rely on a modiﬁcation of it due to [SS11],
which we will explain later). UC-realizing NISC in the gRO model amounts to provide a 2-round
OT protocol which is UC secure in the gRO model.
As we discussed in Sec. 1.2, one promising approach to implement eﬃcient UC-secure OT, is to
take the PVW OT that works without the CRS and adapt it to the gRO model. This version of
PVW OT was shown by Lindell and Pinkas in [LP11], and it requires the receiver to choose the
parameters for the OT and to provide a zero-knowledge PoK of their correctness.
This naive approach is correct, but it yields a 3-round OT protocol. The reason is that any
ZKPoK in the gRO model requires at least two rounds (as observed in [Pas03]).
Our ﬁrst observation is that the zero knowledge property is required only to extract from the
sender, thus if we relax this requirement and demands only that a malicious sender cannot distin-
guish whether the receiver is playing with input 0 or input 1, then a witness indistinguishable proof
– which can be made non-interactive in the gRO model – suﬃces.
0 and h1 = gα1
0. It computes h0 = gα0
Before proceeding with our discussion, let us recall the PVW OT protocol in the plain model
(without CRS). Let g0, q, G be public parameters, where g0 is the generator of the group G of prime
order q. PVW OT consists of two steps. Step 1. The receiver R picks α0, y at random in Zq and set
α1 = α0 + 1, and g1 = gy
1 . It sends parameters (g0, h0, g1, h1)
to the sender S and additionally proves that (g0, h0, g1, h1
) is a DDH tuple using a ZK PoK. (Such
g1
parameters can be reused among several transfers with the same sender). Concretely, such ZKPoK
is instantiated with the zero-knowledge version of a Σ-protocol for Discrete Log (due to [Sch91] and
. For the actual transfer, R sends the
shown in Figure 6), for the theorem
b, where r ←R Zq and b is R’s input. Step 2. If the ZK proof is
temporary key g = gr
accepting, S uses parameters (g0, h0, g1, h1) and h, g to encrypt its two strings s0, s1.
The security of the receiver relies on the DDH assumptions. To see why, note that if b = 0, then
(g0, h0, g, h) is a DDH tuple, if b = 1, then (g1, h1, g, h) is a DDH tuple. Thus, a malicious sender
distinguishing bit 0 from 1 can be transformed in DDH distinguisher.
0 ∧ h1
b , h = hr
h0 = gα0
= gα0
1
(cid:16)
(cid:17)
g1
Our ﬁrst attempt is to replace the ZK protocol with a (non-interactive) witness-hiding PoK
protocol (WHPoK). The crucial problem of this approach is that the reduction to the DDH problem
does not go through. Indeed, in order to complete the OT protocol, and thus to be able to exploit
the distinguishing power of a malicious sender S∗, the DDH distinguisher needs to provide a valid
WHPoK, for which he does not know the witness. Although intuitively it seems that the witness
hiding property should help, it is not clear how to exploit S∗ to extract the witness. (Note that
technically one can also use a WI proof for the following theorem: (h0 = gα0
1 ) OR
(g1 = gy
0). The problem here is that extracting the witness y does not help the simulator
in extracting the bit of R∗).
0 ∧ h1
0 ∧ h1
= gα0
= hy
Our approach is to run two parallel executions of Step 1 (with independent parameters), and
prove using a single WIPoK that one of the parameters is correctly generated. In Step 2, the sender
will secret share its inputs in two shares, and compute two parallel executions of Step 2, one for
each share. Due to the the soundness of the proof, in one of the executions the parameters are
correctly computed, and thus a malicious receiver can never get two shares for both inputs.
This solution works against the malicious sender. Indeed, now we have the freedom to choose
between two independent DDH tuples, and place the challenge of the DDH experiment in one of
g1
g0
21
the two, while computing the WI proof with the witness of the other tuple. Against the malicious
receiver, the simulator can extract the bit played in one of the sessions only. Nevertheless, this
knowledge is suﬃcient, as the receiver will be able to get two shares only for the bit committed in
the “correct” session.
We now present our protocol in details.
Notation. Our OT protocol essentially consists of two parallel sessions of the PVW OT, that we
denote by session 0 and session 1 respectively. To identify the parameters used in each session we
use two indexes in the subscript, where the second index identiﬁes the session. For example, in our
OT the receiver send two set of PVW OT’s parameters (g0, h0, g1, h1), one for each session. Hence,
we denote the parameters for session 0 by (g0,0, h0,0, g1,0, h1,0), and parameters for session 1 by
(g0,1, h0,1, g1,1, h1,1). In general notation hb,s must be interpreted as follows: hb,s is the parameter
hb (as in PVW OT) played in session s.
Similarly, the sender will break up its input (s0, s1) in the shares (s0,0, s1,0) to play in session
0 and (s0,1, s1,1) to play in session 1, where notation (s0,s, s1,s) means, the share of s0 in session s
and the the share of s1 in session s.
Finally, for easiness of explanation we omit some validity checks that S has to perform on the
parameters sent by R.
Protocol 2. One-sided UC-simulatable OT.
Common parameter. (G, q, g0,0, g0,1).
Inputs. Inputs to S: a pair (s0, s1). Input to R : a bit b.
Round 1. R performs the following steps.
1. Generate OT Parameters. (Session 0) Pick y0, α0,0. Set α1,0 = α0,0 + 1. (Session 1) Pick
y1, α0,1. Set α1,1 = α0,1 + 1. Compute g1,e = (g0,e)ye, h0,e = (g0)α0,e, h1,e = (g1)α1,e, for
e = 0, 1.
2. Generate proof of consistency. Run NIWIpok shown in Prot. 3.2 for the theorem {h0,0 =
(g0,0)α0,0 ∧ h1,0
= (g1,1)α0,1} using witness α0,e for a
randomly chosen bit e. We denote this proof by proofcons. For this computation R needs to
query the random oracle gRO. The details of NIWIpok are provided in Protocol 1.
= (g1,0)α0,0} OR {h0,1 = (g0,1)α0,1 ∧ h1,1
g1,1
g1,0
3. Generate temporary public keys. Pick r0, r1 ∈ Zq at random. Compute temporary key
for session 0. Set pk0 = (g0, h0) where g0 = (gb,0)r0, h0 = (hb,0)r0. Set pk1 = (g1, h1) where
g1 = (gb,1)r1, h1 = (hb,1)r1.
4. Send parameters. Send par0 = (g0, h0,0, g1,0, h1,0); par1 = (g0, h0,1, g1,1, h1,1); proofcons,
pk0, pk1 to S.
Round 2. If the proof is accepting, S performs the following steps.
1. Compute shares. Pick s0,0, s1,0 at random, and compute s1,0 = s0,0 + s0; s1,1 = s1,0 + s1.
2. OT transfer.
• Session 0. Play as sender of PVW OT with input (s0,0, s1,0). Namely, compute (ud,0, vd,0)
= RAND(gd,0, hd,0, pk0) for d = 0, 1 and w0,0 = v0,0 · s0,0 w1,0 = v1,0 · s1,0.