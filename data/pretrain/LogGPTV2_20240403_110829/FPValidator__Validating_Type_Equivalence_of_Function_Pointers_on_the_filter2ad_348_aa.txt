# Title: FPValidator: Validating Type Equivalence of Function Pointers on the Fly

# Authors: Hua Wang, Yao Guo, Xiangqun Chen

# Conference: 2009 Annual Computer Security Applications Conference

## Abstract
Dynamic validation of function pointers is crucial for intrusion detection, as many runtime attacks exploit function pointer vulnerabilities. Current solutions typically check if function pointers target addresses within the code segment or valid function entries, but they fail to detect function entry attacks that manipulate function pointers to target valid function entries maliciously.

This paper introduces FPValidator, a novel solution that dynamically validates the type equivalence between function pointers and their target functions, effectively detecting all function entry attacks that violate type equivalence. FPValidator employs an efficient type matching approach based on labeled type signatures, which allows for fast type equivalence checking. The necessary validation code and type information are inserted during the compilation stage, imposing no additional burden on developers. We integrated FPValidator into GCC, and our evaluation shows that its performance overhead is only about 2%.

## 1. Introduction
Adversaries often aim to alter the control flow in a program to gain control over it. For programs written in languages that support function pointers, manipulating these pointers is a common attack method. Adversaries can modify function pointers to target illegal addresses or use buffer overflow vulnerabilities to tamper with them. Since function pointers can be maliciously changed during execution, validating their values on the fly is essential for intrusion detection.

A key challenge in dynamic function pointer validation is determining whether the value of a pointer is a valid address. Ideally, the set of valid addresses should satisfy two requirements:
- **Completeness**: The set should include all addresses that the pointer may target in correct execution.
- **Precision**: The set should only contain addresses that the pointer is likely to target in correct execution.

These requirements are often conflicting, and existing solutions prioritize completeness over precision to avoid false positives. However, this approach is not precise enough to detect function entry attacks, where an adversary manipulates a function pointer to target a valid function that should not be invoked by that pointer.

FPValidator addresses this issue by defining the set of possible targets based on type compatibility. In statically-typed languages like C and C++, a function pointer should only invoke functions of compatible types. By ensuring type equivalence, FPValidator can detect function entry attacks without false positives. Our method uses a lightweight, fast type matching approach based on labeled type signatures, with minimal runtime overhead. The evaluation shows that the performance overhead is only about 2%, and the space overhead is less than 8%.

The rest of the paper is organized as follows: Section 2 analyzes function pointer attacks and provides an example of a function entry attack. Section 3 details our validation method, including type matching and instrumentation. Section 4 describes the implementation, evaluation, and security analysis. Related work is discussed in Section 5, and we conclude in Section 6.

## 2. Function Pointer Attacks
Function pointer attacks typically involve modifying function pointers to point to malicious code. These attacks can be categorized into:
- **Data Region Attacks (DRA)**: Targeting code injected into data segments.
- **Code Region Attacks (CRA)**: Targeting addresses within code segments. CRA can further be divided into:
  - **Function Entry Attack (FEA)**: The function pointer targets a valid function entry.
  - **Non-Function Entry Attack (NFEA)**: The function pointer targets an address within the code segment but not a function entry.

Function pointer validation can be classified into four levels based on precision:
- **L1**: The target must be in the code segment.
- **L2**: The target must be a predefined position such as a function entry.
- **L3**: The type of the function pointer and the target function must match.
- **L4**: The target must belong to an accurate points-to address set.

As the level increases, the validation becomes more precise and can detect more attacks. L1 can only detect DRA, while L2 can detect both DRA and NFEA. L3 can detect all FEA involving type violations, and L4 can detect almost all function pointer attacks.

FEA can cause serious security issues, as adversaries can abuse sensitive functions that should be called at specific times and with specific parameters. Shared libraries, such as `libc.so`, often contain dangerous functions like `system` and `execve`, which can be exploited through FEA.

Figure 1 illustrates a buggy function vulnerable to FEA. An adversary can construct a malicious input to overwrite the function pointer `fp` and call the `system` function, executing arbitrary commands. This attack cannot be detected by L1 and L2 validation because the new target is a legal function entry.

## 3. Validating Type Equivalence
To mitigate FEA, FPValidator ensures that function pointers only target compatible functions. At runtime, FPValidator compares the expected type (point-to type) and the actual type (target type) of the function pointer. If the types do not match, an exception is raised. This constraint is safe for statically-typed languages, as invoking a function of an incompatible type is an error.

We propose a fast type matching approach to meet the efficiency requirements of critical programs. This section describes the design of our approach and the supporting compilation-stage instrumentation mechanism. We use C as an example, but our solution can be applied to other statically-typed languages.

### 3.1 Type Matching
To detect type violations, we define criteria to determine if the point-to type of a function pointer matches its target type. Function pointers are typically used to invoke functions of exactly identical types, and compilers generate warnings if their types differ. Therefore, we require that the point-to type and target type must be equivalent.

There are two notions of type equivalence: structural and name equivalence. Structural equivalence means that the expressions of two types are structurally identical. Name equivalence means that the names of the types are the same. Both have limitations for function pointer validation.

We introduce a modified type constructor to establish a labeled type graph. Types, except for basic types, are composed using type constructors. Basic types can be considered as being composed by special constructors. The composing relationship is expressed as:
\[ \tau = T(\tau_1, \tau_2, ..., \tau_n) \]
where \( T \) is a type constructor, such as `function` or `record`, and \( \tau_1 \) to \( \tau_n \) are dependent types. Two types \( \tau \) and \( \tau' \) are structurally equivalent if:
\[ T = T' \]
and
\[ \forall i, \tau_i = \tau'_i \]

Based on the modified type constructors, we can establish a labeled type graph \( G = (V, E) \). \( V \) is the set of vertices, each representing a type \( \tau \) built by the constructor \( T \) with the name \( N(\tau) \). \( E \) is the set of directed edges denoting the building relationship. For a constructor \( T \), the edge connecting \( \tau \) and \( \tau_i \) is labeled with \( l_i \).

To simplify type matching, we ignore type qualifiers (e.g., `const` and `volatile`) and do not distinguish between signed and unsigned types, as these violations are rarely exploitable. We also treat types declared by `typedef` statements as aliases and replace them with their original types in the type graph.

## 4. Implementation and Evaluation
FPValidator is implemented and integrated into the GCC compiler. The validation code and necessary type information are inserted during the compilation stage, causing no extra burden on developers. Our evaluation shows that the performance overhead is only about 2%, and the space overhead is less than 8%.

### 4.1 Implementation
The implementation involves:
- **Type Signature Calculation**: During compilation, the hashes of type signatures for function pointers and functions are calculated.
- **Validation Code Insertion**: The validation code and type information are automatically inserted into the program.
- **Runtime Validation**: At runtime, the type signatures are compared to ensure type equivalence.

### 4.2 Evaluation
We evaluated FPValidator on a set of benchmark programs. The results show that the performance overhead is minimal, with an average increase of about 2% in execution time and less than 8% in memory usage.

### 4.3 Security Analysis
FPValidator effectively detects function entry attacks by ensuring type equivalence. The lightweight type matching approach ensures that the validation process is both efficient and secure. The security analysis confirms that FPValidator can prevent a wide range of function pointer attacks without introducing false positives.

## 5. Related Work
Several existing solutions focus on function pointer validation, but they often prioritize completeness over precision. Solutions like Inlined CFI and WIT use static analysis to compute points-to sets, but their results are not always precise. FPValidator differs by focusing on type equivalence, providing a more precise and efficient solution.

## 6. Conclusion
FPValidator is a novel solution for dynamically validating the type equivalence of function pointers. By ensuring that function pointers only target compatible functions, FPValidator can detect all function entry attacks that violate type equivalence. The fast type matching approach based on labeled type signatures ensures efficient validation with minimal runtime overhead. Our evaluation demonstrates that FPValidator is both effective and efficient, making it a valuable tool for intrusion detection and program security.