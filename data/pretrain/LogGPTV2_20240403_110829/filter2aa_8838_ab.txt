| type_ids_size   | uint                      | 类型标识符列表中的元素数量，最大为 65535                  |
| type_ids_off    | uint                      | 如果 `type_ids_size == 0`（不可否认是一种奇怪的极端情况），则该值为 `0`； 反之表示从文件开头到 `type_ids` 区段开头的偏移量。 |
| proto_ids_size  | uint                      | 原型（方法）标识符列表中的元素数量，最多为 65535              |
| proto_ids_off   | uint                      | 如果 `proto_ids_size == 0`（不可否认是一种奇怪的极端情况），则该值为 `0`； 反之该偏移量表示文件开头到 `proto_ids` 区段开头的偏移量。 |
| field_ids_size  | uint                      | 字段标识符列表中的元素数量                            |
| field_ids_off   | uint                      | 如果 `field_ids_size == 0`，则该值为 `0`； 反之该偏移量表示文件开头到 `field_ids` 区段开头的偏移量。 |
| method_ids_size | uint                      | 方法标识符列表中的元素数量                            |
| method_ids_off  | uint                      | 如果 `method_ids_size == 0`，则该值为 `0`。反之该偏移量表示从文件开头到 `method_ids` 区段开头的偏移量。 |
| class_defs_size | uint                      | 类定义列表中的元素数量                              |
| class_defs_off  | uint                      | 如果 `class_defs_size == 0`（不可否认是一种奇怪的极端情况），则该值为 `0` ；反之该偏移量表示文件开头到 `class_defs` 区段开头的偏移量。 |
| data_size       | uint                      | `data` 区段的以字节为单位的大小，必须是 sizeof(uint) 的偶数倍，说明8字节对齐。 |
| data_off        | uint                      | 从文件开头到 `data` 区段开头的偏移量。                  |
### DEX 索引区
#### string id
StringIds 区段包含`stringIdsSize`个`DexStringId`结构，其结构如下：
```c++
struct DexStringId {
    u4 stringDataOff;   /* 字符串数据偏移，也就是数据区中各个 StringData 的文件偏移*/
};
```
可以看出DexStringId中存储的只是每一个字符串的相对偏移。此外，每一个偏移占据4个字节，字符串部分一共会占据4*stringIdsSize个字节。
在对应的偏移处，字符串是使用MUTF-8格式存储的，其开头存储了之前我们所说的LEB128类型的变量，表示字符串的长度，之后紧跟着的就是字符串，之后以\x00结尾，字符串的长度不包含\x00。
#### type id
type_ids 区索引了java代码中使用的所有类型（类、数组或基本类型），此列表必须按 `string_id` 索引进行排序，并且不能重复。
```c++
struct DexTypeId {
    u4 descriptorIdx;    /* 指向 DexStringId列表的索引 */
};
```
#### proto Id
Proto id字段主要是针对于 java 中的方法原型而设计的，这里面主要包含了一个方法声明的返回类型与参数列表，对于方法名尚未涉及。其主要包含以下三个数据结构
```c++
struct DexProtoId {
    u4 shortyIdx;       /* 返回类型+参数类型，简写，指向DexStringId列表的索引 */
    u4 returnTypeIdx;   /* 返回类型，指向DexTypeId列表的索引 */
    u4 parametersOff;   /* 参数类型，指向DexTypeList的偏移 */
}
struct DexTypeList {
    u4 size;             /* DexTypeItem的个数，即参数个数 */
    DexTypeItem list[1]; /* 指向DexTypeItem开始处 */
};
struct DexTypeItem {
    u2 typeIdx;           /* 参数类型，指向DexTypeId列表的索引，最终指向字符串索引 */
};
```
#### field id
field id区主要是针对于java中每个类的字段而设计的，主要涉及到以下数据结构
```c++
struct DexFieldId {
    u2 classIdx;   /* 类的类型，指向DexTypeId列表的索引 */
    u2 typeIdx;    /* 字段类型，指向DexTypeId列表的索引 */
    u4 nameIdx;    /* 字段名，指向DexStringId列表的索引 */
};
```
#### method id
method id区是直接为 java 中的方法而设计的，其包含了方法所在的类，方法的原型，方法的名字。
```c++
struct DexMethodId {
    u2 classIdx;  /* 类的类型，指向DexTypeId列表的索引 */
    u2 protoIdx;  /* 声明类型，指向DexProtoId列表的索引 */
    u4 nameIdx;   /* 方法名，  指向DexStringId列表的索引 */
};
```
#### class def
classDefsSize表明 class def 区域的大小，classDefsOff表明class def 区的偏移。
该区是为 java 中的类而设计的，包含以下的数据结构，相关信息如下
```c++
// 类的基本信息
struct DexClassDef {
    u4 classIdx;    /* 类的类型，指向DexTypeId列表的索引 */
    u4 accessFlags; /* 访问标志 */
    u4 superclassIdx;  /* 父类类型，指向DexTypeId列表的索引 */
    u4 interfacesOff; /* 接口，指向DexTypeList的偏移 */
    u4 sourceFileIdx; /* 源文件名，指向DexStringId列表的索引 */
    u4 annotationsOff; /* 注解，指向DexAnnotationsDirectoryItem结构 */
    u4 classDataOff;   /* 指向DexClassData结构的偏移 */
    u4 staticValuesOff;  /* 指向DexEncodedArray结构的偏移 */
};
// 类的字段与方法概况
struct DexClassData {
    DexClassDataHeader header; /* 指定字段与方法的个数 */
    DexField* staticFields;    /* 静态字段，DexField结构 */
    DexField* instanceFields;  /* 实例字段，DexField结构 */
    DexMethod* directMethods;  /* 直接方法，DexMethod结构 */
    DexMethod* virtualMethods; /* 虚方法，DexMethod结构 */
// 详细描述类的字段个数与方法个数
struct DexClassDataHeader {
    u4 staticFieldsSize;  /* 静态字段个数 */
    u4 instanceFieldsSize; /* 实例字段个数 */
    u4 directMethodsSize;  /* 直接方法个数 */
    u4 virtualMethodsSize; /* 虚方法个数 */
};
// 字段定义
struct DexField {
    u4 fieldIdx;    /* 指向DexFieldId的索引 */
    u4 accessFlags; /* 访问标志 */
};
// 方法定义
struct DexMethod {
    u4 methodIdx;   /* 指向DexMethodId的索引 */
    u4 accessFlags; /* 访问标志 */
    u4 codeOff;     /* 指向DexCode结构的偏移 */
};
// 代码概况
struct DexCode {
    u2 registersSize;   /* 使用的寄存器个数 */
    u2 insSize;         /* 参数个数 */
    u2 outsSize;        /* 调用其他方法时其它方法使用的寄存器个数，会在自己的调用栈申请，并压栈（猜测） */
    u2 triesSize;       /* Try/Catch个数 */
    u4 debugInfoOff;    /* 指向调试信息的偏移 */
    u4 insnsSize;       /* 指令集个数，以2字节为单位 */
    u2 insns[1];        /* 指令集 */
};
```
#### 小结
可以看出在索引区指向是比较复杂的，但同时也比较巧妙，这里给出Dalvik设计者在[Google Developer Day 2008 China](https://sites.google.com/site/developerdaychina/) 演讲中给出的例子。
### DEX map section
DexHeader中的mapOff字段给出了DexMapList结构在DEX文件中的偏移。当Dalvik虚拟机解析DEX文件后的内容后，会将内容映射到DexMapList数据结构，可以说该结构描述了对应的DEX文件的整体概况。其具体代码如下
```c++
struct DexMapList {
    u4 size;               /* DexMapItem的个数，方便解析 */
    DexMapItem list[1];    /* 指向DexMapItem */
};
struct DexMapItem {
    u2 type;      /* kDexType开头的类型 */
    u2 unused;    /* 未使用，用于字节对齐 */
    u4 size;      /* 指定相应类型的个数 */
    u4 offset;    /* 指定相应类型的数据的文件偏移 */
};
/* type字段为一个枚举常量，通过类型名称很容易判断它的具体类型。 */
/* map item type codes */
enum {
    kDexTypeHeaderItem               = 0x0000,
    kDexTypeStringIdItem             = 0x0001,
    kDexTypeTypeIdItem               = 0x0002,
    kDexTypeProtoIdItem              = 0x0003,
    kDexTypeFieldIdItem              = 0x0004,
    kDexTypeMethodIdItem             = 0x0005,
    kDexTypeClassDefItem             = 0x0006,
    kDexTypeMapList                  = 0x1000,
    kDexTypeTypeList                 = 0x1001,
    kDexTypeAnnotationSetRefList     = 0x1002,
    kDexTypeAnnotationSetItem        = 0x1003,
    kDexTypeClassDataItem            = 0x2000,
    kDexTypeCodeItem                 = 0x2001,
    kDexTypeStringDataItem           = 0x2002,
    kDexTypeDebugInfoItem            = 0x2003,
    kDexTypeAnnotationItem           = 0x2004,
    kDexTypeEncodedArrayItem         = 0x2005,
    kDexTypeAnnotationsDirectoryItem = 0x2006,
};
```