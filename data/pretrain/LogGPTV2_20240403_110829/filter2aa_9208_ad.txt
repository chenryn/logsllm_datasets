.IX Item "chown LIST"
Changes the owner (and group) of a list of files.  The first two
elements of the list must be the \fInumeric\fR uid and gid, in that
order.  A value of \-1 in either position is interpreted by most
systems to leave that value unchanged.  Returns the number of files
successfully changed.
.Sp
.Vb 2
\&    $cnt = chown $uid, $gid, 'foo', 'bar';
\&    chown $uid, $gid, @filenames;
.Ve
.Sp
Here's an example that looks up nonnumeric uids in the passwd file:
.Sp
.Vb 4
\&    print "User: ";
\&    chomp($user = );
\&    print "Files: ";
\&    chomp($pattern = );
.Ve
.Sp
.Vb 2
\&    ($login,$pass,$uid,$gid) = getpwnam($user)
\&        or die "$user not in passwd file";
.Ve
.Sp
.Vb 2
\&    @ary = glob($pattern);      # expand filenames
\&    chown $uid, $gid, @ary;
.Ve
.Sp
On most systems, you are not allowed to change the ownership of the
file unless you're the superuser, although you should be able to change
the group to any of your secondary groups.  On insecure systems, these
restrictions may be relaxed, but this is not a portable assumption.
On \s-1POSIX\s0 systems, you can detect this condition this way:
.Sp
.Vb 2
\&    use POSIX qw(sysconf _PC_CHOWN_RESTRICTED);
\&    $can_chown_giveaway = not sysconf(_PC_CHOWN_RESTRICTED);
.Ve
.IP "chr \s-1NUMBER\s0" 8
.IX Item "chr NUMBER"
.PD 0
.IP "chr" 8
.IX Item "chr"
.PD
Returns the character represented by that \s-1NUMBER\s0 in the character set.
For example, \f(CW\*(C`chr(65)\*(C'\fR is \f(CW"A"\fR in either \s-1ASCII\s0 or Unicode, and
chr(0x263a) is a Unicode smiley face.  Note that characters from 128
to 255 (inclusive) are by default not encoded in \s-1UTF\-8\s0 Unicode for
backward compatibility reasons (but see encoding).
.Sp
If \s-1NUMBER\s0 is omitted, uses \f(CW$_\fR.
.Sp
For the reverse, use \*(L"ord\*(R".
.Sp
Note that under the \f(CW\*(C`bytes\*(C'\fR pragma the \s-1NUMBER\s0 is masked to
the low eight bits.
.Sp
See perlunicode and encoding for more about Unicode.
.IP "chroot \s-1FILENAME\s0" 8
.IX Item "chroot FILENAME"
.PD 0
.IP "chroot" 8
.IX Item "chroot"
.PD
This function works like the system call by the same name: it makes the
named directory the new root directory for all further pathnames that
begin with a \f(CW\*(C`/\*(C'\fR by your process and all its children.  (It doesn't
change your current working directory, which is unaffected.)  For security
reasons, this call is restricted to the superuser.  If \s-1FILENAME\s0 is
omitted, does a \f(CW\*(C`chroot\*(C'\fR to \f(CW$_\fR.
.IP "close \s-1FILEHANDLE\s0" 8
.IX Item "close FILEHANDLE"
.PD 0
.IP "close" 8
.IX Item "close"
.PD
Closes the file or pipe associated with the file handle, returning
true only if \s-1IO\s0 buffers are successfully flushed and closes the system
file descriptor.  Closes the currently selected filehandle if the
argument is omitted.
.Sp
You don't have to close \s-1FILEHANDLE\s0 if you are immediately going to do
another \f(CW\*(C`open\*(C'\fR on it, because \f(CW\*(C`open\*(C'\fR will close it for you.  (See
\&\f(CW\*(C`open\*(C'\fR.)  However, an explicit \f(CW\*(C`close\*(C'\fR on an input file resets the line
counter (\f(CW$.\fR), while the implicit close done by \f(CW\*(C`open\*(C'\fR does not.
.Sp
If the file handle came from a piped open \f(CW\*(C`close\*(C'\fR will additionally
return false if one of the other system calls involved fails or if the
program exits with non-zero status.  (If the only problem was that the
program exited non-zero \f(CW$!\fR will be set to \f(CW0\fR.)  Closing a pipe
also waits for the process executing on the pipe to complete, in case you
want to look at the output of the pipe afterwards, and
implicitly puts the exit status value of that command into \f(CW$?\fR.
.Sp
Prematurely closing the read end of a pipe (i.e. before the process
writing to it at the other end has closed it) will result in a
\&\s-1SIGPIPE\s0 being delivered to the writer.  If the other end can't
handle that, be sure to read all the data before closing the pipe.
.Sp
Example:
.Sp
.Vb 8
\&    open(OUTPUT, '|sort >foo')  # pipe to sort
\&        or die "Can't start sort: $!";
\&    #...                        # print stuff to output
\&    close OUTPUT                # wait for sort to finish
\&        or warn $! ? "Error closing sort pipe: $!"
\&                   : "Exit status $? from sort";
\&    open(INPUT, 'foo')          # get sort's results
\&        or die "Can't open 'foo' for input: $!";
.Ve
.Sp
\&\s-1FILEHANDLE\s0 may be an expression whose value can be used as an indirect
filehandle, usually the real filehandle name.
.IP "closedir \s-1DIRHANDLE\s0" 8
.IX Item "closedir DIRHANDLE"
Closes a directory opened by \f(CW\*(C`opendir\*(C'\fR and returns the success of that
system call.
.IP "connect \s-1SOCKET\s0,NAME" 8
.IX Item "connect SOCKET,NAME"
Attempts to connect to a remote socket, just as the connect system call
does.  Returns true if it succeeded, false otherwise.  \s-1NAME\s0 should be a
packed address of the appropriate type for the socket.  See the examples in
\&\*(L"Sockets: Client/Server Communication\*(R" in perlipc.
.IP "continue \s-1BLOCK\s0" 8
.IX Item "continue BLOCK"
Actually a flow control statement rather than a function.  If there is a
\&\f(CW\*(C`continue\*(C'\fR \s-1BLOCK\s0 attached to a \s-1BLOCK\s0 (typically in a \f(CW\*(C`while\*(C'\fR or
\&\f(CW\*(C`foreach\*(C'\fR), it is always executed just before the conditional is about to
be evaluated again, just like the third part of a \f(CW\*(C`for\*(C'\fR loop in C.  Thus
it can be used to increment a loop variable, even when the loop has been
continued via the \f(CW\*(C`next\*(C'\fR statement (which is similar to the C \f(CW\*(C`continue\*(C'\fR
statement).
.Sp
\&\f(CW\*(C`last\*(C'\fR, \f(CW\*(C`next\*(C'\fR, or \f(CW\*(C`redo\*(C'\fR may appear within a \f(CW\*(C`continue\*(C'\fR
block.  \f(CW\*(C`last\*(C'\fR and \f(CW\*(C`redo\*(C'\fR will behave as if they had been executed within
the main block.  So will \f(CW\*(C`next\*(C'\fR, but since it will execute a \f(CW\*(C`continue\*(C'\fR
block, it may be more entertaining.
.Sp
.Vb 9
\&    while (EXPR) {
\&        ### redo always comes here
\&        do_something;
\&    } continue {
\&        ### next always comes here
\&        do_something_else;
\&        # then back the top to re-check EXPR
\&    }
\&    ### last always comes here
.Ve
.Sp
Omitting the \f(CW\*(C`continue\*(C'\fR section is semantically equivalent to using an
empty one, logically enough.  In that case, \f(CW\*(C`next\*(C'\fR goes directly back
to check the condition at the top of the loop.
.IP "cos \s-1EXPR\s0" 8
.IX Item "cos EXPR"
.PD 0
.IP "cos" 8
.IX Item "cos"
.PD
Returns the cosine of \s-1EXPR\s0 (expressed in radians).  If \s-1EXPR\s0 is omitted,
takes cosine of \f(CW$_\fR.
.Sp
For the inverse cosine operation, you may use the \f(CW\*(C`Math::Trig::acos()\*(C'\fR
function, or use this relation:
.Sp
.Vb 1
\&    sub acos { atan2( sqrt(1 - $_[0] * $_[0]), $_[0] ) }
.Ve
.IP "crypt \s-1PLAINTEXT\s0,SALT" 8
.IX Item "crypt PLAINTEXT,SALT"
Encrypts a string exactly like the \fIcrypt\fR\|(3) function in the C library
(assuming that you actually have a version there that has not been
extirpated as a potential munition).  This can prove useful for checking
the password file for lousy passwords, amongst other things.  Only the
guys wearing white hats should do this.
.Sp
Note that crypt is intended to be a one-way function, much like
breaking eggs to make an omelette.  There is no (known) corresponding
decrypt function (in other words, the \fIcrypt()\fR is a one-way hash
function).  As a result, this function isn't all that useful for
cryptography.  (For that, see your nearby \s-1CPAN\s0 mirror.)
.Sp
When verifying an existing encrypted string you should use the
encrypted text as the salt (like \f(CW\*(C`crypt($plain, $crypted) eq
$crypted\*(C'\fR).  This allows your code to work with the standard crypt
and with more exotic implementations.  In other words, do not assume
anything about the returned string itself, or how many bytes in
the encrypted string matter.
.Sp
Traditionally the result is a string of 13 bytes: two first bytes of
the salt, followed by 11 bytes from the set \f(CW\*(C`[./0\-9A\-Za\-z]\*(C'\fR, and only
the first eight bytes of the encrypted string mattered, but
alternative hashing schemes (like \s-1MD5\s0), higher level security schemes
(like C2), and implementations on non-UNIX platforms may produce
different strings.
.Sp
When choosing a new salt create a random two character string whose
characters come from the set \f(CW\*(C`[./0\-9A\-Za\-z]\*(C'\fR (like \f(CW\*(C`join '', ('.',
\&'/', 0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64]\*(C'\fR).  This set of
characters is just a recommendation; the characters allowed in
the salt depend solely on your system's crypt library, and Perl can't
restrict what salts \f(CW\*(C`crypt()\*(C'\fR accepts.
.Sp
Here's an example that makes sure that whoever runs this program knows
their own password:
.Sp
.Vb 1
\&    $pwd = (getpwuid($);
\&    print "\en";
\&    system "stty echo";
.Ve
.Sp
.Vb 5
\&    if (crypt($word, $pwd) ne $pwd) {
\&        die "Sorry...\en";
\&    } else {
\&        print "ok\en";
\&    }
.Ve
.Sp
Of course, typing in your own password to whoever asks you
for it is unwise.
.Sp
The crypt function is unsuitable for encrypting large quantities
of data, not least of all because you can't get the information
back.  Look at the \fIby\-module/Crypt\fR and \fIby\-module/PGP\fR directories
on your favorite \s-1CPAN\s0 mirror for a slew of potentially useful
modules.
.Sp
If using \fIcrypt()\fR on a Unicode string (which \fIpotentially\fR has
characters with codepoints above 255), Perl tries to make sense
of the situation by trying to downgrade (a copy of the string)
the string back to an eight-bit byte string before calling \fIcrypt()\fR
(on that copy).  If that works, good.  If not, \fIcrypt()\fR dies with
\&\f(CW\*(C`Wide character in crypt\*(C'\fR.
.IP "dbmclose \s-1HASH\s0" 8
.IX Item "dbmclose HASH"
[This function has been largely superseded by the \f(CW\*(C`untie\*(C'\fR function.]
.Sp
Breaks the binding between a \s-1DBM\s0 file and a hash.
.IP "dbmopen \s-1HASH\s0,DBNAME,MASK" 8
.IX Item "dbmopen HASH,DBNAME,MASK"
[This function has been largely superseded by the \f(CW\*(C`tie\*(C'\fR function.]
.Sp
This binds a \fIdbm\fR\|(3), \fIndbm\fR\|(3), \fIsdbm\fR\|(3), \fIgdbm\fR\|(3), or Berkeley \s-1DB\s0 file to a
hash.  \s-1HASH\s0 is the name of the hash.  (Unlike normal \f(CW\*(C`open\*(C'\fR, the first
argument is \fInot\fR a filehandle, even though it looks like one).  \s-1DBNAME\s0
is the name of the database (without the \fI.dir\fR or \fI.pag\fR extension if
any).  If the database does not exist, it is created with protection
specified by \s-1MASK\s0 (as modified by the \f(CW\*(C`umask\*(C'\fR).  If your system supports
only the older \s-1DBM\s0 functions, you may perform only one \f(CW\*(C`dbmopen\*(C'\fR in your
program.  In older versions of Perl, if your system had neither \s-1DBM\s0 nor
ndbm, calling \f(CW\*(C`dbmopen\*(C'\fR produced a fatal error; it now falls back to
\&\fIsdbm\fR\|(3).
.Sp
If you don't have write access to the \s-1DBM\s0 file, you can only read hash