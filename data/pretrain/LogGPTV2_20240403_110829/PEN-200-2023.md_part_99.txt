# Penetration Testing with Kali Linux

## LDAP Query Example
```
LDAP://DC1.corp.com/CN=Debug,CN=Users,DC=corp,DC=com
{usnchanged, distinguishedname, grouptype, whencreated...}
```

## Listing 739 - Searching All Possible Groups in AD
Our script enumerates more groups than `net.exe`, including Print Operators, IIS_IUSRS, and others. This is because it enumerates all AD objects, including Domain Local groups (not just global groups).

To print properties and attributes for objects, we need to implement the loops discussed earlier. For now, let's do this directly from the PowerShell command.

### Enumerating All Groups and Displaying User Members
To enumerate every group available in the domain and display the user members, we can pipe the output into a new variable and use a `foreach` loop to print each property for a group. This allows us to select specific attributes, such as `CN` and `member`.

```powershell
PS C:\Users\stephanie\Desktop> foreach ($group in $(LDAPSearch -LDAPQuery "(objectCategory=group)")) {
>> $group.properties | select {$_.cn}, {$_.member}
>> }
```

**Listing 740 - Using `foreach` to Iterate Through Objects in `$group` Variable**

Even though this environment is somewhat small, we still received a lot of output. Let's focus on the three groups we noticed earlier in our enumeration with `net.exe`:

- **Sales Department**
  - Members: `CN=Development Department,DC=corp,DC=com`, `CN=pete,CN=Users,DC=corp,DC=com`, `CN=stephanie,CN=Users,DC=corp,DC=com`
- **Management Department**
  - Member: `CN=jen,CN=Users,DC=corp,DC=com`
- **Development Department**
  - Members: `CN=Management Department,DC=corp,DC=com`, `CN=pete,CN=Users,DC=corp,DC=com`, `CN=dave,CN=Users,DC=corp,DC=com`

**Listing 741 - Partial Output from Our Previous Search**

According to our search, we have expanded the properties for each object, in this case, the group objects, and printed the `member` attribute for each group.

### Unexpected Findings
Earlier, when we enumerated the Sales Department group with `net.exe`, we only found two users: `pete` and `stephanie`. However, it appears that `Development Department` is also a member.

Since the output can be difficult to read, let's search for the groups again, but this time specify the Sales Department in the query and pipe it into a variable in our PowerShell command line:

```powershell
PS C:\Users\stephanie> $sales = LDAPSearch -LDAPQuery "(&(objectCategory=group)(cn=Sales Department))"
```

**Listing 742 - Adding the Search to Our Variable Called `$sales`**

Now that we only have one object in our variable, we can simply print the `member` attribute directly:

```powershell
PS C:\Users\stephanie\Desktop> $sales.properties.member
CN=Development Department,DC=corp,DC=com
CN=pete,CN=Users,DC=corp,DC=com
CN=stephanie,CN=Users,DC=corp,DC=com
```

**Listing 743 - Printing the `member` Attribute on the Sales Department Group Object**

The Development Department is indeed a member of the Sales Department group, as indicated in Listing 743. This is something we missed earlier with `net.exe`.

This is a group within a group, known as a nested group. Nested groups are relatively common in AD and scale well, allowing flexibility and dynamic membership customization even in the largest AD implementations. The `net.exe` tool missed this because it only lists user objects, not group objects, and cannot display specific attributes. This emphasizes the benefit of custom tools.

### Further Enumeration
Now that we know the Development Department is a member of the Sales Department, let's enumerate it:

```powershell
PS C:\Users\stephanie> $group = LDAPSearch -LDAPQuery "(&(objectCategory=group)(cn=Development Department*))"
PS C:\Users\stephanie> $group.properties.member
CN=Management Department,DC=corp,DC=com
CN=pete,CN=Users,DC=corp,DC=com
CN=dave,CN=Users,DC=corp,DC=com
```

**Listing 744 - Printing the `member` Attribute on the Development Department Group Object**

Based on the output above, we have another case of a nested group since Management Department is a member of Development Department. Let's check this group as well:

```powershell
PS C:\Users\stephanie\Desktop> $group = LDAPSearch -LDAPQuery "(&(objectCategory=group)(cn=Management Department*))"
PS C:\Users\stephanie\Desktop> $group.properties.member
CN=jen,CN=Users,DC=corp,DC=com
```

**Listing 745 - Printing the `member` Attribute on the Management Department Group Object**

Finally, after searching through multiple groups, it appears we found the end. According to the output in Listing 745, `jen` is the sole member of the Management Department group. Although we saw `jen` as a member of the Management Department group earlier in Listing 741, we obtained additional information about the group memberships by enumerating the groups one-by-one.

An additional thing to note here is that while it appears that `jen` is only a part of the Management Department group, she is also an indirect member of the Sales Department and Development Department groups, since groups typically inherit each other. This is normal behavior in AD; however, if misconfigured, users may end up with more privileges than intended. This might allow attackers to take advantage of the misconfiguration to further expand their reach inside the compromised domain.

This concludes the journey with our PowerShell script that invokes .NET classes to run queries against AD via LDAP. As verified, this approach is much more powerful than running tools such as `net.exe` and provides a wealth of enumeration options.

While this script can surely be developed further by adding additional options and functions, this may require more research on PowerShell scripting, which is outside the scope of this module. With a basic understanding of LDAP and how we can use it to communicate with AD using PowerShell, we'll shift our focus in the next section to a pre-developed script that will speed up our process.

## 21.2.4 AD Enumeration with PowerView
So far, we have only scratched the surface of Active Directory enumeration by focusing mostly on users and groups. While the tools we have used so far have given us a good start and an understanding of how we can communicate with AD and obtain information, other researchers have created more elaborate tools for the same purpose.

One popular option is the PowerView PowerShell script, which includes many functions to improve the effectiveness of our enumeration.

### Introduction to PowerView
PowerView is already installed in the `C:\Tools` folder on `CLIENT75`. To use it, we'll first import it to memory:

```powershell
PS C:\Tools> Import-Module .\PowerView.ps1
```

**Listing 746 - Importing PowerView to Memory**

With PowerView imported, we can start exploring various commands that are available. For a list of available commands in PowerView, please refer to the linked reference.

Let's start by running `Get-NetDomain`, which will give us basic information about the domain:

```powershell
PS C:\Tools> Get-NetDomain
Forest : corp.com
DomainControllers : {DC1.corp.com}
Children : {}
DomainMode : Unknown
DomainModeLevel : 7
Parent :
PdcRoleOwner : DC1.corp.com
RidRoleOwner : DC1.corp.com
InfrastructureRoleOwner : DC1.corp.com
Name : corp.com
```

**Listing 747 - Obtaining Domain Information**

Much like the script we created earlier, PowerView is also using .NET classes to obtain the required LDAP path and uses it to communicate with AD.

Now let's get a list of all users in the domain with `Get-NetUser`:

```powershell
PS C:\Tools> Get-NetUser
```

**Listing 748 - Querying Users in the Domain**

`Get-NetUser` automatically enumerates all attributes on the user objects. This presents a lot of information, which can be difficult to digest. In the script we created earlier, we used loops to print certain attributes based on the information obtained. However, with PowerView, we can simply pipe the output into `select`, where we can choose the attributes we are interested in.

The output from Listing 748 reveals that the `cn` attribute holds the username of the user. Let's pipe the output into `select` and choose the `cn` attribute:

```powershell
PS C:\Tools> Get-NetUser | select cn
cn
--
Administrator
Guest
krbtgt
dave
stephanie
jeff
jeffadmin
iis_service
pete
jen
```

**Listing 749 - Querying Users Using Select Statement**

This produced a cleaned-up list of users in the domain.

When enumerating AD, there are many interesting attributes to search for. For example, if a user is dormant (they have not changed their password or logged in recently), we will cause less interference and draw less attention if we take over that account during the engagement. Additionally, if a user hasn’t changed their password since a recent password policy change, their password may be weaker than the current policy, making it more vulnerable to password attacks.

We can easily investigate this. Let's run `Get-NetUser` again, this time piping the output into `select` and extracting these attributes:

```powershell
PS C:\Tools> Get-NetUser | select cn,pwdlastset,lastlogon
cn pwdlastset lastlogon
-- ---------- ---------
Administrator 8/16/2022 5:27:22 PM 9/14/2022 2:37:15 AM
Guest 12/31/1600 4:00:00 PM 12/31/1600 4:00:00 PM
krbtgt 9/2/2022 4:10:48 PM 12/31/1600 4:00:00 PM
dave 9/7/2022 9:54:57 AM 9/14/2022 2:57:28 AM
stephanie 9/2/2022 4:23:38 PM 12/31/1600 4:00:00 PM
jeff 9/2/2022 4:27:20 PM 9/14/2022 2:54:55 AM
jeffadmin 9/2/2022 4:26:48 PM 9/14/2022 2:26:37 AM
iis_service 9/7/2022 5:38:43 AM 9/14/2022 2:35:55 AM
pete 9/6/2022 12:41:54 PM 9/13/2022 8:37:09 AM
jen 9/6/2022 12:43:01 PM 9/13/2022 8:36:55 AM
```

**Listing 750 - Querying Users Displaying `pwdlastset` and `lastlogon`**

As indicated in Listing 750, we have a nice list showing when the users last changed their password and when they last logged in to the domain.

Similarly, we can use `Get-NetGroup` to enumerate groups:

```powershell
PS C:\Tools> Get-NetGroup | select cn
cn
--
Key Admins
Enterprise Key Admins
DnsAdmins
DnsUpdateProxy
Sales Department
Management Department
Development Department
Debug
```

**Listing 751 - Querying Groups in the Domain Using PowerView**

Enumerating specific groups with PowerView is easy. Although we will not go through the process of unraveling nested groups in this case, let's investigate the Sales Department using `Get-NetGroup` and pipe the output into `select member`:

```powershell
PS C:\Tools> Get-NetGroup "Sales Department" | select member
member
------
{CN=Development Department,DC=corp,DC=com, CN=pete,CN=Users,DC=corp,DC=com,
CN=stephanie,CN=Users,DC=corp,DC=com}
```

**Listing 752 - Enumerating the “Sales Department” Group**

Now that we have essentially recreated the functionality of our previous script, we're ready to explore more attributes and enumeration techniques.

## 21.3 Manual Enumeration - Expanding Our Repertoire
This Learning Unit covers the following Learning Objectives:
- Enumerate Operating Systems
- Enumerate Permissions and Logged-On Users
- Enumerate Through Service Principal Names
- Enumerate Object Permissions
- Explore Domain Shares

Now that we are familiar with LDAP and have a few tools in our toolkit, let's further explore the domain. Our goal is to use all this information to create a domain map. While we don’t necessarily need to draw a map ourselves, it is a good idea to try visualizing how the domain is configured and understand the relationship between objects. Visualizing the environment can make it easier to find potential attack vectors.

### 21.3.1 Enumerating Operating Systems
In a typical penetration test, we use various recon tools to detect which operating system a client or server is using. We can, however, enumerate this from Active Directory.

Let's use the `Get-NetComputer` PowerView command to enumerate the computer objects in the domain:

```powershell
PS C:\Tools> Get-NetComputer
pwdlastset : 10/2/2022 10:19:40 PM
logoncount : 319
msds-generationid : {89, 27, 90, 188...}
serverreferencebl : CN=DC1,CN=Servers,CN=Default-First-Site-
Name,CN=Sites,CN=Configuration,DC=corp,DC=com
badpasswordtime : 12/31/1600 4:00:00 PM
distinguishedname : CN=DC1,OU=Domain Controllers,DC=corp,DC=com
objectclass : {top, person, organizationalPerson, user...}
lastlogontimestamp : 10/13/2022 11:37:06 AM
name : DC1
```

**Listing 753 - Enumerating Computer Objects in the Domain**

This command provides detailed information about the computer objects, including the last logon timestamp, distinguished name, and other relevant attributes.