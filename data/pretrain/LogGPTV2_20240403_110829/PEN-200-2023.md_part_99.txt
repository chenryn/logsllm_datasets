Penetration Testing with Kali Linux
LDAP://DC1.corp.com/CN=Debug,CN=Users,DC=corp,DC=com
{usnchanged, distinguishedname, grouptype, whencreated...}
Listing 739 - Searching all possible groups in AD
Our script enumerates more groups than net.exe including Print Operators, IIS_IUSRS, and others.
This is because it enumerates all AD objects including Domain Local groups (not just global
groups).
In order to print properties and attributes for objects, we’ll need to implement the loops we
discussed earlier. For now, let’s do this directly from the PowerShell command.
To enumerate every group available in the domain and also display the user members, we can
pipe the output into a new variable and use a foreach loop that will print each property for a group.
This allows us to select specific attributes we are interested in. For example, let’s focus on the CN
and member attributes:
y
PS C:\Users\stephanie\Desktop> foreach ($group in $(LDAPSearch -LDAPQuery
"(objectCategory=group)")) { k
>> $group.properties | select {$_.cn}, {$_.member}
>> }
Listing 740 - Using “foreach” to iterate through tshe objects in $group variable
Even though this environment is somewhat small, we still received a lot of output. Let’s focus on
o
the three groups we noticed earlier in our enumeration with net.exe:
...
n
Sales Department {CN=Development Department,DC=corp,DC=com,
CN=pete,CN=Users,DC=corp,DC=com, CN=stephanie,CN=Users,DC=corp,DC=com}
Management Department CNi=jen,CN=Users,DC=corp,DC=com
Development Department {CN=Management Department,DC=corp,DC=com,
z
CN=pete,CN=Users,DC=corp,DC=com, CN=dave,CN=Users,DC=corp,DC=com}
...
DListing 741 - Partial output from our previous search
According to our search, we have expanded the properties for each object, in this case the group
objects, and we printed the member attribute for each group.
Listing 741 reveals something unexpected. Earlier when we enumerated the Sales Department
group with net.exe, we only found two users in it: pete and stephanie. In this case however, it
appears that Development Department is also a member.
Since the output can be somewhat difficult to read, let’s once again search for the groups, but this
time specify the Sales Department in the query and pipe it into a variable in our PowerShell
command line:
PS C:\Users\stephanie> $sales = LDAPSearch -LDAPQuery
"(&(objectCategory=group)(cn=Sales Department))"
Listing 742 - Adding the search to our variable called $sales
Now that we only have one object in our variable, we can simply print the member attribute
directly:
PS C:\Users\stephanie\Desktop> $sales.properties.member
CN=Development Department,DC=corp,DC=com
CN=pete,CN=Users,DC=corp,DC=com
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 706
Made in Morocco
Penetration Testing with Kali Linux
CN=stephanie,CN=Users,DC=corp,DC=com
PS C:\Users\stephanie\Desktop>
Listing 743 - Printing the member attribute on the Sales Department group object
The Development Department is indeed a member of the Sales Department group as indicated in
Listing 743. This is something we missed earlier with net.exe.
This is a group within a group, known as a nested group. Nested groups are relatively common in
AD and scales well, allowing flexibility and dynamic membership customization of even the
largest AD implementations.
The net.exe tool missed this because it only lists user objects, not group objects.
In addition, net.exe can not display specific attributes. This emphasizes the benefit of custom
tools.
y
Now that we know the Development Department is a member of the Sales Department, let’s
enumerate it:
k
PS C:\Users\stephanie> $group = LDAPSearch -LDAPQuery
"(&(objectCategory=group)(cn=Development Departmenst*))"
PS C:\Users\stephanie> $group.properties.member
o
CN=Management Department,DC=corp,DC=com
CN=pete,CN=Users,DC=corp,DC=com
CN=dave,CN=Users,DC=corp,DC=com
n
Listing 744 - Printing the member attribute on the Development Department group object
Based on the output above, we have another case of a nested group since Management
i
Department is a member of Development Department. Let’s check this group as well:
z
PS C:\Users\stephanie\Desktop> $group = LDAPSearch -LDAPQuery
"(&(objectCategory=group)D(cn=Management Department*))"
PS C:\Users\stephanie\Desktop> $group.properties.member
CN=jen,CN=Users,DC=corp,DC=com
Listing 745 - Printing the member attribute on the Management Department group object
Finally, after searching through multiple groups, it appears we found the end. According to the
output in Listing 745, jen is the sole member of the Management Department group. Although we
saw jen as a member of the Management Department group earlier in Listing 741, we obtained
additional information about the group memberships in this case by enumerating the groups one-
by-one.
An additional thing to note here is that while it appears that jen is only a part of the Management
Department group, she is also an indirect member of the Sales Department and Development
Department groups, since groups typically inherit each other. This is normal behavior in AD;
however, if misconfigured, users may end up with more privileges than they were intended to
have. This might allow attackers to take advantage of the misconfiguration to further expand their
reach inside the compromised domain.
This concludes the journey with our PowerShell script that invokes .NET classes to run queries
against AD via LDAP. As we have verified, this approach is much more powerful than running
tools such as net.exe and provides a wealth of enumeration options.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 707
Made in Morocco
Penetration Testing with Kali Linux
While this script can surely be developed further by adding additional options and functions, this
may require more research on PowerShell scripting, which is outside the scope of this Module.
With a basic understanding of LDAP and how we can use it to communicate with AD using
PowerShell, we’ll shift our focus in the next section to a pre-developed script that will speed up
our process.
21.2.4 AD Enumeration with PowerView
So far we have only scratched the surface of Active Directory enumeration by mostly focusing on
users and groups. While the tools we have used so far have given us a good start and an
understanding of how we can communicate with AD and obtain information, other researchers
have created more elaborate tools for the same purpose.
One popular option is the PowerView1031 PowerShell script, which includes many functions to
y
improve the effectiveness of our enumeration.
As a way of introducing PowerView, let’s walk through parts kof our enumeration steps from the
previous section. PowerView is already installed in the C:\Tools folder on CLIENT75. To use it,
we’ll first import it to memory: s
PS C:\Tools> Import-Module .\PowerView.ps1
o
Listing 746 - Importing PowerView to memory
With PowerView imported, we can start exploring various commands that are available. For a list
n
of available commands in PowerView, please refer to the linked reference.1032
Let’s start by running Get-NetDomain, which will give us basic information about the domain
i
(which we used GetCurrentDomain for previously):
z
PS C:\Tools> Get-NetDomain
D
Forest : corp.com
DomainControllers : {DC1.corp.com}
Children : {}
DomainMode : Unknown
DomainModeLevel : 7
Parent :
PdcRoleOwner : DC1.corp.com
RidRoleOwner : DC1.corp.com
InfrastructureRoleOwner : DC1.corp.com
Name : corp.com
Listing 747 - Obtaining domain information
Much like the script we created earlier, PowerView is also using .NET classes to obtain the
required LDAP path and uses it to communicate with AD.
Now let’s get a list of all users in the domain with Get-NetUser:
PS C:\Tools> Get-NetUser
1031 (PowerSploit), https://powersploit.readthedocs.io/en/latest/Recon/
1032 (PowerSploit), https://powersploit.readthedocs.io/en/latest/Recon/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 708
Made in Morocco
Penetration Testing with Kali Linux
logoncount : 113
iscriticalsystemobject : True
description : Built-in account for administering the computer/domain
distinguishedname : CN=Administrator,CN=Users,DC=corp,DC=com
objectclass : {top, person, organizationalPerson, user}
lastlogontimestamp : 9/13/2022 1:03:47 AM
name : Administrator
objectsid : S-1-5-21-1987370270-658905905-1781884369-500
samaccountname : Administrator
admincount : 1
codepage : 0
samaccounttype : USER_OBJECT
accountexpires : NEVER
cn : Administrator
whenchanged : 9/13/2022 8:03:47 AM
instancetype : 4 y
usncreated : 8196
objectguid : e5591000-080d-44c4-89c8-b06574a14d85
lastlogoff : 12/31/1600 4:00:00 PM k
objectcategory : CN=Person,CN=Schema,CN=Configuration,DC=corp,DC=com
dscorepropagationdata : {9/2/2022 11:25:58 PM, 9/2/2022 11:25:58 PM, 9/2/2022
s
11:10:49 PM, 1/1/1601 6:12:16 PM}
memberof : {CN=Group Policy Creator Owners,CN=Users,DC=corp,DC=com,
CN=Domain Admins,CN=Users,DC=corp,DC=com, CN=oEnterprise
Admins,CN=Users,DC=corp,DC=com, CN=Schema
Admins,CN=Users,DC=corp,DC=com...}
lastlogon : 9/14/2022 2:37n:15 AM
...
Listing 748 - Querying users in the domain
i
Get-NetUser automatically enumzerates all attributes on the user objects. This presents a lot of
information, which can be difficult to digest.
In the script we created earDlier, we used loops to print certain attributes based on the information
obtained. However, with PowerView we can simply pipe the output into select, where we can
choose the attributes we are interested in.
The output from Listing 748 reveals that the cn attribute holds the username of the user. Let’s
pipe the output into select and choose the cn attribute:
PS C:\Tools> Get-NetUser | select cn
cn
--
Administrator
Guest
krbtgt
dave
stephanie
jeff
jeffadmin
iis_service
pete
jen
Listing 749 - Querying users using select statement
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 709
Made in Morocco
Penetration Testing with Kali Linux
This produced a cleaned-up list of users in the domain.
When enumerating AD, there are many interesting attributes to search for. For example, if a user
is dormant (they have not changed their password or logged in recently) we will cause less
interference and draw less attention if we take over that account during the engagement. In
addition, if a user hasn’t changed their password since a recent password policy change, their
password may be weaker than the current policy. This might make it more vulnerable to
password attacks.
This is something we can easily investigate. Let’s run Get-NetUser again, this time piping the
output into select and extracting these attributes.
PS C:\Tools> Get-NetUser | select cn,pwdlastset,lastlogon
cn pwdlastset lastlogon
y
-- ---------- ---------
Administrator 8/16/2022 5:27:22 PM 9/14/2022 2:37:15 AM
Guest 12/31/1600 4:00:00 PM 12/31/1600 4:00:00 PkM
krbtgt 9/2/2022 4:10:48 PM 12/31/1600 4:00:00 PM
dave 9/7/2022 9:54:57 AM 9/14/2022 2:57:28 AM
s
stephanie 9/2/2022 4:23:38 PM 12/31/1600 4:00:00 PM
jeff 9/2/2022 4:27:20 PM 9/14/2022 2:54:55 AM
jeffadmin 9/2/2022 4:26:48 PM 9/14/2022 2:26:37 AM
o
iis_service 9/7/2022 5:38:43 AM 9/14/2022 2:35:55 AM
pete 9/6/2022 12:41:54 PM 9/13/2022 8:37:09 AM
jen 9/6/2022 12:43:01 PM 9/1n3/2022 8:36:55 AM
Listing 750 - Querying users displaying pwdlastset and lastlogon
As indicated in Listing 750, we have a nice list which shows us when the users last changed their
i
password, as well as when they last logged in to the domain.
z
Similarly, we can use Get-NetGroup to enumerate groups:
D
PS C:\Tools> Get-NetGroup | select cn
cn
--
...
Key Admins
Enterprise Key Admins
DnsAdmins
DnsUpdateProxy
Sales Department
Management Department
Development Department
Debug
Listing 751 - Querying groups in the domain using PowerView
Enumerating specific groups with PowerView is easy. Although we will not go through the
process of unraveling nested groups in this case, let’s investigate the Sales Department using
Get-NetGroup and pipe the output into select member:
PS C:\Tools> Get-NetGroup "Sales Department" | select member
member
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 710
Made in Morocco
Penetration Testing with Kali Linux
------
{CN=Development Department,DC=corp,DC=com, CN=pete,CN=Users,DC=corp,DC=com,
CN=stephanie,CN=Users,DC=corp,DC=com}
Listing 752 - Enumerating the “Sales Department” group
Now that we have essentially recreated the functionality of our previous script, we’re ready to
explore more attributes and enumeration techniques.
21.3 Manual Enumeration - Expanding our Repertoire
This Learning Unit covers the following Learning Objectives:
• Enumerate Operating Systems
• Enumerate permissions and logged on users
y
• Enumerate through Service Principal Names
• Enumerate Object Permissions
k
• Explore Domain Shares
s
Now that we are familiar with LDAP and we have a few tools in our toolkit, let’s further explore the
domain.
o
Our goal is to use all this information to create a domain map. While we don’t necessarily need to
draw a map ourselves, it is a good idea to try visualizing how the domain is configured and
n
understand the relationship between objects. Visualizing the environment can make it easier to
find potential attack vectors.
i
21.3.1 Enumerating Operating Systems
z
In a typical penetration test, we use various recon tools in order to detect which operating system
D
a client or server is using. We can, however, enumerate this from Active Directory.
Let’s use the Get-NetComputer PowerView command to enumerate the computer objects in the
domain.
PS C:\Tools> Get-NetComputer
pwdlastset : 10/2/2022 10:19:40 PM
logoncount : 319
msds-generationid : {89, 27, 90, 188...}
serverreferencebl : CN=DC1,CN=Servers,CN=Default-First-Site-
Name,CN=Sites,CN=Configuration,DC=corp,DC=com
badpasswordtime : 12/31/1600 4:00:00 PM
distinguishedname : CN=DC1,OU=Domain Controllers,DC=corp,DC=com
objectclass : {top, person, organizationalPerson, user...}
lastlogontimestamp : 10/13/2022 11:37:06 AM
name : DC1