## Page 584
Input: 3
output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2
Example 3:
Input: 4
Output: 3
Exp1anation: F(4) = F(3) + F(2) = 2 + 1 = 3
Note:
0 ≤ N ≤ 30.
题目大意
斐波那契数，通常用F（n）表示，形成的序列称为斐波那契数列。该数列由0和1开始，后面的每一项
数字都是前面两项数字的和。也就是：
F(0) = 0,
F(1) = 1
F(N) = F(N - 1) + F(N - 2), 其中 N > 1.
给定N，计算F(N)。
提示： 0 ≤ N ≤ 30
解题思路
·求斐波那契数列
·这一题解法很多，大的分类是四种，递归，记忆化搜索（dp），矩阵快速幂，通项公式。其中记忆化
搜索可以写3种方法，自底向上的，自顶向下的，优化空间复杂度版的。通项公式方法实质是求
a^b这个还可以用快速幂优化时间复杂度到O（logn）。
代码
package leetcode
import “math"
//解法一递归法时间复杂度0（2An），空间复杂度0（n）
func fib(N int) int {
if N *maxHeight && root.Left == nil && root.Right == nil {
*maxHeight = CurHeight
*res = root.val
if root.Left != nil {
findBottomLeftvalueDFS(root.Left, curHeight+l, res, maxHeight)
if root.Right != nil {
findBottomLeftvalueDFS(root.Right, curHeight+l, res, maxHeight)
//解法二BFS
func findBottomLeftvaluel(root *TreeNode) int {
{oou}aponaauls[] =: ananb
for len(queue)>0{
next := []*TreeNode{}
for _, node := range queue {
---
## Page 589
if node.Left != nil {
next = append(next, node.Left)
if node.Right != nil {
next = append(next, node.Right)
if len(next) == 0 {
return queue [o] .va]
queue = next
return 0
515.FindLargestValueinEachTreeRow
题目
You need to find the largest value in each row of a binary tree.
Example:
Input:
1
/
3
/
五
6
output: [1, 3, 9]
题目大意
求在二叉树的每一行中找到最大的值。
解题思路
·给出一个二叉树，要求依次输出每行的最大值
·用BFS层序遍历，将每层排序取出最大值。改进的做法是遍历中不断更新每层的最大值。
代码
---
## Page 590
package leetcode
import（
"math"
"sort"
* Definition for a binary tree node.
type TreeNode struct {
Val int
Left *TreeNode
Right *TreeNode
//解法一层序遍历二叉树，再将每层排序取出最大值
func largestvalues(root *TreeNode)[]int {
tmp := levelorder(root)
res = []int{}
for i:= 0; i  0 {
qlen := 1en(q)
max := math.MinInt32
for i:= 0;i max {
max = node.Va1
if node.Left != nil{
q = append(q, node.Left)
if node.Right != nil {
q = append(q, node.Right)
---
## Page 591
res = append(res, max)
return res
524.LongestWordinDictionarythroughDeleting
题目
Given a string and a string dictionary, find the longest string in the dlictionary that can be formed
ssa asso ao u ao ae aan f s a a jo sa aos aap 
return the longest word with the smallest lexicographical order. If there is no possible result,
return the empty string
Example 1:
Input:
S = "abpcplea", d = ["ale","apple","monkey","plea"]
Output:
"apple"
Example 2:
Input:
S = "abpcplea", d = ["a","b","c"]
Output:
"a"
Note:
● All the strings in the input will only contain lower-case letters.
● The size of the dictionary won't exceed 1,000.
●The length of all the strings in the input won't exceed 1,000.
题目大意
给出一个初始串，再给定一个字符串数组，要求在字符串数组中找到能在初始串中通过删除字符得到的
最长的串，如果最长的串有多组解，要求输出字典序最小的那组解。
解题思路
---
## Page 592
这道题就单纯的用O（n^2）暴力环即可，注意最终解的要求，如果都是最长的串，要求输出字典序最
小的那个串，只要利用字符串比较得到字典序最小的串即可。
代码
package leetcode
func findLongestword(s string, d []string) string {
res := "u
for i := 0; i d[i])){
res = d[i]
3
return res
526.BeautifulArrangement
题目
s jeqa Aeue ue se juawaueue jngnneaq e auyap am N ol L wouj suaaul n aney nof asoddns
constructed by these N numbers successfully if one of the following is true for the ith position (1
<= i <= N) in this array:
1. The number at the i position is divisible by i.th
2. 1 is divisible by the number at the i position.th
Now given N, how many beautiful arrangements can you construct?
Example 1:
Input: 2
Output: 2
Explanation:
---
## Page 593
The first beautiful arrangement is [1, 2]:
Number at the lst position (i=l) is 1, and 1 is divisible by i (i=1) 
Number at the 2nd position (i=2) is 2, and 2 is divisib1e by i (i=2).
The second beautiful arrangement is [2, 1]:
Number at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).
Number at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.
Note:
1. N is a positive integer and will not exceed 15.
题目大意
假设有从1到N的N个整数，如果从这N个数字中成功构造出一个数组，使得数组的第i位（1<=1<=
N）满足如下两个条件中的一个，我们就称这个数组为一个优美的排列。条件：
·第I位的数字能被1整除
·能被第I位上的数字整除
现在给定一个整数N，请问可以构造多少个优美的排列？
解题思路
·这一题是第46题的加强版。由于这一题给出的数组里面的数字都是不重复的，所以可以当做第46
题来做。
·这题比第46题多的一个条件是，要求数字可以被它对应的下标+1整除，或者下标+1可以整除
下标对应的这个数字。在DFS回溯过程中加入这个剪枝条件就可以了。
·当前做法时间复杂度不是最优的，大概只有33.3%
代码
package leetcode
//解法一暴力打表法
func countArrangementl(N int) int {
res := []int{0, 1, 2, 3, 8, 10, 36, 41, 132, 250, 700, 750, 4010, 4237,
10680, 24679, 87328, 90478, 435812}
return res[n]
//解法二DFS回渊
func countArrangement(N int) int {
---
## Page 594
if N == 0 {
return 0
nums, used, p, res := make([]int, N), make([]bool, N), []int{}, [][]int{}
for i := range nums {
nums[i] = 1 + 1
generatePermutation526(nums, 0, p,&res,&used)
return len(res)
func generatePermutation526(nums []int, index int, p []int, res *[][]int, used
*[]bool){
if index ==
1en(nums){
temp := make([]int, 1en(p))
copy(temp, p)
res = append(*res, temp)
return
for i:=0;i<1en（nums);i++{
if !(*used)[i]{
if !(checkDivisible(nums [i],1en(p)+1) 11 checkDivisible(len(p)+1,
nums[i]））{//关键的剪枝条件
continue
(*used) [i] = true
append(p, nums[i])
generatePermutation526(nums, index+l，p, res, used)
p = p[:1en(p)-1]
(*used) [i] = false
return
}
func checkDivisible(num,d int) bool {
tmp := num / d
if int(tmp)*int(d) == num {
return true
return false
528.RandomPickwithWeight
题目
---