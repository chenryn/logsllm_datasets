be identiﬁed as the source of new commands, one can try
to isolate these nodes by eliminating all edges with other
peers. To invalidate an edge, it can be deleted or replaced
by applying the peer list destruction method. The concrete
list of edges to eliminate depends on whether the protocol
is push or pull-based: If commands are to be pushed from
a peer v to its neighbors, one would execute R(v). If
commands are to be pulled from a peer v, one would execute
R(u) ∀u : (u, v) ∈ E. Note that in the latter case the edges
(u, v) are not easily determined, and that the attack may
require preceding reconnaissance steps.
Let R∗ denote a series of consecutive peer list destruction
operations. We deﬁne partitioning as a transformation R∗ :
˙∪ V (cid:2)(cid:2), E) such that (u, v) ∈ E : u ∈ V (cid:2) ⇒
G → G(cid:2) = (V (cid:2)
v /∈ V (cid:2)(cid:2) ∧ u ∈ V (cid:2)(cid:2) ⇒ v /∈ V (cid:2). In other words, the set of
peers is split into two disconnected subgraphs by removing
all edges between them.
In the most extreme scenario, each peer represents its
own partition, which makes propagation of information com-
pletely impossible. That is, the set of edges to routable peers
in the P2P graph is empty: ∀u ∈ V, v ∈ Vr : (u, v) /∈ E.
This is generally hard to achieve, as the foremost goal of
most P2P protocols is to keep a peer’s connectivity up.
Note that partitioning requires knowledge about the graph
topology, i.e., the edges to eliminate. Such knowledge can be
obtained by crawling, for example. However, the more edges
are eliminated, the harder it becomes to crawl the network.
Injecting a sensor node can help alleviate this problem.
A more general destructive transformation does not nec-
essarily create partitions, but
it decreases the popularity
of nodes by deleting certain edges from the P2P graph,
resulting in a reduced in-degree for a peer. The respective
notation for this kind of attack is R∗ : G → G(cid:2) =
(V, E (cid:2)), ∃v ∈ V : deg−
(v). Note that a reduced
in-degree of v implies a reduced out-degree of some u ∈ V
with (u, v) ∈ E, and vice versa. The more peers are attacked
in this manner, the more sparse the resulting graph becomes,
which potentially slows down information propagation. At-
tacks against “hot spots“ (very popular nodes) can have a
signiﬁcant effect on the time required to propagate data.
G(cid:2) (v) < deg−
G
102
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:41 UTC from IEEE Xplore.  Restrictions apply. 
2) Sinkholing: Another disruptive attack against a P2P
botnet infrastructure is called sinkholing. In this attack, all
edges are either invalidated or replaced with edges point-
ing to special nodes called sinkholes. A sinkholing attack
effectively transforms the infrastructure into a centralized
network, with the set of sinkholes S := {s1, s2, . . . , sn}
being the central component for all P2P communication.
The attack can be described as a transformation T : G → G(cid:2)
where T := I ∗ ◦ R∗ consists of peer injections and peer list
destructions. The goal is to reach a state where every live
peer knows at least one sinkhole but no other routable peer:
˙∪ Vn ∃s ∈ S : (v, s) ∈ Ev ∧ (v, u (cid:17)= s) ∈ Ev ⇒
∀v ∈ Vr
u /∈ Vr.
A sinkholing attack is usually combined with a strategy to
announce the sinkholes’ existence in the botnet. Sometimes,
this part is performed by the sinkhole itself, since it has
comprehensive knowledge about other peers: Due to its
popularity, lots of peers contact the sinkhole on a regular
basis. If the sinkhole also performs graph searches (i.e., it
requests peer lists from connecting peers), it can reconstruct
parts of the botnet infrastructure and use this information
to announce itself. Other options are to utilize crawling, or
special injected peers that announce the sinkholes.
The sinkhole peers do not necessarily have to exist;
sometimes, they merely act as a “black hole” that absorbs
all incoming trafﬁc. However, depending on a speciﬁc P2P
botnet’s program logic, sinkholes may have to implement a
subset of the protocol to retain their popularity. For example,
a sinkhole may have to exchange actual P2P messages to
remain in the local peer list of a bot.
3) Communication Layer Poisoning: The term poisoning
describes a class of attacks where specially crafted infor-
mation is injected into a botnet. This requires access to the
P2P infrastructure, which can be achieved by peer injection.
The range of poisoning attacks is huge: Depending on a
botnet’s command protocol one could distribute commands
to other bots or transmit invalid messages that put recipients
in a non-functional state. Botnets can be attacked both on
the infrastructure and on the communication layers. Well-
known examples are the Sybil Attack, where an attacker
introduces a peer with multiple identities, and the Eclipse
Attack, in which peers are strategically placed in the botnet
graph such that certain communication has to pass through
them on the route to their destination [26]. Since the concrete
implementation of poisoning attacks depends heavily on the
C&C protocol used, they cannot easily be captured in our
infrastructure-focused model without losing simplicity and
generality. We will provide examples of poisoning attacks
against speciﬁc botnets in Section VI-A.
V. P2P BOTNET INTELLIGENCE GATHERING
A P2P botnet
gather intelligence about
researchers may attempt
topology offers unique possibilities to
the bots. For example, botnet
to estimate the population size
of a P2P botnet by enumerating infected hosts. Lists of
enumerated bot addresses can be used by CERTs and
ISPs to inform infected customers, or by banks to identify
fraudulent transactions. Furthermore, it is usually possible to
collect additional information, such as the operating system
version of infected systems, current C&C commands, or
hints about the geographical location of bots. In this section,
we experimentally evaluate and compare the reconnaissance
techniques described in Section IV, namely crawling and the
injection of sensor nodes, by applying them to the botnets
from Section II.
A. Resilience Against Peer Enumeration
We performed an initial analysis of how botnets are
protected against peer enumeration by reverse engineering
the communication protocols of six active botnet variants
(Figure 1). Table II summarizes our analyses of the different
peer list management strategies, augmented with data from
technical reports [2, 30, 7, 3, 21]. A vital aspect for peer
enumeration is the ability to uniquely identify peers. Our
comparison shows that not all botnet protocols use unique
peer identiﬁers. The lack of unique IDs can skew enumer-
ation results considerably. If a bot changes its IP address
during a crawl, the number of counted bots will be too high.
Similarly, if multiple bots share an Internet-facing IP ad-
dress, e.g., because they are behind a common NAT gateway,
the number of infections is underestimated. Storm, Waledac,
Zeus and Kelihos implement unique identiﬁers which we can
use to distinguish between bots. The Miner botnet does not
have any notion of peer IDs, while ZeroAccess, Nugache
and Sality do not typically exchange IDs.
Botnet
IDs
Vn
#
Preference
Period
Kelihos v1
Kelihos v2
Kelihos v3
Miner
Nugache
Sality v3
Sality v4
Storm
Waledac
ZA v1
ZA v2
Zeus
16 bytes
16 bytes
16 bytes
none
(not shared)
(not shared)
(not shared)
16 bytes
20 bytes
(not shared)
(not shared)
20 bytes
(cid:2)
(cid:2)
(cid:2)
(cid:2)
250 more recent
250 more recent
250 more recent
all
n/a
100 more recent
1
1
10
random
random
small distance
100 more recent
n/a
all
16 more recent
10
small distance
10m
10m
10m
30m
random
40m
40m
10m
30s
15m
256s
30m
Table II: P2P botnet properties relevant for crawling. IDs shows if
bots have unique identiﬁers. Vn indicates if non-routable peers are
included in peer lists. # shows the maximum number of peers that
can be exchanged at once. Preference describes how new peers are
included in a peer list. Period is the period between communication
rounds of peers with their neighbors.
In general, the set of peers V C learned through crawling
is limited to routable peers and their neighbors: V C ⊆
{(u, v)} : u ∈ Vr. Most botnets listed in Table II limit peer
list entries even further to only routable peers, with three
exceptions. Storm activated port forwarding using UPnP to
tunnel through NAT gateways. The two ZeroAccess variants
103
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:41 UTC from IEEE Xplore.  Restrictions apply. 
do not ﬁlter peer list entries in any way, and thus have no
restrictions on what entries they store.
The number of peers shared with other peers (as opposed
to the number stored in the local peer list Ev) also inﬂuences
peer enumeration. Only Miner and ZeroAccess v1 share their
complete list Ev; all others select a subset of it.
The peer selection strategy inﬂuences enumeration results
as well. Table II shows how many and which peers are
shared by the various botnets. The Sality variants choose
peers from their list Ev at random, whereas Storm and Zeus
compute XOR distances to a target ID (contained in the
peer list request) and share peers close to the target. The
remaining botnets share a subset of their Ev that contains
peers which have recently been veriﬁed to be alive.
Lastly, we look at the frequency with which peers contact
their neighbors. This frequency is especially important for
sensor nodes, as they rely on communication established by
other peers. The shorter the period shown in Table II, the
more timely the intelligence gathered at a sensor. Waledac
has an extremely short period of 30 seconds; Sality contacts
its neighbors every 40 minutes. Nugache implements a
random timeout of up to 4.5 hours between rounds of
communication.
B. Peer Enumeration: Real-World Observations
To evaluate how the peer enumeration methods (Sec-
tion IV-B) perform in practice, we implemented crawling
and sensor injection attacks for all four active P2P bot-
net families. In total, we enumerated eleven botnets that
were active in November 2012. We chose a measurement
period of 24 hours to account for diurnal patterns and
to limit
the effects of IP churn. Due to the nature of
connectionless protocols, UDP-based botnets can generally
be crawled faster, resulting in greater coverage. Similarly,
peer injection is more efﬁcient for UDP. Thus, we deployed
sensor nodes only in the seven UDP-based botnets, where
protocol limitations have less impact on the comparability
of the results. A comparison of the two methods for TCP-
based botnets (Kelihos v3 and ZeroAccess v1) is work
in progress. We injected our sensor nodes three weeks
before the measurements so that they had sufﬁcient time
to become popular in each botnet. We monitored the daily
number of peers contacting our sensors to verify that the
popularity of our sensors had stabilized before performing
our measurements.
Table III details the enumeration results for a typical
weekday in November 2012 from 00:00 GMT on. All
values are based on the number of unique IP addresses
that were logged during the respective time period. While
using bot IDs would be more accurate, we chose to use
IP addresses in this comparison, as most botnets do not
share peer IDs. The Botnet column names the enumerated
botnets, augmented with the bot version number and the
ﬁxed UDP/TCP port the botnet binds to, where applicable.
The Crawling section of the table represents our crawling
results, and the Sensor section displays the results for our
sensor injection experiments. In the crawling results, we
distinguish between peers that responded to peer list requests
(V C
r ) and all peers found during crawling (V C ). The column
r |/|V C| contains the ratio of routable peers. This value
|V C
varies between 13% (Kelihos) and 40% (Sality) and depends
on the protocol properties in Table II, as discussed above.
The number |V S| in the Sensor column is the number of
peers that connected to our sensor during the 24 hour period.
The section Overlap shows the number of peers that were
identiﬁed by both methods. The numbers in parentheses
display the percentage of peers found by the crawler that
were also logged by the sensor. Finally, the Sensor Gain
Factor is the ratio of the number of peers found by the sensor
divided by the number of peers found through crawling.
The results show that crawling is less complete compared
to sensor based enumeration in all P2P botnets we have
evaluated. In particular, the Sality crawlers identiﬁed less
than 3% of the IP addresses that our sensor found, and got
responses from less than 1%. This means that crawls on
the Sality network underestimate the population by a factor
of 110.6 (version 3), and 113.3 (version 4), respectively.
A similar effect can be observed for other botnets that
rarely propagate peers v /∈ Vr, such as Zeus. If, on the
other hand, a botnet allows for such entries in its peer lists,
as ZeroAccess does, the divergence between crawling and
sensor based enumeration is reduced. This shows that one
has to be careful when extrapolating the size of the total
botnet population from crawling results.
Table III shows that the sensors identiﬁed 87.1–98.5%
of the peers veriﬁed by the crawlers (V C
r ). Only in the
case of ZeroAccess does the sensor show less than 80%
completeness compared to the crawl of all peers (V C ),
presumably because of the signiﬁcant fraction of invalid IP
addresses obtained by the crawler. Our sensors enumerated
more than a million infections per day (unique IP addresses)
for ZeroAccess and Sality. Another interesting detail that can
be seen from the enumeration results is the distribution of
CPU architectures for ZeroAccess v2: 37% of the bots run
on 64 bit (ports 16465 and 16470), and 63% on 32 bit (ports
16464 and 16471). Despite biases caused by IP address
churn, we believe that our combination of crawling and
sensor injection results provides reasonable lower bounds
for the sizes of the botnets.
Depending on the protocol, a sensor may have the op-
portunity to perform additional validity checks for peers in
Vn. By sending packets to the sensor, a peer behind a NAT
establishes a punchhole which the sensor can use to send
requests to the peer to check if it responds in a protocol-
conformant way. Whether this is possible depends on the
transport layer protocol and the message dialogue used for
P2P communication. For example, if the botnet uses one
TCP session per message, NAT traversal is not possible.
104
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:41 UTC from IEEE Xplore.  Restrictions apply. 
Botnet
Sality v3
Sality v4
ZAv2 16464
ZAv2 16465
ZAv2 16470
ZAv2 16471
Zeus
Kelihos v3
ZAv1 22292
ZAv1 25700
ZAv1 34354
|V C |
22,351
2113
346,069
186,290
271,534
350,436
63,976
15,017
7854
4701
35,046