通字符事形式提供的正则表达式，这些字符串文字类似“From：（.*）”。对大多数程序员，
---
## Page 128
102
第3章：正则表达式的特性和流派概览
尤其新入行的程序员来说，有一点难以理解：在构造作为正则表达式的字符串时，他们还
需要留意编程语言定义的字符串元字符。
每种语言的字符串文字都规定了自己的元字符，有些语言甚至包含了多种字符串文字，所
以不存在普适性的规则，不过背后的概念是一样的。许多语言的字符串文字能够识别转义
序列，例如\t、\\和\x2A，在生成字符串对应的数据时，会正确地解释这些记号。与正则
表达式相关的最常见的一点就是，在字符串文字中，必须使用两个紧挨在一起的反斜线才
能表示正则表达式中的反斜线。例如，为了表示正则表达式中的n，必须在字符串中使用
-\in"。
如果忘了添加反斜线，而只是使用"\n"，在大多数语言中，结果回恰好等于n（译注2）。
不过，事实上，如果正则表达式是宽松排列格式的/x类型，被解释为空，\n仍然留在
正则表达式中，匹配一个空行。忘记这一点的程序员真该打。下面的表3-4列出了一些包括
\t和\x2A（2A是‘*’符号的ASCII编码）的例子。表格中的第二对例子展示了忽略字符
串文字元字符会导致的意外结果。
表3-4：关于字符串文字的若干例子
"11t11x2A"
字符串的值“[*]”
[\t\x2A]
国
\t\x2A
作为正则表达式[*]
[\t\x2A]*
t\x2Aj
能够匹配
星号或制表符星号或制表符任意数目的制表符制表符和之后的星号
在/x模式下
星号或制表符星号或制表符错误
制表符和之后的星号
语言不同，字符串文字也不相同，不过有的差异大到连‘\’都不算元字符。例如，VB.NET
的字符串文字只有一个元字符，就是双引号。下一节介绍了几种常用语言的字符串文字。
无论规定如何，我们在使用时都不要忘记考虑“在编程语言的字符串处理结束之后，正则
引擎接收到的是什么？”
Java的字符串
Java的字符串跟上面提到的很类似，它们由双引号标注，反斜线是元字符。支持常见的字
符组合，例如‘\t’（制表符）、‘\n’（换行符）、“\\’（反斜线本身）。字符串中出现未获
支持的反斜线转义序列会出错。
译注2：此时"\n"是在字符串中识别的，而不是由正则引擎识别。
---
## Page 129
字符串，字符编码和匹配模式
103
VB.NET的字符串
VB.NET中的字符串同样是由双引号标注的，不过它们与Java的字符串有很大差别。VB.NET
的字符串只能识别一个元字符：两个连续的双引号，代表字符串中的双引l号。例如"hesaid
C#的字符串
尽管微软的.NETFramework中所有语言在内部共享同一台正则引擎，但创建正则表达式时
它们有各自的规定。我们刚刚看到，VisualBasic的字符串文字非常简单。与之不同，C#语
言有两种类型的字符串文字。
C#支持与导论中类似的常见的双引号字符串，只是用"而不是\”来表示双引号。不过，
））
双引号。也就是说，你可以使用"\\t\\x2A*或者e"\t\x2A"来生成t\x2A。因为这种方
式很简单，一般都用@"."的原生字符串来表示正则表达式。
PHP的字符串
PHP也提供了两种类型的字符串，不过无一与C#中的相同。在PHP的双引号字符串中可以
使用常见的反斜线序列-一例如‘\n'，但也可以像Perl那样进行变量插值（77），还可
以使用特殊的序列（)，把执行花括号内代码的执行结果插人字符串。
PHP的双引号字符串的独特性在于，你可能倾向于在正则表达式中加人多余的反斜线，不
过PHP的另一种特性能够缓解这种现象。对Java和C#的字符串文字来说，字符串中如果
出现不能明确识别为特殊字符的反斜线序列会导致错误，而在PHP的双引号字符串中，这
种序列会原封不动地从字符串中传过来。PHP的字符串能够识别\t，所以你需要用“\t”
来表示\t，不过如果使用“\w”，我们仍然得到w，因为\w不属于PHP的字符串能够识
别的转义序列。这个额外的特性，虽然有时候很顺手，也增加了PHP双引号字符事的复杂
程度，所以PHP提供了更加简单的单引号字符串。
tered）”字符串，不过稍有不同。在PHP的单引号字符串中，\·表示单引号，\\表示反斜
译注3：verbatim表示“原封不动的、一宇不差的”，故此处翻译为“原生”。
---
## Page 130
104
第3章：正则表达式的特性和流派概览
线。任何其他字符（包括任何反斜线）都不会被识别为特殊字符，而会被当作字符的值。
也就是说，\t\x2A·创建\t\x2A。因为单引I号字符串很简单，用它来表示PHP的正则表
达式非常方便。
（）0
Python的字符串
Python提供了好几种字符串文字。单引I号和双引号都可以用来创建字符串，不过与PHP不
同的是，这两种方法没有区别。Python也提供了“三重引用（triple-quoted)”的字符串，也
就是·..·或者""""""，它们可以包含未转义的换行符。这4种类型都支持常用的反
斜线序列，例如\n，不过和PHP一样，它们也会把不能识别的反斜线序列作为纯字符序列
来对待。而在Java和C#中，这些序列会被出错。
与PHP和C#一样，Python也提供了另一种字符串文字，也就是“原字符串（raw string）”。
它类似C#中的@"…"，Python在以上4种表示法前添加'r'来表示纯字符串。例如，
r"\t\x2A"表示\t\x2A。与其他语言不同的是，在Python的原字符串中，所有的反斜线
都会保留，即使是用来转义双引号的（所以双引号可以保存在字符串中）也是如此：r"he
said\"hi\"\."表示hesaid\"hi\"\.在使用正则表达式时，这并不是一个真正的问
题，因为Python的正则表达式流派把·识别为‘，不过如果你喜欢，你可以忽略这些细
节，使用这4种纯字符串中的任意一种：r'hesaid"hi"\.'。
Tcl中的字符串
Tcl与其他语言都不一样，因为它没有真正的字符串变量。相反，命令行被分解成“单词”，
Tcl的命令把这些单词作为字符串、变量名和正则表达式，或者其他适合的类型。因为命令
行被分解成单词，常见的反斜线序列，例如\n，能够识别和转换，而无法识别的反斜线序
列则被忽略。如果愿意，你可以在单词两端添加双引号，不过这并不是必须的，除非中间
存在空格。
Tcl同样也有和类似Python的纯字符串类似的原字符串类型，不过Tcl使用花括号（），而
不是r"…。在花括号之间，除\n之外的所有内容都会原封不动地保存下来，所以（\t\x2A)
表示t\x2Al。
在花括号之内，你可以按自已的意愿添加多组括号。非嵌套的括号必须用反斜线转义，不
过反斜线会保留在字符串之中。
---
## Page 131
字符串，字符编码和匹配模式
105
Perl的正则表达式文字
至今为止，我们曾看到过的Perl的例子中，正则表达式都是以文字方式提供的（“正则表达
式文字（regularexpressionliterals）”）。不过，我们也可以用字符串变量提交正则表达式，例
如：
$str =~m/(\w+)/;
也可以这样：
$regex =*(\w+)';
或者是这样
Sregex = "(\\w+)";
$str *~$regex;
（不过，使用字符串可能会大大降低效率，242，348）。
对于以文字方式提交的正则表达式，Perl会提供一些额外的特性，包括：
·
变量插值（把变量的值写入正则表达式）。
·
通过Q\E（113）支持文字文本。
能够（optional）支持\N(name)结构，这样就能通过正式的Unicode名来指定字符。例
在Perl中，正则表达式文字会作为特殊的字符申进行解析。实际上，这些特性在Perl双引
号字符串中也有提供。必须说明的一点是，这些特性不是由正则引擎提供的。因为Perl中
使用的绝大多数正则表达式都是作为正则表达式文本的，许多人认为Q\E属于Per的
正则表达式语言，不过如果你用正则表达式从一个配置文件（或者命令行）读人数据，知
道哪些特性是由语言的哪些部分提供的就很重要了。
更多细节，请参考第7章第288页。
字符编码
Character-Encoding Issues
字符编码是一种写明的共识，它规定不同数值的字节应该如何解释。在ASCII编码中，值
为十进制110的字节代表字符‘n'，不过在EBCDIC编码中代表‘>'。为什么会这样？因
为这是由不同的人规定的，没有明确的标准判断各种编码的优劣。字节的值是一样的，不
一样的是解释。
---
## Page 132
106
第3章：正则表达式的特性和流派概览
ASCII只定义了单个字节能够代表的所有数值的一半，ISO-8859-1编码（通常称为“Latin-1
编码”）填补了下面的空间，其中增加了读音字符（accentedcharacter）和特殊符号，因而
能够被更多的语言所使用。对这种编码来说，值为十进制数234的字节被解释为é，而在
ASCII中没有定义。
对我们来说，重要的问题在于：如果我们期望使用某种特定编码的数据，程序是否会这样
做？例如，如果我们使用Latin-1编码中值分别为234、116、101和115的4个字节（表示
法语单词“etes"），我们期望使用正则表达式\w+S或者\b来匹配。如果程序中的\w
或者\b能够支持Latin-1字符，就可以正常工作，否则不行。
编码的支持程度
编码有许多种，当你需要关注一种具体的编码时，你需要考虑的重要问题包括：
·程序能够识别这种编码吗？
·程序如何决定采用哪种编码来处理这些数据？
正则表达式对这种编码的支持程度如何？
编码的支持程度包括若干重要的问题：
·是否能够支持多字节字符？点号和[^x]之类的表达式是匹配单个字符，还是单个字
节？
.
\w、\d、\s、\b之类的元字符，是否能识别编码中的所有字符？例如，虽然é也是一
个字符，\w和\b能处理吗？
·程序是否会扩展对字符组的解释？[a-z]能否匹配é？
不区分大小写的匹配是否能对所有字符有效？例如，é和E是否一样？
有时候事情不像看起来那么简单。例如，java.util.regex包的\b能够正确识别Unicode
中所有与单词相关的字符，\w则不能（它只能匹配ASCII中的字符）。我们会在本章的其
他部分看到更多的例子。
Unicode
Ulnicode
Unicode究竟是什么，似乎存在许多误解。从最基本的意义上说，Unicode是一组字符设定，
或者是从数字和字符之间的逻辑映射的概念编码。例如，韩语字符针对应数字49.333。这
个数值，称为一个“代码点（codepoint）”，通常用十六进制来表示，以“U+”开头。49.333
---
## Page 133
字符串，字符编码和匹配模式
107
换算成十六进制是COB5，所以针的代码就是U+C0B5。针对许多字符，Unicode还定义了一
组属性，例如3是一个数字，而E是与é对应的大写字母。
自前，我们还没有谈到这些数值在计算机上是如何编码为数据的。这样的编码方式有许多，
包括UCS-2编码（所有的字符都占用两个字节），UCS-4编码（所有字符占用4个字节），
UTF-16（大部分字符都占用两个字节，有一些字符占用4个字节），以及UTF-8编码（用1
到6个字节来编码字符）。具体的程序内部到底使用哪种编码通常不需要用户来关心。用户
只需要关心如何将外部数据（例如从文件读入的数据）从已知的编码（ASCII、Latin-1、UTF-8
等）转换给具体的程序。支持Unicode的程序通常提供了多种编码和解码程序来进行这些转
换。
支持Unicode的程序中的正则表达式通常支持\unum元序列，用来匹配一个具体的Unicode
字符（117)。这个数值通常是一个4位的十六进制数，所以\uC0B5表示针。一定要弄清
哪些字节，因为具体的学节是由代表这个Unicode代码点的编码方式在内部决定的。如果程
序内部使用的是UTF-8编码，这个字符就用3个字节表示。不过使用支持Unicode程序的
用户，并不需要关心这个（也有时候需要，例如使用PHP的preg套件和模式修饰符u447）。
还有-一些你或许需要知道的相关知识.·
学符，还是组合字符序列
））
则引擎）看作一个字符。例如，有人或许认为a是一个字符，但是在Unicode中，它可能
由两个代码点构成，U+0061（a）和钝重音（graveaccent）U+0300（'）。Unicode提供了许多
组合字符（combiningcharacter），用来修饰（结合）一个基本字符。这会给正则引擎带来些
麻烦，例如，点号是应该匹配单个代码点呢，还是整个U+0061和U+0300？
酱
---
## Page 134
108
第3章：正则表达式的特性和流派概览
个的代码点，无论是基本字符还是组合字符。所以，a（U+0061加上U+0300）能够由～..S
匹配，而不是.$。
））
够匹配一个结合了组合字符的基本字符。详见第120页。
在支持Unicode的编辑器中输入正则表达式时，一定要记住组合字符的概念。如果一个带音
调的字符，例如A，被正则表达式当作‘A'和“'，很可能无法匹配字符串中单个代码点
表示的A（下一节讨论单代码点的情况）。同样，对正则引擎来说它是两个不同的字符，所
以"[….A]在字符组中添加了两个字符，等于（…A·…！。
同样，如果两个代码点的字符—例如A一一后面跟有一个量词，量词作用的其实是第二个
代码点，也就是'A”+1。
用多个代码点表示同一个学符
从理论上说，Unicode应该是代码点和字符之间的一一映射（译注4)，不过在许多情况下，
一个字符可能有多种表现方式。前--节中我们看到a可以表示为U+0061加上U+0300。不
过，它也可以用单个代码点U+00E0。为什么会出现这种情况？是为了保证Unicode和Latin-1
之间转换的简易性。如果我们有需要转换为Unicode的Latin-1文本，a可能被转换为U+00E0。
不过，也可以转换为U+0061和U+0300的组合。通常，这种转换是自动的，用户无法干预，
不过Sun的java.uti1.regex包提供了一种特殊的匹配符，CANON_EQ，保证能够匹配“在
规则中等价（canonicallyequivalent)”的字符，无论它们在Unicode 中使用什么存储方式
（368)。
与此相关的问题是，不同的字符可能无法从外观上区分，如果需要检查生成的文本，这会
带来混乱。例如，罗马字母1（U+0049）可能与1，也就是希腊字母1ota（U+0399）混淆。
这个字符添加希腊语冒号之后得到1或者1，编码也增加到4种（U+00CF：U+03AA；U+0049
U+0308；U+0399U+0308）。也就是说，如果需要匹配1，你可能需要手动指定这4种可能。
类似的例子还有许多。
9
译注4：即离散数学中的“双射”。
---
## Page 135
字符串，字符编码和匹配模式
109
还有许多单个字符看起来不只一个字符。例如Unicode定义了一个叫做“SQUAREHz”
(U+3390）的字符。这很像两个普通字符Hz的组合（U+0048U+007A)。
尽管Hz之类的特殊字符的用途在目前非常有限，但在将来，它们的应用肯定会增加文本处