### Tool for Detecting Insecure Code Snippets

Zhang et al. [34] analyzed potential API usage violations in code snippets, while Chen et al. [5] labeled Android code snippets as secure or insecure and examined their distributions, such as view counts and the number of duplicates. Verdi et al. [23] manually inspected C++ code snippets on Stack Overflow to detect insecure ones. However, these existing approaches have limitations. They are not efficient in terms of discovery coverage, being restricted to specific languages (e.g., Java or Android) and security-sensitive APIs. Additionally, they do not consider the semantics of the code, leading to a high number of false positives (FPs) and false negatives (FNs) [30]. Furthermore, unless the detection is automated, it is not suitable for continuously checking new posts on Stack Overflow.

### Limitations of Existing Approaches

Existing methods are limited by their language and feature restrictions. They cannot discover insecure code snippets in languages other than Java or Android, and they focus only on security-sensitive APIs. The lack of semantic analysis results in low accuracy, with many FPs and FNs. Manual inspection, as used by Verdi et al. [23], is not scalable for the continuous influx of new posts on Stack Overflow.

### Ratio of Insecure Posts

Figure 7 illustrates the ratio of insecure posts between accepted and non-accepted posts discovered by Dicos (on a logarithmic scale). The results indicate that even accepted posts can contain insecure code snippets, highlighting the need for developers to verify code snippets regardless of their acceptance status. Dicos can assist in this verification process.

### Types of Insecure Code Snippets

For 788 insecure posts with all three selected features, we manually examined the types of insecure code snippets (880 in total). This examination was based on security-related keywords, user comments, answerer descriptions, and code change history. Figure 8 presents the results.

The most common type of insecure code snippet was undefined behavior, accounting for 42% of the total. This may be due to the nature of Stack Overflow, where answerers often prioritize functionality over handling all possible exceptions. Other types of insecure code snippets included null-terminated string issues, memory leaks, and buffer overflows. Unlike previous approaches that could only detect specific types of insecure code, Dicos can identify a variety of insecure code snippets using three effective features.

### Reusing Insecure Code Snippets in Real-World Projects

To investigate the prevalence of insecure code snippets discovered by Dicos in real-world open-source software (OSS) projects, we collected the latest versions of 2,000 popular C/C++ OSS projects from GitHub. The methodology involved searching for the insecure code snippets within these projects to determine their widespread use.

### Discussion

#### Number of Used Features

Our findings suggest that considering multiple features is more accurate for discovering insecure code snippets than using a single feature. For example, when Dicos used a single feature, the precision was 25% for F1, 27% for F2, and 27% for F3. However, when multiple features were considered, the precision increased significantly (e.g., 96% for three features, see Table 5). A single-feature approach can miss insecure code snippets and misinterpret secure ones, while an approach with too many features can lead to false negatives. Dicos strikes a balance between precision and recall.

#### Practical Usage: Porting to Stack Overflow

Currently, Stack Overflow does not provide notifications or information about insecure code snippets. Dicos can help in two ways: 
1. Verify changes to posts and mark them if they address security issues.
2. Provide a database of insecure post information, enhancing the credibility of Stack Overflow and helping users avoid reusing insecure code.

#### Limitations and Future Work

While Dicos has broader discovery coverage, it still struggles with patterns not covered by the selected features. Some insecure code snippets found on Stack Overflow and in real-world OSS projects may not be triggered. We are working on triggering these insecure codes and reporting them to improve the security of the OSS ecosystem. Additionally, Dicos can be applied to other Q&A platforms like Quora, which provide post change history.

### Conclusion

Reusing code snippets from online Q&A forums like Stack Overflow can introduce security risks if developers do not fully understand the implications. Dicos, by examining the change history of Stack Overflow posts, accurately discovers insecure code snippets. We confirmed that Dicos successfully identified 14,719 insecure code snippets from 1,958,283 Stack Overflow posts with 91% precision and 93% recall. By addressing these insecure code snippets, the credibility of Stack Overflow can be improved, creating a safer code reuse environment. The source code of Dicos is available at https://github.com/hyunji-hong/DICOS-public.

### Acknowledgments

We thank the anonymous reviewers, our shepherd, and the program chairs for their valuable feedback. This work was supported by the Institute of Information & Communications Technology Planning & Evaluation (IITP) grant funded by the Korea government (MSIT).

### References

[References listed as provided in the original text]

### Appendix

#### Security-Sensitive APIs

Tables 7 and 8 list the security-sensitive APIs utilized by Dicos, selected based on existing approaches [5, 7, 34] and the CWE-676 document [17].

**Table 7: Security-sensitive APIs for C/C++ posts.**

| C/C++ Security-Sensitive APIs |
|-------------------------------|
| strcpy, strncpy, strcat, strncat, system, memcpy, memset, malloc, gets, vfork, realloc, pthread_mutex_lock, free, chroot, strlen, vsprintf, sprintf, scanf, fscanf, sscanf, vscanf, vsscanf, vfscanf, snprintf, atoi, strtok, strcmp, strncmp, strcasecmp, strncasecmp, memcmp, signal, va_arg |

**Table 8: Security-sensitive APIs for Android posts.**

| Android Security-Sensitive APIs |
|---------------------------------|
| hostnameverifier, trustmanager, sslcontext, cipher, webview, setseed, messagedigest, secretkey, keystore, pbekeyspec, nextbytes, signature, keyfactory, connectionspec, sslsocketfactory, ivparameterspec |

#### Security-Related Keywords

Table 9 lists the selected security-related keywords, categorized as nouns, modifiers, and verbs, chosen by referring to existing approaches [7, 9] and analyzing commit messages of known CVE patches.

**Table 9: Selected security-related keywords.**

| Category | Security-Related Keywords |
|----------|---------------------------|
| Nouns    | vulnerab, fault, defect, sanit, mistake, flaw, bug, infinite, loop, secur, overflow, error, remote, mitigat, realloc, heap, privilege, underflow, attack, DoS, denial-of-service, initiali, xss, leak, patch, authori, corruption, crash, memory, null, injection, out-of-bounds, use-after-free, dereferenc, buffer, hack, segment, authentication, exploit |
| Modifiers | incorrect, vulnerab, harm, undefine, unpredict, unsafe, secur, malicious, dangerous, critical, bad, unprivileged, negative, stable, invalid |
| Verbs    | flaw, hack, fix, change, modify, exploit, mitigat, leak, realloc, invoke, inject, ensure, reject, initiali, fail, authori, update, attack, trigger, lock, corrupt, crash, prevent, avoid, access, cause, overflow, terminat |