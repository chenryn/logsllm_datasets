tool for detecting insecure posts based on the utilized APIs, methods,
and social coding properties of each post. Zhang et al. [34] analyzed
potential API usage violations in the code snippets. Chen et al. [5]
labeled Android code snippets as secure or insecure, and analyzed
their distributions, such as their view counts or the number of
duplicates. Finally, Verdi et al. [23] detected C++ insecure code
snippets in Stack Overflow based on manual inspection.
However, existing approaches are not efficient in discovering
insecure code snippets in terms of discovery coverage. They cannot
discover insecure code snippets other than Java or Android (i.e.,
language-restricted) and that are not related to security-sensitive
APIs (i.e., feature-restricted). In addition, because they do not con-
sider the semantics of the code, their results have many FPs and FNs
(i.e., low accuracy) [30]. Furthermore, unless insecure code snippets
are discovered in an automated manner, an approach is not suitable
for checking for Stack Overflow posts that are constantly being
added.
7Since we have not received confirmation from most vendors, we omit the detailed
OSS list with insecure code snippets.
Figure 7: Ratio of insecure posts between accepted and non-
accepted posts discovered by Dicos (logarithmic scale).
the code snippet did not need to be considered in the process of
accepting an answer post by the questioner. The results affirmed
that developers need to verify a code snippet even from an accepted
post whether it contains a insecure code snippet; Dicos can help
this verification process.
6.3 Types of insecure code snippets
For 788 insecure posts with all three selected features, we manually
examined the types of insecure code snippets (i.e., 880 code snip-
pets). This task was mainly conducted on the discovered security-
related keywords, and additionally, we referred to user comments,
descriptions of the answerer, and the code change history. Figure 8
illustrates the examined results.
Figure 8: Types of discovered insecure code snippets.
The most prevalent type of insecure code snippets was undefined
behavior, accounting for 42% of the total; the representative exam-
ple was introduced in subsection 2.2. Perhaps, given the nature of
Stack Overflow to answer specific questions, answerers focus more
on the functional aspects of their code snippets, not consider all
possible exceptions. For this reason, we determined that undefined
behavior accounted for the highest proportion. In addition, various
types of insecure code snippets existed, such as null-terminated
string issues, memory leaks and buffer overflows. This result sug-
gests the following fact: unlike previous approaches that could only
discover specific types of insecure code snippets, Dicos can dis-
cover various types of insecure code snippets with the help of three
effective features.
6.4 Reusing insecure code snippets in the wild
Finally, to answer the last question (Q4), we investigated how wide-
spread the insecure code snippets discovered by Dicos are in real-
world popular open-source software (OSS) projects.
Methodology. As the searching target pool, we collected the
latest versions of 2,000 popular C/C++ OSS projects from GitHub
204ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Hyunji Hong, Seunghoon Woo, and Heejo Lee
Detecting unknown security patches. Perl et al. [18] pro-
posed VCCFinder to identify potentially vulnerable commits using
coarse-grained feature set. Their features focus on changes from
commits or repository metadata rather than changes in the source
code. Wang et al. [25] identified unknown security patches from
code commits with the finer-grained feature set (e.g., considering
61 features). Machiry et al. [15] proposed SPIDER to analyze safe
patches by considering control flow changes. Kangjie et al. [14]
proposed CRIX to detect missing-check bugs in kernels. However,
these approaches may yield false alarms owing to the ineffective fea-
ture selection. This is because, they consider only the fragmentary
characteristics of the security patch (e.g., control flow changes [15]),
are focused more on external characteristics rather than the code
itself [18], select too general and excessive features that are also
prevalent in general code patches [25], and are applicable only in
limited environment settings [14].
8 DISCUSSION
In this section, we discuss several considerations related to Dicos.
The number of used features. Part of the conclusion is that
considering multiple features is more accurate than considering a
single feature in discovering insecure code snippets. The G4 group
in subsection 5.2 is composed of 200 posts containing only one of
each feature. When Dicos used a single feature to discover an inse-
cure post, the precision was as follows: 25% for F1, 27% for F2, and
27% for F3. By contrast, when Dicos considered multiple features
to discover an insecure post, the precision was much higher than
when using a single feature (e.g., 96% for three features, see Table 5).
A single feature-based approach not only fails to discover insecure
code snippets where patch patterns other than the selected features
occur but can also lead to a misinterpretation of a secure code snip-
pet as being insecure. Conversely, the approach of selecting too
many features and determining whether the selected many features
appear simultaneously in a code snippet yields a false negative.
Therefore, we determined that the approach of Dicos maintains a
good balance in terms of discovery precision and recall.
Practical usage: porting to Stack Overflow. Currently, Stack
Overflow does not provide any notification or information about
insecure code snippets. In this situation, the information in the inse-
cure code snippet discovered by Dicos can be used in the following
two ways. First, whenever a change occurs after a post is uploaded
to Stack Overflow, the Dicos can be used to verify that the change
is intended to resolve a security issue; if the change is a security
patch, Stack Overflow can add a mark to the post such as a security
warning. Next, among registered posts, Stack Overflow can provide
the related information on insecure posts (e.g., patch information),
discovered by Dicos, in the form of a database. By providing the
insecure post information as such ways, Stack Overflow can pro-
vide more secure code snippets and increase credibility, and users
can avoid reusing insecure code snippets in their software.
Limitations and future work. First, although Dicos showed
a wider discovery coverage than previous approaches by utilizing
a combination of effective features, it is still difficult to discover
insecure code snippets that appear with patterns other than the
selected features. Second, some of the insecure code snippets we
found on Stack Overflow and real world OSS projects could be
triggered, but not all. We are attempting to trigger the discovered
insecure codes by referring to related approaches (e.g., [12]) and
websites (e.g., [22]), and will contribute to the security of the OSS
ecosystem by reporting threatening insecure codes that can be trig-
gered. Finally, our approach can be applicable to other online Q&A
fora such as Quora and MSDN forum. Since Dicos discovers inse-
cure posts by analyzing the post change history, it can be applied to
other Q&A fora that provide post change history; for example, as
Quora provides the change history via Post log, and thus, Dicos
can be applied to discover insecure posts within Quora.
9 CONCLUSION
Reusing code snippets from online Q&A fora such as Stack Over-
flow can cause security problems when developers reuse the code
snippets without fully understanding the code implications. In re-
sponse, we presented Dicos, which is an accurate approach by
examining the change history of Stack Overflow posts for discov-
ering insecure code snippets. We confirmed that Dicos success-
fully discovered 14,719 insecure code snippets from 1,958,283 Stack
Overflow posts with 91% precision and 93% recall. Equipped with
insecure code snippet discovery results from Dicos, the credibil-
ity of Stack Overflow can be improved by addressing discovered
insecure code snippets, and further, this can create a safe code snip-
pet reuse environment. The source code of Dicos is available at
https://github.com/hyunji-hong/DICOS-public.
ACKNOWLEDGMENTS
We appreciate the anonymous reviewers and our shepherd for their
valuable comments to improve the quality of the paper. We also
thank you for the dedicated help of program chairs. This work was
supported by Institute of Information & Communications Tech-
nology Planning & Evaluation (IITP) grant funded by the Korea
government (MSIT) (No.2019-0-01697 Development of Automated
Vulnerability Discovery Technologies for Blockchain Platform Se-
curity, No.2019-0-01343 Regional Strategic Industry Convergence
Security Core Talent Training Business, and No.IITP-2021-2020-0-
01819 ICT Creative Consilience program).
REFERENCES
[1] Yasemin Acar, Michael Backes, Sascha Fahl, Doowon Kim, Michelle L Mazurek,
and Christian Stransky. 2016. You Get Where You’re Looking for: The Impact of
Information Sources on Code Security. In 2016 IEEE Symposium on Security and
Privacy (SP). IEEE, 289–305.
[2] Sebastian Baltes, Lorik Dumani, Christoph Treude, and Stephan Diehl. 2018.
SOTorrent: Reconstructing and Analyzing the Evolution of Stack Overflow Posts.
In Proceedings of the 15th international conference on mining software repositories.
319–330.
[3] BetterProgramming. 2020. Why Code Snippets From Stack Overflow Can Break
Your Project. https://betterprogramming.pub/why-code-snippets-from-stack-
overflow-can-break-your-project-ced579a48ddb
[4] Aaditya Bhatia, Shaowei Wang, Muhammad Asaduzzaman, and Ahmed E Hassan.
2020. A Study of Bug Management Using the Stack Exchange Question and
Answering Platform. IEEE Transactions on Software Engineering (2020).
[5] Mengsu Chen, Felix Fischer, Na Meng, Xiaoyin Wang, and Jens Grossklags. 2019.
How Reliable is the Crowdsourced Knowledge of Security Implementation?. In
2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE). IEEE,
536–547.
[6] Ctags 2021. Universal Ctags. Ctags. https://github.com/universal-ctags/.
[7] Felix Fischer, Konstantin Böttinger, Huang Xiao, Christian Stransky, Yasemin
Acar, Michael Backes, and Sascha Fahl. 2017. Stack Overflow Considered Harm-
ful? The Impact of Copy&Paste on Android Application Security. In 2017 IEEE
205Dicos: Discovering Insecure Code Snippets from Stack Overflow Posts by Leveraging User Discussions
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
[17] MITRE. 2021. CWE-676: Use of Potentially Dangerous Function. https://cwe.
code-quality/c6328?view=msvc-160
mitre.org/data/definitions/676.html
Symposium on Security and Privacy (SP). IEEE, 121–136.
[8] Felix Fischer, Huang Xiao, Ching-Yu Kao, Yannick Stachelscheid, Benjamin John-
son, Danial Razar, Paul Fawkesley, Nat Buckley, Konstantin Böttinger, Paul
Muntean, and Jens Grossklags. 2019. Stack Overflow Considered Helpful! Deep
Learning Security Nudges Towards Stronger Cryptography. In 2019 28th USENIX
Security Symposium (Security). 339–356.
[9] Md Rakibul Islam and Minhaz F Zibran. 2021. What changes in where?: an
empirical study of bug-fixing change patterns. ACM SIGAPP Applied Computing
Review 20, 4 (2021), 18–34.
[10] Seulbae Kim and Heejo Lee. 2018. Software Systems at risk: An empirical study
of cloned vulnerabilities in practice. Computers & Security 77 (2018), 720–736.
[11] Seulbae Kim, Seunghoon Woo, Heejo Lee, and Hakjoo Oh. 2017. VUDDY: A
Scalable Approach for Vulnerable Code Clone Discovery. In 2017 IEEE Symposium
on Security and Privacy (SP). IEEE, 595–614.
[12] Seongkyeong Kwon, Seunghoon Woo, Gangmo Seong, and Heejo Lee. 2021.
OCTOPOCS: Automatic Verification of Propagated Vulnerable Code Using Re-
formed Proofs of Concept. In 2021 51st Annual IEEE/IFIP International Conference
on Dependable Systems and Networks (DSN). IEEE, 174–185.
[13] Frank Li and Vern Paxson. 2017. A Large-Scale Empirical Study of Security
Patches. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security. 2201–2215.
[14] Kangjie Lu, Aditya Pakki, and Qiushi Wu. 2019. Detecting Missing-Check Bugs
via Semantic- and Context-Aware Criticalness and Constraints Inferences. In
2019 28th USENIX Security Symposium (Security). 1769–1786.
[15] Aravind Machiry, Nilo Redini, Eric Camellini, Christopher Kruegel, and Giovanni
Vigna. 2020. SPIDER: Enabling Fast Patch Propagation in Related Software
Repositories. In 2020 IEEE Symposium on Security and Privacy (SP). IEEE, 1562–
1579.
[16] Microsoft. 2019. Microsoft Build C6328. https://docs.microsoft.com/en-us/cpp/
[18] Henning Perl, Sergej Dechand, Matthew Smith, Daniel Arp, Fabian Yamaguchi,
Konrad Rieck, Sascha Fahl, and Yasemin Acar. 2015. VCCFinder: Finding Potential
Vulnerabilities in Open-Source Projects to Assist Code Audits. In 2015 Proceedings
of the 22nd ACM SIGSAC Conference on Computer and Communications Security
(CCS). ACM, 426–437.
[19] Google Cloud Platform. 2021. Google Bigquery StackOverflow Data. https:
//cloud.google.com/bigquery/public-data.
[20] Reddit. 2018.
Docker for Windows won’t start if Razer Synapse 3 is
https://www.reddit.com/r/docker/comments/815l9n/docker_for_
running.
windows_wont_start_if_razer_synapse_3/
[21] Hitesh Sajnani, Vaibhav Saini, Jeffrey Svajlenko, Chanchal K Roy, and Cristina V
Lopes. 2016. SourcererCC: Scaling Code Clone Detection to Big Code. In 2016
IEEE/ACM 38th International Conference on Software Engineering (ICSE). 1157–
1168.
[22] Offensive Security. 2021. Exploit Database. https://www.exploit-db.com/.
[23] Morteza Verdi, Ashkan Sami, Jafar Akhondali, Foutse Khomh, Gias Uddin, and
Alireza Karami Motlagh. 2020. An Empirical Study of C++ Vulnerabilities in
Crowd-Sourced Code Examples.
IEEE Transactions on Software Engineering
(2020).
[24] Shaowei Wang, Tse-Hsun Chen, and Ahmed E Hassan. 2018. How Do Users
Revise Answers on Technical Q&A Websites? A Case Study on Stack Overflow.
IEEE Transactions on Software Engineering 46, 9 (2018), 1024–1038.
[25] Xinda Wang, Kun Sun, Archer Batcheller, and Sushil Jajodia. 2019. Detecting
"0-Day" Vulnerability: An Empirical Study of Secret Security Patch in OSS. In 49th
Annual IEEE/IFIP International Conference on Dependable Systems and Networks
(DSN). IEEE, 485–492.
[26] Wikipedia. 2021. Jaccrd index. https://en.wikipedia.org/wiki/Jaccard_index.
[27] Seunghoon Woo, Dongwook Lee, Sunghan Park, Heejo Lee, and Sven Dietrich.
2021. V0Finder: Discovering the Correct Origin of Publicly Reported Software
Vulnerabilities. In 2021 30th USENIX Security Symposium (Security). 3041–3058.
[28] Seunghoon Woo, Sunghan Park, Seulbae Kim, Heejo Lee, and Hakjoo Oh. 2021.
CENTRIS: A Precise and Scalable Approach for Identifying Modified Open-Source
Software Reuse. In 2021 IEEE/ACM 43rd International Conference on Software
Engineering (ICSE). IEEE, 860–872.
[29] Yuhao Wu, Shaowei Wang, Cor-Paul Bezemer, and Katsuro Inoue. 2019. How
do developers utilize source code from stack overflow? Empirical Software
Engineering 24, 2 (2019), 637–673.
[30] Yang Xiao, Bihuan Chen, Chendong Yu, Zhengzi Xu, Zimu Yuan, Feng Li,
Binghong Liu, Yang Liu, Wei Huo, Wei Zou, et al. 2020. MVP: Detecting Vulner-
abilities using Patch-Enhanced Vulnerability Signatures. In 2020 29th USENIX
Security Symposium (Security). 1165–1182.
[31] Fabian Yamaguchi, Nico Golde, Daniel Arp, and Konrad Rieck. 2014. Modeling and
Discovering Vulnerabilities with Code Property Graphs. In 2014 IEEE Symposium
on Security and Privacy (SP). IEEE, 590–604.
[32] Yanfang Ye, Shifu Hou, Lingwei Chen, Xin Li, Liang Zhao, Shouhuai Xu, Jiabin
Wang, and Qi Xiong. 2018.
ICSD: An Automatic System for Insecure Code
Snippet Detection in Stack Overflow over Heterogeneous Information Network.
In 2018 Proceedings of the 34th Annual Computer Security Applications Conference
(ACSAC). 542–552.
[33] Haoxiang Zhang, Shaowei Wang, Tse-Hsun Chen, and Ahmed E Hassan. 2021. Are
Comments on Stack Overflow Well Organized for Easy Retrieval by Developers?
ACM Transactions on Software Engineering and Methodology (TOSEM) 30, 2 (2021),
1–31.
[34] Tianyi Zhang, Ganesha Upadhyaya, Anastasia Reinhardt, Hridesh Rajan, and
Miryung Kim. 2018. Are Code Examples on an Online Q&A Forum Reliable?:
A Study of API Misuse on Stack Overflow. In 2018 IEEE/ACM 40th International
Conference on Software Engineering (ICSE). IEEE, 886–896.
[35] Tianyi Zhang, Di Yang, Crista Lopes, and Miryung Kim. 2019. Analyzing and Sup-
porting Adaptation of Online Code Examples. In 2019 IEEE/ACM 41st International
Conference on Software Engineering (ICSE). IEEE, 316–327.
A SECURITY-SENSITIVE API
Table 7 and Table 8 show lists of security-sensitive APIs utilized
by Dicos. The APIs were selected by referring to existing ap-
proaches [5, 7, 34] and the CWE-676 document [17].
Table 7: Security-sensitive APIs for C/C++ posts.
C/C++ security-sensitive APIs
strcpy, strncpy, strcat, strncat, system, memcpy, memset, malloc,
gets, vfork, realloc, pthread_mutex_lock, free, chroot, strlen,
vsprintf, sprintf, scanf, fscanf, sscanf, vscanf, vsscanf, vfscanf,
snprintf, atoi, strtok, strcmp, strncmp, strcasecmp,
strncasecmp, memcmp, signal, va_arg.
Table 8: Security-sensitive APIs for Android posts.
Android security-sensitive APIs
hostnameverifier, trustmanager, sslcontext, cipher, webview,
setseed, messagedigest, secretkey, keystore, pbekeyspec,
nextbytes, signature, keyfactory, connectionspec, sslsocketfactory,
ivparameterspec
B SECURITY-RELATED KEYWORD
Table 9 lists the selected security-related keywords and their catego-
rization. We selected these security-related keywords by referring
to existing approaches [7, 9] and by analyzing commit messages of
known CVE patches (see section 3).
Table 9: Selected security-related keywords categorized as
nouns, modifiers, and verbs.
Category Security-related Keywords
Nouns
vulnerab, fault, defect, sanit, mistake, flaw, bug,
infinite, loop, secur, overflow, error, remote,
mitigat, realloc, heap, privilege, underflow, attack,
DoS, denial-of-service, initiali, xss, leak, patch,
authori, corruption, crash, memory, null, injection,
out-of-bounds, use-after-free, dereferenc, buffer,
hack, segment, authentication, exploit.
Modifiers incorrect, vulnerab, harm, undefine, unpredict, unsafe,
Verbs
secur, malicious, dangerous, critical, bad, unprivileged,
negative, stable, invalid.
flaw, hack, fix, change, modify, exploit, mitigat, leak,
realloc, invoke, inject, ensure, reject, initiali, fail,
authori, update, attack, trigger, lock, corrupt, crash,
prevent, avoid, access, cause, overflow, terminat.
206