**作者：启明星辰ADLab**  
**公众号：[区块链智能合约控制流识别的大规模实验研究](https://mp.weixin.qq.com/s?__biz=MzAwNTI1NDI3MQ==&mid=2649614426&idx=1&sn=8a914db1a21fb447c8dc50ed9ddf61ff&chksm=8306354ab471bc5ccd8f405ce2616e8f33ac5d020b0e753d62071c3204b26fb169e8de180c17&mpshare=1&scene=1&srcid=1104XfUKdwPA6IlgmpopRo0u&sharer_sharetime=1572848574053&sharer_shareid=bafb2678ed1f77a340809d0b35c3d277&key=2bbffe7bbfb7d31b1a6c9bffc83ffa046afedcdbc05a3861beac55b656b90e718e259ba63ec83d4e8d0dfd5f0cd0e3a2b6c74e93233128c157a66a1bc922f5c62a6a7f030bf444edb9f3aa793f9b2224&ascene=1&uin=MzM5ODEzOTY3MQ%3D%3D&devicetype=Windows+10&version=62060833&lang=zh_CN&pass_ticket=f4E9eroPAnE%2FsCon3%2FgpDYBabRgpFy6Vqy1paT7qjGPs6ju5ZSUpR1BCoOVC8qYo
"区块链智能合约控制流识别的大规模实验研究")**
## **一、** **背景介绍**
启明星辰ADLab联合电子科技大学计算机学院（网络空间安全学院）陈厅副教授首次对以太坊区块链智能合约控制流的识别进行大规模研究，研究成果《A Large-Scale Empirical Study on Control Flow Identification of Smart
Contracts》于2019年发表在中国计算机学会（CCF）推荐的B类学术会议International Symposium on Empirical
Software Engineering and
Measurement上。该研究分析了当前6个主流的智能合约静态分析工具，通过对以太坊区块链上已部署的全部合约（约500万）实施执行跟踪来评估他们的静态控制流识别能力。实验证明，一些典型的问题会导致上述流行工具都无法识别全部的控制流（如：不完备的代码模式）。同时，实验发现通过执行跟踪可以有效增强这些工具对控制流的识别。我们通过在OYENTE中引入执行跟踪，实现了把静态控制流分析误报率降低百分之三十。同时，该研究获得了最佳论文提名奖。
## **二、** **研究方法**
### **2.1 智能合约收集**
在以太坊区块链中，每个智能合约都有唯一地址（下文中如无特殊说明，都默认为以太坊区块链上的智能合约）。在已知该地址的条件下，可以通过钱包的编程接口web3.eth.getCode()来获取该合约的字节码。通过这种方式收集智能合约存在两大问题：
1）无法获得所有智能合约的地址，Etherscan等开放平台也仅仅对外开放了部分合约的地址；
2）智能合约可动态删除，在不知道智能合约的区块编号时，该方法就无法获得已删除智能合约的字节码。
为了获得链上所有智能合约的字节码，我们对客户端进行了插桩扩展。具体来说，通过监控evm.Create()来获得智能合约的地址，通过监控evm.StateDB.SetCode()来获得智能合约的字节码。最后通过监控链上智能合约的历史部署活动，从而获得了从2015年7月30日（以太坊启动）到2018年2月10日期间部署的约500万智能合约的字节码。
### **2.2 主流智能合约分析工具**
尽管有一些工具能识别智能合约的控制流，但它们大多不开源或者无法处理字节码形态的智能合约，而实际智能合约绝大部分都不开放源码。最大的etherscan平台也仅仅收录了很小的一部分智能合约的源码。我们的研究选择了如下六款主流面向字节码智能合约的分析工具：
**工具名称** | **特性** | **异常合约数量**  
---|---|---  
**OYENTE** | 漏洞挖掘，符号执行，路径敏感 | 27,131 (0.5%)  
**MAIAN** | 漏洞挖掘，符号执行，路径敏感 | 115,286 (2.3%)  
**Mythril** | 漏洞挖掘，符号执行，路径敏感 | 0  
**evmdis** | 反汇编器，路径不敏感 | 0  
**Miasm** | 反汇编器，模式识别，路径不敏感 | 0  
**Porosity** | 反汇编器，模式识别，路径不敏感 | 0  
上述六款工具中，路径敏感的工具可能比路径不敏感的工具发现更多的控制转移路径，因为它们不会检查在实际条件下的路径可达性。其中OYENTE和MAIAN在处理某些合约时会触发异常，我们分析发现有三类原因：恶意无效字节码、不支持的操作和求解器异常。为了深入比较，我们修复了这三类导致异常的软件缺陷。
### **2.3 智能合约控制流分析**
以太坊区块链智能合约包含一系列虚拟机（EVM）操作，目前支持130+的EVM操作，其中8种操作可以导致控制流转移，具体来说：
1） 2种合约内跳转操作，EVM指令为JUMP/JUMPI，导致在同一个合约内的控制转移；
2） 6种合约间跳转操作，EVM指令为CREATE/CALL/CALLCODE/DELEGATECALL/
STATICCALL/SELFDESTRUCT，导致控制转移到另外一个地址的智能合约内。
通过对约500万智能合约的分析，我们发现其中绝大部分都是合约内控制转移，因此本次研究集中分析合约内的控制流转移，JUMP和JUMPI指令的含义如下：
指令 | 类型 | 解释  
---|---|---  
JUMP | 无条件跳转 | 栈顶元素为转移目标地址  
JUMPI | 条件跳转 | 栈顶元素为转移目标地址，栈顶下一元素不为0则转移  
同传统x86二进制逆向分析相比，智能合约存在一些显著的差异。
1）目标地址都存储在堆栈上，增加了识别难度；
2）合约类函数调用没有传统的call指令，统一编译为JUMP指令，增加了函数识别难度。
我们总结了如下的6种智能合约的控制转移模式：