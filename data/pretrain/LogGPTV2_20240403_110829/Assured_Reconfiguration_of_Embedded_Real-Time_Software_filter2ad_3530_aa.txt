title:Assured Reconfiguration of Embedded Real-Time Software
author:Elisabeth A. Strunk and
John C. Knight
Assured Reconfiguration of Embedded Real-Time Software
Elisabeth A. Strunk
John C. Knight
Department of Computer Science
University of Virginia
151 Engineer’s Way, Charlottesville, VA 22904-4740
{strunk | knight}@cs.virginia.edu
Abstract
It  is  often  the  case  that  safety-critical  systems  have  to
be reconfigured during operation because of issues such as
changes in the system’s operating environment or the failure
of  software  or  hardware  components.  Operational  systems
exist  that  are  capable  of  reconfiguration,  but  previous
research  and  the  techniques  employed  in  operational  sys-
tems for the most part either have not addressed the issue of
assurance or have been developed in an ad hoc manner. In
this paper we present a comprehensive approach to assured
reconfiguration, providing a framework for formal verifica-
tion that allows the developer of a reconfigurable system to
use  a  set  of  application-level  properties  to  show  general
reconfiguration  properties.  The  properties  and  design  are
illustrated through an example from NASA’s Runway Incur-
sion Prevention System.
1. Introduction
In order to ensure system safety, mission success, or other
crucial system properties, safety-critical systems often must
be  reconfigured  during  operation.  This  reconfiguration
might  be  required  as  a  response  to  many  stimuli  such  as
changes in the system’s operating environment or the failure
of software or hardware components. Examples include fail-
ure  of  an  aircraft  fly-by-wire  system,  damage  to  control
surfaces [2],  and  the  loss  of  a  processor  in  an  integrated
modular avionics system.
Research  in  facilitating  such  reconfiguration  has  been
conducted and operational systems exist that are capable of
reconfiguration,  such  as  the  Boeing  777  flight  control
system [16]. For the most  part, however, previous research
and  the  techniques  employed  in  operational  systems  either
have not addressed the issue of assurance of critical recon-
figuration  properties  or  have  been  developed  in  an  ad  hoc
manner to meet the needs of specific systems. In safety-crit-
ical  systems,  it  is  essential  that  the  actions  involved  in
reconfiguration  be  completed  correctly,  on  time,  and  with
very high levels of assurance. A general approach that can
be instantiated for specific applications is highly desirable.
In  this  paper  we  present  a  comprehensive  approach  to
assured  reconfiguration.  Our  goal  is  to  provide  a  set  of
design  level  properties  which,  when  shown  of  a  system
specification, together imply that the system’s reconfigura-
tion  will  take  place  with  high  dependability.  We  start  by
introducing  a  formal  definition  of  reconfiguration  and  an
associated set of high-level, general properties. We then out-
line  an  architecture  that  will  support  assurance  of  those
properties, provide a set of design-level properties that can
be shown of that architecture, and show rigorously that the
design-level  properties  imply  the  general  reconfiguration
properties.  Showing  for  a  specific  system  that  the  design-
level properties have been met will then imply assurance of
reconfiguration for that system.
Having shown that the design-level properties imply the
high-level  reconfiguration  properties,  it  then  remains  to
indicate  how  a  system  developer  might  go  about  proving
design-level properties for a specific system. To do this we
use an example from the avionics domain: NASA’s Runway
Incursion  Prevention  System  (RIPS),  an  experimental  sys-
tem  designed  to  detect  runway  incursions  in  airports.  We
choose  certain  elements  of  the  RIPS  specification  and
explain how their associated reconfiguration design proper-
ties can be demonstrated.
Section  2  elaborates  the  motivation  for  this  work,  and
Section 3 defines its applicability. Section 4 gives the gen-
eral  properties  of  a  reconfiguration  process,  and  Section  5
presents a candidate architecture through which these prop-
erties  might  be  assured.  Section  6  details  this  architecture,
and  Section  7  outlines  a  set  of  proofs  that  the  architecture
has  the  properties  set  out  in  Section  3.  Section  8  gives  an
example  implementation,  Section  9  suggests  tool  support
for aiding this process, and Section 10 concludes the paper.
2. Motivation for Reconfiguration Assurance
Complex  software  systems  frequently  operate  in  hetero-
geneous  environments  with  complex  goals  including  high
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:36:41 UTC from IEEE Xplore.  Restrictions apply. 
dependability requirements. These goals are often indepen-
dent (and sometimes even conflicting), and building a single
software system that will achieve them can be very difficult.
Furthermore, goals such as overall system safety can be dif-
ficult to meet, and showing that they have been met is still
more  demanding.  The  state  of  the  art  in  software  develop-
ment has stood the engineering community in good stead for
the most part, but there have been notable failures (e.g., the
Ariane V [7]), and complexity is steadily increasing.
A current research direction that is addressing this prob-
lem  is  to  build  complex  systems  that  can  operate  in  more
than one logical configuration where those different config-
urations  do  not  necessarily  provide  the  same  functionality.
The  concept  is  to  transition  to  different  configurations  in
response  to  detected  failures  in  system  components  that
could  compromise  the  system’s  dependability  goals,  rather
than trying to mask the effects of the component failure by
some form of replication. In systems where safety is a major
goal, such as the survivable systems proposed by Strunk and
Knight [14],  those  using  the  graceful  degradation  frame-
work  of  Shelton,  Koopman,  and  Nace  [12],  or  those  using
the  Simplex  architecture  of  Sha [10],  this  approach  allows
the system design to be much simpler and therefore easier to
analyze. Reconfiguration to assist dependability is also car-
ried out in current systems such as the Boeing 777 [16] and
the Lockheed-Martin F-22 [9].
Reconfiguration can also aid the construction of software
systems where the system must be dependable but reconfig-
uration does not support this explicitly. Such systems appear
frequently in space missions (e.g., the Corot mission [3]), in
“intelligent” control systems (such as described by Stewart
et al. [13] and Bateman et al. [2]), and in the more general
case  of  adaptive  reconfigurable  computing  [8,  6].  In  these
kinds  of  applications,  the  software  must  carry  with  it  an
assurance  argument;  part  of  that  assurance  argument  must
be that the reconfiguration aspects will function properly.
Much  of  the  existing  literature  on  reconfiguration  either
discusses  reconfiguration  with  only  a  superficial  treatment
of  assurance,  or  focuses  only  on  hardware  platforms  and
how  to  distribute  software  processes  over  available  ele-
ments.  We  focus  explicitly  on  reconfigurable  software,
showing how to assure properties of an application that has
a set number of discrete, predefined functional sets.
3. System Assumptions
Before  attempting  to  assure  reconfiguration,  we  must
define precisely what is to be assured. We assume a class of
systems  where  the  functionality  that  provides  value  to  the
user can be identified before system deployment and is set
forth in a set S of specifications of different levels of func-
tion.  Reconfiguration  is  not  defined  over  arbitrary  system
configurations, but rather between two specific members of
S  (denoted  Si and  Sj).  This is  appropriate  in  the  context  in
which one must assure reconfiguration correctness, because
assuring  reconfiguration  correctness  is  secondary  to  assur-
ing at least some basic level of specification correctness.
We also assume that worst-case execution times, includ-
ing worst-case time to train data in control systems, can be
determined  for  each  function  in  a  specification.  This  is  a
standard requirement of highly dependable systems.
Third, we assume that the system in question consists of
independent processes. Process interaction during reconfig-
uration  depends  on  individual  process  reconfiguration;  we
address the latter here and leave the former to future work.
Finally, we assume that the system can halt normal exe-
cution for the time that it takes to reconfigure. In some cir-
cumstances,  the  transition  might  take  sufficiently  long  that
specific  action  must  be  taken  during  the  transition.  Such
action is not included explicitly in the definition, but can be
addressed  by  assuming  an  intermediate  specification,  Sk,
between Si and Sj. Sk can encompass only minimal function
so that any transition to it can have a very strict time bound.
If the transition from Sk to Sj cannot be made in the required
time, further intermediate specifications can be added.
4. Definition of Assured Reconfiguration
Reconfiguration in the sense in which we use it is, infor-
mally,  the  process  through  which  a  system  halts  operation
under its current source specification Si and begins opera-
tion under a different target specification Sj. We address in
this  paper  the  requirements  on  a  single  reconfiguration;
because  the  assurance  arguments  make  no  assumptions  on
previous  reconfigurations,  system  operation  can  consist  of
an arbitrary sequence of these reconfigurations.
To formalize this definition, we must define a set of sup-
³ S (defined below),
porting elements. In this set, let Sx, Sy
 µ Sy. Functional and state properties are expressed in set
Sx
theory,  where  appropriate;  timing  properties  are  expressed
in Real-Time Logic (RTL) [5] (see Figure 1 for a brief sum-
mary  of  the  features  used  here).  To  make  our  discussion
clearer,  we  let  a  =  the  occurrence  number  of  Si, b  =  the
occurrence  number  of  the  reconfiguration,  and  c  =  the
occurrence  number  of  Sj  in  the  single  reconfiguration
sequence  we  consider.  The  necessary  supporting  terms  are
as follows:
• S: the set {S1, S2, ..., Sn} of service specifications of the 
system
• E: a set of possible functions from factors that affect 
which specification is an appropriate instantiation of Sj to 
possible values of those factors
• Env(t) ª e ³ E: function that returns the value of the envi-
ronmental state at time t
• Choose(Sx, e ³ E) ª Sy: function that returns appropriate 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:36:41 UTC from IEEE Xplore.  Restrictions apply. 
Event A temporal marker, i.e., the occurrence of an event marks a point in time
The event marking the completion of action A
Action Schedulable unit of work
↓A
↑A
@(E, i) Occurrence function. @(E, i), i ³ è, represents the time of the ith occurrence of event E.
Q Predicate Q is true before or at time x, and does not become false before time y [For clarity we have 
The event marking the initiation of action A
introduced a slight change in syntax]
Figure 1. A Brief Overview of RTL (excerpted from Jahanian and Mok [5])
target elements of S, given source elements of S and E.
• Prex: the precondition that must be satisfied for the sys-
tem to operate under Sx
• Invij: an invariant that must hold during the transition from 
Si to Sj
• ↑Sx: the event marking the beginning of the system’s 
operation under specification Sx. This event occurs when 
the system first operates according to the function set out 
in Sx, and concurrently satisfies Prex.
• ↓Sx: the event marking the end of the system’s operation 
under specification Sx (we define the occurrence of a 
reconfiguration signal to imply ↓Sx)
• Tij: the maximum allowable time between ↓Si and ↑Sj
More formally, then, reconfiguration is defined as the action
R in which the following conditions hold:
P1. @(↑R, b) = @(↓Si, a)
(R begins at the same time the system is no longer oper-
ating under Si)
Note that this property defines the beginning of R rather
than specifying a requirement that should be met.
P2. @(↓R, b) = @(↑Sj, c)
(R ends at the same time the system becomes compliant
with Sj)
P3. ∃  t:  time  s.t.  @(↑R,  b)  ã  t  ã  @(↓R,  b)  ∧
(Choose(Si, Env(t)) = Sj)
(Sj  is  the  proper  choice  for  the  target  specification  at
some point during R)
P4. @(↓R, b) - @(↑R, b) ã Tij
(R takes less than or equal to Tij time units)
P5. Invij 
(The transition invariant holds during R)
P6. Prej 
(The precondition for Sj is true at the time R ends)
P7. @(↓Sj, c-1) < @(↑R, b) Û @(↑Sj, c) = @(↓R, b)
(The lifetime of R is bounded by any two occurrences of
the same specification)
5. An Architecture for Assurance
5.1 Reconfiguration Sequencing and Timing
The  definition  of  reconfiguration  given  above 
is
expressed as a set of general properties; it is applicable to a
number of architectures, but too abstract for us to show how
one  might  assure  reconfiguration  correctness  for  a  specific
system. In this section, we present one possible architecture
that facilitates the refinement of the properties listed above
into  a  set  of  properties  that  can  be  shown  of  an  individual
system. If a system implementer builds a system using this
architecture and shows the low-level properties required of
the architectural elements, he will know that the high-level
properties that assure reconfiguration have been met.
Our proposed architecture has two major components: (1)
the  application  that  performs  the  computations  associated
with  the  members  of  S;  and  (2)  a  reconfiguration  mecha-
nism that ensures reconfiguration can be carried out. In our
logical model, the application is a process that runs continu-