title:Evil Under the Sun: Understanding and Discovering Attacks on Ethereum
Decentralized Applications
author:Liya Su and
Xinyue Shen and
Xiangyu Du and
Xiaojing Liao and
XiaoFeng Wang and
Luyi Xing and
Baoxu Liu
Evil Under the Sun:
Understanding and Discovering Attacks on Ethereum Decentralized Applications
Liya Su1,2,3 ∗†, Xinyue Shen1,4∗†, Xiangyu Du1,2,3∗, Xiaojing Liao1,
XiaoFeng Wang1, Luyi Xing1, Baoxu Liu2,3
1Indiana University Bloomington, 2Institute of Information Engineering, Chinese Academy of Sciences,
3University of Chinese Academy of Sciences, 4Alibaba Group
{liyasu, shen12, duxian}@iu.edu, {xliao, xw7, luyixing}@indiana.edu, PI:EMAIL
Abstract
The popularity of Ethereum decentralized applications
(Dapps) also brings in new security risks: it has been re-
ported that these Dapps have been under various kinds of
attacks from cybercriminals to gain proﬁt. To the best of
our knowledge, little has been done so far to understand this
new cybercrime, in terms of its scope, criminal footprints
and attack operational intents, not to mention any efforts to
investigate these attack incidents automatically on a large
scale. In this paper, we performed the ﬁrst measurement study
on real-world Dapp attack instances to recover critical threat
intelligence (e.g., kill chain and attack patterns). Utilizing
such threat intelligence, we proposed the ﬁrst technique DE-
FIER to automatically investigate attack incidents on a large
scale. Running DEFIER on 2.3 million transactions from 104
Ethereum on-chain Dapps, we were able to identify 476,342
exploit transactions on 85 target Dapps, which related to 75
0-day victim Dapps and 17K previously-unknown attacker
EOAs. To the best of our knowledge, it is the largest Ethereum
on-chain Dapp attack incidents dataset ever reported.
1 Introduction
The rise of blockchain technologies has profoundly trans-
formed computing, bringing to the front a new type of de-
centralized applications on blockchain that facilitate transfer
of values across users without a third party. Such applica-
tions, dubbed Dapp, have already been widely deployed on
Ethereum to provide services ranging from cryptocurrency
management to voting and governance [17]. Online statistics
show that till Nov. 5, 2019, 3,137 Dapps on Ethereum are
serving 63.77K active users every day through over one mil-
lion transactions that involve 7.55 million USD [2]. However,
the boundless potentials Dapps have opened also come with
new security risks. It has been reported that cybercriminals
have ﬁxed their gaze on Dapps and exploits on them, particu-
larly their blockchain back-end (i.e., smart contracts, see Sec-
tion 2), happening from time to time. A prominent example is
∗This work was done when the student authors were in Indiana University
Bloomington
†First two authors contributed equally for this project
the DAO attack that caused a loss over 50 million USD [39]
in 2016, resulting in the hard-fork in Ethereum. Also found in
our study is that miscreants took 14K Ethers from the victim
Dapps with most ﬁnancial losses (i.e., Fomo3D, Section 4.5).
With this signiﬁcant threat, the community’s understanding
about the new type of cybercrimes is still very limited: to
the best of our knowledge, no extensive forensic analysis
on Dapp attacks has ever been reported, nor has any cyber
threat intelligence (CTI) been collected from them to ﬁnd out
the perpetrator’s strategy, capability and infrastructure, not to
mention to utilize the knowledge to mitigate the threat.
Understanding attacks on Dapps. In this paper, we present
the ﬁrst study that analyzes and measures real-world at-
tacks on Ethereum Dapps based upon the forensic evidence
recorded on the blockchain, which brings new insights to this
emerging cybercrime. Our research leverages the informa-
tion logged by the Ethereum blockchain, an open, immutable
ledger recording the entire history of interactions between
Dapps and their users through their Ethereum user accounts
(i.e., Externally Owned Accounts or EOA, see Section 2).
Such interactions are performed through transactions, which
are logged in the data packages chained by Ethereum. Should
a Dapp be exploited, all forensic evidence, such as attack
traces, will be kept in related transactions, which can later be
used to analyze the attack.
However, it is nontrivial to identify attack traces from over
350 million Ethereum transactions. Finding related transac-
tions from published reports is inadequate at best, since they
tend to miss information about important actors and exploit
behaviors (such as exploit developers, Section 4), when their
EOAs are not included in the reports. Also absent are detailed
internal operations triggered by each transaction, in terms of
function calls between the target Dapps and EOAs or between
different EOAs (see Section 4). Such calls describe these par-
ties’ behaviors and are found to be critical for determining
their intents during the interactions. To address these chal-
lenges, we come up with a methodology that utilizes known
attack-related transactions (called exploit transactions in the
paper) and EOAs to ﬁnd new ones and further analyze their ex-
ecution traces (by re-executing these transactions). In this way,
utilizing 25 Dapps related to 42 known attack incidents, we
identiﬁed 58,555 exploit transactions with 436,371 execution
traces, all linked to 56 Dapps, including 29 being exploited
but never reported before (called 0-day victim Dapps).
Our ﬁndings. From the transactions collected, our forensic
analysis has recovered critical CTI about strategically, well
organized Dapp attacks, which have never been done before.
Such threat information (CTI) provides invaluable insights
for understanding the strategies, approaches and intentions of
real-world cybercriminals in attacking Dapps, and thus con-
tributes to mitigating the emerging threats. Most interesting
is the discovery about how the adversary systematically or-
chestrates an attack. More speciﬁcally, across different kinds
of exploits (weak randomness exploit, denial of services, inte-
ger overﬂow, reentrancy and authentication circumvention)
against different Dapps, we can see a general attack lifecycle
with four stages from the transaction sequences involved: at-
tack preparation, exploitation, propagation and completion.
These stages form a kill chain against Dapps, which has never
been reported before. The chain starts with repeated attempts
to probe the target Dapp from various sources for ﬁnding and
testing its vulnerable functions. That is, the adversary tests,
debugs the attack code to ensure it can successfully exploit
the particular target Dapp. This stage is followed by a series
of exploit transactions to proﬁt from the target, which are con-
tinuously reﬁned to improve efﬁciency. After that, the same
attack is often replayed to similar Dapps, with a sequence of
transactions produced to aim at different targets. The attack
is ﬁnalized with another sequence of transactions for termi-
nating attack contracts and transferring stolen funds. Across
different attack instances against real-world Dapps, this life-
cycle paradigm exhibits remarkable consistency, with each
stage characterized by a time series of similar, inter-dependent
transactions executed consecutively within a short time win-
dow. The series describes the adversary’s behaviors and thus
characterizes his intent at each stage. For example, continuous
probing transactions show the intent of ﬁnding weaknesses in
a target Dapp.
Further, our research reveals a hierarchical attack infras-
tructure with multiple roles working together to execute dif-
ferent types of exploits. These roles include exploit devel-
oper (testing an attack on vulnerable functions/Dapps), attack
operator (executing an exploit through attack transactions),
money mule (helping proﬁt/attack cost transfers through an
anonymity channel [18]) and money manager (managing prof-
it/cost transfers). Each of them has well-deﬁned tasks and
therefore behaves similarly across different attack types and
instances. This again makes their execution traces exhibit
some level of homogeneity at each attack stage.
Extended attack discovery and investigation. The CTI
(e.g., kill chain and operational intents) recovered in our study
can potentially lead to the exposure of unknown threats to
Dapps. To understand the values of our ﬁndings, we designed
an exploit discovery methodology, called DEFIER (Dapp Ex-
ploit Investigator), to ﬁnd more attack instances, particularly
those never reported, so as to gain more insights into real-
world attacks on Dapps. DEFIER captures the adversary’s
strategies and intents, as demonstrated by the operations trig-
gered by the transaction time series at each stage. Given a
Dapp, our approach ﬁrst gathers all its transactions recorded
on the blockchain and from them, further ﬁnds out other re-
lated transactions and EOAs. All these transactions are then
clustered based upon the similarity of their execution traces
in a graph form and organized into several time series. Af-
ter converting the execution traces of each transaction into a
vector through graph embedding, we run a Long Short-Term
Memory (LSTM) neural network to classify each time series,
which determines not only whether the series is related to an
exploit, but also its attack stage when it is.
Running DEFIER on 104 Dapps, we were able to dis-
cover 476,342 exploit transactions on 85 target (with a micro-
precision of 91.7%). In particular, DEFIER reported 75 0-day
victim Dapps (e.g., SpaceWar and SuperCard). Also surpris-
ingly, our study shows that a substantial portion (i.e., 26%)
of the transactions of these Dapps (on Ethereum) are attack-
related: e.g., 30% of Fomo3D’s transactions are attack-related
(from July 2018 to April 2019). This provides evidence that
indeed the attack lifecycle we discovered is general. Such
an attack lifecycle discovery tool can potentially be used to
disrupt exploits, sometimes even before damages are inﬂicted
(e.g., ﬁnding and stopping an attack at its preparation stage).
Contribution. The contributions of the paper are as follows:
• We performed the ﬁrst measurement study and forensic anal-
ysis on real-world Dapp attacks, leveraging the open and im-
mutable transaction records kept by the Ethereum blockchain
to recover critical CTI. Particularly, our study has led to the
discovery of a general, unique lifecycle of Dapp attacks, with
the adversary showing similar behaviors in orchestrating at-
tack operations against different target Dapps, regardless of
low-level exploit techniques. Also we brought to light the ad-
versary’s attack infrastructures, campaigns they organized, as
well as the inadequacy of the current response by defenders.
• We demonstrate that our new understanding and CTI dis-
covered can help mitigate the threat to Dapps, using a new
methodology developed for ﬁnding new attacks at different
stages. Our approach leverages the similarity of attack behav-
iors exhibited by the transaction time series, which allows us
to accurately capture both known and unknown attacks. This
study shows that our ﬁndings could be leveraged to build a
protection system down the road, to disrupt an exploit even
before any damage has been caused.
2 Background
2.1 Ethereum and smart contract
Ethereum is a public blockchain-based distributed computing
platform and operating system featuring scripting functional-
ity. On the platform, there are two types of accounts: Exter-
nally Owned Accounts (EOAs) controlled by private keys (rep-
resenting persons or external servers), and Contract Accounts
controlled by code, which are known as smart contracts. The
Ethereum blockchain [49] is the most prominent framework
for smart contracts, where over 1 million contracts have been
deployed [11].
Transaction. During its operations, the Ethereum blockchain
tracks every account’s state: once value has been transferred
between accounts, the blockchain’s state is also changed ac-
cordingly [27], which is recorded in a transaction. A trans-
action is a signed data package storing a message to be sent
from an EOA to another account, which carries the follow-
ing information: to (the recipient), from (sender’s signature),
value (the amount of money transferred from the sender to
the recipient), data (the input for a contract), gasprice (the
fee required to successfully conduct a transaction, i.e., gas,
which is paid by the sender), etc. In Ethereum, all transactions
are written onto a cryptographically-veriﬁed ledger [49], with
a copy kept by every Ethereum client.
There are three types of transactions supported on
Ethereum: Ether transfer, and contract call, contract cre-
ation [48]. The type of transactions can be determined based
on the transaction format: an Ether transfer transaction trans-
fers between two parties the amount of Ether as indicated by
its value ﬁeld; The contract call transaction is used to interact
with an existing smart contract, with its data ﬁeld specifying
the method to call (e.g., the methodID of run() or kill()) and
call arguments, and its value ﬁeld carrying the amount of
Ether to deposit in the contract (if the contract accepts Ether).
A contract creation transaction has its to ﬁeld set to empty,
and its input data ﬁeld contains the bytecode of the contract.
A typical bytecode is composed of the creation code, runtime
code and swarm code, where the creation code determines the
initial states of the contract, the runtime code indicates the
functionality of the contract, and the swarm code is used for
the deployment consistency proof and not for execution pur-
pose. Typically, the creation code ends with the operation se-
quence: PUSH 0x00, RETURN, STOP, 0x6000f3000, and
the swarm code begins with LOG1 PUSH 6 in bytecode. This
can be used to split the bytecode and identify the runtime code.
In our research, we leveraged the contract creation transaction
to recover the runtime code of the self-destructed contracts
(Section 3.1).
Each executed transaction creates a receipt, keeping
track of such information as the created contract address
(contractAddress, as shown in Appendix Figure 11(e)) and
the transaction execution status (0 for failure and 1 for success,
as shown in the status ﬁeld).
Smart contract concept and execution. A smart contract is
used to facilitate, verify, and enforce the negotiation or perfor-
mance of an agreement. As mentioned earlier, on Ethereum,
such a contract can be created, executed and destructed by
a transaction issued by an account. On reception of a trans-
Figure 1: Example of transaction execution traces. #: exploit
contract, (cid:22): contract generated in execution,  : Dapp, 3:
EOA.
action, a contract is run by the Ethereum Virtual Machine
(EVM) on every node in the network. During the execution,
the contract may communicate internally with other EOAs
and contracts. Note that, to understand what data has been
modiﬁed or what external contracts have been invoked, the
transaction execution needs to be traced via re-executing a
transaction under all historical states it accesses.
Figure 1 illustrates the execution traces (➊-➒) of a contract-
call transaction, which is sent from 0x73* to call the function
execute() of the contract 0x54* with a 0.01 ETH transfer.
The transaction has triggered a set of execution traces, such
as an internal call airDropPot_() from 0x54* to 0xa6* (➋),
followed by another call to airDropTracker_() from 0x54* to
0xa6* (➌).
In our research, we model the set of the transaction’s
execution traces et at time t as a sequence of 4-tuples
(I , O, B, T ), i.e., e = {(Ii , Oi , Bi , Ti)|i = 1...n}, where Ii is the
address triggering the behavior Bi (the function invoked and
its parameters) on the recipient address Oi, together with a
money transfer Ti (a transaction ﬁeld recording the Ethers
transferred from the issuer of the transaction to its recipient)
at the step i.
In our study, we collected 11,960,145 execution traces
of 2,350,779 transactions from Bloxy [13], and further con-
structed a directed and weighted graph for transaction analysis
(Section 3).
2.2 Ethereum Dapps
Ethereum Dapps are public de-centralized applications that
interact with the Ethereum blockchain, providing services
such as gambling, online voting, token system, cryptocurrency
exchange, etc. Such an application utilizes a set of smart
contracts as its on-chain back-ends, for the purposes such
as encoding task logic and maintaining persistent storage
of its consensus-critical states [17], while also contains off-
chain components such as its front-end (e.g., a website) for
communicating with users. As an example, the Ethereum
Dapp Fomo3D, a lottery game, is powered by a smart contract
that handles the transactions for different actions, like buying
keys, withdrawing from vault, picking a vanity name, etc.
Note that in addition to acting as the back-end of a Dapp,
TO0x54*FROM0x73*VALUE0.01 EtherDATA0xc52ab778(methodID offunction execute())GASPRICE6.3x10-9 Ether(6.3 Gwei)u (0x73*, 0x54*, execute(0xa6*), 0.1 ETH)v (0x54*, 0xa6*, airDropPot_(), 0 ETH)w (0x54*, 0xa6*, airDropTracker_(), 0 ETH)x (0x54*, 0x07*, execute(0xa6*), 0.1 ETH)y (0x07*, 0xf7*, create, 0.1 ETH)z (0xf7*, 0xa6*, buyXid(0x0000), 0.1 ETH)....{ (0xf7*, 0xa6*, withdraw(), 0 ETH)| (0xa6*, 0xf7*, transfer, 0.1012 ETH)} (0xf7*, 0x73*, suicide, 0.1012 ETH)0x73*u0x54*0x07*0xf7*0xa6*v w x y z { | } 0x73*u0x54*0x07*0xf7*0xa6*v w x y z { | } a smart contract can serve other purposes such as offering
an on-chain library, and is also used to call a Dapp. In our
research, we focus on the on-chain threats to the Dapp’s back-
end, a set of related contracts supporting the service of the
application. These contracts are invoked by EOAs through
other contracts or transactions. Below we also use the term
“Dapp” to refer to the back-end smart contract(s) of a Dapp.
In our study, to identify Dapp among smart contracts, we
utilize Dapp aggregation website [1] to recognize the Dapp
names with their corresponding contract addresses and cate-
gories (e.g., gambling, game, ﬁnance, exchange). In this way,
we identify 1,169 Dapps with 5,786 contract addresses and
18 categories. Note that Ethereum does not distinguish Dapp
contract and non-Dapp contract naturally: if a Dapp has never
been recorded by those websites, we cannot build the Dapp
name-contract mapping.
Attacks on Dapps. As the largest Dapps market, Ethereum
has seen quite a few high-impact real-world attacks on
Dapps [36], resulting in losses of millions of dollars. Table 1
lists the types of attacks ever reported from 2016 to 2019 and
the number of attack incidents. In our study, we utilize these
published reports as seed to recover critical CTI on Ethereum
Dapp attacks.
Here we present a real-world example of the Ethereum
Dapp attack that exploits a weak randomness vulnerability
in the airdrop() method of Fomo3D (see Table 1) for proﬁt.
Fomo3D is a highly-popular Ethereum gambling game with
over 150,000 transactions a day and a prize pool of around $3