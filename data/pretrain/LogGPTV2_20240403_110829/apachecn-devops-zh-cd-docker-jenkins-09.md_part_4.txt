![](img/d84f40b8-8d26-4581-b262-a063d3a1d1f5.png)
参数化构建有助于在场景中重用管道代码，只要它有一点点不同。然而，这个特性不应该被过度使用，因为太多的条件会使 Jenkins 文件难以理解。
# 共享库
重用管道的另一个解决方案是将其零件提取到共享库中。
共享库是作为单独的源代码控制项目存储的 Groovy 代码。这段代码以后可以在许多 Jenkinsfile 脚本中用作管道步骤。为了说清楚，我们来看一个例子。共享库技术总是需要三个步骤:
1.  创建共享库项目。
2.  在 Jenkins 中配置共享库。
3.  使用 Jenkins 文件中的共享库。
# 创建共享库项目
我们从创建一个新的 Git 项目开始，在这个项目中我们放入了共享库代码。每个 Jenkins 步骤都表示为位于`vars`目录中的 Groovy 文件。
让我们创建一个`sayHello`步骤，该步骤采用`name`参数并回显一条简单的消息。这应该存储在`vars/sayHello.groovy`文件中:
```
/**
* Hello world step.
*/
def call(String name) {   
   echo "Hello $name!"
}
```
Human-readable descriptions for shared library steps can be stored in the `*.txt` files. In our example, we could add the `vars/sayHello.txt` file with the step documentation.
当库代码完成后，我们需要将其推送到存储库，例如，作为一个新的 GitHub 项目。
# 在 Jenkins 中配置共享库
下一步是在 Jenkins 中注册共享库。我们打开管理 Jenkins|配置系统，并找到全局管道库部分。在这里，我们可以添加一个库，给它一个选定的名称，如下所示:
![](img/d0fac181-7915-4db7-b4c3-5776e527e325.png)
我们指定了注册库的名称和库存储库地址。请注意，库的最新版本将在管道构建期间自动下载。
We presented importing the Groovy code as *Global Shared Library*, but there are also other alternative solutions. Read more at [https://jenkins.io/doc/book/pipeline/shared-libraries/](https://jenkins.io/doc/book/pipeline/shared-libraries/).
# 在 Jenkins 文件中使用共享库
最后，我们可以在 Jenkinsfile 脚本中使用共享库。
让我们看一下这个例子:
```
pipeline {
   agent any
   stages {
       stage("Hello stage") {
           steps {
           sayHello 'Rafal'
         }
       }
   }
}
```
If "Load implicitly" hadn't been checked in the Jenkins configuration, then we would need to add "`@Library('example') _`" at the beginning of the Jenkinsfile script.
如您所见，我们可以将 Groovy 代码用作管道步骤`sayHello`。显然，管道构建完成后，在控制台输出中，我们应该会看到`Hello Rafal!`。
Shared libraries are not limited to one step. Actually, with the power of the Groovy language, they can even act as templates for entire Jenkins pipelines.
# 回滚部署
我记得我的同事，一个资深架构师的话你不需要更多的 QAs，你需要更快的回滚。虽然这种说法过于简单，质量保证团队往往很有价值，但这句话有很多道理。想一想；如果你在生产中引入了一个 bug，但是在第一个用户报告错误后很快就回滚了，那么通常不会发生什么不好的事情。另一方面，如果生产错误很少，但没有应用回滚，那么调试生产的过程通常会在漫长的不眠之夜和大量不满意的用户中结束。这就是为什么我们需要在创建 Jenkins 管道时提前考虑回滚策略。
在持续交付的情况下，有两个可能发生故障的时刻:
*   在发布过程中，在管道执行中
*   管道建成后，在生产中
第一个场景非常简单，没有恶意。它涉及的情况是，应用已经部署到生产中，但是下一个阶段失败了，例如，冒烟测试。然后，我们所需要做的就是在`failure`案例的`post`管道部分执行一个脚本，它将生产服务降级到旧的 Docker 映像版本。如果我们使用蓝绿色部署(如本章后面所述)，任何停机的风险都是最小的，因为我们通常在冒烟测试之后执行负载平衡器切换作为最后一个管道阶段。
第二种情况，当我们在管道成功完成后注意到一个生产错误时，会更加困难，需要一些注释。这里的规则是，我们应该始终使用与标准发布完全相同的过程来发布回滚的服务。否则，如果我们试图以更快的方式手动做一些事情，我们就是在自找麻烦。任何非竞争性的任务都是有风险的，尤其是在压力下，当生产出问题时。
As a side note, if the pipeline completes successfully but there is a production bug, then it means that our tests are not good enough. So, the first thing after rollback is to extend the unit/acceptance test suites with the corresponding scenarios.
最常见的持续交付过程是一个完全自动化的管道，从检查代码开始，到发布到生产结束。
下图展示了其工作原理:
![](img/338a8478-71c8-40cb-9b94-ec25d9d5e0b8.png)
在本书中，我们已经介绍了经典的持续交付管道。如果回滚应该使用完全相同的过程，那么我们需要做的就是从存储库中恢复最新的代码更改。因此，管道会自动构建、测试并最终发布正确的版本。
Repository reverts and emergency fixes should never skip the testing stages in the pipeline. Otherwise, we may end up with a release that is still not working correctly because of another issue that makes debugging even harder.
解决方案非常简单优雅。唯一的缺点是我们需要花费在整个管道构建上的停机时间。如果我们使用蓝绿色部署或加那利版本，可以避免这种停机，在这种情况下，我们只需更改负载平衡器设置来处理健康的环境。
在协调发布的情况下，回滚操作变得更加复杂，在此期间，许多服务被同时部署。这就是为什么精心编排的发布被视为反模式的原因之一，尤其是在微服务领域。正确的方法是始终保持向后兼容性，至少在一段时间内是这样(就像我们在本章开头介绍的数据库一样)。然后，可以独立发布每个服务。
# 添加手动步骤
一般来说，持续交付管道应该是完全自动化的，通过提交到存储库来触发，并在发布后结束。然而，有时我们无法避免手动步骤。最常见的例子是发布批准，这意味着该过程是完全自动化的，但是有一个手动步骤来批准新的发布。另一个常见的例子是手动测试。其中一些可能存在，因为我们在遗留系统上操作；当测试无法自动化时，可能会出现其他一些问题。不管是什么原因，有时候别无选择，只能增加一个手动步骤。
Jenkins 语法为手动步骤提供了一个关键字`input`:
```
stage("Release approval") {
   steps {
       input "Do you approve the release?"
   }
}
```
管道将在`input`步骤停止执行，并等待手动批准。
请记住，手动步骤很快会成为交付过程中的瓶颈，这就是为什么它们应该始终被视为不如完全自动化的解决方案。
It is sometimes useful to set a timeout for the input in order to avoid waiting forever for the manual interaction. After the configured time is elapsed, the whole pipeline is aborted.
# 发布模式
在最后一节中，我们讨论了 Jenkins 管道模式，这些模式用于加快构建执行(并行步骤)、帮助代码重用(共享库)、限制生产错误的风险(回滚)以及处理手动批准(手动步骤)。本节介绍下一组模式，这次与发布过程相关。它们旨在降低将产品更新到新软件版本的风险。
我们已经在[第 8 章](08.html)、*和 Docker Swarm* 中描述了发布模式之一，滚动更新。在这里，我们再展示两个:蓝绿色部署和金丝雀版本。
# 蓝绿色部署
蓝绿色部署是一种减少与发布相关的停机时间的技术。它涉及两个相同的生产环境，一个称为绿色，另一个称为蓝色，如下图所示:
![](img/4d853c46-e422-49e2-8c86-ab0a6bb780fa.png)
在图中，当前可访问的环境是蓝色的。如果我们想发布一个新版本，那么我们将所有的东西都部署到绿色环境中，并且在发布过程结束时，将负载平衡器更改为绿色环境。结果，用户突然开始使用新版本。下一次我们想要发布时，我们对蓝色环境进行更改，最后，我们将负载平衡器更改为蓝色。我们每次都是这样，从一个环境切换到另一个环境。
The blue-green deployment technique works correctly with two assumptions: environment isolation and no orchestrated releases.
这种解决方案有两大优势:
*   **零停机**:从用户角度来看所有的停机都是换负荷平衡开关的瞬间，可以忽略不计
*   **回滚**:为了回滚一个版本，把负载均衡交换机蓝绿色部署改回来就够了，包括:
*   **数据库**:在回滚的情况下，模式迁移可能会很棘手，因此使用本章开头介绍的模式是值得的
*   **事务**:正在运行的数据库事务必须移交给新的数据库
*   **冗余基础设施/资源**:我们需要双倍的资源
有一些技术和工具可以克服这些挑战，因此蓝绿色的部署模式在 IT 行业中得到高度推荐和广泛使用。
You can read more about the blue-green deployment technique on the excellent Martin Fowler's blog [https://martinfowler.com/bliki/BlueGreenDeployment.html](https://martinfowler.com/bliki/BlueGreenDeployment.html).
# 金丝雀释放
Canary releasing 是一种降低引入新版本软件相关风险的技术。与蓝绿色部署类似，它使用两个相同的环境，如下图所示:
![](img/14406026-be79-4f9a-bd10-c3c7ede552fc.png)
此外，与蓝绿色部署技术类似，发布过程从在当前未使用的环境中部署新版本开始。然而，相似之处到此结束。负载平衡器不是切换到新环境，而是设置为仅将选定的用户组链接到新环境。其余的仍然使用旧版本。这样，一个新的版本可以被一些用户测试，如果出现错误，只有一小部分人会受到影响。测试期结束后，所有用户都切换到新版本。
这种方法有一些巨大的好处:
*   **验收和性能测试**:如果验收和性能测试很难在试运行环境中运行，那么可以在生产中进行测试，最大限度地减少对一小部分用户的影响。
*   **简单回滚**:如果新的变更导致失败，那么回滚是通过将所有用户切换回旧版本来完成的。
*   **A/B 测试**:如果我们不确定新版本是比 UX 好还是性能角度好，那就有可能和老版本比较。
加那利释放与蓝绿色部署有相同的缺点。另一个挑战是我们有两个生产系统同时运行。尽管如此，金丝雀释放是大多数公司用来帮助发布和测试的优秀技术。
You can read more about the canary releasing technique on the excellent Martin Fowler's blog [https://martinfowler.com/bliki/CanaryRelease.html](https://martinfowler.com/bliki/CanaryRelease.html).
# 使用遗留系统
到目前为止，我们所描述的一切顺利地适用于绿地项目，对于这些项目来说，建立持续交付管道相对简单。
然而，遗留系统更具挑战性，因为它们通常依赖于手动测试和手动部署步骤。在本节中，我们将逐步介绍将持续交付应用于遗留系统的推荐场景。
作为第零步，我推荐阅读迈克尔·费哲的优秀书籍《有效使用遗留代码》。他关于如何处理测试、重构和添加新特性的想法，消除了大多数关于如何自动化遗留系统交付过程的担忧。
For many developers, it may be tempting to completely rewrite a legacy system, rather than refactor it. While the idea is interesting from a developer's perspective, it is usually a bad business decision that results in product failure. You can read more about the history of rewriting the Netscape browser in an excellent blog post by Joel Spolsky, *Things You Should Never Do,* at [https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i](https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i).
应用持续交付过程的方式在很大程度上取决于当前项目的自动化、使用的技术、硬件基础设施和当前的发布过程。通常，它可以分为三个步骤:
1.  自动化构建和部署。
2.  自动化测试。
3.  重构和引入新特性。