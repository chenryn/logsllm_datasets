There seems to be a problem when updating ACL when using object field aces. It
is fairy simply to reproduce inside a test controller:
  1. create a simple domain object:
        $demoObj         = new Demo();
    $demoObj->setId(2);
    $oid  = ObjectIdentity::fromDomainObject($demoObj);
    $fieldName = "name";
  2. give the object a simple ROLE based ACL:
        $aclProvider    = $this->get('security.acl.provider');
    $acl  = $aclProvider->createAcl($oid);
    $roleUser  = new RoleSecurityIdentity('ROLE_USER');
    $mask      = new MaskBuilder(4); // 4 = EDIT
    $acl->insertobjectFieldAce($fieldName, $roleUser, $mask->get());
    $aclProvider->updateAcl($acl);
  3. add another ROLE to the ACL:
        $acl  = $aclProvider->findAcl($oid);
    $roleUser  = new RoleSecurityIdentity('ROLE_FOO');
    $mask      = new MaskBuilder(4); // 4 = EDIT
    $acl->insertobjectFieldAce($fieldName, $roleUser, $mask->get());
    $aclProvider->updateAcl($acl);
  4. add one more ROLE to the ACL:
        $acl  = $aclProvider->findAcl($oid);
    $roleUser  = new RoleSecurityIdentity('ROLE_BAR');
    $mask      = new MaskBuilder(4); // 4 = EDIT
    $acl->insertobjectFieldAce($fieldName, $roleUser, $mask->get());
    $aclProvider->updateAcl($acl);
running step 4 produces the following:
        An exception occurred while executing 'UPDATE acl_entries SET ace_order
        = 1 WHERE id = 40':
        SQLSTATE[23000]: Integrity constraint violation: 1062 Duplicate entry
        '19-22-name-1' for key 
        'UNIQ_46C8B806EA000B103D9AB4A64DEF17BCE4289BF4'
If you remove the offending index from the database, the update works
perfectly (the ace_order), so the problem seems to be that Symfony is not
updating the ACL items in the correct order.
The above does not affect class field aces.
There is a second issue related to the above where the following throws the
same execption:
        $index = 0;
        $acl->deleteObjectFieldAce($index, $fieldName);
        $acl->insertObjectFieldAce($fieldName, $roleUser, $mask->get());
        $aclProvider->updateAcl($acl);
there is a workaround by doing:
        $index = 0;
        $acl->deleteObjectFieldAce($index, $fieldName);
        $aclProvider->updateAcl($acl);
        $acl->insertObjectFieldAce($fieldName, $roleUser, $mask->get());
        $aclProvider->updateAcl($acl);
Once again this does not affect class field aces.