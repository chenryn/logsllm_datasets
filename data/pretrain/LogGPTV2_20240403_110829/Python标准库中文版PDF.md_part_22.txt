import smtplib
import string, sys
HOST = "localhost"
FROM = "PI:EMAIL"
TO = "PI:EMAIL"
SUBJECT = "for your information!"
BODY = "next week: how to fling an otter"
body = string.join((
"From: %s" % FROM,
"To: %s" % TO,
"Subject: %s" % SUBJECT,
"",
BODY), "\r\n")
print body
server = smtplib.SMTP(HOST)
server.sendmail(FROM, [TO], body)
server.quit()
From: PI:EMAIL
To: PI:EMAIL
Subject: for your information!
next week: how to fling an otter
7.16. telnetlib 模块
telnetlib 模块提供了一个 telnet 客户端实现.
Example 7-31 连接到一台 Unix 计算机, 登陆, 然后请求一个目录的列表.
7.16.0.1. Example 7-31. 使用 telnetlib 模块登陆到远程服务器
File: telnetlib-example-1.py
import telnetlib
import sys
HOST = "spam.egg"
USER = "mulder"
PASSWORD = "trustno1"
telnet = telnetlib.Telnet(HOST)
telnet.read_until("login: ")
telnet.write(USER + "\n")
telnet.read_until("Password: ")
telnet.write(PASSWORD + "\n")
telnet.write("ls librarybook\n")
telnet.write("exit\n")
print telnet.read_all()
[spam.egg mulder]$ ls
README os-path-isabs-example-1.py
SimpleAsyncHTTP.py os-path-isdir-example-1.py
aifc-example-1.py os-path-isfile-example-1.py
anydbm-example-1.py os-path-islink-example-1.py
array-example-1.py os-path-ismount-example-1.py
...
7.17. nntplib 模块
nntplib 模块提供了一个网络新闻传输协议( Network News Transfer Protocol,
NNTP )客户端的实现.
7.17.1. 列出消息
从新闻服务器上读取消息之前, 你必须连接这个服务器并选择一个新闻组.
Example 7-32 中的脚本会从服务器下载一个完成的消息列表, 然后根据列表做
简单的统计.
7.17.1.1. Example 7-32. 使用 nntplib 模块列出消息
File: nntplib-example-1.py
import nntplib
import string
SERVER = "news.spam.egg"
GROUP = "comp.lang.python"
AUTHOR = "PI:EMAIL" # eff-bots human alias
# connect to server
server = nntplib.NNTP(SERVER)
# choose a newsgroup
resp, count, first, last, name = server.group(GROUP)
print "count", "=>", count
print "range", "=>", first, last
# list all items on the server
resp, items = server.xover(first, last)
# extract some statistics
authors = {}
subjects = {}
for id, subject, author, date, message_id, references, size, lines in
items:
authors[author] = None
if subject[:4] == "Re: ":
subject = subject[4:]
subjects[subject] = None
if string.find(author, AUTHOR) >= 0:
print id, subject
print "authors", "=>", len(authors)
print "subjects", "=>", len(subjects)
count => 607
range => 57179 57971
57474 Three decades of Python!
...
57477 More Python books coming...
authors => 257
subjects => 200
7.17.2. 下载消息
下载消息是很简单的, 只需要调用 article 方法, 如 Example 7-33 所示.
7.17.2.1. Example 7-33. 使用 nntplib 模块下载消息
File: nntplib-example-2.py
import nntplib
import string
SERVER = "news.spam.egg"
GROUP = "comp.lang.python"
KEYWORD = "tkinter"
# connect to server
server = nntplib.NNTP(SERVER)
resp, count, first, last, name = server.group(GROUP)
resp, items = server.xover(first, last)
for id, subject, author, date, message_id, references, size, lines in
items:
if string.find(string.lower(subject), KEYWORD) >= 0:
resp, id, message_id, text = server.article(id)
print author
print subject
print len(text), "lines in article"
"Fredrik Lundh" 
Re: Programming Tkinter (In Python)
110 lines in article
...
Example 7-34 展示了如何进一步处理这些消息, 你可以把它封装到一个
Message 对象中(使用 rfc822 模块).
7.17.2.2. Example 7-34. 使用 nntplib 和 rfc822 模块处理消息
File: nntplib-example-3.py
import nntplib
import string, random
import StringIO, rfc822
SERVER = "news.spam.egg"
GROUP = "comp.lang.python"
# connect to server
server = nntplib.NNTP(SERVER)
resp, count, first, last, name = server.group(GROUP)
for i in range(10):
try:
id = random.randint(int(first), int(last))
resp, id, message_id, text = server.article(str(id))
except (nntplib.error_temp, nntplib.error_perm):
pass # no such message (maybe it was deleted?)
else:
break # found a message!
else:
raise SystemExit
text = string.join(text, "\n")
file = StringIO.StringIO(text)
message = rfc822.Message(file)
for k, v in message.items():
print k, "=", v
print message.fp.read()
mime-version = 1.0
content-type = text/plain; charset="iso-8859-1"
message-id = 
lines = 22
...
from = "Fredrik Lundh" 
nntp-posting-host = parrot.python.org
subject = ANN: (the eff-bot guide to) The Standard Python Library
...
到这一步后, 你可以使用 htmllib , uu , 以及 base64 继续处理这些消息.
7.18. SocketServer 模块
SocketServer 为各种基于 socket 的服务器提供了一个框架. 该模块提供了大
量的类, 你可以用它们来创建不同的服务器.
Example 7-35 使用该模块实现了一个 Internet 时间协议服务器. 你可以用前
边的 timeclient 脚本连接它.
7.18.0.1. Example 7-35. 使用 SocketServer 模块
File: socketserver-example-1.py
import SocketServer
import time
# user-accessible port
PORT = 8037
# reference time
TIME1970 = 2208988800L
class TimeRequestHandler(SocketServer.StreamRequestHandler):
def handle(self):
print "connection from", self.client_address
t = int(time.time()) + TIME1970
b = chr(t>>24&255) + chr(t>>16&255) + chr(t>>8&255) + chr(t&255)
self.wfile.write(b)
server = SocketServer.TCPServer(("", PORT), TimeRequestHandler)
print "listening on port", PORT
server.serve_forever()
connection from ('127.0.0.1', 1488)
connection from ('127.0.0.1', 1489)
...
7.19. BaseHTTPServer 模块
这是一个建立在 SocketServer 框架上的基本框架, 用于 HTTP 服务器.
Example 7-36 在每次重新载入页面时会生成一条随机信息. path 变量包含当前
URL , 你可以使用它为不同的 URL 生成不同的内容 (访问除根目录的其他任何
path 该脚本都会返回一个错误页面).
7.19.0.1. Example 7-36. 使用 BaseHTTPServer 模块
File: basehttpserver-example-1.py
import BaseHTTPServer
import cgi, random, sys
MESSAGES = [
"That's as maybe, it's still a frog.",
"Albatross! Albatross! Albatross!",
"It's Wolfgang Amadeus Mozart.",
"A pink form from Reading.",
"Hello people, and welcome to 'It's a Tree.'"
"I simply stare at the brick and it goes to sleep.",
]
class Handler(BaseHTTPServer.BaseHTTPRequestHandler):
def do_GET(self):
if self.path != "/":
self.send_error(404, "File not found")
return
self.send_response(200)
self.send_header("Content-type", "text/html")
self.end_headers()
try:
# redirect stdout to client
stdout = sys.stdout
sys.stdout = self.wfile
self.makepage()
finally:
sys.stdout = stdout # restore
def makepage(self):
# generate a random message
tagline = random.choice(MESSAGES)
print ""
print ""
print "Today's quote: "
print "%s" % cgi.escape(tagline)
print ""
print ""
PORT = 8000
httpd = BaseHTTPServer.HTTPServer(("", PORT), Handler)
print "serving at port", PORT
httpd.serve_forever()
更有扩展性的 HTTP 框架请参阅 SimpleHTTPServer 和 CGIHTTPServer 模块.
7.20. SimpleHTTPServer 模块
SimpleHTTPServer 模块是一个简单的 HTTP 服务器, 它提供了标准的 GET 和
HEAD 请求处理器. 客户端请求的路径名称会被翻译为一个相对文件名 (相对于
服务器启动时的当前路径). Example 7-37 展示了该模块的使用.
7.20.0.1. Example 7-37. 使用 SimpleHTTPServer 模块
File: simplehttpserver-example-1.py
import SimpleHTTPServer
import SocketServer
# minimal web server. serves files relative to the
# current directory.
PORT = 8000
Handler = SimpleHTTPServer.SimpleHTTPRequestHandler
httpd = SocketServer.TCPServer(("", PORT), Handler)
print "serving at port", PORT
httpd.serve_forever()
serving at port 8000
localhost - - [11/Oct/1999 15:07:44] code 403, message Directory listing
not sup
ported
localhost - - [11/Oct/1999 15:07:44] "GET / HTTP/1.1" 403 -
localhost - - [11/Oct/1999 15:07:56] "GET /samples/sample.htm HTTP/1.1"
200 -
这个服务器会忽略驱动器符号和相对路径名(例如 `..`). 但它并没有任何访问
验证处理, 所以请小心使用.
Example 7-38 实现了个迷你的 web 代理. 发送给代理的 HTTP 请求必须包含
目标服务器的完整 URI . 代理服务器使用 urllib 来获取目标服务器的数据.
7.20.0.2. Example 7-38. 使用 SimpleHTTPServer 模块实现代理
File: simplehttpserver-example-2.py
# a truly minimal HTTP proxy
import SocketServer
import SimpleHTTPServer
import urllib
PORT = 1234
class Proxy(SimpleHTTPServer.SimpleHTTPRequestHandler):
def do_GET(self):
self.copyfile(urllib.urlopen(self.path), self.wfile)
httpd = SocketServer.ForkingTCPServer(('', PORT), Proxy)
print "serving at port", PORT
httpd.serve_forever()
7.21. CGIHTTPServer 模块
CGIHTTPServer 模块是一个可以通过公共网关接口( common gateway interface ,
CGI )调用外部脚本的 HTTP 服务器. 如 Example 7-39 所示.
7.21.0.1. Example 7-39. 使用 CGIHTTPServer 模块
File: cgihttpserver-example-1.py
import CGIHTTPServer
import BaseHTTPServer
class Handler(CGIHTTPServer.CGIHTTPRequestHandler):
cgi_directories = ["/cgi"]
PORT = 8000
httpd = BaseHTTPServer.HTTPServer(("", PORT), Handler)
print "serving at port", PORT
httpd.serve_forever()
7.22. cgi 模块
cgi 模块为 CGI 脚本提供了函数和类支持. 它还可以处理 CGI 表单数据.
Example 7-40 展示了一个简单的 CGI 脚本, 它返回给定目录下的文件列表
(相对于脚本中指定的根目录)
7.22.0.1. Example 7-40. 使用 cgi 模块
File: cgi-example-1.py
import cgi
import os, urllib
ROOT = "samples"
# header
print "text/html"
print
query = os.environ.get("QUERY_STRING")
if not query:
query = "."
script = os.environ.get("SCRIPT_NAME", "")
if not script:
script = "cgi-example-1.py"
print ""
print ""
print "file listing"
print ""
print ""
print ""
try:
files = os.listdir(os.path.join(ROOT, query))
except os.error:
files = []
for file in files:
link = cgi.escape(file)
if os.path.isdir(os.path.join(ROOT, query, file)):
href = script + "?" + os.path.join(query, file)
print "%s" % (href, cgi.escape(link))
else:
print "%s" % link
print ""
print ""
text/html
file listing
sample.gif
sample.gz
sample.netrc
...
sample.txt
sample.xml
sample~
web
7.23. webbrowser 模块
(2.0 中新增) webbrowser 模块提供了一个到系统标准 web 浏览器的接口. 它
提供了一个 open 函数, 接受文件名或 URL 作为参数, 然后在浏览器中打开它.
如果你又一次调用 open 函数, 那么它会尝试在相同的窗口打开新页面. 如
Example 7-41 所示.
7.23.0.1. Example 7-41. 使用 webbrowser 模块
File: webbrowser-example-1.py
import webbrowser
import time
webbrowser.open("http://www.pythonware.com")
# wait a while, and then go to another page
time.sleep(5)
webbrowser.open(
"http://www.pythonware.com/people/fredrik/librarybook.htm"
)
在 Unix 下, 该模块支持 lynx , Netscape , Mosaic , Konquerer , 和 Grail .
在 Windows 和 Macintosh 下, 它会调用标准浏览器 (在注册表或是 Internet
选项面板中定义).
8. 国际化