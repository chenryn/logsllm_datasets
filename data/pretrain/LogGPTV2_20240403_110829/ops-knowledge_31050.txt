User: How to use Python to write scripts to execute commands in batches on multiple servers?
Assistant: Use Python's Paramiko library to implement batch execution of commands on multiple servers. The specific steps are as follows: 1. Install the Paramiko library: Enter `pip install paramiko` on the command line to install the Paramiko library. 2. Write a Python script: first import the Paramiko library, then define the server list and command list to execute the command, then use the Paramiko library to establish an SSH connection, execute the corresponding command on each server, and finally disconnect the SSH connection. The sample code is as follows: ```python import paramiko # Define the server list and command list to execute the command server_list = [ {"host": "192.168.1.1", "port": 22, "username": "root", " password": "password"}, {"host": "192.168.1.2", "port": 22, "username": "root", "password": "password"} ] command_list = [ "cd /opt" , "ls -l" ] # Establish an SSH connection, execute the corresponding command on each server, and finally disconnect the SSH connection for server in server_list: ssh = paramiko.SSHClient() ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) ssh .connect(server["host"], port=server["port"], username=server["username"], password=server["password"]) for command in command_list: stdin, stdout, stderr = ssh. exec_command(command) print(f"Output on {server['host']}:") print(stdout.read().decode()) ssh.close() ``` In the above sample code, we first define The server list and the command list to execute the command are obtained, and then use the for loop to connect to each server one by one, and execute the corresponding command on each server. Finally, call the close() method of the SSH connection object to disconnect the SSH connection. After executing the command, we use stdout.read().decode() to get the output of the command and print it to the screen using the print() function. Note: In actual use, it is recommended to store the username and password in the configuration file and use the ConfigParser library to read the configuration file to enhance the maintainability of the script. At the same time, we need to pay attention that exceptions may be thrown when executing commands, so exceptions need to be handled in the code.