title:Redemption: Real-Time Protection Against Ransomware at End-Hosts
author:Amin Kharraz and
Engin Kirda
Redemption: Real-Time Protection Against
Ransomware at End-Hosts
Amin Kharraz(B) and Engin Kirda
Northeastern University, Boston, USA
{mkharraz,ek}@ccs.neu.edu
Abstract. Ransomware is a form of extortion-based attack that locks
the victim’s digital resources and requests money to release them. The
recent resurgence of high-proﬁle ransomware attacks, particularly in crit-
ical sectors such as the health care industry, has highlighted the pressing
need for eﬀective defenses. While users are always advised to have a reli-
able backup strategy, the growing number of paying victims in recent
years suggests that an endpoint defense that is able to stop and recover
from ransomware’s destructive behavior is needed.
In this paper, we introduce Redemption, a novel defense that makes
the operating system more resilient to ransomware attacks. Our approach
requires minimal modiﬁcation of the operating system to maintain a
transparent buﬀer for all storage I/O. At the same time, our system mon-
itors the I/O request patterns of applications on a per-process basis for
signs of ransomware-like behavior. If I/O request patterns are observed
that indicate possible ransomware activity, the oﬀending processes can
be terminated and the data restored.
Our evaluation demonstrates that Redemption can ensure zero data
loss against current ransomware families without detracting from the user
experience or inducing alarm fatigue. In addition, we show that Redemp-
tion incurs modest overhead, averaging 2.6% for realistic workloads.
1 Introduction
Ransomware continues to be one of the most important security threats on the
Internet. While ransomware is not a new concept (such attacks have been in
the wild since the last decade), the growing number of high-proﬁle ransomware
attacks [8,13,14,19] has resulted in increasing concerns on how to defend against
this class of malware. In 2016, several public and private sectors including the
healthcare industry were impacted by ransomware [9,11,35]. Recently, US oﬃ-
cials have also expressed their concerns about ransomware [16,20], and even
asked the U.S. government to focus on ﬁghting ransomware under the Cyberse-
curity National Action Plan [20].
In response to the increasing ransomware threat, users are often advised to
create backups of their critical data. Certainly, having a reliable data backup
Electronic supplementary material The online version of this chapter (doi:10.
1007/978-3-319-66332-6 5) contains supplementary material, which is available to
authorized users.
c(cid:2) Springer International Publishing AG 2017
M. Dacier et al. (Eds.): RAID 2017, LNCS 10453, pp. 98–119, 2017.
DOI: 10.1007/978-3-319-66332-6 5
Redemption: Real-Time Protection Against Ransomware at End-Hosts
99
policy minimizes the potential costs of being infected with ransomware, and is
an important part of the IT management process. However, the growing number
of paying victims [10,17,29] suggests that unsophisticated users – who are the
main target of these attacks – do not follow these recommendations, and easily
become a paying victim of ransomware. Hence, ransomware authors continue to
create new attacks and evolve their creations as evidenced by the emergence of
more sophisticated ransomware every day [7,32–34].
Law enforcement agencies and security ﬁrms have recently launched a pro-
gram to assist ransomware victims in retrieving their data without paying ran-
som fees to cybercriminals [30]. The main idea behind this partnership is that
reverse engineers analyze the cryptosystems used by the malware to extract
secret keys or ﬁnd design ﬂaws in the way the sample encrypts or deletes ﬁles.
While there are ransomware families that are infamous for using weak cryptog-
raphy [12,22,24], newer ransomware variants, unfortunately, have learned from
past mistakes by relying on strong cryptographic primitives provided by stan-
dard cryptographic libraries. In response to the increasing number of ransomware
attacks, a desirable and complementary defense would be to augment the oper-
ating system with transparent techniques that would make the operating system
resistant against ransomware-like behavior. However, an endpoint approach to
defend against unknown ransomware attacks would need to immediately stop
attacks once the ransomware starts destroying ﬁles, and should be able to recover
any lost data.
This paper presents a generic, real-time ransomware protection approach to
overcome the limitations of existing approaches with regard to detecting ran-
somware. Our technique is based on two main components: First, an abstract
characterization of the behavior of a large class of current ransomware attacks
is constructed. More precisely, our technique applies the results of a long-term
dynamic analysis to binary objects to determine if a process matches the abstract
model. A process is labeled as malicious if it exhibits behaviors that match
the abstract model. Second, Redemption employs a high-performance, high-
integrity mechanism to protect and restore all attacked ﬁles by utilizing a trans-
parent data buﬀer to redirect access requests while tracking the write contents.
In this paper, we demonstrate that by augmenting the operating system with
a set of lightweight and generic techniques, which we collectively call Redemp-
tion, it is possible to stop modern ransomware attacks without changing the
semantics of the underlying ﬁle system’s functionality, or performing signiﬁcant
changes in the architecture of the operating system. Our experiments on 29
contemporary ransomware families show that our approach can be successfully
applied in an application-transparent manner, and can signiﬁcantly enhance the
current protection capabilities against ransomware (achieving a true positive
[TP] rate of 100% at 0.8% false positives [FPs]). Finally, we show that this goal
can be achieved without a discernible performance impact, or other changes to
the way users interact with standard operating systems. To summarize, we make
the following contributions.
100
A. Kharraz and E. Kirda
– We present a general approach to defending against unknown ransomware
attacks in a transparent manner. In this approach, access to user ﬁles is medi-
ated, and privileged requests are redirected to a protected area, maintaining
the consistent state of user data.
– We show that eﬃcient ransomware protection with zero data loss is possible.
– We present a prototype implementation for Windows, and evaluate it with
real users to show that the system is able to protect user ﬁles during
an unknown ransomware attack while imposing no discernible performance
overhead.
The rest of the paper is structured as follows. Section 2 presents related work.
In Sect. 3, we present the threat model. In Sect. 4, we elaborate on the architec-
ture of Redemption. In Sect. 6, we provide more details about the implemen-
tation of the system. In Sect. 7, we present the evaluation results. Limitations of
the approach are discussed in Sect. 8. Finally, Sect. 9 concludes the paper.
2 Related Work
The ﬁrst scientiﬁc study on ransomware was performed by Gazet [18] where he
analyzed three ransomware families and concluded that the incorporated tech-
niques in those samples did not fulﬁll the basic requirements for mass extor-
tion. The recent resurgence of ransomware attacks has attracted the attention
of several researchers once more. Kharraz et al. [22] analyzed 15 ransomware
families including desktop locker and cryptographic ransomware, and provided
an evolution-based study on ransomware attacks. The authors concluded that
a signiﬁcant number of ransomware in the wild has a very similar strategy to
attack user ﬁles, and can be recognized from benign processes. In another work,
Kharraz et al. [21] proposed Unveil, a dynamic analysis system, that is speciﬁ-
cally designed to assist reverse engineers to analyze the intrinsic behavior of an
arbitrary ransomware sample. Unveil is not an end-point solution and no real
end-user interaction was involved in their test. Redemption is an end-point
solution that aims diﬀerentiate between benign and malicious ransomware-like
access requests to the ﬁle system.
Scaife et al. [31] proposed CryptoDrop which is built upon the premise that
the malicious process aggressively encrypts user ﬁles. In the paper, as a lim-
itation of CryptoDrop, the authors state that the tool does not provide any
recovery or minimal data loss guarantees. Their approach is able to detect a
ransomware attack after a median of ten ﬁle losses. Redemption does not have
this limitation as it is designed to protect the consistent state of the original ﬁles
by providing full data recovery if an attack occurs. Hence, unlike CryptoDrop,
Redemption guarantees minimal data loss and is resistant to most of realistic
evasion techniques that malware authors may use in future.
Very recently, Continella et al. [15], and Kolodenker et al. [23] concur-
rently and independently proposed protection schemes to detect ransomware.
Continella et al.
[15] proposed ShieldFS which has a similar goal to us.
Redemption: Real-Time Protection Against Ransomware at End-Hosts
101
The authors also look at the ﬁle system layer to ﬁnd typical ransomware activ-
ity. While ShieldFS is a signiﬁcant improvement over the status quo, it would
be desirable to complement it with a more generic approach which is also resis-
tant to unknown cryptographic functions. Unlike ShieldFS, Redemption does
not rely on cryptographic primitive identiﬁcation which can result in false posi-
tive cases. More importantly, this was a conscious design choice to minimize the
interference with the normal operation of processes, minimize the risk of process
crashes and avoid intrusive pop-up prompts which can have noticeable usability
side-eﬀects.
Kolodenker et al. [23] proposed PayBreak which securely stores cryptographic
encryption keys in a key vault that is used to decrypt aﬀected ﬁles after a ran-
somware attack. In fact, KeyBreak intercepts calls to functions that provide cryp-
tographic operations, encrypts symmetric encryption keys, and stores the results
in the key vault. After a ransomware attack, the user can decrypt the key vault
with his private key and decrypt the ﬁles without making any payments. The per-
formance evaluation of the system also shows that PayBreak imposes negligible
overhead compared to a reference platform. Similar to ShieldFS, PayBreak relies
on identifying functions that implement cryptographic primitives. As mentioned
earlier, Redemption does not depend on any hooking technique to identify
cryptographic functions. Furthermore, the detection accuracy of Redemption
is not impacted by the type of packer a ransomware family may use to evade
common anti-malware systems. This makes Redemption a more generic solu-
tion to the same problem space.
The evaluation of Redemption covers a signiﬁcantly larger number of ran-
somware families compared to [15,31] and shows it can successfully identify
unseen ransomware attacks after observing a median of ﬁve exposed ﬁles with-
out any data loss. Indeed, Redemption shares some similarity with Crypto-
Drop, ShieldFS, and PayBreak due to the common characteristics of ransomware
attacks. However, extracting such behavior of ransomware is not the main con-
tribution of the paper as they have been comprehensively discussed in several
security reports. Rather, Redemption is the introduction of a high performance,
data loss free end-user protection framework against ransomware that protects
the consistent state of the entire user space and can be used as an augmented
service to the operating system. We are not aware of any other scientiﬁc work
on the protection against ransomware attacks.
3 Threat Model
In this paper, we assume that ransomware can employ any standard, popu-
lar techniques to attack machines similar to other types of malware. That is,
ransomware can employ several strategies to evade the detection phase, compro-
mise vulnerable machines, and attack the user ﬁles. For example, a ransomware
instance could be directly started by the user, delivered by a drive-by download
attack, or installed via a simple dropper or a malicious email attachment.
We also assume that the malicious process can employ any techniques to
generate the encryption key, use arbitrary encryption key lengths, or in general,
102
A. Kharraz and E. Kirda
utilize any customized or standard cryptosystems to lock the ﬁles. Ransomware
can access sensitive resources by generating new processes, or by injecting code
into benign processes (i.e., similarly to other classes of malware). Furthermore,
we assume that a user can install and run programs from arbitrary untrusted
sources, and therefore, that malicious code can execute with the privileges of
the user. This can happen in several scenarios. For instance, a user may install,
execute and grant privileges to a malicious application that claims to be a well-
known legitimate application, but in fact, delivers malicious payloads – including
ransomware.
In addition, in this work, we also assume that the trusted computing base
includes the display module, OS kernel, and underlying software and hardware
stack. Therefore, we can safely assume that these components of the system
are free of malicious code, and that normal user-based access control prevents
attackers from running malicious code with superuser privileges. This is a fair
assumption considering the fact that ransomware attacks mainly occur in the
user-mode.
1
2
1
2
6
5
4
Redemption 
Monitor
3
Fig. 1. Redemption mediates the access to the ﬁle system and redirects each write
request on the user ﬁles to a protected area without changing the status of the original
ﬁle. Reading the user ﬁles, creating and writing on new ﬁles follow the standard 2-step
procedure since they do not introduce any risk with regard to ransomware attacks on
user data.
4 Design Overview
In this section, we provide our design goals for Redemption. We refer the
reader to Sect. 6 for details of our prototype implementation. Redemption has
two main components. First, a lightweight kernel module that intercepts process
interactions and stores the event, and manages the changes in a protected area.
Second, a user-mode daemon, called behavioral monitor and notiﬁcation module,
that assigns a malice score to a process, and is used to notify the user about the
potential malicious behavior of a process.
Redemption: Real-Time Protection Against Ransomware at End-Hosts
103
Intercepting Access Requests. In order to implement a reliable dynamic
access control mechanism over user data, this part of the system should be
implemented in the kernel, and be able to mediate the access to the ﬁle system.
The prototype redirects each write access request to the user ﬁles to a protected
area without changing the status of the original ﬁle. We explain more details on
how we implemented the write redirection semantics in Sect. 6.
Figure 1 presents an example that illustrates how access requests are
processed. In an unmodiﬁed system, the request would succeed if the corre-
sponding ﬁle exists, and as long as the process holds the permission. The system
introduces the following changes. (1) Redemption receives the request A from
the application X to access the ﬁle F at the time t, (2) if At requests access with
write or delete privilege to the ﬁle F , and the ﬁle F resides in a user deﬁned path,
the Redemption’s monitor is called, (3) Redemption creates a corresponding
ﬁle in the protected area, called reﬂected ﬁle, and handles the write requests.
These changes are periodically ﬂushed to the storage to ensure that they are
physically available on the disk. The meta-data entry of the corresponding ﬁle
is updated with the oﬀset and length of the data buﬀer in the I/O request after
a successful data write at Step 3. (4) the malice score of the process is updated,
and is compared to a pre-conﬁgured threshold α. (5) the Redemption monitor
sends a notiﬁcation to the display monitor to alert the user depending on the
calculated malice score. (6) a success/failure notiﬁcation is generated, and is sent
to the system service manager.
Data Consistency. An important requirement for Redemption is to be able
to guarantee data consistency during the interaction of applications with the
ﬁle system. A natural question that arises here is what happens if the end-user
conﬁrms that the suspicious operations on the ﬁle that was detected by the
system are in fact benign. In this case, having a consistency model is essential to
protect the benign changes to the user ﬁles without on-disk data corruption. The
implementation of the consistency policy should maintain the integrity properties
the applications desire from the ﬁle system. Failure to do so can lead to corrupted
application states and catastrophic data loss. For this reason, the system does
not change the ﬁle system semantics that may aﬀect the crash guarantees that
the ﬁle system provides. To this end, Redemption operates in three steps:
(1) it reads the meta-data generated for the reﬂected ﬁle, and creates write
requests based on the changed data blocks, and changes the status of these
blocks to committed, (2) upon receiving the conﬁrmation notiﬁcation, the system
updates the meta-data of the reﬂected ﬁle from committed to conﬁrmed, and (3)
the reﬂected ﬁle is deleted from the protected area.
Another question that arises here is how the system protects the consistency
of the original ﬁle during the above-mentioned three-steps procedure if a system
crash occurs. In case of a crash, the system works as follows: (1) if data is
committed (Step 1), but the corresponding meta-data is not updated (Step 2),
the system treats the change as incomplete, and discards the change as a rollback
of an incomplete change. This operation means that Step 2 is partially completed
before a crash, so the system repeats the Step 1, (2) If the meta-data of the
104
A. Kharraz and E. Kirda
reﬂected ﬁle is updated to conﬁrmed, it means that the benign changes to the
ﬁle has been successfully committed to the original ﬁle. In this case, the reﬂected
ﬁle is removed from the protected area. Note that a malicious process may attack
the Malice Score Calculation (MSC) function by trying to keep the malice score
of the process low while performing destructive changes. We elaborate more on
these scenarios in Sect. 8.
User Notiﬁcation. The trusted output that Redemption utilizes is a visual
alert shown whenever a malicious process is detected. We have designed the
alert messages to be displayed at the top of the screen to be easily noticeable.
Since benign applications usually require sophisticated inputs (i.e., clicking on
speciﬁc buttons, ﬁlling out the path prompt) from the user before performing
any sensitive operation on the ﬁles, the user is highly likely to be present and
interacting with the computer, making it diﬃcult for her to miss an alert.
5 Detection Approach
As mentioned earlier, an important component of Redemption is to perform
system-wide application monitoring. For each process that requires privileged
access to user ﬁles, we assign a malice score. The malice score of a process
represents the risk that the process exhibits ransomware behavior. That is, the
malice score determines whether the Redemption monitor should allow the
process to access the ﬁles, or notify the user. In the following, we explain the
features we used to calculate the malice score of a process. The features mainly
target content-based (i.e., changes in the content of each ﬁle) and behavior-based
(i.e., cross-ﬁle behavior of a process) characteristics of ransomware attacks.
5.1 Content-Based Features
Entropy Ratio of Data Blocks. For every read and write request to a ﬁle,
Redemption computes the entropy [25] of the corresponding data buﬀers in
the I/O traces similar to [21]. Comparing the entropy of read and write requests
to and from the same ﬁle oﬀset serves as an excellent indicator of ransomware
behavior. This is due to the popular strategy of reading in the original ﬁle data,
encrypting it, and writing the encrypted version.
File Content Overwrite. Redemption monitors how a process requests write
access to data blocks. In a typical ransomware attack, in order to minimize the
chance of recovering ﬁles, the malicious process overwrites the content of the
user ﬁles with random data. Our system increases the malice score of a process
as the process requests write access to diﬀerent parts of a ﬁle. In fact, a process
is assigned a higher malice score if it overwrites all the content of the ﬁles.
Delete Operation. If a process requests to delete a ﬁle that belongs to the end-
user, it receives a higher malice score. Ransomware samples may not overwrite
the data block of the user ﬁles directly, but rather generate an encrypted version
of the ﬁle, and delete the original ﬁle.
Redemption: Real-Time Protection Against Ransomware at End-Hosts
105
5.2 Behavior-Based Features
Directory Traversal. During an attack, the malicious process often arbitrarily
lists user ﬁles, and starts encrypting the ﬁles with an encryption key. A process
receives a higher malice score if it is iterating over ﬁles in a given directory. Note
that a typical benign encryption or compression program may also iterate over
the ﬁles in a directory. However, the generated requests are usually for reading
the content of the ﬁles, and the encrypted or compressed version of the ﬁle is
written in a diﬀerent path. The intuition here is that the ransomware usually
intends to lock as many ﬁles as possible to force the victim to pay.
Converting to a Speciﬁc File Type. A process receives a higher malice score
if it converts ﬁles of diﬀering types and extensions to a single known or unknown
ﬁle type. The intuition here is that in many ransomware attacks, unlike most
of the benign applications that are speciﬁcally designed to operate on speciﬁc
types of ﬁles, the malicious process targets all kinds of user ﬁles. To this end,
Redemption logs if a process requests access to widely varying classes of ﬁles
(i.e., videos, images, documents). Note that accessing multiple ﬁles with diﬀer-
ent extensions is not necessarily malicious. Representative examples include the
media player to play .mp3 ﬁles (audio) as well as .avi (video) ﬁles. However,
such applications typically open the ﬁles with read permission, and more impor-
tantly, only generate one request in a short period of time since the application
requires speciﬁc inputs from the user. Hence, the key insight is that a malicious
ransomware process would overwrite or delete the original ﬁles.
Access Frequency. If a process frequently generates write requests to user
ﬁles, we would give this process a higher malice score. We monitor δ – the time
between two consequent write access requests on two diﬀerent user ﬁles. Our
intuition is that ransomware attacks programmatically list the ﬁles and request