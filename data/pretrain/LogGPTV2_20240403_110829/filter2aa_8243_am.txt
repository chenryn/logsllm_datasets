        if t4 goto 2 else 3
.2:
        t5 = &a[t3]
        t6 = *t5
        t7 = t1 + t6
        jump 1
.1:
        t1 = phi [0: 0:int, 2: t7] #damn
        t2 = phi [0: -1:int, 2: t3]
        t3 = t2 + 1:int
        t4 = t3 &nbsp;
הקטע הזה מייצג את
הריצה של פונקציה בשם Kendrick. היא מקבלת משתנה בשם a, ומתייחסת אליו כמערך. 
לאורך הקוד, ניתן
לראות הגדרות של &quot;תוויות&quot; כגון &quot;:0.&quot;, “:1.” וכו'. תוויות אלו משמשות לניהול הריצה של הפונקציה. למשל, ניהול
של לולאה יכלול בדיקת תנאי ואז קפיצה אל תווית של תוכן הלולאה במקרה אחד, או קפיצה
אל התווית של הלוגיקה שאחרי הלולאה במקרה אחר. למעשה, זה בדיוק מה שאנחנו רואים ב-Kendrick – התווית &quot;1&quot; היא בדיקת
תנאי הלולאה, התווית &quot;2&quot; היא תוכן הלולאה והתווית &quot;3&quot; היא
הלוגיקה שאחרי הלולאה. בריצה הזו, הלולאה רצה פעם אחת באופן מלא ואז סיימה את
פעולתה. בתרגום ל-Python, הפונקציה
שקולה (כנראה) ל:
```python
def kendrick(a): #sum
     damn = 0
     t2 = -1
     while (t2 + 1 &nbsp;
על מנת לתרגם את
הפונקציה, עבדתי בשיטה איטרטיבית של צמצום.
השלב הראשון:
```
.0:
        t0 = len(a)
        jump 1
.1:
        t1 = phi [0: 0:int, 2: t7] #damn
        t2 = phi [0: -1:int, 2: t3]
        t3 = t2 + 1:int
        t4 = t3 בשלב הבא:
```
.1:
        t1 = phi [0: 0:int, 2: t7] #damn
        t2 = phi [0: -1:int, 2: t3]
        t3 = t2 + 1:int
        t4 = t3 משתנים מסוג phi הם כאלה שמקבלים
לפעמים ערך אחד ולפעמים ערך אחר. במקרים רבים הערך הראשון הוא ערך התחלתי והערך
השני הוא ערך הריצה.
```
damn = 0 # a.k.a. t1, a.k.a. t7
i = -1 # a.k.a. t2, a.k.a. t3
.1:
        i = i+ 1
        if i ומשם לא קשה להגיע
ללולאה שראינו ב-Python.
&nbsp;
באמצעות הלוגיקה
הזו, תרגמתי את ה-Trace כולו:
```python
class TraceException(Exception):
    pass
def guru(a, b): # Max
     if a > b:
           return a
     else:
           return b
def andre(a, b): # Multiply
     t10 = [0] * (len(a) + len(b))
     for i in range(len(b)):
           for j in range(len(a)):
                t10[i + j] += (a[j] * b[i])
     t21 = len(t10[:len(t10) - 1])
     for i in range(t21):
           if (t10[i] >= 10):
                t10[i + 1] += (t10[i] // 10)
                t10[i] = t10[i] % 10
     return t10
def rakim(a, b):
     if (doom(a, b) == -1):
           raise TraceException("1")
     else:
           t5 = [None] * len(a)
           for i in range(len(a)):
                a_i = 0
                b_i = 0
                #3
                if i = 1):
           if aa[ii] == 0:
                aa[ii] = 0
           else:
                ii -= 1
     """
     i = len(aa) - 1
     m = []
     while (i >= 0):
           if aa[i] > 0:
                m = aa[:i + 1]
                break
           else:
                i -= 1
     i = len(bb) - 1
     f = []
     while (i >= 0):
           if (bb[i] > 0):
                f = bb[:i + 1]
                break
           else:
                i -= 1
     """
     i = len(aa) - 1
     while(i >= 0):
           if aa[i] > 0:
                t43 = 0 + aa[i]
     """
     if (len(m) > len(f)):
           return 1
     if (len(m) = 0):
           #25
           if m[i] > f[i]:
                #28
                raise TraceException("3")
           else:
                #29
                if m[i] < m[i]: