### Profile Information and Services

Profile information and services, such as authentication and policy management, are essential components of modern web applications. However, the usability of the OpenID identifier scheme can be improved. Web users often perceive a URI as a "web address" rather than a personal identifier. In the context of web content sharing, users rarely know the URIs of those with whom they want to share content, but they typically know each other's email addresses. Major service providers, such as Google, Yahoo, and AOL, use email addresses as user IDs. Our solution, OpenIDemail, allows web users to log in to Content Service Providers (CSPs) using their email addresses while transparently using OpenID identifiers. This enhances the user experience, making it similar to what users are accustomed to today.

### Distributed Authorization and Background of RT

In decentralized environments like the web, content owners and requestors often do not know each other. There is extensive literature on authorization in distributed environments. PolicyMaker introduced the term "trust management" to describe an access control model where authorization decisions are based on locally stored security policies and distributed credentials, without explicit authentication of the requestor’s identity or a centralized repository of access rules. Policies and credentials in PolicyMaker are written in a general programming language like AWK, which, although flexible, makes it difficult to understand the overall access policy for a protected resource.

KeyNote, the next version of PolicyMaker, uses a C-like notation and regular expression syntax for describing conditions. SPKI/SDSI is a digital certificate scheme for authorization, providing methods for binding authorization privileges to keys and for localized name spaces and linked local names. Credentials in KeyNote and SPKI/SDSI delegate certain permissions from an issuer to a subject, forming a capability that authorizes the subject at the end of the chain. However, these systems do not support attribute inferencing and attribute-based delegation.

RT (Role-Based Trust) is a family of languages that add the concept of Role-Based Access Control (RBAC) to trust management systems like KeyNote and SPKI/SDSI. In our approach, RT is used to express access-control policies. The RT language combines the strengths of RBAC and trust management to form a concise and expressive language. All policy statements and credentials in RT take the form `A.r <- exp`, where `A` is an entity, `r` is a role, and `exp` is a role expression. An entity in RT is a uniquely identified individual or process that can issue credentials and make requests, and a role is a set of entities who are members of that role. The credential `A.r <- exp` means that the members of `A.r` include all members of `exp`.

There are four types of credentials in RT, each corresponding to a different way of defining role membership and a different level of delegation:

1. **Type 1: A.r <- B** - Entity `A` defines entity `B` as a member of role `r`. For example, `CCA.scout <- Alice` certifies Alice as a Girl Scout member.
2. **Type 2: A.r <- B.r1** - Role `A.r` is defined to contain every entity that is a member of `B.r1`. This can represent a simple delegation from `A` to `B`. For instance, `Alice.scout <- CCA.scout` defines all Girl Scouts in CCA as Alice's scout friends.
3. **Type 3: A.r <- A.r1.r2** - Role `A.r` is defined to contain `B.r2` for every `B` that is a member of `A.r1`. This represents a delegation from `A` to the members of `A.r1`. For example, `Alice.scout.parent <- Alice.scout.parent` delegates the authority over "parent" to those member scouts.
4. **Type 4: A.r <- B1.r1 ∩ ... ∩ Bk.rk** - Role `A.r` is defined to contain the intersection of all roles `B1.r1, ..., Bk.rk`. This represents partial delegation from `A` to `B1, ..., Bk`. For instance, `Alice.close_friend <- CCA.scout ∩ LSES.class_2006` shares content with close friends who are both classmates and scouts.

### Related Work

Microsoft Live Mesh and Dropbox provide centralized web locations for storing personal content that can be accessed and synchronized across multiple devices. Both solutions are easy to use but only accept users within their administrative domain and do not support grouping or delegation.

YouServ enables users to share content using personal computers by leveraging technologies like personal web servers, dynamic DNS, proxies, and replications. YouServ-hosted content is publicly accessible unless it is in private folders, and access is controlled through a single-sign-on authentication service and whitelisting in an `access.txt` file.

ScoopFS is another personal web server-based content sharing solution, designed for ease of use. Each user has a unique mailbox identified by a Web-Key, similar to a secret link. However, content recipients need to install ScoopFS and manually exchange Web-Keys.

Mannan et al. proposed a scheme for personal web content sharing using the "circle of trust" in Instant Messaging (IM) networks. This scheme allows content to be accessible only to IM contacts, but both the owner and requester must be on the same IM network, and the system does not support trust and delegation.

Carminati et al. proposed an access control mechanism for web-based social networks, where policies are expressed as constraints on the type, depth, and trust level of existing social relationships. This system requires a special software module on the end-user’s machine and supports limited delegation. Lockr is another access control mechanism based on social relationships, but its expressive power is limited to value matching, and credentials must be manually sent and found by users.

### System Architecture and Data Flows

Figure 1 illustrates the system architecture of our proposed solution and data flows among the main actors. Our design is guided by a previously proposed Web 2.0 content sharing model, where a user is a content owner, consumer, and credential issuer. Users enroll identities from multiple identity providers to access shared content and construct access policies. A content owner creates personal content on CSPs and associates it with access-control policies hosted by a policy provider.

To access shared content, a content consumer chooses an appropriate identity to make a request. Each request contains the identity provided by the consumer and context information, such as user-specific profile attributes, location, date/time, and user credentials. A CSP requests authorization decisions from a policy provider, which acts as a Policy Decision Point (PDP) and responds with decisions based on the request context and pre-defined credentials and policies.

#### Additional Players

Our solution includes two additional players: an OpenPolicy provider and an OpenIDemail provider. The OpenPolicy provider offers policy-hosting services for users to organize credentials and policies and web services for CSPs to make authorization decisions. The OpenIDemail provider is an existing email provider augmented with an Email Address to URL Translation (EAUT) service and an Email service, allowing users to log in to CSPs using their email addresses while using OpenID identifiers.

#### Login Process

1. User U presents her email e to CSP C.
2. C parses the domain d from e and forms an EAUT Discovery Endpoint URL u.
3. C retrieves an XRDS-Simple document on u and looks up values representing an EAUT Template or Mapping Service Endpoint URL m.
4. C translates or maps e to an OpenID identifier i via m.
5. C proceeds with the original OpenID protocol using the OpenID identifier i.

#### Sharing Content

1. Content owner W specifies that content c on CSP C should be shared.
2. C generates a secret-link l based on content c.
3. C redirects W to her OpenPolicy provider P with secret-link l and a post-back URL b.
4. P presents a role-selection UI to W.
5. W specifies a set of roles R as recipients of c.
6. For each role r in R, P sends out l to a set of destination email addresses E = { e | e ∈ members(r)}.
7. Once the mailing is completed, P calls b on C with R and l.
8. C stores the tuple (l, c, R) as an access-control list for c.

#### Accessing Shared Content

1. User U presents l to CSP C.
2. C prompts U for an email account and redirects U to her OpenIDemail provider for authentication.
3. Once authenticated, the OpenIDemail provider redirects U back to C with a claimed OpenID identifier and a token.
4. C verifies the claimed OpenID identifier, retrieves the roles associated with the shared content, and requests an access decision from the owner’s OpenPolicy provider.
5. The CSP provides the OpenPolicy provider with the user’s OpenID identifier and the associated role to determine if the request should be permitted.