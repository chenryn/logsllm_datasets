b
m
u
N
Number of users own the movie in one day
Movie1
Movie2
Movie3
7000
6500
6000
5500
5000
4500
4000
3500
3000
2500
2000
1500
1000
500
0
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
Time of a day (Hour)
Figure 9: Number of users owning at least one chunk
of the movie at diﬀerent time points
o
i
t
a
R
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
1
Average ratio users own chunks within one day
Movie1 (total # of chunks: 121)
Movie2 (total # of chunks:  67 )
Movie3 (total # of chunks: 151)
11 21 31 41 51 61 71 81 91 101 111 121 131 141 151
Chunk Index
Figure 10: Average owning ratio for all chunks in
the three movies
browse through the beginning of a movie. The health index
of other chunks, is still acceptable since at least 30% of the
peers have those chunks.
To obtain a ﬁner granularity of the health index, we com-
pare the number of replication of chunk i versus the total
number of demand for chunk i. The total number of demand
of chunk i in one day is derived from the user-behavior data,
MVRs, and they were collected at the same measurement
time as the health index data (from 00:00, January 6, 2008
to 24:00, January 6, 2008). Based on the starting viewing
time (ST), ending viewing time (ET) and the starting posi-
tion (SP), one can determine which chunks a peer demanded
during the viewing action. Figure 11 shows the chunk avail-
ability and chunk demand within a 24-hours measurement
period. From the ﬁgure, we can conclude that: (a) The
health index for these three movies are very good since the
number of replicated chunk is much higher than the work-
load demand. (b) The large ﬂuctuation of the chunk avail-
ability for Movie 2 is due to the high interactivity of users.
(c) Users tend to skip the last chunk of the movie (which
corresponds to the movie epilog). To improve the quality of
viewing, one may want to provide an anchor point at that
position.
Another way to evaluate the replication health of a movie
is to determine the ratio between the number of available
(or replicated) chunks to the number of chunks demanded
as time evolves. Let AT Di(t) be the available to demand
ratio for chunk i at time t, or
AT Di(t) =
Number of replicated chunk i at t
Number of demand for chunk i at t
,
then the available to demand ratio for movie m at time t is:
(cid:2)N
i=1 AT Di(t)
,
N
AT Dm(t) =
where N is the total number of chunks for movie m. Figure 12
shows the available to demand ratios, AT D1(t), AT D2(t)
and AT D3(t) in a 24-hours period. Figure 13 shows the
temporal average (means) and standard deviations on the
number of available (replicated) chunks of these three movies
in a 24-hours period.
The availabe to demand ratio of three movies in one day
Movie1
Movie2
Movie3
100
90
80
70
60
50
40
30
20
10
)
t
(
D
T
A
0
0 1 2 3 4 5 6 7 8 9 1011 12 1314 15 16 1718 19 2021 22 23 24
Time (hour)
Figure 12: The ratio of the number of available
chunks to the demanded chunks within one day
Mean and standard deviation of chunks of three movies in one day
 Movie1
 Movie2
 Movie3
7000
6000
5000
4000
3000
2000
1000
e
u
l
a
V
0
0 1 2 3 4 5 6 7 8 9 1011 12 1314 15 16 1718 19 2021 22 23 24
Time (Hour)
Figure 13: Temporal means and standard deviations
of the number of replicas of all chunks of these three
movies within one day
To provide good scalability and quality viewing, AT Di(t)
has to be greater than 1. From Figure 12, we observe that
AT Di(t) ≥ 3 for all time t. One can also observe from
Demand and available chunk volume in one day − Movie 1
Demand and available chunk volume in one day − Movie 2
Demand and available chunk volume in one day − Movie 3
25000
20000
15000
10000
5000
s
k
n
u
h
c
f
o
r
e
b
m
u
N
Available
Demand
60000
50000
40000
30000
20000
10000
s
k
n
u
h
c
f
o
r
e
b
m
u
N
Available
Demand
Available
Demand
7000
6000
5000
4000
3000
2000
1000
s
k
n
u
h
c
f
o
r
e
b
m
u
N
0  
1 11 21 31 41 51 61 71 81 91 101 111 121
Chunk Index
0
1
7
13 19 25 31 37 43 49 55 61 66
Chunk Index
0
1
16
31
46
76
61
Chunk Index
91 106 121 136 151
Figure 11: Comparison of number replicated chunks and chunk demand of three movies in one day
Figure 13 that these three movies have high temporal means
and low standard deviations. This indicates that the overall
replication health of these video object is very good. One
interesting observation is that we have two peaks for Movie 2
at 12:00 or 19:00. At these two peaks, the AT D2(t) and the
temporal mean of Movie 2 are very high. This is contributed
by the fact that there is a large number of arrivals at these
times (refer to Figure 9) and all these users want to watch
Movie 2.
4.4 User satisfaction index
User satisfaction index is used to measure the quality of
viewing as experienced by users. A low user satisfaction
index implies that peers are unhappy and these peers may
choose to leave the system. As a result, this will reduce
the service capacity and scalability of a P2P-VoD system.
From the view point of a streaming content provider, this is
probably one of the most important measures that he/she
needs to keep track.
To measure the user satisfaction index, we use the ﬂu-
ency F (m, i) as deﬁned in Equation (1). The computation
of F (m, i) was described in Section 3. Note that this com-
putation is carried out by the client software in examining
all the MVRs generated during the viewing period. There-
fore, the ﬂuency computation is carried out in a distributed
manner. The client software reports all MVRs and the ﬂu-
ency F (m, i) to the log server whenever a “stop-watching”
event occurs, that is, either the STOP button is pressed, or
another movie/programme is selected, or the user turns oﬀ
the P2P-VoD software.
We give a simple example in Figure 14 to illustrate the
generation of MVRs and ﬂuency index. As shown in Figure
14, a user starts to watch the movie at time t0 and he drags
the track-bar to position i at time t1. The ﬁrst MVR is
created (and stored in the peer’s local disk) at this time.
After then, the user drags the track-bar again and jumps to
the (N −1)th position of the movie and the second MVR is
created. Finally, the user presses the STOP button to stop
viewing the movie at time t3. At this point, the last MVR
is created and because it is a stop-watching event, the client
software computes the ﬂuency index F . All three MVRs as
well as the ﬂuency index will then be transmitted to the log
server.
To quantify the ﬂuency index, we collected one day worth
of trace for the three movies and the measurement duration
is the same as the measurement period of the movie health
index data, that is, from 00:00, January 6, 2008 to 24:00,
January 6, 2008. To reduce the amount of data traﬃc, sam-
pling is carried out once every hour.
0
1
2
3
Movie Length
.. ..
..
i
Position
..
.. N-1 N
b1
d1
b21 d21 b22
t0
t1
MVR1
d22 b3 d3
t3
t2
MVR2 MVR3
STOP
t
MVR1:
MVR2:
MVR3:
UID MID ST
U1
t0
t1
U1
U1
t2
M1
M1
M1
SP
0
i
ET
t1
t2
t3 N-1
+
fluency
index
Figure 14: Example of generating ﬂuency index
Number of fluency indexes reported in one day
Movie1
Movie2
Movie3
800
700
600
500
400
300
200
100
s
d
r
o
c
e
r
y
c
n
e
u
l
f
f
o
r
e
b
m
u
N
0
0 1 2 3 4 5 6 7 8 9 1011 12 1314 15 16 1718 19 2021 22 23 24
Time (Hour)
Figure 15: Number of ﬂuency indexes reported by
users to the log server
Figure 15 shows the number of ﬂuency records that are
reported to the log server at diﬀerent times during the one
day period. The number of ﬂuency records is a good indi-
cator of the number of viewers of that movie. We observe
that the number of viewers drops after 01:00. Then it starts
to increase after 09:00 and reaches the peak around 16:00.
The number of viewers drop afterward and again picks up
after 19:00 and reaches the second peak at time 24:00. In
summary, this ﬁgure illustrates the number of viewers in the
system at diﬀerent time points.
Figure 16 illustrates the distribution of ﬂuency index of
these three movies within a 24-hour period. First, we di-
vide the ﬂuency interval [0, 1] into ten sub-intervals: [0, 0.1),
[0.1, 0.2), . . ., [0.9, 1.0). A ﬂuency value greater than 0.8 is
Distribution of fluency index of three movies in one day
                Movie1
                Movie2
                Movie3
load. The server has implemented the memory-pool tech-
nique which makes the usage of the memory more eﬃcient
and this could be observed at the bottom sub-ﬁgure of Fig-
ure 18 that the memory usage is very stable.
)
%
(
t
n
e
c
r
e
P
50
45
40
35
30
25
20
15
10
5
0
200
160
120
80
40
0
12:00 18:00 24:00
100
80
60
40
20
0
12:00 18:00 24:00
40
38
36
34
32
30
12:00 18:00 24:00
s
p
b
M
)
%