I've noticed some odd behavior in Deno.compile().
The first time I compile a file it works more or less as expected. But if I
change or delete the source file and call Deno.compile() a second time I get
the same result as the first time. Apparently Deno is caching the source file.
I'd like to do a fresh compile every time. I'm purposely trying to push new
changes out to web users. I'd rather not call an external process to compile
the TypeScript inputs before serving the JavaScript output to web users. I
guess I could, but I'd rather use the compiler API built into Deno.
The caching is done within the process. As soon as I restart my Deno process,
the cache is clear. The next time I call Deno.compile() it will reread the
source file. But only that next time.
Deno is caching the input files, not the results. So the compiler still takes
a long time to run and it still produces a ton of warning messages.
These are all local files. Caching a local file will not save any resources.
Ideal solution: Deno.compile() would do no caching, or it would give me the
option to explicitly clear the cache.
At a bare minimum, add a note to the documentation so the next person doesn't
get stuck.
Thanks!