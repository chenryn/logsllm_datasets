title:HeapTherapy: An Efficient End-to-End Solution against Heap Buffer
Overflows
author:Qiang Zeng and
Mingyi Zhao and
Peng Liu
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
HeapTherapy: An Efﬁcient End-to-end Solution
against Heap Buffer Overﬂows
Qiang Zeng*,
Mingyi Zhao*,
Peng Liu
The Pennsylvania State University
University Park, PA, 16802, USA
Email: {quz105, muz127, pliu}@psu.edu
Abstract—For decades buffer overﬂows have been one of the
most prevalent and dangerous software vulnerabilities. Although
many techniques have been proposed to address the problem,
they mostly introduce a very high overhead while others assume
the availability of a separate system to pinpoint attacks or provide
detailed traces for defense generation, which is very slow in
itself and requires considerable extra resources. We propose an
efﬁcient solution against heap buffer overﬂows that integrates
exploit detection, defense generation, and overﬂow prevention in
a single system, named HeapTherapy. During program execution
it conducts on-the-ﬂy lightweight trace collection and exploit
detection, and initiates automated diagnosis upon detection to
generate defenses in realtime. It can handle both over-write
and over-read attacks, such as the recent Heartbleed attack.
The system has no false positives, and keeps effective under
polymorphic exploits. It is compliant with mainstream hardware
and operating systems, and does not rely on speciﬁc allocation
algorithms. We evaluated HeapTherapy on a variety of services
(database, web, and ftp) and benchmarks (SPEC CPU2006); it
incurs a very low average overhead in terms of both speed (6.2%)
and memory (7.7%).
I.
INTRODUCTION
Programs written in C and C++ contain a large number of
buffer overﬂow bugs, which involve write or read going beyond
buffer boundaries.1 In addition to erroneous execution, buffer
overﬂow bugs can lead to various security threats, including
data corruption, control-ﬂow hijack, and information leakage.
The recently published Heartbleed vulnerability, which has
affected millions of servers, was due to a heap buffer over-
read bug that leads to information leakage [17], [28].
Although there are many tools dedicated to ﬁnding buffer
overﬂow bugs in testing stages [47], [25], [39], it is very
unlikely to eliminate all the bugs through testing. The reality
is that in 2014 one third of newly exposed software vulnerabil-
ities published by CERT were related to buffer overﬂows [45].
Therefore, measures that protect program execution against
overﬂow attacks are important. Such measures can be roughly
divided into three categories: (1) Full execution monitoring;
(2) Approaches that learn from history to improve themselves;
and (3) Measures that greatly increase the difﬁculty of exploit-
ing buffer overﬂows. Examples of the third category include
StackGuard [15], Data Execution Prevention [2], Address
Space Layout Randomization [49], [8], and concurrent heap
scanning [52], [44].
*These two authors have contributed equally.
1The term “overﬂow” in this paper refers to both over-write and over-read.
The ﬁrst category contains a variety of approaches, which
range from bounds checking [21], [38], [6]; to shadow memory
based checking [25], [39], [5], [12];
to control/data ﬂow
monitoring [23], [4], [11]; to N-version/N-variant systems [16],
[7], [30]. Even with many optimization methods they still
lead to a very high overhead, or require signiﬁcant extra
computing resources. For instance, AddressSanitizer [39] uses
a much more efﬁcient shadow mapping and a more compact
shadow encoding than Valgrind [25] and TaintTrace [12], but
still incurs 73% slowdown and over 3X memory overhead.
As another example, N-variant systems [16] requires doubling
hardware purchases and system maintenance, which is costly.
Instead of performing expensive full execution monitoring,
approaches in the second category generate tailored defenses
against learned vulnerabilities. Given a zero-day vulnerability,
they trade the prevention of the ﬁrst buffer overﬂow(s) for
subsequent low-cost protection. An example of the second
category is patching. However, generating patches is a lengthy
procedure. According to Symantec the average time for gener-
ating a critical patch for enterprise applications is 28 days [43].
A few approaches that generate defenses quickly after exploit
detection have been proposed. One popular approach is to
generate input ﬁlters to ﬁlter out suspicious input [22], [27],
[50]. However, the false negative rate rises when dealing with
input obfuscation, and false positives are a common issue for
identifying innocuous requests as attacks. A type of meth-
ods, such as Vulnerability-Speciﬁc Execution-based Filtering
(VSEF) [26], are based on the observation that, given a sample
exploit, only a small portion of instructions are relevant to the
exploit. A defense that instruments and monitors the relevant
part of the program execution is generated to block further
exploits. It is more efﬁcient than full execution monitoring
and performs better when handling input obfuscation.
However, VSEF relies on a separate system to provide
sample exploits for analysis and defense generation; how to
pinpoint malicious inputs efﬁciently is a challenging problem
in itself, and such a system might be unavailable due to
resource constraints. Second, a defense in VSEF takes effect
by instrumenting instructions accessing a speciﬁc overﬂow
target. While instructions that access a target near a vulnerable
buffer on the stack, such as a return address, can be easily
identiﬁed, it is very unlikely to determine the instructions that
access adjacent regions of a vulnerable heap buffer, for a heap
buffer can be allocated almost anywhere on the heap. A proper
solution to heap buffer overﬂows is missing in that work.
Finally, their more precise scheme incurs signiﬁcant memory
overhead, while the less precise one have false positives.
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
DOI 10.1109/DSN.2015.54
DOI 10.1109/DSN.2015.54
485
485
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:54:20 UTC from IEEE Xplore.  Restrictions apply. 
As stack-based buffer overﬂows are better addressed nowa-
days, heap buffer overﬂows gain growing attention of at-
tackers [35], [52]. By noticing that full program execution
monitoring usually incurs a high overhead, we target an
efﬁcient heap buffer overﬂow countermeasure falling into the
second category, i.e., learning from history to protect against
attacks. It should meet the following goals simultaneously:
(G1) All-in-one solution: trace collection and defense gen-
eration should be built directly into the production system,
so that it does not need a separate system and can respond
to any detection of attacks instantly. (G2) High efﬁciency:
the overall overhead should be low. (G3) High accuracy: the
generated defense should have few to no false positives and
negatives even with polymorphic attacks. (G4) Compliant with
mainstream hardware and runtime environment: it should not
require special hardware and can work with existing runtime
environment;
it does not depend on custom heap
allocation algorithms. To our knowledge there is no such
solution satisfying all the desirable requirements.
ideally,
In this paper, we present HeapTherapy, a highly efﬁcient
end-to-end solution against heap buffer overﬂows that meets
all the goals above. Unlike approaches applying costly bounds
checking or data/control ﬂow tracking, HeapTherapy employs
inexpensive techniques to identify vulnerable heap buffers
swiftly and enhance them locally. HeapTherapy contains in-
memory trace collection, online exploit detection and realtime
defense generation as part of the defense system. HeapTherapy
identiﬁes vulnerable heap buffers based on the intrinsic char-
acteristics of an exploit, as opposed to ﬁltering out malicious
inputs based on signatures, so it is effective under polymorphic
attacks. Finally, it can be easily deployed and does not rely on
speciﬁc allocation algorithms.
To detect over-read attacks HeapTherapy places inaccessi-
ble guard pages randomly throughout the heap space, so that,
when repetitive attacks such as Heartbleed are launched to
collect jigsaw pieces on the heap, it is highly probable that a
guard page is touched and hence the attack is detected before
signiﬁcant information is leaked. The widely deployed Address
Space Layout Randomization (ASLR) is used to facilitate
detection of over-write attacks, as a control ﬂow hijack attack
exploiting buffer over-writes causes the program to crash with
a high probability due to the difﬁculty of guessing randomized
addresses. This is used in many other defense techniques as
well [34], [50].
Instead of relying on a separate system to pinpoint and
replay offending requests, HeapTherapy collects lightweight
in-memory traces during program execution to assist defense
generation. Therefore, it avoids the cost and overhead due to
a separate system.
Given a heap buffer overﬂow vulnerability, the vulnerable
heap buffers must share some characteristics, and the charac-
teristic used in HeapTherapy is their common allocation-time
calling context. Thus, a defense generated by HeapTherapy
contains the calling context when a vulnerable heap buffer
was allocated. We employ a recent advance in calling context
representation and retrieval — the calling context encoding
technique [9], [42], [51], which continuously tracks the current
calling context with a very low overhead representing it
concisely as an integer, named a calling context ID. Whenever
a heap buffer is allocated, our malloc wrapper compares the
current calling context ID against the one contained in any
defense. If they match, the new buffer is regarded vulnerable
and a guard page is attached after it. Subsequently, without
tracking access instructions or the information ﬂow, out-of-
bounds buffer access due to continuous read or writes are
prevented by system protection automatically. While the guard
page is an expensive enhancement [32], HeapTherapy applies
it only to vulnerable heap buffers with a low overall overhead.
We have implemented HeapTherapy, and evaluated it on a
variety of services (database, web, and ftp) and benchmarks
(SPEC CPU2006). The throughput overheads incurred by
HeapTherapy on service programs are all less than 8% with
zero false positives. A thorough evaluation on SPEC shows
that the speed overhead averages 6.2% and the memory over-
head 7.7% when dealing with 10 synthesized vulnerabilities
simultaneously.
•
We made the following contributions:
• We propose an end-to-end solution that
integrates
defense generation and overﬂow prevention in a single
system. The defense is generated automatically on the
user side, so the user system can be enhanced instantly,
and the user does not need to maintain a separate
system for defense generation.
Compared to existing work, HeapTherapy incurs a
very low speed and memory overhead.
The defense generated by HeapTherapy does not have
false positives, and keeps effective under polymorphic
attacks.
It is compliant with existing hardware, systems, and
libraries. It does not require a custom heap allocation
algorithm. Thus, its deployment is convenient.2
• While none of the techniques employed in HeapTher-
apy, such as canaries, guard pages, probabilistic detec-
tion, and calling context encoding, is new or complex,
we creatively combine them and deliver a practical
low-cost solution. To our knowledge it is the ﬁrst one
that meets all the goals G1-G4 simultaneously.
•
•
The remainder of the paper is organized as follows. Sec-
tion II summarizes the related work. Section III gives an
overview of HeapTherapy’s design. Section IV describes the
design and implementation of HeapTherapy. In Section V, we
present the result of evaluation. Limitations of HeapTherapy
is discussed in Section VI and potential applications are de-
scribed in Section VII. We conclude this paper in Section VIII.
II. RELATED WORK
Due to extensive research in buffer overﬂows, we do not
intend to make an exhaustive list of work on the problem.
Instead, we examine how techniques applied in HeapTherapy
are used in other work.
Canaries: StackGuard [15] uses canaries to detect stack-
based buffer overﬂows. It has been widely deployed in modern
2While our current implementation uses recompilation, it is feasible to
thus, recompilation is not an
through binary instrumentation;
implement
intrinsic limitation of the solution.
486486
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:54:20 UTC from IEEE Xplore.  Restrictions apply. 
compilers, and greatly increased the difﬁculty of stack-based
buffer overﬂow attacks. Robertson et al. proposed to detect
heap buffer corruption by checking canaries placed between
heap buffers [37]; however, the checks are only performed
at buffer allocations or deallocations, which leaves a large
exploitable time window. Cruiser [52] and Kruiser [44] dra-
matically reduce the time window, but they do not prevent
data corruption itself. In our work, canaries are only used
to detect buffer over-writes. Once an over-write is detected,
HeapTherapy generates a defense preventing data corruption
from repetitive attacks.
Guard pages: Electric Fence puts one inaccessible page
immediately after or before a buffer [32]. DYnamic Buffer
Overﬂow Containment (DYBOC) surrounds every buffer with
two inaccessible pages [40]. The full enhancement for all heap
buffers incurs prohibitively high overhead, while HeapTherapy
applies guard pages only to probabilistic over-read detection
and vulnerable buffers, incurring a very low overhead.
Context sensitive defense: The value of calling context
beyond debugging was recognized early. For example, region-
based heap allocation tags heap objects with allocation calling
context information [53]. Calling context was recently used
to generating context sensitive defenses [50], [26], [31], [46],
[20]. However, they commonly use costly call stack walking.
HeapTherapy is the ﬁrst work that employs the calling context
encoding technique to generate context sensitive defense. It
largely reduces the overhead compared to using other call-
ing context retrieval techniques such as stack walking [9],
[42], [51]. Through the calling context encoding technique
HeapTherapy is able to represent the characteristics of buffers
being exploited with one integer and to identify vulnerable
buffers through integer comparison.
Learning from attacks: The principle has been widely ap-
plied to defense generation systems [22], [27], [26], [50], [31],
[14]. They usually use or assume a separate system to pinpoint
the attacking request, but the separate system can introduce
signiﬁcant costs or deployment difﬁculties. HeapTherapy col-
lect lightweight traces in memory to assist defense generation
without the need of ﬁnding out the malicious request. It is an
end-to-end solution built into the system being protected.
HeapTherapy combines a series of different techniques.
Canaries incur a low overhead but provides no overﬂow pre-
vention; it is used in data corruption detection. Guard pages are
expensive but can prevent overﬂows; it is applied to over-read
detection probabilistically and buffers identiﬁed as vulnerable
deterministically. The glue is the calling context encoding,
which characterizes and identiﬁes vulnerable buffers. Those
techniques work together to deliver a new and efﬁcient end-
to-end solution against heap buffer overﬂows.
III. HEAPTHERAPY OVERVIEW
Figure 1 shows the architecture of HeapTherapy, which
contains three main components: a compiler pass for adding
the calling context encoding functionality, a shared library for
interposing the memory allocator, and a diagnosis engine for
generating temporary patches upon detection. The memory
allocator interposition library enforces the installed patches by
enhancing the heap buffer being allocated.
Temporary 
patches