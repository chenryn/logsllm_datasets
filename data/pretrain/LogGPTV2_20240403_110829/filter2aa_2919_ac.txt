### OpenJPEG and Fuzzing Techniques

OpenJPEG has been extensively tested using the state-of-the-art fuzzer, OSS-Fuzz, on Google’s distributed fuzzing infrastructure [26]. One related approach to symbolic and concolic execution is taint-based fuzzing. In this technique, input data is marked (tainted), and the taint status is propagated during execution. This propagation allows the fuzzer to identify which checks depend on specific input bytes, enabling focused fuzzing or the elimination of certain checks. In 2012, Bekrar et al., employees at VUPEN, proposed a taint-based fuzzing approach [34]. VUPEN, the predecessor of the well-known exploit broker Zerodium, won the first prizes in Pwn2Own from 2011 to 2014. VUPEN did not participate in Pwn2Own in 2015 due to the founding of its successor company, Zerodium. VUPEN's exploit service subscription clients included the NSA, the German BSI, and Hacking Team [28-30]. In 2017, Rawat et al. further explored the idea of fuzzing with dynamic taint analysis in VUzzer, an application-aware evolutionary fuzzer [35].

### LibFuzzer

LibFuzzer is another widely used fuzzer, particularly popular among developers. It is an in-process, coverage-guided, evolutionary fuzzer included with the Clang compiler. LibFuzzer requires the development of small fuzzer functions but stands out for its high fuzzing speed, achieved through its in-process design. Major projects like the v8 JavaScript engine and Chromium use hundreds of fuzzer scripts developed for LibFuzzer [32-33].

### Improving Fuzzing Performance

Xu et al. [36] enhanced fuzzing performance by reducing the time of each fuzzing iteration. They developed and integrated three new primitives into the operating system kernel for AFL and LibFuzzer.

### Feedback-Based Fuzzing in Web Browsers

Feedback-based fuzzing is generally inefficient for web browsers and requires further research. This technique is more effective for binary protocols and formats, achieving high execution speeds of several hundred or thousand executions per second. Browser fuzzing, however, typically uses large test cases with execution times of several seconds per test case. Fratric from Google Project Zero experimented with feedback mechanisms in browser fuzzing in 2017 and concluded that more investigation is needed to combine coverage information with DOM fuzzing [37]. Feedback-based fuzzing is often used to fuzz specific function implementations or the handling of image, video, or audio file formats in browsers, primarily with LibFuzzer.

### Generation-Based Fuzzing

Another fuzzing technique is generation-based fuzzing, where code is generated based on predefined rules. This is often achieved with grammar-based fuzzers, where a grammar defines how input should be generated. An example is domato [34], which has discovered numerous browser vulnerabilities over the years. Another such fuzzer is Grammarinator [38], developed by Hodován et al., which supports both input generation and mutation. The Mozilla Firefox security team developed the Dharma fuzzer [35], similar to Domato. Notably, the newer Domino fuzzer [36], developed over three years by the Firefox fuzzing team, uses WebIDL definition files as grammar. WebIDL is internally used in browser source code to describe implemented APIs, making it the most complete and up-to-date available grammar.

### Recent Research in Fuzzing

In 2018, Groß proposed fuzzing JavaScript engines with feedback-based mutations using the Fuzzilli fuzzer [39]. For this, Groß created an intermediate language (IL) on which mutations are performed to ensure only valid JavaScript code is generated. In 2019, Han et al. published a technique called semantic-aware code generation along with the Code Alchemist fuzzer [40]. This technique splits JavaScript code samples into small code bricks, which are then recombined by the fuzzer to generate semantically correct code samples. A similar idea is implemented in this thesis, but with the addition of coverage feedback to generate a corpus of code snippets.

### Aspect-Preserving Mutations

Park et al. [10] proposed a technique using aspect-preserving mutations to fuzz JavaScript engines in 2020. This approach led to the discovery of 48 bugs in ChakraCore, JavaScriptCore, and V8. The paper was published after most experiments for this thesis were conducted and contains similar ideas. Park et al. used carefully designed mutation strategies to preserve the structure and type semantics during mutations, helping to identify variations of previous vulnerabilities. This thesis takes a different approach, using a template corpus to test different code structures and extracting type feedback to preserve type information.

### Sanitizers in Fuzzing

Sanitizers are crucial in fuzzing. Some vulnerabilities do not lead to crashes and are thus hard to detect. AFL partially solved this problem by introducing a custom heap implementation called libDislocator [38]. New compilers like LLVM include sanitizers that add code during compilation to detect more vulnerabilities. The most important sanitizer is ASAN (Address Sanitizer) [41], which detects various vulnerabilities. Other important sanitizers include MSAN (Memory Sanitizer) [42] and UBSAN (Undefined Behavior Sanitizer) [39]. Google Chrome and Mozilla Firefox provide pre-built ASAN builds for their current releases [40-41], and the Tor browser was even shipped as a hardened version with ASAN [42]. Fine-grained ASLR was integrated into the hardened version with SelfRando [43], although the hardened project was discontinued in 2017 [43].

### Google's Fuzzing Efforts

Google regularly fuzzes ASAN, MSAN, and UBSAN Chrome builds using their ClusterFuzz infrastructure. In 2016, they used 500 VMs with ASAN, 100 VMs with MSAN, and 100 VMs with UBSAN, identifying 112 new bugs in 30 days [44]. Google has invested significant computational resources in fuzzing their software and open-source projects. For example, they used 2,000 CPU cores to mutate 20,000 minimal SWF files, leading to the discovery of numerous Flash Player bugs [45]. In 2017, Google Project Zero fuzzed five major browsers, resulting in the discovery of 17 Safari, six Edge, four Internet Explorer, four Firefox, and two Chrome vulnerabilities [37]. Google also runs the OSS-Fuzz project, which has found over 20,000 bugs in 300 open-source projects by June 2020 [48].

### Analysis of Vulnerability Patterns

The complexity of v8 means it contains unique vulnerability classes [49]. This chapter categorizes and analyzes recently exploited vulnerabilities to understand their underlying structures. The vulnerabilities were selected based on the following criteria:
- Availability of an exploit, public demonstration of exploitability, or coherence that an exploit can be written.
- Preference for vulnerabilities affecting Google Chrome due to its large user base, with consideration for Mozilla Firefox, Apple Safari, and Microsoft Edge.
- Focus on recent vulnerabilities, with inclusion of older, actively exploited ones from 2014 onwards.
- Only vulnerabilities in the main browser code, excluding third-party libraries and sandbox escapes.

A total of 55 vulnerabilities met these criteria, including 33 Chrome, 14 Firefox, four Safari, and four Edge vulnerabilities. Proof-of-Concepts (PoCs) were taken from the JS-Vuln-DB project or referenced bug trackers, with added comments for readability. The focus is on enhancing fuzzers by understanding the JavaScript code triggering the vulnerabilities and the underlying concepts.

### Classic Vulnerabilities in the Render Engine

#### Out-of-Bounds (OOB) Memory Access
OOB memory access occurs when bound checks are incorrectly implemented. For example, Firefox bug 1246014 (CVE-2016-1960) involves OOB access due to incorrect parsing of HTML elements within an SVG context. Public exploits are available [46-48].

**Generalization for Variation Analysis:**
- The fuzzer needs a comprehensive grammar defining attributes and functions, including the number and types of arguments.
- Wrapping HTML elements in an SVG context can lead to similar bugs.

#### Integer Overflows
Integer overflows occur when the result of a calculation exceeds the assigned data type. For example, Chromium issue 359802 (CVE-2014-1736) involves a sign error in the `createImageData` function, leading to arbitrary read and write access [50].

**Generalization for Variation Analysis:**
- The fuzzer must know that a canvas element has a 2D context and the `createImageData` function, requiring a comprehensive grammar.
- Values that can cause sign errors, such as 0x10FFFFFF, should be used during fuzzing.