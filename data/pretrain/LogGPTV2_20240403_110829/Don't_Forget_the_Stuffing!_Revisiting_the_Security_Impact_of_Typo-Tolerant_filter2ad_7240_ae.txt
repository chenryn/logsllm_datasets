75%
90%
10%
25%
50%
75%
90%
10%
25%
50%
75%
90%
Susceptible
0.19
0.19
0.25
0.58
0.70
0.21
0.22
0.24
0.62
0.72
0.27
0.28
0.41
0.64
0.74
0.27
0.28
0.40
0.63
0.73
0.23
0.25
0.39
0.59
0.69
FPR
0.18
0.19
0.35
0.58
0.70
0.20
0.21
0.23
0.61
0.71
0.25
0.25
0.39
0.62
0.73
0.25
0.25
0.37
0.61
0.71
0.20
0.22
0.36
0.57
0.68
FNR
0.53
0.46
0.32
0.16
0.11
0.56
0.47
0.35
0.12
0.05
0.37
0.33
0.24
0.14
0.09
0.38
0.32
0.23
0.13
0.09
0.42
0.37
0.24
0.14
0.09
Table 5: The performance of the password classifier models
on the holdout test dataset, trained on data labeled using a
10% label threshold. We evaluate the five policy models each
tuned to varying recall operating points, and determine the
proportion of emails whose randomly selected password is
flagged as susceptible by our models, as well as the models’
false positive and false negative rates.
In practice, deploying such models would result in typo-tolerance
being disabled for a quarter or a third of users, while eliminating
the security degradation for up to three-quarters of the users who
would be negatively affected by typo-tolerance otherwise. For many
online services, this may be a suitable tradeoff, limiting the security
degradation from typo-tolerance while maintaining the majority
of its functionality.
In Table 9 in the Appendix, we show the equivalent model eval-
uation results for models where the training data label threshold
is 0%. We observe that the model susceptibility prediction rate is
above 63% for all policies and recall operating points, with similarly
high FPRs. This outcome is expected though, as using a 0% label
threshold aims to maximize security, and any distinct password
that had a susceptible instance during training (even if rare) was
labeled as susceptible. We do note that there are settings where
the FNR is low yet a non-trivial fraction of emails would not have
typo-tolerance disabled. For example, the CTop2 model operating at
90% recall exhibits a 3% FNR while predicting susceptibility for 78%
of emails. This result demonstrates that typo-tolerance’s security
degradation (at least in the face of credential stuffing attacks) can be
largely eliminated while still preserving some functionality (e.g., for
22% of users), offering a security-focused operating point that is of
theoretical interest (albeit likely impractical).
Table 10 in the Appendix provides the model performance when
the training data label threshold is 25%. This label threshold pri-
oritizes functionality, as only distinct passwords that are often
susceptible (in over a quarter of the instances) are labeled as such.
As a consequence, we generally witness low model susceptibility
prediction rates (all below 51%) but high FNRs (as high as 85%). For
example, the CTop2 model operating at a 50% recall level predicts
susceptibility for only 8% of emails while exhibiting a 49% FNR.
This model configuration significantly reduces (but does not largely
eliminate) the security impact of the CTop2 typo-tolerance policy,
with limited functionality loss.
Ultimately, this holdout test set evaluation revealed that these
models offer different functionality versus security tradeoffs than
with fully enabling or disabling typo-tolerance. While we conducted
an initial exploration here, we believe such models are of value in
practice. Note that we lack real-world user data on password typo
behaviors, preventing a precise analysis of the usability impact that
our machine learning models have on typo-tolerant password au-
thentication systems. However, we can determine the lower bound
impact by analyzing the user passwords that could be affected by
a typo-tolerance corrector (i.e., the passwords exhibit a structure
where a user could make a typo that is fixed by a corrector). Specifi-
cally, we observe that when randomly selecting a password for each
user from the holdout test dataset, 86% of users have a password
6. For CTop3—CTop5,
that could be typo-corrected by CTop1 and CTop2
100% of users have passwords that could be typo-corrected, as every
password could potentially exhibit a typo correctable by the rm_last
corrector (present in all three typo-tolerance policies). Thus, the
vast majority of users’ passwords could exhibit a correctable typo,
yet our models only disable typo-tolerance for a minority of users,
indicating that a significant portion of users could still benefit from
typo-tolerant authentication even with our models deployed (al-
though we leave it to future work to analyze what fraction of users
precisely benefit in practice given real-world typo behaviors).
5.3.3 Computational Costs. We evaluate the computational costs
of our machine learning models on a 48-core Ubuntu server with
256 GBs of memory. We find that our models can be efficiently
trained and deployed for practical use by major online services.
Model Training. As discussed in Section 5.3.1, we constructed
our training dataset using the BreachCompilation data, consisting of
1.4B credentials associated with 463M unique passwords (as detailed
in Section 3). Processing that data to extract password features and
labels for our full training dataset required approximately 12 hours
total, using 20 parallel threads. Training the model for a given typo-
tolerance policy took one hour on a single process. Thus, the model
training process can be completed quickly even without extensive
computational resources. Similarly, the model can be efficiently
retrained, such as if to occasionally incorporate data from newly
released breaches. (Note, incorporating new data into the training
dataset would require less time than our original training dataset
construction, as only the new data would need to be processed.)
6CTop2 consists of the swc_all and swc_first correctors, while CTop1 consists of only
swc_all. However, any password that could exhibit a typo correctable by swc_first
could also exhibit a typo correctable by swc_all. As a consequence, CTop1 and CTop2
exhibit identical proportions of users with typo-correctable passwords.
Session 1D: Authentication and Click Fraud CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea263Model Deployment. The resulting decision tree model is effi-
cient at classification. Deploying the model as a single process, it
can extract a password’s feature vector and produce a classification
label at a rate of approximately 10K passwords per minute. Note
that the model is only needed when users create or change their
passwords (to determine whether typo-tolerance should be enabled
for the users), and not for user logins (which occur more frequently).
In addition, classification throughput can be scaled up by running
multiple instances of the model in parallel. Thus, our model can be
practically deployed even at the scale of major online services such
as Facebook.
6 CONCLUSION
In this paper, we reconsidered the security impact of typo-tolerant
password authentication. The prior analysis of such schemes [7]
demonstrated that they provide notable authentication usability
benefits, without affording a significant advantage to password
spraying attacks. In our investigation, we considered a more com-
prehensive threat model that expands beyond password spraying,
to additionally account for credential stuffing and tweaking at-
tacks. Using password leak datasets, we empirically evaluated the
security implications of typo-tolerant password schemes under the
broader threat model. Initially, we replicated the prior findings
that password spraying attacks gained little from typo-tolerance,
with at most 1.24% of users becoming newly vulnerable once a
typo-tolerant scheme was enabled. However, credential stuffing
and tweaking attacks were significantly strengthened under typo-
tolerance. Under realistic settings, up to 8.8% of users became newly
vulnerable with typo-tolerance deployed, and as many as a third of
users were negatively affected in the worst-case scenario. Thus, the
security degradation of typo-tolerance is significantly more severe
than previously understood.
To mitigate the security costs of typo-tolerant password au-
thentication while maintaining its functionality, we explored the
development of machine learning models that could predict if a
password would likely become newly vulnerable to credential stuff-
ing attacks once a typo-tolerance policy is enabled. Such models
could be used to selectively disable typo-tolerance for users of
predicted susceptible passwords, trading functionality for secu-
rity. Our resulting models exhibit suitable operating points on the
functionality-security tradeoff spectrum, offering online services
the opportunity to deploy typo-tolerance in a different capacity.
Future work can expand upon our initial investigation into hard-
ening typo-tolerant password authentication. While we consid-
ered multiple machine learning algorithms and model parameters,
broader exploration of other machine learning approaches could
produce models offering better functionality-security tradeoffs.
Moreover, future work can investigate the exact usability impact of
such models, by considering the extent to which these models pre-
serve typo-tolerance for users who actually make password typos.
Additionally, our models focused on limiting the impact of creden-
tial stuffing attacks on typo-tolerant schemes, and further work
is needed to address credential tweaking attacks. More recently,
a personalized variant of typo-tolerance was developed [8] that
learns to correct the specific password typos of individual users
over time, providing further usability benefits compared to vanilla
typo-tolerance, without significant security degradation against
online and offline brute-force guessing attacks. Revisiting the secu-
rity analysis of this variant under a similar threat model as used in
this paper would be interesting, as credential stuffing and tweaking
attacks may similarly benefit from the typo corrections, but to what
extent is unclear given the personalized nature of the corrections.
Finally, researchers could explore whether online services using
typo-tolerant password authentication may be able to better pro-
tect their users by disallowing password changes/resets where the
old password could be corrected to the new one under the typo-
tolerance policy used. Such an approach could help prevent old
or leaked passwords from being successfully leveraged against a
typo-tolerant system during credential stuffing attacks.
7 ACKNOWLEDGMENTS
This work was supported in part by the National Science Founda-
tion award CNS-2055549, for which we are grateful. The opinions
expressed in this paper do not necessarily reflect those of the re-
search sponsors.
REFERENCES
[1] 4iQ. 2020. Weaponized Data Breaches: Fueling Identity-based Attacks Across the
Globe. https://https://4iq.com/2020-identity-breach-report/.
[2] Susan Antilla. 2015. Is Vanguard Making It Too Easy for Cybercriminals to Access
Your Account? https://www.thestreet.com/opinion/is-vanguard-making-it-too-
easy-for-cybercriminals-to-access-your-account-13213265.
[3] Bijeeta Pal. 2019. Password Similarity Models using Neural Networks. https:
//github.com/Bijeeta/credtweak/tree/master/credTweakAttack.
[4] Enka Blanchard. 2020. Making More Extensive and Efficient Typo-Tolerant Pass-
word Checkers. In IEEE Annual Computers, Software, and Applications Conference
(COMPSAC).
[5] Joseph Bonneau, Cormac Herley, Paul C. van Oorschot, and Frank Stajano. 2012.
The Quest to Replace Passwords: A Framework for Comparative Evaluation of
Web Authentication Schemes. In IEEE Symposium on Security and Privacy (S&P).
1.4 billion cleartext credentials discovered in a single
database. https://medium.com/4iqdelvedeep/1-4-billion-clear-text-credentials-
discovered-in-a-single-database-3131d0a1ae14.
[6] Julio Casal. 2017.
[7] Rahul Chatterjee, Anish Athayle, Devdatta Akhawe, Ari Juels, and Thomas
Ristenpart. 2016. pASSWORD tYPOS and How to Correct Them Securely. In IEEE
Symposium on Security and Privacy (S&P).
[8] Rahul Chatterjee, Joanne Woodage, Yuval Pnueli, Anusha Chowdhury, and
Thomas Ristenpart. 2017. The TypTop System: Personalized Typo-Tolerant Pass-
word Checking. In ACM Conference on Computer and Communications Security
(CCS).
[9] Katie Collins. 2017. Facebook buys black market passwords to keep your account
safe. https://www.cnet.com/news/facebook-chief-security-officer-alex-stamos-
web-summit-lisbon-hackers/.
[10] Anupam Das, Joseph Bonneau, Matthew Caesar, Nikita Borisov, and XiaoFeng
Wang. 2014. The Tangled Web of Password Reuse. In Network and Distributed
System Security Symposium (NDSS).
[11] Xavier de Carne de Carnavalet and Mohammad Mannan. 2014. From Very Weak
to Very Strong: Analyzing Password-Strength Meters. In Network and Distributed
System Security Symposium (NDSS).
[12] Dropbox. 2016. zxcvbn. https://github.com/dropbox/zxcvbn.
[13] Maximilian Golla, Miranda Wei, Juliette Hainline, Lydia Filipe, Markus Dürmuth,
Elissa Redmiles, and Blase Ur. 2018. “What was that site doing with my Facebook
password?”: Designing Password-Reuse Notifications. In ACM Conference on
Computer and Communications Security (CCS).
[14] Hana Habib, Jessica Colnago, William Melicher, Blase Ur, Sean Segreti, Lujo Bauer,
Nicolas Christin, and Lorrie Cranor. 2017. Password Creation in the Presence of
Blacklists. In Workshop on Usable Security and Privacy (USEC).
[15] Josh Hendrickson. 2019. Facebook Fudges Your Password for Your Conve-
nience. https://www.howtogeek.com/402761/facebook-fudges-your-password-
for-your-convenience/.
[16] Cormac Herley and Stuart E Schechter. 2019. Distinguishing Attacks from
Legitimate Authentication Traffic at Scale. In Network and Distributed System
Security Symposium (NDSS).
[17] Troy Hunt. 2020. The 773 Million Record "Collection #1" Data Breach. https:
//www.troyhunt.com/the-773-million-record-collection-1-data-reach/.
Session 1D: Authentication and Click Fraud CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea264[18] Mark Keith, Benjamin Shao, and Paul Steinbart. 2009. A Behavioral Analysis of
Passphrase Design and Effectiveness. Journal of the Association for Information
Systems 10 (02 2009), 63–89.
[19] Mark Keith, Benjamin Shao, and Paul John Steinbart. 2007. The usability of
passphrases for authentication: An empirical field study. International Journal of
Human-Computer Studies 65, 1 (2007), 17 – 28.
[20] Lucy Li, Bijeeta Pal, Junade Ali, Nick Sullivan, Rahul Chatterjee, and Thomas
Ristenpart. 2019. Protocols for Checking Compromised Credentials. In ACM
Conference on Computer and Communications Security (CCS).
[21] MITRE. 2020. Credential Stuffing. https://attack.mitre.org/techniques/T1110/
[22] MITRE. 2020. Password Spraying. https://attack.mitre.org/techniques/T1110/
004/.
003/.
[23] Moni Naor, Benny Pinkas, and Eyal Ronen. 2019. How to (not) Share a Pass-
word: Privacy Preserving Protocols for Finding Heavy Hitters with Adversarial
Behavior. In ACM Conference on Computer and Communications Security (CCS).
[24] OWASP. 2020. Credential Stuffing. https://owasp.org/www-community/attacks/
Credential_stuffing.
[25] Bijeeta Pal, Tal Daniel, Rahul Chatterjee, and Thomas Ristenpart. 2019. Beyond
Credential Stuffing: Password Similarity Models using Neural Networks. In IEEE
Symposium on Security and Privacy (S&P).
[26] Sarah Pearman, Jeremy Thomas, Pardis Emami Naeini, Hana Habib, Lujo Bauer,
Nicolas Christin, Lorrie Faith Cranor, Serge Egelman, and Alain Forget. 2017.
Let’s Go in for a Closer Look: Observing Passwords in Their Natural Habitat. In
ACM Conference on Computer and Communications Security (CCS).
[27] Shannon Riley. 2006. Password security: What users know and what they actually
do. Usability News 8, 1 (2006), 2833–2836.
[28] Stuart Schechter, Cormac Herley, and Michael Mitzenmacher. 2010. Popularity is
everything: A new approach to protecting passwords from statistical-guessing
attacks. In USENIX Conference on Hot Topics in Security (HotSec).
[29] Stuart Schechter, Yuan Tian, and Cormac Herley. 2019. StopGuessing: Using
Guessed Passwords to Thwart Online Guessing. In IEEE European Symposium on
Security and Privacy (EuroS&P).
[30] Shape. 2020. Credential Spill Report. https://federalnewsnetwork.com/wp-
content/uploads/2020/06/Shape-Threat-Research-Credential-Spill-Report.pdf.
[31] Richard Shay, Saranga Komanduri, Patrick Gage Kelley, Pedro Giovanni Leon,
Michelle L Mazurek, Lujo Bauer, Nicolas Christin, and Lorrie Faith Cranor. 2010.
Encountering stronger password requirements: user attitudes and behaviors. In
USENIX Symposium on Usable Privacy and Security (SOUPS).
[32] Kurt Thomas, Frank Li, Ali Zand, Jacob Barrett, Juri Ranieri, Luca Invernizzi, Yarik
Markov, Oxana Comanescu, Vijay Eranti, Angelika Moscicki, Daniel Margolis,
Vern Paxson, and Elie Bursztein. 2017. Data Breaches, Phishing, or Malware?
Understanding the Risks of Stolen Credentials. In ACM Conference on Computer
and Communications Security (CCS).
[33] Kurt Thomas, Jennifer Pullman, Kevin Yeo, Ananth Raghunathan, Patrick Gage
Kelley, Luca Invernizzi, Borbala Benko, Tadek Pietraszek, Sarvar Patel, Dan Boneh,
et al. 2019. Protecting Accounts from Credential Stuffing with Password Breach
Alerting. In USENIX Security Symposium.
[34] Dylan Tweney. 2011. Amazon.com Security Flaw Accepts Passwords That
Are Close, But Not Exact. https://www.wired.com/2011/01/amazon-password-
problem/.
[35] Chun Wang, Steve TK Jan, Hang Hu, Douglas Bossart, and Gang Wang. 2018. The
next domino to fall: Empirical analysis of user passwords across online services.
In ACM Conference on Data and Application Security and Privacy (CODASPY).
[36] Ding Wang, Zijian Zhang, Ping Wang, Jeff Yan, and Xinyi Huang. 2016. Targeted
Online Password Guessing: An Underestimated Threat. In ACM Conference on
Computer and Communications Security (CCS).
[37] Ke Coby Wang and Michael K Reiter. 2020. Detecting Stuffing of a User’s Cre-
dentials at Her Own Accounts. In USENIX Security Symposium.