Consider the following snippet run in the main process where one wants to
listen for `"will-prevent-default"` events and after some _asynchronous_
operation (`do_something`, a call which returns a `Promise`) initiated by the
event listener, depending on the result (`result`) of the operation, call
`preventDefault` on the event to allow page to unload:
    /// Assume `win` refers to your typical application window (a `BrowserWindow` instance)
    win.webContents.on("will-prevent-default", ev => {
        do_something().then(result => {
            if(result == some_value) {
                ev.preventDefault(); /// Does NOT work (page doesn't unload) when called from a callback, i.e. when not called immediately (synchronously) in the event handler.
            }
        });
        /// `ev.preventDefault` would have the documented effect if one placed the call here, e.g. somewhere it would be executed as part of the event handler itself, not a callback.
    });
One would expect `preventDefault` to work as documented regardless of when it
is called?
Is this a known issue, and is this simply a bug?
Electron 6.0.10 win32 x64  
Microsoft Windows 10 64-bit Enterprise build 1709