gem名称，但事实证明，其中有四家公司很容易通过RubyGems造成依赖混淆。
加拿大电子商务巨头Shopify是这样的公司之一，其构建系统在我上载后仅几个小时就自动安装了一个名为`shopify-cloud`的Ruby gem
，然后尝试在其中运行代码。Shopify团队在一天之内准备好修复程序，并为发现问题提供了30,000美元的漏洞赏金。
另外30,000美元的奖励来自于苹果，我于2020年8月上传到npm的Node包中的代码在其网络内的多台计算机上执行。受影响的项目似乎与Apple的身份验证系统（外部称为Apple
ID）有关。
当我提出这个错误可能使威胁者向Apple ID注入后门的想法时，Apple并不认为这种影响水平可以准确说明问题，而是说：
> _在运营服务中实现后门需要更复杂的事件序列，这是一个带有附加含义的非常特定的术语。_
但是，Apple确实承认使用此npm软件包技术可以在Apple服务器上执行远程代码。根据软件包安装的流程，该问题在我报告后的两周内得到了解决，但仅在发布此帖子之前不到一天就授予了赏金漏洞。
在针对其他公司的其他几次成功攻击中，可以看到在内部服务器和个人开发人员的PC上都安装了相同主题的npm软件包，其中一些安装通常是在软件包上传后数小时甚至几分钟进行的。
哦，这一切开始于PayPal的名字吗？这些也奏效了，又产生了3万美元的赏金。实际上，大多数已授予的Bug赏金都设置为每个程序的策略所允许的最大数量，有时甚至更高，这说明了依赖混淆bug的严重性通常很高。
其他受影响的公司包括Netflix，Yelp和Uber。
## 这不是一个Bug，这是一个功能
尽管发现了大量的依赖混淆，但一个细节在某个程度上依然是不清晰的:为什么会这样? 导致此类的漏洞真正原因是什么？
大多数受影响的组织都不愿透露有关其根本原因和缓解策略的更多技术细节，但是在我的研究过程中以及与安全团队的沟通中确实出现了一些有趣的细节。
例如，Python依赖关系混乱的罪魁祸首似乎是错误地使用了“设计不安全”命令行参数`--extra-index-url`。带上此参数使用`pip
install library`指定您自己的包索引时，您可能会发现它可以按预期工作，但是`pip`背后的实际操作是这样的：
  * 检查`library`指定（内部）包索引上是否存在
  * 检查 **公共** 包索引（PyPI）是否`library`存在
  * 安装找到的任何版本。如果两个软件包均存在，则默认从具有 **更高版本号** 的源进行安装。
因此，`library 9000.0.0`在上面的示例中，上传名为PyPI的程序包将导致依赖关系被劫持。
尽管这种行为已经广为人知，但简单地在GitHub上搜索`--extra-index-url`就足以找到一些属于大型组织的易受攻击的脚本-包括一个影响Microsoft .NET Core组件的bug。不幸的是，[该漏洞](https://github.com/dotnet/dotnet-buildtools-prereqs-docker/commit/56c6673d3aa6c6d9887a5a584b814b10da7b7177#diff-14d7481c475cdd006d8421a767a8af12330cd68de62b26551644b3e05a3a3891L47)可能已允许向.NET
Core添加后门程序，但[该漏洞](https://github.com/dotnet/dotnet-buildtools-prereqs-docker/commit/56c6673d3aa6c6d9887a5a584b814b10da7b7177#diff-14d7481c475cdd006d8421a767a8af12330cd68de62b26551644b3e05a3a3891L47)在.NET
Bug赏金计划中未发现。
Ruby的`gem install --source`工作方式也与此类似，但是我无法确定其用法是否是我发现所有该类漏洞的根本原因。
当然，更改`--extra-index-url`为`--index-url`是快速而直接的解决方法，但是事实证明，依赖混淆的其他一些变体很难缓解。
JFrog
Artifactory是一款广泛用于托管各种类型内部软件包的软件，它提供了将内部和公共库混合到同一“虚拟”存储库中的可能性，从而大大简化了依赖性管理。但是，多个客户表示Artifactory使用上述完全相同的易受攻击算法来决定遭遇相同名称时，是使用内部还是外部程序包。在撰写本文时，无法更改此默认行为。
据报道，JFrog意识到了这个问题，但一直对待可能的解决方案视为“功能请求”，而没有看到ETA，在此期间，其一些客户则诉诸于将系统策略更改应用于依赖项管理，以减轻依赖项中的依赖项混乱。
Microsoft还提供了类似的名为Azure
Artifacts的程序包托管服务。根据我的一份报告，对该服务进行了一些小的改进，以确保它可以为依赖项混淆漏洞提供可靠的解决方法。有趣的是，没有通过测试Azure
Artifacts去发现此问题，而是通过成功攻击Microsoft自己的基于云的Office
365来发现此问题，该报告得到了在Azure可能获得的最高奖励40,000美元。
有关根本原因和预防建议的更多详细信息，您可以查阅Microsoft的白皮书“[使用专用软件包供稿时缓解风险的3种方法](https://aka.ms/pkg-sec-wp)”。
## 未来的研究？
尽管许多大型科技公司已经意识到这种漏洞，并已在其基础架构中对其进行了修复，或者正在努力实施缓解措施，但我仍然感到可以继续有很多发现。
具体来说，我相信找到泄漏内部程序包名称的新方法将揭示更多易受攻击的系统，而寻找其他的编程语言和目标存储库将暴露依赖混淆Bug的其他攻击面。
话虽这么说，无论您的经验水平如何，我都竭诚鼓励您花一些时间在脑海中尝试一下该想法-无论它是否与依赖项管理安全性相关。
## 致谢
  * [@EdOverflow](https://twitter.com/EdOverflow)和[@prebenve](https://twitter.com/prebenve)，他们在我之前曾独立研究过类似类型的攻击，但不幸的是尚未发布他们的发现
  * Justin Gardner（[@Rhynorater](https://twitter.com/Rhynorater)），分享了激发最初想法的代码，并校对了这篇文章
  * [@streaak](https://twitter.com/streaak)，用于帮助找到许多易受攻击的目标，并且与之合作非常棒
  * [Ettic](https://blog.ettic.ca/)，出色的工具dnsbin的创建者，我曾用它记录DNS回调
  * Ohm M.，Plate H.，Sykosch A.，Meier M.（2020）[“ Backstabber的刀收藏：开源软件供应链攻击的回顾”](https://doi.org/10.1007/978-3-030-52683-2_2)。DIMVA2020。计算机科学讲座，第12223卷。Cham Springer（供应链攻击树插图的来源）
  * 所有支持公共Bug赏金计划的公司，使我们有可能花费时间来研究像这样的想法。谢谢！
> 本文为翻译文章,原文链接: confusion-4a5d60fec610>