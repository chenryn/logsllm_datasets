composable two-party computation without set-up assumptions.
In EUROCRYPT,
pages 68–86, 2003.
[CR03]
Ran Canetti and Tal Rabin. Universal composition with joint state. In CRYPTO, pages
265–281, 2003.
[DSW08] Yevgeniy Dodis, Victor Shoup, and Shabsi Walﬁsh. Eﬃcient constructions of compos-
able commitments and zero-knowledge proofs. In CRYPTO, pages 515–535, 2008.
[Fis05]
[GK03]
Marc Fischlin. Communication-eﬃcient non-interactive proofs of knowledge with online
extractors. In CRYPTO, pages 152–168, 2005.
Shaﬁ Goldwasser and Yael Tauman Kalai. On the (in)security of the ﬁat-shamir
paradigm. In FOCS, pages 102–113, 2003.
[HKE13] Yan Huang, Jonathan Katz, and David Evans. Eﬃcient secure two-party computation
using symmetric cut-and-choose. In CRYPTO (2), pages 18–35, 2013.
[HL10]
Carmit Hazay and Yehuda Lindell. Eﬃcient Secure Two-Party Protocols - Techniques
and Constructions. Information Security and Cryptography. Springer, 2010.
[IKO+11] Yuval Ishai, Eyal Kushilevitz, Rafail Ostrovsky, Manoj Prabhakaran, and Amit Sahai.
Eﬃcient non-interactive secure computation. In EUROCRYPT, pages 406–425, 2011.
[KS06]
M. Kiraz and B Schoenmakers. A protocol issue for the malicious case of yao’s garbled
circuit construction. In Symposium on Information Theory in the Benelux, pages 283–
290, 2006.
35
[Lin11]
[Lin13]
[LP07]
[LP11]
[MF06]
[MR13]
[Nie02]
Yehuda Lindell. Highly-eﬃcient universally-composable commitments based on the ddh
assumption. In EUROCRYPT, pages 446–466, 2011.
Yehuda Lindell. Fast cut-and-choose based protocols for malicious and covert adver-
saries. In CRYPTO (2), pages 1–17, 2013.
Yehuda Lindell and Benny Pinkas. An eﬃcient protocol for secure two-party computa-
tion in the presence of malicious adversaries. In EUROCRYPT, pages 52–78, 2007.
Yehuda Lindell and Benny Pinkas. Secure two-party computation via cut-and-choose
oblivious transfer. In TCC, pages 329–346, 2011.
Payman Mohassel and Matthew K. Franklin. Eﬃciency tradeoﬀs for malicious two-party
computation. In Public Key Cryptography, pages 458–473, 2006.
Payman Mohassel and Ben Riva. Garbled circuits checking garbled circuits: More
eﬃcient and secure two-party computation. In CRYPTO (2), pages 36–53, 2013.
Jesper Buus Nielsen. Separating random oracle proofs from complexity theoretic proofs:
The non-committing encryption case. In CRYPTO, 2002.
[OSVW13] Rafail Ostrovsky, Alessandra Scafuro, Ivan Visconti, and Akshay Wadia. Universally
composable secure computation with (malicious) physically uncloneable functions. In
EUROCRYPT, pages 702–718, 2013.
[Pas03]
[Ped91]
Rafael Pass. On deniability in the common reference string and random oracle model.
In CRYPTO, pages 316–337, 2003.
Torben P. Pedersen. Non-interactive and information-theoretic secure veriﬁable secret
sharing. In CRYPTO, pages 129–140, 1991.
[PVW08] Chris Peikert, Vinod Vaikuntanathan, and Brent Waters. A framework for eﬃcient and
composable oblivious transfer. In CRYPTO, pages 554–571, 2008.
[Sch91]
[SS11]
[SS13]
Claus-Peter Schnorr. Eﬃcient Signature Generation for Smart Cards. Journal of Cryp-
tology, 4(3):239–252, 1991.
Abhi Shelat and Chih-Hao Shen. Two-output secure computation with malicious ad-
versaries. In EUROCRYPT, pages 386–405, 2011.
Abhi Shelat and Chih-Hao Shen. Fast two-party secure computation with minimal
assumptions. In ACM Conference on Computer and Communications Security, pages
523–534, 2013.
[Yao86]
Andrew Chi-Chih Yao. How to generate and exchange secrets (extended abstract). In
FOCS, pages 162–167, 1986.
36
A Zero Knowledge Functionality in the gRO model
The ideal functionality GgRO allows us to capture a more nuanced property: “Zero Knowledge up to
transferability”. This is done via a relaxed variant of the ideal zero knowledge functionality, FtZK
where tzk stands for transferable zero knowledge, which leaks to the simulator the values of the
illegitimate queries made with the present SID. Intuitively, the leakage of the adversarial queries
made by third parties does not compromise zero knowledge beyond allowing the ability to transfer
proofs.
Indeed, since any query made by a third party could have been made by the adversary
itself, any adversary that uses GgRO’s answer to queries made by third parties can be simulated by
an adversary that makes the same queries by itself. We describe the FtZK functionality in Fig. 8.
Functionality FtZK
FtZK is parameterized by a relation R ⊂ {0, 1}∗×{0, 1}∗. We require that there exists a polynomial
p such that (x, w) ∈ R implies that |w| ≤ p(|x|) and such that (x, w) ∈ R can be checked in time
p(|x|). FtZK runs with a prover P , a veriﬁer V and an adversary S and proceeds as follows.
• Upon receiving the ﬁrst input (ZK-prover, sid, P, V, x, w) from P, do: If (x, w) ∈ R, then
send (ZK-proof, sid, P, V, x) to V and S.
• When asked by the adversary, obtain from GgRO the list Qsid of illegitimate queries that
pertain to SID sid, and send Qsid to S.
Figure 8: The Zero-Knowledge functionality FtZK
B NISC protocol [AMPR14]
For completeness we review the ideas behind the NISC protocol of
[AMPR14].
The starting point of [AMPR14] is the highly eﬃcient 2PC protocol of Lindell [Lin13] which is
based on cut-and-choose. The cut-and-choose is used to force the sender P2 to send correct and
consistent garbled circuits.
In the cut-and-choose, P2 sends 3t garbled circuits. P1 chooses a subset of such circuits and
requires to see the randomness used to compute them. In this way it can check that the circuits are
correctly computed. If they all pass the consistency check, then P1 is convinced that most of the
remaining (not checked) circuits are correct as well. P1 then evaluates the remaining circuits and
takes the output on which the majority of the circuits agree upon. To implement this approach one
has to solve the following issues:
1. How to enforce that the garbled keys transferred to P1 via OT are consistent with the garbled
circuits?
This issue is solved by using committing OT in place of standard OT. In the multi server
setting, committing OT works as long as the output of the computation is not published.
Once the output is published then P1 needs to refresh the ﬁrst message (speciﬁcally the ﬁrst
message for the circuit OT).
37
2. How to enforce that P2 uses the same inputs in all the remaining garbled circuits? Indeed,
P1 obtains a set of garbled keys (called labels) for each of the remaining garbled circuits.
However, it has no guarantee that each set correspond to the same input.
This issues is solved in [AMPR14] by requiring P2 to send a commitment of its input, bit
by bit, and then attaching to each garble keys (input label), a proof that the garbled keys
corresponds to the bit committed. We explain this step in more details below.
3. How to reduce the total number of circuits from 3t to t? When the remaining circuits all
output the same value, then P1 is guaranteed that the output is correct with probability
1 − 2−t. However, when the circuits output diﬀerent values it is necessary to provide a
mechanism that allows P1 to obtain the correct answer ( with only t circuits the majority
rule does not give correctness with probability 1 − 2−t). The mechanism provided in [Lin13]
requires several rounds of communication and therefore cannot be applied in the NISC setting
where P1 sends and receives only one message.
The idea in [AMPR14] is to ask P2 to commit to its input and to a “trapdoor” that, if revealed,
allows to compute that decommitment. The trapdoor can be reconstructed by P1 anytime
it obtains two diﬀerent results as the output of the garbled circuits. We explain this step in
more details below.
[AMPR14] overcomes the above issues by crucially exploiting the speciﬁc properties of PVW OT
and El-Gamal commitments. In this sense [AMPR14] is heavily non-black-box. We now describe
in details the techniques used in [AMPR14].
Consistency of the labels exchanged via OT. The goal is to force P2 to send consistent labels
in the OTs for P1’s input wire. This is achieved adopting a committing OT (PVW OT satisﬁes
this property) and by requiring that the randomness used in the OTs for circuit i, is derived from
the PRF run on input seedi. In this way when getting the seed seedi, P1 is able to check both the
correctness of the circuit and the correctness of the OT.
Consistency of P2’s input in all the remaining circuits. For the circuits that will not be
checked, P1 obtains a set of garbled keys representing the input of P2. However, how to check that
such garbled keys all represent the same input? This is done as follows.
• The input labels of the garbled circuit are commitment of bits. More precisely, let i be the
index of a circuit, let j be the input wire. First compute El-Gamal commitments for bit 0 and
bit 1: ui,j,b ← EGCom(h; b, ri,j,b), for b ∈ {0, 1} and where EGCom(h; b, ri,j,b) = gri,j,b, hri,j,bgb
and the randomness ri,j,b is derived from PRF and seedi. Then, the label is computed as:
label(gci, j, b) = ReHash(id2, ui,j,b), where id2 is the identity of P2.
• Each bit of the input of P2 is committed using El-Gamal commitment. Namely, for each bit
j, P2 sends commitment EGCom(h; yj, rj).
• For each label P2 sends a proof of equality with the input committed. Proving equality of
two El-Gamal commitment, without revealing anything about the values committed, is very
simple. It is suﬃcient to reveal the diﬀerence between the randomness used to compute the two
commitments. Namely, let c0, c1 = EGCom(h, m, r)= gr, hrgm and c(cid:48)
1 = EGCom(h, m, r(cid:48))
= gr(cid:48)
Therefore, P2 computes and send inputsEqi = {rj − ri,j,yj} for each circuit gci and input wire
j.
gm, one can verify that (c(cid:48)
0)r−r(cid:48)
0, c(cid:48)
, hr(cid:48)
= c0 and (c(cid:48)
1)r−r(cid:48)
= c1.
38
Reducing the number of garbled circuits. When the remaining circuits do not output the same
value, we need a mechanism of cheating recovering that enables P1 to compute the correct output.
This is implemented using a special extractability property of El-Gamal commitment Indeed, El-
Gamal commitment is extractable given a trapdoor: let h = gw and let c0 = gr, c1 = hrgb an El-
Gamal commitment. Knowledge of the trapdoor w allows the extraction of the bit b by checking if
c1/(c0)w = g or c1/(c0)w = 1. Using this property, the cheating recovery mechanism is implemented
as follows.
• P2 commits to shares of the trapdoor. Namely, let h = gw be the parameter used for all the
El-Gamal commitments send by the P2 (in particular recall that the input of P2 is committed
using h). P2 computes w0, w1 s.t. w0 + w1 = 1 and sends h0 = gw0 and h1 = gw1 to P1 who
checks that h = h0 · h1.
• The output labels are connected to the trapdoor. Let li,0 and li,1 be the output labels of the
i-th garbled circuit gci (for simplicity assume that the output of the circuit is one bit only).
P2 prepares:
– Encryption of each trapdoor under each labels (outputsDecomi): For each circuit i, P2
sends Ki,0 + w0 and Ki,1 + w1, for randomly chosen Ki,0, Ki,1. (These values are revealed
only for the circuits that will be evaluated.) The keys Ki,0, Ki,1 are then encrypted under
the labels li,0 and li,1: P2 sends Enc(li,0, Ki,0) and Enc(li,0, Ki,0).
– Commitment of the labels (output recovery commitments): C0 = h0gKi,0 and C1 =
h1gKi,1. This is a Pedersen commitment and is therefore not binding for P2 which knows
the trapdoors w0, w1. However, it binds P2 to wb + li,b for b ∈ {0, 1}. P1 checks the
consistency of Ki,0 + w0 and Ki,1 + w1 by checking that Cb = gKi,b+wb. If this last check
goes through, then P1 is guaranteed that the labels of the circuit gci are indeed connected
to the trapdoors w0, w1, and thus the circuit is marked as semi-trusted. P1 continues her
executions only if all circuits are semi-trusted.
• Two diﬀerent outputs enable P1 to reconstruct the trapdoor. Let gci and gck two
garbled circuits that output two diﬀerent values. Because they are both semi-trusted, this
means that gci outputs label li,0 that enables P1 to decrypt Ki,0 and therefore w0 and gck
outputs lk,1 enabling P1 to decrypt Kk,1 and therefore w1. P1 then obtains the trapdoor
w = w0 + w1 necessary to decrypt the commitments of the input of P2 and computes the value
f (x, y).
39