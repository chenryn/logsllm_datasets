capability-related operations to preclude any references to
them from other part of the Flash code (see Section 5).
Table 1: Protected objects and properties
Type
Objects
Properties
DOM
Document
Window
Location
and Link
History
Navigator
Form
Form
Elements
Text
cookie, domain, lastModiﬁed
referrer, title, URL
defaultStatus, status
hash, host, hostname, href, search,
port, protocol, pathname, toString
current, next, previous, toString
appCodeName, appName, systemLanguage
userAgent, userLanguage, platform
action
checked, defaultChecked, defaultValue
name, selectedIndex, toString, value
innerHTML, innerText
Flash
Functions
-
Security policies. Security policies are speciﬁed by the
web designer for controlling subjects’ access rights. A policy
can be described by a 4-tuple , where s, o and c
denotes a subject, an object and the capability of the subject
respectively, and a is the action s requests to perform on
o. In FIRM, a subject is either a Flash application or the
JavaScript code from a speciﬁc domain; an object describes
DOM objects, or the functions or variables of JavaScript
code and SWF ﬁles (see Table 1 for examples); the action
element in the tuple can be “read ”, “write”, “execute” or left
blank to indicate denial of access.
Whenever a capability token appears with a request from
a subject s(cid:48) with an operation a(cid:48) on the object o(cid:48), the IRM
searches the policy base to retrieve all the policies containing
c(cid:48). The request is permitted if one of the policies contains s(cid:48),
o(cid:48), a(cid:48) and c(cid:48), and denied otherwise. FIRM also includes a set
of default policies speciﬁed by the web developer, which use
a wildcard symbol ‘*’ to match any subject, object, action
or capability token. When the symbol is applied to c in the
tuple, the policy is used on a subject that does not carry
any capability. The default policies can be used to deﬁne a
set of basic operations open to even untrusted Flash content
or scripts, for example, a read on a nonsensitive text item,
or avoid verbose speciﬁcations of the permissions for every
subject/object pair. They are overruled by other policies
once a conﬂict happens. For example, given two policies
 and , a Flash code s is
denied the access to the cookie.
4.2 Mediation
The objective of inline mediation is to ensure that the
web content under our protection can only be accessed by
subjects with suﬃcient privileges, as indicated by their ca-
pability tokens. To this end, we designed and implemented
a DOM wrapper and a Flash wrapper that work together to
control both Flash/DOM interactions and inter-Flash inter-
actions. We elaborate this approach below.
Flash and DOM wrappers. To mediate Flash code and
its script’s access to web contents, we need to control DOM
and ActionScript functions used in such an access. This is
achieved in our research through wrapping these functions
with mediation code. Speciﬁcally, we developed two wrap-
pers, the DOM wrapper that controls DOM functions and
the operations of scripts, and the Flash wrapper that medi-
ates the use of ActionScript functions.
Figure 4: An example of redeﬁning getter.
The DOM wrapper redeﬁnes the get and set methods of
the DOM objects that need to be protected. Most DOM
objects, such as document, window, forms, and the input
box oﬀer these methods for scripts to read or write their
properties such as cookies, locations and others. In Mozilla
Firefox 3.5, FIRM wraps these methods through __defi-
neGetter__ and __defineSetter__, two methods speciﬁed
under Object.prototype. Other browsers, including IE8,
Google Chrome, Safari and Opera, use diﬀerent methods,
as described in Table 2. The web server that implements
FIRM can use scripts to identify the type of the browser
a client is running (from Navigator.appName) before ren-
dering a web page that wraps its methods. Figure 4 il-
lustrates an example in which the get method of docu-
ment.cookie is supplemented with the code that mediates
the access to the property. Diﬀerent from most properties,
document.location and window.location do not have get
and set. On the other hand, these two properties need
protection because otherwise, untrusted scripts can modify
them to redirect the browser to malicious websites. Our
solution is to make use of the method Object.watch to
monitor these properties: once the method detects that the
properties are about to be changed by the party without
a proper capability1, the IRM simply aborts the redirec-
tion operation if the target is not permitted. Our approach
also wraps DOM functions like document.alert, which pops
up windows (e.g., an alert). These functions could be used
in social engineering, and therefore need mediation. Other
part of the hosting page that the DOM wrapper modiﬁes
includes the JavaScript code for accessing DOM objects or
Flash resources (through the call interfaces exposed by SWF
ﬁles). Such code is instrumented to add in the mechanism
that checks the capability tokens of the party invoking it or
attaches its token to every access request it makes.
The Flash wrapper controls ActionScript functions like
getURL, navigateToURL, ExternalInterface.call and fs-
command. These functions can be used to invoke the script
1watch can intercept the operations that modify the objects
it is monitoring. An authorized party who wants to change
the object needs to place its capability token to a “mark”
variable, which is discussed later in this section.
Sample code for wrapping the getter of document.cookie//1. get pointer to the old gettervar oldGetter = document.__lookupGetter__("cookie"); //2. define the new getterfunction newGetter() {    if(Checker(currentToken))        return oldGetter();    else        throw “unauthorized access”;}//3. replace the old getter with new getterdocument.__defineGetter__("cookie", newGetter);184Table 2: API variations in diﬀerent browsers
Browser
Deﬁne Getter Deﬁne Setter
Get Setter
Mozilla Firefox 3.5
deﬁneGetter
deﬁneSetter
lookupGetter
Get Setter
lookupGetter
Watch
watch
IE 8
deﬁneProperty
deﬁneProperty
getOwnPropertyDescriptor
getOwnPropertyDescriptor
onPropertyChange
Google Chrome 4
Safari 4
Opera 10
deﬁneGetter
deﬁneGetter
deﬁneGetter
deﬁneSetter
deﬁneSetter
deﬁneSetter
lookupGetter
lookupGetter
lookupGetter
lookupGetter
lookupGetter
lookupGetter
-
-
-
already in the hosting web page or inject new scripts. In-
dividual SWF ﬁles stored in the hosting website are also
instrumented with the code for acquiring capability tokens
and their policies from the capability manager as soon as
they are bootstrapped. This is achieved by exposing an
ActionScript function to JavaScript, through which the ca-
pability manager parameterizes the SWF ﬁle. The mission
of the Flash wrapper includes letting a Flash program use
its capability to execute JavaScript code, and protecting its
functions from being misused by scripts or other Flash ap-
plications.
Mediating access to DOM objects. A Flash application
relies on JavaScript code to access DOM objects. To mediate
the access, FIRM wraps all the ActionScript calls related to
JavaScript, as discussed above. Whenever the Flash makes
such a call, the Flash wrapper supplies the capability token
of the Flash to the call, and the mediation code inside the
JavaScript functions to be invoked calls Checker to look up
the security policies regarding the token and makes access
decision based upon the policies.
Figure 5: Sandwiching the injected script.
A challenging problem is how to let the JavaScript code
injected by a Flash application run at the Flash’s privilege.
The IRM may not have access to such code until the runtime:
for example, the code can be downloaded by the Flash from
another site. Automatic analysis of JavaScript code is well
known to be hard [27], which makes it diﬃcult to instrument
the code on the ﬂy. We tackled this problem by leveraging
a special feature of JavaScript: JavaScript code in a web
page actually runs in a single thread, and as a result, its ex-
ecution is sequential [42]2. This feature allows us to develop
a “marking” mechanism that labels the script code running
on a Flash program’s behalf. Speciﬁcally, the DOM wrap-
per maintains a “mark ” variable, which is initialized to zero
and later used to keep the capability token of the running
script. After the Flash wrapper identiﬁes a script injection
operation in a Flash program, for example, from the preﬁx
javascript: within the input content of getURL, it sets the
script code as the input string to an eval command, and
inserts one JavaScript command before the eval to set the
mark to the Flash’s capability and one after to zero out the
mark. This transformation, which we call “sandwiching”,
is illustrated in Figure 5. When the script is running, the
IRM refers to the mark for the script’s privilege. Note that
other scripts cannot read the mark before the sandwiched
code runs to completion, due to the sequential execution of
2The registered user events are triggered sequentially: they
cannot be executed until the script stops running. Similarly,
delayed execution with function setTimeout is also sequen-
tial.
JavaScript [42]. On the other hand, the code cannot esca-
late its own privilege by changing the mark, as it does not
know other capability tokens.
As stated in Section 2, a Flash application can redirect a
visitor to a malicious site and install malware. To defend
against this attack, FIRM mediates functions like getURL: if
the input parameters of these functions are found to contain
URLs (started with http, for example), they are used to
check against a whitelist; only redirection to the URLs on
the list are allowed.
Mediating access to Flash. A Flash application can
choose to expose some of its functions (through Action-
script calls such as ExternalInterface.addCallback) to let
JavaScript code access their resources. A problem here is
that there is no restriction on who can call these functions.
For example, a malicious Flash program can take advantage
of these functions to gain access to another Flash that it is
not allowed to access within the Flash player.
Our solution to this problem is instrumentation of the
exposed functions. Mediation code, as part of the Flash
wrapper, is inserted to the beginning of such functions after
static analysis of Flash code. Once an exposed function is
invoked, our code checks the capability token supplied by
the caller, and decides whether to let the call go through
according to the security policies tied to the token.
Inter-Flash access control. Adobe Flash player main-
tains a boundary between diﬀerent Flash applications. Such
a boundary, however, can be crossed if one Flash shares
its functions to another Flash through a LocalConnection
object. The problem here, again, comes from the “black-
and-white” strategy adopted by the Flash player: a Flash
program shares either all its functions or none at all. A se-
rious consequence of this treatment is that untrusted Flash
code can call the function of privileged Flash code to gain
access to the resources it is not entitled to, once the lat-
ter inadvertently exposes its functions. Our solution to this
problem, again, is based upon code instrumentation and call
wrapping: for the Flash application that is found to build
a LocalConnection with others, our analysis tool instru-
ments all its functions with mediate code; the code checks
the caller’s capability token once a function is invoked, and
aborts the call if the token does not carry a suﬃcient privi-
lege.
A Flash application can load another Flash with load or
loadBytes as a resource and then use addChild to make the
latter its child Flash. When this happens, the child acquires
the full access to the father’s resources, including functions,
variables and others, and is able to leak them out. FIRM
mitigates such a threat by automatically reducing a Flash’s
privilege once it is found to have downloaded untrusted child
Flash.
4.3 Protecting FIRM
Since an IRM works on the same layer as the subjects it
controls, it is under the threats these subjects pose. With-
out proper protection, FIRM can be subjected to various
SWF FilesTokengetURL(JSCode)SandwichSave Token to Markeval(JSCode)Remove the Token185attacks from malicious scripts [25] or Flash applications,
including compromising the integrity of its code and poli-
cies, and stealing its capability tokens. In this section, we
elaborate the measures our approach takes to mitigate these
threats.
Integrity Protection. The obvious targets of attacks are
the DOM and Flash wrappers. As Flash content is not able
to alter its code in runtime (See Section 5), malicious Flash
code cannot get rid of the Flash wrapper after it is instru-
mented. This feature automatically ensures the integrity of
the Flash wrapper. Hence, our integrity protection is fo-
cused on the DOM wrapper.
As discussed before, the DOM wrapper mediates the get
and set functions of important DOM objects. The adver-
sary may try to replace the wrapper with his own functions.
To eliminate this threat, our IRM has been designed to wrap
these important objects before any other subject, and block
any request without a proper privilege to change the getters
and setters of the objects. This is achieved through me-
diating the methods __defineGetter__ and __defineSet-
ter__. To prevent malicious scripts from tampering with
the wrappers for these methods, we employ Object.watch3
(onPropertyChange in IE8) to monitor the operations on
the methods: any change to their function pointers will be
detected by watch and aborted by the IRM before it hap-
pens. The watch method itself is protected in the same way:
it is watching itself and interrupts any attempts to replace
it. The IRM also mediates all the methods of prototype, a
property under Object, Array and Function. This is neces-
sary for protecting the functions associated with these global
variables, such as toString, which could also be modiﬁed by
the adversary [19].
Prior research [36] discovered that a malicious script can
delete all wrapped objects from the memory, which could
lead to the restoration of the original, unwrapped objects.
This threat, however, is limited to Firefox, and can be elimi-
nated by setting constraints on the deletion operation, which
is permitted under Standard ECMA-262 5 [12], the next
generation JavaScript speciﬁcation. FIRM also takes mea-
sures to mitigate the threat: once the IRM ﬁnds itself in
Firefox and a Flash program is about to execute the scripts
within the “sandwich” (See Section 4.2 and Figure 5), the
Flash wrapper works with the DOM wrapper to calculate
the hash values of the instrumented DOM methods and their
function pointers and save them to the variables within the
Flash wrapper. They also move all the valuable data, such
as cookies, into the Flash wrapper. After the execution of
injected scripts, the Flash wrapper veriﬁes the integrity of
these function pointers and methods. If no foul play is found,
the valuable data is restored. Otherwise, it aborts its oper-
ation and warns the user through a pop-up window. The
Flash variables used to save such data assume randomized
names to protect them from being accessed by the origi-
nal, uninstrumented Flash content. They are also beyond
the reach of injected scripts, as they are located within the
Flash.
Conﬁdentiality Protection. The most sensitive FIRM
data are capability tokens, which, once seized by unautho-
rized parties, can be used to escalate their privileges. During
3According to ECMA-262 5 [12], any property of a
JavaScript object has an attribute named Configurable.
When set to false, assigning new value to the property
will throw an exception, which achieves the same goal as
Object.watch. Though the current versions of Google
Chrome, Safari and Opera do not support the function, they
will certainly move towards this standard.
the operations of FIRM, these tokens are stored in the lo-
cal variables of JavaScript and the variables of SWF ﬁles.
Since these local variables cannot be referred by the script
code outside their related functions, the only way an unau-
thorized party can access the capabilities is to read the
code of these functions. This path is also blocked by the
IRM, which is conﬁgured to allow none but itself to read
its code, through mediating the get methods for the in-
nerHTML and innerText properties under its script object,
and the toString, toSource and valueOf methods under
the prototype of Function object.
To protect the capability tokens stored in the instrumented
Flash code, the names of the variables that accommodate
these tokens are randomized, making them unpredictable
to the adversary. Such an operation only needs to be per-
formed once when instrumenting the code. As a result, a
malicious Flash program is unable to access the capability
tokens and other data stored in the Flash wrapper. Note
that an instrumented Flash does not carry hard-coded ca-
pability token. Instead, it gets the token from the capability
manager once it is bootstrapped by the Flash player.
As discussed in Section 4.2, the variables and functions of
a Flash program are completely exposed to the child Flash it
downloads. This lets the child inherit the father’s capability,
which can be risky in some circumstances. For example, a
Flash-based video player could run an untrusted Flash Ad as