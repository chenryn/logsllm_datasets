bFD, the subtraction operator provides a means to compute the
bFD of the trace that is formed by removing all the requests (i.e.,
corresponding bytes) that are made for a subset of objects from Π𝐵.
If Π𝐵
1 is the sequence that is removed from Π𝐵, the byte footprint
2 = Π𝐵 ⊖ Π𝐵
descriptor of the resultant sequence Π𝐵
1 can be computed
using the subtraction operator. By using the inverse fourier transform,
the subtraction operator runs in 𝑂(𝑇 𝑆 log 𝑆) time.
(iii) Scaling. Given a byte sequence Π𝐵 and its corresponding
bFD, the scaling operator provides a means to compute the byte
footprint descriptor of a trace whose traffic rate is intensified or
rarefied i.e., the traffic volume 𝜆 is altered. The scaling operator runs
in 𝑂(𝑇 𝑆) time.
We experimentally verify that the calculus works for bFD. We
consider the trace EU that is described in Table 3. We compute bFD
of each individual traffic class in the trace and use the calculus to find
the bFD of the traffic mix. We verify that the bHRC computed using
the trace that corresponds to the traffic mix aligns with the bHRC
predicted by the calculus. The result of the experiment is depicted in
Figure 4. The Media0+Media1(trace) curve depicts the bHRC com-
puted from the subsequence of trace EU that consists of objects from
the Media0 and Media1 traffic class. The Media0+Media1(calculus)
curve depicts the bHRC computed using the addition operator from
the calculus.
3.2 Object size distribution of a traffic mix
A traffic mix is specified by a list of traffic classes Γ = {𝜏1, . . . , 𝜏𝑛}
and a weight vector W = {𝑤1, . . . , 𝑤𝑛} that specifies the traffic
contribution of each traffic class in GBps. To compute the object size
distribution of a traffic mix, we first compute an object weight vector
O that provides us the ratio of the number of objects per traffic class
that is to be present in the produced synthetic trace.
For each traffic class, we first compute the expected unique byte
rate (𝑈𝑖), which is the number of unique bytes requested per unit
time. Now, we can compute the expected unique object rate i.e., the
370
IMC ’21, November 2–4, 2021, Virtual Event, USA
Anirudh Sabnis and Ramesh K. Sitaraman
Algorithm 1 Object Weight Estimator
1: Input. (i) A list of byte footprint descriptors 𝑏𝐹 𝐷 = {𝑏𝐹 𝐷1, . . . , 𝑏𝐹 𝐷𝑛}
of each traffic class 𝜏𝑖 , (ii) a weight vector 𝑊 = {𝑤1, . . . , 𝑤𝑛}, where
𝑤𝑖 specifies the traffic volume (in GBps) for the traffic class 𝜏𝑖 , and
(iii) size distribution of the objects 𝑆𝑍 = {𝑆𝑍1, . . . , 𝑆𝑍𝑛} of each traffic
class 𝜏𝑖 .
2: Output. An object weight vector O = {𝑜1, . . . , 𝑜𝑛} that specifies the
ratio of number of objects per traffic class.
𝑈𝑜𝑟𝑖𝑔 + = 𝑃𝑟𝑏 (𝑠, 𝑡). 𝑠
𝑈𝑜𝑟𝑖𝑔 = 0
for 𝑠 ∈ 𝑆 do // 𝑆 be the stack distance buckets in 𝑃𝑟𝑏 (𝑠, 𝑡).
for 𝑡 ∈ 𝑇 do // 𝑇 be the time buckets in 𝑃𝑟𝑏 (𝑠, 𝑡).
3: O ← {}
4: for 𝑏𝐹 𝐷𝑖 ∈ 𝑏𝐹 𝐷 do // 𝐹 𝐷𝑖 = ⟨𝜆, 𝑃𝑟𝑏 (𝑠, 𝑡), 𝑃𝑎𝑏 (𝑠, 𝑡)⟩
5:
6:
7:
8:
9:
10:
11:
12:
13:
end for
Let 𝑠𝑎𝑣𝑔
be the average object size of the traffic class 𝜏𝑖
Let 𝜆𝑖 be the traffic volume (in GBps) of traffic class 𝜏𝑖
× 𝑈𝑜𝑟𝑖𝑔
𝑈𝑖 = 𝑤𝑖
𝜆𝑖
𝑜𝑖 ← 𝑈𝑖
𝑠𝑎𝑣𝑔
𝑖
Append 𝑜𝑖 to O
end for
14:
𝑡
𝑖
15:
16: end for
17: return O
Initialization. An empty list 𝐶 that represents a cache is initialized
in line 5. Through lines 7-11, we iteratively create new objects,
assign them a size that is sampled from the object size distribution
𝑆𝑍, and append them to the list. We repeat till the sum of the sizes
of the objects exceeds the maximum stack distance in 𝑃(𝑠). The
maximum stack distance is the maximum number of unique bytes in
any request or byte subsequence of the original trace. Each entry in
𝐶 is thus a tuple ⟨𝑜𝑖𝑑, 𝑧⟩ of object id and size.
Synthetic trace generation. The trace generation algorithm runs
from line 17 to line 27. In each iteration 𝑖, the object at the first
position in the list 𝐶, say 𝑜 = ⟨𝑜𝑖𝑑, 𝑧⟩, is appended to the trace 𝑆 that
is being produced. Now, a stack distance 𝑠𝑖 is sampled from 𝑃(𝑠)
and the list is manipulated based on the value of 𝑠𝑖. There are two
cases:
(i) if 𝑠𝑖 is finite (lines 17-21): the object 𝑜 is removed and re-
inserted back at a position 𝑗 in 𝐶, by moving the objects at positions
≥ 𝑗 by a step. The location 𝑗 is decided as follows. We find the first
position in the list, say 𝑘, such that the sum of the sizes of the objects
at locations from 1 to 𝑘 in 𝐶 is greater than 𝑠𝑖. Let the sum of the
sizes of the objects be 𝑆𝑘 and the size of the object at position 𝑘 be
𝑧𝑘. Now, if 𝑠𝑖 ≤ 𝑆𝑘−1 + 𝑧𝑘
2 , i.e., the stack distance 𝑠𝑖 falls on the first
half of the object at position 𝑘, then 𝑗 is set to 𝑘 − 1 and set to 𝑘
otherwise. This ensures that object 𝑜 is re-inserted at a location that
is as close as possible to stack distance 𝑠𝑖.
(ii) if 𝑠𝑖 is ∞ (lines 21-25): object 𝑜 is removed from 𝐶 and a new
object 𝑜′ is inserted at the end of the list.
Now in line 28, a timestamp 𝑡𝑖 is assigned to each request 𝑟𝑖 in the
synthetic trace 𝑆. We assign timestamp to the synthetic trace based
on the byte rate 𝜆 obtained from the bFD.
Time complexity. We implement the list 𝐶 as the leaves of a 𝐵+-tree
[15], and thus, the complexity of the algorithm is O(𝑁 log 𝑚), where
Figure 4: The bHRC for the traffic mixes in the EU trace as predicted
by the calculus aligns with the original.
𝑖
. Here, 𝑠𝑎𝑣𝑔
number of unique objects requested per unit time, for the traffic class
as 𝑈𝑖/𝑠𝑎𝑣𝑔
is the average object size of the traffic class.
The ratio of unique object rate across the specified traffic classes
gives us the object weight vector O . The procedure is described in
Algorithm 1.
𝑖
(cid:17)
𝑈𝑜𝑟𝑖𝑔 =𝑡𝑠 𝑃𝑟𝑏(𝑠, 𝑡)(cid:16) 𝑠
The computation of unique byte rate 𝑈𝑖 is done as follows. Let
𝑈𝑜𝑟𝑖𝑔 be the expected unique byte rate of a traffic class 𝜏𝑖 and
bFD of 𝜏𝑖 is a tuple ⟨𝜆, 𝑃𝑟𝑏(𝑠, 𝑡), 𝑃𝑎𝑏(𝑠, 𝑡)⟩. As described in lines
6-10 of Algorithm 1, we can compute 𝑈𝑜𝑟𝑖𝑔 from the bFD using
. Recall that 𝑃𝑟𝑏(𝑠, 𝑡) is a joint probabil-
ity distribution that a reuse byte subsequence has 𝑠 unique bytes and
𝜆 × 𝑈𝑜𝑟𝑖𝑔 (line
duration 𝑡 seconds. Now, 𝑈𝑖 can be computed as 𝑤𝑖
13), where 𝑤𝑖 is the traffic volume specified by the user and 𝜆 is the
traffic volume of the original trace.
𝑡
The object size distribution, SZ, of the traffic mix can be com-
puted by weighting the SZ of individual traffic classes by a weight
proportional to its contribution in the object weight vector.
4 Trace Generator
The trace generator produces a synthetic trace with same request
hit rate curve (rHRC) or byte hit rate curve (bHRC) as the original
trace or a user-specfied traffic mix.
4.1 Trace generation algorithm
Algorithm 2 performs trace generation and is described below.
Input. The algorithm is provided with a model of a traffic class or
traffic mix:
(1) a FD ⟨𝜆, 𝑃𝑟 (𝑠, 𝑡), 𝑃𝑎(𝑠, 𝑡)⟩,
(2) a bFD ⟨𝜆, 𝑃𝑟𝑏(𝑠, 𝑡), 𝑃𝑎𝑏(𝑠, 𝑡)⟩,
(3) an object size distribution 𝑆𝑍, and
(4) the number of requests 𝑁 to be generated.
Output. A synthetic trace 𝑆 = {𝑟1, . . . , 𝑟𝑁 }, where each 𝑟𝑖 = ⟨𝑡𝑖, 𝑜𝑖, 𝑧𝑖⟩
is a tuple of timestamp, object id, and object size.
Note: The algorithm uses either the FD or bFD depending on
whether RHR or BHR is required. Let 𝑃(𝑠) =𝑡 𝑃𝑟 (𝑠, 𝑡) or 𝑃(𝑠) =
𝑡 𝑃𝑟𝑏(𝑠, 𝑡) be the marginal distribution from the FD or bFD, de-
pending on the input. .
371
0.02.55.07.510.0Cache size (TB)0.00.20.40.60.81.0Byte hit rate (BHR)Media0+Media1(trace)Media0+Media1(calculus)Media0+Media2(trace)Media0+Media2(calculus)TRAGEN: A Synthetic Trace Generator for Realistic Cache Simulations
𝑁 is the length of the synthetic trace and 𝑚 is the number of unique
objects in the synthetic trace. The algorithm runs for 𝑁 iterations
and in each iteration it takes log(𝑚) time to insert the object back
into the list at the sampled stack distance (line 19).
We will now formally prove that the algorithm produces a syn-
thetic trace that has approximately the same HRCs as predicted
by the footprint descriptors. In particular, if Footprint Descriptor
(FD) is provided as the input, the algorithm produces a trace with
approximately the same rHRCs (Theorem 3). When Byte-weighted
Footprint Descriptor (bFD) is provided as the input, the algorithm
produces a trace with approximately the same bHRCs (Theorem 4).
Algorithm 2 Synthetic trace generator
1: Input. (i) A Footprint Descriptor (FD) ⟨𝜆, 𝑃𝑟 (𝑠, 𝑡), 𝑃𝑎(𝑠, 𝑡)⟩, (ii) Byte-
weighted Footprint Descriptor (bFD) ⟨𝜆, 𝑃𝑟𝑏 (𝑠, 𝑡), 𝑃𝑎𝑏 (𝑠, 𝑡)⟩, (iii) Ob-
ject size distribution (𝑆𝑍 (𝑧)) and (iv) trace length 𝑁 .
2: Output. A synthetic trace 𝑆 = {𝑟1, . . . , 𝑟𝑁 }, where 𝑟𝑖 = ⟨𝑡𝑖, 𝑜𝑖, 𝑧𝑖 ⟩ is a
tuple of timestamp, object identifier and object size.
4: 𝑃 (𝑠) =𝑡 𝑃𝑟 (𝑠, 𝑡) or 𝑃 (𝑠) =𝑡 𝑃𝑟𝑏 (𝑠, 𝑡) depending on whether RHR
3: Phase 1 - Initialization.
or BHR is required.
5: 𝐶 ← {}, 𝐶𝑠𝑖𝑧𝑒 = 0.
6: 𝐶𝑚𝑎𝑥 is the maximum finite 𝑠 in 𝑃 (𝑠).
7: while 𝐶𝑠𝑖𝑧𝑒 < 𝐶𝑚𝑎𝑥 do
8:
9:
10:
11: end while
Create object 𝑜 and assign a size 𝑧 sampled from 𝑆𝑍 .
Add object 𝑜 to the list 𝐶.
𝐶𝑠𝑖𝑧𝑒 ← 𝐶𝑠𝑖𝑧𝑒 + 𝑧.
12: Phase 2 - Synthetic trace generation.
13: 𝑆 ← 𝜙, 𝑖 ← 0.
14: while 𝑖 < 𝑁 do
15:
16:
17:
18:
19:
Compute 𝑗 = 𝑚𝑖𝑛{𝑘 :𝑘
Append the first object 𝑜 = ⟨𝑜𝑖𝑑 , 𝑧⟩ in 𝐶 to the trace 𝑆.
Sample stack distance 𝑠 from 𝑃 (𝑠).
if 𝑠 is not ∞ then
Remove 𝑜 from 𝐶.
𝑖=1 𝑧𝑘 ≥ 𝑠}; where 𝑧𝑖 is the size of the
Re-insert object 𝑜 at position 𝑗 in 𝐶 by moving objects at posi-
object at 𝐶[𝑖].
tions ≥ 𝑗 by a step.
20:
else// ∞ means a new object was introduced in the trace.
Remove the object 𝑜 that is at the first index in 𝐶.
Create new object 𝑜′ and assign it a size 𝑧 sampled from 𝑆𝑍 .
Add object 𝑜′ at the end of the list 𝐶.
21:
22:
23:
24:
25:
26:
27: end while
28: Assign timestamps to requests in 𝑆 using 𝜆 from bFD.
29: return 𝑆
end if
𝑖 ← 𝑖 + 1
THEOREM 3. Given a FD, ⟨𝜆, 𝑃𝑟 (𝑠, 𝑡), 𝑃𝑎(𝑠, 𝑡)⟩, and a size distri-
bution 𝑆𝑍 of an original trace Π, Algorithm 2 produces a synthetic
trace 𝑆 = {𝑟1, . . . , 𝑟𝑁 }, where 𝑟𝑖 is a tuple ⟨𝑡𝑖, 𝑜𝑖, 𝑧𝑖⟩ of timestamp,
object id and object size and 𝑁 is the synthetic trace length. As
𝑁 → ∞, the rHRC of traces 𝑆 and Π for an LRU cache are approxi-
mately equal.
372
PROOF. Let 𝑃(𝑠) =𝑡 𝑃𝑟 (𝑠, 𝑡), where 𝑃𝑟 (𝑠, 𝑡) is the reuse subse-
IMC ’21, November 2–4, 2021, Virtual Event, USA
quence descriptor function of trace Π. Consider the synthetic trace
𝑆 = {𝑟1, . . . , 𝑟𝑁 }. In each iteration 𝑖 of the algorithm, we sample a
stack distance 𝑠𝑖 from 𝑃(𝑠) and request 𝑟𝑖 is added to the synthetic
trace 𝑆. Let request 𝑟𝑖 be made for an object 𝑜. We know 𝑠𝑖 can either
be a finite quantity or be ∞. We consider both cases and show that
in either case 𝑠𝑖 is approximately represented in the synthetic trace.
Case 1: 𝑠𝑖 is finite. In the 𝑖𝑡ℎ iteration, let 𝑘 be the smallest index
in 𝐶 such that the sum of the sizes of the objects from position 1
to 𝑘 in 𝐶 is greater than or equal to 𝑠𝑖. Let 𝑧𝑘 be the size of the
object at position 𝑘. As 𝑜 is inserted at the position 𝑘 in 𝐶, it is
inserted at a stack distance that is at least 𝑠𝑖 and at most 𝑠𝑖 + 𝑧𝑘
(line 19, Algorithm 2). Now, if 𝑟 𝑗 is the subsequent request in 𝑆 that
was made for object 𝑜, the request subsequence 𝜃 = {𝑟𝑖, . . . , 𝑟 𝑗} is
a reuse request subsequence in 𝑆. The unique objects in 𝜃 are the
objects present at positions 1 to 𝑘 in 𝐶 in the 𝑖𝑡ℎ iteration of the
algorithm. We know the sum of the sizes of these objects is at least
𝑠𝑖 and at most 𝑠𝑖 + 𝑧𝑘. Since the number of objects in the trace is
typically large, the reuse request sequences often have many unique
objects, hence 𝑠𝑖 ≫ 𝑧𝑘. Therefore, the number of unique bytes in 𝜃
is approximately 𝑠𝑖 and the sampled stack distance 𝑠𝑖 is represented