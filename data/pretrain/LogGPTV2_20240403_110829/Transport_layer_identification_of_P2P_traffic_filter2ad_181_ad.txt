27016, 901, 2745]
MalwarePortsSet: [3127, 3128, 1433, 1434, 3531, 1080,
10080, 17300, 6129, 27015,
The ﬁrst contains the known P2P port numbers; the second,
malware and gaming ports. We classify an {IP, port} pair
as nonP2P if:
{ length(pair.transfer_sizesSet) == 1 or
length(pair.avg_pktssizesSet)  5 or
or port in MalwarePortsSet }
port 
Rejected.insert(pair)
10
then
when signiﬁcant changes occur in the speciﬁc traﬃc mix
(e.g., suﬃcient amount of packets or ﬂows by a new worm
or a new P2P network).
Finally, note that for the {IP, port} pairs heuristic we indi-
rectly separate ﬂows into two diﬀerent classes. The ﬁrst class
is ﬂows where one of the ports is within the KnownP2PPortsSet.
In this case we deem the absolute diﬀerence of the sizes of
IPSet and PortSet to be acceptable if less than 10, since the
probability that the speciﬁc pair is actually P2P is higher.
(Note that the sizes of IPSet and PortSet indicate the num-
ber of distinct ports and distinct IPs aﬃliated with the
speciﬁc {IP,Port} pair, see {IP,port} heuristic, section 5.2.)
While new P2P clients randomize port numbers, there still
exist P2P clients that use known P2P ports (most users do
not immediately upgrade to newer versions that randomize
the port). On the contrary, for all other ﬂows, we allow
a maximum diﬀerence of 1 between the sizes of IPSet and
PortSet. While our {IP,port} heuristic, assumes equal sizes
of PortSet and IPSet, we allow limited inequality to account
for possible failed connections which is common in P2P be-
havior 7.
6. EVALUATION
In this section we evaluate the accuracy of our method-
ology, by comparing nonpayload versus payload estimates
of P2P traﬃc. We will use our recent 16-byte payload
traces (February and April 2004) and strict payload match-
ing (method M2 in section 4.) We avoid using M3 for com-
parison purposes in this section; ﬁrst, 16-byte payload traces
oﬀer suﬃcient number of payload bytes to identify the vast
majority of P2P ﬂows. Second, M3 could introduce am-
biguity in evaluating the PTP Algorithm, since we would
compare against ﬂows that we cannot determine with abso-
lute certainty if they are P2P or not (M3 introduces false
positives and targets 4-byte payload traces to mitigate the
disadvantage of only 4-bytes of user payload). Thus, we
only use M2 for payload analysis in this section. We ﬁrst
compare the number of P2P ﬂows and bytes as identiﬁed
by the two methodologies.
In addition, we study the ex-
tent and nature of false positives. Finally, we show how our
methodology overcomes disadvantages of payload analysis
and present the volumes of additional P2P ﬂows that we
were able to identify.
6.1 Fraction of identiﬁed P2P trafﬁc
We now demonstrate how PTP Algorithm performs com-
pared to payload analysis, in particular what fraction of P2P
traﬃc found by payload analysis (M2, Sec.4) can be found
by PTP Algorithm.
Fig. 2 and 3 summarize our ﬁndings. Fig. 2 presents the
bitrate of P2P traﬃc determined by payload analysis (upper
line) and the fraction identiﬁed by PTP Algorithm (bottom
line). For all P2P ﬂows that were previously discovered by
payload inspection, we examine whether PTP Algorithm
also classiﬁed them as P2P. As shown in Fig. 2, the two
lines fall almost on top of each other in all three traces,
7The values of 1 and 10 in the diﬀerence between the sizes
of the IPSet and PortSet have a minimal eﬀect in our algo-
rithm. Allowing larger diﬀerences will only impact slightly
the number of false positives. The two classes of ﬂows reﬂect
the fact that pairs with port in the knownP2PPortSet are
more likely to be P2P.
Figure 2: The bitrate of P2P traﬃc as determined by our payload methodology (upper line) and the portion that was
identiﬁed by our nonpayload algorithm (bottom line). In all three traces our nonpayload methodology successfully
identiﬁes more than 90% of P2P bytes. Even with increasing P2P bitrate (approx. 220 Mbps, right plot), the algorithm
identiﬁes more than 95% of P2P bytes.