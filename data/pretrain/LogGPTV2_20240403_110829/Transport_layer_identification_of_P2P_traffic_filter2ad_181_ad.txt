### Known P2P and Malware Ports
The first set contains known P2P port numbers: [27016, 901, 2745]. The second set, `MalwarePortsSet`, includes ports commonly associated with malware and gaming: [3127, 3128, 1433, 1434, 3531, 1080, 10080, 17300, 6129, 27015].

### Classification of {IP, Port} Pairs
We classify an {IP, port} pair as non-P2P if any of the following conditions are met:
- The length of `pair.transfer_sizesSet` is equal to 1.
- The length of `pair.avg_pktssizesSet` is greater than 5.
- The port is in the `MalwarePortsSet`.

If a pair meets any of these criteria, it is added to the `Rejected` set.

### Dynamic Adjustment
The classification rules can be adjusted when significant changes occur in the specific traffic mix, such as the emergence of a new worm or a new P2P network.

### Heuristic for {IP, Port} Pairs
Our heuristic indirectly separates flows into two different classes:
1. **Flows with a Port in `KnownP2PPortsSet`:** For these flows, we consider the absolute difference between the sizes of `IPSet` and `PortSet` acceptable if it is less than 10. This is because the probability that the specific pair is actually P2P is higher. (Note: The sizes of `IPSet` and `PortSet` indicate the number of distinct ports and distinct IPs affiliated with the specific {IP, Port} pair, as described in section 5.2.)
   - While new P2P clients randomize port numbers, some still use known P2P ports. Most users do not immediately upgrade to newer versions that randomize the port.

2. **All Other Flows:** For these, we allow a maximum difference of 1 between the sizes of `IPSet` and `PortSet`. Although our heuristic assumes equal sizes of `PortSet` and `IPSet`, we allow limited inequality to account for possible failed connections, which is common in P2P behavior.

### Evaluation
In this section, we evaluate the accuracy of our methodology by comparing non-payload versus payload estimates of P2P traffic. We use recent 16-byte payload traces (from February and April 2004) and strict payload matching (method M2 in section 4). We avoid using method M3 for comparison purposes in this section for the following reasons:
- 16-byte payload traces offer sufficient payload bytes to identify the vast majority of P2P flows.
- Method M3 could introduce ambiguity in evaluating the PTP Algorithm, as it might compare against flows that cannot be determined with absolute certainty to be P2P (M3 introduces false positives and targets 4-byte payload traces to mitigate the disadvantage of only 4-bytes of user payload).

#### Fraction of Identified P2P Traffic
We demonstrate how the PTP Algorithm performs compared to payload analysis, specifically what fraction of P2P traffic found by payload analysis (M2, Sec. 4) can be identified by the PTP Algorithm.

Figures 2 and 3 summarize our findings. Figure 2 presents the bitrate of P2P traffic determined by payload analysis (upper line) and the fraction identified by the PTP Algorithm (bottom line). For all P2P flows previously discovered by payload inspection, we examine whether the PTP Algorithm also classified them as P2P. As shown in Figure 2, the two lines fall almost on top of each other in all three traces, indicating that our non-payload methodology successfully identifies more than 90% of P2P bytes. Even with increasing P2P bitrate (approximately 220 Mbps, right plot), the algorithm identifies more than 95% of P2P bytes.

### Note on IPSet and PortSet Differences
The values of 1 and 10 for the differences between the sizes of `IPSet` and `PortSet` have a minimal effect on our algorithm. Allowing larger differences would only slightly impact the number of false positives. The two classes of flows reflect the fact that pairs with ports in the `knownP2PPortSet` are more likely to be P2P.

![Figure 2: The bitrate of P2P traffic as determined by our payload methodology (upper line) and the portion that was identified by our nonpayload algorithm (bottom line). In all three traces, our nonpayload methodology successfully identifies more than 90% of P2P bytes. Even with increasing P2P bitrate (approx. 220 Mbps, right plot), the algorithm identifies more than 95% of P2P bytes.](path_to_figure_2)