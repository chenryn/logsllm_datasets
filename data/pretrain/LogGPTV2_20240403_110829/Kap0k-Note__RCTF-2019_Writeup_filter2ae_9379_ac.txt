    function stringToHex(str){
        var val="";
        for(var i = 0; i 
0号是假flag
1号是真flag
## misc
### draw
logo语言, 找个在线编译器丢进去
[jslogo](https://www.calormen.com/jslogo/)
白给, 不过需要注意一下flag格式
    flag: RCTF_HeyLogo
### disk
#### 题目信息
附件中的文件
#### 解题
misc看到文件先丢到 **010Editor** 看一下
ctrl+f 搜一下flag, ctf这些, 还真的搜到了
拿出来是这样
    rctf{unseCure_quick_form4t_vo1ume
~~老实说一开始看到还没啥感觉...以为只是混淆的内容, 后面才突然想起来的~~
然后尝试VeraCrypt加载, 发现加载失败
看了文件格式, 拿去vmware也加载失败
队友说用7z打开解压一下, 可以看到这个东西, 拿出来就可以加载了
挂载后可以看到一张图片和一个txt
有另一个密码, 应该就是隐藏卷了
加载隐藏卷, 发现打不开, 提示是Raw格式
linux下也不能加载
用DiskGenius直接读磁盘
果然看到了后半段, 拼起来即可
    rctf{unseCure_quick_form4t_vo1ume_and_corrupted_1nner_v0lume}
### printer
#### 题目信息
附件
#### 解题
这个是一个wireshark的文件, 用wireshark打开, 看到一些数据, 按长度排序, 有个特别大
看他的数据内容, 底部有很多BAR的数据
直接搜一下可以发现是个标签打印机的数据
[标签打印机抓包数据解析](http://www.mamicode.com/info-detail-2571063.html)
文章里面有些图片看不清, 但是提到了一个pdf文档, 把它下载下来可以看到那些图片的内容
下面是bar命令的参数信息
那根据这个信息, 可以用python画个图
把数据从wireshark里面复制出来, 小处理一下
    # python = 3.7
    from PIL import Image
    with open("printer.txt", "r") as f:
        txt = f.readlines()
        txt = [i.strip().split(",") for i in txt]
        pic=Image.new('RGB',(2000,2000),'black')
        pix=pic.load()
        for i in txt:
            temp = Image.new('RGB', (int(i[2]), int(i[3])), 'white')
            pic.paste(temp, (int(i[0]), int(i[1])))
        pic.show()
    '''
    348,439,2,96
    292,535,56,2
    .....
    .....
    152,351,16,2
    152,351,2,16
    '''
PIL画图大法好, 可以看到结果
看起来还少了点东西, 再看文章里面还有个Bitmap
果然数据中有这个东西
26 * 48 = 1248, 因此应该有1248个两位的16进制数(8个bit)
取出这些16进制数, 小处理一下(notepad++的处理挺方便的), 然后继续上python
    def pic2():
        with open("printer2.txt") as f:
            txt = f.read().split()
            pic = Image.new('RGB', (800, 800), 'black')
            pix = pic.load()
            for i in range(48):
                for j in range(26):
                    x = ("{:08b}".format(int(txt[i * 26 + j], 16)))
                    for k in range(8):
                        if x[k] == '1':
                            pix[i, j * 8 + k] = (255, 255, 255)
            pic.save('printer2.png')
    '''
    ff ff ff ff ff ff ff ff ff ff ff ff ff
    .....
    .....
    ff ff ff
    '''
得到的图片是镜像, 转一下
拼起来就是flag了
> flag{my_tsc_hc3pnikdk}
### watermark
  1. 阅读HTML，发现它首先调用JS把flag编码成了一个有着841个Bool的Array，对于所有class为watermark的div，它会在更改每个字符的颜色之后塞进一个SVG，替换掉div中的文本。对于英文字母，RGB是从Array中依序拿出的三个Bool值(a, b, c)，其中a, b, c为0或1；对于其它字符，RGB是(0, 0, 0)。  
2.接下来把JS反混淆，通过观察生成Array的大小（841 = 29^2）、Google搜索脚本中的字符串常量，发现这是一个编码二维码的脚本。执行：
    arr = A.B.E(A.C.D("RCTF{xxxxxxxxxxxxxxxxxxxxxxxxxxx}")).F();
    s = "";
    for (var i = 0; i  "admin:0;username:aaaaa;password:aaaaa"
并将它用aes-cbc进行加密，然后再将该密文前面拼接上16位的salt之后进行sha1，最后把iv+密文+sha1结果作为data返回给我们
接下来我们可以发送data过去，服务器会进行aes-cbc解密并校验传过去的sha1是不是和我们传过去的cookie符合，然后再捕捉cookie中的admin，如果是1则输出flag，如果是0则退出程序
需要注意的是如果我们传过去的数据有误，会返回错误信息并继续接收data直到服务器可以解密我们传过去的cookie并且sha1校验的信息正确
这道题的要点有两个：
  1. 如何通过sha1校验
  2. 如何伪造cookie使得admin为1
对于要点1来说，可以参考去年RCTF的cpushop的题，用hash长度拓展攻击就可以，我们可以拓展出来`';admin:1'`这样的信息附加到原来的cookie末尾，这样服务器校验的时候便会通过。我们可以用`'hashpumpy'`这个python包来进行长度拓展攻击。
需要注意的是，服务器返回的data中的cookie的加密数据的长度为96个十六进制数，我们使用长度拓展攻击之后长度会变为128个十六进制数，所以需要先将data中的cookie的加密数据再附加32个十六进制数
对于要点2来说，aes-cbc模式可以用`'Padding Oracle
Attack'`结合`'CBC字节反转攻击'`来伪造加密之后的密文。我们可以先用Padding Oracle
Attack获取cookie解密之后的最后16位的明文，然后用CBC字节反转攻击修改密文使其解密之后的明文变为hash长度拓展攻击生成的明文。这样重复4次就可以修改所有的密文解密之后的明文变为我们想要的明文
最终我们就可以通过这个思路传过去伪造的data得到flag:`RCTF{f2c519ea-567b-41d1-9db8-033f058b4e3e}`
解题脚本：
    HOST = "111.231.100.117"
    PORT = 20000
    import urllib
    from pwn import *
    import hashpumpy
    from cryptography.hazmat.primitives import padding
    def pad(s):
        padder = padding.PKCS7(128).padder()
        return padder.update(s) + padder.finalize()
    def Padding_Oracle_Attack(last,last2,rest):
        last2 = last2.decode('hex')
        c_final = ""
        m = ""
        for x in xrange(1, 17):
            for y in xrange(0, 256):
                IV = "\x00" * (16 - x) + chr(y) + "".join(chr(ord(i) ^ x) for i in c_final)
                r = rest+IV.encode('hex')+last+hash
                rv(4096)