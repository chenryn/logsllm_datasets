5. If you study Figure 3.11 carefully, you will see that a UIAlertView object is only created based on the return
value from the sub_b1fc function at 0xb08a. If the return value is equal to zero, the cbz r0, 0xb0fc
instruction causes the execution flow to jump to address 0xb0fc. You can get a clearer view of what a
function is doing through the pseudo-code view in Hopper, so choose Window Show Pseudo Code of
Procedure. Figure 3.12 shows the pseudo-code output.
6. Because the application exits only when the UIAlertView button is clicked, you can see what actions are
triggered from the button click by inspecting the clickedButtonAtIndex delegate of this alert view. Figure
3.13 shows the pseudo-code view for this function, which was found to be compiled next to the viewDidLoad
delegate. From the pseudo-code it should be clear that clicking the button causes the application to call the
exit()function.
7. Clearly, the application loads the UIAlertView based on the return value of the sub_b1fc function. To jump to
the disassembly view of a function in Hopper, double-click the name of the function. In this case you should
now understand that the UIAlertView is only loaded when the function returns anything other than zero.
Therefore it stands to reason that by permanently modifying the return value of the sub_b1fc function you
can prevent the UIAlertView from ever being displayed. To get a better understanding of the function and
identify potential instructions to modify, use the pseudo-code view again, as shown in Figure 3.14.
8. The function returns the value in the r0 register, which is set in the two highlighted locations in the
function. One instance sets the r0 register to 0x0 whereas the other sets it to 0x1. With this in mind,
modifying the 0x1 constant in the loc_b226 basic block to 0x0 should cause the function to always return 0x0.
Therefore, with a simple 1-byte patch bypassing the jailbreak detection should be possible. To apply a patch
in Hopper, locate the instruction you want to modify, in this case the movs r0, 0x1 located at 0xb226, and
press the Alt+A keyboard shortcut. This loads the Hopper assembler window, as shown in Figure 3.15. In this
window you can modify the instruction, which in this case, simply modify it to movs r0, 0x0.
9. Modifying an instruction causes Hopper to no longer recognize it as a procedure; to mark a block of code
back to a procedure you can navigate to the start of the function and press P on your keyboard. When you’ve
made a binary patch you may want to double-check your modifications in the pseudo-code viewer to make
sure it looks as expected. When you are happy with the changes that you have made, save them to a new
executable by selecting File Produce New Executable.
10. As detailed in Chapter 2, iOS applications are code signed; by modifying an application in the manner
previously described you will have invalidated the code signature. However, to run a modified application on
a jailbroken device, you can either pseudo-sign it or code-sign it using a self-signed certificate. To pseudo-
sign an application you can use the ldid tool created by saurik as described in Chapter 2 in the section,
“Tools for Signing Binaries.” To sign this example binary, execute ldid as follows:
$ l did -S Lab3.4a-patched
11. To test your patches upload the application to your device and overwrite the existing binary for the
application. Opening the modified example application on a jailbroken device no longer causes the
UIAlertView to display, indicating that the jailbreak detection has been successfully bypassed as shown in
Figure 3.16.
Figure 3.8 Hopper disassembler
Figure 3.9 Locating strings in Hopper
Figure 3.10 Finding references to strings in Hopper
Figure 3.11 Disassembly of the viewDidLoad delegate
Figure 3.12 Pseudo-code view in Hopper
Figure 3.13 Pseudo-code view of clickedButtonAtIndex in Hopper
Figure 3.14 Pseudo-code view of sub_b1fc function in Hopper
Figure 3.15 Modifying an instruction in Hopper
Figure 3.16 Running the example application after bypassing the jailbreak detection
From this section you should’ve gained an understanding of how iOS applications can be statically patched to
modify application behavior and bypass security controls. Although we’ve only demonstrated a simple example,
you can apply the overall methodology to more complex applications, and for many different patching purposes.
Attacking the iOS Runtime
In the previous section you learned how to statically patch applications so as to modify their behavior, and how
to leverage this to bypass security controls. However, this is not the only way in which iOS applications can be
manipulated; you can also instrument the runtime to have a similar effect.
Having an appreciation of the application runtimes is important for understanding how iOS applications
function. Objective-C and Swift defer as many decisions as possible from compile and link time to runtime. At
the heart of this concept is reflection, which allows applications to be aware of and modify their own behavior at
runtime. Reflection allows apps to do things such as dynamically load new classes, change method
implementations and generally avoid many of the constraints that are implied through the use of native code.
Having such abilities at runtime means that you are also able to manipulate the runtime and an app’s behavior
to your own ends, which can be an extremely powerful resource for a security professional. This section explores
the different ways in which the iOS runtime can be manipulated, providing practical examples where
appropriate.
Understanding Objective-C and Swift
Before delving into how to programmatically manipulate the Objective-C and Swift runtimes, having a basic
understanding of how these languages work, and if you are unfamiliar with either of the languages, seeing what
a simple program might look like, can be helpful.
Although this section provides a basic breakdown of the essential components of each of these languages, if you
have never seen any Objective-C or Swift code before, we recommended that you familiarize yourself with these
languages; the documentation provided by the Apple developer program is a useful starting point. These links
are likely to be helpful:
https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/
and
https://developer.apple.com/library/mac/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html
Objective-C and Swift are object-oriented programming languages. This means that they use objects to
encapsulate data in the form of classes. A class can contain instance variables, methods, and properties. Within
a class, member variables can be considered similar to private variables in Java and due to access control require
getter and setter methods to access them. For more information on access control within Swift and Objective-C,
consult the Apple documentation
(https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AccessControl.html
and
https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html
Within an Objective-C class, the definition of the class structure is described within an interface file. Figure 3.17
provides a simple breakdown of an interface.
Figure 3.17 A breakdown of an Objective-C interface
Figure 3.17 contains an example of both instance and class methods; these are denoted by the – and + symbols,
respectively. To invoke an instance method you require an instance of the class to be instantiated, whereas class
methods are very similar to static methods in other programming languages and can be invoked without
actually creating an instance of the class.
Here is an example of creating an instance of the hypothetical HelloWorld class (as an object) and then invoking
the instance method sayPhrase:
HelloWorld *hw = [[HelloWorld alloc] init];
[hw setPhrase:@"Hello World"];
[hw sayPhrase];
To invoke the class method sayPhrase you would not need to allocate a new object, as shown here:
[HelloWorld sayPhrase:@"Hello World"];
This distinction is important, as you will need to understand how to invoke both instance and class methods
when you start to instrument the iOS runtime.
Figure 3.18 details an equivalent breakdown of a Swift class.
Figure 3.18 A breakdown of Swift class
In a similar way to the Objective-C example, the class must be instantiated before the instance method can be
invoked, as follows:
let hw = HelloWorld()
hw.phrase = "Hello world"
hw.sayPhrase()
Whereas to invoke the class method sayPhrase, you would not need to allocate a new object because it can be
called statically:
HelloWorld.sayPhrase("Hello world")
Also note that in Swift, you can use access modifiers such as public and private to enforce access control in a
similar way to other object-oriented programming languages.
Instrumenting the iOS Runtime
In the previous section you learned some of the basic building blocks of Objective-C and Swift, which are
important to begin instrumenting the iOS runtime. This section details the various approaches you can use to
instrument the runtime, specifically through method swizzling, function hooking, and using the preload library.
Instrumentation is the process of tracing, debugging, or otherwise profiling the execution of an application at
runtime. It is an essential part of a security professional’s application assessment methodology and you will
likely use it during every assessment. Example use cases include (but are not limited to) the following:
Bypassing jailbreak detection
Stealing sensitive data such as encryption keys from an application
Force-loading view controllers to access hidden content
Attacking local authentication
Pivoting to internal networks with corporate applications
Demonstrating the risks of malware
Inspecting a custom encryption protocol
Indeed many scenarios exist when you can use instrumentation to your advantage. By far the simplest language
to instrument in iOS applications is Objective-C.
Objective-C uses a traditional message-passing system within the runtime rather than using direct function calls
or making function calls via vtables for dynamic dispatch. That is, to invoke a function you pass it a message,
proxying through the runtime’s objc_msgSend() function, allowing the implementation for a method to be
resolved at runtime. Therefore it stands to reason if you are in a position to simulate calls to objc_msgSend()
within an application, you are able to instrument it.
In addition to simulating message calls to invoke methods, directly replacing the implementation of a method at
runtime is also possible; this concept is known as method swizzling. As previously noted, method
implementations are resolved at runtime. To achieve this, a class maintains a dispatch table, which is essentially
a map of selectors to implementations. In simple terms, the selector is used to represent the name of a method,
whereas the implementation is a pointer to the start of the function. Method swizzling is achieved by replacing
the implementation for an existing selector in a class’s dispatch table. It also allows the old implementation to
be called where necessary by registering a new selector that points to the original implementation.
Although we explore this in greater detail later in this section, in brief, this technique is how the Objective-C
runtime can be manipulated.
The Swift programming language, however, relies more heavily on the compiler, using direct function calls and
vtable lookups. This implementation has some side effects for instrumentation in that you can only instrument
classes using the message-passing technique described previously that extend NSObject or use the @objc
directive. Fortunately, though, almost all of the iOS SDK extends NSObject or uses the @objc directive for the
time being. Functions that are invoked using direct function calls and via vtables require more effort to
instrument, and you must use techniques more akin to hooking C/C++.
Introduction to Cydia Substrate
Cydia Substrate (http://www.cydiasubstrate.com/) is a powerful runtime manipulation framework created by
saurik, that can be used to instrument C/C++ or Objective-C/Swift applications on iOS. Also note that the
framework offers support for Android, as detailed in Chapter 7. Cydia Substrate is an inherent part of many of
the jailbreaks so in most cases it comes pre-installed with Cydia; if it is not installed on your jailbroken device,
you can enable it by installing the mobilesubstrate and com.saurik.substrate.safemode packages from the
http://apt.saurik.com/ Cydia repository.
Substrate extensions, or tweaks as they are more commonly known, can be developed using the Cydia Substrate
C API. Extensions are then compiled as dynamic libraries and must match the architecture of the device you
need to use the extension on.
To install an extension you simply place the compiled dynamic library in the
/Library/MobileSubstrate/DynamicLibraries directory for it to be loaded into an application by MobileLoader,
which is the component of the Substrate framework responsible for processing extensions. To prevent your
extension being loaded into every newly created process, Substrate supports filters. Filters are property list files
in either binary plist, XML, or JSON format and should be named using the same convention as your tweak,
with the .plist file extension. For example, the following directory listing shows an extension named
mdsectweak.dylib with the associated filter file mdsectweak.plist:
Ipod10:/Library/MobileSubstrate/DynamicLibraries root# ls -la
total 1544
drwxr-xr-x 2 root staff 204 Oct 24 16:12 ./
drwxr-xr-x 4 mobile staff 170 Oct 24 16:11 ../
-rwxr-xr-x 1 root staff 85472 Oct 24 16:11 MobileSafety.dylib*
-rw--r–r-- 1 root staff 118 Oct 24 16:11 MobileSafety.plist
-rw--r-xr-- x 1 root staff 1485584 Oct 24 16:12 mdsectweak.dylib*
-rw-r–r– 1 root staff 304 Oct 24 16:12 mdsectweak.plist
Ipod10:/Library/MobileSubstrate/DynamicLibraries root#
The contents of the mdsectweak.plist file are as follows:
Filter
Bundles
com.mdsec.lab1-1a
As shown in the preceding filter file, the mdsectweak.dylib tweak will only be injected into applications with the
bundle identifier com.mdsec .lab1-1a. In addition to the Bundles filter, filtering by executable name and to
applications that implement a specific class using the Executables or Classes keys is also possible. Filters are
not limited to a single constraint. Filtering using multiple keys is also possible; for example, consider the
following JSON filter file:
Filter = {
Executables = ("mdsecapp");
Bundles = ("com.mdsec.mdsecapp");
};
When using multiple filters, all conditions must match for injection to take place, and therefore in this example
the tweak would only be injected into an application with the name mdsecapp and the bundle identifier
com.mdsec .mdsecapp. However, changing this behavior is possible using the Mode key and the value Any, which
means any filter should match, as shown here:
Filter = {
Executables = ("mdsecapp");
Bundles = ("com.mdsec.mdsecapp");
Mode = "Any";
};
Using the Cydia Substrate C API
The previous section documented how to install and set up a Cydia Substrate extension so that it is injected into
an application of choice. This section transitions on to discussing how the Cydia Substrate C API works and
provides some basic examples of how to implement tweaks so that you will have sufficient information to begin
writing your own.
To develop tweaks using the Substrate API a number of options are available to you, and your choice of
development environment may be influenced by your host operating system:
iOSOpenDev (http://www.iosopendev.com/)—Provides Xcode integration and a number of templates for
developing tweaks. This environment is limited to OS X.
Theos (https://github.com/DHowett/theos)—A cross-platform development environment. Known to work
on iOS, OS X, and Linux.
Captain Hook (https://github.com/rpetrich/CaptainHook/wiki)—A now dated wrapper for Substrate to
simplify function hooking. This environment is limited to OS X.
For simplicity and support, we recommend that you use the Theos development environment. Further
information on how to use Theos is detailed in the subsequent sections of this chapter.
You’ll make use of four key functions in the Substrate API:
MSHookFunction—This function is used to hook native code functions such as those developed in C or C++.
Conceptually, it instruments the function using a trampoline to divert the execution flow to a replacement
function.
MSFindSymbol—As the name suggests, this function is used to find symbols by name either within a specific
image or by searching all currently loaded images. This assumes that the symbol is exported, which is
unlikely to be the case with stripped applications.
MSGetImageByName—This function works in a similar way to dlopen() and causes an application to load a
dynamic library if it is not already loaded.
MSHookMessageEx—This function can be used to implement method swizzling of Objective-C functions or
Swift functions that inherit from NSObject.
These functions make up the majority of the Substrate C API; with proper use of them, you’ll be able to
instrument any function in an iOS application. To illustrate how the API can be used, a walk-through of several
extensions that hook both C and Objective-C functions is described next.
The first example instruments the stat() system call and is followed by a line-by-line analysis of the extension:
1: #include 
2: #include 
3:
4: static int (*oldStat)(const char *path, struct stat *buf);
5:
6: int newStat(const char *path, struct stat *buf)
7: {
8: NSLog(@"Stat hooked - checking for bash");
9: if (strcmp(path, "/bin/bash") == 0)
10: return ENOENT;
11:
12: return oldStat(path, buf);
13: }
14:
15: MSInitialize {
16: MSHookFunction(stat, newStat, &oldStat);
17: }
Line 4: A function is created that Cydia Substrate populates with a stub to call the original stat() function.
Lines 6-13: This function will be jumped to when the original stat() function is called. It checks whether the
path argument is equal to /bin/bash and if so, immediately returns an error indicating that the file does not
exist.
Line 12: If the path does not equal /bin/bash the function calls the oldstat() function, which causes the
original system implementation of stat() to be invoked.
Line 15:MSInitialize is a macro that applies the constructor attribute to the contained code, causing it to be
the first thing that is executed when the application loads.
Line 16: The MSHookFunction causes stat() to be instrumented. MSHookFunction takes three arguments: the
symbol that you want to replace, in this case the address of the stat() function; the address of the function that
you want to replace it with—in the example this is the newStat() function; and finally a pointer to a function
that will be populated with the stub code to call the original implementation—in this case oldStat().
Although this example is a simple one, you can use it as a template to instrument any library call on the device.
However, sometimes you might find you need to instrument C/C++ functions that are built-in to the
application; if the symbol to the function appears in the export table then you can look it up using