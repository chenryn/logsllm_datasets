title:Flow Clustering Using Machine Learning Techniques
author:Anthony McGregor and
Mark A. Hall and
Perry Lorier and
James Brunskill
Flow Clustering Using Machine Learning
Techniques
Anthony McGregor1,2, Mark Hall1, Perry Lorier1, and James Brunskill1
1 The University of Waikato, Private BAG 3105, Hamilton, New Zealand
mhall,PI:EMAIL,
http://www.cs.waikato.ac.nz/
2 The National Laboratory of Applied Network Research (NLANR), San Diego
Supercomputer Center, University of California San Diego, 10100 Hopkins Drive, CA
92186-0505, USA
PI:EMAIL,
http://www.nlanr.net/
Abstract. Packet header traces are widely used in network analysis.
Header traces are the aggregate of traﬃc from many concurrent appli-
cations. We present a methodology, based on machine learning, that can
break the trace down into clusters of traﬃc where each cluster has diﬀe-
rent traﬃc characteristics. Typical clusters include bulk transfer, single
and multiple transactions and interactive traﬃc, amongst others. The
paper includes a description of the methodology, a visualisation of the
attribute statistics that aids in recognising cluster types and a discussion
of the stability and eﬀectiveness of the methodology.
1 Introduction
Passive header trace measurements, like the ones performed by NLANR/MNA[7]
and WAND[8] produce a detailed record of the packet by packet behaviour of
all traﬃc on a link. These traces have been used in a wide range of computer
network research.
A packet header trace is an aggregate of the packets produced by many
network processes. There are several techniques that can be used to disaggregate
a packet trace. Simple approaches divide packet headers into classes based on
some header ﬁeld, often the protocol or port number. The general notion of a
ﬂow of packets[9] (where a ﬂow roughly corresponds to a sequence of packets
related to a single application exchange) is also well known and widely used.
Diﬀerent classiﬁcations support diﬀerent uses of a packet header trace. In this
paper we introduce a new methodology for classiﬁcation of the packet headers
that divides the traﬃc into similar application types (single transaction, bulk
transfer etc). Our target analysis is workload generation for simulation, however
we believe the technique has much wider application.
Packet traces may be used as raw material for driving simulations. We are
interested in using the traﬃc captured on a network to answer “what if” questi-
ons about the network’s performance under workloads derived from the one we
C. Barakat and I. Pratt (Eds.): PAM 2004, LNCS 3015, pp. 205–214, 2004.
c(cid:1) Springer-Verlag Berlin Heidelberg 2004
206
A. McGregor et al.
captured. We wish to allow a network manager to understand the major types of
traﬃc on the network and then discover how the network is likely to perform if
the source, destination, quantity and proportions of those traﬃc types changes
through simulation. Central to this work is the ability to decompose captured
traﬃc into its component traﬃc types. As noted above, several diﬀerent decom-
positions are possible but for this work we are interested in a decomposition
which reﬂects the workload generating the traﬃc, rather than characteristics of
the network, its protocols or the total traﬃc proﬁle.
The most obvious classiﬁcation (by IP protocol and port) was rejected for
three reasons. The ﬁrst is that within a single protocol (e.g. HTTP) there may
be several quite distinct classes of traﬃc. For example, HTTP traﬃc includes
fetches of small objects, such as HTML pages and icons, as well as large ﬁle
transfers and tunnelled applications. The second, is that similar traﬃc types
may use diﬀerent protocols. Fetching a large ﬁle by HTTP or FTP, for example,
has very similar characteristics. The ﬁnal reason is that the protocol and port
numbers may not be available. Tunnels, especially encrypted tunnels like IPSec,
obscure this information.
2 Packet Interarrival/Size Plots
In our quest for a generic classiﬁcation methodology we ﬁrst examined plots
of packet size against packet interarrival time (IAT) for the two unidirectional
ﬂows that make up a single ‘connection’. (We deﬁne a unidirectional ﬂow in the
conventional sense of a series of packets sharing the same ﬁve-tuple (source IP
address and port, destination IP address port, and protocol number). We do not
timeout ﬂows, except where they exceed the length of the trace (6 hours). From
this point in this paper, we will refer to these pairs of unidirectional ﬂows as a
bidirectional ﬂow, or just a ﬂow.
The IAT/packet size plots exhibit a number of characteristic shapes that we
believe are indicative of the application type. Examples of these plots (produced
from the Auckland-VI[10]) trace are shown in ﬁgure 1.1 Only four example plots
are shown here, however there are other types that that we have not shown due
to space limitations. To illustrate the point that the same protocol may carry
diﬀerent traﬃc types, two diﬀerent HTTP sessions are included (1(a) and (b)).
In the following paragraphs we explain the most likely causes for the major
characteristics of these plots. Our analysis is not exhaustive and is primarily
intended to illustrate the point that some (but not all) of these characteristics
are indicative of the type of application that generated the traﬃc. For simplicity,
we have stated our analysis in the imperative. There were approximately 20,000
ﬂows in the trace we analysed but less than a dozen of these characteristics plot
types (plus a some plots that did not ﬁt any characteristic type).
Fig 1(a) shows a ﬂow containing a single HTTP request for a large object.
There is a single large packet from the server to the client (the HTML GET
request) and many small packets (the TCP acknowledgements). There are many
large packets of the same size (full data packets) from the server to the client.
1 A colour version of this paper is available at http://www.wand.net.nz/pubs.php.
Flow Clustering Using Machine Learning Techniques
207
 1400
 1200
 1000
 800
 600
 400
 200
 0
 1e-05
 0.0001
Client to Server
Server to Client
 1400
 1200
 1000
 800
 600
 400
 200
s
e
t
y
b
n
i
e
z
s
t
i
e
k
c
a
P
 10
 100
 0
 1e-05
 0.0001
 0.001
 0.01
 1
Time since last packet in flow in seconds
 0.1
Client to Server
Server to Client
 10
 100
 0.001
 0.01
 1
Time since last packet in flow in seconds
 0.1
(a) A single large HTTP Request
(b) Multiple HTTP 1.1 Requests
 1400
 1200
 1000
 800
 600
 400
 200
 0
 1e-05
 0.0001
Client to Server
Server to Client
 1400
 1200
 1000
 800
 600
 400
 200
s
e
t
y
b
n
i
e
z
s
t
i
e
k
c
a
P
 10
 100
 0
 1e-05
 0.0001
 0.001
 0.01
 1
Time since last packet in flow in seconds
 0.1
Client to Server
Server to Client
 10
 100
 0.001
 0.01
 1
Time since last packet in flow in seconds
 0.1
s
e
t
y
b
n
i
e
z
s
t
i
e
k
c
a
P
s
e
t
y
b
n
i
e
z
s
t
i
e
k
c
a
P
(c) FTP (control)
(d) SMTP Mail exchange
Fig. 1. HTTP Packet Interarrival/Size plots
There are also a few smaller packets (partly full data packets) and a single
minimum sized packet (an ACK without data) from the server to the client.
Fig 1(b) shows a ﬂow containing multiple HTTP requests in a single connec-
tion (HTTP 1.1). In addition to the packets of the Fig 1(a) there are additional
request packets (mostly ranging between 300 and 600 bytes). Notice the cluster
of packets centred roughly around (size = 500, IAT = 0.3s). This type of clu-
ster is typical of protocols in query/reply/query transaction mode and is the
result of fetching small objects via HTTP. Finally, note the vertical grouping
at approximately IAT = 1.1ms. This is probably the result of the TCP Nagle
Algorithm operating to delay the transmission of partly full packets until the
previous packet is acked.
Fig 1(c) is a similar plot for an FTP control connection. It shows a cluster
of points around IAT = 100ms and then a spread of points above that. The
cluster is again a query/response/query cluster (but with smaller queries and
responses than the multiple HTTP request example). The spread, which ranges
up to about a minute, is related to human interaction times required to generate
a new command. Because FTP uses a separate connection for data transfer there
is no bulk data phase for this ﬂow.
The ﬁnal plot in the set, Fig 1(d), shows a mail transfer using SMTP. Again
there is a transaction cluster (but with a wider IAT range, indicating that some
queries took longer to resolve than others). There is also a bulk transfer com-
208
A. McGregor et al.
ponent with large packets. The reason for some of the large packets being 1500
bytes and others being 1004 bytes was investigated at some length. The 1004
byte packets are ﬁnal packet in a repeated series of transfers. That is, this SMTP
session contained 25 transfers of messages requiring ﬁve 1500 byte and one 1004
byte packets to transfer. Given SMTP’s multiple recipient feature and the nor-
mal variation in length of email addresses in the message header, this is almost
certainly spam.
3 Clustering and Classiﬁcation
While it would be possible to form groups of ﬂows by writing code that was
aware of the characteristics we discovered in the IAT/Packet size plots, this
approach imposes a high degree of human interpretation in the results. It is also
unlikely to be suﬃciently ﬂexible to allow the methodology to be used in diverse
network types. Machine learning techniques can also be used to cluster the ﬂows
present in the data and then to create a classiﬁcation from the clusters. This is
a multiple step process. The data is ﬁrst divided into ﬂows as described above.
A range of attributes are extracted from each ﬂow. These attributes are:
– packet size statistics (minimum, maximum, quartiles, minimum as fraction
of max and the ﬁrst ﬁve modes)
– interarrival statistics
– byte counts
– connection duration
– the number of transitions between transaction mode and bulk transfer mode,
where bulk transfer mode is deﬁned as the time when there are more than
three successive packets in the same direction without any packets carrying
data in the other direction
– the time spent: idle (where idle time is the accumulation of all periods of
2 seconds or greater when no packet was seen in either direction), in bulk
transfer and in transaction mode
These characteristics are then used by the EM clustering algorithm (described
in section 3.1 below) to group the ﬂows into a small number of clusters.
This process is not a precise one. To reﬁne the clusters we generate classiﬁca-
tion rules that characterise the clusters based on the raw data. From these rules
attributes that do not have a large impact on the classiﬁcation are identiﬁed and
removed from the input to the clusterer and the process is repeated. Although
it is not discussed further in this paper, the process is also repeated within each
cluster, creating sub-clusters of each of the major ﬂow types.
3.1 The EM Algorithm for Probabilistic Clustering
The goal of clustering is to divide ﬂows (instances in the generic terminology of
machine learning) into natural groups. The instances contained in a cluster are
considered to be similar to one another according to some metric based on the
underlying domain from which the instances are drawn.
Flow Clustering Using Machine Learning Techniques
209
 0.25
 0.2
 0.15
 0.1
 0.05
 0
 0
A
B
 10
 20
 30
 40
 50
 60
 70
Fig. 2. A two cluster mixture model.
The results of clustering and the algorithms that generate clusters, can ty-
pically be described as either “hard” or “soft”. Hard clusters (such as those ge-
nerated by the simple k-means method [5]) have the property that a given data
point belongs to exactly one of several mutually exclusive groups. Soft clustering
algorithms, on the other hand, assign a given data point to more than one group.
Furthermore, a probabilistic clustering method (such as the EM algorithm [6])
assigns a data point to each group with a certain probability. Such statistical
approaches make sense in practical situations where no amount of training data
is suﬃcient to make a completely ﬁrm decision about cluster memberships.
Methods such as EM [6] have a statistical basis in probability density esti-
mation. The goal is to ﬁnd the most likely set of clusters given the training
data and prior expectations. The underlying model is called a ﬁnite mixture.
A mixture is a set of probability distributions—one for each cluster—that mo-
del the attribute values for members of that cluster. Figure 2 shows a simple
ﬁnite mixture example with two clusters—each modelled by a normal or Gaus-
sian distribution—based on a single numeric attribute. Suppose we took samples
from the distribution of cluster A with probability p and the distribution of clu-
ster B with probability 1 − p. If we made a note of which cluster generated each
sample it would be easy to compute the maximum likelihood estimates for the
parameters of each normal distribution (the sample mean and variance of the
points sampled from A and B respectively) and the mixing probability p. Of
course, the whole problem is that we do not know which cluster a particular
data point came from, nor the parameters of the cluster distributions.
The EM (Expectation-Maximisation) algorithm can be used to ﬁnd the ma-
ximum likelihood estimate for the parameters of the probability distributions in