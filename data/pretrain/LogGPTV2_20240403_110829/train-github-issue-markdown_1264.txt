### Input Code
    const { x, ...y } = foo();
### Babel Configuration (.babelrc, package.json, cli command)
    {
      "dependencies": {
        "babel-plugin-transform-object-rest-spread": "^6.19.0",
        "babel-cli": "^6.18.0"
      },
      "scripts": {
        "build": "babel --plugins transform-object-rest-spread src.js > out.js"
      }
    }
### Expected Behavior
    const _ref = foo();
    const { x } = _ref;
    const y = _objectWithoutProperties(_ref, ["x"]);
### Current Behavior
    const { x } = foo();
    const y = _objectWithoutProperties(foo(), ["x"]);
### Context
### Your Environment
software | version  
---|---  
Babel | babel-core@6.18.2, babel-cli@6.18.0, babel-plugin-transform-object-
rest-spread@6.19.0  
node | 4.1.2, 6.5.0, 7.1.0  
npm | 2.14.4, 3.10.3, 3.10.9  
Operating System | Windows, Linux  
It also does something _crazy_ for this code ðŸ˜œ ... `c` gets hoisted out of the
arrow function and then the above bug duplicates the entire thing:
in:
    const { a } = foo(({ b, ...c }) => {
      console.log(b, c);
    });
out:
    const { a } = foo(({ b }) => {
      console.log(b, c);
    });
    const c = _objectWithoutProperties(foo(({ b }) => {
      console.log(b, c);
    }), ["b"]);