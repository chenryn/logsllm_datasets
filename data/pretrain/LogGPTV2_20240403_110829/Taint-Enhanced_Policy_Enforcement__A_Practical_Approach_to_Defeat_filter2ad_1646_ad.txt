samba
CVE-2000-0573 wu-ftpd
CAN-2005-1365
pico server
Language Attack type
C
C
C
Stack smashing
Format string
Directory traversal
CAN-2003-0486
CAN-2005-0258
phpBB 2.0.5
phpBB 2.0.5
CAN-2002-1341
SquirrelMail 1.2.10
CAN-2003-0990
CAN-2005-1921
CVE-1999-0045
SquirrelMail 1.4.0
PHP XML-RPC
nph-test-cgi
PHP
PHP
PHP
PHP
PHP
BASH
SQL injection
Directory traversal
Cross site scripting
Command injection
Command injection
Shell meta-character
expansion
Attack description
Buffer overﬂow in
call trans2open function
via SITE EXEC command
Command execution via URL
with multiple leading “/” charac-
ters and “..”
via topic id parameter
Delete arbitrary ﬁle via “..” se-
quences in avatarselect parameter
Insert script via the mailbox pa-
rameter in read body.php
via meta-character in“To:” ﬁeld
Eval injection
using ’*’ in $QUERY STRING
Figure 5: Attacks used in effectiveness evaluation
ing) the relevant code before or after the call to f. In the
future, we anticipate these code to be decoupled from
the transformation, and be able to operate on binaries us-
ing techniques such as library interposition. This would
enable a site administrator to alter, reﬁne or customize
her notions of “trustworthy input” and “dangerous argu-
ments” without having access to the source code.
6 Experimental Evaluation
The main goal of our experiments was to evaluate at-
tack detection (Section 6.1), and runtime performance
(Section 6.4). False positives and false negatives are dis-
cussed in Sections 6.2 and 6.3.
6.1 Attack Detection
Table 5 shows the attacks used in our experiments. These
attacks were chosen to cover the range of attack cate-
gories we have discussed, and to span multiple program-
ming languages. Wherever possible, we selected attacks
on widely-used applications, since it is likely that obvi-
ous security vulnerabilities in such applications would
have been ﬁxed, and hence we are more likely to detect
more complex attacks.
In terms of marking, all inputs read from network (us-
ing read, recv and recvfrom) were marked as tainted.
Since the PHP interpreter is conﬁgured as a module for
Apache, the same technique works for PHP applica-
tions as well. Network data is tainted when it is read
by Apache, and this information propagates through the
PHP interpreter, and in effect, through the PHP applica-
tion as well. The policies used in our attack examples
were already discussed in Section 4.
To test our technique, we ﬁrst downloaded the soft-
ware packages shown in Figure 5. We downloaded the
exploit code for the attacks, and veriﬁed that they worked
as expected. Then we used transformed C programs and
interpreters with policy checking enabled, and veriﬁed
that each one of the attacks were prevented by these poli-
cies without raising false alarms.
Network Servers in C.
• wu-ftpd versions 2.6.0 and lower have a format string
vulnerability in SITE EXEC command that allows ar-
bitrary code execution. The attack is stopped by the
policy that the format directive %n in a format string
should not be tainted.
• samba versions 2.2.8 and lower have a stack-smashing
vulnerability in processing a type of request called
“transaction 2 open.” No policy is required to stop this
attack — the stack-smashing step ends up corrupting
some data on the shadow stack rather than the main
stack, so the attack fails.
If we had used an attack that uses a heap overﬂow to
overwrite a GOT entry (which is common with heap
overﬂows), this too would be detected without the
need for any policies due to the technique described
in Section 3.4 for preventing the GOT from being di-
rectly accessed by the C code. The reasoning is that
before the injected code gets control, the GOT entry
has to be clobbered by the existing code in the pro-
gram. The instrumentation in the clobbering code will
cause a segmentation fault because of the protection of
the GOT, and hence the attack will be prevented. Note
that the GOT is normally used by the PLT (Procedure
Linkage Table) code that is in the assembly code au-
tomatically added by the compiler, and is not in the C
source code, so a normal GOT access will not be in-
strumented with checks on taint tags, and hence will
not lead to a memory fault.
If the attack corrupted some other function pointer,
then the “jmp” policy would detect the use of tainted
data in jump target and stop the attack.
• Pico HTTP Server (pServ) versions 3.2 and
USENIX Association
Security ’06: 15th USENIX Security Symposium
129
lower have a directory traversal vulnerability. The
web server does include checks for the presence of
“..” in the ﬁle name, but allows them as long as
their use does not go outside the cgi-bin directory.
To determine this, pServ scans the ﬁle name left-
to-right, decrementing the count for each occurrence
of “..”, and incrementing it for each occurrence of
“/” character.
If the counter goes to zero, then ac-
cess is disallowed. Unfortunately, a ﬁle name such as
/cgi-bin////../../bin/sh satisﬁes this check,
but has the effect of going outside the /cgi-bin di-
rectory. This attack is stopped by the directory traver-
sal policy shown in Section 4.
Web Applications in PHP.
• phpBB2 SQL injection vulnerability in (version 2.0.5
of) phpBB, a popular electronic bulletin board appli-
cation, allows an attacker to steal the MD5 password
hash of another user. The vulnerable code is:
$sql="SELECT p.post_id FROM ... WHERE ...
AND p.topic_id = $topic_id AND ..."
the user-supplied value for the variable
Normally,
topic id should be a number, and in that case, the
above query works as expected. Suppose that the at-
tacker provides the following value:
-1 UNION SELECT ord(substring(user_password,
5,1)) FROM phpbb_users WHERE userid=3/*
This converts the SQL query into a union of two
SELECT statements, and comments out (using “/*”)
the remaining part of the original query. The ﬁrst
SELECT returns an empty set since topic id is set
to -1. As a result, the query result equals the value of
the SELECT statement injected by the attacker, which
returns the 5th byte in the MD5 hash of the bulletin
board user with the userid of 3. By repeating this at-
tack with different values for the second parameter of
substring, the attacker can obtain the entire MD5
password hash of another user. The SQL injection pol-
icy described in Section 4 stops this attack.
• SquirrelMail cross-site scripting is present in ver-
sion 1.2.10 of SquirrelMail, a popular web-based
email client, e.g., read body.php directly outputs
values of user-controlled variables such as mailbox
while generating HTML pages. The attack is stopped
by the cross-site scripting policy in Section 4.
• SquirrelMail command injection: SquirrelMail
(Version 1.4.0) constructs a command for encrypting
email using the following statement in the function
gpg encrypt in the GPG plugin 1.1.
ject in SquirrelMail. However, due to a bug in this
function, some malformed entries in the “To” ﬁeld are
returned without checking for proper email format. In
particular, by entering “hrecipienti; hcmdi;” into this
ﬁeld, the attacker can execute any arbitrary command
hcmdi with the privilege of the web server. By apply-
ing a policy that prohibits tainted shell meta-characters
in the ﬁrst argument to the popen function, this attack
is stopped by our technique.
• phpBB directory traversal: A vulnerability exists in
phpBB, which, when the gallery avatar feature is en-
abled, allows remote attackers to delete arbitrary ﬁles
using directory traversal. This vulnerability can be ex-
ploited by a two-step attack. In the ﬁrst step, the at-
tacker saves the ﬁle name, which contains “..” char-
acters, into the SQL database. In the second step, the
ﬁle name is retrieved from the database and used in
a command. To detect this attack, it is necessary to
record taint information for data stored in the database,
which is quite involved. We took a shortcut, and
marked all data retrieved from the database as tainted.
(Alternatively, we could have marked only those ﬁelds
updated by the user as tainted.) This enabled the attack
to be detected using the directory traversal policy.
• phpxmlrpc/expat command injection: phpxmlrpc
is a package written in PHP to support the implemen-
tation of PHP clients and servers that communicate us-
ing the XML-RPC protocol. It uses the expat XML
parser for processing XML. phpxmlrpc versions 1.0
and earlier have a remote command injection vulner-
ability. Our command injection policy stops exploita-
tions of this vulnerability.
Bash CGI Application.
nph-test-cgi is a CGI
script that was included by default with Apache web
server versions 1.0.5 and earlier. It prints out the values
of the environment variables available to a CGI script. It
uses the code echo QUERY_STRING=$QUERY_STRING
to print the value of the query string sent to it. If the query
string contains a “*” then bash will apply ﬁle name ex-
pansion to it, thus enabling an attacker to list any direc-
tory on the web server. This attack was stopped by a
policy that restricted the use of tainted meta-characters
in the argument to shell glob filename, which is the
function used by bash for ﬁle name expansion. In terms
of marking, the CGI interface deﬁnes the exact set of en-
vironment variables through which inputs are provided to
a CGI application, and all these are marked as tainted.
6.2 False Positives
$command .= " -r $send_to_list 2>&1";
The variable send to list should contain the recip-
ient name in the “To” ﬁeld, which is extracted using
the parseAddress function of Rfc822Header ob-
The policies described so far have been designed with
the goal of avoiding false positives. We experimen-
tally veriﬁed that false positives did not occur in our
experiments involving the wu-ftpd server, the Apache
130
Security ’06: 15th USENIX Security Symposium
USENIX Association
Server Programs
Workload
Apache-2.0.40 Webstone 30 clients downloading
5KB pages over 100Mbps network
Download a 12MB ﬁle 10 times.
Send one thousand 3KB emails
wu-ftpd-2.6.0
postﬁx-1.1.12
Orig. Response Time Overhead
6%
0.036 sec/page
11.5 sec
0.03 sec/mail
3%
7%
Figure 6: Performance overheads of servers. For Apache server, performance is measured in terms of latency and
throughput degradation. For other programs, it is measured in terms of overhead in client response time.
Program Workload
bc-1.06
Find factorial of 600.
enscript-1.6.4 Convert a 5.5MB text ﬁle into a PS ﬁle.
bison-1.35
gzip-1.3.3 Compress a 12 MB ﬁle.
Parse a Bison ﬁle for C++ grammar.
Over-
head(A)
212%
660%
134%
228%
Over-
head(B)
68%
529%
92%
161%
Over-
head(C)
61%
63%
79%
110%
Over-
head(D)
61%
58%
78%
106%
Figure 7: Performance overheads of CPU-intensive programs. Performance is measured in terms of CPU time. Over-
heads in different columns correspond to: (A) No optimizations, (B) Use of local tag variable, (C) B + Use of 2-bit
taint value, (D) C + Use of dependency analysis.
web server, and the two PHP applications, phpBB and
SquirrelMail. For wu-ftpd and Apache, we enabled
the control ﬂow hijack policy, format string policy, direc-
tory traversal policy, and shell command injection policy.
For the PHP applications, we additionally enabled the
SQL injection policy and cross-site scripting policy for
the PHP interpreter.
To evaluate the false positives for Apache, we used
the transformed server as our lab’s regular web server
that accepted real-world HTTP requests from Internet for
several hours. For the wu-ftpd server, we ran all the
supported commands from a ftp client. To test phpBB
and SquirrelMail, we went through all the menu items
of these two Web applications, performed normal oper-
ations that a regular user might do, such as registering a
user, posting a message, searching a message, managing
address book, moving messages between different mail
folders, and so on. No false positives were observed in
these experiments.
6.3 False Negatives
False negatives can arise due to (a) overly permissive
policies, (b) implicit information ﬂows, and (c) use of
untransformed libraries without adequate summarization
functions.