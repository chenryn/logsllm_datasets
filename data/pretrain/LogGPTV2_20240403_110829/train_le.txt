in the target,
the received file descriptor is subject to the same
linux security module (lsm) checks as are applied to a file descriptor
that is received in an
.br scm_rights
ancillary message.
if the file descriptor refers to a socket,
it inherits the cgroup version 1 network controller settings
.ri ( classid
and
.ir netprioidx )
of the target.
.pp
the third
.br ioctl (2)
argument is a pointer to a structure of the following form:
.pp
.in +4n
.ex
struct seccomp_notif_addfd {
    __u64 id;           /* cookie value */
    __u32 flags;        /* flags */
    __u32 srcfd;        /* local file descriptor number */
    __u32 newfd;        /* 0 or desired file descriptor
                           number in target */
    __u32 newfd_flags;  /* flags to set on target file
                           descriptor */
};
.ee
.in
.pp
the fields in this structure are as follows:
.tp
.i id
this field should be set to the notification id
(cookie value) that was obtained via
.br seccomp_ioctl_notif_recv .
.tp
.i flags
this field is a bit mask of flags that modify the behavior of the operation.
currently, only one flag is supported:
.rs
.tp
.br seccomp_addfd_flag_setfd
when allocating the file descriptor in the target,
use the file descriptor number specified in the
.i newfd
field.
.tp
.br seccomp_addfd_flag_send " (since linux 5.14)"
.\" commit 0ae71c7720e3ae3aabd2e8a072d27f7bd173d25c
perform the equivalent of
.b seccomp_ioctl_notif_addfd
plus
.b seccomp_ioctl_notif_send
as an atomic operation.
on successful invocation, the target process's
.i errno
will be 0
and the return value will be the file descriptor number
that was allocated in the target.
if allocating the file descriptor in the target fails,
the target's system call continues to be blocked
until a successful response is sent.
.re
.tp
.i srcfd
this field should be set to the number of the file descriptor
in the supervisor that is to be duplicated.
.tp
.i newfd
this field determines which file descriptor number is allocated in the target.
if the
.br seccomp_addfd_flag_setfd
flag is set,
then this field specifies which file descriptor number should be allocated.
if this file descriptor number is already open in the target,
it is atomically closed and reused.
if the descriptor duplication fails due to an lsm check, or if
.i srcfd
is not a valid file descriptor,
the file descriptor
.i newfd
will not be closed in the target process.
.ip
if the
.br seccomp_addfd_flag_setfd
flag it not set, then this field must be 0,
and the kernel allocates the lowest unused file descriptor number
in the target.
.tp
.i newfd_flags
this field is a bit mask specifying flags that should be set on
the file descriptor that is received in the target process.
currently, only the following flag is implemented:
.rs
.tp
.b o_cloexec
set the close-on-exec flag on the received file descriptor.
.re
.pp
on success, this
.br ioctl (2)
call returns the number of the file descriptor that was allocated
in the target.
assuming that the emulated system call is one that returns
a file descriptor as its function result (e.g.,
.br socket (2)),
this value can be used as the return value
.ri ( resp.val )
that is supplied in the response that is subsequently sent with the
.br seccomp_ioctl_notif_send
operation.
.pp
on error, \-1 is returned and
.i errno
is set to indicate the cause of the error.
.pp
this operation can fail with the following errors:
.tp
.b ebadf
allocating the file descriptor in the target would cause the target's
.br rlimit_nofile
limit to be exceeded (see
.br getrlimit (2)).
.tp
.b ebusy
if the flag
.b seccomp_ioctl_notif_send
is used, this means the operation can't proceed until other
.b seccomp_ioctl_notif_addfd
requests are processed.
.tp
.b einprogress
the user-space notification specified in the
.i id
field exists but has not yet been fetched (by a
.br seccomp_ioctl_notif_recv )
or has already been responded to (by a
.br seccomp_ioctl_notif_send ).
.tp
.b einval
an invalid flag was specified in the
.i flags
or
.i newfd_flags
field, or the
.i newfd
field is nonzero and the
.b seccomp_addfd_flag_setfd
flag was not specified in the
.i flags
field.
.tp
.b emfile
the file descriptor number specified in
.i newfd
exceeds the limit specified in
.ir /proc/sys/fs/nr_open .
.tp
.b enoent
the blocked system call in the target
has been interrupted by a signal handler
or the target has terminated.
.pp
here is some sample code (with error handling omitted) that uses the
.b seccomp_addfd_flag_setfd
operation (here, to emulate a call to
.br openat (2)):
.pp
.ex
.in +4n
int fd, removefd;
fd = openat(req->data.args[0], path, req->data.args[2],
                req->data.args[3]);
struct seccomp_notif_addfd addfd;
addfd.id = req->id; /* cookie from seccomp_ioctl_notif_recv */
addfd.srcfd = fd;
addfd.newfd = 0;
addfd.flags = 0;
addfd.newfd_flags = o_cloexec;
targetfd = ioctl(notifyfd, seccomp_ioctl_notif_addfd, &addfd);
close(fd);          /* no longer needed in supervisor */
struct seccomp_notif_resp *resp;
    /* code to allocate 'resp' omitted */
resp->id = req->id;
resp->error = 0;        /* "success" */
resp->val = targetfd;
resp->flags = 0;
ioctl(notifyfd, seccomp_ioctl_notif_send, resp);
.in
.ee
.sh notes
one example use case for the user-space notification
mechanism is to allow a container manager
(a process which is typically running with more privilege than
the processes inside the container)
to mount block devices or create device nodes for the container.
the mount use case provides an example of where the
.br seccomp_user_notif_flag_continue
.br ioctl (2)
operation is useful.
upon receiving a notification for the
.br mount (2)
system call, the container manager (the "supervisor") can distinguish
a request to mount a block filesystem
(which would not be possible for a "target" process inside the container)
and mount that file system.
if, on the other hand, the container manager detects that the operation
could be performed by the process inside the container
(e.g., a mount of a
.br tmpfs (5)
filesystem), it can notify the kernel that the target process's
.br mount (2)
system call can continue.
.\"
.ss select()/poll()/epoll semantics
the file descriptor returned when
.br seccomp (2)
is employed with the
.b seccomp_filter_flag_new_listener
flag can be monitored using
.br poll (2),
.br epoll (7),
and
.br select (2).
these interfaces indicate that the file descriptor is ready as follows:
.ip \(bu 2
when a notification is pending,
these interfaces indicate that the file descriptor is readable.
following such an indication, a subsequent
.b seccomp_ioctl_notif_recv
.br ioctl (2)
will not block, returning either information about a notification
or else failing with the error
.b eintr
if the target has been killed by a signal or its system call
has been interrupted by a signal handler.
.ip \(bu
after the notification has been received (i.e., by the
.b seccomp_ioctl_notif_recv
.br ioctl (2)
operation), these interfaces indicate that the file descriptor is writable,
meaning that a notification response can be sent using the
.b seccomp_ioctl_notif_send
.br ioctl (2)
operation.
.ip \(bu
after the last thread using the filter has terminated and been reaped using
.br waitpid (2)
(or similar),
the file descriptor indicates an end-of-file condition (readable in
.br select (2);
.br pollhup / epollhup
in
.br poll (2)/
.br epoll_wait (2)).
.ss design goals; use of seccomp_user_notif_flag_continue
the intent of the user-space notification feature is
to allow system calls to be performed on behalf of the target.
the target's system call should either be handled by the supervisor or
allowed to continue normally in the kernel (where standard security
policies will be applied).
.pp
.br "note well" :
this mechanism must not be used to make security policy decisions
about the system call,
which would be inherently race-prone for reasons described next.
.pp
the
.b seccomp_user_notif_flag_continue
flag must be used with caution.
if set by the supervisor, the target's system call will continue.
however, there is a time-of-check, time-of-use race here,
since an attacker could exploit the interval of time where the target is
blocked waiting on the "continue" response to do things such as
rewriting the system call arguments.
.pp
note furthermore that a user-space notifier can be bypassed if
the existing filters allow the use of
.br seccomp (2)
or
.br prctl (2)
to install a filter that returns an action value with a higher precedence than
.b seccomp_ret_user_notif
(see
.br seccomp (2)).
.pp
it should thus be absolutely clear that the
seccomp user-space notification mechanism
.b can not
be used to implement a security policy!
it should only ever be used in scenarios where a more privileged process
supervises the system calls of a lesser privileged target to
get around kernel-enforced security restrictions when
the supervisor deems this safe.
in other words,
in order to continue a system call, the supervisor should be sure that
another security mechanism or the kernel itself will sufficiently block
the system call if its arguments are rewritten to something unsafe.
.\"
.ss caveats regarding the use of /proc/[tid]/mem
the discussion above noted the need to use the
.br seccomp_ioctl_notif_id_valid
.br ioctl (2)
when opening the
.ir /proc/[tid]/mem
file of the target
to avoid the possibility of accessing the memory of the wrong process
in the event that the target terminates and its id
is recycled by another (unrelated) thread.
however, the use of this
.br ioctl (2)
operation is also necessary in other situations,
as explained in the following paragraphs.
.pp
consider the following scenario, where the supervisor
tries to read the pathname argument of a target's blocked
.br mount (2)
system call:
.ip \(bu 2
from one of its functions
.ri ( func() ),
the target calls
.br mount (2),
which triggers a user-space notification and causes the target to block.
.ip \(bu
the supervisor receives the notification, opens
.ir /proc/[tid]/mem ,
and (successfully) performs the
.br seccomp_ioctl_notif_id_valid
check.
.ip \(bu
the target receives a signal, which causes the
.br mount (2)
to abort.
.ip \(bu
the signal handler executes in the target, and returns.
.ip \(bu
upon return from the handler, the execution of
.i func()
resumes, and it returns (and perhaps other functions are called,
overwriting the memory that had been used for the stack frame of
.ir func() ).
.ip \(bu
using the address provided in the notification information,
the supervisor reads from the target's memory location that used to
contain the pathname.
.ip \(bu
the supervisor now calls
.br mount (2)
with some arbitrary bytes obtained in the previous step.
.pp
the conclusion from the above scenario is this:
since the target's blocked system call may be interrupted by a signal handler,
the supervisor must be written to expect that the
target may abandon its system call at
.b any
time;
in such an event, any information that the supervisor obtained from
the target's memory must be considered invalid.
.pp
to prevent such scenarios,
every read from the target's memory must be separated from use of
the bytes so obtained by a
.br seccomp_ioctl_notif_id_valid
check.
in the above example, the check would be placed between the two final steps.
an example of such a check is shown in examples.
.pp
following on from the above, it should be clear that
a write by the supervisor into the target's memory can
.b never
be considered safe.
.\"
.ss caveats regarding blocking system calls
suppose that the target performs a blocking system call (e.g.,
.br accept (2))
that the supervisor should handle.
the supervisor might then in turn execute the same blocking system call.
.pp
in this scenario,
it is important to note that if the target's system call is now
interrupted by a signal, the supervisor is
.i not
informed of this.
if the supervisor does not take suitable steps to
actively discover that the target's system call has been canceled,
various difficulties can occur.
taking the example of
.br accept (2),
the supervisor might remain blocked in its
.br accept (2)
holding a port number that the target
(which, after the interruption by the signal handler,
perhaps closed  its listening socket) might expect to be able to reuse in a
.br bind (2)
call.
.pp
therefore, when the supervisor wishes to emulate a blocking system call,
it must do so in such a way that it gets informed if the target's
system call is interrupted by a signal handler.
for example, if the supervisor itself executes the same
blocking system call, then it could employ a separate thread
that uses the
.b seccomp_ioctl_notif_id_valid
operation to check if the target is still blocked in its system call.
alternatively, in the
.br accept (2)
example, the supervisor might use
.br poll (2)
to monitor both the notification file descriptor
(so as to discover when the target's
.br accept (2)
call has been interrupted) and the listening file descriptor
(so as to know when a connection is available).
.pp
if the target's system call is interrupted,
the supervisor must take care to release resources (e.g., file descriptors)
that it acquired on behalf of the target.
.\"
.ss interaction with sa_restart signal handlers
consider the following scenario:
.ip \(bu 2
the target process has used
.br sigaction (2)
to install a signal handler with the
.b sa_restart
flag.
.ip \(bu
the target has made a system call that triggered a seccomp
user-space notification and the target is currently blocked
until the supervisor sends a notification response.
.ip \(bu
a signal is delivered to the target and the signal handler is executed.
.ip \(bu
when (if) the supervisor attempts to send a notification response, the
.b seccomp_ioctl_notif_send
.br ioctl (2))
operation will fail with the
.br enoent
error.
.pp
in this scenario, the kernel will restart the target's system call.
consequently, the supervisor will receive another user-space notification.
thus, depending on how many times the blocked system call
is interrupted by a signal handler,
the supervisor may receive multiple notifications for
the same instance of a system call in the target.
.pp
one oddity is that system call restarting as described in this scenario
will occur even for the blocking system calls listed in
.br signal (7)
that would
.b never
normally be restarted by the
.br sa_restart
flag.
.\" fixme
.\" about the above, kees cook commented:
.\"
.\" does this need fixing? i imagine the correct behavior for this case
.\" would be a response to _send of einprogress and the target would see
.\" eintr normally?
.\"
.\" i mean, it's not like seccomp doesn't already expose weirdness with
.\" syscall restarts. not even arm64 compat agrees[3] with arm32 in this
.\" regard. :(
.
.\" fixme
.\" michael kerrisk:
.\" i wonder about the effect of this oddity for system calls that
.\" are normally nonrestartable because they have timeouts. my
.\" understanding is that the kernel doesn't restart those system
.\" calls because it's impossible for the kernel to restart the call
.\" with the right timeout value. i wonder what happens when those
.\" system calls are restarted in the scenario we're discussing.)
.pp
furthermore, if the supervisor response is a file descriptor
added with
.br seccomp_ioctl_notif_addfd ,
then the flag
.b seccomp_addfd_flag_send
can be used to atomically add the file descriptor and return that value,
making sure no file descriptors are inadvertently leaked into the target.
.sh bugs
if a
.br seccomp_ioctl_notif_recv
.br ioctl (2)
operation
.\" or a poll/epoll/select
is performed after the target terminates, then the
.br ioctl (2)
call simply blocks (rather than returning an error to indicate that the
target no longer exists).
.\" fixme
.\" comment from kees cook:
.\"
.\" i want this fixed. it caused me no end of pain when building the
.\" selftests, and ended up spawning my implementing a global test timeout
.\" in kselftest. :p before the usage counter refactor, there was no sane
.\" way to deal with this, but now i think we're close.
.\"
.sh examples
the (somewhat contrived) program shown below demonstrates the use of
the interfaces described in this page.
the program creates a child process that serves as the "target" process.
the child process installs a seccomp filter that returns the
.b seccomp_ret_user_notif
action value if a call is made to
.br mkdir (2).
the child process then calls
.br mkdir (2)
once for each of the supplied command-line arguments,
and reports the result returned by the call.
after processing all arguments, the child process terminates.
.pp
the parent process acts as the supervisor, listening for the notifications
that are generated when the target process calls
.br mkdir (2).
when such a notification occurs,
the supervisor examines the memory of the target process (using
.ir /proc/[pid]/mem )
to discover the pathname argument that was supplied to the
.br mkdir (2)
call, and performs one of the following actions:
.ip \(bu 2
if the pathname begins with the prefix "/tmp/",
then the supervisor attempts to create the specified directory,
and then spoofs a return for the target process based on the return
value of the supervisor's
.br mkdir (2)
call.
in the event that that call succeeds,
the spoofed success return value is the length of the pathname.
.ip \(bu
if the pathname begins with "./" (i.e., it is a relative pathname),
the supervisor sends a
.b seccomp_user_notif_flag_continue
response to the kernel to say that the kernel should execute
the target process's
.br mkdir (2)
call.
.ip \(bu
if the pathname begins with some other prefix,
the supervisor spoofs an error return for the target process,
so that the target process's
.br mkdir (2)
call appears to fail with the error
.br eopnotsupp