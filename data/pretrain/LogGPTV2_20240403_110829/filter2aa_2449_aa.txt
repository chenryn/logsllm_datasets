# Writing Your First Exploit
## Lecture Notes

**Lecturer:**
Robert Olson  
Department of Computing & Information Sciences  
SUNY at Fredonia  
Email: PI:EMAIL  
GitHub: @nerdprof  
Repository: [Writing-Your-First-Exploit](https://github.com/nerdprof/Writing-Your-First-Exploit)

---

### 1. Laboratory Setup

#### a. Virtual Machines
- **Windows VM:**
  - A Windows virtual machine can be downloaded from the following link:  
    [Microsoft Edge Tools VMs](https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/)
  - Note: Some students have reported issues with using a Windows 10 virtual machine during the Circle City Con 2016 workshop.

- **Kali VM:**
  - Kali Linux or a Kali Linux virtual machine can be downloaded from:  
    [Kali Downloads](https://www.kali.org/downloads/)

#### b. Software Installs
- **VulnServer on Windows VM:**
  - Download VulnServer from:  
    [The Grey Corner](http://www.thegreycorner.com/2010/12/introducing-vulnserver.html)

- **Immunity Debugger on Windows VM:**
  - Download Immunity Debugger from:  
    [Immunity Debugger](http://debugger.immunityinc.com/ID_register.py)

- **mona.py on Windows VM:**
  - Download the `mona.py` script from:  
    [Corelan GitHub](https://github.com/corelan/mona/blob/master/mona.py)
  - Place the script in:  
    `C:\Program Files\Immunity Inc\Immunity Debugger\PyCommands`

- **arwin.exe on Windows VM:**
  - Download the arwin application from:  
    [Fuzzy Security](http://www.fuzzysecurity.com/tutorials/expDev/tools/arwin.rar)

### 2. Buffer Overflows in C

#### a. Simple C Programming
- **printf:**
  - The `printf()` function prints data to the screen, often using substitution symbols.
  - Example:
    ```c
    char name[5] = "Rob";
    printf("Hello %s", name); // Prints: Hello Rob
    ```

- **strcpy:**
  - The `strcpy()` function copies one character array into another.
  - This function does not check the size of the destination relative to the source. If the source material exceeds the destination size, the excess data will be written past the end of the destination.

#### b. Buffer Overflow Example
- **simpleoverflow.c:**
  - (Code example to be provided)

#### c. Function Calls and the Stack
- **The stack after a function call:**
  - The term "stack" refers to a section of a program's memory that is statically allocated. Each function has its own local stack, which is created and destroyed each time the function is called.
  - Variables on the stack are referenced by an offset from the base pointer (ebp).
  - When a function is called, the address of the next instruction and the base pointer of the calling function must be saved to resume execution correctly.

- **Overwriting Saved Register Values:**
  - Data put into a variable will be written towards the base of the stack. Excess data can overflow into other variables and even the control information saved during the function call.
  - The goal of a buffer overflow exploit is to overflow the return address and redirect program execution to a payload.

### 3. Simple Socket Programming in Python

#### a. Basic Script Structure
- **import:**
  - The `import` command loads a library. We will use the `socket` and `sys` libraries.
- **Indentation:**
  - Indentation in Python is used to define the scope of control structures, similar to curly braces in other languages.

#### b. `socket.socket()`
- The line:
  ```python
  conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  ```
  creates a TCP socket named `conn` for IPv4 communication.

#### c. `socket.connect()`
- The line:
  ```python
  conn.connect(("192.168.1.2", 80))
  ```
  initiates a three-way handshake with the specified IP and port. Note the double set of parentheses, as `connect` expects a single argument (an ordered pair).

#### d. `socket.recv()`
- The line:
  ```python
  conn.recv(1024)
  ```
  attempts to read 1024 bytes of data from the socket. This is a blocking read, meaning the script will wait until 1024 bytes are read or a null character is encountered.

#### e. Writing a Banner Grabber
- See `bannergrabber.py` for an example.

### 4. Useful Socket Programming in Python

#### a. `sys.argv`
- Developers can get command-line arguments from the user using the `sys` library. `sys.argv` is an array containing the command-line arguments.

---

This document provides a structured and professional overview of the lecture notes, ensuring clarity and coherence.