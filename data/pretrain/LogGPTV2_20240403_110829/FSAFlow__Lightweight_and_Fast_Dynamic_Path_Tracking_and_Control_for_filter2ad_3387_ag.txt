3838 
6222 
3876 
5091 
7734 
6351 
5599 
(%)b 
(ms) 
2186  14.72  8.68  5.54  1.98 
1326  14.57  5.75  2.36  1.28 
878  13.77  8.74  5.41  2.76 
148  13.53  4.34  2.83  2.22 
217  14.55  8.70  5.42  1.23 
1482  14.02  3.89  3.01  2.20 
3476  14.37  6.05  3.07  2.28 
604  13.26 16.71 9.15  2.62 
977  13.36  8.04  4.25  1.24 
1256  14.82  7.38  3.28  2.42 
2648  14.80  9.41  4.16  2.16 
2799  13.80 14.49 8.31  2.92 
840  13.02  9.09  5.27  2.76 
688  14.47  6.24  2.33  2.06 
624  14.19 11.97 7.00  2.74 
2256  13.96  9.51  5.46  2.00 
1924  13.51  6.88  2.90  2.96 
1619  14.90  7.77  3.17  1.28 
3055  13.93  8.81  5.60  1.71 
157  13.65  8.81  5.57  1.58 
2718  13.38 11.90 7.03  1.36 
312  13.27  8.97  4.35  2.27 
1164  13.40  6.11  4.18  2.28 
2918  14.15 14.19 8.25  2.88 
919  13.08  3.39  2.89  1.33 
386  14.17  9.78  5.57  2.16 
1680  13.95  9.78  4.96  1.05 
1533  13.45 12.09 6.35  2.03 
879  14.04  9.90  5.48  2.82 
933  14.28 15.72 8.91  1.37 
1230  13.92  8.35  5.07  2.54 
189  13.56  8.57  4.39  1.57 
- 
13.93% 9.06 5.05%  2.06% 
b. (%)=(a-b)/b, where a=Corresponding DTA time, b=Baseline time. 
(ms) 
2235 
1450 
1735 
1866 
1155 
1285 
1542 
1482 
1475 
934 
957 
1569 
2251 
2450 
1321 
2373 
1915 
1788 
1827 
1214 
2089 
1029 
2456 
1733 
1777 
1276 
1119 
1698 
939 
1609 
2385 
1824 
1649 
Maka design 
Part time cat 
Litchi news 
Change Icon 
Walker 
Average 
Micro carp weather 
Guangdong Mobile 
Two step outdoor 
Wanshun taxi 
Leeboo projection 
Ease Flower 
Huiwan 
eHi taxi 
Settled guest 
do not support such analysis.  
1) Evaluation on real-world apps. The selected test cases are 
32 apps with potential leakage paths from evaluation A-3). 
We compared FSAFlow’s static analysis with FlowDroid, 
and compared FSAFlow’s runtime control with Tracking On 
Demand (TOD), Local Code Optimization (LCO), Optimal Hy-
brid  Analysis  (OHA)  and  native  Android  system  (Baseline). 
LIFT  [47]  was  chosen  as  the  TOD  reference.  LIFT  checks 
whether all live-in/out variables are safe before tracking a basic 
block.  If  so,  it  runs  the  basic  block  without  any  tracking; 
otherwise, it runs the basic block with  conventional tracking. 
Since  LIFT’s  implementation  does  not  support  Android,  a 
simulation analysis was conducted on the best case of LIFT. In 
this  case,  LIFT  did  not  spend  any  time  determining  whether 
basic  blocks  need  to  be  tracked,  but  made  quick  operations 
directly  on  the  basic  blocks  that  had  been  inserted.  In  our 
experiment,  it  was  manually  determined  whether  there  are 
already  contaminated  variables  in  a  basic  block  before  the 
execution  enters  this  basic  block;  if  so,  we  inserted  tracking 
instructions into the basic block. CDroid [21] was chosen as an 
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:26 UTC from IEEE Xplore.  Restrictions apply. 
tracking 
LCD reference, and it deploys local code optimization methods 
on hot traces, including reductant taint load/store elimination, 
reductant taint compute elimination, taint load hoisting and taint 
store sinking. Iodine [9] was chosen as an OHA reference. In the 
static analysis stage, Iodine only inserts tracking instructions for 
the statements that change the taint state of expected executions 
rather than all executions. Iodine realized rollback-free recovery 
from  unexpected  executions  for  its  DTA  to  be  sound.  Since 
Iodine’s  implementation  also  does  not  support  Android, 
simulation analysis was conducted on the best case of Iodine. In 
this case, let Iodine execute the leakage path as a fast path with-
out 
failure/recovery  mechanism. 
According to Iodine's principle for fast path optimization, we 
only  inserted  tracking  instructions  for  the  statements  whose 
source operands could be tainted by the taint source in forward 
STA, and destination operands could reach the sink in backward 
STA along the leakage path.   
triggering  a 
In these test cases, different operations were performed for 
different applications to trigger the corresponding paths and test 
their execution time. For instance, in shopping apps, the leakage 
path of a payment password could be triggered by clicking the 
confirm button; in communication apps, the leakage path of the 
chat messages could be triggered by clicking the send button. 
Twenty tests were performed on each app, and the average exe-
cution time was recorded. The test results are listed in Table V. 
FSAFlow incurred a slightly higher overhead in static anal-
ysis than FlowDroid, which indicates that FSAFlow takes less 
time  to  extract  key  additional  path  information.  FSAFlow 
needed less time in static analysis than in static instrumentation, 
mainly because only the key nodes of a few paths were instru-
mented with monitoring pointers. As for runtime tracking, com-
pared  with  native  Android,  the  average  overhead  of  CDroid, 
LIFT, Iodine and FSAFlow respectively was 13.93%, 9.06%, 
5.05% and 2.06%. Both LIFT and Iodine have lower overhead 
than CDroid. Although the test result of Iodine is closest to that 
of FSAFlow, it is obtained in Iodine’s best case, that is, let Io-
dine execute the leak path as a fast path without triggering a 
failure/recovery mechanism during the experiment. Note that 
the overheads of LIFT and Iodine fluctuated, because of the di-
verse sizes of flow statements contained in the different paths 
they encountered. In contrast, FSAFlow had the lowest over-
head with good robustness, which is attributable to the branch 
statements accounting for a small proportion of statements on 
most paths. Thus, the code execution of the corresponding mon-
itoring point had little impact on the program execution time.  
2)  Evaluation  on  the  CaffeineMark  3.0  benchmark.  This 
benchmark uses a scoring metric to measure various aspects of 
system performance. The test on CaffeineMark 3.0 is scored by 
dividing the number of executed cases by the time taken to exe-
cute all the cases. Its six test cases that can run on Android were 
modified, and all were computationally intensive. The test ob-
jective was to obtain the overhead of FSAFlow when the CPU 
performed  intensive  sensitive  information  flow  operations. 
Specifically, the initially assigned variable was set as the source 
node, and the output result variable was set as the sink node to 
perform path tracking. LIFT and Iodine were simulated using 
the method in 1). The test results are shown in Figure 9. 
The respective scores of the native Android system, CDroid, 
LIFT, Iodine, and  FSAFlow are 5975 (SB),  4965 (SO1), 5190 
(SO2), 5431 (SO3), and 5652 (SO4). Compared with the native An-
Enable 
BaseBridge 
KMin 
Geinimi 
App 
Groups 
Static Analysis 
1.649 
2.661 
2.237 
2.559 
3.091 
1.405 
1.347 
1.321 
1.373 
1.398 
1.649 
3.337 
3.052 
3.210 
4.005 
1.405 
1.346 
1.318 
1.371 
1.391 
Static Instrument  Runtime Control 
  Enable(s) Disable(s) Enable(s) Disable(s) 
Disable 
Time(s) Leaks Time(s) Leaks 
Real-word APP  5.599  42  4.451  42 
3.971  47  3.185  45 
3.487  39  2.798  36 
4.002  43  3.214  41 
DroidDream  4.995  54  4.017  50 
droid,  the  average  overhead  of  CDroid,  LIFT,  Iodine  and 
FSAFlow respectively are 16.90%, 13.14%, 9.10% and 5.41% 
(overhead  percentage  =  (SB-SOi)/SB).  The  results  in  Figure  9 
show that the overhead of FSAFlow caused by using loop and 
logic cases is higher than that of other cases. This may be due 
to  the  code  structure  of  loop  and  logic  encountering  more 
branch nodes, which increases path state monitoring. CDroid 
incurs higher overhead in string cases than other cases. This is 
probably due to the additional memory comparisons for string 
objects in method prototypes. Iodine and Lift have higher over-
head in method cases than in other cases, which may be caused 
by more taint propagation statements in the target path in method 
cases. The score of FSAFlow is close to that of the native An-
droid system, proving that our tracking method is more efficient.  
The results of Evaluation 1) and 2) show that FSAFlow has 
better performance than several representative optimization ap-
proaches, such as Iodine (Hybrid Analysis), LIFT(Tracking On 
Demand), and CDroid (Local Code Optimization). 
Fig. 9.  Performance Test Scores of CaffeineMark 3.0 
TABLE VI.  PERFORMANCE TEST RESULTS WITH AND WITHOUT IMPLICIT FLOW 
ANALYSIS ENABLED ON REAL-WORLD APPS & MALWARE 
3) Evaluation of implicit flow analysis. The test is divided 
into five groups. The first group consists of 32 apps in Table V, 
and each remaining group consists of eight randomly selected 
samples from the same family in the malware dataset Drebin 
[66]. Comparative experiments were conducted with and with-
out  implicit  flow  enabled. Ten tests were performed on each 
group, and the average execution time was recorded. The final 
test results are listed in Table VI. 
The results show that adding implicit flow analysis may add 
insignificant overhead to FSAFlow. Moreover, the number of 
leak paths output by FSAFlow increases minimally. The main 
reasons are as follows: (a) The static IFDS algorithm performs 
width-first traversal to access the branch structure information, 
thus rapidly calculating the taint propagation caused by the con-
trol dependencies. (b) In IFDS, the control-dependent taint prop-
agation  in  conditional  branches  will  not  occur  if  independent 
variables are not tainted. (c) Furthermore, in these test cases, the 
tainted variables were found to appear rarely in conditional jump 
statements, indicating that the sensitive information flows sel-
dom affect the control behaviors of real apps. (d) Even in the 
case  of  some  malware  attempting  to  convey  sensitive  infor-
mation through implicit flows, to hide itself, the number of in-
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:26 UTC from IEEE Xplore.  Restrictions apply. 
2125
structions involved in the leakage path is very small, resulting in 
the cost of FSAFlow tracking the small fragment of code con-
trollable. 
VI.  RELATED WORK 
In this section, the previous research on DTA, DTA optimi-
zation, and hybrid analysis (HA) are introduced. The limiting 
factors are also discussed, casting the problem in terms of DTA 
optimization and proposing a new methodology based on HA. 
A.  Dynamic Taint Analysis 
There has been considerable research on DTA systems [19], 
[28], [30], [33], [35], [53]-[56]. The time overhead of Dytan for 
data-flow  based  propagation  alone  was  approximately  30x, 
whereas the overhead imposed by control- and data-flow based 
propagation  was  approximately  50x  [33].  Panorama  was  20 
times slower on average [28].  
B.  DTA optimization 
Past work has developed many optimized DTA techniques. 
Important paths explored by previous research include:   
Hardware support: The hardware typically consists of logic 
blocks that monitor the execution of each instruction in the pro-
cessor and keep track of the tag information flowing from the 
execution unit at every cycle [5], [38]-[41]. Many hardware ac-
celeration schemes require additional non-standard commodity 
components or a redesign of the entire processor core, which 
limits the practicality of these approaches.  
Parallelization:  The  proliferation  of  multicore  systems  has 
inspired  researchers  to  decouple  taint  tracking  logic  to  spare 
cores to improve performance [36], [37], [44]-[46], [65]. Shad-
owReplica  [65]  spawns  a  secondary  shadow  thread  from  the 
original process to run DTA on spare cores in parallel. Shadow-
Replica performs a combined offline dynamic and static analysis 
of the application to minimize the data that must be communi-
cated for decoupling the analysis. However, ShadowReplica’s 
performance  improvement  achieved  by  this  “primary  &  sec-
ondary” thread model is fixed and cannot be improved further 
when more cores are available [37]. TaintPipe [37] spawns mul-
tiple  threads  or  processes  in different  stages  of a  pipeline  to 
carry segmented symbolic taint analysis in parallel. Its pipeline 
style relies on straight-line code with very few runtime values, 
enabling lightweight online logging and a significantly lower 
runtime  overhead.  These  efforts  reduce  the  latency  of  DTA 
through parallelization, but also require OS or hardware level 
support, which limits commercial applications.  
Intermittent  tracking：  Performance  is  improved  by  dy-
namically deactivating tracking under certain conditions, e.g., 
when the program does not operate on tagged data [41], [47], 
[48] or when it is not handling risky tasks (reading network data) 
[49], [51]. Data tracking can also be applied on-demand based 
on CPU usage, or by manual activation [50]. The disadvantage 
of this kind of research work is that it fails to determine the tim-
ing of dynamic opening or closing. Non-professional users may 
suffer from privacy leakage when turning off taint tracking. Per-
formance loss can also be incurred by the dynamic switch. 
Code Optimization： Frequently executed taint logic code 
incurs substantial overhead. The work in [31] developed func-
tion summaries to track taint at the function level. Jee et al. [52] 
proposed Taint Flow Algebra to abstract and optimize taint logic 
for basic blocks. In [13] several lightweight taint propagation 
optimization methods were deployed on hot traces. Taint Rabbit 
[68] employed a JIT compiler to optimize generic taint analysis. 
Basic blocks without operating taints were not tracked, while the 
frequently executed basic blocks with operating taints were fur-
ther subdivided to only track sub-blocks that operate taints. For 
software vulnerability analysis, Neutaint [15] exploited machine 
learning methods to model the reachability from hot bytes in the 
input to the sink nodes. Such vulnerability can be exploited and 
attacked using the hot byte. In privacy protection, privacy data 
such as phone numbers are often sent to the sink in entirety. Of-
ten, the status of hot bytes is equivalent, which may be not suit-
able for privacy protection. Code optimization can only be real-
ized for specific code features, and their effect is limited. 
C.  Hybrid analysis 
Hybrid  analysis  (HA)  uses  static  analysis  to  narrow  the 
scope of code pieces to be examined at runtime and then perform 
dynamic analysis on them. Many well-known STA tools [57]-
[59] can be exploited by hybrid analysis to complete pre-opti-
mized tracking logic [9]-[10], [52], [60], pre-reduced tracking 
range [10], [61], and share some tracking tasks [62]. While [10] 
used sound STA conservatively to reduce dynamic overheads. 
Iodine [9] and OHA [60] further reduced runtime overheads us-
ing unsound and predicated static analysis. They provided a re-
covery mechanism to handle any potential unsoundness in spec-
ulative execution. In OHA, the program execution was replayed 
from the beginning and analyzed, which is not feasible for online 
security analysis of live executions [9]. To solve this problem, 