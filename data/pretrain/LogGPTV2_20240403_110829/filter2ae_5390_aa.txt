## 前言
休假在家，竟然早上6点自然醒，不如做点数学题？  
于是心血来潮打开
    https://hackme.inndy.tw/scoreboard/
既然刷完了web，今天也尽量把crypto也刷完XD  
做的过程中发现网上很难搜到题解，于是有了这篇文章  
注：web全题解
    http://skysec.top/2018/01/07/hackme%E7%BD%91%E7%AB%99%E8%BE%B9%E5%81%9A%E8%BE%B9%E8%AE%B0%E5%BD%95/
    https://www.anquanke.com/post/id/156377
## easy
题目给了一串16进制
    526b78425233745561476c7a49476c7a4947566863336b7349484a705a3268305033303d
解了之后发现是Base64，写个脚本即可拿到flag
    import base64
    c = "526b78425233745561476c7a49476c7a4947566863336b7349484a705a3268305033303d"
    print base64.b64decode(c.decode('hex'))
## r u kidding
题目：
    EKZF{Hs'r snnn dzrx, itrs bzdrzq bhogdq}
简单的凯撒加密  
## not hard
题目信息：
    Nm@rmLsBy{Nm5u-K{iZKPgPMzS2I*lPc%_SMOjQ#O;uV{MM*?PPFhk|Hd;hVPFhq{HaAH<
    Tips: pydoc3 base64
随机想到py3的base85  
于是尝试  
最后发现只是base85+base32  
即可获得flag
## classic cipher 1
题目如下
    MTHJ{CWTNXRJCUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO}
    Solve this substitution cipher
直接凯撒遍历不行，于是直接使用工具  
可以得到flag  
注：交的时候去掉空格
## classic cipher 2
题目给了一个很长的vigenere cipher  
在线工具解密
    https://www.guballa.de/vigenere-solver
得到  
搜索flag  
得到答案
## easy AES
下载后发现是.xz结尾  
于是
    xz -d 1.py.xz
即可得到1.py
    #!/usr/bin/env python3
    import base64
    from Crypto.Cipher import AES  # pip3 install pycrypto
    def main(data):
        c = AES.new(b'Hello, World...!')
        plain_text = bytes.fromhex(input('What is your plain text? '))
        if c.encrypt(plain_text) != b'Good Plain Text!':
            print('Bad plain text')
            exit()
        c2 = AES.new(plain_text[::-1], mode=AES.MODE_CBC, IV=b'1234567887654321')
        decrypted = c2.decrypt(data)
        with open('output.jpg', 'wb') as fout:
            fout.write(decrypted)
    main(base64.b64decode('.......'))
思路相当清晰：  
1.第一轮密钥为`b'Hello, World...!'`  
2.第一轮密文为`b'Good Plain Text!'`  
3.解密即可得到`plain_text`  
4.第二轮密钥为`plain_text`  
5.直接解密输出图片即可  
代码如下
    import base64
    from Crypto.Cipher import AES
    c = AES.new(b'Hello, World...!')
    plain_text = c.decrypt(b'Good Plain Text!')
    c2 = AES.new(plain_text[::-1], mode=AES.MODE_CBC, IV=b'1234567887654321')
    data = base64.b64decode('.......')
    decrypted = c2.decrypt(data)
    with open('output.jpg', 'wb') as fout:
        fout.write(decrypted)
得到图片  
即可获得flag
## one time padding
看到代码
    <?php
    /*
     * one time padding encryption system
     *
     * we generate {$r = random_bytes()} which {strlen($r) == strlen($plaintext)}
     * and encrypt it with {$r ^ $plaintext}, so no body can break our encryption!
     */
    // return $len bytes random data without null byte
    function random_bytes_not_null($len)
    {
        $result = '';
        for($i = 0; $i < $len; $i++)
            $result .= chr(random_int(1, 255));
        return $result;
    }
    if(empty($_GET['issue_otp'])) {
        highlight_file(__file__);
        exit;
    }
    require('flag.php');
    header('Content-Type: text/plain');
    for($i = 0; $i < 20; $i++) {
        // X ^ 0 = X, so we want to avoid null byte to keep your secret safe :)
        $padding = random_bytes_not_null(strlen($flag));
        echo bin2hex($padding ^ $flag)."\n";
    }
注意到每次加密都是使用`random_bytes_not_null`生成随机的key，然后与flag进行异或，正面突破显然无望  
但是我们注意到一段注释
    // X ^ 0 = X, so we want to avoid null byte to keep your secret safe :)
题目意思为随机key中不会存在0，那么意味着不会出现flag中的原字母  
那么我们反过来想，只要爆破每一位，每一位从未出现过的，即flag  
所以写出脚本如下：
    import requests
    import re
    from bs4 import BeautifulSoup
    url = "https://hackme.inndy.tw/otp/?issue_otp=a"
    res_list = [[True] * 256 for i in range(50)]
    for i in range(300):
        print i,res_list
        r = requests.get(url)
        soup = BeautifulSoup(r.text, "html.parser")
        text = str(soup)
        c_list = re.findall("[^\n]*\n", text)
        for j in c_list:
            j = j.replace('\n','')
            for k in range(1, len(j)/2+1):
                char_hex = "0x" + j[k * 2 - 2: k * 2]
                char_int = int(char_hex, 16)
                res_list[k - 1][char_int] = False
    flag = ""
    for i in range(50):
        for j in range(256):
            if res_list[i][j]:
                flag += chr(j)
    print flag
其实最外层循环100次左右就够了，怕有人很非，所以写了300次= =  
要是二维数组True不止50个。。对不起，你是大非酋。。。写1000吧  
最后得到flag
## shuffle
拿到代码
    import random
    import string
    characters = ''.join(map(chr, range(0x20, 0x7f)))
    with open('plain.txt', 'r') as fin:
        plaintext = fin.read()
    mapping = list(characters)
    random.shuffle(mapping)
    mapping = ''.join(mapping)
    T = str.maketrans(characters, mapping)
    with open('crypted.txt', 'w') as fout:
        fout.write(plaintext.translate(T))
    plain = list(plaintext)
    random.shuffle(plain)
    suffled_plaintext = ''.join(plain)
    with open('plain.txt', 'w') as frandom:
        frandom.write(suffled_plaintext)
代码很清晰：  
1.将明文随机替换加密，保存为crypted.txt  
2.将明文打乱，保存为plain.txt  
故此我们只要根据plain.txt和crypted.txt计算出字频和对应的字符  
然后替换一遍即可  
类似于：  
随机写了个冗余的代码（想到哪里写到哪里= =别介意，没优化）
    f1 = open('./crypted.txt')
    cry_list=[0 for i in range(300)]
    cry_content = f1.read()
    list1=[]
    for i in cry_content:
        cry_list[ord(i)]+=1
    for i in range(len(cry_list)):
        if cry_list[i]!=0:
            list1.append((cry_list[i],i))
    list2=[]
    f2 = open('./plain.txt')
    plain_list=[0 for i in range(300)]
    plain_content = f2.read()
    for i in plain_content:
        plain_list[ord(i)]+=1
    for i in range(len(plain_list)):
        if plain_list[i]!=0:
            list2.append((plain_list[i],i))
    res1 = sorted(list1)
    res2 = sorted(list2)
    res = []
    for i in range(len(res1)):
        cry_chr = chr(int(res1[i][1]))
        plain_chr = chr(int(res2[i][1]))
        res.append((cry_chr,plain_chr))
    f3 = open('./crypted.txt')
    flag_content = f3.read()
    res_content = ""
    for i in flag_content:
        flag = False
        for j in range(len(res)):
            if i == res[j][0]:
                res_content+=res[j][1]
                flag = True
                break
        if flag == False:
            res_content+=i
    print res_content
运行即可替换回正确的文本，个别符号需要微调，因为出现频率相同  
故此得到flag
## login as admin 2
拿到源码分析一下，看到关键函数
    function load_user()
    {
        global $secret, $error;
        if(empty($_COOKIE['user'])) {
            return null;
        }
        list($sig, $serialized) = explode('#', base64_decode($_COOKIE['user']), 2);
        if(md5(md5($secret).$serialized) !== $sig) {
            $error = 'Invalid session';
            return false;
        }
        parse_str($serialized, $user);
        return $user;
    }
发现需要
    md5(md5($secret).$serialized) === $sig
而
    $serialized = http_build_query($user);
    $sig = md5(md5($secret).$serialized);
    $all = base64_encode("{$sig}#{$serialized}");
    setcookie('user', $all, time()+3600);