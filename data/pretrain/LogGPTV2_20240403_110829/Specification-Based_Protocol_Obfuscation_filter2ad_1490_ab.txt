the protocol itself, or on the way messages are transmitted.
The chosen transformations must be adapted to the considered
attacker model.
A. Software obfuscations
For software obfuscations, it is commonly assumed that
the attacker has access to the software binary. He can use
static analyzes and possibly dynamic analyzes if he is able to
properly execute the software to trigger communications.
In [25], Collberg et al. propose a taxonomy of obfuscating
transformations for software programs. This taxonomy dis-
tinguishes four transformation targets: 1) layout obfuscation;
2) data obfuscation; 3) control obfuscation and 4) preventive
transformation. In particular, the data obfuscation category,
that is relevant to protocol obfuscation, contains three sub-
categories: 1) Storage & Encoding; 2) Aggregation and 3) Or-
dering. To measure the effect of an obfuscating transformation,
three metrics are deﬁned: 1) potency describing how much a
program is more complex to understand by a human being; 2)
resilience describing how it resists to automatic tool analysis;
and 3) cost assessing the execution time/space penalty which
a transformation incurs on an obfuscated application.
Initially, software obfuscation has focused on hardening
decompilation steps [26], [27], [28], [29]. In [30], Wroblewski
proposed obfuscation transformations speciﬁc to binary code
instead of transformations that apply to higher level languages.
In [31], Linn and Debray introduce the replacement of direct
calls by so-called branching functions. This work is extended
in [32] by Cappaert and Preneel. They formalize the notion of
control ﬂow graph ﬂattening to prevent information leakage.
Recently, some solutions have been proposed to mitigate
dynamic analysis. As an example, software diversiﬁcation is
applied in [33] to increase the complexity of dynamic analysis.
Most of dynamic analyses are based on data tainting [34], thus
in [35], transformations are proposed to increase the risk of
obtaining a wrong taint analysis.
B. Communication protocol obfuscations
For communication protocol obfuscations, the frequently
considered adversary model is an attacker who can eavesdrop
a communication channel to collect transmitted data, without
having access to the binary of the application.
Many obfuscation techniques have been proposed to mit-
igate network censorships. In [1], four categories are dis-
tinguished to classify protocol obfuscations: Randomization,
Mimicry, Tunneling/Covert Channel and Programmable. This
classiﬁcation differs from the one in [25] by Collberg et
al. which considers transformations that must be integrated
into the design process of the application while Dyer et
al. classiﬁcation considers transformations applied after the
application development.
1) Randomization: The goal of Randomization is to trans-
form a message sequence into a network trafﬁc seemingly
random. This transformation must prevent ﬁngerprinting and
any inference of any statistical characteristics of the protocol.
The main projects dealing with obfuscation by randomiza-
tion are used in Tor as Pluggable Transports plugins1, e.g.
ScrambleSuit [36], obfproxy [37]. These projects modify the
application layer encoding and some part of the transport
layer (connection characteristics) that are often used in ﬁrewall
rules. These techniques are very effective against ﬁrewalls
based on blacklists.
2) Mimicry: The goal of Mimicry is to change the com-
munication characteristics (notably, message format) to mimic
characteristics of other legitimate protocols, e.g. Skype or
HTTP.
With this technique, ﬁrewalls based on whitelists of au-
thorized protocols can be pypassed. As an example, Ste-
goTorus [38] project embeds information into the headers
and body of a set of predeﬁned HTTP messages, using
steganographic techniques. SkypeMorph [39] uses the facts
that Skype trafﬁc is encrypted and focuses on mimicry of
statistical characteristics of a Skype communication. However,
both of these approaches can be distinguished from legitimate
protocols using semantics, dependencies between connections
and error connections [40]. Furthermore, mimicry incurs a
higher overhead (time and memory usage) compared to ran-
domization.
3) Tunneling/Covert Channel: The goal of Tunneling is
to use a legitimate layer protocol as a new transport layer
protocol. The tunneling strategy can be integrated in an ap-
plication using a library implementing the legitimate protocol.
Thus, the observed behavior corresponds to the behavior of
a legitimate application which uses the legitimate protocol.
However, the overhead of this solution is higher compared to
Mimicry. Skype has been widely used for this purpose in
the Freewave [41] and Facet [42] projects. In [43], a solution
1https://www.torproject.org/docs/pluggable-transports
based on online videogames communications is proposed to
reduce the overhead. Their solution is also easily adaptable to
different online videogame protocols.
4) Programmable: The goal of this technique is to combine
beneﬁts of both Randomization and Mimicry by allowing
the system to be conﬁgured to accommodate either strategy.
FTE [44] project is categorized as a programmable system
by the authors because the obfuscation techniques are pa-
rameterized by the user with a regular expression. How-
ever, it only considers message format. Thus, they developed
Marionette [1] to take into account communication channel
properties.
5) Cryptography: Cryptography is a speciﬁc type of Ran-
domization that also ensures security properties: privacy and
integrity. Encrypted trafﬁc is difﬁcult to process by the re-
verser, the resilience metric is therefore very high for this
category. On the other hand, this category is cumbersome and
costly. It often requires the use of keys that have to be dis-
tributed, managed and revoked, and the use of a cryptographic
algorithm that is costly at runtime. Moreover, one can question
the robustness of these techniques if the attacker model is
extended by considering that attacker also has a copy of the
application binary. Indeed, tools such as Dispatcher [16] and
Reformat [21] have shown their efﬁciency in identifying the
interface between the cryptographic functions and the core of
the application. A debugger placed at this interface can then
dump the plain messages, thus, bypassing the cryptographic
algorithms.
C. Discussion and contribution
As pointed out by Dyer et al. in [1], most existing pro-
tocol obfuscation techniques have been developed in order
to circumvent network censorships. These techniques were
not designed to provide efﬁcient protection against protocol
reverse engineering. Indeed,
they can be easily bypassed
especially when the attackers have access to a network trace
and to the binary of the application.
Usually, the obfuscation transformations are integrated into
the binary and are applied a posteriori. Accordingly,
the
reverse engineering process can be facilitated if probes can be
successfully placed by the adversary at the interface between
the core application and the transformation layer.
As far as we know, none of the state-of-the art techniques
have investigated the possibility to obfuscate the speciﬁcation
of the communication protocol to provide protection against
protocol reverse engineering. The main contribution of this
paper consists in deﬁning and implementing a framework for
communication protocols obfuscation based on such approach,
considering transformations that are applied to the speciﬁ-
cation of the format of the messages. The transformations
are, by construction,
invertible to avoid ambiguities while
parsing a message. Also, the deﬁnition of the transformations
is guided by the reverse engineering challenges discussed
in Section II-C,
to make the reverse engineering process
more cumbersome and complex. In particular the following
observations are taken into account in our approach:
IV. ARCHITECTURE
The architecture of our framework, named ProtoObf, is
presented in ﬁgure 2. The input of the framework is the
message format speciﬁcation of the protocol (noted S in the
following). This speciﬁcation is translated into a graphical
representation named a message format graph and noted G1
in the following.
According to criteria established by the developer,
the
framework selects a number n of transformations to be ap-
plied to G1. These transformations are either aggregation
transformations or ordering transformations according to the
taxonomy deﬁned in [25]. Each of the transformations noted
takes a graph Gi as an input and provides a modiﬁed
τi
graph Gi+1 as an output. The chosen transformations are
composed and applied to the initial graph G1. Note that all
the transformations must be invertible so that the receiver is
able to inverse the transformation.
The framework is used during the design and the develop-
ment of the application to generate the source code that will
perform the obfuscation or deobfuscation of messages during
the execution of the application, based on Gn+1. Therefore,
the output of the framework is the source code for the message
parser and the corresponding message serializer. These source
codes must be integrated within all
the applications that
communicate, so that they use the same obfuscations.
During the execution, the message serializer analyzes an
abstract syntax tree (AST) of a message, which is an instanti-
ation of G1 (i.e., it belongs to the language generated by G1).
This AST is serialized by performing transformations on the
ﬂy while constructing the obfuscated message.
Let us note that the graph is an abstraction of the format of
the messages and does not contain the values of the message
ﬁelds. These values are deﬁned in each AST corresponding to
the instantiation of the graph for a speciﬁc message.
V. MODELS AND TRANSFORMATIONS
This section ﬁrst presents the different models we adopted
for the formalization of the message format of the protocol
as well as the obfuscations of the messages. Then, detailed
information is provided for the proposed elementary obfusca-
tions chosen in our approach. Finally, the main principles of
the serializer and parser behavior are presented.
A. Message format graph
This section provides more details on the abstract syntax
tree of messages and on the associated message format graph.
These models are illustrated, in ﬁgure 3, with a simpliﬁed
example.
An AST is structured as a tree containing nodes and edges.
A leaf of this tree represents a value of a message ﬁeld. The
overall message corresponds to the concatenation of these
values using an ordered depth-ﬁrst search. The intermediate
nodes of the AST describe the message structure. Figure 3
presents an example of two types of messages derived from the
Modbus protocol, denoted as M1 and M2, with the associated
Fig. 2. Architecture of the framework ProtoObf.
• Inference algorithms used by PRE tools to retrieve the
protocol grammar or the message format rely on a clas-
siﬁcation of messages. An obfuscation that could lead to
a bad classiﬁcation will likely affect the efﬁciency of the
reverse engineering activity.
• The speciﬁcation of communication protocols is generally
based on regular models (automata, tree, etc.) that are
simple to implement and for which messages can be
parsed and generated quickly. Naturally, PRE tools usu-
ally adopt similar models to infer the protocols messages
format or grammar. These tools are likely to be inefﬁcient
if more complex models are used to generate the obfus-
cated messages (e.g., pushdown automata, context-free
grammar, etc.) without sacriﬁcing processing time [45].
• The development, debug and maintenance of obfuscated
protocols should not result in signiﬁcant overheads to
the users, thus, building a message should use the same
interface, even in presence of obfuscations.
The obfuscation framework presented in the remaining
sections is aimed at fulﬁlling these requirements. In this paper
we only address the obfuscation of the protocol message
format. The following advantages of our approach can be
highlighted: 1) operating at the protocol speciﬁcation level
allows the deﬁnition of transformations that are aware of
the semantics of the message ﬁelds (in other words,
the
transformations are coherent with respect to the organization
of the message); 2) transformations are generated using non-
regular languages (e.g., context-free language such as anbn or
context sensitive language such as the copy language) to make
the syntax of protocol messages appear more complex than the
syntax of regular languages; 3) obfuscated messages are more
complex to infer with acceptable parsing and processing time;
4) our approach is integrated directly into the development
process of the application. The core application doesn’t build
the non-obfuscated message to send. The obfuscated message
is directly constructed when it
is serialized. This strategy
complicates the work of reverse engineering tools even if the
attacker has access to the binary of the application; 5) our
approach is orthogonal to existing solutions, thus can be used
in conjunction with them.
Fig. 3. Message format graph and abstract syntax trees.
abstract syntax trees, AST1 and AST2, and the corresponding
sequence of bytes.
A message format graph G1 describes all AST that are
compliant to the speciﬁcation of S. A node of the graph
describes a node in the corresponding AST. In ﬁgure 3, the
graph G1 describes both AST1 and AST2.
A node is deﬁned by ﬁve attributes: 1) a Name; 2) a Type; 3)
a list of sub-nodes named SubNodes; 4) a parent node named
Parent (none for the root node) and 5) a boundary method
named Boundary. The Type or the Boundary attributes may
contain an implicit reference to another node.
The type of a node can be:
• Terminal if the node of the AST contains user data or
message related information, e.g. the size of another node;
• Sequence if the node of the AST contains a sequence of
sub-nodes;
• Optional if the node of the AST is optional, depending
on the value of another node in the AST;
• Repetition if the node of the AST consists of a repetition
of the same sub-node;
• Tabular if the node of the AST consists of a repetition of
its sub-node, and the number of repetitions is given by
another node in the AST.
The Boundary attribute indicates the method used to deﬁne
the length of the associated ﬁeld. It can be:
• Fixed if it has a ﬁxed size deﬁned in S;
• Delimited if it ends with a predeﬁned byte or sequence
of bytes (for instance \r\n in HTTP);
• Length if the length of the ﬁeld is deﬁned by another
• Counter if the node is a Tabular, the number of repetitions
of the sub-node in the AST is deﬁned by another node;
• End if the ﬁeld corresponds to the remaining of the
node;
message;
• Delegated if the length of the ﬁeld corresponds to the
sum of the length of the sub-nodes.
The Boundary attribute must be consistent with the type of
the ﬁeld. For instance, a Terminal ﬁeld must be delimited
either with a Fixed boundary, a Delimited boundary, a Length
boundary or an End boundary.
This graph is well suited to describe classical protocols that
rely on regular models in language theory: Optional type can
be used to represent the ”|” operator; Sequence type is used
for the concatenation ”.”; and Tabular and Repetition types
can be used to represent closure ”∗”.
In the representation of such graph in the ﬁgure 3, nodes
are represented by their name. The type of node for Terminal,
Sequence, Tabular and Optional ﬁelds is speciﬁed under the
node by using notation Te, S, Ta and O. Boundaries are shown
for Delimited, Delegated and End by the notation De, Dgt and
E, for Fixed by the notation F(n) (n stands for the ﬁxed size),
and for Counter and Length by the notations C(n) and L(n)
(where n stands for the node that helps to deﬁne the size,
identiﬁed with a dashed arrow in the ﬁgure).
SUMMARY OF GENERIC TRANSFORMATIONS
TABLE I
DESCRIPTION FORMAT OF GENERIC TRANSFORMATIONS
TABLE II
SplitAdd
SplitCat
ConstAdd
A Terminal node with a value v is split into a sequence of two sub-
nodes with values v1, v2: v = v1 + v2.
SplitSub and SplitXor
Same as SplitAdd with a subtraction or a xor.
A Terminal node with a value v is split into a sequence of two sub-
nodes with values v1, v2: v = concatenate(v1, v2).
A Terminal node with a value v is substituted by a node with value
v + constant (constant is predeﬁned in the framework).
ConstSub and ConstXor
Same as ConstAdd with a subtraction or a xor.
BoundaryChange
A Delimited Boundary is changed into a Length Boundary: the node
is replaced by a sequence of two-nodes n1, n2 (n1 is the length of
n2).
PadInsert
A node with random value is added to a Sequence.
A node is read from the end, from right to left.
A Tabular with n sub-nodes is replaced by a sequence of Tabular
nodes.
ReadFromEnd
TabSplit
RepSplit
ChildMove
Same as TabSplit with a Repetition.
Permutation of two sub-nodes of a Sequence.
B. Transformations
A transformation, noted τi, modiﬁes the structure of a mes-
sage format graph that leads to a modiﬁcation of the abstract
syntax tree of the messages processed during the execution.
Thus,