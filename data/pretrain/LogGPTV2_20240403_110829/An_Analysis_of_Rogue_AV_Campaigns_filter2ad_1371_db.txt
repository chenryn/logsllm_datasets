### Privilege States Based Access Control for Fine-Grained Intrusion Response

#### 4.1 Determining the Final State of a Privilege

Let role \( r2 \) be assigned to user \( u1 \). To determine the final state of the `SELECT` privilege on table \( t1 \) for user \( u1 \), we evaluate `priv_states(u1, SELECT, t1)` as follows:

\[
\text{priv\_states}(u1, \text{SELECT}, t1) = \text{priv\_states}(SU1, u1, \text{SELECT}, t1) \cup \text{priv\_states}(SU2, u1, \text{SELECT}, t1)
\]

\[
= \text{priv\_states}(SU1, r2, \text{SELECT}, t1) \cup \text{priv\_states}(SU2, r2, \text{SELECT}, t1)
\]

\[
= \{\text{taint}\} \cup \{\text{grant}\} \cup \{\text{suspend}\}
\]

\[
= \{\text{taint, grant, suspend}\}
\]

The final state is determined using the `PSD_state()` function as follows:

\[
\text{PSD\_state}(\text{taint, grant, suspend}) = \text{suspend}
\]

#### 3. Implementation and Experiments

In this section, we present the details on how to extend a real-world DBMS with PSAC. We chose to implement PSAC in the PostgreSQL 8.3 open-source object-relational DBMS [5]. Throughout the rest of the section, we use the term `PSAC:PostgreSQL` to indicate PostgreSQL extended with PSAC, and `BASE:PostgreSQL` to indicate the official PostgreSQL 8.3 release.

The implementation of `PSAC:PostgreSQL` must meet two design requirements:
1. **Backward Compatibility**: `PSAC:PostgreSQL` should maintain backward compatibility with `BASE:PostgreSQL`. This is crucial because we intend to release `PSAC:PostgreSQL` for general public use in the near future.
2. **Minimized Overhead**: The overhead for maintaining privilege states in the access control mechanism should be minimized. Specifically, the time taken for the access control enforcement code in the presence of privilege states should not significantly exceed the time required by the access control mechanism of `BASE:PostgreSQL`.

In the following sections, we first present the design details of `PSAC:PostgreSQL`, and then report experimental results showing the efficiency of our design.

##### 3.1 Design Details of PSAC:PostgreSQL

Access control in `BASE:PostgreSQL` is enforced using access control lists (ACLs). Every DBMS object has an associated ACL, which is a one-dimensional array of `ACLItem` data types. An `ACLItem` is the basic unit for managing privileges of an object and is implemented as a structure with the following fields:
- `granter`: the user/role granting the privileges.
- `grantee`: the user/role to which the privileges are granted.
- `privs`: a 32-bit integer (on 32-bit machines) managed as a bit-vector to indicate the privileges granted to the grantee.

A new `ACLItem` is created for every unique pair of `granter` and `grantee`. There are 11 predefined privileges in `BASE:PostgreSQL`, each with a corresponding bit-mask. As shown in Figure 5, the lower 16 bits of the `privs` field represent the granted privileges, while the upper 16 bits indicate the grant option. If the \( k \)-th bit is set to 1 (where \( 0 \leq k < 15 \)), privilege \( p_k \) is granted to the user/role. If the \( (k + 16) \)-th bit is also set to 1, the user/role has the grant option on privilege \( p_k \).

**Design Options:**
There are two design options to extend `BASE:PostgreSQL` to support privilege states:
1. Extend the `ACLItem` structure to accommodate privilege states.
2. Maintain the privilege states in a separate data structure.

We chose the latter option to maintain backward compatibility with `BASE:PostgreSQL` and avoid potential bugs in the existing code base.

**System Catalog Extension:**
In `BASE:PostgreSQL`, the `pg_class` system catalog stores metadata information for database objects such as tables, views, indexes, and sequences. This catalog also stores the ACL for an object in the `acl` column, which is an array of `ACLItems`. We extend the `pg_class` system catalog to maintain privilege states by adding four new columns:
- `acltaint`: to maintain the tainted privileges.
- `aclsuspend`: to maintain the suspended privileges.
- `acldeny`: to maintain the denied privileges.
- `aclneut`: to indicate if the privilege is in the neutral orientation mode.

These state columns and the `aclneut` column are of the same data type as the `acl` column, that is, an array of `ACLItems`. The lower 16 bits of the `privs` field in these state and `aclneut` columns are used to indicate the privilege states and the orientation mode, respectively. The upper 16 bits are kept unused. Table 3 shows the truth table capturing the semantics of the `privs` field bit-vector in `PSAC:PostgreSQL`.

**Authorization Commands:**
We have modified the `BASE:PostgreSQL` `GRANT` and `REVOKE` authorization commands to implement privilege state transitions. Additionally, we have defined and implemented three new authorization commands in `PSAC:PostgreSQL`:
- `DENY`: moves a privilege to the deny state.
- `SUSPEND`: moves a privilege to the suspend state.
- `TAINT`: moves a privilege to the taint state.

The default privilege orientation mode for these commands is the down mode, but it can be overridden by specifying the neutral orientation mode. The administrative model for these commands is similar to that of the SQL-99 `GRANT` command. The syntax for the new commands is reported in Table 4.

**Access Control Enforcement:**
We have instrumented the access control enforcement code in `BASE:PostgreSQL` with the logic for maintaining privilege states and orientation modes. The core access control function in `BASE:PostgreSQL` returns a true/false output depending on whether the privilege under check is granted to the user or not. In contrast, the core access control function in `PSAC:PostgreSQL` returns the final state of the privilege to the calling function. The calling function then executes a pre-configured action based on the state of the privilege.

As a proof of concept, we have implemented a re-authentication procedure in `PSAC:PostgreSQL` when a privilege is in the suspend state. The re-authentication procedure is as follows: when a privilege is in the suspend state, further negotiation with the end-user must be satisfied before the user-request is executed by the DBMS. In the current version of PSAC, we implement a procedure that re-authenticates the user if a privilege, after applying the PSD relationship, is found in the suspend state.

**Re-authentication Scheme:**
In `BASE:PostgreSQL`, an authentication protocol is carried out with the user whenever a new session is established between a client program and the PostgreSQL server. In `PSAC:PostgreSQL`, the same authentication protocol is replayed in the middle of a transaction execution when access control enforcement is in progress, and a privilege is found in the suspend state. We have modified the client library functions of `BASE:PostgreSQL` to implement such a protocol in the middle of a transaction execution. If the re-authentication protocol fails, the user request is dropped. If it succeeds, the request proceeds as usual, and no changes are made to the state of the privilege. Note that such a re-authentication procedure is implemented as a proof-of-concept in `PSAC:PostgreSQL`. More advanced forms of actions, such as a second-factor of authentication, can also be implemented.

**Access Control Enforcement Algorithm:**
The pseudo-code for the access control enforcement algorithm in `PSAC:PostgreSQL` is presented in Listing 1. The function `aclcheck()` takes as input a privilege (`in_priv`) whose state needs to be determined, a database object (`in_object`) that is the target of a request, and a user (`in_user`) exercising the usage of `in_priv`. The output of the algorithm is the state of `in_priv`. The algorithm proceeds as follows: since we define a total order on the privilege states, it is sufficient to check each state in the order of its rank in the PSD relation (cfr. Section 2). Thus, we first check for the existence of `in_priv` in the deny state, followed by the suspend state, the taint state, and then the grant state. The function for checking the state of `in_priv` (function `check_priv()`) in an ACL is designed to take into account all the roles that are directly and indirectly (through a role hierarchy) assigned to `in_user`. The most expensive operation in the `check_priv()` function is the run-time inheritance check of roles, which we make a constant-time operation by maintaining a cache of the assigned roles for every user/role in the DBMS. Thus, the running time of the access control enforcement algorithm is primarily dependent upon the sizes of various ACLs.

If the privilege is not found to be in the above-mentioned states, the unassign state is returned as the output of the access check algorithm.

```plaintext
Executing the command:
- User: in_user
- Target database object: in_object
- Privilege: in_priv

Input:
- in_user: User executing the command
- in_object: Target database object
- in_priv: Privilege to check

Output:
- The state of the privilege

Function aclcheck(in_user, in_object, in_priv) returns state
{
    // Get the neutral orientation ACL for in_object
    NeutACL = get_neutron(in_object);

    // Deny
    DenyACL = get_deny_state_acl(in_object);
    if (check_priv(in_priv, DenyACL, in_user, NeutACL, DENY) == true)
        return DENY;

    // Suspend
    SuspendACL = get_suspend_state_acl(in_object);
    if (check_priv(in_priv, SuspendACL, in_user, NeutACL, SUSPEND) == true)
        return SUSPEND;

    // Taint
    TaintACL = get_taint_state_acl(in_object);
    if (check_priv(in_priv, TaintACL, in_user, NeutACL, TAINT) == true)
        return TAINT;

    // Grant
    GrantACL = get_grant_state_acl(in_object);
    if (check_priv(in_priv, GrantACL, in_user, NeutACL, GRANT) == true)
        return GRANT;

    // Else return UNASSIGN state
    return UNASSIGN;
}

Function check_priv(in_priv, AclToCheck, in_user, NeutACL, state_to_check) returns boolean
{
    // First, perform the inexpensive step of checking the privileges directly assigned to the user
    if (in_user has in_priv in AclToCheck)
        return true;

    // Get all the roles directly assigned to in_user
    ...
}
```

This completes the detailed explanation of the design and implementation of `PSAC:PostgreSQL`.