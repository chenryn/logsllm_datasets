可是原本 plugdata 的定义就为 null, 怎么使其不为 null 进入条件呢？
    $(document).ready(function() {
        ...
        $("#Version").html("5.10");
        chrome.extension.sendRequest({
            Action: "ONLOAD"
        }, function(b) {
            plugdata = b;
            PerformAction()
        });
    });
可以发现 PerformAction 调用之前有一个赋值，可以使用 {Action: “ONLOAD”} 对其进行赋值，而对 {Action:
“ONLOAD”} 的响应，则在 background.js 内:
    var RequestQ = [],
        plugdata = null,
        IRTab = null,
        IRData = null,
        requestFilter = {
            urls: [""]
        };
    chrome.extension.onRequest.addListener(function(a, b, c) {
        $.extend(a, {
            TabID: b.tab.id
        });
        plugdata = a;
        switch (a.Action) {
            case "VERSION":
                break;
            case "ONLOAD":
                c(IRData);
                break;
            case "GETFARE":
                IRData = a;
                $.extend(a, {
                    RequesterTabID: b.tab.id
                });
                chrome.tabs.getAllInWindow(null, OngetAllInWindow);
                c({});
                break;
                ......
这里如果之前不了解 background_page 的特性的话是比较绝望的，因为对于 plugdata 的赋值来自于
chrome.extension.onRequest.addListener 的回调函数 c， 而 c 的参数则是 IRData 也为 null,
也就是说正常来讲 `plugdata = IRData = null`。 虽然我可以发送 {“Action”: “GETFARE”} 来设置 IRData
的值，但是如果 background_page 和 content_script
一样是每一次刷新页面执行一次的话，那就很尴尬了。因为PerformAction 的执行在 `$(document).ready(`,
我必须要要求页面过一段时间再执行 `$(document).ready(` 以求我能在 PerformAction 之前 postMessage 一个
{“Action”: “GETFARE”}，其实这里并不需要这样。 （当然这样的条件竞争也是可以达成的，让 `$(document).ready(`
等一段时间的方法也有很多，一个src地址返回比较慢的script标签就是一个方法）。
## background page
思考了一下 background page 的设计需求，我觉得它不应该像 content_script
一样每次访问页面执行一次。看了一些官方文档，并写了几个 demo，确定了以下两点：
  1. background 并不是每次访问页面执行一次，内部定义的变量不会因为页面刷新而重新定义。
  2. background 即使域改变也不会重新定义和赋值，所有的域都用一个 runtime。
第一点使得这个漏洞更加容易利用，第二点使得我们所写的 payload 并不只影响在 payload
中利用的网站，而是在浏览器和插件为重启之前，每次访问新的页面都可以在不同域下触发 payload。
## 利用
思路明确了之后，我们只需先 postmessage 一个 `{Action: "GETFARE",Data: {//payload看下面源码}}`， 把
IRData 设置为 Data 属性里的 payload， 再刷新页面使其重新执行 PerformAction 函数，PerformAction
会发送一个post请求到 plugdata.URL 上，并把返回传递到 `$("body").html(b)` 的 b 参数中。（重新设置 iframe 的
src 即可刷新页面）
ps. 由于最近p师傅的 note 神器，证书不能用了，我只能先用我自己没有认证的证书来，baidu 属于 https，要发送 ajax
请求，对象也必须得是 https. 且需要设置 Access-Control-Allow-Origin 和 Access-Control-Allow-Methods。 **请大家在访问poc前，先访问 ，认证一下那个破证书**。
在插件已经启用的前提下打开以下链接链接即可，跨域到 www.baidu.com 执行 xss。且之后再访问任意网站 payload 都会执行。
poc: 
        content script uxss poc
        hacking-extensions
        source code: https://github.com/neargle/hacking-extensions/tree/master/content_scripts_uxss
## 视频演示
﻿﻿  
您的浏览器不支持video标签  
首先访问  触发漏洞，在依次访问 
和  证明第二个结论。
## 修复
修复方法有很多，最为常见的就是限定 postMessage 的 source 为当前 window，例如 `evt.source ===
window`，这个是大部分插件采用的方法，如 [React Developer
Tools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=zh-CN) 的代码：
    function handleMessageFromPage(evt) {
        evt.source === window && evt.data && "react-devtools-bridge" === evt.data.source && port.postMessage(evt.data.payload);
    }
当然这种防御方式也是可能被 bypass 并受到UXSS影响的，这里暂且不提。
这个插件的情况，其实功能只提供给部分网站，限定 event.origin, 只给部分网站提供该需求即可。例如: `event.origin ===
"https://baidu.com"。`
## 插件爬虫及其它
本次选取的插件，大概有 500000+ 用户(数据更新至2018年春节前)，国内使用的人数较少，大家不用担心受到影响。
使用的爬虫，是之前和蘑菇同学做的研究  遗留下来的一部分项目修改的，可以参考当时研究的paper:
 和
 项目。
## 参考
  * 
  * 
  * 
  * 