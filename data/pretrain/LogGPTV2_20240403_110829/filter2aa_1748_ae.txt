### Chapter 6: Balancing User Load and Replicating Sessions

#### Load Balancing and Clustering

Load balancing is a technique used to distribute user load among multiple application servers, while clustering enables session failover when a node in the cluster becomes unavailable. This chapter describes a simple setup involving three computers: one running the web server and two application servers. The web server will balance the user load between the two application servers.

**Figure 6-1: WebApp Window of the petstore.ear Archive**

---

#### Setting Up the Environment

Before configuring load balancing, ensure that the Web service on the web-server computer and the application servers on the nodes are stopped. Follow the steps below to set up load balancing and clustering.

##### Enable Load Balancing in the Web Server

1. **Launch Server Admin**:
   - If Server Admin is not already running, launch it.
   
2. **Select Web Service**:
   - In the Computers & Services list, select "Web" and click "Settings" in the configuration pane.
   
3. **Configure Modules**:
   - Click the "Modules" tab and select "jk_module" from the bottom of the modules list.
   
4. **Configure Sites**:
   - Click the "Sites" tab and double-click the appropriate site (by default, there should be only one). Ensure the site is enabled.
   
5. **Disable Performance Cache**:
   - Click the "Options" tab and deselect "Performance Cache."
   
6. **Save Configuration**:
   - Click "Save" to apply the changes.

7. **Edit httpd.conf File**:
   - Open the `httpd.conf` file located in `/etc/httpd` using a text editor.
   - Look for the `<IfModule>` element and add the following line at the end:
     ```apache
     JKMount /petstore/* loadbalancer
     ```
   - The updated `<IfModule>` element should look like this:
     ```apache
     <IfModule>
         JKWorkersFile /etc/httpd/workers.properties
         JKLogFile /var/log/httpd/mod_jk.log
         JKLogLevel error
         JKMount /*.jsp JBoss1
         JKMount /servlet/* JBoss1
         JKMount /examples/* JBoss1
         JKMount /petstore/* loadbalancer
     </IfModule>
     ```

8. **Save the File**:
   - Save the `httpd.conf` file.

9. **Edit workers.properties File**:
   - Open the `workers.properties` file located in `/etc/httpd` using a text editor.
   - Modify the following lines:
     - Change line 2 to: `worker.list=loadbalancer`
     - Change line 8 to reference the first node: `worker.JBoss1.host=node1.mydomain.com`
     - Change line 12 to: `worker.JBoss1.cachesize=10`
     - Uncomment lines 26 through 28.
     - Change line 26 to: `worker.JBoss2.port=9007`
     - Change line 27 to reference the second node: `worker.JBoss2.host=node2.mydomain.com`
     - Change line 31 to: `worker.JBoss2.cachesize=10`
     - Add the following line to enable sticky sessions: `worker.loadbalancer.sticky_session=1`
   - Save the `workers.properties` file.

##### Enable Load Balancing in the Application Servers

For load balancing to work, each application server must report its existence to the web server. Follow these steps to configure the application servers:

1. **Open jboss-service.xml File**:
   - For clustered deployment, open the `jboss-service.xml` file located at `/Library/JBoss/3.2/deploy-cluster/deploy/jbossweb-tomcat41.sar/META-INF`.
   - For non-clustered deployment, open the `jboss-service.xml` file located at `/Library/JBoss/3.2/deploy-standalone/deploy/jbossweb-tomcat41.sar/META-INF`.

2. **Modify Configuration**:
   - Look for the following line and edit it as shown:
     ```xml
     <!-- <attribute name="jvmRoute">JBoss1</attribute> -->
     <attribute name="jvmRoute">JBoss1</attribute>
     ```
   - Remove the `<!--` and `-->` comments around the `jvmRoute` attribute.
   - Save the file.

3. **Repeat for Second Application Server**:
   - Repeat the above steps for the second application server, but set `jvmRoute` to `JBoss2`.

##### Test the Configuration

To verify that client requests are balanced among the application servers, follow these steps:

1. **Start the Web Service**:
   - Start the Web service on the web-server computer.

2. **Start Application Servers**:
   - Start the application server on each of the application-server computers and run the following commands on both:
     ```sh
     $ cd /Library/JBoss/Logs
     $ tail -f localhost_access.log
     ```

3. **Access the Application**:
   - On the web-server computer, connect to `http://<web-server>/petstore/index.jsp`. The first node should log an entry similar to:
     ```
     17.203.255.255 - - [26/Sep/2003:15:56:58 -0800] "GET /petstore/index.jsp HTTP/1.1" 200 2769
     ```

4. **Verify Load Balancing**:
   - Access the same URL from another computer. You should see a log entry in the second node's access log.

---

### Appendix A: Document Revision History

| Date          | Notes                                                                 |
|---------------|-----------------------------------------------------------------------|
| January 22, 2004 | Changed document from preliminary draft to final. Added note requiring a web browser to run the JBoss Deployment Tool. |
| October 22, 2003 | First version of Mac OS X Server Java Application Server Administration. |

### Glossary

- **Application Server**: A JBoss instance started through Server Admin.
- **CMP (Container-Managed Persistence)**: An enterprise bean persistence model where the J2EE container manages the persistence of enterprise-bean instances.
- **Deployment Tool**: An HTML-based application for configuring or assembling J2EE application or component archives.
- **EJB (Enterprise JavaBeans)**: A specification for developing and deploying data-based components in various platforms.
- **J2EE (Java 2, Enterprise Edition)**: A specification defining a platform for developing and deploying Web applications, including enterprise beans, servlets, and JSP pages.
- **JBoss**: An open-source Java-based application server capable of deploying J2EE-based applications, with additional features like clustering, session replication, mail, and security.
- **JMS (Java Message Service)**: A Java-based programming interface for asynchronous message exchange, part of the J2EE platform.
- **Management Tool**: An HTML-based application for modifying application-server configurations, viewing statistics, and managing services.
- **Pet Store**: A sample J2EE application from Sun Microsystems showcasing the J2EE platform.
- **Queue**: A JMS construct for point-to-point messaging, where messages can be received by only one application.
- **Server**: A computer running Mac OS X Server.
- **Topic**: A JMS distribution center type where messages are sent to topics and received by subscribing applications.

### Index

- **AJP Connector**
- **Application Servers**
- **Administering**
- **Configuring**
- **Creating a Data Source**
- **Creating a Queue**
- **Creating a Topic**
- **Deploying Applications**
- **Load Balancing**
- **Logging Activity**
- **Managing**
- **Monitoring**
- **Starting**
- **Starting and Stopping Services**
- **Application Settings Hyperlink**
- **Applications**
- **Configuring**
- **Deploying**
- **Clusters**
- **Distributable Applications**
- **Companion Files**
- **Components, Configuring**
- **CustomerJAR Module**
- **Data Sources, Creating**
- **Deploying Applications**
- **Deployment Configurations**
- **Cluster**
- **Development**
- **Standalone**
- **Deployment Tool**
- **Quick Config Pane**
- **Starting the**
- **EAR Files**
- **HTTP**
- **HTTP Sessions**
- **httpd.conf File**
- **HTTPS**
- **J2EE (Java 2, Enterprise Edition)**
- **JAR Files**
- **JBoss**
- **JBoss Management Console Window**
- **Load Balancing**
- **Replication Among Stateful Session Beans**
- **Session Replication**
- **Sticky Sessions**
- **Logging Activity**
- **Mac OS X Server**
- **Management Tool**
- **Logging In**
- **Managing Application Servers**
- **META-INF Directory**
- **mod_jk Plugin**
- **Monitoring Application Servers**
- **MySQL**
- **Configuring**
- **mysql Command-Line Tool**
- **NetInfo Manager**
- **Pet Store Application**
- **CatalogEJB Module**
- **Creating Database Tables**
- **CustomerJAR Module**
- **Deploying**
- **Downloading**
- **petstore.ear Archive**
- **AccountEJB**
- **AddressEJB**
- **Application-Wide Settings**
- **AsyncSenderEJB Module**
- **CatalogEJB Module**
- **ContactInfoEJB**
- **CounterEJB**
- **CreditCardEJB**
- **CustomerEJB**
- **CustomerJAR (EJB) Module**
- **Database**
- **Data-Source Mapping**
- **PetStoreWAR**
- **ProfileEJB**
- **Relationships**
- **SignOnJAR**
- **UserEJB**
- **petstore-destinations-service.xml File**
- **Queues, Creating**
- **Relationships**
- **SAR Files**
- **Server Admin**
- **Session Affinity (Sticky Sessions)**
- **Session Failover (Session Replication)**
- **Starting and Stopping Services**
- **Stateful Session Beans, Replication Among**
- **Statistics**
- **Sticky Sessions**
- **supplier.ear Archive**
- **AddressEJB**
- **Application-Wide Settings**
- **ContactInfoEJB**
- **InventoryEJB**
- **LineItemEJB**
- **OrderFulfillmentFacade**
- **SupplierEAR**
- **SupplierJAR**
- **SupplierOrderEJB**
- **SupplierOrderMDB**
- **SupplierPurchaseOrderJAR**
- **SupplierWAR**
- **Tomcat**
- **Topics, Creating**
- **WAR Files**
- **Watchdog Process**
- **WEB-INF Directory**
- **workers.properties File**