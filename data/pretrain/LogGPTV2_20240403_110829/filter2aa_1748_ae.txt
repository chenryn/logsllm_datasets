of the application’s WebApp window. Figure 6-1 shows the WebApp window of 
the petstore.ear archive.
Figure 6-1
The WebApp window of the petstore.ear archive
C H A P
T
E
R
6
Balancing User Load and Replicating Sessions
Load Balancing and Clustering
63
  Apple Computer, Inc. January 22, 2004
Load Balancing and Clustering
Load balancing provides a way to distribute user load among application servers. 
Clustering enables session failover when a node in a cluster becomes unavailable. 
Load balancing can be used with a group of standalone application servers or with 
a cluster or application server or nodes. This section describes a simple, three-
computer setup in which one computer runs the web server and balances user load 
among two application servers.
Start by stopping the Web service on the web-server computer and the application 
servers on the nodes. Then follow the steps described in the following sections.
Enable Load Balancing in the Web Server
Follow these steps to configure a computer as the web server and load balancer for 
a deployment:
1. Launch Server Admin, if it’s not already running.
2. Select Web in the Computers & Services list, and click Settings in the 
configuration pane.
3. Click the Modules tab and select “jk_module,” which is at the bottom of the 
modules list.
4. Click the Sites tab.
5. Double-click the appropriate site in the list (by default there’s only one), which 
should be enabled.
6. Click the Options tab, and deselect Performance Cache.
7. Click Save.
8. Open httpd.conf file, located in /etc/httpd, in a text editor.
9. Look for .
10. Add JKMount /petstore/* loadbalancer as the last item of the IfModule element.
The IfModule element should look similar to this:
64
Load Balancing and Clustering
  Apple Computer, Inc. January 22, 2004 
C H A P
T
E
R
6
Balancing User Load and Replicating Sessions
        JKWorkersFile /etc/httpd/workers.properties
        JKLogFile /var/log/httpd/mod_jk.log
        JKLogLevel error
        JKMount /*.jsp JBoss1
        JKMount /servlet/* JBoss1
        JKMount /examples/* JBoss1
        JKMount /petstore/* loadbalancer
11. Save the file.
12. Open the workers.properties file, which is also located in /etc/httpd, in a text 
editor.
The file as configured in Mac OS X Server is shown in Figure 6-2.
C H A P
T
E
R
6
Balancing User Load and Replicating Sessions
Load Balancing and Clustering
65
  Apple Computer, Inc. January 22, 2004
Figure 6-2
The workers.properties file in /etc/httpd
13. Change line 2 to:
worker.list=loadbalancer
66
Load Balancing and Clustering
  Apple Computer, Inc. January 22, 2004 
C H A P
T
E
R
6
Balancing User Load and Replicating Sessions
14. Change line 8 so that it references the first node. It should look similar to this:
worker.JBoss1.host=node1.mydomain.com
15. Change line 12 to:
worker.JBoss1.cachesize=10
16. Uncomment lines 26 through 28.
17. Change line 26 so that it looks like this:
worker.JBoss2.port=9007
18. Change line 27 so that it references the second node. It should look similar to 
this:
worker.JBoss2.host=node2.mydomain.com
19. Change line 31 to:
worker.JBoss2.cachesize=10
20. Add the following line to the file to enable sticky sessions:
worker.loadbalancer.sticky_session=1
21. Save the file.
Enable Load Balancing in the Application Servers
For load balancing to work, each application server has to report its existence to the 
web server. Follow these steps to configure the application-server so that they 
identify themselves to the web server:
1. Open the jboss-service.xml file, located at /Library/JBoss/3.2/deploy-
cluster/deploy/jbossweb-tomcat41.sar/META-INF, in a text editor.
For non-cluster deployment, open the jboss-service.xml file at /Library/JBoss/
3.2/deploy-standalone/deploy/jbossweb-tomcat41.sar/META-INF.
2. Look for the following line:
3. Edit the line so that it looks like this:
4. Look for the following lines:
C H A P
T
E
R
6
Balancing User Load and Replicating Sessions
Load Balancing and Clustering
67
  Apple Computer, Inc. January 22, 2004
5. Remove the !-- at the beginning of the first line and the -- and end of the last 
line while making sure to leave the left angle bracket and the right angle bracket 
in place.
6. Save the file.
7. Repeat steps 1 through 6 for the second application server, but set jvmRoute to 
"JBoss2" in step 3.
Test the Configuration
Follow these steps to make sure that client requests are balanced among the 
application servers:
1. Start the Web service in the web-server computer.
2. Start the application server in each of the application-server computers and run 
the following commands on both:
$ cd /Library/JBoss/Logs
$ tail -f localhost_access.log
3. In the web-server computer, connect to http:///petstore/
index.jsp. The first node should show a log entry similar to this:
17.203.255.255 - - [26/Sep/2003:15:56:58 -0800] "GET /petstore/index.jsp 
HTTP/1.1" 200 2769
4. Now, access the same URL from another computer. You should see a log entry 
in the second node.
68
Load Balancing and Clustering
  Apple Computer, Inc. January 22, 2004 
C H A P
T
E
R
6
Balancing User Load and Replicating Sessions
69
  Apple Computer, Inc. January 22, 2004
A P
P
E
N D I X
A  
A
Document Revision History
Table A-1 describes the revisions to this document.
Table A-1
Document revision history
Date
Notes
January 22, 
2004
Changed document from preliminary draft to ﬁnal. Added note per requiring a 
web browser to run the JBoss Deployment Tool.
October 22, 
2003
First version of Mac OS X Server Java Application Server Administration.
70
  Apple Computer, Inc. January 22, 2004 
A P
P
E
N D I X
A
Document Revision History
71
  Apple Computer, Inc. January 22, 2004
7
Glossary
application server
JBoss instance, which is 
started through Server Admin.
CMP (container-managed 
persistence)
Enterprise bean persistence 
model in which the J2EE container is 
responsible for persisting enterprise-bean 
instances to a data store and populating the 
fields of enterprise-bean instances when they 
are retrieved.
deployment tool
HTML-based application 
through which J2EE application or 
component archives can be configured or 
assembled in preparation for deployment in 
Mac OS X Server.
EJB (Enterprise JavaBeans)
Specification 
that provides an infrastructure through 
which data-based components can be 
developed and deployed in a variety of 
platforms.
J2EE (Java 2, Enterprise 
Edition)
Specification that defines a 
platform for the development and 
deployment of Web applications. It describes 
an environment under which enterprise 
beans, servlets, and JSP pages can share 
resources and work together.
JBoss
Java-based open-source application 
server capable of deploying J2EE-based 
applications. JBoss provides many useful 
features in addition those defined in the J2EE 
standard, including support for clustering, 
session replication, mail, and security.
JMS (Java Message Service)
Java-based 
programming interface that implements an 
asynchronous message-exchange system. It 
facilitates the development of message-based 
applications. JMS is part of the J2EE platform.
management tool
HTML-based 
application through which an application-
server configuration can be modified. It also 
allows for the viewing of statistics of 
resources and services deployed on 
application servers, starting and stopping 
services, and adding topics, queues, and data 
sources.
Pet Store
Pet Store is a sample J2EE 
application from Sun Microsystems, which 
showcases the power and flexibility of the 
J2EE platform.
queue
A queue is a JMS construct that 
allows for point-to-point messaging between 
applications. A message sent to a queue can 
be received by only one application. When 
several applications are subscribed to the 
queue, the messages are load balanced 
between the subscribers.
server
Computer running Mac OS X Server.
G
L O S
S
A R
Y
72
  Apple Computer, Inc. January 22, 2004
topic
Topics are one of the message 
distribution center types for J2EE-based 
applications. Message senders send 
messages only to topics instead of specific 
applications, while only the applications 
interested in receiving messages sent to a 
particular topic subscribe to the topic and, 
therefore, receive the messages sent to it. A 
topic can have one or more subscribers. Any 
message sent to the topic is broadcasted to all 
the topic’s subscribers.
73
Index
A
AJP connector 12
application servers 11
administering 47–60
conﬁguring 55
creating a data source 58
creating a queue 59
creating a topic 59
deploying applications 59
load balancing 12, 61, 63–67
logging activity 17
managing 48, 51–55
monitoring 48, 56
starting 15–17
starting and stopping services in 57
Application Settings hyperlink 21
applications
conﬁguring 15, 18–25
deploying 25, 45
in clusters 25, 61
loading 18
saving 24
validating 19
appserveradm group 48–50
appserverusr group 48–50
C
CatalogEJB module 22
clusters 61
conﬁguring 63–67
deploying applications in 25
distributable applications 61
companion ﬁles 10, 27, 28
components, conﬁguring 22–24
conﬁguring applications
petstore.ear 29–39
supplier.ear 39–45
CustomerJAR module 23
D
data sources, creating 58
deploying applications 25, 59, 61
deployment conﬁgurations
cluster 13
development 13, 17
standalone 13
deployment tool 11, 12
Application Settings hyperlink 21
Quick Conﬁg pane 22
starting the 18
E
EAR ﬁles 11
H
HTTP 12
HTTP sessions 13
httpd.conf ﬁle 63
HTTPS 12
J
J2EE (Java 2, Enterprise Edition) 11, 13
JAR ﬁles 11
I N D E X
74
JBoss 11, 12
JBoss Management Console window 55
L
load balancing 12, 61, 63–67
replication among stateful session beans 13
session replication 12
sticky sessions 12
logging activity 17
M
Mac OS X Server 12
management tool 11, 13
logging in 47
managing application servers 48, 51–55
META-INF directory 11, 15, 20
mod_jk plug-in 12
monitoring application servers 48, 56
MySQL
conﬁguring 28
mysql command-line tool 28
N
NetInfo Manager 49
P
Pet Store application 20, 27
CatalogEJB module 22
creating database tables 28
CustomerJAR module 23
deploying 45
downloading 28
petstore.ear archive 20, 21, 29–39
AccountEJB 35
AddressEJB 36
application-wide settings 31
AsyncSenderEJB module 31
CatalogEJB module 32
ContactInfoEJB 36
CounterEJB 39
CreditCardEJB 36
CustomerEJB 37
CustomerJAR (EJB) module 32
database 33
data-source mapping 33
PetStoreWAR 37
ProﬁleEJB 37
relationships 34
SignOnJAR 38
UserEJB 38
petstore-destinations-service.xml ﬁle 28
Q
queues, creating 59
R
relationships 34
S
SAR ﬁles 11
Server Admin 12
session afﬁnity. See sticky sessions
session failover. See session replication
session replication 12, 61
starting and stopping services 57
stateful session beans, replication among 13
statistics 13
sticky sessions 12
supplier.ear archive 39–45
AddressEJB 42
application-wide settings 40
I N D E X
75
ContactInfoEJB 43
InventoryEJB 41
LineItemEJB 43
OrderFulﬁllmentFacade 41
SupplierEAR 40
SupplierJAR 40
SupplierOrderEJB 44
SupplierOrderMDB 41
SupplierPurchaseOrderJAR 42
SupplierWAR 44
T
Tomcat 12
topics, creating 59
W
WAR ﬁles 11
watchdog process 12
WEB-INF directory 11, 15, 20
workers.properties ﬁle 64
76