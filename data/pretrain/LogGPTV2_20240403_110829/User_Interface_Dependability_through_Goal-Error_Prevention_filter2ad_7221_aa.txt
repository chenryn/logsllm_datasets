# User Interface Dependability through Goal-Error Prevention

**Authors:**
Robert W. Reeder and Roy A. Maxion

**Contact:**
PI:EMAIL and PI:EMAIL

**Affiliation:**
Dependable Systems Laboratory  
Computer Science Department  
Carnegie Mellon University  
Pittsburgh, Pennsylvania 15213, USA

## Abstract
User interfaces (UIs) are a critical link between humans and computers. When an interface fails, the user's ability to complete tasks is compromised, potentially leading to mission failure. In computer security applications, for instance, human-made configuration errors can expose entire systems to various forms of attack.

To ensure interaction success, a dependable UI must facilitate the swift and accurate completion of user tasks. Defects in the interface can lead to user errors, such as goal, plan, action, and perception errors, which can impede speed and accuracy, ultimately resulting in mission failure. One significant source of user error is poor information representation in the UI, which can cause users to commit goal errors. This paper introduces a design principle, anchor-based subgoaling, aimed at mitigating this issue. The principle was evaluated in the context of setting Windows file permissions. The native Windows XP file permissions interface, which did not support anchor-based subgoaling, was compared to an alternative, called Salmon, which did. An experiment with 24 users showed that Salmon achieved up to a four-fold increase in accuracy for a representative task and a 94% reduction in the number of goal errors committed, compared to the XP interface.

## 1. Introduction
The user interface (UI) is a critical component of a computer system's dependability. Undependable UIs fail to meet their specifications in terms of the speed and accuracy with which users should complete tasks. Human error is a common reason for these failures. Researchers have long recognized that human error has consistent causes and manifestations across various domains, from aviation to power plant operation [13, 15, 17, 21]. In software UIs, human error can lead to task delays or partial or total task failure. Therefore, it is essential for designers to understand the types and causes of human error and how to prevent them. Interfaces designed to eliminate the conditions that lead to mistakes will be more dependable.

In the domain of computer security, UI accuracy is particularly crucial. Inaccurate security settings can make sensitive data vulnerable or leave an entire system open to attack. Security issues often have what Whitten and Tygar [20] call the "barn door property" – once a vulnerability has existed, it may be impossible to determine if it has been exploited, so the system must be considered compromised.

This work investigates UI dependability and human error in the context of setting file permissions under Microsoft’s Windows XP operating system, which uses the NT File System (NTFS). Setting NTFS file permissions is known to be error-prone. For example, the "Memogate" scandal involved staffers from one party on the United States Senate Judiciary Committee stealing confidential memos from the opposing party due to incorrect permission settings [19]. Similarly, a network administrator at Carnegie Mellon University reported that many users accidentally make their private files accessible to all network users because setting permissions is confusing [18]. Microsoft also advises against using certain features of the NTFS permissions model, as they can cause unexpected access problems or reduce security [10].

Given these issues, setting and checking permissions cannot always be left to expert system administrators. Users in many environments need or want to take responsibility for protecting their own data. However, setting file permissions is not an everyday task, and users may not remember the details of the interface. This paper reports an investigation into and a solution for one type of human error in permission-setting interfaces. The existing Windows XP File Permissions interface (XPFP) had accuracy rates as low as 25% on permission-setting tasks. Errors were categorized, and goal errors, where users fail to understand what to do, were identified as the dominant type. A primary cause of goal errors was poor external representation of necessary information. A design principle, anchor-based subgoaling, was proposed to reduce goal errors and implemented in a new interface called Salmon. The principle was evaluated in a laboratory study, showing that Salmon achieved a 100% success rate on the task where XPFP had only 25% accuracy and a 94% reduction in goal errors.

## 2. Problem and Approach
The objective of this work is to understand the causes of user error in UIs, specifically in the XPFP, and to determine how to mitigate or eliminate these errors. It also aims to find a design principle that can be applied to future UIs to prevent recurring user errors.

A visual inspection and informal use of the XPFP interface revealed that necessary information for completing tasks accurately was either hidden or missing. Cognitive theory suggests that without ready access to necessary information, users are likely to commit goal errors (see Section 5.1). To address this, a solution called anchor-based subgoaling was proposed. The hypothesis was that using anchor-based subgoaling in UI design would reduce the likelihood of goal errors and improve task accuracy rates.

This hypothesis was tested by implementing the Salmon interface, designed according to the anchor-based subgoaling procedure, and conducting a laboratory user study comparing the XPFP interface to Salmon. Task success rates and goal-error occurrences were compared to determine the effectiveness of anchor-based subgoaling in improving task completion and reducing goal errors.

## 3. Related Work
File permissions are part of the broader area of access control, and several authors have published related work. Good and Krekelberg [7], Long et al. [9], and Zurko et al. [24] have evaluated interfaces for setting file access. While these studies provided insights into specific task domains, they did not lead to general design principles for security interfaces.

Other work in usable access control includes Balfanz [2], Sampemane et al. [16], and Dewan and Shen [5]. These works primarily outline access control models rather than evaluating interfaces, as this study does.

In the broader human-computer interaction and security literature, authors such as Whitten and Tygar [20], Adams and Sasse [1], Besnard and Arief [3], Zurko and Simon [25], and Yee [23] have proposed principles for better security interface design. However, these ideas have not been empirically evaluated and are not grounded in cognitive theory.

The most closely related concept in traditional human-computer interaction literature to anchor-based subgoaling is the concept of feedback. Norman defines feedback as "sending back to the user information about what action has actually been done, what result has been accomplished" [13]. Both Norman and Nielsen include feedback as an important UI design principle [12, 13], but they do not explain how to ensure adequate feedback. Anchor-based subgoaling provides an actionable procedure to ensure that necessary information is provided in the interface.

## 4. Problem in Context
The problem of poor external representation is evident in the Windows XP file permissions interface (XPFP). Users maintain mental models of tasks that may be incorrect or incomplete. During task performance, they update their models with perceived external information. For an interface to be robust to inaccurate mental models, it must provide the necessary information for users to properly update their models and present this information in a perceivable way. The XPFP interface hides or omits much of the necessary information, while the Salmon interface prominently displays it, requiring only a minimal internal representation.

To understand the information lacking in the XPFP interface and present in Salmon, some background on the NTFS permissions model is necessary. A computer system using NTFS contains entities (individual users and groups) and objects (files and folders). NTFS defines 13 atomic permissions corresponding to actions users can perform on files and folders. These permissions can be grouped into five disjoint sets: READ, WRITE, EXECUTE, DELETE, and ADMINISTRATE. Only READ, WRITE, and ADMINISTRATE are relevant to this study. ADMINISTRATE permission allows an entity to change its own permissions, even if it is denied other permissions.

NTFS uses an Access Control List (ACL) model for file permissions. Each file and folder has an associated list of users and groups with permissions. An entry in this list, called an access control entry, has a setting for each atomic permission, which can be ALLOW, DENY, or NOTSET. NOTSET acts as a default DENY but can be overridden by an ALLOW setting. Group inheritance means that if a group has permissions on an object, all members inherit those permissions. Conflicts between explicit and inherited permissions are resolved by precedence rules, where DENY takes precedence over ALLOW, and ALLOW takes precedence over NOTSET.

Understanding these concepts is crucial for designing an effective and dependable UI for setting file permissions.