PE格式详解
概述
 PE文件的全称为Portable Executable，是windows操作系统下可执行文件的一种文件格式，符合
COFF标准(Common Object File Format:https://en.wikipedia.org/wiki/COFF)，除了我们常见的exe文
件，像windows下的动态链接库文件(.dll)，内核驱动(.srv)，控制面板文件(.cpl)等都属于PE文件。
 PE文件是一种数据结构，里面包含了OS加载程序能够把它加载到内存中并运行的所需的信息。
结构预览
 一个典型的PE结构如下图所示：
 如果使用PEbear(https://github.com/hasherezade/pe-bear-releases)打开一个可执行文件，我们能
够看到相同的结构：
DOS Header
 每个PE文件都以一个64字节的结构开头，称为DOS Header，它使得PE文件成为windows下的可执行
文件。
DOS Stub
 在DOS Header之后便是DOS Stub，它是一个小的MS-DOS 2.0下面的可执行文件，当文件以DOS模
式运行时会打印一串错误信息：“This program cannot be run in DOS mode”
NT Headers
 NT Header主要有下面几个部分组成：
PE signature ： 将文件标识为PE文件的一个四字节的签名
File Header：标准COFF头，里面包含了一些有关PE文件的信息
Optional Header:  NT Header中最重要的部分，该头为系统加载提供信息。
Section Table
 跟在NT Header之后，其为一个数组，PE 文件中的每个节都有一个节标题。每个标题都包含有关它所
引用的部分的信息。
Sections
 节是存储文件实际内容的地方，包括程序使用的数据和资源等内容，以及程序的实际代码，有几个
节，每个节都有自己的用途。
 下面是每个部分的详细介绍。
DOS Header
结构
 如前文所说，其为一个64字节长度的结构，其定义在winnt.h中，名为IMAGE_DOS_HEADER：
 下面是一些比较重要部分的介绍：
e_magic： 它是DOS Header的第一个成员，数据类型为WORD，所以占2字节，其拥有一个固定
的ASCII值0x5A4D或MZ，其作用为将文件标识为可执行文件。
e_lfanew：它是DOS Header的最后一个成员，位于DOS头的0x3c偏移处，它保存了到NT 
Header的偏移量，它告诉加载器去哪里寻找文件头。
 在PEbear下显示如下：
typedef struct _IMAGE_DOS_HEADER {      // DOS .EXE header
    WORD   e_magic;                     // Magic number
    WORD   e_cblp;                      // Bytes on last page of file
    WORD   e_cp;                        // Pages in file
    WORD   e_crlc;                      // Relocations
    WORD   e_cparhdr;                   // Size of header in paragraphs
    WORD   e_minalloc;                  // Minimum extra paragraphs needed
    WORD   e_maxalloc;                  // Maximum extra paragraphs needed
    WORD   e_ss;                        // Initial (relative) SS value
    WORD   e_sp;                        // Initial SP value
    WORD   e_csum;                      // Checksum
    WORD   e_ip;                        // Initial IP value
    WORD   e_cs;                        // Initial (relative) CS value
    WORD   e_lfarlc;                    // File address of relocation table
    WORD   e_ovno;                      // Overlay number
    WORD   e_res[4];                    // Reserved words
    WORD   e_oemid;                     // OEM identifier (for e_oeminfo)
    WORD   e_oeminfo;                   // OEM information; e_oemid specific
    WORD   e_res2[10];                  // Reserved words
    LONG   e_lfanew;                    // File address of new exe header
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;
最后一个位置的成员的值为100，100处就是NT Header的初始位置：
DOS Stub
由上文可知，该部分并无实际意义。提取后如下：
保存为exe文件，使用IDA打开显示如下：
0E 1F BA 0E 00 B4 09 CD 21 B8 01 4C CD 21 54 68 69 73 20 70 72 6F 67 72 61 6D 20 
63 61 6E 6E 6F 74 20 62 65 20 72 75 6E 20 69 6E 20 44 4F 53 20 6D 6F 64 65 2E 0D 
0D 0A 24 00 00 00 00 00 00 00
记得以16位模式打开：
其中：
这里的9属于DOS-API的内容，作用为： Display string，详细请看：https://en.wikipedia.org/wiki/DO
S_API 下面的代码内容大同小异，总而言之就是打印错误信息，并返回1。
Rich Header
这个位于DOS Stub与NT Header之间，只存在于使用VS编译的可执行文件之中。
该数据为XOR后的数据，解密时需要使用Checksum的值进行解密即：c1d709d7，该区域并无什么具体
意义，可以直接清空，不影响运行，手工揭秘可以参考：https://github.com/kirschju/richheader
总结下来就是：
seg000:0002                 mov     dx, 0Eh
seg000:0005                 mov     ah, 9
seg000:0007                 int     21h             ; DOS - PRINT STRING
seg000:0007                                         ; DS:DX -> string terminated 
by "$"
NT Header
NT Headers (IMAGE_NT_HEADERS)
其结构体称为IMAGE_NT_HEADERS，分别有32位和64位版本，分别如下：
Signature
IMAGE_NT_HEADERS结构体的第一个字段，其为一个DWORD，占四个字节，其总为一个固定值，
0x50450000,即PE签名。
File Header (IMAGE_FILE_HEADER)
也被称为COFF文件头，其结构体定义如下：
其包含了7个字段，简单介绍一下每个成员的含义：
typedef struct _IMAGE_NT_HEADERS64 {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;
typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;
typedef struct _IMAGE_FILE_HEADER {
    WORD    Machine;
    WORD    NumberOfSections;
    DWORD   TimeDateStamp;
    DWORD   PointerToSymbolTable;
    DWORD   NumberOfSymbols;
    WORD    SizeOfOptionalHeader;
    WORD    Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
Machine：该字段主要表示文件所针对的机器类型，比如0x8864 是64位，0x14c 是32位，其他的
值可以参考：https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#machine-t
ypes
NumberOfSections：节表数，也就是节表的大小
TimeDateStamp：文件创建的时间戳
PointerToSymbolTable and NumberOfSymbols：这两个字段为COFF相关的信息，一般为0，
因为COFF调试信息已经被弃用。
SizeOfOptionalHeader：OptionalHeader的大小
Characteristics：文件属性标识，详细信息如下：https://docs.microsoft.com/en-us/windows/
win32/debug/pe-format#characteristics
其在PEbear显示如下：
Optional Header (IMAGE_OPTIONAL_HEADER)
 Optional Header 是 NT 头文件中最重要的头文件，PE 加载器会查找该头文件提供的特定信息，以便
能够加载和运行可执行文件。
之所以称为可选标头，是因为某些文件类型（如目标文件）没有它。它没有固定的大小，这就是
IMAGE_FILE_HEADER.SizeOfOptionalHeader成员存在的原因。
 其也存在32位和64位不同版本的结构体，IMAGE_OPTIONAL_HEADER32有 31 个成员，而
IMAGE_OPTIONAL_HEADER64只有 30 个成员，且像下面的字段数据类型也不相同，32位的是
DWORD，64位的是ULONGLONG  
ImageBase
SizeOfStackReserve
SizeOfStackCommit
SizeOfHeapReserve
SizeOfHeapCommit
64：
typedef struct _IMAGE_OPTIONAL_HEADER {
    //
    // Standard fields.
    //
    WORD    Magic;
    BYTE    MajorLinkerVersion;
    BYTE    MinorLinkerVersion;
    DWORD   SizeOfCode;
    DWORD   SizeOfInitializedData;
    DWORD   SizeOfUninitializedData;
    DWORD   AddressOfEntryPoint;
    DWORD   BaseOfCode;
    DWORD   BaseOfData;
    //
    // NT additional fields.
    //
    DWORD   ImageBase;
    DWORD   SectionAlignment;
    DWORD   FileAlignment;
    WORD    MajorOperatingSystemVersion;
    WORD    MinorOperatingSystemVersion;
    WORD    MajorImageVersion;
    WORD    MinorImageVersion;
    WORD    MajorSubsystemVersion;
    WORD    MinorSubsystemVersion;
    DWORD   Win32VersionValue;
    DWORD   SizeOfImage;
    DWORD   SizeOfHeaders;
    DWORD   CheckSum;
    WORD    Subsystem;
    WORD    DllCharacteristics;
    DWORD   SizeOfStackReserve;
    DWORD   SizeOfStackCommit;
    DWORD   SizeOfHeapReserve;
    DWORD   SizeOfHeapCommit;
    DWORD   LoaderFlags;
    DWORD   NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;
typedef struct _IMAGE_OPTIONAL_HEADER64 {
    WORD        Magic;
    BYTE        MajorLinkerVersion;
    BYTE        MinorLinkerVersion;
    DWORD       SizeOfCode;
下面是一些字段的含义：
Magic：标识文件属性，比如0x10B为0x10B，0x20B为PE32+、0x107为ROM 。
MajorLinkerVersion MinorLinkerVersion：标识链接器的主次版本号。
SizeOfCode：.text部分的大小，如果有多个.text则为总和
SizeOfInitializedData：已初始化.data部分的大小，如果有多个.data则为总和
SizeOfUninitializedData：未初始化.bss部分的大小，如果有多个.bss则为总和
AddressOfEntryPoint：文件加载到内存时入口点的RVA，若没有入口点则为0。
BaseOfCode：文件加载到内存之后代码部分开始的RVA
BaseOfData：文件加载到内存之后数据部分开始的RVA，仅限32位
ImageBase：该字段因为ASLR(地址随机化)的存在一般不使用
SectionAlignment：用于节对其，其不能小于FileAlignment
FileAlignment：用于磁盘上原始数据的对齐，也就是文件对齐
ajorOperatingSystemVersion, MinorOperatingSystemVersion, MajorImageVersion, 
MinorImageVersion, MajorSubsystemVersionand MinorSubsystemVersion：各类版本号
Win32VersionValue：保留字段
SizeOfImage：文件大小
SizeOfHeaders：Header部分的大小
CheckSum：文件校验
Subsystem：运行所需的子系统，
DLLCharacteristics：定义可执行文件的一些特征。
SizeOfStackReserve、SizeOfStackCommit、SizeOfHeapReserve和SizeOfHeapCommit：关于
堆栈的一些内容
    DWORD       SizeOfInitializedData;
    DWORD       SizeOfUninitializedData;
    DWORD       AddressOfEntryPoint;
    DWORD       BaseOfCode;
    ULONGLONG   ImageBase;
    DWORD       SectionAlignment;
    DWORD       FileAlignment;
    WORD        MajorOperatingSystemVersion;
    WORD        MinorOperatingSystemVersion;
    WORD        MajorImageVersion;
    WORD        MinorImageVersion;
    WORD        MajorSubsystemVersion;
    WORD        MinorSubsystemVersion;
    DWORD       Win32VersionValue;
    DWORD       SizeOfImage;
    DWORD       SizeOfHeaders;
    DWORD       CheckSum;
    WORD        Subsystem;
    WORD        DllCharacteristics;
    ULONGLONG   SizeOfStackReserve;
    ULONGLONG   SizeOfStackCommit;
    ULONGLONG   SizeOfHeapReserve;
    ULONGLONG   SizeOfHeapCommit;
    DWORD       LoaderFlags;
    DWORD       NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;
LoaderFlags：保留字段
NumberOfRvaAndSizes ：DataDirectory的大小
DataDirectory：一个IMAGE_DATA_DIRECTORY数组
其文件对其为200，可以在.data处看到：
Data Directories
数据目录，其为Optional Header的最后一个部分，是IMAGE_DATA_DIRECTORY定义的一个数组，一般
其 IMAGE_NUMBEROF_DIRECTORY_ENTRIES为16。
其结构如下：
这是一个非常简单的结构，只有两个成员，第一个是指向数据目录开头的 RVA，第二个是数据目录的大
小。数据目录是位于 PE 文件的一个部分中的一段数据。 
数据目录包含加载程序所需的有用信息，一个非常重要的目录示例是导入目录，其中包含从其他库导入
的外部函数列表，并非所有的数据目录都拥有相同的结构，但目录类型决定了该如何解析这些数据块
#define IMAGE_NUMBEROF_DIRECTORY_ENTRIES 16 
typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD   VirtualAddress;
    DWORD   Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;
// Directory Entries
#define IMAGE_DIRECTORY_ENTRY_EXPORT          0   // Export Directory
#define IMAGE_DIRECTORY_ENTRY_IMPORT          1   // Import Directory
#define IMAGE_DIRECTORY_ENTRY_RESOURCE        2   // Resource Directory
#define IMAGE_DIRECTORY_ENTRY_EXCEPTION       3   // Exception Directory
#define IMAGE_DIRECTORY_ENTRY_SECURITY        4   // Security Directory