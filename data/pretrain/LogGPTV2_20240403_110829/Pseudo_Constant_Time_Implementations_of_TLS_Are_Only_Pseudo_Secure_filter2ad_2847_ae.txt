the matching ciphertext blocks in the resulting TLS record, and let C∗
−1 denote the
preceding ciphertext block.
0 , . . . , C∗
The attack TLS record is then constructed as:
−1 ⊕ ∆||C∗
HDR||L||C∗
0|| . . .||C∗
15
where HDR is a suitable header, L is a long random block sequence that brings the TLS
record up to the maximum size, and ∆ is a mask with bytes:
δ||(“\r” ⊕ 0xFF)||(“\n” ⊕ 0xFF)||0x00|| . . .||0x00.
Here, the ﬁrst mask byte creates a value p∗⊕δ in the ﬁrst position of the block decrypt-
ing C∗
0 , while the second and third mask bytes force values 0xFF in the corresponding
positions. Clearly, when decrypted, this TLS record will have correct padding of length
256 if and only if p∗ ⊕ δ = 0xFF. The attacker then uses TLS records of this form with
distinct values of δ in the attack of Algorithm 5; after 128 attempts on average and
256 in the worst case, the value of δ producing correct padding will be identiﬁed.
This description explains how to recover the last byte of the cookie. Further bytes
can be recovered by shifting the position of the cookie by altering the length of the
pathname in the HTTP request so that the last 2, 3, . . . bytes are present at the start
of the block underlying C∗
0 . We also update ∆ as needed to force correct padding 0xFF
in all but the ﬁrst byte of this block. This approach will recover up to 14 bytes of the
cookie; the remaining bytes seems to remain inaccessible using these techniques (trying
to extend further would push the “\r” and “\n” characters into the next block, where
they could not be turned into correct padding by XOR masking).
We close this description by noting that the above attack with long padding patterns
can be applied to the original Lucky 13 setting, quadrupling the timing diﬀerences there
and so making them substantially easier to detect (at the cost of limiting how much
plaintext can be recovered). This enhancement to Lucky 13 seems to have been missed
by the authors of [3], though they used a similar idea in their distinguishing attack.
6.4 Proof of Concept for synchronized prime PRIME+PROBE attack
We implemented a PoC for the above attack for wolfSSL, to verify the presence of
the cache side-channel. We ran our attack on an Intel(R) Core(TM) i7-7500U CPU
20
Eyal Ronen, Kenneth G. Paterson, and Adi Shamir
@ 2.70GHz running Ubuntu 17.10. We used the version 3.14 code taken from the
master branch of the oﬃcial git repository on 20/4/2018 (commit hash 7d425a5c), and
compiled with the provided make ﬁles and GCC version 7.2.0.
wolfSSL code The TLS record veriﬁcation is done in function TimingPadVerify (see
Listing 1.5 in Appendix A). First, the padding is checked by the function PadCheck. If
the padding check fails, the branch taken by the code implicitly assumes PadLen = 0
and HMAC is calculated over the whole TLS record excluding the last byte (that is
assumed to be the minimal length padding). However, if the padding is valid, HMAC
is calculated on the TLS record excluding all of the padding bytes. To achieve constant
time, the extra compression function CompressRounds is called. However, this is done
with the dummy array, which points to the start of the ssl context. So in case of valid
padding the last bytes of the TLS record are not accessed.
Attack results We prepared two types of decrypted TLS records. The ﬁrst one with
256 bytes of valid padding and the second one being identical, except for the ﬁrst byte
of padding which was changed to a diﬀerent value. We called the TimingPadVerify
function multiple times with both types of data. Before each call to the function,
another “attack” thread was run in parallel to perform the cache priming during the
HMAC veriﬁcation. After the function returned, we checked if the cache line of the last
bytes in the TLS record is in the cache or not. For TLS records with valid padding we
saw a hit probability of ≈ 0.025. For TLS records with invalid padding we saw a hit
probability of ≈ 0.998. Using the same calculations as in Appendix 5.3 this translates
to n = 4 and an expected total number of TLS connections of 512 per byte.
mbed TLS The same vulnerability also applies to the mbed TLS code in function
ssl_decrypt_buf (see Listing 1.8 in Appendix A). If the padding is invalid the func-
tion sets the variable padlen to 0. For constant time, the extra compression function
mbedtls_md_process is called multiple times with pointer in_msg pointing to the start
of the TLS record.
GnuTLS The same vulnerability also applies to the GnuTLS code in function decrypt_packet
(see Listing 1.4 in Appendix A). If the padding is invalid the function sets pad to 0.
For constant time, extra compression functions are executed via dummy_wait (see List-
ing 1.3 in Appendix A). If the padding was invalid, the function does nothing and
returns. If the padding was valid, but the HMAC veriﬁcation fails, the extra compres-
sion function gnutls auth cipher add auth is called multiple times with the pointer
data, pointing to the start of the TLS record.
Note that unlike other implementations, the extra compression functions are only
called when the veriﬁcation process fails, so the decryption time on valid messages is
not constant. This may leak the real size of the encrypted messages, but cannot be
used to recover plaintext bytes.
7 A Cache-Based Padding Oracle in the mbed TLS
Implementation
We will describe another novel attack on mbed TLS targeting the inner hash function
execution in HMAC. This attack is more robust than the one described in Section 6
Pseudo Constant Time Implementations of TLS Are Only Pseudo Secure
21
as it does not require the synchronization between the attack and target code. At
ﬁrst we will describe a simpliﬁed version that assumes a small cache line size. The
full “PostFetch” attack will show how we can deal with modern cache line sizes and
memory prefetching. Our attack works on HMAC with both SHA-384 and SHA-256,
even if the bug described in Appendix 3.2 is ﬁxed.
7.1 Attack Preliminaries
HMAC makes two hashing passes over its input message, which we refer to as the inner
and outer hashes. The inner hash processes a string of the form K1||M to produce a
hash value h; the outer hash processes an input K2||h. Here K1, K2 are keys derived
from a single key by XOR oﬀsets and M is the message input. The hash functions used
in HMAC in TLS are based on the Merkle-Damg˚ard construction [28]. This construction
pads the message being processed to a multiple of the hash function’s block size. The
usual hash function padding scheme is to always add the byte 0x80 and then zero bytes
up to the required length.10
In mbed TLS the hash padding is implemented by deﬁning a constant array con-
taining the maximum possible length hash padding pattern, and passing this array
with the required padding length to the hash update function (see Listing 1.7 in Ap-
pendix A; SHA-384 is simply a truncated output of SHA512). Our cache attack targets
the access pattern to this constant array to create a padding oracle. A maximum hash
padding length will cause the entire array to be saved in the cache, while a short hash
padding will cause only the beginning of the array to be saved in the cache. To check if
parts of the array are in the cache or not we can use cache attacks that exploit shared
memory pages. If the attack code runs on the same core as the target code we can use
a simple PRIME+PROBE attack on the L1 cache [30]. However, if the code runs on
diﬀerent cores (as is the case in most cross-VM attacks) we can use more advanced
cross-core attacks [23,16,21]. For brevity and without loss of generality we will use the
PRIME+PROBE notation.
7.2 Hash Padding Length for SHA-384
For the inner hash calculation of HMAC-SHA-384, the length of the hash padding for
an encrypted message with length EncMsgLen is calculated in the following way:
HashLen = InnerHashKeyLen + SeqNumLen + HdrLen
+ EncMsgLen − MacLen − IVLen − PadLen − 1
= 128 + 8 + 5 + EncMsgLen − 48 − 16 − PadLen − 1
= EncMsgLen + 76 − PadLen,
hence:
HashPadLen = 112 − HashLen mod 128
= 36 − EncMsgLen + PadLen mod 128
(1)
Note that if HashPadLen = 0 mod 128 then HashPadLen = 128.
The length of the hash padding for the outer hash calculation in HMAC-SHA-384 is
10 This hash padding is distinct from the padding added by TLS in CBC-mode and which is
actually transmitted as part of TLS records.
22
Eyal Ronen, Kenneth G. Paterson, and Adi Shamir
calculated via:
HashLen = OuterHashKeyLen + HashLen = 128 + 48 = 176
HashPadLen = 112 − HashLen mod 128 = 64
So the the number of hash padding bytes accessed in the HMAC calculation is given
by:
HashPadLen = max(36 − EncMsgLen + PadLen mod 128, 64)
7.3 Hash Padding Length for SHA-256
For the inner hash calculation of HMAC based on SHA-256, the length of the hash
padding for an encrypted message with length EncM sgLen is calculated in the follow-
ing way:
HashLen = InnerHashKeyLen + SeqNumLen + HdrLen
+ EncMsgLen − MacLen − IVLen − PadLen − 1
= 64 + 8 + 5 + EncMsgLen − 32 − 16 − PadLen − 1
= EncMsgLen + 28 − PadLen,
hence:
HashPadLen = 56 − HashLen mod 64
= 28 − EncMsgLen + PadLen mod 64
Note that if HashPadLen = 0 mod 64 then HashPadLen = 64.
For the outer hash calculation of HMAC-SHA-256, we have:
(2)
HashLen = OuterHashKeyLen + HashLen = 64 + 32 = 96
HashPadLen = 56 − HashLen mod 64 = 24
So the number of hash padding bytes accessed in the HMAC calculation is given by:
HashPadLen = max(28 − EncMsgLen + PadLen mod 64, 24)
7.4 Simpliﬁed Attack
The simpliﬁed attack on mbed TLS is described in Algorithm 6. The start of the pad
array is always accessed by the outer hash calculation of HMAC. We prime a cache
set that contains the array at an oﬀset, targeting the ﬁrst cache line that is not always
accessed (oﬀset of 64 for SHA-384 and 32 for SHA-256). We send the attacker’s TLS
record to the target, and then probe the cache set. If the cache set was accessed, then
with high probability HashPadLen > 64 (32 for SHA-256). Otherwise we know that
HashPadLen ≤ 63 (31 for SHA-256). From this we can infer a possible range for the
value of PadLen. Using the attack described in Section 6.3 we can create a padding
oracle to distinguish between invalid padding of length PadLen = 0, and a large padding
value.
For this simpliﬁed attack to work, we need the following assumptions to hold:
1. The cache line size is 32.
2. The padding array is aligned with the cache line.
3. There are no prefetching optimizations used.
Clearly these assumptions are unrealistic, and we show next how they can be relaxed.
Pseudo Constant Time Implementations of TLS Are Only Pseudo Secure
23
ProbeOﬀset ← 64
Prime shaX padding + ProbeOﬀset
Send attacker’s TLS record to target
if Probe(shaX padding + ProbeOﬀset) then
Algorithm 6 mbed TLS – Simpliﬁed Attack
1: function SimplifiedMbedPadOracle(attack msg)
2:
3:
4:
5:
6:
7:
8:
9:
10: end function
return 1
else
end if
return 0
(cid:46) 32 for SHA-256
(cid:46) evict from cache
(cid:46) last part of the array was accessed
(cid:46) last part of the array was not accessed
7.5 Full “PostFetch” Attack
The full “PostFetch” attack is the same as the one described in Algorithm 6, but the way
that we choose the values of ProbeOﬀset and the resulting condition on HashPadLen
are diﬀerent. This is due to the following real world conditions:
1. In most modern CPUs, the cache line size is 64 bytes. This makes the simpliﬁed
attack on SHA-256 impractical.
2. The padding array is not always aligned with a 64-byte cache line. As the alignment
keyword is not used in the array declaration, it can vary from compilation to compi-
lation. On our test platform, the padding arrays were either aligned to a cache line,
or had a 32-byte oﬀset. The alignment was changed between compilations by minor
code changes (e.g. adding or removing a printf function call).
3. In the hash implementation, the padding array is always copied to the hash function’s
internal buﬀer using the memcpy function. Due to the cache line size the array is read
into the cache in cache line resolution even if just a single byte in the cache line has
been accessed. On our test platform, we observed that the bytes after the array are
also read into to cache (the next cache line), if we read a large enough part of the
array (near the end of the cache line). For example, if the SHA-384 padding array
is aligned to the cache line, the outer hash call of HMAC (that uses a hash padding
of length 64) will cause a cache hit on the next cache line, so the entire 128 bytes
padding array will be in the cache regardless of the TLS record padding length. This
causes the simpliﬁed attack on SHA-384 to also become impractical.
Although each of the above conditions can cause our attack to fail, the combination
of these conditions actually allows the attacks to work! Instead of probing the cache
line at an oﬀset ProbeOﬀset = 64 (32 for SHA-256), we probe the next cache line using
ProbeOﬀset = 128 (64 for SHA-256). In fact we probe a memory location that is just
after the padding array itself. In some cases this memory location will be read into the
cache due to either hardware memory prefetching mechanism or speculative execution.
For our attack to work we require that the probed memory location is not accessed by
any other code in the veriﬁcation process. As we will show, this is indeed the case in
mbed TLS (see Appendix 7.7.
In case the hash padding array is aligned to the cache line, the last cache line for
the array will be always accessed due to the memcpy call in the outer hash of HMAC.
However the cache line after that will not be accessed, unless we read most of the
bytes of the padding array (a very large value of HashPadLen). In case the array has
a 32-byte oﬀset to the cache line, the cache line at location ProbeOﬀset = 128 (64 for
24
Eyal Ronen, Kenneth G. Paterson, and Adi Shamir
Array oﬀset Hash Padding Cache Hit
function from cache line length range probability
≈ 0.026
SHA-384
≈ 0.998
SHA-384