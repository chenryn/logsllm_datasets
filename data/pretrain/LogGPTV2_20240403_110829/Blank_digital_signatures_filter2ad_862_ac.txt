the corresponding private key skTi
P . In this game, A wins if he outputs valid forgeries of type T1, T2
or M1, M2b.
Deﬁnition 12 (Immutability). A BDSS is called immutable, if for any polynomial-time algorithm
A the probability of winning Game 2 is negligible as a function of security parameter κ.
Privacy Privacy captures that any veriﬁer except for the originator and the proxy, which is given
a signature for a template instantiation M of a non-trivial template T , can not gain any informa-
tion about M and thereby learn about T . This means that even if all but one choice of a single
exchangeable element has been revealed no veriﬁer should be able to gain complete knowledge of T .
This is formalized in Game 3.
Deﬁnition 13 (Privacy). A BDSS is called private, if for any polynomial-time algorithm A the
probability of winning Game 3 is negligibly close to 1/2 as a function of security parameter κ
and unconditionally private, if for any computationally unbounded algorithm A the probability of
winning Game 3 is 1/2.
Setup: The challenger C runs KeyGen(κ, t) to obtain pp. Furthermore, C runs DKeyGen(κ) of a secure
digital signature scheme twice to generate (dskO, dpkO) and (dskP, dpkP). It gives the adversary A the
resulting public parameters and keys pp, dpkO and dpkP and keeps the private keys dskO and dskP to
itself.
Query: The adversary A has access to a template signing oracle OT and access to a message signing oracle
OM. Both oracles are simulated by the challenger C.
– On receiving a template signing query Ti, C checks whether such a query has already been issued.
If so, C retrieves (Ti, sk
P , σTi ) and returns σTi . Otherwise, C runs Sign(Ti, pp, dskO, dpkP), returns
Ti
σTi and stores the so obtained (Ti, sk
– On receiving a message signing query (Ti,Mij ), C checks, whether a template signing query for Ti
has already been made and whether Mi,j (cid:22) Ti. If not, C returns ⊥. Otherwise, C checks whether
the query (Ti,Mij ) has already been made. If so, C retrieves (Ti,Mij , σMij
) and returns σMij
.
If not, C retrieves (Ti, sk
and stores the
tuple (Ti,Mij , σMij
P , σTi ), runs Inst(Ti,Mij , σTi , pp, sk
Ti
Ti
P , dskP), returns σMij
Ti
P , σTi ).
).
Output: The adversary A outputs either a triple (T ∗, σT ∗ , skT ∗
P ) or a pair (M∗, σM∗ ). A wins if either
All of these queries can be made adaptively.
P , dpkP) = true, where T ∗ is an unqueried template and sk
T1 VerifyT (T ∗, σTi , pp, dpkO, sk
Ti
Ti
P , and σTi
T2 VerifyT (T ∗, σT ∗ , pp, dpkO, skT ∗
P , dpkP) = true for some unqueried template T ∗ with corresponding
M1 VerifyM(M∗, σMij
, pp, dpkP, dpkO) = true, where M∗ (cid:54)= Mij is an unqueried message and σMij
M2 VerifyM(M∗, σM∗ , pp, dpkP, dpkO) = true for some unqueried message M∗ from template signature
correspond to one queried template Ti,
unqueried skT ∗
corresponds to an already queried Mij (cid:22) Ti, or
σTi for some previously queried template Ti, such that either
(a) M (cid:22) Ti, or
(b) M (cid:14) Ti.
P , and σT ∗ ,
Game 1: Unforgeability Game
Security Now, we can deﬁne what constitutes a secure blank digital signature scheme.
Deﬁnition 14 (Security). We call a BDSS secure, if it is correct, unforgeable, immutable and
(unconditionally) private.
6 Construction
In this section we detail our construction and prove its security, i.e., we show that our presented
construction is correct, unforgeable, immutable and private.
6.1
Intuition
Before we present the detailed construction, we provide some intuition in order to make our design
choices comprehensible. As already noted, we use standard digital signatures, such as ECDSA [9],
as a building block assuming the respective signature keys to be available to every participant in an
authentic fashion. Note that this requires the availability of public key infrastructures, which are,
however, commonly used in practice today. In our construction, DSS signatures provide authenticity
of template and message signatures.
As already discussed in Section 5, we use polynomials to represent templates and template in-
stantiations. The intuition is that the originator commits to a template polynomial. By construction
every allowed template instantiation is represented by a message encoding polynomial that perfectly
divides the template polynomial. A proxy can now commit to a message polynomial, by comput-
ing and signing a commitment to the complementary message encoding polynomial. However, he
can not choose arbitrary divisors of the template polynomial, as the indexes of message elements
Setup: The challenger C runs KeyGen(κ, t) to obtain pp. Furthermore, C runs DKeyGen(κ) of a secure
digital signature scheme twice to generate (dskO, dpkO) and (dskP, dpkP). It gives the adversary A the
resulting public parameters and keys pp, dpkO and dpkP as well as dskP and keeps the private key dskO
to itself.
Query: The adversary A has access to a template signing oracle OT and access to a message signing oracle
OM. Both oracles are simulated by the challenger C.
– On receiving a template signing query Ti, C checks whether such a query has already been issued.
If so, C retrieves (Ti, sk
P , σTi ). Otherwise, C runs Sign(Ti, pp, dskO, dpkP),
Ti
Ti
P , σTi ) and returns (sk
P , σTi ) and stores the so obtained (Ti, sk
Ti
returns (sk
– On receiving a message signing query (Ti,Mij ), C checks, whether a template signing query for Ti
has already been made and whether Mi,j (cid:22) Ti. If not, C returns ⊥. Otherwise, C checks whether
the query (Ti,Mij ) has already been made. If so, C retrieves (Ti,Mij , σMij
) and returns σMij
.
If not, C retrieves (Ti, sk
and stores the
tuple (Ti,Mij , σMij
P , σTi ), runs Inst(Ti,Mij , σTi , pp, sk
Ti
Ti
P , dskP), returns σMij
Ti
P , σTi ).
).
Output: The adversary A outputs either a triple (T ∗, σT ∗ , skT ∗
P ) or a pair (M∗, σM∗ ). A wins if either
All of these queries can be made adaptively.
P , dpkP) = true, where T ∗ is an unqueried template and sk
T1 VerifyT (T ∗, σTi , pp, dpkO, sk
Ti
Ti
P , and σTi
T2 VerifyT (T ∗, σT ∗ , pp, dpkO, skT ∗
P , dpkP) = true for some unqueried template T ∗ with corresponding
M1 VerifyM(M∗, σMij
, pp, dpkP, dpkO) = true, where M∗ (cid:54)= Mij is an unqueried message and σMij
M2 VerifyM(M∗, σM∗ , pp, dpkP, dpkO) = true for some unqueried message M∗ from template signature
correspond to one queried template Ti,
unqueried skT ∗
corresponds to an already queried Mij (cid:22) Ti, or
σTi for some previously queried template Ti, such that
(b) M (cid:14) Ti.
P , and σT ∗ ,
Game 2: Immutability Game
are incorporated into the encoding and the length of the message, i.e., the degree of the message
polynomial, is ﬁxed by the originator.
In the veriﬁcation, the veriﬁer computes a commitment to the message polynomial and checks
whether the computed commitment and the commitment given by the proxy relate to the commit-
ment given by the originator. We need a trusted third party, as the originator should not know the
value α. Otherwise, he could exchange the template polynomial after signature generation for an-
other polynomial having the same evaluation at the point α. Note that in the context of polynomial
commitments the setup must always be run by a trusted third party, as otherwise these commit-
ments represent trapdoor commitments, i.e., the knowledge of α allows to open the commitment to
arbitrary polynomials.
We use polynomial commitments of the form C = ρ · f (α)P for some random value ρ ∈R Z∗
p to
hide the committed polynomials. This provides unconditional hiding of unknown factors of f (X) as
long as ρ stays unknown.
6.2 Scheme
In Scheme 1, we present the detailed construction of our proposed BDSS. Moreover, in Protocol 1,
we illustrate a typical scenario for the interaction of the originator, the proxy and the veriﬁer.
We note that Scheme 1 can easily be turned into a scheme using asymmetric pairings giving
ﬂexibility in the choice of curves and pairings as well as improved eﬃciency. In case of Type-2 pairings
there are only minor modiﬁcations necessary, as there is an eﬃciently computable isomorphism
between G1 and G2, whereas in the Type-3 setting this comes at the costs of doubling the size of
pp. This is because the values αP, . . . , αtP ∈ G1 also need to be mapped to elements of group G2,
i.e., we need to put the additional points P (cid:48), αP (cid:48), . . . , αtP (cid:48) ∈ G2 into pp, where P (cid:48) is a generator of
G2.
Setup: The challenger C runs KeyGen(κ, t) to obtain pp. Furthermore, C runs DKeyGen(κ) of a secure
digital signature scheme twice to generate (dskO, dpkO) and (dskP, dpkP). It gives the adversary A the
resulting public parameters and keys pp, dpkO and dpkP and keeps the private keys dskO and dskP to
itself.
Query 1: The adversary A has access to a template signing oracle OT and access to a message signing
oracle OM. Both oracles are simulated by the challenger C.
– On receiving a template signing query Ti, C checks whether such a query has already been issued.
If so, C retrieves (Ti, sk
P , σTi ). Otherwise, C runs Sign(Ti, pp, dskO, dpkP),
Ti
Ti
P , σTi ) and returns (sk
P , σTi ) and stores the so obtained (Ti, sk
Ti
returns (sk
– On receiving a message signing query (Ti,Mij ), C checks, whether a template signing query for Ti
has already been made and whether Mi,j (cid:22) Ti. If not, C returns ⊥. Otherwise, C checks whether
the query (Ti,Mij ) has already been made. If so, C retrieves (Ti,Mij , σMij
) and returns σMij
.
If not, C retrieves (Ti, sk
and stores the
tuple (Ti,Mij , σMij
P , σTi ), runs Inst(Ti,Mij , σTi , pp, sk
Ti
Ti
P , dskP), returns σMij
Ti
P , σTi ).
).
0
0
T (cid:48)
P , σT (cid:48)
1
1
Query 2: The adversary A is allowed to issue an arbitrary number of queries as in query phase 1, excluding
Challenge: At some point A signals C that he is ready to be challenged by choosing two unqueried, distinct
0 and T (cid:48)
1 of sizes less than t, which are shaped in such a way that from both templates k equal
1, . . . ,M(cid:48)
k can be derived, and sending them to C. Then, C signs these two templates,
T (cid:48)
and σT (cid:48)
P , σT (cid:48)
), (sk
All of these queries can be made adaptively.
templates T (cid:48)
instantiations M(cid:48)
stores the tuples (sk
in a randomly permuted order to A.
templates T (cid:48)
l with 1 ≤ l ≤ k to an additional oracle O(cid:48)
– Additionally, A can send instantiation queries for M(cid:48)
M,
l (cid:22) T (cid:48)
l, C checks whether M(cid:48)
which is simulated by C. On receiving such a query M(cid:48)
1 .
If not, C return ⊥. Otherwise, C checks whether such a query has already been made. If so, C
retrieves (M(cid:48)
l, σM(cid:48)
in a randomly permuted order. If not, C
0l
T (cid:48)
P , σT (cid:48)
) and returns the corresponding template signatures σT (cid:48)
T (cid:48)
P , dskP) for b = 0, 1, stores (M(cid:48)
, σM(cid:48)