dling conditions. We performed additional tests to ascertain
the robustness of ﬁngerprints when the document is subjected
to less-than-ideal conditions. These tests included scribbling
on the paper, printing on it with ink, and soaking the page
in water.
Scribbling. We ﬁrst scanned a set of ﬁve blank documents,
then scanned them again after scribbling over them with a
pen. In each document the scribble was unique, covering an
average of 8% of the test region. In this test, 25 pre-scribble
observations were compared against their 25 post-scribble
counterparts, for a total of 625 pairs. We used 40 different
ﬁngerprint samples per document to yield a total of 25,000
comparisons. The Hamming distances resulting from these
comparisons are plotted in the top graph in Figure 9. The
sensitivity index in this case is lower (ds = 28.8), although the
curves remain quite well-separated. With a decision threshold
of 1130 bit errors in the ﬁngerprint, the chance of a false
positive or false negative is 1 in 1047.
Printing. In this experiment we printed single-spaced text
in 12 pt. Times New Roman lettering over the test region,
covering approximately 13% of the area with ink. The
distributions shown in the middle graph of Figure 9 were
obtained as in the scribble test. Even in this experiment, in
which most patches used for the ﬁngerprint were partially
covered by ink, the sensitivity index is 26.1 and the chance
of a false positive or false negative at the crossover is 1 in
1038.
Wetting and drying. The bottom graph in Figure 9 shows
the resiliency of document ﬁngerprints after the document
was submerged in water for ﬁve minutes. We dried each test
document and ironed it until it was as ﬂat as possible. Using
the same evaluation protocol as for the scribble and printing
tests, we found that documents could still be validated with
100% reliability, even with this fairly extreme mistreatment
of the page (ds = 33.3).
These experiments demonstrate that our ﬁngerprinting
method is robust when a document is handled under certain
rough conditions. The ability to identify a document before
and after it is printed on, scribbled on, or soaked in water
has many potential applications.
5. Security
The security of our method relies on the inability of an
attacker to reproduce the document’s surface, either because
he does not know what features to produce or because he
cannot recreate the normal vectors at the required scale. The
threat model of each application is determined by several
Figure 8. Distributions of Hamming distances between
ﬁngerprints for three paper types: copy paper (top), index
cards (middle), and letterhead (bottom). In all graphs,
the curve on the left depicts the distribution for scans of
the same document, while the curve on the right gives
the distribution for different documents.
Figure 9. Distributions of Hamming distances after
subjecting documents to non-ideal treatments: scribbling
(top), printing (middle), and soaking in water (bottom).
The curves remain well separated even under these
adverse conditions.
8
010203040506070809010000.0050.010.015Histogram of Distances Beteween Fingerprints of Copy Paper% Hamming distance between document fingerprints (length 3200 bits)Probability of Hamming DistanceMean:  99Std: 24.29Mean: 1600Std: 33.42 010203040506070809010000.0020.0040.0060.0080.010.0120.0140.0160.018Histogram of Distances Between Fingerprints of Index Cards% Hamming distance between document fingerprints (length 3200 bits)Probability of Hamming DistanceMean:  98Std: 35.45Mean: 1597Std: 28.16010203040506070809010000.0020.0040.0060.0080.010.0120.0140.016Histogram of Distances Between Fingerprints of Letterhead % Hamming distance between document fingerprints (length 3200 bits)Probability of Hamming DistanceMean:  98Std: 31.93Mean: 1596Std: 29.86010203040506070809010000.0050.010.015Histogram of Distances Between Fingerprints: After Scribbling% Hamming distance between document fingerprints (length 3200 bits)Probability of Hamming DistanceMean: 286Std: 58.75Mean: 1599Std: 32.56010203040506070809010000.0020.0040.0060.0080.010.0120.0140.016Histogram of Distances Between Fingerprints: After Printing% Hamming distance between document fingerprints (length 3200 bits)Probability of Hamming DistanceMean: 562Std: 49.77Mean: 1600Std: 29.84010203040506070809010000.0050.010.015Probability of Hamming Distance% Hamming distance between document fingerprints (length 3200 bits)Mean: 570Std: 31.36Mean: 1604Std: 32.64Histogram of Distances Between Fingerprints: After Soakingfactors: the availability of an original to the attacker, whether
veriﬁcation is performed online or ofﬂine, and whether the
veriﬁcation device is trusted. Under the most common threat
models, our method should prevent an attacker from forging
a copy of an original.
Performing veriﬁcation online or ofﬂine results in different
considerations. Here “online” means that the veriﬁcation
device can communicate with a remote trusted server which
can store data and perform computations; “ofﬂine” means
that the veriﬁcation device cannot communicate, although it
can be preprogrammed with a limited amount of information
such as a constant number of cryptographic keys. Online
veriﬁcation of a document has a straightforward solution,
while ofﬂine veriﬁcation requires security tradeoffs.
5.1. Online veriﬁcation
Online veriﬁcation need not reveal in advance the patch
locations that will be analyzed. This forces an attacker to
reproduce the entire surface of a document before presenting
it for veriﬁcation. In one approach, the veriﬁcation server
requests complete raw scans of the document at each of four
orientations, which the server uses to perform the veriﬁcation
algorithm. Under this construction, the veriﬁcation server
does not reveal the chosen patches.
In an alternative approach, the veriﬁcation server provides
a fresh pseudorandom challenge to the client, and the client
uses the challenge to seed a pseudorandom generator which is
used to pick the patches and templates used in the veriﬁcation
algorithm. The client then computes the feature vector and
sends it to the server. The server, having computed the same
feature vector on its stored scans of the original document,
veriﬁes that the two feature vectors are similar enough.
In this threat model an attacker does not know a priori
which patch locations on a document will be sampled. This
forces an attacker to reproduce the surface texture of the
document at each sample point in order to pass a counterfeit
as an original.
5.2. Ofﬂine veriﬁcation
The security of ofﬂine veriﬁcation depends on whether
the veriﬁcation client is trusted and on the availability of
an original to the attacker. In the ofﬂine case, we assume
that the ﬁngerprint of the legitimate original document is
either pre-stored on the client or is printed onto the document
(perhaps as a 2-D barcode) along with the authority’s digital
signature of the ﬁngerprint. In either case, the client device
checks the document against a known ﬁngerprint.
5.2.1. Ofﬂine: trusted device. Currency and ticket coun-
terfeit detection at banks and concerts are two important
examples of ofﬂine veriﬁcation with a trusted device. By
“trusted” we mean that the device outputs a Boolean match/no-
match result but does not leak any other information.
The secret information stored in the device could be the
public key of the registration entity. The seed stored in the
document ﬁngerprint could be encrypted under the secret
key of the registration entity. Therefore, knowledge of the
ﬁngerprint for a document does not reveal the patch locations.
The hash of the feature vector could also be signed by the
registration entity, preferably using a separate key. This allows
only trusted devices to determine patch locations and verify
the authenticity of a document. No access to the registration
entity is required, provided that the device has knowledge of
the decryption and veriﬁcation keys of the registration entity.
In this threat model the adversary does not know which
patches will be analyzed. This forces the attacker to recreate
the surface normals across the entire document to ensure
veriﬁcation of the document.
5.2.2. Ofﬂine: untrusted device, no access to original. In
the next case, the veriﬁcation device is ofﬂine and untrusted
(i.e., it might leak everything it knows to the attacker) and
the attacker has not seen the original document that he is
trying to forge. In this case, the attacker cannot forge the
document because he does not know anything useful about
the normal ﬁeld that he must create. At most, he knows the
ﬁngerprint (if it is stored in the device) but this does not
help him because the ﬁngerprint is a secure sketch.
5.2.3. Ofﬂine: untrusted device, access to original. The
ﬁnal case is the most challenging one, where the veriﬁcation
device is ofﬂine and untrusted, and the attacker has access to
an original document that he wants to copy. Because there are
no secrets from the attacker—he sees the original document
including anything printed on it, and he knows the full state
of the device—the attacker knows exactly which patches will
be used for veriﬁcation and how the feature vector will be
computed from those patches. The attacker’s only task is to
make a document that will generate a feature vector close
enough to the original. Whether the attacker can do this is
the subject of the next section.
6. Forging a Document
Suppose an attacker has seen an original document and
wants to create a second document that will pass veriﬁcation
as the original. The attacker will start with an arbitrary piece
of paper which, by assumption, will have a very different
feature vector from the original. He will then try to modify
the target paper so that its feature vector is close to that
of the original document. To do this, the attacker needs to
make ﬁne-grained modiﬁcations to the document’s surface
normals. This might be done via lithography or photographic
techniques, but these will be expensive and will probably
require special equipment. The most effective, economical
9
way to control the surface, we believe, is to print on the
document.
Equation (2) shows that the ﬁngerprinted vector (dx,dy)
contains additional factors s and ρ. The scanner-dependent
factor s can be assumed to be fairly constant across the page
and hence has no inﬂuence on the sign of the correlation
results in the feature vector generation. The remaining scale
is given by the local surface reﬂectance ρ of the paper at a
given location, which should be stable across multiple scans.
On empty paper it is nearly constant; in the presence of
print, ρ is greatly attenuated, which lessens the inﬂuence of
the printed portion onto the correlation result. The adversary
can try to control bits of the feature vector by printing dark
ink at selected points in order to reduce their inﬂuence in
the correlation calculations. Besides reducing ρ, printing at
a point tends to ﬂatten the document surface, as shown in
Figure 3.
An adversary who aims at forging a document might
try to leverage these effects by printing a set of carefully
placed dots, either to cause the surface texture of a candidate
document to express the same ﬁngerprint as an original,
or to down-weight unfavorable contributions to the patch
correlation. To do this the forger must overcome two hurdles:
printing dots on the page at desirable locations and/or printing
dots with favorable surface normal vectors. Dark ink on a
document would directly affect reﬂectivity, while light ink
might solely change the normal vectors at a speciﬁc location.
We assume that the adversary uses commercially available
equipment and is able to print dots in any color from black
to white. He has less control over the exact shape of the
dots, which varies by printing technology and type of paper.
We conducted experiments to characterize the ability of a
forger to precisely control the effect of a printed pattern. We
measured the effective resolution—the number of distinct
printable dots—for a high-end ofﬁce printer, a Xerox Phaser
8550, with a nominal resolution of 2400x2400 DPI. The
effective resolution is limited by dot gain, which causes
printed dots to become larger than intended (see Figure
10) due to factors such as the viscosity of the ink and the
absorbency of the paper. The smallest dots that the test printer
could produce on a normal piece of copy paper are 1/240
inch, or 20x20 samples when scanned at 4800 SPI. This
limits the effective resolution to 240 DPI. On the other hand,
the positional accuracy of the printer seems closer to the rated
2400 DPI. We conclude that a forger could use commodity
printers to print dots with positional accuracy similar to what
commodity scanners can measure but size much greater than
the scanner’s pixels.
Because printed dots typically span more than one sample
in a patch, printing a dot at a speciﬁc location affects the
neighboring surface normal vectors in unpredictable and
uncontrollable ways. Due to paper variations as well as
limited precision in the placement and viscosity of ink, the
forger does not have precise control over the normal vectors
Figure 10. The smallest dots that can be produced by
our test printer are 1/240 inch—20 samples wide in this
4800 SPI scan—despite the printer’s nominal 2400 DPI
positional accuracy.
caused by a dot. We performed an experiment where we
printed a series of black dots in a region of the document.
We identiﬁed the black dots and measured the normal vectors
in the surrounding region. For each printed dot, the desired
normal vector of a location occurred on only one point of
the surface.
The bottom-line question is how many degrees of freedom
the adversary has in controllably modifying the normal vector
ﬁeld in a patch. Given the linear transformation used to
determine each feature vector bit, the adversary will likely
be able to achieve a desired set of feature vector values if
he has enough degrees of freedom.
If there are N feature vector bits, and each bit is computed
as the sign of the correlation of the normal ﬁeld with a
random vector ﬁeld, then a truly random normal ﬁeld value
would match all N feature vector bits with probability 2−N.
However, it is likely that the feature vector bits are not fully
independent. Although we have some evidence about the
degree of independence (see, e.g., Figure 5), we do not have
a precise estimate of how much entropy is encoded in the
feature vector.
We are thus left with an open question: does the amount
of information in a patch, as encoded in a feature vector,
exceed the adversary’s ability to inject information into the
patch? If we knew the answer to this question, we could
state with some conﬁdence whether an adversary could forge
a document in the most favorable case (for the adversary),
where the adversary sees the original document and the
veriﬁcation device is ofﬂine and untrusted. Unfortunately, we
have to leave this question for future work.
10
7. Applications
There are a large number of applications that could
beneﬁt from the ability to uniquely identify a document.
Many situations where physical possession of an item must
be veriﬁed or authentication of an item is required could
fruitfully employ our technique. Currency, ticket, and art
counterfeit detection, as well as veriﬁcation of product
packaging are some of the applications where physical
document authentication is desirable.
Counterfeit currency detection is one obvious application.
The ﬁnancial impact of counterfeit currency is large. Esti-
mates of annual global revenue loss range from $250- to
$500 billion [15], [16]. The ability to authenticate bills could
change the way currency is produced and fraud is detected.
Such a system would begin during currency production. The
government would generate a ﬁngerprint for each bill. This
ﬁngerprint could be stored in a database, along with the bill’s
serial number, or the government could digitally sign the
ﬁngerprint and print the ﬁngerprint and signature on the bill.
Any party wishing to verify a particular bill would scan the
bill and verify that the ﬁngerprint matched the one signed
by the government. The authentication of a bill could be
performed ofﬂine or online. Businesses and banks accepting
large cash deposits could verify the currency was legitimate
before completing the transaction. Ofﬂine authentication
could be performed provided that the veriﬁcation device
had the public key of the currency issuer.
Ticket forgery at major concerts and sporting events is
another large black-market business. Counterfeit event passes
were widespread at the 2008 Beijing Olympics [17], and
a British website recently sold more than $2.5 million in
fake tickets [18]. The ability for purchasers to verify the
authenticity of tickets prior to purchase could greatly reduce
the prevalence of online ticket fraud. Trust in ticket purchases
on websites such as Stub Hub and eBay could be dramatically
increased if the seller had to prove access to the item being
auctioned or sold. Ticket clearing houses such as Ticketmaster
could maintain an online database of ﬁngerprints for all
purchased tickets. Any party selling a ticket could scan and
upload the ticket to Ticketmaster and receive veriﬁcation of
authenticity.
Forgery of artwork is a black-market business where the