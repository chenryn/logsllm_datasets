# 如何绕过受限JS沙箱
|
##### 译文声明
本文是翻译文章，文章原作者 licenciaparahackear，文章来源：licenciaparahackear.github.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
在参与某个漏洞赏金计划时，我发现某个站点的功能非常有趣：该站点允许用户使用可控的表达式来过滤数据。我可以使用类似`book.price >
100`的表达式来显示价格高于100美元的书籍，使用`true`为过滤器则显示所有书籍，`false`为过滤器不显示任何内容。因此，我可以知道所使用的表达式结果为`true`还是`false`。
该功能成功吸引了我的注意，因此我尝试传入更为复杂的表达式，如`(1+1).toString()==="2"`（结果为真）以及`(1+1).toString()===5`（结果为假）。这显然是JavaScript代码，因此我猜测我使用的表达式会传入NodeJS服务器上类似`eval`的某个函数。此时貌似我找到了一个远程代码执行（RCE）漏洞。然而，当我使用更为复杂的表达式时，服务器返回错误，提示表达式无效。我猜测服务端并没有使用`eval`函数来解析表达式，而是使用了JavaScript的某种沙箱。
在受限环境中使用沙箱来执行不可信代码通常并不完美。在大多数情况下，我们已经有一些方法能够绕过这种保护措施，以普通权限来执行代码。如果目标环境尝试限制使用像JavaScript之类复杂功能的语言，那么防护起来更难面面俱到。发现这个问题后，我决定花些时间尝试突破这个沙箱系统。我需要了解JavaScript内部工作原理，这样才能有助于查找并利用RCE。
我首先需要确定网站使用哪个库来实现沙箱，因为整个NodeJS生态中有数十个库可以实现该功能，并且在许多情况下这些实现方案并不完美。也有可能目标网站使用了自定义的沙箱，但这种可能性较小，因为开发者需要较多精力才能做到这一点。
最后，我通过分析应用的错误信息发现目标站点使用的是[static-eval](https://github.com/substack/static-eval)，这个库没有那么知名（但开发者是[substack](https://twitter.com/substack)，是NodeJS社区的一个名人）。虽然这个库最初并不是针对沙箱场景而设计（其实我现在也不了解这个库最开始的使用场景），但文档中的确涉及相关内容。目前，我测试的这个站点的确将该库用于沙箱环境。
## 二、绕过static-eval
`static-eval`的原理是使用[esprima](https://github.com/jquery/esprima/)库来解析JS表达式，将其转化为[AST（抽象语法树）](https://en.wikipedia.org/wiki/Abstract_syntax_tree)。给定AST和我们输入的变量对象后，目标会尝试计算表达式。如果目标发现某一点存在异常，那么函数就会失败，不会执行我们输入的代码。因为这一点，最开始时我有点动力不足，因为我发现这个沙箱系统对能接收的数据非常严格。我甚至不能在表达式中使用`for`或者`while`语句，因此想执行需要迭代算法的操作几乎无法完成。无论如何，我一直在尝试寻找系统中是否存在任何bug。
粗略分析后我并没有找到任何bug，因此我查看了`static-eval`
[GitHub](https://github.com/substack/static-eval)项目的`commits`和`pull`请求。我发现其中有个[pull请求](https://github.com/substack/static-eval/pull/18)修复了2个bug，这些bug可以规避沙箱环境，这正是我所寻找的答案。我也发现了pull请求作者发表过的一篇[文章](https://maustin.net/articles/2017-10/static_eval)，其中深入分析了这些漏洞。因此，我第一时间在目标站点上测试了这些技术，但不幸的是，目标站点使用的是新版的`static-eval`，已经修复了这些漏洞。然而，当发现有人曾成功绕过沙箱后，我对自己也更有信心，因此开始寻找能规避沙箱的新方法。
随后，我深入分析了这两个漏洞，希望这些漏洞能帮我找到思路，发现该库中的新漏洞。
## 三、分析第一个漏洞
第一个漏洞使用了[constructor](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Function)来构造恶意函数，攻击者经常使用这种技术来绕过沙箱。比如，在绕过angular.js沙箱以获得XSS攻击点的大多数方法中，最终都会使用能够调用`constructor`的payload。攻击者也常使用这种方法来绕过与`static-eval`类似的库，如[`vm2`](https://github.com/patriksimek/vm2/issues/32)。例如，我们可以通过如下表达式打印出系统环境变量，证实漏洞的确存在（因为沙箱的存在，该操作可能不会成功）：
    "".sub.constructor("console.log(process.env)")()
在如上代码中，`"".sub`是获得函数的一个简单方法（`(function(){})`也能实现类似功能），随后再获取该函数的`constructor`。当调用该函数后会返回一个新函数，该函数具体代码为传入的字符串参数。这类似于`eval`函数，但并没有立即执行代码，而是返回可以执行代码的一个函数。这就可以解释payload结尾为什么会有`()`，我们可以通过这种方式来调用该函数。
我们可以执行更多操作，而不单单是打印环境变量。比如，我们可以使用NodeJS
`child_process`模块的`execSync`函数来执行操作系统命令并返回输出结果。如下payload会返回`id`命令的输出结果：
    "".sub.constructor("console.log(global.process.mainModule.constructor._load("child_process").execSync("id").toString())")()
上面的payload与之前的payload类似，不同点在于所创建函数的具体代码。在该代码中，`global.process.mainModule.constructor._load`与NodeJS中`require`函数的功能一样。由于我没注意到的某些原因，函数`constructor`内部无法使用`require`，因此我只能使用这种不优雅的表达方式。
开发者通过阻止对函数对象属性的访问（通过`typeof obj == 'function'`来判断对象是否是函数）来修复该漏洞：
    else if (node.type === 'MemberExpression') {
        var obj = walk(node.object);
        // do not allow access to methods on Function 
        if((obj === FAIL) || (typeof obj == 'function')){
            return FAIL;
        }
这种修复方式非常简单，但也非常有效。由于`constructor`只能在函数中使用，因此现在我已无法访问该接口。对象的`typeof`属性无法修改，因此只要是函数，那么`typeof`必定等于`function`。我没有找到绕过这种防护的办法，因此我接着分析第二个漏洞。
## 四、分析第二个漏洞
与第一个漏洞相比，这个漏洞更加简单，也更加容易发现：问题在于沙箱允许我们创建匿名函数，但并没有检查函数内容，没有禁用恶意代码。实际上，我们可以将函数体直接传递给构造函数。如下代码能够实现与前面第一个payload同样的效果：
    (function(){console.log(process.env)})()
我们可以修改匿名函数的函数体，使用`execSync`来显示系统命令的执行结果，这部分工作留给大家来完成。
对于该漏洞，一种可能的修复方式是禁用`static-eval`表达式内部的所有匿名函数声明语句。然而，这样可能会阻止匿名函数的正常使用（比如，正常情况下匿名函数可以用来映射数组）。因此，缓解措施必须允许正常匿名函数的使用，同时还要阻止恶意的使用方式。开发者可以分析已定义函数的函数体，检查该函数不会执行任何恶意操作，比如访问构造函数。
实际的修复措施比第一个漏洞的修复方式要更为复杂。与此同时，Matt
Austin（提出缓解措施的开发者）表示自己并不确定这种方法是否能够完美解决问题。因此，我决定找到绕过这种修复措施的方法。
## 五、寻找新漏洞
我注意到一个细节，`static-eval`会在函数定义时判断目标是否为恶意函数，而不在函数被调用时进行判断。因此`static-eval`并不会去考虑函数参数的具体值，因此这样就需要在函数被调用时进行判断。
我常用的做法就是尝试访问构造函数，通过某种方式绕过第一种修复措施（因为我无法访问函数的属性）。然而，如果我尝试访问函数参数的`constructor`时会出现什么情况？由于函数定义时并不知道这个值，因此我们有可能借此绕过系统的限制机制。为了测试这一点，我使用了如下表达式：
    (function(something){return something.constructor})("".sub)
如果上面语句返回了`cnostructor`，那么我们成功找到了绕过办法。不幸的是事实并非如此。如果某个函数在函数定义时访问某个未知类型的某个属性时，就会被`static-eval`阻止（这里即为`something`参数）。
`static-eval`有个非常有用的特性，基本可以适用于所有情况。我们可以指定在`static-eval`内部可用的一些变量。比如，在本文开头，我使用了`book.price > 100`这个表达式。在这种情况下，调用`static-eval`的代码会向其传入`book`变量的值，以便在表达式中使用该变量。
这给了我另一个思路：如果我构造一个匿名函数，参数名与已定义的变量名相同会出现什么情况？由于目标无法在定义时知道参数的值，因此可能会使用变量的初始值，这对我来说非常有用。假如我又一个变量`book`，其初始值为一个对象，那么利用如下表达式：
    (function(book){return book.constructor})("".sub)
将得到一个非常满意的结果：当定义函数时，`static-eval`会检查`book.constructor`是否为有效的表达式。由于`book`最开始时为对象（其`typeof`值为`object`），并非函数，因此我们可以访问其`constructor`，成功创建函数。然而，当我调用该函数时，`book`会将传入的值作为参数传递给另一个函数（即`"".sub`，另一个函数）。然后访问并返回其`constructor`，最终成功返回`constructor`。