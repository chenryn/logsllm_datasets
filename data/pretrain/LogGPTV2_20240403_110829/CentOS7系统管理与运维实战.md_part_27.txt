以下是经过优化后的文本，使其更加清晰、连贯和专业：

---

### 6.4 主从数据库同步配置

**步骤1：获取主服务器的binlog文件名和偏移量**

在主服务器上执行以下命令来获取当前的binlog文件名和偏移量：
```sql
mysql> SHOW MASTER STATUS;
+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000005 |      233 |              |                  |
+------------------+----------+--------------+------------------+
```
记录下`File`和`Position`的值，例如`mysql-bin.000005`和`233`。

**步骤2：配置从服务器**

登录到从服务器并设置主从关系：
```sql
mysql> CHANGE MASTER TO
    -> MASTER_HOST='192.168.19.101',
    -> MASTER_USER='rep',
    -> MASTER_PASSWORD='r',
    -> MASTER_LOG_FILE='mysql-bin.000005',
    -> MASTER_LOG_POS=233;
```

**步骤3：启动从服务器的复制线程**

在从服务器上启动slave线程并检查同步状态：
```sql
mysql> START SLAVE;
mysql> SHOW SLAVE STATUS \G
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.19.101
                  Master_User: rep
                  Master_Port: 3306
                Connect_Retry: 60
              Master_Log_File: mysql-bin.000005
          Read_Master_Log_Pos: 233
               Relay_Log_File: CentOS-relay-bin.000004
                Relay_Log_Pos: 106
        Relay_Master_Log_File: mysql-bin.000005
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
```
如果`Slave_IO_Running`和`Slave_SQL_Running`都为`YES`，则说明主从已经正常工作。如果其中有一个为`NO`，则需要根据`Last_IO_Errno`和`Last_IO_Error`显示的信息定位主从同步失败的原因。

**步骤4：主从同步测试**

在主服务器上创建一个表并插入数据，然后在从服务器上验证数据是否同步成功。

```sql
# 在主服务器上执行
mysql> CREATE DATABASE testdb;
mysql> USE testdb;
mysql> CREATE TABLE testtable (id INT, name VARCHAR(100));
mysql> INSERT INTO testtable (id, name) VALUES (1, 'test');

# 在从服务器上执行
mysql> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| testdb             |
+--------------------+

mysql> USE testdb;
mysql> SELECT * FROM testtable;
+----+-------+
| id | name  |
+----+-------+
|  1 | test  |
+----+-------+
```

### 小结

通过上述步骤，我们成功配置了MySQL的主从复制。首先在主服务器上获取binlog文件名和偏移量，然后在从服务器上设置主从关系，并启动slave线程。最后通过创建表和插入数据进行主从同步测试。

---

### 7.1 Nginx安装与管理

#### 7.1.1 Nginx安装

Nginx是一款轻量级的Web服务器软件，支持负载均衡和反向代理。本节以Nginx 1.6.3版本为例说明Nginx的安装过程。

**步骤1：下载并解压源码包**

```bash
[root@Centos soft]# wget http://nginx.org/download/nginx-1.6.3.tar.gz
[root@Centos soft]# tar xvf nginx-1.6.3.tar.gz
[root@Centos soft]# cd nginx-1.6.3
```

**步骤2：安装PCRE库**

Nginx安装时依赖PCRE库，因此需要先安装PCRE。

```bash
[root@Centos soft]# wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.35.tar.gz
[root@Centos soft]# tar xvf pcre-8.35.tar.gz
[root@Centos soft]# cd pcre-8.35
[root@Centos pcre-8.35]# ./configure
[root@Centos pcre-8.35]# make
[root@Centos pcre-8.35]# make install
```

**步骤3：编译并安装Nginx**

```bash
[root@Centos nginx-1.6.3]# ./configure --prefix=/usr/local/nginx --with-pcre=../pcre-8.35
[root@Centos nginx-1.6.3]# make
[root@Centos nginx-1.6.3]# make install
```

安装完成后，Nginx的主要目录结构如下：

```bash
[root@Centos nginx]# find /usr/local/nginx
/usr/local/nginx
/usr/local/nginx/conf
/usr/local/nginx/conf/koi-utf
/usr/local/nginx/conf/koi-win
/usr/local/nginx/conf/mime.types
/usr/local/nginx/conf/fastcgi.conf
/usr/local/nginx/conf/fastcgi_params
/usr/local/nginx/conf/nginx.conf
/usr/local/nginx/conf/win-utf
/usr/local/nginx/html
/usr/local/nginx/logs
/usr/local/nginx/sbin
```

#### 7.1.2 Nginx虚拟主机配置

Nginx支持多种虚拟主机配置方式，如基于端口、基于IP和基于域名的虚拟主机配置。本节主要介绍基于域名的虚拟主机配置。

**步骤1：创建虚拟主机配置文件**

```bash
[root@Centos conf]# mkdir vhost
[root@Centos conf]# cd vhost
[root@Centos vhost]# vi www.test.com.conf
```

编辑`www.test.com.conf`文件，内容如下：

```nginx
server {
    listen 192.168.19.101:80;
    server_name www.test.com;

    access_log /data/logs/www.test.com.log main;
    error_log /data/logs/www.test.com.error.log;

    root /data/www.test.com;
    index index.html index.htm;
}
```

**步骤2：包含虚拟主机配置文件**

编辑主配置文件`nginx.conf`，将虚拟主机配置文件包含进去：

```nginx
http {
    # 其他配置...
    include /usr/local/nginx/conf/vhost/*.conf;
}
```

**步骤3：创建虚拟主机目录和测试文件**

```bash
[root@Centos sbin]# mkdir -p /data/www.test.com
[root@Centos sbin]# echo "www.test.com.index" > /data/www.test.com/index.html
[root@Centos sbin]# touch /data/logs/www.test.com.log
[root@Centos sbin]# touch /data/logs/www.test.com.error.log
```

**步骤4：配置hosts文件**

为了测试，需要在`/etc/hosts`文件中添加域名解析：

```bash
[root@Centos sbin]# vi /etc/hosts
192.168.19.101 www.test.com
```

**步骤5：测试并启动Nginx**

```bash
[root@Centos sbin]# /usr/local/nginx/sbin/nginx -t
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful
[root@Centos sbin]# /usr/local/nginx/sbin/nginx
```

**步骤6：访问测试**

```bash
[root@Centos sbin]# curl http://www.test.com
www.test.com.index
```

### 小结

通过以上步骤，我们成功安装并配置了Nginx，包括安装PCRE库、编译并安装Nginx、配置基于域名的虚拟主机，并进行了简单的测试。