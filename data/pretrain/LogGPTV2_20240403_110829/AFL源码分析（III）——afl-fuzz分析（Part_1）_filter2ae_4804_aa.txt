# AFL源码分析（III）——afl-fuzz分析（Part 1）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 写在前面
在前两篇文章中，我分析了afl-gcc的相关处理逻辑。简单来说，`afl-gcc`会将必要的函数以及桩代码插入到我们的源汇编文件中，这样，经过编译的程序将会带有一些外来的函数。但是。这些函数到底是怎样生效的呢，在本篇文章中，我将对AFL的主逻辑，也就是`afl-fuzz`进行分析。
## 0x01 afl-fuzz
依据官方`github`所述，`afl-fuzz`是`AFL`在执行`fuzz`时的主逻辑。
对于直接从标准输入(`STDIN`)直接读取输入的待测文件，可以使用如下命令进行测试：
    ./afl-fuzz -i testcase_dir -o findings_dir /path/to/program [...params...]
而对于从文件中读取输入的程序来说，可以使用如下命令进行测试：
    ./afl-fuzz -i testcase_dir -o findings_dir /path/to/program @@
## 0x02 afl-fuzz源码分析(第一部分)
###  `main`函数(第一部分)
####  `banner` & 随机数生成
首先是函数入口，程序首先打印必要的提示信息，随后依据当前系统时间生成随机数。
    SAYF(cCYA "afl-fuzz " cBRI VERSION cRST " by \n");
    doc_path = access(DOC_PATH, F_OK) ? "docs" : DOC_PATH;
    gettimeofday(&tv, &tz);
    srandom(tv.tv_sec ^ tv.tv_usec ^ getpid());
####  `switch`选项处理
#####  `getopt`选项获取
使用`getopt`函数遍历参数并存入`opt`变量中
    while ((opt = getopt(argc, argv, "+i:o:f:m:b:t:T:dnCB:S:M:x:QV")) > 0)
> 关于`getopt`函数：
>
>   * 函数原型：`int getopt(int argc, char * const argv[],const char *optstring);`
>   * 参数解释：
>     * `argc`：整型，一般将`main`函数的`argc`参数直接传入，此参数记录`argv`数组的大小。
>     *
> `argv`：指针数组。一般将`main`函数的`argv`参数直接传入，此参数存储所有的参数。例如，`linux`下使用终端执行某二进制程序时使用`./a.out
> -a1234 -b432 -c -d`的命令，则`argc = 5; argv[5] =
> {"./a.out","-a1234","-b432","-c","-d"};`
>     * `optstring`：字符串。此字符串用于指定合法的选项列表，格式如下：
>       * ``一个字符后面无任何修饰符号表示此选项后无参数。
>       * `:`一个字符后面跟一个冒号表示此选项后必须一个参数。此参数可以与选项分开，也可以与选项连写。
>       * `::`一个字符后面跟两个个冒号表示此选项后可选一个参数。此参数必须与选项连写。
>       * `;`一个字符后跟一个分号表示此选项将被解析为长选项。例如`optstring`中存在`W;`则参数`-W
> foo`将被解析为`--foo`。(仅限`Glibc >= 2.X`)
>
> `getopt`在进行参数处理时，会首先依照`optstring`进行参数的排序，以保证所有的无选项参数位于末尾。例如，当`optstring =
> "a:b::c::d:efg"`时，若调用命令是`./a.out -a 1 -b 2 -c3 -d4 -f -g -e 5
> 6`，则排序后的结果为`argv[12] =
> {"./a.out","-a","1","-b","-c3","-d4","-e","-f","-g","2","5","6"}`
>
>
> 特别的，若`optstring`的第一个字符是`+`或设置了`POSIXLY_CORRECT`这个环境变量，则当解析到无选项参数时，函数即刻中止返回`-1`。若`optstring`的第一个字符是`-`，则表示解析所有的无选项参数。当处理到`--`符号时，无论给定了怎样的`optstring`，函数即刻中止并返回`-1`。
>
>     * 返回值解释：此函数的返回值情况如下表所示| 返回值 | 含义 |  
>  | :———: | :—————————————————————————————: |  
>  | 选项字符 | `getopt`找到了`optstring`中定义的选项 |  
>  | -1 |
> 1.所有的命令内容均已扫描完毕。2.函数遇到了`--`。3.`optstring`的第一个字符是`+`或设置了`POSIXLY_CORRECT`这个环境变量，解析到了无选项参数。
> |  
>  | ? |
> 1.遇到了未在`optstring`中定义的选项。2.必须参数的选项缺少参数。(特殊的，若`optstring`的第一个字符是`:`返回`:`以替代`?`)
> |
>
接下来，`main`函数将依据不同的参数进行不同的代码块进行`switch`语句处理。
#####  `-i`选项(目标输入目录)
此选项表示待测目标输入文件所在的目录，接受一个目录参数。
    case 'i': /* input dir */
    {
        if (in_dir) FATAL("Multiple -i options not supported");
        in_dir = optarg;
        if (!strcmp(in_dir, "-")) in_place_resume = 1;
        break;
    }
  1. 首先检查`indir`是否已被设置，防止多次设置`-i`选项。
  2. 将选项参数写入`in_dir`。
  3. 若`in_dir`的值为`-`，将`in_place_resume`标志位置位。
#####  `-o`选项(结果输出目录)
此选项表示待测目标输出文件存放的目录，接受一个目录参数。
    case 'o': /* output dir */
    {
        if (out_dir) FATAL("Multiple -o options not supported");
        out_dir = optarg;
        break;
    }
  1. 首先检查`out_dir`是否已被设置，防止多次设置`-o`选项。
  2. 将选项参数写入`out_dir`。
#####  `-M`选项(并行扫描，Master标志)
此选项表示此次fuzz将启动并行扫描模式，关于并行扫描模式官方已经给出了文档，本文中将以附录形式进行全文翻译。
    case 'M':  /* master sync ID */
    {
        u8* c;
        if (sync_id) FATAL("Multiple -S or -M options not supported");
        sync_id = ck_strdup(optarg);
        if ((c = strchr(sync_id, ':'))) {
            *c = 0;
            if (sscanf(c + 1, "%u/%u", &master_id, &master_max) != 2 ||
                !master_id || !master_max || master_id > master_max ||
                master_max > 1000000) FATAL("Bogus master ID passed to -M");
        }
        force_deterministic = 1;
        break;
    }
  1. 首先检查`sync_id`是否已被设置，防止多次设置`-M/-S`选项。
  2. 使用`ck_strdup`函数将传入的实例名称存入特定结构的`chunk`中，并将此`chunk`的地址写入`sync_id`。
  3. 检查`Master`实例名中是否存在`:`，若存在，则表示这里是使用了并行确定性检查的实验性功能，那么使用`sscanf`获取当前的`Master`实例序号与`Master`实例最大序号，做如下检查： 
    1. 当前的`Master`实例序号与`Master`实例最大序号均不应为空
    2. 当前的`Master`实例序号应小于`Master`实例最大序号
    3. `Master`实例最大序号应不超过`1000000`
任意一项不通过则抛出致命错误`"Bogus master ID passed to -M"`，随后程序退出
  4. 将`force_deterministic`标志位置位。
#####  `-S`选项(并行扫描，Slave标志)
此选项表示此次fuzz将启动并行扫描模式，关于并行扫描模式官方已经给出了文档，本文中将以附录形式进行全文翻译。
    case 'S': 
    {
        if (sync_id) FATAL("Multiple -S or -M options not supported");
        sync_id = ck_strdup(optarg);
        break;
    }
  1. 首先检查`sync_id`是否已被设置，防止多次设置`-M/-S`选项。
  2. 使用`ck_strdup`函数将传入的实例名称存入特定结构的`chunk`中，并将此`chunk`的地址写入`sync_id`。
#####  `-f`选项(fuzz目标文件)
此选项用于指明需要`fuzz`的文件目标。
    case 'f': /* target file */
    {
        if (out_file) FATAL("Multiple -f options not supported");
        out_file = optarg;
        break;
    }
  1. 首先检查`out_file`是否已被设置，防止多次设置`-f`选项。
  2. 将选项参数写入`out_file`。
#####  `-x`选项(关键字字典目录)
此选项用于指明关键字字典的目录。
> 默认情况下，`afl-fuzz`变异引擎针对压缩数据格式(例如，图像、多媒体、压缩数据、正则表达式语法或 shell
> 脚本)进行了优化。因此，它不太适合那些特别冗长和复杂的语言——特别是包括 HTML、SQL 或 JavaScript。
>
> 由于专门针对这些语言构建语法感知工具过于麻烦，`afl-> fuzz`提供了一种方法，可以使用可选的语言关键字字典、魔数头或与目标数据类型相关的其他特殊标记来为模糊测试过程提供种子——并使用它来重建移动中的底层语法，这一点，您可以参考[http://lcamtuf.blogspot.com/2015/01/afl-> fuzz-making-up-grammar-with.html](http://lcamtuf.blogspot.com/2015/01/afl-> fuzz-making-%20up-grammar-with.html)。
    case 'x': /* dictionary */
    {
        if (extras_dir) FATAL("Multiple -x options not supported");
        extras_dir = optarg;
        break;
    }
  1. 首先检查`extras_dir`是否已被设置，防止多次设置`-x`选项。
  2. 将选项参数写入`extras_dir`。
#####  `-t`选项(超时阈值)
此选项用于指明单个`fuzz`实例运行时的超时阈值。
    case 't': /* timeout */
    {
        u8 suffix = 0;
        if (timeout_given) FATAL("Multiple -t options not supported");
        if (sscanf(optarg, "%u%c", &exec_tmout, &suffix)  2000)
            FATAL("Value of -m out of range on 32-bit systems");
        break;
    }
  1. 首先检查`mem_limit_given`是否已被设置，防止多次设置`-m`选项，随后，将`mem_limit_given`置位。
  2. 若选项参数为`none`，则将内存阈值`mem_limit`设为`0`。
  3. 使用`"%llu%c"`获取参数并以此写入内存阈值`mem_limit`和后缀`suffix`，若获取失败，抛出致命错误，程序中断。
  4. 根据后缀的单位将`mem_limit`的值换算为`M(兆)`。
  5. 若`mem_limit`小于`5`，抛出致命错误，程序中断。
  6. 检查`rlim_t`的大小，若其值为`4`，表示此处为`32`位环境。此时当`mem_limit`的值大于`2000`时，抛出致命错误，程序中断。 
    * 此变量的定义为`typedef __uint64_t rlim_t;`
#####  `-b`选项(CPU ID)
此选项用于将`fuzz`测试实例绑定到指定的`CPU`内核上。
    case 'b':  /* bind CPU core */
    {
        if (cpu_to_bind_given) FATAL("Multiple -b options not supported");
        cpu_to_bind_given = 1;
        if (sscanf(optarg, "%u", &cpu_to_bind) < 1 || optarg[0] == '-')
            FATAL("Bad syntax used for -b");
        break;
    }
  1. 首先检查`cpu_to_bind_given`是否已被设置，防止多次设置`-b`选项，随后，将`cpu_to_bind_given`置位。
  2. 使用`"%u"`获取参数并以此写入想要绑定的`CPU ID`变量`cpu_to_bind`，若获取失败，抛出致命错误，程序中断。
#####  `-d`选项(快速`fuzz`开关)
此选项用于启用`fuzz`测试实例的快速模式。( **快速模式下将跳转确定性检查步骤，这将导致误报率显著上升** )
    case 'd': /* skip deterministic */
    {
        if (skip_deterministic) FATAL("Multiple -d options not supported");
        skip_deterministic = 1;
        use_splicing = 1;
        break;
    }
  1. 首先检查`skip_deterministic`是否已被设置，防止多次设置`-d`选项，随后，将`skip_deterministic`置位。
  2. 将`use_splicing`置位。
#####  `-B`选项(加载指定测试用例)
此选项是一个隐藏的非官方选项，如果在测试过程中发现了一个有趣的测试用例，想要直接基于此用例进行样本变异且不想重新进行早期的样本变异，可以使用此选项直接指定一个`bitmap`文件
    case 'B': /* load bitmap */
    {