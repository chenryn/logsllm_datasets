第四章对Android设备进行流量分析
42
被动分析的概念是。将所有网络信息保存到特定文件中，之后使用数据包分析器查看。这就
是我们将在Android设备中进行被动分析。我们将使用 tcpdump来将所有的信息保存到设备
中一个位置。此后，我们将该文件拉取到我们的系统，然后使用Wireshark或Cocoa包分析
器查看它。请参阅以下步骤：
1. 我们从TimurAlperovich的网站 http://www.eecs.umich.edu/~timuralp/tcpdump-arm下载
为ARM编译的 tcpdump二进制文件。如果我们需要，我们还可以下载 tcpdump的原始
二进制文件并交叉编译（为Android交叉编译你的二进制文件，请按照链
接 http://machi021.blogspot.jp/2011/03/compile-busybox-for-android.html。链接展示了
交叉编译BusyBox，但相同的步骤可以应用于 tcpdump）。
一旦我们下载了 tcpdump，我们可以通过在我们刚刚下载的二进制上执行一个文件，来
确认它是否为ARM编译。对于Windows用户，你可以使用Cygwin来执行命令。输出
类似于以下屏幕截图中所示：
2. 这里的下一步是将 tcpdump二进制文件推送到设备中的一个位置。我们还必须记住，我
们需要继续执行这个文件。因此，我们将它推送到一个位置，我们可以从中更改权限，
以及执行二进制来捕获流量。
3. 现在，继续并使用 adb的 push命令推送二进制来将二进制推送到设备。同样，在我们
需要从设备中拉取内容的情况下，我们可以使用 pull而不是 push。
4. 这里，我们将使用 adbpush将其推送到Android中的 /data/local/tmp：
adbpushtcpdump-arm/data/local/tmp/tcpdum
5. 一旦我们将 tcpdump二进制推送到设备，然后需要使用 adb在shell中访问设备，并更改
二进制的权限。如果我们试图运行 tcpdump，它会给我们一个权限错误，因为我们没有
执行权限。
为了更改权限，我们需要访问 /data/local/tmp，使用 chmod命令，并授予其权
限 777，这意味着应用程序将具有所有权限。以下屏幕截图显示了上述命令的结果输
出：
6. 这里的最后一步是启动 tcpdump并将输出写入 .pcap文件。使用 -s， -v和 -w标志启
动 tcpdump。参考以下描述：
-s：这表示从每个封包抽取给定（在我们的例子中为0）字节的数据，而不是默认的
65535字节。
第四章对Android设备进行流量分析
43
-v：这表明详细输出。
-w：这表明写入原始数据包的文件名。例如，我们可以使
用 ./tcpdump-v-s0-woutput.pcap，以便将所有文件写入 output.pcap，并输出
详细信息。
7. 在流量捕获执行期间，打开手机浏览器并访问位于 http://attify.com/data/login.html的
漏洞登录表单，该表单通过HTTP发送所有数据并使用GET请求：
8. 这里使用用户名 android和密码 mysecretpassword登录应用程序。
9. 我们现在可以在任何时候通过 adbshell服务终止进程（使用 Ctrl+C）。下一步是将
捕获的信息从设备拉取到我们的系统。为此，我们将简单地使用 adbpull如下：
adbpull/data/local/tmp/output.pcapoutput.pcap
10. 你可能还需要更改 output.pcap的权限才能拉取它。在这种情况下，只需执行以下命
令：
chmod666output.pcap
11. 一旦我们下载了捕获的网络数据的.pcap文件，我们可以在Wireshark中打开它并分析流
量。在这里，我们将尝试查找捕获的登录请求。我们可以从网
站 http://www.wireshark.org/download.html下载Wireshark。一旦下载并安装完毕，打
开Wireshark并在里面打开我们新拉取的文件 output.pcap，通过访问 File|Open。
一旦我们在Wireshark中打开 .pcap文件，我们会注意到一个类似下面截图所示的屏
幕：
第四章对Android设备进行流量分析
44
Wireshark是一个开源封包分析器，它帮助我们发现敏感信息，并分析来自所有网络连接
的流量数据。在这里，我们正在搜索我们对 http://attify.com所做的请求，并输入了我
们的登录凭据。
12. 现在，访问 Edit并单击 FindPackets。在这里，我们需要查找我们提交登录凭据的网
站，并检查 String。
13. 在这里，我们可以看到与 http://attify.com/data/login.html的连接。如果我们在底部
窗格中查找有关此数据包的更多信息，我们可以看到包含我们输入的用户名和密码的请
求网址。
因此，我们使用 tcpdump成功捕获了网络数据，并将其存储在 .pcap文件中，然后使用
Wireshark进行分析。然而，被动流量捕获也可以通过 adbshell直接完成。
第四章对Android设备进行流量分析
45
adbshell/data/local/tmp/tcpdump-iany-p-s0-w/mnt/sdcard/output.pcap
这里， -i代表接口。在这种情况下，它从所有可用接口捕获数据。 -p指定 tcpdump不将
设备置于混杂模式（这是在执行嗅探攻击时经常使用的模式，并且不适合我们目前使用的模
式）。在使用 -tcpdump标志启动模拟器时，我们还可以指定使用 tcpdump。我们还需要使
用 -avd标志，指定要捕获流量的AVD名称。
emulator-avdAndroid_Pentesting--tcpdumptrafficcapture.pcap
主动分析
主动分析的基本规则是，使每个请求和响应通过我们定义的中间设备。在这种情况下，我们
将设置一个代理，并使所有请求和响应通过该特定代理。此外，我们可以选择操纵和修改请
求和响应中的数据包，从而评估应用程序的安全性：
1. 为了为HTTP创建代理，请使用指定代理IP和端口以及 -http-proxy标志启动模拟器。
由于我们在同一个系统上运行模拟器，我们使用IP 127.0.0.1和任何可用的端口。在这
种情况下，我们使用端口8080。
emulator-avdAndroid_Pentesting–http-proxy127.0.0.1:8080
2. 在设备上，我们还可以访问 Settings|Wi-Fi，然后长按我们连接的网络Wi-Fi。此外
如果我们使用一个实际的设备，我们用于拦截的系统应该在同一个网络上。
3. 一旦我们长按Wi-Fi连接，我们将会得到一个类似于下面的截图所示的屏幕。此外，如
果你使用真实设备执行此练习，设备需要与代理位于同一个网络。
4. 一旦进入连接修改屏幕，请注意，代理配置会询问网络上的设备的IP地址和代理系统的
端口。
第四章对Android设备进行流量分析
46
但是，这些设置仅存于从4.0开始的最新版本的Android中。如果我们要在小于4.0的
设备上实现代理，我们将必须安装第三方应用程序，例如PlayStore上可用的
ProxyDroid。
5. 一旦我们在设备/模拟器中设置了代理，请继续并启动Burp代理，来拦截流量。下
面 Options选项卡中Burp代理的样子，以便有效拦截浏览器和应用程序的流量。
6. 我们还需要检查不可见的代理，以确保我们的代理也捕获nonproxy请求。（读者可以
在Burp的网站 http://blog.portswigger.net/2008/11/mobp-invisible-proxying.html上详
细了解不可见代理和非代理请求。）
第四章对Android设备进行流量分析
47
7. 为了检查代理是否工作，打开浏览器并启动网站。然后我们能够看到它是否在代理中被
拦截。
正如我们在上面的屏幕截图中看到的，我们打开了URL http://attify.com，请求现在显示在
BurpProxy屏幕中。因此，我们成功地拦截了来自设备和应用程序的所有基于HTTP的请
求。
4.3HTTPS代理拦截
当通过HTTP协议进行通信时，上述方法可以正常用于应用和流量器的流量拦截。在
HTTPS中，由于证书不匹配，我们将收到错误，因此我们无法拦截流量。
然而，为了解决这个挑战，我们需要创建自己的证书或Burp/PortSwigger并将其安装在设备
上。为了创建我们自己的证书，我们需要在Firefox（或任何其他浏览器或全局代理）中设置
代理：
1. 为了在Firefox中设置代理，请访问 Tools中显示的 Options（Mac上
为 Firefox|Preferences），然后访问 Advanced选项卡。在 Advanced选项卡下，我们
单击 Network选项。
2. 在 Network标签中，我们需要点击 Settings来使用Firefox配置代理。
第四章对Android设备进行流量分析
48
3. 完成后，在我们的系统浏览器上访问HTTPS网站，我们能跟拦截我们设备上的流量。
这里我们将收到一个 TheNetworkisUntrusted消息。点击 IunderstandtheRisks，并
点击 AddException。
4. 然后，单击 GetCertificate，最后单击 View，然后单击 Export来保存证书。
第四章对Android设备进行流量分析
49
5. 一旦证书保存在我们的系统上，我们现在可以使用 adb将其推送到我们的设备。
adbpushportswiggerca.crt/mnt/sdcard/portswiggerca.crt
6. 现在，在我们的设备中，访问 Settings，在 Personal类别下，我们可以找
到 Security。一旦我们进入 Security，请注意，你可以选择从SD卡安装证书。点击
它使我们可以保存具有给定名称的证书，这适用于所有应用程序和浏览器，甚至是
HTTPS站点。
7. 通过返回到我们的浏览器，并打开HTTPS网站（例如 https://gmail.com）来确认。正
如我们在下面的截图中可以看到的，我们在这种情况下也成功地拦截了通信：
第四章对Android设备进行流量分析
50
其它用于拦截SSL流量的方式
还有用于SSL流量拦截的其他方法，以及在设备上安装证书的不同方法。
其他方法之一是从Android设备的 /system/etc/security位置拉取 cacerts.bks文件。一旦
我们拉取了它，我们就可以使用密钥工具以及BouncyCastle（位于Java安装目录中）来生
成证书。如果你在Java安装目录中找不到BouncyCastle，也可以
从 http://www.bouncycastle.org/latest_releases.html下载并将其放置在已知路径。此后，我
们需要挂载 /system分区作为读/写分区，以便将更新的 cacerts.bks证书推送回设备。然
而，为了使这种更改长期有效，如果我们使用模拟器，我们将需要使用 mks.yaffs2来创建一
个新的 system.img然后使用它。
此外，还有其他工具可用于拦截Android设备的流量，例如CharlesProxy和
MITMProxy（ http://mitmproxy.org）。我强烈建议你在Burp代理的知识的基础上尝试他
们，因为它们在可用性方面是相同的，但是更强大。在使用CharlesProxy时，我们可以直
接从 www.charlesproxy.com/charles.crt下载证书。
在一些渗透测试中，应用程序可能正在和服务器通信并获得响应。例如，假设用户试图访问
应用的受限区域，该应用由用户从服务器请求。然而，由于用户没有被授权查看该区域，服
务器使用 403Forbidden进行响应。现在，我们作为渗透测试人员，可以拦截流量，并将响
应从 403Forbidden改为 200OK。因此，用户现在甚至能够访问应用的未授权区域。修改类
似响应的示例可以在第8章“ARM利用”中找到，其中我们将讨论可通过流量拦截利用的一些其
他漏洞。
在应用程序中，保护流量的安全方法是让所有内容通过HTTPS传递，同时在应用程序中包含
一个证书。这样做使得当应用程序尝试与服务器通信时，它将验证服务器证书是否与应用程
序中存在的证书相对应。但是，如果有人正在进行渗透测试并拦截流量，则由渗透测试程序
添加的设备使用的新证书（如portswigger证书）与应用程序中存在的证书不匹配。在这些
情况下，我们必须对应用程序进行逆向工程，并分析应用程序如何验证证书。我们甚至可能
需要修改和重新编译应用程序。
4.4使用封包捕获来提取敏感文件
现在我们来看看如何使用Wireshark从流量数据中提取敏感文件。为了做到这一点，我们可
以捕获数据包，并加载到Wireshark进行分析。
从网络捕获中提取文件的基本概念是，它们含有指定文件类型的头部
（ multipart/form-data）。以下是从网络流量捕获中提取任何类型文件的步骤：
1. 在Wireshark中，只需访问编辑并从包详细信息中搜索字符串 multipart。
第四章对Android设备进行流量分析
51
2. 一旦我们收到了向服务器发送POST请求的数据包（或者极少数情况下是GET），右键
单击该数据包，然后点击 FollowTCPStream。
3. 此后，根据文件起始值（如PDF的情况下为 %PDF），从以下选项中选择 Raw，然后使
用扩展名 .pdf保存文件。因此，我们拥有了最终的PDF，通过Android设备上传到网
站，而且我们恰巧在我们的渗透中开启了网络捕获。
第四章对Android设备进行流量分析
52
4. 我们还可以使用其他工具，如Windows上的NetworkMiner（可
从 http://www.netresec.com/?page=NetworkMiner下载），它提供了一个精心构建的GUI
来与之交互，并显式指定保存的网络流量捕获文件。
总结