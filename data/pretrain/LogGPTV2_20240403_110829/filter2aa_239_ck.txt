        {
        _searchInfo.List.Add(image);
        }
      }
    }
运行该应用程序（如图15-2所示），用户界面被阻塞，直到OnSearchSync方法完成对
Bing和Filckr的网络调用，并完成结果分析。完成这些调用所需的时间取决于网络速度，
以及Bing与Flickr当前的工作量。但是，对于用户来说，等待都是不愉快的。
图15-2
因此，有必要使用异步调用。
15.2.2 异步模式
进行异步调用的方式之一是使用异步模式。异步模式定义了BeginXXX方法和
EndXXX方法。例如，如果有一个同步方法DownloadString，其异步版本就是
BeginDownloadString和EndDownload-String方法。BeginXXX方法接受其同步方法的所有
输入参数，EndXXX方法使用同步方法的所有输出参数，并按照同步方法的返回类型来返
回结果。使用异步模式时，BeginXXX方法还定义了一个AsyncCallback参数，用于接受在
异步方法执行完成后调用的委托。BeginXXX方法返回IAsyncResult，用于验证调用是否已
经完成，并且一直等到方法的执行结束。
WebClient类没有提供异步模式的实现方式，但是可以用HttpWebRequest类来替代，
因为该类通过BeginGetResponse和EndGetResponse方法提供这种模式。下面的示例没有体
现这一点，而是使用了委托，委托类型定义了Invoke方法用于调用同步方法，还定义了
BeginInvoke方法和EndInvolve方法，用于使用异步模式。在这里，声明了Func类型的委托downloadString，来引用有一个string参数和一个string返回值的方法。
downloadString变量引用的方法是用lambda表达式实现的，并且调用WebClient类型的同步
方法DownloadString。这个委托通过调用BeginInvolve方法来异步调用。这个方法是使用
线程池中的一个线程来进行异步调用的。
BeginInvoke方法的第一个参数是Func委托的第一个字符串泛型参数，用于传递
URL。第二个参数的类型是AsyncCallback。AsyncCallback是一个委托，需要IAsyncResult
作为参数。当异步方法执行完毕后，将调用这个委托引用的方法。之后，会调用
downloadString.EndInvoke来检索结果，其方式与以前解析XML内容和获得集合项的方式
相同。但是，这里不可能直接把结果返回给UI，因为UI绑定到一个单独的线程，而回调
方法在一个后台线程中运行。所以，必须使用窗口的Dispatcher属性切换回UI线程。
Dispatcher的Invoke方法需要一个委托作为参数；这就是指定Action委
托的原因，它会在绑定到UI的集合中添加项（代码文件
AsyncPatterns/MainWindow.xaml.cs）：
    private void OnSearchAsyncPattern(object sender, RoutedEventArgs e)
    {
      Func downloadString
 = (address, cred) =>
        {
        var client = new WebClient();
        client.Credentials = cred;
        return client.DownloadString(address);
        };
      Action addItem = item => _searchInfo.List.Add(item);
      foreach (var req in GetSearchRequests())
      {
        downloadString.BeginInvoke
(req.Url, req.Credentials, ar =>
        {
          string resp = downloadString.EndInvoke
(ar);
          IEnumerable images = req.Parse(resp);
          foreach (var image in images)
          {
            this.Dispatcher.Invoke(addItem, image);
          }
        }, null);
      }
    }
异步模式的优势是使用委托功能很容易地实现异步编程。程序现在运行正常，也不会
阻塞UI。但是，使用异步模式是非常复杂的。幸运的是，.NET 2.0推出了基于事件的异步
模式，更便于处理UI的更新。
  注意： 第9章介绍了委托类型和lambda表达式。
15.2.3 基于事件的异步模式
OnAsyncEventPattern方法使用了基于事件的异步模式。这个模式由WebClient类实
现，因此可以直接使用。
基于事件的异步模式定义了一个带有“Async”后缀的方法。例如，对于同步方法
DownloadString, WebClient类提供了一个异步变体方法DownloadStringAsync。异步方法完
成时，不是定义要调用的委托，而是定义一个事件。当异步方法DownloadStringAsync完
成后，会直接调用DownloadStringCompleted事件。赋给该事件处理程序的方法，在lambda
表达式中实现。实现方式和之前差不多，但是现在，可以直接访问UI元素了，因为事件
处理程序是从拥有同步上下文的线程中调用，在Windows Forms和WPF应用程序中，拥有
同步上下文的线程就是UI线程（代码文件AsyncPatternsWPF/MainWindow.xaml.cs）：
    private void OnAsyncEventPattern(object sender, RoutedEventArgs e)
    {
      foreach (var req in GetSearchRequests())
      {
        var client = new WebClient();
        client.Credentials = req.Credentials;
        client.DownloadStringCompleted +=
 (sender1, e1) =>
        {
          string resp = e1.Result;
          IEnumerable images = req.Parse(resp);
          foreach (var image in images)
          {
            _searchInfo.List.Add(image);
          }
        };
        client.DownloadStringAsync(new Uri(req.Url));
      }
    }
基于事件的异步模式的优势在于易于使用。但是，在自定义类中实现这个模式就没有
那么简单了。一种方式是使用BackgroundWorker类来实现异步调用同步方法。
BackgroundWorker类实现了基于事件的异步模式。
这使代码更加简单了。但是，与同步方法调用相比，顺序颠倒了。调用异步方法之
前，需要定义这个方法完成时发生什么。15.2.4小节将进入异步编程的新世界：利用async
和await关键字。
15.2.4 基于任务的异步模式
在.NET 4.5中，更新了WebClient类，还提供了基于任务的异步模式（TAP）。该模式
定义了一个带有“Async”后缀的方法，并返回一个Task类型。由于WebClient类已经提供了
一个带Async后缀的方法来实现基于任务的异步模式，因此新方法名为
DownloadStringTaskAsync。
DownloadStringTaskAsync方法声明为返回Task。但是，不需要声明一个
Task类型的变量来设置DownloadStringTaskAsync方法返回的结果。只要声明一个
String类型的变量，并使用await关键字。await关键字会解除线程（这里是UI线程）的阻
塞，完成其他任务。当DownloadStringTaskAsync方法完成其后台处理后，UI线程就可以
继续，从后台任务中获得结果，赋值给字符串变量resp。然后执行await关键字后面的代码
（代码文件AsyncPatternsWPF/MainWindow. xaml.cs）：
    private async
 void OnTaskBasedAsyncPattern(object sender,
        RoutedEventArgs e)
    {
      foreach (var req in GetSearchRequests())
      {
        var client = new WebClient();
        client.Credentials = req.Credentials;
        string resp = await client.DownloadStringTaskAsync(req.Url);
        IEnumerable images = req.Parse(resp);
        foreach (var image in images)
        {
        _searchInfo.List.Add(image);
        }
      }
    }
  注意： async关键字创建了一个状态机，类似于yield return语句。参见第7
章。
现在，代码就简单多了。没有阻塞，也不需要切换回UI线程，这些都是自动实现
的。代码顺序也和惯用的同步编程一样。
接下来，将代码改为使用与WebClient不同的类，该类以更加直接的方式实现基于任
务的异步模式，并且没有提供同步方法。该类是在.NET 4.5中新添加的HttpClient类。使用
GetAsync方法发出一个异步GET请求。然后，要读取内容，需要另一个异步方法。
ReadAsStringAsync方法返回字符串格式的内容。
    private async void OnTaskBasedAsyncPattern(object sender, RoutedEventArgs e)
    {
      foreach (var req in GetSearchRequests())
      {
        var clientHandler = new HttpClientHandler
        {
        Credentials = req.Credentials
        };
        var client = new HttpClient(clientHandler);
        var response = await client.GetAsync(req.Url);
        string resp = await response.Content.ReadAsStringAsync();
        IEnumerable images = req.Parse(resp);
        foreach (var image in images)
        {
        _searchInfo.List.Add(image);
        }
      }
    }
解析XML字符串可能需要一段时间。因为解析代码在UI线程上运行，这时UI线程就
不能响应用户的其他请求了。要利用同步功能创建后台任务，可以使用Task.Run方法。在
下面的示例中，Task.Run打包XML字符串的解析，返回一个SearchItemResult集合：
    private async void OnTaskBasedAsyncPattern(object sender, RoutedEventArgs e)
    {
      foreach (var req in GetSearchRequests())
      {
        var clientHandler = new HttpClientHandler
        {
        Credentials = req.Credentials
        };
        var client = new HttpClient(clientHandler);
        var response = await client.GetAsync(req.Url, cts.Token);
        string resp = await response.Content.ReadAsStringAsync();
        await Task.Run(() =>
        {
        IEnumerable images = req.Parse(resp);
        foreach (var image in images)
        {
          _searchInfo.List.Add(image);
        }
        }
      }
    }
因为传递给Task.Run方法的代码块在后台线程上运行，所以这里的问题和以前引用UI
代码相同。一个解决方案是在Task.Run方法内只执行req.Parse方法，在任务外执行foreach
循环，把结果添加到UI线程的列表中。现在，在.NET 
4.5中，WPF提供了更好的解决方
案，可以在后台线程上填充已绑定UI的集合。这只需要使用
BindingOperations.EnableCollectionSynchronization属性，启用集合的同步访问功能。如下
面的代码段所示：
    public partial class MainWindow : Window
    {
      private SearchInfo _searchInfo = new SearchInfo();
      private object _lockList = new object();
      public MainWindow()
      {
        InitializeComponent();
        this.DataContext = _searchInfo;
        BindingOperations.EnableCollectionSynchronization(
          _searchInfo.List, _lockList);
      }
认识到async和await关键字的优势后，15.3节将讨论异步编程的基础。
15.3 异步编程的基础
async和await关键字只是编译器功能。编译器会用Task类创建代码。如果不使用这两
个关键字，也可以用C# 4.0和Task类的方法来实现同样的功能，只是没有那么方便。
本节介绍了编译器用async和await关键字能做什么，如何采用简单的方式创建异步方
法，如何并行调用多个异步方法，以及如何修改已经实现异步模式的类，以使用新的关键
字。
所有示例Foundations的代码都使用了如下依赖项和名称空间：
依赖项：
    NETStandard.Library
名称空间：
    System
    System.Threading
    System.Threading.Tasks
    static System.Console
15.3.1 创建任务
下面从同步方法Greeting开始，该方法等待一段时间后，返回一个字符串（代码文件
Foundations/Program.cs）：
    static string Greeting(string name)
    {
      Task.Delay(3000).Wait();
      return $"Hello, {name}";
    }
定义方法GreetingAsync，可以使方法异步化。基于任务的异步模式指定，在异步方
法名后加上Async后缀，并返回一个任务。异步方法GreetingAsync和同步方法Greeting具
有相同的输入参数，但是它返回的是Task。Task定义了一个返回字符串的
任务。一个比较简单的做法是用Task.Run方法返回一个任务。泛型版本的
Task.Run（）创建一个返回字符串的任务：
    static Task
 GreetingAsync
(string name)
    {
      return Task.Run(() =>
      {
        return Greeting(name);
      });
    }
15.3.2 调用异步方法
可以使用await关键字来调用返回任务的异步方法GreetingAsync。使用await关键字需
要有用async修饰符声明的方法。在GreetingAsync方法完成前，该方法内的其他代码不会
继续执行。但是，启动CallerWithAsync方法的线程可以被重用。该线程没有阻塞：
    private async
 static void CallerWithAsync()
    {
      string result = await
 GreetingAsync("Stephanie");
      WriteLine(result);
    }
如果异步方法的结果不传递给变量，也可以直接在参数中使用await关键字。在这
里，GreetingAsync方法返回的结果将像前面的代码片段一样等待，但是这一次的结果会
直接传给WriteLine方法：
    private async static void CallerWithAsync2()
    {
      WriteLine(await
 GreetingAsync("Stephanie"));
    }
  async修饰符只能用于返回.NET类型的Task或viod的方法，以及Windows运行
库的IAsyncOperation。它不能用于程序的入口点，即Main方法不能使用async修饰符。
await只能用于返回Task的方法。
15.3.3小节中，会介绍是什么驱动了这个await关键字，在后台使用了延续任务。
15.3.3 延续任务
GreetingAsync方法返回一个Task对象。该Task对象包含任务创建的信
息，并保存到任务完成。Task类的ContinueWith方法定义了任务完成后就调用的代码。指
派给ContinueWith方法的委托接收将已完成的任务作为参数传入，使用Result属性可以访
问任务返回的结果：
    private static void CallerWithContinuationTask()
    {
      Task t1 = GreetingAsync("Stephanie");
      t1.ContinueWith
(t =>
      {
        string result = t.Result;
        WriteLine(result);
      });
    }
编译器把await关键字后的所有代码放进ContinueWith方法的代码块中来转换await关键
字。
15.3.4 同步上下文
如果验证方法中使用的线程，会发现CallerWithAsync方法和
CallerWithContinuationTask方法，在方法的不同生命阶段使用了不同的线程。一个线程用
于调用GreetingAsync方法，另外一个线程执行await关键字后面的代码，或者继续执行
ContinueWith方法内的代码块。
使用一个控制台应用程序，通常不会有什么问题。但是，必须保证在所有应该完成的
后台任务完成之前，至少有一个前台线程仍然在运行。示例应用程序调用
Console.ReadLine来保证主线程一直在运行，直到按下返回键。
为了执行某些动作，有些应用程序会绑定到指定的线程上（例如，在WPF应用程序
中，只有UI线程才能访问UI元素），这将会是一个问题。
如果使用async和await关键字，当await完成之后，不需要进行任何特别处理，就能访
问UI线程。默认情况下，生成的代码就会把线程转换到拥有同步上下文的线程中。WPF
应用程序设置了DispatcherSynchronizationContext属性，Windows 
Forms应用程序设置了
WindowsFormsSynchronization-Context属性。如果调用异步方法的线程分配给了同步上下
文，await完成之后将继续执行。默认情况下，使用了同步上下文。如果不使用相同的同