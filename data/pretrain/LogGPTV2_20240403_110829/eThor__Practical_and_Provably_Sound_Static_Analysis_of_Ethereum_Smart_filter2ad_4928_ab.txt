:= (gas, pc, m, i, s)
:= (n, b, code, stor)
Figure 1: Grammar for calls stacks
price (the amount of Ether to pay for a unit of gas). The originator
then prepays the specified gas limit and gets refunded according to
the remaining gas in case of successful contract execution.
EVM bytecode. Contracts are published on the blockchain in
form of EVM bytecode– an Assembler like bytecode language. The
EVM is a stack-based machine and specifies the semantics of byte-
code instructions. Consequently, EVM bytecode mainly consists of
standard instructions for stack operations, arithmetics, jumps and
local memory access. The instruction set is complemented with
blockchain-specific instructions such as an opcode for the SHA3
hash and several opcodes for accessing information on the current
(internal) transaction. In addition, there are opcodes for accessing
and modifying the storage of the executing account and distinct
opcodes for initiating internal transactions.
Each instruction is associated with (a potentially environment-
dependent) gas cost. If the up-front defined gas-limit is exceeded
during execution, the transaction execution halts exceptionally and
the effects of the current transaction on the global state are reverted.
For nested transactions, an exception only reverts the effects of the
executing transaction, but not those of the calling transactions.
Solidity. In practice, Ethereum smart contracts are shipped and exe-
cuted in EVM bytecode format but are, for a large part, written in the
high-level language Solidity, which is developed by the Ethereum
Foundation [5]. The syntax of Solidity resembles JavaScript, en-
riched with additional primitives accounting for the distributed
setting of Ethereum. Solidity exhibits specific features that give rise
to smart contract vulnerabilities, as will be in discussed in § 2.3. We
will not give a full account of Solidity’s language features here, but
add explanations throughout the paper when needed.
2.2 EVM Semantics
Our static analysis targets a recently introduced small-step seman-
tics for EVM bytecode [25], which we shortly review below.3
The semantics of EVM bytecode is given by a small-step relation
Γ ⊨ S → S′ that encompasses the possible steps that a callstack
S, representing the overall state of a contract execution, can make
under the transaction environment Γ. The transaction environment
Γ summarizes static information about the transaction execution
such as the information on the block that the transaction is part
of and transaction-specific information such as gas price or limit.
We write Γ ⊨ S →∗ S′ for the reflexive transitive closure of the
small-step relation and call the pair (Γ, S) a configuration.
Configurations. The most important formal components of EVM
configurations are summarized in Figure 1.
3More recent changes to the EVM semantics such as the introduction of STATICCALL,
CREATE, and CREATE2, are not explicitly mentioned in this paper, but covered by our
static analysis as specified in [6].
Accepted for ACM CCS, 2020
Clara Schneidewind, Ilya Grishchenko, Markus Scherer, and Matteo Maffei
Global State. Ethereum’s global state σ is formally captured as
a (partial) mapping from account addresses to account states. An
account state consists of a nonce n that is incremented with every
other account that the account creates, a balance b, a persistent
storage stor, and the account’s code. External accounts have no code
and hence cannot access storage.
Callstacks. The overall state of an external transaction is cap-
tured by a stack of execution states that we will refer to as callstack.
The individual execution states reflect the states of the pending
internal transactions. More formally, the elements of a callstack are
either regular execution states of the form (µ, ι, σ , η) or terminal
execution states HALT(σ , gas, d, η) and EXC which can only occur
as stack top elements. For terminated executions we differentiate
between exceptional halting (EXC), which will revert all effects of
the transaction, and regular halting HALT(σ , gas, d, η), in which
case the effects of the transaction are captured by the global state
σ at the point of halting, the gas remaining from the execution, the
return data d, and the transaction effects η (effects that will only be
applied after completing the external execution).
The state of a non-terminated internal transaction is described
by a regular execution state of the form (µ, ι, σ , η). During execu-
tion, this state tracks the current global state σ of the system, the
execution environment ι to the internal transaction (which specifies
parameters such as the input to the transaction and the code to be
executed) as well as the local state µ of the stack machine, and the
transaction effects η that will be applied after transaction execution.
The local machine state µ reflects the state of the stack ma-
chine that handles local computations. It is represented by a tuple
(gas, pc, m, i, s) holding the amount of gas available for execution,
the program counter pc, the local memory m, the number of active
words in memory i, and the machine stack s. As the stack machine
models local computations, the execution of every new (internal)
transaction starts again in a fresh machine state at program counter
zero with an empty stack and zero-initialized memory. Only the gas
value is initialized as specified by the initiator of the transaction.
Small-step Rules. We illustrate the mechanics of the EVM byte-
code semantics by an example and refer to [25] for a full definition.
Local instructions, e.g., ADD, only operate on the machine state:
ι .code[µ .pc] = ADD
µ .s = a :: b :: s
µ .gas ≥ 3
µ′ = µ[s → (a + b) :: s][pc += 1][gas −= 3]
Γ ⊨ (µ, ι, σ, η) :: S → (µ′
, ι, σ, η) :: S
Given a stack that contains at least two values and given a sufficient
amount of gas (here 3 units), an ADD instruction takes two values
from the stack and pushes their sum. These effects, as well as the
advancement in the program counter and the substraction of the
gas cost, are reflected in the updated machine state µ′.
A more evolved semantics is exhibited by the class of transaction
initiating instructions (CALL, CALLCODE and DELEGATECALL,
CREATE). Intuitively, CALL executes the callee’s code in its own
environment, CALLCODE executes the callee’s code in the caller’s
environment, which might be useful to call libraries implemented
in a separate contract, and DELEGATECALL takes a step further
by preserving not only the caller’s environment but even part of
the environment of the previous call (e.g., the sender information),
which effectively treats the callee’s code as an internal function
4
of the caller’s code. Finally, the CREATE instruction initiates an
internal transaction that creates a new account.
Instructions from this set are particularly difficult to analyze,
since their arguments are dynamically evaluated and the execution
environment has to be tracked and properly modified across dif-
ferent calls. Furthermore, it can well be that the code of a called
function is not accessible at analysis time, e.g., because the contract
allows for money transfers to a dynamic set of contracts (like in
the DAO contract as will be discussed in the next section).
2.3 Security Properties of Smart Contracts
Ethereum smart contracts have undergone several severe attacks in
the past that where enabled by major bugs in the contract code, most
prominently the DAO hack [1]. Interestingly, this bug can be traced
back to the violation of a generic security property of the attacked
contract, called single-entrancy. We will shortly present the class
of reentrancy attacks and the corresponding security property.
Preliminary Notions. In order to present security properties in a
concise fashion, the previously presented small-step semantics is
augmented with an annotation to callstack elements that reflects
the currently executed contract. We say that an execution state s
is strongly consistent with annotation c if s executes c (according
to the execution environment) and c is present in the global state
of s. Further, for arguing about EVM bytecode executions, we are
only interested in those initial configurations that might result
from a valid external transaction in a valid block. We call these
configurations reachable and refer to [25] for a detailed definition.
Single-entrancy. For motivating the definition of single-entrancy,
we introduce a class of bugs in Ethereum smart contracts called
reentrancy bugs [12, 38]. Reentrancy attacks exploit that a contract
which hands over control to another contract by calling it can
be called back (reentered) before completing the original internal
transaction. At the point of reentering the contract can then be in
an inconsistent state which allows for unintended behavior. In the
DAO hack, the attacker stole all funds of the contract by reentering
the contract and sending money to itself. We exemplify this kind of
attack by the Bank contract in Figure 2: this has a basic reentrancy
protection in place which however can easily be circumvented.
The Bank contract implements a simple banking functionality,
keeping the balance of all users (identified by their addresses) in
the mapping bal. We only discuss the contract function drain which
allows a user to transfer all its money from its bank account to the
provided beneficiary address a. For protecting against reentrancy,
the drain function implements a simple locking functionality: it is
only entered in case the lock is not taken . Otherwise it takes the lock
(using function take), transfers the remaining balance of the function
callee (denoted by msg.sender) to the beneficiary address a, updates the
user’s balance, and releases the lock again. One needs to note that
the call construct (being translated to a CALL instruction in EVM
bytecode) does not only trigger the value transfer, but also invokes
the execution of the callee’s so-called fallback function (written as
a function without name or argument in Solidity as depicted in the
Mallory contract in Figure 2). Hence, the use of a call can cause the
the executed contract to be reentered during execution, potentially
undermining the contract integrity. The locking mechanism should
prevent this problem by causing an exception in case the contract
eThor: Practical and Provably Sound Static Analysis
of Ethereum Smart Contracts
Accepted for ACM CCS, 2020
Figure 2: Reentrancy Attack.
is reentered (indicated by the lock being taken). However, since the
locking functionality is publicly accessible, a reentrancy attack (as
depicted in Figure 2) is still possible: An attacker calling the drain
function (via Mallory) with Mallory’s address as argument ( 1 ) transfers
all of Mallory’s money back to her and executes her fallback function
( 2 ). Mallory then first calls the public release function to release the
lock ( 3 ) and next calls the drain function of Bank again ( 4 ). Since the
attacker’s balance has not been updated yet at this point, another
transfer of the prior amount to Mallory can be performed ( 5 ). These
steps can be continued until running out of gas or reaching the
callstack limit. In both cases the last value transfer is rolled back,
but the effects of all former internal transactions persist, leaving
the contract Bank drained-out.
The security property ruling out these attacks is called single-
entrancy and is formalized below. Intuitively, a contract is single-
entrant if it cannot perform any more calls after reentering.
Definition 2.1 (Single-entrancy [25]). A contract c is single-entrant
if for all reachable configurations (Γ, sc :: S), for all s′, s′′, S′
Γ ⊨ sc :: S →∗ s′
=⇒ ¬∃s′′
, c′
c :: S′ ++ sc :: S
. Γ ⊨ s′
c :: S′ ++ sc :: S →∗ s′′
c′ :: s′
c :: S′ ++ sc :: S
where ++ denotes concatenation of callstacks. The property ex-
presses that after reentering a contract c (in state s′
c) while executing
a call initiated by the very same contract, it is not possible any-
more to perform another internal transaction (which would result
in adding another element s′′
c′ to the call stack). Note that the call
stack records the sequence of calling states, hence the suffix sc :: S
indicates a pending call initiated by the execution s of contract c.
Single-entrancy is particularly interesting in that it constitutes a
generic robustness property of smart contracts. In contrast, other
prominent vulnerabilities [2, 3] are caused by functional correct-
ness issues that are particular to a specific contract. For spotting
such issues, contract-specific correctness properties need to be de-
fined and verified. We discuss the formalization of such properties
in § 3.5.
3 STATIC ANALYSIS OF EVM BYTECODE
Starting from the small-step semantics presented in § 2.2, we design
a sound reachability analysis that supports (among others) the vali-
dation of the single-entrancy property. We follow the verification
chain depicted in Figure 3: For showing the executions of a contract
to satisfy some property Φ, we formulate a Horn-clause based ab-
straction that abstracts the contract execution behavior and argue
about an abstracted property over abstract executions instead. This
reasoning is sound given that all concrete small-step executions are
5
Figure 3: Formal verification chain of eThor. ∆ ⊢Λ ∆′ denotes
that the abstract configuration ∆′ can be logically derived from ∆′
(within one step) using the Horn clauses in Λ.
modeled by some abstract execution and given that the abstracted
property over-approximates Φ.
A Horn-clause based abstraction for a small-step semantics →
is characterized by an abstraction function α that translates con-
crete configurations (here ) into abstract configurations (here
).
Abstract configurations are sets of predicate applications where
predicates (formally characterized by their signature S) range over
the values from abstract domains. These abstract arguments are
equipped with an order ≤ that can be canonically lifted to pred-
icates and further to abstract configurations, hence establishing
a notion of precision on the latter. Intuitively, α translates a con-
crete configuration into its most precise abstraction. The abstract
semantics is specified by a set of Constrained Horn clauses Λ over
the predicates from S and describes how abstract configurations
evolve during abstract execution. A Constrained Horn clause is a
logical implication that can be interpreted as an inference rule for
a predicate, consequently an abstract execution consists of logical
derivations from an abstract configuration using Λ. A Horn-clause
based abstraction constitutes a sound approximation of small-step
semantics → if every concrete (multi-step) execution →∗
′ can
be simulated by an abstract execution: More precisely, from the
abstract configuration α( ) one can logically derive using Λ an
abstract configuration
that constitutes an over-approximation of
′ (so is at least as abstract as α( ′)). A formal presentation of the
soundness statement is given in § 3.4 while a characterization in
abstract interpretation terminology is deferred to § B.1. A sound ab-
straction allows for the provable analysis of reachability properties:
Such properties can be expressed as sets of problematic configu-
rations (here ). Correspondingly, a sound abstraction for such a
property is a set of bad abstract configurations (here
) which con-
tains all possible over-approximations of the bad concrete states.
The soundness of the abstract semantics then guarantees that if no
bad abstract configuration from this set can be entered, also no bad
configuration can be reached in the concrete execution.
3.1 Main Abstractions
Our analysis abstracts from several details of the original small-step
semantics. In the following we overview the main abstractions:
Blockchain environment. The analysis describes the invocation of a
contract (in the following denoted as c∗) in an arbitrary blockchain
environment, hence is not modeling the execution environment as
12345?Small-step SemanticsAbstract Semanticsconcrete executionabstract execution∀∃......SoundnessΛΛ≤𝛼𝛼bad concretestatesReachability PropertyReachability Querybad abstractstates∀∀Soundness𝛼≤⇒=contract execution behaviorproperty abstraction𝛼𝛼𝛼𝛼𝛼≤≤≤≤ΛΛΛΛΛΛΛΛΛΛΛΦ⊨?...ΛΛAccepted for ACM CCS, 2020
Clara Schneidewind, Ilya Grishchenko, Markus Scherer, and Matteo Maffei
Sc∗
ˆD
∋ p
|
|
|
pc ∈ {0, . . . , |c∗ .code| − 1}
:=
:=
MStatepc : (N × (N → ˆD)) × (N → ˆD) × (N → ˆD) × B → B
Exc : B → B
Halt : (N → ˆD) × B → B
N ∪ {⊤}
Figure 4: Definition of the predicate signature Sc∗ and the
abstract domain ˆD.
well as large fractions of the global state. Indeed, most of this infor-
mation is not statically known as the state of the blockchain at con-
tract execution cannot be reliably predicted. As a consequence, the
analysis has to deal with a high number of unknown environment
inputs in the abstract semantics. Most prominently, the behavior
of other contracts needs to be appropriately over-approximated,
which turns out to be particularly challenging since such contracts
can interact with c∗ in multitudinous ways.
Gas modelling. The contract gas consumption is not modeled. The
gas resource, which is meant to bound the contract execution, is
set by the transaction initiator and hence not necessarily known
at analysis time. For this reason, our analysis takes into account
that a contract execution might exceptionally halt at any point due
to an out-of-gas exception, which does not affect the precision of
the analysis for security properties that consider arbitrary contract
invocations (and hence arbitrary gas limits).
Memory model. In the EVM the local memory is byte-indexed, while
the machine stack holds words (encompassing 32 bytes). Conse-
quently loading a machine word from memory requires to assemble
the byte values from 32 consecutive memory cells. However, as al-
ready described in [45], in practice reasoning about this conversion
between words and bytes is hard. Therefore, we model memory in
our abstraction as a word array: this enables very cheap accesses in
case that memory is accessed at the start of a new memory word,
and otherwise just requires the combination of two memory words.
Callstack. The callstack is captured by a two-level abstraction distin-
guishing only between the original execution of c∗ (call level 0) and