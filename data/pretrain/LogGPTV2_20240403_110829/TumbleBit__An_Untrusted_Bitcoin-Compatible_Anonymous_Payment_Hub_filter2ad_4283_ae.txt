is the exchange of a puzzle (and its solution).
No other secret information about Aj is revealed to B∗
i .
Thus, B∗
i cannot add any additional information to the
view of T , that T can use to harm fairness for Aj.
We do note, however, that an irrational Bob B∗
i and T collude. Now suppose that B∗
i can
misbehave by handing Alice Aj an incorrect puzzle z∗.
In this case, the fairness of the puzzle-solver protocol
ensures that Alice Aj will pay the Tumbler T for a
correct solution ∗ to puzzle z∗. As such, Bob Bi will
be expected to provide Alice Aj with the appropriate
goods or services in exchange for the puzzle solution
∗. However, the puzzle solution ∗ will be of no value
to Bob Bi, i.e., Bob cannot use ∗ to claim a bitcoin
during the Cash-Out Phase. It follows that the only party
harmed by this misbehavior is Bob Bi himself. As such,
we argue that such an attack is of no importance.
Case A∗
j and T collude. Similarly, even if A∗
j and T
collude, fairness for an honest Bi still follows from the
fairness of the puzzle-promise protocol. This is because
A∗
j ’s interaction with Bi
is restricted in receiving a
puzzle z, and handing back a solution. While A∗
j can
always give Bi an invalid solution ∗, Bi can easily
check that the solution is invalid (since (∗)e (cid:54)= z
mod N) and refuse to provide goods or services.
Case A∗
j , B∗
i and T
j , B∗
i and T collude. Suppose A∗
all collude to harm some other honest A and/or B. This
can be reduced to one of the two cases above because
i and T ∗, while
an honest A will only interact with B∗
an honest B will only interact with A∗
j and T .
B. Unlinkability
Unlinkability is deﬁned in Section III-C and must
hold against a T that does not collude with other users.
We show that all interaction multi-graphs G compatible
with T ’s view are equally likely.
First, note that all TumbleBit payments have the
same denomination (1 bitcoin). Thus, T ∗ cannot learn
anything by correlating the values in the transactions.
Next, recall from Section III-A, that all users of Tum-
bleBit coordinate on phases and epochs. Escrow trans-
actions are posted at the same time, during the Escrow
Phase only. All Tescr(T ,B) cash-out
transactions are
posted during the Cash-Out Phase only. All payments
made from Ai and Bj occur during the Payment Phase
only, and payments involve no direct interaction be-
tween T and B. This rules out timing attacks where the
Tumbler purposely delays or speeds up its interaction
with some payer Aj, with the goal of distinguishing
some behavior at the intended payee Bi. Even if the
Tumbler T ∗ decides to cash-out with Aj before the
Payment Phase completes (as is done in Section V-C
when Aj misbehaves), all the Bi still cash out at the
same time, during the Cash-Out Phase.
transcripts of
the puzzle-
promise and puzzle-solver protocols are information-
theoretically unlinkable. This follows because the puz-
zle z used by any Aj in the puzzle-solver protocol is
equally likely to be the blinding of any of the puzzles z
that appear in the puzzle-promise protocols played with
any Bi (see Section III-A, equation (2)).
Next, observe that
Finally, we assume secure channels, so that T ∗
cannot eavesdrop on communication between Aj’s and
Bi’s, and that T ∗ cannot use network information to
correlate Aj’s and Bi’s (by e.g., observing that they
share the same IP address). Then, the above two obser-
vations imply that all interaction multi-graphs, that are
compatible with the view of T ∗, are equally likely.
C. Limitations of Unlinkability
TumbleBit’s unlinkability (see Section III-C) is in-
spired by Chaumian eCash [12], and thus suffers from
similar limitations. (The full version [20] discusses the
limitations of Chaumian eCash [12] in more detail.) In
what follows, we assume that Alice has a single Bitcoin
address AddrA, and Bob has Bitcoin address AddrB.
Alice/Tumbler collusion.
Our unlinkability deﬁni-
tion assumes that the Tumbler does not collude with
other TumbleBit users. However, collusion between the
Tumbler and Alice can be used in a ceiling attack.
Suppose that some Bob has set up a TumbleBit payment
11
channel that allows him to accept up to Q TumbleBit
payments, and suppose that Bob has already accepted Q
payments at time t0 of the Payment Phase. Importantly,
the Tumbler, working alone, cannot learn that Bob is no
longer accepting payments after time t0. (This follows
because the Tumbler and Bob do not interact during the
Payment Phase.) However, the Tumbler can learn this by
colluding with Alice: Alice offers to pay Bob at time t0,
and ﬁnds that Bob cannot accept her payment (because
Bob has “hit the ceiling” for his payment channel). Now
the Tumbler knows that Bob has obtained Q payments at
time t0, and he can rule out any compatible interaction
graphs that link any payment made after time t0 to Bob.
If we can prevent ceiling attacks (e.g., by requiring
Bob to initiate every interaction with Alice) then Bob’s
puzzle z cannot be linked to any payee’s Bitcoin address
AddrB1, ..., AddrBι, even if Alice and the Tumbler
collude; see the full version [20].
Bob/Tumbler collusion.
Bob and the Tumbler can
collude to learn the true identity of Alice. Importantly,
this collusion attack is useful only if Bob can be paid by
Alice without learning her true identity (e.g., if Alice is
a Tor user). The attack is simple. Bob reveals the blinded
puzzle value z to the Tumbler. Now, when Alice asks
that Tumbler to solve puzzle z, the Tumbler knows that
this Alice is attempting to pay Bob. Speciﬁcally, the
Tumbler learns that Bob was paid by the Bitcoin address
AddrA that paid for the solution to puzzle z.
There is also a simple way to mitigate this attack.
Alice chooses a fresh random blinding factor r(cid:48) ∈ Z∗
N
and asks the Tumbler to solve the double-blinded puzzle
z = (r(cid:48))e · z mod N.
(5)
Once the Tumbler solves the double-blinded puzzle z,
Alice can unblind it by dividing by r(cid:48) and recovering
the solution to single-blinded puzzle z. This way, the
Tumbler cannot link the double-blinded puzzle z from
Alice to the single-blinded puzzle z from Bob.
However, even with double blinding, there is still a
timing channel. Suppose Bob colludes with the Tum-
bler, and sends the blinded puzzle value z to both Alice
and the Tumbler at time t0. The Tumbler can rule out
the possibility that any payment made by any Alice
prior to time t0 should be linked to this payment to
Bob. Returning to the terminology of our unlinkability
deﬁnition (Section III-C), this means that Bob and the
Tumbler can collude to use timing information to rule
out some compatible interaction graphs.
Potato attack. Our deﬁnition of unlinkability does
not consider external information. Suppose Bob sells
potatoes that costs exactly 7 bitcoins, and the Tumbler
knows that no other payee sells items that cost exactly 7
bitcoins. The Tumbler can use this external information
rule out compatible interaction graphs. For instance, if
Alice made 6 TumbleBit payments, the Tumbler infers
that Alice could not have bought Bob’s potatoes.
Intersection attacks. Our deﬁnition of unlinkability
applies only to a single epoch. Thus, as mentioned in
Section IV-A and [9], [32], our deﬁnition does not rule
out the correlation of information across epochs.
Abort attacks. Our deﬁnition of unlinkability applies
to payments that complete during an epoch. It does not
account for information gained by strategically aborting
payments. As an example, suppose that the Tumbler
notices that during several TumbleBit epochs, (1) Alice
always makes a single payment, and (2) Bob hits the
ceiling for his payment channel. Now in the next epoch,
the Tumbler aborts Alice’s payment and notices that
Bob no longer hits his ceiling. The Tumbler might guess
that Alice was trying to pay Bob.
VIII.
IMPLEMENTATION
To show that TumbleBit is performant and com-
patible with Bitcoin, we implemented TumbleBit as a
classic tumbler. (That is, each payer and payee can
send/receive Q = 1 payment/epoch.) We then used
TumbleBit to mix bitcoins from 800 payers (Alice A)
to 800 payees (Bob B). We describe how our imple-
mentation instantiates our TumbleBit protocols. We then
measure the off-blockchain performance, i.e., compute
time, running time, and bandwidth consumed. Finally,
we describe two on-blockchain tests of TumbleBit.
A. Protocol Instantiation
eterized by 1/(cid:0)m+n
m
We instantiated our protocols with 2048-bit RSA.
The hash functions and signatures are instantiated as
described in the captions to Figure 3 and Figure 4.7
Choosing m and n in the puzzle-solving protocol. Per
Theorem 1, the probability that T can cheat is param-
(cid:1) where m is the number of “real”
values and n is the number of “fake” values in Figure 3.
From a security perspective, we want m and n to be
as large as possible, but in practice we are constrained
by the Bitcoin protocol. Our main constraint is that m
RIPEMD-160 hash outputs must be stored in Tpuzzle
of our puzzle-solver protocol. Bitcoin P2SH scripts
(as described below) are limited in size to 520 bytes,
which means m ≤ 21. Increasing m also increases the
transaction fees. Fortunately, n is not constrained by the
Bitcoin protocol; increasing n only means we perform
more off-blockchain RSA exponentiations. Therefore,
we chose m = 15 and n = 285 to bound T ’s
cheating probability to 2−80. (2−80 equals RIPEMD-
160’s collision probability.)
7There were slight difference between our protocols as described
in this paper and the implementation used in some of the tests. In
Figure 3, A reveals blinds rj∀j ∈ R to T , our implementation instead
j∀j ∈ R. This change does not affect
reveals an encrypted version re
performance, since A hold both rj and re
j . Also, our implementation
omits the index hashes hR and hF from Figure 4; these are two 256-
bit hash outputs and thus should not signiﬁcantly affect performance.
We have since removed these differences.
12
1/(cid:0)µ+η
µ
Choosing µ and η in the puzzle-promise protocol.
Theorem 2 also allows T to cheat with probability
(cid:1). However, this protocol has no Bitcoin-related
constraints on µ and η. Thus, we take µ = η = 42 to
achieve a security level of 2−80 while minimizing the
number of off-blockchain RSA computations performed
in Figure 4 (which is µ + η).
Scripts. By default, Bitcoin clients and miners only
operate on transactions that fall into one of the ﬁve
standard Bitcoin transaction templates. We therefore
conform to the Pay-To-Script-Hash (P2SH) [3] tem-
plate. To format transaction Toffer (per Section II) as
a P2SH, we specify a redeem script (written in Script)
whose condition C must be met to fulﬁll the transaction.
This redeem script is hashed and stored in transaction
Toffer. To transfer funds out of Toffer, a transaction Tfulﬁll
is constructed. Tfulﬁll includes (1) the redeem script and
(2) a set of input values that the redeem script is run
against. To programmatically validate that Tfulﬁll can
fulﬁll Toffer, the redeem script Tfulﬁll
is hashed, and
the resulting hash value is compared to the hash value
stored in Toffer. If these match, the redeem script is run
against the input values in Tfulﬁll. Tfulﬁll fulﬁlls Toffer if
the redeem script outputs true. All our redeem scripts
include a time-locked refund condition, that allows the
party offering Toffer to reclaim the funds after a time
window expires. To do so, the party signs and posts
a refund transaction Trefund that points to Toffer and
reclaims the funds locked in Toffer. We reproduce our
scripts in the full version [20].
B. Off-Blockchain Performance Evaluation
We evaluate the performance for a run of our pro-
tocols between one payer Alice A, one payee Bob B
and the Tumbler T . We used several machines: an EC2
t2.medium instance in Tokyo (2 Cores at 2.50 GHz,
4 GB of RAM), a MacBook Pro in Boston (2.8 GHz
processor, 16 GB RAM), and Digital Ocean nodes in
New York, Toronto and Frankfurt (1 Core at 2.40 GHz
and 512 MB RAM).
Puzzle-solver protocol (Table II).
The total network
bandwidth consumed by our protocol was 269 Kb,
which is roughly 1/8th the size of the “average web-
page” per [45] (2212 Kb). Next, we test the total (off-
blockchain) computation time for our puzzle-solver pro-
tocol (Section V-A) by running both parties (A and T )
on the Boston machine. We test the impact of network
latency by running A in Boston and T in Tokyo, and
then with T in New York. (The average Boston-to-
Tokyo Round Trip Times (RTT) was 187 ms and the
Boston-to-New York RTT was 9 ms.) From Table II, we
see the protocol completes in < 4 seconds, with running
time dominated by network latency. Indeed, even when
A and T are very far apart, our 2048-bit RSA puzzle
solving protocol is still faster than [30]’s 16x16 Sudoku
puzzle solving protocol, which takes 20 seconds.
13
Next,
TumbleBit as a classic tumbler (Table II).
we consider classic Tumbler mode (Section IV). We
consider a scenario where A and B use the same
machine, because Alice A wants anonymize her bitcoin
by transferring it to a fresh ephemeral bitcoin address
that she controls. Thus, we run (1) A and B in Boston
and T in Tokyo, and (2) A and B in Boston and T
in New York. To prevent the Tumbler T for linking
A and B via their IP address, we also tested with
(a) B connecting to T over Tor, and (b) both A and
B connected through Tor. Per Table II, running time
is bound by network latency, but
is < 11 seconds
even with when both parties connect to Tokyo over
Tor. Connecting to New York (in clear) results in ≈ 1
second running time. Compute time is only 0.6 seconds,
again measured by running A, B and T on the Boston
machine. Thus, TumbleBit’s performance, as a classic
Tumbler, is bound by the time it takes to conﬁrm 2
blocks on the blockchain (≈ 20 minutes).
Performance of TumbleBit’s Phases. (Table III) Next,
we break out the performance of each of TumbleBit’s
phases when Q = 1. We start by measuring compute
time by running all A, B and T on the Boston machine.
Then, we locate each party on different machines. We
ﬁrst set A in Toronto, B in Boston and T in New York
and get RTTs to be 22 ms from Boston to New York, 23
ms from New York to Toronto, and 55 ms from Toronto
to Boston. Then we set A in Frankfurt, B in Boston and
T in Tokyo and get RTTs to be 106 ms from Boston
to Frankfurt, 240 ms from Frankfurt to Tokyo, and 197
ms from Tokyo to Boston. An off-blockchain payment
in the Payment Phase completes in under 5 seconds and
most of the running time is due to network latency.
C. Blockchain Tests
Our on-blockchain tests use TumbleBit as a classic
tumbler, where payers pay themselves into a fresh
ephemeral Bitcoin address. All transactions are visible
on the blockchain. Transaction IDs (TXIDs) are hyper-
linked below. The denomination of each TumbleBit pay-
ment (i.e., the price of puzzle solution) was 0.0000769
BTC (roughly $0.04 USD on 8/15/2016). Table IV
details the size and fees8used for each transaction.
Test where everyone behaves.
In our ﬁrst test, all
parties completed the protocol without aborting. We
tumbled 800 payments between ℵ = 800 payers and
ℵ = 800 payees, resulting in 3200 transactions posted
to the blockchain and a k-anonymity of k = 800.The
puzzle-promise escrow transactions Tescr(T ,B) are all
funded from this TXID and the puzzler-solver escrow
transactions Tescr(A,T ) are all funded from this TXID.