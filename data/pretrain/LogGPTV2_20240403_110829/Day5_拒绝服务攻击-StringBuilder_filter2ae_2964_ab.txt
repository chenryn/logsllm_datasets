#### 3\. 配置web.xml
web.xml
      Archetype Created Web Application
        Day8
        com.ananaskr.day8.GetPath
        Day8
        /day8
#### 4\. 构造payload
    icons=..&filename=hacked.txt
#### 5\. 结果
从结果可看，是可以到上一级目录的  
# Day9 ReDoS
### 代码
Day 9  
### 漏洞点
代码中的whitelist参数是正则表达式模式的部分。value参数值在第22行被验证是否符合whitelist组成的模式。由于whitelist和value的值都是由攻击者控制的，攻击者可以注入任意正则表达式并控制该表达式的值与之相配。使用复杂的正则表达式产生CPU消耗，从而导致DoS。这种DoS的方式被称为ReDoS。
### 复现过程
#### 1\. 环境
  * IDEA+maven-archetype-webapp
  * Java8
#### 2\. 配置web.xml
web.xml
      Archetype Created Web Application
        day9
        com.ananaskr.day9.Validator
        day9
        /day9
#### 3\. 修正代码
  * 将连接whitelist作为pattern的"["和"]"分别改为"("和")"。在前面的测试中，发现"["和"]"，并不能导致拒绝服务攻击。将其改成"("和")"即可导致拒绝服务。
  * 在isInWhiteList()函数前后增加代码以便进行计时。
修改后的代码如下所示  
Validator.java
    package com.ananaskr.day9;
    import java.util.regex.*;
    import java.io.IOException;
    import java.io.PrintWriter;
    import javax.servlet.http.*;
    public class Validator extends HttpServlet {
        protected void doPost(HttpServletRequest request,
                              HttpServletResponse response) throws IOException {
            response.setContentType("text/plain");
            response.setCharacterEncoding("UTF-8");
            PrintWriter out = response.getWriter();
            long startTime = System.currentTimeMillis();
            if (isInWhiteList(request.getParameter("whitelist"), request.getParameter("value"))) {
                out.print("Value is in whitelist.");
                System.out.println("This takes " + (System.currentTimeMillis() -                        startTime));
            } else {
                out.print("Value is not in whitelist.");
                System.out.println("This takes " + (System.currentTimeMillis() -                        startTime));
            }
            out.flush();
        }
        public static boolean isInWhiteList(String whitelist, String value) {
            Pattern pattern = Pattern.compile("^(" + whitelist + ")+");
            Matcher matcher = pattern.matcher(value);
            System.out.println("The length of the value is: "+ value.length());
            return matcher.matches();
        }
    }
#### 4\. 构造payload
构造复杂的正则表达式，以达到消耗CPU的目的。payload为
    whitelist=([a-z])+.)+[A-Z]([a-z]&value=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
在发送payload需要对+进行编码，否则会被当成空格。  
#### 5\. 结果
通过下图可以看出，当a的数量按比例增长时，其消耗的时间成指数增长，易受到ReDoS攻击。  
# Day10 XML响应中的XSS
### 代码
Day 10  
### 漏洞点
这段代码中，用户输入通过@RequestParam注解从GET或POST参数"name"到达函数中的name参数。且第三行响应的"Content-Type"被设置为"text/xml"。输入流是攻击者可控的，则他可以注入具有xml名称空间属性"[http://www.w3.org/1999/xhtml"的script标签，从而执行XSS。](http://www.w3.org/1999/xhtml)
### 复现过程
#### 1\. 环境
  * IDEA+springmvc
  * 导入servlet的jar包
#### 2\. 配置web.xml
            encodingFilter
            org.springframework.web.filter.CharacterEncodingFilter
                encoding
                UTF-8
                forceEncoding
                true
            encodingFilter
            /*
            contextConfigLocation
            /WEB-INF/applicationContext.xml
            org.springframework.web.context.ContextLoaderListener
            dispatcher
            org.springframework.web.servlet.DispatcherServlet
            1
            dispatcher
            /
#### 3\. 配置dispatcher-servlet.xml
                /WEB-INF/
                .jsp
#### 4\. 配置applicationContext.xml
#### 5\. 构造payload
CDATA指的是不应由XML解析器进行解析的文本数据，因此需要将其闭合以避免注入的JS代码变成文本。然后注入带有命名空间属性
**""**的script标签，将script标签定义为具有html属性的script标签。因此可以被浏览器当作JavaScript代码执行。payload如下:
    name=test] ]>alert(1)<![CDATA[
#### 6\. 结果