j∈[n] cj·kT agj,x )t·r1,x
)t·r1,x
−h0
w
j∈[n] cj ρ(x)j
(cid:80)
−t·r1,x·h0·(cid:80)
j∈[n] cj ρ(x)j
where
D1,x = gλx·a1 vrx , D2,x = g
−λx vrx
1 gz1,x ,
D3,x = (gb)
−z1,x , D4,x = vrx
D6,x = (gb)r2,x , D7,x = gr1,x ,
2 gz2,x , D5,x = (gb)
−z2,x ,
Kj,x = (ghj g
−h0ρ(x)j
wkT agj,x )r1,x ∀j ∈ [n].
constants wx such that(cid:80)
then it calculates T agx := (cid:80)
(cid:89)
Decrypt(SK, CT , P K, A, S) First, the algorithm calculates
ρ(x)∈S ωxAx = (1, 0, ...0). For each
x ∈ S, it calculates c0, ..., cn by the same manner of Encrypt,
If
T agx (cid:54)= 0, it calculates
j=[n] cj · kT agj,x − cT ag.
(cid:89)
ωx ) · e(C2,
D1,x
W1 :=e(C1,
ρ(x)∈S
··· e(C5,
D5,x
ωx )
W2 := e(C6,
ω) · e(C7,
D6,x
D2,x
ωx )
D7,x
ω)
ρ(x)∈S
(cid:89)
ρ(x)∈S
ρ(x)∈S
(cid:89)
(cid:89)
(cid:89)
ρ(x)∈S
ρ(x)∈S
(cid:19)ωx
(cid:33)1/T agx
.
SK := (D1,x, D2,x, D3,x, D4,x, D5,x, D6,x, D7,x,
{Kj,x, kT agj,x;∀j ∈ [n]};∀x ∈ [m])
= e(g, gc1h1+...+cnhn )t·r1,x e(g, g)
(cid:80)
j∈[n] cj·kT agj,x ,
· e(g, w)t·r1,x
827and
e(E1, D7,x)
Therefore,
(cid:89)
j=[n]
= e((gh0c0+...+hncn wcT ag)t, gr1,x )
= e(gh0c0+h1c1+...+hncn , g)t·r1,x e(w, g)t·r1,x·cT ag.
e(
(E0, Kj,x)cj )/e(E1, D7,x)
−r1,x·t·h0·c0 e(g, g)
(cid:80)
j=[n] cj·kT agj,x)−cT ag)
−r1,x·t·h0
j∈[n] cj ρ(x)j
−h0r1,x·t(c0+c1ρ(x)+c2ρ(x)2+...+cnρ(x)n)
= e(g, g)
· e(g, w)r1,x·t(((cid:80)
· e(g, w)r1,x·t(((cid:80)
= e(g, w)r1,x·t(((cid:80)
= e(g, g)
j=[n] cj·kT agj,x)−cT ag)
j=[n] cj·kT agj,x)−cT ag)
(cid:89)
(cid:33)1/T agx
Atti∈S
It worth noting that the last equality holds because
c0 +c1ρ(x)+c2ρ(x)2 +...+cnρ(x)n =
(ρ(x)−Atti) = 0.
Because all tags are given,
(cid:32) e(E0,(cid:81)
j=[n](Kj,x)cj )
e(C7 · E1)
Therefore, it can compute
w3,x :=
(cid:89)
because(cid:80)
ρ(x)∈S
(
W1,x
W2,xW3,x
)ωx =
(cid:89)
ρ(x)∈S
(e(g, g)λxa1bs2 )ωx
= e(g, g)αa1bs2
ρ(x)∈S ωxλx = α. Finally, M = C/e(g, g)αa1bs2 .
3.2 Security Analysis
We deﬁne two semi-functional algorithms SFKeyGen and
SFEnc. We remind that since we prove the security under
the semi-adaptive security model of KP-ABE, the simulator
always knows the target set S∗ for the challenge ciphertext
when it creates semi-functional keys.
SFKeyGen(MSK, PK, S∗, A) The algorithm takes as in-
puts the target set of attribute S∗ for the challenge cipher-
text and an access structure A = (A, ρ) where A is an m× (cid:96)
matrix. First, to generate the semi-functional key, the algo-
rithm generates a normal key
(cid:48)
1,x, ..., D
7,x,{K
(cid:48)
(cid:48)
j,x, kT ag
j,x;∀j ∈ [n]}
(cid:48)
D
∀x ∈ [m]
using KeyGen. Then, it sets
D1,x = D
(cid:48)
1,x, ..., D7,x = D
(cid:48)
7,x,
{Kj,x = K
(cid:48)
j,x, kT agj,x = kT ag
j,x;∀j ∈ [n]}∀x s.t. ρ(x) ∈ S
(cid:48)
For the rest key elements, It randomly selects γx, ...γxθ
from Zp for each x such that ρ(x) /∈ S∗ and deﬁnes D1,x,
D2,x, D4,x as
∗
D1,x = D
1,x · g
(cid:48)
−a1a2γx , D2,x = D
2,x · ga2γx ,
(cid:48)
D4,x = D
4,x · ga1γx ∀x s.t. ρ(x) /∈ S
(cid:48)
∗
= e(g, w)r1,x·t
D
(cid:48)
1,x, ..., D
7,x,{K
(cid:48)
(cid:48)
j,x, kT ag
j,x;∀j ∈ [n]}
(cid:48)
∀x ∈ [m]
and sets other elements to equal those of the normal key.
SFEncrypt(P K, M, S) For a set of attributes S, the algo-
rithm generates a normal ciphertext
(cid:48)
1, cT ag
(cid:48)
1, ..., C
(cid:48)
7, E
(cid:48)
0, E
, C
C
(cid:48)
(cid:48)
by using Encrypt. Then, it sets a semi-functional cipher-
text identically with the normal ciphertext except C4, ..., C7.
Then, it randomly selects κ from Zp and sets C4, ..., C7 as
(cid:48)
7vba2κ
4 · gba2κ, C5 = C
(cid:48)
5 · ga2κ, C6 = C
(cid:48)
(cid:48)
6va2κ
, C7 = C
C4 = C
.
2
2
In our security proof, we utilize a hybrid model to convert
a normal key to a semi-functional key.
Instead of chang-
ing a type of the key at once, we change the key elements
associated with an attribute which is not included in S∗ one-
by-one. In order to describe this process, we additionally de-
ﬁne a semi-functional key generation algorithm SFKeyGen(cid:48).
It should be noted that the semi-functional key generation
algorithm additionally takes as input an index θ.
SFKeyGen(cid:48)(MSK, PK, S∗, A, θ) The algorithm takes as in-
puts an index θ, the target set of attribute S∗ for the chal-
lenge ciphertext and an access structure A = (A, ρ) where
A is an m × (cid:96) matrix. We let xi denote the index of the ith
row Ax of A such that ρ(x) /∈ S∗. To generate the semi-
functional key, the algorithm generates a normal key
using KeyGen.
1. For all x such that ρ(x) ∈ S∗, it sets
D1,x = D
kT agj,x = kT ag
(cid:48)
1,x, ..., D7,x = D
7,x,{Kj,x = K
(cid:48)
(cid:48)
j,x,
j,x;∀j ∈ [n]} ∀x s.t. ρ(x) ∈ S
(cid:48)
∗
2. For all xi such that i ≤ θ, it randomly selects γx1 , ...γxθ
from Zp, and deﬁnes D1,xi , D2,xi , D4,xi as
2,xi · ga2γxi ,
(cid:48)
−a1a2γxi , D2,xi = D
4,xi · ga1γxi
(cid:48)
1,xi · g
(cid:48)
D4,xi = D
D1,xi = D
and sets other elements equal to those of the normal key.
3. For all xi such that i > θ, it sets,
D1,xi = D
(cid:48)
1,xi , ..., D7,xi = D
(cid:48)
7,xi ,
{Kj,xi = K
(cid:48)
j,xi , kT agj,(xi) = kT ag
j,(xi);∀j ∈ [n]}
(cid:48)
It should be noted that SFKeyGen(cid:48)(MSK, PK, S∗, (A, ρ), Θ)
is identical with SFKeyGen(MSK, PK, S∗, (A, ρ)) where Θ
is the total number of rows, Ax, such that ρ(x) /∈ S∗ where
Ax is the xth row of the access matrix A.
GameReal This game is identical with the semi-adaptive se-
curity model. It should be noted that all keys and the chal-
lenge ciphertext are normal in this game.
Gameδ,0 is identical with Gameδ−1,Θδ−1 where Θδ−1 is the
total number of rows, Ax, such that ρ(x) /∈ S∗ of the δ − 1th
In this game, the ﬁrst δ − 1 keys are generated by
key.
SFKeyGen(MSK, PK, S∗, A).
It should be noted that in
Game0,0 all keys are normal, but the challenge ciphertext is
semi-functional.
Gameδ,θ We let xi denote the index of the ith row Ax of A
such that ρ(x) /∈ S∗ where (A, ρ) is an access structure for
828the δth key. This game is identical with Gameδ,θ−1 except
the key elements for Axθ of the δth key. In this game, the
key elements for Ax1 , ..., Axθ are semi-functional. It means
SFKeyGen(cid:48)(MSK, PK, S∗, A, θ) are used to generate the δth
key.
GameF inal This game is identical with Gameq,Θq except the
message encrypted in the challenge ciphertext where q is
the total number of key queries in Phase I and Phase II. In
this game, a random message replaces the message in the
challenge ciphertext.
Theorem 1. Our KP-ABE scheme with short ciphertexts
is semi-adaptively secure under the decisional linear assump-
tion.
Proof: This is proved by Lemmas 1, 2, and 3.
2
Lemma 1. (Semi-functional ciphertext invariance)
Suppose there exists a PPT algorithm A to distinguish be-
tween GameReal and Game0,0 with a non-negligible advan-
tage . Then we can build an algorithm B breaking DLIN
with the advantage, , using A.
Proof: This proof is similar with the proof of Lemma 1. B
takes (g, f, ν, gc1 , f c2 , T ) as an instance from DLIN assump-
tion. It will simulate either GameReal or Game0,0 based on
the value of T .
Setup: The algorithm selects a1, b, yv, yv1 , yv2 , yw, h0, ..., hn
from Zp, and sets ga1 = f, ga2 = ν. Then, it publishes the
public parameters as follows
g, gb, gb·a1 = f b, gb·a2 = (ν)b, w = gyw , gh0 , ..., ghn ,
2 , e(g, g)α·a1·b = e(g, f )α·b.
τ1 = f yv1 , τ2 = νyv2 , τ b
1 , τ b
It also sets MSK = {gα, gα·a1 = f α, v, v1, v2}.
Init: Before it generates any private key, B requests to the
adversary a target set of attributes S∗ which will be used to
generate the challenge ciphertext.
Phase I and II: To generate normal keys, B uses the key gen-
eration algorithm, KeyGen. It is possible because B knows
all public parameter and MSK.
Challenge: When A requests the challenge ciphertext for
S∗ = {Att1, ..., Attu} with two message M0 and M1, B ran-
domly selects β from {0, 1}. Then, it generates a normal
ciphertext, C(cid:48), C(cid:48)
It
sets the challenge ciphertext as follows:
2, cT ag(cid:48) using Encrypt.
1, ..., C(cid:48)
7, E(cid:48)
0, E(cid:48)
3 · (f c2 ),
(cid:48)
−yv1 ·T yv2 ,
C = C
C1 = C
(cid:48)
1, (gc1 )b, C2 = C
C4 = C
(cid:48)
4(T )b, C5 = C
(cid:48) ·(cid:0)e(gc1 , f ) · e(g, f c2 )(cid:1)b·α,
2 ·(cid:0)f c2(cid:1)−b, C3 = C
−yv1 · T yv2(cid:1)b,
7 ·(cid:0)(gc1 )yv · (f c2 )
6·(gc1 )yv ·(f c2 )
(cid:48)
5·T, C6 = C
(cid:48)
(cid:48)
(cid:48)
(cid:48)
0, E1 = E