# Title: Cujo: Efficient Detection and Prevention of Drive-by-Download Attacks

## Authors:
- Konrad Rieck, Machine Learning Group, Technische Universität Berlin, Germany
  - Email: konrad.rieck@tu-berlin.de
- Tammo Krueger, Intelligent Data Analysis, Fraunhofer Institute FIRST, Germany
  - Email: tammo.krueger@first.fraunhofer.de
- Andreas Dewald, Laboratory for Dependable Distributed Systems, University of Mannheim, Germany
  - Email: andreas.dewald@uni-mannheim.de

## Abstract
JavaScript is a fundamental component of dynamic web content on the Internet. While it has significantly enhanced web applications, it also serves as a vector for drive-by-download attacks, which exploit vulnerabilities in web browsers and their extensions to silently download malicious software. Due to the diversity and frequent use of obfuscation in these attacks, static code analysis is often ineffective. Although dynamic analysis and honeypots can identify such attacks, they typically introduce significant overhead, making immediate prevention impractical.

In this paper, we present Cujo, a system for the automatic detection and prevention of drive-by-download attacks. Integrated into a web proxy, Cujo transparently inspects web pages and blocks the delivery of malicious JavaScript code. It extracts both static and dynamic code features in real-time and uses efficient machine learning techniques to analyze these features for malicious patterns. Our experiments demonstrate that Cujo detects 94% of drive-by downloads with a low false-positive rate and a median run-time of 500 ms per web page, a performance level that, to the best of our knowledge, surpasses previous work in this area.

## Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—Security and protection; I.5.1 [Pattern Recognition]: Models—Statistical

## Keywords
Drive-by downloads, web security, static code analysis, dynamic code analysis, machine learning

## 1. Introduction
JavaScript is a ubiquitous tool for providing dynamic and interactive content on the Internet. Most websites, including major social networks like Facebook and Twitter, heavily rely on JavaScript to enhance the appearance and functionality of their services. Unlike server-based scripting languages, JavaScript is executed in the client's web browser, enabling direct interaction with the user and the browser environment. Despite the security policies in place, the tight integration of JavaScript with the browser and its extensions poses a significant security threat.

JavaScript is increasingly being used as a basis for drive-by-download attacks, which exploit vulnerabilities in web browsers and their extensions to silently download malicious software. These attacks leverage the complexity of browsers and their extensions, taking advantage of various vulnerabilities, such as insecure interfaces of third-party extensions, buffer overflows, and memory corruptions. According to Symantec, four of the top five most attacked vulnerabilities in 2009 were client-side vulnerabilities involved in drive-by-download attacks.

As a result, the detection of drive-by downloads has become a focal point in security research. Two main approaches have been proposed: static code analysis, which is often hindered by the frequent use of obfuscation, and dynamic analysis, which, while effective, introduces significant overhead. To address these challenges, we present Cujo, a system that combines the strengths of both static and dynamic analysis.

Embedded in a web proxy, Cujo transparently inspects web pages and blocks the delivery of malicious JavaScript code to the client. The key contributions of Cujo include:

- **Lightweight JavaScript Analysis:** Efficient methods for static and dynamic analysis of JavaScript code, providing comprehensive reports with minimal overhead.
- **Generic Feature Extraction:** A mapping from analysis reports to a vector space that is independent of specific attack characteristics, allowing for generic detection.
- **Learning-Based Detection:** The application of machine learning techniques to generate detection models, eliminating the need for manual rule creation and updates.

Our empirical evaluation, involving 200,000 web pages and 600 real drive-by-download attacks, demonstrates that Cujo detects 94% of the attacks with a false-positive rate of 0.002%, or 2 false alarms per 100,000 visited web sites. In terms of runtime, Cujo provides a median run-time of 500 ms per web page, including the downloading of web page content and full analysis of JavaScript code. To the best of our knowledge, Cujo is the first system capable of effectively and efficiently blocking drive-by downloads in practice.

The rest of this paper is organized as follows: Section 2 introduces Cujo and its detection methodology, including JavaScript analysis, feature extraction, and learning-based detection. Section 3 presents the experimental results and comparisons with related techniques. Section 4 discusses related work, and Section 5 concludes the paper.

## 2. Methodology
Drive-by-download attacks can vary widely in structure and form, depending on the exploited vulnerabilities and the use of obfuscation. Efficiently analyzing and detecting these attacks requires a careful balance between detection accuracy and runtime performance. Cujo addresses this challenge by employing lightweight static and dynamic code analysis, providing complementary views of JavaScript code. To avoid manually crafting detection rules, Cujo uses machine learning techniques to generalize from known attacks and automatically construct detection models. A schematic view of the system is shown in Figure 1.

Cujo is embedded in a web proxy and transparently inspects the communication between a web client and a web service. Before delivering web page data to the client, Cujo performs a series of analysis steps and blocks pages likely containing malicious JavaScript code. To improve processing performance, two types of caches are used: one for caching all incoming web data to reduce loading times and another for caching analysis results if the associated code has not changed within a limited period.

### 2.1 JavaScript Analysis
The first step in the analysis process is to obtain a comprehensive view of the JavaScript code. Cujo inspects all HTML and XML documents passing through the system for occurrences of JavaScript. For each requested document, it extracts all code blocks embedded using the `<script>` tag and contained in HTML event handlers, such as `onload` and `onmouseover`. Additionally, it recursively pre-loads all external code referenced in the document, including scripts, frames, and iframes, to obtain the complete code base of the web page. All code blocks from a requested document are then merged for further static and dynamic analysis.

As an example, consider the JavaScript code shown in Figure 2. This code is obfuscated using a simple substitution cipher and contains a routine for constructing a NOP sled, a common technique in memory corruption attacks. The static and dynamic analysis reports for this code snippet are shown in Figures 3 and 4, respectively.

### 2.2 Feature Extraction
In the second analysis step, Cujo extracts features from the static and dynamic analysis reports, suitable for applying detection methods. Unlike previous work, Cujo proposes a generic feature extraction method that is independent of specific attack characteristics and allows for the joint processing of static and dynamic analysis reports.

#### 2.2.1 Q-gram Features
The feature extraction builds on the concept of q-grams, which has been widely studied in intrusion detection. To unify the representation of static and dynamic analysis, each report is partitioned into a sequence of words using white-space characters. A fixed-length window is then moved over each report to extract subsequences of q words at each position, known as q-grams.

For example, the extraction of q-grams with \( q = 3 \) for two code snippets of static and dynamic analysis is shown below:
- `ID = ID + NUM` → (ID = ID), (= ID +), (ID + NUM)
- `SET a.b to "x"` → (SET a.b to), (a.b to "x")

Each report is represented by a set of q-grams, which reflect short patterns and provide the basis for mapping analysis reports to a vector space. The goal is to construct a vector space where reports sharing several q-grams lie close to each other, while those with dissimilar content are separated by large distances. Each q-gram is associated with a specific dimension in the vector space. Formally, the vector space is defined using the set \( S \) of all possible q-grams, and a corresponding mapping function for a report \( x \) is given by:
\[ \phi : x \rightarrow \left( \phi_s(x) \right)_{s \in S} \]
where
\[ \phi_s(x) = \begin{cases} 
1 & \text{if } x \text{ contains the q-gram } s, \\
0 & \text{otherwise}.
\end{cases} \]

The function \( \phi \) maps a report \( x \) to the vector space \( \mathbb{R}^{|S|} \).