---
author: Gustavo Duarte
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 5
  likes: 0
  sharetimes: 0
  viewnum: 8575
date: '2018-01-18 18:49:41'
editorchoice: false
excerpt: 我将从实践出发着眼于内存管理，并深入到它的内部结构。虽然这些概念很通用，但示例大都来自于 32 位 x86 架构的 Linux 和 Windows
  上。这第一篇文章描述了在内存中程序如何分布。
fromurl: http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/
id: 9255
islctt: true
largepic: /data/attachment/album/201801/18/184936hk1nkta39t714jt1.jpg
permalink: /article-9255-1.html
pic: /data/attachment/album/201801/18/184936hk1nkta39t714jt1.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 9393
- displayorder: 0
  raid: 9528
reviewer: ''
selector: ''
summary: 我将从实践出发着眼于内存管理，并深入到它的内部结构。虽然这些概念很通用，但示例大都来自于 32 位 x86 架构的 Linux 和 Windows
  上。这第一篇文章描述了在内存中程序如何分布。
tags:
- 内存管理
thumb: false
title: 剖析内存中的程序之秘
titlepic: true
translator: qhwdw
updated: '2018-01-18 18:49:41'
---
![](/data/attachment/album/201801/18/184936hk1nkta39t714jt1.jpg)
内存管理是操作系统的核心任务；它对程序员和系统管理员来说也是至关重要的。在接下来的几篇文章中，我将从实践出发着眼于内存管理，并深入到它的内部结构。虽然这些概念很通用，但示例大都来自于 32 位 x86 架构的 Linux 和 Windows 上。这第一篇文章描述了在内存中程序如何分布。
在一个多任务操作系统中的每个进程都运行在它自己的内存“沙箱”中。这个沙箱是一个 虚拟地址空间   virtual address space ，在 32 位的模式中它总共有 4GB 的内存地址块。这些虚拟地址是通过内核 页表   page table 映射到物理地址的，并且这些虚拟地址是由操作系统内核来维护，进而被进程所消费的。每个进程都有它自己的一组页表，但是这里有点玄机。一旦虚拟地址被启用，这些虚拟地址将被应用到这台电脑上的 *所有软件*，*包括内核本身*。因此，一部分虚拟地址空间必须保留给内核使用：
![Kernel/User Memory Split](/data/attachment/album/201801/18/184944wdn8i2oofzzyynh3.png)
但是，这并**不是**说内核就使用了很多的物理内存，恰恰相反，它只使用了很少一部分可用的地址空间映射到其所需要的物理内存。内核空间在内核页表中被标记为独占使用于 [特权代码](http://duartes.org/gustavo/blog/post/cpu-rings-privilege-and-protection) （ring 2 或更低），因此，如果一个用户模式的程序尝试去访问它，将触发一个页面故障错误。在 Linux 中，内核空间是始终存在的，并且在所有进程中都映射相同的物理内存。内核代码和数据总是可寻址的，准备随时去处理中断或者系统调用。相比之下，用户模式中的地址空间，在每次进程切换时都会发生变化：
![Process Switch Effects on Virtual Memory](/data/attachment/album/201801/18/184944hapz2flzafgd29pg.png)
蓝色的区域代表映射到物理地址的虚拟地址空间，白色的区域是尚未映射的部分。在上面的示例中，众所周知的内存“饕餮” Firefox 使用了大量的虚拟内存空间。在地址空间中不同的条带对应了不同的内存段，像 堆   heap 、 栈   stack 等等。请注意，这些段只是一系列内存地址的简化表示，它与 [Intel 类型的段](http://duartes.org/gustavo/blog/post/memory-translation-and-segmentation) *并没有任何关系* 。不过，这是一个在 Linux 进程的标准段布局：
![Flexible Process Address Space Layout In Linux](/data/attachment/album/201801/18/184944xpqp2n00ee25pmqm.png)