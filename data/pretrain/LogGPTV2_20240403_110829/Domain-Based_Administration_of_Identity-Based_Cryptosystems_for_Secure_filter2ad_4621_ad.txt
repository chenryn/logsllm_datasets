### 4.2.1 IBC and Pre-shared Keys

When the domain parameters of two parties are related, an additional option for key exchange becomes available. In the extreme case where both parties belong to the same domain (i.e., share the same domain parameters, including group parameters and domain public key) and have prior knowledge of each other's identities, they can utilize non-interactive IBC-based key exchange protocols to establish a shared secret key without any message exchanges [14, 25]. This approach, while appealing, is limited to members within the same security domain and results in keys that are subject to escrow. 

In practice, hosts using IKE to establish security associations typically need to exchange preliminary messages, such as nonces for freshness, algorithm proposals, or keying information for Perfect Forward Secrecy (PFS). Thus, they may not fully benefit from the non-interactive nature of these protocols. Additionally, the responder, in particular, may not know the initiator's identity unless it is available through the IP address or a hostname via reverse DNS. Although these non-interactive protocols can be more computationally efficient, their narrow applicability and the difficulty in determining when they can be used make them less attractive.

If the group parameters of the two parties are identical, even if their domain public keys differ, they can use a key exchange protocol similar to, but slightly less efficient than, the non-interactive protocols described above [4, 5]. This scenario occurs when the parties belong to different domains but use the same standard set of group parameters. This protocol, illustrated in Figure 5, avoids the limitations of non-interactive protocols by being applicable to hosts from different domains and not suffering from key escrow. It effectively functions as a pre-shared key protocol that incorporates additional elliptic curve Diffie-Hellman information in the session key computation. These additional Diffie-Hellman values, analogous to those used in IKE for PFS, can be exchanged in the same key exchange (KE) message. The resulting protocol fits neatly into IKE’s pre-shared key authentication method, as shown in Figure 6.

The primary limitation of the IKE pre-shared key protocol is that both peers must know each other's identities, whether they are using IBC (to compute the key) or sharing a traditional static key (to identify which key to use). This means that either aggressive mode must be used to exchange identities in the first set of messages, or the initiator must know the responder's identity, either a priori or through the responder's IP address or hostname via reverse DNS lookup.

To use IBC in PSK mode, both peers must agree on the same IBC group parameters. They achieve this by exchanging group parameter information in the proposal payloads during Security Association (SA) negotiation. IKE provides standard mechanisms for exchanging group information in the proposal payloads, originally designed to identify Diffie-Hellman groups for PFS. The same approach can be used to identify IBC group parameters, supporting both arbitrary group parameter descriptions and short identifiers for commonly used standard sets of group parameters. Such standardized sets of parameters are widely used for Diffie-Hellman exchanges in IKE, and we anticipate their use in DNSIBC as well.

### 5 Implementation

We have developed a preliminary version of this system under Linux, leveraging extensive DNSSEC support in both the standard implementation of BIND, the Unix DNS server program, and in pluto, the IKE daemon used by FreeS/WAN, the most common IPsec implementation for Linux.

#### 5.1 IBC Libraries

For our initial implementation, we wrote a 100%-Java library for the low-level field, elliptic curve, and Tate pairing operations required for identity-based cryptography. This work is based on the C implementation of identity-based encryption available at [28]. Our Java library is used by our PKG server and email client. We are currently working on a C port of our library for use in our IKE implementation.

#### 5.2 DNS Support

We modified a DNSSEC-compliant version of BIND to support the distribution of signed parameter and salt records, as shown in Figure 4. These parameters are initially inserted into the DNS during the setup phase of the PKG and updated as necessary. The PARAMS resource record type is implemented as a modified KEY record with RR type 44, and the PSALT resource record type is implemented as a modified text (TXT) record with RR type 45.

#### 5.3 Private Key Generation Service

In a fully deployed system, there are various ways to implement a PKG, providing different levels of auto-configuration and protection for the domain master secret. In our implementation, we prioritize ease of use and simplicity of setup to encourage deployment.

Our PKG is a standalone Java program. During the initial configuration of a domain (or re-keying of an existing domain), the PKG runs a setup sub-program allowing an administrator to select one of the standard sets of domain parameters (see Section 2.1) or generate their own. The administrator also specifies the minimum interval before compromised keys can be revoked, controlled by the salt lifetime (see Sections 2.1, 2.2). The setup program then creates a master secret and initial salt, storing these along with the system parameters in two files: one for the PKG service and another suitable for incorporating into a DNS zone file. This latter step can also be implemented using DNS dynamic update.

The PKG service starts on a machine within the domain network, listening for connections on a known port (5599) and securing them using SSL/TLS with a self-signed certificate (obtained from Java’s keytool) previously distributed to clients. Clients connect to the service to obtain their keys either during initialization or on salt change. Client authentication is based on the "in-vs-out" determination described in Section 2.3, using the desired identity (email address or FQDN) provided by the client. Private keys, parameters, and the current salt are returned to clients as XML-encoded data protected by the SSL tunnel. Clients store their new private keys in the appropriate location and manner.

To support salt updating, the current salt is passed either on the command line or in a configuration file. Updating the PKG to issue private keys derived from the new salt is a simple matter of restarting the PKG.

#### 5.4 Email Client

As a proof of concept, we implemented a standalone mail client in Java that can send and receive emails encrypted with IBE using domain parameters pulled from a modified DNS server.

To send encrypted emails, our client uses the dnsjava package [29], which we modified to accept and parse the new PARAMS and PSALT DNS resource records. The client encrypts the message using our Java IBC libraries, encodes it as an XML string, and sends it to the recipient’s mail server using the javax.mail package.

Upon receiving the first encrypted email, our client retrieves the current salt and its own private key from the PKG and stores them in a keystore on the local filesystem. For subsequent encrypted emails, the client queries the PKG for the latest salt if the current salt’s TTL has expired; if the salt changes, it requests a new private key. In our implementation, the domain parameters are included in the private key, eliminating the need for a separate check for changed domain parameters.

Decryption of email is completely transparent to the user, requiring no interaction to pull keys and decrypt messages.

In future work, we plan to incorporate support for domain-based IBC parameters into existing IBE-based plugins for Outlook and Eudora [28].

#### 5.5 IKE Client

Our IKE client, implemented as a modified version of pluto, supports auto-configuration by retrieving and updating private keys from the PKG as needed. We use the fully-qualified domain name (FQDN) to identify IPsec hosts, enabling support for IBC-based IPsec to hosts that use DHCP to obtain addresses, even if they are roaming outside their home domains (a "road warrior" configuration). For IKE modes where the responder does not send the initiator their identity before it is needed to derive the public key (e.g., public key encryption and main mode authenticated with pre-shared keys), the initiator must already know the responder's identity or be able to determine it via reverse DNS on their IP address. This is not a significant limitation, as the initiator often knows the identity of the communication partner. If this is an unacceptable limitation, an IP address can be used as the host's ID without changing the protocols.

### 6 Related Work

While the value of identity-based encryption for securing email has been recognized for some time [2], only recently have other uses for IBE and IBC in general begun to be explored. Much of this work has focused on cryptographic primitives, such as identity-based signature schemes [3, 16, 23] and key exchange protocols [5, 25, 27]. While much of the work on identity-based cryptography has assumed a single global trust infrastructure and a trusted IBC key generator, more recent work has explored less restrictive trust models. This includes hierarchical organizations of IBC trust centers [14, 17] and protocols that work between users in different trust domains sharing some mathematical parameters [4, 5]. We have leveraged this latter work in our own (see section 4.2.1).

Our initial implementation of an IBC-enabled IKE daemon is based on a modified version of pluto, the IKE daemon provided as part of FreeS/WAN [13]. We chose this implementation because FreeS/WAN is widely used under Linux and already provides extensive support for retrieving public keys from DNSSEC. As pluto does not fully support public-key encryption for IKE authentication, we are focusing on implementing IBC signature-based and pre-shared-key-based modes (see Section 4). Our modified pluto is designed for auto-configuration, requesting private keys from the PKG as needed.

Appenzeller and Lynn [1] suggested using non-interactive identity-based key exchange protocols [14, 25] to secure network traffic. While their work aligns with ours, it has several critical limitations. First, it only supports communication between hosts in the same IBC trust domain, which is not a realistic deployment scenario. Second, it is a non-standard, special-purpose protocol that has not been extensively analyzed or supported. In contrast, our approach supports communication between peers in different trust domains and integrates IBC with IPsec, a widely deployed, studied, and supported protocol. Therefore, our approach to IBC-enabled IPsec seems the most effective way to leverage IBC's advantages for securing network traffic.

### 7 Advantages Over Alternative Approaches

We believe our approach offers several advantages over existing methods for key distribution to secure email and network traffic. Specifically, our scheme, with its emphasis on auto-configuration, makes it simple enough to deploy these technologies, potentially leading to more widespread use. In this section, we compare DNSIBC to alternative approaches.

#### 7.1 Distribution of Trust