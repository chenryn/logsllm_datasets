# Hacking 智能手环
##### 译文声明
本文是翻译文章，文章来源：https://rbaron.net/
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
进入现在这个公司第一天上班的那天，有一大堆东西让我痴狂不已。在这堆东西中其中就包含一个可以自己定制的健康监测手环。从技术角度上来看，能随时随地监测健康状态真是太酷了。
  * 很小的尺寸（大约 15mm x 40mm）
  * 低功耗蓝牙（BLE）
  * OLED 显示屏（96 x 32 像素）
  * 可充电电池
  * 支持USB 充电
  * 加速度传感器
  * 振动马达
  * 价格在10 美元左右
在手环外面，除了背部印有“ FCC ID: 2AHFTID115 ”，就没了其他标识。搜索了一下，发现这个设备的名字是
[ID115](https://fccid.io/2AHFTID115)，另外还有些[内部构造的图片](https://fccid.io/2AHFTID115/Internal-Photos/Internal-Photos-3215735)。仔细观察可以看到那块最大的芯片上写着 “ N51822 ” ，这表明微控制器单元 (MCU)
很可能是 Nordic 的 nRF51822，一块支持低功耗蓝牙的 32 位 ARM Mo CPU。从理论上来讲，这可以编程实现手环现有功能以外的其他事情。
手环拆开前后
在拆卸它之前，我上谷歌搜索到了使用相同芯片类似的手环，不少人成功的拆开了手环。
拆开它其实并不容易，黑色的塑料盖子粘在了灰色的塑料后盖上。我用电吹风加热让胶水软化，然后用小刀小心翼翼的切开胶水，确保手环不会受到太大的伤害。拆开之后，我确认它确实使用的是
nRF51822。后来，我买了一个看似相似的手环，但是这个手环使用的是德州仪器的 MCU ,这个差异需要的特别注意。
nRF51822与圆珠笔大小对比
## 想办法和它说话
从[手册](https://www.nordicsemi.com/eng/nordic/download_resource/62726/14/3637606/13358)上了得知，芯片上的串口调试[
Serial Wire Debug(SWD) ](https://developer.arm.com/products/system-ip/coresight-debug-and-trace/coresight-architecture/serial-wire-debug)
的两个引脚可用于编程/调试。这意味着两件事，如果我们想和它对话：
  * 我们需要一个 “SWD programmer” (例如 [segger的 J-Link 仿真器](https://www.segger.com/products/debug-probes/j-link/))
  * 我们需要访问 SDW 的两个引脚，即 SDWIO(数据) 和 SWDCLK(时钟)
幸运的是，板子上有不少裸露的垫片。他们的存在意味着需要进一步的调试/测试/验证。我想一定是有一个很酷的工程师预留着这些垫片，对于像我这样的人来说这简直就是给我们准备的礼物。不是所有的垫片都有标注，我根据我的猜测做了标注。
PCB 板子的正反面
使用一个廉价的 USB 显微镜，我拍了一些板子正反的照片，试着追踪从 MCU 到垫片的痕迹。
在板子的正反面追踪 SWDIO 和 SWDCLK
注意这是一个多层的PCB，在它的上面有通孔。所以我们需要追踪板子的正反两面。使用这些图片，我们可以追踪到SWDIO 和 SWDCLK 从芯片连接到了 IO
和 CLK 垫片。这也证实了板子上标注的 “CLK”的引脚实际上是SWDCLK。在它的右边的引脚是SWDIO。我们可以得到第一个映射表。
nRF51822 引脚 | 板子 | 描述  
---|---|---  
SWDIO | IO | 数据引脚  
SWDCLK | CLK | 时钟引脚  
##
## Open-chip 手术
为了能够访问 SWD 的两个引脚，我在板子上给各个接触垫焊接了很细的线。
##
## 闪烁
下一个目标是尝试编程实现一些其他事情。为了运行最简单的程序，我们需要确保：
  * 我们正确地跟踪了SWDIO/SWDCLK引脚
  * SWD 编程器正常运行，能和计算机交互
  * 使用 [Nordic’s sdk](https://www.nordicsemi.com/eng/Products/Bluetooth-low-energy/nRF5-SDK) 交叉编译Arm 程序
  * 能够把编译好的程序放到芯片中
  * 芯片正确的驱动和引导我们的程序
本案例中 “hello,world” 程序是实现 LDE 发光二极管不间断的闪烁。即使这样其实也不简单，首先板子上没有 LED
发光二极管。如果我们自己额外添加一个，那就必须搞清楚该接在什么地方。这增加了问题的另外一个自由度。天下没有免费的午餐，我只在 `P1` 和 `P2`
上连接了两个 LED，希望能够在 MCU 上找到对应的引脚。
凌乱的连线
为了能够使用 J-Link 仿真器，需要从
[segger](https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack)
网站上下载驱动和命令行程序。如果你使用的是 MacOS，那么你就可以 homebrew 进行安装。`caskroom/drivers/segger-jlink` 提供了支持。安装好之后你就能使用命令行程序 `JLinkExe` 与 SWD 仿真器进行通信了。
随后，我下载并解压了 [Nordic‘s nRF5
SDK](https://www.nordicsemi.com/eng/Products/Bluetooth-low-energy/nRF5-SDK)（我使用的是[version
12.3.0](http://developer.nordicsemi.com/nRF5_SDK/)）。在 SDK
中挖掘示例，很明显我们需要一个知道如何输出 Arm 程序的编译器，于是我安装了`gcc-arm-embeded`（同样可通过 homebrew 安装）。
在 Nordic 的开发者论坛上浏览SDK
有关的帖子，发现通常使用的开发板是[这个](http://www.nordicsemi.com/eng/Products/nRF51-DK)。SDK
预先配置了一些开发包的变量，要实现直接和 MCU 对话，我们需要修改 SDK 中的一些设置。
﻿  
您的浏览器不支持video标签  
跑马灯
我花了很多时间去了解 nRF5 系统如何让程序跑起来的，最终搞懂了来龙去脉。在上面的的视频中可以看到两个闪烁的 LED。于是，我创建了一个 [github
仓库](https://github.com/rbaron/fitless) ，另外还写了 `Makefiles`。其中一个最大的技巧是找到
nRF51822 的一些变量，例如我的 RAM 只有
16KB。考虑到这些因素，我们需要对[链接器脚本](https://github.com/rbaron/fitless/blob/master/blinky/id115/blank/armgcc/blinky_gcc_nrf51.ld)做些调整。
##
## 数字 IO
正如我所提到的，让 LED 闪烁还包含着希望和猜测 MCU 的哪个引脚与`P1` 和 `P2` 相连，`P1` 和 `P2` 连接着
LEDs。最简单的方法是让数字 IO 引脚不断重复升高和降低输出。让我惊讶的是，两个 LED 都被点亮了。更让我吃惊的是振动马达也能开启和关闭。
手动进行查找，我确定了以下的映射关系。
nRF51822 引脚 | 板子 | 描述  
---|---|---  
P0.30 | P1 | 通用数字 IO  
P0.00 | P2 | 通用数字 IO  
P0.01 | – | 振动马达  
##
## printf
在调试时，与计算机进行对话的能力是非常宝贵的。J-Link 仿真器支持 [Real-Time Transfer
(RTT)](https://www.segger.com/products/debug-probes/j-link/technology/about-real-time-transfer/)。RTT 芯片与计算机之间发送和接收数据。通过包含头文件`#include
"SEGGER_RTT.h"`，并调用函数 `SEGGER_RTT_WriteString()` 来使用它。在电脑上读取它需要用到 J-Link
包中的命令行程序 `jlinkrttlogger`。
##
## OLED
另一个极具挑战性的任务是点亮 OLED 显示屏。市场上常见的 OLED 显示屏使用 [ssd1306](https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf) 驱动/控制器，与 MCU 之前串行通信，如 SPI、I2C。
我发现在一般的商店很难购买到 96×32 像素的显示屏，看起来这种分辨率并不是常规型号。上谷歌搜索了屏幕上的
“QT1316P01A”,最佳匹配的是一个中国网站。我在全球速卖通找到了最为接近的，但是除了有引脚名称外没有任何其他文档。
引脚 | 标志  
---|---  
1 | C2P  
2 | C2N  
3 | C1P  
4 | C1N  
5 | VBAT  
6 | NC  
7 | VSS  
8 | VDD  
9 | RES#  
10 | SCL  
11 | SDA  
12 | IREF  
13 | VCOMH  
14 | VCC  
来自阿里全球速递通的 OLED 脚针定义
如果上面的表格标注的准确的话，从 SCL、SDA、RES# 引脚可以看出它支持 I2C总线。如果我们可以找到 nRF51822 引脚与 OLED
引脚之间的三根合理的连线，那这将是一个好的开端。再来用显微镜看看。
追踪 OLED 数据引脚
初步建立的一个新的对应表。
nRF51822 引脚 | 板子 | 描述  
---|---|---  
P0.21 | – | OLED SDA 引脚  
P0.22 | – | OLED SCL 引脚  