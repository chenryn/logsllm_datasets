The only attack vectors exposed by the ImEE to the
adversary are the shared GPT and the target physical
memory which are fully controlled by the adversary. The
adversary can manipulate the VA-to-GPA mappings for
Pc and Pt. Depending on the speciﬁc manipulation, ei-
ther we can detect such attempts by the EPT violation
triggered, or the attack does not adversely affect the in-
trospection.
Detecting Blind Spot. The attacks on Pc is defeated by
the fact that the code frame is the only executable frame
inside the ImEE. Hence, the attack on Pc’s mapping, i.e.
mapping Pc to a page in GPt, is doomed to trigger an EPT
violation exception. Similarly, mapping Pt to GP(cid:48)
c also
triggers EPT violations because the read is on a execute-
only page.
Defeating Mapping Attacks. The attack attempts that
manipulate the mappings of Pt do not adversely affect
the introspection. Speciﬁcally, there are three cases for
the GPt which virtual page Pt which is mapped to by the
adversary.
• GPt = GP(cid:48)
c. Nonetheless, our EPTC maps the agent
code frame non-readable. Therefore, an EPT vio-
lation exception is thrown. The hypervisor can ﬁnd
out the faulting VA and reports to the VMI tool. The
hypervisor can also reload the agent into a new ex-
ecutable page to introspect the faulting page. This
is the same case as in detecting blind spot described
above.
• GPt (cid:54)= GP(cid:48)
c, and GPt is within the pre-assigned GPA
range for the target VM. In this case, the ImEE’s
MMU walks the target VM’s GPT and fetches the
data in the same way as in the target VM. In other
words, the mapping consistency between the ImEE
and the target VM is still guaranteed. Although the
agent may read invalid data, its execution is not af-
fected by such mappings. The attack has no harm
to the execution as it is equivalent to feeding poi-
sonous contents to the VMI application, in the hope
to exploit a programming vulnerability. We remark
that this is the inevitable risk faced by any memory
introspection and can be coped with software secu-
rity countermeasures.
• GPt is mapped out of the pre-assigned GPA range
for the target. If GPt = GPd or GPt = GPc, the at-
tack causes the agent to read from the ImEE frames;
otherwise it causes an EPT page fault as the needed
mapping is absent. We do not consider this case as
a blind-spot problem, because the target VM’s EPT
does not have the mapping for GPt. Hence, the tar-
get VM’s kernel, including the adversary, is not able
to access this page. This attack does not give the
adversary any advantage over mapping Pt to an in-
range GPA whose physical frame stores the same
contents prepared by the adversary. (Note that we
do not assume or rely on the secrecy of the intro-
spection code.)
4.4 Operations of ImEE
Initialization. To start the introspection, the hypervisor
loads the needed agent code and data into the memory.
It initializes EPTT as a copy of the entire EPT used for
the target, and allocates a vCPU core for the ImEE. The
ImEE CR3 is initially loaded with the address of GPTL.
In case the target’s EPT occupies too many pages, the
In
hypervisor copies them in an on-demand fashion.
other words, when the agent’s target memory access en-
counters a missing GPA-to-HPA mapping, the hypervi-
sor then copies the EPT page from the target’s EPT. Note
that it does not weaken security or effectiveness, because
the EPTs are managed by the hypervisor only.
Activation. Based on the VMI application’s request, the
hypervisor launches the ImEE wherein the agent runs in
USENIX Association
26th USENIX Security Symposium    805
the local address space with an arbitrarily chosen virtual
address. The start of an session is marked by the target
VM’s CR3 capture. If it is the ﬁrst session, the hyper-
visor may send out an Inter-Processor Interrupt (IPI) to
the target VM, or induce an EPT violation to the target,
or passively wait for a natural VM-exit (which is more
stealthy). After the trapping the core, the hypervisor
conﬁgures the target’s Virtual Machine Control Struc-
ture (VMCS) to intercept CR3 updates on it. Namely, the
execution of CR3 loading instruction(s) on the captured
vCPU triggers a VM exit. Note that the target’s other
vCPUs (if any) are not affected.
Agent Reloading.
Once the target CR3 value is
switched, the hypervisor sends an IPI to the ImEE CPU
to cause it to trap to the hypervisor. The hypervisor then
reloads the agent.
If the agent is currently running in
the target address space, its CR3 in the VMCS is imme-
diately replaced. The hypervisor then extracts the page
frame number from the target’s Instruction Pointer (IP).
It replaces the page frame number in the ImEE IP with
the one in the target IP without changing the offset. Since
the agent code lies within one page, preserving the offset
allows it to smoothly continue the interrupted execution.
If the agent is in the local address space, the CR3 for
the new target address space is saved in a register. The
crux of the session transition is to minimize the hypervi-
sor execution time as it hinders the ImEE’s performance
by holding the core.
We use a lazy-allocation method to ﬁnd GP(cid:48)
c for the
purpose of setting up EPTC. When the agent resumes ex-
ecution, an EPT violation is triggered because the corre-
sponding physical page is mapped as read-only in EPTT .
From the exception, the hypervisor reads the faulting
GPA, changes the corresponding EPT permissions, and
restores the previous one to read-only. The newly modi-
ﬁed EPTT entry becomes the new EPTC. Since the lazy
method uses the MMU to ﬁnd GP(cid:48)
c, it saves the CPU time
for walking the page table.
Page Fault Handling. Although it is rare for kernel
introspection, it is possible to encounter a page fault due
to absent pages in the target VM. One possible reason is
that the malware inside the target attempts to evade in-
trospection by swapping out page content to disk. In this
case, since the mapping inside ImEE is consistent with
the one in the target VM, introspection on the swapped-
out page results in a page fault inside ImEE. We remark
that this behavior is the expected consequence of main-
taining mapping consistency between ImEE and the tar-
get. The effectiveness of ImEE’s introspection is not un-
dermined because once the swapped-out page is swapped
in, it is visible to ImEE immediately.
For the sake of resilience, we install a page fault han-
dler inside the ImEE. Since the agent resides in Ring 0,
the exceptions do not cause any context switch. Out of
the consideration of transparency and stealthiness, the
ImEE’s page fault handler does not attempt to resolve
the cause. Instead, it simply runs dozens of NOP instruc-
tions and retries the read. If the rounds of failure exceed
the predeﬁned threshold, it aborts the execution.
5
Implementation
In this section, we report the details of our ImEE proto-
type implementation. We describe our prototype based
on KVM and the introspection tools we implemented on
top of our prototype.
ImEE on KVM
5.1
We have implemented a prototype of the ImEE and its
agent on Ubuntu 12.04 with Linux kernel 3.2.79. Our
implementation adds around 1400 SLOC to the Linux
KVM module. The main changes on the KVM module
include two new ioctl call handlers as the interface for
the VMI application to request the ImEE setup and exe-
cution. The new handlers leverage existing KVM utility
in the kernel to setup the ImEE as a special VM.
We customize the KVM’s handling of VM-exit events
in order to achieve better performance. Those events in-
tended for the ImEE introspection are redirected to the
new handler dedicated for the ImEE. Therefore, the long
execution path of the KVM’s event handling routines is
bypassed.
5.2 Specialized Agent
According to the commonly seen memory reading pat-
terns, we have implemented three types of ImEE agents
as listed in Table 2. The Type-1 agent performs a block
read, i.e., to read a contiguous memory block at the base
address. The Type-2 agent performs a traversal read, i.e.,
to read the speciﬁed member(s) of a list of structured ob-
jects chained together through a pointer deﬁned in the
structure. The Type-3 agent reads the memory in the
same way as the Type-2, except that the extracted mem-
ber is a pointer and a dereference is performed to read
another structure. Note that the Type-2 and 3 agents are
particularly useful for traversing the kernel objects.
Type Mode of read
1
2
3
Block-read
Traversal-read
Traversal-read-dereference
# of Instructions
38
22
40
Table 2: Three ImEE agents. The Type-3 agent uses 2
pointer deferences while the Type-2 agent uses one.
806    26th USENIX Security Symposium
USENIX Association
The interface between the VMI application and the
ImEE agent are two ﬁxed-size buffers residing on the
agent’s data frame and being mapped into the VMI ap-
plication’s space. One buffer is for the request to the
agent and the other stores the reply from the agent. Both
buffers are guarded by one spin-lock to resolve the read-
write conﬂict from both sides. When the ImEE session
starts, the agent polls the buffer and serves the request.
The VMI application ensures that the reply buffer is not
overﬂowed. We remark that the polling based approach
is faster than using interrupts as it does not induce any
VM-exit/entry.
5.3 Usability
The simple interface of ImEE allows easy development
of introspection tools. For common introspection tasks
that focus on kernel data structures, the development re-
quires a selection of the agent type, and a set of memory
reading parameters including the starting virtual address,
the number of bytes to read, and the offset(s) used for
traversal. Based on this method, we have developed four
user space VMI programs that collect different critical
kernel objects and have distinct memory reading behav-
iors. The objectives and logics of the four programs are
explained below.
It dumps totally 351 entries of
• syscalldmp
the guest’s
system call
table pointed to by
sys call table. A continuous block of 1404
bytes from the guest is returned to the program.
• pidlist
It lists all process identiﬁers in the guest.
It traverses the task struct list pointed to by the
kernel symbol init task, and records the PID
value of every visited structure in the list. In total,
4 bytes are returned while 8 bytes are read from the
guest for each task.
• pslist
It lists all tasks’ identiﬁers and task names
stored in task struct. A task’s name is stored
in the member comm with a ﬁxed size of 16 bytes.
Hence, 24 bytes are returned for each task node.
• credlist It lists all tasks’ credential structures refer-
enced by the task struct’s cred pointer. In total,
116 bytes including the credential structure to the
application for each task node. Hence it takes more
time than pidlist and pslist.
Because of their different memory access patterns,
they run with different types of agents. The syscalldmp
tool runs with Type-1 agent to perform block-reads. The
pidlist and pslist programs work with Type-2 agent and
the credlist program works with Type-3 agent. These
tools are linked with a small wrapper code to interact
with the ImEE-enabled KVM module via the customized
ioctl handler.
6 Evaluation
We evaluate our prototype from four aspects with Lib-
VMI as the baseline. LibVMI [31] is a cross-platform
introspection library which a variety of tools depend on.
To the best of our knowledge, LibVMI is the only open-
source tool that provides a comprehensive set of API for
reading the memory of a VM. In particular, it provides
the capability to handle translation from VA to GPA.
Therefore, LibVMI plays the role of a building block
for live memory access in tools such as Drakvuf[27]
and Volatility[37]. Our evaluation consists of four parts.
Firstly, we consider the overhead of ImEE, in terms
of component costs and the impact on the target VM
due to CR3-update interception. Secondly, we measure
the ImEE’s throughput in reading the target memory.
Thirdly, we compare the introspection performance of
the tools with two functionally equivalent ones imple-
mented with the LibVMI and in the kernel. Lastly, we
compare ImEE with LibVMI in a setting with multiple
guest VMs.
The hardware platform used to evaluate our imple-
mentation is a Dell OptiPlex 990 desktop computer with
an Intel Core i7-2600 3.4GHz processor (supporting VT-
x) and 4GB DRAM. The target VM in our experiments is
a normal KVM instance with 1GB of RAM and 1 vCPU.
ImEE Overhead
6.1
Table 3 summarizes the overheads of the ImEE. It takes
a one-time cost of 97 µs to prepare the ImEE environ-
ment where the main tasks are to make a copy of the tar-
get guest EPT as EPTT , to set up GPTL and EPTL, and to
allocate and setup the ImEE vCPU context. The ImEE
activation requires about 3.2 µs, and the agent load-
ing/reloading time is around 6.5 µs. The difference is
mainly due to handling of the incoming IPI by host ker-
nel on the ImEE core in the agent reloading case.
In
comparison, it takes about 100 milliseconds to initialize
the LibVMI setting, which is around 1,000 times slower
than the ImEE setup.
Overhead
Launch time
Activation time
Agent reloading time
ImEE LibVMI
97 µs
100 ms
3.2 µs
-
6.5 µs
-
Table 3: Overhead comparison between ImEE and Lib-
VMI.
Guest CR3 Update Interception.
To maintain CR3
USENIX Association
26th USENIX Security Symposium    807
consistency with the target during a session, the hyper-
visor intercepts the CR3 updates. To evaluate its perfor-
mance impact on the target, we measure the entailed time
cost and run several benchmarks to assess the VM’s per-
formance.
The cost due to interception mainly consists of VM-
exit, sending an IPI, recording VMCS data, and VM-
entry.
In total, it takes about 2000 CPU cycles which
amounts 0.58 µs in our experiment platform. We run
three performance benchmarks: LMbench [3] for sys-