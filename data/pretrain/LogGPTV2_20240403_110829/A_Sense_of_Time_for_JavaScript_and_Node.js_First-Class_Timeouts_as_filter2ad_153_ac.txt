Worker Pool (§5.2)
CPU-bound
I/O-bound
Vuln. APIs
Language
Framework
Application
CPU-bound
Regexp, JSON
Crypto, zlib
while(1)
N/A
FS
DB query
N/A
Crypto, zlib
Regexp [12]
N/A
FS, DNS
DB query
Table 1: Taxonomy of vulnerable APIs in Node.js, with examples.
An EHP attack through a vulnerable API poisons the Event Loop or
a Worker, and its synchronous time is due to CPU-bound or I/O-bound
activity. A vulnerable API might be part of the language, framework, or
application, and might be synchronous (Event Loop) or asynchronous
(Worker Pool). zlib is the Node.js compression library. N/A: JavaScript
has no native Worker Pool nor any I/O APIs. We do not consider mem-
ory access as I/O.
or I/O-bound. Along the third axis, a vulnerable API can
be found in the language, the framework, or the applica-
tion. In our evaluation we provide an exhaustive list of
vulnerable APIs for Node.js (§6.1). Although the exam-
ples in Table 1 are speciﬁc to Node.js, the same general
classiﬁcation can be applied to other EDA frameworks.
5.2 Timeout-aware tasks
EHP attacks targeting the Worker Pool use vulnerable
APIs to submit long-running tasks that poison a Worker.
Node.cure defends against such attacks by bounding
the synchronous time of tasks. Node.cure short-circuits
long-running tasks with a TimeoutError.
Timeout-aware Worker Pool. Node.js’s Worker Pool
is implemented in libuv. As illustrated in Figure 1, the
Workers pop tasks from a shared queue, handle them,
and return the results to the Event Loop. Each Worker
handles its tasks synchronously.
We modiﬁed the libuv Worker Pool to be timeout-
aware, replacing libuv’s Workers with Executors that
combine a permanent Manager with a disposable
Worker. Every time a Worker picks up a task, it noti-
ﬁes its Manager. If the task takes the Worker too long,
the Manager kills it with a Hangman and creates a new
Worker. The long-running task is returned to the Event
Loop with a TimeoutError for processing, while the new
Worker resumes handling tasks. These roles are illus-
trated in Figure 5.
This design required several changes to the libuv
Worker Pool API. The libuv library exposes a task
submission API uv queue work, which we extended as
shown in Table 2. Workers invoke work, which is a func-
tion pointer describing the task. On completion the Event
Loop invokes done. This is also the typical behavior of
our timeout-aware Workers. When a task takes too long,
however, the potentially-poisoned Worker’s Manager in-
vokes the new timed out callback. If the submitter does
not request an extension, the Manager creates a replace-
ment Worker so that it can continue to process subse-
quent tasks, creates a Hangman thread for the poisoned
Worker, and notiﬁes the Event Loop that the task timed
Figure 5: This ﬁgure illustrates Node.cure’s timeout-aware Worker
Pool, including the roles of Event Loop, executors (both worker pool
and priority), and Hangman. Grey entities were present in the original
Worker Pool, and black are new. The Event Loop can synchronously
access the Priority Executor, or asynchronously ofﬂoad tasks to the
Worker Pool. If an Executor’s manager sees its worker time out, it cre-
ates a replacement worker and passes the dangling worker to a Hang-
man.
Callback
void work
Description
Perform task.
int timed out* When task has timed out. Can request extension.
When task is done. Special error code for timeout.
When a timed out task’s thread has been killed.
void done
void killed*
Table 2: Summary of the Worker Pool API. work is invoked on the
Worker. done is invoked on the Event Loop. The new callbacks,
timed out and killed, are invoked on the Manager and the Hang-
man, respectively. On a timeout, work, timed out, and done are
invoked, in that order; there is no ordering between the done and
killed callbacks, which sometimes requires reference counting for
safe memory cleanup. *New callbacks.
out. The Event Loop then invokes its done callback with
a TimeoutError, permitting a rapid response to evil in-
put. Concurrently, once the Hangman successfully kills
the Worker thread, it invokes the task’s killed callback
for resource cleanup, and returns. We used synchroniza-
tion primitives to prevent races when a task completes
just after it is declared timed out.
Differentiating between timed out and killed per-
mits more ﬂexible error handling, but introduces tech-
nical challenges. If a rapid response to a timeout is un-
necessary, then it is simple to defer done until killed
ﬁnishes, since they run on separate threads. If a rapid re-
sponse is necessary, then done must be able to run before
killed ﬁnishes, resulting in a dangling worker problem:
an API’s work implementation may access externally-
visible state after the Event Loop receives the associated
TimeoutError. We addressed the dangling worker prob-
lem in Node.js’s Worker Pool customers using a mix of
killed-waiting, message passing, and blacklisting.
Affected APIs. The Node.js APIs affected by this
change (viz. those that create tasks) are in the encryp-
tion, compression, DNS, and ﬁle system modules. In all
cases we allowed timeouts to proceed, killing the long-
running Worker. Handling encryption and compression
was straightforward, while the DNS and ﬁle system APIs
were more complex.
USENIX Association
27th USENIX Security Symposium    349
Node.js’s asynchronous encryption and compression
APIs are implemented in Node.js C++ bindings by in-
voking APIs from openssl and zlib, respectively. If the
Worker Pool notiﬁes these APIs of a timeout, they wait
for the Worker to be killed before returning, to ensure it
no longer modiﬁes state in these libraries nor accesses
memory that might be released after done is invoked.
Since openssl and zlib are purely computational, the
dangling worker is killed immediately.
Node.js implements its ﬁle system and DNS APIs by
relying on libuv’s ﬁle system and DNS support, which
on Linux make the appropriate calls to libc. Because the
libuv ﬁle system and DNS implementations share mem-
ory between the Worker and the submitter, we modiﬁed
them to use message passing for memory safety of dan-
gling workers — wherever the original implementation’s
work accessed memory owned by the submitter, e.g. for
read and write, we introduced a private buffer for work
and added copyin/copyout steps.
In addition, we used
pthread setcancelstate to ensure that Workers will not
be killed while in a non-cancelable libc API [6]. DNS
queries are read-only so there is no risk of the dan-
gling worker modifying external state. In the ﬁle system,
write modiﬁes external state, but we avoid any dangling
worker state pollution via blacklisting. Our blacklisting-
based Slow Resource policy is discussed in more detail
in §5.5.
At the top of the Node.js stack, when the Event Loop
sees that a task timed out, it invokes the application’s
callback with a TimeoutError.
5.3 Timeouts for callbacks
Node.cure defends against EHP attacks that target the
Event Loop by bounding the synchronous time of call-
backs. To make callbacks timeout-aware, we introduce
a TimeoutWatchdog that monitors the start and end of
each callback and ensures that no callback exceeds the
timeout threshold. We time out JavaScript instructions
using V8’s interrupt mechanism (§5.3.1), and we mod-
ify Node.js’s C++ bindings to ensure that callbacks that
enter these bindings will also be timed out (§5.3.2).
5.3.1 Timeouts for JavaScript
TimeoutWatchdog.
Our TimeoutWatchdog instru-
ments every callback using the experimental Node.js
async-hooks module [15], which allows an application
to register special callbacks before and after a callback is
invoked.
Before a callback begins, our TimeoutWatchdog starts
a timer. If the callback completes before the timer ex-
pires, we erase the timer.
the
watchdog signals V8 to interrupt JavaScript execution
by throwing a TimeoutError. The watchdog then starts
another timer, ensuring that recursive timeouts while
handling the previous TimeoutError are also detected.
If the timer expires,
While an inﬁnite sequence of TimeoutErrors is possible
with this approach, this concern seems more academic
than practical6.
V8 interrupts. To handle the TimeoutWatchdog’s re-
quest for a TimeoutError, Node.cure extends the inter-
rupt infrastructure of Node.js’s V8 JavaScript engine to
support timeouts. In V8, low priority interrupts such as
a pending garbage collection are checked regularly (e.g.
each loop iteration, function call, etc.), but no earlier
than after the current JavaScript instruction ﬁnishes. In
contrast, high priority interrupts take effect immediately,
interrupting long-running JavaScript instructions. Time-
outs require the use of a high priority interrupt because
they must be able to interrupt long-running individual
JavaScript instructions such as str.match(regexp) (pos-
sible ReDoS).
To support a TimeoutError, we modiﬁed V8 as fol-
lows: (1) We added the deﬁnition of a TimeoutError
into the Error class hierarchy;
(2) We added a
TimeoutInterrupt into the list of high-priority in-
terrupts; and (3) We added a V8 API to raise a
TimeoutInterrupt. The TimeoutWatchdog calls this
API, which interrupts the current JavaScript stack by
throwing a TimeoutError.
The only JavaScript instructions that V8 instruments
to be interruptible are regular expression matching and
JSON parsing; these are the language-level vulnerable
APIs. Other JavaScript instructions are viewed as effec-
tively constant-time, so these interrupts may be slightly
deferred, e.g. to the end of the nearest basic block. We
agreed with the V8 developers in this7, and did not in-
strument other JavaScript instructions to poll for pending
interrupts.
5.3.2 Timeouts for the Node.js C++ bindings
The TimeoutWatchdog described in §5.3.1 will interrupt
any vulnerable APIs implemented in JavaScript, includ-
ing language-level APIs such as regular expressions and
application-level APIs that contain blocking code such
as while(1){}. It remains to give a sense of time to the
Node.js C++ bindings that allow the JavaScript code in
Node.js applications to interface with the broader world.
A separate effort is required here because a pending
TimeoutError triggered by the TimeoutWatchdog will
not be delivered until control returns from a C++ bind-
ing to JavaScript.
Node.js has asynchronous and synchronous C++ bind-
ings. The asynchronous bindings are safe in general be-
cause they do a ﬁxed amount of synchronous work to
submit a task and then return; the tasks are protected as
6To obtain an inﬁnite sequence of TimeoutErrors in a ﬁrst-class
timeouts system, place a try-catch block containing an inﬁnite loop
inside another inﬁnite loop.
7For example, we found that string operations complete in millisec-
onds even when a string is hundreds of MBs long.
350    27th USENIX Security Symposium
USENIX Association
discussed earlier. However, the synchronous C++ bind-
ings complete the entire operation on the Event Loop
before returning, and therefore must be given a sense
of time. The relevant vulnerable synchronous APIs are
those in the ﬁle system, cryptography, and compression
modules. Both synchronous and asynchronous APIs in
the child process module are also vulnerable, but these
are intended for scripting purposes rather than the server
context with which we are concerned.
Because the Event Loop holds the state of all pend-
ing clients, we cannot pthread cancel it as we do poi-
soned Workers, since this would result in the DoS the at-
tacker desired. We could build off of our timeout-aware
Worker Pool by ofﬂoading the request to the Worker Pool
and awaiting its completion, but this would incur high
request latencies when the Worker Pool’s queue is not
empty. We opted to combine these approaches by of-
ﬂoading the work in vulnerable synchronous framework
APIs to a dedicated Worker, which can be safely killed
and whose queue never has more than one item.
In our implementation, we extended the Worker
Pool paradigm with a Priority Executor whose queue
is exposed via a new API: uv queue work prio (Fig-
ure 5). This Executor follows the same Manager-Worker-
Hangman paradigm as the Executors in Node.cure’s
Worker Pool. To make these vulnerable synchronous
APIs timeout-aware, we ofﬂoad them to the Priority Ex-
ecutor using the existing asynchronous implementation
of the API, and had the Event Loop await the result.
Because these synchronous APIs are performed on the
Event Loop as part of a callback, we propagate the call-
back’s remaining time to this Executor’s Manager to en-
sure that the TimeoutWatchdog’s timer is honored.
5.4 Timeouts for application-level vulnerable APIs
As described above, Node.cure makes tasks (§5.2) and
callbacks (§5.3) timeout-aware to defeat EHP attacks
against language and framework APIs. An application
composed of calls to these APIs will be EHP-safe.
However, an application could still escape the reach of
these timeouts by deﬁning its own C++ bindings. These
bindings would need to be made timeout-aware, follow-
ing the example we set while making Node.js’s vulnera-
ble C++ bindings timeout-aware (ﬁle system, DNS, en-
cryption, and compression). Without refactoring, appli-
cations with their own C++ bindings may not be EHP-
safe. In our evaluation we found that application-deﬁned
C++ bindings are rare (§6.3).
5.5 Performance optimizations
Since ﬁrst-class timeouts are an always-on mechanism, it
is important that their performance impact be negligible.
Here we describe two optimizations.
Lazy TimeoutWatchdog.
Promptly detecting
TimeoutErrors with a precise TimeoutWatchdog can
be expensive, because the Event Loop must synchro-
nize with the TimeoutWatchdog every time a callback
is entered and exited. If the application workload con-
tains many small callbacks, whose cost is comparable to
this synchronization cost, then the overhead of a precise
TimeoutWatchdog may be considerable.
If the timeout threshold is soft, then the overhead
from a TimeoutWatchdog can be reduced by making
the Event Loop-TimeoutWatchdog communication asyn-
chronous. When entering and exiting a callback the
Event Loop can simply increment a shared counter. A
lazy TimeoutWatchdog wakes up at intervals and checks
whether the callback it last observed has been execut-
ing for more than the timeout threshold; if so, it emits
a TimeoutError. A lazy TimeoutWatchdog reduces the
overhead of making a callback, but decreases the pre-
cision of the TimeoutError threshold based on the fre-
quency of its wake-up interval.
Slow resource policies. Our Node.cure runtime de-