 插入到指定分区的实现, 使用触发器.
 create or replace function sel_tg() returns trigger as $$
 declare
 begin
 if NEW.crt_time >= '2013-01-01' and NEW.crt_time = '2013-02-01' and NEW.crt_time = '2013-03-01' and NEW.crt_time = '2013-04-01' and NEW.crt_time = '2013-01-01 00:00:00'::timestamp without time zone AND crt_time =0; -- 使用这个方法可以把他们更新为继承字段.
 digoal=# select attname,attislocal from pg_attribute where attrelid='c7'::regclass;
 attname | attislocal
 ……
 ctid | t
 id | f
 info | f
 crt_time | f
 (9 rows)
PostgreSQL 本地分区
 目前PostgreSQL分区表实施方法的存在的缺陷
 性能缺陷
 目前PostgreSQL不管是使用约束还是触发器来实现范围缩小到分区表的情况, 性能都不是非常的理想, 会损耗一些
CPU运算.
 全局约束缺陷
 数据分布到多个子表后, 就无法简单的实现全局唯一了. 除非约束字段是是分布列.
 全局外键关联缺陷
 全局外键也没有办法实现. 例如create table test (id int references p (id)), 如果p是主表的话, 是只能外键约束到主表
本身的, 无法延续到子表.
PostgreSQL 异地分区
 异地shared nothing数据分区.
 以PL/Proxy为例, 讲解异地shared nothing数据分区的部署.
 应用场景设计
 PL/Proxy的安装
 代理库的配置
 编写代理函数
 编写实体函数(负责实际的操作)
PL/Proxy 应用场景举例
 Shared nothing(run on any|nr|hash) + replication(语句级复制,run on all) + Load Balance(run on ANY|NR|HASH)
APP(s) APP(s)
plproxy本身可”无限”扩展
plproxy可以完全独立
也可以流复制模式主备模式.
PL/Proxy PL/Proxy
当然plproxy可以不承担运算, 所以不太容易成为瓶颈.
数据层支持2的N次方个节点
DB-p0 DB-p1 DB-p2 DB-p3 同样支持”无限”扩展
PL/Proxy 应用场景举例
 Replication(流复制) + Load balance(读写分离, 读run on any|nr|hash, 写run on 0)
APP(s) APP(s)
plproxy本身可”无限”扩展
plproxy可以完全独立
也可以流复制模式主备模式.
PL/Proxy PL/Proxy
当然plproxy可以不承担运算, 所以不太容易成为瓶颈.
数据层支持2的N次方个节点
DB-p0 DB-s1 DB-s2 DB-s3 同样支持”无限”扩展
PL/Proxy 使用背景
 PostgreSQL PL/Proxy解决方案
 水平扩展，对硬件要求不高，投入产出比非常容易计算。
 PL/Proxy通过调用PostgreSQL函数支持事务，在PG中函数操作具有原子性，因此需要用到事
务的操作可以封装在一个PG函数中。
 PL/Proxy路由选择非常灵活，非常容易做到读写的负载均衡。
 PL/Proxy与PostgreSQL免费。
 PL/Proxy耦合度不高，如果应用不想通过PL/Proxy而想直连数据库可以不需要修改代码。因为
代理函数与实体函数的输入输出参数是一致的。
 调用函数的好处 :
安全性提高, 应用连接的为代理数据库，要操作实体数据必须在数据节点有对应的函数，
或者只有SELECT权限(甚至编译时可以选择不支持SELECT)。
业务逻辑的代码放在数据端使处理效率更高。
PL/Proxy 原理
 层次 : PL/Proxy节点(s), 连接池(s), 数据节点(s)
 PL/Proxy
 接收应用程序发起的SQL请求(调用plproxy函数)，
 解析为提交给数据节点的SQL，
 PL/Proxy函数, CREATE FUNCTION get_data(IN first_name text, IN last_name text, OUT bdate date, OUT
balance numeric(20,10))
 调用该函数被解析为, SELECT bdate::date, balance::numeric(20,10) FROM public.get_data($1::text, $2::text);
 Explicite 类型转换, 指定输出顺序.