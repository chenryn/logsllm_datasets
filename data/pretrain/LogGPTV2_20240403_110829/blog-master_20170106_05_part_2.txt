package zetcode;  
import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.PreparedStatement;  
import java.sql.SQLException;  
import java.util.logging.Level;  
import java.util.logging.Logger;  
public class Prepared2 {  
    public static void main(String[] args) {  
        Connection con = null;  
        PreparedStatement pst = null;  
        String url = "jdbc:postgresql://localhost/testdb";  
        String user = "user12";  
        String password = "34klq*";  
        try {  
            con = DriverManager.getConnection(url, user, password);  
            pst = con.prepareStatement("INSERT INTO Testing(Id) VALUES(?)");  
            for (int i = 1; i <= 1000; i++) {  
                pst.setInt(1, i * 2);  
                pst.executeUpdate();  
            }  
        } catch (SQLException ex) {  
            Logger lgr = Logger.getLogger(Prepared2.class.getName());  
            lgr.log(Level.SEVERE, ex.getMessage(), ex);  
        } finally {  
            try {  
                if (pst != null) {  
                    pst.close();  
                }  
                if (con != null) {  
                    con.close();  
                }  
            } catch (SQLException ex) {  
                Logger lgr = Logger.getLogger(Prepared2.class.getName());  
                lgr.log(Level.SEVERE, ex.getMessage(), ex);  
            }  
        }  
    }  
}  
```  
Now we use the PreparedStatement to do the same task.  
```  
pst = con.prepareStatement("INSERT INTO Testing(Id) VALUES(?)");  
```  
We create the prepared statement using the prepareStatement() method.  
```  
for (int i = 1; i <= 1000; i++) {  
    pst.setInt(1, i * 2);  
    pst.executeUpdate();  
}  
```  
We bind a value to the prepared statement, execute it in a loop thousand times.  
```  
$ javac zetcode/Prepared2.java  
$ /usr/bin/time java -cp .:lib/postgresql.jdbc4.jar zetcode.Prepared2   
0.59user 0.11system 0:15.08elapsed 4%CPU (0avgtext+0avgdata 76912maxresident)k  
0inputs+64outputs (0major+4941minor)pagefaults 0swaps  
```  
This time it took 15s to insert 1000 rows. We have saved 17s using prepared statements.  
### Retrieving data  
Next we will show, how to retrieve data from a database table. We get all data from the authors table.  
```  
package zetcode;  
import java.sql.PreparedStatement;  
import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.ResultSet;  
import java.sql.SQLException;  
import java.util.logging.Level;  
import java.util.logging.Logger;  
public class Retrieve {  
    public static void main(String[] args) {  
        Connection con = null;  
        PreparedStatement pst = null;  
        ResultSet rs = null;  
        String url = "jdbc:postgresql://localhost/testdb";  
        String user = "user12";  
        String password = "34klq*";  
        try {  
            con = DriverManager.getConnection(url, user, password);  
            pst = con.prepareStatement("SELECT * FROM authors");  
            rs = pst.executeQuery();  
            while (rs.next()) {  
                System.out.print(rs.getInt(1));  
                System.out.print(": ");  
                System.out.println(rs.getString(2));  
            }  
        } catch (SQLException ex) {  
                Logger lgr = Logger.getLogger(Retrieve.class.getName());  
                lgr.log(Level.SEVERE, ex.getMessage(), ex);  
        } finally {  
            try {  
                if (rs != null) {  
                    rs.close();  
                }  
                if (pst != null) {  
                    pst.close();  
                }  
                if (con != null) {  
                    con.close();  
                }  
            } catch (SQLException ex) {  
                Logger lgr = Logger.getLogger(Retrieve.class.getName());  
                lgr.log(Level.WARNING, ex.getMessage(), ex);  
            }  
        }  
    }  
}  
```  
We get all authors from the authors table and print them to the console.  
```  
pst = con.prepareStatement("SELECT * FROM authors");  
rs = pst.executeQuery();  
```  
We execute a query that selects all columns from the authors table. We use the executeQuery() method. The method executes the given SQL statement, which returns a single ResultSet object. The ResultSet is the data table returned by the SQL query.  
```  
while (rs.next()) {  
      System.out.print(rs.getInt(1));  
      System.out.print(": ");  
      System.out.println(rs.getString(2));  
}  
```  
The next() method advances the cursor to the next record. It returns false, when there are no more rows in the result set. The getInt() and getString() methods retrieve the value of the designated column in the current row of this ResultSet object as an int and String in the Java programming language.  
```  
$ javac zetcode/Retrieve.java  
$ java -cp .:lib/postgresql.jdbc4.jar zetcode/Retrieve  
1: Jack London  
2: Honore de Balzac  
3: Lion Feuchtwanger  
4: Emile Zola  
5: Truman Capote  
```  
We have ids and names of authors printed to the console.  
### Properties  
It is a common practice to put the configuration data outside the program in a separate file. This way the programmers are more flexible. We can change the user, the password or the connection URL without needing to recompile the program. It is especially useful in a dynamic environment, where is a need for a lot of testing, debugging, securing data etc.  
In Java, the Properties is a class used often for this. The class is used for easy reading and saving of key/value properties.  
```  
db.url=jdbc:postgresql://localhost/testdb  
db.user=user12  
db.passwd=34klq*  
```  
We have a database.properties file, in which we have three key/value pairs. These are dynamically loaded during execution of the program.  
```  
package zetcode;  
import java.io.FileInputStream;  
import java.io.FileNotFoundException;  
import java.io.IOException;  
import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.ResultSet;  
import java.sql.SQLException;  
import java.sql.PreparedStatement;  
import java.util.Properties;  
import java.util.logging.Level;  
import java.util.logging.Logger;  
public class Retrieve2 {  
    public static void main(String[] args) {  
        Connection con = null;  
        PreparedStatement pst = null;  
        ResultSet rs = null;  
        Properties props = new Properties();  
        FileInputStream in = null;  
        try {  
            in = new FileInputStream("database.properties");  
            props.load(in);  
        } catch (IOException ex) {  
            Logger lgr = Logger.getLogger(Retrieve2.class.getName());  
            lgr.log(Level.SEVERE, ex.getMessage(), ex);  
        } finally {  
            try {  
                 if (in != null) {  
                     in.close();  
                 }  
            } catch (IOException ex) {  
                Logger lgr = Logger.getLogger(Retrieve2.class.getName());  
                lgr.log(Level.SEVERE, ex.getMessage(), ex);  
            }  
        }  
        String url = props.getProperty("db.url");  
        String user = props.getProperty("db.user");  
        String passwd = props.getProperty("db.passwd");  
        try {  
            con = DriverManager.getConnection(url, user, passwd);  
            pst = con.prepareStatement("SELECT * FROM Authors");  
            rs = pst.executeQuery();  
            while (rs.next()) {  
                System.out.print(rs.getInt(1));  
                System.out.print(": ");  
                System.out.println(rs.getString(2));  
            }  
        } catch (Exception ex) {  
            Logger lgr = Logger.getLogger(Retrieve2.class.getName());  
            lgr.log(Level.SEVERE, ex.getMessage(), ex);  
        } finally {  
            try {  
                if (rs != null) {  
                    rs.close();  
                }  
                if (pst != null) {  
                    pst.close();  
                }  
                if (con != null) {  
                    con.close();  
                }  
            } catch (SQLException ex) {  
                Logger lgr = Logger.getLogger(Retrieve2.class.getName());  
                lgr.log(Level.WARNING, ex.getMessage(), ex);  
            }  
        }  
    }  
}  
```  
We connect to the testdb database and print the contents of the authors table to the console. This time, we load the connection properties from a file. They are not hard coded in the proram.  
```  
Properties props = new Properties();  
FileInputStream in = null;  
try {  
    in = new FileInputStream("database.properties");  
    props.load(in);  
...  
```  
The Properties class is created. The data is loaded from the file called database.properties, where we have our configuration data.  
```  
String url = props.getProperty("db.url");  
String user = props.getProperty("db.user");  
String passwd = props.getProperty("db.passwd");  
```  
The values are retrieved with the getProperty() method.  
### Multiple statements  
It is possible to execute multiple SQL statements in one query.  
```  
package zetcode;  
import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.PreparedStatement;  
import java.sql.ResultSet;  
import java.sql.SQLException;  
import java.util.logging.Level;  
import java.util.logging.Logger;  
public class Multiple {  
    public static void main(String[] args) {  
        Connection con = null;  
        PreparedStatement pst = null;  
        ResultSet rs = null;  
        String url = "jdbc:postgresql://localhost/testdb";  
        String user = "user12";  
        String password = "34klq*";  
        try {  
            con = DriverManager.getConnection(url, user, password);  
            String query = "SELECT id, name FROM authors WHERE Id=1;"  
                    + "SELECT id, name FROM authors WHERE Id=2;"  
                    + "SELECT id, name FROM authors WHERE Id=3";  
            pst = con.prepareStatement(query);  
            boolean isResult = pst.execute();  
            do {  
                rs = pst.getResultSet();  
                while (rs.next()) {  
                    System.out.print(rs.getInt(1));  
                    System.out.print(": ");  
                    System.out.println(rs.getString(2));  
                }  
                isResult = pst.getMoreResults();  
            } while (isResult);  
        } catch (SQLException ex) {  
            Logger lgr = Logger.getLogger(Multiple.class.getName());  
            lgr.log(Level.SEVERE, ex.getMessage(), ex);  
        } finally {  
            try {  
                if (rs != null) {  
                    rs.close();  
                }  
                if (pst != null) {  
                    pst.close();  
                }  
                if (con != null) {  
                    con.close();  
                }  
            } catch (SQLException ex) {  
                Logger lgr = Logger.getLogger(Multiple.class.getName());  
                lgr.log(Level.WARNING, ex.getMessage(), ex);  
            }  
        }  
    }  
}  
```  
In the code example, we retrieve three rows from the authors table. We use three SELECT statements to get three rows.  
```  
String query = "SELECT id, name FROM authors WHERE Id=1;"  
        + "SELECT id, name FROM authors WHERE Id=2;"  
        + "SELECT id, name FROM authors WHERE Id=3";  
```  
Here we have a query with multiple statements. The statements are separated by a semicolon.  
```  
boolean isResult = pst.execute();  
```  
We call the execute() method of the prepared statement object. The method returns a boolean value indicating if the first result is a ResultSet object. Subsequent results are called using the getMoreResults() method.  
```  
do {  
    rs = pst.getResultSet();  
    while (rs.next()) {  
        System.out.print(rs.getInt(1));  
        System.out.print(": ");  
        System.out.println(rs.getString(2));  
    }  
    isResult = pst.getMoreResults();  
} while (isResult);  
```  
The processing of the results is done inside the do/while loop. The ResultSet is retrieved with the getResultSet() method call. To find out if there are other results, we call the getMoreResults() method.  
```  
$ javac zetcode/Multiple.java  
$ java -cp .:lib/postgresql.jdbc4.jar zetcode.Multiple  
1: Jack London  
2: Honore de Balzac  
3: Lion Feuchtwanger  
```  
The output of the example. The first three rows were retrieved from the authors table.  
### Metadata  
Metadata is information about the data in the database. Metadata in a PostgreSQL database contains information about the tables and columns, in which we store data. Number of rows affected by an SQL statement is a metadata. Number of rows and columns returned in a result set belong to metadata as well.  
Metadata in PostgreSQL can be obtained by calling the getMetaData() method of the result set object or from the information_schema table.  
Next we will show, how to print column headers with the data from the database table.  
```  
package zetcode;  
import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.PreparedStatement;  
import java.sql.ResultSet;  
import java.sql.ResultSetMetaData;  
import java.sql.SQLException;  
import java.util.Formatter;  
import java.util.logging.Level;  
import java.util.logging.Logger;  
public class ColumnHeaders {  
    public static void main(String[] args) {  
        Connection con = null;  
        PreparedStatement pst = null;  
        ResultSet rs = null;  
        String url = "jdbc:postgresql://localhost/testdb";  
        String user = "user12";  
        String password = "34klq*";  
        try {  
            con = DriverManager.getConnection(url, user, password);  
            String query = "SELECT name, title From authors, " +  
               "books WHERE authors.id=books.author_id";  
            pst = con.prepareStatement(query);  
            rs = pst.executeQuery();  
            ResultSetMetaData meta = rs.getMetaData();  
            String colname1 = meta.getColumnName(1);  
            String colname2 = meta.getColumnName(2);  
            Formatter fmt1 = new Formatter();  
            fmt1.format("%-21s%s", colname1, colname2);  
            System.out.println(fmt1);  
            while (rs.next()) {  
                Formatter fmt2 = new Formatter();  
                fmt2.format("%-21s", rs.getString(1));  
                System.out.print(fmt2);  
                System.out.println(rs.getString(2));  
            }  
        } catch (SQLException ex) {  
            Logger lgr = Logger.getLogger(ColumnHeaders.class.getName());  
            lgr.log(Level.SEVERE, ex.getMessage(), ex);  
        } finally {  
            try {  
                if (rs != null) {  
                    rs.close();  
                }  
                if (pst != null) {  
                    pst.close();  
                }  
                if (con != null) {  
                    con.close();  
                }  
            } catch (SQLException ex) {  
                Logger lgr = Logger.getLogger(ColumnHeaders.class.getName());  
                lgr.log(Level.WARNING, ex.getMessage(), ex);  
            }  
        }  
    }  
}  
```  