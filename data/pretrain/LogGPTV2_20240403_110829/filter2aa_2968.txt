# Eric Sesterhenn - DEF CON 2018 Presentation

## Introduction
- **Name:** Eric Sesterhenn
- **Title:** Principal Security Consultant
- **Company:** X41 D-SEC GmbH
- **Website:** [X41 D-SEC](https://www.x41-dsec.de/)

## Disclaimer
- The issues presented have been reported and fixed.
- These are open-source projects; please contribute to them.
- I am not interested in testing or debugging proprietary software in my spare time.

## Targets
- **Focus:** Linux Login Systems Using Smartcards

## Why Smartcards?
- **Authentication Control:** Smartcards manage authentication processes.
- **Root Privileges:** Authentication often runs with root privileges.
- **Trust:** Users and programmers inherently trust smartcards.

## Smartcard Components
- **User**
- **Smartcard**
- **Reader**
- **Reader Driver (PC/SC)**
- **Login (PAM)**
- **Smartcard Driver (OpenSC)**

## What is a Smartcard?
- **Physical Device:** Tamper-proof.
- **Security Features:** Designed to keep information secure.
- **Components:** Memory and processor.
- **Reference:** [Wikipedia - Smart Card Pinout](https://en.wikipedia.org/wiki/Smart_card#/media/File:SmartCardPinout.svg)

## Application Protocol Data Unit (APDU)
- **Protocol:** Used for communication with smartcards.
- **Standard:** ISO/IEC 7816-4.
- **Types:**
  - **T=0:** Character-oriented.
  - **T=1:** Block-oriented.
- **Example Command:** `00 20 00 01 04 31323334`
  - **CLA:** Class
  - **INS:** Instruction
  - **P1, P2:** Parameters
  - **LC:** Length of data
  - **Data:** Up to 3 bytes

## PC/SC API
- **Cross-Platform:** Works on Windows and *nix systems.
- **Function Example:**
  ```c
  LONG WINAPI SCardTransmit(
      SCARDHANDLE hCard,
      LPCSCARD_IO_REQUEST pioSendPci,
      LPCBYTE pbSendBuffer,
      DWORD cbSendLength,
      PSCARD_IO_REQUEST pioRecvPci,
      LPBYTE pbRecvBuffer,
      LPDWORD pcbRecvLength
  );
  ```

## PKCS11
- **API:** Platform-independent for cryptographic tokens.
- **Support:** OpenSSL, browsers, etc. (e.g., via libp11).
- **Windows:** Uses smartcard Minidriver.
- **Driver Matching:** Uses ATR (Answer to Reset) for card matching.
- **Function Example:**
  ```c
  CK_RV C_FindObjectsInit(
      CK_SESSION_HANDLE hSession,
      CK_ATTRIBUTE_PTR pTemplate,
      CK_ULONG ulCount
  );
  ```

## Smartcard Stack Summary
- **Application (PAM)**
- **PKCS11**
- **PC/SC**
- **APDU**
- **Physical Card**

## Smartcard for Sign-On
- **Process:**
  - **PAM:** Initiates the process.
  - **Smartcard:** Provides certificates.
  - **CRL Server:** Checks revocation.
  - **Nonce Generation and Signature Verification:** Ensures authenticity.

## Trusting the Smartcard
- **Driver Developers:** Assume smartcards are trustworthy.
- **Exploitation:** Manipulate card responses to abuse this trust.

## Bug Summary
- **Projects and Bugs:**
  - **libykneomgr:** 1 bug
  - **OpenSC:** Over 9000 bugs
  - **pam_pkcs11:** 1 bug
  - **smartcardservices:** 2 bugs
  - **Yubico-Piv:** 2 bugs
- **Note:** Fuzzed extensively, thanks to Frank Morgner for fixes.

## Apple Smartcardservices
- **Code Snippet:**
  ```c
  do {
      cacreturn = cacToken.exchangeAPDU(command, sizeof(command), result, resultLength);
      if ((cacreturn & 0xFF00) != 0x6300)
          CACError::check(cacreturn);
      ...
      memcpy(certificate + certificateLength, result, resultLength - 2);
      certificateLength += resultLength - 2;
      command[4] = cacreturn & 0xFF;
  } while ((cacreturn & 0xFF00) == 0x6300);
  ```

## OpenSC - CryptoFlex
- **Code Snippet:**
  ```c
  u8 buf[2048], *p = buf;
  size_t bufsize, keysize;
  sc_format_path("I1012", &path);
  r = sc_select_file(card, &path, &file);
  if (r)
      return 2;
  bufsize = file->size;
  sc_file_free(file);
  r = sc_read_binary(card, 0, buf, bufsize, 0);
  ```

## Basic Smartcard Exploitation
- **Control:** Basiccard provides control via BASIC programming.
- **Exploit Release:** Kevin's example will be released at beVX.
- **Other Methods:** SIMtrace, certain Javacards.

## YUBICO PIV
- **Code Snippet:**
  ```c
  if (*out_len + recv_len - 2 > max_out) {
      fprintf(stderr, "Output buffer too small, wanted to write %lu, max was %lu.", *out_len + recv_len - 2, max_out);
  }
  if (out_data) {
      memcpy(out_data, data, recv_len - 2);
      out_data += recv_len - 2;
      *out_len += recv_len - 2;
  }
  ```

## Challenges in Fuzzing a Protocol
- **Modern Fuzzers:** File-oriented (Radamsa, Hongfuzz, libfuzzer, AFL).
- **SCardTransmit():** Specifies expected data length.
- **File Handling:** Read from a file on each call, error on EOF.
- **No Poll Handling:** Unlike network sockets.

## How to Fuzz - OpenSC
- **reader-fuzzy.c:**
  - **Implementation:** Virtual smartcard reader interface.
  - **Response:** Malicious data read from a file (OPENSC_FUZZ_FILE).
  - **Fuzzer:** American Fuzz Lop (AFL).

## How to Fuzz - Winscard and PC/SC
- **Winscard (.dll):** On Linux and Unix.
- **Preloading:** For proprietary code.
- **Fuzzers:** Non-feedback fuzzers (e.g., radamsa) or AFL in qemu mode.

## How to Fuzz - Winscard 2
- **Tavis loadlibrary:** Extended for Winscard drivers.
- **Fuzzing:** Windows drivers on Linux without overhead.

## Smartcard Fuzzing
- **Release:** Now available.
- **GitHub Repository:** [x41-smartcard-fuzzing](https://github.com/x41sec/x41-smartcard-fuzzing)

## pam_pkcs11: Replay an Authentication
- **Process:**
  - **PAM:** Initiates.
  - **Smartcard:** Provides certificates.
  - **CRL Server:** Checks revocation.
  - **Nonce and Signature:** Ensures authenticity.

## Roadblocks
- **Limited Channel:** Back to the card.
- **Information Leaks:** Use revocation list checks.
- **Interaction:** Not possible with basiccard; use SIMtrace.
- **Bitflip:** A single bit flip can be sufficient for exploitation.

## Takeaways / Conclusions
- **Trust Models:** Think critically about trust.
- **Security Measures:** Can increase attack surface.
- **Fuzz Everything:** Comprehensive testing.
- **Limit Attack Surface:** Disable unnecessary drivers.
- **Driver Language:** Avoid writing drivers in C.

## Thanks
- **Q&A**
- **GitHub Repository:** [x41-smartcard-fuzzing](https://github.com/x41sec/x41-smartcard-fuzzing)
- **Email:** PI:EMAIL
- **LinkedIn:** [Eric Sesterhenn](https://www.linkedin.com/in/eric-sesterhenn/)
- **Company Website:** [X41 D-SEC](https://www.x41-dsec.de/)

---

This optimized version aims to provide a clear, coherent, and professional presentation of the content.