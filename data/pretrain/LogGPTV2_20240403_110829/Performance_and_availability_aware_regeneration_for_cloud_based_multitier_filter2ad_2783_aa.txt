# Title: Performance and Availability-Aware Regeneration for Cloud-Based Multitier Applications

## Authors:
- Gueyoung Jung
- Kaustubh R. Joshi
- Matti A. Hiltunen
- Richard D. Schlichting
- Calton Pu

### Affiliations:
- **Georgia Institute of Technology, College of Computing, Atlanta, GA, USA**
  - Gueyoung Jung, Calton Pu
  - Email: {gueyoung.jung, calton}@cc.gatech.edu
- **AT&T Labs Research, 180 Park Ave., Florham Park, NJ, USA**
  - Kaustubh R. Joshi, Matti A. Hiltunen, Richard D. Schlichting
  - Email: {kaustubh, hiltunen, rick}@research.att.com

## Abstract
In modern data center design, the role of repair is changing as systems increasingly rely on large numbers of inexpensive, less reliable components. This trend leads to a decrease in the mean time between failures (MTBF) of system components. For example, Google reported an average of 1000 node failures per year in their typical cluster, with an MTBF of 8.76 hours. Consequently, skilled manpower is becoming a scarce resource, encouraging data center operators to batch repairs and increase mean time to repair (MTTR).

This paper examines how virtual machine technology can be used to provide enhanced availability and performance in multitier applications. By regenerating software components in a controlled fashion, we achieve high availability while maintaining performance. Using information from queuing models, we ensure that the resulting performance degradation is minimized. Simulation results show that our proposed approach provides better availability and significantly lower response times compared to traditional approaches.

## 1. Introduction
Modern trends in system and data center design are shifting towards the use of large numbers of inexpensive, less reliable components. This shift results in a decrease in the MTBF of system components. For instance, Google reported an average of 1000 node failures per year in their typical cluster, with an MTBF of 8.76 hours. As a result, skilled manpower is becoming a scarce resource, leading data center operators to batch repairs and increase MTTR.

To ensure high availability, redundancy and replication are traditionally employed. However, this approach requires significant spare resources, which can be inefficient. We present a solution that ensures high availability and low response times by regenerating and redeploying software components on remaining resources. This regeneration-based approach minimizes performance degradation and ensures that the availability and performance goals of the system are met for as long as possible.

## 2. Architecture
We consider a consolidated data-center environment where a set of multitier applications is deployed across multiple physical hosts organized into hierarchical groupings (racks, clusters, and data centers). The physical hosts are interconnected by a data center network, and the network latency between hosts depends on their proximity in the hierarchy. For example, hosts in the same rack have lower latency than those in different racks or data centers.

Each application consists of a set of component types, each of which contains several components. To avoid single points of failure, each component type may support multiple replicas. The workload for each application is characterized by the request rates for each transaction type. Each component replica executes in its own Xen virtual machine (VM) on a physical host, sharing the host's CPU with other VMs.

## 3. Metrics and Models
Our approach uses metrics and models to make informed decisions about the placement and allocation of resources. Specifically, we use queuing models to predict the performance of the system under different configurations. The controller reconfigures the system in response to failures, ensuring that the desired availability and performance levels are maintained.

When a failure occurs, the controller can either migrate the affected VM to another host or reinstantiate it using a shared storage area network (SAN). Our approach assumes that disk failures are handled within the storage array using RAID technology. For applications that do not support state replication, protection can be provided at the VM level using runtime controllers such as [8].

The algorithms we propose are deterministic and facilitate the reconfiguration of the system to maintain the desired availability and performance levels. Simulation results demonstrate that our approach provides better availability and significantly lower response times compared to traditional approaches.

---

This optimized version of the text is more structured, clear, and professional, making it easier to read and understand.