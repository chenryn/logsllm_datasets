tain publicly-veriﬁable randomness have been presented. This
includes solutions which extract randomness from existing
systems. In this regard, Clark and Hengartner [18] show how
to collect (small amounts) of entropy from closing prices of
stocks. As noted by Pierrot and Wesolowski [38] this approach
relies on the assumption that
the published ﬁnancial data
cannot be manipulated. Similarly, the works of Bonneau et
al. [10] and Bentov et al. [4] demonstrate how to extract near-
uniformly distributed bits from one or a sequence of Bitcoin
blocks. However, as stated by the authors and analyzed in
later work [38], these approaches cannot provide truly unbiased
randomness.
The line of research on blockchain protocol designs, in
particular Algorand [17] and Ouroboros Praos [19], can also
be used to obtain distributed randomness. Both protocols
internally use veriﬁable random functions [35] (VRFs) to
produce a sequence of random numbers. In this way, both
designs can output randomness as a byproduct of their oper-
ation without any signiﬁcant additional communication cost.
Using hashchains instead of VRFs, Azouvi et al. [2] present
a solution with similar characteristics as a Smart Contract for
the Ethereum blockchain. However, all of these approaches,
where the adversary might be responsible for computing and
then revealing the next random output, are not strictly bias-
resistant, as the adversary can always decide to withhold the
next random output after gaining knowledge of it [42]. Strong
bias-resistance, as also provided by RandRunner, ensures that
there is a guaranteed protocol output in every round, regardless
of the actions taken by the round’s leader.
Protocols which can provide strong bias-resistance have
also been constructed by using threshold cryptography,
in
particular using publicly-veriﬁable secret sharing ([31], [16],
[45], [42]) or unique threshold signatures ([14], [29]). The
proposal of running and combining the results of n se-
cret sharing instances, as seen in the Ouroboros [31] and
Scrape [16] protocols, has since been improved by Syta et
al. [45] (RandHerd) and recently Schindler et al. [42] (Hy-
dRand). HydRand achieves a communication complexity of
O(n2) in a synchronous system model with n = 3f + 1
participants, without requiring a distributed key generation
13
(DKG) protocol or relying on pairing-based cryptography. As
it is the case with RandRunner, unpredictability for HydRand
is achieved after a few rounds, whereas the approaches of
Cachin et al. [14] and Dﬁnity [29] ensure unpredictability
after a single round. The two latter approaches also achieve
a communication complexity of O(n2). They, however, rely
on a trusted dealer or DKG protocol and, e.g., BLS [9],
[8], as a unique pairing-based threshold signature scheme. In
comparison, RandRunner is built using an RSA-based VDF
and does not require a trusted dealer or DKG protocol for its
setup. Its communication complexity improves upon all the
threshold cryptographic approaches, as a single leader drives
the protocol forward, whereas the interaction between all, or at
least a large subset of the participants, is required for the other
protocols. Regarding the guaranteed output delivery property,
HydRand can output fresh randomness at regular intervals as it
operates in a fully synchronous system model, whereas Rand-
Runner and other protocols which are safe under asynchrony
can only guarantee that an output is produced every round.
For RandRunner, the round duration may vary depending on
network conditions or if the protocol is attacked, but is upper
bounded by the ∆VDF parameter. The delay RandRunner
introduces in these circumstances can be seen as an advantage,
as any delay serves as a strong indicator for an active attack
(assuming network outages are rare) and thus strengthens the
conﬁdence in the protocol if it progresses as fast as expected.
Similar to Cachin et al. [14], our protocol ensures consistency
even under asynchronous network conditions and proceeds at
the network speed when not attacked, whereas HydRand loses
consistency if the synchrony assumption is violated and cannot
progress faster than the initially speciﬁed network delay, i.e.,
does not offer optimistic responsiveness [37]. Dﬁnity’s security
proofs also rely on synchrony.
A different line of research focuses on the instantiation of
a randomness beacon based on delay functions (also known
as slow-time functions), which can be seen as predecessor to
VDFs (as used in RandRunner) without an efﬁcient veriﬁcation
procedure. Using this primitive, Lenstra and Wesolowski [33]
designed the Unicorn protocol, in which in a ﬁrst phase a
set of distrusting parties collect a pool of inputs. In a second
step those inputs are hashed and fed into a delay function, the
output of which forms the randomness. As the delay parameter
is picked such that no party can compute the output during
the time when changes to the inputs are allowed, the result is
bias-resistant and unpredictable as long as at least one party
provides a random input with sufﬁcient entropy. A similar
approach is later implemented by leveraging a Smart Contract
on the Ethereum platform for agreement on the inputs [12].
To circumvent the limitations of the platform, the authors of
this approach describe an interactive, incentive-based game for
veriﬁcation. We believe that these systems and the underlying
idea of ﬁrst agreeing on a set of inputs and then executing a
long-running (veriﬁable) delay function on these inputs are
well suited for scenarios in which unpredictable and bias-
resistant randomness is required infrequently. In comparison,
RandRunner does not require an agreement protocol for the
VDF inputs and can provide a sequence of random numbers in
short intervals and with much lower communication overhead.
Moreover, RandRunner can also ensure unpredictability in
scenarios where the adversary can compute the VDF faster
than honest nodes.
VIII. CONCLUSION
By extending the VDF introduced by Pietrzak [39] to a
trapdoor VDF with strong uniqueness, which may be of inde-
pendent interest, we lay the foundation for our novel random-
ness beacon protocol RandRunner. Our design and the proper-
ties we achieve are unique in many ways. First, RandRunner
is extremely simple: It is built on top of cryptographic hash
functions, and the introduced VDF is based on the well studied
RSA assumption. The setup of the protocol does not require a
DKG protocol and can be veriﬁed non-interactively. Instead of
relying on a Byzantine or blockchain-based agreement protocol
to ensure consistency across all nodes, consistency is achieved
by leveraging the strong uniqueness property of the underlying
VDF. Thereby, the protocol essentially provides a predeter-
mined, yet unpredictable sequence of random numbers. This
novel design has tremendous advantages in terms of efﬁciency
and scalability, as the removal of the agreement protocol
reduces communication costs signiﬁcantly. In our case, only
a single message of approximately 10 KB in size has to be
propagated through the network to produce a fresh random
beacon output.
Additionally, our design is very resilient
to temporary
network delays or network outages. Although being designed
for practical deployment scenarios with bounded network
delay, RandRunner retains consistency and liveness even if
the network connectivity between correct nodes breaks down
completely. We have proven that RandRunner achieves unpre-
dictability under a synchronous network model, and provided
stochastic simulations to analyze the protocol
in case of
temporary network failures. Under these circumstances, we
observed that the provided unpredictability guarantees degrade
gradually, even when we consider an adversary which is not
affected by the network delays. Furthermore, our results also
show that the protocol can recover quickly, i.e., in a linear
amount of time respective to the duration of the network
outage.
Whenever the network is in good condition, and the
protocol is not under attack, the protocol is responsive [37],
[47] and proceeds at the speed of the network,
i.e., it is not
slowed down by introducing artiﬁcial delays. Attacks introduce
a (parameterizable) slowdown of the protocol, serving as a
strong indication for an ongoing attack. This leads us to the
additional evaluation of RandRunner in a covert adversary
model [1], in which the adversary wishes to hide its attack
traces. Our results show that unpredictability is achieved even
if a majority of nodes is under adversarial control or the
adversary can evaluate VDFs signiﬁcantly faster compared to
the other nodes.
ACKNOWLEDGMENT
This material is based upon work partially supported by
(1) the Christian-Doppler-Laboratory for Security and Quality
Improvement in the Production System Lifecycle; The ﬁnan-
cial support by the Austrian Federal Ministry for Digital and
Economic Affairs, the Nation Foundation for Research, Tech-
nology and Development and University of Vienna, Faculty
of Computer Science, Security & Privacy Group is gratefully
acknowledged; (2) SBA Research; the competence center SBA
Research (SBA-K1) funded within the framework of COMET
14
Competence Centers for Excellent Technologies by BMVIT,
BMDW, and the federal state of Vienna, managed by the
FFG; (3) the FFG Bridge 1 project 864738 PR4DLT. We
additionally thank Krzysztof Pietrzak for valuable discussions
and his answers to our technical questions regarding the used
VDF, as well as the anonymous reviewers for the excellent
feedback we received.
REFERENCES
[1] Y. Aumann and Y. Lindell, “Security against covert adversaries: Ef-
ﬁcient protocols for realistic adversaries,” in Theory of Cryptography
Conference. Springer, 2007, pp. 137–156.
[2] S. Azouvi, P. McCorry, and S. Meiklejohn, “Winning the caucus race:
Continuous leader election via public randomness,” arXiv preprint
arXiv:1801.07965, 2018.
[3] M. Bellare and P. Rogaway, “Random oracles are practical: A paradigm
for designing efﬁcient protocols,” in Proceedings of
the 1st ACM
conference on Computer and communications security, 1993, pp. 62–
73.
I. Bentov, A. Gabizon, and D. Zuckerman, “Bitcoin beacon,” arXiv
preprint arXiv:1605.04559, 2016.
[4]
[5] M. Blum, “Coin ﬂipping by telephone a protocol for solving impossible
problems,” ACM SIGACT News, vol. 15, no. 1, pp. 23–27, 1983.
[6] D. Boneh, J. Bonneau, B. B¨unz, and B. Fisch, “Veriﬁable delay
Springer,
functions,” in Annual international cryptology conference.
2018, pp. 757–788.
[7] D. Boneh, B. B¨unz, and B. Fisch, “A survey of two veriﬁable delay
functions,” Cryptology ePrint Archive, Report 2018/712, 2018.
[8] D. Boneh, C. Gentry, B. Lynn, and H. Shacham, “Aggregate and
Veriﬁably Encrypted Signatures from Bilinear Maps,” in Eurocrypt, vol.
2656. Springer, 2003, pp. 416–432.
[10]
[9] D. Boneh, B. Lynn, and H. Shacham, “Short Signatures from the Weil
Pairing,” Advances in Cryptology ASIACRYPT 2001, pp. 514–532, 2001.
J. Bonneau, J. Clark, and S. Goldfeder, “On bitcoin as a public
randomness source,” Cryptology ePrint Archive, Report 2015/1015,
2015.
J. Buchmann and H. C. Williams, “A key-exchange system based on
imaginary quadratic ﬁelds,” Journal of Cryptology, vol. 1, no. 2, pp.
107–118, 1988.
[11]
[12] B. B¨unz, S. Goldfeder, and J. Bonneau, “Proofs-of-delay and random-
ness beacons in ethereum,” in S&B ’17: Proceedings of the 1st IEEE
Security & Privacy on the Blockchain Workshop, 2017.
[13] V. Buterin, “Randao++,” 2017, Accessed: 2020-05-11.
Available: https://redd.it/4mdkku
[Online].
[15]
[14] C. Cachin, K. Kursawe, and V. Shoup, “Random oracles in constantino-
ple: Practical asynchronous byzantine agreement using cryptography,”
in Proceedings of the nineteenth annual ACM symposium on Principles
of distributed computing. ACM, 2000, pp. 123–132.
J. Camenisch and M. Michels, “Proving in zero-knowledge that a
number is the product of two safe primes,” in International Conference
on the Theory and Applications of Cryptographic Techniques. Springer,
1999, pp. 107–122.
I. Cascudo and B. David, “Scrape: Scalable randomness attested by
public entities,” in International Conference on Applied Cryptography
and Network Security. Springer, 2017, pp. 537–556.
J. Chen and S. Micali, “Algorand,” arXiv preprint arXiv:1607.01341,
2016.
J. Clark and U. Hengartner, “On the use of ﬁnancial data as a random
beacon.” EVT/WOTE, vol. 89, 2010.
[16]
[17]
[18]
[19] B. David, P. Gaˇzi, A. Kiayias, and A. Russell, “Ouroboros praos:
An adaptively-secure, semi-synchronous proof-of-stake blockchain,” in
Annual International Conference on the Theory and Applications of
Cryptographic Techniques. Springer, 2018, pp. 66–98.
[20] L. De Feo, S. Masson, C. Petit, and A. Sanso, “Veriﬁable delay
functions from supersingular isogenies and pairings,” in International
Conference on the Theory and Application of Cryptology and Informa-
tion Security. Springer, 2019, pp. 248–277.
15
[21] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker,
H. Sturgis, D. Swinehart, and D. Terry, “Epidemic algorithms for
replicated database maintenance,” in Proceedings of
the 6th ACM
Symposium on Principles of distributed computing, 1987, pp. 1–12.
J.
“Minimal
Accessed: 2020-07-08.
minimal-vdf-randomness-beacon/3566
2018,
[Online]. Available: https://ethresear.ch/t/
randomness
beacon,”
Drake,
VDF
[22]
[23] C. Dwork, N. Lynch, and L. Stockmeyer, “Consensus in the presence
of partial synchrony,” vol. 35, no. 2. ACM, 1988, pp. 288–323.
[24] N. D¨ottling, S. Garg, G. Malavolta, and P. N. Vasudevan, “Tight ver-
iﬁable delay functions,” Cryptology ePrint Archive, Report 2019/659,
2019.
[25] N. Ephraim, C. Freitag, I. Komargodski, and R. Pass, “Continuous
veriﬁable delay functions,” in Annual International Conference on the
Theory and Applications of Cryptographic Techniques. Springer, 2020,
pp. 125–154.
[26] A. Fiat and A. Shamir, “How to prove yourself: Practical solutions to
identiﬁcation and signature problems,” in Conference on the theory and
application of cryptographic techniques. Springer, 1986, pp. 186–194.
[27] T. K. Frederiksen, Y. Lindell, V. Osheter, and B. Pinkas, “Fast dis-
tributed rsa key generation for semi-honest and malicious adversaries,”
in Annual International Cryptology Conference.
Springer, 2018, pp.
331–361.
[28] R. Gennaro, D. Micciancio, and T. Rabin, “An efﬁcient non-interactive
statistical zero-knowledge proof system for quasi-safe prime products,”
in Proceedings of the 5th ACM conference on Computer and commu-
nications security, 1998, pp. 67–72.
[29] T. Hanke, M. Movahedi, and D. Williams, “DFINITY technology
overview series, consensus system,” CoRR, vol. abs/1805.04548, 2018.
[Online]. Available: http://arxiv.org/abs/1805.04548
[30] R. Karp, C. Schindelhauer, S. Shenker, and B. Vocking, “Randomized
rumor spreading,” in Proceedings 41st Annual Symposium on Founda-
tions of Computer Science.
IEEE, 2000, pp. 565–574.
[31] A. Kiayias, A. Russell, B. David, and R. Oliynykov, “Ouroboros: A
provably secure proof-of-stake blockchain protocol,” in Annual Inter-
national Cryptology Conference. Springer, 2017, pp. 357–388.
[32] E. Landerreche, M. Stevens, and C. Schaffner, “Non-interactive crypto-
graphic timestamping based on veriﬁable delay functions,” in Inter-
national Conference on Financial Cryptography and Data Security.
Springer, 2020, pp. 541–558.
[33] A. K. Lenstra and B. Wesolowski, “A random zoo: sloth, unicorn, and
trx,” Cryptology ePrint Archive, Report 2015/366, 2015.
[34] M. Mahmoody, C. Smith, and D. J. Wu, “A note on the (im)possibility