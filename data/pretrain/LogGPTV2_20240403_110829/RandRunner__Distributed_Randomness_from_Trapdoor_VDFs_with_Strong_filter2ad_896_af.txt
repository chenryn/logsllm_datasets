### Publicly-Verifiable Randomness Solutions

Several methods for generating publicly-verifiable randomness have been proposed, including those that extract randomness from existing systems. For instance, Clark and Hengartner [18] demonstrated how to collect small amounts of entropy from the closing prices of stocks. However, as noted by Pierrot and Wesolowski [38], this approach assumes that published financial data cannot be manipulated. Similarly, Bonneau et al. [10] and Bentov et al. [4] showed how to extract nearly uniformly distributed bits from one or a sequence of Bitcoin blocks. Despite these efforts, the authors and subsequent analyses [38] have highlighted that these methods do not provide truly unbiased randomness.

### Blockchain Protocol Designs for Distributed Randomness

Research on blockchain protocol designs, such as Algorand [17] and Ouroboros Praos [19], can also generate distributed randomness. Both protocols use verifiable random functions (VRFs) [35] to produce a sequence of random numbers. This allows them to output randomness as a byproduct of their operation without significant additional communication costs. Azouvi et al. [2] presented a similar solution using hashchains in a Smart Contract for the Ethereum blockchain. However, these approaches, where an adversary might compute and reveal the next random output, are not strictly bias-resistant, as the adversary can withhold the next random output after gaining knowledge of it [42].

### Strong Bias-Resistance and Threshold Cryptography

Protocols that provide strong bias-resistance, ensuring a guaranteed protocol output in every round, have been developed using threshold cryptography. These include publicly-verifiable secret sharing ([31], [16], [45], [42]) and unique threshold signatures ([14], [29]). For example, the Ouroboros [31] and Scrape [16] protocols run and combine the results of multiple secret sharing instances. Syta et al. [45] (RandHerd) and Schindler et al. [42] (HydRand) have further improved these methods. HydRand achieves a communication complexity of \(O(n^2)\) in a synchronous system model with \(n = 3f + 1\) participants, without requiring a distributed key generation (DKG) protocol or pairing-based cryptography.

### Comparison with RandRunner

RandRunner, built using an RSA-based VDF, does not require a trusted dealer or DKG protocol for its setup. It achieves lower communication complexity than threshold cryptographic approaches because a single leader drives the protocol forward, whereas other protocols require interaction among all or a large subset of participants. In terms of guaranteed output delivery, HydRand can output fresh randomness at regular intervals in a fully synchronous system model, while RandRunner and other protocols safe under asynchrony can only guarantee an output every round. The round duration in RandRunner may vary depending on network conditions or attacks but is upper-bounded by the \(\Delta VDF\) parameter. Any delay in RandRunner serves as a strong indicator of an active attack, enhancing confidence in the protocol's integrity.

### Delay Functions and Randomness Beacons

Another line of research focuses on randomness beacons based on delay functions, which are predecessors to VDFs without efficient verification. Lenstra and Wesolowski [33] designed the Unicorn protocol, where distrusting parties first collect a pool of inputs, which are then hashed and fed into a delay function. The output forms the randomness, which is bias-resistant and unpredictable as long as at least one party provides a sufficiently entropic input. A similar approach was later implemented using a Smart Contract on the Ethereum platform [12]. These systems are well-suited for scenarios requiring infrequent, unpredictable, and bias-resistant randomness. In contrast, RandRunner does not require an agreement protocol for VDF inputs and can provide a sequence of random numbers in short intervals with lower communication overhead. Additionally, RandRunner ensures unpredictability even if the adversary can compute the VDF faster than honest nodes.

### Conclusion

By extending Pietrzak's VDF [39] to a trapdoor VDF with strong uniqueness, we have laid the foundation for the novel randomness beacon protocol, RandRunner. This design is built on cryptographic hash functions and the well-studied RSA assumption, without requiring a DKG protocol. Consistency is achieved through the strong uniqueness property of the VDF, providing a predetermined yet unpredictable sequence of random numbers. This design offers significant advantages in efficiency and scalability, reducing communication costs. RandRunner is resilient to temporary network delays and outages, retaining consistency and liveness even if network connectivity breaks down. We have proven unpredictability under a synchronous network model and provided stochastic simulations to analyze the protocol during temporary network failures. Under good network conditions and without attacks, RandRunner proceeds at the speed of the network, introducing no artificial delays. Attacks introduce a parameterizable slowdown, serving as a strong indication of ongoing attacks.

### Acknowledgments

This work was partially supported by:
1. The Christian-Doppler-Laboratory for Security and Quality Improvement in the Production System Lifecycle, with financial support from the Austrian Federal Ministry for Digital and Economic Affairs, the Nation Foundation for Research, Technology and Development, and the University of Vienna, Faculty of Computer Science, Security & Privacy Group.
2. SBA Research, the competence center SBA Research (SBA-K1) funded within the framework of COMET Competence Centers for Excellent Technologies by BMVIT, BMDW, and the federal state of Vienna, managed by the FFG.
3. The FFG Bridge 1 project 864738 PR4DLT.
We also thank Krzysztof Pietrzak for valuable discussions and his technical insights on the VDF, as well as the anonymous reviewers for their excellent feedback.

### References

[1] Y. Aumann and Y. Lindell, “Security against covert adversaries: Efficient protocols for realistic adversaries,” in Theory of Cryptography Conference. Springer, 2007, pp. 137–156.
[2] S. Azouvi, P. McCorry, and S. Meiklejohn, “Winning the caucus race: Continuous leader election via public randomness,” arXiv preprint arXiv:1801.07965, 2018.
[3] M. Bellare and P. Rogaway, “Random oracles are practical: A paradigm for designing efficient protocols,” in Proceedings of the 1st ACM conference on Computer and communications security, 1993, pp. 62–73.
[4] I. Bentov, A. Gabizon, and D. Zuckerman, “Bitcoin beacon,” arXiv preprint arXiv:1605.04559, 2016.
[5] M. Blum, “Coin flipping by telephone a protocol for solving impossible problems,” ACM SIGACT News, vol. 15, no. 1, pp. 23–27, 1983.
[6] D. Boneh, J. Bonneau, B. Bünz, and B. Fisch, “Verifiable delay functions,” in Annual international cryptology conference. Springer, 2018, pp. 757–788.
[7] D. Boneh, B. Bünz, and B. Fisch, “A survey of two verifiable delay functions,” Cryptology ePrint Archive, Report 2018/712, 2018.
[8] D. Boneh, C. Gentry, B. Lynn, and H. Shacham, “Aggregate and Verifiably Encrypted Signatures from Bilinear Maps,” in Eurocrypt, vol. 2656. Springer, 2003, pp. 416–432.
[9] D. Boneh, B. Lynn, and H. Shacham, “Short Signatures from the Weil Pairing,” Advances in Cryptology ASIACRYPT 2001, pp. 514–532, 2001.
[10] J. Bonneau, J. Clark, and S. Goldfeder, “On bitcoin as a public randomness source,” Cryptology ePrint Archive, Report 2015/1015, 2015.
[11] J. Buchmann and H. C. Williams, “A key-exchange system based on imaginary quadratic fields,” Journal of Cryptology, vol. 1, no. 2, pp. 107–118, 1988.
[12] B. Bünz, S. Goldfeder, and J. Bonneau, “Proofs-of-delay and randomness beacons in ethereum,” in S&B ’17: Proceedings of the 1st IEEE Security & Privacy on the Blockchain Workshop, 2017.
[13] V. Buterin, “Randao++,” 2017, Accessed: 2020-05-11. Available: https://redd.it/4mdkku [Online].
[14] C. Cachin, K. Kursawe, and V. Shoup, “Random oracles in constantinople: Practical asynchronous byzantine agreement using cryptography,” in Proceedings of the nineteenth annual ACM symposium on Principles of distributed computing. ACM, 2000, pp. 123–132.
[15] J. Camenisch and M. Michels, “Proving in zero-knowledge that a number is the product of two safe primes,” in International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 1999, pp. 107–122.
[16] I. Cascudo and B. David, “Scrape: Scalable randomness attested by public entities,” in International Conference on Applied Cryptography and Network Security. Springer, 2017, pp. 537–556.
[17] J. Chen and S. Micali, “Algorand,” arXiv preprint arXiv:1607.01341, 2016.
[18] J. Clark and U. Hengartner, “On the use of financial data as a random beacon.” EVT/WOTE, vol. 89, 2010.
[19] B. David, P. Gazi, A. Kiayias, and A. Russell, “Ouroboros praos: An adaptively-secure, semi-synchronous proof-of-stake blockchain,” in Annual International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 2018, pp. 66–98.
[20] L. De Feo, S. Masson, C. Petit, and A. Sanso, “Verifiable delay functions from supersingular isogenies and pairings,” in International Conference on the Theory and Application of Cryptology and Information Security. Springer, 2019, pp. 248–277.
[21] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry, “Epidemic algorithms for replicated database maintenance,” in Proceedings of the 6th ACM Symposium on Principles of distributed computing, 1987, pp. 1–12.
[22] J. Drake, “Minimal VDF randomness beacon,” 2018, Accessed: 2020-07-08. Available: https://ethresear.ch/t/minimal-vdf-randomness-beacon/3566 [Online].
[23] C. Dwork, N. Lynch, and L. Stockmeyer, “Consensus in the presence of partial synchrony,” vol. 35, no. 2. ACM, 1988, pp. 288–323.
[24] N. Döttling, S. Garg, G. Malavolta, and P. N. Vasudevan, “Tight verifiable delay functions,” Cryptology ePrint Archive, Report 2019/659, 2019.
[25] N. Ephraim, C. Freitag, I. Komargodski, and R. Pass, “Continuous verifiable delay functions,” in Annual International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 2020, pp. 125–154.
[26] A. Fiat and A. Shamir, “How to prove yourself: Practical solutions to identification and signature problems,” in Conference on the theory and application of cryptographic techniques. Springer, 1986, pp. 186–194.
[27] T. K. Frederiksen, Y. Lindell, V. Osheter, and B. Pinkas, “Fast distributed RSA key generation for semi-honest and malicious adversaries,” in Annual International Cryptology Conference. Springer, 2018, pp. 331–361.
[28] R. Gennaro, D. Micciancio, and T. Rabin, “An efficient non-interactive statistical zero-knowledge proof system for quasi-safe prime products,” in Proceedings of the 5th ACM conference on Computer and communications security, 1998, pp. 67–72.
[29] T. Hanke, M. Movahedi, and D. Williams, “DFINITY technology overview series, consensus system,” CoRR, vol. abs/1805.04548, 2018. Available: http://arxiv.org/abs/1805.04548
[30] R. Karp, C. Schindelhauer, S. Shenker, and B. Vocking, “Randomized rumor spreading,” in Proceedings 41st Annual Symposium on Foundations of Computer Science. IEEE, 2000, pp. 565–574.
[31] A. Kiayias, A. Russell, B. David, and R. Oliynykov, “Ouroboros: A provably secure proof-of-stake blockchain protocol,” in Annual International Cryptology Conference. Springer, 2017, pp. 357–388.
[32] E. Landerreche, M. Stevens, and C. Schaffner, “Non-interactive cryptographic timestamping based on verifiable delay functions,” in International Conference on Financial Cryptography and Data Security. Springer, 2020, pp. 541–558.
[33] A. K. Lenstra and B. Wesolowski, “A random zoo: sloth, unicorn, and trx,” Cryptology ePrint Archive, Report 2015/366, 2015.
[34] M. Mahmoody, C. Smith, and D. J. Wu, “A note on the (im)possibility