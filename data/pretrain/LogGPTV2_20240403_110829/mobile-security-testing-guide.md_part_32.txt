file if it is stored in external storage. The whole process can be accomplished via Drozer and weasel (MWR's
advanced exploitation payload), which can install a full agent, injecting a limited agent into a running process or
connecting a reverse shell as a Remote Access Tool (RAT).
A full description of the attack is included in the blog article by MWR.
Testing Object Persistence (MSTG-PLATFORM-8)
Overview
There are several ways to persist an object on Android:
Object Serialization
An object and its data can be represented as a sequence of bytes. This is done in Java via object serialization.
Serialization is not inherently secure. It is just a binary format (or representation) for locally storing data in a .ser file.
Encrypting and signing HMAC-serialized data is possible as long as the keys are stored safely. Deserializing an object
requires a class of the same version as the class used to serialize the object. After classes have been changed, the
ObjectInputStream can't create objects from older .ser files. The example below shows how to create a Serializable
class by implementing the Serializable interface.
import java.io.Serializable;
public class Person implements Serializable {
private String firstName;
private String lastName;
public Person(String firstName, String lastName) {
this.firstName = firstName;
this.lastName = lastName;
}
//..
//getters, setters, etc
//..
}
Now you can read/write the object with ObjectInputStream / ObjectOutputStream in another class.
JSON
There are several ways to serialize the contents of an object to JSON. Android comes with the JSONObject and
JSONArray classes. A wide variety of libraries, including GSON, Jackson, Moshi, can also be used. The main
differences between the libraries are whether they use reflection to compose the object, whether they support
annotations, whether the create immutable objects, and the amount of memory they use. Note that almost all the
JSON representations are String-based and therefore immutable. This means that any secret stored in JSON will be
harder to remove from memory. JSON itself can be stored anywhere, e.g., a (NoSQL) database or a file. You just
need to make sure that any JSON that contains secrets has been appropriately protected (e.g., encrypted/HMACed).
See the data storage chapter for more details. A simple example (from the GSON User Guide) of writing and reading
JSON with GSON follows. In this example, the contents of an instance of the BagOfPrimitives is serialized into
JSON:
class BagOfPrimitives {
private int value1 = 1;
private String value2 = "abc";
private transient int value3 = 3;
BagOfPrimitives() {
// no-args constructor
232
Android Platform APIs
}
}
// Serialization
BagOfPrimitives obj = new BagOfPrimitives();
Gson gson = new Gson();
String json = gson.toJson(obj);
// ==> json is {"value1":1,"value2":"abc"}
XML
There are several ways to serialize the contents of an object to XML and back. Android comes with the
XmlPullParser interface which allows for easily maintainable XML parsing. There are two implementations within
Android: KXmlParser and ExpatPullParser . The Android Developer Guide provides a great write-up on how to use
them. Next, there are various alternatives, such as a SAX parser that comes with the Java runtime. For more
information, see a blogpost from ibm.com. Similarly to JSON, XML has the issue of working mostly String based,
which means that String-type secrets will be harder to remove from memory. XML data can be stored anywhere
(database, files), but do need additional protection in case of secrets or information that should not be changed. See
the data storage chapter for more details. As stated earlier: the true danger in XML lies in the XML eXternal Entity
(XXE) attack as it might allow for reading external data sources that are still accessible within the application.
ORM
There are libraries that provide functionality for directly storing the contents of an object in a database and then
instantiating the object with the database contents. This is called Object-Relational Mapping (ORM). Libraries that use
the SQLite database include
OrmLite,
SugarORM,
GreenDAO and
ActiveAndroid.
Realm, on the other hand, uses its own database to store the contents of a class. The amount of protection that ORM
can provide depends primarily on whether the database is encrypted. See the data storage chapter for more details.
The Realm website includes a nice example of ORM Lite.
Parcelable
Parcelable is an interface for classes whose instances can be written to and restored from a Parcel . Parcels are
often used to pack a class as part of a Bundle for an Intent . Here's an Android developer documentation example
that implements Parcelable :
public class MyParcelable implements Parcelable {
private int mData;
public int describeContents() {
return 0;
}
public void writeToParcel(Parcel out, int flags) {
out.writeInt(mData);
}
public static final Parcelable.Creator CREATOR
= new Parcelable.Creator() {
public MyParcelable createFromParcel(Parcel in) {
return new MyParcelable(in);
}
233
Android Platform APIs
public MyParcelable[] newArray(int size) {
return new MyParcelable[size];
}
};
private MyParcelable(Parcel in) {
mData = in.readInt();
}
}
Because this mechanism that involves Parcels and Intents may change over time, and the Parcelable may contain
IBinder pointers, storing data to disk via Parcelable is not recommended.
Protocol Buffers
Protocol Buffers by Google, are a platform- and language neutral mechanism for serializing structured data by means
of the Binary Data Format. There have been a few vulnerabilities with Protocol Buffers, such as CVE-2015-5237. Note
that Protocol Buffers do not provide any protection for confidentiality: there is no built in encryption.
Static Analysis
If object persistence is used for storing sensitive information on the device, first make sure that the information is
encrypted and signed/HMACed. See the chapters on data storage and cryptographic management for more details.
Next, make sure that the decryption and verification keys are obtainable only after the user has been authenticated.
Security checks should be carried out at the correct positions, as defined in best practices.
There are a few generic remediation steps that you can always take:
1. Make sure that sensitive data has been encrypted and HMACed/signed after serialization/persistence. Evaluate
the signature or HMAC before you use the data. See the chapter about cryptography for more details.
2. Make sure that the keys used in step 1 can't be extracted easily. The user and/or application instance should be
properly authenticated/authorized to obtain the keys. See the data storage chapter for more details.
3. Make sure that the data within the de-serialized object is carefully validated before it is actively used (e.g., no
exploit of business/application logic).
For high-risk applications that focus on availability, we recommend that you use Serializable only when the
serialized classes are stable. Second, we recommend not using reflection-based persistence because
the attacker could find the method's signature via the String-based argument
the attacker might be able to manipulate the reflection-based steps to execute business logic.
See the anti-reverse-engineering chapter for more details.
Object Serialization
Search the source code for the following keywords:
import java.io.Serializable
implements Serializable
JSON
If you need to counter memory-dumping, make sure that very sensitive information is not stored in the JSON format
because you can't guarantee prevention of anti-memory dumping techniques with the standard libraries. You can
check for the following keywords in the corresponding libraries:
JSONObject Search the source code for the following keywords:
import org.json.JSONObject;
234
Android Platform APIs
import org.json.JSONArray;
GSON Search the source code for the following keywords:
import com.google.gson
import com.google.gson.annotations
import com.google.gson.reflect
import com.google.gson.stream
new Gson();
Annotations such as @Expose , @JsonAdapter , @SerializedName , @Since , and @Until
Jackson Search the source code for the following keywords:
import com.fasterxml.jackson.core
import org.codehaus.jackson for the older version.
ORM
When you use an ORM library, make sure that the data is stored in an encrypted database and the class
representations are individually encrypted before storing it. See the chapters on data storage and cryptographic
management for more details. You can check for the following keywords in the corresponding libraries:
OrmLite Search the source code for the following keywords:
import com.j256.*
import com.j256.dao
import com.j256.db
import com.j256.stmt
import com.j256.table\
Please make sure that logging is disabled.
SugarORM Search the source code for the following keywords:
import com.github.satyan
extends SugarRecord
In the AndroidManifest, there will be meta-data entries with values such as DATABASE , VERSION , QUERY_LOG and
DOMAIN_PACKAGE_NAME .
Make sure that QUERY_LOG is set to false.
GreenDAO Search the source code for the following keywords:
import org.greenrobot.greendao.annotation.Convert
import org.greenrobot.greendao.annotation.Entity
import org.greenrobot.greendao.annotation.Generated
import org.greenrobot.greendao.annotation.Id
import org.greenrobot.greendao.annotation.Index
import org.greenrobot.greendao.annotation.NotNull
import org.greenrobot.greendao.annotation.*
import org.greenrobot.greendao.database.Database
import org.greenrobot.greendao.query.Query
ActiveAndroid Search the source code for the following keywords:
ActiveAndroid.initialize();
import com.activeandroid.Configuration
import com.activeandroid.query.*
235
Android Platform APIs
Realm Search the source code for the following keywords:
import io.realm.RealmObject;
import io.realm.annotations.PrimaryKey;
Parcelable
Make sure that appropriate security measures are taken when sensitive information is stored in an Intent via a Bundle
that contains a Parcelable. Use explicit Intents and verify proper additional security controls when using application-
level IPC (e.g., signature verification, intent-permissions, crypto).
Dynamic Analysis
There are several ways to perform dynamic analysis:
1. For the actual persistence: Use the techniques described in the data storage chapter.
2. For reflection-based approaches: Use Xposed to hook into the deserialization methods or add unprocessable
information to the serialized objects to see how they are handled (e.g., whether the application crashes or extra
information can be extracted by enriching the objects).
Testing enforced updating (MSTG-ARCH-9)
Starting from API level 21 (Android 5.0), together with the Play Core Library, apps can be forced to be updated. This
mechanism is based on using the AppUpdateManager . Before that, other mechanisms were used, such as doing http
calls to the Google Play Store, which are not as reliable as the APIs of the Play Store might change. Alternatively,
Firebase could be used to check for possible forced updates as well (see this blog). Enforced updating can be really
helpful when it comes to public key pinning (see the Testing Network communication for more details) when a pin has
to be refreshed due to a certificate/public key rotation. Next, vulnerabilities are easily patched by means of forced
updates.
Please note that newer versions of an application will not fix security issues that are living in the back-ends to which
the app communicates. Allowing an app not to communicate with it might not be enough. Having proper API-lifecycle
management is key here. Similarly, when a user is not forced to update, do not forget to test older versions of your
app against your API and/or use proper API versioning.
Static analysis
The code sample below shows the example of an app-update:
//Part 1: check for update
// Creates instance of the manager.
AppUpdateManager appUpdateManager = AppUpdateManagerFactory.create(context);
// Returns an intent object that you use to check for an update.
Task appUpdateInfo = appUpdateManager.getAppUpdateInfo();
// Checks that the platform will allow the specified type of update.
if (appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE
// For a flexible update, use AppUpdateType.FLEXIBLE
&& appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)) {
//...Part 2: request update
appUpdateManager.startUpdateFlowForResult(
// Pass the intent that is returned by 'getAppUpdateInfo()'.
appUpdateInfo,
// Or 'AppUpdateType.FLEXIBLE' for flexible updates.
AppUpdateType.IMMEDIATE,
236
Android Platform APIs
// The current activity making the update request.
this,
// Include a request code to later monitor this update request.
MY_REQUEST_CODE);
//...Part 3: check if update completed succesfully
@Override
public void onActivityResult(int requestCode, int resultCode, Intent data) {
if (myRequestCode == MY_REQUEST_CODE) {
if (resultCode != RESULT_OK) {
log("Update flow failed! Result code: " + resultCode);
// If the update is cancelled or fails,
// you can request to start the update again in case of forced updates
}
}
}
//..Part 4:
// Checks that the update is not stalled during 'onResume()'.
// However, you should execute this check at all entry points into the app.
@Override
protected void onResume() {
super.onResume();
appUpdateManager
.getAppUpdateInfo()
.addOnSuccessListener(
appUpdateInfo -> {
...
if (appUpdateInfo.updateAvailability()
== UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS) {
// If an in-app update is already running, resume the update.
manager.startUpdateFlowForResult(
appUpdateInfo,
IMMEDIATE,
this,
MY_REQUEST_CODE);
}
});
}
}
Source: https://developer.android.com/guide/app-bundle/in-app-updates
When checking for a proper update mechanism, make sure the usage of the AppUpdateManager is present. If it is not
yet, then this means that users might be able to remain on an older version of the application with the given
vulnerabilities. Next, pay attention to the AppUpdateType.IMMEDIATE use: if a security update comes in, then this flag
should be used in order to make sure that the user cannot go forward with using the app without updating it. As you
can see, in part 3 of the example: make sure that cancellations or errors do end up in re-checks and that a user
cannot move forward in case of a critical security update. Finally, in part 4: you can see that for every entrypoint in the
application, an update-mechanism should be enforced, so that bypassing it will be harder.
Dynamic analysis
In order to test for proper updating: try downloading an older version of the application with a security vulnerability,
either by a release from the developers or by using a third party app-store. Next, verify whether or not you can
continue to use the application without updating it. If an update prompt is given, verify if you can still use the
application by canceling the prompt or otherwise circumventing it through normal application usage. This includes
237
Android Platform APIs
validating whether the back-end will stop calls to vulnerable back-ends and/or whether the vulnerable app-version
itself is blocked by the back-end. Lastly, see if you can play with the version number of a man-in-the-middled app and
see how the backend responds to this (and if it is recorded at all for instance).
References
Android App Bundles and updates
https://developer.android.com/guide/app-bundle/in-app-updates
Android Fragment Injection
https://www.synopsys.com/blogs/software-security/fragment-injection/
https://securityintelligence.com/wp-content/uploads/2013/12/android-collapses-into-fragments.pdf
Android Permissions Documentation
https://developer.android.com/training/permissions/usage-notes