### API List (for this Experiment)
DoubleX successfully detects all vulnerabilities for 62 out of 73 extensions, corresponding to the accurate detection of 151 out of 163 flaws (92.64%). The twelve undetected flaws are categorized as follows:
- **Four Flaws**: Related to dynamic arrays, such as invocations of a function through `handlers[event.message]`, which cannot be statically resolved.
- **Four Flaws**: Data flow issues related to circular references in objects.
- **Four Flaws**: Handler functions invoking a function that is not yet defined during the parsing process. While DoubleX correctly hoists function declarations, it encounters issues when a function is defined as a variable (e.g., `foo = function() {...}`), which should be defined before use according to the ECMAScript specification [25, 56].

Additionally, for six extensions that have not been updated since Somé’s analysis, we report and confirm (after manual review) three `XMLHttpRequest` and four storage vulnerabilities, which were previously undetected. This demonstrates that, besides accurately detecting vulnerabilities in the wild (89% verified reported data flows, cf. Section 5.2.1), DoubleX also correctly identifies the majority of known flaws (92.64%).

### 5.5 Run-Time Performance
We evaluated DoubleX's run-time performance on a server equipped with four Intel(R) Xeon(R) Platinum 8160 CPUs (each with 48 logical cores) and 1.5 TB of RAM. Since DoubleX analyzes each extension on a single core, the reported run-time is for a single CPU. The most time-consuming step in our approach involves data flow and pointer analyses, which depend heavily on the size of the Abstract Syntax Tree (AST). We traverse the AST to store newly declared variables, look for previously defined variables, and re-traverse functions when they are called.

On average, DoubleX requires:
- **11 seconds** to analyze an extension with content scripts and background pages.
- **96.5 seconds** to analyze content scripts and Web Accessible Resources (WARs), due to their larger size (cf. Section 5.1.2).

The median times are:
- **2.5 seconds** for content scripts and background pages.
- **31.8 seconds** for content scripts and WARs.

The maximum times are:
- **1,498 seconds** for content scripts and background pages.
- **1,116 seconds** for content scripts and WARs.

In practice, the average results are heavily influenced by a few extensions that took a long time to analyze. Figure 5 presents the Cumulative Distribution Function (CDF) [49] for our run-time performance. Specifically, we could analyze 93% of the extensions with content scripts and background pages in less than 20 seconds, and 45% of the extensions with content scripts and WARs in less than 20 seconds. This indicates that DoubleX can effectively analyze extensions from the wild, with an analysis time of mostly a few seconds per extension.

### 5.6 Summary
DoubleX analyzed 154,484 Chrome extensions and reported 278 (0.18%) as having a data flow between an attacker and the sensitive APIs considered. These suspicious flows expanded to 309 reports, 275 (89%) of which had a verified dangerous data flow. Additionally, we verified that 209 reports could be exploited according to our threat model. These 209 flaws correspond to 184 vulnerable extensions, affecting over 2.4 million users.

Regarding potentially missed vulnerable extensions, we evaluated DoubleX on the vulnerable extension set provided by EmPoWeb, where it accurately flagged almost 93% of the flaws. We observed that 87% of the vulnerable extensions were already in the store and vulnerable one year ago, despite disclosures and updates. Given that extension developers may not have incentives to patch vulnerabilities, integrating DoubleX into Google's vetting process (cf. Section 6.1) could help reduce the number of vulnerable extensions in the store. Furthermore, DoubleX could provide feedback to developers regarding the execution of attacker-controllable input or sensitive user data exfiltration, thereby limiting the occurrence of such vulnerabilities.

### 6 Discussion
#### 6.1 Extension Vetting: Workflow Integration
Given the precision and recall of DoubleX, we believe it can be integrated into the vetting process conducted by Google for newly uploaded extensions [16]. Currently, this system aims to identify extensions that request powerful permissions or are clearly malicious. However, a feedback channel to alert developers about potential vulnerabilities would be beneficial. This is particularly important for sensitive APIs and data flows.

#### 6.2 Limitations
Our analysis is limited to the scripts within the extension package and does not consider import statements or modules. DoubleX relies on static analysis to build the Extension Dependence Graph (EDG), including control, data, and message flows, and pointer analysis. While static analysis provides complete coverage, it is subject to traditional flaws induced by JavaScript's dynamic nature [3, 30, 36, 37, 79]. For example, we may miss flaws due to dynamic code generation. Although we can handle dynamically invoked sink functions (e.g., `window['e' + 'v' + 'a' + 'l'](value)`, cf. Section 4.4.2) as long as we can statically resolve and/or compute the arguments, we may miss dynamic function invocations (e.g., `handlers[partOfMessage]`), as discussed in Section 5.4.

Furthermore, we chose to build the Program Dependence Graph (PDG) of extension components by traversing the Control Flow Graph (CFG) once, which may lead to under-approximations. We discussed the concept of soundiness in Section 5.2.1. In an Open World model like ours, determining the number of vulnerable extensions DoubleX misses would be extremely challenging, as it would require manually reviewing hundreds of extensions to find a few vulnerable ones. As a best-effort strategy, we evaluated DoubleX on the vulnerable extension set released with EmPoWeb, where it accurately detected 92.64% of the flaws. Our tool is very precise, with over 89% of our reports having a verified dangerous data flow.

#### 6.3 Analyzing Firefox Extensions
DoubleX can also analyze Firefox extensions. To collect these extensions, we visited the Firefox gallery, which contains links to all extensions, ordered by category [51]. Using Puppeteer [68], we automatically downloaded and unpacked the extensions. On April 6, 2021, we successfully collected 19,577 extensions. As with Chrome, we parsed the `manifest.json` of each extension to extract their components and ran DoubleX on them. Table 4 summarizes our findings:

| Sensitive API | #Reports | #DF | #1-way DF | #Exploitable |
|---------------|----------|-----|-----------|--------------|
| ajax          | 1        | 1   | 0         | 0            |
| downloads.download | 3 | 3   | -         | 3            |
| eval          | 2        | 2   | -         | 0            |
| fetch         | 4        | 3   | 1         | 1            |
| setTimeout    | 5        | 5   | -         | 0            |
| tabs.executeScript | 2 | 2   | -         | 1            |
| XMLHttpRequest.open | 7 | 6   | 1         | 3            |
| **Sum**       | **24**   | **22** | **2**     | **8**        |

Out of 24 reports, we detected 8 that are exploitable under our threat model. We also verified the presence of 22 dangerous data flows and 2 additional data flows without a backchannel. For example, controlling a URL prefix for an `XMLHttpRequest` is not considered exploitable. As mentioned in Section 4.3.1, we took into account the specific message-passing APIs for Firefox and handled responses with a Promise. For exfiltration APIs, we detect suspicious data flows based on callbacks and leave the Promise implementation for future work.

### 7 Related Work
#### Browser Extension Security
- **2010**: Bandhakavi et al. introduced Vex, which uses static information flow tracking on 2,452 (now deprecated) XPCOM Firefox extensions [5].
- **2012**: Carlini et al. combined network traffic analysis and manual review to evaluate Chrome security mechanisms [8].
- **2015**: Calzavara et al. proposed a formal security analysis of browser extensions, focusing on privilege escalation [7].
- **2016**: Salih et al. highlighted a security issue with the XPCOM namespace using CrossFire for static data flow analysis [6].
- **2017**: Starov et al. used BrowsingFog for dynamic analysis to detect privacy leakage from 10,000 Chrome extensions [76].
- **2019**: Somé considered message-passing APIs to exploit browser extension capabilities, but his analysis yielded many false positives [72].

DoubleX defines an EDG to model control, data, and message flows, including pointer analysis, enabling precise reasoning about suspicious data flows and detecting non-obvious vulnerabilities.

#### Data Flow Analysis for Vulnerability Detection
- **PHP**: Jovanovic et al. implemented Pixy for static data flow analysis to discover cross-site scripting vulnerabilities [38].
- **Yamaguchi et al.**: Leveraged AST enhanced with control and data flow information to model templates for known vulnerabilities [83].
- **Backes et al.**: Used similar data structures to identify PHP application vulnerabilities [4].
- **VulSniper**: Duan et al. used control flow information to encode programs and feed them to a neural network for vulnerability detection [24].

Unlike these approaches, DoubleX does not require prior knowledge of vulnerabilities to operate.

### 8 Conclusion
In this paper, we designed and built DoubleX to detect security and privacy threats in benign-but-buggy extensions. We studied how a web page or another extension without specific privileges could exploit a vulnerable extension. DoubleX statically abstracts an extension's source code to its EDG and performs data flow analysis to detect suspicious flows between external actors (e.g., a web page or another extension controlled by an attacker) and security- or privacy-critical APIs.

The core components of DoubleX include:
1. **Abstracting Source Code**: Each extension component is abstracted to its AST, enhanced with control and data flows, and pointer analysis information.
2. **Modeling Messages**: Messages exchanged between extension components and outside the extension (with an attacker) are modeled.
3. **Data Flow Analysis**: The resulting EDG is used to perform an in-depth data flow analysis between sensitive APIs and external messages.

We analyzed 154,484 Chrome extensions and flagged 278 as having a suspicious data flow, expanding to 309 reports, 89% of which had a verified dangerous data flow. We detected 184 extensions that are exploitable under our threat model, leading to arbitrary code execution in any website or sensitive user data exfiltration. We evaluated DoubleX on a ground-truth extension set, where it accurately flagged almost 93% of known flaws. To raise awareness and enable automatic detection of such threats, we make DoubleX publicly available [27].

### Acknowledgments
We thank the anonymous reviewers for their valuable feedback. Special thanks to our shepherd Yousra Aafer for her guidance and support in preparing the final version of this paper.

### References
[1] Anupama Aggarwal, Bimal Viswanath, Liang Zhang, Saravana Kumar, Ayush Shah, and Ponnurangam Kumaraguru. 2018. I Spy with My Little Eye: Analysis and Detection of Spying Browser Extensions. In Euro S&P.
[2] Alfred V. Aho, Monica S. Lam, Ravi Sethi, and Jeffrey D. Ullman. 2006. Compilers: Principles, Techniques, and Tools (Second Edition). Addison Wesley. ISBN: 978-0321486813.
[3] Esben Andreasen and Anders Møller. 2014. Determinacy in Static Analysis for jQuery. In Conference on Object Oriented Programming Systems, Languages, and Applications (OOPSLA).
[4] Michael Backes, Konrad Rieck, Malte Skoruppa, Ben Stock, and Fabian Yamaguchi. 2017. Efficient and Flexible Discovery of PHP Application Vulnerabilities. In Euro S&P.
[5] Sruthi Bandhakavi, Samuel T. King, P. Madhusudan, and Marianne Winslett. 2010. VEX: Vetting Browser Extensions for Security Vulnerabilities. In USENIX Security Symposium.
[6] Ahmet Salih Buyukkayhan, Kaan Onarlioglu, William Robertson, and Engin Kirda. 2016. CrossFire: An Analysis of Firefox Extension-Reuse Vulnerabilities. In NDSS.
[7] Stefano Calzavara, Michele Bugliesi, Silvia Crafa, and Enrico Steffinlongo. 2015. Fine-Grained Detection of Privilege Escalation Attacks on Browser Extensions. In Programming Languages and Systems.
[8] Nicholas Carlini, Adrienne Porter Felt, and David Wagner. 2012. An Evaluation of the Google Chrome Extension Security Architecture. In USENIX Security Symposium.
[9] Quan Chen and Alexandros Kapravelos. 2018. Mystique: Uncovering Information Leakage from Browser Extensions. In CCS.
[10] chrome. [n. d.]. Chrome Web Store Sitemap. https://chrome.google.com/webstore/sitemap. Accessed on 2021-04-25.
[11] chrome. [n. d.]. chrome.extension. https://developer.chrome.com/extensions/extension. Accessed on 2021-04-21.
[12] chrome. [n. d.]. chrome.runtime. https://developer.chrome.com/docs/extensions/reference/runtime. Accessed on 2021-04-29.
[13] chrome. [n. d.]. chrome.tabs. https://developer.chrome.com/extensions/tabs. Accessed on 2021-04-21.
[14] chrome. [n. d.]. Declare Permissions. https://developer.chrome.com/docs/extensions/mv3/declare_permissions. Accessed on 2021-04-21.
[15] chrome. [n. d.]. externally_connectable. https://developer.chrome.com/docs/extensions/mv3/manifest/externally_connectable/. Accessed on 2021-04-21.
[16] chrome. [n. d.]. How long will it take to review my item? https://developer.chrome.com/docs/webstore/faq/#faq-listing-108. Accessed on 2021-04-26.
[17] chrome. [n. d.]. Manifest File Format. https://developer.chrome.com/docs/extensions/mv3/manifest. Accessed on 2021-04-25.
[18] chrome. [n. d.]. Message Passing. https://developer.chrome.com/docs/extensions/mv3/messaging. Accessed on 2021-04-21.
[19] chrome. [n. d.]. Migrating to Manifest V3. https://developer.chrome.com/docs/extensions/mv3/intro/mv3-migration. Accessed on 2021-04-21.
[20] chrome. [n. d.]. Overview of Manifest V3. https://developer.chrome.com/docs/extensions/mv3/overview. Accessed on 2021-04-21.