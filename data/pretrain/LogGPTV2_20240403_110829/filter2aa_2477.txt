# Pinworm: A Comprehensive Security Analysis Framework

## Introduction
Pinworm is a security analysis framework designed to monitor and intercept device driver calls, providing insights into potential privacy breaches. This document outlines the project's background, previous related work, data observations, and technical details.

## Previous Related Work
- **Badger: Blackhat 2014**
  - [Link](https://www.blackhat.com/docs/us-14/materials/us-14-Rogers-Badger-The-Networked-Security-State-Estimation-Toolkit.pdf)
- **Kobra: BsidesLV 2015**
  - [Link](https://youtu.be/gOMVOv6VX50)

### Previous Work from Other People
- **IRPtracker**
  - [Link](https://www.osronline.com/article.cfm?article=199)
- **IRPmon**
  - [Link](https://github.com/MartinDrab/IRPMon)

## Data Observations
- **Inside Packets:** 998,802,444
- **Outside Packets:** 1,371,775,557
- **Observed Destinations (Firewalled Side):** 29,829
  - 29,525 resolved via reverse lookup

### 2016 Observations
- **Destinations per HTTPS Connection:** Increased by 400% for certain media sites.
- **SSL Data Streaming:** Continues even when the PC is idle.
- **More Details:** To be added later.

## Is It 1984?
- **Mouse Movements:**
  - List of sites that track mouse movements (to be released at the talk).
- **Key Strokes?**
- **Microphone?**
- **Video?**

## IRP (I/O Request Packet) Analysis
- **Previous Projects:**
  - IRPtracker proved interesting but is limited to 32-bit systems.
  - IRPmon, developed by Martin Drab, provided a good start but lacked precision and detailed information on data flows within the operating system.
- **IRP Sniffing:**
  - Instrumentation of process access to devices.
  - Devices provide I/O services that can be used by processes to harvest information:
    - Keyboard
    - Mouse
    - Microphone
    - Video

### Mouse Movement
- **Processes Interested in Mouse Movements:**
  - What network traffic is generated as a result of these calls?
  - Use multiple data sources:
    - Object table including device objects
    - IRP requests

## Why Windows 7/8?
- **Windows 10 Compatibility:**
  - Future work will include support for Chrome or Firefox add-ons.
  - Building the framework from scratch to ensure integrity of data communications with privacy in mind.
- **Reasons:**
  - Windows 10 compatibility is a future goal.
  - Ensuring data integrity and privacy.
  - Personal preference (e.g., "Fuck windows 10").

## Easy Mode
- **Meeting Adversary at Their Level:**
  - Makes finding breaches of privacy easier.
  - Requires repeated failure at accessing kernel-level drivers.

## Pinworm Core (Old School Code Slides)
### Pulling the Processes
```c
void InitializeProcessState() {
    unsigned __int64 eproc = 0x00000000;
    int current_PID = 0;
    int start_PID = 0;
    int i_count = 0;
    PLIST_ENTRY plist_active_procs;
    InitializeListHead(&ProcessStateList);

    // Get the address of the current EPROCESS
    eproc = (unsigned __int64)PsGetCurrentProcess();
    start_PID = *((int *)(eproc + _kpPIDOFFSET));
    current_PID = start_PID;

    while (1) {
        if ((i_count >= 1) && (start_PID == current_PID))
            break;
        DbgPrint("Test: PID is %d\n", current_PID);
        addNewProcess(eproc);
        plist_active_procs = (LIST_ENTRY *)(eproc + _kpFLINKOFFSET);
        eproc = (unsigned __int64)plist_active_procs->Flink;
        eproc = eproc - _kpFLINKOFFSET;
        current_PID = *((int *)(eproc + _kpPIDOFFSET));
        i_count++;
    }
}
```

### Client Kung Fu
```c
int main(int argc, char** argv) {
    HANDLE hDevice;
    BOOL status;
    hDevice = CreateFile(L"\\\\.\\KBR", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);

    // Variable for the run-time callout identifier
    UINT32 CalloutId;
    HANDLE engineHandle;
    UINT32 gStreamCalloutIdV4, gFlowEstablishedCalloutIdV4;
    UINT32 kIPV4Outbound;
    PVOID * NotificationHandle;
    LIST_ENTRY ProcessStateList;
    ProcessProfile * state;
    PDEVICE_OBJECT pDeviceObject = NULL;

    // Pool tags used for memory allocations
    #define WSKTCP_SOCKET_POOL_TAG ((ULONG)'sksw')
    #define WSKTCP_BUFFER_POOL_TAG ((ULONG)'bksw')
    #define WSKTCP_GENERIC_POOL_TAG ((ULONG)'xksw')

    // Callout functions
    VOID NTAPI ClassifyFn(
        IN const FWPS_INCOMING_VALUES0 *inFixedValues,
        IN const FWPS_INCOMING_METADATA_VALUES0 *inMetaValues,
        IN OUT VOID *layerData,
        IN const FWPS_FILTER0 *filter,
        IN UINT64 flowContext,
        IN OUT FWPS_CLASSIFY_OUT0 *classifyOut
    );

    // Process the IRP
    NTSTATUS status, pstatus = STATUS_SUCCESS;
    PVOID userBuffer, cmdBuffer;
    ULONG xferSize;
    ULONG i, thNum;
    PIO_STACK_LOCATION pIrpStack = IoGetCurrentIrpStackLocation(pIrp);
    xferSize = pIrpStack->Parameters.Write.Length;
    userBuffer = pIrp->AssociatedIrp.SystemBuffer;
    cmdBuffer = ExAllocatePool(NonPagedPool, xferSize);
    if (cmdBuffer == NULL) {
        status = STATUS_INSUFFICIENT_RESOURCES;
        xferSize = 0;
    } else {
        RtlCopyMemory(cmdBuffer, userBuffer, xferSize);
    }

    // Add a filter that references a callout
    // Invoke the functions in the following order
    // Call to register the callout with the filter engine.
    // Call FwpmCalloutAdd0 to add the callout to the system
    // Call FwpmFilterAdd0 to add the filter that references the callout to the system.
}
```

## Case Study 1
- **Browser Process and Mouse Movement:**
  - What does a process within a browser do in regards to mouse movement?
  - Where does the forked mouse movement data go when it's sent to the internet?
  - Does this data exfiltration forking occur inside the browser, in kernel land, or in user space?

### Demo
- **Website:** [www.kaedago.com/saci](http://www.kaedago.com/saci)
- **Frames to the Left:**
  - Used to demonstrate the injection of data using Pinworm.

## Case Study 2
- **Two Sniffer Instrumented Computers:**
  - One computer has been using Windows 7 for years.
  - Control computer with a recently installed and patched copy of Windows 7.
  - Differences in network traffic between the two computers.
  - Results from using different patched browsers on both PCs.

## Man in the Middle Demo
- **Keyboard Injection:**
  - Using Pinworm.
- **Mouse Movement:**
  - Using Pinworm.
- **Microphone Injection:**
  - Using Pinworm.
- **Video Injection:**
  - Using Pinworm.

## Social Media Demo
- **Process Instrumentation of Social Media Sites:**
  - Redacted.com
  - Example.com
  - Whattillthetalk.com

## Toolchain Framework
- **UI Client and Cone of Silence:**
  - Still in alpha.
- **Framework Release:**
  - Will be released when ready.
- **Current Availability:**
  - Pinworm and the test site are available now.

### Releasing of Pinworm
- **GitHub Repository:** [github.com/bigezy/pinworm](https://github.com/bigezy/pinworm)
  - Includes:
    1. Sniffer to instrument device driver calls.
    2. HTTP server code to display metadata collected on users.
    3. Man in the middle client for interception of device owners' private information and white noise generator.

## Conclusion
Thank you for your interest in Pinworm. We look forward to sharing more details and updates in the future.