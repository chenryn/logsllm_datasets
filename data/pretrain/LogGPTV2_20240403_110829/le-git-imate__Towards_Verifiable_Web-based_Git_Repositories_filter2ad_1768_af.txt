4.39
5.73
15.59
Cache
0.17
0.36
0.22
0.29
0.25
NativeSign
Optimized1
Optimized2
0.17
0.36
0.23
0.30
0.25
0.87
0.90
1.06
1.31
1.16
1.11
1.19
1.39
1.53
1.41
connections. Our experimental results show that, if we exclude time to create the packﬁle, Optimized2
has a similar performance with Optimized1.
Finally, we point out that optimized variants use the OpenPGP Javascript library [49] to compute in
the browser a digital signature for the veriﬁcation record or for the commit object. As opposed to that,
computing signatures in the Cache and NativeSign variants is faster, because it is done by the Git client,
which is optimized for speciﬁc architectures. If we exclude the signature creation time, Optimized1
exhibits similar performance with NativeSign.
Merge commits. Table 3 shows the execution time for merge commits for all variants of our tool.
A merge commit is created by merging into the master branch an open pull request branch that
has no conﬂicts. Each number in the table is the median over merging the last open 30 pull requests for
each repository (at the time when the experiment was performed). As such, each pull request consists of
a number of commits ranging from 1 to 16, and a number of changed ﬁles ranging from 1 to 75.
None of our variants have complexity worse than linear. Similarly to the regular commit experiment,
the No-Cache variant exhibits a running time linear with the size of the repository. Likewise, the Cache
and NativeSign variants exhibit a slightly higher time for merge commits when compared to regular
commits due to the computation of the merge operation itself.
The optimized variants perform under 1.5 seconds for all cases – regardless of repository size, because
the time it takes to perform the operation depends on the number of changed ﬁles and directories in the
target branch and in the pull request branch. This explains why the time for the “react” pull request is
higher than for “go”, which is a bigger repository.
Similarly to regular commits, the Optimized2 variant is about 300 ms slower than Optimized1 on
average, because it creates the packﬁle of all new Git objects that are necessary.
7.2. User experience considerations
From the results above, we concluded that a No-Cache version is out of usable parameters due to its
high execution time. However, the Cache and Optimized versions perform well under website respon-
siveness metrics.
Work by Nielsen and Miller [50–52] suggests that a response under a second is the limit in which
the ﬂow of thought stays uninterrupted, even though the user will notice the delay. From then on, and
up to 10 seconds, responsiveness is harmed, with 10 seconds being a hard limit for the time a user
is willing to spend waiting for on a website’s response. Further work [53,54] presents an “8 second
rule” as a hard limit in which websites should serve information. In addition, work by Nah [55] sets a
usable limit around two seconds if there is feedback presented to the user (e.g., a progress bar). Work
of Arapakis [56] argues that 1,000 ms of increased response time is still hard to notice by some users,
depending on the nature of the activity. Finally, further studies suggest that response times that range
from two seconds to seven seconds are associated with low user drops (and high conversion rates) given
430
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
that users are engaging in activities understood to be complex [57]. Using GitHub’s web UI for actions
such as code commits and merge commits usually requires the user to review the code changes, which
can take from seconds to minutes.
Under these considerations, and in context of the above experiments, we conclude that the Cache,
NativeSign and Optimized versions fall under usable boundaries.
7.3. Disk usage and other considerations
Among the three implementations, NativeSign requires to store a local copy of the repository. In con-
trast, the Optimized versions run entirely on the browser, and with fairly minimal memory requirements.
Likewise, the Optimized versions do not require a local installation of a Git client, a shell interpreter,
and any other tools. The size of this Optimized implementation is much smaller than the ofﬁcial Git
binary (as of version 2.19). The disk space needed for the whole extension is 465 KB for the Optimized1
version and 735 KB for the Optimized2 version. If we also consider dependencies (which include other
JavaScript libraries that are needed), the storage grows to 1.2 MB and 1.67 MB, respectively.
Finally, we contrast the required conﬁguration parameters, such as paths to executables, cache paths,
and private key settings. In this case,
the Optimized versions also shine in contrast to the remaining
three. Since all operations are performed in-browser, the Optimized variants can almost work out of the
box, as they only require conﬁguring the key for signing the veriﬁcation record or the commit.
Due to the reasons outlined above, we consider our Optimized variants to fall under reasonable param-
eters for usability. We conclude that, with minimal disk and memory footprints, minimal conﬁguration
parameters and reasonable delays, our optimized implementation meets design goal #5.
7.4. Comparison between the lightweight and main designs
In this section, we compare the two designs by summarizing their various advantages and drawbacks:
• Veriﬁability and Compatibility with Existing Workﬂows: The main design computes standard Git
signed commits which can be veriﬁed with the standard Git CLI tool. The lightweight design in-
troduces a veriﬁcation record which requires adding a Git command to the Git CLI tool in order to
perform veriﬁcation. This may require slight changes to existing workﬂows, as the veriﬁcation now
relies on information that exists in the commit message.
• Security: The main design provides the exact security guarantees offered by Git’s standard commit
signing mechanism. The lightweight design provides security guarantees comparable and compati-
ble with Git’s standard commit signing mechanism
• Performance: Both designs have comparable performance with Git’s standard commit signature
mechanism. However, the lightweight design is slightly faster than the main design, because it does
not need to create a packﬁle of all new objects on the client side.
• Storage: The lightweight design has smaller storage and memory requirements (15,838 lines of
JavaScript code and 1.2 MB) compared to the main design (25,611 lines of JavaScript code and
1.67 MB).
• User interface: Both designs have the same user interface.
We conclude that the main design is preferable in general due to its full compatibility with existing
workﬂows, but the lightweight design may be preferable when performance and storage are critical and
even a slight improvement in these parameters would make a difference.
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
431
8. User study
Having received IRB approval, we conducted a user study on 49 subjects with two primary goals
in mind. The ﬁrst goal was to evaluate the stealthiness of our attacks against web-based Git hosting
services. The second goal was to evaluate the usability of our le-git-imate browser extension when used
by Git web UI users.
8.1. User study setup
In order to measure user’s interactions with the web-based Git UI, we hosted an instrumented GitLab
server using Flask [58] and the original GitLab source code [2]. For each participant, we assigned a copy
of the retrofit repository, which is among the top 5 most starred GitHub projects in Java. We chose
retrofit due to the participants’ familiarity with Java and the repository being representative for a
medium-to-large repository size (1503 commits, 265 ﬁles, and 4.5 KB average ﬁle size).
Our study used the le-git-imate implementation based on the lightweight design. We argue that the re-
sults are applicable to both designs because their implementations have the same graphical user interface
and have very similar performance (as shown in Section 7).
The subjects were recruited as volunteers from the student population at our institutions, with a ma-
jority of them receiving extra course credit as an incentive to participate. After a screening process to
ensure that participants had a basic understanding of Git and GitHub/GitLab services, 49 subjects took
part in the study. We also discarded six additional participants given that they were unable to complete
any or most of the tasks in the user study. Table 4 in Appendix A provides demographics about the
remaining 43 participants in the study.
8.2. User study description
The study consisted of two parts, each of which contained several tasks. Each task required participants
to interact with the GitLab web UI in order to perform either a branch merge, or to edit, add, or delete
one ﬁle in their copy of the retrofit repository.
During the ﬁrst part, we collected a baseline usability data of the GitLab web UI usage, as well as the
participants’ ability to detect any of our GitLab web UI attacks. Participants had to perform 10 tasks, 4
were related to merge commits operations and 6 were related to regular commits using the web UI. To
test the attack-stealthiness aspect, the GitLab server would maliciously transform their actions using a
pre-commit hook on 5 out of the 10 tasks. During the second part of the user study, which consisted of
8 tasks (of which 4 were merge commits and 4 were regular commits), we tried to measure the usability
of our le-git-imate browser extension. Subjects were asked to perform the commits using the le-git-imate
browser extension (which subjects were asked to install during the study) and a newly-generated GPG
key.
To measure the stealthiness of the attacks, we asked the subjects if they think that the GitLab server
performed the tasks correctly after they were done with both parts. While answering this question, access
to the GitLab repository was disabled, to ensure the users only noticed the attacks before being asked
explicitly about them.
In order to assess the usability of the tool and the web UI usage, we recorded the time taken to perform
each task. We compared the time taken to perform similar tasks with and without the extension in order
to assess the burden our tool adds to the time users take to perform operations. In addition, the subjects
were then asked to rate the usability of the browser extension on a scale of 1 to 10 (1 = least usable, 10
= most usable).
432
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
Finally, in order to gain additional insight into the users’ individual answers, they were required to
answer a few general questions about their experience level with using web-based Git hosting services
and demographic questions (age, gender, etc.).
8.3. User study results
While performing the study, a user could fail on performing a task by either performing a wrong type
of commit than the one required, or because the user did not perform any commit (i.e., a skipped task).
Tasks that were skipped in a time in which a user did not spend a realistic time to attempt the task (i.e.,
less than 4 seconds), were labeled as ignored tasks.
Attack stealthiness. During the ﬁrst part of the study, we expected that a few participants would detect
some of the attacks, especially those that made widely-visible changes to the repository (such as those
that changed multiple ﬁles in the root-level). However, results indicate the opposite, as no participant
was able to detect any attacks. The reason behind it may be that most users are not expecting a Git web
UI to misbehave.
Extension usability. We evaluate the usability of our extension based on several metrics: percentage of
successful tasks and average completion time for tasks in Part 2 compared to tasks in Part 1, and direct
usability rating by participants.
In Part 1, subjects were able to successfully complete on average 97.6% of the tasks (9.76 out of 10).
The average time needed to perform a task was 63 seconds.
In Part 2, subjects were able to successfully complete on average 92.1% of the tasks (7.37 out of 8).
However, if we discard the ignored tasks (which subjects may have skipped due to a lack of interest), the
successful completion rate increases to 94.8%. It is worth nothing that 10 participants had to perform
the same task twice, as they performed it the ﬁrst time without using the extension. However, once they
realized their mistake, they performed the rest of the tasks using the extension. In Part 2, the average time
needed to perform a task was 44 seconds. Interestingly, the tasks in Part 2, which are using our browser
extension, were completed faster than those in Part 1. This is likely because users familiar with GitHub,
but not with GitLab, initially needed some time to learn how to perform various types of commits in
GitLab.
The extension received a direct usability rating of 8.3 on average.
9. Related work
This work builds on previous work in three main areas: version control system (VCS) security, secu-
rity in VCS-hosting services and browser/HTML-based attacks. In this section, we review the primary
research in each of these areas.
VCS Security. Wheeler [59] provides an overview of security issues related to software conﬁguration
management (SCM) tools. He puts forth a set of security requirements, presents several threat models
(including malicious developers and compromised repositories), and enumerates solutions to address
these threats. Gerwitz [60] provides a detailed description of creating and verifying Git signed commits.
Commit signatures were also proposed for other VCS systems, such as SVN [61]. This work focuses on
providing mechanisms to sign commit data remotely via a web UI on an untrusted server.
There have been proposals to protect sensitive data from hostile servers by incorporating secrecy into
both centralized and distributed version control systems [62,63]. Shirey et al. [64] analyze the perfor-
mance trade-offs of two open source Git encryption implementations. Secrecy from the server might be
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
433
desirable in certain scenarios, but it is orthogonal to our goals in this work. Finally, work by Torres-Arias
et al. [28] covers similar attack vectors where a malicious server tampers with Git metadata to trick users
into performing unintended operations. These attacks have similar consequences to the ones presented
in this paper.
Security in SaaS. In parallel to the VCS-speciﬁc issues, Git hosting providers face the same challenges
as other Software-as-a-Service (SaaS) [65,66] systems. NIST outlines the issues of key management
on SaaS systems on NISTIR-7956 [67], such as blind signatures when a remote system is performing
operations on behalf of the user. This work is a speciﬁc instance of the challenges presented by NIST.
Further work explores usable systems for key management and cryptographic services on such plat-
forms. For example, work by Fahl et al. [43] presents a system that leverages Facebook for content
delivery and key management for encrypted communications between its users. The motivation behind
using Facebook, and other works of this nature [68,69] is the widespread adoption and the ease of usage
for entry-level users. Based on similar motivation, this work seeks to bring Git commit signing to the
web UI.
Web and HTML-based Attacks. In addition to the challenges SaaS systems face, web UI issues are of
particular interest. Substantial research was done in the ﬁeld of automatic detection of web-based UI’s
vulnerabilities that can target the web application’s database (e.g., SQL Injection) or another user (e.g.,