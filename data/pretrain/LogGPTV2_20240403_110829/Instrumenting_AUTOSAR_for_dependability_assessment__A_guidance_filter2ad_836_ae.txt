the instrumentation and the system build process, and not
the instrumentation itself. Therefore, all
instrumentation
methods scale comparatively well, with a slight advantage for
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:19:13 UTC from IEEE Xplore.  Restrictions apply. 
TEXT SEGMENT SIZE OF THE (INSTRUMENTED) OBJECT FILES OF VARIOUS SOFTWARE COMPONENTS IN BYTES.
TABLE IV
Objectﬁle
Rte ABS FL.o
Rte BrakeActuator FL.o
Rte BrakeController.o
Rte BrakePedalSensor.o
Rte VehicleSpeed.o
Rte WheelSpeedSensor FL.o
ETAS INTECRIO
Text segment size
plain
instrumented
1808
336
512
320
896
336
1920
368
576
368
960
384
Overhead (%)
overall
per wrapper
6.2
9.5
12.5
15.0
7.1
14.3
1.5
9.5
6.3
15.0
3.6
14.3
OptXware EA
Text segment size
plain
instrumented
1808
328
504
328
892
336
1920
356
564
364
952
372
Overhead (%)
overall
per wrapper
6.2
8.5
11.9
11.0
6.7
10.7
1.5
8.5
6.0
11.0
3.4
10.7
RELATIVE COMPARISON OF INSTRUMENTATION METHOD AND LOCATION FOR DIFFERENT QUALITY ATTRIBUTES.
TABLE V
Attribute
Instrumentation method
.c-ﬁle
Intrusiveness (cid:70)
Implementation effort (cid:70)
Automation complexity (cid:70) (cid:70) (cid:70) (cid:70) (cid:70) (cid:70) (cid:70)
Required system access (cid:70)
Scalability / usability (cid:70)
(cid:70) (cid:70)
(cid:70)
.h-ﬁle
(cid:70) (cid:70)
(cid:70) (cid:70)
Instrumentation location
RTE
SW-C
(cid:70) (cid:70) (cid:70)
.o-ﬁle
(cid:70) (cid:70) (cid:70) (cid:70)
(cid:70) (cid:70) (cid:70) (cid:70) (cid:70) (cid:70) (cid:70) (cid:70)
(cid:70) (cid:70) (cid:70) (cid:70) (cid:70)
(cid:70) (cid:70) (cid:70) (cid:70)
(cid:70) (cid:70) (cid:70) (cid:70) (cid:70) (cid:70) (cid:70) (cid:70)
(cid:70) (cid:70) (cid:70)
Legend: (cid:70) poor, (cid:70) (cid:70) (cid:70) good
methods targeting the RTE (due to its central location), and
a notable advantage for black-box instrumentation methods.
As black-box methods do not modify any source code, a
time-consuming recompilation of code can be omitted, and
only the linkage of binary objects has to be performed.
Summarizing our observations in Table V, there is a clear
trend showing advantages in all categories for black-box
instrumentation over grey-box and white-box, except for au-
tomation complexity. The choice of instrumentation location,
i.e., whether to instrument the SW-C or RTE, is not as clear
though. As SW-C has advantages in the categories intrusive-
ness and required system access, and RTE has advantages
in the other categories, the determining factor is, how each
category is weighted by the system evaluator, also considering
his software access level and the application scenario.
B. Limitations
During experiments with different AUTOSAR example sys-
tems, we realized that there exist two classes of systematic
limitations to our proposed approach of wrapping AUTOSAR
components. The ﬁrst
limitation only affects a subset of
the presented instrumentation methods and is related to the
possible implementation of the communication between SW-
Cs and the RTE via shared memory. The second limitation
affects all of the presented methods, but
is only relevant
in systems which make use of multiple instantiations of a
component. Both limitations are discussed in the following.
1) Shared memory communication: The communication
between SW-Cs and the RTE is not necessarily always imple-
mented via function calls (which was our intuitive assumption)
but can also be implemented via shared memory communica-
tion due to performance reasons. Whether communication is
implemented via function calls or shared memory, depends
on the implementation of the RTE generator (and is therefore
tool dependent) and the communication interface-type (e.g.,
implicit/explicit access, client/server or sender/receiver model,
etc.) and its conﬁguration.
The implementation of the communication mechanism im-
pacts the applicability of some of our approaches. Namely,
SW-C .o-ﬁle, as well as all RTE instrumentation methods, are
unable to cover shared memory communication. In order to
cope with shared memory communication, we propose two
feasible workarounds. The ﬁrst one being runnable wrappers,
which can be implemented on the SW-C and RTE side. The
second one being a task-based monitor which is implemented
by associating a monitoring task on the operating system
level, with the runnable to be monitored. Runnables are the
executable parts of a software component
implement
actual functionality. By wrapping their invocation, we are able
to access all data that the runnable has access to via shared
memory, either before (relevant for reads) or after (relevant
for writes) the runnable invocation.
that
As both workarounds are conceptually different from in-
terface wrappers, we did not include them in our evaluation.
Primarily the experimental results show that both approaches
are suitable for systematic and automatic instrumentation of
AUTOSAR systems using shared memory communication.
2) Multiple instantiation of components: Our approach is
also limited for models that make use of multiple instantiations
of component prototypes and therefore employ code-reuse.
The issue in such a scenario is that we are currently unable
to distinguish between different
instances of a component
prototype, as the interface implementation (due to code-reuse)
is only present once, irrespective of the number of instances.
For each component instance, the RTE holds a unique data
structure (termed RTE instance) that is passed to the compo-
nent runnables as a parameter on invocation. As these data
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:19:13 UTC from IEEE Xplore.  Restrictions apply. 
structures contain no naming information, it is difﬁcult to
obtain self-awareness for the active SW-C instance.
A simple workaround is to move the instrumentation loca-
tion from the receiving SW-C’s interface to the sending SW-
C’s interface, or vice versa. This workaround is only feasible
as long as the component that the instrumentation is moved to
is not a multiply instantiated component itself. Due to the ﬁxed
memory layout of automotive systems, an alternate approach
leveraging pointer address information of the RTE instance
data structures, to distinguish between multiple instances, is
conceivable. We will address this and alternate solutions in
future work.
VII. CONCLUSION
In this paper, we have shown how to develop a usable,
customizable and efﬁcient instrumentation framework for the
dependability assessment of AUTOSAR systems. Our ap-
proach provides usability as we enable the user to deﬁne their
instrumentation requirements on the model level instead of
the implementation, which largely consists of automatically
generated code. Our approach is customizable as we provide
expert users with the ability to further tune and reﬁne their
instrumentation choice factoring implementation details, and
thus test certain aspects of an interface, which are represented
by the different instrumentation options and instrumentation
locations within the software stack. Our approach is efﬁcient
as the use of interface wrappers infers low timely and spatial
overhead as shown by our experimental results.
Factoring the different software component access levels
(black-box and white-box) that are prevalent in AUTOSAR
systems, we enable the instrumentation at the source code
(implementation,
interface speciﬁcation) and binary object
levels. As proof of concept, we have conducted a series of
fault injection experiments on an anti-lock braking system
(ABS), which showed the generic applicability of the different
instrumentation techniques, providing the user freedom of
choice on the different techniques. The experimental evalu-
ation furthermore yielded the result that the varied techniques
were comparably efﬁcient, and the cross-validated fault in-
jection experiments showed that a black-box instrumentation
technique was as effective as a white-box technique while
requiring less access to the system and being less intrusive.
To guide the reader in his decision of instrumentation location
and instrumentation options, we discuss the qualitative criteria
of code access,
intrusiveness, automation complexity, and
implementation effort.
In addition, we have identiﬁed systematic limitations of
our approach and sketched possible solutions to resolve them.
The implementation and evaluation of such solutions is up to
future work, as is the instrumentation of other locations in
the AUTOSAR software stack, such as the basic software.
As our approach is potentially able to implement control-
ﬂow monitoring, which will be supported by version 4 of the
AUTOSAR standard, with the advantage of ﬁner granularity
and the added beneﬁt of data-ﬂow monitoring, we also plan
to pursue this option in future work.
ACKNOWLEDGMENT
We thank ETAS Group and OptxWare Research & Develop-
ment Ltd. for the provision of their tools and for their support.
This work was supported by CASED (www.cased.de).
REFERENCES
[1] AUTOSAR GbR, “Technical Overview,” Document ID 067, 2008.
[2] AUTOSAR GbR, “Requirements on RTE Software,” Document ID 083,
2009.
[3] AUTOSAR GbR, “Speciﬁation of RTE,” Document ID 084, 2010.
[4] A. Aviˇzienis, J.-C. Laprie, B. Randell, and C. Landwehr, “Basic Con-
cepts and Taxonomy of Dependable and Secure Computing,” IEEE
Trans. Dependable Secur. Comput., vol. 1, pp. 11–33, January 2004.
[5] M. Born, J. Favaro, and O. Kath, “Application of ISO DIS 26262
the 1st Workshop on Critical Automotive
in practice,” in Proc. of
applications: Robustness & Safety, 2010, pp. 3–6.
[6] J. Christmansson and R. Chillarege, “Generation of an error set that
emulates software faults based on ﬁeld data,” in Proc. of the 26th
Symposium on Fault-Tolerant Computing (FTCS), 1996, pp. 304–313.
[7] ETAS Group GmbH, “INTECRIO,” http://www.etas.com/en/products/
intecrio.php.
[8] GNU Binutils, http://www.gnu.org/software/binutils/.
[9] H. Heinecke, K.-P. Schnelle, H. Fennel, J. Bortolazzi, L. Lundh,
J. Leﬂour, J.-L. Mat´e, K. Nishikawa, and T. Scharnhorst, “AUTo-
motive Open System ARchitecture - An Industry-Wide Initiative to
Manage the Complexity of Emerging Automotive E/E Architectures,”
in Convergence International Congress & Exposition On Transportation
Electronics, 2004, pp. 325–332.
[10] T. Hoppe, S. Kiltz, and J. Dittmann, “Security threats to automotive CAN
networks–Practical examples and selected short-term countermeasures,”
Reliability Engineering & System Safety, vol. 96, no. 1, pp. 11–25, 2011.
[11] M.-C. Hsueh, T. K. Tsai, and R. K. Iyer, “Fault Injection Techniques
and Tools,” Computer, vol. 30, pp. 75–82, April 1997.
[12] International Electrotechnical Commission, “IEC 61508: Functional
Safety of Electrical/Electronic/Programmable Electronic Safety-related
Systems,” 2010.
[13] International Organization for Standardization, “ISO/FDIS 26262: Road
vehicles – Functional safety,” 2011.
[14] K. Koscher, A. Czeskis, F. Roesner, S. Patel, T. Kohno, S. Checkoway,
D. McCoy, B. Kantor, D. Anderson, H. Shacham, and S. Savage,
“Experimental Security Analysis of a Modern Automobile,” in IEEE
Symposium on Security and Privacy, 2010, pp. 447–462.
[15] P. Lanigan, P. Narasimhan, and T. Fuhrman, “Experiences with a
CANoe-based fault injection framework for AUTOSAR,” in IEEE/IFIP
International Conference on Dependable Systems and Networks (DSN),
2010, pp. 569–574.
[16] C. Lu, J.-C. Fabre, and M.-O. Killijian, “An approach for improving
Fault-Tolerance in Automotive Modular Embedded Software,” in Proc.
of the 17th International Conference on Real-Time and Network Systems
(RTNS), 2009.
[17] C. Lu, J.-C. Fabre, and M.-O. Killijian, “Robustness of modular multi-
layered software in the automotive domain: a wrapping-based approach,”
in Proc. of
the 14th IEEE International Conference on Emerging
Technologies & Factory Automation, 2009, pp. 1102–1109.
[18] H. Madeira, D. Costa, and M. Vieira, “On the emulation of software
faults by software fault injection,” in Proc. of the International Con-
ference on Dependable Systems and Networks (DSN), 2000, pp. 417
–426.
[19] OptXware Ltd., “Embedded Architect,” http://www.optxware.com/en/
embedded/embedded-architect-platform.
[20] I. Rouf, R. Miller, H. Mustafa, T. Taylor, S. Oh, W. Xu, M. Gruteser,
W. Trappe, and I. Seskar, “Security and Privacy Vulnerabilities of In-Car
Wireless Networks: A Tire Pressure Monitoring System Case Study,” in
Proc. of the 19th USENIX Security Symposium, Aug. 2010.
[21] D. Skarin and J. Karlsson, “Software Implemented Detection and Re-
covery of Soft Errors in a Brake-by-Wire System,” in Seventh European
Dependable Computing Conference (EDCC), 2008, pp. 145–154.
[22] J. Voas, “Certifying off-the-shelf software components,” Computer,
vol. 31, no. 6, pp. 53–59, 1998.
[23] D. A. Wheeler, “SLOCCount,” http://www.dwheeler.com/sloccount/.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:19:13 UTC from IEEE Xplore.  Restrictions apply.