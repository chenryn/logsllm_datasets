title:Systematic Detection of Capability Leaks in Stock Android Smartphones
author:Michael C. Grace and
Yajin Zhou and
Zhi Wang and
Xuxian Jiang
NDSS	
  2012,	
  February	
  7th	
  2012,	
  San	
  Diego	
Systema(c	
  Detec(on	
  of	
  Capability	
  Leaks	
  in	
Stock	
  Android	
  Smartphones	
Michael	
  Grace	
  Yajin	
  Zhou	
  Zhi	
  Wang	
  Xuxian	
  Jiang	
North	
  Carolina	
  State	
  University	
Phones	
  and	
  Computers	
“I	
  have	
  always	
  wished	
  that	
  my	
  computer	
  would	
  be	
  as	
  easy	
to	
  use	
  as	
  my	
  telephone.	
  My	
  wish	
  has	
  come	
  true.	
  I	
  no	
longer	
  know	
  how	
  to	
  use	
  my	
  telephone.”	
–	
  Bjarne	
  Stroustrup	
  (designer	
  of	
  C++)	
2	
Phones:	
  the	
  PCs	
  of	
  the	
  Future?	
• Smartphone	
  shipments	
  increased	
  42%	
  between	
  3Q	
2010	
  and	
  3Q	
  2011	
  (Gartner,	
  11/15/2011)	
• More	
  smartphones	
  shipping	
  than	
  personal	
computers	
  (IDC,	
  2/7/2011)	
•  New	
  markets:	
  ﬁrst	
  computer	
  =	
  smartphone	
3	
Smartphone	
  ≠	
  Handheld	
  PC	
• Unique	
  abilices	
  speciﬁc	
  to	
  the	
  form	
  factor	
•  Many	
  sensors:	
  “context-­‐aware”	
•  Dialup	
  always	
  on	
  always	
  with	
  you	
• Resource	
  constrained	
• Diﬀerent	
  vendor	
  relaconships	
  and	
  primacy	
4	
Related	
  Work	
• Problems	
  with	
  Permissions	
•  e.g.,	
  Kirin	
  [Enck	
  et	
  al.,	
  CCS	
  ‘09],	
  Soundcomber	
  [Schlegel	
  et	
  al.,	
  NDSS	
  ‘11],	
  Stowaway	
  [Felt	
  et	
al.,	
  CCS	
  ‘11],	
  Guess	
  Who’s	
  Tex(ng	
  You	
  [Schrilwieser	
  et	
  al.,	
  NDSS	
  ‘12]…	
• Informacon	
  Leak	
  Deteccon	
•  e.g.,	
  PiOS	
  [Egele	
  et	
  al.,	
  NDSS	
  ‘11],	
  TaintDroid	
  [Enck	
  et	
  al.,	
  OSDI	
  ‘10]…	
• Phone	
  Defenses	
•  e.g.,	
  MockDroid	
  [Beresford	
  et	
  al.,	
  HotMobile	
  ‘11],	
  TISSA	
  [Zhou	
  et	
  al.,	
  TRUST	
  ‘11],	
  AppFence	
[Hornyack	
  et	
  al.,	
  CCS	
  ‘11],	
  Permission	
  Re-­‐Delega(on	
  [Felt	
  et	
  al.,	
  USENIX	
  Security	
  ‘11],	
QUIRE	
  [Dietz	
  et	
  al.,	
  USENIX	
  Security	
  ‘11],	
  XManDroid	
  [Bugiel	
  et	
  al.,	
  NDSS	
  ‘12],	
  MoCFI	
  [Davi	
et	
  al.,	
  NDSS	
  ’12]…	
• Market	
  Issues	
•  e.g.,	
  DroidMOSS	
  [Zhou	
  et	
  al.,	
  CODASPY	
  ‘12],	
  DroidRanger	
  [Zhou	
  et	
  al.,	
  NDSS	
  ‘12]…	
5	
Firmware	
  and	
  Fragmentacon	
• A	
  conspicuous	
  gap	
  in	
  the	
  body	
  of	
  work!	
• Not	
  like	
  on	
  desktops,	
  or	
  other	
  smartphone	
plauorms	
• Research	
  Goal:	
  Determine	
  the	
  impact	
  ﬁrmware	
customizacons	
  have	
  on	
  security	
  and	
  privacy	
6	
Android	
  Capabilices	
• Plauorm	
  deﬁnes	
  some	
  APIs	
• APIs	
  may	
  require	
  capabilices	
  (called	
  permissions)	
• Applicacons	
  can	
  deﬁne	
  APIs	
  the	
  same	
  way	
• What	
  happens	
  when	
  an	
  applicacon	
  deﬁnes	
  a	
  new	
API	
  based	
  on	
  a	
  restricted	
  old	
  one?	
•  That’s	
  up	
  to	
  the	
  author!	
7	
Capability	
  Leaks	
• Capability	
  Leak:	
  A	
  situacon	
  where	
  an	
  app	
  can	
  gain	
access	
  to	
  a	
  restricted	
  API	
  without	
  requescng	
  proper	
permission	
• Explicit	
  Capability	
  Leak:	
  Broadening	
  access	
  to	
  a	
restricted	
  API	
  by	
  exposing	
  it	
  via	
  another	
  API	
• Implicit	
  Capability	
  Leak:	
  Inhericng	
  permissions	
  from	
other	
  applicacons	
8	
Explicit	
  Capability	
  Leaks	
Outside	
  Caller	
(no	
  permissions)	
Leaking	
  API	
(needs	
  no	
  permissions,	
has	
  permission	
  P)	
Restricted	
  API	
(needs	
  permission	
  P)	
9	
Deteccng	
  Capability	
  Leaks	
• Android	
  SDK	
  gives	
  us	
  no	
  tools!	
• Funccon	
  composicon	
•  Capability	
  leak:	
  g(x)	
  =	
  f(x)	
  +	
  some	
  other	
  stuﬀ	
• Intuicve	
  algorithm:	
1.  Find	
  interescng	
  (dangerous)	
  APIs	
  (f(x))	
2.  Find	
  new	
  API	
  deﬁnicons	
  (g(x))	
3.  Link	
  them!	
10	
System	
  Overview	
e
g
a
m
I
e
n
o
h
P
Preloaded	
Apps	
Framework	
Classes	
Woodpecker	
Possible	
  Path	
Idencﬁcacon	
Infeasible	
Path	
  Pruning	
Leak	
Report	
Android	
  Framework	
Knowledge	
11	
Possible	
  Path	
  Idencﬁcacon	
1.  Construct	
  a	
  control-­‐ﬂow	
  graph	
2.  Find	
  all	
  paths	
  from	
  an	
  IPC	
  entry	
  point	
  to	
  an	
  API	
  of	
interest	
12	
Possible	
  Path	
  Idencﬁcacon:	
  Challenges	
• Object	
  references	
•  Class	
  hierarchy	
  used	
  to	
  conservacvely	
  resolve	
  references	
• Extensive	
  use	
  of	
  callbacks	
•  Use	
  framework	
  knowledge	
  to	
  sctch	
  together	
  callbacks	
UIThread.start()	
UIThread.run()	
Thread.start()	
SMSThread.start()	
SMSThread.run()	
13	
Infeasible	
  Path	
  Pruning	
• Many	
  potencal	
  paths	
  exist	
•  Most	
  are	
  either	
  impossible	
  or	
  uninterescng	
• Must	
  prune	
  these	
  uninterescng	
  paths	
•  Branch	
  condicons	
  need	
  an	
  understanding	
  of	
  program	
data-­‐ﬂow	
•  Explicit	
  permission	
  checks	
  are	
  “infeasible	
  paths”	
• Our	
  approach:	
  Symbolic	
  Path	
  Simula3on	
14	
Symbolic	
  Path	
  Simulacon	
X	
  =	
  0	
X	
  =	
  0	
If	
  X	
  =	
  0	
X	
  =	
  0	
Then	
X	
  ≠	
  0	
Else	
15	
Implementacon	
•  Based	
  on	
  the	
  baksmali	
  decompiler	
  (1.2.6)	
•  Covers	
  13	
  permissions,	
  controlling:	
•  Phone	
  informacon	
•  Locacon	
  API	
•  Phone	
  dialing	
•  Sending	
  text	
  messages	
•  Camera/microphone	
•  Reboocng/shuzng	
  down	
  the	
  device	
•  Installing/removing	
  apps	
•  Factory	
  reset	
16	
Evaluacon	
17	
Explicit	
  Capability	
  Leaks	
  Found	
Coarse	
  Locacon	
Fine	
  Locacon	
Call	
  Phone	
Call	
  Privileged	
Camera	
Delete	
  Packages	
Install	
  Packages	
Master	
  Clear	
Read	
  Phone	
  State	
Reboot	
Record	
  Audio	
Send	
  SMS	
Shutdown	
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
18	
Demo	
19	
Implicit	
  Capability	
  Leaks	
  Found	
"
"
"
"
"
"
"
"
Coarse	
  Locacon	
Fine	
  Locacon	
Call	
  Phone	
Call	
  Privileged	
Camera	
Delete	
  Packages	
Install	
  Packages	
Master	
  Clear	
Read	
  Phone	
  State	
Reboot	
Record	
  Audio	
Send	
  SMS	
Shutdown	
"
"
20	
Performance	
  Measurement	
Vendor	
HTC	
Model	
Legend	
EVO	
  4G	
Wildﬁre	
  S	
Motorola	
   DROID	
DROID	
  X	
Samsung	
   Epic	
  4G	
Google	
   Nexus	
  One	
Nexus	
  S	
Time	
#	
  Apps	
3366.63s	
4175.03s	
3894.37s	
2138.38s	
3311.94s	
3732.56s	
2059.47s	
1815.71s	
125	
160	
144	
76	
161	
138	
76	
72	
21	
Discussion	
• Accuracy	
•  False	
  negacves:	
  nacve	
  code,	
  undocumented	
  extensions	
•  False	
  posicves:	
  conservacve	
  analysis	
• Threads	
  and	
  Time	
•  Instruccon	
  interleaving,	
  shared	
  state	
•  Example:	
  callback	
  handling	
22	
Conclusions	
• Capability	
  leaks	
  present	
  a	
  tangible	
  threat	
  to	
  security	
and	
  privacy	
  on	
  exiscng	
  Android	
  smartphones	
• We	
  present	
  a	
  system,	
  Woodpecker,	
  to	
  detect	
  these	
capability	
  leaks	
23	
Thank	
  you!	
24	
Implicit	
  Capability	
  Leaks	
• Applicacons	
  don’t	
  have	
  permissions,	
  user	
  iden3ﬁers	
(UIDs)	
  do.	
UID	
  A	
UID	
  X	
UID	
  B	
App	
  A	
Manifest	
App	
  B	
Manifest	
Permission	
  MASTER_CLEAR	
No	
  relevant	
  permission	
sharedUserId	
  X	
sharedUserId	
  X	
Code	
Code	
masterClear()	
masterClear()	
25