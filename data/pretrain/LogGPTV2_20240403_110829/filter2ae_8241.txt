### 安全性分析
系统采用的是单入口模式,即只能通过index.php访问/inc/module/下的模块文件
因为常量in_mx定义在了index.php中
而其他文件都包含了下面的一条语句,若没有定义常量直接退出
    if (!defined('in_mx')) {exit('Access Denied');}
先分析下index.php是如何加载模块文件的
    $value){
        StopAttack($key,$value,$getfilter);
    }
    if ($_GET["p"]!=='admin'){
        foreach($_POST as $key=>$value){ 
            StopAttack($key,$value,$postfilter);
        }
    }
    foreach($_COOKIE as $key=>$value){ 
        StopAttack($key,$value,$cookiefilter);
    }
    unset($_GET['_SESSION']);
    unset($_POST['_SESSION']);
    unset($_COOKIE['_SESSION']);
    require('./inc/function/common.php');
    if (!empty($_GET)){ foreach($_GET AS $key => $value) $$key = addslashes_yec($value); }
    if (!empty($_POST)){ foreach($_POST AS $key => $value) $$key = addslashes_yec($value); }
GPC参数会经过StopAttack方法过滤,用黑名单匹配的方式
    $getfilter="\b(and|or)\b.+?(>||| $CONFIG['filePathFormat'],
                "maxSize" => $CONFIG['fileMaxSize'],
                "allowFiles" => $CONFIG['fileAllowFiles']
            );
            $fieldName = $CONFIG['fileFieldName'];
            break;
    }
    /* 生成上传实例对象并完成上传 */
    $up = new Uploader($fieldName, $config, $base64);
这个文件原本是没有任何问题的,但是结合上面的分析就有问题了
这是ue编辑器用来上传文件的操作,ue编辑器默认是不能上传php文件的
1.该文件默认也是不能直接访问的,但是可以通过上面分析出的第1点来包含这个文件,从而间接访问
2.其中$CONFIG定义在同目录下的config.json中,但这里没有包含config.json,,即这里的$CONFIG是没有初始化的,而能上传什么文件是由config.json的配置决定的,所以可以利用上面分析出的第2点,通过传入参数来注册$CONFIG,进而控制$config的值,从而上传php文件
跟进下定义Uploader类的文件
    public function __construct($fileField, $config, $type = "upload")
    {
        $this->fileField = $fileField;
        $this->config = $config;
        $this->type = $type;
        if ($type == "remote") {
            $this->saveRemote();
        } else if($type == "base64") {
            $this->upBase64();
        } else {
            $this->upFile();
        }
其中我们调用的是upFile方法
    private function upFile()
    {
        $file = $this->file = $_FILES[$this->fileField];
        if (!$file) {
            $this->stateInfo = $this->getStateInfo("ERROR_FILE_NOT_FOUND");
            return;
        }
        if ($this->file['error']) {
            $this->stateInfo = $this->getStateInfo($file['error']);
            return;
        } else if (!file_exists($file['tmp_name'])) {
            $this->stateInfo = $this->getStateInfo("ERROR_TMP_FILE_NOT_FOUND");
            return;
        } else if (!is_uploaded_file($file['tmp_name'])) {
            $this->stateInfo = $this->getStateInfo("ERROR_TMPFILE");
            return;
        }
        $this->oriName = $file['name'];
        $this->fileSize = $file['size'];
        $this->fileType = $this->getFileExt();
        $this->fullName = $this->getFullName();
        $this->filePath = $this->getFilePath();
        $this->fileName = $this->getFileName();
        $dirname = dirname($this->filePath);
        //检查文件大小是否超出限制
        if (!$this->checkSize()) {
            $this->stateInfo = $this->getStateInfo("ERROR_SIZE_EXCEED");
            return;
        }
        //检查是否不允许的文件格式
        if (!$this->checkType()) {
            $this->stateInfo = $this->getStateInfo("ERROR_TYPE_NOT_ALLOWED");
            return;
        }
        //创建目录失败
        if (!file_exists($dirname) && !mkdir($dirname, 0777, true)) {
            $this->stateInfo = $this->getStateInfo("ERROR_CREATE_DIR");
            return;
        } else if (!is_writeable($dirname)) {
            $this->stateInfo = $this->getStateInfo("ERROR_DIR_NOT_WRITEABLE");
            return;
        }
        //移动文件
        if (!(move_uploaded_file($file["tmp_name"], $this->filePath) && file_exists($this->filePath))) { //移动失败
            $this->stateInfo = $this->getStateInfo("ERROR_FILE_MOVE");
        } else { //移动成功
            $this->stateInfo = $this->stateMap[0];
        }
    }
可以看到最后调用了move_uploaded_file函数上传
### 漏洞复现
poc中传入的数组CONFIG为config.json中的配置字段
    /* 上传文件配置 */
        "fileActionName": "uploadfile", /* controller里,执行上传视频的action名称 */
        "fileFieldName": "upfile", /* 提交的文件表单名称 */
        "filePathFormat": "/upload/file/{catname}{yyyy}{mm}{dd}/{fname}", /* 上传保存路径,可以自定义保存路径和文件名格式 */
        "fileUrlPrefix": "", /* 文件访问路径前缀 */
        "fileMaxSize": 51200000, /* 上传大小限制，单位B，默认50MB */
        "fileAllowFiles": [
            ".png", ".jpg", ".jpeg", ".gif", ".bmp",
            ".flv", ".swf", ".mkv", ".avi", ".rm", ".rmvb", ".mpeg", ".mpg",
            ".ogg", ".ogv", ".mov", ".wmv", ".mp4", ".webm", ".mp3", ".wav", ".mid",
            ".rar", ".zip", ".tar", ".gz", ".7z", ".bz2", ".cab", ".iso",
            ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".pdf", ".txt", ".md", ".xml"
        ]
还有一点要注意,因为这个系统自带了.htaccess文件
如果apache开启了mod_rewrite模块或者nginx.conf引入了.htaccess文件
那么生成的shell不能访问,需要利用第1点的文件包含来访问
    RewriteEngine On
    RewriteBase /
    #RewriteCond %{REQUEST_FILENAME} !-f
    #RewriteCond %{REQUEST_FILENAME} !-d 
    RewriteRule ^(.*)\.html$ /index.php?p=$1&%{QUERY_STRING} [L]