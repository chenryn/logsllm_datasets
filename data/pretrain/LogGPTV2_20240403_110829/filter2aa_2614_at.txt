/c2id/token的应答消息格式为：
这里ID令牌是JWT格式的加密数据，在接下来的授权校验流程中，
将以JWT格式的令牌数据为基础，这会在后续的章节中为读者做更详细
的介绍。
6）RP请求用户信息端点，获取更多的用户信息。比如此处请求
Connect2id Server的API接口地址为http://127.0.0.1:8080/c2id/userInfo。
7）用户信息端点反馈用户信息给RP，如Connect2id演示样例中的
UserInfo值比较简单，如图7-9所示。
●图7-9 Connect2id演示样例中UserInfo值
其中，sub值为UserInfo结构的必需字段，至此授权码方式的身份认
证步骤全部完成，通过上述逐步分析的过程，读者可以看到，授权码方
式具有如下特点。
■ 需要EU参与并且需要提供认证登录页面，不适用于后端、无用户
参与交互的API做身份认证。
■ 针对认证页面的跳转，需要提供不同的参数传递方式，比如URL
重定向的GET方式、以form表单的POST提交方式。
简化授权码方式是授权码方式的简化版，与授权码方式的差异在于
第13）步和第33）步，第1步时，response_type的值为id_token，第3）
步时返回JWT格式的ID令牌。相比授权码方式，流程更为简洁；而混合
流方式为简化授权码方式与授权码方式的叠加组合，这里就不再做过多
阐述。
（3）客户端身份认证凭据发送方式
OpenID Connect协议规范中对于客户端身份认证凭据的发送方式也
做了规范性定义，可使用以下三种认证方式的其中一种。
■ client_secret_basic：客户端发送client_secret值到授权服务器，使
用基于HTTP 
Basic基础认证，与本章73.2.1节中的第二种认证方式类
似，客户端发送请求时，认证信息被放入HTTP授权头中向服务器发
送。
■ client_secret_post：客户端采用POST方式发送client_secret值到授
权服务器，此时的client_secret值为客户端认证凭据。根据认证凭据的不
同，使用基于HTTP Basic基础认证、用户名/密码、证书等认证方式。
■ client_secret_jwt：此时的客户端认证凭据值为JWT格式的共享密
钥，使用OAuth 2.0协议JWT方式进行客户端身份认证。
7.2.5 基于数字证书认证
在7.2.3节基于消息头认证中，为读者简要地讲述了SOAP消息中如
何使用数字证书进行认证。数字证书一般由CA权威机构颁发，其主要
内容有Issuer（证书颁发机构）、Valid from &Valid to（证书有效
期）、Public 
Key（公钥）、Subject（证书所有者）、Signature
Algorithm（签名算法）、Thumbprint&Thumbprint Algorithm（指纹
以及指纹算法），如图7-10所示。
●图7-10 数字证书样例
数字证书中所包含的内容，尤其是证书所有者以及证书中包含的私
钥信息可以在API信息交互中用来确认调用者的身份。在一些高安全要
求的场景中，比如网银支付、电子签章、汽车OTA等，通常采用数字证
书来作为API的身份认证。下面以某移动支付接口为例讲述API认证中
数字证书的使用。
在此移动支付场景的API调用过程中，不同用途的数字证书在整个
业务流程中被多次使用到，下面先来了解一下交互流程，如图7-11所
示。
●图7-11 数字证书认证流程
1）开发者向API管理平台提供注册信息，申请平台注册。
2）API管理平台所有者对注册信息进行审批，以确认开发者注册信
息的真实性和完整性。
3）注册信息审批通过后，开发者获得两个证书：签名证书、验签
证书。
4）开发者使用证书开发API客户端应用程序，当API客户端发起请
求时，开发者使用签名证书中的私钥，对hash后的请求参数进行签名操
作，并将签名信息与请求参数一起提交到API服务器端。签名证书的使
用方式用公式表示为url_parameter_string+sign(SHA-
256(url_parameter_string)，签名证书-私钥)。
5）服务器处理请求，返回响应消息。
6）API客户端使用验签证书中的公钥对响应报文中参数的签名信息
做签名验证操作，验签证书的使用方式用公式表示为验签（sign(SHA-
256(url_parameter_string)，签名证书-私钥)，验签证书-公钥）。验签
通过后处理响应消息。
以上只是基于API认证举的一个例子，在实际应用中，数据证书很
少单独使用于身份认证，除了本例中所列举的签名外，数字证书还用于
通信过程中的敏感数据加密、通信链路的保护等，使用数字证书能有效
地防止中间人劫持、信息篡改、敏感信息泄露、重放攻击等安全风险。
除了上述认证方式外，HTTP 
Digest摘要认证也是常见的认证方
式，因在API身份认证中主要以OAuth协议为基础的认证流程为主，故
仅在此处提及，感兴趣的读者可以查阅相关资料。
7.3 常见的身份认证漏洞
上一节介绍了常见的API身份认证技术，接下来将结合相关的CVE
漏洞，介绍身份认证技术中常见的漏洞和攻击方式。
7.3.1 针对回调URL的攻击
针对认证流程的攻击是普遍存在且难度不高的攻击方式，导致此类
漏洞的原因是由于服务器端对客户端跳转的URL地址没有做严格的完全
匹配的格式验证，而是采用正则表达式或部分关键路径来进行校验导致
的，第3章中所分析的Facebook OAuth漏洞也是此类漏洞的一种形式。
在GitHub上，Concourse软件6.0版本中的release-notes修复了CVE-
2020-5409、CVE-2018-15798的漏洞，如图7-12所示。
●图7-12 GitHub上Concourse软件release-notes
此漏洞产生的原因是在Concourse的登录流程中，服务器端信任了
客户端提交的跳转URL。若此URL被攻击者利用，篡改为恶意站点的
URL，则可以获取用户的访问令牌Access Token，从而劫持用户身份。
在上文中分析了授权码模式的认证流程，读者应该清楚流程中第1）步
的请求参数格式中跳转的URL，详细如下：
如果此URL不可信，则身份认证后在第33）步跳转到此URL时携带
的授权码将不可信，而授权码是获取ID令牌、访问令牌Access Token的
凭据，整个用户身份将变得不可信。在这一点上，OpenID 
Connect和
OAuth是一致的，都存在易被攻击的问题。这就提醒安全设计人员在进
行详细设计时，需要对跳转的URL参数进行严格的校验。至少应满足以
下条件。
■ 客户端请求时携带的URL必须是客户端注册时的URL，是要在
授权服务器端存在的URL，并通过人工审核。
■ 服务器端在对URL校验时，严格进行匹配，禁止部分匹配或正
则表达式匹配。
■ 服务器端校验逻辑中，禁止使用白名单。
7.3.2 针对客户端认证凭据的攻击
在API安全中，客户端认证凭据相当于传统Web应用中的用户名和
密码，一旦客户端凭据泄露或丢失，会导致应用程序客户端的身份不可
信。在针对API的攻击行为中，对于客户端凭据的攻击，尤其是API密
钥泄露的攻击向来是重点。
随着云计算技术的成熟和普及，现在的企业应用在积极地搬到云端
的同时，也通过API集成了不同厂商提供的业务能力。在功能集成的过
程中，通常会调用不同厂商的API，也会在应用程序的代码中使用客户
端身份认证凭据，比如通用的SecretKey、Google云平台的Google 
API
Key、亚马逊云平台的AWS Access Key ID、阿里云的AccessKeySecret
等。这些客户端认证凭据在开发人员使用过程中，往往会因为保管不善
而导致凭据泄露。2019年4月12日搜狐网用户转载的文章称目前有超
1300000万个GitHub仓库泄露了API及加密密钥，可见客户端凭据泄露问
题的严重性，如图7-13所示。
为了规避此类风险，安全设计人员在API设计时，要基于客户端认
证凭据的使用过程去考虑相关的安全性设计。比如不允许将API 
KEY
硬编码在应用程序的代码中；设置更新周期，定期更新API 
KEY；对
于使用API KEY进行调用的客户端应用程序进行线上监控和日志审计，
防止API KEY泄露后被滥用等。
●图7-13 搜狐网用户转载GitHub仓库API密钥泄露情况的文章
安全界的同仁为此做了大量的保护工作，其中阿里云创新性地开发
了AK&账密泄露检测服务，为云上用户提供API 
KEY泄露检测功能。
从“泄漏前配置检查—泄漏行为检测—黑客异常调用”三个方面完成闭
环防护，为此类问题的解决提供了最佳实践案例。感兴趣的读者可以去
研究一下，其官方描述的关键流程如图7-14所示。
●图7-14 阿里云官方AK和账密防泄漏最佳实践流程图
7.3.3 基于JSON数据结构的攻击
在API交互过程中，大量地使用了JSON格式作为数据交换的基础形
式，比如ID令牌、访问令牌、刷新令牌等。新的协议形式必然伴随新的
攻击形式，CVE-2020-5497这个漏洞的成因中就属于此类问题。
在MITREid实现的OpenID 
Connect服务中，OpenID-Connect-Java-
Spring-Server的header.tag对于服务器端响应的用户信息端点信息处置不
当，导致了XSS产生。默认情况下，客户端处理用户信息端点的关键代
码如下：
这里的userInfoJson是JSON结构，结构中包含的字段值来源于服务
器端响应。攻击者正是利用此结构，在JSON的字段中注入了恶意脚
本，导致了XSS的产生，其恶意代码如下所示：
当看到这段代码，很多读者也就明白了这
个漏洞产生的原因。而对于XSS的处理，业界有很多成熟的方案，设计
时可以根据实际情况选用。处理XSS时重要的一点是，XSS需要在输出
时处理，而不是在输入时处理。如下所示为ESAPI处理XSS的代码片
段：
7.3.4 针对OpenID Connect授权范围的攻击
在OpenID 
Connect的授权码流程中，讨论了参数scope表示授权范
围，至少包含openid，通过openid来控制授权的范围。当客户端应用程
序的请求超出此授权范围时，要向授权服务器重新进行认证，根据
prompt参数确定如何响应。漏洞CVE-2019-9837就属于此类问题导致的
影响。
正常情况下，当客户端发送认证请求时，第1）步的请求消息格式
为：
此时，跳转的URL链接、注册的客户端ID与当前的openid profile是
对应的。如果访问的跳转的URL链接不在已注册的URL内，则发出了新
的授权请求。因为这里攻击者指定的prompt参数值为none，会直接被重
定向到redirect_uri指定的链接地址，显示错误信息。
如果这个重定向的redirect_uri是一个恶意站点，则会被用来进行钓
鱼攻击，欺骗用户，盗取身份认证凭据。正确的设计应该是针对这种异
常，跳转的链接地址应从服务器端获取注册时填写的跳转链接，而不应
从客户端请求中直接获取。
虽然这个问题的表现形式与73.3.1节的攻击形式很相似，但它更多