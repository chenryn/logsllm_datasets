+
(N + 3)EG
(N +5)EG +N Enc
3EG1 + 3E2G1
+
1E5G1
+ 2P
3EG + 1E2G
Comm.
N + 4
2N + 8
18
8
Legend: N is the total number of users, EG denotes one expo-
nentiation in G, EnG denotes a multi-exponentiation of n values in
G, P represents a bilinear pairing operation, Enc (resp., Dec) de-
notes a symmetric-key encryption (resp., decryption) operation,
and Comm. denotes the communication overhead.
the randomize-then-prove paradigm, where a credential is
ﬁrst randomized, and the randomized credential is then pre-
sented with a zero-knowledge proof. In general, the ﬁrst step
costs at least one exponentiation and the second step cost-
s at least one multi-exponentiation, and the veriﬁcation of
presentation proofs costs at least one multi-exponentiation.
Note that R(cid:48) can be computed via T −(sm+cγ)gsa in an ex-
ecution of ShowVerify. Therefore, the eﬃciency of MACSDH-
based credential presentation is optimal.
5.2 An Example Password-Based Encryption
Let H : D → G∗ be a cryptographic hash function mod-
eled as a random oracle. An example of password-based
encryption PE is described as follows.
Encpw(M ) takes as input pw and a message M ∈ G∗, com-
putes C ← M · H(pw), and outputs C.
Decpw(C) takes as input pw and a ciphertext C ∈ G, com-
putes M ← C/H(pw), and outputs M .
One can easily prove this example of PE is IND-ET secure,
since the outputs of H are uniformly random.
5.3 Comparison of APAKE Protocols
We compare our protocol APAKE with the mechanisms spec-
iﬁed by ISO/IEC 20009-4 in Table 1. For computation over-
head, we only list the most time-consuming operations, and
count the number of group elements in the login protocol.
The output size of a hash function or a MAC algorithm is
counted as a group element.
Table 1 shows that APAKE is much more eﬃcient than the
mechanisms [60, 54] in the password-only setting in terms
of computation cost at the server side and communication
overhead, and APAKE is also much more eﬃcient than the
mechanism [62] in the extra-storage setting.
6. SUPPORT OF REVOCATION
We present an accumulator-based revocation mechanism
for APAKE, which enables non-membership proofs to be ver-
iﬁed by a server with a secret key ˜γ.
p, computes ˜w ← g ˜γ, and
A server picks a random ˜γ ∈ Z∗
adds ˜w to params and ˜γ to sk. The server maintains a
for a revoked user IDi and ˜Vi = g1/((cid:81)i
revocation list RL = {(mi, ˜Vi)}r
i=1, where mi = H1(IDi)
j=1(˜γ+mj )) for each
i ∈ [r]. Let ˜V0 = g. For a registration request from a client
ID, the server issues a witness Wr ← ˜V 1/(˜γ+m)
along with
∧ g ˜γ = ˜w}, and the client
˜π ← NIZK{(˜γ) : W ˜γ
stores (ID, [A]pw, Wr), where m = H1(ID).
r = ˜VrW −m
r
r
Client
ClientHello
Server
-------->
ServerHello
Certificate(cid:63)
ServerKeyExchange(cid:63)
CertificateRequest(cid:63)
ServerHelloDone
[ChangeCipherSpec]
Finished
 Application Data
Figure 4: TLS Message Flows
Witness Update. Given the current revocation list RL =
{(mi, ˜Vi)}r(cid:48)
i=1, an un-revoked user ID can update oﬀ-line her
witness Wr iteratively with m = H1(ID) as follows:
Wj+1 ← (Wj/ ˜Vj+1)1/(mj+1−m), for each r ≤ j ≤ r
(cid:48) − 1.
r with a random z ∈ Z∗
Non-membership Proof. To prove that she has not been
revoked, the client computes m ← H1(ID), randomizes the
witness as ˜T ← W z
p, and generates
˜Σ ← SPK{(m, z) : ˜T −m ˜V z
Note that a revoked user IDj+1 (r ≤ j < r(cid:48)) cannot update
her witness, as the denominator mj+1 − m = 0. Using the
technique in [11, Lemma 3.2], we can prove that no revoked
user can forge a witness under the q-SDH assumption.
r = ˆV }, where ˆV = ˜T ˜γ.
To support revocation, we extend the Show and ShowVerify
algorithms in Section 5.1 by replacing the underlying SPK
r = ˆV }((cid:96)). By
with SPK(cid:48){(m, a, z) : T −mga = V ∧ ˜T −m ˜V z
APAKEr we denote the APAKE protocol with above revocation.
7. APPLICATION OF APAKE TO TLS
We integrate APAKE into the TLS protocol to provide a
TLS mode of server authentication with anonymous client
authentication, where a client holding a password-wrapped
credential and the password can authenticate herself to the
server without revealing her identity, and denote the ECDSA-
signed elliptic curve Diﬃe-Hellman ciphersuite with anony-
mous client authentication by ECDHE3.
Since a labeled SE-NIZK is also a signature of knowledge
[23] where a label (cid:96) is the message to be signed, we consider
Show and ShowVerify for MACSDH as a signing algorithm
and a veriﬁcation algorithm respectively, where (m, A) is
the secret key for generating signatures, and a signature σC
on message (cid:96) is veriﬁed using sk. We refer to the “signature
algorithm” as SigMAC, where SigMAC = (Show, ShowVerify).
We also integrate APAKEr into TLS in the same way as
APAKE except for using the extended (Show, ShowVerify) to
support revocation and additionally publishing Sign(sk, ˜w).
We denote the resulting ciphersuite by ECDHE4.
7.1 Integration into TLS
Assume that the server holds a certiﬁcate certS on his
ECDSA public key pk. The set of domain parameters par =
1188Table 2: Performance of HTTPS using Apache with OpenSSL
Connections / second
10 B payload
2043.678 (1.06)
1133.08 (1.50)
1007.308 (2.25)
1 KB payload
2022.282 (1.61)
1129.442 (1.69)
999.994 (1.74)
10 KB payload
1833.658 (1.80)
1075.69 (0.48)
953.698 (1.28)
100 KB payload
943.266 (1.09)
718.736 (0.21)
661.652 (1.02)
time (ms)
1.54 (0.05)
2.39 (0.05)
2.80 (0.01)
Connection Handshake Client
Auth.
None
(bytes)
Ciphersuite
ECDHE1
ECDHE2
ECDHE3
ECDHE4
2200
3806
4078
plain sigs
anon. sigs
anon. sigs
w/revoc.
863.712 (1.49)
860.364 (1.32)
826.032 (0.92)
602.928 (0.24)
3.40 (0.02)
4179
Legend: mean, (std. dev.) in columns 2-6; Client Auth. represents the type of signatures used to provide client authentication.
(G, p, g) is selected from a trusted published source such as
a standard, and its identiﬁer is denoted by parid. The serv-
er acts as a Certiﬁcation Authority to generate an ECDSA
signed certiﬁcate certmac on a dummy entity “apake” and
public key w. Then certmac is published and used by all
clients who provide anonymous authentication with SigMAC.
In the registration phase, each client should ﬁrst check the
validity of certS and certmac, and then stores certmac along
with a password-wrapped credential (ID, [A]pw).
When using the X.509 certiﬁcate with ASN.1 data type,
the certiﬁcate certmac is deﬁned as follows:
Certificate ::= SEQUENCE {
toBeSigned TBSCertificate,
algorithmIdentifier {ECDSA},
encrypted certsig,
... }
TBSCertificate ::= SEQUENCE { ...
subjectPublicKeyInfo SubjectPublicKeyInfo,
... }
SubjectPublicKeyInfo ::= SEQUENCE {
algorithm {SigMAC},
subjectPublicKey parid||w,
... },
where SigMAC speciﬁes the SigMAC = (Show, ShowVerify)
algorithm, parid||w denotes the bit-string of (parid, w),
certsig = Sign(sk, TBSCertificate), and the omitted ﬁeld-
s are speciﬁed following the X.509 speciﬁcation.
Below, we show how to integrate the APAKE into TLS [28].
We assume that a client has already recovered the “secret
key” (m = H1(ID), A) from a password-protected creden-
tial (ID, [A]pw) with her password pw, before initiating the
TLS protocol. The ciphersuite ECDHE3 is the same as the
ECDSA-signed elliptic curve Diﬃe-Hellman ciphersuite with
client authentication using ECDSA signatures, except that
the messages marked with rectangles in Figure 4 are dif-
ferent. The server adds apake and (SigMAC, SHA256) to the
ﬁelds of CertificateRequest, which is showed as follows:
struct {
ClientCertificateType {...,apake};
SignatureAndHashAlgorithm {...,(SigMAC, SHA256)};
... } CertificateRequest;
A client then utilizes certmac in Certificate, and invokes
the SigMAC to sign the handshake messages with the “secret
key” (m, A) and generates CertificateVerify. The server
can check the validity of certmac, and verify the validity of
a “signature” σC using SigMAC and his secret key sk.
7.2 Implementation
We implemented in C the ECDHE3 and ECDHE4, based on
the OpenSSL v1.0.2g. For comparison, we also implemented
the ECDSA-signed elliptic curve Diﬃe-Hellman ciphersuite
with only server authentication (resp., mutual authentica-
tion), which is denoted by ECDHE1 (resp., ECDHE2) and is
included in TLSv1.2. Our implementation take places at a
128-bit security level, and uses the secp256r1 curve. Apart
from digital signature algorithms for client authentication,
the ciphersuites ECDHE1, ECDHE2, ECDHE3 and ECDHE4 share
the same ingredients, i.e., ECDHE-ECDSA-AES128-GCM-SHA256,
where AES128-GCM denotes authenticated encryption (with
associated data) using AES-128 in GCM (Galois Counter
Mode). In the implementation of ECDHE4, we assume that
the client has already updated oﬀ-line her witness Wr.
Experiment environment. Our experimental results are
obtained in two desktop computers. The “client” computer
has an Intel i5-3470 processor with 4 cores running at 3.2
GHz each. The “server” computer has an Intel Core2 Duo
E7300 processor with 2 cores running at 2.66 GHz each.
Both computers run the operating system of Ubuntu 15.04.
Our softwares were both complied for the x86 64 architec-
ture with -O2 optimizations using g++ 4.9.2.
7.3 Performance Evaluation
The performance of ECDHE1, ECDHE2, ECDHE3 and ECDHE4
within the context of an HTTPS connection is shown in
Table 2. The approach for analyzing the performance in
TLS/HTTPS follows that of Gupta et al. [37]. Besides, we
follow the method of [13] to achieve the experimental data.
The client and server computation platforms were connected
over an isolated local area network with less than 1 ms ping
time. The server was running Apache httpd 2.4.20 with the
prefork multi-threading module.
The ﬁrst section of Table 2 shows the number of simulta-
neous connections supported by the server. The client com-
puter was running siege 4.0.1 tool3 to create many HTTP
connections in parallel for TLS. We did separate tests in the
diﬀerent HTTP payloads (10 bytes, 1 KB=1024 bytes, 10
KB, and 100 KB), so that simulating a variety of web page
sizes. Each test was run for 100 seconds, and the results
reported in Table 2 are the average of 5 runs with standard
deviation listed in parentheses. During all tests, the client
computer and network conﬁguration was enough to ensure
that the server’s processor had at least 95% utilization. Note
that session resumption was disabled. The second section of
this table reports the average time which is required for a
client to establish a connection, and is measured by using
Wireshark from when the client opens the TCP connection
to the server’s IP address to when the client starts to re-
ceive the ﬁrst packet of application data. The third section
of Table 2 reports the size of the handshakes.
3http://download.joedog.org/siege/siege-4.0.1.tar.gz
1189Table 2 shows that ECDHE3 obtains between a factor 1.43-
2.03x fewer HTTPS connections per second than ECDHE1,
and between a factor 1.09-1.13x fewer HTTPS connections
per second than ECDHE2. The ECDHE4 obtains between a
factor 1.10-1.17x fewer HTTPS connections per second than
ECDHE3. The average connection time and the size of the
handshakes for ECDHE3 and ECDHE4 are attractive.
8. REFERENCES
[1] https://krebsonsecurity.com/2016/03/crooks-steal-
sell-verizon-enterprise-customer-data/.
[2] M. Abdalla. Password-based authenticated key exchange:
An overview. In Provable Security 2014, volume 8782 of