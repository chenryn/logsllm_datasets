# 认证
---
## 用户信息
**/etc/passwd**
`/etc/passwd` 是用户数据库，其中的域给出了用户名、加密口令和用户的其他信息
`/etc/passwd` 文件中的每个用户都有一个对应的记录行，记录着这个用户的一下基本属性。`/etc/passwd` 只有系统管理员才可以修改的，该文件对所有用户可读。
- 存储条目格式
    ```
    name:coded-passwd:UID:GID:userinfo:homedirectory:shell
    例子
    root:x:0:0:root:/root:/usr/bin/bash
    |    | | |  |     |        |__登录 shell 程序的路径
    |    | | |  |     |__宿主目录
    |    | | |  |__用户全名
    |    | | |__所属基本组的 GID 号
    |    | |__用户账号的 UID 号
    |    |__密码字串或占位符 x
    |__用户账号的名称
    ```
    - 若用户 ID=0，则表示该用户拥有超级用户的权限
    - 检查是否有多个 ID=0
    - 禁用或删除多余的账号
    - 系统默认用户 系统程序使用，从不登录
    - 新建普通用户 uid 大于 500
在系统登录时,最终以 passwd 中的密码为准,因为 linux 校验时先读取 passwd 中的密码,第二位为占位符 x 时,将读取 shadow 中的 hash，而在 passwd 中存在密码字串时，将不会读取 shadow 中 hash。
**/etc/shadow**
`/etc/shadow` 是在安装了影子(shadow)口令软件的系统上的影子口令文件
在linux中，口令文件在 `/etc/passwd` 中，早期的这个文件直接存放加密后的密码，前两位是"盐"值，是一个随机数，后面跟的是加密的密码。为了安全，现在的 linux 都提供了 `/etc/shadow` 这个影子文件，密码放在这个文件里面，并且是只有 root 可读的。
Unix 系统最初是用明文保存密码的，后来由于安全的考虑，采用 crypt() 算法加密密码并存放在 `/etc/passwd` 文件。现在，由 于计算机处理能力的提高，使密码破解变得越来越容易。`/etc/passwd` 文件是所有合法用户都可访问的，大家都可互相看到密码的加密字符串，这给系统 带来很大的安全威胁。现代的 Unix 系统使用影子密码系统，它把密码从 `/etc/passwd` 文件中分离出来，真正的密码保存在 `/etc/shadow` 文件中，shadow 文件只能由超级用户访问。这样入侵者就不能获得加密密码串，用于破 解。使用 shadow 密码文件后，`/etc/passwd` 文件中所有帐户的 password 域的内容为"x"，如果 password 域的内容为"*"，则 该帐号被停用。使用 passwd 这个程序可修改用户的密码。
- 存储条目格式
    ```
    name:passwd:lastchg:min:max:warn:inactive:expire:flag
    例子
    root:$6$pglAPwtWL....K6EMWC6sP8dqMh3TB2C21::0:99999:7:::
    |                       |                 | |   |   ||||__保留字段(未使用)
    |                       |                 | |   |   |||__账号失效时间,默认值未空
    |                       |                 | |   |   ||__密码过期后多少天禁用此用户账号
    |                       |                 | |   |   |__密码过期前的警告天数,默认7
    |                       |                 | |   |__密码的最长有效天数,默认99999
    |                       |                 | |__密码的最短有效天数,默认0
    |                       |                 |__上次修改密码的时间
    |                       |__加密后的密码字符串
    |__用户账号的名称
    ```
- “口令”字段存放的是加密后的用户口令字：
    - 如果为空，则对应用户没有口令，登录时不需要口令；
    - 星号代表帐号被锁定；
    - 双叹号表示这个密码已经过期了；
    - $6$ 开头的，表明是用 SHA-512 加密；
    - $1$ 表明是用 MD5 加密；
    - $2$ 是用 Blowfish 加密；
    - $5$ 是用 SHA-256 加密；
- 加密的密码具有固定格式：`$id$salt$encrypted`,id 表示加密算法，salt 表示密码学中的 Salt,系统随机生成 encrypted表示密码的 hash
在 shadow 中直接添加用户是不可登录的,作为 passwd 的影子文件,其作用只是存放密码。
**用户管理**
```bash
id  								# 当前用户
whoami								# 当前用户
groups								# 当前组
cut -d: -f1 /etc/passwd				# 查看系统所有用户
useradd 					# 创建用户
useradd -d /home/ -s /sbin/nologin 		# 创建用户并指定家目录和 shell
passwd 					# 设置用户密码
addgroup 				# 创建组
addgroup  		# 移动用户到组
newgrp 					# 创建组
usermod -g  	# 修改用户的主组
usermod -G  		# 修改用户的附加组
usermod -s /bin/bash 		# 修改用户登录的 Shell
usermod -L   				# 锁定用户
usermod -U  				# 解锁用户
userdel 					# 只删除用户不删除家目录
    userdel -r 			# 同时删除家目录
    userdel -f 			# 强制删除,即使用户还在登录中
chage		                        # 修改帐号和密码的有效期限
	chage -l 				# 查看一下用户密码状态
	chage -d 				# 把密码修改曰期归零了,这样用户一登录就要修改密码
passwd							    # 配置 su 密码
    passwd -l   			# 锁定用户
    passwd -u   			# 解锁用户
```
---
## 组信息
**/etc/group**
`/etc/group` 文件是用户组配置文件，即用户组的所有信息都存放在此文件中。
此文件是记录组 ID（GID）和组名相对应的文件。
```bash
cat /etc/group
root:x:0:
daemon:x:1:
bin:x:2:
sys:x:3:
...
test:x:1000:
```
此文件中每一行各代表一个用户组。以 "：" 作为字段之间的分隔符，分为 4 个字段
每个字段对应的含义为：组名：密码：GID：该用户组中的用户列表
- 组名
    也就是是用户组的名称，由字母或数字构成。同 `/etc/passwd` 中的用户名一样，组名也不能重复。
- 组密码
    和 `/etc/passwd` 文件一样，这里的 "x" 仅仅是密码标识，真正加密后的组密码默认保存在 `/etc/gshadow` 文件中。
    不过，用户设置密码是为了验证用户的身份，那用户组设置密码是用来做什么的呢？用户组密码主要是用来指定组管理员的，由于系统中的账号可能会非常多，root 用户可能没有时间进行用户的组调整，这时可以给用户组指定组管理员，如果有用户需要加入或退出某用户组，可以由该组的组管理员替代 root 进行管理。但是这项功能目前很少使用，我们也很少设置组密码。如果需要赋予某用户调整某个用户组的权限，则可以使用 sudo 命令代替。
- 组ID (GID)
    就是群组的 ID 号，Linux 系统就是通过 GID 来区分用户组的，同用户名一样，组名也只是为了便于管理员记忆。
    这里的组 GID 与 `/etc/passwd` 文件中第 4 个字段的 GID 相对应，实际上，`/etc/passwd` 文件中使用 GID 对应的群组名，就是通过此文件对应得到的。
- 组中的用户
    此字段列出每个群组包含的所有用户。需要注意的是，如果该用户组是这个用户的初始组，则该用户不会写入这个字段，可以这么理解，该字段显示的用户都是这个用户组的附加用户。
    举个例子，lamp 组的组信息为 "lamp:x:502:"，可以看到，第四个字段没有写入 lamp 用户，因为 lamp 组是 lamp 用户的初始组。如果要查询这些用户的初始组，则需要先到 `/etc/passwd` 文件中查看 GID（第四个字段），然后到 `/etc/group` 文件中比对组名。
    每个用户都可以加入多个附加组，但是只能属于一个初始组。所以我们在实际工作中，如果需要把用户加入其他组，则需要以附加组的形式添加。例如，我们想让 lamp 也加入 root 这个群组，那么只需要在第一行的最后一个字段加入 lamp，即 root:x:0:lamp 就可以了。
    一般情况下，用户的初始组就是在建立用户的同时建立的和用户名相同的组。
**/etc/gshadow**
`/etc/passwd` 文件存储用户基本信息，同时考虑到账户的安全性，将用户的密码信息存放另一个文件 `/etc/shadow` 中。`/etc/gshadow` 文件也是如此，组用户信息存储在 `/etc/group` 文件中，而将组用户的密码信息存储在 `/etc/gshadow` 文件中。
```bash
root:*::
daemon:*::
bin:*::
sys:*::
...
test:!::
```
文件中，每行代表一个组用户的密码信息，各行信息用 ":" 作为分隔符分为 4 个字段
每个字段的含义如下：组名：加密密码：组管理员：组附加用户列表
- 组名
    同 `/etc/group` 文件中的组名相对应。
- 组密码
    对于大多数用户来说，通常不设置组密码，因此该字段常为空，但有时为 "!"，指的是该群组没有组密码，也不设有群组管理员。
- 组管理员
    从系统管理员的角度来说，该文件最大的功能就是创建群组管理员。那么，什么是群组管理员呢？
    考虑到 Linux 系统中账号太多，而超级管理员 root 可能比较忙碌，因此当有用户想要加入某群组时，root 或许不能及时作出回应。这种情况下，如果有群组管理员，那么他就能将用户加入自己管理的群组中，也就免去麻烦 root 了。
    不过，由于目前有 sudo 之类的工具，因此群组管理员的这个功能已经很少使用了。
- 组中的附加用户
    该字段显示这个用户组中有哪些附加用户，和 `/etc/group` 文件中附加组显示内容相同。
---
## PAM
在 Linux 中执行有些程序时，这些程序在执行前首先要对启动它的用户进行认证，符合一定的要求之后才允许执行，例如 login, su 等。在 Linux 中进行身份或是状态的验证程序是由 PAM 来进行的，PAM（Pluggable Authentication Modules）可动态加载验证模块，因为可以按需要动态的对验证的内容进行变更，所以可以大大提高验证的灵活性。
Linux-PAM（即 linux 可插入认证模块）是一套共享库,使本地系统管理员可以随意选择程序的认证方式。换句话说，不用(重新编写)重新编译一个包含 PAM 功能的应用程序，就可以改变它使用的认证机制，这种方式下，就算升级本地认证机制,也不用修改程序。
PAM 使用配置 `/etc/pam.d/` 下的文件，来管理对程序的认证方式.应用程序 调用相应的配置文件，从而调用本地的认证模块.模块放置在 `/lib/security` 下，以加载动态库的形式进，像我们使用 su 命令时，系统会提示你输入 root 用户的密码.这就是 su 命令通过调用 PAM 模块实现的。
**PAM 的配置文件**
PAM 配置文件有两种写法:
- 一种是写在 `/etc/pam.conf` 文件中，但 centos6 之后的系统中，这个文件就没有了。
- 另一种写法是,将 PAM 配置文件放到 `/etc/pam.d/` 目录下,其规则内容都是不包含 service 部分的，即不包含服务名称，而 `/etc/pam.d` 目录下文件的名字就是服务名称。如: vsftpd,login 等.,只是少了最左边的服务名列.如: `/etc/pam.d/sshd`
查看 `/etc/pam.d/sshd`
由上图可以将配置文件分为四列，
- 第一列代表模块类型
- 第二列代表控制标记
- 第三列代表模块路径
- 第四列代表模块参数
PAM 的配置文件详细语法见 [pam](../实验/pam.md)
**PAM 的模块类型**
Linux-PAM 有四种模块类型,分别代表四种不同的任务
它们是:认证管理(auth),账号管理(account),会话管理(session)和密码(password)管理,一个类型可能有多行,它们按顺序依次由 PAM 模块调用.
- *auth* :  用来对用户的身份进行识别.如:提示用户输入密码,或判断用户是否为 root 等.
- *account* : 对帐号的各项属性进行检查.如:是否允许登录,是否达到最大用户数,或是 root 用户是否允许在这个终端登录等.
- *session* : 这个模块用来定义用户登录前的,及用户退出后所要进行的操作.如:登录连接信息,用户数据的打开与关闭,挂载文件系统等.
- *password* : 使用用户信息来更新.如:修改用户密码.
**PAM 的控制标记**
PAM 使用控制标记来处理和判断各个模块的返回值