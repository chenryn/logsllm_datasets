## PostgreSQL 如何快速构建 海量 逼真 测试数据  
### 作者                
digoal                
### 日期                
2017-11-21               
### 标签                
PostgreSQL , pgbench , 压测 , 变量 , 测试数据构建         
----                
## 背景   
为了测试或验证需要，通常需要快速的构建测试数据。  
PostgreSQL提供了一些非常有用的功能，可以帮助用户快速的构建测试数据。  
## 有趣的功能  
### 1、SRF  
返回多条记录的函数。例如  
```  
                                                                 List of functions  
   Schema   |        Name         |         Result data type          |                        Argument data types                         |  Type    
------------+---------------------+-----------------------------------+--------------------------------------------------------------------+--------  
 pg_catalog | generate_series     | SETOF bigint                      | bigint, bigint                                                     | normal  
 pg_catalog | generate_series     | SETOF bigint                      | bigint, bigint, bigint                                             | normal  
 pg_catalog | generate_series     | SETOF integer                     | integer, integer                                                   | normal  
 pg_catalog | generate_series     | SETOF integer                     | integer, integer, integer                                          | normal  
 pg_catalog | generate_series     | SETOF numeric                     | numeric, numeric                                                   | normal  
 pg_catalog | generate_series     | SETOF numeric                     | numeric, numeric, numeric                                          | normal  
 pg_catalog | generate_series     | SETOF timestamp without time zone | timestamp without time zone, timestamp without time zone, interval | normal  
 pg_catalog | generate_series     | SETOF timestamp with time zone    | timestamp with time zone, timestamp with time zone, interval       | normal  
 pg_catalog | generate_subscripts | SETOF integer                     | anyarray, integer                                                  | normal  
 pg_catalog | generate_subscripts | SETOF integer                     | anyarray, integer, boolean                                         | normal  
(10 rows)  
```  
返回一批数值、时间戳、或者数组的下标。  
例子，生成一批顺序值。  
```  
postgres=# select id from generate_series(1,10) t(id);  
 id   
----  
  1  
  2  
  3  
  4  
  5  
  6  
  7  
  8  
  9  
 10  
(10 rows)  
```  
### 2、随机数  
```  
random()  
```  
例子，生成一批随机整型  
```  
postgres=# select (random()*100)::int from generate_series(1,10);  
 int4   
------  
   14  
   82  
   25  
   75  
    4  
   75  
   26  
   87  
   84  
   22  
(10 rows)  
```  
### 3、随机字符串  
```  
md5(random()::text)  
```  
例子，生成一批随机字符串  
```  
postgres=# select md5(random()::text) from generate_series(1,10);  
               md5                  
----------------------------------  
 ba1f4f4b0073f61145a821c14437230d  
 a76b09292c1449ebdccad39bcb5864c0  
 d58f5ebe43f631e7b5b82e070a05e929  
 0c0d3971205dc6bd355e9a60b29a4c6d  
 bd437e87fd904ed6ecc80ed782abac7d  
 71aea571d8c0cd536de53fd2be8dd461  
 e32e105db58f9d39245e3e2b27680812  
 174f491a2ec7a3498cab45d3ce8a4277  
 563a7c389722f746378987b9c4d9bede  
 6e8231c4b7d9a5cfaae2a3e0cef22f24  
(10 rows)  
```  
### 4、重复字符串  
```  
repeat('abc', 10)  
```  
例子，生成重复2次的随机字符串  
```  
postgres=# select repeat(md5(random()::text),2) from generate_series(1,10);  
                              repeat                                
------------------------------------------------------------------  
 616d0a07a2b61cd923a14cb3bef06252616d0a07a2b61cd923a14cb3bef06252  
 73bc0d516a46182b484530f5e153085e73bc0d516a46182b484530f5e153085e  
 e745a65dbe0b4ef0d2a063487bbbe3d6e745a65dbe0b4ef0d2a063487bbbe3d6  
 90f9b8b18b3eb095f412e3651f0a946c90f9b8b18b3eb095f412e3651f0a946c  
 b300f78b20ac9a9534a46e9dfd488761b300f78b20ac9a9534a46e9dfd488761  
 a3d55c275f1e0f828c4e6863d4751d06a3d55c275f1e0f828c4e6863d4751d06  
 40e609dbe208fc66372b1c829018097140e609dbe208fc66372b1c8290180971  
 f661298e28403bc3005ac3aebae49e16f661298e28403bc3005ac3aebae49e16  
 10d0641e40164a238224d2e16a28764710d0641e40164a238224d2e16a287647  
 450e599890935df576e20c457691c421450e599890935df576e20c457691c421  
(10 rows)  
```  
### 5、随机中文  
```  
create or replace function gen_hanzi(int) returns text as $$    
declare    
  res text;    
begin    
  if $1 >=1 then    
    select string_agg(chr(19968+(random()*20901)::int), '') into res from generate_series(1,$1);    
    return res;    
  end if;    
  return null;    
end;    
$$ language plpgsql strict;   
```  
```  
postgres=# select gen_hanzi(10) from generate_series(1,10);  
      gen_hanzi         
----------------------  
 骡歵瘾崪圚祯骤泛准赔  
 𦈚寱瘫办戾薶窍爉充环  
 鹝赶轮肸蒹焷尮禀漽汤  
 庰槖诤蜞礀链惧珿憗腽  
 憭酾轮𫍚陡切弥煈瘐猎  
 韸琵慆蝾啈响夐捶燚积  
 菥芉阣瀤乐潾敾糩镽礕  
 厢垅欳事鎤懯剂掏蔷窡  
 覤綊伱鳪散当镄灳毯杸  
 鳀倯鲗錾榜晟挗觑镈壮  
(10 rows)  
```  
### 6、随机数组  
```  
create or replace function gen_rand_arr(int,int) returns int[] as $$    
  select array_agg((random()*$1)::int) from generate_series(1,$2);    
$$ language sql strict;    
```  
```  
postgres=# select gen_rand_arr(100,10) from generate_series(1,10);  
          gen_rand_arr             
---------------------------------  
 {69,11,12,70,7,41,81,95,83,17}  
 {26,79,20,21,64,64,51,90,38,38}  
 {3,64,46,28,26,55,39,12,69,76}  
 {66,38,87,78,8,94,18,88,89,1}  
 {6,14,81,26,36,45,90,87,35,28}  
 {25,38,91,71,67,17,26,5,29,95}  
 {82,94,32,69,72,40,63,90,29,51}  
 {91,34,66,72,60,1,17,50,88,51}  
 {77,13,89,69,84,56,86,10,61,14}  
 {5,43,8,38,11,80,78,74,70,6}  
(10 rows)  
```  
### 7、连接符  
```  
postgres=# select concat('a', ' ', 'b');  
 concat   
--------  
 a b  
(1 row)  
```  
### 8、自定义函数  
通过自定义函数，可以生成很多有趣的数据。  
随机身份证号  
```  
create or replace function gen_id(    
  a date,    
  b date    
)     
returns text as $$    
select lpad((random()*99)::int::text, 2, '0') ||     
       lpad((random()*99)::int::text, 2, '0') ||     
       lpad((random()*99)::int::text, 2, '0') ||     
       to_char(a + (random()*(b-a))::int, 'yyyymmdd') ||     
       lpad((random()*99)::int::text, 2, '0') ||     
       random()::int ||     
       (case when random()*10 >9 then 'X' else (random()*9)::int::text end ) ;    