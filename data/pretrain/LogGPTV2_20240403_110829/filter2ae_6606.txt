### 文档优化

**作者**: sevck  
**日期**: 2016-06-20 (发现时间)

#### 漏洞概要
本文所描述的漏洞并非之前曝光的PHPMailer漏洞。实际上，我早在更早的时候就已经发现了这个问题，但当时涉及的是一个较老版本的软件。由于后期没有对新版本代码进行审计，因此错失了获得CVE编号的机会。尽管如此，测试过程中发现许多开源CMS仍在使用存在该问题的老版本。

#### 漏洞分析
让我们深入探讨一下phpmailer在处理用户输入时的具体过程。首先，程序需要接收来自用户的输入参数，例如订阅或回复邮件地址。在这个场景中，我们以邮箱订阅为例来跟踪phpmailer后端处理流程。

当接收到用户提交的邮箱地址后，phpmailer会调用`html2text`函数进行预处理，然后再发送邮件。以下是相关代码片段：

```php
// phpmailer处理逻辑
$email = $_POST['email']; // 假设这里是从表单获取邮箱地址
$message = html2text($email);
send_email($message);
```

在`html2text`函数内部，可以看到`preg_replace`函数被用来替换某些HTML标签，并且使用了`/e`修饰符，这为远程代码执行提供了可能。即使在拼接用户输入前应用了`mysql_real_escape_string`，也不能完全保证安全。

```php
function html2text($str) {
    return preg_replace('/<[^>]*>/', '', $str); // 注意这里的/e修饰符
}
```

最新版的phpmailer已经不再内置`html2text`功能，转而建议开发者自行实现。然而，很多项目仍然依赖于旧版本中的`html2text`库，导致这些系统面临潜在的安全威胁。

#### 相关案例
为了验证上述漏洞的存在，可以利用Burp Suite工具修改HTTP请求中的`email`字段值，如下所示：

- **攻击向量**: `email=${@system(ls)}`
- **绕过方法**:
  - 使用ASCII码代替空格（例如：`\x20`）
  - 利用特殊字符组合如`!!`, `$IFS`, `{}`, `<>`等替代常规命令分隔符

以下是一些具体的绕过示例：
- `!!`命令重放技术
- `$IFS`环境变量设置
- 大括号`{}`包围命令
- 尖括号`<>`用于文件操作
- `\x20`十六进制表示法模拟空白字符

通过以上手段，即便目标系统实施了基本的安全防护措施，依然有可能成功执行恶意代码。

#### 结论
虽然phpmailer官方已经停止支持易受攻击的`html2text`模块，但在实际应用中仍有许多遗留实例未得到妥善处理。希望此报告能够引起开发者的重视，并及时采取补救措施以保障系统的安全性。

**博客链接**: [此处插入您的个人博客链接]