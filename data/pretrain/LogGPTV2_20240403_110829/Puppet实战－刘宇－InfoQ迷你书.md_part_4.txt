Capistrano、Cfengine 等。下面我们就最常用的 Puppet 与 Chef进行简单对比，主要是从用户、
明智的。现在毫无疑问，应该选 Puppet。
国内越来越多的大公司也在使用 Puppet，例如新浪、阿里巴巴、百度、腾讯、奇虎360、小
迪斯尼、Citrx、Oracle/Sun、Constant Contact、Match.com、Shopzilla、Google、RedHat 等。
1.2.1都有谁在使用 Puppet
1.2为什么要使用 Puppet
注意
1.2.2
米、
依赖关系
现成实例
平台支持
文档环境
程序语言
商业运行
开发支持
使用用户
、United Stack、豆瓣、好乐买、趣游、PPTV 等。
针对当前开源的配置管理工具，这里进行简单的汇总：Puppet、Chef、Func、Fabric、
在笔者编写本书时，Puppet 已拥有 250家客户，包括 Zynga、Twitter、纽约证券交易所、
目前开源的工具非常多，很多人在选择的时候犹豫不定，不知道哪个好。如果担心在使
Puppet 3.0 将不再支持 Ruby 1.8.5 以下版本。
口其他 BUG 的修复：修复了3.0 Agent 与 2.7Master 工作的问题、kick无法工作问题、
DSL/confg 变化：auth.conf 增加 allow_ip 配置选项，unless 支持，插件同步默认改为
 Server 自动发现：通过 DNS SRV寻找 CA、Master、Report 和 Fileserver。
口使用 Rubygems 加载插件：可以通过 Rubygems 来安装和使用 Puppet 的扩展代码。
 rack 安装启动出错问题等。
True，更新 configure 的语法。
常见集中化管理工具对比
灵活处理
Example42
ALL os
Mail-List、IRC
Php、Django、Ruby、
Enterprise
第三方Foreman
Google、RedHat、Apple、Sina、
Puppet
表 1-3Puppet 和 Chef 对比
无
无
较多
Mail-List、IRC
Ruby
Enterprise
无
Admeld...
Chef
第1章认识Puppet5
---
## Page 17
6第一部分准备篇
无法使用 Puppet，它已经尽可能地支持一切操作系统。不过使用 Windows 的朋友需要注意：
OpenBSD、Mac os x、Ubuntu、SuSE、Solaris、Windows 等。我们不需要担心所管理的设备
1.3.3
们不能一味地追求时尚，就像我们选择 Puppet一样。
选择语言时，Kanies 一直也没有后悔选择了 Ruby。因此选择适合自己的语言才是硬道理。我
Kanies 进行了尝试，没想到 4个小时就做出了所需工具的原型。为此直到后来为 Puppet Labs
了一下 Python，虽然很多人都说它非常棒，但也满足不了需求。这时有人说Ruby 很酷,
1.3.2为什么是Ruby
Puppet2.6 版本中已经支持，只是没有当做主输出而已。
HTML 呢？所以说 Puppet 使用自有语言是为了更好地处理人机接口。而 Ruby 输出实际上在
者非常巧妙地用一个反问回答了这个问题：在使用浏览器访问网站的时候为什么不直接读
1.3.1为什么要有自己的语言
1.3Puppet 的作用和特色
语言来完成的，然而当他想要开发工具时，发现在Perl 中得不到想要的类关系。于是试用
本身吓住了，“Just Do It”。
他的学起来也不难。初学者在人门时一定要意识到这一点：明确自己的目的，而不要被工具
口即可完成。因此我们不需要掌握这类开发语言。而且开发类语言都互通的，掌握一门，其
务，除非想在它的基础上做二次开发。通常做二次开发都有现成的框架，调用工具的 API接
使用工具即可。如何更深人地理解工具的特性，最大化地发挥出它的优势才是我们的首要任
都是“不需要”。其实我们使用任何一个工具，都不需要掌握此工具所采用的语言，只要会
1.2.3推荐 Puppet 的理由
用Kanies 的话来说，Ruby 太适合 Puppet了。最开始Kanies 的大量工作都是使用 Perl
为什么不使用XML or YAML 配置格式？为什么不直接采用 Ruby 输出？Puppet开发
Chef 所支持的操作系统：http://wiki.opscode.com/display/chef/Installing+Chef+Server Chef 
Puppet 所支持的操作系统：htp://docs.puppetlabs.com/guides/platforms.html
使用者：http://www.opscode.com/customers/Puppet
管理任何机器
---
## Page 18
1.5.1Puppet 基本结构
数据流、文件结构、详细交互过程等几方面循序渐进地讲解，以便读者理解并掌握这些知识。
1.5
注意
工作原理。
1.4
后续我们将在第6 章讲解 Puppet 的资源。
梳理好关系后将其交给 Puppet 维护。对于系统管理员而言，一切的配置将变得简单而有趣。
周期内的每个动作都被抽象成一个“资源”。我们更多的是要维护一台主机上的每个“资源”
期，即初始化安装、升级、维护、服务迁移及下载。在Puppet世界中，一台主机的每个生命
提示
不过刚刚发布的 Puppet3.0 对 Windows 的支持进行了加强。
目前 Puppet 所支持的资源有 File、Package、Host、Group、Service、Exec，支持的类型有限。
我们先看一下 Puppet 基本结构，如图 1-1 所示。Puppet 模块的编写主要是：应用程序、
下面进入本章重点—Puppet 工作原理，这部分将分别从基本结构、Puppet 是如何工作的、
不同安装包的树结构会不一样，为了便于读者理解，这里仅对主要的配置文件进行了说明。
通常在安装好 Puppet 之后的 /etc/puppet 目录下运行 tree 就能看到下面的树结构:
在了解了什么是 Puppet 后我们再来看它的组织结构，以便在后续章节中能更好地掌握其
Puppet 组织结构
处理资源与资源之间的依赖关系是 Puppet 的优势。Puppet 管理一台主机的整个生命周
更多信息可参考http://docs.puppetlabs.com/windows/writing.html。
Puppet 工作原理
tagmail.conf
puppet.conf
namespaceauth.conf
modules 
manifests
auth.conf
`-- site.pp
|-- manifests
templates
`-- init.pp
nginx.conf.erb
#模块主配置文件，定义类 class 相关信息。读取模块后先读取它
#邮件报告配置文件
#模板配置文件（erb 为主）
#
#
非
#ACL 权限控制文件
命名空间配置文件（配置权限）
以 Nginx为例
模块配置目录
定
节
文
件服务配置文
件
第1章认识Puppet7
---
## Page 19
8·第一部分准备篇
解它的数据流走向。
1.5.3Puppet 数据流
修改发送给报告系统。
记录下所发生变化的部分。
Modules 中。
1.5.2Puppet是如何工作的
文件、服务及操作系统底层相关。客户端解析完成后发送给报告系统（见图1-1右上角)。
在了解了Puppet 如何工作之后，我们需要继续了
4）报告：将期待的变化、
3）Node 节点在本机进行代码解析验证并执行，将结果反馈给 Master。
2）Master 告诉 Node 节点应该如何配置，将这些信息写入 Catalog 后传给 Node。
1）Node 节点将 Facts 和本机信息发送给 Master。
整个工作过程如图1-2所示。
3）执行：按步骤1）定义的配置自动部署。检测并
2）模拟：
1）定义：使用Puppet特定的语言定义基础配置信息。通常我们把这些信息写在
接着我们来看一下 Puppet 是如何工作的。简单来说分4步进行。
：在配置执行之前检测代码，但并不真正执行。
2
Puppet Master
事务处理层
配置语言抽象层
调度与部署
Puppet Modules
8
、实际发生的变化及任何
图1-1 Puppet 基本结构 
2
Puppet DeshBoard
④报告
MUMLAAN
图1-2Puppet 工作过程
③执行
①定义
②模拟
---
## Page 20
容，进而能快速定位故障并解决它。所有交互过程都是建立在签发证书的前提下执行的。
题都能在大脑中呈现如图1-5 所示的内
以便在今后的使用过程中遇到任何问
部分内容，可加深对Puppet 的理解
Master 的详细交互过程。通过学习这
接下来我们将分析 Puppet 的Agent与
对 Puppet 的工作原理有了基本的了解，
1.5.5详细交互过程
再执行，完成最开始所定义好的状态。
内容，将编译好的代码存入Catalog。
这些目录的关系是如何关联起来的呢？
Puppet 的树结构。那么结合数据流,
1.5.4
集成。
通过以上的学习，相信大家应该
2）在执行前先进行代码的验证，
1）Puppet 通过编译 Manifest 中的
代码编译过程如图 1-4 所示。
在 Puppet 组织结构中我们了解了
2）Puppet 服务端 Master 通过分类判断请求的客户端是谁，它将要做什么。这个判断是
整个数据流的走向是基于 SSL 安全协议的，如图1-3 所示。
4）Master 通过 API将数据发给分析工具。报告完全可以通过开放 API或与其他系统
1）Puppet 客户端 Agent 将节点名与 facts 信息发送给 Master。
文件结合
Node
Node
Node
?
Catalog
Facts
3
图 1-3 Puppet 数据流
Master
Master
应用(Apply)
Master
Manifests
Report
图1-4 文件编译过程
(definedsystem state)
定义系统状态
伪代码(Catalog)
编译(Compile)
Manifests
 DashBoard
(enforcedefined state)
执行定义状态
第1章认识Puppet9
(query status)
查询状态
Manifests
一
一
---
## Page 21
10·第一部分准备篇
所采用的 SSL 安全加密协议已经为我们解决了数据传输的安全问题。
上，这样就更加安全了。当然，即使你所在的公司没有属于自己的内网也没有关系，Puppet
担心数据的安全性问题。通常我们使用 Puppet 管理设备时也有可能建立在公司内网的基础之
1.5.6
过开放 API 的形式发送给 Puppet 服务端 Master。
是代码的验证，并将执行过程的信息及结果写人日志。
Puppet 客户端Agent，到此完成第一次交互。这一步是1.5.4节的内容。
通过 site.pp 中包含的 Node.pp 配置文件定义的。
3） Puppet 服务端 Master 将所需要的 Class 类信息进行编译后存入 Catalog 并发送给
Puppet 通信都采用 SSL 安全加密协议，以保障所有数据传输的安全性，为此我们不用
5）Puppet客户端Agent最终达到最开始所定义的状态，并且将结果及任何执行数据通
4）Puppet 客户端 Agent 对 Catalog 进行代码验证（语法检查及错误检查）并执行。主要
Agent
 Puppet Master 和 Puppet Agent 的交互过程如图 1-5 所示。
安全与认证
应用（Apply）
=
(definedsystem state)
伪代码（Catalog)
定义系统状态
主机名和facts
请求伪代码
执行定义状态
(查询状态
Master
类(Class)
判断主机及需求
报告（Report）
(Compile)
编译
(classify)
分类
类(Class)
---
## Page 22
了防止读者混淆，建议都采用 Puppet 2.6 以上版本。本书都以 Puppet 2.6 以上版本为主。
[puppetmaster]、[puppetagent]为主。Puppet 2.6 以后都以 [main]、[master]、［agent]为主。为
配置等。Puppet 版本不同，配置选项命名方式也有所不同。Puppet 2.6 以前的命名方式还以
1.6.1
置都围绕着 Puppet.conf 展开。读者可以回顾在1.4 节讲的组织结构，以便快速掌握本节内容。
1.6
思考
户端发起 https://master.domain.com:8140/{environment}/{resource}/{key}这样的请求时，我们
协议，因此申请证书验证是必需的。
络连接进行加密。
输层安全）是为网络通信提供安全及数据完整性的一种安全协议。TLS与 SSL 在传输层对网
先看如何生成 Puppet 配置文件 puppet.conf:
主配置文件 puppet.conf 主要用于设置相关的参数、认证文件、文件系统配置文件、插件
在学习了 Puppet 原理及版本差异后，我们需要掌握它的核心配置文件。Puppet 所有的配
在学习了 Puppet 安全之后，我们来学习 Puppet 的认证。由于 Puppet 采用的是 SSL 加密
SSL（Secure Sockets Layer，安全套接层）及其继任者 TLS（Transport Layer Security，传
当客户端要输出“Hello World!”时，整个 Puppet 的数据流走向？
 Puppet 只允许经过安全认证的客户端发送请求，这极大地保证了数据的安全。同时当客
Puppet Agent 就可以收到 notice:Finished 等相关字样。如果 Master 一直不签发证书,
 Puppet Agent 在运行 puppet apply --test 时添加参数（--verbose），可以在客户端终端看
Puppet Master 在启动后会向自己签发证书和 key。我们可以在 /var/puppet/ssl（3.1版
puppetmasterd--genconfig> /etc/puppet/puppet.conf
Puppet 核心配置文件详解
证书相关的命令将会在第5章详细讲解。
puppet cert signagent_name 来签发证书。
Puppet Master 同样也可以使用 puppet cert list 查看申请证书的客户端列表。使用命令
客户端会每2 分钟请求一次。
本在/var/lib/puppet/ssl/下面）目录下看到它们。
主配置文件 puppet.conf
到申请证书的详细过程。
第1章认识Puppet11
---
## Page 23
12·第一部分准备篇
Master 
#有关报告系统的配置我们将在第17章讲解
[master] 
[agent]#客户端配置选项
[main]#通用配置选项
甲
默认目录是/etc/puppet。
puppet agent --configprint confdir
如果不知道配置文件在哪个目录下，
puppet doc --reference configuration
在本地用如下命令查看配置参考手册：
以上命令会覆盖 Puppet.conf 原文件。
与 Agent):
于 puppet.conf 配置文件内容较多，下面笔者将列举核心配置、常用配置选项（不区分
autosign= /etc/puppet/autosign.conf #自动认证配置文件
reports = store, 