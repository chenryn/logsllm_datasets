title:A unified model for timing speculation: Evaluating the impact of technology
scaling, CMOS design style, and fault recovery mechanism
author:Marc de Kruijf and
Shuou Nomura and
Karthikeyan Sankaralingam
201O IEEEIIFIP 
International 
Conference 
on Dependable 
Systems 
& Networks 
(DSN) 
A Unified Model for Timing Speculation: 
Evaluating the Impact of Technology 
Scaling, CMOS Design Style, and Fault Recovery Mechanism 
Marc de Kruijf, Shuou Nomura, Karthikeyan 
Sankaralingam 
Vertical 
Research Group 
University 
of Wisconsin -Madison 
{dekruijf, 
nomura, karu}@cs.wisc.edu 
Abstract 
Due to fundamental 
device properties, 
energy efficiency 
improvements. 
timing specu­
is showing diminishing 
has been proposed to optimize 
from CMOS scaling 
To overcome the energy efficiency challenges, 
lation 
tim­
ing conditions, 
con­
var­
ditions 
Although 
ious timing speculation techniques 
no 
generalframework existsfor reasoning 
and high-level 
with errors occurring 
in hardware. 
design considerations of 
for common-case 
under worst-case 
have been proposed, 
and corrected 
detected 
about the trade-offs 
timing speculation. 
This paper develops 
two models to study the end-to-end 
on 
recovery 
a hardware-level 
and a complementary 
of timing speculation: 
show that (1) efficiency 
efficiency 
the effects of process variations 
system-level 
the models are used to assess the 
behavior 
model that considers 
path delays, 
model. When combined, 
impact of technology 
recovery mechanism 
tion. Our results 
speculation 
low power (sub-threshold) 
timing speculation 
delay reduction, 
to significant 
uses only high-level 
ficiency 
without 
making it a potentially 
scaling, 
on the efficiency 
CMOS design style, andfault 
of timing specula­
gains from timing 
(2) ultra­
scales, 
benefit mostfrom 
-we report a 47% potential 
fault recovery is key 
The combined 
and (3) fine-grained 
inputs to derive quantitative 
energy ef­
do not improve as technology 
energy improvements. 
useful tool for hardware 
any need for detailed 
CMOS designs 
benefits 
energy­
model 
simulation, 
developers. 
1. Introduction 
Due to fundamental 
limitations 
in reducing 
threshold 
scaling 
and gate capacitance, 
technology 
in the 
driven by materials 
inno­
node [1]. Furthermore, 
and 
and systems designers 
voltage 
CMOS roadmap is increasingly 
vation at each technology 
ing process, 
aging effects 
bed considerable 
diminishing 
energy efficiency 
and temperature 
circuits 
any failure, 
to prevent 
scaling. 
As a result, 
is showing diminish-
increas­
(PVT) variations 
voltage, 
require 
the benefit of technology 
from CMOS scaling 
design guardband 
to em­
have been a fundamental 
no improvements. 
Energy efficiency 
driver of VLSI sys­
gains has dis­
gains 
energy efficiency 
ing or practically 
from scaling 
tems. Hence, diminishing 
ruptive 
implications 
Timing speculation 
systems. 
to help overcome 
for the design of computing 
has been proposed 
limitation 
[3, 5]. Under timing spec­
to operate correctly 
but are allowed to fail un­
conditions. 
Classical 
for the common-case 
scaling 
behav­
under 
timing conditions 
circuits 
are designed 
worst-case 
can still be obtained 
this energy efficiency 
ulation, 
common-case 
der dynamically 
benefits 
ior, while the system provides 
detection 
While individual 
approaches 
tion, no framework 
the level of the overall 
have been proposed 
and correction 
system. 
some mechanism 
for error 
failures. 
to recover 
from infrequent 
microarchitecture, 
CAD, and device-level 
to analyze 
timing specula­
exists to analyze 
timing speculation 
at 
In this paper, we propose such a general, 
system-level 
First, 
scaling, 
vs. low power), 
model that considers 
we develop a hardware 
of timing speculation. 
framework 
for the analysis 
velop a unique end-to-end 
technology 
formance 
system. 
The following paragraph describes 
We de­
(1) CMOS 
(2) CMOS design style (i.e. high per­
and (3) the fault recovery 
our approach. 
model for timing specu­
lation that maps error rate to energy efficiency gains, ac­
counting 
parameters, 
design styles 
using the ITRS roadmap [1]. Second, we develop 
level recovery 
the event of an error and apply it to a spectrum 
systems. 
model to yield a system-level 
upper-bounds 
we apply this model to a spectrum 
and project 
of recovery 
We finally combine this model with our hardware 
operation 
of CMOS 
node sizes 
a system­
of recovery 
model to derive the overheads 
energy efficiencies. 
model that provides 
technology 
variation. 
to different 
By varying 
for process 
circuit 
in 
realistic 
on achievable 
We report three key findings 
using this model: (1) timing 
is largely 
unaffected 
speculation 
ing, (2) timing speculation 
to ultra low-power 
recovery 
is most  beneficial 
designs, 
systems show only limited 
and (3) coarse-grained 
energy efficiency 
by future technology 
scal­
when applied 
hardware 
im-
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
487 
DSN 2010: de Kruijf 
et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:01:21 UTC from IEEE Xplore.  Restrictions apply. 
1.4b)l 1.4E!] 
International 
2010 IEEE/IFIP 
Conference 
1.0D  0.8 
'" 0.6 
c: 
w  0.4 
0.2 
10-15 10-10 10-5 10° 
1.3 
12 
. 
1.1 
1.0 
°i-15 
Error rate 
: 
i;; 1.1 
iii 1.0 
,lj 0.9 
: 
Error rate 
10-10 10-5 100 °i-15 10-10 10-5 100 
Error rate 
x 
Figure 1. Our system-level 
model breakdown. 
framework 
is a con­
in its own right. It is the first unified model that 
and archi­
device-level 
behavior, 
scaling, 
the impact of timing spec­
the model takes only four high-level 
in­
to evaluate 
our modeling 
In addition, 
organization 
Moreover, 
provements. 
tribution 
covers technology 
tecture 
ulation. 
puts. It thus provides 
tool that can be used for rapid analysis 
without 
2. Overview 
designers 
detailed 
circuit 
with a system evaluation 
of timing speculation 
Figure 1 gives an overview 
of the two models we develop 
on Dependable 
Systems 
& Networks 
(DSN) 
node, and our recovery 
model to each recovery 
how the models are combined 
model for system efficiency, 
and 
technology 
system. We also describe 
to produce our aggregate 
present 
designs 
inputs: 
the results 
we study. The final model has the following 
four 
up the hardware 
matching 
and recovery 
1. A hardware 
2. The effect of process 
path delay distribution. 
variation 
on path delay, which 
can be derived 
from ITRS projections 
for: 
• a given CMOS design style. 
• a given CMOS process 
3. The time between recovery 
4. The time to restore 
a checkpoint. 
technology. 
checkpoints. 
In Section 
8, we present 
the limitations 
of the model and 
9 discusses 
related 
Section 
of our results. 
the limitations 
work and finally Section 
3. Hardware efficiency model 
10 concludes. 
scaling con­
to 
to exe­
conservative 
guardbands 
required 
It also allows hardware 
or lower voltage 
than in the worst 
in clock 
and/or increase 
in voltage 
and addresses 
straints 
combat PVT variations. 
cute at higher frequency 
case. This reduction 
frequency 
troducing 
ciency goal is to minimize 
energy-delay 
product, 
energy =  power x delay: 
energy efficiency 
at the expense of in­
improves 
errors into the system. We assume that the effi­
by the 
energy-delay, 
which we abbreviate 
measured 
as EDP . Since 
EDP =  energy x delay =  power x delay2  (1) 
or microarchitecture 
simulation. 
Timing speculation 
relaxes technology 
We first develop 
the relationship 
a 
be­
energy efficiency 
given two 
path delay distribution, 
on path delay for a 
process. 
3, and in Section 
4 
from the ITRS roadmap [I] to derive 
that models the effects of process 
hardware 
design styles and technology 
variation 
pro­
which we refer to as 
efficiency 
model that derives 
in this paper and how they are combined. 
hardware 
tween error rate and hardware 
input parameters: 
and (2) the effect of process 
given hardware 
variation 
design and technology 
(1) a hardware 
The model is described 
in Section 
three design styles, 
where 11 nm represents 
we use projections 
the parameter 
for different 
cesses. 
We consider 
high performance 
power CMOS, and explore 
ogy processes, 
roadmap according 
Next, we develop 
statistically 
derives 
model is generally 
ery (checkpoint-based) 
trast tojorward 
ing triple 
much higher resource 
them here. Our model determines 
put parameters: 
the checkpoint 
Section 
ery systems 
Finally, 
to ITRS projections. 
a separate 
the overheads 
applicable 
systems. 
error recovery systems, 
modular redundancy 
6 we describe 
5 and in Section 
overheads 
CMOS, low power CMOS, and ultra-low 
error rate to hardware 
both 45nm and llnm technol­
timing speculation. 
The model can be trivially 
ex­
the end of the CMOS 
we derive a function, 
EDPhw, to encap­
efficiency 
model for timing speculation. 
the efficiency 
of the hardware 
ED P, relative 
by mapping 
to a baseline 
In this section, 
our hardware 
sulate 
ED Phw captures 
hardware 
without 
tended to other metrics 
Before we proceed, 
such as energy-delay 
however, 
squared. 
we first highlight 
the two 
system recovery 
model that 
of error recovery. 
error recov­
to all backward 
These systems 
are in con­
The 
such as systems us­
(TMR), which typically 
and hence we do not study 
have 
overheads 
using two in­
times 
like flip-flops) 
combinational 
elements 
that allow the basic concept of timing speculation. 
logic delays (and hence arrival 
vary due to the ap­
and input data. Timing speculation 
factors 
First, 
for the clocked 
plication 
clock period to be lower than the worst-case arrival 
assumed during design. 
variability 
ing speculation 
In this paper, we refer to these two factors 
Factor and the Variability 
Second, PVT variations 
introduce 
using tim­
and hardware 
variability. 
allows the 
time 
as the Application 
respectively. 
for worst-case 
need not account 
in gate delays, 
designed 
Factor, 
(1) the time between checkpoints 
and (2) 
restoration 
the model in 
cost. We present 
and derive the input parameters 
results 
in Section 7 we present 
applying 
our 
model to each CMOS design style and 
efficiency 
a spectrum 
for each. 
of recov­
To derive EDPhw, we measure the Application 
that 
and application-level 
of vari­
using an empirically  measured 
represents 
ability. 
For the Variability 
logic-level 
path delay distribution 
sources 
Factor, 
Factor 
we specifically  model 
hardware 
978-1-4244-7501-8/101$26.00 
©2010 IEEE 
488 
DSN 2010: de Kruijfet al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:01:21 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP 
International 
Conference 
on Dependable 
Systems 
& Networks (DSN) 
100 
10-1 
10-2 
10-3 
"l 10-4 
Q., 10-5 
10-6 
10-7 
10-8 
10-9 
III 
...... 
.c:: 12 
III 
C. 10 
Q) 
>  8 
:;::; u 
III 6 
'+--
0  4 
'-
Q) 
.0  2 1 
E 
::J  00 
0  1 2  3  4  5 
Z 
Clock period (tl 
(a) Sample distribution (b) PEl apath_delay=O 
Figure 2. Effect of process variation 
2  3  4  5 
Path delay 
I 
100 
10-1 
10-2 
10-3 
"l 10-4 
Q., 10-5 
10-6 
10-7 
10-8 
10-9 
process variability, 
fect timing speculation. 
variations, 
variation 
as well. In summary, 
ing two input parameters: 
and measure how process 
Although 
we consider 
variations 
only process 
af­
the model is extendable 
to other forms of PVT 
our model takes the follow­
1. A representative 
2_ A value apath_delay that represents 
processor 
path delay distribution. 
the effect of pro­
de­
process. 
variation 
on path delay for a given  hardware 
Path delay variations 
cess variation 
sign and technology 
due to process 
tributed 
tion of the normal distribution_ 
gate-delay 
techniques. 
are modeled as normally 
dis­
[14], where apath_delay is the standard 
devia­
It can be derived 
from 
or other simulation 
equations, 
CAD tools, 
we derive EDPhw in three steps. 
path delay distribution 
PE that maps a clock pe­
and 
we use our representative 
With these parameters, 
First, 
apath_delay to derive a function 
riod to a per-cycle 
convert that converts 
given pi/, the inverse 
EDP. Finally, 
compute EDPhw using the following 
error rate. Second, we derive a function 
clock period to a relative 
a relative 
EDPhw(rate) =  convert( -f  )  (2) 
of PE, we 
function 
equation: 
p-1(rate) 
PE (ratebase) 
the baseline 
The variable 
ratebase represents 
error rate 
timing speculation. 
for a system without 
assume a baseline 
roughly one timing error every 30 days on a single 1GHz 
corel. 