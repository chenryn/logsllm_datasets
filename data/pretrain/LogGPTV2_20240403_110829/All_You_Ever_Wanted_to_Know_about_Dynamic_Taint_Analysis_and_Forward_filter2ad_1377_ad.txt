3
4
Table VII: Simulation of forward symbolic execution.
aliasing relationships. In order to logically encode sym-
bolic addresses, we must explicitly name each memory
update. Example 7 can be encoded as:
mem1 = (mem0 with mem0[addr1] = v) ∧ z =
mem1[addr2]
The above formula should be read as mem1 is the same
as mem0 except at index addr1, where the value is v.
Subsequent reads are performed on mem1.
• Perform alias analysis. One could try to reason about
whether two references are pointing to the same address
by performing alias analysis. Alias analysis, however,
is a static or ofﬂine analysis. In many application
domains, such as recent work in automated test-case
generation [9, 17–19, 29, 34, 35, 57], fuzzing [36], and
malware analysis [11, 45], part of the allure of forward
symbolic execution is that it can be done at run-time.
In such scenarios, adding a static analysis component
may be unattractive.
Unfortunately, most previous work does not speciﬁcally
address the problem of symbolic addresses. KLEE and its
predecessors [17, 19] perform a mix of alias analyses and
letting the SMT solver worry about aliasing. DART [36] and
CUTE [57] only handle formulas that are linear constraints
and therefore cannot handle general symbolic references.
However, when a symbolic memory access is a linear ad-
dress, they can solve the system of linear equations to see if
they may be aliased. To the best of our knowledge, previous
work in malware analysis has not addressed the issue. Thus,
malware authors could intentionally create malware that
includes symbolic memory operations to thwart analysis.
Path Selection. When forward symbolic execution encoun-
ters a branch, it must decide which branch to follow ﬁrst.
We call this the path selection problem.
We can think of a forward symbolic execution of an entire
program as a tree in which every node represents a particular
instance of the abstract machine (e.g., Π, Σ, µ, ∆, pc, ι). The
analysis begins with only a root node in the tree. However,
every time the analysis must fork, such as when a conditional
jump is encountered, it adds as children all possible forked
states to the current node. We can further explore any leaf
node in the tree that has not terminated. Thus, forward
symbolic execution needs a strategy for choosing which state
to explore next. This choice is important, because loops with
symbolic conditions may never terminate. If an analysis tries
to explore such a loop in a na¨ıve manner, it might never
explore other branches in the state tree.
Loops can cause trees of inﬁnite depth. Thus, the handling
of loops are an integral component in the path-selection
strategy. For example, suppose n is input in:
. . . }
w h i l e ( 3n + 4n == 5n ) { n ++;
Exploring all paths in this program is infeasible. Although
we know mathematically there is no satisfying answer to the
branch guard other than 2, the forward symbolic execution
algorithm does not. The formula for one loop iteration will
include the branch guard 3n + 4n = 5n, the second iteration
will have the branch guard 3n+1 + 4n+1 = 5n+1, and so on.
Typically, forward symbolic execution will provide an upper
bound on loop iterations to consider in order to keep it from
getting “stuck” in such potentially inﬁnite or long-running
loops.
Approaches to the path selection problem include:
1) Depth-First Search. DFS employs the standard depth-
ﬁrst search algorithm on the state tree. The primary
disadvantage of DFS is that it can get stuck in non-
terminating loops with symbolic conditions if no max-
imum depth is speciﬁed. If this happens, then no other
branches will be explored and code coverage will be
low. KLEE [17] and EXE [19] can implement a DFS
search with a conﬁgurable maximum depth for cyclic
paths to prevent inﬁnite loops.
2) Concolic Testing. Concolic testing [29, 37, 57] uses
concrete execution to produce a trace of a program
execution. Forward symbolic execution then follows
the same path as the concrete execution. The analysis
can optionally generate concrete inputs that will force
the execution down another path by choosing a con-
ditional and negating the constraints corresponding to
that conditional statement.
Since forward symbolic execution can be magnitudes
slower than concrete execution, one variant of concolic
testing uses a single symbolic execution to generate
many concrete testing inputs. This search strategy is
called generational search [37].
3) Random Paths. A random path strategy is also im-
plemented by KLEE [17] where the forward symbolic
execution engine selects states by randomly traversing
the state tree from the root until it reaches a leaf node.
The random path strategy gives a higher weight to
shallow states. This prevents executions from getting
stuck in loops with symbolic conditions.
4) Heuristics. Additional heuristics can help select states
that are likely to reach uncovered code. Sample heuris-
tics include the distance from the current point of ex-
ecution to an uncovered instruction, and how recently
the state reached uncovered code in the past.
Symbolic Jumps. The premise of the GOTO rule requires the
address expression to evaluate to a concrete value, similar
to the LOAD and STORE rules. However, during forward
symbolic execution the jump target may be an expression
instead of a concrete location. We call this the symbolic
jump problem. One common cause of symbolic jumps are
jump tables, which are commonly used to implement switch
statements.
A signiﬁcant amount of previous work in forward sym-
bolic execution does not directly address the symbolic jump
problem [9, 17–19, 29, 36, 37, 57]. In some domains, such
as automated test-case generation, leaving symbolic jumps
out-of-scope simply means a lower success rate. In other
domains, such as in malware analysis, widespread use of
symbolic jumps would pose a challenge to current automated
malware reverse engineering [11, 12, 45].
Three standard ways to handle symbolic jumps are:
1) Use concrete and symbolic (concolic) analysis [57]
jump
to run the program and observe an indirect
target. Once the jump target is taken in the concrete
execution, we can perform symbolic execution of the
concrete path. One drawback is that it becomes more
difﬁcult to explore the full-state space of the program
because we only explore known jump targets. Thus,
code coverage can suffer.
2) Use a SMT solver. When we reach a symbolic jump
to e with path predicate Π, we can ask the SMT solver
for a satisfying answer to Π ∧ e. A satisfying answer
includes an assignment of values to variables in e,
which is a concrete jump target. If we are interested
in more satisfying answers, we add to the query to
return values different from those previously seen. For
example, if the ﬁrst satisfying answer is n, we query
for Π ∧ e ∧ ¬n. Although querying a SMT solver is a
perfectly valid solution, it may not be as efﬁcient as
other options that take advantage of program structure,
such as static analysis.
3) Use static analysis. Static analysis can reason about
the entire program to locate possible jump targets. In
practice, source-level indirect jump analyses typically
take the form of pointer analyses. Binary-level jump
static analyses reason about what values may be ref-
erenced in jump target expressions [4]. For example,
function pointer tables are typically implemented as a
table of possible jump targets.
Example 8. Consider the following program:
1
2
3
b y t e s
p := load ( f u n c t a b l e + b y t e s )
goto p
i n p u t (· )
:= g e t
Since functable is statically known, and the size
of the table is ﬁxed, a static analysis can determine
that the range of targets is load(f unctable+x) where
{x| 0 ≤ x ≤ k} and k is the size of the table.
Handling System and Library Calls. In concrete execu-
tion, system calls introduce input values to a program. Our
language models such calls as get input(·). We refer to calls
that are used as input sources as system-level calls. For
example, in a C program system-level calls may correspond
to calling library functions such as read. In a binary
program, system-level calls may correspond to issuing an
interrupt.
Some system-level calls introduce fresh symbolic vari-
ables. However, they can also have additional side effects.
For example, read returns fresh symbolic input and updates
an internal pointer to the current read ﬁle position. A
subsequent call to read should not return the same input.
One approach to handling system-level calls is to create
summaries of their side effects [13, 17, 19]. The summaries
are models that describe the side effects that occur whenever
the respective code is called concretely. The advantage
of summaries is that they can abstract only those details
necessary for the application domain at hand. However, they
typically need to be generated manually.
A different approach when using concolic execution [57]
is to use values returned from system calls on previous con-
crete executions in symbolic execution. For example, if dur-
ing a concrete execution sys_call() returns 10, we use
10 during forward symbolic execution of the corresponding
sys_call(). The central advantages of a concolic-based
approach is it is simple, easy to implement, and sidesteps
the problem of reasoning about how a program interacts with
its environment. Any analysis that uses concrete values will
not, by deﬁnition, provide a complete analysis with respect
to system calls. In addition, the analysis may not be sound,
as some calls do not always return the same result even
when given the same input. For example, gettimeofday
returns a different time for each call.
Performance. A straightforward implementation of forward
symbolic execution will lead to a) a running time exponential
in the number of program branches, b) an exponential
number of formulas, and c) an exponentially-sized formula
per branch.
The running time is exponential in the number of branches
because a new interpreter is forked off at each branch point.
The exponential number of formulas directly follows, as
there is a separate formula at each branch point.
Example 9. Consider the following program:
1
2
3
4
5
6
7
8
x := g e t
x := x + x
x := x + x
x := x + x
i f e then S1 e l s e S2
i f e2 then S3 e l s e S4
i f e3 then S5 e l s e S6
a s s e r t ( x < 10) ;
i n p u t (· )
Si are statements executed in the branches. There are 8
paths through this program, so there will be 8 runs of the
interpreter and 8 path predicates.
The size of a formula even for a single program path
may be exponential
in size due to substitution. During
both concrete and symbolic evaluation of an expression e,
we substitute all variables in e with their value. However,
unlike concrete evaluation,
the result of evaluating e is
not of constant size. Example 9 demonstrates the problem
with x. If during forward symbolic execution get input(·)
returns s, after executing the three assignments ∆ will map
x → s + s + s + s + s + s + s + s.
In practice, we can mitigate these problems in a number
of ways:
• Use more and faster hardware. Exploring multiple
paths and solving formulas for each path is inherently
parallelizable.
• Exponential blowup due to substitution can be handled
by giving each variable assignment a unique name, and
then using the name instead of performing substitution.
For example, the assignments to x can be written as:
x1 = x0 + x0 ∧ x2 = x1 + x1 ∧ x3 = x2 + x2
• Identify redundancies between formulas and make them
more compact. In the above example, the path predi-
cates for all formulas will include the ﬁrst four state-
ments. Bouncer [22] uses heuristics to identify com-
monalities in the formulas during signature generation.
Godefroid et al. [37] perform post hoc optimizations of
formulas to reduce their size.
• Identify independent subformulas. Cadar et al. identify
logically independent subformulas, and query each sub-
formula separately in EXE and KLEE [17, 19]. They
also implement caching on the SMT solver such that
if the same formula is queried multiple times they can
use the cached value instead of solving it again. For
example, all path predicates for Example 9 contain as
a preﬁx the assignments to x. If these assignments
are independent of other parts of the path predicate,
KLEE’s cache will solve the subformula once, and then
use the same returned value on the other 8 paths. Cadar
et al. found caching instrumental in scaling forward
symbolic execution [19].
• One alternative to forward symbolic execution is to use
the weakest precondition [27] to calculate the formula.
Formulas generated with weakest preconditions require
only O(n2) time and will be at most O(n2) in size,
for a program of size n [15, 31, 43]. Unlike forward
symbolic execution, weakest preconditions normally
process statements from last to ﬁrst. Thus, weakest
preconditions are implemented as a static analysis.
However, a recent algorithm for efﬁciently computing
the weakest precondition in any direction can be used
as a replacement for applications that build formulas
using symbolic execution [41]. The program must be
converted to dynamic single assignment form before
using this new algorithm.
Mixed Execution. Depending on the application domain
and the type of program, it may be appropriate to limit
symbolic input to only certain forms of input. For instance,
in automated test generation of a network daemon, it may
not make sense to consider the server conﬁguration ﬁle
symbolically — in many cases, a potential attacker will
not have access to this ﬁle. Instead, it is more important
to handle network packets symbolically, since these are the
primary interface of the program. Allowing some inputs to
be concrete and others symbolic is called mixed execution.
Our language can be extended to allow mixed execution
by concretizing the argument of the get input(·) expression,
e.g., get input(ﬁle), get input(network), etc.
Besides appropriately limiting the scope of the analysis,
mixed execution enables calculations involving concrete
values to be done on the processor. This allows portions
of the program that do not rely on user input to potentially
run at the speed of concrete execution.
V. RELATED WORK
A. Formalization and Systematization
The use of operational semantics to deﬁne dynamic
security mechanisms is not new [38, 46]. Other formal
mechanisms for deﬁning such policies exist as well [55].
Despite these tools, prior work has largely avoided formaliz-
ing dynamic taint analysis and forward symbolic execution.
Some analysis descriptions deﬁne a programming language
similar to ours, but only informally discuss the semantics
of the analyses [29, 36, 64]. Such informal descriptions of
semantics can lead to ambiguities in subtle corner cases.
B. Applications
In the remainder of this section, we discuss applications of
dynamic taint analysis and forward symbolic execution. Due
to the scope of related work, we cite the most representative
work.
Automatic Test-case Generation. Forward symbolic execu-
tion has been used extensively to achieve high code-coverage
in automatic test-case generation [17–19, 29, 36, 37, 57].
Many of these tools also automatically ﬁnd well-deﬁned
bugs, such as assertion errors, divisions by zero, NULL
pointer dereferences, etc.
Automatic Filter Generation. Intrusion prevention/detec-
tion systems use input ﬁlters to block inputs that trigger
known bugs and vulnerabilities. Recent work has shown
that forward symbolic execution path predicates can serve
as accurate input ﬁlters for such systems [13–15, 22, 23, 44,
47, 48].
Automatic Network Protocol Understanding. Dynamic
taint analysis has been used to automatically understand
the behavior of network protocols [16, 63] when given an
implementation of the protocol.
Malware Analysis. Automatic reverse-engineering tech-
niques for malware have used forward symbolic execu-
tion [11, 12, 45] and dynamic taint analysis [7, 8, 28, 58, 65]
to analyze malware behavior. Taint analysis has been used
to track when code unpacking is used in malware [65].
Web Applications. Many analyses of Web applications
utilize dynamic taint analysis to detect common attacks such
as SQL injections [5, 39, 40, 51, 56, 62] and cross-site