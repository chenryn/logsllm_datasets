1
shadow tls
最近看到v2ex上有⼈分享了⼀个有意思的技术 
https://v2ex.com/t/875975 
前⾔
2
简单来说，这个技术可以在tls握⼿阶段实现完全合法有效的与指定域名⽹站的握⼿，⽽后续的传输数据
阶段则是传输⾃身的恶意payload。 
这样我可以让tls握⼿阶段，SNI以及证书同步伪装，使得流量更加可信。 
对应的demo项⽬ https://github.com/ihciah/shadow-tls 
分析之前，先搞清楚tls的协议结构。 
1. tls分为两层，记录层和握⼿层，记录层只有⼀种记录协议；握⼿层有4种协议，Handshake、Alert、
ChangeCipherSpec、ApplicationData。 
2. 协议流程，握⼿阶段和数据传输阶段；握⼿阶段，常⽤到的握⼿层协议有Handshake、Alert、
ChangeCipherSpec，⽽数据传输阶段就是ApplicationData。 
先说下分层，如下图所示。
tls协议 
3
记录层的协议只有记录协议，⻓度5字节。 
记录层
4
记录协议负责在传输连接上交换的所有底层消息，并且可以配置加密。每⼀条 TLS 记录以⼀个短标头开
始。标头包含记录内容的类型 (或⼦协议)、协议版本和⻓度。原始消息经过分段 (或者合并)、压缩、添加
认证码、加密转为 TLS 记录的数据部分。
Content Type(1 bytes)：⽤于标识握⼿层协议类型 
Version(2 bytes)：tls版本信息 
Length(2 bytes)：握⼿层数据包⻓度 
PS: 简单来说，记录协议主要功能是对握⼿层进⾏数据压缩、加密、完整性保护等等。 
Content Type有4个值，参考go官⽅库说明如下，可以看到这些类型在上⾯数据包中也有记录 
Version 
●
●
●
type recordType uint8
const (
    recordTypeChangeCipherSpec recordType = 20
    recordTypeAlert            recordType = 21
    recordTypeHandshake        recordType = 22
    recordTypeApplicationData  recordType = 23
)
1
2
3
4
5
6
7
8
Go
复制代码
const (
    VersionTLS10 = 0x0301
    VersionTLS11 = 0x0302
    VersionTLS12 = 0x0303
    VersionTLS13 = 0x0304
    // Deprecated: SSLv3 is cryptographically broken, and is no longer
    // supported by this package. See golang.org/issue/32716.
    VersionSSL30 = 0x0300
)
1
2
3
4
5
6
7
8
9
10
Go
复制代码
5
Handshake 
Alert 
ApplicationData 
握⼿层
6
ChangeCipherSpec 
如果了解过tls协议，会知道tls分为握⼿阶段以及数据传输阶段。 
交互流程如下，握⼿阶段主要进⾏共享密钥⽣成以及身份认证，数据传输阶段就使⽤⽣成的共享密钥进
⾏加密传输。
数据包交互
7
数据包
8
代码实现层⾯
在通过tls封装后，write实际操作如下，会进⾏Handshake 
9
判断握⼿是否完成
10
未完成握⼿会调⽤握⼿函数，但这⾥可以看到只是⼀个函数签名，因为对于server和client的握⼿处理是
不⼀样的，需要传⼊不同的函数实现。
11
⽐如， clientHandshake ，会⽣成clientHello发送，并读取serverHello等⼀系列操作。 
12
根据上⾯的简单分析，握⼿阶段，服务端会返回⼀个Certificate包，包含了该服务端的tls证书，其中还
包含了证书链，这也是我们浏览器上能查看服务端证书的原因，并且可以根据证书链来校验证书合法
性。
分析
13
⽽数据传输阶段，数据包格式较为固定，均为Application Data，并且握⼿层⼀般是通过握⼿阶段协商好
的密钥进⾏加密传输的。
所以shadow tls的实现原理也就出来了。 
1. 握⼿阶段，服务端将客户端的请求转发到⼀个可信域名上，这样保证流量侧看到的服务端证书是⼀个
可信域名的证书
2. 等握⼿完成后，数据传输阶段，停⽌转发，客户端和服务端之间加密传输恶意payload即可。那么这
⾥就有⼀个疑问了，由于tls的防中间⼈攻击，使⽤的是⾮对称算法进⾏握⼿协商出共享密钥，我的
服务端是拿不到的，其实这个⽆所谓，我看不到，中间设备也同样看不到，那么我的客户端和服务端
⽤⼀个假的密钥加密数据伪造⼀个Application Data进⾏传输，在中间设备看起来也是完全正常的。 
实现
14
原理就这么简单，实现的话，只需要注意⼀下握⼿结束的标识，将转发模式切换成恶意payload通信模式
即可，我这⾥选择的是判断接收到第⼀个application data协议的包，则切换模式。 
编写前，review了下官⽅tls库，写的针不戳，这⾥参考他的写法，也是将普通conn封装⼀层。 
同样，握⼿也是在write和read时，先判断是否完成握⼿，未完成则先进⾏握⼿。 
完成的话，write就构造application data，格式如下；read就读取后，解密数据，key⽬前暂时写死，后
续考虑⼀些其他协商⽅式。
client 
type(1) + version(2) + len(2) + encryptData
1
Go
复制代码
15
因为主要功能是在于服务端转发和切换模式，⽽客户端握⼿就相对简单了，将conn封装
到 tls.Client 中，然后调⽤  Handshake() ，即可发送握⼿，⽽这⾥有个⼩trick，封装后的  tlsC
onn ，只进⾏握⼿，⽽数据通信还是使⽤原来的conn，这样就不会受tlsConn⾃身协商的算法以及key限
制了。
16
server端代码如下，先和可信域名建⽴⼀个tcp连接，然后起⼀个goroutine，等待可信域名响应数据，写
⼊客户端连接。
再⼀个循环等待读取conn连接，将他写⼊到可信域名连接⾥，⼀旦判断到ContentType是
ApplicationData则退出循环，表明握⼿结束。 
server 
17
// 服务端初始化
func (c *ShadowTLSConn) serverHandshake() error {
defer c.conn.SetReadDeadline(time.Time{})
shadowDomainConn, err := net.DialTimeout("tcp", fmt.Sprintf("%s:%s", c
.domain, c.domainPort), 10*time.Second)
if err != nil {
return err
}
defer shadowDomainConn.Close()
handshakeOver := make(chan bool)
// 接收服务端数据，转发到客户端
shadowInput := new(bytes.Buffer)
go func() {
for {
select {
case <-handshakeOver:
return
default:
}
shadowDomainConn.SetReadDeadline(time.Now().Add(5 * time.Secon
d))
data, err1 := c.read(shadowInput, shadowDomainConn)
if err1 != nil {
return
}
//time.Sleep(10 * time.Millisecond)
_, err1 = c.conn.Write(data)
if err1 != nil {
return
}
}
}()
// 接收客户端的数据，转发到真实服务端
for {
c.conn.SetReadDeadline(time.Now().Add(5 * time.Second))
data, err1 := c.read(&c.rawInput, c.conn)
if err1 != nil {
c.conn.Close()
return err1
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
Go
复制代码
18
过程看起来很简单，但测试发现读取tls数据时⽼是出问题，暂时不得⽽知原因，正常来说根据tls数据包
格式，先读取5字节，然后根据⻓度字段再继续读取剩余部分，应该正常。 
最后还是参考了官⽅tls库的⽅法，通过⼀个  bytes.Buffer 从  conn 中读取数据,应该是  atLeastR
eader 的实现⽐较巧妙吧。 
if recordType(data[0]) == recordTypeApplicationData {
c.version = data[1:3]
close(handshakeOver)
break
}
_, err1 = shadowDomainConn.Write(data)
if err1 != nil {
c.conn.Close()
return err1
}
}
return nil
}
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
19
封装好库，测试代码也就很简单了
测试
20
数据包，握⼿阶段转发可信域名，后续application data⽤固定密钥加密伪造 
在9995端⼝监听，可以看到客户端通过该端⼝可以正常上线，⽽通过浏览器访问，会返回可信域名的⻚
⾯（这⾥是做了⼀个伪装，区分了下上线流量和浏览器访问流量，增加迷惑性），并且证书还是有效
的。
PS: 这⾥绑定host，是为了更直观证书的有效性，不绑定也不会有区别，只是IP访问⽆法直观看到证书有
效性。
21
这样在原来的SNI欺骗之上，增加了可信域名证书，让通信流量更加趋于正常。 
参考
TLS 详解
传输层安全协议TLS——协议解析_怿星科技的博客-CSDN博客_传输层安全协议