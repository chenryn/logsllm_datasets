# 三、保护和强化 Linux 内核
在本章中，我们将把注意力转向保护和强化 Docker 主机上运行的每个容器所依赖的一个关键部分:Linux 内核。我们将集中讨论两个主题:可以遵循来强化 Linux 内核的指南，以及可以添加到您的库中来帮助强化 Linux 内核的工具。在深入学习之前，让我们先简单了解一下本章的内容:
*   Linux 内核强化指南
*   Linux 内核强化工具
    *   **Grsecurity**
    *   lynis
# Linux 内核强化指南
在这一节中，我们将查看针对 Linux 内核的 SANS 协会强化指南。虽然这些信息中有很多已经过时了，但我相信对您来说，了解 Linux 内核是如何演变并成为一个安全实体的非常重要。如果你走进一台时间机器，回到 2003 年，试图做你今天想做的事情，这就是你必须做的一切。
首先，一些关于 SANS 研究所的背景信息。这是一家总部位于美国的私营公司，专门从事网络安全和信息技术相关的培训和教育。这些培训使专业人员做好准备来保护他们的环境免受攻击者的攻击。SANS 还通过其 SANS 技术研究所领导实验室提供各种免费的安全相关内容。更多信息可以在[http://www.sans.edu/research/leadership-laboratory](http://www.sans.edu/research/leadership-laboratory)找到。
为了帮助缓解这种广泛的攻击基础，需要在您的信息技术基础设施和软件的每个方面都关注安全性。基于此，首先要从 Linux 内核开始。
## SANS 硬化引导深潜
由于我们已经介绍了 SANS 研究所的背景，让我们继续进入我们将遵循的指南，以保护我们的 Linux 内核。
作为参考，我们将使用以下网址并强调您应该关注并在您的环境中实施的关键点，以保护 Linux 内核:
[https://www . sans . org/阅览室/白皮书/Linux/Linux-内核-硬化-1294](https://www.sans.org/reading-room/whitepapers/linux/linux-kernel-hardening-1294)
Linux 内核是 Linux 生态系统中一个不断发展和成熟的部分，因此，牢牢掌握 Linux 内核的现状非常重要，这将有助于锁定未来版本中可能出现的新特性集。
Linux 内核允许加载模块，而无需重新编译或重启，这在您希望消除停机时间时非常有用。当尝试将更新应用到某个操作系统/应用标准时，一些不同的操作系统需要重新启动。对于 Linux 内核来说，这也可能是一件坏事，因为攻击者可以将有害物质注入内核，而不需要重启机器，这可能会被注意到系统重启的人发现。因此，建议禁用带有加载选项的静态编译内核，以帮助防止攻击媒介。
缓冲区溢出是攻击者危害内核并获取入口的另一种方式。应用对用户可以在内存中存储的内容有一个限制或缓冲区。攻击者通过巧尽心思构建的代码溢出缓冲区，这可能会让攻击者获得对系统的控制，进而使他们能够在那时做任何他们想做的事情。他们可以给系统增加后门，将日志发送到邪恶的地方，给系统增加额外的用户，甚至把你锁在系统之外。为了防止这种类型的攻击，该指南重点关注三个方面。
第一个是**开放墙** Linux 内核补丁，它是为解决这个问题而创建的补丁。此修补程序还包括一些可能与您的运行环境相关的其他安全增强功能。其中一些项目包括`/tmp`文件夹位置中的受限链接和文件读/写，以及对文件系统上`/proc`位置的受限访问。它还包括对您可以控制的许多用户进程的增强实施，以及销毁未使用的共享内存段的能力，最后，还包括对运行比 2.4 版本旧的内核版本的用户的一些其他增强。
如果你正在运行一个旧版本的 Linux 内核，你会想要在[http://www.openwall.com/Owl/](http://www.openwall.com/Owl/)和 http://www.openwall.com/linux/查看 Openwall 加固版 Linux。
下一个软件叫做 **Exec** **Shield** ，它采用了类似于 Openwall Linux 内核补丁的方法，实现了一个不可执行的栈，但是 Exec Shield 通过试图保护虚拟内存的任何和所有部分来扩展这一点。该补丁仅限于防止对 Linux 内核地址空间的攻击。这些地址空间包括栈、缓冲区或函数指针溢出空间。
更多关于这个补丁的信息可以在[https://en.wikipedia.org/wiki/Exec_Shield](https://en.wikipedia.org/wiki/Exec_Shield)找到。
最后一个是 **PaX** ，它是一个为 Linux 内核创建补丁以防止各种软件漏洞的团队。由于这是我们将在下一节深入讨论的内容，我们将只讨论它的一些特性。该补丁侧重于以下三个地址空间:
*   **PAGEEXEC** :这些是基于分页的，不可执行的页面
*   **SEGMEXEC** :这些是基于分段的、不可执行的页面
*   **MPROTECT** :这是`mmap()`和`mprotect()`的限制
要了解更多关于 PaX 的信息，请访问[https://pax.grsecurity.net](https://pax.grsecurity.net)。
既然您已经看到了自己付出了多大的努力，那么您应该很高兴安全性现在是每个人的首要任务，尤其是 Linux 内核。在后面的一些章节中，我们将了解以下一些用于帮助保护环境的新技术:
*   命名空间
*   cggroups
*   衬衫
*   召唤
还有很多功能可以通过`docker run`命令上的`--cap-ad and --cap-drop`开关来完成。
即使像前几天一样，您仍然需要意识到这样一个事实，即内核在主机上的所有容器中是共享的，因此，您需要保护这个内核，并在必要时注意漏洞。以下链接允许您查看 Linux 内核中的**常见** **漏洞和** **暴露** ( **CVE** ):
[https://www . cvedetails . com/漏洞列表/vendor _ id-33/product _ id-47/cvssscormin-7/cvssscormax-7.99/Linux-Linux-kernel . html](https://www.cvedetails.com/vulnerability-list/vendor_id-33/product_id-47/cvssscoremin-7/cvssscoremax-7.99/Linux-Linux-Kernel.html)
## 访问控制
有种不同级别的访问控制，你可以在 Linux 之上分层，以及你应该遵循的关于某些用户的建议，这些将是你系统上的超级用户。只是为了给超级用户下一个定义，他们是系统中可以无拘无束地做任何事情的帐户。在对这些访问控制进行分层时，应该包括根用户。
这些访问控制建议如下:
*   限制根用户的使用
*   Restricting its ability to SSH
    默认情况下，在某些系统上，如果启用了 SSH，root 可以对机器进行 SSH，我们可以从某些 Linux 系统上的部分`/etc/ssh/sshd_config`文件中看到这一点，如下所示:
    ```
    # Authentication:
    #LoginGraceTime 2m
    #PermitRootLogin no
    #StrictModes yes
    #MaxAuthTries 6
    #MaxSessions 10
    ```
    从这里可以看到，`PermitRootLogin no`的部分用`#`符号注释掉了，这意味着这条线不会被解释。要进行更改，只需移除`#`符号并保存文件，然后重新启动服务。这个文件的部分现在应该类似于下面的代码:
    ```
    # Authentication:
    #LoginGraceTime 2m
    PermitRootLogin no
    #StrictModes yes
    #MaxAuthTries 6
    #MaxSessions 10
    ```
    现在，您可能希望重新启动 SSH 服务以使这些更改生效，如下所示:
    ```
    $ sudo service sshd restart
    ```
*   Restrict its ability to log in beyond the console. On most Linux systems, there is a file in `/etc/default/login` and in that file, there is a line that is similar to the following:
    ```