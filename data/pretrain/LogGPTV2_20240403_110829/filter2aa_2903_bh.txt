上面的信息表示此时尚不能设置硬件断点，原因是系统此时正在以
APC（Asynchronous Procedure Calls）（IRQL为1）方式执行新进程的用
户态初始化工作，此时使用的是一个特殊的初始化上下文。这个过程结
束后，系统才会切换到新线程（新进程的初始线程）自己的上下文，以
普通方式（IRQL为0）执行新的线程。因为硬件断点所依赖的调试寄存
器设置是保存在线程上下文中的，所以WinDBG提示我们先执行到程序
的入口，然后再设置硬件断点，以防设置的断点信息丢失。实践中，大
家可以通过对main函数或者WinMain函数设置软件断点让程序运行到入
口函数，停下来后再设置硬件断点。如果希望在main函数之前就设置硬
件断点，比如调试全局变量或者静态变量的初始化时就需要这样，那么
可以对系统的线程启动函数设置断点，比如ntdll!RtlUserThreadStart（有
时这个函数的符号名可能多一个下画线，即_RtlUserThreadStart），或
者kernel32!BaseThreadInitThunk。
因为HiInt3程序的main函数开始处已经有一条INT 3指令了（这等同
于一个软件断点），所以我们直接按F5快捷键让程序继续执行。待断点
如期命中后，在0042201c附近设置如下3个硬件断点：
0:000> ba w1 0042201c
0:000> ba r2 0042201e
0:000> ba r1 0042201f
设置以上断点后立刻观察调试寄存器：
0:000> r dr0,dr1,dr2,dr3,dr6,dr7
dr0=00000000 dr1=00000000 dr2=00000000 dr3=00000000 dr6=00000000 dr7=00000
000
可见，这时这些断点尚未设置到调试寄存器中，因为调试器是在恢
复被调试程序执行时才把这些寄存器通过线程的上下文设置到CPU的寄
存器中的。但使用WinDBG的列断点命令，可以看到已经设置的断点：
0:000> bl
 0 e 0042201c w 1 0001 (0001)  0:**** HiInt3!'string'
 1 e 0042201e r 2 0001 (0001)  0:**** HiInt3!'string'+0x2
 2 e 0042201f r 1 0001 (0001)  0:**** HiInt3!'string'+0x3
按F5快捷键让程序执行，断点1会先命中：
Breakpoint 1 hit
eax=0042201e ebx=7ffdd000 ecx=0012fc6c edx=0012fcd0 esi=0159f764 edi=0012f
f80
eip=004014f9 esp=0012fc48 ebp=0012fefc iopl=0         nv up ei pl nz ac pe
 nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000
216
HiInt3!_output+0x29:
004014f9 884dd8          mov     byte ptr [ebp-28h],cl      ss:0023:0012fe
d4=65
使用kp命令显示栈回溯信息，可以看到当前在执行_output 函数，
它是被printf函数所调用的：
0:000> kp
ChildEBP RetAddr  
0012fefc 004010bb    HiInt3!_output+0x29 [output.c @ 371]
0012ff28 00401033    HiInt3!printf+0x5b [printf.c @ 60]
0012ff80 00401209    HiInt3!main+0x23 [C:\...\code\chap04\HiInt3\HiInt3.cp
p @ 11]
0012ffc0 7c816ff7    HiInt3!mainCRTStartup+0xe9 [crt0.c @ 206]
0012fff0 00000000    kernel32!BaseProcessStart+0x23
观察程序指针的值eip=004014f 9，需要注意的是，这并非触发断点
的指令。因为数据访问断点是陷阱类断点，所以当断点命中时，触发断
点的指令已经执行完毕，程序指针指向的是下一条指令的地址。可以使
用ub 004014f9 l2命令来观察前面的两条指令：
0:000> ub 004014f9 l2
HiInt3!_output+0x24 [output.c @ 371]:
004014f4 8b450c          mov     eax,dword ptr [ebp+0Ch]
004014f7 8a08            mov     cl,byte ptr [eax]
可见，当前程序指针的前一条指令是mov cl,byte ptr [eax]，其含义
是将EAX寄存器的值所指向的一个字节赋给CL寄存器（ECX寄存器的
最低字节）。EAX的值是0042201e，因此这条指令是从内存地址
0042201e读取一个字节赋给CL的，这正好符合断点1的条件。
此时观察调试寄存器的内容：
0:000> r dr0,dr1,dr2,dr3,dr6,dr7
dr0=0042201c dr1=0042201e dr2=0042201f dr3=00000000 dr6=ffff0ff2 dr7=03710
515
可以看到DR0～DR2存放的是3个断点的地址。DR3还没有使用。为
了便于观察，我们把DR6和DR7寄存器的各个位域和取值画在图4-5中。
图4-5 观察DR6和DR7寄存器的值
DR6的位1为1，表明断点1命中。DR7的R/W0为01，表明断点0的访
问类型为写。R/W1和R/W2为11，表明断点1和断点2的访问类型为读写
都命中。LEN1等于01，表明2字节访问。LEN0和LEN2等于00，表明是
1字节访问。
按F5快捷键继续执行，WinDBG会显示断点1和断点2都命中：
0:000> g
Breakpoint 1 hit
Breakpoint 2 hit
eax=0042201f ebx=7ffdd000 ecx=0012fc6c edx=0012fcd0 esi=7c9118f1 edi=0012f
f80
eip=004014f9 esp=0012fc48 ebp=0012fefc iopl=0        nv up ei pl nz ac pe 
nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000           efl=0000021
6
HiInt3!_output+0x29:
004014f9 884dd8          mov     byte ptr [ebp-28h],cl    ss:0023:0012fed4
=6c
EIP的指针与刚才的相同，因此触发断点的指令与刚才的一样，表
明程序在循环执行。从EAX的值可以看到，这次访问的内存地址是
0042201f，这刚好落入断点1定义范围的第二个字节，断点2定义范围的
第一个字节。再观察调试寄存器：
0:000> r dr0,dr1,dr2,dr3,dr6,dr7
dr0=0042201c dr1=0042201e dr2=0042201f dr3=00000000 dr6=ffff0ff6 dr7=03710
515
这次DR6的位2和位1都为1，表明断点2和断点1都命中了。
4.2.8 硬件断点的设置方法
只有在实模式或保护模式的内核优先级（ring 0）下才能访问调试
寄存器，否则便会导致保护性异常。这是出于安全性的考虑。那么，像
Visual Studio 2005（VS2005）这样的用户态调试器是如何设置硬件断点
的呢？答案是通过访问线程的上下文（CONTEXT）数据来间接访问调
试寄存器。CONTEXT结构用来保存线程的执行状态，在多任务系统
中，操作系统通过让多个任务轮换运行来使多个程序同时运行。当一个
线程被挂起时，包括通用寄存器值在内的线程上下文信息会被保存起
来，当该线程恢复执行时，保存的内容又会被恢复到寄存器中。清单4-
4显示了当使用VS2005调试本地的C++程序时，VS2005调用
SetThreadContext API来设置调试寄存器的函数调用过程（栈回溯）。
清单4-4 VS2005的本地调试器设置调试寄存器的过程
0:026> kn 100
 # ChildEBP RetAddr  
00 07bee11c 5be24076 kernel32!SetThreadContext      // 调用系统API设置线程上
下文
01 07bee128 5be96b9c NatDbgDE!Win32Debugger::RawSetThreadContext+0x2e   
02 07bee410 5be96166 NatDbgDE!SetupDebugRegister+0x14f   
03 07bee42c 5be5e5a7 NatDbgDE!DrSetupDebugRegister+0x2a     // 设置调试寄存
器
04 07bee44c 5be1d63d NatDbgDE!_HPRCX::SetupDataBps+0x5b     // 设置数据断点
05 07bee45c 5be1e7f6 NatDbgDE!AddQueue+0x82
06 07bee474 5be27635 NatDbgDE!_HPRCX::ContinueThread+0x3d
07 07bee4a8 5be2b694 NatDbgDE!SetupSingleStep+0x94       // 设置单步标志
08 07bee4ec 5be2b701 NatDbgDE!StepOverBpAtPC+0xfb        // 单步越过断点，
见下文
09 07bee570 5be35eee NatDbgDE!ReturnStepEx+0x196   
0a 07bee5cc 5be25f3b NatDbgDE!PushRunningThread+0x93
0b 07beea10 5be25f7f NatDbgDE!ProcessContinueCmd+0x103  // 处理继续运行命令
0c 07beea34 5be12fa2 NatDbgDE!DMLib::DMFunc+0x149       // DM层的分发函数
0d 07beea44 5be124e9 NatDbgDE!TLClientLib::Local_TLFunc+0x8c
                                                        // 转给本地的传输层
函数
0e 07beea68 5be12510 NatDbgDE!CallTL+0x33               // 调用传输层
0f 07beea88 5be126c2 NatDbgDE!EMCallBackTL+0x18
10 07beeab0 5be25e83 NatDbgDE!SendRequestX+0x7d
11 07beeae0 5be25e34 NatDbgDE!Go+0x4a                   // 执行Go命令
12 07bef7dc 5be12496 NatDbgDE!EMFunc+0x53b              // EM层的分发函数
13 07bef804 5be25e19 NatDbgDE!CallEM+0x20               // 调用EM（执行模型
）层
14 07bef840 5be2603f NatDbgDE!CNativeThread::Go+0x57    // 执行Go命令
15 07bef85c 5be26081 NatDbgDE!CDebugProgram::ExecuteEx+0x66   // 命令解析和
分发
16 07bef864 77e7a1ac NatDbgDE!CDebugProgram::Execute+0xd
…   // 省略多行
从上面的栈回溯可以清楚地看到，VS2005的本地调试引擎
（NatDbgDE）执行命令（Go）的过程，从EM（Execution Model）层到
传输层（Transport Layer），再到DM（Debugge Module）层。最后由
DM层调用SetThreadContext API将调试寄存器设置到线程上下文结构
中。我们将在本书后续分卷中介绍Visual Studio调试器的分层模型和各
个层的细节。
下面通过一个C++例子来演示如何手工设置数据访问断点。清单4-5
列出了这个小程序（DataBp）的源代码。
清单4-5 DataBp程序的源代码
1    // DataBP.cpp :演示如何手工设置数据访问断点
2    // Raymond Zhang Jan. 2006
3    //
4    
5    #include "stdafx.h"
6    #include 
7    #include 
8    
9    int main(int argc, char* argv[])
10   {
11      CONTEXT cxt;
12      HANDLE hThread=GetCurrentThread();
13      DWORD dwTestVar=0;
14    
15      if(!IsDebuggerPresent())
16      {
17         printf("This sample can only run within a debugger.\n");
18         return E_FAIL;
19      }
20      cxt.ContextFlags=CONTEXT_DEBUG_REGISTERS|CONTEXT_FULL;
21      if(!GetThreadContext(hThread,&cxt))
22      {
23         printf("Failed to get thread context.\n");
24         return E_FAIL;
25      }
26      cxt.Dr0=(DWORD) &dwTestVar;
27      cxt.Dr7=0xF0001;//4 bytes length read& write breakponits
28      if(!SetThreadContext(hThread,&cxt))
29      {
30         printf("Failed to set thread context.\n");
31         return E_FAIL;
32      }
33    
34      dwTestVar=1;
35      GetThreadContext(hThread,&cxt);
36      printf("Break into debuger with DR6=%X.\n",cxt.Dr6);
37   
38      return S_OK;
39   }
第11行和第12行读取当前线程的CONTEXT结构，其中包含了线程
的通用寄存器和调试寄存器信息。第15行检测当前程序是否正在被调
试，如果不是正在被调试，那么当断点被触发时便会导致异常错误。第
26行是将内存地址放入DR0寄存器。第27行是设置DR7寄存器，F代表4
字节读写访问；01代表启用DR0断点。第28行通过SetThreadContext()
API使寄存器设置生效。第34行尝试修改内存数据以触发断点。
在VC6下运行该程序（不设置任何软件断点），会发现VC6停在
dwTestVar=1的下一行。为什么会停在下一行而不是访问数据这一行
呢？正如我们前面所介绍的，这是因为数据访问断点导致的调试异常是
一种陷阱类异常，当该类异常发生时，触发该异常的指令已经执行完
毕。与此类似，INT 3指令导致的断点异常也属于陷阱类异常。但是通