The time at which the user was authenticated as seconds 
from the UNIX epoch.
nonce
Anti-replay nonce
A unique random value that the client sends in the authen-
tication request. The client should verify that the same 
value is included in the ID token to prevent replay attacks—
see section 7.6.2 for details.
acr
Authentication context 
Class Reference
Indicates the overall strength of the user authentication 
performed. This is a string and specific values are defined 
by the OP or by other standards.
amr
Authentication Methods 
References
An array of strings indicating the specific methods used. 
For example, it might contain ["password", "otp"] to 
indicate that the user supplied a password and a one-time 
password.
263
OpenID Connect
7.6.2
Hardening OIDC
While an ID token is protected against tampering by the cryptographic signature,
there are still several possible attacks when an ID token is passed back to the client in
the URL from the authorization endpoint in either the implicit or hybrid flows:
 The ID token might be stolen by a malicious script running in the same browser,
or it might leak in server access logs or the HTTP Referer header. Although an
ID token does not grant access to any API, it may contain personal or sensitive
information about the user that should be protected.
 An attacker may be able to capture an ID token from a legitimate login
attempt and then replay it later to attempt to login as a different user. A cryp-
tographic signature guarantees only that the ID token was issued by the cor-
rect OP but does not by itself guarantee that it was issued in response to this
specific request.
The simplest defense against these attacks is to use the authorization code flow with
PKCE as recommended for all OAuth2 flows. In this case the ID token is only issued
by the OP from the token endpoint in response to a direct HTTPS request from the
client. If you decide to use a hybrid flow to receive an ID token directly in the redirect
back from the authorization endpoint, then OIDC includes several protections that
can be employed to harden the flow:
 The client can include a random nonce parameter in the request and verify that
the same nonce is included in the ID token that is received in response. This
prevents replay attacks as the nonce in a replayed ID token will not match the
fresh value sent in the new request. The nonce should be randomly generated
and stored on the client just like the OAuth state parameter and the PKCE
code_challenge. (Note that the nonce parameter is unrelated to a nonce used
in encryption as covered in chapter 6.)
 The client can request that the ID token is encrypted using a public key sup-
plied during registration or using AES encryption with a key derived from the
client secret. This prevents sensitive personal information being exposed if the
ID token is intercepted. Encryption alone does not prevent replay attacks, so an
OIDC nonce should still be used in this case.
 The ID token can include c_hash and at_hash claims that contain crypto-
graphic hashes of the authorization code and access token associated with a
request. The client can compare these to the actual authorization code and
access token it receives to make sure that they match. Together with the nonce
and cryptographic signature, this effectively prevents an attacker swapping the
authorization code or access token in the redirect URL when using the hybrid
or implicit flows.
TIP
You can use the same random value for the OAuth state and OIDC
nonce parameters to avoid having to generate and store both on the client.
264
CHAPTER 7
OAuth2 and OpenID Connect
The additional protections provided by OIDC can mitigate many of the problems with
the implicit grant. But they come at a cost of increased complexity compared with the
authorization code grant with PKCE, because the client must perform several com-
plex cryptographic operations and check many details of the ID token during valida-
tion. With the auth code flow and PKCE, the checks are performed by the OP when
the code is exchanged for access and ID tokens.
7.6.3
Passing an ID token to an API
Given that an ID token is a JWT and is intended to authenticate a user, it’s tempting to
use them for authenticating users to your API. This can be a convenient pattern for
first-party clients, because the ID token can be used directly as a stateless session
token. For example, the Natter web UI could use OIDC to authenticate a user and
then store the ID token as a cookie or in local storage. The Natter API would then be
configured to accept the ID token as a JWT, verifying it with the public key from the
OP. An ID token is not appropriate as a replacement for access tokens when dealing
with third-party clients for the following reasons:
 ID tokens are not scoped, and the user is asked only for consent for the client to
access their identity information. If the ID token can be used to access APIs
then any client with an ID token can act as if they are the user without any
restrictions.
 An ID token authenticates a user to the client and is not intended to be used by
that client to access an API. For example, imagine if Google allowed access to its
APIs based on an ID token. In that case, any website that allowed its users to log
in with their Google account (using OIDC) would then be able to replay the ID
token back to Google’s own APIs to access the user’s data without their consent.
 To prevent these kinds of attacks, an ID token has an audience claim that only
lists the client. An API should reject any JWT that does not list that API in the
audience.
 If you’re using the implicit or hybrid flows, then the ID token is exposed in the
URL during the redirect back from the OP. When an ID token is used for access
control, this has the same risks as including an access token in the URL as the
token may leak or be stolen.
You should therefore not use ID tokens to grant access to an API.
NOTE
Never use ID tokens for access control for third-party clients. Use
access tokens for access and ID tokens for identity. ID tokens are like user-
names; access tokens are like passwords.
Although you shouldn’t use an ID token to allow access to an API, you may need to
look up identity information about a user while processing an API request or need to
enforce specific authentication requirements. For example, an API for initiating
financial transactions may want assurance that the user has been freshly authenticated
265
OpenID Connect
using a strong authentication mechanism. Although this information can be returned
from a token introspection request, this is not always supported by all authorization
server software. OIDC ID tokens provide a standard token format to verify these
requirements. In this case, you may want to let the client pass in a signed ID token that
it has obtained from a trusted OP. When this is allowed, the API should accept the ID
token only in addition to a normal access token and make all access control decisions
based on the access token. 
 When the API needs to access claims in the ID token, it should first verify that it’s
from a trusted OP by validating the signature and issuer claims. It should also ensure
that the subject of the ID token exactly matches the resource owner of the access
token or that there is some other trust relationship between them. Ideally, the API
should then ensure that its own identifier is in the audience of the ID token and that
the client’s identifier is the authorized party (azp claim), but not all OP software sup-
ports setting these values correctly in this case. Listing 7.13 shows an example of vali-
dating the claims in an ID token against those in an access token that has already been
used to authenticate the request. Refer to the SignedJwtAccessToken store for details
on configuring the JWT verifier.
var idToken = request.headers("X-ID-Token");    
var claims = verifier.process(idToken, null);   
if (!expectedIssuer.equals(claims.getIssuer())) {          
    throw new IllegalArgumentException(                    
            "invalid id token issuer");                    
}
if (!claims.getAudience().contains(expectedAudience)) {    
    throw new IllegalArgumentException(                    
            "invalid id token audience");                  
}
var client = request.attribute("client_id");                  
var azp = claims.getStringClaim("azp");                       
if (client != null && azp != null && !azp.equals(client)) {   
    throw new IllegalArgumentException(                       
            "client is not authorized party");                
}
var subject = request.attribute("subject");       
if (!subject.equals(claims.getSubject())) {       
    throw new IllegalArgumentException(           
            "subject does not match id token");   
}
request.attribute("id_token.claims", claims);    
Listing 7.13
Validating an ID token
Extract the ID token 
from the request and 
verify the signature.
Ensure the token 
is from a trusted 
issuer and that this 
API is the intended 
audience.
If the ID token has an 
azp claim, then ensure 
it’s for the same client 
that is calling the API.
Check that the subject of 
the ID token matches the 
resource owner of the 
access token.
Store the verified ID token 
claims in the request attributes 
for further processing.
266
CHAPTER 7
OAuth2 and OpenID Connect
Answers to pop quiz questions
1
d and e. Whether scopes or permissions are more fine-grained varies from case
to case.
2
a and e. The implicit grant is discouraged because of the risk of access tokens
being stolen. The ROPC grant is discouraged because the client learns the
user’s password.
3
a. Mobile apps should be public clients because any credentials embedded in
the app download can be easily extracted by users.
4
a. Claimed HTTPS URIs are more secure.
5
True. PKCE provides security benefits in all cases and should always be used.
6
d.
7
c.
8
a. The public key is used to validate a signature.
Summary
 Scoped tokens allow clients to be given access to some parts of your API but not
others, allowing users to delegate limited access to third-party apps and services.
 The OAuth2 standard provides a framework for third-party clients to register
with your API and negotiate access with user consent.
 All user-facing API clients should use the authorization code grant with PKCE
to obtain access tokens, whether they are traditional web apps, SPAs, mobile
apps, or desktop apps. The implicit grant should no longer be used.
 The standard token introspection endpoint can be used to validate an access
token, or JWT-based access tokens can be used to reduce network roundtrips.
Refresh tokens can be used to keep token lifetimes short without disrupting the
user experience.
 The OpenID Connect standard builds on top of OAuth2, providing a compre-
hensive framework for offloading user authentication to a dedicated service.
ID tokens can be used for user identification but should be avoided for access
control.
267
Identity-based
access control
As Natter has grown, the number of access control list (ACL; chapter 3) entries has
grown too. ACLs are simple, but as the number of users and objects that can be
accessed through an API grows, the number of ACL entries grows along with them.
If you have a million users and a million objects, then in the worst case you could
end up with a billion ACL entries listing the individual permissions of each user for
each object. Though that approach can work with fewer users, it becomes more of a
problem as the user base grows. This problem is particularly bad if permissions are
centrally managed by a system administrator (mandatory access control, or MAC, as
discussed in chapter 7), rather than determined by individual users (discretionary
access control, or DAC). If permissions are not removed when no longer required,
This chapter covers
 Organizing users into groups
 Simplifying permissions with role-based access 
control
 Implementing more complex policies with 
attribute-based access control
 Centralizing policy management with a policy 
engine
268
CHAPTER 8
Identity-based access control
users can end up accumulating privileges, violating the principle of least privilege. In
this chapter you’ll learn about alternative ways of organizing permissions in the identity-
based access control model. In chapter 9, we’ll look at alternative non-identity-based
access control models.
DEFINITION
Identity-based access control (IBAC) determines what you can do
based on who you are. The user performing an API request is first authenti-
cated and then a check is performed to see if that user is authorized to per-
form the requested action.
8.1
Users and groups
One of the most common approaches to simplifying permission management is to
collect related users into groups, as shown in figure 8.1. Rather than the subject of an
access control decision always being an individual user, groups allow permissions to be
assigned to collections of users. There is a many-to-many relationship between users
and groups: a group can have many members, and a user can belong to many groups.
If the membership of a group is defined in terms of subjects (which may be either
users or other groups), then it is also possible to have groups be members of other
groups, creating a hierarchical structure. For example, you might define a group for
employees and another one for customers. If you then add a new group for project
managers, you could add this group to the employees’ group: all project managers are
employees.
Subject
User
Group
Member
A subject is either an
individual user or a group.
The members of a group are
subjects and so can themselves
be other groups.
A group can have many members,
and a subject can be in many groups,
so it is a many-to-many relationship.
Figure 8.1
Groups are added as a new type of subject. Permissions can then 
be assigned to individual users or to groups. A user can be a member of many 
groups and each group can have many members.
269
Users and groups
The advantage of groups is that you can now assign permissions to groups and be sure
that all members of that group have consistent permissions. When a new software
engineer joins your organization, you can simply add them to the “software engi-
neers” group rather than having to remember all the individual permissions that they
need to get their job done. And when they change jobs, you simply remove them from
that group and add them to a new one.
The implementation of simple groups is straightforward. Currently in the Natter API
you have written, there is a users table and a permissions table that acts as an ACL
linking users to permissions within a space. To add groups, you could first add a new
table to indicate which users are members of which groups:
CREATE TABLE group_members(
    group_id VARCHAR(30) NOT NULL,
    user_id VARCHAR(30) NOT NULL REFERENCES users(user_id));
CREATE INDEX group_member_user_idx ON group_members(user_id);
When the user authenticates, you can then look up the groups that user is a member
of and add them as an additional request attribute that can be viewed by other pro-
cesses. Listing 8.1 shows how groups could be looked up in the authenticate()
method in UserController after the user has successfully authenticated.
    if (hash.isPresent() && SCryptUtil.check(password, hash.get())) {
        request.attribute("subject", username);
        var groups = database.findAll(String.class,           
            "SELECT DISTINCT group_id FROM group_members " +  
                    "WHERE user_id = ?", username);           
        request.attribute("groups", groups);    
    }
You can then either change the permissions table to allow either a user or group ID
to be used (dropping the foreign key constraint to the users table):
UNIX groups
Another advantage of groups is that they can be used to compress the permissions
associated with an object in some cases. For example, the UNIX file system stores
permissions for each file as a simple triple of permissions for the current user, the
user’s group, and anyone else. Rather than storing permissions for many individual
users, the owner of the file can assign permissions to only a single pre-existing group,
dramatically reducing the amount of data that must be stored for each file. The down-
side of this compression is that if a group doesn’t exist with the required members,
then the owner may have to grant access to a larger group than they would otherwise
like to.
Listing 8.1
Looking up groups during authentication
Look up all 
groups that the 
user belongs to.
Set the
user’s groups
as a new
attribute on
the request.
270
CHAPTER 8
Identity-based access control
CREATE TABLE permissions(
    space_id INT NOT NULL REFERENCES spaces(space_id),
    user_or_group_id VARCHAR(30) NOT NULL,     
    perms VARCHAR(3) NOT NULL);
or you can create two separate permission tables and define a view that performs a
union of the two:
CREATE TABLE user_permissions(…);
CREATE TABLE group_permissions(…);
CREATE VIEW permissions(space_id, user_or_group_id, perms) AS
    SELECT space_id, user_id, perms FROM user_permissions
    UNION ALL
    SELECT space_id, group_id, perms FROM group permissions;
To determine if a user has appropriate permissions, you would query first for individ-
ual user permissions and then for permissions associated with any groups the user is a
member of. This can be accomplished in a single query, as shown in listing 8.2, which
adjusts the requirePermission method in UserController to take groups into
account by building a dynamic SQL query that checks the permissions table for both
the username from the subject attribute of the request and any groups the user is a
member of. Dalesbred has support for safely constructing dynamic queries in its Query-
Builder class, so you can use that here for simplicity.
TIP
When building dynamic SQL queries, be sure to use only placeholders
and never include user input directly in the query being built to avoid SQL
injection attacks, which are discussed in chapter 2. Some databases support
temporary tables, which allow you to insert dynamic values into the temporary
table and then perform a SQL JOIN against the temporary table in your
query. Each transaction sees its own copy of the temporary table, avoiding the
need to generate dynamic queries.
public Filter requirePermission(String method, String permission) {
    return (request, response) -> {
        if (!method.equals(request.requestMethod())) {
            return;
        }
        requireAuthentication(request, response);
        var spaceId = Long.parseLong(request.params(":spaceId"));
        var username = (String) request.attribute("subject");
        List groups = request.attribute("groups");       
        var queryBuilder = new QueryBuilder(                          
                "SELECT perms FROM permissions " +                    
                    "WHERE space_id = ? " +                           
                    "AND (user_or_group_id = ?", spaceId, username);  
Listing 8.2
Taking groups into account when looking up permissions
Allow either a 
user or group ID.
Look up the 
groups the 
user is a 
member of.
Build a dynamic
query to check
permissions
for the user.
271
Users and groups
        for (var group : groups) {                                   
            queryBuilder.append(" OR user_or_group_id = ?", group);  
        }                                                            
        queryBuilder.append(")");                                    
        var perms = database.findAll(String.class,
                queryBuilder.build());
        if (perms.stream().noneMatch(p -> p.contains(permission))) {  
            halt(403);                                                
        }