# MyBB XSS 和 SQL注入组合 RCE 复现思路
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
本着学习的心态来看一看这个漏洞利用链。
CVE-2021-27889 是 XSS 漏洞。关键思想：当 mybb 将 markdown 格式的代码转换成 html 的时候，由于 **普通标签解析**
和 **URl 自动解析成a标签** 的功能，当普通标签上 **嵌套了URl** 而 URL **自动被解析成 a标签** 时，会导致 **引号逃逸**
，从而导致 XSS。
CVE-2021-27890 是 SQL注入漏洞。关键思想：mybb导入模板时 **解析 XML 没做好过滤** ，导致 SQL注入。且 mybb
的模板变量赋值是通过 `eval()` 进行赋值，该 SQL注入可 **控制部分`eval()` 的内容**，到达 RCE 的效果。
## CVE-2021-27889初探
在github上下载 1825 源码包，根据官网安装教程来设置权限。
根据描述，猜测应该是发帖的地方存在漏洞:
> The vulnerability can be exploited with minimal user interaction by saving a
> maliciously crafted MyCode message on the server (e.g. as a post or Private
> Message) and pointing a victim to a page where the content is parsed.
###  查看 commit
定位到 _inc/class_parser.php_ 的 _1591行_ ，发现整个 commit 就这一处修改
###  回溯函数
进入 PHPSTORM 进行回溯查找：ctrl+鼠标点击函数名。  
找到一入口点： `newreply.php` 的 `do_newreply` action
回溯的调用函数链：
    inc/class_parser.php mycode_auto_url()
    inc/class_parser.php parse_mycode()
    inc/class_parser.php parse_message()
    post.php verify_image_count()
    post.php validate_post()
    newreply.php  if($mybb->input['action'] == "do_newreply"
上面只是列出了一个方便复现的入口点  
毕竟`inc/class_parser.php parse_message()` 被很多地方调用了。  
而由于描述中说这是一个 XSS。所以不同的入口点说明输出点的位置可能就会不一样。
###  简单测试
常规的 XSS payload 一般就是下面两种：
  1. 插入 html 标签执行 js
  2. 原有的 html 标签引号逃逸，在属性处执行 js
那我们通过黑盒测试进行尝试，对 mybb 简单摸个底。
根据入口点的 `do_newreply` action 以及漏洞通告中可以猜测，论坛回复可能就是入口点。
**意外的坑**  
想要回复就得先注册个用户发个帖。在注册用户的时候发现了点小问题：注册时需要校验 _captchaimage_ 的值，但注册的时候并没有地方输入这个值。
修复：  
关闭 _captchaimage_ 。因为这个验证码好像有点问题  
修改 `inc/settings.php` 下的
    $settings['captchaimage'] = "0";
接着需要 admin 去激活用户，用户才能发言。后台激活url：  
 _/admin/index.php?module=user-awaiting_activation_
**测试：**  
前台回复处尝试发送以下 payload
    [-- 尝试 html 标签插入，结果被实体编码 --]
    123
    [-- 输出 --]
    &lt;a href="1"&gt;123&lt;/a&gt;
在回复处发现可以插入链接，那我们就发个链接试试水
尝试发送以下 payload
    [-- 原包，看起来像是模板标签 --]
    [url=http://test.com]value[/url]
    [-- 输出 --]
    value
    =================
    [-- 在 [url] 里头添加双引号尝试逃逸，结果不进行模板标签的解析 --]
    [url=http://test.com"]value[/url]
    [-- 输出 --]
    [url=http://test.com"]value[/url]
###  追踪 patch 点的前后代码流程
**流程追踪**
_代码审计就是要细心耐心，错过一个调用点可能就没法看到整个利用链。所以尽量每个函数调用都去瞄一瞄，哪怕看不懂，也可以简单记录下操作，哪怕脑中过一遍有这个调用的印象也好。_
观察前文 commit 处的那段代码，发现其正则匹配的似乎像个 a标签 和 url。那我们继续发送 _链接_ 吧：
    [url=http://evil.com/xxx]test[/url]
跟到 `class_parser.php:268, postParser->parse_html()` 时发现对 `` 进行了实体编码
    $message = str_replace("","&gt;",$message);
暂时到目前为止，似乎插入 html 标签进行 xss 的方法行不通了。不过也不能全盘否定，说不定 mybb 后面解析模板标签的时候有什么骚操作呢？可以留个
**尖括号逃逸** 和 **引号逃逸** 的心眼。
接着追踪到 `class_parser.php:456, postParser->parse_mycode()` 。
首先执行了 `$this->cache_mycode();`。这个方法用于为 `$this->mycode_cache`
设置一些正则语句，用于匹配一些模板标签以及对应的替换
贴一部分代码出来：
    $callback_mycode['url_simple']['regex'] = "#\[url\]((?!javascript)[a-z]+?://)([^\r\n\"parse_mycode()` 还对应匹配了 `[img]` 和
走完上面的函数流程后，此时我们原来输入的模板标签就会转换成 html 代码。值得注意的是， `a标签` 自动添加了 **引号** 和 **尖括号**
    [url=http://evil.com/xxx]test[/url]
    test
接下来就执行到 patch 代码 `mycode_auto_url()` 中了，如下所示：
    function mycode_auto_url($message)
    {
        $message = " ".$message;
        //$message value:
        //test
        //正则太长了就不写这里了，在下文分析正则
        $message = preg_replace_callback("...REGEX...", array($this, 'mycode_auto_url_callback'), $message);
        .......
        return $message;
    }
分析正则，首先定位 `|` 符。，并根据 `|` 分割 正则表达式 进行分析。这里可以分为两个部分
**第一部分正则**
    ]*>.*?
不难看出这是在匹配一个 **a标签**
**第二部分正则**  
可以再拆分下，这一小部分在匹配 空格 和 一些特殊符号
    ([\s\(\)\[\>])
另一小部分：
    (http|https|ftp|news|irc|ircs|irc6){1}(://)([^\/\"\s\mycode_parse_url($url, $url).$external;
    }
    function mycode_parse_url($url, $name=""){
        .....
        //$templates->get() 中获取 url 的模板，进行替换
        eval("\$mycode_url = \"".$templates->get("mycode_url", 1, 0)."\";");  
        return $mycode_url;
    }
所以 `mycode_auto_url` 里的 `preg_replace_callback` 的功能就是将一个url 塞进 a标签中。
最终页面输出
    http://test.com/abc
###  前后代码流程结合漏洞原理进行分析
前文说过，一般的 XSS的创建就两种方式：插入html标签 和 原有标签引号逃逸。
然后 mybb 中存在过滤机制，我们无法直接输入 尖括号 以及 在模板标签中输入引号将会不解析模板标签。
**既然我们无法输入尖括号和双引号，那能否让 mybb 为我们输入呢？**
mybb 会为 url 创建一个 a标签，会产生成 尖括号和引号。并且 mybb 还有自带的模板标签，也产生成 尖括号和引号。
如果我们将这两者放在一起，是否会产生尖括号逃逸或引号逃逸呢？
**payload调试**  
测试 payload：（不能用 [url]，因为正则匹配那一段如果匹配到 a标签将会直接返回）
    [img])http://evil.com/xx[/img]
    [-- 理想输出 --]
    http://evil.com/xx/>
    [-- 实际输出 --]
    //没将[img]解析成 html
    [img])http://evil.com/xx[/img]
跟进函数 `class_parser.php:459, postParser->parse_mycode()`，发现 `[img]` 需要符合以下 正则
才能被转换成 html
    #\[img\](\r\n?|\n?)(https?://([^<>\"']+?))\[/img\]#is
    .......
发现关键正则 `(https?://([^<>\"']+?))`。这意味着 http:// 后面的值除了不能输入 引号 和 尖括号，其他都是可以随便输入的。
**重新构造 payload：**  
注意payload 改成了 **.com/xx (http://**
    [img]http://evil.com/xx(http://evil.com/xx[/img]
    [-- 输出 --]
    http://evil.com/xx" loading="lazy"  alt="[Image: xx]" class="mycode_img" /&gt;
成功逃逸双引号！仔细观察发现：原 url 中的 `/` 在html中表示为 **每个属性的分割** ，即上面的 `http:=""` 、 `xx="=""`
等
`xx` 作为了`img` 属性值。我们将之修改为 onerror：
payload：
    [img]http://evil.com/xx(http://evil.com/onerror=alert(1)[/img]
    [-- 输出 --]
注意到 alert(1) 后面不正确的语句，console 也给我们报了错
直接使用注释符注释掉即可
payload：
    [img]http://evil.com/xx(http://evil.com/onerror=alert(1)//[/img]
    [-- 输出 --]
成功弹窗！
## CVE-2021-27890初探
参考文章和漏洞通告中都提到了，通过 CVE-2021-27890 的 SQL注入 和 CVE-2021-27889 的 XSS 结合，可以让普通用户执行
RCE。那我们继续分析下 CVE-2021-27890 这个漏洞。
根据描述，是在导入 XML配置的主题 时写入恶意主题，并且在 导出、复制 或 访问主题 时触发漏洞
> Certain theme properties included in theme XML files are not escaped
> properly when included in SQL queries, leading to an SQL injection
> vulnerability.
>
> The vulnerability may be exploited when:
>
>   1. a forum administrator with the Can manage themes? permission imports a
> maliciously crafted theme,
>   2. a forum administrator uses the **Export** Theme or **Duplicate** Theme
> features in the Admin Control Panel, or  
>  a user, for whom the theme has been set, **visits** a forum page.
>
查看 commit，发现修改了3个文件6处代码，都是将 `$properties['templateset']` **强行转为 int类型**
。可推测这就是注入点。
**_admin/inc/functions_themes.php_**  
 _function import_theme_xml($xml, $options=array())_
**_admin/modules/style/themes.php_**  
 _function checkAction(id)_
**_inc/class_templates.php_**  
 _function cache($templates)_
_function get($title, $eslashes=1, $htmlcomments=1)_
整理获得的信息：后台导入主题时写入恶意主题，是 SQL注入，在导出、复制 或 访问主题 时触发漏洞，可造成 RCE。
综合这些信息可以简单推测漏洞大概成因：既然得是 导出、复制 或 访问主题时 触发，不难想到可能是
SSTI，也有可能是对主题配置进行解析时出现了一些问题；并且还有一个 SQl注入进行配合，则可能是通过
SQL注入篡改主题的某些属性或者标签，写入恶意代码，从而RCE。
###  简单测试
进入后台 `/admin/index.php` 找到主操作题的地方
`/admin/index.php?module=style-themes`
根据漏洞通告，优先找导出主题的操作，抓包得到导出主题的接口