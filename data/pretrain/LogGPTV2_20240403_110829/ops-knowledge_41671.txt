Certainly! Here’s a more polished and professional version of your text:

---

I am working on a large, cross-platform project that relies on Python and is built using CMake. On Linux, Python is either pre-installed or can be easily installed via a shell script. However, on Windows, I need to manually install Python from an .msi file before running CMake. Is there a better workaround using CMake scripts?

**Additional Information:**
- All other external dependencies are downloaded from a dedicated FTP server.

**Suggested Solution:**

Python does not necessarily need to be installed in the traditional sense to function properly. For my own CMake-based projects on Windows, I use a .zip file containing the entire Python tree. Here’s how you can set it up:

1. **Extract the Python Tree:** Extract the contents of the .zip file to a temporary directory.
2. **Update Environment Variables:**
   - Add the extracted directory to the `PATH` environment variable.
   - Set the `PYTHONHOME` and `PYTHONPATH` environment variables to point to the appropriate directories within the extracted Python tree.
3. **Ensure DLL Availability:**
   - Copy the Python DLL (e.g., `python39.dll`) from `C:\Windows\System32` to the top-level directory of the extracted Python tree. This step is crucial to ensure that the Python interpreter functions correctly.

Once these steps are completed, you will have a fully operational Python interpreter ready for use in your CMake build process.

---

This version is more structured, clear, and provides a step-by-step guide, making it easier to follow and implement.