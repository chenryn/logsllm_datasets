Q | A  
---|---  
Bug report? | yes  
Feature request? | no  
BC Break report? | no  
RFC? | no  
Symfony version | 2.8.18  
I've tripped on an edge case where although `@UniqueEntity` fails the form is
declared valid.
I have an entity with a unique constraint on two fields. I build a form that
has one of those fields pre-selected and disabled. The user is supposed to see
the value of the field, but not change it. The user is supposed to fill in the
second field.
When this form is submitted the disabled field gets an 'error' message, but
Form::getErrors skips the first field and declares it valid only because it's
disabled. Source: Symfony/Component/Form/Form.php v2.8.18 line 765
This code says the form is valid, which results in a SQL constraint validation
when attempting to save the entity.
Is there anything that I can do to get over this?
Why I'm doing this: I'm using EasyAdminBundle. It uses select2 for dropdowns.
select2 won't implement 'read_only' in the latest version. I'm working on
changing this to a hidden field plus a plain text row, but meanwhile I have
this issue.
Here are some snippers of code that should help with replication:
#### The entity
    /**
     * MyEntity
     *
     * @ORM\Table(name="my_entity", uniqueConstraints={
     *     @ORM\UniqueConstraint(name="two_field_constraint", columns={"field1", "field2"})
     * })
     * @ORM\Entity()
     * @UniqueEntity(fields={"field1", "field2"})
     */
    class MyEntity
    // ...
#### The form type
    class MyEntityType extends AbstractType
    {
        public function buildForm(FormBuilderInterface $builder, array $options)
        {
            $builder
                ->add('field1', TextType::class, ['disabled' => true])
                ->add('field2', TextType::class)
            ;
        }
        public function configureOptions(OptionsResolver $resolver)
        {
            $resolver->setDefaults(array(
                'data_class' => 'AppBundle\Entity\MyEntity'
            ));
        }
    //...
    }
#### the initial data
    INSERT INTO my_table ('value1', 'value2');
#### the test code trying to insert duplicate data
            $builder = $this->container->get('form.factory')->createBuilder(MyEntityType::class, null, ['csrf_protection' => false]);
            $form = $builder->getForm();
            $data = [
                'field1' => 'value1',
                'field2' => 'value2',
            ];
            $form->submit($data);
            dump($form->isSubmitted(), $form->isValid());