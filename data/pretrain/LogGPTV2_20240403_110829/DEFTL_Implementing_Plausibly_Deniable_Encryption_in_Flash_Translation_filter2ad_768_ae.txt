initialize the hidden volume metadata. Once the user and his/her
mobile device is captured, the adversary will coerce him/her for
the secret being used to decrypt the device. At this point, the user
can disclose the decoy password to avoid being tortured. DEFTL
aims to ensure that by using the decoy password and the device
being captured, the adversary is not able to detect the existence of
the hidden sensitive data.
6 ANALYSIS AND DISCUSSION
6.1 Security Analysis
The hidden volume technique (Sec. 2.3) achieves deniability by
hiding an encrypted hidden volume (using a true key) among an
encrypted public volume (using a decoy key which can be disclosed
to the adversary). The encrypted hidden volume cannot be identi-
(cid:27)ed since it cannot be di(cid:29)erentiated from the randomness being
(cid:27)lled initially. We show in the following that DEFTL can provide
deniability in the (cid:30)ash medium layer comparable to the hidden
volume technique.
Theorem 6.1. Under a single-snapshot adversary, the deniability
provided by DEFTL in the (cid:30)ash medium layer is comparable to the
hidden volume technique.
Proof. (sketch). when the adversary captures both the victim
and the mobile device, he/she coerces the victim, and the victim
discloses the decoy password. The adversary can attack DEFTL and
try to compromise deniability in three cases:
Case 1: The adversary obtains a snapshot of the raw (cid:30)ash, and
performs forensic analysis over it. For hidden volume technique,
without using the decoy key, the adversary cannot learn more from
the storage state except random bits, if the output of the encryption
algorithm is random enough. For DEFTL, when performing the
aforementioned attack on the raw (cid:30)ash, the adversary cannot learn
more except randomness and regular data without any deniability
indications. Random data include: 1) data encrypted using the decoy
key; and 2) data encrypted using the true key; and 3) randomness
(cid:27)lled by DEFTL. Without using the decoy/true key, the encrypted
ciphertexts are indistinguishable from randomness if the output
of the encryption algorithm is random enough. The regular data
without any deniability indications include: 1) the system metadata
stored in the few reserved blocks at the beginning of the (cid:30)ash
medium, which are regular metadata for any FTLs and clearly do
not contain any deniability indications; 2) a few empty pages with
all “1" bit pages due to block erasure, which is regular in a full
disk encryption over (cid:30)ash, and also do not contain any deniability
indications. Therefore, under this attack, the adversary obtains an
equivalent storage state for both the hidden volume technique and
DEFTL in terms of deniability.
Case 2: Using the decoy password, the adversary enters the public
mode, decrypts the public data, and performs forensic analysis on
the raw (cid:30)ash. Under this attack, the storage state (in raw (cid:30)ash)
resulted from DEFTL is equivalent to that resulted from the hidden
volume technique. From the view of the adversary, the entire (cid:30)ash
blocks are (cid:27)lled with public data/metadata and randomness, which
logically form a volume which is equivalent to the public volume in
the hidden volume technique. The (cid:30)ash blocks storing the hidden
sensitive data cannot be localized by the adversary since the hidden
volume metadata cannot be decrypted by the adversary. In addition,
the adversary cannot di(cid:29)erentiate the encrypted hidden data from
randomness without the true key. Therefore, all the blocks for
hidden volume logically form a volume equivalent to the hidden
volume in the hidden volume technique.
Case 3: The adversary enters the public mode, and plays with it
to try to compromise deniability. Speci(cid:27)cally, the adversary tries
to read/write/delete data in the public mode, and observes the
change of the storage state in the raw (cid:30)ash. We show that by
performing this attack, the adversary will not gain any advantages
in detecting indications present in the raw (cid:30)ash which can be used
to compromise deniability. Clearly, read operations will not create
any impact on the (cid:30)ash state. Write operations will a(cid:29)ect block
allocation and garbage collection, and then create impacts on the
(cid:30)ash state. Delete operations will also create impacts on the (cid:30)ash
state since it will a(cid:29)ect garbage collection. However, since both
the block allocation and garbage collection in DEFTL follow the
design of a regular FTL without deniability, the adversary will not
be able to observe any “special” indications from the (cid:30)ash state and
suspect the existence of PDE.
(cid:3)
Theorem 6.1 con(cid:27)rms that DEFTL is able to provide deniability
in the (cid:30)ash medium layer. Considering that there are no deniability
compromises under the (cid:30)ash medium layer2, we conclude that
DEFTL is secure.
6.2 Discussion
Wear leveling. In both the public mode and the PDE mode, wear
leveling will be triggered each time when the erasure count of a
block (we call it wear leveling victim block) being allocated exceeds
a certain threshold over the average erasure count. The wear lev-
eling will be performed as follows: 1) select a young block (i.e.,
a block with a small erasure count) from the blocks which store
valid data. These blocks correspond to the blocks in state C and
D in the public mode, and the blocks in state B in the PDE mode,
respectively; 2) copy the valid data stored in the young block to the
wear leveling victim block; 3) update the mapping table and the
dirty block table; 4) allocate this young block instead. The blocks
reserved at the beginning of the (cid:30)ash medium will not have signi(cid:27)-
cant wear leveling issue, because: (cid:27)rst, the root table and the bad
block table will be updated rarely; second, the erasure count table
can be only updated during unmounting a volume by temporarily
storing/updating the erasure count information using RAM. Note
2The raw NAND (cid:30)ash is the lowest layer in a (cid:30)ash-based storage system we can access
at this point. The potential layer under the raw (cid:30)ash is out of the scope of this paper.
Session J4:  Flash SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA2226that a (cid:30)ash-based block device is usually equipped with a certain
amount of built-in RAM [28, 29].
Encryption issues. As for encryption, DEFTL can integrate with
FDE technology. The encryption algorithm (e.g., AES-XTS) can
make the cipher output of data indistinguishable from random
data [33].
Defending against a multiple-snapshot adversary. DEFTL is
not able to defend against a multiple-snapshot adversary, who can
have periodical access to the storage medium of the victim device.
This is because, by comparing multiple snapshots, the adversary can
be able to detect unaccountable changes in the (cid:30)ash storage state.
For example, a block located at the end of the free blocks in the dirty
block table should be unlikely used during a short period accord-
ing to the block allocation strategy in the public mode. However,
the adversary may observe changes on this block in a subsequent
snapshot (e.g., obtained in a few hours after the last snapshot) and
may suspect that it is used by the PDE mode. Defending against a
multiple-snapshot adversary is much more challenging, which will
be investigated in our future work.
P/E cycles increase. To prevent randomness from decreasing,
DEFTL (cid:27)lls randomness to empty pages in the blocks in state A and
B, which will increase the P/E cycles of the blocks. The increased
P/E cycles can be eliminated by one-block-one-key policy, which
can only be implemented in FTL rather than block device layer.
By using this strategy, the attack described in Sec. 3.1.2 will not
happen, since the same data will be re-encrypted using a di(cid:29)erent
key before being copied to another block. However, it will produce
a huge overhead in FTL by introducing additional key management
as well as data encryption/decryption.
System crash. We assume that the adversary cannot capture a
device after a crash of PDE mode, e.g., due to power loss. Otherwise,
the adversary can observe a non-deniable state, and compromise
deniability. For example, when the PDE mode is performing garbage
collection, the system crashes before the block being reclaimed has
been erased. By capturing the device at this point, the adversary is
able to observe that duplicate random data (the data encrypted by
the true key) exist at two di(cid:29)erent blocks.
7 IMPLEMENTATION AND EVALUATION
7.1 Implementation
We implemented a prototype of DEFTL using OpenNFM [9], an
open source NAND (cid:30)ash controller framework. Note that DEFTL
is applicable to any block-based (cid:30)ash device using FTL, though we
use OpenNFM for our prototype implementation. To incorporate
DEFTL, we modi(cid:27)ed OpenNFM to support two modes, a public
mode and a PDE mode. Each volume in these two modes maintains
a speci(cid:27)c mapping table. We ported DEFTL to LPC-H3131 [22], a
development board equipped with 180 MHz ARM microcontroller,
512MB NAND (cid:30)ash3, and 32MB SDRAM. The NAND (cid:30)ash has
128KB block size and 2KB page size. The entire NAND (cid:30)ash has
3The mobile devices like smart phones and smart watches today can have a few
gigabytes in storage, and 500MB may be a little small compared to the storage capacity
of those main-stream mobile devices. We choose LPC-H3131 due to two reasons: 1) it is
cost e(cid:29)ective; 2) the main purpose of our evaluation is to assess the additional overhead
by incorporating deniability, which is not signi(cid:27)cantly a(cid:29)ected by the capacity of the
storage.
4, 096 erase blocks, and each block is composed of 64 pages. Each
mapping table is less than 576KB in size, as it contains less than
4, 096 ∗ 64 mappings, each of which can be represented by 18 bits.
Our encryption algorithm is instantiated using AES-XTS, while our
key derivation function is instantiated using PBKDF2 [19].
We benchmarked the original OpenNFM and di(cid:29)erent modes of
DEFTL using (cid:27)o [12] with the non-bu(cid:29)ered I/O option. The (cid:27)o is
run in a host computer with Intel i5 CPU at 3.30GHz, 4GB RAM,
and Windows 10 Pro 64-bit.
7.2 Performance Evaluation
DEFTL introduces a few additional strategies into the FTL to achieve
deniability. To (cid:27)gure out how those strategies a(cid:29)ect the perfor-
mance of regular FTL (i.e., does not provide deniability), we per-
form evaluation over three systems: 1) the default OpenNFM (no
deniability); 2) the public mode of DEFTL; and 3) the PDE mode
of DEFTL. Note that encryption/decryption will be performed in
the upper layer (e.g., (cid:27)le system), rather than in FTL, since the
computational power in a (cid:30)ash-based block device is limited4.
Throughput. To ensure an enough number of blocks in state A
such that data loss of hidden volume can be mitigated, DEFTL
adopts active garbage collection. If the number of blocks that con-
tain invalid pages (i.e., the blocks in either state C or B2) has reached
a threshold, DEFTL will trigger the garbage collection. We per-
formed multiple experiments by alerting the garbage collection
threshold, and compared the performance for the three systems.
The benchmark results for their read/write throughput are shown
in Figure 8 and 9. We observed that the reading (including both
sequential and random read) throughput of both the public and
the PDE mode of DEFTL are almost the same as OpenNFM. This is
because, DEFTL does not need to modify read operation to achieve
deniability. For write operation (including both sequential and ran-
dom write), when the garbage collection threshold is small (e.g., 16),
DEFTL slightly degrades in performance compared to OpenNFM.
However, when the garbage collection threshold is increased, the
performance will be improved. Potential reasons are:
a) To avoid blocking upcoming read/write requests for a long
time, DEFTL only triggers active garbage collection during the
system idle time. In this way, garbage collection will not signi(cid:27)-
cantly a(cid:29)ect normal user access. If and only if the following two
conditions are satis(cid:27)ed: 1) the total number of free blocks (blocks
in state A and B) has decreased to a threshold, and 2) during the
uninterrupted writing operations of the system, DEFTL will trigger
the active garbage collection during system busy time. However, in
this case, the large number of available victim blocks and invalid
pages will help reduce the overhead (e.g., selecting victim blocks
and copying valid pages) of garbage collection. Therefore, DEFTL
will not signi(cid:27)cantly decrease the write throughput.
b) OpenNFM will search allocatable blocks for write requests
only when they arrive. Comparatively, in DEFTL, we optimize the
block allocation strategy by preparing the free allocatable blocks for
upcoming write requests in advance. This helps decrease response
4If the (cid:30)ash device is equipped with encryption hardware module, one may consider
to perform encryption/decryption in FTL, which only slightly a(cid:29)ects the overall
read/write throughput [7]
Session J4:  Flash SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA2227Table 1: Wear leveling e(cid:29)ectiveness of DEFTL
Wear leveling threshold Average erasures WLI (%)
200
150
100
50
0.97
1.06
1.10
1.15
11.5
10.2
8.9
7.3
Figure 8: Throughput comparison between OpenNFM and
the public mode of DEFTL. SR - sequential read, RR - ran-
dom read, SW - sequential write, RW - random write. GC-XX,
in which “XX” means the threshold of garbage collection in