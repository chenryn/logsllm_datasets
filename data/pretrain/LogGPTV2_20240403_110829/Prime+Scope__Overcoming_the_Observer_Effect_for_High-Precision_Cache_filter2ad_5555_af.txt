### 7.2 Cache Attacks and Replacement Policies

Cache replacement policies have long been considered a hindrance, leading to the development of techniques aimed at minimizing their impact (e.g., double pointer-chasing [55] or black-box eviction strategies [24]). However, recent advances in reverse-engineering [1, 2, 11, 59] have enabled some works to leverage these policies to the attacker's advantage.

#### Same-Core Attacks

Xiong and Szefer [64] exploit the PLRU (Pseudo-Least-Recently-Used) policy of the L1 cache to leak information between processes by manipulating LRU states. More recently, R√∂ttger and Janc [48] utilized this approach to amplify the time difference between the presence and absence of a speculative memory access.

#### Cross-Core Attacks

**Reload+Refresh [11]**: This technique detects accesses to a shared address by monitoring changes in the EVC (Eviction Candidate). In this context, our efficient Prime patterns may be useful for preparing the EVC. Wang et al. [61] probe the L2 EVC to mitigate the impact of the aggressive hardware prefetcher on low-end, in-order Intel CPUs. Their Prime pattern involves 2ùëä ordered accesses (all cache misses), which is relatively slow.

**Briongos et al. [10]**: These researchers detect the start of a victim routine and use LLC (Last-Level Cache) replacement to evict prefetched lines at the right time. Since Prime+Probe lacks the required precision, they rely on Prime+Abort for detection. Future work should investigate the use of Prime+Scope to remove the dependency on Intel TSX (Transactional Synchronization Extensions).

**Rowhammer without Flushing [24]**: Gruss et al. [24] developed efficient eviction strategies for unknown replacement policies to enable Rowhammer attacks without flushing. Aweke et al. [5] created a pattern based on the Sandy Bridge MRU (Most-Recently-Used) policy, which De Ridder et al. [16] modernized and improved for browser-based Rowhammer in the presence of DRAM mitigations.

### 8. Limitations and Countermeasures

#### Requirements

Prime+Scope does not function on processors where the key properties (cf. Section 4) do not hold. For instance, it fails if the shared structure \( C_S \) has a random replacement policy (eliminating predictability of the EVC) or if lower-level caches do not act as a filter for \( C_S \) (eliminating repeatability of the measurement). We believe these two properties are the only anchor points for deploying countermeasures to reduce Prime+Scope to Prime+Probe. However, invalidating these properties may adversely affect multi-level cache performance.

#### Leakage Types

As demonstrated in Section 6, Prime+Scope can extract information from fine-grained timing leaks. However, if time differences are more coarse-grained (e.g., RSA square-and-multiply [37, 67]), the increased precision of Prime+Scope does not directly lead to a more efficient attack. Still, the windowless nature of Prime+Scope eliminates false-negative errors due to overlap between measurement and event, potentially reducing the number of required observations to retrieve the secret.

#### High-Frequency Events

For Prime+Scope (and Prime+Abort and Prime+Probe), even in windowless instances, the cache state needs to be prepared after every detected event. If the event rate is very high, i.e., when the temporal separation of accesses to the same address is in the order of the Prime duration, the preparation step becomes dominant for time precision. Although Prime+Scope places more demands on cache state preparation than its counterparts, the Prime patterns obtained with PrimeTime are still competitive, with most in the range of 1000-1300 cycles (cf. Table 1).

#### Generic Countermeasures

Flush+Reload and Flush+Flush can be thwarted by disallowing shared memory across security boundaries, but countermeasures to mitigate the cache contention channel are more invasive. In recent years, this defensive avenue has attracted attention in the research community. The main approaches are based on isolation, i.e., partitioning the cache into isolated portions (e.g., [6, 14, 17, 19, 35]), or randomization, i.e., obfuscating interference by modifying the set index mapping (e.g., [36, 45, 46, 49, 54, 62, 63]). By strengthening cache contention attacks, our work motivates further research in this direction.

### 9. Conclusion

This paper introduces Prime+Scope, a high-resolution primitive for measuring contention on shared cache resources. It can target last-level caches and directories and applies to all tested Intel processors of the last decade. Essentially, Prime+Scope is a high-resolution successor to Prime+Probe, assuming the same attacker capabilities that make the latter widely applicable. The fast and repeatable Scope measurement optimizes the resolution of cache contention attacks, delivering cross-core time precision that even flush-based techniques cannot provide.

We believe that Prime+Scope is a valuable addition to the microarchitectural attack toolbox. We quantitatively evaluated its properties and illustrated them with a high-bandwidth covert channel, a new fine-grained attack on AES T-tables, and a simple, efficient, and portable routine to construct eviction sets.

### Acknowledgments

We thank the anonymous CCS 2021 reviewers, as well as Frank Piessens and M√°rton Bogn√°r, for their valuable feedback. This research is partially funded by the European Research Council (ERC - #695305) and the Flemish Government through the FWO project TRAPS. It was also supported by the CyberSecurity Research Flanders (#VR20192203). Additional funding was provided by a generous gift from Intel. Antoon Purnal is supported by a grant from the Research Foundation - Flanders (FWO).

### References

[1] Andreas Abel and Jan Reineke. 2013. Measurement-based Modeling of the Cache Replacement Policy. In IEEE Real-Time and Embedded Technology and Applications Symposium (RTAS).
[2] Andreas Abel and Jan Reineke. 2020. nanoBench: a Low-overhead Tool for Running Microbenchmarks on x86 Systems. In IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS).
[...]
[64] Wenjie Xiong and Jakub Szefer. 2020. Leaking Information Through Cache LRU States. In IEEE Symposium on High Performance Computer Architecture (HPCA).
[...]

[Remaining references follow the same format.]