title:ETHBMC: A Bounded Model Checker for Smart Contracts
author:Joel Frank and
Cornelius Aschermann and
Thorsten Holz
EthBMC: A Bounded Model Checker for 
Smart Contracts
Joel Frank, Cornelius Aschermann, and Thorsten Holz, 
Ruhr-University Bochum
https://www.usenix.org/conference/usenixsecurity20/presentation/frank
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.ETHBMC: A Bounded Model Checker for Smart Contracts
Joel Frank, Cornelius Aschermann, Thorsten Holz
Ruhr University Bochum
Abstract
The introduction of smart contracts has signiﬁcantly advanced
the state-of-the-art in cryptocurrencies. Smart contracts are
programs who live on the blockchain, governing the ﬂow of
money. However, the promise of monetary gain has attracted
miscreants, resulting in spectacular hacks which resulted in
the loss of millions worth of currency. In response, several
powerful static analysis tools were developed to address these
problems. We surveyed eight recently proposed static ana-
lyzers for Ethereum smart contracts and found that none of
them captures all relevant features of the Ethereum ecosystem.
For example, we discovered that a precise memory model is
missing and inter-contract analysis is only partially supported.
Based on these insights, we present the design and im-
plementation of ETHBMC, a bounded model checker based
on symbolic execution which provides a precise model of
the Ethereum network. We demonstrate its capabilities in a
series of experiments. First, we compare against the eight
aforementioned tools, showing that even relatively simple toy
examples can obstruct other analyzers. Further proving that
precise modeling is indispensable, we leverage ETHBMC ca-
pabilities for automatic vulnerability scanning.We perform a
large-scale analysis of roughly 2.2 million accounts currently
active on the blockchain and automatically generate 5,905
valid inputs which trigger a vulnerability. From these, 1,989
can destroy a contract at will (so called suicidal contracts)
and the rest can be used by an adversary to arbitrarily extract
money. Finally, we compare our large-scale analysis against
two previous analysis runs, ﬁnding signiﬁcantly more inputs
(22.8%) than previous approaches.
1 Introduction
Cryptocurrencies have gained considerable traction in both
academia and industry since the introduction of Bitcoin in
2008 [42]. The underlying technology, called blockchain, was
originally designed to be a decentralized peer-to-peer payment
protocol without the need for trusted parties [42]. Recently,
this technology also found applications in many different
areas such as supply chain management, asset transfer, or
health care (e.g., [6,38,52,63]). A blockchain is a distributed,
append-only ledger maintained by all participants of the net-
work. The participants run a consensus protocol to append
new data, so called blocks, to the ledger, making transactions
in the network possible.
Smart contracts, programs deployed directly on the
blockchainallow users to encode complex sets of rules on how
and when transactions should happen. For instance, a contract
can transfer funds when a speciﬁc event takes place. It is
even possible that multiple contracts are chained together to
express more complicated logic. The idea was ﬁrst introduced
by Szabo in 1997 [57], but the ﬁrst real-world implementa-
tion was provided by Ethereum in 2014 [5]. The actual smart
contract is typically written in a high-level language, in the
case of Ethereum most often Solidity [13]. These high-level
languages then get compiled to bytecode which is executed on
a transaction-based state machine [64], the Ethereum Virtual
Machine (EVM).
This offers a great degree of control and the promise
of a multitude of use cases, e.g., state or payment chan-
nels [16, 24, 58], decentralized crypto exchanges [19], and
multi-signature wallets [49]. On the downside, smart con-
tracts suffer from software failures in a similar way as other
kinds of programs do. While in traditional programs this may
“only” lead to a crash, in the world of Ethereum a simple bug
can have more direct—typically ﬁnancial—consequences. A
good example are the infamous Parity incidents [50, 59]. In
the ﬁrst event, an attacker exploited a bug in shared library
code to steal over 150,000 worth of Ether, the cryptocurrency
behind the Ethereum blockchain. At the time of the hack,
this was worth around 30M USD. In the second event, the
then-patched library was exploited again, this time rendering
over 514,000 Ether (around 155M USD) inaccessible.
Several proposal have been made to detect software faults
in an automated way. We surveyed 8 of these automated anal-
ysis tools [4,23,33,36,39,41,46,62], both from academia and
industry, and found all of them lacking in at least one category:
USENIX Association
29th USENIX Security Symposium    2757
(i) inter-contract reasoning, (ii) memory modelling, especially
memcopy-style operations, or (iii) handling of cryptographic
hash functions.
In this paper, we address these shortcomings and present
the design and implementation of ETHBMC, an automated
analysis framework for smart contracts based on a symbolic
executor which employs stronger, more precise reasoning over
EVM internals compared to state-of-the-art tools. ETHBMC
is designed as a bounded model checker, offering the ability to
check predeﬁned models against the smart contract’s code. In
the case a model gets violated, ETHBMC can automatically
generate concrete inputs to ease further analysis (i.e., we gen-
erate a chain of transactions which demonstrates the detected
vulnerability). As a result, ETHBMC is the ﬁrst method ca-
pable of identifying the Parity vulnerability in a completely
automated way. We are even able to generate a second exploit
not used in the original attack. To demonstrate the capabilities
of our tool, we perform a series of experiments in which we
compare our approach to the surveyed analyzers. Our main in-
sight is that the imprecise analysis of other approaches can be
impeded by even simple toy examples. Continuing, we lever-
age ETHBMC capabilities as an automated way to generate
exploits, scanning all accounts on the Ethereum blockchain
(as of December 2018) generating 5,905 exploits. From these
5,905 exploits, we ﬁnd that 1,989 could be used to arbitrar-
ily destroy contracts (so called suicidal contracts) and the
remaining ones can be used to extract money. Additionally,
we compare our large-scale analysis with two prior works
on this topic. First, we compare our analysis results against
teEther [33], the state-of-the-art automatic exploit generation
tool. We demonstrate that our approach can ﬁnd signiﬁcantly
more exploits (22.8%) in less time, while also identifying
false positives in teEther. Second, we compare against MA-
IAN [46], a concolic executor, which can be used to ﬁnd
suicidal contracts, and, again ﬁnd that ETHBMC ﬁnds more
exploits. Finally, we perform an ablation study on the tech-
niques ETHBMC introduces to show the improvements in a
qualitative way. We systematically disable its features while
rescanning vulnerable contracts, giving us insights how the
different techniques contribute to the analysis results.
Contributions
contributions in this paper:
In summary, we make the following three
• We provide a survey of the current state-of-the-art ana-
lyzers for the Ethereum network, ﬁnding all of them to
lack precise reasoning over EVM internals.
• We present the design and implementation of ETHBMC,
a bounded model checker which handles the identiﬁed
issues by more precisely reasoning about the internals
of EVM. In particular, we demonstrate that a more pre-
cise analysis can be achieved by analyzing symbolic
memcopy-style operations, inter-contract communica-
tion, and by introducing a new encoding scheme for
precisely reasoning about cryptographic hash functions.
• We implemented a prototype of ETHBMC in 13,000
lines of Rust code and demonstrate its capabilities in
several experiments. More speciﬁcally, we compare
ETHBMC against all the previously surveyed tools and
we also perform a large-scale analysis of the entire
blockchain. We show that ETHBMC can be used in
an isolated contract environment to increase analysis
precision for single contracts, but also scales to large
contract analyses where we need to reason about com-
plex interactions of different contracts.
To foster research on smart contract security, the code of
ETHBMC is available at github.com/RUB-SysSec/EthBMC.
2 Background
Before diving into the technical details of our analysis process,
we brieﬂy introduce the required background information on
cryptocurrencies and the Ethereum Virtual Machine (EVM).
2.1 Cryptocurrencies
In 2008, Satoshi Nakamoto introduced Bitcoin and the con-
cept of the blockchain [42], a decentralized ledger running on
a peer-to-peer network. Informally speaking, a blockchain is
a public, append-only ledger that stores all events happening
within the system. The participant run a consensus protocol
which ensures, as long as the majority of the network behaves
honestly, that the ledger is correct and secured [1].
Ethereum can, in many ways, be considered a “Bitcoin 2.0”.
Introduced by Buterin in 2013, it is a cryptocurrency with
a Turing-complete bytecode language to orchestrate value
transfer in the system [64]. The participants in the network are
identiﬁed by a 160-bit address, derived from the public part
of an ECDSA asymmetric key pair. These so called accounts
might, in the case of Ethereum, also have code attached to
them. Such accounts are called smart contracts, encoding
complex behaviour as bytecode programs. The users can send
each other money—in the form of Ether—or execute smart
contract code by submitting transactions to the peer-to-peer
network and signing them with their private key, thus proving
the correctness of the transaction. While the length of the
execution of a smart contracts is bounded by a parameter
called gas, i.e., a fee to guarantee that the program eventually
terminates, contracts can achieve quite complex behaviours
by either chaining transactions together or using multiple
contracts to split up the logic.
2.2 Ethereum Virtual Machine
Ethereum deﬁnes a special-purpose, stack-based virtual ma-
chine termed the Ethereum Virtual Machine (EVM) to deter-
mine the outcome of a smart contract execution. Ethereum
offers a formal speciﬁcation in a yellow paper [64] where
2758    29th USENIX Security Symposium
USENIX Association
the entire inner workings of the EVM are deﬁned. The ma-
chine operates on bytecode where each operand either pops or
pushes values to a data stack, each value having a 256-bit word
size. Additionally, the EVM is augmented with several mech-
anisms tailored towards the cryptocurrency environment.
World State The Ethereum world state is the state of the
overall system. For the remainder of this paper we will refer to
it as the environment. It consists of two parts, a mapping from
account addresses to an account state as well as the current
block information. The account state is a tuple holding several
information, such as the current balance of the account [64].
Additionally, if the account is a smart contract, the account
state also contains the ﬁelds code and storage. The code
ﬁeld holds the smart contract’s code, while the storage is a
persistent memory used for keeping values across multiple
contract invocations.
ping 256-bit keys to 256-bit values.
Memory The EVM differentiates between three different
types of memory:
• Storage: The storage is a persistent key-value store, map-
• Calldata: The data section of a transaction is used to
supply user input to contracts. Note that this is a byte-
addressable data array and immutable during execution.
• Execution Memory: This memory is a volatile byte
array which only persists throughout one execution. It is
used like a heap in classical computer programs, e.g., to
store intermediate results during computation.
This setup creates a Harvard-style architecture with sepa-
rate instruction and data memory. In addition, the EVM offers
memcopy-style operations, e.g., CALLDATACOPY which copies
part of the calldata to execution memory.
2.3 Symbolic Execution and SMT Solving
While the tools we examine in Section 3.3 are based on multi-
ple different program analysis techniques, ETHBMC is based
on symbolic execution, thus we provide a brief introduction.
Symbolic execution was originally designed as a software
testing technique [30], but has since been adopted by the secu-
rity community for program analysis (e.g., [7,8,54]). Instead
of concrete inputs, symbolic execution treats all inputs as sym-
bolic variables, which range over the entire input domain of
the program. Intuitively speaking, for a function f (x), instead
of considering one concrete execution trace, e.g., f (10), sym-
bolic execution considers an symbolic input ϕ. Resulting in
a symbolic function execution f (ϕ), where ϕ is of the entire
input domain, e.g., a 32-bit integer, thus exploring all possible
paths a program can take. When arriving at a branch, e.g.,
an if-statement, execution is forked to explore both possible
paths. To keep the explored state space low, symbolic execu-
tors encode the current state of the program as well as the path
condition (e.g., x  address ) map ;
2
3
4
5
6
7
8
9
( map [ i d ] == msg . s e n d e r ) {
s e l f d e s t r u c t ( msg . s e n d e r ) ;
}
f u n c t i o n d e s t r u c t ( u i n t
f u n c t i o n c r e a t e U s e r ( address addr , u i n t
map [ i d ] = a d d r ;
i d ) p u b l i c {
i d ) p u b l i c {
i f
}
}