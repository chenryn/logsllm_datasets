### Absence of MQT and Genericity of the Approach

In the absence of a Minimum Quality Threshold (MQT), our approach remains flexible. For instance, we can assign an MQT value of 0 to batmand or any other proactive routing protocol that does not natively support this concept. Our technique is applied at each interval \( T \) before sending a routing packet. The algorithm must then obtain the current link quality index (\( lqi \)) and the previous link quality index (\( lqi-1 \)). The current \( lqi \) can be easily retrieved from the current state of the routing manager module. However, not all protocols store the previous state, so the algorithm must store \( lqi \) to provide \( lqi-1 \) in the next iteration. This storage requirement is negligible in terms of memory footprint, even for the smallest devices considered in this paper.

### Computing Future Link Quality and Adjusting Replicas

The next step involves computing the future link quality index \( lqi+T \) using the expression in Formula 3. If \( lqi+T \) is below the MQT, the number of replicated packets (\( nReplicas \)) to be sent in the next interval \( T \) is progressively increased, provided that the current value of \( nReplicas \) is lower than \( Nmax \). Conversely, if the link quality has improved and is no longer at risk of disappearing, the number of replicas is progressively reduced to 0, restoring the default behavior of the protocol. The value of \( nReplicas \) is stored to adjust it in the following iteration based on the link's state.

All replicated packets carry the same information, so any already received packet will be discarded. The goal is not to send new packets with additional information but to increase the probability that the same information is broadcast at least once. Since all protocols natively implement mechanisms to discard duplicates, no additional strategy is required for packet reception. Given the simplicity of the operations and the time between iterations, the CPU overhead introduced by our algorithm is negligible (less than 1%).

### Pseudocode for the Algorithm

```plaintext
/* Obtain the values of the variables needed */
load lqi, lqi−1, nReplicas

/* Deduce future link quality */
compute lqi+T_window

/* Determine the number of replicas to send */
if (lqi+T_window ≤ MQT) then
    if (nReplicas < Nmax) then
        nReplicas++
    end if
else
    if (nReplicas > 0) then
        nReplicas--
    end if
end if

/* Save the variables for the next iteration */
store lqi, nReplicas

send(nReplicas, routingPacket)
```

### Assessing the Modified Version of Routing Protocols

Additional experimental campaigns were conducted to demonstrate the effectiveness of the proposed algorithm. The results, as shown in Figure 6, are promising. Specifically, Figure 6a illustrates the routing overhead introduced by the modified routing protocols. When our technique is applied, the routing protocols adapt their behavior contextually. In terms of routing information sent, the balance shifts from the regular behavior (Figure 4a) to a behavior similar to the batmand-like configuration (Figure 4b). In the first case, no additional routing packets are sent, resulting in zero intrusiveness. Conversely, when ambient noise increases and the protocol needs more effort to maintain routes, it can increment the amount of routing information sent.

Unlike the regular behavior of the routing protocols, what remains constant with our technique is the rate of received packets, not the rate of sent packets. The goal is to maintain routing capability even under severe ambient noise. Compared to the previous overhead, all protocols reduce the number of packets sent up to around 70% packet loss caused by ambient noise. In extreme conditions, olsrd, babeld, and batmand increase their overhead by 13%, 15%, and 150%, respectively. However, the route availability (RA) improves in these conditions. Beyond a certain ambient noise rate, the number of received routing packets decreases due to the practical bound imposed by \( Nmax \).

### Benefits of the Technique

When comparing the route availability obtained with our technique (Figure 6b) to the default configuration (Figure 3c and 3d) and the batmand-like configuration (Figure 3e and 3f), the benefits are evident. The regular behavior of the targeted S-D route is significantly improved in all protocols. For the batmand-like configuration, the results for olsrd and babeld are very similar (less than 3% difference), but the overhead is greatly reduced for ranges of breaks and workdays (more than 150% in all cases). Additionally, batmand's converge time is accelerated, increasing its route availability from 5% to 10%.

These improvements are reflected in the Expected Packet Delivery Ratio (EPDR) in Figures 6d and 6e, enhancing the overall behavior of the Wireless Mesh Network (WMN) compared to the regular protocol behavior.

### Conclusions

Link-quality-based mechanisms enable routing protocols to select optimal routes more accurately than just hop counts. However, static tuning limits their adaptivity in persistent ambient noise. This study analyzed how OLSR, Babel, and B.A.T.M.A.N. manage communication links and the influence of configuration parameters. By adjusting these parameters, it was shown that, under similar configurations, the main differences between protocols lie in the induced network overhead rather than their protection capabilities. The proposed strategy aims to improve network convergence time in high ambient noise environments.

Although the results are specific to OLSR, Babel, and B.A.T.M.A.N., the conclusions can be generalized to other proactive routing protocols. The novelty lies in promoting dynamic adaptiveness to determine the optimal amount of routing information exchanged among nodes. This approach is generic and could be beneficial not only to WMNs but also to various ad hoc networks. Reengineering the algorithm using Aspect-Oriented Programming (AOP) could enhance its portability, though this is beyond the scope of this paper.

### Acknowledgements

This work was supported by the Spanish MICINN SEMSECAP project (TIN-2009-13825) and the UPV GIMCS project (PAID-06-10-2388).

### References

[1] M. Raya, J.-P. Hubaux, and I. Aad, “Domino: a system to detect greedy behavior in IEEE 802.11 hotspots,” in Proceedings of the 2nd International Conference on Mobile Systems, Applications, and Services (MobiSys), 2004, pp. 84–97.
[2] X. Ni, K.-c. Lan, and R. Malaney, “On the performance of expected transmission count (ETX) for wireless mesh networks,” in Proceedings of the 3rd International Conference on Performance Evaluation Methodologies and Tools (ValueTools), 2008, pp. 77:1–77:10.
[3] J. Geibig and D. Bradler, “Self-organized aggregation in irregular wireless networks,” in Wireless Days, 2010, pp. 1–7.
[4] G. Feng, F. Long, and Y. Zhang, “Hop-by-hop congestion control for wireless mesh networks with multi-channel MAC,” in Proceedings of the 28th IEEE Conference on Global Telecommunications (GLOBECOM), 2009, pp. 242–246.
[5] N. Tcholtchev and R. Chaparadza, Autonomic Fault-Management and resilience from the perspective of the network operation personnel, 2010.
[6] T. Clausen and P. Jacquet, “Optimized Link State Routing Protocol (OLSR),” RFC 3626, 2003.
[7] J. Chroboczek, “BABEL,” [Online]. Available: http://www.pps.jussieu.fr/ jch/software/babel/, 2011.
[8] “Open Mesh, Better Approach To Mobile Ad hoc Networking (B.A.T.M.A.N.),” [Online]. Available: http://www.open-mesh.net/, 2011.
[9] D. Raychaudhuri, I. Seskar, M. Ott, S. Ganu, K. Ramachandran, H. Kremo, R. Siracusa, H. Liu, and M. Singh, “Overview of the ORBIT radio grid testbed for evaluation of next-generation wireless network protocols,” in IEEE Wireless Communications and Networking, vol. 3, March 2005, pp. 1664 – 1669.
[10] D. Andrés, J. Friginal, J.-C. Ruiz, and P. Gil, “An attack injection approach to evaluate the robustness of ad hoc networks,” in IEEE Pacific Rim International Symposium on Dependable Computing (PRDC), 2009, pp. 228–233.
[11] Y. Sun, I. Sheriff, E. M. Belding-Royer, and K. C. Almeroth, “An experimental study of multimedia traffic performance in mesh networks,” in Workshop on Wireless traffic measurements and modeling (WiTMeMo), 2005, pp. 25–30.