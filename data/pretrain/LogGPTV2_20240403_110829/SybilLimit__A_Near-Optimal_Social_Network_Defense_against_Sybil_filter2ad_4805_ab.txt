is complimentary to bounding the number of sybil nodes
accepted in the ﬁrst place.
Social networks are one type of trust networks. There
are other types of trust networks, e.g., based on historical
interactions/transactions between users [8, 13, 36]. As in
LOCKSS [20], Ostra [24], and SybilGuard [42], SybilLimit
assumes a social network with a much stronger associated
trust than these other types of trust networks [8, 13, 36].
LOCKSS uses social networks for digital library mainte-
nance, and not as a general defense against sybil attacks.
Ostra leverages social networks to prevent the adversary
from sending excessive unwanted communication. In com-
parison, SybilLimit’s functionality is more general: Because
SybilLimit already bounds the number of sybil nodes, it
can readily provide functionality equivalent to Ostra by al-
locating each node a communication quota. Furthermore,
different from Ostra, SybilLimit has strong, provable end
guarantees and has a complete design that is decentralized.
The relationship between SybilGuard and SybilLimit is dis-
cussed in more detail in Sections 4 and 5.3. Unlike many
other works [8, 13, 32, 36] on trust networks, SybilLimit
does not use trust propagation in the social network.
Mislove et al. [23] also studied the graph properties of
several online real-world social networks. But Mislove et
al. did not focus on mixing time properties or their appro-
priateness for defending against sybil attacks. Finally, a
preliminary version of this work appeared as [40].
3. System model and attack model
SybilLimit adopts a similar system model and attack
model as SybilGuard [42]. The system has n honest human
beings as honest users, each with one honest identity/node.
Honest nodes obey the protocol. The system also has one
or more malicious human beings as malicious users, each
with one or more identities/nodes. To unify terminology, we
call all identities created by malicious users as sybil iden-
tities/nodes. Sybil nodes are byzantine and may behave
arbitrarily. All sybil nodes are colluding and are controlled
by an adversary. A compromised honest node is completely
controlled by the adversary and hence is considered as a
sybil node and not as an honest node.
There is an undirected social network among all the
nodes, where each undirected edge corresponds to human-
established trust relations in the real world. The adversary
may create arbitrary edges among sybil nodes in the social
network. Each honest user knows her neighbors in the social
network, while the adversary has full knowledge of the entire
social network. The honest nodes have m undirected edges
among themselves in the social network. For expository pur-
poses, we sometimes also consider the m undirected edges
5
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:45 UTC from IEEE Xplore.  Restrictions apply. 
as 2m directed edges. The adversary may eavesdrop on any
messages sent in the protocol.
Every node is simultaneously a suspect and a veriﬁer. As
in SybilGuard, we assume that each suspect S has a locally
generated public/private key pair, which serves to prevent
the adversary from “stealing” S’s identity after S is accepted.
When a veriﬁer V accepts a suspect S, V actually accepts
S’s public key, which can be used later to authenticate S. We
do not assume a public key infrastructure, and the protocol
does not need to solve the public key distribution problem
since the system is not concerned with binding public keys
to human beings or computers. A malicious user may create
multiple different key pairs for her different sybil nodes.
4. Background: SybilGuard
To better understand the improvements of SybilLimit
over SybilGuard and the challenges involved, this section
provides a concise review of SybilGuard.
Random walks and random routes. SybilGuard uses a
special kind of random walk, called random routes, in the
social network. In a random walk, at each hop, the current
node ﬂips a coin on-the-ﬂy to select a uniformly random
edge to direct the walk (the walk is allowed to turn back).
For random routes, each node uses a pre-computed random
permutation, “x1x2...xd” where d is the degree of the node,
as a one-to-one mapping from incoming edges to outgoing
edges. A random route entering via edge i will always exit
via edge xi. This pre-computed permutation, or routing ta-
ble, serves to introduce external correlation across multiple
random routes. Namely, once two random routes traverse the
same directed edge, they will merge and stay merged (i.e.,
they converge). Furthermore, the outgoing edge uniquely de-
termines the incoming edge as well; thus the random routes
can be back-traced. These two properties are key to Sybil-
Guard’s guarantees. As a side effect, such routing tables also
introduce internal correlation within a single random route.
Namely, if a random route visits the same node more than
once, the exiting edges will be correlated. We showed [42]
that such correlation tends to be negligible, and moreover,
in theory it can be removed entirely using a more complex
design. Thus, we ignore internal correlation from now on.
Without internal correlation, the behavior of a single ran-
dom route is exactly the same as a random walk. In con-
nected and non-bipartite graphs, as the length of a random
walk goes toward inﬁnity, the distribution of the last node (or
edge) traversed becomes independent of the starting node of
the walk. Intuitively, this means when the walk is sufﬁciently
long, it “forgets” where it started. This ﬁnal distribution
of the last node (or edge) traversed is called the node (or
edge) stationary distribution [25] of the graph. The edge
stationary distribution (of any graph) is always a uniform
distribution, while the node stationary distribution may not
be. Mixing time [25] describes how fast we approach the
stationary distribution as the length of the walk increases.
More precisely, mixing time is the walk length needed to
achieve a certain variation distance [25], ∆, to the stationary
distribution. Variation distance is a value in [0, 1] that de-
scribes the “distance” between two distributions—see [25]
for the precise deﬁnition. A small variation distance means
that the two distributions are similar. For a graph (family)
with n nodes, we say that it is fast mixing if its mixing
time is O(log n + log 1
∆). In this paper, we only care about
n), and we will simply say that a fast mixing graph
∆ = Θ( 1
has O(log n) mixing time. The following known result fol-
lows directly from the deﬁnition of mixing time and a useful
interpretation of variation distance (Theorem 5.2 in [19]).
This result is all we need in this paper about mixing time:
Theorem 1 Consider any fast mixing graph with n nodes. A
random walk of length Θ(log n) is sufﬁciently long such that
with probability at least 1 − 1
n , the last node/edge traversed
is drawn from the node/edge stationary distribution of the
graph.
In SybilGuard, a random walk starting from an honest
node in the social network is called escaping if it ever crosses
any attack edge.
Theorem 2 (from [42]) In any connected social network
with n nodes and g attack edges, the probability of a length-l
random walk starting from a uniformly random honest node
being escaping is at most gl/n.
Accepting honest nodes. In SybilGuard, each node per-
√
forms a random route of length l = Θ(
n log n). A ver-
iﬁer V only accepts a suspect S if S’s random route in-
tersects with V ’s. Theorem 2 tells us that V ’s random
√
route will stay in the honest region with probability at least
1 − gl/n = 1 − o(1) for g = o(
n/ log n). Theorem 1
√
√
further implies that with high probability, a random route
Θ(
n) independent random
n log n) long will include Θ(
nodes drawn from the node stationary distribution. It then
follows from the generalized Birthday Paradox [1, 26] that
an honest suspect S will have a random route that intersects
with V ’s random route with probability 1 − δ for any given
(small) constant δ > 0.
Bounding the number of sybil nodes accepted. To inter-
sect with V ’s non-escaping random route, a sybil suspect’s
random route must traverse one of the attack edges. Consider
Figure 2 where there is only a single attack edge. Because
of the convergence property, all the random routes from all
sybil suspects must merge completely once they traverse the
attack edge. All these routes differ only in how many hops
of the route remain after crossing the attack edge (between 1
and l − 1 hops for a length-l route). Because the remaining
parts of these routes are entirely in the honest region, they
6
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:45 UTC from IEEE Xplore.  Restrictions apply. 
Figure 2. Routes over the same edge merge.
√
√
√
are controlled by honest nodes. Thus, there will be fewer
n log n) random routes that emerge from the
than l = O(
sybil region. In general, the number of such routes will be
O(g
n log n) for g attack edges. SybilGuard is designed
such that only one public key can be registered at the nodes
on each random route. This means that the adversary can reg-
ister only O(g
n log n) public keys for all the sybil nodes
combined. In order to accept a suspect S, V must ﬁnd an
intersection between its random route and S’s random route
√
and then conﬁrm that S is properly registered at the intersect-
√
n log n) sybil nodes will be
ing node. As a result, only O(
accepted per attack edge. For g = o(
n/ log n), the total
number of sybil nodes accepted is o(n).
Estimating the needed length of random routes. While
√
the length of the random routes is Θ(
n log n), the value
of n is unknown. In SybilGuard, nodes locally determine
the needed length of the random routes via sampling. Each
node is assumed to know a rough upper bound Z on the
mixing time. To obtain a sample, a node A ﬁrst performs a
random walk of length Z, ending at some node B. Next A
and B each perform random routes to determine how long
the routes need to be to intersect. A sample is bad (i.e.,
potentially inﬂuenced by the adversary) if any of the three
random walks/routes in the process is escaping. Applying
√
Theorem 2 shows that the probability of a sample being bad
is at most 3gl/n = o(1) for g = o(
n/ log n).
5. SybilLimit protocol
√
As summarized in Table 1, SybilGuard accepts
√
n log n) sybil nodes per attack edge and further re-
O(
quires g to be o(
n/ log n). SybilLimit, in contrast, aims
to reduce the number of sybil nodes accepted per attack
edge to O(log n) and further to allow for g = o(n log n).
√
This is challenging, because SybilGuard’s requirement on
g = o(
n/ log n) is fundamental in its design and is simul-
taneously needed to ensure:
√
ber of sybil nodes accepted, O(g
• Sybil nodes accepted by SybilGuard. The total num-
• Escaping probability in SybilGuard.
The es-
caping probability of the veriﬁer’s random route,
O(g
n log n/n), is o(1).
n log n), is o(n).
√
• Bad sample probability in SybilGuard. When esti-
mating the random route length, the probability of a
bad sample, O(g
n log n/n), is o(1).
√
Thus to allow for larger g, SybilLimit needs to resolve all
three issues above. Being more “robust” in only one aspect
will not help.
SybilLimit has two component protocols, a secure ran-
dom route protocol (Section 5.1) and a veriﬁcation protocol
(Section 5.2). The ﬁrst protocol runs in the background and
maintains information used by the second protocol. Some
parts of these protocols are adopted from SybilGuard, and
we will indicate so when describing those parts. To highlight
the major novel ideas in SybilLimit (as compared to Sybil-
Guard), we will summarize these ideas in Section 5.3. Later,
Section 6 will present SybilLimit’s end-to-end guarantees.
5.1. Secure random route protocol
Protocol description. We ﬁrst focus on all the suspects in
SybilLimit, i.e., nodes seeking to be accepted. Figure 3
presents the pseudo-code for how they perform random
routes—this protocol is adapted from SybilGuard with little
modiﬁcation. In the protocol, each node has a public/private
key pair, and communicates only with its neighbors in the
social network. Every pair of neighbors share a unique sym-
metric secret key (the edge key, established out-of-band [42])
for authenticating each other. A sybil node M1 may disclose
its edge key with some honest node A to another sybil node
M2. But because all neighbors are authenticated via the edge
key, when M2 sends a message to A, A will still route the
message as if it comes from M1. In the protocol, every node
has a pre-computed random permutation x1x2...xd (d being
the node’s degree) as its routing table. The routing table
never changes unless the node adds new neighbors or deletes
old neighbors. A random route entering via edge i always
exits via edge xi. A suspect S starts a random route by
propagating along the route its public key KS together with
a counter initialized to 1. Every node along the route incre-
ments the counter and forwards the message until the counter
reaches w, the length of a random route. In SybilLimit, w is
chosen to be the mixing time of the social network; given a
fast-mixing social network, w = O(log n).
Let “A→B” be the last (directed) edge traversed by S’s
random route. We call this edge the tail of the random route.
Node B will see the counter having a value of w and thus