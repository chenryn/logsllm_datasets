software发出的请求，都必须对其提供一个相应的回应，因此需要模拟这个session，但是这需要针对proprietary
protocols有一个全面的理解。
###  Solutions to Challenges
**为了解决挑战C1** ，我们设计了一个新的控制机制，通过自动准确地同步GUI操作以及网络通信，到达任何被识别的input states。
**为了解决挑战C2** ，采用 **已有工作来逆向** 报文的格式，并且进行 **差异性分析识别字段与约束**
；为了识别协议状态以及过滤无效状态，不参用逆向的办法，而 **是建立基于执行路径与对应输入的state-book**
；为了能够对state能够达到较好地覆盖，提出新的切换state的策略。
**为了解决挑战C3** ，通过建立一组基于真实抓包流量建立的communication templates/patterns，进行PLC
device仿真，如果匹配不到合适的回复报文，那么就采用真正的PLC device.
## DETAILED DESIGN
ICS3Fuzzer的结构如下图所示，主要分为两部分Pre-processing phase和Fuzzing phase：
  1. Pre-processing phase 
    1. Functionality analysis. 分析如何在fuzzing loop期间自动化地开启会话。
    2. Proprietary protocol analysis. 分析报文格式以及状态空间，以帮助能够选择有价值的input states和生成高效的变异数据；根据捕获的流量模拟交互报文，从而不被限制在特定的硬件中。
  2. Fuzzing phase：全自动的，并且由四步工作组成 
    1. 根据从state-book，选择一个有价值的input state。
    2. 根据得到的协议格式信息，生成变异的输入。
    3. 自动化地同步控制GUI操作以及网络通信，将变异数据喂给已选择的input state。
    4. 监控supervisory software的status并且记录malformed input。
###  Functionality Analysis
此部分的目的是准备进行task/functionality的UI组件，通过网络接口进行会话。利用`guiAutolit`来实现“activator”，可用来触发GUI事件，比如鼠标移动等。
具体来说，此步分为两部分：
  1. 获取GUI handle：可以通过控制GUI handle来写脚本控制GUI事件
  2. 定义操作顺序：functionality是按照特定的GUI操作顺序出发的。
最终ICS3Fuzzer可利用guiAutolit来自动化实现fuzzing。
###  Proprietary Protocol Analysis
####  Inferring Protocol Format
利用现有工具`Towards automated protocol reverse engineering using semantic
information`
####  Obtaining State-Space
此步骤目的为了定义和区分session中的input state，往往一个session中包含许多input
state，并且其中有许多相似且重复的input state。
区分input states的办法：
  1. 直接的办法：比较messages的相似性，但不准确
  2. 论文方法：记录在对应input state下的execution trace（我理解为程序对每个message的execution trace），即是messages的区别很小也有可能导致十分不同的execution traces。在fuzzing过程中，应该着重关注那些能够导致更多中execution trace的input state。
由于本论文具有通用性，所以不专门分析特定ICS protocol的输入状态，而是建立维护一个state-book，其中包括code execution
trace以及corresponding inputs，并不需要回复输入状态的特殊语义。
具体通过DynamoRIO插桩实现trace收集，并且只record/dump在消息传输阶段的message
transmission（通过hook以及track send()以及recv()）。因此在state-book中的每一个input
state都对应着一个tuple，包括original message，execution trace，以及index。
####  Device Emulation
为了不被具体的硬件限制，论文选择基于获取到的报文模拟communication。
具有两个挑战：
  1. 当supervisory software初始化一个request时，需要根据抓取到的报文识别出对应的response.
  2. 需要调整对应报文中的动态字段。
对应上述挑战的解决办法：
  1. 设备中的request-response一般是非常相似的，可以根据抓取的报文建立对应关系。
  2. 根据人工总结的经验，加上人工分析，识别定义出报文中的动态变化字段。
如果上述办法仍然不能获取对应的response，那么就需要借助于真是的PLC device。最终ICS3Fuzzer可以对每个supervisory
software的request产生对用的response。
###  State Selection
对state-book中记录的input state中的三个属性，index、execution trace、original
message，赋予权重，所以每一个input state都具有一个权重，那么权重就可以代表每一个input state的价值。
权重的考量基于三个hypotheses:
  1. 网络通信越深，越有可能触发bug
  2. 当message呗转发给software，那么越多的BB被触发，越有可能存在bug
  3. input越复杂，越有可能造成crash
对应上述三个hypotheses的具体做法：
  1. 使用index代表depth。但是同时需要注意消除具有相似的state，比如导致复的行为，具体来说即相似的报文以及程序执行路径。
  2. 与AFL等基于反馈的fuzzer一致
  3. 输入越复杂，编译越多样，就有可能触发新的执行路径，具体使用message内被定义的字段数来代表复杂度。
最终选取state depth、basic blocks count、field count来代表上述三个hypotheses，最终计算出state
weight。
###  Input Generation
此步骤利用获取的protocol format来生成变异的输入，主要完成两个任务：
  1. 根据你想得到的protocol format生成输入
  2. 根据得到的约束关系纠正报文字段。
###  Data Feeding
fuzzing supervisory software需要同步网络输入以及GUI操作，此论文通过proxy机制来实现了这一目标。
包含了Dispatcher、GUI Proxy、Traffic Proxy，Dispatcher通过给traffic
proxy发送command来关系network traffic，通过给GUI
proxy发送command来关系GUI操作，自动化的实现了fuzzing的输入.
###  Crash Monitor
基于Windows EventLog Service来做。
没考虑由于程序挂起（program hang）导致的bug。
###  Manual Work
需要人工工作来完成预处理过程，以解决GUI操作以及protocol先验知识，主要包括四个方面：
  1. exploring GUI interface
  2. writing activators
  3. obtaining protocol knowledge，包括状态空间收集、报文template获取、协议格式逆向
  4. verifying the accuracy of the analysis.