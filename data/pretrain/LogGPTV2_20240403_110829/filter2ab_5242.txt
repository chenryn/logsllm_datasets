titleblackhat:asia-21 Scavenger: Misuse Error Handling Leading to Qemu/KVM Escape
Error handling code is used extensively in hypervisors, which is designed to capture unexpected behaviors and avoid crashing the vm, such as invalid inputs from guest users and insufficient memory. However, we find that incorrect use of error handling code or missing error propagation can lead to security problems such as privilege escalation. In this briefing, we demonstrate how to achieve a full guest-to-host escape exploitation through a misuse error handling code. Besides, we show that how the userspace memory can provide a reading/writing exploit primitive for information leak and code execution with the help of the natural hypervisor design principles. As far as we know, this is the first guest-to-host escape exploit in the context of error handling code.Remarkably, Scavenger is based on an uninitialized free vulnerability (Affected prior to Qemu 5.2.0), discovered in the nvme device, which is used to provide virtual solid-state drives (SSDs) service for the guest machine. And this is the first public virtual machine escape exploit in the drive device. The uninitialized variable resides on the heap. Its value can be controlled by heap Fengshui. Here are the procedures:(i) Firstly, Scavenger sprays heap with pointers to user memory; Therefore, we can control the object of free as a guest allocated buffer, turning arbitrary free to UAF.(ii) Secondly, when the guest allocated buffer freed by the host's process, we can obtain the leaked information in the guest's memory in order to bypass ASLR.(iii) Finally, we hijack the control flow by manipulating data pointers and overwriting it.Few virtualization developers and security researchers pay attention to the security impact of the error handling code on virtualization. We found this vulnerability by performing error handling code directed fuzzing. In this talk, we will demonstrate how to apply the error handling code target fuzzing technique to virtualization.We believe that the technique insights we present will benefit the researchers working in the same area: (1) The error handling fuzzing technique on virtualization; (2) How userspace memory could help to craft an exploit.