perform pop() to get the oldest element. Each slave maintains its
local TAIL (TAILi). When it invokes pop(), an element at TAILi is
popped. Once all the slaves pop the oldest element, we move the
global TAIL forward by one. For scalability, the test case log is de-
signed in a lock-free manner. In addition, even if the process runs
indefinitely, our fixed-size design guarantees a bound in memory
usage.
For fuzzer developers to leverage the test case log in practice,
we design several interfaces listed in Table 1.
Each fuzzer instance creates its own test case log at the very
beginning (create_log()). It also needs to attach to the test case
log of all other fuzzers for test case sharing (attach_log()). Dur-
ing fuzzing, a fuzzer pushes the executed test case information to
its test case log if the test case is interesting (push_testcase())
at the end of each fuzzing run; at the syncing phase, a fuzzer
pops a test case from its neighbor (pop_testcase()) to exam-
ine whether the test case is useful or not. Note that each fuzzer
always gets the first test case from the log, which it is yet to ex-
amine while avoiding the costly directory enumeration. More im-
portantly, since the tracing bitmap (i.e., trace_bits in AFL, and
__sancov_trace_pc_guard_8bit_counters in LibFuzzer) of every
generated test case is directly achieved, re-execution is not neces-
sary. The log is eventually destroyed by the fuzzer (close_log())
when fuzzing ends.
4 SCALING STATE-OF-THE-ART FUZZERS
We claim that all the application fuzzers that follow the five-step
fuzzing loop listed in §2 can benefit from at least one of our operat-
ing primitives. Table 2 concludes the applicability of these primi-
tives on 10 known open-source fuzzers developed in recent years.
In this section, we first explains on how our three operating
primitives can generally improve the performance of an applica-
tion fuzzer in §4.1. Among these selected fuzzers, American Fuzzy
Lop (AFL) and LibFuzzer are two representative ones which are
widely used and successful in finding numerous bugs. They also
serve as a foundation for many later research works and fuzzing
projects ([7, 21, 22, 36]). Thus, we implement two working proto-
types based on the Linux x86_64 platform by applying our new
operating primitives to AFL and LibFuzzer. §4.2 and §4.3 present
the related technical details in practice.
7
Figure 4: An illustration of shared in-memory test-case log to effi-
ciently share test case information (e.g., file name and trace bitmap)
among fuzzers. By sharing test case information, fuzzers can judge
if a test case created by other fuzzers is useful or not without re-
executing the test case or re-enumerating the test case directory.
Conceptually, a test case log is a fixed-size circular log supporting
push() and pop() operations. Unlike conventional circular log, how-
ever, an element is removed from the log once all fuzzers perform
pop() operations.
Our dual file system service creates a separate instance of a mem-
ory file system as the private working directory for every launched
fuzzer instance. This approach completely avoids the contention
of accessing test cases simultaneously under the same folder. In
addition, it also gives the illusion to fuzzers that only the memory
file system is available so that fuzzers create and read test cases in
the memory file system. To give such an illusion while providing
large capacity beyond memory and durability, our test case flusher,
the core component of the file system service, periodically checks
whether the memory usage of the memory file system exceeds the
pre-defined threshold. If so, it moves test cases in the memory file
system to the disk file system. These test case files are replaced with
the symbolic links that point to their corresponding copies on the
disk file system. We choose a victim file to be moved based on its
age (i.e., we always choose the oldest file). This age-based eviction
policy works well in fuzzing because the test cases generated earlier
are more likely to have lower coverage and are less likely to be
re-read by the fuzzer instance for mutation. Both the threshold
(h) and the proportion of the oldest test cases to be moved to the
disk (α) can be configured when launching the file system service
daemon.
Our approach defers the durability guarantee until test cases are
moved to the disk file system so as to support eventual durability.
However, in the context of fuzzing, such deferring is fine. Compar-
ing that relying on a single disk file system, there are two different
cases: 1) we can loose files on the memory file system upon system
crash and 2) there is a very small window in which a fuzzer cannot
see the moved file, when a file is moved but its symbolic link is not
yet created. However, those cases are completely fine in fuzzing
because they do not affect the correctness of fuzzing but makes
fuzzers re-generate or re-test such test cases.
3.3 Shared In-memory Test-Case Log
In the case of parallel fuzzing, a fuzzer leverages the test cases gener-
ated by its neighbors in the syncing phase. However, as mentioned
earlier, the current design of fuzzers requires expensive directory
enumeration to find new test cases and re-execute them to get trace
FuzzeriFuzzerjShared in-memory test case logbitmaptest casemetadata(e.g.,filename)(e.g., size)index 0bitmaptest casemetadata(e.g.,filename)(e.g., size)index 1bitmaptest casemetadata(e.g.,filename)(e.g., size)index N❶push()pop()❷...Session K2:  Fuzzing Finer and FasterCCS’17, October 30-November 3, 2017, Dallas, TX, USA2319Method Call
create_log(int id, size_t tc_size)
attach_log(int id)
push_testcase(int id, testcase_t *tc)
pop_testcase(int id, testcase_t *tc)
flush_log(int id)
close_log(int id)
Semantics
Create a shared in-memory test case log for the calling instance identified by id;
tc_size indicates the size of the metadata of a test case
Attach to the test case log belonging to the fuzzer instance id
Push a newly generated test case tc into the log of the instance id
Fetch a test case from the test case log of the instance id into tc
Flush out all the stale test cases from the instance id by force
Destroy the test case log owned by the instance id
Table 1: Shared in-memory test case log interface overview. Application fuzzer can leverage these interfaces to share test cases among running
instances and achieve scalable collaborative fuzzing. A fuzzer instance invokes push_testcase() to save the metadata of its generated test case
(e.g., filename, tracing bitmap) into its test case log, and invokes pop_testcase() to reference the information of the test cases evolved by other
fuzzer instances. Hence, directory enumeration and test case re-execution are no longer required.
Fuzzers
AFL
AFLFast
Driller
LibFuzzer
Honggfuzz
VUzzer
Choronzon
IFuzzer
jsfunfuzz
zzuf
Snapshot Dual FS
In-memory log
✓
✓
✓
-
-
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
-
✓
✓
✓
✓
✓
✓
✓
✓
-
-
Table 2: It shows how three proposed operating primitives can ben-
efit 10 chosen mainstream fuzzers including AFL [41], AFLFast [7],
Driller [36], LibFuzzer [29], Honggfuzz [21], VUzzer [34], Choron-
zon [12], IFuzzer [38], jsfunfuzz [35], and zzuf [2], according to their
design and implementation.
4.1 Overview
4.1.1
Snapshot System Call. First, the snapshot() system call
can be applied as a perfect substitute for fork() in the fork server
of AFL (see §4.2.1 for more details).
Quite a number of existing fuzzers such as Choronzon [12],
VUzzer [34], IFuzzer [38], jsfunfuzz [35] and zzuf [2] launch a target
instance by invoking fork() and execve() (i.e., subprocess.Popen()
in Python). The combination of these two operations are not scal-
able and dominate the time cost of fuzzing an application (see §2.2).
To apply the snapshot() system call to these fuzzers, we can in-
strument the target with the prologue which connects to the fuzzer
and sets the restore point, and the epilogue which is the callback
function even without the source of the target. The fuzzers can
thereby leverage the snapshot() system call in the same way as
AFL.
LibFuzzer creates a running thread for each target instance. Its
in-process model avoids the contention brought by fork(). There-
fore, the snapshot() system call becomes useless in such a case.
4.1.2 Dual File System Service. In most cases, a fuzzer instance
always needs to create and read test cases under a particular direc-
tory on a file system. And it is not scalable for multiple instances to
perform these operations on a disk file system. Thus all the appli-
cation fuzzers can benefit from our two-tiered file system service.
Considering the fact that the working directory of a fuzzer process
is configurable for most fuzzers, applying the file system service to
them is straightforward. LibFuzzer has multiple fuzzer instances
in one process. Consequently, assigning a separate directory for
each instance requires extra modification (see §4.3).
As a special case, zzuf does not generate input before launching
the target. It intercepts file and network operations and directly
mutates the program’s input with a given seed for reproduction.
Therefore, our two-tiered file system service does not bring much
benefit to zzuf by default.
4.1.3
Shared In-memory Test Case Log. Feedback-driven fuzzers
like AFL, LibFuzzer and Choronzon support parallel fuzzing by
sharing test cases among all the running instances. A fuzzer instance
periodically checks the test cases generated by its neighbors and
archives the interesting ones for itself. The performance bottlenecks
of this syncing phase mainly come from directory enumeration
and test case re-execution (see §2.3), which can be well solved by
applying the shared in-memory test case log.
Some evolutionary fuzzers such as VUzzer and IFuzzer do not
natively support collaborative fuzzing. The fuzzer instance solely
evolves without a syncing phase in its fuzzing loop. By applying
our shared in-memory test case log, these fuzzers can be extended
to support real multi-tasking on multiple cores without contention.
More general fuzzers like zzuf and jsfunfuzz are not driven by
any metric or feedback to evolve their test input at runtime. A
test case is considered interesting only when it triggers abnormal
behaviors (e.g., memory violations, timeout, assertion failures). For
these fuzzers, online test case sharing is not effective because of
the limited size of their generated corpus.
Derivatives. Driller [36] and AFLFast [7] are two AFL-based
fuzzers proposed in recent years. Driller extends AFL with sym-
bolic execution while AFLFast optimizes the test case scheduling
algorithm applied in AFL. As these two fuzzers do not modify the
controlling part of AFL, our primitives can also be applied to them
in the same way as AFL. Similarly, Honggfuzz [21] is a derivative
of LibFuzzer. It leverages hardware features to collect coverage
information without modifying the working model of LibFuzzer.
Thus, we can apply our operating primitives to it in the same way
as LibFuzzer.
8
Session K2:  Fuzzing Finer and FasterCCS’17, October 30-November 3, 2017, Dallas, TX, USA23204.2 Scaling AFL
Each of our three operating primitives can benefit AFL in solving a
corresponding performance bottleneck that AFL suffers from (see
§2).
4.2.1
Snapshot Server. Applying the snapshot() system call to
AFL is straightforward that does not require much engineering effort.
We instrument a new snapshot server before the main() entry of a
target application as a substitute of the old fork server.
The snapshot server first invokes sigsetjmp() to reserve the
user space execution context, including the current register values
and signal masks to a global area. Then, similar to the fork server,
it waits for the starting signal from the controlling AFL instance.
Once the snapshot server receives a request, it invokes snapshot()
with the command BEG_SNAPSHOT, the address of a callback function
cleanup(), which is also instrumented into the target application.
Moreover, the base address and size of the tracing bitmap are passed
into the kernel through shared_addr. The memory updates to the
bitmap, that occur during a fuzzing run, should not be reverted
because AFL relies on the bitmap state to determine whether or not
the previous test case is interesting.
The snapshot server directly calls the original main() with run-
time arguments and environment variables. If the snapshotted pro-
cess normally returns from main(), the instrumented callback func-
tion cleanup() will be invoked to inform the controlling AFL in-
stance about the exit status and call snapshot() with END_SNAPSHOT
to revert back to the snapshotted state.
In the instrumented assembly payload, we also register different
signal handlers for various kill signals, which call cleanup() with
their corresponding exit status. Note that AFL sends a SIGKILL to
the spawned child process of the fork server if the current run
is timed out. In our case, the AFL instance cannot kill the target
instance. Thus we make AFL send a SIGUSR1 to the snapshot server
instead when timeout occurs, which is also handled by redirecting
the control flow to cleanup().
4.2.2 Removing File System Contention. AFL can be directly de-
ployed on our two-level tiered file system without any modification.
The first tier, which is a memory file system (i.e., tmpfs), contains
a private directory for each AFL instance. AFL only interacts with
the memory file system to read and save test cases. The second tier
is the disk-based file system, which is transparent to the running
fuzzers. The dual file system service daemon periodically moves
some set of oldest test cases (α) from the first tier of the AFL’s private
directory, including all the saved test cases that cause either crashes
or hangs, to the second tier (disk-based file system) if the memory
usage is higher than the pre-defined threshold value (h). Moreover,
all generated test cases are eventually saved to the disk file system
by the service daemon if a running AFL instance terminates.
4.2.3 Efficient Collaborative Syncing. Here we explain how to
use our third operating primitive, shared in-memory test case log at
the syncing stage of AFL which saves time that an instance wastes
while iterating the directory and re-executing test cases obtained
from its neighbors.
During initialization, each AFL instance is assigned a test case
log that is shared among all the other fuzzers. And then it connects
to the test case logs of all its neighbors. Note that we already know
9
the number of running instances beforehand, which is a reasonable
assumption for parallel fuzzing on multiple cores and is also a com-
mon practice in various concurrent applications such as databases,
runtime systems etc. Each time a new interesting test case is added
to the fuzzing log (i.e., add_to_queue()), its file path, file size, and
the complete trace bitmap (i.e., trace_bits of 65,536 bytes by de-
fault) are combined as an element and saved into the shared logging
sequence.
During the syncing stage (i.e., sync_fuzzers()), a particular AFL
instance pops out unsynced elements in the shared test case log
from the other fuzzers. Then it directly references the saved trace
bitmap of the unsynced elements to determine whether or not
the corresponding test case is interesting. Later, the AFL instance
sweeps the stale elements out of its test case log after they have
been checked by all other fuzzers at the end of every syncing phase.
Note that AFL tries to trim the saved test cases to simpler ones with
the same path coverage, which means that the size of a test case
can shrink during fuzzing. This results in the stale file information
being saved in the test case log. However, an AFL instance always
makes a copy of the interesting test case synced from other fuzzers
in its own output directory. Thus, we rely on the return value of the
final write() to determine the up-to-date size of a test case from
another AFL instance.
4.3 Scaling LibFuzzer
LibFuzzer [29] is a specialized form of coverage-guided, in-process
fuzzer for fuzzing single-threaded libraries and applications. It is
fragile and restrictive compared with the AFL. To fuzz a library,
the programmer should link the LibFuzzer with the library and
provide a specific fuzzing entry point, also called target function, for
feeding the inputs to the library. At the time of fuzzing, LibFuzzer
tracks the reachability of the code, that is executed with either the
seed corpus data (input test cases) or the mutated results based on
the generated corpus data (mutated test cases). For code coverage,
LibFuzzer relies on the SanitizerCoverage [37] instrumentation
of the LLVM that catches various memory-related errors and keeps
track of memory accesses.
At a high level, each LibFuzzer instance maintains a trace pro-
gram bitmap, which it updates after obtaining the coverage infor-
mation provided by the instrumentation engine after every run.
Moreover, it also maintains a local, in-memory hash table that
stores the test cases LibFuzzer thinks are interesting, The key of
the hash table is SHA1 of the interesting test case it ran, which is
also saved on the disk so that other LibFuzzer instances can use
to make further forward progress. In particular, each LibFuzzer
instance periodically scans the shared corpus directory to obtain
any new test case that has a SHA1 value missing in the hash table.
Currently, this is done at the granularity of a second (default) if an
instances is unable to obtain new coverage after the mutation.
Launching the target application. LibFuzzer works by invoking
an entry function that wraps the target code a developer wants to
test. LibFuzzer also provides the option of running a multi-threaded
version in which the master process creates a pre-defined number
N of threads, where N is given by the user. Then LibFuzzer keeps
invoking itself within a single threaded mode for N times.
Session K2:  Fuzzing Finer and FasterCCS’17, October 30-November 3, 2017, Dallas, TX, USA2321Bookkeeping results. After invocation, each LibFuzzer instance
first creates a local log file, which logs information about the cov-
erage, test case output, and applied mutating strategies, as well
as the current syncing states. After creating the log, a LibFuzzer
instance L reads the corpus directory, if provided, and adds all the
input test cases into its hash table and then starts mutating each
of them. L fuzzes a library by first resetting the instrumentation
bitmap and then calling the target function with the generated
input buffer and its size. L updates its trace bitmap with the help
of the instrumentation engine and then calculates the coverage as
soon as the target function returns. If the coverage increases, L first
inserts the new input with its SHA1 into the hash table, and later
saves the input to the shared corpus directory on the disk.