public class StampedSample {
  private final StampedLock sl = new StampedLock();
  void mutate() {
      long stamp = sl.writeLock();
      try {
          write();
      } finally {
          sl.unlockWrite(stamp);
      }
  }
  Data access() {
      long stamp = sl.tryOptimisticRead();
      Data data = read();
      if (!sl.validate(stamp)) {
          stamp = sl.readLock();
          try {
              data = read();
          } finally {
              sl.unlockRead(stamp);
          }
      }
      return data;
  }
  // …
}
```
## LockSupport
```java
var t = new Thread(()->{
    for (int i = 0; i  tl = new ThreadLocal<>();
var t1 = new Thread(()->{
    tl.set("cxk");
    System.out.println(tl.get()); // "cxk"
});
var t2 = new Thread(()->{
    System.out.println(tl.get()); // null
});
t1.start();
t1.join();
t2.start();
```
使用ThreadLocal包装的对象只能在当前线程使用
![截图录屏_选择区域_20200925150807](/assets/截图录屏_选择区域_20200925150807.png)
原理: 
ThreadLocal使用了弱引用防止内存泄漏
注意：使用时，对象不再使用，必须手动remove，否则在使用线程池的情况下，线程如果没有被销毁，会产生内存泄漏
### 属性
```java
// 表示当前ThreadLocal在全局map中的存放位置
private final int threadLocalHashCode = nextHashCode();
// 它的hashCode是通过一个原子整数不断递增的形式给出的，这样可以保证每台机器的每一个ThreadLocal都有唯一的hashCode
private static AtomicInteger nextHashCode = new AtomicInteger();
// 用来存放各个ThreadLocal对应的数据
static class ThreadLocalMap {
    ...
}
```
### set
```java
public void set(T value) {
    Thread t = Thread.currentThread();
    // 获取当前线程的一个map
    ThreadLocalMap map = getMap(t);
    // 向map里面放数据（如果map为空，则创建map）
    if (map != null) {
        map.set(this, value);
    } else {
        // 这里创建map的时候，创建后会存入value
        createMap(t, value);
    }
}
// 也就是说每个线程都拥有一张map，这张map的可是ThreadLocal，这样当使用ThreadLocal存取数据时，就会通过ThreadLocal来在这张map上set/get数据
```
### get
```java
public T get() {
    Thread t = Thread.currentThread();
    ThreadLocalMap map = getMap(t);
    // 获取map进行get
    if (map != null) {
        ThreadLocalMap.Entry e = map.getEntry(this);
        if (e != null) {
            @SuppressWarnings("unchecked")
            T result = (T)e.value;
            return result;
        }
    }
    return setInitialValue();
}
```
### 应用
```java
// 获取当前的请求
RequestContextHolder.getCurrentRquest();
```
### 副作用
1. 线程池复用线程会导致ThreadLocal 也被重用 从而会导致脏数据的产生
2. 如果使用static修饰ThreadLocal 这个时候弱引用就无法防止内存泄露了
解决上面这些问题只需要使用的时候注意remove即可
## 锁的原理（AQS AbstractQueuedSynchronizer）
AQS 定义了一个volatile int state 作为共享变量 如果线程获取资源失败 就进入FIFO队列等待 成功后去资源就执行临界区代码 执行完释放资源 会通知同步队列中的等待线程来获取资源后出队执行
AQS 是一个锁框架，它定义了锁的实现机制，并开放出扩展的地方，让子类去实现，比如我们在 lock 的时候，AQS 开放出 state 字段，让子类可以根据 state 字段来决定是否能够获得锁，对于获取不到锁的线程 AQS 会自动进行管理，无需子类锁关心
### 整体架构
![20202251401](/assets/20202251401.jfif)
- 提供了一种框架，自定义了先进先出的同步队列，让获取不到锁的线程能进入同步队列中排队
- 同步器有个状态字段，子类需要实现一些方法，通过判断状态字段来判断能否得到锁
### 属性
```java
// 这个状态用来判断是否可以获得锁，每次获得锁时+1，释放锁-1
// 当子类继承AQS来实现锁时，要根据这个状态判断能否获得锁(为0才能获得)跟释放锁(为1才能释放)
private volatile int state;
// 同步队列的头与尾,底层是一个双向链表，用来阻塞获取不到锁的线程，并在适当时机释放这些线程
private transient volatile Node head;
private transient volatile Node tail;
// 条件队列，管理获取不到锁的线程，但条件队列不直接和锁打交道，但常常和锁配合使用
public class ConditionObject implements Condition, java.io.Serializable {
    // Condition 可以用来代替 Object 中相应的监控方法
    // 它提供了一种线程协作方式，并且都有明确语义
    /** First node of condition queue. */
    private transient Node firstWaiter;
    /** Last node of condition queue. */
    private transient Node lastWaiter;
}
static final class Node {
    ...
    volatile int waitStatus;
    // 在共享锁中用来表示下一个等待线程，排它锁则用来表示当前节点是共享还是排它模式
    Node nextWaiter;
}
```
### 获取锁
- 排它锁
```java
// 排它模式下，尝试获得锁
public final void acquire(int arg) {
    // tryAcquire让子类实现的，思路一般是根据state的值决定是否能获取到锁
    if (!tryAcquire(arg) &&
        // 如果获取不到就调用addWaiter让线程进入同步队列，然后acquireQueued这个方法代表进入之后会阻塞，直到被唤醒获得锁
        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
        // 获取锁失败，打断自身
        selfInterrupt();
}
// 追加到同步队列的队尾
private Node addWaiter(Node mode) {
    Node node = new Node(mode);
    for (;;) {
        Node oldTail = tail;
        // 如果队尾不为空，就将node插入到队尾
        if (oldTail != null) {
            // 将原来队尾的node设置为新加入node的prev
            node.setPrevRelaxed(oldTail);
            // 原子方式将node设置为队尾
            if (compareAndSetTail(oldTail, node)) {
                oldTail.next = node;
                return node;
            }
        // 队尾为空，需要初始化同步队列
        } else {
            initializeSyncQueue();
        }
    }
}
// 阻塞当前线程
final boolean acquireQueued(final Node node, int arg) {
    boolean interrupted = false;
    try {
        for (;;) {
            final Node p = node.predecessor();
            // 如果这个当前线程节点的前置节点是头节点，并且自己已经能获得锁了
            if (p == head && tryAcquire(arg)) {
                // 将自己设置为头节点
                setHead(node);
                p.next = null; // help GC
                // 然后返回
                return interrupted;
            }
            // 前一个节点状态为SIGNAL了，那么就阻塞自己(park)
            if (shouldParkAfterFailedAcquire(p, node))
                interrupted |= parkAndCheckInterrupt();
        }
    } catch (Throwable t) {
        cancelAcquire(node);
        if (interrupted)
            selfInterrupt();
        throw t;
    }
}
```
- 共享锁
```java
public final void acquireShared(int arg) {
    // 同样由子类实现
    if (tryAcquireShared(arg) = 0) {
                    setHeadAndPropagate(node, r);
                    p.next = null; // help GC
                    return;
                }
            }
            if (shouldParkAfterFailedAcquire(p, node))
                interrupted |= parkAndCheckInterrupt();
        }
    } catch (Throwable t) {
        cancelAcquire(node);
        throw t;
    } finally {
        if (interrupted)
            selfInterrupt();
    }
}
```
### 释放锁
- 排它锁
```java
public final boolean release(int arg) {
    // 同样留给子类实现判断是否能释放锁
    if (tryRelease(arg)) {
        Node h = head;
        // 后面有一些等待唤醒的节点
        if (h != null && h.waitStatus != 0)
            // 从头开始唤醒等待锁的节点
            unparkSuccessor(h);
        return true;
    }
    return false;
}
```
- 共享锁
```java
public final boolean releaseShared(int arg) {
    // 基本跟上面一样
    if (tryReleaseShared(arg)) {
        // 唤醒后面的线程
        doReleaseShared();
        return true;
    }
    return false;
}
```
### 条件队列
- 入队列等待 await
获得锁的线程，如果在碰到队列满或空的时候，就会阻塞住，这个阻塞就是用条件队列实现的，这个动作我们叫做入条件队列
- 单个唤醒 signal
之前队列满了，有了一些线程因为 take 操作而被阻塞进条件队列中，突然队列中的元素被线程 A 消费了，线程 A 就会调用 signal 方法，唤醒之前阻塞的线程