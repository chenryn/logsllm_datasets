# Linux-Stack Based V2X: White Paper
**Authors:** Duncan Woodbury, Nicholas Haltmeyer, and Robert Leale  
**Emails:** {p3n3troot0r, ginsback}@protonmail.com, PI:EMAIL  
**Date:** May 13, 2017

## Abstract
Vehicle-to-vehicle (V2V) and, more broadly, vehicle-to-everything (V2X) wireless communication enables semi-autonomous driving by exchanging state information between connected vehicles and infrastructure. Despite over a decade of standards development, particularly with IEEE 802.11p and the 1609 family, the lack of available implementations has hindered security community involvement in testing and refining these standards. Analysis of the WAVE/DSRC protocols reveals vulnerabilities that make them unsuitable for safety-critical systems. This paper presents a complete Linux-based implementation of IEEE 802.11p and 1609.3/4, providing a platform for hackers and academics to contribute to the development of secure standards for intelligent transportation.

## 1. Introduction
Vehicular ad-hoc networks (VANETs) are designed to disseminate critical safety messages, making effective security essential. A network compromise could enable an adversary to launch various attacks. Current VANET standards, such as IEEE 1609 (WAVE), use a certificate management system to ensure message confidentiality and authenticity, along with a misbehavior reporting system to maintain distributed trust. If an attacker compromises a peer, they can execute several types of attacks:

- **Distributing false safety messages:** This can lead to traffic obstruction or diversion, causing congestion or even accidents.
- **Masquerading as a toll station:** The attacker can collect payment information from passing vehicles.
- **Issuing false certificates:** This allows the attacker to grant privileges and proliferate other attacks.
- **Issuing false certificate revocations:** This can effectively deny service until new certificates are authorized.
- **Distributing false misbehavior reports:** This can either grant undue trust to malicious vehicles or deny service to well-behaved vehicles.

### 1.1 Contributions
We present a Linux kernel implementation of the IEEE 802.11p and 1609.3/4 standards, including all features related to transmission/reception, channel switching, and message encoding/decoding. Our implementation also includes a userspace utility that facilitates V2X communication using the SAE J2735 basic message dictionary, allowing interaction with other Linux systems and proprietary DSRC radios.

### 1.2 Wireless Access in Vehicular Environments (WAVE)
WAVE is a set of standards that form a comprehensive framework for vehicle-to-vehicle communication. The base protocol is defined in IEEE 802.11p, operating on the 5.85 to 5.925 GHz band. The carrier wave structure uses orthogonal frequency division multiplexing (OFDM). The remaining specifications are defined in IEEE 1609, covering message structure, security services, message aggregation, and forwarding within the ad-hoc network. Figure 1 shows the OSI-like structure of WAVE.

### 1.3 Channel Switching
WAVE subdivides the bandwidth into seven 10 MHz channels, dedicated to non-safety, traffic efficiency, and critical safety messages. Channels for longer-range communications have higher transmission power. WAVE-capable devices use a single antenna and switch between control (CCH) and service (SCH) channels every 50 ms. Figures 5 and 6 illustrate the channel subdivision and switching procedure.

### 1.4 WAVE Security
WAVE security, defined in IEEE 1609.2, uses a certificate system for encryption and signing. Certificates are chained against a trust anchor, typically a central certificate authority. Each certificate has associated permissions. WAVE supports a peer-to-peer certificate discovery mechanism, allowing vehicles and roadside units (RSUs) to request certificate information from nearby peers if the full chain cannot be verified.

## 2. Implementation
Our implementation integrates seamlessly with the Linux kernel networking subsystem. We modified the mac80211, cfg80211, and nl80211 standard Linux networking utilities and made limited changes to wireless hardware drivers (Atheros ath9k and Realtek rtlwifi). 

### 2.1 Modifications of mac80211 Subsystem
- Set wildcard BSSID during interface configuration.
- Add OCB mode to the list of hardware interface modes.
- Check for concurrent network interfaces and return an error if any are found.
- Replace certain OCB functions with those defined in ibss.c.

### 2.2 Modifications of cfg80211 Utility
- Add support for 5/10 MHz bandwidth channels.
- Include 5/10 MHz channels in comparison statements.

### 2.3 Modifications of nl80211 Subsystem
- Support OCB mode configuration.
- Define 5/10 MHz-wide channels.
- Allow exclusive use of ITS channels in OCB mode.

### 2.4 Additional Modifications of Wireless Subsystem
- Specify OCB mode in network interface configuration.
- Define additional configurations for OCB mode.
- Support deinitialization of OCB mode.
- Set BSSID to wildcard BSSID in OCB mode.
- Allow exclusive use of ITS channels in OCB mode.
- Add support for 5/10 MHz-wide channels.

### 2.5 Modifications Needed for Wireless Hardware Drivers
- Define OCB mode as a networking mode.
- Incorporate OCB mode into hardware capabilities.
- Define ITS-G5 channels in the 5.9 GHz band.
- Support 5/10 MHz-wide channels.
- Enable user modification of the hardware regulatory domain.

### 2.6 WAVE Short Message Protocol (WSMP)
The WSMP is implemented as a kernel module, providing mechanisms for encoding and decoding WAVE message primitives, including WSM, WSA, Service Info Segment, Channel Info Segment, WAVE Routing Advertisement, and Information Element Extension. Encoding/decoding is done in strict compliance with the standards. The module also includes a utility for handling WAVE-specific p-encoding.

### 2.7 Userspace Tools for V2X Stack
To use the V2X stack with a standard Linux distribution, the CRDA and wireless-regdb utilities must be modified to allow specification and seamless transition to a custom regulatory domain. Modified versions of these utilities are available in our GitHub repository.

## 3. Conclusions
We have presented a Linux-based implementation of V2X through the IEEE 1609 standards. This implementation aims to engage the security community in the development and testing of vehicular communication standards, facilitating growth and widespread interest in securing ITS infrastructure. The V2X stack is licensed under the GNU General Public License v2 to promote collaborative development.

## Example Usage
The following source code and output demonstrate the creation, encoding, and decoding of a WAVE Short Message:

```c
#include "common.h"
#include "encode.h"
#include "decode.h"
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

int main(int argc, char **argv) {
    int err = 0;
    size_t *len;
    struct wsmp_wsm *msg = calloc(1, sizeof(struct wsmp_wsm));
    struct wsmp_wsm *parsed = calloc(1, sizeof(struct wsmp_wsm));

    msg->subtype = 0;
    msg->version = WSMP_VERSION;
    msg->use_n_iex = 1;
    msg->tpid = 0;
    msg->n_iex = calloc(1, sizeof(struct wsmp_iex));
    msg->n_iex->count = 3;
    msg->n_iex->chan = 172;
    msg->n_iex->data_rate = 3;
    msg->n_iex->tx_pow = 30;
    msg->n_iex->use[WSMP_EID_CHANNEL_NUMBER_80211] = 1;
    msg->n_iex->use[WSMP_EID_DATA_RATE_80211] = 1;
    msg->n_iex->use[WSMP_EID_TX_POWER_USED_80211] = 1;

    uint8_t tmp = 0;
    msg->psid = p_to_hex(0xC00305, &tmp);
    if (tmp != 3)
        goto out;

    msg->len = 13;
    msg->data = calloc(msg->len, 1);
    char str[] = "Hello world!";
    memcpy(msg->data, str, msg->len);

    print_wsm(msg);

    size_t count = 0;
    uint8_t *bytes = wsmp_wsm_encode(msg, &count, &err, WSMP_STRICT);
    if (err) {
        // Handle error
    }

    // Further processing and decoding
out:
    free(msg);
    free(parsed);
    return 0;
}
```

This example demonstrates the basic steps for creating, encoding, and decoding a WAVE Short Message using our V2X stack.