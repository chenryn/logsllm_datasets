Certainly! Here is a more polished and coherent version of the provided text:

---

### DNS TTL Recommendations

**Short TTLs for Agility:**
Users of DNS-based load balancing or DDoS prevention may require short Time-to-Live (TTL) values. Typically, TTLs can be as short as 5 minutes, although 15 minutes often provide sufficient agility for many operators. Shorter TTLs enhance responsiveness, which is an exception to the general recommendation for longer TTLs.

**A/AAAA and NS Records:**
For A/AAAA records, their TTLs should be equal to or shorter than the TTL for NS records for in-bailiwick DNS servers (§4.2). This is because many resolvers treat them this way, so the configuration should reflect practical behavior. For out-of-bailiwick servers, A and NS records are usually cached independently, allowing for different TTLs if desired. In either case, short A and AAAA record TTLs may be beneficial if DDoS mitigation services are an option.

**Control Over TTLs:**
Since most resolvers are child-centric, you can directly control the used TTLs within the zone itself (§3). However, some resolvers use TTLs from glue records served by the zone’s parent. Therefore, it is advisable to configure both in-zone and glue TTLs identically, or recognize that some users will use one or the other. Unfortunately, the standard protocol for domain registration, EPP [23, 24], does not support setting TTLs.

We recommend that developers of resolver software move towards child-centric resolution, even if it means additional queries. DNSSEC verification requires evaluating queries from the child zone, and it is preferable to honor the actual domain owner’s choice of TTL over the parent zone operator's. In the meantime, we recommend that resolver developers document their resolver behavior as parent- or child-centric, and specify whether they trust or discard the additional section of DNS responses (§4).

### Related Work

**DNS Performance and Caching Efficiency:**
Previous studies have explored client-side caching through recursive resolvers from multiple perspectives. Jung et al. [27] conducted simulations in 2002 based on university traces to estimate the DNS cache hit rate given TTL. They found that longer TTLs improve caching, but TTLs shorter than 1000 seconds were sufficient to achieve most benefits. In a subsequent study [26], they modeled DNS caches as a function of TTL to explain their earlier results. Ager et al. [2] compared local DNS resolvers against Google and OpenDNS public ones, covering query response time but not its relation to DNS record TTLs.

Researchers at CWRU have examined client-side DNS [11, 48], showing how clients use TTLs in practice and that short TTLs are generally honored. Other researchers focused on mobile clients, finding that most TTLs are short [4]. Our work, however, focuses on provider-side configuration to ensure providers get the desired times and understand how these times influence response times and query volume.

Several groups have evaluated DNS performance at the root. Danzig et al. [14] showed a significant number of misbehaving resolvers. Fomenkov et al. [16] examined Root DNS latency before anycast was widespread, and Liu et al. [31] re-examined performance with anycast. Thomas and Wessels [51] highlighted the complexity of caching as seen from the Root DNS servers. Recently, Moura et al. [36] evaluated caching hit rates using datasets from production networks and RIPE Atlas experiments, finding cache hit rates of around 70% for TTLs ranging from 1800 to 86400 seconds. While this prior work measured caching and its effects, our focus is on how TTLs set in different places interact to create an effective TTL.

**Resolver Centricity and Stickiness:**
Guðmundsson [18] previously studied router stickiness, and both he and Qiao [42] studied resolver centricity. We extend their work to examine how centricity and stickiness affect caching and their current behavior.

**TTL and DNS Resilience:**
Pappas et al. [40] proposed two strategies to improve DNS resilience to DDoS attacks with NS-record caching. They suggested refreshing TTLs in certain circumstances and pre-fetching NS records for popular domains before expiration. Moura et al. [36] also examined the relationship between TTLs in DNS and resilience to DDoS attacks. They simulated various scenarios with different degrees of packet loss and showed that, together with retries, caching is a key component of DNS resilience. They recommended long TTLs where possible but did not suggest specific values. Unlike these studies, we focus on DNS under normal operation, examining how different records create ambiguity in the effective TTL and making recommendations for TTL values and where they must be set.

**RIPE Atlas:**
It is well known that the global distribution of RIPE Atlas probes is uneven, skewed towards Europe [8, 9, 47]. Although this distribution bias might affect quantitative data analysis, our qualitative analysis, contributions, and conclusions do not depend on the geographical location of probes.

### Conclusion

This paper examines DNS TTLs, demonstrating that the effective DNS TTL often differs from the configured value due to TTLs appearing in multiple locations and resolvers making different choices. We use controlled experiments to show how these factors interact and the need to control TTL in both parent and child zones. We highlight the performance benefits of longer TTLs, such as reduced latency and traffic. Our scans of deployed DNS show that operators today lack consensus on typical TTLs. Initial discussions with selected operators indicate interest in longer TTLs, and changes at Uruguay’s .uy, after our discussions, resulted in much lower median latency for users, as did two other ccTLDs. We list the issues operators should consider when selecting TTLs and suggest that while those using DNS-based load-balancing or DDoS-mitigation may require short TTLs (5 or 15 minutes), others may benefit from longer TTLs (of a few hours).

### Acknowledgments

We thank Paul Ebersman, Warren Kumari, Stefan Ubbink, Marc Groeneweg, Niek Willems, and Jelte Jansen for their comments on drafts of this paper. We also thank Sergio Ramirez (.uy) for his responsiveness and cooperation in this research.

This work uses measurements from RIPE Atlas (https://atlas.ripe.net/), an open measurement platform operated by RIPE NCC. Giovane C. M. Moura’s work on this project is part of the SAND project (http://www.sand-project.nl), a research project between SIDN Labs, the University of Twente, and NL Netlabs.

John Heidemann’s work is based in part on research sponsored by the U.S. Department of Homeland Security Science and Technology Directorate, Cyber Security Division (DHS S&T/CSD) via contract number HSHQDC-17-R-B0004-TTA.02-0006-I, by the Air Force Research Laboratory under agreement number FA8750-18-2-0280, and by the DHS S&T/CSD via contract number 70RSAT18CB0000014. John Heidemann and Wes Hardaker’s work is partially supported by NSF OAC-1739034, “CICI: RSARC: DDoS Defense In Depth for DNS.” The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation thereon.

Wes Hardaker’s work in this paper is partially supported by USC as part of B-Root research activity.

### References

[References listed here]

---

This version is more structured, clear, and professional, with improved flow and coherence.