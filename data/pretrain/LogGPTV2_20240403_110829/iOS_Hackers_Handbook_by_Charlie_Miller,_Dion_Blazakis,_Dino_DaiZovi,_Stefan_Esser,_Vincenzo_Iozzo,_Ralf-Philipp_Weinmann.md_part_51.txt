305–306 App Store, 104
allocation application stashing, 307
byte pools in ThreadX, 340–341 approval process, 103–104
defi ned, 189 code signing, 7
detecting kernel heap state, 293–294 how Apple protects, 2–3
dynamic memory in Nucleus PLUS, impact of sandboxing on apps,
338–340 133–137
iOS system allocator. see iOS system testing ROP payloads, 234
allocator understanding application signing,
kernel heap zone allocator, 286–291 78–79
large object, 201 Apple
learning alloc/dealloc basics, 191–195 Design, 110
Nucleus PLUS, 336–337 iPhone OS Application Signing
Qualcomm modem heap, 341–342 authority, 78–79
small object, 201–202 Mac OS X. see Mac OS X
TCMalloc. see TCMalloc Profi le Manager ID, 31–32
369
bbiinnddeexx..iinndddd 336699 44//1166//22001122 55::4400::5577 PPMM
370 Index n A–B
protecting App Store, 2–3 JailBreakMe v3, 242
Sandbox Guide, 111 jailbreakme.com, 14
Apple File Connection2 (AFC2) service, assumptions, fuzzing, 140
305–306 AT commands
Apple Push Notifi cation Service (APNS) baseband core dumps, 345–346
MDM network communication, 27–28 defi ned, 163–164
Profi le Manager and, 31–32 local stack buffer overfl ow, 348–350
AppleMatch, 132 AT+XAPP, 345–346
AppleMobileFileIntegrity (AMFI). see AT+XLOG, 358–359
AMFI (AppleMobileFileIntegrity) attack surface
AppleRGBOUT, 243 baseband attacks, 328
Application Sandbox Design Guide, 110 baseband processor, 346–347
applications exploitation, 185
baseband processor interface, 345 IOKit driver, 264
bundle installation, 307–308 PDU mode, 165
fuzzing iOS. see fuzzing iOS reduce in iOS security, 5–6
applications attacks, 9–14. see also exploitation
how sandboxing impacts App Store vs. attacks, baseband. see baseband attacks
platform, 133–137 authentication, Profi le Manager, 31
processor, 163 authorization
sandbox patches, 322 confi guration profi le, 18
sandboxing, 109–116 removing confi guration profi les, 26
signing, 78–79 automating ROP payload construction,
stashing, 307 230–232
/Applications directory, 322 AV (antivirus) software, 4
approval process, App Store, 103–104
B
arbitrary memory overwrite, 269–274
architecture B (branch) instruction, 220
MDM, 27 backtrace, 254–255
RISC, 220 base objects, 257–261
understanding iOS security, 5–8 Base Transceiver Station (BTS), 329–330,
arithmetic vulnerabilities 331
defi ned, 187 base utilities, 306
exploiting system allocator, 195–198 baseband attacks
exploiting TCMalloc, 206–211 exploiting baseband, 348–362
ARM GSM basics, 329–330
baseband processors, 328–329 overview, 325–329
basics, 220–222 RTOSes underneath the stacks, 335–342
fuzzing with simulator, 156 setting up OpenBTS, 331–335
loading fi rmware images in IDA Pro, summary, 362–363
344–345 vulnerability analysis, 342–348
manually constructing ROP payload, baseband core dumps, 345–346
225–226 baseband processor
ARM Cortex-A8 CPU, 2 defi ned, 163
ARM Cortex-A9 dual-core processors, 2 iOS security basics, 2
ARM Development Suite (ADS), 344–345 bdevsw_add(), 261
ASLR (Address Space Layout Bédrune, Jean-Baptiste, 55
Randomization) /bin, 306
defi ned, 8 binary code
dyld location, 96–97 kernel, 249–250
static analysis, 347
exploitation, 211–213
bbiinnddeexx..iinndddd 337700 44//1166//22001122 55::4400::5577 PPMM
Index n B–C 371
bind cache clearing, 324
how profi le bytecode works, 127 Call Control (CC), 330
policy enforcement, 125–126 case study: Pwn2Own, 213–217
BinDiff CC (Call Control), 330
debugging heap manipulation code, 206 cdevsw_add(), 261
testing infrastructure, 217 CDMA (Code Division Multiple Access)
BISC for x86, 231 air interface, 328
BL (branch and link) instruction, 220 cellular stack, 329–330
BLX instruction, 221 CEP (Connection End Point), 330
booting ramdisk CEPI (Connection Endpoint Identifi er),
brute-force passcode attacks, 61–62 330
jailbreaking, 303 CEPT (European Conference of Postal and
bootrom Telecommunication Administrators),
exploit types, 300 329
exploiting, 302–303 certifi cate authority (CA). see CA
branch (B) instruction, 220 (certifi cate authority)
branch and link (BL) instruction, 220 certifi cates
breaking code signing how provisioning works, 74
altering iOS shellcode, 96–101 provisioning profi les, 74–77
gaining App Store approval, 103–104 CFF (Compact Font Format), 149
overview, 95–96 chaining exploits, 242–247
using meterpeter on iOS, 101–103 channels
breakpoints, 255–256 GSM basics, 329–330
brute-force attacks on four-digit SMS messages, 163
passcodes, 62–63 class keys, 48
bsd, 250 classes
BTS (Base Transceiver Station), 329–330, bug, 186–188
331 IOKit driver object tree,
buffer overfl ows 257–261
defi ned, 187–188 className, 258–259
fi nding with fuzzing, 140 classSize, 258
kernel. see kernel heap buffer overfl ows clean return, 324–325
local stack buffer overfl ow, 348–350 client-side heap exploitation, 185
ROP introduction, 222–223 ClockTamer, 332
bugs. see also vulnerabilities CM (Connection Management), 330
classes, 186–188 CMS (RFC 3852 Cryptographic Message
fuzzing iOS applications. see fuzzing Syntax), 16
iOS applications coalescing, 340
ROP and heap, 224 Code Division Multiple Access (CDMA)
SMS, 182–184 air interface, 328
buildchar, 213 code linker, 96–101
bundle installation, 307–308 code signing
byte pools in ThreadX, 340–341 AMFI binary trust cache, 319–320
bytecode, 126–133 confi guration profi le signing, 33–34
cs_enforcement_disable (AMFI),
C
314–315
CA (certifi cate authority)
cs_enforcement_disable (kernel),
confi guration profi le installation, 22
313–314
confi guration profi le signing, 33–34
defi ned, 7
iPhone Confi guration Utility, 18
how sandboxing impacts App Store vs.
Profi le Manager and, 30–31
platform apps, 136
bbiinnddeexx..iinndddd 337711 44//1166//22001122 55::4400::5577 PPMM
372 Index n C–D
Ikee worm and, 10–11 confi guration management
jailbreakme.com and, 14 iPhone Confi guration Utility, 18–26
kernel exploitation and, 269 mobile confi guration profi les, 16–17
ROP and, 232 overview, 16
userland jailbreaks, 301 Connection End Point (CEP), 330
code signing and memory protections Connection Endpoint Identifi er (CEPI),
altering iOS shellcode, 96–101 330
application signing, 78–79 Connection Management (CM), 330
breaking code signing, 95–96 Construct, 57
dynamic code signing, 89–94 Container, 135
entitlements, 79–80 copying
gaining App Store approval, 103–104 copyin(), 255–256
Mandatory Access Control, 70–73 copyout(), 270
overview, 69–70 kernel heap buffer overfl ows, 285
provisioning, 74–77 kernel stack buffer overfl ows, 279
summary, 104–105 courier.push.apple.com, 27
using meterpeter on iOS, 101–103 CPUs
code signing enforcement application and baseband processors,
collecting and verifying signing 163
information, baseband processors, 328–329
80–84 taming iOS allocator, 190
how iOS ensures no changes are made Crash Reporter, 145–146
on signed pages, 88–89 crash reports
how signatures are enforced on CVE-2010-3832, 356–362
processes, 84–88 fuzzing MobileSafari, 158
codesign, 78 paniclog, 251–252
codesign_allocate, 55 PDF fuzzing, 148–153
comex PPT fuzzing, 154, 162
ASLR challenges, 212 testing ROP payloads, 233
JailBreakMe v3, 242–247 crashes
jailbreakme.com, 13–14 buffer overfl ows. see buffer overfl ows
kernel patching, 312 monitoring and testing Safari, 145–148
CommCenter monitoring SMS, 177–181
fuzzing SMS, 164–165 SMS bugs, 182–183
monitoring SMS, 177–178 crash.exe, 145–146
reverse engineering, 169 crashwrangler, 191
SMS bugs, 182–183 cs_enforcement_disable
SMS iOS injection, 176 AMFI, 314–315
SMS message attacks, 10 kernel, 313–314
Compact Font Format (CFF), 149 CS_HARD, 314–315
compilers CS_KILL, 87–88, 314–315
ROP, 231 csflags, 84
sandboxing compile, 119–120 current_proc(), 310
concatenated messages, 168 CVE-2010-3830, 274
confi guration CVE-2010-3832, 356–362
handling sandboxing from user space, Cydia, 307
123–124
D
OpenBTS, 332–335
Profi le Manager, 29–35 d_ioctl, 261
profi le signing, 33–34 DACs (digital-analog converters), 331
sandbox, 110 data cache clearing, 324
TrustedBSD, 122–123 data coding scheme (TP-DCS), 166
bbiinnddeexx..iinndddd 337722 44//1166//22001122 55::4400::5577 PPMM
Index n D–D 373
Data Execution Prevention (DEP). see DEP Device Firmware Upgrade (DFU), 301
(Data Execution Prevention) device keys, 48–49
Data Fault Address Register (DFAR), 359 devices
Data Link Connection Identifi ers (DLCI), attacking IOKit drivers through
330 properties, 265–266
data link layer, 346 enrolling in Profi le Manager, 38–44
data partition iOS security basics, 2
application stashing, 307 MDM. see Mobile Device Management
decrypting, 66–68 (MDM)
dumping, 65–66 taming iOS allocator, 190
jailbreaking, 303–304 DFAR (Data Fault Address Register), 359
data protection. see also code signing and DFU (Device Firmware Upgrade), 301
memory protections dictionary, 266
attacking user passcodes, 51–55 diff, 217
iPhone, iPhone Data Protection Tools digital baseband processor, 327
overview, 47–51 Digital Rights Management, 141
Data Protection API, 48–51 digital-analog converters (DACs), 331
data_partition.sh, 65–66 directories
deallocation application stashing, 307
defi ned, 189–190 how sandboxing impacts App Store vs.
dynamic memory in Nucleus PLUS, platform apps, 133
338–340 installing base utilities, 306
large object, 201 paniclog, 251
learning alloc/dealloc basics, 191–195 sandbox patches, 322
small object, 202 div
debug, 252–253 deallocation, 203
debugging tools Heap Feng Shui, 208–211
environment variables, 191 DLCI (Data Link Connection Identifi ers),
heap manipulation code, 204–206 330
kernel, 250–256 dlopen
monitoring test cases, 144 altering iOS shellcode, 100–101
ROP payload, 232–235 gaining App Store approval, 104
testing infrastructure, 217 dlsym
decision tree, 126–129 altering iOS shellcode, 101
decrementing, 278 gaining App Store approval, 104
decryption dock-connector-to-serial adapter, 253
data partition, 66–68 double-free bugs, 186–187
kernel binary, 249–250 downlink, 330
defragmenting heap, 206 downloading ldid, 55
delete, 264 drive-by-downloads
demo_bruteforce.py defi ned, 4
brute-force passcode attacks, 63 Mandatory Code-Signing and, 69–70
dumping keychain, 64–65 drivers, IOKit. see kernel extensions and
demux_count, 285–286 IOKit drivers
DEP (Data Execution Prevention) Dtrace
defi ned, 7–8 defi ned, 191
Mandatory Code-Signing and, 69–70 Heap Feng Shui, 206–211
ROP and, 219 dumb fuzzing, 141–142
desktop fuzzing, 149–152 dumping
Developer Program baseband core, 345–346
how provisioning works, 74 data partition, 65–66
provisioning profi les, 74–77 keychain, 64–65
bbiinnddeexx..iinndddd 337733 44//1166//22001122 55::4400::5577 PPMM
374 Index n D–F
DumpPanic, 251 European Conference of Postal and
dword, 97 Telecommunication Administrators
dyld (CEPT), 329
altering iOS shellcode, 96–101 European Telecommunications Standards
manually constructing ROP payload, Institute (ETSI), 329
225–226 Everyone group, 37–38
dyld_decache, 225 examine, 254
dyld_shared_cache exec, 72–73
ASLR challenges, 212 Executable and Linkable Format (ELF),
manually constructing ROP payload, 225 345
provisioning profi le validation, 77 execve(), 223
dyldinfo, 117 exfi ltrate fi le content payload, 235–242
dynamic analysis, 139. see also fuzzing iOS exploitation
applications ASLR, 211–213
dynamic code signing, 89–94 baseband, 348–362
dynamic linker bootrom, 302–303
altering iOS shellcode, 96–101 bug classes, 186–188
manually constructing ROP payload, 225 case study: Pwn2Own, 213–217
dynamic memory, 336, 338–340 installing untethering exploit, 304
dynamic trust, 84 iOS system allocator. see iOS system
dynmem_hdr, 339–340 allocator
kernel. see kernel exploitation
E
overview, 185
easy_install, 57–58 ROP. see ROP (return-oriented
editing confi guration profi les, 37 programming)
ELF (Executable and Linkable Format), 345 summary, 218
Elliott, David, 253 TCMalloc. see TCMalloc
embedded entitlements, 133–137 testing infrastructure, 217–218
emf_decrypter.py, 66–67 types of, 300–301
encoder, 172–173 extensions, kernel. see kernel extensions
encryption and IOKit drivers
attacking user passcodes, 51–55 extensions, sandboxing, 113–116
data protection, 47–51 external traps and methods, 266–268
iPhone data protection, iPhone Data externalMethod, 260
Protection Tools
extracting baseband fi rmware, 343–344
overview, 47
summary, 66–68 F
enforcing TrustedBSD policy, FDMA (Frequency Division Multiple
125–126 Access), 329
enrolling devices in Profi le Manager, fgNextPIEDylibAddress_ptr, 98–101
38–44 fi elds
enterprise. see iOS in the enterprise PDU mode, 166
enterprise accounts, 75 UDH information, 168
entitlements fi le formats
dynamic code signing, 89–91 fuzzing Safari, 144–145
how sandboxing impacts App Store vs. kernel binary, 249–250
platform apps, 133–137 PDF fuzzing, 148–153