SECTI0N 7.3
TOPOLOGICAL SORTING
171
ble if and only if the graph does not contain a cycle, which is a sequence of
edges that leads from a node back to itself. If the input graph contains a cycle,
then we must say so and indicate that no linear ordering exists.
Breadth-FlrstTopologlcal Sort
There are many algorithms that can be used to sort a graph topologically
Perhaps the simplest is one that at each iteration removes from the graph a
node with no predecessors. If all nodes can be removed from the graph this
way, the sequence in which the nodes are removed is a topological sort of the
graph. In the graph above, we could begin by removing node a and the edge
that comes from it. Then we could remove node c, then nodes f and h in either
order, and so on.
Our implementation uses a first-in, first-out data structure called a queue to
sequence the processing of nodes with no predecessors in a “brcadth-first
manner. After all the data has been read in, a loop counts the nodes and places
the front of the queue,prints its name,and decrements the predecessor count of
all nodes with no predecessors on the queue. A second loop removes the node at
cach of its successors. If the predecessor count of any of its successors becomes
zero, those successors are put on the back of the queue. When the front catches
up to the back and all nodes have been considered, the job is done. But, if some
nodes are never put on the queue, those nodes are involved in cycles and no
topological sort is possible. When no cycles are present, the sequence of nodes
printed is a topological sort.
The first three statements of tsort read the predecessor-successor pairs
from the input and construct a successor-list data structure like this:
nodepentsentslist
4
0
h
b
2
6
0
f,h
d
2
via
e
1
P
1
2
b,g
9
2
0
h
2
d,e
1
b
The arrays pcnt and scnt keep track of the number of predecessors and
of node x.The first line creates an element of pcnt if it is not already present.
successors for each node; s1ist[x,/] gives the node that is the i-th successor
---
## Page 182
172
EXPERIMENTS WITH ALGORITHMS
CHAPTER 7
tsort - topological sort of a graph
output: linear order,predecessors first
input:
predecessor-successor pairs
(if (1($1 in pcnt))
pcnt[$1] =0
put s1 in pcnt
pcnt[s2]++
count predecessors of s2
slist[s1,++scnt[s1]] = s2  add $2 to successors of s1
END ( for (node in pcnt)(
if (pcnt[node]== 0)
nodecnt++
 if it has no predecessors
q[++back]= node
queue node
for （front=1;front  age[y].
If we use the dependency relation
n: a b c
we update n by first updating a, b and c, which may in turn require further
updates. If any of the targets is neither a name in the makefile nor an exist-
ing file, we report the error and quit. Otherwise, we next examine the ages of
the targets, and if at least one is newer than n (that is, if n is older than some-
thing it depends on), we cxecute the commands associated with this dependency
relation. After executing the commands, we recompute the ages of all objects.
With a dependency relation like
print:
pr prog.h a.c b.c c.y
that is, one with no targets, we always execute the command associated with
this rule and recompute all ages.
The program malke takes a name as an argument and updates name using
the following algorithm:
1. It finds the rule for name in the makefile and recursively updates the tar-
gets , 2, , I on the right side of the dependency relation for name.If
for some i, t; is not a name and file r; does not exist, make aborts the
update.
2. If, after updating all the t's, the current version of name is older than one or
---
## Page 187
SECTION 7.4
MAKE:A FILE UPDATING PROGRAM
1177
more of the ,’s, or if name has no targets, make executes the command lines
following the dependency relation for name.
In essentially the same manner as in the previous section, make constructs a
dependency graph from the dependency relations in the makefile. It uses the
Unix command
1s -t
to order the files (newest first) by the time at which each file was last modified.
Each filename is entered into the array age and given a time that is its rank in
this ordering: the oldest file has the largest rank. If a name is not a file in the
indeed.
Finally. make uses the depth-first search procedure of the last section to
traverse the dependency graph. At node n, make traverses the successors of n;
if any successor becomes younger than the current age of n, make executes the
commands for n and computes a new set of ages. If make discovers that the
dependency relation for a name is cyclic, it says so and aborts the update.
To ilustrate how make works, suppose we type the command line
make prog
for the first time. Then make will execute the following sequence of commands
cc -c prog.h a.c
cc-c prog.h b.c
yacc c.y
mv y.tab.c c.c
cc a.o b.o c.o-1y -o prog
CC -C C.C
Now if we make a change to b.c and again type
boxd oxea
make will only execute
cc -c prog.h b.c
cc a.o b.o c.o -ly -o prog
make does not process them. Finally, if we again say
Because the other files have not changed since the last time prog was created,
nake prog
the result is
prog is up to date
because nothing has to be done.
---
## Page 188
178
EXPERIMENTS WITH ALGORITHMS
CHAPTER 7
nake -maintain dependencies
BEGIN (
while（getline 0)
if（$0-/~[A-Za-z]/）（#$1:$2$3..
if（++names[nn =$1]>1)
sub(/:/,"")
error(nm * is multiply defined")
for
（i=2;i 0)
current nane
error("illegal line in makefile:*$0)
ages()
compute initial ages
if （ARGv[1] in names）(
if （update（ARGV[1])=0）
print ARGv[1] * is up to date”
}else
error(ARGv[1] " is not in makefile*)
function ages(
for （t=1;（"1s -t*1getline f）>0;t++)
f,n,t)
close(°18 -t")
age[f] = t
# al1 existing files get an age
for (n in names)
if (1(n in age))
make n really old
if n has not been created
age[n] = 9999
function update(n,
changed,i,s)(
if (1(n in age)) error(n " does not exist")
if (1(n in names)) return 0
visited[n]= 1
changed = 0
for（1=1;i<=scnt[n];i++）{
if (visited[s = slist[n, i]] == 0) update(s)
else if (visited[s] = 1)
if （age[s]<e age[n]) changed++
error(s *and *n"are circularly defined")
visited[n]=2
if （changed1iscnt[n]s 0）(
printf（*xs",cmd[n])
system(cmd[n])
#execute cmd associated with n
age[n]-0
()8a5e
recompute all ages
 nake n very new
return 1
return 0
---
## Page 189
SECTION 1.5
Exercise 7-11. How many times is the function ages executed on the example? 
Exercise 7-12. Add some parameter or macro substitution mechanism so rules can be
casily changed. 
Exercise 7-13. Add implicit rules for common updating operations; for example, .c files
are processed by cc to make .o files. How can you represent the implicit rules so they
can be changed by users?
7.5 Summary
This chapter may have more of the flavor of a basic course in algorithms
than instruction in awk. The algorithms are genuinely useful, however, and we
-dns on psn q ueo yme mou jo Suuos us aeq no uoppe u 1e adoq
port experimentation with programs.
Scaffolding is one of the lessons. It often takes no more time to write a
small program to generate and control testing or debugging than it does to per-
form a single test, but the scaffolding can be used over and over to do a much
more thorough job.
often just right for extracting data from the output of some program and mas-
The other aspect is more conventional, though it bears repeating. Awk is
saging it for another; for example, that is how we converted sorting measure-
ments into grap input and how we folded statement counts into a profile.
Bibliographic Notes
Our quicksort,heapsort,and topological sort programs are borrowed from
Jon Bentley, as is the inspiration for the scaffolding and profiling programs.
Bentleys Programming Pearls columns in Communications of the ACM,June
and July, 1985, are good further reading. For an extensive discussion and
analysis of sorting and searching algorithms see D. E. Knuth's The Arr of Com-
puter Programming, Volume 3: Sorting and Searching (Addison-Wesley, 1973),
or Aho, Hopcroft, and Ullman’s The Design and Analysis of Computer Algo-
rithms (Addison-Wesley,1974).
The Unix program make is originally due to Stu Feldman; it was first
described in Sofrware Practice and Experience, April, 1979. For more discus-
sion of make and its behavior, see the article “Side-effects in Automatic File
Updating” by W. Miller and E. Myers in Sofrware -Practice and Experience,
September, 1986.
---
## Page 191
8
EPILOG
By now the reader should be a reasonably adept awk user, or at least no
longer an awkward beginner. As you have studied the examples and written
some of your own, you have probably wondered why awk programs are the way
they are, and perhaps wanted to make them better.
The first part of this chapter describes a little history, and discusses the
strong and weak points of awk as a programming language. The sccond part
cxplores the performance of awk programs, and suggests some ways of reformu-
lating problems that have become too large for a single program.
8.1AwK asa Language
We began working on awk in 1977. At that time the Unix programs that
searched files (grep and sed) only had regular expression patterns, and the
only actions were substitution and printing the whole line. There were no fields
and no numeric operations. Our goal, as we remember it, was to create a
pattern-scanning language that would understand fields, one with patterns to
match fields and actions to manipulate them. Initially. we just wanted to do
transformations on data, to scan the inputs of programs for validation, and to
programs.
The 1977 version had only a few built-in variables and predefined functions.
It was designed for writing short programs like those in Chapter 1. Further-
more, it was designed to be used by our immediate colleagues with little instruc-
tion, so for regular expressions we used the familiar notation of lex and
egrep, and for the other expressions and statements we used the syntax of C.
Our model was that an invocation would be one or two lines long, typed in
and used immediately. Defaults were chosen to match this style. In particular,
white space as the default field separator, implicit initializations, and no type
declarations for variables were choices that made it possible to write one-liners.