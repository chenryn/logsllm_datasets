if they insert every parameter check code snippet, micro-controllers’
limited memory space may affect the vehicle’s proper operation.
C. Case Studies
We detail four policy violations identified by PGFUZZ. We first
describe the underlying reasons causing each violation and then
show how attackers can exploit them to force undesired vehicle
states. We note that existing RV fuzzing works cannot discover
these bugs because they do not fuzz all input types and do not
implement a proper bug oracle to detect them.
1) Case Study 1 - Unexpected Behaviors due
to
Misimplementation: RVs must check a set of preconditions
to safely enter a new state. However, PGFUZZ discovered that
the flight control software does not check the preconditions or
incorrectly verify these preconditions.
12
01020304050Time (hour)050100150The cumulative #  of found bugsRandom fuzzing & excluded input spaceRandom fuzzing & full input spaceRandom fuzzing & input space minimizationComplete PGFuzz approach0102030Time (second)−200−1000Roll (degree)Desired rollMeasured roll0102030Time (second)−200−1000Roll (degree)Desired rollMeasured roll0102030Time (second)−100−50050100Pitch (degree)Desired pitchMeasured pitch0102030Time (second)−100−50050100Pitch (degree)Desired pitchMeasured pitchis in the middle position (i.e., maintaining the current altitude),
and the vehicle is in ALT_HOLD mode, it must maintain the current
altitude. We represent this requirement with A.ALT_HOLD2 policy
(See Table XII for its MTL).
Root Cause. PGFUZZ discovered that this requirement is not
correctly implemented if roll axis rate controller parameters
are changed. Figure 10b shows the drone’s altitude decreases
when the vehicle is in the FLIP mode (second 22) under normal
conditions. ArduPilot is able to maintain the current altitude
when switching back to the ALT_HOLD mode (starting from
second 24). However, if the values of the two roll axis rate
controller parameters (ATC_RATE_RLL_FF and ATC_RATE_R_MAX)
are modified, ArduPilot cannot maintain the altitude after a flip
maneuver although the flight mode is the ALT_HOLD and the
throttle stick is in the middle, as shown in Figure 10c. The root
cause is the broad range of accepted parameter values.
Attack. An attacker can exploit this vulnerability by assigning a
small value to the two roll axis rate controller parameters. Here
the attacker can manipulate the configuration parameters by either
overriding them before a flight or changing them after the vehicle
takes off. When the user triggers the FLIP mode, the drone fails
to recover a stable roll angle due to the limited roll angular velocity,
which leads to the failure to stay at the same altitude and eventually
crashing to the ground. We note that the changed roll parameters
do not affect the drone’s attitude control under its normal operation
since they do not require a large roll angle velocity. This prevents
users from noticing the limited roll angle velocity and, consequently,
the attack. To prevent such unstable attitude control, ArduPilot
requires to increase the minimum range values of ATC_RATE_R_-
MAX and ATC_RATE_RLL_FF. This bug is confirmed by ArduPilot
developers, and they proposed to update the parameter ranges.
3) Case Study 3 - Incorrect Altitude Computation after
Acrobatic Flying: Drones measure the same physical state from
multiple sensors to address sensor failures and perform sensor
fusion. For instance, GPS and barometer sensors measure altitude
simultaneously. However, PGFUZZ discovered that ArduPilot
incorrectly computes the altitude when high deviations in GPS
sensor occur. The drone cannot maintain its altitude in the
ALT_HOLD mode due to the incorrect altitude.
Policy. PGFUZZ discovered this policy violation while fuzzing the
A.ALT_HOLD2 policy, which is the same policy discussed in Case
Study 2 (Section VII-C2). While the violated policies are the same,
the input sequence that causes the violation and the violation’s
root cause differs. This is because PGFUZZ first reboots the drone
on the simulator to negate all changed configurations after finding
a policy violation. It then restarts fuzzing to find different bugs
related to the same policy.
Root Cause. PGFUZZ discovered that high deviations in GPS
sensor coupled with incorrectly assigned parameter values
result in the drone not maintaining its altitude in the ALT_HOLD
mode. First, PGFUZZ causes a high deviation in GPS sensor
measurements by assigning a value to the GPS_POS1_Z parameter
and triggering an acrobatic flying activity (e.g., FLIP or ACRO
modes). The high deviation causes ArduPilot to switch the altitude
measurement source from GPS to the barometer. Then, ArduPilot
incorrectly applies the GND_ALT_OFFSET parameter to calculate
the barometric altitude, causing an undesired altitude change, as
shown in Figure 10d. Particularly, ArduPilot sets the altitude to
zero when the vehicle is taking off, although the user assigns a
value to the GND_ALT_OFFSET before take-off. Hence, ArduPilot
(a) Altitude during ALT_HOLD
mode under normal conditions.
(b) Altitude during ALT_HOLD
mode, when a flip maneuver is
performed.
(d) Altitude during ALT_HOLD
mode, when the parameter
GPS_POS1_Z is set
incorrectly,
and a flip maneuver is performed.
(c) Altitude during ALT_HOLD
mode, when a flip maneuver
is performed, and ATC_RAT_-
RLL_FF and ATC_RATE_R_MAX
parameters are set incorrectly.
Fig. 10: Altitude values in different scenarios. The white color
background shows when the ALT_HOLD mode is enabled. The
green color shows the time the FLIP mode is enabled. The red
color shows the time A.ALT_HOLD2 policy is violated.
Policy. ArduPilot documentation explicitly states the conditions to
deploy a parachute: (1) the motors must be armed, (2) the vehicle
must not be in the FLIP or ACRO flight modes, (3) the barometer
must show that the vehicle is not climbing, and (4) the vehicle’s cur-
rent altitude must be above the CHUTE_ALT_MIN parameter value.
PGFUZZ detected policy violations while checking the A.CHUTE1
policy (See Table XII for its MTL) that defines these conditions.
Root Cause. PGFUZZ discovered that ArduPilot only checks the
last condition among the four preconditions when the parachute
is manually released. To illustrate, Figure 9a and Figure 9c depict
the drone’s attitude changes with the released parachute in the
ALT_HOLD mode, showing that the drone performs a stable landing.
However, when PGFUZZ triggers the FLIP mode and deploys the
parachute at the same time (at 22 seconds), it loses pitch controls
and then crashes on the ground at 28 seconds (See Figure 9b and
Figure 9d). The flight control software sends a crash warning mes-
sage to GCSs when it detects landing on the ground with an unstable
attitude. We identify the drone’s crash via the MAVLink message.
Attack. An attacker capable of spoofing/replaying user commands
to trigger the FLIP mode and deploy the parachute simultaneously
is able to cause a crash. We note that though the attacker triggers the
parachute, this action still looks like an innocent command because
the flight control software can automatically deploy the parachute
without the manual command when it determines that the drone
is losing attitude control. To prevent such unsafe state transitions,
ArduPilot requires to check the four conditions before deploying
the parachute. This bug is reported to ArduPilot developers, and
we are waiting for a reply from them.
2) Case Study 2 - Failing to Maintain Proper Altitude after the
Flip Maneuver: Each configuration parameter has its valid range.
However, PGFUZZ discovered that a set of parameters have incor-
rect valid ranges, which causes the vehicle to crash on the ground.
Policy. The ArduPilot documentation states that if the throttle stick
13
0204060Time (second)0255075100Altitude (meter)Measured altitudeDesired altitude0204060Time (second)0255075100Altitude (meter)0204060Time (second)0255075100Altitude (meter)0204060Time (second)020406080100Altitude (meter)(a) Roll angles under normal
conditions. It shows that the drone
safely lands on the ground.
Fig. 11: Landing on the ground in different scenarios. The green
and red colors have the same meaning with Figure 10.
(b) Roll angles under the attack trig-
gering Figure 10d and changes the
LAND_SPEED_HIGH parameter.
must not apply the offset to calculate the altitude after take-off.
However, PGFUZZ found that ArduPilot uses the offset, which
prevents the vehicle from staying at the same altitude.
Attack. An attacker can exploit this policy violation and crash
the drone, although the violation itself does not cause a physical
crash. Particularly, the attacker (1) configures the FS_EKF_ACTION
parameter to land the drone on the ground when the measured GPS
values deviate and (2) assigns a large value to the GND_ALT_OFFSET
and LAND_SPEED_HIGH parameters. Then, when a user executes
an acrobatic flying activity (e.g., FLIP mode), it triggers the policy
violation (Figure 10d). When the user executes the acrobatic flying
activity, GPS sensor values deviate. Hence, the drone starts landing
due to the attacker’s configuration on the FS_EKF_ACTION param-
eter. While the drone is landing on the ground, it uses two different
descent speeds: (1) LAND_SPEED_HIGH parameter is the descent
speed when the drone is higher than 10 meters from the ground
and (2) LAND_SPEED parameter is the descent speed when the
drone’s altitude is less than 10 meters. During the attack, the drone
keeps using the LAND_SPEED_HIGH while landing instead of the
LAND_SPEED because of the miscalculated altitude. In other words,
the drone misjudges the current altitude and maintains a fast descent
speed even though the altitude is less than 10 meters. Figure 11a
illustrates the drone’s safe landing under normal conditions, whereas
Figure 11b depicts that the drone hits the ground with 12.86
m/s when it is under attack. The attacker can stealthily conduct
this attack because (1) the parameter changes do not cause any
noticeable difference in the drone’s normal operation, and (2) after
the attacker changes these parameters, the bug is triggered when the
user executes the acrobatic flying. To prevent this bug, ArduPilot
should check all of the altitude values to stay at the same altitude
while the RV is in the ALT_HOLD mode instead of only checking
the previous altitude. We reported the bug to ArduPilot developers.
However, we are still awaiting a reply from them.
4) Case Study 4 - Failing to Trigger the GPS Fail-safe:
PGFUZZ discovered that assigning a negative value to the
COM_POS_FS_DELAY parameter, which represents the time delay
in turning on a GPS fail-safe and setting to specific flying modes
cause PX4 to fail to trigger the GPS fail-safe.
Policy. PX4 documentation states
time exceeds
that
COM_POS_FS_DELAY seconds after GPS loss is detected, the
GPS fail-safe must be triggered. We express this requirement
with PX.GPS.FS1 policy (See Table XII for its MTL). We note
that the time constraint of the MTL formula does not include a
constant upper bound (i.e., ♦[0,COM_POS_FS_DELAY+k]) but depends on
a variable k. This is because triggering the GPS fail-safe requires
COM_POS_FS_DELAY time and an additional time delay (k). The
additional delay k is caused by the soft real-time system’s task
if
(a) PX4 maintains
the ORBIT
flight mode under GPS signal loss.
(b) PX4 lands on the ground if the
drone navigates to a location under
GPS signal loss.
Fig. 12: Illustration of failing to trigger the GPS fail-safe in
different scenarios. The red color box represents when the GPS
signals are blocked (30-47 secs).
scheduling. We repeatedly measured the additional time delay k
and noticed its maximum value is less than a second. However, to
conservatively detect a policy violation, we set the upper bound
to the COM_POS_FS_DELAY twice of the maximum delay time.
Root Cause. The violation happens because PX4 developers do not
implement a parameter range check. PX4 v1.7.4 forces COM_POS_-
FS_DELAY parameter to have a value in the valid range. Thereafter,
it checks whether the GPS fail-safe needs to be triggered. However,
we found that the code lines to check the COM_POS_FS_DELAY
parameter are removed by developers in PX4 v1.9 while updating
the fail-safe code snippets. When a user assigns a negative value to
the parameter, it affects the decision to trigger the fail-safe when the
current flight mode is ORBIT or the drone is flying into a location.
Specifically, if the flight mode is not ORBIT or the drone stays at
the same location, PX4 correctly triggers the GPS fail-safe. This
observation makes it difficult for the developers to notice the bug.
PGFUZZ uncovered the bug by assigning a negative value to
the COM_POS_FS_DELAY parameter, changing the current flight
mode to ORBIT and turning off GPS signals. As a result, the drone
stopped the navigation and aimed at staying in the current location
via inertial measurement unit (IMU) sensors (e.g., accelerometers)
instead of turning on the GPS fail-safe. However, accumulated
errors from the IMU caused the drone to randomly float in the air
depending on the wind directions, as shown in Figure 12a.
Attack. An attacker can exploit this policy violation to prevent
the drone from handling scenarios in which the GPS signal is lost,
eventually leading to a physical crash of the drone. Specifically,
the attacker can assign a negative value to the COM_POS_FS_DELAY
parameter to trigger this bug. When the drone passes through an
area where the GPS signal is not available, the drone will fail to
turn on the proper GPS fail-safe, and it will fly to a wrong location,
as shown in Figure 12a and Figure 12b. In our example, the vehicle
deviates from its planned route by up to 20.7 meters in its latitude
and 70.5 meters in its longitude. Such a deviated flight path could
potentially make the vehicle physically crash.
The described attack can be stealthily performed, since the loss
of GPS signal is normal behavior that occurs naturally, especially
in some circumstances, such as when the drone flies in highly
urbanized areas. To prevent this bug, PX4 should restore the
previous valid range check statement. We reported the bug to PX4
developers, and they accepted it.
14
0204060Time (second)−200−1000100200Roll (degree)Desired rollMeasured roll0204060Time (second)−200−1000100200Roll (degree)Measured flight pathReference flight pathGPS signals are blocked0204060Time (second)−50050100Position error (meter)LatitudeLongitudeFramework
Software
crash
Control
instability
Types of bugs
Mis-
implementation
Unimplemented
command







Conventional Fuzzing
Methods [5], [44], [48]
AR-SI [36]
RVFuzzer [41]
MAYDAY [40]
Control Invariant [24]
Cyber-Physical
inconsistency [23]
Fuzzing for CPSs [22]
PGFuzz
TABLE X: A comparison of PGFUZZ with other fuzzing works.

























VIII. RELATED WORK
In comparison to other approaches including traditional fuzzing
methods [5], [44], [48], CPS fuzzing works [21], [22], and control
instability detection works [23], [24], [36], [40], [41] as presented
in Table X, PGFUZZ tests the whole control software by allowing
users to define any functional requirements in the form of MTL
formulas. This enables PGFUZZ to discover additional types of
bugs such as checking for safety conditions (e.g., when a drone
opens the parachute, as explained in Section VII-C1), drone phys-
ical crashes due to parameters’ incorrect ranges (Section VII-C2),
and incorrect altitude calculation (Section VII-C3). We note that
such bugs can only be discovered by PGFUZZ.
Traditional fuzzing methods [5], [44], [48] mainly discovers
memory corruption vulnerabilities
(e.g., buffer overflow).
However, PGFUZZ can discover new types of bugs, including
misimplementation, control
instability, and unimplemented
commands leading to undesired vehicle states.
Chen et al. [21] aims to detect triggered bugs by checking
if sensor or actuator values go outside specific safe bounds.
Unfortunately, this assumption is not always true in the scenarios
we consider in this paper. In fact, it is possible that a drone is
in a state in which every sensor reports reasonable values, while,
however, being in an unsafe state. For instance, consider a drone
having a vertical speed of 3 m/s. While this value is acceptable under