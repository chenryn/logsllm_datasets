让我们登录 Docker Hub 并推送新创建的映像。
在下面的示例中，您需要用自己的 Docker ID 替换我的 Docker ID。所以任何时候你看到“nigelpoulton”，把它换成你的 Docker ID (Docker Hub 用户名)。
```
$ docker login
Login with **your** Docker ID to push and pull images from Docker Hub...
Username: nigelpoulton
Password:
Login Succeeded 
```
 `在推送映像之前，您需要用特殊的方式对其进行标记。这是因为 Docker 在推送映像时需要以下所有信息:
*   `Registry`
*   `Repository`
*   `Tag`
Docker 是固执己见的，因此默认情况下，它会将映像推送到 Docker Hub。您可以推送到其他注册表，但是您必须显式设置注册表网址作为`docker image push`命令的一部分。
先前的`docker image ls`输出显示映像被标记为`web:latest`。这转化为一个名为`web`的存储库和一个标记为`latest`的映像。因此，`docker image push`将尝试将映像推送到 Docker Hub 上名为`web`的存储库。然而，我没有访问`web`存储库的权限，我所有的映像都在`nigelpoulton`二级命名空间中。这意味着我需要重新标记映像，以包括我的 Docker 标识。记得用你自己的 Docker 身份证代替。
```
$ docker image tag web:latest nigelpoulton/web:latest 
```
 `命令的格式是`docker image tag  `并且它增加了一个附加标签，它不会覆盖原来的。
另一个映像列表显示映像现在有两个标签，其中一个包括我的 Docker ID。
```
$ docker image ls
REPO                TAG       IMAGE ID         CREATED         SIZE
web                 latest    fc69fdc4c18e     10 secs ago     64.4MB
nigelpoulton/web    latest    fc69fdc4c18e     10 secs ago     64.4MB 
```
 `现在我们可以将其推送到 Docker Hub。您不能在我的 Docker Hub 命名空间中推送映像来重新发布，您必须标记映像才能使用您自己的映像。
```
$ docker image push nigelpoulton/web:latest
The push refers to repository [docker.io/nigelpoulton/web]
2444b4ec39ad: Pushed
ed8142d2affb: Pushed
d77e2754766d: Pushed
cd7100a72410: Mounted from library/alpine
latest: digest: sha256:68c2dea730...f8cf7478 size: 1160 
```
 `图 8.6 显示了 Docker 如何确定推送位置。
![Figure 8.6](img/figure8-6.png)
Figure 8.6
现在，映像被推送到注册表，您可以通过互联网连接从任何地方访问它。您还可以授予其他人访问权限，以拉取和推送更改。
本章其余部分的示例将使用两个映像标签中较短的一个(`web:latest`)。
##### 运行应用
容器化的应用是一个监听 TCP 端口`8080`的网络服务器。您可以在从 GitHub 克隆的构建上下文中的`app.js`文件中验证这一点。
以下命令将基于您刚刚创建的`web:latest`映像启动一个名为`c1`的新容器。它将 Docker 主机上的港口`80`映射到容器内的港口`8080`。这意味着您可以将网络浏览器指向运行容器的 Docker 主机的 DNS 名称或 IP 地址，并访问该应用。
> **注意:**如果您的主机已经在端口 80 上运行服务，您可以指定不同的端口作为`docker container run`命令的一部分。例如，要将应用映射到 Docker 主机上的端口 5000，请使用`-p 5000:8080`标志。
```
$ docker container run -d --name c1 \
  -p 80:8080 \
  web:latest 
```
 ``-d`标志在后台运行容器，`-p 80:8080`标志将主机上的端口 80 映射到运行容器内部的端口 8080。
检查容器是否正在运行，并验证端口映射。
```
$ docker container ls
ID    IMAGE       COMMAND           STATUS      PORTS                  NAMES
49..  web:latest  "node ./app.js"   UP 6 secs   0.0.0.0:80->8080/tcp   c1 
```
 `为了可读性，上面的输出被剪掉了，但是显示应用容器正在运行。请注意，所有主机接口(`0.0.0.0:80`)上都映射了端口 80。
##### 测试应用
打开一个网络浏览器，指向运行容器的主机的域名或 IP 地址。您将看到如图 8.7 所示的网页。如果您正在使用 Docker Desktop 或在本地机器上运行容器的其他技术。可以使用`localhost`作为 DNS 名称。
![Figure 8.7](img/figure8-7.png)
Figure 8.7
如果测试不起作用，请尝试以下操作:
1.  使用`docker container ls`命令确保容器已启动并运行。容器名为`c1`，您应该看到端口映射为`0.0.0.0:80->8080/tcp`。
2.  检查防火墙和其他网络安全设置是否阻止到 Docker 主机上端口 80 的流量。
3.  重试在 Docker 主机上指定高编号端口的命令(可能是`-p 5000:8080`)。
恭喜，应用已经容器化并正在运行！
##### 再看近一点
现在应用已经被容器化了，让我们仔细看看一些机器是如何工作的。
`docker image build`命令从顶部开始一次一行地解析 Dockerfile。
注释行以`#`字符开始。
所有非注释行均为**说明**，格式为`INSTRUCTION argument`。指令名称不区分大小写，但通常以大写形式书写。这使得读取 Dockerfile 更加容易。
一些指令创建新层，而另一些指令只是向映像配置文件添加元数据。
创建新图层的指令示例有`FROM`、`RUN`和`COPY`。创建元数据的示例包括`EXPOSE`、`WORKDIR`、`ENV`和`ENTRYPOINT`。基本前提是这样的——如果一条指令正在向映像中添加*内容*如文件和程序，它将创建一个新的图层。如果它正在添加如何构建映像和运行应用的说明，它将创建元数据。
您可以使用`docker image history command`查看用于构建映像的说明。
```
$ docker image history web:latest
IMAGE     CREATED BY                                      SIZE
fc6..18e  /bin/sh -c #(nop)  ENTRYPOINT ["node" "./a...   0B
334..bf0  /bin/sh -c #(nop)  EXPOSE 8080/tcp              0B
b27..eae  /bin/sh -c npm install                          14.1MB
932..749  /bin/sh -c #(nop) WORKDIR /src                  0B
052..2dc  /bin/sh -c #(nop) COPY dir:2a6ed1703749e80...   22.5kB
c1d..81f  /bin/sh -c apk add --update nodejs nodejs-npm   46.1MB
336..b92  /bin/sh -c #(nop)  LABEL maintainer=nigelp...   0B
3fd..f02  /bin/sh -c #(nop)  CMD ["/bin/sh"]              0B
 /bin/sh -c #(nop) ADD file:093f0723fa46f6c...   4.15MB 
```
 `上面输出的两件东西毫无价值。
首先。每行对应于 Dockerfile 中的一条指令(从底部开始向上)。`CREATED BY`列甚至列出了已执行的确切 Dockerfile 指令。
其次。输出中只显示了 4 行创建新图层(在`SIZE`列中具有非零值的图层)。这些对应于文件中的`FROM`、`RUN`和`COPY`指令。虽然其他指令看起来像是在创建图层，但实际上它们创建的是元数据而不是图层。`docker image history`输出看起来像所有指令创建图层的原因是构建和映像分层工作方式的假象。
使用`docker image inspect`命令确认只创建了 4 层。
```
$ docker image inspect web:latest
},
"RootFS": {
    "Type": "layers",
    "Layers": [
        "sha256:cd7100...1882bd56d263e02b6215",
        "sha256:b3f88e...cae0e290980576e24885",
        "sha256:3cfa21...cc819ef5e3246ec4fe16",
        "sha256:4408b4...d52c731ba0b205392567"
    ]
}, 
```
 `在`FROM`指令下使用来自官方存储库的映像被认为是一种良好的做法。这是因为他们的内容已经过审查，当漏洞被修复时，他们会很快发布新版本。从(`FROM`)小映像开始也是一个好主意，因为这样可以保持映像小，减少攻击面和潜在漏洞。
您可以查看`docker image build`命令的输出，查看构建映像的一般过程。如下图片段所示，基本流程为:`spin up a temporary container` > `run the Dockerfile instruction inside of that container` > `save the results as a new image layer` > `remove the temporary container`。
```
Step 3/8 : RUN apk add --update nodejs nodejs-npm
 ---> Running in e690ddca785f    
OK: 61 MiB in 21 packages
 ---> c1d31d36b81f               << Create new layer
Removing intermediate container  << Remove temp container
Step 4/8 : COPY . /src 
```
 `#### 通过**多阶段构建**转移到生产
说到 Docker 的映像，大就是坏！
大意味着慢。大意味着努力工作。而大意味着更多潜在的漏洞和可能更大的攻击面！
由于这些原因，Docker 映像应该很小。游戏的目的是只运送生产映像和运行你的应用所需的东西。
问题是……保持映像小*是*的辛苦。
例如，您编写 Dockerfiles 的方式对映像的大小有着巨大的影响。一个常见的例子是，每一条`RUN`指令都会增加一个新的图层。因此，通常认为最佳做法是将多个命令作为单个 RUN 指令的一部分，所有命令都用双&符号(& &)和反斜杠(`\`)换行粘合在一起。虽然这不是火箭科学，但它需要时间和纪律。
另一个问题是我们不会自己清理。我们将对一个映像运行一个命令，该命令会提取一些构建时工具，并且当我们将这些工具运送到生产环境时，我们会将它们保留在映像中。不理想！
多阶段建设救援！
多阶段构建就是在不增加复杂性的情况下优化构建。他们兑现了承诺！
这里是高层…
多阶段构建有一个包含多个 FROM 指令的 Dockerfile。每个 FROM 指令都是一个新的**构建阶段**，可以轻松复制之前**阶段**的人工制品。