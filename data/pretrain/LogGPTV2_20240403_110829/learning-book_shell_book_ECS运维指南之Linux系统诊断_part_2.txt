qne-vuaqs.Aa
# pan_selinux.so close should be the first session rule
session
required
pan_selinux.so close
session
required
pan_loginuid.8o
session
opt.ions1
# pan_selinux.so open should only be folloved by sessions to be executed in
pan_console.80
the user
session
context
required
uado onxnuteaued
session
required
session
pan_keyinit -so force revoke
pan_namespace.so
opticos1
session
include
postlogin
systen-auth
session
include
options1
pan_ck_connector.so
其中一行的作用为禁止本地登录，可以将其注释掉即可。
quiet
---
## Page 16
16
>CentOS 登录卡住的原因被我找到了
CentOS登录卡住的原因被我找到了
问题现象
系统登陆卡住，需要ctrl+c才能进去，如图。
如果一直等的话，会提示如下截图：
099.106.208.17820
---
## Page 17
CentOS登录卡住的原因被我找到了last_pid) ;
nr_running () , nr_thxeads,
retuxn 0;
Losd的计算函数：
8tatic unsigned long
calc_load (unsigned long load, umsigned long exp, unsigned long active)
1osd *- exp
load += active * (FIXED_1 - exp) 
return load >> FSHIFT;
/ *
* calc_load - update the avenrun losd estinates 10 ticks after the
• CPUs have updated calc_load_tasks.
* /
---
## Page 20
20
>找到 Linux虚机 Load高的“元凶”
void calc_globsl_load(void)
unsigned long upd - calc_load_update + 10}
long active/
if (time_before (jiffies, upd] )
return/
sctive = atomic_long_read (6cslc_losd_tasks) ;
active = active > 0 ? active * FIXED_1 : 0;
avenzum[0] - calc_load(avenrun [0] , ExP_1. active] /
svenrum [1] = calc_load (avenrun[1], EXP_5, active] ;
avenzum[2] - calc_load(avenrun [2] , ExP_15, active) 
calc_load_updste += LoAD_RSQ1
+ These are the constant used to fake the fixed-point lcad-average
+ counting. Sone notes:
- 11 bit fractions expand to 22 bita by the multiplies: thls gives
a load-average preclsion of 10 bita integer + l bita fractional
1f you vant to count load-averages noxe often, you need more
precialon, or rounding vi1l get you. Mith 2-second counting fxeq,
the EXP_n values would be 1981, 2034 and 2043 1f st111 using cnly
11 bit fracticns.
extern unalgned 1ong avenxun[1 :
+/
/+ Load averages */
extern vold get_avenrun [unsigmed long *lcads, umslgned long offset., 1nt
shift) ;
ndefine FSHIFT
11
/* nr of bita of pzecision */
ndefine FIXED_1
(5*HZ+1)
(1找到Linux虚机Load高的“元凶”
从统计出来的结果可以看到：
at Jan 20 15:54:12 CST 2018
D
958
958
957 ngi.nx
D
959
959
957 nglnx
D
960
960
957 nglnx
D
961
961
957 ng1.nx
957 nglnx
R
962
962
D
963
963
957 ng1.nx
D
964
964
957 ng1.nx
口
965
965
957 ng1.nx
口
966
966
957 ng1.nx
D
967
967
957 nglnx
D
968
968
957 ng1nx
D
969
969
957 ng1.nx
口
026
0L6
957 ng1.nx
D
971
971
957 ng1.nx
957 ng1.nx
D
972
973
973
972
D
957 ng1.nx
口
974
974
957 nglnx
R
975
975
957 ng1.nx
957 
ng1.nx
D
LL6
976
LL6
976
口
957 ng1.nx
D
978
978
957 ng1.nx
D
66
979
957 ng1.nx
980
980
957 ng.nx
D
983
983
957 nglnx
D
984
984
957 ng1nx
D
985
985
957 ng1.nx
D
986
986
957 ng1.nx
D
987
987
957 ng1.nx
D
988
988
957 ng1.nx
D
957 nglnx
11908 11908 18870 pa
Sat Jan 20 15:54:12 CST 2018
25.76 20.60 19.00 12/404 11912
注：R代表运行中的队列，D是不可中断的睡眼进程
在load比较高的时候，有大量的nginx处于R或者D状态，他们才是造成load上
升的元凶，和我们底层的负载确实是没有关系的。
最后也给大家share一下查CPU使用率比较高的线程小脚本：
#1/bin/bssh
LANG=C
PATH=/abin: /usr/ebin: /bin: /usr/bin
---
## Page 23
找到 Linux虚机Load 高的“元凶”OOMkiler是被谁触发的
OoMkiller是被谁触发的
问题描述
用户发现自己的服务器CPU在某一时刻陡然升高，但从监控上看，同一时刻的业务
量却并不高，客户怀疑是云服务器有问题，希望技术支持团队予以解决。
经过我们的排查，发现cpu的两次间歇高是由于客户系统当时发生了OOM（out
ofmemory）的情况，并触发了oom-killer造成的。但客户并不接受这个结论，认
为是云服务器的异常导致了cpu高，而cpu的升高又导致了oom情况的发生。也
就是对于cpu升高和oom谁为因果这件事上，客户和我们持完全相反的态度。
下面我们将通过对oom时系统日志的解读来说明cpu升高和oom之间的因果关系。
知识点梳理
1.预备知识
在解读日志之前，我们先回顾一下linux内核的内存管理。
1.1几个基本的概念
(1) Page 页
处理器的最小“寻址单元’是字节或者字，而页是内存的管理单元”。
(2) Zone 区
（a）区存在的原因：
有些硬件设备只能对特定的内存地址执行DMA（direct memory access）
操作。
---