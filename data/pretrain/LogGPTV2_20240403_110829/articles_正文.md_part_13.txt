![](media/image11.tiff){width="4.57in" height="1.825in"}
图7-15 SPL命令解释
## 7.7 小结
日志分析看似是技术问题，实际上是管理问题。日志分析在很多时候受困于技术不过硬。本章主要介绍了日志分析现状、日志分析方法等内容，并且给出了几个日志分析案例。
第8章 日志告警
>  概述
>
>  监控设置
>
>  告警监控分类
>
>  告警方式
>
>  小结
## 8.1 概述
日志记录了系统运行的过程。当系统出现故障时，及时采取有效的解决措施是运维人员的重要职责。那么，如何快速、准确地判断和定位系统出现的故障呢？日志系统的重要功能之一就是提供监控程序，对系统进行实时监控与分析，一旦发生故障，就及时发出告警，通知运维人员处理。本章介绍日志告警相关的内容。
## 8.2 监控设置
告警和监控是不可分割的，告警依托于监控，监控又触发告警。通常按照一定的频率和时间来设置监控点，对系统日志进行查询分析，一旦超过阈值，则触发告警，通知用户。
下面介绍监控设置的5个要素。
1\. 检测频率
监控是一项定时任务，即定时执行搜索来判断是否触发告警。而检测频率就是这个定时任务的执行时间间隔，即间隔多久执行一次任务。
检测频率的设置一般分为两种：Crontab类型和定时类型。
1）Crontab类型
Crontab源于Linux系统的Crontab命令，可用于设置在固定的时间点（如某年某月某日）或以固定的周期（如几分钟）执行程序。Crontab通过表达式设置时间间隔，Crontab表达式是一个字符串，以5个或6个空格分隔成6个或7个域，每个域都有自己的含义。
Linux系统级Crontab表达式为"\[分\] \[小时\] \[日\] \[月\] \[周\]
\[命令\]"。
Quartz（定时任务工具）的Crontab表达式为"\[秒\] \[分\] \[小时\] \[日\]
\[月\] \[周\] \[年\]"。
Splunk的Crontab表达式为"\[分\] \[小时\] \[日\] \[月\] \[周\]"。
日志易的Crontab表达式为"\[秒\] \[分\] \[小时\] \[日\] \[月\] \[周\]
\[年\]"。
Quartz是开源组织OpenSymphony在Job
Scheduling领域的一个开源项目，是一个完全由Java编写的开源作业调度框架。
下面以Quartz的Crontab表达式为例，简要介绍Crontab表达式的内容，详见表8-1。
表8-1 Crontab表达式的内容
  ---------- ---------- ---------- ----------------------- ------------------
  序号       说明       是否必填   允许填写的值            允许使用的通配符
  1          秒         是         0～59                   , - \* /
  2          分         是         0～59                   , - \* /
  3          小时       是         0～23                   , - \* /
  4          日         是         1～31                   , - \* ? / L W
  5          月         是         1～12或JAN～DEC         , - \* /
  6          周         是         1～7或SUN～SAT          , - \* ? / L \#
  7          年         否         empty 或 1970～2099     , - \* /
  ---------- ---------- ---------- ----------------------- ------------------
表8-1中的通配符说明如下：
> \* ：表示所有值。例如，将"分"字段设置成"\*"，表示每分钟都会触发操作。
>
> ?
> ：表示不指定值。例如，要在每月的10日触发操作，但不关心是周几，可以将"周"字段设置为"?"。
>
> \-
> ：表示区间。例如，将"小时"字段设置为"10-12"，表示10、11、12点都会触发操作。
>
> ,
> ：表示指定多个值。例如，将"周"字段设置成"MON,WED,FRI"，表示周一、周三和周五触发操作。
>
> L
> ：表示最后。在"日"字段中，它表示当月的最后一天（依据当前月份，如果是二月，还会判断是不是闰年）。在"周"字段中，它表示周六，相当于"7"或"SAT"。如果在"L"前加上数字，则表示该数据的最后一个。例如，将"周"字段设置成"6L"，则表示"本月最后一个周五"。
>
> W
> ：表示离指定日期最近的那个工作日（周一至周五）。例如，将"日"字段设置成"15W"，表示在离每月15日最近的那个工作日触发操作。如果15日正好是周六，则会在最近的周五（14日）触发操作；如果15日是周日，则会在最近的下周一（16日）触发操作；如果15日正好是工作日（周一至周五），则就在当天触发操作。如果指定格式为"1W"，则表示在每月1日之后最近的工作日触发操作。如果1日正好是周六，则在3日（下周一）触发操作。注意："W"前只能设置具体的数字，不允许设置区间。"L"和"W"可以组合使用。如果将"日"字段设置"LW"，则表示在本月的最后一个工作日触发操作。
>
>  \#
> ：序号（表示每月第几周的周几）。例如，将"周"字段设置成"6#3"，表示每月第三周的周六。
以下给出一些Crontab表达式示例，更多示例和使用准则可参考相应工具的官方文档。
"- \* \* \* \* \* ?"表示每分钟执行一次任务。
"- 0/5 \* \* \* \* ?"表示每5秒执行一次任务。
"- 0 0/5 \* \* \* ?"表示每5分钟执行一次任务。
"- 0 15 10 \* \* ?"表示每天上午10:15触发操作。
"- 0 0 12 \* \* ?"表示每天中午12点触发操作。
"- 0 \* 14 \* \* ?"表示在每天下午2点到2:59期间的每分钟触发操作。
"- 0 0/5 14 \* \* ?"表示在每天下午2点到2:55期间的每5分钟触发操作。
"- 0 0/5 14,18 \* \*
?"表示在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发操作。
"- 0 0 2 1 \* ?"表示在每月1日的凌晨2点执行任务。
"- 0 15 10 ? \* MON-FRI"表示周一到周五每天上午10:15执行任务。
2）定时类型
按照固定的时间间隔或周期执行监控任务。例如，每5分钟执行一次，或者每2小时执行一次。其实，Crontab表达式也可以表示固定的时间间隔，如"0/20
\* \* \* \* ?"表示每20秒执行一次，"\* \* \* \* \* ?"表示每分钟执行一次。
2\. 目标日志
目标日志用于设置需要被监控的日志文件，以指定查询的日志范围。如果是统一采集分布在多个系统多个机器中不同种类的日志，还需要对每个日志进行标记，以便系统判断监控范围。所以设定目标日志，其实就是指定日志的标记，从而使搜索具有针对性和区域性。一般日志的标记可以是IP、hostname、appname或自定义标记。
3\. 查询语句
查询语句或搜索语句由系统可识别的搜索语言构建而成，用于筛选系统故障的关键字。系统的运行情况和故障信息都被记录在日志文件中，而查询语句就是用于查询这些故障信息或用于统计运行时的数据变化的。例如，若某系统的数据库连接不上，就会在日志中记录"数据库失联"，要想判断数据库连接是否正常，就需要通过查询语句定期搜索日志内容，查找是否有"数据库失联"的字样。查询语句可以是Linux下grep和管道符的组合命令，也可以是约定的JSON或key-value数据，还可以根据需要自定义查询语句并进行词法和语法解析。
4\. 时间区间
时间区间用于设置日志的查询时间范围，以日志打印的时间戳为基准。例如，查询10分钟内产生的日志中是否有某些关键字，就需要设置监控点（如13:00）进行检测，检测时查询的是时间戳从当前时间到10分钟前（即12:50～13:00）的日志。需要注意时间区间的开闭，一般情况下为"左闭右开"（即包含12:50，不包含13:00）。
时间区间通常和检测频率搭配使用。检测频率如果设置为每5分钟执行一次，那么时间区间可以设置为左闭右开5分钟，即检测从当前时间至5分钟前的日志。从理论上讲，这样设置可以使每个时间点的日志都被查询到且不重复。但是，日志入库经常有些许延迟。例如，时间戳是13:00的日志，可能在13:02才被录入，如果在13:00进行检测，那么12:58～13:00期间的日志就会丢失，造成漏查。在这种情况下，可以设置时间区间为从当前时间的前2分钟到当前时间的前12分钟，从而规避延迟导致的漏查。例如，在13:00检测的不是12:50～13:00的数据，而是12:48～12:58的数据。但通常入库延迟的时间并不能确定为一个精确的数值，当对时间和告警要求比较高时，如果时间区间的提前设置比入库延迟大，就会扩大查询日志的时间范围，从而导致查询重复。对于这种情况，可以在获取查询结果之后进行去重。
5\. 触发条件
触发条件是告警触发的判断依据，一般通过设置阈值、比较操作符和级别来同搜索结果进行比对，还可以根据需要增设其他自定义的条件限制。阈值是设置一个对比点，一般以数值作为表现形式；比较操作符是设置和阈值进行比较的方式，较为简单的有\>、=、\=。注意：一般只能触发一个级别的告警，高级别的告警触发优先于低级别的告警触发。例如，查询结果是3，只会触发高级告警，而不会触发中级告警和低级告警。
## 8.3 告警监控分类
告警监控对日志的查询，归根结底是对某些关键字或关键语句出现情况的统计分析。对日志内容的查询，实际上也可转化为一种统计分析。例如，查询某条语句在某段时间内是否出现过，实际上就是统计这条语句在该时间范围内出现的次数是否小于1。统计分析经常建立在对日志进行解析（如正则解析）并提取所需目标字段的基础之上。
统计易于形成指标，从而可以和阈值进行比对。除了人工设置查询语句，如今又出现了智能运维，即引入机器学习，通过对历史故障数据的大规模分析，预测即将发生的故障。本节主要介绍5种统计类型的告警监控，并简要介绍智能告警。本节中的示例（包括查询语句）仅用于示意，不代表准确的配置，不同的系统有不同的配置机制。
### 8.3.1 命中数统计类型的告警监控
命中数统计类型的告警监控是最简单的配置方式。这种方式统计某段时间内命中某个语句的次数，然后与设置的触发条件进行比对，从而判断是否触发告警。
告警需求：需要每2分钟检测一次日志sys.log，如果5分钟内出现"connect to
database failed"语句的次数超过3次，就触发高级告警。
相关示例见表8-2。
表8-2 命中数统计类型的告警监控示例
+-------------+--------------------------------------------------------+
| 监控要素    | 需求设置                                               |
+=============+========================================================+
| 检测频率    | 定时：2分钟                                            |
|             |                                                        |
|             | Crontab：0 0/2 \* \* \* ?                              |
+-------------+--------------------------------------------------------+
| 目标日志    | sys.log                                                |
+-------------+--------------------------------------------------------+
| 查询语句    | count(\"connect to database failed\")                  |
|             |                                                        |
|             | （说明：统计"connect to database                       |
|             | failed"语句出现的次数）                                |
+-------------+--------------------------------------------------------+
| 时间区间    | 5分钟                                                  |
+-------------+--------------------------------------------------------+
| 触发条件    | 比较操作符：\>=                                        |
|             |                                                        |
|             | 阈值：3                                                |
|             |                                                        |
|             | 级别：高                                               |
+-------------+--------------------------------------------------------+
### 8.3.2 字段统计类型的告警监控
字段统计类型的告警监控，是针对某个特定字段的统计值而设置的告警监控。统计方法有很多种，且包含一些与统计相关的函数，如cardinality（独立数）、sum
（总和）、avg（平均值）、max（最大值）、min（最小值）等。如果当前字段的统计值达到了阈值条件，就触发告警。
告警需求：解析日志request.log并提取出request_time字段和字段值，request_time字段代表应用程序每次发出HTTP请求到获得返回结果之间的时长。需要每5分钟执行一次，如果10分钟内的平均请求时长大于500ms，则触发低级告警。
相关示例见表8-3。
表8-3 字段统计类型的告警监控示例
+-------------+--------------------------------------------------------+
| 监控要素    | 需求设置                                               |
+=============+========================================================+
| 检测频率    | 定时：5分钟                                            |
|             |                                                        |
|             | Crontab：0 0/5 \* \* \* ?                              |
+-------------+--------------------------------------------------------+
| 目标日志    | request.log                                            |
+-------------+--------------------------------------------------------+
| 查询语句    | \* \| stats avg(\'request_time\')                      |
|             |                                                        |
|             | （说明：字段名为request_time，统计函数为avg）          |
+-------------+--------------------------------------------------------+
| 时间区间    | 10分钟                                                 |
+-------------+--------------------------------------------------------+
| 触发条件    | 比较操作符：\>                                         |
|             |                                                        |
|             | 阈值：0.5                                              |
|             |                                                        |
|             | 级别：低                                               |
+-------------+--------------------------------------------------------+
### 8.3.3 连续统计类型的告警监控
连续统计类型的告警监控是字段统计类型告警监控的进阶版。后者查询某个字段的统计值是否满足条件，而前者查询的是某段时间内某个字段的统计值满足条件的次数。连续统计包含两种统计，一种是对某个字段值的统计，另一种是对字段值满足条件次数的统计，最终的触发条件是针对次数统计的，只有次数达到了设置的阈值条件，才会触发告警。
告警需求：解析日志request.log并提取出status_code字段和字段值，status_code字段代表请求返回的状态码，如200表示请求成功，505表示服务不可用，404表示页面无效等。需要每10分钟执行一次，统计30分钟内status_code字段的状态码是404或超过404的次数，如果次数超过10次，就触发中级告警。
相关示例见表8-4。
表8-4 连续统计类型的告警监控示例
+-------------+--------------------------------------------------------+