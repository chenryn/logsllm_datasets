αxα
m
xα+1 for x ≥ xm,
for x < xm,
0
(cid:3)n
where xm and α are the cutoﬀ and scale parameters, respectively. The mean of
the Pareto distribution is αxm/(α−1) and its variance is (xm/(α−1))2·α/(α−2).
It is noted that when α ≤ 2, the variance becomes inﬁnite. If we set α ≤ 2,
then we cannot apply the central limit theorem on
Xi due to the inﬁnite
variance. It is noted that Xi drawn from the Pareto distribution is a ﬂoat number.
In practice, we generate (cid:4)Xi(cid:5) spooﬁng IP addresses for sure, where (cid:4)x(cid:5) denotes
the largest integer no greater than x, and an extra one with probability Xi−(cid:4)Xi(cid:5).
In Section 5, we shall present the rationale behind using the Pareto distri-
bution for generating Xi and also its limitation. To make size estimation even
more diﬃcult, RatBot employs another level of obfuscation in generating Xi
(parameter-level obfuscation). Instead of using a ﬁxed mean for Xi, the
mean of Xi on the i-th obscure bot actually depends on certain attributes of the
i=1
RatBot: Anti-enumeration Peer-to-Peer Botnets
141
bot itself. Measurements from the Storm botnet suggest that bot infection is not
uniformly distributed either over diﬀerent ASes or geographically [6]. Hence, we
let the mean number of spooﬁng IP addresses generated by an obscure bot be a
function of the time zone where the bot is located. In previous works, security
analysts used the observed IP addresses to derive their geographic locations us-
ing IP geolocation tools [1] and thus their corresponding time zones. Now that
spoofed IP addresses are used, it is diﬃcult to accurately infer the time zone of
each bot, which renders it hard to estimate the mean of each Xi.
An obscure bot may use a dynamic IP address to communicate with other
peers. Whenever the obscure bot observes that the IP address of the hosting
machine has changed, it regenerates its spooﬁng IP addresses as above.
4.3 Bot Behavior Description
In a typical P2P protocol, a packet between two peers can be classiﬁed into three
categories: request, response, and data transfer. TCP makes spooﬁng diﬃcult
because it requires handshaking between peers. In many normal P2P networks,
request and response signaling packets are delivered through UDP and data
transfer uses TCP. We consider the two cases in the following. (1) If the P2P
botnet is an exclusive P2P botnet, UDP can be chosen by design for delivering all
request, response and data transfer packets. (2) If the P2P botnet is an immersive
one, the botmaster does not have the freedom to choose the transport layer
protocol. In this study, we assume that request and response signaling packets use
UDP. If bot communications do not involve any data transfer packets, spooﬁng
becomes much easier; however, if the P2P protocol uses TCP for data transfer
and bots need data transfer for C&C messages, it leaves a door for more accurate
bot size estimation by the adversary, as will be explained in Section 8.
For an explicit bot, its behavior conforms to the standard P2P protocol. For
an obscure bot b, let I(b) denote the set of spooﬁng IP addresses associated with
it. The behaviors of an obscure bot are given as follows.
Response packets. An obscure bot does not respond to any request by another
peer. On the arrival of a request packet, it silently drops the packet. As the packet
is delivered through UDP, which is connectionless, the origin of the request
packet does not know whether the recipient receives the packet or not.
Request packets. We ﬁrst consider a naive packet-level obfuscation scheme for
request packets. When an obscure bot b needs to send out a request packet to
peer A at time t, it replicates the packet for |I(b)| times and each of these packets
uses a distinct source IP address from set I(b). Including the original request
packet, there are in total |I(b)|+1 packets to be sent to peer A. For each obscure
bot, we deﬁne its obfuscation window as w time units. We randomly reorder the
|I(b)| + 1 packets as p0, p1, ..., and p|I(b)|. Packet p0 is sent out at time t. The
interval between the sending times of packet pi and pi+1 where i = 0, 1, ...,|I(b)|
is drawn from an exponential distribution with mean w/|I(b)|.
As the order of the packets is random, the recipient peer, if a monitoring node
by the adversary, cannot determine which packet carries the authentic source IP
142
G. Yan, S. Chen, and S. Eidenbenz
address. However, every time a request packet with an authentic source IP is sent,
packets with all associated spooﬁng IP addresses are also sent to the recipient.
Hence, if the recipient is a monitoring node deployed by the adversary, she
can cluster IP addresses with the same (or approximately the same) number of
appearances within w time units. It is highly unlikely that source IP addresses
in normal request packets would show such strong correlation as in the naive
obfuscation scheme. As such, even though the adversary does not know exactly
which source IP address is authentic, he can still infer the actual size of the
botnet by assuming that IP addresses frequently appearing in the same interval
of w time units would come from the same obscure bot.
It is noted that request packets are usually used by a bot to search for C&C
messages from the botmaster. Hence, to prevent correlation-based analysis, Rat-
Bot uses a session-level obfuscation scheme for each search operation. Figure 2
illustrates the diﬀerence between packet-level and session-level obfuscation. Sup-
pose that an obscure bot needs to ﬁnd a data item with key K. We call it an
authentic session, which contains the whole sequence of the peer nodes this bot
has contacted in order to accomplish this search operation.
For each of its spooﬁng IP addresses, the obscure bot will create a spooﬁng
session, which contains a sequence of peer nodes that are randomly drawn from
a local peer node repository. This repository, denoted R, contains peers that
were observed in the past authentic sessions and also the current neighbors that
the obscure bot knows. It is noted that peers in an authentic session may appear
with a certain order. For instance, when a bot searches a data item with key K
in a DHT P2P network, peers in the authentic session are ordered (or partially
ordered) in their distances from key ID K. Hence, when constructing the sequence
of peers in a spooﬁng session, such orders are also mimicked.
The intervals between the starting times of sessions, including both authentic
and spooﬁng ones, are randomly drawn from an exponential distribution with
mean γ time units. The order of the starting times of spooﬁng sessions is ran-
domized. The authentic session is inserted among the top φ spooﬁng sessions,
if there are so many, and its place is also randomly chosen. The decision on φ
Source
Destination
1 2 3
4
A A A A
Source
Destination
Source
Destination
Source
Destination
4 2
B B
3
1
B B
3
C
2
C
4
C
1
C
2
D
1
D
4
D
3
D
time
Source
Destination
1
A
1
C
Source
Destination
Source
Destination
Source
Destination
1
G
2
E
2
C
2
H
2
B
3
E
3
A
3
B
3
D
3
G
3
K
3
I
3
J
4
G
time
(1) Packet-level obfuscation
(2) Session-level obfuscation
Fig. 2. Obfuscation comparison (In packet-level obfuscation, each authentic packet is
mixed with a number of packets with spoofed sources but the same destination; in
session-level obfuscation, each authentic session is mixed with a number of sessions
with spoofed sources and previously observed peers as destinations)
RatBot: Anti-enumeration Peer-to-Peer Botnets
143
should make it diﬃcult to tell which session is authentic but meanwhile ensure
that the start of the authentic session would not be postponed signiﬁcantly due
to obfuscation. In our implementation, we let φ be 5.
Let Ψ denote the empirical distribution of the number of request packets sent
in an authentic session. For each spooﬁng session, we use Ψ to generate the
number of request packets. Each of these request packet carries the spooﬁng IP
address as its source IP and search key K, and is sent to every peer node in
the corresponding spooﬁng session. The interval between two request packets is
randomly drawn from the empirical distribution of the intervals between request
packets in the past authentic sessions. We use Γ to denote this distribution.
Data transfer packets. If botnet C&C information is stored as a ﬁle, each
bot needs to fetch the ﬁle from the host machine. If RatBot is designed to be an
exclusive P2P botnet, UDP can be chosen for data transfer. Otherwise, if it is an
immersive P2P botnet, RatBot makes its decisions in the following order: (1) If
the C&C information can be spread without involving data transfer, RatBot will
not use data transfer. For instance, C&C information can be stored as metadata
tags in a KAD-based P2P network. (2) If the P2P network allows UDP for data
transfer, RatBot will use UDP instead of TCP for data transfer. (3) Only if the
P2P network uses only TCP for data transfer, RatBot would use TCP. It is noted
that the third option exposes the identity of obscure bots if the peer hosting the
C&C information is actually a monitoring node deployed by the adversary. This
is because TCP requires a three-way handshake between the obscure bot and
thus the host machine and the connection cannot be spoofed.
5 Rationale
In this section, we explain why a high variance distribution such as the Pareto
distribution is used to generate Xi in Section 4.2. As we assume an adversarial
model in which the adversary knows the distribution used to generated Xi, we
must ensure that the adversary’s knowledge does not lead to a good estimation
of the botnet size. The adversary also knows that an observed IP address cannot
be from an explicit bot if it is used in response packets. Let M be the number
of IP addresses observed by the adversary that never respond to any requests.
The challenge is: can the adversary infer the number of obscure bots provided
that he knows the distribution used to generate Xi?
i=1
(cid:3)n
If only the distribution-level obfuscation is used, all Xi are independent and
identically-distributed random variables. According to the law of large numbers,
Xi always approaches nμ, where μ is the mean of Xi, when n is large. As
the adversary knows the distribution and thus μ, he can estimate the botnet size
as M/(μ+1). To defeat this type of inference, it is necessary to use a distribution
Xi can still be far away from nμ at reasonable
that converges so slowly that
scales of botnet sizes.
The Chebyshev’s inequality tells us that P{|Y − ¯Y | ≥ t} ≤ t−2V ar(Y ), where
¯Y and V ar(Y ) are the mean and variance of random variable Y , respectively.
Hence, the convergence speed of
Xi is aﬀected by the variation of Xi. That
(cid:3)n
i=1
(cid:3)n
i=1
144
G. Yan, S. Chen, and S. Eidenbenz
(cid:3)n
i=1
explains our choice of the Pareto distribution: for α < 2, its variation is inﬁnite
and thus slows down the convergence of
Xi.
Suppose that there are 100, 000 obscure bots and the average number of spoof-
ing IP addresses an obscure bot generates is 20. We consider four diﬀerent set-
tings for the scale parameter: α = 1.01, 1.1, 1.5, and 1.8. We set the cutoﬀ
parameter accordingly to obtain the same mean for Xi. We simulate 1000 cases
with diﬀerent random number generation seeds. In each case, we assume that
the adversary sees all the obscure and spoofed IP addresses. Let the observed
total number be M. The adversary estimates the number of actual obscure IP
addresses as M/21 as each obscure IP address has 20 spoofed ones. The following
table shows the mean and the standard deviation of the adversary’s estimation:
α
1.01
1.1
1.5
1.8
mean
23596.80 81758.83 99854.08 99962.19
standard deviation 83014.82 91258.15 4553.54 1262.98
From the table, it is clear that when α is close to 1, the variability of the
estimated bot size becomes more signiﬁcant. For instance, when α = 1.01, even
after 1000 sample runs, the derived mean is still far away from the actual one,
which is 100000. In reality, the adversary witnesses the result of only one sample;
hence, if α is small and thus the variability is very high, the adversary will get
an estimate on the botnet size with high variation.
Using heavy tailed distributions such as the Pareto distribution to generate Xi
does have its limitation, even though they can produce highly variable results.
The high variation of these distributions actually results from their high skewness
in their probability density functions. Figure 3 depicts the probability density
function of the Pareto distribution when α = 1.01 and the mean is 20. Clearly,
it is highly skewed as P(Xi ≤ 1) = 0.805, which means that around 80% of the
data points, if drawn from this distribution, would stay below 1.
To see how this would help the adversary’s estimation, we simulate the ob-
served number of spooﬁng IPs when there are 1000, 10000, 100000, and 1000000
obscure bots. Each obscure bot uses the Pareto distribution with mean 20 and
scale parameter 1.01 to generate the number of spooﬁng IP addresses. For each
scenario, we simulate 1000 times. The results are shown in Figure 4, where each
data point represents the number of observed spooﬁng IPs. Note that for each
scenario, the number of observed spooﬁng IPs is highly clustered among the
1000 sample runs. Suppose that the adversary has observed 3000 spooﬁng IP
addresses. Then, he can infer that the real size of the botnet is likely to lie be-