### Description

**Allocator:**
- **VirtualAllocEx**: This is the preferred method for allocating memory in a remote process.
- **NtMapViewOfSection**: This option is only suitable for same-architecture injection. For cross-architecture memory allocations, VirtualAllocEx is always used.

**Memory Allocation Parameters:**
- **min_alloc (4096)**: The minimum amount of memory to request for injected content.
- **startrwx (false)**: Specifies whether the initial permissions for the injected content should be RWX (Read, Write, Execute). The alternative is RW (Read, Write).
- **userwx (false)**: Specifies whether the final permissions for the injected content should be RWX. The alternative is RX (Read, Execute).

### Content Transformation
The `transform-x86` and `transform-x64` blocks are used to pad the content injected by Beacon. These blocks support two commands:
- **prepend**: Inserts a string before the injected content.
- **append**: Adds a string after the injected content.
Ensure that prepended data is valid code for the target architecture (x86 or x64). The `c2lint` program does not validate this.

### Code Execution
The `execute` block controls the methods Beacon will use to inject code into a process. Beacon evaluates each option, determines its usability for the current context, and tries the method if it is applicable. If the method fails, it moves on to the next option. The available options include:

| Option             | x86 -> x64 | x64 -> x83 | Notes                                                                 |
|--------------------|------------|------------|-----------------------------------------------------------------------|
| CreateThread       | Current process only | - | - |
| CreateRemoteThread | Yes        | No cross-session | - |
| NtQueueApcThread   | -          | -          | "Early Bird" injection technique. Only for suspended processes.       |
| RtlCreateUserThread| Yes        | Yes        | Risky on XP-era targets; uses RWX shellcode for x86 -> x64 injection. |
| SetThreadContext   | Yes        | -          | Only for suspended processes.                                         |

**Variants:**
- **CreateThread** and **CreateRemoteThread** have variants that spawn a suspended thread with the address of another function, update the suspended thread to execute the injected code, and then resume the thread. Use `[function] "module!function+0x##"` to specify the start address to spoof. For remote processes, only `ntdll` and `kernel32` modules are recommended. The optional `0x##` part is an offset added to the start address. These variants work only for x86 -> x86 and x64 -> x64.

**Coverage:**
The chosen execute options must cover various corner cases, including self-injection, injection into suspended temporary processes, cross-session remote process injection, x86 -> x64 injection, x64 -> x86 injection, and injection with or without passing an argument. The `c2lint` tool will alert you if your `execute` block does not cover these contexts.

### Post-Exploitation Jobs
Cobalt Strike's larger post-exploitation features (e.g., screenshot, keylogger, hashdump) are implemented as Windows DLLs. To execute these features, Cobalt Strike spawns a temporary process and injects the feature into it. The `process-inject` block controls the process injection step, while the `post-ex` block controls the content and behaviors specific to Cobalt Strike's post-exploitation features.

**Post-Exploitation Configuration:**
```plaintext
post-ex {
    set spawnto_x86 "%windir%\\syswow64\\rundll32.exe";
    set spawnto_x64 "%windir%\\sysnative\\rundll32.exe";
    set obfuscate "true";
    set pipename "evil_####, stuff\\not_##_ev#l";
    set smartinject "true";
    set amsi_disable "true";
}
```

**Tips for `spawnto_x86` and `spawnto_x64`:**
1. Always specify the full path to the program.
2. Environment variables (e.g., `%windir%`) are acceptable within these paths.
3. Do not specify `%windir%\system32` or `c:\windows\system32` directly. Use `syswow64` (x86) and `sysnative` (x64). Beacon will adjust these values to `system32` where necessary.
4. For an x86 `spawnto` value, specify an x86 program. For an x64 `spawnto` value, specify an x64 program.
5. The specified paths (excluding the automatic `syswow64/sysnative` adjustment) must exist from both an x64 (native) and x86 (wow64) view of the file system.

**Options:**
- **obfuscate (true)**: Scrambles the content of the post-ex DLLs and settles the post-ex capability into memory in a more OPSEC-safe way.
- **pipename**: Changes the named pipe names used by post-ex DLLs to send output back to Beacon. Each `#` in the pipename is replaced with a valid hex character.
- **smartinject (true)**: Embeds key function pointers, like `GetProcAddress` and `LoadLibrary`, into same-architecture post-ex DLLs to avoid detection.
- **thread_hint**: Allows multi-threaded post-ex DLLs to spawn threads with a spoofed start address. Specify the thread hint as `"module!function+0x##"`.
- **amsi_disable (true)**: Directs `powerpick`, `execute-assembly`, and `psinject` to patch the `AmsiScanBuffer` function before loading .NET or PowerShell code.
- **keylogger**: Configures Cobalt Strike's keystroke logger. Options include `GetAsyncKeyState` (default) and `SetWindowsHookEx`.

### Reporting and Logging
**Logging:**
Cobalt Strike logs all activity on the team server. Logs are located in the `logs/` folder in the directory where the team server was started. All Beacon activity is logged with a date and timestamp.

**Reports:**
Cobalt Strike offers several report options to help make sense of your data and convey a story to clients. You can configure the title, description, and hosts displayed in most reports.

**Report Types:**
- **Activity Report**: Provides a timeline of red team activities.
- **Hosts Report**: Summarizes information collected by Cobalt Strike on a host-by-host basis.
- **Indicators of Compromise**: Resembles an Indicators of Compromise appendix from a threat intelligence report.
- **Sessions Report**: Documents indicators and activity on a session-by-session basis.
- **Social Engineering**: Documents spear phishing emails, clicks, and user data collected.
- **Tactics, Techniques, and Procedures**: Maps Cobalt Strike actions to MITRE’s ATT&CK Matrix.

**Customization:**
- **Custom Logo in Reports**: Replace the default Cobalt Strike logo with a custom image (1192x257px at 300dpi).
- **Accent Color**: Set an accent color for the thick line below the image and for links in reports.
- **Custom Reports**: Define custom reports using a subset of the Aggressor Script language.

### Keyboard Shortcuts
**Console:**
- **Ctrl+A**: Select all text.
- **Ctrl+F**: Open find tool.
- **Ctrl+K**: Clear the console.
- **Ctrl+Minus**: Decrease font size.
- **Ctrl+Plus**: Increase font size.
- **Ctrl+0**: Reset font size.
- **Down**: Show next command in history.
- **Escape**: Clear edit box.
- **Page Down**: Scroll down half a screen.
- **Page Up**: Scroll up half a screen.
- **Tab**: Complete the current command.
- **Up**: Show previous command in history.

**General:**
- **Ctrl+B**: Send current tab to the bottom of the window.
- **Ctrl+D**: Close current tab.
- **Ctrl+Shift+D**: Close all tabs except the current one.
- **Ctrl+E**: Empty the bottom of the window (undo Ctrl+B).
- **Ctrl+I**: Choose a session to interact with.
- **Ctrl+Left**: Switch to previous tab.
- **Ctrl+O**: Open preferences.
- **Ctrl+R**: Rename the current tab.
- **Ctrl+Right**: Switch to next tab.
- **Ctrl+T**: Take a screenshot of the current tab.
- **Ctrl+Shift+T**: Take a screenshot of Cobalt Strike.
- **Ctrl+W**: Open the current tab in a new window.
- **Ctrl+C**: Arrange sessions in a circle (graph).
- **Ctrl+H**: Arrange sessions in a hierarchy (graph).
- **Ctrl+Minus**: Zoom out (graph).
- **Ctrl+P**: Save a picture of the graph display.
- **Ctrl+Plus**: Zoom in (graph).
- **Ctrl+S**: Arrange sessions in a stack (graph).
- **Ctrl+0**: Reset to default zoom level (graph).
- **Ctrl+F**: Open find tool to filter table content (tables).
- **Ctrl+A**: Select all hosts (targets).
- **Escape**: Clear selected hosts (targets).

For more information, refer to the official documentation:
- [Aggressor Script Documentation](https://www.cobaltstrike.com/aggressor-script/)
- [MITRE’s ATT&CK](https://attack.mitre.org/)