作者：[Danny_Wei@腾讯玄武实验室](http://xlab.tencent.com/cn/2017/09/11/safe-coding-of-wcf-viewed-from-a-longlive-vulnerability/ "Danny_Wei@腾讯玄武实验室")
#### 背景
笔者在2016年11月发现并报告了 HP Support Assistant (HPSA) 的权限提升漏洞，HP Product Security
Response Team (HP PSRT) 响应迅速，但却以此漏洞可以通过软件的自动更新功能自动修复为由拒绝为其发布安全公告和
CVE。4月份想起这件事后，笔者又分析了一遍修补后的 HPSA，发现 HP
的开发人员在修补中犯了更为低级的错误，导致补丁可以被绕过重新实现权限提升。在随后与 HP PSRT
的沟通与合作中，再一次利用其它技巧绕过了其后续修补，最终笔者协助 HP PSRT 完成了漏洞的修补。
本文将分析此漏洞的成因及多次补丁绕过，希望能以此为案例提高开发人员对安全的认识和理解，以减少由于对所用技术理解不到位和安全编程意识匮乏而导致的安全漏洞。
#### 问题描述
HPSA 是惠普推出的系统管理软件，被默认安装在惠普的所有 PC 中。其用于维护系统及打印机，并提供自动更新等功能。HPSA 使用.Net开发，其系统服务
HPSupportSolutionsFrameworkService 使用 WCF 与客户端通信，完成系统更新、管理等高权限敏感操作。虽然 HPSA
使用了较新的分布式处理技术WCF，然而在 Server 与 Client
通信过程中，却采用了不正确的认证方式。导致攻击者可以绕过认证，最终利用其敏感服务接口的缺陷，实现 everyone 到 system 的权限提升。
本文将从 WCF 技术背景、漏洞发现、漏洞利用、补丁实现和两次绕过几个方面进行分析。
#### WCF技术背景
WCF(Windows Communication Foundation) 是用于面向服务应用程序的编程框架，基于WCF的服务可以有两种形式：1). 通过
IIS 寄宿的方式将服务寄宿于IIS中; 2). 通过自我寄宿（Self-Hosting）的方式将服务寄宿于普通应用程序、windows 服务之中。
WCF 使用 Endpoint 的概念，在服务 Endpoint 和客户 Endpoint 之间传输异步消息。 Endpoint
用来描述消息发往什么地方，如何被发送等行为。一个服务端 Endpoint 主要由三部分构成：
###### 1). Addrsss
唯一标识endpoint，是描述服务接口的URI，可以是相对地址（相对于ServiceHost(Type, Uri[])的URI），也可以是绝对地址。
###### 2). Binding
指定绑定在endpoint上的接口类型，描述endpoint间通信时使用的协议、消息编码方式、安全设置等。 WCF支持：HttpBindingBase,
MsmqBindingBase, NetNamedPipeBinding, NetPeerTcpBinding, NetTcpBinding,
UdpBinding, WebHttpBinding, WSDualHttpBinding, WSHttpBindingBase,
CustomBinding多种绑定类型。
###### 3). Contract
契约指定并设置绑定到当前 endpoint 上的服务接口，即哪些方法被导出给客户端，方法的授权情况、消息格式等。
#### 漏洞成因
HPSA 的系统服务 HPSupportSolutionsFrameworkService 具有 SYSTEM 权限，并开启了多个允许 everyone
账户读写的 NamePipe。这一敏感行为引起了笔者的注意，因此dump下安装包进一步分析。
反混淆反编译后进行代码审计，发现HPSA的系统服务使用WCF与Client进行交互。它创建了一个绑定在NetNamedPipeBinding（`URI：”net.pipe://localhost/HPSupportSolutionsFramework/HPSA”`）上的Endpoint，并允许Client调用多个绑定在此Endpoint上的服务接口：`HP.SupportFramework.ServiceManager.Interfaces::IServiceInterface`。
HPSA 在连接建立时对 Client 进行了认证，以阻止敏感接口被恶意程序调用。Server 与 Client 的交互过程如下表所示：
在 Server 与 Client 的交互过程中，HPSupportSolutionsFrameworkService 使用了多种途径来确保安全：验证
Client 是否为 HP 签名、使用 SecureString 存储 GUID、使用 RNGCryptoServiceProvider
生成随机数、调用敏感接口时验证 Client 的 Token。
千里之堤毁于蚁穴，在看似缜密的认证逻辑中却存在安全漏洞：HPSupportSolutionsFrameworkService
使用`Process.MainModule.FileName`获取 Client
的文件路径，随后验证其文件签名。然而，在C#中`Process.MainModule.FileName`是通过调用`GetModuleFileName()`索引进程的
PEB (Process Environment Block)来获取模块路径的。PEB 位于进程的用户空间中，因此可以被攻击者修改替换。攻击者只需在连接
Server 的 Endpoint 前修改 PEB，使模块路径指向一个有效的 HP 签名文件即可绕过签名检测，最终通过认证。
#### 漏洞利用
绕过 HPSA Server 的认证后，就可以调用绑定在此 Endpoint
上的服务接口函数了。接下来的工作就是从可用的服务接口函数中寻找可以利用的方法，实现权限提升。HPSupportSolutionsFrameworkService
的服务接口函数实现在`HP.SupportFramework.ServiceManager.ServiceTasks::ServiceTask`中，大致浏览一遍接口函数发现UncompressCabFile服务接口可以用于任意文件写，DeleteFile
服务接口可以用于任意文件删除。
UncompressCabFile 的实现逻辑如下：
    public bool UncompressCabFile(string cabFilePath, string destDirectory, string token)
    {
        if (!\u0004.Instance.\u0001(SharedCommon.StringToSecureString(token)))
        {
            if (DebugLog.IsDebug)
            {
                DebugLog.LogDebugMessage("signature validation failure for UncompressCabFile", DebugLog.IndentType.None);
            }
            return false;
        }
        if (!File.Exists(cabFilePath))
        {
            return false;
        }
        if (!Validation.VerifyHPSignature(cabFilePath))
        {
            File.Delete(cabFilePath);
            return false;
        }
        string text = "\"" + cabFilePath + "\"";
        string text2 = "\"" + destDirectory + "\"";
        ProcessStartInfo processStartInfo = new ProcessStartInfo();
        processStartInfo.set_WindowStyle(1);
        processStartInfo.set_Arguments("-qq " + text + " -d " + text2);
        processStartInfo.set_FileName(SupportAssistantCommon.FrameworkPath + "Modules\\unzip.exe");
        Process process = new Process();
        process.set_StartInfo(processStartInfo);
        process.Start();
        process.WaitForExit();
        if (File.Exists(cabFilePath))
        {
            File.Delete(cabFilePath);
        }
        return true;
    }
UncompressCabFile 利用 unzip.exe 将压缩文件 cabFilePath 解压至 destDirectory，在解压前首先验证了
cab 文件的签名。由于在签名验证和解压缩之间存在时间差，因此这里存在 TOCTTOU(Time of Check To Time of
Use)问题，可以利用条件竞争绕过签名检测将文件写入任意目录，最终可以实现权限提升。
DeleteFile 的实现逻辑如下：
    public void DeleteFile(string filePath, string token)
    {
        if (\u0007.Instance.\u0001(SharedCommon.StringToSecureString(token)))
        {
            try
            {
                File.Delete(filePath);
                return;
            }
            catch (Exception ex)
            {
                if (DebugLog.IsDebug)
                {
                    DebugLog.LogDebugMessage("exception in DeleteFile: " + ex.Message, DebugLog.IndentType.None);
                }
                return;
            }
        }
        if (DebugLog.IsDebug)
        {
            DebugLog.LogDebugMessage("token not valid in DeleteFile", DebugLog.IndentType.None);
        }
    }
因此利用过程如下所述：
  1. 修改PEB，将进程路径指向合法的HP签名程序
  2. 通过反射机制获取`HP.SupportFramework.ServiceManager.Interfaces`命名空间中 ServiceInterface 类的`get_Instance()`方法
  3. 实例化 ServiceInterface
  4. 调用`ServiceInterface::UncompressCabFile`服务接口，结合条件竞争实现权限提升
#### 补丁实现和绕过1
漏洞报告后 HP PSRT 快速响应，并在半个月内通过邮件告知已经发布了新版来解决此安全漏洞。4月初，再次分析后发现新版本的 HPSA 依旧在使用
everyone 可写的 NamePipe，笔者决定针对 HP 的修复再次分析。
通过短暂的逆向分析，定位了补丁修复位置。补丁在`HP.SupportFramework.ServiceManager.Interfaces::ServiceInterface::get_Instance()`中添加了如下逻辑：
    StackFrame stackFrame = new StackFrame(1);
    MethodBase method = stackFrame.GetMethod();
    Type declaringType = method.get_DeclaringType();
    string name = method.get_Name();
    if (name.ToLowerInvariant().Contains("invoke"))
    {
        string text2 = new \u0007().\u0001(Process.GetCurrentProcess());
        text2 = Uri.UnescapeDataString(Path.GetFullPath(text2));
        string text3 = Assembly.GetEntryAssembly().get_Location();
        text3 = Uri.UnescapeDataString(Path.GetFullPath(text3));
        if (text3.ToLowerInvariant() != text2.ToLowerInvariant())