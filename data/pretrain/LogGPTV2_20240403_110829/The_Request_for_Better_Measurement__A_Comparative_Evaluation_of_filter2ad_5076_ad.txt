made in Odeulu et al.’s paper [58] when they analyze the
security of the scheme of Islam [19]. Based on these two
assumptions, we show that this scheme is still prone to two
kinds of smart card loss attack that breach truly two-factor
security. Here we highlight a new attack (i.e., Type VII).
5.2.1 Type II attack on two-factor security
Odeulu et al. [43] showed that, Islam’s scheme [19] cannot
provide two-factor security due to a Type II smart-card-
loss attack that exploits deﬁnite password veriﬁers. Yet,
we show that precisely the same pitfall still exists in [43].
One can see that, there are also deﬁnite password veriﬁers
(i.e., Ai and Bi) stored in Ui’s card, and thus they can be
exploited by A to oﬄine guess Ui’s password.
∗
Step 1. Guesses the value of IDi to be ID
i from dictio-
nary space Did and the value of P Wi to be P W
∗
from dictionary space Dpw;
i
Step 2. Computes C
i = Bi ⊕ h(pw
∗
i || ID
∗
h(C
from Ui’s card.
′
∗
i) and A
i =
∗
i ), where Ai and Bi are extracted
i || pw
∗
i ||ID
∗
Step 3. Checks the correctness of (ID
∗
paring if A
i is equal to the extracted Ai;
∗
i , P W
∗
i ) by com-
Step 4. Repeats steps 1, 2 and 3 until the correct value
of P Wi is found.
The time complexity of this attack is O(|Did| ∗ |Dpw| ∗
2TH ). According to the timings in Table 6, A may deter-
mine the password in about 4.4 hours on a common PC.
5.2.2 Type VII attack on two-factor security
In this subsection, we show a new kind of attack against
two-factor security. This attack is a hybrid one. More
speciﬁcally, it ﬁrst obtains Ui’s smart card and extracts the
stored data, then it attempts to interact with the server S
by impersonating Ui. Using S’s response as an oracle, A
can then oﬄine determine Ui’s password.
Suppose Ui’s smart card is somehow obtained (stolen or
picked up) by A, and the stored data {Ai, Bi} can be ex-
tracted by some means under Capability C-2. Also assume
A has obtained Ui’s identity IDi under the Capability C-02.
At this point, A can obtain Ui’s password P Wi as follows:
Step 1. A chooses α, n1, X ∈R Z∗
∗
1 =
∗
1 ) and
P h((cid:11)||X) mod p, T IDi = (IDi||n1) ⊕ h(K
Vi = gh((cid:11)||X) mod p.
Step 2. A → S : {T IDi, Vi}.
Step 3. On getting the login request from Ui (actually
from A), S will ﬁnd no abnormality because S
can indeed retrieve the correct IDi∥n1 and ﬁnd
h(IDi∥ks) corresponding to IDi. As a result, S
will proceed as usual and send {Vs, Ms} to Ui
(actually to A).
Step 4. After getting the response {Vs, Ms} from S, A
p, and computes K
Step 5. Guesses the value of P Wi to be P W
Step 6. Computes ski = V h((cid:11)||X)
proceeds to the next step;
dictionary space Dpw;
∥IDi), where Bi is revealed from Ui’s card;
the computed h(Vi|| C
the received Ms;
Step 7. Checks the correctness of P W
∗
i by comparing if
i || Vs|| ski|| n1) is equal to
∗
i = Bi ⊕ h(P W
∗
and C
from
∗
i
∗
i
s
∗
i
P W
is found.
Step 8. Repeats Step 5, 6 and 7 until the correct value of
The time complexity of the above attack is O(|Dpw| ∗
(3TE + 4TH )). According to the timings in Table 6, A may
identify the right password in 1.40 hours on a common PC
with a 3.06 GHz CPU.
5.2.3 Flaws in the formal security proofs
While both Xu et al.’s scheme [59] and Odelu et al.’s
scheme [43] are equipped with a formal proof in the random
oracle model [3], they are not infallible and actually as
insecure as these heuristically analyzed ones (e.g., [20, 28,
41]). Now a paradox arises: How can a protocol that
was formally proven secure later be found insecure? We
provide an answer to this question by showing that their
security proofs are ﬂawed. First, we examine the formal
proof of Xu et al.’s scheme. Let A be an attacker against
the scheme’s semantic security. Their core idea is to
employ A to construct probabilistic polynomial-time (PPT)
adversaries for each of the underlying primitives (e.g., Hash
and CDH intractability) in such a way that if A manages
to break the semantic security, then at least one of these
PPT adversaries succeeds in breaking the security of an
underlying primitive. A series of hybrid games Expn(n =
1, 2 . . . , 5) are deﬁned, starting with the real attack Exp1
and ending in Exp5 where A’s advantage is conﬁned to
0, and for which they can bound the diﬀerence in A’s
advantage between any two consecutive games. This idea
is quite routine in provable security [2, 50]. The detailed
proof can be found in [59].
In Exp4, Xu et al. reduces A’s advantage in querying
IDi∥M∥W∥CDH(M, W ) on the hash oracle h(·) to the
advantage of A in solving CDH(M, W ) when given M =
h(IDi)m and W = h(IDA)w. Unfortunately, this key step
fails to consider an insider attacker A that also possesses
′
′′
is computed by S as B
a valid card and can computes the valid h(IDA)x =
B − h(P WA). Then, A selects a random nonce w ∈
p , chooses any user Ur that A aims to impersonate,
∗
Z
= (h(IDA)x)w. A sends {IDr, W =
and computes B
h(IDA)w, C = h(T∥B
′∥W∥IDr), T} to S, where T is the
current timestamp. On receiving A’s login request, S will
′′
= W x,
accept it because B
and ﬁnally the
and thus B
received C will equal h(T∥B
Accordingly, in Exp4 the correct reduction shall be that:
A’s advantage in querying IDi∥M∥W∥CDH(h(IDi)m,
h(IDi)w) on the hash oracle h(·) is reduced to the
advantage of A in computing CDH(h(IDr)m, h(IDr)w)
when given the victim’s
the value
identity IDr,
M = h(IDr)m and the random number w.
In this case,
A’s success advantage will be Pr[Ext4]=1, for it is easy to
compute CDH(M, W ) = M w mod p.
(= h(IDA)x)w) will equal B
′′∥W∥IDr).
′′
′
Now it is time to show the pitfalls in Odelu et al.’s formal
proof. After a careful examination, we have to conclude
that Odelu et al. misunderstood how to use contradiction
in a random oracle model. Essentially, they ﬁrst suppose
that A can invert hash functions and solve DLP problems,
and then they exploit A to build an adversary that can
oﬄine guesses IDi and P Wi of Ui. They then conclude
that, “however, it is a computationally infeasible problem
due to the diﬃculty of solving DLP and inverting the one-
way hash function. As a result, it is a contradiction.” This
kind of proof involves no reasonable reduction and thus can
never be seen as a rigorous formal security proof at all. This
explains why their scheme fails even if it is equipped with
a seemingly formal proof.
The above failures highlight that formal proofs for com-
plex protocols (such as two-factor schemes) are often in-
evitably intricate and their correctness largely depends on
the cryptanalysis experience of the prover (i.e., be aware
of all potential threats). This indicates that old-fashioned
cryptanalysis continues to play an indispensable role, which
highlights the importance of this work.
6. REVISITING MUHAYA’S SCHEME
6.1 Review of Muhaya’s scheme
Muhaya’s scheme [41] is claimed to be “an improved
scheme with session key establishment and user anonymity”
to remedy the weaknesses in Zhu’s scheme [65], which in
turn is an enhanced version over Xu et al.’s 2009 scheme
[59]. However, we demonstrate that Muhaya’s scheme [41]
actually provides no more security than Xu et al.’s scheme
[59] suggested six years ago.
Registration phase. Before the initialization of this
phase, the server S selects two large primes p and q, set
n = pq. Then, S selects a small prime number e (e.g.,
e = 216 + 1 as generally suggested) as its RSA public key,
and computes its RSA private key d such that ed = 1
mod φ(n). Whenever a user Ui wants to register herself
to the medical server S, the following steps are involved:
(1) Ui ﬁrst chooses her identity IDi and password P Wi,
then picks Ni ∈R p, and computes N P Wi = h(P Wi∥Ni).
(2) Ui ⇒ S: {IDi, N P Wi}.
(3) Upon receiving registration request, S calculates Bi =
h(IDi ⊕ d) ⊕ N P Wi and Ci = h(IDi ⊕ d) ⊕ (IDi∥N P Wi),
where d is S’s long-term private key;
(4) S ⇒ Ui: A smart card with data {n, e, Bi, Ci, h(·)}.
(5) Ui keys Ni into the smart card so that ﬁnally the card
is with parameters {n, e, Bi, Ci, Ni, h(·)}.
Login and authentication phase. When user Ui wants
to login to S, she inserts her smart card into a card reader
and keys IDi and P Wi.
i = Ci ⊕ B
∗
∗
i .
∗
∗
i equals B
i .
(1) The smart card computes N P Wi = h(P Wi||Ni) and
i = Bi ⊕ N P Wi and C
∗
extracts B
h(B
i ||ID
∗
then the smart card terminates the session.
(2) The smart card checks if C
If not so,
(3) Smart card generates Wi ∈R p and computes hi =
i ||Wi) and Xi = (hi||Wi||IDi)e mod n.
∗
(4) Ui → S: {Xi}.
(5) On receiving the
i ) ← X d
i ||W
∗
∗
login request, S extracts
∗
i is valid or
i = h(h(IDi ⊕ d)||W
∗
∗
(6) S checks the equivalence h
i )
(7) S generates Wms ∈R p and computes hms =
(8) S → Ui: Response message {hms∥Wms}.
The rest part of the scheme has little to do with our
holds or not. If not so, S terminates the session.
h(IDi∥W
(h
not. If not so, S terminates the session.
i mod n and checks if ID
i ∥Wms).
∗
discussion and thus it is omitted.
6.2 Security analysis of Muhaya’s scheme
The two assumptions about the adversary’s capabilities
(i.e., C-1 and C-2 ) listed in Table 1 are implicitly made
in Muhaya’s work [41] when they analyze the security
of the scheme of Zhu [65]. More speciﬁcally, the “user
impersonation attack” on Zhu’s scheme (see Section 3.1 of
[41]) implicitly makes the Capability C-1, while the “oﬄine
password guessing attack” on Zhu’s scheme (see Section 3.2
of [41]) implicitly makes the Capability C-2 — “Suppose Ua
(the attacker) steals or ﬁnds smart card of Ui and somehow
extracts values {n, e, IDi, Bi, Ni} stored inside it.” Based
on these two assumptions, we show that Muhaya’s scheme
still cannot provide truly two-factor security and fail to
achieve forward secrecy.
6.2.1 Type II attack on two-factor security.
A scheme with two-factor security can ensure that, only
the user possesses a smart card and knows the correct
password can successfully login the server [51]. Muhaya [41]
showed that Zhu’s scheme [65] cannot provide this security
goal, because the compromise of the smart card factor leads
to the disclosure of the password factor. Yet, we show that
precisely the same pitfall still exists in Muhaya’s improve-
ment. Suppose Ui’s smart card is somehow obtained (stolen
or picked up) by A, and the stored data {Bi, Ci, Ni} can
be extracted by some means under Capability C-2. Now A
can obtain Ui’s password P Wi as follows:
Step 1. Guesses the value of IDi to be ID
∗
i from dictio-
nary space Did and the value of P Wi to be P W
∗
from dictionary space Dpw;
i
i ∥Ni), where Ni is
∗
∗
i = h(P W
Step 2. Computes N P W
revealed from Ui’s card;
Step 3. Computes B
revealed from Ui’s card;
i = Bi ⊕ N P W
∗
∗
i = B
i ⊕ (ID
∗
i ∥N P W
∗
∗
i , where Bi
is
∗
i );
∗
∗
i , P W
i ) by com-
Step 4. Computes C
Step 5. Checks the correctness of (ID
paring if C
is equal to the intercepted Ci;
∗
i
Step 6. Repeats Step 1, 2, 3 and 4 of this procedure until
the correct value of (ID
∗
i , P W
∗
i ) is found.
The time complexity of the above attacking procedure is
O(|Did| ∗ |Dpw| ∗ (2TH + TXOR)), where TH is the running
time for Hash operation and TXOR is the running time
for XOR operation. In reality, the dictionary size is very
|Did| ≤ |Dpw| ≤ 106 [4, 35]. Further,
restricted, e.g.,
according to the timings in Table 6, A may determine the
password in about 3.5 days on a common PC, or spends
$4.32 and costs 2.33 hours by resorting to the Amazon EC2
C4.4X-large cloud computing service [1].
6.2.2 No forward secrecy
Since two-factor authentication schemes are generally
deployed in security-critical applications, forward secrecy
is an important property that provides security assurance
in case of the ultimate failure of the server (i.e., when S’s
private key d is somehow leaked). However, in the following
we show that this property cannot be achieved:
Step 1. Intercepts the communication messages {Xi, hms,
Wms} that is exchanged between Ui and the
server S during the jth protocol run;
private key d;
Step 2. Gets hi, Wi and IDi by decrypting Xi using S’s
Step 3. Computes hi = h(h(IDi ⊕ d)∥Wi);
Step 4. Computes the jth session key skj = h(IDi∥Wi∥
h(IDi ⊕ d)∥hi∥Wms);
This shows that the desirable security goal of forward
secrecy cannot be attained by Muhaya’s scheme. This
failure is essentially due to the fact that the scheme makes
use of the RSA cryptosystem but violates the principle that
“a new temporary RSA key pair must be generated by Ui
for each session” [44] to achieve forward secrecy.
Remark 2. We also note that, while Xu et al.’s scheme
[59] explicitly claims to provide forward secrecy, Muhaya’s
scheme [41] as well as its predecessors [16, 54, 65] all do not
claim to provide this property. We think that, since forward
secrecy is an important property and all the schemes in
[16, 41, 54, 65] claim to be an improvement over Xu et al.’s
scheme [59], forward secrecy should have been considered
in the improvements [16,41,54,65]. This well illustrates the
undesirable situation in this research area that the protocol
designers advocate the superiorities of their scheme, while
(perhaps subconsciously) often overlooking the merits that
their scheme cannot provide, thus neglecting points on
which their scheme performs poorly. This lack of thorough
measurement of schemes has led to a long-standing lack of
consensus and an unsatisfactory “break-ﬁx-break-ﬁx” cycle.
7. MEASURING IMPROVED SCHEMES
In this section, to test the eﬀectiveness of our reﬁne-
ments to Madhusudhan-Mittal’s set [36] and to provide the
missing fair, objective comparison of existing schemes, we
conduct an evaluation of 34 representative schemes in terms
of usability, security and eﬃciency without hidden agenda.
Many them, especially those proposed earlier than 2008,
cannot be included here only due to space constraints.
The most critical point one can get from Table 7 is that
many newly proposed schemes are less desirable than earlier
ones. For instance, all the 19 improvements are inferior to
Xu et al.’s original scheme [59] in at least one of the design
goals, without regard of eﬃciency. Among them, Jiang et
al.’s scheme [20] is the only can overcome all 8 types of
smart card loss attacks, yet it provides no forward secrecy,
while this goal is achieved in Xu et al.’s scheme.
No scheme can attain all the design goals DA1-SR9,
though one scheme (i.e., [26]) does meet all the security
goals SR1-SR9. Fortunately, there is a trend that, as time
goes on, schemes are getting better. This is corroborated
by the evidence that formal methods lately are gaining
considerable popularity in new proposals (see the column
right to SR9), though the formal proofs are often immature
and ﬂawed (see Sec. 5.2.3) due to the use of insuﬃcient
security model (e.g., overlooking some attack types in Table
4).
During our evaluation process, we ﬁnd that after integrat-
ing our reﬁnements, Madhusudhan-Mittal’s set [36] is much
more concrete and now can be used as an acceptable metric
to check which goal is attained or unattained by a scheme
under study. Besides the redundancies pointed out in Sec.
2.3, we ﬁnd some other defects: the security goals regarding
session key (i.e., known key attack, unknown key share
(UKS) attack, and key control) have not been considered so
far. Indeed, a few schemes cannot achieve these important
goals: Kim-Kim’s [23] and Wang et al.’s [52] schemes are
prone to known key attack; Chaudhry et al.’s scheme [9]
cannot resist UKS attack; Chen et al.’s scheme [10]
is
susceptible to key control. Since these goals are essential for
measuring an authentication scheme with key agreement,
we are considering to re-category, re-word and merge some