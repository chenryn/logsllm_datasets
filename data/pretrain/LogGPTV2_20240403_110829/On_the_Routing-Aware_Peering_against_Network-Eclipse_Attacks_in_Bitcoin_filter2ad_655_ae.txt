tweaks T1–T3 also show generally promising results when
combining with others, except that a few combinations yield
even worse defense performance than the individual tweaks
(e.g., (T1, T2) versus T2), showing the non-monotonicity of
these countermeasures in general. Also, the protocol tweak
T6 reduces the effectiveness of all other tweaks except T5.
An example. We consider a hypothetical Bitcoin node op-
erator who is willing to try many simple countermeasures
in this example. The operator, however, may learn that the
performance of T6 alone is even worse than the baseline and
decide not to activate T6. The operator then evaluates all
tweak combinations composed from the ﬁve other tweaks
T1–T5 and compares their defense effectiveness in Figure 11.
In particular, when combining three tweaks (T3, T4, T5), we
see the lowest attack success rate of 20.9% (see the right-most
blue bar) among all combinations of three tweaks. The or-
ange bars show that adding T1 or T2 into (T3, T4, T5) only
makes negligible improvements as the attack success rates
1
0.8
0.6
0.4
0.2
0
e
t
a
r
s
s
e
c
c
u
s
k
c
a
t
t
A
(T 1,T 2,T 3)  
(T 1,T 2,T 4)  
(T 1,T 2,T 5)  
(T 1,T 3,T 4)  
(T 1,T 3,T 5)  
(T 1,T 4,T 5)  
(T 2,T 3,T 4)  
(T 2,T 3,T 5)  
(T 2,T 4,T 5)  
(T 3,T 4,T 5)  
(T 2,T 3,T 4,T 5) 
(T 1,T 3,T 4,T 5) 
(T 1,T 2,T 4,T 5) 
(T 1,T 2,T 3,T 5) 
(T 1,T 2,T 3,T 4) 
(T 1,T 2,T 3,T 4,T 5)
Tweak combination
Figure 11: Attack success rates when Bitcoin nodes imple-
ment any combinations of tweaks T1–T5.
1
0.8
0.6
0.4
0.2
0
e
t
a
r
s
s
e
c
c
u
s
k
c
a
t
t
A
10
8
6
4
2
0
s
n
o
i
t
c
e
n
n
o
c
f
o
r
e
b
m
u
n
e
g
a
r
e
v
A
1
2
3
4
5
6
Threshold 
7
8
9
10
1
2
3
4
5
6
Threshold 
8
9
10
7
(a) Attack success rates.
(b) Average numbers of es-
tablished connections.
Figure 12: Attack success rates and the average number of
established connections for different τ values.
are still 20.4% and 20.6%, respectively. Lastly, the right-most
bar shows the combination of tweaks (T1, T2, T3, T4, T5)
with a success rate of 20.2%, which is only minutely better
than (T3, T4, T5). Understanding this small performance
gain from adding T1 and T2, the operator may ﬁnd the best
operating point with the three tweaks (T3, T4, T5). Note that
this decision is given only as an example, and Bitcoin node
operators with varying degrees of willingness to allow the
simple tweaks may ﬁnd other combinations more appropriate.
6.2 Location-based Customization of RAP
When operating the RAP defense (§4) in practice, a Bitcoin
node operator should decide how strictly the RAP policy
should be enforced. The threshold τ (1 ≤ τ ≤ 10) is used
to control this: the low value of τ strictly enforces the peer
1264    30th USENIX Security Symposium
USENIX Association
connections to share a small number (or zero if τ = 1) of
common intermediate ASes, and a high value of τ allows
many peer connections to share the same AS on their paths.
It may seem straightforward to choose τ, as a more effective
defense (e.g., a lower attack success rate) is expected with a
lower τ value. Here, we show the opposite — choosing the
proper threshold is non-trivial.
Effect of different τ values. To understand how different τ
values affect the RAP effectiveness, we extend our experi-
ment in Section 5.2 to evaluate RAP with all values of τ (i.e.,
1 ≤ τ ≤ 10) against the Erebus attacks. We present the rate
of successful attacks in almost 6,000 scenarios in Figure 12a.
It shows that the overall attack success rates do not change
signiﬁcantly across different values of τ, and the rates even
increase as τ decreases in the range 1 ≤ τ ≤ 3. This may look
counterintuitive at ﬁrst; however, it can be explained by Fig-
ure 12b in which we present the average number of established
outgoing connections of the target nodes in our evaluations.
It shows that our victim nodes have to avoid choosing many
peers aggressively and may not have full connectivity to ten
other nodes when the RAP is too strictly enforced (i.e., τ is
set to a low value). For example, with τ = 1, the victim nodes
in our experiments can make only ﬁve connections on aver-
age. When the number of outgoing connections decreases, it
becomes easier to hijack all of them!
Bitcoin node’s location and τ. The results in Figure 12a
show that strict enforcement of RAP (e.g., τ = 1) yields a sub-
optimal defense performance when measuring the average
performance across all 59 target Bitcoin nodes in our evalua-
tion. We, however, conjecture that the defense performance
of RAP may highly vary depending on the route diversity of
a speciﬁc Bitcoin node, and thus the choice of τ should also
consider the location of the node on the Internet topology.
The rationale behind our conjecture is that some nodes in a
well-connected network may be able to establish most of the
ten outgoing connections even with a low τ value.
To see how different locations of Bitcoin nodes affect the
choice of τ, we pick three examples in which the victims are
located at vastly different topological locations on the Internet
(i.e., two at cloud providers, one at university network) in
Figure 13. We measure the attack success rate and the number
of established connections for three speciﬁc Bitcoin nodes
against the Erebus attacks from the top-100 large ASes. The τ
values that yield the lowest attack success rates are τ = 1, τ =
5, and τ = 9 for the three Bitcoin nodes, respectively. These
best τ values coincide with the smallest τ values that make
the victims fully connected with all ten outgoing connections
in most cases. These results conﬁrm that the choice of τ
signiﬁcantly depends on where on the AS topology individual
Bitcoin nodes are located.
Finding the optimal τ. From the above experiments, we
learn that it is desirable to choose a minimum possible τ value
that ensures all ten outgoing connections are established. For
an easier expression of this aspect, we deﬁne the desired
Algorithm 1 Find the optimal threshold τ for Bitcoin node v.
Require: κ: the desired lower-bound for available IPs.
G1, G2, ..., Gn: groups of IPs having the same ﬁrst-hop AS on their paths from v
(|G1| ≥ |G2| ≥ · · · ≥ |Gn| > 0).
Ensure: τoptimal : the optimal threshold.
τoptimal ← 10
for τ ← 1 to 9 do
⊲ try smaller thresholds ﬁrst.
⊲ number of available IPs.
⊲ start with the biggest group G1.
⊲ count IPs from the same group.
⊲ try to select 9 peers.
⊲ select from Gidx.
⊲ done with Gidx.
⊲ move to the next group.
⊲ enough IPs for the 10th connection.
A ← SUM(|G1|, · · · , |Gn|)
idx ← 1
cnt ← 0
for i ← 1 · · · 9 do
Peeri ← Gidx.POP()
cnt ← cnt + 1
A ← A − 1
if cnt ≥ τ ∨ |Gidx| = 0 then
1: procedure FINDOPTIMALTHRESHOLD
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23: end procedure
A ← A − |Gidx|
idx ← idx + 1
cnt ← 0
end if
end for
return τoptimal
end if
end for
if A ≥ κ then
τoptimal ← τ
break
lower-bound for available peer IPs, κ, set by each Bitcoin
node operator. It ensures that there are at least κ IPs (among
all reachable IPs in its database) that have not been marked
as unavailable by RAP before any connection establishment.
Algorithm 1 outlines an efﬁcient computation for selecting
an optimal τ value for RAP, given the topology of a Bitcoin
node and its operator’s desired κ value. At a high level, we
test all τ values and consider the lowest threshold that sat-
isﬁes κ as optimal. A threshold τ is said to satisfy κ if the
IP availability for the last connection in the worst connectiv-
ity scenario (i.e., the lowest IP availability possible) is still
sufﬁcient. We greedily construct the worst scenario of connec-
tivity based on two following intuitions. First, we can group
all available IPs based on the ﬁrst-hop AS on the paths from
the victim node to them, whereas at most τ IPs can be chosen
from each group during the connection establishments. When
no ﬁrst-hop AS appears in more than τ connections, it also
implies that no other AS does because in all paths from the
Bitcoin node, the occurrences of an AS is no more than the
occurrences of the ﬁrst-hop AS on the paths to that AS. Let
us call G1, G2, ..., Gn groups of IPs having the same ﬁrst-hop
ASes from the Bitcoin node to them. Second, to minimize
the IP availability for the last connection, we should prefer
the larger groups when establishing the other connections be-
cause all but τ IPs from those groups will become unavailable.
Particularly, in Algorithm 1, we start with setting τ = 1 for
RAP (Line 3) and establish nine connections while preferring
the peers from bigger IP groups (Line 7–16). We then check
if the availability of IPs for the tenth connection satisﬁes κ
and if it is, the current τ value is optimal; see Line 17–20.
Otherwise, we repeat the above process with a higher τ value
until the constraint regarding κ is satisﬁed.
USENIX Association
30th USENIX Security Symposium    1265
1
0.8
0.6
0.4
0.2
0
e
t
a
r
s
s
e
c
c
u
s
k
c
a
t
t
A
1
2
3
4
5
6
7
8
9
10
10
8
6
4
2
0
s
n
o
i
t
c
e
n
n
o
c
f
o
.
o
n
e
g
a
r
e
v
A
1
0.8
0.6
0.4
0.2
0
e
t
a
r
s
s
e
c
c
u
s
k
c
a