We ﬁrst deﬁne the resolve operator (cid:12): given two clauses ωi
and ωj, for which there is a unique variable x such that one
clause has a literal x and the other has ¬x, ωi (cid:12) ωj contains
all the literals of ωi and ωj with the exception of x and ¬x.
Starting from the conﬂict clauses (line 8), we search for
more clauses that can introduce potential precondition vari-
ables (line 11). ωl keeps track of the current resolved clause.
Every time we ﬁnd a new conﬂict clause, we resolve ωl with
the new clause (line 13). The new ωl clause can still make φ
unsatisﬁable. We keep expanding the resolved clause, until we
reach the maximum step, or False shows in ωl, or ωl does not
change any more (line 10). Then we generate the antecedent
from ωl and check whether it satisﬁes the requirements (line
16). If yes, we output the new invariant; otherwise, we keep
on searching (line 17-19).
During the search in find_ante, we search for clauses
greedily. The goal is to keep the antecedent short to be readable
and managable. Thus, every time we ﬁnd a conﬂict clause, we
only ﬁnd the one that introduces one new variable to ωl (we
use a set S to keep track of the found variables).
4) Timing in the Assertions: A property P (cid:48) is asserted at
t=2 ∧ ... ∧
t=1 ∧ ¬P (cid:48)
each clock cycle: φ ∧ ¬P (cid:48)
¬P (cid:48)
t=M AX_SEQ. To determine the timing constraints in the
assertion, the search for conﬂict clauses takes place only within
a speciﬁc clock cycle (φ ∧ ¬P (cid:48)
t=ti, line 2 in Algorithm 2),
instead of all clock cycles together (φ ∧ ¬P (cid:48)).
The generated property P (cid:48)(cid:48) from the reﬁnement pass can
contain literals in different time steps. We rank them according
to the timing information, and add the delays between them.
= φ ∧ ¬P (cid:48)
.
E. Property Does not Exist
A property of one design may not be true of a second design.
This can happen when the two designs implement different
speciﬁcations or when one of the designs implements only part
of the speciﬁcation. For example, some of the AES designs we
collected implemented only encryption and did not implement
decryption. Thus, the properties related to decryption cannot
be translated to these designs. Another example is that for
RISC-V processors, there are three privilege levels, but for
OpenRISC processors, there are only two privilege levels.
Thus, properties related to the middle privilege level of the
RISC-V processor do not have corresponding properties in the
OpenRISC processors. In these cases Transys will typically
fail to produce a translation, which is a reasonable outcome.
F. Bugs in the Code
The structural
transformation and constraint reﬁnement
passes leverage the second design itself to translate the prop-
erty. This raises a concern: If there is a bug in the design, it
will be captured in the translated property. This is true. Transys
is meant to be used as an aide to the veriﬁcation team tasked
with writing security critical properties of a design. Transys
does the heavy lifting of producing a candidate translation,
but it does not obviate the need for human involvement in
property design. A manual review of the translated properties
is a required part of the workﬂow.
VI. IMPLEMENTATION
We implement Transys based on the Yosys Open Syn-
thesis Suite [8], a framework for Verilog synthesis. Transys
is implemented in C++ with approximately 4,500 lines of
code. The assertions are implemented in SystemVerilog. Each
Pass is implemented as a command in Yosys: the Variable
Mapping Pass and the Transformation Pass are implemented
as new commands (match_variables and transform), and
the Reﬁnement Pass is implemented by modifying the sat
command. We also implement three assisting commands for
building the program dependence graphs (build_pdg), parsing
security assertions to a standard format (read_assertlist) and
adding assertions to the designs for reﬁnement and validation
(append_assertlist).
We build the PDGs on the Register Transfer Level Interme-
diate Language (RTLIL) representation in Yosys. Each node
in the PDG is a Cell or a Wire object, which represents the
netlist data; or a Switch, a Case, or a Sync object, which
represents the decision trees and synchronization declarations;
or an assignment block, which we build to represent the assign
statements. Each edge represents either the control or data
dependence. To build the PDG, we ﬁrst convert the objects
into nodes. An edge from node A to node B is added if the
inputs to B depend on the outputs of A.
For the timing delays caused by non-blocking assignments
from the Transformation Pass, we add a state machine to
keep track of the signal values in different clock cycles.
For example, if we have an assertion (a == prev(b)), the
implementation of this assertion is:
always @(posedge clk)
begin
prev_b operand_b)→(or1200_sprs.to_sr[9]==1)
((or1200_ctrl.ex_insn&’hFC000000)(cid:29)26==48)→
(or1200_sprs.spr_dat_o==operand_b)
((or1200_ctrl.ex_insn&’hFC000000)(cid:29)26==’h38)→
((or1200_ctrl.ex_insn&’h03e00000)(cid:29)21==or1200_rf.addrw)
((or1200_ctrl.ex_insn&’hFC000000)(cid:29)26!=’h1c)
Table VIII: Security critical assertions of the OR1200 design. The ﬁrst number
in A No. refers to the property number in Table I.
(1) For AES designs, the overall translation rate is 93%.
The 8 failures in the Transformation Pass occur in translating
A28 to the AES08 design, and A29 to the AES06 and AES12
designs. The reason that the Transformation Pass fails is that
the highest-score variable found in the ﬁrst pass is incorrect,
making it impossible to ﬁnd a subgraph in the PDG that
includes at least two variables in the assertions.
For the AES05 design, the implementation of one module
is missing in the code we collected, which caused 16 failures
in the Reﬁnement Pass. Transys can translate the assertions
in the ﬁrst two passes, but fails in the third pass as the code
is incomplete. This shows that our ﬁrst two passes do not
rely on the completeness of the code base, but the third pass
requires that the code should be complete. If we comment
out the part of the code that instantiates the missing module
A No.
A36-01
A36-02
A36-03
A36-04
A33-06
A36-05
A36-06
A37-01
A37-02
A33-01
A33-02
A33-03
A33-04
A33-05
Assertion
set key[0] := high; assert cipher[0] == high
set key[1] := high; assert cipher[7:0] == high
set key[1] := high; assert cipher[31:0] == high
set key[1] := high; assert cipher[63:0] == high
set indata[1] := high; assert count[1] == low
set inExp[1] := high; assert cipher[1] == high
when ready == 1
set inExp[0] := high; assert cipher[0] == low
set inExp[0] := high; assert ready == low
set inExp[1] := high; assert ready == low
set key[0] := high; assert Antena == low
set key[0] := high; assert TSC_SHIFTReg[0]
== low
set key[0] := high; assert Capacitance[0] == low
set key[1] := high; assert Capacitance[1] == low
set key[1]:=high; assert Capacitance[0] == high
Core
AES-04
AES-04
AES-04
AES-04
RSA-03
RSA-03
RSA-03
RSA-03
RSA-03
AES-T400
AES-T400
AES-T1100
AES-T1100
AES-T1100
Table IX: Information ﬂow assertions of cryptographic hardware. The ﬁrst
num in A No. refers to the property num in Table IV, III.
in the original design, Transys can successfully translate the
assertions to AES05.