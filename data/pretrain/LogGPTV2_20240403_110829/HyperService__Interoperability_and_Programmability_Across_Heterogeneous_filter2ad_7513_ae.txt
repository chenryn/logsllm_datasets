7
8
9
10
11
12
13 Upon Receive StakeFund(cid):
14
15
16 Upon Receive InsuranceClaim(cid, Atte):
17
18
19
20
21
22
23
24
25
26
assert SigVerify(Atte) is true
if Atte is CertodT : update T.state := opened; T.tsopen := Atte.tsopen
else : update T.state := closed; T.tsclosed := Atte.tsclosed
assert MerkleVerify(Atte) is true
if Atte is a MerkiT or MerkidT or MerkoT :
else : # Atte is in form of a Merkle proof
retrieve the certificate CertiT or CertidT or CertoT from Atte
27
assert the(cid:101)T enclosed in CertidT or CertoT is genuine
assert the tsopen enclosed in CertoT is genuine
update T.state := Atte.state
elif Atte is MerkodT :
retrieve the certificate CertodT from Atte
update T.state := opened and T.tsopen := CertodT .tsopen
28
29
30
31
32
Internal Daemon
update T.stproof based on Merkc1T if necessary
update T.tsclosed as the height of the block attaching Merkc2T
update T.state := closed
(GT , Tstate, Arevs, Fstake) := Data[cid]; abort if not found
for (tid, T) ∈ Tstate :
continue if T.state is not closed
update Arevs[tid].amt := T.T .meta.amt
if DeadlineVerify(T) = true : update T.state := correct
elif Atte is MerkcT :
33
34
35
36
37
38 Upon Timeout SettleContract(cid):
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
compute S := DirtyTrans(GT , Tstate) # non-empty if execution fails.
execute fund reversion for non-zero entries in Arevs if S is not empty
initialize a map resp to record which party to blame
for each (tid, T) ∈ S :
if T.state = closed | open | opened : resp[tid] := T.T .from
elif T.state = inited : resp[tid] := T.T .to
elif T.state = init : resp[tid] := D
else : resp[tid] := V
return any remaining funds in Fstake to corresponding senders
call Data.erase[cid] to stay silent afterwards
Figure 8: ProtISC: the protocol realization of the ISC arbitrator.
ProtCLI), ProtVES tries to retrieve the second part of MerkcT from
ProtNSB. The second proof, denoted as Merkc2T , is to prove that the
Merkle roots referred in Merkc1T are correctly linked to a StatusRoot
on a finalized NSB block (see Figure 7). Once MerkcT is fully con-
structed, the state of T is promoted as closed. Finally, ProtVES may
find a new set of transactions that are eligible to be executed if their
preconditions are finalized due to any recently-closed transactions.
If so, ProtVES processes them by either requesting initialization
from ProtCLI or calling SInitedTrans internally, depending on the
originators of those transactions.
4.2.4 ProtISC Invocation
ProtVES periodically invokes ProtISC to execute the contract. All
internally stored certificates and complete Merkle proofs are accept-
able. However, for any T , ProtVES should invoke ProtISC only using
the attestation with the most advanced state, since lower-ranked
attestations for T are effectively ignored by ProtISC (c.f., § 4.4).
4.3 Execution Protocol by dApp Clients
ProtCLI specifies the protocol implemented by dApp clients. ProtCLI
defines the following set of handlers to match ProtVES. In partic-
ular, the InitedTrans and OpenedTrans match the SInitedTrans
and OpenTrans of ProtVES, respectively, to process Certid and
Certod sent by ProtVES when handling transactions originated from
ProtVES. The InitTrans and OpenTrans process Certi and Certo sent
by ProtVES when executing transactions originated from ProtCLI.
The CloseTrans and ClosedTrans of ProtCLI match their counter-
parts in ProtVES to negotiate closing attestations.
For usability, HyperService imposes smaller requirements on
the watching daemons implemented by ProtCLI. Specially, ProtCLI
still proactively watches ProtNSB to have a fallback communica-
tion medium with ProtVES. However, ProtCLI is not required to
proactively watch the status of underlying blockchains or dynami-
cally compute eligible transactions whenever the execution status
changes. We intentionally offload such complexity on ProtVES to
enable lightweight dApp clients. ProtCLI, though, should (and is
motivated to) check the status of self-originated transactions in
order to request transaction closing.
4.4 Protocol Realization of the ISC
Figure 8 specifies the protocol realization of the ISC. The Create-
Contract handler is the entry point of requesting insurance contract
creation using ProtISC. It generates the arbitration code, denoted
as contract, based on the given dApp executable GT . The contract
internally uses Tstate to track the state of each transaction in GT ,
which is updated when processing security attestations in the In-
suranceClaim handler. For clear presentation, Figure 8 extracts
the state proof and fund reversion tuple from T as dedicated vari-
ables stproof and Arevs. When the ProtISC times out, it executes the
contract terms based on its internal state, after which its funds
are depleted and the contract never runs again. Below we explain
several technical subtleties.
Insurance Claim
by the destination of T . (ii) The enclosed on-chain transaction(cid:101)T in
Figure 9: The decision tree to decide the accountable party
for a dirty transaction.
4.4.1
The InsuranceClaim handler processes security attestations from
ProtVES and ProtCLI. Only dual-signed certificates (i.e., Certod and
Certc) or complete Merkle proofs are acceptable. Processing dual-
signed certificates is straightforward as they are explicitly agreed
by both parties. However, processing Merkle proof requires addi-
tional correctness checks. First, when validating a Merkle proof
MerkiT, MerkidT or MerkoT, ProtISC retrieves the single-party signed
certificate CertiT, CertidT or CertoT enclosed in the proof and per-
forms the following correctness check against the certificate. (i) The
certificate must be signed by the correct party, i.e., CertiT is signed
by ProtVES, CertidT is signed by T ’s originator and CertoT is signed
CertidT and CertoT is correctly associated with T . The checking logic
is the same as the on used by ProtVES, which has been explained
in § 4.2.2. (iii) The enclosed tsopen in CertoT is genuine, where the
genuineness is defined as a bounded difference between tsopen and
the height of the NSB block that attaches MerkoT.
4.4.2 Contract Term Settlement
ProtISC registers a callback SettleContract to execute contract terms
automatically upon timeout. ProtISC internally defines an additional
transaction state, called correct. The state of a closed transaction
is promoted to correct if its deadline constraint is satisfied. Then,
ProtISC computes the possible dirty transactions in GT , which are
the transactions that are eligible to be opened, but with non-correct
state. Thus, the execution succeeds only if GT has no dirty transac-
tions. Otherwise, ProtISC employs a decision tree, shown in Figure 9,
to decide the responsible party for each dirty transaction. The deci-
sion tree is derived from the execution steps taken by ProtVES and
ProtCLI. In particular, if a transaction T ’s state is closed, opened or
open, then it is T ’s originator to blame for either failing to fulfill the
If a transaction T ’s state is inited, then it is T ’s destination party’s
responsibility for not proceeding with T even though CertidT has
been provably sent. If a transaction T ’s state is init (only transac-
tions originated from dApp D can have init status), then D (the
originator) is the party to blame for not reacting on the CertiT sent
by V. Finally, if transaction T ’s state is unknown, then V is held
accountable for not proactively driving the initialization of T , no
matter which party originates T .
4.5 Specification of ProtNSB and ProtBC
ProtBC specifies the protocol realization of a general-purpose block-
chain where a set of consensus nodes run a secure protocol to agree
deadline constraint or failing to dispatch(cid:101)T for on-chain execution.
upon the public global state. In this paper, we regard ProtBC as a
conceptual party trusted for correctness and availability, i.e., ProtBC
guarantees to correctly perform any predefined computation (e.g.,
Turing-complete smart contract programs) and is always avail-
able to handle user requests despite unbounded response latency.
ProtNSB specifies the protocol realization of the NSB. ProtNSB is
an extended version of ProtBC with additional capabilities. Due
to space constraint, we move the detailed protocol description of
ProtBC and ProtNSB to our technical report that is available on both
our source code repository [4] and arXiv.
4.6 Security Theorems
To rigorously prove the security properties of UIP, we first present
the cryptography abstraction of the UIP in form of an ideal func-
tionality FUIP. The ideal functionality articulates the correctness
and security properties that UIP wishes to attain by assuming a
trusted entity. Then we prove that ProtUIP, our the decentralized
real-world protocol containing the aforementioned preliminary
protocols, securely realizes FUIP using the UC framework [28], i.e.,
ProtUIP achieves the same functionality and security properties as
FUIP without assuming any trusted authorities. Since the rigorous
proof requires non-trivial simulator construction within the UC
framework, we defer detailed proof to a dedicated section § 8.
5 IMPLEMENTATION AND EXPERIMENTS
In this section, we present the implementation of a HyperService
prototype and report experiment results on the prototype. At the
time of writing, the total development effort includes (i) ∼1,500
lines of Java code and ∼3,100 lines of ANTLR [54] grammar code
for building the HSL programming framework, (ii) ∼21,000 lines of
code, mainly in Go and Python, for implementing the UIP protocol;
and ∼8,000 lines of code, mainly in Go, for implementing the NSB;
and (iii) ∼1,000 lines of code, in Solidity, Vyper, Go and HSL, for
writing cross-chain dApps running on HyperService. The released
source code is available at [4]. The HyperService Consortium is
under active development for HyperService.
5.1 Platform Implementation
To demonstrate the interoperability and programmability across
heterogeneous blockchains on HyperService, our current proto-
type incorporates Ethereum, the flagship public blockchain, and a
permissioned blockchain built atop the Tendermint [17] consensus
engine, a commonly cited cornerstone for building enterprise block-
chains. We implement the necessary accounts (wallets), the smart
contract environment, and the on-chain storage to deliver the per-
missioned blockchain with full programmability. The NSB is also
built atop Tendermint with full support for its claimed capabilities,
such as action staking and Merkle proof retrieval.
For the programming framework, we implement the HSL com-
piler that takes HSL programs and contracts written in Solidity,
Vyper, and Go as input, and produces transaction dependency
graphs. We implement the multi-lang front end and the HSL front
end using ANTLR [54], which parse the input HSL program and
contracts, build an intermediate representation of the HSL program,
and convert the types of contract entities into our unified types.
We also implement the validation component that analyzes the
CorrectClose /OpenedNo party to blameOpenOriginator: Violated deadlineInitedOriginator: Failed to dispatch InitDest: Failed to request openingdApp: Failed to initialize UnknownVES: Failed to proactively drive Negative BranchPositive Branchintermediate representation to validate the entities, operations, and
dependencies specified in the HSL program.
Our experience with the prototype implementation is that the
effort for horizontally scaling HyperService to incorporate a new
blockchain is lightweight: it requires no protocol change to both UIP
and the blockchain itself. We simply need to add an extra parser
to the multi-lang front end to support the programming language
used by the blockchain (if this language is new to HyperService),
and meanwhile VESes extend their visibility to this blockchain. The
HyperService consortium is continuously working on on-boarding
additional blockchains, both permissioned and permissionless.
5.2 Application Implementation
Besides the platform implementation, we further implement and
deploy three categories of cross-chain dApps on HyperService.
Financial Derivatives. Financial derivatives are among the mostly
cited blockchain applications. However, external data feed, i.e., an
oracle, is often required for financial instructions. Currently, ora-
cles are either built atop trusted third-party providers (e.g., Ora-
clize [11]), or using trusted hardware enclaves [62]. HyperService,
for the first time, realizes the possibility of using blockchains them-
selves as oracles. With the built-in decentralization and correctness
guarantees of blockchains, HyperService fully avoids trusted parties
while delivering genuine data feed to smart contracts. In this appli-
cation sector, we implement a cross-chain cash-settled Option dApp
in which options can be natively traded on different blockchains (a
scaled-up version of the introductory example in § 2.3).
Cross-Chain Asset Movement. HyperService natively enables
cross-chain asset transfers without relying on any trusted entities,
such as exchanges. This primitive could power a wide range of
applications, such as a global payment network that interconnects
geographically distributed bank-backed consortium blockchains [9],
an initial coin offering in which tokens can be sold in various
cryptocurrencies, and a gaming platform where players can freely
trade and redeem their valuables (in form of non-fungible tokens)
across different games. In this category, we implement an asset
movement dApp with hybrid operations where assets are moved
among accounts and smart contracts across different blockchains
Federated Computing. In a federated computing model, all par-
ticipants collectively work on an umbrella task by submitting their
local computation results. In the scenario where transparency and
accountability are desired, blockchains are perfect platforms for
persisting both the results submitted by each participant and the
logic for aggregating those results. In this application category, we
implement a federated voting system where delegates in different
regions can submit their votes to their regional blockchains, and
the logic for computing the final votes based on the regional votes
is publicly visible on another blockchain.
5.3 Experiments
We ran experiments with three blockchain testnets: one private
Ethereum testnet, one Tendermint-based blockchain, and the NSB.
Each of those testnets is deployed on a VM instance of a public cloud
on different continents. For experiment purposes, dApp clients and
VES nodes can be deployed either locally or on cloud.
Financial
Derivatives
Mean
%
1.1769 ∼16
4.2399 ∼58
0.6754 ∼10
1.0472 ∼15
7.1104
CryptoAsset
Movement
%