title:LevioSA: Lightweight Secure Arithmetic Computation
author:Carmit Hazay and
Yuval Ishai and
Antonio Marcedone and
Muthuramakrishnan Venkitasubramaniam
LevioSA: Lightweight Secure Arithmetic Computation
Carmit Hazay
Bar-Ilan University
PI:EMAIL
Antonio Marcedone∗
Keybase Inc
PI:EMAIL
ABSTRACT
We study the problem of secure two-party computation of arithmetic
circuits in the presence of active (“malicious”) parties. This problem
is motivated by privacy-preserving numerical computations, such
as ones arising in the context of machine learning training and
classification, as well as in threshold cryptographic schemes.
In this work, we design, optimize, and implement an actively
secure protocol for secure two-party arithmetic computation. A dis-
tinctive feature of our protocol is that it can make a fully modular
black-box use of any passively secure implementation of oblivious
linear function evaluation (OLE). OLE is a commonly used primi-
tive for secure arithmetic computation, analogously to the role of
oblivious transfer in secure computation for Boolean circuits.
For typical (large but not-too-narrow) circuits, our protocol re-
quires roughly 4 invocations of passively secure OLE per multipli-
cation gate. This significantly improves over the recent TinyOLE
protocol (Döttling et al., ACM CCS 2017), which requires 22 invo-
cations of actively secure OLE in general, or 44 invocations of a
specific code-based passively secure OLE.
Our protocol follows the high level approach of the IPS com-
piler (Ishai et al., CRYPTO 2008, TCC 2009), optimizing it in several
ways. In particular, we adapt optimization ideas that were used
in the context of the practical zero-knowledge argument system
Ligero (Ames et al., ACM CCS 2017) to the more general setting
of secure computation, and explore the possibility of boosting effi-
ciency by employing a “leaky” passively secure OLE protocol. The
latter is motivated by recent (passively secure) lattice-based OLE
implementations in which allowing such leakage enables better
efficiency.
We showcase the performance of our protocol by applying its
implementation to several useful instances of secure arithmetic
computation. On “wide” circuits, such as ones computing a fixed
function on many different inputs, our protocol is 5x faster and
transmits 4x less data than the state-of-the-art Overdrive (Keller et
∗Work done while at Cornell Tech.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3354258
Yuval Ishai
Technion
PI:EMAIL
Muthuramakrishnan Venkitasubramaniam
University of Rochester
PI:EMAIL
al., Eurocrypt 2018). Our benchmarks include a general passive-to-
active OLE compiler, authenticated generation of “Beaver triples”,
and a system for securely outsourcing neural network classification.
The latter is the first actively secure implementation of its kind,
strengthening the passive security provided by recent related works
(Mohassel and Zhang, IEEE S&P 2017; Juvekar et al., USENIX 2018).
KEYWORDS
Secure Arithmetic Two-Party Computation; MPC-in-the-Head; Obliv-
ious Linear Evaluation (OLE)
ACM Reference Format:
Carmit Hazay, Yuval Ishai, Antonio Marcedone, and Muthuramakrishnan
Venkitasubramaniam. 2019. LevioSA: Lightweight Secure Arithmetic Com-
putation. In 2019 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’19), November 11–15, 2019, London, United Kingdom. ACM,
New York, NY, USA, 18 pages. https://doi.org/10.1145/3319535.3354258
1 INTRODUCTION
Secure two-party computation (2PC) allows two parties to perform
a distributed computation while protecting, to the extent possible,
the secrecy of the inputs and the correctness of the outputs. The
vast body of research on 2PC has mostly focused on the goal of
computing Boolean circuits, combining an oblivious transfer prim-
itive with either garbled circuits [61] or a secret-sharing based
approach [26, 37]. However, in many applications, the computation
can be more naturally described by using arithmetic operations over
integers, real numbers, or other rings. For such instances of secure
arithmetic computation, general techniques for securely evaluating
Boolean circuits (see, e.g., [42, 46, 50, 60] and references therein)
incur a very significant overhead [39].
Some early examples of secure arithmetic computation arose
in the contexts of distributed generation of cryptographic keys
[7, 18, 25, 52] and privacy-preserving protocols for statistics and
data mining [8, 41]. More recently, secure arithmetic computation
has been used as a tool for privacy-preserving machine learning
applications [33, 43, 48]. Generally speaking, secure arithmetic
computation may provide the right tool for applications that involve
numerical or algebraic computations over integers or bounded-
precision reals. For such applications, standard secure computation
techniques that apply to Boolean circuits are too inefficient.
Arithmetic computations may be conveniently represented us-
ing arithmetic circuits. An arithmetic circuit over a finite field F
is similar to a Boolean circuit, except that the inputs and outputs
are field elements and the gates perform addition, subtraction and
multiplication operations over F. While this model may seem lim-
ited in its power, there are many techniques in the literature for
Session 2C: Secure Computing ICCS ’19, November 11–15, 2019, London, United Kingdom327reducing more general computation tasks to computation of arith-
metic circuits over large fields. For instance, one can use techniques
from approximation theory to approximate common real-valued
functions (such as inverse, logarithm, or trigonometric functions)
by small arithmetic circuits [41] or use efficient bit-decomposition
techniques for mixing Boolean and arithmetic computations [10, 47].
In light of these techniques, arithmetic circuits provide a broadly
useful canonical model for representing secure computation tasks.
The main contribution of this work is the design and implementa-
tion of a concretely efficient secure two-party computation protocol
for arithmetic circuits. Our protocol is actively secure, providing
security against an active (malicious) adversary who corrupts one
of the two parties, and yields significant efficiency improvements
over previous protocols of this type. In particular, our protocol has
similar performance to Overdrive [36] in its worst case scenario (i.e.
narrow circuits), but is up to 5 times faster and transmits 4 times
less bits when used on typical “wide” circuits (see Section 5.2 for
a discussion on wide circuits). The latter captures the commonly
occurring goal of evaluating the same function on a big number of
inputs.
A distinctive feature of our protocol is that it can make a fully
modular black-box use of any passively secure implementation of
oblivious linear function evaluation (OLE).1 This means that it can
build on a variety of existing or future implementations of passively
secure OLE, inheriting their security and efficiency features. To the
best of our knowledge, our work gives the first working implementa-
tion of a general “passive-to-active” compiler of any kind.
Given the multitude of optimization goals, security requirements,
and execution platforms, such a modular design can have major
advantages. For instance, if the lattice-based passively secure OLE
we use for our current implementation is improved in any way (e.g.,
by taking advantage of a GPU, by improving the FFT algorithm, or
even by plugging in an entirely new additively homomorphic en-
cryption scheme based on new assumptions), our final protocol will
automatically inherit the performance gain without requiring any
modification. Finally, we demonstrate the usefulness of our compiler
to construct actively secure computation based on weaker primi-
tives. In particular, we construct actively secure OLE from passive
OLE that are imperfect (i.e., have a statistical privacy/correctness er-
ror) but potentially more efficient. For example, imperfect OLEs can
be instantiated more efficiently than passive OLEs by aggressively
setting the parameters in lattice-based schemes.
1.1 Background and Related Work
We next provide some background on prior relevant works.
2PC in the OLE-hybrid. Oblivious linear function evaluation
(OLE) can be viewed as an arithmetic generalization of oblivious
transfer (OT). Recall that the OLE functionality computes ax + b,
where x ∈ F is the input of one party, who also gets the output, and
a, b ∈ F are the inputs of the other party. OLE serves as a natural
building block for secure arithmetic computation. Indeed, when set-
tling for passive security, any arithmetic circuit can be evaluated in
the OLE-hybrid (namely, using an ideal OLE oracle) by using only 2
1An OLE protocol is a secure two-party protocol for computing the function ax + b
over F, where one party inputs a and b, and the other inputs x and obtains the output.
OLE is a commonly used primitive for secure arithmetic computation, analogously to
the role of oblivious transfer in secure Boolean computation [2, 31, 49].
OLE calls per multiplication gate [26, 31]. Passively secure OLE (or
“passive-OLE” for short) can be directly realized using any additively
homomorphic encryption, which in turn can be based on either
number theoretic assumptions or lattice assumptions (see [33] for
a survey of such constructions). Alternatively, passive-OLE can
also be efficiently realized under the assumption that noisy random
codewords of a Reed-Solomon code (with a sufficiently high noise
rate) are pseudorandom [31, 49].
Trying to extend the OLE-based approach to active security,
one encounters two difficulties. First, upgrading passive-OLE to
active-OLE typically involves a significant overhead. For a specific
code-based passive-OLE construction from [31], the overhead has
recently been reduced to 2x [23]. However, the underlying tech-
nique is quite specialized and does not seem to apply to the best
current passive-OLE protocols, such as the efficient lattice-based
protocols from [33]. A second difficulty is that even when given an
ideal (actively secure) OLE, securely evaluating general arithmetic
circuits is nontrivial. The recent TinyOLE protocol of Döttling et
al. [15] tackles this problem via the following two-step approach: (1)
use OLE to implement instances of an “authenticated Beaver triples”
functionality [5, 13]; (2) use instances of this functionality to evalu-
ate a general arithmetic circuit. The optimized implementation of
this approach from [15] consumes 22 instances of active-OLE per
multiplication gate. An alternative approach for OLE-based 2PC
using so-called “AMD circuits” [21] has a similar overhead.
2PC in OT-hybrid. Another approach for arithmetic 2PC uses a
bit decomposition for computing authenticated triples based on
oblivious transfer (OT). The MASCOT protocol of Keller et al. [35]
extends the passively secure multiplication protocol of Gilboa [25]
using 15 log(|F|) active OTs per multiplication gate. In a more recent
work [20], Frederiksen et al. extend this technique by employing
additively-homomorphic commitments, and reduce the number of
active OTs per gate to 6 log(|F|) for a field F of size O(2s), for s bits
of statistical security. Generally speaking, the OT-based approach is
quite efficient in computation but involves a higher communication
cost for secure arithmetic computation over large fields.
2PC based on semi-homomorphic encryption. Finally, the Over-
drive protocol by Keller et al. [36] represents a third approach.
Namely, it reduces the communication complexity of the MASCOT
protocol for two parties by a factor of 20 using special-purpose
lattice-based proofs of knowledge dedicated for creating authenti-
cated triples.
Our protocol builds on the high level approach of the IPS com-
piler [30, 31], that in turn generalizes the MPC-in-the-head para-
digm of [29]. In particular, we further develop optimization ideas
that were used in the context of the practical zero-knowledge ar-
gument system Ligero [1] and extend them to the more general
setting of secure two-party computation. We begin with a brief
overview of the MPC-in-the-head paradigm.
The virtual MPC or MPC-in-the-head paradigm. The work of
Ishai et al. [29] introduced a novel paradigm that allows compi-
lation of MPC protocols to zero-knowledge proofs in a modular
way. Generalizing this technique from zero-knowledge to secure
computation, the work of Ishai, Prabhakaran and Sahai [30] pro-
vided an implementation of a m-party active secure computation
Session 2C: Secure Computing ICCS ’19, November 11–15, 2019, London, United Kingdom328protocols in the dishonest majority setting for an arbitrary func-
tionality F by making black-box use of the following two weaker
ingredients: (1) a virtual honest-majority MPC protocol (referred
to as an outer protocol) that securely realizes F with m clients and
n servers, tolerating active corruption of a minority of the servers
and an arbitrary subset of the clients, and (2) a passively secure
m-party protocol (referred to as an inner protocol) for a “simpler”
functionality tolerating an arbitrary number of corruptions.
This compiler, referred to as the “IPS compiler,” has several im-
portant properties. In particular, it introduces a uniform framework
that applies to both the two-party and multiparty settings, it implies
excellent asymptotic efficiency in some settings, and enjoys the
flexibility of being instantiated with different sub-protocols in a
black-box way which implies different computation and communi-
cation overheads. Nevertheless, despite its appealing features, the
concrete efficiency of the IPS compiler has not been well established.
In fact, prior works argue bottlenecks in obtaining concretely effi-
cient protocols based on this compiler [15, 40]. The main drawback
is the reliance on a large number of virtual servers in the outer MPC
protocol [40] due to the implementation of the watchlist channels.
This requirement is part of an innovative mechanism that adds pri-
vacy and correctness to the passive protocol. Still, it constitutes the
main bottleneck towards making this compiler concretely efficient.
The practicality of MPC-in-the-head. With the aim of under-
standing the practicality of the IPS compiler, Lindell et al. [40] ex-
amined different practical aspects of this compiler. They introduced
a tighter analysis which reduced the number of virtual servers
from O(m
2 · n) into O(m · n), as well as improved the watchlists
setup mechanism. Their analysis highlighted the bottlenecks of this
compiler towards making it practical, arguing that the number of
servers must be tightened to achieve better efficiency.
In the context of zero-knowledge protocols, the practicality of
the MPC-in-the-head paradigm has been demonstrated in several
recent works [1, 9, 24, 34]. More closely related to the present work,
Ames et al. [1] presented the first application of the paradigm that
delivered a concretely efficient and sublinear argument protocol for
NP. In slightly more detail, the work of [1] designed an optimized
honest-majority MPC protocols where the amortized computation
and communication per party was minimized and applied a tight-
ened version of the the compiler presented in [29].
1.2 Our Contribution
In this paper, we design and implement a new actively secure two-
party protocol for arithmetic circuits by following the high-level
approach of the IPS compiler. The main novelty in our work consists
of (1) designing a concretely efficient outer protocol, and (2) providing
a tighter analysis of the IPS compiler to obtain concrete parame-