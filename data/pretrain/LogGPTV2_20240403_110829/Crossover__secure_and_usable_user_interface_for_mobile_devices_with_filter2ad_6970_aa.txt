title:Crossover: secure and usable user interface for mobile devices with
multiple isolated OS personalities
author:Matthias Lange and
Steffen Liebergeld
Crossover: Secure and Usable User Interface for Mobile
Devices With Multiple Isolated OS Personalities
Matthias Lange
Steffen Liebergeld
PI:EMAIL
PI:EMAIL
Security in Telecommunications
Technische Universität Berlin
ABSTRACT
Bring your own device policies allow private phones to be
used in corporate environments. Solutions with multiple
operating system personalities aim at solving the tension
between the user’s needs and the corporate’s security poli-
cies. These solutions succeed at isolating personal and cor-
porate information at the data level. But thorough research
of the security requirements on the user interface to handle
diﬀerent environments on one device is missing.
In this work we deﬁne a threat model and derive the pre-
requisites for a practical and secure user interface for mobile
devices. We designed an UI framework which provides the
mechanisms to handle multiple environments on a mobile
device. Our design is applicable to several diﬀerent virtu-
alization solutions. We implemented a prototype that runs
on a real device and evaluated it in terms of usability and
security.
1.
INTRODUCTION
For most people mobile touchscreen devices, such as smart-
phones and tablets, are the personal hub to manage their
digital life. There is a recent trend to use privately owned
mobile devices in corporate environments as well. Allow-
ing these devices to access corporate networks poses serious
threats on the security of corporate data. Previous research
showed that current smartphone and tablet operating sys-
tems (OSes) such as iOS and Android are not up to the task
of securely handling information [1, 2, 3, 4]. This problem
is pronounced when the smartphone hosts critical corporate
information such as business contacts, contracts and conﬁ-
dential data.
To handle privately owned devices, companies started to
set up bring your own device-policies (BYOD) [5]. Those
policies may include disabling functionality like the camera,
remote wipe of business and personal data and restrictions
on which applications can be installed. While these mea-
sures are required for corporate security, such harsh limita-
tions are unbearable for the employees, who want to get the
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’13 Dec. 9-13, 2013, New Orleans, Louisiana USA
Copyright 2013 ACM 978-1-4503-2015-3/13/12 ...$15.00.
http://dx.doi.org/10.1145/1234567.1234567.
most out of their privately funded equipment. Usually those
measures also degrade usability which is both a drawback for
users and for security. If usability is bad, users either start
avoiding the technology or they start to work around it. An
example is the use of private e-mail accounts instead of the
company’s super secure one because that one is not remotely
accessible or requires special equipment.
A solution to address the security weaknesses of existing
mobile OSes is to implement multiple security domains on
the device and have a trusted component isolate them from
one another. For example, one domain can be provisioned
by the company and another one is unrestricted and hosts
the user’s applications and private data. Several implemen-
tations of such multi-domain setups have been proposed.
They range from in-depth modiﬁcations of the OS’s middle-
ware [6] over using OS containers [7] to virtualizing the OS
itself [8, 9, 10, 11]
These solutions enforce isolation on the data and OS level.
But still security is aﬀected by the way we interact with
mobile devices through their user interface (UI). The fact
that we hold them in our hands and use them on the go is
diﬀerent to the way to use a traditional computer. Having
multiple isolated environments with diﬀerent security levels
on one mobile device raises a couple of questions about the
UI.
• How can the information which domain receives user
input be conveyed to the user in a trustworthy fashion?
• How can the user reliably switch between domains?
• What are the properties such a system must have in
terms of usability?
In this paper we propose a secure graphical user interface
(GUI) for mobile multi-personality devices, which we call
Crossover.
Our contributions are:
• We deﬁne a thorough threat model with regard to the
user interface.
• To the best of our knowledge we are the ﬁrst to de-
sign a secure GUI for mobile devices with multiple OS
personalities.
• We show the applicability of our design with a proto-
type implementation based on L4Android [9] that runs
on a real mobile device.
The rest of the paper is organized as follows. We start
by outlining the environment and setup of our work in Sec-
tion 2.
In Section 3 we describe the threat model before
249
detailing our design in Section 4. The implementation is
outlined in Section 5. The evaluation in Section 6 is comple-
mented with a security analysis. Finally we present related
work in Section 7 and conclude in Section 8.
2. ENVIRONMENTAL MODEL
In this section we describe the environment and setup
which is relevant for our work. We start with a description
of the hardware and continue with a description of the inter-
action model of current mobile OSes. We will use the term
mobile device interchangeably for smartphone and tablet de-
vices throughout this paper.
2.1 Hardware
Throughout this paper we assume standard commercial
oﬀ-the-shelf mobile devices. They are battery powered and
usually equipped with 3 to 5 inch capacitive multi touch-
capable touchscreens (7 to 10 inches for tablets). Those de-
vices feature a number of hardware buttons for e.g volume
up/down and sleep. The audio system consists of multi-
ple microphones, an audio jack and small internal speakers.
Cameras are built into the front and back of the devices.
Some devices have a built-in front-facing LED which can
glow in diﬀerent colors.
Mobile devices can connect to cellular networks via a built-
in modem and usually feature Wiﬁ connectivity. Peripheral
hardware such as headsets can be connected via Bluetooth.
A general purpose CPU integrated into a system on a chip
(SoC) provides the processing capabilities. A conceptual
device is depicted in Figure 1.
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:2)
(cid:6)(cid:5)(cid:7)(cid:8)(cid:9)(cid:3)(cid:9)(cid:10)(cid:11)(cid:12)(cid:13)(cid:4)(cid:14)(cid:15)(cid:7)(cid:5)
(cid:27)(cid:3)(cid:28)(cid:9)(cid:4)(cid:14)(cid:10)(cid:12)(cid:29)(cid:9)(cid:30)(cid:25)(cid:10)(cid:12)(cid:13)(cid:4)(cid:14)(cid:15)(cid:7)(cid:5)
(cid:13)(cid:16)(cid:4)(cid:4)(cid:17)(cid:12)(cid:18)(cid:19)(cid:10)(cid:10)(cid:7)(cid:14)
This usage model results from the physical properties of mo-
bile devices. The physical screen real estate is limited and
touch handling is an imprecise input method which requires
suﬃciently large UI widgets.
We call the current application the active application. Only
the active application receives input and can draw to the
screen. Other applications may still run in the background
to e.g. ﬁnish a download or play music. This usage model
is in contrast to desktop computing. On PCs the physical
screen dimensions are large. Trackpads or a mouse allow for
pixel precise input and there are usually multiple windows
of multiple applications visible in parallel.
Mobile OSes display important information such as net-
work status, battery level or notiﬁcations in a small infor-
mation panel located at the top of the screen. This panel
is not permanently visible as it can be hidden by fullscreen
applications such as games or movie players.
Applications are started from a central place called the
application launcher or are invoked by user actions such
as touching a web link in an e-mail message. One of the
hardware buttons (usually called home button) or a perma-
nently visible soft button enables the user to return to the
application launcher at any time. Certain events such as
an incoming call may automatically switch from the active
application to the call screen. An illustration of a typical
mobile screen is depicted in Figure 2.
(cid:10)(cid:8)(cid:7)(cid:4)(cid:11)(cid:5)(cid:6)(cid:7)(cid:4)(cid:8)(cid:9)
(cid:12)(cid:6)(cid:9)(cid:13)(cid:3)
(cid:14)(cid:15)(cid:16)(cid:17)(cid:18)
(cid:1)(cid:2)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:4)(cid:8)(cid:9)
(cid:1)(cid:2)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:4)(cid:8)(cid:9)
(cid:20)(cid:7)(cid:16)(cid:19)(cid:3)(cid:4)(cid:12)(cid:21)(cid:7)(cid:22)(cid:23)(cid:4)(cid:5)
(cid:26)(cid:7)(cid:19)(cid:22)(cid:25)(cid:15)(cid:22)(cid:5)(cid:4)(cid:4)(cid:14)
Figure 2: Conceptual screen of a mobile device. The
network and battery indicator are displayed in the
information panel located at the top of the screen.
(cid:13)(cid:17)(cid:4)(cid:2)(cid:23)(cid:4)(cid:5)
(cid:24)(cid:9)(cid:22)(cid:5)(cid:7)(cid:17)(cid:25)(cid:7)(cid:14)(cid:4)
Figure 1: Conceptual mobile device with various
sensors and buttons and a large touchscreen.
Mobile devices carry a bunch of sensors to gather informa-
tion about their environment such as a proximity sensor, an
accelerometer combined with a gyroscope, an ambient light
sensor, a location sensor, a compass and sometimes even a
barometer.
2.2 Usage and Interaction Model
Mobile OSes have an application centric UI, where there is
only one application running fullscreen at any point in time.
3. THREAT MODEL
For our threat model we assume a mobile device that
hosts multiple OS personalities. The hosting platform (a hy-
pervisor or a special middle ware) ensures spatial isolation
between each OS personality. This precludes side-channels
such as cache timing attacks or exploitation of sensor read-
ings. All OS instances can potentially run in parallel.
We are only concerned with ensuring isolation between OS
personalities at the UI level. At any point in time exactly
one personality is visible full-screen. We point out that we
do not address UI isolation within an OS personality as done
by Niemietas et al. [12]. Hardware attacks such as cold boot
or JTAG attacks are out of scope of this paper.
In our threat model we assume that an attacker has sub-
verted one OS personality. A subverted OS personality poses
the following threats:
250
Screen Scraping Attack The subverted OS personality
might directly do screenshots of other personalities and
read conﬁdential information.
Spying Attack The subverted OS personality might wire-
tap input events while the user enters conﬁdential in-
formation into other environments.
Lookalike Attack A mobile device is usually operated un-
der diﬃcult environmental conditions. This makes it
easy for an attacker to fake the UI. A subverted OS
personality could easily mimic the UI of another OS in-
stance. If the user can be persuaded that what they see
is the OS personality they want to use, they may en-
ter conﬁdential information directly into the subverted
personality.
Denial of Service Attack If an attacker has access to the
input devices they can ﬁlter and modify input events.
For example they can disable a switch to another OS
personality, which violates the availability of these per-
sonalities. They could also emulate a switch by chang-
ing the UI of the subverted OS personality to look like
the target personality.
Of course the attacker can combine diﬀerent attack meth-
ods for a more intelligent attack.
4. DESIGN
In this section we introduce Crossover. We present its
architecture, UI and its principle functionality. Crossover
has three distinct functions: a security level indicator, a
secure global menu and a global lockscreen. For the rest
of the paper we will use the term virtual machine (VM) to
denote an OS personality.
In Section 2.2 we described the interaction model of mo-
bile devices. Because of the limited screen real estate, a mo-
bile OS is optimized to take advantage of the whole screen.
This space is required to make multi-touch gestures such as
swipe and pinch to zoom possible.
Given that, we stick to the general usage pattern of mo-
bile devices. That is, only one VM is allowed to draw to
the complete screen and receive input from the user at any
point in time. We call this VM the active VM. All other
VMs are not allowed to receive input or draw to the screen
(background VMs). Because background VMs do not re-
ceive input events we expect them to enter sleep mode after
a certain timeout. This will reduce the CPU load and save
battery power.
In the following sections we ﬁrst describe the principle
architecture of Crossover. We then describe each part and
its functionality in more detail.
4.1 Architecture
A conceptual illustration of the Crossover setup is de-
picted in Figure 3. In Crossover we have a hypervisor which
allows to setup multiple OS instances. For the design of
Crossover we make no assumptions on the implementation
of the hypervisor. The hypervisor manages system resources
such as CPU time, memory and it ensures isolation between
VMs. Crossover controls the touchscreen and the display
controller through two drivers. Those drivers communicate
with a multiplexing component. VMs and the Crossover UI
are clients of the multiplexing component.
The display controller driver leverages physical framebuf-
fers. The driver is also responsible for controlling the dis-
play brightness. The input driver reads input events from
the touchscreen controller and hardware buttons and reports
those to the multiplexing component.
The multiplexing component provides virtual framebuﬀer
and input devices to its clients. Those virtual framebuﬀers
are composed into one physical framebuﬀer as provided by
the display controller driver. The multiplexing component
is always in control of the position and dimension of each
(virtual) framebuﬀer. Clients cannot position their frame-
buﬀer on the screen. Input events received from the input
driver are distributed to the respective client as deﬁned by
a static policy.
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:10)(cid:11)(cid:2)(cid:12)(cid:13)(cid:14)(cid:15)(cid:16)(cid:17)(cid:18)(cid:7)(cid:8)(cid:9)
(cid:8)(cid:4)(cid:14)(cid:3)(cid:16)(cid:11)(cid:23)
(cid:24)(cid:14)(cid:11)(cid:25)(cid:6)(cid:26)(cid:16)(cid:6)(cid:14)
(cid:8)(cid:4)(cid:14)(cid:3)(cid:16)(cid:11)(cid:23)
(cid:27)(cid:17)(cid:21)(cid:16)(cid:3)
(cid:8)(cid:4)(cid:14)(cid:3)(cid:16)(cid:11)(cid:23)
(cid:24)(cid:14)(cid:11)(cid:25)(cid:6)(cid:26)(cid:16)(cid:6)(cid:14)
(cid:8)(cid:4)(cid:14)(cid:3)(cid:16)(cid:11)(cid:23)
(cid:27)(cid:17)(cid:21)(cid:16)(cid:3)
(cid:33)(cid:14)(cid:15)(cid:22)(cid:22)(cid:15)(cid:5)(cid:6)(cid:14)(cid:7)(cid:34)(cid:27)
(cid:9)(cid:16)(cid:23)(cid:3)(cid:4)(cid:21)(cid:23)(cid:6)(cid:28)(cid:6)(cid:14)
(cid:35)(cid:15)(cid:23)(cid:4)(cid:2)(cid:20)
(cid:27)(cid:17)(cid:21)(cid:16)(cid:3)
(cid:32)(cid:14)(cid:4)(cid:5)(cid:6)(cid:14)
(cid:32)(cid:4)(cid:22)(cid:21)(cid:23)(cid:11)(cid:20)
(cid:32)(cid:14)(cid:4)(cid:5)(cid:6)(cid:14)
(cid:19)(cid:20)(cid:21)(cid:6)(cid:14)(cid:5)(cid:4)(cid:22)(cid:15)(cid:14)
(cid:29)(cid:25)(cid:11)(cid:14)(cid:3)(cid:21)(cid:30)(cid:15)(cid:17)(cid:6)(cid:7)(cid:19)(cid:11)(cid:14)(cid:18)(cid:31)(cid:11)(cid:14)(cid:6)
Figure 3: Conceptual illustration of the Crossover
architecture. The input driver reports input events
to the multiplexer. The multiplexer uses and conﬁg-
ures the framebuﬀers provided by the display con-
troller driver.
4.2 Security Level Indicator
To provide conﬁdence for the user that they are commu-
nicating with the VM they intent to communicate, a trusted
path is needed. The trusted path ensures that an attacker
cannot intercept or modify the communication.
In Crossover the Security Level Indicator (SLI) acts as the
trusted path to the user. The SLI allows the user to iden-
tify the active VM. Because not all mobile devices feature a
multi-color LED we decided to use a small area on the top of
the screen for the SLI. The rest of the screen is in use by the
active VM. Our architecture ensures that the SLI cannot be
replaced or overdrawn by any other component.
The SLI is placed at the top of the screen. There it is the
least likely that it is covered by the user’s hands. The SLI
adapts to device orientation changes. During provisioning
time each VM gets a name and color assigned. Consequently
the SLI is tinted with that color. Further it may display the
name of the active VM to ease distinction between diﬀerent
VMs. Figure 4 shows the principal design of the SLI.
251
(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:7)(cid:11)(cid:12)(cid:13)