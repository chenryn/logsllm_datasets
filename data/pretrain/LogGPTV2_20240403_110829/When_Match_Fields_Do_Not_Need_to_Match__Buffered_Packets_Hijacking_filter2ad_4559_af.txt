vulnerabilities. However, they do not ﬁnd the buffered packet
hijacking vulnerability and are necessarily incomplete due to
their reliance on fuzzing.
There are some attacks generated by malicious hosts in
SDN, such as topology poisoning [2], identiﬁer binding [49],
ﬂow table saturation [23], control channel disruption [50],
and PACKET_IN ﬂooding [27]. Researchers have provided
countermeasures [2], [49], [23], [50] against these attacks.
Here, we focus on defense systems against the PACKET_IN
ﬂooding attack, i.e., FloodGuard [27], FloodDefender [21],
AVANT-GUARD [29], and LineSwitch [28], since our paper
provides a similar attack. As we detailed in Section IV, the
defense systems can be evaded by our attack that triggers
PACKET_IN ﬂooding with benign ﬂows by hijacking buffered
packets rather than with a number of malicious ﬂows.
13
API: PACKET_INpkt_hdr: 10.0.0.2match: 1.1.1.1API: FLOW_MODbuf_id: 2attack 0 0.2 0.4 0.6 0.8 1 0 5 10 15 20CDFFlow Setup Time (ms)BaselineConCheckIX. CONCLUSION
In this paper, we identify a new vulnerability named
buffered packet hijacking that is inherent in SDN rule in-
stallation for a new ﬂow. By exploiting the vulnerability, we
discover a number of attacks that can signiﬁcantly disrupt
different layers of SDN and evade existing defense systems.
We build a model and conduct a theoretical analysis to derive
the probability of successfully hijacking a buffered packet.
We evaluate the feasibility and effectiveness of the attacks
in a real SDN testbed. Finally, we develop a lightweight
and application-transparent countermeasure that can be readily
deployed in SDN controllers as a patch.
ACKNOWLEDGMENT
We thank the anonymous reviewers for their construc-
tive comments. This work is partially supported by the
National Natural Science Foundation of China under Grant
61625203, 61832013, 61572278, and U1736209, the National
Key R&D Program of China under Grant 2017YFB0801701,
US ONR grants N00014-16-1-3214 and N00014-18-2893, US
ARO grant W911NF-17-1-0447, and the US National Science
Foundation (No. 1617985, No. 1642129, No. 1700544, No.
1740791). Mingwei Xu and Qi Li are corresponding authors.
REFERENCES
[1] B. E. Ujcich, S. Jero, A. Edmundson, Q. Wang, R. Skowyra, J. Landry,
A. Bates, W. H. Sanders, C. Nita-Rotaru, and H. Okhravi, “Cross-app
poisoning in software-deﬁned networking,” in Proceedings of the 2018
ACM SIGSAC Conference on Computer and Communications Security.
ACM, 2018, pp. 648–663.
[2] S. Hong, L. Xu, H. Wang, and G. Gu, “Poisoning network visibility
in software-deﬁned networks: New attacks and countermeasures.” in
NDSS, vol. 15, 2015, pp. 8–11.
“Floodlight Load Balancer,” https://github.com/ﬂoodlight/ﬂoodlight/
tree/master/src/main/java/net/ﬂoodlightcontroller/loadbalancer,
2014,
[Online].
[3]
[4] S. Jain, A. Kumar, S. Mandal, J. Ong, L. Poutievski, A. Singh,
S. Venkata, J. Wanderer, J. Zhou, M. Zhu et al., “B4: Experience
with a globally-deployed software deﬁned wan,” in ACM SIGCOMM
Computer Communication Review, vol. 43, no. 4. ACM, 2013, pp.
3–14.
[5] H. Wang, G. Yang, P. Chinprutthiwong, L. Xu, Y. Zhang, and G. Gu,
“Towards ﬁne-grained network security forensics and diagnosis in the
sdn era,” in Proceedings of the 2018 ACM SIGSAC Conference on
Computer and Communications Security. ACM, 2018, pp. 3–16.
“Hewlett-Packard Enterprise: HPE SDN app store,” https://community.
arubanetworks.com/t5/SDN-Apps/ct-p/SDN-Apps, 2018, [Online].
[6]
[7] X. Wen, B. Yang, Y. Chen, C. Hu, Y. Wang, B. Liu, and X. Chen,
“Sdnshield: Reconciliating conﬁgurable application permissions for sdn
app markets,” in 2016 46th annual IEEE/IFIP international conference
on dependable systems and networks (DSN).
IEEE, 2016, pp. 121–132.
[8] M. C. Dacier, H. K¨onig, R. Cwalinski, F. Kargl, and S. Dietrich,
“Security challenges and opportunities of software-deﬁned networking,”
IEEE Security & Privacy, vol. 15, no. 2, pp. 96–100, 2017.
[9] P. Porras, S. Shin, V. Yegneswaran, M. Fong, M. Tyson, and G. Gu, “A
security enforcement kernel for openﬂow networks,” in Proceedings of
the ﬁrst workshop on Hot topics in software deﬁned networks. ACM,
2012, pp. 121–126.
[10] P. A. Porras, S. Cheung, M. W. Fong, K. Skinner, and V. Yegneswaran,
“Securing the software deﬁned network control layer.” in NDSS, 2015.
[11] Lee, Seungsoo et al., “The smaller, the shrewder: A simple malicious
application can kill an entire sdn environment,” in ACM SDN-NFV
Security, 2016, pp. 23–28.
14
[12] C. Yoon, S. Shin, P. Porras, V. Yegneswaran, H. Kang, M. Fong,
B. O’Connor, and T. Vachuska, “A security-mode for carrier-grade
sdn controllers,” in Proceedings of the 33rd Annual Computer Security
Applications Conference. ACM, 2017, pp. 461–473.
[13] H. Padekar, Y. Park, H. Hu, and S.-Y. Chang, “Enabling dynamic access
control for controller applications in software-deﬁned networks,” in
Proceedings of the 21st ACM on Symposium on Access Control Models
and Technologies. ACM, 2016, pp. 51–61.
[14] Y. Tseng, M. Pattaranantakul, R. He, Z. Zhang, and F. Na¨ıt-Abdesselam,
“Controller dac: Securing sdn controller with dynamic access control,”
in 2017 IEEE International Conference on Communications (ICC).
IEEE, 2017, pp. 1–6.
[15] A. Khurshid, X. Zou, W. Zhou, M. Caesar, and P. B. Godfrey, “Veriﬂow:
Verifying network-wide invariants in real time,” in Presented as part
of the 10th {USENIX} Symposium on Networked Systems Design and
Implementation ({NSDI} 13), 2013, pp. 15–27.
[16] S. Shin, Y. Song, T. Lee, S. Lee, J. Chung, P. Porras, V. Yegneswaran,
J. Noh, and B. B. Kang, “Rosemary: A robust, secure, and high-
performance network operating system,” in Proceedings of the 2014
ACM SIGSAC conference on computer and communications security.
ACM, 2014, pp. 78–89.
“Floodlight
SDN
ﬂoodlight/, [Online].
http://www.projectﬂoodlight.org/
Controller,”
[17]
[18] C. Yoon and S. Lee, “Attacking sdn infrastructure: Are we ready for
[19]
[20]
the next-gen networking?” in BlackHat-USA, 2016.
J. Hizver, “Taxonomic modeling of security threats in software deﬁned
networking,” in BlackHat Conference, 2015, pp. 1–16.
“ONOS - A new carrier-grade SDN network operating system designed
for high availability, performance, and scale-out,” https://onosproject.
org/, [Online].
[22]
IEEE, 2017, pp. 1–9.
[21] G. Shang, P. Zhe, X. Bin, H. Aiqun, and R. Kui, “Flooddefender:
Protecting data and control plane resources under sdn-aimed dos
attacks,” in IEEE INFOCOM 2017-IEEE Conference on Computer
Communications.
“OpenFlow Speciﬁcation v1.5.1,” https://www.opennetworking.org/
wp-content/uploads/2014/10/openﬂow-switch-v1.5.1.pdf, 2015,
[On-
line].
J. Cao, M. Xu, Q. Li, K. Sun, Y. Yang, and J. Zheng, “Disrupting sdn
via the data plane: a low-rate ﬂow table overﬂow attack,” in Proceedings
of International Conference on Security and Privacy in Communication
Systems. Springer, 2017, pp. 356–376.
[23]
[25]
[24] M. Alizadeh, A. Greenberg, D. A. Maltz, J. Padhye, P. Patel, B. Prab-
hakar, S. Sengupta, and M. Sridharan, “Data center tcp (dctcp),” ACM
SIGCOMM computer communication review, vol. 41, no. 4, pp. 63–74,
2011.
“Latency
-
latency-everywhere-and-it-costs-you-sales-how-crush-it,
[Online].
“FastIron Ethernet Switch Software Deﬁned Networking: Conﬁguration
Guide,”
http://noc.ucsc.edu/docs/BigCreek/fastiron-08030r-manuals/
fastiron-08030-sdnguide.pdf, [Online].
Sales
http://highscalability.com/
2009,
Everywhere
Crush
And
It,”
Costs
How
[26]
Is
To
It
You
[27] H. Wang, L. Xu, and G. Gu, “Floodguard: A dos attack prevention ex-
tension in software-deﬁned networks,” in 2015 45th Annual IEEE/IFIP
International Conference on Dependable Systems and Networks.
IEEE,
2015, pp. 239–250.
[28] M. Ambrosin, M. Conti, F. De Gaspari, and R. Poovendran,
“Lineswitch: Tackling control plane saturation attacks in software-
deﬁned networking,” IEEE/ACM Transactions on Networking, vol. 25,
no. 2, pp. 1206–1219, 2016.
[30]
[29] S. Shin, V. Yegneswaran, P. Porras, and G. Gu, “Avant-guard: Scalable
and vigilant switch ﬂow management in software-deﬁned networks,”
in Proceedings of the 2013 ACM SIGSAC conference on Computer &
communications security. ACM, 2013, pp. 413–424.
“Log-logistic Distribution,” https://en.wikipedia.org/wiki/Log-logistic
distribution, [Online].
“Convolution of Probability Distributions,” https://en.wikipedia.org/
wiki/Convolution of probability distributions, [Online].
“AS4610-54T Data Center Switch,” https://www.edge-core.com/
productsInfo.php?cls=1&cls2=9&cls3=46&id=21, [Online].
[31]
[32]
network security enhancement. For each application, we collect
1,000,000 processing delays to draw its probability density. As
shown in Figure 18, the distribution of processing delays can
be well modeled with the log-logistic distribution with different
parameters.
(a) Topology Manager
(b) Device Manager
(c) Forwarding
(d) Load Balancer
(e) Scan Detection
(f) ARP Proxy
(g) Hub
(h) Learning Switch
Fig. 18: PDF of processing delays of PACKET_IN messages
for different SDN applications. Here, LL(α, β) denotes the
log-logistic distribution with parameters α and β.
Topology Manager,”
of Floodlight,”
https://github.com/
https://github.com/ﬂoodlight/
“Default Conﬁguration File
ﬂoodlight/ﬂoodlight/blob/master/src/main/resources/ﬂoodlightdefault.
properties, [Online].
“Floodlight
ﬂoodlight/tree/master/src/main/java/net/ﬂoodlightcontroller/topology/,
[Online].
“Floodlight Device Manager,” https://github.com/ﬂoodlight/ﬂoodlight/
tree/master/src/main/java/net/ﬂoodlightcontroller/devicemanager/, [On-
line].
“Floodlight Load Balancer,” https://github.com/ﬂoodlight/ﬂoodlight/
tree/master/src/main/java/net/ﬂoodlightcontroller/loadbalancer/,
[Online].
“Floodlight Forwarding,” https://github.com/ﬂoodlight/ﬂoodlight/tree/
master/src/main/java/net/ﬂoodlightcontroller/forwarding/, [Online].
J. Zheng, Q. Li, G. Gu, J. Cao, D. K. Yau, and J. Wu, “Realtime ddos
defense using cots sdn switches via adaptive correlation analysis,” IEEE
Transactions on Information Forensics and Security, vol. 13, no. 7, pp.
1838–1853, 2018.
“Floodlight
ﬂoodlight-proxyarp/, [Online].
“Floodlight Hub,” https://github.com/ﬂoodlight/ﬂoodlight/tree/master/
src/main/java/net/ﬂoodlightcontroller/hub/, [Online].
“Floodlight Learning Switch,” https://github.com/ﬂoodlight/ﬂoodlight/
tree/master/src/main/java/net/ﬂoodlightcontroller/learningswitch/,
[On-
line].
https://github.com/mbredel/
ARP
Proxy,”
[33]
[34]
[35]
[36]
[37]
[38]
[39]
[40]
[41]
[43]
[42] Tcpreplay - Pcap Editing and Replaying Utilities, https://tcpreplay.
appneta.com/, [Online].
“CAIDA Passive Monitor: Chicago B,” http://www.caida.org/data/
passive/trace stats/chicago-B/2015/?monitor=20150219-130000.UTC,
[Online].
[44] C. R¨opke and T. Holz, “Sdn rootkits: Subverting network operating
systems of software-deﬁned networks,” in International Symposium on
Recent Advances in Intrusion Detection. Springer, 2015, pp. 339–356.
[45] C. Lee and S. Shin, “Shield: an automated framework for static analysis
of sdn applications,” in Proceedings of the 2016 ACM International
Workshop on Security in Software Deﬁned Networks & Network Func-
tion Virtualization. ACM, 2016, pp. 29–34.
[46] S. Lee, C. Yoon, C. Lee, S. Shin, V. Yegneswaran, and P. A. Porras,
“Delta: A security assessment framework for software-deﬁned net-
works.” in NDSS, 2017.
[47] B. E. Ujcich, U. Thakore, and W. H. Sanders, “Attain: An attack
injection framework for software-deﬁned networking,” in 2017 47th
Annual IEEE/IFIP International Conference on Dependable Systems
and Networks (DSN).
IEEE, 2017, pp. 567–578.
[48] S. Jero, X. Bu, C. Nita-Rotaru, H. Okhravi, R. Skowyra, and S. Fahmy,
“Beads: automated attack discovery in openﬂow-based sdn systems,”
in International Symposium on Research in Attacks, Intrusions, and
Defenses. Springer, 2017, pp. 311–333.
[49] S. Jero, W. Koch, R. Skowyra, H. Okhravi, C. Nita-Rotaru, and
D. Bigelow, “Identiﬁer binding attacks and defenses in software-deﬁned
networks,” in 26th USENIX Security Symposium (USENIX Security 17),
2017, pp. 415–432.
[50] C. Jiahao, L. Qi, X. Renjie, S. Kun, G. Guofei, X. Mingwei, and
Y. Yuan, “The crosspath attack: Disrupting the SDN control channel via
shared links,” in 28th USENIX Security Symposium (USENIX Security
19), 2019.
APPENDIX A
DISTRIBUTION OF PROCESSING TIME
To model the processing delays of SDN applications, we
collect a large number of processing delays of various SDN ap-
plications. We build a real SDN testbed consisting of commer-
cial hardware SDN switches [32] and the Floodlight con-
troller. We generate ﬂows in the testbed to trigger PACKET_IN
messages. We measure the processing delays of eight popular
SDN applications running on the controller. They range from
basic network service and network optimizations to advanced
15
 0 2 4 6 8 10 12 0 0.2 0.4 0.6 0.8 1Probability DensityProcessing Time (ms)LL(0.057, 1.926)Raw Data  0 5 10 15 20 25 0 0.1 0.2 0.3 0.4 0.5Probability DensityProcessing Time (ms)LL(0.040, 3.250)Raw Data  0 1 2 3 4 5 0 0.2 0.4 0.6 0.8 1Probability DensityProcessing Time (ms)LL(0.151, 2.557)Raw Data  0 0.5 1 1.5 2 2.5 3 0 0.5 1 1.5 2Probability DensityProcessing Time (ms)LL(0.351, 3.173)Raw Data  0 1 2 3 4 5 6 7 0 0.2 0.4 0.6 0.8 1 1.2Probability DensityProcessing Time (ms)LL(0.137, 2.822)Raw Data  0 1 2 3 4 5 6 0 0.2 0.4 0.6 0.8 1Probability DensityProcessing Time (ms)LL(0.111, 2.016)Raw Data  0 20 40 60 80 0 0.02 0.04 0.06 0.08 0.1Probability DensityProcessing Time (ms)LL(0.009, 2.451)Raw Data  0 1 2 3 4 5 6 0 0.2 0.4 0.6 0.8 1 1.2 1.4Probability DensityProcessing Time (ms)LL(0.135, 2.304)Raw Data