  * I have searched the issues of this repository and believe that this is not a duplicate.
## In short
Using with-apollo with `url` or `query` params in pages leads to strange
behaviour.
## What works:
I extended the `index.js` in the _with-apollo_ -example, just to print the
current query:
    export default withData(props => (
        {(props.url) && console.log(props.url.query)} // THIS WILL BECOME IMPORTANT!
    ))
The apollo data (the posts) are fetched correctly **on the server** and on the
client i get them baked into `__NEXT_DATA__ as `apollo store`.
      __NEXT_DATA__ = {"props":{"serverState":{"apollo":{"data":{"Post:cjcq65k4ua4h801287p9h0rw9":{"id":"cjcq65k4ua4h801287p9h0rw9","titl
## What does not work:
    export default withData(props => (
        {console.log(props.url.query)} // JUST A MINOR CHANGE..?
    ))
Now on the client the apollo store is **empty** and data gets fetched **on the
client** :
    __NEXT_DATA__ = {"props":{"serverState":{"apollo":{"data":{}}}},
## Steps to Reproduce (for bugs)
  1. Get an Apollo next repo like https://github.com/ads1018/next-apollo-example
  2. `console.log()` the query like above
  3. See loading state on client
## What am i trying to accomplish?
I want to **export a static** app with routes like:
    /posts/My-first-post
    /posts/My-other-post
where posts are known at compile time. For that i fetch all post ids at
export-time/compile-time in `next.config.js` and map them to pages with
variables, in the `exportPathMap`-function, like this:
    // ...
    routes[`/posts/${slug(post.title)}`] = {page: '/posts', query: {post_id: post.id}}
    // ...
    return routes
I use graphql wrappers and use the query parameter to fetch the actual data,
and the `next-apollo` package to get the data in `getInitialProps`:
    graphql(
     PostDataQuery,
      {
        options: ({url}) => {
            return {variables: {id: url.query.post_id}}
      }
    )(MyPostComponent)
But as described above, the data i loaded on the client and not on the server
if **i use query parameters** , and the apollo store is not created or not
sent to the client.
For example this works:
    // ... 
            return {variables: {id: 'some-hard-coded-id'}}
    // ...
## Your Environment
Tech | Version  
---|---  
next | v4.2.3  
node | v9.2.0  
OS | MacOS  
browser | Chrome  
etc |