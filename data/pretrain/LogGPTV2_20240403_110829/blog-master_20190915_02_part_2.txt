-[ RECORD 1 ]------+-----------  
table_len          | 1208418304  
tuple_count        | 10000000  
tuple_len          | 480000000  
tuple_percent      | 39.72  
dead_tuple_count   | 10000000  
dead_tuple_len     | 400000000  
dead_tuple_percent | 33.1  
free_space         | 231549164  
free_percent       | 19.16  
```  
只有free space才是可用的。  
vacuum verbose后，如果heap page里面宜家没有dead tuple或未结束事务的tuple，那么approx的计算会快很多，因为不需要扫描heap page.  
```  
postgres=# vacuum t;  
VACUUM  
postgres=# select * from pgstattuple('t'::regclass);  
-[ RECORD 1 ]------+-----------  
table_len          | 1208418304  
tuple_count        | 10000000  
tuple_len          | 480000000  
tuple_percent      | 39.72  
dead_tuple_count   | 0  
dead_tuple_len     | 0  
dead_tuple_percent | 0  
free_space         | 631549164  
free_percent       | 52.26  
pgstattuple  1秒  
Time: 1043.571 ms (00:01.044)  
postgres=# select * from pgstattuple_approx('t'::regclass);  
-[ RECORD 1 ]--------+------------------  
table_len            | 1208418304  
scanned_percent      | 0  
approx_tuple_count   | 12017599  
approx_tuple_len     | 577583488  
approx_tuple_percent | 47.79665171308097  
dead_tuple_count     | 0  
dead_tuple_len       | 0  
dead_tuple_percent   | 0  
approx_free_space    | 630834816  
approx_free_percent  | 52.20334828691903  
pgstattuple_approx   18毫秒  
Time: 18.027 ms  
```  
由于pgstattuple可能涉及扫描heap page，虽然统计精确，但是不建议在日常监控中使用它来计算膨胀。可以使用本文前面链接的估算方法。   
## 参考  
[《PostgreSQL 如何精确计算表膨胀(fsm,数据块layout讲解) - PostgreSQL table exactly bloat monitor use freespace map data》](../201306/20130628_01.md)    
[《PostgreSQL Free Space Map Principle》](../201005/20100511_02.md)    
[《PostgreSQL 收缩膨胀表或索引 - pg_squeeze or pg_repack》](../201610/20161030_02.md)    
1、https://www.postgresql.org/docs/12/pgstattuple.html  
2、contrib/pgstattuple/pgstattuple.c  
```  
/*  
 * pgstat_heap -- returns live/dead tuples info in a heap  
 */  
static Datum  
pgstat_heap(Relation rel, FunctionCallInfo fcinfo)  
{  
        TableScanDesc scan;  
        HeapScanDesc hscan;  
        HeapTuple       tuple;  
        BlockNumber nblocks;  
        BlockNumber block = 0;          /* next block to count free space in */  
        BlockNumber tupblock;  
        Buffer          buffer;  
        pgstattuple_type stat = {0};  
        SnapshotData SnapshotDirty;  
        if (rel->rd_rel->relam != HEAP_TABLE_AM_OID)  
                ereport(ERROR,  
                                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),  
                                 errmsg("only heap AM is supported")));  
        /* Disable syncscan because we assume we scan from block zero upwards */  
        scan = table_beginscan_strat(rel, SnapshotAny, 0, NULL, true, false);  
        hscan = (HeapScanDesc) scan;  
        InitDirtySnapshot(SnapshotDirty);  
        nblocks = hscan->rs_nblocks;    /* # blocks to be scanned */  
        /* scan the relation */  -- 全表扫描   
        while ((tuple = heap_getnext(scan, ForwardScanDirection)) != NULL)  
        {  
                CHECK_FOR_INTERRUPTS();  
                /* must hold a buffer lock to call HeapTupleSatisfiesVisibility */  
                LockBuffer(hscan->rs_cbuf, BUFFER_LOCK_SHARE);  
                if (HeapTupleSatisfiesVisibility(tuple, &SnapshotDirty, hscan->rs_cbuf))  
                {  
                        stat.tuple_len += tuple->t_len;  
                        stat.tuple_count++;  
                }  
                else  
                {  
                        stat.dead_tuple_len += tuple->t_len;  
                        stat.dead_tuple_count++;  
                }  
                LockBuffer(hscan->rs_cbuf, BUFFER_LOCK_UNLOCK);  
                /*  
                 * To avoid physically reading the table twice, try to do the  
                 * free-space scan in parallel with the heap scan.  However,  
                 * heap_getnext may find no tuples on a given page, so we cannot  
                 * simply examine the pages returned by the heap scan.  
                 */  
                tupblock = ItemPointerGetBlockNumber(&tuple->t_self);  
                while (block rs_strategy);  
                        LockBuffer(buffer, BUFFER_LOCK_SHARE);  
                        stat.free_space += PageGetHeapFreeSpace((Page) BufferGetPage(buffer));  
                        UnlockReleaseBuffer(buffer);  
                        block++;  
                }  
        }  
        while (block rs_strategy);  
                LockBuffer(buffer, BUFFER_LOCK_SHARE);  
                stat.free_space += PageGetHeapFreeSpace((Page) BufferGetPage(buffer));  
                UnlockReleaseBuffer(buffer);  
                block++;  
        }  
        table_endscan(scan);  
        relation_close(rel, AccessShareLock);  
        stat.table_len = (uint64) nblocks * BLCKSZ;  
        return build_pgstattuple_type(&stat, fcinfo);  
}  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")