### Child Process and Address Conversion

The child process is initiated, and the address is converted to an absolute address. After setting up performance events and trace buffers, the monitoring process resumes the child. Both processes can then run concurrently without any synchronization until the child calls `exec`, allowing the monitoring process to perform a security check at this critical point. The monitoring and application processes are bound to different cores on multicore hardware to minimize interference. If the application process forks additional child processes, the monitoring process will automatically monitor them as well.

### BTS Counter and Trace Buffering

When the application starts, the Branch Target Storage (BTS) counter generates a branch trace and writes it directly into a memory buffer. When the buffer is nearly full, the kernel copies the trace to user space, and the monitoring process begins its analysis. This batching mode significantly reduces performance overhead compared to per-sample checks. Additionally, when the application attempts to invoke sensitive system calls (e.g., `execve` used by shellcode), the monitoring process suspends the application, performs a security check, and then resumes it. This prevents the application from running out of sync, which could cause harmful effects due to attacks. The suspension time is minimal because the diagnostic process is simple and efficient, utilizing only a small amount of CPU resources during execution.

### CFI Violation Handling

Upon detecting a Control Flow Integrity (CFI) violation, the monitoring process can take various actions based on the application's requirements. It may immediately terminate the application, notify the administrator via email, or both. It can also store the recent branch trace for post-attack analysis, enabling the administrator to diagnose the attack and fix the application's vulnerabilities.

## Experimental Setup

All evaluations were conducted on an Intel Core i5 processor with four cores, each equipped with 32k L1 instruction and data caches and a 256K L2 data cache. The four cores share a 6 MB L3 cache. The machine has 2GB of 1066MHz main memory, a 500GB SATA II disk with 7200 RPM, and a 100Mbps NIC. The operating system is Debian-6 with kernel version 2.6.34.

### Security Analysis

We evaluated CFIMon using several real-world applications and two demo programs with dangling pointer and integer overflow vulnerabilities, as shown in Table 2. For these applications, we used three types of attacks: code-injection (Injected), return-to-libc (Ret-to-libc), and return-oriented programming (Ret-oriented).

| Application | Reference | Description | Vulnerability | Injected | Ret-to-libc | Ret-oriented |
|-------------|-----------|-------------|---------------|----------|-------------|--------------|
| Samba-3.0.21 | CVE-2007-2446 | File and print server | Heap overflow | √ | × | × |
| Squid-2.5.STABLE1 | CVE-2004-0541 | Cache proxy | Stack overflow | √ | × | × |
| GPSd-2.7 | CVE-2004-1388 | GPS device agent | Format string vul. | √ | × | × |
| Wu-ftpd-2.6.0 | CVE-2000-0573 | FTP server | Format string vul. | √ | × | × |
| Wu-ftpd-2.4.2 | CVE-1999-0368 | FTP server | Stack overflow | √ | × | × |
| Bug1 | Demo | Dangling pointer | √ | √ | √ |
| Bug2 | Demo | Integer overflow | √ | √ | √ |

#### Code-Injection Attacks

For Samba, GPSd, and Wu-ftpd-2.6.0, we failed to exploit the vulnerabilities using return-oriented programming because we could not construct a return stack with instruction addresses. We set the window size to 20 and tolerated up to 3 suspicious branches within the window. Using the Metasploit framework, we generated a nop-sled before the injected code and attacked each application five times to test for false negatives. As expected, CFIMon detected all attacks upon the first abnormal performance sample.

#### Return-to-libc Attacks

All vulnerabilities that can be exploited with code-injection can also be exploited with return-to-libc attacks. CFIMon successfully detected all these attacks without false negatives.

#### Return-Oriented Programming Attacks

Similar to other evaluations, CFIMon successfully detected all return-oriented programming attacks without false negatives. These attacks use return instructions to organize logic and heavily rely on "unintended instruction sequences" to form code gadgets, violating CFIMon's rule that the target address of a return instruction must be the one next to a call. Even if the start address of the first gadget is legal, it is difficult to make all gadgets legal. Such attacks are hard to apply to applications using heap overflow or format string vulnerabilities because the stack top pointer (e.g., `%esp`) cannot be modified to supplied return addresses.

#### Jump-Oriented Programming Attacks

Jump-oriented programming attacks are similar to return-oriented programming but use jump instructions to organize malicious code gadgets. Although we did not perform such attacks on real applications, we argue that they are likely to issue invalid jump instructions, which CFIMon can capture. Even if all jumps are legal, the branches will be marked as suspicious due to their rarity, and an alarm will be reported.

#### False Positives

To evaluate false positives, we ran several typical server daemons (e.g., Squid, SSHD) using CFIMon in daily use. After several days of monitoring, we experienced no false positives, indicating that CFIMon can be practically used in real-world applications with minimal false alarms.

### Post-Attack Diagnosis

We used the Samba Server to demonstrate CFIMon's post-attack diagnosis capability. As shown in Table 3, CFIMon dumps performance samples with abnormal control flow when a code-injection attack is detected. By analyzing the back traces, we can easily identify that the shellcode is invoked when calling the "destructor" function pointer in "talloc free." CFIMon can back trace as far as the dumped samples allow, and the presented five function records are sufficient for understanding the attack.

| Sample | Corresponding Call |
|--------|--------------------|
| b7e6b837->b7e6b12f | Process complete PDU -> Process request PDU |
| b7e6b67d->b7e6b06a | Process request PDU -> Free pipe context |
| b7e6b0f3->b7effc32 | Free pipe context -> Talloc free children |
| b7effc97->b7effcde | Talloc free children -> Talloc free |
| b7effd60->b80ce000 | Talloc free -> Shellcode (destructor) |

### Performance Evaluation

#### Benchmark Selection

To demonstrate CFIMon's practical performance, we chose different types of server applications, including widely-used servers like Apache, wu-ftpd, and Exim, and emerging applications like Memcached, as shown in Table 4.

| Application | Description | Performance Matrix | Parameters |
|-------------|-------------|--------------------|------------|
| Apache | Web server | Throughput of get/put, Latency of get | 4 clients put 64KB files and get 1MB file, Latency of 4 clients getting 1MB file |
| Exim | Mail transfer agent | Mails per second | Send 1MB mails |
| Memcached | Object caching server | Throughput of values get by key | Use trace of Facebook |
| Wu-ftpd | FTP server | Throughput | Client gets 700MB file from the server |

#### Performance Results

Figure 4 shows the relative performance overhead for these applications. CFIMon incurs a modest performance overhead, averaging 6.1%, ranging from 2.3% to 8.4%. The overhead of pure BTS (trace recording only) is 5.2%, accounting for 86% of CFIMon's total overhead. This indicates that CFIMon can be applied to real-world server applications with minimal impact.

Figure 5 shows the overhead of CFIMon when clients get/put files of different sizes from/to an Apache server. The performance overhead is less than 5% for files larger than 2MB but increases for smaller files. This is because large files are I/O-bound, while small files consume more CPU. The throughput of Apache-put and Apache-get is 42% and 15% of the original run for 1KB files, respectively. Further breakdown shows that 97% of the overhead comes from the frequent memory writes of the trace buffer.

#### Memory Overhead

The ret set, call set, and train set of target addresses are organized in hash tables. In Apache, the combined size of these tables is just over 200KB, making the memory overhead negligible.

### Implications on Hardware Enhancement

Based on our experience, existing performance monitoring hardware can be enhanced to better support CFIMon. Specifically, increasing the size and speed of trace buffers and optimizing the BTS mechanism can further reduce performance overhead and improve the efficiency of CFI enforcement.