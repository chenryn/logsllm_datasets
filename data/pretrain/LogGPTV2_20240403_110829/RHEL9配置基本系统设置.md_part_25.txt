        time.example.com   3        6   377    45   +355us[ +375us] +/-   11ms
        nts.sth1.ntp.se    1        6   377    44   +237us[ +237us] +/-   23ms
        nts.sth2.ntp.se    1        6   377    44   -170us[ -170us] +/-   22ms
        ```
        `Reach`{.literal} 列中应具有非零值；理想情况是 377。如果值很少为
        377 或永远不是 377，这表示 NTP 请求或响应在网络中丢失。
    :::
:::
::: itemizedlist
**其他资源**
-   `chrony.conf(5)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#assembly_overview-of-network-time-security-in-chrony_configuring-basic-system-settings.html#proc_enabling-nts-on-the-server_assembly_overview-of-network-time-security-in-chrony}在服务器上启用网络时间安全性(NTS) {.title}
:::
如果您运行自己的网络时间协议(NTP)服务器，您可以启用服务器网络时间协议(NTS)支持来促进其客户端安全地同步。
如果 NTP 服务器是其它服务器的客户端，即它不是 Stratum 1 服务器，它应使用
NTS 或对称密钥进行同步。
::: itemizedlist
**先决条件**
-   以 `PEM`{.literal} 格式的服务器私钥
-   带有 `PEM`{.literal} 格式的所需中间证书的服务器证书
:::
::: orderedlist
**流程**
1.  在 `chrony.conf`{.literal}中指定私钥和证书文件
    ``` screen
    For example:
    ntsserverkey /etc/pki/tls/private/foo.example.net.key
    ntsservercert /etc/pki/tls/certs/foo.example.net.crt
    ```
2.  通过设置组所有权，确保 chrony 系统用户可读密钥和证书文件。
    ``` screen
    For example:
    chown :chrony /etc/pki/tls/*/foo.example.net.*
    ```
3.  确保 `chrony.conf`{.literal} 中存在
    `ntsdumpdir /var/lib/chrony`{.literal} 指令。
4.  重启 `chronyd`{.literal} 服务：
    ``` screen
    systemctl restart chronyd
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    如果服务器具有防火墙，则需要允许 NTP 和 Network Time Security-Key
    Establishment(NTS-KE)的 `UDP 123`{.literal} 和 `TCP 4460`{.literal}
    端口。
    :::
:::
::: itemizedlist
**验证**
-   使用以下命令从客户端机器执行快速测试：
    ``` screen
    $ chronyd -Q -t 3 'server
    foo.example.net iburst nts maxsamples 1'
    2021-09-15T13:45:26Z chronyd version 4.1 starting (+CMDMON +NTP +REFCLOCK +RTC +PRIVDROP +SCFILTER +SIGND +ASYNCDNS +NTS +SECHASH +IPV6 +DEBUG)
    2021-09-15T13:45:26Z Disabled control of system clock
    2021-09-15T13:45:28Z System clock wrong by 0.002205 seconds (ignored)
    2021-09-15T13:45:28Z chronyd exiting
    ```
    `System clock wrong`{.literal} 消息指示 NTP 服务器接受 NTS-KE
    连接并使用 NTS 保护的 NTP 消息进行响应。
-   验证 NTS-KE 连接并验证服务器中观察的 NTP 数据包：
    ``` screen
    # chronyc serverstats
    NTP packets received       : 7
    NTP packets dropped        : 0
    Command packets received   : 22
    Command packets dropped    : 0
    Client log records dropped : 0
    NTS-KE connections accepted: 1
    NTS-KE connections dropped : 0
    Authenticated NTP packets: 7
    ```
    如果 `NTS-KE connections accepted`{.literal} 和
    `Authenticated NTP packets`{.literal}
    项带有一个非零值，这意味着至少有一个客户端能够连接到 NTS-KE
    端口并发送经过身份验证的 NTP 请求。
:::
:::
:::
[]{#assembly_using-secure-communications-between-two-systems-with-openssh_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#assembly_using-secure-communications-between-two-systems-with-openssh_configuring-basic-system-settings.html#assembly_using-secure-communications-between-two-systems-with-openssh_configuring-basic-system-settings}第 31 章 使用 OpenSSH 的两个系统间使用安全通讯 {.title}
:::
SSH(Secure
Shell)是一种协议，它使用客户端-服务器架构在两个系统之间提供安全通信，并允许用户远程登录到服务器主机系统。和其它远程沟通协议，如
FTP 或 Telnet 不同，SSH
会加密登录会话，它会阻止入侵者从连接中收集未加密的密码。
Red Hat Enterprise Linux 包括基本的 `OpenSSH`{.literal} 软件包：通用的
`openssh`{.literal} 软件包、`openssh-server`{.literal} 软件包以及
`openssh-clients`{.literal} 软件包。请注意，`OpenSSH`{.literal}
软件包需要 `OpenSSL`{.literal} 软件包
`openssl-libs`{.literal}，它会安装几个重要的加密库来启用
`OpenSSH`{.literal} 对通讯进行加密。
::: section
::: titlepage
# []{#assembly_using-secure-communications-between-two-systems-with-openssh_configuring-basic-system-settings.html#ssh-and-openssh_assembly_using-secure-communications-between-two-systems-with-openssh}SSH 和 OpenSSH {.title}
:::
SSH（安全 Shell）是一个登录远程机器并在该机器上执行命令的程序。SSH
协议通过不安全的网络在两个不可信主机间提供安全加密的通讯。您还可以通过安全频道转发
X11 连接和任意 TCP/IP 端口。
当使用 SSH 协议进行远程 shell 登录或文件复制时，SSH
协议可以缓解威胁，例如，拦截两个系统之间的通信和模拟特定主机。这是因为
SSH
客户端和服务器使用数字签名来验证其身份。另外，所有客户端和服务器系统之间的沟通都是加密的。
主机密钥验证使用 SSH 协议的主机。当首次安装 `OpenSSH`{.literal}
或主机第一次引导时，主机密钥是自动生成的加密密钥。
`OpenSSH`{.literal} 是 Linux、UNIX 和类似操作系统支持的 SSH
协议的实现。它包括 OpenSSH 客户端和服务器需要的核心文件。OpenSSH
组件由以下用户空间工具组成：
::: itemizedlist
-   `ssh`{.literal} 是一个远程登录程序（SSH 客户端）。
-   `sshd`{.literal} 是一个 `OpenSSH`{.literal} SSH 守护进程。
-   `scp`{.literal} 是一个安全的远程文件复制程序。
-   `sftp`{.literal} 是一个安全的文件传输程序。
-   `ssh-agent`{.literal} 是用于缓存私钥的身份验证代理。
-   `ssh-add`{.literal} 为 `ssh-agent`{.literal} 添加私钥身份。
-   `ssh-keygen`{.literal} 生成、管理并转换 `ssh`{.literal} 验证密钥。
-   `ssh-copy-id`{.literal} 是一个将本地公钥添加到远程 SSH 服务器上的
    `authorized_keys`{.literal} 文件的脚本。
-   `ssh-keyscan`{.literal} 收集 SSH 公共主机密钥。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在 RHEL 9 中，安全复制协议(SCP)默认替换为 SSH
文件传输协议(SFTP)。这是因为 SCP 已经引起了安全问题，例如
[CVE-2020-15778](https://access.redhat.com/security/cve/CVE-2020-15778){.link}。
如果您的场景中无法使用 SFTP 或不兼容的情况，您可以使用 `-O`{.literal}
选项强制使用原始 SCP/RCP 协议。
如需更多信息，请参阅 [Red Hat Enterprise Linux 9 中的 OpenSSH SCP
协议弃用](https://access.redhat.com/articles/6955319){.link} 。
:::
现有两个 SSH 版本： 版本 1 和较新的版本 2。RHEL 中的 `OpenSSH`{.literal}
套件只支持 SSH 版本 2。它具有增强的键交换算法，这些算法不受版本 1
中已知的漏洞的影响。
`OpenSSH`{.literal} 作为 RHEL
的核心加密子系统之一，使用系统范围的加密策略。这样可确保在默认配置中禁用弱密码套件和加密算法。要修改策略，管理员必须使用
`update-crypto-policies`{.literal}
命令来调整设置，或者手动选择不使用系统范围的加密策略。
`OpenSSH`{.literal} 套件使用两组配置文件：一个用于客户端程序（即
`ssh`{.literal}、`scp`{.literal} 和 `sftp`{.literal}）以及服务器（
`sshd`{.literal} 守护进程）的另一个配置文件。
系统范围的 SSH 配置信息保存在 `/etc/ssh/`{.literal} 目录中。用户特定的
SSH 配置信息保存在用户主目录中的 `~/.ssh/`{.literal} 中。有关 OpenSSH
配置文件的详细列表，请查看 `sshd(8)`{.literal} man page 中的
`FILES`{.literal} 部分。
::: itemizedlist
**其他资源**
-   使用 `man -k ssh`{.literal} 命令显示 man page
-   [使用系统范围的加密策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_using-secure-communications-between-two-systems-with-openssh_configuring-basic-system-settings.html#configuring-and-starting-an-openssh-server_assembly_using-secure-communications-between-two-systems-with-openssh}配置并启动 OpenSSH 服务器 {.title}
:::
使用以下步骤进行您的环境以及启动 `OpenSSH`{.literal}
服务器所需的基本配置。请注意，在默认 RHEL 安装后，`sshd`{.literal}
守护进程已经启动，服务器主机密钥会自动被创建。
::: itemizedlist
**先决条件**
-   已安装 `openssh-server`{.literal} 软件包。
:::
::: orderedlist
**流程**
1.  在当前会话中启动 `sshd`{.literal} 守护进程，并在引导时自动启动：
    ``` screen
    # systemctl start sshd
    # systemctl enable sshd
    ```
2.  指定与默认值（`0.0.0.0`{.literal} (IPv4) 或
    `::`{.literal}）不同的地址(IPv6) `/etc/ssh/sshd_config`{.literal}
    配置文件中的 `ListenAddress`{.literal}
    指令，并使用较慢的动态网络配置，将 `network-online.target`{.literal}
    目标单元的依赖关系添加到 `sshd.service`{.literal}
    单元文件。要做到这一点，使用以下内容创建
    `/etc/systemd/system/sshd.service.d/local.conf`{.literal} 文件：
    ``` screen
    [Unit]
    Wants=network-online.target
    After=network-online.target
    ```
3.  查看 `/etc/ssh/sshd_config`{.literal} 配置文件中的
    `OpenSSH`{.literal} 服务器设置是否满足您的情况要求。
4.  另外，还可通过编辑 `/etc/issue`{.literal} 文件来更改您的
    `OpenSSH`{.literal} 服务器在客户端验证前显示的欢迎信息，例如：
    ``` screen
    Welcome to ssh-server.example.com
    Warning: By accessing this server, you agree to the referenced terms and conditions.
    ```
    确保 `/etc/ssh/sshd_config`{.literal} 中未注释掉 `Banner`{.literal}
    选项，并且其值包含 `/etc/issue`{.literal} ：
    ``` screen
    # less /etc/ssh/sshd_config | grep Banner
    Banner /etc/issue
    ```
    请注意：要在成功登录后改变显示的信息，您必须编辑服务器上的
    `/etc/motd`{.literal} 文件。详情请查看 `pam_motd`{.literal} man
    page。
5.  重新载入 `systemd`{.literal} 配置，并重启 `sshd`{.literal}
    以应用修改：
    ``` screen
    # systemctl daemon-reload
    # systemctl restart sshd
    ```
:::
::: orderedlist
**验证**
1.  检查 `sshd`{.literal} 守护进程是否正在运行：
    ``` screen
    # systemctl status sshd
    ● sshd.service - OpenSSH server daemon
       Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)
       Active: active (running) since Mon 2019-11-18 14:59:58 CET; 6min ago
         Docs: man:sshd(8)
               man:sshd_config(5)
     Main PID: 1149 (sshd)
        Tasks: 1 (limit: 11491)
       Memory: 1.9M
       CGroup: /system.slice/sshd.service
               └─1149 /usr/sbin/sshd -D -oCiphers=aes128-ctr,aes256-ctr,aes128-cbc,aes256-cbc -oMACs=hmac-sha2-256,>
    Nov 18 14:59:58 ssh-server-example.com systemd[1]: Starting OpenSSH server daemon...
    Nov 18 14:59:58 ssh-server-example.com sshd[1149]: Server listening on 0.0.0.0 port 22.
    Nov 18 14:59:58 ssh-server-example.com sshd[1149]: Server listening on :: port 22.
    Nov 18 14:59:58 ssh-server-example.com systemd[1]: Started OpenSSH server daemon.
    ```
2.  使用 SSH 客户端连接到 SSH 服务器。
    ``` screen
    # ssh PI:EMAIL
    ECDSA key fingerprint is SHA256:dXbaS0RG/UzlTTku8GtXSz0S1++lPegSy31v3L/FAEc.
    Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
    Warning: Permanently added 'ssh-server-example.com' (ECDSA) to the list of known hosts.
    PI:EMAIL's password:
    ```
:::
::: itemizedlist
**其他资源**
-   `sshd(8)`{.literal} 和 `sshd_config(5)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#assembly_using-secure-communications-between-two-systems-with-openssh_configuring-basic-system-settings.html#setting-an-openssh-server-for-key-based-authentication_assembly_using-secure-communications-between-two-systems-with-openssh}为基于密钥的身份验证设置 OpenSSH 服务器 {.title}
:::
要提高系统安全性，通过在 OpenSSH
服务器上禁用密码身份验证来强制进行基于密钥的身份验证。
::: itemizedlist
**先决条件**
-   已安装 `openssh-server`{.literal} 软件包。
-   `sshd`{.literal} 守护进程正在服务器中运行。
:::
::: orderedlist
**流程**
1.  在文本编辑器中打开 `/etc/ssh/sshd_config`{.literal} 配置，例如：
    ``` screen
    # vi /etc/ssh/sshd_config
    ```
2.  将 `PasswordAuthentication`{.literal} 选项改为 `no`{.literal}:
    ``` screen
    PasswordAuthentication no
    ```
    在新默认安装以外的系统中，检查 `PubkeyAuthentication`{.literal}
    没有被设置，并且将 `ChallengeResponseAuthentication`{.literal}
    指令设为
    `no`{.literal}。如果您要进行远程连接，而不使用控制台或带外访问，在禁用密码验证前测试基于密钥的登录过程。
3.  要在 NFS 挂载的主目录中使用基于密钥的验证，启用
    `use_nfs_home_dirs`{.literal} SELinux 布尔值：
    ``` screen
    # setsebool -P use_nfs_home_dirs 1
    ```
4.  重新载入 `sshd`{.literal} 守护进程以应用更改：
    ``` screen
    # systemctl reload sshd
    ```
:::
::: itemizedlist
**其他资源**
-   `sshd(8)`{.literal}, `sshd_config(5)`{.literal} 和
    `setsebool(8)`{.literal} 手册页。