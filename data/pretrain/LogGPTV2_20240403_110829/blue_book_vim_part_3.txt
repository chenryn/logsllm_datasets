#### [Installation](https://github.com/TimUntersberger/neogit#installation)
```lua
use { 'TimUntersberger/neogit', requires = 'nvim-lua/plenary.nvim' }
```
Now you have to add the following lines to your `init.lua`
```lua
local neogit = require('neogit')
neogit.setup()
```
That uses the default configuration, but there are [many options that can be set](https://github.com/TimUntersberger/neogit#configuration). For example to disable the commit confirmation use:
```lua
neogit.setup({
  disable_commit_confirmation = true
})
```
### Improve the commit message window
[create custom keymaps with lua](https://blog.devgenius.io/create-custom-keymaps-in-neovim-with-lua-d1167de0f2c2)
[create specific bindings for a file type](https://stackoverflow.com/questions/72984648/neovim-lua-how-to-use-different-mappings-depending-on-file-type)
https://neovim.discourse.group/t/how-to-create-an-auto-command-for-a-specific-filetype-in-neovim-0-7/2404
[create autocmd in neovim](https://alpha2phi.medium.com/neovim-for-beginners-lua-autocmd-and-keymap-functions-3bdfe0bebe42)
[autocmd events](https://neovim.io/doc/user/autocmd.html#autocmd-events)
## [Abbreviations](https://davidxmoody.com/2014/better-vim-abbreviations/)
In order to reduce the amount of typing and fix common typos, I use the Vim
abbreviations support. Those are split into two files,
`~/.vim/abbreviations.vim` for abbreviations that can be used in every type of
format and `~/.vim/markdown-abbreviations.vim` for the ones that can interfere
with programming typing.
Those files are sourced in my `.vimrc`
```vim
" Abbreviations
source ~/.vim/abbreviations.vim
autocmd BufNewFile,BufReadPost *.md source ~/.vim/markdown-abbreviations.vim
```
To avoid getting worse in grammar, I don't add abbreviations for words that
I doubt their spelling or that I usually mistake. Instead I use it for common
typos such as `teh`.
The process has it's inconveniences:
* You need different abbreviations for the capitalized versions, so you'd need
    two abbreviations for `iab cant can't` and `iab Cant Can't`
* It's not user friendly to add new words, as you need to open a file.
The [Vim Abolish plugin](https://github.com/tpope/vim-abolish) solves that. For
example:
```vim
" Typing the following:
Abolish seperate separate
" Is equivalent to:
iabbrev seperate separate
iabbrev Seperate Separate
iabbrev SEPERATE SEPARATE
```
Or create more complex rules, were each `{}` gets captured and expanded with
different caps
```vim
:Abolish {despa,sepe}rat{e,es,ed,ing,ely,ion,ions,or}  {despe,sepa}rat{}
```
With a bang (`:Abolish!`) the abbreviation is also appended to the file in
`g:abolish_save_file`. By default `after/plugin/abolish.vim` which is loaded by
default.
Typing `:Abolish! im I'm` will append the following to the end of this file:
```vim
Abolish im I'm
```
To make it quicker I've added a mapping for `s`.
```vim
nnoremap s :Abolish!
```
Check the
[README](https://github.com/tpope/vim-abolish/blob/master/doc/abolish.txt) for
more details.
### Troubleshooting
Abbreviations with dashes or if you only want the first letter in capital need
to be specified with the first letter in capital letters as stated in [this
issue](https://github.com/tpope/vim-abolish/issues/30).
```vim
Abolish knobas knowledge-based
Abolish w what
```
Will yield `KnowledgeBased` if invoked with `Knobas`, and `WHAT` if invoked with
`W`. Therefore the following definitions are preferred:
```vim
Abolish Knobas Knowledge-based
Abolish W What
```
## Auto complete prose text
Tools like [YouCompleteMe](https://github.com/ycm-core/YouCompleteMe) allow you
to auto complete variables and functions. If you want the same functionality for
prose, you need to enable it for markdown and text, as it's disabled by default.
```vim
let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'qf' : 1,
      \ 'notes' : 1,
      \ 'unite' : 1,
      \ 'vimwiki' : 1,
      \ 'pandoc' : 1,
      \ 'infolog' : 1
  \}
```
When writing prose you don't need all possible suggestions, as navigating the
options is slower than keep on typing. So I'm limiting the results just to one,
to avoid unnecessary distractions.
```vim
" Limit the results for markdown files to 1
au FileType markdown let g:ycm_max_num_candidates = 1
au FileType markdown let g:ycm_max_num_identifier_candidates = 1
```
## Find synonyms
Sometimes the prose linters tell you that a word is wordy or too complex, or you may be
repeating a word too much. The [thesaurus query
plugin](https://github.com/Ron89/thesaurus_query.vim) allows you to search
synonyms of the word under the cursor. Assuming you use Vundle, add the
following lines to your config.
!!! note "File: ~/.vimrc"
    ```vim
    Plugin 'ron89/thesaurus_query.vim'
    " Thesaurus
    let g:tq_enabled_backends=["mthesaur_txt"]
    let g:tq_mthesaur_file="~/.vim/thesaurus"
    nnoremap r :ThesaurusQueryReplaceCurrentWord
    inoremap r :ThesaurusQueryReplaceCurrentWord
    ```
Run `:PluginInstall` and download the thesaurus text from [gutenberg.org](http://www.gutenberg.org/files/3202/files/)
Next time you find a word like `therefore` you can press
`:ThesaurusQueryReplaceCurrentWord
` and you'll get a window with the following:
```
In line: ... therefore ...
Candidates for therefore, found by backend: mthesaur_txt
Synonyms: (0)accordingly (1)according to circumstances (2)and so (3)appropriately (4)as a consequence
          (5)as a result (6)as it is (7)as matters stand (8)at that rate (9)because of that (10)because of this
          (11)compliantly (12)conformably (13)consequently (14)equally (15)ergo (16)finally (17)for that
          (18)for that cause (19)for that reason (20)for this cause (21)for this reason (22)for which reason
          (23)hence (24)hereat (25)in that case (26)in that event (27)inconsequence (28)inevitably
          (29)it follows that (30)naturally (31)naturellement (32)necessarily (33)of course (34)of necessity
          (35)on that account (36)on that ground (37)on this account (38)propter hoc (39)suitably
          (40)that being so (41)then (42)thence (43)thereat (44)therefor (45)thus (46)thusly (47)thuswise
          (48)under the circumstances (49)whence (50)wherefore (51)wherefrom
Type number and  (empty cancels; 'n': use next backend; 'p' use previous backend):
```
If for example you type `45` and hit enter, it will change it for `thus`.
## [Keep foldings](https://stackoverflow.com/questions/37552913/vim-how-to-keep-folds-on-save)
When running fixers usually the foldings go to hell. To keep the foldings add
the following snippet to your vimrc file
```Vim
augroup remember_folds
  autocmd!
  autocmd BufLeave * mkview
  autocmd BufEnter * silent! loadview
augroup END
```
### [Python folding done right](https://github.com/tmhedberg/SimpylFold)
Folding Python in Vim is not easy, the python-mode plugin doesn't do it for me
by default and after fighting with it for 2 hours...
SimpylFold does the trick just fine.
## [Delete a file inside vim](https://vim.fandom.com/wiki/Delete_files_with_a_Vim_command)
```vim
:call delete(expand('%')) | bdelete!
```
You can make a function so it's easier to remember
```vim
function! Rm()
  call delete(expand('%')) | bdelete!
endfunction
```
Now you need to run `:call Rm()`.
## Task management
Check the [`nvim-orgmode`](orgmode.md) file.
### References
* [Source](https://github.com/nvim-orgmode/orgmode#agenda)
* [Getting started guide](https://github.com/nvim-orgmode/orgmode/wiki/Getting-Started)
* [Docs](https://github.com/nvim-orgmode/orgmode/blob/master/DOCS.md)
## [Email inside nvim](https://www.reddit.com/r/neovim/comments/zh0nx9/email_client/)
The best looking one is himalaya
- [Home](https://pimalaya.org/himalaya/index.html)
- [Nvim plugin](https://git.sr.ht/%7Esoywod/himalaya-vim)
- [Source](https://github.com/soywod/himalaya)
# Neovim plugin debug
If you use [packer](#packer) your plugins will be installed in `~/.local/share/nvim/site/pack/packer/start/`. You can manually edit those files to develop new feature or fix issues on the plugins.
To debug a plugin read it's source code and try to load in a lua shell the relevant code. If you are in a vim window you can run lua code with `:lua your code here`, for example `:lua Files = require('orgmode.parser.files')`, you can then do stuff with the `Files` object.
Remember that if you need to print the contents of a table [you can use `vim.inspect`](lua.md#inspect-contents-of-Lua-table-in-Neovim).
Another useful tip for Lua newbies (like me) can be to use `print` statements to debug the state of the variables. If it doesn't show up in vim use `error` instead, although that will break the execution with an error.
# Tips
## [Get the name of the file shown](https://stackoverflow.com/questions/4111696/display-name-of-the-current-file-in-vim)
`:f` (`:file`) will do same as ``. `:f!` will give a untruncated version, if applicable.
## [Run a command when opening vim](https://vi.stackexchange.com/questions/846/how-can-i-start-vim-and-then-execute-a-particular-command-that-includes-a-fro)
```bash
nvim -c ':DiffViewOpen'
```
## Run lua snippets
Run lua snippet within neovim with `:lua `. Useful to test the commands before binding it to keys.
## Bind a lua function to a key binding
```lua
key.set({'n'}, 't', ":lua require('neotest').run.run()", {desc = 'Run the closest test'})
```
## [Use relativenumber](https://koenwoortman.com/vim-relative-line-numbers/)
If you enable the `relativenumber` configuration you'll see how to move around with `10j` or `10k`.
# Troubleshooting
When you run into problems run `:checkhealth` to see if it rings a bell
## Deal with big files
Sometimes `neovim` freezes when opening big files, one way to deal with it is to [disable some functionality when loading them](https://www.reddit.com/r/neovim/comments/z85s1l/disable_lsp_for_very_large_files/)
```lua
local aug = vim.api.nvim_create_augroup("buf_large", { clear = true })
vim.api.nvim_create_autocmd({ "BufReadPre" }, {
  callback = function()
    local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(vim.api.nvim_get_current_buf()))
    if ok and stats and (stats.size > 100000) then
      vim.b.large_buf = true
      -- vim.cmd("syntax off") I don't yet need to turn the syntax off
      vim.opt_local.foldmethod = "manual"
      vim.opt_local.spell = false
      set.foldexpr = 'nvim_treesitter#foldexpr()' -- Disable fold expression with treesitter, it freezes the loading of files
    else
      vim.b.large_buf = false
    end
  end,
  group = aug,
  pattern = "*",
})
```
When it opens a file it will decide if it's a big file. If it is, it will unset the `foldexpr` which made it break for me.
[Telescope's](#telescope) preview also froze the terminal. To deal with it I had to disable treesitter for the preview
```lua
require('telescope').setup{
  defaults = {
    preview = {
      enable = true,
      treesitter = false,
    },
  ...
```
## Telescope changes working directory when opening a file
In my case was due to a snippet I have to remember the folds:
```
vim.cmd[[
  augroup remember_folds
    autocmd!
    autocmd BufWinLeave * silent! mkview
    autocmd BufWinEnter * silent! loadview
  augroup END
]]
```
It looks that it had saved a view with the other working directory so when a file was loaded the `cwd` changed. To solve it I created a new `mkview` in the correct directory.
# Resources
* [Nvim news](https://neovim.io/news/)
* [spacevim](https://spacevim.org/)
* [awesome-neovim](https://github.com/rockerBOO/awesome-neovim/blob/main/README.md)
* [awesome-vim](https://github.com/akrawchyk/awesome-vim): a list of vim
      resources maintained by the community
## Vimrc tweaking
* [List of nvim configs](https://github.com/topics/neovim-config)
* [jessfraz vimrc](https://github.com/jessfraz/.vim/blob/master/vimrc)
## Learning
* [vim golf](https://www.vimgolf.com)
* [Vim game tutorial](https://vim-adventures.com/): very funny and challenging,
      buuuuut at lvl 3 you have to pay :(.
* [PacVim](https://www.ostechnix.com/pacvim-a-cli-game-to-learn-vim-commands/):
      Pacman like vim game to learn.
* [Vimgenius](http://www.vimgenius.com/): Increase your speed and improve your
      muscle memory with Vim Genius, a timed flashcard-style game designed to
      make you faster in Vim. It’s free and you don’t need to sign up. What are
      you waiting for?
* [Openvim](http://www.openvim.com/): Interactive tutorial for vim.