### Optimized Text

Since each randomly-generated key in the Key Scheduling Algorithm (KSA) is likely to be unique, we can use a block cipher in Electronic Codebook (ECB) mode to enable rapid decryption of randomly accessed offsets without the need to store additional initialization vectors [20]. Encrypted storage media are already popular as they provide confidentiality for stored data against computationally-bounded, non-coercive attackers, such as thieves, provided the master secret is not available in volatile memory when the attack occurs [13]. Therefore, it is important to offer our encrypted file system design to prevent users from doubly encrypting their data: first as an encrypted file system and then for secure deletion.

### 6. Related Work

#### Secure Deletion for Magnetic Media
Secure deletion for magnetic media is a well-researched area with various solutions at different levels of system integration. User-level solutions like `shred` [29] overwrite the entire content of a file with insensitive data, but this requires in-place updates, making them unsuitable for flash memory.

#### Kernel-Level Secure Deletion
Kernel-level secure deletion has been implemented for popular block-structured file systems [2, 17]. These solutions modify the file system to sanitize discarded blocks before adding them to the list of free blocks. This ensures that even if a file is truncated or the user forgets to use a secure deletion tool, the data is sanitized. However, these solutions still require in-place updates and are thus inapplicable to flash memory.

#### Encryption-Based Deletion
Boneh and Lipton [3] proposed using encryption to delete data by leveraging the convenience of deleting small encryption keys. Peterson et al. [28] extended this approach for a versioned backup system on magnetic storage, encrypting each data block with an all-or-nothing cryptographic expansion transformation [33] and collocating the resulting key-sized tags. They use in-place updates to remove tags, which is again infeasible for flash memory.

#### Ephemerizer
Perlman’s Ephemerizer [27] is a system that allows secure deletion in the presence of a coercive attacker. Data is encrypted with ephemeral keys managed by a trusted third party. Each message is given an expiration time, and the corresponding key is deleted after the expiration. While Perlman’s work assumes secure deletion as a primitive, DNEFS can be used to implement it on a flash-based smart card.

#### Log-Structured File Systems
Reardon et al. [32] demonstrated how to securely delete data from log-structured file systems from user-space without modifying the hardware or file system. Their proposal involves filling the storage medium to capacity to ensure no wasted space remains, thereby ensuring secure deletion. This approach, while costly in terms of flash memory wear and execution time, is the only feasible solution from user-space.

#### Verifiable Sanitization for SSDs
Swanson et al. [36] considered verifiable sanitization for solid-state drives (SSDs). They observed that manufacturers' advertised sanitization procedures are unreliable and that cryptography alone is insufficient when the ultimate storage location of the cryptographic key cannot be determined. They proposed a technique for static sanitization of the entire flash memory, which works by initially encrypting all data before writing and then erasing the memory containing the keys.

#### Scrubbing
Wei et al. [39] proposed a technique called scrubbing, which writes zeros over the pages of flash memory without first erasing the block. This method sanitizes the data because flash memory typically requires an erasure to turn a binary zero to a binary one, but writes turn ones into zeros. Sun et al. [35] built on Wei et al.’s scheme, optimizing the case when there is less data to copy off a block than data to be zero-overwritten.

Scrubbing securely deletes data immediately without block erasures, but it requires programming a page multiple times, which is inappropriate for flash memory [22]. Flash manufacturers prohibit this due to potential bit errors caused by program disturb [21].

#### YAFFS Secure Deletion
Lee et al. [19] proposed secure deletion for YAFFS by encrypting each file with a different key and storing the keys in the file's header. They suggested modifying YAFFS to colocate file headers in a fixed area of the storage medium, achieving secure deletion by erasing the erase block containing the file's header. More recently, Lee et al. [18] extended this approach to perform standard data sanitization methods prescribed by government agencies (e.g., NSA [25], DoD [24]) on the erase blocks containing the keys.

### 7. Conclusions

DNEFS and its instance UBIFSec are the first feasible solutions for efficient secure deletion on flash memory within the flash memory specifications. They provide guaranteed secure deletion against a computationally-bounded peek-a-boo attacker by encrypting each data node with a different key and storing the keys together on the flash storage medium. The erase blocks containing the keys are logically updated to remove old keys, replacing them with fresh random data that can be used as keys for new data. It is fine-grained, ensuring that parts of files that are overwritten are also securely deleted.

We have implemented UBIFSec and experimentally analyzed it to ensure efficiency, requiring a small, evenly-leveled increase in flash memory wear and little additional computation time. UBIFSec was seamlessly integrated into UBIFS, where cryptographic operations are added to the read/write data path, and changes to key state are handled by UBIFS’s existing index of data nodes.

### Acknowledgments

This work was partially supported by the Zurich Information Security Center and represents the views of the authors. We would like to thank our anonymous reviewers for their helpful comments and Artem Bityutskiy for his assistance in integrating UBIFSec into UBIFS.

### References
[References remain unchanged]

---

This optimized text is more structured, coherent, and professional, making it easier to read and understand.