### Fresh Entropy Addition and State Management

When fresh entropy \(\gamma\) is added to the entropy counter \(c\), both \(\gamma\) and the leakage \(z\) are returned to the adversary \(A\). The number of times \(A\) calls the `D-refresh` (and, consequently, `D`) is denoted by \(q_r\). By our convention, which includes oracle calls in run-time calculations, the total run-time of \(D\) is implicitly upper-bounded by the run-time of \(A\).

- **next-ror**: This procedure provides \(A\) with either the real-or-random challenge (if \(c \geq \gamma^*\)) or the true generator output. If `next-ror` is called prematurely (i.e., before \(c\) crosses \(\gamma^*\)), the counter \(c\) is reset to 0, as \(A\) might learn something non-trivial about the low-entropy state \(S\). The total number of calls to `next-ror` and `get-next` is denoted by \(q_n\).
- **get-state/set-state**: These procedures allow \(A\) to either learn the current state \(S\) or set it to any value \(S^*\). In either case, \(c\) is reset to 0. The total number of calls to `get-state` and `set-state` is denoted by \(q_s\).

### Security Notions for Pseudo-Random Number Generators with Input

We define the security notions for a pseudo-random number generator with input. The resources of \(A\) are denoted by \(T = (t, q_r, q_n, q_s)\). We also use the integers \(k\) and \(j\) as follows:
- The integer \(k\) identifies the successive outputs \((\sigma_k, I_k, \gamma_k, z_k)\) of the distribution sampler \(D\) and the successive inputs \(I_k\) used to update the internal state of the generator.
- The integer \(j\) identifies the successive states \(S_j\) of the generator when updated with the refresh algorithm.

**Definition 29 (Security of Pseudo-Random Number Generator with Input [DPR+13])**: A pseudo-random number generator with input \(G = (\text{setup}, \text{refresh}, \text{next})\) is called \((T = (t, q_r, q_n, q_s), \gamma^*, \epsilon)\)-resilient, forward-secure, and backward-secure if, for any adversary \(A\) running in time at most \(t\), making at most \(q_r\) calls to `D-refresh`, \(q_n\) calls to `next-ror`/`get-next`, and \(q_s\) calls to `get-state`/`set-state`, and any legitimate distribution sampler \(D\) inside the `D-refresh` procedure, the advantage of \(A\) in game \(ROB(\gamma^*)\) (resp., \(RES(\gamma^*), FWD(\gamma^*), BWD(\gamma^*))\) is at most \(\epsilon\), where:
- **ROB(\(\gamma^*\))**: The unrestricted game where \(A\) is allowed to make the above calls.
- **RES(\(\gamma^*\))**: The restricted game where \(A\) makes no calls to `get-state`/`set-state` (i.e., \(q_s = 0\)).
- **FWD(\(\gamma^*\))**: The restricted game where \(A\) makes no calls to `set-state` and a single call to `get-state` (i.e., \(q_s = 1\)), which is the very last oracle call \(A\) is allowed to make.
- **BWD(\(\gamma^*\))**: The restricted game where \(A\) makes no calls to `get-state` and a single call to `set-state` (i.e., \(q_s = 1\)), which is the very first oracle call \(A\) is allowed to make.

Thus, (a) resilience protects the security of the generator against arbitrary distribution samplers \(D\), (b) forward security protects past generator outputs if the state \(S\) is compromised, (c) backward security ensures that the generator can recover from state compromise if enough fresh entropy is injected, and (d) robustness ensures an arbitrary combination of the above. Robustness is the strongest notion, while resilience is the weakest. All provable constructions will satisfy the robustness notion, but we will use the weaker notions to better highlight some of our attacks.

### Entropy Traces in the ROB Game

Figure 4.3 illustrates the entropy traces of the counter \(c\) for the procedures defined in the security game \(ROB\). Two `next-ror` calls are shown: one where \(c \geq \gamma^*\) and another where \(c < \gamma^*\).

### Comparison with [BH05]

This security model complements the previous work of [BH05] in two ways:
1. It clearly captures the notion of entropy accumulation.
2. It clarifies the need for independence between the public parameter seed and the source of randomness.

The security model also allows for a precise definition of backward security, which is close to the recovering security described in the next section. In [BH05], immediate recovery occurs whenever a call is made to the `good-refresh` procedure, which is an extreme case of the new proposed security model.

In [BH05], Barak and Halevi insisted that the state \(S\) should be indistinguishable from random once `corrupt = false`. While this is true in their specific construction, we believe that demanding this property is too restrictive and not well-motivated as a mandatory part of a general security definition.

For example, consider a generator with an internal state \(S\) that includes a (never random) Boolean flag tracking the last call to the `next` procedure. The (truncated) generator \(G_0\) inside the `refresh` procedure is only needed to ensure the state pseudo-randomness of their construction. If we drop the state pseudo-randomness from the BH model, the "Simplified BH" construction is already robust in their model. Motivated by this, we present a strong attack on the simplified BH construction for any extractor `Extract` and any standard pseudo-random number generator \(G\).

### Simplified BH Construction

We consider a simplified construction (denoted as the "Simplified BH" construction) derived from the robust construction described in Section 3.6.2. This construction involves a randomness extraction function `Extract : {0, 1}^p → {0, 1}^n` and a standard pseudo-random number generator \(G : {0, 1}^n → {0, 1}^{n+\ell}\). The `refresh` and `next` algorithms are given below:
- `refresh(S, I) = S ⊕ Extract(I)`
- `next(S) = G(S)`

The only difference from the initial construction of [BH05] is that we dropped the (truncated) generator \(G_0\) inside the `refresh` procedure, which was only needed to ensure the state pseudo-randomness of their construction.

Consider the simplified version of the robustness security model (Figure 4.4), named the "Simplified ROB" model. This security model is the same as the robustness security model described in Section 3.6, except that the `set-state` procedure is not used to challenge the adversary on its capability to distinguish the state from random.

### Strong Attack on the Simplified BH Construction

Following the proof of [BH05], one can prove that the "Simplified BH" construction is robust in the "Simplified ROB" model. However, we present a strong attack on the "Simplified BH" construction in our stronger model for any extractor `Extract` and generator \(G\). This attack highlights the main difference between our models in terms of entropy accumulation.

Consider the following simple distribution sampler \(D\). At any time period, it sets \(I = \alpha^p\) (meaning bit \(\alpha\) concatenated \(p\) times) for a fresh and random bit \(\alpha\), and also sets the entropy estimate \(\gamma = 1\) and leakage \(z = \emptyset\). Clearly, \(D\) is legitimate, as the min-entropy of \(I\) is 1, even conditioned on the past and future. For any entropy threshold \(\gamma^*\), the simplified BH construction must regain security after \(\gamma^*\) calls to the `D-refresh` procedure following a state compromise.

Now consider the following simple adversary \(A\) attacking the backward security (and, thus, robustness) of the "Simplified BH" construction. It calls `set-state(0^n)` and then makes \(\gamma^*\) calls to `D-refresh` followed by many calls to `next-ror`. Let us denote the value of the state \(S\) after \(j\) calls to `D-refresh` by \(S_j\), and let \(Y(0) = Extract(0^p)\) and \(Y(1) = Extract(1^p)\). Then, recalling that `refresh(S, I) = S ⊕ Extract(I)` and \(S_0 = 0^n\), we see that \(S_j = Y(\alpha_1) ⊕ ... ⊕ Y(\alpha_j)\), where \(\alpha_1, ..., \alpha_j\) are random and independent bits. Specifically:
- If \(j\) is even, then \(S_j \in \{0^n, Y(0) ⊕ Y(1)\}\).
- If \(j\) is odd, then \(S_j \in \{Y(0), Y(1)\}\).

Despite receiving \(\gamma^*\) random and independent bits from \(D\), the `refresh` procedure fails to accumulate more than 1 bit of entropy in the final state \(S^* = S_{\gamma^*}\). After \(\gamma^*\) calls to `D-refresh`, \(A\) can simply try both possibilities for \(S^*\) and easily distinguish real from random outputs with an advantage arbitrarily close to 1 by making enough calls to `next-ror`.

This shows that the "Simplified BH" construction is never backward secure in our model, despite being secure in the "Simplified ROB" model.

### Recovering and Preserving Security

We define two properties of a pseudo-random number generator with input, which are intuitively simpler to analyze than full robustness security. We show that these two properties, taken together, imply robustness.

#### Recovering Security

Recovering security considers an adversary that compromises the state to some arbitrary value \(S_0\), either by asking for the state (`get-state`), setting it (`set-state`), or with the output (`next-ror`) when the internal state is unsafe. Afterwards, sufficient calls to `D-refresh` are made to increase the entropy estimate \(c\) above the threshold \(\gamma^*\). The recovering process should make the bit \(b\) involved in the `next-ror` procedure indistinguishable: when the internal state is considered safe, the output randomness \(R\) should look indistinguishable from random.

Formally, we consider the security game RECOV for a pseudo-random number generator with input \((\text{setup}, \text{refresh}, \text{next})\), whose procedures are described in Figure 4.5.

The security game RECOV is described as follows, with an adversary \(A\), a sampler \(D\), and bounds \(q_r, \gamma^*\):
1. The challenger generates a seed \(seed \leftarrow \text{setup}\) and a bit \(b \leftarrow \{0, 1\}\) uniformly at random. It sets \(\sigma_0 = 0\) and for \(k = 1, ..., q_r\), it computes \((\sigma_k, I_k, \gamma_k, z_k) \leftarrow D(\sigma_{k-1})\), initializes \(k = 0\), and sets \(c = 0\). It then gives back the seed and the values \(\gamma_1, ..., \gamma_{q_r}\) and \(z_1, ..., z_{q_r}\) to the adversary.
2. The adversary gets access to an oracle `getinput` which, on each invocation, increments \(k := k + 1\) and outputs \(I_k\).

3. At some point, the adversary \(A\) calls the `set-state` procedure, setting a chosen internal state \(S^* \in \{0, 1\}^n\). It then chooses an integer \(d\) such that \(k + d \leq q_r\) and \(\gamma_{k+1} + ... + \gamma_{k+d} \geq \gamma^*\), and calls `D-refresh` \(d\) times. This procedure updates the state \(S := \text{refresh}(S, I_{k+j})\) and updates \(c \leftarrow c + \gamma_{k+j}\) sequentially.

4. Eventually, the challenger sets \((S(0), R(0)) \leftarrow \text{next}(S)\) and generates \((S(1), R(1)) \leftarrow \{0, 1\}^{n+\ell}\). It then gives \((S(b), R(b))\) to the adversary, together with the next inputs \(I_{k+1}, ..., I_{q_r}\) (if \(k\) was the number of `refresh`-queries asked up to this point).

5. The adversary \(A\) outputs a bit \(b^*\).

The output of the game is the output of the `finalize` oracle at the end, which is 1 if the adversary correctly guesses the challenge bit, and 0 otherwise. The advantage of the adversary \(A\) and sampler \(D\) in the above game is defined as \(|2 \Pr[b^* = b] - 1|\).

**Definition 30 (Recovering Security)**: A pseudo-random number generator with input \((\text{setup}, \text{refresh}, \text{next})\) is said to be \((t, q_r, \gamma^*, \epsilon)\)-recovering if, for any adversary \(A\) and sampler \(D\) both running in time \(t\), the advantage of \(A\) in Game RECOV\((q_r, \gamma^*)\) is at most \(\epsilon\).

#### Preserving Security

Preserving security considers a safe internal state. After several calls to `D-refresh` with known (and even chosen) inputs, the internal state should remain safe. An initial state \(S\) is generated with entropy \(n\). It is then refreshed with arbitrary many calls to `D-refresh`. This is the preserving process, which should make the bit \(b\) involved in the `next-ror` procedure indistinguishable: since the internal state is considered safe, the output randomness \(R\) should look indistinguishable from random.