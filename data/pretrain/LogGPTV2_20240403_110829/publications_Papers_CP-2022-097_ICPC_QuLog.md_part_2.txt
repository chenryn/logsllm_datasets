### Deep Learning and Explainable AI Methods to Evaluate Zookeeper 3.5.6

#### Abstract
We experimentally demonstrate the usefulness of our approach in automatic, system-agnostic log quality assessment. Our method achieves high accuracy for log level assignment (0.88) and a high F1 score for sufficient linguistic structure (0.99). We open-source the code, datasets, and additional experimental results in the code repository [2].

#### 1. Introduction
Intuitively, when describing an event with the "error" log level, the static text commonly contains words like "error," "failure," "exit," and similar. Whenever these words occur within the static text, it is more likely that the level is "error" than "info." To verify this assumption, we considered an approach from information theory that defines the amount of uncertainty of information in a message [11]. In our case, we analyze the relation of word groups (n-grams, 𝑛 = {1, 2, 3, 4, 5}) from the static text in relation to the log level.

#### 2. Log Instruction Quality Assessment

##### 2.1 Log Instruction Quality Properties
To assess the quality of log instructions, we examined literature studies on logging practices and identified two views: explicit (developers) and implicit (operators).

- **Explicit View**: 
  - (a.1) Correct log level assignment.
  - (a.2) Comprehensive content of the static text and parameters.
  - (a.3) Correct log instruction placement [21].

- **Implicit View**:
  - (b.1) Trustworthiness: Valid meta-information of the log (e.g., correct log level).
  - (b.2) Semantics/linguistic: Word choice in verbose expression of the event.
  - (b.3) Completeness: Co-occurring logs to describe an event.
  - (b.4) Safeness: Log content compliant with user safety requirements [44].

Since our goal is to provide an automatic log instruction quality assessment, we first examine the feasibility of automatically evaluating these properties. Some properties (e.g., correct log level assignment and linguistic evaluation) can be assessed just from the content of log instructions, independent of the source code structure and remaining logging practices. To verify this, we conducted a preliminary study on nine open-source systems with good logging practices.

##### 2.2 Empirical Study

###### 2.2.1 Log Level Assignment
We assume that the static text of the log instruction has relevant features for log level assessment. Table 2 summarizes the n-gram entropy distribution, showing that the majority of the static text of log instructions have low entropy. Specifically, more than 50% (the median) of the static texts have zero entropy, meaning the n-grams appear at a unique level. Therefore, the static text has relevant features useful to discriminate log levels, verifying our assumption.

| Min | 1stQu. | Median | 3rdQu. | Max |
|-----|--------|--------|--------|-----|
| 0.00 | 0.00   | 0.00   | 0.56   | 0.91 |

###### 2.2.2 Linguistic Quality Assessment
A quality log instruction should describe the event concisely and verbosely [6]. From a general language perspective, complete and concise short texts (following the maxims of text quantity and quality) have a minimal linguistic structure (e.g., usage of nouns, verbs, prepositions, adjectives) [14]. For example, in the Jira issue ZOOKEEPER-2126, the static text "EventThread shutdown." linguistically is composed of "noun verb particle."

To validate our assumption, we performed an experiment where we extracted the linguistic structure of the static text using part-of-speech (POS) tagging. We used Spacy's implementation of POS tagging due to its high performance (>97% accuracy) [23]. The linguistic groups of the raw static text were evaluated by two experienced developers, who answered the research question: "Does the static text from the examined linguistic group contain minimal information required to comprehend the described event?" This question evaluates our assumption that the quality and self-sustained static text has a minimal linguistic structure aligned with expert intuition for a comprehensible event description.

| Total Log Instructions | Static Text (Example) |
|------------------------|-----------------------|
| 106                    | VERB NOUN             |
| 67                     | VERB                  |
| 49                     | VERB PUNCT            |
| 47                     | NOUN                  |
| 41                     | NOUN NOUN             |

###### 2.2.3 Other Quality Properties
The remaining quality properties (i.e., relevant variable selection, log instruction placement, safeness, and completeness) depend on different programming languages, design patterns, and other source code structures. These properties are challenging to assess due to the heterogeneity of software systems and the ways programming languages organize the source code.

#### 3. QuLog: Automatic Approach for Log Instruction Quality Assessment

Inspired by our findings in the preliminary study, we propose QuLog, an approach for automatic, system-agnostic log instruction quality assessment. We formulate the problem in the scope of:
1. Evaluating the correct log level assignment.
2. Evaluating the sufficient linguistic structure of the log instructions.

Given the static text of the log instruction, we apply deep learning methods to learn static text properties concerning the correct log level and sufficient linguistic structure. By training the models on systems with quality logging properties, they learn information for the log level and sufficient linguistic structure qualities.

##### 3.1 Internal Architectural Design of QuLog

Figure 2 illustrates the overview of the QuLog approach, which is composed of:
1. **Log Instruction Preprocessing**: Extracts log instructions from input source files and processes them into a suitable learning format.
2. **Deep Learning Framework**: Composed of two neural networks, one for each of the two quality properties.
3. **Prediction Explainer**: Explains a certain prediction by showing how different words contribute to the model prediction.

QuLog has two operational phases: offline and online. During the offline phase, the parameters of the neural networks and explanation part are learned on representative data from other software systems. In the online phase, the source files of the target software system are given as QuLog’s input. QuLog extracts the log instructions, the static texts, and log levels, processing them through the loaded models. As output, QuLog provides predictions for the log levels, sufficient linguistic structure, and prediction explanations as word importance scores.

Therefore, QuLog serves as a standalone recommendation approach to aid developers in improving the quality of log instructions. Developers may reconsider improving the log instructions given QuLog’s suggestions or reject them.

In the following, we detail the three components of QuLog:

###### 3.1.1 Log Instruction Extractor
The extractor module takes the source code files as input and identifies the log instructions. It uses regular expressions and pattern matching to locate and extract the log statements.

###### 3.1.2 Preparation
The preparation module prepares the data in a suitable learning format. As input, it receives the set of log instructions from the extractor. The module iterates over the log instructions and separates the static text from the log level. Different programming languages use different names for log levels. For example, Log4j (a Java logging library) uses the tag "WARN" for warning logs, while Python's logging module uses "WARNING." The module standardizes these log levels for consistency.

#### References
[1] Information Theory Basics.
[2] Code Repository.
[6] Best Practices in Logging.
[11] Entropy and Information Theory.
[14] Linguistic Structures in Short Texts.
[21] Log Placement Guidelines.
[23] Part-of-Speech Tagging with Spacy.
[44] Implicit Log Quality Properties.
[46] Statistical Sampling Methods.
[42] Cohen’s Kappa Score.

---

This revised version aims to provide a clear, coherent, and professional presentation of the original text, with improved structure and readability.