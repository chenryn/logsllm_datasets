[BPF] simplify zero extension with MOV_32_64.
[Online. Re-
trieved Jan 20, 2021.] https://github.com/llvm/llvm-project-staging/commit/
13f6c81c5d9a7a34a684363bcaad8eb7c65356fd.
[20] 2020. BPF Type Format (BTF). [Online. Retrieved Jan 20, 2021.] https://www.
[18] 2020.
[19] 2020.
kernel.org/doc/html/latest/bpf/btf.html.
[21] 2020. Calico’s eBPF dataplane. [Online, Retrieved Jan 20, 2021.] https://docs.
projectcalico.org/about/about-ebpf.
[24] 2020.
[22] 2020.
Fungible F-1 Data Processing Unit.
[Online. Retrieved Jan
20, 2021.] https://www.fungible.com/wp-content/uploads/2020/08/PB0028.01.
02020820-Fungible-F1-Data-Processing-Unit.pdf.
[23] 2020. Kube-proxy replacement at the XDP layer. [Online. Retrieved Jan 20,
2021.] https://cilium.io/blog/2020/06/22/cilium-18#kubeproxy-removal.
Marvell Octeon TX-2 product brief.
[Online. Retrieved Jan
20,
https://www.marvell.com/content/dam/marvell/en/public-
collateral/embedded-processors/marvell-infrastructure-processors-octeon-
tx2-cn913x-product-brief-2020-02.pdf.
2021.]
[25] 2020. Nvidia Mellanox BlueField 2.
[Online, Retrived Jan 20, 2021.] https:
//www.mellanox.com/files/doc-2020/pb-bluefield-2-dpu.pdf.
[26] 2021. BPF archive on lore.kernel.org. [Online. Retrieved Jun 09, 2021.] https:
//lore.kernel.org/bpf/.
[27] 2021. BPF design Q & A. [Online. Retrieved Jan 20, 2021.] https://www.kernel.
org/doc/html/v5.6/bpf/bpf_design_QA.html.
[28] 2021. BPF size issue in bpf_lxc’s IPv6 egress path. [Online. Retrieved Jan 20,
2021.] https://cilium.slack.com/archives/CDKG8NNHK/p1605601543139700.
[29] 2021.
Cilium complexity issues.
[Online. Retrieved Jul 1, 2021.]
https://github.com/cilium/cilium/issues?q=is%3Aissue+is%3Aopen+label%
3Akind%2Fcomplexity-issue.
[30] 2021. Complexity issue on 5.10+ with kubeProxyReplacement=disabled. [Online.
Retrieved Jul 12, 2021.] https://github.com/cilium/cilium/issues/14726.
[31] 2021. Complexity issue on 5.4+ using kubeProxyReplacement=disabled + IPSec.
[Online. Retrieved Jul 12, 2021.] https://github.com/cilium/cilium/issues/14784.
[32] 2021. Complexity Issue with cilium v1.9.5 when enable-endpoint-routes=true.
[Online. Retrieved Jul 12, 2021.] https://github.com/cilium/cilium/issues/16144.
[33] 2021. Complexity issue with socket-level LB disabled on Linux 5.10 and Cilium
1.8.7. [Online. Retrieved Jul 12, 2021.] https://github.com/cilium/cilium/issues/
15249.
[34] 2021. Did you know? BPF program size limit. [Online. Retrieved Jul 12, 2021.]
https://ebpf.io/blog/ebpf-updates-2021-02#did-you-know-program-size-limit.
[35] 2021. System-call check for BPF non-privileged program types. [Online. Re-
trieved Jul 12, 2021.] https://elixir.bootlin.com/linux/v5.13/source/kernel/bpf/
syscall.c#L2115.
[36] 2021. v1.9: CI: K8sVerifier Runs the kernel verifier against Cilium’s BPF datapath
on 5.4 . [Online. Retrieved Jul 12, 2021.] https://github.com/cilium/cilium/issues/
16050.
[37] David Ahern. 2020. The CPU cost of networking on a host. [Online. Retrieved
Jan 25, 2021.] https://people.kernel.org/dsahern/the-cpu-cost-of-networking-
on-a-host.
[38] Rajeev Alur, Rishabh Singh, Dana Fisman, and Armando Solar-Lezama. 2018.
Search-based program synthesis. Commun. ACM 61, 12 (2018), 84–93.
university press.
[39] Andrew W Appel. 2004. Modern compiler implementation in C. Cambridge
[40] Sorav Bansal and Alex Aiken. 2006. Automatic generation of peephole superop-
timizers. In ASPLOS.
[41] Sorav Bansal and Alex Aiken. 2008. Binary translation using peephole super-
optimizers. In Proceedings of the 8th USENIX conference on Operating systems
design and implementation. USENIX Association, 177–192.
[42] Sylvain Baubeau. 2020. File integrity monitoring using eBPF. [Online. Re-
trieved Jan 23, 2021.] https://www.devseccon.com/file-integrity-monitoring-
using-ebpf-secadvent-day-19/.
[43] Ryan Beckett, Ratul Mahajan, Todd Millstein, Jitendra Padhye, and David Walker.
2016. Don’t Mind the Gap: Bridging Network-Wide Objectives and Device-
Level Configurations. In Proceedings of the 2016 ACM SIGCOMM Conference
(Florianopolis, Brazil) (SIGCOMM ’16). Association for Computing Machinery,
New York, NY, USA, 328–341. https://doi.org/10.1145/2934872.2934909
[44] Ryan Beckett, Ratul Mahajan, Todd Millstein, Jitendra Padhye, and David Walker.
2017. Network Configuration Synthesis with Abstract Topologies. SIGPLAN
Not. 52, 6 (June 2017), 437–451. https://doi.org/10.1145/3140587.3062367
[45] Adam Belay, George Prekas, Ana Klimovic, Samuel Grossman, Christos
Kozyrakis, and Edouard Bugnion. 2014.
IX: A Protected Dataplane Operat-
ing System for High Throughput and Low Latency. In 11th USENIX Symposium
on Operating Systems Design and Implementation (OSDI 14).
[46] Armin Biere, Alessandro Cimatti, Edmund Clarke, and Yunshan Zhu. 1999.
Symbolic model checking without BDDs. In International conference on tools
and algorithms for the construction and analysis of systems. Springer, 193–207.
[Online, Retrieved Jan 20, 2021.] https:
//www.kernel.org/doc/html/latest/networking/af_xdp.html.
[47] Bjorn Topel et al. 2018. AF_XDP.
[48] Nikolaj Bjørner, Arie Gurfinkel, Ken McMillan, and Andrey Rybalchenko. 2015.
Horn Clause Solvers for Program Verification. Springer International Publishing,
Cham, 24–51. https://doi.org/10.1007/978-3-319-23534-9_2
K8s Service Load
[Online. Retrieved Jan 23, 2021.]
[49] Daniel Borkmann and Martynas Pumputis. 2020.
Balancing with BPF & XDP.
https://linuxplumbersconf.org/event/7/contributions/674/attachments/
568/1002/plumbers_2020_cilium_load_balancer.pdf.
[50] James Bornholt and Emina Torlak. 2018. Finding code that explodes under
symbolic evaluation. Proceedings of the ACM on Programming Languages 2,
OOPSLA (2018), 1–26.
[51] Aaron R Bradley and Zohar Manna. 2007. The calculus of computation: decision
procedures with applications to verification. Springer Science & Business Media.
[52] Marco Spaziani Brunella, Giacomo Belocchi, Marco Bonola, Salvatore Pontarelli,
Giuseppe Siracusano, Giuseppe Bianchi, Aniello Cammarano, Alessandro
Palumbo, Luca Petrucci, and Roberto Bifulco. 2020. hXDP: Efficient Software
Packet Processing on FPGA NICs. In 14th USENIX Symposium on Operating
Systems Design and Implementation (OSDI 20). USENIX Association, 973–990.
https://www.usenix.org/conference/osdi20/presentation/brunella
[53] Chonggang Li, Craig Gallek, Eddie Hao, Kevin Athey, Maciej Żenczykowski,
Vlad Dumitrescu, Willem de Bruijn, Xiaotian Pei. 2018. Scaling in the Linux
Networking Stack. [Online, Retrieved Jan 20, 2021.] https://www.kernel.org/
doc/html/v5.8/networking/scaling.html.
[54] Chonggang Li, Craig Gallek, Eddie Hao,Kevin Athey, Maciej Żenczykowski,Vlad
Dumitrescu, Willem de Bruijn,Xiaotian Pei. 2018. Scaling Linux Traffic Shaping
with BPF. [Online. Retrieved Jan 25, 2021.] http://vger.kernel.org/lpc_bpf2018_
talks/lpc-bpf-2018-shaping.pdf.
[55] Berkeley Churchill, Rahul Sharma, JF Bastien, and Alex Aiken. 2017. Sound
loop superoptimization for google native client. ACM SIGPLAN Notices 52, 4
(2017), 313–326.
[56] Cilium. 2017. Kubernetes Without kube-proxy. [Online, Retrieved Jan 20, 2021.]
https://docs.cilium.io/en/v1.9/gettingstarted/kubeproxy-free/.
[57] Lori A. Clarke. 1976. A system to generate test data and symbolically execute
[58] Jonathan Corbet. 2002. TCP segmentation offloading (TSO). [Online, Retrieved
programs. IEEE Transactions on software engineering 3 (1976), 215–222.
Jan 20, 2021.] https://lwn.net/Articles/9129/.
[59] Jonathan Corbet. 2014. BPF: the universal in-kernel virtual machine. [Online,
Retrieved Jan 20, 2021.] https://lwn.net/Articles/599755/.
13
arXiv, July 14, 2021
Qiongwen Xu et al.
[60] Jonathan Corbet. 2019. Compiling to BPF with gcc. [Online. Retrieved Jan 23,
[81] gro 2009. Generic Receive Offload (GRO). [Online, Retrieved Nov 15, 2018.]
https://lwn.net/Articles/358910/.
[82] Sumit Gulwani, Susmit Jha, Ashish Tiwari, and Ramarathnam Venkatesan. 2011.
Synthesis of loop-free programs. ACM SIGPLAN Notices 46, 6 (2011), 62–73.
[83] Toke Høiland-Jørgensen, Jesper Dangaard Brouer, Daniel Borkmann, John
Fastabend, Tom Herbert, David Ahern, and David Miller. 2018. The EX-
press Data Path: Fast Programmable Packet Processing in the Operating Sys-
tem Kernel. In Proceedings of the 14th International Conference on Emerging
Networking EXperiments and Technologies (Heraklion, Greece) (CoNEXT ’18).
Association for Computing Machinery, New York, NY, USA, 54–66. https:
//doi.org/10.1145/3281411.3281443
[84] Kangjing Huang, Xiaokang Qiu, Peiyuan Shen, and Yanjun Wang. 2020. Rec-
onciling Enumerative and Deductive Program Synthesis. In Proceedings of the
41st ACM SIGPLAN Conference on Programming Language Design and Implemen-
tation (London, UK) (PLDI 2020). Association for Computing Machinery, New
York, NY, USA, 1159–1174. https://doi.org/10.1145/3385412.3386027
[85] Kangjing Huang, Xiaokang Qiu, and Yanjun Wang. 2017. DRYADSYNTH: A
Concolic SyGuS Solver. (2017).
[86] Ingo Molnar and Max Krasnyansky. 2021. SMP IRQ affinity. [Online. Retrieved
Jan 27, 2021.] https://www.kernel.org/doc/html/latest/core-api/irq/irq-affinity.
html.
[87] Intel. 2010. Data Plane Development Kit (DPDK). [Online, Retrieved Nov 15,
2018.] https://www.dpdk.org/.
[88] Jay Schulist, Daniel Borkmann, Alexei Starovoitov. [n.d.]. Linux Socket Filtering
aka Berkeley Packet Filter (BPF). [Online, Retrieved Oct 29, 2020.] https://www.
kernel.org/doc/Documentation/networking/filter.txt.
[89] Susmit Jha, Sumit Gulwani, Sanjit A Seshia, and Ashish Tiwari. 2010. Oracle-
guided component-based program synthesis. In 2010 ACM/IEEE 32nd Interna-
tional Conference on Software Engineering, Vol. 1. IEEE, 215–224.
[90] Johar, Gobind and Marupadi, Varun. 2020. New GKE Dataplane V2 in-
creases security and visibility for containers.
[Online, Retrieved Jan 20,
2021.] https://cloud.google.com/blog/products/containers-kubernetes/bringing-
ebpf-and-cilium-to-google-kubernetes-engine.
[91] Jonathan Corbet. 2018. Accelerating networking with AF_XDP. [Online. Re-
trieved Jan 20, 2021.] https://lwn.net/Articles/750845/.
[92] Jonathan Corbet. 2020. Kernel operations structures in BPF. [Online, Retrieved
Jan 20, 2021.] https://lwn.net/Articles/811631/.
[93] Rajeev Joshi, Greg Nelson, and Keith Randall. 2002. Denali: a goal-directed
[94] Michael Kerrisk. 2021. BPF classifier and actions in tc. [Online, Retrieved Jan
superoptimizer. ACM SIGPLAN Notices 37, 5 (2002), 304–314.
20, 2021.] https://www.man7.org/linux/man-pages/man8/tc-bpf.8.html.
point of view. Springer.
[95] Michael Kerrisk. 2021. BPF-helpers: a list of eBPF helper functions. [Online,
Retrieved Oct 29, 2020.] https://www.man7.org/linux/man-pages/man7/bpf-
helpers.7.html.
[96] Junaid Khalid, Eric Rozner, Wesley Felter, Cong Xu, Karthick Rajamani, Alexan-
dre Ferreira, and Aditya Akella. 2018. Iron: Isolating Network-based {CPU} in
Container Environments. In 15th {USENIX} Symposium on Networked Systems
Design and Implementation ({NSDI} 18). 313–328.
[97] James C King. 1976. Symbolic execution and program testing. Commun. ACM
19, 7 (1976), 385–394.
[98] Daniel Kroening and Ofer Strichman. 2008. Decision procedures: an algorithmic
[99] John R Levine. 1999. Linkers & loaders. Morgan-Kaufmann.
[100] Richard Liaw, Romil Bhardwaj, Lisa Dunlap, Yitian Zou, Joseph E Gonzalez, Ion
Stoica, and Alexey Tumanov. 2019. Hypersched: Dynamic resource reallocation
for model development on a deadline. In Proceedings of the ACM Symposium on
Cloud Computing. 61–73.
[101] Jay P. Lim and Santosh Nagarakatte. 2019. Automatic Equivalence Checking
for Assembly Implementations of Cryptography Libraries. In Proceedings of the
17th International Symposium on Code Generation and Optimization. IEEE, 37–49.
https://doi.org/10.1109/CGO.2019.8661180
[102] Nuno P Lopes, David Menendez, Santosh Nagarakatte, and John Regehr. 2015.
Provably correct peephole optimizations with alive. In Proceedings of the 36th
ACM SIGPLAN Conference on Programming Language Design and Implementation.
22–32.
[103] Greg Marsden. 2019. BPF: A Tour of Program Types. [Online, Retrieved Oct 29,
2020.] https://blogs.oracle.com/linux/notes-on-bpf-1.
[104] Michael Marty, Marc de Kruijf, Jacob Adriaens, Christopher Alfeld, Sean Bauer,
Carlo Contavalli, Michael Dalton, Nandita Dukkipati, William C Evans, Steve
Gribble, et al. 2019. Snap: a microkernel approach to host networking. In
Proceedings of the 27th ACM Symposium on Operating Systems Principles. 399–
413.
[105] Henry Massalin. 1987. Superoptimizer: a look at the smallest program. ACM
[106] Steven McCanne and Van Jacobson. 1993. The BSD Packet Filter: A New Archi-
SIGARCH Computer Architecture News 15, 5 (1987), 122–126.
tecture for User-level Packet Capture.. In USENIX winter, Vol. 46.
443–444. https://doi.org/10.1145/364995.365000
[107] W. M. McKeeman. 1965. Peephole Optimization. Commun. ACM 8, 7 (July 1965),
2021.] https://lwn.net/Articles/800606/.
[61] Jonathan Corbet. 2019. Concurrency management in BPF. [Online, Retrieved
Jun 19, 2021.] https://lwn.net/Articles/779120/.
[62] Jonathan Corbet. 2021. Calling kernel functions from BPF. [Online, Retrieved
Jun 19, 2021.] https://lwn.net/Articles/856005/.
[63] Ron Cytron, Jeanne Ferrante, Barry K Rosen, Mark N Wegman, and F Kenneth
Zadeck. 1991. Efficiently computing static single assignment form and the
control dependence graph. ACM Transactions on Programming Languages and
Systems (TOPLAS) 13, 4 (1991), 451–490.
[64] Michael Dalton, David Schultz, Jacob Adriaens, Ahsan Arefin, Anshuman
Gupta, Brian Fahs, Dima Rubinstein, Enrique Cauich Zermeno, Erik Rubow,
James Alexander Docauer, et al. 2018. Andromeda: Performance, isolation, and
velocity at scale in cloud network virtualization. In 15th {USENIX} Symposium
on Networked Systems Design and Implementation ({NSDI} 18). 373–387.
[65] Leonardo De Moura and Nikolaj Bjørner. 2008. Z3: An efficient SMT solver.
In International conference on Tools and Algorithms for the Construction and
Analysis of Systems. Springer, 337–340.
[66] Dmitry Duplyakin, Robert Ricci, Aleksander Maricq, Gary Wong, Jonathon
Duerig, Eric Eide, Leigh Stoller, Mike Hibler, David Johnson, Kirk Webb, Aditya
Akella, Kuangching Wang, Glenn Ricart, Larry Landweber, Chip Elliott, Michael
Zink, Emmanuel Cecchet, Snigdhaswin Kar, and Prabodh Mishra. 2019. The De-
sign and Operation of CloudLab. In Proceedings of the USENIX Annual Technical
Conference (ATC). 1–14. https://www.flux.utah.edu/paper/duplyakin-atc19
[67] Jake Edge. 2020. BPF in GCC. [Online. Retrieved Jan 23, 2021.] https://lwn.net/
Articles/831402/.
[68] Ahmed El-Hassany, Petar Tsankov, Laurent Vanbever, and Martin Vechev. 2017.
Network-Wide Configuration Synthesis. In Computer Aided Verification, Rupak
Majumdar and Viktor Kunčak (Eds.). Springer International Publishing, Cham,
261–281.
[69] Ahmed El-Hassany, Petar Tsankov, Laurent Vanbever, and Martin Vechev.
2018. NetComplete: Practical Network-Wide Configuration Synthesis with
Autocompletion. In 15th USENIX Symposium on Networked Systems Design
and Implementation (NSDI 18). USENIX Association, Renton, WA, 579–594.
https://www.usenix.org/conference/nsdi18/presentation/el-hassany
[70] Eric Leblond. 2016. Suricata bypass feature. [Online, Retrieved Jan 20, 2021.]
https://www.stamus-networks.com/blog/2016/09/28/suricata-bypass-feature.
[71] Arthur Fabre. 2018. L4Drop: XDP DDoS Mitigations. [Online, Retrieved Jan 20,
2021.] https://blog.cloudflare.com/l4drop-xdp-ebpf-based-ddos-mitigations/.
[72] Alireza Farshin. 2019. Realizing Low-Latency Internet Services via Low-Level
Optimization of NFV Service Chains. Ph.D. Dissertation. KTH, Stockholm. https:
//doi.org/10.13140/RG.2.2.22044.95361
[73] Ethan Fetaya. 2016. Stochastic Optimization with MCMC. [Online, Retrieved
Jan 17, 2021.] http://www.wisdom.weizmann.ac.il/~ethanf/MCMC/stochastic%
20optimization.pdf.
[74] Daniel Firestone, Andrew Putnam, Sambhrama Mundkur, Derek Chiou, Alireza
Dabagh, Mike Andrewartha, Hari Angepat, Vivek Bhanu, Adrian Caulfield, Eric
Chung, Harish Kumar Chandrappa, Somesh Chaturmohta, Matt Humphrey, Jack
Lavier, Norman Lam, Fengfen Liu, Kalin Ovtcharov, Jitu Padhye, Gautham Pop-
uri, Shachar Raindel, Tejas Sapre, Mark Shaw, Gabriel Silva, Madhan Sivakumar,
Nisheeth Srivastava, Anshuman Verma, Qasim Zuhair, Deepak Bansal, Doug
Burger, Kushagra Vaid, David A. Maltz, and Albert Greenberg. 2018. Azure
Accelerated Networking: SmartNICs in the Public Cloud. In USENIX Symposium
on Networked Systems Design and Implementation (NSDI 18).
[75] Xiangyu Gao, Taegyun Kim, Michael D Wong, Divya Raghunathan, Aatish Kis-
han Varma, Pravein Govindan Kannan, Anirudh Sivaraman, Srinivas Narayana,
and Aarti Gupta. 2020. Switch code generation using program synthesis. In
Proceedings of the Annual conference of the ACM Special Interest Group on Data
Communication on the applications, technologies, architectures, and protocols for
computer communication. 44–61.
[76] Gavin Stark and Sakin Sezer. 2020. A 22nm High-Performance Flow Pro-
cessor for 200Gb/s Software Defined Networking. [Online, Retrieved July 1,
2021.] https://old.hotchips.org/wp-content/uploads/hc_archives/hc25/HC25.60-
Networking-epub/HC25.27.620-22nm-Flow-Proc-Stark-Netronome.pdf.
[77] Elazar Gershuni, Nadav Amit, Arie Gurfinkel, Nina Narodytska, Jorge A Navas,
Noam Rinetzky, Leonid Ryzhyk, and Mooly Sagiv. 2019. Simple and precise static
analysis of untrusted linux kernel extensions. In Proceedings of the 40th ACM
SIGPLAN Conference on Programming Language Design and Implementation.
1069–1084.
[78] WR Gilks, S Richardson, and DJ Spiegelhalter. 1996. Markov Chain Monte Carlo
in Practice. Chapman & Hall, London.
[79] Brendan Gregg. 2019. BPF: a new type of software. [Online, Retrieved Jan
19, 2020.] http://www.brendangregg.com/blog/2019-12-02/bpf-a-new-type-of-
software.html.
[80] Brendan Gregg. 2019. BPF Performance Analysis at Netflix.
[Online, Re-
trieved Jan 19, 2020.] https://www.slideshare.net/brendangregg/reinvent-2019-
bpf-performance-analysis-at-netflix.
14
Synthesizing Safe and Efficient Kernel Extensions for Packet Processing
arXiv, July 14, 2021
[114] Luke Nelson, James Bornholt, Ronghui Gu, Andrew Baumann, Emina Torlak,
and Xi Wang. 2019. Scaling symbolic evaluation for automated verification
of systems code with Serval. In Proceedings of the 27th ACM Symposium on
Operating Systems Principles. 225–242.
[115] Luke Nelson, Jacob Van Geffen, Emina Torlak, and Xi Wang. 2020. Specifica-
tion and verification in the field: Applying formal methods to BPF just-in-time
compilers in the Linux kernel. In Usenix Operating Systems Design and Imple-
mentation (OSDI).
[116] Simon Peter, Jialin Li, Irene Zhang, Dan R. K. Ports, Doug Woos, Arvind Krishna-
murthy, Thomas Anderson, and Timothy Roscoe. 2014. Arrakis: The Operating
System is the Control Plane. In USENIX Symposium on Operating Systems Design
and Implementation (OSDI 14).
[117] Phitchaya Mangpo Phothilimthana, Aditya Thakur, Rastislav Bodik, and Dinakar
Dhurjati. 2016. Scaling up superoptimization. In Proceedings of the Twenty-First
International Conference on Architectural Support for Programming Languages
and Operating Systems. 297–310.
[118] Benjamin C Pierce, Chris Casinghino, Marco Gaboardi, Michael Greenberg,
Cătălin Hriţcu, Vilhelm Sjöberg, and Brent Yorgey. 2010. Software foundations.
[Online, Retrieved Oct 29, 2020.] http://www.cis.upenn.edu/bcpierce/sf/current/
index.html.
[119] Sorawee Porncharoenwase, James Bornholt, and Emina Torlak. 2020. Fixing
Code that Explodes Under Symbolic Evaluation. In International Conference on
Verification, Model Checking, and Abstract Interpretation. Springer, 44–67.
[120] Qiongwen Xu, Michael D. Wong, Tanvi Wagle, Srinivas Narayana, Anirudh
Sivaraman. 2021. The K2 compiler. [Online, Retrieved Jun 30, 2021.] https:
//k2.cs.rutgers.edu.
[108] David Menendez and Santosh Nagarakatte. 2017. Alive-infer: Data-driven pre-
condition inference for peephole optimizations in llvm. In Proceedings of the 38th
ACM SIGPLAN Conference on Programming Language Design and Implementation.
49–63.
[109] Sebastiano Miano, Alireza Sanaee, Fulvio Risso, Gábor Rétvári, and Gianni
Antichi. 2021. Dynamic Recompilation of Software Network Services with
Morpheus. arXiv:2106.08833 [cs.NI]
I. Schwartzbach. 2018.
[110] Anders Møller and Michael
Static Program
Department of Computer Science, Aarhus University,
Analysis.
http://cs.au.dk/˜amoeller/spa/.
[111] Greg Morrisett, Gang Tan, Joseph Tassarotti, Jean-Baptiste Tristan, and Edward
Gan. 2012. RockSalt: better, faster, stronger SFI for the x86. In Proceedings
of the 33rd ACM SIGPLAN conference on Programming Language Design and
Implementation. 395–404.
[112] Manasij Mukherjee, Pranav Kant, Zhengyang Liu, and John Regehr. 2020.
Dataflow-based Pruning for Speeding up Superoptimization. In ACM SIGPLAN
Conference on Object-Oriented Programming, Systems, Languages, and Applica-
tions.
[113] Andrii Nakryiko. 2020. BPF Portability and CO-RE. [Online. Retrieved Jan 20,
2021.] https://facebookmicrosites.github.io/bpf/blog/2020/02/19/bpf-portability-
and-co-re.html.
[121] Quentin Monnet. 2020. Optimizing BPF: Smaller Programs for Greater Perfor-
mance. [Online. Retrieved Jan 20, 2021.] https://www.netronome.com/blog/
optimizing-bpf-smaller-programs-greater-performance/.
[122] Luigi Rizzo. 2012. netmap: A Novel Framework for Fast Packet I/O. In 2012
USENIX Annual Technical Conference (USENIX ATC 12).
[123] Hugo Sadok, Zhipeng Zhao, Valerie Choung, Nirav Atre, Daniel S Berger,
James C Hoe, Aurojit Panda, and Justine Sherry. 2021. We need kernel in-
terposition over the network dataplane. In Proceedings of the Workshop on Hot
Topics in Operating Systems. 152–158.
[124] Shambwaditya Saha, Santhosh Prabhu, and P Madhusudan. 2015. NetGen:
Synthesizing data-plane configurations for network policies. In Proceedings of
the 1st ACM SIGCOMM Symposium on Software Defined Networking Research.
1–6.
[125] Jamal Hadi Salim, Robert Olsson, and Alexey Kuznetsov. 2001. Beyond Softnet..