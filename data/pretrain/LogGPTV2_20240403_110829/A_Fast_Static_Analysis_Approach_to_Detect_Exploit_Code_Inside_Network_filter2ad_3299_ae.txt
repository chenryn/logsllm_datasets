# 6. 比较网络流处理时间

(b) SSH (端口22)

- 快速反汇编
- 精确反汇编
- Snort

(c) X11 (端口6000)

- 流量大小 (KB)
- 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90

(d) CIFS (端口139)

- 流量大小 (KB)
- 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90

图6展示了我们方法（包括快速和精确反汇编）与Snort模式匹配在网络流处理时间上的比较。尽管两者在处理时间上有显著差异，但快速反汇编版本的开销远小于精确反汇编版本。对于大规模流量，精确反汇编版本可能不适用于实时网络流量。再次提到模式匹配时，我们认为更大的签名库也不会显著影响运行时间。然而，由于检测需要不断更新和维护签名数据库，这会导致较大的空间开销，并随着每个新增签名而增加。我们的方法在这方面优于模式匹配，因为它不需要维护这样的表。

## 部署问题

性能研究为我们提供了实际部署场景的有用见解。Snort可以部署在多个点上，包括组织网络入口处的网络分流配置，这里的网络流量最大。相比之下，我们的方法在这种部署点可能不太适合，即使更快的版本也可能显示出明显的延迟。内部路由器或终端主机是更实用的部署位置。另外，由于核心算法的输入最终是一个字节流，我们的方法可以在程序中直接实现，用于对所有传入程序输入进行额外验证。

## 改进

在性能测量实验中，如预期那样，HTTP流量产生了最高的开销，因为可打印的ASCII字符比其他流量更频繁，导致更多的分支指令和基本块。例如，一个典型的10 KB流量返回了388个基本块（快速版本）和1246个基本块（精确版本）。通过预处理网络流量并移除包含ASCII文本的应用层协议头，这个数字可以减少。由于大多数流量是HTTP，这可能是一个值得改进的地方。其他一般改进可以通过优化实现来实现。另一个可能性是在硬件中实现我们的方法，因为它没有动态组件，如签名库。我们相信这可以带来非常显著的性能改进。

## 结论与未来工作

本文描述了一种高效的静态分析方法，用于确定网络流是否包含攻击代码。这是现有基于内容的检测范式的一个重要突破。我们的方法能够检测多种不同的攻击代码，且无需任何维护成本，从而成为一个真正的即插即用安全设备。不利的一面是，虽然我们的静态分析技术比传统静态分析方法更高效，但仍不足以处理非常大的网络流量，因此存在部署限制。因此，我们认为我们的方法不能完全取代现有技术，而是与其协同工作。

我们正在积极追求三个主要方向作为正在进行和未来的工作的一部分。首先，我们正在研究如何使我们的静态分析检测对潜在混淆更加敏感。这将大大提升我们方法的长期相关性，而不仅仅是一个临时解决方案。其次，我们正在研究可能的方法来显著加速我们的方法，以缩小与基于签名的检测方案之间的性能差距。最后，在经过充分成熟后，我们将在实际部署环境中进行更详尽的测试。

## 参考文献

1. F-secure病毒描述: Santy. <http://www.fsecure.com/v-descs/santy_a.shtml>.
2. IA-32 Intel架构软件开发者手册.
3. Metasploit项目. <http://www.metasploit.com/>.
4. Slammer/Sapphire代码反汇编. <http://www.immunitysec.com/downloads/disassembly.txt>.
5. 最重要的二十个互联网安全漏洞 (更新). <http://files.sans.org/top20.pdf>.
6. VX天堂. <http://vx.netlux.org>.
7. 工具接口标准 (TIS), 可执行文件和链接格式 (ELF) 规范, 版本1.2, 1995.
8. Microsoft便携式可执行文件和通用对象文件格式规范, 修订版6.0, 1999. <http://www.microsoft.com/whdc/system/platform/firmware/PECOFF.mspx>.
9. C. Cifuentes 和 K. Gough. 二进制程序的反编译. 软件实践与经验, 25(7):811–829, 1995年7月.
10. M. Christodorescu 和 S. Jha. 通过静态分析检测恶意模式. 第12届USENIX安全研讨会 (Security'03) 论文集, 页169–186. USENIX协会, 2003年8月.
11. M. Christodorescu 和 S. Jha. 通过静态分析检测恶意模式. 第12届USENIX安全研讨会 (Security '03) 论文集, 2003.
12. C. Cifuentes 和 M. V. Emmerik. UQBT: 低成本的可适应二进制翻译. 计算机, 33(3):60–66, 2000.
13. C. Cowan, C. Pu, D. Maier, H. Hinton, P. Bakke, S. Beattie, A. Grier, P. Wagle, 和 Q. Zhang. StackGuard: 自动自适应检测和防止缓冲区溢出攻击. 第7届USENIX安全研讨会, 圣安东尼奥, 德克萨斯州, 1998年1月.
14. D.W. Binkley 和 K.B. Gallagher. 程序切片. 计算机进展, 43:1–50, 1996.
15. H.H. Feng, J.T. Giﬃn, Y. Huang, S. Jha, W. Lee, 和 B. P. Miller. 在入侵检测的静态分析中形式化敏感度. IEEE安全与隐私研讨会, 页194–, 2004.
16. S. Hittel. 使用Snort检测基于跳转的IDS逃避无操作滑板, 2002年5月. <http://aris.securityfocus.com/rules/020527-Analysis-Jump-NOOP.pdf>.
17. S. Horwitz, J. Prins, 和 T. Reps. 整合非干扰版本的程序. ACM编程语言系统事务, 11(3):345–387, 1989.
18. R. Jones 和 P. Kelly. C语言的边界检查. <http://www-ala.doc.ic.ac.uk/phjk/BoundsChecking.html>.
19. J. Jung, V. Paxson, A. W. Berger, 和 H. Balakrishnan. 使用顺序假设检验的快速端口扫描检测. IEEE安全与隐私研讨会, 2004年5月.
20. M. Kamkar. 程序切片技术概述及分类. 系统软件期刊, 31(3):197–214, 1995.
21. H.-A. Kim 和 B. Karp. Autograph: 向自动分布式蠕虫签名检测迈进. 第13届USENIX安全研讨会 (Security '04) 论文集, 2004.
22. O. Kolesnikov, D. Dagon, 和 W. Lee. 高级多态蠕虫: 通过混入正常流量逃避IDS. 技术报告 GIT-CC-04-15, 计算机学院, 乔治亚理工学院, 2004.
23. N. Krawetz. 蜜罐文件: 反蜜罐技术. IEEE安全与隐私, 2(1):76–79, 2004年1-2月.
24. C. Kruegel, W. Robertson, F. Valeur, 和 G. Vigna. 模糊二进制文件的静态反汇编. 第13届USENIX安全研讨会 (Security '04) 论文集, 2004.
25. W. Landi. 静态分析的不可判定性. ACM编程语言和系统通信, 1(4):323–337, 1992年12月.
26. C. Linn 和 S. Debray. 执行代码的模糊处理以提高对静态分析的抵抗力. 第10届ACM计算机和通信安全会议 (CCS), 2003.
27. LURHQ威胁情报组. Phatbot特洛伊木马分析. <http://www.lurhq.com/phatbot.html>
28. M. Weiser. 程序切片: 自动程序抽象方法的形式、心理和实际调查. 博士论文, 密歇根大学, 安阿伯, 密歇根, 1979.
29. D. Moore, V. Paxson, S. Savage, C. Shannon, S. Staniford, 和 N. Weaver. Slammer蠕虫内幕. IEEE安全与隐私, 1(4):33–39, 2003.
30. K.J. Ottenstein 和 L.M. Ottenstein. 软件开发环境中的程序依赖图. SIGPLAN通知, 19(5):177–184, 1984.
31. A. Pasupulati, J. Coit, K. Levitt, S. Wu, S. Li, R. Kuo, 和 K. Fan. Buttercup: 基于网络的多态缓冲区溢出漏洞检测. 第9届IEEE/IFIP网络运营和管理研讨会 (NOMS 2004) 即将发表, 首尔, 韩国, 2004年5月.
32. G. Ramalingam. 别名的不可判定性. ACM编程语言和系统事务, 16(5):1467–1471, 1994.
33. S. Staniford, V. Paxson, 和 N. Weaver. 如何在业余时间拥有整个互联网, 2002.
34. F. Tip. 程序切片技术综述. 技术报告 CS-R9438, CWI (数学和计算机科学中心), 阿姆斯特丹, 荷兰, 1994.
35. T. Toth 和 C. Krügel. 通过抽象负载执行准确检测缓冲区溢出. 最近的入侵检测进展 (RAID), 页274–291, 2002.
36. J. Twycross 和 M.M. Williamson. 实现和测试病毒节流. 第12届Usenix安全研讨会 (Security '03) 论文集, 2003.
37. D. Wagner 和 D. Dean. 通过静态分析进行入侵检测. SP '01: IEEE安全与隐私研讨会论文集, 页156. IEEE计算机学会, 2001.
38. K. Wang 和 S. J. Stolfo. 基于异常载荷的网络入侵检测. 最近的入侵检测进展 (RAID), 页203–222, 2004.
39. N. Weaver, V. Paxson, S. Staniford, 和 R. Cunningham. 计算机蠕虫分类. 第一届ACM快速恶意代码研讨会 (WORM), 2003.
40. N. Weaver, S. Staniford, 和 V. Paxson. 扫描蠕虫的非常快速遏制. USENIX安全研讨会, 页29–44, 2004.
41. N. Weaver, S. Staniford, 和 V. Paxson. 扫描蠕虫的非常快速遏制. USENIX安全研讨会, 页29–44, 2004.
42. C.C. Zou, L. Gao, W. Gong, 和 D. Towsley. 互联网蠕虫的监测和早期预警. CCS '03: 第10届ACM计算机和通信安全会议论文集, 页190–199. ACM出版社, 2003.
43. C.C. Zou, W. Gong, 和 D. Towsley. Code Red蠕虫传播建模与分析. 第9届ACM计算机和通信安全会议论文集, 页138–147. ACM出版社, 2002.

---

希望这些修改能使原文更加清晰、连贯和专业。如果有任何进一步的修改需求，请告诉我。