 60
(b) SSH (port 22)
Fast Disassembly
Fast Disassembly
Accurate Disassembly
Accurate Disassembly
Snort
Snort
)
)
s
s
c
c
e
e
s
s
(
(
e
e
m
m
T
T
i
i
)
)
s
s
c
c
e
e
s
s
(
(
e
e
m
m
T
T
i
i
 60
 60
 55
 55
 50
 50
 45
 45
 40
 40
 35
 35
 30
 30
 25
 25
 20
 20
 15
 15
 10
 10
 5
 5
 0
 0
 50
 50
 45
 45
 40
 40
 35
 35
 30
 30
 25
 25
 20
 20
 15
 15
 10
 10
 5
 5
 0
 0
 0
 0
 5
 5
 10
 10
 15
 15
 20
 20
 30
 30
 25
 35
 25
 35
Flow size (KB)
Flow size (KB)
 40
 40
 45
 45
 50
 50
 55
 55
 60
 60
(c) X11 (port 6000)
 0  5  10  15  20  25  30  35  40  45  50  55  60  65  70  75  80  85  90
 0  5  10  15  20  25  30  35  40  45  50  55  60  65  70  75  80  85  90
Flow size (KB)
Flow size (KB)
(d) CIFS (port 139)
Fig. 6. Comparison of network ﬂow processing times between our approach (both fast
and accurate disassembly) and Snort’s pattern matching
however, the slopes are drastically diﬀerent. The fast disassembly version incurs
far smaller overheads, while the accurate disassembly version may be impractical
in the context of live network traﬃc when ﬂow sizes are large. Referring again
to pattern matching, We also believe that a larger signature repository is also
not likely to aﬀect running time signiﬁcantly. However, the downside is that
since detection requires the signature database to be constantly updated and
maintained, there is a large space overhead which increases with each additional
signature. Our approach scores over pattern matching in this regard since it does
not require maintaining any such tables.
Deployment Issues. The runtime performance studies provide us with useful
insight into practical deployment scenarios. Snort can be deployed at various
points including a network tap conﬁguration at the organization’s network entry
point where the volume of network is the highest. In contrast, our approach
may not be very suitable at this point of deployment; even the faster version
may show noticeable latency. Instead, internal routers or end hosts are more
practical deployment sites. There is yet another possibility. Since the input to
the core algorithm is eventually a stream of bytes, our approach, sans the network
processing components, can be implemented directly into programs for additional
validation of all incoming program inputs at runtime.
306
R. Chinchani and E. van den Berg
Improvements. In our performance measurements experiments, as expected,
HTTP traﬃc incurred the highest overheads because of the printable ASCII
characters being more frequent than other ﬂows, which resulted in a larger num-
ber of branch instructions and basic blocks. For example, a typical ﬂow of 10 KB
in size returned 388 basic blocks for the fast version and 1246 basic blocks for the
accurate version. This number can be reduced by preprocessing a network ﬂow
and removing application level protocol headers containing ASCII text. Since
most traﬃc is HTTP, this may be a worthwhile improvement. Other general
improvements can be made by optimizing the implementation. Another distinct
possibility is to implement our approach in hardware since it has no dynamic
components such as a signature repository. We believe this can lead to very
signiﬁcant performance improvements.
7 Conclusion and Future Work
In this paper, we have described an eﬃcient static analysis based litmus test
to determine if a network ﬂow contains exploit code. This is a signiﬁcant de-
parture from existing content-based detection paradigms. Our approach has
the ability to detect several diﬀerent types of exploit code without any main-
tenance costs, making for a true plug-n-play security device. On the downside,
although our static analysis technique is very eﬃcient compared to traditional
static analysis approaches, it is still not fast enough to handle very large net-
work traﬃc, and therefore, there are deployment constraints. Therefore, we
believe our approach cannot replace existing techniques altogether, but rather
work in tandem with them.
There are three main avenues which we are actively pursuing as a part of
our ongoing and future work. First, we are investigating ways to sensitize our
static analysis based detection against potential obfuscations. This will greatly
improve the long-term relevance of our approach rather than being a stop-gap so-
lution. Second, we are studying possible ways in which our approach can be sped
up signiﬁcantly. This would close the performance gap between signature-based
detection schemes and our technique. Finally, after satisfactory maturation, we
will perform more exhaustive testing in a live deployment setting.
References
1. F-secure virus descriptions : Santy. http://www.fsecure.com/v-descs/santy_a.
shtml.
2. IA-32 Intel Architecture Software Developer’s Manual.
3. Metasploit Project. http://www.metasploit.com/.
4. Slammer/Sapphire Code Disassembly. http://www.immunitysec.com/downloads/
disassembly.txt.
5. The Twenty Most Critical Internet Security Vulnerabilities (Updated) The Experts
Consensus. http://files.sans.org/top20.pdf.
6. VX heavens. http://vx.netlux.org.
A Fast Static Analysis Approach
307
7. Tool Interface Standard (TIS), Executable and Linking Format (ELF) Speciﬁcation,
Version 1.2, 1995.
8. Microsoft Portable Executable and Common Object File Format Speciﬁcation, Re-
http://www.microsoft.com/whdc/system/platform/ﬁrmware/
vision 6.0, 1999.
PECOFF.mspx.
9. C. Cifuentes and K. Gough. Decompilation of Binary Programs. Software Practice
& Experience, 25(7):811–829, July 1995.
10. M. Christodorescu and S. Jha. Static analysis of executables to detect malicious
patterns. In Proceedings of the 12th USENIX Security Symposium (Security’03),
pages 169–186. USENIX Association, USENIX Association, aug 2003.
11. M. Christodorescu and S. Jha. Static analysis of executables to detect malicious
patterns. In Proceedings of the 12th USENIX Security Symposium (Security ’03),
2003.
12. C. Cifuentes and M. V. Emmerik. UQBT: Adaptable binary translation at low
cost. Computer, 33(3):60–66, 2000.
13. C. Cowan, C. Pu, D. Maier, H. Hinton, P. Bakke, S. Beattie, A. Grier, P. Wagle,
and Q. Zhang. StackGuard: Automatic Adaptive Detection and Prevention of
Buﬀer-Overﬂow Attacks. In 7th USENIX Security Symposium, San Antonio, TX,
January 1998.
14. D.W. Binkley and K.B. Gallagher. Program Slicing. Advances in Computers,
43:1–50, 1996.
15. H.H. Feng, J.T. Giﬃn, Y. Huang, S. Jha, W. Lee, and B. P. Miller. Formaliz-
ing sensitivity in static analysis for intrusion detection. In IEEE Symposium on
Security and Privacy, pages 194–, 2004.
16. S. Hittel. Detection of jump-based ids-evasive noop sleds using snort, May 2002.
http://aris.securityfocus.com/rules/020527-Analysis-Jump-NOOP.pdf.
17. S. Horwitz, J. Prins, and T. Reps. Integrating noninterfering versions of programs.
ACM Trans. Program. Lang. Syst., 11(3):345–387, 1989.
18. R. Jones and P. Kelly. Bounds Checking for C. http://www-ala.doc.ic.ac.uk/
phjk/BoundsChecking.html.
19. J. Jung, V. Paxson, A. W. Berger, and H. Balakrishnan. Fast portscan detection
using sequential hypothesis testing. In IEEE Symposium on Security and Privacy,
May 2004.
20. M. Kamkar. An overview and comparative classiﬁcation of program slicing tech-
niques. J. Syst. Softw., 31(3):197–214, 1995.
21. H.-A. Kim and B. Karp. Autograph: Toward automated, distributed worm signa-
ture detection. In Proceedings of the 13th USENIX Security Symposium (Security
’04), 2004.
22. O. Kolesnikov, D. Dagon, and W. Lee. Advanced polymorphic worms: Evading
ids by blending in with normal traﬃc. Technical Report GIT-CC-04-15, College of
Computing, Georgia Institute of Technology, 2004.
23. N. Krawetz. The Honeynet ﬁles: Anti-honeypot technology. IEEE Security and
Privacy, 2(1):76–79, Jan-Feb 2004.
24. C. Kruegel, W. Robertson, F. Valeur, and G. Vigna. Static disassembly of obfus-
cated binaries. In Proceedings of the 13th USENIX Security 2004 (Security ’04),
2004.
25. W. Landi. Undecidability of Static Analysis. ACM Letters on Programming Lan-
guages and Systems, 1(4):323–337, December 1992.
26. C. Linn and S. Debray. Obfuscation of executable code to improve resistance
In 10th ACM Conference of Computer and Communications
to static analysis.
Security (CCS), 2003.
308
R. Chinchani and E. van den Berg
27. LURHQ Threat Intelligence Group. Phatbot trojan analysis. http://www.lurhq.
com/phatbot.html
28. M. Weiser. Program Slicing: Formal, Psychological and Practical Investigations
of an Automatic Program Abstraction Method. PhD thesis, The University of
Michigan, Ann Arbor, Michigan, 1979.
29. D. Moore, V. Paxson, S. Savage, C. Shannon, S. Staniford, and N. Weaver. Inside
the slammer worm. IEEE Security and Privacy, 1(4):33–39, 2003.
30. K.J. Ottenstein and L.M. Ottenstein. The program dependence graph in a software
development environment. SIGPLAN Not., 19(5):177–184, 1984.
31. A. Pasupulati, J. Coit, K. Levitt, S. Wu, S. Li, R. Kuo, and K. Fan. Butter-
cup: On network-based detection of polymorphic buﬀer overﬂow vulnerabilities. In
9th IEEE/IFIP Network Operation and Management Symposium (NOMS 2004) to
appear, Seoul, S. Korea, May 2004.
32. G. Ramalingam. The Undecidability of Aliasing. ACM Transactions on Program-
ming Languages and Systems, 16(5):1467–1471, 1994.
33. S. Staniford, V. Paxson, and N. Weaver. How to 0wn the internet in your spare
time, 2002.
34. F. Tip. A survey of program slicing techniques. Technical Report CS-R9438, CWI
(Centre for Mathematics and Computer Science), Amsterdam, The Netherlands,
1994.
35. T. Toth and C. Kr¨ugel. Accurate buﬀer overﬂow detection via abstract payload
In Recent Advances In Intrusion Detection (RAID), pages 274–291,
execution.
2002.
36. J. Twycross and M.M. Williamson. Implementing and testing a virus throttle. In
Proceedings of the 12th Usenix Security Symposium (Security ’03), 2003.
37. D. Wagner and D. Dean. Intrusion detection via static analysis. In SP ’01: Proceed-
ings of the IEEE Symposium on Security and Privacy, page 156. IEEE Computer
Society, 2001.
38. K. Wang and S. J. Stolfo. Anomalous payload-based network intrusion detection.
In Recent Advances In Intrusion Detection (RAID), pages 203–222, 2004.
39. N. Weaver, V. Paxson, S. Staniford, and R. Cunningham. A taxonomy of computer
worms. In First ACM Workshop on Rapid Malcode (WORM), 2003.
40. N. Weaver, S. Staniford, and V. Paxson. Very fast containment of scanning worms.
In USENIX Security Symposium, pages 29–44, 2004.
41. N. Weaver, S. Staniford, and V. Paxson. Very fast containment of scanning worms.
In USENIX Security Symposium, pages 29–44, 2004.
42. C.C. Zou, L. Gao, W. Gong, and D. Towsley. Monitoring and early warning for
internet worms. In CCS ’03: Proceedings of the 10th ACM conference on Computer
and communications security, pages 190–199. ACM Press, 2003.
43. C.C. Zou, W. Gong, and D. Towsley. Code red worm propagation modeling and
analysis. In Proceedings of the 9th ACM conference on Computer and communica-
tions security, pages 138–147. ACM Press, 2002.