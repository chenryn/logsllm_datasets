title:Detection of Interactive Stepping Stones: Algorithms and Confidence
Bounds
author:Avrim Blum and
Dawn Xiaodong Song and
Shobha Venkataraman
Detection of Interactive Stepping Stones:
Algorithms and Conﬁdence Bounds
Avrim Blum, Dawn Song, and Shobha Venkataraman
Carnegie Mellon University, Pittsburgh, PA 15213
{avrim,shobha}@cs.cmu.edu, PI:EMAIL
Abstract. Intruders on the Internet often prefer to launch network in-
trusions indirectly, i.e., using a chain of hosts on the Internet as relay
machines using protocols such as Telnet or SSH. This type of attack is
called a stepping-stone attack. In this paper, we propose and analyze al-
gorithms for stepping-stone detection using ideas from Computational
Learning Theory and the analysis of random walks. Our results are the
ﬁrst to achieve provable (polynomial) upper bounds on the number of
packets needed to conﬁdently detect and identify encrypted stepping-
stone streams with proven guarantees on the probability of falsely accus-
ing non-attacking pairs. Moreover, our methods and analysis rely on mild
assumptions, especially in comparison to previous work. We also examine
the consequences when the attacker inserts chaﬀ into the stepping-stone
traﬃc, and give bounds on the amount of chaﬀ that an attacker would
have to send to evade detection. Our results are based on a new approach
which can detect correlation of streams at a ﬁne-grained level. Our ap-
proach may also apply to more generalized traﬃc analysis domains, such
as anonymous communication.
Keywords: Network intrusion detection. Evasion. Stepping stones. In-
teractive sessions. Random walks.
1 Introduction
Intruders on the Internet often launch network intrusions indirectly, in order to
decrease their chances of being discovered. One of the most common methods
used to evade surveillance is the construction of stepping stones. In a stepping-
stone attack, an attacker uses a sequence of hosts on the Internet as relay ma-
chines and constructs a chain of interactive connections using protocols such as
Telnet or SSH. The attacker types commands on his local machine and then the
commands are relayed via the chain of “stepping stones” until they ﬁnally reach
the victim. Because the ﬁnal victim only sees traﬃc from the last hop of the
chain of the stepping stones, it is diﬃcult for the victim to learn any informa-
tion about the true origin of the attack. The chaotic nature and sheer volume
of the traﬃc on the Internet makes such attacks extremely diﬃcult to record or
trace back.
To combat stepping-stone attacks, the approach taken by previous research
(e.g., [1–4]), and the one that we adopt, is to instead ask the question “What
E. Jonsson et al. (Eds.): RAID 2004, LNCS 3224, pp. 258–277, 2004.
c(cid:1) Springer-Verlag Berlin Heidelberg 2004
Detection of Interactive Stepping Stones: Algorithms and Conﬁdence Bounds
259
can we detect if we monitor traﬃc at the routers or gateways?” That is, we
examine the traﬃc that goes in and out of routers, and try to detect which
streams, if any, are part of a stepping-stone attack. This problem is referred
to as the stepping-stone detection problem. A stepping-stone monitor analyzes
correlations between ﬂows of incoming and outgoing traﬃc which may suggest
the existence of a stepping stone. Like previous approaches, in this paper we
consider the detection of interactive attacks: those in which the attacker sends
commands through the chain of hosts to the target, waits for responses, sends
new commands, and so on in an interactive session. Such traﬃc is characterized
by streams of packets, in which packets sent on the ﬁrst link appear on the next
a short time later, within some maximum tolerable delay bound ∆. Like previous
approaches, we assume traﬃc is encrypted, and thus the detection mechanisms
cannot rely on analyzing the content of the streams. We will call a pair of streams
an attacking pair if it is a stepping-stone pair, and we will call a pair of streams
a non-attacking pair if it is not a stepping-stone pair.
Researchers have proposed many approaches for detecting stepping stones
in encrypted traﬃc. (e.g., [1–3]. See more detailed related work in Section 2.)
However, most previous approaches in this area are based on ad-hoc heuristics
and do not give any rigorous analysis that would provide provable guarantees of
the false positive rate or the false negative rate [2, 3]. Donoho et al. [4] proposed a
method based on wavelet transforms to detect correlations of streams, and it was
the ﬁrst work that performed rigorous analysis of their method. However, they do
not give a bound on the number of packets that need to be observed in order to
detect attacks with a given level of conﬁdence. Moreover, their analysis requires
the assumption that the packets on the attacker’s stream arrive according to
a Poisson or a Pareto distribution – in reality, the attacker’s stream may be
arbitrary. Wang and Reeves [5] proposed a watermark-based scheme which can
detect correlation between streams of encrypted packets. However, they assume
that the attacker’s timing perturbation of packets is independent and identically
distributed (iid), and their method breaks when the attacker perturbs traﬃc in
other ways.
Thus, despite the volume of previous work, an important question still re-
mains open: how can we design an eﬃcient algorithm to detect stepping-stone
attacks with (a) provable bounds on the number of packets that need to be mon-
itored, (b) a provable guarantee on the false positive and false negative rate, and
(c) few assumptions on the distributions of attacker and normal traﬃc?
The paper sets oﬀ to answer this question. In particular, in this paper we use
ideas from Computational Learning Theory to produce a strong set of guarantees
for this problem:
Objectives: We explicitly set our objective to be to distinguish attacking pairs
from non-attacking pairs, given our fairly mild assumptions about each. In
contrast, the work of Donoho et al. [4] detects only if a pair of streams
is correlated. This is equivalent to our goal if one assumes non-attacking
pairs are perfectly uncorrelated, but that is not necessarily realistic and
our assumptions about non-attacking pairs will allow for substantial coarse-
260
Avrim Blum, Dawn Song, and Shobha Venkataraman
grained correlation among them. For example, if co-workers work and take
breaks together, their typing behavior may be correlated at a coarse-grained
level even though they are not part of any attack. Our models allow for this
type of behavior on the part of “normal” streams, and yet we will still be
able to distinguish them from true stepping-stone attacks.
Fewer assumptions: We make very mild assumptions, especially in compar-
ison with previous work. For example, unlike the work by Donoho et al.,
our algorithm and analysis do not rely on the Poisson or Pareto distribu-
tion assumption on the behavior of the attacking streams. By modeling a
non-attack stream as a sequence of Poisson processes with varying rates and
over varying time periods, our analysis results can apply to almost any dis-
tribution or pattern of usage of non-attack and attack streams. This model
allows for substantial high-level correlation among non-attackers.
Provable bounds: We give the ﬁrst algorithm for detecting stepping-stone at-
tacks that provides (a) provable bounds on the number of packets needed
to conﬁdently detect and identify stepping-stone streams, and (b) provable
guarantees on false positive rates. Our bounds on the number of packets
needed for conﬁdent detection are only quadratic in terms of certain natural
parameters of the problem, which indicates the eﬃciency of our algorithm.
Stronger results with chaﬀ: We also propose detection algorithms and give
a hardness result when the attacker inserts “chaﬀ” traﬃc in the stepping-
stone streams. Our analysis shows that our detection algorithm is eﬀective
when the attacker inserts chaﬀ that is less than a certain threshold fraction.
Our hardness results indicate that when the attacker can insert chaﬀ that
is more than a certain threshold fraction, the attacker can make the attack-
ing streams mimic two independent random processes, and thus completely
evade any detection algorithm. Note that our hardness analysis will apply
even when the monitor can actively manipulate the timing delay. Our results
on the chaﬀ case are also a signiﬁcant advance from previous work. The work
of Donoho et al. [4] assumes that the chaﬀ traﬃc inserted by the attacker
is a Poisson process independent from the non-chaﬀ traﬃc in the attacking
stream, while our results make no assumption on the distribution of the chaﬀ
traﬃc.
The type of guarantee we will be able to achieve is that given a conﬁdence
parameter δ, our procedure will certify a pair as attacking or non-attacking
with error probability at most δ, after observing a number of packets that is
only quadratic in certain natural parameters of the problem and logarithmic
in 1/δ. Our approach is based on a connection to sample-complexity bounds
in Computational Learning Theory. In that setting, one has a set or sequence
of hypotheses h1, h2, . . ., and the goal is to identify which if any of them has
a low true error rate from observing performance on random examples [6–8].
The type of question addressed in that literature is how much data does one
need to observe in order to ensure at most some given δ probability of failure.
In our setting, to some extent packets play the role of examples and pairs of
streams play the role of hypotheses, though the analogy is not perfect because
Detection of Interactive Stepping Stones: Algorithms and Conﬁdence Bounds
261
it is the relationship between packets that provides the information we use for
stepping-stone detection.
The high-level idea of our approach is that if we consider two packet streams
and look at the diﬀerence between the number of packets sent on them, then
this quantity is performing some type of random walk on the one-dimensional
line. If these streams are part of a stepping-stone attack, then by the maximum-
tolerable delay assumption, this quantity will never deviate too far from the
origin. However, if the two streams are not part of an attack, then even if the
streams are somewhat correlated, say because they are Poisson with rates that
vary in tandem, this walk will begin to experience substantial deviation from the
origin. There are several subtle issues: for example, our algorithm may not know
in advance what an attacker’s tolerable delay is. In addition, new streams may
be arriving over time, so if we want to be careful not to have false-positives, we
need to adjust our conﬁdence threshold as new streams enter the system.
Outline. In the rest of the paper, we ﬁrst discuss related work in Section 2, then
give the problem deﬁnition in Section 3. We then describe the stepping-stone
detection algorithm and conﬁdence bounds analysis in Section 4. We consider
the consequences of adding chaﬀ in Section 5. We ﬁnally conclude in Section 6.
2 Related Work
The initial line of work in identifying interactive stepping stones focused on
content-based techniques. The interactive stepping stone problem was ﬁrst for-
mulated and studied by Staniford and Heberlein [1]. They proposed a content-
based algorithm that created thumbprints of streams and compared them, look-
ing for extremely good matches. Another content-based approach, Sleepy Water-
mark Tracing, was proposed by Wang et al. [10]. These content-based approaches
require that the content of the streams under consideration do not change signif-
icantly between the streams. Thus, for example, they do not apply to encrypted
traﬃc such as SSH sessions.
Another line of work studies correlation of streams based on connection tim-
ings. Zhang and Paxson [2] proposed an algorithm for encrypted connection
chains based on periods of activity of the connections. They observed that in
stepping stones, the On-periods and Off-periods will coincide. They use this
observation to detect stepping stones, by examining the number of consecutive
Off-periods and the distance of the Off-periods. Yoda and Etoh [3] proposed
a deviation-based algorithm to trace the connection chains of intruders. They
computed deviations between a known intruder stream and all other concurrent
streams on the Internet, compared the packets of streams which have small de-
viations from the intruder’s stream, and utilize these analyses to identify a set
of streams that match the intruder stream. Wang et al. [11] proposed another
timing-based approach that uses the arrival and departure times of packets to
correlate connections in real-time. They showed that the inter-packet timing
characteristics are preserved across many router hops, and often uniquely iden-
tify the correlations between connections. These algorithms based on connection
262
Avrim Blum, Dawn Song, and Shobha Venkataraman
timings, however, are all vulnerable to active timing pertubation by the attacker
– they will not be able to detect stepping stones when the attacker actively
perturbs the timings of the packets on the stepping-stone streams.
We are aware of only two papers [4, 5] that study the problem of detecting
stepping-stone attacks on encrypted streams with the assumption of a bound on
the maximum delay tolerated by the attacker. In Section 1, we discuss the work
of Donoho et al. [4] in relation to our paper. We note that their work does not
give any bounds on the number of packets needed to detect correlation between
streams, or a discussion of the false positives that may be identiﬁed by their
method. Wang and Reeves [5] proposed a watermark-based scheme, which can
detect correlation between streams of encrypted packets. However, they assume
that the attacker’s timing perturbation of packets is independent and identically
distributed (iid). Our algorithms do not require such an assumption. Further,
they need to actively manipulate the inter-packet delays in order to embed and
detect their watermarks. In contrast, our algorithms require only passive moni-
toring of the arrival times of the packets.
Wang [12] examined the problem of determining the serial order of correlated
connections in order to determine the intrusion path, when given the complete
set of correlated connections.
3 Problem Deﬁnition
Our problem deﬁnition essentially mirrors that of Donoho et al. [4]. A stream is
a sequence of packets that belong to the same connection. We assume that the
attacker has a maximum delay tolerance ∆, which we may or may not know.
That is, for every packet sent in the ﬁrst stream, there must be a corresponding
packet in the second stream between 0 and ∆ time steps later. The notion of
maximum delay bound was ﬁrst proposed by Donoho et al. [4]. We also assume
that there is a maximum number of packets that the attacker can send in a
particular time interval t, which we call pt. We note that p∆ is unlikely to be
very large, since we are considering interactive stepping-stone attacks. As in prior
work, we assume that a packet on either stream maps to only one packet on the
other stream (i.e., packets are not combined or broken down in any manner).
Similar to previous work, we do not pay attention to the content or the sizes
of the packets, since the packets may be encrypted. We assume that the real-
time traﬃc delay between packets is very small compared to ∆, and ignore it
everywhere. We have a stepping-stone monitor that observes the streams going
through the monitor, and keeps track of the total number of packets on each
stream at each time of observation. We denote the total number of packets in
stream i by time t as Ni(t), or simply Ni if t is the current time step.
By our assumptions, for a pair of stepping-stone streams S1, S2, the following
two conditions hold for the true packets of the streams, i.e., not including chaﬀ
packets:
1. N1(t) ≥ N2(t).
Every packet in stream 2 comes from stream 1.
Detection of Interactive Stepping Stones: Algorithms and Conﬁdence Bounds
263
2. N1(t) ≤ N2(t + ∆).
All packets in stream 1 must go into stream 2 – i.e., no packets on stream
1 are lost enroute to stream 2, and all the packets on stream 1 arrive on
stream 2 within time ∆.
If the attacker sends no chaﬀ on his streams, then all the packets on a stepping
stone pair will obey the above two conditions.
We will ﬁnd it useful to think about the number of packets in a stream in
terms of the total number of the packets observed in the union of two streams:
in other words, viewing each arrival of a packet in the union of the two streams
as a “time step”. We will use N i(w) for the number of packets in stream i, when
there are a total of w packets in the union of the two streams.
In Section 4.1, we assume that a normal stream i is generated by a Poisson
process with a constant rate λi. In Section 4.2, we generalize this, allowing for
substantial high-level correlation between non-attacking streams. Speciﬁcally,
we model a non-attacking stream as a “Poisson process with a knob”, where
the knob controls the rate of the process and can be adjusted arbitrarily by
the user with time. That is, the stream is really generated by a sequence of
Poisson processes with varying rates for varying lengths of time. Even if two
non-attacking streams correlate by adjusting their knobs together – e.g., both
having a high rate at certain times and low rates at others – our procedure will
nonetheless (with high probability) not be fooled into falsely tagging them as an
attacking pair.
The guarantees produced by our algorithm will be described by two quanti-
ties:
– a monitoring time M measured in terms of total number of packets that
need to be observed on both streams, before deciding whether the pair of
streams is an attack pair, and
– a false-positive probability δ, given as input to the algorithm (also called
the conﬁdence level), that describes our willingness to falsely accuse a non-
attacking pair.
The guarantees we will achieve are that (a) any stepping-stone pair will be
discovered after M packets, and (b) any normal pair has at most a δ chance of
being falsely accused. Our algorithm will never fail to ﬂag a true attacking pair,
so long as at least M packets are observed. For instance, our ﬁrst result, Theorem
1, is that if non-attacking streams are Poisson, then M = 8p2
δ packets are
suﬃcient to detect a stepping-stone attack with false-positive probability δ. One
can also adjust the conﬁdence level with the number of pairs of streams being
monitored, to ensure at most a δ chance of ever falsely accusing a normal pair.
All logarithms in this paper are base 2. Table 1 summarizes the notation we
π log 1
∆
use in this paper.
264
Avrim Blum, Dawn Song, and Shobha Venkataraman
Table 1. Summary of notation
∆ maximum tolerable delay bound
p∆ maximum number of packets that may be sent in time interval ∆.
δ
Si
M number of packets that we need to observe on the union of the two streams
false positive probability
stream i
in the detection algorithms
Ni(t) number of packets sent on stream i in time interval t.
N i(w) number of packets sent on stream i when a total of w packets is present on
the union of the pair of stream under consideration.
4 Main Results: Detection Algorithms
and Conﬁdence Bounds Analysis
In this section, we give an algorithm that will detect stepping stones with a low
probability of false positives. We only consider streams that have no chaﬀ, which
means that every packet on the second stream comes from the ﬁrst stream, and
packets can only be delayed, not dropped. We will discuss the consequences of
adding chaﬀ in Section 5.
Our guarantees give a bound on the number of packets that need to be
observed to conﬁdently identify an attacker. These bounds have a quadratic de-
pendence on the maximum tolerable delay ∆ (or more precisely, on the number
of packets p∆ an attacker can send in that time frame), and a logarithmic de-
pendence on 1/δ, where δ is the desired false-positive probability. The quadratic
dependence on maximum tolerable delay comes essentially from the fact that
on average it takes Θ(p2) steps for a random walk to reach distance p from the
origin. Our basic bounds assume the value of p∆ is given to the algorithm (The-
orems 1 and 2); we then show how to remove this assumption, increasing the
monitoring time by only an O(log log p∆) factor (Theorem 3).
We begin in Section 4.1 by considering a simple model of normal streams –