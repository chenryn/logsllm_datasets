Tampering and Reverse Engineering on Android
When analyzing obfuscated code, annotating class names, method names, and other identifiers as you go along is a
good practice. Open the MainActivity class in the package sg.vantagepoint.uncrackable1 . The method verify is
called when you tap the "verify" button. This method passes user input to a static method called a.a , which returns a
boolean value. It seems plausible that a.a verifies user input, so we'll refactor the code to reflect this.
Right-click the class name (the first a in a.a ) and select Refactor -> Rename from the drop-down menu (or press
Shift-F6). Change the class name to something that makes more sense given what you know about the class so far.
For example, you could call it "Validator" (you can always revise the name later). a.a now becomes Validator.a .
Follow the same procedure to rename the static method a to check_input .
Congratulations, you just learned the fundamentals of static analysis! It is all about theorizing, annotating, and
gradually revising theories about the analyzed program until you understand it completely or, at least, well enough for
whatever you want to achieve.
Next, Ctrl+click (or Command+click on Mac) on the check_input method. This takes you to the method definition. The
decompiled method looks like this:
public static boolean check_input(String string) {
byte[] arrby = Base64.decode((String)"5UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc=", (int)0);
byte[] arrby2 = new byte[]{};
try {
arrby = sg.vantagepoint.a.a.a(Validator.b("8d127684cbc37c17616d806cf50473cc"), arrby);
arrby2 = arrby;
}sa
catch (Exception exception) {
Log.d((String)"CodeCheck", (String)("AES error:" + exception.getMessage()));
}
if (string.equals(new String(arrby2))) {
return true;
}
return false;
}
So, you have a Base64-encoded String that's passed to the function a in the package sg.vantagepoint.a.a (again,
everything is called a ) along with something that looks suspiciously like a hex-encoded encryption key (16 hex bytes
= 128bit, a common key length). What exactly does this particular a do? Ctrl-click it to find out.
public class a {
262
Tampering and Reverse Engineering on Android
public static byte[] a(byte[] object, byte[] arrby) {
object = new SecretKeySpec((byte[])object, "AES/ECB/PKCS7Padding");
Cipher cipher = Cipher.getInstance("AES");
cipher.init(2, (Key)object);
return cipher.doFinal(arrby);
}
}
Now you're getting somewhere: it's simply standard AES-ECB. Looks like the Base64 string stored in arrby1 in
check_input is a ciphertext. It is decrypted with 128bit AES, then compared with the user input. As a bonus task, try
to decrypt the extracted ciphertext and find the secret value!
A faster way to get the decrypted string is to add dynamic analysis. We'll revisit UnCrackable App for Android Level 1
later to show how (e.g. in the Debugging section), so don't delete the project yet!
Reviewing Disassembled Native Code
Following the example from "Disassembling Native Code" we will use different disassemblers to review the
disassembled native code.
radare2
Once you've opened your file in radare2 you should first get the address of the function you're looking for. You can do
this by listing or getting information i about the symbols s ( is ) and grepping ( ~ radare2's built-in grep) for some
keyword, in our case we're looking for JNI relates symbols so we enter "Java":
$ r2 -A HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so
...
[0x00000e3c]> is~Java
003 0x00000e78 0x00000e78 GLOBAL FUNC 16 Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI
The method can be found at address 0x00000e78 . To display its disassembly simply run the following commands:
[0x00000e3c]> e emu.str=true;
[0x00000e3c]> s 0x00000e78
[0x00000e78]> af
[0x00000e78]> pdf
╭ (fcn) sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI 12
│ sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI (int32_t arg1);
│ ; arg int32_t arg1 @ r0
│ 0x00000e78 ~ 0268 ldr r2, [r0] ; arg1
│ ;-- aav.0x00000e79:
│ ; UNKNOWN XREF from aav.0x00000189 (+0x3)
│ 0x00000e79 unaligned
│ 0x00000e7a 0249 ldr r1, aav.0x00000f3c ; [0xe84:4]=0xf3c aav.0x00000f3c
│ 0x00000e7c d2f89c22 ldr.w r2, [r2, 0x29c]
│ 0x00000e80 7944 add r1, pc ; "Hello from C++" section..rodata
╰ 0x00000e82 1047 bx r2
Let's explain the previous commands:
e emu.str=true; enables radare2's string emulation. Thanks to this, we can see the string we're looking for
("Hello from C++").
s 0x00000e78 is a seek to the address s 0x00000e78 , where our target function is located. We do this so that the
following commands apply to this address.
pdf means print disassembly of function.
Using radare2 you can quickly run commands and exit by using the flags -qc '' . From the previous steps
we know already what to do so we will simply put everything together:
263
Tampering and Reverse Engineering on Android
$ r2 -qc 'e emu.str=true; s 0x00000e78; af; pdf' HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so
╭ (fcn) sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI 12
│ sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI (int32_t arg1);
│ ; arg int32_t arg1 @ r0
│ 0x00000e78 0268 ldr r2, [r0] ; arg1
│ 0x00000e7a 0249 ldr r1, [0x00000e84] ; [0xe84:4]=0xf3c
│ 0x00000e7c d2f89c22 ldr.w r2, [r2, 0x29c]
│ 0x00000e80 7944 add r1, pc ; "Hello from C++" section..rodata
╰ 0x00000e82 1047 bx r2
Notice that in this case we're not starting with the -A flag not running aaa . Instead, we just tell radare2 to analyze
that one function by using the analyze function af command. This is one fo those cases where we can speed up our
workflow because you're focusing on some specific part of an app.
IDA Pro
We assume that you've successfully opened lib/armeabi-v7a/libnative-lib.so in IDA pro. Once the file is loaded,
click into the "Functions" window on the left and press Alt+t to open the search dialog. Enter "java" and hit enter.
This should highlight the Java_sg_vantagepoint_helloworld_MainActivity_stringFromJNI function. Double-click the
function to jump to its address in the disassembly Window. "Ida View-A" should now show the disassembly of the
function.
Not a lot of code there, but you should analyze it. The first thing you need to know is that the first argument passed to
every JNI function is a JNI interface pointer. An interface pointer is a pointer to a pointer. This pointer points to a
function table: an array of even more pointers, each of which points to a JNI interface function (is your head spinning
yet?). The function table is initialized by the Java VM and allows the native function to interact with the Java
environment.
With that in mind, let's have a look at each line of assembly code.
LDR R2, [R0]
264
Tampering and Reverse Engineering on Android
Remember: the first argument (in R0) is a pointer to the JNI function table pointer. The LDR instruction loads this
function table pointer into R2.
LDR R1, =aHelloFromC
This instruction loads into R1 the PC-relative offset of the string "Hello from C++". Note that this string comes directly
after the end of the function block at offset 0xe84. Addressing relative to the program counter allows the code to run
independently of its position in memory.
LDR.W R2, [R2, #0x29C]
This instruction loads the function pointer from offset 0x29C into the JNI function pointer table pointed to by R2. This is
the NewStringUTF function. You can look at the list of function pointers in jni.h, which is included in the Android NDK.
The function prototype looks like this:
jstring (*NewStringUTF)(JNIEnv*, const char*);
The function takes two arguments: the JNIEnv pointer (already in R0) and a String pointer. Next, the current value of
PC is added to R1, resulting in the absolute address of the static string "Hello from C++" (PC + offset).
ADD R1, PC
Finally, the program executes a branch instruction to the NewStringUTF function pointer loaded into R2:
BX R2
When this function returns, R0 contains a pointer to the newly constructed UTF string. This is the final return value, so
R0 is left unchanged and the function returns.
Automated Static Analysis
You should use tools for efficient static analysis. They allow the tester to focus on the more complicated business
logic. A plethora of static code analyzers are available, ranging from open source scanners to full-blown enterprise-
ready scanners. The best tool for the job depends on budget, client requirements, and the tester's preferences.
Some static analyzers rely on the availability of the source code; others take the compiled APK as input. Keep in mind
that static analyzers may not be able to find all problems by themselves even though they can help us focus on
potential problems. Review each finding carefully and try to understand what the app is doing to improve your
chances of finding vulnerabilities.
Configure the static analyzer properly to reduce the likelihood of false positives. and maybe only select several
vulnerability categories in the scan. The results generated by static analyzers can otherwise be overwhelming, and
your efforts can be counterproductive if you must manually investigate a large report.
There are several open source tools for automated security analysis of an APK.
QARK
Androbugs
JAADAS
MobSF
For enterprise tools, see the section "Static Source Code Analysis" in the chapter "Testing Tools".
265
Tampering and Reverse Engineering on Android
Dynamic Analysis
Dynamic Analysis tests the mobile app by executing and running the app binary and analyzing its workflows for
vulnerabilities. For example, vulnerabilities regarding data storage might be sometimes hard to catch during static
analysis, but in dynamic analysis you can easily spot what information is stored persistently and if the information is
protected properly. Besides this, dynamic analysis allows the tester to properly identify:
Business logic flaws
Vulnerabilities in the tested environments
Weak input validation and bad input/output encoding as they are processed through one or multiple services
Analysis can be assisted by automated tools, such as MobSF, while assessing an application. An application can be
assessed by side-loading it, re-packaging it, or by simply attacking the installed version.
Dynamic Analysis on Non-Rooted Devices
Non-rooted devices provide the tester with two benefits:
Replicate an environment that the application is intended to run on.
Thanks to tools like objection, you can patch the app in order to test it like if you were on a rooted device (but of
course being jailed to that one app).
In order to dynamically analyze the application, you can also rely on objection which is leveraging Frida. However, in
order to be able to use objection on non-rooted devices you have to perform one additional step: patch the APK to
include the Frida gadget library. Objection communicates then using a Python API with the mobile phone through the
installed Frida gadget.
In order to accomplish this, the following commands can set you up and running:
# Download the Uncrackable APK
$ wget https://raw.githubusercontent.com/OWASP/owasp-mstg/master/Crackmes/Android/Level_01/UnCrackable-Level1.a
pk
# Patch the APK with the Frida Gadget
$ objection patchapk --source UnCrackable-Level1.apk
# Install the patched APK on the android phone
$ adb install UnCrackable-Level1.objection.apk
# After running the mobile phone, objection will detect the running frida-server through the APK
$ objection explore
Debugging
So far, you've been using static analysis techniques without running the target apps. In the real world, especially when
reversing malware or more complex apps, pure static analysis is very difficult. Observing and manipulating an app
during run time makes it much, much easier to decipher its behavior. Next, we'll have a look at dynamic analysis
methods that help you do just that.
Android apps support two different types of debugging: Debugging on the level of the Java runtime with the Java
Debug Wire Protocol (JDWP), and Linux/Unix-style ptrace-based debugging on the native layer, both of which are
valuable to reverse engineers.
Debugging Release Apps
Dalvik and ART support the JDWP, a protocol for communication between the debugger and the Java virtual machine
(VM) that it debugs. JDWP is a standard debugging protocol that's supported by all command line tools and Java
IDEs, including jdb, JEB, IntelliJ, and Eclipse. Android's implementation of JDWP also includes hooks for supporting
extra features implemented by the Dalvik Debug Monitor Server (DDMS).
266
Tampering and Reverse Engineering on Android
A JDWP debugger allows you to step through Java code, set breakpoints on Java methods, and inspect and modify
local and instance variables. You'll use a JDWP debugger most of the time you debug "normal" Android apps (i.e.,
apps that don't make many calls to native libraries).
In the following section, we'll show how to solve the UnCrackable App for Android Level 1 with jdb alone. Note that
this is not an efficient way to solve this crackme. Actually you can do it much faster with Frida and other methods,
which we'll introduce later in the guide. This, however, serves as an introduction to the capabilities of the Java
debugger.
Debugging with jdb
The adb command line tool was introduced in the "Android Basic Security Testing" chapter. You can use its adb
jdwp command to list the process ids of all debuggable processes running on the connected device (i.e., processes
hosting a JDWP transport). With the adb forward command, you can open a listening socket on your host machine
and forward this socket's incoming TCP connections to the JDWP transport of a chosen process.
$ adb jdwp
12167
$ adb forward tcp:7777 jdwp:12167
You're now ready to attach jdb. Attaching the debugger, however, causes the app to resume, which you don't want.
You want to keep it suspended so that you can explore first. To prevent the process from resuming, pipe the suspend
command into jdb:
$ { echo "suspend"; cat; } | jdb -attach localhost:7777
Initializing jdb ...
> All threads suspended.
>
You're now attached to the suspended process and ready to go ahead with the jdb commands. Entering ? prints the
complete list of commands. Unfortunately, the Android VM doesn't support all available JDWP features. For example,
the redefine command, which would let you redefine a class' code is not supported. Another important restriction is
that line breakpoints won't work because the release bytecode doesn't contain line information. Method breakpoints
do work, however. Useful working commands include:
*classes: list all loaded classes
class/method/fields class id: Print details about a class and list its method and fields
locals: print local variables in current stack frame
print/dump expr: print information about an object
stop in method: set a method breakpoint
clear method: remove a method breakpoint
set lvalue = expr: assign new value to field/variable/array element
Let's revisit the decompiled code from the UnCrackable App for Android Level 1 and think about possible solutions. A
good approach would be suspending the app in a state where the secret string is held in a variable in plain text so you
can retrieve it. Unfortunately, you won't get that far unless you deal with the root/tampering detection first.
Review the code and you'll see that the method sg.vantagepoint.uncrackable1.MainActivity.a displays the "This in
unacceptable..." message box. This method creates an AlertDialog and sets a listener class for the onClick event.
This class (named b ) has a callback method will terminates the app once the user taps the “OK” button. To prevent
the user from simply canceling the dialog, the setCancelable method is called.
private void a(final String title) {
final AlertDialog create = new AlertDialog$Builder((Context)this).create();
create.setTitle((CharSequence)title);
create.setMessage((CharSequence)"This in unacceptable. The app is now going to exit.");
267
Tampering and Reverse Engineering on Android
create.setButton(-3, (CharSequence)"OK", (DialogInterface$OnClickListener)new b(this));
create.setCancelable(false);
create.show();
}
You can bypass this with a little run time tampering. With the app still suspended, set a method breakpoint on
android.app.Dialog.setCancelable and resume the app.
> stop in android.app.Dialog.setCancelable
Set breakpoint android.app.Dialog.setCancelable
> resume
All threads resumed.
>
Breakpoint hit: "thread=main", android.app.Dialog.setCancelable(), line=1,110 bci=0
main[1]
The app is now suspended at the first instruction of the setCancelable method. You can print the arguments passed
to setCancelable with the locals command (the arguments are shown incorrectly under "local variables").
main[1] locals
Method arguments:
Local variables:
flag = true
setCancelable(true) was called, so this can't be the call we're looking for. Resume the process with the resume
command.
main[1] resume
Breakpoint hit: "thread=main", android.app.Dialog.setCancelable(), line=1,110 bci=0
main[1] locals
flag = false
You've now reached a call to setCancelable with the argument false . Set the variable to true with the set
command and resume.
main[1] set flag = true
flag = true = true
main[1] resume
Repeat this process, setting flag to true each time the breakpoint is reached, until the alert box is finally displayed
(the breakpoint will be reached five or six times). The alert box should now be cancelable! Tap the screen next to the
box and it will close without terminating the app.
Now that the anti-tampering is out of the way, you're ready to extract the secret string! In the "static analysis" section,
you saw that the string is decrypted with AES, then compared with the string input to the message box. The method
equals of the java.lang.String class compares the string input with the secret string. Set a method breakpoint on
java.lang.String.equals , enter an arbitrary text string in the edit field, and tap the "verify" button. Once the
breakpoint is reached, you can read the method argument with the locals command.
> stop in java.lang.String.equals
Set breakpoint java.lang.String.equals
>
Breakpoint hit: "thread=main", java.lang.String.equals(), line=639 bci=2
main[1] locals
Method arguments:
Local variables:
other = "radiusGravity"
268
Tampering and Reverse Engineering on Android