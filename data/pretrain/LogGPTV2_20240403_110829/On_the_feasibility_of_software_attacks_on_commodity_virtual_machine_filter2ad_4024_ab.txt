for isolating and routing device interrupts to corresponding virtual
machines. More precisely, when VT-d is turned on, all the inter-
rupt requests (both MSI and legacy interrupts) are extended with a
source-id attribute to identify the device that issues the interrupt
request. Moreover, the new, remappable MSI format uses only
simple attributes such as the index value that points out an entry
in the so-called interrupt remapping table to ﬁnd a requested inter-
rupt vector. In this way, the device cannot call an arbitrary inter-
rupt vector directly, but only after the validation of the hardware.
After successful validation, interrupts are remapped by the hard-
ware module to the corresponding physical interrupt vectors with
the proper attributes (e.g., delivery mode). However, if Extended
Interrupt Mode (x2APIC mode) [27] is disabled, old, compatibil-
ity-format MSI interrupts can still be generated if VMM software
enables them during runtime.
2.5 A Closer Look at Commodity VMMs
Since direct device assignment has a large impact on the overall
system security and performance, we discuss that in more detail in
the case of the two VMMs we use in our tests: Xen and KVM.
Xen
Xen supports two types of passthrough modes: the software-only
Xen PCI passthrough for paravirtual guests, and the hardware IOMMU
based passthrough available for both paravirtualized and fully vir-
tualized (HVM) guests. The software-only paravirtual Xen PCI
passthrough requires VMM intervention to handle DMA requests [28].
From a security point of view, software-only paravirtual Xen PCI
passthrough gives full control over the device, which allows a com-
promised paravirtualized guest to write arbitrary machine memory
locations using a DMA attack.
In contrast to that, the hardware
IOMMU based passthrough allows for remapping all the DMA
requests by the corresponding DMA remapping hardware units.
As Xen enables device passthrough for HVM guests only when
hardware based IOMMU is turned on, it is a more secure solu-
tion. In this paper, we test only the hardware IOMMU based pass-
through model as this is the preferred conﬁguration in current pub-
lic clouds. In addition, the software-only paravirtual passthrough is
well-known to be insecure as it does not use a hardware IOMMU,
we therefore do not evaluate it in this paper.
KVM
KVM guests normally use either emulated devices or virtio devices
to perform I/O operations. Virtio is an efﬁcient I/O virtualization
abstraction layer that allows the development of paravirtualized
drivers for guests. Similarly to Xen, direct device assignment is
only allowed when the hardware based protection (either Intel VT-
d or AMD-V) is turned on. In this setting, PCI/PCIe devices can be
assigned directly to a guest VM, thus allowing these devices to be
used almost at native speed with minimal I/O overhead.
3. SETUP AND TEST CONFIGURATION
In this paper, we describe the implementation, validation, and
execution of three classes of software-based virtualization attacks
based on direct device assignments. The attacks we present are
based on abusing the PCI/PCIe conﬁguration space to generate de-
vice memory collisions, on performing unauthorized memory ac-
cess through DMA and MMIO regions, and on generating inter-
rupts to the VMM from a guest VM.
3.1 Threat Model
In our experiments, we run each attack against different hard-
ware and VMM conﬁgurations, according to two possible attack
scenarios.
In the ﬁrst scenario, we assume that the attacker has
full access to a guest machine conﬁgured with a pass-through de-
vice. This is a common setup for IaaS cloud providers that offer,
for example, direct access to video cards (e.g., Amazon EC2 Clus-
ter GPU).
In the second scenario, we assume that the attacker is able to
control or compromise the privileged VM (e.g., by exploiting vul-
nerabilities such as CVE-2008-3687, or CVE-2007-4993). Even
though this case is certainly more difﬁcult to achieve, it still repre-
sents an important threat model that needs to be carefully evaluated.
In fact, the privileged VM is often a large piece of software, there-
fore, it is more prone to contain vulnerabilities that can be exploited
by an attacker. However, unrestricted access to the privileged VM
307does not give full privileges over the physical machine [10]. For ex-
ample, VMMs (e.g., Xen) execute the privileged VM (Dom0) with
the role of a host OS, and strictly divide the physical address space
and privileges between Dom0 and the VMM. In other words, the
VMM is speciﬁcally designed to be protected against a malicious
privileged VM.
We also launched our attacks on KVM’s host OS to identify the
differences with Xen’s Dom0. However, we performed this test
only for completeness, as host OS privileges on KVM are equiva-
lent of having entire control over the VMM as well.
3.2 VMM and Hardware Setup
For our experiments, we installed the last versions of Xen and
KVM available at the time we ran our tests (i.e., Xen 4.2 and KVM
3.5). Table 1 shows the default boot settings for both VMMs and
the conﬁgurations we used in our tests.
Xen 4.2 came with a set of new virtual machine management
tools named XL that support passthrough devices by default. KVM
enables both DMA and Interrupt remapping by default, as well as
the x2APIC mode if it is supported by the hardware. x2APIC com-
bined with interrupt remapping is known to be a secure conﬁgu-
ration against interrupt attacks [9]. Device passthrough is instead
not enabled by default, but it can be manually turned on by the
administrator.
Properly conﬁguring a VMM can be a daunting and confusing
task, even for experienced system administrators. For example,
hardware IOMMU requires the support from the CPU, the BIOS,
and the motherboard chipset. Unfortunately, these dependencies
are not always correctly documented for VMMs. For example,
our original test machine was equipped with an i5-2400 CPU (with
IOMMU support), but contained a BIOS and chipset (H67) without
IOMMU support. Both KVM and Xen refused to put our network
card in passthrough mode in this setup. However, after updating
the BIOS to a new version with IOMMU support, KVM let us put
the device in passthrough mode. This means that in practice KVM
trusted the Advanced Conﬁguration and Power Management Inter-
face (ACPI) data structures reported by the updated BIOS, but did
not pay attention to the real chipset capabilities. This may carry
serious threat for integrated devices which have no PCIe Function
Level Reset (FLR) capabilities [29]. More precisely, an integrated
device assigned to a guest VM can be conﬁgured to send DMA
requests continuously to memory addresses belonging to the host
OS/privileged VM. While the device is assigned to the guest VM,
all these requests are blocked by the IOMMU hardware. When the
device is reassigned to the host OS/privileged VM, the VMM ﬁrst
resets the device via an FLR or bridge-level reset, and then recon-
ﬁgures the IOMMU hardware to allow device access to the host
OS/privileged VM memory. However, if the VMM cannot reset
the device (e.g., FLR capability is missing), the device keeps send-
ing DMA requests which now overwrite host OS/privileged VM
memory addresses.
In conclusion, KVM lets the administrator believe the device is
in a secure passthrough mode, while the support is actually incom-
plete. To prevent this issue, system administrators are advised to
carefully check whether the CPU, the BIOS and the motherboard
chipset support hardware IOMMU. This is a clear example of con-
ﬁgurations problems related to properly setting up passthrough de-
vices. For this reason, we executed our attacks on another ma-
chine with Intel i5-2500 CPU, Q67 chipset and Intel VT-d sup-
port enabled in the BIOS. The machine was equipped with an Intel
82579LM PCIe network card that was used as passthrough device
for the experiments. The guest OSs were running Linux kernel
2.6.32-5-amd64 and 3.5.0.
3.3 Results Overview
In the rest of the paper, we use an abbreviated notation to refer
to the scenario and the target of each attack. We use the following
notation:
• Guest-to-VMM (g⇒vmm) attacks.
This is the most critical scenario, in which an attacker con-
trolling a guest VM can launch an attack against the system
VMM.
• Guest-to-Host (g⇒h) attacks.
An attacker, with full control on a guest virtual machine, can
compromise the host OS/privileged VM. Even though it is
not as powerful as the previous one, the consequences of this
attack are often as serious.
• Host-to-VMM (h⇒vmm) attacks.
As we explained above, the VMM is often separated and pro-
tected from the privileged guest VM (e.g., Xen Dom0). In
this attack, an attacker who was able to gain control in the
privileged guest OS can escalate her privileges in the ma-
chine by launching an attack against the VMM. As we high-
lighted before, we tested our attacks on KVM host OS only
to show the differences with the Xen Dom0 case.
• Guest-to-Guest (g⇒g) attacks.
These attacks aim at compromising a target guest VM start-
ing from a separate guest VM controlled by the attacker.
• Guest-to-Self (g(cid:9)) and Host-to-Self (h(cid:9)) attacks.
These are less severe scenarios in which the attack is con-
ﬁned inside the attacker’s virtual machine. For this reason,
we also refer to these attacks as intra-guest and intra-host at-
tacks. In most of the cases, since the attacker has already root
privileges on the same virtual machine, the consequences of
these attacks are negligible. However, we still report these
cases for completeness. Also, they may still be relevant if the
attacker does not fully control the machine, but can exploit
a vulnerability that allow her to run the attack, or the sys-
tem has to provide some security properties in an untrusted
environment (e.g., as presented by Zhou et al. [30]).
The previous classiﬁcation is based only on the originator and
target of each attack. We intentionally use this approach, instead
of a more traditional one based on the possible consequences of
each attack (e.g., Denial of Service (DoS), code execution, infor-
mation leakage, etc), because it better summarizes the results of
our tests in terms of violating the isolation property. In fact, our
main goal is to clarify which attack works under which conditions.
The fact that it can be later used to DoS the VMM, or steal some
information from other virtual machines, highly depends on other
environmental conditions that are not under our control (e.g., the
presence of other vulnerabilities in the system, and the capabilities
and motivation of the attacker). However, we will brieﬂy describe
and comment on the possible consequences of each successful at-
tack, case by case, in the next three sections.
All the attacks, presented in this paper are summarized in Ta-
ble 2. The second column (Ref ) reports the original source in which
the attack was ﬁrst proposed. The table also shows the Previous
Status of the attack, (i.e., whether we found any evidence that the
attack had been successfully implemented before our study). A
value of NC (not conﬁrmed) means that the attack was only theo-
retically described, C (conﬁrmed) means that it was already tested
in practice by other authors, and NEW means that the attack is pro-
posed for the ﬁrst time in this paper.
308Feature
VT-d DMA Remapping
VT-d Dom0 DMA passthrough
VT-d interrupt remapping
Direct Conﬁguration Space Access
x2APIC mode on the Host
Default Values
Xen
KVM








NA

Dom0 HVM-1 HVM-2 HVM-3 HVM-4
Our Xen Setup
Our KVM Setup
Host OS HVM-1








*






















NA



Table 1: Test Conﬁgurations. The table shows both the default and test conﬁgurations in our Xen 4.2 and KVM 3.5 setup on an Intel
Core (Quad) i5-2500 CPU 3,30 GHz CPU and Q67 motherboard chipset. While the Default Values column is placed only for comparison
purposes, the Our Xen Setup and Our KVM Setup columns summarize those conﬁgurations we tested our attacks on. For example, the
HVM-4 conﬁguration on Xen means that all the hardware protection features were enabled in this conﬁguration, but we did not give direct
conﬁguration space access to the passthrough device being attached to the Xen guest VM. The sign NA, refers to a cell that cannot be
evaluated in the given conﬁguration.
*Direct PIO access to device conﬁguration memory was granted explicitly.
Previous
Status
Host HVM-1
Xen
HVM-2
HVM-3
HVM-4
Host
HVM-1
KVM
Attack
PCI/PCIe Conﬁguration Attacks
PCI/PCIe conﬁg. space access (PIO)
PCIe conﬁg. space access (MMIO)
I/O port overlapping (PIO)
I/O memory overlapping (MMIO)
Unauthorized Memory Access
Unauthorized MMIO
memory region access
DMA
Ref.
[31]
-
[30]
[30]
[30]
[10]
C*