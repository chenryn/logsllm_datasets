probability.
The proofs of the preceding two lemmas follow analogously to
the proofs of Lemma 4.9 and Lemma 4.10. The next lemma estab-
lishes the honest veri(cid:27)er zero-knowledge property.
Lemma 4.13. If k > (cid:96) + t, (cid:104)P,V(cid:105) is an (honest veri(cid:27)er, perfect)
zero-knowledge IPCP.
Proof: To demonstrate zero-knowledge against honest veri(cid:27)er,
we need to provide a simulator S that can given the randomness
provided by the honest veri(cid:27)er V, be able to generate a transcript.
For every h ∈ [σ], the simulator (cid:27)rst generates:

such that
c∈[(cid:96)] qadd
h (ζc) = 0.
c∈[(cid:96)] qa
• random polynomial qadd
of degree  ni + s and k > (cid:96) + t. Then protocol ZKIPCP(C, F) satis(cid:27)es
the following:
• Completeness: If α is such that C(α) = 1 and oracle π is
generated honestly as described in the protocol, then
Pr[(P(C, w),Vπ(C)) = 1] = 1.
• Soundness: If there is no α is such that C(α) = 1, then for
every (unbounded) prover strategy P∗ and every ˜π ∈ F4mn,
Pr[(P∗,V ˜π(x)) = 1] ≤ (e + 6)/|F|σ + (1 − e/n)t + 5((e +
2k)/n)t .
• Zero Knowledge: For every adversary veri(cid:27)er V∗, there
exists a simulator S such that the output of SV∗(C) is dis-
tributed identically to the view ofV in the(P(C, w),Vπ(C)).
• Complexity: The number of (cid:27)eld F operations performed is
poly(|C|, n). The number of (cid:27)eld elements communicated by
P to V is σ · n + 4 · σ · (k + (cid:96) − 1) + σ · (2 · k − 1) whereas
V reads t symbols from F4m+5σ .
5 FROM ZKIPCP TO ZK
In this section we describe variants of known transformations from
(sublinear) zero-knowledge PCP to (sublinear) zero-knowledge ar-
gument. The latter can either be interactive using collision-resistant
hash functions, or non-interactive in the random oracle model.
5.1 The Interactive Variant
General transformations from (non-interactive) ZKPCP to (interac-
tive) ZK arguments that make a black-box use of collision-resistant
hash functions were given in [31, 34]. Here we address the more
general case of ZKIPCP, where in addition to the proof oracle there
is additional interaction between the prover and the veri(cid:27)er.
Using the ZKIPCP, an honest-veri(cid:27)er ZK protocol proceeds as
follows. The prover commits to each entry of the proof oracle using
a statistically hiding commitment scheme and then compresses the
commitment using a Merkle hash tree (cf. Section 2.1). Note that
both steps can be realized by making a black-box use of any family
H of collision-resistant hash functions. The rest of the ZK protocol
mimics the ZKIPCP, where the prover opens the committed values
that correspond to the veri(cid:27)er’s queries. Malicious veri(cid:27)ers can
be handled using standard techniques, as done in [31, 34]. See full
version for more details.
The communication complexity of the ZK argument includes the
communication complexity of the ZKIPCP protocol and communi-
cation resulting from committing the oracle Π and decommitting
to the queries Q.
5.2 The Non-Interactive Variant
It is possible to directly compile our previous protocol into a non-
interactive protocol using a random oracle, where the veri(cid:27)er’s
messages are emulated by applying the random oracle on the partial
transcript in each round following the Fiat-Shamir transform [19]. A
formal description and analysis of this transformation is presented
in [9] for interactive oracle proofs (IOP) model which generalizes
(public-coin) IPCP.
In slight more detail, in this transformation the prover uses the
random oracle to generate the veri(cid:27)er’s messages and complete the
execution (computing its own messages) based on the emulated
veri(cid:27)er’s messages, where instead of using an oracle, the prover
commits to its proof and messages using Merkle hash trees. Com-
pleteness follows directly. If we start with an IOP that additionally
is zero-knowledge (ZKIPCP in our case), [9] show that this trans-
formation preserves (statistical) zero-knowledge property. Namely,
the resulting protocol can be proved to be zero-knowledge in the
random-oracle model.
In [9], the soundness of the transformed protocol is shown to
essentially match the soundness of the original protocol up to an
2 and 2−λ
additive term that roughly depends on the product of q
where q is an upper bound on the number of queries made to the
random oracle by a malicious prover and λ is the output length
of the random oracle. More precisely, [9] relates the soundness of
the transformed protocol to the state restoration soundness of the
underlying IPCP and collision-probability of queries to the random
oracle. State-restoration soundness refers to the soundness of the
IOP protocol against cheating prover strategies that may rewind
the veri(cid:27)er back to any previously seen state, where every new
continuation from a state invokes the next-message function of
the veri(cid:27)er with fresh randomness. In [9], they show that for any
(IOP) the state-restoration soundness of an IOP protocol is bounded
by(cid:0) T
k(x)(cid:1) · (x) and the soundness of the transformed protocol is
(cid:0) T
k(x)(cid:1) · (x) + 3(T
2 + 1)· 2−λ where T bounds the number of queries
made by cheating provers to the random oracle, k(x) is the round
complexity of the IOP and (x) is the (standard) soundness of the
IOP.
In the full version, we tighten the analysis presented in [9] for
the particular ZKIPCP constructed in Section 4.7 and show that the
2 + 1) · 2−λ
soundness of the transformed protocol is T · (x) + 3(T
where (x) is the soundness of the ZKIPCP, T bounds the number
of queries made by cheating provers to the random oracle and λ is
the output length of the random oracle.
5.3 Sublinear Zero-Knowledge Argument
In this section, we describe how to set the parameters of our zero-
knowledge argument protocol to obtain communication that is
sublinear in the circuit size. We consider (cid:27)rst an arithmetic circuit
over a large (cid:27)eld F. Following our transformation, the communica-
tion complexity of the zero-knowledge protocol that is compiled
based on our ZKIPCP is
[n · σ + 4 · σ · (k + (cid:96) − 1) + σ · (2 · k − 1)
+ t · (4 · m + 5 · σ)] · (cid:100)log |F|(cid:101) + t · (cid:100)log n(cid:101) · h
where h is the output length of the hash-function. For security
parameter κ, when F is large (i.e. |F| > O(2κ)) we can set σ = 1
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2099sκ) and m = O((cid:112)s/κ). Over-
for 2−κ-security. The other terms in the soundness are (1 − e/n)t
and ((e + 2k)/n)t where e  30000 over a (cid:27)nite (cid:27)eld F, |F| ≥ 2128 with soundness er-
ror 2−40 consists of roughly 95√
s elements
under Conjecture 4.1). If we want security 2−80, the communication
is roughly 140√
Optimizing for Boolean circuits requires additional e(cid:29)ort. In this
case there is yet another degree of freedom, namely the (cid:27)eld size.
The only constraint on the (cid:27)eld size is that there are su(cid:28)ciently
circuits the optimal communication complexity is O(k ·(cid:112)s log s)
many evaluation points, namely, we need |F| ≥ (cid:96)+n. For a given sta-
tistical security parameter κ, we can show that for su(cid:28)ciently large
where |F| = O(√
s). For smaller circuits, the optimal value requires
a more careful analysis as the low order terms are signi(cid:27)cant and
we present our results in the next section.
s (cid:27)eld elements (or 70√
s under Conjecture 4.1).
s (or 120√
5.4 Multi-Instance Amortization
If we want to prove that C(xi ,·) is satis(cid:27)able for N public inputs xi,
we can simplify our ZKIPCP construction as follows. The prover
(cid:27)rst computes the combined witness w = w1, . . . , wN that is com-
prised of N witnesses, each is computed as in the single instance
case. Next, it arranges the witnesses in blocks of size (cid:96) = N ,
where block j contains the jth bits of each of the N witnesses. The
public inputs xi de(cid:27)ne public blocks. The number of non-public
blocks equals the size of the witness of a single instance, which is
m = |wi| = O(s). The prover then encodes the blocks of messages
into U ∈ Lm.
Even for moderately large N , the multi-instance variant provides
signi(cid:27)cant savings in both computational and communication costs.
This is because we do not need to rearrange the wire values as we
do in the single instance case. The total communication complexity
is
[n · σ + 4 · σ · (2N + t) + 2 · σ · (N + t − 2)+
t · (4 · s + 5 · σ)] · (cid:100)log |F|(cid:101) + t · (cid:100)log n(cid:101) · h.
For su(cid:28)ciently large (cid:27)elds, we can set t = O(κ) where if N >
2), then the proof length is shorter than sN bits. Note that this
O(κ