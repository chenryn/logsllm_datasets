Fig. 1: Overview of FLEXDROID’s design. The gray boxes represent
FLEXDROID’s modiﬁcation of the existing Android components and
the gray-stripped boxes represent new components that FLEXDROID
introduced for ﬁne-grained permission checking for third-party li-
braries. In FLEXDROID, all requests to resources will be checked
based on the ﬁne-grained module (host app or third-party libraries)
and the app-speciﬁed manifest.
17.1% of 295 third-party libraries use native code through JNI
(see Table II). These tight integration and dynamic behavior
of off-the-shelf libraries make the state-of-the-art analysis
or enforcement challenging. In FLEXDROID, we attempt to
provide a practical yet strong security mechanism to isolate
such third-party libraries.
Technique
Class Loading
Reﬂection
Class Inheritance
JNI
Out of 295 libs
27.9%
49.6%
71.5%
17.1%
TABLE II: Java language techniques used in third-party libraries.
C. Threat Model
FLEXDROID assumes a strong adversary: third-party li-
braries are potentially malicious, their code and logic are not
directly visible to app developers (e.g., obfuscated), and they
might use dynamic features of the Java language. However,
app developers explicitly know what third-party libraries are
for (that is why app developers want to embed them in the
ﬁrst place). Given a high-level functional description (e.g., ad
or analytics) and perhaps a manifest provided by a third-party
library, app developers should be able to have enough freedom
to adjust the manifest and seamlessly integrate them without
compromising usability.
IV. FLEXDROID DESIGN
A. Overview
FLEXDROID targets at a new permission system that ad-
justs the permissions of Android apps dynamically so as to
enforce ﬁne-grained access controls for untrusted application
modules (i.e, third-party libraries).
A module is a collection of code. FLEXDROID uses the
module as the unit of trust, while an entire app (or a process)
4
UserspaceKernelThrid-party lib(e.g., Paypal)Third-party lib(e.g., Facebook)AppManifest(using JNI)DVM(§4.4)DVMSystemservicesPerm. checkNativeservicesPerm. checkACLcheckAccessingGID-based resourceAccessingpermission-based resourceFlexDroid Kernel(§4.2, §4.3)Access requestCall-stack inspection
Fig. 2: An example rule in an app’s manifest that allows a third-party library to access contacts, sdcard and the Internet.
is the unit of trust in the Android’s permission system. In
FLEXDROID, the boundary of a module aligns with either
a class or a method. Key features of FLEXDROID are as
follows (see Figure 1). (1) App developers specify a set of
permissions for each individual module in the manifest. (2)
Upon each request for resource access, FLEXDROID identiﬁes
the context of execution (i.e., a call chain of modules leading
to the current execution) by inspecting the Dalvik call stack.
(3) FLEXDROID then determines whether to accept or decline
the request according to the permissions commonly granted to
the modules.
Achieving the above features for a wide range of Android
apps presents several challenges:
Secure inter-process stack inspection. FLEXDROID relies on
call stack trace to mediate access from untrusted modules,
while conducting access control in a separate address space
from the modules. Thus, FLEXDROID should provide a mech-
anism to utilize the call stack trace across the process boundary
(see §IV-B).
Integrity of stack principal. Preserving the integrity of Dalvik
call stack and stack tracer is crucial for correctness. It is,
however, very challenging with the use of native code via Java
Native Interface (JNI). Malicious third-party libraries may use
native code to tamper with Dalvik’s data memory, for example,
to counterfeit call stack frames directly. Therefore, it is critical
to provide a tamper-resistant memory protection mechanism
for accuracy of FLEXDROID permission system (see §IV-C).
Handling dynamic code execution. There are various ways
of dynamic code execution in Java, which could blur the
boundary of modules. For instance, Java reﬂection can be
used to enable dynamic code generation and execution across
classes, and code can be executed on a new thread with Java
thread creation. These make it very complicated to identify
module boundaries clearly. Since FLEXDROID aims to support
accurate ﬁne-grained access control for individual modules, it
should be able to adjust the permissions of modules dynami-
cally when the modules are modiﬁed at run time for execution
(see §IV-D).
to
addressing
the
above
In
addition
in the form of simple XML manifest rules,
challenges,
FLEXDROID also aims to offer a high level of usability. To
this end, FLEXDROID provides developers with programming
interfaces,
to
restrict
third-party libraries’ privileges. Figure 2 shows an
example rule in FLEXDROID’s policy. Using the flexdroid
tag, developers can specify a third-party library of interest and
conﬁgure that library’s privileges with the allow tag. Inspired
by [20, 33], FLEXDROID also provides a mockOnException
attribute to enable developers to choose whether FLEXDROID
should offers mock data (e.g., fake IMEI code) upon a request
for an unauthorized resource.
B. Secure Inter-Process Stack Inspection
The Android permission system conducts access control
outside the process boundary of an app of interest. This is
mainly because a signiﬁcant portion of Android apps make
use of native code for various reasons. If permission checking
is performed inside the Dalvik virtual machine, just as in the
traditional JVM’s security architecture [31], native code can
circumvent permission checking through low-level system calls
or tampering with the Dalvik’s data memory. Thus, Android
performs permission checking in a separate address space to
protect memory tampering or in the kernel to secure the use
of low-level system calls, and FLEXDROID does so too.
This entails a secure inter-process stack inspection mecha-
nism for FLEXDROID. FLEXDROID requires extra information
(i.e, Dalvik call trace) to understand the current execution
context for ﬁne-grained access control. Thus, for each app,
FLEXDROID creates a single special-purpose thread, called
stack tracer, that sends Dalvik call trace data to the system’s
permission checker upon request. It is important to note that a
malicious third-party library may pretend to be a stack tracer
to send a fake call trace data. To protect against such a forgery,
FLEXDROID provides a secure communication channel, stack
transmission channel, between individual stack tracer threads
and the permission checkers. FLEXDROID restricts each app
to create only one trusted stack tracer, and ignores all attempts
to use the stack transmission channel except those by the stack
tracer.
To guarantee the authenticity of stack tracer and its enroll-
ment for the stack transmission channel, FLEXDROID adds a
unique stack tracer into each app and the stack tracer registers
itself to the channel at the app’s initialization time (e.g., in
Android, right after Zygote forks the app process). Since the
initialization occurs before the execution of the app’s code,
a malicious library code cannot create a thread to pretend
to be a stack tracer. Notice that the malicious code could
attempt to tamper with memory used by the stack tracer thread
at runtime to counterfeit data and control or to raise faults.
This is impossible because of our in-app memory protection
mechanism. (See §IV-C for details of the in-app memory
protection.)
The detailed procedure of inter-process stack inspection
differs according to the type of requested resources. Android
resources can broadly fall into two categories: user-space and
kernel-space, depending on which components are responsible
for access control. Android permission system conducts per-
mission checking for user-space resources at the framework
layer and for kernel-space resource in the kernel, respectively.
5
User-space resources. Apps access user-space resources
through the interfaces provided by Android system services.
Such resources include system resources (GPS, camera, etc.)
and app components (activity, service, content provider, and
broadcast receiver). Apps and system service processes, which
are user processes, communicate through the Binder IPC (Inter
Process Communication) mechanism. A system service, called
Package Manager (PM), is involved in the permission checking
of user-space resources, while it maintains various kinds of
information (i.e., a set of permissions granted) related to the
application packages installed on the device.
In FLEXDROID, a typical control ﬂow to access user-space
resources is as follows. Like Android, when an app requests
to access a resource (e.g., location) to a corresponding system
service (e.g., Location Manager), the system service process
queries the Package Manager (PM) to see whether the app has
proper permission. FLEXDROID provides inter-process stack
inspection to conduct access control at the granularity of a
module. Upon a request from PM, the stack tracer of the
app passes the Dalvik call trace to PM via the secure stack
transmission channel mentioned above. PM then looks through
all the modules involved in the current access request to ﬁnd
out the commonly granted permissions among them.
Kernel-space resources. Android apps access kernel-space
resources (Internet, external storage, Bluetooth, etc.) via sys-
tem calls. In Android, unlike the user-space resource case,
PM does not conduct permission checking for kernel-space
resources. Instead, at the initialization of an app, PM passes
a set of permissions (granted to the app) to the kernel. The
kernel then performs permission checking itself, using Linux’s
Access Control Lists [1] 2. FLEXDROID enforces the kernel to
conduct inter-process stack inspection through the stack trans-
mission channel during permission checking. Additionally, in
FLEXDROID, upon app installation, PM sends to the kernel a
set of granted permissions to each module in the app so as to
avoid expensive user-kernel communication later on.
Note that
the above process of inter-process stack in-
spection for user- and kernel-space resources works in a
synchronous manner. That is, after requesting the access to
resources, the thread is suspended so that the thread’s context
will remain consistent until the end of the process.
FLEXDROID extracts information of a caller method from
the corresponding stack frame in its Dalvik call stack and the
permission set of each modules. The information contains the
sequence of method call, the principal of module, and access
permission on the memory region of the call stack, as depicted
in Table III. For instance, a stack frame in Table III illus-
trates that com.malicious.library.WebCodeRunner.run
called the com.ImgLib.takePicture method which invokes
the takePicture method of Android’s Camera Class. Here
we assume that com.ImgLib.takePicture is a JNI wrapper
method to take a photo. Such a JNI method can maliciously
manipulate the call stack through a memory tampering attack.
To prevent such an attack, we introduce the design of Dalvik
memory protection in §IV-C.
2 In Android, each kernel-space resource is mapped to a unique GID.
6
P M Call stack trace



↓ A
A
L
L (cid:88) com.ImgLib.takePicture (JNI wrapper)
L (cid:88) android.hardware.Camera.takePicture
android.app.Activity.onCreate
com.example.userapp.MainActivity.onCreate
com.malicious.library.WebCodeRunner.run
↓
P: Principal
A: Host application
M: Potential modiﬁcation
L: Third party library
TABLE III: A snapshot of an app’s call stack: application (A) invokes
a JNI library (L) to take a picture. Since FLEXDROID protects the
app’s call stack when executing the library, the JNI library cannot
counterfeit its principal to bypass FLEXDROID’s rules.
C. Ensuring Dalvik Stack Integrity against Native Code
Android supports the Java Native Interface (JNI) and
allows developers to implement parts of an app or library to
incorporate native libraries. With JNI, a developer can re-use
existing libraries written in native languages or improve an
app’s performance.
Despite its advantages, it renders the memory safety of
the Java programming language obsolete, which results in
security threats in Android. In FLEXDROID, such memory
safety problems make it hard to guarantee the integrity of
Dalvik call stack and stack tracer, as they might be corrupted
or even manipulated by malicious third-party libraries.
1) Potential Attacks: We consider three potential attack
scenarios where malicious JNI code might attempt to bypass
FLEXDROID’s security mechanism, in particular, by compro-
mising the integrity of its principal.
1) Compromising the stack tracer. An attacker can ef-
fectively guess the address of a memory region (e.g., a
region that stores stack traces) used by the stack tracer,
and manipulate its content to counterfeit its principal.
2) Manipulating Dalvik stack. An attacker can directly
manipulate Dalvik stacks, thereby corrupting the integrity
of the call stack used for the inspection.
3) Hijacking the control data. Although the code segment
in memory is typically read-only, an attacker can modify
the read-only protection with mprotect() system call,
and manipulate the code for a malicious purpose. Fur-
thermore, an attacker can compromise code pointers (e.g.,
function pointers in heap, return addresses in stack).
2) Defenses: Since the above attacks rely on JNI’s ability to
access memory regions of Java code, one might think that those
attacks can be prevented by making important memory regions
read-only. However, such a solution does not work properly
for protecting the integrity of call stack for the following two
reasons.
First, it is difﬁcult to track all memory regions which need
to be protected. Although we can easily pinpoint and protect
memory locations of Dalvik call stack and buffers of stack
tracer, it is difﬁcult to precisely track all function pointers
within a process.
Moreover, even if we protect important memory regions
by making them read-only, a multi-threaded malicious process
can bypass this protection mechanism. For instance, suppose
that there are two threads T1 and T2 within a process, and
they are executing JNI and Java code, respectively. Then, T1
is able to counterfeit the stack principal by manipulating the
Dalvik call stack of T2; simply making the Dalvik call stack
of T2 read-only can freeze T2.
Thus, making speciﬁc memory locations read-only is not
a suitable solution to guarantee the integrity of call stack.
This motivates us to introduce a JNI sandboxing mechanism
to FLEXDROID. In this approach, FLEXDROID prevents JNI
from accessing memory regions of Java code by sandboxing
JNI code.
We have three different design choices of implementing
this protection mechanism.
1) Process separation. Process separation naturally supports
the memory sandboxing. Since it lets a JNI thread run in
a separate process, JNI code is not able to access the
memory region of Java code directly. NativeGuard [41]
applied this strategy to isolate JNI libraries in Android
applications.
2) Software Fault Isolation (SFI). SFI restricts memory
accessing by JNI through masking the operands of store
and jump instructions used in JNI. Since an attacker can
perform indirect attacks via static or shared libraries used
by JNI, SFI also needs to conﬁne memory access by such
libraries by masking those two instructions used in such
libraries. AppCage [47] applied this design in Android to
prevent JNI libraries from accessing restricted APIs.
3) Hardware Fault Isolation (HFI). HFI leverages the
memory separation mechanism supported by a processor
such as the memory domain in ARM architecture. It
strictly conﬁnes memory access by executing JNI in the
restricted memory domain. ARMLock [46] utilizes the
memory domain to implement HFI in the ARM-Linux
architecture.
Each design has its own advantages and disadvantages. The
process separation approach enables JNI sandboxing easily,
while imposing a large amount of overhead in switching
process contexts. On the other hand, unlike process separation,
SFI does not incur any process context switching overhead for
sandbox switching. However, it imposes runtime overhead due
to extra instructions for masking store and jump instructions.
Unlike SFI, HFI does not incur runtime overhead for masking
operands, while adding a little overhead in switching between
JNI and Java code by updating register values (i.e., Domain
Access Control Register (DACR)), which is negligible.
FLEXDROID takes the HFI approach to implement JNI
sandboxing, as the process separation and SFI approaches
incur signiﬁcant overheads compared to HFI, and most An-
droid devices based on ARM architecture natively support the
concept of domain which we can leverage for our implemen-
tation. We introduce two memory domains called JNI and Java
domain, which represent restricted memory regions assigned
for JNI and Java code, respectively.
However, there are a couple of challenges raised in apply-
ing this design to FLEXDROID. First, it is not trivial to apply
the JNI sandboxing to existing JNI and shared libraries without
modifying their implementation. In the default setting, when
JNI attempts to access memory regions for the stack, heap,
and shared libraries located at the Java domain, the domain
fault occurs since only the JNI can access the JNI domain.
To overcome this, FLEXDROID provides the JNI domain with
separate stack and heap, and loads a set of necessary shared
libraries located at the JNI domain.
Another challenge is that an attacker can indirectly manip-
ulate important memory regions through the communication
channel between JNI and Java code. For instance, when JNI
calls Java API, it can pass a pointer variable that points the
address of Dalvik stack to Java code as an argument or as a
return value. Such a pointer passing can be used to manipulate
the Dalvik stack, if the pointer is set properly, bypassing the
JNI sandboxing mechanism.
To prevent such attacks, FLEXDROID classiﬁes pointer
variables as valid or potentially malicious pointers and dis-
allows the latter ones to be passed to Java code via Java API.
FLEXDROID considers a pointer variable as valid if one of the
following cases holds:
1) It points a memory address within the JNI domain
2) It points a memory address within Java domain, when the
address has been returned from Java code via Java API
call.
If JNI attempts to pass a pointer that does not satisfy the above
conditions, the pointer can be used for a malicious purpose.
FLEXDROID manages a table called Valid Address Table
(VAT) that maintains a list of memory addresses which have
been returned from Java code via Java API calls. When JNI
calls a Java API and the API returns a pointer, FLEXDROID
adds the memory address that
the pointer stores to the
VAT. Then, when JNI passes a pointer via any Java APIs,
FLEXDROID checks whether the pointed address is in the JNI
domain (i.e., valid case 1) or exists in VAT (i.e., valid case 2).
Otherwise, the pointer is invalid and FLEXDROID rejects the
passing operation.
Despite the validity checking for pointers, JNI still can
cause integrity or conﬁdentiality violations with the type-
confusion attack [36]. For instance, suppose that there are two
Java classes called PrivClass which has a private integer
member variable and ListClass which is an implementation
of linked lists and has a pointer to the next element as a
member variable, and a function called set_null_to_list
that takes a ListClass pointer and sets the next element
of the list to null. JNI can make the value of the private
ﬁeld of PrivClass instance to null by casting the pointer