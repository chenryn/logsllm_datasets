## PostgreSQL Java tutorial   
### 作者                                                                                 
digoal                                                                                  
### 日期                                                                                 
2017-01-06                                                                                       
### 标签                                                                                
PostgreSQL , Java , php , ruby , python , C                                                                                                                                            
----                                                                                
## 背景            
转自 http://zetcode.com/db/postgresqljavatutorial/  
## 正文  
This is a Java tutorial for the PostgreSQL database. It covers the basics of PostgreSQL programming with Java. In this tutorial, we use the PostgreSQL JDBC Driver driver. It is the official JDBC driver for PostgreSQL. The examples were created and tested on Ubuntu Linux. There is a similar MySQL Java tutorial, Spring JdbcTemplate tutorial, or Apache Derby tutorial on ZetCode.  
### JDBC  
JDBC is an API for the Java programming language that defines how a client may access a database. It provides methods for querying and updating data in a database. JDBC is oriented towards relational databases. From a technical point of view, the API is as a set of classes in the java.sql package. To use JDBC with a particular database, we need a JDBC driver for that database.  
### About PostgreSQL database  
PostgreSQL is a powerful, open source object-relational database system. It is a multi-user database management system. It runs on multiple platforms including Linux, FreeBSD, Solaris, Microsoft Windows, and Mac OS X. PostgreSQL is developed by the PostgreSQL Global Development Group.  
### Before we start  
We need to install postgresql package. We need to install the JDK, Java Development Kit, for compiling and running Java programs. Finally, we need the PostgreSQL Java driver. If we are using NetBeans IDE, than we have already the driver at hand. Inside the Projects tab, right click on the Libraries node and select Add Library option. From the list of options, select PostgreSQL JDBC Driver. Note that the driver may be older. Older driver may cause problems on newer PostgreSQL versions. In such a case, we can add the newest driver from by choosing add JAR/Folder and selecting a driver from the filesystem.  
![pic](20170106_05_pic_001.png)    
Figure: NetBeans project libraries  
If we want to compile the examples from the command line, go to the site http://jdbc.postgresql.org/download.html and download the latest PostgreSQL Java Driver.  
```  
$ javac zetcode/Version.java  
$ java -cp .:lib/postgresql.jdbc4.jar zetcode/Version  
PostgreSQL 9.1.2 on i686-pc-linux-gnu, compiled by   
gcc-4.6.real (Ubuntu/Linaro 4.6.1-9ubuntu3) 4.6.1, 32-bit  
```  
Assuming that we have put the driver JAR file into the lib directory and using package zetcode, we compile and run the first example this way.  
If we don't already have PostgreSQL installed, we must install it.  
```  
$ sudo apt-get install postgresql  
```  
This command installs the PostgreSQL server and various other packages.  
```  
$ sudo update-rc.d -f postgresql remove  
 Removing any system startup links for /etc/init.d/postgresql ...  
   /etc/rc0.d/K21postgresql  
   /etc/rc1.d/K21postgresql  
   /etc/rc2.d/S19postgresql  
   /etc/rc3.d/S19postgresql  
   /etc/rc4.d/S19postgresql  
   /etc/rc5.d/S19postgresql  
   /etc/rc6.d/K21postgresql  
```  
If we install the PostgreSQL database from packages, it is automatically added to the start up scripts of the operating system. If we are only learning to work with the database, it is unnecessary to start the database each time we boot the system. The above command removes any system startup links for the PostgreSQL database.  
```  
$ /etc/init.d/postgresql status  
Running clusters: 9.1/main  
$ service postgresql status  
Running clusters: 9.1/main   
```  
We check if the PostgreSQL server is running. If not, we need to start the server.  
```  
$ sudo service postgresql start  
 * Starting PostgreSQL 9.1 database server        [ OK ]  
```  
On Ubuntu Linux we can start the server with the service postgresql start command.  
```  
$ sudo service postgresql stop  
[sudo] password for janbodnar:   
 * Stopping PostgreSQL 9.1 database server        [ OK ]   
```  
We use the service postgresql stop command to stop the PostgreSQL server.  
Next, we are going to create a new database user and a new database. We will use the createuser and createdb commands. These are installed with the PostgreSQL database.  
```  
$ sudo -u postgres createuser -W user12  
Shall the new role be a superuser? (y/n) n  
Shall the new role be allowed to create databases? (y/n) y  
Shall the new role be allowed to create more new roles? (y/n) n  
Password:   
```  
We create a new database user. The user is called user12 and it is created with a password (-W option).  
```  
$ sudo -u postgres createdb testdb -O user12  
```  
We create a new testdb database. We will use this database throughout the tutorial. We set the new user to be the owner of the database (the -O option).  
### PostgreSQL version  
If the following program runs OK, then we have everything installed OK. We check the version of the PostgreSQL server.  
```  
package zetcode;  
import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.ResultSet;  
import java.sql.SQLException;  
import java.sql.Statement;  
import java.util.logging.Level;  
import java.util.logging.Logger;  
public class Version {  
    public static void main(String[] args) {  
        Connection con = null;  
        Statement st = null;  
        ResultSet rs = null;  
        String url = "jdbc:postgresql://localhost/testdb";  
        String user = "user12";  
        String password = "34klq*";  
        try {  
            con = DriverManager.getConnection(url, user, password);  
            st = con.createStatement();  
            rs = st.executeQuery("SELECT VERSION()");  
            if (rs.next()) {  
                System.out.println(rs.getString(1));  
            }  
        } catch (SQLException ex) {  
            Logger lgr = Logger.getLogger(Version.class.getName());  
            lgr.log(Level.SEVERE, ex.getMessage(), ex);  
        } finally {  
            try {  
                if (rs != null) {  
                    rs.close();  
                }  
                if (st != null) {  
                    st.close();  
                }  
                if (con != null) {  
                    con.close();  
                }  
            } catch (SQLException ex) {  
                Logger lgr = Logger.getLogger(Version.class.getName());  
                lgr.log(Level.WARNING, ex.getMessage(), ex);  
            }  
        }  
    }  
}  
```  
We connect to the database and get some info about the PostgreSQL server.  
```  
String url = "jdbc:postgresql://localhost/testdb";  
```  
This is the connection URL for the PostgreSQL database. Each driver has a different syntax for the URL. In our case, we provide a host, a port and a database name.  
```  
con = DriverManager.getConnection(url, user, password);  
```  
We establish a connection to the database, using the connection URL, user name and password.  
```  
st = con.createStatement();  
```  
The createStatement() method of the connection object creates a Statement object for sending SQL statements to the database.  
```  
rs = st.executeQuery("SELECT VERSION()");  
```  
The executeQuery() method of the connection object executes the given SQL statement, which returns a single ResultSet object. The ResultSet is a table of data returned by a specific SQL statement.  
```  
if (rs.next()) {  
    System.out.println(rs.getString(1));  
}  
```  
A ResultSet object maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row. The next() method moves the cursor to the next row. If there are no rows left, the method returns false. The getString() method retrieves the value of a specified column. The first column has index 1.  
```  
} catch (SQLException ex) {  
    Logger lgr = Logger.getLogger(Version.class.getName());  
    lgr.log(Level.SEVERE, ex.getMessage(), ex);  
}  
```  
In case of an exception, we log the error message. For this console example, the message is displayed in the terminal.  
```  
try {  
    if (rs != null) {  
        rs.close();  
    }  
    if (st != null) {  
        st.close();  
    }  
    if (con != null) {  
        con.close();  
    }  
...  
```  
Inside the finally block, we close the database resources. We also check if the objects are not equal to null. This is to prevent null pointer exceptions. Otherwise we might get a NullPointerException, which would terminate the application and might leave the resources not cleaned up.  
```  
} catch (SQLException ex) {  
    Logger lgr = Logger.getLogger(Version.class.getName());  
    lgr.log(Level.WARNING, ex.getMessage(), ex);  
}  
```  
We log an error message when the resources could not be closed.  
```  
$ javac zetcode/Version.java  
$ java -cp .:lib/postgresql.jdbc4.jar zetcode.Version   
PostgreSQL 9.1.2 on i686-pc-linux-gnu, compiled by gcc-4.6.real   
(Ubuntu/Linaro 4.6.1-9ubuntu3) 4.6.1, 32-bit  
```  
This is a sample output of the program.  
### Creating and populating tables  
Next we are going to create database tables and fill them with data. These tables will be used throughout this tutorial.  
```  
DROP TABLE IF EXISTS books, authors, testing, images;  
CREATE TABLE IF NOT EXISTS authors (  
    id serial PRIMARY KEY,   
    name VARCHAR(25)  
);  
CREATE TABLE IF NOT EXISTS books (  
    id serial PRIMARY KEY,   
    author_id INT references authors(id), title VARCHAR(100)  
);  
CREATE TABLE IF NOT EXISTS testing(id INT);  
CREATE TABLE IF NOT EXISTS images(id serial, data bytea);  
INSERT INTO authors(id, name) VALUES(1, 'Jack London');  
INSERT INTO authors(id, name) VALUES(2, 'Honore de Balzac');  
INSERT INTO authors(id, name) VALUES(3, 'Lion Feuchtwanger');  
INSERT INTO authors(id, name) VALUES(4, 'Emile Zola');  
INSERT INTO authors(id, name) VALUES(5, 'Truman Capote');  
INSERT INTO books(id, author_id, title) VALUES(1, 1, 'Call of the Wild');  
INSERT INTO books(id, author_id, title) VALUES(2, 1, 'Martin Eden');  
INSERT INTO books(id, author_id, title) VALUES(3, 2, 'Old Goriot');  
INSERT INTO books(id, author_id, title) VALUES(4, 2, 'Cousin Bette');  
INSERT INTO books(id, author_id, title) VALUES(5, 3, 'Jew Suess');  
INSERT INTO books(id, author_id, title) VALUES(6, 4, 'Nana');  
INSERT INTO books(id, author_id, title) VALUES(7, 4, 'The Belly of Paris');  
INSERT INTO books(id, author_id, title) VALUES(8, 5, 'In Cold blood');  
INSERT INTO books(id, author_id, title) VALUES(9, 5, 'Breakfast at Tiffany');  
```  
We have a tables.sql file. It creates four database tables, authors, books, testing, and images. We place a foreign key constraint on the author_id column of the books table. We fill the authors and books tables with initial data.  
```  
$ psql testdb  
psql (9.1.2)  
Type "help" for help.  
testdb=#   
testdb=# \i tables.sql  
DROP TABLE  
psql:tables.sql:6: NOTICE:  CREATE TABLE will create implicit   
    sequence "authors_id_seq" for serial column "authors.id"  
psql:tables.sql:6: NOTICE:  CREATE TABLE / PRIMARY KEY will create   
    implicit index "authors_pkey" for table "authors"  
CREATE TABLE  
...  
```  
The psql is a terminal-based front-end to PostgreSQL. We can use it to perfom interactive queries, issue them to PostgreSQL, and see the query results. Inside the psql tool, we import and execute the tables.sql file.  
```  
testdb=# \dt  
          List of relations  
 Schema |  Name   | Type  |   Owner     
--------+---------+-------+-----------  
 public | authors | table | janbodnar  
 public | books   | table | janbodnar  
 public | images  | table | janbodnar  
 public | testing | table | janbodnar  
(4 rows)  
```  
We check the created tables.  
### Prepared statements  
Now we will concern ourselves with prepared statements. When we write prepared statements, we use placeholders instead of directly writing the values into the statements. Prepared statements increase security and performance.  
In Java a PreparedStatement is an object which represents a precompiled SQL statement.  
```  
package zetcode;  
import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.PreparedStatement;  
import java.sql.SQLException;  
import java.util.logging.Level;  
import java.util.logging.Logger;  
public class Prepared {  
    public static void main(String[] args) {  
        Connection con = null;  
        PreparedStatement pst = null;  
        String url = "jdbc:postgresql://localhost/testdb";  
        String user = "user12";  
        String password = "34klq*";  
        try {  
            int id = 6;  
            String author = "Trygve Gulbranssen";  
            con = DriverManager.getConnection(url, user, password);  
            String stm = "INSERT INTO authors(id, name) VALUES(?, ?)";  
            pst = con.prepareStatement(stm);  
            pst.setInt(1, id);  
            pst.setString(2, author);                      
            pst.executeUpdate();  
        } catch (SQLException ex) {  
            Logger lgr = Logger.getLogger(Prepared.class.getName());  
            lgr.log(Level.SEVERE, ex.getMessage(), ex);  
        } finally {  
            try {  
                if (pst != null) {  
                    pst.close();  
                }  
                if (con != null) {  
                    con.close();  
                }  
            } catch (SQLException ex) {  
                Logger lgr = Logger.getLogger(Prepared.class.getName());  
                lgr.log(Level.SEVERE, ex.getMessage(), ex);  
            }  
        }  
    }  
}  
```  
We add a new author to the authors table.  
```  
String stm = "INSERT INTO authors(id, name) VALUES(?, ?)";  
pst = con.prepareStatement(stm);  
```  
Here we create a prepared statement. When we write prepared statements, we use placeholders instead of directly writing the values into the statements. Prepared statements are faster and guard against SQL injection attacks. The ? is a placeholder, which is going to be filled later. In our case we will fill two values. An integer id and a string name.  
```  
pst.setInt(1, id);  
```  
A value is bound to the placeholder.  
```  
pst.setString(2, author);   
```  
Another value is bound to the placeholder.  
```  
pst.executeUpdate();  
```  
The prepared statement is executed. We use the executeUpdate() method of the statement object when we do not expect any data to be returned. This is when we create databases or execute INSERT, UPDATE, and DELETE statements.  
```  
$ javac zetcode/Prepared.java   
$ java -cp .:lib/postgresql.jdbc4.jar zetcode.Prepared  
testdb=# SELECT * FROM authors;  
 id |        name          
----+--------------------  
  1 | Jack London  
  2 | Honore de Balzac  
  3 | Lion Feuchtwanger  
  4 | Emile Zola  
  5 | Truman Capote  
  6 | Trygve Gulbranssen  
(6 rows)  
```  
We have a new author inserted into the table.  
For the following two examples, we will use the Testing table. We will execute a normal statement and a prepared statement 1000 times. We check if there is some difference in execution time.  
```  
package zetcode;  
import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.SQLException;  
import java.sql.Statement;  
import java.util.logging.Level;  
import java.util.logging.Logger;  
public class NotPrepared {  
    public static void main(String[] args) {  
        Connection con = null;  
        Statement st = null;  
        String url = "jdbc:postgresql://localhost/testdb";  
        String user = "user12";  
        String password = "34klq*";  
        try {  
            con = DriverManager.getConnection(url, user, password);  
            st = con.createStatement();  
            for (int i=1; i<=1000; i++) {  
                String query = "INSERT INTO Testing(Id) VALUES(" + 2*i + ")";  
                st.executeUpdate(query);  
            }  
        } catch (SQLException ex) {  
            Logger lgr = Logger.getLogger(NotPrepared.class.getName());  
            lgr.log(Level.SEVERE, ex.getMessage(), ex);  
        } finally {  
            try {  
                if (st != null) {  
                    st.close();  
                }  
                if (con != null) {  
                    con.close();  
                }  
            } catch (SQLException ex) {  
                Logger lgr = Logger.getLogger(NotPrepared.class.getName());  
                lgr.log(Level.SEVERE, ex.getMessage(), ex);  
            }  
        }  
    }  
}  
```  
The first example uses the normal Statement object.  
```  
for (int i=1; i<=1000; i++) {  
    String query = "INSERT INTO Testing(Id) VALUES(" + 2*i + ")";  
    st.executeUpdate(query);  
}  
```  
We build the query and execute it 1000 times.  
```  
$ javac zetcode/NotPrepared.java  
$ /usr/bin/time java -cp .:lib/postgresql.jdbc4.jar zetcode.NotPrepared  
0.81user 0.14system 0:32.27elapsed 2%CPU (0avgtext+0avgdata 89824maxresident)k  
960inputs+88outputs (1major+6008minor)pagefaults 0swaps  
```  
We use the time command to measure the time which the program ran. Note that we use a standard Linux command, not the built-in bash time command. It took 32s to insert 1000 rows into the table using the Statement object.  
```  