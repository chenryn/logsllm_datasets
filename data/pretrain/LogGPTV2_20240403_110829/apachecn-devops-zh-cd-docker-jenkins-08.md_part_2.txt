```
$ docker service scale tomcat=5
tomcat scaled to 5
```
我们可以检查服务是否已扩展:
```
$ docker service ps tomcat
ID            NAME     IMAGE          NODE            DESIRED STATE  CURRENT STATE 
kjy1udwcnwmi  tomcat.1  tomcat:latest  ubuntu-manager  Running    Running 2 minutes ago 
536p5zc3kaxz  tomcat.2  tomcat:latest  ubuntu-worker2  Running    Preparing 18 seconds ago npt6ui1g9bdp  tomcat.3  tomcat:latest  ubuntu-manager  Running    Running 18 seconds ago zo2kger1rmqc  tomcat.4  tomcat:latest  ubuntu-worker1  Running    Preparing 18 seconds ago 1fb24nf94488  tomcat.5  tomcat:latest  ubuntu-worker2  Running    Preparing 18 seconds ago  
```
注意这次，两个容器在`manager`节点上运行，一个在`ubuntu-worker1`节点上，另一个在`ubuntu-worker2`节点上。我们可以通过在每台机器上执行`docker ps`来检查它们是否真的在运行。
如果我们想删除服务，执行以下命令就足够了:
```
$ docker service rm tomcat
```
您可以使用`docker service ls`命令检查服务已经被移除，因此所有相关的`tomcat`容器都被停止并从所有节点移除。
# 发布端口
Docker 服务，类似于容器，有一个端口转发机制。我们通过添加`-p :`参数来使用它。以下是启动服务的情况:
```
$ docker service create --replicas 1 --publish 8080:8080 --name tomcat tomcat
```
现在，我们可以打开浏览器，在地址`http://192.168.0.143:8080/`下看到 Tomcat 的主页面。
该应用在充当负载平衡器并将请求分发到工作节点的管理器主机上可用。听起来不太直观的是，我们可以使用任何工作人员的 IP 地址访问 Tomcat，例如，如果工作人员节点在`192.168.0.166`和`192.168.0.115`下可用，我们可以使用`http://192.168.0.166:8080/`和`http://192.168.0.115:8080/`访问同一个运行容器。这是可能的，因为 Docker Swarm 创建了一个路由网格，其中每个节点都有如何转发已发布端口的信息。
You can read more about how the load balancing and routing are done by Docker Swarm at [https://docs.docker.com/engine/swarm/ingress/](https://docs.docker.com/engine/swarm/ingress/).
默认情况下，使用内部 Docker Swarm 负载平衡。因此，将所有请求都发送到管理器的机器上就足够了，它会处理节点之间的分布。另一个选项是配置外部负载平衡器(例如，HAProxy 或 Traefik)。
我们已经讨论了 Docker Swarm 的基本用法。现在让我们深入探讨更具挑战性的特性。
# 高级 DockerSwarm
Docker Swarm 提供了许多有趣的特性，这些特性在持续交付过程中非常有用。在这一节中，我们将介绍最重要的几个。
# 滚动更新
假设您部署了应用的新版本。您需要更新群集中的所有副本。一种选择是停止整个 Docker Swarm 服务，并从更新的 Docker 映像运行一个新的服务。然而，这种方法会在服务停止和新服务启动之间造成停机。在持续交付过程中，宕机是不可接受的，因为部署可以在每次源代码更改后进行，这种情况很常见。那么，我们如何在集群中提供零停机部署呢？这就是滚动更新的作用。
滚动更新是一种用副本替换服务副本的自动方法，其中一些副本一直在工作。Docker Swarm 默认情况下使用滚动更新，它们可以通过两个参数来控制:
*   `update-delay`:启动一个副本和停止下一个副本之间的延迟(默认为 0 秒)
*   `update-parallelism`:同时更新的副本最大数量(默认为一个)
Docker Swarm 滚动更新过程如下所示:
1.  停止``数量的任务(副本)。
2.  取而代之的是，运行相同数量的更新任务。
3.  如果任务返回**运行**状态，则等待``周期。
4.  如果在任何时候，任何任务返回**失败**状态，则暂停更新。
The value of the `update-parallelism` parameter should be adapted to the number of replicas we run. If the number is small and booting the service is fast, it's reasonable to keep the default value of 1\. The `update-delay` parameter should be set to the period longer than the expected boot time of our application so that we will notice the failure, and therefore pause the update.
让我们看一个例子，将 Tomcat 应用从版本 8 更改为版本 9。假设我们有带五个副本的`tomcat:8`服务:
```
$ docker service create --replicas 5 --name tomcat --update-delay 10s tomcat:8
```
我们可以使用`docker service ps tomcat`命令检查所有副本是否正在运行。帮助检查服务的另一个有用命令是`docker service inspect`命令:
```
$ docker service inspect --pretty tomcat
ID:    au1nu396jzdewyq2y8enm0b6i
Name:    tomcat
Service Mode:    Replicated
 Replicas:    5
Placement:
UpdateConfig:
 Parallelism:    1
 Delay:    10s
 On failure:    pause
 Max failure ratio: 0
ContainerSpec:
 Image:    tomcat:8@sha256:835b6501c150de39d2b12569fd8124eaebc53a899e2540549b6b6f8676538484
Resources:
Endpoint Mode:    vip
```
我们可以看到该服务有五个从映像`tomcat:8`创建的副本。命令输出还包括关于并行度和更新之间的延迟时间的信息(由`docker service create`命令中的选项设置)。
现在，我们可以将服务更新为`tomcat:9`映像:
```
$ docker service update --image tomcat:9 tomcat
```
让我们看看会发生什么:
```
$ docker service ps tomcat
ID            NAME      IMAGE     NODE            DESIRED STATE  CURRENT STATE 
4dvh6ytn4lsq  tomcat.1  tomcat:8  ubuntu-manager  Running    Running 4 minutes ago 
2mop96j5q4aj  tomcat.2  tomcat:8  ubuntu-manager  Running    Running 4 minutes ago 
owurmusr1c48  tomcat.3  tomcat:9  ubuntu-manager  Running    Preparing 13 seconds ago 
r9drfjpizuxf   \_ tomcat.3  tomcat:8  ubuntu-manager  Shutdown   Shutdown 12 seconds ago 
0725ha5d8p4v  tomcat.4  tomcat:8  ubuntu-manager  Running    Running 4 minutes ago 
wl25m2vrqgc4  tomcat.5  tomcat:8  ubuntu-manager  Running    Running 4 minutes ago       
```
注意`tomcat:8`的第一个副本已经关闭，第一个`tomcat:9`已经在运行。如果我们继续检查`docker service ps tomcat`命令的输出，我们会注意到每 10 秒钟后，另一个副本处于关闭状态，一个新的副本被启动。如果我们也监控`docker inspect`命令，我们会看到值**更新状态:状态**将变为**更新**，然后，当更新完成时，变为**完成**。
滚动更新是一个非常强大的功能，它允许零停机部署，并且应该始终在持续交付过程中使用。
# 排出节点
当我们需要停止工作节点进行维护，或者我们只想将其从集群中删除时，我们可以使用 Swarm draining 节点功能。清空节点意味着要求经理将所有任务移出给定节点，并将其排除在接收新任务之外。因此，所有副本仅在活动节点上运行，而耗尽的节点处于空闲状态。
让我们看看这在实践中是如何工作的。假设我们有三个集群节点和一个带有五个副本的 Tomcat 服务:
```
$ docker node ls
ID                          HOSTNAME        STATUS  AVAILABILITY  MANAGER STATUS
4mrrmibdrpa3yethhmy13mwzq   ubuntu-worker2  Ready   Active 
kzgm7erw73tu2rjjninxdb4wp * ubuntu-manager  Ready   Active        Leader
yllusy42jp08w8fmze43rmqqs   ubuntu-worker1  Ready   Active 
$ docker service create --replicas 5 --name tomcat tomcat
```
让我们检查副本在哪些节点上运行:
```
$ docker service ps tomcat
ID            NAME      IMAGE          NODE            DESIRED STATE  CURRENT STATE 
zrnawwpupuql  tomcat.1  tomcat:latest  ubuntu-manager  Running    Running 17 minutes ago 
x6rqhyn7mrot  tomcat.2  tomcat:latest  ubuntu-worker1  Running    Running 16 minutes ago 
rspgxcfv3is2  tomcat.3  tomcat:latest  ubuntu-worker2  Running    Running 5 weeks ago 
cf00k61vo7xh  tomcat.4  tomcat:latest  ubuntu-manager  Running    Running 17 minutes ago 
otjo08e06qbx  tomcat.5  tomcat:latest  ubuntu-worker2  Running    Running 5 weeks ago      
```
有两个副本运行在`ubuntu-worker2`节点上。让我们排空该节点:
```
$ docker node update --availability drain ubuntu-worker2
```
该节点被放入**耗尽**可用性，因此所有副本都应该移出该节点:
```
$ docker service ps tomcat
ID            NAME      IMAGE          NODE            DESIRED STATE  CURRENT STATE
zrnawwpupuql  tomcat.1  tomcat:latest  ubuntu-manager  Running    Running 18 minutes ago 
x6rqhyn7mrot  tomcat.2  tomcat:latest  ubuntu-worker1  Running    Running 17 minutes ago qrptjztd777i  tomcat.3  tomcat:latest  ubuntu-worker1  Running    Running less than a second ago 
rspgxcfv3is2   \_ tomcat.3  tomcat:latest  ubuntu-worker2  Shutdown   Shutdown less than a second ago 
cf00k61vo7xh  tomcat.4  tomcat:latest  ubuntu-manager  Running    Running 18 minutes ago k4c14tyo7leq  tomcat.5  tomcat:latest  ubuntu-worker1  Running    Running less than a second ago 
otjo08e06qbx   \_ tomcat.5  tomcat:latest  ubuntu-worker2  Shutdown   Shutdown less than a second ago   
```
我们可以看到新任务在`ubuntu-worker1`节点启动，旧副本关闭。我们可以检查节点的状态: