### User Experience and Side Channel Analysis

When users employ our new technique, they will perceive a more secure and efficient environment. Additionally, we will investigate other side channels, such as process states, to gain deeper insights into an app's operation.

### Adversary Evasion

A potential concern is the ability of adversaries to evade our protection mechanisms. For example, an attacker might add perceptible activities to their malicious app to prevent it from being terminated. Our preliminary study indicates that for common apps with such features (e.g., media players and keyboards), Guardian can first stop their perceptible activities and then terminate them. Further research is needed to better understand the tactics a malicious app might use to bypass our protection mechanism.

### Background Process Protection

The current design of App Guardian focuses on protecting security-critical foreground apps. These apps typically run for a short period and can be secured by pausing suspicious background apps. Although most protected apps run in the foreground, there are scenarios where background processes also face RIG (Runtime Information Gathering) threats. For instance, when the GCM (Google Cloud Messaging) process delivers a notification, the observation of the notification itself can leak information. Background services may run indefinitely, making them challenging to protect in the same way as foreground processes. Further effort is required to determine whether such processes can be protected at the app level and, if so, how to do so with minimal utility and performance costs.

### Sanitization

Another issue requiring further investigation is the thorough cleanup of the principal's execution environment after the program stops running. As discussed in Section III-B, certain data, such as accumulated network-data usage, cannot be removed without rebooting the entire device. Adding noise to the data also requires user intervention. The question is how to better protect such data and whether this is feasible without modifying the OS or the app under protection. This should be studied in follow-up research.

### Related Work

#### Data Stealing Attacks and Defense

With the increasing amount of private user data on mobile devices, these devices have become prime targets for data-stealing attacks. These attacks often exploit the design limitations of Android, which lacks fine-grained access control. For example, an app with the RECORD_AUDIO permission can record audio at any time, even during sensitive phone calls. Similarly, any app with the BLUETOOTH permission can access Bluetooth accessories, including medical devices. Other attacks in this category include information leaks due to weakened memory randomization protection on Android or insufficient protection of content providers. Mitigating such threats usually involves modifying the operating system. For instance, prior research has shown that the Android Bluetooth service can be hooked to prevent unauthorized access to medical devices.

#### Side Channel Attacks and Defense

Side channel attacks have been studied for decades, with new channels continuously being discovered. Most of these attacks are also RIG, as the attack process needs to collect information from the target program during its runtime. Prior research has shown that sensitive user information can be collected from the Linux proc file systems. For example, Momento utilizes /proc/[pid]/statm to infer websites visited by the victim. The paper briefly mentions an approach that infers user inter-keystroke timings using schedule status, but the attack was only performed on desktops. However, this information is available on Android since version 2.3. We are the first to leverage this side channel to infer mobile apps' behaviors for defensive purposes. Other related work includes studies on shared_vm and shared_pm for inferring the UI state of Android apps, and research on network-data usage, audio usages, etc., for identifying one's identity, disease, locations, and financial information. Sensors on smartphones have also been exploited to collect sensitive user information, such as Soundcomber, Accomplice, and Touchlogger.

Almost all existing defense techniques against side-channel attacks require changes to either the operating system or vulnerable applications. To our knowledge, App Guardian is the first third-party app-level protection proposed. HomeAlone is another notable work that uses side-channels for defensive purposes, verifying a virtual-machine instance's exclusive use of a physical machine through the cache channel. In contrast, our approach is designed to protect mobile systems against side-channel attacks by leveraging a set of unique side channels.

### Conclusion

In this paper, we report our study on an emerging security threat to Android: runtime-information-gathering (RIG) attacks. These attacks aim to exploit apps for sensitive user data, ranging from phone conversations to health information. Our research provides further evidence of the seriousness of RIG threats, showing that popular Android-based IoT systems are equally vulnerable. Mitigating this threat involves thwarting a malicious app's attempt to run alongside the principal and collect its runtime information. This is achieved without changing the operating system or the principal. Instead, we use an ordinary app, Guardian, which pauses suspicious background processes when the principal is running and resumes them after the security-critical operation is completed and the environment is cleaned. Our evaluation shows that this approach effectively mitigates known attacks with minimal performance and utility costs.

We believe that our technique significantly raises the bar for RIG attacks, a realistic threat to mobile security. The idea of side-channel-based detection and lightweight response for mitigating false alarms can inspire future efforts in developing app-level protection against other security threats on mobile devices.

### Acknowledgements

We thank our shepherd Matthew Smith and anonymous reviewers for their comments and help in preparing the final version of the paper. The project was supported in part by the NSF CNS-1117106, 1223477, and 1223495.

### References

[References listed as provided, with no changes necessary.]

---

This revised text aims to be more coherent, professional, and easier to read. It clarifies the key points and ensures a logical flow of ideas.