the user will perceive when using our new technique. Also, we
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:07 UTC from IEEE Xplore.  Restrictions apply. 
will look into other side channels (e.g., process states) to gain
as much insight as possible into an app’s operation.
Another concern is the potential for the adversary to
evade our protection, for example, through adding perceptible
activities into the attack app to prevent it from being killed.
Our preliminary study shows that for the common apps with
such features, like media players and keyboards, Guardian
can ﬁrst stop their perceptible activities and then terminate
them. Further studies are expected to better understand what
tricks a malicious app can still play to bypass our protection
mechanism.
Background process protection. The current design of App
Guardian is for protecting security-critical foreground apps.
Such apps only run within a short period of time and can
therefore be secured by pausing suspicious background apps.
Although most apps that need protected indeed run in the
foreground, there are situations where a background process
is also under a RIG threat: an example is when the GCM
process delivers a notiﬁcation to apps and the observation of
the notiﬁcation itself already leaks out information. Background
services may run indeﬁnitely, so they cannot be protected in
the same way as the foreground process. Further effort needs
to be made to understand whether protection of such a process
can be done at the app level and if so, how to do it at the
minimal utility and performance cost.
Sanitization. Another issue that needs a further investigation
is whether it is possible to thoroughly clean up the principal’s
execution environment after the program stops running. As
discussed in Section III-B, information such as accumulated
network-data usages of an app cannot be removed without
rebooting the whole device. Adding noise to the data also
needs the user’s intervention. A question is how to better
protect such data and whether this is feasible without touching
the OS and the app under protection. This should be studied
in the follow-up research.
VI. RELATED WORK
Data stealing attacks and defense. With more and more
private user data moving onto mobile devices, they increasingly
become the main target for data-stealing attacks. These attacks
often exploit the design limitations of Android, which does
not provide ﬁne-grained access control. For example, an app
given the RECORD_AUDIO permission can make a record at
anytime, even when a sensitive phone call is ongoing. As
another example, any app with the BLUETOOTH permission
is free to access any Android Bluetooth accessories, including
medical devices [6]. Other attacks also in this category include
information leaks due to the weakened memory randomization
protection on Android [31] or insufﬁcient protection of content
providers [32]. Mitigating such a threat usually relies on
modiﬁcation of the operating system. For example, prior
research [6] shows that the Android Bluetooth service can
be hooked to prevent the attempt to gain unauthorized access
to medical devices.
Side channel attacks and defense. Side channel attacks has
been studied for decades and new channels are continuously
discovered [33]–[36]. Most of the time, those attacks are also
RIG, as the attack process needs to continuously collect infor-
mation from the target program during its runtime. Particularly,
prior research [37] shows that sensitive user information can be
collected from the Linux proc ﬁle systems: through sampling
the target program’s ESP/EIP changes, inter-keystroke timings
can be identiﬁed to infer the user’s inputs. Memory usage is
also found to leak sensitive information: Momento [5] utilizes
/proc/[pid]/statm to ﬁnd out the websites visited by the
victim. The paper brieﬂy mentions an approach that infers the
user’s inter-keystroke timings using schedule status. However,
the attack was only performed on a desktop, since the authors
seem to believe that this piece of information was not available
on Android [5]. Actually, it has been there since 2.3 (or even
earlier). Most importantly, we are the ﬁrst to leverage this side
channel to infer mobile apps’ behaviors for the purpose of
defending against side-channel attacks. Also related to our
work are the study on shared_vm and shared_pm (for
inferring the UI state of an Android app [2]) and the research
on network-data usage, audio usages, etc. (for identifying one’s
identity, disease, locations and ﬁnance) [1]. In addition, sensors
on smartphones have been exploited to collect sensitive user
information [17], [19]. Examples include Soundcomber [3] that
uses audio to ﬁnd credit-card information, Accomplice [18]
that leverages accelerometer for location identiﬁcation and
Touchlogger [4] that also utilizes accelerometer for key logging.
So far, almost all existing defense techniques against side-
channel attacks require change of either operating systems or
vulnerable applications [1], [5]. Up to our knowledge, App
Guardian is the ﬁrst third-party app level protection that has
ever been proposed. Notably, HomeAlone [38] is the only
work we are aware of that uses side-channels for defensive
purposes. It veriﬁes a virtual-machine instance’s exclusive
use of a physical machine through the cache channel. By
comparison, our approach is designed to protect mobile systems
against side channel attacks. For this purpose, it leverages a set
of unique side channels that have never served this purpose.
VII. CONCLUSION
In this paper, we report our study on an emerging security
threat to Android, the runtime-information-gathering attacks,
which cover a wide spectrum of new attacks that aim at
exploiting apps for sensitive user data, ranging from phone
conversations to health information. Our research provides
further evidence for the seriousness of such a RIG threat,
showing that popular Android-based IoT systems are equally
vulnerable to this type of attacks. Mitigating this emerging
threat needs to thwart a malicious app’s attempt to run side-
by-side with the principal, in an attempt to collect its runtime
information. This is achieved in our research without changing
the operating system and the principal. Instead, we use an
ordinary app, Guardian, which pauses suspicious background
processes when the principal is running and resumes them
after the security-critical operation is done and the environment
is cleaned. We show that this approach does not damage the
utility of legitimate apps due to the observation that most
background apps on Android can be stopped without disrupting
their functionality. To further reduce the inconvenience of
doing so, Guardian utilizes a set of novel side channels to
infer background apps’ behaviors and identify a small set of
them that meet necessary conditions for the RIG attacks. In
this way, most third-party apps can still run without being
interrupted. Our evaluation shows that our approach works
effectively against all known attacks, at a minimal performance
and utility cost.
928929
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:07 UTC from IEEE Xplore.  Restrictions apply. 
We believe that our technique signiﬁcantly raises the bar
for the RIG attacks, a realistic threat to mobile security, and
the research on this subject. The idea of side-channel based
detection and the lightweight response for mitigating negative
impacts of a false alarm can further inspire the follow-up effort
on developing app-level protection against other security threats
on mobile devices.
ACKNOWLEDGEMENTS
We thank our shepherd Matthew Smith and anonymous
reviewers for their comments and help in preparing the ﬁnal
version of the paper. The project was supported in part by the
NSF CNS-1117106, 1223477 and 1223495.
REFERENCES
[1] X. Zhou, S. Demetriou, D. He, M. Naveed, X. Pan, X. Wang,
C. A. Gunter, and K. Nahrstedt, “Identity,
location, disease
and more: Inferring your secrets from android public resources,”
in Proceedings of 20th ACM Conference on Computer and
Communications Security (CCS), Nov. 2013. [Online]. Available:
http://www.cs.indiana.edu/∼zhou/ﬁles/fp045-zhou.pdf
[2] Q. A. Chen, Z. Qian, and Z. M. Mao, “Peeking into your app
without actually seeing it: Ui state inference and novel android attacks,”
in 23rd USENIX Security Symposium (USENIX Security 14). San
Diego, CA: USENIX Association, Aug. 2014, pp. 1037–1052. [Online].
Available: https://www.usenix.org/conference/usenixsecurity14/technical-
sessions/presentation/chen
[3] R. Schlegel, K. Zhang, X. yong Zhou, M. Intwala, A. Kapadia, and
X. Wang, “Soundcomber: A stealthy and context-aware sound trojan for
smartphones.” in NDSS. The Internet Society, 2011. [Online]. Available:
http://dblp.uni-trier.de/db/conf/ndss/ndss2011.html#SchlegelZZIKW11
[4] L. Cai and H. Chen, “Touchlogger: inferring keystrokes on touch
screen from smartphone motion,” in Proceedings of the 6th USENIX
topics in security, ser. HotSec’11. Berkeley,
conference on Hot
CA, USA: USENIX Association, 2011, pp. 9–9. [Online]. Available:
http://dl.acm.org/citation.cfm?id=2028040.2028049
[5] S. Jana and V. Shmatikov, “Memento: Learning secrets from
process footprints,” in Proceedings of the 2012 IEEE Symposium
on Security and Privacy, ser. SP ’12. Washington, DC, USA:
IEEE Computer Society, 2012, pp. 143–157. [Online]. Available:
http://dx.doi.org/10.1109/SP.2012.19
[6] M. Naveed, X. Zhou, S. Demetriou, X. Wang, and C. A. Gunter, “Inside
job: Understanding and mitigating the threat of external device mis-
bonding on android,” 2014.
[7] Y. Michalevsky, D. Boneh,
2014,
pp.
1053–1067.
and G. Nakibly,
“Gyrophone:
Recognizing speech from gyroscope signals,” in 23rd USENIX
San Diego, CA:
Security Symposium (USENIX Security 14).
USENIX Association, Aug.
[Online].
Available: https://www.usenix.org/conference/usenixsecurity14/technical-
sessions/presentation/michalevsky
“Smartthings,” http://www.smartthings.com/, 2014.
“Nest,” http://www.nest.com/, 2014.
“Automatic, an auto accessory to mak you smarter driver,” https://www.
automatic.com/, 2014.
“Viper smart key,” http://www.viper.com/, 2014.
“Doorbot,” http://www.getdoorbot.com/, 2014.
“Netcam,” https://netcam.belkin.com/, 2014.
“Nest saw ’tens of thousands’ of its smart smoke alarms come online
within two weeks,” http://www.forbes.com/sites/parmyolson/2013/12/05/
nest-saw-tens-of-thousands-of-its-smart-smoke-alarms-come-online-
within-two-weeks/, 2014.
“Demo: Leave me alone: App-level protection against runtime infor-
mation gathering on android,” https://sites.google.com/site/appguaridan/,
2014.
“My data manager,” http://www.mobidia.com/products/takecontrol/,
2014.
[8]
[9]
[10]
[11]
[12]
[13]
[14]
[15]
[16]
[17] Z. Xu, K. Bai, and S. Zhu, “Taplogger:
Inferring user
inputs
on smartphone touchscreens using on-board motion sensors,” in
Proceedings of
the Fifth ACM Conference on Security and
Privacy in Wireless and Mobile Networks, ser. WISEC ’12. New
York, NY, USA: ACM, 2012, pp. 113–124. [Online]. Available:
http://doi.acm.org/10.1145/2185448.2185465
J. Han, E. Owusu, T.-L. Nguyen, A. Perrig, and J. Zhang, “Accomplice:
Location inference using accelerometers on smartphones,” in Proceedings
of the 4th International Conference on Communication Systems and
Networks, Bangalore, India, 2012.
[18]
[19] E. Miluzzo, A. Varshavsky, S. Balakrishnan, and R. R. Choudhury,
“Tapprints: Your ﬁnger taps have ﬁngerprints,” in Proceedings of the 10th
International Conference on Mobile Systems, Applications, and Services,
ser. MobiSys ’12. New York, NY, USA: ACM, 2012, pp. 323–336.
[Online]. Available: http://doi.acm.org/10.1145/2307636.2307666
[20] C.-C. Lin, H. Li, X. Zhou, and X. Wang, “Screenmilker: How to milk
[21]
[22]
[23]
[24]
[25]
[26]
[27]
[28]
[29]
[30]
permission,”
http://developer.android.com/guide/topics/
your android screen for secrets,” 2014.
“Android
manifest/permission-element.html/, 2014.
“Google play: Webmd for android,” http://www.webmd.com/webmdapp,
2012.
“Yahoo ﬁnance,” https://play.google.com/store/apps/details?id=com.
yahoo.mobile.client.android.ﬁnance&hl=en/, 2014.
“Best 20 internet of things devices,” http://techpp.com/2013/10/16/best-
internet-of-things-devices/, 2014.
“Android oom killer,” http://elinux.org/Android Notes#oom killer info,
2014.
“getmemoryclass,” http://developer.android.com/reference/android/app/
ActivityManager.html#getMemoryClass(), 2014.
“Processlist.java,”
frameworks/base/+/master/services/java/com/android/server/am/
ProcessList.java, 2014.
“ithermometer,” http://www.ithermometer.info/, 2014.
“Gyrophone code,” https://bitbucket.org/ymcrcat/gyrophone/, 2014.
“Os monitor,” https://play.google.com/store/apps/details?id=com.eolwral.
osmonitor&hl=en/, 2014.
https://android.googlesource.com/platform/
[31] B. Lee, L. Lu, T. Wang, T. Kim, and W. Lee, “From zygote to morula:
Fortifying weakened aslr on android,” in Proceedings of the 2014 IEEE
Symposium on Security and Privacy, ser. SP ’14. Washington, DC,
USA: IEEE Computer Society, 2014, pp. 424–439. [Online]. Available:
http://dx.doi.org/10.1109/SP.2014.34
[34]
[32] Y. Zhou and X. Jiang, “Detecting passive content leaks and pollution in
android applications.” in NDSS. The Internet Society, 2013. [Online].
Available: http://dblp.uni-trier.de/db/conf/ndss/ndss2013.html#ZhouJ13
[33] D. X. Song, D. Wagner, and X. Tian, “Timing analysis of keystrokes
and timing attacks on ssh,” in Proceedings of the 10th Conference on
USENIX Security Symposium - Volume 10, ser. SSYM’01. Berkeley,
CA, USA: USENIX Association, 2001, pp. 25–25. [Online]. Available:
http://dl.acm.org/citation.cfm?id=1267612.1267637
J. Trostle, “Timing attacks against trusted path,” in Security and Privacy,
1998. Proceedings. 1998 IEEE Symposium on, May 1998, pp. 125–134.
[35] L. Zhuang, F. Zhou, and J. D. Tygar, “Keyboard acoustic emanations
revisited,” ACM Trans. Inf. Syst. Secur., vol. 13, no. 1, pp. 3:1–3:26, Nov.
2009. [Online]. Available: http://doi.acm.org/10.1145/1609956.1609959
[36] M. Vuagnoux and S. Pasini, “Compromising electromagnetic emanations
of wired and wireless keyboards,” in Proceedings of the 18th Conference
on USENIX Security Symposium, ser. SSYM’09. Berkeley, CA,
USA: USENIX Association, 2009, pp. 1–16. [Online]. Available:
http://dl.acm.org/citation.cfm?id=1855768.1855769
[37] K. Zhang and X. Wang, “Peeping tom in the neighborhood: keystroke
eavesdropping on multi-user systems,” in Proceedings of the 18th
conference on USENIX security symposium, ser. SSYM’09. Berkeley,
CA, USA: USENIX Association, 2009, pp. 17–32. [Online]. Available:
http://dl.acm.org/citation.cfm?id=1855768.1855770
[38] Y. Zhang, A. Juels, A. Oprea, and M. K. Reiter, “Homealone:
Co-residency detection in the cloud via side-channel analysis,” in
Proceedings of the 2011 IEEE Symposium on Security and Privacy, ser.
SP ’11. Washington, DC, USA: IEEE Computer Society, 2011, pp.
313–328. [Online]. Available: http://dx.doi.org/10.1109/SP.2011.31
929930
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:07 UTC from IEEE Xplore.  Restrictions apply.