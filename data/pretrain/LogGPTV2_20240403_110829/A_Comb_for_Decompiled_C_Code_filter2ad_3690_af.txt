5
6
4
3
1
2
5
6
4
3
Figure 14: Left – An example graph. Node 1 is the entry and 5 is the
exit. Middle – Dominator tree of the graph on the left. Edges in this
tree go from immediate dominator to the dominated node. Right –
Post-dominator tree of the graph on the left. Edges in this tree go
from immediate post-dominator to post-dominated node.
Informally, dominance describes, given a node, which nodes have
to be traversed on all paths from the entry, which must be present
and unique, to that node. Given a graph and two nodes 𝐴 and 𝐵, 𝐴
dominates 𝐵 iff every path from the entry to 𝐵 contains 𝐴. 𝐴 properly
dominates 𝐵 if 𝐴 dominates 𝐵 and 𝐴 ≠𝐵. 𝐴 immediately dominates
𝐵 if 𝐴 properly dominates 𝐵 and 𝐴 ≠𝐵 and it does not exist a node
𝐶 such that 𝐴 properly dominates 𝐶 and 𝐶 properly dominates 𝐵.
Conversely, post-dominance is related to which nodes must be
traversed on paths from a given node to the exit, if this is present
and unique. In cases where there is not a single exit node post-
dominance is not defined. The node 𝐴 post-dominates 𝐵 if every path
from 𝐵 to the exit contains 𝐴. 𝐴 properly post-dominates 𝐵 if 𝐴 post-
dominates 𝐵 and 𝐴 ≠𝐵. 𝐴 immediately post-dominates 𝐵 if 𝐴 prop-
erly post-dominates 𝐵 and 𝐴 ≠𝐵 and it does not exist a node 𝐶 such
that 𝐴 properly post-dominates 𝐶 and 𝐶 properly post-dominates 𝐵.
Dominator and Post-Dominator Tree. The dominator tree (and
the post-dominator tree) are a compact representation of the dom-
inance (and post-dominance) relationship withing a graph. The
dominator tree (DT) contains a node for each node of the input
graph, and an edge from node 𝐴 to node 𝐵 iff 𝐴 is the immediate
dominator of 𝐵. The resulting graph is guaranteed to be a tree since
each node except the entry node has a unique immediate dominator.
As a consequence, the entry node is the root of the dominator tree.
Whenever the exit of a graph is unique, it is possible to build an anal-
ogous data structure for the post-dominance relationship, called
post-dominator tree (PDT). A well known and widely used algorithm
for calculating a dominator tree is the Lengauer-Tarjan’s algorithm,
that has the peculiarity of having an almost linear complexity [17].
Examples of dominator and post-dominator tree for a CFG are
represented in Figure 14.
A GRAPHS BASICS
This section introduces the fundamental concepts to understand
the design of the Control Flow Combing algorithm, described in
Section 4.
Graphs. A directed graph is a pair 𝐺 =⟨𝑉 ,𝐸⟩, where 𝑉 is a set, and
𝐸 ⊂𝑉 ×𝑉 is a set of pairs of element of 𝑉 . Each 𝑣 ∈𝑉 is called a node,
and each 𝑒 =⟨𝑣1,𝑣2⟩ is called an edge. Given 𝑒 as defined above, 𝑣1
is said to be a predecessor of 𝑣2, while 𝑣2 is said to be a successor of
𝑣1. 𝑒 is said to be outgoing from 𝑣1 and 𝑖𝑛𝑐𝑜𝑚𝑖𝑛𝑔 in 𝑣2. 𝑣1 is called
the source of 𝑒 and 𝑣2 is called the target of 𝑣1. A sequence of edges
𝑒1 = ⟨𝑣1,1,𝑣1,2⟩,...,𝑒𝑛 = ⟨𝑣𝑛,1,𝑣𝑛,2⟩, is called a path if ∀𝑘 = 1,...,𝑛−1
holds 𝑣𝑘,2 =𝑣𝑘+1,1.
Control Flow Graphs. A directed graph used to represent the
control flow of a function in a program.
Each node of a CFG is called a basic block and represents a se-
quence of instructions in the program that are executed sequentially,
without any branch with the exception of the last instruction in
the basic block.
Each edge in a CFG is called a branch. A branch 𝑏 =⟨𝐵𝐵1,𝐵𝐵2⟩ in a
CFG, represents the notion that the execution of the program at the
end of 𝐵𝐵1 might jump to the beginning of 𝐵𝐵2. Branches can be con-
ditional or unconditional. A branch 𝑏 is unconditional if it is always
taken, independently of the specific values of conditions in the pro-
gram at runtime. The source 𝑠 of an unconditional branch 𝑏 has no
other outgoing edges. Conversely, a branch 𝑏 is called conditional if
it might be taken by the execution at runtime, depending on the run-
time value of specific conditions in the program. The source of a con-
ditional branch always has multiple outgoing edges and the condi-
tions associated to each outgoing edge are always strictly exclusive.
Finally, a CFG representing a function has a special basic block,
called entry node, entry basic block, or simply entry, that represents
the point in the CFG where the execution of the function starts.
In the remainder of this work, where not specified otherwise,
we will refer to CFGs.
Depth First Search. The concept of Depth First Search (DFS) [14]
is very important for the rest of this work. Briefly, DFS is a search
algorithm over a graph, which starts from a root node, and explores
as far as possible following a branch (going deep in the graph, hence
the name), before backtracking and following the other branches.
When the algorithm explores a new node it is pushed on a stack,
and, when the visit of the subtree starting in that node is completed,
it is popped from the exploration stack. Such traversal can be used
both for inducing an ordering on the nodes of a graph, and to cal-
culate the set of retreating edges (informally, edges that jump back
in the control flow). Directed graphs without retreating edges are
called Directed Acyclic Graphs (DAG). A Depth First Search induces
the following orderings of the nodes of a graph:
Preorder. Ordering of the nodes according to when they were first
visited by the DFS and, therefore, pushed on the exploration stack.
Postorder. Ordering of the nodes according to when their sub-
tree has been visited completely and, therefore, popped from the
exploration stack.
Reverse Postorder. The reverse of postorder.
Dominance and Post-Dominance. Other two fundamental con-
cepts in program analysis are dominance and post-dominance.
Session 12: Software Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan649void sub43E100 ( void *a1 , int a2 ) {
...
v4 = *( result + 0 xc );
if ( a2 >= v4 )
v5 = *( result + 8) + v4 ;
if ( a2 = v4 )
break ;
i ++;
result += 0 x28 ;
...
}
Figure 15: Snippets which shows the reuse of the condition a2 >= 4
on the same execution path
B CASE STUDIES
This section is devoted to a comparison of our solution with DREAM.
We need a special section for this since the only artifacts of decom-
pilation available from DREAM are the ones included in a whitepa-
per [20] cited in [22]. In this document, for every sample of code
decompile by DREAM is present the corresponding code decom-
piled by Hex-Rays. Unfortunately, we were not able to recover the
original functions (in terms of binary code) used for the evaluation
of DREAM. This is due to the fact that the presented snippets be-
longs to malware samples for which a lot of different variants are
available.
We observe that the provided Hex-Rays Decompiler decompiled
source resembles very closely the original assembly representation
(e.g., due to the abundance of goto statements). Therefore, in order
to be able to compare our results with DREAM’s, we decided to use
the Hex-Rays Decompiler decompiled sources as a starting point
for obtaining the CFG of the functions. Then, in turn, apply our
algorithm, and obtain the revng-c decompiled sources.
To assess on a large scale how revng-c performed compared to
DREAM, we collected the mentioned metrics on both the DREAM
decompiled sources provided in the whitepaper, and on the sources
produced by revng-c.
Table 3 presents the results we obtained. The higher cyclomatic
complexity in code produced by DREAM is due to the predicated
execution-like code. In fact, in this cases, the same condition will be
employed multiple times as a state variable that enables or disables
certain portions of the code. This approach forces the analyst to
keep track of the state of the variables, increasing its mental load
in a non-negligible way. As we can see, both DREAM and revng-c
provide decompiled sources without goto statements, but DREAM
presents reuse of the conditions as expected and informally ex-
plained throughout the paper. As a concrete example of conditional
reuse, consider the snippet in Figure 15 (lines from 11 to 17 extracted
from the snippet 1.5 in DREAM whitepaper [20]), we can see how
the condition a2 >= v4 is reused twice on the same execution path.
As an additional example, Figure 16 compares how a situation
that DREAM (on the left of the listing) handles through predicated
execution is handled with duplication in revng-c (on the right of
the listing). The revng-c listing has been manually modified to re-
flect the same variable names used by DREAM. Also some optimiza-
tions in terms of code readability have been performed, but these
changes do not concern the control flow, but are simple aesthetic
Cridex4
ZeusP2P
SpyEye
OverlappingLoop
DREAM revng-c
5
5
15
3
9
9
19
4
Table 3: This table presents the cyclomatic complexity of the code
produced by DREAM and revng-c. As we can see, DREAM consis-
tently presents higher figures compared to revng-c due to the high
number situations in which conditions are reused multiple times.
improvements. We can see that, while DREAM uses a predicated
execution approach, guarding the statement at line 11 with a compli-
cated condition. On the other hand, revng-c duplicates some code,
in this case the assignment, directly where the conditions to eval-
uate if the assignment needs to be performed are available, specifi-
cally at line 5. The idea is to inline the portion of code, paying a cost
in terms of duplication, instead of deferring it, but paying a cost
in terms of mental load necessary to understand when this assign-
ment is actually executed. In the example, the cost is visible in the
DREAM snippet as the convoluted condition of the if statement at
lines 9 and 10. In this case, duplication also highlights immediately
what value is assigned to v2, that is the return value of the function.
In this section we illustrated why we think that predicated ex-
ecution is suboptimal in terms of mental load for the analyst that
reads the decompiled code. The point is that in presence of pred-
icated execution, different parts of the code in different conditional
constructs are executed on the basis of the state of the conditional
variable. This causes a mix of control flow and information on the
state of the conditional variable, which causes the heavy mental
load. Of course this is something that can be present in C code in
principle, but the predicated execution introduced by DREAM push
this to the limit where it becomes an impediment for the analyst.
We have done this by highlighting in a couple of examples where
this happens and how we approach instead the decompilation of the
same snippet of code, and by showing that the predicated execution
approach increases the cyclomatic complexity of the code.
During the design of the validation of our work, we also eval-
uated the possibility of conducting an user study to evaluate the
performance of different decompilers, as done in [21]. However, we
deemed that such kind of user study is really helpful to evaluate
the overall performance of a decompiler tool only once aspects
orthogonal to what presented in this paper are developed, such
as the identification of library functions and type identification
techniques. In this paper instead, we focused on the control flow
recovery portion of the decompilation task, and this led us to set
up the experimental evaluation in the way we did. Anyway, we do
not exclude to conduct an user study, once the other mentioned
aspects of the decompiler have matured.
Session 12: Software Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan6501
2
3
4
5
6
7
8
9
10
11
12
13
14
15
if (! cond1 && ! cond2 ) {
v4 = sub4634E2 ( a1 + a2 *4 , a7 , 0, ...) ;
v2 = v4 ;
if ( v4 ) {
cond3 = v4 == -4;
...
}
}
if (( cond1 || v4 ) && ( cond1 || ! cond2 )
&& ( cond3 || ! v3 ) && (! cond1 || ! v3 ))
v2 = -3;
if (! HeapValidate ( GetProcessHeap () , 0, lpMem ))
return v2 ;
HeapFree ( GetProcessHeap () , 0, lpMem );
return v2 ;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
if ( var_4 ) {
v4 = sub4634E2 ( a1 + a2 *4 , a7 , 0, ...) ;
if ( v4 ) {
if ( v4 == -4) {
v2 = -3;
} else {
v2 = v4
}
if (! HeapValidate ( GetProcessHeap () , 0, lpMem ))
return v2 ;
HeapFree ( GetProcessHeap () , 0, lpMem );
}
...
}
return v2 ;
Figure 16: Side by side SpyeEye listings of the decompiled source by DREAM (on the left) and revng-c (on the right).
Session 12: Software Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan651