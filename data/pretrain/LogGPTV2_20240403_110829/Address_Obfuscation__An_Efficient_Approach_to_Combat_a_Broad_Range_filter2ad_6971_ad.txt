the stack or heap. In the case of heap, if the overﬂow
attack overwrites critical data within the same malloc-ed
block as the target of the copy operation, then random-
ization does not help. Otherwise malloc randomization
is effective, with the effectiveness increasing proportion-
ately with the number of malloc blocks that are overwrit-
ten by the attack. Similarly, if the buffer and vulnerable
data appear on the same stack frame, our current imple-
mentation does not provide any help. However, if they
reside in different stack frames, then some level of pro-
tection is available, depending on the distance between
the buffer and the vulnerable data.
The scope of protection can be expanded using the tech-
nique presented in [16], where all of the sensitive data
(such as function and data pointers) can be located at
addresses below the starting address of any buffer. Since
the overﬂows can only move upward in memory, they
can never reach from the buffer to a sensitive data loca-
tion without crossing over into previous stack frames, in
which case the return address will be corrupted.
Our current
implementation provides no protection
against relative address-dependent overﬂows that cor-
rupt data in the static area. A fuller implementation of
address obfuscation, which includes reordering of static
variables as well as padding between them, will indeed
114
12th USENIX Security Symposium 
USENIX Association

@


K
possible values.
provide a good degree of protection against data modiﬁ-
cation attacks in the static area.
3.1.5 Heap Overﬂow and Double-Free Attacks
Due to the lack of adequate checking done by mal-
loc on the validity of blocks being freed, code which
frees the same block twice corrupts the list of free blocks
maintained by malloc. This corruption can be ex-
ploited to overwrite an arbitrary word of memory with
an arbitrary value [2]. A heap overﬂow attack achieves
the same effect through a buffer overﬂow that also cor-
rupts the data structures maintained by malloc [23].
Both of these are absolute address-dependent attacks,
and the protection provided by address obfuscation is
quite good, as the address of a single word is random-
ized over E
3.1.6 Integer Overﬂow Attacks
Integer overﬂow attacks exploit an integer overﬂow to
bypass runtime checks in a program. Since an integer
has a ﬁxed size, an overﬂow during a computation causes
it to change its value in an undeﬁned manner (typically,
the value “wraps around” from a large positive value to
a small negative one, or vice-versa). Due to the wrap-
around, boolean conditions which test the values of inte-
gers resulting from arithmetic overﬂow are often incor-
rectly evaluated. For example, if M
is sufﬁciently large,
 can overﬂow, resulting in a nega-
the expression M
tive value, and causing the condition M
to
evaluate to false, when it should be true. This effectively
disables the bounds checking, allowing an overﬂow at-
tack to be performed in spite of the bounds checking.
The level of protection provided by address obfuscation
from these kinds of attack is the same as for normal
buffer overﬂow attacks. In particular, if the target cor-
rupted by an attack is a pointer, then the probability of
a successful attack is low. This was the case with the
recent Snort integer overﬂow vulnerability. If the attack
targets security critical data, then the protection is sim-
ilar to that for relative address attacks. In particular, a
good degree of protection is available for heap-resident
data, while the level of protection for stack resident data
is some what lesser. As an example, the sshd integer
overﬂow attack involved overwriting a critical piece of
string data with a null character, which was interpreted
by the sshd server to mean that no password was re-
quired for a user to log in. Address obfuscation provides
a good degree of protection against such an attack, while
some of the related approaches such as PointGuard can
be defeated by this attack.
3.2 Speciﬁcally Crafted Attacks
We have identiﬁed three speciﬁc attacks which can be
used to attempt to defeat address obfuscation when the
victim program contains the “right” vulnerability. These
occur when (1) a program has a bug which allows an
attacker to read the memory contents, or (2) an overﬂow
exists that can be used to modify two pointer values (a
buffer pointer and a function pointer), or (3) an overﬂow
can be used to overwrite just the lower part of a pointer.
In the case of (1), the attacker can craft an attack that
succeeds deterministically. In the case of (2) and (3),
the probability of success is signiﬁcantly higher than the
classic attacks, but far from deterministic.
We note all of the attacks discussed in this section re-
quire vulnerabilities that are very uncommon. More-
over, although our current implementation is vulnerable
to these attacks, a full implementation of address obfus-
cation, employing all of the transformations described
in Section 2.1, and using dynamically changing random
values, will be much less vulnerable.
3.2.1 Read/Write Attacks
If a program contains a bug which allows an attacker
to print the values stored in arbitrary memory locations,
then most of the existing security schemes can be com-
promised if there is a vulnerability somewhere in the
program. In the case of address obfuscation, the attacker
can compare pointer values stored in the program against
a local, non-obfuscated copy, and possibly decipher the
obfuscation mapping. A speciﬁc instance of this occurs
when an attacker can control the format-string passed
to a printf, provided the vulnerable print statement
sends its output to the attacker [29]. Given such a vulner-
ability, an attacker can send a format string that would
cause the stack contents to be printed. From the out-
put, the attacker can guess with a high probability (or
with certainty, if no stack frame padding is used) the lo-
cations holding saved frame pointer and return address.
By comparing these values with those that can be ob-
served on their local version of the vulnerable program
that has not been obfuscated, the attacker can identify the
obfuscation mapping. Armed with this mapping, the at-
tacker can develop an attack that will succeed with a high
probability. This time, the attacker will use the standard
format-string attack that uses the n% directive.
We point out that changing just the base addresses of dif-
ferent memory regions, as done with PaX ASLR, does
not help with this attack. Most other techniques, such as
PointGuard and StackGuard are also vulnerable to this
attack. In the case of PointGuard, the obfuscated stack
can be compared to a non obfuscated process, and the
xor mask value can be inferred. In the case of Stack-
Guard, the stack can be examined to determine the ca-
USENIX Association
12th USENIX Security Symposium 
115
F
L
1
N
N

R
S
M
V
M
Y
nary value, and then stack smashing can be used.
Address obfuscation, as implemented now, seems to pro-
vide some additional protection over ASLR: it is no
longer possible to deterministically identify the location
of frame pointer or return address. But this added dif-
ﬁculty does not translate into additional protection: the
format-string based read attack does not cause the pro-
gram to crash, so the attacker can perform multiple at-
tacks to read the stack multiple times until he/she can de-
termine the frame pointer with certainty. However, if the
stack-frame padding is varied continuously at runtime,
then address obfuscation will provide signiﬁcant degree
of protection. In this case, the location of the buffer, the
saved frame pointer, as well as the return address, will
change between the time the attacker read the contents
of the stack and the time he/she tries to modify the return
address. This will signiﬁcantly decrease the chances of
a successful attack. Probability of a successful existing-
code attack can also be decreased signiﬁcantly by using
the more general form of address obfuscation of code,
which involves reordering routines, etc.
3.2.2 Double Pointer Attacks
A program which contains a both a (preferably stack-
allocated) pointer to a buffer and a buffer overﬂow vul-
nerability can be exploited to work around obfusca-
tion. For example, consider the following code frag-
ment, which is similar to one suggested for defeating
StackGuard [7]:
void
f(char *user_input1, char *user_input2) {
char *buf1 = malloc(100);
char buf2[100];
strcpy(buf2, user_input1);
strncpy(buf1, user_input2, 100);
...
The steps required to exploit this code are as follows.
likely to be
First, the attacker can guess an address :
valid (somewhere in the heap is a good choice). Sec-
ond, the ﬁrst strcpy to buf2 can be overﬂowed to
, setting
overwrite the the top stack locations with :
both buf1 and the saved return address to equal :
.
Once this is done, the strcpy to buf1 will copy
. user_input2 should contain
user_input2 to :
the injected code. When the function returns, it will
, which is the start of the code injected
jump to address :
via user_input2.
The probability of success with this attack is propor-
in
tional to the probability of guessing a valid address :
memory. This probability is small for programs that use
small amounts of memory as compared to the amount
of randomization. For instance, if the program uses a
megabyte of memory, then the probability success (with
such that :
` where `
a 100MB padding) is one in a hundred. The same line of
reasoning holds with PointGuard: the attacker can over-
, but these val-
write buf1 and the return address with :
is the
ues will be interpreted as :
xor mask used by PointGuard to encrypt pointers. This
means that the probability of success is proportional to
corresponds
that of guessing a :
to a writable portion of the memory. This probability is
given by (size of data memory used by program)/(size of
address space), a quantity that is smaller than the corre-
sponding number for address obfuscation.
3.2.3 Partial Overwrite Attacks
A partial overwrite attack is an attack which overwrites
only part of a targeted value. For example, under the
x86 architecture, an overﬂow could overwrite just the
least signiﬁcant byte of the return address. (This is hard
to achieve if the buffer overﬂow was the result of an
unchecked strcpy or similar function, since the termi-
nating null character would clobber the rest of the return
address. Thus, we need a buffer overﬂow that does not
involve strings.) Since the only transformation made to
code addresses is that of changing the base address, and
since the quantity of change is constrained to be a multi-
ple of the page size (4096 bytes on Linux), the location
pointed by the return address is predictable when we we
change its last 8 bits.
If exploitable code (i.e., code that can be used as a tar-
get in the case of existing code attacks) can be found
within 256 bytes of the return address of a function with
buffer-overﬂow vulnerability, then this attack will work
against address obfuscation. However, it is very unlikely
that such exploitable code can be found, so the attack
suggested in [3] is more elaborate. Speciﬁcally, the at-
tack involves the use of a call to the printf function
in the caller code that precedes the call to the function
with buffer overﬂow vulnerability. The attack then mod-
iﬁes the return address so that a return goes to the in-
struction that calls printf. The argument of the vul-
nerable function, which was attacker-provided, now be-
comes the argument to printf. At this point, the at-
tacker can print the contents of the stack and then pro-
ceed as with the case where a format string bug allowed
the attacker to read the stack contents.
Note that the stack-frame padding signiﬁcantly increases
the difﬁculty of carrying out this attack. In particular,
there is a signiﬁcant level of uncertainty (of the order of
128 bytes) in the distance between the vulnerable buffer
and the return address, which the attacker can overcome
only through guessing. If additional code address obfus-
cation transformations are used, (for instance, reordering
of routines or introducing gaps within routines) then the
attack becomes even harder.
116
12th USENIX Security Symposium 
USENIX Association
Z
\
^
Z
\
^
`
Program
tar
wu-ftpd
gv
bison
groff
gzip
gnuplot
-1
0
0
1
-1
-1
0
(i
of mean)
3.4
1.4
6.1
2.0
1.1
1.9
0.9
Combination d
i Overhead
Standard Deviation
Combination d
i Overhead
Standard Deviation
0
2
2
8
13
14
21
(i
of mean)
5.2
2.1
7.1
2.3
0.7
2.5
1.0
Figure 5: Performance overhead introduced by address obfuscation.
4 Performance
We have collected performance data on the implementa-
tion of randomization of different memory regions. The
following randomizations were implemented:
relocating the base of the stack, heap, and code re-
gions
introduction of random gaps within stack frames,
and at the end of memory blocks requested by mal-
loc. The stack frame gaps were determined statically
for each routine, while the malloc gaps can change
with each malloc request.
We studied two different approaches for randomizing the
start address of the executable:
 Combination 1: static relocation performed at link-
 Combination 2: dynamic relocation performed at
time.
load-time.
Both approaches incorporate all of the transformations
mentioned above. Note that dynamic relocation requires
the executable be compiled into position-independent
code, which introduces additional runtime overheads.
Figure 5 shows the performance overheads due to the
two combinations of transformations. All measurements
were taken on an 800 MHz, Pentium III, 384 MB RAM
machine with Red Hat 7.3 Linux OS. Average execution
(system + user) time was computed over 10 runs. The
overheads measured were rounded off to the nearest in-
tegral percentage. (Further precision was meaningless,
given the standard deviations shown in the table.)
incurs
From the table, we see that combination 5
essentially no runtime overhead (note that the nega-
tive overheads are below the standard deviation and are
hence not statistically signiﬁcant).
7 has noticeable runtime overhead. This
Combination 5
is because it requires position-independent code, which
is less efﬁcient, since it performs extra operations before
every procedure call, and every access to static data. On
the other hand, when code is already being distributed in
DLL form, combination (2) provides broad protection
against memory error exploits without any additional
overhead.
5 Related Work
5.1 Runtime Guarding Against Stack-Smashing
and Format String Attacks
These techniques transform or augment a program to
protect the return address or other speciﬁc values from
being overwritten. Stackguard [11] is a modiﬁed version
of the gcc compiler in which the generated code places
canary values around the return address at runtime, so
that any overﬂow which overwrites the return address
will also modify the canary value, enabling the overﬂow
to be detected. StackShield [6] and RAD [9] are based
upon a similar modiﬁcation to the compiler, but keep a
separate copy of the return address instead of using ca-
nary values. Libsafe and Libverify [6] are dynamically
loaded libraries which provide protection for the return
address without requiring recompilation. Etoh and Yoda
[16] use a source-code transformation approach which
uses both canary values and relocates stack-allocated ar-
rays so that they cannot overﬂow into local variables.