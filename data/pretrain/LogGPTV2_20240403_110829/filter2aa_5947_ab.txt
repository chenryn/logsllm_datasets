=> 50 ← 5 * 10 的执行结果
>> 100 / 4
=> 25 ← 100 / 4 的执行结果
```
在一般的编程语言里，乘法运算符用 `*`，除法运算符用 `/`。Ruby 也延续了这个习惯。
让我们再试一下复杂点的四则运算。四则运算的基本原则是“先乘除后加减”，Ruby 也遵循这个原则。也就是说，
```
20 + 8 / 2
```
的结果是 24。如果 20 + 8 后再想除 2，可以使用括号，
```
(20 + 8) / 2
```
这时答案为 14。
**数学相关的函数**
除四则运算外，Ruby 中还可以使用数学函数，如平方根、sin 和 cos 等三角函数、指数函数等。使用数学函数时，必须在函数前加上 `Math.` 标识。
> 不想在函数前加 Math. 时，则需要 include Math 这段代码。
求正弦时使用 sin 方法，求平方根时使用 sqrt 方法。执行相对应的函数方法，即可得到该函数的计算结果。一般我们称这一过程为“执行方法后得到结果”，所得到的结果则称为返回值。
```ruby
> irb --simple-prompt
>> Math.sin(3.1415)
=> 9.26535896604902e-05 ← sin 方法的返回值
>> Math.sqrt(10000)
=> 100.0 ← sqrt 方法的返回值
```
> 不同的 Ruby 版本，或者在不同平台下执行时，返回值的位数可能会不同。
第一个返回值的结果是 9.26535896604902e-05，这是一种用来表示极大数或极小数的方法。“（小数）e（整数）”表示“（小数） *10 的（整数）次幂”。这个例子中，其结果值为“9.26535896604902 * 10 的-5 次幂”，也就是 0.0000926535896604902。
# 变量
变量是程序里不可缺少的元素之一。可以将其理解为给对象贴上的标签。
我们可以像下面这样给对象贴上标签
`变量名 = 对象`
我们称这个过程为“将对象赋值给变量”。
```ruby
alphabet = "abcdefg"
num = 10
age = 18
name = 'TAKAHASHI'
```
为了说明如何使用变量，让我们看看以下这个求长方体表面积和体积的例子
```ruby
x = 10
y = 20
z = 30
area = (x*y + y*z + z*x) * 2
volume = x * y * z
print "表面积=", area, "\n"
print "体积=", volume, "\n"
```
若不使用变量，则程序会像下面这样：
```ruby
print "表面积=", (10*20 + 20*30 + 30*10) * 2, "\n"
print "体积=", 10*20*30, "\n"
```
这样一来，一旦要修改一个值，那么好几个地方也必须一起修改。上例只有两行代码，修改起来并不太麻烦，但遇到比较复杂的程序时，修改起来就会非常费劲。
另外，变量还可以清晰地表示某个值所代表的含义。因此，为变量起一个容易理解的名称是非常重要的。例如，
```ruby
hoge = (foo*bar + bar*baz + baz*foo) * 2
funi = foo * bar * baz
```
像这样的代码，使人完全搞不清楚这个程序的目的。所以，建议大家平时多加注意，最好使用 area、volume 等意义明确的单词作为变量名。
**print方法和变量**
让我们再回顾一下 print 方法。
```ruby
print "表面积 =", area, "\n"
```
这个 print 方法有三个参数："表面积 = "、area、"\n"。print 方法会按照顺序，输出这三个参数。
"表面积 =" 表示值为“表面积 =”的字符串，因此 print 方法会直接输出。area 表示 area 这个变量引用的对象，在这个例子里就是 2200 这个整数，因此 print 方法输出的是该整数值。
最后那个 "\n" 是换行符，因此 print 方法也会直接输出。
这三个值经过 print 方法处理后，会在屏幕输出“表面积 = 2200”加换行的结果。
传递给 print 方法的字符串参数也可以像下面这样写：
```ruby
print "表面积 = #{area}\n"
```
"表面积 = #{area}\n" 为一个整体的字符串。#{area} 这样的写法，表示把 area 的值嵌入到字符串中。在字符串里使用 #{...} 这样的写法，可以把通过计算后得到的值嵌入到字符串中。输出结果里除了可以嵌入变量名，也可以嵌入 "表面积 = #{(x*y + y*z + z*x) * 2}\n" 这样的计算公式，得到的输出结果是一样的。
一般向屏幕输出结果时，我们都希望同时输出换行符，因此使用 puts 方法时，连 \n 也都不需要了，这样程序会变得更加简洁。
```ruby
puts "表面积 = #{area}"
```
# 注释
我们在程序里可以写注释。注释虽然写在程序里面，但程序并不会执行注释的内容，也就是说，注释的内容对程序的执行结果不会产生任何影响。
大家也许会问：“为什么会在程序里写这种与程序运行无关的东西呢？”的确，对于只执行一次就可以的简单程序，并不需要特别的注释。但是，一般来说，我们都会多次使用写好的程序。那么，若希望记录程序的名称、作者、发布条件等信息，程序说明等内容时，就需要用到注释。
Ruby 用 `#` 表示注释的开始。某行是以 `#` 开头时，则整行都是注释。某行中间出现 `#` 时，则 `#` 以后部分就都是注释。另外，行的开头用 `=begin` 和 `=end` 括起来的部分也是注释。这样的注释方法，在程序开头或结尾写长说明时会经常用到。
```ruby
=begin
《Ruby 基础教程（第 4 版）》示例
注释的使用示例
2006/06/16 创建
2006/07/01 追加一部分注释
2013/04/01 第 4 版更新
=end
x = 10  # 宽
y = 20  # 长
z = 30  # 高
# 计算表面积和体积
area = (x*y + y*z + z*x) * 2
volume = x * y * z
# 输出
print "表面积=", area, "\n"
print "体积=", volume, "\n"
```
除此以外，注释还有使某行代码“暂时不执行”的作用。
Ruby 没有 C 中使行的某部分成为注释的写法，只要是以 `#` 开始的部分，到行末为止一定都是注释。
# 控制语句
编程语言中都有控制语句。
控制语句能让程序在某种条件下，改变执行顺序，或者只执行某一部分。
**控制语句的分类**
控制语句大致可以分成以下几类。
- 顺序控制：按照程序的编写顺序，从头到尾执行。
- 条件控制：若某条件成立，则执行 ○○，否则执行 ××。
- 循环控制：在某条件成立之前，反复执行 ○○。
- 异常控制：发生某种异常时，执行 ○○。
顺序控制是程序最常见的处理方式。若不做特殊处理，程序会按照代码的编写顺序执行。
条件控制，是指根据条件执行分支处理。如果没有满足条件，程序会跳过某部分处理，继续执行其他处理。在 Ruby 中，可使用的条件判断语句有 if、unless、case 等。
循环控制，是指根据条件反复执行某个处理。在这种情况下，该处理的执行顺序会与程序编写的顺序不同，执行过一次的程序，会从头再执行一次。
异常控制有点特殊。程序执行时，意料之外的错误发生后，就会跳出正在执行的那部分程序，然后执行其他地方的程序，使程序能继续执行下去。根据实际情况，有时也会让程序马上结束。
接下来，我们进一步介绍条件控制和循环控制。
# 条件判断：if～then～end
if 语句用于根据条件变化，改变程序的行为。if 语句的语法如下所示：
```
if 条件 then
 条件成立时执行的处理
end
```
条件一般是指能返回 true 或者 false 的表达式。例如比较两个值，相同则返回 true，不同则返回 flase，这样的表达式可作为条件。
我们在比较数值的大小时，会用到等号、不等号等运算符。在 Ruby 中，`=` 已经被用作赋值运算了，因此判断是否相等的运算符要用两个并列等号 `==` 来代替 `=`。另外，`≤` 和 `≥` 运算符在 Ruby 中分别用 `=` 来替代。
条件表达返回的结果为 true 或者 false，true 表示条件成立，false 表示条件不成立。
```
p (2 == 2)  #=> true
p (1 == 2)  #=> false
p (3 > 1)   #=> true
p (3 > 3)   #=> false
p (3 >= 3)  #=> true
p (3  false
p (3  false
p (3  true
```
我们也可以使用==运算符比较字符串。字符串内容相同则返回 true，内容不同则返回 false。
```
p ("Ruby" == "Ruby")    #=> true
p ("Ruby" == "Rubens")  #=> false
```
判断值不相等时要使用 `!=` 运算符，它与 `≠` 意思相同。
```
p ("Ruby != "Rubens")    #=> true
p (1 != 1)               #=> false
```
那么，接下来让我们来看一下如何使用这些运算符编写条件语句。
一个简单的程序：变量 a 大于等于 10 时输出 bigger，小于 9 时输出 smaller。
```
a = 20
if a >= 10 then
  print "bigger\n"
end
if a = 10
  print "bigger\n"
end
```
如果希望对条件成立和条件不成立时采取不同的处理，我们可以使用 else 关键字。
```
if 条件 then
 条件成立时执行的处理
else
 条件不成立时执行的处理
end
```
使用 else 关键字改写刚才的程序后，会变成下面这样，
```
if a >= 10
  print "bigger\n"
else
  print "smaller\n"
end
```
# 循环
有时，我们会遇到希望多次循环执行同样的处理的情况。下面，我们来介绍两种执行循环处理的方法。
**while 语句**
while 语句是执行循序时用到的一种基本语句。同样地，do 关键字可以省略。
```
while 循环条件 do
 希望循环的处理
end
```
按顺序输出从 1 到 10 十个数字
```
i = 1
while i <= 10
  print i, "\n"
  i = i + 1
end
```
**times 方法**
循环处理的循环次数如果已确定，使用 times 方法会更加简单。
```
循环次数 .times do
 希望循环的处理
end
```
输出 100 行“All work and no play makes Jack a dull boy.”
```
100.times do
  print "All work and no play makes Jack a dull boy.\n"
end
```
times 方法被称为迭代器（iterator）。迭代器是 Ruby 的一个特色功能。从迭代器的英语拼写方法我们可以知道，迭代器表示的是循环（iterate）的容器（-or）。类似地，运算符（operator）也就是运算（operate）的容器（-or），等等。总之，迭代器就是指用于执行循环处理的方法。
Ruby 除了 times 方法外，还提供了很多迭代器，典型的有 each 方法。