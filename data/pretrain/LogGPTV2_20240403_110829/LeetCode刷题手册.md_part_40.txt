return res
if pl == preMiddle {
// fmt.Printf("pl = %v p2 = %v preMiddle = %v head = %v\n", pl.val, p2.val
p2 = preMiddle.Next 
res = append(res, head.val)
if p2 != nil && pl.val != p2.val {
if pl.val == p2.val {
head = head.Next
} else { 
return false
break
res = false
// fmt.Printf("---
pl = pl.Next 
p2:
= p2.Next
---pl = %v p2 = %v preMiddle = %v head = %v\n", pl,
---
## Page 385
解题思路
×，满足×是p、q的祖先且×的深度尽可能大（一个节点也可以是它自己的祖先）。"
百度百科中最近公共祖先的定义为："对于有根树T的两个结点p、α，最近公共祖先表示为一个结点
给定一个二叉搜索树,找到该树中两个指定节点的最近公共祖先。
题目大意
Note:
Example 2: 
Example 1:
Given binary search tree: root = [6,2,8,0,4,7,9,null,null,3,5]
we allow a node to be a descendant of itself)."
between two nodes p and q as the lowest node in T that has both p and q as descendants (where 
According to the definition of LCA on Wikipedia: "The lowest common ancestor is defined
·在二叉搜索树中求两个节点的最近公共祖先，日
● p and q are different and both values will exist in the BST.
● All of the nodes' values will be unique.
of itself according to the LCA definition.
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant
Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4 
Explanation: The LCA of nodes 2 and 8 is 6.
Output: 6 
Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output:2
最近公共祖先非常简单。
3
4
由于二叉搜索树的特殊性质，所以找任意两个节点的
5
6
8
---
## Page 386
 Given the following binary tree: root = [3,5,1,6,2,0,8,null,null,7,4] 
we allow a node to be a descendant of itself)."
aaume suepuansap se b pue d yoq seu peun I ui apou psamol au se b pue d sapou om uaamag
According to the definition of LCA on Wikipedia: "The lowest common ancestor is defined
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
题目
 236. Lowest Common Ancestor of a Binary Tree
代码
package leetcode
func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {
if p == nil ll q == nil ll root == nil { 
华
return root
if p.val > root.val && q.val > root.val { 
if p.val  0 && nums[window[len(window)-1]] = k && window[O］ = k-1 { 
 result = append(result, nums[window[o]]) // the left-most is the index
 window = window[0 : len(window)-1] 
 window = window[1:len(window)]
max = a[i+j]
:=
 make([]int,
0.
Ten(nums)-k+1) 
---
## Page 392
代码
解题思路
编写一个高效的算法来搜索 m × n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性:
题目大意
Given target = 20, return false.
Given target = 5, return true.
 Consider the following matrix:
Example:
·给出一个二维矩阵，
·每列的元素从上到下升序排列。
·每行的元素从左到右升序排列。
func searchMatrix240(matrix [][]int, target int) bool {
//解法一模拟，时间复杂度0(m+n)
package leetcode
if len(matrix) == 0 {
一开始在最右边一列中查找的时间复杂度是 O(m)，所以最终的时间复杂度为 O(m+n)。
的行，是我们接着要搜索的。在行中搜索是从最右边开始往左边搜索，时间复杂度是 O(n)，算上
大的元素，所以我们可以先从最右边一列开始找到第一个比 target 元素大的元素，这个元素所在
还有一个模拟的解法。通过观察，我们发现了这个矩阵的一个特点，
行或者每一列中利用二分去搜索。这样做时间复杂度为 O(n log n)。
把它拍扁成一维，并不是有序的。首先每一个行或者每一列是有序的，
这一题是第74 题的加强版。第74 题中的二维矩阵完全是一个有序的一维矩阵，但是这一题如果
一个元素要大。要求设计一个算法能在这个矩阵中高效的找到一个数，如果找到就输出 true，找
着下标增大而增大。但是相邻两行的元素并没有大小关系。例如第一行最后一个元素就比第二行第
[18,21,23, 26, 30]
不到就输出 false。
[10,
B
7
 return false
13,
9
S
4，
14,
6
2
17,
12
11,
矩阵的特点是每一个行内，元素随着下标增大而增大，每一列内，元素也是随
19]
15]
2
最右边一列的元素是本行中最
那么我们可以依次在每一
---
## Page 393
Example 1: 
 Given two strings s and t, write a function to determine ift is an anagram of s.
题目
 242. Valid Anagram
Output: true 
Input: s = "anagram", t = "nagaram"
func searchMatrix2401(matrix [][]int, target int) bool 
//解法二二分搜索，时间复杂度 o(n log n)
return false
if len(matrix) == 0 {
for.
return false
for col >= 0 && row  matrix[row][col] {
for low >1
col--
row++ 
return true 
} else{ 
if row[mid] > target {
 high = mid - 1 
-, row := range matrix { 
return true
low = mid + 1 
---
## Page 394
代码
字母就在表里面减一。如果都出现了，最终表里面的值肯定都是〇。最终判断表里面的值是否都是〇即
应 26 个字母。s 中每个字母都对应表中一个字母，每出现一次就加1。然后再扫字符串t，每出现一个
解题思路
给出2 个字符串s 和t，如果t 中的字母在s 中都存在，输出 true，否则输出false。
题目大意
What if the inputs contain unicode characters? How would you adapt your solution to such case?
这道题可以用打表的方式做。先把s 中的每个字母都存在一个 26 个容量的数组里面，每个下标依次对
Follow up:
You may assume the string contains only lowercase alphabets.
Note:
 Example 2: 
可，有非 O的数都输出 false。
func isAnagram(s string, t string) bool {
//解法一
package leetcode
Output: false
Input: s = "rat", t = "car"
for i := 0; i< 26; i++ {
for i := O; i< len(tBytes); i++ {
for i := O;i< len(sBytes); i++ {
if len(sBytes) != len(tBytes) {
tBytes := []byte(t)
sBytes := []byte(s)
 alphabet := make([]int, 26) 
if alphabet[i] != O {