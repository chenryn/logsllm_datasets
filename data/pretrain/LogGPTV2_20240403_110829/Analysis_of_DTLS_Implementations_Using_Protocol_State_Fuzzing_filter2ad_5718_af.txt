a result of a segmentation fault resulting from a null address
read. This bug is a rediscovery of CVE-2017-7243, which is
still unﬁxed in the master branch of the TinyDTLSE.
From inconsistent alert to unreliable handshake protocol.
By analyzing the learned model, we could observe frequent
usage of Alert(DecryptError) messages. This alert is sent by
TinyDTLS whenever it tries to decrypt a record (whether it is
actually encrypted or not), and fails to ﬁnd key material for
the epoch in its internal state. This behavior is in itself rat-
her unproblematic, but TinyDTLS also invalidates the whole
connection in such a case. This can result in connections brea-
king unnecessarily when the ChangeCipherSpec and Finished
messages are received out of order in a regular handshake.
Handshake with invalid epoch numbers. The model for
TinyDTLSC revealed that the server can perform the ﬁrst two
steps of a handshake using ClientHello messages with epoch 1
when no cipher for epoch 0 has yet been negotiated. Upon
further investigation, we were able to complete the hands-
hake by sending ClientKeyExchange, ChangeCipherSpec and
Finished having the same epochs as in a normal handshake
(which are 0, 0 and 1, respectively). The handshake is clearly
invalid and should not have been possible to complete.
7.9 Bugs in OpenSSL
Finished treated as retransmission. After a successful
handshake completion, the OpenSSL server treats retrans-
mitted Finished messages incorrectly. OpenSSL responds to
a newly computed and transmitted Finished message by re-
sending the last ﬂight (ChangeCipherSpec, Finished). The
Finished message received from the server has a different mes-
sage sequence number and verify_data content. An adequate
response would have been either to discard this message, or
to send an alert and possibly terminate the connection.
InternalError alerts.
is sent by
OpenSSL in response to unexpected Finished messages. In-
ternally, OpenSSL is processing the message and trying to
compute the verify_data for the Finished message. However,
due to defensive programming, missing parameters in the ses-
sion context are discovered, the processing of the message is
stopped, and an Alert(InternalError) is returned. An appropri-
ate response should have been an alert indicating the receipt
of an out-of-order message. Alert(UnexpectedMessage) has
been designed for such purposes.
Alert(InternalError)
7.10 Observed Code Patterns
We can conclude that in our analysis we observed several
repeating code patterns, which led to the bugs and vulnerabili-
ties. Most importantly, most of the analyzed implementations
do not use proper state machines. While they attempt to verify
the handshake protocol ﬂow with simple checks in switch sta-
tements, a complete message ﬂow validation is missing. This
was, for example, observed by the analysis of the Scandium
implementation, which was too liberal when it comes to the
message sequence veriﬁcation; only other additional checks
in the code prevented further security vulnerabilities. One
reason for missing state machines could be the fact the DTLS
speciﬁcation [36] does not give a design for one. We believe
that protocol standards should contain such designs and de-
mand that implementations use them.
In the libraries implementing TLS and DTLS, we could
observe that the code is re-used in both protocols. This means
that similar vulnerabilities in one protocol implementation can
inﬂuence the other. For example, we found the authentication
bypass in JSSE by analyzing the DTLS server implementation.
However, our subsequent analysis revealed that the bug is also
applicable to TLS. We expect that similar behaviors will be
found in the future.
Interestingly, both Scandium and PionDTLS include the
same early Finished message bug that was found in JSSE TLS
USENIX Association
29th USENIX Security Symposium    2537
in 2015 [13]. While this again may be attributed to missing
state machine implementation, we believe that this bug is
closely related to an ambiguity, which is mentioned in [36].
the system, though this time it was not introduced by the me-
dium but by the system itself. In their work, a simple majority
voting system was sufﬁcient to address these issues.
As with TLS, the ChangeCipherSpec message is
not technically a handshake message [...]. This cre-
ates a potential ambiguity because the order of the
ChangeCipherSpec cannot be established unambi-
guously with respect to the handshake messages in
case of message loss.
In DTLS up to version 1.2, this ambiguity has to be resolved
by hard-coding the expected ChangeCipherSpec message.
In the recent DTLS 1.3 drafts [16], the problem has been
resolved by removing ChangeCipherSpec messages entirely.
8 Related Work
In this section, we give a brief summary of previous work on
analyses of DTLS and on state fuzzing of security protocols.
Due to the similarity with TLS, most of the attacks appli-
cable to TLS are potentially applicable to DTLS protocol
implementations as well. This includes attacks like Heart-
bleed [37], Bleichenbacher’s attack [7], or CBC padding ora-
cle attacks [43]. One exception is the attack presented by
AlFardan and Paterson in 2012, who adapted padding oracle
attacks to DTLS by using novel DTLS side channels [1]. The
adaptation exploits subtle timing differences between pro-
cessing packets with valid and invalid padding, ampliﬁed by
the processing of subsequent Heartbeat messages. The attack
was applicable to OpenSSL and GnuTLS. In 2013, the same
authors extended their work to a powerful attack breaking
both TLS and DTLS – Lucky13 [2].
Van Drueten obtained some preliminary results on ana-
lyzing DTLS implementations using protocol state fuzzing,
from which this work branched off. His thesis [42] analy-
zed OpenSSL and mbedTLS with a limited input alphabet
and did not reveal any security vulnerabilities. De Ruiter and
Poll [13] used protocol state fuzzing to analyze TLS imple-
mentations and found several security bugs. In comparison,
the models we learn are signiﬁcantly larger, due to complexity
in DTLS introduced by UDP, and our inclusion of several key
exchange algorithms and certiﬁcate settings. Also, as stated
before, some of the bugs we found are only possible under
particular conﬁgurations or are speciﬁc to DTLS.
McMahon Stone et al. [28] extend state learning such that
it also captures time behavior and can operate also over an un-
reliable communication medium. They then use the extension
to analyze implementations of the 802.11 4-Way Handshake
in seven Wi-Fi routers. In dealing with non-determinism, our
work employs some of the same strategies, such as checking
counterexamples against a cache, or using majority voting.
However, it can use a more efﬁcient learning setup, as it does
not have to deal with a lossy medium and resulting timeouts.
Chalupar et al. [9] also had to address non-determinism of
9 Conclusions and Future Work
We have presented the ﬁrst protocol state fuzzing framework
for DTLS. As a basis, in particular for constructing a MAPPER,
we have developed a test framework for DTLS, based on
TLS-Attacker. The MAPPER and test framework implement
DTLS speciﬁcs including explicit sequence number, support
for cookie management, and epoch numbers. In this paper,
we focused on discovering state machine bugs, triggered by
sequences of valid handshake messages. We did not exer-
cise reordering and fragmentation. Nevertheless, we used our
platform to generate models of thirteen widely used DTLS
server implementations, and were able to ﬁnd critical security
vulnerabilities and implementation ﬂaws in them.
There are several directions for future work: (i) The analy-
sis can also explore Record Layer functionality such as frag-
mentation and reordering, by adding a strategy for sending
reordered and fragmented records. Since these functionali-
ties should be handled transparently by the Record Layer, we
can directly use our already learned models as speciﬁcations.
(ii) Our learned models can be used to support systematic tes-
ting with invalid input messages, as is done in protocol fuzzers.
(iii) Our analysis of learned models was performed manually;
automation using model checking techniques should be inves-
tigated, for example, by following the methodology presented
in work for TCP [18] or SSH [19].
Acknowledgements
We would like to thank Jörg Schwenk, our shepherd Kenneth
Paterson, and the anonymous reviewers for many insightful
comments. We also thank Niels van Drueten for his contribu-
tion to an initial version of the test framework.
The research was established at the Lorentz Center works-
hop on Systematic Analysis of Security Protocol Implementa-
tions. It was partially funded by the Swedish Foundation for
Strategic Research (SSF) through the aSSIsT project, the Swe-
dish Research Council, and the Deutsche Forschungsgemein-
schaft (DFG, German Research Foundation) under Germany’s
Excellence Strategy - EXC 2092 CASA - 390781972.
References
[1] Nadhem AlFardan and Kenneth G. Paterson. Plaintext-
recovery attacks against Datagram TLS. In Network and
Distributed System Security Symposium, NDSS 2012,
2012.
[2] Nadhem J. AlFardan and Kenneth G. Paterson. Lucky
thirteen: Breaking the TLS and DTLS record protocols.
2538    29th USENIX Security Symposium
USENIX Association
In 2013 IEEE Symposium on Security and Privacy, pa-
ges 526–540. IEEE, 2013.
[3] Dana Angluin. Learning regular sets from queries
and counterexamples. Information and Computation,
75(2):87–106, 1987.
[4] Nimrod Aviram, Sebastian Schinzel, Juraj Somorovsky,
Nadia Heninger, Maik Dankel, Jens Steube, Luke Va-
lenta, David Adrian, J. Alex Halderman, Viktor Dukho-
vni, Emilia Käsper, Shaanan Cohney, Susanne Engels,
Christof Paar, and Yuval Shavitt. DROWN: Breaking
TLS using SSLv2. In 25th USENIX Security Symposium,
USENIX Security 16, pages 689–706, August 2016.
[5] Benjamin Beurdouche, Karthikeyan Bhargavan, Antoine
Delignat-Lavaud, Cédric Fournet, Markulf Kohlweiss,
Alfredo Pironti, Pierre-Yves Strub, and Jean Karim Zin-
zindohoue. A messy state of the union: Taming the
composite state machines of TLS. Commun. ACM,
60(2):99–107, February 2017.
[6] Benjamin Beurdouche, Antoine Delignat-Lavaud, Na-
dim Kobeissi, Alfredo Pironti, and Karthikeyan Bharga-
van. FlexTLS: A tool for testing TLS implementations.
In 9th USENIX Workshop on Offensive Technologies,
WOOT 15. USENIX Association, August 2015.
[7] Daniel Bleichenbacher. Chosen ciphertext attacks
against protocols based on the RSA encryption stan-
dard PKCS #1. In Advances in Cryptology - CRYPTO
’98, volume 1462 of LNCS. Springer, Berlin / Heidelberg,
1998.
[8] Botan: Crypto and TLS for C++11, 2019.
[9] Georg Chalupar, Stefan Peherstorfer, Erik Poll, and Joeri
de Ruiter. Automated reverse engineering using Lego R(cid:13).
In 8th USENIX Workshop on Offensive Technologies,
WOOT 14. USENIX Association, August 2014.
[10] Chia Yuan Cho, Domagoj Babic, Eui Chul Richard Shin,
and Dawn Song. Inference and analysis of formal mo-
dels of botnet command and control protocols. In Pro-
ceedings of the 17th ACM Conference on Computer and
Communications Security, CCS 2010, pages 426–439.
ACM, October 2010.
[11] Tsun S. Chow. Testing software design modeled by
ﬁnite-state machines. IEEE Trans. Soft. Eng., 4(3):178–
187, May 1978. Special collection based on COMPSAC.
[12] Lesly-Ann Daniel, Erik Poll, and Joeri de Ruiter. In-
ferring OpenVPN state machines using protocol state
In IEEE European Symposium on Security
fuzzing.
and Privacy (EuroS&P) Workshops, pages 11–19. IEEE,
April 2018.
[13] Joeri de Ruiter and Erik Poll. Protocol state fuzzing of
TLS implementations. In 24th USENIX Security Sym-
posium, pages 193–206. USENIX Association, August
2015.
[14] T. Dierks and Eric Rescorla. The transport layer security
(TLS) protocol version 1.1. RFC 4346, April 2006.
[15] T. Dierks and Eric Rescorla. The transport layer security
TLS protocol version 1.2. RFC 5246, August 2008.
[16] N. Modadugu E. Rescorla, H. Tschofenig. The datagram
transport layer security (DTLS) protocol version 1.3 -
draft-34, July 2018.
[17] P. Eronen and H. Tschofenig. Pre-shared key ciphers-
uites for transport layer security (TLS). RFC 4279,
December 2005.
[18] Paul Fiter˘au-Bro¸stean, Ramon Janssen, and Frits W.
Vaandrager. Combining model learning and model
checking to analyze TCP implementations. In Compu-
ter Aided Veriﬁcation - 28th International Conference,
CAV 2016, Proceedings, Part II, volume 9780 of LNCS,
pages 454–471. Springer, 2016.
[19] Paul Fiter˘au-Bro¸stean, Toon Lenaerts, Joeri de Ruiter,
Erik Poll, Frits W. Vaandrager, and Patrick Verleg. Mo-
del learning and model checking of SSH implementati-
ons. In Proceedings of the 24th ACM SIGSOFT Interna-
tional SPIN Symposium on Model Checking of Software,
SPIN 2017, pages 142–151. ACM, 2017.
[20] Susumu Fujiwara, Gregor von Bochmann, Ferhat Khen-
dek, Mokhtar Amalou, and Abderrazak Ghedamsi. Test
selection based on ﬁnite state models. IEEE Trans. Soft.
Eng., 17(6):591–603, June 1991.
[21] Malte Isberner. Foundations of Active Automata Lear-
ning: An Algorithmic Perspective. PhD thesis, Technical
University Dortmund, Germany, 2015.
[22] Malte Isberner, Falk Howar, and Bernhard Steffen. The
TTT algorithm: A redundancy-free approach to active
automata learning. In Runtime Veriﬁcation: 5th Interna-
tional Conference, RV 2014, Proceedings, volume 8734
of LNCS, pages 307–322. Springer, September 2014.
[23] Malte Isberner, Falk Howar, and Bernhard Steffen. The
open-source LearnLib - A framework for active auto-
mata learning. In Computer Aided Veriﬁcation - 27th
International Conference, CAV, volume 9206 of LNCS,
pages 487–495. Springer, 2015.
[24] Hubert Kario. tlsfuzzer, 2018.
[25] David Lee and Mihalis Yannakakis. Principles and met-
hods of testing ﬁnite state machines—a survey. Procee-
dings of the IEEE, 84(8):1090–1123, 1996.
USENIX Association
29th USENIX Security Symposium    2539
[26] Knud Lasse Lueth. State of the IoT 2018: Number of
IoT devices now at 7B — market accelerating, August
2018.
[27] matrixSSL. Compact Embedded SSL/TLS stack, 2019.
[28] Chris McMahon Stone, Tom Chothia, and Joeri de Rui-
ter. Extending automated protocol state learning for the
802.11 4-way handshake. In Computer Security, volume
11098 of LNCS, pages 325–345, Cham, August 2018.
Springer International Publishing.
[29] Nagendra Modadugu and Eric Rescorla. The design and
implementation of Datagram TLS. In Proceedings of the
Network and Distributed System Security Symposium,
NDSS 2004, 2004.
[30] Bodo Möller, Thai Duong, and Krzysztof Kotowicz.
This POODLE bites: exploiting the SSL 3.0 fallback,
2014.
[31] Thomas Pornin. BoarSSL, 2017.
[32] Harald Raffelt, Maik Merten, Bernhard Steffen, and Ti-
ziana Margaria. Dynamic testing via automata learning.
STTT, 11(4):307–324, 2009.
[33] Abdullah Rasool, Greg Alpár, and Joeri de Ruiter.
arXiv preprint
State machine inference of QUIC.
arXiv:1903.04384, 2019.
[34] E. Rescorla, M. Ray, S. Dispensa, and N. Oskov. Trans-
port layer security (TLS) renegotiation indication exten-
sion. RFC 5746, February 2010.
[35] Eric Rescorla and Nagendra Modadugu. Datagram trans-
port layer security. RFC 4347, April 2006.
[36] Eric Rescorla and Nagendra Modadugu. Datagram trans-
port layer security version 1.2. RFC 6347, January 2012.
[37] Riku, Antti, Matti, and Neel Mehta. Heartbleed, CVE-
2014-0160, 2015.
[38] Zach Shelby, Klaus Hartke, and Carsten Bormann. The
constrained application protocol (CoAP). RFC 7252,
June 2014.
[39] Juraj Somorovsky. Systematic fuzzing and testing of
TLS libraries. In Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security,
CCS ’16, pages 1492–1504, New York, NY, USA, 2016.
ACM.
[40] Martin Tappler, Bernhard K. Aichernig, and Roderick
Bloem. Model-based testing IoT communication via
active automata learning. In Software Testing, Veriﬁ-
cation and Validation, (ICST) 2017 IEEE International
Conference on, pages 276–287. IEEE Computer Society,
March 2017.
[41] Frits W. Vaandrager. Model learning. Commun. ACM,
60(2):86–95, 2017.
[42] Niels van Drueten. Security analysis of DTLS 1.2 im-
plementations. Bachelor thesis, Radboud University,
Nijmegen, The Netherlands, 2019.
[43] Serge Vaudenay. Security ﬂaws induced by CBC pad-
ding - applications to SSL, IPSEC, WTLS ... In Advan-
ces in Cryptology - EUROCRYPT 2002, volume 2332
of LNCS. Springer, Berlin / Heidelberg, April 2002.
[44] David Wagner and Bruce Schneier. Analysis of the SSL
3.0 protocol. In Proceedings of the 2nd USENIX Works-
hop on Electronic Commerce, pages 29–40, Berkeley,
CA, USA, 1996. USENIX Association.
2540    29th USENIX Security Symposium
USENIX Association