   ->  Finalize GroupAggregate  (cost=157070.25..157089.00 rows=25 width=16)    
         Group Key: ccc21.cust_id    
         ->  Gather Merge  (cost=157070.25..157085.75 rows=600 width=16)    
               Workers Planned: 24    
               ->  Sort  (cost=157069.67..157069.74 rows=25 width=16)    
                     Sort Key: ccc21.cust_id    
                     ->  Partial HashAggregate  (cost=157068.84..157069.09 rows=25 width=16)    
                           Group Key: ccc21.cust_id    
                           ->  Parallel Seq Scan on ccc21  (cost=0.00..151642.56 rows=1085256 width=8)    
   ->  Finalize GroupAggregate  (cost=263795.01..263826.50 rows=42 width=16)    
         Group Key: ccc22.cust_id    
         ->  Gather Merge  (cost=263795.01..263821.04 rows=1008 width=16)    
               Workers Planned: 24    
               ->  Sort  (cost=263794.43..263794.53 rows=42 width=16)    
                     Sort Key: ccc22.cust_id    
                     ->  Partial HashAggregate  (cost=263792.88..263793.29 rows=42 width=16)    
                           Group Key: ccc22.cust_id    
                           ->  Parallel Seq Scan on ccc22  (cost=0.00..254679.58 rows=1822658 width=8)    
   ->  Finalize GroupAggregate  (cost=251324.47..251354.46 rows=40 width=16)    
         Group Key: ccc23.cust_id    
         ->  Gather Merge  (cost=251324.47..251349.26 rows=960 width=16)    
               Workers Planned: 24    
               ->  Sort  (cost=251323.89..251323.99 rows=40 width=16)    
                     Sort Key: ccc23.cust_id    
                     ->  Partial HashAggregate  (cost=251322.42..251322.82 rows=40 width=16)    
                           Group Key: ccc23.cust_id    
                           ->  Parallel Seq Scan on ccc23  (cost=0.00..242639.95 rows=1736495 width=8)    
(217 rows)    
postgres=# select cust_id,count(*) from ccc group by cust_id;     
 cust_id |  count      
---------+---------    
      16 | 1041453    
      34 | 1042275    
      54 | 1039714    
      60 | 1040715    
      81 | 1041507    
     108 | 1042387    
     119 | 1041137    
     151 | 1041746    
     153 | 1042255    
     186 | 1041705    
..................................    
     588 | 1040386    
     629 | 1043353    
     686 | 1041974    
     690 | 1040047    
     693 | 1042870    
     725 | 1042487    
     765 | 1040199    
     770 | 1041953    
     795 | 1042219    
     801 | 1042153    
     807 | 1041840    
     821 | 1041773    
     870 | 1041345    
     874 | 1043176    
     895 | 1042988    
     915 | 1040430    
     934 | 1043436    
     951 | 1041738    
(961 rows)    
Time: 8142.401 ms (00:08.142)    
```                  
## 其他知识                                            
1、优化器自动并行度算法 CBO              
[《PostgreSQL 9.6 并行计算 优化器算法浅析》](../201608/20160816_02.md)                                              
[《PostgreSQL 11 并行计算算法，参数，强制并行度设置》](../201812/20181218_01.md)                                              
2、function, op 识别是否支持parallel                                            
```                                            
postgres=# select proparallel,proname from pg_proc;                                            
 proparallel |                   proname                                                                
-------------+----------------------------------------------                                            
 s           | boolin                                            
 s           | boolout                                            
 s           | byteain                                            
 s           | byteaout                                            
```                                            
3、subquery mapreduce unlogged table                                            
对于一些情况，如果期望简化优化器对非常非常复杂的SQL并行优化的负担，可以自己将SQL拆成几段，中间结果使用unlogged table保存，类似mapreduce的思想。unlogged table同样支持parallel 计算。                                            
4、vacuum，垃圾回收并行。                                            
5、dblink 异步调用并行                                            
[《PostgreSQL VOPS 向量计算 + DBLINK异步并行 - 单实例 10亿 聚合计算跑进2秒》](../201802/20180210_01.md)                                              
[《PostgreSQL 相似搜索分布式架构设计与实践 - dblink异步调用与多机并行(远程 游标+记录 UDF实例)》](../201802/20180205_03.md)                                              
[《PostgreSQL dblink异步调用实现 并行hash分片JOIN - 含数据交、并、差 提速案例 - 含dblink VS pg 11 parallel hash join VS pg 11 智能分区JOIN》](../201802/20180201_02.md)                                              
暂时不允许并行的场景(将来PG会继续扩大支持范围)：                                            
1、修改行，锁行，除了create table as , select into, create mview这几个可以使用并行。                                            
2、query 会被中断时，例如cursor , loop in PL/SQL ，因为涉及到中间处理，所以不建议开启并行。                                             
3、paralle unsafe udf ，这种UDF不会并行                                            
4、嵌套并行(udf (内部query并行))，外部调用这个UDF的SQL不会并行。（主要是防止large parallel workers ）                                            
5、SSI 隔离级别                                            
## 参考                                            
https://www.postgresql.org/docs/11/parallel-plans.html                                            
[《PostgreSQL 11 并行计算算法，参数，强制并行度设置》](../201812/20181218_01.md)                                              
[《PostgreSQL 11 preview - 并行计算 增强 汇总》](../201805/20180519_02.md)                                              
[《PostgreSQL 10 自定义并行计算聚合函数的原理与实践 - (含array_agg合并多个数组为单个一元数组的例子)》](../201801/20180119_04.md)                                              
[《PostgreSQL 9.6 并行计算 优化器算法浅析》](../201608/20160816_02.md)                                              
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")