title:Multi-Context TLS (mcTLS): Enabling Secure In-Network Functionality
in TLS
author:David Naylor and
Kyle Schomp and
Matteo Varvello and
Ilias Leontiadis and
Jeremy Blackburn and
Diego R. L&apos;opez and
Konstantina Papagiannaki and
Pablo Rodr&apos;ıguez Rodr&apos;ıguez and
Peter Steenkiste
Multi-Context TLS (mcTLS):
Enabling Secure In-Network Functionality in TLS
David Naylor(cid:63), Kyle Schomp†, Matteo Varvello‡, Ilias Leontiadis‡, Jeremy Blackburn‡,
Diego Lopez‡, Konstantina Papagiannaki‡,
Pablo Rodriguez Rodriguez‡, and Peter Steenkiste(cid:63)
(cid:63)Carnegie Mellon University
†Case Western Reserve University
‡Telefónica Research
ABSTRACT
A signiﬁcant fraction of Internet traﬃc is now encrypted
and HTTPS will likely be the default in HTTP/2. How-
ever, Transport Layer Security (TLS), the standard pro-
tocol for encryption in the Internet, assumes that all
functionality resides at the endpoints, making it impos-
sible to use in-network services that optimize network
resource usage, improve user experience, and protect
clients and servers from security threats. Re-introducing
in-network functionality into TLS sessions today is done
through hacks, often weakening overall security.
In this paper we introduce multi-context TLS (mcTLS),
which extends TLS to support middleboxes. mcTLS
breaks the current “all-or-nothing” security model by al-
lowing endpoints and content providers to explicitly in-
troduce middleboxes in secure end-to-end sessions while
controlling which parts of the data they can read or
write.
We evaluate a prototype mcTLS implementation in
both controlled and “live” experiments, showing that its
beneﬁts come at the cost of minimal overhead. More
importantly, we show that mcTLS can be incremen-
tally deployed and requires only small changes to client,
server, and middlebox software.
CCS Concepts
•Security and privacy → Security protocols; •Networks
→ Middle boxes / network appliances; Session protocols;
Keywords
TLS; SSL; HTTPS
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is per-
mitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
SIGCOMM ’15, August 17 - 21, 2015, London, United Kingdom
c(cid:13) 2015 ACM. ISBN 978-1-4503-3542-3/15/08. . . $15.00
DOI: http://dx.doi.org/10.1145/2785956.2787482
1.
INTRODUCTION
The increased personalization of Internet services and
rising concern over users’ privacy on the Internet has
led to a number of services (e.g., Facebook, Twitter,
and Google) oﬀering access solely over HTTPS. HTTPS
currently accounts for a signiﬁcant portion of all Inter-
net traﬃc (40% in [26], and estimated to grow at 40%
every 6 months [27]). Transport Layer Security (TLS),
which underlies HTTPS, has become the standard for
end-to-end encryption on the web because it ensures (i)
entity authentication, (ii) data secrecy, and (iii) data
integrity and authentication. Moreover, it will likely be
the default transport protocol for HTTP/2.
This is good news for privacy. However, TLS makes a
fundamental assumption: all functionality must reside
at the endpoints. In reality, Internet sessions are aug-
mented by functional units along the path, providing
services like intrusion detection, caching, parental ﬁlter-
ing, content optimization (e.g., compression, transcod-
ing), or compliance to corporate practices in enterprise
environments. These functional units, often referred to
as middleboxes, oﬀer many beneﬁts to users, content
providers, and network operators, as evidenced by their
widespread deployment in today’s Internet.
While there are arguments that these services could
(and should) be implemented on endpoints, we argue
that this is often not optimal or even possible. First,
although an in-network implementation might not be
required, it might be inherently more eﬀective than an
endpoint-based one (e.g., thousands of users sharing
an ISP cache). Second, there might be practical rea-
sons why such a solution needs to reside in-network
(e.g., virus scanners can always be up-to-date and im-
mediately protect all clients). Third, certain features
(e.g., intrusion detection or content-based routing deci-
sions) simply cannot be implemented without network-
wide visibility. Finally, in-network services can lead to
increased competition, innovation, and choice for end
users.
Recently, industrial eﬀorts—one by Ericsson and AT&T
[20] and one by Google [28]—have tried to provide a so-
199lution for combining encryption with the richness of to-
day’s in-network services. However, as we will discuss, a
good solution is still lacking and the topic is still active
within the GSMA ENCRY and the IETF httpbis.
In this paper we present mcTLS, a protocol that builds
on top of TLS to allow endpoints to explicitly and se-
curely include in-network functionality with complete
visibility and control. mcTLS: (i) provides endpoints
explicit knowledge and control over which functional el-
ements are part of the session, (ii) allows users and con-
tent providers to dynamically choose which portions of
content are exposed to in-network services (e.g., HTTP
headers vs. content), (iii) protects the authenticity and
integrity of data while still enabling modiﬁcations by se-
lected in-network services by separating read and write
permissions, and (iv) is incrementally deployable.
We implemented mcTLS as a simple extension to the
OpenSSL library. Our evaluation shows that mcTLS
has negligible impact on page load time or data over-
head for loading the top 500 Alexa sites and incorporat-
ing mcTLS into applications is relatively easy in many
cases.
Our contributions are as follows: (i) a practical ex-
tension to TLS that explicitly introduces trusted in-
network elements into secure sessions with the mini-
mum level of access they need, (ii) a prototype imple-
mentation of mcTLS tested in controlled and live envi-
ronments (our implementation is available online [1]),
(iii) an eﬃcient ﬁne-grained access control mechanism
which we show comes at very low cost, and (iv) strate-
gies for using mcTLS to address concrete, relevant use
cases, many of which can immediately beneﬁt applica-
tions with little eﬀort using mcTLS’s most basic conﬁg-
uration.
2. MIDDLEBOXES AND ENCRYPTION
It is clear that there is both a growing interest in user
privacy and a widespread use of in-network processing
in the Internet. In this section, we describe middleboxes
and why it is beneﬁcial to keep them around as the
Internet moves toward ubiquitous encryption. We then
explain why it is diﬃcult to do so with TLS.
2.1 Middleboxes
Middleboxes are services that run “inside” the net-
work, sitting logically between the endpoints of commu-
nication sessions. A client (e.g., web browser) can con-
nect to a server (e.g., web server) via one or more mid-
dleboxes that add value beyond basic data transport.
Clients and servers are endpoints; users own/manage
clients and content providers own/manage servers. The
entire communication, across all parties, is a session;
connections link individual hops in the session (e.g., a
TCP connection between the client and a middlebox).
Our focus is on application level middleboxes, also
called proxies or in-path services, which we loosely de-
Request
Response
Headers Body Headers Body
•
•
◦
◦
•
•
◦
•
◦
◦
Cache
Compression
Load Balancer
IDS
Parental Filter
Tracker Blocker
Packet Pacer
WAN Optimizer
◦
◦
◦
◦
•
◦
◦
◦
(• = read/write; ◦ = read-only)
Table 1: Examples of app-layer middleboxes and the
permissions they need for HTTP. No middlebox needs
read/write access to all of the data.
ﬁne as middleboxes that access application data, like
intrusion detection systems (IDSes), content ﬁlters, and
caching/compression proxies (see Table 1).
Middleboxes are sometimes viewed as undesirable.
One reason is privacy concerns, which we address later.
Another is that they violate the original Internet archi-
tecture, which places all functionality (transport and
up) at the endpoints, a design motivated by the end-to-
end principle [31]. However, the Internet has changed
dramatically: both connectivity and content services
are commercially supported, security is a major con-
cern, performance expectations are much higher, the
technology is more complex, and users are typically
not in a position to manage it. As a result, the de-
cision of where to place functionality depends on more
than just technical concerns and, increasingly, “inside
the network” is a good solution.
Middleboxes are useful: Providing processing and
storage in the network has proven to be an eﬀective
way to help users, content providers, and network op-
erators alike. For example, techniques such as caching,
compression, prefetching, packet pacing, and reformat-
ting improve load times for users [38, 18], reduce data
usage for operators and users [3, 26, 13, 37, 29], and re-
duce energy consumption on the client [26, 12, 29, 14].
Middleboxes can also add functionality not provided by
the endpoints, such as virus scanners in enterprises or
content ﬁlters for children.
In-network may be better: First, functions such as
caching and packet pacing are inherently more eﬀective
in the network [13, 12, 14]. Second, client implemen-
tations may be problematic because the client may be
untrusted or its software, URL blacklists, virus signa-
tures, etc. may be out-of-date (e.g., only a third of
Android users run the latest version of the OS and over
half are more than two years out of date [2]). Finally,
users may trust a middlebox more than the application;
for example, apps can unexpectedly leak personal infor-
mation to a server [36], so users may want a middlebox
to act as a watchdog.
200They are widely used:
In a 2012 survey of network
operators, networks of all sizes reported having roughly
as many middleboxes as L3 routers [33]. For web prox-
ies in particular, 14% of Netalyzer sessions show evi-
dence of a proxy [35] and all four major U.S. mobile
carriers use proxies—connections to the top 100 Alexa
sites are all proxied, with the exception of YouTube on
T-Mobile [38].
In addition, all actors in the Internet
use middleboxes. They are widely deployed in client
networks (e.g., enterprise ﬁrewalls, cellular networks),
and of the three IETF RFCs on using middleboxes with
TLS, two are led by operators [20, 18] and one by a con-
tent provider [28]. Given this investment, middleboxes
are unlikely to go away, so we need a clean, secure way
to include them in encrypted sessions.
The Internet is a market-driven ecosystem: The
Internet is not a centrally managed monopoly but is a
market-driven ecosystem with many actors making in-
dependent decisions. For example, while servers can
compress data, many only do so selectively [29]. Simi-
larly, content providers may decide not to support device-
speciﬁc content formatting but instead rely on third
party providers, which can be selected by the client or
content provider. For functions such as content ﬁltering,
clients may decide to pay for the convenience of hav-
ing a single middlebox provider of their choice, instead
of relying on individual content providers. Enterprise
networks may similarly decide to outsource functional-
ity [33]. Fundamentally, middleboxes give actors more
choices, which leads to competition and innovation.
The bottom line is simple:
just like end-to-end en-
cryption, middleboxes are an integral, useful part of the
Internet and they are here to stay.
2.2 Middleboxes and TLS
Given these trends, it is natural to want the best of
both worlds. Before discussing how middleboxes and
encryption can be used together today, let us take a
closer look at Transport Layer Security (TLS) [11], the
standard protocol for secure network communications.
What does TLS give us? TLS comprises two pro-
tocols, a handshake protocol for session establishment
and a record protocol for data exchange, which together
realize three security properties:
(1) Entity Authentication: During the handshake, the
client authenticates the server by verifying that a valid
certiﬁcate links the server’s domain name and public
key. Clients can also authenticate themselves to the
server with certiﬁcates, but this is rarely used; client au-
thentication typically happens in the application layer,
e.g., using a password.
(2) Data Secrecy: The endpoints establish a symmetric
session key during the handshake, which is used by the
record protocol to encrypt/decrypt records (blocks of
application data).
(3) Data Integrity & Authentication: The session key
is also used to generate a message authentication code
(MAC) for each record; a valid MAC indicates that (1)
the data originated from the other endpoint (authen-
ticity) and (2) the data was not changed in ﬂight (in-
tegrity).
How do you add a middlebox to a TLS ses-
sion? In short: you do not. By design, TLS supports
secure communication between exactly two parties. De-
spite this, middleboxes are frequently inserted in TLS
sessions, but this has to be done transparently to TLS.
Consider an enterprise network that wants to insert a
virus scanner in all employee sessions. A common solu-
tion is to install a custom root certiﬁcate on the client.
The middlebox can then create a certiﬁcate for itself
purported to be from the intended server and sign it
with the custom root certiﬁcate. After the client con-
nects to the middlebox, the middlebox connects to the
server and passes the data from one connection to the
other. We refer to this as Split TLS ) and it gives rise
to several problems: