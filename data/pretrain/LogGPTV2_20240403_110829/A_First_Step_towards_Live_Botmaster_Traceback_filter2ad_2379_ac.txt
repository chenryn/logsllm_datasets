Modiﬁed IRC Bouncer. To achieve greater ﬂexibility, we added our wa-
termarking functionality to an existing IRC bouncer (BNC) package, psyBNC.
Having the watermarking implemented on a proxy server allows us to use it on
all bots conforming to the standard IRC protocol. It eliminates the need to have
access to a bot’s source code to add the watermarking functionality: outgoing
traﬃc is modiﬁed by the BNC after the bot sends it.
In order for psyBNC to act as a transparent proxy, it needs to be conﬁgured
identically to the bot. The information required consists of the C&C server’s
hostname, the port, and an IRC nick consistent with the bot’s naming scheme.
This information can be gathered by running the bot and monitoring the outgo-
ing network traﬃc. In order to trick the bot into connecting to the BNC rather
than to the real C&C host, we also need to update our local DNS cache so that
a lookup of the C&C server’s hostname resolves to the IP of our BNC.
Once it has been conﬁgured with this information, the BNC is completely
transparent to the bot: when it starts up, the bot is automatically signed into
the real C&C server by the BNC. The bot now joins the botnet channel as if
it were directly connected and then waits for the botmaster’s instructions. All
PRIVMSG traﬃc from the bot to the C&C server (and by extension, to the
botmaster) is watermarked by the transparent BNC in between.
Experiment and Results. To test our watermarking scheme, we devised an
experiment that emulates the conditions of an Internet-wide botnet as closely
as possible. To simulate the botmaster and stepping stones, we used PlanetLab
nodes in California and Germany. We used a live, public IRC server in Arizona
to act as a C&C host, creating a uniquely-named channel for our experiments.
Our channel consisted of two IRC users: the Test Bot was running a copy of the
sanitized Agobot and the Botmaster was acting as the botmaster (see Figure 3).
As the diagram indicates, all traﬃc sent by the Test Bot passes through the
psyBNC server (WM Proxy) where the watermark is injected. The distances
involved in this setup are considerable: the watermarked traﬃc traverses liter-
ally half the globe (12 time zones) before reaching its ultimate destination in
Germany, with a combined round-trip time of 292 milliseconds on average (at
the time of our experiment).
The objective is to be able to decode the full watermark in the traﬃc captured
at the Stepping Stone and Botmaster. Since only PRIVMSG traﬃc from the
Test Bot is watermarked, all other traﬃc (chaﬀ) must be ﬁltered out before
decoding. Most of this chaﬀ consists of messages from other users on the channel,
PING/PONG exchanges, and JOIN/PART notiﬁcations from the channel. There
could be additional chaﬀ on the same connection if the botmaster is logged into
multiple channels on the same IRC server. However, ﬁltering out the chaﬀ is
A First Step towards Live Botmaster Traceback
69
Fig. 3. Experiment setup for unencrypted traﬃc
trivial in the absence of encryption since all IRC messages contain the sender’s
nick. Therefore, we can easily isolate the watermarked packets based on the Test
Bot’s nick.
During our experiments, the psyBNC proxy was conﬁgured to inject a 32-bit
watermark into a 64-packet stream. To generate traﬃc from the Test Bot, the
Botmaster logged in and issued the commands.list command, causing the bot
to send a list of all valid bot commands and their descriptions. We captured
all traﬃc leaving the WM Proxy, arriving at the Stepping Stone, and arriving
at the Botmaster. In ten trials with diﬀerent (random) 32-bit watermarks, we
were able to correct decode the full 32-bit watermark at all three monitoring
locations: the WM Proxy in Maryland, the Stepping Stone in California, and
Botmaster in Germany.
4.2 Hybrid Length-Timing Algorithm (Encrypted Traﬃc)
To test the hybrid length-timing algorithm, we implemented a simple IRC bot
that sends length-watermarked messages out at speciﬁc intervals. We used a
“chaﬀ bot” on the channel to generate controlled amounts of chaﬀ. We were
able to recover the watermark with a high success rate, even when high amounts
of chaﬀ were present.
Hybrid Length-Timing Encoder. We implemented the hybrid encoding al-
gorithm as a Perl program which reads in a previously length-only watermarked
stream of messages and sends them out at speciﬁc times. To achieve highly pre-
cise timing, we used the Time::HiRes Perl package, which provides microsecond-
resolution timers. At startup, the program uses the Mersenne Twister PRNG
(via the Math::Random::MT package) to generate a list of departure times for all
messages to be sent. Each message is sent at a randomly chosen time between
2 and 2.35 seconds after the previous message. The 2-second minimum spacing
avoids IRC server packet throttling (more details are discussed in Section 4.2).
Hybrid Length-Timing Decoder. The hybrid decoding script was also writ-
ten in Perl, relying on the PCAP library to provide a standardized network traﬃc
70
D. Ramsbrock, X. Wang, and X. Jiang
Fig. 4. Oﬀset Self-Synchronization via Oﬀset Sliding-Window
capture mechanism (via the Net::Pcap module). The program reads in a stream
of packets (either from a live interface or from a PCAP ﬁle), then performs a
sliding-window oﬀset self-synchronization process to determine the time t1 of
the ﬁrst watermarked packet. To ﬁnd the correct t1, the program steps through
a range of possible values determined by the offset, max, and step parameters.
It starts with t1 =offset, incrementing t1 by step until t1 =(offset + max).
It decodes the full watermark sequence for each t1, recording the number of bits
matching the sought watermark W . It then chooses the t1 that produced the
highest number of matching bits. If there are multiple t1 values resulting in the
same number of matching bits, it uses the lowest value for t1. Figure 4 illus-
trates the synchronization process, showing that the correct t1 is near 6 seconds:
5.92 sec has 32 correct bits. For all incorrect t1 values, the decoding rate was
signiﬁcantly lower, averaging 14.84 correct bits.
Experiment and Results. The experiment setup in this case was similar to
the unencrypted experiment described in Section 4.1. The three main diﬀerences
were: 1) a single Source computer producing watermarked traﬃc on its own
replaced the Test Bot and WM Proxy; 2) the connection between the Botmaster
and the IRC server (via StepStone) was encrypted using SSL/TLS; and 3) we
used a diﬀerent IRC server because the one in Arizona does not support SSL/TLS
connections. The IRC server in this case happens to be located in Germany, but
not in the same place as the Botmaster. Please refer to Figure 5 for the full
experiment setup. In this conﬁguration, the distances involved are even greater,
with the watermarked traﬃc traversing the equivalent of the entire globe (24
time zones). The combined round-trip time from Source to Botmaster was 482
milliseconds (on average) at the time of our experiment.
To handle encryption, the parameters for the length-only algorithm were ad-
justed to ensure that the bucket size matched or exceeded the encryption block
size. Most SSL/TLS connections use a block size of 128 bits (16 bytes), though
192 and 256 bits are also common. To ensure that each added bucket also causes
another encrypted block to be added to the message, the bucket size has to be
greater than or equal to the block size. For our experiment, we used a bucket size
of 16 bytes, which was suﬃcient for the 128-bit block size used in the SSL/TLS
A First Step towards Live Botmaster Traceback
71
Fig. 5. Experiment setup for encrypted traﬃc
connection. For compatibility with the larger block sizes (192 and 256 bits), a
bucket size of 32 bytes can be used.
For the experiments, the Source produced a stream of 64 packets, containing
a randomly generated 32-bit watermark. The Chaﬀ Bot produced a controlled
amount of background traﬃc, spacing the packets at random intervals between 1
and 6 seconds (at least 1 second to avoid throttling). In addition to our Control
run (no chaﬀ), we ran ﬁve diﬀerent chaﬀ levels (Chaﬀ 1 to 5). The number refers
to the maximum time between packets (not including the minimum 1-second
spacing). For example, for the Chaﬀ 1 run, packets were sent at a random time
between 1 and 2 seconds. Thus, one packet was sent on average every 1.5 seconds,
resulting in a chaﬀ rate of approximately 1/1.5 = 0.667 packets/sec.
We captured network traﬃc in three places: 1) traﬃc from Source and Chaﬀ
Bot to IRC Server; 2) traﬃc arriving at StepStone from IRC Server; and 3) traﬃc
arriving at Botmaster from StepStone. Traﬃc in all three locations includes both
watermark and chaﬀ packets. We decoded the traﬃc at each location, recording
the number of matching bits. For decoding, we used a value of 200 milliseconds
for the timing window size δ and a sliding oﬀset range from 0 to 10 seconds. This
δ value was large enough to account for possible jitter along the stepping stone
chain but small enough to make it unlikely that a chaﬀ packet appears within
δ of an encoding packet. We also measured the actual chaﬀ rate based on the
departure times of each chaﬀ packet, and these were very close to the expected
rates based on an even distribution of random departure times. We repeated
this process three times for each chaﬀ level, resulting in a total of 18 runs. Our
experiment results are summarized in Table 1, with each column representing
the average values from three trials.
We had near-perfect decoding along the stepping-stone chain for all chaﬀ rates
of 0.5 packets/sec and below. Only when the chaﬀ rate rose above 0.5 packets/sec
did the chaﬀ start having a slight impact, bringing the decoding rate down to
an average of 31 bits. The overall average decoding rate at the StepStone and
Botmaster was 31.69 bits, or 99.05 percent. The lowest recorded decoding rate
72
D. Ramsbrock, X. Wang, and X. Jiang
Table 1. Experiment results for encrypted traﬃc: Recovered watermark bits (out of
32) at each monitoring station along the watermark’s path (averaged from three trials)
Monitoring Location Chaﬀ 1 Chaﬀ 2 Chaﬀ 3 Chaﬀ 4 Chaﬀ 5 Control
Chaﬀ Rate (packets/sec) 0.6719
no chaﬀ
29.67
Source - Maryland
0.4976
30.33
StepStone - California
Botmaster - Germany
31
31
32
31.67
32
32
32
0.4274
29.67
31.67
32
0.3236
30.33
31.67
31.67
0.2872
30.33
32
31.67
during our experiments was 28 bits, so we can use a Hamming distance threshold
of h = 4 to obtain a 100 percent true positive rate (TPR) and a false positive
rate (FPR) of 9.64 × 10−6.
The most surprising result is that in all cases where chaﬀ was present, the
decoding rate was worse at the Source than downstream at the StepStone and
Botmaster. After examining the network traces in detail, we realized that this
behavior was due to the presence of traﬃc queuing and throttling on the IRC
Server. To avoid ﬂooding, IRC servers are conﬁgured to enforce minimum packet
spacings, and most will throttle traﬃc at 0.5 to 1 packets/sec. To conﬁrm this
behavior, we sent packets to the IRC Server in Germany at random intervals
of 100 to 300 milliseconds. For the ﬁrst 5 seconds, packets were passed on im-
mediately, but after that the throttling kicked in, limiting the server’s outgoing
rate to 1 packet/sec. After about 2 minutes, the server’s packet queue became
full with backlogged packets, and it disconnected our client. Figure 6 illustrates
the eﬀect of throttling on the packet arrival times, including the 5-second “grace
period” at the beginning.
In the context of our hybrid encoding scheme, IRC message queuing is highly
beneﬁcial because it dramatically reduces the chances that chaﬀ and encoding
packets will appear close to each other. At the Source, packets appear at the exact
intervals they are sent, which could be less than δ and therefore aﬀect decoding.
However, this interval will be increased due to queuing by the IRC server. By
the time the packets reach the StepStone and Botmaster, they no longer aﬀect
decoding because they are more than δ apart. In our experiments, we observed
Fig. 6. IRC server throttling causes packets to be spaced apart further upon arrival
A First Step towards Live Botmaster Traceback
73
that the IRC server introduced a distance of at about 130 milliseconds between
packets due to queuing. Since our δ value was 200 milliseconds, this made it
unlikely that two packets would arrive in the same slot.
5 Discussion and Future Work
Our experiments show that our watermarking scheme is eﬀective in tracing the
botmaster of IRC-based botnets, which are still the predominant type in the
wild [17,21,28]. Our watermark can be recovered with a high degree of accuracy
even when the watermarked botnet C&C traﬃc is encrypted across multiple
stepping stones and mixed with other ﬂows.
In theory, our ﬂow watermarking technique could be applied to trace any real-
time and interactive botnet C&C traﬃc. Therefore, it could be used to track the
botmaster of peer-to-peer (P2P) botnets which have started appearing recently
[13]. However, HTTP-based botnets present a much higher level of traceback
diﬃculty: the messages do not get passed from the bot to the botmaster in real-
time. They are typically stored on the C&C server until the botmaster retrieves