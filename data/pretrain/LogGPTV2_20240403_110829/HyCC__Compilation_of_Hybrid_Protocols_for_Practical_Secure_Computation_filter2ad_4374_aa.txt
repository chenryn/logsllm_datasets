title:HyCC: Compilation of Hybrid Protocols for Practical Secure Computation
author:Niklas B&quot;uscher and
Daniel Demmler and
Stefan Katzenbeisser and
David Kretzmer and
Thomas Schneider
HyCC: Compilation of Hybrid Protocols for
Practical Secure Computation
Niklas Büscher
Technische Universität Darmstadt
PI:EMAIL
Daniel Demmler
Technische Universität Darmstadt
Stefan Katzenbeisser
Technische Universität Darmstadt
PI:EMAIL
PI:EMAIL
David Kretzmer
Technische Universität Darmstadt
PI:EMAIL
Thomas Schneider
Technische Universität Darmstadt
PI:EMAIL
ABSTRACT
While secure multi-party computation (MPC) is a vibrant research
topic and a multitude of practical MPC applications have been
presented recently, their development is still a tedious task that
requires expert knowledge. Previous works have made first steps in
compiling high-level descriptions from various source descriptions
into MPC protocols, but only looked at a limited set of protocols.
In this work we present HyCC, a tool-chain for automated com-
pilation of ANSI C programs into hybrid protocols that efficiently
and securely combine multiple MPC protocols with optimizing
compilation, scheduling, and partitioning. As a result, our compiled
protocols are able to achieve performance numbers that are com-
parable to hand-built solutions. For the MiniONN neural network
(Liu et al., CCS 2017), our compiler improves performance of the
resulting protocol by more than a factor of 3. Thus, for the first
time, highly efficient hybrid MPC becomes accessible for developers
without cryptographic background.
CCS CONCEPTS
• Security and privacy → Privacy-preserving protocols; •
Software and its engineering → Compilers;
KEYWORDS
secure multi-party computation; MPC; secure computation; com-
piler; hybrid protocols; automatization
ACM Reference Format:
Niklas Büscher, Daniel Demmler, Stefan Katzenbeisser, David Kret-
zmer, and Thomas Schneider. 2018. HyCC: Compilation of Hybrid Pro-
tocols for, Practical Secure Computation. In 2018 ACM SIGSAC Con-
ference on Computer and Communications Security (CCS ’18), October
15–19, 2018, Toronto, ON, Canada. ACM, New York, NY, USA, 15 pages.
https://doi.org/10.1145/3243734.3243786
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243786
1 INTRODUCTION
First considered a purely theoretic result, secure multi-party com-
putation (MPC) over arithmetic and Boolean circuits became prac-
tical in the last decade and emerged as a powerful tool to realize
privacy-enhancing technologies. Recently, many new protocols
with continuously improved efficiency have been proposed, e.g.,
Furukawa et al. [20] showed how billions of gates can be evalu-
ated per second, and also “classic” protocols, such as Yao’s garbled
circuits [51] or GMW [23], have seen significant algorithmic and
practical optimizations, e.g., [2, 5, 15, 25, 28, 47, 53]. It has also
been shown that hybrid protocols, i.e., protocols that mix multiple
different MPC protocols, are desirable because they outperform
standalone protocols in various settings [18, 24, 32, 38, 43]. For
example, for an application that consists of numerical computation
and a combinatorial problem, it is beneficial to evaluate the former
part with an arithmetic circuit-based MPC protocol and the latter
part with a Boolean circuit-based protocol.
The continuous increase in the number of protocols and opti-
mizations has led to a significant improvement in the performance
of MPC, yet also has the drawback that MPC becomes harder and
harder to access for people outside the field. Identifying a (near)
optimal choice of MPC protocols for a desired application requires
experience with different MPC protocols, their optimizations, their
programming models, and the conversion costs to securely switch
between protocols when performing a hybrid computation. Fur-
thermore, for realizing an actual application not only expert knowl-
edge in MPC, but also substantial knowledge in hardware design is
needed to implement the application in an efficient Boolean and/or
arithmetic circuit representation, which are the most common func-
tion representations in MPC. Consequently, creating efficient ap-
plications by hand is a tedious and error-prone task and therefore
multiple compilers have been proposed, which share similarities
with high-level synthesis from the area of hardware design.
Previous MPC compilers either only targeted a single class of
protocols, e.g., Yao’s garbled circuits [26, 39, 48], the GMW proto-
col [9, 17], or linear secret-sharing-based MPC [7], or the compilers
required the developer to use specific annotations to mark which
protocol is used for each statement, e.g., [18, 24]. The only other
compiler that addresses the compilation of a program using two
MPC protocols (Yao’s gabled circuits and arithmetic sharing) is
EzPC [14]. However, EzPC only provides semi-automation for a do-
main specific language (DSL), as the input code has to be manually
decomposed, array accesses have to be manually resolved into mul-
tiplexer structures, and the compiled circuits are left unoptimized.
Session 5B: SecComp 2CCS’18, October 15-19, 2018, Toronto, ON, Canada847Moreover, EzPC supports only two MPC protocols, which are se-
lected statically and independently of the execution environment,
by following a strict set of rules for each expression in the program.
Compilation for hybrid MPC. In this work, we propose a novel
hybrid circuit compiler, named HyCC, that is capable of compiling
and optimizing applications written in standard ANSI C code into
a combination of MPC protocols. In contrast to previous work, we
present a fully automated approach that decomposes the source
code, translates the decomposed code into Boolean and arithmetic
circuits, optimizes these circuits, and finally selects suitable MPC
protocols for a given deployment scenario, optimizing the selec-
tion for a given criterion, such as latency (minimal total runtime),
throughput (minimal per-operation runtime), or communication.
Fig. 1 illustrates the two major components of this approach. The
first component is the (one-time) compilation of the input source
code into a decomposed program description in form of circuits.
We refer to the different parts of a decomposed program, i.e., the
compact logical building blocks a larger application consists of,
as modules. Each module is compiled into multiple circuit repre-
sentations. Our implementation compiles arithmetic circuits (A),
depth-optimized circuits for GMW (B), and size-optimized circuits
for Yao’s protocol (Y). The second component in HyCC is the pro-
tocol selection step in which the most suitable combination of MPC
protocols is selected for a decomposed program depending on the
computational environment. We note that this protocol selection
can be part of an MPC framework and does not necessarily need to
be performed during compilation.
Environment C Program
Program Decomposition
Circuit Compiler
Compilation
Compilation
Compilation
Protocol Selection
A Circuits
B Circuits
Y Circuits
Hybrid Protocol Description
Figure 1: High-level overview of our compilation architec-
ture. The circuit compiler decomposes an input program
and compiles each part into multiple circuit representations.
The protocol selection recombines the different parts.
Optimizing circuit compiler. MPC is still significantly slower and
more expensive than generic plaintext computation in terms of both
computation and communication. Thus, a tool-chain is required
that optimizes the compilation of a program description into an
efficient MPC protocol and its corresponding circuits. Even though
the optimization of an input program has limits, i.e., an inefficient
algorithmic representation cannot automatically be translated into
a fast algorithm, a programmer expects the compiler to not only
translate every statement of a high-level description of an appli-
cation or algorithm for a selected target architecture, but also to
optimize the given representation, e.g., by removing unnecessary
computations. This is of special interest for MPC compilers, be-
cause code optimization techniques that are too expensive to be
applied in traditional compilers become affordable when consid-
ering the trade-off between compile time and evaluation costs of
the program on the circuit level. For example, in Yao’s protocol a
32 × 32 bit signed integer multiplication requires the evaluation
of ≈ 1,000 non-linear Boolean gates (when using the best known
circuit), which results in ≈ 5,000 symmetric encryptions during
the protocol run. Consequently, the removal of any unnecessary
operation in MPC is more vital than in traditional compilation,
where only a single CPU cycle is lost during program execution.
We also observe that optimization techniques performed on the
source code level, e.g., constant propagation, are cheaper in com-
putational resources than minimization techniques applied on the
gate level after the compilation to circuits.
These observations are reflected in our compiler architecture:
Before decomposing the input source code into different parts, a rig-
orous static analysis is performed to realize constant propagation,
detect parallelism, and determine the granularity of decomposition.
The optimization then continues on the circuit level, where logic
optimization techniques are gradually applied. To achieve a scal-
able and optimizing compilation, we guide the logic optimization
efforts based on the results of static analysis of the source code.
For example, loop bodies with a large number of iterations will be
optimized with more effort than a piece of code that is only rarely
used. Thus, in contrast to classic logic optimization or arithmetic
expression rewriting, we make use of the structural information
given by the programmer in the high-level code.
Summarizing the compiler’s functionality, HyCC is capable of
compiling optimized Boolean and arithmetic circuits suiting the
requirements of most constant- and multi-round MPC protocols.
Our tool-chain is highly flexible and independent of the underlying
MPC protocols, as only the respective cost models for primitive
operations, e.g., addition or Boolean AND, have to be adapted to
reflect future protocol developments in MPC.
Protocol selection. Protocol selection is the task of mapping each
part of a decomposed program to a MPC protocol representation.
The circuits created by our compiler for each module and the map-
ping of modules into MPC protocols is sufficient to evaluate an
application in a hybrid MPC framework. Optimal protocol selection
is an optimization problem, where the best mapping is identified in
regard to the cost model that considers the cost to evaluate each
circuit in the respective MPC protocol as well as the conversion
costs between the different representations. The concept of pro-
tocol selection has previously been studied independently from
compilation in [32, 44]. Kerschbaum et al. [32] investigated proto-
col selection for a combination of Yao’s garbled circuits and additive
homomorphic encryption. They conjectured that the optimization
problem is NP-hard and proposed two heuristic approaches. First,
they presented a transformation of the combinatorial optimization
problem into an integer linear programming task by linearization
of the cost model. Second, they presented a greedy optimization
algorithm, which is capable of optimizing larger functionalities.
Pattku et al. [44] used similar heuristics to optimize the protocol
selection for minimal cloud computing costs, i.e., the price to pay a
cloud provider to perform a computation, as a cost model.
We follow an approach that is different in multiple aspects. First,
we show that the synthesis of an efficient hybrid MPC protocol is
not only a protocol selection problem, but also a scheduling problem.
Second, in contrast to the work mentioned above, we make use of
structural information in the source code before its translation into
Session 5B: SecComp 2CCS’18, October 15-19, 2018, Toronto, ON, Canada848circuits. By grouping expressions that perform similar operations,
e.g., loops, it becomes possible to perform an exhaustive search
over the problem state for many practically relevant applications.
Applications that cannot be optimized to the full extent with the
available optimization time are approached by a combination of
exhaustive search with heuristics.
Finally, by separating compilation and protocol selection, an
optimized selection can be determined during protocol deployment,
which allows to adapt to the given deployment scenario. For this
purpose, we implement a probing technique, which evaluates the
computational power and network capabilities, for precise cost
estimation during protocol selection.
Our Contributions. We make the following contributions:
• We present the first complete tool-chain that automatically
creates partitioned circuits and optimizes their selection for
hybrid MPC protocols from standard ANSI C code, which
makes hybrid MPC accessible to non-domain experts.
• We contribute techniques and heuristics for efficient decom-
position of the code, scalable compilation, and protocol se-
lection.
• We propose to separate compilation from protocol selection.
This allows us to introduce a probing technique for MPC
protocol implementations to optimize the protocol selection
at runtime for the actual deployment scenario.
• We report speed-ups for our automatically compiled hybrid
protocols of more than one order of magnitude over stand-
alone protocol compilers, and factor three over previous
handmade protocols for an exemplary machine learning
application [38].
Outline. The paper is organized as follows: In §2 we discuss pre-
liminaries of MPC and related work. Our compilation architecture
is presented in §3, followed by a discussion of protocol selection
and partitioning in §4. An evaluation and comparison of HyCC
with related work is given in §5. We conclude in §6.
2 PRELIMINARIES AND RELATED WORK
In this section we provide a brief overview of the foundations of
HyCC and related work from the field.
2.1 MPC Protocols
For simplicity reasons, in this work, we focus on MPC with two
parties, also known as secure two-party computation, with security
against semi-honest (passive) adversaries. Yet, we remark that the
ideas and our compiler are a first starting point and can be extended
to computations with more than two parties and stronger adversar-
ial models with some engineering effort. MPC started as a field of
research in the 1980s with Yao’s garbled circuits protocol [51] and
the protocol of Goldreich, Micali, and Wigderson (GMW) [23]. A
comparison of both protocols is given in [47].
In Yao’s garbled circuits [51], two parties interactively evaluate
a garbled version of a Boolean circuit. One party, called garbler,
creates the garbled circuit and encodes its inputs according to the
garbled circuit. The other party, called evaluator, receives the gar-
bled circuit as well as encodings of its inputs via oblivious transfer
(OT) [2, 30, 42]. The evaluator then evaluates the circuit gate by
gate to compute the encoding of the output, which is finally de-
coded. Yao’s protocol has only a constant number of communication
rounds and the complexity stems from the total number of AND
gates in the circuit, as XOR gates can be evaluated for free [33].
Other state-of-the-art optimizations of garbled circuits that are used
in today’s implementations are point-and-permute [4], fixed-key
AES garbling [5], and half-gates [53].
In the GMW protocol [23], XOR-secret-sharing is used to hide
intermediate values. A Boolean circuit is interactively evaluated
on the secret-shared data. Similar to Yao’s protocol, XOR gates can
be evaluated for free. AND gates require one round of communi-
cation between the parties and multiplication triples [3], that can
be precomputed using OTs [2]. Thus, the complexity results from
both the total number of AND gates in the circuit as well as the
multiplicative depth of the circuit, i.e., the maximum number of
AND gates on the critical path from any input to any output.
Arithmetic sharing works similar to the GMW protocol and uses
modular addition to secret-share arithmetic values in Z2ℓ for a
bit length ℓ. Addition can be done for free, while multiplication
requires one round of interaction and arithmetic multiplication
triples, that can be efficiently precomputed using OTs [18, 22].
The aforementioned protocols protect the privacy of the pro-
cessed data by sharing it between two parties either by using secret-
sharing (GMW and arithmetic sharing) or garbling and evaluating
a Boolean circuit (Yao’s garbled circuits). Thus, we also refer to data
processed in the respective protocols as sharings.
While all three sharings allow private computations, they have
certain properties that make them preferable in certain scenarios.
Arithmetic sharing and GMW strongly depend on low-depth cir-
cuits and a low network latency to perform well. However, they
do not require symmetric cryptographic operations in the online
phase, which makes them better-suited for weaker devices than
Yao’s protocol. Yao’s protocol on the other hand is beneficial if
the latency between the two parties is high, since it only requires
a low constant number of communication rounds. When using
arithmetic sharing, additions and multiplications are very efficient,
while bit-operations require expensive bit-decomposition and are
thus preferably realized with a Boolean circuit-based protocol.
Private conversion between these sharings was shown to be
very efficient and can be implemented using OT [18]. However, the
conversion time is non-negligible and needs to be considered when
determining the overall protocol cost.
Determining an efficient combination of protocols for a given
optimization goal is a challenging task. It depends on the use case
and its complexity, the available hardware, and network connection
between the parties. We automate this process and describe it in §4.
2.2 MPC Frameworks
Multiple frameworks provide practical implementations of MPC,
e.g., Fairplay [39] and FastGC [28, 25] presented the first implemen-
tations of Yao’s garbled circuits. Sharemind [7], SPDZ [16], and [36]
are frameworks for secret sharing over arithmetic circuit-based
MPC protocols. Moreover, frameworks have been proposed for dif-
ferent deployment scenarios, e.g., outsourcing [11, 12, 13], mobile
devices [27], or to combine oblivious RAM with MPC [37].
Session 5B: SecComp 2CCS’18, October 15-19, 2018, Toronto, ON, Canada8493.
Yet, to the best of our knowledge, only a few support hybrid MPC
protocols. TASTY [24] combines Yao’s garbled circuits with addi-
tively homomorphic encryption. The ABY framework [18] is a more
recent framework that provides state-of-the-art implementations
of Yao’s garbled circuits, the GMW protocol, and arithmetic sharing
for arithmetic circuits, as well as efficient conversions between
3 [40] is
these three protocols (see §2.1) in the 2-party setting. ABY
a novel framework for hybrid secure 3-party computation with an
honest majority. The circuits generated from HyCC can directly be
used by ABY and ABY
2.3 Compilation for MPC
When presenting Fairplay [39], the authors realized the need for
compilation for MPC, and thus not only provided a protocol im-
plementation but also a circuit compiler for a domain specific lan-
guage (DSL). Subsequently, multiple Boolean circuit compilers have
been presented that improved the compilation result by using logic
minimization techniques (e.g., TinyGarble [17, 48]), improved the
compiler’s scalability (e.g., KSS [35], Obliv-C [52], and Frigate [41]),
targeted standard programming languages (e.g., CBMC-GC [26],
and PCF [34]), or provided a formally verified tool-chain (e.g., Circ-
Gen [1]). Examples for arithmetic circuit compilers that target linear
secret sharing-based MPC protocols are the Sharemind compiler [7]
for a DSL and the PICCO compiler [54] for C.
TASTY [24] was the first hybrid protocol compiler creating cir-
cuits for its own framework (cf. §2.2), where the programmer has to
manually select the respective protocol per operation. Very recently,
the authors of [14] proposed a solution for hybrid compilation of
MPC protocols called EzPC. However, while their main motivation
is similar to ours, our results differ in several key points. In EzPC, a
developer needs to invest much more work to manually split the
input program into suitable modules and needs to manually re-
solve private array accesses into multiplexer-like structures, which
hardly goes beyond what’s already possible using the underlying
ABY framework. Furthermore, EzPC does not apply circuit opti-
mizations and does not consider depth-optimized Boolean circuits,
as required for an efficient execution with the GMW protocol in
low-latency networks.