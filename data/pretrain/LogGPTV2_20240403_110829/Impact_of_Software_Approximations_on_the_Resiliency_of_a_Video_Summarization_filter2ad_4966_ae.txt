outcomes of an application. Based on heuristics learned from
EDC characterization, they propose a detection mechanism
to identify variables and locations to protect against EDC.
We propose a novel quantitative metric for EDC evaluation
on a complete video stitching algorithm and approximation
algorithms to achieve improvement in energy efﬁciency and
performance without signiﬁcant loss in end-quality.
C. Computer vision for UAV-based mobile cognition
Extensive research has gone into image-stitching algorithms
in the ﬁeld of computer vision. In [63], Szeliski describes
various algorithms for aligning and stitching images into seam-
less 2D photo-mosaics. Various state-of-the-art algorithms to
handle and summarize video content captured on-board a
UAV-based processor, have been described in [27]. Rane et
al. [64] proposed a method to evaluate mosaic quality using
maximum information retrieval. The method uses the similar-
ity between the stripes of the mosaic and the original frames
to evaluate performance of mosaicking methods. The videos
in the VIRAT dataset contain both translational and rotational
movements. However, unlike the algorithm evaluated in this
paper, this method works when camera has only translational
movement. The evaluation method proposed by Camargo et al.
[65] uses the distances between the corresponding keypoints
in all frames after the mosaic is generated. This method is
used to compare different optimization methods for parameter
estimation, but does not consider the image distortions caused
by fault injection. The paper [66] empirically evaluates the
detectability of objects of interest for human observers when
temporally local mosaics are applied on the live aerial video,
but cannot provide quantitative evaluation for fault injection.
Paalanen et al. [67] proposed a method to evaluate the mosaic
quality using ground truth data. However, ground truth data
608
can only be obtained in synthetic datasets. Since the dataset
that we use for our evaluations is a real-word one, determining
the ground truth is difﬁcult. El-Saban et al. [68] use human
eye to measure precision/recall of the mosaic quality of image
pairs. However,
this method too cannot provide scientiﬁc
measurement of the distortion caused by fault injection.
IX. CONCLUSION
In this work we study an end-to-end video summariza-
tion VS application that serves as a representative emerging
workload for the domain of Real Time Edge Computing.
We characterize the workﬂow of the application and examine
three different approximation techniques to improve the power
and performance efﬁciency of the workload while maintaining
sufﬁcient output integrity. We undertake a detailed resiliency
study of the application as well as its approximate versions and
show that the approximations do not degrade the resiliency
of the baseline algorithm. We further introduce metrics to
quantify the error introduced in an output image and use them
to understand the behavior of SDCs in the different Video
Summarization algorithms. We show that many of the SDCs
produced by the application can be tolerable to the end user
and hence can reduce the cost of protecting the application
against transient faults.
REFERENCES
[1] G. Ananthanarayanan, P. Bahl, P. Bodk, K. Chintalapudi, M. Philipose,
L. Ravindranath, and S. Sinha, “Real-time video analytics: The killer
app for edge computing,” IEEE Computer, vol. 50, no. 10, pp. 58–67,
2017.
[2] M. Satyanarayanan, “The emergence of edge computing,” Computer,
[3] R. Viguier et al., “Resilient mobile cognition: Algorithms, innovations,
vol. 50, pp. 30–39, Jan 2017.
and architectures,” in ICCD, 2015.
[4] L. Wang et al., “Power-efﬁcient embedded processing with resilience
and real-time constraints,” in ISLPED, 2015.
[5] J. Han and M. Orshansky, “Approximate computing: An emerging
paradigm for energy-efﬁcient design.,” in ETS, pp. 1–6, 2013.
[6] H. Esmaeilzadeh, A. Sampson, L. Ceze, and D. Burger, “Architecture
support for disciplined approximate programming,” SIGPLAN Not.,
2012.
[7] S. Sidiroglou-Douskos, S. Misailovic, H. Hoffmann, and M. C. Rinard,
“Managing performance vs. accuracy trade-offs with loop perforation,”
in SIGSOFT FSE, pp. 124–134, 2011.
[8] W. Baek and T. M. Chilimbi, “Green: A framework for supporting
energy-conscious programming using controlled approximation,” in Pro-
gramming Language Design and Implementation, PLDI, pp. 198–209,
2010.
[9] M. Samadi, J. Lee, D. A. Jamshidi, A. Hormati, and S. Mahlke,
“Sage: Self-tuning approximation for graphics engines,” in International
Symposium on Microarchitecture, MICRO, pp. 13–24, 2013.
[10] J. Sartori and R. Kumar, “Branch and data herding: Reducing control
and memory divergence for error-tolerant gpu applications,” Multimedia,
IEEE Transactions on, vol. 15, no. 2, pp. 279–290, 2013.
[11] D. Mahajan, A. Yazdanbakhsh, J. Park, B. Thwaites, and H. Es-
maeilzadeh, “Towards statistical guarantees in controlling quality trade-
offs for approximate acceleration,” in International Symposium on
Computer Architecture, ISCA, 2016.
[12] X. Sui, A. Lenharth, D. S. Fussell, and K. Pingali, “Proactive control
of approximate programs,” in Architectural Support for Programming
Languages and Operating Systems, ASPLOS, pp. 607–621, 2016.
[13] M. Carbin, S. Misailovic, and M. C. Rinard, “Verifying quantitative
reliability for programs that execute on unreliable hardware,” in Pro-
ceedings of
the 2013 ACM SIGPLAN International Conference on
Object Oriented Programming Systems Languages &#38; Applications,
OOPSLA ’13, (New York, NY, USA), pp. 33–52, ACM, 2013.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:29:17 UTC from IEEE Xplore.  Restrictions apply. 
[14] S. Misailovic, M. Carbin, S. Achour, Z. Qi, and M. C. Rinard, “Chisel:
Reliability- and accuracy-aware optimization of approximate computa-
tional kernels,” SIGPLAN Not., vol. 49, pp. 309–328, Oct. 2014.
[15] J. Park, H. Esmaeilzadeh, X. Zhang, M. Naik, and W. Harris, “Flexjava:
Language support for safe and modular approximate programming,” in
Joint Meeting on Foundations of Software Engineering, 2015.
[16] A. Sampson, A. Baixo, B. Ransford, T. Moreau, J. Yip, L. Ceze,
and M. Oskin, “Accept: A programmer-guided compiler framework for
practical approximate computing,” in Technical Report UW-CSE-15-01-
01, University of Washington, 2015.
[17] A. Sampson, W. Dietl, E. Fortuna, D. Gnanapragasam, L. Ceze, and
D. Grossman, “Enerj: Approximate data types for safe and general low-
power computation,” in Programming Language Design and Implemen-
tation, PLDI, pp. 164–174, 2011.
[18] B. Boston, A. Sampson, D. Grossman, and L. Ceze, “Probability
type inference for ﬂexible approximate programming,” in International
Conference on Object-Oriented Programming, Systems, Languages, and
Applications, OOPSLA, pp. 470–487, 2015.
[19] J. Park, X. Zhang, K. Ni, H. Esmaeilzadeh, and M. Naik, “Expax:
A framework for automating approximate programming,” in Technical
Report, Georgia Institute of Technology, 2014.
[20] A. B. Kahng, S. Kang, R. Kumar, and J. Sartori, “Designing a processor
from the ground up to allow voltage/reliability tradeoffs,” in Interna-
tional Symposium on High-Performance Computer Architecture (HPCA),
pp. 1–11, 2010.
[21] J. Sartori and R. Kumar, “Architecting processors to allow volt-
age/reliability tradeoffs,” in International Conference on Compilers,
Architectures and Synthesis for Embedded Systems, CASES, pp. 115–
124, 2011.
[22] H. Esmaeilzadeh, A. Sampson, L. Ceze, and D. Burger, “Neural acceler-
ation for general-purpose approximate programs,” in Microarchitecture
(MICRO), International Symposium on, pp. 449–460, 2012.
[23] J. San Miguel, J. Albericio, A. Moshovos, and N. E. Jerger, “Doppel-
ganger: A cache for approximate computing,” in International Sympo-
sium on Microarchitecture (MICRO), 2015.
[24] S. Liu, K. Pattabiraman, T. Moscibroda, and B. G. Zorn, “Flikker: Saving
dram refresh-power through critical data partitioning,” SIGPLAN Not.,
vol. 46, no. 3, pp. 213–224, 2011.
[25] S. Agarwal, H. Milner, A. Kleiner, A. Talwalkar, M. I. Jordan, S. Mad-
den, B. Mozafari, and I. Stoica, “Knowing when you’re wrong: building
fast and reliable approximate query processing systems,” in International
Conference on Management of Data, SIGMOD, pp. 481–492, 2014.
[26] K. Swaminathan et al., “A case for approximate computing in real-time
mobile cognition,” in Workshop on Approximate Computing Across the
System Stack (WACAS), 2015.
[27] C. Lin et al., “Moving camera analytics: Emerging scenarios, challenges,
and applications,” IBM JRD, 2015.
mance tracking.,” in ICCV, 2005.
detection,” in ECCV, 2006.
[30] E. Rublee, V. Rabaud, K. Konolige, and G. Bradski, “ORB: an efﬁcient
Errors,” in DSN, 2008.
[40] S. Hari, S. Adve, H. Naeimi, and P. Ramachandran, “Relyzer: Exploiting
Application-level Fault Equivalence to Analyze Application Resiliency
to Transient Faults,” in ASPLOS, 2012.
[41] “perf: Linux proﬁling with performance counters.”
[42] “Open source computer vision library (OpenCV),” 2015.
[43] M. Carbin and M. C. Rinard, “Automatically identifying critical input
regions and code in applications,” in International Symposium on
Software Testing and Analysis, ISSTA, pp. 37–48, 2010.
[44] B. Nongpoh, R. Ray, S. Dutta, and A. Banerjee, “Autosense: A
framework for automated sensitivity analysis of program data,” IEEE
Transactions on Software Engineering, vol. PP, no. 99, pp. 1–1, 2017.
[45] Q. Shi, H. Hoffmann, and O. Khan, “A cross-layer multicore architecture
to tradeoff program accuracy and resilience overheads,” IEEE Computer
Architecture Letters, vol. 14, no. 2, pp. 85–89, 2015.
[46] R. Venkatagiri, A. Mahmoud, S. K. S. Hari, and S. V. Adve, “Approxi-
lyzer: Towards a systematic framework for instruction-level approximate
computing and its application to hardware resiliency,” in International
Symposium on Microarchitecture (MICRO), pp. 1–14, 2016.
[47] P. Roy, R. Ray, C. Wang, and W. F. Wong, “Asac: Automatic sensitivity
analysis for approximate computing,” in Conference on Languages,
Compilers and Tools for Embedded Systems, LCTES ’14, pp. 95–104,
2014.
[48] A. Thomas and K. Pattabiraman, “Error detector placement for soft
computation,” in Dependable Systems and Networks (DSN), pp. 1–12,
2013.
[49] J. Ziegler et al., “IBM Experiments in Soft Fails in Computer Electronics
(1978 - 1994),” IBM JRD, 1996.
[50] E. Czeck and D. Siewiorek, “Effects of Transient Gate-Level Faults on
Program Behavior,” in Int. Symp. on Fault-Tolerant Computing, 1990.
[51] P. Shivakumar et al., “Modeling the Effect of Technology Trends on the
Soft Error Rate of Combinational Logic,” in DSN, 2002.
[52] S. Kim and A. Somani, “Soft Error Sensitivity Characterization for
Microprocessor Dependability Enhancement Strategy,” in DSN, 2002.
[53] N. Wang, J. Quek, T. Rafacz, and S. Patel, “Characterizing the Effects
of Transient Faults on a High-Performance Processor Pipeline,” in DSN,
2004.
[54] S. Mukherjee et al., “A Systematic Methodology to Compute the Archi-
tectural Vulnerability Factors for a High-Performance Microprocessor,”
in MICRO, 2003.
[55] A. Biswas et al., “Computing Architectural Vulnerability Factors for
Address-Based Structures,” in ISCA, 2005.
[56] X. Li, S. Adve, P. Bose, and J. Rivers, “SoftArch: An Architecture-Level
Tool for Modeling and Analyzing Soft Errors,” in DSN, 2005.
[57] X. Li, S. Adve, P. Bose, and J. Rivers, “Architecture-Level Soft Error
Analysis: Examining the Limits of Common Assumptions,” in DSN,
2007.
[58] M.-L. Li et al., “Trace-Based Microarchitecture-Level Diagnosis of
Permanent Hardware Faults,” in DSN, 2008.
[59] M.-L. Li et al., “Understanding the Propagation of Hard Errors to
Software and Implications for Resilient System Design,” in ASPLOS,
2008.
[60] S. Sahoo et al., “Using Likely Program Invariants to Detect Hardware
[61] S. Hari et al., “mSWAT: Low-Cost Hardware Fault Detection and
Diagnosis for Multicore Systems,” in MICRO, 2009.
[62] A. Thomas and K. Pattabiraman, “Error Detector Placement for Soft
Computation,” in DSN, 2013.
[63] R. Szeliski, “Image alignment and stitching: A tutorial,” 2004.
[64] K. Rane et al., “Mosaic evaluation: An efﬁcient and robust method based
on maximum information retrieval,” Int. J. Computer Applications, 2013.
[65] A. Camargo, Q. He, and K. Palaniappan, “Performance evaluations
for super-resolution mosaicing on UAS surveillance videos,” Int J Adv
Robotic Systems, 2013.
[66] B. Morse et al., “Application and evaluation of spatio-temporal enhance-
ment of live aerial video using temporally local mosaics,” in CVPR,
2008.
[67] P. Paalanen, J.-K. K¨am¨ar¨ainen, and H. K¨alvi¨ainen, “Image based quan-
titative mosaic evaluation with artiﬁcial video,” in Image Analysis,
pp. 470–479, 2009.
[68] M. El-Saban, M. Izz, A. Kaheel, and M. Refaat, “Improved optimal
seam selection blending for fast video stitching of videos captured from
freely moving devices,” in ICIP, 2011.
[28] E. Rosten and T. Drummond, “Fusing points and lines for high perfor-
[29] E. Rosten and T. Drummond, “Machine learning for high-speed corner
alternative to sift or surf,” in ICCV, 2011.
[31] M. Fischler and R. Bolles, “Random sample consensus: A paradigm
for model ﬁtting with applications to image analysis and automated
cartography,” Commun. ACM, 1981.
[32] S. Oh et al., “A large-scale benchmark dataset for event recognition in
surveillance video,” in CVPR, 2011.
[33] A. Vega et al., “Resilient, UAV-embedded real-time computing,” in
ICCD, 2015.
[34] A. Meixner, M. Bauer, and D. Sorin, “Argus: Low-Cost, Comprehensive
Error Detection in Simple Cores,” in MICRO, 2007.
[35] M.-L. Li et al., “Understanding the Propagation of Hard Errors to
Software and Implications for Resilient Systems Design,” in ASPLOS,
2008.
[36] M.-L. Li et al., “Accurate Microarchitecture-Level Fault Modeling for
Studying Hardware Faults,” in HPCA, 2009.
[37] A. Pellegrini et al., “CrashTest: A Fast High-Fidelity FPGA-based
Resiliency Analysis Framework,” in ICCD, 2008.
[38] A. Pellegrini et al., “CrashTest’ing SWAT: Accurate, Gate-Level Eval-
uation of Symptom-Based Resiliency Solutions,” in DATE, 2012.
[39] S. Nomura et al., “Sampling + DMR: Practical and Low-overhead
Permanent Fault Detection,” in ISCA, 2011.
609
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:29:17 UTC from IEEE Xplore.  Restrictions apply.