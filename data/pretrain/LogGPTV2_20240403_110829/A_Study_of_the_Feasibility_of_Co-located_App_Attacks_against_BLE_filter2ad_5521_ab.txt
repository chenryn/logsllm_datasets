### Read Response: `onRead` and `getValue()`

**Figure 3: Attack 2 - Illustrative Message Exchange Depicting Access to Pairing-Protected Data by Reusing an Existing Connection**

This figure illustrates how a malicious application can access pairing-protected data by reusing an existing connection. Dashed lines in the figure indicate encrypted traffic. The attack involves first writing to certain other characteristics on the tracker. Despite this, we found that our second attack, implemented through the AttackApp, was able to obtain Heart Rate Measurement readings without performing any "unlocking" procedures.

### 4.28th USENIX Security Symposium
USENIX Association

### Mechanism of the Attack

The AttackApp connects to the GATT server by reusing an existing connection initiated by the official application. Since the unlocking procedure has already been performed for that connection by the official application, the AttackApp can access the data without needing to perform any additional "unlocking." This result demonstrates that artificially restricting access to data using non-cryptographic means is ineffective. We notified the device developer of this issue on November 1, 2018, but have not yet received a response.

### Potential Implications

It should be noted that this attack could be used by a malicious application to target other sensitive health information, such as ECG, glucose, or blood pressure measurements from vulnerable BLE devices, to build a profile on a user's health. Additionally, Smart Home devices and BLE-enabled vehicles may hold information on a user's habits and lifestyle (e.g., time at home, alcohol consumption, driving speed), which could also be exploited. A malicious application might overwrite values on the BLE device, causing unexpected behavior or providing incorrect data to the legitimate application. For example, it may be possible to update the peripheral's firmware via GATT writes. If this mechanism is not suitably protected, a malicious application could potentially install malicious firmware onto the BLE device, as demonstrated in Section 4.6.

### Comparison with Classic Bluetooth

In their experiments with Classic Bluetooth, Naveed et al. found that an unauthorized Android application would not be able to obtain data from a Classic Bluetooth device if the authorized application had already established a socket connection with the device, as only one application can communicate with the device at a time. Therefore, a malicious application would either need side-channel information to determine the correct moment for data access or would need to interfere with the existing connection, potentially alerting the user. This limits the attack window for the malicious application. Our experiments show that this is not the case with BLE communication channels. With BLE, there are no socket connections, and if the official application has established a connection with the BLE device, any application running on the Android device can utilize this connection. Thus, a malicious application does not have to wait for the authorized application to disconnect before accessing data.

### Attack Limitations

#### First Attack
The main limitation for the AttackApp in the first attack scenario is that it requires the `BLUETOOTH` and `BLUETOOTH_ADMIN` permissions in its manifest, and also needs to explicitly request `LOCATION` permissions at first runtime to invoke the BLE scanner. This enables the AttackApp to connect to the BLE device regardless of whether another application is connected, but increases the risk of raising a user's suspicions.

#### Second Attack
In the second attack scenario, the obvious limitation for the AttackApp, which requests only the `BLUETOOTH` permission, is that the application will only be able to access data from the BLE peripheral when the peripheral is already in a connection with another application on the Android device. Data access must therefore be opportunistic, which can be achieved by periodically polling for a list of connected devices.

### Stakeholders, Mitigation Strategies, and Awareness

In this section, we discuss potential mitigating strategies that different stakeholders within the BLE ecosystem could implement to prevent the attacks detailed in Section 3.1. We consider the Bluetooth Special Interest Group (SIG), Android (i.e., Google), and BLE device/application developers as stakeholders.

#### 3.3.1 Bluetooth SIG
The Bluetooth SIG is responsible for defining and maintaining the Bluetooth standard, including details on pairing, bonding, and BLE attribute permissions. The SIG also defines various BLE services, such as the Heart Rate Service and the Continuous Glucose Monitoring Service. The Bluetooth specifications for these services require only pairing as a protection mechanism for the characteristics that hold health-related measurements. However, as shown in Section 3.1, pairing will not prevent unauthorized Android applications from accessing the sensitive data held in these characteristics.

To address this issue, the Bluetooth specification could be modified to introduce specific security measures for protecting data at higher layers. However, this would require changes to all devices within the ecosystem, which may not be feasible due to the sheer volume of devices and applications currently available, and could lead to fragmentation and reduced interoperability. Despite this, we believe that developers accessing Bluetooth documentation should be made aware of the risks involved. We notified the SIG via their Support Request Form on December 17, 2018, and were informed on December 19, 2018, that the case had been assigned to the appropriate team for assessment.

#### 3.3.2 Android
Allowing all applications on an Android device to share BLE communication channels and long-term keys may be by design, particularly since the BLE standard does not provide explicit mechanisms for selectively allowing or denying access to data based on the source application. This model may work in some situations, such as on a platform where all applications originate from the same trusted source. However, the Android ecosystem includes many applications from different and potentially untrusted sources. In this scenario, providing all applications with access to a common BLE transport opens up possibilities for attack, as we have demonstrated.

One option to eliminate this problem is to modify how Android handles BLE communication channels. The modification would require some form of association between BLE credentials and the application that triggers the pairing/bonding process. Each data access request would then be checked against the permissions associated with the requesting application. This approach is favored by Naveed et al., who propose a re-architected Android framework that creates a bonding policy when an application triggers pairing with a Bluetooth device. This strategy ensures that Bluetooth devices are protected by default from unauthorized access to their data. Assuming a suitably strong pairing mechanism is used, a minimum level of security will also be guaranteed. However, not only will the operating system(s) need to be modified, but a mechanism will also be required to ensure that all users' mobile devices are updated. Otherwise, this measure is likely to result in a fragmented ecosystem, with some devices running the modified operating system with protection mechanisms and others running older versions of the OS with no protection.

Regardless of whether the above measure is implemented, we believe that developers should be made aware of the possibility of unauthorized applications accessing their BLE device data. At present, Android does not mention this issue in its Developer Guide. To the best of the authors' knowledge, there is only a single document from a BLE chipset manufacturer that explicitly references the fact that multiple Android applications can simultaneously use a connection to a BLE device. Apart from this, the risks of "system-wide pairing" have been mentioned in a specification issued by the Fast ID Online (FIDO) Alliance, without specific reference to mobile platforms.

We submitted an issue to the Android Security Team on November 2, 2018, focusing on the need for clear documentation so that developers are aware of the need for implementing additional protection measures if they are handling sensitive BLE data. The issue was reviewed by the security team and rated as Moderate severity on May 16, 2019, based on Android's severity assessment matrix.

#### 3.3.3 BLE Device/Application Developers
Despite the BLE stack containing an application layer, it could be argued that BLE is commonly viewed as a lower-layer technology for providing wireless communication capabilities, on top of which higher-layer technologies operate. This results in the responsibility of securing user data being transferred from the Bluetooth SIG or Android to the BLE application/device developers. At present, this is the only mechanism available for protecting data against access by co-located applications.

Developers can implement end-to-end security from their Android application to the BLE peripheral firmware, rather than relying solely on the pairing provided by the underlying operating system. It may be possible to achieve this via BLE authorization permissions, as even though their purpose is to specify a requirement for end-user authorization, the behavior of BLE devices when encountering authorization requirements is implementation-specific. Most modern BLE chipsets implement authorization capabilities by intercepting read/write requests to the protected characteristics and allowing for developer-specified validation.

One advantage of this method is that it gives the developer complete control over the strength of protection applied to BLE device data, as well as over the timings of security updates. However, leaving the implementation of security to the developer runs the risk of cryptography being applied improperly, thereby leaving the data vulnerable. For existing developments, retrofitting application-layer security would mean that both an update for the Android application and a firmware update for the BLE device would be required, and there is a risk that the BLE firmware update procedure itself may not be secure.

Due to the lack of clear guidelines regarding attribute security in both the Android Developer Guide and the Bluetooth specification, it is also possible that developers implement no security at all, assuming that protection will be handled by pairing. In the next section, we test this assertion of a lack of developer awareness by exploring the current state of application-layer security deployments via a large-scale analysis of BLE-enabled Android applications.

### 4. Marketplace Application Analysis

As evidenced by our experiments, it is fairly straightforward for any Android application to connect to a BLE device and read or write pairing-protected data. As discussed in Section 3.3, the only strategy available at present is for developers to implement application-layer security, typically in the form of cryptographic protection, between the Android application and the BLE peripheral.

In this section, we identify the proportion of applications that do not implement such security mechanisms to demonstrate a possible lack of awareness surrounding the issue and to estimate the number of devices that are potentially vulnerable to the types of attack shown in Section 3.1.

#### 4.1 APK Dataset

We obtained our dataset from the AndroZoo project, an online repository made available for research purposes that contains APKs from several different application marketplaces. We focused on APKs retrieved from the official Google Play store, resulting in a sizeable dataset of over 4.6 million APKs. This dataset includes multiple versions for each application, as well as applications that are no longer available on the marketplace. We performed our analysis over the entire dataset, rather than focusing on only those APKs that are currently available on Google Play. This was partly because older versions of an application may still be residing on users' devices and partly to identify trends in application-layer security deployments over time.

Since we are only interested in applications that perform BLE attribute access, and because such access always requires communicating with the GATT server on the BLE peripheral, the APKs were filtered by the `BLUETOOTH` permission declaration and calls to the `connectGatt` method, which is called prior to performing any data reads or writes. 18,929 APKs, comprising 11,067 unique packages, from the original set of 4,600,000+ APKs satisfy this criteria and formed our final dataset.

#### Application Categories

Applications are categorized in Google Play according to their primary function, such as "Productivity" or "Entertainment," and it may be possible to gauge the sensitivity of the BLE data handled by an application based on the category it falls under. For example, "Health and Fitness" applications are probably more likely to hold personal user data than "Entertainment" applications.

The number of APKs per category has been listed in Table 1 for our dataset. Approximately 23% of the APKs (18% of unique applications) fall under the categories of "Health and Fitness" and "Medical," with a cumulative download count of over 350 million. Note that the disproportionately high volume of downloads for the category "Tools" is due to the Google and Google Play applications, which include BLE capabilities and are installed on most Android devices.

#### 4.2 Identification of BLE Methods and Crypto-Libraries

We perform our analysis against specific BLE methods and crypto-libraries. When considering BLE methods, we focus on those methods that involve data writes and reads. Table 2 lists the BLE data access methods of interest.

| **Method Signature** | **Description** |
|----------------------|-----------------|
| `byte[] getValue()` | Retrieves the value of a characteristic as a byte array. |
| `Integer getIntValue(int, int)` | Retrieves the integer value of a characteristic. |
| `String getStringValue(int)` | Retrieves the string value of a characteristic. |
| `Float getFloatValue(int, int)` | Retrieves the float value of a characteristic. |

By analyzing these methods and the use of crypto-libraries, we aim to identify the presence of application-layer security in the dataset.