* New: [Use Flexbox with Vuetify.](vuetify.md#flex)
    Control the layout of flex containers with alignment, justification and more
    with responsive flexbox utilities.
    !!! note
            "I suggest you use this page only as a reference, if it's the first time
            you see this content, it's better to see it at the
            [source](https://vuetifyjs.com/en/styles/flex) as you can see Flex in
            action at the same time you read, which makes it much more easy to
            understand."
    Explain how to use:
    * [Display breakpoints](vuetify.md#display-breakpoints).
    * [Flex direction](vuetify.md#flex-direction).
    * [Flex justify](vuetify.md#flex-justify).
    * [Flex align](vuetify.md#flex-align).
    * [Margins](vuetify.md#margins).
    * [Position elements with Flex](vuetify.md#position-elements-with-flex).
    * [Keep the structure even if some components are hidden](vuetify.md#Keep-the-structure-even-if-some-components-are-hidden).
* New: [Illustrations.](vuetify.md#illustrations)
    You can get nice illustrations for your web on [Drawkit](https://drawkit.com),
    for example I like to use the [Classic kit](https://drawkit.com/product/drawkit-classic).
* Correction: Correct the way to test for an attribute of an html element.
    ```javascript
    cy
     .get('a')
       .should('have.attr', 'href', 'https://docs.cypress.io')
       .and('have.attr', 'target', '_blank') // Test it's meant to be opened
       // another tab
    ```
* New: [Sending different responses.](cypress.md#sending-different-responses)
    To return different responses from a single `GET /todos` intercept, you can
    place all prepared responses into an array, and then use Array.prototype.shift
    to return and remove the first item.
    ```javascript
    it('returns list with more items on page reload', () => {
      const replies = [{ fixture: 'articles.json' }, { statusCode: 404 }]
      cy.intercept('GET', '/api/inbox', req => req.reply(replies.shift()))
    })
    ```
* New: [Get assets url.](vue_snippets.md#get-assets-url)
    If you're using Vite, you can save the assets such as images or audios in the
    `src/assets` directory, and you can get the url with:
    ```javascript
    getImage() {
      return new URL(`../assets/pictures/${this.active_id}.jpg`, import.meta.url).href
    },
    ```
    This way it will give you the correct url whether you're in the development
    environment or in production.
* New: [Play audio files.](vue_snippets.md#play-audio-files)
    You can get the file and save it into a `data` element with:
    ```javascript
    getAudio() {
      this.audio = new Audio(new URL(`../assets/audio/${this.active_id}.mp3`, import.meta.url).href)
    },
    ```
    You can start playing with `this.audio.play()`, and stop with
    `this.audio.pause()`.
* New: [Vue Router.](vuejs.md#vue-router)
    Creating a Single-page Application with Vue + Vue Router feels natural, all we
    need to do is map our components to the routes and let Vue Router know where to
    render them.
* New: [Deploy static site on github pages.](vuejs.md#deploy-static-site-on-github-pages)
* New: [Themes.](vuetify.md#themes)
    Vuetify comes with two themes pre-installed, light and dark. To set the default
    theme of your application, use the `defaultTheme` option.
    !!! note "File: `src/plugins/vuetify.js`"
        ```javascript
        import { createApp } from 'vue'
        import { createVuetify } from 'vuetify'
        export default createVuetify({
          theme: {
            defaultTheme: 'dark'
          }
        })
        ```
    Adding new themes is as easy as defining a new property in the `theme.themes`
    object. A theme is a collection of colors and options that change the overall
    look and feel of your application. One of these options designates the theme as
    being either a light or dark variation. This makes it possible for Vuetify to
    implement Material Design concepts such as elevated surfaces having a lighter
    overlay color the higher up they are.
    !!! note "File: `src/plugins/vuetify.js`"
        ```javascript
        import { createApp } from 'vue'
        import { createVuetify, ThemeDefinition } from 'vuetify'
        export default createVuetify({
          theme: {
            defaultTheme: 'myCustomLightTheme',
            themes: {
              myCustomLightTheme: {
                dark: false,
                colors: {
                  background: '#FFFFFF',
                  surface: '#FFFFFF',
                  primary: '#510560',
                  'primary-darken-1': '#3700B3',
                  secondary: '#03DAC6',
                  'secondary-darken-1': '#018786',
                  error: '#B00020',
                  info: '#2196F3',
                  success: '#4CAF50',
                  warning: '#FB8C00',
                }
              }
            }
          }
        })
        ```
    To dynamically change theme during runtime.
    ```javascript
        toggle theme
        ...
    ```
    Most components support the `theme` prop. When used, a new context is created
    for that specific component and all of its children. In the following example,
    the `v-btn` uses the dark theme applied by its parent `v-card`.
    ```javascript
          foo
    ```
* New: [Add more elements.](vuetify.md#elements)
    * [Cards](vuetify.md#cards)
    * [Carousels](vuetify.md#carousels)
* New: [Apply a style to a component given a condition.](vue_snippets.md#apply-a-style-to-a-component-given-a-condition)
    if you use `:class` you can write javascript code in the value, for example:
    ```html
    ```
* New: [Debug Jest tests.](vuejs.md#debug-jest-tests)
    If you're not developing in Visual code, running a debugger is not easy in the
    middle of the tests, so to debug one you can use `console.log()` statements and
    when you run them with `yarn test:unit` you'll see the traces.
### [Python](python.md)
* New: Add the di library to explore.
    [di](https://www.adriangb.com/di/0.36.0/): a modern dependency injection
    system, modeled around the simplicity of FastAPI's dependency injection.
* New: Add humanize library.
    [humanize](https://github.com/python-humanize/humanize): This modest package contains various common humanization utilities, like turning a number into a fuzzy human-readable duration ("3 minutes ago") or into a human-readable size or throughput.
* New: Add huey.
    [huey](https://github.com/coleifer/huey) is a little task queue for python.
* New: [Generators.](python.md#generators)
    Generator functions are a special kind of function that return a lazy iterator.
    These are objects that you can loop over like a list. However, unlike lists,
    lazy iterators do not store their contents in memory.
    An example would be an infinite sequence generator
    ```python
    def infinite_sequence():
        num = 0
        while True:
            yield num
            num += 1
    ```
    You can use it as a list:
    ```python
    for i in infinite_sequence():
    ...     print(i, end=" ")
    ...
    0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
    30 31 32 33 34 35 36 37 38 39 40 41 42
    [...]
    ```
    Instead of using a `for` loop, you can also call `next()` on the generator object
    directly. This is especially useful for testing a generator in the console:.
    ```python
    >>> gen = infinite_sequence()
    >>> next(gen)
    0
    >>> next(gen)
    1
    >>> next(gen)
    2
    >>> next(gen)
    3
    ```
* New: [Do the remainder or modulus of a number.](bash_snippets.md#do-the-remainder-or-modulus-of-a-number)
    ```bash
    expr 5 % 3
    ```
* New: [Update a json file with jq.](bash_snippets.md#update-a-json-file-with-jq)
    Save the next snippet to a file, for example `jqr` and add it to your `$PATH`.
    ```bash
    query="$1"
    file=$2
    temp_file="$(mktemp)"
    jq "$query" $file > "$temp_file"
    cmp -s "$file" "$temp_file"
    if [[ $? -eq 0 ]] ; then
      /bin/rm "$temp_file"
    else
      /bin/mv "$temp_file" "$file"
    fi
    ```
    Imagine you have the next json file:
    ```json
    {
      "property": true,
      "other_property": "value"
    }
    ```
    Then you can run:
    ```bash
    jqr '.property = false' status.json
    ```
    And then you'll have:
    ```json
    {
      "property": false,
      "other_property": "value"
    }
    ```
* New: [Interesting sources.](python.md#interesting-sources)
    [Musa 550](https://musa-550-fall-2020.github.io/) looks like a nice way to learn how to process geolocation data.
### [PDM](asyncio.md)
* New: Add asyncer as interesting library.
* New: Introduce PDM.
    [PDM](https://pdm.fming.dev/) is a modern Python package manager with [PEP
    582](https://www.python.org/dev/peps/pep-0582/) support. It installs and manages
    packages in a similar way to npm that doesn't need to create a virtualenv at
    all!
* New: Note that `pdm update` doesn't upgrade the constrains in `pyproject.toml`.
* New: Add tutorial on how to use asyncio.
    [Roguelynn tutorial](https://www.roguelynn.com/words/asyncio-we-did-it-wrong/)
* New: Version overriding now supports constrains.
    Before you had to pin specific versions, which is not maintainable, now
    you can use constrains
    ```toml
    [tool.pdm.overrides]
    asgiref = ">=3.2.10"
    ```
* New: [Show outdated packages.](pdm.md#show-outdated-packages)
    ```bash
    pdm update --dry-run --unconstrained
    ```
* New: [Round a number.](javascript_snippets.md#round-a-number)
    ```javascript
    Math.round(2.5)
    ```
* New: [Remove focus from element.](javascript_snippets.md#remove-focus-from-element)
    ```javascript
    document.activeElement.blur();
    ```
* New: [Concatenate two arrays.](javascript_snippets.md#concatenate-two-arrays)
    ```javascript
    const arr1 = ["Cecilie", "Lone"];
    const arr2 = ["Emil", "Tobias", "Linus"];
    const children = arr1.concat(arr2);
    ```
    To join more arrays you can use:
    ```javascript
    const arr1 = ["Cecilie", "Lone"];
    const arr2 = ["Emil", "Tobias", "Linus"];
    const arr3 = ["Robin"];
    const children = arr1.concat(arr2,arr3);
    ```
* New: [Check if a variable is not undefined.](javascript_snippets.md#check-if-a-variable-is-not-undefined)
    ```javascript
    if(typeof lastname !== "undefined")
    {
      alert("Hi. Variable is defined.");
    }
    ```
    feat(vue_snippets#Run function in background): Run function in background
    To achieve that you need to use [the javascript method called
    `setInterval()`](javascript.md#timing-events). It’s a simple function that would
    repeat the same task over and over again. Here’s an example:
    ```javascript
    function myFunction() {
    	setInterval(function(){ alert("Hello world"); }, 3000);
    }
    ```
    If you add a call to this method for any button and click on it, it will print
    Hello world every 3 seconds (3000 milliseconds) until you close the page.
    In Vue you could do something like: