log.Printf("%s->%s\n",status.Status❹,status.Message❺)
}
Listing3-6:DecodingaJSONresponsebody(/ch-3/basic-parsing/main.go)
ThecodebeginsbydefiningastructcalledStatus❶,which
containstheexpectedelementsfromtheserverresponse.The
main()functionfirstsendsthePOSTrequest❷andthen
decodestheresponsebody❸.Afterdoingso,youcanquery
theStatusstructasyounormallywould—byaccessingexported
datatypesStatus❹andMessage❺.
Thisprocessofparsingstructureddatatypesisconsistent
acrossotherencodingformats,likeXMLorevenbinary
representations.Youbegintheprocessbydefiningastructto
representtheexpectedresponsedataandthendecodingthe
dataintothatstruct.Thedetailsandactualimplementationof
parsingotherformatswillbeleftuptoyoutodetermine.
Thenextsectionswillapplythesefundamentalconceptsto
assistyouinbuildingtoolstointeractwiththird-partyAPIsfor
thepurposeofenhancingadversarialtechniquesand
reconnaissance.
BUILDINGANHTTPCLIENTTHAT
INTERACTSWITHSHODAN
Priortoperforminganyauthorizedadversarialactivities
againstanorganization,anygoodattackerbeginswith
reconnaissance.Typically,thisstartswithpassivetechniques
thatdon’tsendpacketstothetarget;thatway,detectionofthe
activityisnexttoimpossible.Attackersuseavarietyof
sourcesandservices—includingsocialnetworks,public
records,andsearchengines—togainpotentiallyuseful
informationaboutthetarget.
It’sabsolutelyincrediblehowseeminglybenign
informationbecomescriticalwhenenvironmentalcontextis
appliedduringachainedattackscenario.Forexample,aweb
applicationthatdisclosesverboseerrormessagesmay,alone,
beconsideredlowseverity.However,iftheerrormessages
disclosetheenterpriseusernameformat,andifthe
organizationusessingle-factorauthenticationforitsVPN,
thoseerrormessagescouldincreasethelikelihoodofan
internalnetworkcompromisethroughpassword-guessing
attacks.
Maintainingalowprofilewhilegatheringtheinformation
ensuresthatthetarget’sawarenessandsecurityposture
remainsneutral,increasingthelikelihoodthatyourattackwill
besuccessful.
Shodan(https://www.shodan.io/),self-describedas“the
world’sfirstsearchengineforinternet-connecteddevices,”
facilitatespassivereconnaissancebymaintainingasearchable
databaseofnetworkeddevicesandservices,including
metadatasuchasproductnames,versions,locale,andmore.
ThinkofShodanasarepositoryofscandata,evenifitdoes
much,muchmore.
ReviewingtheStepsforBuildinganAPIClient
Inthenextfewsections,you’llbuildanHTTPclientthat
interactswiththeShodanAPI,parsingtheresultsand
displayingrelevantinformation.First,you’llneedaShodan
APIkey,whichyougetafteryouregisteronShodan’s
website.Atthetimeofthiswriting,thefeeisfairlynominal
forthelowesttier,whichoffersadequatecreditsforindividual
use,sogosignupforthat.Shodanoccasionallyoffers
discountedpricing,somonitoritcloselyifyouwanttosavea
fewbucks.
Now,getyourAPIkeyfromthesiteandsetitasan
environmentvariable.Thefollowingexampleswillworkas-is
onlyifyousaveyourAPIkeyasthevariableSHODAN_API_KEY.
Refertoyouroperatingsystem’susermanual,orbetteryet,
lookatChapter1ifyouneedhelpsettingthevariable.
Beforeworkingthroughthecode,understandthatthis
sectiondemonstrateshowtocreateabare-bones
implementationofaclient—notafullyfeatured,
comprehensiveimplementation.However,thebasic
scaffoldingyou’llbuildnowwillallowyoutoeasilyextend
thedemonstratedcodetoimplementotherAPIcallsasyou
mayneed.
TheclientyoubuildwillimplementtwoAPIcalls:oneto
querysubscriptioncreditinformationandtheothertosearch
forhoststhatcontainacertainstring.Youusethelattercall
foridentifyinghosts;forexample,portsoroperatingsystems
matchingacertainproduct.
Luckily,theShodanAPIisstraightforward,producing
nicelystructuredJSONresponses.Thismakesitagood
startingpointforlearningAPIinteraction.Hereisahigh-level
overviewofthetypicalstepsforpreparingandbuildingan
APIclient:
1. Reviewtheservice’sAPIdocumentation.
2. Designalogicalstructureforthecodeinordertoreducecomplexityand
repetition.
3. Definerequestorresponsetypes,asnecessary,inGo.
4. Createhelperfunctionsandtypestofacilitatesimpleinitialization,
authentication,andcommunicationtoreduceverboseorrepetitivelogic.
5. BuildtheclientthatinteractswiththeAPIconsumerfunctionsandtypes.
Wewon’texplicitlycallouteachstepinthissection,but
youshouldusethislistasamaptoguideyourdevelopment.
StartbyquicklyreviewingtheAPIdocumentationon
Shodan’swebsite.Thedocumentationisminimalbutproduces
everythingneededtocreateaclientprogram.
DesigningtheProjectStructure
WhenbuildinganAPIclient,youshouldstructureitsothat
thefunctioncallsandlogicstandalone.Thisallowsyouto
reusetheimplementationasalibraryinotherprojects.That
way,youwon’thavetoreinventthewheelinthefuture.
Buildingforreusabilityslightlychangesaproject’sstructure.
FortheShodanexample,here’stheprojectstructure:
$treegithub.com/blackhat-go/bhg/ch-3/shodan
github.com/blackhat-go/bhg/ch-3/shodan
|---cmd
||---shodan
||---main.go
|---shodan
|---api.go
|---host.go
|---shodan.go
Themain.gofiledefinespackagemainandisusedprimarilyas
aconsumeroftheAPIyou’llbuild;inthiscase,youuseit
primarilytointeractwithyourclientimplementation.
Thefilesintheshodandirectory—api.go,host.go,and
shodan.go—definepackageshodan,whichcontainsthetypesand
functionsnecessaryforcommunicationtoandfromShodan.
Thispackagewillbecomeyourstand-alonelibrarythatyou
canimportintovariousprojects.
CleaningUpAPICalls
WhenyouperusedtheShodanAPIdocumentation,youmay
havenoticedthateveryexposedfunctionrequiresyoutosend
yourAPIkey.Althoughyoucertainlycanpassthatvalue
aroundtoeachconsumerfunctionyoucreate,thatrepetitive
taskbecomestedious.Thesamecanbesaidforeither
hardcodingorhandlingthebaseURL(https://api.shodan.io/).
Forexample,definingyourAPIfunctions,asinthefollowing
snippet,requiresyoutopassinthetokenandURLtoeach
function,whichisn’tveryelegant:
funcAPIInfo(token,urlstring){--snip--}
funcHostSearch(token,urlstring){--snip--}
Instead,optforamoreidiomaticsolutionthatallowsyou
tosavekeystrokeswhilearguablymakingyourcodemore
readable.Todothis,createashodan.gofileandenterthecode
inListing3-7.
packageshodan
❶constBaseURL="https://api.shodan.io"
❷typeClientstruct{
apiKeystring
}
❸funcNew(apiKeystring)*Client{
return&Client{apiKey:apiKey}
}
Listing3-7:ShodanClientdefinition(/ch-3/shodan/shodan/shodan.go)
TheShodanURLisdefinedasaconstantvalue❶;that
way,youcaneasilyaccessandreuseitwithinyour
implementingfunctions.IfShodaneverchangestheURLof
itsAPI,you’llhavetomakethechangeatonlythisone
locationinordertocorrectyourentirecodebase.Next,you
defineaClientstruct,usedformaintainingyourAPItoken
acrossrequests❷.Finally,thecodedefinesaNew()helper
function,takingtheAPItokenasinputandcreatingand
returninganinitializedClientinstance❸.Now,ratherthan
creatingyourAPIcodeasarbitraryfunctions,youcreatethem
asmethodsontheClientstruct,whichallowsyoutointerrogate
theinstancedirectlyratherthanrelyingonoverlyverbose
functionparameters.YoucanchangeyourAPIfunctioncalls,
whichwe’lldiscussmomentarily,tothefollowing:
func(s*Client)APIInfo(){--snip--}
func(s*Client)HostSearch(){--snip--}
SincethesearemethodsontheClientstruct,youcanretrieve
theAPIkeythroughs.apiKeyandretrievetheURLthrough
BaseURL.Theonlyprerequisitetocallingthemethodsisthat
youcreateaninstanceoftheClientstructfirst.Youcandothis
withtheNew()helperfunctioninshodan.go.
QueryingYourShodanSubscription
Nowyou’llstarttheinteractionwithShodan.PertheShodan
APIdocumentation,thecalltoqueryyoursubscriptionplan
informationisasfollows:
https://api.shodan.io/api-info?key={YOUR_API_KEY}
Theresponsereturnedresemblesthefollowingstructure.
Obviously,thevalueswilldifferbasedonyourplandetails
andremainingsubscriptioncredits.
{
"query_credits":56,
"scan_credits":0,
"telnet":true,
"plan":"edu",
"https":true,
"unlocked":true,
}
First,inapi.go,you’llneedtodefineatypethatcanbe
usedtounmarshaltheJSONresponsetoaGostruct.Without
it,youwon’tbeabletoprocessorinterrogatetheresponse
body.Inthisexample,namethetypeAPIInfo:
typeAPIInfostruct{
QueryCreditsint`json:"query_credits"`
ScanCreditsint`json:"scan_credits"`
Telnetbool`json:"telnet"`
Planstring`json:"plan"`
HTTPSbool`json:"https"`
Unlockedbool`json:"unlocked"`
}
TheawesomenessthatisGomakesthatstructureand
JSONalignmentajoy.AsshowninChapter1,youcanuse
somegreattoolingto“automagically”parseJSON—
populatingthefieldsforyou.Foreachexportedtypeonthe
struct,youexplicitlydefinetheJSONelementnamewith
structtagssoyoucanensurethatdataismappedandparsed
properly.
NextyouneedtoimplementthefunctioninListing3-8,
whichmakesanHTTPGETrequesttoShodananddecodes
theresponseintoyourAPIInfostruct:
func(s*Client)APIInfo()(*APIInfo,error){
res,err:=http.Get(fmt.Sprintf("%s/api-info?key=%s",BaseURL,s.apiKey))❶
iferr!=nil{
returnnil,err
}
deferres.Body.Close()
varretAPIInfo
iferr:=json.NewDecoder(res.Body).Decode(&ret)❷;err!=nil{
returnnil,err
}
return&ret,nil
}
Listing3-8:MakinganHTTPGETrequestanddecodingtheresponse(/ch-
3/shodan/shodan/api.go)
Theimplementationisshortandsweet.Youfirstissuean
HTTPGETrequesttothe/api-inforesource❶.ThefullURLis
builtusingtheBaseURLglobalconstantands.apiKey.Youthen
decodetheresponseintoyourAPIInfostruct❷andreturnitto
thecaller.
Beforewritingcodethatutilizesthisshinynewlogic,build
outasecond,moreusefulAPIcall—thehostsearch—which
you’lladdtohost.go.Therequestandresponse,accordingto
theAPIdocumentation,isasfollows:
https://api.shodan.io/shodan/host/search?key={YOUR_API_KEY}&query=
{query}&facets={facets}
{
"matches":[
{
"os":null,
"timestamp":"2014-01-15T05:49:56.283713",
"isp":"Vivacom",
"asn":"AS8866",
"hostnames":[],
"location":{
"city":null,
"region_code":null,
"area_code":null,
"longitude":25,
"country_code3":"BGR",
"country_name":"Bulgaria",
"postal_code":null,
"dma_code":null,
"country_code":"BG",
"latitude":43
},
"ip":3579573318,
"domains":[],
"org":"Vivacom",
"data":"@PJLINFOSTATUSCODE=35078DISPLAY="PowerSaver"
ONLINE=TRUE",
"port":9100,
"ip_str":"213.91.244.70"
},
--snip--
],
"facets":{
"org":[
{
"count":286,
"value":"KoreaTelecom"
},
--snip--
]
},
"total":12039
}
ComparedtotheinitialAPIcallyouimplemented,thisone
issignificantlymorecomplex.Notonlydoestherequesttake
multipleparameters,buttheJSONresponsecontainsnested
dataandarrays.Forthefollowingimplementation,you’ll
ignorethefacetsoptionanddata,andinsteadfocuson
performingastring-basedhostsearchtoprocessonlythe
matcheselementoftheresponse.
Asyoudidbefore,startbybuildingtheGostructsto
handletheresponsedata;enterthetypesinListing3-9into
yourhost.gofile.
typeHostLocationstruct{
Citystring`json:"city"`
RegionCodestring`json:"region_code"`
AreaCodeint`json:"area_code"`
Longitudefloat32`json:"longitude"`
CountryCode3string`json:"country_code3"`
CountryNamestring`json:"country_name"`
PostalCodestring`json:"postal_code"`
DMACodeint`json:"dma_code"`
CountryCodestring`json:"country_code"`
Latitudefloat32`json:"latitude"`
}
typeHoststruct{
OSstring`json:"os"`
Timestampstring`json:"timestamp"`
ISPstring`json:"isp"`
ASNstring`json:"asn"`
Hostnames[]string`json:"hostnames"`
LocationHostLocation`json:"location"`
IPint64`json:"ip"`
Domains[]string`json:"domains"`
Orgstring`json:"org"`
Datastring`json:"data"`
Portint`json:"port"`
IPStringstring`json:"ip_str"`
}
typeHostSearchstruct{
Matches[]Host`json:"matches"`
}
Listing3-9:Hostsearchresponsedatatypes(/ch-3/shodan/shodan/host.go)
Thecodedefinesthreetypes:
HostSearchUsedforparsingthematchesarray
HostRepresentsasinglematcheselement
HostLocationRepresentsthelocationelementwithinthehost
Noticethatthetypesmaynotdefineallresponsefields.Go
handlesthiselegantly,allowingyoutodefinestructureswith
onlytheJSONfieldsyoucareabout.Therefore,ourcodewill
parsetheJSONjustfine,whilereducingthelengthofyour
codebyincludingonlythefieldsthataremostrelevanttothe
example.Toinitializeandpopulatethestruct,you’lldefinethe
functioninListing3-10,whichissimilartotheAPIInfo()
methodyoucreatedinListing3-8.
func(s*Client)HostSearch(qstring❶)(*HostSearch,error){
res,err:=http.Get(❷
fmt.Sprintf("%s/shodan/host/search?key=%s&query=%s",BaseURL,
s.apiKey,q),
)
iferr!=nil{
returnnil,err
}
deferres.Body.Close()
varretHostSearch
iferr:=json.NewDecoder(res.Body).Decode(&ret)❸;err!=nil{
returnnil,err
}
return&ret,nil
}
Listing3-10:Decodingthehostsearchresponsebody(/ch-
3/shodan/shodan/host.go)
TheflowandlogicisexactlyliketheAPIInfo()method,
exceptthatyoutakethesearchquerystringasaparameter❶,
issuethecalltothe/shodan/host/searchendpointwhilepassingthe
searchterm❷,anddecodetheresponseintotheHostSearch
struct❸.
Yourepeatthisprocessofstructuredefinitionandfunction
implementationforeachAPIserviceyouwanttointeractwith.
Ratherthanwastingpreciouspageshere,we’lljumpahead
andshowyouthelaststepoftheprocess:creatingtheclient
thatusesyourAPIcode.
CreatingaClient
You’lluseaminimalisticapproachtocreateyourclient:takea
searchtermasacommandlineargumentandthencallthe
APIInfo()andHostSearch()methods,asinListing3-11.
funcmain(){
iflen(os.Args)!=2{
log.Fatalln("Usage:shodansearchterm")
}
apiKey:=os.Getenv("SHODAN_API_KEY")❶
s:=shodan.New(apiKey)❷
info,err:=s.APIInfo()❸
iferr!=nil{
log.Panicln(err)
}
fmt.Printf(
"QueryCredits:%d\nScanCredits:%d\n\n",
info.QueryCredits,
info.ScanCredits)
hostSearch,err:=s.HostSearch(os.Args[1])❹
iferr!=nil{
log.Panicln(err)
}
❺for_,host:=rangehostSearch.Matches{
fmt.Printf("%18s%8d\n",host.IPString,host.Port)
}
}
Listing3-11:Consumingandusingtheshodanpackage(/ch-