access six websites listed in Table 5. In the host OS, we ran Wireshark [5] (aka. Ethe-
real), a trafﬁc analysis tool, to record all network trafﬁc from the virtual machine. Then,
we activated SpyShield and repeated the above experiment.
To identify the network trafﬁc caused by a plug-in, we recorded baseline, the net-
work trafﬁc observed while surﬁng these six websites without any plug-in. We also
developed an analysis tool to capture the packets generated by a BHO or a toolbar. This
tool classiﬁes packets according to their destination IP addresses: any address outside
baseline was deemed as coming from a plug-in. Effective suppression of such trafﬁc
within a sensitive zone offers the evidence to the efﬁcacy of our technique.
A problem is that multiple visits of the website with dynamic contents might yield
different network trafﬁc. This could mislead our approach into including legitimate
packets. We tackled this problem through cleaning the output of the tool against a man-
ually compiled list of legitimate destination IP addresses. On the list were 25 addresses,
most of which were from msn and chase.
We also recorded to a log ﬁle all the function calls intercepted by proxy interfaces,
which told the story about plug-ins’ activities. For example, Browser Accelerator
Table 4. BHOs and Toolbars used in our experiments
INDEX PLUG-IN
TOOLBAR BHO TYPE
AvenueMedia/Internet Optimizer
Browser Accelerator
eXactSearch Toolbar
1
2
3
4 Mirar Toolbar
5
6
7
8
9
UCmore
Google Toolbar
LostGoggles
Security Software Search Bar 1.01
Yahoo! Toolbar
No
Yes
Yes
Yes
Yes
Yes
No
Yes
Yes
Yes Spyware
Yes Adware
Yes Adware
Yes Adware
No Adware
Yes Normal
Yes Normal
Yes Normal
Yes Normal
308
Z. Li, X. Wang, and J.Y. Choi
Table 5. Websites used in our experiments.
We visited “http://www.google.com” to re-
trieve “money + saving + account”, keywords interesting to spyware, so as to elicit their network-
We also included “http://an.invalid.url” in a sensitive zone because it
ing behaviors.
leads to the DNS error page which is intensively used by spy plug-ins to hijack an IE browser.
‡
†
Sensitive Zone?
Alias URL
http://www.bbc.co.uk NO
bbc
msn
NO
http://www.msn.com
google http://www.google.com NO
chase http://www.chase.com YES
citi
YES
‡
invalid http://an.invalid.url YES
http://www.citi.com
†
calls get Document to retrieve an HTML document as soon as a browser downloads
it; this call was blocked by our proxy when the browser was inside a sensitive zone.
Trafﬁc Differential Analysis. We present in Table 6 and Table 7 the results of our
differential analysis of plug-ins’ networking behaviors, which demonstrates the effec-
tiveness of SpyShield in suppressing leakage of sensitive information. Both tables report
plug-ins’ network trafﬁc when an IE browser visiting the URLs in Table 5, with Table 6
for an unprotect IE browser and Table 7 for the browser protected by SpyShield. Among
these URLs, the ﬁrst three were not in a sensitive zone and the rest were.
The tables show that most spy plug-ins produced network trafﬁc while visiting some
URLs. In the experiment, we observed that the occurrence of such trafﬁc was contingent
on the availability of the information ﬂows from the browser to the plug-ins. Through
examining the content of the trafﬁc, we further discovered that in many cases such
trafﬁc carried the URLs of the websites being visited. Our prototype controlled the plug-
ins’ interactions with the browser, which contributed to curbing such trafﬁc inside the
sensitive zone. Outside the sensitive zone, the trafﬁc recorded in both tables is identical,
which suggests that our prototype did not disrupt the plug-ins’ operations. We elaborate
our analysis of individual plug-ins’ behaviors below.
Table 6. Network trafﬁc from BHOs and toolbars in an unprotected IE browser
Index Plug-in
bbc
Browser Accelerator
eXactSearch Toolbar
1 AvenueMedia/Internet Optimizer -
2
3
4 Mirar Toolbar
5 UCmore
Exist
-
Exist
Exist
msn
-
Exist
-
Exist
Exist
Sensitive Zone
google
-
Exist
-
Exist
Exist
chase
-
Exist
-
Exist
Exist
citi
-
Exist
-
Exist
Exist
invalid
Exist
Exist
Exist
Exist
Exist
Table 7. Network trafﬁc from BHO/Toolbars under SpyShield.
was observed, which is irrelevant to the sensitive websites visited.
∗
Only part of the trafﬁc in Table 6
Index Plug-in
bbc
Browser Accelerator
eXactSearch Toolbar
1 AvenueMedia/Internet Optimizer -
2
3
4 Mirar Toolbar
5 UCmore
Exist
-
Exist
Exist
msn
-
Exist
-
Exist
Exist
google
-
Exist
-
Exist
Exist
Sensitive Zone
chase
-
∗
Exist
-
-
-
citi
-
∗
Exist
-
-
-
invalid
-
∗
Exist
-
-
-
SpyShield: Preserving Privacy from Spy Add-Ons
309
Legitimate Plug-ins. Legitimate BHOs and toolbars do not collect information without
users’ consent. Therefore, they should not produce network trafﬁc without being ex-
plicitly invoked, unless there is an agreement between the company distributing these
plug-ins and the customers. In our experiment, we did not observe any networking be-
haviors from all four legitimate plug-ins (Plug-ins with indices 6,7,8,9 in Table 4).
Spyware Plug-ins. Our implementation blocked all events and function calls related to
untrusted plug-ins when the browser was visiting a sensitive website like
‘http://www.chase.com’. This could also affect spy plug-ins’ communication
which serves to deliver the information stolen to the perpetrator. In our experiment, we
did observe the change of their networking behaviors, which are discussed as follows.
– AvenueMedia/Internet Optimizer is a BHO which can hijack a browser
by redirecting it to an advertisement website whenever an invalid URL http://
invalid.url is encountered. The same technique could also be used to stealthily
place a malicious site between the user and a sensitive website for eavesdropping
on their communication. The BHO employs a special technique to detect an invalid
URL: it subscribes to an event DISPID BEFORENAVIGATE2 occurring when a
website is to be accessed, and can therefore use a DNS query to determine the va-
lidity of the URL even before the browser does. Such a trick does not work on
SpyShield, as our approach also hooked that event to identify sensitive zones. In
our experiment, we found that the BHO’s network trafﬁc in response to an invalid
link disappeared under our prototype.
– Browser Accelerator extracts the information from the web page loaded in a
browser and sends it to data.browseraccelerator.com. Under SpyShield,
the packets responsible for such behaviors could not be observed once the browser
was inside the sensitive zone. However, we still detected some packets destined to
client.browseraccelerat or.com which our approach did not eliminate.
We studied the contents of these packets and found them having little bearing on
the sensitive website. Moreover, the same packets were also recorded when the
browser was outside the sensitive zone. This leads us to believe they did not contain
any sensitive information.
– eXactSearchBar also intends to hijack the invalid link. It redirects the browser
to an advertisement site http://www.bestoftheweb.cc/errorpage/
?src=4040&url=an.invalid&url once an error page was loaded. Packets
related to such behaviors did not show up in the sensitive zone when the browser
was protected by SpyShield. Previous research [28] also reported other networking
activities of the spyware, which however were not observed in our experiments.
This might be due to the change of the spyware’s behaviors.
– Mirar collects data from the web page downloaded by a browser and displays ad-
vertisements related to its contents. It also encrypts its network trafﬁc using SSL. In
our experiment, we found its networking behaviors disappeared within the sensitive
zone when SpyShield was running.
– UCmore is a toolbar which forwards the URLs of websites being visited and other
information such as time and cache data of the local host to users.ucmore.com.
This activity was stopped by SpyShield when sensitive websites were being surfed.
310
Z. Li, X. Wang, and J.Y. Choi
Control of Sensitive Events and Malicious Calls. Within a sensitive zone, SpyShield
is designed to block event notiﬁcations and function calls in accordance with security
policies. This was evaluated in our experiment through analyzing the log exported by
our prototype which recorded the dangerous behaviors of spy plug-ins being prevented
by the access-control proxy. Here we elaborate this study.
All spy add-ons in our experiment took IE’s IWebBrowser2 interface as an en-
trance to other interfaces, and also made intensive use of it to retrieve a browser’s sen-
sitive data. In addition, most of them subscribed to certain events to trigger the calls for
accomplishing their missions. As an example, we list in Table 8 the COM function calls
of Browser Accelerator invoked by the event DISPID DOCUMENTCOMPLETE
which indicates the completion of downloading a web page to a browser. Another exam-
ple is AvenueMedia/Internet Optimizer which took advantage of the event
DISPID BEFORENAVIGATE2 to identify an invalid link, and then called stop()
and Navigate2to redirect a browser to another website.
Table 8. Function Calls of Browser Accelerator triggered by Event DISPID
DOCUMENTCOMPLETE
Interface
IWebBrowser2
Function Call
get Document()
IDispatch
IHTMLDocument2 get parentWindow() Retrieve the interface pointer of IHTMLWindow2 in an IE object which accom-
QueryInterface()
Description
Retrieve the interface pointer of IDispatch in an IE object for the active
HTML document.
Query the interface pointer of IHTMLDocument2.
IHTMLDocument2 QueryInterface()
IOleObject
GetClientSite()
modates the active HTML document.
Query the interface pointer of IOleObject.
Get the pointer of an interface which maintains the information regarding the
display location of an embedded object in an active HTML document.
Query the interface pointer of ICustomDoc.
Set the pointer of a customized interface.
IHTMLDocument2 QueryInterface()
ICustomDoc
SetUIHandler()
get LocationURL() Retrieve the URL of the web page that IE is currently displaying.
IWebBrowser2
SpyShield prevented these plug-ins’ malicious activities within a sensitive zone
through blocking all event notiﬁcations issued by IE. Without such notiﬁcations, func-
tion calls driven by these events disappeared. For example, our prototype intercepted
and denied access to invoke() for 104 events subscribed by UCmore when visit-
ing the website http://www.chase.com, which stopped 6 calls used to collect
information from the site. Though most spy plug-ins were event-driven, we also found
two exceptions which were capable of collecting data from a browser without being
triggered by any event. Speciﬁcally, both Mirar and UCmore spawned threads once
initialized and used them to periodically poll the function get LocationURL() for
the URL to be visited. This malicious behavior was blocked by our prototype with the
plug-in rule in Table 1.
4.2 Overheads
We also studied the overheads introduced by SpyShield through experimentally evalu-
ating the performance of plug-ins under our implementation (including the prototypes
for both one-process and two-process solutions) against those running inside unpro-
tected IE. Our research intends to understand the performance impacts of SpyShield
SpyShield: Preserving Privacy from Spy Add-Ons
311
from the following perspectives: (1) the overheads of cross-process communications,
(2) the delay of COM function calls through the access-control proxy, (3) the waiting
time of web navigation, a major feature of most IE plug-ins and (4) memory usage
of the proxy. To this end, we conducted multiple experiments and also implemented a
BHO which collaborated with our prototype proxy to record timing information.
Cross-process Communications. In this experiment, we measured the performance of
cross-process communications and compared it with that of in-process communica-
tions. Our experiment involved emitting a message from our proxy through the COM
interface to the BHO which bounced back a response. The round-trip delay during this
process was halved and recorded by the proxy. This experiment was repeated for 1000
times each for the one-process setting in which the BHO and the proxy were inside
the same process, and the two-process setting where the BHO ran in a separate process