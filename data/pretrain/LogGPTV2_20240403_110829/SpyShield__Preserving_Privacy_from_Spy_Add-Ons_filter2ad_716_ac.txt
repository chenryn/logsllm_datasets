### Experimental Setup and Methodology

To evaluate the effectiveness of SpyShield, we conducted a series of experiments. We accessed six websites listed in Table 5 using a virtual machine (VM). In the host operating system (OS), we ran Wireshark, a network traffic analysis tool, to capture all network traffic generated by the VM. We then activated SpyShield and repeated the experiment to compare the results.

#### Identifying Plug-in Traffic

To isolate the network traffic caused by browser plug-ins, we first recorded a baseline of network traffic while browsing the six websites without any plug-ins. We also developed an analysis tool to capture and classify packets based on their destination IP addresses. Any address not present in the baseline was considered to be generated by a plug-in. This approach allowed us to effectively identify and suppress unwanted traffic within sensitive zones, thereby validating the efficacy of our technique.

#### Handling Dynamic Content

A challenge we faced was that multiple visits to websites with dynamic content could result in varying network traffic, potentially leading to the inclusion of legitimate packets. To address this, we cleaned the output of our tool against a manually compiled list of legitimate destination IP addresses. This list included 25 addresses, primarily from msn and chase.

#### Function Call Logging

We also logged all function calls intercepted by the proxy interfaces to understand the activities of the plug-ins. For example, the Browser Accelerator plug-in uses the `getDocument` function to retrieve an HTML document as soon as the browser downloads it. Our proxy blocked this call when the browser was inside a sensitive zone.

### Traffic Differential Analysis

Tables 6 and 7 present the results of our differential analysis, demonstrating the effectiveness of SpyShield in suppressing the leakage of sensitive information. Both tables report the network traffic generated by plug-ins when an Internet Explorer (IE) browser visited the URLs listed in Table 5. Table 6 shows the traffic for an unprotected IE browser, while Table 7 shows the traffic for a browser protected by SpyShield.

- **Unprotected IE Browser (Table 6)**: Most spy plug-ins produced network traffic while visiting certain URLs. The occurrence of such traffic was contingent on the availability of information flows from the browser to the plug-ins.
- **Protected IE Browser (Table 7)**: Under SpyShield, the traffic from untrusted plug-ins was significantly reduced or eliminated within the sensitive zone. Outside the sensitive zone, the traffic remained identical, indicating that our prototype did not disrupt normal operations.

### Analysis of Individual Plug-ins

- **AvenueMedia/Internet Optimizer**: This BHO can hijack the browser by redirecting it to an advertisement website when an invalid URL is encountered. SpyShield prevented this behavior by blocking the event `DISPID_BEFORENAVIGATE2`.
- **Browser Accelerator**: This plug-in extracts information from web pages and sends it to `data.browseraccelerator.com`. Under SpyShield, this behavior was stopped within the sensitive zone. However, some benign packets were still observed, which did not contain sensitive information.
- **eXactSearch Toolbar**: This toolbar redirects the browser to an advertisement site when an error page is loaded. SpyShield prevented this redirection within the sensitive zone.
- **Mirar Toolbar**: This toolbar collects data from web pages and displays related advertisements. It encrypts its traffic using SSL. SpyShield stopped this behavior within the sensitive zone.
- **UCmore**: This toolbar forwards the URLs of visited websites and other information to `users.ucmore.com`. SpyShield prevented this activity within the sensitive zone.

### Control of Sensitive Events and Malicious Calls

Within a sensitive zone, SpyShield blocks event notifications and function calls according to security policies. We evaluated this by analyzing the log files generated by our prototype, which recorded the prevention of dangerous behaviors by the access-control proxy.

- **Example Function Calls**: Table 8 lists the COM function calls of Browser Accelerator triggered by the `DISPID_DOCUMENTCOMPLETE` event, which indicates the completion of downloading a web page. SpyShield prevented these calls by blocking the event notifications.

### Performance Overheads

We also studied the performance overheads introduced by SpyShield. Our experiments focused on:

1. **Cross-process Communications**: We measured the round-trip delay of messages sent between the proxy and the BHO in both one-process and two-process settings.
2. **COM Function Call Delay**: We evaluated the delay introduced by routing COM function calls through the access-control proxy.
3. **Web Navigation Waiting Time**: We measured the time taken for web navigation, a key feature of most IE plug-ins.
4. **Memory Usage**: We analyzed the memory usage of the proxy.

These experiments provided insights into the performance impact of SpyShield, ensuring that it does not significantly affect the user experience while providing robust protection against malicious plug-ins.