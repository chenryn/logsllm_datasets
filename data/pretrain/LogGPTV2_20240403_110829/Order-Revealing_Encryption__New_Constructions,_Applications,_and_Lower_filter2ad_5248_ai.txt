B.1 Description of the Simulator
We begin by describing the simulator S. As in the proof of Theorem 3.3 (Appendix A), we model
H as a random oracle. Recall that the inputs to the encryption scheme are written in base d. First,
on input the security parameter 1λ, the simulator S0 maintains the following tables and sets which
will be used to ensure consistency throughout the simulation:
• The table Tro : {0, 1}λ × {0, 1}λ → Z3, used to maintain the input-output mappings to the
random oracle.
• The collection of tables Tkeys[j, s] : {0, 1}λ → [q] × [d], for each j ∈ [q] and s ∈ [n] used to
maintain mappings of keys k ∈ {0, 1}λ to tuples containing a message index associated with k,
along with the (permuted) position within the block associated with the key k.
• The collection of sets Sj,s ⊂ [d], for each j ∈ [q] and s ∈ [n], used to lazily sample the random
permutations for each block. Each of these sets Sj,s will always be a subset of [d].
The simulator’s initial state stS consists of the (initially empty) tables Tro, Tkeys[j, s], and the
(initially empty) sets Sj,s, for all j ∈ [q] and s ∈ [n]. Then, for each t ∈ [q], after the adversary outputs
a message mt, the simulation algorithm St is invoked on the input stS and the leakage function
Lblk(m1, . . . , mt). In particular, Lblk(m1, . . . , mt) includes both cmp(mi, mt) and ind(d)
diﬀ(mi, mt)
for all i  s. If there are multiple j for which
ind(d)
diﬀ(mj, mt) > s, let j be the smallest one. In this case, the simulator sets ¯u(t)
s = ¯u(j)
s .
• Case 2: For each (cid:96)  s, then the simulator sets ¯ρ = ¯z(i)
s,β.
Finally, the simulator adds the mapping (k, r) (cid:55)→ ¯ρ to Tro and replies with ¯ρ.
• For the ﬁnal case, if there is either no mapping of the form k (cid:55)→ (α, β) for some α ∈ [q] and
β ∈ [d] in Tkeys[j, s] for all j ≤ t and s ∈ [n], or r (cid:54)= ¯ri for all i ∈ [t], then the simulator chooses
r←− Z3, adds the mapping (k, r) (cid:55)→ ¯ρ to Tro, and replies with ¯ρ.
¯ρ
B.2 Correctness of the Simulation
To complete the proof, we argue that the real and ideal experiments REALoreA (λ) and SIMoreA,S,Lblk(λ),
respectively, are computationally indistinguishable. Similar to the proof of Theorem 3.3, we proceed
via a hybrid argument:
• Hybrid H0: The is the real experiment REALoreA (λ) (Deﬁnition 2.2).
• Hybrid H1: Same as H0, except that the PRFs F (k1,·) and F (k2,·) are replaced by truly
random functions f1, f2 : {0, 1}λ → {0, 1}λ.
• Hybrid H2: Same as H1, except that for each k ∈ {0, 1}λ, we replace each of the PRPs π(k,·)
with a truly random permutation τk over [d]. In other words, whenever there is an invocation
to π(k,·), we replace it with an invocation to τk(·). For distinct k, k(cid:48) ∈ {0, 1}λ, the truly
random permutations τk and τk(cid:48) are independent.
• Hybrid H3: Same as H2, except that the experiment aborts and outputs either ⊥1 or ⊥2 if
one of the following events occur:
– If the adversary queries for an encryption of a message m = m1m2 ··· mn ∈ [N ] and the
adversary is able to query the random oracle H on a tuple (f1(m|i−1(cid:107)τk(mi)), r(cid:48)), where
k = f2(m|i−1) for some i ∈ [n], and r(cid:48) ∈ {0, 1}λ, before it has made an encryption query
on some message m(cid:48) ∈ [N ] for which m(cid:48)
|i = m|i. In this case, the experiment outputs ⊥1.
39
– If for some j ∈ [q], the adversary queries H on an input of the form (k, rj), for some
k ∈ {0, 1}λ, before it makes the jth encryption query. Recall that rj ∈ {0, 1}λ is the
nonce sampled by the right encryption algorithm on the jth encryption query. In this
case, the experiment outputs ⊥2.
• Hybrid H4: This is the ideal experiment SIMoreA,S,Lblk(λ) (Deﬁnition 2.2).
Note that our sequence of hybrid experiments almost exactly mirrors the sequence used in the proof
of Theorem 3.3. The main diﬀerence is the needing to switch from using the PRP to using a truly
random permutation. This step was unnecessary in the small-domain setting because there, we
required just a single permutation which could be sampled during setup. We now argue that each
consecutive pair of hybrid arguments are computationally indistinguishable.
Lemma B.1. Hybrids H0 and H1 are computationally indistinguishable if F is a secure PRF.
Proof. Formally, we deﬁne an intermediate hybrid where we ﬁrst replace F (k1,·) with the truly
random function f1, but keep F (k2,·) as normal. In the second hybrid, we replace F (k2,·) with
the truly random function f2. For the ﬁrst hybrid argument, we use the fact that k1 is sampled
uniformly at random from the keyspace K (during the setup procedure). Thus, we can invoke
the PRF security of F to argue that F (k1,·) is indistinguishable from a truly random function
f1(·) : {0, 1}λ → {0, 1}λ. The second hybrid argument proceeds similarly where we now use the fact
that k2 is sampled uniformly at random from the keyspace. The claim then follows by the PRF
security of F .
Lemma B.2. Hybrids H1 and H2 are computationally indistinguishable if π is a secure PRP.
Proof. In hybrid H1, the keys used by the challenger to evaluate π are all derived from the outputs
of the truly random function f2. Using a sequence of hybrid arguments (one for each PRP key k),
we invoke security of the PRP and replace π(k,·) with a truly random permutation τk(·) on [d].
Note that we only require a polynomial number of intermediate hybrids in this reduction, since
we only need to invoke PRP security for each PRP key k that arises when responding to the
adversary’s queries. On each chosen message query, to construct the left ciphertexts, the challenger
needs to evaluate the PRP π on up to n = poly(λ) diﬀerent keys (one for each digit in the message).
Thus, if the adversary makes q queries, there are at most qn = poly(λ) number of PRP keys that
will be used to construct the ciphertexts in the real experiment. We conclude that the number of
intermediate hybrids is polynomially-bounded, and so the claim follows from PRP security.
Lemma B.3. Hybrids H2 and H3 are statistically indistinguishable if H is modeled as a random
oracle.
Proof. The proof of this lemma proceeds very similarly to the proof of Lemma A.3. We argue that
each of the abort events (represented by the simulator outputting either ⊥1 or ⊥2 in hybrid H2 can
only occur with negligible probability.
• Case 1: The experiment outputs ⊥1. Take any preﬁx m|i for some m ∈ [N ] and i ∈ [n]
and let µ = m|i−1(cid:107)τk(mi) from the simulator for the left ciphertexts. Suppose the adversary
has not yet queried for an encryption of any message m(cid:48) where m(cid:48)
|i = m|i. Then, we claim that
the adversary’s view is completely independent of f1(µ). Consider the ciphertext ct(cid:48) = (ct(cid:48)
L, ct(cid:48)
R)
the adversary obtains when it requests an encryption of a message m(cid:48).
40
L as ct(cid:48)
L = (u(cid:48)
1, . . . , u(cid:48)
First, we write ct(cid:48)
n). Since f1 is a truly random function, each component
j for all j (cid:54)= i is completely independent of f1(µ). More precisely, the ﬁrst component
u(cid:48)
of u(cid:48)
j is an output of f1 on a diﬀerent-lengthed preﬁx and the second component is the
output of a random permutation independent of f1. Finally, consider u(cid:48)
i. Again, the second
component of u(cid:48)
i is the output of a random permutation independent of f1 so it suﬃces to just
|i−1(cid:107)τk(cid:48)(m(cid:48)
i is given by f1(m(cid:48)
consider the ﬁrst component. The ﬁrst component of u(cid:48)
i)) where
|i−1 (so τk = τk(cid:48)), then mi (cid:54)= m(cid:48)
|i−1). There are two possibilities. If m|i−1 = m(cid:48)
k(cid:48) = f2(m(cid:48)
i, and
i) (cid:54)= τk(mi). Independence of u(cid:48)
so τk(m(cid:48)
i and f1(µ) then follows from the fact that the outputs
of f1 are independently uniform in {0, 1}λ. If m|i−1 (cid:54)= m(cid:48)
|i−1, then once again, we have that u(cid:48)
i
is independent of f1(µ).
n). First r(cid:48) is sampled
Next, we reason about the right ciphertext components ct(cid:48)
uniformly at random, and thus, is independent of f1(µ). Next, each of the components v(cid:48)
j for
j ∈ [n] can be written as cmp(j∗, m(cid:48)
j) + H(·) where j∗ ranges over the values in [d] in some
order. Certainly, the comparison outputs are independent of f1 and likewise for the outputs
of the random oracle. We conclude that ct(cid:48)
R = (r(cid:48), v(cid:48)
1, . . . , r(cid:48)
R is independent of f1(µ).
We have thus shown that as long as the adversary has not queried for an encryption of any
message m(cid:48) where m|i = m|i(cid:48), its view is independent of f1(µ). Now, let z1, . . . , z(cid:96) be the
adversary’s queries to the random oracle before it requests for an encryption of some m(cid:48)
where m(cid:48)
|i = m|i. By our argument above, each of the zi’s is necessarily chosen independently
of f (µ). Since f is a truly random function, the probability that there is some i such that
zi = (f1(µ), y) for any y, is at most (cid:96)/2λ = negl(λ), since (cid:96) = poly(λ). Therefore, we conclude
that experiment H3 outputs ⊥1 with negligible probability.
• Case 2: The experiment outputs ⊥2. Let z1, . . . , z(cid:96) for (cid:96) = poly(λ) be the random oracle
queries the adversary makes before making its jth encryption query. When constructing the
r←− {0, 1}λ. In
right ciphertext for the jth encryption query, the real experiment samples rj
particular, rj is independent of z1, . . . , z(cid:96), and so the probability that there is some i such
that zi = (x, rj) for any x is at most (cid:96)/2λ = negl(λ), and so the experiment outputs ⊥2 with
negligible probability. The claim follows.
Lemma B.4. Hybrid H3 and H4 are statistically indistinguishable if H is modeled as a random
oracle.
Proof. Let (ct1, . . . , ctq) be the joint distribution of the ciphertexts output in H3 and let (ct1, . . . , ctq)
be the joint distribution of the ciphertexts output in H4. We show that these two distributions are
statistically indistinguishable, and moreover, that the outputs of the random oracle are properly
simulated in H4. The structure of our proof proceeds very similarly to that of Lemma A.3.
Let m1, . . . , mq be the messages chosen by the adversary in H3 and H4. Recall that in the
simulation, the tables Tkeys[·,·] are used to maintain the mapping of keys k ∈ {0, 1}λ (the inputs
to the random oracle) to tuples containing a message index associated with k, along with the
(permuted) slot within the block associated with k. This is the analog of the table Tkeys used in the
proof of Theorem 3.3. The table Tro is a mapping for the inputs and outputs of the random oracle.
We now proceed via induction on the number of queries q. In each step of the induction, we
assume that the following invariants hold for each t < q:
• (ct1, . . . , ctt) ≡ (ct1, . . . , ctt).
41
• The outputs of the random oracle queries prior to the (t + 1)th query are statistically indistin-
guishable in H3 and H4.
Consider the base case where t = 0. If suﬃces to argue that all of the random oracle queries are