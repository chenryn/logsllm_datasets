当在 LVM 之外使用 GFS2 文件系统时，红帽只支持在共享 LVM 逻辑卷中创建的
GFS2 文件系统。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
当您将 GFS2
文件系统配置为集群文件系统时，您必须确定集群中的所有节点都可访问共享存储。不支持非对称集群配置（集群中有些节点可访问共享存储而其他节点不能访问共享存储）。这并不需要所有节点都确实挂载到
GFS2 文件系统中。
:::
:::
::: section
::: titlepage
# []{#assembly_planning-gfs2-deployment-configuring-gfs2-file-systems.html#con_gfs2-formattiing-considerations-planning-gfs2-deployment}GFS2 格式化注意事项 {.title}
:::
要格式化 GFS2 文件系统以优化性能，您应该考虑这些建议。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
请确定您部署的 Red Hat High Availability Add-On红
满足您的需要并可支持。部署前请咨询权威红帽代表确认您的配置。
:::
### []{#assembly_planning-gfs2-deployment-configuring-gfs2-file-systems.html#_file_system_size_smaller_is_better}文件系统大小：较小越好
GFS2 是基于 64 位构架，理论上可提供 8 EB 文件系统。但是，目前支持的 64
位硬件的最大 GFS2 文件系统为 100TB。
注：虽然有可能使用 GFS2 大文件系统，但并不意味着推荐使用它们。GFS2
的一般原则是容量越小越好：最好使用 10 个 1TB 文件系统而不是使用一个 10TB
文件系统。
尽量保持 GFS2 文件系统较小的原因是：
::: itemizedlist
-   备份每个文件系统需要较少的时间。
-   如果您需要使用 `fsck.gfs2`{.literal}
    命令检查文件系统，则需要较少的时间。
-   如果您需要使用 `fsck.gfs2`{.literal}
    命令检查文件系统，则需要较少的内存。
:::
另外，需要较少的资源组来保持更好的性能。
当然，如果您的 GFS2
文件系统太小，可能没有足够空间，这本身就会产生一定后果。在决定大小之前，您应该考虑您自己的具体用例。
### []{#assembly_planning-gfs2-deployment-configuring-gfs2-file-systems.html#_block_size_default_4k_blocks_are_preferred}块大小：默认(4K)块首选
`mkfs.gfs2`{.literal} 命令会尝试根据设备拓扑估算最佳块大小。通常, 4K
块是首选块大小,因为 4K 是 Red Hat Enterprise Linux
的默认页面大小（内存）。与其他一些文件系统不同，GFS2 使用 4K
内核缓冲进行大多数操作。如果您的块大小是
4K，那么内核会在操作缓冲区时进行较少的工作。
建议您使用默认块大小，这样可获得最好的性能。只有在需要有效存储许多小文件时才可能需要使用不同的块大小。
### []{#assembly_planning-gfs2-deployment-configuring-gfs2-file-systems.html#_journal_size_default_128mb_is_usually_optimal}日志大小：默认(128MB)通常是最佳设置
当您运行 `mkfs.gfs2`{.literal} 命令创建 GFS2
文件系统时，可以指定日志的大小。如果您没有指定大小，则默认为
128MB，这应该适用于大多数应用程序。
有些系统管理员可能会认为 128MB 过大，并尝试将日志大小降低为最小的 8MB
或者更传统的
32MB。虽然这样可能会正常工作，但可能会严重影响性能。与很多日志记录文件系统类似，GFS2
每次写入元数据时，会在日志发出前将其提交到日志中。这样可确保系统崩溃或断电，当日志在挂载时自动重新显示时，您将恢复所有元数据。但是，它没有太多文件系统活动来填充
8MB 日志，当日志满时，性能会慢，因为 GFS2 必须等待写入存储。
通常建议您使用默认的 128MB 的日志大小。如果您的文件系统非常小（例如
5GB），拥有 128MB
日志可能不太现实。如果您有一个大的文件系统并且可以获得更多的存储空间，则使用
256MB 日志可能会提高性能。
### []{#assembly_planning-gfs2-deployment-configuring-gfs2-file-systems.html#_size_and_number_of_resource_groups}资源组的大小和数目
使用 `mkfs.gfs2`{.literal} 命令创建 GFS2
文件系统时，它会将存储划分为统一的分片，称为资源组。它试图估算一个最佳资源组群大小（从
32MB 到 2GB）。您可以使用 `mkfs.gfs2`{.literal} 命令的 `-r`{.literal}
选项覆盖默认设置。
您的最佳资源组群大小取决于您的文件系统如何使用。考虑它的使用情况，以及是否产生大量碎片。
您应该使用不同的资源组大小进行测试，以了解哪些配置具有最佳性能。最好在将
GFS2 部署到完整产品前测试测试集群。
如果您的文件系统有太多资源组，则每个资源组太小，块分配可能会浪费大量时间为空闲块搜索成千上万的资源组。更加完整的文件系统、将搜索更多资源组，其中每个组都需要一个集群范围的锁定。这会导致性能下降。
然而,，果您的文件系统资源组太少，且每个资源组太大,块分配可能会更频繁地影响到同一资源组锁定，这也会影响到性能。例如：如果您有一个
10GB 文件系统被分为 5 个 2GB
资源组，则集群中的节点会比相同的文件系统被分成 320 个 32MB
的资源组更频繁竞争使用这 5
个资源组。如果您的文件系统计划已被完全占用，则这个问题会更加严重，因为每个块分配可能需要查看多个资源组才能找到可用块。GFS2
尝试以两种方式缓解这个问题：
::: itemizedlist
-   首先，当资源组完全满时，它会记住，并尝试避免在将来分配时检查它们，直到块从中释放。如果您从不删除文件，则这个问题并不严重。但是，如果您的应用程序正在持续删除块并在文件系统中分配最多完全的新块，则竞争会非常高，并且会对性能有严重影响。
-   其次,当在现有文件中添加新块时，GFS2
    将尝试将新块分组到与该文件相同的资源组群中。这么做的目的是为了提高性能：在旋转磁盘中，如果存储在物理位置上接近，则操作需要较少的时间。
:::
最糟糕的情况是，当存在所有节点创建文件的中央目录时，因为所有节点都会持续努力锁定同一资源组。
:::
::: section
::: titlepage
# []{#assembly_planning-gfs2-deployment-configuring-gfs2-file-systems.html#con_gfs2-cluster-considerations-planning-gfs2-deployment}集群中 GFS2 的注意事项 {.title}
:::
在决定您系统包含的节点数量时，请注意高可用性和性能之间有一个利弊关系。在有大量节点时，更难以扩展工作负载。因此,红帽不支持将
GFS2 用于部署超过 16 个节点的集群文件系统。
部署集群文件系统不是单一节点部署的\"拖放\"替换。红帽建议您预留约 8-12
周的时间测试新的安装，以便测试该系统并确保其在所需性能水平正常工作。在此阶段，可解决所有性能和功能问题，且所有查询都可提交红帽支持团队。
红帽建议考虑部署集群的用户在部署前由红帽支持审核其配置，以避免以后出现可能的支持问题。
:::
::: section
::: titlepage
# []{#assembly_planning-gfs2-deployment-configuring-gfs2-file-systems.html#con_basic-gfs2-hardware-considerations-planning-gfs2-deployment}硬件注意事项 {.title}
:::
在部署 GFS2 文件系统时，请考虑以下硬件注意事项。
::: itemizedlist
-   使用更高质量的存储选项
    GFS2 可以在更便宜的共享存储选项上运行，如 iSCSI
    或以太网光纤通道(FCoE)，但如果您购买具有更大的缓存容量的质量存储，您将会获得更好的性能。红帽通过光纤通道互连对
    SAN
    存储执行最高质量的、健全性和性能测试。作为常规规则，最好先部署已经测试的对象。
-   在部署前测试网络设备
    高质量的、更快的网络设备可使集群和 GFS2
    速度更快，且更可靠。然而，您并不要一定要买最昂贵的硬件。某些最昂贵的网络交换机通过多播数据包传递问题，它们用于传递
    `fcntl`{.literal}
    锁定(flocks)，而更便宜的商用网络交换机有时会更可靠。红帽建议您在将其部署到生产环境中前，对设备进行全面测试。
:::
:::
:::
[]{#assembly_gfs2-usage-considerations-configuring-gfs2-file-systems.html}
::: chapter
::: titlepage
# []{#assembly_gfs2-usage-considerations-configuring-gfs2-file-systems.html#assembly_gfs2-usage-considerations-configuring-gfs2-file-systems}第 2 章 关于 GFS2 使用的建议 {.title}
:::
在部署 GFS2 文件系统时，您应该考虑各种常规建议。
::: section
::: titlepage
# []{#assembly_gfs2-usage-considerations-configuring-gfs2-file-systems.html#proc_configuring-atime-gfs2-usage-considerations}配置 `atime`{.literal} 更新 {.title}
:::
每个文件内节点和目录内节点都有三个与之关联的时间戳：
::: itemizedlist
-   `ctime`{.literal} - 最后一次内节点（inode）状态发生变化的时间
-   `mtime`{.literal} - 修改文件（或目录）数据最后一次的时间
-   `atime`{.literal} - 最后一次访问文件（或目录）数据的时间
:::
如果默认在 GFS2 和其他 Linux 文件系统上启用了 `atime`{.literal}
更新，那么每次读取文件时都需要更新其内节点。
因为有些应用程序使用由 `atime`{.literal}
提供的信息，因此这些更新可能需要大量不必要的写入流量和文件锁定流量。该流量可能会降低性能，因此最好关闭或降低
`atime`{.literal} 更新的频率。
以下是减少 `atime`{.literal} 更新影响的方法：
::: itemizedlist
-   使用 `relatime`{.literal} (relative atime)挂载，如果以前的
    ` atime`{.literal} ``{=html} 更新比 `mtime`{.literal} 或
    `ctime`{.literal} 更新旧，则更新 atime。这是 GFS2
    文件系统的默认挂载选项。
-   带有 `noatime`{.literal} 或 `nodiratime`{.literal} 的挂载。使用
    `noatime`{.literal} 挂载时会禁用在那个文件系统上的文件和目录的
    `atime`{.literal} 更新；使用 `nodiratime`{.literal}
    挂载会禁用那个文件系统上的目录的 `atime`{.literal}
    更新。通常建议尽可能将 GFS2 文件系统挂载为使用 `noatime`{.literal}
    或 `nodiratime`{.literal} 挂载选项，而在允许的情况下首选使用
    `noatime`{.literal}。有关这些参数对 GFS2
    文件系统性能的影响的更多信息，请参考 [GFS2
    节点锁定](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_gfs2_file_systems/assembly_gfs2-performance-configuring-gfs2-file-systems#con_gfs2-node-locking-gfs2-performance){.link}。
:::
使用以下命令使用 `noatime`{.literal} Linux 挂载选项挂载 GFS2 文件系统。
``` literallayout
mount BlockDevice MountPoint -o noatime
```
::: variablelist
[`BlockDevice`{.literal}]{.term}
:   指定 GFS2 文件系统所在的块设备。
[`MountPoint`{.literal}]{.term}
:   指定要挂载 GFS2 文件系统的目录。
:::
在这个示例中，GFS2 文件系统位于 `/dev/vg01/lvol0`{.literal}
上，并挂载到目录 `/mygfs2`{.literal} 中，`atime`{.literal} 更新被关闭。
``` literallayout
# mount /dev/vg01/lvol0 /mygfs2 -o noatime
```
:::
::: section
::: titlepage
# []{#assembly_gfs2-usage-considerations-configuring-gfs2-file-systems.html#con_vfs-tuning-options-gfs2-usage-considerations}VFS 调整选项：研究和实验 {.title}
:::
和所有 Linux 文件系统一样，GFS2 位于名为虚拟文件系统(VFS)的层上。VFS
为大多数工作负载的缓存设置提供了很好的默认值，多数情况下不需要修改。但是，您有一个无法高效运行的工作负载（例如，缓存太大或太小），那么您可以使用
`sysctl`{.literal} (8)命令来调整 `/proc/sys/vm`{.literal} 目录中的
`sysctl`{.literal} 文件的值。有关这些文件的文档可在内核源树文档
`/sysctl/vm.txt`{.literal} 中找到。
例如，根据具体情况，可以调整 `dirty_background_ratio`{.literal} 和
`vfs_cache_pressure`{.literal} 的值。要获取当前值，请使用以下命令：
``` literallayout
# sysctl -n vm.dirty_background_ratio
# sysctl -n vm.vfs_cache_pressure
```
以下命令调整值：
``` literallayout
# sysctl -w vm.dirty_background_ratio=20
# sysctl -w vm.vfs_cache_pressure=500
```
您可以通过编辑 `/etc/sysctl.conf`{.literal} 文件来永久更改这些参数的值。
要找到您的使用案例的最佳值，请在部署到完整产品前检查各种 VFS
选项并在测试集群中进行实验。
:::
::: section
::: titlepage