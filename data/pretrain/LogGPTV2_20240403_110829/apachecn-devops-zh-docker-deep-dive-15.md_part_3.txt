$ docker swarm update --cert-expiry 720h 
```
 `Swarm 允许节点提前(稍微在证书过期之前)更新证书，这样并非所有节点都不会同时尝试更新它们的证书。
通过将`--external-ca`标志传递给`docker swarm init`命令，您可以在创建新群时配置外部 CA。
新的`docker swarm ca`子命令可用于管理 CA 相关配置。运行带有`--help`标志的命令，查看它可以做的事情的列表。
```
$ docker swarm ca --help
Usage:  docker swarm ca [OPTIONS]
Manage root CA
Options:
      --ca-cert pem-file          Path to the PEM-formatted root CA
                                  certificate to use for the new cluster
      --ca-key pem-file           Path to the PEM-formatted root CA
                                  key to use for the new cluster
      --cert-expiry duration      Validity period for node certificates
                                  (ns|us|ms|s|m|h) (default 2160h0m0s)
  -d, --detach                    Exit immediately instead of waiting for
                                  the root rotation to converge
      --external-ca external-ca   Specifications of one or more certificate
                                  signing endpoints
  -q, --quiet                     Suppress progress output
      --rotate                    Rotate the swarm CA - if no certificate
                                  or key are provided, new ones will be generated 
```
 `###### 集群存储
集群存储是集群的大脑，是存储集群配置和状态的地方。它对其他 Docker 技术也至关重要，如覆盖网络和机密。这就是为什么这么多高级和安全相关的 Docker 功能需要集群模式。这个故事的寓意是……如果你不是在集群模式下运行，将会有一堆你无法使用的 Docker 技术和安全特性。
该商店目前基于流行的`etcd`分布式数据库，并被自动配置为将其自身复制到群中的所有经理。默认情况下，它也是加密的。
集群存储的日常维护由 Docker 自动负责。但是，在生产环境中，您应该为其准备好强大的备份和恢复解决方案。
关于群模式安全性，到此为止。
##### 通过映像安全扫描检测漏洞
映像扫描是您抵御映像漏洞和安全漏洞的主要武器。
映像扫描仪通过检查映像和搜索具有已知漏洞的包来工作。一旦您了解了这些，您就可以将包和依赖项更新为带有修复的版本。
尽管映像扫描很好，但了解它的局限性也很重要。例如，映像扫描集中在映像上，不会检测到网络、节点或编排器的安全问题。此外，并不是所有的映像扫描仪都是相同的——一些扫描仪执行深度二进制级别的扫描来检测包，而另一些扫描仪只是查看包的名称，并不仔细检查映像的内容。
在撰写本文时，Docker Hub 不提供映像扫描服务。这在未来可能会改变。一些内部私有注册表解决方案提供内置扫描，还有第三方服务提供映像扫描服务。
图 15.9 和图 15.10 是映像扫描仪可以提供的报告类型的示例。
![Figure 15.9](img/figure15-9.png)
Figure 15.9
![Figure 15.10](img/figure15-10.png)
Figure 15.10
总之，映像安全扫描可以成为深入检查映像中已知漏洞的一个很好的工具。不过要小心，知识越丰富，责任越大——一旦你意识到漏洞，你就有责任减轻或修复它们。
##### 使用 Docker 内容信任签署和验证映像
Docker 内容信任(DCT)使验证您下载和运行的映像的完整性和发布者变得简单易行。当通过不可信的网络(如互联网)提取映像时，这一点尤其重要。
在高层次上，当映像被推送到 Docker Hub 或其他容器注册中心时，DCT 允许开发人员对映像进行签名。这些映像可以在拉取和运行时进行验证。这个高级过程如图 15.11 所示
![Figure 15.11](img/figure15-11.png)
Figure 15.11
DCT 也可以用来提供重要的*上下文*。这包括:一个映像是否已被签名以在特定环境中使用，如“prod”或“dev ”,或者一个映像是否已被较新的版本所取代并因此过时。
以下步骤将引导您完成配置 Docker 内容信任、签名和推送映像，然后拉出签名的映像。接下来，你需要一个加密密钥对来签署映像。
如果您还没有密钥对，您可以使用`docker trust`子命令生成一个新的密钥对。以下命令生成一个名为“nigel”的新密钥对。
```
$ docker trust key generate nigel
Generating key for nigel...
Enter passphrase for new nigel key with ID 1f78609: 
Repeat passphrase for new nigel key with ID 1f78609: 
Successfully generated and loaded private key.... public key available: /root/nigel.pub 
```
 `如果你已经有一个密钥对，你可以导入并加载`docker trust key load key.pem --name nigel`。
现在您已经加载了一个有效的密钥对，您需要将它与您将要将签名映像推送到的映像存储库相关联。本示例使用 Docker Hub 上的`nigelpoulton/dct` repo 和由先前的`docker trust key generate`命令创建的`nigel.pub`键。您的密钥文件将会不同。
```
$ docker trust signer add --key nigel.pub nigel nigelpoulton/dct
Adding signer "nigel" to nigelpoulton/dct...
Initializing signed repository for nigelpoulton/dct...
Enter passphrase for root key with ID aee3314: 
Enter passphrase for new repository key with ID 1a18dd1: 
Repeat passphrase for new repository key with ID 1a18dd1: 
Successfully initialized "nigelpoulton/dct"
Successfully added signer: nigel to nigelpoulton/dct 
```
 `以下命令将签署`nigelpoulton/dct:signed`映像**并**将其推送到 Docker Hub。
```
$ docker trust sign nigelpoulton/dct:signed
Signing and pushing trust data for local image nigelpoulton/dct:signed, 
may overwrite remote trust data
The push refers to repository [docker.io/nigelpoulton/dct]
1a777bda846c: Mounted from nigelpoulton/dct
d23c343f7626: Mounted from nigelpoulton/dct 
18dc259b4479: Mounted from nigelpoulton/dct 
40a236c21a47: Mounted from nigelpoulton/dct 
a9a7f132e4de: Mounted from nigelpoulton/dct 
9a8b7b2b0c33: Mounted from nigelpoulton/dct 
00891a9058ec: Mounted from nigelpoulton/dct 
d87eb7d6daff: Mounted from nigelpoulton/dct 
beee9f30bc1f: Mounted from nigelpoulton/dct 
signed: digest: sha256:c9f8e18822...6cbb9a74cf size: 2202
Signing and pushing trust metadata
Enter passphrase for nigel key with ID 1f78609: 
Successfully signed docker.io/nigelpoulton/dct:signed 
```
 `推送映像后，您可以使用以下命令检查其签名数据。
```
$ docker trust inspect nigelpoulton/dct:signed --pretty
Signatures for nigelpoulton/dct:signed
  SIGNED TAG          DIGEST                           SIGNERS
  signed              c9f8c18522...75aaccd6cbb9a74cf   nigel
List of signers and their keys for nigelpoulton/dct:signed
  SIGNER              KEYS
  nigel               1f786095c467
Administrative keys for nigelpoulton/dct:signed
  Repository Key:   1a18dd1113...a91f489782
  Root Key:         c2f53fd2f2...b0a720d344 
```
 `您可以通过导出值为`1`的`DOCKER_CONTENT_TRUST`环境变量，强制 Docker 主机始终对映像`push`和`pull`操作进行签名和验证。在现实世界中，您会希望这成为 Docker 主机的一个更持久的特性。
```
$ export DOCKER_CONTENT_TRUST=1 
```
 `一旦启用了 DCT，您将不再能够提取和处理未签名的映像。您可以通过尝试拉出以下两个映像来测试此行为:
*   nigelpoulton/dct:无符号
*   nigelpoulton/dct:签名
如果通过设置`DOCKER_CONTENT_TRUST`环境变量启用了 DCT，将无法拉取`dct:unsigned`映像。但是，您可以提取标记为`signed`的映像。
```
$ docker image pull nigelpoulton/dct:unsigned
No valid trust data for unsigned 
```
 `Docker 内容信任是一项重要技术，可帮助您验证从容器注册表中提取的映像。基本形式的配置很简单，但是更高级的功能，比如*上下文*，配置起来可能更复杂。
#### Docker 的机密
许多应用需要机密——比如密码、TLS 证书、SSH 密钥等等。
Docker 的早期版本没有标准化的方法来安全地让应用获得机密。开发人员通过纯文本环境变量将机密插入应用是很常见的(我们都做过)。这远非理想。
Docker 1.13 引入了 *Docker Secrets* 作为 Docker API 中的一级对象。
在幕后，机密在静止时被加密，在飞行中被加密，在容器中被装载到内存中的文件系统中，并在最低特权模式下运行，在这种模式下，机密只对已被明确授予访问权限的服务可用。相当全面的端到端解决方案，甚至有自己的`docker secret`子命令。
图 15.12 显示了一个高级工作流:
![Figure 15.12](img/figure15-12.png)
Figure 15.12
以下步骤遍历图 15.12 所示的高级工作流。
1.  蓝色的机密被创造并发布到蜂群中
2.  它存储在加密的集群存储中(所有管理人员都可以访问集群存储)
3.  蓝色服务被创建，机密被附加在它上面
4.  机密在传送到蓝色服务中的任务(容器)时被加密
5.  机密在`/run/secrets/`以未加密文件的形式装入蓝色服务的容器中。这是内存中的 tmpfs 文件系统(这一步在 Windows Docker 主机上是不同的，因为它们不像 tmpfs 那样有内存中文件系统的概念)
6.  一旦容器(服务任务)完成，内存中的文件系统就会被拆除，并且从节点中清除机密
7.  红色服务中的红色容器不能访问机密
机密以未加密的形式出现在运行的容器中的原因是，应用可以使用它们，而不需要方法来解密它们。
您可以使用`docker secret`子命令创建和管理机密，并且可以通过指定`docker service create`命令的`--secret`标志将它们附加到服务。
### 章节总结
Docker 可以配置为非常安全。它支持所有主要的 Linux 安全技术，包括:内核命名空间、cgroups、功能、MAC 和 seccomp。它附带了所有这些合理的默认值，但是您可以自定义它们，甚至禁用它们。
除了一般的 Linux 安全技术之外，Docker 还包括一系列自己的安全技术。群模式建立在顶级域名系统之上，配置和定制极其简单。映像扫描可以对映像执行二进制级别的扫描，并提供已知漏洞的详细报告。Docker 内容信任允许您签名和验证内容，Docker 机密允许您与容器和 Swarm 服务安全地共享敏感数据。
最终的结果是，您的 Docker 环境可以根据您的需要配置为安全或不安全，这完全取决于您如何配置它。``````````````````