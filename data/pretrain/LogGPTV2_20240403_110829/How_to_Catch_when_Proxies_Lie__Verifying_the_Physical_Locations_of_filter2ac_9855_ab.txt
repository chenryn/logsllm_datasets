linear curves for both distance models. These are defined by the
convex hull of the scatterplot of delay as a function of distance, up
to 50% and 75% of all round-trip times, respectively. Observations
beyond those cutoffs are considered unreliable, so Octant uses fixed
empirical speed estimates for longer round-trip times. The middle
panel of Figure 2 shows an example Octant calibration, with the
same data as the CBG calibration to its left. The convex hull is
drawn with solid lines and the fixed empirical speeds with dashed
lines.
Octant includes features that depend on route traces, such as
a “height” factor to eliminate the effect of a slow first hop from
any given landmark. Since we cannot collect route traces (see Sec-
tion 4.2), these have been omitted from our re-implementation, and
we call it “Quasi-Octant” to denote that change.
3.3 Spotter
Spotter [30] uses an even more elaborate delay-distance model. It
computes the mean and standard deviation of landmark-landmark
distance as a function of delay, and fits “a polynomial” to both.
Unlike CBG and Octant, a single fit is used for all landmarks. The
paper does not specify the degree of the polynomial, or the curve-
fitting procedure; we use cubic polynomials, fit by least squares,
and constrain each curve to be increasing everywhere (anything
more flexible led to severe overfitting in pilot tests).
Spotter also uses a probabilistic multilateration method. It esti-
mates the distance from each landmark to the target as a Gaussian
distribution, with mean µ and standard deviation σ given by the
fitted curves. This produces a ring-shaped probability distribution
over the surface of the Earth; the rings for each landmark are com-
bined using Bayes’ Rule to form the final prediction region.
The right panel of Figure 2 shows an example Spotter calibration.
The solid line is the best cubic fit for the mean µ of the distance-
delay relationship; dashed, dash-dot, and dotted lines are drawn at
µ ± σ, µ ± 3σ, and µ ± 5σ respectively.
3.4 Quasi-Octant/Spotter Hybrid
To separate the effect of Spotter’s probabilistic multilateration from
the effect of its cubic-polynomial delay model, we also implemented
a hybrid that uses Spotter’s delay model, but Quasi-Octant’s ring-
based multilateration. The minimum and maximum radii of the
ring are set to µ − 5σ and µ + 5σ, respectively.
4 MEASUREMENT METHOD
For all our experiments, we used the “anchor” hosts of RIPE At-
las [40] as landmarks. RIPE Atlas is a worldwide constellation of
hosts dedicated to Internet measurement, composed of “probes”
and “anchors;” there are fewer anchors, but they are more conve-
nient for use as landmarks. They are reliably available 24/7, their
documented locations are accurate, and they all continuously ping
each other and upload the round-trip times (RTT) to a publicly
accessible database. At the time we began our experiments (July
2016), there were 207 usable anchors; during the course of the ex-
periment, 12 were decommissioned and another 61 were added.
Figure 3 (left side) shows all the anchors’ locations. The majority
205
baselinebestlineslowlineCBG012023735005 00010 00015 00020 000One-way travel time (ms)asi-Octant05 00010 00015 00020 000Distance from landmark (km)Spoer05 00010 00015 00020 000IMC ’18, October 31–November 2, 2018, Boston, MA, USA
Zachary Weinberg et al.
Figure 3: Locations of the RIPE Atlas anchors (left) and probes with stable IPv4 addresses, as of April 2018.
are in Europe; North America is also well-represented. While there
are fewer anchors in Asia and South America, and only a few in
Africa, their geographic distribution is adequate—the most difficult
case for active geolocation is when all of the landmarks are far
away from the target, in the same direction [16, 34].
4.1 Two-phase measurement
It takes several minutes to ping all 250 of the anchors. Landmarks
far from the target do not contribute much useful information, as
we will discuss further in Section 5.2. We speed up the process
with a two-phase measurement, as proposed by Khan et al. [26]
and others [11, 23, 46]. We first measure RTTs to three anchors per
continent, and use these measurements to deduce which continent
the target is on. We then randomly select and measure RTTs to 25
more landmarks on that continent, from a list including all of the
anchors, plus all the probes that have been online for the past 30
days with a stable IPv4 address. These probes are shown in Figure 3
(right side).
Random selection of landmarks in the second phase spreads out
the load of our measurements, reducing their impact on concurrent
experiments [22]. Using stable probes as well as anchors spreads
the load even in parts of the world where there are few anchors.
We maintain a server that retrieves the list of anchors and probes
from RIPE’s database every day, selects the probes to be used as
landmarks, and updates a delay-distance model for each landmark,
based on the most recent two weeks of ping measurements available
from RIPE’s database. Our measurement tools retrieve the set of
landmarks to use for each phase from this server, and report their
measurements back to it. Some of the landmarks have both IPv4 and
IPv6 addresses, but the commercial proxy servers we are studying
offer only IPv4 connectivity, so the server resolves the landmarks’
hostnames itself and sends only IPv4 addresses to the tools.
4.2 Measurement tools
Commercial proxy providers aggressively filter traffic through their
proxies. Of the VPN servers we tested, roughly 90% ignore ICMP
ping requests. Similarly, 90% of the default gateways for VPN tun-
nels (i.e. the first-hop routers for the VPN servers) ignore ping
requests and do not send time-exceeded packets, which means we
cannot see them in a traceroute either. Roughly a third of the
servers discard all time-exceeded packets, so it is not possible to
traceroute through them at all. Some servers even drop UDP and
TCP packets with unusual destination port numbers.
In short, the only type of network message we can reliably use
to measure round-trip time is a TCP connection on a commonly
used port, e.g. 80 (HTTP). We implemented two measurement tools
that use this method to measure round-trip times to each landmark.
Command-line. For measurements of VPN proxies’ locations
(Section 6), we used a standalone program, written in Python and
C. It can take measurements either directly or through a proxy, and
it can process a list of proxies in one batch.
This tool uses the POSIX sockets API to make TCP connections.
It measures the time for the connect primitive to succeed or re-
port “connection refused,” and then closes the connection without
sending or receiving any data. We verified that connect consis-
tently returns as soon as the second packet of the TCP three-way
handshake arrives (i.e. after a single round-trip to a landmark) on
both Linux and NetBSD. (Linux was used as the client OS for all
the measurements of VPN proxies; some pilot tests involved clients
running NetBSD.) If a connection fails with an error code other than
“connection refused,” the measurement is discarded. “Network un-
reachable” errors, for instance, originate from intermediate routers,
so they do not reflect the full round-trip time.
Web-based. For algorithm validation (Section 5) we crowd-
sourced hosts in known locations from around the world. We could
not expect volunteers from the general public, or Mechanical Turk
workers, to download, compile, and run a command-line tool, so
we implemented a second measurement tool as a Web application.
Anyone can access the website hosting this application,2 and it
requires no “plug-ins” or software installation. It presents a live
demonstration of active geolocation, displaying the measurements
as circles drawn on a map, much as in Figure 1. After this demon-
stration is complete, it offers an explanation of the process, and
invites the user to upload the measurements to our database, if they
are willing to report their physical location.
The price of user-friendliness is technical limitations. Web appli-
cations are only allowed to send well-formed HTTP(S) messages; we
cannot close connections immediately upon establishment, without
sending or receiving any data, as the command-line tool does.
In principle, web applications are not allowed to communicate
with arbitrary hosts, only with the server hosting their website [24].
However, this rule has a loophole. When a web application attempts
to communicate with a server that isn’t hosting its website, the
browser will send an HTTP request, but won’t return a successful
2https://research.owlfolio.org/active-geo
206
AnchorsProbesHow to Catch when Proxies Lie
IMC ’18, October 31–November 2, 2018, Boston, MA, USA
Figure 4: Comparison of the CLI
tool with the web application in two
browsers, all running on Linux.
Figure 5: Comparison of four brows-
ers running on Windows 10.
Figure 6: High outliers removed from
Figure 5. The dashed line has the same
slope in both figures.
application will measure the time for either one or two round-trips,
and we can’t tell which.
4.3 Tool Validation
Figure 7 shows the abstract difference in the network traffic gen-
erated by the two tools. Figure 4 compares the round-trip times
measured by the command-line tool and the web application run-
ning under two different browsers, all three on a computer in a
known location running Linux, to a collection of landmarks as de-
scribed in Section 4.1. We manually partitioned the measurements
taken by the web application into groups suspected to be one round
trip and two round trips, and estimated the distance-delay relation-
ship for each by linear regression, shown with black lines and gray
95% confidence intervals. The slope of the two-round-trip line is
1.96 times the slope of the one-round-trip line; adjusted R2 (consid-
ering both lines as a single model) is 0.9942. After accounting for
the effects of distance and whether we measured one or two round
trips, ANOVA finds no significant difference among the three tools
(two additional degrees of freedom, F = 0.8262, p = 0.44) which is
a testament to the efficiency of modern JavaScript interpreters.
Figure 5 compares the round-trip times measured by the web
application running under four additional browsers, on the same
computer that was used for Figure 4, but running Windows 10
instead. (The command-line tool has not been ported to Windows.)
Measurements on Windows are much noisier than on Linux. We
can still distinguish a group of one-round-trip data points and a
group of two-round-trip data points, but there is a third group, “high
outliers,” separately shown in Figure 6 so that Figures 4 and 5 can
have the same vertical scale. The diagonal dashed line on Figures 5
and 6 has the same absolute slope. The high outlier measurements
are much slower than can be attributed to even two round-trips,
and their values are primarily dependent on the browser they were
measured with, rather than the distance.
Excluding the high outliers, the remaining data points for Win-
dows can also be modeled by a division into groups for one or two
round-trips, but not as cleanly as on Linux. The ratio of slopes is
Figure 7: Both measurement tools make TCP connections to
port 80 on each landmark. The CLI tool can use the low-level
connect API; the web application must use the higher-level
fetch API. We instruct fetch to send encrypted (HTTPS)
traffic to the usual port for unencrypted HTTP, forcing a pro-
tocol error. The CLI tool reliably measures one round-trip
time; the web application measures one or two round-trips,
depending on whether the landmark is listening on port 80.
response unless the server allows it, using special HTTP response
headers. Errors are still reported. Since we only care about the
time to connect, we make a request that we know will fail, and
measure the time to failure. Ideally, we would connect to a TCP
port that was not blacklisted by any VPN provider, and was closed
(not blackholed) on all the RIPE Atlas nodes we use, but there is no
such port.
Instead, the web application makes encrypted (HTTPS) connec-
tions to the usual TCP port for unencrypted HTTP (80). This will
fail after one round-trip if the landmark isn’t listening on port 80.
However, if it is listening on port 80, the browser will reply to
the SYN-ACK with a TLS ClientHello packet. This will trigger a
protocol error, and the browser will report failure, but only after a
second round-trip. Thus, depending on whether the landmark is
listening on port 80 (which depends on the version of the RIPE Atlas
node software it is running; we cannot tell in advance) the web
207
025050075005 00010 00015 000Distance (km)One-way travel time (ms)Measurement toolCLIChrome 68Firefox 52Round trips12025050075005 00010 00015 000Distance (km)One-way travel time (ms)BrowserChrome 68Firefox 52Firefox 61Edge 17Round trips12010002000300005 00010 000Distance (km)One-way travel time (ms)BrowserChrome 68Firefox 52Firefox 61Edge 17https://example.com:80/connectreturnsfetchreturnsclientserverSYNSYN-ACK or RSTACKClientHello400 Bad RequestIMC ’18, October 31–November 2, 2018, Boston, MA, USA
Zachary Weinberg et al.
Figure 8: Locations of the crowdsourced hosts used for algorithm validation, with volunteers on the left and Mechanical Turk
workers on the right.
Figure 9: Precision of predicted regions for crowdsourced test hosts.
2.29, adjusted R2 = 0.8983, and ANOVA finds the model is signifi-
cantly improved by considering the browser as well (three more
degrees of freedom, F = 13.11, p = 6.1 × 10−8). Equally concerning,
if we combine the two models, we find that the operating system
has a significant effect on the slopes of the lines (four additional
degrees of freedom, F = 693.56, p < 2.2× 10−16) and the regression
line for two round-trips measured on Linux (t = 0.03375d + 45.52,
distance in km, time in ms) is about the same as the line for one
round-trip measured on Windows (t = 0.03288d + 49.92).
In section 5, we will speak further of how these limitations affect
our assessment of which algorithm is most suitable for estimating
the location of a proxy that could be anywhere in the world.
5 ALGORITHM TESTING
In order to test our geolocation algorithms on hosts they hadn’t been
calibrated with, we crowdsourced a second set of hosts in known
locations.3 40 volunteers, recruited from a variety of mailing lists
and online forums, and another 150 paid contributors, recruited via
Mechanical Turk for 25¢ each, provided us with the approximate
physical location of their computers (rounded to two decimal places
in latitude and longitude, or roughly 10 km of position uncertainty)
and a set of round-trip times to RIPE Atlas anchors and probes,
using the Web-based measurement tool described in Section 4.2.
Their self-reported locations are shown in Figure 8. Like the RIPE
3This study was approved by our university’s IRB.
208