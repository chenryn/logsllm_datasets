ing techniques, dramatically improving the detection rate of the
best performing tool, i.e., Facet, from >99.0% to 55%-65%, i.e., from
nearly perfect guess to very close to random guess, while simul-
taneously improving covert channel bandwidth by 3⇥. Additional
experiments show that Protozoa can withstand a number of active
network perturbations without jeopardizing its resistance against
trac analysis or breaking the covert channel connection.
To assess the portability of Protozoa, we also tested our system
on alternative WebRTC services: appr.tc and coderpad.io. Our re-
sults showed that it can consistently achieve similar throughput
and trac analysis resistance properties when used over dierent
applications, which makes it useful in scenarios where specic
applications are blocked (e.g., appr.tc is blocked in China). Lastly,
we tested Protozoa in the wild by deploying Protozoa in three re-
gions that are known to enforce Internet censorship through several
means: the Great Firewall of China (GFW) apparatus in China, and
ISP censorship in Russia and India. We performed several exper-
iments from servers deployed in each of these regions. First, we
accessed blacklisted content without using Protozoa, and checked
that it was indeed inaccessible. Then, using Protozoa, we were able
to access this content, showing that our system can successfully
breach through existing censorship mechanisms deployed in these
regions, and provide free access to blocked Internet content.
2 THREAT MODEL
The general system model of a multimedia covert streaming (MCS)
tool is illustrated in Figure 2. It represents two users, one acting
as client (Alice), and a second acting as proxy (Bob). The client is
located in a censored region controlled by a state-level adversary,
and the proxy is based in a free Internet region. The adversary is
able to observe, store, interfere with, and analyze all the network
ows within its jurisdiction, and block the generalized access to
remote Internet services, such as CNN, Facebook, or Twitter, by
the residents in the censored region. The censorship policies can be
based on the IP address or the domain name of the target destination,
Session 1A: Anonymous Routing and Censorship CCS '20, November 9–13, 2020, Virtual Event, USA36Clien(cid:87)
Alice's Comp(cid:88)ter
Clien(cid:87)
Applica(cid:87)ion
MCS
Tool
Carrier
Applica(cid:87)ion
Pro(cid:91)(cid:92)
Bob's Comp(cid:88)ter
Carrier
Applica(cid:87)ion
MCS
Tool
Co(cid:89)er(cid:87) Channel
Carrier S(cid:87)ream
Ce(cid:81)(cid:86)(cid:82)(cid:85)ed Regi(cid:82)(cid:81)
F(cid:85)ee Regi(cid:82)(cid:81)
O(cid:83)e(cid:81)
I(cid:81)(cid:87)e(cid:85)(cid:81)e(cid:87)
C(cid:82)(cid:89)e(cid:85)(cid:87)
T(cid:85)af(cid:192)c
Figure 2: System model of a multimedia covert streaming
tool for censorship-resistant Internet communications.
the protocol used in the communication (e.g., BitTorrent or Tor), or
blacklisted content (e.g., through keyword and image ltering).
Text
Text
An MCS tool aims at enabling the client to overcome the com-
munication restrictions enforced by the adversary by leveraging (i)
the cooperation of a proxy located in the free region operated by a
trusted Internet user (Bob), and (ii) a carrier application consisting
of an encrypted video-streaming service (e.g., Skype) whose trac
the adversary authorizes to cross the boundaries of the censored
region. Both users – client and proxy – must run the MCS software
on their local computers to create a covert tunnel through the media
stream managed by the carrier application. This tunnel will allow
the client to contact remote hosts on the open Internet.
To defeat an MCS tool, the adversary can use deep packet in-
spection for pinpointing trac indicators that lead to the detection
of a covert channel. To increase its chances for successful detection,
it may apply statistical trac analysis techniques over collected
network traces [4]. The adversary may also launch indiscriminate
active network attacks aimed at perturbing the correct behavior
of covert channels lurking under seemingly legitimate ows while
ensuring that legitimate ows maintain a reasonable quality.
However, the adversary will seek only to rapidly disrupt and tear
down those ows which are suspected of carrying covert channels,
and it will refrain from blocking the carrier application altogether if
such an application is reckoned to provide an important service to
the population. The adversary is also deemed to be computationally
bounded, and unable to decrypt encrypted trac generated by the
carrier application. The adversary’s control is also limited to the
network: it has no access to the persistent or volatile state of clients,
proxies, or carrier application provider, and enjoys no privileges
over the software that can be executed by each party.
3 PARASITIZING ON WEBRTC STREAMS
In designing Protozoa, we elected WebRTC media streams as the
carrier medium for deploying practical, ecient, and secure covert
channels. WebRTC [47] is a W3C standardization initiative for
protocols and APIs for enabling secure real-time communication
between web browsers. All major browsers have built-in WebRTC
implementations enabling the generalized use of this technology.
WebRTC creates new opportunities for building MCS services
that can simultaneously be widely available and easy to use. By act-
ing at this layer, any WebRTC-powered application can be transpar-
ently used for covert data transmission. WebRTC has been currently
adopted by numerous services that integrate real-time communica-
tion capabilities1. This integration has been greatly facilitated by
1There are many dierent WebRTC-based web streaming applications, such as social
applications like Whereby or Facebook Messenger, the gaming-focused chat Discord,
the simplicity of the JavaScript WebRTC API [28]. The generalized
usage of web conferencing for professional dealings, in particular,
will make it very deterring for a state-level adversary to block all
WebRTC trac due to the extensive collateral damage to the coun-
try’s own sustainability [21]. This profusion of WebRTC services
also gives Protozoa users a great deal of exibility and options to
choose from when it comes to picking the carrier medium for covert
transmission. Creating covert sessions is in itself a user-friendly
operation since establishing a Protozoa connection is in no way
dierent from making a video call on a web streaming application
(including the process of joining a chatroom URL).
Given that a widely-used WebRTC stack is openly available (in
the Chromium web browser), we have full access to the WebRTC
video streaming pipelines which allows us to develop a new ecient
and secure covert data encoding technique named encoded media
tunneling. In existing raw media tunneling tools, the covert data is
encoded as pixels of the carrier video frames. Unfortunately, given
that the raw input signal undergoes lossy compression by the video
codec of the carrier application, a signicant amount of redundancy
must be included to enable the covert data recovery by the receiver
which degrades the utilization eciency of the covert channel.
Moreover, using up all possible pixel area of the carrier frames
for encoding covert data reduces the video codec’s compression
eciency, which increases the network packet sizes and deforms
the packet size frequency distribution when compared to that of
legitimate ows. Because this discrepancy can be detected by an
adversary, the covert channel tools must be parsimonious at using
up the video stream’s pixel area thereby throttling even further the
bandwidth capacity of the covert channel. Encoded media tunneling
overcomes these limitations and allows for boosting the capacity of
covert channels while oering strong resistance to trac analysis
attacks. Next, we describe our technique as we present Protozoa.
4 PROTOZOA
This section presents Protozoa, a system that provides covert chan-
nels over WebRTC media sessions2. Next, we present its architec-
ture and then describe its most relevant technical details.
4.1 Architecture
Figure 3 depicts the architecture of Protozoa. It follows the sys-
tem model of a general multimedia covert streaming (MCS) tool
presented in Figure 2. In Protozoa, the carrier application consists
of a web application that uses the WebRTC framework for pro-
viding a point-to-point live streaming service between its users,
e.g., Whereby. Typically, such an application consists of a backend
that handles the signaling and session establishment of video calls
between participants, and client-side JavaScript & HTML code that
initiates video calls and manages the video transmission via the
WebRTC API provided by the browser. The resulting media stream
will be used by Protozoa as the carrier for a covert channel.
The MCS tool (see Figure 2) is materialized by the Protozoa
software bundle which targets the Linux platform, and it is set up
dierently to work as client or proxy by two participating parties.
professional video conferencing services like Amazon Chime and Slack, remote coding
interview software like Coderpad, or even health monitoring through Vidyo.
2“Protozoa” alludes to parasitic biological organisms which feed on other organisms.
Session 1A: Anonymous Routing and Censorship CCS '20, November 9–13, 2020, Virtual Event, USA37A(cid:79)ice
C(cid:79)ie(cid:81)(cid:87)
Clien(cid:87) Ne(cid:87)(cid:90)o(cid:85)k Name(cid:86)(cid:83)ace
IP: 10.10.10.10
Clien(cid:87) Applica(cid:87)ion
10.
1.
IP (cid:83)acke(cid:87)(cid:86)
Encode(cid:85)
Decode(cid:85)
2.
P(cid:85)o(cid:87)o(cid:93)oa
Me(cid:86)(cid:86)age(cid:86)
(cid:28).
P(cid:85)o(cid:87)o(cid:93)oa Ga(cid:87)e(cid:90)a(cid:92)
B(cid:85)o(cid:90)(cid:86)ing Windo(cid:90)
(cid:114)hereb(cid:116)(cid:173)com(cid:186)chatroomID
SIP(cid:212)servers
P(cid:85)o(cid:87)o(cid:93)oa Ga(cid:87)e(cid:90)a(cid:92)
B(cid:85)o(cid:90)(cid:86)ing Windo(cid:90)
(cid:114)hereb(cid:116)(cid:173)com(cid:186)chatroomID
WebRTC
U(cid:83)(cid:86)(cid:87)(cid:85)eam 
Hook
Do(cid:90)n(cid:86)(cid:87)(cid:85)eam(cid:172)
Hook
A(cid:83)(cid:83)(cid:79)(cid:76)ca(cid:87)(cid:76)(cid:82)(cid:81)-de(cid:192)(cid:81)ed
(cid:86)(cid:76)(cid:74)(cid:81)a(cid:79)(cid:79)(cid:76)(cid:81)(cid:74)
P(cid:85)o(cid:87)o(cid:93)oa Me(cid:86)(cid:86)age(cid:86)
WebRTC (cid:80)ed(cid:76)a (cid:86)(cid:87)(cid:85)ea(cid:80)
(SRTP (cid:83)ac(cid:78)e(cid:87)(cid:86))
WebRTC
Do(cid:90)n(cid:86)(cid:87)(cid:85)eam 
Hook
U(cid:83)(cid:86)(cid:87)(cid:85)eam(cid:172)
Hook
3.
P(cid:85)o(cid:87)o(cid:93)oa
Me(cid:86)(cid:86)age(cid:86)
(cid:27).
B(cid:82)b
P(cid:85)(cid:82)(cid:91)(cid:92)
P(cid:85)o(cid:91)(cid:92) Ne(cid:87)(cid:90)o(cid:85)k Name(cid:86)(cid:83)ace
IP: 20.20.20.20
SOCKS Pro(cid:91)(cid:92)
4.
(cid:26).
IP (cid:83)acke(cid:87)(cid:86)
Decode(cid:85)
Encode(cid:85)
5.
IP (cid:83)acke(cid:87)(cid:86)
6.
cnn(cid:173)com
Figure 3: Architecture of Protozoa: The components of our system are highlighted in a darker shade.
Ce(cid:81)(cid:86)(cid:82)(cid:85)ed Regi(cid:82)(cid:81)
F(cid:85)ee Regi(cid:82)(cid:81)
The client will be able to execute unmodied IP applications whose
trac can seamlessly be routed through the WebRTC covert channel
by the proxy to destination hosts anywhere in the free Internet
region. Figure 3 shows Alice (client) executing a local application
for accessing cnn.com using Bob’s computer as proxy.
The Protozoa software bundle comprises four main components: