## Page 40
### Linked List Problems
| Title | Solution | Difficulty | Time Complexity | Space Complexity |
| --- | --- | --- | --- | --- |
| 328. Odd Even Linked List | Go | Medium | O(n) | O(1) |
| 445. Add Two Numbers II | Go | Medium | O(n) | O(1) |
| 725. Split Linked List in Parts | Go | Medium | O(n) | O(1) |
| 817. Linked List Components | Go | Medium | O(n) | O(1) |
| 707. Design Linked List | Go | Easy | O(1) | O(1) |
| 876. Middle of the Linked List | Go | Easy | O(n) | O(1) |
| 1019. Next Greater Node In Linked List | Go | Medium | O(n) | O(1) |

### Math and Other Problems
| Title | Solution | Difficulty | Time Complexity | Space Complexity |
| --- | --- | --- | --- | --- |
| 2. Add Two Numbers | Go | Medium | O(n) | O(1) |
| 50. Pow(x, n) | Go | Medium | O(log n) | O(1) |
| 60. Permutation Sequence | Go | Medium | O(n log n) | O(1) |
| 69. Sqrt(x) | Go | Easy | O(log n) | O(1) |
| 202. Happy Number | Go | Easy | O(log n) | O(1) |
| 224. Basic Calculator | Go | Hard | O(n) | O(1) |
| 231. Power of Two | Go | Easy | O(1) | O(1) |
| 263. Ugly Number | Go | Easy | O(log n) | O(1) |
| 326. Power of Three | Go | Easy | O(1) | O(1) |
| 343. Integer Break | Go | Medium | O(n) | O(1) |
| 357. Count Numbers with Unique Digits | Go | Medium | O(1) | O(1) |
| 628. Maximum Product of Three Numbers | Go | Easy | O(n) | O(1) |
| 885. Spiral Matrix II | Go | Medium | O(n^2) | O(1) |
| 891. Sum of Subsequence Widths | Go | Hard | O(n log n) | O(1) |
| 942. DI String Match | Go | Easy | O(n) | O(1) |
| 976. Largest Perimeter Triangle | Go | Easy | O(n log n) | O(1) |
| 996. Number of Squareful Arrays | Go | Hard | O(n log n) | O(1) |
| 1025. Divisor Game | Go | Easy | O(1) | O(1) |

---

## Page 41
### Segment Tree
- **Classic Array Implementation:** This implementation abstracts the `pushUp` logic for merging two nodes, allowing for various operations such as addition, max, min, etc. (e.g., problems 218, 303, 307, 699).
- **Counting Segment Tree:** Classic implementation for counting (e.g., problems 315, 327, 493).
- **Tree Implementation:** Implementing segment trees as a tree (e.g., problems 715, 732).
- **Lazy Propagation:** Updating intervals lazily (e.g., problems 218, 699).
- **Discretization:** Handling special cases in discretization (e.g., [1,10], [1,4], [6,10] should be adjusted to [1,4,5,6,10]).
- **Flexible Construction:** Storing multiple pieces of information in each node and using diverse `pushUp` operations (e.g., problems 850, 1157).

### Segment Tree Problem Types
1. **Single Point Update:**
   - HDU 1166: Enemy Formation (update: single point increment/decrement, query: interval sum)
   - HDU 1754: I Hate It (update: single point replacement, query: interval max/min)
   - HDU 1394: Minimum Inversion Number (update: single point increment/decrement, query: interval sum)
   - HDU 2795: Billboard (query: position of the maximum value in an interval)

2. **Interval Update:**
   - HDU 1698: Just a Hook (update: interval replacement, query: total interval)
   - POJ 3468: A Simple Problem with Integers (update: interval increment/decrement, query: interval sum)
   - POJ 2528: Mayor's Posters (discretization + update: interval replacement, query: simple hash)
   - POJ 3225: Help with Intervals (update: interval replacement, interval XOR, query: simple hash)

3. **Interval Merging:**
   - POJ 3667: Hotel (update: interval replacement, query: leftmost endpoint satisfying conditions)

4. **Sweep Line:**
   - HDU 1542: Atlantis (update: interval increment/decrement, query: root node value)
   - HDU 1828: Picture (update: interval increment/decrement, query: root node value)

---

## Page 42
### Segment Tree Problems
| Title | Solution | Difficulty | Time Complexity | Space Complexity |
| --- | --- | --- | --- | --- |
| 218. The Skyline Problem | Go | Hard | O(n log n) | O(n) |
| 307. Range Sum Query - Mutable | Go | Hard | O(log n) | O(n) |
| 315. Count of Smaller Numbers After Self | Go | Hard | O(n log n) | O(n) |
| 327. Count of Range Sum | Go | Hard | O(n log n) | O(n) |
| 493. Reverse Pairs | Go | Hard | O(n log n) | O(n) |
| 699. Falling Squares | Go | Hard | O(n log n) | O(n) |
| 715. Range Module | Go | Hard | O(log n) | O(n) |
| 732. My Calendar III | Go | Hard | O(log n) | O(n) |
| 850. Rectangle Area II | Go | Hard | O(n log n) | O(n) |
| 1157. Online Majority Element In Subarray | Go | Hard | O(log n) | O(n) |

---

## Page 43
### Sliding Window Problems
| Title | Solution | Difficulty | Time Complexity | Space Complexity |
| --- | --- | --- | --- | --- |
| 3. Longest Substring Without Repeating Characters | Go | Medium | O(n) | O(1) |
| 76. Minimum Window Substring | Go | Hard | O(n) | O(1) |
| 159. Longest Substring with At Most Two Distinct Characters | Go | Hard | O(n) | O(1) |
| 239. Sliding Window Maximum | Go | Hard | O(n) | O(1) |
| 340. Longest Substring with At Most K Distinct Characters | Go | Hard | O(n) | O(1) |
| 480. Sliding Window Median | Go | Hard | O(n log k) | O(k) |
| 567. Permutation in String | Go | Medium | O(n) | O(1) |
| 727. Minimum Window Subsequence | Go | Hard | O(n) | O(1) |
| 962. Maximum Width Ramp | Go | Medium | O(n) | O(1) |
| 995. Minimum Number of K Consecutive Bit Flips | Go | Hard | O(n) | O(1) |
| 1004. Max Consecutive Ones III | Go | Medium | O(n) | O(1) |
| 1100. Find K-Length Substrings With No Repeated Characters | Go | Medium | O(n) | O(1) |
| 1151. Minimum Swaps to Group All 1's Together | Go | Medium | O(n) | O(1) |
| 1040. Moving Stones Until Consecutive II | Go | Medium | O(n) | O(1) |
| 1074. Number of Submatrices That Sum to Target | Go | Hard | O(n^3) | O(n^2) |

---

## Page 44
### Sliding Window Techniques
- **Two-Pointer Sliding Window:** The right pointer moves to the right until it cannot move further (condition depends on the problem). When the right pointer reaches the end, the left pointer starts moving to release the left boundary of the window.
  ```go
  left, right := 0, -1
  for left < len(s) {
      if right+1 < len(s) && freq[s[right+1]-'a'] == 0 {
          freq[s[right+1]-'a']++
          right++
      } else {
          freq[s[left]-'a']--
          left++
      }
      result = max(result, right-left+1)
  }
  ```

This structure provides a clear and organized overview of the problems and their complexities, making it easier to understand and reference.