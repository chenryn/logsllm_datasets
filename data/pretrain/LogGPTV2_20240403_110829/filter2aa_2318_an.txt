component   in   Angular   application.   The   main   advantage   of   templates   is   that   you   can   
pass   in   data   allowing   you   to   dynamically   generate   HTML   code   based   on   the   arguments   
passed   to   it.   An   example   template   can   be   found   below:  
●
Welcome   {{Username}}!  
As   you   can   see   the   following   template   creates   an   “h1”   tag   which   welcomes   the   current   
user.   The   “{{Username}}”   is   an   expression   and   changes   based   on   your   username.   If   my   
username   is   “ghostlulz”   then   the   application   would   display   “Welcome   ghostlulz!”.   This   
allows   Angular   to   dynamically   generate   HTML   pages   instead   of   using   static   pages   as   
shown   below:  
●
   Welcome   ghostlulz!  
Expressions   are   Javascript   like   code   snippets   .   Like   Javascript   expressions   Angular   
expressions   can   contain   literals,   operators,   and   variables   as   shown   below:  
●
1+1  
●
A+b  
●
User.name  
●
Items[index]  
Unlike   Javascript   expressions   which   are   evaluated   against   the   global   window,   Angular   
expressions   are   evaluated   against   the   Scope   object.   Basically   what   this   means   is   if  you   
try   to   evaluate   “alert(1)”   it  will   fail   because   the   scope   does   not   have   an   “alert”   function   
(unless   you   define   one).   The   scope   is   just   an   object   and   you   can   define   variables   and   
functions   in   it  as   shown   below:  
$scope.username  =  "Ghostlulz";  
$scope.greetings  =  function()  {  
                 return  'Welcome  '  +  $scope.username  +  '!';  
             };  
Client  Side  Template  Injection  (XSS)  
According   to   Google   “Client-side   template   injection   vulnerabilities   arise   when   
applications   using   a   client-side   template   framework   dynamically   embed   user   input   in   
web   pages”.   As   you   know   Angular   is   a   client   side   template   framework   and   you   can   
embed   user   input   into   these   templates.   This   makes   Angular   the   perfect   target   for   this   
type   of   vulnerability.  
If   you   don’t   know   better   and   you’r   testing   for   XSS   on   an   Angular   site   you   might   try   
something   like   this:  
Ass   you   can   see   I   didn’t   get   an   alert   box   and   that's   because   the   server   is   encoding   our   
input   before   passing   it  to   the   template   as   shown   below.  
This   is   a   very   popular   method   of   preventing   XSS   and   is   sufficient   enough   for   most   
applications   but   Angular   is   different.   In   Angular   we   can   use   expressions   which   does   not   
have   to   use   special   characters   which   get   encoded   by   the   “htmlspecialchars”   PHP   
function   as   shown   below:  
As   you   can   see   above   I   am   using   the   expression   “{{1+1}}”   which   gets   evaluated   to   “2”.   
This   is   a   very   strong   indicator   that   the   application   is   vulnerable   to   client   side   template   
injection.  
Forcing   an   application   to   add   two   numbers   together   isn’t   all   that   exciting,   but   what   if  we   
could   inject   javascript   code.   We   know   we   can't   simply   insert   an   “alert(1)”   function   
because   that   function   is   not   defined   in   the   scope   object.   Behind   the   scenes   “alert(1)”   
turns   into   “$scope.alert(1)”.   By   default   the   scope   object   contains   another   object   called   
“constructor”   which   contains   a   function   also   called   “constructor“.   This   function   can   be   
used   to   dynamically   generate   and   execute   code.   This   is   exactly   what   we   need   to   
execute   our   XSS   payload   as   shown   below:  
●
{{constructor.constructor('alert(1)')()}}  
As   you   can   see   above   our   malicious   Angular   expression   was   injected   into   the   page   
causing   the   application   to   dynamically   generate   and   execute   our   payload.  
To   help   prevent   this   type   of   attack   Angular   1.2   –   1.5   contains   a   sandbox.   This   was   later   
removed   in   version   1.6   and   above   as   it  provided   no   real   security   as   there   were   
numerous   sandbox   bypasses.   If   the   application   your   testing   is   between   versions   1.2   –   
1.5   you   will   need   to   look   up   the   sandbox   bypass   for   that   version   to   get   your   XSS   
payload   to   execute.  
Summary  
With  new   technologies   comes   new   vulnerabilities.   Any   client   side   template   framework   
that   accepts   user   input   can   be   vulnerable   to   client   side   template   injection.   This   
vulnerability   is   mostly   used   to   trigger   XSS   payloads.   Since   angular   uses   expressions   we   
can   often   bypass   traditional   XSS   preventions   such   as   encoding   the   user's   input.   Most   
developers   rely   heavily   on   this   prevention   method   which   works   fine   in   most   applications   
just   not   ones   that   make   use   of   client   side   templates   and   expressions.  
XML  External  Entity  (XXE)  
Introduction  
XML   External   Entity(XXE)   is   a   vulnerability   that   can   appear   when   an   application   parses   
XML.   Before   diving   into   what   XXE   is   you   need   to   have   a   solid   understanding   of   XML   
first.  
XXE  Basics  
Extensible   Markup   Language(XML)   is   a   language   designed   to   store   and   transport   data   
similar   to   JSON.   A   sample   of   what   XML   looks   like   can   be   found   below:  
Everyday  Italian  
  Giada  De  Laurentiis  
  2005  
  30.00   
Harry  Potter   
J  K.  Rowling   
2005   
29.99   
On   the   first   line   you   can   see   the   prolog   which   contains   the   XML   version   and   encoding.   
Pro   tip   if  you   ever   see   this   in   burp   you   should   immediately   test   for   XXE:  
●
Under   that   you   see   the   “”   tag   which   represents   the   root   node.   There   are   
two   child   nodes   called   “”   and   each   of   these   contain   subchild   nodes   called   
“,,,”.  
.....  
That's   the   basic   structure   of   XML   but   there   is   a   little   more   you   should   know.   There   is  
something   called   document   type   definition   (DTD)   which   defines   the   structure   and   the   
legal   elements   and   attributes   of   an   XML   document   as   shown   below:  
  ]>  
&user;  
As   shown   above   there   is   something   called   an   ENTITY.   This   acts   as   a   variable.   In   this   
example   the   entity   “user”   holds   the   text   “Ghostlulz”.   This   entity   can   be   called   by   typing   
“&user;”   and   it  will   be   replaced   by   the   text   “Ghostlulz”.  
You   can   also   use   something   called   an   external   entity   which   will   load   its  data   from  an   
external   source.   This   can   be   used   to   get   contents   from  a   url   or   a   file   on   disk   as   shown   
below:  
  ]>  
  ]>  
XML  External  Entity(XXE)  Attack  
I   mentioned   that   you   can   use   external   entities   to   grab   data   from  a   file   on   disk   and   store   
it  in   a   variable.   What   if  we   tried   to   read   data   from  the   “/etc/passwd”   file   and   store   it  in   a   
variable?   Note   that   in   order   to   read   the   data   the   entity   must   be   returned   in   the   response.   
Knowing   that   lets   try   to   exploit   our   test   environment.  
While   in   burp   I   captured   the   following   POST   request   which   seems   to   be   using   XML   to   
send   data   to   the   back   end   system.   Whenever   you   see   XML   you   should   test   for   XXE.  
To   test   for   XXE   simply   put   in   your   malicious   external   entity   and   replace   each   node   value   
with   it  as   shown   below:  
As   shown   above   I   created   an   external   entity   to   grab   the   data   in   the   /etc/passwd   file   and   
stored   it  in   the   entity   xxe.   I   then   placed   the   variable   in   the      node.   If   the   
server   does   not   block   external   entities   the   response   will   be   reflected   to   you.   
You   will   then   be   able   to   retrieve   the   contents   of   the   /etc/passwd   file   as   shown   above.  
Summary  
Most   applications   transmit   data   using   JSON   but   you   may   run   into   applications   using   
XML.   When   you   do   make   sure   to   always   test   for   XXE.   Abusing   this   vulnerability   allows   
you   to   read   arbitrary   files   which   can   lead   to   fully   compromising   a   machine.  
CSP  Bypass  
Introduction  
The   content   security   policy   (CSP)   is   a   special   HTTP   header   used   to   mitigate   certain   
types   of   attacks   such   as   cross   site   scripting   (XSS).   Some   engineers   think   the   CSP   is   a   
magic   bullet   against   vulnerabilities   like   XSS   but   if  set   up   improperly   you   could   introduce   
misconfigurations   which   could   allow   attackers   to   completely   bypass   the   CSP.  
Content  Security  Policy  (CSP)  Basics  
The   CSP   header   is   fairly   straightforward   and   there   are   only   a   few   things   you   need   to   
understand.   First,   the   CSP   header   value   is   made   up   of   directives   separated   with   a   
semicolon   “;”   .   You   can   think   of   these   directives   as   policies   which   are   applied   to   your   
site.   A   list   of   these   directives   can   be   found   below,   note   these   are   not   all   of   them   but   the   
most   popular   ones:  
●
Default-src  
○
This   acts   as   a   catchall   for   everything   else.  
●
Script-src  
○
Describes   where   we   can   load   javascript   files   from   
●
Style-src  
○
Describes   where   we   can   load   stylesheets   from  
●
Img-src  
○
Describes   where   we   can   load   images   from  
●
Connect-src  
○
Applies   to   AJAX   and   Websockets  
●
Font-src  
○
Describes   where   we   can   load   fonts   from  
●
Object-src  
○
Describes   where   we   can   load   objects   from  ()   
●
Media-src  
○
Describes   where   we   can   load   audio   and   video   files   from   
●
frame-ancestors 
○
Describes   which   sites   can   load   this   site   in   an   iframe  
These   directives   are   set   to   specific   values   which   defines   which   resources   can   be   loaded  
and   from  where.   This   source   list   can   be   found   below:  
●
*  
○
Load   resources   from  anywhere  
●
‘none’  
○
Block   everything   
●
‘Self’  
○
Can   only   load   resources   from  same   origin   
●
Data:  
○
Can   only   load   resources   from  data   schema   (Base64)  
●
Something.example.com  
○
Can   only   load   resources   from  specified   domain  
●