# SaltStack远程执行代码多个高危漏洞分析（CVE-2021-25281/25282/25283）

## 译文声明
本文为翻译文章，具体内容和含义请以原文为准。

## 背景
北京时间2021年2月26日凌晨3点，SaltStack官方发布了关于CVE-2021-25281、CVE-2021-25282和CVE-2021-25283三个高危漏洞的风险通告。此前，云鼎实验室的安全研究员1mperio在2020年11月16日发现了这些漏洞，并已向SaltStack官方报告。

## 引言
SaltStack是VMware的子公司，其产品广泛用于运维管理，能够支持数万台服务器。主要功能包括配置文件管理和远程命令执行，因其易用性和强大功能，在GitHub上获得了11.4k星标。SaltStack使用Python开发，采用C/S架构，其中Server被称为Master，Client被称为Minion。一个Master可以向多个Minion下发配置文件并远程执行命令。SaltStack的主要组件包括salt、salt-master、salt-minion和salt-api等程序。salt-master监听4505和4506端口，分别用于发布消息和接收监控数据。salt-api可以使用CherryPy或Tornado对外提供REST接口，默认使用CherryPy。

本文将重点讨论salt-master和salt-api中的漏洞。

## CVE-2021-25281：未授权访问

### 漏洞概述
通过分析CVE-2020-25592的补丁（https://gitlab.com/saltstack/open/salt-patches/-/blob/master/patches/2020/09/25/3002.patch），发现该补丁通过调用认证模块对SSH方法进行权限认证。然而，`salt/salt/netapi/init.py:NetapiClient.run()` 方法通过 `getattr` 动态调用 `NetapiClient` 类中的方法，并将 `args` 和 `kwargs` 作为参数传入。其中，`wheel_async` 方法存在未授权调用问题，其他方法（除SSH外）均生成一个job到ZeroMQ，随后进行消费者认证，而 `wheel_async` 则异步调用 `wheel` 包中的方法。

### 调用链
```
salt/salt/netapi/init.py:NetapiClient.run() ⇒
salt/salt/netapi/init.py:NetapiClient.wheel_async() ⇒
salt/salt/wheel/init.py:WheelClient.cmd_async() ⇒
salt/salt/client/mixins.py:AsyncClientMixin.asynchronous()
```

### 目标函数
目标函数为 `self._proc_function`，`low` 参数为POST可控参数，`fun` 参数的值在 `salt/salt/wheel/init.py:WheelClient.cmd_async()` 方法中通过 `low` 参数的 `fun` 键获取。`_proc_function` 函数调用 `salt/salt/client/mixins.py:SyncClientMixin.low()`，并通过该函数使用 `args` 和 `kwargs` 参数动态调用 `wheel` 包中的方法。

可调用的方法包括：
- `config.apply`
- `config.update_config`
- `config.values`
- `error.error`
- `file_roots.find`
- `file_roots.list_env`
- `file_roots.list_roots`
- `file_roots.read`
- `file_roots.write`
- `key.accept`
- `key.accept_dict`
- `key.delete`
- `key.delete_dict`
- `key.finger`
- `key.finger_master`
- `key.gen`
- `key.gen_accept`
- `key.gen_keys`
- `key.gen_signature`
- `key.get_key`
- `key.print`
- `key.list`
- `key.list_all`
- `key.master_key_str`
- `key.name_match`
- `key.reject`
- `key.reject_dict`
- `minions.connected`
- `pillar_roots.find`
- `pillar_roots.list_env`
- `pillar_roots.list_roots`
- `pillar_roots.read`
- `pillar_roots.write`

## CVE-2021-25282：有限制任意文件写漏洞

### 漏洞概述
`salt/salt/wheel/pillar_roots.py:write()` 方法存在任意文件写入漏洞，但需要 `__opts__["pillar_roots"]` 中的路径存在。由于是异步调用，返回的是jid和tag，通过jid和tag查询任务执行结果时需要认证。

### 漏洞位置
- `salt/salt/wheel/pillar_roots.py:write()`

## CVE-2021-25283：模板注入漏洞

### 漏洞概述
通过 `--log-level=debug` 参数开启调试模式，定位到master自动加载的逻辑。从代码中可以看出，每个 `self.loop_interval` 将循环一次，`loop_interval` 在配置文件中可配置，默认为60秒。通过调试发现在 `salt.daemons.masterapi.clean_old_jobs` 中读取minion配置文件。

### 调用栈
```
salt/salt/daemons/masterapi.py:clean_old_jobs() ⇒
salt/salt/minion.py:MasterMinion.init() ⇒
salt/salt/config/init.py:minion_config()
```

### 自动加载逻辑
在 `salt/salt/minion.py:MasterMinion.init()` 中，自动加载只加载与grains相关的参数。grains是SaltStack收集各个minion系统信息的功能。在加载配置文件时，调用了 `apply_sdb()` 方法，该方法解析配置中以 `sdb://` 开头的字符串。

### 解析过程
- `salt/salt/config/init.py:apply_sdb()`
- `salt/salt/utils/sdb.py:sdb_get()`

在 `sdb_get()` 函数中，`sdb://aaaa/bbbb` 字符串将查找配置文件中的 `aaaa` 配置项，并读取其中的 `driver` 字段赋值给 `fun` 变量，`bbbb` 赋值给 `query` 参数。最后通过 `LazyLoader` 加载 `fun` 变量对应的方法并调用。

### 最终定位
最终定位到 `salt/salt/sdb/rest.py` 文件中的 `query()` 方法。`key` 为上述字符串中的 `bbbb` 值，且接收形如 `bbbb?ccc=ddd` 的参数，并通过 `**key_vars` 传递到 `compile_template` 方法中。这里的渲染使用Jinja模板引擎，如果模板可控且不存在过滤，可以执行任意代码。`compile_template` 函数详情如下：

- `salt/salt/template.py:compile_template()`
- `salt/salt/utils/templates.py:JINJA()`
- `salt/salt/utils/templates.py:wrap_tmpl_func()`
- `salt/salt/utils/templates.py:render_jinja_tmpl()`

最终调用到 `render_jinja_tmpl` 中的 `template.render()` 方法，在此处渲染模板，未对传入参数进行过滤，可以进行模板注入。

### 自动加载逻辑
虽然自动加载逻辑中未加载master的配置文件，但某个方法调用了 `master_config` 方法，`master_config` 和 `minion_config` 一样都调用了 `apply_sdb()` 方法，从而实现未授权RCE。

## 修复建议
1. 尽快更新官方补丁。
2. 如果未使用 `wheel_async` 模块，可以在 `salt/netapi/init.py` 中将其入口删除。

通过以上分析，我们详细了解了这三个高危漏洞的具体情况及修复建议。希望用户能及时采取措施，确保系统的安全性。