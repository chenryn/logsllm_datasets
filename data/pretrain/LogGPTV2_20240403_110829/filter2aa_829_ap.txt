_PAGING_IO prevents callback invocation on read or write I/O operations that 
are not cached or paging operations.
Defining Pre-operation Callbacks
The next two members of the FLT_OPERATION_REGISTRATION structure  
define the pre-operation or post-operation callbacks to be invoked when 
each of the target major functions occurs on the system. Pre-operation 
Evading EDR (Early Access) © 2023 by Matt Hand
Filesystem Minifilter Drivers   111
callbacks are passed via a pointer to an FLT_PRE_OPERATION_CALLBACK struc-
ture, and post-operation routines are specified as a pointer to an FLT_POST_
OPERATION_CALLBACK structure. While these functions’ definitions aren’t too 
dissimilar, their capabilities and limitations vary substantially.
As with callbacks in other types of drivers, pre-operation callback 
functions allow the developer to inspect an operation on its way to its des-
tination (the target filesystem, in the case of a minifilter). These callback 
functions receive a pointer to the callback data for the operation and some 
opaque pointers for the objects related to the current I/O request, and they 
return an FLT_PREOP_CALLBACK_STATUS return code. In code, this would look 
like what is shown in Listing 6-4.
PFLT_PRE_OPERATION_CALLBACK PfltPreOperationCallback;
FLT_PREOP_CALLBACK_STATUS PfltPreOperationCallback(
 [in, out] PFLT_CALLBACK_DATA Data,
 [in] PCFLT_RELATED_OBJECTS FltObjects,
 [out] PVOID *CompletionContext
)
{...}
Listing 6-4: Registering a pre-operation callback
The first parameter, Data, is the most complex of the three and contains 
all the major information related to the request that the minifilter is pro-
cessing. The FLT_CALLBACK_DATA structure is used by both the filter manager 
and the minifilter to process I/O operations and contains a ton of useful 
data for any EDR agent monitoring filesystem operations. Some of the 
important members of this structure include:
Flags  A bitmask that describes the I/O operation. These flags may 
come preset from the filter manager, though the minifilter may set 
additional flags in some circumstances. When the filter manager initial-
izes the data structure, it sets a flag to indicate what type of I/O opera-
tion it represents: either fast I/O, filter, or IRP operations. The filter 
manager may also set flags indicating whether a minifilter generated or 
reissued the operation, whether it came from the non-paged pool, and 
whether the operation completed.
Thread  A pointer to the thread that initiated the I/O request. This is 
useful for identifying the application performing the operation.
Iopb  The I/O parameter block that contains information about IRP-
based operations (for example, IRP_BUFFERED_IO, which indicates that it is 
a buffered I/O operation); the major function code; special flags related 
to the operation (for example, SL_CASE_SENSITIVE, which informs drivers in 
the stack that filename comparisons should be case sensitive); a pointer 
to the file object that is the target of the operation; and an FLT_PARAMETERS 
structure containing the parameters unique to the specific I/O operation 
specified by the major or minor function code member of the structure.
Evading EDR (Early Access) © 2023 by Matt Hand
112   Chapter 6
IoStatus  A structure that contains the completion status of the I/O 
operation set by the filter manager.
TagData  A pointer to an FLT_TAG_DATA_BUFFER structure containing infor-
mation about reparse points, such as in the case of NTFS hard links or 
junctions.
RequestorMode  A value indicating whether the request came from user 
mode or kernel mode.
This structure contains much of the information that an EDR agent 
needs to track file operations on the system. The second parameter passed 
to the pre-operation callback, a pointer to an FLT_RELATED_OBJECTS struc-
ture, provides supplemental information. This structure contains opaque 
pointers to the object associated with the operation, including the vol-
ume, minifilter instance, and file object (if present). The last parameter, 
CompletionContext, contains an optional context pointer that will be passed 
to the correlated post-operation callback if the minifilter returns FLT_PREOP 
_SUCCESS_WITH_CALLBACK or FLT_PREOP_SYNCHRONIZE.
On completion of the routine, the minifilter must return an FLT_PREOP 
_CALLBACK_STATUS value. Pre-operation callbacks may return one of seven sup-
ported values:
FLT_PREOP_SUCCESS_WITH_CALLBACK (0)
Return the I/O operation to the filter manager for processing and 
instruct it to call the minifilter’s post-operation callback during 
completion.
FLT_PREOP_SUCCESS_NO_CALLBACK (1)
Return the I/O operation to the filter manager for processing and 
instruct it not to call the minifilter’s post-operation callback during 
completion.
FLT_PREOP_PENDING (2)
Pend the I/O operation and do not process it further until the minifilter 
calls fltmgr!FltCompletePendedPreOperation().
FLT_PREOP_DISALLOW_FASTIO (3)
Block the fast I/O path in the operation. This code instructs the filter 
manager not to pass the operation to any other minifilters below the 
current one in the stack and to only call the post-operation callbacks of 
those drivers at higher altitudes.
FLT_PREOP_COMPLETE (4)
Instruct the filter manager not to send the request to minifilters below 
the current driver in the stack and to only call the post-operation call-
backs of those minifilters above it in the driver stack.
Evading EDR (Early Access) © 2023 by Matt Hand
Filesystem Minifilter Drivers   113
FLT_PREOP_SYNCHRONIZE (5)
Pass the request back to the filter manager but don’t complete it. This 
code ensures that the minifilter’s post-operation callback is called at 
IRQL ≤ APC_LEVEL in the context of the original thread.
FLT_PREOP_DISALLOW_FSFILTER_IO (6)
Disallow a fast QueryOpen operation and force the operation down the 
slower path, causing the I/O manager to process the request using an 
open, query, or close operation on the file.
The filter manager invokes the pre-operation callbacks for all minifilters 
that have registered functions for the I/O operation being processed before 
passing their requests to the filesystem, beginning with the highest altitude.
Defining Post-operation Callbacks
After the filesystem performs the operations defined in every minifilter’s 
pre-operation callbacks, control is passed up the filter stack to the filter 
manager. The filter manager then invokes the post-operation callbacks 
of all minifilters for the request type, beginning with the lowest altitude. 
These post-operation callbacks have a similar definition to the pre-operation 
routines, as shown in Listing 6-5.
PFLT_POST_OPERATION_CALLBACK PfltPostOperationCallback;
FLT_POSTOP_CALLBACK_STATUS PfltPostOperationCallback(
 [in, out] PFLT_CALLBACK_DATA Data,
 [in]  PCFLT_RELATED_OBJECTS FltObjects,
 [in, optional] PVOID CompletionContext,
 [in]  FLT_POST_OPERATION_FLAGS Flags
)
{...}
Listing 6-5: Post-operation callback routine definitions
Two notable differences here are the addition of the Flags parameter 
and the different return type. The only documented flag that a minifilter 
can pass is FLTFL_POST_OPERATION_DRAINING, which indicates that the minifilter 
is in the process of unloading. Additionally, post-operation callbacks can 
return different statuses. If the callback returns FLT_POSTOP_FINISHED _PROCESSING 
(0), the minifilter has completed its post-operation callback routine and is 
passing control back to the filter manager to continue processing the I/O 
request. If it returns FLT_POSTOP_MORE_PROCESSING_REQUIRED (1), the minifilter has 
posted the IRP-based I/O operation to a work queue and halted completion 
of the request until the work item completes, and it calls fltmgr!FltCompletePe
ndedPostOperation(). Lastly, if it returns FLT_POSTOP _DISALLOW_FSFILTER_IO (2), the 
minifilter is disallowing a fast QueryOpen operation and forcing the operation 
down the slower path. This is the same as FLT_PREOP_DISALLOW_FSFILTER_IO.
Post-operation callbacks have some notable limitations that reduce 
their viability for security monitoring. The first is that they’re invoked in 
Evading EDR (Early Access) © 2023 by Matt Hand
114   Chapter 6
an arbitrary thread unless the pre-operation callback passes the FLT_PREOP_
SYNCHRONIZE flag, preventing the system from attributing the operation to  
the requesting application. Next is that post-operation callbacks are invoked 
at IRQL ≤ DISPATCH_LEVEL. This means that certain operations are 
restricted, including accessing most synchronization primitives (for example, 
mutexes), calling kernel APIs that require an IRQL ≤ DISPATCH_LEVEL, 
and accessing paged memory. One workaround to these limitations involves 
delaying the execution of the post-operation callback via the use of fltmgr!Fl
tDoCompletionProcessingWhenSafe(), but this solution has its own challenges.
The array of these FLT_OPERATION_REGISTRATION structures passed in the 
OperationRegistration member of FLT_REGISTRATION may look like Listing 6-6.
const FLT_OPERATION_REGISTRATION Callbacks[] = {
 {IRP_MJ_CREATE, 0, MyPreCreate, MyPostCreate},
 {IRP_MJ_READ, 0, MyPreRead, NULL},
 {IRP_MJ_WRITE, 0, MyPreWrite, NULL},
 {IRP_MJ_OPERATION_END}
};
Listing 6-6: An array of operation registration callback structures
This array registers pre- and post-operation callbacks for IRP_MJ_CREATE 
and only pre-operation callbacks for IRP_MJ_READ and IRP_MJ_WRITE. No flags 
are passed in for any of the target operations. Also note that the final ele-
ment in the array is IRP_MJ_OPERATION_END. Microsoft requires this value to be 
present at the end of the array, and it serves no functional purpose in the 
context of monitoring.
Defining Optional Callbacks
The last section in the FLT_REGISTRATION structure contains the optional call-
backs. The first three callbacks, FilterUnloadCallback, InstanceSetupCallback, 
and InstanceQueryTeardownCallback, may all technically be null, but this will 
impose some restrictions on the minifilter and system behavior. For example, 
the system won’t be able to unload the minifilter or attach to new filesystem 
volumes. The rest of the callbacks in this section of the structure relate to 
various functionality provided by the minifilter. These include things such as 
the interception of filename requests (GenerateFileNameCallback) and filename 
normalization (NormalizeNameComponentCallback). In general, only the first three 
semi-optional callbacks are registered, and the rest are rarely used.
Activating the minifilter
After all callback routines have been set, a pointer to the created  
FLT_REGISTRATION structure is passed as the second parameter to fltmgr!
FltRegisterFilter(). Upon completion of this function, an opaque filter 
pointer (PFLT_FILTER) is returned to the caller in the RetFilter parameter. 
This pointer uniquely identifies the minifilter and remains static as long as 
the driver is loaded on the system. This pointer is typically preserved as a 
global variable.
Evading EDR (Early Access) © 2023 by Matt Hand
Filesystem Minifilter Drivers   115
When the minifilter is ready to start processing events, it passes the 
PFLT_FILTER pointer to fltmgr!FltStartFilter(). This notifies the filter man-
ager that the driver is ready to attach to filesystem volumes and start 
filtering I/O requests. After this function returns, the minifilter will be 
considered active and sit inline of all relevant filesystem operations. The 
callbacks registered in the FLT_REGISTRATION structure will be invoked for 
their associated major functions. Whenever the minifilter is ready to unload 
itself, it passes the PFLT_FILTER pointer to fltmgr!FltUnregisterFilter() to 
remove any contexts that the minifilter has set on files, volumes, and other 
components and calls the registered InstanceTeardownStartCallback and 
InstanceTeardownCompleteCallback functions.
Managing a Minifilter
Compared to working with other drivers, the process of installing, load-
ing, and unloading a minifilter requires special consideration. This is 
because minifilters have specific requirements related to the setting of 
registry values. To make the installation process easier, Microsoft recom-
mends installing minifilters through a setup information (INF) file. The 
format of these INF files is beyond the scope of this book, but there are 
some interesting details relevant to how minifilters work that are worth 
mentioning.
The ClassGuid entry in the Version section of the INF file is a GUID that 
corresponds to the desired load-order group (for example, FSFilter Activity 
Monitor). In the AddRegistry section of the file, which specifies the registry 
keys to be created, you’ll find information about the minifilter’s altitude. 
This section may include multiple similar entries to describe where the sys-
tem should load various instances of the minifilter. The altitude can be set 
to the name of a variable (for example, %MyAltitude%) defined in the Strings 
section of the INF file. Lastly, the ServiceType entry under the ServiceInstall 
section is always set to SERVICE_FILE_SYSTEM_DRIVER (2).
Executing the INF installs the driver, copying files to their specified 
locations and setting up the required registry keys. Listing 6-7 shows an 
example of what this looks like in the registry keys for WdFilter, Microsoft 
Defender’s minifilter driver.
PS > Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\WdFilter\" | Select * 
-Exclude PS* | fl
DependOnService : {FltMgr}
Description : @%ProgramFiles%\Windows Defender\MpAsDesc.dll,-340
DisplayName : @%ProgramFiles%\Windows Defender\MpAsDesc.dll,-330
ErrorControl : 1
Group  : FSFilter Anti-Virus
ImagePath  : system32\drivers\wd\WdFilter.sys
Start  : 0
SupportedFeatures : 7
Type  : 2
Evading EDR (Early Access) © 2023 by Matt Hand
116   Chapter 6
PS > Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\WdFilter\Instances\
WdFilter  Instance" | Select * -Exclude PS* | fl
Altitude : 328010
Flags : 0
Listing 6-7: Viewing WdFilter’s altitude with PowerShell
The Start key dictates when the minifilter will be loaded. The service 
can be started and stopped using the Service Control Manager APIs, as 
well as through a client such as sc.exe or the Services snap-in. In addition, 
we can manage minifilters with the filter manager library, FltLib, which 
is leveraged by the fltmc.exe utility included by default on Windows. This 
setup also includes setting the altitude of the minifilter, which for WdFilter 
is 328010.
Detecting Adversary Tradecraft with Minifilters
Now that you understand the inner workings of minifilters, let’s explore 
how they contribute to the detection of attacks on a system. As discussed 
in “Writing a Minifilter” on page XX, a minifilter can register pre- or post-
operation callbacks for activities that target any filesystem, including NTFS, 
named pipes, and mailslots. This provides an EDR with an extremely pow-
erful sensor for detecting adversary activity on the host.
File Detections
If an adversary interacts with the filesystem, such as by creating new files or 
modifying the contents of existing files, the minifilter has an opportunity 
to detect the behavior. Modern attacks have tended to avoid dropping arti-
facts directly onto the host filesystem in this way, embracing the “disk is 
lava” mentality, but many hacking tools continue to interact with files  
due to limitations of the APIs being leveraged. For example, consider  
dbghelp!MiniDumpWriteDump(), a function used to create process memory 
dumps. This API requires that the caller pass in a handle to a file for the 
dump to be written to. The attacker must work with files if they want to use 
this API, so any minifilter that processes IRP_MJ_CREATE or IRP_MJ_WRITE I/O 
operations can indirectly detect those memory-dumping operations.
Additionally, the attacker has no control over the format of the data 
being written to the file, allowing a minifilter to coordinate with a scanner 
to detect a memory-dump file without using function hooking. An attacker 
might try to work around this by opening a handle to an existing file and 
overwriting its content with the dump of the target process’s memory, but 
a minifilter monitoring IRP_MJ_CREATE could still detect this activity, as both 
the creation of a new file and the opening of a handle to an existing file 
would trigger it.
Some defenders use these concepts to implement filesystem canaries. 
These are files created in key locations that users should seldom, if ever, 
interact with. If an application other than a backup agent or the EDR 
Evading EDR (Early Access) © 2023 by Matt Hand
Filesystem Minifilter Drivers   117
requests a handle to a canary file, the minifilter can take immediate 
action, including crashing the system. Filesystem canaries provide strong 
(though, at times, brutal) anti-ransomware control, as ransomware tends 
to indiscriminately encrypt files on the host. By placing a canary file in a 
directory nested deep in the filesystem, hidden from the user but still in 
one of the paths typically targeted by ransomware, an EDR can limit the 
damage to the files that the ransomware encountered before reaching the 
canary.
Named Pipe Detections
Another key piece of adversary tradecraft that minifilters can detect highly 
effectively is the use of named pipes. Many command-and-control agents, 
like Cobalt Strike’s Beacon, make use of named pipes for tasking, I/O, and 
linking. Other offensive techniques, such as those that use token imper-
sonation for privilege escalation, revolve around the creation of a named 
pipe. In both cases, a minifilter monitoring IRP_MJ_CREATE_NAMED_PIPE requests 
would be able to detect the attacker’s behavior, in much the same way as 
those that detect file creation via IRP_MJ_CREATE.
Minifilters commonly look for the creation of anomalously named pipes, 
or those originating from atypical processes. This is useful because many 
tools used by adversaries rely on the use of named pipes, so an attacker who 
wants to blend in should pick pipe and host process names that are typical 
in the environment. Thankfully for attackers and defenders alike, Windows 
makes enumerating existing named pipes easy, and we can straightforwardly 
identify many of the common process-to-pipe relationships. One of the most 
well-known named pipes in the realm of security is mojo. When a Chromium 
process spawns, it creates several named pipes with the format mojo.PID.TID 
.VALUE for use by an IPC abstraction library called Mojo. This named pipe 
became popular after its inclusion in a well-known repository for document-
ing Cobalt Strike’s Malleable profile options.
There are a few problems with using this specific named pipe that a 
minifilter can detect. The main one is related to the structured format-
ting used for the name of the pipe. Because Cobalt Strike’s pipe name is a 
static attribute tied to the instance of the Malleable profile, it is immutable 
at runtime. This means that an adversary would need to accurately predict 
the process and thread IDs of their Beacon to ensure the attributes of their 
process match those of the pipe name format used by mojo. Remember that 
minifilters with pre-operation callbacks for monitoring IRP_MJ_CREATE_NAMED 
_PIPE requests are guaranteed to be invoked in the context of the calling 
thread. This means that when a Beacon process creates the mojo named 
pipe, the minifilter can check that its current context matches the informa-
tion in the pipe name. Pseudocode to demonstrate this would look like that 
shown in Listing 6-8.
DetectMojoMismatch(string mojoPipeName)
{
 pid = GetCurrentProcessId();
 tid = GetCurrentThreadId();
Evading EDR (Early Access) © 2023 by Matt Hand
118   Chapter 6
1 if (!mojoPipeName.beginsWith("mojo. " + pid + "." + tid + "."))
 {
 // Bad Mojo pipe found
 }
}
Listing 6-8: Detecting anomalous Mojo named pipes
Since the format used in Mojo named pipes is known, we can simply 
concatenate the PID and TID 1 of the thread creating the named pipe and 
ensure that it matches what is expected. If not, we can take some defensive 
action.
Not every command inside Beacon will create a named pipe. There are 
certain functions that will create an anonymous pipe (as in, a pipe without 
a name), such as execute-assembly. These types of pipes have limited opera-
tional viability, as their name can’t be referenced and code can interact 
with them through an open handle only. What they lose in functionality, 
however, they gain in evasiveness.
Riccardo Ancarani’s blog post “Detecting Cobalt Strike Default 
Modules via Named Pipe Analysis,” details the OPSEC considerations 
related to Beacon’s usage of anonymous pipes. In his research, he found 
that while Windows components rarely used anonymous pipes, their cre-
ation could be profiled, and their creators could be used as viable spawnto 
binaries. These included ngen.exe, wsmprovhost.exe, and firefox.exe, among oth-
ers. By setting their sacrificial processes to one of these executables, attack-
ers could ensure that any actions resulting in the creation of anonymous 
pipes would likely remain undetected.
Bear in mind, however, that activities making use of named pipes would 
still be vulnerable to detection, so operators would need to restrict their 