6 (X, H, α) ←← Mux SD (M, sc, var Mu)
7 (C, γ) ←← Write SD (X, H, α, var Wr )
8 T ← T (cid:107) C; Ssc ← Ssc (cid:107) M
9 return (C, γ)
Sends (M , s, Mu, Wr ) // M , s ∈ {0, 1}∗∗
10 for i ← 1 to |s| do
(X, H, α) ←← Mux SD [S,0](M i, si, var Mu)
(C i,∗) ←← Write SD [S,0](X, H, α, var Wr )
12
13 return C
Recvs (C(cid:48), Re, De)
14 for i ← 1 to |C(cid:48)| do
11
15
16
(Y (cid:48)
(M(cid:48)
i, H, α) ←← Read SD [R,1](C(cid:48)
i, s(cid:48)
i,∗) ←← Demux SD [R,1](Y (cid:48)
i, var Re)
i, H, α, var De)
17 return (Y (cid:48), M(cid:48), s(cid:48))
SD [O, p](I)
18 O ←← O(I, var Env p); return O
Recv(C)
10 (Y, H, α) ←← Read SD (C, var Re)
11 (M, sc, γ) ←← Demux SD (Y, H, α, var De)
12 if sync and Y (cid:22) T then T ← T % Y
13 else sync ← 0
14 if M (cid:54)= ⊥ ∧ sc (cid:54)= ⊥ then
15
16
Rsc ← Rsc (cid:107) M
if Rsc (cid:54)(cid:22) Ssc then win 2 ← 1
if ¬sync then win 1 ← 1
17
18 return (M, sc, γ)
SD(I)
19 O ←← A2(I, var Env ); return O
Figure 13: top: procedures for deﬁning correctness of FSC (CH,S,R). Bottom: a game for proving Theorem 5.
Deﬁnition 1. Refer to procedures Gets and Corr deﬁned in Figure 13. We say that FSC (CH,S,R) is
correct if for every C(cid:48), M , s ∈ {0, 1}∗∗ such that |M| = |s| and sc ∈ {0, 1}∗, it holds that
Pr(cid:2)(C,Y (cid:48), M(cid:48), s(cid:48)) ←← Corr (C(cid:48), M , s) :
cat(Y (cid:48)) (cid:22) cat(C) ⇒ Gets (M(cid:48), s(cid:48), sc) (cid:22) Gets (M , s, sc)(cid:3) = 1 .
We say that PSC CH has a correct realization if there exists a pair (S,R) such that the FSC (CH,S,R) is
♦
correct.
The deﬁnition says that each plaintext stream output by the receiver must be a preﬁx of the corresponding
stream input to the sender, as long as the ciphertext stream consumed by the receiver is a preﬁx of the
ciphertext stream produced by the sender. This naturally generalizes the correctness condition of FGMP for
single stream-based channels [20, Deﬁnition 3.1].
INT-CS ⇒ INT-PS for correct FSCs. We show that if the SD are handled by A in a manner that
yields a correct FSC, then the traditional relationship holds.
Theorem 5. For every A = (A1,A2), if (CH,A2,A2) is a correct FSC, then Advint-ps
CH (A).
Proof. Consider the game G deﬁned in Figure 13.
It combines the game logic of INT-CS and INT-PS
so that ﬂag win 1 has the semantics as the win ﬂag of the INT-CS game and win 2 has the semantics of
the win ﬂag in the INT-PS game. Then by deﬁnition, Advint-cs
Advint-ps
then it also sets win 1. A suﬃcient condition is that if at any point in the game, if Rsc (cid:54)(cid:22) Ssc for some sc, then
¬sync holds. Suppose that sync holds. Then satisfying Deﬁnition 1 implies that Rsc (cid:22) Ssc for every sc.
Corollary 1. For every A = (A1,A2), Advint-ps
(cid:3) and
(cid:3). To prove the claim, it suﬃces to show that if G(A) sets win 2,
CH (A) = Pr(cid:2) G(A) sets sets win 1
CH (A) = Pr(cid:2) G (A) sets sets win 2
CH (A) if and only if (CH,A2,A2) is correct.
CH (A) ≤ Advint-cs
CH (A) ≤ Advint-cs
30
Π,b (A)
Expstae
1 declare str E[ ], state D[ ]
2 π ←← Gen ( ) // Sets π.seqn = 0.
3 b(cid:48) ←← AEnc,Dec,GenD
4 return b(cid:48)
Enc(str H, M )
5 if b = 1 then C ← Enc (var π, H, M )
6 else
7
c ← cipherlen (|M|); C ←← {0, 1}c
π.seqn ← π.seqn + 1
8
9 E[π. seqn − 1, H, C] ← M
10 return C
Π,b (A)
Explhse
20 declare str E[ ], state D[ ]
21 π ←← Gen ( ) // Sets π.seqn = 0.
22 b(cid:48) ←← AEnc,Dec,GenD
23 return b(cid:48)
Enc(int (cid:96), str F ) // What if (cid:96)  1 and ask C ← Enc(H, M ). Next, ask M1 ← Dec(1, H, C[1])
followed by M2 ← Dec(1, H, C[2:]). If b = 0, then M1 = M2 = ⊥. Suppose that b = 1. If the scheme does
support fragmentation, then the correctness condition on the scheme [13, Deﬁnition 3.2] would imply that
M2 (cid:54)= ⊥. Therefore, for a scheme to be deemed secure in the StAE sense, it must not support fragmentation.
The Lhse notion. DLFK+ deﬁne a stronger notion that captures three additional goals. First and foremost,
this notion incorporates length hiding, which obscures the length of the message fragments. Second, the
content type is encoded by the fragment itself, and hence is kept private. Third, the syntax is extended so
that the sender may signal the end-of-stream to the receiver; security demands that, upon receipt of this
signal, the peer close the channel.
A content-hiding, stateful AE scheme is composed of eight algorithms. The ﬁrst four — Gen , GenD ,
Enc , and Dec — are much the same as before, except that (1) encryption takes as input an int (cid:96) that speciﬁes
the length of the padded fragment, and (2) the associated data is dropped from encryption and decryption.
The remaining algorithms are used to signal closure of the channel. Algorithm ﬁnal (str) (cid:55)→ bool tests if a
fragment encodes the end-of-stream, i.e., is the ﬁnal fragment, and algorithm ﬁnalize (str) (cid:55)→ str encodes
its input as the ﬁnal fragment. Algorithm closed (state) (cid:55)→ bool tests if the peer’s state indicates that the
channel has been closed, and close (var state) closes the channel.
We highlight the important diﬀerences between Lhse and StAE security. (Refer to Figure 14.) Line
14:24 deﬁnes two strings. The ﬁrst, R0, is the all-zero string of the speciﬁed length ((cid:96)), and R1 is the
ﬁnalized version of that string. If b = 1 (the “real” world), then the Enc encrypts the input F ; if b = 0 (the
“simulated” world), it encrypts one of R0 and R1, depending on whether the F is a ﬁnal fragment, i.e., if
ﬁnal (F ) = 1 holds. The simulated decryption oracle is deﬁned so that if it receives a ciphertext output by
the encryption oracle corresponding to a ﬁnal fragment, then it closes the stream (14:37). This mandates
that Dec call close on the state upon receipt of a ﬁnal fragment.
None of the three additional properties captured by Lhse are mandated by the TLS 1.3 speciﬁcation [32].
Since draft 09, the content type has been moved from the associated data to the scope of the plaintext being
encrypted. This might signal that the authors of the spec intend that the content type not be discernible
from the ciphertext stream, but since the record boundaries depend on the content type, this is not true of
every implementation (see the discussion in Section 5.1). (Though it is certainly true of DLFK+’s.) Next,
length hiding MAY be used to mitigate traﬃc analysis attacks, but this too is not mandatory. Finally,
the document does not mandate the end-of-stream semantics as deﬁned in the Lhse game; certainly the
application might make good use of such a functionality (as suggested by DLFK+, see [18, Section 7]),
but speciﬁcation is silent on the subject. Nevertheless, the end-of-stream semantics could be captured as a
permitted leakage parameter in our PRIV-SR notion (see Section 4.2).
Record layer security. Finally, DLFK+ deﬁne a game for modeling the security provided by the overall
record-layer protocol.
In addition to the content-hiding properties of Lhse, they allow the adversary to
re-initialize the channel at will, modeling the key changes that occur during the normal execution of the
protocol. For their implementation of the record layer, they are able to show that Lhse of the underlying
stateful AE scheme implies record layer security, losing only a hybrid term in the reduction [18, Theorem
4]. Roughly speaking, they show that permitting qi key changes is equivalent to executing the Lhse game qi
times. This follows easily from the observation that no state is carried over after re-initializing the channel.
Thus, the ability to re-initialize the channel does not really give the adversary more power, at least with
respect to the record layer.
32