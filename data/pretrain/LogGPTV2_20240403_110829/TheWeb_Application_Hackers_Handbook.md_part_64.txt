follow the same process described previously for investigating potential refl ected
XSS vulnerabilities. That is, determine what input needs to be submitted to
embed valid JavaScript within the surrounding HTML, and then attempt to
circumvent any fi lters that interfere with the processing of your attack payload.
TIP When probing for refl ected XSS, it is easy to identify which request
parameters are potentially vulnerable. You can test one parameter at a time
and review each response for any appearance of your input. With stored XSS,
however, this may be less straightforward. If you submit the same test string
as every parameter to every page, you may fi nd this string reappearing at
multiple locations within the application. It may not be clear from the context
precisely which parameter is responsible for the appearance. To avoid this
problem, you can submit a different test string as every parameter when prob-
ing for stored XSS fl aws. For example, you can concatenate your unique string
with the name of the fi eld it is being submitted to.
Some specifi c techniques are applicable when testing for stored XSS vulner-
abilities in particular types of functionality. The following sections examine
some of these in more detail.
Testing for XSS in Web Mail Applications
As we have discussed, web mail applications are inherently at risk of contain-
ing stored XSS vulnerabilities, because they include HTML content received
directly from third parties within application pages that are displayed to users.
To test this functionality, ideally you should obtain your own e-mail account
on the application, send various XSS exploits in e-mail messages to yourself,
and view each message within the application to determine whether any of the
exploits are successful.
To perform this task in a thorough manner, you need to send all kinds of
unusual HTML content within e-mails, as we described to test for bypasses in
input fi lters. If you restrict yourself to using a standard e-mail client, you will
likely fi nd that you have insuffi cient control over the raw message content, or
the client may itself sanitize or “clean up” your deliberately malformed syntax.
In this situation, it is generally preferable to use an alternative means of gen-
erating e-mails that gives you direct control over the contents of messages. One
method of doing this is using the UNIX sendmail command. You need to have
confi gured your computer with the details of the mail server it should use to
send outgoing mail. Then you can create your raw e-mail in a text editor and
send it using this command:
sendmail -t PI:EMAIL 
.
Testing for XSS in Uploaded Files
One common, but frequently overlooked, source of stored XSS vulnerabilities
arises where an application allows users to upload fi les that can be downloaded
and viewed by other users. This kind of functionality arises frequently in today’s
applications. In addition to traditional work fl ow functions designed for fi le
sharing, fi les can be sent as e-mail attachments to web mail users. Image fi les
can be attached to blog entries and can be used as custom profi le pictures or
shared via photo albums.
Various factors may affect whether an application is vulnerable to uploaded
fi le attacks:
n During fi le upload, the application may restrict the fi le extensions that
can be used.
n During fi le upload, the application may inspect the fi le’s contents to con-
fi rm that this complies with an expected format, such as JPEG.
n During fi le download, the application may return a Content-Type header
specifying the type of content that the application believes the fi le contains,
such as image/jpeg.
n During fi le download, the application may return a Content-Disposition
header that specifi es the browser should save the fi le to disk. Otherwise,
for relevant content types, the application processes and renders the fi le
within the user’s browser.
When examining this functionality, the fi rst thing you should do is try to
upload a simple HTML fi le containing a proof-of-concept script. If the fi le is
accepted, try to download the fi le in the usual way. If the original fi le is returned
unmodifi ed, and your script executes, the application is certainly vulnerable.
cc1122..iinndddd 448844 88//1199//22001111 1122::1122::3333 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 485
Chapter 12 n Attacking Users: Cross-Site Scripting 485
If the application blocks the uploaded fi le, try to use various fi le extensions,
including .txt and .jpg. If the application accepts a fi le containing HTML when
you use a different extension, it may still be vulnerable, depending on exactly
how the fi le is delivered during download. Web mail applications are often
vulnerable in this way. An attacker can send e-mails containing a seductive-
sounding image attachment that in fact compromises the session of any user
who views it.
Even if the application returns a Content-Type header specifying that the
downloaded fi le is an image, some browsers may still process its contents as
HTML if this is what the fi le actually contains. For example:
HTTP/1.1 200 OK
Content-Length: 25
Content-Type: image/jpeg
Older versions of Internet Explorer behaved in this way. If a user requested a
.jpg fi le directly (not via an embedded  tag), and the preceding response
was received, IE would actually process its contents as HTML. Although this
behavior has since been modifi ed, it is possible that other browsers may behave
this way in the future.
Hybrid File Attacks
Often, to defend against the attacks described so far, applications perform
some validation of the uploaded fi le’s contents to verify that it actually con-
tains data in the expected format, such as an image. These applications may
still be vulnerable, using “hybrid fi les” that combine two different formats
within the same fi le.
One example of a hybrid fi le is a GIFAR fi le, devised by Billy Rios. A GIFAR
fi le contains data in both GIF image format and JAR (Java archive) format and
is actually a valid instance of both formats. This is possible because the fi le
metadata relating to the GIF format is at the start of the fi le, and the metadata
relating to the JAR format is at the end of the fi le. Because of this, applications
that validate the contents of uploaded fi les, and that allow fi les containing GIF
data, accept GIFAR fi les as valid.
An uploaded fi le attack using a GIFAR fi le typically involves the following
steps:
n The attacker fi nds an application function in which GIF fi les that are
uploaded by one user can be downloaded by other users, such as a user’s
profi le picture in a social networking application.
n The attacker constructs a GIFAR fi le containing Java code that hijacks the
session of any user who executes it.
cc1122..iinndddd 448855 88//1199//22001111 1122::1122::3333 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 486
486 Chapter 12 n Attacking Users: Cross-Site Scripting
n The attacker uploads the fi le as his profi le picture. Because the fi le contains
a valid GIF image, the application accepts it.
n The attacker identifi es a suitable external website from which to deliver
an attack leveraging the uploaded fi le. This may be the attacker’s own
website, or a third-party site that allows authoring of arbitrary HTML,
such as a blog.
n On the external site, the attacker uses the  or  tag to load
the GIFAR fi le from the social networking site as a Java applet.
n When a user visits the external site, the attacker’s Java applet executes
in his browser. For Java applets, the same-origin policy is implemented
in a different way than for normal script includes. The applet is treated
as belonging to the domain from which it was loaded, not the domain
that invoked it. Hence, the attacker’s applet executes in the domain of the
social networking application. If the victim user is logged in to the social
networking application at the time of the attack, or has logged in recently
and selected the “stay logged in” option, the attacker’s applet has full
access to the user’s session, and the user is compromised.
This specifi c attack using GIFAR fi les is prevented in current versions of the
Java browser plug-in, which validates whether JAR fi les being loaded actually
contain hybrid content. However, the principle of using hybrid fi les to conceal
executable code remains valid. Given the growing range of client-executable
code formats now in use, it is possible that similar attacks may exist in other
formats or may arise in the future.
XSS in Files Loaded Via Ajax
Some of today’s applications use Ajax to retrieve and render URLs that are
specifi ed after the fragment identifi er. For example, an application’s pages may
contain links like the following:
http://wahh-app.com/#profile
When the user clicks the link, client-side code handles the click event, uses
Ajax to retrieve the fi le shown after the fragment, and sets the response within
the innerHtml of a  element in the existing page. This can provide a seam-
less user experience, in which clicking a tab in the user interface updates the
displayed content without reloading the entire page.
In this situation, if the application also contains functionality allowing you to
upload and download image fi les, such as a user profi le picture, you may be able
to upload a valid image fi le containing embedded HTML markup and construct
a URL that causes the client-side code to fetch the image and display it as HTML:
http://wahh-app.com/#profiles/images/15234917624.jpg
cc1122..iinndddd 448866 88//1199//22001111 1122::1122::3333 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 487
Chapter 12 n Attacking Users: Cross-Site Scripting 487
HTML can be embedded in various locations within a valid image fi le, includ-
ing the comment section of the image. Several browsers, including Firefox and
Safari, happily render an image fi le as HTML. The binary parts of the image
are displayed as junk, and any embedded HTML is displayed in the usual way.
TIP Suppose a potential victim is using an HTML5-compliant browser, where
cross-domain Ajax requests are possible with the permission of the requested
domain. Another possible attack in this situation would be to place an abso-
lute URL after the fragment character, specifying an external HTML fi le that
the attacker fully controls, on a server that allows Ajax interaction from the
domain being targeted. If the client-side script does not validate that the URL
being requested is on the same domain, the client-side remote fi le inclusion
attack succeeds.
Because this validation of the URL’s domain would have been unnecessary
in older versions of HTML, this is one example where the changes introduced
in HTML5 may themselves introduce exploitable conditions into existing appli-
cations that were previously secure.
Finding and Exploiting DOM-Based XSS Vulnerabilities
DOM-based XSS vulnerabilities cannot be identifi ed by submitting a unique string
as each parameter and monitoring responses for the appearance of that string.
One basic method for identifying DOM-based XSS bugs is to manually walk
through the application with your browser and modify each URL parameter to
contain a standard test string, such as one of the following:
“
“;alert(1)//
‘-alert(1)-’
By actually displaying each returned page in your browser, you cause all
client-side scripts to execute, referencing your modifi ed URL parameter where
applicable. Any time a dialog box appears containing your cookies, you will
have found a vulnerability (which may be due to DOM-based or other forms
of XSS). This process could even be automated by a tool that implemented its
own JavaScript interpreter.
However, this basic approach does not identify all DOM-based XSS bugs.
As you have seen, the precise syntax required to inject valid JavaScript into an
HTML document depends on the syntax that already appears before and after
the point where the user-controllable string gets inserted. It may be necessary to
terminate a single- or double-quoted string or to close specifi c tags. Sometimes
new tags may be required, but sometimes not. Client-side application code may
attempt to validate data retrieved from the DOM, and yet may still be vulnerable.
cc1122..iinndddd 448877 88//1199//22001111 1122::1122::3344 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 488
488 Chapter 12 n Attacking Users: Cross-Site Scripting
If a standard test string does not happen to result in valid syntax when it
is processed and inserted, the embedded JavaScript does not execute, and no
dialog appears, even though the application may be vulnerable to a properly
crafted attack. Short of submitting every conceivable XSS attack string into every
parameter, the basic approach inevitably misses a large number of vulnerabilities.
A more effective approach to identifying DOM-based XSS bugs is to review
all client-side JavaScript for any use of DOM properties that may lead to a vul-
nerability. Various tools are available to help automate this process. One such
effective tool is DOMTracer, available at the following URL:
www.blueinfy.com/tools.html
HACK STEPS
Using the results of your application mapping exercises from Chapter 4,
review every piece of client-side JavaScript for the following APIs, which may
be used to access DOM data that can be controlled via a crafted URL:
n document.location
n document.URL
n document.URLUnencoded
n document.referrer
n window.location
Be sure to include scripts that appear in static HTML pages as well as
dynamically generated pages. DOM-based XSS bugs may exist in any location
where client-side scripts are used, regardless of the type of page or whether
you see parameters being submitted to the page.
In every instance where one of the preceding APIs is being used, closely
review the code to identify what is being done with the user-controllable
data, and whether crafted input could be used to cause execution of arbitrary
JavaScript. In particular, review and test any instance where your data is being
passed to any of the following APIs:
n document.write()
n document.writeln()
n document.body.innerHtml
n eval()
n window.execScript()
n window.setInterval()
n window.setTimeout()
cc1122..iinndddd 448888 88//1199//22001111 1122::1122::3344 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 489
Chapter 12 n Attacking Users: Cross-Site Scripting 489
TRY IT!
http://mdsec.net/error/18/
http://mdsec.net/error/22/
http://mdsec.net/error/28/
http://mdsec.net/error/31/
http://mdsec.net/error/37/
http://mdsec.net/error/41/
http://mdsec.net/error/49/
http://mdsec.net/error/53/
http://mdsec.net/error/56/
http://mdsec.net/error/61/
As with refl ected and stored XSS, the application may perform various fi ltering
in an attempt to block attacks. Often, the fi ltering is applied on the client side,
and you can review the validation code directly to understand how it works
and to try to identify any bypasses. All the techniques already described for
fi lters against refl ected XSS attacks may be relevant here.
TRY IT!
http://mdsec.net/error/92/
http://mdsec.net/error/95/
http://mdsec.net/error/107/
http://mdsec.net/error/109/
http://mdsec.net/error/118/
In some situations, you may fi nd that the server-side application implements
fi lters designed to prevent DOM-based XSS attacks. Even though the vulnerable
operation occurs on the client, and the server does not return the user-supplied
data in its response, the URL is still submitted to the server. So the application
may validate the data and fail to return the vulnerable client-side script when
a malicious payload is detected.
If this defense is encountered, you should attempt each of the potential fi lter
bypasses that were described previously for refl ected XSS vulnerabilities to test
the robustness of the server’s validation. In addition to these attacks, several
techniques unique to DOM-based XSS bugs may enable your attack payload to
evade server-side validation.
When client-side scripts extract a parameter’s value from the URL, they rarely
parse the query string properly into name/value pairs. Instead, they typically
search the URL for the parameter name followed by the equals sign and then
cc1122..iinndddd 448899 88//1199//22001111 1122::1122::3344 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 490
490 Chapter 12 n Attacking Users: Cross-Site Scripting
extract whatever comes next, up until the end of the URL. This behavior can
be exploited in two ways:
n If the server’s validation logic is being applied on a per-parameter basis,
rather than on the entire URL, the payload can be placed into an invented
parameter appended after the vulnerable parameter. For example:
http://mdsec.net/error/76/Error.ashx?message=Sorry%2c+an+error+occurr
ed&foo=
Here, the server ignores the invented parameter, and so it is not subject to
any fi ltering. However, because the client-side script searches the query
string for message= and extracts everything following this, it includes your
payload in the string it processes.
n If the server’s validation logic is being applied to the entire URL, not
just to the message parameter, it may still be possible to evade the fi lter
by placing the payload to the right of the HTML fragment character (#):
http://mdsec.net/error/82/Error.ashx?message=Sorry%2c+an+error+