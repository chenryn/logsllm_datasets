suppression in the cluster’s centroid). Thus we use 10
clusters for each window-bit-position for each of the two
possible values of bval. Overall, the number of S-S ref-
592    27th USENIX Security Symposium
USENIX Association
consumes more time because it performs the ct[wval]
computation; U-Z, which involves executing line 31, line
3, line 4 (where a bit of the exponent is examined), and ﬁ-
nally entering Montgomery multiplication at line 7; U-S,
which involves executing line 31, line 3, line 4, lines 11
and 12, and the entire window-scanning loop at lines 14-
23, then line 25 and ﬁnally entering Montgomery multi-
plication at line 26; Z-Z where after line 7 the execution
proceeds to line 8, line 9, line 3, line 4, and line 7 again;
Z-S where after line 7 the execution proceeds to lines
8, 9, 3, 4, and then to lines 11 and 12, the loop at line
14-23, then line 25 and ﬁnally line 26; U-X where after
the Montgomery multiplication at line 29 the execution
proceeds to line 31 and then exits the loop at line 3; and
ﬁnally S-X, where after Montgomery multiplication at
line 7 the execution proceeds to lines 8 and 9 and then
exits the loop at line 3.
Just like in ﬁxed-window implementations, our recov-
ery of the secret exponent begins with determining which
snippet belongs to which of these control-ﬂow possibili-
ties. While in Section 3.3 this was needed only to correct
for missing snippets, in the sliding-window implemen-
tation the window size varies depending on which bit-
values are encountered in the exponent, so distinguishing
among the control-ﬂow possibilities is crucial for cor-
rectly assigning recovered bits to bit-positions in the ex-
ponent even if no snippets are missing. Furthermore,
many of the exponent’s bits can be recovered purely
based on the sequence of these control-ﬂow possibilities.
Our overall approach for distinguishing among control
ﬂow possibilities is similar to that in Section 3.3, except
that here there are more control-ﬂow possibilities, and
the U-S and Z-S coarse-grained possibilities each have
multiple control ﬂow possibilities within the snippet: for
each bit considered for the window, line 19 determines
whether or not to execute lines 20 and 21. However, at
the point in the sequence where U-S can occur, the only
alternative is U-Z, which is much shorter and thus they
are easy to tell apart. Similarly, the only alternative to
Z-S is the much shorter Z-Z, so they are also easy to tell
apart.
By classifying snippets according to which control-
ﬂow possibility they belong (where U-S and U-Z are
each treated as one possibility), and by knowing the rules
the sequence of these must follow, we can recover from
missing snippets and, more importantly, use rules similar
to those in [10] to recover many of the bits in the secret
exponent. However, in contrast to work in [10] that could
only distinguish between a squaring (line 7 or line 26, i.e.
S or Z in our sequence notation) and an update (line 29, U
in our sequence notation) using memory access patterns
within each Montgomery multiplication (which imple-
ments both squaring and updates), our method uses the
signal snippets between these Montgomery multiplica-
Figure 5: Example signal references (cluster centroid)
for S-S snippets. Two references are shown for each
value of the exponent’s bit that corresponds to the snip-
pet.
erence snippets for bval recovery is 2 ∗ (w − 1) ∗ 10 –
two possible values of bval, w− 1 bit-positions, 10 ref-
erence signals (cluster centroids) for each, while for S-U
snippets we only have 20 reference snippets because S-
U only happens for the last bit-position in the window.
For commonly used window sizes this results in a rel-
atively small overall number of reference snippets, e.g.
for w = 5 there are only 100 reference snippets. To il-
lustrate the difference in the signals created by the value
of the exponent’s bit, Figure 5 shows two reference S-S
snippets (cluster centroids) for each value of the expo-
nent’s bit, with the most signiﬁcant differences between
0-value and 1-value signals indicated by thick arrows.
Recall that, before attempting recovery of an unknown
bit of the secret exponent, we have already identiﬁed
which control-ﬂow possibility (S-S or S-U) the snippet
under consideration belongs to, and for S-S which bit-
position it belongs to, so there are 20 reference snippets
that each snippet-under-consideration is compared to (10
clusters for bval = 0 and 10 clusters for bval = 1). Thus
the ﬁnal step of our analysis involves ﬁnding the clos-
est match (using Euclidean distance as a metric) among
these 20 reference snippets and taking the bval associ-
ated with that reference snippet.
3.4 Recovering Exponent Bits in
the Sliding-window Implementation
The sliding-window implementation of large-integer ex-
ponentiation (Figure 2) has three sites where Mont-
gomery multiplication is called:
the squaring within a
window at line 26, which we label S, the update of the
result at line 29, which we label U, and the squaring for a
zero-valued window at line 7, which we label Z. The con-
trol ﬂow possibilities between these include going from
a squaring to another squaring (which we label as S-S).
This transition is very brief (it only involves staying in
the loop at line 25). The other transitions are S-U, which
USENIX Association
27th USENIX Security Symposium    593
0-A1-A0-B1-BRelevantParttions to recover more detailed information, e.g., for each
squaring our recovered sequence indicates whether it is
an S or a Z, and this simpliﬁes the rules for recovery of
exponent’s bits and allows us to extract more of them.
Speciﬁcally, after a U-S or Z-S, which compute the win-
dow value wval, the number of bits in the window can
be obtained by counting the S-S occurrences that follow
before an S-U is encountered. For example, consider the
sequence U-S, S-S, S-S, S-U, U-Z, Z-Z, Z-Z, Z-S. The
ﬁrst U-S indicates that a new window has been identiﬁed
and a squaring for one of its bits is executed. Then the
two occurrences of S-S indicate two additional squaring
for this window, and S-U indicates that only these three
squaring are executed, so the window has only 3 bits. Be-
cause the window begins and ends with 1-valued bits, it
is trivial to deduce the values of two of these 3 bits. If we
also know that wmax = 5, the fact that the window only
has 3 bits indicates that the two bits after this window
are both 0-valued (because a 1-valued bit would have ex-
panded the window to include it). Then, after S-U, we
observe U-Z, which indicates that the bit after the win-
dow is 0-valued (which we have already deduced), then
two occurrences of Z-Z indicate two more 0-valued bits
(one of which we have already deduced), and ﬁnally Z-
S indicates that a new non-zero window begins, i.e. the
next bit is 1. Overall, out of the seven bits examined dur-
ing this sequence, six were recovered solely based on the
sequence. Note that two of the bits (the two zeroes after
the window) were redundantly recovered, and this redun-
dancy helps us correct mistakes such as missing snippets
or miss-categorized snippets.
In general, this sequence-based analysis recovers all
zeroes between windows and two bits from each win-
In our experiments, when using wmax = 5 this
dow.
analysis alone on average recovers 68% of the secret ex-
ponent’s bits, and with using wmax = 6, another com-
monly used value for wmax, this analysis alone on aver-
age recovers 55% of the exponent’s bits. These recovery
rates are somewhat higher than what square-update se-
quences alone enable [10], but recall that in our approach
sequence recovery is only the preparation for our analy-
sis of exponent-bit-dependent variation within individual
signal snippets.
Since the only bits not already recovered are the “in-
ner” (not the ﬁrst and not the last) bits of each window,
and since U-S and Z-S snippets are the only ones that ex-
amine these inner bits, our further analysis only focuses
on these. To simplify discussion, we will use U-S to de-
scribe our analysis because the analysis for Z-S snippets
is virtually identical.
Unlike ﬁxed-window implementations, where the bits
of the exponent are individually examined in separate
snippets, in sliding-window implementations a single
U-S or Z-S snippet contains the activity (line 4) for
examining the ﬁrst bit of the window and the execu-
tion of the entire loop (lines 14-23) that constructs the
wval by examining the next wmax − 1. Since these
bits are examined in rapid succession without interven-
ing highly-recognizable Montgomery multiplication ac-
tivity, it would be difﬁcult to further divide the snippet’s
signal into pieces that each correspond to consideration
Instead, we note that wmax is rela-
of only one bit.
tively small (typically 5 or 6), and that there are only
2wmax possibilities for the control ﬂow and most of the
operands in the entire window-scanning loop. Therefore,
in training we form separate reference snippets for each
of these possibilities, and then during the attack we com-
pare the signal snippet under consideration to each of the
references, identify the best-matching reference snippet
(smallest Euclidean distance), and use the bits that corre-
spond to that reference as the recovered bit values.
3.5 Full Recovery of RSA Private Key Us-
ing Recovered Exponent Bits
Our RSA key recovery algorithm is a variant of the
algorithm described by Henecka et al. [27], which is
based on Heninger and Shacham’s branch-and-prune al-
gorithm [28]. Like Bernstein et al. [10], we recover from
the side channel signal only the bits of the private expo-
nents dp and dq, and the recovery of the full private key
relies on exploiting the numerical relationships (Equa-
tions (1) in Bernstein et al. [10]) between these private
exponents (dp and dq), the public modulus N and expo-
nent e, and p and q, the private factors of N:
edp = 1 + kp(p− 1) mod 2i
edq = 1 + kq(q− 1) mod 2i
pq = N mod 2i
where kp and kq are positive integers smaller than
the public exponent e and satisfy (kp − 1)(kq − 1) ≡
kpkqN mod e. The public exponent practically never ex-
ceeds 32 bits [28] and in most cases e = 65537, so a key
recovery algorithm needs to try at most e pairs of kp, kq.
We could not simply apply Bernstein’s algorithm [10]
to the exponents recovered by our signal analysis be-
cause, like the original branch-and-prune algorithm, such
recovery requires certain knowledge of the bit values at
some fraction of bit-positions in dp and dq, while the re-
maining bits are unknown but known to be unknown, i.e.
they are erasures rather than errors. Such branch-and-
prune search has been shown to be efﬁcient when up to
50% of the bit-positions (chosen uniformly at random) in
dp and dq are erasures, while its running time grows ex-
ponentially when the erasures signiﬁcantly exceed 50%
of the bit positions.
Henecka’s algorithm [27] can be applied with the
above pruning equations to recover the private key when
594    27th USENIX Security Symposium
USENIX Association
some of the bits are in error. However, its pruning is
based on a key assumption that errors are uniformly dis-
tributed, and it does not explicitly consider erasures. Re-
call, however, that for some of the bit positions our anal-
ysis cannot identify the relevant signal snippet for match-
ing against training signals (see Section 3.2), which re-
sults in an erasure. A naive approach for handling era-
sures would be to randomly assign a bit value for each
erasure (resulting in a 50% error rate among erasures)
and then apply Henecka’s algorithm. Unfortunately, the
erasures during our recovery are a product of distur-
bances in the signal that are very large in magnitude, and
such a disturbance also tends to last long enough to af-
fect multiple bits. With random values assigned to era-
sures, this produces 50%-error-rate bursts that are highly
unlikely to be produced by uniformly distributed errors,
causing Henecka’s algorithm to either prune the correct
partial candidate key or become inefﬁcient (depending
on the choice of the ε parameter).
Instead, we modify Henecka’s algorithm to handle
erasures by branching at a bit position when it encoun-
ters an erasure, but ignoring that bit position for the pur-
poses of making a pruning decision. We further extend
Henecka’s algorithm to not do a “hard” pruning of a can-
didate key when its error count is too high. Instead, we
save such a candidate key so that, if no candidate keys re-
main but the search for the correct private key is not com-
pleted, we can “un-prune” the lowest-error-count candi-
date keys that were previously pruned due to having too
high of an error count. This is similar to adjusting the
value of ε in Henecka’s algorithm and retrying, except
that the work of previous tries is not repeated, and this
low cost of relaxing the error tolerance allows us to start
with a low error tolerance (large ε in Henecka et al.) and
adjust it gradually until the solution is found.
We further modify Henecka’s algorithm to, rather than
expand a partial key by multiple bits (parameter t in He-
necka et al.) at a time, expand by one bit at a time and,
among the newly created partial keys, only further ex-
pand the lowest-recent error-count ones until the desired
expansion count (t) is reached. In Henecka’s algorithm,
full exansion by t bits at a time creates 2t new candi-
date keys, while our approach discovers the same set of t-
times-expanded non-pruned candidates without perform-
ing all t expansions on those candidates that encounter
too many errors even after fewer than t single-bit expan-
sions. For a constant t, this reduces the number of partial
keys that are examined by a constant factor, but when the
actual error rate is low this constant factor is close to 2t.
Overall, our actual implementation of this modiﬁed al-
gorithm is very efﬁcient - it considers (expands by one
bit) about 300,000 partial keys per second using a single
core on recent mobile hardware (4th generation Surface
Pro with a Core i7 processor), and for low actual error
Figure 6: Single-bit expansion steps needed to recon-
struct the private RSA key (vertical axis, note the log-
arithmic scale) as a function of the rate at which errors
and/or erasures are injected (horizontal axis).
rates typically ﬁnds a solution after only a few thousand
partial keys are considered. We evaluate its ability to
reconstruct private RSA keys using dp and dq bits that
contain errors and/or erasures by taking 1,000 RSA keys,
introducing random errors, random erasures, and a half-
and-half mix of errors and erasures, at different error/era-
sure rates, and counting how many partial keys had to be
considered (expanded by a bit) before the correct private
key was reconstructed. The median number of steps for
each error/erasure rate is shown in Figure 6. We only
show results for error/erasure rates up to 10% because
those are the most relevant to our actual signal-based re-
covery of the exponent’s bits.
We observe that our implementation of reconstruction
quickly becomes inefﬁcient when only errors are present
and the error rate approaches 7%, which agrees with the
theoretical results of Henecka et al. – since dp and dq are
used, the m factor in Henecka et al. is 2, and the upper
bound for efﬁcient reconstruction is at 8.4% error rate. In
contrast, when only erasures are present, our implemen-
tation of reconstruction remains very efﬁcient even as the
erasure rate exceeds 10%, which agrees with Bernstein et
al.’s ﬁnding that reconstruction should be efﬁcient with
up to 50% erasure rates. Finally, when equal numbers of
errors and erasures are injected, the efﬁciency for each
injection rate is close to (only slightly worse than) the ef-
ﬁciency for error-only injection at half that rate, i.e. with
a mix of errors and erasures, the efﬁciency of reconstruc-
tion is largely governed by the errors.
Figure 7 shows the percentage of experiments in
which the correct RSA key was recovered in fewer than
5,000,000 steps (about 17 seconds on the Surface 4