occurs only in contrived examples.
Let I = (γ0, ψ, goal ) be a problem instance satisfying |ppre| ≤
1, where γ0 = (cid:104)R, UA0(cid:105) and ψ = (cid:104)can_assign, can_revoke(cid:105).
Because |ppre| ≤ 1, each element of can_assign can be written
in the form (cid:104)p ∧ ¬N, r(cid:105), where p is a positive literal (i.e., a role)
or true, and N is a (possibly empty) set of roles; ¬{n1, n2, . . .}
abbreviates ¬n1 ∧ ¬n2 ∧ ··· . Let Irrev be the set of irrevocable
roles, i.e., Irrev = R \ can_revoke.
The algorithm has two stages.
The ﬁrst stage uses backwards search from the goal to construct
a directed graph G = (V, E). The nodes correspond to states (i.e.,
sets of roles). The graph contains an edge from a state U A1 to
U A2 if there is a can_assign rule (p ∧ ¬N, r) such that, starting
from U A1, revoking roles in U A1 that appear in N (we say that
those roles “conﬂict” with the rule), and then adding r using this
rule leads to UA2. Given UA2, if such a predecessor state UA1
exists, then we say that the rule is backwards enabled in UA2. The
predecessor function and backwards enabled function are deﬁned
as follows.
pred((cid:104)p ∧ ¬N, r(cid:105), UA)
= (p = true) ? UA \ {r} : (UA \ {r}) ∪ {p}
backEnab((cid:104)p ∧ ¬N, r(cid:105), UA)
(3)
(4)
= r ∈ UA ∧ pred((cid:104)p ∧ ¬N, r(cid:105), UA) ∩ N = ∅
The graph is deﬁned to be the least ﬁxed-point of the following
rules. The graph is computed by a straightforward workset algo-
rithm.
goal ∈ V
(∀ UA2 ∈ V, t ∈ can_assign : backEnab(t, UA2)
(∀ (cid:104)UA1, UA2(cid:105) ∈ E : UA1 ∈ V )
⇒ e ∈ E ∧ label (e) = t where e = (cid:104)pred(t, UA2), UA2(cid:105))
(5)
The second stage of the algorithm uses the graph (cid:104)V, E(cid:105) to de-
termine plan existence and, if the goal is reachable, produce a plan.
The plan corresponds to a path in the graph from an initial node
to the goal. However, each state encountered during the plan is
not simply (the set of roles in) the corresponding node in the path;
rather, each state encountered in the plan may be a superset of the
corresponding node in the path. This is because roles that were
needed to satisfy preconditions of earlier transitions in the plan
might still be in the state. This possibility is unavoidable, because
some of those roles might be irrevocable. In addition, our algorithm
leaves revocable roles in the state unless and until they need to be
revoked to enable the next transition.
Figure 1: Left: Part of state space generated without reduction and without slicing (32 states, 96 transitions). Top right: State
space generated without reduction and with slicing (8 states, 16 transitions). Bottom right: State space generated with reduction and
without slicing (3 states, 3 transitions). ua and ur abbreviate UserAssign and UserRevoke, respectively. The state space generated
with reduction and slicing (not shown) contains 1 state, namely, {r1, r2, r3, r4}, and 0 transitions.
Let P = (cid:104)e1, e2, . . . , en(cid:105) be a path in (cid:104)V, E(cid:105), represented as
a sequence of edges. The candidate plan corresponding to P , de-
noted plan(P ), is A1.A2.··· .An where
• (cid:104)pi ∧ ¬Ni, ri(cid:105) = label (ei).
• UA(cid:48)
i, the intermediate state in the plan immediately before
execution of Ai, is deﬁned by (1) UA(cid:48)
1 is the source node of
e1, and (2) for i ≥ 1, UA(cid:48)
i \ revoke i ∪{ri}. Note
i+1 = UA(cid:48)
that these intermediate states in the plan may be supersets of
the corresponding nodes in the path, as discussed above.
• revokei = Ni ∩ UA(cid:48)
i (i.e., the set revokei of roles that need
to be revoked by Ai contains roles that are present in the cur-
rent state and conﬂict with the next can_assign transition).
• Ai = {UserRevoke(r) : r ∈ revoke i}.UserAssign(ri).
Note that Ai consists of the indicated UserRevoke actions in arbi-
trary order, followed by the indicated UserAssign action.
We call plan(P ) a “candidate plan” because it might attempt to
revoke an irrevocable role. A path P is feasible if plan(P ) does
not contain UserRevoke(r) for any r ∈ Irrev.
A node UA in the graph is an initial node if it is a subset of
the initial state UA0. This deﬁnition allows initial revocation of
revocable roles in UA0 \ UA. This is necessary because every
edge in the graph corresponds to a sequence of operations that adds
at least one role to the state. Irrevocable roles in UA0 \ UA are
placed in airs(UA), deﬁned below.
LEMMA 3. There is a plan for I iff there is a feasible path P
from an initial node to the goal node.
PROOF: This follows directly from the construction of the graph
and the above deﬁnitions.
2
To determine whether a feasible path exists, we compute, for
each node UA in the graph, the set airs(UA) of sets of additional
irrevocable roles that can be in states corresponding to that node;
“additional” here means “not in UA”. More precisely, S ∈ airs(UA)
iff (1) UA is an initial node and S = (UA0 ∩ Irrev ) \ UA, or (2)
S ⊆ Irrev and S ∩ UA = ∅ and there exists a feasible path P
from an initial node UA1 to UA such that execution of plan(P )
from UA1 leads to the state UA ∪ S.
LEMMA 4. There is a plan for I iff airs(goal ) is non-empty.
PROOF: This is a corollary of the previous lemma, and the ob-
servation that (by deﬁnition of airs) airs(goal ) is non-empty iff
there exists a feasible path from an initial node to goal. Note that
airs(goal ) might contain only the empty set. That counts! It im-
plies there exists a feasible path P from an initial node to goal such
that plan(P ) adds no additional irrevocable roles.
2
Considering every path individually would be very expensive, so
we introduce an alternate characterization of airs that leads to a
more efﬁcient algorithm. Speciﬁcally, airs is the least (with re-
spect to the pointwise extension of the subset ordering) solution of
the following set inclusion constraints, where the set comprehen-
sion {f (x1, x2, . . .)
| p(x1, x2, . . .)}
denotes the set obtained by iterating over each combination of val-
ues x1, x2, . . . in S1× S2×··· and, if p(x1, x2, . . .) holds, adding
f (x1, x2, . . .) to the result set.
: x1 ∈ S1, x2 ∈ S2, . . .
• For each initial node UA, airs(UA) ⊇ (UA0∩Irrev )\UA.
• For each edge UA1
(cid:104)p∧¬N,r(cid:105)−→ UA2, if UA1 is reachable with
additional irrevocable roles S in the state, and if this edge is
a feasible transition from that state (i.e., if ((UA1 ∩ Irrev )∪
S) ∩ N = ∅), then UA2 is reachable with additional irre-
vocable roles S ∪ ((UA1 \ UA2) ∩ Irrev ) (in other words,
irrevocable roles present in UA1 must still be present in the
next state and, if they do not appear in UA2, are “additional”
in that state, by deﬁnition); formally,
airs(UA2) ⊇ {S ∪ ((UA1 \ UA2) ∩ Irrev ) :
S ∈ airs(UA1) | ((UA1 ∩ Irrev ) ∪ S) ∩ N = ∅}
The role r added along this edge does not appear in the set
constraint, because the construction of the graph ensures that
r appears in UA2 and hence is never “additional” in states
corresponding to UA2. As an optimization, ((UA1∩Irrev )∪
S)∩ N can be simpliﬁed to S ∩ N, because the construction
of the graph implies UA1 ∩ N = ∅. Similarly, the construc-
tion implies that (UA1 \ UA2) equals {p} if p (cid:54)= true and
equals ∅ otherwise.
ur(r7)r1,r3,r4,r7,r8r1,r4r1, r2, r4r1,r2,r3,r4r1, r4, r7r4ua(r2)ur(r2)ua(r3)ur(r3)ur(r2)ua(r2)r1, r3, r4ur(r1)ur(r1)r3, r4ur(r3)ur(r3)r2,r3,r4ur(r1)r2,r4ur(r1)ur(r3)ua(r3)ur(r2)ur(r2)r1,r2,r4,r7r1,r2,r3,r4,r7r1,r2,r3,r4,r7,r8ua(r8)r2,r3,r4,r7ur(r1)r2,r3,r4,r7,r8ur(r1)r2,r4,r7ur(r2)r2,r4,r7,r8ur(r3)r3,r4,r7,r8ur(r2)r3,r4,r8ur(r7)ur(r2)r2,r4,r8ur(r7)ur(r2)ua(r2)ur(r1)r2,r3,r4,r8ur(r7)ur(r2)ur(r3)ur(r7)ua(r7)ur(r2)ua(r2)ur(r3)ua(r3)r3,r4,r7ur(r3)ur(r7)ua(r8)ua(r3)ua(r8)r4,r7ur(r7)r1,r4,r7,r8ua(r8)r4,r7,r8ur(r1)ur(r7)ua(r7)r1,r4,r8ur(r7)ur(r1)ua(r7)r4,r8ur(r2)ur(r3)ur(r3)…………ur(r7)ur(r1)……ua(r3)ua(r8)ur(r3)……ur(r3)ua(r8)ur(r7)ur(r1)……ur(r2)……ua(r8)ua(r3)ur(r3)ur(r7)ua(r2)ua(r7)ua(r2)……ua(r7)ur(r2)……………………ua(r7)ua(r7)ur(r7)ur(r7)r1,r4r1, r2, r4r1,r2,r3,r4r4ua(r2)ur(r2)ua(r3)ur(r3)ur(r2)ua(r2)r1, r3, r4ur(r1)ur(r1)r3, r4ur(r3)ur(r3)r2,r3,r4ur(r1)r2,r4ur(r1)ur(r3)ua(r3)ur(r2)ur(r2)r1, r4, r7, r8r1,r2,r3,r4,r7,r8ua(r2)ur(r2)r1,r3,r4,r7,r8ua(r2)g
g
These constraints can be rewritten as a recursive deﬁnition.
airs(UA2) = (UA2 ∈ initialNodes ? {∅} : ∅) ∪
(cid:104)N,r(cid:105)−→ UA2 ∈ inedges(UA2),
{S ∪ ((UA1 \ UA2) ∩ Irrev ) :
UA1
S ∈ airs(UA1) | ((UA1 ∩ Irrev ) ∪ S) ∩ N = ∅}
The solution can be computed by a straightforward ﬁxed-point
computation, using a workset algorithm. Existence of a plan for I is
then determined using Lemma 4. The ﬁxed-point computation can
easily be augmented to store additional information that provides a
plan for I, if a plan for I exists.
Now we analyze the algorithm’s time complexity. Let g = |goal|.
Each node in V contains at most g roles, because the search starts
with the state goal, and the deﬁnition of UA1 ensures that |UA1| ≤
|UA2|. There are(cid:0)|R|
these sets has 2g subsets, so |V | is O(2g(cid:0)|R|
(cid:1) sets containing exactly g roles, and each of
(cid:1)), which is O(2g|R|g).
|E| is O(|V |2) which is O(22g|R|2g). Processing each possible
node or edge takes O(|I|) time, so the running time of Stage 1
is O(|E||I|). In Stage 2, each node in V gets labeled with a set
of subsets of Irrev, and propagating each subset along each edge
takes O(|I|) time, so the running time of Stage 2 is O(|E|22|Irrev||I|).
Thus, the overall running time is O(22g|R|2g22|Irrev||I|). This
shows that reachability for problem instances with |ppre| ≤ 1 is
ﬁxed-parameter |Irrev|-tractable and |goal|-polynomial.
This algorithm and complexity result can be extended to han-
dle a class of policies that do not satisfy |ppre| ≤ 1. Extending
the algorithm is easy:
interpret p as a set of positive precondi-
tions, instead of a single positive precondition, and in the deﬁni-
tion (3) of pred, replace “ ∪ {p}” with “ ∪ p”. The consequence
is that generated states may contain more than |goal| roles. A pol-
icy is cycle free if the posPre relation (deﬁned in Section 3) is
acyclic. Consider any path P in the generated graph from a state
UA1 to a state UA2, for a cycle free policy. Since the policy is
cycle free, the number of edges in P labeled by a selected rule t
is bounded by |UA2|. Note that |UA1| is larger than |UA2| due
to uses of t by at most |ppre(t)| × |UA2|. Thus, the maximum
size of a state in the graph is bounded (loosely) by π × |goal|,
where π = Πt∈can_assign max(1,|ppre(t)|). The complexity anal-
ysis proceeds as above, except with g replaced with π × |goal|.
This shows that the extended algorithm is ﬁxed-parameter |Irrev|-
tractable and (π×|goal|)-polynomial, for cycle free policies. Note
that π = 1 when |ppre| ≤ 1, so this result specializes to the previ-
ous result, although only for cycle-free policies.
Partial-Order Reduction. The graph construction can be opti-
mized with a partial-order reduction [9, 4].
It is trickier than in
Section 3, because the graph construction is a backward search, and
the states corresponding to nodes in the graph are only partly deter-
mined during the backward search. A straightforward adaptation of
the reduction in Section 3 is unsound. That reduction executes tran-
sitions whose target is a non-negative role as soon as they are en-
abled, hence those transitions appear early in the plan. A straight-
forward adaptation of it for backward search is to defer processing
of such transitions whenever other transitions are backwards en-
abled; this also causes such transitions to appear early in the gen-
erated plan. However, this is unsound: it sometimes defers such
transitions too much. For example, consider a reachability prob-
lem instance with can_assign = {(cid:104)r0, r1(cid:105),(cid:104)¬r0, r2(cid:105),(cid:104)true, r0(cid:105),
(cid:104)¬r2, r3(cid:105)}, can_revoke = ∅, UA0 = ∅, and goal = {r1, r2}. The
technique proposed above defers processing of rules whose target
is the non-negative role r1, so only the rule that adds r2 would be
explored backwards from the goal state. Therefore, the algorithm
would fail to ﬁnd the plan for this problem instance, namely, the
plan that adds r2, then r0, and then r1.
To avoid this problem, our reduction takes a different approach:
it identiﬁes transitions that can be processed eagerly during the
backward search, causing them to appear late in the resulting plan.
A role r is backwards invisible in a state UA if every transition
t = (cid:104)p ∧ ¬N, r(cid:105) with target r satisﬁes (p = true ∨ p ∈ UA ∨ p (cid:54)∈
NRI ) ∧ N ∩ Irrev = ∅, and at least one transition with target r is
backwards enabled in UA2. The ﬁrst conjunct in the formula en-
sures that backward execution from UA of a transition with target
r does not disable backwards-enabled transitions with other targets
(so the backward algorithm can process those transitions after pro-
cessing a transition for r). The second conjunct in the formula en-
sures that transitions for r will not be disabled by irrevocable roles
added to the state in stage 2.
To incorporate the reduction into the graph construction, modify
the deﬁnition of E so that, if some role r in UA2 is backward in-
visible in UA2 and the stack proviso is satisﬁed (see below), then
only can_assign rules for r are explored from UA2, otherwise all
backward enabled can_assign rules are explored from UA2. The
stack proviso ensures that no transitions are completely ignored
even when the state space contains cycles; it is satisﬁed if at least
one transition backward explored from the current state leads to a
state not on the DFS search stack [9, Chapter 6]. Note that slicing
can increase the beneﬁt of this reduction, by turning negative roles
into non-negative roles.
This reduction is not a special case of traditional partial-order
reductions [9, 4], because it uses an extra condition to deal with the
fact that the search is split into two stages, and because it exploits
the fact that the eagerly executed transitions are left-movers, while
traditional partial-order algorithms exploit only full commutativity
(independence) of transitions.
5. BEYOND THE SEPARATE
ADMINISTRATION RESTRICTION
This section considers policy analysis without the separate ad-
ministration restriction. First, we generalize the reduction-based
algorithm in Section 3 to eliminate its dependence on this restric-
tion. Second, we identify a condition under which policy analysis
without the separate administration assumption can be reduced to
policy analysis with the separate administration assumption.
5.1 Fixed-Parameter Tractability of
Reachability
Without the separate administration restriction, reachability anal-
ysis must consider plans that may contain administrative actions
that change the role memberships of any user in U0, not only the
target user. To accommodate this, we describe how to generalize
the reduction-based algorithm in Section 3 to track the role sets
of multiple users. The worst-case time complexity is exponential
in the number of those users. This demonstrates that reachability
analysis is ﬁxed-parameter tractable with respect to the number of
negative roles and |U0|.
Generalizing the partial-order algorithm in this way is straight-
forward. We now deal with full user assignments UA ⊆ U × R,
not simpliﬁed user assignments UA ⊆ R. We strengthen the def-
inition of enabledness of an action in a state γ to require (in ad-
dition to the conditions in Section 2.2) that the administrative role
ra (the ﬁrst argument to the UserAssign or UserRevoke action)
is a role of some user in U0 in γ. The deﬁnitions of visible and
invisible transitions and closure are unchanged. The reduced tran-
a; γ2 iff there exists a state γ
sition relation is deﬁned by: γ1
a→ γ and γ2 = closure(γ) and γ1 (cid:54)= γ2 and a is
such that γ1
UserAssign(ra, u, r) or UserRevoke(ra, u, r) for some adminis-
trative role ra, some user u in U0, and some negative role r. Theo-
rem 1 still holds, provided we replace goal ⊆ γ with goal ⊆ γ(ut),
where γ(u) = {r | (cid:104)u, r(cid:105) ∈ γ}.
The proof of ﬁxed-parameter tractability of this algorithm with
respect to the number of negative roles and |U0| is analogous to
the proof of Theorem 2, except that each state in GN R is now a
|U0|-tuple of subsets of N R, so the size of GN R is bounded by a
function of and |N R| and |U0|, so by the same argument as before,
the size of Gred is also bounded by some function of |N R| and
|U0|, i.e., the size of Gred is O(f (|N RI|,|U0|)) for some function
f. It follows that the worst-case time complexity of constructing
the reduced state graph is O(f (|N R|,|U0|)|I|c), for some function
f and some constant c.
5.2 Hierarchical Role Assignment