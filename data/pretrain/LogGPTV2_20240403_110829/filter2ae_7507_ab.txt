    --     `invocations`: A list of extractor invocations. Each invocation is a table with key `path` (absolute path to the executable)
    --                    and key `arguments` XOR `transformedArguments` (see explanation below)
    --   For convenience, the `CreatePatternMatcher` function is provided that deals with most of the low-level details
    --   of creating matchers.
    --    -- `compilerArguments` has the following structure:
    -- {
    --   "nativeArgumentPointer": Opaque pointer that can be used to create transformations of these command line arguments
    --                        that are executed in C++. This is mostly necessary for Windows, where we want to
    --                        prepend/append to the command line without parsing it
    --   "argv": Posix-only, array of command line arguments passed to the compiler
    --   "commandLineString": Windows-only, the string passed to CreateProcess*(), with the path to the compile removed (and converted to UTF-8).
    --                  Can be parsed into an argv array using `NativeCommandLineToArgv`, but be warned, this is not
    --                  a canonical interpretation of the command line.
    -- }
    -- The arguments for an extractor invocation have two possible shapes:
    --   either, the invocation sets the key `transformedArguments` (like `BuildExtractorInvocation` does), which is a table with
    --   the following keys:
    --     `nativeArgumentPointer`: The same opaque pointer, copied from the compiler invocation
    --     `prepend`: A list of arguments to prepend to the arguments from the compiler
    --     `append`: A list of arguments to append to the arguments from the compiler
    --   alternatively, it sets the key `arguments`, which is a table with the following keys:
    --     `argv`: Posix-only: The command line arguments (without argv[0])
    --     `commandLineString`: Windows-only: The command line string (without the leading path to the executable).
    --                    This will be converted internally to UTF-16 before execution.
    --    -- The user can specify an extra lua config file on the command line.
    -- This is loaded after all enabled languages have been loaded. This file also needs to contain a `GetCompatibleVersions`
    -- function, just like a regular tracing config.
    -- Second, it is required to contain a function
    -- RegisterExtraConfig() -> [{languageID -> [matchers]}], i.e. a function that returns a table
    --   mapping language IDs to a list of matchers. For each language ID, these matchers will _overwrite_ the matchers
    -- registered by that language.
    -- Furthermore, this function has full access to the implementation details of `base.lua`. However, obviously
    -- no guarantees about compatibility are made when accessing internal functions or state.
    --    -- If tracing is enabled for multiple languages, the languages are processed in lexicographical order of the language ID.
    -- For each language, the matchers are processed in the order supplied, until the first matcher returns non-nil.
    -- Then, matching for that language is stopped.
    -- Matchers between different languages are not allowed to cooperate - each language is supposed to be independent
    -- of the other possibly active languages.
    -- There is one exception, though: If two languages specify `replace=true` for the same compiler invocation,
    -- then matching for the second language is aborted without action. In this case, a log message is emitted.
该文件配合`trace.exe`使用，每种语言的`extractor`下都有一个`tracing-config.lua`文件，它有点类似于插件，需要实现两个函数`GetCompatibleVersions`和`RegisterExtractorPack`。前者用于标识自身支持的版本，后者则会被`tracer`调用返回一个`matcher`，`matcher`可以用来标识编译器并插入参数。以`java`的`extractor`为例，它的`tracing-config.lua`文件如下
    function RegisterExtractorPack(id)
        local pathToAgent = AbsolutifyExtractorPath(id, 'tools' .. PathSep ..
                                                        'codeql-java-agent.jar')
        -- inject our CodeQL agent into all processes that boot a JVM
        return {
            CreatePatternMatcher({'.'}, MatchCompilerName, nil, {
                jvmPrependArgs = {
                    '-javaagent:' .. pathToAgent .. '=ignore-project,java,kotlin:experimental',
                    '-Xbootclasspath/a:' .. pathToAgent
                }
            })
        }
    end
    -- Return a list of minimum supported versions of the configuration file format
    -- return one entry per supported major version.
    function GetCompatibleVersions() return {'1.0.0'} end
注释中已经写明，会向`jvm`中注入`agent`文件`codeql-java-agent.jar`。
> 以下为之前的理解
这个过程从`process hacker`中无法直接看到，但是任然有一些蛛丝马迹可以证明这一点。
  * 日志文件`build-tracer.log`，有`Reading configuration file ...\working\tracing\compiler-tracing12908925883751484166.spec`
  * `compiler-tracing12908925883751484166.spec`来自`compiler-tracing.spec`，其中包含`agent`相应参数
  * `trace.exe`中包含`ODASA_TRACER_CONFIGURATION`字符串，指向`spec`文件
可以通过`jd-gui`打开`codeql-java-agent.jar`，阅读其中代码，在`com.semmle.extractor.java.Utils#loadClass`中看到
    private static Class loadClass(String name) {
        Class result;
        try {
            result = Class.forName(name);
        } catch (ClassNotFoundException var10) {
            String extractorTools = getExtractorTools();
            if (extractorTools == null) {
                throw new RuntimeException("Failed to determine SEMMLE_DIST", var10);
            }
            File extractorJar = new File(extractorTools, "semmle-extractor-java.jar");
            if (!extractorJar.exists() || !extractorJar.canRead()) {
                throw new RuntimeException("Cannot read semmle-extractor-java jar from " + extractorJar + " -- check SEMMLE_DIST", var10);
            }
            URL url;
            try {
                url = extractorJar.getAbsoluteFile().toURI().toURL();
            } catch (MalformedURLException var9) {
                throw new RuntimeException("Failed to convert " + extractorJar + " to URL", var9);
            }
            URLClassLoader loader = new URLClassLoader(new URL[]{url});
            try {
                result = loader.loadClass(name);
            } catch (ClassNotFoundException var8) {
                throw new RuntimeException("Failed to load " + name + " from " + extractorJar + " -- check SEMMLE_DIST", var8);
            }
        }
        return result;
    }
会通过`Utils`加载`semmle-extractor-java.jar`，`codeql-java-agent.jar`的代码量不大，其大致逻辑可以通过静态代码阅读的方式来理解。
### Java Extractor
从前面的分析结果来看，`Extracotr`的操作位于`semmle-extractor-java.jar`中，根据`process
hacker`的内容在IDEA中新增一个`Debug`配置
> 由于中途更换了机器，所以某些路径看上去会不一样，但不影响阅读。此外由于`semmle-extractor-> java.jar`中没有清单文件`MAINFEST.MF`，无法直接运行该`jar`包，所以创建`Application`进行`Debug`即可。
    Main class: com.semmle.extractor.java.JavaExtractor
    Program arguments: --jdk-version 16 --javac-args @@@E:\Documents\databases\app\log\ext\javac.args
    Enviroment variables: CODEQL_PLATFORM=win64;CODEQL_PLATFORM_DLL_EXTENSION=.dll;CODEQL_EXTRACTOR_JAVA_LOG_DIR=E:\Documents\databases\app2\log;CODEQL_JAVA_HOME=E:\Program Files\codeql\tools\win64\java;CODEQL_EXTRACTOR_JAVA_SCRATCH_DIR=E:\Documents\databases\app2\working;CODEQL_EXTRACTOR_JAVA_WIP_DATABASE=E:\Documents\databases\app2;CODEQL_EXTRACTOR_JAVA_ROOT=E:\Program Files\codeql\java;CODEQL_EXTRACTOR_JAVA_TRAP_DIR=E:\Documents\databases\app2\trap\java;CODEQL_TRACER_LOG=E:\Documents\databases\app2\log\build-tracer.log;CODEQL_EXTRACTOR_JAVA_SOURCE_ARCHIVE_DIR=E:\Documents\databases\app2\src;CODEQL_DIST=E:\Program Files\codeql
先不急着调试，直接运行看看它运行后`database/app`目录下有什么变化。注意要在`log/ext`目录下放入相应的文件，这个可以从正常创建数据库的步骤中获取到。运行后会增加两个目录`src`和`trap`，`src`中会放置项目中的源代码，`trap`用于存放`trap`文件。
`codeql`提供了相关命令导入`trap`文件并生成数据库，在前面列出的创建过程中，也有出现它的身影。
    Usage: codeql dataset  ...
    [Plumbing] Work with raw QL datasets.
    Commands:
      import   [Plumbing] Import a set of TRAP files to a raw dataset.
      upgrade  [Plumbing] Upgrade a dataset so it is usable by the current tools.
      cleanup  [Plumbing] Clean up temporary files from a dataset.
      check    [Plumbing] Check a particular dataset for internal consistency.
      measure  [Plumbing] Collect statistics about the relations in a particular
                 dataset.
`trap`文件夹中列出了项目源码以及`jdk`依赖中类的信息，文件夹的结构如下
    |-- Java
        |-- classes
        |-- diagnostics
        `-- E_\Projects\IdeaProjects\app\src\main\java\org\example\
项目源码对应的`trap`文件位于`E_\Projects\IdeaProjects\app\src\main\java\org\example\`中，里面有`3`个文件，`App.java.dep`，`App.java.set`，`App.java.trap.gz`。可以将`App.java.trap.gz`解压缩查看`trap`文件的内容。项目代码只是调用`System.out.println`输出`Hello,
World!`，所以它的内容相对简单，如下
> `CodeQL`的`DB`架构是基于`Datalog`的，如果你熟悉`Datalog`，那理解这个文件的内容也会容易许多。
    // Generated by the CodeQL Java extractor
    #10000=@"E:/Projects/IdeaProjects/app/src/main/java/org/example/App.java;sourcefile"
    files(#10000,"E:/Projects/IdeaProjects/app/src/main/java/org/example/App.java")
    #10001=@"E:/Projects/IdeaProjects/app/src/main/java/org/example;folder"
    folders(#10001,"E:/Projects/IdeaProjects/app/src/main/java/org/example")
    #10002=@"E:/Projects/IdeaProjects/app/src/main/java/org;folder"
    folders(#10002,"E:/Projects/IdeaProjects/app/src/main/java/org")
    #10003=@"E:/Projects/IdeaProjects/app/src/main/java;folder"
    folders(#10003,"E:/Projects/IdeaProjects/app/src/main/java")
    #10004=@"E:/Projects/IdeaProjects/app/src/main;folder"
    folders(#10004,"E:/Projects/IdeaProjects/app/src/main")
    #10005=@"E:/Projects/IdeaProjects/app/src;folder"
    folders(#10005,"E:/Projects/IdeaProjects/app/src")
    #10006=@"E:/Projects/IdeaProjects/app;folder"
    folders(#10006,"E:/Projects/IdeaProjects/app")
    #10007=@"E:/Projects/IdeaProjects;folder"
    folders(#10007,"E:/Projects/IdeaProjects")
    #10008=@"E:/Projects;folder"
    folders(#10008,"E:/Projects")
    #10009=@"E:/;folder"
    folders(#10009,"E:/")
    containerparent(#10009,#10008)
    containerparent(#10008,#10007)
    containerparent(#10007,#10006)
    containerparent(#10006,#10005)
    containerparent(#10005,#10004)
    containerparent(#10004,#10003)
    containerparent(#10003,#10002)
    containerparent(#10002,#10001)
    containerparent(#10001,#10000)
    #10010=@"loc,{#10000},0,0,0,0"
    locations_default(#10010,#10000,0,0,0,0)
    hasLocation(#10000,#10010)
    numlines(#10000,9,8,0)
    #10011=@"package;org.example"
    packages(#10011,"org.example")
    cupackage(#10000,#10011)
    #10012=@"class;org.example.App"
    #10013=@"loc,{#10000},3,14,3,16"
    locations_default(#10013,#10000,3,14,3,16)
    hasLocation(#10012,#10013)
    numlines(#10012,6,6,0)
    #10014=@"type;void"
    primitives(#10014,"void")
    #10015=@"unknown;sourcefile"
    files(#10015,"")
    #10016=@"loc,{#10015},0,0,0,0"
    locations_default(#10016,#10015,0,0,0,0)
    hasLocation(#10014,#10016)
    #10017=@"callable;{#10012}.(){#10014}"
    locations_default(#10013,#10000,3,14,3,16)
    hasLocation(#10017,#10013)
    numlines(#10017,1,1,0)
    #10018=*
    stmts(#10018,0,#10017,0,#10017)
    #10019=*
    locations_default(#10019,#10000,3,14,3,16)
    hasLocation(#10018,#10019)
    numlines(#10018,1,1,0)
    #10020=*
    stmts(#10020,20,#10018,0,#10017)
    #10021=*
    locations_default(#10021,#10000,3,14,3,16)