# Understanding Open Ports in Android Applications: Discovery, Diagnosis, and Security Assessment

**Authors:**
- Daoyuan Wu
- Debin Gao
- Rocky K. C. Chang
- En He
- Eric K. T. Cheng
- Robert H. Deng

**Affiliations:**
- 1. Singapore Management University
- 2. The Hong Kong Polytechnic University
- 3. China Electronic Technology Cyber Security Co., Ltd.

## Abstract

Traditionally, open TCP/UDP ports are used by servers to provide application services. However, they are also found in many Android applications. This paper presents the first comprehensive analysis pipeline for open ports in Android apps, covering discovery, diagnosis, and security assessment. We designed and deployed a novel on-device crowdsourcing app and its server-side analytic engine to continuously monitor open ports in real-world settings. Over ten months, we collected over 40 million port monitoring records from 3,293 users in 136 countries, allowing us to observe the actual execution of open ports in 925 popular apps and 725 built-in system apps. Our crowdsourcing approach revealed that 15.3% of Android apps have open ports, significantly higher than the previous estimate of 6.8%. We also developed a new static diagnostic tool, which showed that 61.8% of open-port apps are due to embedded SDKs, and 20.7% suffer from insecure API usage. Finally, we conducted three security assessments: vulnerability analysis, inter-device connectivity measurement, and denial-of-service (DoS) attack evaluation.

## 1. Introduction

A network port is an abstraction of a communication endpoint. Servers on the Internet offer their services by "opening" a port for clients to send requests to, such as web servers on TCP port 80. A TCP/UDP port is considered open if a server process listens for incoming packets destined for the port and potentially responds to them. Since mobile devices are generally not suitable for providing network services due to non-routable addresses and limited CPU and bandwidth resources, it might seem that mobile apps are not suitable for hosting open ports. However, recent studies have shown that open ports in mobile apps are susceptible to various attacks. For example, Lin et al. [57] demonstrated the insecurity of local TCP open ports in non-rooted Android screenshot apps, and Wu et al. [79] found that top file-sharing apps on Android and iOS often do not authenticate traffic to their ports. Bai et al. [83] further revealed the insecurity of Apple ZeroConf techniques powered by ports like 5353 for mDNS.

Beyond these manual studies, Jia et al. [52] developed a static tool, OPAnalyzer, to identify TCP open ports and detect vulnerabilities in Android apps. They identified potential open ports in 6.8% of the top 24,000 Android apps, with around 400 apps likely vulnerable and 57 manually confirmed. However, OPAnalyzer has limitations, including the inherent challenges of static analysis (i.e., detected code might not execute) and the inability to handle dynamic code loading, complex implicit flows, and advanced code obfuscation. Additionally, OPAnalyzer focuses on detecting permission-misuse-related vulnerabilities in TCP open ports, while the broader picture of open ports in the Android ecosystem remains largely unexplored.

In this paper, we aim to systematically understand open ports in Android apps and their threats by proposing the first analysis pipeline that covers open port discovery, diagnosis, and security assessment. The key innovation is the use of crowdsourcing for open port discovery, complemented by static analysis for diagnosis. As shown in Figure 1, our pipeline first adopts a novel crowdsourcing approach to continuously monitor open ports in the wild, then employs static analysis to collect and diagnose the code-level information of discovered open ports. It also performs three security assessments: vulnerability analysis, inter-device connectivity measurement, and DoS attack evaluation. We elaborate on our contributions as follows:

### 1.1 Crowdsourcing Platform

We designed and deployed the first crowdsourcing platform, consisting of an on-device monitoring app (NetMon) and a server-side analytic engine, to continuously monitor open-port apps without user intervention. NetMon, available on Google Play since October 2016, has been installed over 6,000 times. Our analysis is based on data collected over ten months, generating over 40 million port monitoring records from 3,293 phones in 136 countries. This allowed us to observe the actual open ports in 2,778 Android apps, including 925 popular ones from Google Play and 725 built-in apps pre-installed by over 20 phone manufacturers. NetMon covers both TCP and UDP ports and includes built-in apps missed by OPAnalyzer. We quantified the efficacy of crowdsourcing through a comparison with static analysis, finding that 25.1% of apps with TCP open ports use dynamic or obfuscated code, and only 58.9% can be detected by typical static analysis techniques. With NetMon, we quantified the pervasiveness of open ports in a controlled set of the top 3,216 apps from Google Play, finding TCP open ports in 492 of them (15.3%), more than twice the previously reported 6.8%.

### 1.2 Static Analysis Tool

As the second contribution, we developed a new static analysis tool, OPTool, enhanced with open-port context and semantics, to understand the code-level open port constructions and their security implications. We focused on two types of diagnoses: whether an open port is introduced by developers or embedded via a third-party SDK, and whether developers apply secure open-port coding practices. Our findings were alarming: 13 popular SDKs were identified with open ports, and 61.8% of open-port apps are solely due to these SDKs, with Facebook SDK being the major contributor. Additionally, 20.7% of open-port apps make convenient but insecure API calls, unnecessarily increasing their attack surfaces.

### 1.3 Security Assessments

In the final phase of our pipeline, we performed three novel security assessments of open ports:

- **Vulnerability Analysis:** Unlike OPAnalyzer, which focuses on pre-defined vulnerability patterns, our vulnerability analysis identifies vulnerabilities in popular apps that may not follow a fixed pattern. We identified five vulnerability patterns in apps like Instagram, Samsung Gear, Skype, and the widely-embedded Facebook SDK.
- **Denial-of-Service Attack Evaluation:** We experimentally evaluated the effectiveness of a generic DoS attack against mobile open ports, showing that DoS attacks can significantly and effectively downgrade YouTube's video streaming, WeChat's voice call, and AirDroid's file transmission via their open ports.
- **Inter-device Connectivity Measurement:** To measure the extent to which remote open-port attacks can be carried out, we extended NetMon to conduct inter-device connectivity tests. With 6,391 network scan traces collected from devices in 224 cellular networks and 2,181 WiFi networks worldwide, we found that 49.6% of cellular networks and 83.6% of WiFi networks allow devices to directly connect to each other in the same network. Furthermore, 23 cellular networks and 10 WiFi networks assign public IP addresses to their users, enabling inter-network connectivity from the Internet.

## 2. Background and Threat Model

Before presenting our analysis pipeline, we introduce the necessary background and our threat model.

### 2.1 Definition of Open Ports

In this paper, an open port is defined as a TCP/UDP port that binds to any legitimate IP address and is configured to accept packets. Legitimate IP addresses include public, private, any (0.0.0.0), and the local loopback IP address. We use a generalized definition primarily due to the threat model in smartphones, where any third-party apps running on the phone could be untrusted and could utilize even the local loopback address for attacks. For simplicity, we use "host IP address" to refer to all IP addresses except the loopback IP address, which will be explicitly stated. Under this convention, a local open port refers to one that binds to the loopback address.

Open ports on Android are typically created using TCP stream or UDP datagram sockets. BluetoothSocket (in Android SDK), NFCSocket (an open-source library), and UNIX domain sockets (previously studied) are out of our scope because they do not use network ports.

### 2.2 Threat Model

We consider three types of adversaries in our threat model:

- **Local Adversary:** An attack app installed on the device where the victim app (with open ports) runs. Such an adversary does not require sensitive permissions but needs the INTERNET permission to access the open ports.
- **Remote Adversary:** Resides in the same WiFi or cellular network to which the victim device connects. Such an adversary can send TCP/UDP packets to other nodes if the network provides intra-network connectivity or even inter-network connectivity (with public IP addresses assigned to clients).
- **Web Adversary:** Remotely exploits a victim’s open ports by enticing the victim to browse a JavaScript-enabled web page under the adversary’s control. This threat is only applicable to HTTP-based ports with a fixed port number, as JavaScript and WebSocket can issue only HTTP packets, and iterating the ephemeral port range is infeasible due to resource constraints.

Note that local open ports can be attacked only by the first and third adversaries, while other open ports may suffer from all three adversaries.

## 3. Discovery via Crowdsourcing

The first phase of our pipeline is to discover open ports. Instead of using static analysis, we propose the first crowdsourcing approach for the discovery of open ports. This approach has several unique advantages:

- It can monitor open ports in the wild, covering both third-party and built-in apps.
- It results in no false positives.
- It captures the exact port number, IP address, and timestamps.
- It covers both TCP and UDP ports.

Furthermore, our crowdsourcing approach is more effective in terms of port discovery than typical Android static analysis, which cannot handle dynamic code loading, complex implicit flows, and advanced code obfuscation.

Our crowdsourcing platform consists of an on-device port monitoring app, NetMon, and a server-side open-port analytic engine. We have deployed NetMon to Google Play and collected the crowdsourcing results from a large number of real users. Before delving into the technical details, it is worth highlighting the overall challenges in our crowdsourcing approach. The development of NetMon required us to handle many product-level issues for a long-term and user-friendly deployment. Moreover, compared to typical app-based crowdsourcing, our open-port crowdsourcing is unique in that the collected raw records cannot be directly analyzed due to the existence of random port numbers. Therefore, we needed to design an "intelligent" analytic engine that can effectively cluster raw records into per-app open port results.

### 3.1 On-Device Open Port Monitoring

Unlike ZMap and Nmap, which probe ports by externally sending network traffic, NetMon launches on-device port monitoring directly on crowdsourced devices to collect open port numbers and their app information. Figure 2 shows two NetMon user interfaces for port monitoring. Figure 2(a) shows a partial list of apps running with open ports, while Figure 2(b) shows detailed records for a specific app (YouTube), including the TCP/UDP port numbers, IP addresses to which the ports bind, and the timestamps.

**Port Monitoring Mechanism:**
NetMon leverages a public interface in the proc file system to monitor open ports created by all apps on the device. The four pseudo files under the /proc/net/ directory (i.e., /proc/net/tcp|tcp6|udp|udp6) serve as a real-time interface to the TCP and UDP socket tables in the kernel space. Each pseudo file contains a list of current socket entries, including both client and server sockets. Any Android app can access these pseudo files without explicit permissions, and this works on all Android versions, including the latest Android 9. By using such an interface, NetMon can obtain the following port-related information:

- **Socket Address:** Covers a port number and an IP address.
- **TCP Socket State:** There are 12 possible TCP states, such as LISTEN and ESTABLISHED.
- **App UID:** Using the PackageManager APIs, NetMon obtains the app’s name from its UID (user ID).

According to the definition in Section 2, NetMon considers server ports as open ports. Therefore, it identifies a TCP open port from the proc file when it is in the LISTEN state. On the other hand, since UDP has no state information, we rely on the server-side analytic engine to further identify UDP open ports. Hence, the collected UDP port records are only the initial results, and not all of them will be treated as open ports (e.g., the client UDP port used by YouTube in Figure 2(b)).

**Challenges:**
The goal of long-term port monitoring on real user devices requires NetMon to periodically analyze those four proc files with minimal overhead. A simple idea of creating a "long-lived" service to periodically monitor open ports would not work as the service will be stopped by Android after a certain amount of time or terminated by users. To overcome this, we leverage Android AlarmManager to schedule periodic alarms to perform the proc file analysis robustly. We chose five minutes as the alarm interval because it provides a good sampling rate (excluding many client UDP ports) while incurring negligible overhead. Our experience shows that the potential information loss within the five-minute interval is well compensated by the large number of users contributing data in our crowdsourcing campaign. Moreover, we take advantage of the batched alarm mechanism introduced since Android 4.4 and a characteristic in /proc/net/tcp6|tcp— the server socket entries always appear in the top rows—to further minimize the overhead. As a result, NetMon incurs less than 1% overhead on CPU and battery for daily usage.

### 3.2 Server-Side Open-Port Analytic Engine

The open port information gathered from individual phones, such as the Netflx app opening TCP port 9080 at time t1 and UDP port 39798 at time t2, constitutes individual observations that need to be clustered to generate per-app open port results, such as Netflx having a fixed TCP port 9080 and a random UDP port. Different port records associated with the same "random" open port should be unified, and open ports with "fixed" port numbers should be recognized. This may sound straightforward, but it turns out to be a challenging task because fixed and random ports could exhibit indistinguishable observations. To overcome this challenge, we introduce a server-side analytic engine, as shown in Figure 3, to perform a three-step clustering:

- **Step 1: Aggregation.** We first aggregate each app’s observations by different types of ports and IP addresses. This is a "narrow down" step to effectively reduce the complexity of clustering—open ports with different types or IP addresses shall be in different clusters, as they are created by different APIs or InetAddress parameters at the code level.

[Figure 3: An overview of our server-side open-port analytic engine to perform the three-step clustering (using Netflix as an example).]

This structured and detailed approach ensures a comprehensive understanding of open ports in Android applications, their prevalence, and the associated security risks.