share the same key index,
5. session identiﬁers do not match across diﬀerent stages, and
6. at most two sessions have the same session identiﬁer at any stage.
The security game GMatch
KE,A is as follows.
Definition 8.1 (Match security). Let KE be a key exchange protocol and A a PPT adversary interacting
with KE via the queries deﬁned in Section 8.1 in the following game GMatch
KE,A :
37
Query. The adversary A has access to the queries NewSecret, NewSession, Send, Reveal, and Corrupt.
Stop. At some point, the adversary stops with no output.
We say that A wins the game, denoted by GMatch
KE,A = 1, if at least one of the following conditions hold:
1. There exist two distinct labels label, label0 such that label.sidi = label0.sidi 6= ⊥ for some stage i ∈
{1, . . . , M}, label.stexec 6= rejectedi, label0.stexec 6= rejectedi, but label.Ki 6= label0.Ki. (Diﬀerent session
keys in the same stage of partnered sessions.)
2. There exist two distinct labels label, label0 such that label.sidi = label0.sidi 6= ⊥ for some stage i ∈
{1, . . . , M} but label.authi 6= label0.authi (Diﬀerent authentication types in some stage of partnered
sessions.)
3. There exist two distinct labels label, label0 such that label.sidi = label0.sidi 6= ⊥ for some stage i ∈
{1, . . . , M}, but label.cidi 6= label0.cidi or label.cidi = label0.cidi = ⊥. (Diﬀerent or unset contributive
identiﬁers in some stage of partnered sessions.)
4. There exist two distinct labels label, label0 such that label.sidi = label0.sidi 6= ⊥ for some stage i ∈
{1, . . . , M}, label.authi = label0.authi ∈ {unilateral, mutual}, label.role = initiator, and label0.role =
responder, but label.V 6= label0.U or (only if label.authi = mutual) label.U 6= label0.V or (only if
label.authi = mutual) label.k 6= label0.k.
5. There exist two (not necessarily distinct) labels label, label0 such that label.sidi = label0.sidj 6= ⊥ for
some stages i, j ∈ {1, . . . , M} with i 6= j. (Diﬀerent stages share the same session identiﬁer.)
6. There exist three distinct labels label, label0, label00 such that label.sidi = label0.sidi = label00.sidi 6= ⊥
for some stage i ∈ {1, . . . , M}. (More than two sessions share the same session identiﬁer.)
We say KE is Match-secure if for all adversaries A the following advantage is negligible in the security
parameter:
KE,A := Prh
KE,A = 1i
GMatch
AdvMatch
.
similarly deﬁnes Bellare–Rogaway-like key secrecy in the multi-
8.2.2 Multi-Stage Security
Multi-Stage,D
The Multi-Stage security game G
KE,A
stage setting with preshared keys as follows.
Definition 8.2 (Multi-Stage security). Let KE be a preshared key exchange protocol with (session) key
distribution D, and A a PPT adversary interacting with KE via the queries deﬁned in Section 8.1 in the
following game G
Setup. Choose the test bit btest ←$ {0, 1} at random, and set lost ← false.
Query. The adversary has access to the queries NewSecret, NewSession, Send, Reveal, Corrupt, and Test.
Guess. At some point, A stops and outputs a guess b.
Finalize. The challenger sets the ‘lost’ ﬂag to lost ← true if any of the following conditions hold:
Note that some queries may set lost to true.
Multi-Stage,D
KE,A
:
1. There exist two (not necessarily distinct) labels label, label0 and some stage i ∈ {1, . . . , M} such
that label.sidi = label0.sidi, label.stkey,i = revealed, and label0.testedi = true. (Adversary has
tested and revealed the key in a single session or in two partnered sessions.)
2. The adversary A has issued a Test(label, i) query such that Corruptedlabel.U,label.V,label.k = revealed.
(Adversary has tested a session key and revealed the preshared secret used in the tested session.)
We say that A wins the game, denoted by G
We say KE is Multi-Stage-secure in a key-dependent/key-independent manner with concurrent authen-
tication properties AUTH if KE is Match-secure and for all PPT adversaries A the following advantage is
negligible in the security parameter:
= 1, if b = btest and lost = false.
Multi-Stage,D
KE,A
AdvMulti-Stage,D
KE,A
Multi-Stage,D
KE,A
G
= 1i − 1
2 .
:= Prh
38
9 Security of the draft-05 Session Resumption
We now turn towards session resumption and analyze the resumption handshake as speciﬁed in the draft-
ietf-tls-tls13-05 draft, denoted as d05-SR. The key schedule for resumption in draft-dh is not con-
clusively speciﬁed, so we omit a detailed analysis; since the main message ﬂow is identical, we expect its
security analysis to closely follow that of draft-05.
We deﬁne the session and contributive identiﬁers for stage 1, which derives tkhs, and stage 2, which
derives tkapp, to be both include the exchanged ClientHello and ServerHello messages as well as a
distinguishing label:
sid1 = cid1 = (ClientHello, ServerHello, “stage1”) and
sid2 = cid2 = (ClientHello, ServerHello, “stage2”).
By using the preshared-secret in deriving the session keys, both stages achieve mutual (implicit) authen-
tication.
In TLS session resumption, ClientHello contains the ﬁeld session_id, which serves as our preshared-
secret identiﬁer psid. This value was previously chosen by the server (the TLS standard does not specify
how) and sent to the client in the ServerHello message in the original handshake. We assume that the
session_id values are globally unique in TLS, for example, chosen at random from a suﬃciently large
space to make collisions unlikely, or of the form “server-name k counter”. We also assume each party U
knows the mapping between preshared-secret identiﬁers psidU,V,k and the peer identiﬁer V and key index
k for all its pre-shared secrets.
Theorem 9.1 (Match security of d05-SR). The TLS 1.3 draft-05 session resumption handshake d05-SR
is Match-secure: for any eﬃcient adversary A we have
d05-SR,A ≤ n2
s · 2−|nonce|,
AdvMatch
where |nonce| = 256 is the bitlength of the nonces.
Proof. We need to show the six properties of Match security hold:
1. Sessions with the same session identiﬁer for some stage hold the same session key.
Recall that HMS ← PRF(pssU,V,k, label1kH(CHkSH)) and MS ← PRF(HMS, label5kH(CHkSH)). More-
over, tkhs ← PRF(HMS, label2krskrc)) and tkapp ← PRF(MS, label6krskrc). Since session_id,
serving as the preshared-secret identiﬁer psid, is a substring of the ClientHello message which is
included in both sid1 and sid2, and since there is a unique mapping from psid to pssU,V,k, if two parties
share the same session identiﬁer then they both use the same PRF inputs and hence derive the same
session keys.
2. Sessions with the same session identiﬁer for some stage agree on the authenticity of the stage.
This trivially holds as in TLS 1.3 draft-05 session resumption all stages are, by deﬁnition, mutually
authenticated.
3. Sessions with the same session identiﬁer for some stage share the same contributive identiﬁer.
This trivially holds since the contributive identiﬁers equal the session identiﬁers in each stage.
4. Sessions are partnered with the intended partner and share the same key index.
Honest sessions are assured of the peer’s identity and the key index via the used preshared-secret
identiﬁer psid, which is included in the session identiﬁer for all stages; since each party knows the
unique mapping between preshared-secret identiﬁers and key indices, a party can determine the
peer’s identity from the preshared-secret identiﬁer and the mapping. Thus agreement on sid implies
agreement on the partner’s identity and the key index used.
39
5. Session identiﬁers are distinct for diﬀerent stages.
This holds trivially as session identiﬁers have diﬀerent labels at each stage.
6. At most two sessions have the same session identiﬁer at any stage.
Both the client random and server random nonces are included in all session identiﬁers. To have a
collision between honest parties requires two honest sessions to use the same nonces. The probability
s · 2−|nonce| where |nonce| is the length of the
that there exists such a nonce collision is bounded by n2
nonces.
Theorem 9.2 (Multi-Stage security of d05-SR). The TLS 1.3 draft-05 session resumption handshake
d05-SR is Multi-Stage-secure in a key-independent manner with concurrent authentication types AUTH =
{(mutual, mutual)}:
for any eﬃcient adversary A against the Multi-Stage security there exist eﬃcient
algorithms B1, . . . ,B4 such that
(cid:17)(cid:19)
,
AdvMulti-Stage,D
d05-SR,A
≤ 2ns ·
PRF,B2 + AdvPRF-sec
PRF,B3 + AdvPRF-sec
PRF,B4
(cid:18)
H,B1 + np ·(cid:16)AdvPRF-sec
AdvCOLL
where ns is the maximum number of sessions and np is the maximum number of pre-shared secrets.
Proof. First, we consider the case where A makes a only single Test query, reducing the advantage of A
by a factor of 1/2ns (for the two stages in each of the ns sessions) by a hybrid argument.18 We can now
focus on the single session with label label tested in stage i.
Proceeding in a sequence of games, we start from the original Multi-Stage game and bound the advan-
tage diﬀerence of adversary A between any two games by complexity-theoretic assumptions until we reach
a game where the advantage of A is at most 0.
Game 0. This initial game equals the Multi-Stage game with a single Test query, so
AdvG0
d05-SR,A = Adv1-Multi-Stage
d05-SR,A .
In this game, the challenger aborts the game if any two honest sessions compute the same hash
Game 1.
value for diﬀerent inputs in any evaluation of the hash function H.
Much the same as in Game A.1 of the proof of Theorem 5.2, we can break the collision resistance of H in
case of this event by letting a reduction B1 output the two distinct input values to H. Hence:
AdvG0
d05-SR,A ≤ AdvG1
d05-SR,A + AdvCOLL
H,B1 .
Game 2. As a next step, we guess the pre-shared secret pss (among the np secrets established) that
the tested session will use, and the challenger aborts the game if that guess was wrong. This reduces the
adversary’s advantage by a factor of at most 1/np, thus:
d05-SR,A ≤ np · AdvG2
AdvG1
Let pssU,V,k be the guessed pre-shared secret.
Game 3. We next replace the pseudorandom function PRF in all evaluations using the tested session’s
pre-shared secret pssU,V,k as key by a (lazy-sampled) random function. This in particular aﬀects the
18The hybrid argument follows the high-level idea of that in Theorem 5.2, but does not require its involved treatment of
d05-SR,A.
partnering as the session (and contributive) identiﬁers for the session resumption handshake d05-SR are public.
40
derivation of the handshake master secret HMS in the tested (and a potential partnered) session, which is
replaced by a random value (cid:93)HMS ←$ {0, 1}λ.
We can bound the diﬀerence this step introduces in the advantage of A by the security of the pseudorandom
function PRF. The according reduction B2 simulates Game 2, but uses its PRF oracle for any evaluation
of PRF using pssU,V,k as the key. In case the oracle computes the PRF function, this simulation equals
Game 2; if it computes a random function, the simulation equals Game 3. For any successful adversary
(which hence cannot invoke Corrupt on pssU,V,k used in the tested session), this pre-shared key is an
unknown and uniformly random value from A’s perspective and, hence, the simulation is sound and we
establish
AdvG2
d05-SR,A ≤ AdvG3
d05-SR,A + AdvPRF-sec
PRF,B2 .
Observe that in Game 3, the handshake master secret in the tested session (as well as in a partnered
session) is now a uniformly random value which is independent of all other values. This holds as the
non-colliding (by Game 1) hash value of the ClientHello and ServerHello messages contained in each
stage’s session identiﬁer is used as input to PRF, hence (even from the same pre-shared key) only partnered
sessions derive the same handshake master secret.
In this step we replace the evaluations of PRF using (cid:93)HMS as key in the tested and the potential
Game 4.
traﬃc key tkhs and the master secret MS with random values gtkhs,gMS ←$ {0, 1}λ (independent due to
partnered session by a (lazy-sampled) random function, thereby exchanging in particular the handshake
distinct input labels to PRF).
As in the previous game, we can bound the probability of A distinguishing this step by the security of PRF.
The reducing algorithm B3 now uses its PRF oracle to evaluate PRF keyed with (cid:93)HMS in the tested (and
partnered) session, perfectly simulating either Game 3 or Game 4 (depending on the oracle’s behavior) as
(cid:93)HMS is an uniformly random and independent value. Hence it holds that
d05-SR,A + AdvPRF-sec
PRF,B3 .
d05-SR,A ≤ AdvG4
AdvG3
Game 5. This last step exchanges the evaluations of PRF using gMS as key (in the tested and part-
nered session) against a random function, leading to the application traﬃc key tkapp being replaced by a
security of PRF since gMS, by Game 4, is independent and uniformly random. Therefore,
random (cid:93)tkapp ←$ {0, 1}λ. Along the lines of the two previous steps we can bound this step again by the
Finally, the session keys gtkhs and (cid:93)tkapp in Game 5 are chosen independently and uniformly at random,
d05-SR,A + AdvPRF-sec
PRF,B4 .
d05-SR,A ≤ AdvG5
AdvG4
rendering the response to the Test query independent of the test bit btest. Thus
AdvG5
d05-SR,A ≤ 0.
Combining the given single bounds yields the overall security statements.