hat kernel-level rootkits to recover from. We have chosen to test knark, sucKIT,
and r.tgz. These three rootkits represent kernel-level rootkits that penetrate the
kernel from both user space and from a kernel module. Also, our tools are tested
against both Entry Redirection and Table Redirection type rootkits. Finally, we
also test our tool against r.tgz because it represents a rootkit that was captured
in the wild on the Georgia Tech Honeynet. Recovering from the r.tgz demon-
strates how our research can be applied to real-world scenarios. Figure 4 shows
the results of our testing.
[root@h1 cd]# insmod ./knark.o
Warning: loading knark.o will taint the
kernel: no license See
http://www.tux.org/lkml/#export-
tainted
for information about tainted modules
Module knark loaded, with warnings
[root@h1 cd]# ./hidef /bin/rootme
hidef.c by Creed @ #hack.se 1999  Port to 2.4 by Cyberwinds
#Irc.openprojects.net 2001
[root@h1 cd]# ./ls /bin/root*
ls: /bin/root*:
No such ﬁle or directory
[root@h1 cd]# ./recover kkit
Trust has been Re-established!
[root@h1 cd]# ./ls /bin/root*
/bin/rootme
(a) Recovering from knark
[root@h2 cd]# ./sk
/dev/null RK Init: idt=0xc037d000,
sct[]=0xc0302c30,
kmalloc()=0xc0134fa0, gfp=0x0
Z Init: Allocating kernel-code
memory... Done,
12747 bytes, base=0xc8090000
BD Init: Starting backdoor daemon...
Done, pid=1435
[root@h2 cd]# ./ls /sbin/init*
/sbin/init
/sbin/initlog
[root@h2 cd]# ./recover kkit
Trust has been Re-established!
[root@h2 cd]# ./ls /sbin/init*
/sbin/init
/sbin/initlog
/sbin/initsk12
(b) Recovering from sucKIT
[root@h3 cd]# ./all
[===== INKIT version 1.3a, Aug 20 2002  =====]
[====== (c)oded by Inkubus PI:EMAIL> Anno Domini, 2002 ======]
RK Init: idt=0xc027a000, sct[]=0xc0248928, kmalloc()=0xc0121b88, gfp=0x15 Z Init:
Allocating kernel-code memory...Done,
13147 bytes, base=0xc9498000 BD Init: Starting backdoor daemon...Done, pid=1213
[root@h3 cd]# ./ps -p 1213
PID TTY TIME CMD
[root@h3 www]# ./recover kkit
Trust has been Re-established!
[root@h3 cd]# ./ps -p 1213
PID TTY TIME CMD
1213 ? 00:00:00 all
(c) Recovering from r.tgz
Fig. 4. Testing recover kkit Tool on Three Kernel-Level Rootkits
5.1
Recovering from knark
In our ﬁrst scenario, we have installed knark on a Red Hat 8.0 system with a
Linux 2.4.18 kernel. The results can be seen in Figure 4(a). The ﬁrst step is to
install knark. Since knark is loaded as a kernel module, we insert knark with the
insmod command. The kernel prints a message warning that knark.o does not
have an agreeable license. The second step is to hide a binary, which we have
placed in the /bin directory, called rootme. The rootme binary is part of the
knark rootkit and is used to execute binaries with root-level permissions from a
regular user account. The hidef utility is part of the knark rootkit and is used
to hide utilities. In the third step, we list ﬁles in the /bin directory that begin
with root. No ﬁles are shown indicating that our system cannot be trusted. The
fourth step is to install our trusted system call table with our tool recover kkit.
We use a read-only cdrom to run our tools. Now notice that upon listing ﬁles
again, the ﬁle rootme is seen. Trust has been re-established in the compromised
host.
5.2
Recovering from sucKIT
In our second scenario, we have installed sucKIT on a Red Hat 8.0 system. The
results can be seen in Figure 4(b). The steps are similar to that of knark. We
install the rootkit, show that some ﬁles are hidden when running the ls utility,
restore trust, and ﬁnally show that the hidden ﬁles appear. The sucKIT rootkit
hides ﬁles that have a certain extension, in our case “sk12”. The initsk12 ﬁle is
used in coordination with the init ﬁle to load sucKIT upon a reboot. Trust has
been re-established in a system that has been compromised with a kernel-level
rootkit that performs Table Redirection.
5.3
Recovering from r.tgz
In our third scenario, we have installed r.tgz on a Red Hat 6.2 system. The
results can be seen in Figure 4(c). This rootkit is an example of a real-world
scenario. In our scenario, an attacker has compromised the system and starts a
Trojan process with the all utility. The all utility is part of the r.tgz rootkit.
Initially, the process is hidden, as seen by the ﬁrst ps execution. Then, we install
our trusted system call table and issue the ps command again. You can see that
this time the hidden process shows up. We have successfully re-established trust
in a compromised host that was compromised in the wild.
6
Future Generation Rootkits and Recovery
6.1
Possible Penetration Techniques
We have discussed current generation rootkit kernel penetration techniques in
Section 3.1. In this section, we discuss kernel penetration techniques that we
have not seen in current rootkits while studying existing rootkits. Based on our
experience, we speculate that future generation rootkits may use these techniques
as more security features are added to kernels to prevent current generation
rootkits (i.e. do not allow module loading or access via /dev/mem). Some of these
techniques have been discussed in hacker communities; perhaps the techniques
are already in use, but we have not seen any evidence to sustain such claims.
– DMA — These type of kernel-level rootkits could patch running kernel code
with malicious code by programming an attached hardware device to use
direct memory access (DMA) to modify kernel code. The concept was intro-
duced in [15], but we have not seen any implementations.
– Swapped-out Pages — With root-level access, the attacker has raw access
attached hard disks. Memory pages are swapped to the hard disk when
memory becomes full. An attacker could use raw hard disk I/O to modify
swapped out pages in order to penetrate the kernel. Normally the kernel
code is never swapped to the disk, but an attacker could use indirect means
to penetrate the kernel through swapped out pages.
– Local Image — The kernel image resides as a binary ﬁle on the ﬁle system.
The attacker can modify the kernel image on disk and replace trusted code
with trojaned code. The next time the system is rebooted, the trojaned
kernel image will be loaded into memory, thus accomplishing the attacker’s
goal without modifying the running kernel.
– Distributed Image — The beginning of the chain of trust starts at the source
code and binary distributors. An attacker could compromise a kernel image
before it is ever installed on the system (i.e. replace code or binary ﬁles with
trojans before the kernel is distributed). As Thompson points out, one must
“trust the people who wrote the software,” or in this case trust the people
who distribute the kernel [16].
6.2
Kernel Targets for Kernel-Level Rootkits
The ﬁrst kernel-level rootkits developed have focused on trojaning the system
call table. The system call table is the gateway from user space to kernel space,
and so is a natural target and easily trojaned. Tools are being developed to detect
and counter these types of rootkits including our tools that allow recovery from
a certain class of kernel-level rootkits. As such developments continue, the arms
race is escalated. Attackers will continue to develop new means of trojaning the
kernel. Below we outline such targets for kernel-level rootkits.
– System Call Table and Interrupts — Section 3 gives an extensive discussion
of how the system call table is trojaned. Many widely examined rootkits use
this means of trojan when targeting the kernel. The interrupt subsystem is
a general target of the kernel as interrupts are often serviced on behalf of
processes.
– Redirecting Core Kernel Functionality — Core kernel functionality is a tar-
get of kernel-level rootkits. Examples include the scheduler, process handler,
authorization mechanisms, and the virtual ﬁle system mechanisms. The lat-
est adore rootkit, adore-ng, targets the virtual ﬁle system [17].
– Redirecting Extremity Functionality — Extremity functionality includes sub-
systems of the kernel such as the network drivers, hard disk controllers,
network stack, and so forth. For example, a rootkit may want to modify
the network stack so that the kernel listens for incoming requests from the
attacker, unbeknownst to the system administrator.
– Modifying Kernel Data Structures — Finally, the attacker may modify the
kernel data structures in addition or instead of modifying the kernel code.
For example, a kernel module can be hidden from the lsmod command by re-
moving it from the linked list that contains currently loaded kernel modules.
This speciﬁc technique is already in use today.
6.3
Using a Trusted Immutable Kernel Extension for Recovery
Our algorithm described in Section 4 works well for recovering from system call
table modiﬁcations but relies on one assumption that must be addressed. The
algorithm assumes that a core level of trust remains intact in the system that
would allow our program to function as expected. As long as the rootkit instal-
lation is well understood and known to be in accordance with our assumption,
the method is valid. However, we also address the case in which the full extent
of the rootkit is unknown.
Our solution to this problem is a Trusted Immutable Kernel Extension (TIKE)
as introduced in [18]. TIKE is an enabling extension that can be used to ensure
a trusted path exists within the system even if a kernel-level rootkit is installed.
One approach to building TIKE is through virtualization. The production guest
system is isolated from the host operating system. The production system may
be attacked, but we assume the host operating system is inaccessible from the
guest operating system. Therefore, our recovery algorithm can be carried out on
the host system, with some modiﬁcations, in order to incontestably re-establish
trust in the compromised system.
Techniques similar to our recovery method for system call tables can be
used for many classes of future generation kernel-level rootkits. Our approach is
summarized as follows: For the given kernel function redirection, copy a known
good function from a known good kernel image and redirect the running kernel
function to the known good function. Furthermore, since the level of trust that
is broken may be unknown, the recovery should take place through a mechanism
such as TIKE. The technique must be applied to the entire chain of trust in
order to be certain that trust has been restored. This technique does not cover
all possibilities, but does work for a given class of compromises. For example,
rootkits that modify kernel data structures are more diﬃcult to recover from.
7
Conclusions and Future Work
We have studied how trust can be broken in a system, speciﬁcally when a kernel-
level rootkit is installed. We have applied a methodology to characterize current
generation kernel-level rootkits in order to determine how to recover from them.
Kernel-level rootkits can be classiﬁed in terms of their Penetration method and
in terms of their system call table Modiﬁcation method. Modern kernel-level
rootkits can Penetrate the kernel from user space and use Table Redirection in
order to install a trojaned system call table.
After providing an understanding of kernel-level rootkits, we introduced tools
that can be used to recover from kernel-level rootkits. Our tool strips a known
good system call table from the provided kernel image and bootstraps the trusted
system call table into the running kernel. We then looked at future genera-
tion rootkits, further strengthened our algorithm with TIKE, and introduced a
methodology to recover from future generation rootkits.
We have begun to explore the notion of re-establishing trust in compro-
mised systems. We have shown that trust can be restored to a system, even if
a kernel-level rootkit has been installed. Continued work will include applying
our algorithm to more real-world compromises on the Georgia Tech honeynet to
help validate the approach. We will also extend our work to cover more than just
the system call table towards the entire system in order to establish techniques
for self-healing computer systems. Our current work has focused on the Linux
operating system, but future work will look into how our methods can be applied
to other widely used operating systems.
References
1. Levine, J., Culver, B., Owen, H.: A methodology for detecting new binary rootkit
exploits. In: Proceedings IEEE SoutheastCon 2003, (Ocho Rios, Jamaica)
2. : Georgia Tech honeynet research project. http://users.ece.gatech.edu/~owen/
Research/HoneyNet/HoneyNet_home.htm (2004)
3. Thimbleby, H., Anderson, S., Cairns, P.: A framework for modelling trojans and
computer virus infection. The Computer Journal 41 (1998) 445–458
4. Levine, J., Grizzard, J., Owen, H.: A methodology to detect and characterize kernel
level rootkit exploits involving redirection of the system call table. In: Proceedings
of Second IEEE International Information Assurance Workshop, IEEE (2004) 107–
125
5. Levine, J.G., Grizzard, J.B., Owen, H.L.: A methodology to characterize kernel
level rootkit exploits that overwrite the system call table. In: Proceedings of IEEE
SoutheastCon, IEEE (2004) 25–31
6. : Trojan horse programs and rootkits. Technical Report 08/03, National Infras-
tructure Security Co-Ordination Centre (2003)
7. Kim, G.H., Spaﬀord, E.H.:
The design and implementation of tripwire: A ﬁle
system integrity checker. In: ACM Conference on Computer and Communications
Security. (1994) 18–29
8. : The chkrootkit website. http://www.chkrootkit.org/ (2004)
9. : kern check.c. http://la-samhna.de/library/kern_check.c (2003)
10. kad (pseudo):
Handling interrupt descriptor table for fun and proﬁt, issue 59,
article 4. http://www.phrack.org (2002)
11. : WWJH.NET. http://wwjh.net (2003)
12. Bovet, D., Cesati, M.:
Understanding the Linux Kernel.
O’Reilly&Associates,
Sebastopol, CA (2003)
13. Levine, J.G., Grizzard, J.B., Owen, H.L.: Application of a methodology to charac-
terize rootkits retrieved from honeynets. In: Proceedings of 5th IEEE Information
Assurance Workshop. (2004) 15–21
14. : Re-establishing trust tools. http://users.ece.gatech.edu/~owen/Research/
trust_tools/trust_tools.htm (2003)
15. sd (pseudo), devik (pseudo): Linux on-the-ﬂy kernel patching without lkm, issue
58, article 7. http://www.phrack.org (2001)
16. Thompson, K.: Reﬂections on trusting trust. Commun. ACM 27 (1984) 761–763
17. Labs, S.:
Subverting the kernel.
http://la-samhna.de/library/rootkits/
basics.html (2004)
18. Grizzard, J.B., Levine, J.G., Owen, H.L.: Toward a trusted immutable kernel exten-
sion (TIKE) for self-healing systems: a virtual machine approach. In: Proceedings
of 5th IEEE Information Assurance Workshop. (2004) 444–445