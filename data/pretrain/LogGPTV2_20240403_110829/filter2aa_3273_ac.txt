### Kernel-Level Rootkit Recovery and Testing

In this section, we discuss the testing of our recovery tools against various kernel-level rootkits. We have selected three rootkits—knark, sucKIT, and r.tgz—to represent different penetration methods and system call table modification techniques. These rootkits can penetrate the kernel from both user space and kernel modules, and they employ both Entry Redirection and Table Redirection. Additionally, r.tgz is a real-world example captured on the Georgia Tech Honeynet, demonstrating the practical application of our research.

#### Test Results

**Figure 4: Testing `recover kkit` Tool on Three Kernel-Level Rootkits**

1. **Recovering from knark**
   - **System Setup:** Red Hat 8.0 with Linux 2.4.18 kernel.
   - **Steps:**
     1. Load the knark module using `insmod ./knark.o`.
     2. Hide the binary `/bin/rootme` using `./hidef /bin/rootme`.
     3. Verify that the file is hidden using `./ls /bin/root*`.
     4. Use `./recover kkit` to restore trust.
     5. Verify that the file is visible again using `./ls /bin/root*`.

   ```bash
   [root@h1 cd]# insmod ./knark.o
   Warning: loading knark.o will taint the kernel: no license
   See http://www.tux.org/lkml/#export-tainted for information about tainted modules
   Module knark loaded, with warnings
   [root@h1 cd]# ./hidef /bin/rootme
   hidef.c by Creed @ #hack.se 1999  Port to 2.4 by Cyberwinds
   #Irc.openprojects.net 2001
   [root@h1 cd]# ./ls /bin/root*
   ls: /bin/root*: No such file or directory
   [root@h1 cd]# ./recover kkit
   Trust has been Re-established!
   [root@h1 cd]# ./ls /bin/root*
   /bin/rootme
   ```

2. **Recovering from sucKIT**
   - **System Setup:** Red Hat 8.0 with Linux 2.4.18 kernel.
   - **Steps:**
     1. Initialize the rootkit using `./sk`.
     2. Verify that the files are hidden using `./ls /sbin/init*`.
     3. Use `./recover kkit` to restore trust.
     4. Verify that the files are visible again using `./ls /sbin/init*`.

   ```bash
   [root@h2 cd]# ./sk
   /dev/null RK Init: idt=0xc037d000, sct[]=0xc0302c30, kmalloc()=0xc0134fa0, gfp=0x0
   Z Init: Allocating kernel-code memory... Done, 12747 bytes, base=0xc8090000
   BD Init: Starting backdoor daemon... Done, pid=1435
   [root@h2 cd]# ./ls /sbin/init*
   /sbin/init
   /sbin/initlog
   [root@h2 cd]# ./recover kkit
   Trust has been Re-established!
   [root@h2 cd]# ./ls /sbin/init*
   /sbin/init
   /sbin/initlog
   /sbin/initsk12
   ```

3. **Recovering from r.tgz**
   - **System Setup:** Red Hat 6.2 with Linux 2.4.18 kernel.
   - **Steps:**
     1. Initialize the rootkit using `./all`.
     2. Verify that the process is hidden using `./ps -p 1213`.
     3. Use `./recover kkit` to restore trust.
     4. Verify that the process is visible again using `./ps -p 1213`.

   ```bash
   [root@h3 cd]# ./all
   [===== INKIT version 1.3a, Aug 20 2002  =====]
   [====== (c)oded by Inkubus PI:EMAIL> Anno Domini, 2002 ======]
   RK Init: idt=0xc027a000, sct[]=0xc0248928, kmalloc()=0xc0121b88, gfp=0x15
   Z Init: Allocating kernel-code memory...Done, 13147 bytes, base=0xc9498000
   BD Init: Starting backdoor daemon...Done, pid=1213
   [root@h3 cd]# ./ps -p 1213
   PID TTY TIME CMD
   [root@h3 www]# ./recover kkit
   Trust has been Re-established!
   [root@h3 cd]# ./ps -p 1213
   PID TTY TIME CMD
   1213 ? 00:00:00 all
   ```

### Future Generation Rootkits and Recovery

#### Possible Penetration Techniques

- **DMA (Direct Memory Access):** Rootkits could use DMA to modify running kernel code by programming an attached hardware device.
- **Swapped-out Pages:** Attackers with root access could modify swapped-out pages on the hard disk to penetrate the kernel.
- **Local Image:** The attacker can modify the kernel image on the file system, replacing trusted code with trojaned code.
- **Distributed Image:** The attacker could compromise the kernel image before it is distributed, ensuring the trojaned kernel is installed.

#### Kernel Targets for Kernel-Level Rootkits

- **System Call Table and Interrupts:** Many rootkits target the system call table and interrupt subsystem.
- **Redirecting Core Kernel Functionality:** This includes the scheduler, process handler, authorization mechanisms, and virtual file system.
- **Redirecting Extremity Functionality:** This involves modifying network drivers, hard disk controllers, and the network stack.
- **Modifying Kernel Data Structures:** Attackers may alter kernel data structures to hide their activities.

#### Using a Trusted Immutable Kernel Extension for Recovery

Our recovery algorithm assumes a core level of trust remains intact. To address unknown rootkit installations, we propose a Trusted Immutable Kernel Extension (TIKE). TIKE ensures a trusted path within the system, even if a kernel-level rootkit is installed. One approach to implementing TIKE is through virtualization, isolating the production guest system from the host operating system. This allows our recovery algorithm to be executed on the host system, re-establishing trust in the compromised system.

### Conclusions and Future Work

We have studied how trust can be broken by kernel-level rootkits and developed tools to recover from them. Our tool strips a known good system call table from the provided kernel image and bootstraps the trusted system call table into the running kernel. We have also introduced TIKE to strengthen our recovery method and discussed potential targets for future generation rootkits.

Future work will include applying our algorithm to more real-world compromises on the Georgia Tech honeynet and extending our work to cover the entire system for self-healing computer systems. We will also explore the application of our methods to other widely used operating systems.

### References

1. Levine, J., Culver, B., Owen, H.: A methodology for detecting new binary rootkit exploits. In: Proceedings IEEE SoutheastCon 2003, (Ocho Rios, Jamaica)
2. Georgia Tech honeynet research project. <http://users.ece.gatech.edu/~owen/Research/HoneyNet/HoneyNet_home.htm> (2004)
3. Thimbleby, H., Anderson, S., Cairns, P.: A framework for modelling trojans and computer virus infection. The Computer Journal 41 (1998) 445–458
4. Levine, J., Grizzard, J., Owen, H.: A methodology to detect and characterize kernel level rootkit exploits involving redirection of the system call table. In: Proceedings of Second IEEE International Information Assurance Workshop, IEEE (2004) 107–125
5. Levine, J.G., Grizzard, J.B., Owen, H.L.: A methodology to characterize kernel level rootkit exploits that overwrite the system call table. In: Proceedings of IEEE SoutheastCon, IEEE (2004) 25–31
6. Trojan horse programs and rootkits. Technical Report 08/03, National Infrastructure Security Co-Ordination Centre (2003)
7. Kim, G.H., Spaﬀord, E.H.: The design and implementation of tripwire: A file system integrity checker. In: ACM Conference on Computer and Communications Security. (1994) 18–29
8. The chkrootkit website. <http://www.chkrootkit.org/> (2004)
9. kern check.c. <http://la-samhna.de/library/kern_check.c> (2003)
10. kad (pseudo): Handling interrupt descriptor table for fun and profit, issue 59, article 4. <http://www.phrack.org> (2002)
11. WWJH.NET. <http://wwjh.net> (2003)
12. Bovet, D., Cesati, M.: Understanding the Linux Kernel. O’Reilly&Associates, Sebastopol, CA (2003)
13. Levine, J.G., Grizzard, J.B., Owen, H.L.: Application of a methodology to characterize rootkits retrieved from honeynets. In: Proceedings of 5th IEEE Information Assurance Workshop. (2004) 15–21
14. Re-establishing trust tools. <http://users.ece.gatech.edu/~owen/Research/trust_tools/trust_tools.htm> (2003)
15. sd (pseudo), devik (pseudo): Linux on-the-fly kernel patching without lkm, issue 58, article 7. <http://www.phrack.org> (2001)
16. Thompson, K.: Reflections on trusting trust. Commun. ACM 27 (1984) 761–763
17. Labs, S.: Subverting the kernel. <http://la-samhna.de/library/rootkits/basics.html> (2004)
18. Grizzard, J.B., Levine, J.G., Owen, H.L.: Toward a trusted immutable kernel extension (TIKE) for self-healing systems: a virtual machine approach. In: Proceedings of 5th IEEE Information Assurance Workshop. (2004) 444–445