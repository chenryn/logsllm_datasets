.TH XXD 1 "August 1996" "Manual page for xxd"
.\"
.\" 21st May 1996
.\" Man page author:
.\"    Tony Nugent  
.\"    Changes by Bram Moolenaar 
.SH NAME
.I xxd
\- 以十六进制形式表示
.SH "总览 (SYNOPSIS)"
.B xxd
\-h[elp]
.br
.B xxd
[options] [infile [outfile]]
.br
.B xxd
\-r[evert] [options] [infile [outfile]]
.SH "描述 (DESCRIPTION)"
.I xxd
建立一个指定文件或者标准输入的十六进制转储，同时也可以
把十六进制转储转换成原来的二进制形式。同
.BR uuencode(1)
和
.BR uudecode(1)
一样，它也可以把二进制数据转换成 ASCII 表示形式，这样电子邮件就可以
安全的传输。但是它有一个优点，就是可以把解码后的结果输出到
标准输出。同时它还可以用来给二进制文件打补丁。
.SH "选项 (OPTIONS)"
如果没有给定
.I infile
就用标准输入。如果
.I infile
是一个
.RB “\-”
字符，也从标准输入读入。如果没有给定
.I outfile
（或者它的文件名是 一个
.RB \` \- \'
字符），结果将输出至标准输出。
.PP
注意我们用的是一个很“懒”的解析器，它只检查选项的第一个字符，
除非这个选项有参数。在一个单字符的选项和它的参数之间的空格
可有可无. 选项的 参数 可以 用 十进制, 十六进制 或者 八进制的 形式 指定.
也就是说
.RB \-c8 ,
.BR "\-c 8" ,
.B \-c 010
和
.B \-cols 8
是 等价的.
.PP
.TP
.IR \-a " | " \-autoskip
打开/关闭 autoskip: 用一个 单独的 '*' 来 代替 空行. 默认 关闭.
.TP
.IR \-b " | " \-bits
转到 比特(二进制 数字) 模式, 而 不是 十六进制 模式. 在 这种 模式 下,
每个 字符 被 表示成 八个 0/1 的 数字, 而 不是 一般的 十六进制 形式.
每 一行 都 以 一个 用 十六进制 形式 表示的 行号, 后面 是 ascii (或者 ebcdic)
形式 开头. 命令行 选项 \-r, \-p, \-i 在 这个 模式下 不起作用.
.TP
.IR "\-c cols " | " \-cols cols"
.IR "\-c cols " | " \-cols cols"
每行 表示
.RI 
个 字符. 默认 16 (\-i: 12, \-ps: 30, \-b: 6). 最多 256.
.TP
.IR \-E " | " \-EBCDIC
把 右手边的 字符 编码 从 ASCII 变为 EBCDIC. 这个 并不 改变 其 十六进制
表示 形式. 同 \-r, \-p 或者 \-i 一起用 是 没有 意义的.
.TP
.IR "\-g bytes " | " \-groupsize bytes"
每
.RI 
个 字符 (每 两个 十六进制 字符 或者 八个 二进制 数字) 之间 用 一个 空格 隔开.
用
.I \-g 0
禁止 分组. 在 普通 模式 中
.RI  默认 是 " 2
在 二进制 模式 中 是 \fI1\fP. 分组 并不 适用于 postscript 或者
include style 选项.
.TP
.IR \-h " | " \-help
显示 可用 命令 概述 并且 退出. 不做 其它 任何 事情.
.TP
.IR \-i " | " \-include
输出 为 C 语言的 包含 文件 形式. 除非 xxd 从 标准输入 读入, 不然 会 输出 一个
完整的 静态 数组 定义(与 输入 文件 同名).
.TP
.IR "\-l len " | " \-len len"
输出
.RI  
个 字符 后 停止.
.TP
.IR \-p " | " \-ps " | " \-postscript " | " \-plain
以 postscript 的 连续 十六进制 转储 输出. 这 也叫做 纯 十六进制 转储.
.TP
.IR \-r " | " \-revert
逆向 操作: 把 十六进制 转储 转换 (或者 打补丁) 成 二进制 形式. 如果 不 输出 到
标准输出, xxd 并不把 输出 文件 截断, 而是 直接 写到 输出 文件. 用
.I \-r \-p
来 从 一个 没有 行号 没有 某种 列格式 的 纯 十六进制 转储 读入. 附加的 空格
和 换行 可以 出现 在 任何 地方.
.TP
.I \-seek offset
用在
.I \-r
之后: 会在 当前 文件的 偏移量 上 增加
.RI  .
.TP
.I \-s [\+][\-]seek
从 infile 的 绝对 或者 相对 偏移量
.RI 
开始.
\fI\+ \fR 表示 相对于 标准 输入 当前的 位置 (如果 不是 标准输入 就
没有 意义了). \fI\- \fR 表示 从 文件 末尾 (如果 和 \fI \+ \fR 连用:
从 标准输入 当前 位置) 向前 数 一些 字符, 从 那个
地方 开始. 如果 没有 \-s 选项, xxd 从 当前 位置 开始.
.TP
.I \-u
用大写字母. 默认的是小写字母.
.TP
.IR \-v " | " \-version
显示 版本 字符串.
.SH "告诫 (CAVEATS)"
.PP
.I xxd \-r
在 对待 行号 上 有一些 地方 值得 注意. 如过 输出 文件 可以 定位,
那么 在 十六进制 文件 中的 行首的 行号 可以 重叠, 顺序 可以 打乱,
还 可以 略去 一些 行号. 这种 情况 下, xxd 会 用 lseek(2) 来 定位.
如果 输出 文件 不可以 定位, 那么 行号 可以 不连续, 但是 必须 按
顺序, 这种 情况 下, 中间 会 插入 null 字符.
.PP
.I xxd \-r
从不 输出 解析 错误. 错误 会 被跳过.
.PP
在 编辑 十六进制 文件时 要 注意
.I xxd \-r
在 读入 足够列 之后 会跳过 本行 后面 所有的 数据 (见 选项 \-c).
这 就是说 对可打印的 ASCII (或者 EBCDIC) 的修改 都会被 忽略. 用
xxd \-r \-p 把一个 纯十六进制 转储文件 (或者 postscript) 恢复 成
二进制文件 与 列数 是否 正确 没有 什么 关系, 它会 解释 所有 看起来
像 两个 十六进制的 数字.
.PP
请 注意
.br
\fI% xxd \-i file\fR
.br
和
.br
\fI% xxd \-i \ plain_copy; xxd \-s 0 > hex_copy'  hex_snippet'  hex_snippet' < file
.PP
可是, 这种 情况 很少 发生, 我们 也 很少 需要用 `+'. 当用了 \-s 是, 作者 比较
喜欢 用 strace(1) 或者 truss(1) 去 监控 xxd 的 行为.
.SH "例子 (EXAMPLES)"
.PP
.br
(译者: 实际 输出 可能 和 例子 有 一些 出入, 只要 理解 其 意思 就行了)
.br
显示 \fBfile\fP 除了 前 三行 (十六进制 的 0x30) 的 所有 内容.
.br