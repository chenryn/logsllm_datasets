title:Adaptive Software Rejuvenation: Degradation Model and Rejuvenation
Scheme
author:Yujuan Bao and
Xiaobai Sun and
Kishor S. Trivedi
Adaptive Software Rejuvenation: Degradation Model and Rejuvenation Scheme
Yujuan Bao, Xiaobai Sun
Kishor S. Trivedi
Department of Computer Science,
Department of Electrical and Computer Engineering,
Duke University,
Durham, NC 27708
{byj, xiaobai}@cs.duke.edu
Duke University,
Durham, NC 27708
PI:EMAIL
Abstract
collection and rejuvenation.
We present a framework of adaptive estimation and re-
juvenation of software system performance in the presence
of aging sources. The framework speciﬁes that a degrada-
tion model not only describe an aging process but also en-
able the adaptation of model-based performance estimates
to on-line measurements of data pertaining to the aging pro-
cess. The adaptive estimation uses model-based a priori es-
timation and obtains a posteriori estimation based on the
data measurements. With the adaptive estimation, the reju-
venation policy determines the time epochs for data collec-
tion and rejuvenation according to system dynamics. In the
speciﬁc context of resource leaks previously assumed to lead
to aging, we present a non-homogeneous Markov model to
explicitly establish a connection between resource leaks and
the failure rate. We demonstrate an increasing failure rate
in the presence of resource leaks.
1. Introduction: the Adaptation Problem
We present a framework for adaptive estimation and re-
juvenation of software system performance in the presence
of aging sources. We are concerned with system resource
loss, in particular, memory leakage. Memory is indispens-
able in computer and communication systems. Memory
leakage is a typical aging source for server systems due to
software bugs in the client applications that use server re-
sources. Our framework for adaptive estimation and rejuve-
nation consists of three integral components: a degradation
model, an adaptive estimation scheme, and an adaptive reju-
venation scheduling policy. The degradation model allows
adaptation of model-based performance estimates to on-line
measurements of data pertaining to the aging process. The
adaptive estimation scheme uses the model-based a priori
estimation and obtains a posteriori estimation based on the
measurements. With the adaptive estimation, the rejuve-
nation scheduling policy determines time epochs for data-
The concept and framework of adaptive software rejuve-
nation (ASR) is a natural evolution of software rejuvenation
efforts. In the short time since the concept and analysis of
software rejuvenation was introduced by Huang et al.
in
1995 [9], degradation analysis and rejuvenation techniques
have been advanced quickly and are widely used in vari-
ous applications such as spacecraft systems [12], transac-
tion processing systems [3], and telecommunications sys-
tems [1]. Software rejuvenation has been posed as an opti-
mization problem, with an objective to minimize both the
risk of preventable failures and the cost of rejuvenation;
however, the optimization process has been changed with
improvements in modeling, degradation estimation and re-
juvenation scheduling.
The model for a degradation-rejuvenation process pre-
sented by Huang et al. [9] is a continuous time Markov
chain (CTMC). It has four states:
the healthy state, the
degradation state, the failure-and-recovery state, and the re-
juvenation state. The model assumes the knowledge of a
failure proﬁle, which includes the distribution of time to the
next failure, the cost of reactive recovery after a failure, the
distribution of time from the healthy state to the degradation
state, and the distribution of time to carry out rejuvenation.
Garg et al. [6] modeled the process as a Markov regenera-
tive stochastic Petri net (MRSPN) to deal with deterministic
intervals between successive rejuvenations. In their subse-
quent work, the aging effect was classiﬁed into crash/hang
failures and gradual performance degradation [7], while the
instantaneous system workload was taken into account. Us-
ing semi-Markov process models, Dohi et al. [4] presented
a non-parametric statistical method for determining the op-
timal rejuvenation schedule. Bobbio et al. [2] introduced a
discrete degradation index to reﬁne the description of the
degradation state. In addition, they provided degradation-
index-based policies to ﬁne tune the rejuvenation optimiza-
tion process. Most of these models have a common assump-
tion that the knowledge of a failure proﬁle is available in a
simple or complex form. In other words, these models de-
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:30:24 UTC from IEEE Xplore.  Restrictions apply. 
scribe only the relationship between the failure proﬁle and
certain performance optimization objectives, separating this
relationship from the proﬁling process. For a long-term and
steady-running system, a failure proﬁle may be obtained
over time by a monitoring and learning process.
In real-
ity, computer and communication systems undergo updates
on both the server and client sides while maintaining system
operations.
In the measurement-based approaches, one attempts to
capture the dynamic changes in a system by monitoring
certain data that are related to system performance degra-
dation. For example, it is reported [8] that an SNMP-based
resource monitoring tool is used to monitor data on resource
usage at regular intervals. Statistical trend detection tech-
niques [11] are then applied to analyze the collected data
and provide estimated time to resource exhaustion. The
workload is also taken into account in the improved trend
analysis [13]. There are remaining problems. Primarily, the
on-line approach to coupling the estimation of performance
degradation with the estimation of prescribed model param-
eters makes rejuvenation decisions difﬁcult to make. Re-
source usage depends on time, workload condition as well
as aging effect. Rejuvenation operations help only when
the main cause of resource exhaustion is resource leak-
age; they would have adverse effect otherwise. Another
problem is that the on-line models tend to be simple and
overly sensitive to local temporary changes. In summary,
the model-based approaches put more weight on long-term
static behavior of a system and separate model-based es-
timation from model construction; the measurement-based
approaches put more weight on local dynamics and couple
the model construction with the model-based estimation.
Our ASR framework is developed from these early ap-
proaches but differentiate from them in integrating model
construction, model-based estimates and on-line inspection.
We separate model construction and model-based estima-
tion but adapt model-based estimation to the measured data
that are pertinent to resource leakage, in particular, mem-
ory leakage. We introduce a methodology for developing
degradation models that enable such adaptation. It is worth
mentioning that based on our model, the memory loss is
related directly to the failure rate. We further demonstrate
that the failure rate increases over time as the leaked re-
source accumulates, i.e., memory leakage is indeed an ag-
ing source. We present a backward analysis method that
underlies our adaptive estimation scheme. In addition, we
introduce a scheme to design rejuvenation policies based on
adapted estimates.
2. Degradation Model and Analysis
We develop a model for performance degradation due to
the gradual loss of system resources, especially, the mem-
ory resource. In a client-server system, for example, every
client process issues memory requests at varying points in
time. An amount of memory is granted to each new re-
quest (when there is enough memory available), held by the
requesting process for a period of time, and presumably re-
leased back to the system resource reservoir when it is no
longer in use. A memory leak occurs when the amount of
allocated memory is not fully released. The available mem-
ory space is gradually reduced as such resource leaks ac-
cumulate over time. As a consequence, a resource request
that would have been granted in the leak-less situation may
not be granted when the system suffers from memory re-
source leaks. Our model accommodates performance anal-
ysis for both the leak-less case and the leak-present case.
More importantly, the model can be used for the purpose
of adapting performance estimates to on-line data measure-
ments. Speciﬁcally, the model relates system performance
to resource requests, releases or resource holding intervals
and memory leaks. These quantities can be monitored and
modeled directly from obtainable data measurements [5].
We model an operating software system as a CTMC.
Consider ﬁrst the ideal, leak-less case, Figure 1. Denote
sink
λξ
[0]
[0]ξ
λ(1−       )
λξ[1]
λξ[2]
λ(1−       )
[1]
ξ
0
1
µ
1
[2]ξ
λ(1−       )
2
µ3
µ2
3
 

 

 

 

  

  

n
µn
µ
n+1
 

 

  

  

  

  

Figure 1. The leak-free model
by M the initial total amount of available memory. The
memory unit is application-speciﬁc. The system is in work-
load state k, k ≥ 0, when there are k independent processes
holding a portion of the resource. The total number of states
is practically ﬁnite. We assume that the memory requests
are independent of each other and arrive from a Poisson
process with rate λ. A request is granted when sufﬁcient
memory is available, else the system is considered to have
failed. In other words, each incoming request may cause
the system to transit to the sink state when it asks for more
memory than the available amount. Denote by ξ[k] the con-
ditional probability that the system fails in state k upon the
arrival of a new request. The amount of each memory re-
quest is modeled as a continuous random variable with the
density function g(x). The allocated resource is held for a
random period of time, which is dependent upon the pro-
cessing or service rate and determines the resource release
rate. When the holding time per request is exponentially
distributed with rate µ, the release rate µk at state is equal
to k µ. Here, the time unit is also application-speciﬁc.
Provided with the speciﬁcation of request arrival rate λ,
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:30:24 UTC from IEEE Xplore.  Restrictions apply. 
service rates µk and the conditional probabilities ξ[k] of a
CTMC in Figure 1, the failure rate of the system can be
obtained via the transient solution to the Kolmogorov equa-
tions for the CTMC,
dπsink(t)
dt
dπ0(t)
dt
dπk(t)
dt
(cid:1)
k
ξ[k] πk(t),
= λ
= −λπ0(t) + µ1π1(t),
= λ (1 − ξ[k − 1]) πk−1(t)
−(λ + µk)πk(t)
+µk+1πk+1(t),
k > 0,
(1)
ξ[k]
=
where α is a natural number and γ is a nonnegative real
number, we have
g[k](x) =
G[k](x) = e
−γx
−1e
(γx)kαx
(kα − 1)!
∞(cid:1)
−γx
kα+α−1(cid:1)
i=αk
i!
(γM)i
(γx)i
,
,
∞(cid:1)
i=αk
i!
/
i=kα
(7)
(γM)i
i!
.
We see from the expression that for every ﬁxed state k,
∂ξ[k]/∂M  1, i.e., the conditional proba-
bility from state k to the sink state increases as M decreases.
When ξ[k] are not easily described in a closed form expres-
sion, we resort to fast numerical algorithms.
Provided with the speciﬁcation of the leak-free model,
(cid:2)
one can derive system failure rate h(t) as in (2) and the
system reliability R(t) = 1 − πsink(t) =
k πk(t). Con-
versely, given a speciﬁed requirement on system reliability,
the model can be used to derive a lower bound on the to-
tal amount M of system resource to meet the performance
requirement.
We model
a
leak-present
homogeneous CTMC, see Figure 2.
system with a non-
The conditional
λ
ξ[0,l(t)]
sink
[2,l(t)]
λξ[1,l(t)]
 ξ
ξλ
λ(1−             )
[1,l(t)]
2
µ2
ξ[0,l(t)]
λ(1−            )
1
µ
1
ξ[2,l(t)]
λ(1−             )
3
µ3
 

 
