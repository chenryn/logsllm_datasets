---
## Page 182
值得注意的是，对象所属类为PSACB。PSACB定义了对象如何被创建。在Pyro服务器端，
字。当这个属性被保留时，cb()方法不保留。
出运行情况的信息。下面是XML-RPC服务器的输出结果：
服务器的输出结果时，这会更容易理解。记住，cb()函数包含一些print语句，能够输
Pyro的实现方法能够成功执行，但是XML-RPC的实现方法执行失败并返回一个追踪
例中，都返回PSA回调字符串。
调用Pyro和XML-RPC的cb()函数都需要在传递给它们的对象上调用cb()。在这两个示
168
下面是Pyro服务器的输出结果：
（traceback）。追踪返回的最后一行表明字典对象没有cb属性。当我们展示XML-RPC
OBJECT: 
localhost -
OBJECT.
xmlrpclib.Fault: >
The sre module is deprecated, please import re.
import sys,time，sre,os,weakref
File“
File
******************
., e o s
verbose=self.
return self.
第5章
PSA callback
class
[17/Apr/2008 16:39:02] "POST /RPC2 HTTP/1.0" 200 -
：:
www.TopSage.com
args)
line 1201,in request
AO
---
## Page 183
known_host。之后就连接到sSH服务器上了。接下来就没有什么特别复杂的步骤了，尤
#!/usr/bin/env python
例5-9：连接到SSH服务器并远程执行命令
服务器，并完成一些SSH任务。例5-9是一个连接到SSH服务器并执行简单命令的示例。
SSH2协议就是通过名为paramkio的Python库实现的。通过Python代码，可以连接到SSH
这样做除了能够使用SSH协议的全部功能外，还能够使用Python的全部功能。
的名字，因此也可以将SSH视为一个工具。SSH允许你安全地连接到远程服务器，执行
SSH是一个极其强大并被广泛使用的协议。由于大多数协议的实现都会与协议有相同
SSH
Pyro或许才是更好的选择。
限制太多，也不介意安装外部库，而且不介意仅使用Python一种语言，那么对你来说
操作，那么或许就会认为XML-RPC是一个不错的选择了。另一方面，如果嫌XML-RPC
RPC的一些限制，就可以选择XML-RPC。如果再考虑到它能够与其他语言方便地实现互
总之，如果想要一个简单的RPC解决方案，而不希望有外部依赖，并且能够容忍XML
常重要。Pyro使用Python标准的pickle来序列化对象，因此，它与Pyro非常相似。
我们不得不包括客户端使用的相同的代码。Pyro服务器需要导人客户端代码，这一点非
其在熟悉了SSH之后。
了一个SSHClient对象。然后告诉它加载host keys。对于Linux系统，host keys来自文件
从上面的代码可以看到，我们先加载了paramiko模块，定义了三个变量。接下来，创建
password=
port = 22
import paramiko
如果有一个命令行的SSH工具，为什么还要通过编写脚本来使用SSH协议呢？主要原因是
shell命令，传输文件，并在连接双方进行端口转发。
username
hostname=
s.close()
print stdout.read()
'192.168.1.15
=
XXXAAAXXX,
_main.
：
username,password)
www.TopSage.com
网络丨169
---
## Page 184
上ifconfig命令的执行结果。.
要，执行命令的机器IP地址与使用SSH调用连接的IP地址是相同的。
返回三个与执行命令相关的文件句柄：标准输入、标准输出和标准错误。为了演示的需
现在，我们准备好远程执行命令了。对exec_command()的调用会执行传递给它的命令并
#!/usr/bin/env python
import paramiko
例5-10：从SSH服务器上检索文件
件，应使用put()方法。
个特殊示例演示的仅是使用get()方法从远程主机下载文件。如果想向远程主机上传文
import os
例5-10演示了如何使用paramiko的SFTP来实现远程主机与本地主机之前的文件传输。这
这看起来与在本地机器上执行ifconfig命令的结果非常相似，只是IP地址不同而已。
170
if
username
port=22
hostname
files = sftp.listdir(dir_path)
sftp = paramiko.SFTPClient.from_transport(t)
etho
t.close()
for f in files:
t.connect(username=username:password=password)
sftp.get(os.path.join(dir_path, f), f)
第5章
print:
'192.168.1.15'
'/home/jmjones/logs'
'xxXYYYxxx'
'jmjones'
RX bytes:94585734 (90.2 MiB) TX bytes:94585734 (90.2 MiB)
inet addr:192.168.1.15 Bcast:192.168.1.255 Mask:255.255.255.0
Link encap:Ethernet HWaddr XX:XX:XX:XX:XX:XX
'Retrieving',
inet addr:127.0.0.1
Link encap:Local Loopback
inet6addr:xx00::000:x0xx:xx0x:0x00/64 Scope:Link
（bytes:1427939179 (1.3 GiB) TX bytes:2940899219 (2.7 GiB)
 packets:123571 errors:0 dropped:0 overruns:0 carrier:0
het6 addr:
packets:123571 errors:0 dropped:0 overruns:0 frame:0
packets:9667336 errors:0 dropped:0 overruns:0 frame:0
_main_
LOOPBACK RUNNING MTU:16436 MetriC:1
"：
::1/128
Mask:255.0.0.0
www.TopSage.com
下面是远程服务器
---
## Page 185
#!/usr/bin/env python
#1/usr/bin/env python
全面独立的解决方案需要以复杂性为代价。在使用Twisted若干次之后，你会觉得它非常
Twisted是一个事件驱动的Python网络框架，可以处理大量与网络相关的任务类型。一个
Twisted
t.close()
pkey_file :
hostname='192.168.1.15'
import paramiko
例5-12：从SSH服务器上检索文件
例5-12是一个sftp脚本的修改版本，其中也使用了RSA加密。
hostname='192.168.1.15'
import paramiko
例5-11：连接SSH服务器并远程执行命令-使用私钥
改，其中使用了RSA加密。
如果需要使用公钥/私钥而不是密码该怎么做呢？例5-11是对上述远程执行命令程序的修
if
port=22
import.os
if
port=22
name
key = paramiko.RSAKey.from_private_key_file(pkey_file)
name_
tconnect(username=username,pkey=key)
s.close()
print stdout.read()
S=paramiko.SSHClient()
,sauofuf.
'/home/jmjones/.ssh/id_rsa'
/home/jmjones/logs'
/home/jmjones/.ssh/id_rsa'
_main
f
www.TopSage.com
网络丨171
PDG
---
## Page 186
#!/usr/bin/envpython
class PortCheckerProtocol(protocol.Protocol):
import sys
from twisted.internet import reactor, protocol
例5-13：Twisted实现端口检测
连接如何进行操作。运行时，每一个连接都会创建一个协议实例。deferred是一种链接协
责创建新的协议实例。每一个factory实例可以产生一种类型的协议。协议定义了对指定
reactor是Twisted应用的主事件循环。reactor操纵事件分发，网络通信和线程。factory负
念。最基本的概念包括反应器（reactor），工厂（factory），协议和延迟（deferred）。
该代码后，会理解Twisted事件驱动的本质。在开始看示例之前，应该了解一些基本概
例5-13是用Twisted实现的一个端口检测程序。这是一个很基本的事例，但是在我们学习
行处理。你的工作将集中在编写实现对各类事件处理的代码。
够使代码更易于复用。此外，使用Twisted，不需要考虑对一些低层的连接和错误操作进
小问题。而Twisted的网络连接能够帮助你无须考虑连接时需要的功能。这两个优势都能
通过Twisted可以获得什么优势呢？Twisted框架能够帮助你将要处理的问题分成若干个
接以及数据处理等较低级的细节问题上，而是集中在编写任务的处理程序。
Twisted是一个事件驱动的网络，这意味着代码的编写不是集中在实现初始连接、断开连
172
同行为方式。
非常不错的书，可以帮助我们解决学习过程中的许多问题。
Abe Fettig(O'Reilly)编著的《Twisted Network Programming Essentials》是一本人门级的
易地将固有思维转换到Twisted方式，那么学习Twisted会是一笔十分有价值的投资。由
尽管如此，我们还是强烈建议你去熟悉它，并且考虑一下它是否适合你。如果可以很容
程，以至于要找到一个能解决某一特定问题的切入点都有些困难。
好用，但是刚开始理解它确定存在困难。进一步说，学习Twisted是一个如此庞大的工
def _init_(self):
水滴，而不是一条沿着山坡流淌的河流。Twisted引入了新的组件：事件反应器
代码则完全不同。作为一种异步方式，或许有人会说它更像是在低重力环境下的
流淌，自上而下。这样的代码非常容易理解，编写和调试也十分容易。Twisted
立起不同的逻辑流。
大多数写代码的人对一个程序或脚本的逻辑流有非常强烈的直觉：就像水在山间
(reactor）和friend。使用Twisted创建和调试代码，必须放弃之前的程序逻辑；建
第5章
www.TopSage.com
Twisted
---
## Page 187
接到一台服务器的指定端口，然后使用PortCheckerClientFactory来帮助分发事
类的默认行为。在一个客户端连接失败之后，我们希望输出相关信息并停止reactor。
法，也是我们为factory定义的唯一方法。通过定义与factory类相关的方法，可以重载
factory试图创建一个连接，但是失败了，factory的clientConnectionFailed()方法
的protocol类属性，将PortCheckerClientFactory绑定到PortCheckerProtocol。如果
ClientFactory。我们通过将PortCheckerProtocol指定到PortCheckerClientFactory
if _name_
class PortCheckerClientFactory(protocol.ClientFactory):
总结流程顺序，我们在给出一个指令之后启动reactor。在这个示例中，指令就是连
如果没有告诉reactor运行，什么也不会发生。
令行获得的。在告诉reactor连接某一服务器的某一端口之后，再告诉reactor运行起来。
Twisted 的reactor对指定的主机和端口进行连接。主机名和端口号是使用指定的工厂从命
在这个示例的主要部分，我们先创建了一个PortCheckerClientFactory实例，然后告诉
生时，Twisted调用适合的方法来处理事件，这被称为事件处理函数。
驱动本质。创建连接即为一个事件。同样，创建连接失败也是一个事件。当这些事件发
在这个示例中，connectionMade(）和clientConnectionFailed()展示了Twisted的事件
信息并且停止了reactor（一会儿我们会介绍reactor）。
连接，Twisted会调用该协议的connectionMade()方法。可以看到，它输出了一个简单的
议类都通用的方法。通过自己定义该方法，我们重载了默认行为。一旦成功建立了一个
PortCheckerProtocol类的一个方法：connectionMadw（）。这是一个对所有的Twisted协
且该服务器端口正是我们所检测的，该类的一个实例就会被创建。这里仅定义了
PortcheckerProtocol是之前讨论过的一个协议。一且建立了一个到服务器的连接
将被调用。ClientConnectionFailed()是一个对所有Twisted 工厂来说都十分常见的方
值得注意的是我们定义了Twisted类的两个子类PortCheckerProtocol和PortChecker-
reactor.run()
reactor.connectTCP(host, int(port), factory)
print "Testing %s" % sys.argv[1]
protocol：
def connectionMade(self):
host，
reactor.stop()
reactor.stop()
print "Connection made"
print "Created a new protocol"
=PortCheckerProtocol
_main_':
www.TopSage.com
网络丨173
---
## Page 188
#!/usr/bin/python
例5-15：Twisted实现Perspective Broker客户端
主要部分，我们使用Perspective Broker绑定端口9876并返回reactor。
remote_ls_boom()能够实现与remote_1s()相同功能，但不会理会异常操作。在示例的
和remote_ls_boom()。remote_1s()方法会简单地返回一个指定目录的列表。
例5-14:Twisted实现PerspectiveBroker服务器
实现过了。首先，我们看服务器端实现，
制。这个示例是对远程ls服务器的实现，在这一章的前面部分已经在XML-RPC和Pyro中
例5-14是一个使用Perspective Broker的示例，Perspective Broker是Twisted独有的RPC机
5-14将详细介绍deferred）
可以将从一次使用得来的结果传递到下一次。在Twisted中这一点往往比较难理解。，（例
动作的承诺。callback指定了一个定义成功执行动作的方法。deferred可以连续使用，并
的关键概念在本例中没有涉及，那就是deferred和callback。一个deferred表示执行请求
这是一个非常基本的示例，但是它显示了Twisted事件处理的本质。有一个Twisted编程
失败，相应事件的处理函数都会关闭reactor，并且程序会停止执行。
PortcheckerProtocol，然后在该实例上调用connectionMade()方法。不管连接成功或
的clientConnectionFailed()方法。如果连接成功，工厂会创建一个协议实例，
的Perspective Broker (PB)类。这个示例仅在这个类中定义了两个方法：remote_1s()
这个示例定义了一个PBDirLister类。这是一个当客户端接到服务器时，作为远端对象
class PBDirLister(pb.Root):
from twisted.spread import pb
import os
件。如果连接到指定主机和端口失败，事件循环会调用portCheckerClientFactory
174
例5-15 不是顺序的，它调用了remote_ls()。
from.twisted.internetimportreactor
reactor.run()
def remote_ls(self, directory):
def remote_ls_boom(self,directory):
第5章
except osError:
try:
return os.listdir(directory)
return[]
www.TopSage.com
---
## Page 189
下面是客户端代码运行示例：
print_ls（），respective方法将关闭reactor。
函数，它让我们知道在这一过程中是否出现了错误。口旦有错误发生或是管道达到了
一步中创建的remote_Is（）中。事实上，是reactor将远端调用的结果传递到print_1s（）
管道连接。
远端对象的控制。这实际上是一个deferred，因此，可以通过调用addcallback（）来进行