### Logical Communication Requirements for DPASA Clients

#### Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005)
**1063-9527/05 $20.00 Â© 2005 IEEE**
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021 at 12:13:22 UTC from IEEE Xplore. Restrictions apply.**

### Policy Rules Required
- **VPN**
- **ADF**
- **CSA**
- **SELinux**
- **JVM**

| Policy Rule | Description |
|-------------|-------------|
| VPN to EB [EA] | Establish a VPN connection from EA to EB. |
| VPN from EA [EBi] | Establish a VPN connection from EBi to EA. |
| VPG from A to B for c [A, Bi] | Virtual Private Gateway from A to B for communication c. |
| Allow access from A for c [B1, B4] | Permit communication c from A to B1 and B4. |
| Allow access from A for c [B2, B3] | Permit communication c from A to B2 and B3. |
| Allow access to Bi for c [A] | Permit communication c from A to Bi. |
| Allow access from A for c [Bi] | Permit communication c from A to Bi. |

**Table 1. Policies affected by one logical network communication rule to allow communication c from client A to core B.**

In this context, "CLIENT" represents a group of about a dozen client hosts. The other nodes, such as those starting with 'q1', are individual hosts, while nodes without this prefix represent multiple hosts in the three other quads. For example, the ADF Policy Server in quad 1 (q1adfps) engages in policy server replication services (PSReplication) with the Policy Servers (collectively named PS) in each other quad.

### 3. Properties
Practical experience indicates that managing multiple policies, each containing redundant information, increases the risk of overlooked updates. This can lead to wasted time as developers try to debug the policy. An example is when a key value, such as the port number for a required network service, is changed in some policies but not in others. To minimize this risk, we separated functional roles from actual identities when specifying policies. For instance, in each quad, a different host (identity) fulfills the role of an Access Proxy. The identities are calculated as the policy for each host or application is generated. This approach also allows us to easily change the allocation of roles per host when moving DPASA software to new network addresses and environments.

Identities and application information were placed in a master property file, which contained two sections:
1. A mapping of a filename to a file identification number.
2. A collection of role=identity pairs, followed by three hyphens, a file identification number or numbers, and optionally a hyphen and quad specifier.

**Example:**
```
_file_1=../../sm/conf/sm.prp
_file_2=../../proxies/conf/psqproxy.prp
PSQ_server0=192.168.4.34:8296 --- 1,2 - q4
rmi_host=192.168.4.14 --- 2
```

In this case, `PSQ_server0=192.168.4.34:8296` was placed in `sm.prp` and `psqproxy.prp`, files 1 and 2. This ensured that the specified role had a consistent identity in the specified files. The `q4` suffix declared that this binding was valid only for quad 4. The other declaration was not specific to a quad and the suffix was omitted.

### 4. Application Layer Policy
Once the identities were specified in this structured way, they were associated with their roles in the JVM policies using policy templates. These templates were essentially JVM policies containing variables that were filled in using the master property file to create a single JVM policy for each application. Whenever an IP address or port from the configuration file was needed, a variable of the following form was placed in the policy: `name fileNumber`.

**Example:**
- **Template:**
  ```java
  permission java.net.SocketPermission ":", "connect";
  ```
- **Final Product:**
  ```java
  permission java.net.SocketPermission "192.168.4.14:7183", "connect";
  ```

This scheme worked well when each policy template mapped to a policy on a single deployment host. However, some DPASA components were implemented on multiple hosts. Each application needed a policy to allow it to contact services bound to the IP address of that host. To avoid duplication, we added meta-variables to the top of each template to change the variable values used when generating the policies. Each combination of meta-variables generated a unique policy file.

**Example:**
```java
// metavar=CLIENT_IP ->c1_ip__13,c2_ip__13
permission java.net.SocketPermission ":", "connect"; // ,Rmi
```

In this case, two policy files were generated, one for each of the two client hosts. Wherever the meta-variable `CLIENT_IP` was found, it was replaced with one of the specified variables. The policy file names generated in this way were prefixed with the variable name, or names in the case of multiple meta-variables, to make them easily distinguishable.

Using the properties, meta-variables, and JVM templates, we were able to generate JVM policies for our components as the system was packaged for deployment.

To help validate the components protected by these JVM security policies, the generated JVM network permissions were used to automatically create network fuzzers. These fuzzers would send random/malicious traffic between two endpoints in the network to find vulnerabilities. Each sending or receiving permission generated a matching fuzzer. These fuzzers were collected to represent a faulty application, ensuring there was always a set of faulty clients or servers to test what would happen when a component behaved incorrectly. Using these fuzzers, we could test the response of a component to authorized but incorrect or malicious traffic.

### 5. Process Layer Policy
Proper process behavior was enforced using SELinux on most DPASA hosts and CSA on Windows and Solaris hosts. While both technologies served similar purposes, their policies and construction approaches were very different.

**SELinux:**
- Fine-grained and detailed, requiring significant effort to configure and maintain, especially in a multi-host environment like DPASA.
- Extended SELinux policy construction tools to generate policies for multiple hosts simultaneously.

**CSA:**
- Browser-based interface made management of detailed policies tedious.
- Assumed that a privilege was authorized unless specifically denied, requiring caution when specifying rules.
- Included tools to generate policy rules directly from observed alerts, but the results were often opaque and difficult to maintain.

### 5.1. SELinux Policy
SELinux policies operated at a finer level of granularity (individual system calls) than the JVM policies. We did not attempt to directly translate from one to the other. However, the properties used to fill in the JVM templates were very useful when generating SELinux policies. Each port and IP address had a unique SELinux type in the policies, and these types needed to be bound to the correct IP addresses and ports for each host. Since these details changed periodically, manual maintenance was not feasible.

Automation was achieved through a modified policy construction process. The source files for SELinux policies were normally prepared with the m4 macro preprocessor before being processed by the policy compiler. Three additional files were included in the preparation to help automate the binding of network details:
1. Host IP address and port number definitions were converted from the master property file into m4 macro definition statements.
2. Two files were created to bind the DPASA IP and port symbols to the SELinux type symbols.
3. The normal source file for network binding, net contexts, was modified to include the new files in the correct places.
4. Additional macros were defined and used to perform modifications such as extracting the port or IP part of a combined IP and port specification.

This approach provided a useful level of automation for maintaining and updating SELinux policies in a dynamic multi-host environment.