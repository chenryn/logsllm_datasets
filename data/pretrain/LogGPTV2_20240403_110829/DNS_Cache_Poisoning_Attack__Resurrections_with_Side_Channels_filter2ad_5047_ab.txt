on the resolver. (3) The 16-bit transaction ID in the DNS payload
has to match the one randomly selected by the resolver [46].
If a rogue response with all the matching fields arrives before
the legitimate one sent by the name server, then the resolver will
accept and cache the rogue results. This can be an insurmountable
hurdle as an attacker needs to effectively enumerate all possible
32-bit values (equivalent to ~4 billion values) within a small time
window, i.e., the RTT between the resolver and name server. Even
if an attacker can repeat the attempts over many queries, it is still
a largely infeasible attack.
In summary, there are 6 steps of the attack.
(1) Identify the victim resolver, the domain to poison, and its name
server.
nels (§4).
(2) Slow down name servers and prevent them from responding to
the victim resolver (§6.1); this gives the attacker more time.
(3) Start triggering the query on the resolver.
(4) Infer the ephemeral port of the query using our new side chan-
(5) Once the port is known, inject 65,536 rogue responses with
different TxIDs to the victim resolver by spoofing the name
server’s IP.
(6) Check if the cache is poisoned. If not, go back to (3).
4 ICMP-BASED EPHEMERAL PORT SCANS
4.1 Prior Methods of UDP-Based Port Scans
Traditionally, UDP probes are used to determine whether a UDP
port (specified as the destination port number in the probe) is open
or closed. According to the RFCs [4, 48], if the destination replies
with an ICMP port unreachable message, it indicates that the port
is closed. This is traditionally used to probe server ports as shown
in Figure 2(a). In addition, as mentioned in §2.1, this can also be
used to discover public-facing ephemeral ports. It is obvious that
the presence or absence of the ICMP response is explicit feedback
on the UDP probe.
SADDNS. To scan private-facing ephemeral ports, UDP probes
must be sent using the source IP address of the remote peer, forcing
an off-path attacker to find an indirect way of performing the scan.
Based on this, in 2020, Man et al. [45] identified a global rate limit
on the ICMP responses to UDP probes, enabling an attacker to
send spoofed UDP probes and indirectly infer whether they have
solicited responses. Specifically, if a guessed port number (in a
spoofed UDP probe) happens to match the correct ephemeral port,
the resolver will not generate an ICMP message (otherwise it would).
This results in either a stationary limit counter or a decrement of the
counter. An attacker can then check whether the counter has been
drained by attempting to solicit ICMP responses with a UDP probe
from his real/non-spoofed IP. Fundamentally, this is a variant of
the traditional UDP-based scan because the goal is still to indirectly
infer the presence or absence of ICMP responses.
4.2 ICMP-Based Port Scans
In contrast with the traditional methods of UDP-based port scans,
in this paper, we investigate the ICMP-based port scans. As men-
tioned in §2.2, an ICMP message embeds the header of the original
packet from the source, including the source and destination port
Session 12C: Traffic Analysis and Side Channels CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3402and the non-default gateway IP for specific remote IPs (updated
by ICMP redirect messages). These exception cache entries affect
the routing decisions for all future outgoing packets destined to
the remote IPs in the entries. These entries are cached for some
time unless explicitly evicted due to a limit on the total number of
entries (details are provided in §4.5).
One thing worth noting is that the OS does not check the source
IP address of the ICMP frag needed messages. This is by design
as such messages can be generated by any router along the path.
And due to the dynamic nature of the Internet, the victim resolver
cannot easily verify if a given IP belongs to the routers along the
path. This has an interesting implication that the attacker’s probes
of ICMP frag needed messages, which we will describe next, do not
need to spoof the source IP address at all.
4.4 Public-Facing Port Number Inference
We illustrate the basic idea of public-facing ephemeral port scan
in Figure 3(a) & 3(b). For ICMP frag needed, all we need to do is
to send an ICMP frag needed message with the attacker’s own IP
address (which is unchecked by the resolver as mentioned above).
The message embeds a UDP header with a guessed source port and
a destination port of 53. It is also supposed to contain the source
and destination IP addresses, which should be the resolver’s IP
and name server’s IP respectively. However, some popular DNS
software such as Unbound (IPv4 only) and dnsmasq produce public-
facing ephemeral ports as introduced in §2.1 (also called wildcard
sockets in the kernel terminology). It turns out that Linux (and
other OSes) treat such public-facing ports much more liberally and
accept any inner destination IP address in an ICMP message, as
long as the inner source address matches the resolver’s IP and inner
source port matches the ephemeral port. This effectively means that
against such public-facing ports, one can easily trick the resolver to
update the MTUs for any remote IPs (even though the resolver may
not have even talked to them before). Therefore, in the attacker’s
probe packets, we will use its own IP address to fill the destination
IP of the embedded packet such that the MTU for the attacker’s IP
will be lowered if the guessed ephemeral port is correct.
To observe the change in the cache, the attacker can simply
send a PING or any other packet (verification packet) that will
trigger a reply (verification reply) from the resolver, and observe
if the response will be fragmented as a result of the lowered MTU.
As shown in Figure 3(b), if ICMP redirect is used for probing, the
effect is that the victim resolver becomes unresponsive because the
traffic to the attacker will now be redirected to a wrong gateway IP
(potentially black hole) set in the redirect message.
4.5 Private-Facing Port Number Inference
Most DNS software (e.g., BIND) will produce private-facing ephemeral
ports, rendering the previous method invalid. The first adjustment
we have to make is to set the inner destination IP address to the
IP of the name server. This is because __udp4_lib_lookup() will
check the complete four-tuple of the embedded UDP packet to lo-
cate the socket that has previously been “connected” to a specific
remote IP and port (See §2.1). The exception cache state change is
therefore also “private” to the name server and not directly observ-
able by the attacker. For example, even if the MTU for the name
server is reduced, an off-path attacker cannot directly observe the
Figure 2: Ephemeral Port Scan
information. This opens up an opportunity to craft an ICMP mes-
sage embedding a guessed port number, which is used to match a
specific socket on the receiver end [4, 48]. However, the challenge
is that ICMP messages are by design error messages useful for di-
agnostic purposes only, which do not solicit explicit responses [12].
This means that regardless of whether a port number is guessed
correctly, the receiver will not provide any response, as shown in
Figure 2(b), making the ICMP-based port scans seem infeasible.
Surprisingly, we observe that an attacker does not necessarily
have to rely on the explicit feedback from an ICMP probe. Instead,
even if the processing of ICMP probes is completely silent, as long
as there is some shared resource whose state is influenced, we may
find ways (other probes) to observe the changed state of the shared
resource. This is a generalization of the prior probing methods that
rely on spoofed probes that by design can solicit responses from
the victim. In addition to SADDNS whose probes are designed to
solicit ICMP responses, it is also the case for the series of TCP side
channels [14, 17, 43]. Specifically, [14] leveraged TCP probes that
can solicit challenge ACKs; [17, 43] required TCP probes that can
solicit any response. In summary, it requires a leap of faith to realize
the potential of the ICMP-based probes to scan UDP ports.
In this project, we systematically investigated all types of ICMP
and narrowed them down to two that are useful for port scans: ICMP
fragment needed (or ICMP packet too big in IPv6) and ICMP redirect.
Next, we will describe their processing logic in the Linux kernel
and the corresponding shared resources that form side channels.
4.3 Analysis of ICMP Error Processing Logic
We use the ICMPv4 (ICMPv6 is similar) in the latest Linux ker-
nel (5.11.16 at the time of writing) as an example to illustrate this
(the logic is largely the same since 3.6). When the OS receives
an ICMPv4 message with an embedded UDP packet, it will in-
voke __udp4_lib_err() to handle the error. Here the four-tuple
in the wrapped UDP packet is first checked with the socket ta-
ble (__udp4_lib_lookup()) to verify the legitimacy of the ICMP
packet, i.e., it is indeed triggered by the packet the host sent before.
If it passes the check, the ICMP error will be handled according
to the type of error. Additionally, the ICMP error may optionally
be delivered to the application if the OS has received the proper
socket options (which will be described in §5.1).
To handle the ICMP frag needed and redirect, two corresponding
kernel functions are invoked respectively: ipv4_sk_redirect()
and ipv4_sk_update_pmtu(). Both of them will update a global
resource maintained in the routing module, called the next hop
exception (fnhe) cache. We refer to it as “exception cache” in short
from here on. It stores various states including the non-default MTU
for specific remote IPs (updated by ICMP frag needed messages),
UDPdport=53UDPdport=67ICMP: 67closedAttackerVictim ServerListen on 53ICMP(UDP dport=53)ICMP(UDP dport=67)Attacker(a) UDP-based Port Scan (SADDNS)(b) ICMP-based Port Scan (This Work)Victim ServerListen on 53Session 12C: Traffic Analysis and Side Channels CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3403Figure 3: Port Number Inference
change because fragments will go towards the name server directly.
Interestingly, it turns out that there is another method to indirectly
observe the state change.
The key idea is to leverage the limited number of total slots
in the global exception cache. By default, Linux organizes such a
global exception cache as a 2048-bucket hash table which uses the
destination IP address as the key and has a linked list of length
5 and 6 slots (for IPv6 and IPv4 respectively) to solve collisions
for each bucket. When the linked list reaches the limit, the oldest
exception will always be evicted and replaced with a newly inserted
exception.
The requirement is that the attacker needs to create hash col-
lisions with the name server’s IP. As shown in Figure 3(c), the
attacker first needs to find 5 IPs (in the case of IPv6) that can be
hashed into the same bucket as the name server’s IP on the victim
resolver’s exception cache and control at least 1 IP c1 (the other 4
IPs can be spoofed). For now, we assume the attacker can find the
5 colliding IPs but will describe our tested strategy in §4.6.
As shown in Figure 3(c), once the colliding IPs are collected,
the attacker first fully occupies the 5 allowed slots in the linked
list using the 5 different IPs. This can be done by sending a series
of ICMP frag needed or ICMP redirect packets wrapping a PING
reply packet [26]. The kernel blindly accepts ICMP errors caused
by PING replies because they are sent by the kernel with no sockets
and therefore matching the socket before accepting is not possible.
Subsequently, the attacker would proceed with the ephemeral port
scan by probing different source ports with ICMP messages. If a
probe happens to hit the correct ephemeral port, a new exception
regarding the name server is to be inserted into the linked list
and evict the first exception (i.e., c1) prepared by the attacker. The
attacker can observe this by a verification packet, in the case of
MTU caches, checking the current MTU for c1.
4.6 Finding IPs that Cause Hash Collisions
Finding IP collisions has been studied before when leveraging IPID
side channels [8, 25], where they needed to find a single IP address
that collides within the same IPID bucket as the victim. [8] states
owning 10,000 IPs would bring the colliding rate to an arbitrary IP
over a 2048-entry hash table to more than 98%. Unfortunately, this
naive brute force does not transfer well to our attack. Specifically,
in order to observe a collision in the case of the exception cache,
we know that we need 5 or 6 IP addresses to fully occupy a bucket
entry. This means that we need to find at least 50,000 to 60,000 IPs
to have a good chance. This is still easily achievable in IPv6 because
ISPs often assign a /64 address block by default. However, for IPv4,
we consider it possible but a very strict requirement. We therefore
come up with an alternative strategy as follows.
Instead of finding the collision set directly, we choose to infer
the secret used in the keyed hash function that computes the index
into the 2048 buckets. First of all, the hash function is public (listed
in the kernel source code). Secondly, since the secret is only 32-bit
and persists until reboots, it is possible to crack it once and use it
subsequently to check which IPs collide with a given name server’s
IP. This allows us to target a resolver and potentially poison an
arbitrary domain name after a single cracking. To infer the secret,
the basic idea is to find some collision set (of 6 IPs in the case of
IPv4) that allows us to test which secret can produce the collision
set. The key is that in this process we no longer require a collision
with a specific IP, i.e., the IP of a name server, and therefore we
can benefit from the birthday paradox [55] — it is much more
probable to observe a collision at any bucket rather than a given
bucket. Based on our empirical evaluation, we only need 3,500 IPv4
addresses to reliably find one or more collision sets on some buckets.
In particular, we rented 3,500 AWS EC2 instances to acquire 3,500
different random public IPs. Given that each tiny instance only
costs less than one cent per hour, renting instances for sending
probing packets is cheap. In practice, we found that one round of
probing with 3,500 IPs is usually sufficient to find enough collision
sets that allow us to uniquely pinpoint the secret — this takes only
minutes computationally with 3,500 tiny CPU cores. In the rare
event that we fail, we can simply re-acquire another set of 3,500 IPs
and redo the probing. Finally, we also tested the same methodology
with IPv6 where only 1,500 addresses were needed to achieve the
Frag Needed ProbeVerify PingOff-pathAttacker aVictim rportnopenVictim rport nclosedVerify Reply Frag1Verify Reply Frag2PMTU of a1200D=rS=r, D=aM=1200SP=nD=rPING1300 bytesD=a, MF=1PING1152 bytesD=a, MF=0148 bytesFrag Needed ProbeVerify PingVerify ReplyD=rS=r, D=aM=1200SP=nD=rPING1300 bytesD=aPING1300 bytesIP HeaderICMP HeaderUDP HeaderDataRedirect ProbeVerify PingOff-pathAttacker aVictim rportnopenVictim rport nclosedGW of a1.1.1.100(blackhole)S=gw, D=rS=r, D=aRedirSP=nD=rPINGVerify ReplyD=aPINGGW of agwSpoofedLegend:Verify ReplyD=aPING1.1.1.100Redirect ProbeVerify PingS=gw, D=rS=r, D=aRedirSP=nD=rPINGFrag Needed ProbeVerify PingOff-pathAttacker c1Victim rportnopenVictim rport nclosedVerify Reply Frag0Verify Reply Frag1D=rS=r, D=auM=1200SP=n, DP=53D=rPING1300 bytesD=c1, MF=1PING1152 bytesD=c1, MF=0148 bytesVerify PingVerify ReplyD=rPING1300 bytesD=c1PING1300 bytesPMTU of c1:12005 Plant PacketsD=rS=r, D=cnM=1200PINGfnheCache:c1->c2->c3->c4->c5fnheCache:au->c2->c3->c4->c5PMTU of c1:default5 Plant PacketsD=rS=r, D=cnM=1200PINGfnheCache:c1->c2->c3->c4->c5Frag Needed ProbeD=rS=r, D=auM=1200SP=n, DP=53(a) Frag-Needed-Based Public Port Inference(b) Redirect-Based Public Port Inference(c) Frag-Needed-Based Private Port InferenceKeys: D=Destination IP, S=Source IP, M=PMTU, SP=Source Port, DP=Destination Port, MF=More Fragment, cn(c1-c5)=Colliding IPs, au=Authoritative Name ServerPMTU of adefaultSession 12C: Traffic Analysis and Side Channels CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3404same result because an IPv6 hash bucket has only 5 slots instead of
6.
4.7 High-Speed Scans
As one can expect, for either public-facing or private-facing ports,
an attacker can probe multiple source ports simultaneously to learn
if any of the guesses match the correct ephemeral port. We con-
firmed with small-scale experiments that both ICMP frag needed
and redirect messages are not rate limited on the Internet (see
Appendix B). We consider two options below.
Batch scan. We can probe many ports at once, and check whether
any of them has hit the correct port. If it does, we can then re-probe
a smaller sub-range (e.g., a binary search) to narrow down on the
exact port. In this strategy, every round of probes will incur at least
one round trip time between the attacker and victim (as is the case
in SADDNS [45]). Note that we will need to somehow reset the
exception cache state once we hit the correct port in a batch. This is
because we have already evicted one of the exceptions we planted
earlier. We will describe the methods in detail in Appendix C.
Single packet scan. An alternative strategy is to scan only a single
port in each batch (batch size equal to 1). This means that every
scan will be accompanied by an additional verification packet. Even
though this sounds like a sub-optimal strategy, we point out that the
probes can in fact be initiated in a pipeline, without having to wait
for feedback for previous probes. This is because our verification
packet can encode a unique ID (e.g., ping ID) that can differentiate
after which batch of probes, an update in the exception cache has
taken place. Of course, we can also use a larger batch size. However,
as mentioned, it will incur additional round trips to narrow down
the search. In contrast, the single packet scan (a batch size of 1)
will allow us to precisely pinpoint which port is open without the
additional round trips. The tradeoff is that for every ephemeral port
we scan, two packets need to be sent, i.e., one is the probe, the other
is the verification packet.
As the attack is highly time-sensitive, we favor fewer round trips
over higher bandwidth consumption. We wish to point out that
this allows us to scan at a much higher speed than 1,000 per second
which was the limit in SADDNS [45].
5 VULNERABLE POPULATION
In this section, we will first study the necessary conditions for the
vulnerability to be present and exploitable. Then we study the vul-
nerable combination of OS and DNS software. Interestingly, the