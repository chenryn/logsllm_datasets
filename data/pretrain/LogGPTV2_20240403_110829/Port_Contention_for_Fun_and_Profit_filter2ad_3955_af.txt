### PORTSMASH and SGX: Different Layers of Protection

PORTSMASH targets the sequence of execution ports used by a victim process, while Intel Software Guard Extensions (SGX) provides protection at the memory subsystem level. This means that PORTSMASH and SGX operate at different layers of the computing stack—specifically, instruction execution and memory subsystem, respectively. This distinction supports our initial hypothesis that these two mechanisms are independent. However, for completeness, we empirically evaluate this hypothesis, addressing a research gap left by Covert Shotgun as an open problem: "This would be especially interesting in SGX scenarios."

While developing a full end-to-end attack on SGX enclaves might be intriguing, our focus is on gathering sufficient experimental evidence to demonstrate that SGX enclaves can leak information through the port contention side-channel. This is the primary contribution of this section.

### Experimental Setup

For our experiments, we developed two victim processes:
1. A standard process statically linked against OpenSSL 1.1.0h.
2. An Intel SGX SSL enclave.

Both victim processes follow the same scalar multiplication code path analyzed in Section V, ensuring that they execute the same code with and without SGX protections.

### Empirical Evaluation

Based on the rationale that a PORTSMASH attack is oblivious to SGX enclaves, we applied the P5 strategy from Section V. We captured two traces on an Intel Core i7-7700HQ Kaby Lake, one for each setting: SGX and non-SGX. Figure 8 shows both the raw and filtered traces for each setting.

#### Observations

- **Raw Traces**: The raw traces for both settings show significant similarities.
- **Filtered Traces**: After applying a noise reduction filter, the similarities become more evident. The position of additions is clearly revealed in both traces as amplitude peaks.

This demonstrates that the leakage from SGX is essentially identical to the leakage outside SGX, validating our hypothesis that a PORTSMASH attack can be applied to SGX enclaves as well as to non-SGX processes. Therefore, SGX enclaves do leak through port contention. The similarities in Figure 8 support the claim that developing an end-to-end attack against Intel SGX SSL should be straightforward, using the tools explained in Section V. Additionally, it highlights two important characteristics:
1. The amount of noise does not significantly vary between the SGX and non-SGX scenarios.
2. PORTSMASH is oblivious to SGX, as both traces were captured using the same port contention strategy.

Furthermore, the observant reader can also appreciate the similarities between the traces in Figure 8 and Figure 6, demonstrating that a PORTSMASH attack is independent of the binary linking strategy (static vs. dynamic).

### Mitigations

#### Existing Work

Due to the numerous microarchitecture side-channel attacks in recent years, several countermeasures and mitigations have been proposed. For a comprehensive survey, see [53]. Among these, cache-timing attacks and their respective techniques have arguably the most impact. This has led to the development of specific memory-based mitigations such as cache partitioning [11, 54], cache flushing [55, 56], and (partially) disabling caching [16]. However, these solutions generally do not provide protection against non-memory-based side-channels.

Another mitigation approach follows malware analysis methods, which can be categorized into binary and runtime analysis.

- **Binary Analysis**: Looks for code signatures to classify a binary as malicious or not. Irazoqui et al. [57] proposed MASCAT, a framework for detecting microarchitecture malware. This framework analyzes a target binary by searching for signature instructions often used in microarchitecture attacks, such as high-resolution timers, fence instructions, and cache-flushing instructions. However, [15] showed that it is possible to hide malicious code from static analysis of binaries.

- **Runtime Analysis**: Inspects potentially malicious processes during execution, looking for suspicious activities. Several approaches propose microarchitecture attack mitigations [58–60], focusing mainly on monitoring hardware performance counters (HPC) to detect irregular execution patterns. Kulah et al. [58] and Zhang et al. [59] focus on unusual cache-activity rates, while Raj and Dharanipragada [60] aim to detect attacks by measuring memory bandwidth differences.

Wichelmann et al. [61] recently proposed a combination of these categories. Their framework, MicroWalk, applies Dynamic Binary Instrumentation and Mutual Information Analysis to detect and locate the source of leakage in binaries. They successfully apply their technique to closed-source cryptographic libraries such as Intel IPP and Microsoft CNG.

From this brief survey, most work to mitigate microarchitecture side-channels focuses on cache-based channels. Hence, many of these frameworks and techniques are not directly applicable to detect and mitigate our PORTSMASH technique. Since our technique does not target the cache but instead focuses on the execution units, it is extremely challenging to detect. For example, an HPC-based countermeasure must distinguish normal port utilization from highly optimized code and PORTSMASH. At the end of the day, microprocessor manufacturers and code developers expect full core resource utilization. While it is conceptually possible to adapt some previous countermeasures to detect our technique, the practicality and effectiveness of these countermeasures remain open questions.

#### Recommendations

Our PORTSMASH technique relies on Simultaneous Multithreading (SMT) and exploits transient microarchitecture execution port usage differences. Two immediate countermeasures arise:

1. **Remove SMT from the Attack Surface**: The best and most recommended strategy against SMT-based attacks (e.g., CacheBleed, MemJam, TLBleed) is to disable SMT. Even OpenBSD developers recently followed this approach, as it is the simplest solution. However, it comes at the cost of performance loss in thread-intensive applications. To minimize this loss, Wang and Lee [3] proposed a selective approach by modifying the OS to support logical core isolation requests from user space, allowing security-critical code to trigger it on demand. This selective SMT-disabling reduces performance loss but is costly to implement, requiring changes in the OS and underlying libraries, hindering portability and large-scale adoption.

2. **Promote Execution Port-Independent Code**: This can be achieved through secret-independent execution flow secure coding practices, similar to constant-time execution. Constant-time implementations that execute the same set of instructions independently of the secret (i.e., all code and data addresses are assumed public) fulfill the port-independent code requirement we propose to mitigate this technique. See Appendix B for a discussion on experimentally validating the effectiveness of this recommendation with respect to OpenSSL.

### Conclusion

We presented a new side-channel attack (SCA) technique, PORTSMASH, which exploits timing information derived from port contention in shared CPU execution units on SMT architectures. Our technique features high adaptability, fine spatial granularity, high portability, and minimal prerequisites. We demonstrated its practicality with a real-world end-to-end attack against a TLS server, successfully recovering an ECDSA P-384 secret key. We further demonstrated that it is a viable side-channel to endanger the security of SGX enclaves and discussed potential mitigations.

Following responsible disclosure procedures, we reported our findings to the manufacturer and OS vendors, resulting in the assignment of CVE-2018-5407 to track the vulnerability. Subsequent to public disclosure, we released our proof-of-concept software to the open-source community [62] in support of open science.

Future work will explore the impact of memory ports for a PORTSMASH-like attack, answering the question: Are they more of a leakage or noise source? It is also interesting to evaluate the capabilities of PORTSMASH on other architectures featuring SMT, especially on AMD Ryzen systems. Our initial experiments suggest it is a viable security threat.

Finally, this work, along with the rapid publication of scientific results in the same field, confirms once again that SCA is a practical and powerful tool to find, exploit, and eventually mitigate significant and often underestimated threats to the security of our data and communications.

### Acknowledgments

We thank Tampere Center for Scientific Computing (TCSC) for generously granting us access to computing cluster resources. This project has received funding from the European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation programme (grant agreement No 804476). This article is based in part upon work from COST Action IC1403 CRYPTACUS, supported by COST (European Cooperation in Science and Technology). We also thank Nokia Foundation for funding a research visit of Alejandro Cabrera Aldaya to Tampere University during the development of this work.