cause and the computing layer SGX protects. PORTSMASH
aims at identifying the sequence of execution ports employed
by a Victim process, while SGX provides protection at the
memory subsystem level. This means that they operate at
different computing layers—instruction execution and memory
subsystem, respectively—providing soundness to our initial
hypothesis. Nevertheless, for the sake of completeness we
empirically evaluate our hypothesis, ﬁlling a research gap
left by Covert Shotgun as an open problem: “That would
be especially interesting say in SGX scenarios”. While de-
veloping an end-to-end attack like in previous sections on
SGX enclaves might appear interesting, we instead focus
on collecting sufﬁcient experimental evidence to demonstrate
that SGX enclaves do leak through the port contention side-
channel—the most important contribution of this section.
For our experiments, we developed two Victim processes.
One Victim is a standard process statically linked against
OpenSSL 1.1.0h, and the other is an Intel SGX SSL enclave.
Both Victim processes follow the same scalar multiplication
code path analyzed in Section V,
therefore we have two
processes executing exactly the same code path with and
without SGX protections.
Following the rationale that a PORTSMASH attack is oblivi-
ous to SGX enclaves, we applied the P5 strategy employed in
Section V. We captured two traces on an Intel Core i7-7700HQ
Kaby Lake, one for each setting: SGX and non-SGX. Figure 8
shows both the raw and ﬁltered traces for each of them. Note
the similarities between both raw traces, and after applying
a noise reduction ﬁlter, the similarities become more evident
since the position of adds are clearly revealed in both traces
as amplitude peaks.
This demonstrates the leakage from SGX is essentially
identical to the leakage outside SGX, validating our hypothesis
that a PORTSMASH attack can be applied to SGX enclaves
as well as to non-SGX processes. Therefore SGX enclaves
do leak through port contention. The similarities in Figure 8
support the claim that developing an end-to-end attack against
Intel SGX SSL should be straightforward, employing the tools
explained in Section V. Moreover, it also shows two important
characteristics: (1) the amount of noise does not signiﬁcantly
SGX
Filtered
non-SGX
 0
 500
 1000
 1500
 2000
 3000
 3500
 4000
 4500
 2500
Time
Fig. 8. From top to bottom: raw trace of our SGX Victim; said trace after
ﬁltering; raw trace of our user space Victim; said trace after ﬁltering. Both
victims received the same input, i.e., a scalar that induces 16 point adds at
the end of the trace, clearly identiﬁable by the peaks in the ﬁltered traces.
vary between both scenarios; and (2) PORTSMASH oblivious-
ness regarding SGX as both traces were captured employing
the same port contention strategy.
Furthermore, regardless of SGX the observant reader can
also appreciate the similarities between traces in Figure 8
and Figure 6, demonstrating a PORTSMASH attack is also
independent of the binary linking strategy (static vs dynamic).
VI. MITIGATIONS
A. Existing Work
Due to the copious amount of microarchitecture side-
channel attacks in recent years, several countermeasures and
mitigations appear in the literature; see [53] for a complete
survey on countermeasures. From all the microarchitecture
side-channel attacks proposed, cache-timing attacks and their
respective techniques have arguably the most impact of all.
This translates to the development of speciﬁc memory-based
mitigations such as cache partitioning [11, 54], cache ﬂush-
ing [55, 56], and (partially) disabling caching [16]. Never-
theless, generally these solutions do not provide protections
against non memory-based side-channels. To that end, another
mitigation technique angle follows malware analysis methods.
One way to categorize these countermeasures is by binary and
runtime analysis.
Binary analysis looks for code signatures that allows clas-
sifying a binary as malicious or not. Irazoqui et al. [57]
proposed MASCAT, a binary analysis framework for detecting
microarchitecture malware. This framework analyzes a target
binary by searching for a set of signature instructions often
used during microarchitecture attacks, e.g., high-resolution
timers, fence instructions, and cache-ﬂushing instructions.
Nevertheless, [15] showed that is possible to hide malicious
code from static analysis of binaries.
Runtime analysis inspects potentially malicious processes
while they execute, looking for dubious activities. Several
(cid:25)(cid:25)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:40 UTC from IEEE Xplore.  Restrictions apply. 
approaches propose microarchitecture attack mitigations [58–
60]. Most of them focus mainly on monitoring hardware per-
formance counters (HPC) to detect irregular execution patterns
that may suggest an ongoing side-channel attack. Kulah et al.
[58] and Zhang et al. [59] focus on unusual cache-activity
rates, while Raj and Dharanipragada [60] aim at detecting an
attack by measuring memory bandwidth differences.
Wichelmann et al. [61] recently proposed a combination
of these categories. Their framework MicroWalk applies Dy-
namic Binary Instrumentation and Mutual Information Anal-
ysis to not only detect leakage in binaries, but also to locate
the source of the leakage in the binary. The framework
combines the memory footprint and the program control-
ﬂow to determine the side-channel leakage. They apply their
technique successfully to closed source cryptographic libraries
such as Intel IPP and Microsoft CNG.
From this brief survey, most of the work to mitigate
microarchitecture side-channels is in the area of cache-based
channels. Hence, many of these frameworks and techniques
are not directly applicable to detect and mitigate our PORT
SMASH technique. Since our technique does not target the
cache, but instead focuses on the execution units, we argue it
is extremely challenging to detect it. For example, when using
an HPC-based countermeasure,
it must distinguish normal
port utilization between highly optimized code and PORT
SMASH. At the end of the day, microprocessor manufacturers
and code developers expect full core resource utilization. We
agree that it is conceptually possible to adapt some of the
previous countermeasures to detect our technique, but it is
an open question how difﬁcult, effective, and practical these
countermeasures would be.
B. Recommendations
Our PORTSMASH technique relies on SMT and exploits
transient microarchitecture execution port usage differences,
therefore two immediate countermeasures arise: (1) remove
SMT from the attack surface; and (2) promote execution port-
independent code.
So far, the best and most recommended strategy against
attacks relying on SMT—e.g., CacheBleed, MemJam, and
TLBleed—is to simply disable this feature. Even OpenBSD
developers 5 recently followed this approach, since it is the
simplest solution that exists but
the cost of
performance loss on thread-intensive applications. In order to
minimize this loss, Wang and Lee [3] proposed a selective
approach by modifying the OS to support logical core isolation
requests from user space, such that security-critical code can
trigger it on demand. This selective SMT-disabling reduces
performance loss but is costly to implement since it requires
changes in the OS and the underlying libraries, hindering
portability and large-scale adoption.
it comes at
The second option, port-independent code, can be achieved
through secret-independent execution ﬂow secure coding prac-
tices, similar to constant-time execution. Constant-time imple-
5https://marc.info/?l=openbsd-cvs&m=152943660103446
mentations that execute the same set of instructions indepen-
dently from the secret—i.e., all code and data addresses are
assumed public—fulﬁll the port-independent code requirement
we propose to mitigate this technique. See Appendix B for a
discussion on experimentally validating the effectiveness of
this recommendation with respect to OpenSSL.
VII. CONCLUSION
We presented a new SCA technique exploiting timing
information against a non-persistent shared HW resource,
derived from port contention in shared CPU execution units
on SMT architectures. Our PORTSMASH technique features in-
teresting properties including high adaptability though various
conﬁgurations, very ﬁne spatial granularity, high portability,
and minimal prerequisites. We demonstrated it is a practical
attack vector with a real-world end-to-end attack against a
TLS server, successfully recovering an ECDSA P-384 secret
key; we further demonstrated it is a viable side-channel to
endanger the security of SGX enclaves and discussed potential
mitigations.
Following responsible disclosure procedures, we reported
our ﬁndings to the manufacturer and OS vendors, which
resulted in the assignment of CVE-2018-5407 to track the
vulnerability. Subsequent to public disclosure, we released our
proof-of-concept software to the open source community [62]
in support of open science.
We leave as future work exploring the impact of memory
ports for a PORTSMASH-like attack, answering the question:
are they more of a leakage or noise source? It
is also
interesting to evaluate the capabilities of PORTSMASH on
other architectures featuring SMT, especially on AMD Ryzen
systems: our initial experiments suggest it is a viable security
threat.
Finally, we conclude with a remark on how this work,
together with the increasingly fast-paced publications of sci-
entiﬁc results in the same ﬁeld, conﬁrms once again SCA as
a practical and powerful tool to ﬁnd, exploit—and eventually
mitigate—signiﬁcant and often underestimated threats to the
security of our data and communications.
Acknowledgments
We thank Tampere Center for Scientiﬁc Computing (TCSC)
for generously granting us access to computing cluster re-
sources.
This project has received funding from the European Re-
search Council (ERC) under the European Union’s Horizon
2020 research and innovation programme (grant agreement No
804476).
This article is based in part upon work from COST Action
IC1403 CRYPTACUS, supported by COST (European Coop-
eration in Science and Technology).
We thank Nokia Foundation for funding a research visit of
Alejandro Cabrera Aldaya to Tampere University during the
development of this work.
(cid:25)(cid:25)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:40 UTC from IEEE Xplore.  Restrictions apply. 
[16] O. Acıiçmez, B. B. Brumley,
- 14th International Conference, DIMVA 2017, Bonn, Germany, July
6-7, 2017, Proceedings, ser. Lecture Notes in Computer Science,
M. Polychronakis and M. Meier, Eds., vol. 10327. Springer, 2017, pp.
3–24. [Online]. Available: https://doi.org/10.1007/978-3-319-60876-1_1
“New results
on instruction cache attacks,” in Cryptographic Hardware and
Embedded Systems, CHES 2010, 12th International Workshop, Santa
Barbara, CA, USA, August 17-20, 2010. Proceedings, ser. Lecture
Notes in Computer Science, S. Mangard and F. Standaert, Eds.,
vol. 6225.
[Online]. Available:
https://doi.org/10.1007/978-3-642-15031-9_8
Springer, 2010, pp. 110–124.
and P. Grabher,
the
[17] D. J. Bernstein, N. Duif, T. Lange, P. Schwabe, and B. Yang,
“High-speed high-security signatures,” J. Cryptographic Engineering,
vol. 2, no. 2, pp. 77–89, 2012. [Online]. Available: https://doi.org/10.
1007/s13389-012-0027-1
[18] D. A. Osvik, A. Shamir, and E. Tromer, “Cache attacks and
countermeasures: The case of AES,” in Topics in Cryptology - CT-RSA
2006, The Cryptographers’ Track at the RSA Conference 2006, San
Jose, CA, USA, February 13-17, 2006, Proceedings, ser. Lecture Notes
in Computer Science, D. Pointcheval, Ed., vol. 3860. Springer, 2006,
pp. 1–20. [Online]. Available: https://doi.org/10.1007/11605805_1
[19] Y. Yarom and K. Falkner, “FLUSH+RELOAD: A high resolution,
in Proceedings
San Diego, CA,
USENIX Association, 2014, pp.
https://www.usenix.org/conference/
low noise, L3
of
USA, August 20-22, 2014.
719–732.
usenixsecurity14/technical-sessions/presentation/yarom
23rd USENIX Security
[Online]. Available:
side-channel
Symposium,
attack,”
cache
[20] D. Gruss, C. Maurice, K. Wagner, and S. Mangard, “Flush+ﬂush: A
fast and stealthy cache attack,” in Detection of Intrusions and Malware,
and Vulnerability Assessment - 13th International Conference, DIMVA
2016, San Sebastián, Spain, July 7-8, 2016, Proceedings, ser. Lecture
Notes in Computer Science, J. Caballero, U. Zurutuza, and R. J.
Rodríguez, Eds., vol. 9721. Springer, 2016, pp. 279–299. [Online].
Available: https://doi.org/10.1007/978-3-319-40667-1_14
[21] A. Moghimi, T. Eisenbarth, and B. Sunar, “MemJam: A false
dependency attack against constant-time crypto implementations in
SGX,” in Topics in Cryptology - CT-RSA 2018 - The Cryptographers’
Track at the RSA Conference 2018, San Francisco, CA, USA, April
16-20, 2018, Proceedings, ser. Lecture Notes in Computer Science,
N. P. Smart, Ed., vol. 10808.
Springer, 2018, pp. 21–44. [Online].
Available: https://doi.org/10.1007/978-3-319-76953-0_2
[22] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee, “Last-level
cache side-channel attacks are practical,” in 2015 IEEE Symposium on
Security and Privacy, SP 2015, San Jose, CA, USA, May 17-21, 2015.
IEEE Computer Society, 2015, pp. 605–622.
[Online]. Available:
https://doi.org/10.1109/SP.2015.43
[23] G.
I. Apecechea, T. Eisenbarth, and B. Sunar, “S$a: A shared
cache attack that works across cores and deﬁes VM sandboxing -
and its application to AES,” in 2015 IEEE Symposium on Security
and Privacy, SP 2015, San Jose, CA, USA, May 17-21, 2015.
IEEE Computer Society, 2015, pp. 591–604.
[Online]. Available:
https://doi.org/10.1109/SP.2015.42
[24] M. Kayaalp, N. B. Abu-Ghazaleh, D. V. Ponomarev, and A. Jaleel, “A
high-resolution side-channel attack on last-level cache,” in Proceedings
of the 53rd Annual Design Automation Conference, DAC 2016, Austin,
TX, USA, June 5-9, 2016. ACM, 2016, pp. 72:1–72:6. [Online].
Available: http://doi.acm.org/10.1145/2897937.2897962
[25] Q. Ge, Y. Yarom, T. Chothia, and G. Heiser, “Time protection: the
missing OS abstraction,” CoRR, vol. abs/1810.05345, 2018. [Online].
Available: http://arxiv.org/abs/1810.05345
[26] M. Lipp, D. Gruss, R. Spreitzer, C. Maurice, and S. Mangard,
“ARMageddon: Cache attacks on mobile devices,” in 25th USENIX
Security Symposium, USENIX Security 16, Austin, TX, USA, August
10-12, 2016, T. Holz and S. Savage, Eds. USENIX Association, 2016,
pp. 549–564. [Online]. Available: https://www.usenix.org/conference/
usenixsecurity16/technical-sessions/presentation/lipp
[27] N. Koblitz, “Elliptic curve cryptosystems,” Mathematics of Computation,
REFERENCES
[1] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh,
J. Horn, S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and
M. Hamburg, “Meltdown: Reading kernel memory from user space,”
in 27th USENIX Security Symposium, USENIX Security 2018,
Baltimore, MD, USA, August 15-17, 2018, W. Enck and A. P. Felt,
Eds. USENIX Association, 2018, pp. 973–990. [Online]. Available:
https://www.usenix.org/conference/usenixsecurity18/presentation/lipp
[2] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas,
M. Hamburg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and
Y. Yarom, “Spectre attacks: Exploiting speculative execution,” in 2019
IEEE Symposium on Security and Privacy, SP 2019, Proceedings,
20-22 May 2019, San Francisco, California, USA.
IEEE, 2019, pp.
19–37. [Online]. Available: https://doi.org/10.1109/SP.2019.00002
[3] Z. Wang and R. B. Lee, “Covert and side channels due to processor
architecture,” in Proceedings of
the 22nd Annual Conference on
Computer Security Applications, ACSAC 2006, Miami Beach, FL, USA,
December 11-15, 2006.
IEEE Computer Society, 2006, pp. 473–482.
[Online]. Available: https://doi.org/10.1109/ACSAC.2006.20
[4] B. Gras, K. Razavi, H. Bos, and C. Giuffrida, “Translation leak-
aside buffer: Defeating cache side-channel protections with TLB
attacks,” in 27th USENIX Security Symposium, USENIX Security 2018,
Baltimore, MD, USA, August 15-17, 2018, W. Enck and A. P. Felt,
Eds. USENIX Association, 2018, pp. 955–972. [Online]. Available:
https://www.usenix.org/conference/usenixsecurity18/presentation/gras
[5] Y. Yarom, D. Genkin, and N. Heninger, “CacheBleed: A timing attack
on OpenSSL constant