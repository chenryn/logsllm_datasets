::: {#mask}
:::
::: wrapper
::: {#header-desktop .desktop}
::: header-wrapper
::: header-title
[KQL Query](/ "Kusto Query Language | KQLQuery.com")
:::
::: menu
::: menu-inner
[Posts](/posts/){.menu-item} [Categories](/categories/){.menu-item}
[whoami](/whoami){.menu-item} [Projects](/projects){.menu-item} [KQL
News](https://kustoinsights.substack.com/){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://github.com/bert-janp "GitHub"){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://twitter.com/BertJanCyber "Twitter"){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://linkedin.com/in/bert-janpals "LinkedIn"){.menu-item
rel="noopener noreffer" target="_blank"} []{.menu-item .delimiter}[
[](javascript:void(0); "Search"){#search-toggle-desktop .search-button
.search-toggle} [](javascript:void(0); "Clear"){#search-clear-desktop
.search-button .search-clear} []{#search-loading-desktop .search-button
.search-loading} ]{#search-desktop .menu-item
.search}[](javascript:void(0); "Switch Theme"){.menu-item .theme-switch}
:::
:::
:::
:::
::: {#header-mobile .mobile}
::: header-container
::: header-wrapper
::: header-title
[KQL Query](/ "Kusto Query Language | KQLQuery.com")
:::
::: {#menu-toggle-mobile .menu-toggle}
:::
:::
::: {#menu-mobile .menu}
::: search-wrapper
::: {#search-mobile .search .mobile}
[](javascript:void(0); "Search"){#search-toggle-mobile .search-button
.search-toggle} [](javascript:void(0); "Clear"){#search-clear-mobile
.search-button .search-clear} []{#search-loading-mobile .search-button
.search-loading}
:::
[Cancel](javascript:void(0);){#search-cancel-mobile .search-cancel}
:::
[Posts](/posts/){.menu-item}[Categories](/categories/){.menu-item}[whoami](/whoami){.menu-item}[Projects](/projects){.menu-item}[KQL
News](https://kustoinsights.substack.com/){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://github.com/bert-janp "GitHub"){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://twitter.com/BertJanCyber "Twitter"){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://linkedin.com/in/bert-janpals "LinkedIn"){.menu-item
rel="noopener noreffer" target="_blank"}
[](javascript:void(0); "Switch Theme"){.menu-item .theme-switch}
:::
:::
:::
::: {.search-dropdown .desktop}
::: {#search-dropdown-desktop}
:::
:::
::: {.search-dropdown .mobile}
::: {#search-dropdown-mobile}
:::
:::
::: {.main role="main"}
::: container
# From Threat Report to (KQL) Hunting Query {#from-threat-report-to-kql-hunting-query .single-title .animate__animated .animate__flipInX}
::: post-meta
::: post-meta-line
[[Bert-Jan Pals](/ "Author"){.author
rel="author"}]{.post-author} [included in
[KQL](/categories/kql/) [Sentinel](/categories/sentinel/) [Defender For
Endpoint](/categories/defender-for-endpoint/) [Threat
Hunting](/categories/threat-hunting/)]{.post-category}
:::
::: post-meta-line
 2023-11-29  2660 words   13 minutes 
:::
:::
::: {#content .content}
Threat intelligence reports are an essential source to be able to
identify and mitigate security threats. However, the process of
converting the information in these reports into actionable queries
(such as Kusto Query Language (KQL)) can be challenging. In this blog
post, we will explore the steps involved in going from a threat
intelligence report to a KQL hunting query. This is done based on two
#StopRansomware reports of the joint Cybersecurity Advisory (CSA).
-   [#StopRansomware: Hive
    Ransomware](https://www.cisa.gov/sites/default/files/publications/aa22-321a_joint_csa_stopransomware_hive.pdf){target="_blank"
    rel="noopener noreffer"}
-   [#StopRansomware: LockBit 3.0 Ransomware Affiliates Exploit CVE
    2023-4966 Citrix Bleed
    Vulnerability](https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-325a){target="_blank"
    rel="noopener noreffer"}
> **#StopRansomware** This joint Cybersecurity Advisory (CSA) is part of
> an ongoing #StopRansomware effort to publish advisories for network
> defenders that detail various ransomware variants and ransomware
> threat actors. These #StopRansomware advisories include recently and
> historically observed tactics, techniques, and procedures (TTPs) and
> indicators of compromise (IOCs) to help organizations protect against
> ransomware. Visit [stopransomware.gov](stopransomware.gov){rel=""} to
> see all #StopRansomware advisories and to learn more about other
> ransomware threats and no-cost resources.
The blog is divided into the following sections:
-   [Schematic Process](#schematic-process){rel=""}
-   [Reading The Report](#reading-the-report){rel=""}
-   [Knowing Your Data](#knowing-your-data){rel=""}
-   [Hunting Atomic IOCs](#hunting-atomic-iocs){rel=""}
    -   [IPs](#ips){rel=""}
    -   [Domains](#domains){rel=""}
-   [Hunting Patterns and
    Behaviors](#hunting-patterns-and-behaviors){rel=""}
    -   [File Based Behaviors](#file-based-behaviors){rel=""}
    -   [Process Based Behaviours](#process-based-behaviors){rel=""}
-   [Detecting Ransomware
    Threats](#detecting-ransomware-threats){rel=""}
> **Interested in KQL?** [Subscribe to the monthly Kusto Insights
> newsletter!](https://kustoinsights.substack.com/){target="_blank"
> rel="noopener noreffer"}
![/images/threat-report-to-hunting-query/Hunting.jpeg](/svg/loading.min.svg "Alt text"){.lazyload
data-src="/images/threat-report-to-hunting-query/Hunting.jpeg"
data-srcset="/images/threat-report-to-hunting-query/Hunting.jpeg, /images/threat-report-to-hunting-query/Hunting.jpeg 1.5x, /images/threat-report-to-hunting-query/Hunting.jpeg 2x"
data-sizes="auto"}
# Schematic Process
The schematic overview of the process from reading a Threat Report to
evaluating the results of a Hunting Query can be seen below.
![Schematic Process from Threat Report to hunting
results](/svg/loading.min.svg){.lazyload
data-src="/images/threat-report-to-hunting-query/Process.drawio.png"
data-srcset="/images/threat-report-to-hunting-query/Process.drawio.png, /images/threat-report-to-hunting-query/Process.drawio.png 1.5x, /images/threat-report-to-hunting-query/Process.drawio.png 2x"
data-sizes="auto"}
  Phase                                   Description
  --------------------------------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  Read Threat Report                      The first phase is to read the report.
  Gather Actionable Information           This stage focuses on the indicators that are mentioned in the report, only select the ones applicable to your environment and sector. The output of this step is a list with actionable indicators.
  Match Information with available data   Based on the previous step we have a list with actionable indicators, but the value of those indicators depends on the data that we have available. This phase matches the information from the indicators to the data tables you have in your security solutions.
  Wrint Hunting query                     This is of course the most fun! ;), hitting the keyboard and searching in your data for any sign of the indicators.
  Evaluate Results                        Once your awesome query is built you might see some results, the last phase is to evaluate them to determine if this is indeed what you wanted to search for. If not you adjust the hunting query.
  Incident Response                       Once you have identified malicious activity you have to act upon it to contain the risk.
# Reading The Report
The first step is to read the report and derive information from it,
only if actionable information is collected we can start writing hunting
queries. The report will contain a lot of information, but depending on
your technology stack and threat landscape not all information might be
relevant.
The next step is to collect relevant Indicators of Compromise (IOC),
those IOCs can be put into different categories:
1.  **Atomic IOCs**, such as domains and IP addresses, that can detect
    adversary infrastructure and tools
2.  **Computed IOCs**, such as Yara rules and regular expressions, that
    detect known malicious artefacts or signs of activity
3.  **Patterns and behaviours**, such as analytics that detect adversary
    tactics, techniques, and procedures (TTPs)
Source: [CISA Cybersecurity Incident & Vulnerability Response
Playbooks](https://www.cisa.gov/sites/default/files/publications/Federal_Government_Cybersecurity_Incident_and_Vulnerability_Response_Playbooks_508C.pdf){target="_blank"
rel="noopener noreffer"}
Those different Indicators of Compromise are related to the CTI Pyramid
of Pain. The closer the indicator type is to the base of the pyramid,
the easier it is for adversaries to change. The other side is that the
more closely an indicator type aligns with the base of the pyramid, the
simpler it is to gather information about it.
When moving to the top of the pyramid it becomes harder for adversaries
to change the indicator, the other side of this is that intel about
those also become more scarce.
![Pyramid of Pain by David Bianco](/svg/loading.min.svg){.lazyload
data-src="/images/threat-report-to-hunting-query/blog-pyramid-pain-01-768x432.jpg"
data-srcset="/images/threat-report-to-hunting-query/blog-pyramid-pain-01-768x432.jpg, /images/threat-report-to-hunting-query/blog-pyramid-pain-01-768x432.jpg 1.5x, /images/threat-report-to-hunting-query/blog-pyramid-pain-01-768x432.jpg 2x"
data-sizes="auto"}
The ransomware reports contain all of the three indicator categories,
however, within the remainder of this blog the focus is on the Atomic
and Behavioural indicators.
# Knowing Your Data
The next phase is to map the indicators to the data you have available.
Understanding the specific locations of data within your organization's
security solutions and tables is incredibly important for threat
hunting. This step is crucial to be able to get valuable results. This
comes down to knowing what data tables you have available and knowing
what indicators can be used in which tables.
To list some examples based on tables in Defender For XDR:
  Table                  Indicator
  ---------------------- --------------------------
  DeviceNetworkEvents    IP, DNS, URL
  EmailEvents            DNS, Emailaddresses
  DeviceRegistryEvents   RegistryKey
  DeviceFileEvents       FileNames, Hashes, Tools
  DeviceProcessEvents    Commands, Tools
> **List Actions Per Table** The
> [ListAllActionsAndOperations()](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Functions/ListAllActionsAndOperations.md){target="_blank"
> rel="noopener noreffer"} KQL function lists all Actions and Operations
> at from all tables at ones, which returns a good overview of all the
> different types of events you have in your tables.
# Hunting Atomic IOCs
The image below shows some of the IP indicators that have been
mentioned, but this image needs to be translated to a list which can be
used as input for a query. This can be done via regex, but also AI
tooling can help by simply asking to extract all IPv4 addresses from
this file and putting them in an array.
![Hive Ransomware IP Indicators](/svg/loading.min.svg){.lazyload
data-src="/images/threat-report-to-hunting-query/IPIOC.png"
data-srcset="/images/threat-report-to-hunting-query/IPIOC.png, /images/threat-report-to-hunting-query/IPIOC.png 1.5x, /images/threat-report-to-hunting-query/IPIOC.png 2x"
data-sizes="auto"}
## IPs
The array is the starting point for a hunting query. Since the Potential
IOC IP Addresses for compromise or exfiltration are related to network
events, the *DeviceNetworkEvents* table is the best one to search for
matches, resulting in the query below. The query uses the
[in()](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/in-cs-operator){target="_blank"
rel="noopener noreffer"} operator, only if a RemoteIP is equal to one of
the IPs from the *IPList* results will be returned. If those IPs would
have been related to sources from where adversaries sign in to your
cloud applications the *AADSignInEventsBeta* in MDE or the *SigninLogs*
in Sentinel could be leveraged to hunt for those sign-ins.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
let IPList = dynamic(["84.32.188.57", "84.32.188.238", "93.115.26.251", "185.8.105.67", 
"181.231.81.239", "185.8.105.112", "186.111.136.37", "192.53.123.202", "158.69.36.149", 
"46.166.161.123", "108.62.118.190", "46.166.161.93", "185.247.71.106", "46.166.162.125", 
"5.61.37.207", "46.166.162.96", "185.8.105.103", "46.166.169.34", "5.199.162.220", "93.115.25.139"]);
DeviceNetworkEvents
| where RemoteIP in (IPList)
```
:::
## Domains
In the reports, four domains can be found, even though they are not the
strongest indicators they could still be useful depending on your
available data. If you do not have any process-based events it could be
useful to leverage the firewall logs to hunt for sources that connect to
those domains. In the case of this blog, we will again focus on the
*DeviceNetworkEvents*. The query is slightly different than the one for
IPs, in this case, the
[has_any()](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/has-anyoperator){target="_blank"
rel="noopener noreffer"} operator is used, this function is in essence a
contains based on a input list.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
let Domains = dynamic(["assist.zoho.eu", "eu1-dms.zoho.eu", "fixme.it", "unattended.techinline.net"]);
DeviceNetworkEvents
| where RemoteUrl has_any (Domains)
```
:::
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Alert & Block on IOCs
:::
::: details-content
::: admonition-content
In Defender For Endpoint, one can add indicators to alert and/or block
when one of those is found in your tenant. Currently, the following IOC
types are supported: Hashes, IPs, URLs, Domains and certificates.
Documentation: [Create
indicators](https://learn.microsoft.com/en-us/microsoft-365/security/defender-endpoint/manage-indicators?view=o365-worldwide){target="_blank"
rel="noopener noreffer"}
:::
:::
:::
# Hunting Patterns and Behaviors
Moving on to the patterns and behaviours that the Ransomware operators
used, we also need to increase the complexity of the queries that we use
to detect those behaviours. Just searching if the data contains some
value in some field is not enough anymore.
## File Based Behaviors
Starting with the first example of behaviours that are mentioned in the
reports is storing a \*.key file in the root directory.
``` {tabindex="0"}
*.key typically in the root directory, i.e., C:\ or /root
```
This textual indicator can be translated to a KQL query as seen below.
The *DeviceFileEvents* table is the best one to find files that have
been created in a particular location, if the file had to be executed