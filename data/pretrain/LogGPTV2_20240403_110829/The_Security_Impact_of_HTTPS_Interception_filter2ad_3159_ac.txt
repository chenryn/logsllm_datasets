 Correct Validation
Fig. 4: Security of Client-side Interception Software—We evaluate and ﬁngerprint popular antivirus and client-side security
products, ﬁnding that products from twelve vendors intercept connections.5 In all but two cases, products degrade TLS connection
security. *Mirrors browser ciphers.



(cid:35)
(cid:35)
(cid:35)




(cid:35)
(cid:35)








1.2
1.2
1.2
1.2
1.2
1.2
1.2
1.0
1.2
1.2
1.0
1.2
1.2
1.2
1.2
1.0
1.2
1.2
1.0
1.2
Mirrors client ciphers
Advertises DES
Advertises RC4
RC4, 768-bit D-H
RC4, 768-bit D-H
RC4, 768-bit D-H
Mirrors client ciphers
Advertises DES
No cert. validation, DES
RC4, FREAK
Export ciphers, DES, RC2
Broken cert. validation
CRIME vulnerability
CRIME vulnerability
768-bit D-H
Broken cert. validation
Anonymous ciphers
Anonymous ciphers
No certiﬁcate validation
Advertises DES
Modern Ciphers:
 No Support
(cid:35) Non-preferred Support
 Preferred Support
(cid:32)
(cid:32)
(cid:32)
(cid:32)
A*
F
C
C
C
C
A*
F
F
C
F
F
C
C
C
F
F
F
F











(cid:35)



(cid:35)



5
Detection Method
Invalid Extensions
Invalid Ciphers
Invalid Version
Invalid Curves
Invalid Extension Order
Invalid Cipher Order
Missing Required Ext.
Injected HTTP Header
Firefox
16.8%
98.1%
–
–
87.7%
98.8%
97.9%
–
E-commerce Cloudﬂare
89.0%
68.7%
–
9.4%
40.4%
21.1%
50.9%
–
85.6%
54.2%
2.0%
5.5%
33.9%
21.2%
91.1%
14.0%
Fig. 7: Handshake Mismatches—We break down the mis-
matches used to detect intercepted sessions. For more than 85%
of intercepted connections, we detect an invalid handshake
based on the use of unsupported extensions, ciphers, or curves.
Some features were unavailable for Firefox and Cloudﬂare.
A. Firefox Update Server
HTTPS connections for 4.0% of Firefox clients were inter-
cepted, which is the lowest rate among the three perspectives.
Interception is likely less common for Firefox users because the
browser ships with its own certiﬁcate store, whereas Internet
Explorer, Chrome, and Safari use the host operating system’s
root store. Prior work [12] and our own testing (Figure 4) both
ﬁnd that some antivirus products (e.g., Avast) will intercept
connections from these other browsers but neglect to proxy
Firefox sessions. In corporate environments, administrators can
separately install additional root authorities in Firefox [41],
but the added step may dissuade organizations that proxy
connections from deploying the browser.
Sources of Interception
The two most common interception
ﬁngerprints belong to the default conﬁgurations of Bouncy Cas-
tle on Android 4.x and 5.x, and account for 47% of intercepted
clients (Figure 5). These ﬁngerprints were concentrated in large
ASes belonging to mobile wireless providers, including Verizon
Wireless, AT&T, T-Mobile, and NTT Docomo (a Japanese
mobile carrier). As can be seen in Figure 9, 35% of all Sprint
and 25.5% of all Verizon Firefox connections (including non-
intercepted) matched one of the two ﬁngerprints. It is possible
to intercept TLS connections on Android using the VPN
and/or WiFi permissions. However, given the default values,
it is unclear exactly which Android application is responsible
for the interception. Bouncy Castle on Android 5.x provides
reasonable ciphers equivalent to a modern browser; on Android
4.x, Bouncy Castle advertises export-grade cipher suites, making
it vulnerable to interception by an on-path attacker. The third
most common ﬁngerprint accounts for 5.3% of Firefox trafﬁc.
We were not able to identify the product associated with the
ﬁngerprint but note that nearly half of its trafﬁc occurred in
India and its diurnal and weekend patterns are consistent with
home antivirus or malware.
Temporal Pattern
The number of raw intercepted connections
mirrors the diurnal pattern of all Firefox trafﬁc. As can be seen
in Figure 8, there are typically more connections on weekdays,
and we observe the peak number of connections on weekday
mornings. This intuitively aligns with the ﬁrst computer access
of the day triggering a connection to the Firefox update
server. Oddly, though, the percentage of intercepted trafﬁc
is inversely proportional to total trafﬁc, peaking near midnight
and in the early morning. When we remove the two Android
Fig. 5: CDF of Interception Fingerprints—We ﬁngerprint
non-ephemeral parameters in replacement Client Hello mes-
sages to track the products that perform interception. Ten
ﬁngerprints account for 69% of the intercepted e-commerce
trafﬁc, 69% of Firefox update trafﬁc, and 42% of Cloudﬂare
trafﬁc.
Fingerprint Description
e Unknown
c
r
e
m
m
o
c
-
E
Avast Antivirus
Unknown
Blue Coat
Unknown
r
a
ﬂ
d
u
o
l
C
e Avast Antivirus
AVG Antivirus
Unknown. Likely AV; mainly Windows 10/Chrome 47
Kaspersky Antivirus
BitDefender Antivirus
Bouncy Castle (Android 5)
Bouncy Castle (Android 4)
Unknown. Predominantly India
ESET Antivirus
Dr. Web Antivirus
x
o
f
e
r
i
F
% Total
17.1%
10.8%
9.4%
9.1%
8.3%
9.1%
7.0%
6.5%
5.0%
3.1%
26.3%
21.6%
5.0%
2.8%
2.6%
Fig. 6: Top Interception Fingerprints—We show the prod-
ucts responsible for the most interception at each vantage point.
the connection to the origin web server. We logged the raw
TLS Client Hello messages and HTTP User-Agent for a
random 0.5% sample of all TLS connections to Cloudﬂare’s
frontend between May 13–20, 2016. We measure interception
by detecting mismatches between the HTTP User-Agent and
the TLS handshake. Cloudﬂare provides a more representative
sample of browsers than the Firefox update servers. However,
one of Cloudﬂare’s foremost goals is to prevent DDoS attacks
and other abuse (e.g., scripted login attempts), so the data is
messier than the other two datasets, and a portion of connections
likely have falsiﬁed HTTP User-Agent headers.
V. R E S U LT S
Our three vantage points provide varying perspectives on
the total amount of interception: 4.0% of Firefox update
connections, 6.2% of the e-commerce connections, and 10.9%
of Cloudﬂare sessions in the United States (Figure 2). In all
cases, this is more than an order of magnitude higher than
previously estimated [27], [46].
6
 0 20 40 60 80 100 1 10 100 1000CDF Intercepted TrafficClient Hello FingerprintsMozilla Update ServerE-commerce SitesCloudflare CDNCountry
Guatemala
Greenland
South Korea
Kuwait
Qatar
MITM % Country
15.0% Kiribati
9.9% Iran
8.8% Tanzania
8.5% Bahrain
8.4% Afghanistan
MITM %
8.2%
8.1%
7.3%
7.3%
6.7%
Fig. 10: Countries with Highest Firefox Interception—We
show the ten countries with the highest interception rates when
connecting to the Mozilla update server. Countries with above
average interception rates generally have a large amount of
trafﬁc intercepted by a single, dominant mobile provider.
rate around 50% that begins in the morning and ends near
midnight everyday. It is unclear what behavior results in this
temporal pattern.
B. Popular E-commerce Sites
The e-commerce dataset is composed of visits to set of
popular e-commerce websites and is not limited to a speciﬁc
browser version. To account for this, we parsed the HTTP User-
Agent header and identiﬁed mismatches between the announced
browser and TLS handshake. We observed 257K unique User-
Agent headers, and successfully parsed the header for 99.5% of
connections. The browsers we ﬁngerprinted account for 96.1%
of connections; 2.5% belong to browsers we did not ﬁngerprint
and 1.4% are from old browser versions.
We ﬁnd that 6.8% of connections were intercepted and
another 0.9% were likely intercepted, but cannot be deﬁnitively
classiﬁed. For the connections where we could detect a speciﬁc
ﬁngerprint, 58% belong to antivirus software and 35% to
corporate proxies. Only 1.0% of intercepted trafﬁc is attributed
to malware (e.g., SuperFish), and the remaining 6% belong
to miscellaneous categories. The three most prevalent known
ﬁngerprints belong to Avast Antivirus, Blue Coat, and AVG
Antivirus, which account for 10.8%, 9.1%, and 7.6% of
intercepted connections, respectively.
The e-commerce dataset also includes HTTP headers,
which allow us to identify a subset of connections that were
intercepted by network middleboxes, but do not match any our
existing ﬁngerprints. We ﬁnd proxy-related headers in 14.0%
of invalid handshakes, most prominently X-BlueCoat-Via,
Via, X-Forwarded-For, and Client-IP. We additionally use
these headers to detect interception. We detected 96.1% of
interception based on a version mismatch or the presence of
invalid extensions or ciphers. Another 2.2% of intercepted
connections lacked expected extensions, 0.7% used invalid
cipher or extension ordering, and 1.6% contained proxy-related
HTTP headers (Figure 7).