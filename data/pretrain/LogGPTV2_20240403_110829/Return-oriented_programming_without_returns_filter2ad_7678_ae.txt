the execve function) redirects execution back to the value stored
in the link register, we have to ensure that lr points at that time
to a valid instruction sequence. However, when the blx instruc-
tion is invoked, lr will be automatically loaded with the address of
[pc,#2] (for Thumb compiled code). Hence, we use an instruction
sequence with two blx instructions (sequence 1). The arguments for
the system call must be initialized by load gadgets (not depicted in
Figure 7). Usually, registers r0 through r3 hold arguments for a sys-
tem call. If a system call expects an argument in r3, then our rulb
will be overwritten. Thus, we must temporarily change the rulb to a
different register if r3 is used as argument.
First, sequence 1 invokes the system call function with the ad-
dress of the system call function stored in r7 (step 1). After the
system call returns, the bxpl lr instruction redirects execution back
to sequence 1 (step 2). Afterwards, sequence 1 performs two data
movement instructions11 and then redirects execution to sequence 2
(step 3). This sequence re-initializes our rulb register r3 with the ad-
dress of the ULB sequence. Finally, sequence 2 redirects execution
to the ULB sequence which loads the next jump address (step 4).
As can be seen in Figure 7, the system call function pushes two
values onto the stack. Since we separated arguments from jump
addresses, the two push instructions will only overwrite arguments
and not jump addresses. However, one can backup the affected
arguments through a store gadget before invoking the system call.
10The condition ﬂag pl means that the branch will only be executed
if the N ﬂag in the cpsr register is not set. The N ﬂag will be set
if r0 holds a negative value. This will only be the case if an error
occurred during the system call.
11Note that a function returning a 64 bit value (e.g., long long or
double), will load the return value in r0 and r1. However, as a
side-effect our gadget overwrites the value of r1 after the function
retuns. To allow function calls with a return value greater than 32
bits we have to use a sequence that preserves r1.
Figure 6: AND Gadget
Result (r1)sp1.Operandsp,#282.Operandsp,#32+(#4)subs r1,r4,r0str r1,[r2,#4]adds r0,r5,#0ldr r1,[sp,#32]blx r3Sequence 1ldr r0,[sp,#4]blx r3Sequence 2Sequence 5blx r3ldr r0,[sp,#16]Sequence 3ldr r2,[sp,#12]blx r3Sequence 4cmp r3,#0mov r4,r0beq 212b0blx r3ldr r2,[sp,#4]ldr r1,[sp,#16]sp1.Operand (r7)2.Operand (r1)blx r3blx r3Sequence 3Sequence 1ands r7,r1blx r3adds r7,r2blx r3Sequence 2Sequence 4ldr r3,[sp,#0]blx r3adds r6,#4ldr r5,[r6,#124]blx r5pushed r7pushed r4ULB Addresssp3.1.push {r4,r7}mov r7,#11svc 0x00000000pop {r4,r7}movs r0,r0bxpl lrblx r7adds r1,r0,#0adds r0,r5,#0blx r4Sequence 1System Call (execve)Sequence 2Update−Load−Branch (ULB)4.2.5685. GETTING STARTED
Return-oriented programming is an alternative to code injection
when an attacker has diverted a target program’s control ﬂow by
taking advantage of a memory error such as a buffer overﬂow. How
the initial control ﬂow diversion is accomplished, then, is orthogo-
nal to the question of return-oriented programming.12
All the same, some of the traditional means of diverting con-
trol ﬂow require the target program to execute a return instruction,
which means they risk detection by the defenses our new return-
oriented programming are designed to evade.
In some cases, a different approach will allow attackers to avoid
this initial return. In this section, we discuss four classes of mem-
ory errors from the perspective of the returnless return-oriented pro-
gramming paradigm and consider for each the prospects for an at-
tacker to take control without using a return instruction. Recall
that, in order for a return-oriented exploit to be successful, the
attacker must gain control of both the instruction pointer and the
stack pointer — or, more generally, the state used for the update-
load-branch instruction sequence. In addition, the return-oriented
program must be some place in memory.
Stack Buffer Overﬂow.
The traditional means of exploiting a stack buffer overﬂow is
to overwrite the saved instruction pointer in some function’s stack
frame. When that function returns, control will ﬂow not to the in-
struction after the call that invoked the function but rather to any
location of the attacker’s choosing. In a return-oriented attack, this
will be the ﬁrst instruction sequence in the ﬁrst gadget laid out on
the stack; conveniently, the stack pointer will point to the next word
on the stack, which is also under attacker control. By this point,
however, the LIFO invariant of the return-address stack has been vi-
olated. (A single return instruction would not, of course, be caught
by defenses that look for several returns in close succession.)
To take advantage of a stack buffer overﬂow without a return,
an attacker must overwrite stack frames without modifying any
saved instruction pointers. Instead, she should change pointer data
such as function pointers in a function frame above the one that
contains the overﬂowed buffer. Once the function containing the
buffer has returned (to the function that legitimately called it), the
memory around the stack pointer will be attacker-controlled; when
the pointer she modiﬁed is used, an instruction sequence such as
popad; jmp ∗y or ldm sp!, {r0-r11}; blx r3 as its target will give her
control of the registers and begin running return-oriented code.
Setjmp Buffer Overwrite.
The setjmp and longjmp functions allow for nonlocal gotos. A
program allocates space for a jmp_buf structure, which includes
an array of words long enough to hold the callee-saved registers.
When setjmp is called, it stores the values of those registers into
the jmp_buf. The instruction pointer stored into the buffer is the
normal subroutine return address — the saved instruction pointer
pushed onto the stack by the call instruction on x86 or the lr on the
ARM — and the stored stack pointer is the value the stack pointer
had before the call to setjmp. When setjmp returns, it returns zero.
When, later, longjmp is called, it restores the general-purpose
registers to their previous values, sets the return-value register —
eax or r0 — to longjmp’s second argument, sets the stack pointer,
12Also orthogonal are defenses against buffer overﬂows such as
stack cookies or generally against reliable exploitation such as
address-space randomization. Such defenses, like the ones we con-
sider in this paper, and unlike CFI, are ad-hoc. They defeat certain
exploits but can be bypassed in some cases. See, e.g., [43, 46].
and ﬁnally does an indirect jump to the saved instruction pointer.
In essence, setjmp returns two times while longjmp never returns.
If an attacker is able to write the exploit program to some loca-
tion in memory and overwrite two words of a jmp_buf — the stack
and instruction pointers — that is subsequently the ﬁrst argument to
a longjmp call, then the attacker can arrange for his return-oriented
exploit to run. This method of transferring control to a return-
oriented program is so convenient that it was employed for testing
the gadgets described in Sections 3 and 4. See Section 6 for an
example of this method.
C++ Vtable Pointer Overwrite.
If the attacker overwrites an object instance of a class with virtual
functions on the heap, then there is (in the general case) no hope of
controlling memory around the stack pointer. However, the attacker
will control the memory around the object itself, as well as around
the object’s vtable, since in overwriting the object she can cause the
vtable pointer to point at some memory under her control, such as a
packet buffer on the heap. Depending on the code that the compiler
generates for virtual method invocation, then, at the time that an
instruction sequence is invoked, one or more registers will point
to the object, the vtable, or both. The attacker must leverage these
pointers (1) to change the stack pointer to memory she controls, and
(2) to cause a second instruction sequence to execute after the ﬁrst.
Being able to leverage a vtable pointer overwrite to take control
in a generic way (i.e., one that depends only on the compiler version
and ﬂags, not on the program being attacked) is an open problem.
The alternative is to generate an exploit that is speciﬁc to the pro-
gram attacked, the way that, for example, alphanumeric shellcodes
must be written differently depending on what register or memory
location they can consult to ﬁnd the shellcode’s location [47].
Function Pointer Overwrite.
With a function pointer overwrite on the heap, as with a vtable
pointer overwrite, the challenge for the attacker is twofold. The ﬁrst
code sequence she causes to execute must both relocate the stack to
memory she controls and arrange for a second instruction sequence
to execute in turn. It is likely that this is impossible generically
without using the return instruction, and a speciﬁc exploit must be
crafted for each target program.
6. CONCRETE ATTACKS
6.1 Linux Intel x86
We construct a complete, working shellcode using a return-ori-
ented program without returns and which contains no zero bytes
making it usable with a strcpy vulnerability. Once control ﬂow has
transferred to the shellcode, it sets up the arguments for a call to the
syscall function.
syscall( SYS_execve, "/bin/sh",
argv, evnp )
The target program, given in Listing 1, allocates enough memory
on the heap to hold a 160 byte character array and a jmp_buf. Then,
setjmp is called to initialize the jmp_buf and the target program’s
ﬁrst argument is copied to the character array. Finally, longjmp
causes control ﬂow back to the point of the setjmp’s return and
the program exits. The target program is compiled and linked with
Mozilla’s libxul to provide the two instruction sequences pop %ebx;
jmp ∗(%ebx) and pop %edx; jmp ∗(%edx) as described in Sec-
tion 3. This is a toy program; we include it not because we are
interested in exploiting such programs but because it lets us gauge
a baseline for the size of a complete return-oriented exploit.
569Listing 1: Target program for our example exploit.
struct foo {
char buffer[160];
jmp_buf jb;
};
int main( int argc, char **argv ) {
struct foo *f = malloc( sizeof *f );
if( setjmp(f->jb) )
return 0;
strcpy( f->buffer, argv[1] );
longjmp( f->jb, 1 );
}
The shellcode “egg” we wrote (see [5, Listing 2]) consists of
four parts: (1) the return-oriented program; (2) data used by the
program; (3) the instruction sequence catalog; and (4) data over-
writing the jmp_buf. The program consists of a sequence of point-
ers to the sequence catalog and values to load into registers. The
jmp_buf pointers are overwritten to point the stack pointer at the
beginning of the program and the instruction pointer at the se-
quence pop %edx; jmp ∗(%edx) in libxul. The program xors esi
with itself to clear it and uses this register to write zero words in
the data section as needed; it then restores important nonzero data
that was overwritten; and ﬁnally, it calls the syscall function, with
arguments from the exploit’s data section.
jmp ∗(%edx) sequence can be replaced with
popad; cld; ljmp ∗(%edx) from libc. This requires the use of a far
pointer which contains 00 as its ﬁnal byte. A strcpy vulnerability
allows writing a single terminating zero byte. Thus, our shellcode
egg can contain exactly one far pointer at the very end.
The pop %edx;
When the target program is run with the exploit egg as its ﬁrst
argument, the result is a new shell.
6.2 Google Android ARM
In the following we provide background information on Google
Android and show details of our attack mounted on a device emu-
lator hosting Android 2.0 (“Eclair”).
Background on Google Android.
Android is an open source operating system for mobile devices
which includes a customized Linux kernel, middleware framework
and core applications. It is used in modern Google smartphones
such as Motorola Droid and a number of devices from the HTC
manufacturer (HTC Droid Eris, HTC Imagio, HTC Hero, etc.).
The Android platform is based on a Linux kernel, which provides
low-level services to the rest of the system such as networking,
storage, memory and processing. A middleware layer consists of
native C/C++ libraries, an optimized Java virtual machine called
Dalvik Virtual Machine (DVM), and core libraries written in Java.
The DVM executes binaries of applications from upper layers.
Android applications are written in Java, but can also access
C/C++ libraries via the Java Native Interface (JNI). Application
developers may use JNI to incorporate C/C++ libraries into their
applications. Moreover, many C libraries are mapped by default to
ﬁxed memory addresses in the program memory space. This pro-
vides a large C/C++ code base that we exploit for our attack.
Attack Instantiation.
Similar to our attack on Intel x86, we aim to launch Android’s
terminal application. The terminal application is part of the Dev-
Tool application, which is included by default in the Android emu-
Figure 8: The Gadget Chain of the Attack on Android
lator image. However, we were able to launch a similar attack on
a real device. In particular, we succeeded to run the attack on Dev
Phone 2 with the latest Android version available for this device,
Android 1.6 (“Donut”). However, the Android image ﬂashed on to
the real device differs from the image in the emulator in that it has
no DevTool application installed by default. Thus, the attack on a
real device would require the additional assumption that a terminal
application such as DevTool or AndroidTerm13 is installed on the
device.
We incorporated our target program, given in Listing 1, as na-
tive code to a standard Java application in Android by using the
JNI. Due to the inclusion of C/C++ libraries, the security guaran-
tees provided by the Java programming language do not hold any
longer.14 Instead of using the strcpy vulnerability, on Android, we
use the fgets function, because it allows us to read zero bytes, which
we need for initializing sp, because our target program always al-
locates the foo structure at a memory position starting with 0x00.
The fgets function reads the speciﬁed number of bytes from a ﬁle
into the buffer member of the foo structure without checking
the bounds of the buffer.
In order to mount our attack against the target program, our gad-
get chain invokes the system libc function as follows:
am start -a android.intent.action.MAIN
-c android.intent.category.TEST
-n com.android.term/.Term
This command invokes the Activity Manager application which in
turn starts a terminal from the DevTool application.
All used gadgets used in our attack on Android are shown in
Figure 8. To invoke the system function, we (1) initialize register
r6 and sp by means of the setjmp heap overﬂow; (2) load r3 with
the address of our ULB sequence (sequence 1); (3) load the address
of the interpreter command in r0 (sequence 2); (4) ﬁnally invoke
the libc system function (sequence 3). The corresponding exploit
payload is included in the tech report [11].
7. CONCLUSION
We have shown that on the x86 and ARM it is possible to mount
a return-oriented programming attack without using any return in-
structions.
In the new attack, certain return-like instruction se-
quences take the place of the return instruction. These instruction