subsection.  The  symbols  used  in  our  scheme  are  listed  in 
331
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:24:02 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I. 
SYMBOLS LIST
meaning
a file owned by a user
an erasure code function
the encoded file
a pseudo-random function with k as the seed
the  keys  and  tags  of  the  same  file ܨ vary  among  different 
clients, so the cloud server has to store  the public key and 
the tags of each user for one single file. 
(ࡲᇱ,ࢀ,࢙࢑)(cid:277)(cid:277)Encode(ࡲ):
1)
Split file ܨ into n blocks, and compute ܨᇱ = E(ܨ)
with  an  erasure  code,  each  block of ܨᇱ is  divided 
into s sectors, which are elements of ܼ௣; 
2) Randomly  choose  two  secret  keys ݇௔,݇௕  ∈ ܼ௣,
set ݏ݇ = (݇௔,݇௕); 
For  each  block ݉௜ of  file ܨᇱ ,  generate  tag ܶ௜ =
3)
݂௞ೌ(݅) + ∑
݂௞್(݆)݉௜௝
௦௝ୀଵ
.
Merkle Tree generate function, whose hash function is 
Fig. 2. The Pre-process algorithm 
symbols
F
ܧ(∗)
ܨ′
݂௞(∗)
ܯܶு,௕(∗)
ܼ௣
ݏ݇
ܶ௜
ݏ
݉௜௝
݅௝
ܽ௝
H(*), and the length of leaves is b
a group of order ݌, and ݌ is a large prime
the secret key used in tags’ operation
the tag of the ith data block of file F
the number of data sectors in one block
the jth sector of the ith block of file F
the index of the jth challenged block
the random coefficient of the jth challenged block
TABLE  I,  and  the  algorithms  of  the  three  phases  are 
described in Fig. 2, 3 and 4. 
First  of  all,  when  a  client  wants  to  upload  a  file ܨ,  he 
computes  the  hash  value  of ܨ  as  the  ID  with  a  public 
collision-resistant  hash  function  and  sends  it  to  the  server, 
and  then  executes  the  Encode  algorithm.
In  Encode
algorithm, the client encodes the original file ܨ, generates a 
secret key and computes tags for each block of the encoded 
file  with  the  key.  After  receiving  the  ID,  cloud  server 
searches this hash value in its database to see whether it has 
existed. If the ID has existed, the client may send only the 
tags  to  the  server,  if  not,  both  the  encoede  file ܨᇱ and  the 
tags ܶ will be uploaded. The only data need to be stored by 
the  client  is  the  secret  key.  Notice  that  each  data  block  of 
encoded  file ܨᇱ is  divided  into ݏ sectors  and  each  sector  is 
an element of group ܼ௣, so that the length of tags is smaller 
than lg݌. If we do not do like this, the tags will be as long as 
the  data  blocks,  which  is  unreasonable.  When  computing 
tags, ݂௞ೌ(݅) and ݂௞್(݆) are indispensable to bond blocks and 
sectors  with  their  positions,  in  case  that  the  server  may 
replace  a  challenged  but  missing  block  with  another  block 
and  its  tag.  For  example,  without ݂௞ೌ(݅)  and ݂௞್(݆) ,  the 
server  can  store  only  one  block  and  its  tag,  and  drop  all 
other  data.  No  matter  which  block  is  challenged  by  the 
client, the server can just return this very block and its tag.  
Notice that each client chooses different secret keys even 
though he  may own the same file  with others. That  means 
332
The  processes  of  ownership  and  retrievability  proving 
are different. In the former situation, both the server and the 
client  hold  the  file,  while  in  the  later  situation,  the  client 
owns only the secret key. In the SChallenge algorithm, two 
numbers  are  chosen,  among  which ܿ specifies  the  quantity 
of file blocks to be challenged, and the random number ݇1
is used to generate the indices of the blocks. To generate a 
proof,  a  pseudorandom  function  is  executed  to  generate ܿ
block indices with ݇1 as the key and sequence ݆ as the input. 
Then a Merkle Tree is built from the selected blocks using a 
collision-resistant hash function, and the root of the tree is 
returned  as  the  proof.  It  is  simple  to  verify  the  proof.  The 
cloud server just builds a Merkle Tree in the same way and 
compares the two roots. In this phase, s sectors of a block 
are operated together as one entity. 
In the retrievability proving phase, the challenge is made 
by the client and it contains one more parameter than in the 
SChallenge algorithm. The random number ݇2 is the key to 
generate  random  coefficients ܽ௝ ,  which  ensures  that  the 
server possesses each one of the requested blocks instead of 
the sum of them. Then the cloud server will generate a proof 
ܲ2 with  the  challenge ܥ2, the  encoded  file ܨᇱ and  the  tags 
of the file. The proof P2 contains s + 1 elements, those are 
= ෍ܽ௝݂௞ೌ൫݅௝൯ + ෍෍ܽ௝݂௞್(ݐ)݉௜ೕ௧
߬ = ෍ܽ௝ܶ௜ೕ
௖
௖
௖
௦
௝ୀଵ
௧ୀଵ
௝ୀଵ
and  
௝ୀଵ
௖
௝ୀଵ
௖
ߤ௧ = ෍ܽ௝݉௜ೕ௧
   1 ≤ ݐ ≤ ݏ
To verify the proof, the client computes 
௦
߬ᇱ = ෍ܽ௝݂௞ೌ൫݅௝൯ + ෍݂௞್(ݐ)ߤ௧
௖
௝ୀଵ
= ෍ܽ௝݂௞ೌ൫݅௝൯ + ෍݂௞್ ෍ܽ௝݉௜ೕ௧
௧ୀଵ
௖
௦
௝ୀଵ
௧ୀଵ
௝ୀଵ
If ߬ᇱ equals ߬, the client can believe that the file is integrally 
stored  in  the  server, otherwise  it  may  download  the  whole 
file and retrieve it with erasure code. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:24:02 UTC from IEEE Xplore.  Restrictions apply. 
࡯૚(cid:277)(cid:277)SChallenge():
ࡼ૚(cid:277)(cid:277)CProve(࡯૚,ࡲ′):
1) Choose ܿ ∈ [1,݊], ݇1 ோ← {0,1}௞; 
2)
Set ܥ1 = (ܿ,݇1). 
For every 1 ≤ ݆ ≤ ܿ, compute indices ݅௝ = ݂௞ଵ(݆)
1)
2) Construct  a  Merkle  Tree ܲ1 = ܯܶு,௕ ቀ݉௜ೕቁ,݆ ∈
[1,ܿ], ݉௜ೕ is the ݅௝th block of ܨᇱ and ܲ1 is the root 
of  the tree. 
For every 1 ≤ ݆ ≤ ܿ, compute indices ݅௝ = ݂௞ଵ(݆);
1)
2) Construct  a  Merkle  Tree ܲ1′ = ܯܶு,௕ ቀ݉௜ೕቁ,݆ ∈
[1,ܿ], and ܲ′1 is the root of  the tree; 
If ܲ1′ is equal to ܲ1, return 1, or return 0.
3)
0/1(cid:277)SVerify(࡯૚,ࡼ૚,ࡲ′): 
Fig. 3. The Ownership proving algorithm 
࡯૛(cid:277)(cid:277)CChallenge():
ࡼ૛(cid:277)SProve(࡯૛,ࡲᇱ,ࢀ):
1) Choose ܿ ∈ [1,݊], ݇1,݇2 ோ← {0,1}௞;
2)
1)
2) Compute ߬ = ∑
3)
4)
Set ܥ2 = (ܿ,݇1,݇2).
For every 1 ≤ ݆ ≤ ܿ, compute  indices ݅௝ = ݂௞ଵ(݆)
and random coefficients ܽ௝ = ݂௞ଶ(݆); 
ܽ௝ܶ௜ೕ
For each 1  ≤ ݐ ≤ ݏ, compute ߤ௧ = ∑
Set ܲ2 = (߬,ߤଵ,…,ߤ௦). 
0/1(cid:277)CVerify(࡯૛,ࡼ૛): 
For every 1 ≤ ݆ ≤ ܿ, compute  indices ݅௝ = ݂௞ଵ(݆)
1)
and ܽ௝ = ݂௞ଶ(݆); 
2) Compute ߬′ = ∑
௦௧ୀଵ
3) Return 1 if ߬ is equal to ߬′, or return 0.
ܽ௝݂௞ೌ൫݅௝൯ + ∑
݂௞್(ݐ)ߤ௧
ܽ௝݉௜ೕ௧
௖௝ୀଵ
௖௝ୀଵ
௖௝ୀଵ
; 
; 
;
Fig. 4. The Integrity proving algorithm 
V.
A. Security Analysis 
PERFORMANCE
In  this  section,  we  analyze  the  security  performance  of 
our scheme from the aspects of POW and POR.  
As  we  mentioned  in  Section  III,  using  erasure  code, 
every small difference of a file can be diffused to all blocks,
so it is impossible to cheat the server even if an adversary 
owns a file very similar to the target file. Now consider this 
scenario,  a  malicious  attacker  keeps  monitoring 
the 
communication  channel  and  collects  a  large  number  of 
(ܥ1,ܲ1) pairs  of  a  file ܨ aiming  to  cheat  the  server  with 
them.  We  now  prove  that  it  is  not  feasible  either.  If  we 
challenge  c  blocks  from  a  file  of  n  blocks,  the  quantity  of 
different (ܥ1,ܲ1) pairs is ܥ௡௖. Suppose the attacker collects 
m pairs of challenges and proofs, the possibility of choosing 
repetitive challenged blocks is ݉/ܥ௡௖. We set n = 500, c =
400,  and  m  =  10000,  then  the  possibility  is  about 
1/5.05E140  which  is  extremely  small  that  just  can  be 
ignored.  Besides,  it  is  impossible  to  cheat  the  server  even 
repetitive blocks are challenged, because the use of random
coefficients ݆ܽ .  So  even  if  the  attacker  contains  a  large 
number of  (ܥ1,ܲ1) pairs, it is still not feasible to prove his 
ownership of the file.  
Next  we  will  see  the  success  rate  of  retrievability 
verifying  if  the  server  drops  portion  of  the  file  blocks. 
Suppose  a  file  F  is  divided  into  n  blocks,  and  the  server 
drops  or  modifies  u  percent  of  them.  If  we  challenge  c
blocks  in  retrievability  proving  phase,  the  possibility  of 
/ܥ௡௖. As  an  example, 
verifying  successfully  is 1 − ܥ௡(ଵି௨%)
let n is as large as 50000, and only 1% of them are changed. 
If we challenge 400 blocks, we can notice the missing and 
unintegrity of the file with a possibility of 98%. In general, a 
missing of 10% blocks is tolerable, we can retrieve it with 
erasure code. 
B. Efficiency Analysis 
௖
x
x
x
parameters: 
The  efficiency  of  PoOR  is  determined  by  the  following 
the  data  size  of  file ܨ  need  to  be  visited  during 
proving and verification;
the computation complexity of the algorithms;
the size of metadata to be stored in the storage of the 