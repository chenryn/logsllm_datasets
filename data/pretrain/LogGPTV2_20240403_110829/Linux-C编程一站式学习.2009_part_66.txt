一
FAILED)
6, PROT_WRITE, MAP_SHARED, fd, O);
n
一个进程对映射的内存做了修改，
出错返回-1。
一个进程对映射的内存做了修
当进程终止时，
该进程的映射
---
## Page 540
可以看到，执行这个程序要映射共享库/lib/tls/i686/cmov/libc.so.6到进程地址空间。也可以看
用strace命令执行该程序，跟踪该程序执行过程中用到的所有系统调用的参数及返回值：
的地址空间。例如一个很简单的hello world程序：
mmap函数的底层也是一个系统调用，在执行程序时经常要用到这个系统调用来映射共享库到该进程
请读者自己分析一下实验结果。
write(1, 
mmap2 ( NULL
limit_in_pages:1,
close(3)
W
uu
op
access('
Spen(
directory)
access("/etc/ld.so.nohwcap", F_oK)
brk(0)
execve("
int main(void)
#include 
cead(3,
9000000
000000033 32 31 306f 0a
ben(
rectory)
.ose
PRIVATE|MAP_
0xb7fc9000
512
("/etc/ld.so.nohwcap", F_oK)
/etc/ld.so.cache"
 printf("hello world\n");
3
4096,
detached
 12
4096!
: world\n", 12hello world
modes
 PROT_READ|PROT_WRITE,
63628)
12288,
1
960
IFREG|0644
0
PROT_READ|PROT_WRITE,
O RDONLY)
DENYWRITE
o/n
contents:0.
READ
 -> 6, base_addr:0xb7e6f6b0,
 useable:1})
=
=
_WRITE,
MAP_PRIVATE|MAP_ANONYMOUS, -
= -l ENOENT (No such file or
= -1 ENOENT (No such file or
0
 -1 ENOENT (No Such file
0x804a000
3
3，
-exec_only:0,
：0xb7fb7000
 = 0xb7fb4000
=0
=0
or
---
## Page 541
ioctl
全国嵌入式人才培训基地
起始页
第 29 章文件系统
---
## Page 542
8. mmap
3. VFS
2.ext2文件系统
1. 引言
第 29 章 文件系统 请点评
目
一页
3.2. dup和dup2函数
3.1.内核数据结构
2.4.文件和目录操作的系统函数
2.3.数据块寻址
2.2.实例剖析
2.1.总体存储布局
部分IⅢl. Linux系统编程
全国嵌入式人才培训基地
全国嵌入式人才培训基地
第29章文件系统
起始页
一级
542
---
## Page 543
在内核中是如何实现的。
的ext3文件系统也是与ext2兼容的，基本格式是一致的，只是多了一些扩展。然后再介绍文件系统
我们首先介绍一种文件系统的存储格式－早期Linux广泛使用的ext2文件系统。现在Linux最常用
本章主要解答以下问题:
1.引言请点评
第 29 章文件系统
1．文件系统在内核中是如何实现的？如何呈现给用户一个树状的目录结构？如何处理用户的文
上一页
2．磁盘是一种顺序的存储介质，
页
么？
件系统的存储格式使访问磁盘的效率最高？各种文件和目录操作在磁盘上的实际效果是什
件和目录操作请求？
bin etclib
图 29.1.文件系统的表示和存储
akaedu ftp
4
一个树状的目录结构如何扯成一条线存到磁盘上？怎样设计文
4
全国嵌入式人才培训基地
全国嵌入式人才培训基地
. 10101000111101..
第 29 章 文件系统
1.引言 
起始页
上一级
2.ext2文件系统
下一页
---
## Page 544
块组描述符表（GDT，Group Descriptor Table）
超级块（Super Block）
式化成某种格式的文件系统，
2.1.总体存储布局 请点评
2. ext2文件系统 请点评
大小的块组（Block Group），每个块组都由以下部分组成。
不能使用启动块。启动块之后才是ext2文件系统的开始，ext2文件系统将整个分区划成若干个同样
的，就是1KB，启动块是由PC标准规定的，
b选项可以设定块大小为1024、2048或4096字节。而上图中启动块（Boot Block）的大小是确定
文件系统中存储的最小单位是块（Block）
信息。下图是一个磁盘分区格式化成ext2文件系统后的存储布局。
我们知道,
上一页
时，第0个块组中的超级块和块组描述符表就会拷贝到其它块组，这样当第0个块组的开头意
们都有多份拷贝。通常内核只用到第0个块组中的拷贝，
损坏就会丢失整个分区的数据,
块组描述符表在每个块组的开头也都有一份拷贝，
由很多块组描述符组成，整个分区分成多少个块组就对应有多少个块组描述符。每个块组描
块在每个块组的开头都有一份拷贝。
描述整个分区的文件系统信息,
是inode表，从哪里开始是数据块，
图 29.2.ext2文件系统的总体存储布局
Block
Super
Block
Boot
一个磁盘可以划分成多个分区，
GDT
Block Group 0
然后才能存储文件，
Bitmap
Block
，例如块大小、文件系统版本号、上次mount的时间等等。超级
一旦块组描述符意外损坏就会丢失整个块组的数据，
Bitmap
全国嵌入式人才培训基地
 空闲的inode和数据块还有多少个等等。和超级块类似,
inode
第 29 章文件系统
2.ext2文件系统
Block Group 1
，每个分区必须先用格式化工具（例如某种mkfs命令）格
用来存储磁盘分区信息和启动信息，
一个块究竟多大是在格式化时确定的，
1
，格式化的过程会在磁盘上写一些管理存储布局的
Table
inode
这些信息是非常重要的，
 例如在这个块组中从哪里开始 
当执行e2fsck检查文件系统一致性
Block Group n
Data Blocks
1
，任何文件系统都
一旦超级块意外
例如mke2fs的-
，因此它
544
下三！
贝
---
## Page 545
数据块（Data Block）
inode表（inode Table）
inode位图（inode Bitmap）
块位图（Block Bitmap）
根据不同的文件类型有以下几种情况
可能有很大的浪费。如果用户在格式化时能够对这个分区以后要存储的文件大小做一个预
存的都是很大的文件（比如电影）
近似认为数据块有多少个8KB就分配多少个inode，
inode表占多少个块在格式化时就要决定并写入块组描述符中,
的那些信息，
我们知道，
和块位图类似，本身占一个块，其中每个bit表示一个inode是否空闲可用。
存的都是很小的文件（比如源代码)
的所有inode组成了inode表。
动指失
就可以有s/(8b)个块组。格式化时可以用-g参数指定一个块组有多少个块，但是通常不需要手
定块大小，现在设块大小指定为b字节,
于块位图本身必须只占一个块。
与此相联系的另一个问题是：在格式化一个分区时究竟会划出多少个块组呢？主要的限制在
不可避免地要搜遍整个目录的所有文件。
为什么用af命令统计整个磁盘的已用空间非常快呢？因为只需要查看每个块组的块位图即
块
存
是1024字节，
外损坏时就可以用其它拷贝来恢复，从而减少损失。
是8KB,
规
可
一个块组中的块是这样利用的：数据块存储所有文件的数据，
·对于常规文件，文件的数据存储在数据块中。
、目录、符号链接等）
以表示8b个块的占用情况，
闲可用。
块，其中的每个bit代表本块组中的一个块，这个bit为1表示该块已用，这个bit为0表示该块
仍然空闲可用呢？块位图就是用来描述整个块组中哪些块已用哪些块空闲的，它本身占一
储该块组的描述信息。那么如何知道哪些块已经用来存储文件数据或其它描述信息,
·对于目录，该目录下的所有文件名和目录名存储在数据块中，注意文件名保存在它所在
也可以用mke2fs的-i参数手动指定每多少个字节分配一个inode。
而不需要搜遍整个分区。相反，
定，mke2fs工具会计算出最优的数值。
目录的数据块中，除文件名之外，ls-1命令看到的其它信息都保存在该文件
一个文件除了数据需要存储之外，
权限，文件大小，
因此-
、用mke2fs格式化时默认块大小是1024字节，
，则数据块用完的时候inode会有一些浪费，
，用au命令查看一个较大目录的已用空间就非常慢，因
那么-
，创建/修改/访问时间等，也就是1s-1命令看到
一个块可以有8b个bit，这样大小的一个块位图
一些描述信息也需要存储，
换句话说,
如果平均每个文件的大小
，mke2fs格式化工具的默认策略
 比如某个分区的块大小
，例如文件类型（常
，可以用-b参数指
如果这个分
一个块组中
也可以
545
哪些
为
块
区
区
就
---
## Page 546
栏的数字原本是1,
hello2和nello除了文件名不一样之外，
实7就是"./hello"这7个字符，符号链接文件就保存着这样一
文件hello是刚创建的，
如：
两个数字，表示主设备号和次设备号，访问该文件时，内核根据设备号找到相应的驱动程序。再比
文件，
xconsole文件的类型是p（表示pipe）
录。再比如：
字
的整数倍。
为什么各目录的大小都是4096的整数倍？因为这个分区的块大小是4096，
现在做几个小实验来理解这些概念。
，如果一个目录中的文件很多，
 它代表内核中的一个设备驱动程序，
-rw-r--r--
lrwxrwxrwx
S
-rw-r--r--
crw-rw-rw-
drwx-
drwxr-xr-x
total
·对于符号链接,
ls -1
touch hello.
ls -l /dev
，为什么有的目录大有的目录小？因为目录的数据块保存着它下边所有文件和目录的名
1s
1n
在inode中。
设备文件、
路径名较长则分配-
的inode中。注意这个概念：目录也是一种文件，是一种特殊类型的文件。
./hello hello2
S
./hello halo
现在变成2了
L
22
 akaedu akaedu
字节数为0,
1 syslog adm
FIFO和socket等特殊文件没有数据块,
 akaedu akaedu 0
 akaedu
root
2
root
ftp
 akaedu akaedu 12288
，如果目标路径名较短则直接保存在inode中以便更快地查找，
 因此没有数据块,
一个数据块来保存。
akaedu
root
root
ftp
 符号链接文件halo指向hello，
一个块装不下这么多文件名，就可能分配更多的数据块给这个目
例如在home目录下1s-1:
，别的属性都一模一样，并且hello的属性发生了变化，
是一个FIFO文件，后面会讲到它其实是一块内核缓冲区的
2008-10-25 15:08
，也没有数据块,
2008-10-25
 2008-10-25
16384
4096
一个文件在文件系统中有几个名字（这些名字可以保
2008-10-25 11:33
2008-
15:04
15:04
10-
一个路径名。
原本应该写文件大小的地方写了1，5
25
 设备文件的主设备号和次设备号保存
. halo ->
hello
05:58
hello2
hello
字节数却是7,
一个文件在文件系统中的两个
再试试硬链接：
lost+found
ftp
 akaedu
./hello
./hello
，目录的大小总是数据块
zero
为什么呢？其
表示字符设
如果目标
546
比
这
备
目
---
## Page 547
做好之后对文件fs进行格式化，也就是把这个文件的数据块合起来看成一个1MB的磁盘分区，在这
如果要格式化一个分区来研究文件系统格式则必须有一个空闲的磁盘分区，
2.2.实例剖析 请点评
个分区上再划分出块组。
个1MB的文件并清零：
目录的硬链接。
首先创建目录a，
备
一个文件当作分区来格式化，然后分析这个文件中的数据来印证上面所讲的要点。首先创建一
个inode里读出来的。再研究
同一
一个文件，
8192 blocks per group, 8192 fragments per group
128 inodes,
Fragment
Block
OS
fs
mke2fs
S
drwxr-xr-x 
drwxr-xr-x 2 akaedu akaedu 4096 2008-10-25 16:15
total 8 
drwxr-xr-x
drwxr-xr-x
total :
'S
 dd if=/dev/zero of=fs count=256 bs=4K
block
mkdir a/b
mkdir a
blocks
type:
is not 
1S
 inode当然只有-
 目录的硬链接只能这种方式创建，用in命令可以创建目录的符号链接，但不能创建
-la a/b
2
，然后在它下面创建子目录a/b。
 group