    There are other optional parameters that you can use, such as the capacity of the cluster.
1. Run the following command to check whether your cluster was successfully created:
    ```azurecli-interactive
    az kusto cluster show --cluster-name azureclitest --resource-group testrg
    ```
1. Confirm the successful creation of the cluster by verifying the result contains `provisioningState` as `Succeeded`.
### [PowerShell](#tab/powershell)
1. Create your cluster by using the following command:
    ```azurepowershell-interactive
     New-AzKustoCluster -ResourceGroupName testrg -Name mykustocluster -Location westus2 -SkuTier Standard -SkuCapacity 2 -SkuName 'Standard_E8ads_v5'
    ```
   |**Setting** | **Suggested value** | **Field description**|
   |---|---|---|
   | Name | *mykustocluster* | The desired name of your cluster.|
   | Sku | *Standard_E8ads_v5* | The SKU that will be used for your cluster. |
   | ResourceGroupName | *testrg* | The resource group name where the cluster will be created. |
    There are other optional parameters that you can use, such as the capacity of the cluster.
1. Run the following command to check whether your cluster was successfully created:
    ```azurepowershell-interactive
    Get-AzKustoCluster -Name mykustocluster -ResourceGroupName testrg
    ```
1. Confirm the successful creation of the cluster by verifying the result contains `provisioningState` as `Succeeded`.
### [ARM template](#tab/arm)
To learn how to deploy the following ARM template using PowerShell, see [Use the ARM template](#use-the-arm-template). Alternatively, you can [deploy the template in the Azure portal](/samples/azure/azure-quickstart-templates/kusto-cluster-database/) by selecting **Deploy to Azure**.
### ARM template
You can use this template for your own deployments, or customize it to meet your requirements. For the JSON syntax and properties to use in a template, see [Microsoft.Kusto resource types](/azure/templates/microsoft.kusto/allversions).
```json
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "clusters_kustocluster_name": {
            "type": "string",
            "defaultValue": "[concat('kusto', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "Name of the cluster to create"
            }
        },
        "databases_kustodb_name": {
            "type": "string",
            "defaultValue": "kustodb",
            "metadata": {
                "description": "Name of the database to create"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        }
    },
    "variables": {},
    "resources": [
        {
            "name": "[parameters('clusters_kustocluster_name')]",
            "type": "Microsoft.Kusto/clusters",
            "sku": {
                "name": "Standard_E8ads_v5",
                "tier": "Standard",
                "capacity": 2
            },
            "apiVersion": "2022-12-29",
            "location": "[parameters('location')]",
            "tags": {
                "Created By": "GitHub quickstart template"
            },
            "properties": {
                "trustedExternalTenants": [],
                "optimizedAutoscale": {
                    "version": 1,
                    "isEnabled": true,
                    "minimum": 2,
                    "maximum": 10
                },
                "enableDiskEncryption": false,
                "enableStreamingIngest": false,
                "virtualNetworkConfiguration": {
                    "subnetId": "",
                    "enginePublicIpId": "",
                    "dataManagementPublicIpId": ""
                },
                "keyVaultProperties": {
                    "keyName": "",
                    "keyVaultUri": "",
                    "userIdentity": ""
                },
                "enablePurge": false,
                "enableDoubleEncryption": false,
                "engineType": "V3"
            },
            "identity": {
                "type": "SystemAssigned, UserAssigned",
                "userAssignedIdentities": {
                    "": {}
                }
            }
        },
        {
            "name": "[concat(parameters('clusters_kustocluster_name'), '/', parameters('databases_kustodb_name'))]",
            "type": "Microsoft.Kusto/clusters/databases",
            "apiVersion": "2022-12-29",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Kusto/clusters', parameters('clusters_kustocluster_name'))]"
            ],
            "properties": {
                "softDeletePeriodInDays": 365,
                "hotCachePeriodInDays": 31
            }
        }
    ]
}
```
### Use the ARM template
The following steps explain how to deploy the ARM template using PowerShell.
1. Open [Azure Cloud Shell](https://shell.azure.com), and follow the instructions to sign in.
1. Select **Copy** to copy the PowerShell script.
    ```azurepowershell-interactive
    $projectName = Read-Host -Prompt "Enter a project name that is used for generating resource names"
    $location = Read-Host -Prompt "Enter the location (i.e. centralus)"
    $resourceGroupName = "${projectName}rg"
    $clusterName = "${projectName}cluster"
    $parameters = @{}
    $parameters.Add("clusters_kustocluster_name", $clusterName)
    $templateUri = "https://azure.microsoft.com/resources/templates/kusto-cluster-database/"
    New-AzResourceGroup -Name $resourceGroupName -Location $location
    New-AzResourceGroupDeployment -ResourceGroupName $resourceGroupName -TemplateUri $templateUri -TemplateParameterObject $parameters
    Write-Host "Press [ENTER] to continue ..."
    ```
1. Right-click the shell console, and then select **Paste**.
    > [!NOTE]
    > It takes a few minutes to create an Azure Data Explorer cluster and database.
1. To verify the deployment, use the following Azure PowerShell script. If the Cloud Shell is still open, you don't need to copy/run the first line (Read-Host).
    ```azurepowershell-interactive
    $projectName = Read-Host -Prompt "Enter the same project name that you used in the last procedure"
    Install-Module -Name Az.Kusto
    $resourceGroupName = "${projectName}rg"
    $clusterName = "${projectName}cluster"
    Get-AzKustoCluster -ResourceGroupName $resourceGroupName -Name $clusterName
    Write-Host "Press [ENTER] to continue ..."
    ```
---
## Create an Azure Data Explorer database
In this section, you'll create a database within the cluster created in the previous section.
### [C#](#tab/csharp)
1. Create your database by using the following code:
    ```csharp
    var cluster = (await clusters.GetAsync(clusterName)).Value;
    var databases = cluster.GetKustoDatabases();
    var databaseName = "mykustodatabase";
    var softDeletePeriod = TimeSpan.FromDays(3650);
    var hotCachePeriod = TimeSpan.FromDays(3650);
    var databaseData = new KustoReadWriteDatabase
    {
        Location = clusterData.Location, SoftDeletePeriod = softDeletePeriod, HotCachePeriod = hotCachePeriod
    };
    await databases.CreateOrUpdateAsync(WaitUntil.Completed, databaseName, databaseData);
    ```
    > [!NOTE]
    > If you are using C# version 2.0.0 or below, use Database instead of ReadWriteDatabase.
   |**Setting** | **Suggested value** | **Field description**|
   |---|---|---|
   | clusterName | *mykustocluster* | The name of your cluster where the database will be created.|
   | databaseName | *mykustodatabase* | The name of your database.|
   | resourceGroupName | *testrg* | The resource group name where the cluster will be created. |
   | softDeletePeriod | *3650:00:00:00* | The amount of time that data will be kept available to query. |
   | hotCachePeriod | *3650:00:00:00* | The amount of time that data will be kept in cache. |
2. Run the following command to see the database that you created:
    ```csharp
    databaseData = (await databases.GetAsync(databaseName)).Value.Data as KustoReadWriteDatabase;
    ```
### [Python](#tab/python)
1. Create your database by using the following command:
    ```Python
    from azure.mgmt.kusto import KustoManagementClient
    from azure.common.credentials import ServicePrincipalCredentials
    from azure.mgmt.kusto.models import ReadWriteDatabase
    from datetime import timedelta
    #Directory (tenant) ID
    tenant_id = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"
    #Application ID
    client_id = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"
    #Client Secret
    client_secret = "xxxxxxxxxxxxxx"
    subscription_id = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"
    credentials = ServicePrincipalCredentials(
        client_id=client_id,
        secret=client_secret,
        tenant=tenant_id
    )
    location = 'Central US'
    resource_group_name = 'testrg'
    cluster_name = 'mykustocluster'
    soft_delete_period = timedelta(days=3650)
    hot_cache_period = timedelta(days=3650)
    database_name = "mykustodatabase"
    kusto_management_client = KustoManagementClient(credentials, subscription_id)
    database_operations = kusto_management_client.databases
    database = ReadWriteDatabase(location=location,
          soft_delete_period=soft_delete_period,
          hot_cache_period=hot_cache_period)
    poller = database_operations.begin_create_or_update(resource_group_name = resource_group_name, cluster_name = cluster_name, database_name = database_name, parameters = database)
    poller.wait()
    ```
    > [!NOTE]
    > If you are using Python version 0.4.0 or below, use Database instead of ReadWriteDatabase.
   |**Setting** | **Suggested value** | **Field description**|
   |---|---|---|
   | cluster_name | *mykustocluster* | The name of your cluster where the database will be created.|
   | database_name | *mykustodatabase* | The name of your database.|
   | resource_group_name | *testrg* | The resource group name where the cluster will be created. |
   | soft_delete_period | *3650 days, 0:00:00* | The amount of time that data will be kept available to query. |
   | hot_cache_period | *3650 days, 0:00:00* | The amount of time that data will be kept in cache. |
1. Run the following command to see the database that you created:
    ```Python
    database_operations.get(resource_group_name = resource_group_name, cluster_name = cluster_name, database_name = database_name)
    ```
### [Go](#tab/go)
The following code shows how to create a database. The package imports and environment variable initiation is the same as in the previous section. To clone the code repository, see [Manage an Azure Data Explorer cluster using Azure Go SDK](https://github.com/Azure-Samples/azure-data-explorer-go-cluster-management/tree/main).
1. Run the following code to create the database:
    ```golang
    func createDatabase(sub, rgName, clusterName, location, dbName string) {
     ctx := context.Background()
     client := getDBClient(sub)
     future, err := client.BeginCreateOrUpdate(ctx, rgName, clusterName, dbName, &armkusto.ReadWriteDatabase{Kind: to.Ptr(armkusto.KindReadWrite), Location: &location}, nil)
     if err != nil {
      log.Fatal("failed to start database creation ", err)
     }
     log.Printf("waiting for database creation to complete - %s\n", dbName)
     resp, err := future.PollUntilDone(ctx, nil)
     if err != nil {
      log.Fatal(err)
     }
     kdb := resp.GetDatabase()
     log.Printf("created DB %s with ID %s and type %s\n", *kdb.Name, *kdb.ID, *kdb.Type)
    }
    createDatabase(subscription, rgName, clusterNamePrefix+clusterName, location, dbNamePrefix+databaseName)
    ```
1. List the databases to ensure successful creation:
    ```golang
    func listDatabases(sub, rgName, clusterName string) {
     log.Printf("listing databases in cluster %s\n", clusterName)
     ctx := context.Background()
     result := getDBClient(sub).NewListByClusterPager(rgName, clusterName, nil)
     data := [][]string{}
     for result.More() {
      temp, err := result.NextPage(ctx)
      if err != nil {
       log.Fatal(err)
      }
      for _, db := range temp.Value {
       if *db.GetDatabase().Kind == armkusto.KindReadWrite {
        data = append(data, []string{*db.GetDatabase().Name, string(*db.GetDatabase().Kind), *db.GetDatabase().Location, *db.GetDatabase().Type})
       }
      }
     }
     table := tablewriter.NewWriter(os.Stdout)
     table.SetHeader([]string{"Name", "State", "Location", "Type"})
     for _, v := range data {
      table.Append(v)
     }
     table.Render()
    }
    listDatabases(subscription, rgName, clusterNamePrefix+clusterName)
    ```
### [Azure CLI](#tab/azcli)
1. Create your database by using the following command:
    ```azurecli-interactive
    az kusto database create --cluster-name azureclitest --database-name clidatabase --resource-group testrg --read-write-database soft-delete-period=P365D hot-cache-period=P31D location=westus
    ```
   |**Setting** | **Suggested value** | **Field description**|
   |---|---|---|
   | cluster-name | *azureclitest* | The name of your cluster where the database will be created.|
   | database-name | *clidatabase* | The name of your database.|
   | resource-group | *testrg* | The resource group name where the cluster will be created. |
   | read-write-database | *P365D* *P31D* *westus* | The database type. Parameters: *soft-delete-period* - Signifies the amount of time the data will be kept available to query. See [retention policy](kusto/management/retention-policy.md) for more information. *hot-cache-period* - Signifies the amount of time the data will be kept in cache. See [cache policy](kusto/management/cache-policy.md) for more information. *location* -The location where the database will be created. |
1. Run the following command to see the database that you created:
    ```azurecli-interactive
    az kusto database show --database-name clidatabase --resource-group testrg --cluster-name azureclitest
    ```
### [PowerShell](#tab/powershell)
1. Create your database by using the following command:
    ```azurepowershell-interactive
    New-AzKustoDatabase -ResourceGroupName testrg -ClusterName mykustocluster -Name mykustodatabase -SoftDeletePeriod 3650:00:00:00 -HotCachePeriod 3650:00:00:00
    ```
   |**Setting** | **Suggested value** | **Field description**|
   |---|---|---|
   | ClusterName | *mykustocluster* | The name of your cluster where the database will be created.|
   | Name | *mykustodatabase* | The name of your database.|
   | ResourceGroupName | *testrg* | The resource group name where the cluster will be created. |
   | SoftDeletePeriod | *3650:00:00:00* | The amount of time that data will be kept available to query. |
   | HotCachePeriod | *3650:00:00:00* | The amount of time that data will be kept in cache. |
1. Run the following command to see the database that you created:
    ```azurepowershell-interactive
    Get-AzKustoDatabase -ClusterName mykustocluster -ResourceGroupName testrg -Name mykustodatabase
    ```
### [ARM template](#tab/arm)
The cluster and database are created together with the ARM template in the previous section.
---
## Next step
> [!div class="nextstepaction"]
> [Create a table](create-table-wizard.md)