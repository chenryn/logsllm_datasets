a client is forwarded to the entry nodes immediately, the en-
try nodes will be the ﬁrst nodes to forward the transaction.
In case when the transcation was sent sequentially with 100
One may argue that some Bitcoin pools are powerful enough
to aﬀord that many hash calls. However, the vast majority of
pool’s computing power is contained in custom-built ASIC
miners, which implement only a speciﬁc instance of SHA-
256 and can not be reconﬁgured for another hash function,
say, SHA-3. The exact fraction of GPU and CPU computing
power is unknown, but at the time when these architectures
were dominant, the total computing power was by several
orders of magnitude smaller than now.
6.2 Blurring the Connectivity Fingerprint
As a possible countermeasure against client de-anonymization
adding random delay after the transaction could be an op-
tion. This will remove linkability of transactions and will
also prohibit distinguishing of diﬀerent clients from the same
ISP. This however will not prevent the attacker from learn-
ing the ISP of the client and is against current trend of in-
creasing Bitcoin usability by making transactions propagate
as fast as possible. One can also increase the percentage
of trickled transactions from 75% to 90%, this of course will
again increase transaction propagation delays. We note that
trickling is essential to prevent our attacks. Without trick-
ling the attacker would need to make only 1 connection to
each peer, instead of 20-50 in the current attack. This is
much less noticeable.
Another eﬃcient counter measure is to decrease the num-
ber of outgoing connections from 8 to 4 or even 3; this
however has an implication that the network becomes less
connected. To model this case, we ﬁrst approximated the
probability distribution of having L extra nodes among the
top-10 (Table 3 in Appendix A) as a binomial distribution
with parameters (8, 0.56), which yields the same detection
rate. Then we assumed that the probability distribution for
4 nodes is also binomial with parameters (4, 0.56). This as-
sumption yields the detection rate 0.01 for 3-tuples and 0.1
for 2-tuples, which means that the identiﬁcation of clients
based on 2-tuple approach would still work with 10% chance.
For 3 extra nodes we obtain the detection rate 0.001 for 3-
tuples and 0.03 for 2-tuples.
If it is important to keep the present level of connectivity
there is an option to introduce a connection decay mech-
anism, which would close connections at random based on
certain decay rate which can be a function of the client trans-
action frequency and average transaction frequency of the
network. We note that a simple simultaneous refresh of all
the eight connections after each transaction, which might
seem like a natural countermeasure, in practice will be easy
to trace. This is because a new octet of connections would
broadcast the same ISP address as did an old octet. If this
happens immediately after a new transaction the link be-
tween the old and the new octet IDs would be obvious.
7. EXPERIMENTAL RESULTS
As a proof of concept we implemented and tested our at-
tack on the Bitcoin testnet. We did not perform a deanonymi-
sation attack on real clients for ethical reasons. For our ex-
periments we built our own Bitcion client, which included
functionality speciﬁc for our attack – sending speciﬁc Bit-
coin messages upon request or establishing various numbers
of parallel connections to the same Bitcoin server, etc. When
imitating clients we used the main Bitcoin client. In order
to periodically get the list of all running Bitcoin servers we
used an open source crawler [4].
Figure 3: Steps necessary to forward a transaction
ms between transmissions we still expect a fraction of entry
nodes to be among the ﬁrst 10 to forward corresponding IN-
VENTORY message to one of the attacker’s nodes. This fraction
obviously depends on the propagation delay between Bitcoin
peers. The higher the propagation delay the less signiﬁcant
becomes delay of 100 ms in trickling. For example if the
propagation delay is 300 ms between the client and each en-
try node it’s likely that 3 entry nodes will be among the ﬁrst
to forward the INVENTORY message (given that the attacker
has enough connections to Bitcoin servers).
Remark 2.
The attack presented in this section requires from an at-
tacker only to be able to keep a signiﬁcant number of connec-
tions to Bitcoin servers without sending large amount data.
In order to make the attack less detectable an attacker might
decide to establish connection to a given Bitcoin server from
diﬀerent IP addresses, so that all connection look like they
came from diﬀerent unrelated clients. The same set of IP
addresses can be used for diﬀerent servers.
Remark 3.
The technique considered in the section provides unique
identiﬁcation of Bitcoin clients for the duration of a session,
and thus if a client makes multiple transactions during one
session they can be linked together with very high proba-
bility. Note that this is done even if the client uses totally
unrelated public keys/Bitcoin wallets, which have no rela-
tion in the Bitcoin transaction graph and thus such linkage
would be totally unachievable via transaction graph analy-
sis [11, 15]. Moreover we can easily distinguish all the dif-
ferent clients even if they come from the same ISPs, hidden
behind the same NAT or ﬁrewall address.
6. COUNTERMEASURES
6.1 Preventing Tor Blacklisting
It is desirable to allow the Bitcoin peers to use Tor and
still to keep some blacklisting capability. We suggest making
every connection time- or computation-consuming to radi-
cally increase the attack cost. For instance, any peer that
initiates a connection might be required to present some
proof-of-work, e.g., a hash of its IP, the timestamp, and the
nonce that has a certain number of trailing zeros. If we re-
quire 32 zero bits, then to separate a single peer from the
Tor network would cost about 245 hash computations, which
takes several days on a modern PC.
16 Checks[Trickling]Inventory(tx_hash)getdata(tx_hash)TransactionClientEntryPeer AInventory(tx_hash)getdata(tx_hash)TransactionFor the time of experiments (May 2014) the number of
running Bitcoin servers in the testnet ﬂuctuated between
230 and 250, while the estimated average degree of the nodes
was approximately 30. In our experiments we were imitating
several diﬀerent users connecting to the testnet from the
same ISP’s IP address and from diﬀerent ISP’s at diﬀerent
times. As an attacker we added 50 additional connections to
each Bitcoin server. For each experiment in the ﬁrst phase
of the attack we propagated clients’ addresses in the testnet
10 minutes before they started to send their transactions.
In total we (as clients) sent 424 transactions.
In the ﬁrst experiment we conﬁrm our expectations that
transactions are ﬁrst forwarded by entry nodes and analyse
the number of entry nodes that were among the ﬁrst 10 to
forward the transactions (i.e. we assume that the attacker
correctly identiﬁed all entry nodes). We splitted all trans-
actions into two sets: the ﬁrst set contains 104 transactions,
which were forwarded to the entry nodes immediately; the
second set contains all other 320 transactions (i.e. for which
trickling was used). Fig. 4 shows the number of entry nodes
that were among the ﬁrst 10 to forward the transaction to
the attacker’s nodes for these two sets. As expected if a
transaction was immediately forwarded to all entry nodes
the attacker was able to “catch” three or more of them in
99% of cases. In case of transactions from the second set,
the attacker was able to ”catch” 3 or more entry nodes in
70% of cases. We also observed that for the majority of
transactions the ﬁrst two nodes to forward the transaction
to the attacker were the entry nodes.
8. ANALYSIS
The success rate of the attack presented above depends
on a number of parameters, among which the most impor-
tant is the fraction of attacker’s connections among all the
connections of client’s entry nodes. The fewer the number of
connections of entry nodes are, the more connections the at-
tacker can establish and the higher chance is to deanonymise
the client. In this section we analyze each step of the attack
and compute success rates for some parameter sets.
8.1 Number of connections to servers
Both mapping client to entry nodes and mapping entry
nodes to transactions depends on the number of connections
the attacker can establish to the Bitcoin servers. Assuming
the entry node had n connections and the attacker added
m new connections, thus the total number of connections is
N = n+m, the probability to receive the address at the ﬁrst
hop is paddr(n, N ) = 1 − n
N−1 . For a transaction which
was not forwarded immediately to the peer’s neighbours the
probability that one of attacker’s nodes is chosen as trickle
node in the ﬁrst round is ptx = m
N . For n = 50, m =
50, paddr = 0.75 and ptx = 0.50. For n = 90, m = 35,
paddr = 0.49 and ptx = 0.28. The number of connections
that the adversary can establish to a server is limited by the
total number of 125 connections a Bitcoin peer can have by
default.
N · n−1
In order to see how many open connection slots Bitcoin
peers have we conducted the following experiment in April
2014. For each Bitcoin server that we found we tried to es-
tablish 50 parallel connections and check the actual number
of established connections9. Fig. 5 shows the distribution of
number of established connections. The experiment shows
Figure 4: Intersection of top-10 senders and entry
nodes
In the second experiment we executed all steps of the at-
tack. In our experiment each client was successfully uniquely
identiﬁed by his own set of entry nodes and on average we
identiﬁed 6 entry nodes for each client. Assuming that 3
entry nodes is enough for unique identiﬁcation of a client
we correctly linked 59.9% of all transactions to the corre-
sponding IP address by matching entry nodes of clients and
ﬁrst 10 Bitcoin servers which forwarded the transaction. We
correctly glued together all transactions of the same client
which were made during one session.
In a bit more conservative setting we added only 20 ad-
ditional nodes in which case we successfully deanonymised
41% of our transactions.
Figure 5: Distribution of open slots
that 60% of peers allow 50 connections or more, and 80% of
Bitcoin peers allowed up to 40 connections. Note that even
if suﬃcient number of connection cannot be established to a
Bitcoin peer immediately they can be established in longer
term since many Bitcoin clients will eventually disconnect
and thus allow new connections (according to an example
disconnection rate as shown in Fig. 7 it might take several
hours, but once an attacker got the required number of con-
nections she can keep them as long as needed). Also note
9We did not try establish more than 50 connections in order
not to degrade the Bitcoin network performance.
 0 5 10 15 20 25 30 0 1 2 3 4 5 6 7 8%, transactionsIntersection of 10 first senders and entry nodesTransmitted immediatelyTrickled out 60 65 70 75 80 85 90 95 100 0 10 20 30 40 50% of bitcoin serversNumber of open connection slotsthat Bitcoin servers allow any number of connections from
a single IP address.
Finally the attacker does not send much traﬃc over the
established connections but rather listens for messages. In-
coming traﬃc is normally free of charge if one rents a server.
Thus in spite of the large number of connections that an at-
tacker needs to establish the attack remains very cheap.
8.2 Estimating false positives
Assume that some of the steps of that attack fail. Then
the ﬁrst 10 peers to report the transaction to the attacker
will be some random Bitcoin peers. If there is no 3-subset
of these 10 that match some entry node set, then such a
transaction is marked as unrecognized by an attacker. The
probability that nodes accidentally match any set of Bitcoin
entry nodes (we call this a collision) for a given transaction
is
(cid:18) 1
(cid:19)3
N
(cid:32)
(cid:33)
(cid:32)
(cid:33)
pc =
10
3
×
10
3
×
where N is the number of Bitcoin servers in the network.
Given that there are about 8000 Bitcoin servers and 100,000
Bitcoin clients, the number of incorrectly assigned transac-
tions is negligible.
We now estimate the probability that an attacker adds a
wrong entry node to the set of entry nodes of a particular
client (we recall that according to the address propagation
mechanism after receiving an address a peer forwards it to
only two randomly chosen responsible nodes). For this to
happen, one or more entry nodes should forward the client’s
address Ca over one of non-attacker’s connections, whence
(since the attacker periodically propagates the client’s ad-
dress) at least one of responsible nodes for address Ca should
change on an entry node after the attacker last propagated
Ca.
In order to estimate this probability we collected statistics
from our Bitcoin peer for 60 days from March 10 till May
10 2014. We collected information about 61,395 connections
in total. Assume that the attacker propagated Ca at time
t0, the probability that a responsible node will be diﬀerent
at time t1 = t0 + ∆t depends on the number of new con-
nections the entry node has at t1 and number of nodes that
disconnected since t0. Fig. 6 shows probability density func-
tion of the number of new connections (i.e. the incoming
connections rate) for diﬀerent values of ∆t.
Fig. 7 shows probability density function of the number of
disconnection (i.e. connection close rate) for diﬀerent values
of ∆t.
We use these distributions to simulate the address propa-
gation and calculate the probability that the client’s address
is forwarded by an entry node over a non-attacker’s link af-
ter time ∆t after the attacker sent this address over the
network. We obtained probabilities for diﬀerent number of
attacker’s and non-attackers’s connections and for each con-
nection setting and each ∆t we executed 10,000 runs of the
model. Fig. 8 shows the obtained probabilities. The number
of attacker’s connections is denoted by m and the number
of non-attacker’s connections by n.
As expected, the more connection a node has the less prob-
able that the responsible nodes for an address will change
after ∆t. Another observation is that the probability of a
node to forward the client’s address over one of the non-
attacker’s connections depends on the total number of con-
Figure 6: Probability density of number new con-
nections
Figure 7: Probability density of number lost con-
nections
nections rather than on the fraction of attacker’s connec-
tions. From Fig. 8 we conclude that resending client ad-
dresses over the Bitcoin network every 10 minutes seems to
be a reasonable choice. Also note that even if a client’s ad-
dress was forwarded over a non-attacker’s link, the further
propagation of the address will likely stop at the next hop.
8.3 Overall success rate
The success rate Pc of the attack depends on a number of
characteristics of the real network.We propose the following
method to estimate it. First, we assume that the attacker
establishes all possible connections to Bitcoin servers. From
the data used in Figure 5, we estimate the average value
pAvg
addr of the parameter paddr. We did not establish more
than 50 connections to avoid overloading servers, and we
take a pessimistic estimation that 50 is the maximal number
of attacker’s connections. This yields
addr ≈ 0.34.
pAvg
Then we assume that both the testnet and the mainnet ex-
hibit similar local topology so the probabilities P3(L) for
the number L of entry nodes being in top-10 are almost the
same (Figure 4). We calculate the probabilities P1(R) for
the number R of entry nodes being detected out of 8 as a
 0 10 20 30 40 50 60 70 80 90 0 1 2 3 4 5 6 7 8% of experimentsNumber of new connections∆t=60 seconds∆t=120 seconds∆t=180 seconds∆t=600 seconds∆t=1200 seconds 0 10 20 30 40 50 60 70 80 90 0 1 2 3 4 5 6 7 8% of experimentsNumber of lost connections∆t=60 seconds∆t=120 seconds∆t=180 seconds∆t=600 seconds∆t=1200 secondswith lower diﬃculty and the same transaction history within
a small timeframe.
Block construction rules.
It may happen that distinct miners create blocks almost
simultaneously, which is called a fork. In this case the net-
work temporarily splits into two parts, which try to generate
a valid block at their own end of the fork. When a new block
is found by either part, a higher diﬃculty principle applies:
the chain with higher total diﬃculty10 is accepted, and the
one with lower is discarded. As a result, a new block at ei-
ther end of the fork yields a chain with higher diﬃculty, and
the chain is accepted by all the peers. Due to this short term
uncertainty it is recommended to wait at least 6 blocks (i.e.
about 60 minutes) as a conﬁrmation that the transaction be-
came part of the block chain. To further ﬁx the block chain,
the administrators of bitcoind routinely hard-code hashes of
some blocks into the client (currently 12 checkpoint blocks,
on average every 25,000-th, are hard-coded) code.
The Bitcoin protocol aims to sustain a constant rate of
block production. Every 2016 blocks (about two weeks) the
diﬃculty is recalculated so that blocks are generated every
10 minutes. The exact rules are as follows:
• For block Xi, i (cid:54)= 2016k, the diﬃculty is equal to that
of Xi−1;
• For block Xi, i = 2016k, we extract the time T2 of
block Xi−1 and the time T1 of block Xi−2016. Let the
time diﬀerence ∆T = T2 − T1 be expressed in days.
Then the diﬃculty is multiplied by 14
∆T . The protocol
also enforces that the multiplier can not exceed 4 or
be smaller than 0.25.
Bitcoin enforces a number of additional restrictions to dis-
courage malicious miners to play with timestamps for their
own beneﬁt. The following two rules are important for us:
• The timestamp of Xi can not be older than the me-
dian (i.e., the middle element of the sorted array) of
11 previous timestamps.