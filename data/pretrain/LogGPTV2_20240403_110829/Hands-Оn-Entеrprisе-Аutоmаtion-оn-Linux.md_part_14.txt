[ 135 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
This is quite definitive in its behavior, which is exactly what we would want. Ansible is not
just limited to checking for files though—we could also check that our sshd_config file
has the PermitRootLogin no line we looked at earlier:
1. We could do this with a role as follows:
---
- name: Check root login setting in sshd_config
command: grep -e "^PermitRootLogin no" /etc/ssh/sshd_config
register: grepresult
failed_when: grepresult.rc != 0
- name: Display a message if root login is disabled
debug:
msg: root login disabled for SSH
2. Now, running this when the setting is not in place again yields a failure:
[ 136 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
3. Yet if we put this setting in place, we see the following:
Again, it's very definitive. Note the changed status in the preceding output—this is so
because we used the command module, which successfully ran command—hence, it always
returns changed. We could alter this behavior with a changed_when clause to this task if
we wanted.
In this manner, Ansible playbooks can be put together that not only customize your build
but also validate the end result. This is especially useful for testing purposes, and where
security is a consideration.
Before completing this chapter, let's take a look, in the next section, at how we pull together
all of the disparate roles and pieces of code we have discussed so far to form a cohesive
automated solution.
Putting it all together
Throughout this section of this chapter, you will note that we have used roles for all of our
examples. Naturally, when it comes to building out your final image, you don't want to end
up running lots of playbooks individually as we have done here. Luckily, if we were to
combine everything, all we would need to do is put all of the roles together in
the roles/ subdirectory, and then reference them all in the site.yml playbook. The
roles directory should look something like this:
~/hands-on-automation/chapter05/example09/roles> tree -d
.
├── checkbzip2
[ 137 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
│ └── tasks
├── checksshdroot
│ └── tasks
├── filecopyexample
│ ├── files
│ └── tasks
├── installbzip2
│ └── tasks
├── packageinstall
│ └── tasks
├── securesshd
│ └── tasks
└── templatentp
├── tasks
└── templates
Then, our site.yml file will look like this:
---
- name: Run example roles
hosts: all
become: yes
roles:
- filecopyexample
- packageinstall
- templatentp
- installbzip2
- securesshd
- checkbzip2
- checksshdroot
Running this code is left as an exercise for the reader, as we have already run all of the
component parts earlier in this chapter. However, if all goes well then, when all roles have
completed, there should be no failed statuses—just a mixture of changed and ok.
If you have run through the process of post-build customization, as detailed in this chapter,
the resulting image will likely need cleaning up a second time. We could resort to the
virt-sysprep command again, however, Ansible can help us here too. In the next section,
we will explore the use of Ansible for cleaning up images for large scale deployment.
[ 138 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
Cleaning up the build with Ansible
By now, you should have a pretty good idea of how to build or validate a base image, and
then customize it with Ansible. Before we close this chapter, it is worth revisiting the task of
cleaning up your image for deployment. Whether you have built an image from scratch or
downloaded a ready-made one, if you have booted it up and run commands on it, either
manually or using Ansible, you are likely to have a whole load of items that you really
don't want present every time you deploy the image. For example, do you really want all of
the system log files from every configuration task you performed and the initial boot to be
present on every single virtual machine deployed? If you had to run any commands by
hand (even if it was to set up authentication to allow Ansible to run), do you want those
commands in the .bash_history file of the account you ran them in on every
deployment?
The answer to these is, of course, no. Then there are those files that could actually cause
problems if cloned—for example, duplicate SSH host keys or MAC address-specific
configurations such as udev configuration data. All of this should be cleaned out before
you consider the image ready for distribution.
Ansible can help with this task too, although it is recommended that you use the virt-
sysprep tool that we demonstrated earlier in this chapter, as this takes care of all of these
steps for you. There might be a reason why you don't want to use this tool—perhaps you
don't have access to it in your environment, or there isn't a build for your preferred
distribution of Linux. In this instance, you can use Ansible to perform the final cleanup. The
great thing about Ansible is that you can use the built-in modules, as we have
demonstrated so far in this chapter, but you can equally use raw shell commands—this can
be especially useful when you need to perform wildcard operations across a filesystem.
The following is an example of a role that relies on raw shell commands to clean up an
image in preparation for deployment. It is not as complete as the job performed by virt-
sysprep, but does serve as a good example of how this could be performed using Ansible.
Note that this example is specific to CentOS 7—if using a different operating system, then it
will be necessary to change paths, package database cleanup commands, and so on. Hence,
this playbook is presented to the reader very much as a practical example of how the
cleanup could be performed in Ansible, though it is intended that the reader takes this
further depending on their own requirements. First of all, we clean out the package
database, as this data need not be replicated across deployments:
---
- name: Clean out yum cache
shell: yum clean all
[ 139 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
We then continue by clearing out the logs—this is achieved by stopping the logging
daemon, forcing a rotation of the logs, and then recursively deleting the directory
containing them:
- name: Stop syslog
shell: service rsyslog stop
- name: Force log rotation
shell: /sbin/logrotate -f /etc/logrotate.conf
ignore_errors: yes
- name: Clean out logs
shell: /bin/rm -f /var/log/*-???????? /var/log/*.gz /var/log/*.[0-9]
/var/log/**/*.gz /var/log/**/*.[0-9]
- name: Truncate log files
shell: truncate -s 0 /var/log/*.log
- name: Truncate more logs
shell: truncate -s 0 /var/log/**/*.log
- name: Clear the audit log
shell: /bin/cat /dev/null > /var/log/audit/audit.log
- name: Clear wtmp
shell: /bin/cat /dev/null > /var/log/wtmp
We then clear our hardware and MAC address-specific configurations that would be
invalid on a deployed VM image:
- name: Remove the udev persistent device rules
shell: /bin/rm -f /etc/udev/rules.d/70*
- name: Remove network related MAC addresses and UUID's
shell: /bin/sed -i '/^\(HWADDR\|UUID\)=/d' /etc/sysconfig/network-
scripts/ifcfg-*
Following this, we clear out /tmp and remove any history files from user home directories.
The following example is not complete, but does show some pertinent examples:
- name: Clear out /tmp
shell: /bin/rm -rf /tmp/* /var/tmp/*
- name: Remove user history
shell: /bin/rm -f ~root/.bash_history /home/**/.bash_history
- name: Remove any viminfo files
shell: rm -f /root/.viminfo /home/**/.viminfo
[ 140 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
- name: Remove .ssh directories
shell: rm -rf ~root/.ssh m -rf /home/**/.ssh
Finally, we perform our final task—in this case, the removal of the SSH host keys. Note that
following this, we also shut down the VM—this is performed as part of this command to
prevent accidental creation of any additional history or logging data. Note also
the ignore_errors clause, which prevents the playbook from failing when the shutdown
occurs and the SSH connection is terminated:
- name: Remove SSH keys and shut down the VM (this kills SSH connection)
shell: /bin/rm -f /etc/ssh/*key* && shutdown -h now
ignore_errors: yes
Running this code on a CentOS 7 VM will result is a fairly well-cleaned image, but there are
specifics not covered here. For example, we have cleared out all bash history, but if any
alternate shells were used, their data would not be cleaned. Similarly, we have cleaned out
VIM application data from root's home directory, but not any other applications that may
or may not have been used during the image creation. Hence, it is up to you to extend this
role as you require in your environment.
By this stage, you will have run through the entire process, end-to-end, of creating,
customizing, and cleaning up a Linux operating system for our proposed SOE. Effective use
of Ansible means that the entire process can be automated, and hence enables us to make a
strong start toward automation in the enterprise. All that remains is to deploy the template
we have created into your environment, and from here, you can clone it and build on it to
your heart's content.
Summary
We have seen several hands-on examples of how to obtain or build Linux virtual machine
images for use in a wide variety of scenarios and environments. We have seen how Ansible
lends itself to automating this process, and hence how it complements the image build
process to support the good practices we have previously discussed for automation in the
enterprise and, in particular, the creation and management of an SOE.
In this chapter, you learned how to build Linux images for templating purposes and indeed
obtain and verify ready-made ones. You then learned through practical examples how to
customize these template images with Ansible, covering key concepts such as package
installation and configuration file management. Finally, you learned how to ensure that
image builds are clean and tidy and do not contain data that would either be wasteful or
harmful to replicate across and infrastructure.
[ 141 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
In the next chapter of this book, we will look at how to create standardized images for use
on bare metal servers and in some traditional virtualization environments.
Questions
1. What is the purpose of system preparation (sysprep)?
2. When would you need to make use of Ansible facts in your roles?
3. How would you deploy a new configuration file to a virtual machine image
using Ansible?
4. Which Ansible module is used to download a file from the internet directly into a
virtual machine image?
5. How would you write a single Ansible role that will install packages on both
Ubuntu and CentOS?
6. Why would you wish to validate an ISO image you have downloaded?
7. How does the use of Ansible roles at this stage benefit the environment once it is
deployed?
Further reading
For an in-depth understanding of Ansible, please refer to Mastering Ansible, Third
Edition by James Freeman and Jesse Keating, available at https:/​/​www.​packtpub.
com/​gb/​virtualization-​and-​cloud/​mastering-​ansible-​third-​edition
For more details on the use of KVM for virtualization on Linux, please refer to
Mastering KVM Virtualization by Prasad Mukhedkar, Anil Vettathu, Humble Devassy
Chirammal, available at https:/​/​www.​packtpub.​com/​gb/​networking-​and-
servers/​mastering-​kvm-​virtualization
[ 142 ]
6
Custom Builds with PXE
Booting
When working with physical hardware, it is not a given that you could simply clone a
virtual machine template to the hard drive and expect it to work. It is, of course, entirely
possible to do this with the right tools, but it is tricky, and there is no guarantee the
resulting system will run.
For example, cloud-ready images will only have the kernel modules installed for the
common virtualized network adapters, and so, may not run (or not have network
connectivity) when installed on a modern piece of hardware.
In spite of this, it is still entirely possible to perform automated, standardized builds on
physical hardware, and this chapter provides a complete hands-on approach to doing so. In
conjunction with the preceding chapter, by the end of this one, you will have practical
experience of the automated build process for standardizing images for all your platforms,
whether they are virtual, cloud-based, or physical.
The following topics will be covered in this chapter:
PXE booting basics
Performing unattended builds
Adding custom scripts to unattended boot configurations
Custom Builds with PXE Booting Chapter 6
Technical requirements
In this chapter, we are going to look at the process of PXE booting, for physical and virtual
servers. You will require two servers on the same network, and it is recommended that the
network be isolated, as some of the steps performed in this chapter could be disruptive and,
even, destructive if performed in a live operational network.
You will need one server (or virtual machine) to be pre-installed with your choice of Linux
distribution—in our examples, we will use Ubuntu Server 18.04 LTS. The other server (or
virtual machine) should be blank, and suitable for reinstalling.
All example code discussed in this chapter is available from GitHub at: https:/​/​github.
com/​PacktPublishing/​Hands-​On-​Enterprise-​Automation-​on-​Linux/​tree/​master/
chapter06.
PXE booting basics
Before the widespread adoption of virtualization and cloud platforms, there was a
requirement to generate a standardized operating system build on physical servers,
without the need to visit a data center and insert some form of installation media. PXE
booting was created, as one of the common solutions to this requirement, and the name
comes from the Pre-eXecution Environment (think of a tiny, minimal operating system)
that is loaded so that an operating system installation can occur.
At a high level, when we talk about the PXE build of a given server, the following process is
occurring:
1. The server must be configured to use one (or all) of its network adapters for
network booting. This is commonly a factory default setting for most new
hardware.
2. Upon power-up, the server brings up the network interfaces, and on each, in
turn, attempts to contact a DHCP server.
3. The DHCP server sends back IP address configuration parameters, along with
further information on where the pre-execution environment should be loaded
from.
4. The server then retrieves the pre-execution environment, typically, using the
Trivial File Transfer Protocol (TFTP).
[ 144 ]
Custom Builds with PXE Booting Chapter 6
5. The PXE environment runs and looks in a known, well-defined location on the
TFTP server for configuration data.
6. The configuration data is loaded, and instructs the PXE environment how to
proceed. Normally, with Linux, this involves loading a kernel and initial
RAMDisk image from the TFTP server, which contains just enough Linux to
proceed with the installation, and pulling further installation sources from
another network service (often HTTP).
Although this all sounds rather complex, it is, in fact, quite straightforward when broken
down into a step-by-step process. As we proceed through this chapter, we will walk
through the process of building out a PXE boot server that is capable of performing an
unattended installation of either CentOS 7 or Ubuntu 18.04 Server. This will serve as a good
hands-on example, and also demonstrates how we can script our build processes even on
physical hardware, where the VM template processes we discussed in the last chapter are
not readily available.
Before any process of PXE booting can commence, we must first set up some supporting
services that provide the necessary network services. In the next section, we will look at
how these may be set up and configured.
Installing and configuring PXE-related services
As with just about any Linux setup, the exact way to do this will depend upon the Linux
distribution on which you are performing the installation, and also, the software packages
you are going to use. Here, we are going to make use of the ISC DHCP server, the
venerable TFTP daemon, and nginx. However, you could just as feasibly use dnsmasq and
Apache.
In many enterprises, these decisions will have already been made—most will have some
form of DHCP infrastructure already in place, and many businesses with IP telephony
systems will have a TFTP server too. Thus, this chapter serves to provide an example
only—real-world implementations will likely be driven by long-established corporate
standards.
There is no safety mechanism to prevent you from running two DHCP
servers on the same network. DHCP relies on broadcast messages, and so
any DHCP clients on the network will receive an answer from whichever
server answers them faster. As a result, it is entirely possible to stop a
network from functioning by setting up a second DHCP server. If you
follow the process outlined in this chapter, be sure you are performing it
on an isolated network, suitable for testing.
[ 145 ]
Custom Builds with PXE Booting Chapter 6
For this setup, we are going to assume that we have an isolated network. Our PXE server
will have the IP address 192.168.201.1, and the subnet mask will be 255.255.255.0.
These details will be important in setting up our DHCP server. Let's now walk through the
process of setting up your server to support PXE booting: