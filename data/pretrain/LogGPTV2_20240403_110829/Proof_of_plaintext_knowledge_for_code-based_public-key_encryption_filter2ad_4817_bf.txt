since the public key pksse contains [Pi ti]2.. In this section, we present such a protocol that is
The same protocol can be used to decentralize the setup of the SSE scheme from Section 6.3,
i yi, each of
similar to [KDK11].
Deﬁnition 30: Ideal Protocol DSum
A DSum on abelian groups G, G′ among n senders is deﬁned by three algorithms:
• DSSetup(1λ): Takes as input the security parameter 1λ. Generates the public pa-
rameters pp and the personal secret keys ski for all i ∈ [n].
G′.
• DSEncode(xi, ℓ, ski): Takes the group element xi ∈ G to encode, a label ℓ, and the
personal secret key ski of the user i. Returns the share Mℓ,i ∈ G′
• DSCombine({Mℓ,i}i∈[n]): Takes the shares {Mℓ,i}i∈[n] , and returns the valuePi Mℓ,i ∈
Correctness. For any label ℓ, we want Pr[DSCombine({Mℓ,i}i∈[n]) = Pi xi] = 1, where
the probability is taken over Mℓ,i ← DSEncode(xi, ℓ, ski) for all i ∈ [n], and (pp, (ski)i) ←
DSSetup(1λ) .
Security Notion. This protocol must guarantee the privacy of the xi’s, possibly excepted
their sum when all the shares are known. This is the classical security notion for multi-party
computation, where the security proof is performed by simulating the view of the adversary
from the output of the result: nothing when not all the shares are asked, and just the sum of
the inputs when all the shares are queried. We also have to deal with the corruptions, which
give the users’ secret keys.
6.5 Decentralizing MCFE
Our DSum Protocol
139
We present a DSum protocol for n users, with groups G = G′ = Zm
p . The security relies on the
CDH assumption in a group G of primer order p. Similar protocol can be found in [KDK11].
• DSSetup(1λ): generates G := (G, p, P ) ← GGen(1λ), and a hash function H onto Zm
all i ∈ [n], ti ←R Zp, ski := ti, pp := (G, H, ([ti])i). It returns pp,{ski}i∈[n].
p . For
• DSEncode(xi ∈ Zm
p , ℓ, ski): computes hℓ,i,j = H([tmin{i,j}], [tmax{i,j}], ti · [tj], ℓ) = hℓ,j,i ∈
Zm
p for all i, j ∈ [n], and returns:
Mℓ,i = xi −Xji
hℓ,i,j.
Correctness. The correctness should show that the sum of the shares is equal to the sum
of the xi’s: the former is equal to
xi −Xji
hℓ,i,j =Xi
hℓ,j,i =Xi
hℓ,i,j +Xj Xii
hℓ,j,i
Security Analysis
We will prove that there exists a simulator that generates the view of the adversary from the
In this proof, we will assume static corruptions (the set CS of the corrupted
output only.
clients is known from the beginning) and the hardness of the CDH problem. However, this
construction will only tolerate up to n−2 corruptions, so that there are at least 2 honest users.
But this is also the case for the MCFE.
W.l.o.g., we can assume that HS = {1, . . . , n − c} and CS = {n − c + 1, . . . , n}, by simply
reordering the clients, when CS is known. We will gradually modify the behavior of the
simulator, with less and less powerful queries. At the beginning, the DSEncode-query takes all
the same inputs as in the real game, including the secret keys. At the end, it should just take
the sum (when all the queries have been asked), as well as the corrupted xj’s.
Game G0: The simulator runs as in the real game, with known CS.
Game G1: The simulator is given a pair ([t], [t2]).
• DSSetup: for all 1 ≤ i ≤ n − c: αi ←R Zp, [ti] := [t + αi]. For all n − c i hℓ,i,j.
140
Chapter 6. Multi-Client Inner Product Functional Encryption
Game G2: The simulator does as above, but just uses a random [t′] ←R G instead of [t2], to
answer the DSEncode-queries.
This can make a diﬀerence for the adversary if the latter asks for the hash function on some
tuple (Xmin{i,j}, Xmax{i,j}, [ti·tj], ℓ), for i, j ≤ n−c, as this will not be the value hℓ,i,j, which has
been computed using Yi,j 6= [ti·tj]. In such a case, one can ﬁnd [ti·tj] = [t2+(αi+αj)·t+αiαj in
the list of the hash queries, and thus extract t2 = [t2]. As a consequence, under the hardness of
the square Diﬃe-Hellman problem (which is equivalent to the CDH problem), this simulation
is indistinguishable from the previous one.
Game G3: The simulator does as above excepted for the DSEncode-queries. If this is not the
last-honest query under label ℓ, the simulator returns Mℓ,i = −Pji hℓ,i,j; for the
last honest query, it returns Mℓ,i = SH −Pji hℓ,i,j, where SH =Pj∈HS xj.
Actually, for a label ℓ, if we denote iℓ the index of the honest player involved in the last
query, the view of the adversary is exactly the same as if, for every i 6= iℓ, we have replaced
hℓ,i,iℓ by hℓ,i,iℓ + xi (if iℓ > i) or by hℓ,i,iℓ − xi (if iℓ < i). We thus replace uniformly distributed
variables by other uniformly distributed variables: this simulation is perfectly indistinguishable
from the previous one.
Game G4: The simulator now ignores the values hℓ,i,j for honest i, j. But for each label, it
knows the corrupted xj’s, and can thus compute the values Mℓ,j for the corrupted users, using
the corrupted xj’s and secret keys. If this is not the last honest query, it returns a random
Mℓ,i. For the last honest query, knowing S =Pj xj, it outputs Mℓ,i = S −Pj6=i Mℓ,j.
As in the previous analysis, if one ﬁrst sets all the hℓ,i,j, for j 6= iℓ, this corresponds to
deﬁne hℓ,i,iℓ from Mℓ,i, for i 6= iℓ.
Application to DMCFE for Inner Products
into an decentralized MCFE. Each client computes S⊤
protocol to compute the sum, where the label is the vector y itself. Namely, we have:
One can convert the MCFE from Section 6.1 whose decryption keys are of the form Pi S⊤
• KeyGenShare(ski, y := (y1k···kyn)): outputs My,i ← DSEncode(S⊤
• KeyComb((My,i)i∈[n], y): outputs dky = (y, dy), where dy is publicly computed as
i yi
i yi independently, and we use the DSum
i yi, y, ski);
DSCombine({My,i}i∈[n]);
Using the last simulation game, we can now show that all the KeyGenShare(ski, y) are ﬁrst
simulated at random, and just the last query needs to ask the KeyGen-query to the MCFE
scheme to get the sum and program the output. Hence, unless all the honest queries are asked,
the functional decryption key is unknown.
Consequently, we can convert the MCFE from Section 6.1 into a decentralized MCFE.
Note that the transformation from Section 6.2 and Section 6.4, which remove the one chal-
lenge ciphertext restriction, and the incomplete ciphertext restriction, respectively, preserve
the decentralized feature of the DCMFE obtained from using the DSum on the MCFE from
Section 6.1. At the end, combining all transformations, we obtain a decentralized MCFE for
inner product that is many-AD-IND secure.
Decentralizing the setup. Note that the setup of the MCFE from Section 6.1 is already
decentralized, in the sense that each eki, mski can be generated independently for all i ∈ [n],
and dynamically (the users only have to agree on a particular group and hash function to use).
Applying the transformation from Section 6.2 preserves that feature, since an independent
single-input FE is used for each slot i ∈ [n]. Finally, the SSE from Section 6.3 can have a
distributed setup if we use a DSum protocol to compute the value [Pi ti]2 from the public key
pksse. Consequently, we obtain a scheme where there is no need of a trusted authority.
Chapter 7
Functional Encryption for Quadratic
Functions
In this section, we present the ﬁrst public-key FE scheme based on a standard assump-
tion that supports a functionality beyond inner product, or predicates.
In our scheme, ci-
phertexts are associated with a set of values, and secret keys are associated with a degree-
two polynomial. This way, the decryption of a ciphertext ct(x1,...,xn)∈Zn
p with a secret key
dkP ∈Zp[X1,...,Xn],deg(P )≤2 recovers P (x1, . . . , xn). The ciphertext size is O(n) group elements,
improving upon [ABDP15, ALS16], which would require O(n2) group elements, since they build
an FE scheme for inner product. Our FE scheme is proved selectively secure under the Matrix
Diﬃe-Hellman assumption [EHK+13], which generalizes standard assumptions such as DLIN
or k-Lin for k ≥ 1, and the 3-PDDH assumption [BSW06]. Constructions whose security is
justiﬁed in the generic group model can be found in [BCFG17, DGP18]. See also [Lin17, AS17]
for private-key variants. The state of the art for functional encryption for quadratic functions
is summarized in Figure 7.1.
Overview of our construction
The diﬃculty is to have ciphertexts ct(x1,...,xn) of O(n) group elements, that must hide the
message (x1, . . . , xn) ∈ Zn
p , but still contain enough information to recover the n2 values xi · xj
for i, j ∈ [n]. To ensure the message is hidden, the ciphertext will contain an encryption of each
value xi. Since we want to multiply together these encryptions to compute products xi·xj, and
since these encryption are composed of group elements, we require a pairing e : G1× G2 → GT ,
where G1, G2, and GT are additively written, prime-order groups. Namely, decryption pairs
encrypted values in G1 with encrypted values in G2. For this reason, it makes sense to re-write
References
security
public or private key
[AS17]
[Lin17]
sel. GGM
private-key
sel. SXDH
private-key
[BCFG17, DGP18]
ad. GGM
public-key
[BCFG17]
sel. standard
public-key
Figure 7.1: Existing functional encryption for quadratic functions. Here, ad. and sel. de-
note adaptive and selecive security respectively, SXDH stands for Symmetric eXternal Diﬃe
Hellman assumption, and GGM stands for Generic Group Model.
141
142
Chapter 7. Functional Encryption for Quadratic Functions
the function as: X := Zn
p × Zm
, and for all (x, y) ∈ X , α ∈ K,
p
p , K := Zn·m
F ((x, y), α) = Xi∈[n],j∈[m]
αi,jxiyj.
Private-key, one-ciphertext secure FE. Our starting point is a private-key FE for inner
product, that is only secure for one challenge ciphertext:
ct(x,y) := {[Ari + b⊥xi]1}i∈[n],{[Bsj + a⊥yj]2}j∈[m], dkα := [Xi,j
αi,jr⊤
i A⊤Bsj]T ,
where A, B ←R Dk, and (A|b⊥), (B|a⊥) are bases of Zk+1
such that a⊥ ∈ orth(A) and b⊥ ∈
orth(B), à la [CGW15]. The vectors [Ari]1 and [Bsj]2 for i ∈ [n], j ∈ [m], a⊥ and b⊥ are part of
a master secret key, used to (deterministically) generate ctx,y and dkα. Correctness follows from
the orthogonality property: decryption computes Pi,j αi,je([Ari + b⊥xi]⊤
1, [Bsj + a⊥yj]2) =
dkF + (a⊥)⊤b⊥ · [F (F, (x, y))]T , from which one can extract F (α, (x, y)) since [(a⊥)⊤b⊥]T is
public, simply by enumerating all the possible values for F (α, (x, y)). This is eﬃcient as long
as the output always lies in a polynomial size domain.
p
Security relies on the Dk-MDDH Assumption [EHK+13], which stipulates that given [A]1, [B]2
drawn from a matrix distribution Dk over Z(k+1)×k
p
,
[Ar]1 ≈c [u]1 ≈c [Ar + b⊥]1 and [Bs]2 ≈c [v]2 ≈c [Bs + a⊥]2,
p, and u, v ←R Zk+1
where r, s ←R Zk
creates an extra termhx(1)⊤Fy(1) − x(0)⊤Fy(0)iT
. This allows us to change ct(x(0),y(0)) into ct(x(1),y(1)), but
in the secret keys dkα. We conclude the proof
using the fact that for all the α queried to OKeygen, F (α, (x(0), y(0))) = F (α, (x(1), y(1))), as
required by the security deﬁnition for FE (see Deﬁnition 19), which cancels out the extra term
in all secret keys.
p
Public-key FE. We now present how to obtain to modify this simple scheme to obtain a
public-key FE.
p , y ∈ Zm
• In the public-key setting, for the encryption to compute [Ari + b⊥xi] and [Bsj + a⊥yj]
for i ∈ [n], j ∈ [m] and any x ∈ Zn
p , the vectors [a⊥]2 and [b⊥]1 would need to be
part of the public key, which is incompatible with the MDDH assumption on [A]1 or [B]2.
1 !
To solve this problem, we add an extra dimension, namely, we use bases   A|b⊥ 0
1 ! where the extra dimension will be used for correctness, while (A|b⊥)
and  B|a⊥ 0
and (B|a⊥) will be used for security (using the MDDH assumption, since a⊥ and b⊥ are
not part of the public key anymore).
0
0
• To avoid mix and match attacks, the encryption randomizes the bases
into
0
  A|b⊥ 0
W−1  A|b⊥ 0
1 ! and   B|a⊥ 0
1 !
1 ! and W⊤  B|a⊥ 0
1 !
0
0
0
for W ←R GLk+2 a random invertible matrix. This “glues" the components of a ciphertext
that are in G1 to those that are in G2.
• We randomize the ciphertexts so as to contain [Ari · γ]1 and [Bsj · σ]2, where γ, σ ←R Zp
are the same for all i ∈ [n], and j ∈ [m], but fresh for each ciphertext. The ciphertexts
also contain [γ · σ]1, for correctness.
7.1 Private-key FE with one-SEL-IND security
143
Related works. We note that the techniques used here share some similarities with Dual
Pairing Vector Space constructions (e.g., [OT08, OT09, Lew12, CLL+13]). In particular, our
produced ciphertexts and private keys are distributed as in their corresponding counterparts
in [OT08]. The similarities end here though. These previous constructions all rely on the
Dual System Encryption paradigm [Wat09], where the security proof uses a hybrid argument
over all secret keys, leaving the distribution of the public key untouched. Our approach, on
the other hand, manages to avoid this inherent security loss by changing the distributions of
both the secret and public keys. Our approach also diﬀers from [BSW06] and follow-up works
[BW06, GKSW10] in that they focus on the comparison predicate, a function that can be
expressed via a quadratic function that is signiﬁcantly simpler than those considered here.
Indeed, for the case of comparisons predicates it is enough to consider vectors of the form:
[Ari + xib⊥]1, [Bsj + yja⊥]2, where xi and yj are either 0, or some random value (ﬁxed at
setup time, and identical for all ciphertexts and secret keys), or are just random garbage.
The work of [Lin17, AS17] present constructions of private-key functional encryption schemes
for degree-D poly- nomials based on D-linear maps. As a special case for D = 2, these schemes
support quadratic polynomials from bilinear maps, as ours. Also, in terms of security, the
construction of [Lin17] is proven selectively secure based on the SXDH assumption, while the
scheme of [AS17] is selectively secure based on ad-hoc assumptions that are justiﬁed in the
multilinear group model.
In comparison to these works, our scheme has the advantage of working in the (arguably
more challenging) public key setting. [BCFG17] also gave an adaptively secure construction in
the generic group model. We only present the construction whose security is based on standard
assumption. Namely, we start by giving the private-key FE whose security only handles one
challenge ciphertext. We then present the full-ﬂedged public-key FE.
Private-key FE with one-SEL-IND security
We give in Figure 7.2 a private-key FE for quadratic functions, that is, the functionality
F K,X,Y
: K × X → Z, with K := [0, K]nm, X := [0, X]n × [0, Y ]m, Z := [0, nmKXY ], such
that for any α ∈ K, (x, y) ∈ X , we have:
quad
F K,X,Y
quad
(α, (x, y)) =Xi,j
αi,jxiyj.
For correctness, we require that nmKXY is of polynomial size in the security parameter. The
one-SEL-SIM security relies on the Dk(p)-MDDH assumption in asymmetric pairing groups.
Correctness. For any (x, y) ∈ X , i ∈ [n], j ∈ [m], we have:
i A⊤Bsj + (b⊥)⊤a⊥xiyj]T ,
since A⊤a⊥ = B⊤b⊥ = 0. Therefore, for any (αi,j)i,j ∈ K, the decryption computes
αi,jxiyj · (b⊥)⊤a⊥]T − e(K, [1]2) − e([1]1,cK)
e([ci]1, [bcj]2) = [r⊤
i A⊤Bsj +Xi,j
αi,jxiyj · [(b⊥)⊤a⊥]T .
αi,jr⊤
D := [Xi,j
=Xi,j
Note that (b⊥)⊤a⊥ 6= 0 with probability 1 − 1
Ω(p) over the choices of A, B ←R Dk, a⊥ ←R