source or EVM bytecode. At ﬁrst glance, source-code patching
seems to be the option of choice as developers have access to
source code, they are able to inspect the source code changes,
and can even do adjustments if the automated approach
introduces undesired changes. However, in Ethereum, there is
one major challenge when applying source code rewriting: one
needs to carefully preserve the storage layout. Otherwise, the
patched contract will corrupt its memory and fail or (worse)
introduce dangerous bugs. Namely, some changes in the
source code can break the contract compatibility, even though
the changes do not break the logic of the contract.
To put things into context, statically-sized variables are
laid out contiguously in storage starting from address 0; and
contiguous variables with size less than 32 B can be packed
into a single 32 B storage slot [9]. As a result, any changes
to re-order, add, or remove variables in the source-code may
look harmless, but on the memory level, such changes will
lead to mapping of variables to wrong and unexpected storage
addresses. In other words, changes in variable declaration
corrupt the internal state of the contract, as the legacy contract
and the patched contract have different storage layouts.
In contrast, bytecode rewriting does not suffer from this
deﬁciency as many bug classes only require changes on the
level of EVM instructions (see §5) avoiding any error-prone
storage-layout changes. Another reason to opt for bytecode
rewriting are existing smart contract vulnerability detection
tools. As of now, the majority of them operate on the EVM
level [13, 20, 23, 24, 32] and report their ﬁndings on the EVM
level. A bytecode rewriting approach can exploit the reports
of these analysis tools to directly generate an EVM bytecode-
based patch. Finally, if source-code rewriting is utilized, the
developer has limited possibilities to perform thorough testing
on the effectiveness of the patched contract. In particular,
checking the patched contract against old transactions (includ-
ing transactions that encapsulate attacks) are more feasible
on bytecode level. That is, transaction testing naturally would
still require analysis on the bytecode level to reverse-engineer
the attack transactions and how they fail against the patched
contract. Bytecode-rewriting allows developers to directly
match the rewritten bytecode instructions to the attack
transactions making forensic analysis feasible. Given all these
reasons, we decided to opt for bytecode rewriting.
3.2 Framework Design
Our framework depicted in Figure 1 consists of the following
major components: (1) the vulnerability detection engine
consisting of automatic analysis tools and public vulnerability
disclosures, (2) bytecode rewriter to apply the patch to the
contract, (3) the patch testing mechanism to validate the patch
Table 1: Comparison of rewriting strategies in Ethereum
Source Rewriting
Bytecode Rewriting
Corrupts storage-layout
Checking modiﬁcations by
human analyst feasible
Limited tool
vulnerability analysis
Patch testing based on prior
transactions challenging
support
for
Preserves storage layout
Human analysis of bytecode
changes challenging
Easy integration of vulnerabil-
ity analysis tools
Easy patch testing with prior
transactions
1292    30th USENIX Security Symposium
USENIX Association
Figure 1: Architecture of EVMPATCH
on previous transactions, and (4) the contract deployment
component to upload the patched version of the contract. At
ﬁrst, the vulnerability detection engine identiﬁes the location
and type of the vulnerability. This information is then passed
to the bytecode rewriter, which patches the contract according
to previously deﬁned patch templates. The patched contract
is thereafter forwarded to the patch tester, which replays all
past transactions to the contract. That said, we do not only
patch the contract, but we allow the developer to retrieve
a list of transactions that exhibit a different behavior and
outcome between the original and patched contract. These
transactions serve as an indicator for potential attacks on
the original contract. If the list is empty, our framework
automatically deploys the patched contract instantly on the
Ethereum blockchain. Next, we will provide a more detailed
description of the four major components of our design.
Vulnerability Detection. Before being able to apply patches,
our framework needs to identify and detect vulnerabilities.
To do this, our framework leverages existing vulnerability
detection tools such as [13, 16, 20, 23, 28, 32, 42]. For
vulnerabilities that are not detected by any existing tool, we
require that a developer or a security consultant creates a
vulnerability report. In our system, the vulnerability detection
component is responsible to identify the exact address of the
instruction, where the vulnerability is located, and the type of
vulnerability. This information is then passed to the bytecode
rewriter, which patches the contract accordingly.
Bytecode Rewriter. In general, static binary rewriting tech-
niques are well suited for applying patches in Ethereum since
smart contracts have comparably small code size: typically in
the range of about 10 KiB. Furthermore, EVM smart contracts
are always statically linked to all library code. It is not possible
for a contract to dynamically introduce new code into the code
address space. This makes the reliance on binary rewriting
techniques simpler compared to traditional architectures,
where dynamically linked libraries are loaded at runtime.
However, some smart contracts still utilize a concept similar to
dynamically linked libraries: dedicated EVM call instructions
allow a contract to switch to a different code address space.
We tackle this peculiarity by applying our bytecode rewriter
to both the contract itself and the library contract.
The stack-based architecture of the EVM requires special
attention when implementing a patch: all address-based
references to any code or data in the code address space of the
smart contract must be either preserved or updated when new
code is inserted into the code address space. Such references
cannot be easily recovered from the bytecode. To tackle this
challenge, EVMPATCH utilizes a trampoline-based approach
for adding new EVM instructions into empty code areas. The
implementation details will be described in § 4.
To implement a patch, the bytecode rewriter processes the
bytecode of the vulnerable contract as well as the vulnerability
report. The rewriting is based on a so-called patch template
which is selected according to the vulnerability type and
adjusted to work with the given contract.
Patch Templates. In EVMPATCH,we utilize a template-based
patching approach: for every supported class of vulnerabilities,
a patch-template is integrated into EVMPATCH. This patch
template is automatically adapted to the contract that is being
patched. We create generic patch templates such that they can
be easily applied to all contracts. EVMPATCH automatically
adapts the patch template to the contract at hand by replacing
contract-speciﬁc constants (i.e., code addresses, function
identiﬁer, storage addresses). Patch templates for common
vulnerabilities, such as integer overﬂows, are shipped as part
of EVMPATCH, and a typical user of EVMPATCH will never
interact with the patch templates. However, optionally, a
smart contract developer can also inspect or adapt existing
patch templates or even create additional patch templates for
vulnerabilities that are not yet supported by EVMPATCH.
Patch Tester. As smart contracts directly handle assets (such
as Ether), it is critical that any patching process does not
impede the actual functionality of a contract. As such, any
patch must be tested thoroughly. To address this issue, we
introduce a patch testing mechanism which is based (1) on the
transaction history recorded on the blockchain and (2) optional
developer supplied unit tests. At this point, we exploit the fact
that any blockchain system records all previous executions of
a smart contract, i.e., transactions in Ethereum. In our case, the
patch tester re-executes all existing transactions and optionally
any available unit test and veriﬁes that all transactions of the
old legacy and the newly patched contract behave consistently.
USENIX Association
30th USENIX Security Symposium    1293
EVMPatchBytecode RewriterPatch TesterContract DeploymentVulnerable Contract BytecodePatched Contract BytecodePatch TemplatesVulnerability DetectionAutomatic Analysis ToolsVulnerability DisclosureTransaction HistoryAttackTransactionsUpgradable ContractDeveloperVulnerability ReportDeploymentInterventionForensicAnalysisContract Unit TestsStart AnalysisThe patch tester detects any behavioral discrepancy between
the old legacy and the newly patched contract and reports a list
of transactions with differing behavior to the developer. That
said, as a by-product, our patch testing mechanism can be used
as a forensic attack detection tool. Namely, while executing
the patching process, the developer will also be notiﬁed of any
prior attacks that abuse any of the patched vulnerabilities and
can then act accordingly. In case both versions of the contract
behave the same way, the patched contract can be automatically
deployed. Otherwise, the developer must investigate the list
of suspicious transactions and thereafter invoke the contract
deployment component to upload the patched contract. The list
of suspicious transactions may not only serve as an indicator
of potential attacks, but may reveal that the patched contract
is not functionally correct, i.e., the patched contract shows a
different behavior on benign transaction. In § 5, we provide
a thorough investigation on real-world, vulnerable contracts
to demonstrate that EVMPATCH successfully applies patches
without breaking the original functionality of the contract.
Contract Deployment. As discussed in § 2, the delegatecall-
proxy based upgrade scheme is the option of choice to enable
instant contract patching. Thus, EVMPATCH integrates this
deployment approach utilizing a proxy contract as the primary
entry point for all transactions with a constant address. Before
the ﬁrst deployment, EVMPATCH transforms the original un-
modiﬁed contract code to utilize the delegatecall-proxy pattern.
This is done by deploying a proxy contract, which is immutable
and assumed to be implemented correctly3. The original byte-
code is then converted to a logic contract using the bytecode
rewriter with only minor changes to the original code. The
logic contract is then deployed alongside the proxy contract.
Patch Deployment. Finally, when the contract is patched
and after the patch is tested by the patch tester component,
EVMPATCH can deploy the newly patched contract. Our
upgrade scheme deploys the newly patched contract code
to a new address and issues a dedicated transaction to the
previously deployed proxy contract, which switches the
address of the logic contract from the old vulnerable version
to the newly patched version. Any further transactions are now
handled by the patched logic contract.
Human Intervention. EVMPATCH is designed to be fully
automated. However, there are a few scenarios, where
developer intervention is needed if (1) the vulnerability report
relates to a bug class that is not yet supported by EVMPATCH,
or (2) the patch tester reports at least one transaction that fails
due to the newly introduced patch and the failing transaction
is not a known attack transaction, (3) the patch tester reports
that at least one known attack transaction is not prevented by
the newly introduced patch.
If a bug class is not supported, EVMPATCH informs the
developer about the unsupported vulnerability class. Since
EVMPATCH is extensible, it easily allows developers to pro-
3EVMPATCH comes with a well audited default proxy contract that is
only 80 lines of Solidity code.
vide custom patch templates thereby allowing quick adaption
to new attacks against smart contracts. More speciﬁcally,
EVMPATCH supports multiple formats for custom patch tem-
plates: EVM instructions, a simple domain-speciﬁc language
that resembles Solidity expressions and allows developers
to enforce pre-conditions on functions (similar to Solidity
modiﬁers). We performed a developer study in Section 5.3
to demonstrate that writing a patch template is feasible and
more successful than manually patching a contract.
If the patch tester ﬁnds a new failing transaction, the
developer has to analyze whether a new attack transaction has
been discovered or a legitimate transaction has failed. For a
newly discovered attack transaction, EVMPATCH adds this
transaction to the list of attacks and proceeds. Otherwise, the
developer investigates why the legitimate transaction failed.
As our evaluation in § 5.2.2 shows, such cases typically occur
due to inaccurate vulnerability reports, i.e., wrongly reported
vulnerabilities rather than faulty patching. Thus, the developer
can simply blacklist the wrongly reported vulnerable code
locations to avoid patching at these locations.
These manual interventions typically only need quick code
reviews or debugger sessions. We believe even moderately ex-
perienced Solidity developers can perform these tasks as no de-
tailed knowledge about the underlying bytecode rewriting sys-
tem is needed (see also § 5.3 on our developer study). As such,
EVMPATCH positions itself as a tool to enable more develop-
ers to securely program and operate Ethereum smart contracts.
4 EVMPatch Implementation
In this section, we describe the implementation of EVM-
PATCH: in § 4.1, we discuss engineering challenges for
bytecode rewriting in Ethereum. Thereafter, we desribe the
implementation of the bytecode rewriter (§ 4.2), the patch
testing feature (§ 4.3), and the contract deployment mechanism
(§ 4.4). We conclude this section with a discussion on possible
applications regarding smart contract errors in § 4.5.
4.1 Challenges of Bytecode Rewriting
There are several unique challenges that must be solved when
rewriting EVM bytecode: we need to handle static analysis of
the original EVM bytecode, and tackle several particularities
of Solidity contracts and the EVM.
Similar to traditional computer architectures, EVM byte-
code uses addresses to reference code and data constants in
the code address space. Hence, when modifying the bytecode,
the rewriter must ensure that address-based references are
correctly adjusted. To do so, a rewriter typically employ two
static analysis techniques: control-ﬂow graph (CFG) recovery
and subsequent data-ﬂow analysis. The latter is necessary to
determine which instructions are the sources of any address
constants utilized in the code. For the EVM bytecode, two
1294    30th USENIX Security Symposium
USENIX Association
classes of instructions are relevant in this context: code jumps
and constant data references.
Code Jumps. The EVM features two branch instructions:
JUMP and JUMPI. Both take the destination address from
the stack. Note that function calls inside the same contract
also leverage JUMP and JUMPI. That said, there is no explicit
difference between local jumps inside a function and calls
to other functions. The EVM also features dedicated call
instructions, but these are only used to transfer control to
a completely separate contract. Hence, they do not require
modiﬁcation when rewriting the bytecode.
Constant Data References. The so-called CODECOPY instruc-
tion is leveraged to copy data from the code address space
into the memory address space. A common example use-case
are large data constants such as strings. Similar to the jump
instructions, the address from which memory is loaded is
passed to the CODECOPY instruction via the stack.
Handling both types of instructions is challenging due to the
stack-based architecture of the EVM. For instance, the target
addresses of jump instructions are always provided on the
stack. That is, every branch is indirect, i.e., the target address
cannot be simply looked up by inspecting the jump instruction.
Instead, to resolve these indirect jumps, one needs to deploy
data-ﬂow analysis techniques to determine where and which
target address is pushed on the stack. For the majority of
these jumps, one can analyze the surrounding basic block4
to trace back where the jump target is pushed on the stack.
For example, when observing the instructions PUSH2 0xdb1;
JUMP, we can recover the jump target by retrieving the address
(0xdb1) from the push instruction.
However, many contracts contain more complicated code
patterns, primarily because the Solidity compiler also supports
calling functions internally without utilizing a call instruction.
Recall that, in the EVM, a call instructions perform similarly
to remote-procedure calls. To optimize code size and facilitate
code re-use, the Solidity compiler introduced a concept where
functions are marked as internal. These functions cannot be
called by other contracts (private to the contract) and follow
a different calling convention. Since there are no dedicated
return and call instruction for internal functions, Solidity uti-
lizes the jump instruction to emulate both. As such, a function
return and a normal jump cannot be easily distinguished. This
makes it challenging to (1) identify internal functions and
(2) build an accurate control-ﬂow graph of the contract.
When rewriting an EVM smart contract, both the jump in-
structions and the codecopy instruction need to be considered
in the bytecode rewriter. The obvious strategy to rewrite smart
contracts is to ﬁx-up all constant addresses in the code to reﬂect
the new addresses after inserting new instructions or removing
old instructions. However, this strategy is challenging because
it requires accurate control-ﬂow graph recovery and data-ﬂow
4A basic block is sequence of EVM instructions that terminate in a branch.
The branch connects one basic block to subsequent basic blocks in the CFG
of the EVM code.
analysis, which needs to deal with particularities of EVM
code, such as internal function calls. In the research area of
binary rewriting of traditional architectures, a more pragmatic
approach has been developed:
the so-called trampoline
concept [8, 21]. We utilize this approach in our rewriter
and avoid adjusting addresses. Whenever our rewriter must
perform changes to a basic block, e.g., inserting instructions,
our rewriter replaces the basic block with a trampoline that
immediately jumps to the patched copy. Hence, any jump
target in the original code stays the same and all data constants
are kept at their original addresses. We describe this process
in more detail in the subsequent section.
4.2 Bytecode Rewriter Implementation
We implemented a trampoline-based rewriter in Python and
utilize the pyevmasm5 library for disassembling and assem-
bling raw EVM opcodes. Our trampoline-based bytecode
rewriter works on the basic block level. When an instruction
needs to be instrumented, the whole basic block is copied to
the end of the contract. The patch is then applied to this new
copy. The original basic block is replaced with a trampoline,
i.e., a short instruction sequence that immediately jumps to
the copied basic block. Whenever the contract jumps to the
basic block at its original address, the trampoline is invoked
redirecting execution to the patched basic block by means of
a jump instruction. To resume execution, the ﬁnal instruction
of the instrumented basic block issues a jump back into the
original contract code. While the trampoline-based approach
avoids ﬁxing up any references, it introduces additional jump
instructions. However, as we will show, the gas cost associated
with these additional jumps is negligible in practice (see § 5).
To ensure correct execution, we must still compute at least
a partial control-ﬂow graph, starting from the patched basic
block. This is necessary to recover the boundaries of the basic
blocks that are patched and the following basic blocks that are
connected by a so called fall-through edge. Not all basic blocks
terminate with an explicit control-ﬂow instruction: Whenever
a basic block ends with a conditional jump instruction (JUMPI)
or simply does not end with a control-ﬂow instruction, there
is an implicit edge (i.e., fall-through) in the control-ﬂow graph
to the instruction at the following address.
Handling Fall-Through Edge. To handle the fall-through
edge, two cases must be considered. When the basic block
targeted by the fall-through edge starts with a JUMPDEST in-
struction, the basic block is marked as a legitimate target for
regular jumps in the EVM. In this case, we can append an