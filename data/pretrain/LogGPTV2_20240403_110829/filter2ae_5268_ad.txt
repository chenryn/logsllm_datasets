### 5 理解JSObject系统
JavaScript对象通过C++类的组合在JSC中实现。实现的核心在于JSObject类，它本身就是一个JSCell，并且由垃圾收集器跟踪的。
JSObject的各种子类与不同的JavaScript对象相似，如Arrays（JSArray）、Typed
arrays（JSArrayBufferView）或Proxys（JSProxy）。
我们现在将探讨构成JSO引擎中的JSObjects的各个部分。
#### 5.1 存储属性
属性是Javascript对象的最重要的方面。我们也知道属性在引擎中是怎么存储的——通过“Butterfly”存储。但这也只对了一半，除了“Butterfly”，JSObjects也可以进行内联存储（默认6个索引值，但运行时需要重新分析），其位于内存中的的对象之后。若不为"Butterfly"分配对象，则可能轻微影响引擎性能。
内联存储对我们来说，也是比较有用的。我们可以泄露一个对象的地址，进一步就知道它的内联索引值的地址。这就很好的给我们提供了一个放置我们伪造对象的位置，也能在我们将对象放置在标记空间的时候避免一些额外的问题。
已经解决了第三个问题，我们回跳到第二个问题中。
#### 5.2 JSObject的内联
我们以一个例子开始这节内容，假设运行下面的JS代码：
    obj = {'a': 0x1337, 'b': false, 'c': 13.37, 'd': [1,2,3,4]};
这就导致以下对象：
    (lldb) x/6gx 0x10cd97c10
    0x10cd97c10: 0x0100150000000136 0x0000000000000000
    0x10cd97c20: 0xffff000000001337 0x0000000000000006
    0x10cd97c30: 0x402bbd70a3d70a3d 0x000000010cdc7e10
第一个4字节是JSCell；第二个是Butterfly指针，它是空的，因为所有的属性都存储在内联中。接下来是四个属性的内联JSValue槽：一个integer，false，一个double和一个JSObject指针。如果我们要向对象添加更多属性，则会在某一时刻会分配“Butterfly”来存储这些。
那么JSCell里有什么呢？从JSCell.h中寻找答案：
  * StructureID m_structureID;
> 这是最有趣的一个，我们将在下面进一步探讨。
  * IndexingType m_indexingType;
> 我们已经看过这个了,它指示对象元素的存储模式。
  * JSType m_type;
> 单元格存储类型：string，symbol，function，plain object，...
  * TypeInfo :: InlineTypeFlags m_flags;
> 这是一个对我们的目的来说不太重要的标志，JSTypeInfo.h包含更多信息。
  * CellState m_cellState;
> 我们也看过这个，它在收集期间由垃圾收集器使用。
## 5.3-关于JSObject结构
JSC可以创建描述JavaScript对象的结构或布局的元对象，这些对象表示的是内联存储或“Butterfly”（将它们都视为JSValue数组）中从属性名称到索引的映射，它们最基本的形式表示结构是，它也可以用链表或散列图的形式表示。为了替代在每个JSCell实例中存储指向此结构的指针的存储方法，开发人员决定将32位索引存储到结构表中，以此为其他字段节省一些空间。
那么当一个新的属性被添加到一个对象时会发生什么？如果这是第一次添加，那么将分配一个新的结构实例，该结构实例包含之前的槽，索引所有的退出属性和新添加属性。然后，属性将被存储在相应的索引处，这有可能需要重新分配“Butterfly”的存储。为了避免重复该过程，可以在被称为“转换表”的数据结构中缓存Structure实例在之前的结构中。也可以调整原始结构，分配更多的内联或“Butterfly”存储空间来避免重新分配结构实例。这种机制最终使结构可重复使用。
举个例子：
    var o = { foo: 42 };
    if (someCondition)
        o.bar = 43;
    else
        o.baz = 44;
这将导致创建以下三个结构实例，这里显示为（任意）属性名称到槽索引的映射：
    +-----------------+          +-----------------+
    |   Structure 1   |   +bar   |   Structure 2   |
    |                 +--------->|                 |
    | foo: 0          |          | foo: 0          |
    +--------+--------+          | bar: 1          |
             |                   +-----------------+
             |  +baz   +-----------------+
             +-------->|   Structure 3   |
                       |                 |
                       | foo: 0          |
                       | baz: 1          |
                       +-----------------+
每当这段代码再次执行时，创建的对象的正确结构将很容易被找到。
基本上相同的概念被如今所有主流引擎使用使用。就这段代码而言，V8调用他们的处理系统或隐藏类[[19]](https://developers.google.com/v8/design#fast-property-access)，而Spidermonkey调用他们的图形处理器。
这种技术也使预测性的JIT编译器更简单。 假设以下函数：
    function foo(a) 
    {
        return a.bar + 3;
    }
进一步假设，我们在解释器中已经执行了几次上面的函数，现在为了获得更好的性能，将它编译为本机代码，我们该如何处理属性查找？
我们可以简单地跳转到解释器执行查找，但这个代价是相当昂贵的。假设我们还跟踪了给foo的对象作为参数，发现它们都使用相同的结构。
我们现在可以生成（伪）汇编代码，如下所示。 这里r0最初指向参数对象：
    mov r1, [r0 + #structure_id_offset];
    cmp r1, #structure_id;
    jne bailout_to_interpreter;
    mov r2, [r0 + #inline_property_offset];
这只是几个慢于本地语言(如C语言)属性的几个指令。请注意，结构ID和属性偏移量被缓存在代码本身内部，这类代码的结构名称叫做内联缓存。
除了属性映射，结构还存储对ClassInfo实例的引用，该实例包含的类有`Float64Array`
、`HTMLParagraphElement`...，也可以通过以下小脚本理解：
    Object.prototype.toString.call(object);
    // Might print "[object HTMLParagraphElement]"
然而，ClassInfo的更重要的属性是它的MethodTable引用，MethodTable包含一组函数指针，其类似于C++中的vtable。
大多数对象的相关操作[[20]](http://www.ecma-international.org/ecma-262/6.0/#sec-operations-on-objects)以及一些垃圾处理器的相关任务（例如访问所有引用的对象）都通过方法表中的方法实现。为了了解如何使用方法表，我们将通过下面列出的JSArray.cpp的代码片段来说明。此函数是JavaScript数组的ClassInfo实例的MethodTable的一部分，并且每当删除这样的实例的属性时被调用[[21](http://www.ecma-international.org/ecma-262/6.0/#sec-ordinary-object-internal-methods-and-internal-slots-delete-p)：
    bool JSArray::deleteProperty(JSCell* cell, ExecState* exec,PropertyName propertyName)
    {
        JSArray* thisObject = jsCast(cell);
        if (propertyName == exec->propertyNames().length)
            return false;
        return JSObject::deleteProperty(thisObject, exec, propertyName);
    }
正如我们所见，deleteProperty有一个特殊情况，它不会删除数组的.length属性，只是将请求转发给父对象实现。
下图总结了（并稍微简化了）不同C ++类之间一起构建JSC对象系统的关系:
                +------------------------------------------+
                |                Butterfly                 |
                | baz | bar | foo | length: 2 | 42 | 13.37 |
                +------------------------------------------+
                                              ^
                                    +---------+
                   +----------+     |
                   |          |     |
                +--+  JSCell  |     |      +-----------------+
                |  |          |     |      |                 |
                |  +----------+     |      |  MethodTable    |
                |       /\          |      |                 |
     References |       || inherits |      |  Put            |
       by ID in |  +----++----+     |      |  Get            |
      structure |  |          +-----+      |  Delete         |
          table |  | JSObject |            |  VisitChildren  |
                |  |          ||                |
            |                   |          |   |  Name: "Array" |
            | property: slot    |          |   |                |
            |     foo : 0       +----------+   +----------------+
            |     bar : 1       |
            |     baz : 2       |
            |                   |
            +-------------------+
### 6 Exploitation
既然我们已稍微了解JSObject类的内部，现在让我们回到创建Float64Array实例当中，这将为我们提供一个任意的内存读写原语。