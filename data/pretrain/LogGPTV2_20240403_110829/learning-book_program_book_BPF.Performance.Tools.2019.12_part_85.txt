## Memory Analysis Tools

- **Memory Leak Detection:**
  - **Tool:** Show possible memory leak code paths
  - **Location:** BCC/book
  - **Description:** This tool helps in identifying potential memory leaks by tracing and analyzing code paths.

- **Slab Allocation Rates:**
  - **Tool:** Slab
  - **Location:** BCC/book
  - **Description:** Displays the kernel slab allocation rates by cache, providing insights into memory usage patterns.

- **NUMA Page Migration Statistics:**
  - **Tool:** NUMA
  - **Location:** BCC/book
  - **Description:** Provides statistics on page migrations in a NUMA (Non-Uniform Memory Access) system, helping to optimize memory access patterns.

- **Work Queue Execution Times:**
  - **Tool:** Work queues
  - **Location:** BCC/book
  - **Description:** Measures and displays the execution times of work queue functions, aiding in performance tuning.

For the latest and comprehensive list of options and capabilities for tools from BCC and bpftrace, refer to their respective repositories. Additional tools for kernel analysis, including those for system calls, networking, and block I/O, are available in previous chapters.

### Instrumenting Spin Locks and Tasklets

The following summaries include discussions on instrumenting spin locks and tasklets, which are essential for understanding and optimizing kernel-level concurrency and synchronization mechanisms.

---

## Chapter 14: Kernel Tools

### 14.4.1 System Load Averages

**loads(8)** is a bpftrace tool that prints the system load averages every second:

```bash
+ loads.bt
Attaching 2 probes...
Reading load averages... Hit Ctrl-C to end.
18:49:16 load averages: 1.983 1.151 0.931
18:49:17 load averages: 1.824 1.132 0.926
18:49:18 load averages: 1.824 1.132 0.926
[...]
```

As discussed in Chapter 6, these load averages may not be very useful for deep analysis. The `loads(8)` tool serves as an example of fetching and printing a kernel variable, specifically `avenrun`:

```c
/usr/local/bin/bpftrace
BEGIN
printf("Reading load averages... Hit Ctrl-C to end.\n");
interval:s:1
/*
* See fs/proc/loadavg.c and include/linux/sched/loadavg.h for the
* following calculations.
*/
$avenrun = lkaddr("*avenrun*");
$load1 = *($avenrun);
$load5 = *($avenrun + 8);
$load15 = *($avenrun + 16);
time("%H:%M:%S")
printf("load averages: %d.%03d %d.%03d %d.%03d\n",
       ($load1 >> 11), (($load1 & ((1 << 11) - 1)) * 1000) / (1 << 11),
       ($load5 >> 11), (($load5 & ((1 << 11) - 1)) * 1000) / (1 << 11),
       ($load15 >> 11), (($load15 & ((1 << 11) - 1)) * 1000) / (1 << 11));
```

### 14.4.2 Off-CPU Time Tracing

**offcputime(8)** is a BCC tool that traces off-CPU time by kernel stack for a specified PID over a given duration:

```bash
Tracing off-CPU time [us] of PID 5570 by kernel stack for 5 secs.
[.--]
finish_task_switch
_schedule
schedule
io_schedule
xfs_file_buffered_aio_read
xfs_file_read_iter
_vfs_read
vfs_read
ksys_read
do_syscall_64
entry_SYSCALL_64_after_hwframe
```

This stack shows `tar(1)` blocked on `io_schedule()` for block device I/O. The `offcputime(8)` and `wakeuptime(8)` tools help identify why an application was blocked and the reason it was woken up, respectively.

### 14.4.3 Wakeup Time Tracing

**wakeuptime(8)** is a BCC tool that traces wakeup times and can be used to generate a flame graph:

```bash
wakeuptime[options][duration]
Options include:
- f: Output in folded format, for generating a wakeup time flame graph
- p: Match on a specific PID
- K: Only kernel stack traces
- U: Only user-level stack traces
```

### 14.4.4 Combined Off-CPU and Wakeup Time Tracing

**offwaketime(8)** combines `offcputime(8)` and `wakeuptime(8)` to provide a comprehensive view of both off-CPU and wakeup times:

```bash
offwaketime[options][duration]
Options include:
- f: Output in folded format, for generating an off-wake time flame graph
- p: Match on a specific PID
- K: Only kernel stack traces
- U: Only user-level stack traces
```

### 14.4.5 Mutex Lock Latency and Held Times

**mlock(8)** and **mheld(8)** are BCC tools that trace the kernel mutex lock latency and held times as histograms with kernel-level stacks:

- **mlock(8):** Traces the latency of acquiring a mutex lock.
- **mheld(8):** Traces the time a mutex lock is held.

Example output for `mlock(8)`:

```bash
mlock.bt
Attaching 6 probes...
Tracing mutex_lock() latency, Ctrl-C to end.
[..-]
elock_latency_ns [0xEfff9d015738c6e0,
kretprobe_trampoline+0
[..stack trace..]
[512, 1K]
5859 1889889889888 888988988988988988988988
[1K, 2K]
8303 eeeeeeee8e e8ee8ee8ee8eeeeee8eeee88ee8ee8ee8eeeeeee 
[2K, 4K)
1689 18898898898
[4K, 8K)
476188
[8K, 16K)
1011
```

Example output for `mheld(8)`:

```bash
nheld.bt
Attaching 9 probes..
Tracing mutex_lock() held times, Ctrl-C to end.
[..-]
held_time_ns [0xfffr9d015738c6e0,
mutex_unlock+1
[..stack trace..]
[512, 1K)
1659 8 e88 88 88 88e8e888888 8e88 1
[1K, 2K]
```

These tools work by tracing the `mutex_lock()`, `mutex_lock_interruptible()`, and `mutex_trylock()` kernel functions. They can be frequent and may introduce significant overhead on busy systems.

---

For more detailed information and additional tools, refer to the BCC and bpftrace repositories and the previous chapters of this book.