最糟糕的陷阱之一，就是仅仅认为某想法行不通就不去尝试，例如，觉得某些想法“别人肯定早就想到了”或“这想法太蠢了，肯定不行”。实际上，我就曾经为此付出过沉重的代价——拜它所赐，一项研究成果在两年后才姗姗来迟。无论是通过重复尝试使用相同密码登录来[绕过身份验证](https://blog.rapid7.com/2012/06/11/cve-2012-2122-a-tragically-comedic-security-flaw-in-mysql/
"绕过身份验证")，还是通过从笔记本电脑切换到手机[攻入](https://medium.com/bugbountywriteup/bypassing-googles-fix-to-access-their-internal-admin-panels-12acd3d821e3
"进入")Google管理页面，踏上下一个重大漏洞的发现之路之前，可能首先需要一个非常愚蠢的想法。
## 迭代，发现，分享
### 迭代
最简单的入门方法是找一些有前途的研究成果，通过混合其他技术构建新方法，然后将其用于某些实际目标，看看是否有什么有趣的事情发生。
例如，这篇关于CORS配置错误的[文章](https://ejj.io/misconfigured-cors/index.html
"文章")指出了一种有趣的行为，并且表示这种行为很普遍，但并没有探讨它对个人网站的影响情况。
于是，我把这个概念应用到了漏洞赏金网站，因为我可以在这些网站上合法地探索它的影响，并且设法绕过各种可能的缓解措施。在此过程中，我以常见的开放重定向漏洞技术为助攻，随后在阅读CORS规范时发现了“空源”技术（the
‘null’ origin technique），并探索了缓存中毒的可能性。
在这个过程中，根本无需借助于遥不可及的顿悟或卓尔不凡的技术知识，然而，由此产生的演示文稿和[博客文章](https://portswigger.net/blog/exploiting-cors-misconfigurations-for-bitcoins-and-bounties
"博客文章")仍然很容易被大家所接受——毕竟，我付出的努力是大家有目共睹的。
### 发现
虽然对他人的工作进行迭代不失为一个好方法，但现实是，好像任何一个角落都可能发掘出相应的研究宝藏，无论是[相对路径覆盖](http://www.thespanner.co.uk/2014/03/21/rpo/
"相对路径覆盖")还是[Web缓存欺骗](https://omergil.blogspot.co.uk/2017/02/web-cache-deception-attack.html
"Web缓存欺骗")。我的观点是，个人经验在这些发现过程中提供了重要的线索。我将这些经验称为导向器或“面包屑”，因为它们的作用机制往往是非常神秘的，而且，许多重大的发现，都是在一系列的经验的指引下找到的。
例如，2011年，我试图破解addons.mozilla.org使用的CSRF保护机制。尽管我可以绕过令牌检查，但这显然是不够的——他们采用的安全机制还会验证Referer头部中的主机与当前站点的匹配情况。于是，我在sla.ckers论坛上发帖求助，后来'barbarianbob'指出，Django是通过查看HTTP
Host头部来确定当前网站的主机的，而这个头部恰好可以通过X-Forwarded-Host头部来覆盖掉。换句话说，将其与Flash头部注入漏洞相结合的话，就有可能绕过CSRF检查，但更重要的是，这是我们的第一个“面包屑”——它暗示着应用程序可能是通过Host头部来了解其当前位置的。
之后，通过阅读Piwik的密码重置函数的源代码，发现了如下所示的一行代码：
    $passwordResetLink = getCurrentUrlWithoutQueryString() + $secretToken
我们可以看出，Piwik使用的是PHP语言，众所周知，该语言的路径处理方式是非常搞笑的：如果通过
请求重置密码，就会生成一个包含两个链接的电子邮件，并且秘密令牌将被发送到evil.com。这个想法果然是有效的，为此，我不仅获得了一笔赏金，并且还为后来的发现奠定了基础。
第三个也是最后一个“面包屑”就是Piwik修补这个漏洞的方式——他们用getCurrentUrlWithoutFileName()替换了getCurrentUrlWithoutQueryString()函数。这意味着，我无法再使用该路径进行攻击。由于之前就跟Django打过交道，所以我决定深入研究相关代码，以了解Piwik是如何确定当前的主机名的，经研究后发现，像Django一样，Piwik也是使用的HTTP
Host头部，也就是说，我可以轻松生成恶意的密码重置电子邮件。事实证明，这项技术同样适用于addons.mozilla.org、Gallery、Symfony、Drupal以及其他一些网站，即可以通过HTTP
Host头部发动[有效的攻击](https://www.skeletonscribe.net/2013/05/practical-http-host-header-attacks.html "有效的攻击")。
我之所以啰里啰嗦地阐述上面的发现过程，是希望能够帮助读者揭开安全研究的神秘面纱：许多研究成果，并非从天而降，凭空产生的。从这个角度来看，核心技能（超越了既有的知识和经验的广度）似乎在于如何识别这些面包屑并坚持不懈地追逐它们上面。我还不太清楚如何做到这一点，但我知道，帮助人们发现重大研究成果的线索，恰恰正是那些原以为“毫无意义”的事物。
### 分享
最后，与社区分享您的研究也是至关重要的。这将有助于提高您的知名度，并可能说服雇主为自己分配更多的研究时间。除此之外，它还能帮助您避免浪费时间，并促进进一步的研究——评论者非常善于指出您之前不知道的工作，而且没有什么比看到其他研究人员在您的想法基础上再接再厉更有成就感了。
请不要仅仅因为没有突破性的发现、两个徽标和一个演示文稿就认为一个技术或想法不值得分享——不要太过苛求，有啥就发布啥好了（当然，理想情况下是发表到博客上，而不仅仅是发表到类似Twitter这样不便于搜索引擎收录索引的平台上面）。
在共享研究时，至少应展示一个应用于实际应用程序的技术示例。否则的话，一方面不利于人们的理解，另一方面，容易让人怀疑它是否具有实际价值。
最后，演讲对于吸引更多观众来说非常有用，不过需要注意的是，不要把太多的时间花在重复过去的演讲上面。
## 结束语
关于安全研究，我自己还有很多东西要学，所以，我希望能在几年后重新回顾这个话题，并提供更多的线索。另外，我希望其他研究人员提供不同的观点，并期待从他们的分享中学习新的见解。
最后，对于正在寻找安全研究的入门读物的读者，我已经准备好了一份[博客](https://skeletonscribe.net/#inspiration
"博客")清单——多年来，我一直从中汲取营养。祝您好运，玩得开心!