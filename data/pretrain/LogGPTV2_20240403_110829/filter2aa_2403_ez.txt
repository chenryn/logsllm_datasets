 10   
call      __SEH_prolog4 
 11   
mov      eax, 5A4Dh 
 12   
cmp      ds:400000h, ax 
 13   
jnz      short loc_401096 
 14   
mov      eax, ds:40003Ch 
 15   
cmp      dword ptr [eax+400000h], 4550h 
 16   
jnz      short loc_401096 
 17   
mov      ecx, 10Bh 
 18   
cmp      [eax+400018h], cx 
 19   
jnz      short loc_401096 
 20   
cmp      dword ptr [eax+400074h], 0Eh 
 21   
jbe      short loc_401096 
 22   
xor      ecx, ecx 
 23   
cmp      [eax+4000E8h], ecx 
 24   
setnz     cl 
 25   
mov      [ebp+var_1C], ecx 
 26   
jmp      short loc_40109A 
 27 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 68 章  Windows NT 
667 
 28 
 29  loc_401096: ; CODE XREF: ___tmainCRTStartup+18 
 30   
       ; ___tmainCRTStartup+29 ... 
 31      
and      [ebp+var_1C], 0 
 32 
 33  loc_40109A: ; CODE XREF: ___tmainCRTStartup+50 
 34   
push      1 
 35   
call      __heap_init 
 36   
pop      ecx 
 37   
test      eax, eax 
 38   
jnz      short loc_4010AE 
 39   
push      1Ch 
 40   
call      _fast_error_exit 
 41   
pop      ecx 
 42 
 43  loc_4010AE: ; CODE XREF: ___tmainCRTStartup+60 
 44    
call      __mtinit 
 45   
test      eax, eax 
 46   
jnz      short loc_4010BF 
 47   
push      10h 
 48   
call      _fast_error_exit 
 49   
pop      ecx 
 50 
 51  loc_4010BF: ; CODE XREF: ___tmainCRTStartup+71 
 52   
call      sub_401F2B 
 53   
and      [ebp+ms_exc.disabled], 0 
 54   
call      __ioinit 
 55   
test      eax, eax 
 56   
jge      short loc_4010D9 
 57   
push      1Bh 
 58   
call      __amsg_exit 
 59   
pop      ecx 
 60 
 61  loc_4010D9: ; CODE XREF: ___tmainCRTStartup+8B 
 62   
call      ds:GetCommandLineA 
 63   
mov      dword_40B7F8, eax 
 64   
call      ___crtGetEnvironmentStringsA 
 65   
mov      dword_40AC60, eax 
 66   
call      __setargv 
 67   
test      eax, eax 
 68   
jge      short loc_4010FF 
 69   
push      8 
 70   
call      __amsg_exit 
 71   
pop      ecx 
 72 
 73  loc_4010FF: ; CODE XREF: ___tmainCRTStartup+B1 
 74   
call      __setenvp 
 75   
test      eax, eax 
 76   
jge      short loc_401110 
 77   
push      9 
 78   
call      __amsg_exit 
 79   
pop      ecx 
 80 
 81  loc_401110: ; CODE XREF: ___tmainCRTStartup+C2 
 82   
push      1 
 83   
call      __cinit 
 84   
pop      ecx 
 85   
test      eax, eax 
 86   
jz      short loc_401123 
 87   
push      eax 
 88   
call      __amsg_exit 
 89   
pop      ecx 
 90 
 91  loc_401123: ; CODE XREF: ___tmainCRTStartup+D6 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
668 
逆向工程权威指南（下册） 
 92   
mov      eax, envp 
 93   
mov      dword_40AC80, eax 
 94   
push      eax  
     ; envp 
 95   
push      argv   
     ; argv 
 96   
push      argc   
     ; argc 
 97   
call      _main 
 98   
add      esp, 0Ch 
 99   
mov      [ebp+var_20], eax 
100   
cmp      [ebp+var_1C], 0 
101   
jnz      short $LN28 
102   
push      eax  
     ; uExitCode 
103   
call      $LN32 
104 
105  $LN28:       ; CODE XREF: ___tmainCRTStartup+105 
106    
call      __cexit 
107   
jmp      short loc_401186 
108 
109 
110  $LN27:       ; DATA XREF: .rdata:stru_4092D0 
111   
mov      eax, [ebp+ms_exc.exc_ptr] ; Exception filter 0 for function 401044 
112   
mov      ecx, [eax] 
113   
mov      ecx, [ecx] 
114   
mov      [ebp+var_24], ecx 
115   
push      eax 
116   
push      ecx 
117   
call      __XcptFilter 
118   
pop      ecx 
119   
pop      ecx 
120 
121  $LN24: 
122   
retn 
123 
124 
125  $LN14:       ; DATA XREF: .rdata:stru_4092D0 
126   
mov      esp, [ebp+ms_exc.old_esp] ; Exception handler 0 for function 401044 
127   
mov      eax, [ebp+var_24] 
128   
mov      [ebp+var_20], eax 
129   
cmp      [ebp+var_1C], 0 
130   
jnz      short $LN29 
131   
push      eax  
     ; int 
132   
call      __exit 
133 
134 
135  $LN29:       ; CODE XREF: ___tmainCRTStartup+135 
136    
call      __c_exit 
137 
138  loc_401186: ; CODE XREF: ___tmainCRTStartup+112 
139   
mov      [ebp+ms_exc.disabled], 0FFFFFFFEh 
140   
mov      eax, [ebp+var_20] 
141   
call      __SEH_epilog4 
142   
retn 
在程序的第 62 行、第 66 行和第 74 行我们分别可以看到的是 GetCommandLineA、setargv()和 setenvp()
这三个函数，从这三个函数的名称可以看出它们处理的分别是 argc、argv 和 envp 这三个全局变量。 
最后，第 97 行的主函数 main()会获取这些外部参数。 
CRT 中的函数名称通常都可以自然解释。例如第 35 行和第 54 行的 heap_init()和 ioinit()这两个函数。 
堆的初始化操作是由 CRT 代码完成的。若在没有 CRT 代码的情况下调用内存分配函数 malloc()，就会
引发异常退出，并将看到下述错误代码： 
runtime error R6030 
- CRT not initialized 
在 C++程序中，CRT 代码还要在启动主函数 main()之前初始化全部全局对象。我们可以参考本书的
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 68 章  Windows NT 
669 
51.4.1 节。 
主函数 main()返回的数值会传递给 cexit()，或者是在$LN32，随后会调用函数 doexit()。 
下面一个问题是：我们有没有可能不采用 CRT 呢？这是有可能的，前提是您清楚地知道自己在做
什么。 
我们可以通过 MSVC 的 Linker 程序的/ENTRY 选项设置程序的入口点。 
比如下面的这个程序代码： 
#include  
int main() 
{ 
        MessageBox (NULL, "hello, world", "caption", MB_OK); 
}; 
选用以下的命令行来编译： 
cl no_crt.c user32.lib /link /entry:main 
上述指令最终生成一个大小为 2560 字节的可执行文件。该文件中具备标准的 PE 文件头，调用
MessageBox 的指令，其数据段声明了两个字符串，并从库文件 user32.dll 导入 MessageBox 函数。整个可
执行文件没有其他的内容了。 
虽然这个程序确实可以正常运行，但是这种程序无法获取 WinMain()函数所需的 4 个参数。确切地说，
程序确实可以启动得起来，但是在程序启动得时候外部参数没有被准备或传递过来。 
不能直接采用包括 4 个参数在内的主函数 WinMain()的方式，而且不采用 main()函数。更加精确一点
来说，虽然能传递参数，但是参数不是在程序一执行时就被传递的。 
另外，如果通过编译指令限定 PE 段向更小地址对齐（默认值是 4096 字节），那么.编译器将会生成尺
寸更小的 exe 文件： 
cl no_crt.c user32.lib /link /entry:main /align:16 
链接器 Linker 将会提示：  
LINK : warning LNK4108: /ALIGN specified without /DRIVER; image may not run 
上述指令将生成一个长度为 720 字节的 exe 可执行文件。它可以运行于 x86 构架的 Windows 7
系统，但是却不能运行于 64 位的 Windows 7 系统（执行的时候，系统会给出错误提示）。从这里我
们可以看到，虽然我们可以想办法让可执行文件变得更短一些，但是同时兼容性问题也会越来越
突出。 
68.2  Win32 PE 文件 
PE（Portable Executable）格式，是微软 Windows 环境可移植可执行文件（如 exe、dll、vxd、sys 和 vdm
等）的标准文件格式。 
与其他格式的 PE 文件不同的是，exe 和 sys 文件通常只有导入表而没有导出表。 
和其他的 PE 文件一样，DLL 文件也有一个原始代码入口点 OEP（就是 DllMain()函数的地址）。但是 DLL
的这个函数通常来讲什么也不会做。 
sys 文件通常来说是一个系统驱动程序。说到驱动程序，Windows 操作系统需要在 PE 文件里保存其校
验和，以验证该文件的正确性（Hiew 就可以验证这个校验和）。 
从 Vista 开始，所有的 Windows 驱动程序必须具备数字签名，否则系统会拒绝加载它们。 
每个 PE 文件都由一段打印“This program cannot be run in DOS mode.”的 DOS 程序块开始。如果在
DOS 或者 Windows 3.1 环境下运行这个程序，那么只会看到上述字符串。因为 DOS 及 Windows 3.1 系统不能
识别 PE 格式的文件。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
670 
逆向工程权威指南（下册） 
68.2.1  术语 
 模块 Module：它是指一个单独的 exe 或者 dll 文件。 
 进程 Process：加载到内存中并正在运行的程序，通常由一个 exe 文件和多个 dll 文件组成。 
 进程内存 Process memory：每个进程都有完全属于自己的，进程间独立的，不被干扰的内存空间。 
通常是模块、堆、栈等数据构成。 
 虚拟地址 VA（Virtual Address）：程序访问存储器所使用的逻辑地址。 
 基地址 Base Address：进程内存中加载模块的首地址。  
 相对虚拟地址 RVA（Relative Virtual Address）：虚拟 地址 VA 与基地址 Base Address 的差就是相对
虚拟地址 RVA。在 PE 文件表中的很多地址都是相对虚拟地址 RVA。 
 导入地址表 IAT（Import Address Table）：导入符号的地址数组。PE 头里的 IMAGE_DIRECTORY_ 
ENTRY_IAT 指向第一个导入地址表 IAT 的开始位置。值得说明的是，反编译工具 IDA 可能会给
IAT 虚构一个伪段--.idata 段，即使 IAT 是其他地址的一部分。 
 导入符号名称表 INT（Import Name Table）：存储着所需符号名称的数组。 
68.2.2  基地址 
在开发各自的 DLL 动态链接库文件时，多数开发团队都有意让其他人直接调用自己的动态链接库。然
而，具体到“谁的 DLL 到底应该加载到哪个地址”这种问题，却没有一种公开的协议或标准。  
因此，当同一个进程的两个 DLL 库具有相同的基地址时，只会有一个 DLL 被真正加载到基地址上。
而另外一个 DLL 则会分配到进程内存的某段空闲空间里。在调用后者时，每个虚拟地址都会被重新校对。 