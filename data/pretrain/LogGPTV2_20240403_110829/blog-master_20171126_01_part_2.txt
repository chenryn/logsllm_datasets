[《阿里云RDS PostgreSQL OSS 外部表 - (dblink异步调用封装)并行写提速案例》](../201709/20170906_01.md)  
```  
vi test1.sql  
\set mov random(0,15)  
select consume_tag_log(:mov,10000) where pg_try_advisory_xact_lock(:mov);  
nohup pgbench -M prepared -n -r -P 1 -f ./test1.sql -c 16 -j 16 -T 3000 >./consume.log 2>&1 &  
```  
6、压测结果  
写入速度  
```  
单条单步写入，约 14.3万 行/s  
改成多表批量写入，可以提高到100万+ 行/s  
```  
消费速度  
```  
单表并行批量消费，约 25.5万 行/s  
改成多表并行批量消费，可以提高到 100万+ 行/s  
```  
查询速度，毫秒级    
```
postgres=# explain (analyze,verbose,timing,costs,buffers) select count(imei) from tbl3 where tagids @> (array[25281,25288])::int[];
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=224.50..224.51 rows=1 width=8) (actual time=2.745..2.746 rows=1 loops=1)
   Output: count(imei)
   Buffers: shared hit=193
   ->  Bitmap Heap Scan on public.tbl3  (cost=218.44..224.49 rows=5 width=33) (actual time=2.716..2.738 rows=9 loops=1)
         Output: imei, tagids, ins_tags, del_tags
         Recheck Cond: (tbl3.tagids @> '{25281,25288}'::integer[])
         Heap Blocks: exact=9
         Buffers: shared hit=193
         ->  Bitmap Index Scan on idx_tbl3_tagids  (cost=0.00..218.44 rows=5 width=0) (actual time=2.707..2.707 rows=9 loops=1)
               Index Cond: (tbl3.tagids @> '{25281,25288}'::integer[])
               Buffers: shared hit=184
 Planning time: 0.165 ms
 Execution time: 2.797 ms
(13 rows)
```
除了以上基于数组、GIN索引的设计，PostgreSQL还有一些技术，可以用在经营分析系统。  
## 技术1 实时透视 - 技术之 - 流式统计  
通过insert on conflict，流式的统计固定模型的维度数据。  
[《PostgreSQL 流式统计 - insert on conflict 实现 流式 UV(distinct), min, max, avg, sum, count ...》](../201711/20171123_02.md)  
满足这类查询的实时流式统计：  
```  
select a,count(*),sum(b),avg(b),min(b),max(b) from tbl group by a;  
```  
## 技术2 实时透视、估算 - 技术之 - 流式统计 + HLL  
通过insert on conflict，流式的统计固定模型的维度数据。这里要用到hll插件，存储count(dinstinct x)的估值  
[《PostgreSQL 流式统计 - insert on conflict 实现 流式 UV(distinct), min, max, avg, sum, count ...》](../201711/20171123_02.md)  
[《PostgreSQL hll (HyperLogLog) extension for "State of The Art Cardinality Estimation Algorithm" - 3》](../201302/20130228_01.md)  
[《PostgreSQL hll (HyperLogLog) extension for "State of The Art Cardinality Estimation Algorithm" - 2》](../201302/20130227_01.md)  
[《PostgreSQL hll (HyperLogLog) extension for "State of The Art Cardinality Estimation Algorithm" - 1》](../201302/20130226_01.md)  
满足这类查询的实时流式统计：  
```  
select a, count(distinct b) from tbl group by a;  
```  
## 技术3 实时透视、估算 - 技术之 - 计划估算  
根据执行计划得到评估行。  
[《妙用explain Plan Rows快速估算行》](../201509/20150919_02.md)  
如果输入多个字段条件，为了提高行估算准确度，可以定义多字段统计信息，10新增的功能：  
[《PostgreSQL 10 黑科技 - 自定义统计信息》](../201709/20170902_02.md)  
满足这类查询的估算需求：  
```  
select count(*) from tbl where xxxx;  
SQL换算成  
select * from tbl where xxxx; -- 通过explain的行估算拿结果  
```  
## 技术4 实时透视、估算 - 技术之 - 采样估算  
[《秒级任意维度分析1TB级大表 - 通过采样估值满足高效TOP N等统计分析需求》](../201709/20170911_02.md)  
采样估算，适合求TOP N。  
满足这类查询的估算需求：  
```  
select a from tbl group by a order by count(*) desc limit N;  
```  
## 技术5 实时圈选、透视 - 技术之 - GIN倒排  
倒排索引针对多值类型，例如 hstore, array, tsvector, json, jsonb。  
主树的K-V分别为：  
```  
element-ctid(行号)list or tree  
```  
辅树为  
```  
ctid list or tree  
```  
从而高效的满足这类查询的需求：  
```  
-- 包含哪些元素  
select * from tbl where arr @> array[xx,xx];  
-- 包含哪些任意元素之一  
select * from tbl where arr && array[xx,xx];  
```  
内部使用BITMAP扫描方法，过滤到少量数据块。  
[《PostgreSQL 9种索引的原理和应用场景》](../201706/20170627_01.md)  
## 技术6 实时圈选、透视 - 技术之 - bitmap  
这个方法非常的巧妙，将tag和imei做了倒转，以tag为key, imei为bitmap来存储。  
```  
create table tag_users (  
  tagid int primary key, -- 标签  
  imeibitmap varbit,     -- 每个imei用一个BIT位表示  
);  
```  
查询换算：  
```  
-- 包含某些标签的用户  
select bitand(imeibitmap) from tag_users where tagid in (?,?,...);  
-- 包含任意标签的用户  
select bitor(imeibitmap) from tag_users where tagid in (?,?,...);  
```  
案例参考：  
[《阿里云RDS for PostgreSQL varbitx插件与实时画像应用场景介绍》](../201705/20170502_01.md)  
[《基于 阿里云 RDS PostgreSQL 打造实时用户画像推荐系统(varbitx)》](../201610/20161021_01.md)  
## 技术7 实时圈选、透视 - 技术之 - 并行计算  
PostgreSQL 10加入了并行计算的能力，在join , filter, seqscan, order by, agg, group等方面都支持并行。  
性能指标参考：  
[《HTAP数据库 PostgreSQL 场景与性能测试之 23 - (OLAP) 并行计算》](../201711/20171107_24.md)  
## 技术8 实时圈选、透视 - 技术之 - MPP, 列存储, 位图索引  
基于PostgreSQL的MPP 数据仓库Greenplum，支持列存储，位图索引。  
用资源，暴力解决问题。  
没有太多的设计技巧，堆机器就可以，但是本身的效率远比impalar, hive好很多。  
Greenplum是非常值得推荐的OLAP数据库。在金融、政府、航空等大数据领域有众多案例。  
## 决策支持技术  
流式数据处理+UDF函数计算技术。可以满足实时决策的需求。  
案例如下：  
[《HTAP数据库 PostgreSQL 场景与性能测试之 32 - (OLTP) 高吞吐数据进出(堆存、行扫、无需索引) - 阅后即焚(JSON + 函数流式计算)》](../201711/20171107_33.md)  
[《HTAP数据库 PostgreSQL 场景与性能测试之 27 - (OLTP) 物联网 - FEED日志, 流式处理 与 阅后即焚 (CTE)》](../201711/20171107_28.md)  
## 相似案例举例  
1、实时统计 count(distinct)估值，min, max, avg, sum, count精确值。  
[《PostgreSQL 流式统计 - insert on conflict 实现 流式 UV(distinct), min, max, avg, sum, count ...》](../201711/20171123_02.md)  
2、  
[《PostgreSQL 异步消息实践 - Feed系统实时监测与响应(如 电商主动服务) - 分钟级到毫秒级的实现》](../201711/20171111_01.md)  
[《(OLTP) 物联网 - FEED日志, 流式处理 与 阅后即焚 (CTE)》](../201711/20171107_28.md)  
3、让explain产生精确的多字段输入条件行数估值(```select * from table where a=? and|or b=? ....```)  
[《PostgreSQL 10 黑科技 - 自定义统计信息》](../201709/20170902_02.md)  
4、[《恭迎万亿级营销(圈人)潇洒的迈入毫秒时代 - 万亿user_tags级实时推荐系统数据库设计》](../201612/20161225_01.md)  
[《阿里云RDS for PostgreSQL varbitx插件与实时画像应用场景介绍》](../201705/20170502_01.md)  
[《基于 阿里云 RDS PostgreSQL 打造实时用户画像推荐系统(varbitx)》](../201610/20161021_01.md)  
5、决策支持，流式函数计算  
[《(OLTP) 高吞吐数据进出(堆存、行扫、无需索引) - 阅后即焚(JSON + 函数流式计算)》](../201711/20171107_33.md)  
[《(OLTP) 高吞吐数据进出(堆存、行扫、无需索引) - 阅后即焚(读写大吞吐并测)》](../201711/20171107_32.md)  
6、圈人案例  
[《(OLAP) 用户画像圈人场景 - 数组相交查询与聚合》](../201711/20171107_20.md)  
[《(OLAP) 用户画像圈人场景 - 数组包含查询与聚合》](../201711/20171107_19.md)  
7、时间、空间、多维圈人、透视案例  
[《空间|时间|对象 圈人 + 透视 - 暨PostgreSQL 10与Greenplum的对比和选择》](../201709/20170918_02.md)  
[《PostgreSQL\GPDB 毫秒级海量 时空数据透视 典型案例分享》](../201706/20170629_01.md)  
[《PostgreSQL\GPDB 毫秒级海量 多维数据透视 案例分享》](../201706/20170625_01.md)  
8、视频网站透视案例  
[《音视图(泛内容)网站透视分析 DB设计 - 阿里云(RDS、HybridDB) for PostgreSQL最佳实践》](../201708/20170827_01.md)  
9、  
[《画像圈人 + 人群行为透视》](../201709/20170918_01.md)  
[《奔跑吧，大屏 - 时间+空间 实时四维数据透视》](../201704/20170413_02.md)  
[《数据透视 - 商场(如沃尔玛)选址应用》](../201703/20170307_01.md)  
[《海量用户实时定位和圈人 - 团圆社会公益系统(位置寻人\圈人)》](../201709/20170915_01.md)  
[《万亿级电商广告 - brin黑科技带你(最低成本)玩转毫秒级圈人(视觉挖掘姊妹篇) - 阿里云RDS PostgreSQL, HybridDB for PostgreSQL最佳实践》](../201708/20170823_01.md)  
[《多字段，任意组合条件查询(无需建模) - 毫秒级实时圈人 最佳实践》](../201706/20170607_02.md)  
10、  
[《经营、销售分析系统DB设计之PostgreSQL, Greenplum - 共享充电宝 案例实践》](../201709/20170923_01.md)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")