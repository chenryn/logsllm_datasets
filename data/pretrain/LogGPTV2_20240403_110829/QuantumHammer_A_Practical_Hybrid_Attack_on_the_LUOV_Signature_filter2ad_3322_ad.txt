𝑠𝑣
 =
𝑡11
...
𝑡𝑣1
. . .
. . .
. . .
𝑡1𝑚
...
𝑡𝑣𝑚
 ×
𝑜1
...
𝑜𝑚
 ⊕
𝑣1
...
𝑣𝑣
(5)
bit-tracing attack is to flip bits in T and observe the effect on
the signature values. Once we get a faulty signature, the signature
verification algorithm is utilized as an oracle to correct the signature
by iteratively modifying the faulty signature. When the correct
signature is found and the verification test is passed, bit-tracing
algorithm mathematically tracks back to the flipped bit and is able
to get information about the position of the flipped bit. By filling
the attacker rows with all ones and the victim row with all zeros,
we can tell that the flipped bit was a zero or vice versa.
We target the last part of the signature generation algorithm of
LUOV which is a linear transformation 𝑠𝑣×1 = T𝑣×𝑚 × 𝑜𝑚×1 ⊕ 𝑣𝑣×1
or in the matrix form as Equation 5.
Our bit-tracing algorithm for LUOV is given in Algorithm 2
which takes 𝑣 × 𝑚 signature verifications to trace 1 bit of T for
1 bit flip. The inputs to the algorithm are all public parameters:
1) the faulty signature 𝑆 which we get after flipping the bit using
Rowhammer attack, 2) the message 𝑀, 3) public map P. The al-
gorithm finds the correct signature by replacing each element of
𝑠 with the XOR of itself and each element of the oil variables. On
successful verification, the indexes of the bit flip (𝑟, 𝑐) in T are
returned which indicates the bit flip position in T . If there is a bit
Algorithm 2: Bit-tracing algorithm for LUOV - Offline
Input: (𝑆, 𝑠𝑎𝑙𝑡) - Faulty signature
for 𝑐 from 1 to m do
𝑆[𝑟] ←− 𝑆[𝑟] ⊕ 𝑆[𝑐 + 𝑣]
if 𝑃(𝑆) ≠ ℎ then
𝑀 - Message
P - Public map
Output: (𝑟, 𝑐) - Recovered bit flip position in T
1 ℎ ←− H(𝑀||0𝑥00||𝑠𝑎𝑙𝑡)
2 for 𝑟 from 1 to v do
3
4
5
6
7
8
9
10
11
12 end
𝑆[𝑟] ←− 𝑆[𝑟] ⊕ 𝑆[𝑐 + 𝑣]
return 𝑟, 𝑐
𝑏𝑟𝑒𝑎𝑘
else
end
end
flip somewhere in T , say at index (𝑟, 𝑐), multiplication of 𝑟𝑡ℎ row of
T and 𝑜 results in a difference in 𝑠 which is 𝑜𝑐 at the term 𝑠𝑐. As the
𝑜 and 𝑠 are public, we can try all potential differences which are the
elements of 𝑜 XORed with all elements of the 𝑠 to check which one
of the oil variable caused the error due to a bit flip in T . We achieve
this by replacing each element of 𝑠 with its XOR of all elements of
𝑜 one by one and pass it to the signature verification oracle. Once,
the signature gets verified, we get the indexes of the flipped bit
in T , which are (𝑟, 𝑐). The value of the bit can be recovered by
knowing the direction of the bit flip. A 0 −→ 1 flip means that the
Figure 7: Online phase of Rowhammer attack. The plot depicts the bit flips in the T matrix in the form of pixels, where white
pixels indicate the flipped bits. Approximately 80% of the key bits are flipped in 16 hours.
phase, they can be controlled by changing the data patterns in the
aggressor rows and turning on and off certain bit flips. We have
successfully tested this method via an independent experiment. But
found that it increases the duration of the online phase. It was more
efficient to just ignore the rare cases of more than 2 bit flips.
Implementation
LUOV Variant
1-bit Tracing
Offline(Sec)
AVX2
AVX2
(precompute)
Figure 8: Number of bits recovered per column of T in 16
hours of online phase.
key bit was originally 0 and a 1 −→ 0 bit flip means that the key bit
was 1. The amount of time needed for this offline post processing
bit-tracing algorithm is shown in Table 1 for all variants of LUOV
AVX2 optimized implementations.
For 2-bit scenario, Algorithm 2 can be modified to recover 2 bits
of T if 𝑣 × 𝑚 verifications fails to correct the signature. In this
scenario, there are two cases. First one is that 2 bit flips are in the
different rows of T which requires us to take all combinations of
elements of 𝑠, 2 at a time which is(cid:0)𝑣
(cid:1). For each combination, we
with all elements of 𝑜. The first scenario hence needs 𝑚2 ×(cid:0)𝑣
(cid:1)
(cid:1) verifications. In total, we
signature. This scenario requires 𝑣 ×(cid:0)𝑚
(cid:1) signature verifications for 1 bit and 2 bit
need 𝑣𝑚 + 𝑚2(cid:0)𝑣
need 𝑚2 verifications by XORing both elements of the combination
2
verifications. For 2 bit flips in the same row, the error is just in one
element of 𝑠. For each element of 𝑠, we need to XOR all combinations
of 𝑜, 2 at a time with the element of 𝑠, until we find the correct
scenarios combined. If there are multiple bit flips in T in the online
(cid:1) + 𝑣(cid:0)𝑚
2
2
2
2
luov-7-57-197-chacha
luov-7-57-197-keccak
luov-7-83-283-chacha
luov-7-83-283-keccak
luov-7-110-374-chacha
luov-7-110-374-keccak
luov-7-57-197-chacha
luov-7-57-197-keccak
luov-7-83-283-chacha
luov-7-83-283-keccak
luov-7-110-374-chacha
luov-7-110-374-keccak
1.58
11.44
10.46
58.22
35.19
239.34
0.36
0.36
1.64
1.63
4.98
4.99
Table 1: Post computation times for bit-tracing attack, Algo-
rithm 2 on LUOV. This computation is done offline and can
easily be parallelized and distributed. The measurements
are taken on a single machine with a Skylake Intel Core i5-
6440HQ CPU @2.6GHz processor. Note that these timings
are for 𝑣 × 𝑚 verifications which is the worst case scenario.
In practice, the bits are traced in fewer iterations depending
upon the position of the bit flip in T .
1 Hour1334 bits102030405020406080100120140160180Rows of T197572 Hours2511 bits10203040504 Hours4323 bits1020304050Columns of T197578 Hours6737 bits102030405016 Hours8902 bits10203040501020304050Column number of T1975750100150Bits recovered per col of T1975716h8h4h2h1h3.4 Performance
Table 1 summarizes the time it takes to perform the post-processing
time, i.e. the bit-tracing step. The computation is performed offline
and can easily be parallelized since all this step does is to search for
the fault location using the faulty signature. Enabled by Rowham-
mer, the bit-tracing attack manages to effectively recover bits of
T , the secret key matrix. Assuming single faults, each recovered
secret key bit requires a successful Rowhammer fault injection,
which takes significant amount of time, i.e. we get about 23 flips per
minute on our target platform in the first hour, while the flipping
performance degrades with time, see Figure 5. Remember that for
LUOV-7-57-197 we have 11,229 key bits to recover. Recovering the
entire signature key bit-by-bit would take more than 16 hours of
live observation which is unrealistic.
Alternatively, if we try to reduce the complexity of the LUOV
MQ equation system to enable SAT solving then the best strategy
would be to target specific rows of T using Rowhammer. Using
each fully recovered row, we can recover a vinegar variable. As
the original oil and vinegar scheme with equal number of oil and
vinegar variables already was shown to be breakable by Patarin,
we need to eliminate 𝑣 − 𝑚 variables which means 𝑣 − 𝑚 rows of
T need to be recovered using Rowhammer attack. This approach
too is costly.
Rather than trying to recover the entire key or to eliminate
vinegar variables until the security collapses, we introduce a novel
attack, i.e., QuantumHammer as described in the following section,
that uses the bit-tracing attack as an oracle.
4 QUANTUMHAMMER
We present QuantumHammer attack that significantly reduces the
complexity to the LUOV MQ system by splitting it into smaller
MQ problems. This is achieved by using the bit-tracing attack as
an oracle to recover a small number of specifically chosen key bits.
Overall attack complexity is drastically reduced compared to an
attack that only uses bit-tracing. Next we delve into the details of
the LUOV construction. Specifically we analyze the key generation
process to obtain a simpler formulation.
3 is formulated in terms of 𝑃𝑘
4.1 Divide and Conquer Attack
Let 𝑀𝑄(𝑣, 𝑚) and 𝑀𝐿(𝑣, 𝑚) represent systems of 𝑚 quadratic and
𝑚 linear equations of 𝑣 unknowns, respectively. Our aim is to attack
key generation part of LUOV explained in Section 2.3.1 and recover
boolean private linear transformation matrix T . The public parame-
ter 𝑄2 is generated from the intermediate 𝑚×𝑚 the boolean matrix
2 and T where
3 by Equation 4. 𝑃𝑘
𝑃𝑘
𝑃𝑘
1 and 𝑃𝑘
2 are publicly re-generatable from public parameter 𝑄1.
Therefore, for a direct attack, we need to solve a 𝑀𝑄(𝑣 · 𝑚, 𝑚3+𝑚2
)
in which equations are from Equation 4 and unknowns are the
elements of T . For the NIST Round 2 submission LUOV-7-57-197,
with parameters 𝑚 = 57 and 𝑣 = 197 solving the overall quadratic
system appears infeasible unless there is a major breakthrough.
Instead of trying to attack the 𝑚𝑣-bit secret key matrix T as
a whole, or recovering some part of T by bit-tracing attack and
applying exhaustive search to the rest, we gain a more powerful
attack, QuantumHammer, by exploiting the relation between the
1 , 𝑃𝑘
2
public matrices 𝑃𝑘
1 , 𝑃𝑘
2 , 𝑄2, where 𝑘 from 1 to 𝑚 and private linear
transformation matrix T (remember the LUOV key generation
process in Figure 1).
We start by making some observations on the structure of 𝑄2.
4.2 Observations on the structure of 𝑄2
Even though 𝑄2 yields a large 𝑀𝑄(𝑣 · 𝑚, 𝑚3+𝑚2
) system, one can
2
divide 𝑄2 column by column and consider it as a set of combination
of discrete, smaller MQ systems in terms of columns of T , i.e., set
of 𝑀𝑄(𝑣, 𝑚) and 𝑀𝑄(2𝑣, 𝑚) systems by Equation 4 and Equation 3.
Assuming bit-tracing attack recovers 𝑥 bits from a column of T ,
it is possible to reduce the related systems into one of 𝑀𝑄(𝑣 − 𝑥, 𝑚),
𝑀𝐿(𝑣 − 𝑥, 𝑚) and 𝑀𝐿(𝑣, 𝑚) systems. These equations have certain
structure that we wish to exploit to recover the entire T , column
by column. The following definitions and observations will lead us
to divide and conquer attack:
3 (𝑖, 𝑗) ⊕ 𝑝𝑘
(1) Define A𝑖 as the set of 𝑚 equations of 𝑣 variables, 𝑀𝑄(𝑣, 𝑚)
3 (𝑖, 𝑖) for 𝑘 from 1 to 𝑚 and