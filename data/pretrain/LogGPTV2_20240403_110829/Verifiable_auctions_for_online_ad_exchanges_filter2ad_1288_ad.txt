checkpoints across multiple auctions. We elide the details for the
sake of brevity. Here is a brief summary. We assume a ﬁxed window
function VERIFYPROOF(q, c, p, salt)
if p (cid:54)= ⊥ then
// p should be Hx−q(s).
if H(Hq(p) || salt) == c then
return accept
return reject
Figure 9—Reﬁnement of secrecy-preserving integer comparisons
(Figure 2) to use a salt.
of time during which an auction could be audited (say 1 month). If
this interval expires, the auction is guaranteed not to be audited.
At that point, it is safe to reuse the chain, provided it has not been
used in an audited auction. Replenishing checkpoints happens in
the audit phase. In particular, after an audit, the auctioneer gener-
ates a new set of chains and checkpoints, and marks all of the ones
associated with the current audit non-reusable.
7 EXPERIMENTAL EVALUATION
This section investigates the price of the guarantees that VEX pro-
vides, by asking the following questions: (1) What is VEX’s effect
on throughput? (2) What is VEX’s effect on latency in the online
phase? (3) What are VEX’s storage and bandwidth costs? (4) What
is the auditing cost in absolute terms, and what is the audit/auction
cost ratio? (5) What are the costs of the protocol introduced in Sec-
tion 3, and of alternative schemes that could be used to implement
private comparisons in VEX? We answer these questions in the con-
text of a prototype implementation, described below.
7.1 Prototype implementation
We implement model applications in C++, for an ad exchange (auc-
tioneer), a seller, and a bidder. We do not implement interactions
with the user (Figure 1, steps , , , and ). The auctioneer ap-
plication is 1215 lines of C++ (measured by SLOC [12]). We also
implement the two variants described in Section 6, requiring an ad-
ditional 165 lines of C++. The seller model application is 659 lines
of C++; the bidder, 939 lines. We also implement a model auditor
in 471 lines of C++ (and 30 more for VEX-CP).
For H, we use an optimized implementation of SHA-256; it uses
Intel’s AVX instructions. The implementation is based on a release
from Intel [7] and is adapted to work with our application (requiring
400 lines of assembly and C).
We perform all public key operations using the ESIGN signa-
ture scheme [42], with 2048-bit keys, and parameter e = 8. The
seeds (§3) are 512-bit strings, where the ﬁrst 256 bits form a well-
known pattern (see Figure 2), and the remaining 256 bits are ran-
domly generated. In the case of VEX-CP, the salts are 256 bits.
We use integers to represent bids from $0.01 to $100 in $0.01
increments (which is typically the smallest billable unit in ad ex-
changes [4]); thus, for the purposes of the integer comparison pro-
tocol (§3), the maximum (m) is 10,000. Also, VEX-CP computes a
total of 20 checkpoints (§6). All of the protocol messages are based
on DoubleClick’s RTB protocol [3], and are extended to contain the
required ﬁelds for VEX and its variants.
7.2 Experimental setup and method
We compare our implementation’s resource use to that of a base-
line protocol; we implemented the baseline in 1635 lines of C++,
following the protocol depicted in Figure 1.
We consider CPU utilization (measured using the PAPI li-
brary [10]), auction latency (measured at application-level from the
202Figure 11—Effect of load variation on auction latency with 20 bidders. Bar heights depict median per-auction latency over 100 trials (each trial
represents an end-to-end run of the entire system for 30 seconds); error bars depict 5th and 95th percentiles. Network latency is 10 ms (introducing
a delay of ∼40 ms for the baseline and ∼80 ms for all of VEX’s variants); see Section 6. The horizontal dashed line at 120 ms represents a standard
ad exchange timeout; this is the maximum time that the ad exchange waits for bidders to respond.
auctions/sec (closed loop)
# bidders
10
20
50
100
baseline
25,000
12,000
4,700
2,200
VEX-CP
1,100
550
220
110
VEX-NOCC
10,000
6,000
2,800
1,500
Figure 10—Maximum achievable auctions/sec measured at the auc-
tioneer on a single core and reported as means over 100 trials to two
signiﬁcant digits. The standard deviations in all experiments are less
than 10% of the means. The baseline does no cryptographic opera-
tions, so its auction computation is considerably lighter.
seller’s point of view, speciﬁcally from steps  to  in Figure 1),5
network utilization (reported in terms of bytes sent and received at
application-level), and storage (computed as bytes stored on disk).
We run all of our experiments on Utah’s Emulab [58], conﬁgur-
ing VEX, VEX-CP, VEX-NOCC, and the baseline identically. Each
party (bidder, seller, auctioneer) runs on a single core. Our experi-
ments have four physical nodes; one is dedicated to the auctioneer,
two are shared by all bidders and the seller, and the remaining one
is an Emulab delay node. All simulated links have ﬁxed 10 ms la-
tency, 1 Gbps throughput, and zero packet loss. Each node is a Dell
r820 2U server, with four 2.2 Ghz 64-bit 8-core E5-4620 “Sandy
Bridge” processors, 128 GB of 1333 MHz DDR3 RAM, running a
standard 64-bit Ubuntu 12.04 Linux operating system.
7.3 Throughput
To understand throughput, we measure the capacity (i.e., maximum
number of auctions per second) that the auctioneer can handle for
each of our variants. In this experiment, we pre-compute and load
into memory all of the inputs that the auctioneer expects from other
parties (e.g., commitments, signatures, etc), and bombard the auc-
tioneer with auction requests issued in closed loop, for 30 seconds;
this stresses the auctioneer’s part of the protocol in Figure 4. The
experiment thus includes the cost of message serialization but not
I/O and network overhead. We perform 100 trials.
Figure 10 depicts the results. VEX’s results are elided for read-
ability, but its performance is two orders of magnitude lower than
VEX-CP’s. The baseline is roughly 20× better than VEX-CP’s im-
plementation at higher loads. Under VEX-NOCC, however, the slow-
down is only 2×. While these results might produce some sticker
shock, they are actually not surprising: the baseline performs negli-
5In the case of VEX and its variants, we stop the timer before the seller
generates σR
seller (see Figure 4).
gible work (computing the maximum of a set, etc.) while VEX and
its variants handle twice as many messages and perform crypto-
graphic operations.
We perform a similar experiment for the seller and bidder appli-
cations and ﬁnd that they can sometimes be the bottlenecks in VEX’s
variants. Speciﬁcally, we observe that both applications are roughly
2 orders of magnitude slower than their baseline counterparts. The
seller reaches a capacity of 5500 auctions per second on a single
core (for 10 bidders; this number is only slightly lower for a higher
number of bidders), while the bidder application can support up to
650 auctions per second on a single core. The seller’s throughput is
limited by the three required public key operations; each takes on
average 50 µs. The limiting factor for bidders is commitment gen-
eration (§4), averaging 1.2 ms per commitment. Note that our base-
line seller application performs no computations besides sending
the request (Figure 1, Step ) and logging the response (Figure 1,
Step ), so we are not measuring the time needed to generate the
ad space and user information in these experiments.
Our results suggest that the computational bottleneck for now is
the bidder application (rather than the auctioneer). This is obviously
a limitation and a natural starting point for future work.
7.4 Latency
To investigate latency during the auction phase, we have the model
seller generate requests according to a Poisson process of varying
rate. We ﬁx the number of bidders at 20.
Figure 11 depicts the results. When lightly loaded (≤50 re-
quests/sec), VEX-CP and VEX-NOCC process auctions in less than
120 ms (at the 95th percentile). The latency overhead versus the
baseline is 55 ms for VEX-CP and 51 ms for VEX-NOCC, the major-
ity (∼40 ms) coming from an additional round of communication.
VEX’s latency rises with offered load because the load is exceed-
ing VEX’s (anemic) capacity; VEX-CP experiences the same behav-
ior starting at 200 auctions per second. By contrast, VEX-NOCC and
the baseline can handle signiﬁcantly higher loads, as they do not
perform cryptographic operations along the critical path (§6).
7.5 Network and storage costs
Figure 12 tabulates the network and storage overhead of VEX.
The majority of the overhead comes from transmitting and stor-
ing the VEX objects and the seller’s signatures (§4.3). In addition,
VEX-CP’s auctioneer incurs a moderate local storage cost from the
checkpoints of precomputed hash chains (§6).
 0 250 500 750 1000auction delay (ms)offered load (auctions per second) 10 20 50 100 200network delayprocessing timebasebasebasebasebasevex-noccvex-noccvex-noccvex-noccvex-noccvex-cpvex-cpvex-cpvex-cpvex-cpvexvex>1000vex>1000vex>1000vex>1000203(a) Audit throughput varying the number of bidders
(b) Audit throughput varying the auction’s sale price
Figure 13—Effect of the auction’s sale price and the number of bidders on the throughput of the audit phase, under the three variants of VEX
(the auctioneer generates audit proofs, and auditors verify them). In ﬁgure (a), the number of bidders varies, and the auction’s sale price is ﬁxed
at $50.00 (sp = 5000; see §4.3); one of the bars is truncated. In ﬁgure (b), the sale price varies, and the number of bidders is ﬁxed at 20.
network (bytes/auction)
seller ↔ auctioner
auctioneer ↔ bidder
storage (bytes/auction)
seller
auctioneer
bidder
VEX/VEX-NOCC
804 + 64n
672 + 64n
40 + 64n
328 + 64n
608 + 64n
VEX-CP
804 + 64n
704 + 64n
40 + 64n
328 + 32n + cp
608 + 64n
Figure 12—Network and storage costs beyond the baseline. n is the
number of bidders participating in the auction, and cp is the size (in
bytes) of the checkpoint list. The checkpoint list is composed of 20
checkpoints per seed, or a total of 640 bytes per bidder (640n). Not
depicted is an additional 64n bytes (for the VEX objects) that need to
be stored by an auctioneer under VEX-NOCC (see Section 6).
7.6 Audit cost
To quantify the cost of an audit, we run our auditor application
and the auctioneer (for each of the variants) independently, hand-
ing them auctions, in closed loop, to prove or verify, and measure
capacity. For VEX-CP, we do not depict the cost of generating new
seeds and checkpoints after an audit (§6); adding such costs would
result in performance similar to that of VEX-NOCC.
We perform two sets of experiments. First, we vary the number
of bidders that originally participated in the auction, holding sale
price constant. Figure 13(a) depicts the results. The CPU costs of
the proof generation and proof veriﬁcation algorithms (Figures 6
and 7) rise linearly with the number of bidders; the reason is that
the auctioneer generates a proof for every submitted bid.
Second, we vary the auction’s sale price, holding constant the
number of bidders. Figure 13(b) depicts the results. Sale price has
little effect on the work performed by the auctioneer (proof gener-
ation) in the optimized variants of VEX but signiﬁcantly impacts an
auditor’s throughput. The reason is that the principal cost for both
parties is hash operations. Meanwhile, under VEX-NOCC, the auc-
tioneer must perform, for each bid bi, (sp−bi)+(m−sp) = (m−bi)
hash operations, which is independent of sp. Under VEX-CP, the
number of hash operations performed by the auctioneer in the audit
20 , sp− bi}, and m/20 is the
controlling component, in our experiments. By contrast, the auditor
must perform m − sp hash operations for each less-than proof, plus
m + 1 − sp hash operations for the equal-to proof.
phase is upper-bounded by(cid:80)n
i=1 min{ m
Based on these results, the auctioneer can sustain audits at
roughly 1/18 and 1/160 the rate at which it can sustain auctions
commit. size
128 bytes
32 bytes
32 bytes
32 bytes
32 bytes
network cost
5.9 KB
3.8 KB
1.7 KB
1.3 KB
32 bytes
Boudot (2000) [18]
Camenisch et al. (2008) [21]
Chaabouni et al. (2012) [22]
Fauzi et al. (2013) [28]
VEX (§3)
rounds
3(cid:63)
3(cid:63)
1
1
1
(cid:63)Can be made non-interactive by applying the Fiat-Shamir heuristic [29].
Figure 14—Comparison of VEX’s integer comparisons (§3) to zero-
knowledge range proofs, in terms of storage and network costs, and
number of rounds of interaction. Costs are estimated from the papers;
we report the variant with the lowest communication costs.
under VEX-CP and VEX-NOCC, respectively (we ignore VEX as it
can actually perform more audits than auctions!). This means that
with 33% (say) additional resources over its auction-handling re-
sources, the auctioneer could support an audit rate of 1 in 24 and 1
in 480 auctions for VEX-CP and VEX-NOCC, respectively.
7.7
Integer comparison protocol
We now compare the protocol in Section 3 to zero-knowledge range
proofs (ZK:RP) [18, 21, 22, 28], which, like the protocol in Sec-
tion 3, provide privacy-preserving integer comparisons. However, a
ZK:RP provides stronger properties than VEX (it can answer queries
about ranges versus inequalities), but here our focus is on costs: the
size of commitment, the length of proofs, and the number of rounds
of interaction. Figure 14 depicts the comparison. VEX is relatively
lightweight in terms of commitment size and proof size, and it re-
quires only one round of communication.
Of course, another important axis for comparison is computa-
tional (CPU) cost of commitment generation, proof generation, and
proof veriﬁcation. However, it is difﬁcult to estimate the cost of the
alternatives because most of them have not been implemented, and