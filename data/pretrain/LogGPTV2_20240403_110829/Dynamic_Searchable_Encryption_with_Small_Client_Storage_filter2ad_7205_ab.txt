updates called SDd that has the same search overhead
as SDa and it outperforms state-of-the-art low-client-
storage DSE schemes in many scenarios (see our
experimental evaluation in Section V).
Finally for delete-intensive query workloads, we
present QOS, a DSE with quasi-optimal search time
O(nw log iw) and O(1) client storage that vastly
outperforms existing quasi-optimal schemes during
searches, where nw denotes the number of ﬁles con-
taining keyword w and iw the number of insertions
for w. Indeed, for large deletion percentages (ap-
proximately 40− 80%, depending on the deployment
setting) it outperforms all other schemes.
All our constructions are forward-and-backward private (BP-
II for SDa and SDd, BP-III for QOS). Formal
theorem
statements and proofs can be found in Appendix A. Our
schemes are secure in the programmable random oracle model
but this assumption can be removed with standard techniques
without decrease in asymptotic efﬁciency, similar to [12], [25].
A detailed comparison with other DSE can be seen in
Table I where we only focus on schemes with small client
storage. We also consider W O+MITRA (WO stands for stor-
ing search/insertion counters for each w at an oblivious map),
the result of combining the most efﬁcient backward-private
scheme from [29] with the “word counter + oblivious map”
approach described above (this technique can be used with
other schemes, e.g., FIDES, JANUS from [10] and JANUS++
from [54], but MITRA outperforms all of them both in terms
of performance and security). All schemes in Table I use
OMAPs, except for SDa; they can achieve O(1) storage by
storing the stashes at the server and generating keys with
a PRF. One general conclusion from the table is that our
schemes achieve much better search performance at the cost
of increased overhead for updates. We note that this trade-off
can be favorable, e.g., it seems suitable for OLAP databases
and data warehouses [18] in which search is more crucial than
the update performance.
Overview of techniques. SDa and SDd utilize classic tech-
niques for transforming static data structures to dynamic
ones [45], [46]. They store the result of N updates in a
sequence of log N separate indexes with sizes 20, . . . , 2log N .
Each update is ﬁrst stored in the smallest index and whenever
two indexes of the same size exist they are downloaded and
merged to a single new one by the client. Searches are then
executed at each data structure independently. Ensuring that
the underlying static scheme is result-hiding allows us to prove
that SDa is backward private. Similar to the majority of DSE
constructions from the literature, we store triplets of the form
(w, id, op) where op = add/del, that is, deletions are also
“stored”. During search, the client ﬁlters out deleted entries.
Private lazy rebuild. For SDd, we propose a way to implement
the lazy rebuild de-amortization technique of [46] for search-
able encryption. At a high level, a ﬁxed small number of steps
of the setup routine of the underlying static SE need to be run
for each update. In order to achieve a backward-and-forward
private DSE scheme, the static SE must have a setup that is
naturally “decomposable” into steps with small, efﬁciently re-
trievable local state. For our instantiation, we choose PiBas, an
efﬁcient static scheme from [12]. During setup, PiBas parses
the input dataset in a deterministic manner, one keyword-
document identiﬁer pair at a time, storing the corresponding
entry (w, id) in a pseudorandom position at a hash table. The
only state for the client is a counter of the times each keyword
w has been inserted so far (Figure 12). In SDd , we store
this state at the server using an OMAP. For every update,
the client performs one step of the PiBas setup process for
every data structure size in the worst-case. For each of these,
it needs the counter for the related keyword which is retrieved
with an OMAP access. Due to the deterministic access pattern
of PiBas and the oblivious accesses, the resulting scheme is
forward-and-backward private.
OMAP for updates; not for searches. A very interesting as-
pect of SDd is that, although it uses an oblivious map, it is only
accessed during updates. Due to this, searches are executed
non-interactively.
QOS: Practical quasi-optimal search. Unlike all previous
quasi-optimal search DSE that need to perform nw oblivious
accesses, QOS requires a single OMAP query which makes
it much faster in practice. This is achieved by decoupling the
result retrieval from the oblivious primitives.
QOS stores inserted entries of the form (w, id) in a
hash table I where the position is computed based on a
pseudorandom token, similar to most existing DSE schemes.
Where it deviates is in the way it treats deletions. For each w,
the client maintains a “conceptual” binary tree that describes
its update history (see Figure 5). It has N leafs, where N is
an upper bound in the number of supported insertions; initially
all nodes are white. Every node is numbered naturally, starting
from leafs 1, . . . , N, on to their parents N + 1, . . . , 3N/2 + 1,
etc. Inserted entries are “mapped” to the leafs of the tree
from left to right. In practice, this is done by storing the i-
th insertion (wi, idi) to a position in I that depends on the
leaf label i. Deletions mark tree nodes as black, e.g., deleting
(wi, idi) would color the i-th leaf black. Black nodes then
“propagate” upwards: if two siblings are black, their parent is
also colored black. After every deletion, let j be the single
top-most node that was just colored black. The client marks
a position (computed pseudorandomly based on w, j and the
search counter of w) in a separate hash table D. To hide the
tree manipulation part (coloring the nodes), and to be able
to efﬁciently retrieve the leaf where (wi, idi) is stored, QOS
involves two additional OMAPs, in addition to the “standard
one” for retrieving search and insertion counters for w.
During a search for w, after retrieving the search counter
from the OMAP, the client releases the PRF tokens. The server
uses them to non-interactively ﬁnd the positions in I,D for
the nodes of the update tree for w. To speed up the process,
it starts from the Best Range Cover (selects the minimum
number of nodes that cover exactly the range) of leafs [1, iw]
and proceeds downwards, always checking whether it found
a black node by looking up positions of D, in which case it
abandons this path. Upon reaching non-black leafs, the server
looks up their positions in I; by construction, this is where
non-deleted entries are found. After decrypting and retrieving
the result, the client “re-maps” the accessed entries in I,D
to new locations using freshly computed PRF tokens with
increased search counter.
3
Clean-up. As discussed above, many DSE schemes, including
SDa and SDd, store deletions as actual entries. Thus, the server
storage is not reduced after deletions. However, this is almost
unavoidable when storing the encrypted entries in a hash
table/map (where memory is not de-allocated). One notable
exception is the forward-private DSE of [39] but no backward-
private scheme with this property exists. On the other hand,
reducing search time for future searches is—arguably—more
important
the server. Many
existing DSE schemes have a special “clean-up” phase for this,
typically executed in tandem with searches. Our SDa and SDd
schemes are amenable to such a clean-up process taking place
during updates (the ﬁrst very naturally whereas the second
requires some additional bookkeeping). On the other hand,
quasi-optimal schemes like QOS inherently achieve this since
searches are (almost) unaffected by deletions.
than saving storage space at
Experimental evaluation. We implemented our three schemes
and compare their search, update, and storage performance
with existing forward-and-backward private DSE (Section V).
In particular, we compare them with the best
low-client-
storage scheme, MITRA [29] with the word counter stored in
an oblivious map, and HORUS [29], the faster quasi-optimal
scheme. In terms of search time, SDa and SDd take less than
0.1ms for retrieving a result of 100 elements from a dataset
of 1M records. Moreover, for small results, they are up to
34× and 20× faster than MITRA, with the added beneﬁt
of being non-interactive. Turning to quasi-optimal schemes,
QOS takes 1.3ms for the same setting, vastly outperforming
HORUS (4-16531× throughout our experiments). Where our
schemes perform worse is in updates (as is evident from the
asymptotic analysis in Table I), e.g., for our tested cases QOS
is roughly 2× slower than HORUS (with the same blowup
factor for communication size), whereas MITRA is up to 21×
faster than SDd (in the worst case). All these results are for
10% deleted entries. For larger delete percentages we show that
QOS has the potential to become the most efﬁcient solution.
It outperforms both MITRA and SDd after different ratios
between 40-80%, depending on the number of insertions.
B. Related Work
Searchable encryption—considered a special type of struc-
tured encryption [17]—was introduced by Song et al. [51].
Curtmola et al. [19] proposed the most widely used security
deﬁnition and the ﬁrst scheme with non-trivial search time.
It has since been improved in several ways, e.g., support for
multiple users [49], [50], [33], more expressive queries in-
cluding relational databases, conjunctive keywords, and graph
queries [13], [34], [17], [41], [35], [22], [40], or efﬁcient on-
disk storage [14], [43], [7], [23], [20].
The ﬁrst DSE schemes were presented in [37], [36];
these schemes achieve optimal search time at the expense
of increased leakage (none of these schemes are forward or
backward private). The notion of forward privacy was ﬁrst
discussed in [16] and improved in multiple subsequent works
(e.g., [52], [32], [12], [44], [9], [39], [27], [25]). Backward
privacy was ﬁrst considered by Stefanov et al. [52] and
formally deﬁned much later by Bost et al [10]. Since then,
Ghareh Chamani et al. [29], and Sun et al. [54] presented
more efﬁcient schemes, and Amjad et al. [5] proposed a
scheme using trusted hardware. The use of classic “static-to-
dynamic” data structure techniques for DSE has been proposed
before, e.g., [22], [23]. However, these works only consider
forward privacy and amortized solutions—our scheme SDd
is the ﬁrst to achieve backward privacy and worst-case low-
storage updates. A forward-private DSE with quasi-optimal
search was ﬁrst proposed in [52]. The property was deﬁned
in [29] that also presented quasi-optimal DSE with forward and
backward privacy. A general performance comparison of our
schemes with previous low-storage DSE is shown in Table I.
Our QOS scheme organizes updates in a conceptual binary
tree and uses each node’s natural label to compute its corre-
sponding storage position via a PRF. We believe a very similar
scheme can be achieved using the classic tree-based GGM
PRF/DPRF [31], [38], [8], [11], mapping leafs to its outputs
and nodes higher in the tree to “intermediate” evaluations.
This construction would avoid the random oracle assumption
(without additional interaction), however we instead chose to
build QOS in a black-box way from any PRF.
Recent advances in ORAM. Recently, [47], [6] proposed
novel ORAM constructions, with improved efﬁciency match-
ing the theoretical optimal overhead of O(log N ). It is possible
to modify these to yield oblivious maps, thus asymptotically
improving our schemes SDd and QOS as well as [27], [10],
[29]. However, they achieve amortized performance. While it
may be possible to de-amortize them, this will undoubtedly
result in additional cost.3
II. PRELIMINARIES
We denote by λ ∈ N a security parameter. PPT stands
for probabilistic polynomial-time. Our protocols are executed
between two parties, a client and a server. Slightly abusing
notation, we let (x(cid:48); y(cid:48)) ↔ P (x; y) denote a (possibly multi-
round) protocol execution with input x and output x(cid:48) for the
client, and input y and output y(cid:48) for the server. We consider a
collection of D documents with identiﬁers id1, . . . , idD, each
of which contains textual keywords from a given alphabet Λ.
Let the dataset DB consist of pairs of keyword-ﬁle identiﬁers,
such that (w, id) ∈ DB if and only if the ﬁle id contains key-
word w. For each w, let DB(w) denote the set of documents
that contain keyword w. Let W denote a set of keywords that
contains all the keywords from DB (possibly more).
Pseudorandom functions. Let Gen(1λ) ∈ {0, 1}λ be a
key generation function, and F : {0, 1}λ × {0, 1}(cid:96) →
{0, 1}(cid:96)(cid:48)
be a pseudorandom function (PRF) family. F is a
secure PRF family if for all PPT adversaries Adv,| Pr[K ←
Gen(1λ); AdvF (K,·)(1λ) = 1]−Pr[AdvR(·)(1λ) = 1]| ≤ v(λ),
where R : {0, 1}(cid:96) → {0, 1}(cid:96)(cid:48)
Searchable encryption. A dynamic symmetric searchable
encryption scheme (DSE) Σ = (Setup, Search, U pdate)
consists of algorithm Setup, and protocols Search, U pdate
that are executed between a client and a server:
is a truly random function.
•
Setup(λ) on input λ outputs (K, σ, EDB) where K is
a secret key for the client, σ is the client’s local state,
3However, note that the quasi-optimal Horus scheme of [29] which we
compare the performance of our schemes against, uses Path-ORAM in a
non-black-box way and it is not readily compatible with these new ORAM
schemes.
4
and EDB is an (initially empty) encrypted database
that is sent to the server. The notation Setup(λ, N )
refers to a setup process that takes a parameter N for
the maximum supported number of entries.
Search(K, q, σ; EDB) is a protocol for searching
the database. Here, we consider search queries for a
single keyword i.e., q = w ∈ Λ∗. The client’s output
is DB(w). The protocol may also modify K, σ and
EDB.
U pdate(K, op, w, id, σ; EDB) inserts an entry to or
removes an entry from DB. Input consists of op =
add/del, ﬁle identiﬁer id and keyword w. The proto-
col may modify K, σ and EDB.
•
•
In the above, we mostly followed the description of [9],
[10], [29]. Given the above API, on input the data collection
the client can run Setup, followed by N calls to U pdate to
“populate” EDB. Assuming the scheme is forward private
(see below) this leaks nothing more than running an initial
setup operation on the DB. Other works [25], [39] model
U pdate as “ﬁle” addition or deletion, where the protocol
adds/removes all the relevant keywords to/from DB. This is
functionally equivalent as this process can be decomposed to
multiple calls of the above U pdate protocol.
At a high level, Σ is correct if the returned result DB(w)
is correct for every query (for a formal deﬁnition, see [12]).
The privacy of Σ is parametrized by a leakage function L =