该命令的输出如下所示:
![](img/7eb7c72d-cad0-4837-9df6-5cdd0c6d30b9.png)
然后，安装并启用`sydney`主题:
```
$ docker-compose run wp theme install sydney --activate
```
该命令的输出如下所示:
![](img/a5063118-333d-47e6-b534-9c7ebadbcabc.png)
在 [http://localhost:8080/](http://localhost:8080/) 刷新我们的 WordPress 页面应该会显示如下内容:
![](img/8957b6fe-d698-4b21-9f37-292acb3742a5.png)
在打开 IDE 之前，让我们使用以下命令销毁运行 WordPress 安装的容器:
```
$ docker-compose down 
```
该命令的输出如下所示:
![](img/d4e8f2f0-b75d-4f41-a203-be965f441683.png)
由于我们的整个 WordPress 安装，包括所有的文件和数据库，都存储在我们的本地机器上，我们应该能够运行以下命令返回到我们离开它的 WordPress 站点:
```
$ docker-compose up -d
```
一旦您通过转到 [http://localhost:8080/](http://localhost:8080/) 确认它已按预期启动并运行，请在桌面编辑器中打开`docker-wordpress`文件夹。我使用了崇高的文本。在编辑器中，打开`wordpress/web/wp-blog-header.php`文件，在打开的 PHP 语句中添加以下一行并保存:
```
echo "Testing editing in the IDE";
```
该文件应该如下所示:
![](img/522fd0f5-a1e0-4f20-aca7-f5d9f1b45843.png)
一旦保存，刷新你的浏览器，你应该会在页面最底部的集成开发环境中看到**测试编辑**的消息(以下屏幕被缩放；如果你跟着读，可能更难发现，因为文本很小):
![](img/28881359-ecf2-43c1-a05c-91a7904d1bab.png)
我们要看的最后一件事是为什么我们把`wordpress/export`文件夹安装在`wp`容器上。
正如本章前面已经提到的，您不应该真正接触`wordpress/mysql`文件夹的内容；这也包括分享。虽然如果您压缩项目文件夹并将其传递给同事可能会有效，但这并不被认为是最佳做法。因此，我们已经装载了导出文件夹，允许我们使用 WP-CLI 进行数据库转储并导入它。
为此，请运行以下命令:
```
$ docker-compose run wp db export --add-drop-table /export/wordpress.sql
```
以下终端输出显示了导出以及前后`wordpress/export`的内容，最后是 MySQL 转储的前几行:
![](img/05768ab0-7d48-487d-ab2e-a1e4d693a0f4.png)
如果需要，比如说，因为我在开发过程中犯了一个错误，我可以通过运行以下命令回滚到数据库的那个版本:
```
$ docker-compose run wp db import /export/wordpress.sql
```
该命令的输出如下所示:
![](img/2f5dcc3c-517c-485c-8463-5b12d7aa5fb1.png)
如您所见，我们已经安装了 WordPress，使用 WP-CLI 和浏览器与它交互，编辑代码，还备份和恢复了数据库，所有这些都无需安装或配置 nginx、PHP、MySQL 或 WP-CLI。我们也不用登录容器。通过从我们的主机装载卷，当我们拆掉 WordPress 容器时，我们的内容是安全的，并且我们没有丢失任何工作。
此外，如果需要，我们可以很容易地将项目文件夹的副本传递给安装了 Docker 的同事，并且通过一个命令，他们就可以处理我们的代码，知道它运行在与我们自己的安装完全相同的环境中。
最后，当我们使用 Docker 商店的官方映像时，我们知道我们可以放心地要求将它们部署到生产中，因为它们是根据 Docker 的最佳实践构建的。
Don't forget to stop and remove your WordPress containers by running `docker-compose down`.
# 监视
接下来，我们将看看如何监控我们的容器以及 Docker 主机。在[第 4 章](04.html) *【管理容器】*中，我们讨论了`docker container top`和`docker container stats`命令。您可能还记得，这两个命令都只显示实时信息；没有保存历史数据。
虽然这在您试图调试正在运行的问题或想要快速了解容器内发生的情况时非常有用，但如果您需要回顾问题，这并没有太大帮助:可能您已经配置了容器，如果它们变得无响应，则可以重新启动。虽然这将有助于提高应用的可用性，但是如果您需要了解为什么您的容器变得没有响应，这并没有多大帮助。
在`/chapter14`文件夹的 GitHub 存储库中，有一个名为`prometheus`的文件夹，其中有一个 Docker Compose 文件，在两个网络上启动三个不同的容器。与其看 Docker Compose 文件本身，不如让我们看一下可视化:
![](img/3efc549a-54a8-4083-8edc-b1679455d5af.png)
如你所见，发生了很多事情。我们正在运行的三项服务是:
*   **球童**
*   **普罗米修斯**
*   **围巾**
在我们启动和配置 Docker Compose 服务之前，我们应该先从 cadvisor 开始讨论为什么需要每一个服务。
`cadvisor`是谷歌发布的一个项目。从我们正在使用的映像中的 Docker Hub 用户名中可以看到，Docker Compose 文件中的服务部分如下所示:
```
 cadvisor:
 image: google/cadvisor:latest
 container_name: cadvisor
 volumes:
 - /:/rootfs:ro
 - /var/run:/var/run:rw
 - /sys:/sys:ro
 - /var/lib/docker/:/var/lib/docker:ro
 restart: unless-stopped
 expose:
 - 8080
 networks:
 - back
```
我们正在安装主机文件系统的各个部分，以允许`cadvisor`访问我们的 Docker 安装，就像我们在[第 11 章](11.html) *中所做的一样，Portainer–Docker 的图形用户界面*。这样做的原因是，在我们的案例中，我们将使用`cadvisor`来收集容器的统计数据。虽然它可以用作独立的容器监控服务，但我们不想公开 cadvisor 容器。相反，我们只是让它对后端网络上 Docker Compose 栈中的其他容器可用。
`cadvisor`是 Docker 容器`stat`命令的独立 web 前端，显示图形，并允许您从易于使用的界面从 Docker 主机深入到容器中。然而，它不会保留超过 5 分钟的指标。
由于我们试图记录可能在几小时甚至几天后可用的指标，不超过 5 分钟的指标意味着我们将不得不使用额外的工具来记录 it 处理的指标。`cadvisor`在以下端点将我们想要记录到容器中的信息公开为结构化数据:`http://cadvisor:8080/metrics/`。
稍后我们将了解为什么这很重要。我们的下一个服务`prometheus`正在自动抓取`cadvisor`端点。这是大部分繁重工作发生的地方。`prometheus`是由 SoundCloud 编写并开源的监控工具:
```
 prometheus:
 image: prom/prometheus
 container_name: prometheus
 volumes:
 - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
 - prometheus_data:/prometheus
 restart: unless-stopped
 expose:
 - 9090
 depends_on:
 - cadvisor
 networks:
 - back
```
从前面的服务定义中可以看到，我们正在挂载一个名为`./prometheus/prometheus.yml`的配置文件和一个名为`prometheus_data`的卷。配置文件包含有关我们要清除的源的信息，从以下配置中可以看到:
```
global:
 scrape_interval: 15s 
 evaluation_interval: 15s
 external_labels:
 monitor: 'monitoring'
rule_files:
scrape_configs:
 - job_name: 'prometheus'
 static_configs:
 - targets: ['localhost:9090']
 - job_name: 'cadvisor'
 static_configs:
 - targets: ['cadvisor:8080']
```
我们指示普罗米修斯每`15`秒从我们的端点抓取数据。端点是在`scrape_configs`部分定义的，正如你所看到的，我们已经定义了`cadvisor`和普罗米修斯本身。我们创建和安装`prometheus_data`卷的原因是普罗米修斯将存储我们所有的指标，所以我们需要保证它的安全。
普罗米修斯的核心是一个时间序列数据库。它获取抓取的数据，对其进行处理以找到度量名称和值，然后将其与时间戳一起存储。
普罗米修斯还配备了强大的查询引擎和应用编程接口，使其成为这类数据的完美数据库。虽然它确实带有基本的绘图功能，但建议您使用 Grafana，这是我们的最终服务，也是唯一公开的服务。
**Grafana** 是一个用于显示监控图和指标分析的开源工具，它允许您使用时间序列数据库创建仪表板，例如石墨、InfluxDB 以及 Prometheus。还有更多后端数据库选项可以作为插件使用。
Grafana 的 Docker Compose 定义遵循与我们其他服务类似的模式:
```
 grafana:
 image: grafana/grafana
 container_name: grafana
 volumes:
 - grafana_data:/var/lib/grafana
 - ./grafana/provisioning/:/etc/grafana/provisioning/
 env_file:
 - ./grafana/grafana.config
 restart: unless-stopped
 ports:
 - 3000:3000
 depends_on:
 - prometheus
 networks:
 - front
 - back
```
我们使用`grafana_data`卷来存储 Grafana 自己的内部配置数据库，而不是将环境变量存储在 Docker Compose 文件中，而是从名为`./grafana/grafana.config`的外部文件中加载它们。
变量如下:
```
GF_SECURITY_ADMIN_USER=admin
GF_SECURITY_ADMIN_PASSWORD=password
GF_USERS_ALLOW_SIGN_UP=false
```
如您所见，我们在这里设置用户名和密码，因此将它们保存在外部文件中意味着您可以在不编辑核心 Docker Compose 文件的情况下更改这些值。
现在我们知道了这四种服务各自所扮演的角色，让我们来启动它们。为此，只需从`prometheus`文件夹运行以下命令: