# SRFuzzer: An Automatic Fuzzing Framework for Physical SOHO Router Devices to Discover Multi-Type Vulnerabilities

## Authors
Yu Zhang, Wei Huo, Kunpeng Jian, Ji Shi, Haoliang Lu, Longquan Liu, Chen Wang, Dandan Sun, Chao Zhang, Baoxu Liu

### Affiliations
1. Institute of Information Engineering, Chinese Academy of Sciences
2. School of Cyber Security, University of Chinese Academy of Sciences
3. Institute for Network Science and Cyberspace, Tsinghua University

## Outline
1. **Introduction**
   - Importance of SOHO Router Security
   - Challenges in Finding Vulnerabilities
   - Fuzzing Challenges for SOHO Routers
2. **Example: NTP Configuration**
3. **SRFuzzer: Our Solution**
   - Seed Generation
   - Seed Mutation
   - Exceptional Behavior Triggering and Monitoring
   - Power Control
4. **Evaluation**
   - Experiment Overview
   - Analysis of Issues
   - Performance of Monitors
   - Comparison with Popular Fuzzers
5. **Discussion**
6. **Summary**
7. **Q&A**

## Introduction

### Importance of SOHO Router Security
SOHO (Small Office/Home Office) routers play a critical role in modern life, making them a primary target for adversaries. For example, the VPNFilter malware infected at least 500,000 devices across 54 countries [1]. These devices often connect various IoT devices such as smartphones, personal computers, cameras, and printers.

### Challenges in Finding Vulnerabilities
Fuzzing is a popular technique for discovering vulnerabilities in IoT devices. However, existing fuzzing techniques have limitations, especially when it comes to SOHO routers. The table below compares different fuzzing techniques:

| Technique          | Emulation | Multi-Type Vulnerability | Zero-Day Detection | Coverage-Guided |
|--------------------|-----------|--------------------------|--------------------|-----------------|
| Andrei Costin et al. | Yes       | Yes                      | Yes                | No              |
| FIRMADYNE          | PoC       | Yes                      | No                 | No              |
| IoTFuzzer          | Blackbox  | Yes                      | Yes                | No              |
| Muench et al.      | FIRM-AFL  | No                       | No                 | Yes             |

### Challenges of Fuzzing SOHO Routers
1. **Generating Initial Seeds**
   - Many vendors, few standards
   - Various implementations
   - Rich information in seeds
2. **Fuzzing Dedicated Systems**
   - Obtaining code coverage without emulation is difficult
   - Emulation is limited among various devices
   - Devices can enter a "zombie" state
3. **Triggering and Monitoring Multi-Type Vulnerabilities**
   - Silent memory corruptions
   - Not only memory corruptions
   - Decreasing false positives and misses

## Example: NTP Configuration
- **CONF-READ Communication Model**
  - GET request: READ operation
  - POST request: CONF operation
- **KEY-VALUE Data Model**
  - `ntpserver1=time.test1.com`
- **Phases to Trigger Multi-Type Vulnerabilities**
  - Memory Corruption
  - Command Injection
  - Stored XSS
  - Information Disclosure

### NTP Configuration Example
- **Raw Request**
  ```http
  POST /apply.cgi?/NTP_debug.htm HTTP/1.1
  Host: 192.168.66.1
  Connection: keep-alive
  Content-Length: 209
  submit_flag=ntp_debug&conflict_wanlan=&ntpserver1=time.test1.com
  &ntpserver2=time.test2.com&ntpadjust=0&hidden_ntpserver=GMT8&h
  idden_dstflag=0&hidden_select=33&dif_timezone=0&time_zone=GMT-
  8&ntp_type=0&pri_ntp=
  ```

- **Functions Handling `ntpserver1`**
  - `conf_ntpserver1()`: Command injection vulnerability due to data type inconsistency.
  - `read_ntpserver1()`: Stack-based overflow vulnerability due to length limitation inconsistency.

## SRFuzzer: Our Solution
- **Direct Fuzzing of Physical Devices**
- **Triggering Multi-Type Vulnerabilities** using KEY-VALUE data model and CONF-READ communication model
- **Monitoring Exceptional Behaviors** and generating relevant information
- **Power Control** using smart plugs to restore devices from "zombie" states
- **Modular Design** and extensibility

### Components
- **Seed Generator**
  - Crawler (General and Passive)
  - KEY-VALUE parser with labeling
- **Mutator**
  - Mutation Selector
  - Pattern Selector
- **Monitor**
  - Response-based
  - Proxy-based
  - Signal-based
- **Power Control**
  - Smart Plug
  - Python-miio package

## Evaluation

### Experiment Overview
- **Devices**: 10 devices from 5 different popular vendors
- **Issues Found**: 101 unique issues, 97 assigned vulnerability IDs
- **PoCs**: Manually crafted for all unique issues

### Analysis of Issues
- **Types of Issues**
  - 48 memory corruption
  - 39 command injection
  - 9 stored XSS
  - 5 info disclosure
- **Trigger Points**
  - 67.33% in CONF operations
  - 32.67% in READ operations
- **Device Specificity**
  - TP-Link TL-WVR900G: High number of issues

### Performance of Monitors
- **General Mechanism (Response-based and Proxy-based)**
  - Caught 77.23% of confirmed issues
- **Signal-based Monitor**
  - Caught silent memory corruptions
- **Device Reboots**
  - Average of 6.8 reboots per device

### Comparison with Popular Fuzzers
- **Memory Corruption**
  - 53.57% more issues than customized boofuzz
- **Command Injection**
  - 25.81% more issues than Commix
- **XSS Detection**
  - Similar performance to wfuzz

## Discussion
- **Scope Limitation**
  - More types of devices and protocols
- **Vulnerability Severity**
  - Focus on more critical issues
- **Data Inconsistency Research**
  - To find more issues and help vendors harden their products
- **Monitoring**
  - Generalize efficient monitoring mechanisms

## Summary
- **SRFuzzer** is an automatic fuzzing framework for physical SOHO routers to discover multi-type vulnerabilities.
- It reveals the root cause of different types of vulnerabilities as data inconsistency.
- By fuzzing 10 real-world devices, we obtained 97 assigned vulnerability IDs.

## References
[1] 2018. New VPNFilter malware targets at least 500K networking devices worldwide. https://blog.talosintelligence.com/2018/05/VPNFilter.html.

## Q&A

Thank you!