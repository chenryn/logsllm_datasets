title:SRFuzzer: an automatic fuzzing framework for physical SOHO router
devices to discover multi-type vulnerabilities
author:Yu Zhang and
Wei Huo and
Kunpeng Jian and
Ji Shi and
Haoliang Lu and
Longquan Liu and
Chen Wang and
Dandan Sun and
Chao Zhang and
Baoxu Liu
SRFuzzer: An Automatic Fuzzing Framework for 
Physical SOHO Router Devices to Discover Multi-
Type Vulnerabilities
{Yu Zhang, Wei Huo, Kunpeng Jian, Ji Shi, Haoliang Lu, Longquan Liu, Chen Wang,
Dandan Sun} 1,2, Chao Zhang3, Baoxu Liu1,2
Institute of Information Engineering, Chinese Academy of Sciences1
School of Cyber Security, University of Chinese Academy of Sciences2
Institute for Network Science and Cyberspace, Tsinghua University3
1
ØSecurity of the SOHO Router is
ØHow to Find the Vulnerability
ØChallenge of Fuzzing the SOHO
Router
Outline
Introduction
Important
Example—— NTP configuration
SRFuzzer——Our Solution
ØSeed Generation
ØSeed Mutation
ØExceptional Behavior Triggering 
and Monitoring
ØPower Control
Evaluation
ØExperiment Overview
ØAnalysis of Issues
ØPerformance of Monitors
ØComparison with Popular
Fuzzers
Discussion
Summary
Q&A
2
Security of the SOHO Router is Important
SOHO routers are in prominent position
in nowadays life.
SOHO routers are one of the essential 
exploiting targets by adversaries.
ØVPNFilter infected at least 500,000 devices in 
at least 54 countries [1]
ØSmart phone, personal computer, camera,
printer, etc
3
Find Vulnerabilities in Routers
Fuzzing is popular in discovering vulnerabilities of IoT devices
Technique
Technique
Emulation
Multi-Type
Vulnerability
Zero-Day
Detection
Coverage-guide
Andrei Costin et al.
Static and Dynamic
Analysis
YES
YES
YES
NO
FIRMADYNE
PoC
YES
NO
NO
NO
IoTFuzzer
Blackbox Fuzzing Blackbox Fuzzing Greybox Fuzzing
Muench et al.
FIRM-AFL
NO
NO
YES
NO
YES
NO
NO
NO
YES
NO
YES
YES
4
Challenge of Fuzzing the SOHO Router
Generator
Initial Seeds
2. How to fuzz dedicated systems?
•  obtain code coverage without emulation is diffcult
•  while emulation is limited among the various devices
•  “zombie” state
1. How to generate initial 
seeds ?
•  many vendors, few 
standards
•  various implementations
•  rich information in seeds
Mutator
Mutated Seeds
Target 
Devices
Services
?
3. How to trigger and monitor multi-type 
vulnerabilities as many as possible?
•  slient memory corruptions
•  not only memory corruptions
•  decrease the false positive and missing
Exceptional 
Behaviors?
Y
Issues
5
Example——NTP configuration
• CONF-READ communication
Store XSS and Information 
Disclosure occur!
model
ØGET request is a READ
ØPOST request is a CONF
operation
operation
• KEY-VALUE data model
Øntpserver1=time.test1.com
• Several different phases to 
trigger multi-type 
vulnerabilities
Memory Corruption and 
Command Injection occur!
CONF 
operation
Generate 
configuration
request
READ 
operation
Show corrent 
configutaion
Parse request
Apply and save 
Configuration
Generate 
frontend data
NVRAM
Database File
Config File
①
②
(cid:348)
User views the NTP configuration 
"ntpserver1" with value 
"cn.pool.ntp.org" ,etc.
User modifies the value of 
"ntpserver1" to "time.test1.com" 
and submit the configuration.
User views the new configuration 
after handling of backend. 
GET request
POST request
Web Server
Applications
Networking
Service
Platform
Specific
Services
Dedicated
Operating System
Typical Architecture 
of SOHO router
6
Example——NTP configuration
• 2 functions to handle the variable 
Raw
ntpserver1
• A command injection vulnerability in 
conf_ntpserver1() function
ØData type inconsistency
• A stack-based overflow vulnerability in 
read_ntpserver1() function
ØLength limitation inconsistency in 2 related 
functions
• The memory corruption can cause crash,
what about the command injection, XSS
and info disclosure?
Request
POST /apply.cgi?/NTP_debug.htm HTTP/1.1
Host: 192.168.66.1
Connection: keep-alive
Content-Length: 209
submit_flag=ntp_debug&conflict_wanlan=&ntpserver1=time.test1.com
&ntpserver2=time.test2.com&ntpadjust=0&hidden_ntpserver=GMT8&h
idden_dstflag=0&hidden_select=33&dif_timezone=0&time_zone=GMT-
8&ntp_type=0&pri_ntp=
1 int conf_ntpserver1(char * input){
ntpserver1=;reboot;
2   char buf[0x100];
3   char * ntp = read_from_request("ntpserver1", input);
4   if(strlen(ntp) > 0x80)
5     return -1;
    //use varaiable "ntp" to build config command.
6   sprintf(buf, "/usr/bin/config ntpserver=%s.", ntp);
    //command injection occurs.
7   system(buf);
8   return 0;
}
ntpserver1=aaa……aaa
0x70
9 int read_ntpserver1(){
    //the length of info is no more than 0x80.
10  char info[0x50];
11  char * ntp = get_config("ntpserver1");
    //stack-based overflow occurs.
12  sprintf(info, "ntpserver=%s", ntp);
13  return 0;
}
7
SRFuzzer
• Fuzz the physical devices directly and automatically
• Trigger multi-type vulnerabilities with KEY-VALUE data model and CONF-READ communication model
• Generate information and monitor it when triggering exceptional behaviors
• Use smart plug to restore the device from “zombie” state
• Modular design and well extendibility
Seed Generator
Mutator
Request 
Collector
Passive 
Crawler
General 
Crawler
Request 
Database
Key-
Value 
Parser 
with 
Labeling
Mutation Selector
Number
Fixed String
Varaible String
Pattern 
Selector
CONF 
READ
Power 
Control
Monitor
Response-based
Proxy-based
Signal-based
Customizable 
Configuration
Crawler Configuration
Mutation Enhancement
Implantant Tookit
Router
8
Seed Generation
• Crawler
ØGeneral crawler
ØPassive crawler
• KEY-VALUE parser with labeling
ØVariable string
ØFixed string
ØNumber
Raw
Request
POST /apply.cgi?/NTP_debug.htm HTTP/1.1
Host: 192.168.66.1
Connection: keep-alive
Content-Length: 209
submit_flag=ntp_debug&conflict_wanlan=&ntpserver1=time.test1.com
&ntpserver2=time.test2.com&ntpadjust=0&hidden_ntpserver=GMT8&h
idden_dstflag=0&hidden_select=33&dif_timezone=0&time_zone=GMT-
8&ntp_type=0&pri_ntp=
Seed
value
ntp_debug
URL: http://FUZZING_IP/apply.cgi?/NTP_debug.htm
METHOD: POST
Tuple SET:
key
submit_flag
conflict_wanlan
ntpserver1
hidden_dstflag
hidden_select
…
time.test1.com
0
33
…
attributes
fixed str, variable str
variable str
variable str
number, variable str
number, variable str
…
9
Seed Mutation
Key
Original Value
Attribute
ntpserver1
time.test1.com variable string
Mutation Rule
Overflow
NULL-Pointer dereference
Command Injection
submit_flag
ntp_debug
hidden_dstflag
0
Stored XSS
fixed string
...
number
…
fixed string
variable string
number
variable string
Example of Mutated Value
time.test1.comtime.test1.com... 
(repeat 20 times)
(empty value)
time.test1.com";wget 
http://192.168.1.2/ntpserver1;
time.test1.com";
ntp_debug
…
-1
…
10
Exceptional Behavior Triggering and Monitoring
• A CONF operation for the first step
• A READ operation after a CONF operation
• Three typical monitoring mechanisms
ØResponse-based monitor
ØProxy-based monitor
ØSignal-based monitor
Response-based Monitor
Mutator
这里应该说明如何判定一
种漏洞是否触发
CONF 
Operation
READ 
Operation
Memory Corruption
Command Injection
Cross-Site Scripting
Information Disclosure
Exception
Database
Signal-based Monitor
Device Inside
Proxy-based Monitor
11
Power Control
• Use an extra hotpot to connect the 
Smart Plug and Fuzzing Node
• Use Mi Smart Plug and python-miio
package in practice
An independent 
hotpot
Smart Plug
Power 
Cable
Ethernet 
Cable
Fuzzing Node
SOHO router
12
Experiment Overview
• We selected 10 devices from 5 different popular vendors
• We obtained 101 unique issues, 97 of which were assigned vulnerability IDs
• We manually crafted the PoCs for all unique issues
ID  Vendor 
1 
Firmware Version 
V15.03.05.19 (6318)_CN 
NETGEAR 
Architecture 
ARM32 (LE) 
Signal-based Monitor 
Device Feature, Serial Port
Product 
Orbi 
Insight Managed Smart Cloud 
Wireless Access Point
WNDR-4500v3 
R8500 
R7800 
TL-WVR900G 
Mer450 
G3 
AC9 
RT-AC1200 
2 
NETGEAR 
NETGEAR 
3 
NETGEAR 
4 
NETGEAR 
5 
6 
TP-Link 
7  Mercury 
Tenda 
8 
Tenda 
9 
10  Asus 
WAC505-510_firmware_V5.0.5.4 
ARM32 (LE) 
Not Support 
WNDR4500v3-V1.0.0.50 
R8500-v1.0.2.100, R8500-V1.0.2.116 
R7800-V1.0.2.44, R7800-V1.0.2.46 
V3.0_170306 
MER1200GV1.0 
V15.11.0.5 
V15.03.05.19 
RT-AC1200-3.0.0.4.380.9880 
MIPS32 (BE) 
ARM32 (LE) 
ARM32 (LE) 
MIPS32 (BE) 
MIPS32 (BE) 
ARM32 (LE) 
ARM32 (LE) 
MIPS32 (LE) 
Device Feature, Serial Port
Device Feature, Serial Port
Device Feature, Serial Port
Not Support 
Not Support 
Existed Vulnerability 
Existed Vulnerability 
Device Feature
13
Analysis of Issues
• 101 confirmed issues
Ø48 memory corruption
Ø39 command injection
Ø9 stored XSS
Ø5 info disclosure
• 67.33% are triggered in CONF
• 32.67% are triggered in READ
• Device specificity
ØTP-Link TL- WVR900G 
PRODUCT
Orbi
Insight 
WNDR- 4500v3 
R8500 
R7800 
TL- WVR900G 
Mer450 
G3 
AC9 
RT-AC1200 
SUM 
CONF
READ
MEM CMD MEM CMD XSS
1 
0 
0 
3 
5 
0 
0 
0 
0 
0 
9 
0 
0 
6 
9 
0 
0 
0 
5 
11 
0 
31 
0 
1 
2 
0 
8 
24 
2 
0 
0 
0 
37 
0 
0 
7 
0 
10 
0 
0 
0 
0 
0 
17 
0 
0 
0 
0 
0 
1 
0 
0 
1 
0 
2 
INFO
0 
1∗
1∗
1∗
1∗
0 
0 
0 
0 
1 
5 
SUM
2 
1 
16 
13 
24 
25 
2 
5 
12 
1 
101 
14
Analysis of Issues
• 97 assigned IDs (43 CVEs + 52 PSVs + 2 CNVDs)
58.76%
More than 1/4
25.77%
15.46%
84.54%
web management
-> root shell
9.27%
5.15%
1.03%
15
Performance of Monitors PRODUCT
• 77.23% confirmed issues are caught by the 
general mechanism (response-based and
proxy-based monitor).
• Signal-based monitor can catch the silent
memory corruption
• Device rebooted 6.8 times on average
ØHandle requests in one process
ØHandle requests in subprocesses
ØBackend is developed on top of OpenWRT
Orbi 
Insight 
WNDR-4500v3 
R8500 
R7800 
TL-WVR900G 
Mer450 
G3 
AC9 
RT-AC1200 
SUM 
MEM
CMD
XSS
INFO
R
0 
0 
3 
7 
2 
0 
0 
4 
9 
0 
25 
S
0 
N/A 
10 
2 
8 
N/A 
N/A 
1 
2 
0 
23 
P
0 
1 
2 
0 
8 
25 
2 
0 
1 
0 
39 
P
1 
0 
0 
1 
2 
0 
0 
0 
0 
0 
4 
R
0 
0 
0 
2 
3 
0 
0 
0 
0 
0 
5 
R
1 
0 
1 
1 
1 
0 
0 
0 
0 
1 
5 
16
Comparison with Popular Fuzzers
• Selected 7 devices randomly
• More memory corruption issues than customized 
boofuzz by 53.57%
• More command injection issues than Commix by 
25.81%
• Similar performance with wfuzz on XSS detection
“time-related” injection 
monitoring technique
missed some issues
one mutated input
cannot bypass the
backend validity check
Missing the
issues occuring
in READ op or
subprocesses
17
Discussion
• Limitation of the scope
ØMore types of device
ØMore types of protocol
• Vulnerability of severity
ØMore critical issues
• Research on data inconsistency
ØTo find more issues and help vendors to harden their products.
• Monitoring
ØMake the efficient monitoring mechanism more general
18
Summary
• We present SRFuzzer for physical SOHO routers to automatically discover 
multi-type vulnerabilities
• We reveal the root cause of the different types of vulnerability as data 
inconsistency
• We obtain 97 assigned vulnerability IDs by fuzzing 10 popular real-world 
devices
19
REFERENCE
[1] 2018. New VPNFilter malware targets at least 500K networking devices 
worldwide.
https://blog.talosintelligence.com/2018/05/VPNFilter.html.
20
THANKS
Q&A
22