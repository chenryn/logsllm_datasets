Close the TCP connection. Closing the TCP channel (e.g.,
by sending an RST packet) causes genuine Skype nodes to
immediately end the call. Our hypothetical parrots do not
mimic this behavior because their fake TCP channel has no
relationship to the actual call. While this attack interferes
with genuine Skype users to some extent, spurious call
disconnections are fairly common in Skype. A censor may
use this attack as a conﬁrmation on a relatively small set of
connections suspected to be imitations.
Withhold or drop selected TCP packets. The TCP connection
sends packets with frequency varying from 30 to 60 seconds,
or when network conditions change. Tampering with these
packets causes observable changes on the genuine UDP
channel, but not on the imitated one.
Trigger a supernode probe. A Skype client keeps a TCP
connection with its supernode. If this connection is closed,
a genuine client immediately launches a UDP probe (Ap-
pendix A-A) to search for new supernodes. A parrot doesn’t.
Block a supernode port. After a successful UDP probe, a
genuine client establishes a TCP connection with the same
port of its supernode. If this port is not available, the client
tries connecting to ports 80 or 443 [5]. A parrot doesn’t.
Similar attacks include tampering with SoM ﬁelds in UDP
packet headers.
VIII. DETECTING STEGOTORUS
This active attack does not adversely affect normal Skype
users. Dropping a few packets does not disconnect the call,
but only degrades its quality for a short period of time.
In Section VII, we showed how to detect StegoTorus-
Embed’s ﬂawed imitation of Skype. In this section, we show
how to detect the chopper and StegoTorus-HTTP.
72
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:59 UTC from IEEE Xplore.  Restrictions apply. 
Figure 2. Correlated behavior of StegoTorus connections.
160
140
120
100
80
60
40
20
e
t
a
R
t
e
k
c
a
P
0
35
start dropping
the dashed flow
40
45
50
55
60
65
70
Time (s)
A. Attacks on StegoTorus chopper
Correlating IP addresses between links.
Requirement: Geo
Adversary: Passive, LO/OM
A StegoTorus session, called a link, comprises several con-
nections. This enables easy passive detection of StegoTorus
clients because normal users do not keep multiple, concur-
rent HTTP and Skype connections to the same server.7 A
possible countermeasure is to have different links handled
by geographically distributed servers, but this will impose
an intolerable delay on low-latency trafﬁc (e.g., Tor) because
the servers must cooperate to reconstruct chopped packets.
Exploiting connection dependences.
Requirements: Network, User
Adversary: Passive/Active, LO/OM
Multiple connections created by the StegoTorus chopper
carry packets from the same Tor session, thus their reactions
to network conditions and perturbations are highly corre-
lated. By contrast, genuine HTTP connections to different
servers exhibit no such correlation. The correlations between
StegoTorus connections can be observed by a passive censor
or exploited for an active attack, as shown in Fig. 2: once
packets on one StegoTorus connection are dropped, the other
two belonging to the same link immediately slow down.
client via an HTTP request. The StegoTorus prototype sup-
ports PDF, SWF, and JavaScript, but instead of generating
documents in these formats, it uses real ﬁles and replaces
speciﬁc ﬁelds with hidden content. This preserves the ﬁle’s
syntactic validity, but not its semantics. The StegoTorus
paper claims that checking ﬁle semantics at line speeds
requires a lot of resources from a state-level censor dealing
with large volumes of trafﬁc.
This claim is false. We demonstrate that it is possible
to detect discrepancies between real ﬁles and StegoTorus’s
imitations at a very low cost and at line speed.
As a proof of concept, we show how to analyze PDF ﬁles,
but similar techniques work against any other format. The
fake-trace generator in the StegoTorus prototype produces
templates for PDF ﬁles that miss an essential object called
xref table. In a genuine PDF ﬁle, this table follows the xref
keyword and declares the number and position of various
objects. The absence of this table in StegoTorus’s imitations
is detectable via simple deep-packet inspection at line speed,
without any need to reconstruct or parse the ﬁle.
Adding a fake xref table to the PDF ﬁle will not help.
A simple script can verify the table’s (in)validity without
parsing the ﬁle by comparing the positions of PDF objects
with their xref entries. StegoTorus may try to adjust xref
tables to match the embedded hidden payload, but changing
even a single character in a PDF ﬁle results in multiple
format errors and is detectable by the most basic PDF parser.
Instead of replacing binary ﬁelds, a sophisticated steganogra-
phy module might craft PDF ﬁles that only show the hidden
content when rendered. This would complicate both the
client and the server and greatly reduce performance, making
the system unusable by Tor and other low-latency transports.
Furthermore, a simple script can extract the encoded text
from PDF ﬁles (e.g., using the pdftotext Unix command)
and perform linguistic veriﬁcation, although this test may not
be feasible at line speeds.
B. Passive attacks on StegoTorus-HTTP
C. Active and proactive attacks on StegoTorus-HTTP
The StegoTorus paper acknowledges several passive at-
tacks, including (1) discrepancies between the typical pat-
terns of GET requests and the StegoTorus imitation, and (2)
abnormal changes in cookies due to the embedding of hidden
payloads. The list in the paper is incomplete, illustrating how
difﬁcult it is to foresee all the ways in which an imitation
may deviate from the genuine protocol.
Exploiting discrepancies in ﬁle-format semantics.
Requirement: Content
Adversary: Passive, LO/OB/OM
StegoTorus-HTTP embeds hidden trafﬁc inside innocuous-
looking documents that appear to have been requested by the
7While the IETF standard [21] prohibits browsers from opening more
than two concurrent connections to the same server, some Web servers allow
this restriction to be circumvented [11]. Concurrent connections, however,
exhibit a characteristic pattern [2] not mimicked by StegoTorus.
Fingerprinting HTTP server.
Requirements: Correct, Err, Soft
Adversary: Proactive, LO/OB/OM
The HTTP module in StegoTorus does not actually run
an HTTP server. It responds to HTTP requests such as
GET, HEAD, OPTIONS, and DELETE simply by replaying
responses from its database. A censor may use an HTTP
server ﬁngerprinting tool to submit requests to the server
and analyze its responses to determine whether (a) the
server generates a consistent software ﬁngerprint, and (b)
the server’s reaction to erroneous and invalid requests is
consistent with its ﬁngerprint. This test can be active (the
censor manipulates requests sent by the clients) or proactive
(the censor generates his own probe requests).
We used the httprecon tool [30] to send 9 types of
requests: GET existing - a GET request for an existing
73
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:59 UTC from IEEE Xplore.  Restrictions apply. 
resource like the server’s front page; GET long request - a
very long (> 1024 bytes in URI) GET request for an existing
resource; GET non-existing - a GET request for a non-
existing resource, e.g., a randomly generated ﬁle name; GET
wrong protocol - a GET request with a non-existing protocol
version, e.g., HTTP/9.8; HEAD existing - a HEAD request
for an existing resource; OPTIONS common - an OPTIONS
request, which is used by HTTP clients to determine the
options and/or requirements associated with a resource or
the server’s capabilities; DELETE existing - a request to
delete an existing resource; TEST method - a non-existing
HTTP method called TEST; Attack request - a GET request
that tries to access a URI which includes well-known attack
patterns, e.g., SQL injection and cross-site scripting.
Table III summarizes how the HTTP module of the Stego-
Torus server reacts to these 9 tests. In summary, StegoTorus
fails the tests and can be easily distinguished from any real
HTTP server. In particular, StegoTorus does not generate ap-
propriate error responses to invalid and malformed requests.
This attack is feasible even for an OB censor who can
record at line speed the IP addresses of all packets destined
to port 80 and ﬁngerprint these addresses afterwards.
Manipulating HTTP requests.
Requirements: Err
Adversary: Active, LO/OB/OM
A censor can tamper with a suspected StegoTorus connection
and observe the server’s reaction to modiﬁed, possibly
malformed HTTP requests. Most of the proactive attacks
listed above can be carried out in this manner. For instance,
the censor can man-in-the-middle a connection and modify
the client’s request so that it asks for a non-existing URI.
If the server returns “404 Not Found,” the censor drops
the error response and replays the client’s original HTTP
request. If the server returns “200 OK,” it is a tell-tale sign
that the server is not an HTTP server but a (poor) imitation.
IX. DETECTING CENSORSPOOFER
SIP packets explicitly contain the name and version of
the SIP client. Therefore, each CensorSpoofer connection
must mimic a speciﬁc client. The CensorSpoofer prototype
mimics Ekiga.8 The attacks in this section exploit
the
discrepancies between CensorSpoofer and genuine Ekiga,
but would apply to any other SIP client, too.
Manipulating the tag ﬁeld.
Requirement: Soft
Adversary: Active, LO/OB/OM
SIP messages use random-looking tags in their headers to
identify a SIP session [51]. CensorSpoofer’s spoofer replaces
these tags with the hash of the spoofed IP address [59, § 6.4].
If a censor manipulates the spoofed address, the hash will
no longer verify and the CensorSpoofer client will close
the call, similar to a genuine client’s reaction to the change
8http://www.ekiga.net
of callee’s IP address. Unfortunately, this enables another,
much cheaper attack. The censor can simply change the tag
ﬁeld containing the hash to a different, valid tag value. A
CensorSpoofer client will terminate the call because the new
tag is not the hash of the spoofed IP address, but a genuine
SIP client will continue the call.
SIP probing.
Requirements: SideProtocols, Soft, Err
Adversary: Active, LO/OB/OM
The SIP connection between a client and a CensorSpoofer
server is relayed through a public Ekiga registrar located
outside the censoring ISP. Because the censor cannot verify
the callee’s IP address, the CensorSpoofer server can put a
spoofed address in its SIP messages.
What the censor can do, however, is probe the callee
by sending SIP messages to this IP address and checking
whether a genuine SIP client is listening. This is the exact
attack that CensorSpoofer aimed to prevent. To choose
the IP addresses to be spoofed,
the spoofer performs a
random nmap scan [59, Algorithm 1] and picks any address
that does not return either “closed” or “host seems down”
on the SIP, RTP, and RTCP ports. As mentioned in [59],
the censor cannot tell for sure whether these addresses are
running a SIP client.
Unfortunately, there is an easier way for the censor to
verify whether an IP address is running a SIP client. As
speciﬁed in the SIP standard [51], “more than one user
can be registered on a single device at the same time.”
Typical SIP clients thus respond to any SIP request that
looks for any SIP ID, even if it is not coming from the VoIP
provider’s registrar. We conﬁrmed this behavior for several
popular SIP clients, including Ekiga, PhonerLite,9 Blink,10
and Twinkle,11 on various operating systems.
The main functionality of a SIP registrar is to discover the
current IP addresses of dynamic SIP IDs. As speciﬁed in the
SIP standard, “registration is used for routing incoming SIP
requests and has no role in authorizing outgoing requests.”
If the censor knows the current IP address of a suspected
SIP client, he can directly call it instead of going through a
registrar. This is the basis of SIP probing.
We describe several SIP probing tests. In our experiments,
all of them were effective in distinguishing a CensorSpoofer
callee from a genuine Ekiga client—see Table IV. All IP
addresses in our tests satisfy the address selection algorithm
of [59]. Some of the tests may produce different results
depending on the type of the callee’s SIP client; however,
the censor can always identify the callee’s client from the
SIP messages and adjust the tests accordingly.
Send a SIP INVITE. The censor can call a fabricated SIP
ID at the suspected IP address by sending a SIP INVITE.
9http://phonerlite.de/index en.htm
10http://icanblink.com/
11http://www.twinklephone.com/
74
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:59 UTC from IEEE Xplore.  Restrictions apply. 
RESPONSES TO DIFFERENT httprecon REQUESTS BY STEGOTORUS SERVER AND REAL HTTP SERVERS.
Table III
HTTP request
Real HTTP server
GET existing
Returns “200 OK” and sets Connection to keep-alive
Returns “404 Not Found” since URI does not exist
Returns “404 Not Found”
GET long request
GET non-existing
GET wrong protocol Most servers produce an error message, e.g., “400 Bad Request”
HEAD existing
OPTIONS common
DELETE existing
TEST method
Attack request
Returns the common HTTP headers
Returns the supported methods in the Allow line
Most servers have this method not activated and produce an error message
Returns an error message, e.g., “405 Method Not Allowed” and sets Connection=Close
Returns an error message, e.g., “404 Not Found”
StegoTorus’s HTTP module
Arbitrarily sets Connection to
either keep-alive or Close
No response
Returns “200 OK”
Returns “200 OK”
No response
No response
No response
No response
No response
DISTINGUISHING CENSORSPOOFER FROM GENUINE SIP CLIENTS.
Table IV