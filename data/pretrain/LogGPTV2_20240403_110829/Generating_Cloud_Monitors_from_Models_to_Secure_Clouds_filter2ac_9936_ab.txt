### Workflow in Cloud Monitor (CM)

HTTP status codes, as defined by [15], provide a numeric value that indicates the outcome of a request. For example, a 200 status code signifies a successful request, a 404 status code indicates that the requested resource was not found, and a 403 status code means the request is forbidden for the specified resource.

**Figure 2: Workflow in Cloud Monitor (CM)**

The workflow within the Cloud Monitor (CM) involves forwarding an HTTP method request from the CM user to the private cloud if the pre-conditions are met. Upon receiving a response from the private cloud, the post-conditions for the method request are verified. If both the pre- and post-conditions evaluate to true, the request is considered successful. Otherwise, an invalid response detailing the faulty behavior is returned to the CM user.

### Users of Cloud Monitor

The Cloud Monitor can be utilized by various types of users:

1. **Cloud Developer**: A developer implementing the cloud for their organization, who needs to validate the implementation during the development phase with respect to functional and security requirements.
2. **Tester**: A tester who verifies whether the cloud implementation meets its design specifications and security requirements.
3. **Security Expert**: An expert who assesses the cloud implementation for any security vulnerabilities that could allow unauthorized access or prevent authorized access to resources.
4. **Automated Testing Script**: A script that uses CM as a test oracle to invoke the cloud implementation and validate the authorization policy for all resources. The results of these invocations can be logged for further fault localization.

### Design Approach

Our approach focuses on modeling APIs that comply with RESTful architecture, using UML (Unified Modeling Language) [38], which is widely accepted in both industry and academia and supported by numerous industrial-strength automated tools. We will use the Cinder component of OpenStack, introduced in Section II, as an example to illustrate the construction of our resource and behavioral models.

#### Resource Model

We use UML class diagrams with additional design constraints to represent resources, their properties, and the relationships between them. A resource definition defines a resource entity, where instances are called resources, similar to the relationship between a class and its objects in object-oriented programming.

- **Collection Resource Definition**: Represented by a class with no attributes.
- **Normal Resource Definition**: Has one or more attributes.
- **Associations**: Each association has a name and minimum and maximum cardinalities indicating the number of resources in the association.

**Figure 3 (left): Extract of Cinder Resource Model**

- **Collections**: Projects and Volumes.
- **Normal Resources**: Project, volume, quota sets, and user group.
- **URI Formation**: Every association should have a role name, and attributes must be public and typed (e.g., XML document or JSON serialized object).

#### Behavioral Model

The projects are created by the cloud administrator using Keystone, and users or user groups are assigned roles within these projects, defining their access rights. A volume can be created if the project has not exceeded its quota and the user is authorized to create a volume. Similarly, a volume can be deleted if the user is authorized and the volume is not in use.

**Figure 3 (right): Extract of Cinder Behavioral Model**

- **State Machine**: Represents the behavioral interface of the REST API.
- **States**: A project can be in one of three states: no volumes attached, with volume and not full quota, or with volume and full quota.
- **Transitions**: POST requests add volumes, and DELETE requests remove volumes based on guard conditions.
- **OCL Invariants**: Define the state invariants, ensuring the stateless nature of REST.

**Example OCL Expression**:
- `project.id->size() = 1 AND project.volumes->size() = 0`: Indicates that the project exists but has no volumes attached.

#### Authorization

Authorization in OpenStack and other open-source clouds is based on the Role-Based Access Control (RBAC) model [17]. The access rights of a user are defined by their role. We assume that the information about roles and corresponding access rights is well-defined and available to cloud developers and security analysts.

- **Table I: Security Requirements for Cinder API (Excerpt)**
  - **Resource**: Volume
  - **SecReq**: 1.1, 1.2, 1.3, 1.4
  - **Request**: GET, PUT, POST, DELETE
  - **Role**: admin, member, user
  - **UserGroup**: proj administrator, service architect, business analyst

### Contract Generation

The interface of a cloud service specifies the operations that can be invoked on it. A cloud developer integrates the service with others by invoking the advertised operations and providing the required parameters. These operations may have specific invocation orders or conditions, such as pre- and post-conditions, which form part of the behavioral interface.

**Example: DELETE Method on Volume Resource**

- **Pre-Condition**: The invariant of the source state and the guard on the transition must evaluate to true.
- **Transitions**: DELETE on volume triggers transitions from different states. The actual implementation should combine the behavior of these transitions into one method.

To generate the method contract, we need to combine the pre-conditions of all relevant transitions. This ensures that the method can be invoked only when all necessary conditions are met, maintaining the integrity and security of the cloud service.