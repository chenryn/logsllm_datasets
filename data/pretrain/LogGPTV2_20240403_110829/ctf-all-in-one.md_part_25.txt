find "..\x04\x08" 0x08048000 0x08049000
searchmem -- Search for a pattern in memory; support regex search
session -- Save/restore a working gdb session to file as a script
set -- Set various PEDA options and other settings
set exec-wrapper ./exploit.py
sgrep -- Search for full strings contain the given pattern
shellcode -- 生成或下载常见的 shellcode
shellcode x86/linux exec
show -- Show various PEDA options and other settings
skeleton -- 生成 python exploit 代码模板
skeleton argv exploit.py
skipi -- Skip execution of next count instructions
snapshot -- Save/restore process's snapshot to/from file
snapshot save
snapshot restore
start -- Start debugged program and stop at most convenient entry
stepuntil -- Step until a desired instruction in specific memory range
stepuntil cmp
stepuntil xor
strings -- Display printable strings in memory
strings
272
2.3.1 GDB
strings binary 4
substr -- Search for substrings of a given string/number in memory
telescope -- Display memory content at an address with smart
dereferences
telescope 40
telescope 0xb7d88000 40
tracecall -- Trace function calls made by the program
tracecall
tracecall "cpy,printf"
tracecall "-puts,fflush"
traceinst -- Trace specific instructions executed by the program
traceinst 20
traceinst "cmp,xor"
unptrace -- Disable anti-ptrace detection
unptrace
utils -- Miscelaneous utilities from utils module
vmmap -- 在调试过程中获取段的虚拟映射地址范围
cmmap
vmmap binary / libc
vmmap 0xb7d88000
waitfor -- Try to attach to new forked process; mimic "attach -waitfor"
waitfor
waitfor myprog -c
xinfo -- Display detail information of address/registers
xinfo register eax
xinfo 0xb7d88000
xormem -- 用一个 key 来对一个内存区域执行 XOR 操作
xormem 0x08049000 0x0804a000 “thekey”
xprint -- Extra support to GDB's print command
xrefs -- Search for all call/data access references to a function/variable
xuntil -- Continue execution until an address or function
使用 PEDA 和 Python 编写 gdb 脚本
全局类
pedacmd ：
273
2.3.1 GDB
交互式命令
没有返回值
例如： pedacmd.context_register()
peda ：
与 gdb 交互的后端功能
有返回值
例如： peda.getreg("eax")
小工具
例如： to_int() 、 format_address()
获得帮助
pyhelp peda
pyhelp hex2str
单行／交互式使用
gdb-peda$ python print peda.get_vmmap()
gdb-peda$ python
> status = peda.get_status()
> while status == "BREAKPOINT":
> peda.execute("continue")
> end
外部脚本
# myscript.py
def myrun(size):
argv = cyclic_pattern(size)
peda.execute("set arg %s" % argv)
peda.execute("run")
gdb-peda$ source myscript.py
gdb-peda$ python myrun(100)
更多资料
http://ropshell.com/peda/
274
2.3.1 GDB
GEF/pwndbg
除了 PEDA 外还有一些优秀的 gdb 增强工具，特别是增加了一些查看堆的命令，
可以看情况选用。
GEF - Multi-Architecture GDB Enhanced Features for Exploiters & Reverse-
Engineers
pwndbg - Exploit Development and Reverse Engineering with GDB Made
Easy
参考资料
Debugging with GDB
100个gdb小技巧
275
2.3.2 OllyDbg
2.3.2 OllyDbg 调试器
快捷键
命令行插件
参考资料
快捷键
Ctrl + F1 ：打开与所选行内符号相关的 API 帮助文档。
F2 ：在光标选定位置按 F2 键设置或取消断点。
Shift + F2 ：在首个选择命令设置条件断点。
Ctrl + F2 ：重新启动被调试程序。
F4 ：运行到光标选定位置处暂停。
Shift + F4 ：设置记录断点。
F5 ：最大化当前窗口。
Ctrl + F5 ：打开与首个选择的命令相对应的源文件。
Alt + F5 ：让 OllyDbg 窗口总在最前面。
F6 ：切换到下一个窗口。
Shift + F6 ：切换到前一个窗口。
F7 ：单步步入：每次执行一条指令，遇到 call 等子程序时进入其中。
Shift + F7 ：与 F7 相同，但当被调试程序发生异常而中止时，调试器首先
尝试步入被调试程序指定的异常处理。
Ctrl + F7 ：自动步入，在所有的函数调用中一条一条地执行命令。
Alt + F7 ：转到上一个找到的参考。
F8 ：单步步过，每次执行一条指令，遇到 call 等子程序时不进入其中。
Shift + F8 ：与 F8 相同，但当被调试程序发生异常而中止时，调试器首先
尝试步过被调试程序指定的异常处理。
Ctrl + F8 ：自动步过，一条一条执行命令，但不进入函数内部调用。
Alt + F8 ：转到下一个找到的参考。
F9 ：运行，被调试软件继续运行，直到遇到下一个断点。
Shift + F9 ：与 F9 相同，但当被调试程序发生异常而中止时，调试器首先
尝试执行被调试程序指定的异常处理。
Ctrl + F9 ：执行到返回，在执行到一个 ret 指令时暂停，常用于从当前函
数快速返回到上一个函数。
276
2.3.2 OllyDbg
Alt + F9 ：执行到用户代码，可用于从系统部分快速返回到被调试程序部
分。
F10 ：打开与当前窗口或面板相关的快捷菜单。
Ctrl + F11 ：Run 跟踪步入，一条一条执行命令，进入子函数调用，并把
寄存器信息加入到 Run 跟踪的存储数据中。
F12 ：停止执行，暂停所有线程。
Ctrl + F12 ：Run 跟踪步过，一条一条执行命令，不进入子函数调用，并
把寄存器信息加入到 Run 跟踪的存储数据中。
Alt + F3 ：关闭当前窗口。
Alt + B ：显示断点窗口。
Alt + C ：显示 CPU 窗口。
Alt + E ：显示模块列表。
Alt + K ：显示调用栈。
Alt + L ：显示日志窗口。
Alt + M ：显示内存窗口。
Alt + O ：显示选项对话框。
Alt + Backspace ：撤销对所选部分的修改。
Ctrl + A ：分析当前模块的代码段。
Ctrl + B ：开始二进制搜索。
Ctrl + E ：以十六进制格式编辑所选内容。
Ctrl + F ：开始命令搜索。
Ctrl + G ：转到某地址。
Ctrl + J ：列出所有的涉及到该位置的调用和跳转。
Ctrl + K ：查看与当前函数相关的调用树。
Ctrl + L ：搜索下一个。
Ctrl + N ：打开当前模块的名称列表。
Ctrl + O ：扫描对象文件。
Ctrl + P ：显示补丁窗口。
Ctrl + R ：搜索所选命令的参考。
Ctrl + S ：命令搜索。
Ctrl + T ：打开“暂停Run跟踪”对话框。
Esc ：停止自动执行或跟踪。
Enter ：将选中的命令添加到命令历史，如果当前命令是一个跳转或者函
数，则进入到目的地址。
Backspace ：如果分析器将代码误识为数据，可以将选中部分的自动分析信
息移除。
277
2.3.2 OllyDbg
*：转到原始位置
Ctrl + * ：指定新的起始位置。
+ ：如果 Run 跟踪没有激活，则根据历史命令跳到下一条运行过命令的地
方；否则跳到 Run 跟踪的下一个记录。
Ctrl + + ：跳到前一个函数的开始处。
- ：如果 Run 跟踪没有激活，则根据历史命令跳到前一条运行过命令的地
方；否则跳到 Run 跟踪的前一个记录。
Ctrl + - ：跳到下一个函数的开始处。
Space ：修改命令。
: ：添加标签。
; ：添加注释。
命令行插件
参考资料
http://www.ollydbg.de/
278
2.3.3 x64dbg
2.3.3 x64dbg
快捷键
参考资料
快捷键
参考资料
https://x64dbg.com/#start
279
2.3.4 WinDbg
2.3.4 WinDbg
快捷键
命令
参考资料
快捷键
F10：单步步过
F11：单步步入
Shift+F11：跳出当前函数
命令
调试
t ：单步步入
p ：单步步过
执行
g [addr|func] ：执行到指定位置
gh [addr|func] ：执行到指定位置，遇到异常时中断
gn [addr|func] ：执行到指定位置，遇到异常时忽略
断点
bl ：列出已设置的断点
be [ID] ：激活断点
bd [ID] ：禁用断点
bc [ID] ：清除断点
bp [addr|func] ：设置断点
数据显示
d [addr] ：显示内存数据
db [addr] ：按字节模式显示
dd [addr] ：按双字模式显示
dD ：按双精度浮点数显示
da ：按 ASCII 显示
280
2.3.4 WinDbg
du ：按 Unicode 显示
ds ：按字符串显示
dt ：套用已知的数据结构模板显示
数据编辑
e [addr] [data] ：修改任意地址内存的值
eb [addr] [data] ：以字节写入
ed [addr] [data] ：以双字写入
ea [addr] [data] ：以 ASCII 字符写入
eu [addr] [data] ：以 Unicode 字符写入
栈帧显示
k [x] ：由栈顶开始列出当前线程中的栈帧，x 为需要回溯的栈帧数
kb [x] ：可以额外显示 3 个传递给函数的参数
寄存器显示
r [reg] ：显示指定寄存器的值
模块显示
lm ：列出当前已经读入的所有模块
反汇编
u ：反汇编当前指令后的几条指令
u [start] ：从指定位置开始反汇编
u [start] [end] ：反汇编指定地址区间
参考资料
https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/
281
2.3.5 LLDB
2.3.5 LLDB
参考资料
参考资料
The LLDB Debugger
282
2.4.1 pwntools
2.4.1 Pwntools
安装
模块简介
使用 Pwntools
Pwntools 在 CTF 中的运用
参考资料
Pwntools 是一个 CTF 框架和漏洞利用开发库，用 Python 开发，由 rapid 设计，旨
在让使用者简单快速的编写 exp 脚本。包含了本地执行、远程连接读写、shellcode
生成、ROP 链的构建、ELF 解析、符号泄露众多强大功能。
安装
1. 安装binutils：
git clone https://github.com/Gallopsled/pwntools-binutils
sudo apt-get install software-properties-common
sudo apt-add-repository ppa:pwntools/binutils
sudo apt-get update
sudo apt-get install binutils-arm-linux-gnu
2. 安装capstone：
git clone https://github.com/aquynh/capstone
cd capstone
make
sudo make install
3. 安装pwntools:
sudo apt-get install libssl-dev
sudo pip install pwntools
283
2.4.1 pwntools
如果你在使用 Arch Linux，则可以通过 AUR 直接安装，这个包目前是由我维护
的，如果有什么问题，欢迎与我交流：
$ yaourt -S python2-pwntools
或者
$ yaourt -S python2-pwntools-git
但是由于 Arch 没有 PPA 源，如果想要支持更多的体系结构（如 arm, aarch64