1
从⼀次实战，聊聊获取源代码的姿势
Liquid Files
LxLL ⼀般思路
LxLN 试⽤
LxLO 柳暗花明
LxLP 单⽤户模式
LxLQ 后台鸡肋命令执⾏（低权限）
EXP
进c神的圈⼦也挺久，还没有发过帖⼦，于是借最近的⼀个案例，来聊聊实战中获取源码的⼀些姿势。
（也是前段时间某次闭⻔分享的素材： hope you guys enjoy it~
Liquid Files是国外的⼀款⽹盘，官⽹：https://www.liquidfiles.com/
Liquid Files
2
是收费的⼀套系统，⽼外⽤得多。
咱们今天就来试试获取这套系统的源代码，并进⾏前期的攻击⾯评估（初步的代码审计）
正如我在⽂章《记⼀次Java Servlet实战审计 - 先知社区》中说的那样，获取系统的源代码主要可以从
⼏个⻆度来考虑：
1. 同类站扫⽬录。
a. 上Fofa搜索同类系统
b. 导出资产列表
c. ⽬录扫描。具体操作起来，就是使⽤ dirbuster 的字典 directory-list-2.3-
medium.txt 来扫，⼯具就随便⽤个顺⼿的， dirseach （ps：它的字典 dicc.txt 也好
⽤）
结论：因为本身这玩意⼉的发布形式都是镜像，统⼀部署的，当然不会有备份⽂件了。。。⽆果。
2. ⽹盘泄露。这套系统并不开源，⼀般国内的⼚家发版的时候为图⽅便，都会放了⼀些在⽹盘，简单
⼀搜就知道有⽆结果。
结论：⼈家⼚家本身有官⽹，没必要传⽹盘，麻烦。⽆果
3. Github、gitlab泄露。搜了下——您看看，这像源码么？
0x00 ⼀般思路
3
结论：⽆果。。。
也不绕弯⼦了，但凡看过官⽹就知道：这公司很耿直，直接提供了试⽤......
这也正是本⽂主要想介绍的技巧：利⽤⼚家的安装镜像，获取源代码。
那么我们直接注册试⽤，登录注册进到下载界⾯...
0x01 试⽤
4
舒舒服服的。随便下哪个都⾏，安上跑起来
填写 License Key
5
安装信息填好，部署在内⽹，直接开冲！
在系统⾥玩耍⼀番后，发现System下⾯有个功能叫Console，⼤喜——点进去⼀看：nmd，试⽤
License⽆法使⽤Console
6
可⻅，⼚家并不希望试⽤⽤户拿到root权限......此时，获取源码像是陷⼊了僵局
不过——且让我们来整理整理⼿上的信息：
1. 端⼝只开了80，443，222，连ssh端⼝都没开.....
2. 不对，默认不放开ssh的话，那系统⼀旦出问题了——连也连不上——岂不是直接烂在⾥⾯，不合适
吧。因此，感觉不怎么可能关闭ssh
3. 仔细⼀看，噢，原来这个222，就是ssh的端⼝
4. 好的，现在知道ssh开放了，但是root密码呢，翻了翻⽂档，没找到。。。
5. 于是爆破！ top10k 、 rockyou.txt ——给爷猛冲！
0x02 柳暗花明
Ruby
复制代码
Ruby
复制代码
Ruby
复制代码
80/tcp  open  http
222/tcp open  rsh-spx
443/tcp open  https
1
2
3
PORT    STATE SERVICE VERSION
222/tcp open  ssh     OpenSSH 7.4 (protocol 2.0)
MAC Address: 00:0C:29:4C:C9:82 (VMware)
1
2
3
hydra -t 4 -l root -P rockyou-15.txt -s 222 ssh://10.10.111.6 
1
7
全部出错？不让我爆破？
不让爆破，那咋办，这镜像安在我的电脑上，就是我的了，爆破⼀下居然还要被拒之⻔外？
7. 突然想到——这套系统安装在VM中——相当于我可以物理接触它——再联想⼀下Windows不是开
机的时候可以通过进⼊安全模式来恢复密码吗——Linux应该也有这种模式吧？
于是，有了这第三节
下⾯的内容参考⾃http://c.biancheng.net/view/1041.html
0x03 单⽤户模式
● 很多新⼿当⾯对“忘记 root 账户密码导致⽆法登陆系统”这个问题时，直接选择重新系统。其实⼤
可不必，我只需要进⼊ emergency mode（单⽤户模式）更新 root 账户的密码即可。
8
如何进⼊单⽤户模式
现在，我们假设系统出现了问题，已经不能正常登录了。那么，如何进⼊单⽤户模式呢？⾸先需要重启
服务器，在 GRUB 读秒界⾯按任意键，进⼊ GRUB 菜单界⾯，如图所示
在想要进⼊单⽤户模式的 Linux 菜单上按"e"键，就会进⼊ GRUB 编辑界⾯，如下图所示：
找到 linux   /boot/vmlinuz-* 那⾏，江湖上传闻有两种常⻅的操作⽅式：
1. 【我常⽤】在最后添加 init=/bin/bash ，然后按 ctrl+x 或者 F10  继续grub引导，此后的⽤
户，即为root⽤户，可以在其中随意更改root⽤户的账号密码
2. （没试过）将它的ro recovery nomodestset及之后的东⻄替换为 rw single init=/bin/bash
，然后按 ctrl+x或者F10 进⼊单⽤户模式
● Linux 的单⽤户模式有些类似 Windows 的安全模式，只启动最少的程序⽤于系统修复。在单⽤户
模式（运⾏级别为 1）中，Linux 引导进⼊根 Shell，⽹络被禁⽤，只有少数进程运⾏。
9
总之，虽然单⽤户模式下⾯没有⽹络，但可以修改⽤户的密码呀~
更改密码之后重启，登录ssh
通过web的静态⽂件，锁定源码⽂件的路径： /app
zip打包，起SimpleHTTPServer到8080端⼝，准备下源码咯
诶，为啥访问不到？？？
⼀查，存在 ufw 防⽕墙——当然要把它关闭——不过我这⾥⽐较温柔，添加了放⾏规则
10
下载，搞定！
⾄此，源码到⼿，且⽆混淆——⿊盒变⽩盒，美滋滋。
11
发现⼀个叫做 Actionscripts 的功能，⼤意就是可以在这⾥⾃定义函数，在某些特定的流程中会⾃动
执⾏。
顺⼿传个弹shell的脚本，上图中可以看到，系统会⾃动识别脚本的类型
上机查看，脚本被保存在⽬录 /data/domains/default/actionscripts 下，名字没有改动。
接下来，当然就跟源码
全局搜索 actionscripts 关键字，定位到这个⽂件
app\current\app\helpers\admin\actionscripts_helper.rb
0x04 后台鸡肋命令执⾏（低权限）
12
这⾥补充1个知识点：
霍！会执⾏命令，⽽且执⾏的内容跟⽤户传⼊的⽂件名相关——有搞头
跟⼊类的代码，发现构造⽅法 initialize 、 path 的实现
initialize ，简单赋值，没啥
path ⾥⾯有⽤ shellescape 对参数进⾏转义，那没事了。。
然⽽，接着看下去就知道，⽆法命令注⼊，不光有这个原因。
还是回到刚刚的危险函数 actionscripts_type_column ，它在哪⾥被调⽤了呢？
Ruby中， %x{COMMAND} 这种写法，代表使⽤ ` 执⾏⼀段 shell 脚本，并返回标准输出内容
●
●
13
——在 erb 模板中，也就是MVC框架中的View层，代码如下图所示
（顺便感受下Rails模板的渲染效果）
上⾯我们说到，⽤户请求在框架中的流转顺序，其实是 Controller、Model、View
在View层发现了⻛险点，当然要跟⼀下它之前的 Controller ，也就是
app\v3.5.12\app\controllers\admin\actionscripts_controller.rb
函数列表如下
其中，控制器的前两⾏是 before_action ，类似于Java Web中的Filter
使⽤ sanitize_filename ⽅法，对⽂件名参数进⾏了处理
14
校验了逻辑只允许 a-zA-Z0-9-_ ，其它的字符都会被替换成 _ 。
总之，这个功能点，先在Controller层就校验了⽂件名，后⾯在View层调⽤的也是 shellescape 转义
过的安全执⾏函数——这个过滤还挺够劲⼉。
不急，咱们继续往下分析。
后台找半天没找到这个ActionScript在哪⾥会触发...于是依然搜代码，原来
在“添加⽤户”的地⽅，有个功能叫 Delivery Action ，设置给某个⽤户发消息后⾃动进⾏的Action
完整的利⽤过程如下图所示
Ruby
复制代码
What delivery action should be taken when a message is being delivered to this user. 
You can manage Actionscripts in the Actionscripts section.
EXP
def sanitize_filename
    unless (@sanitized_filename = script_params[:script_name].gsub(/[^a-zA-
Z0-9\-\_\.]/, "_").gsub(/^\./, "_").strip).present?
      render_error "Invalid Filename", {
        location: admin_actionscripts_url
      }
    end
  end
1
2
3
4
5
6
7
15
或是其它⼏个功能，也能触发
只不过，是⼀个低权限的⽤户——⼏乎什么权限都没有。。。既然改不了⽂件，就⽆法通过修改代码的
⽅式来提权，那咋办？
留给各位师傅思考，今天的⽂章就写到这⾥，哈哈~