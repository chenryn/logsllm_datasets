## 图 1：EXT 文件系统中柱面组的结构

在 EXT 文件系统中，每个柱面组的第一个块是超级块（superblock），它包含了定义文件系统结构和定位物理硬盘分区上的元数据。尽管并非所有柱面组都包含备用超级块，但部分分区确实会配备。例如，使用 `dd` 等磁盘工具可以将备用超级块的内容复制到主超级块上，以修复损坏的超级块。虽然这种情况并不常见，但在几年前我曾用这种方法成功修复了一个损坏的超级块。幸运的是，我已经先见之明地使用了 `dumpe2fs` 命令来备份我的系统分区描述符信息。

以下是 `dumpe2fs` 命令的部分输出，显示了超级块中包含的一些元数据以及前两个柱面组的信息：
```
# dumpe2fs /dev/sda1
Filesystem volume name:   boot 
Last mounted on:          /boot 
...
```

每个柱面组都有一个 inode 位图，用于指示该柱面组中的哪些 inode 被使用，哪些未被使用。每个 inode 包含了文件的相关信息，如文件数据块的位置。此外，块位图记录了文件系统中已使用和未使用的数据块。在大型文件系统中，这些柱面组的数据可能会扩展到数百页。柱面组的元数据包括空闲数据块的列表。

EXT 文件系统通过实现特定的数据分配策略来减少文件碎片，从而提高性能。关于这些策略的详细说明将在后续关于 EXT4 的讨论中进行介绍。

### 关于 EXT2 文件系统的挑战

我在使用 EXT2 文件系统时遇到的最大问题是 `fsck`（文件系统检查）程序需要很长时间来检测并修复系统崩溃后的不一致性。有一次，我的一台计算机在崩溃后重新启动，花费了整整 28 个小时才完成磁盘恢复，而这个磁盘只有几百兆字节大小。

### EXT3 文件系统

[EXT3 文件系统](https://en.wikipedia.org/wiki/Ext3)旨在克服 `fsck` 在文件更新操作期间因不正确关机导致磁盘结构损坏所需的长时间恢复问题。与 EXT2 相比，EXT3 的唯一新增功能是 [日志](https://en.wikipedia.org/wiki/Journaling_file_system)，它提前记录将对文件系统执行的更改。除这一变化外，EXT3 的磁盘结构与 EXT2 完全相同。

在 EXT3 中，除了直接写入数据到磁盘的数据区域外，日志还会将文件数据及其元数据写入磁盘上的指定区域。一旦这些数据安全到达硬盘，它们几乎无损失地合并或追加到目标文件上。当数据提交到磁盘的数据区域时，日志随之更新，确保在日志中的所有数据提交之前，系统即使发生故障，文件系统也能保持一致状态。下次启动时，系统将检查文件系统的不一致性，并将仍保留在日志中的数据提交到磁盘的数据区，以完成对目标文件的更新。

尽管日志功能会降低数据写入性能，但它提供了三种日志选项，允许用户在性能和数据完整性之间做出选择。我个人更倾向于选择安全性，因为我的环境不需要大量的磁盘写入活动。

日志功能显著减少了系统崩溃后检查硬盘所需的时间，从几小时甚至几天缩短到几分钟。多年来，我遇到了许多导致系统崩溃的问题，其中大多数是我自己造成的，比如不小心踢掉了电源插头。幸运的是，EXT 日志文件系统将启动恢复时间缩短到了两三分钟。自从我开始使用带日志记录的 EXT3 以来，从未遇到过数据丢失的问题。

值得注意的是，虽然可以关闭 EXT3 的日志功能使其等同于 EXT2 文件系统，但我强烈建议不要这样做，因为这可能导致数据丢失和增加恢复时间。可以通过以下命令将 EXT2 文件系统升级为带有日志的 EXT3 文件系统：
```
tune2fs -j /dev/sda1
```