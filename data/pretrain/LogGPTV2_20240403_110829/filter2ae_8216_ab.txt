sum、delta 和 key 都和第一套不同。
但是到这里题目还有很多坑没有填。
第一点就是，在一轮加密结束之后，程序会进行一次 return，与全部加密结束之后的返回值不同，返回之后程序会在 main
函数内进行下一次循环，运行另一套指令，因此两套加密是在一轮加密结束之后进行交换，轮流进行。
第二点就是，两套指令都在开头对每一个字进行了异或，都进行了一次，并且值相同（0x1010101-0xa0a0a0a），所以除了前两个字在异或之后立刻进行了一轮加密之外，后续的所有字都连续进行了两次相同的异或操作，并没有任何影响。
第三点就是与 xtea/tea 算法不同，该算法每一组字的 sum 并不重置，而是使用前一组字计算的结果继续进行，因此在解密的时候由最后一组向前进行并且将
sum 设置为全局变量是比较简单的方式。
第四点是原版 xtea/tea 基本上都是无符号数运算，但是这里的除法操作之前使用了 cdq 指令，用 EAX 的符号位填充了
EDX，很明显是一个有符号数操作。
第五点是原版 xtea/tea 使用的是右移运算，而这里用的是除法运算，这也就意味着在某些语言的处理中（比如
C），根据舍入规则的不同，有符号数的右移和除法运算的结果在最后一位上存在误差，多轮加密导致误差扩大并不断引入新的误差，因此应该使用除法的方式。
## Solution
根据上述分析可以很容易复现加密的脚本和对应的解密脚本
    #include 
    #include 
    void encipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[8])
    {
        unsigned int i;
        int32_t v0 = v[0], v1 = v[1];
        int32_t delta1 = 123456789, base1 = 987654321, sum1 = base1;
        int32_t delta2 = 0x154cbf7, base2 = 0x5eeddead, sum2 = base2;
        v0 ^= 0x1010101;
        v1 ^= 0x2020202;
        printf("%x %x\n", v0, v1);
        v0 += (((v1 = 2; i -= 2)
        {
            uint32_t tmp_v[] = {v[i], v[i + 1]};
            decipher2(r, tmp_v, k);
            v[i] = tmp_v[0];
            v[i + 1] = tmp_v[1];
        }
        decipher(r, v, k);
        for (auto i : v)
        {
            while (i != 0)
            {
                printf("%c", i & 0xff);
                i >>= 8;
            }
        }
        return 0;
    }