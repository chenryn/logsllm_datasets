例如：
```
$ touch foo bar baz
$ ls
bar  baz  foo
$ touch foo
$ ls -t
foo bar baz
```
### 列出方式
`ls` 的标准输出平衡了可读性和空间效率，但有时你需要按照特定方式排列的文件列表。
要以逗号分隔文件列表，请使用 `-m`：
```
ls -m ~/example
bar, baz, foo
```
要强制每行一个文件，请使用 `-1` 选项（这是数字 1，而不是小写的 L）：
```
$ ls -1 ~/bin/
bar
baz
foo
```
要按文件扩展名而不是文件名对条目进行排序，请使用 `-X`（这是大写 X）：
```
$ ls
bar.xfc  baz.txt  foo.asc
$ ls -X
foo.asc  baz.txt  bar.xfc
```
### 隐藏杂项
在某些 `ls` 列表中有一些你可能不关心的条目。例如，元字符 `.` 和 `..` 分别代表“本目录”和“父目录”。如果你熟悉在终端中如何切换目录，你可能已经知道每个目录都将自己称为 `.`，并将其父目录称为 `..`，因此当你使用 `-a` 选项显示隐藏文件时并不需要它经常提醒你。
要显示几乎所有隐藏文件（`.` 和 `..` 除外），请使用 `-A` 选项：
```
$ ls -a
.
..
.android
.atom
.bash_aliases
[...]
$ ls -A
.android
.atom
.bash_aliases
[...]
```
有许多优秀的 Unix 工具有保存备份文件的传统，它们会在保存文件的名称后附加一些特殊字符作为备份文件。例如，在 Vim 中，备份会以在文件名后附加 `~` 字符的文件名保存。
这些类型的备份文件已经多次使我免于愚蠢的错误，但是经过多年享受它们提供的安全感后，我觉得不需要用视觉证据来证明它们存在。我相信 Linux 应用程序可以生成备份文件（如果它们声称这样做的话），我很乐意相信它们存在 —— 而不用必须看到它们。
要隐藏备份文件，请使用 `-B` 或 `--ignore-backups` 隐藏常用备份格式（此选项在 BSD 的 `ls` 中不可用）：
```
$ ls
bar.xfc  baz.txt  foo.asc~  foo.asc
$ ls -B
bar.xfc  baz.txt  foo.asc
```
当然，备份文件仍然存在；它只是过滤掉了，你不必看到它。
除非另有配置，GNU Emacs 在文件名的开头和结尾添加哈希字符（`＃`）来保存备份文件（`#file＃`）。其他应用程序可能使用不同的样式。使用什么模式并不重要，因为你可以使用 `--hide` 选项创建自己的排除项：
```
$ ls
bar.xfc  baz.txt  #foo.asc#  foo.asc
$ ls --hide="#*#"
bar.xfc  baz.txt  foo.asc
```
### 递归地列出目录
除非你在指定目录上运行 `ls`，否则子目录的内容不会与 `ls` 命令一起列出：
```
$ ls -F
example/  quux*  xyz.txt
$ ls -R
quux  xyz.txt
./example:
bar.xfc  baz.txt  #foo.asc#  foo.asc
```
### 使用别名使其永久化
`ls` 命令可能是 shell 会话期间最常使用的命令。这是你的眼睛和耳朵，为你提供上下文信息和确认命令的结果。虽然有很多选项很有用，但 `ls` 之美的一部分就是简洁：两个字符和回车键，你就知道你到底在哪里以及附近有什么。如果你不得不停下思考（更不用说输入）几个不同的选项，它会变得不那么方便，所以通常情况下，即使最有用的选项也不会用了。
解决方案是为你的 `ls` 命令添加别名，以便在使用它时，你可以获得最关心的信息。
要在 Bash shell 中为命令创建别名，请在主目录中创建名为 `.bash_aliases` 的文件（必须在开头包含 `.`）。 在此文件中，列出要创建的别名，然后是要为其创建别名的命令。例如：
```
alias ls='ls -A -F -B --human --color'
```
这一行导致你的 Bash shell 将 `ls` 命令解释为 `ls -A -F -B --human --color`。
你不必仅限于重新定义现有命令，还可以创建自己的别名：
```
alias ll='ls -l'
alias la='ls -A'
alias lh='ls -h'
```
要使别名起作用，shell 必须知道 `.bash_aliases` 配置文件存在。在编辑器中打开 `.bashrc` 文件（如果它不存在则创建它），并包含以下代码块：
```
if [ -e $HOME/.bash_aliases ]; then
    source $HOME/.bash_aliases
fi
```
每次加载 `.bashrc`（这是一个新的 Bash shell 启动的时候），Bash 会将 `.bash_aliases` 加载到你的环境中。你可以关闭并重新启动 Bash 会话，或者直接强制它执行此操作：
```
$ source ~/.bashrc
```
如果你忘了你是否有别名命令，`which` 命令可以告诉你：
```
$ which ls
alias ls='ls -A -F -B --human --color'
        /usr/bin/ls
```
如果你将 `ls` 命令别名为带有选项的 `ls` 命令，则可以通过将反斜杠前缀到 `ls` 前来覆盖你的别名。例如，在示例别名中，使用 `-B` 选项隐藏备份文件，这意味着无法使用 `ls` 命令显示备份文件。 可以覆盖该别名以查看备份文件：
```
$ ls
bar  baz  foo
$ \ls
bar  baz  baz~  foo
```
### 做一件事，把它做好
`ls` 命令有很多选项，其中许多是特定用途的或高度依赖于你所使用的终端。在 GNU 系统上查看 `info ls`，或在 GNU 或 BSD 系统上查看 `man ls` 以了解更多选项。
你可能会觉得奇怪的是，一个以每个工具“做一件事，把它做好”的前提而闻名的系统会让其最常见的命令背负 50 个选项。但是 `ls` 只做一件事：它列出文件，而这 50 个选项允许你控制接收列表的方式，`ls` 的这项工作做得非常、*非常*好。
---
via: 
作者：[Seth Kenlon](https://opensource.com/users/sethhttps://opensource.com/users/sambocettahttps://opensource.com/users/scottnesbitthttps://opensource.com/users/sethhttps://opensource.com/users/marcobravohttps://opensource.com/users/sethhttps://opensource.com/users/don-watkinshttps://opensource.com/users/sethhttps://opensource.com/users/jamesfhttps://opensource.com/users/seth) 选题：[lujun9972](https://github.com/lujun9972) 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出