calls from a set of direct jump targets J to get J (cid:2) (§IV-D).
Finally, Line 6 combines E(cid:2), C, and J (cid:2) to get the ﬁnal set of
function addresses.
B. Disassembly
DISASSEMBLE performs traditional linear-sweep disassem-
bly from the start address of the given .text section txt
until reaching the end of the section. In case there is a
disassembly error, we increase the program counter by one,
and resume the disassembly process. The primary goal here is
to ﬁnd all the end-branch instructions as well as direct jump
instructions. Linear-sweep disassembly is known to be effec-
tive in recovering instructions from regular binaries generated
by a compiler, especially because both major compilers (GCC
and Clang) for x86 and x86-64 do not insert data inside the
.text section [3], [32]. Although linear-sweep disassembly
suits our needs, it may cause errors when dealing with binaries
that contain data within a .text section, e.g., hand-written
assembly code. Distinguishing between code and data in an
arbitrary binary is a well-known undecidable challenge, and
handling the issue is beyond the scope of this paper.
C. Filtering out End-Branch Instructions
Recall from §III-B, end-branch instructions can be placed at
two different locations other than a function entry. To reduce
false-positives in identifying functions, we need to ﬁlter out
end-branch instructions that are placed either after an indirect-
return function call or at an exception catch block.
First, FILTERENDBR checks for every end-branch instruc-
tion to see if there is a preceding call instruction that
refers to a Procedure Linkage Table (PLT) entry. If so, it
retrieves the target function name and compares it with a
list of predeﬁned indirect-return function names. Speciﬁcally,
we use a total of ﬁve known indirect-return functions deﬁned
by GCC [11], which includes setjmp and vfork. When
the target function name matches with one from the list,
FILTERENDBR simply removes the corresponding end-branch
instruction address from E because it represents a return target
of the indirect-return function.
Second, FILTERENDBR analyzes every Language-Speciﬁc
Data Area (LSDA) of the .gcc_except_table section
to see if there is any end-branch instruction that belongs
to a landing pad,
i,.e., an exception catch block. The
.gcc_except_table section is essential in handling C++
exceptions, and cannot be stripped.
Our approach is orthogonal to the one of FETCH [33],
which uses the PC begin values in a Frame Description Entry
(FDE) located at the .eh_frame section. Strictly speaking,
the FDE records are not essential for x86 binaries as long
as they do not
include exception handling code. For this
reason, Clang indeed does not create an FDE record for every
function when the x86 binary is purely written in C, which
makes FETCH suffers in dealing with x86 binaries compiled
with Clang. However, FunSeeker uses LSDAs stored in the
.gcc_except_table section, which cannot be stripped
off. Thus, our system is robust against varying compilers.
D. Tail Call Selection
SELECTTAILCALL selects a subset of J because not every
direct jump target represents a function: A direct jump target
is a function only when the jump is a tail call. Therefore,
existing binary analysis frameworks employ several heuristics
to detect tail calls [32].
FunSeeker regards a direct jump as a tail call when the
following two conditions are met: (1) if the target address
is beyond the boundary of the current function that
the
jump instruction belongs to, and (2) if the target address
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:22 UTC from IEEE Xplore.  Restrictions apply. 
562
is referenced by multiple functions other than the current
function. The ﬁrst condition is suggested by Qiao et al. [39]
and the second condition is inspired by FETCH [33]. Note
that checking both conditions does not require any complex
analysis technique. The main beneﬁt of SELECTTAILCALL is
to reduce false positives of FunSeeker, and our experimental
results show that SELECTTAILCALL indeed helps increase
precision by 73.18%.
E. Implementation
To parse ELF exception handling information and disassem-
ble binaries, we used B2R2 [23], which has an efﬁcient and
precise binary analysis frontend [24]. In total, we wrote 377
source lines of F# code to implement FunSeeker. We make
our tool as well as our datasets public to support open science:
https://github.com/B2R2-org/FunSeeker.
V. EVALUATION
In this section, we evaluate our tool, FunSeeker,
answer the following research questions.
to
RQ1. How effective are the methods FunSeeker em-
ployed in terms of identifying functions? (§V-B)
RQ2. How does FunSeeker compare to current identiﬁ-
cation tools in terms of correctness? (§V-C)
RQ3. How does FunSeeker compare to current identiﬁ-
cation tools in terms of speed? (§V-D)
A. Experimental Setup
1) Obtaining the Ground Truth: We obtain the ground truth
about function entry addresses by referring to the DWARF
symbols. However, there are some corner cases. During com-
pilation, GCC sometimes extracts several code blocks from
a function and makes them a separate function: those newly
generated functions are often located far from the original
function and have a name with a sufﬁx, such as .cold or
.part. Although compilers put a function symbol to them,
they are not a function per se, but a “part” of a function
in a strict sense. Thus, we exclude them from our ground
truth. Additionally, we observed that compilers sometimes
miss out a function symbol for the compiler intrinsic function
__x86.get_pc_thunk. This happens speciﬁcally when the
function is called by the _start function. Thus, we manually
included it in our ground truth.
2) Comparison Targets: We chose three state-of-the-art
tools for comparison: IDA Pro [17] (v7.6), Ghidra [30]
(v10.0.4), and FETCH [33] (commit efe138). IDA Pro is a
well-known commercial off-the-shelf reverse engineering tool,
which employs proprietary heuristics as well as FLIRT [16], a
signature-based function identiﬁcation approach. Ghidra is the
most actively developed open-source binary analysis platform.
Ghidra aggressively utilizes .eh_frame information [26],
[32] to recognize function entries. FETCH is a state-of-the-art
function identiﬁcation tool that leverages exception handling
information to detect functions. We wrote a script for IDA Pro
and Ghidra to extract functions they found. While running our
experiments, we found that Ghidra and FETCH sometimes get
TABLE II: Precision and recall rates (%) of FunSeeker with
different conﬁgurations.
1(cid:3)
2(cid:3)
3(cid:3)
4(cid:3)
Prec. Rec.
Prec. Rec.
Prec. Rec.
Prec. Rec.
C Binutils 98.946 99.515 98.954 99.515 26.928 100.0 98.947 99.784
Coreutils 99.377 99.157 99.396 99.157 40.520 99.997 99.380 99.652
C
G
81.439 99.783 99.665 99.783 27.184 99.986 98.925 99.889
SPEC
100.0 99.652
100.0 99.250
71.059 99.884 99.976 99.866 23.057 99.999 99.975 99.923
80.623 99.734 99.745 99.734 26.295 99.988 99.475 99.828
g Binutils 99.992 99.506
Coreutils 99.979 99.230
SPEC
Total
100.0 99.506 23.901 99.931
100.0 99.230 33.036 100.0
n
a
l
C
stuck in an inﬁnite loop or crash due to out of memory when
analyzing some binaries in our dataset. Therefore, a total of
115 binaries were excluded from our dataset.
3) Running Environments: We ran our experiments on an
Intel Core i9-11900K processor. To make fair comparisons, we
set up a VM with VMWare Pro 15.5.7, and allocated a single
core and 8 GB of RAM to each VM. We used Windows 10
for IDA Pro, and Ubuntu 20.04 for the others.
B. Effectiveness of FunSeeker
To understand the effectiveness of FILTERENDBR and SE-
LECTTAILCALL, we measured how the precision and recall
scores change with or without
them. Speciﬁcally, we ran
FunSeeker under the following four different conﬁgurations.
1(cid:3) We turn off both FILTERENDBR and SELECTTAILCALL,
and simply use the end-branch instructions (E) and direct
call targets (C) found by DISASSEMBLE (∴ E ∪ C).
2(cid:3) We use the same conﬁguration as in 1(cid:3), but turn on
FILTERENDBR to reduce false positives. (∴ E(cid:2) ∪ C).
3(cid:3) We use the same conﬁguration as in 2(cid:3), but consider jump
targets (J ) to be more inclusive (∴ E(cid:2) ∪ C ∪ J ).
4(cid:3) We use the same conﬁguration as in 3(cid:3), but turn on SE-
LECTTAILCALL to reduce false negatives (∴ E(cid:2)∪C∪J (cid:2)).
Table II describes the precision and recall scores of
FunSeeker with the four different conﬁgurations. The ﬁrst
conﬁguration 1(cid:3) achieved an over 99% recall rate, while the
precision was relatively low. Particularly, SPEC includes C++
binaries, which contain a signiﬁcant amount of catch blocks
starting with an end-branch instruction (as discussed in §III-B).
Therefore, FunSeeker misidentiﬁed those catch blocks as a
function entry with 1(cid:3).
By turning on the FILTERENDBR module with the second
conﬁguration 2(cid:3), FunSeeker achieved a precision rate of
over 99%. This is because FILTERENDBR can disregard end-
branch instructions located at exception catch blocks and
indirect-return function call sites. 2(cid:3) does not change
the recall rates, but only improves the precision rates. Thus,
we conclude that FILTERENDBR can reduce the false positive
rate of FunSeeker without affecting the false negative rate.
With the third conﬁguration 3(cid:3), we additionally consider
every direct jump target J as a valid function entry. While
we can get the highest recall rates with 3(cid:3), FunSeeker
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:22 UTC from IEEE Xplore.  Restrictions apply. 
563
TABLE III: Function identiﬁcation results compared to the state-of-the-art tools.
FunSeeker
IDA Pro
Ghidra
FETCH
Prec. (%)
Rec. (%)
Time (s)
Prec. (%)
Rec. (%)
Prec. (%)
Rec. (%)
Prec. (%)
Rec. (%)
Time (s)
6
8
x
4
6
x
Binutils
Coreutils
SPEC CPU 2017
Binutils
Coreutils
SPEC CPU 2017
Total
99.482
99.690
99.358
99.462
99.671
99.379
99.407
99.775
99.268
99.911
99.666
99.237
99.897
99.828
0.934
0.318
3.023
0.977
0.273
3.742
1.181
91.099
96.004
89.188
95.364
97.956
93.885
92.292
72.136
60.091
74.980
77.112
64.409
80.416
76.285
91.213
70.136
96.372
98.970
93.652
97.967
95.754
74.337
73.512
87.142
98.462
98.705
98.758
91.994
98.897
99.285
98.602
99.436
99.633
99.554
99.194
49.997
51.787
84.193
99.895
99.224
99.970
89.143
13.193
0.502
18.602
14.125
0.283
15.552
6.031
substantially loses the precision by misidentifying irrelevant
instruction as a function entry.
Finally, we turn on SELECTTAILCALL in the fourth con-
ﬁguration 4(cid:3) to reduce the false positives by identifying tail
calls from J . Indeed, it signiﬁcantly increases the precision
compared to 3(cid:3). When compared to 2(cid:3), though, SELECTTAIL-
CALL introduces extra false positives due to its imprecision.
However, we found that SELECTTAILCALL signiﬁcantly ben-
eﬁts the recall rate with negligible precision loss.
C. Correctness of FunSeeker
We compared FunSeeker against the state-of-the-art tools
we chose in §V-A2 in terms of both precision and recall
rates. The prec. and the rec. columns in Table III respectively
represent precision and recall for each tool. Note FunSeeker
signiﬁcantly outperforms all the state-of-the-art tools in terms
of both precision and recall.
We further analyzed cases where FunSeeker failed to
correctly identify functions. Out of 15,935 false negative cases,
93.3% of them were a dead function, i.e., they were never used
in the program. The rest cases (6.7%) were a tail call target
that our SELECTTAILCALL misidentiﬁed. We also analyzed
the 55,045 false positives cases, and found that all of them
were referring to a .part block. Speciﬁcally, 57.1% of them
were a misidentiﬁed tail call, and 42.9% of them had a direct
call as if they were a function.
IDA Pro achieves the lowest recall rate. By further analyzing
the results, we found that 96% of the false negative cases were
due to the failure in identifying indirect branch targets.
Ghidra discovers more function entries than IDA Pro, but
achieves the lower recall rate for x86 binaries especially when
they do not have a relevant Frame Description Entry (FDE).
This implies that Ghidra largely relies on the .eh_frame
information (as also noted by [33]).
FETCH overall achieves high precision rates. However, it