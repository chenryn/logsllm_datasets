Disable-NetSSLValidation：
    ```powershell
    Add-Type @"
        using System;
        using System.Net;
        using System.Net.Security;
        using System.Security.Cryptography.X509Certificates;
        public class ServerCertificateValidationCallback
        {
            public static void Ignore()
            {
                ServicePointManager.ServerCertificateValidationCallback +=
                    delegate
                    (
                        Object obj,
                        X509Certificate certificate,
                        X509Chain chain,
                        SslPolicyErrors errors
                    )
                    {
                        return true;
                    };
            }
        }
    "@
    [ServerCertificateValidationCallback]::Ignore();
    ```
代码下载：Disable-NetSSLValidation.PDF
[https://blogs.sans.org/pen-testing/files/2017/03/Disable-NetSSLValidation.pdf](https://blogs.sans.org/pen-testing/files/2017/03/Disable-NetSSLValidation.pdf\))
上述代码片断对内部的.NET做了相关配置，通过**useUnsafeHeaderParsing**禁用了SSL证书校验。不幸的是，尽管上述代码在某些情况下确实可用，但通常是无效的。见鬼！
鉴于我们现在被迫必须采取一些更加安全的手段，可以考虑以下代码：
Invoke-SelfSignedWebRequest：
    ```powershell
    function Invoke-SelfSignedWebRequest
    {
    [CmdletBinding()]
        param(
            [uri][string]$url,
    [string]$cmdstr
        )
    Set-StrictMode -Version 3
    if($url.Scheme -ne "https") {
    #Direct to WebRequest
    $newWebRequest = "Invoke-WebRequest $url $cmdstr"
    IEX $newWebRequest
    } else {
    [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}
    #Grab target SSL Certificate
    $webRequest = [System.Net.HttpWebRequest]::Create($url)
    try { $webRequest.GetResponse().Dispose() } catch {}
    $cert = $webRequest.ServicePoint.Certificate
    $bytes = $cert.Export([Security.Cryptography.X509Certificates.X509ContentType]::Cert)
    $fname = $url.host
    $savePath = "$pwd$fname.key"
    set-content -value $bytes -encoding byte -path $savePath
    #Save to disk
    $importCert = new-object System.Security.Cryptography.X509Certificates.X509Certificate2
    $importCert.import($savePath)
    #Load into local CurrentUser Store
    $store = Get-Item "cert:CurrentUserMy"
    $store.open("MaxAllowed")
    $store.add($importCert)
    $store.close()
    #Wrap Invoke-WebRequest
    $newWebRequest = "Invoke-WebRequest $url $cmdstr"
    IEX $newWebRequest
    #Remove Cert & Clear Validation Callback
    Get-ChildItem -Path "cert:CurrentUserMy" -DnsName $fname | Remove-Item -force -confirm:0
    [System.Net.ServicePointManager]::ServerCertificateValidationCallback = $null
    }
    }
    New-Alias wget-ss Invoke-SelfSignedWebRequest
    ```
代码下载：Invoke-SelfSignedWebRequest.PDF：
Invoke-SelfSignedWebRequest**命令是对**Invoke-WebRequest**命令的一个封装，使用该命令可以连接到目标主机，然后下载X.509证书并将其加载进当前用户的证书存储区。
接下来，它将Web请求传递给**Invoke-WebRequest**，从证书存储区中删除证书并重置**ServerCertificateValidationCallback**函数以便使系统恢复原状。所有的活都帮你干了，这感觉是不是很好？！
无效SSL证书绕过技巧和方法中所用到的代码已上传至Github，这些只是**SelfSignedWebRequest**代码库中的一部分：
也许你已经发现`Disable-SSLValidation`命令也很有用。它利用反射机制实现了`System.Net.ICertificatePolicy`类，以禁用SSL证书校验。不过这条命令年代比较久远了，至于你能用来做什么就因人而异了。
祝你玩的开心！