        return
    }
### poc运行
基于以上分析，poc 中运行的流程如下：
  1. 获取原始请求，根据规则进行变形，构造请求
  2. 初始化 cel 环境：注入变量、方法
  3. 初始化 cel 变量列表：注入set定义的自定义变量、注入当前请求（构造的请求）
  4. 发起构造后的请求，并将响应写入cel变量列表
  5. 执行表达式
[ poc 运行过程的完整实现](https://github.com/jweny/pocassist/tree/master/poc/rule)
## 0x04 扩展xray
xray 以目录为单位进行扫描，足够覆盖绝大多数场景，但我认为还可以再细分下。
  1. 目录级的定义可以再完整些。以`testphp.vulnweb.com/aaa/bbb/ccc.html`为例，如果以目录为单位的话，应该扫描三个目录：`/`、`/aaa/`、`bbb`。
  2. 某些通用漏洞的组件通常独占端口且部署在一级目录，为减少请求数，只扫描一级目录`/`。
  3. 每个请求的响应（包括原始请求和每个变形后的请求）都应该检查一遍响应，例如是否为常见 CMS /框架的报错、绝对路径泄露、IP泄露、数据库报错等等。
  4. `参数存在 SSRF`或`参数型的存储型 XSS`等，是需要逐一对原始请求的参数进行处理：直接替换为 payload 或者在原始参数后面拼 payload 。
  5. 以上扫描只针对 http web 应用。对于一些复杂的 poc 或者 tcp 扫描的漏洞（如 redis 未授权）等，应该加载支持自定义脚本。
因此我在原有 xray 规则基础上，新加了一个`规则类型`的字段，根据规则所属哪种类型，去执行不同的变形逻辑。
核心代码：
    // 根据原始请求 + rule 生成并发起新的请求
    func (controller *PocController) DoSingleRuleRequest(rule *Rule) (*proto.Response, error) {
        fastReq := controller.Request.Fast
        // fixReq : 根据规则对原始请求进行变形
        fixedFastReq := fasthttp.AcquireRequest()
        fastReq.CopyTo(fixedFastReq)
        curPath := string(fixedFastReq.URI().Path())
        affects := controller.Plugin.Affects
        switch affects {
        // 情况4 参数级
        case AffectAppendParameter, AffectReplaceParameter:
            for k, v := range rule.Headers {
                fixedFastReq.Header.Set(k, v)
            }
            return util.DoFasthttpRequest(fixedFastReq, rule.FollowRedirects)
        //  情况3 content级
        case AffectContent:
            return util.DoFasthttpRequest(fixedFastReq, rule.FollowRedirects)
        // 情况1 dir级
        case AffectDirectory:
            // 目录级漏洞检测 判断是否以 "/"结尾
            if curPath != "" && strings.HasSuffix(curPath, "/") {
                // 去掉规则中的的"/" 再拼
                curPath = fmt.Sprint(curPath, strings.TrimPrefix(rule.Path, "/"))
            } else {
                curPath = fmt.Sprint(curPath, "/" ,strings.TrimPrefix(rule.Path, "/"))
            }
        // 情况2
        case AffectServer:
            curPath = rule.Path
        // url级(直接使用原始请求头，只替换路径和完整post参数)
        case AffectURL:
            //curPath = curPath, strings.TrimPrefix(rule.Path, "/"))
        default:
        }
        // 兼容xray: 某些 POC 没有区分path和query
        curPath = strings.ReplaceAll(curPath, " ", "%20")
        curPath = strings.ReplaceAll(curPath, "+", "%20")
        fixedFastReq.URI().DisablePathNormalizing= true
        fixedFastReq.URI().Update(curPath)
        for k, v := range rule.Headers {
            fixedFastReq.Header.Set(k, v)
        }
        fixedFastReq.Header.SetMethod(rule.Method)
        // 处理multipart
        contentType := string(fixedFastReq.Header.ContentType())
        if strings.HasPrefix(strings.ToLower(contentType),"multipart/form-Data") && strings.Contains(rule.Body,"\n\n") {
            multipartBody, err := util.DealMultipart(contentType, rule.Body)
            if err != nil {
                return nil, err
            }
            fixedFastReq.SetBody([]byte(multipartBody))
        }else {
            fixedFastReq.SetBody([]byte(rule.Body))
        }
        return util.DoFasthttpRequest(fixedFastReq, rule.FollowRedirects)
    }
`DealMultipart`方法是处理用到`multipart`的 poc (例如验证文件上传)，应当按照 RFC
规定要将`multipart`的每个文件头和分隔符的`\n`转成`\r\n`。
核心代码：
    func DealMultipart(contentType string, ruleBody string) (result string, err error) {
        errMsg := ""
        // 处理multipart的/n
        re := regexp.MustCompile(`(?m)multipart\/form-Data; boundary=(.*)`)
        match := re.FindStringSubmatch(contentType)
        if len(match) != 2 {
            errMsg = "no boundary in content-type"
            //logging.GlobalLogger.Error("util/requests.go:DealMultipart Err", errMsg)
            return "", errors.New(errMsg)
        }
        boundary := "--" + match[1]
        multiPartContent := ""
        // 处理rule
        multiFile := strings.Split(ruleBody, boundary)
        if len(multiFile) == 0 {
            errMsg = "ruleBody.Body multi content format err"
            //logging.GlobalLogger.Error("util/requests.go:DealMultipart Err", errMsg)
            return multiPartContent, errors.New(errMsg)
        }
        for _, singleFile := range multiFile {
            //  处理单个文件
            //  文件头和文件响应
            spliteTmp := strings.Split(singleFile,"\n\n")
            if len(spliteTmp) == 2 {
                fileHeader := spliteTmp[0]
                fileBody := spliteTmp[1]
                fileHeader = strings.Replace(fileHeader,"\n","\r\n",-1)
                multiPartContent += boundary + fileHeader + "\r\n\r\n" + strings.TrimRight(fileBody ,"\n") + "\r\n"
            }
        }
        multiPartContent += boundary + "--" + "\r\n"
        return multiPartContent, nil
    }
[完整实现](https://github.com/jweny/pocassist/blob/master/poc)
## 0x05 总结
本文描述的 [pocassist](https://github.com/jweny/pocassist) 的规则体系具体实现。在兼容 xray yaml
规则的基础上，对请求变形设计了更细致的分类。想了解具体实现的师傅可以先自行研究下源码，我也会在后续文档逐一分析具体的实现细节。
如果文章内有描述不清或其他问题，烦请各位师傅斧正。
## 0x06 参考
  * 
  * 
  * 
  * 
  * 