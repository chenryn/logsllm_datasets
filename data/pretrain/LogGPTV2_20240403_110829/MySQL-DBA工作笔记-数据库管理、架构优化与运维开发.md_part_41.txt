---
## Page 262
240丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
有变通方法呢，我们可以间接地突破查询优化器的这个限制，引入派生表（derived table)。
语法形式，比如要变更表 payment_dat，而子查询又是从 payment_data 里提取的数据，有没
法可以解决一下。
6.2.1MySQL 中的派生表
clause
式的相关内容，也是希望通过这样的串联方式一窥查询优化的真面目。
依然重要；讲解完原理之后，本小节接下来主要会讲派生表、半连接、反连接和行值表达
景下，对于性能方面还是游刃有余，在架构优化的前提下，了解MySQL方面的优化原理
还是有一定的距离，但是因为MySQL 强大的社区红利，在强调整体分布式支撑能力的背
DBMS 实现技术中的精华，也是难点和重点，由此可见查询优化在数据库技术领域的重要性。
6.2
如果你对 MySQL 查询优化器有一定了解就会明白，其实以上方式是MySQL 不支持的
对于MySQL的查询优化来说，可谓任重道远，虽然和商业数据库的查询优化器相比
所以上面的语句使用如下的方式就可以破解。
 ERROR 1093 (HY000): You can't specify target table 'rr' for update in FROM
中国人民大学信息学院教授，博士生导师王珊曾经说过：数据库查询优化技术一直是
where rr.id =
UPDATE payment_data rr
有一次，有一个朋友反馈下面的语句在执行的时候抛出了错误，想让我看看有什么办
初识MySQL中的派生表（derived table）还是在一个偶然的问题场景中。
后续对JSON 类型的使用也需要注意一下。
----
而根据字符类型匹配，效率要高两个数量级。
where
Sending data
Status
SET
SET rr.penalty_date
executing
SQL 查询优化
(SELECT min(r.id)
where
WHERE
FROM user_
Duration
datar
10.000001
0.000126
0.000001
='2017-4-12'
0.000128
'2017-4-12
no
--+---
NULL
NULL
NULL
NULL
-+--
NULL
NULL
NULL
NULL
---
## Page 263
ref
ref
千万条数据。首先查看两条数据，作为我们测试的基础数据，id是主键列。
这个时候查看执行计划，就会看到 derived table 的字样。
1 row in set (1.12 sec)
' r 2 (    ) 5 x ats  select * from t_fund_info where id=138031;
如果按照id列来查询，就会发现效率极高。
>select id from t_fund_info limit 1,2;
首先看第一种方式，如下：
1row inset(0.01sec)
为了充分说明派生表的一些特点，我还是以一张大表t_fund_info 为例，这张表有近
Derived tables is the internal name for subqueries in the
1
我们回到刚刚提到的派生表，在官方文档中是如下这么说的。
1|SIMPLE
1754906
138031
id
rows
rows
(SELECT min(t.id)
where
FROM user_debt
|t_fund_info丨 const 丨 PRIMARY
| type | possible_keys | key 
丨 type 丨 possible_keys | key 
PRIMARY|8
第6章MySQL查询优化|241
FROM clause
Ikey_len |
I key_len |
|const
---
## Page 264
242丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
外层的过滤条件where t.id=138031。
空间大概是270M，空间占用更少一些。
但是derived table 使用率竟然达到了 2G以上。
询的过程中，占用了 2G 多的空间，最后发现是由于磁盘空间不足而退出。
的一个MyISAM表。
21271011
1998067
为了验证这个过程，我尽可能完整地收集了/tmp 目录下的文件使用情况，可以看到查
以上的问题在5.5 版本中是可以复现的，如果在5.7版本测试，可能这种情况就难以
梳理了流程，对于整个问题的瓶颈也好定位了，因为扫描表 t_fund_info 时没有使用
（2）把子查询的结果写到临时表T表。
（1）执行子查询，select id from t_fund_info。
我们可以回溯下这个失败的查询流程：
通过上面的分析看出还是有潜在的性能问题，我测试了同样数据量的 MyISAM 表，
-rw-rw---
这里有一个疑问，那就是这个表t_fund_info 是个 InnoDB 表，占用空间是400M左右，
/dev/shm
#df-hlgrep\/tmp
查看错误里的信息，是指向了一个 MYI 的文件，显然是使用了临时表的方式，典型
这个时候就会发现这么一个看似简单的查询竟然抛出了错误。
看起来是1秒左右的执行速度，差别还不是很大，我们换第二种方式。
2 rows in set (0.90 sec)
（3）回读，应用上层SELECT的WHERE条件t.id=138031。
-rw-rw----
+
1IPRIMARY
|Using index
 Using where
1 mysql mysql
1 mysql mysql
||ALL
6.0G
5
6.0G
6.0G
6.0G
6.0G
fund_info |index | NULL
6.0G3.7G2.0G
5.4G
5.2G
4.8G
482344960 0ct 20 2016 t_fund_info.ibd
2.0G
250M
903M
110M
386M
498M
625
9545 0ct 202016t_fund_info.frm
1.0K
100%
73%/tmp
99%
96%
90%
|NULL
/tmp
/tmp
/tmp
/tmp
/tmp
/tmp
/tmp
l account 丨182
NULL
丨NULL
to repair it
|NULL
|NULL
---
## Page 265
其实整个 SQL 的逻辑是 test 和 test2 的连接。
*from test where id in (select id from test2 where xxxxx)这种形式的 SQL 就用到了半连接，
6.2.2
些性能问题。
题，同时它也会带来一些问题，可以得出一个初步的结论：
高，但是需要引起我们的重视。
语句在5.5版本中执行效率还比较高，但是到了5.7版本就差了，这种问题发生的概率不
这个参数带来的影响在一些 MySQL 跨版本升级场景中出现的频率比较高，可能有些 SQL
为子查询展开，由优化器参数 optimizer_switch='derived_merge=ON’来控制，默认为打开，
复现了，因为从 MySQL 5.7版本开始，优化器引入优化器参数 derived_merge，可以理解
此外，还有两类逻辑相同的实现方式：
select dname from dept dept where exists (select null from emp emp where
·exists 半连接
select dname from dept dept where deptno in (select deptno from emp emp);
●in 半连接
常见的半连接形式有：
第一次听到半连接会感觉很高大上，其实它是我们普遍使用的一种形式，比如 select
最后浓缩为一句话：尽量避免使用派生表。
（4）使用视图可以完整对接派生表逻辑，性能改进也比较明显。
（3）自5.7版本开始有优化器参数 derived_merge，默认为打开，可以缓解派生表的一
（2）派生表存在潜在的性能隐患，要尽量避免。
（1）派生表会生成临时文件，系统层需要格外关注空间变化。
通过这些知识点的贯穿，其实对于派生表是一种比较纠结的态度，它能够解决一些问
除了执行效率大大改进之外，还发现执行计划和主键的执行计划是一模一样的。
> select *from test_view where id=138031;
然后使用如下的方式来进行验证：
>create view test_view as select * from t_fund_info;
而除了优化器参数之外，还有没有其他的改进空间呢，我们试试视图吧。
MySQL 中的半连接
emp.deptno=dept.deptno);
第6章MySQL查询优化丨243
---
## Page 266
244|MySQLDBA工作笔记：数据库管理、架构优化与运维开发
t.user_name from users
连接的一些潜在问题，我们来模拟一个问题来复现一下。
式来实现。
为了简化测试条件和查询结果，我们使用count 的方式来完成对比测试。
select u.userid,u.user_name from users u where u.user_name in (select
然后我们使用如下的半连接查询数据，实际上执行了6秒左右。
[test]>source insert_proc.sql 
初始化的过程会很快，最后一步（插入数据）花费了近6秒的时间。
endss
begin
delimiter $$
如果要插入数据，可以使用存储过程的方式。比如先插入20000条定制数据。
)engine=innodb default charset=UTF8;
primary
userid int(1l) unsigned not null,
create table users(
明白了半连接的概念，是否感觉已经学会了，其实不然，这个时候我们还没有理解半
限于 MySQL intersect 和 minus 暂不支持，所以这仅仅是一种实现的思路而已，供参考。
intersect
select dept.dname from dept dept,
需要补充的是，在通用 SQL 中，从集合运算的角度来看，半连接可以使用如下的方
select distinct dept.deptno from dept dept,emp emp
call proc_auto_insertdata();
delimiter;
1S
首先创建下面的表。
sel
(select
count(u.userid)
end while;
set init_data=init_data+l;
insert into
init_data integer default 1;
declare
ect
name
deptnofromempemp)b
key(userid)
deptno from dept
where dept.deptno=emp.deptno;
-1999
users
values(init_data, concat('user'
f--distinct+Inner Join
,init_data));
---
## Page 267
t.user_name from users t where t.useridselect count(u.userid) from users u where u.user_name in (select
1 row in set (0.06 sec)
where (u.user name
上述代码中各参数的解释如下：
然后执行语句如下：
首先 flush status，如下:
如果想得到更多的执行效率对比情况，可以使用 show status 的方式。
但是效果却好很多。
然后使用如下的方式来查看，
1 row in set (6.38 sec)
扫描来查询索引列，该值会增加。
rows in set (0.04 sec
Handler_read_prev
Handler
Handler_read_key
Handler_read_first
Variable_name
row in set (6.22 sec)
count(u.userid)
[test]>flush status;
count(u.userid)
扫描，该值较高。通常说明表索引不正确或写入的查询没有利用索引。
read next
1999|
19991
cead
last
--
-十
in
|Value|
1999
2
2
当然看起来这种结构似乎有些多余，因为userid<-1的
t.user name from users t where t.userid<2000)
第6章 MySQL查询优化丨245
---
## Page 268
246丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
t.user_name from
optimizer_switch 进行调整。关闭半连接的设置如下，会在全局生效。
接还是存在一些性能隐患的，能不能选择性的关闭呢，可以通过优化器开关
引使用正确。
查询，所以 Handler_read_next 的值也是一个范围值。
不管我们怎么去做诊断和分析，一个初步印象已经形成了，这就说明MySQL 的半连
可以和明显看到 Handler_read_key 这个值很高，根据参数的解释，说明查询和表的索
然后运行另外一个子查询，可以看到 show status 的结果如下：
至此，我们通过模拟测试对半连接的基本原理有了一个整体的认识。
1 row in set (0.07 sec)
执行第二个语句，情况如下：
+-----
再次运行原本执行时间近6秒的 SQL，会发现执行时间大大降低。
Query OK,0 rows affected (0.00 sec)