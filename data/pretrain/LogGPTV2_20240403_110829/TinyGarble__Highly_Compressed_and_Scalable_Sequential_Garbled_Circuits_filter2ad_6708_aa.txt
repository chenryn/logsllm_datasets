title:TinyGarble: Highly Compressed and Scalable Sequential Garbled Circuits
author:Ebrahim M. Songhori and
Siam U. Hussain and
Ahmad-Reza Sadeghi and
Thomas Schneider and
Farinaz Koushanfar
2015 IEEE Symposium on Security and Privacy
2015 IEEE Symposium on Security and Privacy
TinyGarble: Highly Compressed and Scalable
Sequential Garbled Circuits
Ebrahim M. Songhori∗, Siam U. Hussain∗, Ahmad-Reza Sadeghi†, Thomas Schneider†, Farinaz Koushanfar∗
{ebrahim, siam.umar}@rice.edu, PI:EMAIL, PI:EMAIL, PI:EMAIL
∗Rice University, Houston, TX, USA
†Technische Universit¨at Darmstadt, Darmstadt, Germany
Abstract—We introduce TinyGarble, a novel automated
methodology based on powerful logic synthesis techniques
for generating and optimizing compressed Boolean circuits
used in secure computation, such as Yao’s Garbled Cir-
cuit (GC) protocol. TinyGarble achieves an unprecedented
level of compactness and scalability by using a sequential
circuit description for GC. We introduce new libraries and
transformations, such that our sequential circuits can be
optimized and securely evaluated by interfacing with avail-
able garbling frameworks. The circuit compactness makes
the memory footprint of the garbling operation ﬁt in the
processor cache, resulting in fewer cache misses and thereby
less CPU cycles. Our proof-of-concept implementation of
benchmark functions using TinyGarble demonstrates a
high degree of compactness and scalability. We improve the
results of existing automated tools for GC generation by or-
ders of magnitude; for example, TinyGarble can compress
the memory footprint required for 1024-bit multiplication
by a factor of 4,172, while decreasing the number of non-
XOR gates by 67%. Moreover, with TinyGarble we are
able to implement functions that have never been reported
before, such as SHA-3. Finally, our sequential description
enables us to design and realize a garbled processor, using
the MIPS I instruction set, for private function evaluation.
To the best of our knowledge, this is the ﬁrst scalable
emulation of a general purpose processor.
Index Terms—Secure Function Evaluation, Garbled Cir-
cuit, Logic Design, Hardware Synthesis
I. INTRODUCTION
Secure function evaluation (SFE) allows two or more
parties to correctly compute a function of their respective
private inputs without exposure. The seminal result by
Yao introduced the GC protocol for addressing two-
party SFE [70]. The GC protocol allows to securely
evaluate a function given as a Boolean circuit that is
represented as a series of binary gates. The inputs and
outputs of each gate are masked such that the party
evaluating the GC cannot gain any information about the
inputs or intermediate results that appear during function
evaluation. The approach of obliviously evaluating a
Boolean circuit can also be generalized to multi-party
SFE [4], [26].
Contemporary literature has cited multiple important
privacy preserving and security critical applications that
could beneﬁt from a practical realization of SFE, in-
cluding but not limited to: biometrics matching, face
recognition, image/data classiﬁcation, electronic auctions
and voting, remote diagnosis, and secure search [1],
[8], [9], [22], [39], [58]. While GC was considered to
be prohibitively expensive and practically infeasible a
decade ago, today we are witnessing a surge of the-
oretical, algorithmic, and tool developments that have
signiﬁcantly improved the efﬁciency and practicality of
the GC protocol, see [2], [36], [44], [54], [60].
The research on producing Boolean functions for SFE
can be roughly classiﬁed into two categories: optimiza-
tions of cryptographic constructs and protocols such as
[2], [3], [42], [44], [60], [72], and compiler/engineering
techniques including but not limited to [23], [32], [36],
[46], [47], [53], [54].
In the compiler/engineering realm two different ap-
proaches for circuit generation have been developed.
One approach is based on building a custom library for
a general purpose programming language such as Java
along with functions for emitting the circuit, e.g., [32],
[36], [53]. For better usability, these libraries typically
include frequently used modules such as adders and
multipliers. However, library-based approaches require
manual adjustment and do not perform global circuit
optimization. Moreover, their memory management gets
complicated when the number of gates is large thereby
affecting performance and scalability [32].
The second approach is to write a new compiler for a
higher-level language that translates the instructions into
the Boolean logic, e.g., [23], [46], [47], [54]. Although
compiler-based approaches can perform global optimiza-
tions, they often unroll the circuits into a large list of
gates. For example, the description of a circuit with one
billion gates has at least size 2 log2(109) · 109 ≈ 7 GB.
To reduce circuit description size, the compiler proposed
in [46], called PCF (Portable Circuit Format), does not
unroll the loops in the circuit until the GC protocol runs,
and therefore seems to have a better scalability than
the other compilers. As we elaborate in related work
(see Section VIII), the existing approaches, including the
© 2015, Ebrahim M. Songhori. Under license to IEEE.
© 2015, Ebrahim M. Songhori. Under license to IEEE.
DOI 10.1109/SP.2015.32
DOI 10.1109/SP.2015.32
411
411
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:52 UTC from IEEE Xplore.  Restrictions apply. 
above proposals, have certain limitations when it comes
to real implementation.
A. Our approach
Our approach, TinyGarble, is based on synthesizing
and optimizing circuits for the GC protocol as sequential
circuits while leveraging powerful logic synthesis tech-
niques with our newly introduced custom-libraries.
Our solution simply views the circuit generation for
GC as an atypical logic synthesis task that, if properly
deﬁned, can still be addressed by conventional hard-
ware synthesis tools. By posing the circuit generation
for Yao’s protocol as a hardware synthesis problem,
TinyGarble naturally beneﬁts from the elegant algorithms
and powerful techniques already incorporated in existing
logic synthesis solutions, see, [6], [20], [55], [66]. This
view provides a radically different perspective on this
important problem in contrast to the earlier work in this
area that attempted to generate circuits by building new
libraries for general purpose languages such as Java [36],
[53], custom compilers such as [23], [46], or introduction
of new programming languages such as [54], [63].
TinyGarble introduces new techniques for minimizing
the number of non-XOR gates which directly results in
reduced computation and communication required for the
GC protocol. We do so by integrating the cost function
in the new custom libraries that we design and use within
our logic synthesis ﬂow. This way, we are able to gain
up to 80% improvement in the number of non-XOR
gates for benchmark circuits compared to PCF [46]. The
TinyGarble methodology is automated, i.e., the savings
can be achieved for many functions synthesized by our
method, regardless of their sophistication.
One signiﬁcant contribution of TinyGarble, which
differentiates it from the previous work, is expressing
the function in a very compact format, namely as a
sequential logic. The earlier work in this area mainly
described functions in a combinational format, where the
value of the output is determined entirely by the circuit
inputs. This input/output relationship can be expressed
by a (combinational) Boolean function and a directed
acyclic graph (DAG) of binary gates. The sequential
circuit description, on the other hand, allows having
feedback from the output to the input by adding the
notion of a state (memory). At each sequential cycle,
the output of the circuit is determined by the current
state of the system and the input. For each particular
sequential cycle, the relationship between the output and
the inputs for the given states can be determined as a
Boolean combinational logic.
The only previous work we are aware of which implic-
itly hinted at the possibility of having a more compact
representation is PCF [46]. It does so by embracing loops
and unrolling them only at runtime. A sequential circuit,
however, goes far beyond the loop embracing performed
at the software level. Not only does TinyGarble embrace
the high-level loops, it also enables the user to further
compact the functions by folding the implementation up
to its basic elements. For example, using TinyGarble,
user can compress the 1024-bit addition function into
only a 1-bit adder.
An important advantage of our sequential representa-
tion is providing a new degree of freedom to the user to
fold the functions to simpler computing elements; i.e., the
user has the freedom to choose the number of sequential
cycles needed for evaluation of the function–the size of
the combinational logic path between the states/inputs
and the outputs. The number of gates in the sequential
circuit can be managed by varying the number of cycles.
The memory footprint of the GC operation is directly
related to the number of gates in the sequential circuit; at
any moment during garbling, only the information corre-
sponding to the current cycle needs to be stored. Compact
sequential circuits yield a small enough memory footprint
that can ﬁt mostly on a typical processor cache. This
helps us to avoid costly cache misses while accessing the
wire tokens during the GC protocol. Indeed, TinyGarble
can enable practicable embedded implementations with
a small memory footprint.
The sequential representation enables, for the ﬁrst
time, implementation of a universal processor for private
function evaluation where the function is known only to
one party. We reduce private function SFE (PF-SFE) to
general SFE where the function is known by both parties.
Our implementation accepts assembly instructions of
the private function as input to the GC protocol. Since
a processor is inherently a sequential circuit,
it was
infeasible to be realized with previous GC tools.
TinyGarble accepts inputs in two different formats:
a standard hardware description language (HDL), or a
higher level language as long as it is compatible with the
existing high level synthesis (HLS) tools, e.g., the C lan-
guage for SPARK [30] and Xilinx Vivado [19], or Python
for PandA [59], that converts the high level language to
an HDL. Beside user’s manual optimization, TinyGarble
performs various optimizations through standard HDL
synthesis tools to generate an optimized netlist, i.e., list
of gates, which is then transformed to be used with a
GC protocol implementation, e.g., JustGarble [2] or Half
Gates [72].
Contributions. In brief, our contributions are as follows:
• Adaption of established HDL synthesis techniques
to compile and optimize a function into a netlist of
gates for use in secure computation protocols.
• Creation of new custom libraries and setting ob-
jectives/ constraints to repurpose standard synthesis
tools for minimizing the number of non-XOR gates
412412
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:52 UTC from IEEE Xplore.  Restrictions apply. 
in a circuit.
• Introduction of sequential circuit description for
achieving an unprecedented compactness in func-
tion representation and memory footprint.
• Providing a new degree of freedom to users to fold
the functions into a sequential circuit. The user can
achieve a small enough sequential circuit such that
the memory required for its secure evaluation ﬁts
even in a typical processor cache. This helps to
avoid costly cache misses and reduces the CPU time
required for GC.
• Proof-of-concept
implementation of benchmark
functions such as multiplication, and Hamming dis-
tance demonstrates up to 5 orders of magnitude sav-
ings in memory footprint and up to 80% efﬁciency
in minimizing the total number of non-XOR gates.
Furthermore, TinyGarble enables implementation of
large circuits that were not reported in earlier work,
such as SHA-3.
• Implementing the ﬁrst scalable emulation of a
universal processor for private function evaluation
where the number of instruction invocations is not
limited by the memory required for garbling. This
design is uniquely enabled by the TinyGarble se-
quential description. Our design is a secure general
purpose processor based on the MIPS I instruction
set that receives as inputs the private function from
one party and the data from the other.
II. PRELIMINARIES AND BACKGROUND
In this section, we provide preliminaries and related
background on garbled circuits (Section II-A) and HDL
synthesis (Section II-B).
A. Background on Garbled Circuit
Yao introduced the GC protocol for 2-party Secure
Function Evaluation (SFE) in the 1980’s [70]. GC is
described as a circuit whose wires carry a string valued-
token instead of a bit. Consider two parties, Alice and
to evaluate a function f (·) without
Bob, who want
revealing their inputs to each other. The function needs
to be represented as a combinational Boolean circuit. To
begin with, we assume the circuit consists of a single
gate with two input wires, wa, wb and one output wire
wc. Alice knows the value of input wa denoted by va
and Bob knows the value of input wb denoted by vb.
The gate is also represented by a four-entry truth table
G[va, vb]. There are two main phases in Yao’s protocol.
First, Alice encodes or garbles the circuit by generating
garbled tables. Second, Bob evaluates the output denoted
by vc without knowing anything about va other than what
can be deduced from the output and his own input.
The steps of Yao’s approach are described below.
1) For each wire wa, Alice selects one random bit ta
called type and two random (k − 1)-bit values Y 0
a
413413
and Y 1
a , where k is a symmetric security parameter
(e.g., k = 128). The concatenations of the ﬁrst
a (cid:3) ta and
random string and the type X 0
a (cid:3) ¯ta are called token for semantic bit 0
X 1
and 1 respectively.
a = Y 0
a = Y 1
2) For each gate, Alice symmetrically encrypts the
respective output tokens with the four possible com-
binations of the input tokens. The resulting table of
ciphertexts is called garbled table.
3) Alice sends to Bob the garbled tables and the token
corresponding to her input value.
4) Bob obliviously receives the tokens corresponding
to his input through oblivious transfer (OT) [62].
5) Bob decrypts the corresponding entry in the garbled
table based on the received input tokens and gets the
output token.
6) Finally, Alice reveals the type of the output and Bob
determines its semantic value.
In general, the circuit consists of multiple gates. Yao’s
protocol for this case is described below.
1) Alice chooses tokens for all the wires, constructs the
garbled tables for each gate and sends these to Bob
along with the tokens corresponding to her inputs.
2) Bob obliviously receives the tokens corresponding
to his input values through oblivious transfer.
3) Using these tokens, Bob evaluates the circuit gate-
by-gate until he evaluates all gates.
4) Finally, Alice reveals the type of the outputs and
Bob determines their semantic values.
We assume the honest-but-curious model as the basis
for building a stronger security protocol. Generic ways
of modifying GC-based protocols such that they achieve
security against stronger malicious adversaries have been
proposed, e.g., [48], [50].
In our implementation, we make use of state-of-the-art
optimizations for garbled circuits as described below.
1) Free XOR [44]: In this method, Alice generates a
global random (k−1)-bit value R which is just known to
her. During garbling operation for any wire wa, she only
generates a token X 0
a and computes the other token X 1
a ⊕ (R (cid:3) 1). With this convention, the token
a
as X 1
for the output wire of the XOR gates with input wires wa,
wb and output wire wc can be simply computed as Xc =
Xa ⊕ Xb. The proof of security for this optimization is
given in [44].
a = X 0
2) Row Reduction [58]: This optimization reduces the
size of the tables for the non-XOR gates by 25%. Here,
instead of generating a token for the output wire of a gate
randomly, the output token is produced as a function of
the tokens of the inputs. Alice generates the output token
such that the ﬁrst entry of the garbled table becomes all
0 and no longer needs to be sent.
3) Garbling With a Fixed-key Block Cipher [2]:
This method allows to efﬁciently garble and evaluate
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:52 UTC from IEEE Xplore.  Restrictions apply. 
non-XOR gates using ﬁxed-key AES. In this garbling
scheme which is compatible with the Free XOR and Row
Reduction techniques, the output key Xc is encrypted
with the input token Xa and Xb using the encryption
function E(Xa, Xb, T, Xc) = π(K) ⊕ K ⊕ Xc, where
K = 2Xa ⊕ 4Xb ⊕ T , π is a ﬁxed-key block cipher
(e.g., instantiated with AES), and T is a unique-per-gate
number (e.g., gate identiﬁer) called tweak. The proof of
security is given in [2].
B. Background on HDL Synthesis
HDL synthesis refers to the process of translating an
abstract form of function (circuit) presentation to the
gate-level logic implementation using a series of sophis-
ticated optimizations, transformations, and mapping [6],
[20], [55], [66]. An HDL synthesis tool is a computer
program which typically accepts the input circuit in some
algorithmic form, logic equation, or even a table, and out-
puts an implementation suitable for the target hardware
platform. Classic commercial/open-source HDL synthe-
sis tools accept the input functions in the HDL format,
e.g., Verilog or VHDL [13], [16], [21], [29], [56], [59]
but newer ones also accept high level format, e.g., C/C++
[19], [30]. The common target hardware platforms for
the synthesized logic include Field Programmable Gate
Arrays (FPGA), Programmable Array Logic (PAL), and
Application-Speciﬁc Integrated Circuits (ASIC).
The input functions (circuits), regardless of their HDL
or higher level format, can be deﬁned by the imple-
menter to be purely combinational logic that is fully
representable by Boolean functions, or they might be
sequential logic which is a more general format.
Typical practical implementations of a logic function
utilize a multi-level network of logic elements. The
tools translate the input to the implementation in two
steps: (i) Logic minimization; and (ii) logic optimization.
Logic minimization simpliﬁes the function by com-
bining the separate terms into larger ones containing
fewer variables. The best known algorithm for logic
minimization is the ESPRESSO algorithm [7]; although
the resulting minimization is not guaranteed to be the