options. These features have not been tested extensively by the Chromium developers yet and should
only be enabled if absolutely necessary [38, Secs. 8–9].
Custom command line arguments Through the use of app.commandLine.appendArgument(argument) and
app.commandLine.appendSwitch(switch, value), developers can pass additional command line ar-
guments to Chromium and Node.js. These arguments include ones that affect the security of the ap-
plication, like the aptly named --ignore-certificate-errors, --reduce-security-for-testing
and --unsafely-treat-insecure-origin-as-secure [48].
Obviously, these arguments should only be used for testing and never be enabled in production.
Apart from the custom command line arguments, all these features can be set using the webPreferences
property of the BrowserWindow options:
const mainWindow = new BrowserWindow({
webPreferences: {
nodeIntegration: false,
3.2. Attack Vectors Specific to Electron
20
contextIsolation: true,
enableRemoteModule: false,
webSecurity: true,
sandbox: true,
enableBlinkFeatures: '',
experimentalFeatures: false
}
});
3.2.2. Opening URLs with shell.openExternal()
The shell.openExternal(url) function can be used to open URLs in the computer’s respective default
program. Typical use cases include opening http:// and https:// URLs in the user’s default browser
and mailto: URLs in their default email software. Many developers pass user-controlled input into this
function. However, it doesn’t just open “harmless” URLs:
On Windows, a separate thread is opened6, the URL is surrounded with double quotes and then
directly and without any filtering passed into ShellExecuteW():7
std::string OpenExternalOnWorkerThread(const GURL& url,
const platform_util::OpenExternalOptions& options) {
// […]
base::string16 escaped_url = L"\"" + base::UTF8ToUTF16(url.spec()) + L"\"";
// […]
ShellExecuteW(nullptr, L"open", escaped_url.c_str(), nullptr,
working_dir.empty() ? nullptr : working_dir.c_str(),
SW_SHOWNORMAL)) ?X';
Note.starNotesO = $('#starNotes');
Note.renderStars = function(notes) {
// […]
this.starNotesO.html('');
for (var i = 0; i  element containing the note title is generated, wrapped into a
 element. Those  elements are then inserted into the DOM using the jQuery .append() function
which explicitly allows HTML content to be appended [56].
The report goes on to explain that this XSS vulnerability can be escalated to RCE. This is due to the
fact that Node integration is enabled in the app. Therefore, all Node.js API are available to the attacker
in the renderer process. This can be abused in the following ways for example:
Exfiltrate files from the user’s computer:
This payload reads the /etc/passwd file from the user’s computer using the fs library included with
Node.js and POSTs it to an attacker-controlled endpoint using the fetch() function included in