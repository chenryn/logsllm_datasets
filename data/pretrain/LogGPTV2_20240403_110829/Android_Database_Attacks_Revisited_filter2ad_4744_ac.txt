is partially protected if developers use the readPermission,
writePermission or  for a more ﬁne-grained
protection. If the content provider is protected by these per-
missions, some of the APIs do not need to be analyzed for
the public database attacks. We remove the permission-
protected APIs from the source method list based on the
category that they belong to and the permission chosen by
the developer: (i) if the content provider is protected by the
readPermission, apps installed on the device must request
for it to be able to query the component. Hence, leakage
APIs (e.g., query()) cannot be a source method; (ii) sim-
ilarly if a component is protected by writePermission, the
pollution APIs (e.g., insert()) cannot be source methods;
(iii) for the APIs which are used to obtain the ﬁle handlers
(e.g., openFile()), readPermission and writePermission are
checked based on the requesting access mode. If the access
mode is "w", writePermission is checked and if it is "r", the
readPermission is checked.
If the content provider is pro-
tected by the readPermission, we analyze the app for the "w"
mode, similarly, "r" mode for the writePermission. Since the
attacker can always gain the ﬁle handlers in one of the "r"
examples
are
5
Some
SQLiteDatabase.query(),
SQLite-
Database.insert() and ParcelFileDescriptor.open() for the leakage,
pollution and ﬁle access categories respectively.
6
If a content provider is protected by a permission which has a pro-
tection level higher than normal (e.g., dangerous), it is not chosen as
a candidate entry point for analysis.
629or "w" access modes, the ﬁle access APIs are always source
methods.
A content provider which is protected by the readPermis-
sion and writePermission simultaneously will not be cho-
sen as candidate for analysis since such providers are not
reachable by the malware. The analysis does not generate
an exploit whose reported path is protected by the . For instance, Line 5 in Listing 3 shows that the
developer has protected the "/contacts/" path by writePer-
mission. Therefore, our analysis does not generate exploits
consisting of URIs which have "/contacts/" path to invoke
the insert() method of the content provider as they will be
false positives.
Intents and Data Access (Private Database Sources).
Android apps may have private databases typically in the
form of SQLite databases which are not accessible through
content providers. Private databases can be implemented in
any component (class) of an app. For private database at-
tacks, we deﬁne a component (except for content provider)
to be not fully protected, if it is not protected by permis-
sions and it is exported (see Sec. 2). Such components are
candidates to be analyzed for private database attacks.
A malware installed on the device may indirectly access
private databases by crafting malicious Intents without call-
ing any of the methods of the ContentResolver to invoke the
ContentProvider APIs. Instead, it sends an Intent that starts
a component (e.g., activity), which is part of the provider’s
app. Hence, the destination component is in charge of re-
trieving and processing the data. These Intents are obtained
by APIs such as getIntent() in activities or onStart() in ser-
vices, etc., which are our source methods.
4.2 CFG and Reachability Analysis
The CFG construction for analyzing database attacks is
similar to the one in [12]. Android apps do not contain a
main method, so the CFG is dependent on the lifecycles of
the entry point components. The entry point component
for the public database attacks is content provider. The
content provider APIs are called by the underlying Android
framework as callback methods in a speciﬁc order as follows.
First, the ContentProvider is instantiated and the onCreate()
method is called. Next, one of the entry methods of the con-
tent provider which is overridden by the app is invoked and
this process is repeated for the rest of the overridden en-
try methods. Notice that the onCreate() method in content
providers which is supposed to be called before any other
API is anlayzed beforehand. For the entry point compo-
nents which trigger the private database attacks, we adopt
the lifecycles used in FlowDroid [1]. A sink reachability
analysis is performed on the CFG to identify whether a sink
method is reachable from a program point and its distance
from the source.7
4.3 Symbolic Execution
While symbolic execution has high precision, it has known
challenges [4]. Recently, for the analysis of Android apps
using symbolic execution, a more scalable analysis has been
proposed [12]. However, challenges remain in static sym-
bolic execution of libraries and frameworks which usually
does not scale due to the huge number of paths with long
7
The distance is used by our search heuristic in the (bounded) sym-
bolic execution phase to choose path traversal to help in reaching sink
methods. This helps to make the search more eﬃcient.
and complex path constraints. Moreover, symbolic execu-
tion would then have to deal with low-level data structures
in the libraries, e.g., collection classes which are essentially
a barrier for many existing analyses. Also, some parts of the
libraries might not be supported by the analysis, e.g., native
code. Modeling the needed libraries can help us to alleviate
these problems.
Modeling Libraries. The analysis introduced in [12] takes
a hybrid approach of static symbolic execution and dynamic
testing to interact with the Android framework. While the
hybrid approach helps for scalability, modeling certain li-
braries is crucial for certain classes of vulnerabilities. The
examples in Listing 1 and 2 show that the execution paths
that lead to the database attacks might include Android and
Java library methods which have to be handled more accu-
rately by the symbolic execution and constructing exploits
to run these paths is not trivial. Among these libraries, those
which construct URIs [3] and use its semantics to build ﬁl-
ters are particularly important for building public and pri-
vate database exploits. For instance, the entry methods of
content providers which have to be invoked by the malware
in the public database attacks require a URI parameter to
identify the data in a database. URI objects are diﬀerent
from strings and have more complex semantics. The analy-
sis in [12] supports load and store operations for the ﬁelds
of URI objects but not more complex operations. As this is
not suﬃcient for generating database exploits, we model the
semantics of complex URI methods.
ContentScope [31] which detects public database vulnera-
bilities does not discuss if it handles such libraries in the
analysis. Our approach for handling URI-based libraries
combines the classical symbolic execution which is depen-
dent on SMT solvers with automata-based theories. We
use the following approach to construct symbolic models for
URI-based libraries: (i) we use SMT formulas if a method
of a library can be directly translated to an SMT formula
and the formula is tractable enough; (ii) sometimes, directly
translating the semantics of library methods to SMT formu-
las is complex and the resulting formula is large (possibly
unbounded). If the method maps an input string to an out-
put string, we model them as Symbolic Finite Transducers
(SFT) [14] to simulate the I/O relationship. In what follows,
we study the structure of URIs and present our models using
the approaches discussed above.
Symbolic Representation for URIs. Our analysis keeps
a separate pool of URIs to trace the states of the URI in-
stances. We call the model that we have created to represent
URIs, summarized URI, which conforms to RFC 2396 [3]. A
summarized URI object can be altered by the methods of
classes such as android.net.Uri.Builder. Basically, our sym-
bolic model for the URI instances follows the original URI
class semantics and stores symbolic values for the URI ﬁelds.
The states of ﬁelds of summarized URIs change during sym-
bolic execution. A summarized URI also contains summa-
rized methods which are modeled in one of the following
ways: (i) directly translated to SMT formulas; and (ii) SFTs.
Summarized URIs are further used as the building blocks of
other related classes. For instance, the java.net.UriMatcher
class stores the summarized URIs which are added using
the UriMatcher.addURI(Uri) method (Line 6 and 7 in List-
ing 1). A content URI whose scheme is ﬁxed to "content"
and identiﬁes data in a content provider is also modeled as
a summarized URI.
630Direct Translation of Methods to SMT Formulas.
Due to lack of space, we show example symbolic represen-
tation of methods of libraries which are dependent on URIs
and modeled using individual SMTLib (v2) format formu-
las. Uri.getLastPathSegment() which returns the last path
segment of a URI can be modeled with the following self-
explanatory constraint:
Input : String path
Output : String LPS
Local v a r i a b l e : String x
¬LPS . c o n t a i n s ( " / " ) ∧ ( path = x . " / " . LPS ∨ path = LPS )
where uri is an android.net.Uri instance object, path is the
path ﬁeld of the uri, x is a string variable, LPS is the out-
put variable for the result of the method which represents
the last path segment of the uri, "." is the concatenation
operation and contains("/") means that the base variable
contains the "/" character. We generate the constraint in
SMT format to be solved by the SMT solver, for example:
(= ( str .++ x LPS ) path )∧
(= ( str . indexof y " / " 0) -1)∧
( or (= ( str .++ " / " y ) LPS ) ( and (= ( str . len x ) 0) (= y
LPS ) ) )
The getPathSegments() method is modeled similarly to the
bounded version of String.split method, i.e., splitN where
N is the maximum number of string tokens that we look
for in the base string variable. Some of the methods are
translated using models for other methods. For instance,
Uri.Builder.appendId(String id) is translated using the Uri
.Builder.appendPath(String x) method. In what follows, we
present the symbolic models for library methods which are
more complex and therefore modeled using SFTs. We illus-
trate symbolic execution through concrete examples due to
lack of space.
Matching URIs Using SFT. The UriMatcher.match(Uri)
method is often used in Android programs to compare con-
tent URIs.
It performs a mapping operation i.e., accepts
an object as input and maps it to a unique output value.
Modeling this method as an SMT formula is problematic
because a symbolic URI may be unbounded. We represent
our model using Symbolic Finite Transducers (SFT) [14].
Finite transducers are an extension of ﬁnite automata used
to model operations on lists of elements. A SFT extends
a ﬁnite transducer by allowing the transition labels to be
predicates.
Fig. 2 shows the SFT designed for the UriMatcher.match(Uri)
method. In this diagram, Ui belongs to the set of URIs added
to an android.content.UriMatcher object via UriMatcher
.addURI(Uri). Each transition has a constraint (ci) which
outputs d, the default value registered in the UriMatcher
(e.g., 0 registered at Line 2 in Listing 1), if it is not satisﬁed.
ϕ is the path constraint of the current execution path. If the
URI passed as argument to UriMatcher.match(Uri) matches
any of the Ui, the transducer outputs the integer code stored
for Ui (code(Ui)). The symbol $, used for the transition be-
tween q2 and q3 denotes the end of input. Content URI
patterns can be matched using wildcard characters. Our
symbolic model understands the "*" and "#" used as the
path segment by the UriMatcher class where "#" is ([0-9]+)
and "*" is (.*) as regular expressions.
In order to symbolically execute uriMatcher.match(uri) at
Line 11 in Listing 1, our analysis employs the SFT in Fig. 2
start
S
c1: f1,1 = f2,1 ∧ ϕ
c2: f1,2 = f2,2 ∧ ϕ
c3: f1,2 = “#” ∧ f2,2 ∈ L([0-9]+) ∧ ϕ
c1/d
c3/d
c2/d
c4/d
q1
c4: f1,2 = “*”
$/code(Ui)
q3
q2
Figure 2: SFT for UriMatcher.match(Uri): ϕ is the path constraint;
the ﬁelds of the registered and argument URI are denoted by f1,i and
f2,i respectively; c1 checks the constraints for the authority and c2,
c3 and c4 check the constraints for the path segments of the URIs
and d is the default integer registered in UriMatcher object.
for the two URIs registered in uriMatcher at Lines 6 and 7.
First the SFT examines whether the argument uri matches
the URI at Line 6 which restricts the path segment of the uri
to match ([0-9]+) and returns 1 (the code registered for the
ﬁrst URI). Next, the analysis examines the second URI at
Line 7 which restricts the path to be equal to "/contacts/".
However, due to the  at Line 5 in List-
ing 3, this URI is protected and should not be reported as
exploitable (unsatisﬁable due to the path constraint). Hence
the path at Line 18 in Listing 1 is infeasible.
Another example method which is modeled using SFT is
Uri.compareTo(). This method constructs the string repre-
sentation of the base and argument Uri objects and compares
them: it returns 0 if the base and argument Uri objects are
equal; and less or greater than 0 if the base URI string is lex-
icographically less or greater than the argument URI string
respectively. The symbolic model for Uri.compareTo() using
SFT and an example demonstrating how the model works
can be found in Appendix A.
Integrating SFT to DBDroidScanner. One reason for
choosing SFT to model the URI-based methods is their com-
patibility with SMT solvers. This allows us to construct
symbolic models whose input are path constraints in the
form of SMT formulas and reuse them all over the code-
base. The labels of transitions in our implementation for
SFT are SMT formulas. At each transition, a new con-
straint is checked whether it satisﬁes the existing path con-
straint. If the constraint is satisﬁable and its variables have
data dependency on the inputs, it is appended to the path
constraint. These constraints can specially help us in gen-
erating more precise inputs at the end of the symbolic ex-
ecution phase. One important characteristic of transducers
which makes them useful for modeling URI-based methods
is that they can deal with unbounded inputs. This allows us
to support URI ﬁelds which have recursive structure (e.g.,
query parameters). The number of iterations for transi-
tioning between states might depend on the loops in the
program. In this case, our framework employs a bounded
symbolic execution, thereby transitioning for a limited num-
ber of times in the transducer. Our implementation for the
SFTs is single-valued. Informally, this means that the value
returned for a given transition is always a single value. We
allow -transitions in our models by setting the predicate to
"true" and mapping it to the appropriate value dependent
on the states between which it transitions. In this paper, we
illustrate SFT models for two example URI methods. Other
URI methods (e.g., Uri.encode(String)) can also be modeled
using SFTs.
631Parsing the URIs. Sometimes the analysis needs to con-
struct a URI object for a given URI string (e.g., Uri.parse
(String) returns a Uri object for the String argument). URI
strings can be parsed using the POSIX regular expression in
RFC 2396 to retrieve the scheme, authority, path, query
components and fragment parts.
In order to model the
Uri.parse(String) method, ﬁrst we use the SMT solver to
compute a value for the String argument which satisﬁes the
path formulas collected so far. Next we use the regular ex-
pression to retrieve the ﬁelds and construct a URI. If con-
crete values cannot be resolved for the ﬁelds of the URI,
symbolic values are generated for them.
4.4 Database Attack Validation
In Sec. 2, we explained how database attacks can be clas-
siﬁed into private and public categories. DBDroidScanner
extends the validation component in [12] to analyze Android
apps for these categories of database vulnerabilities. Our
symbolic executor uses an SMT solver (we use the CVC4
SMT solver [20]) to solve the path constraints and gener-
ate values for the symbolic input variables identiﬁed by the
source-sink identiﬁcation phase. However, generating such
values is not adequate for exploiting the vulnerabilities and
constructing working exploits using them is not straightfor-
ward as shown next. These generated values are processed
by the validation component to generate concrete exploits
that trigger the private and public database vulnerabilities.
We have utilized and designed patterns for generating such
exploits based on the source and sink methods of the re-
ported vulnerable path.
Public Database Attacks. Public databases are acces-
sible through content providers. Content providers can be
reached from other apps (malware) on the device by directly
invoking standardized APIs (e.g., insert()). For this pur-
pose, the malware can obtain the content model by calling
getContentResolver() which allows calling APIs of content
providers available to the system. The parameters of these
APIs are the symbolic inputs for which the symbolic execu-
tor generates values. The validation component uses these
generated inputs as well as the manifest ﬁle to derive con-
crete parameters and launch requests to a particular content
provider. We explain the content provider exploit generation
through an example:
One of the APIs of a content provider is query(Uri uri,
String[] projection, String selection, String[] selArgs,
String sortOrder) which returns a Cursor over the result set
for the given URI. The uri parameter identiﬁes a particu-
lar table of a content provider and projection is the list of
columns to be queried. The selection parameter should be
formatted as an SQL WHERE clause to enforce constraints
on the query and if it contains ?s, they will be replaced by
the selArgs parameter. Finally, the sortOrder determines
how to order the rows in the result set. The symbolic ex-
ecutor in the analysis framework generates values for each
of the method parameters. The uri parameter starts with
the content scheme which is ﬁxed in content URIs. The
authority segment is obtained from the manifest ﬁle and
the symbolic executor checks whether its value is consistent
with the authority value resolved from the analysis of the
program. The reason is that sometimes developers make
mistakes and apply conditions on the execution path which
prevent the authority registered in the manifest ﬁle to be
accepted by the content provider. In this case, the content
provider cannot handle any request from other apps. Our
analysis avoids reporting such false positives.
The remaining segments of the uri identify the tables of
a database which are generated by the symbolic executor.