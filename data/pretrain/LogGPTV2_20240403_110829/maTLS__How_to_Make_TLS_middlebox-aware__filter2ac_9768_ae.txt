a trace that leads to the contradicting state.
A. Protocol Rules
The protocol rules for maTLS can be divided broadly
into three categories. The ﬁrst handles the setup rules of the
protocol. These represent events such as the registration of
server or middlebox certiﬁcates. Second, a set of corrup-
tion rules describe the main ways in which an agent may
violate their speciﬁcation — for example, giving their long-
term private key to the adversary. Finally, the protocol rules
describe the actual actions of the participants. The protocol
rules are again divided into two parts, namely Handshake rules
and Communication rules, to capture the maTLS handshake
protocol and the maTLS record protocol, respectively.
B. Security Claims
With the protocol rules, we modeled the core security goals
of maTLS. We formally describe our security goals in the form
of the ﬁrst order logic formulae, examples of which are shown
in Table III. Note that the goals shown in the table are slight
simpliﬁcations of those in the full analysis (for example, they
must be taken modulo corruption).
The results of the analysis show that the maTLS protocol
satisﬁes the core security goals.6
VII. EVALUATION
A. Experiment Settings
To demonstrate the feasibility of the maTLS protocol, we
implemented it using the OpenSSL library. Our testbed consists
(a) HTTP Load Time
(b) Data Transfer Time
(c) Integrity Veriﬁcation Time
(d) CPU Processing Time
Fig. 4: Numerical results reveal that maTLS incurs slightly
more delay, ranging from 10.22ms to 32.52ms against mcTLS
and SplitTLS, mainly due to the signature veriﬁcation and key
generation needed in the maTLS handshake. (EA: Explicit
Authentication, SPV: Security Parameter Veriﬁcation, VMC:
Valid Modiﬁcation Checks)
of a client (C), a client-side middlebox (M BC), a server-
side middlebox (M BS), and a server (S)7. The server-side
middlebox and the server are equipped with an Intel Xeon CPU
E5-2676 at 2.40GHz with 1GB memory. We used a virtual
machine with an Intel Core i7 at 2.30GHz and 1GB memory
for the client-side middlebox, and a virtual machine with an
Intel Broadwell CPU at 3.30GHz and 1GB memory for the
client.
During our experiments,
the client and the client-side
middlebox were located on a campus network. We ran tests
with the server (and the server-side middlebox) located at three
different locations: in the same country (intra-country testbed),
in different countries but the same region (intra-region testbed),
and in different continents (inter-region testbed). The round-
trip times between two entities in each scenario are shown in
Table IV.
After establishing an maTLS session, the client requests an
HTML page of 1KB with an HTTP GET message, respectively,
terminating the connection after completing the download of
the corresponding HTTP response. Each plotted value is the
average of 100 measurements. We compare the performance
overhead of maTLS with those of SplitTLS and mcTLS [30],
the latter of which is the original protocol of TLMSP.
We used an ECDH key exchange algorithm over the
the
secp256r1 elliptic curve for
SHA256 function for the hash algorithm, and a SHA256-based
ECDSA for the signature algorithm.
the accountability keys,
6The full Tamarin implementation can be found at our public repository at
https://github.com/middlebox-aware-tls/matls-tamarin.
7The source code of the library as well as the test applications are available
at https://github.com/middlebox-aware-tls/matls-implementation
11
Intra-countryIntra-regionInter-regiona02004006008001000Time (ms)maTLSmcTLSSplitTLSIntra-countryIntra-regionInter-regiona0100200300Time (ms)maTLSmcTLSSplitTLS2468Number of middleboxes0.00.10.20.30.40.50.6Time (ms)SPVEAVMC02468Number of middleboxes  0  2  4  6  8Time (ms)Testbed
Intra-country
Intra-region
Inter-region
C-M BC M BC-M BS M BS − S
0.551ms
1.136ms
1.136ms
0.537ms
0.610ms
1.136ms
4.944ms
35.896ms
192.818ms
TABLE IV: Networking Settings. The round-trip times
between two points in each scenario are shown, where C and
M BC are in the same campus, and M BS and S are in the
same data center.
B. HTTPS Page Load Time
We ﬁrst evaluate the time elapsed to fetch an 1KB ﬁle from
the server in the maTLS protocol, which is compared with the
SplitTLS and mcTLS protocols. Figure 4a summarizes the time
taken from starting a TCP handshake to ﬁnishing the download
of the content. We observe that the maTLS protocol introduces
a slight delay (10.22ms – 32.52ms) compared to SplitTLS and
mcTLS in the general case.
We believe this is mainly due to the message order
dependency in maTLS. Unlike SplitTLS, where each TLS
segment is established completely independently, the maTLS
segments are established piecewise sequentially as some sig-
naling messages (e.g., ClientHello, ServerHello,
ServerCertificate) must be exchanged between the
client and the server through the middleboxes in sequence.
Thus, in maTLS, each middlebox needs to wait until these
messages arrive while performing the handshake.
To quantify the overhead that the maTLS record protocol
requires, Figure 4b shows the data transfer time, which starts
at the client sending an HTTP GET (a single packet) and
ends at the client receiving an HTTP RESPONSE (a single
packet). Interestingly, we notice that the delay time of the
maTLS record protocol is similar to those of the SplitTLS
and mcTLS record protocols. For example, in the intra-region
testbed scenario, the data transfer time is 39.92ms, 39.90ms,
and 41.28ms in maTLS, SplitTLS, and mcTLS, respectively.
From Figures 4a and 4b, we conclude that the maTLS
overhead is mainly due to the setup of an maTLS session,
which implies that once the session is established, maTLS
provides similar performance to the others while preserving
all security merits that we have discussed.
C. Scalability of Three Audit Mechanisms
Next, we evaluate the scalability of the maTLS audit
mechanisms: Explicit Authentication (EA), Security Parameter
Veriﬁcation (SPV), and Valid Modiﬁcation Checks (VMC).
Note that the number of required HMAC operations increases
in proportion to the number of the middleboxes. Thus we
now wish to check the scalability of the HMAC operations
in maTLS for its feasibility. To this end, we increase the
number of middleboxes in the same data center to quantify
the computational overhead due to the audit mechanisms by
measuring the validation time for each arriving packet (Figure
4c).
We observe that the overhead of the three audit mechanisms
is almost negligible. For example, it takes 0.195ms to verify
security parameter blocks, 0.203ms to validate certiﬁcates, and
0.013ms to check the modiﬁcation record for two middleboxes.
Also, we observe that the overhead increases linearly with
the number of middleboxes; for each incoming packet, only
an extra 0.045ms and 0.063ms overhead is required for the
explicit authentication checks and security parameter veriﬁca-
tion, respectively. It is worth noting that the delay of explicit
authentication is mainly due to certiﬁcate validation, which
accounts for around 95% of the delay. Likewise, signature
veriﬁcation accounts for more than 91% of the delay of
the security parameter veriﬁcation. The overhead for valid
modiﬁcation checks is marginal as it uses HMAC operations to
verify the ML, which turns out to be only 0.026ms, even with
8 middleboxes. We believe that the auditing mechanisms of
maTLS can achieve their goals without incurring a substantial
delay.
D. CPU Processing Time
Next, we evaluate the CPU processing time for an maTLS
handshake as the number of middleboxes increases. We place
all the middleboxes and the endpoints in the same data center
to minimize the impact of networking delay. As shown in Fig-
ure 4d, the CPU processing time for the maTLS handshake also
linearly increases by on average 0.398ms for each middlebox.
This increment is mainly due to the multiplication operations
required to add an ECDH shared secret, and generating ac-
countability keys using a PRF, which account for 0.367ms
(92.2% of the increment) and 0.016ms (4.0% of the increment),
respectively.
VIII. DISCUSSIONS
A. Incremental Deployment
The maTLS protocol can be executed even if not all the
entities support it. In other words, a session can have both
maTLS segments and TLS segments at the same time. For
example, when a client and two middleboxes support maTLS
and the server does not, maTLS segments can be set up
between the client and the two middleboxes. In this case, the
middlebox farthest from the client in the maTLS segments
establishes a standard TLS segment with the server. Following
the maTLS protocol, all the middleboxes in the maTLS seg-
ments send their own certiﬁcate to the client. Therefore, the
client will receive a bundle of middlebox certiﬁcates, but not
the certiﬁcate including the server’s name. This will cause the
client to issue a warning message.
To resolve the problem, we require that the farthest middle-
box in the maTLS segments should send not only its middlebox
certiﬁcate but also the received certiﬁcate from the standard
TLS segment. This allows the client to receive the server’s
certiﬁcate and thus validate it. Unfortunately, this requires that
the client must trust that the middlebox sent the certiﬁcate
that it received, and correctly validated the server certiﬁcate
in the standard TLS handshake. However, the client can still
authenticate the participating middleboxes and verify their
security parameters, which is not be supported by the current
practice.
B. Abbreviated Handshake
maTLS supports abbreviated handshakes using session
IDs/tickets in TLS 1.2, or pre-shared keys in TLS 1.3, which
need not extend the handshake. A client can resume an maTLS
12
session using the abbreviated handshake protocol. The mid-
dlebox (closest to the server) can resume its maTLS segment
with the server, as it knows the session ID, pre-shared key,
or session ticket. The middlebox, however, does not have the
accountability key shared between the client and the server;
thus, the server is able to detect incorrect session resumptions
by verifying the modiﬁcation log if an adversary attempts to
impersonate the middlebox.
C. Mutual Authentication
Like the standard TLS protocol, maTLS also supports
mutual authentication by sending a CertificateRequest
message to the client during the TLS handshake. In this
case, the client also sends her certiﬁcate upon receipt of the
CertificateRequest message from the server. The mid-
dleboxes can simply append their certiﬁcates to her certiﬁcates
while being forwarded to the server so that both the client
and the server authenticate each other’s certiﬁcates. After that,
the client and the server each send a ExtendedFinished
message to verify the possession of their private keys.
D. TLS 1.3 Compatibility
TLS 1.3 [12] has been recently approved and is expected to
be widely deployed. The maTLS protocol can support TLS 1.3
by adding a ExtendedFinished message after a server’s
Finished message in the server-only authentication mode.
The only difference is that TLS 1.2 requires two round-trips
for session establishment, while TLS 1.3 only requires one and
a half round trips. Unfortunately, this means that individual
segments running TLS 1.2 will negate some of the speed-up
beneﬁts from TLS 1.3.
IX. RELATED WORK
A. Discussion on Middleboxes
Studies on the SplitTLS practice: Frack et al. [4] showed
that content providers sharing a private key with a hosting
provider (such as CDNs) may signiﬁcantly affect the security
of the HTTPS ecosystem; an attacker who compromises ten
hosting providers is estimated to obtain the control of 45% of
all content providers. Lin-Shung et al. [17] demonstrated that
there were a large number of forged certiﬁcates in the wild,
most of which were generated by client-side middleboxes.
They also showed that these certiﬁcates can be used to trick
victims, who had installed the root certiﬁcates of the forged
certiﬁcates.
Debates on Explicit middleboxes: There have been two
IETF drafts that highlight the problems with HTTPS middle-
boxes and propose new design principles. Both Nottingham
[32] and Narayanan [27] emphasize that endpoints should be
aware of middleboxes, and that their modiﬁcations on the
messages should be detectable.
B. Proposals
TLS extensions: Several proposals have been made to
extend the TLS protocol to support middleboxes.
(1) Explicit Trusted Proxy [22]: This work
proposes that middleboxes should have their own certiﬁcates
13
for authentication. Each middlebox certiﬁcate should be an EV
certiﬁcate with proxyAuthentication value in the Extended
Key Usage ﬁeld. This makes middleboxes visible with their
certiﬁcates; however, endpoints can only authenticate the im-
mediately adjacent middleboxes, and cannot get any informa-
tion about the other middleboxes.
(2) TLS Keyshare extension [31]: In this proto-
col, the client initiates a TLS handshake by sending infor-
mation about authorized middleboxes to the server. During
the handshake, the middleboxes inspect the TLS handshake
message and notify the endpoints of any unsupported ci-
phersuites. After the session is established by the endpoints,
the authorized middleboxes receive the session key from the
endpoints, allowing them to perform their functionality. Since
the same key is shared across all the segments, the keystream
is reused, which weakens overall security. Furthermore, this
work does not consider modiﬁcation-related properties.
(3) TLS ProxyInfo extension [45]: Each split
segment is separately established, as in the maTLS protocol.
All
the middleboxes pass their certiﬁcates and negotiated
security parameters with their signatures to the endpoints,
who can authenticate all the middleboxes and conﬁrm security
parameters. However,
the endpoints must
blindly trust the information about each segment from each
middlebox. Furthermore, data source authentication, modiﬁca-
tion accountability, and path integrity are not considered.
in this protocol,
(4) Multi-context TLS (mcTLS) [30]: mcTLS
aims to restrict the behavior of middleboxes by applying the
least privilege principle. Endpoints generate two MAC keys
for middleboxes: read and write. If a middlebox is authorized
to read and write, it obtains both MAC keys. If it can only
read the TLS trafﬁc, it gets only the read MAC key. All the