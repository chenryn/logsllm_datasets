In this section, we ﬁrst clarify our threat model and then
present the buffered packet hijacking vulnerability in SDN.
A. Threat Model
We assume that the SDN controller, SDN switches, and
control channels are trusted and well protected from attackers.
However, since SDN applications installed on the controller
may come from untrusted third-party SDN APP Store [6], they
are untrusted and may be malicious. Previous studies have
shown that malicious applications may be installed on con-
trollers in many ways [1], [11], [18], [19], [7], e.g., exploiting
particular vulnerabilities of controllers [19], repackaging and
redistributing applications by phishing [18], and submitting
3
malicious or buggy applications to a controller’s repository that
will be incorporated into commercial controllers [1]. Though
network and security practitioners have made great efforts to
verify the security of applications before deploying them by
checking their source code, it is difﬁcult to fully understand
the behavior of compiled applications without getting access to
the source code. For example, the ONOS controller [20] can
load compiled applications. Therefore, SDN controllers may
have potential malicious applications running on them.
We assume that a malicious application is running on the
controller. The application has the permission on listening
PACKET_IN messages and installing ﬂow rules, which is
one basic requirement for many applications to run on the
controller. We perform a study, and Table I shows the number
and ratio of bundled applications with that permission on dif-
ferent controllers. The attacker aims to leverage the malicious
application to disrupt all three SDN layers, i.e., application
layer, control layer, and data plane layer.
We argue that a malicious application with that permission
cannot directly install malicious ﬂow rules to manipulate or
drop packets in the SDN data plane. Otherwise, malicious
rules will introduce conﬂicts with benign rules enforced by
other SDN applications. Consequently, a number of effective
defense systems, such as FortNOX[9], SE-FloodLight[10],
VeﬁFlow[15], and SDNShield[7], can detect and prevent such
permission abuse by checking rule conﬂicts between different
applications. For example, a malicious application may install
a ﬂow rule with a high priority to drop all packets matching
the 10.0.0.1 IP address, but the defense systems can detect a
conﬂict when a benign routing application generates another
ﬂow rule that matches and forwards the packets with the same
IP. Instead, our attacks install mismatched ﬂow rules with
crafted buffer IDs to hijack packets, which introduces no rule
conﬂicts with other applications and thus bypasses existing
defense systems.
Moreover, compared to the threat model in CAP attacks [1]
where a malicious application manipulates shared data objects
in controllers to poison other applications, our threat model re-
quires a malicious application to have the ﬂow rule installation
permission. However, our attacks allow a malicious application
to poison other applications even under the presence of the
defense named ProvSDN [1] that can prevent CAP attacks.
Furthermore, our attacks can disrupt not only the application
layer but also the control
layer and the data plane layer.
Particularly, our attacks can bypass all the previous defense
systems [12], [1], [10], [9], [15], [7], [16], [21] that prevent
various attacks from disrupting different SDN layers. We detail
our attacks and the mechanisms of bypassing existing defense
systems in Section IV.
PACKET_INNotifierPacketServiceFlow RuleServiceOther CoreServicesSDN Controller                                                     SDN Switch...Processing ChainAPP 1APP 2APP 3APP 4APP n...Processing ChainAPP 1APP 2APP 3APP 4APP n...Processing ChainAPP 1APP 2APP 3APP 4...APP nPACKET_INPACKET_OUTFLOW_MODBufferIDPacket12......m   (0)(1)(2)(3)action X once the switch receives the FLOW_MOD message.
Therefore, the buffered packet is processed by the malicious
application before APP 4 installs ﬂow rules to process it. The
malicious application can hijack buffered packets of any new
ﬂow, as long as it is in the front of the application that is
responsible for the new ﬂow in the processing chain.
Inter-chain Hijacking. Figure 2b shows the inter-chain hi-
jacking. Each processing chain simultaneously receives a copy
of PACKET_IN message once a new ﬂow arrives. Thus, a
malicious application can hijack a buffered packet for which
an application in another processing chain is responsible, using
a similar method in Figure 2a, i.e., installing ﬂow rules with a
FLOW_MOD message that speciﬁes the buffer ID of the packet.
Different from the intra-chain hijacking, successfully hijacking
buffered packets does not require that the malicious application
is in the front of the benign application. In Figure 2b, it is
possible that APP 3 in Processing Chain I hijacks buffered
packets that should be processed by APP 2 in Processing
Chain II since different applications consume different time
to process and transfer a PACKET_IN message to another
application. APP 3 in Processing Chain I may receive the
PACKET_IN message before APP 2 in Processing Chain II.
In some cases, APP 3 in Processing Chain I may fail to hijack
buffered packets since another benign application has already
processed the packets. Successfully hijacking buffered packets
depends on the positions of the malicious application and the
time for applications to process PACKET_IN messages. We
will give a comprehensive theoretical analysis in Section V
and experimental analysis in Section VI-B.
TABLE II: SDN controllers with buffered packet hijacking
vulnerability.
Controller
Latest Version
Vulnerable
OpenDaylight
ONOS
Floodlight
Neon
√
v2.1.0-rc1
√
v1.2
√
RYU
v4.31
√
POX
eel
√
We have tested the vulnerability of buffered packet hijack-
ing on ﬁve mainstream SDN controllers including OpenDay-
light, ONOS, Floodlight, RYU, and POX. Table II shows that
all their newest versions have the vulnerability. Through our
investigation on the reason for all mainstream SDN controllers
to be vulnerable, we ﬁnd the following sentence on page
111 of OpenFlow Switch Speciﬁcation Version 1.5.1 (Protocol
version 0x06) [22]: “A ﬂow mod that includes a valid buffer id
removes the corresponding packet from the buffer and pro-
cesses it through the entire OpenFlow pipeline after the ﬂow
is inserted, starting at the ﬁrst ﬂow table.” Obviously, it only
requires matching the buffer ID, but not the match ﬁelds.
IV. ATTACKS BY HIJACKING BUFFERED PACKETS
In this section, we design four attacks that can disrupt all
layers of SDN by hijacking buffered packets. Particularly, we
show how these attacks can bypass existing defense systems.
A. Cross-App Poisoning
Attack Mechanism. Figure 3 shows the cross-app poisoning
attack that targets at the application layer of SDN. There
are two applications concurrently running on the controller,
i.e., a malicious application named as APP X and a benign
application named as APP Y. When the host h1 sends a new
(a) Intra-chain Hijacking
(b) Inter-chain Hijacking
Fig. 2: Buffered Packet Hijacking in Processing Chains.
B. Buffered Packet Hijacking Vulnerability
A malicious application can hijack buffered packets to
launch effective attacks that signiﬁcantly disrupt all layers of
SDN and bypass existing defense systems. Figure 2 shows the
main idea of buffered packet hijacking in processing chains.
For simplicity, we do not show the core SDN services of
controllers in the ﬁgure. There are two types of buffered packet
hijacking: intra-chain and inter-chain.
Intra-chain Hijacking. Figure 2a shows the intra-chain hi-
jacking. A PACKET_IN message is dispatched to a processing
chain since a new ﬂow arrives at an SDN switch. As we
mentioned before,
the PACKET_IN message contains the
headers and buffer ID of the ﬁrst packet in the new ﬂow. In
the ﬁgure, the IP destination address of the packet headers is
10.0.0.2 and the buffer ID is 2. Normally, APP 4 is responsible
for routing this ﬂow. When the PACKET_IN message is
transferred to the application, it installs a ﬂow rule in the
switch with a FLOW_MOD message. The message contains a
match ﬁeld speciﬁed as 10.0.0.2, a buffer ID speciﬁed as 2,
and an action speciﬁed as Y. Thus, the new ﬂow matches the
installed ﬂow rule and is processed according to the action Y.
At the same time, the buffered packet with the buffer ID of 2
is released and processed according to the action.
Now suppose APP 3 is a malicious application that aims
to disrupt SDN by hijacking buffered packets. Before the
PACKET_IN message is transferred to APP 4, the malicious
application can pretend to add or update ﬂow rules for which
it is responsible. It speciﬁes the match ﬁeld as 1.1.1.1, the
buffer ID as 2, and the action as X in the FLOW_MOD message.
Though the match ﬁeld (1.1.1.1) and the header (10.0.0.2) of
the packet with the buffer ID of 2 do not match, the buffered
packet is still be released and processed according to the
4
Processing Chain IAPP 1APP 2APP 3APP 4...APP nPACKET_INBufferIDPacket12......mSDN SwitchFlow Rule Spacepkt_hdr: 10.0.0.2buf_id: 2FLOW_MODmatch: 10.0.0.2buf_id: 2action: YFLOW_MODmatch: 1.1.1.1buf_id: 2action: XBufferIDPacket12......mSDN SwitchFlow Rule SpaceProcessing Chain 1APP 1APP 2APP 3APP 4...APP nProcessing Chain IIAPP 1APP 2APP 3APP 4...APP npkt_hdr: 10.0.0.2buf_id: 2PACKET_INFLOW_MODmatch: 1.1.1.1buf_id: 2action: XFLOW_MODmatch: 10.0.0.2buf_id: 2action: YFig. 3: Cross-APP Poisoning. A malicious application modiﬁes
and resends a buffered packet to poison other applications.
Fig. 4: Network Security Policy Bypass. A malicious applica-
tion redirects buffered packets to another switch port.
ﬂow to the host h2, the ﬁrst packet of the ﬂow (red packet in
the ﬁgure) is temporarily buffered in the switch S1. Meanwhile,
a PACKET_IN message is sent
to the controller. APP Y
is responsible for analyzing the reported packet and making
decisions for the new ﬂow. For example, it may compute
routing paths and install ﬂow rules for the new ﬂow.
However, when APP X receives the PACKET_IN message
before APP Y, APP X can leverage the FLOW_MOD message
to hijack the buffered packet of the new ﬂow. Speciﬁcally,
APP X pretends to update or install ﬂow rules for which it
is responsible with the FLOW_MOD message. In the message,
the match ﬁeld is speciﬁed as the blue ﬂow, the buffer ID is
speciﬁed as the ID of the buffered red packet, and the action
is speciﬁed as set-field and output:controller. In
this way, APP X can manipulate the header of the buffered
packet and resend it to the controller with a PACKET_IN
message. Once the message arrives at APP Y, APP Y can be
poisoned due to the extraction of the falsiﬁed packet header.
Let’s see a real attack case. The codes in Figure 3 are from
the learning switch application in the RYU controller. APP
X changes the source MAC address of the buffered packet
to the MAC address of the host h3 with the set-field
action. Consequently, the last line of the codes in Figure 3
falsely associates the MAC address of h3 with the switch
port connecting to h1. According to the implementation of the
learning switch, the application installs ﬂow rules to forward
ﬂows based on the mappings of MAC addresses and switch
ports. Thus, any ﬂows with a destination address to h3 are
mistakenly directed to h1, causing a Denial-of-Service (DoS)
attack. Though this example only shows the poisoning for the
learning switch application, any SDN application requiring
analyzing PACKET_IN messages is potentially poisoned by
the malicious application.
Defense Evasion. Previous work has systematically studied
cross-app poisoning (CAP) and provided a defense system
called ProvSDN [1]. In the previous work, a malicious ap-
plication manipulates shared data objects in the control plane
to trick another privileged application into taking actions on
its behalf. The attack violates information ﬂow control (IFC)
policies due to the modiﬁcation on shared data objects in
the controller. Thus, by tracking the history of how shared
data objects are generated and modiﬁed, ProvSDN can detect
IFC policy violations and prevent CAP attacks. However, our
attacking method is different. Our attack modiﬁes buffered
packets in the data plane and makes them resend to controllers.
Since our attack does not leverage shared data objects in the
control plane to poison other applications, ProvSDN fails to
defeat our attack.
B. Network Security Policy Bypass
Attack Mechanism. This attack targets at the data plane layer
of SDN. It redirects buffered packets to a switch port
to
bypass security checkpoints. As shown in Figure 4, a ﬁrewall
is located between the switches S1 and S3. It checks each
ﬂow that crosses through the two switches according to its
policies. The host h1 is an untrusted host. When h1 sends a
ﬂow to h2, S1 buffers the ﬁrst packet of the ﬂow and reports
a PACKET_IN message to the controller. Typically, APP Y
installs a ﬂow rule with a FLOW_MOD message to forward the
ﬂow to the switch port that connects to the ﬁrewall. According
to the ﬁrewall policies indicating that h1 cannot communicate
with h2, the ﬂow is blocked.
Nevertheless, a malicious application can hijack buffered
packets to bypass the ﬁrewall for the ﬁrst packet of the ﬂow.
When the malicious application, i.e., APP X in Figure 4,
receives the PACKET_IN message before the APP Y, it sends
a FLOW_MOD message to add or update a ﬂow rule in switches.
The match ﬁeld of the message is the packet header of another
ﬂow that should be forwarded from S1 to S2, e.g., a ﬂow from
a trusted host connecting to S1. The action of the message is
to forward the matching ﬂow to S2. However, the buffer ID
of the message is speciﬁed as the buffer ID of the buffered
packet of the ﬂow from h1. As a result, the ﬁrst packet of the
ﬂow from h1 is released and forwarded to S2, which bypasses
the inspection of the ﬁrewall. Here, the malicious application
cannot install a ﬂow rule matching the ﬂow from h1 to directly
forward all packets to S2 due to the security protection of
existing defense systems [15], [9], [10]. In the attack, the
following packets of the ﬂow are still forwarded to the ﬁrewall
and blocked due to the following ﬂow rules installed by APP
Y. It seems that the host h1 can only leverage the ﬁrst packet to
transmit information to some host and bypass the ﬁrewall for
one time. However, a ﬂow rule in SDN switches will disappear
after some time according to timeout settings [22]. After the
ﬂow rule disappears, h1 can send a ﬂow again and leverage
the ﬁrst packet to continue transmitting remaining information.
The previous work [23] has shown how to infer the expiration
time of ﬂow rules, which can be leveraged by h1.
Defense Evasion. To prevent network security policy bypass
and potential rule conﬂicts between applications, several de-
fense systems [10], [9], [15] have been provided. However,
they cannot prevent network security policy bypass that is
5
APP Y  PACKET_IN  FLOW_MODAPP X  PACKET_INmatch: bluebuf_id: 2action: set-field, output:controllerAPP X: FLOW_MOD...buf_id:2h1h2h3S1...APP Y  FLOW_MODAPP X  FLOW_MODmatch: bluebuf_id: 2action: output:S2APP X: FLOW_MOD...buf_id:2h1S1S2S3h2match: redbuf_id: 2action: output:FirewallAPP Y: FLOW_MOD...Fig. 5: TCP Three-Way Handshake Disruption. A malicious
application drops a buffered TCP SYN packet.
Fig. 6: Control Trafﬁc Ampliﬁcation. A malicious application
copies massive buffered packets to the controller.
launched by hijacking buffered packets. Existing defense sys-
tems maintain global information of all installed ﬂow rules
and network security policies. Once an application installs or
updates a ﬂow rule in switches, the defense systems check
the match ﬁelds and actions of the ﬂow rule with advanced
algorithms to see if there are conﬂicts with other rules and
security policies. However, in our attack, the ﬂow rule installed
by the malicious application does not conﬂict with any rules
or security policies. It is because the match ﬁeld of the ﬂow
rule is not speciﬁed as the ﬂow from the untrusted host h1.
The malicious application only uses the buffer ID of the
FLOW_MOD message to hijack the buffered packet of the ﬂow
from h1. We note that none of the existing defense systems
check the buffer IDs. A defense named SDNShield [7] adopts
a different method to prevent rule conﬂicts. It assigns ﬁne-
grained permission of rule installation for applications. For