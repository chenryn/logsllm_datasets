528
8Chapter 12 Languages
main+2355
_1ibe_atart_na.in+240
0xa9de258d4c544155
]: 30
The stack trace is now visible. It is printed top-down from leaf to root. Put differently, top-down is
also child to parent to grandparent and so on.
This example shows the shell reading from STDIN via readline() functions, in a read_command0
code path. It is the bash shellreading input.
the stack has now walked into a system library, libc, and that has been compiled without the
The bottom of the stack is another bogus address after __libc_start_main. The problem is that
frame pointer.
See Section 2.4 in Chapter 2 tor more about how BPF walks stacks and future work
12.2.3 C Function Tracing
Functions can be traced using kprobes and kretprobes for kernel functions, and uprobes and uret
probes for user-level functions. These technologies were introduced in Chapter 2, and Chapter 5
covered how to use them from bpftrace. There are many examples of their use in this book
As one example for this section: the following traces the readlline() function, which is usually
the function signature:
included in the bash shell. Since this is user-level software, it can be traced with uprobes. Here is
It takes a string argument, the prompt, and also returns a string. Using a uprobe to trace the
prompt argument, which is available as the arg0 built-in:
 bpftrace -e 'uprobe: /bin/bash:zeadline ( printf (“zeadline: Is\n*, str(arg0) ) : 1 
Attach.ing 1 probe..
readline: bgregg:~/Bulld/bp ftzace/to1a>
readline: bgregg:1 /Bui1d/bp ftrace/ too1 s>
This showed the prompt (SPS1) printed by a shell in another window.
Now tracing the return value and showing it as a string, using a uretprobe:
str (retval)1 : 1'
Attaching 1 probe...
readline: date
readline: echo he11o readez
This showed the input I was typing in another window.
---
## Page 566
12.2C529
Apart from the main binary, shared libraries can also be traced by replacing the */bin/bash" path
in the probe with the path to the library. Some Linux distributionsa build bash so that readline
/bin/bash. They may be traced using the path to libreadline, for example:
is called via libreadline, and the above one-liners will fail as the readline() symbol is not in
+ bpft.race -e 'uretprobe:/usr/lib/libreadline so 8:readl ine ↑
pxinte (*readlLne: sa.n*, str (xetva1)1 = )*
12.2.4C Function Offset Tracing
than just its start and return points. Apart from greater visibility to a function’s code flow, by
There may be times when you would like to trace an arbitrary offset within a function rather
inspecting registers you could also determine the contents of local variables.
uprobes and kprobes support tracing at arbitrary offsets, as does BCC’s attach_uprobe()
and attach_kprobe() from its Python APl. However, this capability is not yet exposed via
BCC tools such as trace(8) and funccount(8), nor is it available yet in bpftrace. It should be
straightforward to add to these tools. The difficulty will be adding it safely. uprobes does
not check for instruction alignment, so tracing the wrong address (e-g., midway through a
multi-byte instruction) will corrupt the instructions in the target program, causing it to fail
in unpredictable ways. Other tracers, such as perf(1), use debuginfo to check for instruction
alignment.
12.2.5C USDT
USDT probes can be added to C programs to provide static instrumentation: a reliable API for
tracing tools to use. Some programs and libraries already provide USDT probes, for example,
listing libc USDT probes using bpftrace:
usdt:/11b/x85_64=11nux=gna/11bc=2,27,so:11bc:setjnp
usdt:/1ib/x86_641inuxgnu/1ibc2. 27, so:1ibc:1ong:mp
usdt:/1ib/x85_6411nux=gnu/1ibc=2 27,so:1ibc:1ongJnp_taxget
usdt:/lib/x86_641inux=gnu/1ibc=2.27,so:1ibcimemory_na1lopt_arena_max
usdt:/1ib/x86_64-11nux-gnu/1ibc-2,.27,so:1ibc:menory_na11opt_arena_test
usdit:/1ib/x86_641inux-gnu/1ibc2. 27,so:1ibc:memory_tunable_tcache_nax_bytes
There are different libraries that provide USDT instrumentation, including systemtap-sdt-dev and
Z saqdeu aas due8ord  e 0 saqoad 1n Suppe po aduexa ue og io s,xoqaoe
5 For example, Arch Linux,
---
## Page 567
530
0Chapter 12 Languages
12.2.6 C One-Liners
These sections show BCC and bpftrace one-liners. Where posible, the same one-liner is imple
mented using both BCC and bpftrace.
BCC
Count kernel function calls starting with *attach":
Eunccount 'attach**
Count function calls starting with *a° from a binary (e.g., /bin/bash):
Eunccount */bin/bash:a**
Count function callstarting with *a* from a library (e.g.,libc.so.6):
funccount */1ib/x86_64-1inux-gnu/libc.so.6:a**
Trace a function and its argument (e.g., bash readline():
trace */bin/bash:resdline "$s", srgl'
Trace a function and its return value (e.g., bash readline():
trace *r:/bin/bash:readline *%s*, retval*
Trace a library function and its argument (e.g., libc fopen0)
trace */lib/x86_641inux=gnu/libc.so,6:fopen *$s", arg1*
Count a library function return value (e.g., libc fopen():
argdist -C 'r:/1ib/x86_64-1inux=gnu/libc.so.6:fopen(1:int:$retval 
Count a user-level stack trace on a function (e.g., bash readlline0):
stackcount -U */bin/bash:readline'
Sample user stacks at 49 Hertz:
profile -0 -F 49
bpftrace
Count kernel function calls starting with *attach":
Count function calls starting with *a° from a binary (e.g. /bin/bash):
11)qunco - [aqoad]g ]e1qzeq/utq/raqoxdn, aaoezsgdg
Count function calls starting with *a° from a library (e.g., libc.so.6):
((1uno2 = [aqoxd] e /x919*os*oqTT/nubxnutT=99gx/9Tt/1n, aaoe3dg
Trace a function and its argument (e.g., bash readline():
bpftrace -e *u:/bin/bash:readline  printf (*prompt: @s`n*, strlarg0)1= *
---
## Page 568
12.3Java 531
Trace a function and its return value (e.g., bash readline():
(r41tessex)xas *guisy =peexg1xautxd 1outtpeexrqeeg/ura/:xn, 8- eoexagdg
Trace a library function and its argument (e.g.,libc fopen0):
bpftrace -a *u:/11b/x86_64-1inux-gnu/11be,so.6:fopen 4 priatt(*opening: 5s\n°,
str (a.rg01): )*
Count a library function return value (e-g., libc fopen():
1) unco = [Teox]e | usdogos sqT/mub=xnuTt-99gx/aTT/1xn, a aoeasgdg
Count a user-level stack trace on a function (e.g., bash readlline0):
1r()unoo =[169t #= prd/ 66:zq:TTgoad, - aoexadq +
Attaching 1 pzobe...
^C
[16936, Vα Periodie Tas]: 1
[16931, Sxeeper thread] : 4
[16989, FreeCo1C1lent:b : 4
[21751, FreeColServer:A] : 7
[2177s, FreeCo1C1lent:b] : 18
e[21780, C2 ConpilerThre] : 20
[16944, AXTXANT] : 22
[16930, C1 ConpilerThre] : 24
[16946, AXT-EventQueue-| : 5]
e [16929, C2 ConpilerThre| : 241
The comm built-in returns the thread (task) name, not the parent process name. This has
the advantage of providing more context for the thread: the above profile shows that the C2
ComplierThread (name truncated) was consuming the most CPU while sampling. But this can
also be confusing, since other tools including top(1) show the parent process name: *java°.9
These thread names can be seen in /proc/PID/task/TID/comm. For example, using grep(1) to print
them with filenames:
grep . /pzoc/16914/task/*/comm
/proc/16914/task/16914/comm:java
[.--]
/proc/16914/task/16959/comm:GC Thresd#7
/proc/16914/task/16963/comm:G1 Conc#1
/proc/16914/task/16964/comm:FreeCo1C1ient:
9 In the future, we may add a bpf_get_current_poe
Pe, which could be used
In addition to the thread name. In bpftrace, this may be exposed ss *pcomm
---
## Page 574
12.3Jav8537
/proc/16914/task/16981/comm:FreeCo1Client:s
/proc/16914/taak/16982/conm:71ne(/ueue