1. Make the original code unreadable after scrambling.
Allow reads only during each fetch operation. Ex-
ceptions for self-references (unavoidable in emulation)
must be allowed. A problem with this approach is that
read, write, and execute rights are granted at a page
granularity, but the ISR has to work at a byte granular-
ity (at least on IA-32). Mixed code/data pages have to
be left readable. Therefore, this solution will be effec-
tive only if full ASLR is in effect, so mixed pages are
not easily locatable. An additional problem of this so-
lution is its efﬁciency, as the extra calls to mprotect
will slow down the warm-up phase even further. This
approach is also difﬁcult to port to hardware, as an
efﬁcient hardware ISR has to work at fetch-level and
can hardly be checking per-page state for each fetch.
Finally, some CPUs, including IA-32 do not support
execute-only pages.
2. Avoid tiled-mode and use OTP instead. If the key is
not reused, plaintext knowledge is useless. However,
OTP requires O(code size) RAM, which might be pro-
hibitive in some situations.
3. Increase the entropy of the tiles. The key to this ap-
proach is to ﬁnd a non-invertible function that allows
the ISR to “personalize” the tiles. This function can
be expensive in space (if we add additional per-page
secrets, for example), or expensive in time (if the func-
tion has to make complex calculations for each fetched
byte). Some of these functions have implicit vulnera-
bilities that require the use of full ASLR on top. How-
ever, it is possible to ﬁnd functions that do not suffer
from this problem. We present one such function be-
low.
In a hardware implementation of RISE, the mask-table
can be dropped completely and replaced with f( ), a
function of the instruction pointer (EIP in IA-32) and a
stored secret (S): f(EIP,S), where f() is a hash or similar
function that must be very secure. f() is deﬁned to be
secure if even if the attacker retrieves a large number of
f(EIPi,S) this will not make it easier to calculate f() for
unknown values of EIP, or to derive the stored secret.
LRW encryption mode [11] may be a suitable alter-
native. Implementing this solution in software would
be prohibitively slow, but if a hardware accelerator can
calculate the secure function at clock speed, the sys-
tem would be immune to key-deriving attacks in most
cases. However, programs that dynamically load and
unload shared objects are an exception, because they
may use a page for a writable object after unloading
scrambled code from it, leading to reuse of key. Such
programs must take care to avoid mapping a page as
writable if it previously contained code. This can be
done using dlopen( ) and dlclose( ), and keep-
ing freed pages mapped for their own future use rather
than unmapping them.
Note that while solutions 2 and 3 do not require a full
ASLR (with relinking), it is still advisable to use it. Any
system that relies on RISE without ASLR (or with a partial
ASLR) is likely to be vulnerable to ret-to-libc attacks, and
as the next attack will demonstrate, ret-to-libc may even be
escalated to code-injection.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:28:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 20064. Attacking the immune system: Chosen-Key
attacks
An attacker could take a different approach by attacking
the diversity mechanism itself. Such attacks, by nature, are
implementation-speciﬁc, but can be highly effective. In the
current implementation of RISE, for example, it is surpris-
ingly simple to disable the protection in OTP mode. The
mask is generated lazily by reading from /dev/urandom,
which is kept open for the life of the process. In the test-case
used, it was always associated with ﬁle-descriptor 4. Given
that RISE starts its life as the ﬁrst shared library to be loaded
for the protected process, it is highly likely that this descrip-
tor would always be the same. Note that ﬁle-descriptors are
shared between RISE and the protected process because of
the memory-space sharing. If the process calls dup2(0,4),
/dev/urandom is replaced with stdin, allowing the attacker
to choose the key for masking the pages (hence the “chosen-
key” label). In particular, if the attacker uses zeros, it can
run any shellcode unchanged as RISE has been effectively
turned off. Appendix C in [20] shows an implentation of
this attack.
Although the attack described is just an example, there
is a richness of structures in RISE (and in any software ISR,
at that) that could potentially be subverted to allow the use
of whatever key the attacker wishes to use. There are two
interesting uses for this class of attacks:
1. Hybrid ret-to-libc plus injection. On RISC platforms,
ret-to-libc attacks are limited by the fact that registers
often do not point to the required strings in memory at
the time of attack, and the attacker seldom has a way
to control their content. However, having the values 0
and 4 in the registers is much more likely than having a
register point to the string "/bin/sh". In such situa-
tion, disabling RISE by a ret-to-dup2() will enable
injection of shellcode that does not require parameters,
thus fully compromising the process.
2. Create a tiny loader when we are only able to acquire
or guess a small number of mask bytes. Incremental-
guessing methods such as the ones described in [18]
can guess mask bytes but at a relatively-high cost per-
byte. Sovarel et al. used a 100-byte loader that was
able to execute code of any size, although they required
that the ISR did not regenerate the mask after each at-
tack (which RISE does). We show that a loader that
disables RISE using dup2() and executes any code,
can be as small as 13 bytes and run any attack code,
unchanged.
This attack demonstrates
the cryptographic
strength of the current implementation of RISE is lim-
ited to 13 bytes, despite using a mask of sizeof(code).
that
It also demonstrates that the current implementation is
vulnerable to hybrid attacks rather than just pure ret-
to-libc ones.
The diversiﬁer (the component responsible for introduc-
ing diversity in RISE) can be disabled by other methods as
well, such as overwriting the mask-table pointer, replacing
the mask with known data. This class of attacks would work
against tiled-mode as well.
4.1. Portability of chosen-key attacks and
possible solutions
Chosen-key attacks are implementation-speciﬁc by na-
ture. The dup2() example probably will not work against
other implementations, but then different software ISR im-
plementations will have other vulnerabilities in this class.
These vulnerabilities demonstrate an important point: fu-
ture RISE and other ISR implementations must be carefully
audited for ways in which the code could affect the diversi-
ﬁer behavior. An attack against the diversiﬁer will compro-
mise the entire system.
Once chosen-key attacks are identiﬁed, it is usually triv-
ial to mitigate them. For example, RISE could fstat( )
to check whether fd 4 is still /dev/urandom before reading
from it, and reopen it if it has been replaced. Mutex may be
required to make it thread-safe. Other diversiﬁer-disabling
attacks can be mitigated in analog ways. The important
point for future implementations is that the protected code
should never be able to affect the behavior of the diversiﬁer.
If mask capture and data structure subversion are no
longer available, it is always necessary to consider a third
possibility: pure guessing (brute-force) attacks. We exam-
ine this class of attacks in the next section.
5. Key-Guessing Attacks through minimal
payloads
This section describes three types of tiny loaders which can
be used as payload for key-guessing or key-leaking attacks.
The purpose of this section is to show the minimum num-
ber of mask bytes that need to be uncovered for successfully
mounting an attack. The presented loaders are speciﬁc to
IA-32, but can be written for RISC processors at a higher
price in mask bytes. All three methods use 2-bytes exe-
cution buffers. As it turns out, any useful shellcode can be
expressed without using instructions longer than 2 bytes, by
converting the code to a stack-machine.
5.1. The 7-byte loader
The ﬁrst loader requires leaking or guessing 7 mask bytes.
The ﬁrst two bytes in the loader are self-modifying and used
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:28:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006for loading code (scrambled by the ﬁrst two mask bytes),
two bytes at a time, from the stack. The other 5 bytes are the
code for loading additional code from the stack and “return-
ing” into it. It uses a single page so it can work against both
tiled and OTP implementations. However, it does not work
against the Valgrind-based RISE because Valgrind breaks
self-modifying code in the instrumentation process.
The 7-byte loader will work on any ISR implementa-
tion that allows modifying code between executions. It has
been veriﬁed to work against a synthetic implementation
that restricts execution to a buffer of 7 bytes but allows self-
modifying code. The code for the loader is shown below:
5d
90
5e
89 75 01
c3
pop %ebp
nop
pop %esi
mov %esi,0x1(%ebp)
ret
The loader expects the stack to start with an address 1
byte before loader. It loads into itself, and executes 2-byte
sequences. The (reversed) stack construction is described
below:
# To "return" to loader:
&loader
# To set ebp:
&loader-1
# Load 1st instruction and restore
loader[2:3]:
1st instruction(2-bytes)+loader[2:3]
# To "return" to the new instruction:
&loader
# Argument (only if 1st inst. is a pop):
[arg]
...
# Load next instruction and restore
loader[2:3]:
Nth instruction(2-bytes)+ldr[2:3]
# To "return" to the new instruction:
&loader
# Arg.
[arg]
(only if Nth inst. is a pop):
This loader requires a stack overﬂow, knowledge of
least 7 mask bytes, and a system that supports
at
self-modifying code.
It has a success probability of
number of mask pages. For example, with a mask of 8192 bytes,
it works with 0.5 probability.
1
5.2. The 4-byte loader
This variant uses the same technique as the 7-byte loader,
and works with a slightly lower probability, but only re-
quires leaking a single 4-byte integer from the mask. The
loader is split into two 4-byte chunks, to be placed in two
consecutive pages. Each chunk uses RET to return to the
other chunk:
First chunk:
5d
pop %ebp
90
nop
5e
pop %esi
c3
ret
Second chunk:
89 75 01 mov %esi,0x1(%ebp)
c3
ret
The chunks get executed in the same offset of two
different pages, so they should be 4K apart. As before,
the loader expects the stack to start with an address 1 byte
before loader.
It loads into itself, and executes 2-byte
instructions. The (reversed) stack should be constructed as
follows:
& restore chunk1[2:3]
# to "return" to loader:
&chunk1
# To set ebp:
&chunk1-1
# Load 1st inst.
1st instruction(2-bytes)+chunk1[2:3]
# To "return" to the second phase:
&chunk2
# To "return" to the new instruction
&chunk1
# Arg.
[arg]
...
# Load next inst.
Nth instruction(2-bytes)+chunk1[2:3]
# To "return" to the second phase:
&chunk2
# To return to the new instruction:
&chunk1
# Arg.
[arg]
(only if 1st inst.
(only if Nth inst.
is a pop):