### 云环境性能诊断系统 (CloudPD) 架构与功能

#### A. 监控引擎
CloudPD 的监控引擎从各个虚拟机 (VM) 和物理服务器收集测量数据。这些数据包括基本的资源指标（如 CPU 和内存使用情况）、受影响的操作上下文参数（如上下文切换和缓存未命中）、主机操作上下文参数以及应用程序性能指标（如延迟和吞吐量）。我们使用 Linux `sar` 工具来收集 VM 级别的系统指标，并利用 VMware `vmkperf` 性能监控工具获取服务器的缓存未命中次数。对于服务器的 CPU 和内存使用情况，我们采用 VMware PowerCLI cmdlets 进行采集。

所有来自 VM 和服务器的数据被集中到一个中央 VM 中进行后续处理。数据预处理器模块将原始时间序列数据转换为数据点，以便 CloudPD 对每个间隔内的数据点进行异常分析。我们设置的窗口大小为 10，采样间隔为 2 秒，时间间隔长度为 15 分钟，因此在 15 分钟的时间段内生成的数据点数量为 (15*60)/(10*2) = 45 个。

#### B. 事件生成引擎中的性能模型
我们在事件生成引擎中实现了三种建模技术：隐马尔可夫模型 (HMM)、k-最近邻算法 (kNN) 和 k-均值聚类 [26]。这三种技术都旨在定性或定量地衡量当前测试数据区间与正常行为模型之间的偏差程度。CloudPD 架构支持在事件生成引擎中即插即用地使用任何一种建模技术。由于篇幅限制，这里仅讨论我们在评估中使用的 kNN 技术，而其他两种技术的详细信息请参阅 [27]。

为了描述故障特征，我们采用 XML 格式，从而使 CloudPD 系统能够在专家的帮助下学习并分类新的故障类型。假设每种故障都有其独特的特征签名，这些签名可以通过监控到的指标来表达。在广泛的评估过程中，我们观察到这一假设是成立的。我们基于 Matlab `xmlwrite` 工具实现了一个软件包装器，该包装器提供了两个主要功能：(a) 创建新故障的 XML 特征签名；(b) 将新创建的签名与现有故障签名（存储在数据库中）进行比较。

图 6 展示了一个由专家创建的 VM 调整大小故障的特征签名示例。这些签名通过不同的标签表示不同的上下文，例如 VM 环境、操作系统环境、虚拟化管理程序（包含来自虚拟化管理程序的特殊日志消息）和应用程序环境。只有那些偏离正常行为的指标才会被记录在签名中，并且这些指标以阈值的形式表示，用于匹配时所需的最小相关值差异。例如，计算一对运行相同应用的 VM 之间的 CPU 相关值应至少偏离正常行为下的相关值达到定义的阈值 (CPU-corr.-diff)，才能匹配错误的 VM 大小调整的签名（类似地，其他标签的相关差异也需要匹配）。这些签名是在没有人工干预的情况下自动生成的。

#### D. 复杂度分析
假设集群中执行同一应用的 VM 数量为 N，监控的指标数量为 M，故障类型数量为 F。每个分析区间的 T 表示数据点的数量。以下是 CloudPD 各阶段复杂度的分析：
- 对每个数据点找到最近邻所需时间为 O(T^2)。事件生成引擎使用 kNN 对每个 VM 和每个指标进行计算所需时间为 O(NMT^2)。此过程可以跨 p ≤ N 个线程并行处理，从而将时间减少至 O(NMT^2/p)。
- 对于每个生成的事件，问题确定引擎需要对测试区间数据和从近期历史中获得的正常区间数据分别执行 2(M + N) 次相关性计算。因此，总的时间复杂度为 O((M + N)T^2)。
- 假设 M' 是作为独特故障签名的一部分的最大相关性偏差数。通常情况下，这是一个较小的数字。

以上是对 CloudPD 系统架构及其关键组件的功能和复杂度分析的概述。