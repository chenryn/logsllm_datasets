title:Speculative Probing: Hacking Blind in the Spectre Era
author:Enes G&quot;oktas and
Kaveh Razavi and
Georgios Portokalidis and
Herbert Bos and
Cristiano Giuffrida
Speculative Probing: Hacking Blind in the Spectre Era
Georgios Portokalidis
PI:EMAIL
PI:EMAIL
Enes Göktaş
Kaveh Razavi
PI:EMAIL
ETH Zürich
Stevens Institute of Technology
Stevens Institute of Technology
Herbert Bos
PI:EMAIL
Vrije Universiteit Amsterdam
ABSTRACT
To defeat ASLR or more advanced fine-grained and leakage-resistant
code randomization schemes, modern software exploits rely on in-
formation disclosure to locate gadgets inside the victim’s code. In
the absence of such info-leak vulnerabilities, attackers can still hack
blind and derandomize the address space by repeatedly probing the
victim’s memory while observing crash side effects, but doing so
is only feasible for crash-resistant programs. However, high-value
targets such as the Linux kernel are not crash-resistant. Moreover,
the anomalously large number of crashes is often easily detectable.
In this paper, we show that the Spectre era enables an attacker
armed with a single memory corruption vulnerability to hack blind
without triggering any crashes. Using speculative execution for
crash suppression allows the elevation of basic memory write vul-
nerabilities into powerful speculative probing primitives that leak
through microarchitectural side effects. Such primitives can repeat-
edly probe victim memory and break strong randomization schemes
without crashes and bypass all deployed mitigations against Spectre-
like attacks. The key idea behind speculative probing is to break
Spectre mitigations using memory corruption and resurrect Spectre-
style disclosure primitives to mount practical blind software ex-
ploits. To showcase speculative probing, we target the Linux kernel,
a crash-sensitive victim that has so far been out of reach of blind
attacks, mount end-to-end exploits that compromise the system
with just-in-time code reuse and data-only attacks from a single
memory write vulnerability, and bypass strong Spectre and strong
randomization defenses. Our results show that it is crucial to con-
sider synergies between different (Spectre vs. code reuse) threat
models to fully comprehend the attack surface of modern systems.
CCS CONCEPTS
• Security and privacy → Operating systems security.
KEYWORDS
Speculative execution; Code-reuse attacks
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3417289
Cristiano Giuffrida
PI:EMAIL
Vrije Universiteit Amsterdam
ACM Reference Format:
Enes Göktaş, Kaveh Razavi, Georgios Portokalidis, Herbert Bos, and Cris-
tiano Giuffrida. 2020. Speculative Probing: Hacking Blind in the Spectre Era.
In Proceedings of the 2020 ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS ’20), November 9–13, 2020, Virtual Event, USA. ACM,
New York, NY, USA, 15 pages. https://doi.org/10.1145/3372297.3417289
1 INTRODUCTION
Modern systems have a large and complex attack surface deter-
mined by vulnerabilities in software (e.g., buffer overflows) and
hardware (e.g., Spectre). To handle such non-trivial complexity,
security researchers often partition the problem space in a number
of disjoint threat models and devise mitigations to reduce the at-
tack surface accordingly. In this paper, we show that this strategy
ignores important synergies between the threat models, overes-
timating the effectiveness of mitigations and the resulting attack
surface reduction. In particular, we focus on synergies between
code-reuse [11, 74, 78, 80, 87, 91] and Spectre [43, 53, 65] threat
models and present speculative probing primitives as part of the
joint attack surface. For code reuse, our primitives show speculative
execution can reduce the requirements for exploitation (to as little
as a single buffer overflow) even in the face of strong randomization
schemes. For Spectre, our primitives show memory corruption pro-
vides new opportunities to craft Spectre gadgets even in the face of
state-of-the-art mitigations. Combined, these insights enable end-
to-end exploitation using a single memory corruption vulnerability
despite all advanced mitigations in both threat models.
Hacking blind. Memory corruption vulnerabilities are the corner-
stone of modern software exploitation. Nevertheless, a single mem-
ory corruption vulnerability alone is insufficient to mount practical
attacks against today’s systems hardened with widespread ASLR im-
plementations [77], let alone against stronger leakage-resistant vari-
ants based on fine-grained code diversity and execute-only mem-
ory [13, 22, 23, 71]. Absent additional info-leak vulnerabilities that
grant attackers arbitrary memory read primitives, attackers need
to resort to probing primitives to hack blind. Traditionally, such
primitives are used in BROP [10] or similar attacks [7, 30, 54, 79]
to repeatedly probe the victim with controlled memory accesses.
A major limitation of such attacks is that they trigger repeated,
detection-prone crashes. They are also limited to crash-resistant
victims, ruling out high-value targets like the kernel.
Side channels and Spectre. In the Spectre era, speculative execu-
tion vulnerabilities provide the attacker additional options to craft
information disclosure primitives using side channels even in the
absence of additional software vulnerabilities. Nonetheless, while
Spectre [43, 53, 65] and other issues [15, 16, 61, 75, 94] are difficult
to mitigate completely in hardware, the industry has rolled out ef-
fective remedies for most practical attacks, rendering the remaining
attack surface exceedingly hard to exploit. In this paper, we show it
is possible to resurrect Spectre-style speculative control-flow hijack-
ing primitives in a classic software exploitation scenario even on
modern hardened systems. Nevertheless, directly exploiting such
primitives to craft fully fledged Spectre disclosure primitives faces
exactly the same challenges of regular control-flow hijacking in
the presence of arbitrary randomization schemes making the target
gadget location in memory unpredictable.
BlindSide. We present BlindSide, a new exploitation technique at
the convergence point of software and Spectre exploitation. Blind-
Side uses speculative execution to turn a single memory corruption
vulnerability into powerful speculative probing primitives. These
primitives leak information by observing microarchitectural side
effects rather than architectural side effects such as crashes, by-
passing strong leakage-resistant randomization defenses. The key
idea of using a software vulnerability instead of indirect branch
poisoning [53] or injection [90] also allows attackers to bypass all
the deployed mitigations against speculative execution attacks.
Moreover, since crashes and the probe execution in general are
suppressed on speculative paths, speculative probing cannot be
detected by existing BROP-style defenses such as anomalous crash
detection [35] and booby trapping [18, 23]. This allows blind attack-
ers to stealthily probe for gadgets by speculatively executing them.
For instance, we show attackers can use this strategy to blindly
locate speculative arbitrary memory read gadgets. Such gadgets are
already sufficient for code-oblivious code-reuse exploits [73, 91]
and data-only exploits [44]. We further show the speculative nature
of such arbitrary memory read gadgets allows them to directly read
code even in presence of common software-based leakage-resistant
randomization schemes [71], simplifying exploitation.
We demonstrate BlindSide attacks by means of a real-world
buffer overflow vulnerability in the Linux kernel, a high-value,
crash-sensitive target that so far remained well out of reach of
BROP-style attacks. We use our single memory corruption vulnera-
bility in a number of end-to-end kernel exploits, which implement
speculative probing, collectively bypass a variety of randomization
solutions (including the recent FGKASLR [4]) as well as version
entropy (e.g., the Spectre gadget we blindly probe for is present in
all the kernel versions in the past ≈ 5 years), and ultimately obtain
full-system compromise. One of these exploits is the first data-only
software exploit running entirely in speculative execution, leaking
the root password hash from memory. We also consider possible
defenses. As we have not been able to eliminate memory errors de-
spite more than thirty years of research and speculative execution
is essential to the performance of today’s general-purpose CPUs,
we argue that the mitigation of BlindSide attacks is difficult.
The convergence of software exploitation and speculative execu-
tion attacks generalizes both. In particular, while current speculative
execution defenses focus on attacks poisoning microarchitectural
components such as the Branch Target Buffer (BTB) [53], the Return
Stack Buffer (RSB) [65], or data buffers [90] to steer the control flow
speculatively, BlindSide generalizes such control-flow manipulation
to include traditional memory corruption. Similarly, it generalizes
BROP-style exploitation to include microarchitectural side effects
to leak information about memory contents.
Contributions. The contributions of this paper are as follows:
• We investigate how speculative execution amplifies the severity
of common software vulnerabilities such as memory corruption
errors by introducing speculative probing primitives.
• We showcase our primitives in BlindSide attacks, with end-to-end
exploits that start from a simple buffer overflow, speculatively
leak data to derandomize the kernel address space, and ultimately
achieve leakage of sensitive data or arbitrary code execution. The
source code for the exploits and demo videos are available at
https://vusec.net/projects/blindside.
• As an optimization of our attacks, we present the first cross-
domain Spectre attack based on the efficient flush+reload
covert channel through the kernel’s physmap.
• We evaluate BlindSide against a variety of randomization solu-
tions and Spectre mitigations and show that they are not effective.
2 BACKGROUND
2.1 Code-Reuse Attacks
Code-reuse attacks (CRAs) exploit memory corruption vulnerabili-
ties, e.g., out-of-bound (OOB) writes, to control critical data such
as a code pointer later used by the program. At that point, control
flow is hijacked and redirected to a chain of gadgets (i.e., existing
code fragments) that implement malicious payloads [11, 78]. In a
privilege escalation scenario, attackers typically control (or exploit)
an unprivileged application running on the victim machine and
then use CRAs (or variations [44]) against the OS kernel.
To disrupt CRAs, KASLR in modern kernels randomizes the base
address where code, data, and other memory areas are loaded at
boot time. With KASLR, traditional exploitation attempts (usually)
lead to kernel crashes. Successful kernel exploits now require an
additional info-leak vulnerability to leak the base address of code,
data, and even of certain objects storing the code-reuse payload [77].
However, even a limited (e.g., single function pointer) leak can
reveal the location of all the other gadgets in the code.
To mitigate info leaks, efficient fine-grained randomization (FGR)
schemes [4, 34, 57] randomize the code layout by re-ordering func-
tions, basic blocks, or even the assignment of general-purpose reg-
isters [22, 23]. In response, researchers have devised so-called JIT-
ROP attacks [80], which exploit info-leak vulnerabilities, to leak
code, learn its layout, and craft a code-reuse payload just-in-time.
More recent leakage-resistant schemes implement execute-only
memory (XoM) for the code region, using software instrumenta-
tion such as selective paging [6], pointer masking [13], and range
checking [71] or a variety of hardware-based isolation features on
commodity architectures [55], such as Intel MPX [71], MPK [40, 70],
EPT [14, 22, 23, 32], split TLB [33], or ARM’s MMU/MPU built-
ins [19, 59]. While these schemes prevent all reads from code mem-
ory pages, they are still vulnerable to advanced code-reuse attacks
that only rely on code pointers leaked from data memory [73, 91]
and data-only attacks that do not even require code pointer corrup-
tion or control-flow hijacking at all [44].
2.2 “Blind” Code-Reuse Attacks
“Blind” CRAs do not rely on info-leak bugs to divulge the location
of gadgets. Instead, they exploit the target application’s crash resis-
tance to probe its address space. For example, Shacham et al. [79]
use a return-to-libc probing attack against the Apache web server
to disclose the location of libc. Essentially, they repeatedly corrupt
the return address of a vulnerable function, forcing the program to
return to every possible address in search of a libc target, while the
server recovers from crashes by spawning a new process.
Similarly, BROP [10] demonstrated blind return-oriented pro-
gramming (ROP) attacks, i.e., a just-in-time CRA utilizing gadgets
ending in function returns. BROP blindly probes for certain types
of (ROP) gadgets instead of whole functions, by observing signals
like crashes, hangs and other behavior. CROP [30, 54] demonstrates
similar attacks on crash-resistant client programs, using arbitrary
memory read/write probes. However, where such attacks only apply
to crash-resistant code, we target the crash sensitive kernel.
2.3 Cache Attacks
Cache attacks exploit timing side channels over shared CPU caches
to detect victim memory accesses and leak information. Common
variants are flush+reload [98] (f+r) and prime+probe [69] (p+p).
f+r flushes a target shared cache line, waits for the victim to access
it, reloads the cache line, and measures the latency. If the reload