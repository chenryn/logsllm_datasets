# 模数相关攻击
## 暴力分解 N
### 攻击条件
在 N 的比特位数小于 512 的时候，可以采用大整数分解的策略获取 p 和 q。
### JarvisOJ - Easy RSA
这里我们以 "JarvisOJ - Easy RSA" 为例进行介绍，题目如下
> 还记得 veryeasy RSA 吗？是不是不难？那继续来看看这题吧，这题也不难。  
> 已知一段 RSA 加密的信息为：0xdc2eeeb2782c 且已知加密所用的公钥：  
> N=322831561921859 e = 23  
> 请解密出明文，提交时请将数字转化为 ascii 码提交  
> 比如你解出的明文是 0x6162，那么请提交字符串 ab  
> 提交格式：`PCTF{明文字符串}`
可以看出，我们的 N 比较小，这里我们直接使用 factordb 进行分解，可以得到
$$
322831561921859 = 13574881 \times 23781539
$$
进而我们简单编写程序如下
```python
import gmpy2
p = 13574881
q = 23781539
n = p * q
e = 23
c = 0xdc2eeeb2782c
phin = (p - 1) * (q - 1)
d = gmpy2.invert(e, phin)
p = gmpy2.powmod(c, d, n)
tmp = hex(p)
print tmp, tmp[2:].decode('hex')
```
结果如下
```shell
➜  Jarvis OJ-Basic-easyRSA git:(master) ✗ python exp.py
0x33613559 3a5Y
```
## p & q 不当分解 N
### 攻击条件
当 RSA 中 p 和 q 选取不当时，我们也可以进行攻击。
### |p-q| 很大
当 p-q 很大时，一定存在某一个参数较小，这里我们假设为 p，那么我们可以通过穷举的方法对模数进行试除，从而分解模数，得到保密参数与明文信息。基本来说，不怎么可行。
### |p-q| 较小
首先
$$
\frac{(p+q)^2}{4}-n=\frac{(p+q)^2}{4}-pq=\frac{(p-q)^2}{4}
$$
既然 |p-q| 较小，那么 $\frac{(p-q)^2}{4}$ 自然也比较小，进而 $\frac{(p+q)^2}{4}$ 只是比 N 稍微大一点，所以 $\frac{p+q}{2}$ 与 $\sqrt{n}$ 相近。那么我们可以按照如下方法来分解
- 顺序检查 $\sqrt{n}$ 的每一个整数 x，直到找到一个 x 使得 $x^2-n$ 是平方数，记为 $y^2$
- 那么 $x^2-n=y^2$，进而根据平方差公式即可分解 N
### p - 1 光滑
* 光滑数(Smooth number)：指可以分解为小素数乘积的正整数
* 当$p$是$N$的因数，并且$p-1$是光滑数，可以考虑使用`Pollard's p-1`算法来分解$N$
* 根据费马小定理有
    $$若p\nmid a,\ 则a^{p-1}\equiv 1\pmod{p}$$
    则有
    $$a^{t(p-1)}\equiv 1^t \equiv 1\pmod{p}$$
    即
    $$a^{t(p-1)} - 1 = k*p$$
* 根据`Pollard's p-1`算法：
    如果$p$是一个$B-smooth\ number$，那么则存在
    $$M = \prod_{q\le{B}}{q^{\lfloor\log_q{B}\rfloor}}$$
    使得
    $$(p-1)\mid M$$
    成立，则有
    $$\gcd{(a^{M}-1, N)}$$
    如果结果不为$1$或$N$，那么就已成功分解$N$。
    因为我们只关心最后的gcd结果，同时`N`只包含两个素因子，则我们不需要计算$M$，考虑$n=2,3,\dots$，令$M = n!$即可覆盖正确的$M$同时方便计算。
* 在具体计算中，可以代入降幂进行计算
    $$
    a^{n!}\bmod{N}=\begin{cases}
        (a\bmod{N})^2\mod{N}&n=2\\
        (a^{(n-1)!}\bmod{N})^n\mod{N}&n\ge{3}
    \end{cases}$$
* Python代码实现
    ```python
    from gmpy2 import *
    a = 2
    n = 2
    while True:
        a = powmod(a, n, N)
        res = gcd(a-1, N)
        if res != 1 and res != N:
            q = N // res
            d = invert(e, (res-1)*(q-1))
            m = powmod(c, d, N)
            print(m)
            break
        n += 1
    ```
### p + 1 光滑
* 当$p$是$N$的因数，并且$p+1$是光滑数，可以考虑使用`Williams's p+1`算法来分解$N$
* 已知$N$的因数$p$，且$p+1$是一个光滑数
    $$
    p = \left(\prod_{i=1}^k{q_i^{\alpha_i}}\right)+1
    $$
    $q_i$即第$i$个素因数且有$q_i^{\alpha_i}\le B_1$, 找到$\beta_i$使得让$q_i^{\beta_i}\le B_1$且$q_i^{\beta_i+1}> B_1$，然后令
    $$
    R = \prod_{i=1}^k{q_i^{\beta_i}}
    $$
    显然有$p-1\mid R$且当$(N, a) = 1$时有$a^{p-1}\equiv 1 \pmod{p}$，所以有$a^R\equiv 1\pmod{p}$，即
    $$
        p\mid(N, a^R-1)
    $$
* 令$P,Q$为整数，$\alpha,\beta$为方程$x^2-Px+Q=0$的根，定义如下类卢卡斯序列
    $$
    \begin{aligned}
        U_n(P, Q) &= (\alpha^n -\beta^n)/(\alpha - \beta)\\
        V_n(P, Q) &= \alpha^n + \beta^n
    \end{aligned}
    $$
    同样有$\Delta = (\alpha - \beta)^2 = P^2-4Q$，则有
    $$
    \begin{cases}
        U_{n+1} &= PU_n - QU_{n-1}\\
        V_{n+1} &= PV_n - QV_{n-1}
    \end{cases}\tag{2.2}
    $$
    $$
    \begin{cases}
        U_{2n} &= V_nU_n\\
        V_{2n} &= V_n^2 - 2Q^n
    \end{cases}\tag{2.3}
    $$
    $$
    \begin{cases}
        U_{2n-1} &= U_n^2 - QU_{n-1}^2\\
        V_{2n-1} &= V_nV_{n-1} - PQ^{n-1}
    \end{cases}\tag{2.4}
    $$
    $$
    \begin{cases}
        \Delta U_{n} &= PV_n - 2QV_{n-1}\\
        V_{n} &= PU_n - 2QU_{n-1}
    \end{cases}\tag{2.5}
    $$
    $$
    \begin{cases}
        U_{m+n} &= U_mU_{n+1} - QU_{m-1}U_n\\
        \Delta U_{m+n} &= V_mV_{n+1} - QV_{m-1}V_n
    \end{cases}\tag{2.6}
    $$
    $$
    \begin{cases}
        U_{n}(V_k(P, Q), Q^k) &= U_{nk}(P, Q)/U_k(P, Q)\\
        V_{n}(V_k(P, Q), Q^k) &= V_n(P, Q)
    \end{cases}\tag{2.7}
    $$
    同时我们有如果$(N, Q) = 1$且$P^{'}Q\equiv P^2-2Q\pmod{N}$，则有$P^{'}\equiv \alpha/\beta + \beta/\alpha$以及$Q^{'}\equiv \alpha/\beta + \beta/\alpha = 1$，即
    $$
    U_{2m}(P, Q)\equiv PQ^{m-1}U_m(P^{'}, 1)\pmod{N}\tag{2.8}
    $$
    根据扩展卢卡斯定理
    >如果p是奇素数，$p\nmid Q$且勒让德符号$(\Delta/p) = \epsilon$，则
    $$
    \begin{aligned}
    U_{(p-\epsilon)m}(P, Q) &\equiv 0\pmod{p}\\
    V_{(p-\epsilon)m}(P, Q) &\equiv 2Q^{m(1-\epsilon)/2}\pmod{p}    