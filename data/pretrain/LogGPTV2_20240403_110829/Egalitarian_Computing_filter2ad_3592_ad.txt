### Memory Allocation and Encryption Scheme

Memory is allocated separately for each chunk. For a more detailed understanding, the reader may refer to Figure 2.

The core idea is to utilize both the header and body blocks to generate the ciphertext. Consequently, during trial decryption, both the ciphertext and the header must be available to recompute the body blocks.

A similar argument applies to online authenticated ciphers.

### MHE: Disk Encryption Using Memory-Hard Function Argon2

Figure 2 illustrates the MHE (Memory-Hard Encryption) scheme, which uses the memory-hard function Argon2 for disk encryption.

#### Memory Allocation for Multiple Chunks

In the version of the MHE scheme that allocates the same memory for multiple chunks, the input \( S \) is initially ignored, ensuring that the header memory blocks do not depend on the data. Instead, we set \( K_0 = H(X_0, S) \), making the body blocks dependent on \( S \) and \( M \), and thus unique for each chunk. In this case, the body blocks must be stored separately and should not overwrite the header blocks for \( t > 1 \).

### Verification of Algorithm Properties

Let's verify that the scheme in Algorithm 3 satisfies the properties listed earlier:

1. **Memory Size Independence**: The allocated memory size \( M \) can be chosen independently of the chunk length \( q \) (as long as \( M > q \)).
2. **Independent Processing**: Both the body and header memory blocks are processed independently for each chunk.
3. **Decryption Security**: To decrypt a single byte of the ciphertext, an adversary would need to obtain \( K_1 \), which requires running \( F \) up to the final block, necessitating all \( C_i \) derived from the ciphertext blocks.
4. **Passes Over Data**: Encryption requires one pass over the data, while decryption requires two passes.
5. **Tunable Header Time**: The total time needed to allocate and fill the header is tunable.
6. **Non-Delegable Computation**: The computation of the body memory blocks during decryption cannot be delegated, as it requires knowledge of both the header and the ciphertext.

Properties 1, 5, and 6 are not present in [35].

### Security Analysis

#### CPA Security

We address traditional CPA (Chosen Plaintext Attack) security. We assume the adversary does not have access to the internals of Argon2 and that the block cipher \( E \) is a secure PRF (Pseudorandom Function). Given the collision-resistance of the compression function \( F \) used in \( F \), we prove that all memory blocks are distinct, which ensures CPA security for \( C \). If the collision-resistance of \( F \) cannot be guaranteed, we may additionally require hashing of \( X_i \) by a cryptographic hash function \( H' \) before encryption, ensuring distinct plaintext blocks. These properties hold up to the birthday bound of the block cipher.

#### Tradeoff Security

The genuine decrypting user is expected to use \( M \) memory blocks for \( F \) and \( q \) memory blocks to store the plaintext and intermediate variables. An adversary using \( \alpha M \) memory for the header and body must recompute each missing block, making \( C(\alpha) \) calls to \( F \). The best strategy for Argon2, described in [9], yields \( C(\alpha) \) that grows exponentially with \( 1/\alpha \). For example, using \( 1/5 \) of the memory, an adversary would need to make 344 times as many calls to \( F \), making memory-reducing encryption cracking inefficient even on specialized hardware.

### Algorithm 3: Memory-Hard Encryption with Independent Memory Allocation

**Input**:
- Password \( P \)
- Memory size \( M \)
- Associated data \( S \)
- Chunk \( Q \)
- Number of iterations \( t \)
- Memory-hard function \( F \) (preferably Argon2)
- Block cipher \( E \)
- Cryptographic hash function \( H \) (e.g., SHA-3)

**Steps**:
1. Run \( F \) on \( (P, S) \) with input parameters \( M \) and \( t \), but fill only \( M - q \) blocks (the header) in the last iteration. Let \( X_0 \) be the last memory block produced by \( F \).
2. Produce \( K_0 = H(X_0) \) â€” the first session key.
3. Generate a random session key \( K_1 \).
4. Generate the remaining blocks \( X_1, X_2, \ldots, X_q \) (body) for \( F \) as follows. Assume each chunk \( M \) consists of smaller blocks \( m_1, m_2, \ldots, m_q \) of length equal to the block size of \( F \). For each \( i \geq 1 \):
   - Encrypt \( X_{i-1} \) by \( E \) in the ECB mode under \( K_1 \) and get the intermediate ciphertext block \( C_i' \).
   - Add the chunk data: \( C_i'' = C_i' \oplus m_i \).
   - Encrypt \( C_i'' \) under \( K_0 \) in the CBC mode and produce the final ciphertext block \( C_i \).
   - Modify the memory: \( X_{i-1} \leftarrow X_{i-1} \oplus C_i'' \).
   - Generate the block \( X_i \) according to the specification of \( F \). In Argon2, the modified \( X_{i-1} \) and another block \( X[\phi(X_{i-1})] \) are used.
5. After the entire chunk is encrypted, encrypt the key \( K_1 \):
   \[
   C_{t+1} = E_{K_0}(H(X_t) \oplus K_1)
   \]
**Output**: \( C_1, \ldots, C_{t+1} \).

### Performance

We recommend setting \( l = 4 \) in Argon2 to fill the header faster using multiple cores, which reportedly takes 0.7 cpb (about the speed of AES-GCM and AES-XTS). The body must be filled sequentially due to the sequential nature of the encryption process. As AES-CBC runs at about 1.3 cpb, and we use two instances, the body phase should run at about 4 cpb.

In a practical setting, if we tolerate a 0.1-second decryption time (about 300 Mcycles) for a 1-MB chunk, we can take the header as large as 256 MB, as it would be processed in 170 Mcycles + 4 Mcycles for the body phase.

### Conclusion

We introduced the new paradigm of egalitarian computing, which integrates arbitrary computation with a memory-hard function to enhance security against offline adversaries equipped with powerful tools. We reviewed password hashing and proofs of work as applications where such schemes are already in use or planned. We then introduced two more schemes in this framework: MTP, a progress-free proof-of-work scheme with fast verification based on Argon2, and a memory-hard encryption scheme for password-based disk encryption, also based on Argon2.

### References

[References list provided in the original text]

### Appendix: Merkle Hash Trees

Merkle hash trees are used in the following form. A prover \( P \) commits to \( T \) blocks \( X[1], X[2], \ldots, X[T] \) by computing the hash tree where the blocks \( X[i] \) are at leaves at depth \( \log T \) and nodes compute hashes of their branches. For instance, for \( T = 4 \) and hash function \( G \), prover \( P \) computes and publishes:
\[
\Phi = G(G(X[1], X[2]), G(X[3], X[4]))
\]
Prover stores all blocks and all intermediate hashes. To prove knowledge of, say, \( X[5] \) for \( T = 8 \), the prover discloses the hashes needed to reconstruct the path from \( X[5] \) to \( \Phi \):
\[
\text{open}(X[5]) = (X[5], X[6], g_{78} = G(X[7], X[8]), g_{1234} = G(G(X[1], X[2]), G(X[3], X[4])), \Phi)
\]
If \( G \) is collision-resistant, it is hard to open any block in more than one possible way.