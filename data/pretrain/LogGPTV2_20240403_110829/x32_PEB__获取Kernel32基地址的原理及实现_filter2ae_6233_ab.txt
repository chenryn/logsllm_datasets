TEB: `!teb` 、`dt -r1 ntdll!_teb`
PEB: `!peb` 、`dt -r1 ntdll!_peb`
前面我们已经知道可以通过`fs:[0]`寄存器访问到TEB的地址，这里我们又知道了可以通过`TEB`结构偏移0x30处指向的地址是PEB结构地址，即`fs:[0]`->`TEB`->`PEB`，在这一步完成PEB地址的定位。
### 0x2.1 PEB结构
微软文档:[_PEB](https://docs.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb)
    typedef struct _PEB {
      BYTE                          Reserved1[2];
      BYTE                          BeingDebugged;
      BYTE                          Reserved2[1];
      PVOID                         Reserved3[2];
      PPEB_LDR_DATA                 Ldr;
      PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;
      PVOID                         Reserved4[3];
      PVOID                         AtlThunkSListPtr;
      PVOID                         Reserved5;
      ULONG                         Reserved6;
      PVOID                         Reserved7;
      ULONG                         Reserved8;
      ULONG                         AtlThunkSListPtr32;
      PVOID                         Reserved9[45];
      BYTE                          Reserved10[96];
      PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;
      BYTE                          Reserved11[128];
      PVOID                         Reserved12[1];
      ULONG                         SessionId;
    } PEB, *PPEB;
文档中很多是保留(Reserved)字段，这里我们关注下其中一个成员`Ldr`,其结构为`PPEB_LDR_DATA`。
微软文档介绍: [PEB_LDR_DATA structure](https://docs.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb_ldr_data)
> Contains information about the loaded modules for the process.
>
> 包含有关该过程的加载模块的信息。
    typedef struct _PEB_LDR_DATA {
      BYTE       Reserved1[8];
      PVOID      Reserved2[3];
      LIST_ENTRY InMemoryOrderModuleList;
    } PEB_LDR_DATA, *PPEB_LDR_DATA;
第三个参数`InMemoryOrderModuleList`
> The head of a doubly-linked list that contains the loaded modules for the
> process. Each item in the list is a pointer to an **LDR_DATA_TABLE_ENTRY**
> structure. For more information, see Remarks.
>
> 双向链表的头部包含进程的加载模块。链表的每一个都是指向`LDR_DATA_TABLE_ENTRY`结构的指针
那么这个链表到底有什么信息呢？
    typedef struct _LDR_DATA_TABLE_ENTRY {
        PVOID Reserved1[2];
        LIST_ENTRY InMemoryOrderLinks;
        PVOID Reserved2[2];
        PVOID DllBase; // 模块基地址
        PVOID EntryPoint;
        PVOID Reserved3;
        UNICODE_STRING FullDllName;// 模块名称
        BYTE Reserved4[8];
        PVOID Reserved5[3];
        union {
            ULONG CheckSum;
            PVOID Reserved6;
        };
        ULONG TimeDateStamp;
    } LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;
其实上面的文档是不够全面的，下面我们用Windbg来看下具体的结构和值。
`!peb`->`dt -r1 0x774bdca0 _PEB_LDR_DATA`
可以看到这里，除了文档`InMemoryOrderModuleList`，实际还有两个:
    InLoadOrderModuleList
    InMemoryOrderModuleList
    InInitializationOrderModuleLists
这个其实是模块在不同状态的顺序
`InLoadOrderModuleList` 指的是模块加载的顺序
`InMemoryOrderModuleList`指的是在内存的排列顺序
`InInitializationOrderModuleLists` 指的是模块初始化装载顺序。
这里选择跟进`InLoadOrderModuleList`指向的结构
1)`dt -r1 _LIST_ENTRY 0x1023330`(这里取第二个，第一个是exe本身)->`dt -r1 0x1023228
_LDR_DATA_TABLE_ENTRY`
2)`lm` 列举出加载的模块信息。  
从这图可以得出两个信息，Flink总是指向下一个`_LDR_DATA_TABLE_ENTRY`结构对应加载顺序的`Flink`指针，`_LDR_DATA_TABLE_ENTRY`在0x2c处是加载模块的名称，在0x18偏移处，是该模块的加载基地址。
* * *
基于上述认识，使用Windbg遍历一下`InMemoryOrderModuleList`加载顺序的完整链结构:
(1)`dt -r1 0x774bdca0 _PEB_LDR_DATA`->`dt -r1 0x1023338-0x8
_LDR_DATA_TABLE_ENTRY`
第一个结构是:`PebTest.exe`  
(2)`dt -r1 0x1023230-0x8 _LDR_DATA_TABLE_ENTRY`
第二个模块是:`ntdll.dll`  
(3)`dt -r1 0x1023718-0x8 _LDR_DATA_TABLE_ENTRY`
第三个模块是:`KERNEL32.DLL` (Warning，all in uppercase， interesting)  
(4)`dt -r1 0x1023ad8-0x8 _LDR_DATA_TABLE_ENTRY`
第四个模块是:`KERNELBASE.dll`(Warning，name uppercase， suffix lowercase，interesting)  
(5)...
`dt -r1 0x10246d8-0x8 _LDR_DATA_TABLE_ENTRY` -> 第五个模块`ucrtbased.dll`
`dt -r1 0x1024530-0x8 _LDR_DATA_TABLE_ENTRY` -> 第六个模块`VCRUNTIME140D.dll`
顺序如下:
`PebTest.exe`->`ntdll.dll`->`KERNEL32.DLL`->`KERNELBASE.dll`->`ucrtbased.dll`->`VCRUNTIME140D.dll`
调试真的很累，直接写个程序，遍历三个链表内容，然后在不同win系统下测试:
    #include
    #include
    typedef struct UNICODE_STRING
    {
        USHORT _ength;
        USHORT MaximumLength;
        PWSTR Buffer;
    }UNICODE_STRING, * PUNICODE_STRING;
    typedef struct PEB_LDR_DATA {
        ULONG Length;
        BOOLEAN initialized;
        PVOID SsHandle;
        LIST_ENTRY InLoadOrderModuleList;
        LIST_ENTRY InMemoryOrderModuleList;
        LIST_ENTRY InInitializationOrderModuleList;
    }PEB_LDR_DATA, * PPEB_LDR_DATA;
    typedef struct LDR_DATA_TABLE_ENTRY
    {
        LIST_ENTRY InLoadOrderModuleList;
        LIST_ENTRY InMemoryOrderModuleList;
        LIST_ENTRY InInitializationOrderModuleList;
        void* BaseAddress;
        void* EntryPoint;
        ULONG SizeOfImage;
        UNICODE_STRING FullDllName;
        UNICODE_STRING BaseDllName;
        ULONG Flags;
        SHORT LoadCount;
        SHORT TlsIndex;
        HANDLE SectionHandle;
        ULONG CheckSum;
        ULONG TimeDateStamp;
    }MY_LDR_MODULE, * PLDR_MODULE;
    int main()
    {
        PEB_LDR_DATA* pEBLDR;
        MY_LDR_MODULE* pLdrMod;
        PLDR_MODULE PLdr;
        LIST_ENTRY* pNext, * pStart;
        _asm
        {
            mov eax, fs: [0x30]
            mov eax, [eax + 0xC]
            mov pEBLDR, eax
        }
        printf("GetModuleHandle Kernel32:0x%08x\n", GetModuleHandle("Kernel32"));
        printf("GetModuleHandle ntdll:0x%08x\n", GetModuleHandle("ntdll"));
        printf("--------------------------------------------------------------------------\n");
        printf("PEB_LDR_DATA:0x%08x\n", pEBLDR);
        printf("LDR->InLoadOrderModuleList:\t\t0x%08x\n", pEBLDR->InLoadOrderModuleList);
        printf(">>>InLoadOrderModuleListInLoadOrderModuleList);
        pStart = pNext;
        do