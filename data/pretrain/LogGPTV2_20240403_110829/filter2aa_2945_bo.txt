with non-default constructors as well. For example, if the Triangle class also
provided a constructor that took a single string parameter describing the type
of triangle, you could invoke this constructor and initialize the other
properties, like this:
Click here to view code image
Triangle tri5 = new Triangle("Equilateral triangle")
    {
        Side1Length = 3,
        Side2Length = 3,
        Side3Length = 3
    };
The important point to remember is that the constructor runs first and the
properties are set afterward. Understanding this sequencing is important if the
constructor sets fields in an object to specific values and the properties that
you specify change these values.
You can also use object initializers with automatic properties that are not
read-only, as you will see in the next exercise. In this exercise, you will
define a class for modeling regular polygons that contains automatic
Download from finelybook PI:EMAIL
536
properties for providing access to information about the number of sides the
polygon contains and the length of these sides.
Note You cannot initialize automatic read-only properties in this way;
you have to use one of the techniques described in the previous section.
Define automatic properties and use object initializers
1. In Visual Studio 2017, open the AutomaticProperties solution, which is
located in the  \Microsoft Press\VCSBS\Chapter 15\AutomaticProperties
folder in your Documents folder.
The AutomaticProperties project contains the Program.cs file, defining
the Program class with the Main and doWork methods that you have
seen in previous exercises.
2. In Solution Explorer, right-click the AutomaticProperties project, point
to Add, and then click Class to open the Add New Item –
AutomaticProperties dialog box. In the Name box, type Polygon.cs, and
then click Add.
The Polygon.cs file, holding the Polygon class, is created and added to
the project and appears in the Code and Text Editor window.
3. Add the automatic properties NumSides and SideLength to the Polygon
class, as shown here in bold:
Click here to view code image
class Polygon
{
    public int NumSides { get; set; }
    public double SideLength { get; set; }
}
4. Add the following default constructor shown in bold to the Polygon
class:
Click here to view code image
Download from finelybook PI:EMAIL
537
class Polygon
{
    ...
    public Polygon()
    {
        this.NumSides = 4;
        this.SideLength = 10.0;
    }
}
This constructor initializes the NumSides and SideLength fields with
default values. In this exercise, the default polygon is a square with sides
10 units long.
5. Display the Program.cs file in the Code and Text Editor window.
6. Add the statements shown here in bold to the doWork method, replacing
the // TODO: comment:
Click here to view code image
static void doWork()
{
    Polygon square = new Polygon();
    Polygon triangle = new Polygon { NumSides = 3 };
    Polygon pentagon = new Polygon { SideLength = 15.5, NumSides
= 5 };
}
These statements create Polygon objects. The square variable is
initialized by using the default constructor. The triangle and pentagon
variables are also initialized by using the default constructor, and then
this code changes the value of the properties exposed by the Polygon
class. In the case of the triangle variable, the NumSides property is set to
3, but the SideLength property is left at its default value of 10.0. For the
pentagon variable, the code changes the values of the SideLength and
NumSides properties.
7. Add to the end of the doWork method the following code shown in bold:
Click here to view code image
static void doWork()
{
    ...
    Console.WriteLine($"Square: number of sides is
{square.NumSides}, length of each side is {square.SideLength}");
Download from finelybook PI:EMAIL
538
    Console.WriteLine($"Triangle: number of sides is
{triangle.NumSides}, length of each side is
{triangle.SideLength}");
    Console.WriteLine($"Pentagon: number of sides is
{pentagon.NumSides}, length of each side is
{pentagon.SideLength}");
}
These statements display the values of the NumSides and SideLength
properties for each Polygon object.
8. On the Debug menu, click Start Without Debugging.
Verify that the program builds and runs, writing the messages shown
here to the console window:
9. Press the Enter key to close the application and return to Visual Studio
2017.
Summary
In this chapter, you saw how to create and use properties to provide
controlled access to data in an object. You also saw how to create automatic
properties and how to use properties when initializing objects.
If you want to continue to the next chapter, keep Visual Studio 2017
running and turn to  Chapter 16, “Handling binary data and using
indexers.”
If you want to exit Visual Studio 2017 now, on the File menu, click
Exit. If you see a Save dialog box, click Yes and save the project.
Download from finelybook PI:EMAIL
539
Quick reference
To
Do this
Declare a read/write
property for a
structure or class
Declare the type of the property, its name, a get
accessor, and a set accessor. For example:
Click here to view code image
struct ScreenPosition
{
    ...
    public int X
    {
        get { ... } // or get => ...
        set { ... } // or set => ...
    }
    ...
}
Declare a read-only
property for a
structure or class
Declare a property with only a get accessor. For
example:
Click here to view code image
struct ScreenPosition
{
    ...
    public int X
    {
        get { ... } // or get => ...
    }
    ...
}
Declare a write-only
property for a
structure or class
Declare a property with only a set accessor. For
example:
Click here to view code image
struct ScreenPosition
{
    ...
    public int X
    {
        set { ... } // or set => ...
    }
    ...
}
Download from finelybook PI:EMAIL
540
Declare a property in
an interface
Declare a property with just the get or set keyword
or both. For example:
Click here to view code image
interface IScreenPosition
{
    int X { get; set; } //  no body
    int Y { get; set; } //  no body
}
Implement an
interface property in
a structure or class
In the class or structure that implements the
interface, declare the property and implement the
accessors. For example:
Click here to view code image
struct ScreenPosition : IScreenPosition
{
    public int X
    {
        get { ... }
        set { ... }
    }
    public int Y
    {
        get { ... }
        set { ... }
    }
}
Create an automatic
property
In the class or structure that contains the property,
define the property with empty get and set accessors.
For example:
Click here to view code image
class Polygon
{
    public int NumSides { get; set; }
}
If the property is read-only, then initialize the
property either in the object constructor or as the
property is defined. For example:
Click here to view code image
class Circle
Download from finelybook PI:EMAIL
541
{
    public DateTime CircleCreatedDate { get; }
        = DateTime.Now;
    ...
}
Use properties to
initialize an object
Specify the properties and their values as a list
enclosed in braces when constructing the object. For
example:
Click here to view code image
Triangle tri3 =
    new Triangle { Side2Length = 12,
Side3Length = 17 };
Download from finelybook PI:EMAIL
542
CHAPTER 16
Handling binary data and using
indexers
After completing this chapter, you will be able to:
Store and display integer data using binary and hexadecimal
representations.
Perform bitwise operations in binary data.
Encapsulate logical array-like access to an object by using indexers.
Control read access to indexers by declaring get accessors.
Control write access to indexers by declaring set accessors.
Create interfaces that declare indexers.
Implement indexers in structures and classes that inherit from
interfaces.
Chapter 15, “Implementing properties to access fields,” describes how to
implement and use properties as a means of providing controlled access to
the fields in a class. Properties are useful for mirroring fields that contain a
single value. However, indexers are invaluable if you want to provide access
to items that contain multiple values, and to do so by using a natural and
familiar syntax.
What is an indexer?
Download from finelybook PI:EMAIL
543
You can think of an indexer as a smart array, in much the same way that you
can think of a property as a smart field. Whereas a property encapsulates a
single value in a class, an indexer encapsulates a set of values. The syntax
that you use for an indexer is the same as the syntax that you use for an array.
The best way to understand indexers is to work through an example. First,
you’ll consider a problem and examine a solution that doesn’t use indexers.
Then you’ll work through the same problem and look at a better solution that
does use indexers. The problem concerns integers, or more precisely, the int
type. The example uses C# integers to store and query data stored as binary
data, so, it helps to have an understanding of how you can use the integer
types in C# to store and manipulate binary values. We will discuss this first.
Storing binary values
You normally use an int to hold an integer value. Internally, an int stores its
value as a sequence of 32 bits, where each bit can be either 0 or 1. Most of
the time, you don’t care about this internal binary representation; you just use
an int type as a container that holds an integer value. Sometimes, however,
programmers use the int type for other purposes—some programs use an int
as a set of binary flags and manipulate the individual bits within an int. If you
are an old C hack like I am, what follows should have a very familiar feel.
Note Some older programs used int types to save memory. Such
programs typically date from when the size of computer memory was
measured in kilobytes rather than the gigabytes available these days,
and memory was at an absolute premium. A single int holds 32 bits,
each of which can be 1 or 0. In some cases, programmers assigned 1 to
indicate the value true and 0 to indicate false and then employed an int
as a set of Boolean values.
To make life a little easier for handling data that you want to treat as a
collection of binary values,  C# enables you to specify integer constants using
Download from finelybook PI:EMAIL
544
binary notation. You indicate that a constant should be treated as a binary
representation by prefixing it with 0b0. For example, the following code
assigns the binary value 1111 (15 in decimal) to a variable:
uint binData = 0b01111;
Note that this is a 4-bit value, but an integer occupies 32 bits; any bits not
specified are initialized to zero. You should also observe that when you
specify an integer as a binary value, it is good practice to store the result as an
unsigned int (uint). In fact, if you provide a full 32-bit binary value, the C#
compiler will insist that you use a uint.
To help cope with long strings of bits, you can also insert the “_”
character as a separator between blocks of digits, like this:
Click here to view code image
uint moreBinData = 0b0_11110000_01011010_11001100_00001111;
In this example, the “_” separator is used to mark the byte boundaries (32
bits is 4 bytes). You can use the “_” separator anywhere within a binary
constant (not just on byte boundaries); it is ignored by the C# compiler and is
provided simply to help improve the readability of your code.
If you find binary strings a little lengthy, you can opt to specify values
using hexadecimal (base 16) notation by using the 0x0 prefix. The following
two statements assign the same values shown in the previous example to
another pair of variables. Again, you can use the “_” character as a separator
to make the values easier to read:
Click here to view code image
uint hexData = 0x0_0F;
uint moreHexData = 0x0_F0_5A_CC_0F;
Displaying binary values
If you need to display the binary representation of an integer, you can use the
Convert.ToString method. Convert.ToString is a heavily overloaded method
that can generate a string representation of a range of data values held in
different types. If you are converting integer data, you can additionally
specify a numeric base (2, 8, 10, or 16), and the method will convert the
integer to that base using an algorithm a little like the exercises you have seen
Download from finelybook PI:EMAIL
545
in some earlier chapters. The following example prints out the binary value of
the moreHexData variable:
Click here to view code image
uint moreHexData = 0x0_F0_5A_CC_0F;
Console.WriteLine($"{Convert.ToString(moreHexData, 2)}");
// displays 11110000010110101100110000001111
Manipulating binary values
C# provides a set of operators that you can use to access and manipulate the
individual bits in an uint. These operators are as follows:
The NOT (~) operator This is a unary operator that performs a bitwise
complement. For example, if you take the 8-bit value 0b0_11001100
(204 decimal) and apply the ~ operator to it, you obtain the result
0b0_00110011 (51 decimal); all the 1s in the original value become 0s,
and all the 0s become 1s.
Note The examples shown here are purely illustrative and are
accurate only to 8 bits. In C#, the int type is 32 bits, so if you try
any of these examples in a C# application, you will get a 32-bit
result that might be different from those shown in this list. For
example, in 32 bits,  204 is
0b0_00000000_00000000_00000000_11001100, so in C#, ~204 is
0b0_11111111_11111111_ 11111111_00110011 (which is
actually the int representation of –205 in C#).
The left-shift (>).
Download from finelybook PI:EMAIL
546
The OR (|) operator This is a binary operator that performs a bitwise
OR operation, returning a value containing a 1 in each position in
which either of the operands has a 1. For example, the 8-bit expression
204 | 24 has the value 220 (204 is 0b0_11001100, 24 is 0b0_00011000,
and 220 is 0b0_11011100).
The AND (&) operator This operator performs a bitwise AND
operation. AND is similar to the bitwise OR operator, but it returns a
value containing a 1 in each position where both of the operands have a
1. So, the 8-bit expression 204 & 24 is 8 (204 is 0b0_11001100, 24 is
0b0_00011000, and 8 is 0b0_00001000).
The XOR (^) operator This operator performs a bitwise exclusive OR
operation, returning a 1 in each bit where there is a 1 in one operand or
the other but not both. (Two 1s yield a 0; this is the “exclusive” part of
the operator.) So the 8-bit expression 204 ^ 24 is 212 (0b0_11001100 ^
0b0_00011000 is 0b0_11010100).
You can use these operators together to determine the values of the
individual bits in an int. As an example, the following expression uses the
left-shift ( bits = initialBitValue;
    // indexer to be written here
}
To define the indexer, you use a notation that is a cross between a
property and an array. You introduce the indexer with the this keyword,