antees the even time adjustment for embedding the water-
mark in real time and has all the theoretical strengths of
work [32]. Unlike the watermarking scheme proposed in
previous work [32], our new watermarking scheme is prob-
abilistic in the sense that the watermark embedding suc-
cess rate is not guaranteed 100%. In other words, the new
watermarking scheme trades oﬀ the guaranteed 100% wa-
termark embedding success rate with the guaranteed even
time adjustment for embedding the watermark. By exploit-
ing the inherent inter-packet timing characteristics of the
VoIP ﬂows, our new watermarking scheme achieves virtu-
ally 100% watermark embedding success rate with guaran-
teed even time adjustment for embedding the watermark.
3.1 Basic Concept and Notion
Given any packet ﬂow P1, . . . , Pn with time stamps t1,
. . ., tn respectively (ti  0, we can shift its distribution to the left or right by
a so that Yr,d will be more likely to be negative or positive.
This gives us a way to embed and decode a single binary bit
probabilistically.
To embed a bit 0, we decrease Yr,d by a, so that Yr,d
will have > 0.5 probability to be less than 0. To embed a
bit 1, we increase Yr,d by a, so that Yr,d will have > 0.5
probability to be greater than 0. By deﬁnition in equation
(3), the decrease or increase of Yr,d can be easily achieved
by decreasing or increasing each of the r Yk,d’s by a. By
Distribution of the 10844 IPDs of the Originating VoIP Flow01000200030004000500060007000202122232425262728293031323334353637383940IPD (Inter-Packet Delay) in MillisecondNumber of OccurancesDistribution of the 10423 IPDs of the Terminating VoIP Flow0200400600800100012001400160018002000202122232425262728293031323334353637383940IPD (Inter-Packet Delay) in MillisecondNumber of OccurancesDistribution of the 10843 IPD Differences of the Originating VoIP Flow050010001500200025003000350040004500-10-8-6-4-20246810IPD (Inter-Packet Delay) Difference in MillisecondNumber of OccurancesDistribution of the 10422 IPD Differences of the Terminating VoIP Flow01002003004005006007008009001000-10-8-6-4-20246810IPD (Inter-Packet Delay) Difference in MillisecondNumber of Occurances84Figure 4: Embedding Binary Bit by Shifting
the Distribution of Yr,d by a to the Left or Right
Figure 5: Probability Distribution of Yr,d With
Diﬀerent r
deﬁnition in equation (2), the decrease of Yk,d by a can be
achieved by decreasing each ipd1,k,d by a and increasing each
ipd2,k,d by a; the increase of Yk,d by a can be achieved by
increasing each ipd1,k,d by a and decreasing each ipd2,k,d by
a.
After Yr,d has been decreased or increased by a, we can
decode the embedded binary bit by checking whether Yr,d is
less than or greater than 0. The decoding of the embedded
binary bit is 1 if the value of Yr,d is greater than 0, or 0 if
the value of Yr,d is less than or equal to 0. It is easy to see
that probability of correct decoding is always greater than
that of wrong decoding.
However, as shown in Figure 4, there is always a non-
zero probability such that the embedded bit (with adjust-
ment a > 0) will be decoded incorrectly (i.e. Yr,d > a or
Yr,d  0 (or equivalently arbitrarily
weak watermark embedding strength), we can achieve arbi-
trarily close to a 100% bit embedding success rate by having
a suﬃciently large redundancy number r.
Central Limit Theorem If the random variables X1,
. . ., Xn form a random sample of size n from a given distri-
bution X with mean µ and ﬁnite variance σ2,then for any
ﬁxed number x
√
(cid:82) x
n→∞ Pr[
lim
−∞ 1√
2π
≤ x] = Φ(x)
(4)
n(Xn − µ)
σ
e− u2
2 du.
where Φ(x) =
The theorem indicates that whenever a random sample of
size n is taken from any distribution with mean µ and ﬁnite
variance σ2, the sample mean Xn will be approximately nor-
mally distributed with mean µ and variance σ2/n, or equiv-
n(Xn − µ)/σ
alently the distribution of random variable
will be approximately a standard normal distribution.
√
Y1,d, . . . , Yr,d, where Var(Yk,d)= σ2
Applying the Central Limit Theorem to random sample
Y,d, E(Yk,d) = 0, we have
√
rYr,d
σY,d
r(Yr,d − E(Yk,d))
 0 (or the watermark
embedding strength) might be, we can always make the wa-
termark bit embedding success rate arbitrarily close to 100%
by increasing the redundancy number r. This result holds
true regardless of the distribution of the inter-packet timing
of the packet ﬂow.
Figure 5 illustrates how the distribution of Yr,d can be
“squeezed” into range [−a, a] by increasing the redundancy
number r.
Because the routers, intermediate Skype peers and the
anonymizing network along the Skype VoIP call could intro-
duce diﬀerent delays over VoIP packets, we need to consider
the negative impact of such delay jitters over the watermark
decoding.
Let σ2
d be the variance of all delays added to all packets,
Xk be the random variable that denotes the perturbation
over Yk,d by the delay jitter, and Y (cid:48)
k,d be the random vari-
able that denotes the resulting value of Yk,d after it has been
perturbed by the delay jitter. We have the following quanti-
tative tradeoﬀ among the watermark bit detection rate, the
deﬁning characteristics of the delay jitter, and the deﬁning
characteristics of the original inter-packet timing of the VoIP
ﬂow, whose derivation can be found in the Appendix:
Pr[Y (cid:48)
r,d 1 r = 1 85Figure 6: Experimental Setup for the Real-Time Tracking of Anonymous, Peer to Peer Skype VoIP Calls
across the Internet
jitter and the packet timing of the original packet ﬂow. In
case the delay jitter is independent from the packet timing
of the packet ﬂow, Cor(Yk,d, Xk) will be 0.
The important result here is that no matter what variance
Yk,d may have (as long as it exists), no matter how large a
variance the network jitter may have, no matter how small
the timing adjustment a > 0 (or the watermark embedding
strength) might be, we can always make the watermark bit
detection rate arbitrarily close to 100% by increasing the
redundancy number r. This result holds true regardless of
the distribution of the network delay jitter.
4. TRANSPARENT WATERMARKING OF
VOIP FLOWS IN REAL TIME
In order to be able to watermark any VoIP ﬂows transpar-
ently, it is desirable to have a VoIP gateway which forwards
the VoIP ﬂows and watermarks any speciﬁed bypassing VoIP
ﬂows with speciﬁed watermarks. To embed the watermark
into the inter-packet timing of a VoIP ﬂow, we need a capa-
bility to delay speciﬁed packet of speciﬁed ﬂow for speciﬁed
duration. We choose to implement such a capability in the
kernel of the Linux operating system.
One key challenge in implementing the transparent and
real-time VoIP watermarking engine is how to precisely de-
lay an outgoing packet in real-time. The inter-packet arrival