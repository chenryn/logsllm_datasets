the defender can adaptively execute the MTD operation to
save defense cost by using an event-based MTD, for example,
triggering an MTD operation based on intrusion alerts.
In the operation-based MTD classiﬁcation, a single SDR
type can be used in an MTD technique or multiple types
can be used as we discussed in Section IV-D. Although a
hybrid approach may achieve more enhanced system security,
it may introduce additional defense cost and/or issues related
to service availability. Again, identifying a critical tradeoff
point between multiple, conﬂicting system goals is a non-
trivial task in developing a cost-effective and efﬁcient MTD
solution.
These two classiﬁcation methods answer two different de-
sign questions in developing MTD techniques (i.e., how -to-
move and when-to-move). Hence, we can even consider both
operation-based and timeliness-based classiﬁcation in order to
develop a secure, affordable, adaptive, and QoS-aware MTD
solutions.
IV. MTD TECHNIQUES BASED ON SHUFFLING,
DIVERSITY, AND REDUNDANCY
In this section, we survey MTD techniques based on the
operation-based MTD classiﬁcation with the three categories,
including shufﬂing, diversity, and redundancy. In addition,
since some approaches take hybrid approaches combining
more than one MTD technique, we categorize these as ‘hybrid’
in this paper. When some deception techniques are used to
change the attack surface, we also discuss them as MTD
techniques based on the used classiﬁcation criteria.
A. Shufﬂing
A shufﬂing technique rearranges or randomizes system
conﬁgurations. In this section, we discuss various ways to
change the system or network conﬁgurations.
1) IP Shufﬂing / Mutations / Host Randomization: Many
shufﬂing-based MTD techniques used IP shufﬂing or mutation
in various network domains. Sharma et al. [138] developed
IP shufﬂing MTD by using the concept of IP multiplexing
(or demultiplexing) in an SDN environment. MacFarland and
Shue [100] used a host IP address mutation to defend a
large-scale network by employing an SDN controller that
controls DNS interactions. Antonatos et al. [10] proposed an
IP randomization technique to thwart hitlist worms attacks,
aiming to avoid malicious worms that gather information about
victim targets in a networked system and making it hard for
attackers to identify new, vulnerable targets. Jafarian et al.
[79] implemented an IP shufﬂing technique mutating the IP
addresses unpredictably while minimizing the overhead of the
MTD operations. The authors used the SDN-based OpenFlow
(OF) protocol
that frequently assigns Virtual IP addresses
translated from and/or to a real host’s IP address.
Carroll et al. [23] also studied network address shufﬂing to
protect honeypots as an MTD technique based on probability
models to quantify the attack success probability with respect
to the size of a network, the number of addresses scanned
9
by attackers, the number of system vulnerabilities, and the
frequency of triggering the shufﬂing-based MTD. Kampanakis
et al. [85] employed host randomization and mutation, eval-
uating the performance in terms of the attackers’ overhead
increased by the MTD technique used in an SDN platform.
2) Port Hopping: Luo et al. [98] studied a port hopping
technique based on the concept of shufﬂing-based MTD to
effectively deal with reconnaissance attacks by hiding service
identities while increasing confusion for potential attackers.
This work quantiﬁes the effectiveness of the proposed port
hopping technique based on the attack success probability as
a function of the values of key design parameters, including
the size of a port pool, the number of probes, the number of
vulnerable services, and the frequency of port hopping.
3) Packet Header Randomization: Wang et al. [156] pro-
posed a technique called U-TRI, Unlinkability Through Ran-
dom Identiﬁer, which uses the randomization of a packet
header identiﬁer to confuse attackers.
4) Network Topology Shufﬂing: The underlying idea of this
technique is to invalidate an attacker’s path information by
continuously changing routes in networks. Achleitner et al.
[1, 2] proposed a virtual
topology generation framework
against network scanning attacks by leveraging the SDN
technology. Hong et al. [68] presented an optimal network
reconﬁguration technique based on the concept of shufﬂing-
based MTD for SDN environments. They solved a shufﬂing
assignment problem and showed the increase in network
security when network routing paths are diversiﬁed.
5) VM / Proxy Migration: Danev et al. [41] considered
securely migrating Virtual Machines (VMs) as an MTD mech-
anism in a private cloud. The underlying idea of this work is
to utilize an extra physical Trusted Platform Module (TPM)
and trusted parties for the migration process as well as public
key infrastructure to secure the protocol. Zhang et al. [165]
developed a periodic VM migration as an MTD technique
based on the balance between the level of security obtained
and the cost incurred upon the migration of VMs.
Penner and Guirguis [121] developed a set of MTD tech-
nologies to change the location of VMs in a cloud to defend
against attacks leveraging a Multi-Armed Bandit (MAB) pol-
icy, which aims to exploit VMs providing the highest reward.
The proposed MTD techniques are deployed to minimize
the MAB attacks launched by the attacker aiming to obtain
credentials (e.g., credit card information) or critical data.
The proposed MTD techniques are evaluated based on how
much time it takes to switch VMs. However, the enhanced
security introduced by the MTD techniques has not been
investigated. Jia et al. [83] devised an MTD technique to deal
with Distributed Denial-of-Service (DDoS) attacks through
securing data transmission between authenticated (legitimate)
clients and a protected server. This method used the technique
called client-to-proxy shufﬂing that continuously moves secret
proxies. For evaluation, they assessed the resistance of their
method toward brute-force attacks, as well as proxy-based and
communication-based overhead.
Peng et al. [120] proposed VM migration or snapshotting
and diversity or compatibility of migration for cloud networks.
This work considered attackers’ learning based on accumu-
lated intelligence obtained and dynamics and heterogeneity
of a service’s attack surface. Finally, this work proposed a
probability model to propose an MTD service deployment
strategy. This study found that the proposed MTD technique
is more effective under a dense service deployment and strong
attacks while the defender’s awareness toward the heterogene-
ity and dynamics of the attack surface is helpful for enhancing
the effectiveness of the MTD as it can be used to determine
when/how to perform the MTD.
6) Software / Service Reconﬁguration: Casola et al. [26]
developed an MTD technique based on the reconﬁguration
of devices in an IoT environment whose cryptosystems and
ﬁrmware versions are shufﬂed. Vikram et al. [154] proposed a
shufﬂing based MTD technique on the application layer for a
secure web through randomizing HTML elements. Most bots
attacking the web use static HTML elements in the HTTP
content/form page. Hence, the randomization of those HTML
elements and parameters could be an appropriate technique for
avoiding web bot attacks.
7) Platform Diversity: Okhravi et al. [114] proposed the
Trusted Dynamic Logical Heterogeneity System (TALENT)
framework for live-migrating of the critical
infrastructure
applications across heterogeneous platforms, which permits
running of the critical applications to change its hardware
and operating system (OS). It changes a platform on-the-
ﬂy, creates a cyber moving target, and provides the cyber
survivability through platform diversity. TALENT creates a
virtualized environment at the OS-level using containers with
a checkpoint compiler for migrating a running application of
different platforms. It preserves the state of the application,
such as the execution state, the open ﬁles, and the network
connections during the migration.
8) OS-Rotation:: Thompson et al. [148] developed the
Multiple OS Rotational Environment (MORE) MTD based on
the existing technology to achieve a feasible MTD solution
at an OS-level. MORE MTD consists of a set of virtual
machines (VMs) equipped with a different distribution of
OS (i.e., different Linux distributions) and web applications.
The periodic rotation of the hosts/VMs creates the dynamic
environment controlled by an administrator’s machine running
a daemon process. This technique reduces the likelihood
of a successful exploitation of the OS’s vulnerabilities and
its security impact by limiting the duration of the rotation
window. The “rotation window” is the duration of an OS being
exposed and vulnerable to an attack.
Pros and Cons: Shufﬂing-based MTD techniques can easily
work with existing technologies without developing another
security mechanism that requires a thorough security analysis.
Hence, in terms of the development cost and resources, these
methods are useful, immediately applicable, and highly com-
patible with legacy devices and technologies. However, since
shufﬂing relies on the quality of existing technologies, if those
existing technologies are not robust enough against attacks
(i.e., well-known vulnerabilities to attackers),
the security
achieved by this shufﬂing technique can be signiﬁcantly lim-
ited by those vulnerabilities of the legacy devices/technologies.
In this case, the shufﬂing frequency can be increased to help
increase the
cover those vulnerabilities, but
this also will
10
defense cost incurred by over-utilizing MTD as another layer
of defense. Furthermore, the shufﬂing spaces (e.g., a number
of virtual IPs that can be assigned for a real IP) are critical to
enhancing security.
B. Diversity
Diversity-based MTD techniques employ the deployment
of system components with different implementations. In this
section, we discuss how system diversity is realized based on
a variety of domains.
1) Software Stack Diversity: Huang and Ghosh [72] and
Huang et al. [73] introduced a diversity MTD technique in or-
der to enhance network resilience and service provisions. They
deployed a diversity method to the virtual servers (VS) like
OSs, virtualization components, web servers, and application
software. They evaluated the proposed diversity method with
respect to attack success probability.
2) Code Diversity: Azab et al. [15] developed an MTD
technique that changes a running program’s variants erratically
based on the concept of diversity. The proposed method
divides a large program into components (e.g., cells or tasks)
that can be performed by functionally-equivalent variants.
Their method includes a recovery mechanism to enhance the
resilience of the proposed technique. Choosing a different
variant at runtime makes it hard for an attacker to penetrate
into and scan the system. The proposed method can mitigate
even the effect of the attack success by affecting one variant
that can be instantly replaced by another variant through the
recovery mechanism. However, the robustness against attacks
based on security analysis is not clear while its implementation
is quite complex which can be questioned for applicability in
diverse contexts.
In automated software diversity, a program can diversify
at
instruction, block,
loop, program and system levels in
different phases of the life cycle, such as compilation and
linking, or installation [92]. A JIT (just-in-time) compiler
(i.e., Java/Python JIT compilers) generates code during the
execution of the program. The JIT compilers can be used
for the code diversiﬁcation. In this case, the security of the
system depends on how predictable the JIT compilers are.
The code diversity can be enhanced with adaptive notiﬁcation-
oriented programming (i.e., assembly language instruction, no-
op)
[81].
3) Programming Language Diversity: Taguinod et al. [146]
focused on an MTD technique based on the diversiﬁcation
of programming languages to avoid code and SQL injection
attacks. This work proposed the MTD technique to be applied
in different
layers of the web application to change the
implemented language of the web application without affecting
or disrupting the system functionality.
4) Network Diversity: Zhuang et al. [170] investigated
the relationship between the diversity of network conﬁgura-
tions and attack success probability by evaluating the MTD
technique based on a logical mission model. The authors
examined how the network size, the frequency of shufﬂing /
adaptations, and the number of vulnerable computers affect the
effectiveness of the MTD technique based on the experimental
results tested from the network security simulator, NeSSi2.
A SUMMARY OF PROS AND CONS OF MTD TECHNIQUES
TABLE IV
11
Cons
Potential high cost or service
interruptions if not executed
adaptively; limited by the inherent
vulnerabilities of the existing
technologies used or shufﬂing
spaces
Limited by the inherent
vulnerabilities of the existing
technologies or a number of
software alternatives
Additional cost to move / setup
additional system components
(e.g., servers or routing paths); if
not properly executed, it increases
attack surface.
Additional cost; high complexity
for multi-objective optimization
with multiple operational
decisions
Type
Shufﬂing
Diversity
Main Techniques
IP shufﬂing, mutations; host
randomization packet header
randomization; network topology
shufﬂing; VM / proxy migration;
software / service reconﬁguration
Software stack diversity; code
diversity; programming language
diversity; network diversity
Redundancy
Redundancy of software components;
redundancy of network sessions
Hybrid
Redundancy and diversity based MTD
to provide diverse replicas of web
services; shufﬂing and redundancy for
VM migration with multiple VM
replicas; combining shufﬂing,
redundancy, and diversity based MTD
for cloud-based web services
Pros
Leveraging legacy devices or
technologies; providing affordable,
economical defense
Leveraging legacy devices or
technologies; working well with
shufﬂing-based MTD to double
the effect
High reliability/availability
achievable; easily combined with
shufﬂing or diversity to
signiﬁcantly secure a system and
ensure service availability
Providing enhanced security by
combining multiple MTD
techniques which a single solution
cannot introduce
Ref.
[1, 2, 10, 23, 26, 41,
68, 79, 83, 85, 98,
100, 120, 121, 138,
154, 156, 165]
[15, 72, 73, 146, 170]
[95, 159]
[4, 5, 6, 59]
Pros and Cons: Similar to shufﬂing-based MTD, diversity-
based MTD can leverage the existing technologies. As dis-
cussed earlier, diversity-based MTD techniques are often com-
bined with shufﬂing-based counterparts to double the effective-
ness of a proposed MTD. However, since the diversity-based
MTD is also based on the existing technologies, if those tech-
nologies have high vulnerabilities to attacks, introducing MTD
as another layer of defense does not provide better security,
even with the sacriﬁce of additional defense cost. In addition,
the degree of diversity signiﬁcantly affects the effectiveness
of the MTD. For example, if there are not many alternatives
to use (e.g., only two versions of software that provides the