security can greatly benefit from static analysis [7]. For example,
Ashcraft, et al. developed compiler extensions to catch integers
read from untrusted sources in Linux and OpenBSD kernels [5].
Post, et al. used a bounded model checker to find deadlocks and
memory leaks in Linux kernels [50]. Ball, et al. built a static anal-
ysis tool with a set of rules to prove the correctness of Windows
drivers [6].
One limitation of most static analysis tools is the production
of many false positives. Since our work leverages fuzzing for the
vulnerability detection step, all identified vulnerabilities are actual
bugs, and false positives are entirely avoided. Another drawback of
static analysis techniques is that the analysis often needs a manual
specification of security policies and rules.
3 OVERVIEW
In this section, we will provide an overview of our interface-aware
fuzzing approach and its application to vulnerability detection in
device drivers through ioctl fuzzing. We will also present an ex-
ample that will be referenced throughout the paper to assist the
curious reader in understanding our end-to-end system.
Figure 1 demonstrates the high-level workflow of the system.
DIFUZE requires, as input, the source code of the kernel (which
will include the source code of the device drivers) of the target host.
Since Linux is licensed under the GNU General Public License, any
software that is linked against it, such as the kernel-driver interface
code, must also be released. Thus, the kernel sources of Android
devices are readily available [27, 32, 33, 39, 46, 57, 60, 66] and can
be used for our analysis.
Given this input, DIFUZE works through a number of phases to
recover the interaction interface for device drivers, generate the
correct structures to exercise this interface, and trigger the process-
ing of these structures by the kernel of the target host. Because the
triggering of kernel bugs often renders a system unstable (leading
to a hang or reboot), only DIFUZE’s final stage is done in vivo on the
target host. The other stages are executed on an external analysis
host, their results are logged locally (for input replay, in case a bug
is triggered), and then transferred over a network connection or
debug interface to the target host.
In more detail, these stages are:
Interface recovery. In its first stage, DIFUZE analyzes the pro-
vided sources to detect what drivers are enabled on the target
host, what device files are used to interact with them, what
ioctl commands they can receive, and what structures they
expect to be passed to these commands. This series of analy-
ses are implemented using LLVM, and are further described
in Section 4. The end result of this stage is a set of tuples of
the device filename for the target driver, the target ioctl
command, and structure type definitions.
Structure generation. For each structure, DIFUZE continuously
generates structure instances: memory contents representing
instantiations of the type information recovered from the
previous step. These instances are logged and transferred
to the target host, along with the associated target device
filenames and target ioctl command identifiers. This stage
is detailed in Section 5.
On-device execution. The actual ioctl triggering component
resides on the target host itself. Upon receipt of the target
device filename, the target ioctl command, and the gener-
ated structure instances, the executor proceeds to trigger the
execution of ioctls. We discuss this stage in Section 6.
DIFUZE logs the sequence of inputs that is sent to the target.
Thus, when a bug is triggered, and the target device crashes, the
inputs can be used for reproducibility and manual triage/analysis.
Build System Instrumentioctl Handler IdentiﬁcationDevice File DetectionCommand Value DeterminationArgument Type IdentiﬁcationFinding the Structure DeﬁnitionPointer FixupSub-structure GenerationType-Speciﬁc Value CreationStructure RecursionExecution (and Automatic Reboot)XML Spec.Interface RecoveryStructure GenerationOn-device ExecutionFuzz UnitAnalysis HostAnalysis HostTarget  HostKernel Source CodeBacktraces to Record Vulnerabilities Being TriggeredSession J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA21261
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
DriverStructTwo dev_data1[16];
DriverStructTwo dev_data2[16];
static bool enable_short; static bool subhandler_enabled;
long ioctl_handler(struct file *file, int cmd, long arg) {
uint32_t curr_idx;
uint8_t short_idx; void *argp = (void*) arg;
DriverStructTwo *target_dev = NULL;
switch (cmd) {
case 0x1003:
target_dev = dev_data2;
case 0x1002:
if(!target_dev)
target_dev = dev_data1; // program continues to execute
if(!enable_short) {
if (copy_from_user_wrapper((void*)&curr_idx, argp,
sizeof(curr_idx))) {
return -ENOMEM; // failed to copy from user
}
} else {
if (copy_from_user_wrapper((void*)&short_idx, argp,
sizeof(short_idx))) {
return -ENOMEM; // failed to copy from user
}
curr_idx = short_idx;
}
if(curr_idx  16
if(copy_from_user_wrapper((void*)&(target_dev[drv_data.idx]),
return -ENOMEM; // failed to copy from user
drv_data.subdata,
sizeof(DriverStructTwo))) {
}
return 0;
}
return -EINVAL;
}
Listing 3: The ioctl handlers which expect very specific val-
ues for the command identifiers and expect data to be pre-
sented in the proper structure for each command. The ioctl
processing is split across multiple functions.
3.1 Example
To help the reader understand DIFUZE, we provide an example of a
simple driver. This example is presented in Listing 1 (the structure
definitions), 2 (a wrapper around the copy_from_user function,
which presents minor complications to the analysis), Listing 4 (the
main driver initialization code), and Listing 3 (the ioctl handlers
themselves).
The function driver_init in Listing 4 is the driver initialization
function, which will be called as part of kernel initialization. This
function registers the device with a name "example_device" (line
8) and specifies that the function ioctl_handler should be invoked
when a userspace application performs the ioctl system call (lines
10 and 11) on the device file (in this case, /dev/example_device).
Although the filename is example_device, the absolute path of
the file depends on the type of device. The device in the running
example is a character device [35] and it will be created under
the /dev directory, However, there are other types of device files,
which will be created in different directories. For instance, proc
devices [54] will be created under the /proc directory.
We will refer to this example throughout the rest of the paper as
the “running example”.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
1
2
3
4
typedef struct {
long sub_id;
char sub_name[32];
} DriverSubstructTwo;
typedef union {
long meta_id;
DriverSubstructTwo n_data;
} DriverStructTwo;
typedef struct {
int idx;
uint8_t subtype;
DriverStructTwo *subdata;
} DriverStructOne;
Listing 1: The structure definitions of our running exam-
ple. DIFUZE automatically recovers these and performs
structure-aware fuzzing of the target driver.
int copy_from_user_wrapper(void *buff, void *userp, size_t size) {
// copy size bytes from address provided by the user (userp)
return copy_from_user(buff, userp, size);
}
Listing 2: Like many real-world drivers, our example driver
ships with a wrapped copy_from_user function. Because of
wrappers like this (and more complex ones), DIFUZE must
support the analysis of nested functions.
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA21271
2
3
4
5
6
7
8
9
10
11
12
13
static struct cdev driver_devc;
static dev_t client_devt;
static struct file_operations driver_ops;
__init int driver_init(void)
{
// request minor number
alloc_chrdev_region(&driver_devt, 0, 1, "example_device");
// set the ioctl handler for this device
driver_ops.unlocked_ioctl = ioctl_handler;
cdev_init(&driver_devc, &driver_ops);
// register the corresponding device.
cdev_add(&driver_devc, MKDEV(MAJOR(driver_devt), 0), 1);
}
Listing 4: The main driver initialization function of our
running example. It dynamically creates the driver file, the
name of which must then be recovered by DIFUZE, and reg-
isters the top-level ioctl handler, which must also be recov-
ered.
4 INTERFACE RECOVERY
To efficiently fuzz the ioctls of a device driver, DIFUZE needs to
recover the interface of that driver. The interface of a device driver is
comprised of the name/path of the device file used to communicate
with the device, the valid values for ioctl commands for that
device, and the structure definition of the ioctl data argument for
the different ioctl commands.
To recover this data, DIFUZE uses a combination of analyses,
implemented in LLVM. As the Linux kernel does not lend itself
to analysis (or even compilation) with LLVM, we first developed
an alternate build procedure. After this is done, we identify the
filename of the device files created by the device driver, find the
ioctl handler, recover the valid set of ioctl command identifiers,
and retrieve the structure definitions for the data arguments to
those ioctl commands.
4.1 Build System Instrumentation
We take several steps to enable DIFUZE to perform LLVM analyses
on Linux device drivers.
GCC compilation. First, we perform the manual step of setting
up the kernel and driver sources of the target host for compilation,
using GCC. While this is generally a well-documented process,
the vendors of mobile devices do not go out of their way to make
their GPL-mandated source code releases easy to compile, so some
manual configuration effort is required. Once the source tree can be
compiled with GCC, we run a full compilation and log all executed
commands.
GCC-to-LLVM conversion. We process the log of executed com-
mands during the compilation step with a GCC-to-LLVM command
conversion utility that we created for DIFUZE. This utility trans-
lates command-line flags from the format expected by GCC to the
format expected by LLVM utilities and enables the compilation of
the kernel source via LLVM. In its compilation, LLVM generates a
bitcode file [51] for each source file. We enable debug information
to be embedded in the bitcode file, which helps us in extracting the
structure definitions as explained in Section 4.6
Bitcode consolidation. The analyses that DIFUZE undertakes op-
erate on each driver separately. As such, we consolidate the various
bitcode files to create a single bitcode file per driver. This allows
us to carry out interface recovery analyses on a single bitcode file,
simplifying the analyses. This consolidated bitcode file is used in
the following phases to perform the analyses.
4.2 ioctl Handler Identification
As discussed in Section 2.1, much of the interaction with device
drivers happens through the ioctl interface. From userspace, the
application calls the ioctl() system call, passing in a file descriptor
to the driver’s device file, a command identifier, and the required
structured data argument. When this system call is received in ker-
nel space, the corresponding driver’s ioctl handler is invoked. This
handler then dispatches the request to different functionality inside
the driver, depending on the command identifier. In the case of our
running example, the ioctl handler function is ioctl_handler.
In order to recover valid command identifiers and the structure
definitions of additional ioctl arguments, DIFUZE must first iden-
tify the top-level ioctl handler. Each driver can register a top-level
ioctl handler for each of its device files, and there are several
ways to do this in the Linux kernel. All of these methods, however,
involve the creation of one of a set of structures2 created for this
purpose, with one of the fields of these structures being a func-
tion pointer to the ioctl handler. A full list of these structures,
and corresponding field names for one of the kernels are listed in
Appendix A.
Our analysis to identify the ioctl handler is straightforward:
using LLVM’s analysis capabilities, we find all uses of any of these