    void my_TEA_encrypt(uint32_t* v, uint32_t* k) {
        uint32_t v0 = v[0], v1 = v[1], sum = 0, i;           /* set up */
        uint32_t delta = 0x7E5A96D2;                     /* a key schedule constant */
        uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];   /* cache key */
        for (i = 0; i > 5) + k1);
            v1 += ((v0 > 5) + k3);
            printf("%lx,%lx,%d\n", v0, v1,i);
        }                                              /* end cycle */
        v[0] = v0; v[1] = v1;
    }
    int main()
    {
        uint32_t test[2] = { 0x67616c66,0x6161617b };
        uint32_t k[4] = { 0x7CE45630, 0x58334908, 0x66398867, 0xC35195B1 };
        my_TEA_encrypt(test, k);
        uint32_t r = 0;
        uint32_t a = 0x7E5A96D2;
        uint32_t fake_key[4] = { 0x22836719,0x0A5978C21 ,0x79573824,0x330B55EF };
        uint32_t Enc[] = { 0x422F1DED, 0x1485E472, 0x035578D5, 0xBF6B80A2, 0x97D77245, 0x2DAE75D1, 0x665FA963, 0x292E6D74,
    0x9795FCC1, 0x0BB5C8E9 };
        char key[41] = { 0 };
        for (int i = 0; i < 33; i++) {
            r -= a;
        }
        my_TEA_decrypt(Enc, k,r);
        for (int i = 0; i < 33; i++) {
            r -= a;
        }my_TEA_decrypt(Enc+ 2, k,r);
        for (int i = 0; i < 33; i++) {
            r -= a;
        }my_TEA_decrypt(Enc + 4, k,r);
        for (int i = 0; i < 33; i++) {
            r -= a;
        }my_TEA_decrypt(Enc + 6, k,r);
        for (int i = 0; i < 33; i++) {
            r -= a;
        }my_TEA_decrypt(Enc +8, k,r);
        memcpy(key, Enc, 40);
        printf("%s", key);
    }
###  ror
程序逻辑非常简单，但是发现变换非常复杂
通过取出索引值发现每8组加密完成后的首个Enc 均为0
同时 程序会右移`j`或者左移 `8-j` 这明显只有一个保留数值，并且由于`j`与数组的相关性。猜测这种算法
每8个字母的`ascii`组成8*8矩阵，再进行一次置换得到Enc
于是写出exp:
    sb = [0x65, 0x55, 0x24, 0x36, 0x9D, 0x71, 0xB8, 0xC8, 0x65, 0xFB,
          0x87, 0x7F, 0x9A, 0x9C, 0xB1, 0xDF, 0x65, 0x8F, 0x9D, 0x39,
          0x8F, 0x11, 0xF6, 0x8E, 0x65, 0x42, 0xDA, 0xB4, 0x8C, 0x39,
          0xFB, 0x99, 0x65, 0x48, 0x6A, 0xCA, 0x63, 0xE7, 0xA4, 0x79]
    table = [101, 8, 247, 18, 188, 195, 207, 184, 131, 123,
             2, 213, 52, 189, 159, 51, 119, 118, 212, 215,
             235, 144, 137, 94, 84, 1, 125, 244, 17, 255,
             153, 73, 173, 87, 70, 103, 42, 157, 127, 210,
             225, 33, 139, 29, 90, 145, 56, 148, 249, 12,
             0, 202, 232, 203, 95, 25, 246, 240, 60, 222,
             218, 234, 156, 20, 117, 164, 13, 37, 88, 252,
             68, 134, 5, 107, 67, 154, 109, 209, 99, 152,
             104, 45, 82, 61, 221, 136, 214, 208, 162, 237,
             165, 59, 69, 62, 242, 34, 6, 243, 26, 168,
             9, 220, 124, 75, 92, 30, 161, 176, 113, 4,
             226, 155, 183, 16, 78, 22, 35, 130, 86, 216,
             97, 180, 36, 126, 135, 248, 10, 19, 227, 228,
             230, 28, 53, 44, 177, 236, 147, 102, 3, 169,
             149, 187, 211, 81, 57, 231, 201, 206, 41, 114,
             71, 108, 112, 21, 223, 217, 23, 116, 63, 98,
             205, 65, 7, 115, 83, 133, 49, 138, 48, 170,
             172, 46, 163, 80, 122, 181, 142, 105, 31, 106,
             151, 85, 58, 178, 89, 171, 224, 40, 192, 179,
             190, 204, 198, 43, 91, 146, 238, 96, 32, 132,
             77, 15, 38, 74, 72, 11, 54, 128, 93, 111,
             76, 185, 129, 150, 50, 253, 64, 141, 39, 193,
             120, 79, 121, 200, 14, 140, 229, 158, 174, 191,
             239, 66, 197, 175, 160, 194, 250, 199, 182, 219,
             24, 196, 166, 254, 233, 245, 110, 100, 47, 241,
             27, 251, 186, 167, 55, 143]
    # for i in sb:
    #     print(table.index(i), end=",")
    table = [0,181,122,206,37,108,7,223,0,251,124,38,75,62,134,154,0,255,37,144,255,28,56,176,0,231,60,121,225,144,251,30,0,204,179,51,78,145,65,222]
    for j in range(0,len(table),8):
        temp = []
        for i in range(8):
            r = bin(table[i + j]).lstrip("0b").rjust(8,"0")
            # print(r)
            tempstr = []
            for elem in r:
                tempstr.append(int(elem))
            temp.append(tempstr)
        # print(temp)
        for c in range(8):
            v = 0
            for n in range(8):
                v <<=1
                v += temp[n][c]
            print(chr(v),end="")
###  虚假的粉丝
理清程序逻辑后，始终没发现验证flag的地方 也没发现隐藏加载手段
按正常逻辑找到程序需要的key:
    path = r"D:\Users\CShi\Desktop\music\f\\"
    import re
    import tqdm
    for i in tqdm.trange(1, 5317):
        filename = "ASCII-faded {}.txt".format(str(i).rjust(4, '0'))
        file = path + filename
        with open(file, "rb") as f:
            result = f.read()
            sub = "U"
            r = [substr.start() for substr in re.finditer(sub, result)]
            for c in r:
                if result[c + 39] == 'S':
                    print i, c
得到4157 1118
第三个key随便输
虽然是字符画组成的音乐，考虑到可能输出是key，base64解码后得到
    S3Cre7_K3y%20%3D%20Al4N_wAlK3R
Al4N_wAlK3R
输入后打开5135.txt
将文本缩小拿到 flag
BTW，此题更适合放到misc
###  gghdl
本来以为又是一道虚拟机题目，进入main 发现这是`ghdl` 虚拟机
字符串搜索到了”Input Flag“，好像不是虚拟机或者说脚本代码被内联编译了
主要逻辑在`sub_2DCE0`，`case 5`的`v37 = *(_DWORD *)(a1 + 272);`是否等于44
是判断正确错误的条件，操作`*(_DWORD *)(a1 + 272);`的逻辑在`case 7`，对比的主要逻辑在`v15 =
sub_C140(v122, v119);`。`v119` 是`sub_231D0(&v120, (unsigned int)v14, 8LL);`
来的。`v14` 是`v14 = dword_DC460[v13];` 是Enc
进入`sub_231D0` 函数 此函数实际为二进制转换函数，只是0 相当于2 1 相当于3
`v122`未知 可能为输入变换而来。根据对输入的测试，发现输入值异或了`0x9c`
最终的exp：
    enc = [0xD8, 0xDD, 0xCF, 0xDF, 0xC8, 0xDA, 0xE7, 0xAC,
           0xAA, 0xAE, 0xA5, 0xAD, 0xA5, 0xAA, 0xAE, 0xB1,
           0xFD, 0xFE, 0xFD, 0xF8, 0xB1, 0xA8, 0xAC, 0xFF,
           0xA4, 0xB1, 0xA4, 0xAF, 0xAD, 0xA4, 0xB1, 0xFA,
           0xAC, 0xFD, 0xAA, 0xFE, 0xAD, 0xA4, 0xAA, 0xA8,
           0xA4, 0xAE, 0xFF, 0xE1]
    xor = 0x9c
    print(len(enc))
    flag = ""
    for i in range(len(enc)):
        flag += chr(xor ^ enc[i])
    print (flag)
    # DASCTF{06291962-abad-40c8-8318-f0a6b186482c}