‚Ä¢ After sending a message, a machine instance may wait in its
current state for an expected answer. The wait for command is
used to express this. In this ‚Äúwaiting‚Äù state, the machine instance
does not accept any other input message.
‚Ä¢ The symbol ‚Äú_‚Äù is used as a wildcard symbol.
Handling corruption: As already indicated, iUC includes a speci-
fication for the behavior during corruption of parties and the be-
havior of corrupted parties (similar to the UC model). Essentially,
corrupted parties act as forwarders, i. e., they forward messages
dedicated to them to A and A may act in behalf of them, i. e., can
use the connections of the corrupted party to send messages. In
particular, iUC allows to restrict the behavior of A when imper-
sonating a corrupted party via several parameters. In Fledger, we
use LeakedData to specify which data is leaked on corruption of a
party. Further, we restrict A via AllowAdvMessage to use any of
the subroutines of Fledger on behalf of a corrupted party.
More technical details regarding iUC are available in the full
version of the paper [22] and the iUC paper [11].
Note that, in addition to what is described in Section 2, Fledger as
defined in Figure 5 also provides a read interface for the adversary
(CorruptedRead) on behalf of corrupted parties. This may allow
A to query Fledger on behalf of a corrupted party, e. g., to access
private data of the party which has not been leaked so far.
C FURTHER FEATURES OF Fledger
Here we explain and discuss some features of Fledger that were only
briefly mentioned in Section 2.
Roles in Fledger. By default, Fledger does not distinguish be-
tween different roles of participants. Every party is a client with
the same read and write access to the ledger, while any additional
internal non-client roles, such as miners and notaries, only exist
in the realization. If one needs to further differentiate clients into
different client roles, e.g., to capture that in a realization certain
clients can read only part of the global transaction list while others
can read the full list, then this can be done via a suitable instantia-
tion of the subroutines of Fledger ‚Äì such client-roles can easily be
added as prefixes within PIDs. The subroutines that specify security
properties, such as Fread, can then depend on this prefix and, e.g.,
offer a more or less restricted access to the global transaction list.
Dynamic party registration. The ideal functionality Fledger
keeps track of all currently registered honest parties, including the
time when they registered. An honest party is considered regis-
tered once it issues its first read or write request, modeling that
participants in a distributed ledger first register themselves before
interacting with the ledger. A higher-level protocol can also dereg-
ister a party by sending a deregister command. Such a party is
removed from the set of registered parties (and will be added again
with a new registration time if it ever issues another read or write
request).
This mechanism allows for capturing security properties that
depend on the (time of) registration. For example, an honest party
might only obtain consistency guarantees after it has been regis-
tered for a certain amount of time (due to network delays in the
realization). We note that, just like a clock, party registration is an
entirely optional concept that can be ignored by not letting any
subroutines depend on this information. This is useful to capture
realizations that, e.g., do not model an explicit registration phase
but rather assume this information to be static and fixed at the start
of the protocol run.
Public and private ledgers. Existing functionalities for block-
chains have so far been modeled as so-called global functionalities
using the GUC extension [13] of the UC model. The difference be-
tween a global and a normal/local ideal functionality is that, when
a global functionality is used as a subroutine of a higher-level proto-
col, then also the environment/arbitrary other (unknown) protocols
running in parallel can access and use the same subroutine. This is
often the most reasonable modeling for public blockchains: here, the
same blockchain can be accessed by arbitrarily many higher-level
protocols running in parallel. However, such global functionalities
do not allow for capturing the case of, e.g., a permissioned block-
chain that is used only within a restricted context. This situation
rather corresponds to a local ideal blockchain functionality.
The iUC framework that we use here provides seamless support
for both local and global functionalities, and in particular allows
for arbitrarily changing one to the other. Hence, our functionality
Fledger can be used both as a global or as a local subroutine for
higher-level protocols, allowing for faithfully capturing both public
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1059Figure 5: The ideal ledger functionality Fledger (Part 1).
and private subroutine ledgers. This is possible without proving any
of the realizations again, i.e., once security of a specific realization
has been shown, this can be used in both a public and private
context. As already explained at the beginning of this section, it
is also possible to instantiate subroutines of Fledger in such a way
that they also are (partially) globally accessible, e.g., to provide a
global random oracle to other protocols. This can be done even in
cases where Fledger itself is used as a private subroutine.
Modelling smart contracts. We also note that Fledger fully
supports capturing smart contracts, if needed. Typically, smart con-
tracts are modeled by fixing some arbitrary programming language
for specifying those smart contracts as a parameter of Fledger (the
security analysis is then performed for an arbitrary but fixed pa-
rameter which makes the security result independent of a specific
smart contract language). Smart contracts are then simply bit strings
which are interpreted by the subroutines Fsubmit, Fupdate, Fread, etc.
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1060Figure 6: The ideal ledger functionality Fledger (Part 2).
according to the fixed smart contract programming language. While
interpreting a smart contract, these subroutines can then enforce
additional security properties as desired, e.g., they might ensure
that all smart contracts added to the global state are indeed well
defined (according to the fixed programming language) and/or that
running the smart contracts yields the correct results as specified
in some transaction.
We use this concept to model smart contracts in our Corda case
study. Here, our subroutines of Fledger (as part of transaction valida-
tion) guarantee the property of correct execution of smart contracts,
i.e., the output states of transactions were indeed computed by run-
ning the referenced smart contracts correctly. As stated above, our
security analysis of Corda treats the programming language as an
arbitrary parameter and hence our results show that Corda provides
correct execution of smart contracts independently of the chosen
smart contract programming language as long as all participants
agree on the same language.
We note that, if the algorithm used by smart contracts can be
provided externally by the adversary/environment, then the exe-
cution of smart contracts in Fledger needs to be upper bounded by
some polynomial in order to preserve the polynomial runtime of
the ideal functionality as required for composition. Observe, how-
ever, that most if not all distributed ledgers in reality, including
Corda, already hard code such a polynomial upper bound into their
protocol to prevent malicious clients form creating smart contracts
with exponential (or worse) runtime. The same bound can be used
for Fledger.
D FURTHER DETAILS Gledger REALIZES Fledger
In this section, we provide a detailed explanation the instantiation of
Fledger to cover the ideal blockchain functionality Gledger. Further,
we provide an additional comparison between Gledger and Fledger.
In our technical report [22], we provide the full formal specifications
of all machines and a formal proof of Theorem 3.1.
Our ideal functionality Fledger is in the spirit of and adopts some
of the underlying ideas from the existing ideal blockchain func-
tionality Gledger. As a result, both functionalities share similarities
at a high level. More specifically, Gledger also offers a writing and
reading interface for parties. It is parameterized with several algo-
rithms validate, extendPolicy, Blockify, and predictTime that have
to be instantiated by a protocol designer to capture various security
properties. By default, Gledger provides only the security property
of consistency. An honest party can submit a transaction to Gledger.
If this transaction is valid, as decided by the validate algorithm,
then it is added to a buffer list. Gledger has a global list of blocks
containing transactions. This list is updated (based on a bit string
that the adversary has previously provided) in a preprocessing
phase of honest parties. More specifically, whenever an honest
party activates Gledger, the extendPolicy algorithm is executed to
decide whether new blocks are appended to the global list of blocks,
with the Blockify algorithm defining the exact format of those new
blocks. Then the validate algorithm is called to remove all transac-
tions from the buffer that are now, after the update of the global
blockchain, considered invalid. An honest party can then read from
the global blockchain. More specifically, if the honest party has
been registered for a sufficiently long amount of time (larger than
parameter ùõø), then it obtains a prefix of the chain that contains
all but the last at most windowSize ‚àà N blocks. This captures the
security property of consistency. In addition to these basic opera-
tions, Gledger also supports dynamic (de-)registration of parties and
offers a clock, modeled via a subroutine Gclock, that is advanced by
Gledger depending on the output of the predictTime algorithm (and
some additional constraints).
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1061While there are many similarities, there are also several key
differences between Gledger and our functionality Fledger:
‚Ä¢ Gledger requires all transactions to be arranged in ‚Äúblocks‚Äù (gen-
erated via the Blockify algorithm) and then always provides the
security property of consistency for those blocks. As already
explained in Section 2, these are strictly stronger requirements
than the ones from Fledger, which only require the existence
of a global ordered list of transactions. In particular, many dis-
tributed ledgers, such as Corda, are not designed to generate
blocks or to provide consistency, and hence, cannot realize
Gledger.
‚Ä¢ While Gledger already includes several parameters to customize
security properties, there are no parameters for customizing
the reading operation. Hence, Gledger cannot capture access
and privacy security properties for transactions in a blockchain
(as all honest participants can always read a full prefix of the
chain).9
‚Ä¢ The view Gledger provides to higher-level protocols is lower
level and closer to the envisioned realization than the one of
Fledger. In particular, Gledger includes an additional operation
MaintainLedger which has to be called by a higher-level pro-
tocol in order to allow time to advance, modeling that a higher-
level protocol has to regularly and manually trigger mining
operations (or some similar security relevant tasks) for security
to hold true. Similarly, the clock used by Gledger prevents any
time advances unless all parties have notified the clock to allow
for time to advance, again forcing a higher-level protocol to
manually deal with this aspect.
‚Ä¢ While Gledger includes a predictTime parameter to customize
advancing time, this parameter is actually more restricted than
the one from Fledger: the predictTime can depend only on the
set of activations from honest parties but not, e.g., the global
state or buffer list of transactions.
As can be seen from the above list, the main differences between
Gledger and Fledger are due to (i) different levels of abstraction on the
I/O interface to higher-level protocols and (ii) the fact that Gledger is
tailored towards publicly accessible blockchains. Hence, intuitively,
it should be possible to show that Fledger is a generalization of
Gledger. Indeed, one can instantiate Fledger appropriately to transfer
security properties provided by Gledger to the level of Fledger.
read
leak
init
, F Gledger
update
, F Gledger
submit
Formally, we define the instantiation F Gledger
ledger
, F Gledger
as the protocol
, F Gledger
updRnd , F Gledger
(Fledger | F Gledger
).
The general idea for the instantiated subroutines is to run the same
operations as Gledger, including the parameterized algorithms of
Gledger that determine the precise security properties provided by
the global transaction list. By this, the instantiation F Gledger
, just as
ledger
Gledger, enforces the security property of consistency for all partic-
ipants while also inheriting all further security properties provided
for the global state, if any, from the parameterized algorithms. More
specifically:
‚Ä¢ F Gledger
is defined to run the extendPolicy algorithm to gen-
init
erate the initial transaction list (that is read from the blocks
9This aspect is actually one of the key differences between Gledger and its variant GPL
for privacy in blockchains: the latter also introduces a parameter for read operations.
executes the validate algorithm to check validity of
output by the algorithm). This is because extendPolicy might
already generate a genesis block during the preprocessing of
the first activation of the functionality, before any transactions
have even been submitted.
‚Ä¢ F Gledger
submit
incoming transactions.
‚Ä¢ F Gledger
executes the extendPolicy and Blockify algorithms to
update
generate new blocks from the update proposed by the adver-
sary. These blocks are transformed into individual transactions,
which are appended to the global transaction list of Fledger to-
gether with a special meta transaction that indicates a block
boundary. Additionally, the validate algorithm is used to decide
which transactions are removed from the transaction buffer.
‚Ä¢ F Gledger
checks whether a party has already been registered
read
for an amount of time larger than ùõø and then either requests
the adversary to provide a pointer to a transaction within the
last windowSize blocks or lets the adversary determine the full
output of the party. We note that F Gledger
has to always use
non-local reads: this is because a read operation in Gledger might
change the global state during the preprocessing phase and
before generating an output, i.e., read operations are generally
not immediate (in the sense defined in Section 2).
‚Ä¢ If the parameters of Gledger are such that they guarantee the
property of liveness, then F Gledger
updRnd can be defined to also encode
this property (cf. Section 2); similarly for the time dependent
property of chain-growth and other time-related properties.
‚Ä¢ F Gledger