# 十一、下一步是什么？
Docker 生态系统正朝着更大的方向发展，Swarm 将是其中的核心组件之一。让我们假设一个路线图。
# 供应的挑战
目前还没有官方工具来创建一个大规模的 Swarm。目前，操作人员使用内部脚本、临时工具(如 Belt)、配置管理器(如 Puppet 或 Ansible)或编排模板(如 AWS 的 CloudFormation 或 OpenStack 的 Heat)，正如我们在前面几章中看到的那样。最近，AWS 和 Azure 的 Docker 作为替代品出现了。
但是这个用例可能会用软件定义的基础设施工具包以统一的方式来解决。
# 软件定义的基础设施
从容器作为构建模块开始，到创建系统来设计、编排、扩展、保护和部署应用和基础设施，长期目标可能是*可编程互联网*。
继 FlowKit 之后，这是编排套件，Docker 于 2016 年 10 月开源了基础架构套件 **Infrakit** 。
## 基础设施
而 Docker Engine 的重点是容器，Docker Swarm 的重点是编排，Infrakit 的重点是将*组*作为原语。群组适用于任何对象:宠物、牛、单核和蜂群。
Infrakit 解决了在不同基础设施中管理 Docker 的问题。在 Infrakit 之前，这很困难，而且不便携。其想法是从构建数据中心到运行裸容器提供一致的用户体验。Infrakit 是 Docker 目前用于创建可编程基础设施的最高级别抽象，它将自己描述为:
> *“infra kit 是一个用于创建和管理声明性、自我修复基础设施的工具包。它将基础设施自动化分解为简单的可插拔组件。这些组件协同工作，积极确保基础架构状态符合用户的规范。”*
栈中的 Infrakit 靠在容器发动机的侧面。
![Infrakit](img/image_11_001.jpg)
该组织是按组划分的。Infrakit 本身的结构有一个组，由保持配置的经理组成。一次只有一个领导者，例如，一些追随者有两个。每个经理都包括一些组声明。群体可以是牛、宠物、蜂群、单核等等。每个组都用实例(真正的资源，例如容器)和风格(资源的类型，例如 Ubuntu Xenial 或 MySQL Docker 映像)来定义。
Infrakit 是声明性的。它依赖于 JSON 配置，并在内部使用众所周知的封装和组合模式来将配置作为输入进行处理，并使基础架构收敛到特定的配置。
Infrakit 的目标是:
*   提供统一的工具包来管理组
*   可插拔
*   提供自我修复
*   发布滚动更新
组抽象了对象的概念。它们可以是任何大小和比例的组，也可以是命名的宠物、未命名的牛、Infrakit 经理本身和/或以上所有的组合。目前，在 Infrakit 中只有一个默认的组配置(默认插件)，但是新的组定义可能会在以后出现。默认组是一个显示操作的界面，例如监视/取消监视(启动和停止组)、执行/停止更新、更改组大小。
组由实例组成。它们可能是物理资源，如虚拟机或容器，或者是其他服务的接口，如 Terraform。
在实例上，你可以运行各种风格，例如，Zookeeper，MySQL，或者 Ubuntu Xenial。
组、实例和风格是可插入的:它们实际上作为可以用任何语言编写的插件运行。目前，Infrakit 提供了一些 Go 代码，这些代码在编译时会给出一组二进制文件，如 cli，可用于控制、检查和执行对组、实例和风格的操作，以及插件二进制文件，如 terraform、swarm 或 zookeeper。
Infrakit 被认为能够通过持续监控、检测异常和触发动作来管理不一致。这种适当性被称为自我修复，可以用来创建更强大的系统。
Infrakit 支持的主要操作之一是发布滚动更新来更新实例。例如，更新容器中的包，更新容器映像，或者其他，可以使用 **TUF** ( **更新框架**，这是下一节中描述的项目。
Infrakit 在写作的时候是如此的早和年轻，以至于我们不能展示任何不是 Hello World 的例子。在互联网上，它将很快充满 Infrakit Hello Worlds，Infrakit 团队自己也发布了一个分步教程，将它与文件或 Terraform 插件一起使用。我们可以将它描述为 Docker 生态系统中的架构层，并期望它能够部署甚至集群，提供主机并将其互连。
Infrakit 有望被包括在引擎中，可能在 1.14 版本中作为实验。
## TUF -更新框架
在柏林举行的 Docker Summit 16 上，讨论了另一个主题，TUF([https://theupdateframework.github.io/](https://theupdateframework.github.io/))，这是一个旨在提供安全的滚动更新方式的工具包。
有许多可用的更新工具，可以在实践中进行更新，但 TUF 要多得多。从项目的主页:
> *“TUF 帮助开发人员保护新的或现有的软件更新系统，这些系统经常容易受到许多已知攻击。TUF 通过提供一个全面、灵活的安全框架来解决这个普遍存在的问题，开发人员可以与任何软件更新系统集成。”*
TUF 已经集成到 Docker 中，该工具被称为公证人，正如我们在[第 9 章](09.html "Chapter 9. Securing a Swarm Cluster and the Docker Software Supply Chain")、*保护集群和 Docker 软件供应链*中看到的，公证人可以使用。公证可以用来验证内容，使密钥管理变得容易。通过公证，开发人员可以使用密钥对其内容进行离线签名，然后通过将其签名的可信集合推送到公证服务器来使内容可用。
TUF 会被合并到 Docker Infrakit 中作为滚动更新机制吗？这将是又一个惊人的进步。
# Docker 堆和复合物
开发人员可以使用但仍处于实验阶段的另一个 Docker 特性是 Stacks。我们在[第 6 章](06.html "Chapter 6. Deploy Real Applications on Swarm")、*中介绍了栈，在 Swarm* 上部署真实应用。它们将成为在集群上部署应用的默认方法。这个想法不是将容器放入运动中，而是将包装成捆的容器组推出。
此外，组合和新的 Swarm 之间的新集成也是可以预期的。
# CaaS -容器即服务
在 XaaS 竞技场，一切都被视为软件，不仅容器是一流的公民，而且编排系统和基础设施也将是。所有这些抽象将导致运行这个工具生态系统的云定义方式:容器即服务。
CaaS 的一个例子是 Docker 数据中心。