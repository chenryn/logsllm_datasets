| Mac |Mac OS log |16.09MB |
| OpenSSH |OpenSSH server log |70.02MB |
| OpenStack |OpenStack software log |58.61MB |
| Proxifier |Proxifier software log |2.42MB |
| Spark |Spark job log |2.75GB |
| Thunderbird |Thunderbird supercomputer log |29.60GB |
| Windows |Windows event log |26.09GB |
| Zookeeper |ZooKeeper service log |9.95MB |
5.2 Accuracy5.2 Accuracy
In this subsection, we present the evaluation results on the accuracy of Logram.
7Prior approach by Zhu et al. [21] defines an accuracy metric as the ratio of correctly parsed log messages over the total number of log messages. In order to calculate the parsing accuracy, a log event template is generated for each log message and log messages with the same template will be grouped together. If all the log messages that are grouped together indeed belong to the same log template, and all the log messages that indeed belong to this log template are in this group, the log messages are considered parsed correctly. However, the grouping accuracy has a limitation that it only determines whether the logs from the same events are grouped together; while the static text and dynamic variables in the logs may not be correctly identified.On the other hand, correctly identifying the static text and dynamic variables are indeed important for various log analysis. For example, Xu et al. [5] consider the variation of the dynamic variables to detect run-time anomalies. Therefore, we manually check the parsing results of each log message and determine whether the static text and dynamic variables are correctly parsed, i.e., parsing accuracy. In other words, a log message is considered correctly parsed if and only if all its static text and dynamic variables are correctly identified.TABLE 3 
Accuracy of Logram compared with other log parsers. The results that are the highest among the parsers or higher than 0.9 are highlighted in bold.
Name Drain AEL Lenma Spell IPLoM  Logram
| Android | 0.933 | 0.867 | 0.976 | 0.933 | 0.716 |  | 0.848 |
|---|---|---|---|---|---|---|---|
| Apache |0.693 |0.693 |0.693 |0.693 |0.693 | |0.699 |
| BGL |0.822 |0.818 |0.577 |0.639 |0.792 | |0.740 || Hadoop |0.545 |0.539 |0.535 |0.192 |0.373 | |0.965 |
| HDFS |0.999 |0.999 |0.998 |0.999 |0.998 | |0.981 |
| HealthApp |0.609 |0.615 |0.141 |0.602 |0.651 | |0.969 |
| HPC |0.929 |0.990 |0.915 |0.694 |0.979 | |0.959 |
| Linux |0.250 |0.241 |0.251 |0.131 |0.235 | |0.460 |
| Mac |0.515 |0.579 |0.551 |0.434 |0.503 | |0.666 |
| openSSH |0.507 |0.247 |0.522 |0.507 |0.508 | |0.847 || Openstack |0.538 |0.718 |0.759 |0.592 |0.697 | |0.545 |
| Proxifier |0.973 |0.968 |0.955 |0.785 |0.975 | |0.951 |
| Spark |0.902 |0.965 |0.943 |0.8645 |0.883 | |0.903 |
| Thunderbird |0.803 |0.782 |0.814 |0.773 |0.505 | |0.761 |
| Windows |0.983 |0.983 |0.277 |0.978 |0.554 | |0.957 |
| Zookeeper |0.962 |0.922 |0.842 |0.955 |0.967 | |0.955 |
Average 0.748 0.745 0.672 0.669 0.689  0.825
ResultsLogram can achieve the best or over 0.9 accuracy in parsing 12 out of the 16 log datasets. Table 3 shows the accuracy on 16 datasets. Following the prior log-parsing benchmark [21], we highlight the accuracy results that are higher than 0.9, and highlight the highest accuracy in the same manner. We find that Logram has a higher or comparable accuracy compared to all other existing log parsers. On average, our approach has an accuracy of 0.825, while the second highest accurate approach, i.e., Drain, only has an average accuracy of 0.748. In eight log data sets, Logram has an parsing accuracy higher than 0.9 and in the four out of the rest eight datasets, Logram has the highest parsing accu-racy among all parsers. Since Logram is designed based on processing every token in a log instead of comparing eachline of logs with others, Logram exceeds other approaches in terms of parsing accuracy. In other words, even though prior approaches may often correctly group log messages together, the static text and dynamic variables from these log messages may not be correctly identified. Take the log parser, Spell as an example. When parsing Hadoop logs the parsing accuracy is only 0.192. By manually checking the results, we find that some groups of logs share the string in host names that are generated from dynamic variables. For example, a log message “Address change detected. Old: msra-sa-41/10.190.173.170:9000 New: msra-sa-41:9000” in the benchmark is parsed into a log template “Address change detected. Old msra-sa-41/  New msra-sa-41 ”. We can see that the string “msra-sa” in the host names is not correctly detected as dynamic variables. However, since all the log messages in this category have such string in the host names, even though Spell cannot identify the dynamic variables, the log messages are still grouped together.Finally, by manually studying the incorrectly parsed log messages by Logram, we identify the following three reasons of incorrectly parsed log messages:
| 5.3 | 1) | Mis-split tokens. Some log messages contains spe- |
|---|---|---|
| 5.3 |2) |cial tokens such as + and { to separate two to-kens. In addition, sometimes static text and dynamic |
| 5.3 |2) |variables are printed into one single token without || 5.3 |2) |any separator (like white space). It is difficult for a |
| 5.3 |2) |token-based approach to address such cases. |
| 5.3 |2) |Pre-processing errors. The pre-processing of com- |
| 5.3 |3) |mon formats may introduce mistakes to the log |