title:Binary mutation testing through dynamic translation
author:Markus Becker and
Christoph Kuznik and
Mabel M. Joy and
Tao Xie and
Wolfgang M&quot;uller
Binary Mutation Testing Through Dynamic Translation
Markus Becker, Christoph Kuznik, Mabel Mary Joy, Tao Xie and Wolfgang Mueller‡
Faculty of Electrical Engineering, Computer Science and Mathematics
University of Paderborn/C-LAB, D-33102 Paderborn, Germany
{beckerm, kuznik, mabeljoy, tao, wolfgang}@c-lab.de
Abstract—This paper presents a novel mutation based testing
method through binary mutation. For this, a table of mutants
is derived by control ﬂow analysis of a disassembled binary
under test. Mutations are injected at runtime by dynamic
translation. Thus, our approach neither relies on source code
nor a certain compiler. As instrumentation is avoided, testing
results correspond to the original binary. In addition to high-
level language faults, the proposed approach captures target
speciﬁc faults related to compiling and linking. We investigated
the software of an automotive case study. For this, a taxonomy
of mutation operators for the ARM instruction set is proposed.
Our experimental results prove 100% accuracy w.r.t. conﬁ-
dence metrics provided by conventional testing methods while
avoiding signiﬁcant mutant compilation overhead. Further
speed up is achieved by an efﬁcient binary mutation testing
framework that relies on extending the open source software
emulator QEMU.
Keywords-Embedded software veriﬁcation; software emula-
tion; fault-based testing; mutation analysis; test conﬁdence;
I. INTRODUCTION
Today’s embedded systems software has become increas-
ingly complex. Thus, advanced veriﬁcation methods are
mandatory in order to maintain a high level of dependability,
while managing costs at the same time. Though, consider-
able progress has been made in the ﬁeld of formal veriﬁ-
cation throughout the recent years, testing is still a crucial
building block in order to achieve a high degree of reliability
as it scales well with increasing complexity. However, as
exhaustive testing (i.e., testing of all possible test cases) is
commonly not applicable, the signiﬁcance of testing results
depends on the pertinence of the used set of test cases. Here,
mutation based testing methods have proven to be valuable
in order to answer the testing inherent philosophical question
,,Who guards the guardians?” by means of providing an
objective measure for the test conﬁdence.
Mutation based testing measures the quality of a set of test
cases in terms of assessing the ability to disclose software
faults. For this, mutations are injected into the software
under test. The faulty software (referred to as mutant) is
executed with the provided test cases. A mutant is considered
as being killed when the mutation is getting propagated
to the outputs. The quality metric for the given test cases
is deﬁned by the number of killed mutants w.r.t. the total
number of mutants.
‡We declare that the material presented in this paper has been cleared
through the afﬁliations of the author(s).
978-1-4673-1625-5/12/$31.00 ©2012 IEEE
Mutation testing is commonly applied to high-level lan-
guages (e.g., Java, C/C++) by instrumenting the source code.
This leads to a set of drawbacks which decreases the accep-
tance of mutation testing in practical design environments.
First, it requires the availability of source code which is
sometimes not accessible due to intellectual property issues.
For instance, when commercial off-the-shelf software (e.g.,
software modules or libraries) provided by a supplier is
integrated as object/binary code. Second, as the source code
needs to be instrumented testing results do not rely on
the original software shipped with the product. Moreover,
mutants are typically derived either by compilation of the
instrumented source code or through a special compiler. The
former approach results in additional compilation overhead
as each mutant has to be compiled individually. The latter
approach requires a modiﬁcation to the compiler.
Thus, we propose the novel approach of binary mutation
testing. Here, mutants are derived from the original binary
under test by applying binary analysis prior to its execution.
Our approach does neither suppose the availability of source
code nor the use of a certain compiler. By applying muta-
tions to binary code we are able to capture faults speciﬁc to a
certain target instruction set architecture and tool chain (e.g.,
induced through compiling or linking). We also introduce an
efﬁcient framework for binary mutation testing of ARM code
by means of extending QEMU: an open source software
emulator based on dynamic translation. Here, we propose a
set of speed up extensions in order to further reduce mutant
testing overhead.
For the evaluation of the proposed approach an industrial
case study from the automotive domain has been inves-
tigated. We considered the accuracy and performance of
deriving test conﬁdence measures in terms of comparing
binary mutation testing to conventional source code mutation
testing. Evaluations were made on different sets of test
cases created by two test case generators provided with the
case study: a fault tolerant fuel injection control system. By
employing two typical mutation operators we were able to
prove that binary mutation testing reaches 100% accuracy
w.r.t.
the metrics derived by the source code mutation
approach.
Concerning performance we were able to reach signiﬁcant
speed up, though our framework relies on the execution of
non-native code. Here, the avoidance of individual mutant
compilation and the use of binary translation result
in
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:48:31 UTC from IEEE Xplore.  Restrictions apply. 
remarkable acceleration, which is close to native speed.
Further speed up is achieved by online mutant detection, mu-
tant skipping through coverage pre-analysis, and multicore
utilization. For the given case study, the break even for the
QEMU approach w.r.t. native execution is below 100,000-
1,000,000 test cases per mutant. Moreover, we compared
the QEMU framework to a different approach based on the
conventional instruction set simulator GDB/ARMulator that
comes with the gcc tool chain for ARM. Here, the QEMU
testing speed up is approximately 100x-1000x in average.
The remaining paper is organized as follows. Section
II gives a brief introduction on fundamentals. Section III
describes the binary mutation testing approach, its applica-
tion to the ARM instruction set architecture, and the binary
translation based testing framework. Section IV provides
the accuracy and performance evaluation based on the fuel
injection controller case study. In Section V we describe
related research work on the ﬁelds of mutation testing.
Finally, in Section VI we conclude before giving a short
outlook to our future work in Section VII.
II. FUNDAMENTALS
In this section a brief introduction is given to the general
mutation testing approach, the ARM instruction set archi-
tecture, and the binary translation approach implemented by
QEMU.
A. Mutation Based Testing
Mutation testing measures the quality of test data by
their ability to reveal faults which are deliberately seeded
into the software program under test. The possible fault
injections are modeled by a set of mutation operators. Each
mutation operator represents a type of syntactic change on
programs such as replacing a plus with a minus or replacing
a condition expression with true:
c = a + b; → c = a − b;
if (a *
HI
GE ≥
GT >
AL Always
*unsigned
Flags test
Z set
C set
N set
V set
C set, Z clear
N=V
Z clear, N=V
Flags ignored
CC Condition
(cid:54)=
NE
LO <*
PL ≥ 0
VC
LS ≤*
LT <
LE ≤
NV Never
!Overﬂow
Flags test
Z clear
C clear
N clear
V clear
C clear, Z set
N(cid:54)=V
Z set, N(cid:54)=V
Flags ignored
Table I
ARM CONDITION CODES.
register. By using conditional execution performance and
code density can be increased. The conditional code is a two
letter mnemonic appended to the instruction mnemonic. The
default mnemonic is AL, or always execute. Conditional ex-
ecution reduces the number of branches, which also reduces
the number of pipeline ﬂushes and thus improves the perfor-
mance of the executed code. Conditional execution depends
upon two components: conditional code and condition ﬂags.
The condition code is located in the instruction word, and
the conditional ﬂags negative (N), zero (Z), carry (C), and
overﬂow (V) are held in the Current Program Status Register
(CPSR). Condition ﬂags can be updated through instructions
by appending the respective instruction ﬂag mnemonic (S).
Table I lists the complete set of condition codes with the
according ﬂag testing being performed.
C. The QEMU Dynamic Binary Translator
Dynamic binary translation is used for efﬁcient conversion
of an Instruction Set Architecture (ISA) into a different
ISA, e.g., when the ISA of an executable differs from its
execution environment. Unlike static binary translation only
code encountered at runtime is considered, thereby avoiding
unnecessary translation overhead. This is sometimes also
referred to as Just-In-Time (JIT) compilation technique. In
contrast to instruction interpreting Instruction Set Simulators
(ISS) code translation is performed on basic block level,
i.e., linear code segments until a ﬁnal branch instruction.
Moreover, translated blocks (TB) are stored in a translation
cache in order to provide execution speed close to native
execution by avoiding redundant translation. Dynamic binary
translation is often used for fast CPU emulation especially
when there is no need for a detailed model of the CPU’s
micro architecture.
QEMU [6][7] is an open source software emulator based
on dynamic binary translation with support for different
target and host platforms. Besides x86 many other ar-
chitectures are supported, e.g., ARM, PowerPC, SPARC,
MIPS or Microblaze. In general, QEMU can operate in two
emulation modes: user mode and system mode. The user
mode provides user space emulation for a single program on
top of the Linux operating system. QEMU full system mode
provides emulation of an entire target system including I/O
in order to run a complete software stack, i.e., boot ﬁrmware,
operating system, and kernel space device drivers.
bl 0xd768
Front end (ARM) Intermediate (TCG)
mov r0, r5
mov_i32 tmp, r5
mov_i32 r0, tmp
movi_i32 tmp, $0xd720 mov $0xd720, %ebx
mov_i32 r14, tmp
goto_tb $0x0
movi_i32 pc, $0xd768
exit_tb $0xb550fe60
Back end (x86)
mov 0x14(%ebp), %ebx
mov %ebx, 0x0(%ebp)
mov %ebx, 0x38(%ebp)
jmp 0x601be463
mov $0xd768, %ebx
mov $0xb550fe60, %eax
jmp 0x621de9a8
QEMU BINARY TRANSLATION THROUGH TCG MICRO CODE.
Table II
The effort of porting QEMU to new target and host
platforms is reduced through indirect translation by mapping
front-end and back-end to an intermediate representation,
i.e., a canonical set of micro operations. In QEMU this
is achieved by a so called Tiny Code Generator (TCG).
The TCG accepts blocks of intermediate micro code (also
referred to as TCG micro code) generated from the decoded
target binary in order to rewrite blocks of native host code.
Table II shows the indirect translation of a simple basic
block of ARM code (performing a subroutine call) into
functionally equivalent x86 code. Each of the decoded
ARM instruction invokes the generation of a set of simpler
intermediate micro operations working on a virtual register
set. The resulting block of micro code is subject to on-the-
ﬂy optimizations before it is rewritten as translated block of
x86 code. The translation cache of QEMU maintains a hash
table mapping an entry address of a target code block to the
respective address of the translated block. Hence, in case
a block is executed multiple times (e.g., with functions or
loops) the major emulation effort of the nth execution is just
jumping to the translated block’s entry address being looked
up from the hash table. Additional speed up is achieved by
chaining the execution of translated blocks without returning
to the emulator’s main loop.
III. BINARY MUTATION TESTING
This section describes our binary mutation testing ap-
proach. Initially, a description of the general ﬂow and its
application to the ARM instruction set format is given. This
is followed by a detailed description of our mutation testing
framework based on the QEMU dynamic binary translator.
A. Binary Mutation Testing Flow
Fig. 1 depicts the testing ﬂow which is composed of three
major steps: binary analysis followed by mutation testing
and evaluation. In contrast to source code mutation testing,
a table of mutations is derived from the original binary
by means of binary analysis (as we do not suppose the
availability of source code). For this, the input binary is
ﬁrst disassembled and transformed into a control ﬂow graph
(CFG). Here, the disassembled basic blocks of the binary
are represented by nodes connected through directed edges.
An edge corresponds to the control ﬂow between two basic
blocks, e.g., through branches. Based on a further analysis of
the CFG, the mutation table is generated describing binary