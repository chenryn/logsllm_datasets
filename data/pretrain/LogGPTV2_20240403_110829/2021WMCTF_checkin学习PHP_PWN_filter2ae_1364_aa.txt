# 2021WMCTF_checkin学习PHP PWN
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
很早的比赛中就出现了web pwn类型的题目，不久前参加的WMCTF中也出现了一道PHP PWN，以前从来没有接触过，比赛时无从下手，赛后复现学习一下PHP
PWN的基本利用思路。
## 环境搭建
结合以前该类型的pwn题，考察点主要是php拓展模块的漏洞利用，一般是自己实现的php的so文件，对这个so文件进行逆向分析，找到漏洞点，写php脚本实现漏洞利用。
本题给了一个Docker环境已经部署好php
pwn的环境，并且容器中安装了gdbserver，不需要再自己安装对应版本的php再手动添加拓展模块，并且方便了调试。
只需要将Docker镜像导入再拉起容器即可。
导入镜像命令：
`sudo docker load  /usr/local/lib/php/extensions/no-debug-non-zts-20200930 => /usr/local/lib/php/extensions/no-debug-non-zts-20200930
    sqlite3.extension_dir => no value => no value
    root@cc:/# ls /usr/local/lib/php/extensions/no-debug-non-zts-20200930
    opcache.so  sodium.so  wmctf_php_pwn.so
前面提到容器中已经安装了gdbserver，运行php，映射到端口6666，在本机上指定该端口即可调试，就本题写一个测试脚本。
上述函数时php拓展模块中函数zif_welcome_to_wmctf：
`php_printf("Welcome to WMCTF! :)\nWMcake.BabyCake.Ezcake.simpleCAke.\n");`
Docker：
`gdbserver 127.0.0.1:6666 php 1.php`
本地gdb启动命令：
    target remote 127.0.0.1:6666
    add-symbol-file wmctf_php_pwn.so
    b zif_welcome_to_wmctf
    c
php成功加载了拓展模块：
至此，调试环境已经搭好。
## PHP变量基本结构
刚开始逆向wmctf_php_pwn.so的时候，函数传参一脸懵逼，完全通过手头的wp和函数功能来猜参数意义，然后跟着Clang师傅的博客学习了一下PHP变量结构。
以zif_wm_add函数为例，IDA中参数解析部分如下：
    size_t __fastcall zif_wm_add(__int64 a1, __int64 a2)
    {
      unsigned int args_num; // er12
      __int64 v3; // r12
      size_t v4; // rbx
      size_t result; // rax
      char *v6; // rax
      Cake *v7; // r13
      __int64 v8; // r13
      __int64 v9; // rcx
      unsigned __int64 v10; // [rsp+0h] [rbp-38h] BYREF
      __int64 v11[6]; // [rsp+8h] [rbp-30h] BYREF
      args_num = *(_DWORD *)(a1 + 44);
      v10 = 0LL;
      if ( args_num != 2 )
        return zif_wm_add_cold_2(a1, a2);
      if ( *(_BYTE *)(a1 + 88) == 4 )
      {
        v10 = *(_QWORD *)(a1 + 80);
      }
      else
      {
        v8 = a1 + 80;
        if ( !(unsigned __int8)zend_parse_arg_long_slow(a1 + 80, &v10) )
        {
          v9 = 0LL;
          args_num = 1;
          return zend_wrong_parameter_error(9LL, args_num, 0LL, v9, v8);
        }
      }
      if ( *(_BYTE *)(a1 + 104) != 6 )
      {
        v8 = a1 + 96;
        if ( (unsigned __int8)zend_parse_arg_str_slow(a1 + 96, v11) )
        {
          v3 = v11[0];
          goto LABEL_6;
        }
        v9 = 4LL;
        return zend_wrong_parameter_error(9LL, args_num, 0LL, v9, v8);
      }
调试在该处下断点，结合php源码Zend/zend_types.h中的定义，跟变量有关的基本结构体是_zval_struct，变量类型由type决定，type决定了value对应的结构体类型:
    struct _zval_struct {
        zend_value        value;            /* value */
        union {
            uint32_t type_info;
            struct {
                ZEND_ENDIAN_LOHI_3(
                    zend_uchar    type,            /* active type */
                    zend_uchar    type_flags,
                    union {
                        uint16_t  extra;        /* not further specified */
                    } u)
            } v;
        } u1;
        union {
            uint32_t     next;                 /* hash collision chain */
            uint32_t     cache_slot;           /* cache slot (for RECV_INIT) */
            uint32_t     opline_num;           /* opline number (for FAST_CALL) */
            uint32_t     lineno;               /* line number (for ast nodes) */
            uint32_t     num_args;             /* arguments number for EX(This) */
            uint32_t     fe_pos;               /* foreach position */
            uint32_t     fe_iter_idx;          /* foreach iterator index */
            uint32_t     access_flags;         /* class constant access flags */
            uint32_t     property_guard;       /* single property guard */
            uint32_t     constant_flags;       /* constant flags */
            uint32_t     extra;                /* not further specified */
        } u2;
    };
type的值也在该文件中：
    /* Regular data types: Must be in sync with zend_variables.c. */
    #define IS_UNDEF                    0
    #define IS_NULL                        1
    #define IS_FALSE                    2
    #define IS_TRUE                        3
    #define IS_LONG                        4
    #define IS_DOUBLE                    5
    #define IS_STRING                    6
    #define IS_ARRAY                    7
    #define IS_OBJECT                    8
    #define IS_RESOURCE                    9
    #define IS_REFERENCE                10
    #define IS_CONSTANT_AST                11 /* Constant expressions */
    /* Fake types used only for type hinting.
     * These are allowed to overlap with the types below. */
    #define IS_CALLABLE                    12
    #define IS_ITERABLE                    13
    #define IS_VOID                        14
    #define IS_STATIC                    15
    #define IS_MIXED                    16
    /* internal types */
    #define IS_INDIRECT                 12
    #define IS_PTR                        13