Chapter 18 n Attacking the Application Server 699
Summary
As with the other components on which a web application runs, the web server
represents a signifi cant area of attack surface via which an application may be
compromised. Defects in an application server can often directly undermine
an application’s security by giving access to directory listings, source code for
executable pages, sensitive confi guration and runtime data, and the ability to
bypass input fi lters.
Because of the wide variety of application server products and versions,
locating web server vulnerabilities usually involves some reconnaissance and
research. However, this is one area in which automated scanning tools can be
highly effective at quickly locating known vulnerabilities within the confi gura-
tion and software of the server you are attacking.
Questions
Answers can be found at http://mdsec.net/wahh.
1. Under what circumstances does a web server display a directory listing?
2. What are WebDAV methods used for, and why might they be dangerous?
3. How can you exploit a web server that is confi gured to act as a web proxy?
4. What is the Oracle PL/SQL Exclusion List, and how can it be bypassed?
5. If a web server allows access to its functionality over both HTTP and
HTTPS, are there any advantages to using one protocol over the other
when you are probing for vulnerabilities?
cc1188..iinndddd 669999 88//1199//22001111 1122::1177::5566 PPMM
cc1188..iinndddd 770000 88//1199//22001111 1122::1177::5566 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 701
CHAPTER
19
Finding Vulnerabilities
in Source Code
So far, the attack techniques we have described have all involved interacting
with a live running application and have largely consisted of submitting crafted
input to the application and monitoring its responses. This chapter examines an
entirely different approach to fi nding vulnerabilities — reviewing the applica-
tion’s source code.
In various situations it may be possible to perform a source code audit to help
attack a target web application:
n Some applications are open source, or use open source components,
enabling you to download their code from the relevant repository and
scour it for vulnerabilities.
n If you are performing a penetration test in a consultancy context, the appli-
cation owner may grant you access to his or her source code to maximize
the effectiveness of your audit.
n You may discover a fi le disclosure vulnerability within an application that
enables you to download its source code (either partially or in its entirety).
n Most applications use some client-side code such as JavaScript, which is
accessible without requiring any privileged access.
It is often believed that to carry out a code review, you must be an experi-
enced programmer and have detailed knowledge of the language being used.
However, this need not be the case. Many higher-level languages can be read
701
cc1199..iinndddd 770011 88//1199//22001111 1122::1188::3344 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 702
702 Chapter 19 n Finding Vulnerabilities in Source Code
and understood by someone with limited programming experience. Also, many
types of vulnerabilities manifest themselves in the same way across all the lan-
guages commonly used for web applications. The majority of code reviews can
be carried out using a standard methodology. You can use a cheat sheet to help
understand the relevant syntax and APIs that are specifi c to the language and
environment you are dealing with. This chapter describes the core methodol-
ogy you need to follow and provides cheat sheets for some of the languages
you are likely to encounter.
Approaches to Code Review
You can take a variety of approaches to carrying out a code review to help
maximize your effectiveness in discovering security fl aws within the time
available. Furthermore, you can often integrate your code review with other
test approaches to leverage the inherent strengths of each.
Black-Box Versus White-Box Testing
The attack methodology described in previous chapters is often described as a
black-box approach to testing. This involves attacking the application from the
outside and monitoring its inputs and outputs, with no prior knowledge of its
inner workings. In contrast, a white-box approach involves looking inside the
application’s internals, with full access to design documentation, source code,
and other materials.
Performing a white-box code review can be a highly effective way to discover
vulnerabilities within an application. With access to source code, it is often possible
to quickly locate problems that would be extremely diffi cult or time-consuming
to detect using only black-box techniques. For example, a backdoor password
that grants access to any user account may be easy to identify by reading the
code but nearly impossible to detect using a password-guessing attack.
However, code review usually is not an effective substitute for black-box
testing. Of course, in one sense, all the vulnerabilities in an application are “in
the source code,” so it must in principle be possible to locate all those vulner-
abilities via code review. However, many vulnerabilities can be discovered more
quickly and effi ciently using black-box methods. Using the automated fuzzing
techniques described in Chapter 14, it is possible to send an application hundreds
of test cases per minute, which propagate through all relevant code paths and
return a response immediately. By sending triggers for common vulnerabilities
to every fi eld in every form, it is often possible to fi nd within minutes a mass
of problems that would take days to uncover via code review. Furthermore,
many enterprise-class applications have a complex structure with numerous
cc1199..iinndddd 770022 88//1199//22001111 1122::1188::3344 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 703
Chapter 19 n Finding Vulnerabilities in Source Code 703
layers of processing of user-supplied input. Different controls and checks are
implemented at each layer, and what appears to be a clear vulnerability in one
piece of source code may be fully mitigated by code elsewhere.
In most situations, black-box and white-box techniques can complement and
enhance each other. Often, having found a prima facie vulnerability through
code review, the easiest and most effective way to establish whether it is real
is to test for it on the running application. Conversely, having identifi ed some
anomalous behavior on a running application, often the easiest way to inves-
tigate its root cause is to review the relevant source code. If feasible, therefore,
you should aim to combine a suitable mix of black- and white-box techniques.
Allow the time and effort you devote to each to be guided by the application’s
behavior during hands-on testing, and the size and complexity of the codebase.
Code Review Methodology
Any reasonably functional application is likely to contain many thousands of
lines of source code, and in most cases the time available for you to review it is
likely to be restricted, perhaps to only a few days. A key objective of effective
code review, therefore, is to identify as many security vulnerabilities as pos-
sible, given a certain amount of time and effort. To achieve this, you must take a
structured approach, using various techniques to ensure that the “low-hanging
fruit” within the codebase is quickly identifi ed, leaving time to look for issues
that are more subtle and harder to detect.
In the authors’ experience, a threefold approach to auditing a web applica-
tion codebase is effective in identifying vulnerabilities quickly and easily. This
methodology comprises the following elements:
1. Tracing user-controllable data from its entry points into the application,
and reviewing the code responsible for processing it.
2. Searching the codebase for signatures that may indicate the presence
of common vulnerabilities, and reviewing these instances to determine
whether an actual vulnerability exists.
3. Performing a line-by-line review of inherently risky code to understand
the application’s logic and fi nd any problems that may exist within it.
Functional components that may be selected for this close review include
the key security mechanisms within the application (authentication, session
management, access control, and any application-wide input validation),
interfaces to external components, and any instances where native code
is used (typically C/C++).
We will begin by looking at the ways in which various common web appli-
cation vulnerabilities appear at the level of source code and how these can be
cc1199..iinndddd 770033 88//1199//22001111 1122::1188::3344 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 704
704 Chapter 19 n Finding Vulnerabilities in Source Code
most easily identifi ed when performing a review. This will provide a way to
search the codebase for signatures of vulnerabilities (step 2) and closely review
risky areas of code (step 3).
We will then look at some of the most popular web development languages to
identify the ways in which an application acquires user-submitted data (through
request parameters, cookies, and so on). We will also see how an application
interacts with the user session, the potentially dangerous APIs that exist within
each language, and the ways in which each language’s confi guration and envi-
ronment can affect the application’s security. This will provide a way to trace
user-controllable data from its entry point to the application (step 1) as well as
provide some per-language context to assist with the other methodology steps.
Finally, we will discuss some tools that are useful when performing code review.
NOTE When carrying out a code audit, you should always bear in mind
that applications may extend library classes and interfaces, may implement
wrappers to standard API calls, and may implement custom mechanisms for
security-critical tasks such as storing per-session information. Before launch-
ing into the detail of a code review, you should establish the extent of such
customization and tailor your approach to the review accordingly.
Signatures of Common Vulnerabilities
Many types of web application vulnerabilities have a fairly consistent signature
within the codebase. This means that you can normally identify a good por-
tion of an application’s vulnerabilities by quickly scanning and searching the
codebase. The examples presented here appear in various languages, but in
most cases the signature is language-neutral. What matters is the programming
technique being employed, more than the actual APIs and syntax.
Cross-Site Scripting
In the most obvious examples of XSS, parts of the HTML returned to the user
are explicitly constructed from user-controllable data. Here, the target of an
HREF link is constructed using strings taken directly from the query string in
the request:
String link = “”;
objCell.InnerHtml = link;
The usual remedy for cross-site scripting, which is to HTML-encode potentially
malicious content, cannot be subsequently applied to the resulting concatenated
cc1199..iinndddd 770044 88//1199//22001111 1122::1188::3344 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 705
Chapter 19 n Finding Vulnerabilities in Source Code 705
string, because it already contains valid HTML markup. Any attempt to sanitize
the data would break the application by encoding the HTML that the application
itself has specifi ed. Hence, the example is certainly vulnerable unless fi lters are
in place elsewhere that block requests containing XSS exploits within the query
string. This fi lter-based approach to stopping XSS attacks is often fl awed. If it
is present, you should closely review it to identify any ways to work around it
(see Chapter 12).
In more subtle cases, user-controllable data is used to set the value of a vari-
able that is later used to build the response to the user. Here, the class member
variable m_pageTitle is set to a value taken from the request query string. It
will presumably be used later to create the  element within the returned
HTML page:
private void setPageTitle(HttpServletRequest request) throws
ServletException
{
String requestType = request.getParameter(“type”);
if (“3”.equals(requestType) && null!=request.getParameter(“title”))
m_pageTitle = request.getParameter(“title”);
else m_pageTitle = “Online banking application”;
}
When you encounter code like this, you should closely review the processing
subsequently performed on the m_pageTitle variable. You should see how it is
incorporated into the returned page to determine whether the data is suitably
encoded to prevent XSS attacks.
The preceding example clearly demonstrates the value of a code review in
fi nding some vulnerabilities. The XSS fl aw can be triggered only if a different
parameter (type) has a specifi c value (3). Standard fuzz testing and vulnerability
scanning of the relevant request may well fail to detect the vulnerability.
SQL Injection
SQL injection vulnerabilities most commonly arise when various hard-coded
strings are concatenated with user-controllable data to form a SQL query, which
is then executed within the database. Here, a query is constructed using data
taken directly from the request query string:
StringBuilder SqlQuery = newStringBuilder(“SELECT name, accno FROM
TblCustomers WHERE “ + SqlWhere);
if(Request.QueryString[“CID”] != null &&
Request.QueryString[“PageId”] == “2”)
{
SqlQuery.Append(“ AND CustomerID = “);
cc1199..iinndddd 770055 88//1199//22001111 1122::1188::3344 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 706
706 Chapter 19 n Finding Vulnerabilities in Source Code
SqlQuery.Append(Request.QueryString[“CID”].ToString());
}
...
A simple way to quickly identify this kind of low-hanging fruit within the
codebase is to search the source for the hard-coded substrings, which are often
used to construct queries out of user-supplied input. These substrings usually
consist of snippets of SQL and are quoted in the source, so it can be profi table to
search for appropriate patterns composed of quotation marks, SQL keywords,
and spaces. For example:
“SELECT
“INSERT
“DELETE
“ AND
“ OR
“ WHERE
“ ORDER BY
In each case, you should verify whether these strings are being concatenated
with user-controllable data in a way that introduces SQL injection vulner-
abilities. Because SQL keywords are processed in a case-insensitive manner,
the searches for these terms should also be case-insensitive. Note that a space
may be appended to each of these search terms to reduce the incidence of false
positives in the results.
Path Traversal
The usual signature for path traversal vulnerabilities involves user-controllable
input being passed to a fi lesystem API without any validation of the input or
verifi cation that an appropriate fi le has been selected. In the most common
case, user data is appended to a hard-coded or system-specifi ed directory path,
enabling an attacker to use dot-dot-slash sequences to step up the directory tree
to access fi les in other directories. For example:
public byte[] GetAttachment(HttpRequest Request)
{
FileStream fsAttachment = new FileStream(SpreadsheetPath +
HttpUtility.UrlDecode(Request.QueryString[“AttachName”]),
FileMode.Open, FileAccess.Read, FileShare.Read);
byte[] bAttachment = new byte[fsAttachment.Length];
fsAttachment.Read(FileContent, 0,
Convert.ToInt32(fsAttachment.Length,
CultureInfo.CurrentCulture));
fsAttachment.Close();
cc1199..iinndddd 770066 88//1199//22001111 1122::1188::3344 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 707
Chapter 19 n Finding Vulnerabilities in Source Code 707
return bAttachment;
}
You should closely review any application functionality that enables users
to upload or download fi les. You need to understand how fi lesystem APIs
are being invoked in response to user-supplied data and determine whether
crafted input can be used to access fi les in an unintended location. Often, you
can quickly identify relevant functionality by searching the codebase for the
names of any query string parameters that relate to fi lenames (AttachName in the
current example). You also can search for all fi le APIs in the relevant language
and review the parameters passed to them. (See later sections for listings of the
relevant APIs in common languages.)
Arbitrary Redirection
Various phishing vectors such as arbitrary redirects are often easy to spot
through signatures in the source code. In this example, user-supplied data from
the query string is used to construct a URL to which the user is redirected:
private void handleCancel()
{
httpResponse.Redirect(HttpUtility.UrlDecode(Request.QueryString[
“refURL”]) + “&SiteCode=” +
Request.QueryString[“SiteCode”].ToString() +
“&UserId=” + Request.QueryString[“UserId”].ToString());
}
Often, you can fi nd arbitrary redirects by inspecting client-side code, which
of course does not require any special access to the application’s internals.
Here, JavaScript is used to extract a parameter from the URL query string and
ultimately redirect to it:
url = document.URL;
index = url.indexOf(‘?redir=’);
target = unescape(url.substring(index + 7, url.length));
target = unescape(target);
if ((index = target.indexOf(‘//’)) > 0) {
target = target.substring (index + 2, target.length);
index = target.indexOf(‘/’);
target = target.substring(index, target.length);
}
target = unescape(target);
document.location = target;
As you can see, the author of this script knew the script was a potential target
for redirection attacks to an absolute URL on an external domain. The script
cc1199..iinndddd 770077 88//1199//22001111 1122::1188::3344 PPMM