# Environment
    Windows build number: Version 10.0.18362.175
    Windows Terminal version (if applicable): 0.2.1831.0
# Steps to reproduce
  1. Set the `HKCU\Console\VirtualTerminalLevel` registry entry to 1, to enable support for VT escape sequences by default.
  2. Makes sure the `initialCols` option in the Windows Terminal profile is set to 120.
  3. Open a **cmd** shell in the Windows Terminal (this can't be a WSL bash shell - it must be something that would usually not have VT support enabled without the registry setting).
  4. Run the following Python script:
        import sys
    sys.stdout.write('X'*(120-10))
    sys.stdout.write('\033[1;34;47mHello\033[m\n')
# Expected behavior
I'd expect this to display 110 X's followed by the word _Hello_ , in blue on
white, on the same line. This is what it looks like in a regular console cmd
shell.
![image](https://user-
images.githubusercontent.com/4181424/61186979-b038db00-a663-11e9-8b49-1abf23aa1b88.png)
# Actual behavior
What actually happens in the Windows Terminal is the _Hello_ is displayed on
the following line.
![image](https://user-
images.githubusercontent.com/4181424/61186985-c34bab00-a663-11e9-8ec8-3c714497d803.png)
I don't have a good understanding of how the conpty stuff works, but my theory
is that the escape sequences aren't actually being processed initially, and
are just written out to the screen as literal characters. As a result the
_Hello_ is forced to wrap onto the next line, because there isn't enough space
remaining. This screen structure is then passed through conpty somehow, at
which point the escape sequences are processed and the text colors changed.
But by that stage the wrapping has already taken effect, so the text is in the
wrong place.
It's easier to see what's going on if you apply PR #1964 first. In that case,
the ESC character gets translated to a ‚Üê when it isn't initially interpreted
as an escape sequence. The other side of the conpty pipe then doesn't get a
second chance to process those values as an escape sequence, so you just see
the raw characters being written out.
![image](https://user-
images.githubusercontent.com/4181424/61187019-2f2e1380-a664-11e9-85fe-f0a656c47e67.png)
This may be a good reason to reject PR #1964 for now, since it's clearly
making the situation worse, but I think the real issue is in the conpty code,
and if that were fixed then the PR might well be safe to merge.