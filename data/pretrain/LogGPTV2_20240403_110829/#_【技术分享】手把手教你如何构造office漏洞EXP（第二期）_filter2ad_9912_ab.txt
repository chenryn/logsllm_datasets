### 优化后的文本

在解析图表对象时，会涉及许多子对象，如GraphicsPath图像路径对象。通过构造一个TIFF图片并填充SOI数据为重复的内存地址值（例如0x0a0a00a0），替换原有的TIFF图片后打开文档，在调试器中跟踪发现程序会在GdipClonePath函数中调用GraphicsPath对象的虚函数。此时，GraphicsPath对象的虚表指针被覆盖为指定的内存地址值（以0x0a0a00a0为例），从而成功劫持了程序的eip到内存地址0x0a0a00a4。

上图中的eax实际上就是GraphicsPath对象的虚表指针，其值存储在0字节堆块后面的堆内存中，这表明越界拷贝已经覆盖了GraphicsPath内存对象。当解析第二个图表对象时，该对象被复制，复制过程中由于调用了对象的虚函数进行检查，使得我们的利用目标得以实现。整个利用过程如下图所示（请自行脑补并通过实践验证）：

至此，我们已经从一个堆内存越界写漏洞成功获取了程序的控制权。然而，漏洞利用过程并未结束。获取eip后，需要跳转到shellcode的地址执行。那么，shellcode应存放在何处呢？这里介绍一种Office堆喷射技术，利用Office的ActiveX控件进行内存布局。

首先，在插入第一个图表对象之前，先插入多个（如40个）ActiveX对象（如ListView对象）。将文档保存为docx格式（即Office Open XML文件格式），然后对其进行zip解压缩，改造其中的多个ActiveX.bin文件（这些文件内容相同）。改造过程包括保留文件头不变，然后以一定间隔重复填充shellcode，直到bin文件大小达到预设值（如2MB）。完成改造后，替换TIFF图片并重新打包文档。在Office打开文档的过程中，这些bin文件会被映射到内存中。由于这些内存通常是连续申请的，因此便于对进程内存进行编排，将shellcode布局到可预测的地址。这个过程如下图所示：

通过这种方式，shellcode能够相对稳定地布局到特定的内存地址（尽管这种方法存在一些缺点，如无法保证每次都成功且喷射过程较慢）。只要控制eip跳转到该地址执行shellcode即可。如果是在Windows XP和Office 2007环境下，可以直接执行payload代码，因为默认未开启DEP保护，堆内存代码可以被执行。但在Office 2010及以上版本中，由于payload所在内存没有可执行属性，执行时会抛出异常而停止。这时就需要使用ROP链来绕过DEP保护。

ROP是基于栈内存的编程方法。我们的思路是通过这种特殊的编程方式修改shellcode所在地址的内存属性，使其具有可执行属性，然后再跳转到该地址执行。由于shellcode存放在堆内存中，而ROP基于栈内存，我们需要先修改esp，进行堆和栈之间的转换。具体实现可以通过在进程空间中找到类似以下指令的代码段：
```assembly
xchg esp, eax
ret
```
控制eip指向该指令地址执行后，shellcode将被翻转到栈内存。这一过程中有两个问题：一是如何搜索这些指令，二是如何确保这些指令的地址固定不变。对于第二个问题，可以通过查找未开启ASLR保护的模块（如winword.exe和mscomctl.ocx）来解决。对于第一个问题，通常借助工具对代码段进行反汇编搜索匹配，并提供可用的指令集及其地址。也可以使用在线服务，如ropshell.com，上传winword程序文件进行搜索，返回易于使用的指令集。

翻转shellcode后，可以基于栈来跳转调用内存属性修改函数。我的思路是在winword程序的导入表中找到VirtualProtect函数的地址，在栈内存上构造好所需参数后跳转到该函数调用，完成修改后直接跳转到payload代码地址执行。编写好的ROP链如下：
- 从`call dword ptr ds:[eax+4]`开始：
  - `0x0a0a0000 (eax)`:
    - `0x3000143d ; pop esi ; ret`
    - `0x30002465 ; xchg esp, eax ; retn 0c28b`
    - `payload`
  - `0x0a0a0000 + 0x0c28b + 4 (esp)`:
    - `0x300010ed ; pop esi ; ret`
    - `0x30002071 ; jmp [esi + 0xffffff83] (virtualprotect)`
    - `0x0a0a00a8 ; ret payload start`
    - `0x0a0a00a8 ; lpAddress (payload start addr)`
    - `0x00010000 ; dwSize (payload size)`
    - `0x00000040 ; flNewProtect (RWE)`
    - `0x0a0a2210 ; lpFlOldProtect (mem can write)`

最终，我们可以在Office 2010中弹出计算器，证明了利用的成功。

### 总结
本文详细分析了如何通过一个简单的堆内存越界写漏洞在Office程序中执行任意代码。虽然利用方式稍显繁琐且效果有限，但整体技术框架经典，值得借鉴。漏洞的本质是由于计算结果缺乏校验导致内存越界写数据，这也说明了程序开发人员具备认真严谨的编程习惯与良好的安全意识的重要性。

### 相关链接
- [【技术分享】手把手教你如何构造office漏洞EXP（第一期）](http://bobao.360.cn/learning/detail/3003.html)
- [【技术分享】手把手教你如何构造office漏洞EXP（第三期）](http://bobao.360.cn/learning/detail/3049.html)
- [【技术分享】手把手教你如何构造office漏洞EXP（第四期）](http://bobao.360.cn/learning/detail/3246.html)

希望这些信息对你有所帮助！