此函数返回函数 f 的第 up 个上值的名字和值。 如果该函数没有那个上值，返回 nil 。
以 '(' （开括号）打头的变量名表示没有名字的变量 （去除了调试信息的代码块）。
### debug.getuservalue
> debug.getuservalue (u)
返回关联在 u 上的 Lua 值。 如果 u 并非用户数据，返回 nil。
### debug.sethook
> debug.sethook ([thread,] hook, mask [, count])
将一个函数作为钩子函数设入。 字符串 mask 以及数字 count 决定了钩子将在何时调用。 掩码是由下列字符组合成的字符串，每个字符有其含义：
'c': 每当 Lua 调用一个函数时，调用钩子；
'r': 每当 Lua 从一个函数内返回时，调用钩子；
'l': 每当 Lua 进入新的一行时，调用钩子。
此外， 传入一个不为零的 count ， 钩子将在每运行 count 条指令时调用。
如果不传入参数， debug.sethook 关闭钩子。
当钩子被调用时， 第一个参数是触发这次调用的事件： "call" （或 "tail call"）， "return"， "line"， "count"。 对于行事件， 钩子的第二个参数是新的行号。 在钩子内，你可以调用 getinfo ，指定第 2 层， 来获得正在运行的函数的详细信息 （0 层指 getinfo 函数， 1 层指钩子函数）。
### debug.setlocal
> debug.setlocal ([thread,] level, local, value)
这个函数将 value 赋给 栈上第 level 层函数的第 local 个局部变量。 如果没有那个变量，函数返回 nil 。 如果 level 越界，抛出一个错误。 （你可以调用 debug.getinfo 来检查层次是否合法。） 否则，它返回局部变量的名字。
关于变量索引和名字，参见 debug.getlocal。
### debug.setmetatable
> debug.setmetatable (value, table)
将 value 的元表设为 table （可以是 nil）。 返回 value。
### debug.setupvalue
> debug.setupvalue (f, up, value)
这个函数将 value 设为函数 f 的第 up 个上值。 如果函数没有那个上值，返回 nil 否则，返回该上值的名字。
### debug.setuservalue 
> debug.setuservalue (udata, value)
将 value 设为 udata 的关联值。 udata 必须是一个完全用户数据。
返回 udata。
### debug.traceback
> debug.traceback ([thread,] [message [, level]])
如果 message 有，且不是字符串或 nil， 函数不做任何处理直接返回 message。 否则，它返回调用栈的栈回溯信息。 字符串可选项 message 被添加在栈回溯信息的开头。 数字可选项 level 指明从栈的哪一层开始回溯 （默认为 1 ，即调用 traceback 的那里）。
### debug.upvalueid
> debug.upvalueid (f, n)
返回指定函数第 n 个上值的唯一标识符（一个轻量用户数据）。
这个唯一标识符可以让程序检查两个不同的闭包是否共享了上值。 若 Lua 闭包之间共享的是同一个上值 （即指向一个外部局部变量），会返回相同的标识符。
### debug.upvaluejoin
> debug.upvaluejoin (f1, n1, f2, n2)
让 Lua 闭包 f1 的第 n1 个上值 引用 Lua 闭包 f2 的第 n2 个上值。
# 独立版 Lua
虽然 Lua 被设计成一门扩展式语言，用于嵌入一个宿主程序。 但经常也会被当成独立语言使用。 独立版的 Lua 语言解释器随标准包发布，就叫 lua。 独立版解释器保留了所有的标准库及调试库。 其命令行用法为：
     lua [options] [script [args]]
选项有：
- -e stat: 执行一段字符串 stat ；
- -l mod: “请求模块” mod ；
- -i: 在运行完 脚本 后进入交互模式；
- -v: 打印版本信息；
- -E: 忽略环境变量；
- --: 中止对后面选项的处理；
- -: 把 stdin 当作一个文件运行，并中止对后面选项的处理。
在处理完选项后，lua 运行指定的 脚本。 如果不带参数调用， 在标准输入（stdin）是终端时，lua 的行为和 lua -v -i 相同。 否则相当于 lua - 。
如果调用时不带选项 -E， 解释器会在运行任何参数前，检查环境变量 LUA_INIT_5_3 （或在版本名未定义时，检查 LUA_INIT ）。 如果该变量内存格式为 @filename， lua 执行该文件。 否则，lua 执行该字符串。
如果调用时有选项 -E， 除了忽略 LUA_INIT 外， Lua 还忽略 LUA_PATH 与 LUA_CPATH 的值。 将 package.path 和 package.cpath 的值设为定义在 luaconf.h 中的默认路径。
除 -i 与 -E 外所有的选项都按次序处理。 例如，这样调用
     $ lua -e'a=1' -e 'print(a)' script.lua
将先把 a 设为 1，然后打印 a 的值， 最后运行文件 script.lua 并不带参数。 （这里的 $ 是命令行提示。你的命令行提示可能不一样。）
在运行任何代码前， lua 会将所有命令行传入的参数放到一张全局表 arg 中。 脚本的名字放在索引 0 的地方， 脚本名后紧跟的第一个参数在索引 1 处，依次类推。 在脚本名前面的任何参数 （即解释器的名字以及各选项） 放在负索引处。 例如，调用
     $ lua -la b.lua t1 t2
这张表是这样的：
```lua
arg = { [-2] = "lua", [-1] = "-la",
        [0] = "b.lua",
        [1] = "t1", [2] = "t2" }
```
如果调用中没提供脚本名， 解释器的名字就放在索引 0 处，后面接着其它参数。 例如，调用
     $ lua -e "print(arg[1])"
将打印出 "-e" 。 如果提供了脚本名， 就以 arg[1], ···, arg[#arg] 为参数调用脚本。 （和 Lua 所有的代码块一样， 脚本被编译成一个可变参数函数。）
在交互模式下， Lua 不断的显示提示符，并等待下一行输入。 一旦读到一行， 首先试着把这行解释为一个表达式。 如果成功解释，就打印表达式的值。 否则，将这行解释为语句。 如果你写了一行未完成的语句， 解释器会用一个不同的提示符来等待你写完。
当脚本中出现了未保护的错误， 解释器向标准错误流报告错误。 如果错误对象并非一个字符串，但是却有元方法 __tostring 的话， 解释器会调用这个元方法生成最终的消息。 否则，解释器将错误对象转换为一个字符串，并把栈回溯信息加在前面。
如果正常结束运行， 解释器会关闭主 Lua 状态机 （参见 lua_close）。 脚本可以通过调用 os.exit 来结束，以回避这个步骤。
为了让 Lua 可以用于 Unix 系统的脚本解释器。 独立版解释器会忽略代码块的以 # 打头的第一行。 因此，Lua 脚本可以通过 chmod +x 以及 #! 形式变成一个可执行文件。 类似这样
     #!/usr/local/bin/lua
（当然， Lua 解释器的位置对于你的机器来说可能不一样。 如果 lua 在你的 PATH 中， 写成
     #!/usr/bin/env lua
更为通用。）
# 与之前版本不兼容的地方
这里我们列出了把程序从 Lua 5.2 迁移到 Lua 5.3 会碰到的不兼容的地方。 你可以在编译 Lua 时定义一些恰当的选项（参见文件 luaconf.h）， 来回避一些不兼容性。 然而，这些兼容选项以后会移除。
Lua 的版本更替总是会修改一些 C API 并涉及源代码的改变。 例如一些常量的数字值，用宏来实现一些函数。 因此，你不能假设在不同的 Lua 版本间可以做到二进制兼容。 当你使用新版时，一定要将使用了 Lua API 的客户程序重新编译。
同样，Lua 版本更替还会改变预编译代码块的内部呈现方式； 在不同的 Lua 版本间，预编译代码块不兼容。
官方发布版的标准路径也可能随版本变化。
## 语言的变更
Lua 5.2 到 Lua 5.3 最大的变化是引入了数字的整数子类型。 虽然这个变化不会影响“一般”计算， 但一些计算 （主要是涉及溢出的） 会得到不同的结果。
你可以通过把数字都强制转换为浮点数来消除差异 （在 Lua 5.2 中，所有的数字都是浮点数）。 比如你可以将所有的常量都以 .0 结尾， 或是使用 x = x + 0.0 来转换一个变量。 （这条建议仅用于偶尔快速解决一些不兼容问题； 这不是一条好的编程准则。 好好写程序的话，你应该在需要使用浮点数的地方用浮点数， 需要整数的地方用整数。）
把浮点数转为字符串的地方，现在都对等于整数的浮点数加了 .0 后缀。 （例如，浮点数 2.0 会被打印成 2.0， 而不是 2。） 如果你需要定制数字的格式，就必须显式的格式化它们。
（准确说这个不是兼容性问题， 因为 Lua 并没有规定数字如何格式化成字符串， 但一些程序假定遵循某种特别的格式。）
分代垃圾收集器没有了。 （它是 Lua 5.2 中的一个试验性特性。）
## 库的变更
bit32 库废弃了。 使用一个外部兼容库很容易， 不过最好直接用对应的位操作符来替换它。 （注意 bit32 只能针对 32 位整数运算， 而标准 Lua 中的位操作可以用于 64 位整数。）
表处理库现在在读写其中的元素时会考虑元方法。
ipairs 这个迭代器也会考虑元方法，而 __ipairs 元方法被废弃了。
io.read 的选项名不再用 '*' 打头。 但出于兼容性考虑，Lua 会继续忽略掉这个字符。
数学库中的这些函数废弃了： atan2， cosh， sinh， tanh， pow， frexp， 以及 ldexp 。 你可以用 x^y 替换 math.pow(x,y)； 你可以用 math.atan 替换 math.atan2，前者现在可以接收一或两个参数； 你可以用 x * 2.0^exp 替换 math.ldexp(x,exp)。 若用到其它操作，你可以写一个扩展库，或在 Lua 中实现它们。
require 在搜索 C 加载器时处理版本号的方式有所变化。 现在，版本号应该跟在模块名后（其它大多数工具都是这样干的）。 出于兼容性考虑，如果使用新格式找不到加载器的话，搜索器依然会尝试旧格式。 （Lua 5.2 已经是这样处理了，但是并没有写在文档里。）
## API 的变更
延续函数现在接收原来用 lua_getctx 获取的参数， 所以 lua_getctx 就去掉了。 按需要改写你的代码。
函数 lua_dump 有了一个额外的参数 strip。 如果想和之前的行为一致，这个值传 0 。
用于传入传出无符号整数的函数 （lua_pushunsigned， lua_tounsigned， lua_tounsignedx， luaL_checkunsigned， luaL_optunsigned） 都废弃了。 直接从有符号版做类型转换。
处理输入非默认整数类型的宏 （luaL_checkint， luaL_optint， luaL_checklong， luaL_optlong） 废弃掉了。 直接使用 lua_Integer 加一个类型转换就可以替代 （或是只要有可能，就在你的代码中使用 lua_Integer）。
# Lua 的完整语法
这是一份采用扩展 BNF 描述的 Lua 完整语法。 在扩展 BNF 中， {A} 表示 0 或多个 A ， [A] 表示一个可选的 A 。 （操作符优先级，参见 §3.4.8； 对于最终符号，名字，数字，字符串字面量的解释，参见 §3.1。）
```lua
chunk ::= block
block ::= {stat} [retstat]
stat ::=  ';' | 
     varlist '=' explist | 
     functioncall | 
     label | 
     break | 
     goto Name | 
     do block end | 
     while exp do block end | 
     repeat block until exp | 
     if exp then block {elseif exp then block} [else block] end | 
     for Name '=' exp ',' exp [',' exp] do block end | 
     for namelist in explist do block end | 
     function funcname funcbody | 
     local function Name funcbody | 
     local namelist ['=' explist] 
retstat ::= return [explist] [';']
label ::= '::' Name '::'
funcname ::= Name {'.' Name} [':' Name]
varlist ::= var {',' var}
var ::=  Name | prefixexp '[' exp ']' | prefixexp '.' Name 
namelist ::= Name {',' Name}
explist ::= exp {',' exp}
exp ::=  nil | false | true | Numeral | LiteralString | '...' | functiondef | 
     prefixexp | tableconstructor | exp binop exp | unop exp 
prefixexp ::= var | functioncall | '(' exp ')'
functioncall ::=  prefixexp args | prefixexp ':' Name args 
args ::=  '(' [explist] ')' | tableconstructor | LiteralString 
functiondef ::= function funcbody
funcbody ::= '(' [parlist] ')' block end
parlist ::= namelist [',' '...'] | '...'
tableconstructor ::= '{' [fieldlist] '}'
fieldlist ::= field {fieldsep field} [fieldsep]
field ::= '[' exp ']' '=' exp | Name '=' exp | exp
fieldsep ::= ',' | ';'
binop ::=  '+' | '-' | '*' | '/' | '//' | '^' | '%' | 
     '&' | '~' | '|' | '>>' | '' | '>=' | '==' | '~=' | 
     and | or
unop ::= '-' | not | '#' | '~'
```