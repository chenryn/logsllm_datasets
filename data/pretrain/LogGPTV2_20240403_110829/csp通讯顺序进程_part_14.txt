## Page 100
对X是连续，即
续的，例如，设G,F和H为连续函数，则
意多个变量的任意组合上，所构成的表达式对其每个变量仍是连
连续函数的复合仍是连续的；并且任意个数的连续函数作用于任
其每个自变量分别连续，则我们定义G也是连续的。例如
对所有链的极限均可分配，即
L9
6
所以，所有连续函数都是单调的，由此前一方程的等式右端
则我们说它是连续的。（因为对所有P和Q有
JF（P;)也是一个升键的极限。）含多个自变量的函数G如果对
μX:A.F(x,(lP))=L_jμx:A.F(x,P)
D3到D7中定义的所有算子（除了/）在上越意义下都是连续
G(o,(L_Jp))=LJg(o,P)
c(F(Le),(LP), r))
=LJG(F(P),H(P;,Y))
G(F(X),H(X ,Y))
PEQ→F(P)≤F(Q)
若{P;|i≥0}是链
对---切Q
对一切Q
若F连续
对一切Y
---
## Page 101
2.8.3唯-解
立方程解的唯一性时才有必要。
这个证明仅依顿于F为连续函数这一事实。而F是卫式，只在建：
L2 P↑n=PI(n+1)=P
联立方程组。
我们只讨论单一方程的情况，这种处理方法可以很容易地推广到
要弄清楚具备解的唯-一性的儿个更为一般的条件。为简单起见，
也是连续的。现在我们可以证明这个基本的不动点定理了
因此如果F(X)单单是由这些算子构成的一个表达式，则它对X
(11r(L_(P)=L(P)
L1 P10=STOP
由定义引出
不动：形式定文为
程，在执行它的前n个事件时，其动作和P一样，然后它就停止
程，即证明定义进程的卫式递归方程只有一个解。证明时，我们先
78
设P为一进程，
F(μX:A,F(X))= F(L
在这一节里我们将更为形式地处理1.1.2节中给出的论证过
(A,S)n=(A,{s]s∈SA#s≤n})
n是个自然数，我们定义（P卜#)仍为-一个进：
=pX:A,F(X)
L [F(F:(STOPA))
JF'(STOP STOP,EF(STOPA)
|F:(STOP)
[F'(STOP,))
Pi+l定义
P定义
F连续
μ定义
---
## Page 102
·归纳步骤。
基始情形。X↑0=STOP=STOP1O=F(STOP)}0
证明
对X只有-一个解。
L5设F是一构造性函数。方程
现在我们可以正式陈述这条基本定理
恒等函数】不是构遣性的，因为
一般选择也是构造性的，因为有
前n步行为决定；因此如果s≠<>，就有
则说F是构造性的。其含意是F(X)的第n+1步的行为仅由X的
L4
L3 P=1_|Pn
X}(n+1)=F(X)F(n+ 1)
前缀运算就是一种最基本的构造性函数，因为
设F为进程到进程的一个单调函数，如果对所有X，均有
设X为一任意解。背先我们用归纳法可证引理
(x:B-→P(x)）(n+1)=(x:B-(P(x)↑n))(n+1)
s∈traces(F(X))=s∈ traces(F(X↑(#s-1)))
(c→P)(n+1)=(c-→(Pn))(n+1)
=F(F(STOP))↑(n+1)
=F(F"(STOP)n)(n+1)
=F(Xn)F(n+1)
F(X)(n+1)=F(Xn)(n+1)
I(e→P)↑1 =c-→STOP
XFn= F'(STOP)Fn
X=F(X)
.+STOP
= I((c→P)t0)
因为X=F(X)
F是构遗性的
F是构造性的
假设条件
7.9
---
## Page 103
仍是构造性的。因此，如果函数F，G，…,H均为非破坏性的，且
更为重要的一点是，
数，因为有
所以后继算子是破坏性的。
破坏性的。但是由于
恒等函数，也是非破坏性的。任何构造性的单调函数同时也是非“
字母表变换就是非破坏性的，因为
它满足的条件是
则该定理的作用将大大增加。让我们定义一个非破坏性函数G，
μX.F(X)是方程的唯一解。
因此方程X=F（X)所有的解都等于μX.F（X)，换句话说，
下面我们回到主定理去
8
非破坏性函数（如G和H）的任意复合仍为一非破坏性函
G(P)n=G(Pn)n
如果我们能清楚地分辨出哪些函数是构造性的，哪些不是，
X=1
G(H(P))n=G(H(P)n)n=G(H(Pn)n)n
=μX,F(X)
=[F(STOP)
((e→→STOP)/)f1 = c-+STOP
[F"(STOP)
[(xFn)
=Fn+1(STOP)N(n + 1)
=G(H(PFn))(n
一个构造性函数与多个非破环性函数的复合
f(P)n=f(Pn)n
1(/(1↓(d0LS+-+-2)))=
=(c-→STOP)/
≠STOP
对所有和P
由2.8.2节L7
由F定义
由引理
竹甲
由L3
---
## Page 104
“它们当中有一个是构造性的，则它们复合的结果
有唯一解。
准6如果表达式E是关于X的卫式：则方程
最后，我们得到以下结论
系统P(X)Q(X)关于X仍是卫式。
D4如果P(X)和Q(X)都是关于X的卫式，则它们构成的发
D3如果P(X)关于X是卫式，则符号变换f(P(X))也是关于X
DO凡仅由并发算子、符号变换算子及一般选择算子构成的表达
于它，
式，如果对X在表达式E中每个出现，均有一个构造性函数作用
假设E为含有进程变量X的一个表达式。我们说E关于X是卫
如说，进程的并行组合对两个自变量都是非破坏性的，因为
的卫式。
是关于X的卫式。
6
达式的下列条件语法地定义
卫式
是X的一个构造性面数。
以上结论可很容易地推广到含多个自变量的函数的情形。臂
如果对所有x，P(X,x)是保持卫式特性的，则一般选择
由此我们可以得到重要结论：函数的构造性可以仿照卫式表
不含X的表达式，是关于X的卫式。·
是保持卫式特性的。
，而且不存在作用于它的破坏性函数。以下表达式关于X是
(c-→X|d-→f(x1P)|e→(f(x)|Q>)1l((d-→x)R)
(PQ)=((P)(Q))
F(G(.·(H(X))..·))
(x:B-→P(X,x))
X=E
8
---
## Page 105
非确定性是很有用的。
描过一些实际系统和机器的行为时，为了保持描迹的高度抽象，
态，但我们把这些有关事件拼除在进程字母表之外了。因此，在
器换钱的各种组合方式可能依赖于机器装入大、小硬币时的状
忽略影响选择的因素，这种非确定性才产生出来了。譬如说，机
为推断出当时的选择结果。
知道选择发生的精确时间，尽管环境事后可以依据进程的后续行
环境不能控制这个选择，甚至观察不到选择的过程：环境都无法
机器内部，由机器本身以任意的或叫非确定的方式进行的，因此
出哪种，使用者不能控制，甚至都无法预测。其实这个选择是在
的换钱机可能给出上逃两种换钱方法中的任意一种：而到底会给
不能影响或甚至都观察不到它是如何选择的。例如，
可以在实施选择的那一时刻观察到所作的选择。
理解为环境能实实在在地做出执择，或从更弱的意义上讲，环境
事件时，
枚小的。这类进程叫做确定性的，因为当它有多于一个的可能
钱的方式，如换出三枚小硬币和一枚大硬币，或是两枚大的，一
中做出扶择。例如：换钱机CH5C（1.1.3节X2)就允许顾客选择换
围，并发性算子1允许某个其它进程在集合B提供的选择对象之
但是，对有些具有一定范围的可能行为的进程，它的环境
3
其实，这种非确定性没有什么神秘的：只是由于我们有意要
选择算子(x:B→P(x))定义的进程，表示可能行为的一个范
其选择总由该进程的外部环境来确定。这种确定性可以
第三章非确定性
3.1 引 
言
另一台不同
---
## Page 106
取、快速反应时间，或早出产品等因素。其实，算子厂也不经常
与猫逃无关（并且是被描逑右意忽略）的因素做出，如费用低
以通过建立P或Q来实施，两者之间的选择可出实施者根据某些
主要用途在于对某一进程进行描逃。描述为（P口Q）的进程，可
来，把另一个扔到一边，这样做自然就愚之至了！非确定性的
们建立了P和Q，再把它们放到·只黑袋里，然后任意摸出一个
确定性的概念。当然我们不打算用门实施进程的。否则就好比我
以预测了，因此
当然了，只要这台机器送出第一枚硬币后，其后续行为就完登可
机器启动时会选择哪一种组合（参看1.1.2节X3，X4）。合
面的一台机器，它总是按同一种组合方式换钱，但是我们不知道
X2每次使用CH5D时，它换出的钱的组合都有可能不同。下
X1一台换钱机总是按两种换钱方法中的任-一种正确地换钱
任意进行的。使用门时，我们假设各运算对象的宇母表相同
它们两者之间的选择，是在外部环境不知道或不能控制的情况下
表示这样一个进程：它或者按P动作，或者按Q动作，而进程在
CH5D= (in5p→((out1p-out1p-→out1p-→out2p-→CH5D)
这样我们就用二元算子口以最单纯、最简单的形式引人了非
举例
假设P和Q是进程，我们引入记号
(out2p-out1p→out2p→CHsD)))
CH5E=CH5ACH5B
3.2
.PmQ 
α(PQ) =aP=αQ
CH5D=≠GH5E
非确定的或算子
（P或Q）
口
口
---
## Page 107
L2  PQ=QP 
3.2.1法则
更自然地引出非确定现象。
在描逃中直接使用；在使用本章后面定义的一些其它算子时，可
个进程之间的差别简单加以说明。合
即当门的两个运算对象相同时，它才可分配。这一点可由以下两
置上对口分别有分配律，那么我们说它是可分配的。从这一意义
这类算子说成是可分配的。一个二元算子如果在其两个自变量位
与它先选择后执行，没有什么区别
做出非确定性选择的时间并不主要。
L3 P(OR) =(PmQ)R
式不限
三个选择对象之间的选择可以拆成两个接续的二元选择。分解方
选择的先后次序无关紧要
上讲，到目前为止有关进程的大部分算子都是可分配的，它们
L1 PP=P
之间做选择等于不做
5
5
n
4
非确定性选择要遵从的代数法则是相当的简单明了。P与P
但是，递归算子却不是可分配的，除非在最简单的情况下，
法则L4也说明前缴算子对非确定性是有分配律的。我们把
x→(PQ)=(x→P)(x→Q)
f(P[Q)= f(P)f(Q)
(PQ)R= (PR)(Q|R)
P(Q]R) = (P|Q)[(PR)
(x:B-→(P(x)Q(x))) =(x: B→P(x))(x:B→Q(x))
Q=(uX.(a-→X))i(μx.(b→X))
P=μX.((a→X)(b→X))
一个进程先做x再做选择：
（分配性）
(组合性）
（对称性）
（幂等性）
---
## Page 108