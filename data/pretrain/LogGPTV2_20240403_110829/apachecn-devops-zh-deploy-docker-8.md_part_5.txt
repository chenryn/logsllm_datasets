 --filters Name=instance-state-name,Values=running \
 --query 'Reservations[*].Instances[*].PublicIpAddress'
[
 [
 "52.53.240.17"
 ]
]
$ # Now let's try connecting to it
ssh -i ~/.ssh/ec2_swarm_key PI:EMAIL 
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '52.53.240.17' (ECDSA) to the list of known hosts.
ubuntu@ip-172-31-182-20:~$ # Yay! Do we have Docker?
ubuntu@ip-172-31-182-20:~$ sudo docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
ubuntu@ip-172-31-182-20:~$ # Create our single-server swarm
ubuntu@ip-172-31-182-20:~$ sudo docker swarm init
Swarm initialized: current node (n2yc2tedm607rvnjs72fjgl1l) is now a manager.
ubuntu@ip-172-31-182-20:~$ # Here we can now do anything else that's needed
ubuntu@ip-172-31-182-20:~$ # Though you would normally automate everything
```
If you see errors similar to `"No handler was ready to authenticate. 1 handlers were checked. ['HmacAuthV4Handler'] Check your credentials"`, ensure that you have your AWS credentials set properly.
看起来一切正常！在这一点上，如果我们愿意，我们完全可以部署我们以前构建的 3 层应用。当我们完成了我们的示例，并且我们的迷你 PaaS 开始工作后，我们可以通过运行`destroy.yml`行动手册来返回并清理问题:
```
ubuntu@ip-172-31-182-20:~$ # Get out of our remote machine
ubuntu@ip-172-31-182-20:~$ exit
logout
Connection to 52.53.240.17 closed.
$ # Let's run the cleanup script
ansible-playbook destroy.yml 
 [WARNING]: provided hosts list is empty, only localhost is available
PLAY ***************************************************************************
TASK [Finding VMs to delete] ***************************************************
ok: [localhost]
TASK [Deleting instances] ******************************************************
changed: [localhost] => 
TASK [Finding route table info] ************************************************
ok: [localhost]
TASK [set_fact] ****************************************************************
ok: [localhost]
TASK [Removing security group] *************************************************
changed: [localhost]
TASK [Deleting gateway] ********************************************************
changed: [localhost]
TASK [Deleting subnet] *********************************************************
changed: [localhost]
TASK [Deleting route table] ****************************************************
changed: [localhost]
TASK [Deleting VPC] ************************************************************
changed: [localhost]
PLAY RECAP *********************************************************************
localhost : ok=9 changed=6 unreachable=0 failed=0 
```
这样，我们就可以用单个命令自动部署和拆卸我们的基础设施。虽然这个例子的范围非常有限，但是它应该会给你一些想法，告诉你如何通过自动扩展组、编排管理、注册中心部署和数据持久性来扩展这个范围，从而把它变成一个成熟的 PaaS。
# 持续集成/持续交付
随着您提供更多的服务，您会注意到手动部署源代码管理和构建中的更改会占用更多的时间，因为需要找出哪些映像依赖项属于哪里，哪些映像实际上需要重建(如果您运行的是 mono-repo)，服务是否有任何更改，以及许多其他辅助问题。为了简化和精简我们的部署过程，我们需要找到一种方法来使整个系统完全自动化，以便部署新版本的服务只需要提交对代码存储库分支的更改。
到目前为止，最受欢迎的自动化服务器 Jenkins 通常用于此类功能，以实现构建自动化和 Docker 映像和基础架构的部署，但其他服务器，如无人机、构建机器人、Concoure 等，也在功能强大的软件配置项/光盘工具行列中快速崛起，但迄今为止还没有一个达到业界的相同接受水平。由于 Jenkins 也相对容易使用，我们可以快速演示一下它的强大功能，虽然这个例子有点简单，但它应该清楚地表明如何将它用于更多用途。
由于 Jenkins 将需要`awscli`、Ansible 和`python-boto`，我们必须基于可从 Docker Hub 获得的 Jenkins 制作一个新的 Docker 映像。创建一个新文件夹，并添加一个包含以下内容的`Dockerfile`:
```
FROM jenkins
USER root
RUN apt-get update && \
 apt-get install -y ansible \
 awscli \
 python-boto
USER jenkins
```
现在我们构建并运行我们的服务器:
```
$ # Let's build our image
$ docker build -t jenkins_with_ansible 
Sending build context to Docker daemon 2.048kB
Step 1/4 : FROM jenkins
Successfully tagged jenkins_with_ansible:latest
$ # Run Jenkins with a local volume for the configuration
$ mkdir jenkins_files
$ docker run -p 8080:8080 \
 -v $(pwd)/jenkins_files:/var/jenkins_home \
 jenkins_with_ansible
Running from: /usr/share/jenkins/jenkins.war
Jenkins initial setup is required. An admin user has been created and a password generated.
Please use the following password to proceed to installation:
3af5d45c2bf04fffb88e97ec3e92127a
This may also be found at: /var/jenkins_home/secrets/initialAdminPassword
INFO: Jenkins is fully up and running
```
当它还在运行的时候，让我们进入主页面，输入安装密码，在映像启动过程中，我们得到了一个警告。转到`http://localhost:8080`并输入您日志中的密码:
![](img/a4d91396-d2b1-4ce8-a9e4-10a4d9bfad90.png)
单击下一个窗口上的安装建议插件，然后在相关下载完成后，在最后一个安装程序页面上选择继续作为管理员，这将引导您进入主登录页面:
![](img/ccc437ac-87cb-4551-8e9f-1a689fbb5b47.png)
点击创造新的工作，将其命名为`redeploy_infrastructure`，并使其成为自由式项目:
![](img/a4dad089-6fd8-4422-aa17-cc4d5f855e55.png)
接下来，我们将使用我们的 Git 存储库端点配置该作业，以便它基于对主分支的任何提交:
![](img/c4cc0ce7-fdef-47a0-bd3f-ea487e9080f7.png)
作为我们的构建步骤，当存储库触发器激活时，我们将销毁并部署基础架构，用更新的版本有效地替换它。添加**执行 Shell** 类型的新构建步骤，并添加以下内容:
```
# Export needed AWS credentials
export AWS_DEFAULT_REGION="us-west-1"
export AWS_ACCESS_KEY_ID="AKIABCDEFABCDEF"
export AWS_SECRET_ACCESS_KEY="123456789ABCDEF123456789ABCDEF"
# Change to relevant directory
cd chapter_8/aws_deployment
# Redeploy the service by cleaning up the old deployment
# and deploying a new one
ansible-playbook destroy.yml
ansible-playbook deploy.yml
```
这份工作看起来应该很像这样:
![](img/7e3f36a2-8cd3-47d4-a04c-d145ed4f5366.png)
用`Save`保存更改，这将带您进入构建的主页面。在这里，点击`Build Now`按钮，一旦构建出现在左侧构建列表中，点击其进度条或其名称旁边的下拉菜单，并选择`View Log`:
![](img/0273eb37-7952-4cde-bcd5-dd41adce274b.png)
成功！正如您所看到的，通过 Jenkins 和一个小配置，我们刚刚对简单的基础架构进行了自动化部署。它很粗糙，但很有效，尽管通常你不想重新部署所有东西，只想要已经改变的部分，并让 Jenkins 住在集群中，但这是一些更复杂的工作，将留给读者作为可能的改进点。
# 资源考虑
由于 Jenkins 运行在 Java 虚拟机之上，它将以惊人的速度消耗可用内存，并且通常是最大的使用猪，同时也是我经历过的最频繁的内存不足的罪魁祸首。即使在最轻的用例中，也要计划为 Jenkins 的工作人员分配至少 1 GB 的内存，否则在构建管道的最不合适的阶段可能会出现各种故障。一般来说，此时大多数 Jenkins 安装对于分配给它们的 2gb RAM 不会有很多问题，但是由于 VM 实例中 RAM 的价格，您可以尝试向后扩展，直到达到可接受的性能水平。
最后要注意的是，相对而言，Jenkins 映像也很笨重，重量约为 800 兆字节，所以请记住，移动这个容器真的不像我们一直在使用的其他工具那么容易也不那么快。
# 首先部署循环依赖关系
当在您的集群中使用 Jenkins 作为 Dockerized 服务来链接构建所有其他映像时，我必须提到一个常见的陷阱，在这个陷阱中，您不可避免地会遇到 Jenkins 最初不可用的新部署问题，因为在集群初始化阶段，注册表中通常没有可用的映像，并且没有以任何方式配置默认的 Jenkins Docker 映像。最重要的是，由于您经常需要一个已经运行的 Jenkins 实例来构建一个更新的 Jenkins 映像，因此您将处于经典的 Catch-22 情形。您可能会反射性地手动构建 Jenkins 作为后续部署步骤，但是如果您想要真正拥有基本上不干涉的基础架构，您必须抵制这样做的冲动。
解决这个问题的一般方法是在干净的集群上引导 Jenkins，如下图所示:
![](img/6de34386-4ac9-48a2-8428-5bf622dda59a.png)
首先进行集群部署，以确保我们有办法构建我们的引导映像，并且 **Docker 注册表**用于在映像构建后存储它。接下来，我们在任何可用的 Docker Engine 节点上构建 Jenkins 映像，并将其推送到注册表，这样服务就有了正确的映像。如果需要，我们随后使用相同的配置管理工具(如 Ansible)或编排工具启动上述服务，并等待自动启动作业，该作业将构建所有其他剩余的映像，这些映像应该用运行整个集群所需的所有其他映像填充注册表。这里的基本思想是通过 CM 工具进行初始引导，然后让 Jenkins 服务重建所有其他映像并(重新)启动任务。
In large-scale deployments, it is also possible to use your cluster orchestration to schedule and handle this bootstrap procedure instead of the CM tooling but due to the vast differences between each orchestration engine, these steps may vary wildly between them.
# 进一步的通用配置项/光盘用途
像 Jenkins 这样优秀的 CI 工具可以做的事情比我们在这里介绍的要多得多；它们都需要投入大量的时间和精力才能开始工作，但是如果您能够实施它们，好处是非常显著的:
*   **自构建**:如之前的变通方法中所述，您可以让 Jenkins 在配置发生变化时构建自己的映像，并让其自行重新部署。
*   **仅部署已更改的 Docker 映像**:如果使用 Docker 缓存，则可以检查新构建是否创建了不同的映像哈希，如果创建了，则仅进行部署。这样做将防止无意义的工作，并使您的基础架构始终运行最新的代码。
*   **定时 Docker 修剪**:您可以在 Jenkins 上运行清理作业(或任何其他类似于`cron`的作业)，这将释放或管理您的 Docker 节点，以避免手动交互。
这个列表还可以包括:自动发布、失败通知、构建跟踪，以及许多其他可以获得的东西，但是可以说，您真的希望在任何非平凡的部署中有一个工作的配置项管道。
一个经验法则是，如果你需要手动做一些可以用一些计时器和 shell 脚本自动完成的事情，大多数 CI 工具(比如 Jenkins)都在那里帮助你，所以不要害怕尝试它的不同和创造性的用途。有了我们在本章中介绍的一系列选项和其他工具，您可以睡得很香，因为您知道您的集群暂时会好起来，而不需要经常照看孩子。
# 摘要
在本章中，我们已经介绍了更多关于如何真正部署 PaaS 基础架构的内容，并深入研究了它所需的以下主题:使用 Ansible 的配置管理工具、使用 HashiCorp Packer 的云映像管理以及与 Jenkins 的持续集成。有了在这里获得的知识，您现在应该能够使用我们讨论的各种工具，并为您自己的服务部署创建您自己的小型 PaaS，通过一些额外的工作，您可以将其转变为全面的 PaaS！
在下一章中，我们将了解如何利用我们当前的 Docker 和基础架构工作，并使其变得更大。我们还将介绍该领域可能向哪个方向发展，因此，如果您想深入了解世界上最大规模的部署，请继续关注。