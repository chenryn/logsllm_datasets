**作者：腾讯湛泸实验室  
来源：[微博@腾讯湛泸实验室](https://media.weibo.cn/article?id=2309404305612610623070&from=timeline&isappinstalled=0&display=0&retcode=6102
"微博@腾讯湛泸实验室")**
今年9月18号，比特币主流客户端Bitcoin
Core发表[文章](https://bitcoincore.org/en/2018/09/20/notice/
"文章")对其代码中存在的严重安全漏洞CVE-2018-17114进行了全面披露。该漏洞由匿名人士于9月17日提交，可导致特定版本的Bitcoin
Core面临拒绝服务攻击（DoS，威胁版本: 0.14.x - 0.16.2）乃至双花攻击(Double Spend，威胁版本: 0.15.x -0.16.2)。
Bitcoin Core项目组对于该漏洞进行了及时的修补，在向其他分支项目组（如Bitcoin
ABC）进行了漏洞通告并提醒用户进行版本升级后，公布了上段所提到的漏洞披露文章。该文章中对漏洞的成因、危害、影响版本及修复过程时间线进行了简单介绍，但未对漏洞进行详尽分析。
本文基于该漏洞披露文章及Bitcoin
Core项目组在Github上的漏洞修复和测试代码，着重分析该漏洞的修复方法、触发方法、漏洞成因及其所带来的危害。文中涉及测试脚本及PDF版本可于下载。
### 1\. 漏洞修复
在Bitcoin Core的master代码分支上，[commit
b8f8019](https://github.com/bitcoin/bitcoin/commit/b8f801964f59586508ea8da6cf3decd76bc0e571
"commit b8f8019")对这一漏洞进行了修复，如图 1所示。
![
](https://images.seebug.org/content/images/2018/11/93e66e89-3c50-42e1-8a4d-3c829558f369.jpg-w331s)
图 1 CVE-2018-17144修复方法
这段代码位于src/validation.cpp中的CheckBlock()函数，该函数在节点接收到新的区块时被调用。第3125行调用的CheckTransaction()函数及其第三个参数的意义可以参照其代码实现进行分析。
![
](https://images.seebug.org/content/images/2018/11/6c35564c-60ac-4fd0-a442-62438a4d6f07.jpg-w331s)
CheckTransaction()函数对于传入的交易消息（CTransaction&
tx）进行检测，其中包括了检测一笔交易是否发生双花。检测方案非常简单，将这比交易中使用的所有Coin（即代码中的txin.prevout，代表比特币交易中的[UTXO](https://bitcoin.org/en/glossary/unspent-transaction-output
"UTXO")，本文后续均采用Coin一词进行表述，以便与代码持一致）记入std::set中，如果发现某项记录被重复记录了两次，就会返回处理失败的信息（state.DoS），这一消息最终会通过P2P通道，反馈给该区块的发送者。基于代码段中的备注部分，可以看出，这段检测代码在被CheckBlock()函数的调用过程中被认为是冗余和费时的，并通过将函数的第三个参数设置为False的方式，使其跳过。
CheckBlock()执行选择跳过双花检查，是由于其后续会对于整个区块中的交易进行更为复杂而全面的检查。然而，这些检查代码未能像预期的那样对某些异常情况进行检测和处置，导致了漏洞的存在。
### 2\. 漏洞PoC
Bitcoin Core的Github上提供了实现DoS攻击的测试脚本；但要想进行双花攻击的测试，需要自己编写攻击脚本。
#### 2.1. DoS攻击PoC
Bitcoin的master代码分支上，commit b8f8019（即前文提到的漏洞修复commit）的子[commit
9b4a36e](https://github.com/bitcoin/bitcoin/commit/9b4a36effcf642f3844c6696b757266686ece11a
"commit 9b4a36e")给出了该漏洞的验证代码，如图 2所示。
![
](https://images.seebug.org/content/images/2018/11/ca4271db-a35b-47a1-a836-f1f37bcdc392.jpg-w331s)
图 2 官方漏洞PoC
这段使用Python编写的测试代码，位于test/functional/p2p_invalid_block.py测试脚本中。该脚本构建了一个测试网络，测试代码可以通过RPC接口、P2P接口等方式连接到目标节点，并发送测试数据，如恶意构造的区块数据、交易信息等。图
2中新添加的测试代码的功能是：在block2_orig区块中找到了第二项交易（vtx[2]），并将其交易输入中的第一个Coin（vtx[2].vin[0]）重复加入到了输入序列中，从而构造一个使用vtx[2].vin[0]进行双花的交易消息。如92行所示，向已被修复漏洞的node端发送block2_orig区块时，会收到node反馈的拒绝接收消息，其消息内容即为“bad-txns-duplicate”。
如果利用该测试的代码针对未修复漏洞的节点进行测试，则产生的效果如图
3所示。由于测试脚本恶意构造的区块数据引发了目标节点的崩溃，导致了Python脚本与node进程之间的P2P连接断开，使其抛出了ConnectionResetError。
![
](https://images.seebug.org/content/images/2018/11/de477fee-4e0a-438e-952e-14e9ed9b67fc.jpg-w331s)
图 3 官方PoC测试效果图
#### 2.2. 双花攻击PoC
官方的PoC给出了DoS攻击的示意。然而，这段PoC在仅有一个node的测试网络中运行，并且所有交易数据的解锁脚本均被设定为“任何人均可花费”。由于其特殊性，对于验证双花攻击欠缺一定的说服力。因此，本文基于Bitcoin
Core的测试框架，自行编写了一套漏洞验证脚本。
![
](https://images.seebug.org/content/images/2018/11/abde211c-7519-48a1-b0ba-95228e4f9fb0.jpg-w331s)
图 4 双花攻击网络环境示意图
测试过程中的三个角色如图
4所示。N0代表攻击者，利用Python程序所编写的恶意P2P服务，构造恶意区块数据；N1代表诸多正常节点中的一个，是N0的邻居节点，两者通过P2P接口进行消息传递。测试脚本关键代码如下。
![
](https://images.seebug.org/content/images/2018/11/d3b4250e-199e-4a61-b328-17269de2484f.jpg-w331s)
### 3\. 漏洞细节分析
本文从直接导致DoS的PoC开始进行调试，这可以帮助我们快速定位问题代码的位置。利用GDB进行调试，发现发生崩溃时的代码调用栈如下（线程名：msghand）。
![
](https://images.seebug.org/content/images/2018/11/a67c5ba4-710d-46e3-ba29-76a45f8442f9.jpg-w331s)
崩溃现场代码如图
5，根据函数及变量名称可以大致猜想，在进行Coin的更新过程中，会首先检查每笔交易的是否已被花费，如是，则assert失败，导致DoS（Bitcoin
Core官方发布的客户端程序开启assert）。那么为什么又会存在双花攻击的效果呢？这里需要对inputs.SpendCoin()的实现做进一步的分析。
![
](https://images.seebug.org/content/images/2018/11/449671b7-2892-4c55-a17d-4d2053d33727.jpg-w331s)
图 5 DoS代码现场截图
#### 3.1. CCoinsViewCache::SpendCoin()分析
图
5中，inputs变量的类型为CCoinsViewCache类，每个该类的对象均与一个区块对应，并且在其名为base的域中存储了指向其前驱区块的CCoinsViewCache对象的指针。该类中另一个关键的内部变量为cacheCoins，存储了当前区块的处理过程中新产生的或从前驱区块中查询到的Coin信息，它是一个std::map结构，key值为Coin对象的索引信息（所属交易的Hash、UTXO在该交易输出序列中的序号），value值则为Coin的具体信息（货币数额、解锁脚本等）。