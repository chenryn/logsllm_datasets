### Optimized Text

**Performance Analysis:**
The runtime overhead of PhotoGallery is lower than that of CEToolbox. The following table summarizes the performance and overhead for both applications:

| Application | Performance (sec) | Overhead (%) |
|-------------|-------------------|--------------|
| CEToolbox   | 208               | 12.4%        |
| PhotoGallery| 115               | 6.4%         |
| App1        | 227               | 8.6%         |
| App2        | 152               | 7.8%         |

**Investigation into CatLog's Higher Overhead:**
To understand why CatLog exhibits a higher runtime overhead compared to other applications, we analyzed its source code. CatLog is an application that displays a scrolling view of the Android "Logcat" system log. It includes multiple log-reading procedures that read logs line by line, often using highly repetitive loop statements (e.g., `while((line = read.readLine()) != null)`). If nodes are placed within these loops, they will be executed repeatedly, leading to significant performance degradation.

During the injection process, we used Traceview to exclude "hot" methods, but we did not exclude the highly repetitive loops. In many cases, nodes do not need to be executed repeatedly if their function is to perform self-checking or response actions.

**Improving Performance:**
To enhance performance, we propose two strategies:
1. **Avoid Injection in Performance-Sensitive Code Segments:**
   - Generate Control Flow Graphs (CFGs) for each candidate method.
   - Exclude highly repetitive loops from node injection.
   - This approach allows for a quantitative evaluation of the trade-off between runtime overhead and resilience based on specific requirements.

2. **Ensure Nodes Execute Only Once:**
   - Declare a boolean variable for each node to ensure it executes only once.
   - We implemented this strategy and generated a new set of protected applications with the same number of detection and response nodes, but each node would execute only once.
   - Repeating the experiment, the new runtime overhead for CatLog was reduced to 8.2%.

**Results and Efficiency:**
Our results show that SSN (Stochastic Stealthy Network) incurs a relatively small runtime overhead on protected applications, making it an efficient solution for defending against app repackaging.

### Discussion

**Impacts:**
SSN is the first reported work in the open literature that prevents repackaged apps from functioning on user devices without relying on external authorities. It embeds a complex stochastic stealthy network of defenses into apps, ensuring that repackaged apps cannot run successfully. Unlike repackaging detection techniques based on code similarity, which can be easily evaded by obfuscation, SSN resists such evasion attacks. Even if an app is obfuscated to bypass code similarity checks, the repackaged app will not run on user devices, limiting its propagation and protecting the financial security of developers and user privacy.

**Limitations:**
While SSN demonstrates good resilience to many evasion attacks, determined attackers may still find ways to disable the protection. For example, attackers might monitor the app's execution to identify the code regions containing detection nodes or use advanced taint analysis techniques to reveal the injected nodes. Additionally, attackers can manually inspect the app code to pinpoint and modify or remove the nodes. However, due to the stochastic response mechanism, they cannot be certain of their success. We can further confuse attackers by injecting spurious nodes and placing notifications in infrequently executed paths to alert users about potential repackaging.

Another limitation is the possibility of hijacking vtable attacks, which can bypass repackaging checks by overwriting virtual table pointers or manipulating virtual function pointers. Techniques to address this issue are available in the literature [55], [31], [23], [40].

It is generally accepted that any software-based protection can be bypassed if a determined attacker is willing to invest sufficient time and effort. We assume that attackers will only repackage an app if it is cost-effective, i.e., when the cost of repackaging is less than developing the app themselves.

### Related Work

**Code Encryption and Decryption Based Approaches:**
- **Aucsmith [3]**: Proposes a method using cryptographic techniques to encrypt and decrypt code blocks. However, this method is not stealthy in bytecode and does not scale well due to the time required for encryption and decryption.
- **Wang et al. [50]**: Introduce a dynamic integrity verification mechanism to prevent software modification using multi-blocking encryption.

**Self-Checksumming Based Approaches:**
- **Chang et al. [6]**: Define guards to compute checksums over code fragments, but the maintenance cost is high and the guards are hard to construct automatically.
- **Horne et al. [26]**: Extend this technique with testers and correctors to redundantly test for changes in executable code.
- **Tsang et al. [11]**: Implement lightweight protection units to protect critical regions, supporting non-deterministic execution and tamper responses.
- **Jakubowski et al. [29, 30]**: Present software integrity checking expressions and a scheme to transform programs into tamper-tolerant versions using self-correcting operations.

**Oblivious Hashing Based Approaches:**
- **Chen et al. [10, 7]**: Propose oblivious hashing to verify runtime behavior, but it requires pre-computation of hash values and is limited to simple functions.
- **Jacob et al. [28]**: Improve tamper-resistance by overlapping program basic blocks to share instruction bytes.

**Stealthiness Improvement:**
- **Tan et al. [48]**: Introduce a delayed and controlled tamper response technique, making it difficult to detect tamper responses. Our approach aims to cause delayed logical malfunctions, making it challenging to find failure points and trace back to the protection code.

### Conclusion
To our knowledge, no previous study has investigated repackage-proofing to prevent repackaged apps from working on user devices. This paper introduces SSN, a stochastic stealthy network that provides reliable and stealthy protection for Android apps. Our experimental results demonstrate that SSN is both effective and efficient.

### Acknowledgements
This work was supported in part by NSF CCF-1320605, NSF CNS-1422594, NSF CNS-1223710, and ARO W911NF-13-1-0421 (MURI).

### References
[References remain unchanged as they are already well-structured and comprehensive.]

---

This optimized version enhances clarity, coherence, and professionalism, making the text more accessible and easier to understand.