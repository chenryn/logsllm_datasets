proposed in this paper offer two novel approaches that are
generic enough to be applied to most ICS networks and enable
accurate detection of falsiﬁed data and control messages.
III. THREAT MODEL, ASSUMPTIONS, AND GOALS
Without loss of generality, this paper addresses the pro-
posed methods in terms of the power grid with extensions to
other ICS applications being easily made.
One of the unique challenges for ICS network security is
the vast attack surface available due to the distributed nature
of the networks. For example, the electric utility from which
experimental data was gathered for this research covers an
area of 2800 square miles with 35 substations, where each
substation serves as a point of entry to the network. With such
a large area to cover, physical security is extremely difﬁcult
to achieve [20]. Therefore, we consider two different attacker
models: 1) an outsider who is unable to gain physical access
but has compromised a low powered node in the network
with malware, and 2) an outsider who is feasibly able to gain
physical access to the target network and use her own portable
machine with standard laptop computing power. The ﬁrst
attacker model was chosen due to how vulnerable these devices
are (as evidenced by the 30 year old TCP vulnerabilities found
widespread in the power grid [9]) and because it was the
method used on the most well known ICS attack to date,
Stuxnet [15]. The second attacker model is realistic in the
scenario of a widely distributed control system where physical
security is difﬁcult to achieve.
Figure 2 illustrates the different points of attack that an
adversary can take advantage of when attacking a power
substation network. He can either attack the communication
infrastructure or one of the individual devices such as the
remote terminal unit (RTU) or a programmable logic controller
(PLC). Depending on where he attacks the network, the adver-
sary can attempt to inject false data responses, false command
responses, or both. As already discussed in the related work
in Section II, false data and command injections such as
3
the application layer with acknowledgments at the TCP layer
to get an estimate of the time a device takes to process the
request, and then develops a ﬁngerprint for each device based
on the distribution of these times. The timing diagram of
how this measurement, which we call the cross-layer response
time (CLRT), would be taken in a typical SCADA network is
illustrated in Figure 3. It should be noted that since the CLRT
measurement is based on the time between two consecutive
packets from the same source to the same destination, it is
independent of the round trip time between the two nodes.
Fig. 3. Measurement of cross-layer response time
The ﬁngerprint signature is deﬁned by a vector of bin
counts from a histogram of CLRTs where the ﬁnal bin includes
all values greater than a heuristic threshold. For a formal
deﬁnition, let M be a set of CLRT measurements from a
speciﬁc device, B deﬁne the number of bins in the histogram
(and equivalently the number of features in the signature
vector), and H signify the heuristic threshold chosen to be
an estimate of the global maximum that CLRT measurements
should ever take. We divide the range of possible values by
thresholds ti where ti = i H
B−1, and deﬁne each element sj of
the signature vector by the following equation:
(cid:26)|{m : tj−1 ≤ m  H, m ∈ M}|
sj =
0 < j < B
j = B
(1)
1) Theory: The CLRT measurement is advantageous for
ﬁngerprinting ICS devices because it remains relatively static
and its distribution is unique within device types and even
software conﬁgurations. To understand why this is true for ICS
devices, all of the factors which might affect this measurement
must be considered.
Device Characteristics. ICS devices have simpler hard-
ware and software architectures than general purpose comput-
ers because they are built to perform very specialized critical
tasks and do little else. A typical modern-day computer now
has fast multi-core processors in the range of 2-3GHz with
signiﬁcant caching, gigabytes of RAM, and context switching
between the wide variety of processes running on the machine.
In contrast, the ICS world is dominated by programmable logic
controllers (PLCs) running on low powered CPUs in the tens
to hundreds of MHz frequencies with little to no caching, tens
to hundreds of megabytes of RAM and very few processes.
With such limited computing power available, relatively small
changes in programming result in observable timing differ-
ences. Depending on the desired task, different ICS device
types are built with different hardware speciﬁcations (CPU
frequencies, memory and bus speeds) [18] as well as different
4
Fig. 2. Points of attack in a power substation network
these can have disastrous effects on the power grid. With
this in mind, the goal of this research is to develop accurate
ﬁngerprinting methods to identify what type of device these
responses are originating from as opposed to unique devices.
Such methods could be crucial
to distinguishing between
responses originating from a legitimate IED, an adversary with
a laptop who has gained access to the network, or a comprised
IED posing as a different device on the network.
For a formal deﬁnition, assume the global set of all ICS
devices G consists of products Dj,k, where j identiﬁes the
vendor and k signiﬁes the model for each vendor’s product.
Given a sequence of observations Oi every device i on the
network, the goal of the ﬁngerprinting methods will be to
identify which subset of G, speciﬁcally which Dj,k, those
observations belong to.
IV. OVERVIEW OF DEVICE FINGERPRINTING METHODS
Two of the properties that differentiate ICS networks from
more traditional networks are their primary functions of data
acquisition through regular polling for measurements and con-
trol commands. These properties hold true for all of the most
critical ICS networks regardless of the underlying physical
process, including the distribution of power, water, oil, and
natural gas. The two methods proposed below take advantage
of these unique properties and are explained using the power
grid as a speciﬁc example. The ﬁrst method is evaluated using
data from a live power substation and veriﬁed with controlled
lab experiments. The second method is evaluated only with lab
experiments due to the relatively rare occurrence of operations
in the given dataset1, but it should be noted that other power
grid networks and industries, such as oil and gas, have more
frequent operations.
A. Method 1: Cross-layer Response Times
The ﬁrst proposed ﬁngerprinting method addresses the
data acquisition half of SCADA systems by leveraging the
interaction between regular polling of measurement data at
1The utility whose network we monitored is small and part of a Utility
Cooperative, and the control actions are not representative of larger, more
modern, utilities.
software (operating systems, protocol stack implementations,
number of measurements being taken, complexity of control
logic) all resulting in each one being able to process requests
at different speeds. However most importantly, no matter what
kind of ICS network it is in or what physical value the device
is measuring (e.g. voltage, pressure, ﬂow rate, temperature) the
device is still going to go through the same process of parsing
the data request, retrieving the measurement from memory, and
sending the response. Therefore, due to the limited processing
power and ﬁxed CPU load CLRTs can be leveraged to identify
ICS device types, but this does not explain why the CLRTs
are so constant over the network.
Network Level Characteristics. Although the use case
for this technique (as in the deployment of any anomaly
based IDS) would involve a training period on each target
network, one of the desired properties for device ﬁngerprinting
in general is that the network architecture of the target not be
a signiﬁcant factor.
In a traditional corporate network mobile phones and
laptops are constantly moving around and connecting to dif-
ferent wireless access points. The trafﬁc they are generating
is traveling over vast distances, encountering routers that are
experiencing unpredictable loads, and consecutive packets are
never guaranteed to take the same path over the Internet.
However, devices in ICS networks are dedicated to one critical
task and are ﬁxed in a permanent location. The trafﬁc generated
from their regular polling intervals travel over relatively short
geographic distance and over simple network architectures that
offer little to no chance for consecutive packets to take differ-
ent paths. The regular polling cycle means that routers and
switches on ICS networks have consistent predictable loads
which result
in consistent and predictable queuing delays.
Consequently for any given ICS network, a TCP ACK and
SCADA response sent in quick succession will with extremely
high probability take the same exact path, encounter the same
delay, and therefore have a very consistent spacing in between
them. Therefore,
there is little opportunity for differences
in network architecture to cause signiﬁcant changes in the
distribution of CLRTs. In Section IV-A3 we study how much
a change in networks effects the performance by learning
ﬁngerprints from one substation and testing the ﬁngerprints
over a year later on a different substation.
Due to the low computational power found in ICS devices,
the CLRTs are much larger than most delays that might be
caused by differences in network architecture. In the real-
world dataset used for this research, illustrated in Figure 6a,
the CLRTs are all on the order of tens or even hundreds of
milliseconds. In contrast, typical latencies obtained from ICS
network switch datasheets and theoretical transmission delays
on a 100Mbps link are both on the order of microseconds,
resulting in a minor contribution to the overall CLRT mea-
surement. Furthermore, ICS networks most often have over-
provisioned available bandwidth to ensure reliability (e.g. the
live power substation network studied for this research used an
average of 11Kbps bandwidth out of the available 100Mbps,
a strikingly low trafﬁc intensity of 0.01%). These low trafﬁc
intensities ensure that the switches and routers on the network
are never heavily loaded and have consistently low queuing
delays.
Finally, even in the scenario where two network architec-
tures are so different as to signiﬁcantly alter the distribution of
CLRTs, this would have no signiﬁcant effect on the defensive
utility of the proposed method and would arguably make it
stronger. Any real-world application of the ﬁngerprinting tech-
nique would involve a training period on the target network that
would capture the minor effects of the network architecture.
Then, if an attacker was attempting to create an ofﬂine database
of signatures for all device types and software conﬁgurations
without access to the speciﬁc target network, she would also
have to consider all the possible network architectures that
could affect them.
Due to this combination of low computational power, ﬁxed
CPU loads, and simple networks with predictable trafﬁc, any
signiﬁcant change in a device’s distribution of CLRTs highly
suggests either an attacker spooﬁng the responses with a
different machine, or a change in CPU workload [25] or
software conﬁguration, which could be a sign of a device being
compromised with malware.
2) Experimental Setup: To test this method, experiments
were run at a large scale using a real world dataset as well
as on a small scale using controlled lab tests. The large
scale tests were conducted in two rounds, before and after
changes in the network architecture. First, network trafﬁc
( 20GB) was captured from a live power substation with
roughly 130 devices running the DNP3 protocol over the span
of ﬁve months with the network architecture as illustrated in
Figure 4. Then over a year later, one more month of data
was captured from the same substation after the network was
slightly modiﬁed by replacing the main router with a new
switch, changing the IP addressing scheme accordingly, and
increasing the frequency of measurement polling. Additionally,
a brief overnight capture was collected from another substation
with a different architecture (roughly 80 devices using DNP3,
illustrated in Figure 5) to test if ﬁngerprints learned on one
network would translate to another. The company operating
the substations provided a list of all device IP addresses on
the network organized by location, device type, and device
software conﬁguration, and machine learning techniques were
applied to attempt to make these labeled classiﬁcations.
Further tests were conducted in the lab to study the effects
of the software conﬁguration alone and to rule out any possible
factors related to different hardware or different round-trip
times (RTT) on the network.
In both scenarios, CLRT measurements were taken from
DNP3 polling requests for event data and were summarized
by dividing all measurements into time slices (e.g. one hour,
or one day) and calculating means, variances, and 200-bin
histograms for each time slice. Machine learning techniques
were then evaluated using two different feature vectors: a more
complex approach using the arrays of bin counts as deﬁned in
Equation 1 and a simple approach using arrays containing only
the mean and variance for each time slice.
3) Results: Device and Software Type Fingerprinting.
To obtain a rough visualization of the separability of the
device types based on their CLRT measurements, a scatter
plot based on the mean and variances of CLRTs was produced
and the true labels of the devices were illustrated in Figure 6a.
Each point represents the mean and variance of the CLRT
5
Fig. 4. Network Architecture of First Substation
Fig. 5. Network Architecture of Second Substation
measurements for one IP address over the course of one
day out of the original ﬁve month dataset. From the ﬁgure
we can tell that even using simple metrics such as means
and variances, results in the vendors and hardware device
types being highly separable. Furthermore, it suggests that
this method can also subdivide identical hardware device types
into classes based on different software conﬁgurations (Vendor
A Types 1a and 1b). For veriﬁcation of this hypothesis, see
Appendix A. These conclusions were further supported when
the probability density functions (PDFs) of CLRTs over a day
were estimated for each type in Figure 6b.
Since Figure 6a illustrates that device types are clearly
separable based on simple mean and variance measurements,
virtually any choice of a properly tuned machine learning algo-
rithm would result in high accuracy classiﬁcation. Therefore,
as the purpose and novelty of this work is not the use of
machine learning for ﬁngerprinting, a sampling of the most
popular algorithms in the ﬁeld were chosen as examples.
To measure the performance of our ﬁngerprinting tech-
niques throughout this work, we calculate the standard clas-
siﬁcation metrics of accuracy, precision, and recall as deﬁned
in Equations 2, 3, and 4 for each class separately, where T P ,
T N, F P , and F N stand for true positive, true negative, false
positive, and false negative, respectively. To summarize these
results, the average value across classes was plotted alongside
the minimum value among classes.
ACC =
T P + T N
T P + T N + F P + F N
P REC =
T P
T P + F P
REC =
T P
T P + F N
(2)
(3)
(4)
The ﬁrst machine learning algorithm used in these experi-
ments to classify the labeled data was a feed forward artiﬁcial
neural network (FF-ANN) with one hidden layer trained using
the back propagation algorithm. This algorithm was chosen
(a) CLRT samples for all devices with a time slice
of one day
(b) Estimated PDFs of CLRTs for ﬁve sample devices
over one day
Fig. 6. Separability of device types based on CLRT
due to its popularity and previous use in related work [18].
The bin counts of the histograms, as deﬁned in Equation 1,
were used as the feature vector for each sample and the time
slice they were taken over was varied. The samples were
randomly divided using 75% as training data and 25% as