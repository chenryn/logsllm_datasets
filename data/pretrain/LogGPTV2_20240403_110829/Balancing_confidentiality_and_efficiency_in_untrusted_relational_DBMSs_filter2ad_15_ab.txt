in query execution, as all the tuples returned belong to the
query set of the original query. In particular, the solution
is convenient for queries involving equality constraints over
the attributes. Also, since equality predicates are almost
always used in the computation of joins, a join applied on
1In the remainder of the paper, for the sake of simplicity, we
shall designate this table format with the term encrypted.
two tables that use the same encryption function on the join
attribute can be computed precisely.
As a drawback, however, in this approach encrypted val-
ues reproduce exactly the plaintext values distribution with
respect to values’ cardinality (i.e., the number of distinct
values of the attribute) and frequencies; this could open the
doors to frequency-based attacks (see next section).
A third alternative approach to counter these attacks, is to
use as index the result of a secure hash function over the at-
tribute values rather than straightforwardly encrypting the
attributes; this way, the attribute values’ distribution can be
ﬂattened by the hash function. A ﬂexible characteristic of a
hash function is the cardinality of its co-domain B, which
allows us to adapt to the granularity of the represented data.
When B is small compared with the cardinality of the at-
tribute, the hash function can be interpreted as a mechanism
that distributes tuples in B buckets; a good hash function
(and a secure hash has to be good) distributes uniformly
the values in the buckets. For instance, the Accounts ta-
ble in Figure 2 can be indexed by hashing considering three
buckets (α, β, δ) for IC and two buckets (µ, κ) for IB. The
encrypted relation Enc accounts2 in Figure 2 can then
be obtained when Alice is mapped onto α, Bob and Chris
are both mapped onto β, while Donna and Elvis are both
mapped onto δ. Also, 200 is mapped to κ while all other
balance values are mapped onto µ. With respect to direct
encryption, hash-based indexing provides more protection as
diﬀerent plaintext values are mapped onto the same index.
Using attribute hashes in remote tables permits an ef-
ﬁcient evaluation of equality predicates within the remote
server. If the same hash function is used to compute values
of two attributes of diﬀerent tables on which the equality
predicate must be evaluated in the context of a join query,
the join query itself can be eﬃciently computed at the re-
mote server simply by combining all of the pairs of tuples
characterized by the same hash value.
When direct encryption is used for indexing, the result
returned by a query on the encrypted table is exactly the
query set of the original query. The only task left for the
front end is then decryption. By contrast, when hashing is
used, the results will often include spurious tuples (all those
belonging to the same bucket of the index) that will have
to be removed by the front end receiving it. In this case,
the additional burden on the front end consists in purging
from the result returned by the remote server all the pairs of
tuples that, once brought back in plaintext form, do not sat-
isfy the equality predicate on the join attribute. Intuitively,
(cid:1)
every query Q of the front end corresponds to a query Q
to be passed onto the untrusted DBMS for execution over
the encrypted database and a query Q
to be executed at
the front end on the results of Q
. To illustrate, consider
the encrypted table Enc Accounts2 in Figure 2 and the
user query Q “select balance from Accounts where
= “select
customer=Bob”. The query is translated as Q
Enc tuple from Enc Account2 where Ic = β” for exe-
cution by the untrusted DBMS which returns the third and
fourth encrypted tuple. The trusted front end then decrypts
the two obtaining tuples third and fourth of the original ta-
ble Accounts and eliminates the latter (whose presence was
due to index collision) by reevaluating the condition.
(cid:1)(cid:1)
(cid:1)
(cid:1)
3.
INFERENCE EXPOSURE COEFFICIENTS
Being closely related to plaintext data, indexing informa-
tion could open the door to inferences that exploit data anal-
ysis techniques to reconstruct the database content and/or
break the indexing code. It is important to be able to evalu-
ate quantitatively the level of exposure associated with the
publication of certain indexes and therefore to determine the
proper balance between index eﬃciency and protection.
There are diﬀerent ways in which inference attacks could
be modeled. We distinguish two notions that diﬀer in the
assumption about the attacker’s prior knowledge. In com-
mon, the two scenarios have the fact that the attacker has
complete access on the encrypted relations.
In the ﬁrst case, which we call Freq+DBK scenario, we
assume the attacker is aware of the distribution of plain-
text values in the original database. This knowledge can
be exact (e.g., in a database storing accounting information
the account holder list can be fully known) or approximated
(e.g., the ZIP codes of the geographical areas of the account
holders can be estimated based on population data). For
the sake of simplicity, in the following we will assume exact
knowledge (which represents the worst case scenario).
In
this scenario there are two possible inferences that the at-
i) the plaintext content of the database,
tacker can draw:
that is, determine the existence of a certain tuple (or as-
sociation of values) in the original database, and/or ii) the
indexing function, that is, determine the correspondence be-
tween plaintext values and indexes.
In the second case, which we call DB+DBK scenario, we
assume the attacker has both the encrypted and the plain-
text database. In this case the inference allows the attacker
to break the indexing function, thus establishing the cor-
relation between plaintext data and the corresponding in-
dex values. The hosting server has then available both the
plaintext data and the corresponding indexes, by breaking
indexing, the malicious server will then be able to decode
any additional encrypted tuple that can be inserted in the
database.
In the remainder of this section we introduce two coeﬃ-
cients to assess the exposure of indexes in the two scenarios
above. The indexing code we refer to is direct encryption;
besides being easier to understand, it can be regarded as a
worst case situation of the general hashing indexing.
3.1 Freq+DBK Exposure
To illustrate this scenario, let us consider the example in
Figure 2. The attacker knows the encrypted Enc accounts1;
also, she knows that attribute Account has unique values
and she knows the values (and their occurrences) appearing
independently in attributes Customer and Balance:
Customer={Alice,Alice,Bob,Chris,Donna,Elvis}
Balance={100,200,200,200,300,400}.
Although the attacker does not know which index cor-
responds to which plaintext attribute, she can determine
the actual correspondence by comparing their occurrence
proﬁles. Namely, she can determine that IA, IC , and IB
correspond to attributes Account, Customer and Balance
respectively. The attacker can then infer that κ represents
value 200 and index α represents value Alice (indexing in-
ference). She can also infer that the plaintext table contains
a tuple associating values Alice and 200 (association infer-
ence). The other occurrence of the index value correspond-
ing to Alice (i.e., α) is associated with a balance other than
200. Since there are only three other possible values, the
probability of guessing it right is 1/3. In other terms, the
probability of each association depends on the combination
of occurrences of its values.
Intuitively, the basic protection from inference in the en-
crypted table is that values with the same number of occur-
rences are indistinguishable to the attacker. For instance, all
customers but Alice are indistinguishable from one another,
as well as all amounts but 200. By contrast, Alice and 200
stand out being, respectively, the only customer appearing
twice and the only balance appearing three times.
The exposure of an encrypted relation to indexing infer-
ence can then be thought of in terms of an equivalence re-
lation where indexes (and plaintext values) with the same
number of occurrences belong to the same equivalence class.
For instance, denoting each equivalence class with a dot no-
tation showing the attribute name and its number of occur-
rences (e.g., class A.1 contains all the values of attribute A
that occur once), we obtain:
A.1 = {π, , ξ, , ς, Γ} = {Acc1,Acc2,Acc3,Acc4,Acc5,Acc6}
C.1 = {β, γ, δ, } = {Bob,Chris,Donna,Elvis}
C.2 = {α} = {Alice}
B.1 = {µ, η, θ} = {100,300,400}
B.3 = {κ}={200}
The quotient of the encrypted table with respect to the
equivalence relation deﬁned above is the following.
qtC
Quotient Table
qtA
qtB
A.1 C.2 B.1
A.1 C.2 B.3
A.1 C.1 B.1
A.1 C.1 B.3
A.1 C.1 B.1
A.1 C.1 B.3
IC Table
icA
1/6
1/6
1/6
1/6
1/6
1/6
icC
1
1
1/4
1/4
1/4
1/4
icB
1/3
1
1/3
1
1/3
1
The exposure of the encrypted table to inference attacks
can then be evaluated by looking at the distinguishable char-
acteristics in the quotient table.
In particular, the asso-
ciation (cid:2)Alice,200(cid:3) (and its correspondence (cid:2)α, κ(cid:3)) can be
spotted with certainty being the encounter of two single-
ton equivalence classes (C.2 and B.3). For the other values,
probabilistic considerations can be made by looking at the
IC table, that is the table of the inverse of the cardinalities
of the equivalence classes. In fact, the probability of disclos-
ing a speciﬁc association is the product of the inverses of the
cardinalities. The exposure of the whole relation (or projec-
tion of it) can then be estimated as the average exposure of
each tuple in it. Formally we can write the exposure coeﬃ-
cient E associated with an encrypted relation with inverse
cardinality table IC as:
E =
1
n
n
k
(cid:0)
i=1
(cid:1)
j=1
ICi,j
(1)
columns.
Here, i ranges over the tuples while j ranges over the
With reference to our example we have a value of E = 1/18
for the protection of the whole relation, and a value of 1/3
for the pair (cid:2)Customer, Balance(cid:3).
Note how a long tailed distribution of values (i.e., many
values having low occurrence) can decrease the exposure to
association attacks. This reﬂects the fact that while the
attacker has information on many values, they all fall into
the same equivalence class resulting indistinguishable from
one another.
Taking into account the fact that each index value cor-
responds to a single plaintext one, the exposure computed
above may be regarded as a lower bound to vulnerability to
association inference. Let us then now consider the eﬀect on
the exposure when indexes are obtained by hashing values
rather than by direct encryption. In this case each hashed
value can correspond to multiple attribute values (as it is the
case for index value β in table Enc Accounts2). Therefore,
each equivalence class on hashed values can be composed of
multiple subsets of plaintext values. For instance, any of the
index values α, β, and δ in Enc Accounts2 can correspond
to any pair of customer values.
In a scenario where all plaintext values are distinct, their
hashed values multiplicity is entirely due to collision. Then,
each hash value in the equivalence class of multiplicity k can
represent any k values extracted from the original set, that
is, there are  n
k diﬀerent possibilities. The identiﬁcation
of the correspondence between hashed and original values
would require ﬁnding all possible partitions of the original
values such that the sum of their occurrences is the cardi-
nality of the hashed value. Computing the corresponding
re-arrangement of equivalence classes would then equate to
solving a knapsack problem [4]. In general this introduces
a high degree of uniformity in the indexes and inference at-
tacks become negligible.
3.2 DB+DBk Exposure
We now consider a situation where the attacker knows
both the encrypted and the plaintext database. A scenario
for this attack occurs when the database owner switches
from no encryption to the use of encryption as presented in
this paper. A malicious user with access to the database
server may then be very interested in reconstructing the
correspondence between the plaintext and index values, in
order to monitor the evolution of the database and keep
access to most of its content, independently of the strength
of the encryption function adopted.
The attacker knows precisely the distribution of every
value and the relationships among the diﬀerent values. The
additional knowledge available to the attacker requires a
more precise model than the one used in the previous sec-
tion. We present a model for the attack that permits also
to use robust and consolidated algorithmic techniques to de-
rive a precise characterization of the solution space and of
the exposure coeﬃcient that needs to be redeﬁned in this
context.
3.2.1 The RCV-graph
Given a table T with attributes A1, A2, . . . An and tu-
ples t1, t2, . . . tm, we build a 3-colored undirected graph G =
(V, E) called the RCV-graph (i.e., the row-column-value–
graph) in the following way. The set of vertices V contains
one vertex for every attribute (all of color “column”), one
vertex for every tuple (all of color “row”), and one vertex
for every distinct value in each of the attributes (all of color
“value”); if the same value appears in diﬀerent attributes,
a distinct vertex is introduced for every attribute in which
the value appears. The set of edges E is built ﬁrst adding
edges connecting the vertices representing columns with the
vertices representing values appearing in the corresponding
columns; then, edges are added connecting each tuple ver-
Col1
Col2
(cid:7)
(cid:4)
(cid:5)
(cid:6)
t1
t2
t3
t4
t5
t6
(cid:0)
(cid:1)
(cid:2)
Æ
(cid:3)
Figure
Enc Accounts1 of Figure 2
The RCV-graph
3:
from relation
tex with the vertices representing values appearing in the
tuple. To illustrate, consider table Enc Accounts1 in Fig-
ure 2, restricted to attributes Customer and Balance. We
have two vertices labeled Col1 and Col2 for the attributes,
six vertices labeled t1 . . . t6 for the tuples, and nine vertices
labeled α . . . θ for the distinct values appearing in the at-
tributes. The addition of all the edges produces the RCV-
graph depicted in Figure 3.
An important property is that the RCV-graph built start-
ing from the plaintext database is identical to the RCV-
graph built starting from the encrypted database, since the
cryptographic function only realizes a biunivocal mapping
between plaintext and index values (in the relational model,
the order of tuples and the order of attributes within a re-
lation are irrelevant). The identiﬁcation of the correspon-
dence between plaintext and index values requires then to
establish a correspondence between the vertex labels and
the plaintext values discussed in the following section.
3.2.2 RCV-graph Automorphism