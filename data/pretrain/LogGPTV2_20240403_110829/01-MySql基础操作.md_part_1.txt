# 今日任务
-   SQL语句概念
-   创建数据库
-   创建表
-   熟悉INSERT DELETE UPDATE语句
    熟悉各种**SQL**语句！
    SQL在不同的数据库中相似度很高，但是还是有细微差别！
# 1.MySQL数据库服务器、数据库和表的关系
所谓安装数据库服务器，只是在机器上装了一个数据库管理程序，这个管理程序可以管理多个数据库，一般开发人员会针对每一个应用创建一个数据库。
为保存应用中实体的数据，一般会在数据库创建多个表，以保存程序中实体的数据。
数据库服务器、数据库和表的关系如图所示：
![](media/image1.png){width="5.0777777777777775in"
height="1.7083333333333333in"}
# 连接Mysql
## 2.1 启动Mysql服务
安装后，MySQL会以windows服务的方式为我们提供数据存储功能。开启和关闭服务的操作：右键点击我的电脑→管理→服务→可以找到MySQL服务开启或停止。
![](media/image2.png){width="5.201388888888889in"
height="3.814583333333333in"}
## 2.2命令行连接并登录Mysql服务器
MySQL是一个需要账户名密码登录的数据库，登陆后使用，它提供了一个默认的root账号，使用安装时设置的密码即可登录。
格式1：cmd\> mysql --u用户名 --p密码
例如：mysql -uroot --proot
![](media/image3.png){width="5.844444444444444in" height="2.4125in"}
格式2：cmd\> mysql \--host=ip地址 \--user=用户名 \--password=密码
例如：mysql \--host=127.0.0.1 \--user=root \--password=root
![](media/image4.png){width="6.000694444444444in"
height="2.5145833333333334in"}
## 2.3使用可视化的客户端（例如navicat）
![](media/image5.png){width="3.25625in" height="3.660416666666667in"}
# SQL语句简介
Mysql数据库的操作需要SQL支持！
-   数据库是不认识JAVA语言的，但是我们同样要与数据库交互，这时需要使用到数据库认识的语言**SQL语句，它是数据库的代码**。
-   结构化查询语言(**S**tructured **Q**uery
    **L**anguage)简称SQL，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。
-   创建数据库、创建数据表、向数据表中添加一条条数据信息均需要使用SQL语句。
-   数库都是使用SQL语句进行操作的，不同的数据库，SQL语句有细微的差别！！
-   **SQL语句不区分大小写！！！一般推荐用大写！**
-   **SQL语句英文分号结尾！**
# SQL语句分类
-   数据定义语言：简称DDL(Data Definition
    Language)，用来定义数据库对象：数据库，表，列等。关键字：**create**，**alter**，**drop**等
-   数据操作语言：简称DML(Data Manipulation
    Language)，用来对数据库中表的记录进行更新。关键字：insert，delete，update等
-   数据控制语言：简称DCL(Data Control
    Language)，用来定义数据库的访问权限和安全级别，及创建用户。
-   数据查询语言：简称DQL(Data Query
    Language)，用来查询数据库中表的记录。关键字：select，from，where等
    ![](media/image6.png){width="5.283333333333333in"
    height="2.734722222222222in"}
5.  # DDL应用
    1.  ## 数据库操作
### 5.1.1创建数据库
格式:
\* **create** database 数据库名;
\* **create** database 数据库名 character set 字符集 COLLATE 排序规则;
例如：
#创建数据库 数据库中数据的编码采用的是安装数据库时指定的默认编码
utf8,内部字符排序规则默认 utf8_general_ci
CREATE DATABASE day0101;
#创建数据库 并指定数据库中数据的编码
CREATE DATABASE day0101 CHARACTER SET utf8;
练习:
创建一个名称为mydb1的数据库。
Create database mydb1;
创建一个使用utf8字符集的mydb2数据库。
Create database mydb2 character set utf8;
创建一个使用utf8字符集，并带排序规则的mydb3数据库。
Create database mydb3 character set utf8 collate utf8_general_ci;
-   查看数据库
查看数据库MySQL服务器中的所有的数据库:
show databases;
查看某个数据库的定义的信息:
show create database 数据库名;
> 例如：
show create database day0101;
![](media/image7.png){width="5.761805555555555in"
height="1.0993055555555555in"}
-   删除数据库
drop database 数据库名称;
> 例如：
drop database day0101;
-   其他的数据库操作命令
切换数据库：
use 数据库名;
例如：
use day0101;
-   查看正在使用的数据库:
select database();
### 5.1.2 修改数据库
不能修改数据库名，只能**字符集**和字符集排序较方式
ALTER DATABASE db_name   
\[DEFAULT\] CHARACTER SET charset_name 
\| \[DEFAULT\] COLLATE collation_name
-   切换数据库 use db_name;
-   查看当前使用的数据库 select database();
练习：
查看服务器中的数据库，并把其中某一个库的字符集修改为utf8;
alter database mydb1 character set utf8
## Mysql**常见**数据类型
MySQL中的我们常使用的数据类型如下
![](media/image8.png){width="5.583333333333333in" height="1.1875in"}
-   **字符串型** VARCHAR(可变长度)、CHAR(定长)
大数据类型 BLOB（字节型大数据）、TEXT（字符型大数据）
数值型 TINYINT(**Byte**)
、SMALLINT(**Short**)、**INT**、BIGINT(**Long**)、FLOAT、**DOUBLE**
日期型
DATE（年月日）、TIME（时分秒）、DATETIME（年月日时分秒）
-   **varchar和char的区别**
varchar 变长字符串 省空间
Char 定长字符串 效率高
![](media/image9.png){width="5.761111111111111in"
height="1.1256944444444446in"}
## 创建数据表(不带约束)
### 5.3.1 SQL语句创建
![](media/image10.png){width="5.763888888888889in"
height="4.702083333333333in"}
注意：创建表前，要先使用use db语句使用库。
+-----------------------------------------------------------------------+
| \-- 学生表                                                            |
|                                                                       |
| CREATE TABLE STUDENT (                                                |
|                                                                       |
| ID INT (8),                                                           |
|                                                                       |
| NAME VARCHAR (4),                                                     |
|                                                                       |
| SEX CHAR (1),                                                         |
|                                                                       |
| AGE INT (3),                                                          |
|                                                                       |
| BIRTHDAY DATE,                                                        |
|                                                                       |
| WEIGHT DOUBLE,                                                        |
|                                                                       |
| EMAIL VARCHAR (20)                                                    |
|                                                                       |
| );                                                                    |
+-----------------------------------------------------------------------+
### 5.3.1 查看表
-   查看数据库中的所有表： 查询某一数据库下面所有的表
格式：**show tables;**
-   查看表结构：
格式：desc 表名;
例如：desc student;
![](media/image11.png){width="5.525in" height="2.2583333333333333in"}
### 5.3.2 可视化界面创建
## 表的约束（对这一列数据的限定条件）
数据库中的约束是加在列上的，是对整个列数据进行约束。
数据库的约束包括5种：
-   主键约束(表每一行数据的唯一标识，学号、订单号、工号、快递号\...)：
    **primary key**:**不允许为空，不允许重复**。
    一个表都需要做一个主键，如果找不到什么是主键的话，就生写一个**编号**主键！
    一般主键都是自动增长的，主键一般都是数字类型！
    如果主键想自动增长，那么设置
    自动增长 **auto_increment** （必须是整数类型字段）
    如果主键是字符串，那么就需要手动填！
-   非空约束：**not null** 某一字段不能为空,
    如果不设置，默认是可以为null！
    例如：salary double **not null**
-   唯一性约束： **unique**
    某一个字段的值是否是唯一的，例如身份证号码、手机号、邮箱\....
    例如：name varchar(20) **unique**
-   外键约束（后面多表时讲）