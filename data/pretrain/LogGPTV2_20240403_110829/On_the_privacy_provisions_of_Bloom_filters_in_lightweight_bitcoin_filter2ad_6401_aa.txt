# Title: On the Privacy Provisions of Bloom Filters in Lightweight Bitcoin Clients

## Authors:
- Arthur Gervais†
- Srdjan Capkun†
- Ghassan O. Karame‡
- Damian Gruber†

**Affiliations:**
- †ETH Zurich, Switzerland
- ‡NEC Laboratories Europe, Germany

**Contact Information:**
- †[EMAIL]
- ‡[EMAIL]
- [EMAIL]

## Abstract
Lightweight Bitcoin clients are gaining popularity due to their reduced resource and bandwidth consumption. These clients support Simplified Payment Verification (SPV) mode, requiring only a portion of the blockchain to be downloaded, making them suitable for use on constrained devices such as smartphones. SPV clients rely on Bloom filters to receive transactions relevant to their local wallet. These filters contain all the Bitcoin addresses used by the SPV client and are outsourced to more powerful Bitcoin nodes, which forward relevant transactions.

In this paper, we explore the privacy implications of using Bloom filters in existing SPV clients. We demonstrate analytically and empirically that the reliance on Bloom filters can leak significant information about the Bitcoin addresses of users. Our results show that an SPV client with a modest number of addresses (e.g., < 20) risks revealing almost all of their addresses. This leakage is exacerbated when users restart their SPV clients or when the adversary has access to multiple Bloom filters from the same client. Motivated by these findings, we propose an efficient countermeasure to enhance the privacy of SPV clients, which can be directly integrated into existing implementations.

## 1. Introduction
Bitcoin has seen wider adoption and attention than any other digital currency proposed to date. It implements a distributed time-stamping service, ensuring that all transactions and their order of execution are visible to all Bitcoin users. Transactions are included in blocks that are broadcasted across the network, forming the Bitcoin blockchain.

Currently, a typical Bitcoin installation requires over 18 GB of disk space and considerable time to download and index the blockchain. The increasing transactional volume in Bitcoin is expected to further increase the size of the blockchain. Additionally, the continuous growth of Bitcoin's transactional volume incurs significant overhead on Bitcoin clients, especially when verifying transactions on resource-constrained devices like mobile phones.

To address this, Bitcoin developers released a lightweight client, BitcoinJ, which supports SPV mode. In SPV mode, only a small part of the blockchain is downloaded, making it suitable for use on constrained devices. SPV clients originally proposed by Nakamoto were later extended to use Bloom filters to receive relevant transactions. These filters contain all the addresses used by the SPV client and are outsourced to more powerful Bitcoin nodes, which forward relevant transactions.

Bloom filters can be defined with a target false positive rate, aiming to provide a suitable anonymity set to hide the addresses of SPV clients. However, the information leakage associated with Bloom filters has not been thoroughly analyzed. In this paper, we address this issue and explore the privacy provisions of Bloom filters in existing SPV client implementations. We show that the current integration of Bloom filters leaks significant information about the addresses of Bitcoin users, particularly for those with a modest number of addresses. This leakage is further exacerbated when nodes restart or generate additional addresses.

Our work motivates a careful assessment of the current implementation of SPV clients before large-scale deployment. We make the following contributions:
- We demonstrate that considerable information about users with a modest number of Bitcoin addresses (e.g., < 20) is leaked by a single Bloom filter.
- We show that an adversary can easily link different Bloom filters embedding the same elements, irrespective of the target false positive rate.
- We demonstrate that a considerable number of user addresses are leaked if the adversary can collect at least two Bloom filters issued by the same SPV client.
- Finally, we propose a lightweight and efficient countermeasure to enhance the privacy offered by SPV clients, which can be integrated with minimal modifications into existing SPV client implementations.

The remainder of the paper is organized as follows: In Section 2, we provide a brief overview of SPV clients. In Section 3, we introduce our system and attacker model. In Section 4, we analyze the privacy provisions of existing SPV client implementations when the adversary captures a single Bloom filter. In Section 5, we discuss the information leakage when the adversary acquires multiple Bloom filters. In Section 6, we propose an efficient solution to enhance the privacy of users in SPV clients. In Section 7, we review related work, and we conclude the paper in Section 8.

## 2. Background
### 2.1 Bitcoin Overview
Bitcoin allows users to perform payments by issuing transactions. A standard transaction transfers Bitcoins (BTC) from one or several input addresses to at least one output address. A Bitcoin address corresponds to a public key, and the corresponding secret key enables the address owner to spend the BTCs stored in the respective address.

To spend BTCs, a user creates a transaction, typically using the outputs of earlier transactions addressed to their addresses. The transaction specifies the output addresses (or their corresponding public keys) that will collect the resulting BTCs. The user signs the transaction and broadcasts it into the Bitcoin P2P network.

Transactions are included and stored in Bitcoin blocks. Blocks are generated (or mined) by solving a hash-based proof-of-work (PoW) scheme. Miners need to find the appropriate block parameters (e.g., a nonce value) such that the resulting block hash is below a given target value. Once a block is found, the miner broadcasts it in the network, allowing all Bitcoin peers to verify the correctness of the included transactions and the PoW. If the block is deemed correct, the miner is awarded a fixed amount of BTCs. Each generated block points to the previous block, growing the blockchain.

### 2.2 Simplified Payment Verification (SPV) Clients
Bitcoin requires all peers to verify all broadcasted transactions and blocks, which comes at the expense of storage and computational overhead. To address this, lightweight client implementations (SPV) have been proposed. SPV clients do not store the entire blockchain nor validate all transactions. Instead, they perform limited verifications, such as checking block difficulty and the presence of a transaction in the Merkle tree, and offload the verification of all transactions and blocks to full Bitcoin nodes.

To calculate their own balance, SPV clients request full blocks from a given block height. Full Bitcoin nodes can provide "filtered blocks" containing only relevant transactions. Unlike full Bitcoin nodes, SPV clients do not receive all transactions but a subset filtered by the full nodes. This reduces the communication load, especially for mobile devices. SPV clients use Bloom filters to reduce bandwidth consumption. A Bloom filter is a space-efficient probabilistic data structure used to test membership of an element. An SPV client constructs a Bloom filter by embedding all the Bitcoin addresses in its wallet. Upon connection to a full Bitcoin node, the constructed Bloom filter is outsourced to the full node. The full node checks if the input and/or output addresses of received transactions match the SPV client's Bloom filter and forwards relevant transactions to the SPV client.

### 2.3 Bloom Filters
Bloom filters were first proposed by Bloom in 1970. In SPV clients, a Bloom filter B is specified by the maximum number of elements it can fit, denoted by M, without exceeding its target false-positive rate Pt. Let m ≤ M denote the number of elements inserted in B(M, Pt). The size of the filter n is computed as follows:

\[ n = -\frac{M \ln(P_t)}{(\ln(2))^2} \]

A Bloom filter consists of an array B[.] of n bits accessed by k independent hash functions H1(.), ..., Hk(.), each mapping an input string x ∈ {0, 1}* to one of the n bits of the array. In SPV clients, k is computed as:

\[ k = \frac{n}{M} \ln(2) \]

To insert an element x ∈ {0, 1}* into a Bloom filter B, set ∀j ∈ {1, ..., k}, B[Hj(x)] ← 1. To query the presence of an element x ∈ {0, 1}* in B, compute ∧kj=1B[Hj(x)], returning 1 if all corresponding bits are 1. Bloom filters can generate false positives but not false negatives. The false positive rate of a filter B(M, Pt) with m elements, Pf(m), is estimated as:

\[ P_f(m) = \left(1 - \left(1 - \frac{1}{n}\right)^{km}\right)^k \]

We show that this estimation experimentally matches the false positive rate in existing SPV client implementations. More accurate techniques exist, but the difference in false positives is negligible and does not affect our results.

## 3. Model
### 3.1 System Model
We assume that lightweight SPV clients connect to the Bitcoin P2P network through full Bitcoin nodes. Full nodes inform SPV clients about transactions specific to their Bloom filters. We also assume that full Bitcoin nodes do not know the IP address of the SPV clients, who might use TOR for anonymity.

### 3.2 Attacker Model
We assume that the adversary can compromise one or more full Bitcoin nodes and eavesdrop on communication links to acquire one or more Bloom filters from an SPV client. The goal of the adversary is to identify the Bitcoin addresses inserted within a Bloom filter. The addresses in the Bloom filter typically correspond to addresses the SPV client is interested in (e.g., wallet addresses).

We assume the adversary knows the parameters used to create a Bloom filter, including the target false positive rate Pt and the number of hash functions k. The adversary also has access to all addresses/transactions in the blockchain and their order of execution. The adversary is computationally bounded but can check all existing addresses against a given Bloom filter.

An adversary connected to an SPV client can see the transactions issued by the client and potentially learn the client's addresses. This can be countered by using anonymizing networks. However, we focus on analyzing the privacy issues of using Bloom filters in existing SPV client implementations, which cannot be solved by simply relying on anonymizing networks.

Let B refer to the set of all existing Bitcoin addresses. Let Bi refer to the set of all elements y in B that are members of Bloom filter Bi (i.e., for which a query in Bi returns true), and Fi ⊂ Bi denote the set of false positives of Bi.

We assume all elements map uniformly at random to the bits of the Bloom filter. The adversary can collect additional information to classify some false positives, captured by the set K ⊆ Fi. We focus on the case where the adversary does not have prior knowledge about the true positives of the filter.

Our analysis does not exploit the fact that the adversary knows the public keys of Bitcoin addresses. In current SPV client implementations, both addresses and their public keys are inserted in the outsourced Bloom filter.

## 4. Analysis of Single Bloom Filter
### 4.1 Analytical Results
We analyze the privacy provisions of existing SPV client implementations when the adversary captures a single Bloom filter. We show that the current integration of Bloom filters leaks significant information about the addresses of Bitcoin users, particularly for those with a modest number of addresses (e.g., < 20).

### 4.2 Empirical Results
Empirical results confirm that the information leakage due to Bloom filters significantly depends on the number of addresses a user possesses. Users with a modest number of addresses risk leaking all of their addresses. This leakage is further exacerbated when nodes restart or generate additional addresses, leading to the computation of new Bloom filters, which reduces the privacy of SPV clients.

## 5. Analysis of Multiple Bloom Filters
### 5.1 Linking Bloom Filters
We show that an adversary can easily link different Bloom filters embedding the same elements, irrespective of the target false positive rate. This enables the adversary to link, with high confidence, different Bloom filters pertaining to the same originator.

### 5.2 Information Leakage
We demonstrate that a considerable number of user addresses are leaked if the adversary can collect at least two Bloom filters issued by the same SPV client, irrespective of the target false positive rate and the number of user addresses.

## 6. Countermeasure
### 6.1 Proposed Solution
We propose a lightweight and efficient countermeasure to enhance the privacy offered by SPV clients. Our countermeasure can be integrated with minimal modifications into existing SPV client implementations.

### 6.2 Implementation Details
[Details of the proposed countermeasure and how it can be implemented in existing SPV clients.]

## 7. Related Work
[Review of related work in the area of Bitcoin privacy and SPV clients.]

## 8. Conclusion
[Summary of the main findings and future directions for research.]

---

This revised version aims to improve the clarity, coherence, and professionalism of the text, while maintaining the original content and structure.