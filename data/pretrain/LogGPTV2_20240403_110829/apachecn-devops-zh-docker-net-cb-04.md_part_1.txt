# 四、构建 Docker 网络
在本章中，我们将介绍以下食谱:
*   手动联网容器
*   指定您自己的桥
*   使用 OVS 大桥
*   使用 OVS 桥连接 Docker 主机
*   OVS 和多克在一起
# 简介
正如我们在前面几章中看到的，Docker 在处理许多容器网络需求方面做得很好。但是，这并不限制您只使用 Docker 提供的网络元素来连接容器。因此，虽然 Docker 可以为您简化网络，但您也可以手动连接容器。这种方法的缺点是 Docker 不知道容器的网络状态，因为它不涉及网络供应。正如我们将在[第 7 章](07.html "Chapter 7. Working with Weave Net")、*中看到的，与 Weave Net* 一起工作，Docker 现在还支持定制或第三方网络驱动程序，有助于弥合本机 Docker 与第三方或定制容器网络配置之间的差距。
# 手动联网容器
在[第 1 章](01.html "Chapter 1. Linux Networking Constructs")、 *Linux 网络结构*和[第 2 章](02.html "Chapter 2. Configuring and Monitoring Docker Networks")、*配置和监控 Docker 网络*中，我们回顾了常见的 Linux 网络结构，并介绍了容器网络的 Docker 原生选项。在本食谱中，我们将介绍如何像 Docker 在默认桥接网络模式中所做的那样手动网络容器。理解 Docker 如何处理容器的网络供应是理解容器网络的非本地选项的关键组成部分。
## 做好准备
在本食谱中，我们将在单个 Docker 主机上演示配置。假设该主机安装了 Docker，并且 Docker 处于默认配置。为了查看和操作网络设置，您需要确保安装了`iproute2`工具集。如果系统上没有，可以使用以下命令进行安装:
```
sudo apt-get install iproute2 
```
为了对主机进行网络更改，您还需要根级访问。
## 怎么做…
为了手动配置容器的网络，我们需要明确告诉 Docker 不要在运行时配置容器的网络。为此，我们使用`none`的网络模式运行一个容器。例如，我们可以使用以下语法在没有任何网络配置的情况下启动一个 web 服务器容器:
```
user@docker1:~$ docker run --name web1 --net=none -d \
jonlangemak/web_server_1
c108ca80db8a02089cb7ab95936eaa52ef03d26a82b1e95ce91ddf6eef942938
user@docker1:~$
```
容器启动后，我们可以使用`docker exec`子命令检查其网络配置:
```
user@docker1:~$ docker exec web1 ip addr
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
user@docker1:~$ 
```
正如您所看到的，除了本地环回接口之外，容器没有定义任何接口。此时，没有办法连接到容器。我们所做的基本上是在一个泡泡里创造了一个容器:
![How to do it…](img/B05453_04_01.jpg)
因为我们的目标是模仿默认的网络配置，我们现在需要找到一种方法将容器`web1`连接到`docker0`桥，并从桥的 IP 分配中为其分配一个 IP 地址(`172.17.0.0/16`)。
也就是说，我们需要做的第一件事是创建接口，我们将使用这些接口将容器连接到`docker0`桥。正如我们在[第 1 章](01.html "Chapter 1. Linux Networking Constructs")、 *Linux 网络结构*中看到的，Linux 有一个名为**虚拟以太网** ( **VETH** )对的网络组件，它将很好地实现这一目的。接口的一端将连接到`docker0`桥，另一端将连接到容器。
让我们从创建我们的 VETH 对开始:
```
user@docker1:~$ sudo ip link add bridge_end type veth \
peer name container_end
user@docker1:~$ ip link show
……
5: container_end@bridge_end:  mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/ether ce:43:d8:59:ac:c1 brd ff:ff:ff:ff:ff:ff
6: bridge_end@container_end:  mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/ether 72:8b:e7:f8:66:45 brd ff:ff:ff:ff:ff:ff
user@docker1:~$
```
正如预期的那样，我们现在有两个相互直接关联的接口。现在让我们将一端绑定到`docker0`桥，并打开界面:
```
user@docker1:~$ sudo ip link set dev bridge_end master docker0
user@docker1:~$ sudo ip link set bridge_end up
user@docker1:~$ ip link show bridge_end
6: bridge_end@container_end:  mtu 1500 qdisc pfifo_fast master docker0 state LOWERLAYERDOWN mode DEFAULT group default qlen 1000
    link/ether 72:8b:e7:f8:66:45 brd ff:ff:ff:ff:ff:ff
user@docker1:~$
```
### 注
此时界面的状态将显示为`LOWERLAYERDOWN`。这是因为接口的另一端未绑定，仍处于关闭状态。
下一步是将 VETH 对的另一端连接到容器。这就是事情变得有趣的地方。Docker 在自己的网络命名空间中创建每个容器。这意味着 VETH 对的另一端需要落在容器的网络命名空间中。诀窍是确定容器的网络名称空间是什么。给定容器的命名空间可以以两种不同的方式定位。
第一种方式依赖于将容器的**进程标识** ( **PID** )与定义的网络名称空间相关联。它比第二种方法更复杂，但是为您提供了一些关于网络名称空间内部的良好背景。您可能还记得[第 3 章](03.html "Chapter 3. User-Defined Networks")、*用户定义的网络*，默认情况下，我们不能使用命令行工具`ip netns`来查看 Docker 创建的名称空间。为了查看它们，我们需要创建一个符号链接，将 Docker 存储其网络名称空间的位置(`/var/run/docker/netns`)与`ip netns`正在查看的位置(`/var/run/netns`)联系起来:
```
user@docker1:~$ cd /var/run
user@docker1:/var/run$ sudo ln -s /var/run/docker/netns netns
```
现在，如果我们尝试列出名称空间，我们应该会在返回中看到至少一个名称空间:
```
user@docker1:/var/run$ sudo ip netns list
712f8a477cce
default
user@docker1:/var/run$
```
但是我们如何知道这是与这个容器相关联的命名空间呢？为了做出这个决定，我们首先需要找到有问题的容器的 PID。我们可以通过检查容器来检索这些信息:
```
user@docker1:~$ docker inspect web1
……
        "State": {
            "Status": "running",
            "Running": true,
            "Paused": false,
            "Restarting": false,
            "OOMKilled": false,
            "Dead": false,
            "Pid": 3156,
            "ExitCode": 0,
            "Error": "",
            "StartedAt": "2016-10-05T21:32:00.163445345Z",
            "FinishedAt": "0001-01-01T00:00:00Z"
        },
……
user@docker1:~$ 
```
现在我们有了 PID，我们可以使用`ip netns identify`子命令从 PID 中找到网络命名空间名称:
```
user@docker1:/var/run$ sudo ip netns identify 3156
712f8a477cce
user@docker1:/var/run$ 
```
### 注
即使您选择使用第二种方法，也要确保您创建了符号链接，以便`ip netns`为后面的步骤工作。
第二种方式找到容器网络命名空间要容易得多。我们可以简单地检查和参考容器的网络配置:
```
user@docker1:~$ docker inspect web1
…… 
"NetworkSettings": {
            "Bridge": "",
            "SandboxID": "712f8a477cceefc7121b2400a22261ec70d6a2d9ab2726cdbd3279f1e87dae22",
            "HairpinMode": false,
            "LinkLocalIPv6Address": "",
            "LinkLocalIPv6PrefixLen": 0,
            "Ports": {},
 "SandboxKey": "/var/run/docker/netns/712f8a477cce",
            "SecondaryIPAddresses": null,
            "SecondaryIPv6Addresses": null,
            "EndpointID": "", 
…… 
user@docker1:~$
```
请注意名为`SandboxKey`的字段。您会注意到文件路径引用了我们所说的 Docker 存储其网络名称空间的位置。此路径中引用的文件名是容器网络命名空间的名称。Docker 将网络名称空间称为沙箱，因此使用了命名约定。
现在我们有了网络命名空间名称，我们可以在容器和`docker0`桥之间建立连接。回想一下，VETH 对可以用来将网络名称空间连接在一起。在这个例子中，我们将把 VETH 对的容器端放在容器的网络名称空间中。这将把容器桥接到`docker0`桥上的默认网络命名空间。为此，我们将首先将 VETH 对的容器端移动到我们之前发现的命名空间中:
```
user@docker1:~$ sudo ip link set container_end netns 712f8a477cce
```
我们可以使用`docker exec`子命令验证 VETH 对是否在命名空间中:
```
user@docker1:~$ docker exec web1 ip link show
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
5: container_end@if6:  mtu 1500 qdisc noop state DOWN qlen 1000
    link/ether 86:15:2a:f7:0e:f9 brd ff:ff:ff:ff:ff:ff
user@docker1:~$
```
至此，我们已经使用 VETH 对成功地将容器和默认命名空间桥接在一起，因此我们的连接现在看起来如下所示:
![How to do it…](img/B05453_04_02.jpg)
然而，容器`web1`仍然缺乏任何类型的 IP 连接，因为它还没有被分配一个可路由的 IP 地址。回想一下[第一章](01.html "Chapter 1. Linux Networking Constructs")、 *Linux 网络构造*，我们看到一个 VETH 对接口可以直接分配一个 IP 地址。为了给容器一个可路由的 IP 地址，Docker 只需从`docker0`桥子网分配一个未使用的 IP 地址到 VETH 对的容器端。
### 注
IPAM 是一个巨大的优势，允许 Docker 为您管理您的容器网络。没有 IPAM，你将需要自己跟踪分配，并确保你不会分配任何重叠的 IP 地址。
```
user@docker1:~$ sudo ip netns exec 712f8a477cce ip \
addr add 172.17.0.99/16 dev container_end
```
在这一点上，我们可以打开接口，我们应该可以从主机到达容器。但在此之前，让我们将`container_end` VETH 对重新命名为`eth0`，让事情变得更加清晰:
```
user@docker1:~$ sudo ip netns exec 712f8a477cce ip link \
set dev container_end name eth0
```
现在我们可以调出新命名的`eth0`界面，这是 VETH 对的容器端:
```
user@docker1:~$ sudo ip netns exec 712f8a477cce ip link \
set eth0 up
user@docker1:~$ ip link show bridge_end
6: bridge_end@if5:  mtu 1500 qdisc pfifo_fast master docker0 state UP mode DEFAULT group default qlen 1000
    link/ether 86:04:ed:1b:2a:04 brd ff:ff:ff:ff:ff:ff
user@docker1:~$ sudo ip netns exec 4093b3b4e672 ip link show eth0
5: eth0@if6:  mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
    link/ether 86:15:2a:f7:0e:f9 brd ff:ff:ff:ff:ff:ff
user@docker1:~$ sudo ip netns exec 4093b3b4e672 ip addr show eth0
5: eth0@if6:  mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 86:15:2a:f7:0e:f9 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.99/16 scope global eth0