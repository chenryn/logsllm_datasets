x
)            
 x 的绝对值
7.8.7.             随机数发生器函数
函数 rand()生成介于 0 和 RAND_MAX 之间的伪随机整数序列。其中 RAND_MAX 是在头 文件中定义的符号常量。下面是一种生成大于等于 0 但小于 1 的随机浮点数的 方法:
#define frand() ((double) rand() / (RAND_MAX+1.0))
(如果所用的函数库中已经提供了一个生成浮点随机数的函数，那么它可能比上面这个函数 具有更好的统计学特性。)
函数 srand(unsigned)设置 rand 函数的种子数。我们在 2.7 节中给出了遵循标准的
rand 和 srand 函数的可移植的实现。
练习 7•9 类似于 isupper 这样的函数可以通过某种方式实现以达到节省空间或时间 的目的。考虑节省空间或时间的实现方式。
第8章 UNIX 系统接口
UNIX 操作系统通过一系列的系统调用提供服务，这些系统调用实际上是操作系统内的函 数，它们可以被用户程序调用。本章将介绍如何在 C 语言程序中使用一些重要的系统调用。 如果读者使用的是 UNIX，本章将会对你有直接的帮助，这是因为，我们经常需要借助于系统 调用以获得最高的效率，或者访问标准库中没有的某些功能。但是，即使读者是在其它操作 系统上使用 C 语言，本章的例子也将会帮助你对 C 语言程序设计有更深入的了解。不同系统 中的代码具有相似性，只是一些细节上有区别而已。因为 ANSI C 标准函数库是以 UNIX 系统 为基础建立起来的，所以，学习本章中的程序还将有助于更好地理解标准库。
本章的内容包括 3 个主要部分，输入/输出、文件系统和存储分配。其中，前两部分的 内容要求读者对 UNIX 系统的外部特性有一定的了解。
第 7 章介绍的输入/输出接口对任何操作系统都是一样的。在任何特定的系统中，标准 库函数的实现必须通过宿主系统提供的功能来实现。接下来的几节将介绍 UNIX 系统中用于 输入和输出的系统调用，并介绍如何通过它们实现标准库。
8.1 文件描述符
在 UNIX 操作系统中，所有的外围设备(包括键盘和显示器)都被看作是文件系统中的 文件，因此，所有的输入/输出都要通过读文件或写文件完成。也就是说，通过一个单一的 接口就可以处理外围设备和程序之间的所有通信。
通常情况下，在读或写文件之前，必须先将这个意图通知系统，该过程称为打开文件。 如果是写一个文件，则可能需要先创建该文件，也可能需要丢弃该文件中原先已存在的内容。 系统检查你的权力(该文件是否存在?是否有访问它的权限?)，如果一切正常，操作采统将 向程序返回一个小的非负整数，该整数称为文件描述符。任何时候对文件的输入/输出都是 通过文件描述符标识文件，而不是通过文件名标识文件。(文件描述符类似于标准库中的文件 指针或 MS•DOS 中的文件句柄。)系统负责维护已打开文件的所有信息，用户程序只能通过文 件描述符引用文件，
因为大多数的输入/输出是通过键盘和显示器来实现的，为了方便起见，UNIX 对此做了 特别的安排。当命令解释程序(即“ shell")运行一个程序的时候，它将打开 3 个文件，对应 的文件描述符分别为 0，1，2，依次表示标准输入，标准输出和标准错误。如果程序从文件 0
中读，对 1 和 2 进行写，就可以进行输/输出而不必关心打开文件的问题。
程序的使用者可通过重定向程序的  I/O:
prog  输出文件名
这种情况下，shell 把文件描述符 0 和 1 的默认赋值改变为指定的文件。通常，文件描述符 2 仍与显示器相关联，这样，出错信息会输出到显示器上。与管道相关的输入/输出也有类似 的特性。在任何情况下，文件赋值的改变都不是由程序完成的，而是由 shell 完成的。只要程 序使用文件 0 作为输入，文件 1 和 2 作为输出，它就不会知道程序的输入从哪里来，并输出
到哪里去。
8.2 低级 I/O——read 和 write
输入与输出是通过 read 和 write 系统调用实现的。在 C 语言程序中，可以通过函数 read 和 write 访问这两个系统调用。这两个函数中，第一个参数是文件描述符，第二个参数是程 序中存放读或写的数据的字符数组，第三个参数是要传输的字节数。
int n_read = read(int fd, char *buf, int n);
int n_written = write(int fd, char *buf, int n);
每个调用返回实际传输的字节数。在读文件时，函数的返回值可能会小于请求的字节数。如 果返回值为 0，则表示已到达文件的结尾;如果返回值为•1，则表示发生了某种错误。在写文 件时，返回值是实际写入的字节数。如果返回值与请求写入的字节数不相等，则说明发生了 错误。
在一次调用中，读出或写入的数据的字节数可以为任意大小。最常用的值为 1，即每次读 出或写入 1 个字符(无缓冲)，或是类似于 10244096 这样的与外围设备的物理块大小相应 的值。用更大的值调用该函数可以获得更高的效率，因为系统调用的次数减少了。
结合以上的讨论，我们可以编写一个简单的程序，将输入复制到输出，这与第 1 章中的 复制程序在功能上相同。程序可以将任意输入复制到任意输出，因为输入/输出可以重定向 到任何文件或设备。
#include "syscalls.h"
main()              /* copy input to output */
{
char buf[BUFSIZ]; int n;
while ((n = read(0, buf, BUFSIZ)) > 0) write(1, buf, n);
return 0;
}
我们已经将系统调用的函数原型集中放在一个头文件 syscalls.h 中，因此，本章中的 程序都将包含该头文件。不过，该文件的名字不是标准的。
参数 BUFSIZ 也已经在 syscalls.h 头文件中定义。对于所使用的操作系统来说，该值 是一个较合适的数值。如果文件大小不是 BUFSIZ 的倍数，则对 read 的某次调用会返回一 个较小的字节数，write 再按这个字节数写，此后再调用 read 将返回 0。
为了更好地掌握有关概念，下面来说明如何用 read 和 write 构造类似于 getchar、 putchar 等的高级函数。例如，以下是 getchar 函数的一个版本，它通过每次从标准输入 读入一个字符来实现无缓冲输入。
#include "syscalls.h"
/* getchar:              unbuffered single character input */ int getchar(void)
{
char c;
return (read(0, &c, 1) == 1) ? (unsigned char) c : EOF;
}
其中，c 必须是一个 char 类型的变量，因为 read 函数需要一个字符指针类型的参数(&c)。 在返回语句中将 c 转换为 unsigned char 类型可以消除符号扩展问题。
getchar 的第二个版本一次读入一组字符，但每次只输出一个字符。
#include "syscalls.h"
/* getchar:              simple buffered version */ int getchar(void)
{
static char buf[BUFSIZ]; static char *bufp = buf; static int n = 0;
if (n == 0) {              /* buffer is empty */ n = read(0, buf, sizeof buf); bufp = buf;
}
return (••n >= 0) ? (unsigned char) *bufp++ : EOF;
}
如果要在包含头文件的情况下编译这些版本的 getchar 函数，就有必要用
#undef 预处理指令取消名字 getchar 的宏定义，因为在头文件中，getchar 是以宏方式
实现的。
8.3 open、creat、close 和 unlink
除了默认的标准输入、标准输出和标准错误文件外，其它文件都必须在读或写之前显式 地打开。系统调用 open 和 creat 用于实现该功能。
open 与第 7 章讨论的 fopen 相似，不同的是，前者返回一个文件描述符，它仅仅只是 一个 int 类型的数值。而后者返回一个文件指针。如果发生错误，open 将返回•1。
#include 
int fd;
int open(char *name, int flags, int perms); fd = open(name, flags, perms);
与 fopen 一样，参数 name 是一个包含文件名的字符串。第二个参数 flags 是一个 int 类
型的值，它说明以何种方式打开文件，主要的几个值如下所示:
O_RDONLY 以只读方式打开文件 O_WRONLY 以只写方式打开文件 O_RDWR     以读写方式打开文件
在 System V UNIX 系统中，这些常量在头文件中定义，而在 Berkeley(BSD) 版本中则在中定义。
可以使用下列语句打开一个文件以执行读操作:
fd = open(name, O_RDONLY,0);
在本章的讨论中，open 的参数 perms 的值始终为 0。
如果用 open 打开一个不存在的文件，则将导致错误。可以使用 creat 系统调用创建新 文件或覆盖已有的旧文件，如下所示:
int creat(char *name, int perms); fd = creat(name, perms);
如果 creat 成功地创建了文件，它将返回一个文件描述符，否则返回•1。如果此文件已存在， creat 将把该文件的长度截断为 0，从而丢弃原先已有的内容。使用 creat 创建一个已存在 的文件不会导致错误。
如果要创建的文件不存在，则 creat 用参数 perms 指定的权限创建文件。在 UNIX 文 件系统中，每个文件对应一个 9 比特的权限信息，它们分别控制文件的所有者、所有者组和
其他成员对文件的读、写和执行访问。因此，通过一个 3 位的八进制数就可方便地说明不同 的权限，例如，0755 说明文件的所有者可以对它进行读、写和执行操作，而所有者组和其他 成员只能进行读和执行操作。
下面通过一个简化的 UNIX 程序 cp 说明 creat 的用法。该程序将一个文件复制到另一个 文件。我们编写的这个版本仅仅只能复制一个文件，不允许用目录作为第二个参数，并且， 目标文件的权限不是通过复制获得的，而是重新定义的。
#include 
#include 
#include "syscalls.h"
#define PERMS 0666                            /* RW for owner, group, others */ void error(char *,              ...);
/* cp:              copy f1 to f2 */ main(int argc, char *argv[])
{
int f1, f2, n; char buf[BUFSIZ];
if (argc != 3)
error("Usage: cp from to");
if ((f1 = open(argv[1], O_RDONLY, 0)) == •1) error("cp: can't open %s", argv[1]);
if ((f2 = creat(argv[2], PERMS)) == •1) error("cp: can't create %s, mode %03o",
argv[2], PERMS);
while ((n = read(f1, buf, BUFSIZ)) > 0) if (write(f2, buf, n) != n)
error("cp: write error on file %s", argv[2]); return 0;
}
该程序创建的输出文件具有固定的权限 0666。利用 8.6 节中将要讨论的 stat 系统调用，可以 获得一个已存在文件的模式，并将此模式赋值给它的副本。
注意，函数 error 类似于函数 printf，在调用时可带变长参数表。下面通过 error 函
数的实现说明如何使用 printf 函数家族的另一个成员 vprintf。标准库函数 vprintf 数与 printf 函数类似，所不同的是，它用一个参数取代了变长参数表，且此参数通过调用 va_start 宏进行初始化。同样，vfprintf 和 vsprintf 函数分别与 fprintf 和 sprintf 函数类似。
#include 
#include 
/* error:              print an error message and die */ void error(char *fmt, ...)
{
va_list args;
va_start(args, fmt); fprintf(stderr, "error: "); vprintf(stderr, fmt, args); fprintf(stderr, "\n"); va_end(args);
exit(1);
}
一个程序同时打开的文件数是有限制的(通常为 20)。相应地，如果一个程序需要同时处 理许多文件，那么它必须重用文件描述符。函数 close(int fd)用来断开文件描述符和已 打开文件之间的连接，并释放此文件描述符，以供其它文件使用。close 函数与标准库中的 fclose 函数相对应，但它不需要清洗(flush)缓冲区。如果程序通过 exit 函数退出或从 主程序中返回，所有打开的文件将被关闭。
函数 unlink(char *name)将文件 name 从文件系统中删除，它对应于标准库函数
remove。
练习 8•1             用 read、write、open 和 close 系统调用代替标准库中功能等价的函数， 重写第 7 章的 cat 程序，并通过实验比较两个版本的相对执行速度。
8.4 随机访问——lseek
输入/输出通常是顺序进行的:每次调用 read 和 write 进行读写的位置紧跟在前一次 操作的位置之后。但是，有时候需要以任意顺序访问文件，系统调用 lseek 可以在文件中任 意移动位置而不实际读写任何数据:
long lseek(int fd, long offset, int origin);
将文件描述符为 fd 的文件的当前位置设置为 offset，其中，offset 是相对于 orgin 指定 的位置而言的。随后进行的读写操作将从此位置开始，origin 的值可以为 0、1 或 2，分别 用于指定 offset 从文件开始、从当前位置或从文件结束处开始算起。例如，为了向一个文 件的尾部添加内容(在 UNIX shell 程序中使用重定向符>>或在系统调用 fopen 中使用参数 “      a")，则在写操作之前必须使用下列系统调用找到文件的末尾:
lseek(fd, 0L, 2);
若要返回文件的开始处(即反绕)，则可以使用下列调用:
lseek(fd, 0L, 0);
请注意，参数 0L 也可写为(long)0，或仅仅写为 0，但是系统调用 lseek 的声明必须保持 一致。
使用 lseek 系统调用时，可以将文件视为一个大数组，其代价是访问速度会慢一些。例 如，下面的函数将从文件的任意位置读入任意数目的字节，它返回读入的字节数，若发生错 误，则返回•1。
#include "syscalls.h"
/*get:              read n bytes from position pos */ int get(int fd, long pos, char *buf, int n)
{
if (lseek(fd, pos, 0) >= 0) /* get to pos */ return read(fd, buf, n);
else
return •1;
}
lseek 系统调用返回一个 long 类型的值，此值表示文件的新位置，若发生错误，则返回•1。 标准库函数 fseek 与系统调用 lseek 类似，所不同的是，前者的第一个参数是 FILE *类型， 且在发生错误时返回一个非 0 值。
8.5 实例——fopen 和 getc 函数的实现
下面以标准库函数 fopen 和 getc 的一种实现方法为例来说明如何将这些系统调用结合 起来使用。
我们回忆一下，标准库中的文件不是通过文件描述符描述的，而是使用文件指针描述的。 文件指针是一个指向包含文件各种信息的结构的指针，该结构包含下列内容:一个指向缓冲 区的指针，通过它可以一次读入文件的一大块内容;一个记录缓冲区中剩余的字符数的计数 器;一个指向缓冲区中下一个字符的指针;文件描述符;描述读/写模式的标志;描述错误 状态的标志等。
描述文件的数据结构包含在头文件中，任何需要使用标准输入/输出库中函 数的程序都必须在源文件中包含这个头文件(通过#include 指令包含头文件)。此文件也被 库中的其它函数包含。在下面这段典型的代码段中，只供标准库中其它函数所使 用的名字以下划线开始，因此一般不会与用户程序中的名字冲突。所有的标准库函数都遵循 该约定。
#define NULL              0
#define EOF              (•1)
#define BUFSIZ              1024
#define OPEN_MAX              20              /* max #files open at once */
typedef struct _iobuf {
int              cnt;              /* characters left */