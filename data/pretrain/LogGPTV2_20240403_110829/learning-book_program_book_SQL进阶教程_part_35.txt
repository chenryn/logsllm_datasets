男
黄
女
红
割
黄
---
## Page 238
2-2为什么叫“关系“模型—22.5
这个关系R1就是笛卡儿积。笛卡儿积是指“使用各个属性的定义域
生成的组合数最多的集合”。因此通过上面3个定义域生成的所有关系
Rn，都是这个笛卡儿积的子集。例如除了R1，我们还可以定义R2，将
注0
组个数为0的关系也是满足定义的。
势为0的关系在集合论中作查
集。当然，从实现角度来看，黄
这就是我们平时说到关系模型或者关系数据库时所说的“关系”
为0的关系相当于“有0行数据
的表“
（relation）的含义。最早给出这个定义的是关系模型的提出者Codd，但是"关
系”这个词并不是他发明的。集合论很早就把“两个集合的笛卡儿积的子
集”称为“二元关系”了。Cod所做的只是把它扩展到了n元关系。
Codd本身就是一位数学家，因此他当然是在知道集合论中关系的含义的
情况下借来使用的。
定义域的忧虑
想必很多读者已经注意到了，定义域其实就是（现代编程语言中的）
数据类型。我们先看一个例子，下面是一段用Pascal语言写的代码。
type Day = { Sum, Mon, Tue, Wed, Thu, Fri, Sat 
rar Today : Day/
这段代码中，用户定义的数据类型为*Day"（可取的值刚好有7个）
然后用户定义的与该类型相关的变量为"Today"（只能取上面定义的7个
值）这种情况看起来很像是一种拥有名为“Day"的定义域以及定义于其
注图
上的属性·Today的关系数库。·
An Introdoctfoo to Databrse
Nesley, 1997 年。 这书第 7 版由
Systentsf6tb Ed.), Addison-
在学习关系的正式定义时我们接触到了定义域的概念，但是，笔者认
机械工业出版社于 2007年引班，
即《数据库系统导论1第7表1)
为，对于这个概念，恐怕很多经验丰富的数据库工程师也都不是很熟悉。
不过，因为直到现在也几乎没有实现了定义域的DBMS，所以不熟悉也是
可以理解的。定义域是关系模型在诞生之际就存在的一个重要的关键词（如
果无法确定定义域的话，关系就无法确定了！）然而却一直都未受到人们
的重视。不过，SQL-92标准终于增加了这一功能，相信以后实现它的
DBMS会多起来吧
---
## Page 239
226—第2章关系数据库的世界
实现了定义域的DBMS很少一—这种说法严格来讲是不正确的。因
为对于比较初级的定义域，正好相反，几乎所有的DBMS都已经实现了。
这些定义域主要是字符型、数值型等叫作标量类型的数据类型。因为它们
对属性的取值范围有约束，所以尽管有局限性，但是标量类型也是定义域
的一种。不能往声明为INTEGER型的列中插入abc这样的字符串。我们
还可以使用CHECK约束，执行比针对声明为标量类型的列进行的约束更为
产格的约束。例如，给声明为字符型的列加上约束，限制该列只能取值为m
和f’，就可以写成CHBCK（sex IN（'m'，'f'））。
因此，现在的DBMS是具备简单的定义域功能的，只不过比较初级。
将数据库比作编程语言的话，可以说现在的DBMS相当于只能使用系统
定义好的类型，不能由用户自定义类型的编程语言。
关系值和关系变量
古希腊哲学家赫拉克利特曾经说过，“人不能两次踏进同一条河流
因为河流永远在不停地变化”、另外，日本的鸭长明也说过，“河水流动经
久不息，然而已经不是原来的水”。两人的话听起来都有些自相矛盾，但
那么，究竞是通过什么来保证的呢？据说，我们人类身体的全部细胞
会一周更新一次，那么一周后我们是不是就会变成另一个人呢？我们凭什
么相信今大交谈过的朋发明大还是同一个人呢？
言归正传。值（value）和变量（variable）是很容易混淆的概念，在
讨论和数据库相关的话题时，两者经常会被混用。一般提到“关系”这个
词时，如果不加特殊说明，指的都是“关系变量”。而关系值指的是关系
变量在某一时刻取的值。实际上或许我们也可以说，值就是变量的时间切
片（time-slice)。
容易混消的一个原因是，Codd在早期的论文中并没有明确地对两者
加以区别。他的论文中出现了“随时间变化的（time-varying）关系”的说
法，但准确的说法应该是“随时间变化的关系变量”。因为关系值不会随
时间壹化
这与数学或者编程语言中变量和值之间的关系是一样的。在编程语言
---
## Page 240
2-2为什么叫“关系“模型一
227
中，整数型变量存储整数值。同样，在关系模型中，关系型变量存储关系值。
理解了这一点，我们应该就不会像刚接触这些概念时那样觉得不可思议了。
关键在于我们在学校中学到的变量和值基本上都是标量型的单一类型值，
所以只是不习惯把关系这样的复合型结构看成一个值。FROM子句中写的
注0
表名正是变量的名称
从这个盘文上讲，我们每个人的
名字也可以理航成空量。虽然
想象一下，如果告诉赫拉克利特和鸭长明变量和值的区别，二人会有
POCK或者“山太郎”这样的名
字指代的实体每时每刻都在查
化，但是只要使用了同一个名字
| 空量名),就会被当成同—个主
意义！世上存在的只有值！”，而鸭长明可能会点头附和“嗯嗯，原来是数
量来对待。
学版的《方丈记》啊”。
注9
鸭长明的著作。聘长明 (1155-
1216 ) 日本平安时代末期至键位
存在“关系的关系”吗
时代初期的作家与清人。（方丈
叙述天地巨空、感强人世无常的
记)是也降居时国忆生平际遇
“存在“关系的关系”吗”一这样的问题听起来可能有点唐突，但
随笔果。—编者注
请耐心地听下去。这是前面提到的观点“把关系这样的复合型结构看成一
个值”的延伸。
关系吗”
“关系的关系”在逻辑上是可能存在的。但是，为此必须定义能够使
定义域包含关系的谓词，而且如果再考虑对关系的量化，就需要实现二阶
谓词逻辑，因此实现“关系的关系”非常困难。
关系”的关系模型大概是什么样子。首先请看一个具体的表。
列2
列3
性别
性别喷号
男
2
列1中存储的值是关系
100
米知
0
名字
职业
身高
山田
工艺师
160
上田
大学数授
185
可以像这样在关系中存储另
失邸
刑警
175
一个关系
山田
书法家
170
---
## Page 241
228—第2章关系数据库的世界
虽然这张表看起来有点杂乱，但“关系的关系”的关系模型就是这个
样子。正如字面意思所示，这是一种“关系之中还有关系”或者“表中还
有表”的状态。像这样包含关系的列（属性）叫作关系值属性（relation-
valued attribute），现在有很多关于它在关系模型中的应用的研究。
不管怎样，如果接受了这种“关系的关系”，那么自然就能进一步扩
的关系。当然它们也都是嵌套式的递归结构。
这种递归关系与目录结构是一样的。就像目录中可以放置目录或者
文件一样，关系中可以放置关系值或者标量值。因此高阶的关系又是树形
结构。
文件系统与数据库的目的都是提高数据的存储效率，因此从提高效率
的角度来说，两者都采用树形结构是理所当然的。只不过如今的关系数据
库只定义了一阶关系，拿文件系统类比的话，相当于“只能定义一层目录
的文件系统”在这一点上，比起文件系统，关系数据库的表达能力稍微
弱一些。
能够定义高阶关系的DBMS还没出现，但是标准SQL语言已经支持
了数组类型和集合类型的变量，因此关系模型正朝者能够处理复合型数据
的方向发展。C.J.Date等人甚至还断言道：真正的关系系统就是支持关系
值等全部复合型数据的系统。也许十年以后，真的会出现能够定义高阶关
系的DBMS。
---
## Page 242
2-3开始于关系，结束于关系—
229
开始于关系，结束于关系
关于封闭世界的幸福
关系就是集合—知道这一点只算是理解了关系模型的冰山之一角。关系这种集合其实有一些非常
有趣且特殊的性质，其中之一就是与SQL语言的原理密切相关的“封闭性”。
从运算角度审视集合
上一节主要介绍了“关系是集合的一种”这一基础概念。但是仅靠这
一点，还不足以让我们充分理解关系这一概念的特殊性质。关系不只是集
property）。这个性质简单地说就是“运算的输入和输出都是关系”，换句
话来说，就是“保证关系世界永远封闭”的性质。在本节中，我们将以关
系的这个性质为中心，再次探访一下数据库的世界。
SQL中有各种各样的关系运算符。除了最初的投影、选择、并、差等
基本运算符，SQL后来又增加了许多非常方便的运算符，现在总的数量非
常多。多亏了关系的封闭性，这些运算的输出才可以直接作为其他运算的
输入。因此，我们可以把各种操作组合起来使用，比如对并集求投影，或
者对选择后的集合求差，等等。这个性质也是子查询和视图等重要技术的
基础。
关系的封闭性与UNIX中管道的概念很像，拿它类比的话可能会容易
理解一些。UNIX中的文件也一样具有封闭性，可以作为各种命令的输入
或者输出。因此，可以像cat text.txt|sort +1丨more 这样将命令
组合在一起来编写脚本。这种写法让UNIX的脚本编程变得非常灵活。
关系运算在形式上与水桶接龙是一样的。关系运算符代表人，关系或
文件代表人与人之间传递的水桶。只不过在传递过程中内容是有变化的，
这一点和火灾现场的水桶接龙不同，因为水桶中的水是不会发生变化的。
---
## Page 243
230—第2章关系数据库的世界
关系
关系运算符
关系
文件
Shell命令
文件
多数初次接触UNIX的人会觉得很惊讶，因为在UNIX系统中，从设
备到控制台，一切都可以当作“文件”来处理。因为从外观上来看，设备
只不过是/dev目录下的一个普通文件而己，这也是UNIX系统追求文件
的封闭性的结果。表达UNIX设计理念的词语之一就是“泛文件主义”，
说成“一切皆文件主义”应该也可以。
而且，在UNIX中，文件对于She11命令是封闭的：同样地，在关系
模型中，关系对关系运算符也是封闭的，关于这一点，从“SQL中
SELECT子句的输入输出都是表”也能得到证明。SELECT子句其实就是以
表（关系）为参数，返回值为表（关系）的函数。有时SELECT子句查询
不到一条数据，然而这时会返回“空集”，而不是不返回任何内容。只不过，
因为我们没法实际看到，所以不好确认。仿照UNIX起名字的话，关系数
据库的这个特性可以叫作“泛关系主义”
上面两个例子中的封闭性原本是来自数学的概念。数学中会根据“对
于什么运算是封闭的”这样的标准，将集合分为各种类型。这些对某种运
算封闭的集合在数学上称为“代数结构”。例如，按照对四则运算是否封闭，
我们可以把集合分为下面几类。
群（group）：对加法和减法（或者乘法和除法）封闭
环（ring）：对加法、减法、乘法封闭
域（filed）：对加法、减法、乘法、除法封闭，即可以自由进行四则运算
如果要举个关于“群”的具体示例，那么最简单的就是整数集了，因
为任何两个整数之间进行加法或者减法运算，结果一定还是整数。整数集
也是环，但却不是域，关于原因，看一个例子就知道了。比如1÷2的结
果是小数，不满足封闭性。如果将整数集扩展成有理数集或者实数集的话，
---
## Page 244
2-3开始于关系，结束于关系
231
那么结果就满足域的条件了。这是因为，使用实数自由地进行四则运算后，
注0
运算结果还是实数
额外说一下，布尔恤的集合
个只有两个元素的特持别小的有
(tnue, febe) 血是城。 显然它是
限集合，但量我们可以在其中定
义四则运算。如果糖要强调布尔
实数
型的城的特征，我们可以称它为
布尔城
实数
整数
除法运算的结果
不论进行哪种四则运算
可能会跳出整数集
结果都会回到实数集
实践和原理
那么，关系模型中的“关系”相当于这些代数结构中的哪一种呢？
回忆一下SQL中的集合运算符可以发现，关系支持加法（uNION）运
算和减法（EXCEPT）运算，因此满足群的条件。关系还支持相当于乘法
运算的CROSSJOIN，所以也满足环的条件。那么最后一个，除法呢？很
遗憾，关系中没有除法运算符，所以不满足域的条件。
的确，SQL中没有除法运算符。但是我们在1-4节中说过，除法运算
注9
的定义是有的·。因此，关系也满足域的条件。从满足运算相关特征的观
关于S3.中汉布除活运算符的原
因, 请参考 1-4 节末尾的专栏
点来看，关系可以理解为“能自由进行四则运算的集合”.CJ.Date和Joe
“关系余法运算”。
Celko之所以非常重视除法运算，是因为一方面它的实用性高，另一方面
他们深知只有定义了除法，关系才有资格成为域。
由此可见，关系模型理论具有严密的数学基础。这样的好处是，能够
注
直接使用集合论和群论等领域中已经得到广泛应用的研究成果。Codd
例如。关于应用了群论中幕等性
这一般念的查询，请参考1-7节。
深知构造这样严密的理论体系是多么地重要·。实际上，如果UNION和连
注9
接运算的结果不是关系（表），SQL这门语言会变得非常难用。无法使用
毫无疑间, UN[X的开发者们也都
是知道的。
子查询的SQL一这根本无法想象。
综上所述，UNIX的文件通过对She11命令封闭实现了非常灵活的功
能。同样地，关系通过对关系运算封闭，使SQL具有了非常强大的表达
能力。
---
## Page 245
232—第2章关系数据库的世界
“追求理论的严谨，并不会降低它的实用性。相反，越严谨越优雅的
理论越实用。”这是C.J.Date的观点。虽然这是一种功能主义的主张，但