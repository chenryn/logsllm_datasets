加入jaVa编程群：524621833
---
## Page 364
346
Linux程序设计
我们一般用不到这么多种函数，所以这一章也没有把它们全部介绍给大家。老办法，详细
资料可以在它们的使用手册也里找到。
根据POSIX标准的说法，其他可以阻塞的系统调用，比如read、wait等，也可以是
取消操作采取行动的取消点。在我们编写这本书的时候，Linux还不支持所有这些系统
调都能用被当作取消点。但某些测试证明一些被阻塞的调用，比如sleep等，确实允许
取消动作的发生。因此，为了确保安全，你可以在你估计会被取消的代码里添上一些
pthread_testcancel调用。
oldtype参数的作用还是检索以前的状态，如果你不想知道以前的状态，给它传递一个NULL
就行。在缺省的情况下，线程在启动时的取消状态是PTHREAD_CANCEL_ENABLE，而取消类
型是PTHREAD_CANCEL_DEFERRED。
动手试试：取消一个线程
我们的程序thread8.c还是从thread2.c演变而来的。这一次，主线程向它创建的子线程发送了
一个取消请求。
#include 
#include 
include 
include 
:(bae, ptouotoungpeeaun. pton
int main(1{
pthread_t a_thread;
int res;
void *thread_result:
res = pthread_create(&a_thread, NULL， thread_function, NULL);
if (res != 0)(
perror(*Threed creation failed):
exit (EXIT_FAILURE) ;
printf(*Cancelling thread...\n*):
s1eep(3} :
res = pthread_cancel(a_thread);
if (res != o){
perror(*Thread cancelation failed*}:
exit(SXIT_PAILURE) ;
printf(*Waiting for thread to finish...\n*);
res = pthread_join{a_thread, &thread_result):
if（res= o）{
perror(*Tnread join failed*1:
exit(EXIT_FAILURE):
exit (EXIT_SUCCESS1:
void *thread_function(void *arg)(
res = pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL) ;
int i, res;
if res 1= 0）(
perror(*Thread pthread_setcancelstate failed*);
exit(EXIT_FAILURE);
加入jaVa编程群：524621833
---
## Page 365
第11章POSIX线程
res = pthread_setcanceltype IPTHREAD_CANCEL_DEFERRED, NULL) :
it[res 1=0){
perror(*Thread pthread_setcanceitype failed*):
exit (EXIT_FAILURE):
printf(“thread_function ia running\n*);
1
printf(*Thread is stiil running (d)...\n*. i);
sleep (1) ;
pthread_exit (0);
当我们运行这个程序的时候，我们将看到如下所示的输出情况：
S cc D_REENrRAvr threadH.c -o thread8 -1pthtead
thread_tunction is running
S./thread8
Thread is still running t01..
Thread is still running (21...
Cancelling thread.
Thread is still running (31...
waiting for thread to finish...
$
操作注释：
按老法子创建出新线程之后，主线程休眠一小会儿（好让新线程有时间开始执行），然后发
出一个取消请求。如下所示：
printf(*Cancelling thread.. .n*1;
sleep(3):
if(res =o){
res = pthread_cancel (a_thread):
perror(*Thread cancelation failed*1;
exit (EXTT_FATLURE):
在新创建的线程里，我们先把取消状态设置为允许取消，如下所示：
res = pthread_setcancelstate [PTHRZAD_CANCEL_ENABLE, NULL):
if（res!= 0）（
perror(*Thread pthread_setcancelstate failed′);
exit(RXIT_FAILURE);
然后把取消类型设置为延迟取消，如下所示：
rez = pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED. NULL) ;
if (res I= 0){
perror(*hread pthread_setcanceltype failed′):
exit (EXIT_FAILURE) :
最后，我们等待被取消，如下所示：
fot(is0:i
include 
include 
#include 
define NUM_THREADS 6
void *thread_function(void *argl;
int maim()(
int res;
pthread_t a_thread [NUM_THREADS}:
void *thread_result:
int lots_of_threads;
for(1ots_of_threads =0;lots_f_threads = 0:lots_of_threads--){
res =pthread_join(a_thread[lots_of_threads].&thread_result);
if (res = 0)[
printf(*Picked up a threadin*);
）
else 
perror(*pthread_join failed′):
printf(*All done\n*):
exit (EXIT_SUCCESS) :
void *thread_function(vold *arg){
x（.3u）.+zeqanus 2ut
int rand_num;
printf(*thread_function is running. Argument was kd\n*, my_nunberl:
rand_nun*1+(int)(9.0*rand()/ (RAND_MAx+1.0));
printf(*Bye Erom 8d\n*, my_nunber):
sleep(rand_num) :
pthread_exit (NULL) ;
当我们运行这个程序的时候，将看到如下所示的输出情况：
cc i_REZNTRANT thread9.c -o thread9 -1pthread
threar, unction is running. Argument was 0
S./thread9
thread, function is running. Argumesit was 1
加入java编程群：524621833
---
## Page 367
第1I章POSIX线程
thread_function is running.
thread_function is running. Argument was 3
Argunent was 7
th:ead_function is running. Argument was 4
thread_function is running. Argument was >
Bye fron 1
Waiting tor threads to finish...
Bye fron 5
Picked up a thzead
Bye from 0
Bye from 3
Bye
from 2
Bye from 4
pergs e dn poxotd
Picked up a thread
Picked up a thzead
 dnx
Picked up a thread
A11  done
正如大家看到的，我们创建了许多线程并让它们以随意的顺序结束了执行。这个程序里面
有一个漏洞，如果你把sleep调用从启动线程们的循环语句里删掉，它就会发作起来。我们借此
提醒大家在编写使用线程的程序时必须多加注意。你看出来了吗？我们与上就来解释。
操作注释：
这一次，我们创建了一个线程ID的数组，如下所示：
pthreads_t a_thread(NUN_THREADS 1:
然后通过循环语句创建出每一个线程，如下所示：
for(lots_of_threads = 0;lots_of_threads  0: lots_of_threads--)(
res = pthread_join{a_thread{lots_of_threads] . &thread_resuit}:
if (res =x 0)(
printf (*Pieked up a thread\n*):
else{
加入iaVa编程群：524621833
---
## Page 368
3.50
Linur程序设计
perror (*pthread_join failed′);
如果你去掉sleep调用后再运行这个程序，就可能会看到一些奇怪的现象，比如某些线程看
起米好象被启动了两次或多次。你看得出为什么会发生这样的问题吗？在创建线程的时候，线
程函数的参数使用的是一个局部变量，而这个变量是在循环里修改的。引起问题的代码是：
for(lots_of_threads = 0; lots_of_threads < NUM_THREADS; lots_of_threads++)(
res = pthread_create (k[a_thread[lots_of_threads]),
thread_function. [void *)&lots_of_threads1 ;
NUt
如果主线程运行得足够快，就有可能改变某些线程的参数（即lots_of_threads变量）。当被共
享的变量和多执行路径没有得到充分重视，程序就有可能出现这样的错误行为。改正这个错误
很简单，直接传递这个参数的值就可以解决问题、如下所示：
res = pthread_create(&(a_thread[lots_of_threads]), NULL, thread_function, (void *)lots_of_threads);
当然还要修改thread_function函数，如下所示：
void *thread_function (void *arg)(
int my_number = (int) arg;
在出版社站点上的可下载代码里，修改后的程序是thread9a.c。
11.9本章总结
在这一章里，我们对POSIX线程进行了学习。我们看到进程是如何创建出多个执行线程，
而这些线程义是如何共享着文件范围变量的。
接着，我们学习了线程对关键代码和数据的访问操作进行控制的两种办法。在这之后，我
们继续介绍了线程属性的控制问题。更准确地说，介绍了如何把它们与主线程隔离开，使主线
程不再需要等待它创建的子线程的完成和结束。在看完一个线程如何请求另外一个线程结束执
行、面接收这个请求的线程又是如何对这个请求进行处理的例子之后，我们给大家提供了一个
有多个线程同时执行的程序示例。
我们没有足够的篇幅去讨论每一个函数调用和与线程有关的方方面面，但大家学到的知识
已经足够你们开始编写自已的线程程序，并且，大家也应该能够通过查阅使用手册页对线程更
加奇特的方面做进一步的研究了。
加入jaVa编程群：524621833
---
## Page 369
第12章进程间通信：管道
我们在第10章介绍了一个进程间通信的简单方法：利用信号收发消息。我们创建通知事件，
用这些事件激起一个响应，但传送的信息只限于一个单独的编号面已。
在这一章里，我们将对管道进行学习，它允许进程之间交换更多有用的数据。我们将在这
一章的末尾用我们新学到的知识把CD数据库程序重新实现为一个客户/服务器软件。
我们将向大家介绍以下几个方面的知识：