In this section, we provide more detail about the spe-
ci(cid:12)c challenges that we had to address while developing a
working method of con(cid:12)g anonymization. The di(cid:14)culties of
anonymizing con(cid:12)gs can be broken into two broad classes of
challenges. First is (cid:12)nding all the elements of a con(cid:12)guration
that can leak identity information. Second is anonymizing
each component so that the relationships between informa-
tion in the con(cid:12)gs are preserved.
3.1 Finding Elements to Anonymize
At (cid:12)rst impression, it might seem that parsing the con(cid:12)g-
uration is the simplest way to (cid:12)nd the elements of a con(cid:12)g
that must be anonymized. However, attributes of the un-
derlying grammar make existing compiler tools poorly suited
for the task.
No explicit grammar available: While somewhat sur-
prising an explicit and complete grammar does not appear
to be publicly available. Moreover, small, but syntactically
signi(cid:12)cant changes occur between Cisco Internet Operat-
ing System (IOS) versions and each type of device supports
slightly di(cid:11)erent commands. All but the most trivial net-
works have routers running di(cid:11)erent versions of IOS (the
routers in our dataset run over 200 di(cid:11)erent IOS versions).
Consequently, even a complete grammar for a particular ver-
sion would typically not be applicable for all routers in a
study | not even within a single network.
Grammar is poorly suited for standard compiler tools:
The language interpreted by the Cisco Command Line In-
terface (CLI) is described in manuals by a regular expression
grammar, and thus in principle is of relatively low complex-
ity. However, in contrast to the grammar of programming
languages, IOS supports a huge set of commands,3 each
speci(cid:12)ed as a separate grammar rule, and it recognizes a
very large set of keywords that appear in di(cid:11)erent orders de-
pending on the command. Inconsistencies and ambiguities
abound. For example, sometimes parameters are positional
and sometimes attribute-value pairs; other commands allow
multiple values for some parameters. Even space is not con-
sistently a separator. These speci(cid:12)cs furthermore depend
on the particular IOS version, resulting in all combinations
and variations potentially appearing in a single network.
Ensuring completeness is di(cid:14)cult: The huge number
of distinct commands not only make the CLI language prob-
lematic for traditional compiler tools, but would also make
it very challenging to ensure correct anonymization through
annotation of the complete grammar. Even if the complete
grammar were successfully annotated, the e(cid:11)ort would bring
questionable value, as only a small fraction of the commands
are of interest for the study of IP networks. This fact high-
lights a key advantage of our approach, as our anonymiza-
tion operates across commands mostly without grammatical
or semantic discrimination, as explained in Section 4.
3.2 Relationship Preserving Anonymization
Each element of a con(cid:12)guration that is altered to hide the
identity of the owner must be anonymized in a way that
preserves the relationship between elements, even when not
all relationships are known at anonymization time. Even
several known relationships are particularly challenging to
maintain.
Preserving the structure of addresses: Con(cid:12)gura-
tion (cid:12)les make extensive use of the subnet contains rela-
tionship to associate elements of the con(cid:12)guration (e.g., the
RIP routing protocol in line 35 and the interface in line 10),
so the relationship must be preserved by anonymization.
There are also restrictions on how addresses are anony-
mized. Some addresses used in con(cid:12)guration (cid:12)les have spe-
cial meanings and must not be modi(cid:12)ed at all, e.g., net-
masks in lines 14 and 30 (255.255.255.252 and 0.0.0.255).
Also, older commands, such as those for con(cid:12)guring RIP
and EIGRP, implicitly assume classful IP addresses, so the
mapping must also be class preserving: mapping addresses
with class A pre(cid:12)xes to addresses with another class A pre-
(cid:12)x. Additionally, it improves human readability in the post-
anonymization con(cid:12)gs if subnet addresses (i.e., addresses
with a host part of all zeros such as 128.2.0.0) are mapped
to other subnet addresses (e.g., 135.9.0.0).
Public AS Numbers must be hashed: Although most
integers found in con(cid:12)guration (cid:12)les do not leak information,
AS numbers can. Anonymizing individual AS numbers with
a random permutation is trivial, but they can also be ref-
erenced by regular expressions, as shown in lines 31{32 of
Figure 1, which then must be rewritten to re(cid:13)ect the per-
muted values.
Maintaining referential integrity: All identi(cid:12)ers must
be anonymized in a consistent manner so that, for example,
the uses relationship between the routing policy statement
3Over 3000 commands for Authorization, Authentication
and Accounting (aaa) alone.
at line 19 and the policy de(cid:12)nition at lines 22{25 created by
the shared identi(cid:12)er \UUNET-import" is maintained.
4. ANONYMIZATION METHOD
We (cid:12)rst describe our general approach, which anonymizes
most parts of the con(cid:12)guration (cid:12)les, and then explain in
detail how particularly troublesome or important aspects of
the con(cid:12)gurations are handled.
4.1 Basic Method
Being unable to know a priori which strings can leak in-
formation about the identity of the network owner, the most
conservative approach is to cryptographically hash every
string that is not known to be innocuous. A pass-list of \un-
privileged" tokens was created by building a web-walker that
string scraped the Cisco IOS command reference guides. In
theory, most Cisco keywords will appear somewhere in the
guides, and non-keywords used in the guides are so common
they cannot leak information. All non-numeric tokens found
in the con(cid:12)gurations are checked against this pass-list, and
any tokens not found are hashed using SHA1 digests [2]: this
anonymizes the names of class-maps, route-maps, and any
other strings that could hold privileged information. Simple
integers are generally not anonymized.
4.2 Handling Expressions Requiring Context
While our goal is to avoid creating anonymization rules
that depend on context so that the anonymizer is robust
against di(cid:11)erent versions of IOS, there are situations which
require context to handle properly. In these situations, we
add rules to the anonymizer written using regular expres-
sions that establish context. In practice, we have discovered
a set of 28 rules4 that is su(cid:14)cient for anonymizing the 200-
plus IOS versions we have tested them on.
We use two rules to segment all words in the con(cid:12)gs
into tokens before consulting the pass-list, so identi(cid:12)ers like
ethernet0/0 become a string \ethernet" that matches against
the pass-list and a non-alphabetic remainder \0/0" that
doesn’t need anonymization. Without this step, the string
\Ethernet0/0" would not have been found in the pass-list
and would have been hashed, destroying valuable informa-
tion about the interface type.
Although all \unsafe" words in comments would be hashed
by our basic method, the arrangement of pass-list words in
comments can still leak information. For example, \global"
and \crossing" are both in the pass-list, but the string \global
crossing" in a comment must be anonymized, as it is the
name of a major ISP. Since there is no means short of human
inspection to reliably (cid:12)nd these leaks, we use three rules to
strip out all comments, including multi-line comments like
the banner in lines 3{6 of Figure 1. Among a dataset of 173
networks, an average of 1.5% of the words were found to be
comments and removed (90th percentile 6%).
An additional four rules are needed to anonymize mis-
cellaneous information, including phone numbers in dialer
strings, and so on.
4.3 Anonymizing IP Addresses
Two of the best pre(cid:12)x preserving IP address anonymiza-
tion schemes are due to Xu [4] and Minshall[5]. Xu’s has the
property that very little state must be shared to consistently
4More details available in the technical report [3].
map addresses, making it amenable to parallelization, while
Minshall’s requires a data-structure to store the mapping as
it is created.
However, anonymizing con(cid:12)gs requires that the IP anon-
ymization scheme has the properties discussed earlier, such
as being class-preserving and subnet-address-preserving. We
have found that using a data-structure-based mapping scheme
makes it easier to implement these requirements. By con-
trolling how new entries are added to the data-structure, we
can shape the mapping to have the needed properties while
maintaining as much of the randomness needed for security
as possible.
We use an extended version of Minshall’s original \-a50"
scheme as taken from tcpdpriv. We con(cid:12)gured it to be
class-preserving, and modi(cid:12)ed it so all \special" IP addresses
(e.g., netmasks, multicast) are passed through unchanged.
Doing so requires dealing with collisions that occur when
the algorithm maps a non-special address a into an address
s that falls within the range of special addresses. When
such collisions occur, we recursively map s until there is
no collision, which we have proven maintains the structure-
preserving property of the algorithm.
4.4 Anonymizing AS Numbers
The space of Autonomous System Numbers (ASNs) is di-
vided into public and private ranges, 1-64512 and 64513-
65536 respectively. Public ASNs need to be anonymized
because they are globally unique and the mapping between
public ASN and network owner can be obtained from many
sources.
There are no semantics and no relationships embedded
in public ASNs,5 so a random permutation can be used
to anonymize them. Since private ASNs are not globally
unique and do not leak identity information about the net-
works, they are not anonymized.
There are two major challenges in anonymizing ASNs.
First is to correctly identify every appearance of an ASN
in the con(cid:12)guration (cid:12)le. For example, an ASN can appear
inside a BGP community attribute. ASNs can also appear
in regular expressions that are used in routing policies re-
lated to AS-path attributes of BGP routes (line 32). A list
of 12 rules is used to locate all the ASNs and ASN regu-
lar expressions in the con(cid:12)guration (cid:12)les | this is the most
fragile part of our method since ASNs are syntactically in-
distinguishable from simple integers. Strategies for coping
with errors are discussed in Section 6.
The second challenge in anonymizing ASNs is dealing with
ASNs that do not explicitly appear in the text of the con(cid:12)gs,
but are accepted by regular expressions that do appear in the
con(cid:12)gs. For example, 70[1-3] accepts ASN 701, 702, and
703. If this regexp appeared in a pre-anonymization con(cid:12)g,
it would need to be rewritten so that the post-anonymization
version accepts whichever ASNs 701, 702, and 703 are mapped
to by the random permutation. The use of digit wildcards
and ranges in regexps dealing with public ASNs is quite rare,
appearing in two of 31 networks studied, because there is lit-
tle structure among public ASNs for the regexps to exploit.
Even among private ASNs, where the network designer is
free to impose structure, only 3 of 31 networks use ranges
in regexps dealing with private ASNs. Although rare, we
feel these cases must still be handled properly. The use of
5An exception is UUNET, which owns the contiguous range
of ASNs from 701{705.
alternation in regexps (e.g., ( 701|1|1239) .*) is very com-
mon, appearing in 10 networks, but can be easily handled
by anonymizing each ASN individually.
We anonymize regular expressions involving digit wild-
cards and ranges by leveraging automata theory [6]. Using
that terminology, the set of ASNs a regexp accepts is called
the language accepted by the regexp. Since there are only
216 ASNs in BGPv4, we can (cid:12)nd the language accepted by
the regexp by simply applying the regexp to a list of all 216
ASNs and seeing which it accepts. If the accepted language
includes only private ASNs, which do not need anonymiza-
tion, no changes are required to the regexp.
If there are
public ASNs in the accepted language, these are all anony-
mized and the challenge becomes computing a regexp that
will accept this new language. Currently, we construct a
regexp that is the alternation of all ASNs in the language.
For example 70[1-3], becomes 701|702|703 and then we
anonymize 701, 702 and 703 individually. The resulting reg-
exps could be very long, but this is not a problem when
anonymized con(cid:12)gs are primarily analyzed by software tools.
We could use known polynomial-time algorithms for con-
structing the minimum (cid:12)nite automata (FA) that accepts
the new language and then convert this FA back into a reg-
exp, but we have not had need for this functionality.
4.5 Anonymizing BGP Community Attributes
BGP community attributes are usually represented by two
integers, written as 701:1234, where the (cid:12)rst integer (701)
is an ASN and the second (1234) is an ordinary integer (for
an example, see line 28 in Figure 1). Community attributes
are normally used to inform a directly connected BGP peer
how routes carrying the attribute should be handled.
The ASN part of an attribute is located and anonymized
as discussed above. To be conservative, we must assume
that even the integer part of the attributes used by each
network are publicly known and su(cid:14)ciently distinctive to