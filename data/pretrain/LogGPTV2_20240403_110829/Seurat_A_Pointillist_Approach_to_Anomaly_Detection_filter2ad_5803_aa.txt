title:Seurat: A Pointillist Approach to Anomaly Detection
author:Yinglian Xie and
Hyang-Ah Kim and
David R. O'Hallaron and
Michael K. Reiter and
Hui Zhang
Seurat: A Pointillist Approach to Anomaly Detection
Yinglian Xie1, Hyang-Ah Kim1,
David R. O’Hallaron1,2, Michael K. Reiter1,2, and Hui Zhang1,2
1 Department of Computer Science
2 Department of Electrical and Computer Engineering
{ylxie,hakim,droh,reiter,hzhang}@cs.cmu.edu
Carnegie Mellon University
Abstract. This paper proposes a new approach to detecting aggregated anoma-
lous events by correlating host ﬁle system changes across space and time. Our
approach is based on a key observation that many host state transitions of in-
terest have both temporal and spatial locality. Abnormal state changes, which
may be hard to detect in isolation, become apparent when they are correlated
with similar changes on other hosts. Based on this intuition, we have developed a
method to detect similar, coincident changes to the patterns of ﬁle updates that are
shared across multiple hosts. We have implemented this approach in a prototype
system called Seurat and demonstrated its effectiveness using a combination of
real workstation cluster traces, simulated attacks, and a manually launched Linux
worm.
Keywords: Anomaly detection, Pointillism, Correlation, File updates, Clustering
1
Introduction
Correlation is a recognized technique for improving the effectiveness of intrusion de-
tection by combining information from multiple sources. For example, many existing
works have proposed correlating different types of logs gathered from distributed mea-
surement points on a network (e.g., [1–3]). By leveraging collective information from
different local detection systems, they are able to detect more attacks with fewer false
positives.
In this paper, we propose a new approach to anomaly detection based on the idea of
correlating host state transitions such as ﬁle system updates. The idea is to correlate host
state transitions across both space (multiple hosts) and time (the past and the present),
detecting similar coincident changes to the patterns of host state updates that are shared
across multiple hosts. Examples of such coincident events include administrative up-
dates that modify ﬁles that have not been modiﬁed before, and malware propagations
that cause certain log ﬁles, which are modiﬁed daily, to cease being updated.
Our approach is based on the key observation that changes in host state in a network
system often have both temporal and spatial locality. Both administrative updates and
malware propagation exhibit spatial locality, in the sense that similar updates tend to
occur across many of the hosts in a network. They also exhibit temporal locality in the
sense that these updates tend to be clustered closely in time. Our goal is to identify
atypical such aggregate updates, or the lack of typical ones.
E. Jonsson et al. (Eds.): RAID 2004, LNCS 3224, pp. 238–257, 2004.
c(cid:1) Springer-Verlag Berlin Heidelberg 2004
Seurat: A Pointillist Approach to Anomaly Detection
239
60
50
40
30
20
10
0
Abnormal cluster
host-A
host-B
host-C
host-D
host-E
0
5
10
15
Normal Cluster
A
X
E
X
D
B
X
C
Fig. 1. Pointillist approach to anomaly detection: Normal points are clustered by the dashed circle.
The appearance of a new cluster consisting of three points suggests anomalous events on host A,
B, and D.
By exploring both the temporal and spatial locality of host state changes in a net-
work system, our approach identiﬁes anomalies without foreknowledge of normal
changes and without system-speciﬁc knowledge. Existing approaches focus on the tem-
poral locality of host state transitions, while overlooking the spatial locality among dif-
ferent hosts in a network system. They either deﬁne a model of normal host state change
patterns through learning, or specify detailed rules about normal changes. The learning
based approaches train the system to learn characteristics of normal changes. Since they
focus only on the temporal locality of single-host state transitions, any signiﬁcant devi-
ation from the normal model is suspicious and should raise an alarm, resulting in a high
false positive rate. Rule-based approaches such as Tripwire [4] require accurate, speciﬁc
knowledge of system conﬁgurations and daily user activity patterns on a speciﬁc host.
Violation of rules then suggests malicious intrusions. Although rule-based anomaly de-
tection raises fewer false alarms, it requires system administrators to manually specify
a set of rules for each host. The correlation capability of our approach across both space
and time allows us to learn the patterns of normal state changes over time, and to detect
those anomalous events correlated among multiple hosts due to malicious intrusions.
This obviates the need for speciﬁc rules while eliminating the false alarms caused by
single host activity pattern shifts.
The correlation is performed by clustering points, each representing an individual
host state transition, in a multi-dimensional feature space. Each feature indicates the
change of a ﬁle attribute, with all features together describing the host state transitions
of an individual machine during a given period (e.g., one day). Over time, the abstrac-
tion of point patterns inherently reﬂects the aggregated host activities. For normal host
state changes, the points should follow some regular pattern by roughly falling into sev-
eral clusters. Abnormal changes, which are hard to detect by monitoring that host alone,
will stand out when they are correlated with other normal host state changes. Hence our
approach shares some ﬂavor of pointillism – a style of painting that applies small dots
onto a surface so that from a distance the dots blend together into meaningful patterns.
Figure 1 illustrates the pointillist approach to anomaly detection. There are ﬁve
hosts in the network system. We represent state changes on each host daily as a point
in a 2-dimensional space in this example. On normal days, the points roughly fall into
240
Yinglian Xie et al.
the dash-circled region. The appearance of a new cluster consisting of three points (in-
dicated by the solid circle) suggests the incidence of anomaly on host A, B, and D,
which may all have been compromised by the same attack. Furthermore, if we know
that certain hosts (e.g., host A) are already compromised (possibly detected by other
means such as a network based IDS), then we can correlate the state changes of the
compromised hosts with the state changes of all other hosts in the network system to
detect more infected hosts (e.g., host B and D).
We have implemented a prototype system, called Seurat1, that uses ﬁle system up-
dates to represent host state changes for anomaly detection. Seurat successfully detects
the propagation of a manually launched Linux worm on a number of hosts in an isolated
cluster. Seurat has a low false alarm rate when evaluated by a real deployment. These
alarms are caused by either system re-conﬁgurations or network wide experiments. The
false negative rate and detection latency, evaluated with simulated attacks, are both low
for fast propagating attacks. For slowly propagating attacks, there is a tradeoff between
false negative rate and detection latency. For each alarm, Seurat identiﬁes the list of
hosts involved and the related ﬁles, which we expect will be extremely helpful for sys-
tem administrators to examine the root cause and dismiss false alarms.
The rest of the paper is organized as follows: Section 2 describes Seurat threat
model. Section 3 introduces the algorithm for correlating host state changes across both
space and time. Section 4 evaluates our approach. Section 5 discusses the limitations of
Seurat and suggests possible improvements. Section 6 presents related work.
2 Attack Model
The goal of Seurat is to automatically identify anomalous events by correlating the state
change events of all hosts in a network system. Hence Seurat deﬁnes an anomalous
event as an unexpected state change close in time across multiple hosts in a network
system.
We focus on rapidly propagating Internet worms, virus, zombies, or other malicious
attacks that compromise multiple hosts in a network system at a time (e.g., one or two
days). We have observed that, once fast, automated attacks are launched, most of the
vulnerable hosts get compromised due to the rapid propagation of the attack and the
scanning preferences of the automated attack tools. According to CERT’s analysis [5],
the level of automation in attack tools continues to increase, making it faster to search
vulnerable hosts and propagate attacks. Recently, the Slammer worm hit 90 percent of
vulnerable systems in the Internet within 10 minutes [6]. Worse, the lack of diversity in
systems and softwares run by Internet-attached hosts enables massive and fast attacks.
Computer clusters tend to be conﬁgured with the same operating systems and softwares.
In such systems, host state changes due to attacks have strong temporal and spatial
locality that can be exploited by Seurat.
Although Seurat is originally designed to detect system changes due to fast propa-
gating attacks, it can be generalized to detect slowly propagating attacks as well. This
can be done by varying the time resolution of reporting and correlating the collective
host state changes. We will discuss this issue further in Section 5. However, Seurat’s
1 Seurat is the 19th century founder of pointillism.
Seurat: A Pointillist Approach to Anomaly Detection
241
global correlation can not detect abnormal state changes that are unique to only a single
host in the network system.
Seurat represents host state changes using ﬁle system updates. Pennington et al. [7]
found that 83% of the intrusion tools and network worms they surveyed modify one
or more system ﬁles. These modiﬁcations would be noticed by monitoring ﬁle system
updates. There are many security tools such as Tripwire [4] and AIDE [8] that rely on
monitoring abnormal ﬁle system updates for intrusion detection.
We use the ﬁle name, including its complete path, to identify a ﬁle in the network
system. We regard different instances of a ﬁle that correspond to a common path name
as a same ﬁle across different hosts, since we are mostly interested in system ﬁles which
tend to have canonical path names exploited by malicious attacks. We treat ﬁles with
different path names on different hosts as different ﬁles, even when they are identical in
content.
For the detection of anomalies caused by attacks, we have found that this repre-
sentation of host state changes is effective and useful. However, we may need different
approaches for other applications of Seurat such as ﬁle sharing detection, or for the de-
tection of more sophisticated future attacks that alter ﬁles at arbitrary locations as they
propagate. As ongoing work, we are investigating the use of ﬁle content digests instead
of ﬁle names.
3 Correlation-Based Anomaly Detection
We deﬁne a d-dimensional feature vector H ij = (cid:1)v1, v2, . . . , vd(cid:2) to represent the ﬁle
system update attributes for host i during time period j. Each H ij can be plotted as
a point in a d-dimensional feature space. Our pointillist approach is based on corre-
lating the feature vectors by clustering. Over time, for normal ﬁle updates, the points
follow some regular pattern (e.g., roughly fall into several clusters). From time to time,
Seurat compares the newly generated points against points from previous time periods.
The appearance of a new cluster, consisting only of newly generated points, indicates
abnormal ﬁle updates and Seurat raises an alarm.
For clustering to work most effectively, we need to ﬁnd the most relevant features
(dimensions) in a feature vector given all the ﬁle update attributes collected by Seurat.
We have investigated two methods to reduce the feature vector dimensions: (1) wavelet-
based selection, and (2) principal component analysis (PCA).
In the rest of this section, we ﬁrst present how we deﬁne the feature vector space
and the distances among points. We then describe the methods Seurat uses to reduce
feature vector dimensions. Finally, we discuss how Seurat detects abnormal ﬁle updates
by clustering.
3.1 Feature Vector Space
Seurat uses binary feature vectors to represent host ﬁle updates. Each dimension in the
feature vector space corresponds to a unique ﬁle (indexed by the full-path ﬁle name). As
such, the dimension of the space d is the number of ﬁle names present on any machine
in the network system. We deﬁne the detection window to be the period that we are
242
Yinglian Xie et al.
interested in ﬁnding anomalies. In the current prototype, the detection window is one
day. For each vector H ij = (cid:1)v1, v2, . . . , vd(cid:2), we set vk to 1 if host i has updated (added,
modiﬁed, or removed) the k-th ﬁle on day j, otherwise, we set vk to 0.
The vectors generated in the detection window will be correlated with vectors gen-
erated on multiple previous days. We treat each feature vector as an independent point
in a set. The set can include vectors generated by the same host on multiple days, or
vectors generated by multiple hosts on the same day. In the rest of the paper, we use
V = (cid:1)v1, v2, . . . , vd(cid:2) to denote a feature vector for convenience. Figure 2 shows how
we represent the host ﬁle updates using feature vectors.
V1  =  H11  =    
>
>
Fig. 2. Representing host ﬁle updates as feature vectors: F1, F2, F3, F4, F5 are ﬁve different ﬁles
(i.e., ﬁle names). Accordingly, the feature vector space has 5 dimensions in the example.
The correlation is based on the distances among vectors. Seurat uses a cosine dis-
tance metric, which is a common similarity measure between binary vectors [9, 10].
We deﬁne the distance D(V 1, V 2) between two vectors V 1 and V 2 as their angle θ
computed by the cosine value:
(cid:1)
D(V 1, V 2) = θ = cos−1
(cid:2)
V 1 · V 2
|V 1||V 2|
Comparison Window
Detection Window
day j-t
day j-t+1
… …
day j-2
day j-1
day j
Correlation Window
Fig. 3. Detection window, comparison window, and correlation window. The detection window is
day j. The comparison window is from day j − t to day j − 1. The correlation window is from
day j − t to day j.
For each day j (the detection window), Seurat correlates the newly generated vec-
tors with vectors generated in a number of previous days j − 1, j − 2, . . .. We assume
that the same abnormal ﬁle update events on day j, if any, have not occurred on those
previous days. We deﬁne the comparison window of day j as the days that we look back
for comparison, and the correlation window of day j as the inclusive period of day j
Seurat: A Pointillist Approach to Anomaly Detection
243
and its comparison window. Vectors generated outside the correlation window of day j
are not used to identify abnormal ﬁle updates on day j. Figure 3 illustrates the concepts
of detection window, comparison window, and correlation window.
Since each vector generated during the comparison window serves as an example of
normal ﬁle updates to compare against in the clustering process, we explore the tempo-
ral locality of normal update events by choosing an appropriate comparison window for
each day. The comparison window size is a conﬁgurable parameter of Seurat. It reﬂects
how far we look back into history to implicitly deﬁne the model of normal ﬁle up-
dates. For example, some ﬁles such as /var/spool/anacron/cron.weekly on
Linux platforms are updated weekly. In order to regard such weekly updates as normal
updates, administrators have to choose a comparison window size larger than a week.
Similarly, the size of the detection window reﬂects the degree of temporal locality of
abnormal update events.
Since Seurat correlates ﬁle updates across multiple hosts, we are interested in only
those ﬁles that have been updated by at least two different hosts. Files that have been up-
dated by only one single host in the network system throughout the correlation window
are more likely to be user ﬁles. As such, we do not select them as relevant dimensions
to deﬁne the feature vector space.
3.2 Feature Selection
Most ﬁle updates are irrelevant to anomalous events even after we ﬁlter out the ﬁle
updates reported by a single host. Those ﬁles become noise dimensions when we cor-
relate the vectors (points) to identify abnormal updates, and increase the complexity of
the correlation process. We need more selective ways to choose relevant ﬁles and reduce
feature vector dimensions. Seurat uses a wavelet-based selection method and principal
component analysis (PCA) for this purpose.
Wavelet-Based Selection. The wavelet-based selection method regards each individual
ﬁle update status as a discrete time series signal S. Given a ﬁle i, the value of the signal
Number of host
Daily variations
day
Fig. 4. Representing ﬁle update status with wavelet transformation: The original signal is S,
which can be decomposed into a low frequency signal cA reﬂecting the long term update trend,
and a high frequency signal cD reﬂecting the daily variations from the long-term trend.
Long term update trend
244
Yinglian Xie et al.
on day n, denoted by Si(n), is deﬁned as the total number of hosts that update ﬁle i
on day n in the network system. Each such signal Si can be decomposed into a low
frequency signal cAi reﬂecting the long term update trend, and a high frequency signal
cDi reﬂecting the day-to-day variation from the long term trend. (see Figure 4). If the
high frequency signal cDi shows a spike on a certain day, we know that a signiﬁcantly
larger number of hosts updated ﬁle i than on a normal day. We then select ﬁle i as a
relevant feature dimension in deﬁning the feature vector space.
Seurat detects signal spikes using the residual signal of the long-term trend. The
same technique has been used to detect disease outbreaks[11]. To detect anomalies on
day j, the algorithm takes as input the list of ﬁles that have been updated by at least two
different hosts in the correlation window of day j. Then, from these ﬁles the algorithm
selects a subset that will be used to deﬁne the feature vector space.
For each file i:
1. Construct a time series signal:  
Si = cAi + cDi
2. Compute the residual signal value of day j:
Ri(j) = Si(j) – cAi(j-1)
3. If Ri(j) > alpha, then select file ias a feature dimension
Fig. 5. Wavelet-based feature selection.
s
t
s
o