ﬁrmware releases we studied disclosed 441 unique open-
source libraries. Counting libraries with different version
numbers as unique, this number increases to 654. While some
vendors consistently use the same version across images, oth-
ers do not: for example, of the 12 Belkin devices we studied
(each corresponding to one image), there are 80 unique li-
braries spanning 103 library versions. This ﬁnding already
suggests problematic patching behavior. While there is a sig-
niﬁcant variation in the range of libraries in use (441 across
100%
50%
0%
e
p
o
x
o
b
s s l
s
u
y
n
b
% Devices (n=26)
% Vendors (n=5)
z li b
e
l z m a
2 f s - p r o
s
g
c
o l
u rl
li b t o
li b
p
a
c
p
u - b
o t
o
l u
n
u r s e
n t
c li e
u t o
n t p
q lit e - a
a
c
s
n f
u
a s
o
q
c
s
o l s
c
c - a r e s
h f s
m a ll o
w ir e l e s s -t o
d
Figure 2: List of the most common libraries in all 26 devices
across vendors. Among 26 devices, over 50% use these li-
braries. The most popular ones, OpenSSL and BusyBox, are
used by 92.31% and 88.46% of devices. We also show the
percentage of vendors who use these libraries on their devices.
just 26 devices), there is a common subset across devices. Fig-
ure 2 shows the most popular libraries, appearing in at least
50% of the devices. OpenSSL and BusyBox are ubiquitous,
used by 92.31% and 88.46% out of a total of 26 devices.
Patching Practices. To better understand the security risk
of third-party library use, we examine ﬁrmware releases lon-
gitudinally, and their alignment with library patches and CVE
disclosures. Since historical release data was only available
for 5 devices from Nest and D-Link, we use 100 ﬁrmware
releases for these devices, for a 7-year period (2011-2018).
We pick OpenSSL to study library patching practices for
two reasons. First, OpenSSL is a popular library used by all
vendors in our dataset, except for Ring which uses GnuTLS.
Second, OpenSSL is critical for software security and has
a well-documented history of vulnerability discoveries and
patches [52]. By examining OpenSSL versions in ﬁrmware
releases and OpenSSL’s update history, we analyze vendors’
patching behaviors and outstanding vulnerabilities over time.
Figure 3 shows the “age” of the OpenSSL library, deﬁned
as the number of days elapsed since the release date of a par-
ticular version. The dashed lines represent the library ages
used in different device ﬁrmware, while the solid green lines
represent the ideal case where the devices can always use the
most up-to-date library versions. As shown in these dashed
lines, device ﬁrmware updates routinely lag behind using the
latest versions of OpenSSL. In some cases, this extends for
hundreds of days. For example, Nest Protect’s last ﬁrmware re-
lease on 2016-07-13 used a 1525 days old OpenSSL version,
while the latest available one was released on 2016-05-03
(only 71 days old). Furthermore, there are often multiple new
ﬁrmware releases made by vendors without incorporating
the up-to-date library version, suggesting a missed opportu-
nity. Notably, even devices from the same vendor often use
different library versions, highlighting the challenge of coor-
dinating upgrades.
The Nest Learning Thermostat appears to have the best
patching practices among devices in our study; it sometimes
even used the latest OpenSSL (red circles in Figure 3). How-
ever, a closer look at how this aligns with known vulnerabili-
4190    30th USENIX Security Symposium
USENIX Association
OpenSSL in Nest Devices
Latest Available
Learning Thermostat
Protect
e
g
A
y
r
a
r
b
i
L
)
s
y
a
D
(
1,500
1,000
500
0
e
g
A
y
r
a
r
b
i
L
)
s
y
a
D
(
1,500
1,000
500
0
OpenSSL in D-Link Devices
Latest Available
DSPW215
DSPW110
DCHS150
2012
2013
2014
2015
2016
2017
2018
2014-7
2015-1
2015-7
2016-1
2016-7
Figure 3: OpenSSL library ages in different devices. Dashed lines represent actual library used in the ﬁrmware. Each marker
indicates a new ﬁrmware release. Solid lines indicate the expected library age if new ﬁrmware release always uses the latest
versions, representing a best-case scenario. Red circles highlight cases in which devices actually use the latest version.
15
10
5
s
E
V
C
High
Moderate
Total
0
16-07-19
15-09-01
15-06-19
15-04-09
14-09-04
13-04-29
12-11-09
17-08-07
17-05-01
16-10-24
16-06-06
16-02-03
16-01-21
16-01-11
15-12-10
15-11-17
15-11-11
15-11-04
15-06-17
14-11-17
14-11-04
14-06-30
14-05-30
14-05-21
14-05-15
13-11-22
13-06-21
13-01-23
13-01-07
12-11-16
11-10-25
17-10-16
12-10-02
12-08-30
12-05-17
12-04-05
12-03-07
12-01-24
12-01-20
12-01-11
11-12-16
11-11-22
s
E
V
C
60
40
20
0
13-11-19
s
E
V
C
40
20
(a) Nest Learning Thermostat.
40
20
s
E
V
C
14-06-17
14-09-04
15-06-23
15-11-12
16-01-15
16-07-13
(b) Nest Protect.
0
14-07-09
14-10-07
14-12-30
15-01-01
15-03-27
15-07-03
15-09-09
16-03-08
16-04-30
(c) D-Link DCHS150.
40
20
s
E
V
C
0
14-07-15
15-01-01
15-07-07
15-08-28
15-09-24
16-03-07
16-05-31
16-07-14
0
14-06-05
14-06-09
14-08-07
14-10-07
14-12-30
15-02-09
15-05-03
15-07-07
15-07-15
15-08-13
15-09-04
15-10-10
16-03-07
(d) D-Link DSPW110.
(e) D-Link DSPW215.
Figure 4: Number of publicly known OpenSSL CVEs in ﬁrmware releases. X-axis shows the ﬁrmware release date. We do not
have CVE severity breakdowns for data prior to August 2014 (the red dashed line in (a)). For newer libraries, we ﬁnd many High
and Moderate CVEs present in the ﬁrmware. Certain Nest Protect ﬁrmware releases are skipped due to missing release dates.
ties suggests that even this case reﬂects unnecessary exposure.
Figure 4a depicts the number of OpenSSL CVEs and in partic-
ular those of moderate or high severity (severity data is only
available after August 2014), that apply to each version of the
Nest Learning Thermostat in this time frame. Unsurprisingly,
the periods corresponding to Figure 3’s red circles are not
vulnerable, but this only lasts for a few months until multiple
vulnerabilities emerge. Importantly, most of these CVEs are
avoidable only if the ﬁrmware uses the latest OpenSSL.
Hardware Architecture. Many devices in our dataset are
Unix-based systems, as 88.46% and 46.15% of devices in-
clude BusyBox and Linux Kernel libraries. Teardowns on
high-end smart devices [17, 18, 35] often ﬁnd powerful
ARM processors, afﬁrming our ﬁndings. Meanwhile, budget-
oriented devices may prefer alternative microcontrollers (such
as ESP32 and ESP8266 in light bulbs and plugs [1, 2]). Our
dataset might under-represent lower-end devices for two rea-
sons. First, they could use libraries provided by chip maker,
royalty-free [27]. Second, we had some difﬁculty searching
for open source compliance notices from several lesser-known
vendors.
Key Takeaways and Limitations. Our measurement re-
sults reveal concerning statistics about the current state of
third-party library management in IoT devices. Just by con-
sidering widely used open-source GPL libraries, we show
that even market-leading vendors such as Nest and D-Link
oftentimes fail to update their dependent libraries promptly.
This results in unnecessary exposure to known vulnerabilities.
While our data collection methodology is limited to open-
source GPL libraries, we aim to shed light on the existing
state of IoT library mismanagement using these libraries as
indicators.
USENIX Association
30th USENIX Security Symposium    4191
Device
Vendor
Firmware
Release Date
Libraries
Library Versions
WeMo F7C027/F7C028
Wemo Light Switch v1 F7C030
WeMo SNS
WeMo Mini F7C063
WeMo Smart
WeMo Smart F7C046/47/49/50
WeMo WLS040
WeMo Dimmer
WeMo InsightCR
WeMo Jarden
WeMo Maker
WeMo Insight F7C029
SmartPlug - HS100
SmartPlug - HS110
SmartPlug - HS200
Generic Release
Nest Cam
Nest Connect
Nest Detect
Nest Guard
Nest Hello
Nest Learning Thermostat
Nest Protect
DSPW110
DSPW215
DCHS150
Belkin
Belkin
Belkin
Belkin
Belkin
Belkin
Belkin
Belkin
Belkin
Belkin
Belkin
Belkin
TP-Link
TP-Link
TP-Link
Ring
Nest