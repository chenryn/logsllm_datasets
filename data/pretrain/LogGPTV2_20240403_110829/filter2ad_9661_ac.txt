    test   al,al
    jne    73e
一开始程序使`esi`加一。（`esi`在前一个块中赋值为1。）然后将该值移动到`rcx`的低32位。
然后，程序从`rdi + rcx`加载一个字节。`rdi`是`argv[1]`，`rcx`是`esi +
1`（此时为2）。所以这里的程序加载了`argv[1][2]`。更准确地说，它加载了`argv[1][rcx]`（您稍后会明白为什么这一点很重要）。
然后代码检查它是否等于0，如果不是就跳转到0x73e：
    movzx  ecx,BYTE PTR [rdx+rcx*1]
    test   cl,cl
    je     761
我们之前见过这个代码块，这是上面几节见过的检查代码。它从`argv[1][ecx]`加载一个字节并检查它是否为零，如果是，它会跳转到判定成功的代码块，如果不是，它会继续向下进入到我们刚刚逆向过的代码。这是您发现的又一种模式：
**循环** 。
现在我们已经发现了整个循环，我们看看它的所有指令，从0x73e开始到0x75f结束。
回想一下，几个块之前，`rdi`加载了字符串`password1`的地址，但这不是正确的密码。在这里我们可以发现原因。从这个字符串加载的字节，在将它们与实际输入进行比较之前被减去1。
    movzx  ecx,BYTE PTR [rdx+rcx*1] ; load a byte from argv[1]
    test   cl,cl                    ; check if that byte is zero
    je     761           ; if so, jump to success
    movsx  eax,al                   
    sub    eax,0x1                  ; decrement comparison byte
    movsx  ecx,cl                   
    cmp    eax,ecx                  ; check if the correct byte == the input byte
    jne    794           ; if it doesn't match, jump to failure
    add    esi,0x1                  ; increment index into comparison string
    movsxd rcx,esi                  ; place that index in CX
    movzx  eax,BYTE PTR [rdi+rcx*1] ; load the next byte from the comparison string
    test   al,al                    ; Check that that byte isn't zero
    jne    73e           ; If it's not zero, loop
虽然我们会像下面的C代码那样编写它，但编译器实际上将循环检查的第二部分移动到循环的末尾，并在那里加载比较字符串的下一个字节。
注意：此代码在本教程的原始版本中不正确。感谢[empwill](https://github.com/empwill/)的指正。我提出这一点，是想让读者意识到即使是经验丰富的逆向工程师也会犯错误，而且这些错误可以预见和修复！
> **亲自尝试一下** ：要找到正确的密码，看下面这个C代码就足够了。试试看，去找到密码！
    int main(int argc, char** argv){
        if (argc != 2) {
            puts("Need exactly one argument.");
            return -1;
        }
        // This pointer is in rdi in our disassembled binary
        char* comparison = "password1";
        // This is the value used to index the argv[1]
        int i = 0;
        while (argv[1][i] != 0 && (comparison[i]) != 0) {
            if (argv[1][i] != comparison[i] - 1) {
                printf("No, %s is not correct.", argv[1]);
                return 1;
            }
            i++;
        }
        printf("Yes, %s is correct.", argv[1]);
        return 0;
    }
确实只要这个代码就足够了。只要简单地对`password1`字符串中的每个字符减去1，就得到“o`rrvnqc0”。试试吧：
    $ ./crackme02.64 o\`rrvnqc0
    Yes, o`rrvnqc0 is correct!
您可能已经敏锐地觉察到这个二进制文件存在问题，它会接受这些字符串中的任何一个：o，o`，o`r，o`rr等等都会生效！显然这个方法用于您的产品密钥中不是很好。此外，正如[机智的GitHub评论者](https://github.com/LeoTindall/crackmes/issues/2)指出的，空密码也是可以的（`./crackme02.64
""`）。
如果您读到这里，那就恭喜您！逆向工程很难，但些这是它的核心部分，而且从此以后它会变得更加容易。
> **练习** ：有一个名为`crackme02e.c`的文件可以使用相同的方法解决。编译并尝试解决它，巩固您的技能。
## crackme03.c
下一个CrackMe会稍微难一些。在crackme02中，我们人为查看每个分支，在心里构建了整个执行流程。随着程序变得更复杂，这种方法就变得不可行了。
### Radare 分析工具
不过逆向工程社区有很多聪明人，并且开发出很多好工具可以自动完成大量的分析。其中一些如Ida Pro，售价高达5000美元。我个人最喜欢的是Radare2（
**Ra** ndom **da** ta **re** covery），它完全免费且开源。
运行`crackme03.64`，我们可以看到它的行为与前两个题目基本上相同。它需要且只需要一个参数，当我们提供一个参数时，它会告诉我们这是错误的，这很有用。
这一次，我们使用`radare2`（或`r2`命令）打开它，而不用`objdump`：`r2
./crackme03.64`。这时您会看到一个提示符界面。输入“?”能看到帮助信息。Radare是一个非常强大的工具，但对于这个题目，我们不需要用到它太多功能。在下面这个帮助中我删除了很多条目，只剩下一些有用的项目：
    [0x000005e0]> ?
    Usage: [.][times][cmd][~grep][@[@iter]addr!size][|>pipe] ; ...
    Append '?' to any char command to get detailed help
    Prefix with number to repeat command N times (f.ex: 3x)
    | a[?]                    Analysis commands
    | p[?] [len]              Print current block with format and length
    | s[?] [addr]             Seek to address (also for '0x', '0x1' == 's 0x1')
    | V                       Enter visual mode (V! = panels, VV = fcngraph, VVV = callgraph)
需要注意的一点是Radare **自带文档** 。如果您想知道一个命令是什么用的，只需在它之后输入一个问号“?”。例如我们想分析当前的程序：
    [0x000005e0]> a?
    |Usage: a[abdefFghoprxstc] [...]
    | ab [hexpairs]    analyze bytes
    | aa[?]            analyze all (fcns + bbs) (aa0 to avoid sub renaming)
    | ac[?] [cycles]   analyze which op could be executed in [cycles]
    | ad[?]            analyze data trampoline (wip)
    | ad [from] [to]   analyze data pointers to (from-to)
    | ae[?] [expr]     analyze opcode eval expression (see ao)
    | af[?]            analyze Functions
    | aF               same as above, but using anal.depth=1
    | ag[?] [options]  output Graphviz code
    | ah[?]            analysis hints (force opcode size, ...)
    | ai [addr]        address information (show perms, stack, heap, ...)
    | ao[?] [len]      analyze Opcodes (or emulate it)
    | aO               Analyze N instructions in M bytes
    | ar[?]            like 'dr' but for the esil vm. (registers)
    | ap               find prelude for current offset
    | ax[?]            manage refs/xrefs (see also afx?)
    | as[?] [num]      analyze syscall using dbg.reg
    | at[?] [.]        analyze execution traces
    Examples:
    f ts @ `S*~text:0[3]`; f t @ section..text
    f ds @ `S*~data:0[3]`; f d @ section..data
    .ad t t+ts @ d:ds
> **亲自尝试一下** ：翻阅一下帮助，通过Google查询您不知道的术语。在这篇文章里不会涉及其中很多很酷的功能，但这会激发您进行一些尝试。
### 自动化分析
我们可以用它的命令`aaaa`：使用所有正常及实验中技术分析函数。
这样Radare会给我们返回一个函数列表。我们可以用`afl`查看它：分析函数，显示列表（`a`nalyze `f`unctions, displaying
a `l`ist）。
    [0x000005e0]> afl
    0x00000000    3 73   -> 75   fcn.rsp
    0x00000049    1 219          fcn.00000049
    0x00000590    3 23           sym._init
    0x000005c0    1 8            sym.imp.puts
    0x000005c8    1 8            sym.imp.__printf_chk
    0x000005d0    1 16           sym.imp.__cxa_finalize
    0x000005e0    1 43           entry0
    0x00000610    4 50   -> 44   sym.deregister_tm_clones
    0x00000650    4 66   -> 57   sym.register_tm_clones
    0x000006a0    5 50           sym.__do_global_dtors_aux
    0x000006e0    4 48   -> 42   entry1.init
    0x00000710    7 58           sym.check_pw
    0x0000074a    7 203          main
    0x00000820    4 101          sym.__libc_csu_init
    0x00000890    1 2            sym.__libc_csu_fini
    0x00000894    1 9            sym._fini
我们只要关心`main`和`check_pw`两个函数。
> **亲自尝试一下** ：想想看我为什么可以立即判断出其他函数是无用的，善用搜索引擎。
通过`pdf@main`指令，Radare可以为我们反汇编一个函数：打印main函数的反汇编（`p`rint `d`isassembly of a
`f`unction `@` (at) the symbol called
`main`）。Radare还支持通过Tab进行上下文自动补全。例如，如果您输入`pdf@sym`，并按Tab键，您将获得符号表中所有函数的列表。
总之，首先要注意的是Radare会对反汇编结果进行语法高亮，添加大量注释，甚至命名一些变量。它也做了一些分析来确定变量的类型。在这个题目中，我们有9个本地堆栈变量。Radare根据它们距离堆栈指针（SP）的偏移量，将它们命名为`local_2h`，`local_3h`等。
程序的开头我们非常熟悉。从0x74a开始：
    push rbx
    sub rsp, 0x10
    cmp edi, 2
    jne 0x7cc
我们可以发现函数首先为局部变量分配16个字节的内存，然后是一个`if`语句。回想一下，DI寄存器保存了函数的第一个参数。因为这是`main`函数的参数，所以该参数是`argc`。所以代码逻辑是：`if
(argc != 2) jump somewhere`。
在Radare中，查看`jne`指令的左侧，您会看到一条箭头从该指令出发，并向下指向到0x7cc，我们可以看到：
    lea rdi, str.Need_exactly_one_argument. ; 0x8a4 ; "Need exactly one argument." ; const char * s
    call sym.imp.puts           ; int puts(const char *s)
    mov eax, 0xffffffff         ; -1
    jmp 0x7c6
还记得在我们的二进制文件中搜索字符串有多麻烦吗？Radare为我们做了这些：为我们提供了地址，方便的别名以及字符串文字的值。它还分析出被调用的函数，这非常方便。这样我们可以毫不费力地看到二进制文件正在打印字符串“Need
exactly one argument.”
然后它给`eax`装入-1并跳转到0x7c6。我们可以通过箭头（或者通过滚动并寻找地址）来查看它，但还有一种更有趣的方式。
### 可视化流程分析
Radare提供了一种称为“可视化模式”的功能。我们需要先把Radare的内部光标移动到我们想要分析的函数，使用`s`eek命令：`s
main`。您会注意到提示符从`[0x000005e0]>`更改为`[0x0000074a]>`，表示当前位置已移至`main`函数中的第一条指令，然后输入`VV`（可视模式2）。这时您应该会看到包含程序各部分的ASCII字符框。
每当出现跳转指令时，代码块就结束了，并且出现指向其他块的箭头。例如，在顶部块（函数的开头）中，检查命令行参数个数的jne指令引出一红一绿两个箭头。
在右边您会看到一个类似这样的块：
    .---------------------------------------------.                                
    |  0x7cc ;[ga]                                |                                