(Section III-C), the controller immediately closes its app to
protect the principal.
Exiting the Ward. When the operation of the principal is
coming to an end, Guardian needs to wrap up the protection
procedure, clean up the principal’s computing environment
whenever possible and resume the apps temporarily stopped.
Most importantly here is to determine the timing for moving
out of the Ward mode. A straightforward one seems to be the
moment when the principal is switched to the background. This,
however, could be caused by an event that is temporary but
needs an immediate attention, such as an incoming phone call.
To avoid mistakenly exiting the Ward mode, our implementation
takes the following approach. In the case that the principal
is replaced by a system or trusted third party apps in the
foreground, and such an app is in communication category such
as phone or Skype, the Guardian app does not rush to launch
the exit procedure. It does this when the device is switched
back to the home app and a pre-determined waiting period
has expired. The period is set to avoid the user’s accidental
triggering of the exit procedure. On the other hand, whenever
a third-party app starts to run in the foreground and the app
is not in the communication category, our approach pops up a
window asking the user’s permission to exit the Ward mode
and automatically does so after a short waiting period.
Once the exit procedure starts, Guardian ﬁrst closes the
principal, which removes the entire process directory of the
app, making sure that its runtime statistics (such as its CPU,
memory usages) there will not be exposed to unauthorized
parties. Also based upon the user’s setting, our app can clean
all the caches using the permission CLEAR_APP_CACHE3.
With such protection, however, still some app information
cannot be easily cleaned up. Particularly, network-data usages
sit under the /proc/uid_stat// directory, which
can only be reset when the device reboots. With proper
protection during the protected app’s runtime, what is left
after its execution is just aggregated usage data after several
rounds of communication, which are typically hard to use in an
inference attack (Section IV). Guardian can further suggest to
the user to deliberately take a few random actions (e.g., clicking
on some random disease conditions in WebMD [22]) before
exiting the Ward mode, making the chance of a successful
inference even more remote.
After
runtime
the principal’s
its
controller
envi-
sanitization of
ronment, Guardian runs
to launch the
apps that have been closed. Speciﬁcally, Guardian uses
queryIntentActivities to ﬁnd out
the main activ-
ity of the suspended apps, and then revives them through
startActivity. Although this can be done to all apps,
one can simply choose to only resume those that need to be
recovered. As discussed before, the design of Android makes
most background apps, those with 9 or above, disposable.
Therefore, our approach only recovers the app with at least
one process running at 5 or lower, while ignoring those with
a high score. This treatment expedites the recovery process
3This is done using reﬂection to call the function freeStorage. Our
current implementation needs to free all the caches, which affects other apps’
performance. Therefore, the user is supposed to use it only when running the
app with highly-sensitive information.
921922
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:07 UTC from IEEE Xplore.  Restrictions apply. 
without affecting the utility of those apps (as those apps are
supposed to run to their completion and can be terminated at
any time), though it may come with some performance impacts,
particularly when the user wants to run the recent program she
used. In this case, the program needs to be restarted.
Utility Impacts. To understand the utility impacts of stopping
third-party background processes, we analyzed 475 top apps
from the Google Play store, in all 27 categories. Our analysis
shows that a vast majority of the apps actually operate with high
oom_adj scores, at level of 9 or above. This implies that once
switched to the background, they can be terminated by Android
anytime to make room for the foreground or system processes.
Only 27 (5.68%) of those apps run at level 5 or below. Closing
them may have some utility impacts, for example, stopping the
background music. On the other hand, their runtime states are
always well preserved when they are terminated. Speciﬁcally,
for each of those apps, whenever we restart them, always they
are restored to the states when they were killed, running at
wherever they were stopped. Table IV (Section IV-B) presents
a few examples for the analyzed apps. The ﬁndings indicate
that the utility impacts of our approach are limited.
C. Finding Suspects
Even though most background processes are disposable and
almost all of them can recover their states once restarted, this
pause-resume approach still comes with some cost: invocation
of an app takes a longer time than simply bringing a background
process to the foreground, as illustrated in Table I; background
apps could stop playing music or responding to Intents in the
Ward mode. Limiting such performance and utility impacts
relies on selection of right apps, those indeed suspicious, to
close, avoiding blind killing of all apps. As discussed before,
such selection is nontrivial, given that we cannot see detailed
app behaviors such as system calls. In this section, we elaborate
how we address this problem, using side channel information
of individual apps to infer their activities.
App
Restart (s)
Switch (s)
Subway Surf
Mx Player
Flashlight
Shazam
RunKeeper
Bible.is
Chase
Duolingo
PicsArt
Wikipedia
9.76
1.15
1.27
2.18
4.02
2.47
1.94
2.92
2.08
1.91
2.89
0.55
0.68
0.77
1.35
0.58
0.75
0.95
0.91
0.65
TABLE I: Time of restarting an app vs. time of switching it to
the foreground
Control strategy. As discussed before, our Guardian app is
supported by a server that hosts information regarding how
different apps should be protected. As examples, the phone
app needs to be guarded against unauthorized audio recording;
for WebMD, the concern is side-channel leaks. On the server
side, such information is kept in a database, which includes
types of threats a particular app is facing and policies for
determining whether another app is suspicious of committing
related attacks. In the above example, the policy for detecting
an audio recording attack on the phone app can be the presence
of an untrusted background app with audio record permissions,
together with an AudioIn_X thread (for recording) created
922923
by mediaserver, as elaborated later in the section. This
treatment leverages the features of a speciﬁc type of RIG
attacks, which pose the major threat to the principal, to come up
with a specialized defense strategy, and therefore avoids blindly
killing all untrusted processes. On the other hand, when the
user is looking for more generic protection or the information
about the principal is not in the database, we can always roll
back to the blind strategy that stops all untrusted apps. Here
we describe how to defend against different RIG attacks (data
stealing and side-channel leaks) in this way, based upon the
apps’ features, particularly their behaviors as inferred from
their side channels.
Data stealing attacks. For some principals, the malicious
app needs permissions to steal their sensitive data. Partic-
ularly, to record a phone conversation, the app must have
the RECORD_AUDIO permission, and may also ask for
READ_PHONE_STATE to get the incoming-call event (us-
ing the ﬁlter android.intent.action.PHONE_STATE).
With these permissions, the app can tape the user’s conversation
by using the MediaRecorder object, which causes Medi-
aserver to create a service thread with the name AudioIn_X,
where X is a number. Note that this name is generated by
the OS and cannot be forged by the adversary. It discloses
what the system is now doing (that is, recording audio on
behalf of an app with proper permissions). The existence of
such a thread can be directly observed from the public ﬁle
/proc//task//status. Putting the pieces
together, Guardian identiﬁes a suspect for stealing phone conver-
sations if the app has at least the RECORD_AUDIO permission
and behaves in a suspicious way, that is, using CPU resources
right before the emergence of an AudioIn_X thread. Here
the CPU usage can be observed from /proc//stat,
which we discuss later. Our experimental study shows that
this approach can timely stop the malicious app, preventing
it from recording anything useful. Also, the strategy is very
effective: when there is only one app with such a permission,
we are almost certain that the app is malicious once the above
condition is satisﬁed.
When it comes to ofﬁcial apps for critical Bluetooth devices,
what we can do, again, is to closely monitor the background
apps capable of stealing data. Here the apps are those with
the Bluetooth permission. Speciﬁcally, once the principal (the
ofﬁcial app) is invoked, Guardian periodically inspects all
background processes to identify the ones with the permissions.
In the meantime, our app also keeps track of the Bluetooth
service process com.android.bluetooth by looking at
its /proc//stat. Whenever the process starts using
CPU resources aggressively, Guardian immediately suspends
all those untrusted, Bluetooth-capable apps (in the background)
to protect the data of the principal running in the foreground.
Note that even though the Bluetooth operations here could
actually be caused by the ofﬁcial app itself, the observation
nevertheless shows that its Bluetooth device is in the vicinity
and some party has already started communicating with it. In
this case, we have to stop untrusted Bluetooth apps in the
background to protect the ofﬁcial app’s data. Also interestingly,
if the termination of the untrusted apps actually causes the
Bluetooth service to stop, even temporarily, we have strong
evidence that indeed at least one of these apps is malicious,
trying to read from the device before the ofﬁcial app does, just
like what is described in the prior research [6].
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:07 UTC from IEEE Xplore.  Restrictions apply. 
Side-channel attacks. The approach for detecting data-stealing
attempts, however, does not work on side-channel attacks, which
are more subtle and do not require any permission. A malicious
app performing the attacks just collects public information
from the principal’s runtime. Finding such apps solely relies on
analyzing their behaviors, which can only be inferred from the
exactly same public resources (e.g., CPU usages) a malicious
app utilizes to launch the attack.
A key observation of those side-channel attacks is that the
malicious app has to continuously sample from its target’s
runtime environment (e.g., its CPU, memory, network data
usages [1], its use of speaker [3] and the slight movements
caused by touch-screen inputs to the target app [4]). Such
sampling needs to be done fast enough to capture ﬂeeting
events, such as changes of memory footprints when a web
page is being loaded, increments of tcp_snd when multiple
packets are sent out [1]. Once the sampling rate goes down, the
adversary starts to miss events that happen within the target and
as a result, loses the granularity of observation necessary for
inferring sensitive information. Therefore, a simple yet generic
way to identify suspicious activities is just looking at how
frequently a background app uses the CPU resources.
Apparently, we can get this information from the app’s
CPU usage (within /proc//stat), which includes
utime (the time spent on the user land in terms of clock ticks)
and stime (the time spent on the kernel land). Here a clock
tick is typically set to 10 milliseconds. The problem here is
that the metric fails to describe how often an app is scheduled
to use CPU. All we can do is to estimate whether the total
usage here is sufﬁcient for a RIG attack to succeed. This is
hard because we have no idea how efﬁcient the attack code
could be. Further all CPU usages below one tick do not show
up immediately. Therefore, we conclude that this information
alone is not enough for identifying suspicious app behaviors.
What was used in our research is a new side channel, called
schedule status (/proc//task//sched
stat), which records the number of times an app has been
scheduled to use CPU so far. This number provides precise
information for determining the frequency the app uses CPU,
which we call Scheduling Rate or SR. Speciﬁcally, an app’s
SR is the number of times it is scheduled to access CPU every
second. As discussed above, to continuously monitor a target
program, a malicious app must run at a certain SR level to
achieve the necessary sampling rate4. Note that this does not
mean that any app operating at this SR is necessarily monitoring
the target. However, suspension of the background apps indeed
scheduled too frequently helps protect the target (the principal)
without blindly killing other processes, particularly when the
information can only be collected at a high sampling rate.
Further, as discussed before (Section III-B), closing an app
typically does not affect its utility. Therefore, the cost for doing
so, even to an actually legitimate app, is limited.
To further shorten the list of the processes that need to
suspend, we just focus on the apps always active. For this
purpose, our implementation of Guardian collects multiple
(> 10) samples from each app’s schedstat, one minute
each, to calculate its average SR within that minute. When
the principal is invoked, the app only closes the processes
that have a signiﬁcant number of samples (e.g., > 30%) with
SR above a certain threshold (once per three seconds in our
experiment). In this way, we avoid suspending those only
occasionally active in the background: for example, when the
app receives a GCM message. Of course, these processes
will continue to be monitored within the Ward mode, and
be stopped whenever they increase their SR to a dangerous
level. Also, for the apps with perceptible background activities
like media players, Guardian ﬁrst pauses such activities (e.g.,
music playing) and then stops the apps only if they are still
active in one minute. Another piece of information leveraged
by Guardian is kernel time stime. Most side-channel attacks
need to continuously make system calls such as read from proc
ﬁles, which raises the usage of the attack app’s kernel time.
Therefore, for the app that makes few calls, even when its SR
is above the threshold, Guardian refrains from closing it as
long as its stime goes below what is needed for a successful
attack. A prominent example is the Amazon Shop app: one
of its threads is scheduled at least twice per second; however,
during its operation in the background (observed in one minute),
we did not see any use of its kernel time.
Behavior change. Guardian is designed to identify the sus-
picious apps (e.g., based upon their SRs) and close them
proactively, before entering the Ward mode. In response to
this strategy, a malicious app may deliberately keep a low
proﬁle before the principal shows up in the foreground, and
then act aggressively afterwards. The same approach was shown
to be effective in keeping attack apps stealthy, according to the
prior research [1], [20]. A distinct feature of this strategy is