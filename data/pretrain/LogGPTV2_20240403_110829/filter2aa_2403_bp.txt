 fldl 0x4(%esp) 
 76    0x080484a4 : 
 fldl 0xc(%esp) 
 77    0x080484a8 : 
 fxch %st(1) 
 78 => 0x080484aa : 
 fucomi %st(1),%st 
 79    0x080484ac : 
 fcmovbe %st(1),%st 
 80    0x080484ae : 
 fstp %st(1) 
 81    0x080484b0 : 
 ret 
 82 End of assembler dump. 
 83 (gdb) ni 
 84 0x080484ac in d_max () 
 85 (gdb) info registers 
 86 eax 
   0x1 
 1 
 87 ecx 
   0xbffff1c4  -1073745468 
 88 edx  
   0x8048340  
134513472 
 89 ebx  
   0xb7fbf000  -1208225792 
 90 esp  
   0xbffff10c  0xbffff10c 
 91 ebp 
   0xbffff128 
0xbffff128 
 92 esi 
   0x0  
 0 
 93 edi  
   0x0 
 0 
 94 eip  
   0x80484ac  
0x80484ac  
 95 eflags    
   0x203   [ CF IF ] 
 96 cs  
   0x73  
 115 
 97 ss  
   0x7b 
 123 
 98 ds  
   0x7b 
 123 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 17 章  FPU 
215 
 99 es  
   0x7b 
 123 
100 fs 
   0x0 
 0 
101 gs 
   0x33 
 51 
102 (gdb) ni 
103 0x080484ae in d_max () 
104 (gdb) info float 
105   R7: Valid  0x4000d999999999999800 +3.399999999999999911 
106 =>R6: Valid  0x4000d999999999999800 +3.399999999999999911 
107   R5: Empty  0x00000000000000000000 
108   R4: Empty  0x00000000000000000000 
109   R3: Empty  0x00000000000000000000 
110   R2: Empty  0x00000000000000000000 
111   R1: Empty  0x00000000000000000000 
112   R0: Empty  0x00000000000000000000 
113 
114 Status Word:  
    0x3000 
115   
TOP: 6 
116 Control Word: 
    0x037f IM DM ZM OM UM PM 
117   
PC: Extended Precision (64-bits) 
118   
RC: Round to nearest 
119 Tag Word: 
    0x0fff 
120 Instruction Pointer: 0x73:0x080484ac 
121 Operand Pointer:     0x7b:0xbffff118 
122 Opcode:                 0x0000 
123 (gdb) disas $eip 
124 Dump of assembler code for function d_max: 
125    0x080484a0 : 
 fldl 0x4(%esp) 
126    0x080484a4 : 
 fldl 0xc(%esp) 
127    0x080484a8 : 
 fxch %st(1) 
128    0x080484aa : 
 fucomi %st(1),%st 
129    0x080484ac : 
 fcmovbe %st(1),%st 
130 => 0x080484ae : 
 fstp %st(1) 
131 0x080484b0 :  
 ret 
132 End of assembler dump. 
133 (gdb) ni 
134 0x080484b0 in d_max () 
135 (gdb) info float 
136 =>R7: Valid   0x4000d999999999999800 +3.399999999999999911 
137   R6: Empty   0x4000d999999999999800 
138   R5: Empty   0x00000000000000000000 
139   R4: Empty   0x00000000000000000000 
140   R3: Empty   0x00000000000000000000 
141   R2: Empty   0x00000000000000000000 
142   R1: Empty   0x00000000000000000000 
143   R0: Empty   0x00000000000000000000 
144 
145 Status Word:  
    0x3800 
146   
TOP: 7 
147 Control Word:  
    0x037f IM DM ZM OM UM PM 
148   
      PC: Extended Precision (64-bits) 
149   
      RC: Round to nearest 
150 Tag Word: 
    0x3fff 
151 Instruction Pointer: 0x73:0x080484ae 
152 Operand Pointer:     0x7b:0xbffff118 
153 Opcode:  
    0x0000 
154 (gdb) quit 
155 A debugging session is active. 
156 
157   
 Inferior 1 [process 30194] will be killed. 
158 
159 Quit anyway? (y or n) y 
160 dennis@ubuntuvm:~/polygon$ 
使用“ni”指令可以执行头两条 FLD 指令。 
再使用第 33 行的指令检查 FPU 寄存器的状态。 
前文（17.5.1 节）介绍过，FPU 寄存器属于循环缓冲区的逻辑构造，它实际上不是标准的栈结构。所以 GDB
异步社区会员 dearfuture(15918834820) 专享 尊重版权
216 
逆向工程权威指南（上册） 
不会把寄存器名称显示为助记符“ST(x)”，而是显示出 FPU 寄存器的内部名称，Rx。第 35 行所示的箭头表示
该行的寄存器是当前的栈顶。您可从第 44 行的“Status Word/状态字”里找到栈顶寄存器的编号。本例中栈顶状
态字为 6，所以栈顶是 6 号内部寄存器。 
在第 54 行处，FXCH 指令交换了变量 a 和变量 b 的数值。 
在执行过第 83 行的 FUCOMI 指令后，我们可在第 95 行看到 CF 为 1。 
第 104 行，FCMOVBE 指令复制变量 b 的值。 
第 136 行的 FSTP 指令会调整栈顶，也会弹出一个值。而后 TOP 的值变为 7，FPU 栈指针指向第 7 寄存器。 
17.7.2 ARM 
Optimizing Xcode 4.6.3 (LLVM) (ARM mode) 
指令清单 17.16  Optimizing Xcode 4.6.3 (LLVM) (ARM mode) 
VMOV  
D16, R2, R3 ; b 
VMOV  
D17, R0, R1 ; a 
VCMPE.F64  
D17, D16 
VMRS  
APSR_nzcv, FPSCR 
VMOVGT.F64  
D16, D17 ; copy "a" to D16 
VMOV  
R0, R1, D16 
BX 
LR 
这段程序的代码很简短。函数把输入变量存储到 D17、D16 寄存器之后，使用 VCMPE 指令比较这两个变量
的值。与x86 处理器相仿，ARM 处理器也有自己的状态寄存器和标识寄存器、其协作处理器也存在相关的FPSCR
①。 
虽然 ARM 模式的指令集存在条件转移指令，但是它的条件转移指令都不能直接访问协作处理器的状
态寄存器。这个特点和 x86 系统相同。所以，ARM 平台也有专门的指令把协作处理器的 4 个标识位（N、
Z、C、V）复制到通用状态寄存器的 ASPR 寄存器里，即 VMRS 指令。 
VMOVGT 是 FPU 上的 MOVGT 指令，在操作数大于另一个操作数时进行赋值操作。这个指令的后缀
GT 代表“Greater Than”。 
如果触发了 VMOVGT 指令，则会把 D17 里变量 a 的值复制到 D16 寄存器里。 
否则，D16 寄存器将会保持原来的变量 a 的值。 
倒数第二条指令 VMOV 的作用是制备返回值，它把 D16 寄存器里 64 位的值拆分为 1 对 32 的值，并
分别存储于通用寄存器 R0 和 R1 里。 
Optimizing Xcode 4.6.3 (LLVM) (Thumb-2 mode) 
使用 Xcode 4.6.3（开启优化选项）、以 Thumb-2 模式编译上述程序可得到如下所示的指令。 
指令清单 17.17  Optimizing Xcode 4.6.3 (LLVM) (Thumb-2 mode) 
VMOV  
D16, R2, R3 ; b 
VMOV  
D17, R0, R1 ; a 
VCMPE.F64  
D17, D16 
VMRS  
APSR_nzcv, FPSCR 
IT GT 
VMOVGT.F64  
D16, D17 
VMOV  
R0, R1, D16 
BX 
LR 
Thumb-2 模式的代码和 ARM 模式的程序大体相同。确实，很多 ARM 模式的指令都存在对应的依相
应条件才会执行的衍生指令。 
但是 Thumb 模式没有这种衍生的执行条件指令。Thumb 模式的 opcode 只有 16 位。这个空间存储不下
条件判断表达式所需的那 4 位的存储空间。 
① ARM 平台的 Floating-Point Status and Control Register。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 17 章  FPU 
217 
而扩充后的 Thumb-2 指令集则没有上述缺陷，它们可以封装 Thumb 模式欠缺的条件判断表达式。 
在 IDA 显示的汇编指令清单里，我们可以看到 Thumb-2 模式的代码里也出现 VMOVGT 指令。 
此处的实际指令是 VMOV 指令，IDA 为其添加了－GT 后缀。为了直观地体现前面那条指令“IT GT”
的条件判断作用，IDA 在此使用了伪指令。 
IT 指令与所谓的 if－then 语句存在明确的对应关系。在 IT 指令之后的指令（最多 4 条指令），相当于
在 then 语句模块里的一组条件运行指令。在本例中“IT GT”的涵义是：如果前面比较的数值，第一个值
“大于/Greater Than”第二个值，则执行后续模块的 1 条指令。 
我们来看下“愤怒的小鸟（iOS 版）”里的代码片段。 
指令清单 17.18  Angry Birds Classic 
... 
ITE NE 
VMOVNE  
R2, R3, D16 
VMOVEQ  
R2, R3, D17 
BLX   
_objc_msgSend ; not prefixed 
... 
“ITE”是“if-then-else”的缩写。这个指令后有两条指令：第一条就是 then 模块，第二条就是 else 模块。 
我们再从“愤怒的小鸟”里找段更为复杂的代码。 
指令清单 17.19  Angry Birds Classic 
... 
ITTTT EQ 
MOVEQ            R0, R4 
ADDEQ            SP, SP, #0x20 
POPEQ.W          {R8,R10} 
POPEQ            {R4-R7,PC} 
BLX              
___stack_chk_fail ; not prefixed 
... 
ITTTT 里有 4 个 T，代表 then 语句有 4 条指令。根据这个信息，IDA 给后续的 4 条指令添加了 EQ 伪后缀。 
确实有 ITEEE EQ 这种形式的指令，代表“if-then-else-else-else-else”。在解析到这条指令后，IDA 会给其后的
5 条指令依次添加下述后缀： 
-EQ  
-NE  
-NE 
-NE 
我们继续分析“愤怒的小鸟”里的其他程序片段。 
指令清单 17.20  Angry Birds Classic 
... 
CMP.W   
R0, #0xFFFFFFFF 
ITTE LE 
SUBLE.W  
R10, R0, #1 
NEGLE   
R0, R0 
MOVGT   
R10, R0 
MOVS   
R6, #0  
; not prefixed 
CBZ   
R0, loc_1E7E32 ; not prefixed 
... 
ITTELE 表示如果“小于或等于/LE(Less or Equal)”的条件成立，则执行 then 模块的 2 条指令，否则
（“大于”情况下）执行 else 模块的第 3 条指令。 
虽然 I-T-E 类型的指令可以有多个 T 和多个 E，但是编译器还没有聪明到按需分配所有排列组合的程序。以“愤
怒的小鸟”（iOS 经典版）为例，那个时候的编译器只能分配“IT,ITE,ITT,ITTE,ITTT,ITTTT”这几种判断语句。调
查 IDA 生成的汇编指令清单就可以验证这点。在生成汇编指令清单文件的时候，启用相关选项 IDA 同步输出每条
异步社区会员 dearfuture(15918834820) 专享 尊重版权
218 
逆向工程权威指南（上册） 
指令的 4 字节 opcode。因为 IT 指令的高 16 位的 opcode 是 0xBF，所以我们应当使用的 Linux 分析指令是： 
cat AngryBirdsClassic.lst | grep " BF" | grep "IT" > results.lst 
另外，如果您要使用 ARM 的汇编语言手工编写 Thumb-2 模式的应用程序，那么只要您在指令后面添
加相应的条件判断后缀，编译器就会自动添加相应的 IT 指令验证相应标志位。 
Non-optimizing Xcode 4.6.3 (LLVM) (ARM mode) 
指令清单 17.21  Non-optimizing Xcode 4.6.3 (LLVM) (ARM mode) 
b  
= -0x20  
a  
= -0x18  
val_to_return  
= -0x10  
saved_R7 
= -4 
STR           
R7, [SP,#saved_R7]! 
MOV              R7, SP 
SUB              SP, SP, #0x1C 
BIC              SP, SP, #7 
VMOV             D16, R2, R3 
VMOV             D17, R0, R1 
VSTR             D17, [SP,#0x20+a] 
VSTR             D16, [SP,#0x20+b] 
VLDR             D16, [SP,#0x20+a] 
VLDR             D17, [SP,#0x20+b] 
VCMPE.F64        D16, D17 
VMRS             APSR_nzcv, FPSCR 
BLE   
loc_2E08 
VLDR             D16, [SP,#0x20+a] 
VSTR             D16, [SP,#0x20+val_to_return] 
B                loc_2E10 
loc_2E08 
VLDR             D16, [SP,#0x20+b] 
VSTR             D16, [SP,#0x20+val_to_return] 
loc_2E10 
VLDR             D16, [SP,#0x20+val_to_return] 
VMOV             R0, R1, D16 
MOV              SP, R7 
LDR              R7, [SP+0x20+b],#4 
BX               LR 
这段程序使用了栈结构来处理变量 a 和变量 b，所以操作略微烦琐。其他方面很好理解。 
Optimizing Keil 6/2013 (Thumb mode) 
使用 Keil 6/2013（开启优化选项）、以 Thumb 模式编译上述程序可得到如下所示的指令。 