title:Back To The Epilogue: Evading Control Flow Guard via Unaligned Targets
author:Andrea Biondo and
Mauro Conti and
Daniele Lain
Back To The Epilogue:
Evading Control Flow Guard via Unaligned Targets
Andrea Biondo
University of Padua, Italy
PI:EMAIL
Mauro Conti
University of Padua, Italy
PI:EMAIL
Daniele Lain
University of Padua, Italy
PI:EMAIL
Abstract—Attackers use memory corruption vulnerabilities
to compromise systems by hijacking control ﬂow towards
attacker-controlled code. Over time, researchers proposed sev-
eral countermeasures, such as Address Space Layout Random-
ization, Write XOR Execute and Control Flow Integrity (CFI).
CFI is one of the most promising solutions, enforcing control
ﬂow to adhere to statically determined valid execution paths.
To trade with the execution and storage overhead, practical CFI
implementations enforce coarser version of CFI. One of the most
widely deployed implementations of CFI is the one proposed by
Microsoft, named Control Flow Guard (CFG). CFG is currently in
place on all Windows operating systems, from Windows 8.1 to
the most recent update of Windows 10 (at the time of writing),
accounting for more than 500 million machines.
in particular,
In this paper, we show a signiﬁcant design vulnerability in
Windows CFG and propose a speciﬁc attack to exploit it: the
Back to The Epilogue (BATE) attack. We show that with BATE
an attacker can completely evade from CFG and transfer control
to any location, thus obtaining arbitrary code execution. BATE
leverages the tradeoff of CFG between precision, performance,
and backwards compatibility;
the latter one
motivates 16-byte address granularity in some circumstances.
This vulnerability, inherent to the CFG design, allows us to
call portions of code (gadgets) that should not be allowed,
and that we can chain together to escape CFG. These gadgets
are very common: we ran a thorough evaluation of Windows
system libraries, and found many high value targets – exploitable
gadgets in code loaded by almost all the applications on 32-bit
systems and by web browsers on 64-bit. We also demonstrate the
real-world feasibility of our attack by using it to build a remote
code execution exploit against the Microsoft Edge web browser
running on 64-bit Windows 10. Finally, we discuss possible
countermeasures to BATE.
I.
INTRODUCTION
Memory corruption vulnerabilities are a prime tool for
attackers [40]. The typical course of an attack to exploit such
vulnerabilities involves hijacking the program’s control ﬂow
to execute arbitrary code in the application’s context. There
exist many different countermeasures to mitigate the impact
of such attacks. One of the most widely implemented tech-
niques is Address Space Layout Randomization (ASLR) [29],
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2018 
18-21  February  2018,  San  Diego,  CA,  USA
ISBN  1-891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23318
www.ndss-symposium.org
which aims at preventing the attacker from gaining cru-
cial
information about the program’s memory structure.
However, researchers showed that ASLR is vulnerable to
application-speciﬁc information leaks [35] along with OS-
based [6] and hardware-based [15], [18] side-channels. An-
other popular mitigation is Write XOR Execute (W⊕X), also
called Data Execution Prevention (DEP) [26] in Windows.
W⊕X aims at thwarting code injection and modiﬁcation
by enforcing that every page of memory may be either
writable or executable, but not both. However, W⊕X can
be bypassed by various code reuse techniques [5], [34],
[36]. Indeed, albeit these mitigations can make exploiting
memory corruption signiﬁcantly harder, they do not stop
modern multi-stage attacks.
A promising mitigation mechanism is Control Flow In-
tegrity (CFI) [4], which stems from the idea of effectively
restricting the program’s control ﬂow to only valid paths
that the programmer expected. This stops the attacker
from diverting execution to unintended code paths. Ideal
CFI requires precise and time-consuming program analysis,
based on pointer analysis that is undecidable in the general
case [30], and can have signiﬁcant performance overheads.
For this reason, in the the last decade, researchers mostly
put effort in building CFI implementations that balance
security, performance and practicality [7]. Practical CFI
implementations often adopt an approximation of ideal CFI:
they only enforce a superset of the actual valid execution
paths. Such approximations need careful balancing, as the
tradeoff is usually between security guarantees and cost
(both in terms of memory and computational power).
Indeed, while approximation makes a relaxed version of CFI
affordable for real-world applications and raises the bar for
exploitation, it still leaves enough leeway for attacks that
can leverage this imprecision to subvert control ﬂow [13],
[17], [34], thus obtaining arbitrary code execution. Also,
implementations can themselves be vulnerable to memory
corruption [10]. Practical CFI implementations that are
widely deployed in the real world are, for example, Indirect
Function-Call Checks [43] in LLVM and Clang, Virtual Table
Veriﬁcation [43] in GCC, and Control Flow Guard (CFG) [23]
in Microsoft Visual C++. Microsoft CFG is one of the most
popular implementations: it was introduced in Windows
8.1 for applications compiled with Microsoft Visual C++.
At the time of writing,
it is deployed on at least 500
million computers running Windows 8.1 through the latest
Windows 10 versions, and is considered to be an important
stage of defense against memory corruption attacks.
In this paper, we show a serious vulnerability caused
by a signiﬁcant interaction between a design assumption
of Windows CFG and the Windows libraries. CFG assumes
functions that can be target of indirect calls (e.g., through
a virtual table) will be aligned to 16 bytes. That is, the code
of such functions should always start at a 16-byte aligned
boundary in memory. However, the compiler does not
always enforce the correct alignment. When this happens,
the approximated nature of CFG allows us to reach portions
of code (gadgets) that are not intended to be marked as
valid targets. Among these possible gadgets, we deﬁne a
particular set of pop-ret (PR) gadgets, and a novel class of
gadgets that we call spiller (S) gadgets. We exploit PR gadgets
to completely evade CFI and employ traditional non CFI-
aware exploit techniques. PR gadgets require a limited form
of stack control, which can be easily obtained on 32-bit
systems via controlled arguments. S gadgets can be used to
regain this ease of control on 64-bit, as exploitation on this
platform is more challenging than on 32-bit. We propose a
novel attack that uses these gadgets to evade CFG: the Back
To The Epilogue (BATE) attack1.
Previous attacks on CFG relied on calling (now dis-
abled) sensitive APIs [9], on stack control [32], [33] or
on application-speciﬁc issues [16], [39], [50]. BATE only
requires control of an argument to a corrupted indirect call.
Moreover, we only require PR (and possibly S) gadgets to
be present in a single library loaded in the target process.
We show that this is often the case: we ran a complete
assessment of gadget availability in system libraries. On 32-
bit we found that PR gadgets are widespread: in particular,
we note their presence in C/C++ runtime libraries, which are
often loaded as they an essential part of the environment
compiled C/C++ code runs in. On 64-bit systems, the num-
ber of available gadgets is more limited; however, they are in
libraries that are appealing to attackers, such as the legacy
JavaScript engine and a media codec. We found PR gadgets
in another very popular software: 64-bit Microsoft Ofﬁce
2016. We found that S gadgets are similarly widespread.
BATE has real-world capabilities. To demonstrate this,
we built a remote code execution exploit against Microsoft
Edge on 64-bit Windows 10 with ASLR, DEP and CFG
mitigations. At a high level, the exploit employs two vulner-
abilities in the Chakra JavaScript engine [22]: an information
leak [2] and a type confusion [3]. The information leak is
used to bypass ASLR, which is a necessary stepping stone
for further exploitation. The type confusion allows us to
corrupt C++ virtual tables and launch the BATE attack.
BATE bypasses CFG and hijacks the program’s control ﬂow
to arbitrary locations. While this is sufﬁcient to prove that
our attack works, we go through with the exploit to show
that code execution is possible. To bypass DEP, we start
with stack pivoting [11]: we redirect the stack pointer to a
fake stack that contains a ﬁrst-stage ROP chain. This ROP
payload makes a second-stage shellcode executable and
transfers control to it, achieving our goal.
1We responsibly disclosed the BATE attack to Microsoft, who acknowl-
edged it and is working on a countermeasure. As part of a coordinated
disclosure roadmap, we obtained permission to submit this work.
2
Contributions. The contributions of this paper are the
following:
implementation:
• We identify a design weakness in Control Flow
Guard, Microsoft’s CFI
the as-
sumption that targets are always 16-byte aligned.
This allows invalid targets to become valid, when
a valid target function is not 16-byte aligned, caus-
ing a portion of code of the previous function to
become a valid target as well.
• We show a practical way of exploiting this vulnera-
bility: the Back To The Epilogue (BATE) attack. BATE
leverages two sets of gadgets: pop-ret (PR) gadgets
that require a limited form of stack control, and
spiller (S) gadgets that help us use PR gadgets on 64-
bit systems. PR gadgets, in particular, can be found
in function epilogues, can be unintended valid tar-
gets thanks to the aforementioned vulnerability, and
can be used to completely bypass CFG.
• We extensively and thoroughly analyze system li-
braries of recent builds of Windows 10, and of a
very popular software: Microsoft Ofﬁce 2016. We
perform pattern matching and symbolic execution,
and ﬁnd numerous occurrences of PR and S gadgets
(for example in C/C++ runtime libraries, JavaScript
engines, media codecs, and libraries used by the
Microsoft Ofﬁce suite). This proves that BATE is a
real threat: its gadgets are contained in libraries that
are commonly loaded by third-party software (such
as web browsers), and therefore likely available to
attackers.
• We further prove the real-world feasibility of this
attack by using our PR and S gadgets in a remote
exploit against Microsoft Edge, on 64-bit Windows
10 with all security features enabled, that allows us
to execute arbitrary code on the victim’s machine.
• We discuss possible countermeasures to protect
CFG from BATE and propose a short-term solution
that stops BATE without redesigning CFG.
Organization. This paper is organized as follows: we ﬁrst
report related work in Section II. In Section III we give
general background on Control Flow Integrity and describe
the internals and weaknesses of Control Flow Guard. We
discuss our considered threat model in Section IV. We detail
our attack in Section V, and assess its impact in Section VI.
We demonstrate a practical real-world exploit in Section VII.
We discuss our attack and outline possible countermeasures
in Section VIII. Section IX concludes the paper.
II. RELATED WORK
Here, we present related work. First, we cover general
CFI techniques and vulnerabilities, along with some imple-
mentation examples. Then, we discuss speciﬁc works on
Control Flow Guard (CFG), Microsoft’s CFI implementation,
and its weaknesses.
A. Control Flow Integrity
Control Flow Integrity (CFI) is a security policy that en-
forces adherence between a program’s statically determined
control ﬂow graph and its runtime execution path. It aims at
preventing attackers from diverting execution to paths that
were not intended by the programmer. Forward-edge CFI
protects forward branches, such as indirect calls through
function pointers or virtual tables, which could be hijacked
by an attacker. Backward-edge CFI protects from corruption
of return addresses, for example via a shadow stack [12].
One of the main characterizing factors of a CFI approach is
its granularity. Fine-grained CFI aims at restricting control
ﬂow to the exact program’s control ﬂow graph, keeping a
separate set of allowed destinations for each indirect call
site. However, the pointer analysis required for ideal CFI
is undecidable [30], so a certain level of approximation is
inevitable. Coarse-grained CFI is more relaxed and enforces
a global set of valid targets.
The seminal work on CFI [4] proposes an approach
based on labeling indirect call destinations. Indirect calls are
instrumented to check whether the destination label is the
expected one, to ensure that an edge for that transfer exists
in the control ﬂow graph. While they suggest that more label
classes can make exploitation harder, their implementation
only uses a single class and is therefore coarse-grained.
Backward-edge protection is achieved via a shadow stack,
whose integrity is guaranteed by CFI.
Researchers have proposed multiple different ap-
proaches, with varying granularites and performance char-
acteristics [7]. For example, CCFIR [49] works directly on bi-
naries and achieves coarse-grained, forward- and backward-
edge CFI by forcing all returns and indirect calls to go
through aligned stubs in a springboard section. CCFIR
is more precise than the original CFI, since it separates
backward edges in two equivalence classes. Two open-
source compilers, GCC and LLVM, also offer forward-edge
CFI implementations [43]. GCC’s Virtual-Table Veriﬁcation
(VTV) protects from virtual table hijacking attacks [31] by
checking that the virtual table belongs to the class hierarchy
for the invocation object. LLVM’s Indirect Function-Call
Checks (IFCC) protects all indirect calls by redirecting them
through jump tables. IFCC can support many levels of
precision. The authors focus on two: all functions allowed
for any call, or grouped by their number of arguments.
Particularly interesting to our paper is MIP [28], another
coarse-grained implementation, as the data structure is
close to Microsoft CFG. It deﬁnes a mapping between
memory addresses and bit positions in a bitmap and divides
the code into chunks, only the beginning of which are
valid targets. Bitmap bits corresponding to the beginning
of chunks are set, while others are cleared. Indirect calls
and returns are instrumented to extract the bit for the
target address from the bitmap and check whether it is the
beginning of a chunk.
Based on the observation that points-to analysis always
has some level of approximation, Evans et al. show a tech-
nique to exploit the imprecision of scalable analyses [14].
Coarse-grained CFI implementations suffer from attacks
that leverage their big equivalence classes. While they limit
the scope of code reuse attacks, since most code locations
are not valid targets, they are not immune. Indeed, it is still
possible to build realistic and Turing-complete gadget sets
under CFI policies [13], [17]. A powerful attack is COOP [34]:
it derives gadgets from C++ virtual methods, which are
valid CFI targets, and chains them by exploiting virtual
table hijacking. However, this attack leads to a restricted
gadget set, which makes it more difﬁcult to write payloads.
BATE achieves full
instruction pointer control, allowing
an attacker to follow up with simpler exploit techniques.
Additionally, Conti et al. [10] demonstrate weaknesses in
multiple CFI implementations when the attacker is in con-
trol of the stack.
B. Control Flow Guard.
Microsoft Control Flow Guard (CFG) [23] is a forward-
edge, coarse-grained CFI
implementation based on a
bitmap, similar to the approach proposed by MIP [28]. CFG
internals are not ofﬁcially documented, but third parties
reverse-engineered them [27], [41], [46]. We describe how
CFG works in more detail in Section III-B. Instead, we now
report past exploits and bypasses to CFG, grouped by the
weakness they exploited.
Some bypasses rely on ﬁnding code that is not protected
by CFG, as CFG allows all branches to modules that are
compiled without CFG support [27]. Thus, code from those
modules can be reused. As more and more modules are
compiled with CFG, this becomes less of a problem.
Another source of vulnerabilities is Just-In-Time (JIT)
compiled code. By default, dynamic allocations of exe-
cutable memory are not protected by CFG, allowing code
reuse attacks such as JIT spraying [38], [47]. To avoid this
problem, the implementation has to take care of prop-
erly altering the bitmap to mark valid targets in dynamic
code. Moreover, JIT compilers have to replicate the CFG
instrumentation in the generated code to protect outgoing
branches. For example, Falcón [16] shows unprotected in-
direct calls from the Flash JIT compiler.
Due to its coarse granularity, CFG does not distinguish
between call sites, and keeps a global set of allowed targets.
An attacker can exploit this by calling valid target functions,
that are however unintended for that particular code path.
For example, certain Windows APIs change the execution
context and can be abused to hijack the control ﬂow [9].
However, the introduction of sensitive APIs [20] has sensi-
bly reduced the number of allowed dangerous APIs, thus
decreasing the attack surface for such bypasses.
CFG also relies on certain assumptions about memory
protection. Checks are performed by calling CFG functions
provided by the operating system via function pointers.
Those pointers are ﬁlled in by the kernel and reside in
a read-only memory area, so it should be impossible to
corrupt them. However, some application-level bugs can
be used to make memory writable, allowing an attacker
to overwrite the pointers [50]. BATE is more general as
it does not target a speciﬁc bug. Moreover, researchers
found that this area can actually be writable in some
modules [39]. Furthermore, CFG only protects forward-edge
transfers. Since it does not protect the return address on the
stack, an attacker can overwrite it to gain ﬂow control [33].
Finally, Windows stores pointers to exception handling
routines on the stack. Branches to those functions are not
3
protected by CFG, so an attacker can hijack them and
then cause an exception to transfer control to arbitrary