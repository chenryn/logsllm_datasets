title:Scalable Web Content Attestation
author:Thomas Moyer and
Kevin R. B. Butler and
Joshua Schiffman and
Patrick D. McDaniel and
Trent Jaeger
2009 Annual Computer Security Applications Conference
Scalable Web Content Attestation
Thomas Moyer, Kevin Butler, Joshua Schiffman, Patrick McDaniel, and Trent Jaeger
Systems and Internet Infrastructure Security Laboratory
Computer Science and Engineering Department, Pennsylvania State University
University Park, PA 16802
{tmmoyer,butler,jschiffm,mcdaniel,tjaeger}@cse.psu.edu
Abstract—The web is a primary means of information sharing
for most organizations and people. Currently, a recipient of web
content knows nothing about the environment in which that
information was generated other than the speciﬁc server from
whence it came (and even that information can be unreliable).
In this paper, we develop and evaluate the Spork system that
uses the Trusted Platform Module (TPM) to tie the web server
integrity state to the web content delivered to browsers, thus
allowing a client to verify that the origin of the content was
functioning properly when the received content was generated
and/or delivered. We discuss the design and implementation of the
Spork service and its browser-side Firefox validation extension. In
particular, we explore the challenges and solutions of scaling the
delivery of mixed static and dynamic content using exceptionally
slow TPM hardware. We perform an in-depth empirical analysis
of the Spork system within Apache web servers. This analysis
shows Spork can deliver nearly 8,000 static or over 7,000 dynamic
integrity-measured web objects per-second. More broadly, we
identify how TPM-based content web services can scale with
manageable overheads and deliver integrity-measured content
with manageable overhead.
Keywords-attestation; integrity measurement; scalability; web
content
I. INTRODUCTION
The web has changed the way users and enterprises share
information. Where once we shared documents via physical
mail or through specialized applications,
the web enables
sharing content through open protocols. Web server validation,
if done at all,
is performed via SSL certiﬁcates [1]. The
certiﬁcate indicates that the server (really the private key) has
been vouched for by an authority, e.g., Verisign.
What is missing is a mechanism that offers security guaran-
tees on the content itself. Approaches like per-document XML
signatures [2] provide document authentication, but only work
where the data is static and the signing authority is separate
from the web server, i.e., the user must either engage external
signing authorities or trust the web server to create/handle the
content correctly. Ideally, content receivers desire to know a)
the origin of content and b) that the origin was functioning
properly when the content was generated and delivered. This
latter requirement asks for proof of the server integrity state at
the time of use.
Consider an online banking application. Users of the system
provide credentials, account information, and other sensitive
data to the web server as part of its use. For this reason,
users need to know more than the identity of the server it
is communicating with (as provided by SSL). The users desire
some assurance that the server has not been compromised.
Similar requirements exist for any web application using
sensitive data over untrusted networks, e.g., online auction
systems, e-voting systems, online medical applications. Many
of these applications must support thousands or millions of
clients. Thus, an implicit requirement largely unaddressed by
current integrity management approaches is that they scale to
large communities.
Augmenting these applications with content integrity infor-
mation will provide a means to detect and prevent real-world
attacks. For example, if a server is compromised with malware,
like the Mood-NT kernel rootkit [3], the proof of the system
integrity will reveal the presence of the malicious software to
the browser. Further, when bound to the content, the integrity
proof exposes “in-ﬂight” page changes [4], including advertise-
ment injection, advertisement removal, and URL replacement,
independent of whether the man-in-the-middle is present on
the server, network, or web cache.
In there seminal paper on integrity measurement systems,
Marchesini et al. speak directly to the requirements of building
and deploying secure web systems [5]. They state, “[t]he
promise of responsibly maintaining a secure site requires that
the executable suite, considered as a whole, be dynamic”.
Here they highlight the need for more than simple boot time
integrity (such as that provided by stored-sealed conﬁgurations
and systems), but mandate the integrity measurement must be
ongoing. They further expand to state any system providing
secure content must provide a binding between this evolving
system state and the content being served.
The Trusted Platform Module (TPM) [6] provides hardware
support that enables remote parties (such as content-receiving
browsers) to securely identify the software running on the host,
i.e., to measure the integrity state of the system by identifying
its software. Along with the TPM, some form of integrity
measurement system, such as the Linux Integrity Measurement
Architecture [7], is needed to create full attestations of the
running system state. The mechanism used by the TPM to
provide integrity state is the quote operation [6]. Each quote
provides an iterative hash of the code loaded as recorded by
the tamper-resistant hardware platform conﬁguration registers
(PCRs). The TPM signs the PCR state and a 20-byte challenge
using a public key associated with the host. The challenge
provides freshness of the quote (the remote party offers a
challenge as a nonce). We observe that the quote challenge
can be used for other purposes such as binding data to the
1063-9527/09 $26.00 © 2009 IEEE
DOI 10.1109/ACSAC.2009.19
95
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:03 UTC from IEEE Xplore.  Restrictions apply. 
integrity state of the server that created or delivered it.
In this paper, we explore the requirements and design of the
Spork1 web server service that supports scalable delivery of
web content from integrity-measured web servers. Web docu-
ments are cryptographically bound to a TPM-based integrity
state proof of the server software. The proof is generated from
a cryptographic hash of the content, a timestamp retrieved from
an integrity-veriﬁed time service, and other meta-information.
Client browsers (in practice, Firefox extensions) retrieve proofs
by acquiring a document indicated in the target page’s meta-
information and validate them using the appropriate authority
keys.
A naive implementation of this approach would not work
well in practice. The cost of performing a TPM quote per
request is extraordinarily high–on the order of 900 millisec-
onds. We address this limitation by using cryptographic dic-
tionaries to efﬁciently generate content proofs. Cryptographic
dictionaries requiring only a single integrity quote are created
periodically. Succinct proofs are extracted from the dictionary
and delivered to requesting clients. Because such dictionaries
can be created frequently (in under a second), proofs for
both dynamic and static content can be created efﬁciently and
delivered to clients.
A detailed analysis of the performance of the Spork system
illustrates the costs associated with the delivery of proofs for
static and dynamic web pages. Here, we explore optimiza-
tions that reduce the “bytes-on-the-wire” and computational
overheads. Our experiments show that the Spork system can
deliver static documents with integrity proofs with manageable
overhead, where the throughput of an integrity measured web
server reaches nearly 8,000 web objects per-second—within
17% of an unmodiﬁed Apache server’s throughput. Moreover,
we show empirically that the same content can be delivered
with as little as 2.7 milliseconds latency. Because dynamic
documents must be bound to the current state of the system at
the time it is requested (they cannot be pre-computed), their
delivery is limited by the TPM. We introduce optimizations to
amortize these costs across requests and over embedded objects
within the same web page. Further experiments demonstrate
that a single Spork-enabled web server serving dynamic pages
can sustain over 7,000 web objects per-second with 1000 msec
latency (most of which is attributable to the TPM).
An interesting aspect of Spork content proofs is that they
can be used asynchronously. Proofs acquired from the web
server can be cached with the content itself, e.g. in a Squid
cache [8]. Because each proof includes a timestamp acquired
from a globally accessible time service, the browser can make
a policy decision on whether the cached proof is stale or not.
If it is not, the content and proof can be used as if they were
obtained from the server. Otherwise, they can be discarded and
new ones acquired from the web server. Note also that such
policies can be transparently implemented by web proxies via
TTL policies.
1Not quite a web service, not quite a security service.
II. BACKGROUND
Content served over unsecured HTTP provides no indication
as to whether the server or the communication channel have
been compromised. If the content
is served over an SSL
connection, either directly or via a proxy [9], the security is
predicated on a certiﬁcate that vouches for the authenticity
of the web server. The guarantees are linked to the machine
rather to the content itself, thus leaving no method of knowing
whether the content itself has been manipulated, e.g., by a
rootkit or corrupt update.
Providing guarantees on a system’s state requires mea-
surement of
the system’s integrity. Many efforts for en-
suring integrity measurement exist, including Pioneer [10],
CASS Security Kernels [11], TrustedBox [12], Copilot [13],
and LKIM [14] among others. Secure processors such as
AEGIS [15] and the IBM 4758 [16] provide a secure execution
environment that can be used as a basis for deploying secure
services. As an example, we examine integrity management
using the Linux Integrity Measurement Architecture (IMA) [7],
and its extension the Policy Reduced Integrity Measurement
Architecture (PRIMA) [17], for attesting the state of the code
executed and running on a system, as IMA does not require
changes to programs and its only hardware requirement is the
presence of a commodity TPM, which are readily available on
desktop and server systems. In brief, the system is measured
by taking a SHA-1 hash over every pertinent executable ﬁle,
a process that begins at system startup, when the BIOS and
boot loader are measured. The measurement process continues
during the boot process to include the operating system kernel
and loaded modules, and upon boot includes all executed ap-
plications and supporting libraries. These hashes are collected
into a measurement list, which provides an ordered history of
system execution.
The measurement list is stored in kernel memory but to
prevent tampering, the aggregated hash value is stored on a
TPM, which provides protected registers known as Platform
Conﬁguration Registers (PCRs). These can only be modiﬁed
by either rebooting the system, which clears the PCR values
to 0, or by the extend function, which aggregates the current
content of the PCR with the hash of the executable to be in-
cluded, hashing these values together and storing the resulting
hash back in the PCR. The TPM provides reporting of PCR
values through the quote operation. To prevent replay of the
measurement, the requestor issues a 160-bit random nonce to
the attesting system, creating a challenge. The TPM has a
Storage Root Key stored inside it, which only it knows. It
uses this key to generate an Attestation Identity Key (AIK),
which comprises an RSA key pair, the public portion of which
(AIKpub) is available through a key management interface.
The TPM is bootstrapped by loading the private portion of the
AIK pair (AIKpriv) and performs the Quote function, where
it signs a message containing the values of one or more PCRs
and the nonce with AIKpriv. The attesting party can verify
the integrity of the message using AIKpub, and then every
element of the measurement list up to the value stored in the
PCR may be validated.
96
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:03 UTC from IEEE Xplore.  Restrictions apply. 
A. System Overview
An overview of the system architecture is shown in Figure 1.
The core elements of the system are a) a web server that
generates static or dynamic web content and provides clients
with content integrity proofs, b) a time server that supplies the
web server with an attestation of the current time, providing
bounds on when the web server’s attestations were generated,
and c) a web browser, to which we have added an extension
that veriﬁes the proofs received from the web server and can
directly query the time server over a secure connection to
independently verify its attestation. The system operates as
follows:
• A client requests a page from the web server, which
returns the content and a URL to the content attestation.
• The server hashes a TPM quote from the time server
concatenated with a cryptographic proof system similar to
an authenticated dictionary [25]. It uses the resulting hash
as a challenge to the TPM to generate a system attestation.
• The client acquires and validates attestations from the web
server and the time server, and computes the root of the
cryptographic proof system based on the proof received
from the server.
The rest of this section describes how content proofs are
generated and scheduled, and in the next section, we describe
in greater detail how each of the system components are
implemented and how they operate.
B. Content Proofs
Each document received by a client is tied to the integrity
state of the web server via its content proof. Ideally, we desire
a proof with the following semantics: the proof should state
a) that a particular page was served by a given web server, b)
that the web server had a veriﬁable integrity state (which can
be assessed for validity), and c) that the binding between the
page and integrity state occurred at a veriﬁably known time.
For ease of exposition, we begin with a simple proof and build
toward more semantically rich and efﬁcient constructions that
provide these properties.
First, let us introduce the notation used throughout. The
function h(d) denotes a cryptographic hash over some data
d, and concatenation of different data elements is denoted as |.
The quoting hosts are denoted Hw for the web server and HT S
for the time server. pcri denotes the integrity state of host i.
A TPM quote is denoted Quote(h, s, c), where h is the host
identity performing the quote, s is the PCR state, and c is the
quote challenge.2 The served pages are denoted pi, where each
i represents a unique page. ti is a time epoch returned from
a hardware clock on the time server. Lastly, described below,
CP Sr represents the root node of a cryptographic proof system
and P f(pi) is a succinct proof for page pi from that system.
Consider a simple content proof to be received by a client
from a server for a page pi, as follows:
2In practice, the quote mechanism uses attestation identity key (or simply
the signing key) to perform the quote. Thus, the key acts as a proxy for the
host. For the purposes of this section, we blur this distinction between the host
and the signing key.
97
Fig. 1. An overview of the system architecture for asynchronous attested
content. The time server provides an attested timestamp to the web server,
which uses this to provide integrity-measured content to the clients. The web
browser can directly verify the current time from the time server.
Measurements of the system detect deviations from known
good software. For example, the Random JavaScript Toolkit
is a rootkit that affects Linux-based Apache servers
[18]. It
contains a small web server that modiﬁes Apache’s output,