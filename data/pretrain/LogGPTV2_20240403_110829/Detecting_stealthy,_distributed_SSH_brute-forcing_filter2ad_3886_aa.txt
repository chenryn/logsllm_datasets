# Detecting Stealthy, Distributed SSH Brute-Forcing

**Authors:**
- Mobin Javed†
- Vern Paxson†(cid:2)

**Affiliations:**
- †University of California, Berkeley
- (cid:2)International Computer Science Institute

## Abstract
In this work, we propose a general approach for detecting distributed malicious activity where individual attack sources operate in a stealthy, low-profile manner. Our approach involves observing statistically significant changes in a parameter that summarizes aggregate activity, bracketing the distributed attack in time, and then identifying which sources present during that interval appear to have coordinated their activity. We apply this approach to the problem of detecting stealthy, distributed SSH brute-forcing activity. We show that the process of legitimate users failing to authenticate can be modeled using a beta-binomial distribution, enabling us to tune a detector that balances the expected level of false positives against time-to-detection. Using this detector, we study the prevalence of distributed brute-forcing in an extensive 8-year dataset from a site with several thousand SSH users, finding dozens of instances. Many of these attacks, some lasting months, would be difficult to detect individually. While some attacks reflect indiscriminate global probing, others target only the local site, and occasionally, some succeed.

## Categories and Subject Descriptors
K.6.5 [Computing Milieux]: MANAGEMENT OF COMPUTING AND INFORMATION SYSTEMS—Security and Protection

## Keywords
Scanning, SSH, Brute-forcing, Distributed

## 1. Introduction
A long-standing challenge in detecting malicious activity is identifying attacks spread across numerous sources, such that the individual activity of any given source remains modest and potentially unremarkable. This scenario arises when a detector uses a threshold to flag suspiciously high levels of activity, such as in scanning or DoS flooding. Attackers can evade such detection by distributing their activity across multiple sources, thinning out their activity to prevent any single source from exceeding the threshold. This makes the attack distributed and potentially stealthy, making it hard to detect based on individualized analysis.

In this work, we present a general strategy for detecting such stealthy activity, consisting of two basic steps:
1. Employ statistical change-point detection to identify times when a global property has shifted, indicating problematic activity in aggregate.
2. Determine the time range of this activity and identify which sources contributed to it within that interval.

We apply this approach to the problem of detecting distributed SSH brute-forcing, where attackers use multiple systems to try different username/password combinations against a site's SSH login servers. The threat of SSH brute-forcing is well-known, with any SSH server open to the Internet receiving constant probes. However, the extent of stealthy, slow-but-steady attempts has received little attention. Distinguishing between single energetic probes and stealthy distributed ones is significant: while the former can be easily detected and blocked, the latter poses a much more challenging detection problem. If each host in a distributed brute-forcing attack attempts logins at a low rate, distinguishing hostile activity from legitimate user errors becomes much more difficult.

Our goal is to provide an exemplar of our general strategy for detecting distributed, coordinated SSH brute-forcing attacks and to assess the prevalence of such attacks over years of data. In our two-step approach, we first identify attack epochs where we can statistically determine that SSH brute-forcing occurred. We use change-point detection based on a parameter summarizing network/server activity, specifically the aggregate login failure rate. Our second step classifies hosts appearing during the detected epochs as participants or non-participants, based on individual past history and "coordination glue," i.e., the degree to which a given host manifests similar probing patterns to other hosts during the epoch.

We develop and evaluate our detector using 8 years of SSH login records from the Lawrence Berkeley National Laboratory, a large research facility. We measure and quantify the duration, intensity, and behavior of the detected attacks, finding multiple large-scale coordinated attacks from botnets, the longest spanning about 1.5 months. All detected attacks would have been missed by a point-wise host-based detector. We correlate these attacks with data from other sources, finding that half of the large-scale incidents are part of global attacks, with significant overlap of attack hosts appearing at multiple sites simultaneously.

The rest of the paper is organized as follows. We begin with related work in §2. §3 details the characteristics of the dataset used in developing and evaluating our detector. §4 frames our detection approach. In §5, we develop a model of the process by which legitimate users make authentication errors, serving as the basis for parameterizing our SSH password brute-force detector. We discuss our evaluation results and findings in §6 and summarize in §7.

## 2. Related Work
The literature relevant to our work lies in three domains: (i) coordinated attack detection, (ii) SSH brute-force attack detection, and (iii) studies of the prevalence of SSH brute-forcing activity.

### Coordinated Attack Detection
The detection of coordinated attacks has received limited attention. Staniford et al. [17] use simulated annealing for clustering anomalous events. Gates' work on coordinated scan detection [8] uses a set-covering approach to extract coordinated hosts, but it requires pointwise identification of attack hosts and lacks a procedure for determining when a site is under attack. Other work on DDoS detection faces the challenge of differentiating attack participants from legitimate users [19, 16].

### SSH Brute-Force Attack Detection
Host-based detection techniques like DenyHosts [2], BlockHosts [1], BruteForce-Blocker [9], fail2ban [12], and sshguard [3] block hosts that exceed a threshold for failed attempts. Network-based approaches include Kumagai et al. [13], who use DNS PTR record queries to detect SSH dictionary attacks, and Vykopal et al. [18], who develop flow signatures for SSH dictionary attacks. Hellemons [11] models brute-force attacks as having scanning, brute-force, and die-off phases. None of these approaches can detect stealthy, coordinated attacks.

### Prevalence of SSH Brute-Forcing
Bezut et al. [6] studied four months of SSH brute-force data from honeypots, finding recurring activity with weeks between attacks. Owens et al. [15] analyzed SSH brute-force attacks on three networks, finding varying numbers of login attempts and both slow and distributed attacks designed to evade detection.

## 3. Datasets and Data Filtering
We evaluate our detector on eight years of SSH login data from the Lawrence Berkeley National Laboratory (LBNL), a US national research laboratory. The temporal breadth of this dataset allows us to study attack patterns over the years. We also use SSH datasets from four other sites (HONEY, RSRCH-LAB, HOMEOFF, and CAMPOFF) to assess whether detected attacks at LBNL reflect targeted behavior or indiscriminate probing.

### 3.1 Main Dataset
Table 1 provides summary statistics for the LBNL dataset. The site's systems primarily reside in two /16 address blocks, with a small fraction running externally accessible SSH servers. The benign SSH activity consists of interactive and scripted logins. We have data from two vantage points: central syslog server logs and border monitoring flow data for SSH port 22.

#### Table 1: Summary of LBNL Syslog and Flow Data
| Metric                               | Value                          |
|--------------------------------------|--------------------------------|
| Time span                            | Jan 2005–Dec 2012              |
| Number of SSH servers                | 2,243                          |
| Number of valid users                | 4,364                          |
| Distinct valid user/server pairs     | 10,809                         |
| Total login attempts                 | 12,917,223                     |
| Login successes                      | 8,935,298                      |
| Remote clients                       | 154,318                        |
| Password-based attempts              | 5,354,833                      |
| Password-based successes             | 1,416,590                      |
| Remote clients (password-based)      | 119,826                        |
| SSH border flows                     | 215,244,481                    |
| Remote clients seen in flows         | 140,164                        |
| High-rate brute-forcers              | 7,476                          |
| Mean attempts per high-rate brute-forcer | 382.84                        |
| Mean daily password login attempts   | 486.13 (σ = 182.95)            |
| Mean daily users                     | 116.44 (σ = 32.41)             |

#### Figure 1: Empirical CDF of the number of failed login attempts per hour until a success for legitimate user login efforts with forgotten or mistyped usernames/passwords.

### Filtering
For the central syslog data, we focus on SSH authentication types vulnerable to brute-forcing, omitting those using public key authentication. We also filter out individual brute-forcers that can be readily detected using a per-host threshold for failed login attempts. To establish reasonable thresholds, we analyze the process by which legitimate users make password authentication failures. We assume that any user who makes repeated failed login attempts followed by a successful attempt is a legitimate user. Figure 1 shows the number of failed attempts before success. Instances exceeding 10 failed attempts are rare, so we set a conservative threshold of 20 failed attempts. We manually analyzed instances above this threshold and found they reflect automation misconfigurations. Any client exhibiting 20 or more failures logging into a single server (with no success) over a one-hour period is deemed a high-rate brute-forcer and removed from the dataset.

#### Figure 2: Empirical CDFs for benign password-based SSH usage in LBNL data. Left to right: (i) valid users per hour, (ii) successful logins per hour, (iii) valid users per day, (iv) successful attempts per day.

**Table 1: Summary of LBNL Syslog and Flow Data**

This comprehensive filtering and analysis allow us to focus on the more subtle and distributed attacks, providing a robust foundation for our detection approach.