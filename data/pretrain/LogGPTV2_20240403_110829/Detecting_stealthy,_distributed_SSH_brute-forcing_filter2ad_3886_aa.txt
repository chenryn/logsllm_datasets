title:Detecting stealthy, distributed SSH brute-forcing
author:Mobin Javed and
Vern Paxson
Detecting Stealthy, Distributed SSH Brute-Forcing
Mobin Javed† and Vern Paxson†(cid:2)
†University of California, Berkeley
(cid:2)International Computer Science Institute
Abstract
In this work we propose a general approach for detecting dis-
tributed malicious activity in which individual attack sources each
operate in a stealthy, low-proﬁle manner. We base our approach on
observing statistically signiﬁcant changes in a parameter that sum-
marizes aggregate activity, bracketing a distributed attack in time,
and then determining which sources present during that interval
appear to have coordinated their activity. We apply this approach
to the problem of detecting stealthy distributed SSH bruteforcing
activity, showing that we can model the process of legitimate users
failing to authenticate using a beta-binomial distribution, which en-
ables us to tune a detector that trades off an expected level of false
positives versus time-to-detection. Using the detector we study the
prevalence of distributed bruteforcing, ﬁnding dozens of instances
in an extensive 8-year dataset collected from a site with several
thousand SSH users. Many of the attacks—some of which last
months—would be quite difﬁcult to detect individually. While a
number of the attacks reﬂect indiscriminant global probing, we also
ﬁnd attacks that targeted only the local site, as well as occasional
attacks that succeeded.
Categories and Subject Descriptors
K.6.5 [Computing Milieux]: MANAGEMENT OF COMPUT-
ING AND INFORMATION SYSTEMS—Security and Protection
Keywords
Scanning; SSH; Brute-forcing; Distributed
1.
INTRODUCTION
A longstanding challenge for detecting malicious activity has
been the problem of how to identify attacks spread across numer-
ous sources, such that the individual activity of any given source
remains modest, and thus potentially not particularly out of the or-
dinary. These scenarios can arise whenever a detector employs a
threshold used to ﬂag that a given candidate attack source has ex-
hibited a suspiciously high level of activity (e.g., when conducting
scanning or DoS ﬂooding). Attackers can respond to such detection
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516719.
procedures by employing multiple sources in order to thin out their
activity to prevent any single source from exceeding the threshold;
their attack becomes distributed and therefore potentially stealthy,
i.e., hard to detect based on any individualized analysis.
In this work we present a general strategy for potentially de-
tecting such stealthy activity, which consists of two basic steps.
First, we employ the statistical technique of change-point detec-
tion to identify times during which a global property has shifted—
indicating that, in aggregate, a site’s activity reﬂects the pres-
ence of problematic activity. We then determine the range of time
over which this activity occurred and, within that interval, identify
which sources appear to have contributed to the activity.
In particular, we apply this approach to the problem of detect-
ing distributed SSH brute-forcing: attackers employing a number
of systems that each try different username/password combinations
against a site’s SSH login servers, hoping that one of them will
stumble across a working combination made possible by a careless
user. The threat of SSH brute-forcing is well-known: indeed, any
SSH server open to general Internet access receives incessant prob-
ing by hostile remote systems that energetically attempt to locate
instances of weak authentication [5]. The degree to which such at-
tempts also occur in a stealthy slow-but-steady fashion, however,
has attracted little study. The difference between single energetic
probes and stealthy distributed ones is signiﬁcant: defenders can
easily detect the former, and therefore either block the activity or
investigate it (to ensure none of the attempts succeeded). The lat-
ter, however, poses a much more difﬁcult detection problem.
If
each host in a distributed brute-forcing attack itself only attempts
username/password logins at a low rate, then distinguishing hos-
tile activity from the inevitable login failures made by legitimate
user errors becomes much more difﬁcult. Yet the distinction is vi-
tal: a pattern of attempt/attempt/attempt/success made by a legit-
imate user simply reﬂects a set of typos, or a password that took
a few stabs to remember; but by a distributed SSH brute-forcer, it
provides the only slender indication of success amongst a mass of
probing that in aggregate predominantly failed.
We aim to both provide an exemplar of our general strategy in
terms of detecting distributed (but coordinated) SSH brute-forcing
attacks, as well as developing an assessment of the prevalence of
such attacks as seen over years of data. In terms of our two-step
approach, we ﬁrst identify attack epochs during which in aggre-
gate we can with statistical conﬁdence determine that some sort
of SSH brute-forcing event occurred. Here, we employ change-
point detection framed in terms of a parameter that summarizes
the network/server activity of groups of remote hosts—in particu-
lar, the aggregate login failure rate. Our second step classiﬁes the
hosts appearing during the detected epochs as either participants or
non-participants in the activity, based on both individual past his-
85tory and “coordination glue”, i.e., the degree to which a given host
manifests patterns of probing similar to that of other hosts during
the epoch.
We develop and evaluate our detector on 8 years of SSH login
records collected via central syslogging at the Lawrence Berkeley
National Laboratory, a large (≈ 4,000 employees and visitors) re-
search facility. We measure and quantify the duration, intensity
and behavior of the detected attacks. We ﬁnd multiple large-scale
coordinated attacks from botnets, the longest one spanning about
1.5 months. All the attacks we detect would have been completely
missed by a point-wise host-based detector. We correlate these at-
tacks with data from several other sources, ﬁnding that half of the
large-scale incidents at the site are part of global attacks, with a sig-
niﬁcant average overlap of ≈ 70% attack hosts appearing at multi-
ple sites in the same time span.
We organize the rest of the paper as follows. We begin with
related work in § 2. § 3 details the characteristics of the dataset
we use in developing and evaluating our detector. § 4 frames our
detection approach. In § 5 we develop a model of the process by
which legitimate users make authentication errors when attempting
to log in, which serves as the basis for parameterizing our SSH
password brute-force detector. We discuss our evaluation results
and ﬁndings in § 6, and summarize in § 7.
2. RELATED WORK
The literature relevant to our work lies in three domains: (i) coor-
dinated attack detection, (ii) SSH brute-force attack detection, and
(iii) studies of the prevalence of SSH brute-forcing activity.
The detection of coordinated attacks has received little treatment
in the literature. The earliest work of which we are aware is that
of Staniford et al., who correlate anomalous events using simulated
annealing for clustering [17]. Gate’s work on coordinated scan de-
tection is the most prominent subsequent effort in this domain [8].
Given an input set of scan sources, Gate’s algorithm extracts the
subset of hosts that appear coordinated by using a set-covering ap-
proach; the premise is that the attacker divides the work among
the coordinating scanning hosts in a manner that maximizes in-
formation gain while minimizing work overlap. For our purposes
this work has two limitations: (i) the individual attack hosts re-
quire pointwise identiﬁcation, and thus the approach will not ﬁnd
stealthy attacks, and (ii) the algorithm lacks a procedure for deter-
mining when a site is under attack. Other work has addressed the
somewhat similar problem of detecting DDoS attacks, but these de-
tection approaches face a difﬁcult problem of how to differentiate
attack participants from legitimate users [19, 16].
With regard to SSH brute-forcing, host-based detection tech-
niques such as DenyHosts [2], BlockHosts [1], BruteForce-
Blocker [9], fail2ban [12], and sshguard [3] block hosts that cross
a threshold for failed attempts in a speciﬁed amount of time. Other
work has developed network-based approaches. Kumagai et al.
propose an increase in the number of DNS PTR record queries
to detect SSH dictionary attacks [13]. This increase results from
the SSH server logging the fully qualiﬁed domain names of the
SSH clients attempting access. This work does not discuss how
to establish detection thresholds, nor does it present an evaluation
of the system’s accuracy. Vykopal et al. develop ﬂow signatures
for SSH dictionary attacks [18]. They show that a large number
of short ﬂows having a few bytes transferred in both directions
and appearing together in a short duration of time are indicative
of failed login attempts, providing the means to then detect brute-
force attacks from ﬂow data. Hellemons also studied the possibility
of using only ﬂow data to detect SSH brute-force attacks, model-
ing the brute-force attacks as consisting of three phases: scanning,
brute-force and die-off (in case of successful compromise) [11].
They monitor the ranges of three parameters—ﬂows-per-second,
packets-per-ﬂow and bytes-per-packet—to identify these phases.
Both of these works test their detectors only on simulated dictio-
nary attacks, and do not address how to distinguish instances of
forgotten usernames/passwords from brute-forcers. More gener-
ally, none of these brute-force detection approaches have the ability
to detect stealthy coordinated attacks.
Malecot et al. use information visualization techniques to de-
tect distributed SSH brute-force attacks [14]. For each local host,
the remote IP addresses that attempt to log in are displayed using
a quadtree—a tree data structure formed by recursively subdivid-
ing two dimensional space into four quadrants. The procedure per-
forms 16 iterations to map 32-bit IP addresses onto a quadtree, each
time deciding the next sub-quadrant by looking at the next two bits
of the IP address. The analyst then visually compares quadtrees for
different local hosts to identify as coordinated attackers remote IP
address(es) that appear in quadtrees of multiple local hosts.
Finally, regarding the prevalence of SSH brute-force attacks,
Bezut et al. studied four months of SSH brute-force data collected
using three honeypot machines [6]. They ﬁnd recurring brute-
forcing activity, sometimes with several weeks in between, indicat-
ing that the attacks target a wide range of IP address space. Owens
et al. performed a measurement study of SSH brute-force attacks
by analyzing data from honeypots on three networks—a small busi-
ness network, a residential network, and a university network—for
eleven weeks during 2007–2008 [15]. They ﬁnd that the number of
login attempts during different attacks varied from 1 or 2 to thou-
sands. More than a third of the attacks consisted of ten or fewer
login attempts. They ﬁnd instances of both slow and distributed at-
tacks designed to evade detection. They also ﬁnd that precompiled
lists of usernames and passwords are shared across different attack-
ers, identifying ﬁve such dictionaries. Their study reveals that only
11% of the attempted passwords are dictionary words.
3. DATASETS AND DATA FILTERING
We evaluate our detector on eight years of SSH login data col-
lected at the Lawrence Berkeley National Laboratory (LBNL), a
US national research laboratory. The temporal breadth of this
dataset allows us to study attack patterns at the site across the years.
We also draw upon SSH datasets from four other sites spread across
the IP address space (and several geographic locations) to assess
whether attacks we detect at LBNL reﬂect targeted behavior or in-
discriminant probing. We refer to these sites as HONEY, RSRCH-
LAB, HOMEOFF, and CAMPOFF, and describe them below. In this
section we present these datasets and discuss ways in which we
ﬁltered the data for our subsequent analysis.
3.1 Main dataset
Table 1 provides summary statistics for our main dataset, LBNL.
This site’s systems primarily reside in two /16 address blocks (from
two separate /8’s). Only a small fraction of the address space runs
externally accessible SSH servers, providing access to both individ-
ual user machines and compute clusters. The benign SSH activity
in this data consists of interactive as well as scripted logins.
For this site we have datasets collected at two vantage points:
(i) logs collected by a central syslog server that records informa-
tion about login attempts reported by (most of) the SSH servers,
and (ii) ﬂow data for SSH port 22 collected by border monitoring.
For each login attempt, the syslog data provides the time, client
86Time span
SSH servers
Valid users
Distinct valid user/server pairs
Login attempts
Login successes
Remote clients
Attempts using passwords
successes
remote clients
SSH border ﬂows
remote clients seen in ﬂows
High-rate brute-forcers
Mean attempts per high-rate brute-forcer
Mean daily password login attempts
Mean daily users
Jan 2005–Dec 2012
2,243
4,364
10,809
12,917,223
8,935,298
154,318
5,354,833
1,416,590
119,826
215,244,481
140,164
7,476
382.84
486.13 (σ = 182.95)
116.44 (σ = 32.41)
0
.
1
F
D
C
E
8
.
0
6
.
0
1
2
5
10
20
50
100
Number of failed login attempts
Figure 1: Empirical CDF of the number of failed login attempts per hour
until a success for legitimate user login efforts with forgotten or mistyped
usernames/passwords.
Table 1: Summary of LBNL syslog and ﬂow data.
and server1 IP addresses, username on the server, whether the login
succeeded, and the authentication type used. The ﬂow data sup-
plements this perspective by providing contact information (but no
details) for attempts to access IP addresses that do not run an SSH
server, or that run an SSH server that does not log via the central
syslog server. This data thus enables us to establish the complete2
set of machines targeted by an attack.
Filtering. For the central syslog data, we work with the subset
of SSH authentication types vulnerable to brute-forcing (i.e., we
omit those using public key authentication), about half of the at-
tempts. We perform all of the characterizations and analyses in the
remainder of the paper in terms of this subset.
In addition, we ﬁlter this dataset to remove individual brute-
forcers that we can readily detect using a per-host threshold for the
number of failed login attempts per remote host within a window
of time. Given the ease of detecting these brute-forcers, they do not
reﬂect an interesting problem for our detector, though they would
heavily dominate the data by sheer volume if we kept them as part
of our analysis.
To identify and remove such brute-forcers, we need to empiri-
cally establish reasonable thresholds for such a per-host detector.
We do so by analyzing the process by which legitimate users make
password authentication failures, as follows. We assume that any
user who makes repeated failed login attempts followed by a suc-
cessful attempt reﬂects a legitimate user.
(This assumption may
allow consideration of a few successful SSH brute-forcers as “le-
gitimate”, but these are very rare and thus will not skew the results.)
Figure 1 plots the number of failed attempts such users make
prior to ﬁnally succeeding. We see that instances exceeding
10 failed attempts are quite rare, but do happen occasionally. Ac-
cordingly, we consider 20 failed attempts as constituting a conser-
vative threshold. We manually analyzed the instances of legitimate
users falling after this cutoff (the upper right tail in the ﬁgure) and
found they all reﬂect apparent misconﬁgurations where the user
evidently set up automation but misconﬁgured the associated pass-
word. Thus, we deem any client exhibiting 20 or more failures
logging into a single server (with no success) over a one-hour pe-
riod with as a high-rate brute-forcer, and remove the client’s entire
1 Some of the syslog records log the server’s hostname rather than
its IP address. For these we correlated the records against the site’s
DNS and DHCP logs to resolve to IP addresses.
2 The ﬂow data has some gaps, though we have it in full for each
attack we identiﬁed. These gaps are the source of observing fewer
“remote clients seen in ﬂows” than “Remote clients” in Table 1.
F
D
C
E
0
.
1
8
.
0
6
.
0
4
.
0
2
.
0
0
.
0
1
5
10
50
500
Number of attempts/users
Figure 2: Empirical CDFs for benign password-based SSH usage in LBNL
data. Left to right: (i) valid users per hour, (ii) successful logins per hour,
(iii) valid users per day, (iv) successful attempts per day.
activity from our dataset. Table 1 summarizes the brute-forcers re-