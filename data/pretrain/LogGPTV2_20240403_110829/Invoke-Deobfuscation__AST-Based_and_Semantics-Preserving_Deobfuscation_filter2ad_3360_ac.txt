tAst, ForStatementAst, ForEachStatementAst and State-
mentBlockAst,
the scope depth of the current node will
Fig. 3: An example of token parsing.
full name, Invoke-Expression. Based on these attributes,
we can deal with other obfuscation at the token level, such
as random case and ticking (the meaningless backtick will
be removed when tokenized). After handling one obfuscated
token, we will replace it with its recovery result in the script.
The reverse order allows us to identify the unprocessed tokens
without parsing the new script. Eventually, we can get the
script without obfuscation at the token level.
B. Recovery Based on AST
No matter how complex the obfuscated script pieces are, they
are obtained from the original script pieces after a series of
transformations. Obfuscated script pieces generally include
obfuscated data and its recovery algorithm, which we call
recoverable script pieces. The key to deobfuscation is to
identify these recoverable pieces in an obfuscated script.
1) Identifying Recoverable Pieces: We use the content
of speciﬁc types of nodes on PowerShell AST to identify
recoverable script pieces. Firstly, the content of each node of
PowerShell scripts’ AST is valid in syntax, which contains the
recoverable script pieces. Secondly, we can obtain the original
pieces through executing the recoverable pieces. For example,
'he'+'llo' can be executed to get 'hello'. Therefore,
we analyze all types of nodes in PowerShell AST and ﬁnd the
types of nodes whose content often can get results in string
form after execution. We call these types of nodes recoverable
nodes, which include PipelineAst, UnaryExpressionAst, Bi-
naryExpressionAst, ConvertExpressionAst, InvokeMem-
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:55 UTC from IEEE Xplore.  Restrictions apply. 
4298
'{1}{0}{2}' -f 'ps://test.com/m','htt', 'alware.txt'invokehttps://test.com/malware.txtno'https://test.com/malware.txt'yes$xfdsf = '{1}{0}{2}' -f 'ps://test.com/m', 'htt','alware.txt';Ie`X   (nE`w-oBJecT    net.`WEBcLIenT).DOwnLoAdsTrInG($xfdsf)IeXnEw-oBJecT...(...Invoke-ExpressionNew-Object...(...processInvoke-Expression /PowerShellRecovery:Rename & Reformat$var0 = 'https://test.com/malware.txt';Invoke-Expression   (New-Object   net.webclient).downloadstring('https://test.com/malware.txt')Token ParsingScriptBlockNamedBlockAssignmentStatementPipelineVariableExpression...CommandExpressionBinaryExpression...Recoverable nodesVariableExpressionReplacevariable tracingvariable tracingRecoverybasedon AST$a = '(New-Object Net.W'$b = 'ebClient).downloa'$c = 'dstring("https:/t'$d = 'est.com/malware.txt")'-join ($a, $b, $c, $d) | iexObfuscated ScriptRemove TicksReplaceAliasReplaceRandomCaseTokenParsing7361245ASTNodeTyperecoverableAssignmentInvokeRecordVariableIexIe`X (-jOiN ('echo h', 'ello') )IeX(-jOiNecho h(,ello))IeX(-Joinecho h(,ello))Invoke-Expression(-Joinecho h(,ello))Script:Tokens:Process In Reverse OrderResult:Invoke-Expression (-Join ('echo h', 'ello') )Reconstruct Script......increase or decrease. The change depends on the traversal
direction, from parent to child or vice versa.
We record the value of variables in a symbol table through
executing their assignment expression. Based on Assign-
mentStatement nodes, we can identify variables and their
assignment expression. When the assignment expression con-
tains unknown variables which are not contained in the symbol
table, we do not execute the expression and abandon recording
the assigned variable. Besides, for environment variables, we
can use the command Get-Variable to obtain their correct
value.
Algorithm 1: Variable Tracing
input : AST for the script T
1 Post-order traverse the T and put nodes into a queue
Q;
2 Let Nr be the root of T ;
3 Sv record variables’ value; Sc record variables’ scope;
4 Sv = ∅; Sc = ∅;
5 while Q is not empty do
6
7
8
9
nc := Q[0];
Let np be the parent of nc;
if nc.type is VariableExpressionAst then
if nc in a loop or nc in a conditional statement
then
10
11
12
13
14
15
16
17
18
19
20
21
22
Remove nc from Sv and Sc;
Continue;
end
if np.type is AssignmentStatementAst then
Let expr be the assignment expression;
if expr contains unknown variables then
Remove nc from Sv and Sc;
Continue;
end
Sv[nc] = expr.value;
Sc[nc] = current scope;
if Sv[nc] (cid:54)= null and (Sv[nc] is string or
number) and nc.scope in Sc[nc] then
replace nc with Sv[nc.name]
else
23
24
25
26
27
28 end
end
end
end
Remove nc from Q
obfuscate the script string with various methods directly. To
keep the original semantic, they only need to add Invoke-
Expression or PowerShell to invoke the obfuscated string.
The key to dealing with multi-layer obfuscation is to
identify the command Invoke-Expression and PowerShell.
However, attackers often use different methods to obfus-
cate these commands. For example,
the obfuscated piece
.($pshome[4]+$pshome[30]+'x') is equivalent
to
Invoke-Expression. We can get the recovery result .('iex')
with variable tracing, which is one of common format of
Invoke-Expression. Iex is the alias of Invoke-Expression and
. can call a string as a command. The other common
formats of Invoke-Expression include iex, 'xxx' |iex,
and &'iex'. We can identify different formats of Invoke-
Expression through variable tracing and recovery based on
AST. PowerShell can execute Base64-encoded commands
using the parameter -EncodedCommand. Due to the auto-
completion and case insensitive of PowerShell, this parameter
can be used in kinds of formats, such as -e, -eNc and
so on. We convert the parameter into lower case and use
'-encodedcommand'.StartsWith($param) to deter-
mine whether the parameter is -EncodedCommand.
To deal with multi-layer obfuscation, we convert the string
parameter of Invoke-Expression and PowerShell and deobfus-
cate it. We repeat this process until the recovery result of
the script no longer changes. In this way, we can get the
original script pieces from the script pieces with multi-layer
obfuscation.
5) Script Reconstruction: We reconstruct the deobfusca-
tion script based on the post-order traversal of AST. When
visiting a node, we use its child nodes’ content to update its
content ﬁrst. The post-order traversal ensures that its all child
nodes have been processed when visiting it. If its content
is obfuscated, we will replace it with its recovery result.
Eventually, we will get the whole deobfuscation script when
we visit the root of the AST. We replace the obfuscated script
pieces in place so that the deobfuscation script is consistent
with the obfuscated script semantics.
With variable tracing, we can correctly obtain the recovery
results of the recoverable script pieces which contain variables.
Our current implementation of variable tracing still has some
limitations, we will discuss them in detail in Section V-C.
4) Invoke-Expression and PowerShell: Complex obfus-
cated scripts often contains multi-layer obfuscation, whose
typical feature is to include Invoke-Expression cmdlet or
PowerShell. Invoke-Expression and PowerShell both can run
their string parameters as scripts. It means that attackers can
Fig. 4: The process of reconstructing script.
Assuming that one script’s content is 'a'+'b' +'c',
its AST and the reconstruction process is shown in Fig 4.
When we visit the recoverable node of 'a'+'b' +'c', we
update its content with its child nodes’ recovery results and
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:55 UTC from IEEE Xplore.  Restrictions apply. 
5299
'a''a'+'b''a'+'b'  +'c''a'+'b'+'c''a'+'b'+'c''b''c''a''b''c''ab''ab'  +'c'current nodevisited nodeunvisited nodenode’s record 0102030405060708090100PS1 FilePowerShellURLIPOriginDataPSDecodePowerDrivePowerDecodeLi et al.Invoke-DeobfuscationManualget a new script piece 'ab' +'c'. Then we deal with the
piece 'ab' +'c' and update the record of the current node’s
content with the recovery result. When we visit the root of the
AST, we will get the ﬁnal deobfuscation script.
C. Rename and Reformat
Renaming randomly named variables and functions and refor-
matting code can make the script easier for analysts to analyze.
Attackers often randomize the name of variables and functions
in a script to make it hard to understand.
We use statistical analysis to determine whether the variable
name function name is random and replace the randomized
name with predeﬁned rules. For us, it is difﬁcult to determine
whether a word is random in isolation. Therefore, we extract
all unique variable and function names in the script and regard
them as a whole string. We determine whether the string
is random based on the proportion of vowels and special
characters. Hayden [29] points out the proportion of vowels is
about 37.4% in General American English, so we assume that
the string is random when the proportion of vowels in English
characters is not between 32% and 42%. For special characters
that are not English letters, we statistically compared 4,234
normal PowerShell scripts from GitHub with the malicious
scripts we collected, and ﬁnd that the proportion of English
letters in the normal scripts is greater than 70% and the pro-
portion of English letters in the names with special characters
is less than 2%. Thus, we assume that a string is random
when its proportion of English letters is less than 10%. We
use var{num} and func{num} to substitute the randomized
variable and function names. The new name depends on the
order in which the obfuscated script piece appears.
Eventually, we reformat the code by removing the random
whitespace characters and indenting it with a standardized
format. As shown in Fig 7(d), the randomized variable names
are replaced and random whitespace characters are deleted.
Furthermore, this module is extensible.
introduce
the
IV. IMPLEMENTATION AND EVALUATION
section, we
In this
implementation of
Invoke-Deobfuscation ﬁrstly. Then, we compare Invoke-
Deobfuscation with the previous deobfuscation tools, such
as PowerDrive [17], PSDecode [16], PowerDecode [18] and
Li et al. [19] from four aspects: 1) the ability to deal with
common obfuscation methods, 2) deobfuscation effectiveness
and efﬁciency, 3) behavioral consistency, and 4) obfuscation
mitigation. All experiments are conducted on a virtual machine
with an Intel Xeon E5-2630 v4 Processor 2.2 GHz and 6 GB
memory, running Windows 10 Pro (64-bit).
A. Implementation
We implement Invoke-Deobfuscation with around 2,500 lines
of PowerShell code, and it can run on multiple platforms
(Windows, Linux, macOS). Invoke-Deobfuscation is easy to
use with the command Import-Module. It mainly consists of 3
modules and each of the modules can be independently used.
Based on Microsoft’s ofﬁcial library, we can correctly parse
the tokens and AST of PowerShell scripts.
We check the syntax of the result after each step of the
deobfuscation process to avoid unexpected syntax errors. We
skip the current deobfuscation step to keep the script with valid
syntax if the current result contains syntax errors.
B. Evaluation Approaches
1) Data Collection:
In previous works,
the obfuscated
samples in their datasets are simple or manually generated,
which only covers a few types of obfuscation methods [19],
[30]. That is obviously different from wild PowerShell scripts
which contain complex and diverse obfuscation techniques.
To better evaluate the effect of Invoke-Deobfuscation, we
collected 2,025,175 wild malicious samples from January 1
to May 29, 2021, with the help of a cyber security company,
QI-ANXIN. According to the source, these samples can be
divided into two categories. 1) Category-One is the samples
that are labeled as PowerShell by anti-virus software. The
number of these samples is 1,318,151, but there are a lot of
duplicates, i.e., the content and structure of some samples are
highly similar but their hash values are different. 2) Category-
Two is the samples whose ﬁle type is identiﬁed as PowerShell
by TrID [31] or ﬁle [32]. There are 707,024 samples of this
category. Rule-based ﬁle type identiﬁcation is inaccurate so
that many other types of ﬁles are included.
Preprocessing. We utilize the syntax information and textual
features of samples to remove invalid and duplicate Power-
Shell samples. Firstly, we remove the samples with invalid
syntax which cannot be converted to a PowerShell script block.
Secondly, we utilize token information to remove the non-
PowerShell samples. If the samples cannot get any token after
tokenizing, we remove them. These samples often belong to
other ﬁle types, such as Mail and HTML. Meanwhile, when
all commands of the samples are unknown or the command
tokens contain invalid characters like = and %, we remove
their corresponding samples. Thirdly, we remove meaningless
samples for our research, which only contain one string token.
Then we get 1,127,349 PowerShell scripts.
We observe that the structures of many malicious scripts
in the same family are highly similar. The differences among
them mainly are strings, such as different malicious URLs.
To remove the samples with the same structure, we replace
all string tokens with the same placeholder string and then
remove the duplicate samples.
DataSet. After preprocessing, we ultimately get 39,713 Pow-
erShell samples. The previous datasets only contains few