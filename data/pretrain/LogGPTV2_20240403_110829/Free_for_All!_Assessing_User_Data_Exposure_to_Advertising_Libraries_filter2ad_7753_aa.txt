title:Free for All! Assessing User Data Exposure to Advertising Libraries
on Android
author:Soteris Demetriou and
Whitney Merrill and
Wei Yang and
Aston Zhang and
Carl A. Gunter
Free for All! Assessing User Data Exposure to
Advertising Libraries on Android
Soteris Demetriou, Whitney Merrill, Wei Yang, Aston Zhang and Carl A. Gunter
University of Illinois at Urbana-Champaign
{sdemetr2, wmerril2, weiyang3, lzhang74, cgunter}@illinois.edu
Abstract—Many studies focused on detecting and measuring
the security and privacy risks associated with the integration of
advertising libraries in mobile apps. These studies consistently
demonstrate the abuses of existing ad libraries. However, to fully
assess the risks of an app that uses an advertising library, we
need to take into account not only the current behaviors but all of
the allowed behaviors that could result in the compromise of user
data conﬁdentiality. Ad libraries on Android have potential for
greater data collection through at least four major channels: using
unprotected APIs to learn other apps’ information on the phone
(e.g., app names); using protected APIs via permissions inherited
from the host app to access sensitive information (e.g. Google and
Facebook account information, geo locations); gaining access to
ﬁles which the host app stores in its own protection domain; and
observing user inputs into the host app.
In this work, we systematically explore the potential reach
of advertising libraries through these channels. We design a
framework called Pluto that can be leveraged to analyze an
app and discover whether it exposes targeted user data—such as
contact information, interests, demographics, medical conditions
and so on—-to an opportunistic ad library. We present a
prototype implementation of Pluto, that embodies novel strategies
for using natural language processing to illustrate what targeted
data can potentially be learned from an ad network using ﬁles
and user inputs. Pluto also leverages machine learning and data
mining models to reveal what advertising networks can learn from
the list of installed apps. We validate Pluto with a collection of
apps for which we have determined ground truth about targeted
data they may reveal, together with a data set derived from a
survey we conducted that gives ground truth for targeted data
and corresponding lists of installed apps for about 300 users. We
use these to show that Pluto, and hence also opportunistic ad
networks, can achieve 75% recall and 80% precision for selected
targeted data coming from app ﬁles and inputs, and even better
results for certain targeted data based on the list of installed
apps. Pluto is the ﬁrst tool that estimates the risk associated
with integrating advertising in apps based on the four available
channels and arbitrary sets of targeted data.
I.
INTRODUCTION
Advertisers aim to generate conversions for their ad im-
pressions. Advertising networks assist them in matching ads to
users, to efﬁciently turn impressions into conversions. We call
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23082
the information that achieves this targeted data. Android smart
phones (which we call ‘mobiles’ from here on) contain rich
information about users that enable advertising networks to
gather targeted data. Moreover, there is considerable pressure on
advertising networks to improve the number and quality of tar-
geted data they are able to offer to advertisers. This raises many
privacy concerns. Mobiles often contain sensitive information
about user attributes which users might not comfortably share
with advertising networks but could make valuable targeted
data. This, in turn, led to a substantial line of research on
privacy and advertising on mobiles in two general areas: (1)
strategies for detection and prevention [53], [43], [17], [31],
[33], [18], [50], [52], [7], [47], [48], [35], and (2) architectures
and protocols that improve privacy protections [19], [36], [40],
[29]. The ﬁrst of these approaches primarily provides insights
into the current practices of advertisers and advertising networks.
The second examines a future in which a changed advertising
platform provides better privacy. However, some of the studies
show that the development and use of targeted data on mobiles
is modest at present [47]. This is at least partially because
most applications (which we call ‘apps’ from here on) do
not pass along information about users to the advertising
network—through its ad library embedded in the app—unless
the advertising network requires them to do so [35]. This leave
open an important question: what if advertising networks took
full advantage of the information-sharing characteristics of the
current architecture?
In particular, when one wants to assess the privacy risk
associated with an asset, she needs to take into account not only
past and current hazardous behaviors but all allowed actions
that can result in potential privacy loss [27]. In the case of
opportunistic advertising libraries, a privacy loss is possible if
such libraries have the ability to access private user information
without the user’s consent. Current app privacy risk assessment
techniques [26], [25], try to detect when sensitive data leaks
from an app. To achieve that, they employ static or dynamic
analysis of apps and/or libraries. However, applying this sort
of assessment is constrained by the apparent practices of the
advertising libraries. For example, every time an ad library is
updated, or a new ad library appears, such analysis must be
performed again. To make things worse, some ad libraries load
code dynamically, [18] which allow them to indirectly update
their logic without dependency on the frequency of their host
app’s updates. In this way, any analysis dependent on current
library behaviors is unreliable as the analysis can not predict the
behavior of updated code or dynamically downloaded/loaded
code. Thus, to assess such risks, we need to have a systematic
way to model the potential data exposure to ad libraries
independent of current or apparent practices. A privacy risk
assessment should consider what an adversary is allowed by
the system to do instead of only what she is currently doing.
Our work takes the ﬁrst step in this direction by modelling
the data collection capabilities of ad libraries on an Android
platform.
We model opportunistic ad networks based on their
abilities to access targeted data on an Android platform
through at least four major attack channels: protected APIs by
inheriting the permissions granted to their host apps; reading
ﬁles generated at runtime by their host apps and stored in
the host apps’ protected storage; observing user input into
their host apps; and ﬁnally unprotected APIs, such as the
PackageManager.getInstalledApplications()
that allow the ad library to access platform-wide information.
We further categorize these attack channels into two classes,
namely the in-app and out-app exploitation class. The
in-app class contains attack channels that are dependent on
the ad library’s host app. The protected API’s, app local ﬁles
and user input are examples of such channels. The out-app
class contains attack channels that are independent of the host
app. The public API’s are an example of this. In particular,
Grace et. al. [18] identiﬁed that the list of installed applications
on a user’s device—which can be derived from a public
API on Android—raises privacy concerns. In this work we
systematically explore how this information can be exploited
by an adversary in practice. We demonstrate and evaluate how
well such APIs can result in an adversary learning a user’s
targeted data. Based on our data exposure modeling, we have
designed and developed a framework called Pluto. Pluto
aims to facilitate assessment of the privacy risk associated
with embedding an untrusted library into an app. We show that
Pluto is able to reveal the potential data exposure of a given
app to its ad libraries through the considered attack channels.
We believe that frameworks like Pluto will be extremely useful
to app developers who want to assess their app’s potential
data exposure, markets aiming to better inform their users
about the privacy risk associated with downloading a free app,
and users themselves. In addition, we hope that this will spur
similar academic attempts to capture the capabilities of ad
libraries and serve as a baseline for comparison.
Contributions: We outline the paper’s contributions below:
• New understanding: We perform manual and static analysis
on real world apps across all Google Play categories to better
understand what is currently available to ad libraries. We reveal
an increasing trend in ad networks to collect the list of installed
applications on Android. We show that numerous targeted
data exist in app local ﬁles, in the form of user attributes
or user interests that third-party libraries can readily access.
These ﬁndings highlight that ad networks could become more
aggressive in the future incentivized by the vast array of targeted
data being made available to them.
• New techniques: We design novel natural language processing
techniques to demonstrate that it is feasible for an opportunistic
ad library to infer user information from structured ﬁles on
Android. We present a new similarity metric called droidLESK
and provide preliminary evidence that it can facilitate context
disambiguation in Android. We further illustrate how Frequent
Pattern Mining (FPM) can be leveraged to assess private data
exposure of an app through the out-app channel.
• Targeted data inference from the list of installed applications:
We are the ﬁrst to systematically explore what an adversary can
learn from the list of installed applications on a mobile device.
We demonstrate and evaluate how reliably such unprotected
APIs can be utilized by an adversary as side-channels to infer
a user’s attributes (e.g. gender, age, marital status).
• Design, implementation and evaluation of a mobile library
risk assessment framework: We design the ﬁrst of its kind ad
library risk assessment framework. We implement a modular
extensible prototype based on this design, for discovering
targeted data exposure at scale in Android apps and evaluate
its performance. The prototype of Pluto demonstrates that the
techniques introduced in the paper achieve good results in
practice and provide a baseline for comparison with future
efforts. We plan to open source Pluto—after thoroughly testing
it—and all our experimental results online [2].
This paper is organized as follows: Section II provides
background information. Section III models the opportunistic
ad library we consider. Sections IV and V describe our studies
of the capabilities of ad networks through in-app and out-app
exploitation channels respectively. Section VI describes our
design and implementation of Pluto. In Section VII, we present
our evaluation of Pluto. In Sections VIII, we discuss the utility
and limitations of our approach. In Section IX, we discuss
related work and conclude the paper in Section X.
II. BACKGROUND
Mobile Advertising: Mobile advertising is a common way for
app developers to monetize their apps. Usually app developers
offer their apps for free and include one or more advertising
libraries which are assigned space to place ad content in the
apps’ user interface. Data brokers, entities that collect user
data and maintain user proﬁles, incorporate ad libraries in
mobile apps (or load code in iframes of online publishers’ web
sites). These libraries commonly collect targeted data consisting
of user attributes and interests to build more complete user
proﬁles. This allows the data brokers to sell information to
advertisers. For example, advertisers develop campaigns to
promote products at the behest of businesses. These advertisers
will collaborate with data brokers who know how to reach
speciﬁc groups of users. There are a number of types of data
brokers with a distinction sometimes made between ad networks
versus ad exchanges, but for this paper we will simply refer
to them all as ad networks. The advertisers can request that
their ads be displayed to a speciﬁc segment of the population.
Payment systems vary, but common ones pay for the number
of impressions shown to the desired segment or pay for the
number of users that click on the impressions. Either way, the
better the ad network is able to deﬁne the most promising
segment and reach the most parties in this segment, the more
money will be made by all of the parties in the ecosystem.
Android Protection Mechanisms: Each app on Android is
assigned a unique static UID when it is installed. This allows
the operating system to differentiate between apps during their
lifetime on the device, so it can run them in distinct Linux
processes when launched. In this way Android leverages the
traditional Linux process isolation to ensure that one app cannot
2
access another app’s resources.1 However, when developers
include an ad library, or any type of library for that matter, it
is treated as part of the host app. The operating system will
assign one UID for the app as a whole, even though the library
and host app have different package names. Every time an
app is launched, the OS will assign a process identiﬁer (PID)
to the app and associate that with the app’s UID. Again this
PID is shared between the host app and its libraries that run
within the same Linux process. As a result, the host app and
the library components will also share privileges and resources,
both in terms of Linux discretionary access control (DAC)
permissions and in terms of Android permissions granted.
The former allows the library to access all the local ﬁles the
host app is generating. The latter allows it to use the granted
permissions (e.g., ACCESS COARSE LOCATION) to access
other resources on the device (such as GPS), that can expose
user information (such as her location).
This multifaceted ecosystem, where there are strong incen-
tives for more data collection by all stakeholders, needs to be
better understood. Studying the current practices of ad libraries
is an important place to start. Indeed our community already
found that ad libraries collect some types of data for themselves
even without the cooperation (or with the implicit consent) of
the host app developer. Such behaviors have been observed in
the wild since 2012 [18] and as a routine practice today [35]
for certain types of information. Nonetheless, to fully assess
the privacy risk associated with embedding a library into an
app, we need to take into account not only past and current
behaviors, but also all allowed events that can lead to breaches
of users’ data conﬁdentiality. This work aims to take the ﬁrst
step into the direction of modeling ad libraries, not based on
previous behaviors but based on their allowed actions on the
Android platform. We show how this can be leveraged to design
a tool that can assess the targeted data exposure to ad libraries.
NLP Techniques: The NLP community has developed different
approaches to analyze unstructured data. For example, NLP is
used to parse user reviews online or user voice commands
to digital personal assistants. Work focused on extracting
grammatical information to understand what the user is trying
to convey. Part-of-speech Tagging (POS Tagging), is a typical
technique to achieve that. It is used to determine for each
word in a sentence whether it is a noun, adjective, verb,
adverb, proposition, and other part of speach. A common
problem in NLP arises when one needs to perform word sense
disambiguation. That is, to derive a given a word’s semantic
meaning. This can be challenging as a word might have
multiple meanings and complex relationships with other words.
To this end, Wordnet [32], an English semantic dictionary
has been proposed, where the community tried to capture
most of senses, of most of the English words. Wordnet also
provides relationships between words, such as whether two
words are synonyms, or connected with is-a relationship and
so on. In essence, Wordnet is a graph with words as nodes
and relationships as edges. To assist in better capturing the
relationships between words, the community has developed
multiple similarity metrics which are different ways to parse
the Wordnet graph. For example, the LCH [28] metric, uses the
1This is with the exception of apps signed with the same developer key. In
that case, the apps can indicate in their manifests that they should be assigned
the same UID.
shortest paths between two words to determine how similar the
words are. To accurately determine which of the multiple senses
of the word is the most appropriate, one needs to carefully
select the right similarity metric or design a new similarity
metric, and design her system in a way that incorporates domain
knowledge. These are challenges we had to overcome in our
work to enable extraction of targeted data from local ﬁles.
Furthermore, our target ﬁles do not contain real words that can
be used in an actual conversation but rather variable names.
We explain how we handle all these challenges in Section VI.
III. THREAT MODEL
A risk is the potential compromise of an asset as a result of
an exploit of a vulnerability by a threat. In our case, the assets
are user targeted data, the threat is an opportunistic ad library,
and a vulnerability is what allows the ad library to access
targeted data without the device user’s consent or the consent
of the library’s host app. Here, we examine the capabilities of
the ad libraries to collect such data on an Android platform.
Because libraries are compiled with their host apps, are in
extend authorized to run as the same Linux process as their
hosts on an Android OS. Thus the ad library code and the host
app’s code will share the same identiﬁer as far as the system
is concerned (both the static UID and the dynamic PID).
In
essence, this means that any given ad library runs with the same
privileges as its host app. Consequently, the libraries inherit
all the permissions granted by the user to the host app. There
is no way for the user to distinguish whether that permission
is used by her favorite app or the ad libraries embedded in
the app. This permission inheritance empowers the ad libraries
to make use of permission-protected APIs on the device. For
example, if an app granted the GET_ACCOUNTS permission,
its libraries can opportunistically use it to retrieve the user’s
registered accounts (e.g., the email used to login to Gmail, the
email used to login to Facebook, the email used for Instagram,
Twitter and so on).
Furthermore, during their lifetime on the device, apps create
local persistent ﬁles where they store information necessary
for their operations. These ﬁles are stored in app-speciﬁc
directories isolated from other applications. This allows the
apps to offer seamless personalized services to their users even
when they are not connected to the Internet. In addition this
practice enables the apps to avoid the latency of accessing their
clouds, provided they have one. Android offers a convenient
way through its SharedPreferences class to store and
retrieve application and user speciﬁc data to an XML ﬁle in
its UID-protected directory. In that directory, apps can also
create their own ﬁles typically using standardized formats such
as XML, JSON, or SQLite. In this way, they can utilize
widely available libraries and Android APIs to swiftly and
easily store and parse their data. The ad libraries, running
as the same Linux user as their host apps, inherit both the
Linux DAC privileges and the SE Android MAC capabilities
of their host apps. This allows them to access the app’s locally
stored ﬁles as their hosts would. Consequently, the ad libraries
could read the user data stored in those ﬁles. Consider, for
example, the app My Ovulation Calculator which provides
women a platform to track ovulation and plan pregnancy. This
app, listed under the MEDICAL category on Google Play,
has been installed 1,000,000–5,000,000 times. By parsing the
3