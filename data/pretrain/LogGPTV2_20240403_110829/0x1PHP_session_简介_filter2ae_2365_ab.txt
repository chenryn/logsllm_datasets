    /tmp/sess_PHPSESSID
    /tmp/sessions/sess_PHPSESSID
例子1：  
session.php
include.php
往 session.php 传入一句话，写入 `session` 文件中
    session.php?s=
在 `cookie` 中 `PHPSESSID` 值为 `k82hb2gbrj7daoncpogvlbrbcp`，即 `session` 存储的文件名为
`sess_k82hb2gbrj7daoncpogvlbrbcp`,路径可以猜测一下，这里为 `/var/lib/php/sessions/`  
include.php 文件包含 `session` 存储文件
    /include.php?i=/var/lib/php/sessions/sess_k82hb2gbrj7daoncpogvlbrbcp
例子2：  
XCTF2018-Final_bestphp  
这里就取其中的小部分代码  
bestphp.php
这里设置了 `open_basedir`，限制了我们读取文件的范围,这里 `session` 文件是保存在 `/var/lib/php/session/`
下，不在读取的范围里，这里可以考虑修改一下 `session` 文件存储的位置。
`session_start()`函数从 `PHP7` 开始增加了 `options` 参数，会覆盖 php.ini 中的配置。  
利用 `session_start` 覆盖 php.ini 文件中的默认配置 `session.save_path` 的值，并写入
    http://192.168.1.101/bestphp.php/?function=session_start&save_path=/var/www/html
    post: name=
成功包含 session 文件  
其实这个操作也可以由 `session_save_path()` 函数来完成，但是这个函数传入的参数是个字符串，不适用于此题。
## 0x2.3用户伪造
利用条件：知道所使用的 `PHP session` 存储引擎，以及 `session` 文件内容可控。
这里就以2020虎符杯-babyupload 为例  
index.php
    getMessage();
        }
    } elseif ($direction === "download") {
        try{
            $filename = basename(filter_input(INPUT_POST, 'filename'));
            $file_path = $dir_path."/".$filename;
            if(preg_match('/(../|..\\)/', $file_path)){
                throw new RuntimeException('invalid file path');
            }
            if(!file_exists($file_path)) {
                throw new RuntimeException('file not exist');
            }
            header('Content-Type: application/force-download');
            header('Content-Length: '.filesize($file_path));
            header('Content-Disposition: attachment; filename="'.substr($filename, 0, -65).'"');
            if(readfile($file_path)){
                $download_result = "downloaded";
            }else{
                throw new RuntimeException('error while saving');
            }
        } catch (RuntimeException $e) {
            $download_result = $e->getMessage();
        }
        exit;
    }
    ?>
这是一个存在上传和下载文件的功能的文件，只有当`$_SESSION['username'] ==='admin'` 才能获取 `flag`。
我们可以通过下载查看 `session` 文件所使用的存储引擎，然后通过相同的存储引擎伪造为 `admin`，上传 `session` 文件 ，获取
`flag`。
首先下载 `session` 文件，文件名为 `sess_PHPSESSID`
    http://192.168.100.16/index.php
    post:direction=download&filename=sess_qq7ucpov7ulvt1qsji3pueea2i
可知使用的是 `php_binary` 。  
内容为：
    usernames:5:"guest";
猜测我们只要上传一个 `session` 文件内容为：
    usernames:5:"admin";
发现如果不上传 `attr`
参数，`dir_path`会直接拼接上传的文件名+`"_".hash_file("sha256",$_FILES['up_file']['tmp_name']);`
如果把上传文件名设置为 `sess`，并且不传递 `attr` 参数，就可以得到`/var/babyctf/sess_XXXXXXXXX`，这就可以当成
`session` 文件。  
`hash_file()`是根据文件内容得到的 `hash` 值  
本地创建一个文件名为sess:  
上传 sess 文件  
计算 hash 值  
文件名为
`sess_432b8b09e30c4a75986b719d1312b63a69f1b833ab602c9ad5f0299d1d76a5a4`,尝试下载访问，如下可知已经上传成功。  
现在就差 success.txt， 可以把 `attr` 参数设置为 success.txt  
将 success.txt 变成一个目录,从而绕过了限制。  
然后将 `PHPSESSID`
修改为`432b8b09e30c4a75986b719d1312b63a69f1b833ab602c9ad5f0299d1d76a5a4`,就可以得到
`flag`
# 0x3总结
这里对 PHP session 常见的利用点进行一次汇总，当然肯定还有其他利用方式，等自己以后遇到再补充吧。
# 0x4参考