  lname VARCHAR(30),      
  birth TIMESTAMP,      
  hired DATE NOT NULL DEFAULT '1970-01-01',      
  separated DATE NOT NULL DEFAULT '9999-12-31',      
  job_code INT NOT NULL,      
  store_id INT NOT NULL      
);      
insert into employees1      
    (id, fname, lname, birth, hired, separated, job_code, store_id)       
select       
    ID, CONCAT('chen', ID), CONCAT('haixiang', ID), Now(), Now(), Now(), 1, ID       
from generate_series(1,2000000) id;      
INSERT 0 2000000      
Time: 3037.777 ms (00:03.038)      
```      
2560万 多对一JOIN 200万, 分组,排序      
```      
select t1.lname,count(*) from employees t1 join employees1 t2 using (id) group by t1.lname order by count(*) desc,lname limit 10;      
     lname      | count       
----------------+-------      
 haixiang1      |   129      
 haixiang10     |   129      
 haixiang100    |   129      
 haixiang1000   |   129      
 haixiang10000  |   129      
 haixiang100000 |   129      
 haixiang100001 |   129      
 haixiang100002 |   129      
 haixiang100003 |   129      
 haixiang100004 |   129      
(10 rows)      
Time: 8897.907 ms (00:08.898)      
```      
简单查询性能:      
创建索引      
```      
create index idx_employees1_1 on employees1(id);      
CREATE INDEX      
Time: 1436.346 ms (00:01.436)      
```      
基于KEY简单查询, 查询200万次的耗时.       
```      
do language plpgsql $$       
declare      
begin      
  for i in 1..2000000 loop      
    perform * from employees1 where id=i;      
  end loop;      
end;      
$$;      
DO      
Time: 9515.728 ms (00:09.516)      
```      
```      
db1=> select 9515.728/2000000;      
        ?column?              
------------------------      
 0.00475786400000000000      
(1 row)      
```      
### PG 1亿+:       
```      
db1=> INSERT INTO employees select * from employees;      
INSERT 0 27600000      
Time: 25050.665 ms (00:25.051)      
db1=> INSERT INTO employees select * from employees;      
INSERT 0 55200000      
Time: 64726.430 ms (01:04.726)      
```      
```      
db1=> select count(*) from employees;      
   count         
-----------      
 110400000      
(1 row)      
Time: 7286.152 ms (00:07.286)      
```      
```      
db1=> select count(distinct id) from employees;      
  count        
---------      
 2000000      
(1 row)      
Time: 39783.068 ms (00:39.783)      
```      
```      
db1=> select count(*) from (select id from employees group by id) t;      
  count        
---------      
 2000000      
(1 row)      
Time: 14668.305 ms (00:14.668)      
```      
```      
db1=> select t1.lname,count(*) from employees t1 join employees1 t2 using (id) group by t1.lname order by count(*) desc,lname limit 10;      
     lname      | count       
----------------+-------      
 haixiang1      |   516      
 haixiang10     |   516      
 haixiang100    |   516      
 haixiang1000   |   516      
 haixiang10000  |   516      
 haixiang100000 |   516      
 haixiang100001 |   516      
 haixiang100002 |   516      
 haixiang100003 |   516      
 haixiang100004 |   516      
(10 rows)      
Time: 33731.431 ms (00:33.731)      
```    
更新1.1亿  
```  
db1=> update employees set lname=lname||'new';  
UPDATE 110400000  
Time: 385372.063 ms (06:25.372)    
```  
创建索引:   
```    
db1=> create index idx_employees_1 on employees(id);    
CREATE INDEX    
Time: 70450.491 ms (01:10.450)    
```    
## MySQL vs PG 性能报表      
8核32G 1500G essd云盘， MySQL 8.0 vs PG 12        
数据量 | sql | MySQL耗时 | PG耗时 | PG vs MySQL性能倍数    
---|---|---|---|---    
20万 | {写入} 存储过程loop insert | 7.53 s | 1.29 s | 5.84    
20万 | {写入} SRF insert | 不支持 | 0.36 s | -     
40万 | {写入} INSERT INTO employees select \* from employees; | 3.25 s | 0.32 s | 10.16    
80万 | {写入} INSERT INTO employees select \* from employees; | 6.51 s | 0.84 s | 7.75    
160万 | {写入} INSERT INTO employees select \* from employees; | 12.93 s | 1.62 s | 7.95    
320万 | {写入} INSERT INTO employees select \* from employees; | 28.61 s | 3.58 s | 7.99    
640万 | {写入} INSERT INTO employees select \* from employees; | 56.48 s | 7.28 s | 7.76    
1280万 | {写入} INSERT INTO employees select \* from employees; | 115.30 s | 15.64 s | 7.37    
2760万 | {写入} INSERT INTO employees select \* from employees; | 278.62 s | 25.05 s | 11.12    
5520万 | {写入} INSERT INTO employees select \* from employees; | 673.40 s | 64.73 s | 10.40    
200万 | {普通查询} KV查询200万次. PS: 进程模型,建议实际应用时使用连接池，总连接控制在1000以内绝佳,未来支持内置线程池,几万连接完全没问题. | 70.23 s | 9.52 s | 7.38    
2560万 | {复杂查询} select count(\*) from employees; | 6.15 s | 0.60 s | 10.25    
2560万 | {复杂查询} select count(distinct id) from employees; | 16.67 s | 7.85 s | 2.12    
2560万 | {复杂查询} select count(\*) from (select id from employees group by id) t; | 15.52 s | 2.98 s | 5.21    
1.1亿 | {复杂查询} select count(\*) from employees; | 28 s | 7.29 s | 3.84   
1.1亿 | {复杂查询} select count(distinct id) from employees; | 77.73 s | 39.78 s | 1.95    
1.1亿 | {复杂查询} select count(\*) from (select id from employees group by id) t; | 84.64 s | 14.67 s | 5.77    
2760万 多对一JOIN 200万 | {JOIN + 运算} select t1.lname,count(\*) from employees t1 join employees1 t2 using (id) group by t1.lname order by count(\*) desc,lname limit 10; | 超过3小时未出结果 | 8.90 s | 至少 1213.48    
1.1亿 多对一JOIN 200万 | {JOIN + 运算} select t1.lname,count(\*) from employees t1 join employees1 t2 using (id) group by t1.lname order by count(\*) desc,lname limit 10; | 超过3小时未出结果 | 33.73 s | 至少 320.19     
1.1亿 | {更新} update employees set lname=concat(lname,'new'); | 1290.34 s | 70.45 s | 18.32     
1.1亿 | {创建索引} create index idx_employees_1 on employees(id); | 229.04 s | 70.45 s | 3.25    
通过以上测试, 在大多数场景中, 阿里云RDS PG相比MySQL的综合性能提升了1个数量级, PG+MySQL结合使用可以大幅降低企业成本. 疫情无情PG有情, 别裁员了, 建立多元化的技术栈, 强化企业IT能力更重要.       
更多应用场景和使用方法请参考回顾视频, 包括如何将mysql数据同步到pg(dts):      
[《阿里云 RDS PostgreSQL+MySQL 联合解决方案课程 - 汇总视频、课件》](../202001/20200118_02.md)        
- 2019.12.30 19:30 RDS PG产品概览，如何与mysql结合使用      
- 2019.12.31 19:30 如何连接PG，GUI(pgadmin, navicat, dms)，cli的使用      
- 2020.1.3 19:30 如何压测PG数据库、如何瞬间构造海量测试数据      
- 2020.1.6 19:30 mysql与pg类型、语法、函数等对应关系      
- 2020.1.7 19:30 如何将mysql数据同步到pg（dts）      
- 2020.1.8 19:30 PG外部表妙用 - mysql_fdw, oss_fdw（直接读写mysql、冷热分离）      
- 2020.1.9 19:30 PG应用场景介绍 - 并行计算，实时分析      
- 2020.1.10 19:30 PG应用场景介绍 - GIS      
- 2020.1.13 19:30 PG应用场景介绍 - 用户画像、实时营销系统      
- 2020.1.14 19:30 PG应用场景介绍 - 多维搜索      
- 2020.1.15 19:30 PG应用场景介绍 - 向量计算、图像搜索      
- 2020.1.16 19:30 PG应用场景介绍 - 全文检索、模糊查询      
- 2020.1.17 19:30 pg 数据分析语法介绍      
- 2020.1.18 19:30 pg 更多功能了解：扩展语法、索引、类型、存储过程与函数。如何加入PG技术社群     
[阿里云PG免费试用活动进行中](https://www.aliyun.com/database/postgresqlactivity), 请钉钉扫码加入咨询:      
![pic](../pic/dingding_pg_chat.jpg)      
[《外界对PostgreSQL 的评价》](../202002/20200206_02.md)        
[《PG buildin pool(内置连接池)版本 原理与测试》](../201805/20180521_03.md)        
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")