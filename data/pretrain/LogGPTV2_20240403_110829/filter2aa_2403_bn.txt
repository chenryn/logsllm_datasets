w0, 0 
  ldp  
x29, x30, [sp], 16 
  ret 
.LC0: 
; 32.01 in IEEE 754 format 
  .word 
-1374389535 
  .word 
1077936455 
.LC1: 
; 1.54 in IEEE 754 format 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 17 章  FPU 
199 
  .word 
171798692 
  .word 
1073259479 
.LC2: 
  .string"32.01 ^ 1.54 = %lf\n" 
启用优化功能之后，编译器使用 D0 和 D1 寄存器加载常量、继而传递给 pow()函数。pow()函数的运算
结果再由 D0 寄存器传递给 printf()函数。因为 printf()函数不仅可以通过 X-字头寄存器获取整型数据和指针，
而且还可以直接访问 D-字头寄存器获取浮点数参数，所以在传递浮点数时不需要修改或转移数据。 
17.6.5 MIPS 
指令清单 17.9  Optimizing GCC 4.4.5 (IDA) 
main: 
var_10  
= -0x10 
var_4  
= -4 
; function prologue: 
lui $gp, (dword_9C >> 16) 
addiu $sp, -0x20 
la 
$gp, (__gnu_local_gp & 0xFFFF) 
sw 
$ra, 0x20+var_4($sp) 
sw 
$gp, 0x20+var_10($sp) 
lui $v0, (dword_A4 >> 16) ; ? 
; load low 32-bit part of 32.01: 
lwc1 $f12, dword_9C 
; load address of pow() function: 
lw 
$t9, (pow & 0xFFFF)($gp) 
; load high 32-bit part of 32.01: 
lwc1 $f13, $LC0 
lui $v0, ($LC1 >> 16) ; ? 
; load low 32-bit part of 1.54: 
lwc1 $f14, dword_A4 
or 
$at, $zero ; load delay slot, NOP 
; load high 32-bit part of 1.54: 
lwc1 $f15, $LC1 
; call pow(): 
jalr $t9 
or 
$at, $zero ; branch delay slot, NOP 
lw 
$gp, 0x20+var_10($sp) 
; copy result from $f0 and $f1 to $a3 and $a2: 
mfc1 $a3, $f0 
lw 
$t9, (printf & 0xFFFF)($gp) 
mfc1 $a2, $f1 
; call printf(): 
lui $a0, ($LC2 >> 16)  # "32.01 ^ 1.54 = %lf\n" 
jalr $t9 
la 
$a0, ($LC2 & 0xFFFF)  # "32.01 ^ 1.54 = %lf\n" 
; function epilogue: 
lw 
$ra, 0x20+var_4($sp) 
; return 0: 
move $v0, $zero 
jr 
$ra 
addiu $sp, 0x20 
.rodata.str1.4:00000084 $LC2: 
   .ascii "32.01 ^ 1.54 = %lf\n" 
; 32.01: 
.rodata.cst8:00000098 $LC0:      .word 0x40400147 
# DATA XREF: main+20 
.rodata.cst8:0000009C dword_9C: .word 0xAE147AE1    # DATA XREF: main 
.rodata.cst8:0000009C                                    # main+18 
; 1.54: 
.rodata.cst8:000000A0 $LC1:      .word 0x3FF8A3D7    # DATA XREF: main+24 
.rodata.cst8:000000A0                                    # main+30 
.rodata.cst8:000000A4 dword_A4: .word 0xA3D70A4     # DATA XREF: main+14 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
200 
逆向工程权威指南（上册） 
这段程序的 LUI 指令将双精度浮点数的高 16 位复制到$V0 寄存器。其中的（汇编宏>>16）是经 IDA 整理的
伪代码，它的作用是对 32 位数据右移 16 位、以得到高 16 位数。LUI 指令只能操作 16 位立即数。不过两个 LWC1
之前的 LUI 指令似乎没有意义，笔者给它们注释上了问号。如果哪位读者知晓其中玄机，还请联系作者本人。 
MFC1 是“Move From Coprocessor 1”的缩写。在 MIPS 系统上，第 1 号协作处理器是 FPU。可见，
这条指令首先读取协作处理器的寄存器的值，然后再把这个值复制到 CPU 通用寄存器 GPR。不难看出，
这条指令把 pow()函数的运算结果复制到$A3 和$A2 寄存器里，然后 printf()函数从这对寄存器里提取一对
32 位数据、再把它输出为 64 位双精度浮点数。 
17.7 比较说明 
本节围绕下述程序进行演示： 
#include  
double d_max (double a, double b) 
{ 
  if (a>b) 
return a; 
  return b;  
}; 
int main()  
{ 
  printf ("%f\n", d_max (1.2, 3.4)); 
  printf ("%f\n", d_max (5.6, -4)); 
}; 
虽然这个函数很短，但是它的汇编代码并不那么简单。 
17.7.1 x86 
Non-optimizing MSVC 
指令清单 17.10  Non-optimizing MSVC 2010 
PUBLIC    _d_max 
_TEXT    SEGMENT 
_a$ = 8      
; size =8 
_b$ = 16     
; size = 8 
_d_max     PROC 
    push  ebp 
    mov    ebp, esp 
    fld    QWORD PTR _b$[ebp] 
; current stack state: ST(0) = _b 
; compare _b (ST(0)) and _a, and pop register 
    fcomp  QWORD PTR _a$[ebp] 
; stack is empty here 
    fnstsw ax 
    test   ah, 5 
    jp     SHORT $LN1@d_max 
; we are here only if a>b 
    fld    QWORD PTR _a$[ebp] 
    jmp    SHORT $LN2@d_max 
$LN1@d_max: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 17 章  FPU 
201 
    fld    QWORD PTR _b$[ebp] 
$LN2@d_max: 
    pop    ebp 
    ret    0 
_d_max     ENDP 
可见，FLD 指令把汇编宏_b 加载到 ST(0)寄存器。 
FCOMP 首先比较 ST（0）与_a 的值，然后根据比较的结果设置 FPU 状态字（寄存器）的 C3/C2/C0
位。FPU 的状态字寄存器是一个 16 位寄存器，用于描述 FPU 的当前状态。 
在设置好相应比特位之后，FCOMP 指令还会从栈里抛出（POP）一个值。FCOM 与 FCOMP 的功能十
分相似。FCOM 指令只根据数值比较的结果设置状态字，而不会再操作 FPU 的栈。 
不幸的是，在 Intel P6
①之前问世的 CPU 上，条件转移指令不能根据 C3/C2/C0 状态位进行条件判断。
考虑到那时候的 FPU 在物理上尚与 CPU 分离，所以这种不足在当时大概还算不上是缺陷。 
自 Intel P6 问世之后，FCOMI/FCOMIP/FUCOMI/FUCOMIP 指令不仅延续了先前各指令的功能，而且
新增了设置 CPU 标志位 ZF/PF/CF 的功能。 
FNSTSW 指令把 FPU 状态寄存器的值复制到 AX 寄存器。C3/C2/C0 标志位对应 AX 的第 14/10/8 位。复制数
值并不会改变标志位（bit）的数权（位置）。标志位会集中在 AX 寄存器的高地址位区域——即 AH 寄存器里。 
 如果 b>a，则 C3、C2、C0 寄存器的值会分别是 0、0、0。 
 如果 a>b，则寄存器的值会分别是 0、0、1。 
 如果 a=b，则寄存器的值会分别是 1、0、0。 
 如果出现了错误（NaN 或数据不兼容），则寄存器的值是 1、1、1。 
在 FNSTSW 指令把 FPU 状态寄存器的值复制到 AX 寄存器后，AX 寄存器各个 bit 位与 C0～C3 寄存
器的对应关系如下图所示。 
14 
10 
9 
8 
C3 
C2 
C1 
C0 
若以 AH 寄存器的视角来看，C0～C3 与各 bit 位的对应关系则是： 
6 
2 
1 
0 
C3 
C2 
C1 
C0 
“test ah, 5”指令把 ah 的值（FPU 标志位的加权求和值）和 0101（二进制的 5）做与（AND）运算，
并设置标志位。影响 test 结果的只有第 0 比特位的 C0 标志位和第 2 比特位的 C2 标志位，因为其他的位都
会被置零。 
接下来，我们首先要介绍奇偶校验位 PF（parity flag）。 
PF 标志位的作用是判定运算结果中的“1”的个数，如果“1”的个数为偶数，则 PF 的值为 1，否则其值为 0。 
检验奇偶位通常用于判断处理过程是否出现故障，并不能判断这个数值是奇数还是偶数。FPU 有四个
条件标志位（C0 到 C3）。但是，必须把标志位的值组织起来、存放在标志位寄存器中，才能进行奇偶校验
位的正确性验证。FPU 标志位的用途各有不同：C0 位是进位标志位 CF，C2 是奇偶校验位 PF，C3 是零标
志位 ZF。在使用 FUCOM 指令（FPU 比较指令的通称）时，如果操作数里出现了不可比较的浮点值（非
数值型内容 NaN 或其他无法被指令支持的格式），则 C2 会被设为 1。 
如果 C0 和 C2 都是 0 或都是 1，则设 PF 标志为 1 并触发 JP 跳转（Jump on Parity）。前面对 C3/C2/C0
的取值进行了分类讨论，C2 和 C0 的数值相同的情况分为 b>a 和 a=b 这两种情况。因为 test 指令把 ah 的
值与 5 进行“与”运算，所以 C3 的值无关紧要。 
在此之后的指令就很简单了。如果触发了 JP 跳转，则 FLD 指令把变量_b 的值复制到 ST(0)寄存器，
① Pentium Pro, Pentium II 等 CPU。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
202 
逆向工程权威指南（上册） 
否则变量_a 的值将会传递给 ST（0）寄存器。 
如果需要检测 C2 的状态 
如果 TEST 指令遇到错误（NaN 等情形），则 C2 标志位的值会被设置为 1。不过我们的程序不检测这
类错误。如果编程人员需要处理 FPU 的错误，他就不得不添加额外的错误检查指令。 
使用 OllyDbg 调试本章例一（a＝1.2，b＝3.4） 
使用 OllyDbg 打开编译好的程序，如图 17.6 所示。 
图 17.6  OllyDbg：执行第一条 FLD 指令 
我们可以在数据栈中看到两对 32 位的值，它们是当前函数的两个参数：a=1.2, b=3.4。此时ST(0)寄存器已经读
取了变量b 的值（3.4）。下一步将执行 FCOMP 指令。OllyDbg 会提示FCOMP 的第二个参数，这个参数也在栈里。 
执行 FCOMP 指令，如图 17.7 所示。 
图 17.7  OllyDbg：执行 FCOMP 指令 
此时 FPU 的条件标志位都是零。刚才被 POP 的数值已经转移到 ST(7)寄存器里了。本章已经在 5.1 节
介绍过 FPU 的寄存器和数据栈，这里不再复述。 
然后运行 FNSTSW 指令，如图 17.8 所示。 
可见 AX 寄存器的值是零。确实，FPU 的所有标志位目前都是零。OllyDbg 将 FNSTSW 识别为 FSTSW
指令，这两条指令是同一条指令。 
接下来运行 TEST 指令，如图 17.9 所示。 
PF 标志的值为 1。这是因为 0 里面有偶数个 1，所以 PF 是 1。OllyDbg 将 JP 识别为 JPE 指令，它们是
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 17 章  FPU 
203 
同一个指令。在下一步里，程序会触发 JP 跳转。 
图 17.8  OllyDbg：执行 FNSTSW 指令 
图 17.9  OllyDbg：执行 Test 指令 
如图 17.10 所示，程序会触发 JPE 跳转，ST（0）将读取变量 b 的值 3.4。 
图 17.10  执行第二条 FLD 指令 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
204 
逆向工程权威指南（上册） 
此后函数结束。 
调试本章例二（a=5.6, b=−4） 
首先使用 OllyDbg 加载编译好的可执行程序，如图 17.11 所示。 
图 17.11  OllyDbg：执行第一条 FLD 指令 
这个函数有两个参数，a 是 5.6、b 是−4。此刻，参数 b 已经加载到 ST(0)寄存器，即将执行 FCOMP
指令。OllyDbg 会在栈里显示 FCOMP 的另一个参数。 
执行 FCOMP 指令，如图 17.12 所示。 
图 17.12  OllyDbg：执行 FCOMP 指令 
C0 之外的 FPU 标志位都是 0。 
然后执行 FNSTSW 指令，如图 17.13 所示。 
此时 AX 寄存器的值是 0x100。C0 标志位是 AX 寄存器的第 8 位（从第零位开始数）。 
接下来执行 TEST 指令。 
如图 17.14 所示，PF 的值为 0。毕竟，把 0x100 转换为 2 进制数后，里面只有 1 个 1，1 是奇数。此后
不会触发 JPE 跳转。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 17 章  FPU 
205 
图 17.13  OllyDbg：执行 FNSTSW 指令 
图 17.14  OllyDbg：执行 TEST 指令 
因为不会触发 JPE 跳转，所以 FLD 从 a 里取值，把 5.6 赋值给了 ST(0)寄存器，如图 17.15 所示。 
图 17.15  OllyDbg：执行第二条 FLD 指令 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
206 
逆向工程权威指南（上册） 
Optimizing MSVC 2010 
指令清单 17.11  Optimizing MSVC 2010 
_a$ = 8  
   ; size = 8 
_b$ = 16  
   ; size = 8 
_d_max  
PROC 
    fld  
 QWORD PTR _b$[esp-4] 
    fld  
 QWORD PTR _a$[esp-4] 
; current stack state: ST(0) = _a, ST(1) = _b 
    fcom   ST(1) ; compare _a and ST(1) = (_b) 
    fnstsw   ax 
    test   ah, 65 ; 00000041H 
    jne  
 SHORT $LN5@d_max 
; copy ST(0) to ST(1) and pop register, 
; leave (_a) on top 
    fstp   ST(1) 
; current stack state: ST(0) = _a 
    ret 
 0 
$LN5@d_max: 
; copy ST(0) to ST(0) and pop register, 
; leave (_b) on top 
    fstp 
 ST(0) 
; current stack state: ST(0) = _b 
    ret 0 
_d_max ENDP 
FCOM 指令和前面用过的 FCOMP 指令略有不同，它不操作 FPU 栈。而且本例的操作数也和前文有区
别，这里它是逆序的。所以，FCOM 生成的条件标志位的涵义也与前例不同。 
 如果 a>b，则 C3、C2、C0 位的值分别为 0、0、0。 
 如果 b>a，则对应数值为 0、0、1。 
 如果 a=b，则对应数值为 1、0、0。 
就是说，“test ah, 65”这条指令仅仅比较两个标志位——C3（第6 位/bit）和C0（第0 位/bit）。在a>b 的情况下，
两者都应为0：这种情况下，程序不会被触发 JNE 跳转，并会执行后面的FSTP ST(1)指令，把ST（0）的值复制到
操作数中，然后从 FPU 栈里抛出一个值。换句话说，这条指令把 ST（0）的值（即变量_a 的值）复制到 ST（1）
寄存器；此后栈顶的2 个值都是_a。然后，相当于POP 出一个值来，使ST(0)寄存器的值为_a，函数随即结束。 
在 b>a 或 a==b 的情况下，程序将触发条件转移指令 JNE。从 ST(0)取值、再赋值给 ST(0)寄存器，相当于
NOP 操作没有实际意义。接着它从栈里 POP 出一个值，使 ST(0)的值为先前 ST(1)的值，也就是变量_b。然后
结束本函数。大概是因为 FPU 的指令集里没有 POP 并舍弃栈顶值的指令，所以才会出现这样的汇报指令。 
使用 OllyDbg 调试例一：a=1.2/b=3.4 的程序 
在执行两条 FLD 指令之后，情况如图 17.16 所示。 
此后将执行 FCOM 指令。OllyDbg 会显示 ST(0)和 ST(1)的值。 
在执行 FCOMP 指令之后，C0 为 1，其他标志全部为 0，如图 17.17 所示。 
在执行 FNSTSW 指令之后，AX＝0x3100，如图 17.18 所示。 
然后运行 TEST，如图 17.19 所示。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 17 章  FPU 
207 
图 17.16  OllyDbg：执行过两条 FLD 指令之后的情况 
图 17.17  OllyDbg：执行 FCOM 指令 
图 17.18  OllyDbg：执行 FNSTSW 指令 
此刻 ZF＝0，即将触发条件转移指令。 
在执行 FSTP ST（即 ST（0））的时候，FPU 把 1.2 从栈里 POP 了出来，栈顶变为 3.4，如图 17.20 所示。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
208 
逆向工程权威指南（上册） 
图 17.19  OllyDbg：执行 TEST 指令 
图 17.20  OllyDbg：执行 FSTP 指令 
可见“FSTP ST”指令与“POP FPU 栈”指令的作用相似。 
使用 OllyDbg 调试例二：a=5.6/b=-4 的程序 
在执行两条 FLD 指令之后的情况如图 17.21 所示。 