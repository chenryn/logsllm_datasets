:::
为了使 `kdump`{.literal}
能够捕获内核崩溃转储并保存以便进一步分析，系统内存部分必须永久保留给捕获内核。保留时，主内核无法使用系统内存的这一部分。
内存要求因某些系统参数而异。主要因素之一就是系统的硬件构架。要找出确切的机器架构（如
Intel 64 和 AMD64，也称为 x86_64）并将其输出到标准输出，请使用以下命令：
``` screen
$ uname -m
```
表 10.1 列出了在最新可用版本中为 `kdump`{.literal}
自动保留内存大小的最低内存要求。根据系统构架和可用物理内存的大小更改。
::: table
[]{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#idm139694377003408}
**表 13.1. kdump 最少需要保留的内存量**
::: table-contents
  构架                                     可用内存          最小保留内存
  ---------------------------------------- ----------------- --------------
  AMD64 和 Intel 64 (`x86_64`{.literal})   1 GB 到 4 GB      160 MB RAM。
                                           4 GB 到 64 GB     192 MB RAM。
                                           64 GB 到 1 TB     256 MB RAM。
                                           1TB 及更多        512 MB RAM。
  64 位 ARM 架构 （`arm64`{.literal}）     2 GB 及更多       448 MB RAM。
  IBM Power 系统 (`ppc64le`{.literal})     2 GB 到 4 GB      384 MB RAM。
                                           4 GB 到 16 GB     512 MB RAM。
                                           16 GB 到 64 GB    1 GB RAM。
                                           64 GB 到 128 GB   2 GB RAM。
                                           128 GB 及更多     4 GB RAM。
  IBM Z (`s390x`{.literal})                1 GB 到 4 GB      160 MB RAM。
                                           4 GB 到 64 GB     192 MB RAM。
                                           64 GB 到 1 TB     256 MB RAM。
                                           1TB 及更多        512 MB RAM。
:::
:::
在很多系统中，`kdump`{.literal}
可以估算所需内存量并自动保留。默认情况下，此行为是启用的，但仅适用于内存总量超过特定数量的系统，这些内存因系统架构而异。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
根据系统中内存总量自动配置保留内存是最佳工作量估算。实际需要的内存可能因其它因素（如
I/O 设备）而有所不同。使用内存不足将导致 debug 内核无法在内核 panic
的情况下作为捕获内核引导。要避免这个问题，请足够增大崩溃内核内存。
:::
::: itemizedlist
**其它资源**
-   [RHEL8 次要版本间 crashkernel
    参数有什么变化？](https://access.redhat.com/solutions/5907911){.link}
-   [技术能力和限制表](https://access.redhat.com/articles/rhel-limits++){.link}
-   [配置 kdump
    内存用量](#configuring-kdump-on-the-command-line_managing-monitoring-and-updating-the-kernel.html#configuring-kdump-memory-usage_configuring-kdump-on-the-command-line "配置 kdump 内存用量"){.link}
-   [在 web 控制台中配置 kdump
    内存用量和目标位置](#configuring-kdump-in-the-web-console_managing-monitoring-and-updating-the-kernel.html#configuring-kdump-memory-usage-and-target-location-in-web-console_configuring-kdump-in-the-web-console "在 web 控制台中配置 kdump 内存用量和目标位置"){.link}
-   [自动内存保留的最小阈值](#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#minimum-threshold-for-automatic-memory-reservation_supported-kdump-configurations-and-targets "自动内存保留的最小阈值"){.link}
:::
:::
::: section
::: titlepage
# []{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#minimum-threshold-for-automatic-memory-reservation_supported-kdump-configurations-and-targets}自动内存保留的最小阈值 {.title}
:::
在某些系统中，可以通过在引导装载程序配置文件中使用
`crashkernel=auto`{.literal} 参数为 `kdump`{.literal}
自动分配内存，也可以在图形配置实用程序中启用这个选项。但是，要使此自动预留发挥作用，系统中需要提供一定大小的总内存。数量因系统架构的不同而有所不同。
表 10.2
列出自动分配内存的阈值。如果系统内存小于指定阈值，则必须手动配置内存。
::: table
[]{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#idm139694379245440}
**表 13.2. 自动保留内存所需的最小内存量**
::: table-contents
  构架                                     所需的内存
  ---------------------------------------- ------------
  AMD64 和 Intel 64 (`x86_64`{.literal})   2 GB
  IBM Power 系统 (`ppc64le`{.literal})     2 GB
  IBM  Z (`s390x`{.literal})               4 GB
:::
:::
::: itemizedlist
**其它资源**
-   [配置 kdump
    内存用量](#configuring-kdump-on-the-command-line_managing-monitoring-and-updating-the-kernel.html#configuring-kdump-memory-usage_configuring-kdump-on-the-command-line "配置 kdump 内存用量"){.link}
-   [在 web 控制台中配置 kdump
    内存用量和目标位置](#configuring-kdump-in-the-web-console_managing-monitoring-and-updating-the-kernel.html#configuring-kdump-memory-usage-and-target-location-in-web-console_configuring-kdump-in-the-web-console "在 web 控制台中配置 kdump 内存用量和目标位置"){.link}
:::
:::
::: section
::: titlepage
# []{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#supported-kdump-targets_supported-kdump-configurations-and-targets}支持的 kdump 目标 {.title}
:::
当捕获内核崩溃时，vmcore
转储文件可以直接写入到设备中，作为文件存储在本地文件系统中，或者通过网络发送。下表包含
`kdump`{.literal} 支持或者明确不支持的转储目标的完整列表。
::: informaltable
  类型                                                              支持的目标                                                                                                                                                                不支持的目标
  ----------------------------------------------------------------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ----------------------------------------------------------------------------------------
  原始设备                                                          所有本地附加的原始磁盘和分区。                                                                                                                                             
  本地文件系统                                                      直接附加的磁盘驱动器、硬件 RAID 逻辑驱动器、LVM 设备以及 `mdraid`{.literal} 阵列中的 `ext2`{.literal}、`ext3`{.literal}、`ext4`{.literal} 和 `xfs`{.literal} 文件系统。   在此表中未明确列出的任何本地文件系统，包括 `auto`{.literal} 类型（自动文件系统检测）。
  远程目录                                                          使用 `NFS`{.literal} 或 `SSH`{.literal} 协议通过 `IPv4`{.literal} 访问的远程目录。                                                                                        使用 `NFS`{.literal} 协议访问的 `rootfs`{.literal} 文件系统上的远程目录。
  通过硬件和软件启动器使用 `iSCSI`{.literal} 协议访问的远程目录。   使用 `be2iscsi`{.literal} 硬件上的 `iSCSI`{.literal} 协议访问的远程目录.                                                                                                  基于多路径的存储。
                                                                                                                                                                                                                                              通过 `IPv6`{.literal} 访问的远程目录.
                                                                                                                                                                                                                                              使用 `SMB`{.literal} 或 `CIFS`{.literal} 协议访问的远程目录.
                                                                                                                                                                                                                                              使用 `FCoE`{.literal} （[*以太网光纤通道*]{.emphasis}）协议访问的远程目录。
                                                                                                                                                                                                                                              使用无线网络接口访问的远程目录。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
利用固件支持的转储 (`fadump`{.literal}) 捕获 vmcore，并使用 SSH 或 NFS
协议将其保存到远程机器中，这会导致网络接口重命名为
`kdump-`{.literal}。如果 ``{.literal}
是通用的，则会发生重命名，如 `*eth#`{.literal}、`net#`{.literal}
等。这是因为初始 RAM 磁盘 (`initrd`{.literal}) 中的 vmcore
捕获脚本在网络接口名称中添加 [*kdump-*]{.emphasis}
前缀来保护持久性命名。由于同一 `initrd`{.literal}
也用于常规启动，因此生产内核的接口名称也会更改。
:::
::: itemizedlist
**其它资源**
-   [配置 kdump
    目标](#configuring-kdump-on-the-command-line_managing-monitoring-and-updating-the-kernel.html#configuring-the-kdump-target_configuring-kdump-on-the-command-line "配置 kdump 目标"){.link}
-   [在 web 控制台中配置 kdump
    内存用量和目标位置](#configuring-kdump-in-the-web-console_managing-monitoring-and-updating-the-kernel.html#configuring-kdump-memory-usage-and-target-location-in-web-console_configuring-kdump-in-the-web-console "在 web 控制台中配置 kdump 内存用量和目标位置"){.link}
:::
:::
::: section
::: titlepage
# []{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#supported-kdump-filtering-levels_supported-kdump-configurations-and-targets}支持的 kdump 过滤等级 {.title}
:::
要缩小转储文件的大小，`kdump`{.literal} 使用 `makedumpfile`{.literal}
内核收集器压缩数据，并选择性地省略不需要的信息。下表包含
`makedumpfile`{.literal} 实用程序目前支持的过滤级别的完整列表。
::: informaltable
  选项             描述
  ---------------- ----------
  `1`{.literal}    零页
  `2`{.literal}    缓存页
  `4`{.literal}    缓存私有
  `8`{.literal}    用户页
  `16`{.literal}   可用页
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`makedumpfile`{.literal} 命令支持删除透明大内存页和 hugetlbfs
页面。考虑这两种类型的大页用户页面，并使用 `-8`{.literal} 级别将其删除。
:::
::: itemizedlist
**其它资源**
-   [配置内核收集器](#configuring-kdump-on-the-command-line_managing-monitoring-and-updating-the-kernel.html#configuring-the-core-collector_configuring-kdump-on-the-command-line "配置内核收集器"){.link}
:::
:::
::: section
::: titlepage
# []{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#supported-default-failure-responses_supported-kdump-configurations-and-targets}支持的默认故障响应 {.title}
:::
默认情况下，当 `kdump`{.literal}
创建内核转储失败时，操作系统会重启。但是，您可以将 `kdump`{.literal}
配置为在将内核转储保存到主目标时执行不同的操作。下表列出了目前支持的所有默认操作。
::: informaltable
  选项                         描述
  ---------------------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  `dump_to_rootfs`{.literal}   尝试将内核转储保存到 root 文件系统。这个选项在与网络目标合并时特别有用：如果网络目标无法访问，这个选项配置 kdump 以在本地保存内核转储。之后会重启该系统。
  `reboot`{.literal}           重启系统，这个过程会丢失 core 转储文件。
  `halt`{.literal}             关闭系统，这个过程会丢失 core 转储文件。
  `poweroff`{.literal}         关闭系统，这个此过程会丢失 core 转储。
  `shell`{.literal}            从 initramfs 内运行 shell 会话，允许用户手动记录核心转储。
  `final_action`{.literal}     在 `kdump`{.literal} 成功，或 `shell`{.literal} 或 `dump_to_rootfs`{.literal} 失败操作完成后，启用额外的操作，如 `reboot`{.literal}、`halt`{.literal} 和 `poweroff`{.literal} 操作。默认的 `final_action`{.literal} 选项为 `reboot`{.literal}。
:::
::: itemizedlist
**其它资源**
-   [配置 kdump
    默认失败响应](#configuring-kdump-on-the-command-line_managing-monitoring-and-updating-the-kernel.html#configuring-the-kdump-default-failure-responses_configuring-kdump-on-the-command-line "配置 kdump 默认失败响应"){.link}
:::
:::
::: section
::: titlepage
# []{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#using-final_action-parameter_supported-kdump-configurations-and-targets}使用 final_action 参数 {.title}
:::
`final_action`{.literal} 参数允许您在 `kdump`{.literal} 成功后，或使用
`shell`{.literal} 或 `dump_to_rootfs`{.literal} 调用的
`failure_response`{.literal} 机制后使用某些额外操作，如
`reboot`{.literal}、`halt`{.literal} 和 `poweroff`{.literal}
操作。如果未指定 `final_action`{.literal} 选项，则默认为
`reboot`{.literal}。
::: orderedlist
**流程**
1.  编辑 `'/etc/kdump.conf`{.literal} 文件并添加
    `final_action`{.literal} 参数。
    ``` screen
    final_action 
    ```
2.  重启 `kdump`{.literal} 服务：
    ``` screen
    kdumpctl restart
    ```
:::
:::
::: section
::: titlepage
# []{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#estimating-kdump-size_supported-kdump-configurations-and-targets}估算 kdump 大小 {.title}
:::
在规划和构建 kdump 环境时，需要知道在生成转储文件前需要多少空间。
`makedumpfile --mem-usage`{.literal}
命令提供有关可扩展页面的有用报告，并可用于确定您要分配的转储级别。当系统处于代表负载下时运行此命令，否则
`makedumpfile --mem-usage`{.literal} 会返回比生产环境中预期的值小的值。
``` screen
[root@hostname ~]# makedumpfile --mem-usage /proc/kcore
TYPE            PAGES                   EXCLUDABLE      DESCRIPTION
----------------------------------------------------------------------
ZERO            501635                  yes             Pages filled with zero
CACHE           51657                   yes             Cache pages
CACHE_PRIVATE   5442                    yes             Cache pages + private
USER            16301                   yes             User process pages
FREE            77738211                yes             Free pages
KERN_DATA       1333192                 no              Dumpable kernel data
```
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
`makedumpfile --mem-usage`{.literal}
命令在[**页面**]{.strong}中报告。这意味着您必须根据内核页面大小计算使用的内存大小。默认情况下，Red
Hat Enterprise Linux 内核为 AMD64 和 Intel 64 构架使用 4 KB 页面，为 IBM
POWER 构架使用 64 KB 页面。
:::
:::
:::
[]{#firmware-assisted-dump-mechanisms_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#firmware-assisted-dump-mechanisms_managing-monitoring-and-updating-the-kernel.html#firmware-assisted-dump-mechanisms_managing-monitoring-and-updating-the-kernel}第 14 章 固件支持的转储机制 {.title}
:::
固件支持的转储 (fadump) 是一个转储捕获机制，作为 IBM POWER 系统中
`kdump`{.literal} 机制的替代选择。`kexec`{.literal} 和 `kdump`{.literal}
机制可用于在 AMD64 和 Intel 64
系统中捕获内核转储。但是，一些硬件（如小型系统和大型机计算机）利用板载固件隔离内存区域，并防止意外覆盖对崩溃分析很重要的数据。本节论述了
`fadump`{.literal} 机制以及如何与 RHEL 集成。`fadump`{.literal}
实用程序针对 IBM POWER 系统上的扩展转储功能进行了优化。
::: section
::: titlepage
# []{#firmware-assisted-dump-mechanisms_managing-monitoring-and-updating-the-kernel.html#firmware-assisted-dump-on-ibm-powerpc-hardware_firmware-assisted-dump-mechanisms}IBM PowerPC 硬件支持转储固件 {.title}
:::
`fadump`{.literal} 实用程序从带有 PCI 和 I/O 设备的完全重设系统中捕获
`vmcore`{.literal}
文件。这种机制使用固件在崩溃期间保留内存区域，然后重复使用
`kdump`{.literal} 用户空间脚本保存 `vmcore`{.literal}
文件。内存区域由所有系统内存内容组成，但引导内存、系统注册和硬件页面表条目
(PTE) 除外。