title:CSPAutoGen: Black-box Enforcement of Content Security Policy upon
Real-world Websites
author:Xiang Pan and
Yinzhi Cao and
Shuangping Liu and
Yu Zhou and
Yan Chen and
Tingzhe Zhou
CSPAutoGen: Black-box Enforcement of Content Security
Policy upon Real-world Websites
Xiang Pan1 Yinzhi Cao2 Shuangping Liu1 Yu Zhou 1 Yan Chen3,1 Tingzhe Zhou2
1Northwestern University, Illinois, USA
2Lehigh University, Pennsylvania, USA
3Zhejiang University, Zhejiang, China
{xiangpan2011, shuangping-liu, yuzhou2016}@u.northwestern.edu
{yinzhi.cao, tiz214}@lehigh.edu PI:EMAIL
ABSTRACT
Content security policy (CSP)—which has been standardized by
W3C and adopted by all major commercial browsers—is one of the
most promising approaches for defending against cross-site script-
ing (XSS) attacks. Although client-side adoption of CSP is suc-
cessful, server-side adoption is far behind the client side: according
to a large-scale survey, less than 0.002% of Alexa Top 1M websites
enabled CSP.
To facilitate the adoption of CSP, we propose CSPAutoGen to
enable CSP in real-time, without server modiﬁcations, and being
compatible with real-world websites. Speciﬁcally, CSPAutoGen
trains so-called templates for each domain, generates CSPs based
on the templates, rewrites incoming webpages on the ﬂy to apply
those generated CSPs, and then serves those rewritten webpages
to client browsers. CSPAutoGen is designed to automatically en-
force the most secure and strict version of CSP without enabling
“unsafe-inline” and “unsafe-eval”, i.e., CSPAutoGen can handle all
the inline and dynamic scripts.
We have implemented a prototype of CSPAutoGen, and our eval-
uation shows that CSPAutoGen can correctly render all the Alexa
Top 50 websites. Moreover, we conduct extensive case studies on
ﬁve popular websites, indicating that CSPAutoGen can preserve the
behind-the-login functionalities, such as sending emails and post-
ing comments. Our security analysis shows that CSPAutoGen is
able to defend against all the tested real-world XSS attacks.
1.
INTRODUCTION
Cross-site scripting (XSS) vulnerabilities—though being there
for more than ten years—are still one of the most commonly found
web application vulnerabilities in the wild. Towards this end, re-
searchers have proposed numerous defense mechanisms [12,14,17,
21, 30, 32, 40, 41] targeting various categories of XSS vulnerabili-
ties. Among these defenses, one widely-adopted approach is called
Content Security Policy (CSP) [41], which has been standardized
by W3C [1] and adopted by all major commercial browsers, such
as Google Chrome, Internet Explorer, Safari, and Firefox.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24-28, 2016, Vienna, Austria
c(cid:13) 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978384
Though client-side adoption has been successful, server-side adop-
tion of CSP proves more worrisome: according to an Internet-scale
survey [45] of 1M websites, at the time of the study, only 2% of top
100 Alexa websites enabled CSP, and 0.00086% of 900,000 least
popular sites did so. Such low adoption rate of CSP in modern web-
sites is because CSP1 requires server modiﬁcations. That is, all the
inline JavaScript and eval statements need to be removed from a
website without breaking its intended functionality, which brings
extensive overhead for website developers or administrators.
To facilitate server deployment, in related work, deDacota [12]
and AutoCSP [14] analyze server-side code using program analy-
sis, infer CSPs, and modify those code to enable the inferred CSPs.
Another related work, autoCSP2 [17], infers CSPs based on vio-
lation reports and enforces the inferred CSPs later on. However,
deDacota and AutoCSP—due to their white-box property—require
server modiﬁcation. Additionally, both approaches are speciﬁc to
websites written in certain web languages. Another approach, au-
toCSP, does not support inline scripts with runtime information and
dynamic scripts, and thus websites with those scripts cannot work
properly. According to our manual analysis, 88% of Alexa Top 50
websites contain such script usages.
In this paper, we propose CSPAutoGen, a real-time, black-box
enforcement of CSP without any server modiﬁcations and being
compatible with real-world websites. The key insight is that al-
though web scripts may appear in different formats or change in
runtime, they are generated from uniform templates. Therefore,
CSPAutoGen can infer the templates behind web scripts and de-
couple web contents in a script from the script’s inherent structure.
Speciﬁcally, CSPAutoGen ﬁrst groups scripts in webpages un-
der a domain, and infers script templates, deﬁned as training phase.
Next, in the so-called rewriting phase, CSPAutoGen generates CSPs
based on the webpage and templates, and then modiﬁes webpages
on the ﬂy—which could be at a server gateway, an enterprise gate-
way or a client browser—to insert the generated CSPs and apply
them at client browsers. Lastly, a client-side library added in the
rewriting phase will detect additional scripts generated at client side
during runtime and execute these scripts that match the templates.
Below we discuss two important mechanisms used in CSPAutoGen:
1In this paper, unless speciﬁed, our deﬁnition of CSP refers to
the strictest CSP, i.e., the default one with no “unsafe-inline” and
“unsafe-eval” options enabled. Although CSP provides options like
“unsafe-inline” and “unsafe-eval” for compatibility, these options
are not safe and open doors for XSS attacks.
2Note that AutoCSP [14] and autoCSP [17] are two pieces of re-
lated work with the difference in their ﬁrst letter capitalization.
• Template Mechanism. The proposed template—used to match
incoming scripts at the rewriting and runtime phase—is com-
posed of two parts: generalized Abstract Syntax Tree (gAST)
and a type system. The former captures the inherent structure of
scripts, e.g., for loop and if statement; the latter abstracts runtime
generated information, e.g., content-speciﬁc Uniform Resource
Locator (URL), to its corresponding type, such as URL type.
• Secure JavaScript Transformation. CSPAutoGen securely trans-
forms common usages of JavaScript, such as dynamic scripts and
inline scripts, to comply with the strictest CSP. Particularly, we
propose a novel technique called symbolic template to securely
execute dynamic scripts in eval or eval-like functions with
“unsafe-eval” disabled. CSPAutoGen disables “unsafe-inline” as
well: it imports pre-included inline scripts, i.e., these embedded
in a script tag, as external ﬁles, and monitors DOM tree changes
to re-import runtime-included inline scripts, i.e., these generated
by DOM operations.
To evaluate CSPAutoGen, we focus on the following metrics and
obtain corresponding results as follows:
• Robustness. Our evaluation on Alexa Top 50 websites shows
that the median matching rate of unknown scripts is 99.2%, and
templates can sustain high matching rate for at least 60 days.
• Correctness. Our evaluation on an open source framework shows
• Security. Our evaluation on six real-word vulnerable web appli-
cations shows that CSPAutoGen can protect all of them against
XSS attacks. Moreover, the evaluation on Alexa Top 50 websites
shows that the CSP policies automatically generated by CSPAu-
toGen are more secure than the ones generated by website them-
selves: none of them support both “unsafe-inline” and “unsafe-
eval”.
• Compatibility. Our evaluation on Alexa Top 50 websites shows
that all the 50 websites can be correctly displayed. In addition,
we extensively explore the behind-the-login functionalities—such
as sending emails and web search—of ﬁve popular websites:
they all work properly.
• Performance. The performance evaluation shows that the median
that the accuracy of type inference is 95.9%.
overhead of CSPAutoGen’s is as small as 9.1%.
The rest of the paper is organized as follows. Section 2 provides
an overview of Content Security Policy. Section 3 and Section 4
present CSPAutoGen’s deployment model, overall architecture and
design. Then in Section 5, we discuss the implementation details of
CSPAutoGen. The evaluation is discussed in Section 6, where we
evaluate the system’s template robustness, security, compatibility
and performance. Next, in Section 7, we discuss several related
topics and challenges. Related work is presented in Section 8 and
Section 9 concludes the paper.
2. BACKGROUND
Content Security Policy (CSP) [1, 41] is a declarative whitelist
mechanism to protect websites against XSS attacks. Speciﬁcally,
CSP allows website developers to make policies for each webpage
and specify which contents are allowed to load and execute on each
page. These policies are delivered to the client-side browser via
Content-Security-Policy HTTP response header or in a
meta element. When the client-side browser receives CSP poli-
cies, the browser, if it supports CSP, will enforce the received poli-
cies to protect users. Say, for example, a webpage protected by CSP
policies that only allow scripts from its own server are injected with
a snippet of malicious JavaScript via an XSS vulnerability. The ma-
licious scripts are automatically blocked because they come from
an origin that is unspeciﬁed in the CSP policies.
1 Content-Security-Policy: defaul-src ’self’;
2 image-src ’self’ *.yimg.com; object-src ’none’;
3 script-src ’self’ apis.google.com;
Code 1: An example of CSP policy.
Now let us introduce the details of CSP policies. A CSP policy is
consisted of a set of directives. Each directive is in the form of
directive-name and directive-value, where the former
indicates the type of resource and the latter speciﬁes the allowed
source list for that resource type. Code 1 shows an example of CSP
policy. In this example, the browser is only allowed to load im-
ages (speciﬁed by image-src) from *.yimg.com and the page’s
current origin (speciﬁed by keyword ‘self’), and scripts (speciﬁed
by script-src) from aps.google.com and the current origin.
No plugins are allowed in this page (speciﬁed by object-src
and keyword ‘none’), and other types of resources (speciﬁed by
default-src) are only allowed to be from the current origin. In
this paper, we discuss how to use CSPAutoGen to infer and enforce
CSP policies for script type (i.e., script-src). CSPAutoGen
can be also conveniently extended to support security policies for
other resource types.
By default, CSP disables inline scripts and dynamic scripts, i.e.,
the function calls of eval and Function, as well as setTimeout
and setInterval if their ﬁrst arguments are not callable [1].
For the purpose of backward compatibility, CSP allows develop-
ers to specify keywords unsafe-inline and unsafe-eval
in CSP policies:
the former allows inline scripts, and the latter
enables dynamic scripts. However, though convenient, these two
keywords seriously mitigate the protection offered by CSP. For
example, inline scripts open doors for reﬂected XSS, while dy-
namic scripts lower the bar for DOM-based XSS attacks. One of
CSPAutoGen’s contributions is to enforce policies without setting
unsafe-inline or unsafe-eval, while still preserving web-
sites’ functionalities.
There are two major levels of CSP that are commonly seen in
mainstream browsers: Level 1, the mostly adopted version that pro-
vides the aforementioned functionalities, and Level 2 that introduce
a new nonce feature. Speciﬁcally, the nonce allows an inline
script if the script’s hash or token (i.e., a random token assigned to
each whitelisted inline script) is speciﬁed in the CSP policy. At the
time we write the paper, Internet Explorer and Microsoft Edge do
not support CSP Level 2. Our CSPAutoGen is compatible with both
levels of CSP, because we only use the basic CSP functionalities.
3. OVERVIEW
In this section, we start by describing the system architecture,
and then delve into three deployment models.
3.1 System Architecture
CSPAutoGen works in three phases: training, rewriting, and run-
time. In the training phase, CSPAutoGen takes a bunch of webpage
samples as a training set and generates templates. Then, in the
rewriting phase, CSPAutoGen parses incoming webpages, gener-
ates corresponding CSPs based on the templates and rewrites web-
pages to include CSPs. In addition, CSPAutoGen also inserts tem-
plates generated in training phase and a client-side JavaScript li-
brary to each webpage. Lastly, in the runtime phase at the client-
side, the injected CSPs are enforced by the browser, guaranteeing
that illegitimate scripts are not executed. The previously-injected
library and templates ensure the runtime-included scripts and dy-
namic scripts that match templates can be imported. Now, we in-
troduce these three phases in detail.
time phase, and inject generated CSP policies (step 5). The gen-
erated CSP policies work in a strict mode–neither “unsafe-inline”
nor “unsafe-eval” is set. Moreover, those CSP policies only allow
scripts loaded from the host whitelist and the assigned trusted sub-
domain. After rewriting, the webpage will be forwarded to user’s
browser (step 6).
Runtime Phase. In runtime, browser’s CSP mechanism guarantees
only external scripts from hosts speciﬁed in CSP’s script-src
directive can be executed. CSPAutoGen uses its client-side library
inserted during the rewriting phase to handle both runtime-included
inline and dynamic scripts. For the former, once the client-side li-
brary detects DOM tree changes and inline scripts inserted, the li-
brary will match the scripts with the templates. If matched, those
scripts are sent to the website’s subdomain at CSPAutoGen JavaScript
server, where the scripts will be matched again and put into the
server if they pass the matching. Next, the URLs associated with
these scripts will be returned so that the client-side library can load
and execute them at the client side (step 7, 8). For dynamic scripts,
the JavaScript library synchronously detects any function calls to
eval or eval-like functions and then matches their parameters
against templates. If matched, the library evaluates those scripts by
instantiating corresponding symbolic templates (step 9).
3.2 Deployment Models
In this section, we describe three deployment models in detail,
and compare the pros and cons of each of them.
Server Deployment. CSPAutoGen can be deployed on a server to
help developers or site administrators automatically generate and
enforce CSPs. Such deployment can protect all the users of the
particular website over the Internet, and is applicable to any back-
end programming languages, such as PHP, Node.js, and Ruby on
Rails. In particular, at the training phase, the developer or admin-
istrator runs CSPAutoGen upon an internal or testing version of the
website to generate templates and corresponding CSPs for the web-
site. Later on, if she adds or changes scripts in the website, she can
submit the new scripts to CSPAutoGen through a pre-built tool and
update the stored templates. The advantage of server deployment
is that we can ensure the training set being clean.
Middlebox Deployment. CSPAutoGen can be deployed at, for ex-
ample, the gateway of enterprise networks of companies, schools,
and governments. Such deployment will protect all the clients be-
hind the middlebox, such as all the enterprise computers. The en-
terprise can train the templates themselves or fetch from trusted
third-party template providers. Similar to all other training based
approaches [11, 16, 44], CSPAutoGen requires that the training set
is clean and without injected scripts. We understand that it is gener-
ally understood to be a hard problem for training based approaches
to keep the training set clean [33, 43]. Here is how we avoid XSS
attacks in the training set of CSPAutoGen. To mitigate known XSS
attacks, all crawled webpages are tested via VirusTotal [8], where
the scripts will be detected by more than 60 popular anti-virus soft-
ware. In addition, we crawl webpages from a clean seed URL to
avoid reﬂected and DOM-based XSS attacks. We also create new
accounts on websites during crawling to avoid stored XSS attacks,
because new accounts are usually initialized with pre-stored clean
contents and have no pre-user interactions.
Client Deployment. CSPAutoGen can also be deployed at a client,
and implemented as either a browser extension or a client proxy.
Such deployment needs to fetch templates from a trusted third-
party that generates CSPAutoGen templates. Similar to middlebox
deployment, the training also needs to be performed in a clean en-
vironment with no injected scripts.
Figure 1: CSPAutoGen Architecture in the Training Phase.
Figure 2: CSPAutoGen Architecture in the Rewriting and Runtime Phase.
Training Phase. Figure 1 illustrates the architecture of CSPAuto-
Gen in the training phase. First, a training task is submitted to a
training manager with a URL list (step 1). The URL list can be
obtained by any of the following methods. The administrator spec-
iﬁes the URL list manually; a link spider crawls the target domain
for the URL list; or the training manager hooks the website test
cases and outputs a list of URLs. Then, these URLs are sent to a
rendering task generator (step 2), which creates webpage render-
ing tasks by specifying various cookies, such as login cookies, and
user-agents to maximize script coverage. These rendering tasks are
performed, i.e., webpages are rendered, by a headless browser clus-
ter (step 3). During rendering, all the relevant contents, including
inline scripts, dynamic scripts, and src attributes of script tags, are
sent to a template generator and a host whitelist generator (step 4).
If the template generator needs to render more URLs, these URLs
are sent to the rendering task generator (step 5) and steps 3–4 are
repeated. The generated templates and host whitelist are stored at a
database (step 6), where they can be conveniently updated through
a visual template portal (step 7).
Rewriting Phase. Figure 2 illustrates the rewriting and runtime
phases of CSPAutoGen. CSPAutoGen’s applier engine is placed
between server and client. During the rewriting phase, when re-
ceiving a webpage (step 1), CSPAutoGen extracts and sends in-
line scripts to CSPAutoGen JavaScript server (step 2), where the
scripts are matched against templates and those benign ones are
stored in a globally unique subdomain (trusted subdomain). The
stored scripts’ URLs are returned to CSPAutoGen’s applier engine