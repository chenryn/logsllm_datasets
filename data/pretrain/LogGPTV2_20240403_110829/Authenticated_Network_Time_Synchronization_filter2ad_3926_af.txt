2 (θ3 − θ1).
Fortunately, we can bound this value by E: we know
that 1
2 (θ1 + θ3), and furthermore we know
that ANTPE will only accept time synchronization when
1
2 (θ1 + θ3) ≤ E, so in sessions that accept (assuming a
passive adversary) we have that the client’s clock is at
most 1
2 (θ3 − θ1) ≤ E different from the server’s clock.
Now moving to the multi-phase setting, we note that
this analysis of the correctness of ANTP applies to each
2 (θ3 − θ1) ≤ 1
separate time synchronization phase: since the client’s
(t1,t4) values are only used to calculate the total round-
trip time of the time synchronization phase, thus if the
rate-of-time for both client and server during the phase is
the same, each phase is also E-accurate in the presence
of a passive adversary, even if the adversary dramatically
changes the rate-of-time for partners between time syn-
chronization phases.
6.2 Security
Security of a single 3-phase execution of ANTP in the
sense of Deﬁnition 4 is given by Theorem 2 below. Secu-
rity of multiple phases in the sense of Deﬁnition 5 follows
with a straightforward adaptation.
Intuitively, the bound on the possible error that an A
can introduce without altering packets is as in Section 3.
It follows then that if all messages are securely authenti-
cated, and the only inputs to the clock-update procedure
are either: authenticated via messages, or the round trip
delay RTT; then any attacker can only introduce at most E
error into the clock-update procedure (where E ≥ RTT).
Theorem 2 (Security of ANTP). Fix E ∈ N and let λ be
the length of the nonces in m1 and m5 (in our instantiation,
λ = 256). Assuming the key encapsulation mechanism
KEM (with keyspace KEM.K) is IND-CCA-secure, the
message authentication code MAC is EUF-CMA-secure,
the hash function Hash is collision-resistant, and the key
derivation function KDF and authenticated encryption
scheme AE are secure, then ANTPE is a E-accurate se-
cure time synchronization protocol as in Deﬁnition 4. In
particular, there exist algorithms B3, . . . ,B 8, described in
the proof of the theorem, such that, for all adversaries A,
we have
Advtime
ANTPE ,E (A) ≤
s(cid:31)Advcoll
n2
pn2
s
pn2
2λ−2 + n2
Hash(BA3 )
(BA4 ) +Adv ind-cca
+ Advauth-enc
AE
KDF(BA6 ) +Adv auth-enc
+ Advkdf
MAC (BA8 )(cid:30)
+ Adveuf-cma
where np and ns are the number of parties and sessions
created by A during the experiment.
KEM (BA5 )
(BA7 )
AE
AE
(A), Advind-cca
KEM (A), Advcoll
The standard deﬁnitions for security of the un-
derlying primitives and the corresponding advantages
Advauth-enc
Hash(A), Adveuf-cma
(A), and Advkdf
KDF(A) are given in the full version [6].
Proof. From Theorem 1, ANTPE is an E-correct time
synchronization protocol in the sense of Deﬁnition 3.
Thus all passive adversaries have probability 0 of break-
ing E-accuracy of ANTPE. If we show that the advantage
MAC
836  25th USENIX Security Symposium 
USENIX Association
Advauth
ANTPE (A) of any adversary A of breaking authentica-
tion security (i.e., to accept without session matching) of
ANTPE is small, then it follows that the advantage of any
active adversary A in breaking E-accuracy of ANTPE is
similarly small. In other words, it immediately is the case
that Advtime
ANTPE ,E (A) ≤ Advauth
ANTPE (A).
We now focus on bounding Advauth
ANTPE (A) = Pr(break0).
ANTPE (A). In order to
show that an active adversary has negligible probability
in breaking ANTPE authentication, we use a proof struc-
tured as a sequence of games. We let Pr(breaki) denote
the probability that the adversary causes some session to
accept maliciously in game i. We iteratively change the
security experiment, and demonstrate that the changes
are either failure events with negligible probability of
occurring or that if the changes are distinguishable we
can construct an adversary capable of breaking an un-
derlying cryptographic assumption. Since the client will
only accept synchronization if all three phases are prop-
erly authenticated, the advantage of an active adversary is
negligible given our cryptographic assumptions.
Game 0. This is the original time synchronization game
described in § 4: Advauth
Game 1.
In this game, we abort the simulation if
any nonce is used in two different sessions by client
instances. There are at most 2nsnp nonces used by
client instances, each λ bits. The probability that a
collision occurs among these values is (2nsnp)2/2λ , so:
Pr(break0) ≤ Pr(break1) +
Game 2. Here, we guess the ﬁrst client session to accept
maliciously, aborting if incorrect. We select randomly
from two indices (i,s)←${1, . . . ,n p} × {1, . . . ,n s} and
abort if πs
i is not the ﬁrst session to accept maliciously.
Now the challenger responds to Reveal(i,s) queries (if
πs
i .α = accept) by aborting the game, as it follows that
the guessed session cannot accept maliciously. There are
at most npns client sessions, and we guess the ﬁrst session
to accept maliciously with probability at least 1/npns, so
Pr(break1) ≤ npns Pr(break2).
Game 3.
Here we guess the partner session to
πs
i , by selecting from two indices ( j,t)←${1, . . . ,n p}×
{1, . . . ,n s} and abort if πt
j is not the partner session to πs
i .
Now, the challenger answers Corrupt( j) and Reveal( j,t)
queries before πs
i .α ← accept by aborting the game, as it
follows that the guessed session cannot accept maliciously.
There are at most npns server sessions, and we guess the
partner of the ﬁrst session to accept maliciously with prob-
ability at least 1/npns, so Pr(break2) ≤ npns Pr(break3).
Game 4.
Here we abort if a hash collision occurs,
by computing all hash values honestly and aborting if
there exists two evaluations (in, Hash(in)), ( ˆin, Hash( ˆin))
such that in (cid:23)= ˆin but Hash(in) = Hash( ˆin). The simula-
tor interacts with a Hash-collision challenger, outputting
n2
s n2
p
2λ−2 .
Hash(BA3 ).
the collision if found. Thus: Pr(break3) ≤ Pr(break4) +
Advcoll
In this game, we abort if in server session πt
Game 5.
j
the ciphertext received in m3 is not equal to the ciphertext
sent in m1 but the output of AuthDecs is not ⊥.
We construct an algorithm BA4 that simulates Game
4 identically, except to interact with an AE challenger
in the following way: When Pj needs to run AuthEnc
or AuthDec, BA4 uses its oracles to compute the required
value. In server session πt
j, when BA4 receives a ciphertext
in m3 that was not equal to the ciphertext sent in m1 but the
output of the AuthDec oracle is not ⊥, this corresponds to
a ciphertext forgery, and thus: Pr(break4) ≤ Pr(break5) +
Advauth-enc
Game 6.
j compute
the session key k by applying KDF to a random secret
pms(cid:20) ←$ KEM.K, rather than the pms that was encapsu-
lated using KEM.Encap and transmitted in ciphertext e.
Any algorithm used to distinguish Game 5 from Game 6
can be used to construct an algorithm capable of distin-
guishing KEM encrypted values via plaintext, thus break-
ing IND-CCA security of the key encapsulation mecha-
nism.
(BA4 ).
In this game, sessions πs
i and πt
AE
We construct a simulator BA5 that interacts with a KEM
challenger. BA5 activates party Pj with the public key pk
received from the challenger. BA5 responds identically to
queries from A as in Game 5, except as follows:
• BA5 computes the KEM ciphertext e for the session
πs
i by obtaining a challenge (e, pms) from its KEM
challenger.
• BA5 computes πs
• In any Pj session where m3 contains the challenge
ciphertext above, BA5 computes the session key as
k ← KDF(pms, . . .).
• In any other Pj session where m3 does not contain
the challenge ciphertext above, BA5 queries the ci-
phertext to its Decap oracle to obtain the premaster
secret and uses that as its input to KDF to compute
the session key k.
i .k ← KDF(pms, . . .)
cause of Game 3.
• BA5 never needs to answer a Corrupt( j) query be-
When the random bit b sampled by the KEM ind-cca chal-
lenger is 0, pms is truly the decapsulation of the ciphertext
e, in which case BA5 perfectly simulates of Game 5. When
b = 1, pms is random and independent of e, in which case
BA5 perfectly simulates Game 6. Observe that BA5 never
asks the challenge ciphertext e to its decapsulation oracle.
An adversary capable of distinguishing Game 5 from
Game 6 can therefore be used to break IND-CCA security
of KEM, so Pr(break5) ≤ Pr(break6) +Adv ind-cca
KEM (BA5 ).
Game 7.
In this game, we replace the secret key k in
sessions πs
i and πt
j with a uniformly random value k(cid:20) from
USENIX Association  
25th USENIX Security Symposium  837
j.k = πs
KDF(BA6 ).
{0,1}lKDF where lKDF is the length of the KDF output, in-
stead of being computed honestly via k ← KDF(pms, . . .).
In Game 6, we replaced the premaster secret value
pms with a uniformly random value from KEM.K. Thus,
any algorithm that can distinguish Game 6 from Game
7 can distinguish the output of KDF from random. We
explicitly construct such a simulator BA6 that interacts
with a KDF challenger, and proceeds identically to Game
6, except: when computing k for πs
i , BA6 queries the KDF
challenger with pms; and when computing k for πt
j, BA6
sets πt
i .k. When the random bit b sampled by
the KDF challenger is 0, k = KDF(pms, . . .), and BA6
provides a perfect simulation of Game 6. When b = 1,
k←${0,1}lKDF and BA6 provides a perfect simulation of
Game 7.
An adversary capable of distinguishing Game 6 from
Game 7 can therefore distinguish the output of KDF from
random, so Pr(break6) ≤ Pr(break7) +Adv kdf
Game 8. In this game, in session πt
j we replace the con-
tents of the ciphertext C2 sent in m3 with a random string
of the same length, and abort if the ciphertext received in
m5 is not equal to the ciphertext sent in m3 but the output
of the AuthDecs algorithm is not ⊥.
We construct an algorithm BA7
that interacts with
an AE challenger in the following way: BA7 acts ex-
actly as in game 7 except for sessions run by party Pj.
In session πt
j, for the computation of C2, BA7 picks a
uniformly random binary string z(cid:24) of length equal to
z = k(cid:23)KDF(cid:23)Hash(cid:23)KEM(cid:23)MAC and submits (z,z(cid:24)) to its
AuthEnc oracle. For all other computations that Pj in-
volving AuthEncs or AuthDecs, BA7 submits the query its
respective AuthEnc or AuthDec oracle.
When the random bit b sampled by the AE challenger
is 0, C2 contains the encryption of z, so BA7 provides a
perfect simulation of Game 7. When b = 1, C2 contains
the encryption of z(cid:24), so BA7 provides a perfect simula-
tion of Game 8. An adversary capable of distinguish-
ing Game 7 from Game 8 can therefore break the con-
ﬁdentiality of AE and guess b. Additionally, if BA7 re-
ceives a ciphertext in m5 that was not equal to the ci-
phertext sent in m3 but the output of the AuthDec or-
acle is not ⊥, this corresponds to a ciphertext forgery,
and thus BA7 has broken the integrity of AE. Thus,
Pr(break7) ≤ Pr(break8) +Adv auth-enc
The effect of Game 8 is that, in the target session and
its partner, the key used in the MAC computations is
independent of the values transmitted.
Game 9. In this game, we abort when the session πs
i ac-
cepts maliciously. We do this by constructing a simulator
BA8 that interacts with the MAC challenger, but computes
τ1 and τ2 for πt
j by querying h(cid:23)m3(cid:23)C2 and m5(cid:23)t1(cid:23)t2(cid:23)t3
to the MAC challenger. BA8 veriﬁes MAC tags for πs∗
i∗
by again querying h(cid:23)m3(cid:23)C2 and m5(cid:23)t1(cid:23)t2(cid:23)t3 to the MAC
(BA7 ).
AE
challenger and ensuring the MAC challenger’s output is
equal to the tag to be veriﬁed. Note that now that the
key k is substituted for the key maintained by the MAC
challenger: k was already uniformly random and indepen-
dent of the protocol run, and by Game 2 and Game 3, the
simulator already responds to Reveal queries to πs
i and πt
j
by aborting the security experiment. Thus these changes
to the game are indistinguishable. When πs
i .α ← accept,
BA8 checks Pj to see if there is a matching session. Since
by Game 1 all protocol ﬂows are unique (by unique
nonces), if Pj has no matching session the adversary
must have produced a valid MAC tag ˆτ1 or ˆτ2 such that
MAC(k,h(cid:23)m3(cid:23)C2) = ˆτ1 or MAC(k,m5(cid:23)t1(cid:23)t2(cid:23)t3) = ˆτ2
and (by Game 8) the key k is uniformly random. BA8 sub-
mits the appropriate pair (h(cid:23)m3(cid:23)C2, ˆτ1), (m5(cid:23)t1(cid:23)t2(cid:23)t3, ˆτ2)
to the MAC challenger and aborts. Thus, Pr(break8) ≤
Pr(break9) +Adv euf-cma
Analysis of Game 9. We now show that an active adver-
sary has a probability negligibly close to 0 of forcing a