1
(w−1)qy .
D. Conversation Integrity
Conversation integrity is the property that all users see all messages in the same order. Since participant change
messages are conversation messages, participant consistency is implied. The adversary is allowed to compromise all
but one of the servers and any of the participants. Conversation integrity is provided between honest participants.
Figure 8 details the conversation integrity game. First the adversary INITIALIZES the PKI and registers corrupt
users and servers. The adversary may then issue commands instructing participants and servers to execute protocol
operations the same way as the previous two games. Finally, the adversary wins the game if he convinces two
participants A and B of session Sid to accept different messages as the ith message.
To avoid trivially winning the game the adversary is not allowed to:
•
Issue REVEALLONGTERMKEYS and REVEALEPHEMERALKEYS of all the servers and one of A or B.
The advantage an adversary M has at winning the game is deﬁned as AdvIN T−CON V (M ) = P r[M wins].
Recall from Section IV the probability of an adversary ﬁnding a protocol ciphertext that successfully decrypts
under two separate keys is at most qint. If an adversary cannot constructs such a message they must be able to
26
forge a message from an honest server to an honest participant indicating that an out-of-order protocol message
should be processed.
Theorem A.3. Mobile CoWPI provides conversation integrity if all hash and key derivation functions are modeled
as random oracles.
For any conversation integrity adversary M that runs in time at most t, performs at most q KDF2 oracle
queries and sends at most y messages between honest servers and honest participants. We show that there exists
a NAXOS adversary M0 and an INT-CTXT adversary M1 such that
· AdvN AXOS(M0)
AdvIN T−CON V (M ) ≤ 1
y
+AdvIN T−CT XT (M1) · 1
y
+qint
Where M0 and M1 run in time O(t).
Proof: We prove Mobile CoWPI provides conversation integrity in a sequence of games:
G0
G1
The challenger behaves correctly.
The challenger replaces the NAXOS key exchange used to encrypt a random message between an honest
server and participant with a random key.
Games G1 show the adversary can not learn the NAXOS keys used in the two-party channels and is uses as a
transition to a game that M1 can play. If if M can win the conversation integrity game, then M1 can win the
INT-CTXT game.
We construct a challenger M0 that given a distinguisher D0 that can distinguish between playing G0 and G1
with probability S0, M0 can win the NAXOS game.
The challenger M0 deviates from G0 in the following way:
•
• When REVEALLONGTERMKEYS(T ) is called, M0 returns LONG-TERM KEY REVEAL(T ) of the NAXOS
During INITIALIZE the challenger initializes a NAXOS game and sets up the PKI for U.
game.
The challenger plays the NAXOS game replacing all NAXOS keys as detailed next.
•
• When REVEALEPHEMERALKEYS(Sid, A, B) is called, M0 returns EPHEMERAL KEY REVEAL((A, B, epkab)
of the NAXOS game for the most recent NAXOS session between A and B in Sid.
• When D0 ﬁnalizes the game and guesses G0, M0 ﬁnalizes the NAXOS game and 0. If D0 guesses G1,
M0 guesses 1.
We now describe how M0 computes the NAXOS key in the two-party channel honest servers and participants.
Let A be the participant and B the server. Compute the key as follows:
epkab ← SEND(A, B)
Send epkab to B.
Upon B receiving epkab, epkba ← SEND(A, B, epkab), epkba.
1)
2)
3)
4) When computing a NAXOS key of a ciphertext block not part of the test message, kab ← REVEAL(A, B, epkab, epkba)
5) When computing the NAXOS key of the ciphertext block of the of a received protocol message that was
is used as the key.
not sent, kab ← TEST(A, B, epkab, epkba) and is used by B to decrypt the ciphertext block.
M0 wins the NAXOS game if it guesses the two party message correctly and D0 guesses correctly. Thus the
advantage of M0 is AdvN AXOS(M0) = S0 · 1
y .
We now construct a challenger M1 that given an adversary M that can win the conversation integrity game
with probability S1, M1 can win the INT-CTXT game.
The challenger M1 behaves as follows:
•
During INITIALIZE the challenger initializes an INT-CTXT game.
27
Fig. 9: Deniability Game G0
function INITIALIZE(τ)
state information output0.
Initialize an PKI and executes the protocol on plaintext transcript τ producing protocol transcript T0, and
output1
Run a protocol simulator with input τ and inputs that produces protocol transcript T1 and state information
Flip a coin b ←R {0, 1}
return (Tb, outputb, inputd)
function FINALIZE(d)
return (d == b).
•
The challenger replaces a random two-party channel ciphertext message between an honest server and
participant with an INT-CTXT game detailed next.
We now detail how the challenger M1 generates the random two-party ciphertext message between an honest
server and participant. Let A be the sender of the message and B the receiver. Let m be the plaintext to be encrypted
by the block, d the associated data, and idba the id of B’s last received ephemeral public key used to compute the
key. The blocks is generated as follows:
cab ← idba, ENC(m, d).
1)
2) When B receives the next ciphertext c(cid:48)
ab to VF of the INT-CTXT game.
M1 wins the INT-CTXT game if it guesses the two-party message correctly and M wins the game. Thus the
ab (cid:54)= cab, the challenger submits c(cid:48)
advantage of M1 is AdvIN T−CT XT (M1) = S1 · 1
y .
E. Deniability
We capture the deniability property with the general-purpose game detailed in Figure 9. The distinguisher
INITIALIZES the game with a plaintext transcript τ. Then the challenger executes Mobile CoWPI on τ producing
a real protocol transcript T0 and three outputs inputd, inputs, output0. The challenger then runs a simulator with
inputs τ and inputs producing a forged protocol transcript T1 and state output1. The challenger returns a random
transcript Tb, output outputb, and inputd to the distinguisher. The distinguisher wins the game if it guesses b
correctly. The advantage of the distinguisher M is deﬁned as AdvDEN Y −∗(M ) = P r[M wins] − 1
2. The DENY-*
game depends on how inputd, inputs, and output∗ are deﬁned.
When proving message deniability and participant deniability it is sufﬁcient to deﬁne the inputs and output as
follows:
inputd = {(lsk0, epk0) . . . , (lskn, epkn)}
inputs = {(lpk0, epk0), . . . , (lpkn, epkn)}, (lska, eska)
outputb = {eska0, eskaw}
where n is the number of participants, a is the user running the simulator, and w is the number of ciphertext blocks
where a is a participant. In this case the distinguished is provided with long-term secret keys and single use public
pre-keys of all users in the transcript. The simulator is only given the public values and the secret values of a single
user and must output all of a’ ephemeral secret keys.
Theorem A.4. Mobile CoWPI provides message and participant deniability if all hash and key derivation functions
are modeled as random oracles.
For any participant deniability adversary M that runs in time at most t, performs at most q H oracle queries
and supplies a transcript that produces at most y ciphertext blocks between participants that are not the simulating
participant. We show that there exists a NAXOS adversary M0 such that
AdvDEN Y −P ART (M ) ≤y · AdvN AXOS(M0)
(1)
Where M0 runs in time O(t) and q < 2l.
Proof:
28
Recall the Mobile CoWPI simulator discussed in Section IV. We prove the simulated transcript is indistinguish-
able from the real transcript in a sequence of games. In each game we replace an additional NAXOS key agreement,
between two parties that are not the simulating party, from the real transcript with a random NAXOS key. In the
ﬁnal game the real transcript is generated in the same way as the simulated one.
Below is the sequence of games:
G0
G1.i
The challenger behaves correctly.
The challenger replaces the NAXOS key exchange used to encrypt the ith ciphertext block between two
user that are not the simulating user.
Game G1.i shows the adversary cannot distinguish between a simulated and real NAXOS key agreement and is
used as a transition to a game that M1 can play. If M can win the participant deniability game, then M1 can win
the NAXOS game.
Let G1.0 = G0, we construct a challenger M0 that given a distinguisher D0 that can distinguish between playing
G1.i and G1.i with probability S0, M0 can win the NAXOS game.
The challenger M0 deviates from G1.i − 1 in the following way:
•
•
•
During INITIALIZE the challenger initializes a NAXOS game and sets up the PKI for U and issues
REVEALLONTERMKEYS for all U.
The challenger replaces the ﬁrst i− 1 NAXOS keys between non-simulating participants with random keys.
The challenger plays the NAXOS game replacing the ith NAXOS key between non-simulating participants
with a NAXOS TEST query detailed next.
• When D0 ﬁnalizes the game and guesses G1.i − 1, M0 ﬁnalizes the NAXOS game and 0. If D0 guesses
G1.i, M0 guesses 1.
We now describe how M0 computes the ith NAXOS key. Let B and C be the participants. Compute the key
as follows:
epkbc ← SEND(B, C)
Send epkbc to C.
Upon C receiving epkbc, epkcb ← SEND(C, C, epkbc), epkcb.
1)
2)
3)
4) When computing a NAXOS key of all ciphertext blocks after the ith kbc ← REVEAL(B, C, epkbc, epkcb)
5) When computing the NAXOS key of the ith ciphertext block , kbc ← TEST(B, C, epkbc, epkcb).
M0 wins the NAXOS game if D0 guesses correctly. Thus the advantage of M0 is AdvN AXOS(M0) = S0.
is used as the key.
There are y ciphertexts blocks the between non-simulating participants.
F. Message Unlinkability
We now detail message unlinkability provided by Mobile CoWPI. Compared to participant deniability we
consider a stronger deﬁnition where the distinguisher is given a real protocol message and the ephemeral public
keys of the sender for the message. The simulator is given the ephemeral secret key used to encrypt the message.
inputd =lsks, (lsk0, epk1) . . . , (lskn, epkn), epksi, i, pmi
inputs =lpks, (lpk0, epk1) . . . , (lpkn, epkn),
lska, eskai, epksi, i, pmi
outputb = {eska0, eskaw}
Where epkn is the ephemeral secret key of receiver n shared with the sender, esksi is the ephemeral secret key of
the sender shared with the simulating party for the ith message, eskai is the secret key of the simulation party for
the ith message, and i is the index of the protocol message pmi in the transcript. The simulator must output all of
a’s ephemeral keys.
This deﬁnition provides the distinguisher with knowledge of a non-deniable protocol message. The goals is to
simulate a transcript that contains pmi and is identically distributed to the real. The message unlinkability simulator
behaves as a participant repudiation simulator discussed earlier. When the simulation party sends its’ last ciphertext
block prior to pmi the simulator uses epkai ← gH(eskai,lska) as the next ephemeral public to the sender. Similarly,
29
Fig. 10: Deniable Group Message Authentication
function INITIALIZE(U)
b ←R {0, 1}
Generate secret and public keys ski, vki for all i ∈ U.
return all secret and public keys.
function TEST(m, a, c, vk0, . . . , vkc, . . . , vkn)
σ0 ← AUTH(m, P, ska, vk0, . . . , vkn)
σ1 ← SIMULATE(m, P, ska, vk0, . . . , vkn)
return σb
function FINALIZE(d)
return (d = b)
when the sender of pmi sends it last ciphertext block to the simulating party it uses epksi as it next ephemeral public
key. The simulator then sends pmi as the ith message in the transcript. The simulator then continues to behave
the same as the participant deniability simulator from earlier. The simulated transcript is identically distributed to
the real transcript and contains the undeniable message pmi in position i. The proof is identical to the proof of
participant deniability.
G. Deniable Group Message Authentication
We now show that a deniable group message authentication primitive is impossible. We ﬁrst deﬁne the scheme
of deniable group message authentication, detail the deniability security game, then provide an adversary that can
always win the game.
A deniable group message authentication scheme is deﬁned a follows:
•
•
SETUP(l) takes as input the security parameter l and outputs public parameters P .
KEYGEN(P ) takes as input the parameters P and outputs a secret value ska and public veriﬁcation value
vka for user a. Each user will generate own secret values and publish their veriﬁcation value.
AUTH(m, P, ska, vk0, . . . , vkn) takes as input a message to authenticate m the public parameters P , the
secrete value of the author ska, and the veriﬁcation values of all of the users the message is authenticated
to vk0, . . . , vkn. The output is σa.
VERIFY(m, σa, P, skc, vka) returns true if σa was generated by a executing AUTH(m, P, ska, vk0, . . . , vkb, . . . , vkn)
or c = a. Otherwise returns false. VERIFY is allowed to return true if c = a as a can keep track of all
messages she authenticated and drop any message she has not authenticated but veriﬁes as from her.
SIMULATE(m, P, skc, vk0, . . . , vka, . . . , vkn) simulates authentication of message m by a. It is executed
by c and returns σa that must be indistinguishable from from a executing AUTH on m.
•
•
•
Figure 10 describes a security game that captures the deniability of group message authentication. A distinguisher
plays the game and wins if it can distinguish a SIMULATEd σ from an AUTH σ. The distinguisher is given all of
the secret and veriﬁcation keys of all users.
We now describe a distinguisher that can always win the deniability game. On TEST output σb, let e be a valid
veriﬁer of σb, e (cid:54)= a, and e (cid:54)= c. If VERIFY(m, σb, P, ske, vka) returns true guess 0, else guess 1. By the deﬁnition
of VERIFY a SIMULATEd value will never return true. Thus, a deniable group authentication scheme does not exist.
This model does not capture ephemeral keys. However we argue that any ephemeral keys would need to be
distributed in a deniably authenticated manner, necessitating a scheme that does not use ephemeral keys. Mobile
CoWPI provides deniable authentication as all authentication is pair wise.
30