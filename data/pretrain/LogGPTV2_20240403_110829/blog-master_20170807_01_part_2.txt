Show statistics information about the proxy. This command can take optional  
parameters to specify the host and port of the target proxy.  
```
$> crunchy-proxy stats  
```
|  Option | Default | Description  
---|---|---
| --host | localhost | the host address of the proxy's admin server  
| --port | 8000 | the host port of the proxy's admin server  
| --format | plain | the format of the results. Valid formats are 'plain' and  'json'  
6、版本，向管理端口发请求  
Show version information about the proxy. This command can take optional parameters to specify the host and port of the target proxy.  
```
$> crunchy-proxy version  
```
|  Option | Default | Description  
---|---|---
| --host | localhost | the host address of the proxy's admin server  
| --port | 8000 | the host port of the proxy's admin server  
### 配置文件  
The proxy configuration is controlled by a single configuration file which  
is written in YAML format.  
The YAML file is read at startup and is currently not reloaded after  
execution starts.  
Configuration sections:  
1、proxy的管理端口和PG代理端口的配置  
| Parameter | Description  
---|---
| proxy:hostport | the host:port that the proxy server will listen to  
| admin:hostport | the host:port that the proxy admin server will listen to  
Example  
```
server:  
  proxy:  
    hostport: localhost:5432  
  admin:  
    hostport: localhost:8000  
```
2、后端数据库配置  
| Parameter | Description  
---|---
| __:hostport | the host:port of the   
| __:role | the role of the __, valid values are 'master' and 'replica'  
| __:metadata | _not implemented_  
Where __ is the name given to the node.  
```
nodes:  
  master:  
    hostport: 192.168.0.100:5432  
    role: master  
    metadata: {}  
  replica1:  
    hostport: 192.168.0.101:5432  
    role: replica  
    metadata: {}  
```
3、认证配置  
| Parameter | Description  
---|---
| username | the username for the pool connections  
| database | the database for the pool connections  
| password | the password for the pool connections  
| options | connection string options other than those listed above   
| ssl:enable | enable SSL connections  
| ssl:sslmode | the SSL mode for establishing pool connections  
4、连接池，每个后端数据库几个链接。  
| Parameter | Description  
---|---
| capacity | the number of pool connections to create for each node configured  
Example  
```
pool:  
  capacity: 2  
```
5、健康检查配置  
| Parameter | Description  
---|---
| delay | seconds to delay between health checks  
| query | SQL to user for the health check  
```
healthcheck:  
   delay: 60  
   query: select now();  
```
### SQL转发  
目前crunchy-proxy支持3个HINT。  
1、读请求  
```  
/* read */ select from foo.....  
```  
实际上不管SQL是读还是写，只判断有没有``` /* read */ ```这个HINT。因此写请求也可以均衡的分发给slave节点。  
2、写请求  
没有HINT时，所有的请求都发给主节点。  
3、事务  
将start, finish两个HINT之间的所有请求发给同一个节点。  
发给主节点  
```  
/* start */ begin;  
select .....;  
/* finish */ commit;  
```  
发给同一个备节点  
```  
/* start,read */ begin;  
select .....;  
/* finish */ commit;  
```  
### 管理Proxy  
通过REST API，向管理端口发送请求，管理PROXY.  
1、事件  
Events like a healthcheck status are published to any subscribers using a streaming REST API, you can access the admin events as follows:  
```  
curl -i http://localhost:10000/api/stream  
```  
As the proxy publishes events, your REST client (e.g. curl) will receive the events.  
2、当前配置  
You can get the current configuration of the proxy as follows:  
```  
curl http://localhost:10000/api/config  
```  
3、统计信息  
You can get the current statistics of the proxy as follows:  
```  
curl http://localhost:10000/api/stats  
```  
## Crunchy Proxy应用场景  
## 小结  
Crunchy Proxy目前的版本支持如下功能：  
1、通过HINT，支持将写请求发给主节点，读请求均衡的发给备节点。  
2、通过JSON文件配置PROXY。  
3、支持PG的健康检查，配置文件支持检查间隔，检查的SQL语句。  
4、请求只会发给健康的PG节点。  
5、支持REST管理接口。  
6、支持连接池，目前连接池为固定个数，启动时指定。为语句级连接池。  
7、支持SSL认证和连接。  
8、目前一个PROXY仅支持一对user+db。如果要支持多对，需要启动多个PROXY。  
## 参考  
https://github.com/CrunchyData/crunchy-proxy  
https://github.com/CrunchyData/crunchy-proxy/blob/master/docs/crunchy-proxy-user-guide.asciidoc  
https://github.com/dangdangdotcom/sharding-jdbc  
https://github.com/go-pg/sharding  
http://www.pgpool.net/mediawiki/index.php/Main_Page  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")