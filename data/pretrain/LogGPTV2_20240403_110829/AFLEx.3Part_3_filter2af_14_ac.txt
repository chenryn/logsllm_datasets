### 3.5 模糊测试策略详解

- **`trim L/S`（裁剪）**：在预测试阶段，尝试将输入用例裁剪为最短形式，同时保持相同的执行路径。裁剪长度 (`L`) 和间隔步长 (`S`) 通常根据文件大小来确定。
- **`bitflip L/S`（位翻转）**：确定性变异。遍历输入样例，每次以 `S` 位为步长进行操作，并对 `L` 位字节执行位翻转。当前有效的 `L/S` 取值包括 `1/1`、`2/1`、`4/1`、`8/8`、`16/8` 和 `32/8`。
- **`arith L/8`（算术变异）**：确定性变异。尝试将输入样例中的字节减去或加上 `8/16/32` 位的值。两次变异的字节位置间隔始终为 8 位。
- **`interest L/8`（替代变异）**：确定性变异。使用已知且可能触发异常的 `8/16/32` 位值列表，尝试替换输入样例中的字节。两次变异的字节位置间隔始终为 8 位。
- **`extras`（字典变异）**：确定性变异。显示为 `user` 或 `auto`，取决于模糊测试器是使用用户通过 `-x` 提供的词典还是自动生成的词典。还会看到 `over` 或 `insert` 标识符，表示词典单词是覆盖现有数据还是通过偏移量插入其中。
- **`havoc`（综合变异）**：一种带栈随机调整的固定偏移循环。在此阶段尝试的操作包括多种变异方法，如位翻转、使用随机和可能触发异常的整数进行覆盖、块删除、块复制以及与字典相关的操作（如果提供了字典）。
- **`splice`（拼接变异）**：当第一个完整队列周期后没有发现新路径时开始的变异策略。它等效于 `havoc`，但首先在任意选择的中点将来自队列的两个随机输入拼接在一起。
- **`sync`（同步变异）**：仅在设置 `-M` 或 `-S` 时使用的阶段（请参见 `parallel_fuzzing.txt`）。此阶段不涉及真正的模糊测试，而是扫描其他模糊测试器的输出并在必要时导入输入用例。首次执行可能需要几分钟。

其余字段表示当前阶段的 `exec` 计数进度指示器、全局 `exec` 计数器以及当前程序执行速度。这些值可能会在输入用例切换时波动，理想情况下，执行速度应超过 `500 execs/sec`；若低于 `100 execs/sec`，则任务可能耗时较长。模糊测试器会在目标运行缓慢时发出警告，建议参考 `perf_tips.txt` 获取加速方案。

### 3.6 发现信息

```
+--------------------------------------+
| favored paths : 879 (41.96%)         |
|  new edges on : 423 (20.19%)         |
| total crashes : 0 (0 unique)         |
|  total tmouts : 24 (19 unique)       |
+--------------------------------------+
```

该部分提供多个完成度指标，包括基于嵌入代码中的最小化算法的路径数量（用于加快运行速度），以及导致更好边缘分支覆盖的测试用例数量。此外，还包含更详细的崩溃和超时计数器。注意，超时计数器不同于挂起计数器，后者包括超出超时时间的所有测试用例及某些未超出超时时间但被分类为挂起的用例。

### 3.7 策略产出

```
+-----------------------------------------------------+
|   bit flips : 57/289k, 18/289k, 18/288k             |
|  byte flips : 0/36.2k, 4/35.7k, 7/34.6k             |
| arithmetics : 53/2.54M, 0/537k, 0/55.2k             |
|  known ints : 8/322k, 12/1.32M, 10/1.70M            |
|  dictionary : 9/52k, 1/53k, 1/24k                   |
|       havoc : 1903/20.0M, 0/0                       |
|        trim : 20.31%/9201, 17.05%                   |
+-----------------------------------------------------+
```

这部分跟踪每种模糊测试策略所建立的路径数量及其相对于尝试次数的比例，有助于验证各种方法的有效性假设。`trim` 统计信息略有不同：第一个数字显示从输入文件中删除的字节数占总文件字节数的比例；第二个数字对应实现此目标所需的 `exec` 数量；第三个数字表示虽无法删除但被认为无效果并被排除在重要确定性模糊处理步骤之外的字节比例。

### 3.8 路径几何

```
+---------------------+
|    levels : 5       |
|   pending : 1570    |
|  pend fav : 583     |
| own finds : 0       |
|  imported : 0       |
| stability : 100.00% |
+---------------------+
```

首字段表示模糊测试过程达到的路径深度。用户提供的初始测试用例被视为 `Level 1`，后续生成的输入用例依次递增。最大深度大致反映从编译策略中获得的测试价值。下一个字段表示尚未进入任何模糊测试的输入样例数量，受青睐条目的统计信息亦在此列出（非受青睐条目可能需等待几轮才能进入测试）。随后字段显示新路径的数量、从其他实例导入的新路径数量及相同输入在不同实例中行为的一致性。一致性测量表明相同输入下程序行为的一致性。低一致性可能导致 `AFL` 难以区分调整输入文件的意义，具体原因包括：
- 待测文件中使用了未初始化内存或熵源。
- 尝试操纵外部持久资源，如临时文件或共享内存对象。
- 功能故意产生随机输出。
- 多线程程序以半随机顺序单次执行。
- 持久模式下，`stability` 的轻微下降可能是正常的，但显著下降可能表明 `__AFL_LOOP()` 中的代码在后续迭代中行为不正确。

检测到变量行为的路径会在 `/queue/.state/variable_behavior/` 目录中标记。

### 3.9 CPU 利用率

```
[cpu: 25%]
```

该小部件显示本地系统上的明显 CPU 利用率，通过比较处于可运行状态的进程数与逻辑核心数计算得出。绿色表示可用 CPU 内核充足，红色则表示 CPU 可能已被超额使用。有关如何并行使用模糊测试器的提示，请参阅 `parallel_fuzzing.txt`。`afl-gotcpu` 实用程序可用于更精确地测量 CPU 使用情况。

### 3.10 补充：状态和绘图文件

对于无人值守操作，关键状态屏幕信息可在输出目录的 `fuzzer_stats` 文件中找到，包括启动时间、最后更新时间、PID、完成的队列周期、尝试的 `execve()` 调用次数、当前每秒执行次数、路径队列中的条目总数、通过本地模糊测试发现的路径条目数、从其他实例导入的路径条目数、生成的数据集中的路径深度级别数、当前处理的路径条目号、仍在等待模糊测试的受青睐路径条目数量、等待模糊测试的所有路径条目数量、行为一致的哈希表条目百分比、显示可变行为的测试用例数量、记录的唯一崩溃次数、遇到的唯一挂起数、用于模糊会话的完整命令行、最慢执行的实时时间（毫秒）以及模糊测试过程中达到的最大 RSS 使用量（MB）。此外，`plot_data` 条目包含大多数这些字段的历史记录，可使用 `gnuplot` 和随附的 `afl-plot` 工具转换为进度报告。