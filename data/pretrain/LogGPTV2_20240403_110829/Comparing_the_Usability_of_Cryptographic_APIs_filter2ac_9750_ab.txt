scrypt
simple-crypt
pysodium
ed25519
pyaes
PyCryptodome
PyMe
pyDes
tls
[42]
[8]
[43]
[44]
[45]
[46]
[47]
[48]
[49]
[50]
[51]
[52]
[53]
[54]
[55]
[56]
[57]
[58]
[59]
= applies;
= does not apply
s
d
a
o
l
n
w
o
D
25 149 446
10 481 277
2 369 827
595 277
46 013
10 188 101
641 488
536 851
189 851
140 703
140 446
112 254
49 275
29 670
19 091
16 960
2 489
? †
? †
Cryptography-related Python libraries and their features, ordered by
popularity. The top section includes the libraries we tested. Download
TABLE I
counts as of May 2016 were taken from the PyPI ranking website
(http://pypi-ranking.info). †No download statistics available.
PyCrypto, gnupg for its limited support for encryption (mainly
in the context of email), pycryptopp as it was deprecated
as of January 2016, and simple-crypt as it does not support
asymmetric cryptography.
In tables and ﬁgures throughout the paper, we order the
libraries as follows: PyCrypto ﬁrst as the most popular, then
M2Crypto as the other library without usability claims, then
the three libraries with usability claims.
C. Recruitment and framing
To maintain ecological validity, we wanted to recruit de-
velopers who actively use Python. To ﬁnd such developers,
we conducted a systematic analysis of Python contributors
on the popular GitHub collaborative source code management
service.
We extracted all Python projects from the GitHub Archive
database [60] between GitHub’s launch in April 2008 and
February 2016, giving us 749 609 projects in total. We ran-
domly sampled 100 000 of these repositories and cloned them.
Using this random sample, we extracted email addresses of
50 000 randomly chosen Python committers. These committers
served as a source pool for our recruiting.
157
We emailed these developers in batches, asking them to
participate in a study exploring how developers use Python
libraries. We did not mention cryptography or security in the
recruitment message. We mentioned that we would not be able
to compensate them, but the email offered a link to learn more
about the study and a link to remove the email address from
any further communication about our research. Each contacted
developer was assigned a unique pseudonymous identiﬁer (ID)
to allow us to correlate their study participation to their GitHub
statistics separately from their email address.
Recipients who clicked the link to participate in the study
were directed to a landing page containing a consent form.
After afﬁrming they were over 18, consented to the study, and
were comfortable with participating in the study in English,
they were introduced to the study framing. We asked partici-
pants to imagine they were developing code for an app called
CitizenMeasure, “a new global monitoring system that will
allow citizen-scientists to travel to remote locations and make
measurements about such issues as water pollution, deforesta-
tion, child labor, and human trafﬁcking. Please keep in mind
that our citizen-scientists may be operating in locations that
are potentially dangerous, collecting information that powerful
interests want kept secret. Our citizen scientists may have
their devices conﬁscated and hacked.” We hoped that this
framing would pique participants’ interest and motivate them
to make a strong effort to write secure code. We also provided
brief instructions for using the study infrastructure, which we
describe next.
D. Experimental infrastructure
After reading the study introduction and framing, partici-
pants were redirected to the tasks themselves. Our aim was
to conduct an online developer study in which real developers
would write and test real cryptographic code in our environ-
ment. We wanted to capture the code that they typed and their
program runs. We wanted to control the study environment
(Python version, available libraries) and collect data about
their progress in real time. To achieve this, we used Jupyter
Notebook [61], which allowed participants to write and run
Python code in their browser, using the Python installation
from our server. We instrumented the notebook to frequently
snapshot the participant’s code, as well as to detect and store
copy&paste events. All this information was stored on the
server.
We conﬁgured Notebook (version 4.2.1) with Python 2.7.11
and all ﬁve tested cryptographic libraries. To prevent inter-
ference between participants, each participant was assigned
to a Notebook running on a separate Amazon Web Service
(AWS) instance. We maintained a pool of prepared instances
so that each new participant could begin without waiting for
an instance to boot. Instances were shut down when each
participant ﬁnished, to avoid between-subjects contamination.
Tasks were shown one at a time, with a progress indicator
showing that the participant had completed, e.g., 1 of 3 tasks.
For each task, participants were given buttons to “Run and
test” their code, and to move on using “Solved, next task”
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:34 UTC from IEEE Xplore.  Restrictions apply. 
or “Not solved, but next task.” After each button press, we
stored the participant’s current code, along with metadata like
timing, in a remote database. An example Notebook is shown
in Figure 1.
Allowing participants to write and execute Python code
presents serious security concerns. To mitigate this, we re-
moved all unnecessary packages from the AWS image. We
used the AWS ﬁrewall to restrict incoming trafﬁc to port 80
and prevent outgoing trafﬁc other than to our study database,
which was password protected and restricted to sanitized insert
commands. All instances were shut down within 4 hours of
the last observed participant activity.
E. Task design
We designed tasks that were short enough so that
the
uncompensated participants would be likely to complete them
before losing interest, but still complex enough to be inter-
esting and allow for some mistakes. Most importantly, we
designed tasks to model real world problems that Python
developers could reasonably be expected to encounter in their
professional career. We chose two symmetric-encryption tasks:
generating an encryption key and storing it securely in a
password-protected ﬁle, and using the key to encrypt and
decrypt text. We chose three asymmetric tasks: generating a
key pair and storing the private key securely, using the public
key to encrypt and the private key to decrypt, and validating
an X.509 certiﬁcate.
Most of the libraries we chose support most of these tasks
(Table II). Unfortunately, task coverage by the libraries was
not uniform: Keyczar and PyNaCl do not support secure key
storage. The Keyczar documentation encourages generating
keys at the command line; this can be worked around in the
API, but it is not straightforward to do so. Keyczar and PyNaCl
do not support certiﬁcate validation directly, but it is possible
to extract the public key and manually verify the signature.
Finally, PyCrypto does not support certiﬁcate validation at all.
To account for cases where the library does not fully support
the task, we offered participants the option to skip a task.
For each task, participants were provided with stub code
and some commented instructions. These stubs were designed
to make the task clear and ensure the results could be easily
evaluated, without providing too much scaffolding. We also
provided a main method pre-ﬁlled with code to test
the
provided stubs. This helped orient participants and saved time,
but it did prevent us from learning how participants might have
designed their own tests.
We also asked participants to please use only the included
documentation for their assigned library, if at all possible,
and to report (in comments) any additional documentation
resources they consulted.
F. Python cryptographic libraries we included
We brieﬂy review the available features and documentation
for each library we selected for our experiment (Table II).
PyCrypto. The Python cryptographic toolkit PyCrypto [42]
is Python’s most popular cryptographic library. Developers
n
o
i
t
p
y
r
c
e
D
/
n
o
i
t
p
y
r
c
n
E
c
i
r
t
e
m
m
y
S
e
g
a
r
o
t
S
y
e
K
c
i
r
t
e
m
m
y
S
e
r
u
c
e
S
n
o
i
t
a
r
e
n
e
G
y
e
K
c
i
r
t
e
m
m
y
s
A
n
o
i
t
p
y
r
c
e
D
/
n
o
i
t
p
y
r
c
n
E
c
i
r
t
e
m
m
y
s
A
e
g
a
r
o
t
S
y
e
K
c
i
r
t
e
m
m
y
s
A
e
r
u
c
e
S
n
o
i
t
a
d
i
l
a
V
e
t
a
c
ﬁ
i
t
r
e
C
n
o
i
t
a
r
e
n
e
G
y
e
K
c
i
r
t
e
m
m
y
S
y
t
i
l
i
b
a
s
U
r
o
f
d
e
n
g
i
s
e
D
n
o
i
s
r
e
V
t
n
e
r
r
u
C
Library
PyCrypto
M2Crypto
cryptography.io
Keyczar
PyNaCl
2.6.1
0.25.1
1.4
0.716
1.0.1
= fully applies;
= partly applies;
= does not apply
Features and popularity for the ﬁve cryptography libraries we tested.
Popularity data was updated as of Aug. 11, 2016.
TABLE II
can choose among several encryption and hashing algorithms
and modes of operation, and may provide initialization vectors
(IVs).
PyCrypto comes with primarily auto-generated documenta-
tion that includes minimal code examples. The documentation
recommends the Advanced Encryption Standard (AES) and