Control
subobject
9. Marshall
    result
5. Unmarshall
    request
Replication
subobject
10. Send result
over network
channel
3. Handle 
    request
Communication
subobject
    Replica
8. Return result
  6. Execute request
Semantcs
subobject
7. Application-specific
    security processing
Security Subobject
Secure Channels Table
Channel 
ID
User
Permissions
    0
    1
    2
    3
00100101
01110111
11010011
00000110
 4. Authorize 
      request
      2. Decrypt
 and authenticate
request
User Proxy
        11. Network data transfer
1. User proxy sends request over the network
Figure 6. DSO replica handling a user request
At the other end, things happen as shown in Figure 6.
Once a replica has established a secure channel with a user
proxy, it will store the bitmap from the user certiﬁcate in
the table of secure channels in the security subobject. For
any method invocation request coming in through that chan-
nel, the replication subobject asks the security subobject to
check the user’s permissions. Once the request is approved,
the replication subobject passes the marshaled request to the
control subobject, which unmarshalls it and passes it to the
semantics subobject. After the method is executed, the re-
turn value is passed back to the caller over the same secure
channel.
Initial Data
User - U
- user’s certificate
C u
Y u xu
/
- user’s public/private keys
Replica - R
C R - replica’s certificate
Y R
/ x
  R
- replica’s public/private keys
Protocol
User - U
Replica - R
C u
,C r
Nonce 1
x
u
 >x
Y
u
R
Figure 7. Protocol for establishing a shared
key between a user and a replica
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
8 Related Work
In the past decade, distributed systems security has re-
ceived considerable attention. What makes our design dif-
ferent compared to other work in this area is the fact that
we explicitly deal with security problems that arise from
dynamically replicating objects on a possibly large set of
servers with various degrees of trustworthiness. All the se-
curity architectures we are aware of consider at most repli-
cation of objects in the same administrative domain, or in
mutually trusted domains. The distinctive feature of our ar-
chitecture is that object replicas can be placed on trusted,
but also on less trusted hosts, and replica functionality can
be restricted depending on how much trust is put on the host
that is running the replica’s server.
One of the most comprehensive security models is the
one designed for CORBA [3]. The CORBA model has pro-
visions for user authentication, authorization, access con-
trol, security of network trafﬁc, auditing, non-repudiation,
and security administration. Security itself is implemented
in the form of application-speciﬁc policy objects, which are
invoked when a remote request is dispatched or received.
While the CORBA security design is extremely ﬂexible, it
is also server centric and may be less scalable over wide-
area networks. Furthermore, the CORBA model does not
deal at all with mobile code, and has little support for inter-
domain security.
What makes the Java [12] security design close to our
model is the fact that it explicitly considers the issue of pro-
tecting hosts against malicious mobile code.
In fact, the
platform security part of our design can be implemented
using the security features offered by Java 2.0. However,
there are a series of security issues handled by Globe which
are outside the Java model, such as user authentication, and
support for object replication.
Two other projects related to our security design are
Globus [10] and Legion [29]. Globus is a distributed sys-
tem designed for computational grids. Its security model
gives extensive support for inter-domain user authentication
and remote-process creation, but it is less concerned with
trust models for hosts, so in the end users have little con-
trol on which machines their code is running. The reverse
access control mechanisms in Globe offer a lot more ﬂexi-
bility from this point of view. Finally, the Globus security
architecture aims “to provide a thin layer of homogeneity
to tie together disparate and, often incompatible, local secu-
rity mechanisms”, which in the end may turn out to be very
restrictive.
Legion is another effort in the scientiﬁc computation
area. There are some similarities between Globe and Le-
gion. For example, they are both object based, and both
make use of self-certiﬁed object identiﬁers. However Le-
gion does not deal with dynamic object replication, and in-
troduces a more high-level security design, stressing ﬂexi-
bility and extensibility, but less architecture and protocols.
OASIS [14] is a distributed security architecture centered
on role-based access control. Principals can acquire new
roles based on roles they already have and their credentials.
OASIS also includes a Role Deﬁnition Language that can be
used for representing security policies based on these roles.
However, OASIS does not explicitly deal with replicated
applications, and has no support for reverse access control.
Finally, in the past few years we have seen an explosion
of peer-to-peer (P2P) applications that have sprung out ei-
ther as academic projects (SETI@home [4], Publius [28]),
or as freeware tools to facilitate media exchange (Napster
and Gnutella). What makes such applications interesting is
the fact they rely on storage and computation on unsecure
platforms and, despite traditional security wisdom, manage
to get reasonably accurate results. Much effort is put into
models and mechanisms by which the security of these sys-
tems can be improved. For example, in OceanStore [16],
content can be integrity-checked by clients, whereas other
systems concentrate on anonymity [22] or content traceabil-
ity [7]. Another interesting attempt to provide security and
privacy for a P2P architecture is described in [8]. How-
ever, many of these systems put emphasis on immutable
ﬁles, which may severely restrict the area of possible ap-
plications. In general, research on secure P2P systems is
still in its infancy.
9 Conclusion
In this paper we have presented the security architecture
for Globe, a distributed system based on replicated shared
objects. Our design allows deﬁning per-object security poli-
cies, ﬁne-grained (per method) access control and does not
rely on any centralized authority that would limit the scala-
bility of the system. Furthermore, we deal only with general
security services (since Globe is a middleware) and allow
application-speciﬁc features to be built on top of these ser-
vices. Our architecture makes use of well-proven security
techniques to address a range of security issues, some com-
mon to distributed systems, and others speciﬁc to Globe.
The fact that Globe objects can be dynamically replicated
and simultaneously run on multiple hosts introduces a series
of new security problems such as reverse access control for
object replicas and protection of distributed objects against
malicious hosts running instances of their code. These is-
sues have not been extensively addressed in previous work,
and form the major contribution of the research described
in this paper.
As for future work, we plan to integrate our security de-
sign in the Globe Object Server prototype we have already
built. For implementing the platform security features de-
scribed in Section 6, we plan to use the facilities offered
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
by Java 2.0 (per-class protection domains), but intend to
implement the same functionality using some other sand-
boxing tool such as Janus. Finally, we plan to integrate
a reputation/rating mechanism as a service offered by the
Globe middleware, and investigate whether such a mech-
anism could efﬁciently ﬁlter out malicious Globe Object
Servers.
References
[1] Secure Hash Standard. FIPS 180-1, Secure Hash Stan-
dard, NIST, US Dept. of Commerce, Washington D. C. April
1995.
[2] The Common Object Request Broker: Architecture and
Speciﬁcation, revision 2.6. www.omg.org, Oct 2000. OMG
Document formal/01-12-01.
[3] CORBA Security Service Speciﬁcation, Version 1.7.
www.omg.org, March 2001. Document Formal/01-03-08.
[4] D. Anderson. Peer-to-Peer: Harnessing the Power of Dis-
ruptive Technologies, chapter 5. O’Reilly&Associates, Se-
bastopol, CA 95472, July 2001.
[5] A. Baggio, G. Ballintijn, M. van Steen, and A. Tanenbaum.
Efﬁcient Tracking of Mobile Objects in Globe. The Com-
puter Journal, 44(5):340–353, 2001.
[6] A. Bakker, M. van Steen, and A. Tanenbaum. From Re-
mote Objects to Physically Distributed Objects. In Proc. 7th
IEEE Workshop on Future Trends of Distributed Computing
Systems, pages 47–52, December 1999.
[7] A. Bakker, M. van Steen, and A. Tanenbaum. A Law-
Abiding Peer-to-Peer Network for Free-Software Distribu-
tion. In Proc. IEEE Int’l Symp. on Network Computing and
Applications, Cambridge, MA, February 2002.
[8] F. Cornelli, E. Damiani, S. D. C. di Vimercati, S. Paraboschi,
and P. Samarati. Choosing Reputable Servents in a P2P Net-
work. In Proc. of the Eleventh Int’l WWW Conference, Hon-
olulu, HI, May 2002.
[9] G. Eddon and H. Eddon. Inside Distibuted COM. Microsoft
Press, Redmond, WA, 1998.
[10] I. Foster, C. Kesselman, G. Tsudik, and S. Tuecke. A
Security Architecture for Computational Grids.
In Proc.
ACM Conference on Computer and Communications Secu-
rity, pages 83–92, San Francisco, CA, 1998.
[11] I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. A
Secure Environment for Untrusted Helper Applications. In
Proc. 6th Usenix Security Symposium, San Jose, CA, 1996.
[12] L. Gong. Inside Java 2 Platform Security. Addison-Wesley,
Palo Alto, CA 94303, 1999.
[13] A. Grimsaw and W. Wulf. Legion - A View from 50000
Feet. In Proc. 5th IEEE Symp. on High Performance Distr.
Computing, Aug 1996.
[14] J. H. Hine, W. Yao, J. Bacon, and K. Moody. An architecture
for distributed OASIS services. In Proc. Middleware 2000,
pages 104–120, Hudson River Valley, NY, April 2000.
[15] R. Kruger and J. Eloff. A Common Criteria Framework for
the Evaluation of Information Technology Security Evalua-
tion. In IFIP TC11 13th International Conference on Infor-
mation Security, (SEC’97), pages 197–209, 1997.
[16] J. Kubiatowicz, D. Bindel, Y. Chen, P. Eaton, D. Geels,
R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer,
C. Wells, and B. Zhao. OceanStore: An Architecture for
Global-scale Persistent Storage. In Proc. 9th ACM ASPLOS,
pages 190–201, Cambridge, MA, November 2000. ACM.
[17] J. Leiwo, C. Hanle, P. Homburg, C. Gamage, and A. Tanen-
baum. A Security Design for a Wide-Area Distributed Sys-
tem. In Proc. Second International Conference Information
Security and Cryptology (ICISC’99), volume 1787 of LNCS,
pages 236–256. Springer, 1999.
[18] D. Mazieres, M. Kaminsky, M. F. Kaashoek, and E. Witchel.
Separating Key Management from File System Security. In
Proc. 17th Symp. on Operating Systems Principles, pages
124–139, Kiawah Island, SC, 1999.
[19] G. Pierre and M. van Steen. A Trust Model for Coopera-
tive Content Distribution Networks. Technical report, Vrije
University, Amsterdam, 2001.
[20] G. Pierre, M. van Steen, and A. Tanenbaum. Dynamically
Selecting Optimal Distribution Strategies for Web Docu-
ments.
IEEE Transactions on Computers, 51(6):637–651,
2002.
[21] B. Popescu and A. Tanenbaum. A Certiﬁcate Revocation
Scheme for a Large-Scale Highly Replicated Distributed
System. Technical report, Vrije University, Amsterdam,
2002. In preparation.
[22] M. K. Reiter and A. D. Rubin. Anonymous Web transactions
with Crowds. Communications of the ACM, 42(2):32–48,
1999.
[23] R. L. Rivest and B. Lampson. SDSI – A Simple Distributed
Security Infrastructure. Presented at CRYPTO’96 Rumpses-
sion, 1996.
[24] D. Schmidt and C. Vinoski. Object Adapters: Concepts and
Terminology. C++ Report, 9(11), November 1997.
[25] M. van Steen, F. Hauck, P. Homburg, and A. Tanenbaum.
IEEE Commun.
Locating Objects in Wide-Area Systems.
Mag., pages 104–109, January 1998.
[26] M. van Steen, P. Homburg, and A. Tanenbaum. Globe: A
Wide-Area Distributed System. IEEE Concurrency, pages
70–78, January-March 1999.
[27] M. van Steen, A. Tanenbaum, I. Kuz, and H. Sips. A Scal-
able Middleware Solution for Advanced Wide-Area Web
Services. Distributed Systems Engineering, 6(1):34–42,
March 1999.
[28] M. Waldman, A. D. Rubin, and L. F. Cranor. Publius: A Ro-
bust, Tamper-Evident, Censorship-Resistant, Web Publish-
ing System. In Proc. 9th Usenix Security Symposium, pages
59–72, Denver, CO, August 2000.
[29] W. A. Wulf, C. Wang, and D. Kienzle. A New Model of
Security for Distributed Systems. Technical Report CS-95-
34, 10, 1995.
[30] R. Zuccherato. ISO/IEC 9798-3 authentication SASL mech-
anism. RFC3163, August 2001.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE