fs
CCS ’20, November 9–13, 2020, Virtual Event, USA
Schwabe, Stebila, Wiggers
Let KE be an M-stage key-exchange protocol, and let A be a
probabilistic adversary interacting with KE via the queries defined
in Appendix B.2. A tries to win the following game 𝐺Match
KE,A :
key pairs(cid:0)pk𝑈 , sk𝑈(cid:1) for each participant 𝑈 ∈ U that re-
Setup The challenger generates long-term public and private
quires a long-term key. All keys are provided to A.
Query The adversary has access to the queries NewSession,
Send, Reveal, Corrupt, and Test.
must have 𝜋 .key𝑗 = 𝜋′.key𝑗.
{1, . . . , M} for which 𝜋 .sid𝑖 = 𝜋′.sid𝑖 ̸= ⊥.
lowing conditions:
Stop At some point, the adversary stops with no output.
Let 𝜋, 𝜋′ be distinct partnered sessions with some stage 𝑖 ∈
We say that A wins 𝐺Match
KE,A if it can falsify any one of the fol-
(1) 𝜋, 𝜋′ agree on the same key at every stage 𝑗 ≤ 𝑖, i.e., they
(2) 𝜋, 𝜋′ have opposite roles: 𝜋 .role ̸= 𝜋′.role.
(3) 𝜋, 𝜋′, partnered in some stage 𝑖, have set and agree on the
contributive identifier, i.e., 𝜋 .cid𝑖 = 𝜋′.cid𝑖 ̸= ⊥.
(4) for every stage 𝑗 ≤ 𝑖 of 𝜋 that has reached a (retroactively) ex-
plicitly authenticated state, i.e., such that 𝜋 .status𝑖 = accepted
and 𝑖 ≥ 𝜋 .auth𝑗, the identity of the peer is correct: 𝜋 .pid =
𝜋′.id.
(5) 𝜋, 𝜋′ (not necessarily distinct) have distinct session identi-
fiers across distinct stages 𝑖, 𝑗: 𝜋 .sid𝑖 = 𝜋′.sid𝑗 implies 𝑖 = 𝑗.
(6) 𝜋, 𝜋′ do not have any third partner session 𝜋′′, i.e., at any
stage 𝑖, having 𝜋 .sid𝑖 = 𝜋′.sid𝑖 = 𝜋′′.sid𝑖 ̸= ⊥ implies 𝜋 = 𝜋′,
𝜋′ = 𝜋′′, or 𝜋 = 𝜋′′.
Theorem B.2. KEMTLS is Match-secure. In particular, any effi-
cient adversary A has advantage
AdvMatch
KEMTLS,A ≤ 𝑛𝑠(𝛿𝑒 + 𝛿𝑠) + 𝑛2
𝑠 /2|nonce|,
where 𝑛𝑠 is the number of sessions, |nonce| is the length of the nonces
𝑟𝑐 and 𝑟𝑠 in bits, and the ephemeral and long-term KEM algorithms
are assumed to be 𝛿𝑒- and 𝛿𝑠-correct, respectively.
Proof. We need to show each property of Match security (Def-
inition B.1) holds:
(1) The session identifiers are defined to contain all handshake
messages. KEM messages and hashes of those messages are
only inputs into the key schedule. In stages 1 and 2, the input
to the agreed keys is the ephemeral KEMe shared secret and
the messages up to ServerHello. For stage 3 and 4, the input
to the agreed keys are the previous keys, messages up to
ClientKemCiphertext and the static KEMs shared secret.
For the final stages 5 and 6, the input to the keys is the
previous keys and the messages up to ClientFinished and
ServerFinished respectively. It is easy to confirm that this
is all included in the session identifiers. This means that
the parties use the same inputs to their computations. The
only way they can arrive at different keys is if any of their
computations are not perfectly correct. The ephemeral and
long-term KEMs have some small probability of failure, 𝛿𝑒
and 𝛿𝑠, respectively, in each of the 𝑛𝑠 sessions. This gives us
a failure probability of 𝑛𝑠 (𝛿𝑒 + 𝛿𝑠).
(2) No initiator or responder will ever accept a wrong-role in-
coming message, so any pair of two sessions must have both
an initiator and a responder. We will later show that at most
two sessions have the same sid, implying that this pairing
will be unique and thus opposite.
(3) By definition, cid𝑖 is final and equal to sid𝑖 whenever stage 𝑖
is accepted.
(4) The partnered sessions only have to agree once they reach
a retroactively authenticated stage. The identity is learned
through the ServerCertificate sent by the responder. Be-
cause Match security only concerns honest sessions, the
ServerCertificate received by the initiator will set the
correct pid.
(5) Every stage’s session identifier is defined to have a unique
label, thus there can be no confusion across distinct stages.
(6) The session identifiers include the random nonce and KEM
public key and ciphertext. For three sessions to have the
same identifier, we would need to have a collision of these
values picked by honest servers and clients. Without making
assumptions on the KEM scheme, we can rely on distinctness
of nonces under the birthday bound on 𝑛𝑠 the number of
sessions: the probability of failing in 𝑛𝑠 sessions is less than
𝑠 /2|nonce|, which is negligible in the bit-length of the nonce.
𝑛2
□
B.5 Multi-Stage security
The Multi-Stage experiment was introduced by [41] and was also
used by DFGS for TLS 1.3 [38, 39]. In this original formulation,
secrecy of each stage key is defined as being indistinguishable
from a random key, Bellare–Rogaway-style [6]. Our formulation of
Multi-Stage is extended to also model explicit authentication.
We first define the terms fresh and maliciously accept.
Definition B.3 (Freshness). Stage 𝑖 of a session 𝜋 is said to be fresh
if all of the following conditions hold:
(1) the stage key was not revealed (𝜋 .revealed𝑖 = false);
(2) the stage key of the partner session at stage 𝑖, if the partner
exists, has not been revealed (for all 𝑖, 𝜋′ such that 𝜋 .sid𝑖 =
𝜋′.sid𝑖, we have that 𝜋′.revealed𝑖 = false);
(3) (weak forward secrecy 1) if there exists 𝑗 ≥ 𝑖 such that
𝜋 .FS𝑖,𝑗 = wfs1 and 𝜋 .status𝑗 = accepted, then there exists a
contributive partner at stage 𝑖;
(4) (weak forward secrecy 2) if there exists 𝑗 ≥ 𝑖 such that
𝜋 .FS𝑖,𝑗 = wfs2 and 𝜋 .status𝑗 = accepted, then there exists a
contributive partner at stage 𝑖 or Corrupt(𝜋 .pid) was never
called;
(5) (forward secrecy) if there exists 𝑗 ≥ 𝑖 such that 𝜋 .FS𝑖,𝑗 = fs
and 𝜋 .status𝑗 = accepted, then there exists a contributive
partner at stage 𝑖 or Corrupt(𝜋 .pid) was not called before
stage 𝑗 of session 𝜋 accepted.
Definition B.4 (Malicious acceptance). Stage 𝑖 of session 𝜋 is said
to have maliciously accepted if all of the following conditions hold:
= accepted;
(1) 𝜋 .status𝜋 .auth𝑖
(2) there does not exist a unique partner of 𝜋 at stage 𝑖; and
(3) Corrupt(𝜋 .pid) was not called before stage 𝑗 of session 𝜋
accepted, where 𝑗 = max{ℓ : 𝜋 .statusℓ = accepted}.
Now we can define our version of the Multi-Stage security ex-
periment.
Post-Quantum TLS Without Handshake Signatures
CCS ’20, November 9–13, 2020, Virtual Event, USA
Definition B.5 (Multi-Stage security). Let KE be an M-stage key-
exchange protocol, and let A be a probabilistic adversary interact-
ing with KE via the queries defined in Appendix B.2. The adversary
tries to win the following game 𝐺Multi-Stage
Setup The challenger generates all long-term keys(cid:0)pk𝑈 , sk𝑈(cid:1)
KE,A
:
for all identities 𝑈 ∈ U and picks a uniformly random bit 𝑏
(for the Test queries). The public keys are provided to A.
Send, Reveal, Corrupt, and Test.
Query The adversary has access to the queries NewSession,
Stop At some point, A stops and outputs their guess 𝑏′ of 𝑏.
Finalize The adversary wins the game if either of the following
conditions hold:
(1) all tested stages are fresh (for all 𝑗, 𝜋′ such that 𝜋 .tested𝑗 =
true, stage 𝑗 of session 𝜋′ is fresh), and 𝑏′ = 𝑏; or
(2) there exists a stage that has maliciously accepted;
in which case the experiment 𝐺Multi-Stage
outputs 1. Oth-
erwise the adversary has lost the game, in which case the
experiment 𝐺Multi-Stage
outputs a uniform bit.
KE,A
KE,A
The Multi-Stage-advantage of A is defined as:
(cid:12)(cid:12)(cid:12)(cid:12)Pr(cid:104)𝐺Multi-Stage
KE,A
⇒ 1(cid:105) − 1
2
(cid:12)(cid:12)(cid:12)(cid:12) .
AdvMulti-Stage
KE,A
=
Theorem B.6. Let A be an algorithm, and let 𝑛𝑠 be the number
of sessions and 𝑛𝑢 be the number of parties. There exist algorithms
B1, . . . , B16, described in the proof, such that
AdvMulti-Stage
KEMTLS,A ≤
𝑛𝑠
(cid:169)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:171)
+ AdvPRF-sec
𝑛2
2|nonce| + AdvCOLL
𝑠
H,B1
AdvIND-1CCA
HKDF.Extract,B3
KEMe,B2
+ AdvPRF-sec
+ Advdual-PRF-sec
HKDF.Expand,B4
+ Advdual-PRF-sec
+ AdvPRF-sec
HKDF.Expand,B6
+ AdvPRF-sec
+ AdvPRF-sec
HKDF.Expand,B8
AdvIND-CCA
+ Advdual-PRF-sec
KEMs,B10
HKDF.Extract,B11
+ AdvPRF-sec
HKDF.Expand,B12
+ AdvPRF-sec
HKDF.Expand,B14
+ 𝑛𝑢 · AdvEUF-CMA
HMAC,B16
HKDF.Extract,B5
HKDF.Extract,B7
HKDF.Expand,B9
(cid:169)(cid:173)(cid:173)(cid:173)(cid:171)
+ 2𝑛𝑢
+ Advdual-PRF-sec
+ AdvPRF-sec
HKDF.Extract,B13
HKDF.Expand,B15
(cid:170)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:172)
(cid:169)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:171)
(cid:170)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:172)
(cid:170)(cid:174)(cid:174)(cid:174)(cid:172)
.
+ 6𝑛𝑠
Proof. The proof follows the basic structure of the proof of
DFGS [38, 39] for the TLS 1.3 signed-Diffie–Hellman full handshake,
and proceeds by a sequence of games.
We assume that all tested sessions remain fresh throughout the
experiment, as otherwise the adversary loses the indistinguishabil-
ity game.
Game 0. We define 𝐺0 to be the original Multi-Stage game:
AdvMulti-Stage
KEMTLS,A = Adv𝐺0A .
Game 1. We abort if any honest session uses the same nonce 𝑟𝑐
or 𝑟𝑠 as any other session. Given that there are 𝑛𝑠 sessions each
using uniformly random nonces of size |nonce|= 256, the chance
of a repeat is given by a birthday bound:
Adv𝐺0A ≤
𝑛2
2|nonce| + Adv𝐺1A1
𝑠
.
Game 2. In this game, the challenger will abort if any two honest
sessions compute the same hash for different inputs of hash function
H. If this happens, it induces a reduction B1 that can break the
collision-resistance of H. If a collision occurs, B1 outputs the two
distinct input values. Thus:
Adv𝐺1A1 ≤ Adv𝐺2A1
+ AdvCOLL
H,B1
.
Game 3. We now restrict A to only make a single Test query.
This reduces its advantage by at most 1/6𝑛𝑠 for the six stages,
based on a hybrid argument by Günther [50]. Any single-query
adversary A1 can emulate a multi-query adversary A by guessing
a to-be-tested session in advance. For any other Test queries A may
submit, A1 can substitute by Reveal queries. A1 will need to know
how sessions are partnered. Early partnering is decided by public
information (sid1, sid2), but later sids are encrypted. However, A1
can just reveal the handshake traffic keys to decrypt the subsequent
information.
A1 guess the right session and stage:
We get the following advantage by letting transformed adversary
Adv𝐺2A ≤ 6𝑛𝑠 · Adv𝐺3A1
.
With this transformation, we can now refer to the session 𝜋 tested
at stage 𝑖, and assume that we know the tested session 𝜋 at the
outset.
Case distinction.
We now consider three separate cases of game 3.
A. (denoted 𝐺𝐴) The tested session 𝜋 has a contributive partner
in stage 1. Formally, there exists 𝜋′ ̸= 𝜋 where 𝜋′.cid1 =
𝜋 .cid1.
B. (denoted 𝐺𝐵) The tested session 𝜋 does not have a contribu-
tive partner in stage 1, and there was no Corrupt(𝜋 .pid)
query ever.
C. (denoted 𝐺𝐶) The tested session 𝜋 does not have a contribu-
tive partner in stage 1, and there was no Corrupt(𝜋 .pid)
query before the stage 𝑖 of 𝜋 accepted.
Notice that these cases roughly correspond to the three different
forward secrecy properties (wfs1, wfs2, fs).
We will consider the advantage of the adversary separately for
these three cases:
Adv𝐺3A1 ≤ max(cid:110)
(cid:111)
Adv𝐺𝐴A1
+ Adv𝐺𝐵A1
≤ Adv𝐺𝐴A1
, Adv𝐺𝐵A1
, Adv𝐺𝐶A1
+ Adv𝐺𝐶A1
Case A: Stage 1 contributive partner exists
If the tested session 𝜋 is a client (initiator) session, then 𝜋 .cid1 =
𝜋 .sid1, and a partner session at stage 1 also exists. Since sid1 in-
cludes both the client and server nonces 𝑟𝑐 and 𝑟𝑠 via the CH and
SH messages, and by game 1 no honest sessions repeat nonces, the
contributive partner is unique.
If the tested session 𝜋 is a server (responder) session, then it
is possible that, while the contributive partner session at stage 1
exists, the partner session at stage 1 may not exist. However, since
cid1 includes the client nonce (which by Game 1 are unique) and
contributive partnering includes roles, there is no other honest
client session that is a contributive partner at stage 1.
CCS ’20, November 9–13, 2020, Virtual Event, USA
Schwabe, Stebila, Wiggers
So we can talk of the tested session and its unique contributive
partner at stage 1. Let 𝜋′ be the unique honest contributive partner
of 𝜋 at stage 1. In the following, we let 𝜋𝑐 denote the one of {𝜋, 𝜋′}
which is a client (initiator) session, and we let 𝜋𝑠 denote the one
which is a server (responder) session.
Game A1 (guess contributive partner session). In this game,
the challenger tries to guess the 𝜋′ ̸= 𝜋 that is the honest contribu-
tive partner to 𝜋 at stage 1.
This reduces the advantage of A1 by a factor of the number of
sessions 𝑛𝑠: