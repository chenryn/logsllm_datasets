    [heap]:0000564A82C794E0 dword_564A82C794E0 dd 11h
    [heap]:0000564A82C794E0 dd 22h
    [heap]:0000564A82C794E0 dd 33h
    [heap]:0000564A82C794E0 dd 44h
    [heap]:0000564A82C794E0 dd 55h
    [heap]:0000564A82C794E0 dd 66h
    [heap]:0000564A82C794E0 dd 77h
    [heap]:0000564A82C794E0 dd 88h
之后就直接比对结果了。直接输入0C0DADBEDEEDEF并不能的到flag，虽然显示通过了check但是输出的flag并不对：
    Welcome resreveR!...
    PASSCODE:0C0DADBEDEEDEF
    GOOD JOB U GOT THIS, HERE IS UR FLAG:s62ine'
因为一共有7!种排列方式。用itertools爆破求出flag即可
    from pwn import *
    from itertools import *
    context.log_level = 'error'
    a = [0xad,0xef,0xbe,0xde,0xc,0xed,0xd]
    b = permutations(a,7)
    for i in b:
        p = process('./bin')
        payload = ''
        for j in range(7):
            k = hex(i[j])[2:]
            if(len(k)==1):
                k = '0'+k
            payload+=k
        p.recv()
        p.sendline(payload)
        p.recvuntil('FLAG:')
        a = p.recv()
        if a.startswith('securinets'):
            print(a)
            exit()
        p.close()
## RBOOM!
上来有个ptrace的反调试，直接jmp掉
读取输入后，写入文件"lla"。主要的加密逻辑在`sub_93A`里。从文件"lla"和文件“la”读取数据后，在`sub_CCF`加密。
    v11 = 0;
      v13 = 0;
      for ( i = 0; i > 31) >> 24;
        v11 = (unsigned __int8)(v5 + v18[j] + v11 + v17[j]) - v5;
        v6 = v18[v11];
        v18[v11] = v18[j];
        v18[j] = v6;
      }
      v12 = 0;
      for ( k = 0; k > 31) >> 24))
            - ((unsigned int)((signed int)((signed int)&off_2F98 + 0xFFFFD069 + v13) >> 31) >> 24);
        v7 = (unsigned int)((v12 + (unsigned __int8)v18[v13]) >> 31) >> 24;
        v12 = (unsigned __int8)(v7 + v12 + v18[v13]) - v7;
        v8 = v18[v12];
        v18[v12] = v18[v13];
        v18[v13] = v8;
        a5[k] = v18[(unsigned __int8)(v18[v13] + v18[v12])] ^ input[k];
      }
看到有两个长度为256的循环，猜测一下是RC4。不太想分析太多，直接在input异或的地方`00000F5F`下断点，编辑断点添加condition：print(GetRegValue('ecx'))，这样直接能在ida的输出窗口将它异或的东西输出出来，再之后就是和常量比较了。
当然也可以直接用RC4解密，看个人喜好
    a = [219, 87, 247, 80, 74, 188, 141, 29, 127, 165, 123, 43, 219, 11, 64, 236, 244, 233, 240, 132, 136, 239, 180, 2, 232, 137, 128, 129, 139, 1, 251, 46, 19, 18, 176, 44, 71, 111, 163, 36, 109, 38, 229, 248, 92, 183, 230, 30, 75, 97, 236, 159, 242]
    with open('ll','rb') as f:
        s = ''
        for i in range(33):
            s+=chr(a[i]^ord(f.read(1)))
        print(s)
## monster
这题算法十分简单，但如果不熟悉大整数运算算法的话看起来会比较吃力
首先还是接受16进制的输入，主要加密逻辑在`00000B52`里面
    void __cdecl encode(char *s, __int64 a3)//s:"tsebehtsignisrever" a3:input
    {
      unsigned __int64 a1; // [esp+8h] [ebp-20h]
      size_t i; // [esp+18h] [ebp-10h]
      a1 = __PAIR__(HIDWORD(a3), (unsigned int)a3);
      for ( i = 0; strlen(s) > i; ++i )
      {
        temp[i] = a1 ^ s[i];
        a1 = mod(1337 * a1, 133713371337LL);
      }
    }
当然原本是没有符号表的，这里是我改的。
这里的mod函数就是取模运算，不过是对64位大整数的取模运算，这是一个32位程序，所以要对64位数取模要用两个寄存器/Dword表示，会麻烦一些。一开始对着这个函数日了好久，最终发现是手动在32程序里写了一个64位整数的取模运算，也是浪费了一些时间=
=
直接用z3约束求解器解吧
    from z3 import *
    from pwn import *
    context.log_level = 'debug'
    p = process('./rev',)
    # p = remote('54.87.182.197','1337')
    a= BitVec('a',64)
    s = Solver()
    const = [0xCA, 0x3D, 0x3B, 0x5B, 0x4C, 0x9D, 0xD2, 0xCB, 0xDD, 0x17, 0x8D, 0xDC, 0xB9, 0x49, 0x3B, 0xEA, 0x12, 0x25]
    key = [  0x74, 0x73, 0x65, 0x62, 0x65, 0x68, 0x74, 0x73, 0x69, 0x67, 0x6E, 0x69, 0x73, 0x72, 0x65, 0x76, 0x65, 0x72]
    for i in range(len(key)):
        const[i]^=key[i]
        s.add(a &0xff == const[i])
        a = (a*1337)%133713371337
    if s.check() == sat:
        m = s.model()
        payload = hex(m[m[0]].as_long())
        print(payload)
    # payload = '564e9367e6e30be'
    p.sendline(payload)
    print(p.recv())
比赛的服务器已经关闭了，本地肯定能打
# Sunshine CTF 2019
## Patches' Punches
打开程序后直接结束了，看一下汇编有一个永真的语句，把`00000540`patch成与1比较，直接得到flag
    .text:0000052B                 push    ecx
    .text:0000052C                 sub     esp, 10h
    .text:0000052F                 call    __x86_get_pc_thunk_ax
    .text:00000534                 add     eax, 1AA4h
    .text:00000539                 mov     [ebp+var_10], 1
    .text:00000540                 cmp     byte ptr [ebp+var_10], 1
    .text:00000544                 jnz     short lose
    .text:00000546                 mov     [ebp+var_C], 0
    .text:0000054D                 jmp     short win
## Smash
加密逻辑在`checkAccessCode`函数里，把输入右移一定大小，然后跟常量对比。
    a = [0x0E60, 0x3A8, 0x1B80, 0x0F60, 0x120, 0x0EA0, 0x188, 0x358, 0x1A0, 0x9A0, 0x184, 0x4E0, 0x0C40, 0x0C20, 0x5A0, 0x1C8, 0x1D4, 0x9C0, 0x1CC, 0x0B40, 0x0AE0, 0x62, 0x360, 0x340, 0x5A0, 0x180, 0x6E0, 0x0B40, 0x1540, 0x0FA0]
    b = [5, 3, 6, 5, 2, 5, 3, 3, 3, 5, 2, 4, 6, 5, 5, 2, 2, 5, 2, 6, 5, 1, 3, 4, 5, 3, 4, 6, 6, 5]
    s = ''
    for i in range(len(a)):
        a[i] >>= b[i]
        s+=chr(a[i])
    print(s)
## The Whole Pkg
这题就有点意思了，直接打开是个文件读取系统
输入1看文件目录，输入2打印文件
输入3提示没有权限
其他的文件都能正常读
思考一下，可能输3之后会有个函数check，想办法定位到那个check，如果它是采用返回0/1的方式check，可以尝试修改返回值（eax）
用ida打开直接凉凉，里面一大堆库函数乱起八糟挺难分析的
用x64dbg动调，直接运行，先输入一个2，接下来先暂停再输入3回车，这样会暂停到输完3那一步，可以看到我们的输入“3\r\n”在栈里面。
在字符'3'下硬件断点，继续运行，会停到一个函数内，看起来像是strlen，返回了函数长度3。
继续运行，断到另一个函数，看起来像是strcpy，在copy的新地址下硬件断点。
继续运行，来到一个类似check的地方，直接运行到返回，返回值是1，尝试改成0（返回后也能看到它和1，-1，0比较），把之前的断点删除继续与运行，这时候又来到一个要求输入的地方，尝试输入一个3和回车，flag就直接被打印出来了。。。
做法很玄学，希望大佬们能讲解下具体细节= =