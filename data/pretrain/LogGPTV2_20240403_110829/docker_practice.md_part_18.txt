跟主机系统共享进程命名空间。打开该选项的容器之间，以及容器和宿主机系统之
间可以通过进程 ID 来相互访问和操作。
pid: "host"
ports
暴露端口信息。
221
YAML 模板文件
使用宿主：容器 （HOST:CONTAINER） 格式，或者仅仅指定容器的端口（宿主将
会随机选择端口）都可以。
ports:
- "3000"
- "8000:8000"
- "49100:22"
- "127.0.0.1:8001:8001"
注意：当使用 HOST:CONTAINER 格式来映射端口时，如果你使用的容器端口小于
60 并且没放到引号里，可能会得到错误结果，因为 YAML 会自动解析 xx:yy
这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来
的字符串格式。
security_opt
指定容器模板标签（label）机制的默认属性（用户、角色、类型、级别等）。
例如配置标签的用户名和角色名。
security_opt:
- label:user:USER
- label:role:ROLE
ulimits
指定容器的 ulimits 限制值。
例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随
时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。
ulimits:
nproc: 65535
nofile:
soft: 20000
hard: 40000
222
YAML 模板文件
volumes
数据卷所挂载路径设置。可以设置宿主机路径 （ HOST:CONTAINER ） 或加上访问
模式 （ HOST:CONTAINER:ro ）。
该指令中路径支持相对路径。例如
volumes:
- /var/lib/mysql
- cache/:/tmp/cache
- ~/configs:/etc/configs/:ro
volumes_driver
较新版本的 Docker 支持数据卷的插件驱动。
用户可以先使用第三方驱动创建一个数据卷，然后使用名称来访问它。
此时，可以通过 volumes_driver 来指定驱动。
volume_driver: mydriver
volumes_from
从另一个服务或容器挂载它的数据卷。
volumes_from:
- service_name
- container_name
其它指令
此外，还有包括 cpu_shares, cpuset, domainname, entrypoint, hostname,
ipc, mac_address, mem_limit, memswap_limit, privileged, read_only,
restart, stdin_open, tty, user, working_dir 等指令，基本跟 docker-run
中对应参数的功能一致。
223
YAML 模板文件
例如，指定使用 cpu 核 0 和 核 1，只用 50% 的 CPU 资源：
cpu_shares: 73
cpuset: 0,1
指定服务容器启动后执行的命令。
entrypoint: /code/entrypoint.sh
指定容器中运行应用的用户名。
user: nginx
指定容器中工作目录。
working_dir: /code
指定容器中搜索域名、主机名、mac 地址等。
domainname: your_website.com
hostname: test
mac_address: 08-00-27-00-0C-0A
指定容器中
ipc: host
指定容器中内存和内存交换区限制都为 1G。
mem_limit: 1g
memswap_limit: 1g
允许容器中运行一些特权命令。
224
YAML 模板文件
privileged: true
指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在
生产环境中推荐配置为 always 或者 unless-stopped 。
restart: always
以只读模式挂载容器的 root 文件系统，意味着不能对容器内容进行修改。
read_only: true
打开标准输入，可以接受外部输入。
stdin_open: true
模拟一个假的远程控制台。
tty: true
读取环境变量
从 1.5.0 版本开始，Compose 模板文件支持动态读取主机的系统环境变量。
例如，下面的 Compose 文件将从运行它的环境中读取变量 ${MONGO_VERSION}
的值，并写入执行的指令中。
db:
image: "mongo:${MONGO_VERSION}"
如果执行 MONGO_VERSION=3.0 docker-compose up 则会启动一个
mongo:3.2 镜像的容器；如果执行 MONGO_VERSION=2.8 docker-compose up
则会启动一个 mongo:2.8 镜像的容器。
225
YAML 模板文件
226
实战 Django
使用 Django
我们现在将使用 Compose 配置并运行一个 Django/PostgreSQL 应用。在此之前，
先确保 Compose 已经 安装。
在一切工作开始前，需要先设置好三个必要的文件。
第一步，因为应用将要运行在一个满足所有环境依赖的 Docker 容器里面，那么我
们可以通过编辑 Dockerfile 文件来指定 Docker 容器要安装内容。内容如下：
FROM python:2.7
ENV PYTHONUNBUFFERED 1
RUN mkdir /code
WORKDIR /code
ADD requirements.txt /code/
RUN pip install -r requirements.txt
ADD . /code/
以上内容指定应用将使用安装了 Python 以及必要依赖包的镜像。更多关于如何编
写 Dockerfile 文件的信息可以查看 镜像创建 和 Dockerfile 使用。
第二步，在 requirements.txt 文件里面写明需要安装的具体依赖包名 。
Django
psycopg2
就是这么简单。
第三步， docker-compose.yml 文件将把所有的东西关联起来。它描述了应用的
构成（一个 web 服务和一个数据库）、使用的 Docker 镜像、镜像之间的连接、挂
载到容器的卷，以及服务开放的端口。
227
实战 Django
db:
image: postgres
web:
build: .
command: python manage.py runserver 0.0.0.0:8000
volumes:
- .:/code
ports:
- "8000:8000"
links:
- db
查看 docker-compose.yml 章节 了解更多详细的工作机制。
现在我们就可以使用 docker-compose run 命令启动一个 Django 应用了。
$ docker-compose run web django-admin.py startproject docker-com
poseexample .
Compose 会先使用 Dockerfile 为 web 服务创建一个镜像，接着使用这个镜像
在容器里运行 django-admin.py startproject docker-composeexample . 指
令。
这将在当前目录生成一个 Django 应用。
$ ls
Dockerfile docker-compose.yml docker-composeexamp
le manage.py requirements.txt
首先，我们要为应用设置好数据库的连接信息。用以下内容替换 docker-
composeexample/settings.py 文件中 DATABASES = ... 定义的节点内容。
228
实战 Django
DATABASES = {
'default': {
'ENGINE': 'django.db.backends.postgresql_psycopg2',
'NAME': 'postgres',
'USER': 'postgres',
'HOST': 'db',
'PORT': 5432,
}
}
这些信息是在 postgres Docker 镜像固定设置好的。
然后，运行 docker-compose up ：
Recreating myapp_db_1...
Recreating myapp_web_1...
Attaching to myapp_db_1, myapp_web_1
myapp_db_1 |
myapp_db_1 | PostgreSQL stand-alone backend 9.1.11
myapp_db_1 | 2014-01-27 12:17:03 UTC LOG: database system is re
ady to accept connections
myapp_db_1 | 2014-01-27 12:17:03 UTC LOG: autovacuum launcher s
tarted
myapp_web_1 | Validating models...
myapp_web_1 |
myapp_web_1 | 0 errors found
myapp_web_1 | January 27, 2014 - 12:12:40
myapp_web_1 | Django version 1.6.1, using settings 'docker-compo
seexample.settings'
myapp_web_1 | Starting development server at http://0.0.0.0:8000
/
myapp_web_1 | Quit the server with CONTROL-C.
这个 web 应用已经开始在你的 docker 守护进程里监听着 5000 端口了（如果你有
使用 boot2docker ，执行 boot2docker ip ，就会看到它的地址）。
你还可以在 Docker 上运行其它的管理命令，例如对于同步数据库结构这种事，在
运行完 docker-compose up 后，在另外一个终端运行以下命令即可：
229
实战 Django
$ docker-compose run web python manage.py syncdb
230
实战 Rails
使用 Rail
我们现在将使用 Compose 配置并运行一个 Rails/PostgreSQL 应用。在开始之前，
先确保 Compose 已经 安装。
在一切工作开始前，需要先设置好三个必要的文件。
首先，因为应用将要运行在一个满足所有环境依赖的 Docker 容器里面，那么我们
可以通过编辑 Dockerfile 文件来指定 Docker 容器要安装内容。内容如下：
FROM ruby
RUN apt-get update -qq && apt-get install -y build-essential lib
pq-dev
RUN mkdir /myapp
WORKDIR /myapp
ADD Gemfile /myapp/Gemfile
RUN bundle install
ADD . /myapp
以上内容指定应用将使用安装了 Ruby、Bundler 以及其依赖件的镜像。更多关于如
何编写 Dockerfile 文件的信息可以查看 镜像创建 和 Dockerfile 使用。 下一步，我
们需要一个引导加载 Rails 的文件 Gemfile 。 等一会儿它还会被 rails new
命令覆盖重写。
source 'https://rubygems.org'
gem 'rails', '4.0.2'
最后， docker-compose.yml 文件才是最神奇的地方。 docker-compose.yml
文件将把所有的东西关联起来。它描述了应用的构成（一个 web 服务和一个数据
库）、每个镜像的来源（数据库运行在使用预定义的 PostgreSQL 镜像，web 应用
侧将从本地目录创建）、镜像之间的连接，以及服务开放的端口。
231
实战 Rails
db:
image: postgres
ports:
- "5432"
web:
build: .
command: bundle exec rackup -p 3000
volumes:
- .:/myapp
ports:
- "3000:3000"
links:
- db
所有文件就绪后，我们就可以通过使用 docker-compose run 命令生成应用的骨
架了。
$ docker-compose run web rails new . --force --database=postgres
ql --skip-bundle
Compose 会先使用 Dockerfile 为 web 服务创建一个镜像，接着使用这个镜像
在容器里运行 rails new 和它之后的命令。一旦这个命令运行完后，应该就可
以看一个崭新的应用已经生成了。
$ ls
Dockerfile app docker-compose.yml tmp
Gemfile bin lib vendor
Gemfile.lock condocker-compose log
README.rdoc condocker-compose.ru public
Rakefile db test
在新的 Gemfile 文件去掉加载 therubyracer 的行的注释，这样我们便可以使
用 Javascript 运行环境：
gem 'therubyracer', platforms: :ruby
232
实战 Rails
现在我们已经有一个新的 Gemfile 文件，需要再重新创建镜像。（这个会步骤会
改变 Dockerfile 文件本身，仅仅需要重建一次）。
$ docker-compose build
应用现在就可以启动了，但配置还未完成。Rails 默认读取的数据库目标是
localhost ，我们需要手动指定容器的 db 。同样的，还需要把用户名修改成
和 postgres 镜像预定的一致。 打开最新生成的 database.yml 文件。用以下内
容替换：
development: &default
adapter: postgresql
encoding: unicode
database: postgres
pool: 5
username: postgres
password:
host: db
test:
<<: *default
database: myapp_test
现在就可以启动应用了。
$ docker-compose up