[TOC]
## 简介
  * PHP文件上传实现规范为[RFC1867](https://www.ietf.org/rfc/rfc1867.txt)
  * 实验环境为 PHP 7.3.4 + nginx 1.20.1，关于上传部分的相关源码在[github](https://github.com/php/php-src/blob/PHP-7.3.4/main/rfc1867.c)，PHP解析`multipart/form-data` http请求体的入口[函数](https://github.com/php/php-src/blob/master/main/rfc1867.c#L672)在`SAPI_POST_HANDLER_FUNC`
  * PHP源码调试环境[参考](https://blog.csdn.net/qq_16885135/article/details/119811883)
  * PHP示例代码
  * 文件解析的简要流程如下
## TRICKS
### 前向截断
  * `\`和`/`会对文件名进行前向截断，类似`info.txt/info.php`的文件名经php处理后会变成`info.php`
  * 调用栈如下
  * 其中有一段[注释](https://github.com/php/php-src/blob/PHP-7.3.4/main/rfc1867.c#L1149)如下，其本意是为了解决IE上传文件时传递全路径名的问题
    /* The \ check should technically be needed for win32 systems only where
         * it is a valid path separator. However, IE in all it's wisdom always sends
         * the full path of the file on the user's filesystem, which means that unless
         * the user does basename() they get a bogus file name. Until IE's user base drops
         * to nill or problem is fixed this code must remain enabled for all systems. */
  * 关键函数在[php_ap_basename](https://github.com/php/php-src/blob/PHP-7.3.4/main/rfc1867.c#L568),该函数会寻找`\`和`/`字符最后出现的位置，并从该位置截断字符串，从而造成了前向的截断
    static char *php_ap_basename(const zend_encoding *encoding, char *path)
    {
        char *s = strrchr(path, '\\');
        char *s2 = strrchr(path, '/');
        if (s && s2) {
            if (s > s2) {
                ++s;
            } else {
                s = ++s2;
            }
            return s;
        } else if (s) {
            return ++s;
        } else if (s2) {
            return ++s2;
        }
        return path;
    }
### 后向截断
  * `00`会对文件名进行后向截断，类似`info.php(00)xxx`的文件名经php处理过后会变成`info.php`
  * 在解析`header`的[时候](https://github.com/php/php-src/blob/master/main/rfc1867.c#L253)，仅对内存进行了copy，内存视图如下
  * [后续](https://github.com/php/php-src/blob/master/main/rfc1867.c#L541)解析`filename`时候使用`strlen`获取`filename`长度，`strlen`原型如下，在遇到`\0`,即内存中的`00`时，认为字符串结束了，也就造成了截断
    头文件：#include 
    strlen()函数用来计算字符串的长度，其原型为：
        unsigned int strlen (char *s);
    【参数说明】s为指定的字符串。
    strlen()用来计算指定的字符串s 的长度，不包括结束字符"\0"。
  * 同样的，`00`可以对`$_POST` **变量名** 也可以进行截断，对`$GET`，`$_COOKIE`等变量名添加`00`会导致`400`错误
    * 示例代码
        input_encoding, &cd, ';')))
        {
            //...
            // 按照 = 进行解析
            if (strchr(pair, '=')) {
             // ...   
            }
            // ...
        }
        // ...
    }
### 双写`filename`
  * php解析`Content-Disposition`时，按照从前到后的顺序，如果后面有相同的变量名，则会进行值的覆盖，[关键代码](https://github.com/php/php-src/blob/PHP-7.3.4/main/rfc1867.c#L813)
### 失败的上传 - 1
  * `filename`首字符为`00`时，上传会失败。如下所示，在`filename`首字符前插入`00`，导致上传失败
  * [关键代码](https://github.com/php/php-src/blob/PHP-7.3.4/main/rfc1867.c#L1000)
    if (filename[0] == '\0') {
    #if DEBUG_FILE_UPLOAD
                    sapi_module.sapi_error(E_NOTICE, "No file uploaded");
    #endif
                    cancel_upload = UPLOAD_ERROR_D;
                }
### 失败的上传 - 2
  * 当`name`首字符为`]`时，也会导致上传失败,如下所示
  * [关键代码](https://github.com/php/php-src/blob/PHP-7.3.4/main/rfc1867.c#L954)，当`*tmp == ']'`时，`skip_upload = 1`，导致了后续处理时，忽略了上传的文件
    while (*tmp) {
        if (*tmp == '[') {
            c++;
        } else if (*tmp == ']') {
            c--;
            if (tmp[1] && tmp[1] != '[') {
                skip_upload = 1;
                break;
            }
        }
        if (c 
  * 
  * 
  * 
  * 