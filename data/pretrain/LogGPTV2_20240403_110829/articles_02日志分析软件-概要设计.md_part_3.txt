\"properties\" : {
\"name\" : {\"type\":\"string\", \"index\":\"not_analyzed\",
\"store\":\"yes\"},
\# 所对应的token，根据name生成
\"token\" : {\"type\":\"string\", \"index\":\"not_analyzed\",
\"store\":\"yes\"},
\# 创建时间
\"create_time\" : {\"type\":\"long\", \"index\":\"no\",
\"store\":\"yes\"},
\#
过期时间，账号有效期需要限定，可以进行修改（如用户由免费升级为付费用户）
\"expiry_date\" : {\"type\":\"long\", \"index\":\"no\",
\"store\":\"yes\"},
\# 每天的流量配额，以M为单位
\"flow_quota\" : {\"type\":\"long\", \"index\":\"no\",
\"store\":\"yes\"},
\# 当天已经消耗的流量，以byte为单位
\"used_flow_quota\" : {\"type\":\"long\", \"index\":\"no\",
\"store\":yes},
\# 记录重置used_flow_quota的时间戳
\"reset_used_flow_quota_timestamp\" : {\"type\":\"long\",
\"index\":\"no\", \"store\":yes}
\# 其它字段：比如付费计划等
}
}
}
}
  ------------------------------------------------------------ ------------------------------------------------------------------------------------- --------------------------------------------------------------------------
  创建domain（只有系统内部可以使用，需要指定一个特殊的token)   act=create_domain&domain=xx&token=xx&name=xx&passwd=xx&email=xx&phone=xx&company=xx   成功返回{\"result\":\"true\", \"token\":\"xxx\"}\
                                                                                                                                                     失败返回{\"result\":\"false\",\
                                                                                                                                                     \"error\":\"xxx\"}
  检查domain name是否已经存在                                  act=check_domain_existed&token=xx&domain=xx                                           存在返回{\"result\":\"true\"}\
                                                                                                                                                     不存在返回{\"result\":\"false\"}
  更新domain(                                                  act=update_domain&token=xx&key=value                                                  成功返回{\"result\":\"true\"}\
                                                                                                                                                     失败返回{\"result\":\"false\",\
                                                                                                                                                     \"error\":\"xxx\"}
  获取domain                                                   act=get_domain&token=xx                                                               成功返回domain信息\
                                                                                                                                                     {\"result\": true,\
                                                                                                                                                     \"domain\": {\
                                                                                                                                                     \"name\":,//String\
                                                                                                                                                     \"create_time\"://秒的unix时间戳\
                                                                                                                                                     \"limit_quota\"://单位byte的每天限额\
                                                                                                                                                     \"max_upload_file_size\"://单位byte最大单个上传文件大小\
                                                                                                                                                     \"used_quota\"://单位byte已用的每天流量\
                                                                                                                                                     \"token\":\[\]//Array\[String\]所有token\
                                                                                                                                                     }}\
                                                                                                                                                     失败返回{\"result\":\"false\",\
                                                                                                                                                     \"error\":\"xxx\"}
  重新设置token                                                act=reset_token&token=xx                                                              成功返回{\"result\":\"true\", \"token\":\"xxx\"}\
                                                                                                                                                     失败返回{\"result\":\"false\",\
                                                                                                                                                     \"error\":\"xxx\"}
  获取token列表(该接口只有本系统之间可以调用，用户不能使用）   act=get_token_list&token=system                                                       获取所有的token列表\
                                                                                                                                                     {\"result\":true,\"tokens\":{\"e4a18194e0b944fb93e05df98156ccce\":true}}
  获取所有domain列表                                           act=get_all_domains &\                                                                {\"result\":true,\"domains\":\[{\"name\":\"alltest\",
                                                               token=system                                                                          \"token\":\[\"e4a18194e0b944fb93e05df98156ccce\"\]}}
  增量更新used_flow_quota                                      act=increase_used_flow_quota&token=xx&quota=xx                                        成功返回{\"result\":true}\
                                                                                                                                                     失败返回{\"result\":false,\"error\":\"xx\"}
  获取上传日志量统计（30天之内的）                             act=get_upload_bytes_stat &\                                                          成功返回\
                                                               token=xx                                                                              {\"result\":true, \"stats\":\[v1,v2\...v30\]}\
                                                                                                                                                     失败返回{\"result\":false,\"error\":\"xx\"}
  获取日志量统计\                                              act=get_domain_stats &\                                                               成功返回\
  （根据logtype,hostname,appname,tag进行分类）                 token=system                                                                          {\"result\":true, \"stats\":{\"hostname_stats\":\[\], xxx}}\
                                                                                                                                                     失败返回{\"result\":false,\"error\":\"xx\"}
  创建功能权限配置                                             act=create_func_auth&token=xx&parser_conf=0\|1&upload_file_size_limit=                成功返回：\
                                                                                                                                                     {\"result\":true}\
                                                                                                                                                     失败返回：\
                                                                                                                                                     {\"result\":false}
  更新功能权限配置                                             act=update_func_auth&token=xx&parser_conf=0\|1&upload_file_size_limit                 成功返回：\
                                                                                                                                                     {\"result\":true}\
                                                                                                                                                     失败返回：\
                                                                                                                                                     {\"result\":false}
  获取功能权限配置                                             act=get_func_auth&token=xx                                                            成功返回：\
                                                                                                                                                     {\
                                                                                                                                                     \"result\": true,\
                                                                                                                                                     \"results\": {\
                                                                                                                                                     ***\"parser_conf\": true,***\
                                                                                                                                                     \"upload_file_size_limit\": -1\
                                                                                                                                                     }\
                                                                                                                                                     }
  ------------------------------------------------------------ ------------------------------------------------------------------------------------- --------------------------------------------------------------------------
###### 8.1.3LogType模板管理 {#logtype模板管理 .list-paragraph}
每条日志都需要一个特定的模板来解析它，本系统提供若干内置模板（比如标准nginx/apache/log4j等），如果内置模板不能准确解析，也支持用户自定义模板。
每个模板都配置了若干解析规则（比如Grok Parser，KV
Parser等，具体配置参考tim的LogParser文档），每个解析规则都是可配置的。自定义模板可以继承自某个内置模板，然后提供自定义的某个解析规则（比如只修改Grok
Parser），其它解析规则都继承内置模板，有点类似OOP中的override method。
内置模板表保存在ES的system索引中，type名为log_types，scheme
mapping如下描述：
{
\"mapping\" : {
\"log_types\" : {
\"properties\" : {
\"name\" : {\"type\":\"string\", \"store\":\"yes\",
\"index\":\"not_analyzed\"},
\# pattern字段包含所有的解析规则，以json格式描述
\"pattern\" : {\"type\":\"string\", \"store\":\"yes\", \"index\":\"no\"}
}
}
}
}
  -------------------------- ------------------------------------- ---------------------------------
  创建模板（采用POST接口）   act=create_logtype&token=xx&name=xx   成功返回{\"result\":\"true\"}\
                             -d \$pattern                          失败返回{\"result\":\"false\",\
                                                                   \"error\":\"xxx\"}
  更新模板（采用POST接口）   act=update_logtype&token=xx&name=xx   成功返回{\"result\":\"true\"}\
                             -d \$pattern                          失败返回{\"result\":\"false\",\
                                                                   \"error\":\"xxx\"}
  删除模板                   act=delete_logtype&token=xx&name=xx   成功返回{\"result\":\"true\"}\
                                                                   失败返回{\"result\":\"false\",\
                                                                   \"error\":\"xxx\"} 
  获取模板列表               act=get_config&token=xx&name=xx       成功返回模板列表｛\
                                                                   \"result\":\"true\",\
                                                                   \"config\" : {\
                                                                      logParserConfig\
                                                                   }\
                                                                   ｝\
                                                                   失败返回{\"result\":\"false\",\
                                                                   \"error\":\"xxx\"} 
  获取某一个模板             act=get_logtype&token=xx&name=xx      成功返回模板列表｛\
                                                                   \"result\":\"true\",\
                                                                   \"logtypes\" : {\
                                                                   \"name\" : \"pattern\",\
                                                                   }\
                                                                   ｝\
                                                                   失败返回{\"result\":\"false\",\
                                                                   \"error\":\"xxx\"} 
  -------------------------- ------------------------------------- ---------------------------------
###### 8.1.4SourceGroup管理 {#sourcegroup管理 .list-paragraph}
表示一个Token下的逻辑分组，用来限定可以访问到的日志源。一个SourceGroup可以是hostname/appname/tag三个字段任意and组合。每个字段可以设定为多个值，用英文逗号\',\'分隔，同一个段内的多个值表示或关系。
以下例子说明如何设置SourceGroup
hostname=192.168.1.10，表示只能访问hostname为192.168.1.10的日志
hostname=192.168.1.10 &
appname=nginx_access，表示只能访问hostname为192.168.1.10并且appname为nginx_access的日志
appname=nginx_access &
tag=clicklog,ad-search，表示只能访问appname为nginx_access，tag为clicklog或者ad-search的日志
> Admin用户可以为其它用户（除了owner）指定SourceGroup。一个用户可以拥有多个SourceGroup，一个SourceGroup也可以被指派给多个用户。一个用户只能访问指定给他的SourceGroup。
本系统存储所有设定的SourceGroup，可以根据token或者username快速定位SourceGroup列表。
{
\"mappings\" : {
\"source_groups\" : {
\"properties\" : {
\"id\" : {\"type\":\"string\", \"index\":\"not_analyzed\",
\"store\":\"yes\"},
\"name\" : {\"type\":\"string\", \"index\":\"not_analyzed\",
\"store\":\"yes\"},
\"description\" : {\"type\":\"string\", \"index\":\"not_analyzed\",
\"store\":\"yes\"},
\# 创建者ID
\"owner_id\" : {\"type\":\"string\", \"index\":\"not_analyzed\",
\"store\":\"yes\"},
\# source_group所属域名
\"domain\" : {\"type\":\"string\", \"index\":\"not_analyzed\",
\"store\":\"yes\"},
\"accounts\" : {\"type\":\"string\", \"index\":\"not_analyzed\",
\"store\":\"yes\"},
\"hostname\" : {\"type\":\"string\", \"index\":\"no\",
\"store\":\"yes\"},
\"appname\" : {\"type\":\"string\", \"index\":\"no\",
\"store\":\"yes\"},
\"tag\" : {\"type\":\"string\", \"index\":\"no\", \"store\":\"yes\"}
}
}
}
}
  ---------------------------------------------------------------------------------------------------- -------------------------------- ---------------------------------
  创建source_group                                                                                     act=create_source_group &\       成功返回{\"result\": true}\
                                                                                                       token=xx &\                      失败返回{\"result\":false,\
                                                                                                       name=xx &\                       \"error\":\"xxx\"}
                                                                                                       hostname=xx &\                   
                                                                                                       appname=xx &\                    
                                                                                                       tag=xx &\                        
                                                                                                       description=xx &\                
                                                                                                       owner_id=xx                      
  更新source_group                                                                                     act=update_source_group &\       成功返回{\"result\":true}\
                                                                                                       token=xx &\                      失败返回{\"result\":false,\
                                                                                                       id=xx &\                         \"error\":\"xxx\"}
                                                                                                       hostname=xx &\                   
                                                                                                       appname=xx &\                    
                                                                                                       tag=xx &\                        
                                                                                                       description=xx                   
  删除source_group                                                                                     act=delete_source_group &\       同上
                                                                                                       token=xx & \                     
                                                                                                       id=xx                            
  判断source_group名是否已经存在                                                                       act=check_source_group_existed   成功返回{\"result\":\"true\"}\
                                                                                                       &\                               失败返回{\"result\":\"false\"}
                                                                                                       name=xx                          
  获取source_group(\                                                                                   act=get_source_group&\           成功返回列表\
  可以根据name\|domain\|account)\                                                                      token=xx&\                       失败返回{\"result\":\"false\",\
  （name:                                                                                              name=xx&\                        \"error\":\"xxx\"}
  SourceGroup的名称；domain参数不用填，token就表示了domain；account是指account_id，不是account_name\   account=xx                       
  ）                                                                                                                                    
  为某个用户指定source_group\                                                                          act=assign_source_group&\        成功返回{\"result\":\"true\"}\
  （id可以是List）                                                                                     token=xx&\                       失败返回{\"result\":\"false\",\
                                                                                                       id=xx&\                          \"error\":\"xxx\"}
                                                                                                       owner_id=xx                      
  为某个用户取消\                                                                                      act=cancel_source_group&\        成功返回{\"result\":\"true\"}\
  source_group\                                                                                        token=xx&\                       失败返回{\"result\":\"false\",\
  （id可以是List）                                                                                     id=xx&\                          \"error\":\"xxx\"}
                                                                                                       owner_id=xx                      
  ---------------------------------------------------------------------------------------------------- -------------------------------- ---------------------------------
###### 8.1.5SavedSearch {#savedsearch .list-paragraph}
用来保存某个用户已经设定的检索请求，需要指定检索串、sourcegroup、time_range（时间区间）。saved_search有两种创建方式，一种是用户主动创建，另一种是用户创建Alert时生成的，后者称为匿名saved_search。每个saved_search都拥有一个名字，在Token下是唯一的。
每个saved_search的检索相关的字段都可以更新，其名字可以覆盖。
Saved
Search信息保存在ES的system索引中，type名为saved_searches，其对应的scheme_mapping如下描述：
{
\"mappings\" : {
\"saved_searches\" : {
\"properties\" : {
\"id\" : {\"type\":\"string\", \"index\":\"not_analyzed\",
\"store\":\"yes\"},
\"name\" : {\"type\":\"string\", \"index\":\"not_analyzed\",
\"store\":\"yes\"},
\"domain\" : {\"type\":\"string\", \"index\":\"not_analyzed\",
\"store\":\"yes\"},
\"anonymous\" : {\"type\":\"boolean\", \"index\":\"yes\",
\"store\":\"yes\"},
\# 标记加星
\"like\" : {\"type\":\"boolean\", \"index\":\"yes\", \"store\":\"yes\"},
\# 记录由哪个用户创建，使用account_id
\"owner_id\" : {\"type\":\"string\", \"index\":\"no\",
\"store\":\"yes\"},
\"query\" : {\"type\":\"string\", \"index\":\"no\", \"store\":\"yes\"},
\# time_range包括起始时间，用英文\",\"分割
\"time_range\" : {\"type\":\"string\", \"index\":\"no\",
\"store\":\"yes\"},
\# 指定了限定的source_group，可以有多个，用英文逗号\",\"分割
\"source_groups\" : {\"type\":\"string\", \"index\":\"no\",
\"store\":\"yes\"},
\# 指定了过滤字段，可以有多个，用英文逗号\",\"分割
\"filters\" : {\"type\":\"string\", \"index\":\"no\", \"store\":\"yes\"}
}
}
}
}
在创建saved
search时，需要给这个saved_search生成一个id，id的格式为：timestamp\_\$domain\_\$name
本系统需要提供以下HTTP接口来操作saved_search：
  -------------------------------------------------- -------------------------------- ----------------------------------
  创建saved_search                                   act=create_saved_search &\       成功返回{\"result\":\"true\"}\
                                                     token=xx &\                      失败返回{\"result\":\"false\",
                                                     owner_name=xx &\                 \"error\":\"xx\"}
                                                     name=xx &\                       
                                                     query=xx &\                      
                                                     time_range=xx &\                 
                                                     source_groups=xx &\              
                                                     filters=xx                       
  检查saved_search名称是否已经存在                   act=check_existed_saved_search   唯一返回{\"result\":\"true\"}，\
                                                     &\                               否则返回{\"result\":\"false\",
                                                     token=xx &\                      \"error\":xx}
                                                     name=xx                          
  根据id获取saved_search                             act=get_saved_search &\          返回saved_search信息
                                                     token=xx &\                      
                                                     id=xx                            
  更新saved_search                                   act=update_saved_search &\       成功返回{\"result\":\"true\"}\
                                                     token=xx &\                      失败返回{\"result\":\"false\",
                                                     id=xx &\                         \"error\":\"xx\"}
                                                     query=xx &\                      
                                                     time_range=xx &\                 
                                                     source_groups=xx &\              
                                                     filters=xx &\                    
                                                     like=xx                          
  删除saved_search                                   act=delete_saved_search &\       成功返回{\"result\":\"true\"}\
                                                     token=xx &\                      失败返回{\"result\":\"false\",
                                                     id=xx                            \"error\":\"xx\"}
  获取saved_search列表（匿名saved_search不会返回）   act=get_all_saved_search &\      返回列表信息
                                                     token=xx                         
  -------------------------------------------------- -------------------------------- ----------------------------------
###### 8.1.6Alert {#alert .list-paragraph}
用来保存用户设定的alert列表，每个alert都必须同一个saved_search关联
{
\"mappings\" : {
\"properties\" : {
\"alerts\" : {
\"id\" : {\"type\":\"string\", \"index\":\"not_analyzed\",
\"store\":\"yes\"},