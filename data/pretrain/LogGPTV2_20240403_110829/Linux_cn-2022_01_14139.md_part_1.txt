---
author: Mike Calizo
category: 容器与云
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 4299
date: '2022-01-02 10:58:21'
editorchoice: false
excerpt: 探索 Kubernetes 中不同容器日志记录模式的工作原理。
fromurl: https://opensource.com/article/21/11/cluster-logging-kubernetes
id: 14139
islctt: true
largepic: /data/attachment/album/202201/02/105801igujabattghwzkjw.jpg
permalink: /article-14139-1.html
pic: /data/attachment/album/202201/02/105801igujabattghwzkjw.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 探索 Kubernetes 中不同容器日志记录模式的工作原理。
tags:
- Kubernetes
- 日志
thumb: false
title: Kubernetes 集群日志基础
titlepic: true
translator: perfiffer
updated: '2022-01-02 10:58:21'
---
> 
> 探索 Kubernetes 中不同容器日志记录模式的工作原理。
> 
> 
> 
![](/data/attachment/album/202201/02/105801igujabattghwzkjw.jpg "Wheel of a ship")
服务器和应用程序日志记录是开发人员、运维人员和安全团队了解应用程序在其生产环境中运行状态的重要工具。
日志记录使运维人员能够确定应用程序和所需组件是否运行平稳，并检测是否发生了异常情况，以便他们能够对这种情况做出反应。
对于开发人员，日志记录提供了在开发期间和之后对代码进行故障排除的可见性。在生产环境中，开发人员通常依赖于没有调试工具的日志记录工具。在加上系统的日志记录，开发人员可以与运维人员携手合作，有效地解决问题。
日志记录工具最重要的受益者是安全团队，尤其是在云原生的环境中。能够从应用程序和系统日志中收集信息使得安全团队能够分析来自身份验证、应用程序访问恶意软件活动的数据，并在需要时进行响应。
Kubernetes 是领先的容器平台，越来越多的应用程序通过 Kubernetes 部署到生产环境。我相信了解 Kubernetes 的日志架构是一项非常重要的工作，每个开发、运维和安全团队都需要认真对待。
在本文中，我将讨论 Kubernetes 中不同容器日志记录模式的工作原理。
### 系统日志记录和应用日志记录
在深入研究 Kubernetes 日志记录架构之前，我想探索不同的日志记录方法以及这两种功能如何成为 Kubernetes 日志记录的关键特性。
有两种类型的系统组件：在容器中运行的组件和不在容器中运行的组件。例如：
* Kubernetes 调度者和 `kube-proxy` 运行在容器中。
* `kubelet` 和容器运行时不在容器中运行。
与容器日志类似，系统容器日志存储在 `/var/log` 目录中，你应该定期轮换它们。
在这里，我研究的是容器日志记录。首先，我看一下集群级别的日志记录以及为什么它对集群运维人员很重要。集群日志提供有关集群如何执行的信息。诸如为什么  吊舱   Pod  被下线或节点死亡之类的信息。集群日志记录还可以捕获诸如集群和应用程序访问以及应用程序如何利用计算资源等信息。总体而言，集群日志记录工具为集群运维人员提供操作集群和安全有用的信息。
捕获容器日志的另一种方法是通过应用程序的本机日志记录工具。现代应用程序设计很可能具有日志记录机制，可帮助开发人员通过标准输出 （`stdout`） 和错误流 （`stderr`） 解决应用程序性能问题。
为了拥有有效的日志记录工具，Kubernetes 实现需要应用程序和系统日志记录组件。
### Kubernetes 容器日志的 3 种类型
如今，在大多数的 Kubernetes 实现中，你可以看到三种主要的集群级日志记录方法。
1. 节点级日志代理
2. 用于日志记录的 挎斗   Sidecar 容器应用程序
3. 将应用程序日志直接暴露给日志后端
#### 节点级日志代理
我想考虑节点级日志代理。你通常使用 DaemonSet 作为部署策略来实现这些，以便在所有 Kubernetes 节点中部署一个吊舱（充当日志代理）。然后，该日志代理被配置为从所有 Kubernetes 节点读取日志。你通常将代理配置为读取节点 `/var/logs` 目录捕获 `stdout`/`stderr` 流并将其发送到日志记录后端存储。
下图显示了在所有节点中作为代理运行的节点级日志记录。
![Node-level logging agent](/data/attachment/album/202201/02/105823jz5e65z3cb6e6iv0.png "Node-level logging agent")
以使用 `fluentd` 方法为例设置节点级日志记录，你需要执行以下操作：
1、首先，你需要创建一个名为 fluentdd 的服务账户。Fluentd 吊舱使用此服务账户来访问 Kubernetes API，你需要在日志命名空间中使用标签 `app: fluentd` 创建它们：
```
#fluentd-SA.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluentd
  namespace: logging
  labels:
    app: fluentd  
```
你可以在此 [仓库](https://github.com/mikecali/kubernetes-logging-example-article) 中查看完整示例。
2、接着，你需要创建一个名称为 `fluentd-configmap` 的 ConfigMap。这为 `fluentd daemonset` 提供了一个配置文件，其中包含所有必需的属性。
```
#fluentd-daemonset.yaml
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: fluentd
  namespace: logging
  labels:
    app: fluentd
    kubernetes.io/cluster-service: "true"
spec:
  selector:
    matchLabels:
      app: fluentd
      kubernetes.io/cluster-service: "true"
  template:
    metadata:
      labels:
        app: fluentd
        kubernetes.io/cluster-service: "true"
    spec:
      serviceAccount: fluentd
      containers:
      - name: fluentd
        image: fluent/fluentd-kubernetes-daemonset:v1.7.3-debian-elasticsearch7-1.0
        env:
          - name: FLUENT_ELASTICSEARCH_HOST
            value: "elasticsearch.logging.svc.cluster.local"
          - name: FLUENT_ELASTICSEARCH_PORT
            value: "9200"
          - name: FLUENT_ELASTICSEARCH_SCHEME
            value: "http"
          - name: FLUENT_ELASTICSEARCH_USER
            value: "elastic"
          - name: FLUENT_ELASTICSEARCH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: efk-pw-elastic
                key: password
          - name: FLUENT_ELASTICSEARCH_SED_DISABLE
            value: "true"
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: fluentconfig
          mountPath: /fluentd/etc/fluent.conf
          subPath: fluent.conf
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: fluentconfig
        configMap:
          name: fluentdconf
```
你可以在此 [仓库](https://github.com/mikecali/kubernetes-logging-example-article) 中查看完整示例。