Machine: Intel 80386
Version: 0x1
632
4.4 GCC 堆栈保护技术
Entry point address: 0x400
Start of program headers: 52 (bytes into file)
Start of section headers: 6132 (bytes into file)
Flags: 0x0
Size of this header: 52 (bytes)
Size of program headers: 32 (bytes)
Number of program headers: 9
Size of section headers: 40 (bytes)
Number of section headers: 30
Section header string table index: 29
$ gcc -m32 -no-pie random.c -o close-pie
$ readelf -h close-pie
ELF Header:
Magic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00
Class: ELF32
Data: 2's complement, little endi
an
Version: 1 (current)
OS/ABI: UNIX - System V
ABI Version: 0
Type: EXEC (Executable file)
Machine: Intel 80386
Version: 0x1
Entry point address: 0x8048310
Start of program headers: 52 (bytes into file)
Start of section headers: 5964 (bytes into file)
Flags: 0x0
Size of this header: 52 (bytes)
Size of program headers: 32 (bytes)
Number of program headers: 9
Size of section headers: 40 (bytes)
Number of section headers: 30
Section header string table index: 29
可以看到两者的不同在 Type 和 Entry point address 。
首先我们关闭 ASLR，使用 -pie 进行编译：
633
4.4 GCC 堆栈保护技术
# echo 0 > /proc/sys/kernel/randomize_va_space
# gcc -m32 -pie random.c -o a.out
# checksec --file a.out
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO No canary found NX enabled PIE enabled
No RPATH No RUNPATH No 0 2 a.out
# ./a.out
0x5655553d
# ./a.out
0x5655553d
我们虽然开启了 -pie ，但是 ASLR 被关闭，入口地址不变。
# ldd a.out
linux-gate.so.1 (0xf7fd7000)
libc.so.6 => /usr/lib32/libc.so.6 (0xf7dd9000)
/lib/ld-linux.so.2 (0xf7fd9000)
# ldd a.out
linux-gate.so.1 (0xf7fd7000)
libc.so.6 => /usr/lib32/libc.so.6 (0xf7dd9000)
/lib/ld-linux.so.2 (0xf7fd9000)
可以看出动态链接库地址也不变。然后我们开启 ASLR：
634
4.4 GCC 堆栈保护技术
# echo 2 > /proc/sys/kernel/randomize_va_space
# ./a.out
0x5665353d
# ./a.out
0x5659753d
# ldd a.out
linux-gate.so.1 (0xf7727000)
libc.so.6 => /usr/lib32/libc.so.6 (0xf7529000)
/lib/ld-linux.so.2 (0xf7729000)
# ldd a.out
linux-gate.so.1 (0xf77d6000)
libc.so.6 => /usr/lib32/libc.so.6 (0xf75d8000)
/lib/ld-linux.so.2 (0xf77d8000)
入口地址和动态链接库地址都变得随机。
接下来关闭 ASLR，并使用 -no-pie 进行编译：
# echo 0 > /proc/sys/kernel/randomize_va_space
# gcc -m32 -no-pie random.c -o b.out
# checksec --file b.out
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO No canary found NX enabled No PIE
No RPATH No RUNPATH No 0 2 b.out
# ./b.out
0x8048406
# ./b.out
0x8048406
# ldd b.out
linux-gate.so.1 (0xf7fd7000)
libc.so.6 => /usr/lib32/libc.so.6 (0xf7dd9000)
/lib/ld-linux.so.2 (0xf7fd9000)
# ldd b.out
linux-gate.so.1 (0xf7fd7000)
libc.so.6 => /usr/lib32/libc.so.6 (0xf7dd9000)
/lib/ld-linux.so.2 (0xf7fd9000)
635
4.4 GCC 堆栈保护技术
入口地址和动态库都是固定的。下面开启 ASLR：
# echo 2 > /proc/sys/kernel/randomize_va_space
# ./b.out
0x8048406
# ./b.out
0x8048406
# ldd b.out
linux-gate.so.1 (0xf7797000)
libc.so.6 => /usr/lib32/libc.so.6 (0xf7599000)
/lib/ld-linux.so.2 (0xf7799000)
# ldd b.out
linux-gate.so.1 (0xf770a000)
libc.so.6 => /usr/lib32/libc.so.6 (0xf750c000)
/lib/ld-linux.so.2 (0xf770c000)
入口地址依然固定，但是动态库变为随机。
所以在分析一个 PIE 开启的二进制文件时，只需要关闭 ASLR，即可使 PIE 和
ASLR 都失效。
ASLR（Address Space Layout Randomization）
关闭： # echo 0 > /proc/sys/kernel/randomize_va_space
部分开启（将 mmap 的基址，stack 和 vdso 页面随机化）： # echo 1 >
/proc/sys/kernel/randomize_va_space
完全开启（在部分开启的基础上增加 heap的随机化： # echo ２ >
/proc/sys/kernel/randomize_va_space
RELRO
RELRO（ReLocation Read-Only）设置符号重定向表为只读或在程序启动时就解
析并绑定所有动态符号，从而减少对 GOT（Global Offset Table）的攻击。
RELOR 有两种形式：
Partial RELRO：一些段（包括 .dynamic ）在初始化后将会被标记为只读。
Full RELRO：除了 Partial RELRO，延迟绑定将被禁止，所有的导入符号将在
636
4.4 GCC 堆栈保护技术
开始时被解析， .got.plt 段会被完全初始化为目标函数的最终地址，并被
标记为只读。另外 link_map 和 _dl_runtime_resolve 的地址也不会被
装入。
编译参数
各种安全技术的编译参数如下：
安全技术 完全开启 部分开启 关闭
Canary -fstack-protector-all -fstack-protector -fno-stack-protector
NX -z noexecstack -z execstack
PIE -pie -no-pie
RELRO -z now -z lazy -z norelro
关闭所有保护：
gcc hello.c -o hello -fno-stack-protector -z execstack -no-pie -
z norelro
开启所有保护：
gcc hello.c -o hello -fstack-protector-all -z noexecstack -pie -
z now
FORTIFY
-D_FORTIFY_SOURCE=1 ：仅在编译时检测溢出
-D_FORTIFY_SOURCE=2 ：在编译时和运行时检测溢出
保护机制检测
有许多工具可以检测二进制文件所使用的编译器安全技术。下面介绍常用的几种：
checksec
637
4.4 GCC 堆栈保护技术
$ checksec --file /bin/ls
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO Canary found NX enabled No PIE
No RPATH No RUNPATH Yes 5 15 /bin/ls
peda 自带的 checksec
$ gdb /bin/ls
gdb-peda$ checksec
CANARY : ENABLED
FORTIFY : ENABLED
NX : ENABLED
PIE : disabled
RELRO : Partial
地址空间布局随机化
最后再说一下地址空间布局随机化（ASLR），该技术虽然不是由 GCC 编译时提供
的，但对 PIE 还是有影响。该技术旨在将程序的内存布局随机化，使得攻击者不能
轻易地得到数据区的地址来构造 payload。由于程序的堆栈分配与共享库的装载都
是在运行时进行，系统在程序每次执行时，随机地分配程序堆栈的地址以及共享库
装载的地址。使得攻击者无法预测自己写入的数据区的虚拟地址。
针对该保护机制的攻击，往往是通过信息泄漏来实现。由于同一模块中的所有代码
和数据的相对偏移是固定的，攻击者只要泄漏出某个模块中的任一代码指针或数据
指针，即可通过计算得到此模块中任意代码或数据的地址。
638
4.5 ROP 防御技术
4.5 ROP 防御技术
早期的防御技术
没有 return 的 ROP
参考资料
早期的防御技术
前面我们已经学过各种 ROP 技术，但同时很多防御技术也被提出来，这一节我们
就来看一下这些技术。
我们知道正常程序的指令流执行和 ROP 的指令流执行有很大不同，至少有下面两
点：
ROP 执行流会包含了很多 return 指令，而且之间只间隔了几条其他指令
ROP 利用 return 指令来 unwind 堆栈，却没有对应的 call 指令
以上面两点差异作为基础，研究人员提出了很多 ROP 检测和防御技术：
针对第一点差异，可以检测程序执行中是否有频繁 return 的指令流，作为报警
的依据
针对第二点差异，可以通过 call 和 return 指令来查找正常程序中通常都存在的
后进先出栈里维护的不变量，判断其是否异常
还有更极端的，在编译器层面重写二进制文件，消除里面的 return 指令
所以其实这些早期的防御技术都默认了一个前提，即 ROP 中必定存在 return 指
令。
另外对于重写二进制文件消除 return 指令的技术，根据二进制偏移也可能会得到攻
击者需要的非预期指令，比如下面这段指令：
b8 13 00 00 00 mov $0x13, %eax
e9 c3 f8 ff ff jmp 3aae9
偏移两个十六进制得到下面这样：
639
4.5 ROP 防御技术
00 00 add %al, (%eax)
00 e9 add %ch, %cl
c3 ret
最终还是出现了 return 指令。
没有 return 的 ROP
后来又有人提出了不依赖于 return 指令的 ROP，使得早期的防御技术完全失效。
return 指令的作用主要有两个：第一通过间接跳转改变执行流，第二是更新寄存器
状态。在 x86 和 ARM 中都存在一些指令序列，也能够完成这些工作，它们首先更
新全局状态（如栈指针），然后根据更新后的状态加载下一条指令序列的地址，最
后跳转过去执行（把它叫做 update-load-branch 指令序列）。这样就避免的 return
指令的使用。
就像下面这样， x 代表任意的通用寄存器：
pop x
jmp *x
r6 通用寄存器里是更新后的状态：
adds r6, #4
ldr r5, [r6, #124]
blx r5
由于 update-load-branch 指令序列相比 return 指令更加稀少，所以需要把它作为
trampoline 重复利用。在构造 ROP 链时，选择以 trampoline 为目标的间接跳转指
令结束的指令序列。当一个 gadget 执行结束后，跳转到 trampoline，trampoline
更新程序全局状态，并将程序控制交给下一个 gadget，这样就形成了 ROP 链。
640
4.5 ROP 防御技术
参考资料
Return-Oriented Programming without Returns
Analysis of Defenses against Return Oriented Programming
641
4.6 one-gadget RCE
4.6 one-gadget RCE
one-gadget RCE 是在 libc 中存在的一些执行 execve('/bin/sh', NULL,
NULL) 的片段。当我们知道 libc 的版本，并且可以通过信息泄露得到 libc 的基
址，则可以通过控制 EIP 执行该 gadget 来获得 shell。这个方法的优点是不需要控
制调用函数的参数，在 64 位程序中，也就是 rdi、rsi、rdx 等寄存器的值。
可以使用工具 one_gadget 很方便地查找 one-gadget：
$ sudo gem install one_gadget
$ file /usr/lib/libc-2.26.so
/usr/lib/libc-2.26.so: ELF 64-bit LSB shared object, x86-64, ver
sion 1 (GNU/Linux), dynamically linked, interpreter /usr/lib/ld-
linux-x86-64.so.2, BuildID[sha1]=466056d0995495995ad1a1fe696c9dc
7fb3d421b, for GNU/Linux 3.2.0, not stripped
$ one_gadget -f /usr/lib/libc-2.26.so
0x41e92 execve("/bin/sh", rsp+0x30, environ)
constraints:
rax == NULL
0x41ee7 execve("/bin/sh", rsp+0x30, environ)
constraints:
[rsp+0x30] == NULL
0xe2c20 execve("/bin/sh", rsp+0x60, environ)
constraints:
[rsp+0x60] == NULL
经过验证，第一个似乎不可用，另外两个如下，通常，我们都使用 do_system
函数里的那个：
642
4.6 one-gadget RCE
[0x00021080]> pd 7 @ 0x41ee7
| 0x00041ee7 488b056aff36. mov rax, qword [0x003
b1e58] ; [0x3b1e58:8]=0
| 0x00041eee 488d3d409313. lea rdi, str._bin_sh
; 0x17b235 ; "/bin/sh"
| 0x00041ef5 c70521253700. mov dword [obj.lock_4
], 0 ; [0x3b4420:4]=0
| 0x00041eff c7051b253700. mov dword [obj.sa_ref
cntr], 0 ; [0x3b4424:4]=0
| 0x00041f09 488d742430 lea rsi, [local_30h]
; sym.lm_cache ; 0x30
| 0x00041f0e 488b10 mov rdx, qword [rax]
| 0x00041f11 67e8c9260800 call sym.execve
[0x00021080]> pd 5 @ 0xe2c20
| 0x000e2c20 488b0531f22c. mov rax, qword [0x003
b1e58] ; [0x3b1e58:8]=0
| 0x000e2c27 488d742460 lea rsi, [local_60h]
; sym.buffer_14 ; 0x60 ; "0\x02"
| 0x000e2c2c 488d3d028609. lea rdi, str._bin_sh
; 0x17b235 ; "/bin/sh"
| 0x000e2c33 488b10 mov rdx, qword [rax]
| 0x000e2c36 67e8a419feff call sym.execve
当然，你也可以通过 build ID 来查找对应 libc 里的 one-gadget。
$ one-gadget -b 466056d0995495995ad1a1fe696c9dc7fb3d421b
参考资料
Pwning (sometimes) with style
643
4.7 通用 gadget
通用 gadget