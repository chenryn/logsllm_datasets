(2) C: the Class name of the view (e.g., the class name of But-
ton android.widget.Buton).
(3) T : the T ext or image displayed on the view. Typically, the
text or image of a view should be diferent with other views
in the same activity.
(4) I: the ID of the view. Developers may assign each view
with an ID in the layout ile. However this value could be
NULL because this is not a mandatory rule for developers
and not every view has an ID.
(5) A: the class name of the Action binded to the view.
(6) H: the Hierarchy of the view in the layout ile. Typically,
each activity has its own layout ile, which contains the
type and location of each view. However, not every activity
has a layout ile, because Android allows developers to
hard-code the arrangement of the layout in the source
code.
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA804With , AuthScope can uniquely distinguish
each view from others. We have to note that we are not the irst
to encounter this view identiication problem. In fact, AppsPlay-
ground [34] has used  where L represents the location
of the view in an activity and T and H are the same as in Auth-
Scope. While  may be suicient in their application sce-
nario [34], we ind we do need more information in our use case.
For instance, we observe H can be missing because not all devel-
opers use layout iles for view arrangement. Meanwhile, L can
be changed in some views. For instance, when scrolling up and
down, the location of the view in an activity can be changed.
In
contrast, AuthScope has a much stricter policy in determining the
uniqueness of a view, and our N , C, A will never be missing and H
can be used to solve most of the scrolling problems.
View Exploration. When an activity is created, AuthScope will
automatically create the  vector for each view within
the activity. Having uniquely identiied each view, we then explore
the current activity using a prioritized DFS algorithm. Since we aim
to exercise the social login interface before authentication and any
explorable interface ater authentication (to get sample request and
response message pair), we classify all views in the same activity
into three categories and then prioritize the DFS traversal in the
following order:
- view contains social login (e.g., Facebook login).
- view has a binding action.
- view has no binding action.
To summarize, similar to AppsPlayground [34], when an activity
is created, AuthScope recognizes each unique UI element (i.e.,
view) of the activity, traverses each view using a prioritized DFS
algorithm. If the view has been visited before, we will not traverse
it again. We inish the exploration of the current activity, when we
traverse all of its views.
4.1.2 Automatic Social-based Service Login
Having the capability of exploring the app activities, next we need
to drive the app to execute social login interface. We use a similar
approach of how a real user recognizes whether a view contains
social login. In particular, take Facebook login as an example, real
users recognize there is a Facebook login by reading the text over
a Buton, such as “Sign in with Facebook” or “Facebook Login”.
By scanning the text of a view in the layout ile whether or not con-
taining Facebook sub-string, we prioritize the activity exploration
to such a view. If there is no such string, there must be a binding
action to invoke the Facebook login, and our DFS traversal will
also eventually invoke it. Normally, this login interface exists in
the irst few activities and it is very unlikely that there will be any
constraints involved to invoke the Facebook login.
Ater AuthScope successfully clicks the Facebook login buton,
the app will follow the execution logic in the library from the Face-
book, which is a very standard logic. We just pre-register two
accounts Alice and Bob with the Facebook service (the reason of
why we need two users is presented in §4.2), and then automati-
cally log in the corresponding servers using the Facebook account
when the login interface pops up. he app execution ater this
stage will trigger those post-authentication request and response
messages when performing our DFS traversal of the activities and
views. Our DFS traversal algorithm is deterministic. herefore, the
exercised request and response message sequences are consistent
among diferent users.
4.2 Message Field Recognition and Substitution
With the exercised request and response messages collected by
our man-in-the-middle proxy, next we need to infer the message
ields and substitute the ields of interest to see whether the server
has vulnerable authorization implementations. To perform this
automatically, we need to design a principled approach to (1) parse
the message ields (§4.2.1), (2) identify the ields of interest (§4.2.2),
and (3) substitute the ields that are enumerable (§4.2.3).
4.2.1 Parsing Message Fields
Since AuthScope focuses on HTTP/HTTPS protocol, we just need
to parse the post-authentication request and response messages for
this well-formed text protocol. According to the HTTP protocol
speciication [2], each request message consists of (1) a request line
(e.g., GET /index.html HTTP/1.1), (2) request-header ields (e.g.,
Host: www.sigsac.org), (3) an empty line, and (4) optional message
body. Similarly, each response message consists of (1) a status line
(e.g., HTTP/1.1 200 OK), (2) response-header ields (e.g., Accept-
Language: en), (3) an empty line, and (4) an optional message body.
Both Figure 2 and Figure 3 contains more concrete examples of
request and response messages.
Parsing Request Messages. Each request message needs to be
responded by a server API, and this API can be indexed by the
value of Host and the resources requested in the request line. To
parse each request line, we need to irst parse the path segment by
scan the reserved path symbol “/” and then retrieve each directory
name. If there is any URL encoding in the request line (as in our
running example), we also need to parse each request parameter
name (e.g., in_app_token) and its value. Note that in URL en-
coding, the parameter name and its value is connected by symbol
“=”, each pair is concatenated by “&”. It is quite straight forward
to index the parameter name and its value, and we store them in a
pair .
Regarding the message body, it can be just empty, data encoded
with URLs, JSON (e.g., as shown in our running example), XML,
html page, or just some text. We only parse URL, JSON or XML
encodings of the message body, and treat the rest just as text. To
parse URL encoding, we parse it in the same way as in request
line. For JSON and XML, they both have a hierarchy tree structure,
which means that each value can be tracked by the path from the
root of the tree. Also, note that if the value of a parameter is a
JSON array, we will not consider the order of the element in the
array. hat is the array [a,b] should be treated as the same array
as array [b,a] when we build the parameter and value pair (i.e.,
) when parsing the message ield.
Parsing Response Messages. he response message is sent by
the server ater it processes the request (essentially the return value
of the server API). We will associate the response messages with
the corresponding request messages. Similar to how we parse the
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA805request messages, we use the same way to parse the response mes-
sages and build  pairs if there is any. he response
message will be primarily used in §4.3.
Indexing the request and response messages. Ater parsing
each request and corresponding response message pair, we need
to index it such that we can easily locate it during our next stage
analysis (§4.2.2). Essentially, this can be considered as an instance
of a server API execution, and we have collected the server inter-
face (i.e., the URLs that include the Host address and data reference
path), the parameters, and return values. herefore, we index it
based on the URLs, the  pair we parsed from the
request message (which can be considered as parameters) and the
response message.
4.2.2 Identifying Fields of Interest
Clearly, not all ields are of our interest. For instance, in our run-
ning example shown in Figure 2(a), we are just interested in ield
with value 21690 and the in_app_token ield in Alice’s request
message. Since there are many non-related ields in a request mes-
sage, we must automatically select the ields of our interest. he
key solution here is to use message alignment and value diing, a
common approach used in protocol reverse engineering, such as
Protocol Informatics [13]. hat explains why AuthScope requires
at least two registered users (e.g., Alice and Bob) with the service,
and also one user needs to login and logout twice to exercise two
sets of the same request messages (e.g., Alice’s Request1 and Al-
ice’s Request2 as shown in Figure 4).
In general, a request
Message Alignment and Value Diing.
message could contain user-speciic ields (e.g,. in_app_token),
and non user-speciic ields (e.g., the request-header ields, and also
timestamp ield if there is any in the request message). By using
message alignment and value diing, we can quickly locate user-
speciic ields, and non user-speciic ields.
- Aligning and Diing Diferent Users’ Same Request.
By aligning and diing with the same request messages
(recall that we have indexed all of the request messages)
of two diferent users (e.g., Alice’s Request1 and Bob’s
request), we can quickly identify the user-speciic ields by
selecting the value dif-ed ields. For instance, by aligning
and diing the two diferent users request messages show-
ing in Figure 2, we can automatically locate ield 21690
and 21691, and the ields in_app_token. he rest ields
have no diferences and are therefore not of our interest.
- Aligning and Diing Same Users’ Same Request at
Diferent Time. However, some message-speciic ields
(e.g., timestamp if there is any) can also be value diferent.
herefore, we will further align and dif the two request
messages of the same user (e.g., Alice’s Request1 and Al-
ice’s Request2) to remove those message-speciic ields.
Selecting the Fields of Interest. he key objective of Auth-
Scope is to discover the vulnerable authorization by performing
what an atacker could do — substituting a guessable ield and ob-
serving whether other user’s information can be leaked. herefore,
we should focus on the ields that are guessable or enumerable (can
be performed by a brute-force atack).
In our running example,
E D
Field-Value of Alice vs. Field Value of Bob
fb153b7d8c0a0c6ac841d7bfbd9446de627c642858
e67315b35aa38d4ac8cac3cd9c7f88ae7f576d373f
21690
1.00
21691
Table 1: he Euclidean distance of the difed-ields
between Alice’s and Bob’s request messages.
+∞
clearly we should select and substitute ield 21690 with value 21691
(as what we did in Figure 3), instead of the in_app_token ield
because a token is in general unguessable and substituting a token
does not reveal the vulnerabilities (if a security token is changed,
the response should be changed as well). As such, we need an
algorithm to select the enumerable ields. Fortunately, we notice
that by using the Euclidean distance and predictable values, we can
automatically locate such ields.
- Euclidean Distance. An Euclidean distance (ED) is a
metric that measures the ordinary straight-line distance
between two points in Euclidean space. he smaller an
ED of a ield, the more likely to be guessed by atackers.
For instance, as shown in Table 1, the ED of 21690 and
21691 is just one, whereas the ED between the two tokens
is 14a225ca31667f1ff7713f22114be2fe324f6f119 (we thus
consider it a giant astronomical number +∞). Certainly,
when having a sample message with 21690, an atacker
can quickly probe other user’s information in a service by
changing to other closer numbers, whereas for token it is
hard for atackers to guess other’s.
hen the next question becomes how AuthScope com-
putes ED and decides whether a distance is +∞ (unguess-
able). To achieve this, AuthScope converts all difed value
(including strings and byte sequences) to numbers using
their minimal base. For instance, we will convert 21690
to a decimal value (using base-10), and the token using
base-36 (alphabetic + number). If a string contains other
printable ASCII symbols (recall HTTP is text-based proto-
col), we will use the worst case base-95 to convert it (there
are maximum 95 printable ASCII characters).
To decide whether an ED is +∞, we set a threshold
based on the number of downloads of the app. he in-
tuition is if the ED is smaller than the total number of
downloads showing in the app market, we consider the
corresponding ield enumerable because any substitution
of the value with a nearby one will likely lead to the disclo-
sure other user’s information if the server is vulnerable.
- Predictable Value. Using ED can ind most of the guess-
able ields. However, there are a few special cases that the
ED might be +∞, but it is guessable. One example is the
email address. Very likely, the ED of two email addresses
can be +∞, but an atacker can easily guess other’s email
address because of the recent huge data leakage of user ac-
counts in online services, making the email address value
predictable. herefore, we use string matching to handle
such ields. More speciically, if any of the request mes-
sage contains Alice’s email address (using email address
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA806patern matching), this guessable email address ield is of
our interest.
he other example is the Facebook ID (FID). While it
is a giant integer (e.g., 17927643151, which is the ACM’s),
it can be publicly crawled. Other than this ID, when user
using Facebook login to log in to a speciic app, Facebook
will issue an app-speciic ID [1] (e.g., 106611716575863 as
shown in the case study in Figure 6) to the user which is
unique to each app, and such ID can also be easily crawled
(e.g., within the app). herefore, we also call this app-
speciic ID FID and consider it public available knowledge.
Similar to the email case, if we observe Alice’s FID is used
in a request message, we will replace it with Bob’s and
observe how server would respond the request.
4.2.3 Substituting Enumerable Fields
Now we have identiied all of the guessable ields, next Auth-
Scope will substitute them to decide whether there is a vulnerable
authorization implementation. his step is quite straightforward:
for any identiied enumerable ields in Alice’s request message,
our man-in-the-middle proxy will just replace the value of this
ield with Bob’s. If there are multiple ields, we will send multiple
request messages. Only one ield at a time is substituted in each
message, and we will not simultaneously substitute ields at the
same time (as it is unlikely that an authorization depends on two
ields).
4.3 Response Message Labeling
Ater we have sent a ield substituted request message of Alice with
the value of Bob’s to the server, we then label the response message
to determine whether the server is vulnerable. he key idea to
decide this is if the response message returns the identical ones
with the same response message requested by Bob, then the server
is vulnerable.
More speciically, we label a response message that is returned
by a ield-substituted Alice’s request message is identical to the
corresponding Bob’s response, if the user-speciic data in the re-
sponse message is the same (byte-by-byte identical). hat is, we
will remove those non-user speciic data (such as message-speciic
timestamp) using the diferential traic analysis again, i.e., the
alignment and difering approach described in §4.2.2 when identi-
fying the non-user speciic ield in the request messages. Without
diferential analysis, we will not be able to tell we have success-
fully retrieved Bob’s data by just byte-by-byte comparison of the
response messages if there is any message-speciic data. Ater
removing these non-user speciic data in the response message,
AuthScope outputs that the server is vulnerable if we ind an
identical response for the corresponding request interface. We
will keep substituting and labeling, until all the Alice’s request
messages have substituted. If none of the response messages are
identical with initial Bob’s, then the server is not vulnerable. A
server may have multiple vulnerable interfaces if multiple of its
server request interfaces are vulnerable.
Pruning the Vulnerable Interface that Provides Public Re-
sources. Certainly, AuthScope can have false positives if the
vulnerable interfaces identiied are used to provide the public re-
sources. Since it is a public resource, no mater how we substitute
the enumerable ields, the server will always return the same re-
sponse. For instance, a news app that provides news to subscribed
users may be lagged as vulnerable if the news is fetched ater
authentication and this news can also be accessed without login
(a public resource).
To further prune such cases, we then let AuthScope take one
more run of the app without loggin the service. hat is, when it
encounters the Facebook login interface, it directly skips it and
continues exploring the app as deeply as it can. We will align
these ater authentication-skipped request messages with those in
Alice’s and Bob’s. If we observe a previously identiied vulnerable
interface can actually serve the public resource, we will not lag it
vulnerable.
5 EVALUATION
We have implemented AuthScope atop Android 4.4 platform by
using the Xposed [6] framework to drive the app execution and per-
form targeted app exploration, and our man-in-the-middle proxy is
implemented with the Burp Suite [5]. In total, AuthScope consists
of over 5, 000 lines of our own Java code and 300 lines of our own
python scripts. In this section, we present our detailed evaluation
results.
5.1 Experiment Setup
Dataset Collection. As of today, Google Play has over 2 million
mobile apps. To have a reasonable coverage of these apps, we
crawled the top 10% of free mobile apps based on the number of
installs in March 2017. Recall that AuthScope requires automatic
login and currently we only focus on the apps that use Facebook
login, and thus we have to select such apps. To this end, we irst
analyzed the 200, 000 apps to ilter out those that do not import
any Facebook libraries. Note that if an app has not imported Face-
book libraries, deinitely it does not have Facebook login. Ater
this initial iltering, we have 33, 950 remaining apps.
However, even if an app has imported Facebook library, there is
no guarantee that it will use Facebook login, we have to perform a
further analysis. In particular, we have observed that there are two