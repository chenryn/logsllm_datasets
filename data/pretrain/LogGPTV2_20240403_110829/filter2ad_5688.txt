# Title: Identifying and Analyzing Pointer Misuses for Sophisticated Memory-Corruption Exploit Diagnosis

## Authors:
- Mingwei Zhang (†)
- Aravind Prakash (§)
- Xiaolei Li (†)
- Zhenkai Liang (†)
- Heng Yin (§)

### Affiliations:
- (†) School of Computing, National University of Singapore
- (§) Department of Electrical Engineering and Computer Science, Syracuse University

---

### Abstract
This paper introduces a method for identifying and analyzing pointer misuses in sophisticated memory-corruption exploits. We present Pointerscope, an attack diagnosis engine that uses a tailored type system to detect and diagnose pointer misuses. Our approach is evaluated against real-world exploits from the Metasploit framework.

---

### 1. Introduction
#### 1.1 Simple Stack Buffer Overflow
In a simple stack buffer overflow, an attacker overwrites the function's return address with a pointer to shellcode on the stack. However, modern security mechanisms such as ASLR, DEP, and NX have made single-step attacks less effective.

#### 1.2 Exploiting SEH Mechanism
Structured Exception Handling (SEH) can be exploited by overwriting the SEH record to point to malicious code. This involves multiple steps:
1. Overwrite the SEH record.
2. Trigger an exception.
3. The exception handler executes the malicious code.

#### 1.3 Insights
Recent attacks often employ multiple steps, with pointer misuse being a common technique. Our goal is to diagnose pointer misuses in multi-step attacks.

---

### 2. Pointerscope - Attack Diagnosis Engine
Pointerscope is designed to diagnose pointer misuses in memory-corruption exploits. It includes:
- A tailored type system for diagnosing pointer misuses.
- An eager type inference system to detect pointer misuses.
- A key steps graph to provide a comprehensive view of the misuse.

---

### 3. Overview
The system consists of the following components:
- **Guest OS**: Runs the vulnerable program (e.g., a browser).
- **Exploit**: Malicious server delivering the exploit.
- **Type Inference Engine**: Detects and infers types of variables.
- **Execution Monitor (TEMU)**: Monitors and traces the execution.
- **Diagnosis Engine**: Generates a diagnosis report based on the execution trace.

---

### 4. Variable and Variable Type
- **Variable**: A memory location or register.
- **Primitive Variable Types**:
  - Integer
  - Control Pointer (code pointer)
  - Data Pointer
  - Other (remaining types)

---

### 5. Type Lattice
[Insert diagram or explanation of the type lattice]

---

### 6. Eager Dynamic Type Inference
- **Type Propagation**: 
  - Example: `mov %eax, %ebx`
  - Inference: `%eax` and `%ebx` have the same type.
- **Type Constraints**:
  - Example: `call %eax`
  - Inference: `%eax` contains a control pointer.

#### 6.1 Example - Type Inference
```assembly
{eax, ebx} : ANY
{eax, ebx, ecx} : ANY
ecx is an INT
{eax, ebx, ecx}: Integer
{eax, ebx, ecx, edx} : Integer
Used as a pointer. Conflict
```

- **Challenges**:
  - X86 supports base-index with displacement, but compilers may not follow conventions.
  - Solution: The register closest to the result is considered the base.
  - Individual instructions may not always lead to accurate type inferences.
  - Solution: Recognize common patterns and treat them as special cases.
  - LEA (Load Effective Address) is often used for arithmetic.
  - Solution: Treat `lea` as an arithmetic operation.

---

### 7. Key Steps Graph
- **Example**:
  - Infer: Top of stack (0xbfff0000) is an integer.
  - Type Origin: Where the variable was initialized.
  - Type Usage: Where the variable was misused.

---

### 8. Evaluation
- **Implementation**:
  - Execution monitor on TEMU.
  - 3.6K lines of C code.
- **Experimental Setup**:
  - Evaluated against real-world exploits from the Metasploit framework.

#### 8.1 Summary of Effectiveness
| CVE | Attack Technique | Runtime* | Pointer Misuses | Trace Size | Slice Size |
|-----|------------------|----------|-----------------|------------|------------|
| CVE-2010-0249 | Uninitialized memory; heap spray | 18m23s, 8m30s | 11 | 307,987,560 | 48,404,242 |
| CVE-2009-3672 | Incorrect variable initialization; heap-spray | 3m10s, 31s | 2 | 22,759,299 | 955,325 |
| CVE-2009-0075 | Uninitialized memory; heap spray | 25m, 21m16s | 3 | 411,323,083 | 44,792,770 |
| CVE-2006-0295 | Heap overflow; heap spray | 3m5s, 1s | 3 | 808,392 | 34,883 |
| CVE-2006-1016 | Stack overflow; SEH exploit | 4m59s, 1m33s | 3 | 64,355,691 | 1,334,253 |
| CVE-2006-4777 | Integer overflow; heap spray | 1m45s, 40s | 2 | 2,632,241 | 1,669,751 |
| CVE-2006-1359 | Incorrect variable initialization; heap spray | 11m58s, 13s | 1 | 8,336,193 | 29,520 |
| CVE-2010-3333 | Stack overflow vulnerability; SEH exploit | 18m53s, 7m24s | 2 | 236,331,307 | 814,305 |
| CVE-2010-3962 | Incorrect variable initialization; heap spray | 10m36s, 15s | 2 | 9,281,019 | 78,704 |

*Time taken to generate trace, time taken to generate key steps

---

### 9. Case Study: CVE-2009-3672
- **Description**: This is a real-world exploit for a vulnerable version of Internet Explorer.
- **Vulnerability**: Caused by a flaw in the `SetExpandedClipRect` member function of the `CDispNode` class.

#### 9.1 The First Type Conflict
```assembly
0x749120f2: or $0x2, %eax
I@0x00000000[1](R) R@eax[4](RW)
PI:EMAIL@CLayout::SizeDispNode
Infer: Integer
Type Origin (INT): or $0x2, %eax
eax (4 bytes)
Type Usage (CTR): 0x7490e854: call *0x2c(%eax)
M@0x74831546[4] M@0x0013e0d4[4]
PI:EMAIL@CLayout::GetFirstContentDispNode
Used as Control Ptr
Violation
```

#### 9.2 The Second Type Conflict
```assembly
0x74912000: call *0x2c(%eax)
M@0x74000004[4] M@0x0013e068[4]
PI:EMAIL@CLayout::SizeDispNode
0x74943a14: call *0x30(%eax)
M@0x74000008[4] M@0x0013dde4[4]
PI:EMAIL@CDispNode::GetNodeClipTransform
Type Origin (CTR): M@0x74000004[4], M@0x74000008[4]
Type Usage (CTR): [16940584] 0x7490e854 call *0x2c(%eax)
M@0x74000006[4] M@0x0013e0d4[4]
PI:EMAIL@CLayout::GetFirstContentDispNode
```

---

### 10. Reducing False Positives
- **Challenges**:
  - Compiler optimizations
  - Code obfuscation, even in proprietary code.
- **Note**: Our goal is not to eliminate false positives entirely.

---

### 11. Related Work
- **Attack Diagnosis Techniques**:
  - BackTracker [King, et al., SOSP’03]
  - Dynamic Taint Analysis [Newsome, et al., NDSS’05]
- **Type and Data Structure Recovery from Binary**:
  - Rewards [Zin, et al., NDSS’10]
  - Howard [Slowinska, NDSS’11]
  - Tie [Lee, et al., NDSS’11]
- **Defense and Evasion Techniques**:
  - CFI [Abadi, et al., CCS’05]
  - DFI [Castro, et al., OSDI’06]
  - WIT [Akritidis, et al., IEEE S&P’08]

---

### 12. Conclusion
- We define a pointer-centric type system to track pointers.
- We design a type inference system to detect pointer misuses.
- We generate a key steps graph to identify critical steps.
- We evaluate our work by testing our system on real-world exploits from Metasploit.

---

### 13. Questions?

---