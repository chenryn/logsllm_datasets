### Comparison of Z and O

**Objective Differences:**
- **O** is designed to detect only overflows and underflows that are exploitable by an attacker, thereby limiting the number of reported bugs.
- **Z** aims for completeness in its analysis, reporting all potential issues. However, it did not produce results for 22 contracts, either due to errors or timeouts.

**Performance Metrics:**
- **Timeouts:** Z encountered fewer timeouts (14) compared to O (35).
- **Result Consistency:** O consistently returned a result, whereas Z failed to do so for 22 contracts.

**Confusion Matrix:**
- **Table 3** illustrates the comparison between O and Z.
  - **O** identified 5 contracts as unsafe, while **Z** marked them as safe.
  - We manually verified these 5 contracts and confirmed that they could indeed produce integer overflows, questioning Z's claim of achieving zero false negatives.
  - In 471 cases, **Z** reported a contract as unsafe, while **O** deemed it safe. Upon manual analysis, we found that some of these overflows were benign, induced by developers or the Solidity compiler when handling data structures of dynamic size (e.g., arrays, strings, bytes). The remaining overflows were genuine but not detected by O because they did not originate from the defined sources. O could potentially detect these by adding more sources, such as loading from storage (SLOAD).

**False Positives:**
- **Z** reported 32 cases as unsafe, although the contracts were actually safe. **O** correctly identified 28 of these cases as safe, reducing the false positives by approximately 88%.
- **Z** does not check for division by zero or modulo zero bugs, which limits the comparison. **O** did not find any modulo bugs but identified 26 contracts vulnerable to division by zero bugs. We confirmed these findings through manual source code analysis and verified that the bytecode was compiled using a compiler version lower than 0.4.0.

**Example of Undetected Overflow:**
- **Listing 4** shows an example of an overflow in the `convertToWei` function, which was not detected by Z. The multiplication in this function can overflow if the `amount` is large enough.

### Truncation and Signedness Bugs

**Truncation Bugs:**
- **O** reported 39 contracts with truncation bugs. Manual verification confirmed these as true positives. We checked the source code for type castings where integers were converted to smaller ranges.

**Signedness Bugs:**
- **O** identified 6 contracts as vulnerable to signedness bugs. Manual verification confirmed these as true positives. We looked for conversions between signed and unsigned integers in the source code.

### Quantitative Analysis

**Dataset:**
- We collected the bytecode of 1,207,335 smart contracts from the first 5,000,000 blocks of the public Ethereum blockchain, spanning from August 7, 2015, to January 30, 2018.
- **Figure 3** shows a sudden increase in the number of smart contracts starting from April 2017.
- Only about 2% of the smart contracts on the Ethereum blockchain have their source code publicly available, emphasizing the need for tools like O that can analyze smart contracts at the bytecode level.
- Out of the 1,207,335 contracts, only 50,535 are unique in terms of their bytecode, indicating that 96% of the smart contracts are copies.

**Performance:**
- On average, O takes 75 seconds to analyze a contract, with a median of 13 seconds and a mode of 1 second.
- 524 contracts required more than 30 minutes to analyze.
- The number of paths explored by O ranges from 1 to 1,394, with an average of 71 per contract and a median of 51.
- The running time depends almost linearly on the number of explored paths.
- O achieved an average code coverage of about 88%.

**Results:**
- **O** detected 42,108 contracts with at least one integer bug, out of which 14,697 are distinct.
- **Figure 4** shows that most reported bugs are arithmetic (overflows, underflows, etc.), with 41,379 contracts, followed by 2,738 for truncation and 405 for signedness.
- **Figure 5** depicts the distribution of arithmetic bugs, with overflows being the most common (23,473 contracts), followed by underflows (11,479 contracts).
- Notably, even though only 29 distinct contracts were vulnerable to modulo zero, the overall number of vulnerable contracts was 10,335, highlighting the impact of copied contracts on the security of the blockchain.

### Detection of Real-World Vulnerabilities

**Effectiveness and Usefulness:**
- We tested O on five disclosed vulnerabilities targeting ERC-20 token smart contracts, each exploiting an integer overflow (see **Table 4**).
- **O** successfully detected all the vulnerabilities listed in Table 4, confirming its effectiveness in detecting real-world vulnerabilities.

**Unknown Vulnerabilities:**
- We analyzed 495 top Ethereum token smart contracts ranked by market capitalization.
- **O** reported 164 contracts as vulnerable, with 126 containing overflows and 54 containing underflows.
- Manual inspection confirmed two overflows as false positives and the rest as true positives.

This comprehensive analysis demonstrates the robustness and reliability of O in detecting integer bugs in Ethereum smart contracts.