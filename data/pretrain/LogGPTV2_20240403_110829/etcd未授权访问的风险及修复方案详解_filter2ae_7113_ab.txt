                        "key encipherment",
                        "server auth"
                    ]
                },
                "client": {
                    "expiry": "8760h",
                    "usages": [
                        "signing",
                        "key encipherment",
                        "client auth"
                    ]
                },
                "peer": {
                    "expiry": "8760h",
                    "usages": [
                        "signing",
                        "key encipherment",
                        "server auth",
                        "client auth"
                    ]
                }
            }
        }
    }
其中，server作为服务端与客户端通信时的服务端证书，client作为服务端与客户端通信时的客户端证书，peer作为集群节点之间的通信证书。
####  2.3 生成服务端证书
创建etcd-server.json文件
    {
        "CN": "etcd server",
        "hosts": [
            "172.16.2.1",
            "172.16.2.2",
            "172.16.2.3",
            "192.168.126.143"
        ],
        "key": {
            "algo": "rsa",
            "size": 2048
        },
        "names": [
            {
                "C": "CN",
                "L": "Shanghai",
                "ST": "Shanghai"
            }
        ]
    }
生成服务端证书:
    [root@localhost pki]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server etcd-server.json | cfssljson -bare server
    2021/03/31 07:24:58 [INFO] generate received request
    2021/03/31 07:24:58 [INFO] received CSR
    2021/03/31 07:24:58 [INFO] generating key: rsa-2048
    2021/03/31 07:24:58 [INFO] encoded CSR
    2021/03/31 07:24:58 [INFO] signed certificate with serial number 545742070794152469099370572346380711975550497369
    [root@localhost pki]# ls
    ca-config.json  ca-csr.json  ca.pem            server.csr      server.pem
    ca.csr          ca-key.pem   etcd-server.json  server-key.pem
上面这种方式，把所有节点的ip都写到了hosts中，集群成员使用统一的服务端证书。生产环境一般把hosts写成统一的对外域名。也可以分开创建三个配置文件，每个配置文件里面填写一个ip，不公用，这样方便后面扩容。
####  2.4 生成客户端证书
创建etcd-client.json文件，因为客户端证书仅用于签发验证客户端身份，因此不需要hosts字段。
    {
        "CN": "etcd client",
        "key": {
            "algo": "rsa",
            "size": 2048
        },
        "names": [
            {
                "C": "CN",
                "L": "Shanghai",
                "ST": "Shanghai"
            }
        ]
    }
生成客户端证书：
    [root@localhost pki]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client etcd-client.json | cfssljson -bare client
由于没有填写hosts字段，因此会有“[WARNING] This certificate lacks a “hosts” field.
”的警告，忽略就好。
####  2.5 生成peer节点通信证书
创建etcd-peer.json文件：
    {
        "CN": "etcd peer",
        "hosts": [
            "172.16.2.1",
            "172.16.2.2",
            "172.16.2.3"
        ],
        "key": {
            "algo": "rsa",
            "size": 2048
        },
        "names": [
            {
                "C": "CN",
                "L": "Shanghai",
                "ST": "Shanghai"
            }
        ]
    }
生成peer节点通信证书：
    [root@localhost pki]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer etcd-peer.json | cfssljson -bare peer
####  2.6 重新创建带TLS传输认证的etcd集群
首先停止运行之前创建的etcd集群，并将其删除。
    [root@localhost w4ter0]# docker stop $(docker ps -a -q) 
    9cc6afc100ad
    56148a0ebae2
    43ef4286ca34
    [root@localhost w4ter0]# docker rm $(docker ps -a -q)
    9cc6afc100ad
    56148a0ebae2
    43ef4286ca34
执行下面命令创建新的etcd集群。
节点1:
    docker run -d -p 23791:2379 -p 23801:2380 \
    -v /etc/etcd/pki:/pki \
    --name etcdnode1 \
    --network=mynet \
    --ip 172.16.2.1 \
    quay.io/coreos/etcd:v3.3.1 \
    etcd -name etcdnode1 \
    -advertise-client-urls https://172.16.2.1:2379 \
    -initial-advertise-peer-urls https://172.16.2.1:2380 \
    -listen-client-urls https://0.0.0.0:2379 \
    -listen-peer-urls https://0.0.0.0:2380 \
    -initial-cluster-token etcd-cluster \
    -initial-cluster "etcdnode1=https://172.16.2.1:2380,etcdnode2=https://172.16.2.2:2380,etcdnode3=https://172.16.2.3:2380" \
    -initial-cluster-state new \
    -cert-file=/pki/server.pem \
    -key-file=/pki/server-key.pem \
    -client-cert-auth \
    -trusted-ca-file=/pki/ca.pem \
    -peer-client-cert-auth \
    -peer-cert-file=/pki/peer.pem \
    -peer-key-file=/pki/peer-key.pem \
    -peer-trusted-ca-file=/pki/ca.pem
节点2:
    docker run -d -p 23792:2379 -p 23802:2380 \
    -v /etc/etcd/pki:/pki \
    --name etcdnode2 \
    --network=mynet \
    --ip 172.16.2.2 \
    quay.io/coreos/etcd:v3.3.1 \
    etcd -name etcdnode2 \
    -advertise-client-urls https://172.16.2.2:2379 \
    -initial-advertise-peer-urls https://172.16.2.2:2380 \
    -listen-client-urls https://0.0.0.0:2379 \
    -listen-peer-urls https://0.0.0.0:2380 \
    -initial-cluster-token etcd-cluster \
    -initial-cluster "etcdnode1=https://172.16.2.1:2380,etcdnode2=https://172.16.2.2:2380,etcdnode3=https://172.16.2.3:2380" \
    -initial-cluster-state new \
    -cert-file=/pki/server.pem \
    -key-file=/pki/server-key.pem \
    -client-cert-auth \
    -trusted-ca-file=/pki/ca.pem \
    -peer-client-cert-auth \
    -peer-cert-file=/pki/peer.pem \
    -peer-key-file=/pki/peer-key.pem \
    -peer-trusted-ca-file=/pki/ca.pem
节点3:
    docker run -d -p 23793:2379 -p 23803:2380 \
    -v /etc/etcd/pki:/pki \
    --name etcdnode3 \
    --network=mynet \
    --ip 172.16.2.3 \
    quay.io/coreos/etcd:v3.3.1 \
    etcd -name etcdnode3 \
    -advertise-client-urls https://172.16.2.3:2379 \
    -initial-advertise-peer-urls https://172.16.2.3:2380 \
    -listen-client-urls https://0.0.0.0:2379 \
    -listen-peer-urls https://0.0.0.0:2380 \
    -initial-cluster-token etcd-cluster \
    -initial-cluster "etcdnode1=https://172.16.2.1:2380,etcdnode2=https://172.16.2.2:2380,etcdnode3=https://172.16.2.3:2380" \
    -initial-cluster-state new \
    -cert-file=/pki/server.pem \
    -key-file=/pki/server-key.pem \
    -client-cert-auth \
    -trusted-ca-file=/pki/ca.pem \
    -peer-client-cert-auth \
    -peer-cert-file=/pki/peer.pem \
    -peer-key-file=/pki/peer-key.pem \
    -peer-trusted-ca-file=/pki/ca.pem
再次访问新创建的etcd集群，直接访问
    etcdctl --endpoints="https://192.168.126.143:23791" member list
会报如下错误：
浏览器中访问报错如下：
需要携带客户端的证书和密钥访问。将签发的客户端证书、密钥和ca证书copy到本机etcdctl同级目录下，指定对应参数即可正常访问：
    etcdctl --endpoints="https://192.168.126.143:23791" --cacert=ca.pem --cert=client.pem --key=client-key.pem member list
至此，我们完成了基于TLS的身份验证和数据传输配置。
虽然上面两个方案都能解决etcd未授权访问的问题，但是为保证安全，实际使用时强烈建议两种方案同时上，既实现了权限管控，又保障了传输安全。
参考资料：  
**漏洞悬赏计划：涂鸦智能安全响应中心（ ）欢迎白帽子来探索。**
**招聘内推计划：涵盖安全开发、安全测试、代码审计、安全合规等所有方面的岗位，简历投递sec#tuya.com，请注明来源。**