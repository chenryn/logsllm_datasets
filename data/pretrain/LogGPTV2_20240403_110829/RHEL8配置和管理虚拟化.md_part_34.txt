        ``` literallayout
        # lspci -Dnn | grep VGA
        0000:02:00.0 VGA compatible controller [0300]: NVIDIA Corporation GK106GL [Quadro K4000] [10de:11fa] (rev a1)
        ```
    2.  防止主机的图形驱动程序使用 GPU。为此，请使用 GPU 的 PCI ID 和
        pci-stub 驱动程序。
        例如，以下命令可防止驱动程序绑定到 [**10de:11fa**]{.strong} bus
        附加的 GPU：
        ``` literallayout
        # grubby --args="pci-stub.ids=10de:11fa" --update-kernel DEFAULT
        ```
    3.  重启主机。
    :::
2.  [**可选：**]{.strong} 如果因为支持限制而无法将某些 GPU
    功能（如音频）传递给虚拟机，您可以修改 IOMMU
    组中端点的驱动程序绑定，使其只通过必要的 GPU 功能。
    ::: orderedlist
    1.  将 GPU 设置转换为 XML，并记下要防止附加到主机驱动程序的端点的
        PCI 地址。
        为此，请将 GPU 的 PCI 总线地址转换为与 libvirt
        兼容的格式，方法是向地址中添加 the `pci_`{.literal}
        前缀，并将分隔符转换为下划线。
        例如，以下命令显示在 `0000:02:00.0`{.literal} 总线地址上附加的
        GPU 的 XML 配置。
        ``` literallayout
        # virsh nodedev-dumpxml pci_0000_02_00_0
        ```
        ``` programlisting
         pci_0000_02_00_0
         /sys/devices/pci0000:00/0000:00:03.0/0000:02:00.0
         pci_0000_00_03_0
          pci-stub
          0
          2
          0
          0
          GK106GL [Quadro K4000]
          NVIDIA Corporation
        ```
    2.  防止端点附加到主机驱动程序。
        在本例中，要将 GPU 分配给虚拟机，请防止与音频功能对应的端点
        ``{.literal}，不附加到主机音频驱动程序，而是将端点附加到
        VFIO-PCI。
        ``` literallayout
        # driverctl set-override 0000:02:00.1 vfio-pci
        ```
    :::
3.  将 GPU 附加到虚拟机
    ::: orderedlist
    1.  使用 PCI 总线地址为 GPU 创建 XML 配置文件。
        例如，您可以使用 GPU 总线地址中的参数创建以下 XML 文件
        GPU-Assign.xml。
        ``` programlisting
        ```
    2.  将文件保存到主机系统上。
    3.  将 文件与虚拟机的 XML 配置合并。
        例如，以下命令将 GPU XML 文件 GPU-Assign.xml 与
        `System1`{.literal} 虚拟机的 XML 配置文件合并：
        ``` literallayout
        # virsh attach-device System1 --file /home/GPU-Assign.xml --persistent
        Device attached successfully.
        ```
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        GPU 作为辅助图形设备附加到虚拟机。不支持将 GPU
        指定为主图形设备，且红帽不建议删除虚拟机 XML
        配置中的主要模拟图形设备。
        :::
    :::
:::
::: itemizedlist
**验证**
-   该设备会出现在虚拟机 XML 配置的 ` 部分`{.literal}
    下。如需更多信息，请参阅 [示例虚拟机 XML
    配置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_virtualization/index#sample-virtual-machine-xml-configuration_viewing-information-about-virtual-machines){.link}。
:::
:::
::: section
::: titlepage
# []{#assembly_managing-gpu-devices-in-virtual-machines_configuring-and-managing-virtualization.html#assembly_managing-nvidia-vgpu-devices_assembly_managing-gpu-devices-in-virtual-machines}管理 NVIDIA vGPU 设备 {.title}
:::
vGPU 功能使得将物理 NVIDIA GPU 设备划分为多个虚拟设备（称为修复
`设备`{.literal} ）成为可能。然后可将这些 mediated devices
分配给多个虚拟机（VM）作为虚拟 GPU。因此，这些虚拟机可以共享单个物理 GPU
的性能。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
为虚拟机分配物理 GPU，在使用或不使用介质的设备时，使主机无法使用 GPU。
:::
::: section
::: titlepage
## []{#assembly_managing-gpu-devices-in-virtual-machines_configuring-and-managing-virtualization.html#proc_setting-up-nvidia-vgpu-devices_assembly_managing-nvidia-vgpu-devices}设置 NVIDIA vGPU 设备 {.title}
:::
要设置 NVIDIA vGPU 功能，您需要为 GPU 设备下载 NVIDIA vGPU
驱动程序，创建介质设备，并将其分配给预期的虚拟机。具体步骤请查看以下说明。
::: itemizedlist
**先决条件**
-   已安装 [*mdevctl*]{.emphasis} 软件包。
    ``` literallayout
    # yum install mdevctl
    ```
-   您的 GPU 支持 vGPU 介质设备。有关支持创建 vGPU 的 NVIDIA GPU
    的最新列表，请参阅 [NVIDIA GPU
    软件文档](https://docs.nvidia.com/grid/latest/grid-vgpu-release-notes-red-hat-el-kvm/index.html#validated-platforms){.link}。
    ::: itemizedlist
    -   如果您不知道主机正在使用的 GPU，请安装 [*lshw*]{.emphasis}
        软件包并使用 `lshw -C display`{.literal}
        命令。以下示例显示系统使用与 vGPU 兼容的 NVIDIA Tesla P4 GPU。
        ``` literallayout
        # lshw -C display
        *-display
               description: 3D controller
               product: GP104GL [Tesla P4]
               vendor: NVIDIA Corporation
               physical id: 0
               bus info: pci@0000:01:00.0
               version: a1
               width: 64 bits
               clock: 33MHz
               capabilities: pm msi pciexpress cap_list
               configuration: driver=vfio-pci latency=0
               resources: irq:16 memory:f6000000-f6ffffff memory:e0000000-efffffff memory:f0000000-f1ffffff
        ```
    :::
:::
::: orderedlist
**流程**
1.  下载 NVIDIA vGPU 驱动程序并在您的系统中安装它们。具体步骤请查看
    [NVIDIA
    文档](https://docs.nvidia.com/grid/latest/grid-software-quick-start-guide/index.html#getting-your-nvidia-grid-software){.link}。
2.  如果 NVIDIA 软件安装程序没有创建
    [**/etc/modprobe.d/nvidia-installer-disable-nouveau.conf**]{.strong}
    文件，请在 [**/etc/modprobe.d/**]{.strong} 中创建任何名称的
    `conf`{.literal} 文件，并在文件中添加以下行：
    ``` literallayout
    blacklist nouveau
    options nouveau modeset=0
    ```
3.  为当前内核重新生成初始 ramdisk，然后重新启动。
    ``` literallayout
    # dracut --force
    # reboot
    ```
4.  检查内核是否已加载 `nvidia_vgpu_vfio`{.literal} 模块，并且
    `nvidia-vgpu-mgr.service`{.literal} 服务正在运行。
    ``` literallayout
    # lsmod | grep nvidia_vgpu_vfio
    nvidia_vgpu_vfio 45011 0
    nvidia 14333621 10 nvidia_vgpu_vfio
    mdev 20414 2 vfio_mdev,nvidia_vgpu_vfio
    vfio 32695 3 vfio_mdev,nvidia_vgpu_vfio,vfio_iommu_type1
    # systemctl status nvidia-vgpu-mgr.service
    nvidia-vgpu-mgr.service - NVIDIA vGPU Manager Daemon
       Loaded: loaded (/usr/lib/systemd/system/nvidia-vgpu-mgr.service; enabled; vendor preset: disabled)
       Active: active (running) since Fri 2018-03-16 10:17:36 CET; 5h 8min ago
     Main PID: 1553 (nvidia-vgpu-mgr)
     [...]
    ```
5.  生成设备 UUID。
    ``` literallayout
    # uuidgen
    30820a6f-b1a5-4503-91ca-0c10ba58692a
    ```
6.  从您探测到的 GPU 硬件创建介质设备，并将生成的 UUID 分配给该设备。
    []{#assembly_managing-gpu-devices-in-virtual-machines_configuring-and-managing-virtualization.html#starting-nvidia-vgpu-devices_assembly_managing-nvidia-vgpu-devices}
    以下示例演示了如何在运行于 0000:01:00.0 PCI 总线上的 NVIDIA Tesla P4
    卡上创建 `nvidia-63`{.literal} vGPU 类型的媒体设备：
    ``` literallayout
    # mdevctl start -u 30820a6f-b1a5-4503-91ca-0c10ba58692a -p 0000:01:00.0 --type nvidia-63
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    有关特定 GPU 设备的 vGPU 类型值，请参阅 [Virtual GPU
    软件文档](https://docs.nvidia.com/grid/latest/grid-vgpu-user-guide/index.html#virtual-gpu-types-grid){.link}。
    :::
7.  使 mediated 设备持久：
    ``` literallayout
    # mdevctl define --auto --uuid 30820a6f-b1a5-4503-91ca-0c10ba58692a
    ```
    []{#assembly_managing-gpu-devices-in-virtual-machines_configuring-and-managing-virtualization.html#attaching-nvidia-vgpu-devices_assembly_managing-nvidia-vgpu-devices}
8.  将 mediated 设备附加到要共享 vGPU
    资源的虚拟机。要做到这一点，请将以下行以及之前生成的 UUID
    添加到虚拟机 XML 配置的 [**\**]{.strong} 部分。
    ``` programlisting
    ```
    请注意，每个 UUID 每次只能分配给一个虚拟机。
9.  要使 vGPU 媒体设备在分配的虚拟机上完全可用，请在虚拟机上设置 NVIDIA
    vGPU 虚拟机软件许可。有关详情和说明，请参阅 [NVIDIA Virtual GPU
    Software License Server User
    Guide](https://docs.nvidia.com/grid/ls/latest/grid-license-server-user-guide/index.html#installing-nvidia-grid-license-server){.link}。
:::
::: itemizedlist
**验证**
-   列出主机上的活动介质设备。如果输出显示有使用 UUID
    的定义设备，则代表正确配置了 NVIDIA vGPU。例如：
    ``` literallayout
    # mdevctl list
    85006552-1b4b-45ef-ad62-de05be9171df 0000:01:00.0 nvidia-63
    30820a6f-b1a5-4503-91ca-0c10ba58692a 0000:01:00.0 nvidia-63 (defined)
    ```
:::
::: itemizedlist
**其它资源**
-   有关使用 `mdevctl`{.literal} 实用程序的更多信息，请使用
    `man mdevctl`{.literal}。
:::
:::
::: section
::: titlepage
## []{#assembly_managing-gpu-devices-in-virtual-machines_configuring-and-managing-virtualization.html#proc_removing-nvidia-vgpu-devices_assembly_managing-nvidia-vgpu-devices}删除 NVIDIA vGPU 设备 {.title}
:::
要更改[分配的 vGPU
介质设备](#assembly_managing-gpu-devices-in-virtual-machines_configuring-and-managing-virtualization.html#proc_setting-up-nvidia-vgpu-devices_assembly_managing-nvidia-vgpu-devices "设置 NVIDIA vGPU 设备"){.link}
的配置，您需要从分配的虚拟机中删除现有设备。具体步骤请查看以下操作：
::: itemizedlist
**先决条件**