controls all of the clients and servers in this environment and can manage distributing
new stub libraries when they are required. On the other hand, a widely used public
API might be better suited to the REST style using a widely used format such as JSON
to maximize interoperability with different types of clients.
DEFINITION
In a microservices architecture, an application is deployed as a collec-
tion of loosely coupled services rather than a single large application, or
monolith. Each microservice exposes an API that other services talk to. Secur-
ing microservice APIs is covered in detail in part 4 of this book.
This book will focus on APIs exposed over HTTP using a loosely RESTful approach, as
this is the predominant style of API at the time of writing. That is, although the APIs
that are developed in this book will try to follow REST design principles, you will
sometimes deviate from those principles to demonstrate how to secure other styles of
API design. Much of the advice will apply to other styles too, and the general princi-
ples will even apply when designing a library.
1.3
API security in context
API Security lies at the intersection of several security disciplines, as shown in figure 1.2.
The most important of these are the following three areas:
1
Information security (InfoSec) is concerned with the protection of information
over its full life cycle from creation, storage, transmission, backup, and eventual
destruction.
2
Network security deals with both the protection of data flowing over a network
and prevention of unauthorized access to the network itself.
3
Application security (AppSec) ensures that software systems are designed and built
to withstand attacks and misuse.
9
API security in context
Each of these three topics has filled many books individually, so we will not cover each
of them in full depth. As figure 1.2 illustrates, you do not need to learn every aspect of
these topics to know how to build secure APIs. Instead, we will pick the most critical
areas from each and blend them to give you a thorough understanding of how they
apply to securing an API.
 From information security you will learn how to:
 Define your security goals and identify threats
 Protect your APIs using access control techniques
 Secure information using applied cryptography
DEFINITION
Cryptography is the science of protecting information so that two
or more people can communicate without their messages being read or tam-
pered with by anybody else. It can also be used to protect information written
to disk.
From network security you will learn:
 The basic infrastructure used to protect an API on the internet, including fire-
walls, load-balancers, and reverse proxies, and roles they play in protecting your
API (see the next section)
 Use of secure communication protocols such as HTTPS to protect data trans-
mitted to or from your API
DEFINITION
HTTPS is the name for HTTP running over a secure connection.
While normal HTTP requests and responses are visible to anybody watching
the network traffic, HTTPS messages are hidden and protected by Transport
Layer Security (TLS, also known as SSL). You will learn how to enable HTTPS
for an API in chapter 3.
Network
security
Application
security
Information
security
API security
Figure 1.2
API security lies at the 
intersection of three security areas: 
information security, network security, 
and application security.
10
CHAPTER 1
What is API security?
Finally, from application security you will learn:
 Secure coding techniques
 Common software security vulnerabilities
 How to store and manage system and user credentials used to access your APIs
1.3.1
A typical API deployment
An API is implemented by application code running on a server; either an application
server such as Java Enterprise Edition (Java EE), or a standalone server. It is very rare to
directly expose such a server to the internet, or even to an internal intranet. Instead,
requests to the API will typically pass through one or more additional network services
before they reach your API servers, as shown in figure 1.3. Each request will pass
through one or more firewalls, which inspect network traffic at a relatively low level
and ensure that any unexpected traffic is blocked. For example, if your APIs are serv-
ing requests on port 80 (for HTTP) and 443 (for HTTPS), then the firewall would
be configured to block any requests for any other ports. A load balancer will then
route traffic to appropriate services and ensure that one server is not overloaded
with lots of requests while others sit idle. Finally, a reverse proxy (or gateway) is typi-
cally placed in front of the application servers to perform computationally expensive
operations like handling TLS encryption (known as SSL termination) and validating
credentials on requests.
DEFINITION
SSL termination1 (or SSL offloading) occurs when a TLS connec-
tion from a client is handled by a load balancer or reverse proxy in front of
the destination API server. A separate connection from the proxy to the back-
end server is then made, which may either be unencrypted (plain HTTP) or
encrypted as a separate TLS connection (known as SSL re-encryption).
Beyond these basic elements, you may encounter several more specialist services:
 An API gateway is a specialized reverse proxy that can make different APIs appear
as if they are a single API. They are often used within a microservices architec-
ture to simplify the API presented to clients. API gateways can often also take
care of some of the aspects of API security discussed in this book, such as authen-
tication or rate-limiting.
 A web application firewall (WAF) inspects traffic at a higher level than a tradi-
tional firewall and can detect and block many common attacks against HTTP
web services.
 An intrusion detection system (IDS) or intrusion prevention system (IPS) monitors
traffic within your internal networks. When it detects suspicious patterns of
activity it can either raise an alert or actively attempt to block the suspicious
traffic.
1 In this context, the newer term TLS is rarely used.
11
API security in context
In practice, there is often some overlap between these services. For example, many
load balancers are also capable of performing tasks of a reverse proxy, such as termi-
nating TLS connections, while many reverse proxies can also function as an API
gateway. Certain more specialized services can even handle many of the security
mechanisms that you will learn in this book, and it is becoming common to let a gate-
way or reverse proxy handle at least some of these tasks. There are limits to what these
Internet
Firewalls block
unwanted network
trafﬁc.
Load balancer
API
server
API
server
API
server
API
server
Reverse
proxy
Reverse
proxy
Database
Database
Load balancer
A load balancer distributes
requests between servers.
Reverse proxies can do
more complex routing and
handle tasks such as SSL
termination or rate-limiting
on behalf of API servers.
API servers
implement
the API itself.
There may be
additional load
balancers and
proxies separating
API servers from
databases or
other services.
Reverse
proxy
Request from clients
Figure 1.3
Requests to your API servers will typically pass through several other services first. 
A firewall works at the TCP/IP level and only allows traffic in or out of the network that matches 
expected flows. A load balancer routes requests to appropriate internal services based on the 
request and on its knowledge of how much work each server is currently doing. A reverse proxy 
or API gateway can take care of expensive tasks on behalf of the API server, such as terminating 
HTTPS connections or validating authentication credentials.
12
CHAPTER 1
What is API security?
components can do, and poor security practices in your APIs can undermine even the
most sophisticated gateway. A poorly configured gateway can also introduce new risks
to your network. Understanding the basic security mechanisms used by these products
will help you assess whether a product is suitable for your application, and exactly
what its strengths and limitations are.
1.4
Elements of API security
An API by its very nature defines a set of operations that a caller is permitted to use. If
you don’t want a user to perform some operation, then simply exclude it from the
API. So why do we need to care about API security at all? 
 First, the same API may be accessible to users with distinct levels of authority;
for example, with some operations allowed for only administrators or other
users with a special role. The API may also be exposed to users (and bots) on
the internet who shouldn’t have any access at all. Without appropriate access
controls, any user can perform any action, which is likely to be undesirable.
These are factors related to the environment in which the API must operate.
 Second, while each individual operation in an API may be secure on its own, com-
binations of operations might not be. For example, a banking API might offer
separate withdrawal and deposit operations, which individually check that limits
are not exceeded. But the deposit operation has no way to know if the money
being deposited has come from a real account. A better API would offer a
transfer operation that moves money from one account to another in a single
Pop quiz
1
Which of the following topics are directly relevant to API security? (Select all that
apply.)
a
Job security
b
National security
c
Network security
d
Financial security
e
Application security
f
Information security
2
An API gateway is a specialized version of which one of the following components?
a
Client
b
Database
c
Load balancer
d
Reverse proxy
e
Application server
The answers are at the end of the chapter.
13
Elements of API security
operation, guaranteeing that the same amount of money always exists. The secu-
rity of an API needs to be considered as a whole, and not as individual operations.
 Last, there may be security vulnerabilities due to the implementation of the
API. For example, failing to check the size of inputs to your API may allow an
attacker to bring down your server by sending a very large input that consumes
all available memory; a type of denial of service (DoS) attack. 
DEFINITION
A denial of service (DoS) attack occurs when an attacker can pre-
vent legitimate users from accessing a service. This is often done by flooding a
service with network traffic, preventing it from servicing legitimate requests,
but can also be achieved by disconnecting network connections or exploiting
bugs to crash the server.
Some API designs are more amenable to secure implementation than others, and
there are tools and techniques that can help to ensure a secure implementation. It is
much easier (and cheaper) to think about secure development before you begin cod-
ing rather than waiting until security defects are identified later in development or in
production. Retrospectively altering a design and development life cycle to account
for security is possible, but rarely easy. This book will teach you practical techniques
for securing APIs, but if you want a more thorough grounding in how to design-in
security from the start, then I recommend the book Secure by Design by Dan Bergh
Johnsson, Daniel Deogun, and Daniel Sawano (Manning, 2019). 
 It is important to remember that there is no such thing as a perfectly secure sys-
tem, and there is not even a single definition of “security.” For a healthcare provider,
being able to discover whether your friends have accounts on a system would be con-
sidered a major security flaw and a privacy violation. However, for a social network, the
same capability is an essential feature. Security therefore depends on the context.
There are many aspects that should be considered when designing a secure API,
including the following:
 The assets that are to be protected, including data, resources, and physical devices
 Which security goals are important, such as confidentiality of account names
 The mechanisms that are available to achieve those goals
 The environment in which the API is to operate, and the threats that exist in that
environment
1.4.1
Assets
For most APIs, the assets will consist of information, such as customer names and
addresses, credit card information, and the contents of databases. If you store infor-
mation about individuals, particularly if it may be sensitive such as sexual orientation
or political affiliations, then this information should also be considered an asset to
be protected.
  There are also physical assets to consider, such as the physical servers or devices
that your API is running on. For servers running in a datacenter, there are relatively
14
CHAPTER 1
What is API security?
few risks of an intruder stealing or damaging the hardware itself, due to physical pro-
tections (fences, walls, locks, surveillance cameras, and so on) and the vetting and
monitoring of staff that work in those environments. But an attacker may be able to
gain control of the resources that the hardware provides through weaknesses in the
operating system or software running on it. If they can install their own software, they
may be able to use your hardware to perform their own actions and stop your legiti-
mate software from functioning correctly.
 In short, anything connected with your system that has value to somebody should
be considered an asset. Put another way, if anybody would suffer real or perceived
harm if some part of the system were compromised, that part should be considered an
asset to be protected. That harm may be direct, such as loss of money, or it may be
more abstract, such as loss of reputation. For example, if you do not properly protect
your users’ passwords and they are stolen by an attacker, the users may suffer direct
harm due to the compromise of their individual accounts, but your organization
would also suffer reputational damage if it became known that you hadn’t followed
basic security precautions.
1.4.2
Security goals
Security goals are used to define what security actually means for the protection of your
assets. There is no single definition of security, and some definitions can even be con-
tradictory! You can break down the notion of security in terms of the goals that should
be achieved or preserved by the correct operation of the system. There are several
standard security goals that apply to almost all systems. The most famous of these are
the so-called “CIA Triad”:
 Confidentiality—Ensuring information can only be read by its intended audience 
 Integrity—Preventing unauthorized creation, modification, or destruction of
information
 Availability—Ensuring that the legitimate users of an API can access it when
they need to and are not prevented from doing so.
Although these three properties are almost always important, there are other security
goals that may be just as important in different contexts, such as accountability (who
did what) or non-repudiation (not being able to deny having performed an action). We
will discuss security goals in depth as you develop aspects of a sample API.
 Security goals can be viewed as non-functional requirements (NFRs) and considered
alongside other NFRs such as performance or reliability goals. In common with other
NFRs, it can be difficult to define exactly when a security goal has been satisfied. It is
hard to prove that a security goal is never violated because this involves proving a nega-
tive, but it’s also difficult to quantify what “good enough” confidentiality is, for example. 
 One approach to making security goals precise is used in cryptography. Here,
security goals are considered as a kind of game between an attacker and the system,
with the attacker given various powers. A standard game for confidentiality is known
15
Elements of API security
as indistinguishability. In this game, shown in figure 1.4, the attacker gives the system
two equal-length messages, A and B, of their choosing and then the system gives
back the encryption of either one or the other. The attacker wins the game if they
can determine which of A or B was given back to them. The system is said to be
secure (for this security goal) if no realistic attacker has better than a 50:50 chance
of guessing correctly.
Not every scenario can be made as precise as those used in cryptography. An alterna-
tive is to refine more abstract security goals into specific requirements that are con-
crete enough to be testable. For example, an instant messaging API might have the
functional requirement that users are able to read their messages. To preserve confidentiality,
you may then add constraints that users are only able to read their own messages and
that a user must be logged in before they can read their messages. In this approach, secu-
rity goals become constraints on existing functional requirements. It then becomes
easier to think up test cases. For example:
 Create two users and populate their accounts with dummy messages.
 Check that the first user cannot read the messages of the second user.
 Check that a user that has not logged in cannot read any messages.
There is no single correct way to break down a security goal into specific require-
ments, and so the process is always one of iteration and refinement as the constraints
become clearer over time, as shown in figure 1.5. After identifying assets and defining
security goals, you break down those goals into testable constraints. Then as you
implement and test those constraints, you may identify new assets to be protected. For
A
B
Encrypt
Key
Attacker
A or B?
Random choice
Figure 1.4
The indistinguishability game used to define confidentiality in 
cryptography. The attacker is allowed to submit two equal-length messages, A and 
B. The system then picks one at random and encrypts it using the key. The system 
is secure if no “efficient” challenger can do much better than guesswork to know 
whether they received the encryption of message A or B.
16
CHAPTER 1
What is API security?
example, after implementing your login system, you may give each user a unique tem-
porary session cookie. This session cookie is itself a new asset that should be pro-
tected. Session cookies are discussed in chapter 4.
 This iterative process shows that security is not a one-off process that can be signed
off once and then forgotten about. Just as you wouldn’t test the performance of an
API only once, you should revisit security goals and assumptions regularly to make
sure they are still valid.
1.4.3
Environments and threat models
A good definition of API security must also consider the environment in which your
API is to operate and the potential threats that will exist in that environment. A
threat is simply any way that a security goal might be violated with respect to one or
more of your assets. In a perfect world, you would be able to design an API that
achieved its security goals against any threat. But the world is not perfect, and it is
rarely possible or economical to prevent all attacks. In some environments some
threats are just not worth worrying about. For example, an API for recording race
times for a local cycling club probably doesn’t need to worry about the attentions of
a nation-state intelligence agency, although it may want to prevent riders trying to
“improve” their own best times or alter those of other cyclists. By considering realis-
tic threats to your API you can decide where to concentrate your efforts and identify
gaps in your defenses. 
Identify
assets
Deﬁne security
goals
Reﬁne into security
constraints
Develop and test
Figure 1.5
Defining security for your API consists of a four-step 
iterative process of identifying assets, defining the security goals 
that you need to preserve for those assets, and then breaking those 
down into testable implementation constraints. Implementation may 
then identify new assets or goals and so the process continues.
17
Elements of API security
DEFINITION
A threat is an event or set of circumstances that defeats the secu-
rity goals of your API. For example, an attacker stealing names and address
details from your customer database is a threat to confidentiality.