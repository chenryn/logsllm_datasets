execution flow to the KiSystemServiceStart global system call dispatcher, residing in the Secure Kernel 
(VTL 1). The global system call dispatcher recognizes that the system call number belongs to a normal 
call and uses the number to access the IumSyscallDispatchTable array, which represents the normal calls 
dispatch table.
354 
CHAPTER 9 Virtualization technologies
The normal calls dispatch table contains an array of compacted entries, which are generated in 
phase 0 of the Secure Kernel startup (discussed later in this chapter). Each entry contains an offset to 
a target function (calculated relative to the table itself) and the number of its arguments (with some 
flags). All the offsets in the table are initially calculated to point to the normal call dispatcher routine 
(IumGenericSyscall). After the first initialization cycle, the Secure Kernel startup routine patches each 
entry that represents a special call. The new offset is pointed to the part of code that implements the 
normal call in the Secure Kernel.
Lsalso
Trustlet
System Call
Descriptors Array
Secure Kernel
Normal Calls
Dispatch Table
(lumSyscallDispatch
Table)
NtQueryInformationProcess:
MOV 
R10,  
RCX
MOV 
EAX, 
19h
SYSCALL
........
........
........
31
NtQueryInformationProcess offset <<5
Index 25
E
0
5 4
# of
Args
Index 26
31
NtAllocateVirtualMemory offset <<5
E
0
5 4
# of
Args
Index 49
31
offset of lumGenericSyscall <<5
E
0
5 4
# of
Args
E = enclave compatible
T = type of normal call
Flags
Base
T
Flags
Base
T
Flags
Base
T
Flags
Base
T
Flags
Base
T
FIGURE 9-34 A trustlet performing a special normal call to the NtQueryInformationProcess API.
As a result, in Figure 9-34, the global system calls dispatcher transfers execution to the 
NtQueryInformationProcess function’s part implemented in the Secure Kernel. The latter checks 
whether the requested information class is one of the small subsets exposed to the Secure Kernel and, if 
so, uses a small stub code to call the normal call dispatcher routine (IumGenericSyscall). 
Figure 9-35 shows the syscall selector number for the NtQueryInformationProcess API. Note that the stub 
sets the highest bit (N bit) of the syscall number to indicate that the normal call is requested by the Secure 
Kernel. The normal call dispatcher checks the parameters and calls the marshaler, which is able to marshal 
each argument and copy it in the right offset of the shared buffer. There is another bit in the selector that 
further differentiates between a normal call or a secure system call, which is discussed later in this chapter.
1
0
31 30
27 26
S bit = Secure System Call
N bit = Called from the Secure Kernel
NtQueryInformationProcess SYSCALL index (25)
FIGURE 9-35 The Syscall selector number of the Secure Kernel.
CHAPTER 9 Virtualization technologies
355
The marshaler works thanks to two important arrays that describe each normal call: the descriptors 
array (shown in the right side of Figure 9-34) and the arguments descriptors array. From these arrays, 
the marshaler can fetch all the information that it needs: normal call type, marshalling function index, 
argument type, size, and type of data pointed to (if the argument is a pointer).
After the shared buffer has been correctly filled by the marshaler, the Secure Kernel compiles the 
SKCALL data structure and enters the normal call dispatcher loop (SkCallNormalMode). This part 
of the loop saves and clears all the shared virtual CPU registers, disables interrupts, and moves the 
thread context to the PRCB thread (more about thread scheduling later in the chapter). It then copies 
the content of the SKCALL data structure in some shared register. As a final stage, it calls the hypervi-
sor through the HvVtlReturn hypercall.
Then the code execution resumes in the secure call dispatch loop in VTL 0. If there are some pending 
interrupts in the queue, they are processed as normal (only if the IRQL allows it). The loop recognizes 
the normal call operation request and calls the NtQueryInformationProcess function implemented in 
VTL 0. After the latter function finished its processing, the loop restarts and reenters the Secure Kernel 
again (as for Secure Calls), still through the HvlSwitchToVsmVtl1 routine, but with a different operation 
request: Resume thread. This, as the name implies, allows the Secure Kernel to switch to the original 
secure thread and to continue the execution that has been preempted for executing the normal call.
The implementation of enabled normal calls is the same except for the fact that those calls have 
their entries in the normal calls dispatch table, which point directly to the normal call dispatcher 
routine, IumGenericSyscall. In this way, the code will transfer directly to the handler, skipping any 
API implementation code in the Secure Kernel.
Secure system calls
The last type of system calls available in the Secure Kernel is similar to standard system calls provided 
by the NT kernel to VTL 0 user mode software. The secure system calls are used for providing services 
only to the secure processes (trustlets). VTL 0 software can’t emit secure system calls in any way. As 
we will discuss in the “Isolated User Mode” section later in this chapter, every trustlet maps the IUM 
Native Layer Dll (Iumdll.dll) in its address space. Iumdll.dll has the same job as its counterpart in VTL 
0, Ntdll.dll: implement the native syscall stub functions for user mode application. The stub copies the 
syscall number in a register and emits the SYSCALL instruction (the instruction uses different opcodes 
depending on the platform).
Secure system calls numbers always have the twenty-eighth bit set to 1 (on AMD64 architectures, 
whereas ARM64 uses the sixteenth bit). In this way, the global system call dispatcher (KiSystemServiceStart) 
recognizes that the syscall number belongs to a secure system call (and not a normal call) and switches 
to the SkiSecureServiceTable, which represents the secure system calls dispatch table. As in the case of 
normal calls, the global dispatcher verifies that the call number is in the limit, allocates stack space for 
the arguments (if needed), calculates the system call final address, and transfers the code execution to it.
Overall, the code execution remains in VTL 1, but the current privilege level of the virtual processor 
raises from 3 (user mode) to 0 (kernel mode). The dispatch table for secure system calls is compacted—
similarly to the normal calls dispatch table—at phase 0 of the Secure Kernel startup. However, entries in 
this table are all valid and point to functions implemented in the Secure Kernel.
356 
CHAPTER 9 Virtualization technologies
Secure threads and scheduling
As we will describe in the “Isolated User Mode” section, the execution units in VSM are the secure 
threads, which live in the address space described by a secure process. Secure threads can be kernel 
mode or user mode threads. VSM maintains a strict correspondence between each user mode secure 
thread and normal thread living in VTL 0. 
Indeed, the Secure Kernel thread scheduling depends completely on the normal NT kernel; the 
Secure Kernel doesn’t include a proprietary scheduler (by design, the Secure Kernel attack surface 
needs to be small). In Chapter 3 of Part 1, we described how the NT kernel creates a process and the 
relative initial thread. In the section that describes Stage 4, “Creating the initial thread and its stack 
and context,” we explain that a thread creation is performed in two parts:
I 
The executive thread object is created; its kernel and user stack are allocated. The
KeInitThread routine is called for setting up the initial thread context for user mode threads.
KiStartUserThread is the first routine that will be executed in the context of the new thread,
which will lower the thread’s IRQL and call PspUserThreadStartup.
I 
The execution control is then returned to NtCreateUserProcess, which, at a later stage, calls
PspInsertThread to complete the initialization of the thread and insert it into the object man-
ager namespace.
As a part of its work, when PspInsertThread detects that the thread belongs to a secure process, it 
calls VslCreateSecureThread, which, as the name implies, uses the Create Thread secure service call to 
ask to the Secure Kernel to create an associated secure thread. The Secure Kernel verifies the param-
eters and gets the process’s secure image data structure (more details about this later in this chapter). 
It then allocates the secure thread object and its TEB, creates the initial thread context (the first routine 
that will run is SkpUserThreadStartup), and finally makes the thread schedulable. Furthermore, the se-
cure service handler in VTL 1, after marking the thread as ready to run, returns a specific thread cookie, 
which is stored in the ETHREAD data structure.
The new secure thread still starts in VTL 0. As described in the “Stage 7” section of Chapter 3 of 
Part 1, PspUserThreadStartup performs the final initialization of the user thread in the new context. 
In case it determines that the thread’s owning process is a trustlet, PspUserThreadStartup calls the 
VslStartSecureThread function, which invokes the secure calls dispatch loop through the VslpEnterIum 
SecureMode routine in VTL 0 (passing the secure thread cookie returned by the Create Thread secure 
service handler). The first operation that the dispatch loop requests to the Secure Kernel is to resume 
the execution of the secure thread (still through the HvVtlCall hypercall).
The Secure Kernel, before the switch to VTL 0, was executing code in the normal call dispatcher 
loop (SkCallNormalMode). The hypercall executed by the normal kernel restarts the execution in the 
same loop routine. The VTL 1 dispatcher loop recognizes the new thread resume request; it switches 
its execution context to the new secure thread, attaches to its address spaces, and makes it runnable. 
As part of the context switching, a new stack is selected (which has been previously initialized by the 
Create Thread secure call). The latter contains the address of the first secure thread system function, 
SkpUserThreadStartup, which, similarly to the case of normal NT threads, sets up the initial thunk con-
text to run the image-loader initialization routine (LdrInitializeThunk in Ntdll.dll).
CHAPTER 9 Virtualization technologies
357
After it has started, the new secure thread can return to normal mode for two main reasons: it emits 
a normal call, which needs to be processed in VTL 0, or the VINA interrupts preempt the code execu-
tion. Even though the two cases are processed in a slightly different way, they both result in executing 
the normal call dispatcher loop (SkCallNormalMode). 
As previously discussed in Part 1, Chapter 4, “Threads,” the NT scheduler works thanks to the pro-
cessor clock, which generates an interrupt every time the system clock fires (usually every 15.6 mil-
liseconds). The clock interrupt service routine updates the processor times and calculates whether the 
thread quantum expires. The interrupt is targeted to VTL 0, so, when the virtual processor is executing 
code in VTL 1, the hypervisor injects a VINA interrupt to the Secure Kernel, as shown in Figure 9-36. 
The VINA interrupt preempts the current executing code, lowers the IRQL to the previous preempted 
code’s IRQL value, and emits the VINA normal call for entering VTL 0.
VP 0
Thread 80
Normal
Service Call
Deselect Thread 80 and
Marks It as Not Running
VTL return
VINA
VTL 1
VTL 0
VP 3
Schedules a New Thread
(Thread’s Quantum Expired)
DPC or Clock Timer Interrupt
DPC or Clock Timer Interrupt
Another Thread Is Starting
on VP 0
Schedules Thread 80
Code Resumes in the Secure
Call Dispatch Loop
Select Secure Thread 80
Switch to the New Thread Stack
Resume Thread Execution
VTL Call (Resume Thread)
Normal Call
Dispatch Loop
FIGURE 9-36 Secure threads scheduling scheme.
358 
CHAPTER 9 Virtualization technologies
As the standard process of normal call dispatching, before the Secure Kernel emits the HvVtlReturn 
hypercall, it deselects the current execution thread from the virtual processor’s PRCB. This is important: 
The VP in VTL 1 is not tied to any thread context anymore and, on the next loop cycle, the Secure Kernel 
can switch to a different thread or decide to reschedule the execution of the current one.
After the VTL switch, the NT kernel resumes the execution in the secure calls dispatch loop and still 
in the context of the new thread. Before it has any chance to execute any code, the code is preempted 
by the clock interrupt service routine, which can calculate the new quantum value and, if the latter has 
expired, switch the execution of another thread. When a context switch occurs, and another thread 
enters VTL 1, the normal call dispatch loop schedules a different secure thread depending on the value 
of the secure thread cookie:
I 
A secure thread from the secure thread pool if the normal NT kernel has entered VTL 1 for dis-
patching a secure call (in this case, the secure thread cookie is 0).
I 
The newly created secure thread if the thread has been rescheduled for execution (the secure
thread cookie is a valid value). As shown in Figure 9-36, the new thread can be also rescheduled
by another virtual processor (VP 3 in the example).
With the described schema, all the scheduling decisions are performed only in VTL 0. The secure 
call loop and normal call loops cooperate to correctly switch the secure thread context in VTL 1. All the 
secure threads have an associated a thread in the normal kernel. The opposite is not true, though; if a 
normal thread in VTL 0 decides to emit a secure call, the Secure Kernel dispatches the request by using 
an arbitrary thread context from a thread pool.
The Hypervisor Enforced Code Integrity
Hypervisor Enforced Code Integrity (HVCI) is the feature that powers Device Guard and provides the 
W^X (pronounced double-you xor ex) characteristic of the VTL 0 kernel memory. The NT kernel can’t 
map and executes any kind of executable memory in kernel mode without the aid of the Secure Kernel. 
The Secure Kernel allows only proper digitally signed drivers to run in the machine’s kernel. As we dis-
cuss in the next section, the Secure Kernel keeps track of every virtual page allocated in the normal NT 
kernel; memory pages marked as executable in the NT kernel are considered privileged pages. Only the 
Secure Kernel can write to them after the SKCI module has correctly verified their content.
You can read more about HVCI in Chapter 7 of Part 1, in the “Device Guard” and “Credential 
Guard” sections. 
UEFI runtime virtualization
Another service provided by the Secure Kernel (when HVCI is enabled) is the ability to virtualize and 
protect the UEFI runtime services. As we discuss in Chapter 12, the UEFI firmware services are mainly 
implemented by using a big table of function pointers. Part of the table will be deleted from memory 
after the OS takes control and calls the ExitBootServices function, but another part of the table, which 
represents the Runtime services, will remain mapped even after the OS has already taken full control 
of the machine. Indeed, this is necessary because sometimes the OS needs to interact with the UEFI 
configuration and services.
CHAPTER 9 Virtualization technologies
359
Every hardware vendor implements its own UEFI firmware. With HVCI, the firmware should cooper-
ate to provide the nonwritable state of each of its executable memory pages (no firmware page can be 
mapped in VTL 0 with read, write, and execute state). The memory range in which the UEFI firmware 
resides is described by multiple MEMORY_DESCRIPTOR data structures located in the EFI memory map. 
The Windows Loader parses this data with the goal to properly protect the UEFI firmware’s memory. 
Unfortunately, in the original implementation of UEFI, the code and data were stored mixed in a single 
section (or multiple sections) and were described by relative memory descriptors. Furthermore, some 
device drivers read or write configuration data directly from the UEFI’s memory regions. This clearly 
was not compatible with HVCI.
For overcoming this problem, the Secure Kernel employs the following two strategies:
I 
New versions of the UEFI firmware (which adhere to UEFI 2.6 and higher specifications) main-
tain a new configuration table (linked in the boot services table), called memory attribute table
(MAT). The MAT defines fine-grained sections of the UEFI Memory region, which are subsec-
tions of the memory descriptors defined by the EFI memory map. Each section never has both
the executable and writable protection attribute.
I 
For old firmware, the Secure Kernel maps in VTL 0 the entire UEFI firmware region’s physical
memory with a read-only access right.
In the first strategy, at boot time, the Windows Loader merges the information found both in the EFI 
memory map and in the MAT, creating an array of memory descriptors that precisely describe the entire 
firmware region. It then copies them in a reserved buffer located in VTL 1 (used in the hibernation path) 
and verifies that each firmware’s section doesn’t violate the WX assumption. If so, when the Secure 
Kernel starts, it applies a proper SLAT protection for every page that belongs to the underlying UEFI 
firmware region. The physical pages are protected by the SLAT, but their virtual address space in VTL 0 
is still entirely marked as RWX. Keeping the virtual memory’s RWX protection is important because the 
Secure Kernel must support resume-from-hibernation in a scenario where the protection applied in the 
MAT entries can change. Furthermore, this maintains the compatibility with older drivers, which read or 
write directly from the UEFI memory region, assuming that the write is performed in the correct sections. 
(Also, the UEFI code should be able to write in its own memory, which is mapped in VTL 0.) This strategy 
allows the Secure Kernel to avoid mapping any firmware code in VTL 1; the only part of the firmware that 
remains in VTL 1 is the Runtime function table itself. Keeping the table in VTL 1 allows the resume-from-
hibernation code to update the UEFI runtime services’ function pointer directly.
The second strategy is not optimal and is used only for allowing old systems to run with HVCI 
enabled. When the Secure Kernel doesn’t find any MAT in the firmware, it has no choice except to map 