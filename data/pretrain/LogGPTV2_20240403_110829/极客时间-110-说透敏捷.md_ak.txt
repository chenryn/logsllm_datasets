# 08 避雷策略：如何防止你的敏捷变为"小瀑布"？

你好，我是宋宁。在学习这门课程的人中，许多已经开始了敏捷实践。然而，在实践中，不少人不慎陷入了敏捷的反模式。那么，如何判断你的敏捷方法是否正确呢？今天，我想以“小瀑布”这种反模式为例，深入探讨一下。

## 真敏捷还是“小瀑布”？

在我提供敏捷咨询的过程中，经常发现一些团队在实施敏捷时出现以下情况：

1. **模块化迭代**：将大项目分成若干模块，每个模块用四个迭代完成（见下图）。第一个迭代做需求，第二个迭代做设计，第三个迭代做开发，第四个迭代做测试。这种方式虽然比传统的瀑布模式稍好，但整体节奏仍然缓慢，敏捷的效果并不明显。
   ![](https://static001.geekbang.org/resource/image/4f/1a/4f127bb86ab2179e91efb4343405171a.jpg)

2. **快速迭代**：有的团队觉得上述方式太慢，于是加快了节奏。每个迭代周期为两周，但在一个迭代内完成一个大的功能（见下图）。第一周完成需求和设计，第二周完成开发和测试。尽管迭代次数增加，但开发和测试时间总是不够，导致每次迭代都非常紧张，体验不佳。
   ![](https://static001.geekbang.org/resource/image/cd/25/cd35c7cdc35b059488b7a7a16c398a25.jpg)

这些团队感到困惑，不知道自己做得对不对，因此来找我进行诊断。那么，他们的做法究竟有没有问题？

### 分析

从整体来看，这些团队的研发过程仍然是按照“需求 - 设计 - 开发 - 测试”的顺序进行的。这实际上就是瀑布模式的一种变形，我们称之为“小瀑布”。尽管引入了迭代的概念，但本质上并没有改变瀑布模式的核心缺陷，比如浪费时间和资源。

真正的敏捷应该是什么样的呢？以需求为例，团队应尽可能有效地拆分需求，确保进入迭代的需求是多个独立的小需求。每个需求应在短时间内（如2-3天）完成开发和测试，最长不超过一个迭代周期。这样，开发人员写代码时，测试人员可以编写测试案例或考虑自动化测试方案。由于需求足够小，第一个小需求可以在迭代的第二天交付测试，同时开发人员继续开发下一个需求，形成良好的循环。

## 为什么你会把敏捷玩成“小瀑布”？

那么，为什么有些团队会把敏捷变成“小瀑布”呢？通过接触使用“小瀑布”的团队，我发现主要有两个原因：

1. **缺乏对敏捷的理解**：有些团队只了解敏捷的皮毛，没有真正理解其核心原则。例如，M团队面临工作量大、时间紧的问题，他们决定尝试敏捷，但只是简单地套用了别人的流程，忽视了敏捷的规律。

2. **需求过大**：即使知道需要拆分需求，但由于拆分方法不当，需求仍然很大，无法在一个迭代周期内完成。例如，N团队每次拆分后的需求都需要两周才能完成，导致每个迭代只能做一个需求，依然按顺序进行需求分析、设计、开发和测试，浪费了大量等待时间。

## 如何避免把敏捷做成“小瀑布”？

针对上述问题，我提出以下建议：

1. **宣贯敏捷知识**：对于M团队，首先需要进行全面的敏捷知识培训，确保团队成员充分理解敏捷的原则和方法。此外，面对超出产能的工作量，可以根据敏捷原则优先处理高价值的需求，逐步交付产品，而不是盲目追求时间点。

2. **改进需求拆分方法**：对于N团队，需要改进需求拆分的方法，确保每个需求都可以独立开发和测试。如果需求仍然过大，可能需要对系统架构进行优化，降低耦合度，提高可维护性。N团队最终采取了70%的时间用于新需求开发，30%的时间用于架构演进，经过半年的努力，成功实现了敏捷转型。

## 总结

在推进敏捷的过程中，很容易走入反模式。综合M团队和N团队的情况，我们可以看到，如果只是简单套用敏捷流程或没有做好需求拆分，敏捷很容易变成“小瀑布”。此外，角色职责不匹配也可能导致敏捷失败。重要的是，团队需要保持警惕，发现问题后及时分析原因，并灵活运用敏捷原则，制定相应的对策，才能真正发挥敏捷的价值。

## 思考题

你在推进敏捷的过程中有没有犯过什么错误呢？请结合今天的内容，思考一下如何解决这些问题，并在留言区与我讨论。

希望今天的分享对你有所帮助，期待与你进一步交流。