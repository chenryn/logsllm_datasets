adbd to run as root. To modify initrd on any Android device, back up the original boot image with TWRP or dump it
with the following command:
$ adb shell cat /dev/mtd/mtd0 >/mnt/sdcard/boot.img
$ adb pull /mnt/sdcard/boot.img /tmp/boot.img
To extract the contents of the boot image, use the abootimg tool as described in Krzysztof Adamski's how-to :
$ mkdir boot
$ cd boot
$ ../abootimg -x /tmp/boot.img
$ mkdir initrd
$ cd initrd
$ cat ../initrd.img | gunzip | cpio -vid
Note the boot parameters written to bootimg.cfg; you'll need them when booting your new kernel and ramdisk.
$ ~/Desktop/abootimg/boot$ cat bootimg.cfg
bootsize = 0x1600000
295
Tampering and Reverse Engineering on Android
pagesize = 0x800
kerneladdr = 0x8000
ramdiskaddr = 0x2900000
secondaddr = 0xf00000
tagsaddr = 0x2700000
name =
cmdline = console=ttyHSL0,115200,n8 androidboot.hardware=hammerhead user_debug=31 maxcpus=2 msm_watchdog_v2.ena
ble=1
Modify default.prop and package your new ramdisk:
$ cd initrd
$ find . | cpio --create --format='newc' | gzip > ../myinitd.img
Customizing the Android Kernel
The Android kernel is a powerful ally to the reverse engineer. Although regular Android apps are hopelessly restricted
and sandboxed, you, the reverser, can customize and alter the behavior of the operating system and kernel any way
you wish. This gives you an advantage because most integrity checks and anti-tampering features ultimately rely on
services performed by the kernel. Deploying a kernel that abuses this trust and unabashedly lies about itself and the
environment, goes a long way in defeating most reversing defenses that malware authors (or normal developers) can
throw at you.
Android apps have several ways to interact with the OS. Interacting through the Android Application Framework's
APIs is standard. At the lowest level, however, many important functions (such as allocating memory and accessing
files) are translated into old-school Linux system calls. On ARM Linux, system calls are invoked via the SVC
instruction, which triggers a software interrupt. This interrupt calls the vector_swi kernel function, which then uses
the system call number as an offset into a table (known as sys_call_table on Android) of function pointers.
The most straightforward way to intercept system calls is to inject your own code into kernel memory, then overwrite
the original function in the system call table to redirect execution. Unfortunately, current stock Android kernels enforce
memory restrictions that prevent this. Specifically, stock Lollipop and Marshmallow kernels are built with the
CONFIG_STRICT_MEMORY_RWX option enabled. This prevents writing to kernel memory regions marked as read-
only, so any attempt to patch kernel code or the system call table result in a segmentation fault and reboot. To get
around this, build your own kernel. You can then deactivate this protection and make many other useful
customizations that simplify reverse engineering. If you reverse Android apps on a regular basis, building your own
reverse engineering sandbox is a no-brainer.
For hacking, I recommend an AOSP-supported device. Google's Nexus smartphones and tablets are the most logical
candidates because kernels and system components built from the AOSP run on them without issues. Sony's Xperia
series is also known for its openness. To build the AOSP kernel, you need a toolchain (a set of programs for cross-
compiling the sources) and the appropriate version of the kernel sources. Follow Google's instructions to identify the
correct git repo and branch for a given device and Android version.
https://source.android.com/source/building-kernels.html#id-version
For example, to get kernel sources for Lollipop that are compatible with the Nexus 5, you need to clone the msm
repository and check out one of the android-msm-hammerhead branches (hammerhead is the codename of the Nexus 5,
and finding the right branch is confusing). Once you have downloaded the sources, create the default kernel config
with the command make hammerhead_defconfig (replacing "hammerhead" with your target device).
$ git clone https://android.googlesource.com/kernel/msm.git
$ cd msm
$ git checkout origin/android-msm-hammerhead-3.4-lollipop-mr1
$ export ARCH=arm
$ export SUBARCH=arm
$ make hammerhead_defconfig
296
Tampering and Reverse Engineering on Android
$ vim .config
I recommend using the following settings to add loadable module support, enable the most important tracing facilities,
and open kernel memory for patching.
CONFIG_MODULES=Y
CONFIG_STRICT_MEMORY_RWX=N
CONFIG_DEVMEM=Y
CONFIG_DEVKMEM=Y
CONFIG_KALLSYMS=Y
CONFIG_KALLSYMS_ALL=Y
CONFIG_HAVE_KPROBES=Y
CONFIG_HAVE_KRETPROBES=Y
CONFIG_HAVE_FUNCTION_TRACER=Y
CONFIG_HAVE_FUNCTION_GRAPH_TRACER=Y
CONFIG_TRACING=Y
CONFIG_FTRACE=Y
CONFIG KDB=Y
Once you're finished editing save the .config file, build the kernel.
$ export ARCH=arm
$ export SUBARCH=arm
$ export CROSS_COMPILE=/path_to_your_ndk/arm-eabi-4.8/bin/arm-eabi-
$ make
You can now create a standalone toolchain for cross-compiling the kernel and subsequent tasks. To create a
toolchain for Android Nougat, run make-standalone-toolchain.sh from the Android NDK package:
$ cd android-ndk-rXXX
$ build/tools/make-standalone-toolchain.sh --arch=arm --platform=android-24 --install-dir=/tmp/my-android-toolc
hain
Set the CROSS_COMPILE environment variable to point to your NDK directory and run "make" to build the kernel.
$ export CROSS_COMPILE=/tmp/my-android-toolchain/bin/arm-eabi-
$ make
Booting the Custom Environment
Before booting into the new kernel, make a copy of your device's original boot image. Find the boot partition:
root@hammerhead:/dev # ls -al /dev/block/platform/msm_sdcc.1/by-name/
lrwxrwxrwx root root 1970-08-30 22:31 DDR -> /dev/block/mmcblk0p24
lrwxrwxrwx root root 1970-08-30 22:31 aboot -> /dev/block/mmcblk0p6
lrwxrwxrwx root root 1970-08-30 22:31 abootb -> /dev/block/mmcblk0p11
lrwxrwxrwx root root 1970-08-30 22:31 boot -> /dev/block/mmcblk0p19
(...)
lrwxrwxrwx root root 1970-08-30 22:31 userdata -> /dev/block/mmcblk0p28
Then dump the whole thing into a file:
$ adb shell "su -c dd if=/dev/block/mmcblk0p19 of=/data/local/tmp/boot.img"
$ adb pull /data/local/tmp/boot.img
Next, extract the ramdisk and information about the structure of the boot image. There are various tools that can do
this; I used Gilles Grandou's abootimg tool. Install the tool and run the following command on your boot image:
297
Tampering and Reverse Engineering on Android
$ abootimg -x boot.img
This should create the files bootimg.cfg, initrd.img, and zImage (your original kernel) in the local directory.
You can now use fastboot to test the new kernel. The fastboot boot command allows you to run the kernel without
actually flashing it (once you're sure everything works, you can make the changes permanent with fastboot flash, but
you don't have to). Restart the device in fastboot mode with the following command:
$ adb reboot bootloader
Then use the fastboot boot command to boot Android with the new kernel. Specify the kernel offset, ramdisk offset,
tags offset, and command line (use the values listed in your extracted bootimg.cfg) in addition to the newly built kernel
and the original ramdisk.
$ fastboot boot zImage-dtb initrd.img --base 0 --kernel-offset 0x8000 --ramdisk-offset 0x2900000 --tags-offset
0x2700000 -c "console=ttyHSL0,115200,n8 androidboot.hardware=hammerhead user_debug=31 maxcpus=2 msm_watchdog_v2
.enable=1"
The system should now boot normally. To quickly verify that the correct kernel is running, navigate to Settings->About
phone and check the "kernel version" field.
System Call Hooking with Kernel Modules
298
Tampering and Reverse Engineering on Android
System call hooking allows you to attack any anti-reversing defenses that depend on kernel-provided functionality .
With your custom kernel in place, you can now use an LKM to load additional code into the kernel. You also have
access to the /dev/kmem interface, which you can use to patch kernel memory on-the-fly. This is a classic Linux
rootkit technique that has been described for Android by Dong-Hoon You [1].
You first need the address of sys_call_table. Fortunately, it is exported as a symbol in the Android kernel (iOS
reversers aren't so lucky). You can look up the address in the /proc/kallsyms file:
$ adb shell "su -c echo 0 > /proc/sys/kernel/kptr_restrict"
$ adb shell cat /proc/kallsyms | grep sys_call_table
c000f984 T sys_call_table
This is the only memory address you need for writing your kernel module—you can calculate everything else with
offsets taken from the kernel headers (hopefully, you didn't delete them yet).
Example: File Hiding
In this how-to, we will use a Kernel module to hide a file. Create a file on the device so you can hide it later:
$ adb shell "su -c echo ABCD > /data/local/tmp/nowyouseeme"
$ adb shell cat /data/local/tmp/nowyouseeme
ABCD
It's time to write the kernel module. For file-hiding, you'll need to hook one of the system calls used to open (or check
for the existence of) files. There are many of these—open, openat, access, accessat, facessat, stat, fstat, etc. For
now, you'll only hook the openat system call. This is the syscall the /bin/cat program uses when accessing a file, so
the call should be suitable for a demonstration.
299
Tampering and Reverse Engineering on Android
You can find the function prototypes for all system calls in the kernel header file arch/arm/include/asm/unistd.h. Create
a file called kernel_hook.c with the following code:
#include 
#include 
#include 
#include 
#include 
#include 
asmlinkage int (*real_openat)(int, const char __user*, int);
void **sys_call_table;
int new_openat(int dirfd, const char \__user* pathname, int flags)
{
char *kbuf;
size_t len;
kbuf=(char*)kmalloc(256,GFP_KERNEL);
len = strncpy_from_user(kbuf,pathname,255);
if (strcmp(kbuf, "/data/local/tmp/nowyouseeme") == 0) {
printk("Hiding file!\n");
return -ENOENT;
}
kfree(kbuf);
return real_openat(dirfd, pathname, flags);
}
int init_module() {
sys_call_table = (void*)0xc000f984;
real_openat = (void*)(sys_call_table[\__NR_openat]);
return 0;
}
To build the kernel module, you need the kernel sources and a working toolchain. Since you've already built a
complete kernel, you're all set. Create a Makefile with the following content:
KERNEL=[YOUR KERNEL PATH]
TOOLCHAIN=[YOUR TOOLCHAIN PATH]
obj-m := kernel_hook.o
all:
make ARCH=arm CROSS_COMPILE=$(TOOLCHAIN)/bin/arm-eabi- -C $(KERNEL) M=$(shell pwd) CFLAGS_MODULE=-fno-p
ic modules
clean:
make -C $(KERNEL) M=$(shell pwd) clean
Run make to compile the code—this should create the file kernel_hook.ko. Copy kernel_hook.ko to the device and
load it with the insmod command. Using the lsmod command, verify that the module has been loaded successfully.
$ make
(...)
$ adb push kernel_hook.ko /data/local/tmp/
[100%] /data/local/tmp/kernel_hook.ko
$ adb shell su -c insmod /data/local/tmp/kernel_hook.ko
300
Tampering and Reverse Engineering on Android
$ adb shell lsmod
kernel_hook 1160 0 [permanent], Live 0xbf000000 (PO)
Now you'll access /dev/kmem to overwrite the original function pointer in sys_call_table with the address of your newly
injected function (this could have been done directly in the kernel module, but /dev/kmem provides an easy way to
toggle your hooks on and off). I have adapted the code from Dong-Hoon You's Phrack article for this purpose.
However, I used the file interface instead of mmap() because I found that the latter caused kernel panics. Create a file
called kmem_util.c with the following code:
#include 
#include 
#include 
#include 
#include 
#define MAP_SIZE 4096UL
#define MAP_MASK (MAP_SIZE - 1)
int kmem;
void read_kmem2(unsigned char *buf, off_t off, int sz)
{
off_t offset; ssize_t bread;
offset = lseek(kmem, off, SEEK_SET);
bread = read(kmem, buf, sz);
return;
}
void write_kmem2(unsigned char *buf, off_t off, int sz) {
off_t offset; ssize_t written;
offset = lseek(kmem, off, SEEK_SET);
if (written = write(kmem, buf, sz) == -1) { perror("Write error");
exit(0);
}
return;
}
int main(int argc, char *argv[]) {
off_t sys_call_table;
unsigned int addr_ptr, sys_call_number;
if (argc   
The following command patches the openat system call table so that it points to your new function.
$ adb shell su -c /data/local/tmp/kmem_util c000f984 322 bf000000
Original value: c017a390
New value: bf000000
Assuming that everything worked, /bin/cat shouldn't be able to "see" the file.
$ adb shell su -c cat /data/local/tmp/nowyouseeme
tmp-mksh: cat: /data/local/tmp/nowyouseeme: No such file or directory
Voilà! The file "nowyouseeme" is now somewhat hidden from all usermode processes (note that you need to do a lot
more to properly hide a file, including hooking stat(), access(), and other system calls).
File-hiding is of course only the tip of the iceberg: you can accomplish a lot using kernel modules, including bypassing
many root detection measures, integrity checks, and anti-debugging measures. You can find more examples in the
"case studies" section of Bernhard Mueller's Hacking Soft Tokens Paper [#mueller].
References
Bionic - https://github.com/android/platform_bionic
Attacking Android Applications with Debuggers - https://blog.netspi.com/attacking-android-applications-with-
debuggers/
Dynamic Malware Recompilation - http://ieeexplore.ieee.org/document/6759227/
Update on Development of Xposed for Nougat - https://www.xda-developers.com/rovo89-updates-on-the-
situation-regarding-xposed-for-nougat/
Android Platform based Linux kernel rootkit - http://phrack.org/issues/68/6.html
[#mueller] Bernhard Mueller, Hacking Soft Tokens. Advanced Reverse Engineering on Android. -
https://packetstormsecurity.com/files/138504/HITB_Hacking_Soft_Tokens_v1.2.pdf
302