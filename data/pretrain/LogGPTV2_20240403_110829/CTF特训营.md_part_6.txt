客户端输入的input值未经任何过滤便直接输出，所以攻击者可
以提交：
http://example.com/xss.php?input=
在服务端对客户端输入的内容进行解析后，echo语句会将客户
端输入的代码完整地输出到HTTP响应中，浏览器解析并执行，如图
3-1所示。
http://example.com/xss.php?
①example.com/xss.php?input=
GuestBookv1.0
昵称：
内容：
?php
---
## Page 74
CTF特训营：技术详解、解题方法与
3.2常见XSS漏洞分类
74/1144
$conn=mysql_connect("localhost","root","root");
if(!$conn){
die(Could not connect:'.mysql_error();
mysql_select_db("guestbook",Sconn);
if(isset（S_POST[submit])）{
$nickname=$_POsT[nickname];
$content =S_POST[content];
mysql_query(*INSERT INTO guestbook (nickname, content) VALUES (*$
nickname',Scontent')");
$result=mysql_query(SELECT*FROM guestbook");
while($row=mysql_fetch_array(Sresult){
echo$row[nickname].":".Srowcontent].‘
mysq_close($conn);
？>
攻击者提交留言后，服务端存储留言
其他用户访问网页时执行恶意代码，如图3-2所示。
---
## Page 75
CTF特训营：技术详解、解题方法与
3.2常见XSS漏洞分类
75/1144
GuestBook v1.0
?
example.com/guestbook.php
三
InkSec
Android
GitHub
Hack
Linux
OnlineEditor
》
昵称：
内容：
/xss/
提交留言
user1:11111
user2:hahaha
OK
user3:heiheihei
hacker:
Transferringdatafromexample.com..
日
日
口
前
AII
HTML
CSS
JS
XHR
Fonts
Images
MediaFlash
WS
Other
YFil
Sta....
Meth....
File
Domain
Ca...
Type
Tra..
Size
Headers
Cookies
Params
Response
Timings
Preview
Response payload
12
13
user2:hahahauser3:heiheiheihacker:
1.4
图3-2存储型XSS示例
3.DOMXSS
DOMXSS与反射型XSS、存储型XSS的主要区别在于DOMXSS
的XSS代码不需要服务端解析响应的直接参与，触发XSS的是浏览器
端的DOM解析。原型如下：
---
## Page 76
CTF特训营：技术详解、解题方法与
3.2常见XSS漏洞分类
76/1144
DOMxSS
代码中服务端未做任何操作，而客户端的JavaScript代码动态地
将location.hash赋给document.getElementByld（area"）.innerHTML，导
致了这个DOMXSS，使用方法如下：
http://example.com/dom.html##
执行结果如图3-3所示。
---
## Page 77
CTF特训营：技术详解、解题方法与
3.2常见XSS漏洞分类
77/1144
DOM XSS
十
①example.com/dom.html#
Split URL
D
Execute
Enable Post data Enable Referrer
/xss/
OK
Transferring data from example.com.
.
{} S.
@P.
7
十
Q.Search HTML
cdiv
id="area">
金
html
body
div#area
图3-3DOMXSS示例
4.输出在HTML标签中
原型如下：
XSS攻击Payload输出在HTML属性中时，攻击者需要在闭合相应
---
## Page 78
CTF特训营：技术详解、解题方法与
3.2常见XSS漏洞分类
78/1144
的HTML属性后注入新属性，或者在闭合标签后直接注入新标签，如
输入：
"onclick="alert(/xxs/)
闭合前面的value属性，注入新的onclick属性，则会输出：
或输入：
">
直接闭合input标签，注入新的script标签，则会输出：
5.输出在CSS代码中
原型如下：
XSS攻击Payload输出在CSS代码中时，攻击者需要闭合相应的
CSS代码，如输入：
#000;background-image:url(javascript:alert(/xss/))
闭合前面的color属性，注入background-image属性，则会输出：
}
6.输出在Javascript代码中
原型如下：
XSS攻击Payload输出在Javascript代码中时，攻击者需要闭合相
应的Javascript代码，如输入：
---
## Page 80
CTF特训营：技术详解、解题方法与
3.2常见XSS漏洞分类
80/1144
'+alert(/xss/)+
闭合前面的单引号，注入攻击代码，则会输出：
---
## Page 81
CTF特训营：技术详解、解题方法与
3.3防护与绕过
81/1144
3.3防护与绕过
鉴于各网站被挖掘出的XSS漏洞数量之多，开发者对其的重视程
度也随之增大。Web应用层处理xSS漏洞的办法有很多，比如，特定
标签过滤、事件过滤、敏感关键字过滤等，同时浏览器也会对XSS漏
洞的利用进行限制（XSSAuditor、CSP等），本节将对常见的防护技
术进行介绍并提出相应的绕过方案。
1.特定标签过滤
部分开发者认为过滤掉危险标签（如script、iframe等）就会导致
无法执行脚本，但真实任何一种标签，无论是否合法，都可以构造出
XSS代码，比如如下代码：
lick me
这段代码在用户点击时也会执行XSS代码。
如果输出点在HTML标签的属性中或在Javascript代码中，那么攻
击者可以简单地闭合、拼接属性或Javascript代码而不需要引入任何
新标签就可以执行XSS代码。
---
## Page 82
CTF特训营：技术详解、解题方法与
3.3防护与绕过
82/1144
同时，HTML5也带来了部分新标签，容易被开发者忽略，如
video标签：
这里推荐HTML5SecurityCheatsheet:http://html5sec.org/，其中
包含了许多XSS攻击向量以供学习和参考。
2.事件过滤
很多时候，开发者会过滤掉许多HTML标签的事件属性，这时需
要对所有可利用的事件属性进行遍历，测试一下开发者是否有所遗
漏。常用的事件属性如下，测试时可使用Burp或自行编写脚本进行
Fuzz:
onafterprint
oninput
onscroll
onbeforeprint
oninvalid
onabort
onbeforeunload
onreset
oncanplay
onerror
onselect
oncanplaythrough
onhaschange
onsubmit
ondurationchange
onload
onkeydown
onemptied
onmessage
onkeypress
onended
onoffine
onkeyup
onerror
ononline
onclick
onloadeddata
onpagehide
ondblclick
onloadedmetadata
onpageshow
ondrag
onloadstart
onpopstate
ondragend
esneduo
onredo
ondragenter
onplay
onresize
ondragleave
onplaying
---
## Page 83
CTF特训营：技术详解、解题方法与
3.3防护与绕过
83/1144
onstorage
ondragover
onprogress
opunuo
ondragstart
onratechange
onunload
doupuo
onreadystatechange
onblur
onmousedown
onseeked
onchange
onmousemove
onseeking
oncontextmenu
onmouseout
onstalled
onfocus