WMCTF 2021 Nu1L Writeup
WMCTF 2021 Nu1L Writeup
Misc
Checkin
Questionaire
你画我猜
我画你猜
一笔改画
Foolish Black Ai Entrance
LOGO
Plants VS Zombies Version1
car hack
Crypto
checkin
easylsb
ezl1near
PWN
red_high_heels
dy_maze
Nescafe
Reverse
Re1
Re2
Web
ez piwigo
Number
Misc
Checkin
checkin
Questionaire
questionaire
你画我猜
随便画
我画你猜
\反应速度+手速挑战。
可以魔改题目源码，提交后自动切换到下一题，防止鼠标移动和图片加载浪费时间
一笔改画
游戏实现有bug导致可以更换题目，同时因为模型train的比较差，随便加一笔，暴力直到本地正确发给服
务器就好（
function guess(name){
    $.post("./start",{stt:name},function(data){start();});
    clearInterval(tim);
    background(255);
    $("#note").text("下一题");
    $("#define").slideToggle();
}
import requests
import numpy as np
from tensorflow import keras
sess = requests.session()
classes = ["basketball", "umbrella", "violin", "rainbow", "police car", "sheep", 
"t-shirt", "bicycle", "dog", "ice cream"
]
def changeformat(stt):
    b=[]
    for i in stt.split(';')[:-1]:
        #print(i)
        b.append([int(j) for j in i.split(',')])
    return b
DRAW_SIZE = [250, 250]
def parse_line(np_ink):
    #np_ink=np.array(jsline, dtype=np.float32)
    # Preprocessing.
    # 1. Size normalization.
赛后测了下，不用换题的bug，random start+IFGSM也可以做。
Foolish Black Ai Entrance
黑盒不定向攻击。计算每个像素的梯度，做梯度下降，注意clip，防止无穷范数超过限制
    np_ink[:, 0: 2] = np_ink[:, 0: 2] / DRAW_SIZE
    # 2. Compute deltas.
    np_ink[1:, 0:2] -= np_ink[0:-1, 0:2]
    np_ink = np_ink[1:, :]
    np_ink[:, 0: 2] = -np_ink[:, 0: 2]
    return np_ink
url = ""
model = keras.models.load_model('model.h5')
def predictt(basePicture,youPrintPicture):
    pic=parse_line(np.array(basePicture+changeformat(exp),dtype=np.float32))
    ret=model.predict(pic.reshape([1,-1,3]))
    return ret.argmax()
first = 1
while 1:
    chall = sess.get(url).json()
    try:
        pic = eval(chall["pic"])
    except:
        print(sess.post(url, data={'stt':'1'}).text)
        continue
    scores = chall["scores"]
    topic = chall["topic"]
    print(scores, topic)
    exp = 
"427,263,0;427,263,0;427,263,0;427,263,0;427,263,0;427,263,0;427,263,0;427,263,0;4
27,263,1;"
    res = classes[predictt(pic, exp)]
    if res in topic:
        print(sess.post(url, data={'stt':exp}).text)
        print(sess.cookies)
    else:
        print(sess.post(url, data={'stt':'1'}).text)
import requests
import numpy as np
from base64 import b64decode,b64encode
from scipy.optimize import differential_evolution
def getpic(s):
    q=s.get("")
    return np.frombuffer(b64decode(q.content),dtype="float32").reshape(1,28,28,1)
def predit(s,bufa:np.ndarray):
    #buf=buf.reshape(28,28)
    buf=b64encode(bufa.tobytes())
    q=s.post("":str(bufa.shape[0])})
    return np.array(eval(q.content))
def init():
    while True:
        s=requests.session()
        p=getpic(s).copy()
        r=predit(s,p)
        if True or r.argmax()==1:
            return s,p,r.argmax()
s,p,correct=init()
p:np.ndarray
p=p.reshape(28,28)
src=p.copy()
victim=p.copy()
def get_norm(data):
    l0 = len(np.where(np.abs(data) > 0.0)[0]) / data.shape[0]
    l1 = np.mean(np.linalg.norm(data.reshape(data.shape[0], -1), ord=1, axis=1))
    l2 = np.mean(np.linalg.norm(data.reshape(data.shape[0], -1), ord=2, axis=1))
    linf = np.mean(np.linalg.norm(data.reshape(data.shape[0], -1), ord=np.Inf, 
axis=1))
    return l0, l1, l2, linf
def get_l_norm(x_src: np.ndarray, x_input: np.ndarray):
    """
    :param x_src: shape [NUM ; -1 ; -1 ; -1 ]
    :param x_input: shape [NUM ; -1 ; -1 ; -1 ]
    PRINT IMGS AND DIFF
    :return: L0,L2,L_INF
    """
    assert x_src.shape == x_input.shape and x_src.shape.__len__() == 4
    # 计算该变量
    deta = x_src - x_input
    return get_norm(deta)
def loss(x):
    global last
    #l0, l1, l2, linf = get_l_norm(src, x)
    k=predit(s,x)
    res=[]
    for i in range(k.shape[0]):
        res.append(k[i][correct])
    res=np.array(res)
    rv=(last-res)/0.05
    return rv
def grad(dat):
    global last
    last=predit(s,dat.reshape(1,28,28))[0][correct]
    #28*28-> 20*20 [4...25)
LOGO
48;2;r;g;b ascii转义，宽512高256 
因为空格大小2*1，所以实际图片大小应该是256*256，转成图片直接LSB隐写拿到flag
    res=np.zeros((28,28),"float32")
    pack=[]
    pos=[]
    for x in range(4,25):
        for y in range(4,25):
            v=dat.copy()
            v[x][y]+=0.05
            pack.append(v)
            pos.append((x,y))
            if len(pack)==30:
                k=loss(np.array(pack))
                for i in range(30):
                    res[pos[i][0]][pos[i][1]]=k[i]
                pack=[]
                pos=[]
    if len(pack) != 0:
        k = loss(np.array(pack))
        for i in range(len(pack)):
            res[pos[i][0]][pos[i][1]] = k[i]
        pack = []
        pos = []
    return res
def submit(s,bufa:np.ndarray):
    #buf=buf.reshape(28,28)
    buf=b64encode(bufa.tobytes())
    q=s.post("":buf})
    return q.content
def step(lr):
    global victim
    gd=grad(victim)
    inf_mask=(abs(victim-src)<=0.1).astype("float32")
    print(inf_mask.shape,gd.shape)
    gd*=inf_mask
    victim+=gd*lr
    print(get_l_norm(src.reshape(1, 28, 28, 1), victim.reshape(1, 28, 28, 1)))
    fk=predit(s,victim.reshape(1,28,28))[0][correct]
    return fk
for i in range(30):
    res=step(max(100/(i+1),1))
    print(res)
    if res<0.5:
        print(submit(s,victim))
Plants VS Zombies Version1
逆向发现游戏大部分逻辑都是在本地算的，可以修改植物/僵尸属性，或是做到买植物不花钱等。但是拿
到flag需要9999分，打一只特定僵尸只加10分，因此需要继续逆向协议。配合发0xc0更新游戏状态（似乎
是打的僵尸数量），0x76加分即可。
car hack
汽车固件，魔改了v2x，aes解出配置文件即可得到flag
from pwn import *
import fuckpy3
import struct
import time
io = remote('120.27.19.64',12000)
for _ in range(1000):
    payload = 
'c00000003931626535303138333666616538346537626332643433353437353537373537000000000
0000000000000005137313233343536373839303132333400000000000000000000000000000000513
73132333435363738393031323334513731323334353637383930313233348e082a610000000000000
00000000000000000000000000000000000efbeadde'.unhex()
    payload = payload[:28*4] + struct.pack('I',int(time.time())) + payload[29*4:]
    cnt = 0x0000
    payload = payload[:29*4] + struct.pack('I',cnt) + payload[30*4:]
    io.send(payload)
    print(io.recv())
    time.sleep(0.2)
    payload = 
'760000003931626535303138333666616538346537626332643433353437353537373537000000000
0000000000000005137313233343536373839303132333400000000000000000000000000000000513
731323334353637383930313233345137313233343536373839303132333418fd29610000000000000
00000000000000000000000000000000000efbeadde'.unhex()
    payload = payload[:28*4] + struct.pack('I',int(time.time())) + payload[29*4:]
    io.send(payload)
    print(io.recv())
Crypto
checkin
喂点数据找找规律，根据提示发现是knapsack，恢复出pk直接LLL。
from Crypto.Cipher import AES
import fuckpy3
key = '89860918700319839632'.unhex()
key = key.ljust(32,b'\x00')
cipher = AES.new(key, AES.MODE_CBC)
with open('v2x_misc.conf', 'rb') as f:
    content = f.read()
print(cipher.decrypt(content).str())
import requests
from retrying import retry
from Crypto.Util.number import *
from sage.all import *
from tqdm import trange
import re