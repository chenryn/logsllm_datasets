publically documented.
Obtaining BAR files via backup files was possible when the PlayBook was first launched. BlackBerry
subsequently mitigated this vector by encrypting the backups to protect the app data (see previous section on
how to get around this protection) and by not backing up the application binaries at all.
Although not impossible, obtaining access to BAR files is outside the scope of this book due to the risk of piracy.
However, accessing the BAR files that ship (that is, are free) in the stock firmware image by using Sachesi is
possible:
1. Run Sachesi and download the firmware as shown in Figure 14.3.
Alternatively, you can download one of the base image autoloaders
(http://developer.blackberry.com/blackberry10devalpha/allautoloaders.html).
2. Split the downloaded firmware image, as shown in Figure 14.4.
3. Extract the apps, as shown in Figure 14.5.
You can now find a number of BAR files for both the system elements as well as default apps, as shown in
Figure 14.6.
Figure 14.3 Sachesi helps you access BAR files
Figure 14.4 Splitting the firmware image using Sachesi
Figure 14.5 Extracting the application using Sachesi
Figure 14.6 The extracted application
You can then extract these BAR files and analyze their contents.
Looking at Applications
This section walks you through the initial analysis of a couple of apps to give you a feel for the high-level steps
you would follow.
Network Traffic Analysis and Interception
Depending on the approach, employed to perform network traffic analysis and interception you can perform
traffic analysis in a variety of ways with varying degrees of insight and success.
The most comprehensive traffic analysis methods are
Sniffing traffic from the simulator to analyze all unencrypted traffic
Sniffing the local Wi-Fi network to analyze the unencrypted traffic from a real device
Using Mallory in-line to intercept and modify traffic (https://github .com/intrepidusgroup/Mallory)
The somewhat comprehensive traffic methods include
Manually configuring a Wi-Fi proxy setting to force proxy-aware apps via BurpProxy or similar
Using an enterprise configuration to configure a proxy server
Use a proxifier and the simulator to force traffic via an intermediary proxy
Note that on real devices (at least in 10.2), configuring a new arbitrary Certificate Authority for a non-
enterprise–enabled device that is trusted device-wide seems impossible. This inability to trust a new root CA
device-wide results in the inability to succeed at certain SSL/TLS man-in-the-middle attacks where certificate
validation is enforced. However, some apps may still prompt the user to authorize the connection although the
server's certificate can't be trusted, and thus allow analysis. This same limitation with regard to man-in-the-
middle attacks does not exist in the simulator, though.
BAR Archives
In this section you will look at how to extract the relevant parts of the BAR archives.
1. Take the original BAR file, make a copy, and rename it to .zip as shown in Figure 14.7.
2. Extract the zip, and two directories appear, as shown in Figure 14.8.
3. Go into META-INF and open the MANIFEST.MF file, as shown in Figure 14.9.
In this highlighted example you can see:
Architecture target
Development mode
Entry point type
Capabilities (permissions)
Entry point actions
Invocation filter URIs
The invocation filter URIs mechanism is documented extensively within the SDK but in short, it details
the methods via which the app can be invoked and the URIs
(http://developer.blackberry.com/native/documentation/cascades/device_platform/invocation/receiving_invocation.html
4. Go up the directory again to the structure shown in Figure 14.10.
You can then go into the native subdirectory, as shown in Figure 14.11.
5. In the native directory notice the bar-descriptor.xml (http://developer
.blackberry.com/native/documentation/core/com.qnx.doc.native_sdk
.devguide/topic/c_about_bar_app_descriptor_file.html) file, which in this example is fully commented
and used to generate the MANIFEST .MF, as shown in Figure 14.12.
6. libClock.so is a native ELF binary and the entry point for the application. Going into the assets subdirectory
reveals several .QML files because this is a Cascades-based application, as shown in Figure 14.13.
These QML files contain human-readable code that you can easily review, as shown in Figure 14.14.
Figure 14.7 Rename the original BAR file
Figure 14.8 Result of extracting the BAR file
Figure 14.9 Example MANIFEST.MF file
Figure 14.10 BAR root directory
Figure 14.11 Contents of the native directory
Figure 14.12 The bar-descriptor.xml file
Figure 14.13 The Assets subdirectory
Figure 14.14 Example QML file
The assets subdirectory will likely be where you spend most of your time investigating. Other types of things
you may find in this directory include (previously observed in Figure 14.13):
SSL certificate databases—Databases that contain SSL certificates
Custom configuration files—For the application that can contain sensitive information or influence
program execution
ELF Binaries
For analyzing the ELF binaries themselves, you basically use three tools:
IDA Pro—Use this for reverse engineering the native application components.
readelfandobjdumpetc—Cross-compiled; that is, it can run on X86 yet parse ARM7 ELF binaries.
checksec.sh—This is a shell script that uses readelf to verify a number of protection mechanisms and other
possible weaknesses.
The specifics of reversing ELF binaries are beyond this book. Many good references are available that show how
to approach this problem. Suffice it to say these references all generally translate to QNX ELF binaries.
HTML5 and JavaScript
Looking at the MANIFEST.MF for a WebWorks app reveals some useful information, as shown in Figure 14.15.
Figure 14.15 The MANIFEST.MF file for a WebWorks application
Looking at the file referenced as the entry point (app/native/wwe) you see the information shown in Figure
14.16.
Figure 14.16 The entry point for a WebWorks application
You can see the file is just a shell script. The QNX documentation on HTML5 Developer's Guide
(http://support7.qnx.com/download/download/26199/s_Guide.pdf) explains that it causes index.html to be
loaded. This index.html is contained in the BAR's native subdirectory (as shown in Figure 14.17).
Figure 14.17 The BARs native subdirectory
In this particular case if you go into the plugins directory and then the jnext directory, you see the file shown in
Figure 14.18.
Figure 14.18 The jnext directory
What is JNEXT? It stands for JavaScript Native EXTensions, this is a way of adding JavaScript bridges to native
C libraries; the purpose of auth.txt is described as follows:
The set of URLs that are authorized to access JNEXT libraries for a specific browser is defined in a file named
auth.txt.
−http:// www.jnext.org/using.html
In this particular example, these URIs are very lax and would be a security concern.
Beyond what we've just covered it is then a process of auditing the JavaScript, plug-ins, and so on for
vulnerabilities.
Summary
This chapter covered a broad range of topics, enabling you to deepen your analysis of BlackBerry apps. We
reviewed the following concepts:
BlackBerry Legacy security architecture, code signing, and app analysis
BlackBerry 10 concepts
BlackBerry 10 key security aspects
BlackBerry 10 and jailbreaking relevance
BlackBerry 10 Developer mode and the device simulator
Accessing data from BlackBerry 10 devices via encrypted backups
Accessing BAR files
Deconstructing apps and performing an initial analysis
CHAPTER 15
Attacking BlackBerry Applications
In the previous chapter you learned about the underpinnings of BlackBerry applications and how to analyze
them primarily in a static fashion. To be able to put these analysis techniques into practice, you also need to
know about the attack surface of an app. Knowing about the app enables you to choose the correct technique to
employ. Although each app is different in terms of attack surface, several elements are more common than not.
In this chapter we look at each of these attack surface elements and how they might be attacked. In the previous
chapter you looked at some of the BlackBerry 10 app security fundamentals, architectural elements, and base
security analysis techniques for apps, but in this chapter you dig a little deeper by looking at a number of
fundamental concepts for BlackBerry 10 apps and how they can be attacked.
As with apps on any other operating system, whether it’s a full-fledged, general-purpose OS or a proprietary,
hardware-abstracting, real-time OS, the principles of analyzing and attacking apps are the same. Namely, you
want to be able to perform the following tasks:
Identify inputs that traverse trust boundaries over which an attacker has influence or control with the goal of
disrupting, influencing, or changing app execution or behavior.
Intercept secure transport mechanisms with the goal of inspecting or modifying the data protected by it.
Intercept transport mechanisms with the goal of modifying the data.
Extract and/or modify data via an in- or out-of-band mechanism held in an app’s sandbox to understand
what, if any, sensitive data is persisted.
Traversing Trust Boundaries
The trust boundary of a BlackBerry 10 app is in the first instance of the operating system user that the app runs
as. It is a trust because each app is run as a separate user to implement the sandboxing concepts discussed in
the previous chapter. A second trust boundary may then exist in devices that are configured as balance enabled.
Balance devices are configured with a personal half and an organization-controlled half that are separated from
each other via a variety of access control lists at the file and network level coupled with process separation. This
looks like Figure 15.1.
Figure 15.1 Container separation in BlackBerry Balance
In the diagram in Figure 15.1 each app has its own private data sandbox within which to operate, but is also free
from runtime modification of the executable image. The inter-container communication includes another
degree of separation. That is, the interprocess communication mechanisms that would be available between App
1, App 2, and App 3 within their own container are typically disabled or limited in intercontainer situations. A
couple examples of mechanisms that are limited in such a configuration include shared files and the clipboard.
Within QNX and thus BlackBerry 10, the following interprocess communication mechanisms exist, which allow
for trust boundary traversal:
Files—These are persistent file objects held on a traditional file permission that can be secured with
traditional UNIX user and group permissions coupled with extended attributes from POSIX 1e
(http://developer .blackberry.com/native/reference/core/com.qnx.doc.neutrino
.utilities/topic/s/setfacl.html and http://developer.blackberry
.com/native/reference/core/com.qnx.doc.neutrino.utilities/topic/ g/getfacl.html)
Network sockets—Typically, these are TCP or UDP sockets that may be bound to localhost or an external
network interface. No native concept of access control lists exists for these. They are instead typically
implemented by the use of a firewall. Alternatively, the high-level protocol that operates over sockets may
implement its own form of authentication and/or authorization.
UNIX domain sockets—These are different from files and network sockets. Typically they are used where
the overhead of a TCP connection establishment and the ability to communicate off device are not wanted.
Shared memory—This is a primitive in POSIX systems. The concept is that there is named and unnamed
shared memory that may be made available to other processes depending on the umask settings.
PPS objects—These are implemented in the guise of files. However, the underlying implementation is a
resource manager (QNX terminology) that implements that part of the filesystem namespace. They are
bound by the same access control lists that files and directories are.
Channel/message—This is one of the lowest-level IPC (Inter-Process Communication) mechanism
concepts on QNX and upon which many of the higher level aspects are built.
Events—These build on channels and messages to provide an event model.
Typed memory—Typed memory is POSIX functionality defined in the 1003.1 specification. It’s part of the
advanced real-time extensions. You would not normally expect apps to use typed memory for their own
purposes; it is only listed here for completeness.
The native SDK documentation discusses a number of these in detail
(http://developer.blackberry.com/native/documentation/core/com.qnx.doc
.neutrino.sys_arch/topic/ipc.html). Reviewing the utilities that ship with BlackBerry 10 is also a good idea
because a number of them come in handy when you’re investigating apps. You can find a detailed reference on
the BlackBerry developer website
(http://developer.blackberry.com/native/reference/core/com.qnx.doc.neutrino.utilities/topic/about.html
Reviewing the numerous sample apps for which BlackBerry published the source code is also worthwhile
(http://blackberry.github.io/Catalogs/All_Samples.html) because they provide a few examples with
functionality one might consider dubious from a security perspective.
Files
In BlackBerry 10 under the application’s working directory (homePath()) are the following read/write locations:
./data—This is a private data directory for the app that no other app can access. You obtain access to the
contents of this directory by backing up the device and decrypting the backup.
./shared and subdirectories—These are shared files that are accessible to apps with the access_shared
capability.
./tmp—As the name implies, this is a temporary directory that the app and OS may clean up. This is private
to the app itself.
./sharedwith—This is data that is used by the app to share files with other apps via the Invocation
Framework.
With regard to /sharedwith BlackBerry has this to say about the Invocation Framework and file transfer:
When the framework receives an invocation request with a file:// URI, it inspects the URI to determine if
the request refers to a shared area. If the file is already shared, the invocation request passes the URI to the
file in the shared area, as specified by the sender. However, if the invocation framework detects that the file is
not shared, then it creates a read/write copy of the file in a private inbox for the target app.
http://developer.blackberry.com/native/documentation/
cascades/device_platform/invocation/data_transfer.html/
Three vectors for attacking apps via files satisfy our requirement of traversing trust boundaries. Attacking apps
via shared and Sharedwith is trivial. Using the app’s private data directory to attack an app has only been
partially implemented publicly due to the inability to re-encrypt in the commercial tools.
For shared files you should review the files both created and consumed by the target app. However, remember
this attack assumes that the malicious app would have the access_shared capability. When reviewing files that
are created, you are primarily concerned with those that contain sensitive information and shared locations
because this information is useful to a malicious app on the device or to the app’s author.
When assessing the files that are consumed by the target app, you are instead concerned with their contents and
how malformed or otherwise malicious files might influence the program. For example, you might be able to
inject content or script in the case of a WebWorks or a Cascades application, or trigger a denial-of-service or
memory corruption vulnerability in an app that is written in C/C++. For sharedwith files, the attack surface is
similar to when an app consumes files from the shared directory. However, instead of relying on passive
consumption you can invoke an app. (See the “Invocation Framework” section later in this chapter.)
Numerous file browsers are available within BlackBerry World
(http://appworld.blackberry.com/webstore/content/43871/?lang=en&countrycode=GB). They provide the
ability to review what files are in the shared directory, as shown Figure 15.2. Alternatively, you can use SSH
(Secure Shell) access to review the files and their contents.
Figure 15.2 An example file browser application
For files that are held in an app’s private directory, you can recover anything sensitive stored by an attack. For
details on how to do this see the section, “Accessing App Data from a Device” in Chapter 14. Files with contents
that would modify the app’s behavior (whether execution or configuration) are modifiable. However, the ability
to re-encrypt the backups so they can be restored to the device has not publicly been released.
Network Sockets
On BlackBerry 10 it is conceivable that an app might implement a server of some kind via the socket API
(http://developer.blackberry.com/native/documentation/core/com.qnx.doc.neutrino.sys_arch/topic/tcpip_sock
.html). Indeed, BlackBerry provides example code that does this to get around some security restrictions in
WebWorks apps.
This BlackBerry 10 WebWorks extension provides additional APIs supplying an embedded Web Server.
The API gives you the ability to serve files outside the protected application directory.
The reason for writing this API is that you can’t download media from an external server and display it within
a WebWorks application. This API overcomes this limitation allowing access of the Apps data or tmp
directories using a URI like http://localhost:8080/.
https://github.com/blackberry/WebWorks- Community-APIs/tree/master/BB10/mongoose
Identifying sockets that may be of interest is as simple as doing a netstat before and after the application is
invoked to see the new attack surface. You connect to the relevant socket via the socket API already discussed.
In the case of the WebWorks example, which embedded the Mongoose web server, you can actually use the web
browser to demonstrate the vulnerability.
UNIX Domain Sockets
UNIX domain sockets are supported on BlackBerry 10 (http://developer
.blackberry.com/native/reference/core/com.qnx.doc.neutrino.lib_ref/topic/u/unix_proto.html) and are
arguably more secure than network sockets to IPC (Inter-Process Communication) developers. With regards to
security:
Normal filesystem access-control mechanisms are also applied when referencing pathnames (e.g., the
destination of a connect() or sendto() must be writable).
http://developer.blackberry.com/native/reference/core/
com.qnx.doc.neutrino.lib_ref/topic/u/unix_proto.html
To list the UNIX domain sockets on the device you can use netstat -f AF_LOCAL. To attack an app that is using
UNIX domain sockets you must create it in a location that the attacking app has read/write access to. As with
network sockets, you connect the relevant socket via the socket API as previously discussed.
Shared Memory Objects
Shared memory objects are supported on BlackBerry 10. You can find a Cascades example
(http://blackberry.github.io/Qt2Cascades-Samples/docs/ sharedmemory.html) that shows how to use them
in an arguably insecure fashion. This app is split over two BAR files:
SharedMemory App—https://github.com/blackberry/Qt2Cascades-Samples/tree/master/sharedmemory
Shared Memory Loader—https://github.com/blackberry/Qt2Cascades-
Samples/tree/master/sharedmemory_loader
In this example you set the key as follows:
// The key that is used for the shared memory segment
static const char *s_sharedKey = "fileloader_shm_key";
This allows the client to access the server by using this name. The underlying API is shm_open:
The permission bits for the memory object are set to the value of mode, except those bits set in the process’s
file creation mask.
http://developer.blackberry.com/native/reference/core/
com.qnx.doc.neutrino.lib_ref/topic/s/shm_open.html