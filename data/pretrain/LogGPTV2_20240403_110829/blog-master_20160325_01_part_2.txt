export PATH=/home/digoal/pgsql9.5.0/bin:$PATH    
make USE_PGXS=1    
make USE_PGXS=1 install    
```    
将redis_fdw部署到需要访问redis的PostgreSQL数据库中      
```    
cd ~    
$ psql    
psql (9.5.0)    
Type "help" for help.    
postgres=# create extension redis_fdw;    
CREATE EXTENSION    
```    
测试redis_fdw的用法，创建server，创建foreign table。      
通过SQL可以写入和读取redis中的数据。      
```    
postgres=# CREATE SERVER redis_server    
postgres-#     FOREIGN DATA WRAPPER redis_fdw    
postgres-#     OPTIONS (address '127.0.0.1', port '6379');    
CREATE SERVER    
postgres=# CREATE FOREIGN TABLE redis_db0 (key text, val text)    
postgres-#     SERVER redis_server    
postgres-#     OPTIONS (database '0');    
CREATE FOREIGN TABLE    
postgres=#     
postgres=# CREATE USER MAPPING FOR PUBLIC    
postgres-#     SERVER redis_server    
postgres-#     OPTIONS (password 'digoal');    
CREATE USER MAPPING    
postgres=# CREATE FOREIGN TABLE myredishash (key text, val text[])    
postgres-#     SERVER redis_server    
postgres-#     OPTIONS (database '0', tabletype 'hash', tablekeyprefix 'mytable:');    
CREATE FOREIGN TABLE    
postgres=# INSERT INTO myredishash (key, val)    
   VALUES ('mytable:r1','{prop1,val1,prop2,val2}');    
INSERT 0 1    
postgres=# UPDATE myredishash    
postgres-#     SET val = '{prop3,val3,prop4,val4}'    
postgres-#     WHERE key = 'mytable:r1';    
UPDATE 1    
postgres=# select * from myredishash ;    
    key     |           val               
------------+-------------------------    
 mytable:r1 | {prop3,val3,prop4,val4}    
(1 row)    
postgres=# select * from myredishash ;    
    key     |           val               
------------+-------------------------    
 mytable:r1 | {prop3,val3,prop4,val4}    
(1 row)    
postgres=# DELETE from myredishash    
postgres-#     WHERE key = 'mytable:r1';    
DELETE 1    
postgres=# select * from myredishash ;    
 key | val     
-----+-----    
(0 rows)    
postgres=# CREATE FOREIGN TABLE myredis_s_hash (key text, val text)    
postgres-#     SERVER redis_server    
postgres-#     OPTIONS (database '0', tabletype 'hash',  singleton_key 'mytable');    
CREATE FOREIGN TABLE    
postgres=# INSERT INTO myredis_s_hash (key, val)    
postgres-#    VALUES ('prop1','val1'),('prop2','val2');    
INSERT 0 2    
postgres=# select * from myredis_s_hash ;    
  key  | val      
-------+------    
 prop1 | val1    
 prop2 | val2    
(2 rows)    
postgres=# UPDATE myredis_s_hash    
postgres-#     SET val = 'val23'    
postgres-#     WHERE key = 'prop1';    
UPDATE 1    
postgres=# select * from myredis_s_hash ;    
  key  |  val      
-------+-------    
 prop1 | val23    
 prop2 | val2    
(2 rows)    
postgres=# DELETE from myredis_s_hash    
postgres-#     WHERE key = 'prop2';    
DELETE 1    
postgres=# \set VERBOSITY verbose    
postgres=# INSERT INTO myredis_s_hash (key, val)    
   VALUES ('prop1','val1'),('prop2','val2');    
ERROR:  23505: key already exists: prop1    
LOCATION:  redisExecForeignInsert, redis_fdw.c:2158    
postgres=# select * from myredis_s_hash ;           
  key  |  val      
-------+-------    
 prop1 | val23    
(1 row)    
```    
redis_fdw详细的用法介绍      
1\. CREATE SERVER 支持的 option      
指定地址和端口      
```    
address: The address or hostname of the Redis server. Default: 127.0.0.1    
port: The port number on which the Redis server is listening. Default: 6379    
```    
2\. CREATE USER MAPPING 支持的 option      
指定密码      
```    
password: The password to authenticate to the Redis server with. Default:    
```    
3\. CREATE FOREIGN TABLE 支持的 option      
指定数据库ID       
表类型(hash,list,set,zset或scalar)       
key 前缀  key 集合  singleton_key 指定KEY  （三选一）      
```    
database: The numeric ID of the Redis database to query. Default: 0    
(9.2 and later) tabletype: can be 'hash', 'list', 'set' or 'zset' Default: none, meaning only look at scalar values.    
(9.2 and later) tablekeyprefix: only get items whose names start with the prefix Default: none    
(9.2 and later) tablekeyset: fetch item names from the named set Default: none    
(9.2 and later) singleton_key: get all the values in the table from a single named object. Default: none, meaning don't just use a single object.    
You can only have one of tablekeyset and tablekeyprefix, and if you use singleton_key you can't have either.    
Structured items are returned as array text, or, if the value column is a text array as an array of values.     
In the case of hash objects this array is an array of key, value, key, value ...    
Singleton key tables are returned as rows with a single column of text in the case of lists sets and scalars, rows with key and value text columns for hashes, and rows with a value text columns and an optional numeric score column for zsets.    
```    
限制    
1\. There's no such thing as a cursor in Redis, or MVCC, which leaves us with no way to atomically query the database for the available keys and then fetch each value.     
So, we get a list of keys to begin with, and then fetch whatever records still exist as we build the tuples.    
如果不带条件的查询，或者创建foreign table时没有指定单一KEY，则需要返回集合      
redis_fdw/redis_fdw.c      
```    
/* initial cursor */    
#define ZERO "0"    
/* redis default is 10 - let's fetch 1000 at a time */    
#define COUNT " COUNT 1000"    
/*    
 * redisBeginForeignScan    
 *		Initiate access to the database    
 */    
static void    
redisBeginForeignScan(ForeignScanState *node, int eflags)    
{    
...    
	/* Execute the query */    
	if (festate->singleton_key)    
	{    
		/*    
		 * We're not using cursors for now for singleton key tables. The    
		 * theory is that we don't expect them to be so large in normal use    
		 * that we would get any significant benefit from doing so, and in any    
		 * case scanning them in a single step is not going to tie things up    
		 * like scannoing the whole Redis database could.    
		 */    
	...    
	}    
	else if (qual_value && pushdown)    
	{    
		/*    
		 * if we have a qual, make sure it's a member of the keyset or has the    
		 * right prefix if either of these options is specified.    
		 *    
		 * If not set row to -1 to indicate failure    
		 */    
         ...    
	else    
	{    
		/* no qual - do a cursor scan */    
		if (festate->keyset)    
		{    
			festate->cursor_search_string = "SSCAN %s %s" COUNT;    
			reply = redisCommand(context, festate->cursor_search_string,    
								 festate->keyset, ZERO);    
		}    
		else if (festate->keyprefix)    
		{    
			festate->cursor_search_string = "SCAN %s MATCH %s*" COUNT;    
			reply = redisCommand(context, festate->cursor_search_string,    
								 ZERO, festate->keyprefix);    
		}    
		else    
		{    
			festate->cursor_search_string = "SCAN %s" COUNT;    
			reply = redisCommand(context, festate->cursor_search_string, ZERO);    
		}    
	}    
...    
```    
2\. We can only push down a single qual to Redis, which must use the TEXTEQ operator, and must be on the 'key' column.    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")