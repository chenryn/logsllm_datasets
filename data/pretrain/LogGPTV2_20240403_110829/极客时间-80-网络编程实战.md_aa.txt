# 80-网络编程实战
# 开篇词 \| 学好网络编程，需要掌握哪些核心问题？你好，我是盛延敏，欢迎你的加入。在接下来的几个月时间里，我会和你一起深入学习网络编程。网络编程是一个高度重视实战的内容模块，工作这么多年，我一直都在近距离与它打交道。我博士毕业于中科大，毕业之后就加入了 IBM，在 IBM 从事 WebSphere应用服务器、PaaS 平台 Bluemix等系统的开发工作，后来又在大众点评担任云平台首席架构师，推动了以 Docker为核心的私有云的建设和落地。现在我在蚂蚁金服专注于云计算的架构和开发等方面的事情。正是这些工作经历让我对网络编程有了更为深入的理解。2000 年初，我就开始使用网络编程框架 ACE、CORBA等技术从事电信网管系统的开发，后来又开始接触ICE，写分布式控制系统，再之后转向 Java，使用 JDK 从事 Web Service和应用服务器的网络开发和研究，使用 Netty 从事 Java高性能网络编程的开发。作为一个网络程序设计和开发的老兵，我目前继续在云计算领域深度耕耘，更是少不了和各种网络设计和开发打交道。得益于这么多年的深耕，在工作过程中，我也接触了不少同学，面试过很多候选人，令我惊讶的是，很多工作很久的同学对网络协议和网络编程一知半解，仅仅停留在一个很粗浅的水平。``{=html}事实上，无论是在面试中，还是在工作中，掌握网络编程领域的知识都是一个非常重要的基本功。这在互联网蓬勃发展的今天，更是如此。如果我问你一些关于网络编程方面的问题，你会怎样回答呢？-   大家经常说的四层、七层，分别指的是什么？-   TCP 三次握手是什么，TIME_WAIT 是怎么发生的？CLOSE_WAIT    又是什么状态？-   Linux 下的 epoll 解决的是什么问题？如何使用 epoll    写出高性能的网络程序？-   什么是网络事件驱动模型？Reactor 模式又是什么？这些问题看似简单，但想做到完全理解可并不容易。很多人可能停留在"是这样"的状态，对于"为什么"缺乏深入和了解。我在学网络编程的时候，也面临着这种窘境。我发现很多情况下，我们都希望尽可能详尽地学习网络编程，面面俱到，但奈何头绪太多，对于初学者来说很容易深陷其中，钻牛角尖，也就难以去理清脉络了。这样导致的后果就是过分关注知识点本身，片面地斩断了它们与实际工作的联系。比如流量控制和拥塞控制这一部分的内容。我记得我在学这部分知识的时候，纯粹是把这些当做考试的知识点来学习，很难将书本的知识和实际经验，尤其是和代码结合起来进行理解。为什么会有这些算法，它们究竟解决了哪些问题？这些问题搞不懂，看似无伤大雅，其实已经或多或少地和实际工作产生了断层。流量控制和拥塞控制只是网络编程一小部分的内容，进程、线程、多路复用、异步I/O 这些概念一摆出来，又会让人一头雾水。从哪里学？怎么学？很多人在理论部分折了戟，干脆跑向了另一个极端，转而去学习框架，快速上手。事实上，理论是基石，框架则是站在一个更为抽象的角度来看待网络编程问题。框架的产生或是为了实现跨平台支持，例如JDK，或是为了屏蔽网络编程的细节，让开发更为方便，例如 libevent。没有理论为底，框架也只是空中楼阁。直接学习框架反而会更加摸不着头脑，对网络编程也很难有实打实的收获。那么你可能会问，理论学不懂，框架又不行，到底应该怎么学？事实上，我认为学习高性能网络编程，掌握两个核心要点就可以了：**第一就是理解网络协议，并在这个基础上和操作系统内核配合，感知各种网络I/O事件；第二就是学会使用线程处理并发**。抓住这两个核心问题，也就抓住了高性能网络编程的"七寸"。我会从实践出发，单刀直入地展开，从问题的角度对这些看似枯燥的知识点进行阐述。我会跟你一起在专栏里研究某个理论或者算法，看看它提出来的目的到底是什么，又解决了哪些问题。我还会和代码进行关联，和实验进行关联，循序渐进地引出这个理论或者算法的实际意义。我会从最简单的网络套接字开始，一步步带你写出健硕的高性能网络程序。在这个过程里，我会尽我所能，将自己在这个领域中多年的体会和专栏内容融为一体，帮助你理解协议、API和代码。在专栏里，我们会重点展开对 Linux 网络编程的学习。原因也很简单，目前Linux 系统已成为互联网数据中心的标配，再加上基于 Linux 的移动开发平台Android 的迅速崛起，Linux的重要性愈发明显。对有志于学习网络编程的你来说，这是一个非常明智的选择。我在下面放了一张专栏的目录，专栏将分别从基础篇、提升篇、性能篇和实战篇展开。![](Images/7bc4debd29b3665fed87ba302cde8dff.png){savepage-src="https://static001.geekbang.org/resource/image/d9/b4/d9868ff93c308befe7bb3f06cfc828b4.jpg"}在我看来，要学好网络编程，需要达到以下三个层次。**第一个层次，充分理解 TCP/IP网络模型和协议**。在这方面，仅仅做到理论上的理解是远远不够的。在**基础篇**中我们会梳理TCP/IP模型和网络函数接口之间的联系，并通过实例展开对套接字，套接字缓冲区，拥塞控制，数据包和数据流，本地套接字（UNIX域套接字）等的讨论，给你一个全面而具体的知识体系。**第二个层次，结合对协议的理解，增强对各种异常情况的优雅处理能力**。比如对TCP 数据流的处理，半关闭的连接，TCP连接有效性的侦测，处理各种异常情况等，这些问题决定了程序的健壮性。有关这一部分的内容，我们将在**提升篇**详细展开。**第三个层次，写出可以支持大规模高并发的网络处理程序**。在这个阶段，我将带你一起深入研究C10K问题，引入进程、线程、多路复用、非阻塞、异步、事件驱动等现代高性能网络编程所需要的技术。我们将在**性能篇**深入讨论这些技术，并在**实战篇**结合实例，一步步教你写出高性能的网络程序。"不闻不若闻之，闻之不若见之，见之不若知之，知之不若行之。"几千年前荀子的这段话，告诉了我们学习计算机编程技术的最佳方法，我想用在这里再合适不过了。所以，无论是哪个层次，都需要你和我一起坚持下去。你可以对专栏里的代码进行修改和调试，从而增强你对网络编程的理解。最后，请你留言说一说自己的情况。你在什么岗位？工作几年啦？在日常工作中是怎么使用网络编程的？开张圣听，期待跟你碰撞出更多精彩想法。感谢你对我的信任，我一定会竭尽所能，助你成功。让我们一起进步。![](Images/5a282807b2a1ff091b7f803e8cef3429.png){savepage-src="https://static001.geekbang.org/resource/image/bf/25/bfc96ae0d8f839919b9d9866cfb8b025.jpg"}
# 01 \| 追古溯源：TCP/IP和Linux是如何改变世界的？你好，我是盛延敏。今天是网络编程课程的第一课，我想你一定满怀热情，期望快速进入到技术细节里，了解那些你不熟知的编程技能。而今天我却想和你讲讲历史，虽然这些事情看着不是"干货"，但它可以帮助你理解网络编程中各种技术的来龙去脉。你我都是程序员，说句实在话，我们正处于一个属于我们的时代里，我们也正在第一线享受着这个时代的红利。在我看来，人类历史上还从来没有一项技术可以像互联网一样深刻地影响人们生活的方方面面。而具体到互联网技术里，有两件事最为重要，一个是 TCP/IP协议，它是万物互联的事实标准；另一个是 Linux操作系统，它是推动互联网技术走向繁荣的基石。今天，我就带你穿越时间的走廊，看一看 TCP/IP 事实标准和 Linux操作系统是如何一步一步发展到今天的。
## TCP 发展历史一般来说，我们认为互联网起源于阿帕网（ARPANET）。最早的阿帕网还是非常简陋的，网络控制协议（Network Control Protocol，缩写NCP）是阿帕网中连接不同计算机的通信协议。在构建阿帕网（ARPANET）之后，其他数据传输技术的研究又被摆上案头。NCP诞生两年后，NCP 的开发者温特·瑟夫（Vinton Cerf）和罗伯特·卡恩（Robert E.Kahn）一起开发了一个阿帕网的下一代协议，并在 1974年发表了以分组、序列化、流量控制、超时和容错等为核心的一种新型的网络互联协议，一举奠定了TCP/IP 协议的基础。``{=html}
### OSI & TCP/IP在这之后，TCP/IP 逐渐发展。咱们话分两头说，一头是一个叫 ISO的组织发现计算机设备的互联互通是一个值得研究的新领域，于是，这个组织出面和众多厂商游说，"我们一起定义，出一个网络互联互通的标准吧，这样大家都遵守这个标准，一起把这件事情做大，大家就有钱赚了"。众多厂商觉得可以啊，于是ISO组织就召集了一帮人，认真研究起了网络互联这件事情，还真的搞出来一个非常强悍的标准，这就是OSI 参考模型。这里我不详细介绍 OSI参考模型了，你可以阅读[罗剑锋老师的专栏](https://time.geekbang.org/column/article/99286)，他讲得很好。这个标准发布的时候已经是 1984 年了，有点尴尬的是，OSI搞得是很好，大家也都很满意，不过，等它发布的时候，ISO组织却惊讶地发现满世界都在用一个叫做 TCP/IP 协议栈的东西，而且，跟 OSI标准半毛钱关系都没有。这就涉及到了另一头------TCP/IP 的发展。事实上，我在前面提到的那两位牛人卡恩和瑟夫，一直都在不遗余力地推广TCP/IP。当然，TCP/IP 的成功也不是偶然的，而是综合了几个因素后的结果：1.  TCP/IP 是免费或者是少量收费的，这样就扩大了使用人群；2.  TCP/IP 搭上了 UNIX    这辆时代快车，很快推出了基于套接字（socket）的实际编程接口；3.  这是最重要的一点，TCP/IP    来源于实际需求，大家都在翘首盼望出一个统一标准，可是在此之前实际的问题总要解决啊，TCP/IP    解决了实际问题，并且在实际中不断完善。回过来看，OSI的七层模型定得过于复杂，并且没有参考实现，在一定程度上阻碍了普及。不过，OSI 教科书般的层次模型，对后世的影响很深远，一般我们说的 4 层、7层，也是遵从了 OSI 模型的定义，分别指代传输层和应用层。我们说 TCP/IP 的应用层对应了 OSI 的应用层、表示层和会话层；TCP/IP的网络接口层对应了 OSI 的数据链路层和物理层。![](Images/d9b727e3dd0c0b4f44b29a63f17f0261.png){savepage-src="https://static001.geekbang.org/resource/image/cb/b4/cb34e0e3b7769498ea703fe6231201b4.png"}
## UNIX 操作系统发展历史前面我们提到了 TCP/IP 协议的成功，离不开 UNIX操作系统的发展。接下来我们就看下 UNIX 操作系统是如何诞生和演变的。下面这张图摘自[维基百科](https://en.wikipedia.org/wiki/File:Unix_timeline.en.svg)，它将Unix 操作系统几十年的发展历史表述得非常清楚。![](Images/8952471d8c74502a4aa01f862716173f.png){savepage-src="https://static001.geekbang.org/resource/image/a6/0f/a68c3b9b267574ea2f309ed6a4e0de0f.png"}\UNIX 的各种版本和变体都起源于在 PDP-11 系统上运行的 UNIX 分时系统第 6版（1976 年）和第 7 版（1979 年），它们通常分别被称为 V6 和V7。这两个版本是在贝尔实验室以外首先得到广泛应用的 UNIX 系统。这张图画得比较概括，我们主要从这张图上看 3 个分支：-   图上标示的 Research 橘黄色部分，是由 AT&T 贝尔实验室不断开发的 UNIX    研究版本，从此引出 UNIX 分时系统第 8 版、第 9 版，终止于 1990 年的第    10    版（10.5）。这个版本可以说是操作系统界的少林派。天下武功皆出少林，世上    UNIX 皆出自贝尔实验室。-   图中最上面所标识的操作系统版本，是加州大学伯克利分校（BSD）研究出的分支，从此引出    4.xBSD 实现，以及后面的各种 BSD    版本。这个可以看做是学院派。在历史上，学院派有力地推动了 UNIX    的发展，包括我们后面会谈到的 socket 套接字都是出自此派。-   图中最下面的那一个部分，是从 AT&T 分支的商业派，致力于从 UNIX    系统中谋取商业利润。从此引出了 System III 和 System V（被称为 UNIX    的商用版本），还有各大公司的 UNIX 商业版。下面这张图也是源自维基百科，将 UNIX 的历史表达得更为详细。![](Images/940a3e8e5032f04876f9fe5af41135f5.png){savepage-src="https://static001.geekbang.org/resource/image/df/bb/df2b6d77a0a46e3d9b068f6d517a15bb.png"}\一个基本事实是，网络编程套接字接口，最早是在 BSD 4.2引入的，这个时间大概是 1983 年，几经演变后，成为了事实标准，包括 SystemIII/V 分支也吸收了这部分能力，在上面这张大图上也可以看出来。其实这张图也说明了一个很有意思的现象，BSD 分支、System III/System V分支、正统的 UNIX分时系统分支都是互相借鉴的，也可以说是互相"抄袭"吧。但如果这样发展下去，互相不买对方的账，导致上层的应用程序在不同的UNIX版本间不能很好地兼容，这该怎么办？这里先留一个疑问，你也可以先想一想，稍后我会给你解答。下面我再介绍几个你耳熟能详的重要 UNIX 玩家。