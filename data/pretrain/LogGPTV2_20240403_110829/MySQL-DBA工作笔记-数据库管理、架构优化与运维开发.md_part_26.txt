文本类型
图4-16
文本类型
mtext
第4章SQL开发规范和基础”139
---
## Page 162
140丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
这种字符集。
tyoes 1
/2=32766.5，所以此处就是32766了。
超过了这个长度，那就会有溢出的情况，这和 Oracle 的 overflow 很类似。
存储值的长度，而 MySQL 里面的页的单位是16k，使用了IOT的方式来存储。所以如果
可以指定为32766字节，再长一些就不行了。
到底和数据类型的关系有多大呢，我们来看一个小的案例。
型数据库（包括MySQL）不擅长的，甚至你可以忽视这些类型。
型的学习要点是不要过多的使用这些文本类型，因为它们本不属于关系型数据，是关系
的是varchar 类型，在个别场景下可能会有 text 类型的使用场景，除此之外对于字符串类
而另外一种字符集，
ERROR 1118(42000):
所以对于gbk类型,行长度最大为65535,则varchar 列的最大长度算法就是（65535-2)
其中的计算方式就需要理解了，因为 varhcar 类型长度大于 255，所以需要2个字节
V
比如我们创建一个表使用了varchar 的类型，如果指定为 gbk，表里含有一个字段，
从上图我们可以看到字符串类型是很丰富的，如下表4-3所示。但是实际上我更推荐
create table test_char(v varchar(32766))
而字符集和数据类型结合起来，就引出一个蛮有意思的细节，那就是行长度的问题
在 MySQL的表结构设计中，有两个点需要注意，
案例4-3：MySQL中需要注意的字段长度
在此，我们可以回顾一下，介绍了数值类型和字符类型，
not counting BLOBs, is 65535. You have
MEDIUMTEXT
LOGNGBLOB
MEDIUMBLOB
LONGTEXT
TINYTEXT
TINYBLOB
VARCHAR
TEXT
BLOB
CHAR
tabl
类型
cest
，也是默认的字符集 latinl，有些支持火星文的系统还是会喜欢用
0-4 294 967295字节
0-4 294 967295字节
0-16 777215字节
0-16777215字节
0-65535字节
0-65535字节
0-255字节
0-255字节
0-255字节
0-255字节
大小
表4-3
（32767))
The
e maximum row size for the used table
charset=gbk;
一个是字符集，另一个就是数据类
不超过255个字符的二进制字符串
charset=gbk;
二进制形式的中等长度文本数据
D
进制形式的极大文本数据
二进制形式的长文本数据
中等长度文本数据
极大文本数据
长文本数据
短文本字符串
一个表里的字段长度设置
变长字符串
定长字符串
用途
---
## Page 163
会有很大的限制。
table type,not counting BLoBs,
有字符型的长度小于255，所以减去1即可，这样下来就是（65535-1-4-20*2-2）约等于32743。
最大值就是21844了。
type，not counting BLoBs，
大长度就是65532了。
> create table test_char3(id int,name varchar(20),memo varchar(32744))
ERROR 1118 (42000): Row size too large. The maximum row size:
如果是 gbk 字符集，含有下面的几个字段，则 memo 字段的 varchar 类型最大长度是多少？
> create table test_char2(v varchar(21844))
而对于utf8还是有很大的差别，对应的是3个字节，所以需要除以3，按照（65535-2）/3，
ERROR1118(42000):
整个过程还是需要考虑到这些点的，否则前期不够重视，在后面去做扩展的时候就
Query OK,
两种测试结果可以简单对比一下。
如法炮制，这个问题还是应用之前的计算方式，数值型是4个字节，字符型乘以2，含
> create table test_char1(v varchar(32767)) charset=latinl;
select
上面的场景相对来说会有一些局限性，那么我们引入表结构的设计。
它的长度就不一样了，对应是1字节，所以varchar(32767)是没有任何问题的，而最
row in set (0.o0 sec)
32744.0000
(65535-1-4-20*2-2)/2
create
create
0rows affected (0.01 sec)
table
table
is 65535.
size too
(0.01 sec)
varchar(21845))
The maximum row size for the used
charset=utf8;
charset=utf8;
第4章SQL开发规范和基础|141
TEXT or BLOBs
charset=gbk;
charset=gbk;
TEXT or BLOBs
TEXT or BLOBS
TEXT or BLOB
charset=gbk;
the
usec
---
## Page 164
142|MySQLDBA工作笔记：数据库管理、架构优化与运维开发
说 timestamp 支持的时间范围要窄一些。范围为：1970-01-01 08:00:01到 2038-01-19
timestamp 的存储占用空间不同，datetime占用8个字节，timestamp 占用4个字节，所以
current
datetime 和 timestamp。
基础通话功能，它们的差别主要在精度和存储长度上。
4.2.4
TIMESTAMP
DATETIME
YEAR
TIME
DATE
mysql>
mysql>
mysql> create table test(datel datetime,date2 timestamp,date3 date);
我们创建一张表来模拟一下，然后插入一条数据。
对于日期类型，我们该如何选用呢，首先我们需要区分一下常见的三个类型：date、
MySQL目前支持如下图4-18所示的5个日期类型
MySQL的日期类型比较丰富，就好比是手机，有的可支持高配摄像头，有的只支持
可以看到 datetime 和 timestamp 其实是精确到秒，date 是精确到日。datetime 和
类型
日期类型的长度、范围和格式如下表4-4所示。
2019-02-23 00:00:00 | 2019-02-23 23:21:35 1 2019-02-23
datel
MySQL 日期类型
date);
select *from test;
insert
（字节)
大小
间 2038-1-19 11:14:07
结束时间是第2147483647秒，北京时
1970-01-0100:00:00/2038
9999-12-31 23:59:59
1000-01-01 00:00:00/
1901/2155
-838:59:59/838:59:59
1000-01-01/9999-12-31
into
date2
类型
time
test
范
表4-4
图4-18
类型
类型
日期
datetime
类型
date3
HH:MM:SS
YYYY-MM-DD
HH:MM:SS
YYYY-MM-DD
YYYY
HH:MM:SS
YYYY-MM-DD
格式
timestamp
类型
时间戳
混合日期和时间值，
混合日期和时间值
年份值
时间值或持续时间
+
日期值
用途
---
## Page 165
这样的字段设置。
怕我们改下需求，支持基于 timestamp 类型的动态默认值，下面的 SQL 语句也会抛出问题。
上不存在额外的特性，就是 timestamp 的一个限制，在 5.5，5.7版都不支持 default null。哪
定改写为 timestamp 类型。
5.5版）中提交了一条SQL语句期望创建几张表，
实际使用可以有一个清晰地认识。
9999-12-31 23:59:59。
11:14:07；而datetime支持的时间范围则要大很多。范围为：1000-01-01:00:00:00～
可以很清晰地看到，timestamp 可以支持动态默认值，但是不支持一个表中存在两个
明确了精度和存储大小之后，下面我们来看一个案例，对于 datetime 和 timestamp 的
和开发同学聊了下，感觉其需求和 MySQL 支持的情况有些纠结。
于是我看到另外一张表的建表SQL语句，如下：
而按照目前能够支持的情况，因为是基于版本5.5，所以简单的总结如下:
（1）时间类型，统一成一种类型。
显然在 MySQL 5.5 版里面，timestamp 类型是不支持 default null这种方式的。在这一点
create table test2(
根据 MySQL 5.5 版的特性，datetime 还不支持动态默认值。所以他们斟酌再三，决
create_time’ datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT ‘创建
create table test(
其中一张表的建表SQL语句类似于下面：
某天在处理一个业务的时候，碰到开发同学提交的一个需求。他在线上环境（MySQL
开发同学的需求：
KXXXX
案例4-4：MySQL多版本的时间类型问题
（2）有些字段允许默认为当前时间；有些字段默认为空。
KXXXX
`modify_time′timestamp DEFAULT current_timestamp COMMENT修改时间',
create_time′timestamp DEFAULT NULL COMMENT‘创建时间',
create_time`
id
int(11)
timeStamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT
CURRENT TIMESTAMP
in DEFAULT
，但是抛出了错误。
第4章SQL开发规范和基础|143
创建时间！，
时间！
---
## Page 166
144丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
AS(json_extract (data, $.name')). VIRTUAL;
提高我们查询的效率。我们添加一个虚拟列 user_name，如下：
即可。所以我们可以把数据很方便的解析出来。
"15100020003","location":"gansu"}');
者干脆在MongoDB 中等数据库端去处理，在5.7版中推出了 JSON 类型，算是功能的完善。
4.2.5
MySQL 5.7版本中引入，对于一些数据提取和分析有一定的辅助作用。
MySQL 5.7版，那么这个需求就是可以完美支持的。
"locati
的值，那么这个问题就简单多了；或者说，情况允许的话，可以把MySQL5.5版升级到
 mysql> select data->"s.name" as name, (data->"$.location") from json_test
到了JSON 发挥作用的时候了,如果要查询出数据,我们可以使用类似引用的语法"->"
insert into json_test values (NULL, '("name":"jeanron","mobile":"1500010002"
在没有JSON数据类型之前我们主要是通过字符串的匹配方式去处理JSON数据，或
在学习完常见的数据类型之后，下一节我们来补充一个新的数据类型JSON，这是在
使用 desc 查看，其实可以看到user_name 的属性是相对特殊的，如下图 4-19所示。
ALTER TABLE json_test
在这个基础上我们更近一步，在5.7里面还有辅助的特性虚拟列和相关的索引，可以
在这种模式下，上面的第一个难题其实就完全可以使用这种方式来解决了。
2 rows in set (0.00 sec)
首先创建一张表json_test，然后插入两行记录，如下：
我们来演示一下 JSON 数据类型的一些使用细则。
所以在这种情况下，暂时没有更好的解决方案了，如果在应用端能够保证时间字段
（4）timestamp 不支持 default null的语法，5.5，5.7版都不支持
（3）如果对timestamp设置动态默认值，表里只能有一个timestamp字段。
（2）timestamp可以支持动态默认值，但是范围要窄一些。
（1）datetime 在5.5版本不支持动态默认值，但是支持 default null这种方式。
name
"jeanron"
JSON类型
nto
(data->"s.location")
"beijing"
json
test
ADD user_name varchar(128)
values
tey(u
GENERATED ALWAYS
group by name;
igi
nnodb;
---
## Page 167
执行计划，我们可以得到属性值，通过解析的方式能够把执行计划做得更好。
析和处理还是大有帮助的，如下图 4-20所示。
row in set,1 warning (0.00 sec)
JSON 的新特性对于 MySQL 来说确实是一个不错的利好，如果数据量巨大，还是需
在这个基础上如果做更多地分析，其实 explain format-json 也是一种改进方式，对于
SIMPLE
然后来看下执行计划的情况，可以看到语句明显使用到了索引，对于后期的数据分
所以不是严格意义上100%的兼容性，至少在格式统一上我们还是有一些额外的工作要做。
Empty set (0.00 sec)
mysql> select user_name, (data->"$.location") from json_test where user_name
我们只用单引号是否可以呢，答案会让你失望。
1row in set (0.00 sec)
mysql>
select_type
然后我们再次查询，注意这里的user_name使用了双引号单引号混合的方式。
user_name
PRIMARY KEY (^uid`)
CREATE TABLE
使用 show create table 的方式查看建表 DDL，
alter tablejson_testadd index
然后在这个基础上添加一个索引。
"jianrong"
ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 |
KEY
data`
user
uid
idxusername
name
json DEFAULT NULL,
json_test|NULL