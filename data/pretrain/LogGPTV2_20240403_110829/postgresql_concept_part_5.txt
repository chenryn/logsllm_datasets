WHEREclause,asinFigure3.16.
You can ORDER BY more than one column by specifying multiple column names or labels,
separatedbycommas. Thecommandwouldthensortbythefirstcolumnspecified. Forrowswith
equalvaluesin the firstcolumn, it would sortbasedon thesecond column specified. Of course,
thisapproachisnotusefulinthefriendexamplebecauseallcolumnvaluesareunique.
3.9 Destroying Tables
This chapter would not be complete without showing you how to remove tables. This task is
accomplishedusingtheDROPTABLEcommand. Forexample,thecommandDROP TABLE friendwill
20 CHAPTER3. BASICSQLCOMMANDS
test=> SELECT * FROM friend;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Mike | Nichols | Tampa | FL | 19
Cindy | Anderson | Denver | CO | 23
Sam | Jackson | Allentown | PA | 22
(3 rows)
test=> INSERT INTO friend VALUES (’Jim’, ’Barnes’, ’Ocean City’,’NJ’, 25);
INSERT 19056 1
test=> SELECT * FROM friend;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Mike | Nichols | Tampa | FL | 19
Cindy | Anderson | Denver | CO | 23
Sam | Jackson | Allentown | PA | 22
Jim | Barnes | Ocean City | NJ | 25
(4 rows)
test=> DELETE FROM friend WHERE lastname = ’Barnes’;
DELETE 1
test=> SELECT * FROM friend;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Mike | Nichols | Tampa | FL | 19
Cindy | Anderson | Denver | CO | 23
Sam | Jackson | Allentown | PA | 22
(3 rows)
Figure3.12: DELETEexample
3.9. DESTROYINGTABLES 21
test=> UPDATE friend SET age = 20 WHERE firstname = ’Mike’;
UPDATE 1
test=> SELECT * FROM friend;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Cindy | Anderson | Denver | CO | 23
Sam | Jackson | Allentown | PA | 22
Mike | Nichols | Tampa | FL | 20
(3 rows)
Figure3.13: MyfirstUPDATE
test=> SELECT * FROM friend ORDER BY state;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Cindy | Anderson | Denver | CO | 23
Mike | Nichols | Tampa | FL | 20
Sam | Jackson | Allentown | PA | 22
(3 rows)
Figure3.14: Useof ORDERBY
test=> SELECT * FROM friend ORDER BY age DESC;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Cindy | Anderson | Denver | CO | 23
Sam | Jackson | Allentown | PA | 22
Mike | Nichols | Tampa | FL | 20
(3 rows)
Figure3.15: ReverseORDERBY
22 CHAPTER3. BASICSQLCOMMANDS
test=> SELECT * FROM friend WHERE age >= 21 ORDER BY firstname;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Cindy | Anderson | Denver | CO | 23
Sam | Jackson | Allentown | PA | 22
(2 rows)
Figure3.16: Useof ORDERBYandWHERE
removethefriendtable. Boththetablestructureandthedatacontainedinthetablewillbeerased.
We willusethe friendtable inthe nextchapter,so you shouldnot remove thetableatthistime.
Remember—toremoveonlythedatainthetablewithoutremovingthetablestructureitself,use
DELETE.
3.10 Summary
Thischapterhasshownthebasicoperationsofanydatabase:
• Tablecreation(CREATETABLE)
• Tabledestruction(DROPTABLE)
• Displaying(SELECT)
• Adding(INSERT)
• Replacing(UPDATE)
• Removing(DELETE)
This chapter has shown these commands in their simplest forms; real-world queries are much
more complex. The nextchapterswillshow how thesesimplecommandscanbe usedto handle
someverycomplicatedtasks.
Chapter 4
Customizing Queries
ThischapterwillillustrateadditionalcapabilitiesofthebasicSQLcommands.
4.1 Data Types
Table4.1liststhemostcommoncolumndatatypes. Figure 4.1showsqueriesusingthesetypes.
Noticethatnumbersdonotrequirequotes,butcharacterstrings,dates,andtimesdorequirethem.
ThefinalSELECTusespsql’s\xdisplaymode.1 Without \x, theSELECTwouldhavedisplayed
too much information to fit on one line. The fields would have wrapped around the edge of the
display,makingitdifficulttoread. Thecolumnswouldstilllineup,buttherewouldbeotherdata
intheway. Ofcourse,anothersolutiontofieldwrappingistoselectfewercolumns. Remember,
youcanselectanycolumnsfromthetableinanyorder.
Section9.2coverscolumntypesinmoredetail.
1SeeSection16.1forafulllistofthepsqlbackslashcommands.
Category Type Description
characterstring CHAR(length) blank-paddedstring,fixedstoragelength
VARCHAR(length) variablestoragelength
number INTEGER integer,+/–2billionrange
FLOAT floatingpointnumber,15-digitprecision
NUMERIC(precision,decimal) numberwithuser-definedprecisionanddecimal
location
date/time DATE date
TIME time
TIMESTAMP dateandtime
Table4.1: Commondatatypes
23
24 CHAPTER4. CUSTOMIZINGQUERIES
test=> CREATE TABLE alltypes (
test(> state CHAR(2),
test(> name CHAR(30),
test(> children INTEGER,
test(> distance FLOAT,
test(> budget NUMERIC(16,2),
test(> born DATE,
test(> checkin TIME,
test(> started TIMESTAMP
test(> );
CREATE
test=> INSERT INTO alltypes
test-> VALUES (
test(> ’PA’,
test(> ’Hilda Blairwood’,
test(> 3,
test(> 10.7,
test(> 4308.20,
test(> ’9/8/1974’,
test(> ’9:00’,
test(> ’07/03/1996 10:30:00’);
INSERT 19073 1
test=> SELECT state, name, children, distance, budget FROM alltypes;
state | name | children | distance | budget
-------+--------------------------------+----------+----------+---------
PA | Hilda Blairwood | 3 | 10.7 | 4308.20
(1 row)
test=> SELECT born, checkin, started FROM alltypes;
born | checkin | started
------------+----------+------------------------
1974-09-08 | 09:00:00 | 1996-07-03 10:30:00-04
(1 row)
test=> \x
Expanded display is on.
test=> SELECT * FROM alltypes;
-[ RECORD 1 ]----------------------------
state | PA
name | Hilda Blairwood
children | 3
distance | 10.7
budget | 4308.20
born | 1974-09-08
checkin | 09:00:00
started | 1996-07-03 10:30:00-04
Figure4.1: Exampleofcommondatatypes
4.2. QUOTESINSIDETEXT 25
test=> INSERT INTO friend (firstname, lastname, city, state)
test-> VALUES (’Mark’, ’Middleton’, ’Indianapolis’, ’IN’);
INSERT 19074 1
Figure4.2: Insertionofspecificcolumns
4.2 Quotes Inside Text
Suppose you want to insert the name O’Donnell. You might be tempted to enter it in psql as
’O’Donnell’,butthisapproachwillnotwork. Thepresenceofasinglequoteinsideasingle-quoted
stringgeneratesaparser error. Onewaytoplaceasinglequoteinsideasingle-quotedstringisto
usetwo quotes together—forexample,’O’’Donnell’.2 Twosinglequotes insideasingle-quoted
stringcausesonesinglequotetobegenerated. Anotheroptionistouseabackslash—forexample,
’O\’Donnell’. Thebackslashescapesthesinglequotecharacter.
4.3 Using NULL Values
Let’s return to the INSERT statement described in Section 3.3 on page 14. We will continue to
usethefriendtablefrom thepreviouschapter. InFigure 3.4,wespecifiedavalueforeachfriend
column. Suppose now that we want to insert a new row, but do not want to supply data for all
columns. Thatis,wewanttoinsertinformationaboutMark,butwedonotknowMark’sage.
Figure 4.2 shows this scenario. After the table name, column names appear in parentheses.
Thesecolumnswillbe assigned,in order, to thesupplieddatavalues. Ifweweresupplyingdata
forallcolumns, we wouldnotneedto namethem. Inthisexample,however,wemustnamethe
columns. Thetablehasfivecolumns,butwearesupplyingonlyfourdatavalues.
Thecolumnwedidnotassignwasage. Theinterestingquestionis,“Whatisintheagecellfor
Mark?” TheansweristhattheagecellcontainsaNULLvalue.
NULLisaspecialvaluethatisvalidinanycolumn. Youuseitwhenavalidentryforafieldis
notknownornotapplicable. Inthepreviousexample,wewantedtoaddMarktothedatabasebut
didnot know his age. It is difficult to imagine what numeric valuecould be usedfor Mark’s age
column. Zero or -1wouldbe strangeagevalues. Thus, NULL istheappropriatevaluefor hisage
column.
Suppose we have a spouse column. What value should be used if someone is not married?
A NULL value would be the proper value. For a wedding_anniversary column, unmarried people
would havea NULL value in that field. NULL valuesare veryuseful. Before databasessupported
NULL values, users would put special values in columns, such as -1 for unknown numbers and
1/1/1900forunknowndates. NULLvaluesofferamoreconsistentwaytomarksuchvalues.
2ThatisnotadoubleqoutebetweentheOandD,butrathertwosinglequotes.
26 CHAPTER4. CUSTOMIZINGQUERIES
NULL values exhibit special behavior in comparisons. Look at Figure 4.3. First, notice that
theagecolumnforMarkisempty. ItisreallyaNULL. Inthenextquery,becauseNULLvaluesare
unknown, the NULL row does not appearin the output. The third query often confuses people.3
Whydoesn’ttheMarkrowappear? TheageisNULLorunknown,meaningthatthedatabasedoes
notknowifitequals99—anddoesnotguess. Itrefusestoprintit. Infact,nocomparisonexists
thatwillproducetheNULLrow,exceptthelastqueryshown.
Thetests IS NULL andIS NOT NULL aredesignedspecificallyto testfor theexistenceof NULL
values. IfyouaremakingcomparisonsoncolumnsthatmightcontainNULLvalues,youmusttest
forthemspecifically.
Figure 4.4 shows an example of such a comparison. We have inserted Jack, but the city and
statewerenotknown,sotheyaresettoNULL. Thenextquery’sWHEREcomparisoniscontrived,
butillustrative. Becausecityandstateareboth NULL, you mightsuspectthattheJackrow would
bereturned. However,becauseNULLmeansunknown,wehavenowaytoknowwhetherthetwo
NULLvaluesareequal. Again,POSTGRESQLdoesnotguessanddoesnotprinttheresult.
OneotherissuewithNULLsneedsclarification. Incharactercolumns,aNULLisnotthesame
asazero-lengthvalue. Theemptystring’’andNULLaredifferent. Figure 4.5showsanexample
highlighting this difference. There are no valid numeric and date blank values, but a character
stringcanbeblank. Whenviewedinpsql, anyblanknumericfieldmust containa NULL because
no blank numberexists. However, thereare blankstrings, so blank stringsandNULL valuesare
displayedinthesamewayinpsql. Ofcourse,theyarenotthesame,sobecarefulnottoconfuse
themeaningof NULLvaluesincharacterfields.
4.4 Controlling DEFAULT Values
As we learned in the previous section, columns not specified in an INSERT statement are given
NULL values. You can change this assignment by using the DEFAULT keyword. When creating a
table, the keyword DEFAULT and a value can be used next to each column type. The value will
then be used anytimethe column value is not suppliedin an INSERT. If no DEFAULTis defined, a
NULLisusedforthecolumn. Figure4.6showsatypicaluseofdefaultvalues. Thedefaultforthe
timestamp column is actually a call to an internal POSTGRESQL variablethat returns the current
dateandtime.
4.5 Column Labels
YoumighthavenoticedthetextthatappearsatthetopofeachcolumnintheSELECToutput—the
column label. The label usually is the name of the selected column. However, you can control
thetextthatappearsatthetopofeachcolumnbyusingtheASkeyword. Forexample,Figure 4.7
replacesthedefaultcolumnlabelfirstname withthecolumn labelbuddy. Youmighthavenoticed
3The<>meansnotequal.
4.5. COLUMNLABELS 27
test=> SELECT * FROM friend ORDER BY age DESC;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Cindy | Anderson | Denver | CO | 23
Sam | Jackson | Allentown | PA | 22
Mike | Nichols | Tampa | FL | 20
Mark | Middleton | Indianapolis | IN |
(4 rows)
test=> SELECT * FROM friend WHERE age > 0 ORDER BY age DESC;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Cindy | Anderson | Denver | CO | 23
Sam | Jackson | Allentown | PA | 22
Mike | Nichols | Tampa | FL | 20
(3 rows)
test=> SELECT * FROM friend WHERE age <> 99 ORDER BY age DESC;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Cindy | Anderson | Denver | CO | 23
Sam | Jackson | Allentown | PA | 22
Mike | Nichols | Tampa | FL | 20
(3 rows)
test=> SELECT * FROM friend WHERE age IS NULL ORDER BY age DESC;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Mark | Middleton | Indianapolis | IN |
(1 row)
Figure4.3: NULLhandling
28 CHAPTER4. CUSTOMIZINGQUERIES
test=> INSERT INTO friend
test-> VALUES (’Jack’, ’Burger’, NULL, NULL, 27);
INSERT 19075 1
test=> SELECT * FROM friend WHERE city = state;
firstname | lastname | city | state | age
-----------+----------+------+-------+-----
(0 rows)
Figure4.4: Comparisonof NULLfields
test=> CREATE TABLE nulltest (name CHAR(20), spouse CHAR(20));
CREATE
test=> INSERT INTO nulltest VALUES (’Andy’, ’’);
INSERT 19086 1
test=> INSERT INTO nulltest VALUES (’Tom’, NULL);
INSERT 19087 1
test=> SELECT * FROM nulltest ORDER BY name;
name | spouse
----------------------+----------------------
Andy |
Tom |
(2 rows)
test=> SELECT * FROM nulltest WHERE spouse = ’’;
name | spouse
----------------------+----------------------
Andy |
(1 row)
test=> SELECT * FROM nulltest WHERE spouse IS NULL;
name | spouse
----------------------+--------
Tom |
(1 row)
Figure4.5: NULLvaluesandblankstrings
4.5. COLUMNLABELS 29
test=> CREATE TABLE account (
test(> name CHAR(20),
test(> balance NUMERIC(16,2) DEFAULT 0,
test(> active CHAR(1) DEFAULT ’Y’,
test(> created TIMESTAMP DEFAULT CURRENT_TIMESTAMP
test(> );
CREATE
test=> INSERT INTO account (name)
test-> VALUES (’Federated Builders’);
INSERT 19103 1
test=> SELECT * FROM account;
name | balance | active | created