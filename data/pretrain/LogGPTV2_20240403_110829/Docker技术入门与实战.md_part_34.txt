 scope link
forever
no
STP
enabled
vethdda6
第20章
veth65f9
interfaces
高级网络配置245
install bridge-
---
## Page 260
即可。
20.7创建一个点到点连接
和iproute命令来查看IP地址配置和路由信息。
246第三部分高级话题
$sudo docker inspect-f'(1.State.Pid})'12e343489d2f
找到进程号，然后创建网络命名空间的跟踪文件：
$sudo docker run -i-t--rm --net=none base /bin/bash
首先启动两个容器：
解决办法很简单：创建一对peer接口，分别放到两个容器中，配置成点到点链路类型
默认情况下，Docker会将所有容器连接到由docker0提供的虚拟子网中。
可以继续用brctlshow命令查看桥接的信息。另外，在容器中可以使用ipaddr
$ sudo brctl addbr bridge0
如果服务已经运行，那需要先停止服务，并删除旧的网桥：
2989
$sudo docker inspect-f'{(.State.Pid))1fif4c1f931a
root@12e343489d2f:/#
root@1f1f4c1f931a:/#
用户有时候需要两个容器之间可以直连通信，而不用通过主机网桥进行桥接。
启动Docker服务。新建一个容器，可以看到它已经桥接到了bridge0上。
S
$echo'DocKER_oPTs="-b=bridgeo"'>>/etc/default/docker
配置Docker服务，默认桥接到创建的网桥上：
查看确认网桥创建并启动：
S
然后创建一个网桥bridge0：
S
$ sudo service docker stop
sudo service docker start
ipaddr show bridge0
sudo ip addr add 192.168.5.1/24 dev bridge0
sudobrctldelbr docker0
sudo
inet 192.168.5.1/24 scope global bridge0
1ink/ether 66:38:d0:0d:76:18 brd ff:ff:ff:ff:ff:ff
valid_lft forever preferred_lft forever
ip1ink setdev docker0 down
---
## Page 261
复杂的场景对容器连接的操作命令。
20.8
用--icc=false来关闭容器之间的通信。
络来通信。
例如，分别启动两个终端，在其中创建两个测试容器c1和c2，并查看网卡配置。
Jerome Petazzoni编写了一个叫 pipework的 shell脚本封装了一些操作，
围绕Docker网络的管理和使用，现在已经诞生了一些方便用户操作的工具和项目，包
利用类似的办法，
etho
root@elc70b140f1f:/#ifconfig
$sudo docker run --name cl -it ubuntu
容器c1：
1.pipework
此外，七
现在这两个容器就可以相互ping通，并成功建立连接。点到点链路不需要子网和子网掩码。
$sudoip
$sudo ip link add A type veth peer name B
创建一对 peer 接口，然后配置路由：
$sudo 1n-s/proc/3004/ns/net/var/run/netns/3004
$sudo 1n-s/proc/2989/ns/net
3004
sudomkdir-p/var/run/netns
sudoip
sudo ip
sudoip
sudo
sudo
sudo
工具和项目
也可以不指定--net=none来创建点到点链路。这样容器还可以通过原先的网
ip
netnsexec3004iprouteadd 10.1.1.1/32devB
Link encap:Ethernet
netns exec 3004 ip
netns exec
link set B netns 3004
netns exec
netnsexec
netns exec
UP BROADCAST RUNNING
inet addr:172.17.0.5
packets:8errors:0dropped:0 overruns:0frame:0
可以创建一个只跟主机通信的容器。但是一般情况下，更推荐使
3004ipaddradd10.1.1.2/32devB
2989ipaddradd10.1.1.1/32devA
link set Bup
MTU:1500
Bcast:0.0.0.0
/var/run/netns/2989
Metric:1
Mask:255.255.0.0
第20章高级网络配置
可以简化在比较
247
---
## Page 262
接上去。
248
root@10ef0bd4cb77:/#ifconfig
容器c1：
此时在主机系统中查看网桥信息，会发现新创建的网桥brl，并且有两个veth 端口连
dockero
brl
bridge
S
Ss
利用pipework为容器c1和c2添加新的网卡，
etho
root@2c47b6af0c3f:/#ifconfig
容
sudo brctl show
sudo
sudo pipework
sudo docker run--name c2-itubuntu
c2
第三部分高级话题
name
pipework
collisions:0 txqueuelen:0
UPLOOPBACK RUNNING
inet6 addr:::1/128
inet addr:127.0.0.1
Link
RX bytes:418(418.0B)
collisions:0
UP BROADCAST RUNNING
inet6addr:fe80::42:acff:fe11:6/64 Scope:Link
inetaddr:172.17.0.6Bcast:0.0.0.0
Link encap:Ethernet
UP LOOPBACK RUNNING
inet6addr:::1/128
inet addr:127.0.0.1
Link encap:Local Loopback
collisions:0
packets:0
packets:0 errors:0 dropped:0 overruns:0 frame:0
packets:5
packets:5
(bytes:0(0.0B)
packets:0errors:0 dropped:0 overruns:0 carrier:0
packets:0 errors:0 dropped:0
encap:Local Loopback
bridge id
brlc2
brlc1
8000.56847afe9799
8000.868b605fc7a4
192.168.1.2/24
1192.168.1.1/24
errors:0 dropped:0
txqueuelen:1000
errors:0dropped:0overruns:0
errors:0 dropped:0 overruns:0
txqueuelen:1000
TXbytes:0(0.0B)
Scope:Host
TXbytes:0(0.0B)
Scope:Host
MTU:65536
Mask:255.0.0.0
HWaddr02:42:ac:11:00:06
MTU:65536
Mask:255.0.0.0
MTU:1500
TX bytes:418(418.0 B)
TX bytes:648 (648.0 B)
no
STP
overruns:0
Metric:1
Metric:1
overruns:0 frame:0
并将它们连接到新创建的 br1 网桥上：
Metric:1
enabled
Mask:255.255.0.0
carrier:0
carrier:0
frame:0
veth89934d8
veth1p117880
veth1p117805
interfaces
---
## Page 263
ethl
etho
root@2c47b6af0c3f:/#ifconfig
容器c2：
ethl
etho
inet6 addr:::1/128 Scope:Host
inet addr:127.0.0.1
Link encap:Local Loopback
collisions:0
inet addr:192.168.1.2
Link encap:Ethernet
TX
UP BROADCAST RUNNING
inet6 addr:fe80::42:acff:fe11:6/64 Scope:Link
inet addr:172.17.0.6Bcast:0.0.0.0
inet6addr:
Link encap:Ethernet
RX
inet addr:127.0.0.1
Link encap:Local Loopback
RX bytes:1206 (1.2 KB)
UP
inet6 addr: fe80::895:e0ff:fe8b:7cd3/64 Scope:Link
inet addr:192.168.1.1
Link encap:Ethernet
RX bytes:1338 (1.3 KB)
collisions:0 txqueuelen:1000
UP BROADCAST RUNNING MTU:150OMetric:1
inet6addr:fe80::42:acff:fe11:5/64 Scope:Link
inet addr:172.17.0.5 Bcast:0.0.0.0Mask:255.255.0.0
Link
bytes:648
packets:9
BROADCAST RUNNING MULTICAST
packets:12
packets:13 errors:0 dropped:0 overruns:0 frame:0
bytes:0 (0.0B)
llisions:0
LOOPBACK RUNNING
packets:8
packets:15 errors:0 dropped:0 overruns:0 frame:0
BROADCAST RUNNING MULTICAST
packets:8errors:0 dropped:0 overruns:0 carrier:0
packets:17 errors:0 dropped:0 overruns:0 frame:0
packets:8
packets:0
packets:0 errors:0
encap:Ethernet
fe80::a49e:6eff:fea0:4a44/64 Scope:Link
txqueuelen:0
errors:0
3errors:0 dropped:0 overruns:0 carrier:0
(648.0B)
txqueuelen:1000
errors:0
errors:0 dropped:0
errors:0
Mask:255.0.0.0
TX bytes:0
dropped:0
HWaddra6:9e:6e:a0:4a:44
HWaddr 02:42:ac:11:00:06
dropped:0
MTU:65536
Mask:255.0.0.0
HWaddr 0a:95:e0:8b:7c:d3
HWaddr 02:42:ac:11:00:05
dropped:0
Bcast:0.0.0.0
dropped:0 overruns:0 carrier:0
MTU:1500
Bcast:0.0.0.0Mask:255.255.255.0
TX bytes:690 (690.0 B)
TXbytes:856(856.0 B)
TXbytes:648(648.0 B)
TXbytes:648(648.0 B)
（0.0B）
overruns:0 carrier:0
MTU:1500
Metric:1
overruns:0
overruns:0
Metric:1
MTU:1500Metric:1
overruns:0 frame:0
Mask:255.255.0.0
Mask:255.255.255.0
Metric:1
第20章
carrier:0
frame:0
高级网络配置
249
---
## Page 264
下载源码包，解压后安装，并更新系统环境中的路径变量。
的Docker镜像、容器；引人更强大的服务发现和集群系统等。
包括Docker server、Docker client、SSH隧道、Eted 配置管理、SkyDNS等。
种平台上Docker容器操作的统一性，隐藏下层不同的实现接口。它包括许多的子服务项目，
小化工具集。
目源码在https://github.com/docker/libswarm上进行维护，目标是打造管理Docker网络的最
成互联关系。该项目跟下一章要介绍的fig项目功能有重复，被替代的可能性较大。
的实现。
由、NAT防火墙；以及一些提供HTTP、SMTP、POP、IMAP、Telnet、SSH、FTP的服务器
目前，Docker 社区在推动具有更多功能的 libswarm 项目，以实现更标准的接口。
iproute 等工具实现容器连接的配置。实际上，Docker在实现上也是采用了相同的底层机制。
甚至通过macvlan连接容器到本地物理网卡，实现跨主机通信。
250
安装libswarm可以通过如下步骤。首先，安装go语言环境。访问htps://golang.org/dl/，
使用libswarm可以实现，在同一个控制端同时查看、管理运行在多个不同主机和平台上
libswarm的主要目标为定义分布式系统各个组件之间进行通信的统一接口，以实现多
基于playground，用户可以提前配置好容器的拓扑，然后一条命令，启动多个容器并构
pipework代码只有200多行，建议进行阅读，有助于理解如何利用Linux系统上的
安装bzr：
$go get github.com/docker/libswarm
之后，使用Go下载源码：
$ export PATH=$PATH:SGOPATH/bin
$export GOPATH=/usr/local/go
该项目诞生于2014年3月，遵循Apache2.0许可，
3.libswarm项目
BrandonRhodes创建了一个提供完整的Docker容器网络拓扑管理的Python库，包括路
2.playground
另外，pipework还支持指定容器内的网卡名称、MAC地址、网络掩码和网关等配置，
此时，容器c1和c2可以通过子网192.168.1.0/16相互连通。
第三部分高级话题
RXbytes:0(0.0 B)TXbytes:0(0.0 B)
collisions:0 txqueuelen:0
UPLOOPBACKRUNNING
packets:0 errors:0 dropped:0 overruns:0 frame:0
packets:0 errors:0 dropped:0 overruns:0 carrier:0
MTU:65536Metric:1
，目前项目仍在进行中。libswarm项
---
## Page 265
云计算方向中值得持续探讨的重点技术话题。
需求和瓶颈将会大量出现，而且不少都是新的问题。
特点得以快速发展。但随着Docker应用在各种分布式环境、特别是云平台上，网络方面的
作系统上的现有技术。这在初期可以让Docker不必考虑太多的网络问题，可以关注自身的
分精确。
门类众多，包括软件、硬件、系统，等等。而且往往要求用户对于各种技术的细节把握得十
网络原因造成的业务损失，都占到十分可观的比例。这是因为网络领域所涉及的学科和技术
DNS、容器的访问控制管理等。并介绍了Docker网络相关的一些工具和项目。
20.9本章小结
如何结合已有的各种网络虚拟化技术来解决Docker网络的问题，将是未来一段时间内
网络是一个复杂的领域，特别在云计算领域，因为网络配置造成的管理成本，以及因为
从目前来看，Docker网络所能提供的功能还十分简单，并且基本上都是依赖于Linux操
本章具体讲解了使用Docker网络的一些高级部署和操作配置，包括配置启动参数、
GLOBAL OPTIONS:
COMMANDS:
VERSION:
JSAGE:
NAME:
$swarmd -h