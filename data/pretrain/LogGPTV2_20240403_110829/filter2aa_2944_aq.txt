    public Optional read(Request request, String tokenId) {
Listing 4.7
The cookie-based TokenStore
Pass true to 
request.session() 
to create a new 
session cookie.
Store token attributes 
as attributes of the 
session cookie.
118
CHAPTER 4
Session cookie authentication
        var session = request.session(false);      
        if (session == null) {
            return Optional.empty();
        }
        var token = new Token(session.attribute("expiry"),     
                session.attribute("username"));                
        token.attributes.putAll(session.attribute("attrs"));   
        return Optional.of(token);
    }
}
You can now wire up the TokenController to a real TokenStore implementation. Open
the Main.java file in your editor and find the lines that create the TokenController.
Replace the null argument with an instance of the CookieTokenStore as follows:
TokenStore tokenStore = new CookieTokenStore();
var tokenController = new TokenController(tokenStore);
Save the file and restart the API. You can now try out creating a new session. First cre-
ate a test user if you have not done so already:
$ curl -H 'Content-Type: application/json' \
    -d '{"username":"test","password":"password"}' \
    https://localhost:4567/users
{"username":"test"}
You can then call the new /sessions endpoint, passing in the username and password
using HTTP Basic authentication to get a new session cookie:
$ curl -i -u test:password \                
    -H 'Content-Type: application/json' \
    -X POST https://localhost:4567/sessions
HTTP/1.1 201 Created
Date: Sun, 19 May 2019 09:42:43 GMT
Set-Cookie: 
➥ JSESSIONID=node0hwk7s0nq6wvppqh0wbs0cha91.node0;Path=/;Secure;
➥ HttpOnly                           
Expires: Thu, 01 Jan 1970 00:00:00 GMT
Content-Type: application/json
X-Content-Type-Options: nosniff
X-XSS-Protection: 0
Cache-Control: no-store
Server: 
Transfer-Encoding: chunked
{"token":"node0hwk7s0nq6wvppqh0wbs0cha91"}   
Pass false to request.session() 
to check if a valid session is 
present.
Populate the Token 
object with the 
session attributes.
Use the -u option 
to send HTTP Basic 
credentials.
Spark returns a Set-
Cookie header for the 
new session token.
The TokenController also 
returns the token in the 
response body.
119
Session cookies
4.3.1
Avoiding session fixation attacks
The code you’ve just written suffers from a subtle but widespread security flaw that
affects all forms of token-based authentication, known as a session fixation attack. After
the user authenticates, the CookieTokenStore then asks for a new session by calling
request.session(true). If the request did not have an existing session cookie, then
this will create a new session. But if the request already contains an existing session
cookie, then Spark will return that existing session and not create a new one. This can
create a security vulnerability if an attacker is able to inject their own session cookie
into another user’s web browser. Once the victim logs in, the API will change the user-
name attribute in the session from the attacker’s username to the victim’s username.
The attacker’s session token now allows them to access the victim’s account, as shown in
figure 4.8. Some web servers will produce a session cookie as soon as you access the
login page, allowing an attacker to obtain a valid session cookie before they have even
logged in.
DEFINITION
A session fixation attack occurs when an API fails to generate a new
session token after a user has authenticated. The attacker captures a session
token from loading the site on their own device and then injects that token
Attacker
Victim
API server
Login
Session cookie
https://api.example.com/login;sessid=...
Token store
Attacker
session
username=attacker
username=victim
1. The attacker ﬁrst logs
in to get a session cookie.
2. They then trick the user into
logging in using the attacker’s
existing session token.
3. Once the user logs in, the attacker’s
session is updated to access the
victim’s account.
Login
sessid=...
Figure 4.8
In a session fixation attack, the attacker first logs in to obtain a valid session token. They then 
inject that session token into the victim’s browser and trick them into logging in. If the existing session is not 
invalidating during login then the attacker’s session will be able to access the victim’s account.
120
CHAPTER 4
Session cookie authentication
into the victim’s browser. Once the victim logs in, the attacker can use the
original session token to access the victim’s account.
Browsers will prevent a site hosted on a different origin from setting cookies for your
API, but there are still ways that session fixation attacks can be exploited. First, if the
attacker can exploit an XSS attack on your domain, or any sub-domain, then they can
use this to set a cookie. Second, Java servlet containers, which Spark uses under the
hood, support different ways to store the session token on the client. The default, and
safest, mechanism is to store the token in a cookie. But you can also configure the
servlet container to store the session by rewriting URLs produced by the site to
include the session token in the URL itself. Such URLs look like the following:
 https://api.example.com/users/jim;JSESSIONID=l8Kjd… 
The ;JSESSIONID=… bit is added by the container and is parsed out of the URL on sub-
sequent requests. This style of session storage makes it much easier for an attacker to
carry out a session fixation attack because they can simply lure the user to click on a
link like the following:
 https://api.example.com/login;JSESSIONID=
If you use a servlet container for session management, you should ensure that the ses-
sion tracking-mode is set to COOKIE in your web.xml, as in the following example:
    COOKIE
This is the default in the Jetty container used by Spark. You can prevent session fixa-
tion attacks by ensuring that any existing session is invalidated after a user authenti-
cates. This ensures that a new random session identifier is generated, which the
attacker is unable to guess. The attacker’s session will be logged out. Listing 4.8 shows
the updated CookieTokenStore. First, you should check if the client has an existing
session cookie by calling request.session(false). This instructs Spark to return the
existing session, if one exists, but will return null if there is not an existing session.
Invalidate any existing session to ensure that the next call to request.session(true)
will create a new one. To eliminate the vulnerability, open CookieTokenStore.java in
your editor and update the login code to match listing 4.8.
    @Override
    public String create(Request request, Token token) {
        var session = request.session(false);   
        if (session != null) {                  
            session.invalidate();               
Listing 4.8
Preventing session fixation attacks
Check if there is an 
existing session and 
invalidate it.
121
Session cookies
        }
        session = request.session(true);    
        session.attribute("username", token.username);
        session.attribute("expiry", token.expiry);
        session.attribute("attrs", token.attributes);
        return session.id();
    }
4.3.2
Cookie security attributes
As you can see from the output of curl, the Set-Cookie header generated by Spark sets
the JSESSIONID cookie to a random token string and sets some attributes on the
cookie to limit how it is used:
Set-Cookie: 
➥ JSESSIONID=node0hwk7s0nq6wvppqh0wbs0cha91.node0;Path=/;Secure;
➥ HttpOnly
There are several standard attributes that can be set on a cookie to prevent accidental
misuse. Table 4.1 lists the most useful attributes from a security point of view. 
Table 4.1
Cookie security attributes
Cookie 
attribute
Meaning
Secure
Secure cookies are only ever sent over a HTTPS connection and so cannot be stolen 
by network eavesdroppers.
HttpOnly
Cookies marked HttpOnly cannot be read by JavaScript, making them slightly 
harder to steal through XSS attacks. 
SameSite
SameSite cookies will only be sent on requests that originate from the same origin 
as the cookie. SameSite cookies are covered in section 4.4.
Domain
If no Domain attribute is present, then a cookie will only be sent on requests to the 
exact host that issued the Set-Cookie header. This is known as a host-only cookie. If 
you set a Domain attribute, then the cookie will be sent on requests to that domain 
and all sub-domains. For example, a cookie with Domain=example.com will be sent 
on requests to api.example.com and www .example.com. Older versions of the cookie 
standards required a leading dot on the domain value to include subdomains (such 
as Domain=.example.com), but this is the only behavior in more recent versions and 
so any leading dot is ignored. Don’t set a Domain attribute unless you really need the 
cookie to be shared with subdomains.
Path
If the Path attribute is set to /users, then the cookie will be sent on any request to a 
URL that matches /users or any sub-path such as /users/mary, but not on a request 
to /cats/mrmistoffelees. The Path defaults to the parent of the request that returned 
the Set-Cookie header, so you should normally explicitly set it to / if you want the 
cookie to be sent on all requests to your API. The Path attribute has limited security 
benefits, as it is easy to defeat by creating a hidden iframe with the correct path and 
reading the cookie through the DOM.
Create a fresh session 
that is unguessable to 
the attacker.
122
CHAPTER 4
Session cookie authentication
You should always set cookies with the most restrictive attributes that you can get away
with. The Secure and HttpOnly attributes should be set on any cookie used for secu-
rity purposes. Spark produces Secure and HttpOnly session cookies by default. Avoid
setting a Domain attribute unless you absolutely need the same cookie to be sent to
multiple sub-domains, because if just one sub-domain is compromised then an
attacker can steal your session cookies. Sub-domains are often a weak point in web
security due to the prevalence of sub-domain hijacking vulnerabilities.
DEFINITION
Sub-domain hijacking (or sub-domain takeover) occurs when an
attacker is able to claim an abandoned web host that still has valid DNS
Expires and 
Max-Age
Sets the time at which the cookie expires and should be forgotten by the client, 
either as an explicit date and time (Expires) or as the number of seconds from now 
(Max-Age). Max-Age is newer and preferred, but Internet Explorer only understands 
Expires. Setting the expiry to a time in the past will delete the cookie immediately. If 
you do not set an explicit expiry time or max-age, then the cookie will live until the 
browser is closed.
Persistent cookies
A cookie with an explicit Expires or Max-Age attribute is known as a persistent cookie
and will be permanently stored by the browser until the expiry time is reached, even
if the browser is restarted. Cookies without these attributes are known as session
cookies (even if they have nothing to do with a session token) and are deleted when
the browser window or tab is closed. You should avoid adding the Max-Age or Expires
attributes to your authentication session cookies so that the user is effectively
logged out when they close their browser tab. This is particularly important on shared
devices, such as public terminals or tablets that might be used by many different peo-
ple. Some browsers will now restore tabs and session cookies when the browser is
restarted though, so you should always enforce a maximum session time on the
server rather than relying on the browser to delete cookies appropriately. You should
also consider implementing a maximum idle time, so that the cookie becomes invalid
if it has not been used for three minutes or so. Many session cookie frameworks
implement these checks for you.
Persistent cookies can be useful during the login process as a “Remember Me”
option to avoid the user having to type in their username manually, or even to auto-
matically log the user in for low-risk operations. This should only be done if trust in
the device and the user can be established by other means, such as looking at the
location, time of day, and other attributes that are typical for that user. If anything
looks out of the ordinary, then a full authentication process should be triggered. Self-
contained tokens such as JSON Web Tokens (see chapter 6) can be useful for imple-
menting persistent cookies without storing long-lived state on the server.
Table 4.1
Cookie security attributes (continued)
Cookie 
attribute
Meaning
123
Session cookies
records configured. This typically occurs when a temporary site is created on
a shared service like GitHub Pages and configured as a sub-domain of the
main website. When the site is no longer required, it is deleted but the DNS
records are often forgotten. An attacker can discover these DNS records and
re-register the site on the shared web host, under the attacker's control. They
can then serve their content from the compromised sub-domain.
Some browsers also support naming conventions for cookies that enforce that the
cookie must have certain security attributes when it is set. This prevents accidental
mistakes when setting cookies and ensures an attacker cannot overwrite the cookie
with one with weaker attributes. These cookie name prefixes are likely to be incorpo-
rated into the next version of the cookie specification. To activate these defenses, you
should name your session cookie with one of the following two special prefixes:
__Secure-—Enforces that the cookie must be set with the Secure attribute and
set by a secure origin.
__Host-—Enforces the same protections as __Secure-, but also enforces that
the cookie is a host-only cookie (has no Domain attribute). This ensures that
the cookie cannot be overwritten by a cookie from a sub-domain and is a signif-
icant protection against sub-domain hijacking attacks.
NOTE
These prefixes start with two underscore characters and include a
hyphen at the end. For example, if your cookie was previously named “ses-
sion,” then the new name with the host prefix would be “__Host-session.”
4.3.3
Validating session cookies
You’ve now implemented cookie-based login, but the API will still reject requests that
do not supply a username and password, because you are not checking for the session
cookie anywhere. The existing HTTP Basic authentication filter populates the subject
attribute on the request if valid credentials are found, and later access control filters
check for the presence of this subject attribute. You can allow requests with a session
cookie to proceed by implementing the same contract: if a valid session cookie is pres-
ent, then extract the username from the session and set it as the subject attribute in
the request, as shown in listing 4.9. If a valid token is present on the request and not
expired, then the code sets the subject attribute on the request and populates any
other token attributes. To add token validation, open TokenController.java in your
editor and add the validateToken method from the listing and save the file.
WARNING
This code is vulnerable to Cross-Site Request Forgery attacks. You will
fix these attacks in section 4.4.
public void validateToken(Request request, Response response) {
    // WARNING: CSRF attack possible
    tokenStore.read(request, null).ifPresent(token -> {    
        if (now().isBefore(token.expiry)) {                
Listing 4.9
Validating a session cookie
Check if a token is 
present and not expired.
124
CHAPTER 4
Session cookie authentication
            request.attribute("subject", token.username);    
            token.attributes.forEach(request::attribute);    
        }
    });
}
Because the CookieTokenStore can determine the token associated with a request by
looking at the cookies, you can leave the tokenId argument null for now when look-
ing up the token in the tokenStore. The alternative token store implementations
described in chapter 5 all require a token ID to be passed in, and as you will see in the
next section, this is also a good idea for session cookies, but for now it will work fine
without one.
 To wire up the token validation filter, navigate back to the Main.java file in your
editor and locate the line that adds the current UserController authentication filter
(that implements HTTP Basic support). Add the TokenController validateToken()
method as a new before() filter right after the existing filter:
before(userController::authenticate);
before(tokenController::validateToken);
If either filter succeeds, then the subject attribute will be populated in the request and
subsequent access control checks will pass. But if neither filter finds valid authenti-
cation credentials then then subject attribute will remain null in the request and
access will be denied for any request that requires authentication. This means that the
API can continue to support either method of authentication, providing flexibility
for clients.
 Restart the API and you can now try out making requests using a session cookie
instead of using HTTP Basic on every request. First, create a test user as before:
$ curl -H 'Content-Type: application/json' \
  -d '{"username":"test","password":"password"}' \
  https://localhost:4567/users
{"username":"test"}
Next, call the /sessions endpoint to login, passing the username and password as
HTTP Basic authentication credentials. You can use the -c option to curl to save any
cookies on the response to a file (known as a cookie jar):
$ curl -i -c /tmp/cookies -u test:password \     
  -H 'Content-Type: application/json' \
  -X POST https://localhost:4567/sessions
HTTP/1.1 201 Created
Date: Sun, 19 May 2019 19:15:33 GMT
Set-Cookie: 
➥ JSESSIONID=node0l2q3fc024gw8wq4wp961y5rk0.node0;
   ➥ Path=/;Secure;HttpOnly                 
Expires: Thu, 01 Jan 1970 00:00:00 GMT
Content-Type: application/json
Populate the request subject attribute and
any attributes associated with the token.
Use the -c option to 
save cookies from the 
response to a file.
The server returns a 
Set-Cookie header for 
the session cookie.
125
Preventing Cross-Site Request Forgery attacks
X-Content-Type-Options: nosniff
X-XSS-Protection: 0
Cache-Control: no-store
Server: 
Transfer-Encoding: chunked
{"token":"node0l2q3fc024gw8wq4wp961y5rk0"}
Finally, you can make a call to an API endpoint. You can either manually create a
Cookie header, or you can use curl’s -b option to send any cookies from the cookie jar
you created in the previous request:
$ curl -b /tmp/cookies \                     
  -H 'Content-Type: application/json' \
  -d '{"name":"test space","owner":"test"}' \
  https://localhost:4567/spaces
{"name":"test space","uri":"/spaces/1"}     
4.4
Preventing Cross-Site Request Forgery attacks
Imagine that you have logged into Natter and then receive a message from Polly in
Marketing with a link inviting you to order some awesome Manning books with a 20%
discount. So eager are you to take up this fantastic offer that you click it without think-
ing. The website loads but tells you that the offer has expired. Disappointed, you
return to Natter to ask your friend about it, only to discover that someone has some-
how managed to post abusive messages to some of your friends, apparently sent by
you! You also seem to have posted the same offer link to your other friends.
Pop quiz