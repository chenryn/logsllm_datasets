1
LPHCTF bypass出题⼈视⻆
N. 绕过后缀
O. 绕过可⻅字符检测
P. 绕过⿊名单检测
@yzddmr6 
⾃⼰在L3HCTF中出了⼀道java上传绕过题⽬bypass。其中题⽬中的⼀些trick不仅仅是⽤于CTF出题，
对于实战渗透也是有⼀定的帮助。今天跟⼤家分享⼀下出题时的⼀些思考跟解题细节。 
题⽬有三道过滤 
后缀jsp/jspx会被替换为空，⽤双写绕过：jsjspp。常规操作 
1. 绕过后缀 
2. 绕过可⻅字符检测 
Plain Text
复制代码
    public static String checkExt(String ext) {
        ext = ext.toLowerCase();
        String[] blackExtList = {
                "jsp", "jspx"
        };
        for (String blackExt : blackExtList) {
            if (ext.contains(blackExt)) {
                ext = ext.replace(blackExt, "");
            }
        }
        return ext;
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
2
第⼆阶段题⽬中直接⽤getString获取FileItem的内容，然后传⼊了checkValidChars函数检测。
checkValidChars函数主要功能是检测content中是否存在连着两个以上的字⺟数字，如果匹配成功则提
示上传失败。 
这⾥其实是模拟了⼀个WAF的场景，因为很多WAF对于⽂件上传都会有很粗暴的拦截，碰到jsp标签就
给⼲死。 
乍⼀看似乎并不可能被绕过，因为只要连着两个字⺟数字就会被检测到，让⼈不由得想起了CTF经典题
⽬《php⽆字⺟数字webshell》。但是java不像php⼀样⽀持变量函数，需要从其他地⽅下⼿。 
这⾥就⽤到了⼀个trick：FileItem.getString()对于编码的解析跟Tomcat解析jsp是有差异的，默认为
ISO-8859-1 
Plain Text
复制代码
String content = item.getString();
boolean check = checkValidChars(content);
...
    public static boolean checkValidChars(String content) {
        Pattern pattern = Pattern.compile("[a-zA-Z0-9]{2,}");
        Matcher matcher = pattern.matcher(content);
        return matcher.find();
    }
1
2
3
4
5
6
7
8
Plain Text
复制代码
public String getString() {
    byte[] rawdata = this.get();
    String charset = this.getCharSet();
    if (charset == null) {
        charset = "ISO-8859-1";
    }
    try {
        return new String(rawdata, charset);
    } catch (UnsupportedEncodingException var4) {
        return new String(rawdata);
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
3
⽽Tomcat对于jsp编码的解析主要在org.apache.jasper.compiler.EncodingDetector这个类，其中有很
多默认⽤ISO-8859-1⽆法直接解析的编码。 
4
Plain Text
复制代码
 private EncodingDetector.BomResult parseBom(byte[] b4, int count) {
        if (count < 2) {
            return new EncodingDetector.BomResult("UTF-8", 0);
        } else {
            int b0 = b4[0] & 255;
            int b1 = b4[1] & 255;
            if (b0 == 254 && b1 == 255) {
                return new EncodingDetector.BomResult("UTF-16BE", 2);
            } else if (b0 == 255 && b1 == 254) {
                return new EncodingDetector.BomResult("UTF-16LE", 2);
            } else if (count < 3) {
                return new EncodingDetector.BomResult("UTF-8", 0);
            } else {
                int b2 = b4[2] & 255;
                if (b0 == 239 && b1 == 187 && b2 == 191) {
                    return new EncodingDetector.BomResult("UTF-8", 3);
                } else if (count < 4) {
                    return new EncodingDetector.BomResult("UTF-8", 0);
                } else {
                    int b3 = b4[3] & 255;
                    if (b0 == 0 && b1 == 0 && b2 == 0 && b3 == 60) {
                        return new EncodingDetector.BomResult("ISO-10646-
UCS-4", 0);
                    } else if (b0 == 60 && b1 == 0 && b2 == 0 && b3 == 0) 
{
                        return new EncodingDetector.BomResult("ISO-10646-
UCS-4", 0);
                    } else if (b0 == 0 && b1 == 0 && b2 == 60 && b3 == 0) 
{
                        return new EncodingDetector.BomResult("ISO-10646-
UCS-4", 0);
                    } else if (b0 == 0 && b1 == 60 && b2 == 0 && b3 == 0) 
{
                        return new EncodingDetector.BomResult("ISO-10646-
UCS-4", 0);
                    } else if (b0 == 0 && b1 == 60 && b2 == 0 && b3 == 63) 
{
                        return new EncodingDetector.BomResult("UTF-16BE", 
0);
                    } else if (b0 == 60 && b1 == 0 && b2 == 63 && b3 == 0) 
{
                        return new EncodingDetector.BomResult("UTF-16LE", 
0);