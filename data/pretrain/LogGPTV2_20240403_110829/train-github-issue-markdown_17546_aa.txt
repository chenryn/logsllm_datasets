## Bug Report
**Current behavior**
  * REPL, Codesandbox, or GitHub Repo helps!
**Input Code**
    const some_func = ({arg1, arg2, arg3}: {arg1: string, arg2: string, arg3: string}): string => {
      // bruh
    }
**Expected behavior**
Can be converted parsed and compiled
**Babel Configuration (babel.config.js, .babelrc, package.json#babel, cli
command, .eslintrc)**  
Using `webpacker` \+ `babal-loader`  
Filename: `babel_loader_builder.js`
File content
    const validEnv = ["development", "test", "production"]
    const currentEnv = process.env.NODE_ENV || "unknown"
    const isDevelopmentEnv  = currentEnv === "development"
    const isProductionEnv   = currentEnv === "production"
    const isTestEnv         = currentEnv === "test"
    if (!validEnv.includes(currentEnv)) {
      throw new Error(
        "Please specify a valid `NODE_ENV` or " +
        "`BABEL_ENV` environment variables. Valid values are \"development\", " +
        "\"test\", and \"production\". Instead, received: " +
        JSON.stringify(currentEnv) +
        "."
      )
    }
    module.exports = (targets, extra_options={}) => {
      const generated_options = {
        babelrc: false,
        presets: [
          isTestEnv && [
            require("@babel/preset-env").default,
            {
              targets: {
                node: "current",
              },
            },
          ],
          (isProductionEnv || isDevelopmentEnv) && [
            require("@babel/preset-env").default,
            {
              modules: false,
              targets: targets,
              forceAllTransforms: false,
              useBuiltIns:        false,
              // Only useful when using `useBuiltIns`
              // So setting this to `false` to avoid annoying warning messages
              corejs:             false,
              exclude:            ["transform-typeof-symbol"],
              // We are specifying mutiple browser target sets
              ignoreBrowserslistConfig: true,
            },
          ],
          "@babel/preset-flow",
          "@babel/preset-typescript",
        ].filter(Boolean),
        plugins: [
          // require("babel-plugin-macros"),
          require("@babel/plugin-syntax-dynamic-import").default,
          isTestEnv && require("babel-plugin-dynamic-import-node"),
          require("@babel/plugin-transform-exponentiation-operator").default,
          require("@babel/plugin-transform-destructuring").default,
          [
            require("@babel/plugin-proposal-class-properties").default,
            {
              loose: true,
            },
          ],
          [
            require("@babel/plugin-proposal-object-rest-spread").default,
            {
              useBuiltIns: true,
            },
          ],
          [
            require("@babel/plugin-transform-runtime").default,
            {
              helpers:      false,
              regenerator:  true,
              // Fix for core-js
              // https://github.com/rails/webpacker/pull/2116/files
              corejs:       false,
            },
          ],
          [
            require("@babel/plugin-transform-regenerator").default,
            {
              async: false,
            },
          ],
          "syntax-trailing-function-commas",
        ].filter(Boolean),
      }
      return {
        loader:  "babel-loader",
        options: Object.assign({}, generated_options, extra_options),
      }
    }
File name: `.eslintrc.json`
File content
    {
      "parser": "@typescript-eslint/parser",
      "plugins": [
        "flowtype"
      ],
      "env": {
        "browser": true,
        "commonjs": true,
        "es6": true
      },
      "extends": [
        "plugin:flowtype/recommended",
        "eslint:recommended"
      ],
      "parserOptions": {
        "sourceType": "module"
      },
      "rules": {
        "complexity": ["warn", 10],
        "indent": [
          "warn",
          2,
          {
            "MemberExpression": 0,
            "SwitchCase": 1,
            "VariableDeclarator": { "var": 2, "let": 2, "const": 3 },
            "CallExpression": {"arguments": "first"},
            "ArrayExpression": 1,
            "ObjectExpression": 1,
            "ImportDeclaration": 1
          }
        ],
        "linebreak-style": [
          "warn",
          "unix"
        ],
        "quotes": [
          "warn",
          "double"
        ],
        "semi": [
          "off"
        ],
        "no-unexpected-multiline": [
          "warn"
        ],
        "key-spacing": [
          "warn",
          {
            "afterColon": true,
            "mode": "minimum",
            "align": "value"
          }
        ],
        "strict": [
          "warn",
          "safe"
        ],
        "no-new-require": [
          "warn"
        ],
        "global-require": [
          "warn"
        ],
        "no-template-curly-in-string": [
          "warn"
        ],
        "no-unsafe-negation": [
          "warn"
        ],
        "block-scoped-var": [
          "warn"
        ],
        "func-call-spacing": [
          "warn",
          "never"
        ],
        "no-extra-semi": [
          "warn"
        ],
        "no-empty-function": [
          "warn"
        ],
        "no-eval": [
          "warn"
        ],
        "no-extend-native": [
          "warn"
        ],
        "no-floating-decimal": [
          "warn"
        ],