2012.  There  is  also  a  National  Standard  Plumbing  Code,  first 
published  in  1933,  which  is  updated  annually  by  the  Plumbing, 
Heating,  and  Cooling  Contractors  (PHCC)  Association.  These 
codes  are  being  reshaped  today  to  enable  and  control  graywater 
use. There is a National Electrical Code published by the National 
Fire  Protection  Association  (NFPA)  and  updated  every  three 
years. There is also an International Building Code (IBC) which 
was  established 
to 
developing a single set of comprehensive and coordinated national 
model  construction  codes.  In  general,  these  are  “model”  codes 
which gain the force of law only when they are adopted by states, 
regions,  or  municipalities  to  govern  construction  within  their 
jurisdictions.    They  may  be  adopted  in  whole,  in  part,  or  with 
modifications to suit local needs. The latest versions of the codes, 
like  many  industrial  standards,  are  public  but  not  available  for 
free;  the  2012  IBC  is  available  electronically  for  about  $100  at 
this writing. Older versions of the codes may be found online at 
no  charge  [25].  Public  interests,  insurance  companies,  building 
trades,  architects,  engineers,  and  builders  all  participate  in  the 
process of creating and updating these codes. 
3.4  Building Code Enforcement 
Building  codes  typically  are  adopted  by  municipalities  or  other 
civil  jurisdictions  and  in  this  way  can  gain  the  force  of  law. 
Construction of a building cannot begin until a building permit is 
issued by the local authorities, and the permit will not be issued 
without  a  set  of  plans  that  have  been  stamped  and  signed  by  a 
licensed  architect  or  professional  engineer,  who  is  expected  to 
assure  the  plans  conform  to  the  applicable  codes.  A  building 
in  1994  as  an  organization  dedicated 
142
cannot  be  occupied  until  it  passes  inspections  carried  out  by 
employees  of  the  governing  entity  throughout  the  construction 
process to assure that it satisfies the applicable building codes.  A 
building inspector requires some training, and care must be taken 
to  control  conflicting  interests  of  the  builder,  inspector,  owner, 
and community. 
3.5  Building Codes and Security 
As  the  examples  above  illustrate,  building  codes  have  been 
motivated more by safety concerns than security.  Of course the 
structure  of  forts  and  castles  have  always  had  security  against 
physical attack as a primary consideration (and touring them with 
an  eye  to  the  security  measures  is  fascinating)  but  resistance 
against  intrusion  or  physical  attack  has  not  generally  been  a 
primary  concern  for  modern  building  codes.  Indeed, 
the 
placement of large boulders and Jersey barriers in front of public 
buildings  following  the  911  attacks  provides  graphic  (and 
concrete!) examples of add-on security.  
4.  SOFTWARE SYSTEMS AS BUILDINGS 
Software has long been described in architectural terms.  As noted 
above, Brooks uses the design of European cathedrals to explain 
what he means by the conceptual integrity of a software system. 
Further, he discusses the architecture of software systems and the 
importance of the role of the system architect [1, p. 41 ff,]. Like 
many homes today, much software is designed by the builder and 
assembled  from  components  drawn  from  diverse  and  little-
examined  international  supply  chains,  without  the  benefit  of  an 
architect.  
Software is often described in terms of layers, with the hardware 
instruction set providing the foundational layer, providing support 
for the higher layers, just as the foundation of a building supports 
the  entire  structure.    Already  in  1968,  Djikstra  described  the 
T.H.E. multiprogramming system in terms of hierarchical layers, 
with each new layer building on the layers below [26].  
As  Parnas  subsequently  observed  [27,28],  software  can  be 
described in terms of different kinds of hierarchies, including the 
“uses”  hierarchy,  resource  ownership  and  allocation  hierarchies, 
protection  hierarchies,  and  more.  Buildings  too  can  be  said  to 
display several kinds of hierarchies. Beyond the obvious ordering 
of floors, the heating, ventilating and air-conditioning systems, the 
electrical  systems,  the  plumbing  systems,  the  security  systems, 
and others typically display a branching structure in which some 
components  are  foundational  and  others  depend  on  them  to 
provide services to the occupants.  
Today we speak of cyberspace as a place in which we spend time. 
The  many  software  systems  that  make  up  this  place  need 
protections  analogous  to  those  our  physical  dwellings  require: 
systems  that  can  detect  intruders,  safe  escape  routes  in  case  of 
natural disaster (perhaps an earthquake may be likened to a hard 
drive  crash),  means  to  restore  the  structure  and  contents  when  a 
disaster  occurs.    Further,  the  roof  and  walls  need  to  be  kept  in 
good repair and patched when cracks appear.  
5.  SOFTWARE BUILDING CODES IN USE 
TODAY 
Some systems that include substantial software control have been 
subject  to  regulatory  control  for  many  years.  The  National 
Academy  of  Sciences  (NAS)  report  Software  for  Dependable 
Systems:  Sufficient  Evidence?  in  2007  reviewed  then-current 
certification practices for avionics software, medical software, and 
143
security  [29].    These  are  perhaps  the  closest  things  to  building 
codes for software that are currently in use. 
it 
in  medical  devices  [31].  While 
5.1  FAA 
The Federal Aviation Administration (FAA) certifies aircraft for 
flight safety and the software affecting flight safety is included in 
this  certification.  A  special  committee  (SC-145)  of  the  Radio 
Technical Commission for Aeronautics (RTCA) first developed a 
document,  Software  Considerations  in  Airborne  Systems  and 
Equipment Certification, document DO-178, in 1982. Since then 
it has been updated twice, as DO-178B in 1992 and DO-178C in 
2011.  The  NAS  report  notes  “At  least  in  comparison  with  other 
domains (such as medical devices), avionics software appears to 
have  fared  well  inasmuch  as  major  losses  of  life  and  severe 
injuries  have  been  avoided,”  although  it  goes  on  to  observe  that 
the basis for some of the required testing procedures seems to be 
poorly  justified  and  that  static  analysis  of  the  software  revealed 
many remaining “serious, safety-related defects” [29, pp. 34-35]. 
5.2  FDA 
Medical  software,  as  noted  in  [29],  is  less  uniformly  controlled 
than avionics software. The Food and Drug Administration (FDA) 
provides  “guidance”  for  software  validation  [30]  that  draws  on 
standard  software  engineering  approaches  (up  to  2002,  when  it 
was  issued);  although  the  guidance  is  not  binding  it  does  bear 
considerable  weight.  Recently, 
following  a  number  of 
demonstrations of security vulnerabilities in medical devices, the 
FDA  has  issued  its  first  draft  guidance  for  management  of 
cybersecurity 
includes 
conventional  kinds  of  guidance  for  authentication,  validation  of 
updates,  risk  analysis,  and  the  like,  it  does  not  address  software 
development practices. 
5.3  Security 
Of  course  there  is  a  great  deal  of  experience  in  the  security 
community with evaluation/certification of software and hardware 
systems.    Some  of  the  other  sessions  at  this  conference  are 
celebrating  the  30th  anniversary  of  the  first  release  of  Trusted 
Computer  System  Evaluation  Criteria  (TCSEC,  the  “orange 
book”) [32].  Today we live under the Common Criteria [33] and 
there are separate standards for certification of hardware/software 
cryptographic modules [34]. While these documents contain much 
that is valuable from a technical standpoint, it is hard to consider 
the  programs  around  them  as  successful  overall.  The  original 
TCSEC  development  was  undertaken  as  part  of  a  strategy  to 
encourage  vendors  to  build  at  least  a  moderate  level  of  security 
into their normal product lines so that the government might build 
on them to reach higher levels of assurance. This strategy didn’t 
succeed  for  a  number  of  reasons  [35].    The  Common  Criteria 
scheme has been criticized because it tends to be applied after the 
fact  (a  criticism  that  also  applies  to  earlier  TCSEC  product 
evaluations  targeted  at  levels  of  B2  and  below)  and  focuses 
primarily on specific security functions rather than the system as a 
whole. Instead of developing the required documentation as part 
of  the  development  process,  vendors  often  prefer  to  hire  a  third 
party  to  prepare  those  documents  for  the  evaluation  laboratories 
and to handle the evaluation process. “[B]ecause the certification 
process at economically feasible evaluation levels focuses on the 
functioning  of  the  product’s  security  features  even  while  real 
vulnerabilities  can  occur  in  any  component  or  interface,  real-
world vulnerability data show that products that have undergone 
evaluation  fare  no  better  (and  sometimes  worse)  than  products 
that have not” [29, pp. 31-32]. 
5.4  BSIMM and OpenSAMM 
The  current  “Building  Security  In  Maturity  Model”  (BSIMM) 
grew  out  of  an  effort  to  survey  practices  in  commercial  firms 
engaged  in  software  development  that  have  undertaken  software 
security initiatives [36].  The report’s authors have surveyed firms 
and recorded their practices in five rounds, so the current report, 
from 2013, is referred to as BSIMM-V and includes results from 
67 organizations... 
As  the  work  developed,  the  authors  identified  a  set  of  twelve 
“practices” organized into four domains (governance, intelligence, 
secure  software  development  lifecycle  (SSDL)  touchpoints,  and 
deployment).    Practices  include,  for  example  compliance  and 
policy, attack models, code review, and penetration testing.  
The  authors  make  it  clear  that  this  is  a  descriptive,  not 
prescriptive, activity. They observe what practices are in use  and 
by  recording  them  and  providing  statistical  summaries,  they 
provide  a  yardstick  against  which  firms  can  compare  their 
practices with others. The authors do not attempt to measure the 
effectiveness of the practices undertaken.  
The  Open  Software  Assurance  Maturity  Model  (OpenSAMM), 
developed  under  the  Open  Web  Application  Security  Project 
(OWASP)  also identifies a set of twelve practices in its guiding 
document  [38].  The  goal  of  the  effort  is  to  “help  organizatioins 
formulate  and  implement  a  strategy  for  software  security  that  is 
tailored to the specific risks facing the organization” [38,p.3] The 
approach seems slightly more normative than in BSIMM, in that 
the basis for the specified practices and maturity levels seems to 
intuition  and  general  observation/experience 
than 
observation  of  particular  practices.  Nevertheless,  there  seems  to 
be  a  good  deal  in  common  between  the  practices  prescribed  in 
[38] and documented in [37], and neither of the efforts attempts to 
assess effectiveness of the practices. 
5.5  NIST Cybersecurity Framework 
Following the failure of Congress to pass proposed cybersecurity 
legislation in its 2012 session, the Obama administration pledged 
to  act  within  its  existing  authorities  to  improve  cybersecurity  in 
critical  infrastructure  systems.    As  part  of  this  effort,  the 
administration issued an Executive Order in February, 2013 [38]. 
Section 7 of the order directs the National Institute of Standards 
and Technology (NIST) to “lead the development of a framework 
to reduce cyber risks to critical infrastructure (the “Cybersecurity 
Framework").” The framework is to include  
rather 
“a  set  of  standards,  methodologies,  procedures,  and 
processes  that  align  policy,  business,  and  technological 
approaches  to  address  cyber  risks.  The  Cybersecurity 
Framework 
consensus 
standards and industry best practices to the fullest extent 
possible. …”  
incorporate  voluntary 
shall 
A  preliminary  version  of  the  framework  was  released  for  public 
comment by NIST on Oct. 29, 2013; a final version is due out in 
February, 2014. 
At  this  writing,  the  most  recent  draft  framework  is  organized 
around  the  core  notions  of  “Identify  (assets),  Protect,  Detect, 
Respond,  Recover”  [39].  It  is  too  early  to  comment  on  the 
outcome of the effort, but several public meetings have been held, 
and it seems clear that the basis for the framework will be limited 
to  methods  currently  in  commercial  use.  Even  if  the  final 
framework calls for best current practice, current practice is what 
has  led  us  to  the  current  state.  Bringing  critical  infrastructure 
144
software  up  to  “best  current  practice”  would  be  laudable  but  it 
seems  unlikely  to  be  sufficient  to  deal  with  the  threats  evident 