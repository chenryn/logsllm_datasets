### 2012. National and International Building Codes

The **National Standard Plumbing Code** (NSPC), first published in 1933, is updated annually by the Plumbing, Heating, and Cooling Contractors (PHCC) Association. These codes are being continuously revised to facilitate and regulate the use of graywater.

Additionally, the **National Electrical Code** (NEC), published by the National Fire Protection Association (NFPA), is updated every three years. The **International Building Code** (IBC), established in 1994, aims to develop a comprehensive and coordinated set of national model construction codes. Generally, these are "model" codes that become legally binding only when adopted by states, regions, or municipalities to govern construction within their jurisdictions. They may be adopted in full, in part, or with modifications to meet local requirements.

The latest versions of these codes, like many industrial standards, are publicly available but not free. For instance, the 2012 IBC can be purchased electronically for about $100. Older versions of the codes may be found online at no cost [25]. Various stakeholders, including public interest groups, insurance companies, building trades, architects, engineers, and builders, all participate in the creation and updating of these codes.

### 3.4 Building Code Enforcement

Building codes are typically adopted by municipalities or other civil jurisdictions, thereby gaining the force of law. Construction cannot commence until a building permit is issued by local authorities, and this permit will not be granted without a set of plans stamped and signed by a licensed architect or professional engineer. This ensures that the plans comply with applicable codes.

A building cannot be occupied until it passes inspections conducted by employees of the governing entity throughout the construction process. These inspections ensure that the building meets the relevant building codes. Building inspectors require specialized training, and measures must be taken to manage potential conflicts of interest among the builder, inspector, owner, and community.

### 3.5 Building Codes and Security

Historically, building codes have been more focused on safety than security. While the design of forts and castles has always prioritized security against physical attacks, modern building codes generally do not prioritize resistance to intrusion or physical attack. A notable example of add-on security is the placement of large boulders and Jersey barriers in front of public buildings following the 9/11 attacks.

### 4. Software Systems as Buildings

Software has long been described using architectural terms. Brooks, for instance, uses the design of European cathedrals to explain the conceptual integrity of software systems and discusses the role of the system architect [1, p. 41 ff.]. Like many homes, much software is designed by the builder and assembled from components sourced from diverse and often unexamined international supply chains, without the benefit of an architect.

Software is often described in terms of layers, with the hardware instruction set providing the foundational layer, supporting higher layers, similar to how a building's foundation supports the entire structure. As early as 1968, Dijkstra described the T.H.E. multiprogramming system in terms of hierarchical layers [26].

Parnas later observed that software can be described using different kinds of hierarchies, including "uses" hierarchies, resource ownership and allocation hierarchies, protection hierarchies, and more [27, 28]. Buildings also exhibit various hierarchies, such as the ordering of floors, heating, ventilating, and air-conditioning systems, electrical systems, plumbing systems, and security systems, which display a branching structure where some components are foundational and others depend on them to provide services to the occupants.

Today, we speak of cyberspace as a place where we spend time. The software systems that make up this place need protections analogous to those required for physical dwellings, such as systems to detect intruders, safe escape routes in case of natural disasters (e.g., a hard drive crash), and means to restore the structure and contents after a disaster. Additionally, the roof and walls need to be maintained and repaired when necessary.

### 5. Software Building Codes in Use Today

Some systems with substantial software control have been subject to regulatory control for many years. The National Academy of Sciences (NAS) report, "Software for Dependable Systems: Sufficient Evidence?" (2007), reviewed then-current certification practices for avionics software, medical software, and security [29]. These are perhaps the closest things to building codes for software currently in use.

#### 5.1 FAA

The Federal Aviation Administration (FAA) certifies aircraft for flight safety, including the software affecting flight safety. A special committee (SC-145) of the Radio Technical Commission for Aeronautics (RTCA) first developed the document "Software Considerations in Airborne Systems and Equipment Certification" (DO-178) in 1982. It has since been updated twice, as DO-178B in 1992 and DO-178C in 2011. The NAS report notes that avionics software has generally fared well in avoiding major losses of life and severe injuries, although some testing procedures seem poorly justified, and static analysis has revealed many remaining serious, safety-related defects [29, pp. 34-35].

#### 5.2 FDA

Medical software, as noted in [29], is less uniformly controlled than avionics software. The Food and Drug Administration (FDA) provides "guidance" for software validation [30] based on standard software engineering approaches (up to 2002). Although this guidance is not binding, it carries significant weight. Recently, following several demonstrations of security vulnerabilities in medical devices, the FDA issued its first draft guidance for managing cybersecurity. This guidance includes conventional recommendations for authentication, validation of updates, risk analysis, and the like, but does not address software development practices.

#### 5.3 Security

There is extensive experience in the security community with the evaluation and certification of software and hardware systems. Other sessions at this conference celebrate the 30th anniversary of the first release of the Trusted Computer System Evaluation Criteria (TCSEC, the "orange book") [32]. Today, we live under the Common Criteria [33], and there are separate standards for the certification of hardware/software cryptographic modules [34]. While these documents contain valuable technical information, the programs around them have not been entirely successful. The original TCSEC was developed to encourage vendors to build at least a moderate level of security into their products, but this strategy did not succeed for various reasons [35]. The Common Criteria scheme has been criticized for being applied post-facto and focusing primarily on specific security functions rather than the system as a whole. Vendors often prefer to hire third parties to prepare the required documentation for evaluation, leading to real-world vulnerabilities even in evaluated products [29, pp. 31-32].

#### 5.4 BSIMM and OpenSAMM

The current "Building Security In Maturity Model" (BSIMM) grew out of an effort to survey practices in commercial firms engaged in software development that have undertaken software security initiatives [36]. The authors have surveyed firms and recorded their practices in five rounds, with the current report (BSIMM-V) including results from 67 organizations. The authors identified twelve "practices" organized into four domains: governance, intelligence, secure software development lifecycle (SSDL) touchpoints, and deployment. Practices include compliance and policy, attack models, code review, and penetration testing.

The authors emphasize that BSIMM is descriptive, not prescriptive. They observe and record practices and provide statistical summaries, allowing firms to compare their practices with others. The effectiveness of the practices is not measured.

The Open Software Assurance Maturity Model (OpenSAMM), developed under the Open Web Application Security Project (OWASP), also identifies twelve practices in its guiding document [38]. The goal is to help organizations formulate and implement a strategy for software security tailored to their specific risks [38, p. 3]. The approach in OpenSAMM is slightly more normative than BSIMM, but both efforts do not assess the effectiveness of the practices.

#### 5.5 NIST Cybersecurity Framework

Following the failure of Congress to pass proposed cybersecurity legislation in 2012, the Obama administration pledged to act within its existing authorities to improve cybersecurity in critical infrastructure systems. As part of this effort, an Executive Order was issued in February 2013, directing the National Institute of Standards and Technology (NIST) to lead the development of a framework to reduce cyber risks to critical infrastructure (the "Cybersecurity Framework"). The framework is to include a set of standards, methodologies, procedures, and processes that align policy, business, and technological approaches to address cyber risks. It aims to incorporate voluntary consensus standards and industry best practices to the fullest extent possible.

A preliminary version of the framework was released for public comment by NIST on October 29, 2013, with a final version due in February 2014. At this writing, the most recent draft framework is organized around the core notions of "Identify (assets), Protect, Detect, Respond, Recover" [39]. Several public meetings have been held, and it seems clear that the basis for the framework will be limited to methods currently in commercial use. Even if the final framework calls for best current practice, it may not be sufficient to address the threats evident today.