## 5. 漏洞成因

该漏洞是对CVE-2021-1732漏洞的绕过。首先，我们简要介绍CVE-2021-1732漏洞：

当用户调用`CreateWindow`时，在内核态函数中会检查窗口的`cbWndExtra`是否为0。如果`cbWndExtra`不为0，则通过以下路径申请用户态空间：
- `xxxCreateWindowEx` -> `xxxClientAllocWindowClassExtraBytes` -> 回调表第123项用户态函数。

在1027行，会调用`USER32!_xxxClientAllocWindowClassExtraBytes`。攻击者可以在回调函数中调用`NtUserConsoleControl`来修改窗口的`dwExtraFlag`和`pExtraBytes`，从而将窗口类型改为控制台。

Windows修复代码在1039行，检查`pExtraBytes`是否被修改。具体步骤如下：
- 计算`rdi+0x140-0x118 = rdi+0x28`，得到`tagWNDK`。
- 偏移0x128得到`pExtraBytes`，判断其是否不等于0。
- 如果`pExtraBytes`不等于0，代码会在1045行跳转并释放窗口，导致漏洞利用失败。

总结来说，CVE-2021-1732的修复方法是在调用`xxxClientAllocWindowClassExtraBytes`后，在父函数`CreateWindowEx`中判断漏洞是否被利用。然而，在后续代码更新后，出现了新的路径来触发`xxxClientAllocWindowClassExtraBytes`：
- 在`xxxSwitchWndProc`函数中调用`xxxClientAllocWindowClassExtraBytes`后，也进行了对`pExtraBytes`是否为0的检查。如果不为0，则复制`pExtraBytes`内存数据到新申请的内存地址中，但没有检查`dwExtraFlag`是否被修改。

因此，尽管CVE-2021-1732漏洞在当时得到了修复，但在新增路径下，同样的漏洞又重新出现。此外，CVE-2021-1732漏洞触发时窗口句柄还未返回给用户态，而新漏洞在窗口句柄已返回给用户态的情况下更容易利用。

## 6. 利用漏洞的流程

本节详细介绍了触发和利用该漏洞的流程，并概述了所需的知识点。

### 6.1 触发用户态回调

为了触发用户态回调，我们需要了解如何使内核回调到`USER32!_xxxClientAllocWindowClassExtraBytes`。以下是触发过程：

1. **查找调用点**：在IDA中查看`xxxClientAllocWindowClassExtraBytes`的引用，发现多处地方调用了此函数。
2. **分析`xxxSwitchWndProc`**：
   - 第98行：`cbWndServerExtra`变量赋值。
   - 第103行：调用`xxxClientAllocWindowClassExtraBytes`并将返回值赋给`v20`。
   - 第111行：检查原来的`pExtraBytes`是否为0，如果不为0，则复制内存数据并释放原来的`pExtraBytes`。
   - 第117、123行：将`v20`赋值给`pExtraBytes`。

3. **触发路径**：
   - 通过`win32u!NtUserMessageCall`（用户态）触发内核态函数`win32kfull!NtUserMessageCall`。
   - 调用堆栈如下：
     ```
     win32kfull!xxxClientAllocWindowClassExtraBytes
     win32kfull!xxxSwitchWndProc+0x167
     win32kfull!xxxWrapSwitchWndProc+0x3c
     win32kfull!NtUserfnINLPCREATESTRUCT+0x1c4
     win32kfull!NtUserMessageCall+0x11d (内核态)
     …
     win32u!NtUserMessageCall (用户态)
     ```

4. **内核态回调**：
   - `win32kfull!xxxClientAllocWindowClassExtraBytes`调用用户态的`USER32!_xxxClientAllocWindowClassExtraBytes`。
   - 使用`RtlAllocateHeap`申请内存，并通过`NtCallbackReturn`返回到内核态。

总结：触发回调函数的路径为：
```
Win32u!NtUserMessageCall (用户态) -> win32kfull!NtUserMessageCall (内核态) -> win32kfull!xxxSwitchWndProc (内核态) -> win32kfull!xxxClientAllocWindowClassExtraBytes (内核态) -> nt!KeUserModeCallback (内核态) -> USER32!_xxxClientAllocWindowClassExtraBytes (用户态)
```

### 6.2 HOOK回调函数

上一小节描述了如何触发`USER32!_xxxClientAllocWindowClassExtraBytes`函数。接下来，我们需要hook此回调函数以触发漏洞。可以通过以下代码将回调函数表项第123、124分别修改为自定义函数`MyxxxClientAllocWindowClassExtraBytes`和`MyxxxClientFreeWindowClassExtraBytes`。

### 6.3 修改窗口模式为模式1

本节介绍如何在自定义函数中通过未公开的用户态函数`NtUserConsoleControl`将窗口模式设置为模式1。以下是`NtUserConsoleControl`函数的逆向分析：

- `win32u!NtUserConsoleControl`可以设置模式为内核桌面堆相对寻址模式。
- 参数：
  - 第一个参数为功能号。
  - 第二个参数为结构体地址，结构体内存中第一个QWORD为窗口句柄。
  - 第三个参数为结构体大小。

- 调用堆栈：
  ```
  win32kfull!NtUserConsoleControl (内核态)
  win32k!NtUserConsoleControl+0x16 (内核态)
  nt!KiSystemServiceCopyEnd+0x25
  win32u!NtUserConsoleControl+0x14 (用户态)
  CVE_2022_21882!wmain+0x3f4 (用户态)
  ```

- 条件检查：
  - 第17行：参数`index`不大于6。
  - 第22行：参数`length`小于0x18。
  - 第26行：参数2指针不为空且`length`不为0。

- 调用`xxxConsoleControl`：
  - 第110行：`index`必须为6。
  - 第113行：`len`必须为0x10。
  - 第115-119行：传入参数地址指向的第一个QWORD数据必须为合法的窗口句柄。

- 设置模式1：
  - 第134、136行：判断是否包含0x800属性，如果包含，则`v23`赋值为内核桌面堆基地址+偏移量`pExtraBytes`。
  - 第140行：如果不包含0x800属性，则调用`DesktopAlloc`申请一段`cbWndExtra`大小的内存保存在`v23`中。
  - 第149-156行：如果原来的`pExtraBytes`指针不为空，则拷贝数据到刚申请的内存中，并调用`xxxClientFreeWindowClassExtraBytes`释放内存。
  - 第159、160行：使用内核地址`v23`减去内核桌面堆基址得到偏移量`v21`，将`v21`赋值给`pExtraBytes`。

示例代码：
```c
ULONG64 buff[2] = {hwnd};
NtUserConsoleControl(6, &buff, sizeof(buff));
```

总结：在自定义回调函数中调用`win32u!NtUserConsoleControl`可以设置窗口模式为模式1，传入参数需满足以下要求：
1. 参数1 `index`必须为6。
2. 参数2指向一段缓冲区，缓冲区第一个QWORD必须为一个合法的窗口句柄。
3. 参数3 `len`必须为0x10。

### 6.4 回调返回伪造偏移量

在`_xxxClientAllocWindowClassExtraBytes`函数中调用`NtCallBackReturn`可以返回到内核态。我们需要伪造一个合适的偏移量`Offset`，然后将其地址传给`NtCallbackReturn`，从而将`offset`赋值给`pExtraBytes`。

- 由于之前已经切换窗口为模式1，`pExtraBytes`表示相对于内核桌面堆基址的偏移。
- 查看`tagWNDK`结构体中的关键字段：
  - `+0x08 ULONG64 OffsetToDesktopHeap;` // 窗口`tagWNDK`相对桌面堆基址的偏移。
  - `+0xE8 DWORD dwExtraFlag;` // 包含0x800即为模式1。
  - `+0x128 ULONG64 pExtraBytes;` // 模式1：内核桌面堆偏移量；模式2：用户态指针。

伪造偏移量的方法：
1. 创建多个窗口，如窗口0和窗口2（为了与EXP匹配），窗口2触发回调函数，返回窗口0的`OffsetToDesktopHeap`，赋值给窗口2的`pExtraBytes`。
2. 对窗口2调用`SetWindowLong`时，写入的目标地址为：内核桌面堆基址 + `pExtraBytes` + `index`。此时`pExtraBytes`为窗口0的地址偏移，对窗口2调用`SetWindowLong`可以写窗口0的`tagWNDK`结构数据，这是第一次越界写。

总结：调用`NtCallbackReturn`可以返回到内核中，伪造偏移量为窗口0的`OffsetToDesktopHeap`，赋值给窗口2的`pExtraBytes`。当对窗口2调用`SetWindowLong`时即可修改到窗口0的`tagWNDK`结构体。

### 6.5 泄露内核窗口数据结构

在用户态中，我们需要返回窗口0的`OffsetToDesktopHeap`到内核态。`OffsetToDesktopHeap`是内核态的数据，用户态无法直接访问。但是系统将`tagWNDK`的数据映射了一份只读数据到用户态，可以通过`HMValidateHandle`函数获取。

- 动态库中未导出`HMValidateHandle`函数，需要通过`IsMenu`函数定位：
  ```c
  tagWNDK* p = HMValidateHandle(hwnd);
  ```

通过`tagWNDK`指针即可获取`OffsetToDesktopHeap`数据。

### 6.6 如何布局内存

通过上述知识，我们可以利用窗口2修改窗口0的`tagWNDK`结构体数据。本节描述如何布局内存，构造写原语。

1. **创建窗口0**：
   - 将窗口0切换到模式1，`pExtraBytes`为扩展内存相对内核桌面堆基址的偏移量。
   - 窗口2触发回调后，回调函数中对窗口2调用`NtUserConsoleControl`，使窗口2也处于模式1，`pExtraBytes`为扩展内存相对内核桌面堆基址的偏移量。

2. **回调函数中返回窗口0的`OffsetToDesktopHeap`**：
   - 此时窗口2的`pExtraBytes`为窗口0的`OffsetToDesktopHeap`，指向了窗口0的结构体地址。
   - 对窗口2调用`SetWindowLong`即可修改窗口0的内核数据结构。

3. **通过窗口2修改窗口0的`cbWndExtra`**：
   - 扩大窗口0可读写的范围。
   - 内存布局如下：
     - 窗口2的`pExtraBytes`指向窗口0的`OffsetToDesktopHeap`。
     - 通过窗口2修改窗口0的`cbWndExtra`。

示例代码：
```c
SetWindowLong(窗口2句柄, ...);
```

总结：通过上述步骤，我们可以利用窗口2修改窗口0的`tagWNDK`结构体数据，进而实现内核数据的越界写。