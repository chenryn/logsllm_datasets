patch tables which also encodes some basic constraints enforced
by kernel automatically (i.e., desired sizes of the input and output).
Similar to p-joker [28], SyzGen extracts such constraints whenever
available (typically common in simple drivers) and encodes such
information in the initial template as well. In the next component,
we will describe the more fine-grained structure and constraint
inference.
4.3 Interface Recovery
This is a core part of SyzGen, which aims at reconstructing the
argument structures and collecting their more fine-grained con-
straints. Most importantly, SyzGen generalizes the knowledge of
dependencies it has learned from logs (see §4.1) to those interfaces
without any trace and thus can uncover more dependencies.
Choice of dynamic symbolic execution. A recent work DIFUZE
has opted for static analysis to reconstruct the nested argument
structures from source code. This is a reasonable choice when
the source code is available. Even then, static analysis is limited
due to the challenge of precisely reasoning about program values
and pointer relationships. It gets even worse for closed-source
macOS drivers. As a result, we choose dynamic symbolic execution
instead, which fits our problem better. First, analyzing the interfaces
dynamically (with concrete memory states) allows us to bypass the
precision challenge of static analysis. Second, we are able to collect
useful constraints about valid ranges of various arguments as well
as relationships among different fields. However, the downside is
that it may suffer from the path explosion problem. Fortunately,
in the case of drivers, syscall arguments are usually checked at
the very beginning of syscalls (most are simple sanity checks) and
thus SyzGen only needs to perform symbolic execution up to these
points, which is much more manageable.
Test Case Generation. To perform dynamic symbolic execution,
we need to obtain valid test cases that correctly set up the context
(e.g., global variables) so we can symbolize the arguments of an in-
terface to explore deeper parts of the code. As mentioned in §4.1, we
have an initial corpus of test cases that already exercise known ex-
plicit dependencies. Going back to the motivating example, we can
easily obtain a test case with both OpenLink() and CloseLink(),
exhibiting a dependency. Therefore we can symbolize the argument
of CloseLink() and learn the structure and constraints of it, with-
out worrying about an early exit of the function due to the lack of
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea754a correct dependence variable. We also allow the fuzzer to generate
a few more variants to improve the diversity as explained in §5.
For the cases where we do not have any valid test case for an in-
terface, we will need to do some more work iteratively. For the same
motivating example, since we do not have any test case that has ex-
ercised FlushLink(), SyzGen will first try to infer any potential ex-
plicit dependence with other interfaces (see later in the section). At
a high level, SyzGen will initially generate a test case exercising only
one interface (in addition to the prologue of IOServiceOpen()),
and it will then use the learned knowledge about its arguments
and any new explicit dependence to continue to improve the test
case. For the interface FlushLink() as an example, though SyzGen
would initially fail to explore any deep code with the initial test
case as it does not set up proper context and thus leads to an error
path. Specifically, it is likely that no OpenLink() is invoked, and
even if it is, its return value is not passed to FlushLink(). Even
though we may not be able to learn the structure or constraints of
its argument, a symbolic execution still likely allows us to reach
the critical function LookupLink() responsible for checking the
dependence variable, triggering SyzGen to become aware of the
potential dependence. After it learns FlushLink() also requires a
dependence variable of type LinkID, it could refine the specifica-
tion and produce another test case respecting the dependence as
follows:
int id = OpenLink();
struct FlushRequest req = { .linkID = id };
FlushLink(&req);
With the valid sequence of syscalls, SyzGen can then redo the dy-
namic symbolic execution on FlushLink(), extracting more com-
plete knowledge about the structure and constraints of the argu-
ment.
Dependence Generalization. Now we describe the methodology
to generalize dependencies beyond the ones we observed in the
past. Using the motivating example in §3.1, given the knowledge
of the dependence variable LinkID learned from logs (see §4.1),
SyzGen first analyzes the use interface CloseLink() and figures
out what internal dependence operation is performed to retrieve
the corresponding kernel object generated before. In Fig. 2, it hap-
pens through another function call of LookupLink(). To recognize
such function calls, we observe that the function call must take
in the dependence variable as an argument, and return an object.
Furthermore, to avoid false dependence being identified due to any
irrelevant “helper” functions (e.g., copy_from_user liked functions)
we allow only the functions defined within the target driver (as
opposed to external modules). Our observation for macOS is that
external functions in the core kernel (invoked by drivers) are not
designed to handle dependencies in drivers.
After discovering such a function call, we label the internal de-
pendence operation to be a function call (LookupLink()) together
with the parameter corresponding to the dependence variable (1st
argument of LookupLink()). When symbolically executing a new
interface (e.g., FlushLink()), we will look for the same internal
dependence operation. If there is a match, we will further look at
whether the argument of the internal dependence operation is a
symbolic variable. If so, it confirms the generalized dependence,
Figure 5: Dependence inference through common access
pattern gService→links→head→value if LookupLink is in-
lined in the motivating example.
and we can also learn which bytes of the input constitute a depen-
dence variable. This allows SyzGen to encode the new dependence
in the template, setting the stage for the next step of structure and
constraint recovery.
In practice though, such “lookup” functions may not be imple-
mented as an actual function invocation, or they may have been in-
lined such that it is hard to recognize in the binary. To support such
internal dependence operations, we observe that there must be some
form of check to validate the dependence variable and subsequently
use it to retrieve the corresponding kernel object. An example is
shown in Fig. 5, where a linked list is traversed and the dependence
variable is compared against the same field in every element. An-
other common case is to use the dependence variable as an array
index to obtain the corresponding object, for which there is always
a check against the index to ensure no out-of-bound access would
occur. Based on this observation, we may craft simple signatures
based on such checks and match them in new interfaces. However,
if we only look at a simple check against the dependence variable, it
may lead to false positives. This is because in the new interface (e.g.,
FlushLink()), we do not yet know which bytes correspond to the
dependence variable. Therefore, there may be similar checks per-
formed against bytes that are not the dependence variable. Never-
theless, if we carefully examine the check in the example “p→value
!= arg→linkID”, we can find that the left side of the check is a
value derived from a pointer, which in turn is originated from the
global variable “gService” through a chain of dereferences. Intu-
itively, we can annotate the check with sufficient history (i.e., the ori-
gin of the variable) so that the generated signature could be unique
enough. Formally, the signature can be formulated in the form of
ASTs (i.e., symbolic expressions) following the notation in Fig. 6.
For the motivating example in Fig. 5, the corresponding signatures
are the following: “neq [[[gService+264]+8]+8] linkID” and
“neq [[[gService+264]+8]+8] unknownFields[0]” 2 where
2We omit some structure definitions in the motivating example and those immediate
values are offsets to some fields.
01  int CloseLink(struct CloseRequest* arg) {02      p ← gService->links->head;03      while (p->value != arg->linkID) {04          p ← p->next;05          if (p == NULL) goto error;06      }07      … … 08  }09  int FlushLink(struct FlushRequest* arg) {10      p ← gService->links->head;11      while (p->value != *(int*)&arg->unknownFields[0]) {12          p ← p->next;13          if (p == NULL) goto error;14      }15      … … 16  }Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea755Figure 6: Notation for formula (signature)
neq means inequality. By simply comparing the two signatures,
we can learn that unknownFields[0] is the same dependence vari-
able as LinkID. In addition to this exact match, we also allow a
relaxed version of match in which opposite operators can match
with each other (e.g., equality and inequality) to cope with some
nuances potentially induced by compilers. To further reduce false
positives, a valid signature requires at least one dereference and
exactly one symbolic variable because it is unlikely the validation
of a dependence variable involves other inputs. It is worth noting
that our scheme is to mechanically extract formulas (as signatures)
from whatever checks performed on the dependence variable and
the two types of checks aforementioned are only examples that are
correctly identified by our solution.
Structure and Constraints Recovery. From the previous steps,
we can always have a test case exhibiting a valid explicit depen-
dence, distilled from existing traces or obtained from the depen-
dence generalization. For the test cases that come from existing
traces, we already know the rough structure of the void* object,
including its size, and any additional layers of objects reachable
through its pointers from the earlier steps. For the test cases that
come from the dependence generalization, we may have the knowl-
edge of the dependence variable but nothing else regarding the
input.
The process is slightly dependent on which case we are faced
with. In the first case, even though we know the size of the object,
up to this point, we still treat each layer of the object as a flat
array. To infer more structures, during the symbolic execution,
we simply symbolize all the memory associated with the object
(including all the layers). We then monitor every “use” instruction
of the symbolic memory to determine the boundary of the various
fields. Specifically, SyzGen identifies fields of sizes 8, 16, 32, and 64
bits at byte granularity. In addition, we infer the basic types of the
fields based on how they are used. The list of supported types is
shown in Figure 7. We omit the details as it is following a similar
solution to Tupni [10].
In the second case, since we do not yet know the size of the
void* object, SyzGen initially symbolizes the void* input as a flat
array with 4,096 bytes. This is because the symbolic length of arrays
is poorly handled in symbolic execution engines [4] and thus we
start with a size large enough for most inputs. We then perform
the same analysis as above to determine the boundary of fields and
their basic types. In addition, if any pointer is found (via deference
instructions), we will concrete its value to a user-space address, and
symbolize the memory accordingly. To determine the size of the
symbolic memory, we again look for the macOS-equivalent API
copy_from_user() as we did in §4.1.
Finally, since our solution is based on symbolic execution, SyzGen
generates one template for each explored path and later merges
them. In particular, we are interested in retaining the templates for
which we are able to explore relatively deeper parts of the kernel.
Thus, we prune the templates with paths that terminate early, e.g.,
due to failing to pass sanity checks. SyzGen applies the hierarchical
agglomerative clustering algorithm [11] to group templates that
are similar in size, and prune the clusters that correspond to the
shorter paths. In particular, the algorithm clusters the templates in
the form of a binary tree where the leaf nodes are the individual
templates. Our policy is such that if a non-leaf node (corresponding
to a cluster) whose centroid of path depth is less than 0.5 of that
of the sibling node, we will prune it. To safeguard the shorter but
also functional paths (preventing them from being pruned), we
also keep the templates whose number of executed basic blocks
exceeds a pre-determined threshold (e.g., 500 in our experiments).
The parameters of 0.5 and 500 are empirically determined based
on the number and quality of generated templates. Lowering those
thresholds would preserve more corner paths at the cost of fuzzing
efficiency as it increases the search space. In addition to path prun-
ing, SyzGen recursively merges templates as we will explain in
§5.
5 IMPLEMENTATION
We have implemented SyzGen with 7.2K lines of Python code for
interface recovery, 1K lines of C code for kernel coverage, 463 lines
of C code for syscall logger, and 1K lines of Go code into Syzkaller
for fuzzer. We also implemented scripts based on IDA Pro [2] to
collect addresses of basic blocks and function signatures (i.e., the
number of parameters and where they are stored).
Symbolic execution. Currently, there is no publicly available
tool that can perform dynamic symbolic execution of the whole
macOS kernel, as what S2E [8] can do on Linux kernels. Fortunately,
as articulated earlier in §4.3 , SyzGen only needs to focus on one
interface at a time and perform dynamic symbolic execution on a
small portion of the driver. As a result, we developed our symbolic
execution component based on angr [27] and kernel debugging,
allowing us to take a snapshot at any kernel address and prepare a
memory state for dynamic symbolic execution. More specifically,
SyzGen prepares a test case containing the target interface to set up
the proper context (see §4.3), pause the kernel execution when it
reaches the target interface, and then conduct symbolic execution
under this context (i.e., with the memory snapshot). To improve
the scalability of symbolic execution on kernel and cope with ker-
nel functions requiring hardware or multi-threading support, we
manually model some kernel functions belonging to the core ker-
nel to be general, such as strcpy(), malloc(). For the rare cases
where driver-specific functions also need modeling (e.g., interact-
ing with hardware), we simply terminate the symbolic execution.
Fortunately, such functions are typically behind the input sanity
checks, posing minimal impact on constraint extraction. In total,
we have modeled 60 functions, 30 of which can be simply replaced
with a dummy function, e.g., printf() and sleep(). Also, we set a
5-minute timeout for each run of symbolic execution since SyzGen
only needs to perform symbolic execution to pass sanitization that
is usually imposed at the beginning of interfaces.
var:     symbolic variableimm:   immediate value[ ]:       dereferenceop1:    binary operatorsop2:    unary operatorsexpr:   var | imm | [expr] | op1 expr expr | op2 expr            | if (expr) then expr else exprSession 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea756requirement of specific hardware, virtual machine, or source code.
Basically, we leverage the built-in kernel debugger (available in
all modern OSes) composed of an agent running inside the kernel
to receive and execute commands and a debugger running on a
remote machine to send commands to the kernel and display the
results. The agent internal to the kernel is capable of setting break-
points at specific virtual addresses by patching the code with INT3
instructions. When the breakpoint is hit, the kernel would pause
and divert its execution to the agent, which in turn sends related
information to the remote debugger and wait for its subsequent
commands (e.g., resume). By setting the breakpoints at the begin-
ning of every basic block we are interested in, we can effectively
collect the block coverage feedback. However, the communication
between the in-kernel agent and a remote debugger is prohibitively
expensive. Therefore, we develop another in-kernel module acting
as the debugger and collect coverage natively. As an optimization,
SyzGen removes breakpoints that have been hit to eliminate need-
less tracing overhead (as suggested by UnTracer [20]) and thus
collects only block coverage. The implementation only takes 1K
lines of C code and can be ported to other OSes for closed-source
kernel module fuzzing since most OSes share similar designs for
kernel debugging.
6 EVALUATION
To determine the effectiveness of SyzGen we evaluate both its inter-
face recovery and bug-finding capabilities. Our experiments answer
the following questions:
1. How is SyzGen’s effectiveness on interface recovery (§6.2)?
2. How much does dependence generalization contribute (§6.3)?
3. Can SyzGen find real-world vulnerabilities (§6.4)?
6.1 Evaluation Setup
Since there is no prior work to generate syscall specification for ma-
cOS drivers from end to end, we evaluate SyzGen by breaking down
each component. It is worth noting that we have re-implemented
most related work (i.e., p-joker[3] and IMF[14]) in SyzGen and even
made them better. Specifically, we run the following configurations
of SyzGen:
• SyzGen-Base. It is an improved version of p-joker with advanced
symbolic execution and automated specification generation. Af-
ter the step of service and command identifier determination
(see §4.2), SyzGen can already produce an initial specification
with the knowledge of interfaces and some simple constraints
on inputs extracted from dispatch tables (whenever available).
As we will show later, this configuration represents a compelling
baseline, especially for those small and simple drivers.
• SyzGen-IMF. Though IMF [14] only works with syscall that has
known specifications, its idea to infer explicit dependence from
syscall logs can be applied to unknown drivers with some adap-
tation (see §4.1). In this configuration, we retain the explicit
dependencies learned from logs but disable the dependence gen-
eralization component. Interface recovery is performed as well.
This represents a strong configuration that is similar but more
complete than the original IMF.
Figure 7: Supported types for syscall specifications
Service type identification. One service can provide different
user clients through a uniform interface IOServiceOpen, each of
which is bound to a unique integer passed as the third argument
“type”. Hence, the driver needs to firstly check the argument to fig-
ure out which user client to instantiate. To infer the valid values, we
conduct a dynamic symbolic execution on IOServiceOpen() with
the third argument “type” symbolized. More specifically, SyzGen
looks for class initialization (i.e., IOUserClient::IOUserClient)
of any user client during symbolic execution and then performs
constraint solving against the service type to obtain the unique
value. In the case where multiple values are valid, which usually