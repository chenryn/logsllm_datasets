常。 
——支持复杂环境下的异
常体验定位。 
——有体验异常决策能力。 
——标准化工具修复体验
异常。 
——端到端的性能管理能
力，能够进行趋势分析。 
9 系统和工具能力要求 
9.1 项目管理 
9.1.1 需求与任务管理平台 
平台对项目设计与开发过程中所有需求、计划和任务进行管理。应包含以下基本功能： 
——支持优先级设置，不同优先级表示不同严重级别或重要程度； 
——支持状态设置与变更，不同状态表明需求、计划和任务所处的阶段。如任务创建于 Open 状
态，然后开始执行/Progress，再到完成/Finished，最后被关闭/Closed。根据情况的不同，用
户可以根据项目来定制状态以及工作流； 
——支持分类管理和关键字标识； 
——支持可视化面板，可以简单地创建、复制，生成多个面板，面板可以展示项目统计报表。 
——至少支持邮件、RSS、即时通讯中的一种通知方式，能在项目关键阶段自动发送通知。支持非
项目参与人（具有项目权限）关注项目动态并接收到通知。系统页面明显的位置发布最新通知
公告； 
——安全与权限。应指定项目负责人，支持项目指派、再指派、认领、二次认领。可以自定义安全
级别，不同用户对项目有不同权限； 
——支持项目关联； 
——支持项目处理流程跟踪； 
——支持搜索。 
9.1.2 文档与知识管理平台 
文档是产品交付的核心研发资产之一。常见文档类型包括架构设计文档、用户帮助手册、系统原型
文档等。应包含以下基本功能： 
——支持用户按照一定的目录结构对各种文档进行分门别类地管理； 
——支持通过拖拽方式批量上传本地目录或文件至文档管理服务中； 
——支持批量下载文档； 
——支持常见格式文档的在线预览； 
——支持文档版本管理，用户可以选择文档的某个版本进行过查看、下载等操作； 
——支持搜索功能，用户可以通过文件名、关键字等快速查找到所需的文档； 
T/IAC XXXXX—201X 
16 
知识管理涵盖产品交付过程中个人或者团队的各种知识内容，例如会议纪要、版本ReleaseNotes、
技术分享等。应包含以下基本功能： 
——支持词条创建、编辑、分类和分享； 
——支持多人协同编辑； 
——支持搜索； 
——可导出为常见文档格式（例如Word、PDF、PPT等）； 
——支持上传常见文档格式的附件（例如Word、PDF、PPT等）； 
——宜支持Wiki、Markdown格式。 
9.1.3 统计度量 
统计度量是对DevOps过程的进度、质量、效率相关数据化指标展示。应包含以下基本功能： 
——进度相关指标：需求累计流图、缺陷趋势图、需求完成数、新建缺陷数； 
——代码内在质量相关指标：包括但不限于代码质量、千行代码bug率、缺陷Reopen率、测试通过
率； 
——交付外在质量相关指标：包括但不限于故障率、线上问题率、发布回滚率； 
——需求交付时长相关指标：需求从提交到交付的时长； 
——缺陷解决时长相关指标：包括但不限于缺陷从创建到关闭的平均时长，表征解决缺陷的效率； 
——代码交付时长相关指标：代码从提交到交付的时长； 
——人效相关指标：对使用人员的基本产出能力度量，包括但不限于完成需求数、解决缺陷数、完
成任务数、提交代码量。 
9.2 开发管理 
9.2.1 代码管理平台 
应包含以下基本功能： 
——版本仓库：支持版本仓库的建立、删除、分类、复制、派生、限额、扩容、共享与可见范围； 
——分支管理：支持分支的创建、删除、追溯、分类和识别； 
——权限管理：支持权限的分级，如查看、提交、合并主干等权限； 
——变更与合并管理：支持变更的追溯和回滚，支持合并的追溯； 
——基线管理：支持基线的创建、删除、追溯、分类和识别； 
——代码Review：支持Review的发起和管理； 
——存储和备份：支持支持代码的存储和备份； 
——安全保障：账号具有唯一性；支持重要操作保护；支持日志审计与回溯。 
9.2.2 代码质量管理 
代码质量管理提倡用代码检查工具在开发阶段发现缺陷，让缺陷在最短路径闭环，提升开发效率，
节省开发成本。应该包含以下基本功能： 
——支持Java、C/C++、JavaScript、PHP等多种主流编程语言的代码质量检测； 
——持续检查，能够提供代码缺陷概览，并实时跟踪新增代码引入的缺陷、已有缺陷修复情况； 
——集成到整个DevOps工具链中，定时/实时自动化开展； 
——代码质量符合度标准应不断审视和优化，能够看到项目的持续改进； 
——项目核心代码工具检查覆盖率为100%； 
T/IAC XXXXX—201X 
17 
——代码质量报告能够自动生成，要求有新增缺陷，修复缺陷，遗留缺陷以及相关趋势等量化质量
指标； 
——能够看到项目组制定的缺陷修复计划和行为，遗留缺陷趋势保持收敛下降。 
9.3 集成与部署管理 
9.3.1 持续集成 
应包含以下基本功能： 
——保存多个构建项目； 
——设置代码仓库地址，以及拉取源代码的凭据； 
——设置一个或多个构建命令； 
——支持多种源代码语言的编译； 
——支持多种源代码托管软件； 
——设置自动触发条件：定时触发，源代码变更触发； 
——构建项目应该含多个执行记录； 
——构建执行记录展示记录状态，以及结果； 
——构建执行记录展示构建过程产出的日志。 
9.3.2 制品管理 
制品管理是对软件研发过程中生成的产物的管理，一般作为最终交付物完成发布和交付。 制品即
构建过程的输出物，包括软件包，测试报告，应用配置文件等。应包含以下基本功能： 
——支持npm、bower、rpm等更多种类的制品类型； 
——为制品添加元数据信息； 
——使用制品的审计日志； 
——基本的权限管理； 
——检索制品； 
——备份和恢复。 
9.3.3 部署管理 
应包含以下基本功能： 
——自动打包； 
——支持编排部署步骤，可以根据业务场景自定义部署流程； 
——可视化：仪表盘支持显示部署活动状态等内容； 
——支持Docker等多种部署运行方式； 
——支持部署活动审计，日志信息可发送到日志分析系统； 
——API接口：支持应用系统调用部署系统能力进行部署。 
9.3.4 发布管理 
发布管理是将通过构建的程序，发布到软件环境中。应包含以下基本功能： 
——发布规划，规划软件程序的整体发布计划，包含但不限于：发布窗口、发布策略、发布执行、
发布确认，以及发布风险的预估； 
——发布窗口，程序发布的具体日期时间； 
T/IAC XXXXX—201X 
18 
——发布策略，通过选择进行发布的实例、发布并发度、超时时间、暂停点、软件版本等发布的具
体策略，执行对应的发布动作；发布策略包含并不限于原地发布、金丝雀发布、蓝绿发布等； 
——发布执行，自动化地执行发布策略，如策略中有暂停点，应验证后继续执行发布； 
——发布确认，通过发布规划中软件发布的确认点，进行发布确认，如与预期不一致，可快速回滚
到发布前的软件版本。 
9.3.5 环境管理 
环境管理是一种配置管理活动，确保应用在多个环境之间达到持续交付的目的。应包含以下基本功
能： 
——可以定义不同的环境类型（开发、测试、预发布及生产环境）； 
——可以定义不同的环境依赖资源信息及其配置，比如主机、容器集群、DNS、中间件、其他基础
设施服务等； 
——可以根据环境的配置快速生成交付环境； 
——可以让环境的配置信息存储在构件库中，版本化控制配置信息； 
——可以支持应用运行的环境是静态主机集群或者是动态的容器集群； 
——可以支持不同的应用有不同的基础设施及服务依赖； 
——可以支持不同的对象分块构建，比如说构建基础设施、构建中间件或者操作系统环境等； 
——可以支持不同的环境采用不同的构建技术，比如说虚拟化、容器等等，但测试环境和生产环境
必须类似； 
——可以支持环境的配置信息与应用或者项目关联； 
——对环境提供监控功能。 
9.4 测试管理 
9.4.1 用例管理 
用例管理是对用例集、子用例集和用例的管理活动。应包含以下基本功能： 
——用例集中可以包含多个用例和子用例集； 
——树形展示用例集中包含的用例和子用例集，子用例集可以逐层下钻； 
——设置用例集、子用例集的名称、标签、状态； 
——设置用例名称、描述、标签、状态、优先级、是否自动化、设计人员； 
——设置用例的测试步骤，包括步骤描述、输入测试数据，期望结果； 
——设置用例集、子用例集、用例和需求、特性、故事的关联； 
——设置自动化测试用例和测试脚本的关联。 
9.4.2 缺陷管理 
缺陷管理是指在软件生命周期中识别、管理、沟通任何缺陷的过程，确保缺陷从被识别到解决关闭
的过程被跟踪管理而不丢失。应包含以下基本功能： 
——描述缺陷内容，支持上传视频、图片等附件； 
——标记缺陷优先级； 
——将缺陷指派给特定的人； 
——标记缺陷的不同状态，状态覆盖从新建到解决关闭的整个过程； 
——可添加评论； 
——指派缺陷、更改缺陷状态，发送消息给相关人员； 
T/IAC XXXXX—201X 
19 
——可按照指派人、优先级、当前状态等维度过滤缺陷； 
——更新状态的操作有权限控制，缺陷要进入不同的状态需要特定角色或特定人员才能操作； 
——区分缺陷的解决状态和关闭状态，开发人员标记为已解决的缺陷，被验证后再关闭； 
——缺陷可关联到修复该缺陷的代码。 
9.4.3 测试数据管理 
测试数据管理是指在测试过程中完成数据收集、生成、维护、自动化的过程。应包含以下基本功能： 
——数据仓库，支持用户存储、扩充、共享和重用测试数据集，以提高测试效率； 
——测试数据生成：当生产数据不能直接用来进行测试时，为测试提供按需创建的生产质量数据，
允许测试人员根据业务规则和限制条件快速创建复杂的数据集； 
——支持敏感数据发现与脱敏。通过降低数据敏感性、匿名化敏感数据、对数据进行假名处理等手
段，创建可在内外部安全共享的真实匿名化数据，避免敏感数据泄露； 
——支持在多应用系统和数据库中创建和管理数据子集，减少测试数据占用的空间和存储时间。 
9.4.4 静态代码检查 
静态代码检查是持续交付流水线中的一个重要环节，利用商用/开源/自研的代码检查工具在开发阶
段发现缺陷，让缺陷在最短路径闭环。应包含以下基本功能： 
——对代码进行静态扫描，发现代码缺陷、安全漏洞及编程规范、重复代码、复杂度高等代码坏味
道问题； 
——能够自动触发/立即分析/定时开展，实时展示扫描进展状态，及时反馈代码检查结果； 
——方便查看告警及错误代码片段，提供规则描述及告警修复指导； 
——检查结果有优先级/严重程度的划分，能跟踪到状态； 
——支持检查规则配置，支持单个告警/批量告警/告警路径屏蔽等功能； 
——自动生成代码检查报告，有新增/修复/遗留告警等质量度量指标； 
——多种工具检查结果能够整合展示在报告中便于开发团队修复。 
9.4.5 性能测试 
应包含以下基本功能： 
——支持性能测试项目的测试脚本、测试结果、测试报告的基本管理功能； 
——支持主流测试协议； 
——支持负载参数集读取数据文件功能； 
——支持负载参数集自动生成序列数字、随机数字等功能； 
——负载参数集数据读取支持：顺序、随机、数据文件读取、数据文件分段读取、文件读取的功能； 
——支持脚本逻辑控制功能，脚本编辑功能； 
——支持性能测试结果数据输出，包括测试发送数据及服务端响应数据等； 
——支持思考时间设置功能； 
——支持请求超时、响应超时设置功能； 
——支持性能测试执行过程中服务端回送数据正确性检查的功能； 
——支持长连接、短连接设置； 
——支持数据上下文关联的功能； 
——支持性能测试场景设置功能，性能场景：性能测试过程中模拟真实用户的服务流程或业务处理
过程的一系列动作的集合； 
——支持性能测试指标数据实时输出的功能； 
T/IAC XXXXX—201X 
20 
——支持性能测试报告查看及导出功能； 
——支持采集性能监控指标的功能； 
——支持性能测试过程中各类错误显示、汇聚的功能； 
——HTTP、HTTPS协议应支持GET、POST方法的测试； 
——支持HTTP协议COOKIE设置。 
9.5 技术运营管理 
9.5.1 CMDB 
配置管理数据库（CMDB）存储与管理企业IT架构中设备的配置信息。应包含以下基本功能： 
——可视化管理：能够可视化展示拓扑信息、资源数量、资源使用情况、资源变化趋势等内容； 
——数据的导入和导出：支持通过Excel等形式导入配置信息，提供表格导出； 
——建立自定义CI来定义及管理需要的对象； 
——属性自定义：用户可以选择需要展示的属性字段，也可以增加平台没有的属性字段； 
——分类管理：可从业务、集群等多种维度进行分类管理； 
——操作审计：用户操作记录可追溯； 
——资源自动发现； 
——分钟级配置数据一致性校验； 
——API接口：通过接口保证CMDB数据的一致性。 
9.5.2 作业平台 
应包含以下基本功能： 
——脚本管理：支持脚本的新建、自动执行、编辑和删除，可以通过手动编写、上传、已有脚本克
隆等方式导入脚本； 
——支持大文件拉取/分发，支持本地上传和服务器上传两种方式； 
——支持多个脚本或文件分发的节点串接组合后执行； 
——常用作业执行，可对已保存作业任务进行“执行、克隆、编辑、定时、删除”等操作； 
——支持高并发执行任务； 
——支持秒级定时任务； 
——API接口：提供API接口供其他系统或平台调度； 
——操作审计：能够对脚本执行、文件分发、API调用、定时任务等操作进行记录和追溯。 
9.5.3 监控管理 
应包含以下基本功能： 
——指标收集：支持服务器、虚拟机、网络设备等多种设备，保险业务系统、内外部接口（如保
险承保、支付确认）等多种系统和应用程序的监控，能够自动完成指标采集； 
——问题检测：支持自定义阈值、策略，自动检测采集指标的问题状态； 
——可视化管理：通过仪表盘、网络图、表格等形式呈现监控对象环境状态； 
——自动发现：能够主动代理、自动注册； 
——通知：至少支持邮件、RSS、即时通讯中的一种通知方式，能在出现问题时及时发送通知。 
9.5.4 日志分析 
应包含以下基本功能： 
T/IAC XXXXX—201X 
21 
——日志采集与存储：支持采集服务器、网络设备、保险业务系统、内外部接口的日志，留存
取证； 
——快速搜索查询：支持海量日志快速和多维度查询，包括范围查询、正则表达式、模糊匹
配等方式。能够对查询字段进行定位日志上下文； 
——核心业务统计分析：支持多种统计分级函数。能够对理赔、续保等保险核心系统的业务进行汇
总和分析，生成业务统计报表，支持通过接口调用，作为决策依据，为问题排查提供参考信息； 
——用户画像：掌握用户特征，能够对用户偏好做出反应和判断； 
——可视化报表。