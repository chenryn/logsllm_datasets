ousness of R will be proved in Theorem 1 below. The pro-
tocol proceeds by ﬁrst describing how Alice and Bob make
S ∈ ZQ which is chosen uniformly at random, but Alice may
have partial knowledge of its value (Bob however is oblivi-
ous to the value of S). This is followed by the two parties
forming T ∈ ZQ in an analogous manner but with their roles
reversed, so that it is Bob who may have partial knowledge
about T , and Alice who is oblivious. From these they will
set R = S + T (Mod Q).
We present ﬁrst a brief high-level description of how they
make S ∈ ZQ. We imagine the numbers 0 through Q − 1 to
be partitioned into groups that each have size a power of 2,
as determined by the binary expansion of Q. For example,
if Q = 37 = 100101, then we partition [0..36] into the sets of
size 1, 4, and 32: {0}, [1..4], [5..36]. We then choose a value
from each of these sets uniformly at random, so that if there
are m sets, then we choose m random values {S1, . . . , Sm}.
Finally, we set S to be one of these m values, according to
a probability that depends on the size of each set. More
speciﬁcally, if the ith set has size 2j , then we set S to be Si
with probability 2j
Q .
3.4 Description of the Protocol
Input. Alice has QA ∈ ZN and Bob has QB ∈ ZN .
Output. Alice and Bob share R ∈ ZQ, where R has been
chosen obliviously (as in Deﬁnition 2) and uniformly at ran-
dom. More speciﬁcally, Alice has RA ∈ ZN and Bob has RB
such that:
R = RA + RB (Mod N ) ∈ [0..Q − 1].
Cost. This protocol will add O(K 2) to communication.
Note. This protocol ﬁrst requires that Bob knows the de-
cryption key for some homomorphic encryption scheme with
security parameter K, so that Alice can perform computa-
tions on their joint inputs without being able to decrypt.
The protocol then ﬂips the roles of Alice and Bob, so it is
Alice who will need to hold a decryption key, and Bob who
is unable to decrypt. This situation is trivial to produce,
since Bob (resp. Alice) can choose their own RSA modulus
N B (resp. N A) of K-bits, which will be used during the
appropriate half of the protocol. Initially, Q is shared with
respect to Alice’s encryption scheme, i.e. Q = QA + QB
(Mod N A). Therefore, before running the ﬁrst half of this
protocol, Alice and Bob convert their shares of Q (with re-
spect to N A) to shares of Q (with respect to N B). Steps
1-5 describe the ﬁrst half of the protocol, where Bob’s en-
cryption key (with respect to N B) is used, and then Step
6 (which repeats Steps 1-5 with the roles reversed) is done
using Alice’s encryption key (w.r.t. N A). For ease of nota-
tion, we will drop the superscripts on N , remembering which
modulus we are working in (which ﬂips for Step 6).
1. This step produces a reordering of [1..K] such that if
P (i, j) denotes the probability that i appears before
j, then P (i, j) = 2i−j P (j, i) (note that this reordering
will be independent of any input to the protocol). The
purpose of this reordering will be to select S = Si
with the appropriate probability. Label this reordering
{x1, . . . , xK}, where each xi ∈ [1..K] appears exactly
once. Initialize V = 2K − 2 and deﬁne Vi := V + 1
(Mod 2i−1) for each 1 ≤ i ≤ K + 1. Alice repeats the
following for each 1 ≤ l ≤ K:
(a) Alice chooses a random number Xl ∈ [0..V ], and
sets xl to be m ∈ [1..K] if Xl ∈ [Vm..Vm+1 − 1].
(b) Alice updates V = V − 2xl−1 and re-calculates
each Vi.
2. This step creates the partitions of Q into sets that have
sizes a power of 2 described above. Alice and Bob run
the To Binary Protocol (TBP) on Q to get shares of
the bits of Q = qK . . . q1. Alice and Bob then obtain
shares of Qi := Q (Mod 2i−1) for each 1 ≤ i ≤ K
by performing the appropriate computation on their
shares of the bits of Q. For instance, Alice will set:
QA
i =
qA
j 2j−1,
i−1Xj=1
where QA
compute QB
1 is initialized to zero. Bob does similarly to
i . Notice that Qi = QA
i + QB
i (Mod N ).
3. This step corresponds to picking each Si. Alice picks
U ∈ [0..2K − 1] randomly and computes Ui := U (Mod
2i−1) for each 1 ≤ i ≤ K. Alice and Bob now share
Si := Ui + Qi = (Ui + QA
i (Mod N ). It remains
to explain how Alice will pick Si from {S1, . . . , SK}
with appropriate probability.
i ) + QB
4. This step will choose (with correct probability) the S∗
(for some index S∗ ∈ {S1, . . . , SK }), for which Alice
will set S = S∗ = U∗ + Q∗. Namely, it will produce
shares of the characteristic vector δ∗ that has a ‘1’ in
the ∗th coordinate and zeroes elsewhere. Letting ei
denote the characteristic vector with a ‘1’ in the ith
position, we use the following equation to deﬁne δ∗
(we leave it to the reader to verify that δ∗ will choose
S∗ from {S1, . . . , SK } with correct probability):
δ∗ = (qx1 )ex1 + (1 − qx1 )(qx2 )ex2 + · · · +
(1 − qx1 )(1 − qx2 ) . . . (1 − qxK−1 )(qxK )exK .
Recall that the {xi} are from Step 1 above. For brevity,
we have Alice compute δ∗ by running the subprotocol
Compute δ∗ Protocol, which can be found in Appendix
B with the other subprotocols.
5. Alice and Bob can now share S = S∗ by running the
SPP on the function:
f (x, y) = δ∗ · (S1, . . . , SK).
6. Alice and Bob repeat steps 1-5 with their roles re-
versed, so that Alice and Bob share T . Now S and
T are elements of ZQ, and we would like to perform
the sum S + T (Mod Q). However, Alice and Bob
cannot simply add their own shares of S and T be-
cause these shares correspond to two diﬀerent moduli
N A and N B. (Recall that S was created using Bob’s
encryption key, and is therefore shared between Alice
and Bob modulo N B, while T is shared between them
modulo N A.) A little work must be done to convert
the shares of S (which are w.r.t. N B) to shares of S
(now w.r.t N A), and then compute S + T (Mod Q).
We leave the details to the reader.
3.5 Proof of Obliviousness and Security
Notice that the only communication between Alice and
Bob in the above protocol takes place in the form of the
subprotocols TBP, Compute δ∗ Protocol, and SPP. The pro-
tocol is therefore secure if each of those subprotocols are se-
cure, by the composition theorem of [5]. Since we are using
a secure Scalar Product Protocol (e.g. of [9] or [25]) and the
TBP and Compute δ∗ Protocol (see Appendix B) are both
secure, it follows that our Random Value Protocol is secure
against an honest-but-curious adversary. It remains to show
that the output R ∈ ZQ is chosen uniformly and obliviously
to both parties.
Theorem 1. The above described Random Value Protocol
outputs shares of R ∈ ZQ such that R has been chosen obliv-
iously (as in deﬁnition 2) and uniformly at random.
Proof. The fact that R is chosen obliviously follows from
three simple claims:
Claim 1. During Alice’s portion of the protocol (Steps 1-
5), the distribution of choices for S is uniform in ZQ. Con-
versely for T during Bob’s portion of the protocol (Step 6).
Claim 2. If Y is any ﬁxed number in ZQ and X represents
a random variable uniformly distributed in ZQ, then the ran-
dom variable Z := Y + X (Mod Q) is uniformly distributed
in ZQ.
Claim 3. If a party’s view includes knowledge of Y but no
knowledge of X, then Z is oblivious to that party.
We leave the proofs of these claims to the reader, but note
that all three claims result from straightforward combinato-
rial arguments. The fact that R = S + T (Mod Q) is a
random variable follows from the fact that both S and T
are chosen uniformly at random in ZQ, and then letting e.g.
X = S and Y = T in Claim 2 above, we have by Claim 2
that R is uniformly distributed in ZQ. The fact that R is
oblivious follows from Claim 3.
As an aside, we note that Claim 2 actually guarantees that
this protocol chooses R obliviously even if one of the par-
ties is corrupted maliciously. The Random Value Protocol
can therefore be used as a subprotocol in models allowing
a malicious adversary, provided that the TBP, Compute δ∗
Protocol, and SPP utilized by the RVP are all secure against
a malicious adversary.
4. TWO-PARTY K-MEANS CLUSTERING
PROTOCOL
4.1 Notation and Preliminaries
Following the setup of [13], we assume that two parties,
“Alice” and “Bob,” each hold (partial) data describing the
d attributes of n objects (we assume Alice and Bob both
know d and n). Their aggregate data comprises the (virtual)
database D, holding the complete information of each of the
n objects. The goal is to design an eﬃcient algorithm that
allows Alice and Bob to perform k-means clustering on their
aggregate data in a manner that protects their private data.
As mentioned in the Introduction, we are working in the
model where our data points are viewed as living in Zd
N for
some large RSA modulus N chosen by Alice. Note that if
Alice and Bob desire a lattice width of W and M denotes the
maximum Euclidean distance between points, then Alice will
pick N suﬃciently large to guarantee that N ≥ n2
M
(this
W 2
inequality guarantees that the sum of all data points does
not exceed N ). Because Alice chooses the RSA modulus,
Bob will be performing the bulk of the computation (on the
encrypted data points).
2
We allow the data points to be arbitrarily partitioned be-
tween Alice and Bob (see [13]). This means that there is no
assumed pattern to how Alice and Bob hold attributes of
diﬀerent data points (in particular, this subsumes the cases
of vertically and horizontally partitioned data). We only de-
mand that between them, each of the d attributes of all n
data points is known by either Alice or Bob, but not both.
As discussed in [23], attributes of the data points that are
measured in units signiﬁcantly larger than others will dom-
inate distance calculations. Alice and Bob may therefore
wish to standardize the data before running a k-means clus-
tering protocol on it. The manner in which this standardiza-
tion is achieved depends on the nature of the data and we do
not explore the possibilities here. Rather, we note that any
such standardization can likely be achieved with the Scalar
Product Protocol and Division Protocol. For a given data
point Di ∈ D, we denote Alice’s share of its attributes by
DA
i , and Bob’s share by DB
i .
4.2 Single Database k-Means Algorithms
The single database k-means clustering algorithm that we
extend to the two-party setting was introduced by [19] and
is summarized below. We chose this algorithm because un-
der appropriate conditions on the distribution of the data,
the algorithm is provably correct (as opposed to most other
algorithms that are used in practice which have no such
provable guarantee of correctness). Additionally, the Initial-
ization Phase (or “seeding process”) is done in an optimized
manner, reducing the number of iterations required in the
Lloyd Step. The algorithm is as follows (see [19] for details):
Step I: Initialization. This procedure chooses the cluster
centers µ1, . . . ,µk according to (an equivalent version of)
the protocol described in [19]:
A. Center of Gravity. Compute the center of gravity of
the n data points and denote this by C:
i=1 Di
n
C = Pn
i = eC 0
B. Distance to Center of Gravity. For each 1 ≤ i ≤ n,
compute the distance (squared) between C and Di.
Denote this as eC 0
C. Average Squared Distance. Compute ¯C :=
the average (squared) distance.
i = Dist2(C, Di).
Pn
i=1 eC 0
i
n
,
D. Pick First Cluster Center. Pick µ1 = Di with proba-
bility:
(4)
Pr[µ1 = Di] =
.
(5)
i
¯C + eC 0
2n ¯C
E. Iterate to Pick the Remaining Cluster Centers. Pick
µ2, . . . , µk as follows: Suppose µ1, . . . , µj−1 have al-
ready been chosen (initially j=2), then we pick µj by:
, the distance
i
(squared) between Di and µj−1.
1. For each 1 ≤ i ≤ n, calculate eC j−1
2. For each 1 ≤ i ≤ n, let eCi denote the minimum
of {eC l
3. Update ¯C to be the average of eCi (over all 1 ≤
i }j−1
l=0 .
i ≤ n).
4. Set µj = Di with probability:
Pr[µj = Di] = eCi
n ¯C
.
Step II: Lloyd Step. Repeat the following until ν 1, . . . ,
ν k is suﬃciently close to µ1, . . . , µk:
A. Finding the Closest Cluster Centers. For each data
point Di ∈ D, ﬁnd the closest cluster center µj ∈
{µ1, . . . , µk}, and assign data point Di to cluster j.
B. Calculating the New Cluster Centers. For each cluster
j, calculate the new cluster center ν j by ﬁnding the
average position of all data points in cluster j. Share
these new centers between Alice and Bob as ν A
1 , . . . ,
ν A
k , respectively.
k and ν B
1 , . . . , ν B
C. Checking the Stopping Criterion. Compare the old
If they are “close
cluster centers to the new ones.
enough,” then the algorithm returns the ﬁnal cluster
centers to Alice and Bob. Otherwise, Step II is re-
peated after Reassigning New Cluster Centers.
D. Reassigning New Cluster Centers. To reassign new
cluster centers, set:
µA
µB
1 , . . . , µA
1 , . . . , µB
k = ν A
k = ν B
1 , . . . , ν A
k ,
1 , . . . , ν B
k .
and
4.3 Our Two-Party k-Means Clustering
Protocol
We now extend the k-means algorithm of [19] to a two-
party setting. Section 4.3.1 below discusses how to imple-
ment Step I of the above algorithm (the Initialization), and
section 4.3.2 discusses how to implement Step II of the al-
gorithm (the Lloyd Step). We discuss in Appendix A alter-
native approaches in the number of iterations allowed in the
Lloyd Step, and why this question is an issue in terms of
protecting privacy.
4.3.1 Step I: Initialization
We now describe how to extend Step I of the above al-
gorithm to the two-party setting. In particular, we need to
explain how to perform the computations from Step I in a
secure way. As output, Alice should have shares of the clus-
ter centers µA
1 , . . . , µB
k ,
such that µA
i = µi. Below we follow Step I of the
algorithm from Section 4.3.1 and describe how to privately
implement each step. At the outset of the protocol, we have
Alice encrypt her data points once and for all, and send
them to Bob. This entails a one-time communication cost
of O(ndK), and without explicit mention we assume that
all other subprotocols that require Bob to perform compu-
tations on Alice’s encrypted data points do not repeat this
communication transfer.
k , and Bob should have µB
1 , . . . , µA
i + µB
A. Center of Gravity. To implement Step A of our algo-
rithm, we need Alice and Bob to compute and share:
C =
1