function is called if it is POST. Just implement the do* function to achieve logical
control.
The scripting language on behalf of Java Web is JSP, but the Java Virtual
Machine will only parse class files, so how does a JSP script parse? This involves
the connection between JSP and Servlet, JSP is a subclass of Servlet after compiled
and interpreted by the Web container, JSP is better at page display function, while
Servlet is better at back-end logic control.
1. Servlet Life Cycle
The foundation of the Java Web lifecycle is built on the servlet lifecycle, which is the
core of both the simplest JSP project and web frameworks that use the MVC design
pattern (e.g. Spring MVC). Understanding the servlet lifecycle helps us to better
understand the flow of execution of an access request on the Java Web.
After the server receives the access request from the client, the Servlet is invoked
by the web container. First, the Web container checks if the Servlet specified by the
client request has been loaded (the Servlet can be configured to access the path
according to web.xml), if it has not been loaded, it loads and initializes the Servlet,
calling the Servlet’s init( ) function. HttpServletRequest and HupServletResponse
are passed as parameters. The service( ) function is given to the servlet to be called,
after which the servlet takes some logical control of the message request until the
 ssd s o  exde  pesn o pddos s so q
init() → service() → destroy().
GenericServlet and HttpServlet. Amont them, HttpServlet is a subclasse of
GenericServlet and specialize in handling HTTP requests. Generally, developers
do not need to rewrite the service function, because the service only implemented
how the request type is determined and call coresponding method without any
business code. The doGet( ) function is called if the client’s request type is GET, and
the doPost( ) function is called if it is POST. A developer just need to implement the
do* function to achieve logical control.
2. Servlet Deployment
First, we implement a servlet subclass with the following code.
---
## Page 705
10.2 Java Code Auditing
69
import java.io.*;
import javax.servlet. *;
import javax.servlet.http. *;
public class He1loWor1d extends HttpServlet 
private String message;
public void init () throvs SezvletException {
Systen.out -println ("initial") ;
”
public void doGet (HttpServletRequest request, HttpServletResponse
response)
response .setContentType ("text/html") ;
throws ServletException, Io&xception {
PrintHriter out = response .getWriter () ;
out -print1n (*He1lowfor1d) ;
public void destroy () (
Systen.out -println (destroy") ;
上
When the servlet is initialized, it outputs an initial. And when the server is
stopped(destroyed), a destroy will be outputted on the server side. And when a
client browser the webpage, it returns a page with a Hellow World string inside.
Now you can use IDEA to deploy the Servlet to Tomcat (please refer to the
relevant literature for details). But we still cannot access this Servlet at this time.
Unlike the PHP language, just put the PHP file to be parsed into the Web directory.
You also need to configure the Servlet access path. The configuration file name is
web.xml and the path is in WEB-INF.
He11oWor1d
Hellokorld,
HelloWor1d
cur1-pattern>/HelloWor1d
Write the code shows above in web.xml, and browse htp://localhost:8080/
HelloWorld to access that Servlet.
---
## Page 706
694
10  Code Auditing
10.2.5IntroductiontoSerializable
Java’s tool for implementing the serialization mechanism is Serializable, which
persists Java objects in an ordered format or sequence of bytes, the serialized data
containing the object's type and attribute values.
If we have serialized an object, the serialized information can be read and
deserialized according to the object type and the specified format, and finally achieve
the state of the object at the time of serialization can be obtained.
“Persistence” means that the “life time” of an object does not depend on whether
weoud a jo eo pe ump ,saa, 1o sisxo 1 ou no unox st uelod 
An indirect “*persistence” effect can be achieved by serializing an object, writing it to
disk, and later reviving the object when the program is called again.
A brief description of the Serializable tool is as follows.
• Serialization of objects is very simple, as long as the object implements the
Serializable interface.
Serialized objects can be basic data types, collections, or other objects.
• Properties decorated with the transient, static keywords are not serialized.
When the parent class is not serializable, it requires the existence of a parameter-
free constructor in the parent class.
The relevant interfaces and classes are as follows.
java.io,Externalizable
Java.lo.Serializable
// This interface needs to implement
writeExternal and readExternal functions to control serialization.
ObjectOutput
ObjectoutputStrean
ObjectInput
Object InputStream
The steps for serialization are as follows.
OutputStream outputStream = new FileOutputStrean (*serial*) :
/ / First create the OutputStream object.
/ / Encapsulate it into ObjectOutputStream objects.
ObjectOutputStream objectOutputStream = new ObjectOutputStream
/ / Calling wziteObject () after this completes the serialization of the
(outputStream) :
object and sends it to the OutputStream.
objectOutputStream.vriteObject (object) ;
/ The Object refers to
/ / Finally, close the resource.
any object.
objectOutputStream. close (1 , outputStream. close (1 ;
The steps for deserialization are as follows.
---
## Page 707
10.2 Java Code Auditing
695
(α teTxos, weaxasandurottd aau =ueoxagandu, wraxasandu
/ / Create some InputStrean objects first.
/ / Encapsulate it in ObjectInputStream objects.
Object InputStream object InputStream= new Object InputStrean
/ / After that, just call readobject (1 to deserialize the object ,
(inputStream) ;
objectInputStrean.readobject (1 ;
objectInputStream. close (1 , inputStream. close () ;
/ / Finally, close the resource,
1. Serializable interface example
Generally, if a class inherits the Serializable interface, means that both the class itself
and its subclasses can be serialized with the JDK. For example.
import java.io. *;
public class SerialTest {
public static class UInfo implements Serializable{
private String userHane ;
private int userAge ;
private String userAddress;
public String getUserName () { return usezName ; )
public String getUserAddress () ( return userAddress; )
public int getUserAge [1 { return userAge; )
public void setUserName (String userNane) { this.userNane =
public void setUserAge [int userAge) ( this .userAge = userAge; )
userName;}
public void setUserAddress (String userAddress) ( this.userAddress
userAddress;
public static void main (String [] azg) throws Exception[
UInfo userInfo = new UInfo () ;
userInfo . setUserAddress ("chengdu") :
userInfo.setUserAge (21) :
userInfo.setUserame ("orich1") ;
OutputStrean outputStream = new Fi1eOutputStream ("sezia1*) ;
(outputStrean) ;
eaxasndgnogoa(qo nat = weaxasandqnoaoa Cqo weaxagadqnoaoa Cqa
objectOutputStream.close () ;
objectOutputStream. writeObject (userInfo) ;
outputStream.close () :
: ( terxos,) meaxasanduatTa mou =weaxasandu ueaxasandu
Object InputStream object Input.Stream= new Object InputStream
(1nputStream) ;
---
## Page 708
696
10  Code Auditing
UInfo unserialuinfo = (UInfo) objectInputStream.readobject () ;
objectInputStream. close () :
input.Strean. close () ;
Systen.out -println ("userinfo:") ;
Systen.out -println (*uname : * + unserialuinfo getUserName ()) :
 ( () abyxosno5 ogutntexasum + , :ben) uauxd- mo*uqs/g
Systen.out -println (*uaddress : * + unserialtinfo . getUserAddress
()） ;
The output results are as follows.
userinfo:
uname: orich1
uage: 21
uaddress: chengdu
A serial file is generated in the project directory, the contents of which are the
serialized data.
2. Externalizable interface
In addition to the Serializable interface, Java also provides another serialization
interface Extemalizable, which inherits from the Serializable interface, but has two
abstract functions: writeExternal and readExtemal. The developer need to imple-
ment those two functions to control the logical of deserialization. If function control
logic is not implemented, then the property values of the target serialized class will
be the default values after the class has been initialized.
Note that when serializing with the Externalizable interface, reading operation
performed on that object will call the target serialization class's constructor without
m saadod soofqo o endod up pue 'oofqo mou  eao o aed ue
serialized data. Therefore, the class that implements the Externalizable interface
must provide a public decorated constructor without any parameter needed.
3. serialVersionUID
The target serialization class has a hidden property.
private static final 1ong serialVersionUID
When the Java Virtual Machine determines whether to allow serialized data to be
deserialized, it depends not only on whether the class paths and function codes are
the same, but also on whether the serial VersionUIDs of the two classes are the same.
The serialVersionUID may have different values in different compilers, and
developers can also provide fixed values in the target serialization classes them-
selves. In the case of providing a fixed serialVersionUID, as long as the
serialVersionUID in the serialization data and the serialVersionUID in the target
---
## Page 709
10.2 Java Code Auditing
697
serialization class in the program are the same, it can be successfully deserialized. If
the fixed value of serialVersionUID is not given, then the compiler will generate its
value (a 64-bit complex hash field with unique values calculated based on many
factors such as package name, class name, inheritance relationships, non-private
functions and attributes, and parameters, retum values, etc.) by some algorithm
according to the content of the classfile. So you may get different serialVersionUID
indifferent dev environments, which leads to deserializaiton failure, Due to the same
reason, changing the code in the target class may also affect the generated
serialVersionUID value, in which case the program will raise a java.io.
InvalidClassException, and point out the difference in serialVersionUID.
To improve the independence and certainty of serialVersionUID, it is
recommended to define serialVersionUID by assigning it an explicit value in the
target serialization class display.
Explicitly defining a serialVersionUID can be done in two ways: (i) in some
cases, you want different versions of the class to be serialization-compatible, so you
need to ensure that different versions of the class have the same serialVersionUID;
(i) in some cases, you don't want different versions of the class to be serialization-
compatible, so you need to ensure that different versions of the class have different
serialVersionUID.
When we construct an exploit chain for a deserialization vulnerability, we also
need to pay attention to the change of serialVersionUID, which may affect the
Gadget in some way, such as in CVE-2018-14667 (RichFaces Framework Arbitrary
Code Execution Vulnerability). The solution to this problem is very simple: when
constructing a Gadget, override the class whose serialVersionUID has changed, and
specify it as the serialVersionUID value in the target environment.
10.2.6DeserializationVulnerabilities
10.2.6.1Vulnerability Overview
1. Vulnerability Background
On November 6, 2015, @breenmachine from the FoxGlove Security security team
published a long blog on a real-life case of remote command execution using Java
Deserialization and Apache Commons Collections base class libraries. Collateral
damage was made to several major Java web server. This vulnerability sweeps
through the latest versions of WebLogic, WebSphere, JBoss, Jenkins, and
OpenNMS. Gabriel Lawrence and Chris Frohoff had already mentioned this vul-
s o Joud suuo ot jeau eoogddy uo udau e u eop nodxo qeu
2. vulnerability analysis
The cause of the vulnerability is that if a Java program deserializes untrustworthy
data, an attacker can enter the constructed malicious serialized data into the program,
---
## Page 710
698
10 Code Auditing
allowing the deserialization process to produce an unintended execution flow,
thereby achieving the purpose of malicious attack.
Serialization is the process of converting an object into a sequence of bytes (i.e. a
form that can be stored or transmited). Deserialization is the inverse process of the
serialization operation, which reduces the byte stream obtained from serialization to
an object.
To exploit a deserialization vulnerability, you should firstly construct the mali-
cious serialized data, then let the program deserialize with malicious serialized data,
and then use the normal parsing logic of the program to control the behavior of
program execution, and finally achieve the purpose of calling the malicious function.
Not only did Java have vulnerabilities related to deserialization, but other lan-
guages also have similar problems, such as PHP deserialization vulnerabilities, etc.
Although there may be different name for this kind of vulnerability in different
languages, the principle behind the vulnerability is the same: serialization can be
seen as the process of “packaging" data, and deserialization can be seen as the
juapdu o1 ssaooud _suppedun,  ung eep a _ugexoedun, jo ssaood
certain scenarios, the application manipulates the “packaged" data provided by the
t isnf 1ou s! sasn au iasn oq o 1! uasand on eep au ,sxoedun, ua pue rosn
ssaood Suoedun, o J uogedde op Susn sopado ue ose nq uosiad
involves flexible operations such as dynamic function calls, the original execution
process can be changed to achieve the effect of malicious attacks. Java
deserialization vulnerabilities have always existed, instead of occurred since 2015.
The exploit made public in 2015 had a huge impact because of the exploit chain is
found in a very well-known third-party dependencym so it affects most applications.
If there is an exploit in one of the official Python libraries, it can affect many Python
applications as well.
Serialization and deserialization processes are designed to facilitate the transfer of
data, as long as the deserialization process takes in malicious data as input, it can
achieve the attack effect, the process can be understood as follows: A, B's computer
does not have a virus, A wants to copy a file to B with a USB flash drive, if the USB
flash drive fell into the hands of someone with bad intentions, the attacker can place
some virus among the files. When B want to use these files, his computer might be
hacked! Many processes can also be seen as serialization and deserialization pro-
cesses, such as using Photoshop to draw a picture, after finish drawing the picture,
you need to save it as a file, which is the serialization process. For the next time you
open the file, calls the deserialization process. The file is the data that needs to be
transferred or store. The code related to the operation of these data is “packaging” or
the “unpacking” operation.
3. vulnerability characteristics
Java has a variety of serialization and deserialization tools, such as.
• The JDK comes with Serializable.
• fastjson and Jackson are well-known serialization tools for JSON.
• xmldecoder and xstream are well-known tools for XML serialization.
---
## Page 711
10.2 Java Code Auditing
669
The following sections describe only about the JDK builtin serializable interface.
4. Vulnerability Entry Points
The readObject function call to the ObjectInputStream object is the entry point to
Java's deserialization process, but it is necessary to consider whether the source of
the serialized data, which can come from Web applications such as cookies, GET
parameters, POST parameters or streams, HTTP heads, or databases is user-
controllable or not.
5. Data characteristics
Serialized data headers are always the same, but the byte stream may be encoded
during transmission. You can try to decode the encoded data and check the prefix of
the data. The byte stream of normal serialized data has a prefix of ac ed 00 05, after
encoded by base64 algorithm, it will be rO0AB.
10.2.6.2Vulnerability Exploitation
There are two different ways to exploit deserialization vulnerability coded with JDK
builtin Serializable.
The first is the exploit before generating the complete object which means to
achieve the attack effect during the process of deserialization of malicious serialized
data by JDK. This exploit is mostly based on the understanding of Java development
in the frequent calls to the function, to find the vulnerability trigger point. For
example, the classic rce gadget in the commons-collections 3.1 deserialization
exploit is an exploit that uses the readObject function as the entry point to run
arbitrary command directly in the dependency package.
The second is the exploitation after generating the complete object. For example,
if the identity token is deserialized, after the object deserialization is completed, the
function or attribute value is used in the business code.
m am os em isg o m odx o mou pnon sare Kueu ane aa
omit the introduction here. For space reasons, only one example and one real-world
example of the second way of exploit are given here,
1. Serializable Vulnerability Exploit Form Examples
The following is a case study to familiarize yourself with the forms of exploitation of
deserialization vulnerabilities.
(1) Clientlnfo class for authentication.
public class ClientInfo inplements Serializable {
private static final long serialVersionUID = 1L;
private String group;
private String name ;
---
## Page 712
00L
10 Code Auditing
public ClientInfo (String nane, String group, String id) 
private String id;
thie.gxoup = group:
this.nane = nane;
this.id = id;
public String getName ()(
return name ;
public String getGroup () (
return group;
public Stxing getId () {
1
return id;
(2) The ClientInfoFilter class is an interceptor used to parse and convert cookies
transmitted by clients.
where the doFilterO function is as follows.
public void doFilter (ServletRequest request, ServletResponse
response, FilterChain chain) 
throws IOException, ServletException (
Cookie [] cookies = ( (HttpServletRequeat) request) getCookies () ;
boolean exist = false;
if ( cookies ! = nul1 ) (
Cookie cookie = nu11; 
for (Cookie c : cookies) {
if (c-getName () -equals(*cinfo")) {
exist = true;
cookie = C;
break;
if (exist ) {
String b64 = cookie getValue () ;
byte [] bytes = decoder,decode (b64) ;
Base64 .Decoder decoder = Base64 .getDecoder [1 ;
ClientInfo cinfo =null;
if (b64.equals (**> 1| bytes==nul1 ) {
cinfo =new ClientInfo(*Anonymous*, "nornal*, \\ DID)
( (HttpServletRequest) request) - getRequestedSessionId
()) ;
Base64 .Encoder encoder = Base64 .getEncoder () ;
try {
bytes = Tools.create (cinfo) ;
catch (Exception e) {
e-printStackTrace [1 ;
---
## Page 713
10.2 Java Code Auditing
10L
cookle.setValue (encoder .encodeToString (bytes)) ;
else 
} 人x
cinfo = (ClientInfo) Tools.parse (bytes) ;