# Infiltrate Your Kubernetes Cluster: An Attacker's Perspective

## Presenters
- **Zhaoyan Xu**
  - Principal Research Engineer, Palo Alto Networks
- **Tongbo Luo**
  - Chief AI Security Scientist, JD.com

## Date
May 29, 2019

## Agenda
1. Background
2. Security Features of Kubernetes
3. Attack Vectors
4. Lateral Movement Practices
5. Questions

## Background
- **Kubernetes Popularity**: Kubernetes has gained widespread adoption globally.
- **Cloud Providers**: Major cloud providers offer managed Kubernetes services, such as AKS (Azure), EKS (AWS), and GKE (Google).
- **Usage Statistics**: According to iDatalabs, approximately 3,804 companies use Kubernetes for their web application deployments.
- **Growth Rate**: The yearly user growth rate exceeds 150%.
- **Security Concerns**:
  - How secure is Kubernetes?
  - Is Kubernetes vulnerable to traditional attacks?
  - What are the new attack vectors for Kubernetes clusters?
  - How can you conduct a penetration test on your Kubernetes cluster?

## Essentials of Containerized Microservices
### Service Mesh Layers
- Istio
- Linkerd

### Orchestrator Layers
- Kubernetes
- OpenShift

### Container Application Layers
- Docker
- Kata Containers
- Rkt

## Essentials of Kubernetes
### Server-side Components
- **API Server**: Central server for managing the Kubernetes API.
- **Controller Manager**: Manages various controllers in the cluster.
- **Scheduler**: Schedules pods to nodes.
- **Authentication/Authorization/Admission Control**: Controls access and admission to the cluster.
- **etcd**: Key-value store for persistent data.

### Client-side Components
- **Kubelet**: Runs on each node to manage container operations.
- **Kube-proxy**: Manages network traffic and redirection.

### Terminology in Kubernetes
- **Pod**: The smallest deployable unit, containing one or more containers.
- **Deployment**: A bundle for deploying and managing a web application, including components like databases, frontend, and backend servers.
- **Service**: An interface to expose your web application.
- **Service Accounts**: User accounts within Kubernetes.
- **Role/RoleBinding**: Role-based access control (RBAC) for Kubernetes.

## Overview of Kubernetes Security Features (v1.12.7)
### Isolation
- **Pod-level Isolation**
- **Network Security Policy for Namespace Isolation**

### Authentication
- **HTTPS for All Traffic**
- **Token, Client Certificates, Third-party Authentication**

### Authorization
- **Role-based Access Control (RBAC)**
- **Admission Control** (for pods, deployments, etc.)
- **Pre-shipped Admission Control**
- **Pod Security Policy (PSP)**

## Attack Vectors
### Isolation Evasion
- **Network Scanning**:
  - **Problem**: Network isolation is often enforced by third-party plugins through the Container Network Interface (CNI). However, many CNI plugins have vulnerabilities and may not enforce network security policies effectively.
  - **CNI Plugins**:
    - **Calico**: Layer 3, supports encrypted traffic.
    - **Canal**: Layer 2, vxlan, supports network policies but not encrypted.
    - **Flannel**: Layer 2, vxlan, does not support network policies and is not encrypted.
    - **Kopeio**: Layer 2, vxlan, does not support network policies and is not encrypted.
    - **Kube-router**: Layer 2, vxlan, supports network policies but not encrypted.

- **Default Services in `kube-system` Namespace**:
  - By default, these services can be accessed by any pod in the cluster.
  - **CVE Example**: `kube-dns` pod, CVE-2017-14491.
  - **API Server Access**: The API server can be accessed by any pod on port 6443. If anonymous access is allowed, it can leak cluster information.
  - **CVE Example**: CVE-2018-1002105.

### RBAC Evasion
- **Authentication Bypass**:
  - **Problem**: Some CNI plugins do not encrypt traffic, allowing tokens to be stolen if the API server does not use HTTPS.
  - **Revoked Roles**: If a role is revoked, the associated pod is not automatically terminated, retaining the revoked role's privileges.

- **Authorization Abuse**:
  - **Implicit Access Flow**: Multiple ways to access the same resource.
  - **Example**: 
    ```bash
    kubectl create clusterrole secretadmin --verb=get --verb=list --verb=create --verb=update --resource=secret
    ```
    - If you are not `secretadmin`, you cannot run `kubectl get secret`. However, if you have permission to create a pod, you can mount the secret through a new pod.
    - **Potential Fix**: Define a Pod Security Policy that disallows mounting secrets as volumes.

- **Implicit Privilege Escalation**:
  - **Problem**: Pods can escalate their privileges by associating with another service account.
  - **Example**: A user associated with service account `sa1` can create a pod with service account `sa2`.

- **Privilege Escalation**:
  - **Problem**: Kubernetes allows pods to map host paths, such as `/tmp/` or `/var/log`.
  - **Vulnerability**: CVE-2017-1002101.

## Lateral Movement Practices
### Penetration in Kubernetes
- **Question**: From an attacker's perspective, how can you launch a lateral movement against a Kubernetes cluster?
- **Challenges**:
  - **Persistence**: Achieving persistence in a Kubernetes cluster is difficult due to the transient lifecycle and limited privileges of pods.
  - **Methods**:
    - Inject into the kernel (privileged container).
    - Inject into the host machine (privilege escalation).
    - Inject into persistent storage.

### Attacker’s Arsenal
- **Compromise One Pod (Full Control)**:
  - **Difficulty**: Medium
  - **Persistence**: Depends
  - **Success Conditions**:
    - Pod exposes its service externally.
    - Pod's image has vulnerabilities.
  - **Problems**:
    - Transient lifecycle of the pod.
    - Limited privileges of the pod.

- **Compromise API Server from a Compromised Pod**:
  - **Difficulty**: Hard
  - **Persistence**: Yes
  - **Success Conditions**:
    - Pod has access to the API server.
    - API server has vulnerabilities.
  - **Problems**:
    - Limited privileges to the API server.
    - Difficulty in finding vulnerabilities in the API server.

- **Scan Network**:
  - **Difficulty**: Easy
  - **Persistence**: No
  - **Success Conditions**:
    - Flat network.
  - **Problems**:
    - Flat network or access to the API server.

- **DDoS Attacks from Compromised Pods**:
  - **Difficulty**: Easy
  - **Persistence**: No
  - **Success Conditions**:
    - Pod has access to the network.
    - Pod has permission to create pods.
  - **Problems**:
    - Easy to detect.

- **Bypass RBAC**:
  - **Difficulty**: Easy
  - **Persistence**: Depends
  - **Success Conditions**:
    - Compromised pod has permission to create pods.
    - Knowledge of a high-privileged service account.
  - **Problems**:
    - None specific.

- **Enter Kernel**:
  - **Difficulty**: Easy
  - **Persistence**: Yes
  - **Success Conditions**:
    - Compromised pod is a privileged pod.
  - **Problems**:
    - Exploits container runtime vulnerabilities.

- **Host Executable Replacement**:
  - **Difficulty**: Medium
  - **Persistence**: Yes
  - **Success Conditions**:
    - Hostpath mount permission.
  - **Problems**:
    - None specific.

- **Map docker.sock**:
  - **Difficulty**: Medium
  - **Persistence**: Yes
  - **Success Conditions**:
    - Hostpath mount permission.
  - **Problems**:
    - None specific.

- **Download Malware to Persistent Storage**:
  - **Difficulty**: Easy
  - **Persistence**: Yes
  - **Success Conditions**:
    - Pod has access to persistent storage.
  - **Problems**:
    - Hard to execute malware (requires create pod privilege).

### Example of Lateral Movement
1. **Exploit Web Portal Pod**:
   - Exploit a remote execution vulnerability in the web portal pod.
2. **Download kubectl and Query API Server**:
   - Findings:
     - Exploited pod has create pod permission with service account `SA1`.
     - Another database pod has mounted `/tmp/` hostpath.
     - Database pod service account is `SA2`.
3. **Create a New Pod**:
   - Use the vulnerable web portal image.
   - Use service account `SA2` and mount `/tmp/` folder.
4. **Exploit the New Pod**:
   - Create `/tmp/sym`.
   - Point `/tmp/sym` at `/var/run/docker.sock`, which is the host's Docker socket.
5. **Create Another New Pod**:
   - Use service account `SA2`.
   - Mount subpath `/tmp/sym`, which points to the host's `/var/run/docker.sock`.
6. **Send Create Privileged Docker Container Command**:
   - The new container is privileged and has access to the kernel.

### Notes
- **Subpath Vulnerability**: Partially fixed by Google, making the subpath file read-only. However, this can still lead to information leaks if the attacker points the file to a password file.
- **Root Causes**:
  - The pod has a vulnerability that can be exploited.
  - The associated service account has permission to create pods.

## Summary
### Takeaways from Kubernetes Protection
- **Network Isolation**:
  - Use CNI plugins that support isolation.
- **Authentication**:
  - Disable anonymous access.
  - Use third-party authentication services for external visits.
- **Authorization and Access Control**:
  - Enable RBAC.
  - Carefully grant pod creation and execution privileges to service accounts.
- **Admission Control – Pod Security Policy**:
  - Apply the principle of least privilege to each pod.
  - Understand the potential impact of privileged pods.

### Takeaways from Lateral Movement
- **Prevent External Accessible and High-Privileged Pods**.
- **Grant Least Privilege to Service Accounts and Pods**.
- **Prevent and Detect Scanning Traffic** in your cluster.
- **Set Proper Resource Limits** for each pod.
- **Use Network Security Policies and Pod Security Policies** to manage your Kubernetes cluster.
- **Upgrade and Patch Vulnerabilities** for Kubernetes.

### Tools for Protection
- **Image Vulnerability Scanner**:
  - [Clair](https://github.com/coreos/clair)
  - [Kube-Hunter](https://github.com/aquasecurity/kube-hunter)
- **Kubernetes Security/Compliance Check**:
  - [CIS Kubernetes Benchmark](https://www.cisecurity.org/benchmark/kubernetes/)
  - [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)
- **Pod Security Auditing Tools**:
  - [Kube-PSP-Advisor](https://github.com/sysdiglabs/kube-psp-advisor)
- **Runtime Kubernetes Monitoring**:
  - [Falco](https://github.com/falcosecurity/falco)

## Q & A
Feel free to ask any questions!