eral malicious clients can collude and share information, for
instance, about past protocol rounds. ˜C may even collude
1The privacy issues raised by this solution are out of the
scope of this paper, and some preliminary solutions have
been proposed in [10].
with other clients that indeed possess f∗, and may receive
arbitrary information about the ﬁle from them, including
its content—but never in its entirety. However we assume
that ˜C cannot interact with clients that possess f∗ during
the challenge between S and ˜C over f∗, as otherwise such
clients could easily circumvent the security of the protocol
by answering instead of ˜C2.
4. OUR SCHEME
In this section, we shall describe our POW solution. Our
scheme consists two separate phases: in the ﬁrst phase, the
server receives a ﬁle for the ﬁrst time and it pre-computes the
responses for a number of POW challenges related to the ﬁle.
Computation of POW challenges for a given ﬁle is carried
out both upon receiving an upload request for a ﬁle that
is not yet present at the server, and when the stock of the
previously computed challenge/responses has been depleted.
The number of challenges to be precomputed is a tunable
system parameter.
The second phase is triggered by the client when it sends
to the server a unique identiﬁer for a ﬁle it wishes to prove
possession of. The server chooses an unused challenge from
the pre-computed ones for that ﬁle and sends it to the client;
the client derives the response based on its knowledge of the
ﬁle, and sends the response to the server. The server then
checks whether the client’s response matches the precom-
puted one.
In the following sections, we will detail our scheme. We
will do so incrementally, starting with an initial scheme s-
POW, and later presenting two improved variants, s-POW1
and s-POW2. After the outcome of our benchmarking in
Section 5 and the discussion in Section 6 we will show in
Section 6.1 how to build a ﬁnal scheme, s-POW3, that com-
bines the best features of the other solutions.
4.1
s-POW
The basic idea behind s-POW is that the probability that
a malicious user is able to output the correct value of K bits
of the ﬁle, with each bit selected at a random position in the
ﬁle, is negligible in the security parameter k – assuming an
upperbound on the subset of bits of the ﬁle known to the
attacker. Therefore, a response to a challenge will be a bit
strings of size K, constructed as the concatenation of K bits
of the original ﬁle, picked at K random positions.
Let us describe s-POW in more detail. The server keeps a
hash-map data structure F that maps strings of ﬁnite size to
4-tuples; these tuples contain a ﬁle pointer ptr, an array of
responses res[] and two indexes, idc and idu. The ﬁrst index
keeps track of the highest challenge computes so far, while
the second counts the number of challenges used. By default,
both indexes are initialized to zero; res[] is initialized with an
array of empty strings, and ptr is associated to an unassigned
pointer. The search key into the hash-map is the hash digest
of the ﬁle; given a digest d, F[d] represents the tuple mapped
to d: F[d] =⊥ if d has not yet been associated with any tuple.
Also, let H be a cryptographic hash function and Fs a
pseudo-random number generator taking s as seed. For the
sake of simplicity, we assume that Fs generates integers rang-
ing from zero to the size of the ﬁle in bits minus one. get bit
is a macro taking as input a ﬁle pointer and a bit position
2Protection from this attack is outside the scope of this pa-
per.
ALGORITHM 1: Server-side algorithm: the server precom-
putes the challenges for a ﬁle.
Input: A hash digest d; a number n of responses that need to
be pre-computed and a response bit length K.
Output: An updated response vector.
begin
fd ← F[d];
for i ∈ [0, n − 1] do
ctr ← fd.idc + i;
s ← FSMK (d||ctr);
for j ∈ [0, K − 1] do
pos ← Fs(j);
res[i] = res[i]||get bit(fd.ptr, pos);
end
end
fd.idc = ctr + 1;
return ⊥;
end
and producing as output the corresponding bit value. Fi-
nally, let SM K be the server master secret.
Algorithm 1 describes the operations that occur at the
server-side when either a new ﬁle has been uploaded, or the
precomputed responses of an old ﬁle have been exhausted
and new ones need to be generated. The server computes
n challenges at a time: this allows optimization of the I/O
operations. For each challenge, a fresh new random seed
is computed using index idc, the digest d of the ﬁle, and
the server master key SM K . Then, K random positions
are generated using F , and the bits in the corresponding
positions are concatenated to form the response to the idc-
th challenge.
Algorithm 2 describes how a client replies when challenged
by the server; the client essentially uses the challenge seed
s received from the server that is needed to generate the K
random position over the ﬁle, and collects the bit-value of
the ﬁle at these K random positions to form the response
resp.
ALGORITHM 2: Client-side algorithm: the client computes
the response to a challenge of the server.
Input: A ﬁle f and a challenge seed s.
Output: A response bit string.
begin
let res be an empty string;
for j ∈ [0, K − 1] do
pos ← Fs(j);
res = res||get bit(f, pos);
end
return res;
end
Algorithm 3 shows the overall protocol executed between
client and server. The protocol starts with the client com-
puting the hash of the ﬁle and sending it to the server with
a request to store the associated ﬁle. The server checks
whether the ﬁle already exists in the hash map. If not, the
ﬁle needs to be uploaded and no challenge takes place. If a
challenge is required, the server picks the ﬁrst unused chal-
lenge for the given ﬁle, computes the associated seed and
sends it to the client. The client is then able to invoke Al-
gorithm 2 and compute the response, which is sent back to
the server. The server checks the response for equality with
the precomputed one and outputs success or failure based
on this check. At this stage, the server will assign that ﬁle
to the set of ﬁles belonging to the client, so that later on
the client can access it. Finally, if all precomputed chal-
lenges have been used up, the server invokes Algorithm 1 to
repopulate the response vector.
ALGORITHM 3: The protocol of s-POW, expressed as a dis-
tributed algorithm run between C and S.
C : upon upload of ﬁle f do
d ← H(f ile);
send to SRV a store ﬁle request with d;
endS : upon receipt of a store ﬁle request do
if F[d] (cid:54)=⊥ then
s ← FSMK (d||F[d].idu);
send to CLI a challenge request with s;
else
initialize F[d];
receive f from CLI;
F[d].ptr ← f ;
end
endC : upon receipt of a challenge request do
invoke Algorithm 2 on input f ile and s to get resp;
send to SRV a challenge response with resp;
endS : upon receipt of a challenge response do
if resp = F[d].res[F[d].idu mod n] then
CLI succeeds;
elseCLI fails;
end
F[d].idu = F[d].idu + 1;
if F[d].idu ≡ 0 mod 0 then
invoke Algorithm 1;
end
end
Security Analysis of s-POW
4.1.1
As introduced in Section 3, the goal of the adversary ˜C is
to pass the check performed by S during the ﬁle uploading
phase, while not owing the ﬁle in its entirety. In this way,
˜C could later gain access to the ﬁle actually stored on the
server. In the following, we analyse the security of our solu-
tion that is based on challenging the client on the value of
K bits randomly chosen over the ﬁle that ˜C claims to pos-
sess. Before exploring the security of s-POW, we remind the
reader that the cryptographic digest d of the ﬁle f does not
play any role in the security of the scheme, as we assume
that this short value can be obtained by ˜C.
In accordance with the working hypothesis given in Sec-
tion 3, we can assume that ˜C owns (or has access to) a
fraction p = (1 − ) of the ﬁle. When confronted with a
single-bit challenge posed by the server, two cases can oc-
cur: ﬁrst, the requested bit belongs to the portion of the ﬁle
in ˜C’s availability – let us indicate this event with w. This
can happen with probability: P (w) = (1 − ). Otherwise,
we can assume ˜C performs a (possibly educated) guess that
results in a success probability g. Therefore, ˜C can succeed
on a single-bit challenge (P (succ1)), under the assumption
sults here to give the reader an idea of our improved scheme:
Figure 1 shows the evolution of the clock cycles spent by the
client in the execution of the three main components of s-
POW as the size of the ﬁle grows. The three components
are the I/O time, i.e., the time spent to access the ﬁle on
disk and to load it in main memory, the hash time, i.e., the
time spent in the computation of the hash digest of the ﬁle,
and ﬁnally the time spent in the execution of Algorithm 2.
Notice that the I/O and the hash time are by far more ex-
pensive than Algorithm 2. It is natural therefore to try to
reduce the cost of these two components.
Let us recall that the computation of the hash is required
because the server needs to be able to uniquely identify the
ﬁle among those already stored (if this is the case) to com-
pute the appropriate challenge seed and to compare the
response of the client with the pre-computed one. How-
ever, the cryptographic properties of standard hash func-
tions (one-wayness, preimage resistance and second preim-
age resistance) are not strictly needed in this setting. In-
deed, the properties we are looking for are such that the
hash function may be replaced with another function that:
i) has a small probability of producing the same output given
diﬀerent ﬁles as input; ii) is computationally less expensive
than a hash; and, iii) minimizes the required I/O.
Algorithm 2 is an excellent candidate for such a function,
as it has a very small computational footprint and requires
only a minimum number of I/O operations to retrieve the
bits that constitute the output of a challenge. Consequently,
we modify the overall protocol as shown in Algorithm 4.
ALGORITHM 4: Changes in the protocol of s-POW to achieve
s-POW1.
Input: A ﬁle f .
C : upon upload of ﬁle f do
invoke Algorithm 2 on input f ile and spub to get d;
send to SRV a store ﬁle request with d;
end
The main diﬀerence with respect to the original version of
the protocol for s-POW as shown in Algorithm 3 is that – at
the client-side – Algorithm 2 (on input of a public seed spub,
randomly generated and published as a parameter of the
system) is invoked instead of the hash function H to generate
the ﬁle digest d. As we shall see in Section 5, this change
achieves a signiﬁcant improvement in the performance of the
scheme, especially at the client-side. Indeed, it is no longer
necessary to scan the entire ﬁle to compute its hash, but only
to perform a relatively small number of random accesses to
its content.
To tolerate the scenario in which multiple ﬁles have the
same digest d (produced by the invocation of s-POW on
input of the public seed), the server has to keep a one-to-
many map (instead of the previously used one-to-one map)
between the output of the indexing function and the tuple
containing indexes, ﬁle pointer, and array of pre-computed
responses. In this scenario, the server would receive a single
resp and compare it with all the pre-computed responses
for all ﬁles indexed by the same value of d. If none of them
matches, the client is uploading a new ﬁle. If one matches,
the server concludes that the client owns the ﬁle associated
with the matching precomputed response. However, this
approach comes at the expense of a slightly higher usage
rate of the precomputed challenges.
Indeed, imagine that
Figure 1: Comparison of the running time of each
of the three main operations executed in s-POW as
the input ﬁle size grows.
that  > 0, with probability
P (succ1) = P (succ1 ∧ (w ∨ ¯w))
= P (succ1|w)P (w) + P (succ1| ¯w)P ( ¯w)
= P (w) + gP ( ¯w)
= (1 − ) + g(1 − (1 − )))
= 1 − (1 − g)
However, ˜C is confronted with K challenges, each being
i.i.d. from the others. Therefore, the probability that ˜C can
successfully pass the check (P (succ)) is
P (succ) = (1 − (1 − g))K
(1)
Equation 1 completely characterizes our security model.
Indeed, once reasonable values are set for  and g, and given
a security parameter k, an appropriate value of the param-
eter K of s-POW– assuring that P (succ) ≤ 2−k – can be
simply derived as:
(cid:25)
(cid:24) k ln 2
(1 − g)
K =
(2)
Note that – in its present formulation (cf. Algorithm 1) –
s-POW trades information-theoretical security for improved
space eﬃciency, by deriving challenge seeds from a master
secret. A simple way of achieving information-theoretical
security would be in Algorithm 1 to generate a fresh random
seed s for each new challenge, and to save it together with
its pre-computed response.
Finally, note that equations 1 and 2 also highlight that
K is not aﬀected by the length of the ﬁle, because the only