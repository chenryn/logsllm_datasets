1
Resin<=Q.L.TS⽂件读取
⼏个⽉前发现的洞直接fuzz到的p0desta师傅挺早就发现了，官⽅在去年12⽉8号修复了这个漏洞。 
https://caucho.com/products/resin/download 
此漏洞泛微不可⽤因为泛微的安全过滤器不允许URL出现分号。 
看过resin代码的都知道他在下⾯这个地⽅匹配  Servlet  
com.caucho.server.dispatch.ServletMapper#mapServlet  
默认存在  resin-file 和  resin-jsp  
当所有  Servlet 都匹配不到的时候就会⾛  resin-file  
⾸先看读取jsp⽂件内容 
com.caucho.server.dispatch.ServletMapper#mapServlet  
⼀、前⾔ 
⼆、代码分析 
2
此处先获取根据  invocation.getContextURI() 获取URL然后进⼊  stripPathParameters 处
理路径参数也就是去除分号及其后⾯的字符得到  /b.jsp. 再与  _servletMap ⾥的正则匹配，此时匹
配不到就会进⼊默认的  resin-file ，进⾏⽂件读取。 
com.caucho.servlets.FileServlet#service  
3
⾸先根据  servletpath 获取到  /b.jsp.  
然后进⼊  getRealPath  
进⼊  normalizeUri  
4
如果是windows的话会将最后⼀个.或空格移除（还有就是会将斜杆前⾯的点或空格移除）。 
这样跟下来有的⼈就会问为啥  /b.jsp. 不能直接读⽂件啊 
因为实际上在到达  com.caucho.server.dispatch.ServletMapper#mapServlet 之前会先进
⼊  com.caucho.server.dispatch.InvocationDecoder#splitQueryAndUnescape  
在这⾥就会先对  uri 进⾏  normalizeUri 去除这个  . 所以payload是  %20;xxx 或者  .;xxx 。 
读WEB-INF下的 
5
主要是在这⾥做了限制，原理和上⾯⼀样，这⾥⽤的是  relPath 来判断是没有去除空格的。但是不能使
⽤  /.;/WEB-INF/XXX 因为在  normalizeUri ⾥存在⼀个判断 
6
意思⼤概是如果斜杆后⾯是分号就报错，如果斜杆后⾯是点的话会先跳过点判断。其他的就和前⾯类似
了。 
com.caucho.server.dispatch.InvocationDecoder#normalizeUri(java.lang.Strin
g, boolean)  
研究了下没绕过的思路了。 
normalizeUri 对空格和点在某些特殊位置的处理，两次传⼊  normalizeUri 时利⽤分号的特性，
使得最开始的⼀次带分号进⼊，第⼆处不带分号进⼊。 
三、官⽅修复 
四、总结 
7