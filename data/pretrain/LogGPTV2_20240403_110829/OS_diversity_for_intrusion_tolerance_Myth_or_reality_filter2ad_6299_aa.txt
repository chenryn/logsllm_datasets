title:OS diversity for intrusion tolerance: Myth or reality?
author:Miguel Garcia and
Alysson Neves Bessani and
Ilir Gashi and
Nuno Ferreira Neves and
Rafael R. Obelheiro
OS Diversity for Intrusion Tolerance: Myth or Reality?
Miguel Garcia∗, Alysson Bessani∗, Ilir Gashi†, Nuno Neves∗ and Rafael Obelheiro‡
∗LaSIGE, University of Lisbon, Faculty of Sciences – Lisbon, Portugal
†Center for Software Reliability, City University London – London, UK
‡Computer Science Department, State University of Santa Catarina – Joinville, Brazil
Abstract—One of the key beneﬁts of using intrusion-tolerant
systems is the possibility of ensuring correct behavior in the
presence of attacks and intrusions. These security gains are
directly dependent on the components exhibiting failure diver-
sity. To what extent failure diversity is observed in practical
deployment depends on how diverse are the components that
constitute the system. In this paper we present a study with op-
erating systems (OS) vulnerability data from the NIST National
Vulnerability Database. We have analyzed the vulnerabilities
of 11 different OSes over a period of roughly 15 years, to check
how many of these vulnerabilities occur in more than one OS.
We found this number to be low for several combinations of
OSes. Hence, our analysis provides a strong indication that
building a system with diverse OSes may be a useful technique
to improve its intrusion tolerance capabilities.
Keywords-Diversity, Vulnerabilities, NVD, Operating Sys-
tems, Intrusion Tolerance.
I. INTRODUCTION
One important application of Byzantine fault-tolerant pro-
tocols is to build intrusion-tolerant systems, which are able
to keep functioning correctly even if some of their parts are
compromised. Such protocols guarantee correct behavior in
spite of arbitrary faults provided that a minority (usually
less than one third [1]) of components are faulty (for an
overview of the area see [2]). To respect this condition, sys-
tem components need to exhibit failure diversity. However,
when security is considered, the possibility of simultaneous
attacks against several components cannot be dismissed. If
multiple components exhibit the same vulnerabilities, they
can be compromised by a single attack, which defeats the
whole purpose of building an intrusion-tolerant system in
the ﬁrst place. To reduce the probability of common faults,
diversity can be employed: each component uses different
software to perform the same functions, with the expectation
that the differences will reduce the occurrence of common
vulnerabilities. This is an orthogonal aspect that affects all
works on Byzantine fault-tolerant replication (e.g., [3]–[9]).
Nearly all software systems built today rely on off-the-
shelf (OTS) components, such as operating systems and
database management systems. This is mostly due to the
sheer complexity of such components, coupled with beneﬁts
such as the perceived lower costs from their use (some of
the components may be open-source and/or freely available),
faster deployment and the multitude of available options.
Most OTS software, however, have not been designed with
security as their top priority, which means that they all
have their share of security ﬂaws that can be exploited. At
times, supposedly secure systems are compromised not due
to vulnerabilities in application software but in a more sur-
reptitious manner, by compromising a critical component in
their software infrastructure (e.g., the operating system). On
the other hand, given the ready availability of OTS software,
leveraging OTS components to implement diversity is less
complex and more cost-effective than actually developing
variants of software. One of the prime examples is the
operating system (OS): realistically, people will resort to an
OTS operating system rather than build their own. Given the
variety of operating systems available and the critical role
played by the OS in any system, diversity at the OS level
can be a reasonable way of providing good security against
common vulnerabilities at little extra cost.
The focus on common vulnerabilities is an important
distinctive of this work. Since intrusion tolerance is usually
applied to critical systems, it is safe to assume that maximum
care will be exercised in protecting system components,
including applying all security patches available. However,
even an up-to-date system can be compromised through
an undisclosed vulnerability (using a 0-day exploit), since
patches usually only appear after a vulnerability has been
publicized. If such a vulnerability affects several compo-
nents, there is a window of opportunity for compromising
many or all of them at the same time.
The main question we address in this paper is: What are
the gains of applying OS diversity on a replicated intrusion-
tolerant system? To answer this question, we have collected
vulnerability data from the NIST National Vulnerability
Database (NVD) [10] reported in the period between 1994
and 2010 for 11 operating systems. We focus our study
on operating systems for several reasons: they offer a good
opportunity for diversity, many intrusions exploit OS vulner-
abilities, and the number of OS-related vulnerability reports
in the NVD is sufﬁciently large to give meaningful results.
Each vulnerability report
in the NVD database contains
(amongst other things) information about which products the
vulnerability affects. We collected these data and checked
how many vulnerabilities affect more than one operating
system. We found this number to be relatively low for most
pairs of operating systems. This study was then extended
to larger numbers of OSes, with similar conclusions for
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:50 UTC from IEEE Xplore.  Restrictions apply. 
978-1-4244-9233-6/11/$26.00 ©2011 IEEE383selected sets. These results suggest that security gains may
be achieved if diverse operating systems are employed in
replicated systems.
As a cautious note, we do not claim that these results are
deﬁnite evidence (although they look quite promising). The
main problem is that the available reports concern vulnera-
bilities and not how many intrusions or exploits occurred for
each vulnerability; this makes their use in security evaluation
more difﬁcult. Complete intrusion and exploit rates would
be much more useful as statistical evidence, but they are
not widely available. To most practitioners the only direct
security evidence available for these products often are the
vulnerability reports. It is the lack of detailed intrusion and
exploit data and the lack of known approaches that can
utilize existing vulnerability reports of OTS components in
security evaluation that has motivated the research detailed
in this paper. Our contributions can be summarized as:
1) A hand-made classiﬁcation of the vulnerabilities that
affect 11 operating systems in drivers, kernel, system
software and applications;
2) A study of how many common vulnerabilities appear
for several pairs of operating systems divided in four
families (BSD, Solaris, Linux and Windows) that
capture different users preferences;
3) An in-depth discussion of the limitations and opportu-
nities provided by the data available on NVD to assess
the dependability and security properties of a system.
II. RELATED WORK
Design diversity is a classical mechanism for fault toler-
ance introduced in the 1970s [11]. N-version programming
is a technique for creating diverse software components
introduced also in those early years [12]. The main idea
behind this mechanism is to use N different implementa-
tions of the same component, programmed by N different
teams, ideally using distinct languages and methodologies.
The objective was to achieve fault tolerance, assuming that
designs and implementations developed independently will
exhibit failure diversity.
The seminal work on using diversity to improve security
is due to Joseph and Avizienis [13]. The paper, however,
does not focus so much on diversity but on using diverse
components to detect the presence of viruses. Later, Forrest
and colleagues applied notions from biologic systems to
computer security and argued that diversity is an important
natural mechanism to reduce the effects of attacks [14], [15].
Randomized compilation techniques to automatically create
diversity in applications were proposed but not developed.
Taxonomies of diversity techniques for improving security
have been introduced in [16], [17]. However, most of these
studies lack empirical or statistical evaluation to support
their independence claims.
An experimental study of the beneﬁts of adopting di-
versity of SQL database servers is presented in [18]. The
authors analyzed bug reports for four database servers and
veriﬁed which products were affected by each bug reported
(the focus of their study is on overall dependability, not
speciﬁcally on security). They found a few cases of a single
bug affecting more than one server, and that there were no
coincident failures in more than two of the servers. Their
conclusion is that diversity of off-the-shelf database servers
is an effective means of improving system reliability. Some
of the limitations of our data set (see Section V) prevent us
from making the same type of study with NVD data.
Given the criticality of operating systems, there are many
papers that study the distribution of bugs and vulnerabilities
in OS code. Miller et al. [19], [20] analyzed how commands
and services in different UNIX variants dealt with random
input and found out that between 25 and 50% of them
(depending on the study) would crash or hang. Chou et
al. [21] used compiler extensions to perform static analysis
of the Linux and OpenBSD kernels;
their study shows
that device drivers exhibit more ﬂaws than the rest of the
kernel, and that some types of bugs in the Linux kernel
take an average of 1.8 years before being ﬁxed. Ozment
and Schechter [22] studied how OpenBSD security evolved
over time, using data from OpenBSD security advisories and
the project’s source code repository to conclude that many
vulnerabilities are still found in legacy code, that bugs in
security-related code are more likely to be vulnerabilities,
and that the rate of vulnerability reports for OpenBSD is
decreasing over time. Anbalagan and Vouk [23] analyzed
vulnerabilities in Bugzilla and Fedora Linux and found out
that 34% of the vulnerabilities are exploited before being
disclosed. None of these papers attempted to analyze the
occurrence of common vulnerabilities across different OSes.
A comparison of the robustness of 15 different POSIX-
based operating systems is presented in [24]. This study was
based on fault injection: combinations of valid and invalid
parameters were supplied to often-used system calls and C
library functions, and the effects of this on reliability (e.g.,
system crash, process hang/crash, wrong or no error code
returned, etc.) were observed. The authors found out some
commonalities among the systems studied, especially with
respect to the common mode failures of C library functions.
However, from the available data it is impossible to conclude
whether there were speciﬁc bugs that affected more than
one system (the paper only shows how many failures were
observed for each system call in several degrees of severity).
Still, their evidence indicates that, from a reliability stand-
point, using different operating systems reduces the number
of common failure modes.
Some vulnerability discovery models, which attempt to
forecast the amount of vulnerabilities found in software,
have been proposed [25]–[27]. Alhazmi and Malayia [28]
investigate how well these models ﬁt with vulnerability data
from the NVD, and conclude that the vulnerability discovery
process follows the same S-shaped curve of “traditional”
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:50 UTC from IEEE Xplore.  Restrictions apply. 
384software reliability growth models [29], which measure
all defects found in a system (not only those that affect
security). This conclusion is disputed in [30], where it is
claimed that the number of vulnerabilities disclosed in the
NVD grows linearly with time (this contrast might be due
to methodological differences). These studies cross-validate
our idea of using the NVD as a source of vulnerability
data; however, they are more concerned in modeling how
many vulnerabilities are found in speciﬁc software over its
lifetime [28] and if there are signiﬁcant differences between
open- and closed-source software [30], while our focus is
on assessing the degree of independence between different
operating systems. Ozment [31] points out some limitations
of the NVD database, which we discuss further in Section V.
Littlewood and colleagues [32] survey a number of issues
in software diversity modeling, presenting models that have
been developed for assessing the reliability of systems that
adopt diversity. The models discussed aim to provide a
measure of the reliability of a system as a function of the
demands presented to the system and how these demands
inﬂuence the correctness of the behavior of the system; these
parameters are, for the most part, expressed as probability
distributions. Some of these ideas have later been extended
to the security domain as well [33]. They show that, although
diversity does not provide complete failure independence
(since design faults are correlated to some extent), it is
an effective means of increasing overall system reliability.
They also discuss a number of caveats regarding software
diversity modeling. It would be desirable to use these
models in our context, but this is currently unfeasible, since
we lack sufﬁciently detailed data (operational proﬁles and
vulnerability exploitation rates) to apply them.
III. METHODOLOGY
This section presents the methodology adopted in our
study, with particular focus on how the data set (i.e., the vul-
nerabilities) was selected and how this data was processed
and analyzed.
Data source: We have analyzed OS vulnerability data
from the NVD database [10]. NVD uses the Common
Vulnerability Enumeration (CVE) deﬁnition of vulnerability
[34], which is presented below.
Deﬁnition 1 (CVE Vulnerability) An information security
“vulnerability” is a mistake in software that can be directly
used by a hacker to gain access to a system or network.
CVE considers a mistake a vulnerability if it allows an
attacker to use it to violate a reasonable security policy for
that system (this excludes entirely “open” security policies
in which all users are trusted, or where there is no consid-
eration of risk to the system).
For CVE, a vulnerability is a state in a computing system
(or set of systems) that either:
• allows an attacker to execute commands as another
user;
• allows an attacker to access data that is contrary to
the speciﬁed access restrictions for that data
• allows an attacker to pose as another entity
• allows an attacker to conduct a denial of service
NVD aggregates vulnerability reports from more than
70 security companies, forums, advisory groups and or-
ganizations,1 being thus the most complete vulnerability
database on the web. All data is made available as XML ﬁles
containing the reported vulnerabilities on a given period,
called data feeds. We analyze feeds from 2002 to 2010.2
Each NVD data feed contains a list of reported vulnera-
bilities sorted by its date of publication on a given period.
For each vulnerability, called entry in the NVD parlance,
interesting information is provided such as an unique name
for the entry, in the format CVE-YEAR-NUMBER; the list
of products (with version numbers) affected by the vulner-
ability; the date of the vulnerability publication; and the
security attribute(s) that are affected when the vulnerability
is exploited on a system.
We developed a program that collects, parses and inserts
the XML data feeds into an SQL database, deployed with a
custom schema to do the aggregation of vulnerabilities by
affected products and versions.
Data selection: Despite the large amount of informa-
tion about each vulnerability available in NVD, for the
purposes of this study, we are only interested in the name,
publication date, summary (description),
type of exploit
(local or remote) and the list of affected conﬁgurations. We
have collected vulnerabilities reported for 64 Common Plat-
form Enumerations (CPEs) [35]. Each one of these describes
a system, i.e., a stack of software/hardware components
in which the vulnerability may be exploited. These CPEs
were ﬁltered, resulting in the following information that was
stored in our database:
• Part: NVD separates this in Hardware, Operating Sys-
tem and Application. For the purpose of this study we
choose only enumerations marked as Operating System;
• Product: The product name of the platform;
• Vendor: Name of the supplier or vendor of the product
platform.
Those 64 CPEs were, by manual analysis, clustered in
11 OS distributions: OpenBSD, NetBSD, FreeBSD, Open-
Solaris, Solaris, Debian, Ubuntu, RedHat3, Windows 2000,
Windows 2003 and Windows 2008. These distributions cover
the mostly used server OS products of the families: BSD,
Solaris, Linux and Windows.
1See
the
complete
list
on
http://cve.mitre.org/compatible/alerts_
announcements.html.
2The 2002 feed includes information about vulnerabilities that were
reported between 1994 and 2002. The most recent feed that was analyzed
in this paper contained vulnerabilities until September 30th 2010.
3RedHat comprises the “old” Red Hat Linux (discontinued in 2003) and
the more recent Red Hat Enterprise Linux (RHEL).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:50 UTC from IEEE Xplore.  Restrictions apply. 
385A. Filtering the Data
From the more than 44000 vulnerabilities published by
NVD at the time of this study, we selected 2120 vulnerabil-
ities. These vulnerabilities are the ones classiﬁed as OS-level
vulnerabilities (“/o” on its CPE) for the operating systems
under consideration.
When manually inspecting the data set, we discovered and
removed vulnerabilities that contained tags in their descrip-
tions such as Unknown and Unspeciﬁed. These correspond to
vulnerabilities for which NVD does not know exactly where
they occur or why they exist (however, they are usually
included in the NVD database because they were mentioned
in some patch released by a vendor). We also found few
vulnerabilities ﬂagged as **DISPUTED**, meaning that
product vendors disagree with the vulnerability existence.
Due to the uncertainty that surrounds these vulnerabilities,
we decided to exclude them from the study. Table I shows
the distribution of these vulnerabilities on the analyzed
OSes, together with the total number of valid vulnerabilities.
OS
OpenBSD
NetBSD
FreeBSD
OpenSolaris
Solaris
Debian
Ubuntu
RedHat
Win2000
Win2003
Win2008
# distinct vuln.
Valid
142
126
258
31
400
201
87
369
481
343
118
1887
Unknown
Unspeciﬁed
Disputed
1
0
0
0
39
3
2
12
7
4
0
60
1
1
0
40
109
1
1
8
27
30
3
165
1
2
2
0
0
0
0
1
5
3
0
8
DISTRIBUTION OF OS VULNERABILITIES IN NVD.
Table I
An important observation about table I is that the columns
do not add up to the number of distinct vulnerabilities (last
row of the table) because some vulnerabilities are shared
among OSes and are counted only once. Notice that about
60% of the removed vulnerabilities affected Solaris and
OpenSolaris. Moreover, these two systems are the only ones
that have more than 10% of its vulnerabilities removed. We
should remark that this manual ﬁltering was necessary to
increase the conﬁdence that only valid vulnerabilities were
used in the study.
B. Distribution of Vulnerabilities by OS parts
For NVD, an operating system is not only the kernel,
but the complete product that is distributed for installation.
Therefore an operating system product is composed by the
kernel, several drivers, optional modules, system software
and applications. So, besides knowing how many vulner-
abilities affect different operating system products,
is
also important to understand what part or module of these
systems is compromised by the vulnerability. Since NVD
does not provide any information other than the vulnerability
it
Figure 1. Simpliﬁed SQL schema of the database used to store and
analyze the NVD data.
The schema of the resulting database is displayed in
Figure 1. The tables with preﬁx cvss, vulnerability_type and
security_protection are employed to optimize the database.
The most important tables are:
• The cvss tables refer directly to the CVSS metric of the
stored vulnerabilities;
• vulnerability: stores some information about a vulner-
ability (name, publication date, etc.);
• vulnerability_type: stores the vulnerability type as-
signed by us (see Section III-B);
• os: stores the operating systems platforms of interest in
this study;
• os_vuln: stores the relationship between vulnerabilities
and operating systems, and their affected versions.
The use of an SQL database brings at least three beneﬁts
when compared with analyzing the data directly from the
XML feeds. First, it allows us to enrich the data set by hand,
for example, by assigning to each vulnerability information
regarding its type (see Section III-B), and also by associating
release times and family names to each affected OS distribu-
tion. Second, it allows us to modify the CVE ﬁelds to correct
problems. For example, one of the problems with NVD is
that the same product is registered with distinct names for
different entries. For example, (”debian_linux”,”debian”)
and (”linux”,”debian”) are two (product,vendor) pairs we
have found for the Debian Linux distribution. This same
problem was observed previously by other users of NVD
data feeds [36]. Finally, an SQL database is much more
convenient to work with than parsing the feeds on demand.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:50 UTC from IEEE Xplore.  Restrictions apply. 
386description, we inspected manually each of the 1887 entries
and classiﬁed them in one of four categories: Driver, Kernel,
System Software and Application. The rationale for this
classiﬁcation is the following:
• Kernel: vulnerabilities that affect the TCP/IP stack and
other network protocols whose implementation is OS-
dependent, ﬁle systems, process and task management,
core libraries and vulnerabilities derived from proces-
sors architectures;
• Driver: vulnerabilities that affect drivers for wire-
less/wired network cards, video/graphic cards, web
cams, audio cards, Universal Plug and Play devices,
etc;
• System Software: vulnerabilities that affect the ma-
jority of the software that
is necessary to provide
common operating system functionalities such as login,
shells and basic daemons. We account just for software
that comes by default with the distribution (although
sometimes it is possible to uninstall these components
without affecting the main OS operation);
• Application: vulnerabilities in software products that