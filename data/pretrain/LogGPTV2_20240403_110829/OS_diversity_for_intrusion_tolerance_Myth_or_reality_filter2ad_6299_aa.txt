# Title: OS Diversity for Intrusion Tolerance: Myth or Reality?

## Authors:
- Miguel Garcia
- Alysson Neves Bessani
- Ilir Gashi
- Nuno Ferreira Neves
- Rafael R. Obelheiro

### Affiliations:
- **Miguel Garcia, Alysson Bessani, Nuno Neves, and Rafael Obelheiro**: LaSIGE, University of Lisbon, Faculty of Sciences – Lisbon, Portugal
- **Ilir Gashi**: Center for Software Reliability, City University London – London, UK
- **Rafael Obelheiro**: Computer Science Department, State University of Santa Catarina – Joinville, Brazil

---

## Abstract
One of the key benefits of using intrusion-tolerant systems is the ability to ensure correct behavior in the presence of attacks and intrusions. These security gains are directly dependent on the components exhibiting failure diversity. The extent to which failure diversity is observed in practical deployment depends on the diversity of the system's components. In this paper, we present a study using operating system (OS) vulnerability data from the NIST National Vulnerability Database (NVD). We analyzed the vulnerabilities of 11 different OSes over approximately 15 years to determine how many of these vulnerabilities occur in more than one OS. Our findings indicate that the number of common vulnerabilities is low for several combinations of OSes. This analysis provides strong evidence that building a system with diverse OSes can be a useful technique to enhance its intrusion tolerance capabilities.

**Keywords**: Diversity, Vulnerabilities, NVD, Operating Systems, Intrusion Tolerance

---

## I. Introduction
Byzantine fault-tolerant protocols are crucial for building intrusion-tolerant systems, which can maintain correct operation even if some of their components are compromised. These protocols ensure correct behavior despite arbitrary faults, provided that less than a third of the components are faulty. To meet this condition, system components must exhibit failure diversity. However, when security is considered, the possibility of simultaneous attacks on multiple components cannot be ignored. If multiple components share the same vulnerabilities, they can be compromised by a single attack, defeating the purpose of an intrusion-tolerant system. To reduce the probability of common faults, diversity can be employed, where each component uses different software to perform the same functions, thereby reducing the occurrence of common vulnerabilities. This is a critical aspect affecting all works on Byzantine fault-tolerant replication.

Today, most software systems rely on off-the-shelf (OTS) components such as operating systems and database management systems. This reliance is due to the complexity of these components and the benefits of lower costs, faster deployment, and a wide range of available options. However, most OTS software has not been designed with security as the top priority, leading to various security flaws. Often, supposedly secure systems are compromised not by application software but by vulnerabilities in critical infrastructure components like the operating system. Given the availability of OTS software, leveraging it to implement diversity is more cost-effective than developing custom software. The operating system (OS) is a prime example: people typically use an OTS OS rather than building their own. With the variety of OSes available and the critical role played by the OS, diversity at the OS level can provide good security against common vulnerabilities at minimal additional cost.

The focus on common vulnerabilities is a key aspect of this work. Since intrusion tolerance is often applied to critical systems, it is assumed that maximum care will be taken to protect system components, including applying all available security patches. However, even an up-to-date system can be compromised through an undisclosed vulnerability (using a 0-day exploit), as patches usually only appear after a vulnerability has been publicized. If such a vulnerability affects multiple components, there is a window of opportunity for compromising many or all of them simultaneously.

The main question we address in this paper is: What are the gains of applying OS diversity in a replicated intrusion-tolerant system? To answer this, we collected vulnerability data from the NIST National Vulnerability Database (NVD) for 11 operating systems over a period of roughly 15 years. We focused on operating systems because they offer a good opportunity for diversity, many intrusions exploit OS vulnerabilities, and the number of OS-related vulnerability reports in the NVD is sufficiently large to yield meaningful results. Each vulnerability report in the NVD contains information about which products are affected. We found that the number of vulnerabilities affecting more than one OS is relatively low for most pairs of operating systems. This study was extended to larger numbers of OSes, with similar conclusions. These results suggest that security gains may be achieved if diverse operating systems are used in replicated systems.

While our results are promising, we do not claim they are definitive. The main issue is that the available reports concern vulnerabilities rather than the frequency of intrusions or exploits for each vulnerability, making their use in security evaluation more challenging. Complete intrusion and exploit rates would be much more useful as statistical evidence, but such data are not widely available. The lack of detailed intrusion and exploit data and the absence of known approaches to utilize existing vulnerability reports of OTS components in security evaluation motivated this research. Our contributions include:

1. A hand-made classification of the vulnerabilities affecting 11 operating systems in drivers, kernel, system software, and applications.
2. A study of common vulnerabilities across several pairs of operating systems, divided into four families (BSD, Solaris, Linux, and Windows) that capture different user preferences.
3. An in-depth discussion of the limitations and opportunities provided by the NVD data to assess the dependability and security properties of a system.

---

## II. Related Work
Design diversity is a classical mechanism for fault tolerance introduced in the 1970s. N-version programming, a technique for creating diverse software components, was also introduced in those early years. The main idea is to use N different implementations of the same component, developed by N different teams, ideally using distinct languages and methodologies. The goal is to achieve fault tolerance, assuming that independently developed designs and implementations will exhibit failure diversity.

The seminal work on using diversity to improve security is attributed to Joseph and Avizienis. However, their paper focuses more on using diverse components to detect the presence of viruses rather than on diversity itself. Later, Forrest and colleagues applied concepts from biological systems to computer security, arguing that diversity is an important natural mechanism to reduce the effects of attacks. Randomized compilation techniques to automatically create diversity in applications were proposed but not fully developed. Taxonomies of diversity techniques for improving security have been introduced, but most studies lack empirical or statistical evaluation to support their independence claims.

An experimental study on the benefits of adopting diversity in SQL database servers is presented in [18]. The authors analyzed bug reports for four database servers and verified which products were affected by each bug reported. They found few cases of a single bug affecting more than one server and no coincident failures in more than two servers. Their conclusion is that diversity in off-the-shelf database servers is an effective means of improving system reliability. Some limitations of our dataset prevent us from conducting a similar study with NVD data.

Given the criticality of operating systems, numerous papers have studied the distribution of bugs and vulnerabilities in OS code. Miller et al. analyzed how commands and services in different UNIX variants handled random input and found that between 25 and 50% of them would crash or hang. Chou et al. used compiler extensions to perform static analysis of the Linux and OpenBSD kernels, showing that device drivers exhibit more flaws than the rest of the kernel, and that some types of bugs in the Linux kernel take an average of 1.8 years to be fixed. Ozment and Schechter studied the evolution of OpenBSD security, concluding that many vulnerabilities are still found in legacy code, that bugs in security-related code are more likely to be vulnerabilities, and that the rate of vulnerability reports for OpenBSD is decreasing over time. Anbalagan and Vouk analyzed vulnerabilities in Bugzilla and Fedora Linux, finding that 34% of the vulnerabilities are exploited before being disclosed. None of these papers attempted to analyze the occurrence of common vulnerabilities across different OSes.

A comparison of the robustness of 15 different POSIX-based operating systems is presented in [24]. This study used fault injection, supplying combinations of valid and invalid parameters to system calls and C library functions, and observing the effects on reliability. The authors found some commonalities among the systems, especially regarding the common mode failures of C library functions. However, it is impossible to conclude whether specific bugs affected more than one system. Their evidence suggests that, from a reliability standpoint, using different operating systems reduces the number of common failure modes.

Vulnerability discovery models, which forecast the number of vulnerabilities found in software, have been proposed. Alhazmi and Malayia investigated how well these models fit with vulnerability data from the NVD, concluding that the vulnerability discovery process follows the same S-shaped curve as traditional software reliability growth models. This conclusion is disputed in [30], where it is claimed that the number of vulnerabilities disclosed in the NVD grows linearly with time. These studies validate the use of the NVD as a source of vulnerability data, but they focus more on modeling the number of vulnerabilities found in specific software over its lifetime and on differences between open- and closed-source software. Our focus is on assessing the degree of independence between different operating systems. Ozment points out some limitations of the NVD database, which we discuss further in Section V.

Littlewood and colleagues surveyed issues in software diversity modeling, presenting models for assessing the reliability of systems that adopt diversity. These models aim to provide a measure of system reliability as a function of the demands presented to the system and how these demands influence the correctness of the system's behavior. Although diversity does not provide complete failure independence, it is an effective means of increasing overall system reliability. These models could be useful in our context, but we currently lack sufficiently detailed data to apply them.

---

## III. Methodology
This section presents the methodology adopted in our study, focusing on how the dataset (i.e., the vulnerabilities) was selected and processed.

### Data Source
We analyzed OS vulnerability data from the NIST National Vulnerability Database (NVD). The NVD uses the Common Vulnerability Enumeration (CVE) definition of vulnerability, which is defined as a mistake in software that can be directly used by a hacker to gain access to a system or network. For CVE, a vulnerability is a state in a computing system that allows an attacker to execute commands as another user, access data contrary to specified restrictions, pose as another entity, or conduct a denial of service.

The NVD aggregates vulnerability reports from more than 70 security companies, forums, advisory groups, and organizations, making it the most comprehensive vulnerability database on the web. All data is available as XML files containing reported vulnerabilities for a given period, called data feeds. We analyzed feeds from 2002 to 2010. Each NVD data feed contains a list of reported vulnerabilities sorted by their publication date. For each vulnerability, interesting information is provided, such as a unique name in the format CVE-YEAR-NUMBER, the list of affected products (with version numbers), the publication date, and the security attributes affected when the vulnerability is exploited.

We developed a program to collect, parse, and insert the XML data feeds into an SQL database, deployed with a custom schema to aggregate vulnerabilities by affected products and versions.

### Data Selection
Despite the large amount of information available for each vulnerability in the NVD, for this study, we are only interested in the name, publication date, summary, type of exploit (local or remote), and the list of affected configurations. We collected vulnerabilities reported for 64 Common Platform Enumerations (CPEs). Each CPE describes a system, i.e., a stack of software/hardware components in which the vulnerability may be exploited. These CPEs were filtered, resulting in the following information stored in our database:

- **Part**: NVD separates this into Hardware, Operating System, and Application. For this study, we chose only enumerations marked as Operating System.
- **Product**: The product name of the platform.
- **Vendor**: The name of the supplier or vendor of the product platform.

These 64 CPEs were, through manual analysis, clustered into 11 OS distributions: OpenBSD, NetBSD, FreeBSD, OpenSolaris, Solaris, Debian, Ubuntu, RedHat, Windows 2000, Windows 2003, and Windows 2008. These distributions cover the most commonly used server OS products from the BSD, Solaris, Linux, and Windows families.

### Filtering the Data
From the more than 44,000 vulnerabilities published by NVD at the time of this study, we selected 2,120 vulnerabilities. These are the ones classified as OS-level vulnerabilities ("o" in their CPE) for the operating systems under consideration.

When manually inspecting the dataset, we discovered and removed vulnerabilities with tags such as "Unknown" and "Unspecified" in their descriptions. These correspond to vulnerabilities for which NVD does not know exactly where they occur or why they exist. We also excluded vulnerabilities flagged as **DISPUTED**, meaning that product vendors disagree with the vulnerability's existence. Due to the uncertainty surrounding these vulnerabilities, we decided to exclude them from the study. Table I shows the distribution of these vulnerabilities across the analyzed OSes, along with the total number of valid vulnerabilities.

| OS           | Valid | Unknown | Unspecified | Disputed |
|--------------|-------|---------|-------------|----------|
| OpenBSD      | 142   | 1       | 0           | 0        |
| NetBSD       | 126   | 0       | 39          | 3        |
| FreeBSD      | 258   | 2       | 12          | 7        |
| OpenSolaris  | 31    | 40      | 109         | 1        |
| Solaris      | 400   | 1       | 8           | 27       |
| Debian       | 201   | 30      | 3           | 165      |
| Ubuntu       | 87    | 1       | 2           | 2        |
| RedHat       | 369   | 2       | 0           | 0        |
| Win2000      | 481   | 0       | 0           | 1        |
| Win2003      | 343   | 5       | 3           | 0        |
| Win2008      | 118   | 8       | 0           | 0        |
| Total        | 1,887 | 60      | 165         | 8        |

An important observation is that the columns do not add up to the number of distinct vulnerabilities (last row of the table) because some vulnerabilities are shared among OSes and counted only once. About 60% of the removed vulnerabilities affected Solaris and OpenSolaris. These two systems are the only ones with more than 10% of their vulnerabilities removed. This manual filtering was necessary to increase the confidence that only valid vulnerabilities were used in the study.

### Distribution of Vulnerabilities by OS Parts
For NVD, an operating system includes not just the kernel but the complete product distributed for installation. Therefore, an OS product comprises the kernel, several drivers, optional modules, system software, and applications. Besides knowing how many vulnerabilities affect different OS products, it is also important to understand which part or module of these systems is compromised by the vulnerability. Since NVD does not provide this information, we manually inspected each of the 1,887 entries and classified them into one of four categories: Driver, Kernel, System Software, and Application. The rationale for this classification is as follows:

- **Kernel**: Vulnerabilities that affect the TCP/IP stack and other network protocols, file systems, process and task management, core libraries, and vulnerabilities derived from processor architectures.
- **Driver**: Vulnerabilities that affect drivers for wireless/wired network cards, video/graphic cards, webcams, audio cards, Universal Plug and Play devices, etc.
- **System Software**: Vulnerabilities that affect the majority of the software necessary to provide common OS functionalities such as login, shells, and basic daemons. We account for software that comes by default with the distribution, although it is sometimes possible to uninstall these components without affecting the main OS operation.
- **Application**: Vulnerabilities in software products that come pre-installed with the OS but are not essential for its core functionality.

### Database Schema
The schema of the resulting database is displayed in Figure 1. The tables with prefixes `cvss`, `vulnerability_type`, and `security_protection` are used to optimize the database. The most important tables are:

- **cvss**: Stores the CVSS metric of the stored vulnerabilities.
- **vulnerability**: Stores information about a vulnerability (name, publication date, etc.).
- **vulnerability_type**: Stores the vulnerability type assigned by us (see Section III-B).
- **os**: Stores the operating system platforms of interest in this study.
- **os_vuln**: Stores the relationship between vulnerabilities and operating systems, and their affected versions.

Using an SQL database brings at least three benefits compared to analyzing the data directly from the XML feeds. First, it allows us to enrich the dataset by hand, for example, by assigning each vulnerability information regarding its type and associating release times and family names to each affected OS distribution. Second, it allows us to modify the CVE fields to correct problems, such as the same product being registered with distinct names for different entries. Finally, an SQL database is more convenient to work with than parsing the feeds on demand.

---

Figure 1. Simplified SQL schema of the database used to store and analyze the NVD data.