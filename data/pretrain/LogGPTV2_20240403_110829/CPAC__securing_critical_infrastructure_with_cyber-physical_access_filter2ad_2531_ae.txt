sample constructions. Other than the deﬁnition of events, which
gets complicated when the event itself is complex, CPAC EMS ex-
pects only simple inputs from users, such as the range of certain
variable, and permissions for certain user. In general, we believe
the advantages of using Prolog to implement the policy control out-
weigh the impediment of writing simple Prolog facts.
Another concern comes from the scalability issue when writing
policies for real-world complex systems, e.g., a nation-wide power
grid system. As we will show in Section 7, the ﬁnal Prolog pol-
icy ﬁle used to simulate the Polish power grid containing more
than 2700 buses is almost 1 MB, with 25K lines, among which,
more than 24K lines are simple Prolog facts mentioned before and
generated by a Python script. While most policies can be gener-
ated automatically given the system speciﬁcation, the deﬁnitions of
events used by the context-aware policies need human intervention
with speciﬁc domain knowledge. As shown in Figure 12, writing
in Prolog is straightforward and does not provide extra obstacles
comparing to writing in other policy languages8.
8In reality, such a large-scale system is usually divided into multi-
ple sub- areas, which are maintained by different system adminis-
trators. A global policy can be deﬁned using predeﬁned local events
from sub areas rather than dealing with thousands of variables di-
rectly.
146
Domain 0
C/C++
s
k
r
o
W
x
V
s
k
s
a
T
Standard 
Variable 
Interface
SVI
Instrumented control logic
SW 1
IEC 61131
SW 2
IEC 61131
SW N
IEC 61131
s
k
r
o
W
x
V
s
k
s
a
T
s
k
r
o
W
x
V
s
k
s
a
T
VxWorks
s
k
r
o
W
x
V
s
k
s
a
T
Figure 6: Domain 0 along with instrumented control logic
6. DEVICE LEVEL INFORMATION FLOW
CPAC deploys its dynamic information ﬂow analysis through
a lightweight instrumentation of the VxWorks real-time operat-
ing system, which is widely used within industrial control systems
(40% of the market share [11]) and mission-critical settings, such
as the Mars Curiosity rover [39]. To support such an environment,
CPAC must meet two requirements: i) very low run-time perfor-
mance overhead to prevent missed real-time deadlines for PLC-
level workﬂows; and ii) very high taint analysis accuracy to prevent
possibly fatal safety hazards.
Traditional information ﬂow techniques for x86 architectures us-
ing byte-by-byte data ﬂow tracking solutions cannot be applied due
to their unacceptable run-time execution slowdown (e.g., 6X by
BitBlaze [55]). Several proposals considered how to speed up dy-
namic taint analysis on resource-constrained devices [29] and how
to extract semantic information [8]. While useful for desktop and
smartphone applications, these solutions will not meet real-time
deadlines (e.g., 15% overhead by [29]). As an alternative to dy-
namic taint analysis, static techniques remove the run-time perfor-
mance problem. However, the strict accuracy requirements for con-
trol system applications limit their practicality signiﬁcantly due to
their well-known high false positive rates. A false positive taint
analysis outcome in CPAC could potentially lead to denying an
operator’s legitimate access request to take care of an emergency
situation. Consequently, neither dynamic nor static techniques by
themselves can address both the above-mentioned control system
requirements completely.
We use a hybrid approach with CPAC, leveraging speciﬁc fea-
tures of the PLC execution logic and VxWorks architecture to en-
sure high taint analysis accuracy and minimize operational intru-
siveness. In practice, PLC controller programs include far fewer
branch instructions than x86 binaries. This facilitates comprehen-
sive ofﬂine analysis of the controller before its launch time due to
less path explosion. CPAC implements the PLC code symbolic ex-
ecution as discussed in [5] on its EMS-side modules. CPAC uses
the symbolic values to obtain the taint information for all program
variables including the outputs, depending on which input values
every program variable is tainted by. It creates a taint look-up ta-
ble and uses it to speed up its run-time performance remarkably.
Moreover, CPAC’s run-time modules on the PLC do not have to
implement full dynamic taint analysis, but instead just proﬁle only
the execution paths taken by the control logic. The small number of
branch instructions in typical control logic that need proﬁling fur-
ther motivates CPAC’s approach. The EMS receives the execution
path proﬁles and consults the look-up table to determine the taint
information needed for the access policy enforcement.
Figure 6 shows CPAC’s device-level module on a Bachmann
MX231 controller running VxWorks. The main module (so-called
Domain 0) is written in C/C++ and inserted into the PLC’s kernel
as a .m binary ﬁle. VxWorks allows several control logic modules
to run simultaneously on the PLC. Before every control logic is up-
loaded into the PLC by the EMS, CPAC instruments the program
with a lightweight inline reference monitor using the PLC instruc-
tions (IEC61131 [37]) to proﬁle the control ﬂow. Domain 0 dynam-
ically collects control ﬂow information from the running controller
programs through the VxWorks standard variable and module in-
terfaces that enable on-device remote procedure calls [37]. It then
transfers the information to EMS modules over Modbus to perform
taint analysis and policy enforcement. To minimize overhead, we
only collect control ﬂow information on demand, i.e., only if there
is a corresponding access request from the EMS.
7. EVALUATIONS
We evaluated CPAC on two power plants, the four-bus system
(Figure 4a) and Poland’s publicly available power grid with over
2,700 buses (>2,800 transmission lines) since other networks are
not publicly available. We extended the open source pvbrowser
v4.7.9 [13] EMS (2-core Intel 2.40GHz; 4GB memory) with our
logic-based access control engine. CPAC’s power system analy-
sis module uses MatPower [66]. The PLC-based taint analysis and
the symbolic execution implementations in CPAC are speciﬁcally
deployed for the Wind River VxWorks operating system v5.5 run-
ning on a Bachmann MX231-Controller PLC with a GIO 212 IO
modules. We then designed a set of experiments to verify whether
CPAC can be useful and practical in real-world scenarios by an-
swering the following questions empirically:
1. How accurately would CPAC prevent past real-world control
system and power grid severe incidents?
2. How efﬁciently does CPAC perform the PLC-based taint-
analysis, physical-side information ﬂow analysis, and EMS-
side logic-based policy enforcement?
3. How well does CPAC scale up for large-scale real-world
control systems and power grid infrastructures?
7.1 Case Studies
To answer these questions, we validated CPAC’s functionality
and performance across six use cases. The ﬁrst three scenarios are
based on the four-bus power system; they are derived based on our
practical experience and interactions with power utilities to high-
light CPAC’s capabilities in a typical power grid infrastructure. We
assume there are two operators: Bob, a control operator on Bus 2,
and Alice, a maintenance operator for the home area on the grid.
Figure 4a shows the power system and its two areas separated by a
line (the left area is the home area). The following scenarios list the
policies for Alice and Bob in different contexts. Case A is below
for intuition and the other two scenarios on four-bus power systems
(case B and case C) are described in Section 9, while we directly
discuss the real world scenarios which occurred in the past.
Case A: Read access control for crucial plant values. Alice,
as the maintenance operator, requests to see the real-time transient
power output of the generator on Bus 2. The value represents a PLC
variable within a droop control logic [28] that controls the genera-
tor’s power output through its governor.
Source of incident: A lack of enforcing conﬁdentiality over sensi-
tive control data.
Required access control policy: Only control operators are allowed
to see sensitive plant control values (deﬁned as generators’ real-
time frequencies).
Effects of CPAC deployment: CPAC denies Alice’s request due
to the potential for sensitive data disclosure. CPAC’s PLC-based
information ﬂow analysis marks the target variable tainted by the
incoming frequency measurements, which is not readable by Alice.
The droop control correlates generator frequency and output power
such that knowledge of one value could be used to infer the other.
The next three scenarios are based on real-world power grid in-
cidents that had large-scale effects on millions of power grid cus-
tomers, some of which were international in scope. Though N-1
contingency was enforced, due to cascading failures these events
occurred. We evaluate how CPAC could have prevented these
incidents by simulating their effects on the real-world model of
Poland’s entire power grid interconnect, consisting of over 2,700
buses. This will demonstrate CPAC’s scalability to national-scale
grid environments.
147
Case D: Southwest 2011 blackout. The Southwest (California)
blackout affected 7M people in California, Arizona, and Mexico,
which we describe in detail in Section 3.3. The reports from Fed-
eral energy regulatory commission (FERC) showed that “the sys-
tem was not in an NERC-CIP N-1 compliant state. Utilities are
required to operate the system so that the malfunction of one com-
ponent can not cause instability, separation, or cascading” [10].
Source of incident: Human error from an operator violating com-
pliance with NERC-CIP N-1 contingency regulations.
Required access control policy: No operator may issue a control
command that puts the grid in a state that violates the CIP N-1 re-
quirements.
Effects of CPAC deployment: Figure 8 shows the line current on
bus 18 before and after the operator opened a relay on a different
line. CPAC speculatively calculates the potential global impact of
the operator’s action and denies the action, as it would lead to an
unacceptable current ﬂow on the line that violates the NERC-CIP
N-1 requirements.
Case E: Florida 2008 grid blackout. The Florida Power and Light
(FPL) Company reported a widespread grid blackout occurring at
the Flagami substation in west Miami as a ﬁeld engineer was di-
agnosing a switch that had malfunctioned. Contrary to standard
procedures, the engineer disabled two levels of relay protection.
Because both levels of protection had been removed, the arc that
resulted from the fault caused an outage that spread through the
grid as power plants and transmission lines tripped off-line to pro-
tect themselves. “Standard procedures [unenforced] do not permit
the simultaneous removal of both levels of protection,” the utility
wrote [9].
Source of incident: Human error from an operator disabling in-
ternal redundancy protections, causing a maintenance operation to
disrupt the grid’s real-time operation.
Required access control policy: Operators must not remove both
levels of relay protection simultaneously.
Effects of CPAC deployment: CPAC denied the operator’s second
protection removal request due to the policy. Additionally, it over-
loads the most of the power components (Figure 7). Bus #2,392 is
overloaded to 661%, which would quickly cause a line outage and
damage neighboring assets due to the extremely high current.
Case F: Colombia 2008 total blackout. Colombia suffered a total
blackout affecting 25 million people due to human error at the 230
KV Torca substation. An operator at the substation did not follow
the correct (but unenforced) sequence of maneuvers when transfer-
ring circuits from one busbar to another within a substation before
a scheduled maintenance task. The wrong maneuver overloaded
the inter-bus breaker, and the breaker malfunction de-energized the
whole Torca substation, igniting a cascade of events that brought
down the entire Colombian electric power system.
Source of incident: Human error from an operator not correctly
following substation interlocking procedures, and lack of enforce-
ment to ensure these procedures are followed.
Required access control policy: The maintenance operator’s se-
quence of busbar interlocking actions must not overload any inter-
bus breaker.
Effects of CPAC deployment: CPAC denied the operator’s action
request as it violates the interlocking requirements. Figure 9 shows
the substation-level busbar conﬁguration where the top and bottom
busbars are connected to neighboring substations, and should never
be disconnected from each other. The ﬁgures shows the set of al-
ready opened breakers, the ones that the operators could open, and
the breakers that are prevented from opening, resulting in an oper-
ator deny action by CPAC as they separate the two main busbars
affecting the electricity grid globally.
7.2 Performance
We measured CPAC’s performance for all six scenarios. Table 1
shows the Prolog engine’s execution time for scenarios a-c aver-
aged over 20 runs. CPAC takes under 0.3 ms to process the access
request and render a policy decision. This quick processing time
(cid:27)(cid:23)(cid:23)(cid:1)
(cid:26)(cid:23)(cid:23)(cid:1)
(cid:25)(cid:23)(cid:23)(cid:1)