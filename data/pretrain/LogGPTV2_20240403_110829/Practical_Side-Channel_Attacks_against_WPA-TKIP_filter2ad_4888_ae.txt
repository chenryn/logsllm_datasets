We tested our attacks against OpenBSD 6.4 using an Intel AC
8265 card, and an AWUS051NH dongle. When the victim was using
the AWUS051NH, we could replay both TKIP and CCMP frames.
When the victim was using the Intel card, we could only replay
CCMP frames. Replaying TKIP frames against the Intel card was
not possible because it only uses hardware decryption for CCMP.
Against the AWUS051NH we also confirmed that capturing a single
TKIP keystream can be used to inject an infinite number of packets.
Finally, we observed that when using software decryption, the
Wi-Fi subsystem of OpenBSD will attempt to verify the Michael
MIC of individual TKIP fragments. This will result in MIC failures,
since individual TKIP frames do not have a valid Michael MIC. As
a result, if a legitimate client sends fragmented TKIP frames to
OpenBSD, this will cause a self-inflicted denial-of-service.
6 DISCUSSION
We analyze the impact of our side-channel attacks, discuss potential
countermeasures against them, explain why the attacks do not work
against the more modern CCMP protocol, and discuss future work.
6.1 Impact
The side-channel attacks discussed in this paper are significant
improvements over previously known attacks. Our attacks (i) do not
rely on Michael MIC Failure Reports, (ii) bypass countermeasures,
and (iii) attack APs in addition to the clients. Attacking the AP has as
an advantage that keystream can be more easily generated. That is,
after recovering a client-to-AP Michael MIC key, an adversary can
inject traffic into the network and trigger, for example, an encrypted
ping reply from another target client. Furthermore, several of our
attacks target multicast and broadcast traffic, meaning even modern
AES-CCMP clients can be attacked in a network supporting TKIP.
In addition to being able to decrypt network traffic, an adversary
Session 5B: Fault Attacks and Side Channel AnalysisAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand424is also able to inject forged messages. As a result of the above, the
impact on networks supporting WPA-TKIP increases significantly.
Injecting Network Traffic. The presented attacks allow an
6.1.1
adversary to recover a keystream and the Michael MIC key. With
this information, an adversary can inject network traffic [29, 32]. A
message is forged by calculating the Michael MIC using the recov-
ered key, calculating the ICV as a CRC-32, and encrypting the result
using the recovered keystream. The length of the forged message
can be at most the length of the recovered keystream. The forged
message can now be injected onto a QoS channel having a lower
TSC value. In practice, most traffic is transmitted on channel 0, leav-
ing 7 additional channels for messages to be injected on [29]. From
this point forward, an adversary can recover additional keystream
much faster since the Michael MIC key has been recovered, and
only the last 4-bytes containing the ICV need to be decrypted.
6.1.2 Decrypting Network Traffic. The Michael MIC key can also
be used to decrypt frames [32]. This is accomplished by sending a
ping-style packet towards the victim, and using the Michael reset
attack to append an encrypted TKIP frame to the ping request [32].
We spoof the source IP of this ping request, so the victim will send
the reply to a server under our control. The client will now echo the
content of the ping request, which equals the TKIP frame, meaning
we effectively decrypted the frame.
6.2 Countermeasures
We identify two countermeasures against our side-channel attacks.
First, like the proposed countermeasures against the original Beck
and Tews attack, one may reduce the rekeying interval even further.
The rekeying interval can be set to one minute, so that the attacks
can no longer be executed in time. An advantage of this counter-
measure is that it is a relatively easy configuration adjustment,
however, a short interval generates a larger network overhead, and
therefore may not be an ideal solution.
Second, the software implementation may be changed, where a
naive solution would be to prevent that fragmented frames influ-
ence the receiver’s state (e.g. by not changing the power manage-
ment status). However, fragmented frames must be stored for later
reassembling, meaning they inevitably influence the state. Since
this state change may be observable through (novel) side-channels,
we instead propose to drop all fragmented frames, and atomically
decrypt and authenticate all other TKIP frames. As a result, if a
frame has a correct ICV but a wrong Michael MIC, the frame is
immediately dropped with the only side-effect being the generation
of a (delayed) MIC failure report. In practice this requires disabling
hardware decryption, such that all TKIP frames can be atomically
decrypted and authenticated in software. However, changing the
software implementation may not be ideal either, as time and ef-
fort would need to be invested in an already outdated protocol. In
addition, clients may not be able or willing to update their devices.
Note that even when the above countermeasures are used in
combination with existing ones, TKIP can still be attacked by abus-
ing biases in RC4 to decrypt repeatedly transmitted data such as
plaintext HTTP cookies [31]. Although these attacks are less practi-
cal than ours, there are no backwards-compatible defenses against
them [31], further showing that the best option is to abandon TKIP.
6.3 Applicability to CCMP
CTR mode with CBC-MAC Protocol (CCMP) was introduced as a
more robust security protocol replacing WPA-TKIP. CCMP uses the
counter mode in the AES block cipher for data confidentiality, and
CBC-MAC for the generation of a MIC providing data integrity and
data origin authentication. In relation to our side-channel attacks,
there are three notable differences between CCMP and TKIP. Recall
from background Section 2 that large MSDUs are fragmented into
smaller MPDUs. First, in the CCMP protocol, a MIC value is cal-
culated for every MPDU, unlike TKIP, which attaches its Michael
MIC only to the last fragment or MPDU. Second, unlike a TKIP
MPDU, the CCMP MPDU has no ICV. Third, unlike the Michael
MIC in TKIP, the MIC attached to a CCMP MPDU is not known
to be invertible. As a result of these differences, each decrypted
CCMP MPDU is immediately verified for data integrity and data
origin authentication, without the need to wait for all fragments to
arrive. In contrast, decrypted TKIP fragments are processed before
being reassembled, and influence power save management and the
fragmentation cache, without being authenticated using its MIC.
To summarize, our side-channel attacks work against TKIP because
operations are performed on decrypted but unauthenticated data.
6.4 Future Work
We identify several extensions to our side-channel attacks. First, it
would be interesting to reverse engineer the Wi-Fi stacks of propri-
etary implementations, so they can be inspected for side-channel
vulnerabilities. We conjecture this would reveal similar vulnerabili-
ties to the ones we discovered in open source implementations.
When assuming a stronger threat model, it might be possible to
break TKIP implementations using cache-based side-channels. In
such an attack, one would for example assume that the adversary is
within range of the victim, and that the adversary can execute (un-
privileged) code on the victim’s machine. This is a realistic scenario
on platforms such as Android, where users can install untrusted
applications. Through cache-based side-channels, it might then be
possible to determine if the TKIP ICV is correct by measuring which
functions are executed, or which memory regions are accessed.
Finally, against resource-constrained devices, it would be inter-
esting to investigate whether timing-based side-channel attacks can
determine if the TKIP ICV was correct. For example, an adversary
can inject a TKIP frame, and immediately after that a probe request.
If the ICV of the TKIP frame is correct, the receiver will perform
additional processing on the frame, slowing down its response to
the probe request. If the ICV was wrong, the receiver might send a
faster response to the probe request. The main obstacle is that the
resulting time difference might be too small to measure remotely.
7 RELATED WORK
The first practical attack against WPA-TKIP was found in 2009 by
Tews and Beck [29], and abused MIC failure reports as an oracle to
decrypt frames. Over the years, several improvements have been
made to it, lowering restrictions on the attack and making it faster.
Ohigashi and Morii proposed an improvement where IEEE 802.11e
QoS features are no longer required [22]. Todo et al. proposed two
improved methods, QoS forgery and reverse chopping, reducing
the time it takes an adversary to recover keystream and the Michael
Session 5B: Fault Attacks and Side Channel AnalysisAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand425MIC key to 7-8 minutes [30]. Vanhoef and Piessens have demon-
strated a fragmentation attack and introduced the Michael reset
attack, allowing an adversary to inject an arbitrary amount of pack-
ets [32]. In contrast to these attacks, our side-channel attacks do
not rely on the transmission of Michael MIC failure reports and are
therefore (i) able to attack the AP in addition to the clients, (ii) sig-
nificantly faster to execute, and (iii) resistant against the proposed
countermeasures related to sending Michael MIC failure reports.
Apart from abusing MIC failure reports, other works identified
weaknesses in how TKIP uses the RC4 encryption algorithm [6, 23].
Although certainly a security issue, the attacks are not as practical
as the side-channel attacks we presented in this paper.
In 2005, a correctness proof the 4-way and group key handshake
was presented in [16]. Unfortunately, the 4-way handshake was
still vulnerable to key reinstallation attacks (KRACKs) [33, 34].
In addition, researchers identified vulnerabilities in technology
surrounding Wi-Fi, such as Wi-Fi Protected Setup (WPS) [26, 36].
In [12], message forging attacks against AES-CCMP were described,
and several WPA2 implementations have been analyzed in works
such as [28, 35] revealing how clients may be downgraded from AES-
CCMP to WPA-TKIP. Downgrading clients to WPA-TKIP makes
them vulnerable to the attacks devised against it. These works show
that designing and implementing secure Wi-Fi protocols is a hard
task, and requires care in order to prevent (side-channel) attacks.
8 CONCLUSION
We systematically analyzed the security of several WPA-TKIP im-
plementations, and were able to devise side-channel attacks against
all of them. Our side-channel attacks bypass all existing counter-
measures, and allow an adversary to decrypt and inject network
traffic in a matter of minutes, making them much faster than previ-
ously known attacks. This is problematic, given that nearly half of
all encrypted networks still provide support for WPA-TKIP. These
results show that implementing WPA-TKIP without side-channel
vulnerabilities is a hard task to perform, and we conjecture that
all implementation are vulnerable to (possibly novel) side-channel
vulnerabilities. We hope our results will help accelerate the process
of completely deprecating support for WPA-TKIP, and encourage
everyone to use more secure solutions such as WPA3.
ACKNOWLEDGMENTS
This work is partially supported by the Center for Cyber Secu-
rity at New York University Abu Dhabi (NYUAD). Mathy Vanhoef
holds a Postdoctoral fellowship from the Research Foundation Flan-
ders (FWO).
REFERENCES
[1] IEEE Std 802.11. 2012. Wireless LAN Medium Access Control (MAC) and Physical
[2] IEEE Std 802.11e. 2005. Amendment 8: Medium Access Control (MAC) Quality of
[3] IEEE Std 802.11i. 2004. Amendment 6: Medium Access Control (MAC) Security
Layer (PHY) Spec.
Service Enhancements.
Enhancements.
[4] IEEE Std 802.11i/D3.0. 2002. Draft Amendment 6: Medium Access Control (MAC)
Security Enhancements - version D3.0.
[5] Aircrack-ng. 2019. FAQ: What is the best wireless card to buy? Retrieved 19
January 2019 from https://www.aircrack-ng.org/doku.php?id=faq.
[6] Nadhem AlFardan, Daniel J. Bernstein, Kenneth G. Paterson, Bertram Poettering,
and Jacob C. N. Schuldt. 2013. On the Security of RC4 in TLS and WPA. Technical
Report.
2 (2002).
[7] Wi-Fi Alliance. 2015. Technical Note: Removal of TKIP from Wi-Fi Devices.
[8] Johannes Berg. 2013. [138/251] mac80211: fix duplicate retransmission detection.
Retrieved 19 January 2019 from https://lore.kernel.org/patchwork/patch/405688/.
[9] Nancy Cam-Winget, Russ Housley, David Wagner, and Jesse Walker. 2003. Secu-
rity flaws in 802.11 data link protocols. Commun. ACM 46, 5 (2003), 35–39.
[10] Niels Ferguson. 2002. Michael: an improved MIC for 802.11 WEP. IEEE doc 802,
[11] Scott Fluhrer, Itsik Mantin, and Adi Shamir. 2001. Weaknesses in the key sched-
uling algorithm of RC4. In SAC. Springer, 1–24.
[12] Pierre-Alain Fouque, Gwenaëlle Martinet, Frédéric Valette, and Sébastien Zimmer.
2008. On the Security of the CCM Encryption Mode and of a Slight Variant. In
International Conference on Applied Cryptography and Network Security. Springer.
[13] Mouhcine Guennoun, Aboubakr Lbekkouri, Amine Benamrane, Mohamed Ben-
Tahir, and Khalil El-Khatib. 2008. Wireless networks security: Proof of chopchop
attack. In WoWMoM. IEEE.
[14] Dan Harkins and Warren Kumari. 2017. Opportunistic Wireless Encryption. RFC
8110. https://doi.org/10.17487/RFC8110
[15] Changhua He and John C Mitchell. 2004. Analysis of the 802.11 i 4-Way Hand-
shake. In Proceedings of the 3rd ACM workshop on Wireless security. ACM, 43–50.
[16] Changhua He, Mukund Sundararajan, Anupam Datta, Ante Derek, and John C
Mitchell. 2005. A modular correctness proof of IEEE 802.11 i and TLS. In CCS.
[17] Jianyong Huang, Jennifer Seberry, Willy Susilo, and Martin Bunder. 2005. Security
analysis of michael: the IEEE 802.11 i message integrity code. In IEEE EUC.
[18] KoreK. 2004. chopchop (Experimental WEP attacks). Retrieved 21 January
2019 from http://www.netstumbler.org/unix-linux/chopchop-experimental-wep-
attacks-t12489.html.
[19] Jouni Malinen. 2008. ChangeLog for wpa_supplicant v0.6.6. Retrieved 19 January
2019 from https://w1.fi/cgit/hostap/plain/wpa_supplicant/ChangeLog.
[20] CHJC Mitchell and Changhua He. 2005. Security Analysis and Improvements for
IEEE 802.11 i. In NDSS. Citeseer, 90–110.
[21] Masakatu Morii and Yosuke Todo. 2011. Cryptanalysis for rc4 and breaking
wep/wpa-tkip. IEICE Trans. on Inf. and Systems 94, 11 (2011), 2087–2094.
[22] Toshihiro Ohigashi and Masakatu Morii. 2009. A practical message falsification
attack on WPA. Proc. JWIS (2009).
[23] Kenneth G. Paterson, Bertram Poettering, and Jacob C. N. Schuldt. 2014. Big Bias
Hunting in Amazonia: Large-Scale Computation and Exploitation of RC4 Biases
(Invited Paper). In ASIACRYPT. 398–419.
[24] Jon Rosdahl. 2017. Minutes REVmd – July 2017 Berlin. Retrieved January 21,
2019 from https://mentor.ieee.org/802.11/dcn/17/11-17-0857-01-000m-minutes-
revmd-july-2017-berlin.docx
[25] Jon Rosdahl, Mark Hamilton, and Michael Montemurro. 2018. Minutes REVmd –
May 2018 – Warsaw. Retrieved January 10, 2019 from https://mentor.ieee.org/
802.11/dcn/18/11-18-0616-00-000m-minutes-revmd-may-2018-warsaw.docx
[26] Amirali Sanatinia, Sashank Narain, and Guevara Noubir. 2013. Wireless spreading
of WiFi APs infections using WPS flaws: An epidemiological and experimental
study. In IEEE CNS. 430–437.
[27] Graham Smith. 2018. Resolution for WEP/TKIP removal CIDs. Retrieved Janu-
ary 21, 2019 from https://mentor.ieee.org/802.11/dcn/18/11-18-0652-01-000m-
resolution-for-wep-tkip-removal-cids.docx
[28] Chris McMahon Stone, Tom Chothia, and Joeri de Ruiter. 2018. Extending
Automated Protocol State Learning for the 802.11 4-Way Handshake. In European
Symposium on Research in Computer Security. Springer, 325–345.
[29] Erik Tews and Martin Beck. 2009. Practical attacks against WEP and WPA. In
Proceedings of the second ACM conference on Wireless network security. ACM.
[30] Yosuke Todo, Yuki Ozawa, Toshihiro Ohigashi, and Masakatu Morii. 2012. Falsi-
fication attacks against WPA-TKIP in a realistic environment. IEICE TRANSAC-
TIONS on Information and Systems 95, 2 (2012), 588–595.
[31] Mathy Vanhoef. 2016. A Security Analysis of the WPA-TKIP and TLS Security
Protocols. Ph.D. Dissertation. KU Leuven.
[32] Mathy Vanhoef and Frank Piessens. 2013. Practical verification of WPA-TKIP
vulnerabilities. In AsiaCCS. ACM, 427–436.
[33] Mathy Vanhoef and Frank Piessens. 2017. Key reinstallation attacks: Forcing
nonce reuse in WPA2. In CCS. ACM, 1313–1328.
[34] Mathy Vanhoef and Frank Piessens. 2018. Release the Kraken: New KRACKs in
the 802.11 Standard. In CCS. ACM, 299–314.
[35] Mathy Vanhoef, Domien Schepers, and Frank Piessens. 2017. Discovering logical
vulnerabilities in the Wi-Fi handshake using model-based testing. In ACSAC.
[36] Stefan Viehböck. 2011. Wi-Fi protected setup pin brute force vulnerability. CERT
Vulnerability Note VU 723755 (2011).
[37] Wi-Fi Alliance. 2015. Technical Note: Removal of TKIP from Wi-Fi Devices.
Retrieved 8 January 2019 from https://www.wi-fi.org/downloads-public/Wi-
Fi_Alliance_Technical_Note_TKIP_v1.0.pdf/17196.
[38] Wi-Fi Alliance. 2018. WPA3 Specification Version 1.0. Retrieved 8 January 2019
from https://www.wi-fi.org/file/wpa3-specification-v10.
[39] Avishai Wool. 2004. A note on the fragility of the "Michael" message integrity
code. IEEE Transactions on Wireless Communications 3, 5 (2004), 1459–1462.
Session 5B: Fault Attacks and Side Channel AnalysisAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand426