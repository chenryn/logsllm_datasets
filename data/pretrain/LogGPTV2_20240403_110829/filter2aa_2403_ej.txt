第 53 章  16 位的 Windows 程序 
569 
                    HINSTANCE hPrevInstance, 
                    LPSTR lpCmdLine, 
                    int nCmdShow ) 
{ 
        func1 (123, 456, 789); 
        func2 (600000, 700000, 800000); 
        func3 (600000, 700000, 800000, 123); 
        return 0; 
}; 
func1   
     proc near 
c  
     = word ptr  4 
b 
     = word ptr  6 
a 
     = word ptr  8 
     push     bp 
     mov      bp, sp 
     mov    ax, [bp+a] 
     imul    [bp+b] 
     add    ax, [bp+c] 
     pop    bp 
     retn    6 
func1   
     endp 
func2   
     proc near 
arg_0   
     = word ptr  4 
arg_2   
     = word ptr  6 
arg_4   
     = word ptr  8 
arg_6   
     = word ptr  0Ah 
arg_8   
     = word ptr  0Ch 
arg_A   
     = word ptr  0Eh 
     push     bp 
     mov      bp, sp 
     mov      ax, [bp+arg_8] 
     mov      dx, [bp+arg_A] 
     mov      bx, [bp+arg_4] 
     mov      cx, [bp+arg_6] 
     call     sub_B2 ; long 32-bit multiplication 
     add      ax, [bp+arg_0] 
     adc      dx, [bp+arg_2] 
     pop      bp 
     retn     12 
func2   
     endp 
func3   
     proc near 
arg_0   
     = word ptr  4 
arg_2   
     = word ptr  6 
arg_4   
     = word ptr  8 
arg_6   
     = word ptr  0Ah 
arg_8   
     = word ptr  0Ch 
arg_A   
     = word ptr  0Eh 
arg_C   
     = word ptr  10h 
     push     bp 
     mov      bp, sp 
     mov      ax, [bp+arg_A] 
     mov      dx, [bp+arg_C] 
     mov      bx, [bp+arg_6] 
     mov      cx, [bp+arg_8] 
     call     sub_B2 ; long 32-bit multiplication 
     mov      cx, [bp+arg_2] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
570 
逆向工程权威指南（下册） 
     add      cx, ax 
     mov      bx, [bp+arg_4] 
     adc      bx, dx   
   ; BX=high part, CX=low part 
     mov      ax, [bp+arg_0] 
     cwd       
   ; AX=low part d, DX=high part d 
     sub      cx, ax 
     mov      ax, cx 
     sbb      bx, dx 
     mov      dx, bx 
     pop      bp 
     retn     14 
func3   
     endp 
WinMain  
     proc near 
     push     bp 
     mov      bp, sp 
     mov      ax, 123 
     push     ax 
     mov      ax, 456 
     push     ax 
     mov      ax, 789 
     push     ax 
     call     func1 
     mov     ax, 9  
   ; high part of 600000 
     push     ax 
     mov     ax, 27C0h   ; low part of 600000 
     push     ax 
     mov      ax, 0Ah     ; high part of 700000 
     push     ax 
     mov      ax, 0AE60h ; low part of 700000 
     push     ax 
     mov      ax, 0Ch     ; high part of 800000 
     push     ax 
     mov      ax, 3500h   ; low part of 800000 
     push     ax 
     call     func2 
     mov     ax, 9  
   ; high part of 600000 
     push     ax 
     mov     ax, 27C0h   ; low part of 600000 
     push     ax 
     mov     ax, 0Ah     ; high part of 700000 
     push     ax 
     mov     ax, 0AE60h ; low part of 700000 
     push     ax 
     mov     ax, 0Ch     ; high part of 800000 
     push     ax 
     mov     ax, 3500h  ; low part of 800000 
     push     ax 
     mov     ax, 7Bh     ; 123 
     push     ax 
     call     func3 
     xor     ax, ax      ; return 0 
     pop     bp 
     retn     0Ah 
WinMain  
     endp 
当 16 位系统（MSDOS 和 Win16）传递 long 型 32 位“长”数据时（这种平台上的 int 型数据是 16 位
数据），它会将 32 位数据拆成 2 个 16 位数据、成对传递。这种方法和第 24 章介绍的“32 位系统处理 64
位数据”的方法十分相似。 
此处的 sub_B2 是编译器开发人员编写的（仿真）库函数，用于长数据的乘法运算；即它可实现 2 个
32 位数据的乘法运算。程序中的其他库函数，请参见本书的附录 D 和附录 E。 
ADD/ADC 指令分别对高低 16 位数据进行加法运算：ADD 指令可设置/清除 CF 标识位，而 ADC 指令
会代入这个标识位的值。同理，SUB/SBB 指令对可实现 32 位数据的减法运算：SUB 可设置/清除 CF 标识
位，SBB 会在计算过程中代入借位标识位的值。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 53 章  16 位的 Windows 程序 
571 
在返回函数值的时候，32 位的返回值通过 DX：AX 寄存器对回传。 
另外，当主函数 WinMain()函数向其他函数传递 32 位常量时，它也把常量拆分为 1 对 16 位数据了。 
如果要把 int 型常数 123 当作 long 型 32 位参数，那么编译器就会使用 CWD 指令把 AX 里的 16 位数
据符号扩展为 32 位的数据、再连同 DX 寄存器里的高 16 位数据一同传递。 
53.5  例子#5 
#include  
int PASCAL string_compare (char *s1, char *s2) 
{ 
        while (1) 
        { 
                if (*s1!=*s2) 
                        return 0; 
                if (*s1==0 || *s2==0) 
                        return 1; // end of string 
                s1++; 
                s2++; 
        }; 
}; 
int PASCAL string_compare_far (char far *s1, char far *s2) 
{ 
        while (1) 
        { 
                if (*s1!=*s2) 
                        return 0; 
                if (*s1==0 || *s2==0) 
                        return 1; // end of string 
                s1++; 
                s2++; 
        }; 
}; 
void PASCAL remove_digits (char *s) 
{ 
        while (*s) 
        { 
                if (*s>='0' && *s<='9') 
                        *s='-'; 
                s++; 
        }; 
}; 
char str[]="hello 1234 world"; 
int PASCAL WinMain( HINSTANCE hInstance, 
                    HINSTANCE hPrevInstance, 
                    LPSTR lpCmdLine, 
                    int nCmdShow ) 
{ 
        string_compare ("asd", "def"); 
        string_compare_far ("asd", "def"); 
        remove_digits (str); 
        MessageBox (NULL, str, "caption", MB_YESNOCANCEL); 
        return 0; 
}; 
string_compare proc near 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
572 
逆向工程权威指南（下册） 
arg_0 = word ptr  4 
arg_2 = word ptr  6 
      push      bp 
      mov      bp, sp 
      push      si 
      mov      si, [bp+arg_0] 
      mov      bx, [bp+arg_2] 
loc_12: ; CODE XREF: string_compare+21j 
      mov      al, [bx] 
      cmp      al, [si] 
      jz      short loc_1C 
      xor      ax, ax 
      jmp      short loc_2B 
loc_1C: ; CODE XREF: string_compare+Ej 
      test      al, al 
      jz      short loc_22 
      jnz      short loc_27 
loc_22: ; CODE XREF: string_compare+16j 
      mov      ax, 1 
      jmp      short loc_2B 
loc_27: ; CODE XREF: string_compare+18j 
      inc      bx 
      inc      si 
      jmp      short loc_12 
loc_2B: ; CODE XREF: string_compare+12j 
        ; string_compare+1Dj 
      pop      si 
      pop      bp 
      retn      4 
string_compare endp 
string_compare_far proc near ; CODE XREF: WinMain+18p 
arg_0 = word ptr  4 
arg_2 = word ptr  6 
arg_4 = word ptr  8 
arg_6 = word ptr  0Ah 
      push     bp 
      mov      bp, sp 
      push      si 
      mov      si, [bp+arg_0] 
      mov      bx, [bp+arg_4] 
loc_3A: ; CODE XREF: string_compare_far+35j 
      mov      es, [bp+arg_6] 
      mov      al, es:[bx] 
      mov      es, [bp+arg_2] 
      cmp      al, es:[si] 
      jz      short loc_4C 
      xor      ax, ax 
      jmp      short loc_67 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 53 章  16 位的 Windows 程序 
573 
loc_4C: ; CODE XREF: string_compare_far+16j 
      mov      es, [bp+arg_6] 
      cmp      byte ptr es:[bx], 0 
      jz      short loc_5E 
      mov      es, [bp+arg_2] 
      cmp      byte ptr es:[si], 0 
      jnz      short loc_63 
loc_5E: ; CODE XREF: string_compare_far+23j 
      mov      ax, 1 
      jmp      short loc_67 
loc_63: ; CODE XREF: string_compare_far+2Cj 
      inc      bx 
      inc      si 
      jmp      short loc_3A 
loc_67: ; CODE XREF: string_compare_far+1Aj 
        ; string_compare_far+31j 
      pop      si 
      pop      bp 
      retn      8 
string_compare_far endp 
remove_digits proc near ; CODE XREF: WinMain+1Fp 
arg_0 = word ptr 4 
      push      bp 
      mov      bp, sp 
      mov      bx, [bp+arg_0] 
loc_72: ; CODE XREF: remove_digits+18j 
      mov      al, [bx] 
      test      al, al 
      jz      short loc_86 
      cmp      al, 30h ; '0' 
      jb      short loc_83 
      cmp      al, 39h ; '9' 
      ja      short loc_83 
      mov      byte ptr [bx], 2Dh ; '-' 
loc_83: ; CODE XREF: remove_digits+Ej 
        ; remove_digits+12j 
      inc      bx 
      jmp      short loc_72 
loc_86: ; CODE XREF: remove_digits+Aj 
      pop      bp 
      retn      2 
remove_digits    endp 
WinMain proc near ; CODE XREF: start+EDp 
      push      bp 
      mov      bp, sp 
      mov      ax, offset aAsd ; "asd" 
      push      ax 
      mov      ax, offset aDef ; "def" 
      push      ax 
      call      string_compare 
      push      ds 
      mov      ax, offset aAsd ; "asd" 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
574 
逆向工程权威指南（下册） 
      push      ax 
      push      ds 
      mov      ax, offset aDef ; "def" 
      push      ax 