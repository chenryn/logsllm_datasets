258/1144
10.1.3求解flag
1.直接内存获取
对于一些比较简单的题目，可通过直接查看内存的方式获取flag。
对于这种形式，只需要在比较的地方下个断点，然后通过查看内存即
可得到flag，伪代码如下：
input=get_input()
if(input == calc_flag()
puts(flag is input)
{
这里以2015年9447CTF的the-real-flag-finder作为实例，该程序的
main函数的反编译代码如图10-9所示，通过分析可以发现程序通过循
环计算出了一个dest，然后与输入的参数argv[1]进行比较，如果相等
则argv[1]就是flag。
---
## Page 259
CTF特训营：技术详解、解题方法与
10.1.3求解flag
259/1144
y9=（char**）argv;
v13=（unsigned int）n-1LL;
v4=alloca（16*（（（unsigned
int64)（unsigned int)n+15)/0x10));
dest=（char *）&v9;
strcpy（（char *)6v9，src）;
for（i=0;;++i）
v12=0;
if（Imemcmp（dest，“9447"，4uLL))
dest;
v6=i8（unsigned int）n;
break;
v8=sub_40060D（v5,4196426LL);
V7
dest[v6]v87;
V9[1],（unsigned int）n））
printf（“The flag is &s\n"，v9[1],v9）;
else
puts（"Try again");
图10-9the-real-flag-finder程序的反编译代码
所以该题选择在调用memcmp的地方下断点，然后运行程序。在
断点断下之后，RDl寄存器指向的内容即为flag，如图10-10所示。
Breakpoint 1，0x0000000000400729in ??
daSx/sSrdi
ex7fffffffe3be:"9447{COngr47ulaT1ons_p41_buddy_yeUv3_solved_the_re41__H4LT1N6_pr0bL.3M}"
图10-10在GDB中读取flag
2.对算法进行逆变换操作
如果一个判断过程的代码如下所示，那么要分析convert的算
法，然后分析结果编写出对应的逆算法，通过
reverse_convert（stardard）方式求得flag：
---
## Page 260
CTF特训营：技术详解、解题方法与
10.1.3求解flag
260/1144
input= get_input()
if(standard==convert(input))
{
(ndui s! be)snd
这里以一个base64编码的程序作为实例。初步分析程序的main
函数，main函数中的change函数根据输入input得到一个output字符
串，然后将output字符串与“ms4otszPhcr7tMmzGMkHyFn=”进行
比较，如图10-11所示，所以需要分析change函数。
图10-11定位到程序比较的地方
change函数如图10-12所示，首先建立了一个to_string（i）与v22[]
的map，然后，将inpu转化为二进制的字符串，每次取6字节，转化
为一个整数，接着查询map，得到对应的输出字节，所以可以确定其
为变种的base64。
---
## Page 261
CTF特训营：技术详解、解题方法与
10.1.3求解flag
261/1144
r(_APatSTarE
6v27pair,
4v27,8028
_ist64421,0b,）1//取6字节
diistring.stdiistring,atdril
.std:istriagps>iifiad
图10-12
2change函数的反编译代码
下面进行base64逆变换：
import base64
S1=
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
s2=‘ELF8n0BKxOCbj/WU9mwe4cG6hytqD+
P3kZ7AzYsag2NufopRSIVQHMXJri51Tdv
=
foriin range(len(s1):
dict[s2[]]=s1]
dict=j=
output ='ms4otszPhcr7tMmzGMkHyFn=
s3=*
fori in range(len(output):
s3+=dict[output[i]]
flag = base64.b64decode(s3)
print flag
3.线性变换的求解
---
## Page 262
CTF特训营：技术详解、解题方法与.
10.1.3求解flag
262/1144
如果convert是一个线性变换，那么在output=convert(input)中，
outpu的第i位只能由input的第i位决定。这样，通过获取input[i的所有
可能输入对应的输出output]，即可求出input[。因此对于这种变
换，可以进行单字符爆破。
实例来自某次国内CTF比赛，题目提供了一个cipher可执行程序
和ciphertext密文数据。运行cipher，会要求输入明文，并将加密后的
结果保存到out文件中，如图10-13所示。
手动尝试，发现当输入只有第1字节不同时，输出也只有第1字
节不同。经过多次尝试，可以确定其为线性变换，如图10-14所示。
@ubun →cipherls
ciphercipher.idb ciphertext
@ubun →cipher./cipher
input plaintext:111111111
@ubun →cipherls
ciphercipher.idbciphertextout
@ubun →cipher
图10-13cipher程序运行结果
---
## Page 263
CTF特训营：技术详解、解题方法与
10.1.3求解flag
263/1144
@ubun →cipher
./cipher
input plaintext:123456
@ubun →
cipherhexdumpout
0000000d5818f9a20e1
0000006
@ubun →
cipher
./cipher
inputplaintext:223456
@ubun →
cipherhexdumpout
0000000d5df8f9a20e1
0000006
图10-14根据输出结果推断为线性变换
所以，对于该题可以采用单字节爆破的方式，代码如下：
fromzio import*
with open(./ciphertext')as f:
d=f.read()
flag=
for i in range(len(d):
for c inrange(0x21,0x80):
try_input =flag+chr（c)
io=zio(/cipher)
io.writeline(try_input)
io.close()
f=open(/out',rb)
d2=f.read()
---
## Page 264
CTF特训营：技术详解、解题方法与
10.1.3求解flag
264/1144
ifd2]==d[]：
flag += chr(c)
break
print flag
4.约束求解
如果output=convert（input）之后，需要output满足多个约束条件
那么这种情况下通常会选择约束求解，通常会用到的约束求解器为
Z3。
运行程序，弹出错误对话框。用OD加载，下断点
GetWindowsTextA，按下check键，程序成功断下来。调用堆栈，如
图10-15所示，可以知道函数返回地址为0x40bd7b。
0012F3E0
0040BD7BrCALL到Cetuiuuovlet6来自ha-1ong.005
0012F3E4
000F01F8
hWnd =000Fθ1F8（class='Edit',parent=0
0012F3E8
00B47700
Buffer=00B4770θ
0012F3EC
00900012
LCount=12（18.）
0012F3F 0
00528E00ha-1ong.00528E00
图10-15程序在GetWindowTextA断下时的堆栈
在IDA中查看0x40bd7b地址，发现该函数被识别为
CWnd：：GetWindowTextA，所以还要再回溯一层，最终到达地址
0x4017AD。
---
## Page 265
CTF特训营：技术详解、解题方法与
10.1.3求解flag
265/1144
0x4017AD函数的反编译代码如图10-16所示，除了对长度进行判
断，要求小于40字节之外，还调用了3个子函数，对输入进行变换。
CWnd::GetWindowTextA（（int）（（char*）v1+120),（int）&v16）;
（0>（E-9TA（￥OM）））3
3=v16;
//size
（=39）
H+v3:
if（a2[9]-a2[20]==22）
return 0;
图10-19sub_401040函数的反编译代码
这里的条件较难直接计算，故采用约束求解的方式进行求解，代
---
## Page 267
CTF特训营：技术详解、解题方法与
10.1.3求解flag
267/1144
码如下：
fromz3import*
importbase64
151,151,164,164,152,166,205,188,163,162,146,161,162,135,149,156,180,
218,229,192,159,185,202,22]
s1=[BitVec(s1_%d%i,8)foriinrange(41)]
s=Solver()
foriin range(39):
s.add（s1[]+s1[i+1]==s2[j])
s.add(s1[9]-s1[20]==22)
s.add(s1[40] == 0)
S3=*
if s.check()==z3.sat:
m = s.model()
for i in range(40):
s3+=chr（m[s1[i]].as_long()
flag =base64.b64decode(s4)
print flag
---
## Page 268
CTF特训营：技术详解、解题方法与
10.2自动化逆向
268/1144
10.2自动化逆向
在前面的介绍中，大多数逆向都是通过手工逐步进行分析，但是
出于效率的考虑，我们更希望使用脚本来对一些重复性的工作进行自
动化处理。在逆向工程领域，有较多使用Python开发的工具，这些工
真大多数支持分析人员编写相应脚本来完成一些自动化的处理工作。
Python逆向工具详见http://pythonarsenal.com/，这里简单介绍几个常
用的工具。
---
## Page 269
CTF特训营：技术详解、解题方法与
10.2.1 IDAPython
269/1144
10.2.1IDAPython
通过IDAPython插件，分析人员能够以Python脚本的形式访问
IDC脚本引擎的核心、完整的IDA插件API，以及所有与Python捆绑在
一起的常见模块。
目前，默认安装的IDA中已经内置了IDAPython插件，因此我们
只需要通过菜单栏选择File→Scriptfile，然后选择要执行的Python脚
本即可运行。
IDAPython有着较为详细的文档，详情请参见https://www.hex-
rays.com/products/ida/support/idapython_docs/。其中我们能调用到的
接口位于idaapi、idautils和idc三个模块中。在IDA的安装目录下的
python子目录中能够看到这3个Python脚本，如图10-20所示。
idc.pyc
2014/6/23 13:51
Compiled Pytho..
257 KB
idc.py
2014/6/4 20:43
Python File
246 KB
idautilspyc
2014/6/23 13:51
Compiled Pytho..
26 KB
idautils.py
2014/6/4 20:43
Python File
23 KB
idaapi.pyc
2014/6/23 13:51
Compiled Pytho..
1,758 KB
idaapi.py
2014/6/5 0:42
Python File
1,459 KB
图10-20IDAPython的主要模块
---
## Page 270
CTF特训营：技术详解、解题方法与
10.2.1 IDAPython
270/1144
一个简单的IDAPython脚本如下，下面的示例代码是对0x4094处
的0xd8长度数据进行异或解密：
fromidaapi import*
fromidc import*
from idautils import*
def decrypt(start,end,xor_data):
foriin range(start,end):
a=get_byte(i)
patch_byte(i,a^xor_data)
decrypt(0x4094, 0x4094+0xd8, 0xab)
---
## Page 271
CTF特训营：技术详解、解题方法与
10.2.2 PythonGdb
271/1144