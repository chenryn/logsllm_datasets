1
B0
∏
Ci =
Let C =
n
i=1 Ci. Then we have
d∏
xi
.
hxi
1
n∑
Bd
0 C = hx
1
gsi
1
where
x =
xi.
i=1
i=1
2. Each signer i computes (m1, . . . , mk) = H(d,Y,
M ). He picks a random ri ∈ ZN and computes
S1;i = gsi
2 (u
umj
j
)ri , S2;i = gri
1 .
j=1
Signer i sends (S1;i, S2;i) to the signer in step 1.
3. After collecting (S1;i, S2;i) from the t signers, cal-
culate
k∏
d∏
d∏
i=1
S1 = hx
2
S1;i, S2 =
The signature is (S1, S2,{Ci, πi}n
i=1
i=1).
S2;i.
• Verify: On input (n, d,Y, M, σ), (cid:12)rst compute (m1, . . .,
mk) = H(d,Y, M ). For i = 1, . . . , n, check if
^e(Ci, Ci) = ^e(h1, πi) · ^e(Ci,
gsi
1
B0
).
∏
If they are true, compute C =
k∏
^e(S1, g1) = ^e(S2, u
j=1
umj
j
d∏
i=1
gsi
1 )
^e(g2, gsi
1 ) · ^e(g2, hx
1 )
2 , g1) · ^e(g2, hx
1 )
^e(gsi
umj
j
1
j=1
0 C)
) · ^e(g2, hx
) · ^e(g2, Bd
k∏
k∏
umj
j
) · d∏
umj
i=1 ri ) · d∏
j
∑
k∏
∑
umj
j
i=1
i=1
)
d
j=1
Check correctness:
k∏
j=1
^e(S2, u
d∏
d∏
i=1
=^e(
S2;i, u
=^e(g1, (u
gri
1 , u
k∏
d∏
d∏
j=1
i=1
=^e(g1, hx
2
S1;i)
i=1
=^e(g1,
gsi
2 (u
umj
j
)
j=1
d
i=1 ri ) · ^e(g1, hx
2 )
=^e(g1, S1)
4.2 Security Proof
Theorem 1. The threshold ring signature scheme is un-
forgeable against insider corruption if the CDH assumption
holds in Gp.
Proof. Setup. The simulator B runs the bilinear group
generator (N = pq, G, GT , ^e) ← G(1(cid:21)). B is given the CDH
problem instance (g, ga, gb) ∈ G3
p and is asked to output gab.
B (cid:12)rst sets an integer, µ = 4qe, and chooses an integer, κ,
uniformly at random between 0 and k. B picks x
, x1, . . . , xk
uniformly at random between 0 and µ−1. B randomly picks
a γ ∈ ZN and sets z1 = g
q . Since g ∈ Gp, z1 is in Gq. Also
1 can be computed from gb.
zb
B randomly picks a generator h1 ∈ Gq. B randomly picks
, y1, . . . , yk, α, β ∈ ZN and sets
′
y
p(cid:13)
′
′
u = gN−(cid:20)(cid:22)+x
′
2
2 gy1 ,
g1 = gz1,
u1 = gx1
g2 = gaz(cid:11)
1 ,
uk = gxk
1 , B0 = h(cid:12)
1 .
Note that ^e(g1, h2) = ^e(z1, h(cid:11)
1 , h1) = ^e(g2, h1), s-
ince ^e(g, h1) = 1. Finally, B randomly chooses a collision
resistant hash function H : N × G∗ × {0, 1}∗ → {0, 1}k.
2 gyk ,
1 ) = ^e(z(cid:11)
h2 = h(cid:11)
. . . ,
gy
,
Then B gives the public parameters
(N, G, GT , ^e, g1, g2, B0, h1, h2, u, u1, . . . , uk, H)
to the adversary A. For a message m = {m1, . . . , mk}, we
de(cid:12)ne
F (m) = (N − µκ) + x
yimi.
Assume B picks τ as the challenge signer. For i = 1, . . . , n,
k∑
k∑
J(m) = y
ximi,
i=1
i=1
+
+
′
′
B picks random si ∈ ZN and sets:
{
pki =
gsi
1
gbzb
1
if i ̸= τ ,
if i = τ .
n
i=1 Ci and check if:
) · ^e(g2, Bd
0 C).
B stores the set of public keys {pki}n
Oracle Simulation. B simulates the oracles as follows:
i=1.
• J O: on the i-th query, B returns pki.
264
S1;(cid:28) = (gb)
−J(m)
F (m) (u
umj
j
)r(cid:28) ,
since x
′
+
• CO(pki): If i = τ , B declares failure and exits. Other-
wise, B returns gsi
2 .
• SO(n, d,Y,V, M ): On input a message M , a set of n
i}n
i=1, and a set of d signers V,
public keys Y = {pk
′
B calculates (Ci, πi) according to the Sign algorithm.
Note that no secret key is required to generate (Ci, πi).
Then we have
∏
Bd
0 C = hx
1
gsi
1 .
i|pki∈V
∑
Denote m = H(d,Y, M ). We also write m into k bits
{m1, . . . , mk}. If x
i=1 ximi ≡ 0 mod µ, then B
aborts. For all pki ∈ V and i ̸= τ , B calculates all
(S1;i, S2;i) according to the Sign algorithm. If pk(cid:28) ∈
V,B chooses a random r(cid:28) ∈ ZN and calculates
+
k
′
k∏
S2;(cid:28) = (gbzb
1)
Let (cid:22)r = r(cid:28) − b
F (m) , then
S1;(cid:28) = (gb)
−J(m)
F (m) (u
j=1
−1
F (m) (gz1)r(cid:28) .
k∏
j=1
umj
j
)r(cid:28) ,
= gb
2(gF (m)
2
gJ(m))r(cid:28) − b
F (m) ,
= gb
2(u
umj
j
)(cid:22)r,
k∏
j=1
∑
′
k
k
+
+
∑
The simulator will be able to perform this computation
if and only if F (m) ̸= 0 mod N . For ease of analysis
the simulator will only continue in the su(cid:14)cient con-
i=1 ximi ̸= 0 mod µ. (If we have
′
dition where x
i=1 ximi ̸= 0 mod µ, this implies F (m) ̸= 0
x
mod N since we can assume N > kµ for any reason-
able values of N, k, and µ).
Finally, B calculates the rest of the signature according
to the Sign algorithm.
,Y∗
Output. A returns (n
∗
= (m
1,
,Y∗
). Note that this hash value is dif-
, M
. . . , m
,Y∗
ferent from previous m in various SO queries, since (d
∗
∑
,
) cannot be the input of previous SO queries and H
M
If pk(cid:28) /∈ Y∗
and
is a collision resistant hash function.
i ̸= µκ, then B aborts. Otherwise, WLOG,
∗
′
k
i=1 xim
x
∗
we assume that pk(cid:28) is at the position τ of the signature σ
∗
Since σ
is a valid signature, then
∗
∗
k) = H(d
). Denote m
, d
∗
, M
, σ
+
∗
∗
∗
∗
∗
∗
.
∗
1 , g1) = ^e(S
^e(S
∗
2 , u
∗
j
m
u
j
) · ^e(g2, Bd
0
∗
∗
i ),
C
(1)
).
i=1
^e(C
∗
i ,
pki
B0
∗
i , C
. Since ^e(h1, π
∗
i ) = ^e(h1, π
∗
for i = 1, . . . , n
either C
if (C
sets fi = 0. Otherwise, B0C
pki
∗
i = ( pki
B0
j=1
i ) · ^e(C
∗
(2)
∗
i ) has order q in GT , therefore
has order q from equation 2. B checks
i has prder q and then B
∗
has order q and then B sets
for some unknown
∗
i )q = 0. If it is true, then C
fi = 1. It follows that C
i, no matter fi = 0/1. If f(cid:28) = 0, B aborts.
′
r
∗
i or B0C
pki
)fi zr
1
∗
i
∗
i
′
i
k∏
∗∏
n
Let δ ∈ ZN such that δ = 0 mod q and δ = 1 mod p. If
we raise equation 1 to the δ-th power, then we have
∗
1 , g1)(cid:14) = ^e(S
∗
2 , u
^e(S
∗
1 , g)(cid:14) = ^e(S
^e(S
j=1
∗
∗
2 , gJ(m
∗
1 , g)(cid:14) = ^e(S
∗
2 , gJ(m
∗
^e(S
k∏
∗
j
m
u
j
∗
∏
)(cid:14) · ^e(g2, Bd
∏
∏
i|i∈Y∗
(
∗
0
0
i|i∈Y∗
))(cid:14) · ^e(ga, Bd
))(cid:14) · ^e(ga,