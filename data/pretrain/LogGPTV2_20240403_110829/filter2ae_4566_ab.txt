首先用以下PowerShell脚本创建一个Bitmap对象，并打印内核对象句柄，然后用工具找到这个的对象以便后面做对比
打印出Bitmap内核对象句柄：
切换进程：
获取GdiSharedHandleTable地址：
获取Bitmap 句柄地址：
可以看到地址 fffff900`c1ca6000 和上面图片里用工具获取的一致，Bitmap内核地址有了，该怎么用呢？GDICELL结构的
pKernelAddress 成员指向 BASEOBJECT 结构，不过我们关心的是在这一头部之后，有一个特定的结构体，它的类型是由 wType
成员决定的：
位图结构：
pvScan0 成员就是我们需要利用的，因为GetBitmapBits 和 SetBitmapBits
这两个API能操作这个成员。GetBitmapBits 允许我们在 pvScan0 地址上读任意字节，SetBitmapBits 允许我们在 pvScan0
地址上写任意字节。如果我们有一个漏洞(例如：CVE-2018-8120)可以修改一次内核地址, 把 pvScan0
改成我们想要操作的内核地址，这样是不是就实现了可以重复利用的内核任意读写呢？
有了这些基础知识，我们整理出使用该方法并配合某个任意地址写的漏洞来将GetBitmapBits /
SetBitmapBits改造成可以实现任意地址读写的利用函数，具体步骤：
  * 创建2个位图（Manager/Worker）
  * 使用句柄查找GDICELL64，分别计算两个位图的 pvScan0 地址
  * 使用漏洞将 Worker pvScan0 偏移量地址写入 Manager 的 pvScan0 值
  * 使用 Manager 上的 SetBitmapBits 来选择地址
  * 在 Worker 上使用GetBitmapBits / SetBitmapBits来读取/写入上一步设置的地址
整个利用操作流程如下：
##### 利用Bitmap GDI实现CVE-2018-8120在Windows 7 x64环境下的漏洞利用
有了上述的所有基础知识，我们来看看利用程序是如果使用该技术在Windows 7 64位环境下利用CVE-2018-8120实现提权攻击的。
第一步，首先利用ZwAllocateVirtualMemory分配基地址位于零页的内存块，以使零页完成映射：
调用NtAllocateVirtualMemory函数成功在零地址上面分配了一块空间：
第二步，创建创建2个位图（Manager/Worker）对象，并使用CVE-2018-8120漏洞将 Worker pvScan0 偏移量地址写入
Manager 的 pvScan0 值，创建内核任意地址读写能力，具体操作如下：
创建两个bitmap对象
泄露出各自的内核地址，得到 mpv 和 wpv 两个指针：
使用任意写来设置 mpv 去指向 wpv 的地址，实现可重用的内核任意读写
先要构造环境让函数运行到下面拷贝数据的地方，还记得上面我们对 NtUserSetImeInfoEx 函数漏洞原理的分析吗？
NtUserSetImeInfoEx
函数从首节点开始遍历键盘布局对象链表，直到节点对象的pklNext成员指回到首节点对象为止。然后判断每个被遍历的节点对象的 hkl 成员是否与参数
ime_info_ex 指向的源输入法扩展信息对象的 hkl 成员相等。为了触发后面的拷贝操作，我们需要跳过这个循环
要跳过这个循环很简单，我们让 pkl->hkl 和 NtUserSetImeInfoEx 函数的参数地址相等就行了。下面的代码就是在零页地址位置伪造了一个和
tagIMEINFOEX 结构体 spklList 成员类型一样的 tagKL 结构体，然后把它的 hkl 字段设置为 wpv 的地址。后面我们把 wpv
的地址放在 NtUserSetImeInfoEx 函数的参数 ime_info_ex 的第一个成员里面。这样就不会进入 while ( pkl->hkl
!= ime_info_ex ) 这个循环了：
然后再把 mpv 的地址放在零页内存地址偏移 0x50 的地方，NtUserSetImeInfoEx 函数会把它的参数( IMEINFOEX
结构)拷贝到目标键盘布局 tagKL 对象的 piiex 成员指向的输入法信息对象缓冲区中。 在win7 x64下面这个字段的偏移就是 0x50：
以下是调试时候获取到的 mpv 和 wpv 的值：
接着构造漏洞利用环境，调用 CreateWindowStation 函数创建一个窗口站，调用 SetProcessWindowStation
函数把窗口站和当前进程关联起来，接着构造一个 tagIMEINFOEX 结构，把 wpv 的地址放到它的 hkl 成员中，调用
NtUserSetImeInfoEx 后，NtUserSetImeInfoEx 函数就会把 wpv 的地址拷贝到 mpv 里面：
在调试器里面我们可以看到 已经成功触发了 NtUserSetImeInfoEx 的漏洞：
当 NtUserSetImeInfoEx 执行完后，我们的GDI内核任意读写的环境就已经构造好了：
注意：NtUserSetImeInfoEx 触发的拷贝数据长度是不可控的，memmove(piiex, &ime_info_ex, 0x160ui64);
代码里面可以看到是0x160的长度，也就是sizeof(tagIMEINFOEX), 我们要在这个地方修改Worker Bitmap的
pvScan0的地址，就会把 SURFACE 结构里面的其它数据给覆盖掉。 后面调用Gdi32 的 GetBitmapBits/SetBitmapBits
这两个函数就会不成功，因为这两个函数操作 pvScan0 的方式是和 SURFOBJ 结构 的
lDelta、iBitmapFormat、iType、fjBitmap 还有 SURFACE 结构的 flags
字段相关的。关于该结构的详细信息可以参考[10]。
以下代码是需要修复成员的对应值：
最后一步，使用 Gdi32 的 GetBitmapBits/SetBitmapBits API调用来读写内核地址空间，实现任意代码执行：
下面的代码实现了替换 HalDispatchTable 里面的 NtQueryIntervalProfile 函数为我们的提权ShellCode的地址，调用
NtQueryIntervalProfile 以达到执行ShellCode的目的：
最终在ShellCode中替换SYSTEM进程的token为当前进程的token，以实现提权：
#### 参考
[1].
[2].
[3].
[4].
[5].
[6].
[7].
[8].
[9].
[10].
[11]. 
* * *