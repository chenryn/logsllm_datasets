:::
如果您的 GFS2
文件系统挂起且没有返回针对它运行的命令，但重启一个特定节点会使系统恢复正常，这可能表示有锁定问题或者存在程序漏洞。如果出现这种情况，在出现这个问题时收集
GFS2 [数据并创建一个红帽支持问题单，如收集 GFS2
数据进行故障排除所述](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_gfs2_file_systems/index?lb_target=production#proc_gathering-gfs2-data-troubleshooting-gfs2){.link}。
:::
::: section
::: titlepage
# []{#assembly_troubleshooting-gfs2-configuring-gfs2-file-systems.html#ref_gfs2-filesystem-hangs-all-nodes-troubleshooting-gfs2}GFS2 文件系统挂起，需要重启所有节点 {.title}
:::
如果您的 GFS2
文件系统挂起且不会返回针对它运行的命令，并需要您重启集群中的所有节点才可以使用它，检查以下问题。
::: itemizedlist
-   您可能有一个失败的隔离（fence）。GFS2
    文件系统将停滞，以保证在出现隔离失败时的数据完整性。检查信息日志，查看在挂起时是否有失败的隔离。确定正确配置了隔离。
-   GFS2 文件系统可能已经撤回。检查信息日志中的 `withdraw`{.literal}
    ，检查所有来自 GFS2
    的信息并调用显示已经撤回的文件系统的信息。撤回通常代表文件系统崩溃、存储失败或存在程序漏洞。根据具体情况，尽早进行以下操作来卸载文件系统：
    ::: orderedlist
    1.  重启发生撤回的节点。
        ``` literallayout
        # /sbin/reboot
        ```
    2.  停止该文件系统资源在所有节点中卸载 GFS2 文件系统。
        ``` literallayout
        # pcs resource disable --wait=100 mydata_fs
        ```
    3.  使用 `gfs2_edit savemeta…​`{.literal}
        命令捕获元数据。您应该确定有足够的空间来容纳该文件，在某些情况下，所需空间可能比较大。在本例中，元数据被保存到
        `/root`{.literal} 目录中的一个文件中。
        ``` literallayout
        # gfs2_edit savemeta /dev/vg_mydata/mydata /root/gfs2metadata.gz
        ```
    4.  更新 `gfs2-utils`{.literal} 软件包。
        ``` literallayout
        # sudo yum update gfs2-utils
        ```
    5.  在一个节点上，在文件系统中运行 `fsck.gfs2`{.literal}
        命令以确保文件系统的完整性并修复任何损坏。
        ``` literallayout
        # fsck.gfs2 -y /dev/vg_mydata/mydata > /tmp/fsck.out
        ```
    6.  在 `fsck.gfs2`{.literal}
        命令完成后，重新启用该文件系统资源使其返回服务：
        ``` literallayout
        # pcs resource enable --wait=100 mydata_fs
        ```
    7.  创建一个红帽支持问题单。告知您遇到了 GFS2 撤回问题，并提供由
        `sosreports`{.literal} 和 `gfs2_edit savemeta`{.literal}
        命令生成的日志和调试信息。
        在 GFS2
        撤回的某些情况下，试图访问文件系统或其块设备的命令可能会挂起。在这些情况下，需要一个"硬"重启来重启集群。
        有关 GFS2 撤回功能的详情，请查看节点无法使用 GFS2 文件系统（GFS2
        [撤回功能）。](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_gfs2_file_systems/index?lb_target=production#ref_gfs2-filesystem-unavailable-troubleshooting-gfs2){.link}
    :::
-   这个出错信息表示可能有锁定问题或者程序漏洞。在出现这个问题时收集
    GFS2 [数据并创建一个红帽支持问题单，如收集 GFS2
    数据进行故障排除所述](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_gfs2_file_systems/index?lb_target=production#proc_gathering-gfs2-data-troubleshooting-gfs2){.link}。
:::
:::
::: section
::: titlepage
# []{#assembly_troubleshooting-gfs2-configuring-gfs2-file-systems.html#ref_gfs2-nomount-new-cluster-node-troubleshooting-gfs2}GFS2 文件系统不会挂载到新添加的集群节点中 {.title}
:::
如果您在集群中添加新节点，且发现您无法在那个节点中挂载 GFS2 文件系统，则
GFS2 文件系统中的日志可能比尝试访问 GFS2
文件系统的节点要少。您必须为每个 GFS2
主机有一个日志，您要在其中挂载文件系统（除了使用 `spectator`{.literal}
挂载选项挂载的 GFS2 文件系统外，这些日志不需要日志）。您可以使用
`gfs2_jadd`{.literal} 命令在 GFS2 文件系统中添加日志，如在 [GFS2
文件系统中添加日志所述](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_gfs2_file_systems/index?lb_target=production#proc_adding-gfs2-journal-creating-mounting-gfs2){.link}。
:::
::: section
::: titlepage
# []{#assembly_troubleshooting-gfs2-configuring-gfs2-file-systems.html#ref_gfs2-used-space-empty-filesystem-troubleshooting-gfs2}在空文件系统中的空间被标记为已被使用 {.title}
:::
如果您有一个空 GFS2 文件系统，但 `df`{.literal}
命令显示有空间已被使用。这是因为 GFS2
文件系统日志会占用磁盘空间（日志数乘以日志大小）。如果您创建了有大量日志的
GFS2 文件系统或者指定大的日志，那么您将在执行 `df`{.literal}
命令时看到一些空间（日志数乘以日志大小）已经被使用。即使您没有设置大量日志或者大的日志，小
GFS2 文件系统（1GB 或者更小）也会显示部分空间被使用（默认 GFS2
日志大小）。
:::
::: section
::: titlepage
# []{#assembly_troubleshooting-gfs2-configuring-gfs2-file-systems.html#proc_gathering-gfs2-data-troubleshooting-gfs2}为故障排除收集 GFS2 数据 {.title}
:::
如果您的 GFS2
文件系统挂起，且不会返回针对它运行的命令，您应该收集以下数据并创建一个红帽支持问题单：
::: itemizedlist
-   每个节点中的文件系统的 GFS2 锁定转储数据：
    ``` literallayout
    cat /sys/kernel/debug/gfs2/fsname/glocks >glocks.fsname.nodename
    ```
-   每个节点中的文件系统的 DLM 锁定转储数据：您可以使用
    `dlm_tool`{.literal}获取此信息：
    ``` literallayout
    dlm_tool lockdebug -sv lsname.
    ```
    在这个命令中，[*lsname*]{.emphasis} 是有问题的文件系统中 DLM
    使用的锁定空间名称。您可以在 `group_tool`{.literal}
    命令的输出结果中找到这个值。
-   `sysrq -t`{.literal} 命令的输出。
-   `/var/log/messages`{.literal} 文件的内容。
:::
收集到这些数据后，创建一个红帽支持问题单。
:::
:::
[]{#con_gfs2-tracepoints-configuring-gfs2-file-systems.html}
::: chapter
::: titlepage
# []{#con_gfs2-tracepoints-configuring-gfs2-file-systems.html#con_gfs2-tracepoints-configuring-gfs2-file-systems}第 8 章 GFS2 追踪点和 glock debugfs 接口 {.title}
:::
这个有关 GFS2 追踪点和 glock `debugfs`{.literal}
界面的文档适用于熟悉文件系统内部以及想要了解更多有关 GFS2
设计以及如何调试 GFS2 的问题的高级用户。
下面的部分描述了 GFS2 追踪点和 GFS2 `glocks`{.literal} 文件。
::: section
::: titlepage
# []{#con_gfs2-tracepoints-configuring-gfs2-file-systems.html#gfs2_tracepoint_types}GFS2 追踪点（tracepoint）类型 {.title}
:::
目前有三种类型的 GFS2 追踪点：[*glock*]{.emphasis} （发音为
\"gee-lock\"）追踪点、[*bmap*]{.emphasis} 追踪点和 [*log*]{.emphasis}
追踪点。它们可以用来监控正在运行的 GFS2 文件系统，并提供之前 Red Hat
Enterprise Linux
发行版本中支持的调试选项的附加信息。当问题（如挂起或性能问题）可以重复出现时，追踪点就会非常有用，因此可以在有问题的操作过程中获得追踪点的输出。在
GFS2 中，glocks 是主要缓存控制机制，它们是了解 GFS2
内核性能的关键。bmap（块映射）追踪点可用于监控块分配和块映射（查找磁盘元数据树中已分配的块）并检查与访问本地性相关的问题。日志追踪点记录要从日志中写入和发布的数据，并可提供
GFS2 部分的有用信息。
追踪点的设计原则是尽可能通用。这意味着在 Red Hat Enterprise Linux 8
中不需要更改
API。另外，使用这个接口的用户应该意识到，它只是一个调试界面，而不是一般的
Red Hat Enterprise Linux 8 API
集的一部分，因此红帽并不保证不会在以后修改 GFS2 追踪点接口。
追踪点是 Red Hat Enterprise Linux 的通用功能，其范围远远超越
GFS2。特别是它们用来实现 `blktrace`{.literal}
基础架构，`blktrace`{.literal} 追踪点可以和 GFS2
组合使用，以获得系统性能的更完整的描述。取决于追踪点操作的级别，它们可能会在短时间内产生大量数据。虽然追踪点被设计为在启用时有最小的系统负载，但它们无可避免地会产生一些影响。通过不同方法过滤事件可帮助减少数据的数量，并帮助只获得有助于了解特定情形的信息。
:::
::: section
::: titlepage
# []{#con_gfs2-tracepoints-configuring-gfs2-file-systems.html#ap-tracepoints-gfs2}追踪点（Tracepoints） {.title}
:::
追踪点可以在 `/sys/kernel/debug/tracing/`{.literal} 目录下找到，假设
`debugfs`{.literal} 被挂载在 `/sys/kernel/debug`{.literal}
目录的标准位置。`events`{.literal}
子目录包含所有可以被指定的追踪事件，如果载入了 `gfs2`{.literal}
模块，则在每个 GFS2
事件中都有一个子目录。`gfs2`{.literal}`/sys/kernel/debug/tracing/events/gfs2`{.literal}
目录的内容类似如下：
``` literallayout
[root@chywoon gfs2]# ls
enable            gfs2_bmap       gfs2_glock_queue         gfs2_log_flush
filter            gfs2_demote_rq  gfs2_glock_state_change  gfs2_pin
gfs2_block_alloc  gfs2_glock_put  gfs2_log_blocks          gfs2_promote
```
要启用所有 GFS2 追踪点，请输入以下命令：
``` literallayout
[root@chywoon gfs2]# echo -n 1 >/sys/kernel/debug/tracing/events/gfs2/enable
```
要启用特定的追踪点，在每个事件子目录中都有一个 `enable`{.literal}
文件。`filter`{.literal}
文件也是如此，可用于为每个事件或一组事件设置事件过滤器。下面详细解释了各个事件的含义。
追踪点的输出以 ASCII 或二进制格式提供。本附录目前不包含二进制接口。ASCII
接口有两种方式。要列出环缓冲（ring
buffer）的当前内容，您可以输入以下命令：
``` literallayout
[root@chywoon gfs2]# cat /sys/kernel/debug/tracing/trace
```
当您在一定时间段内使用长时间运行的过程时，且希望在这些事件进行之后重新查看缓冲区中最新捕获的信息时，这个接口很有用。当所有输出都需要时，可以使用另外一个接口
`/sys/kernel/debug/tracing/trace_pipe`{.literal}。事件发生时会从这个文件中进行读取，这个接口不提供历史数据。两个接口的输出格式是相同，在本附录后续部分对每个
GFS2 事件都有说明。
`trace-cmd`{.literal} 是一个用于读取追踪数据的工具程序。
[有关这个工具的详情请参考](http://lwn.net/Articles/341902/){.link}
。`trace-cmd`{.literal} 的使用方式与 `strace`{.literal}
类似。例如，在从不同源收集追踪数据时运行命令。
:::
::: section
::: titlepage
# []{#con_gfs2-tracepoints-configuring-gfs2-file-systems.html#ap-glocks-gfs2}Glocks {.title}