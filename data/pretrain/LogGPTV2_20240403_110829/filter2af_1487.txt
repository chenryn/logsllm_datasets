### 作者
Zhiyi Zhang, 360 ESG Codesafe Team

### 前言
在Oracle于7月份发布[关键补丁更新](https://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html)后，我提交了多个不同类型的WebLogic漏洞。尽管官方未能完全修复所有问题，但此次发布的补丁解决了我报告的六个漏洞中的三个。由于某些原因，这三个漏洞被合并为一个CVE编号。本文将重点分析10月份补丁中修复的另外两个漏洞：CVE-2018-3245（WebLogic JRMP反序列化漏洞）和CVE-2018-3252（DeploymentService组件的反序列化漏洞）。

### CVE-2018-3252 (DeploymentService Deserialization via HTTP)
在审查`DeploymentService` Servlet时，我发现`doPost`方法中处理HTTP POST请求的核心函数`internalDoPost`。在这个函数中，变量`var4`是通过HTTPHeader中的`wl_request_type`获取的，并根据其值进入不同的处理逻辑。首先关注`handleDataTransferRequest`函数：
![handleDataTransferRequest](https://images.seebug.org/content/images/2018/10/c77a40a9-45dd-410c-9cea-2d73b404796c.png-w331s)

如图所示，程序对`var9`进行了反序列化，而`var9`是通过`DeploymentObjectInputStream`构造函数生成的，其中的参数是我们可以控制的。同样的逻辑也出现在`handleDeploymentServiceMessage`函数中：
![handleDeploymentServiceMessage](https://images.seebug.org/content/images/2018/10/d0ae0ee4-d3b8-4bd8-bcec-47ff0e10f3c5.png-w331s)

虽然这个漏洞可以通过HTTP方式利用，但需要用户认证，这限制了它的实际应用价值。感兴趣的读者可以进一步研究WebLogic的用户认证机制，尝试绕过认证。参考`authenticateRequest`函数：
![authenticateRequest](https://images.seebug.org/content/images/2018/10/5d098174-0d78-4440-ba59-185f69d3bdf4.png-w331s)

以下是一个使用用户名/密码进行认证的PoC示例：
![PoC Example](https://images.seebug.org/content/images/2018/10/4d32dad1-69e1-437e-86b4-43292b12124f.png-w331s)

### CVE-2018-3245 (JRMP Deserialization via T3)
针对7月份发布的补丁，我对代码进行了差异对比。不出所料，针对JRMP反序列化的修复措施仍然是增加黑名单。新增的黑名单包包括`java.rmi.activation`和`sun.rmi.server`，新增的黑名单类包括`java.rmi.server.UnicastRemoteObject`和`java.rmi.server.RemoteObjectInvocationHandler`。

```java
private static final String[] DEFAULT_BLACKLIST_PACKAGES = {
    "org.apache.commons.collections.functors", 
    "com.sun.org.apache.xalan.internal.xsltc.trax",
    "javassist", 
    "java.rmi.activation", 
    "sun.rmi.server"
};

private static final String[] DEFAULT_BLACKLIST_CLASSES = {
    "org.codehaus.groovy.runtime.ConvertedClosure",
    "org.codehaus.groovy.runtime.ConversionHandler", 
    "org.codehaus.groovy.runtime.MethodClosure",
    "org.springframework.transaction.support.AbstractPlatformTransactionManager",
    "java.rmi.server.UnicastRemoteObject", 
    "java.rmi.server.RemoteObjectInvocationHandler"
};
```

然而，只要找到继承自`java.rmi.server.RemoteObject`且不在黑名单中的类对象，就可以轻松绕过这些限制。例如，我使用了`ReferenceWrapper_Stub`类对象：
![Bypass Example](https://images.seebug.org/content/images/2018/10/51104bc1-b613-4564-ad05-ba09b41f7746.png-w331s)

验证结果如下：
![Verification](https://images.seebug.org/content/images/2018/10/bb8dfb52-7608-444a-9b2f-00a610bfb1f7.png-w331s)

WebLogic Console日志显示：
```
java.lang.ClassCastException: com.sun.jndi.rmi.registry.ReferenceWrapper_Stub cannot be cast to weblogic.rjvm.ClassTableEntry.
...
```

### 总结
目前谈到WebLogic漏洞挖掘时，人们往往会想到反序列化漏洞。尽管新的绕过方法可能会不断出现，但可用的gadget越来越少，使得漏洞利用变得更加困难。实际上，在阅读WebLogic代码的过程中，我发现许多常见的Java漏洞（如文件下载、上传、SSRF、XXE、DoS等）也都存在，并且利用起来相对简单。或许，尝试寻找其他类型的漏洞并结合使用，也可以达到远程代码执行的效果。

### 参考资料
- [Critical Patch Update - October 2018](https://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html)
- [Ysoserial](https://github.com/frohoff/ysoserial)

感谢您的阅读。如有任何问题，请通过电子邮件与我联系。