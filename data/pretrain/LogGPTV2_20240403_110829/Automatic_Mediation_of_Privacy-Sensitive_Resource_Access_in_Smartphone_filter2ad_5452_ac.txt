Anticipating values can be calculated using a simple
data-ﬂow computation, in the style of the Dragon
book [4]. A formulation of this analysis is shown
in Figure 10 in the form of a table traditional for
succinctly representing data-ﬂow problems. The ad-
vantage of such a formulation is that it runs in lin-
ear time, given a lattice of ﬁnite height (and size),
and that most compiler frameworks already provide
a data-ﬂow framework into which this kind of anal-
ysis can be “dropped”.
There is some ﬂexibility when it comes to the last
step.
Indeed, we can choose to use a dominator-
based, or a backward placement strategy, or some
combination.
In our implementation, we try the
dominator strategy ﬁrst to see if it yields a valid
placement and, failing that, resort to the backward
strategy. This hybrid approach is shown in the
function InsertPrompt in Figure 9. Note that if
placement is successful, the outcome is stored in the
Placement ⊂ N set.
to avoid the possibility of
InsertPrompt-B has an occurs-check on line 32
inﬁnite recursion for
120  22nd USENIX Security Symposium 
USENIX Association
(cid:27) Prevent inﬁnite recursion
(cid:27) Existing prompt at least as
(cid:27) Check if adequately protected
1: //Checks for existing prompts
2: function HasPrompt(G, r, a)
3: Occurs-check(a)
4:
5:
6:
if a ∈ G.Prompts then
r(cid:31) ← a.Type
adequate ← (r (cid:29) r(cid:31))
permissive as needed?
if adequate then
return true
7:
8:
9:
end if
10: end if
11:
//Explore all predecessors in turn
12:
for all p ∈ G.predecessors(a) do
13:
success ← HasPrompt(G, r, p)
14:
if ¬success then
15:
return false
16:
17:
end if
18: end for
19:
return true
20: end function
(cid:27) One of the predecessors failed
(cid:27) All predecessors succeeded
Figure 11: Checking for resource access prompts. G is
the graph; r is the resource type; a is the access node.
graphs with loops, which are encountered in the pro-
cess of backward exploration. If the current node is
not reachable from non-library code as indicated by
IsReachable, we return true. We discuss the chal-
lenges of fast backward computation in Section 4.2.
3.5 Checking For Existing Prompts
Note that before we choose to insert prompts we
need to make sure they are in fact missing as shown
on line 2 of Figure 9. Doing so requires a backward
search, as shown in Figure 11. Note that in prac-
tice, HasPrompts frequently returns false, failing
quickly without exploring the entire set of predeces-
sors. Section 4.2 demonstrates how this search can
be made faster.
1: function CreatePlacement(G, ant, idom)
for all a ∈ G.Accesses do
2:
success ← InsertPrompt(G, a, ant, idom)
3:
if ¬ success then
4:
return false
5:
else
6:
for all p ∈ Placement do
7:
Prompts ← Prompts ∪ (cid:26)p, ant(a)(cid:25)
8:
end for
9:
10:
end if
11: end for
12:
13:
14:
15:
16: end for
17:
return true
18: end function
// All clear: proceed with the placement
for all (cid:26)n, t(cid:25) ∈Prompts do
InsertAtNode(n, t)
Figure 12: Putting it all together: creating an overall
prompt placement for graph G.
3.6 Proof Sketch
The algorithm that pulls everything together to cre-
ate a placement is shown in Figure 12. We ﬁrst check
that whether there is indeed a valid placement for all
resource accesses. Once this is ensured, we proceed
to modify the underlying graph by inserting prompts
at appropriate places. Note that prompt insertion is
only attempted if they are in fact missing, as en-
sured by the check on line 2 of Figure 9. The details
of runtime instrumentation are given in Section 4.3.
The structure of the algorithm allows us to reason
about the resulting placement.
Theorem 1 The placement of prompts above is in
fact valid if the placement routine CreatePlace-
ment returns true.
Proof sketch: It is easier to consider each correct-
ness property in turn. We will refer to code lines in
Figure 9 unless indicated otherwise.
Safe: We need to ensure that every access a to
resource r is preceded by a prompt check for r.
The call to InsertPrompt must have returned
true for resource access a. This is because either
the dominator-based or backward strategy was suc-
cessful. If the dominator-based strategy succeeded,
there was a non-background, non-library node dom-
inating a which is also anticipating for a.Type. The
check on line 18 maintains this invariant.
If the
dominator-based strategy failed and the backward
strategy succeeded, this is because every path from a
to Nentry has encountered a placement point which
satisﬁed the check on line 33, providing adequate
protection for the access at a.
Visible: No prompt is placed within a background
task or library code. This is true by construction
because of checks on lines 19 and 34.
Frugal: Placement only occurs at anticipating
nodes because of checks on lines 18 and 33.
Not-repetitive: Prompt for r2 ∈ R is never in-
voked if permissions for r1 have already been granted
and r2 (cid:30) r1. This property is maintained by a com-
bination of three steps: (1) merging in Step 2 on the
overall algorithm, (2) check on line 52 and (3) the
runtime “sticky” treatment of prompts that avoids
double-prompting for the same resource type further
explained in Section 4.3.
4
Implementation Details
Our current implementation of the static analysis
described in this paper involves dealing with a vari-
ety of practical details, some of which are fairly com-
mon in bytecode-based static analysis tools, whereas
USENIX Association  
22nd USENIX Security Symposium  121
others are quite speciﬁc to our setting of WP apps
written in .NET.
A signiﬁcant part of the implementation involves
building a graph on which to perform our analysis.
Intra-procedurally, we parse the .NET bytecode to
construct basic blocks; we terminate them at method
calls to simplify analysis. For call graph construc-
tion, we use a simple class hierarchy analysis (CHA)
to resolve virtual calls within the program. We also
construct a dominator tree as part of graph construc-
tion, as we need it later. In many cases, the resulting
graphs have enough precision for our analysis.
4.1 Reﬂection & Analysis Challenges
WP applications are distributed as XAP ﬁles, which
are archives consisting of code in the form of byte-
code DLLs, resources such as images and XAML,
and the app manifest, which speciﬁes requested ca-
pabilities, etc. Unsurprisingly, various reﬂective con-
structs found in WP apps create challenges for our
analysis. While we outline some of the details of
our solutions below, constructing precise static call
graphs for mobile apps remains an ongoing chal-
lenge, and require further research.
Analysis imprecision usually does not stem from
the underlying call graph construction approach,
which could be alleviated through pointer analysis,
which generally provides suﬃcient precision for call
graph construction, but in challenges speciﬁc to com-
plex WP apps, as discussed below.
Event handlers: The code below illustrates some
complications posed by event handlers.
static void Main(string[] args) {
AppDomain.CurrentDomain.ProcessExit +=
new EventHandler(OnProcessExit);
}
// library code
static void OnProcessExit(object sender, EventArgs e) {
// location access
var watcher =
new System.Device.Location.GeoCoordinateWatcher();
var pos = watcher.Position;
}
By default, method OnProcessExit does not have any
predecessors in the call graph. At runtime, it may
in fact be called from a variety of places, which is
not easy to model as part of call graph construction.
However, it may not be called before the event han-
dler is registered in method Main. Our solution is to
augment the call graph construction code to create
a special invocation edge from the registration site
to OnProcessExit. The analysis will then be able
to place the prompt right before the registration in
method Main, which makes a signiﬁcant diﬀerence in
our ability to ﬁnd successful placements.
Actions and asynchronous wrappers: Another
similar form of delayed execution in WP apps is ac-
tions (System.Action) and its asynchronous cousin
System.AsyncCallback, which are eﬀectively wrap-
pers around delegates registered for later execution.
We deal with actions in a way that is similar to event
handlers.
XAML: A particular diﬃculty for analysis stems
from the use of declarative UIs speciﬁed in XAML,
an XML-like language that combines an easy-to-
read UI speciﬁcation with “hooks” into code. XAML
is compiled into special resources that are em-
bedded into an app’s DLLs. When the method
InitializeComponent() is called on the class speci-
ﬁed in XAML, it proceeds to register events that are
speciﬁed declaratively, as shown in a XAML snippet
below:
1
2
3
4
5
6
7
8
Event handler SettingsClick should be properly reg-
istered so that it can later be invoked.
Alas, some aspects of declarative app speciﬁcation
defy static analysis. A typical example is navigation
between an app’s pages.
1
2
3
4
5
base.NavigationService.
Navigate(new Uri(
"/VenueByGeo.xaml?mc=" + this.strMenuCode +
"&t=" + this.strToken,
UriKind.RelativeOrAbsolute));
Statically, we do not know which page will be nav-
igated to, and, consequently, which OnNavigatedTo
event handler will be called. To avoid polluting the
call graph, we only link up page navigation when
the destination is a string constant. Unfortunately,
this approach is unsound. A more robust technique
would be to integrate a string analysis [8, 19, 33] into
our implementation.
Summary: Reﬂective coding constructs are the
Achilles heel of static analysis. While this is true as
it applies to applications written in .NET and Java,
this is especially so given the declarative program-
ming style often used in WP apps, where code is
“glued together” with declarative speciﬁcation. Sev-
eral approaches to handling reﬂection have been pro-
posed and used in the literature [6, 18, 26, 28, 35].
Alas, all of them require a certain degree of cus-
tomization to the problem and APIs at hand. Addi-
tionally, reﬂection analysis tends to be intertwined
122  22nd USENIX Security Symposium 
USENIX Association
with a heavyweight analysis such as a points-to. We
instead opt for a lightweight analysis that pattern-
matches for the easily-to-resolve case, potentially in-
troducing unsoundness. We evaluate the eﬀects of
this treatment in Section 6.
[SomaAd..ctor() @ 0134) bg
// resource access
[SomaAd..ctor() @ 0120) bg
[SomaAd..ctor() @ 0118) bg
[SomaAd..ctor() @ 0000) bg
[SomaAdViewer.StartAds() @ 00a6) bg
[SomaAdViewer.StartAds() @ 009e) bg
[SomaAdViewer.StartAds() @ 0000) bg
[CollectHome.g_AdFailed(object, ...) @ 00f7) fg
[CollectHome.g_AdFailed(object, ...) @ 0052) fg
[CollectHome.g_AdFailed(object, ...) @ 000a) fg
[CollectHome.g_AdFailed(object, ...) @ 0000) fg
[CollectHome.g_AdFailed(object, ...) @ 0040) fg
[CollectHome.g_AdFailed(object, ...) @ 0030) fg
[CollectHome.g_AdFailed(object, ...) @ 0008) fg
[CollectHome.g_AdFailed(object, ...) @ 004a) fg
[CollectHome.g_AdFailed(object, ...) @ 00df) fg
[CollectHome.g_AdFailed(object, ...) @ 006c) fg
[CollectHome.g_AdFailed(object, ...) @ 0066) fg
Figure 13: A backward exploration tree of depth 20.
Method names and signatures are abbreviated for
brevity. bg and fg stands for background/library vs.
foreground/non-library methods, respectively.
4.2 Fast Backward Placement
Recall from Section 3 that our approach resorts to
a search for both checking if a resource access is
already protected with a prompt and for inserting
prompts if the dominator-based strategy fails.
In
implementing backward search, we need to be con-
cerned with preventing inﬁnite recursion (the occurs-
check from Section 3). There is also the possibility of
exponential path explosion, which is quite real given
that we we are dealing with graphs that typically
have tens of thousands of nodes. It is therefore im-
perative to design an eﬃcient exploration strategy.
Our approach for both checking for prompts and
inserting them relies on ﬁrst building a spanning tree
rooted at the access node, computed using a depth-
ﬁrst search. Figure 13 gives an example of such a
tree. The tree allows us to classify underlying graph
edges as ether forward, backward, or cross edges.
Further analysis is performed on the tree as a se-
ries of downward passes, implemented as recursive
procedures, starting at the resource access and ex-
ploring the predecessors3.
In summary, we perform
three recursive passes over the spanning tree. Each
pass computes a boolean value for each of the vis-
ited nodes to represent the checking or placement
3To avoid stack overﬂow issues stemming from deep trees,
once the tree has been constructed, we make sure that the size
is below a ﬁxed threshold (set to 250 for our experiments).
status; values are maintained across the passes in a
map called υ.
The advantage of this multi-pass approach is its
simplicity and guaranteed runtime complexity. We
start with all spanning tree nodes as unvisited and
then perform three recursive traversals of the tree,
as shown in Figure 14 and described below. In our
implementation, we reuse the same spanning tree for
the prompt checking and placement analysis stages.
This approach is linear in the size of the graph, and
is generally quite fast, even when there are hundreds
of nodes reachable from a resource access.
1. Traverse:
non-library
each
declare
non-
For
background node,
it as a valid
placement point and set υ[n] to true 4. For
other nodes, if all their children have their υ
as true, set υ[n] to true; otherwise, set υ[n] to
false.
2. Patch-up: Traverse the tree considering cross-
edges originating at the current node.
If all
cross-edges emanating from nodes have valid
placements (υ value is true), set υ[n] to true.
3. Collect: Propagate (newly) true values up to