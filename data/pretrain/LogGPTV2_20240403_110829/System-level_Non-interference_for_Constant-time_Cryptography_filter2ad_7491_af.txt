以下是优化后的文本，使其更加清晰、连贯和专业：

---

**参考文献**

1. J. B. Almeida, M. Barbosa, G. Barthe, 和 F. Dupressoir. 《认证计算机辅助密码学：从高层实现到高效且可证明安全的机器代码》. 在CCS 2013会议中发表, 2013.

2. T. Amtoft, J. Dodds, Z. Zhang, A. W. Appel, L. Beringer, J. Hatcliff, X. Ou, 和 A. Cousino. 《条件信息流的机器检查证明证书基础设施》. 在POST 2012会议中发表, LNCS第7215卷, 第369-389页. Springer出版社, 2012.

3. L. O. Andersen. 《C语言的程序分析与特化》. 博士论文, 1994.

4. A. Azevedo de Amorim, N. Collins, A. DeHon, D. Demange, C. Hriţcu, D. Pichardie, B. C. Pierce, R. Pollack, 和 A. Tolmach. 《验证的信息流架构》. 在POPL 2014会议中发表. ACM出版社, 2014.

5. A. Banerjee 和 D. Naumann. 《基于栈的访问控制以确保信息安全流》. 《函数式编程杂志》, 第15卷, 第131-177页, 2005年3月. 特刊: 基于语言的安全性.

6. G. Barthe, G. Betarte, J. Campo, 和 C. Luna. 《在虚拟化理想模型中形式化验证隔离与可用性》. 在FM 2011会议中发表, 第231-245页. Springer-Verlag出版社, 2011.

7. G. Barthe, G. Betarte, J. Campo, 和 C. Luna. 《在虚拟化理想模型中的缓存泄漏抵御操作系统隔离》. 在CSF 2012会议中发表, 第186-197页, 2012.

8. G. Barthe, G. Betarte, J. D. Campo, C. Luna, 和 D. Pichardie. 《系统级非干扰性以支持常量时间加密（完整版）》, 2014.

9. G. Barthe, B. Grégoire, S. Heraud, 和 S. Zanella-Béguelin. 《为工作中的密码学家提供的计算机辅助安全性证明》. 在CRYPTO 2011会议中发表, LNCS第6841卷, 海德堡, 2011.

10. G. Barthe, B. K¨opf, L. Mauborgne, 和 M. Ochoa. 《针对并发缓存攻击的泄漏韧性》. 在POST 2014会议中发表, 2014.

11. G. Barthe, D. Pichardie, 和 T. Rezk. 《一个经过认证的轻量级Java字节码非干扰性验证器》. 在ESOP 2007会议中发表, 第125-140页, 2007.

12. G. Barthe, T. Rezk, 和 D. A. Naumann. 《从Java派生出的信息流检查器和认证编译器》. 在S&P 2006会议中发表, 第230-242页. IEEE计算机协会, 2006.

13. D. J. Bernstein. 《AES的缓存时序攻击》, 2005. 可从作者网页获取.

14. K. Bhargavan, C. Fournet, 和 A. D. Gordon. 《通过类型化进行安全协议代码的模块化验证》. 在POPL 2010会议中发表. ACM出版社, 2010.

15. J. Bonneau 和 I. Mironov. 《针对AES的缓存碰撞时序攻击》. 在CHES 2006会议中发表, 2006.

16. D. Cadé 和 B. Blanchet. 《从计算证明的协议规范到实现》. 在ARES 2012会议中发表, 第65-74页. IEEE计算机协会, 2012.

17. A. Canteaut, C. Lauradoux, 和 A. Seznec. 《理解缓存攻击》. INRIA研究报告RR-5881, 2006.

18. T. Chardin, P.-A. Fouque, 和 D. Leresteux. 《RC4的缓存时序分析》. 在ACNS 2011会议中发表, LNCS第6715卷, 第110-129页, 2011.

19. J. Chen, R. Chugh, 和 N. Swamy. 《端到端安全强制验证的类型保留编译》. 在PLDI 2010会议中发表, 第412-423页. ACM出版社, 2010.

20. B. Coppens, I. Verbauwhede, K. D. Bosschere, 和 B. D. Sutter. 《现代x86处理器上基于时序的侧信道攻击的实际缓解措施》. 在S&P 2009会议中发表, 第45-60页, 2009.

21. M. Dam, R. Guanciale, N. Khakpour, H. Nemati, 和 O. Schwarz. 《简单ARM分离内核的信息流安全形式验证》. 在CCS 2013会议中发表, 第223-234页, 2013.

22. G. Doychev, D. Feld, B. K¨opf, L. Mauborgne, 和 J. Reineke. 《CacheAudit：缓存侧信道的静态分析工具》. 在Usenix Security 2013会议中发表, 2013.

23. F. Dupressoir, A. D. Gordon, J. Jürjens, 和 D. A. Naumann. 《引导通用C验证器以证明密码协议》. 在CSF 2011会议中发表, 第3-17页. IEEE计算机协会, 2011.

24. S. Dziembowski 和 K. Pietrzak. 《泄漏韧性密码学》. 在FOCS会议中发表, 第293-302页. IEEE计算机协会, 2008.

25. U. Erlingsson 和 M. Abadi. 《操作系统对利用内存延迟的侧信道攻击的保护》. 微软研究院技术报告MSR-TR-2007-117, 2007.

26. D. Gullasch, E. Bangerter, 和 S. Krenn. 《缓存游戏——将基于访问的缓存攻击应用于AES实践中》. 在S&P 2011会议中发表, 第490-505页, 2011.

27. E. Käser 和 P. Schwabe. 《更快且抗时序攻击的AES-GCM》. 在C. Clavier 和 K. Gaj 编辑的CHES会议中发表, LNCS第5747卷, 第1-17页. Springer出版社, 2009.

28. J. Kelsey, B. Schneier, D. Wagner, 和 C. Hall. 《分组密码的侧信道密码分析》. 《计算机安全杂志》, 第8卷, 第2-3期, 第141-158页, 2000.

29. G. A. Kildall. 《全局程序优化的统一方法》. 在第一届ACM SIGACT-SIGPLAN编程语言原理研讨会 (POPL '73) 上发表, 第194-206页, 纽约, NY, USA, 1973. ACM出版社.

30. T. Kim, M. Peinado, 和 G. Mainar-Ruiz. 《StealthMem：云计算中针对基于缓存的侧信道攻击的系统级保护》. 在USENIX Security 2012会议中发表, 第11-11页, 加利福尼亚州伯克利, 2012. USENIX协会.

31. G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell, H. Tuch, 和 S. Winwood. 《seL4：操作系统的正式验证内核》. 在SOSP 2009会议中发表, 第207-220页. ACM出版社, 2009.

32. P. Kocher. 《Diffie-Hellman, RSA, DSS及其他系统的时序攻击》. 在CRYPTO'96会议中发表, LNCS第1109卷, 第104-113页. Springer出版社, 1996.

33. G. Leander, E. Zenner, 和 P. Hawkes. 《基于LFSR的流密码的缓存时序分析》. 在IMACC 2009会议中发表, LNCS第5921卷, 第433-445页. Springer出版社, 2009.

34. X. Leroy. 《形式化的编译器后端认证，或：用证明助手编写编译器》. 在POPL 2006会议中发表, 第42-54页. ACM出版社, 2006.

35. C. Liu, M. Hicks, 和 E. Shi. 《内存跟踪隐蔽程序执行》. 在CSF 2013会议中发表, 第51-65页, 2013.

36. D. Molnar, M. Piotrowski, D. Schultz, 和 D. Wagner. 《程序计数器安全模型：自动检测和移除控制流侧信道攻击》. 在ICISC 2005会议中发表, 第156-168页, 2005.

37. T. Murray, D. Matichuk, M. Brassil, P. Gammie, T. Bourke, S. Seefried, C. Lewis, X. G., 和 G. Klein. 《seL4：从通用目的到信息流强制的形式化证明》. 在S&P 2013会议中发表, 第415-429页, 2013.

38. T. Ristenpart, E. Tromer, H. Shacham, 和 S. Savage. 《嘿，你，离开我的云！探索第三方计算云中的信息泄漏》. 在CCS 2009会议中发表, 第199-212页. ACM出版社, 2009.

39. V. Robert 和 X. Leroy. 《形式验证的别名分析》. 在CPP会议中发表, 第11-26页, 2012.

40. J. M. Rushby. 《非干扰性、传递性和通道控制安全策略》. 技术报告CSL-92-02, SRI国际, 1992.

41. T. Sewell, S. Winwood, P. Gammie, T. Murray, J. Andronick, 和 G. Klein. 《seL4保证完整性》. 在ITP 2011会议中发表, 荷兰奈梅亨, 2011.

42. Z. Shao. 《认证软件》. 《ACM通讯》, 第53卷, 第12期, 第56-66页, 2010.

43. D. Stefan, P. Buiras, E. Z. Yang, A. Levy, D. Terei, A. Russo, 和 D. Mazières. 《通过指令调度消除基于缓存的时序攻击》. 在J. Crampton, S. Jajodia, 和 K. Mayes编辑的ESORICS会议中发表, LNCS第8134卷, 第718-735页. Springer出版社, 2013.

44. E. Tromer, D. A. Osvik, 和 A. Shamir. 《针对AES的有效缓存攻击及其对策》. 《密码学杂志》, 第23卷, 第1期, 第37-71页, 2010.

45. Y. Tsunoo, T. Saito, T. Suzaki, M. Shigeri, 和 H. Miyauchi. 《带缓存的计算机上DES的密码分析》. 在CHES 2003会议中发表, LNCS第2779卷, 第62-76页. Springer出版社, 2003.

46. Z. Wang 和 R. B. Lee. 《新的缓存设计以抵御基于软件缓存的侧信道攻击》. 在ISCA 2007会议中发表, 第494-505页. ACM出版社, 2007.

47. D. Zhang, A. Askarov, 和 A. C. Myers. 《交互系统中时序通道的预测性缓解》. 在CCS 2011会议中发表, 第563-574页. ACM出版社, 2011.

---

**动作与效果**

| 动作 | 非正式描述 | 效果 |
| --- | --- | --- |
| `read va` | 客户机操作系统读取虚拟地址 `va` | 如果 `va` 是隐秘的，则为空；否则为 `read va` |
| `write va val` | 客户机操作系统在 `va` 写入值 `val` | 如果 `va` 是隐秘的，则为空；否则为 `write va` |
| `new va pa` | Hypervisor 将活动OS的非隐秘内存扩展为 `va` 映射到 `ma` | `new va pa` |
| `new_sm stealth va pa` | Hypervisor 将活动OS的隐秘内存扩展为 `stealth va` 映射到 `ma` | 空 |
| `switch o` | Hypervisor 设置 `o` 为活动OS | `switch o` |
| `lswitch pa` | Hypervisor 更改活动OS的当前内存映射为 `pa` | `lswitch pa` |
| `hcall c` | 操作系统要求Hypervisor执行特权服务 `c` | `hcall c` |
| `chmod` | Hypervisor 将执行控制权交给活动OS | `chmod` |
| `page_pin pa t` | 对应于 `pa` 的内存页注册并分类为类型 `t` | `page_pin pa t` |
| `page_unpin pa` | 活动OS对应于 `pa` 的内存页取消注册 | `page_unpin pa` |

**写入动作的语义**

- **前提条件**：
  - 活动OS `aos` 正在运行。
  - 虚拟地址 `va` 映射到机器地址 `ma` 和可读/可写页面 `pg`。

- **后置条件**：
  - 存在两种写入规则，一种是当写入页面添加到缓存时会逐出一个条目，另一种则不会逐出。
  - 在这两种情况下，结果状态的不同之处在于缓存 `cache` 中与 `(va, ma)` 对应的页面值 `val`，以及TLB `tlb`。
  - 如果 `cache add` 返回被逐出的条目 `(ma′, pg′)`，则更新 `ma′` 处的内存为 `pg′`。
  - 最终存储在 `ma` 中的页面值取决于使用的写入策略（`mem[ma := page]pol` 在写透模式下更新 `ma` 处的页面，在回写模式下保持不变）。

**新增隐秘内存动作的语义**

- **前提条件**：
  - 活动OS `aos` 正在等待Hypervisor将其当前页表 `cpt` 扩展为包含 `stealth va`。
  - 物理地址 `pa` 映射到Hypervisor映射中的机器地址 `ma` 和页面 `pg`。
  - 页面 `pg` 必须是可读/可写的，并且可以缓存。
  - 没有页表可以将虚拟地址映射到 `ma`（无内存别名），并且 `stealth va` 不在 `cpt` 中映射。
  - 这是为了确保隐秘页面 `pg` 在 `ma` 中始终被缓存，并且没有别名页面被缓存。

- **后置条件**：
  - 结果状态中，`aos` 的待处理超调用被移除。
  - 当前页表 `cpt` 和TLB `tlb` 更新为 `stealth va` 到 `ma` 的映射。
  - 新增的隐秘页面立即存储在缓存中。

---

希望这些优化能使文本更加清晰、连贯和专业。如果有进一步的需求，请告诉我。