l7 2
l7 3
l7 4
l7 5
l7 6
l7 7
No. of states
6533
8335
4864
9754
12910
1888
2293
3321
2984
4887
4028
δFA
0.061814
0.036712
0.060937
0.029956
0.902273
0.867276
0.123533
0.960778
0.697423
0.415298
0.666279
D2FA
0.219731
0.133694
0.1534
0.145408
0.135659
0.100613
0.128518
0.107428
0.146669
0.067751
0.059606
CRD
0.035062
0.10002
0.043718
0.059237
0.201427
0.40284
0.357692
0.120214
0.084092
0.129464
0.047537
ClusterFA
0.021864
0.017421
0.018849
0.014931
0.087454
0.231418
0.017725
0.120114
0.05145
0.084237
0.091851
Table 7: compression ratio for encoding ClusterFA
rule sets
bro217
snort24
snort31
snort34
l7 top7
l7 2
l7 3
l7 4
l7 5
l7 6
l7 7
number
of states
ClusterFA
6533
8335
4864
9754
12910
1888
2293
3321
2984
4887
4028
0.021864
0.017421
0.018849
0.014931
0.087454
0.231418
0.017725
0.120114
0.05145
0.084237
0.091851
encoding
ClusterFA
0.013923
0.008517
0.011279
0.007499
0.010894
0.088518
0.008627
0.014115
0.008176
0.035059
0.009883
of states is 3321, but K is as big as 320. As a result, the com-
pression ratio is impossible to be lower than 320/3321=9.6%.
To solve this problem, we can encode the common states to
further reduce the memory consumption. This scheme is not
suitable for the software implementation because the decod-
ing process will take up a lot of time, leading to the decrease
of throughput. However, based on the support of hardware,
the decoding process can be very fast [6].
There are several ways to encode a common state, such as
run length encoding, bitmap, content-addressing, and so on.
In our work, we only consider run length encoding. Follow-
ing is an example of run length encoding: assume a common
state is aaaaabbbccccdddddd, then, after the run length en-
coding, the common state becomes a{5}b{3}c{4}d{6}, which
means a repeating 5 times, the b repeating 3 times, and so
on. We employ run length encoding technique to ClusterFA,
and the compression ratio is presented in Table 7. We can
see that, the encoding scheme signiﬁcantly improve the com-
pression ratio. Except L7-2 rule set, we can reduce about
99% of memory usage.
6. CONCLUSION
In this paper, we present a new DFA structure - Clus-
terFA, which considerably reduces the transition edges and
memory consumption by more than 95%. Observing the D-
FA’s transition table, almost every state has one or more
similar states, with only little (< 1%) diﬀerent transitions.
To take full advantage of these similarities, we cluster the
similar states together together using clustering algorithms
In this way, we eﬃciently
and calculate a common state.
improve the compression ratio. We consider three diﬀerent
unsupervised clustering algorithms in our work: K-means,
CLINK and pspectralclustering. We run experiments on
real-life rule sets from Bro, Snort and L7-ﬁlter. Experiments
results show our algorithm reduces the memory consumption
by more than 2 times compared with previous DFA com-
pressing algorithms while preserving fast matching speed.
Furthermore, by introducing encoding technique, we further
improve the memory compression ratio to more than 99%,
which is better than any known algorithms.
7. ACKNOWLEDGMENTS
This work is supported by National High Technology Re-
search and Development Program of China (863 Program,
no. 2011AA010705) and National Natural Science Founda-
tion of China (61070026).
8. REFERENCES
[1] A. Aho and M. Corasick. Eﬃcient string matching: an
aid to bibliographic search. Communications of the
ACM, 18(6):333–340, 1975.
[2] R. Baeza-Yates and G. Gonnet. Fast text searching for
regular expressions or automaton searching on tries.
Journal of the ACM (JACM), 43(6):915–936, 1996.
[3] M. Becchi. regex tool. http://regex.wustl.edu.
[4] M. Becchi and P. Crowley. A hybrid ﬁnite automaton
for practical deep packet inspection. In Proceedings of
the 2007 ACM CoNEXT conference, page 1. ACM,
2007.
[5] M. Becchi and P. Crowley. An improved algorithm to
accelerate regular expression evaluation. In
Proceedings of the 3rd ACM/IEEE Symposium on
Architecture for networking and communications
systems, pages 145–154. ACM, 2007.
[6] B. Brodie, D. Taylor, and R. Cytron. A scalable
architecture for high-throughput regular-expression
pattern matching. In ACM SIGARCH Computer
Architecture News, volume 34, pages 191–202. IEEE
Computer Society, 2006.
[7] W.-Y. Chen, Y. Song, H. Bai, C.-J. Lin, and E. Y.
Chang. Parallel spectral clustering in distributed
systems. IEEE Transactions on Pattern Analysis and
Machine Intelligence, 33(3):568–586, 2011.
[8] C. Clark and D. Schimmel. Eﬃcient reconﬁgurable
logic circuits for matching complex network intrusion
detection patterns. Field Programmable Logic and
Application, pages 956–959, 2003.
and Applications, 2004. PG 2004. Proceedings. 12th
Paciﬁc Conference on, pages 298–305. IEEE, 2004.
[9] C. Clark and D. Schimmel. Scalable pattern matching
[25] T. Liu, Y. Yang, Y. Liu, Y. Sun, and L. Guo. An
for high speed networks. In Field-Programmable
Custom Computing Machines, 2004. FCCM 2004.
12th Annual IEEE Symposium on, pages 249–257.
Ieee, 2004.
[10] D. Defays. An eﬃcient algorithm for a complete link
method. The Computer Journal, 20(4):364, 1977.
[11] M. Ester, H. Kriegel, J. Sander, and X. Xu. A
density-based algorithm for discovering clusters in
large spatial databases with noise. In Proceedings of
the 2nd International Conference on Knowledge
Discovery and Data mining, volume 1996, pages
226–231. AAAI Press, 1996.
eﬃcient regular expressions compression algorithm
from a new perspective. In INFOCOM, 2011
Proceedings IEEE, pages 2129–2137. IEEE, 2011.
[26] Y. Liu, L. Guo, P. Liu, and J. Tan. Compressing
regular expressions (cid:44)a´r dfa table by matrix
decomposition. Implementation and Application of
Automata, pages 282–289, 2011.
[27] J. MacQueen et al. Some methods for classiﬁcation
and analysis of multivariate observations. In
Proceedings of the ﬁfth Berkeley symposium on
mathematical statistics and probability, volume 1,
page 14. California, USA, 1967.
[12] M. Faezipour and M. Nourani. Constraint repetition
[28] U. Manber and S. Wu. A fast algorithm for
inspection for regular expression on fpga. In High
Performance Interconnects, 2008. HOTI’08. 16th
IEEE Symposium on, pages 111–118. IEEE, 2008.
[13] D. Ficara, A. Di Pietro, S. Giordano, G. Procissi,
F. Vitucci, and G. Antichi. Diﬀerential encoding of
dfas for fast regular expression matching. IEEE/ACM
Transactions on Networking (TON), 19(3):683–694,
2011.
[14] D. Ficara, S. Giordano, G. Procissi, F. Vitucci,
G. Antichi, and A. Di Pietro. An improved dfa for fast
regular expression matching. ACM SIGCOMM
Computer Communication Review, 38(5):29–40, 2008.
[15] R. Floyd and J. Ullman. The compilation of regular
expressions into integrated circuits. Journal of the
ACM (JACM), 29(3):603–622, 1982.
[16] C. Fowlkes, S. Belongie, F. Chung, and J. Malik.
Spectral grouping using the nystrom method. Pattern
Analysis and Machine Intelligence, IEEE Transactions
on, 26(2):214–225, 2004.
[17] R. Hamming. Error detecting and error correcting
codes. Bell System Technical Journal, 29(2):147–160,
1950.
[18] J. Hopcroft, R. Motwani, and J. Ullman. Introduction
to automata theory, languages, and computation,
volume 2. Addison-wesley Reading, MA, 1979.
[19] M. Inaba, N. Katoh, and H. Imai. Applications of
weighted voronoi diagrams and randomization to
variance-based k-clustering. In Proceedings of the tenth
annual symposium on Computational geometry, pages
332–339. ACM, 1994.
[20] A. Jain and R. Dubes. Algorithms for clustering data.
Prentice-Hall, Inc., 1988.
[21] S. Kumar, S. Dharmapurikar, F. Yu, P. Crowley, and
J. Turner. Algorithms to accelerate multiple regular
expressions matching for deep packet inspection. ACM
SIGCOMM Computer Communication Review,
36(4):339–350, 2006.
[22] J. Levandoski, E. Sommer, M. Strait, et al.
Application layer packet classiﬁer for linux, 2008.
[23] W. Lin, Y. Tang, B. Liu, D. Pao, and X. Wang.
Compact dfa structure for multiple regular expressions
matching. In Communications, 2009. ICC’09. IEEE
International Conference on, pages 1–5. IEEE, 2009.
[24] R. Liu and H. Zhang. Segmentation of 3d meshes
through spectral clustering. In Computer Graphics
multi-pattern searching. Technical report, Tech.
Report TR-94-17, CS Dept., University of Arizona,
1994.
[29] G. Myers. A four russians algorithm for regular
expression pattern matching. Journal of the ACM
(JACM), 39(2):432–448, 1992.
[30] H. Nakahara, T. Sasao, and M. Matsuura. A regular
expression matching using non-deterministic ﬁnite
automaton. In Formal Methods and Models for
Codesign (MEMOCODE), 2010 8th IEEE/ACM
International Conference on, pages 73–76. IEEE, 2010.
[31] V. Paxson. Bro: A system for detecting network
intruders in real-time. Computer networks,
31(23-24):2435–2463, 1999.
[32] M. Roesch et al. Snort-lightweight intrusion detection
for networks. In Proceedings of the 13th USENIX
conference on System administration, pages 229–238.
Seattle, Washington, 1999.
[33] R. Sidhu and V. Prasanna. Fast regular expression
matching using fpgas. In Field-Programmable Custom
Computing Machines, 2001. FCCM’01. The 9th
Annual IEEE Symposium on, pages 227–238. IEEE,
2001.
[34] R. Smith, C. Estan, S. Jha, and S. Kong. Deﬂating
the big bang: fast and scalable deep packet inspection
with extended ﬁnite automata. In ACM SIGCOMM
Computer Communication Review, volume 38, pages
207–218. ACM, 2008.
[35] K. Thompson. Programming techniques: Regular
expression search algorithm. Communications of the
ACM, 11(6):419–422, 1968.
[36] Y. Yang and V. Prasanna. High-performance and
compact architecture for regular expression matching
on fpga. Computers, IEEE Transactions on, (99):1–1,
2011.
[37] F. Yu, Z. Chen, Y. Diao, T. Lakshman, and R. Katz.
Fast and memory-eﬃcient regular expression matching
for deep packet inspection. In Architecture for
Networking and Communications systems, 2006.
ANCS 2006. ACM/IEEE Symposium on, pages
93–102. IEEE, 2006.