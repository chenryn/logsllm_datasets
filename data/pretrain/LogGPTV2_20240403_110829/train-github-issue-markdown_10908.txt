I am trying to solve a simple example with the `dopri5` integrator in
`scipy.integrate.ode`. As the documentation states
> This is an explicit runge-kutta method of order (4)5 due to Dormand & Prince
> (with stepsize control and dense output).
this should work. So here is my example:
    import numpy as np
    from scipy.integrate import ode
    import matplotlib.pyplot as plt
    def MassSpring_with_force(t, state, f):
        """ Simple 1DOF dynamics model: m ddx(t) + k x(t) = f(t)"""
        # unpack the state vector
        x = state[0]
        xd = state[1]
        # these are our constants
        k = 2.5 # Newtons per metre
        m = 1.5 # Kilograms
        # compute acceleration xdd
        xdd = ( ( -k*x + f) / m )
        # return the two state derivatives
        return [xd, xdd]
    def force(t):
        """ Excitation force """
        f0 = 1  # force amplitude [N]
        freq = 20  # frequency[Hz]
        omega = 2 * np.pi *freq  # angular frequency [rad/s]
        return f0 * np.sin(omega*t)
    # Time range
    t_start = 0
    t_final = 1
    # Main program
    state_ode_f = ode(MassSpring_with_force)
    state_ode_f.set_integrator('dopri5', rtol=1e-4, nsteps=500, 
                               first_step=1e-6, max_step=1e-1, verbosity=True)
    state2 = [0.0, 0.0]  # initial conditions
    state_ode_f.set_initial_value(state2, 0)
    state_ode_f.set_f_params(force(0))
    sol = np.array([[t_start, state2[0], state2[1]]], dtype=float)
    print("Time\t\t Timestep\t dx\t\t ddx\t\t state_ode_f.successful()")
    while state_ode_f.successful() and state_ode_f.t < (t_final):
        state_ode_f.set_f_params(force(state_ode_f.t))
        state_ode_f.integrate(t_final, step=True)
        sol = np.append(sol, [[state_ode_f.t, state_ode_f.y[0], state_ode_f.y[1]]], axis=0)
        print("{0:0.8f}\t {1:0.4e} \t{2:10.3e}\t {3:0.3e}\t {4}".format(
                state_ode_f.t, sol[-1, 0]- sol[-2, 0], state_ode_f.y[0], state_ode_f.y[1], state_ode_f.successful()))
The result I get is:
    Time         Timestep        dx          ddx         state_ode_f.successful()
    1.00000000   1.0000e+00      0.000e+00   0.000e+00   True
Hence, only one time-step is computed which is obviously incorrect.
This works with `vode` and `zvode` integrators