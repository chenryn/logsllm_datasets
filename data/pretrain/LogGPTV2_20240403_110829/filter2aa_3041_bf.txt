func (devNull) Write(p []byte) (int, error) { 
 return len(p), nil 
} 
代码清单 8-16 展示了 Discard 变量的声明以及相关的实现。Discard 变量的类型被声明
为 io.Writer 接口类型，并被给定了一个 devNull 类型的值 0。基于 devNull 类型实现的
Write 方法，会忽略所有写入这一变量的数据。当某个等级的日志不重要时，使用 Discard 变
量可以禁用这个等级的日志。 
日志记录器 Info 和 Warning 都使用 stdout 作为日志输出，如代码清单 8-17 所示。
代码清单 8-17  listing11.go：第 29 行到第 35 行 
29 
 Info = log.New(os.Stdout, 
30 
 "INFO: ", 
31 
 log.Ldate|log.Ltime|log.Lshortfile) 
32 
33 
 Warning = log.New(os.Stdout, 
34 
 "WARNING: ", 
35 
 log.Ldate|log.Ltime|log.Lshortfile) 
变量 Stdout 的声明也有一些有意思的地方，如代码清单 8-18 所示。
代码清单 8-18  golang.org/src/os/file.go 
// Stdin、Stdout 和 Stderr 是已经打开的文件，分别指向标准输入、标准输出和 
// 标准错误的文件描述符 
var ( 
 Stdin  = NewFile(uintptr(syscall.Stdin), "/dev/stdin") 
 Stdout = NewFile(uintptr(syscall.Stdout), "/dev/stdout") 
 Stderr = NewFile(uintptr(syscall.Stderr), "/dev/stderr") 
) 
os/file_unix.go 
// NewFile 用给出的文件描述符和名字返回一个新 File 
func NewFile(fd uintptr, name string) *File { 
在代码清单 8-18 中可以看到 3 个变量的声明，分别表示所有操作系统里都有的 3 个标准输
入/输出，即 Stdin、Stdout 和 Stderr。这 3 个变量都被声明为 File 类型的指针，这个类型
实现了 io.Writer 接口。有了这个知识，我们来看一下最后的日志记录器 Error，如代码清单
8-19 所示。 
代码清单 8-19  listing11.go：第 37 行到第 39 行 
37 
 Error = log.New(io.MultiWriter(file, os.Stderr), 
38 
 "ERROR: ", 
39 
 log.Ldate|log.Ltime|log.Lshortfile) 
在代码清单 8-19 中可以看到 New 函数的第一个参数来自一个特殊的函数。这个特殊的函数
就是 io 包里的 MultiWriter 函数，如代码清单 8-20 所示。
代码清单 8-20  包 io 里的 MultiWriter 函数的声明
io.MultiWriter(file, os.Stderr) 
代码清单 8-20 单独展示了 MultiWriter 函数的调用。这个函数调用会返回一个 io.Writer
接口类型值，这个值包含之前打开的文件 file，以及 stderr。MultiWriter 函数是一个变参函
数，可以接受任意个实现了 io.Writer 接口的值。这个函数会返回一个 io.Writer 值，这个值会
把所有传入的 io.Writer 的值绑在一起。当对这个返回值进行写入时，会向所有绑在一起的
io.Writer 值做写入。这让类似 log.New 这样的函数可以同时向多个 Writer 做输出。现在，当
我们使用 Error 记录器记录日志时，输出会同时写到文件和 stderr。
现在知道了该如何创建定制的记录器了，让我们看一下如何使用这些记录器来写日志消息，
如代码清单 8-21 所示。 
代码清单 8-21  listing11.go：第 42 行到第 47 行 
42 func main() { 
43 
 Trace.Println("I have something standard to say") 
44 
 Info.Println("Special Information") 
45 
 Warning.Println("There is something you need to know about") 
46 
 Error.Println("Something has failed") 
47 } 
代码清单 8-21 展示了代码清单 8-11 中的 main()函数。在第 43 行到第 46 行，我们用自己
创建的每个记录器写一条消息。每个记录器变量都包含一组方法，这组方法与 log 包里实现的
那组函数完全一致，如代码清单 8-22 所示。 
代码清单 8-22 展示了为 Logger 类型实现的所有方法。
代码清单 8-22  不同的日志方法的声明 
func (l *Logger) Fatal(v ...interface{}) 
func (l *Logger) Fatalf(format string, v ...interface{}) 
func (l *Logger) Fatalln(v ...interface{}) 
func (l *Logger) Flags() int 
func (l *Logger) Output(calldepth int, s string) error 
func (l *Logger) Panic(v ...interface{}) 
func (l *Logger) Panicf(format string, v ...interface{}) 
func (l *Logger) Panicln(v ...interface{}) 
func (l *Logger) Prefix() string 
func (l *Logger) Print(v ...interface{}) 
func (l *Logger) Printf(format string, v ...interface{}) 
func (l *Logger) Println(v ...interface{}) 
func (l *Logger) SetFlags(flag int) 
func (l *Logger) SetPrefix(prefix string) 
8.2.3  结论 
log 包的实现，是基于对记录日志这个需求长时间的实践和积累而形成的。将输出写到
stdout，将日志记录到 stderr，是很多基于命令行界面（CLI）的程序的惯常使用的方法。不
过如果你的程序只输出日志，那么使用 stdout、stderr 和文件来记录日志是很好的做法。
标准库的 log 包包含了记录日志需要的所有功能，推荐使用这个包。我们可以完全信任这
个包的实现，不仅仅是因为它是标准库的一部分，而且社区也广泛使用它。 
8.3  编码/解码 
许多程序都需要处理或者发布数据，不管这个程序是要使用数据库，进行网络调用，还是与
分布式系统打交道。如果程序需要处理 XML 或者 JSON，可以使用标准库里名为 xml 和 json
的包，它们可以处理这些格式的数据。如果想实现自己的数据格式的编解码，可以将这些包的实
现作为指导。 
在今天，JSON 远比 XML 流行。这主要是因为与 XML 相比，使用 JSON 需要处理的标签更
少。而这就意味着网络传输时每个消息的数据更少，从而提升整个系统的性能。而且，JSON 可
以转换为 BSON（Binary JavaScript Object Notation，二进制 JavaScript 对象标记），进一步缩小每
个消息的数据长度。因此，我们会学习如何在 Go 应用程序里处理并发布 JSON。处理 XML 的方
法也很类似。 
8.3.1  解码 JSON 
我们要学习的处理 JSON 的第一个方面是，使用 json 包的 NewDecoder 函数以及 Decode
方法进行解码。如果要处理来自网络响应或者文件的 JSON，那么一定会用到这个函数及方法。
让我们来看一个处理 Get 请求响应的 JSON 的例子，这个例子使用 http 包获取 Google 搜索 API
返回的 JSON。代码清单 8-23 展示了这个响应的内容。 
代码清单 8-23  Google 搜索 API 的 JSON 响应例子 
{ 
 "responseData": { 
 "results": [ 
 { 
 "GsearchResultClass": "GwebSearch", 
 "unescapedUrl": "https://www.reddit.com/r/golang", 
 "url": "https://www.reddit.com/r/golang", 
 "visibleUrl": "www.reddit.com", 
 "cacheUrl": "http://www.google.com/search?q=cache:W...", 
 "title": "r/\u003cb\u003eGolang\u003c/b\u003e - Reddit", 
 "titleNoFormatting": "r/Golang - Reddit", 
 "content": "First Open Source \u003cb\u003eGolang\u..." 
 }, 
 { 
 "GsearchResultClass": "GwebSearch", 
 "unescapedUrl": "http://tour.golang.org/", 
 "url": "http://tour.golang.org/", 
 "visibleUrl": "tour.golang.org", 
 "cacheUrl": "http://www.google.com/search?q=cache:O...", 
 "title": "A Tour of Go", 
 "titleNoFormatting": "A Tour of Go", 
 "content": "Welcome to a tour of the Go programming ..." 
 } 
 ] 
 } 
} 
代码清单 8-24 给出的是如何获取响应并将其解码到一个结构类型里的例子。 
代码清单 8-24  listing24.go 
01 // 这个示例程序展示如何使用 json 包和 NewDecoder 函数 
02 // 来解码 JSON 响应 
03 package main 
04 
05 import ( 
06 
 "encoding/json" 
07 
 "fmt" 
08 
 "log" 
09 
 "net/http" 
10 ) 
11 
12 type ( 
13 
 // gResult 映射到从搜索拿到的结果文档 
14 
 gResult struct { 
15 
 GsearchResultClass string `json:"GsearchResultClass"` 
16 
 UnescapedURL 
 string `json:"unescapedUrl"` 
17 
 URL    
 string `json:"url"` 
18 
 VisibleURL   
 string `json:"visibleUrl"` 
19 
 CacheURL    
 string `json:"cacheUrl"` 
20 
 Title    
 string `json:"title"` 
21 
 TitleNoFormatting  string `json:"titleNoFormatting"` 
22 
 Content 
 string `json:"content"` 
23 
 } 
24 
25 
 // gResponse 包含顶级的文档 
26 
 gResponse struct { 
27 
 ResponseData struct { 
28 
    Results []gResult `json:"results"` 
29 
 } `json:"responseData"` 
30 
 } 
31 ) 
32 
33 func main() { 
34 
 uri := "http://ajax.googleapis.com/ajax/services/search/web?v=1.0&rsz=8&q=golang" 
35 
36 
 // 向 Google 发起搜索 
37 
 resp, err := http.Get(uri) 
38 
 if err != nil { 
39 
 log.Println("ERROR:", err) 
40 
 return 
41 
 } 
42 
 defer resp.Body.Close() 
43 
44 
 // 将 JSON 响应解码到结构类型 
45 
 var gr gResponse 
46 
 err = json.NewDecoder(resp.Body).Decode(&gr) 
47 
 if err != nil { 
48 
 log.Println("ERROR:", err) 
49 
 return 
50 
 } 
51 
52 
 fmt.Println(gr) 
53 } 
代码清单 8-24 中代码的第 37 行，展示了程序做了一个 HTTP Get 调用，希望从 Google 得
到一个 JSON 文档。之后，在第 46 行使用 NewDecoder 函数和 Decode 方法 ，将响应返回的 JSON
文档解码到第 26 行声明的一个结构类型的变量里。在第 52 行，将这个变量的值写到 stdout。 
如果仔细看第 26 行和第 14 行的 gResponse 和 gResult 的类型声明，你会注意到每个字
段最后使用单引号声明了一个字符串。这些字符串被称作标签（tag），是提供每个字段的元信息
的一种机制，将 JSON 文档和结构类型里的字段一一映射起来。如果不存在标签，编码和解码过
程会试图以大小写无关的方式，直接使用字段的名字进行匹配。如果无法匹配，对应的结构类型
里的字段就包含其零值。 
执行 HTTP Get 调用和解码 JSON 到结构类型的具体技术细节都由标准库包办了。让我们看
一下标准库里 NewDecoder 函数和 Decode 方法的声明，如代码清单 8-25 所示。
代码清单 8-25  golang.org/src/encoding/json/stream.go 
// NewDecoder 返回从 r 读取的解码器 
// 
// 解码器自己会进行缓冲，而且可能会从 r 读比解码 JSON 值 
// 所需的更多的数据 
func NewDecoder(r io.Reader) *Decoder 
// Decode 从自己的输入里读取下一个编码好的 JSON 值，  
// 并存入 v 所指向的值里 
// 
// 要知道从 JSON 转换为 Go 的值的细节，  
// 请查看 Unmarshal 的文档 
func (dec *Decoder) Decode(v interface{}) error 
在代码清单 8-25 中可以看到 NewDecoder 函数接受一个实现了 io.Reader 接口类型的值
作为参数。在下一节，我们会更详细地介绍 io.Reader 和 io.Writer 接口，现在只需要知道
标准库里的许多不同类型，包括 http 包里的一些类型，都实现了这些接口就行。只要类型实现
了这些接口，就可以自动获得许多功能的支持。 
函数 NewDecoder 返回一个指向 Decoder 类型的指针值。由于 Go 语言支持复合语句调用，
可以直接调用从 NewDecoder 函数返回的值的 Decode 方法，而不用把这个返回值存入变量。
在代码清单 8-25 里，可以看到 Decode 方法接受一个 interface{}类型的值做参数，并返回
一个 error 值。
在第 5 章中曾讨论过，任何类型都实现了一个空接口 interface{}。这意味着 Decode 方
法可以接受任意类型的值。使用反射，Decode 方法会拿到传入值的类型信息。然后，在读取 JSON
响应的过程中，Decode 方法会将对应的响应解码为这个类型的值。这意味着用户不需要创建对
应的值，Decode 会为用户做这件事情，如代码清单 8-26 所示。
在代码清单 8-26 中，我们 向 Decode 方法传入了指向 gResponse 类型的指针变量的地址，
而这个地址的实际值为 nil。该方法调用后，这个指针变量会被赋给一个 gResponse 类型的值，
并根据解码后的 JSON 文档做初始化。 
代码清单 8-26  使用 Decode 方法
var gr *gResponse 
err = json.NewDecoder(resp.Body).Decode(&gr) 
有时，需要处理的 JSON 文档会以 string 的形式存在。在这种情况下，需要将 string 转换
为 byte 切片（[]byte），并使用 json 包的 Unmarshal 函数进行反序列化的处理，如代码清单
8-27 所示。 
代码清单 8-27  listing27.go 
01 // 这个示例程序展示如何解码 JSON 字符串 
02 package main 
03 
04 import ( 
05 
 "encoding/json" 
06 