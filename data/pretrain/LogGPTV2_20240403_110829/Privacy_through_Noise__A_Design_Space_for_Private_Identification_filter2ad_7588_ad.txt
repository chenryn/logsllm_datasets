### Figure 5: Design Space for Simple Randomization (p1 = 1)
- **System Configuration**: One billion users, two-level tree.
- **Simulation Details**: Values are averaged over 100,000 simulations.

**Selective randomization** provides a more extensive design space, offering many more useful points compared to simple randomization. We calculated the entropy preserved by selective randomization and simulated the expected cost for various choices of p1 and p2. The trade-off between additional cost and reduced information leakage is depicted in Figure 6.

**Key Design Points**:
- **p1 = 0.8, p2 = 0.25**: Information leakage is 98% lower than the deterministic tree, with a 22x increase in cost.
- **p1 = 0.8, p2 = 0.35**: Information leakage is reduced to 4% of its original value, with a 304x increase in cost.

### Figure 6: Design Space for Selective Randomization
- **Each Cross**: Represents a specific choice of p1 and p2.
- **Lower Line**: Corresponds to p1 = 0.8 and various values of p2.
- **Upper Line**: Represents simple randomization (p1 = 1).
- **System Configuration**: One billion users, two-level tree.
- **Simulation Details**: Values are averaged over 100,000 simulations.

### B. Closed-Form Analysis
To determine the overall cost of identification, we calculate the number of leaf groups that need to be evaluated until the correct group is found. Note that we do not consider the small cost of evaluating hash functions such as HB protocols [10], which can potentially build a very low-cost one-way function.

**Public Key Cryptography**:
- Public key cryptography, such as Elliptic Curve Cryptography or RSA, is much more expensive in hardware compared to symmetric-key alternatives.
- FPGA implementations of RSA are six to seven orders of magnitude less efficient per area and time than symmetric-key alternatives [20].
- Only a single RSA operation is required for each identification.

**Low-Cost Public Key Cipher for RFID**:
- A novel low-cost public key cipher based on the Rabin scheme [17] can be implemented on RFID tags much smaller than RSA.
- The server cost is comparable to RSA, but the implementation size on an RFID tag is still larger than that of a one-way function.
- The scheme requires a one-way function and a random number generator as building blocks, enabling elegant public key management but at higher implementation and server costs.

### V. Related Work
**Scalable Cryptography**:
- The challenge of scalable cryptography has been addressed in contexts such as preventing piracy in multicast networks like Pay-TV.
- Multicast security has a different threat model but is conceptually similar to our problem. Poovendran and Baras [18] derived an optimal setup using an entropy-based metric similar to ours.

**Randomizing User Responses**:
- Previously used in RFID systems by the HB family of protocols [8], which were developed by Hopper and Blum for human authentication without computer assistance.
- These protocols use basic mathematical operations to create a hash function and achieve one-wayness by randomly flipping some response bits.
- Security relies on the hardness of the learning parity with noise (LPN) problem, which has not been conclusively shown to be hard.
- Improved variants of the HB protocols have been proposed to defeat these attacks [13][5].

**HB Hash Functions**:
- Require very basic arithmetic operations, resulting in virtually zero implementation overhead on an RFID tag.
- However, they require a significant number of rounds for each hashing operation, leading to high communication overhead.
- This overhead may be acceptable for applications like building access control but not for item-level product tags.
- Using an HB hash function in our protocol results in a very low-cost identification protocol for RFIDs.

### VI. Conclusions
The proliferation of tiny devices with unique identities and limited computing capabilities necessitates cheap private identification protocols. Our protocol, which randomizes user responses, provides an effective design trade-off, reducing information leakage in exchange for a reasonable increase in server workload. Levels of information leakage close to zero can be achieved at modest server cost (e.g., 99.8% privacy increase at 150x cost increase), while remaining much below the cost of alternatives such as public-key protocols.

### References
[References are listed as provided, with no changes made.]

### Appendix: Proof of Tag Entropy Theory
**Theorem**:
The average entropy of tags in the randomized tree protocol as seen by an attacker is:
\[ E = \log(N) - \log(k) + \log(k + r - 1) - \frac{r}{k + r - 1} \log(r) \]

**Proof**:
- **Information Leakage**: Defined as the average amount of lost entropy in the distribution of probabilities with which different users could have generated a given response.
- **Linear Hash Protocol and Public Key Protocols**: Entropy is \(\log(N)\) and information leakage is virtually zero because all users could have generated a response with probability very close to \(\frac{1}{N}\).
- **Deterministic Tree Protocol**: Entropy is \(\log(N) - \log(k)\) and information leakage is \(\log(k)\).

In the randomized protocol, an attacker never learns the exact branch a user resides in but rather a probability distribution over the different branches. The entropy of the overall distribution is the weighted sum of the entropies of the tree branch that contains the user (\(E_1\)) and all other branches (\(E_2\)):
\[ E_1 = -a_1 \log(a_1) \]
\[ E_2 = -a_2 \log(a_2) \]
\[ r = \frac{a_1}{a_2} \]
\[ E = \frac{N}{k} E_1 + N \left(1 - \frac{1}{k + r - 1}\right) E_2 \]
\[ E = -\log\left(\frac{1}{a_1}\right) + \frac{r}{k + r - 1} \log(r) \]
\[ E = \log(N) - \log(k) + \log(k + r - 1) - \frac{r}{k + r - 1} \log(r) \]

This completes the proof.