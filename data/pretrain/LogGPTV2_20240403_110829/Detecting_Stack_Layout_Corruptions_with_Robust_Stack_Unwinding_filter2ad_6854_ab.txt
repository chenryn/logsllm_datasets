tion of code in terms of coverage has incomplete unwinding information mainly
in the low level libraries and the starting point of a program. It is important
to address this issue because such code stays in the stack during execution and
there is a high chance to face it during the unwinding. If this issue happens, the
vanilla stack unwinding algorithm cannot proceed the unwinding procedure due
to the missing location of the next stack frame.
Based on our experiments over 34 programs including widely used server
applications and benchmark, the cases that we identiﬁed are summarized into
mainly three cases. First, it is triggered by the entry point of ld, which is the
dynamic linker and loader in Linux. Second, the ﬁrst stack frame which is the
start of the program can generate a type A error. The third case is the init
section of the pthread library.
Type B: Invalid Unwinding Status. Unlike type A, this case should not
occur in benign execution. However, this incorrect execution state is observed
when the stack layout is manipulated by attacks. The stack unwinding algorithm
strictly veriﬁes the validity of the stack layout information formulated by the
compiler across all stack frames. Any single discrepancy due to stack manipula-
tion leads to invalid unwinding conditions. Speciﬁcally this case is characterized
as the state shown in the table: the return code address obtained from the stack
is not found from the executable memory area.
Type A failures can block the full inspection of all stack frames in stack
unwinding-based approaches. Therefore, this issue must be addressed to achieve
robust stack unwinding. We address it using ﬂexible stack unwinding, which is a
novel variant of the stack unwinding algorithm that enables robust detection of
type B errors while addressing type A errors. Next, we present the details of our
algorithm that inspects stack invariants based on the ﬂexible stack unwinding.
80
Y. Fu et al.
Fig. 4. Flexible unwinding.
Fig. 5. Stack invariant violation.
5.2 Stack Invariant Inspection Algorithm
Figures 4 and 5 presents a high level illustration of our algorithm to inspect stack
invariants while addressing the practical stack unwinding challenges. When the
inspection is triggered, Algorithm 1 inspects stack frames starting from the top
to the bottom of the stack as shown in Fig. 4. The algorithm bypasses type A
failures while detecting type B errors caused by the violation of stack invari-
ants illustrated in Fig. 5. FCI and FSI violations are respectively caused by an
illegitimate chain of stack frames and return addresses.
The Algorithm 1 is triggered by an operating system event (e.g., a system
call, an interrupt) represented as the OsEvent function (Line 1). This function
executes the SIInspect function (Line 2), the main logic for stack inspection.
When this function detects either a type B error (FCI violation) or an invalid
return code instruction (FSI violation) during stack unwinding, it returns Fail.
Upon the detection of any violation, the PostProcess function is called (Line 4)
to stop the current process and store the current context for a forensic analysis.
Unwinding Library Code. A program executes the code for multiple libraries
as well as the main binary. Such libraries have separate stack frame information
in their binaries which are loaded into distinct virtual memory areas (VMA).
During the scan of the stack, our algorithm dynamically switches the VMA
structure for the return address (Line 11), which is implemented as two nested
loops in SIInspect; the outer while loop (Lines 10–38) switches diﬀerent VMAs
while the return addresses in the same binary are eﬃciently handled by the inner
loop (Lines 17–27) without searching for another VMA.
For each VMA, the .eh frame information is retrieved from the binary
(Line 16). For each code address, the algorithm checks its validity (Line 20). If
it is valid and the return code stays in the same VMA, the GetNextRet function
is called to unwind one stack frame. Otherwise the algorithm returns a violation
of FSI at Line 21. This loop is repeated to unwind following stack frames as
Detecting Stack Layout Corruptions with Robust Stack Unwinding
81
Algorithm 1. Stack Invariant Inspection Algorithm
SZ = sizeof(UNSIGNED LONG)
return
CFA = REGS → SP; VMA = GetVMA(CFA); UnwindDepth = 0
StackTop = REGS → SP; StackBot = GetStackStart(VMA, CFA)
InvalidInstr = False
while true do
return Fail
Goto DoFlexibleSIInspect
PostProcess(REGS, UserStack)
EH = GetEHSection(VMA)
do
Ret = SIInspect(UserStack, REGS)
if Ret == Fail then
VMA = GetVMA(REGS → IP)
if VMA is invalid or not executable then
if VMA → VM FILE does not exist then
1: function OSEvent(REGS)
2:
3:
4:
5:
6: function SIInspect(UserStack, REGS)
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29: :DoFlexibleSIInspect
30:
31:
32:
33:
34:
35:
36:
37:
38:
39:
40: function FlexibleSIInspect(Start SP, StackBot)
41:
42:
43:
44:
45:
while Ret == GotNext
if Ret is NoUnwindingInfo then
return Fail
return Success
return SP - Start SP
return EndOfStack
UnwindDepth += 1
else
Ret = GotNext; break
for SP = Start SP; SP = StackBot then
if TVC [REGS → IP] == False then
if REGS → IP > VMA → VM Start and REGS → IP < VMA → VM End then
return Fail
(cid:2) Type B, FCI violation, Stack Pivot Detection
(cid:2) FSI violation
(cid:2) Inner loop
Ret = GetNextRET(CFA, REGS, EH, StackBot, StackTop)
oﬀset = FlexibleSIInspect(REGS → SP, StackBot)
if oﬀset is EndOfStack then
else
return Success
REGS → SP += oﬀset; REGS → IP = *(REGS → SP) of UserStack,
REGS → BP = *(REGS → SP - SZ) of UserStack; REGS → SP += SZ
CFA = REGS → SP
else if Ret is Invalid then
(cid:2) Outer loop
(cid:2) Type B, FCI violation
(cid:2) Dynamic code
(cid:2) Find another VMA
(cid:2) Type A
(cid:2) Type B, FCI violation
long as the function returns GotNext. For code c, its BL(c) is returned by the
GetNextRet function. If a return address is replaced by k, a manipulated value,
the divergence BL(k) = BL(cid:3)(c) (cid:2)= BL(c) will cause cascading eﬀects on unwind-
ing of the following stack frames. Any mismatch of a single stack frame with its
unwinding information causes a violation of FCI at Line 13, 19, or 38.
Stack Pivot Detection. During stack unwinding, Algorithm 1 performs var-
ious checks to ensure precise unwinding and detect anomaly cases. A popular
technique in recent ROP attacks is stack pivoting [49,62] that changes the loca-
tion of stack to the manipulated content (e.g., heap). This attack is trivially
detected by our algorithm (Line 18) because SLIck can distinguish an invalid
stack memory address.
82
Y. Fu et al.
Flexible Stack Unwinding. To handle type A failures, we provide ﬂexible
stack unwinding algorithm (Lines 40–45). When a type A case happens, the
FlexibleSIInspect function advances the stack pointer in a brute force way
and checks whether a legitimate stack frame appears next. If the return address
found in this search belongs to a code section based on its memory address
range and the corresponding ﬁle, this function returns the oﬀset of the stack.
And then the algorithm goes back to the outer loop (Line 10), and the stack
layout information of the new stack frame is examined. If it is a type B case,
the GetNextRET function will return Invalid in the next loop. If it turns out
to be a type A case again, it will go back to the FlexibleSIInspect function
by returning NoUnwindingInfo. Lastly, if it is a valid frame, it will be unwound
and takes a following loop iteration.
5.3 Stack Inspection Policies
SLIck inspects the runtime status of a program stack based on the policies
regarding which types of OS events trigger the inspection. Here we present two
policies used for our evaluation (Sect. 6.3) and our framework allows user deﬁned
policies as well.
System Call Inspection (SYS). This policy checks the stack on all system
calls which provide lower level services to the program, such as memory alloca-
tion, ﬁle operations, network operations, and a change of memory permission.
They are the typical targets of ROP exploits to achieve functionality beyond
the original program, and this policy provides a cost-eﬀective inspection at the
intermediary points of OS operations to observe high impact system activities.
System Call and Non-deterministic Inspection (SYS+INT). This pol-
icy achieves ﬁner-grained inspection by narrowing down the gaps between the
inspections and making inspection intervals non-deterministic by using non-
deterministic OS events, such as interrupts. As an attack scenario against SLIck,
an ROP exploit may attempt to predict SLIck’s inspection time and clean up the
stack manipulation to hide its evidence. Since this scheme uses non-deterministic
OS events to perform inspections, this attack becomes signiﬁcantly hard to be
successful. This scheme can be further strengthened by increasing the random-
ness, e.g., by performing additional inspections with random intervals.
6 Evaluation
In this section, we present the evaluation of SLIck in the following perspectives.
– How eﬀective is SLIck at detecting real-world ROP exploits?
– What is the impact of SLIck on benign programs?
– How eﬃcient is SLIck for inspecting stack invariants?
Detecting Stack Layout Corruptions with Robust Stack Unwinding
83
We have implemented SLIck for 32 bit and 64 bit Ubuntu 12.04 LTS Linux
systems as a kernel module and user level tools for oﬄine analyses.
6.1 Detection of ROP Attacks
We applied SLIck on 7 real-world ROP exploits available in Linux of 32 bit and
64 bit architectures. Table 1 presents the details of the program’s runtime status
and the detection results by SLIck.
Table 1. Detection of stack invariant violations of ROP exploits. The number of
unwinding failures (#F-unwind) is generally correlated with the number of events (#
Events), but it can be higher if multiple stack frames have failures.
Syscall inspection policy
Invariant violation
Env #Events ||S|| #F-unwind Detection Type
FSI
64 bit 100452
96895
22
Attack description
Exploit info
Syscall
CVE-2013-2028 sys write
FCI & FSI CVE-2008-0226 sys execve
FCI & FSI CVE-2013-2028 sys write
FCI
FCI
FCI
FCI
CVE-2008-0226 sys rt sigaction
CVE-2007-0855 sys write
CVE-2012-5867 sys lstat64
CVE-2013-0230 sys time
Program
Name
Nginx
Mysql
Nginx
Mysql
Unrar
Ver
1.4
5.0.45 64 bit 2128
1.4
32 bit 42937
5.0.45 32 bit 2027
4.0
32 bit 141
HT Editor
2.0.20 32 bit 292
MiniUPnPd 1.0
32 bit 56
13
22
12
10
13
8
2156
40231
1792
142
326
50
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
The ﬁrst three columns show the description of the program,
its name
(Name), version (Ver.), and the architecture that it runs on (Env). For this
experiment, we use the system call inspection policy. The 4th, 5th, and 6th
columns show the runtime status: the number of system call events (# Events),
the average stack depth (||S||) during the execution, and the number of type
A stack unwinding errors (# F-unwind) that ﬂexible stack unwinding algorithm
successfully addressed. The next two columns show the detection of ROP exploits
based on stack invariant inspection: the “Detection” column shows whether the
violation of an invariant is detected. Our algorithm stops a program on the ﬁrst
violation of an invariant which could be either an FCI or an FSI. If both of them
occur in the same iteration of algorithm, it is presented as FCI & FSI. The type
of violation is presented in the “Type” column. Exploit information (Exploit
Info) and the system call at the time of detection (Syscall) are presented in the
next columns.
We experimented with real-world exploits against widely used server and
desktop software: Nginx, Mysql, Unrar, HT Editor, and MiniUPnPd. These
software and the ROP exploits have diﬀerent characteristics shown as various
numbers of system calls and the depths of the stack. All tested ROP exploits
are successfully detected due to violations of stack invariants.
84
Y. Fu et al.
6.2
Impact on Benign Programs
For a practical usage of SLIck, it should have low false positives in benign
programs. For this evaluation, we used total 34 programs from popular open
source projects and benchmarks: 3 widely used server programs (Nginx, Apache,
Mysql), a CPU benchmark for Linux (NBench), a data compression utility (7zip),
and 29 programs from the SPEC 2006 benchmark. The stack invariants are
inspected with two inspection policies: the system call inspection policy (SYS),
and the system call and non-deterministic inspection policy (SYS+INT).
Table 2 summarizes our results. The ﬁrst column describes the program name.
We present the data for two inspection policies in diﬀerent groups of columns.
The next three columns describe the evaluation using the SYS inspection policy.
The following three columns show the result using the SYS+INT policy. The
SYS+INT inspection policy increases the number of inspection events in the
CPU intensive benchmarks more signiﬁcantly (e.g., 434.zeusmp has over 28 times
higher events because of timer interrupts). I/O intensive programs get most
timer interrupts from the kernel code, such as another interrupts or system
calls. Such cases are not additionally inspected because the programs are already
checked on the transition from the user mode to the kernel mode. This policy
can harden the inspection of CPU intensive programs that have a low number
of system calls. Timer interrupts capture a program call stack at arbitrary non-
deterministic execution points. Therefore, the average call stack depth (||S||) is
diﬀerent between two experiments in many cases of the SPEC benchmark.
In general the number of type A failures that ﬂexible unwinding addresses
(#F-unwind) is highly correlated with the number of inspection events (# Events).
One reason for this behavior is that the ﬁrst stack frame created on the start of the
program stays in the stack and triggers a type A failure on each system call. Another