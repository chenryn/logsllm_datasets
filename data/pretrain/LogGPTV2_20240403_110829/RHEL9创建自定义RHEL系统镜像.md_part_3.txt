    识别列表中的内容。
3.  完成 compose 后，下载生成的镜像文件：
    ``` screen
    # composer-cli compose image UUID
    ```
    使用前面步骤中显示的 [*UUID*]{.emphasis} 值替换 UUID。
    您还可以使用 `composer-cli compose logs UUID`{.literal}
    命令下载日志，或使用 `composer-cli compose metadata UUID`{.literal}
    命令下载元数据。
:::
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#basic-composer-command-line-commands_creating-system-images-with-composer-command-line-interface}基本镜像构建器命令行命令 {.title}
:::
Image Builder 命令行界面提供以下子命令。
::: variablelist
**蓝图操作**
[列出所有可用的蓝图]{.term}
:   ``` screen
    # composer-cli blueprints list
    ```
[显示 TOML 格式的蓝图内容]{.term}
:   ``` screen
    # composer-cli blueprints show BLUEPRINT-NAME
    ```
[将蓝图内容以 TOML 格式保存（导出）到文件 `BLUEPRINT-NAME.toml`{.literal}中]{.term}
:   ``` screen
    # composer-cli blueprints save BLUEPRINT-NAME
    ```
[删除蓝图]{.term}
:   ``` screen
    # composer-cli blueprints delete BLUEPRINT-NAME
    ```
[将 TOML 格式的蓝图文件推送到镜像构建器中]{.term}
:   ``` screen
    # composer-cli blueprints push BLUEPRINT-NAME
    ```
:::
::: variablelist
**从蓝图制作镜像**
[列出可用的镜像类型]{.term}
:   ``` screen
    # composer-cli compose types
    ```
[启动一个目录]{.term}
:   ``` screen
    # composer-cli compose start BLUEPRINT COMPOSE-TYPE
    ```
    将 [*BLUEPRINT*]{.emphasis} 替换为要构建的蓝图名称，将
    [*COMPOSE-TYPE*]{.emphasis} 替换为输出镜像类型。
[列出所有 compose]{.term}
:   ``` screen
    # composer-cli compose list
    ```
[列出所有 compose 及其状态]{.term}
:   ``` screen
    # composer-cli compose status
    ```
[取消正在运行的 compose]{.term}
:   ``` screen
    # composer-cli compose cancel COMPOSE-UUID
    ```
[删除完成的 compose]{.term}
:   ``` screen
    # composer-cli compose delete COMPOSE-UUID
    ```
[显示有关 compose 的详细信息]{.term}
:   ``` screen
    # composer-cli compose info COMPOSE-UUID
    ```
[下载 compose 的镜像文件]{.term}
:   ``` screen
    # composer-cli compose image COMPOSE-UUID
    ```
:::
::: itemizedlist
**其他资源**
-   [*composer-cli*]{.emphasis}(1)书册页提供了可用子命令和选项的完整列表：
    ``` screen
    $ man composer-cli
    ```
-   `composer-cli`{.literal} 命令提供有关子命令和选项的帮助：
    ``` screen
    # composer-cli help
    ```
:::
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#composer-blueprint-format_creating-system-images-with-composer-command-line-interface}镜像构建器蓝图格式 {.title}
:::
镜像构建器蓝图以 Tom 的 Obvious、Minimal
Language(TOML)格式的纯文本形式呈现给用户。
典型的蓝图文件元素包括：
::: variablelist
[蓝图元数据]{.term}
:   ``` screen
    name = "BLUEPRINT-NAME"
    description = "LONG FORM DESCRIPTION TEXT"
    version = "VERSION"
    ```
    用您的蓝图的名称和描述替换 [*BLUEPRINT-NAME*]{.emphasis} 和 [*LONG
    FORM DESCRIPTION TEXT*]{.emphasis}。
    根据 [Semantic Versioning](https://semver.org/){.link} 方案，将
    [*VERSION*]{.emphasis} 替换为版本号。
    这部分只针对整个蓝图文件显示一次。
    条目 [*modules*]{.emphasis} 描述了要安装到镜像中的软件包名称和与
    glob 相匹配的版本。
    条目 [*group*]{.emphasis} 描述了要安装到镜像中的一组软件包。group
    将其软件包分类如下：
    ::: itemizedlist
    -   Mandatory（必需）
    -   Default（默认）
    -   Optional（可选）
        蓝图会安装必需的软件包。没有选择可选软件包的机制。
    :::
[镜像中包含的组]{.term}
:   ``` screen
    [[groups]]
    name = "group-name"
    ```
    使用组群名称替换 [*group-name*]{.emphasis}，比如
    [**[anaconda-tools]{.group}**]{.strong}、[**[widget]{.group}**]{.strong}、[**[wheel]{.group}**]{.strong}
    或者[**[users]{.group}**]{.strong}。
[镜像中包含的软件包]{.term}
:   ``` screen
    [[packages]]
    name = "package-name"
    version = "package-version"
    ```
    使用软件包名称替换 [*package-name*]{.emphasis}，比如
    [**[httpd]{.package}**]{.strong}、[**[gdb-doc]{.package}**]{.strong}
    或者 [**[coreutils]{.package}**]{.strong}。
    将 [*package-version*]{.emphasis} 替换为要使用的版本。此字段支持
    `dnf`{.literal} 版本规范：
    ::: informalexample
    ::: itemizedlist
    -   对于特定版本，请使用具体的版本号，如 [**8.30**]{.strong}。
    -   对于最新的可用版本，请使用星号 [**\***]{.strong}。
    -   对于最新的次版本，请使用类似 [**8.**]{.strong}\* 的格式。
    :::
    :::
    为每个要包括的软件包重复这个块。
:::
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#image-customizations_creating-system-images-with-composer-command-line-interface}支持的镜像自定义 {.title}
:::
目前，蓝图中支持许多镜像自定义。要使用这些选项，必须首先在蓝图中配置它们，并将导入（推送）到镜像构建器。
::: informalexample
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
目前在附带的 cockpit-composer GUI 中不支持这些自定义。
:::
:::
::: variablelist
[设置镜像主机名]{.term}
:   ``` screen
    [customizations]
    hostname = "baseimage"
    ```
[生成系统镜像的用户规范]{.term}
:   ``` screen
    [[customizations.user]]
    name = "USER-NAME"
    description = "USER-DESCRIPTION"
    password = "PASSWORD-HASH"
    key = "PUBLIC-SSH-KEY"
    home = "/home/USER-NAME/"
    shell = "/usr/bin/bash"
    groups = ["users", "wheel"]
    uid = NUMBER
    gid = NUMBER
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    GID 是可选的，必须已存在于镜像中、由软件包创建，或者由蓝图
    `[[customizations.group]`{.literal} 条目创建。
    :::
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    若要生成哈希，您必须在您的系统上安装
    [**python3**]{.strong}。以下命令将安装 [**python3**]{.strong}
    软件包。
    ``` screen
    # dnf install python3
    ```
    :::
    将 [*PASSWORD-HASH*]{.emphasis}
    替换为实际密码散列。要生成哈希，请使用如下命令：
    ``` screen
    $ python3 -c 'import crypt,getpass;pw=getpass.getpass();print(crypt.crypt(pw) if (pw==getpass.getpass("Confirm: ")) else exit())'
    ```
    将 [*PUBLIC-SSH-KEY*]{.emphasis} 替换为实际公钥。
    使用适当的值替换其他占位符。
    根据需要可以省略任何行，只需要用户名。
    为每个要包含的用户重复这个块。
[生成系统镜像的组规范]{.term}
:   ``` screen
    [[customizations.group]]
    name = "GROUP-NAME"
    gid = NUMBER
    ```
    为每个组重复此块。
[设置现有用户的 ssh 密钥]{.term}
:   ``` screen
    [[customizations.sshkey]]
    user = "root"
    key = "PUBLIC-SSH-KEY"
    ```
    ::: informalexample
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    这个选项仅适用于现有用户。要创建用户并设置 ssh 密钥，请使用
    [**生成系统镜像的用户规范**]{.strong} 自定义。
    :::
    :::
[在默认值中附加一个内核引导参数选项]{.term}
:   ``` screen
    [customizations.kernel]
    append = "KERNEL-OPTION"
    ```
[定义要在镜像中使用的内核名称]{.term}
:   ``` screen
    [customizations.kernel.name]
    name = "KERNEL-NAME"
    ```
[为生成的系统镜像设置时区和 [*网络时间协议*]{.emphasis} [**(NTP)**]{.strong} 服务器]{.term}
:   ``` screen
    [customizations.timezone]
    timezone = "TIMEZONE"
    ntpservers = "NTP_SERVER"
    ```
    如果您没有设置时区，系统将默认使用 [*Universal Time,
    Coordinated*]{.emphasis} [**（UTC）**]{.strong}。设置 NTP
    服务器是可选的。
[为生成的系统镜像设置区域设置]{.term}
:   ``` screen
    [customizations.locale]
    languages = ["LANGUAGE"]
    keyboard = "KEYBOARD"
    ```
    设置语言和键盘选项是必须的。您可以添加多种语言。您添加的第一个语言是主要语言，其他语言为次要语言。
[为生成的系统镜像设置防火墙]{.term}
:   ``` screen
    [customizations.firewall]
    port = ["PORTS"]
    ```
    您可以使用数字端口或 `/etc/services`{.literal}
    文件中的名称来启用列表。
[自定义防火墙服务]{.term}
:   查看可用的防火墙服务。
    ``` screen
    $ firewall-cmd --get-services
    ```
    在蓝图中，在 `customs.firewall.service`{.literal}
    部分下指定要自定义的防火墙服务。
    ``` screen
    [customizations.firewall.services]
    enabled = ["SERVICES"]
    disabled = ["SERVICES"]
    ```
    `firewall.services`{.literal} 中列出的服务与
    `/etc/services`{.literal} 文件中提供的名称不同。
    您可选择为计划创建的系统镜像自定义防火墙服务。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果您不想自定义防火墙服务，请省略蓝图中的
    `[customizations.firewall]`{.literal} 和
    `[customizations.firewall.services]`{.literal} 部分。
    :::
[设置在引导时要启用哪个服务]{.term}
:   ``` screen
    [customizations.services]
    enabled = ["SERVICES"]
    disabled = ["SERVICES"]
    ```
    您可以控制在引导期间要启用哪些服务。有些镜像类型已经启用或禁用了特定服务，以便镜像正常工作，此设置无法覆盖。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    每次构建启动时，它都会克隆存储库。如果您引用具有大量历史记录的存储库，则克隆可能会需要一段时间，并使用大量的磁盘空间。此外，克隆是临时的，会在
    RPM 软件包创建后删除。
    :::
[指定自定义文件系统配置]{.term}