kernel32 export redirection
暂时忽略模式穿越细节知识
kernel32
IsProcessCritical
api-ms-win-core-processthreads-l1-1-2.IsProcessCritical
kernelbase!IsProcessCritical
NtQueryInformationProcess_0x1d_29
ntoskrnl
NtQueryInformationProcess真实实现体
IsProcessCritical
关于Critical Process基本情况参阅msdn
https://devblogs.microsoft.com/oldnewthing/20180216-00/?p=98035
这里仅记录下逆向该API的过程
从kernel32跟到 api-ms-win-core-processthreads-l1-1-2.dll  仅在 .rdata段显示了字符串 又指向了 
kernel32
参考: https://twitter.com/MiasmRe/status/1270277962873610243
可以发现在api-ms-win-core-processthreads-l1-1-2.dll内 没有该API的 描述apiSet详细信息
只提供了名称   然后由  apisetschema.dll   (该函数只导出了 anSi)进行处理
https://blog.quarkslab.com/runtime-dll-name-resolution-apisetschema-part-i.html
apiset mechnisam
这种dll只是为了保持兼容性做到一个临时中转，也就是说该dll也是一个包装器一样的概念，没有
实际代码，它的导入表项是空的，再将（每个不同的版本，增删API在这里过滤），最后转到一个
一定会调用的函数内部。
我们知道kerenl32里面有很多API 都走了 kernelbase.dll   例如CreateFileStub
随着版本升级，如果不考虑任何因素，势必会导致kernelbase.dll越来越臃肿。
The problem is that, with this re-factoring, a single DLL might contain multiple logical sets of 
APIs
因此微软重新设计了 dll架构
根据微软的dll架构设计很明显 Virtual DLL就是平时直接接触的dll kernel32,user32等
ApiSetSchema是一种机制 依赖于 apisetschema.dll
然后+  api-set兼容性dll
LogicalDll 只得是真正实现函数代码的动态链接库。
因此我们需要分析的是 kernelbase.dll!IsProcessCritical
apisetschema
apisetschema机制在早期引导阶段被激活。
Winload.exe在引导期间加载
Winload!OslpLoadAllModules
Winload!OsLoadImage
nt!MiInitializeApiSets
第二部分
https://blog.quarkslab.com/runtime-dll-name-resolution-apisetschema-part-ii.html
介绍 ApiSetSchema的结构
kernelbase
现在才算进入正题
uf一下
ApiSetMapLoad.py: Extracts the content of the .apisetmap section (from 
apisetschema.dll) to a file.
ApiSetMapParse.py: Parses the content of the .apisetmap section.
SearchFiles.py: Search for all Virtual DLL files on a system.
out_parsingapiset.txt: An output example of ApiSetMapParse.py executed on Windows 
8 Consumer Preview 32-bit.
win7_64_names.txt: output from SearchFiles.py on Windows 7 SP1 64-bit.
win8_32_CP_names.txt: output from SearchFiles.py on Windows 8 Consumer Preview 
32-bit.
作者介绍了ApiSetSchema的结构并提供了 python脚本，备份地址:
https://github.com/bopin2020/WindowsCamp/blob/main/NT%20Kernel/Misc/Dll_mechanis
m/apisetmap-scripts-part2.zip
0:004> uf 00007ffd`43c83070
KERNELBASE!IsProcessCritical:
00007ffd`43c83070 48895c2408      mov     qword ptr [rsp+8],rbx
查询进程是否为  Critical Process 用户态先调用了
KERNELBASE!_imp_NtQueryInformationProcess
00007ffd`43c83075 57              push    rdi
00007ffd`43c83076 4883ec30        sub     rsp,30h
00007ffd`43c8307a 33db            xor     ebx,ebx
00007ffd`43c8307c 4c8d442450      lea     r8,[rsp+50h]
00007ffd`43c83081 488bfa          mov     rdi,rdx
00007ffd`43c83084 48895c2420      mov     qword ptr [rsp+20h],rbx
00007ffd`43c83089 448d4b04        lea     r9d,[rbx+4]
00007ffd`43c8308d 8d531d          lea     edx,[rbx+1Dh]
00007ffd`43c83090 48ff15a1db0f00  call    qword ptr 
[KERNELBASE!_imp_NtQueryInformationProcess (00007ffd`43d80c38)]
00007ffd`43c83097 0f1f440000      nop     dword ptr [rax+rax]
00007ffd`43c8309c 85c0            test    eax,eax
00007ffd`43c8309e 7909            jns     KERNELBASE!IsProcessCritical+0x39 
(00007ffd`43c830a9)  Branch
KERNELBASE!IsProcessCritical+0x30:
00007ffd`43c830a0 8bc8            mov     ecx,eax
00007ffd`43c830a2 e82915efff      call    KERNELBASE!BaseSetLastNTError 
(00007ffd`43b745d0)
00007ffd`43c830a7 eb0e            jmp     KERNELBASE!IsProcessCritical+0x47 
(00007ffd`43c830b7)  Branch
KERNELBASE!IsProcessCritical+0x39:
00007ffd`43c830a9 395c2450        cmp     dword ptr [rsp+50h],ebx
00007ffd`43c830ad 0f95c3          setne   bl
00007ffd`43c830b0 891f            mov     dword ptr [rdi],ebx
00007ffd`43c830b2 bb01000000      mov     ebx,1
KERNELBASE!IsProcessCritical+0x47:
00007ffd`43c830b7 8bc3            mov     eax,ebx
00007ffd`43c830b9 488b5c2440      mov     rbx,qword ptr [rsp+40h]
00007ffd`43c830be 4883c430        add     rsp,30h
00007ffd`43c830c2 5f              pop     rdi
00007ffd`43c830c3 c3              ret
NtQueryInformationProcess 第二个参数为 ProcessBreakOnTermination
从msdn上面我们可以发现  低版本该值已经有了  只不过从win8.1网上提供了该API方便调用
实际还是由NtQueryInformationProcess进0环查询的  这里涉及到syscall调用分析，不是本文的
重点。只需要理解 参数从用户态栈拷贝到内核态栈，找到KiFastCallEntry 内核调用后返回给 
ntdll!NtQueryInformationProcess
ntdll NtQueryInformationProcess
3环进入内核 调用栈  通过  KiFastCallEntry
当从0环出来时  看左边  KiSystemCallExit 此时原来 NtQueryInformationProcess 第三个参数存
储查询的结果，这里已经被赋值了
第二个参数为 0x03   msdn上指示这是枚举值，但是没有表示3是何值。
__kernel_entry NTSTATUS NtQueryInformationProcess(
  [in]            HANDLE           ProcessHandle,
  [in]            PROCESSINFOCLASS ProcessInformationClass,
  [out]           PVOID            ProcessInformation,
  [in]            ULONG            ProcessInformationLength,
  [out, optional] PULONG           ReturnLength
);
00 b13e6d48 8053e638     ffffffff 00000001 02b0fec4 nt!NtQueryInformationProcess
01 b13e6d48 7c92e4f4 (T) ffffffff 00000001 02b0fec4 nt!KiFastCallEntry+0xf8
02 02b0fd34 7c92d7ec (T) 7c8311b9 ffffffff 00000001 ntdll!KiFastSystemCallRet
03 02b0fd38 7c8311b9     ffffffff 00000001 02b0fec4 
ntdll!NtQueryInformationProcess+0xc
通过 ntpsapi.h 我们可以知道具体含义
调用NtQueryInformationProcess 查询
ring3下 不通过IsProcessCritical 查询 Critical Process  (OPEN_PROCESS_QUERY_LIMITED 
privilege)
逆向 NtQueryInformationProcess
由于该函数是从 ntdll系统调用进入内核执行的，因此我们真正要逆向的是 
ntoskrn.exe
由于ProcessBreakOnTermination 值为0x1d 找到调用处，但是遇到了jumpout 无法直接分析了
参考看雪上大佬的文章  我们帮助ida一起分析   (或者随后用windbg动态调试也行)
https://bbs.pediy.com/thread-259062.htm
https://www.anquanke.com/post/id/179080#h2-3
看了几遍，奈何自己的逆向水平太菜，后来才想到收藏夹中还有wrk. 还是从wrk中翻源码看吧
可以看到直接将 EPROCESS执行体中的 Flags 与 
PS_PROCESS_FLAGS_BREAK_ON_TERMINATION   0x00002000UL // Break on process 
termination 按位相与即可。
    ProcessQuotaLimits, // qs: QUOTA_LIMITS, QUOTA_LIMITS_EX
    ProcessIoCounters, // q: IO_COUNTERS
    ProcessVmCounters, // q: VM_COUNTERS, VM_COUNTERS_EX, VM_COUNTERS_EX2
通过NtQueryInformationProcess 枚举系统上的 Critical Process
总结
kernel32 导出函数
apisetschema 最终回到kernelbase
进入Ntdll  到内核完成。
这类函数从win8.1开始，为了方便调用。还有IsWow64Process等都是对 NtQueryInformation*
的包装。至此，整个流程大体分析完了，但是其中一些细节和难点也还没有解决。希望对大家有
用。