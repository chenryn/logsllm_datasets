C++背景，其实也应该没关系。）
②你是不是一个很棒的OO设计者/开发人员，正在找
一本参考书？
③你是不是一个架构师，想找企业设计模式？
④你是不是对新鲜事物都畏手畏脚？你是不是宁愿接
受牙根管治疗，也不愿意接受苏格兰花格裙？你是
不是觉得，如果把Java组件都拟人化了，这样的一
本书肯定不是一本正儿八经的技术书？
那么，太遗憾了，本书不适合你。
[营销备注：本书遥合所有有信用卡的人。]
xxviii
引子
---
## Page 12
引子
我们知道你在想什么
“这算一本正儿八经的编程书吗？”
你的大脑想
“这一堆图是干什么的？“
着：这真的很
“我真的能这样学吗？”
重要。
我们也知道你的大脑在想什么。
你的大脑总是渴求一些新奇的东西，它一直在搜寻、审视、期待着不寻常的事
情发生。大脑的构造就是如此。正是这一点才让我们不至于固步自封，能跟着
时代前进。
如今，一般是不太可能被老虎吃掉的。然而，你的大脑还是一直在注意着周围
是否有潜伏的老虎。只不过你自已没有意识到而已。但是我们每天都会遇到许
多按步就班的事情，这些事情很普通，对于这样一些例行的事情或者平常的东
西，你的大脑又是怎么处理的呢？它的做法很简单，就是不让这些平常的东西
妨碍大脑真正的工作。那么什么是大脑真正的工作呢？这就是记住那些确实重
要的事情。它不会费心地去记乏味的东西：就好像大脑里有一个筛子，这个筛
子会筛掉“显然不重要”的东西，如果遇到的事情枯燥乏味，这些东西就无法通过
噢，又是637页没
这个筛子。
意思的文字，又枯燥
那么你的大脑怎么知道到底哪些东西重要呢？打个比方，假如你某一天外出旅行，
又乏味。
突然一只大老虎跳到你面前，此时此刻，你的大脑里会发生什么呢？
看到这只大老虎，你的神经元会“点火”，情绪爆发，释放出一些化学物质。
你的大脑认为
好了，这样你的大脑就会知道
这些根本不值得
去记。
这肯定很重要！可不能忘记了！
不过，假如你正待在家里或者坐在图书馆里，这里很安全，很温暖，
肯定没有老虎。你正在刻苦学习，准备应付考试。也可能想学一些比
较难的技术，你的老板认为掌握这种技术需要一周时间，最多不超过
十天。这就存在一个问题。你的大脑很想给你帮忙。它会努力地把这
些显然不太重要的内容赶走，保证这些东西不去侵占本不算充足的脑
力资源。这些资源最好还是用来记住确实重要的事情，比如大老虎，
再比如火灾险情。如果你曾经只身着短衣裤被大雪围困，这件事肯定
不会忘却，你的大脑会记住绝不要让这种情况再发生第二次。
我们没有一种简单的方法来告诉大脑：“嘿，大脑，真是谢谢你了，
不过不管这本书多没意思，也不管我对它是多么的无动于衷，但我确
实希望你能帮助我把这些东西记下来。”
你现在的位置
xxix
---
## Page 13
如何使用这本书
我们认为
的“HeadFirst”的读者就是要学习的人
那么，怎么来学习呢？首先，必须了解，然后要保证自己确实不会忘记。这可不是填鸭式的硬塞。根据
认知科学、神经生物学和教育心理学的最新研究，学习的途径相当丰富，绝非只是通过书本上的文字。
我们很清楚怎么让你的大脑兴奋起来。
需要调用服务
下面是一些HeadFirst学习原则：
器上的一个方
法。
看得到。与单纯的文字相比，图片更能让人记得住，通过图片，学习效率会更高（对
RM远程服务
于记忆和传递型的学习，甚至能有多达89%的效率提升），而且图片更能让人看
懂。以往总是把图片放在一页的最下面，甚至放在另外的一页上，与此不同，如
BoCalcO
果把文字放在与之相关的图片内部，或者在图片的周围写上相关文字，学习者
的能力就能得到多至两倍的提高，从而能更好地解决有关的问题。
返回值
采用一种针对个人的交谈式风格。最新的研究表明，如果学习过程中采
用一种第一人称的交谈方式直接向读者讲述有关内容，而不是用一种干巴巴的
语调介绍，学生在学习之后的考试中成绩会提高40%。正确的做法是讲故事，而不是做报
告。要用通俗的语言。另外不要太严肃，如果你面对着这样两个人，一个是你在餐会
上结识的很有意思的朋友，面另一个学究气十足，噪噪不休地对你说教，在这两个人中，
拾象方港或是简单。站
你会更注意哪一个呢？
些方法是没有身体的。
让学习的人想得更深。换句话说，除非你很积极地让神经元活动起来，否则你的头脑里
什么也不会发生。必须引起读者的好奇，促进、要求并鼓励读者去解决问题、得出结论、产生
说浴缸是一个（IS-A）治宝合
新的知识。为此，需要提出挑战，留下练习题和拓宽思路的问题，并要求读
造响？能不能说渗室是一个浴
者完成一些实践活动，让左右脑都开动起来，面且要利用多种思维。
红？或老，是不是脂该授达是一
种“有一个”（HASA）美系？
引起读者的注意，而且要让他一直保持注意。我们可能都有这
样的体验，“我真的想把这个学会，不过看过一页后就变得昏昏微睡
abstract
roam();
了”，你的大脑注意的是那些不一般、有意思、有些奇怪、抢
眼的、意料之外的东西，学习一项有难度的新技术并不一定桔
燥。如果学习过程不乏味，你的大脑很快就能学会。
没有方法体（方法内
的定义）：用一个分
影响读者的情绪。现在我们知道了，记忆能力很大程度上取决于所
号结束：
记的内容对我们的情绪有怎样的影响。如果是你关心的东西，就肯定记得住。如
果让你感受到了什么，这些东西就会留在你的脑海中。不过，我们所说的可不是什么
关于男孩与狗的伤心故事。这里所说的情绪是惊讶、好奇、觉得有趣。想知道“什么”，还有就是一种
自豪感，如果你解决了一个难题，学会了所有人都觉得很难的东西，或者发现你了解的一些知识竞是那些自
以为无所不能的做慢家伙所不知道的，此时就会有一种自豪感油然面生。
XXX
引子
---
## Page 14
引子
元认知：有关思考的思考
如果你是真的想学，而且想学得更快、更深人，就应该注意你怎样才能集中注意力。考
虑自己是怎样思考的，并了解自己的学习方法。
我想知道
怎样才能骗过我
我们中间大多数人长这么大可能都没有上过有关元认知或学习理论的课程。我们想学
的大脑，让它记住这
习，但是很少有人教我们怎么来学习。
些东西
不过，这里可以做一个假设，如果你手上有这本书，你想学设计模
式，而且可能不想花太多时间。另外，因为你要参加考试，所以需要
记住你读到的所有内容。为此必须理解这些内容。想要最大程度地掌
握这本书或其他任何一本书中介绍的知识，就要让你的大脑负起责任
来，要求它记住这些内容。
怎么做到呢？技巧就在于要让你的大脑认为你在学习的新东西确实
很重要，对你的生活有很大影响。就像老虎出现在面前一样。如若
不然，你将陷人旷日持久的拉锯战中，虽然你很想记住所学的新内
容，但是你的大脑却会竭尽全力地把它们拒之门外。
那么，究竟怎样才能让你的大脑把设计模式看作是
一只饥饿的老虎呢？
这有两条路：一条比较慢，很乏味：另一条路不仅更快，还更有
效。慢方法就是大量地重复。你肯定知道，如果反反复复地看到同一个东西，即使再没
有意思，你也能学会并记住它。如果做了足够的重复，你的大脑就会说“尽管看上去这
对他来说好像不重要，不过，既然他这样一而再、再而三地看同一个东西，那么我就假
定这是很重要的。”
更快的方法是尽一切可能让大脑活动起来，特别是开动大脑来完成不同类型的活动。如
何做到这一点呢？上一页列出的学习原则正是一些主要的可取做法，而且经证实，它们
确实有助于让你的大脑全力以赴。例如，研究表明，把文字放在所描述图片的中间（而
不是放在这一页的别处，比如作为标题，或者放在正文中），这样会让你的大脑更多地
考虑这些文字与图片之间有什么关系，而这就会让更多的神经元点火。让更多的神经元
点火=你的大脑更有可能认为这些内容值得注意，而且很可能需要记下来。
交谈式风格也很有帮助，当人们意识到自己在与“别人”交谈，往往会更加关注，这
是因为他们总想跟上谈话的思路，并能做出适当的发言，让人惊奇的是，大脑并不关
面，如果写作风格很正式，干巴巴的，你的大脑就会觉得像坐在一群人当中被动地听人
做报告一样，很没意思，所以不必在意对方说的是什么，甚至可以打嗑睡。
不过，图片和交谈风格还只是开始而已，能做的还有很多。
你现在的位置》xxxi
---
## Page 15
如何使用这本书
我们是这么做的：
我们用了很多图，因为你的大脑更能接受看得见的东西，而不是纯文字。对你的大脑而言，一幅图
顶得上1024个字。如果既有图片又有文字，我们会把文字放在图片当中，因为文字处在所描述的图
片中间时，大脑的工作效率更高，诺把这些描述文字作为标题，或者“没”在别处的大段文字
中，那就达不到这种效果了。
我们采用了重复手法，会用不同的方式，采用不同类型的媒体、运用多种思维手段来介绍同一个东
西，目的是让有关内容更有可能储存在你的大脑中，而且能够在多个区中都有容身之地。
我们会用你想不到的方式运用概念和图片，因为你的大脑喜欢新鲜玩艺，在提供图和思想时，至少
会含着一些情绪因素，因为如果能产生情绪反应，你的大脑就会投入更大的注意。而这会让你感觉
到这些东西更有可能要被记住，其实这种感觉可能只是有点南默，让人奇怪或者比较感兴趣而已。
我们采用了一种针对个人的交谈式风格，因为当你的大脑认为你在参与一个交谈，而不是被动地听
一场演示汇报时，它就会更加关注。即使你实际上在读一本书，也就是说在与书“交谈”，而不是
真正与人交谈，但这对你的大脑来说并没有什么分别。
模式大师
在这本书里，我们加入了40多个实践活动，因为与单纯的阅读相比，如果能实际做点什么，你的大
脑会更乐于学习，更愿意去记。练习都是我们精心设计的，有一定的难度，但是确实能做出来，因
为这是大多数人所希望的。
我们采用了多种学习模式，因为尽管你可能想循序渐进地学习，但是其他人可能希望先对整体有一
要点
个全面认识，另外可能还有人只是想看一个代码示例。不过，不管你想怎么学，要是同样的内容能
以多种方式来表述，这对每一个人都会有好处。
这里的内容不只是单单涉及左脑，也不只是让右脑有所动作，我们会让你的左右脑都开动起来，因
为你的大脑参与得越多，你就越有可能学会并记住，而且能更长时间地保持注意力。如果只有一
谜题
大脑在工作，通常意味着另一半有机会休息，这样你就能更有效率地学习更长时间。
我们会讲故事，留练习，从多种不同的角度来看同一个问题，因为如果要求大脑做一些评价和
断，它就能更深入地学习。
你会看到我们给出的一些练习，还要回答一些问题，这些问题往往不是直截了当就能做出回答的，
通过克服这些挑战，你就能学得更好，因为让大脑真正做点什么的话，它就更能学会并记住。想想
吧，如果只是在健身馆里看着别人流汗，这对于保持你自己的体形肯定不会有什么帮助，正所谓临
渊羡鱼，不如退而结网。不过另一方面，我们会竭尽所能不让你钻牛角尖，把劲用错了地方，而是
能把功夫用在点子上。也就是说，你不会为搞定一个难懂的例子而耽捆，也不会花太多时间去弄明
白一段晦涩难懂而且通篇行话的文字，我们的描述也不会太过简洁而让人无从下手。
我们用了拟人手法。在故事中，在示例中，还有在图中，你都会看到人的出现。这是因为你本身是
一个人，不错，这就是原因。如果和人打交道，相对于东西而言，你的大脑会表示出更多的注意。
我们充分利用了80/20方法，我们认为，如果你真的要攻读软件设计博士的话，这本书肯定不会是
你唯一的设计模式书，所以我们不打算面面俱到。这里只提供了你真正需要的东西。
XXXI引子
---
## Page 16
可以用下面的方法让你的大脑就范
引子
好了，我们该做的已经做了，剩下的就要看你自己的了。这些提
示只是个开头：听一听你的大脑是怎么说的，弄清楚对你来说哪
沿着虑线剪下，
些做法可行，哪些做法不能奏效。还可以做些新的尝试。
贴在冰箱上。
①慢一点，你理解的越多，需要记的就越少。
大声说出来。
不要光是看看而已。停下来，好好想一想。书中提出
说话可以刺激大脑的另一部分。如果你想看懂什
问题的时候，你不要直接去翻答案。可以假想成真的
么，或者想更牢地记住它，就要大声说出来。更
有人在问你问题。你让大脑想得越深，就越有可能学
好的办法是，大声地解释给别人听。这样你会学
会并记住。
得更快，而且可能会有一些新的认识，而这是以
②勤做练习，自己记笔记。
前光看不说的时候未曾发现的。
我们给你留了练习，但是如果这些练习的解答也由我
听听你的大脑怎么说。
们一手包办，那和有人替你参加考试有什么区别？不
注意一下你的大脑是不是负荷太重了，如果发现
要只是坐在那里看着练习发呆。拿出笔来，写一写、
自己开始浮光掠影地翻看，或者刚看的东西就忘
画一画。大量研究都证实，学习过程中如果能实际动
记了，这说明你该休息一会儿了。达到某个临界
动手，将改善你的学习效果。
点时，如果还一味地向大脑里塞，这对加快学习
速度根本没有帮助，甚至还可能影响正常的学习。
③阅读“There arenoDumbQuestions”部分。
顾名思义，这些问题可不是可有可无的旁注，它们绝
要有点感觉！
对是核心内容的一部分！千万不要把它们跳过去不看。
你的大脑需要知道这是很重要的东西。要真正融
人到书中的故事里。为书里照片加上你自已的说
④上床睡觉之前不要再看别的书了，或者至少不
明。你可能觉得一个笑话很憋脚，不太让人满意，
再看其他有难度的东西。
但这总比根本无动于衷要好。
学习中有一部分是在你合上书之后完成的（特别是，
9设计一些东西！
要把学到的知识长久地记住，这往往无法在看书的过
程中做到）。你的大脑也需要有自己的时间来再做一
将学来的知识应用到新项目中，甚至重构旧项目。
些处理。如果在这段处理时间内你又往大脑里灌输了
反正就是尽量应用知识，获取实践经验。你所需
新的知识，那么你刚学的一些东西就会被丢掉。
要的是一枝铅笔和一个难题，试着应用数个设计
模式解决这个难题。
③要喝水，而且要多喝点水。
如果能提供充足的液体，你的大脑才能有最佳表现。
如果缺水（可能你觉到口渴之前，就已经缺水了），
学习能力就会下降。
你现在的位置
!!IXXX
---
## Page 17
如何使用这本书
Readme
这是一本体验式学习的书，不是一本参考书。对于学习过程有所阻挠的东西，我们
我们对UML有所修改，使用
都予以排除。读完第一次之后，你需要从头再读一次，因为本书对读者的背景知识
了一种更简单的“类”UMC
做了一些假设。
2
我们使用简单的“类”UML图（注意，可不是UML类图，而是指与UML图
Director
很相似）。
getMovies
书中用到了UML，但是我们没有详细介绍UML，而UML也不是本书必备的预
getOscars()
备知识。如果你以前没见过UML，也别担心。我们会沿路告诉你一些UML的
getKevinBaconDegrees()
基本用法。换句话说，你根本不需要同时担心UML和设计模式。我们的图示法
是“类“UML图一虽然我们试着用真正的UML，但是基于自私的写作必要，我们
终究还是做了一些小改变。
我们没有包含所有的设计模式。
设计模式实在是太多了、GoF的基础模式、Sun的J2EE模式、JSP模式、架构模式、
游戏设计模式.…我们希望这本书的重量能比读者的体重更轻，所以自然不可能
涵盖所有的设计模式。我们从GoF模式中，取出更重要的一部分模式，作为本书的
焦点，并确保你能够真正地、深入地、彻底地了解如何使用这些模式，以及何时
使用这些模式。对于GoF的其他模式，我们也会在附录中概略地介绍。我们相信，
读过本书之后，你可以很快地从其他资源中学到本书没有介绍的模式，并且游刃有
余。
书里的实践活动不是可有可无的。
这里的练习和实践活动并非可有可无的装饰和摆设：它们也是这本书核心内容的一
部分。其中有些练习和活动有助于记忆，有些则能够帮助你理解，还有一些对于如
何应用你所学的知识很有帮助。所以，请不要略过这些练习。填字游戏是你唯一可
以不理会的部分，但是它们可以帮助大脑回想本章的内容。
composition，而不是UML严格定义的composition。
当我们说“一个对象和另一个对象组合在一起”，我们的意思是“有一个”（HAS-
A）的关系。在一般的OO概念及GoF的书中，都是采用这样的用法。最近UML对于
composition有严谨的定义，如果你是UML专家，你还是可以读这本书，只是要注意
到此名词定义上的差异。
XXXIV引|子
---
## Page 18
引子
我们有意安排了许多重复，这些重复非常重要。
HeadFirst系列图书有一个与众不同的地方，这就是，我们希望你确确实实地掌握这些知
识。另外，我们希望在学完这本书之后你能记住学过了什么。尽管重复很有必要，不过，
多数参考书都不认为重复和回顾是一个重要的环节，但是在这本书里，你会看到一些概念
会一而再、再而三地出现很多次。
代码示例尽可能短小精悍。
有读者告诉我们，如果查了200行代码才能找到要理解的那两行代码，这是很让
人郁闷的。这本书里大多数示例往往都开门见山，作为上下文的代码会尽可能地
少，这样你就能一目了然地看到哪些东西是需要你学习的。别指望这些代码很健
壮，要知道这里的代码甚至是不完整的一一毕竟我们的代码是辅助学习之用，所以
不见得一定功能完整。
在某些例子中，我们井未将所有需要的package都import进来，但如果你是Java程序员，你
应该知道ArrayList类是属于java.utilpackage。如果package不属于J2SEAPI，我们会特别说
明。我们已经将所有的代码都放在网络上，可供下载。网址在：http://wickedlysmart.com/
headfirstdesignpatterns/code.html。
为了方便学习与测试程序，我们在书中并没有将我们的类放在package中（换句话说，所有
的类都是在Java默认的package中）。我们不建议你在真实世界中也这么做。如果你到我们
的网站下载代码，会发现这些类都放在适当的package中。
BrainPower”习题没有答案。
对于某些人来说，“BrainPower”习题没有对的答案：对于另-些人来说，动动脑习题所
带来的学习经验在于决定是否你的答案是对的，以及何时你的答案是对的。在某些动动脑
习题中，我们会提供暗示，为你指引正确的方向。
PDG
你现在的位置，XXXV
---
## Page 19
早期的审校团队
Valentin Crettax
技术审校群
JetCumps
Barney Matispini
Jke Vax Att4
本书狂热的审校团队
的无畏的队长
3ason Menard
Johannes dedong
Mark Spzitxlet
Dirk Scheckmann
xxxvi
引子
---
## Page 20
引子
怀念PhilippeMaquet
1960—2004
你那惊人的技术专长、不懈的热忧、为学习者的深思熟虑，
将永远激励我们。
我们永远缅怀你。
Philippe Magaet
致谢
致O'Reilly：
在O'Reilly我们对MikeLoukides致以最大的谢意，感谢他开始这一切，并将HeadFirst观念形成一个系列。对
HeadFirst幕后的推手TimO'Reilly致以衷心的感谢。感谢聪明的HeadFirst“系列之母”KyleHart，还有摇滚明
星EllieVolkhausen和她灵感十足的封面设计，还有ColleenGorman的核心编辑。最后，感谢MikeHendrickson支
持这本“设计模式”的书，并建立了整个的团队。
我们大无畏的审校者：
我们特别感谢技术审校的队长Johannes deJong。Johannes，你是我们的英雄。我们深深地感谢Javaranch 审校团
队共同管理者的贡献，已故的PhilippeMaquet，你以只手照亮了上千开发人员的生活，永远地影响了他们（还
有我们）的生活。
JefCumps总是能在我们的草拟章节中找出问题，并再三地造成本书巨幅的改变，谢了！Jef！
ValentinCretazz（专搞AOP的人），他从第一本HeadFirst开始就跟着我们，总是适时地提供我们刚好需要的技