the largest vendors can hardly be compelled to change their
functionality to be CSP-compliant, we nevertheless call on
them to adopt best practices and lead by example to ensure
that a wider-spread adoption of CSP is even feasible. It is
worth noting here that we discovered scripts from Twitter
to be a CSP roadblock for around 1,300 sites, forcing sites
to deploy unsafe-inline. Interestingly, their own CSP is
nonce-based, which would be incompatible with the code they
provide third parties. Hence, if third parties vetted the code
they provide to others as much as the one they run themselves,
the situation could quickly be remedied.
Furthermore, as far as SRI is concerned, we found that
many third parties make their scripts incompatible with SRI
for no good reason, e.g., through having a comment with the
timestamp in the response. Given that a single compromised
CDN poses a grave threat for hundreds of sites, we urge third
parties to make every effort to have SRI-compatible scripts.
B. Call to Action for Browser Vendors
Browser vendors move the Web’s security forward by
implementing novel security mechanisms. For example, while
the recent choice of Chrome to make cookies same-site by
default [6] may result in breakage, it largely solves prob-
lems such as CSRF, XSSI, or Clickjacking. As proposed
by Google’s Mike West, vendors may consider hiding new
features behind the deployment of security mechanisms [19],
such as sane CSP. While this has its upsides in ensuring that
newly developed code that wants to use these new features
has to be built in a CSP-compliant fashion, it may also have
an adverse affect on existing applications. In particular, if
third parties cause compliance issues, the ﬁrst party cannot
use the new features. Hence, while we support such incentive
structures, they should be deployed in line with mechanisms
such as First-Party Sets [9]. In this way, code from ﬁrst
parties could be allowed to access the new APIs without
having to deploy a sane CSP, whereas for third parties access
is only granted if a sane CSP is deployed. As Web sites
rely on their third parties for monetization,
the ﬁrst-party
developers then also have incentives to address their own
incompatibilities,
leading to an overall more secure Web.
Furthermore, given SRI’s inﬂexibility to deal with structurally
equivalent code with differing values, browser vendors should
consider adopting more relaxed pinning strategies such as the
one proposed by Soni et al. [28].
C. Developer Support: SMURF
In an ideal setting, every third-party script could provide a
security manifest, similar to browser extensions, that declara-
tively states the component’s security impact. In early steps for
such a measure, this could, e.g., start by simply stating which
domains may be involved in any inclusion or contain proposals
for a CSP which supports the component’s functionality needs.
However, until such a point is reached, we make the most
important components of our toolchain available as part of
SMURF [30]. With this, developers can analyze their sites to
a) understand how inclusions relate to each other, enabling
them to untangle which host introduced certain code into
their site. In addition, it b) allows to monitor the behavior of
all included code to understand if it causes incompatibilities
through the usage of eval or unsafe script additions. If used
during development time, this enables the ﬁrst party to gain
key insights into the security roadblocks which may be caused
by including third parties, potentially allowing them to choose
another vendor with similar functionality early on.
IX. LIMITATIONS
Our work relies on several assumptions about entities on
the Web and their incentives. We argue that a party should
be deﬁned by the business entity that operates its eTLD+1.
For bigger companies, such as Google, there likely are dif-
ferent
teams for individual products (such as Youtube or
Doubleclick), and hence, multiple teams would have to adjust
their coding practices. Nevertheless, a major player such as
Google could globally decide to adhere to more compatible
coding standards. Furthermore, our heuristics aim at identi-
fying co-occurrence patterns, which we use to manually draw
connections between two hostnames if they belong to the same
business entity. Even though such an approach is meaningful to
differentiate between ﬁrst and third parties and among different
third-parties, it should not blindly be used in other domains.
In particular, we do not want the main site and its sandbox
domain to be treated the same under the SOP, which would
severely threaten the integrity of the main site. Nonetheless,
our approach allows us to investigate the number of players
(including the ﬁrst parties) currently hindering a wide-spread
adoption of security mechanisms. Another clear limitation
of our approach comes from the imperfection of our used
heuristics, as outlined in our experiment in Section IV-B1.
While our manual analysis (which we assume to be correct
given our diligence) does not yield false positives (i.e., ﬂag two
domains from different parties as same-party), it does yield
false negatives. Prominently, this was the case for Alibaba’s
CDN and 2.4% of the 1,000 manually sampled inclusion pairs.
Hence, we may still incorrectly associate ﬁrst-party behavior
with a third party when relying solely on our heuristics paired
13
with manual vetting, yet believe this number to be small
enough given the error rate derived through our sampling to
be reasonably used on their own. For our used notion of an
eSP, we have augmented the same-entity pairs found by us
with relations from curated lists containing hostname to entity
mappings available online [14], to enhance the precision of
our results further. Unfortunately, we could show that solely
relying on such lists does not sufﬁce for our use-case.
Second, our hypothetical analysis assumes that a ﬁrst party
wants to deploy CSP in the ﬁrst place. However, the site
in question may not have any user-speciﬁc data, making an
XSS attack less damning. Furthermore, we do not imply that
a ﬁrst party would deploy CSP right away after all of its
third-party resources are compatible. As shown by Roth et al.
[27], even high-proﬁle sites like Flickr struggle for years with
their deployment. However, the task is made even harder if
the ﬁrst party needs to convince its third parties to produce
compliant code or switch third-party providers altogether.
Similarly, for SRI, we analyze its deployability from the ﬁrst
party’s standpoint, who may want to pin all of its resources.
This may be in stark contrast to what the third-party provider
wants to do, as they may want to disallow SRI usage to enable
the seamless rollout of new library versions.
Third, our manual approach to grouping eTLD+1s that
belong to the same party makes it hard for others to build
on our results. Unfortunately, our attempts at automating this
process proved to produce incorrect results (both in terms of
false positives and negatives). To allow others to build on our
work, we release the labeled set of same-party domains as
identiﬁed by our work [30].
Finally, our analysis focuses on the top 10,000 Web sites
and may not be accurate to represent the entire Web. We favor
depth over breadth since our research relies on a holistic view
of the checked sites. In addition, the longitudinal aspect means
that lower-ranked sites that go ofﬂine could signiﬁcantly skew
the data. Nevertheless, it may well be the case that lower-
ranked sites include incompatible code less often. We still
believe that the process of deploying CSP and SRI (even for
lower-ranked sites) would be eased signiﬁcantly if the third
parties of the major sites we analyzed in this paper would
adhere to compliant coding practices.
X. RELATED WORK
CSP & SRI: Content Security Policy has been the subject
of many studies over the years. In 2014, Weissbacher et al.
[40] conducted a longitudinal analysis of CSP deployment,
showing virtually no adoption. While follow-up studies from
Weichselbaum et al. [39] and Calzavara et al. [3] indicated an
increase in CSP deployment, they both independently showed
the vast majority of policies are insecure. Most recently,
Roth et al. [27] analyzed the historical evolution of CSPs
for 10,000 sites, documenting how site operators struggle to
secure their CSPs, and often either give up entirely; or fall
back to trivially bypassable policies. While attempts have
been made to ease the deployment of CSP through automatic
generation [24], this has also not caused a signiﬁcant uptick.
14
Regarding SRI, Chapuis et al. [4] conducted a longitudinal
analysis of SRI deployment. While their results indicate an
increasing deployment, they more importantly document this is
mostly related to widely-used libraries such as jQuery having
example code with SRI.
With respect to detecting third-party hosting, Matic et al.
[17] proposed to use RDAP information about the resolved IPs
While our analysis cannot conclusively point the ﬁnger at
third parties, we documented that even in case a ﬁrst party is
willing to make the effort to secure their site with CSP and
SRI, they are blocked by third parties. Especially for CSP, we
believe this explains the lack of deployment and struggle to
deploy a meaningful policy for existing applications. Our work
is the ﬁrst to speciﬁcally document the incompatible behavior
exhibited by third-party code,
impairing CSP deployment.
Furthermore, for SRI we highlight that in particular scripts
with a high reach (such as Facebook with almost 10% of the
sites in our dataset) are often incompatible with SRI due to
minuscule, random modiﬁcations.
Script Inclusion Practices & Third-Party Analyses: The
security impact of third parties has been the subject of research
since at least 2012. Back then, Nikiforakis et al. [22] measured
the script inclusion behavior of the Top 10,000 Web sites
showing that ﬁrst-party inclusion decisions can vastly impact
the security of the including site. While this study examines
the included resources based on their origin, work from Yue
and Wang [41] also investigated the structural properties of
dynamically added code. Kumar et al. [10] started to focus
more on the structure of such script inclusions and introduced
the concept of implicit trust. They furthermore show that a
quarter of the top 1 million sites are blocked from deploying
HTTPS due to their inclusions. The risks of including outdated
libraries were analyzed by Lauinger et al. [11], showing that
37% of the top 75,000 sites include at least one library con-
taining a vulnerability. The dangers associated with malicious
links contained in such inclusion chains were highlighted by
Arshad et al. [2]. To tackle this problem, they proposed an
in browser-solution detecting malicious links, thus, protecting
end-users. In 2019, Ikram et al. [8] investigated how often
malicious inclusions happen over implicit trust relations in the
Alexa top 200,000. Based on their longitudinal analysis, they
ﬁnd that 95% of included parties carry over to the next day.
Musch et al. [21] highlighted the threat of third-party caused
XSS vulnerabilities and provided a client-side library that
automatically mitigates all third-party caused vulnerabilities.
All of these works have made assumptions about parties
based on eTLD+1s. While the impact of our ﬁndings is limited
for the work from Nikiforakis et al. [22], all other works
have reasoned about indirect or delegated trust; meaning that
our ﬁndings indicate their over-approximation of the problem
space. We note again that our analysis has revealed that had
we taken the old notion of trust delegations (longest chains
and eTLD+1), we would have incorrectly ﬂagged 34% of our
dataset as having delegations, where there are actually none.
Hence, we highlight the need for a careful analysis of involved
parties, and to move away from eTLD+1 as an indicator.
of sites as well as information extracted from the startpages to
detect hosting environments. In particular, they investigate if
a given site is self-hosted or via a CDN/third party. We exper-
imented with automated clustering based on common names
of TLS certiﬁcates and the IP ranges of involved domains.
However, both approaches yielded imprecise results, both in
terms of missing connections (such as newrelic.com and
their CDN nr-data.net) as well as incorrect clusters (such
as different parties hosted by Cloudﬂare). The same restriction
applies to the approach of Matic et al. [17]. Hence, while
our manual clustering does not necessarily catch all parties
correctly,
it does not draw false conclusions by grouping
domains that do not belong together.
XI. CONCLUSION
In this paper, we analyzed to what extent ﬁrst parties, who
are willing to change their own code base, can meaningfully
secure their sites through CSP and SRI. Based on our new
notions of the same party and delegation of trust, we found
that third parties are major roadblocks for security. For CSP,
they often introduce new delegated hosts, requiring the ﬁrst
party to potentially add entire eTLD+1s to their policies. At the
same time, the ﬂuctuation in included parties means that the
ﬁrst party needs to continually remove entries from their CSP
to maintain the principle of least privilege. Furthermore, third
parties play a major role in necessitating unsafe-inline
and unsafe-eval, both in our hypothetical analysis as
well as in the wild. And while updating the host-based CSP
could be eased by the deployment of strict-dynamic,
third parties provide code that is incompatible either due to
parser-inserted script addition or through using inline events.
Regarding SRI, we ﬁnd that high-proﬁle parties often random-
ize minuscule parts of their scripts, which actively hinders
pinning. What is more, real-world evidence shows that pinned
scripts often include unpinned code from additional, delegated
sources, undermining the entire security of SRI.
Arguably, ﬁrst parties have a signiﬁcant
task ahead in
ensuring their own compatibility, especially with CSP. How-
ever, even having done so, the majority of them are unable
to outsource non-core business needs and deploy security
mechanisms at the same time. This leaves them in a no-
win situation in which either security can be enforced or
functionality preserved. While the former would require them
to implement all functionality themselves, choosing the latter
leaves them subject to security-sensitive decisions taken by
third parties, which themselves face no repercussions when
providing code that is incompatible with security mechanisms.
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for their
valuable feedback. The authors gratefully acknowledge fund-
ing by the Deutsche Forschungsgemeinschaft (DFG, German
Research Foundation) under Germany’s Excellence Strategy -
EXC 2092 CASA - 390781972.
15
REFERENCES
[1] April King. Analysis of the Alexa Top 1M sites.
Online https://pokeinthe.io/2019/04/04/state-of-security-
alexa-top-one-million-2019-04/, April 2019.
[2] Sajjad Arshad, Amin Kharraz, and William Robertson.
Include me out: In-browser detection of malicious third-
party content inclusions. In Financial Crypto, 2016.
[3] Stefano Calzavara, Alvise Rabitti, and Michele Bugliesi.
Content security problems? evaluating the effectiveness
of content security policy in the wild. In CCS, 2016.
[4] Bertil Chapuis, Olamide Omolola, Mathias Humbert,
Mauro Cherubini, and K´evin Huguenin. An empirical
study of the use of integrity veriﬁcation mechanisms for
web subresources. In TheWebConf, 2020.
[5] Mauro Cherubini, Alexandre Meylan, Bertil Chapuis,
Mathias Humbert, Igor Bilogrevic, and K´evin Huguenin.
Towards usable checksums: Automating the integrity
veriﬁcation of web downloads for the masses. In CCS,
2018.
[6] Chrome Platform Status. Cookies default
to same-
site=lax. Online https://www.chromestatus.com/feature/
5088147346030592.
[7] ECMA international. ECMAScript 2017 Language Spec-
Online https://www.ecma-international.org/
iﬁcation.
ecma-262/8.0/index.html, 2017.
[8] Muhammad Ikram, Rahat Masood, Gareth Tyson, Mo-
hamed Ali Kaafar, Noha Loizon, and Roya Ensaﬁ. The
chain of implicit trust: An analysis of the web third-party
resources loading. In The Web Conference, 2019.
[9] krgovind. First-party sets. Online https://github.com/
krgovind/ﬁrst-party-sets, 2019.
[10] Deepak Kumar, Zane Ma, Zakir Durumeric, Ariana
Mirian, Joshua Mason, J Alex Halderman, and Michael
Bailey. Security challenges in an increasingly tangled
web. In WWW, 2017.
[11] Tobias Lauinger, Abdelberi Chaabane, Sajjad Arshad,
William Robertson, Christo Wilson, and Engin Kirda.
Thou shalt not depend on me: Analysing the use of
outdated javascript libraries on the web. In NDSS, 2017.
[12] Victor Le Pochat, Tom Van Goethem, Samaneh Tajal-
izadehkhoob, Maciej Korczy´nski, and Wouter Joosen.
Tranco: A research-oriented top sites ranking hardened
against manipulation. In NDSS, 2019.
[13] Timothy Libert. An automated approach to auditing dis-
closure of third-party data collection in website privacy
policies. In WWW, 2018.
[14] Timothy Libert. webXray Domain Owner List. Online
https://web.archive.org/web/20200604213008if /https:
//github.com/timlib/webXray Domain Owner List/
blob/master/domain owners.json, 2020.
[15] Timothy Libert. webXray. Online https://webxray.org/,
2020.
[16] Lukas Weichselbaum and Michele
Spagnuolo.
CSP - A Successful Mess Between Hardening
and Mitigation.
https://static.sched.com/
Online
hosted ﬁles/locomocosec2019/db/CSP%20-%20A%
20Successful%20Mess%20Between%20Hardening%
20and%20Mitigation%20%281%29.pdf.
[17] Srdjan Matic, Gareth Tyson, and Gianluca Stringhini.
Pythia: a framework for the automated analysis of web
hosting environments. In TheWebConf, 2019.
[18] William Melicher, Anupam Das, Mahmood Sharif, Lujo
Bauer, and Limin Jia. Riding out domsday: Toward
detecting and preventing dom cross-site scripting.
In
NDSS, 2018.
[19] Mike West. Securer Contexts. Online https://github.com/
mikewest/securer-contexts, February 2020.
[20] Mozilla Developer Network.
Subresource Integrity.
https://developer.mozilla.org/en-US/docs/Web/
Online
Security/Subresource Integrity, March 2019.
[21] Marius Musch, Marius Steffens, Sebastian Roth, Ben
Stock, and Martin Johns. Scriptprotect: Mitigating unsafe
third-party javascript practices. In ASIACCS, 2019.
[22] Nick Nikiforakis, Luca Invernizzi, Alexandros Kaprav-
elos, Steven Van Acker, Wouter Joosen, Christopher
Kruegel, Frank Piessens, and Giovanni Vigna. You