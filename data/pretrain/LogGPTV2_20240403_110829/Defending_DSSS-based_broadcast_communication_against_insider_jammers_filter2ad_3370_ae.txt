# Expected Number of Seed Candidates under DoS Attacks

Figure 10 illustrates the expected number of seed candidates for a normal receiver under DoS attacks against seed disclosure. The parameters used are \( n = 4, 9, 25, 49, 81, 121, 169 \), \( l_s = 64 \), and \( |C_e| = \left\lfloor \frac{|C_p|}{2} \right\rfloor \).

The expected number of seed candidates caused by a one-or-more-bit-delay jammer is given by:
\[
(1 + 2p^2)(1 + p^2)E_3 + (p^4 + 2p^2)(1 + p^2)E'_3,
\]
where
\[
E_3 = \frac{1 + p^4}{l_s - 3} \left( \frac{\lambda_1 - \lambda_2}{\lambda_1 - 2p^5} \cdot \frac{(2p^5 - \lambda_2)(1 - \lambda)}{1 - \lambda_1} + \frac{\lambda_1 - \lambda_2}{\lambda_1 - 2p^5} \cdot \frac{(\lambda_1 - 2p^5)(1 - \lambda)}{1 - \lambda_1} + p^4 \right),
\]
\[
E'_3 = \frac{2p^5 - \lambda_2}{\lambda_1 - \lambda_2} \cdot \lambda^{l_s - 3} \left( \frac{(n+1)^2(n+2)^2}{2} \right),
\]
\[
p^2 = \frac{1}{|C_p|}, \quad p^4 = \frac{2}{n+2}, \quad \lambda_1, \lambda_2 = \frac{1 + p^5 \pm \sqrt{(1 + p^5)^2 - 4(1 - p^4)p^5}}{2}, \quad p^5 = \frac{2n(n+3)}{2}.
\]

## Comparison of Jamming Impacts

Figure 10 compares the expected numbers of seed candidates caused by non-despreading, real-time, and one-bit-delay jammers when they launch DoS attacks against seed disclosure. The more seed candidates the receiver has, the higher the computational cost required to receive a message. Among the three types of jammers, the real-time jammer has the highest impact. However, this impact is limited when \( n \) is reasonably large. For \( n \geq 49 \), the number of seed candidates is below 10 for all jammers. The non-despreading jammer and the one-bit-delay jammer do not introduce much overhead to the receiver. Specifically, the expected number of seed candidates by the non-despreading jammer is below 4 when \( n \geq 9 \), and the expected number of seed candidates by the one-bit-delay jammer is below 1.5 when \( n \geq 9 \). When \( n = 169 \), the expected number of seed candidates for non-despreading, real-time, and one-bit-delay jammers are 2, 2.87, and 1.01, respectively. The lines in Figure 10 represent conservative estimates of the upper bounds of the expected impact these jammers can introduce.

Compared to the basic DSD-DSSS scheme, where a jammer can introduce \( 2l_s \) seed candidates (e.g., \( 2^{64} \) seed candidates using the same parameters in Figure 10), the content-based code subset selection scheme significantly reduces the impact of DoS attacks against seed disclosure. This provides effective defense against such DoS attacks.

## Experimental Evaluation

We implemented a prototype of DSD-DSSS using GNU Radio [1] with Universal Software Radio Peripherals (USRPs) and XCVR2450 daughter boards [12]. Our implementation includes both the basic DSD-DSSS scheme (DSD-DSSS BASIC) and the enhanced DSD-DSSS with content-based code subset selection (DSD-DSSS SUBSET). We also implemented DSSS [6] and UDSSS [15] as references in our experimental evaluation.

In our experiments, we used two USRPs with XCVR2450 daughter boards, one as the sender and the other as the receiver. The sender was connected to a laptop (Intel Core 2 Duo @ 2.6GHz), and the receiver was connected to a desktop PC (Intel Pentium 4 @ 3.2GHz), both through 480 Mbps USB 2.0 links. Both the laptop and the desktop ran Ubuntu 9.04 and GnuRadio 3.2. The payload size in the spreading/despreading module was configured to be 256, 512, or 1024 bits. We measured the receiver’s average despreading time of a message for 200 rounds. Since messages were sent consecutively, the despreading of all messages after the first message was automatically synchronized (i.e., knowing the starting chip of each message). For DSD-DSSS, we set the seed size as 64 bits and used SAS v9.1.3 [17] to generate BIBD subsets of \( C_p \). We used SHA-1 as the pseudo-random number generator for both DSD-DSSS and UDSSS schemes.

### Despreading Time Analysis

Figure 11(a) shows the average despreading time of a message for DSD-DSSS BASIC, DSD-DSSS SUBSET, UDSSS, and DSSS schemes when using different sizes of code sets. For DSD-DSSS, \( |C_p| = n^2 + n + 1 \) and \( |C_e| = \left\lfloor \frac{|C_p|}{2} \right\rfloor \), where \( n \in [2, 20] \). For UDSSS, the number of code sequences is the same as the number of codes in \( |C_p| \). As shown in Figure 11(a), DSSS is the most efficient scheme because it uses only one code sequence to despread messages. UDSSS is slower than DSSS since it has to check the first code of all code sequences.

UDSSS is more efficient than DSD-DSSS because DSD-DSSS has to check \( 64 \cdot |C_e| = 64 \cdot \left\lfloor \frac{n^2 + n + 1}{2} \right\rfloor \) codes for the BASIC scheme and \( 63 \cdot (n + 1) + |C_e| = 63 \cdot (n + 1) + \left\lfloor \frac{n^2 + n + 1}{2} \right\rfloor \) codes for the SUBSET scheme, while UDSSS only needs to check \( |C_p| = n^2 + n + 1 \) codes. DSD-DSSS BASIC always has the largest number of codes to check. DSD-DSSS SUBSET has a larger number of codes to check than UDSSS when \( n < 126 \) (i.e., \( |C_p| < 16003 \)). When \( n \geq 126 \), DSD-DSSS SUBSET would be even more efficient than UDSSS. However, we cannot run the evaluation for \( n \geq 126 \) due to the large computational power requirement.

Figure 11(b) shows the average despreading time of a message for different code lengths (\( l = 24, 32, 40, 48, 56 \)). It is evident that all DSD-DSSS, UDSSS, and DSSS need more time to despread messages when the code length increases. The despreading time of DSD-DSSS BASIC increases much faster than that of other schemes due to the much larger search space of codes. DSSS remains the most efficient scheme, and UDSSS is more efficient than DSD-DSSS. Although UDSSS is faster than DSD-DSSS in both Figure 11(a) and Figure 11(b), UDSSS suffers from reactive jamming attacks [15], while DSD-DSSS does not.

## Related Work

Spread spectrum wireless communication techniques, including DSSS and FH, have been commonly used for anti-jamming communication [6]. However, traditional spread spectrum techniques require pre-shared secret keys and are not suitable for broadcast communication where there may be compromised or malicious receivers. We have discussed the most closely related works in the introduction, including UFH and its variations [18–20], UDSSS [14, 15], and BBC [2, 3]. An idea similar to ours was proposed in [7], but it targets pairwise communication and does not provide seed protection as in our scheme. RD-DSSS provides anti-jamming capability by encoding each bit of data using the correlation of unpredictable spreading codes [11].

Other related work includes approaches for detecting jamming attacks [23], identifying insider jammers [4, 5], mitigating jamming of control channels [9, 21], jamming avoidance and evasion [2, 22, 24], and mitigating jamming in sensor networks [10, 22]. Our technique is complementary to these techniques.

## Conclusion

In this paper, we proposed DSD-DSSS, an efficient anti-jamming broadcast communication scheme. It achieves anti-jamming capability by randomly generating the spreading code sequence for a broadcast message through a random seed and delaying the disclosure of the seed at the end of the message. We also developed an effective protection for the disclosure of the random seed through content-based code subset selection. Our analysis demonstrated that this suite of techniques can effectively defeat jamming attacks. Our implementation and evaluation show the feasibility of DSD-DSSS in real-world scenarios. We measured the performance of DSD-DSSS without jamming attacks due to time limitations. Although DSD-DSSS is slower than UDSSS without jamming attacks, DSD-DSSS may be faster than UDSSS in the presence of jammers. We will verify this in future work.

## References

[1] GNU Radio - The GNU Software Radio. http://www.gnu.org/software/gnuradio/.

[2] L. Baird, W. Bahn, and M. Collins. Jam-resistant communication without shared secrets through the use of concurrent codes. Technical report, US Air Force Academy, 2007.

[3] L. C. Baird, W. L. Bahn, M. D. Collins, M. C. Carlisle, and S. C. Butler. Keyless jam resistance. In Proceedings of the IEEE Information Assurance and Security Workshop, pages 143–150, June 2007.

[4] J. Chiang and Y. Hu. Extended abstract: Cross-layer jamming detection and mitigation in wireless broadcast networks. In Proceedings of ACM International Symposium on Mobile Ad Hoc Networking and Computing (MobiHoc ’07), 2007.

[5] J. Chiang and Y. Hu. Dynamic jamming mitigation for wireless broadcast networks. In Proceedings of IEEE International Conference on Computer Communications (INFOCOM ’08), 2008.

[6] A. Goldsmith. Wireless Communications. Cambridge University Press, August 2005.

[7] T. Jin, G. Noubir, and B. Thapa. Zero pre-shared secret key establishment in the presence of jammers. In Proceedings of MobiHoc ’09, May 2009.

[8] D. L. Kreher and D. Stinson. Combinatorial Algorithms: Generation, Enumeration, and Search. CRC Press, 1999.

[9] L. Lazos, S. Liu, and M. Krunz. Mitigating control-channel jamming attacks in multi-channel ad hoc networks. In Proceedings of 2nd ACM Conference on Wireless Networking Security (WiSec ’09), March 2009.

[10] M. Li, I. Koutsopoulos, and R. Poovendran. Optimal jamming attacks and network defense policies in wireless sensor networks. In Proceedings of IEEE International Conference on Computer Communications (INFOCOM ’07), 2007.