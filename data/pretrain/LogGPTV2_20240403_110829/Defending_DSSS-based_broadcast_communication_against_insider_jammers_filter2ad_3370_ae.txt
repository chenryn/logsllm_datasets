^

ϭϬϬϬϬϬ
ϭϬϬϬϬ
ϭϬϬϬ
ϭϬϬ
ϭϬ
ϭ
ŶŽŶͲĚĞƐƉƌĞĂĚŝŶŐ
ƌĞĂůͲƚŝŵĞ
ϭŽƌŵŽƌĞďŝƚƐĚĞůĂǇ
ϰ
ϴ
ϭϲ
ϯϮ
ϲϰ
ϭϮϴ
Ŷ
Figure 10: Expected number of seed candidates for nor-
mal receiver under DoS attacks against seed disclosure (n =
4, 9, 25, 49, 81, 121, 169; ls = 64; |Ce| = l |Cp|
2 m)
and that caused by one-or-more-bit-delay jammer is smaller than
(1 + 2p2)(1 + p2)E3 + (p4 + 2p2)(1 + p2)E′
3, where
E3 = 1+ p4
ls−3
1
)
λ1−λ2 · (2p5−λ2)(1−λ
+ λ1−2p5
1−λ1
λ1−λ2 · (λ1−2p5)(1−λ
+ p4
, p2 = 1
1−λ2
|Cp| , p4 = 2
n+2 ,
ls−3
2
)
,
E′
3 = 2p5−λ2
λ1−λ2 · λls−3
(n+1)2(n+2)2 , λ1, λ2 = 1+p5±√(1+p5)2−4(1−p4)p5
λ1−λ2 · λls−3
2
2
1
p5 = 2n(n+3)
.
Comparison: Figure 10 shows the expected numbers of seed
candidates caused by non-despreading, real-time, and one-bit-delay
jammers when they launch DoS attacks against seed disclosure.
The more seed candidates the receiver has, the more computational
cost the receiver has to spend receiving a message. Among three
of them, the real-time jammer has the highest impact. However,
it is still limited when n is reasonably large. The number of seed
candidates is below 10 for all jammers when n ≥ 49. The non-
despreading jammer and the one-bit-delay jammers do not intro-
duce much overhead to the receiver. The expected number of seed
candidates by the non-despreading jammer is below 4 when n ≥ 9.
The expected number of seed candidates by the one-bit-delay jam-
mer is below 1.5 when n ≥ 9. When n = 169, the expected
number of seed candidates of non-despreading, real-time, and one-
bit-delay jammers are only 2, 2.87, and 1.01, respectively. Note that
the lines shown in Figure 10 are conservative estimates showing the
upper bound of the expected impact these jammers can introduce.
Compared with the basic DSD-DSSS scheme, in which the jam-
mer can introduce 2ls seed candidates (e.g., 264 seed candidates
using the same parameters in Figure 10), the content-based code
subset selection scheme has signiﬁcantly reduced the impact of the
DoS attacks against seed disclosure. Thus, it provides effective de-
fense against such DoS attacks.
6. EXPERIMENTAL EVALUATION
We have implemented a prototype of DSD-DSSS based on GNU
Radio [1] using Universal Software Radio Peripherals (USRPs)
with XCVR2450 daughter boards [12]. Our implementation in-
cludes both the basic DSD-DSSS scheme (named DSD-DSSS BA-
SIC) and the enhanced DSD-DSSS with content-based code sub-
set selection (named DSD-DSSS SUBSET). We have also imple-
mented DSSS [6] and UDSSS [15] as references in our experimen-
tal evaluation.
In our experiments, we used two USRPs with XCVR2450 daugh-
ter boards, one as the sender, and the other as the receiver. The
sender was connected to a laptop (Intel Core 2 Duo @ 2.6GHz),
while the receiver was connected to a desktop PC (Intel Pentium
4 @ 3.2GHz), both through 480 Mbps USB 2.0 links. Both the
laptop and the desktop ran Ubuntu 9.04 and GnuRadio 3.2. The
payload size in spreading/despreading module was conﬁgured to
be 256, 512, or 1024 bits. We measured the receiver’s average de-
spreading time of a message for 200 rounds. Since messages were
sent consecutively, the despreading of all messages after the ﬁrst
message was automatically synchronized (i.e., knowing the start-
ing chip of each message). For DSD-DSSS, we set the seed size
as 64 bits and used SAS v9.1.3 [17] to generate BIBD subsets of
Cp. We used SHA-1 to as the pseudo-random number generator
for both DSD-DSSS and UDSSS schemes.
2
Figure 11(a) shows the average despreading time of a message
for DSD-DSSS BASIC, DSD-DSSS SUBSET, UDSSS, and DSSS
schemes when using different size of code set. For DSD-DSSS,
|Cp| = n2 + n + 1, |Ce| = l |Cp|
2 m, where n ∈ [2, 20]. For
UDSSS, the number of code sequences is the same as the number
of codes in |Cp|. As Figure 11(a) shows, DSSS is the most efﬁcient
scheme because only one code sequence is used to despread mes-
sages. UDSSS is slower than DSSS since it has to check the ﬁrst
code of all code sequences.
UDSSS is more efﬁcient than DSD-DSSS because DSD-DSSS
has to check 64 · |Ce| = 64 · l |n2+n+1
m codes for BASIC scheme
and 63 · (n + 1) + |Ce| = 63 · (n + 1) + l n2+n+1
m codes for
SUBSET scheme, while UDSSS only needs to check |Cp| = n2 +
n + 1 codes. DSD-DSSS BASIC always has the largest number of
codes to check. DSD-DSSS SUBSET scheme has larger number of
codes to check than UDSSS when n < 126 (i.e., |Cp| < 16003).
When n ≥ 126, DSD-DSSS SUBSET scheme would be even more
efﬁcient than UDSSS. However, we cannot run the evaluation for
n ≥ 126 due to the large computational power requirement.
Figure 11(b) shows the average despreading time of a message
for different code lengths (l = 24, 32, 40, 48, 56). It is obvious
that all DSD-DSSS, UDSSS, and DSSS need more time to de-
spread messages when the code length is increased. The despread-
ing time of DSD-DSSS BASIC increases much faster than that of
other schemes due to the much larger search space of codes. DSSS
is still the most efﬁcient scheme, and UDSSS is more efﬁcient than
DSD-DSSS. Although UDSSS is faster than DSD-DSSS in both
Figure 11(a) and Figure 11(b), UDSSS suffers from the reactive
jamming attack [15] while DSD-DSSS does not.
2
7. RELATED WORK
Spread spectrum wireless communication techniques, including
DSSS and FH, have been commonly used for anti-jamming com-
munication [6]. However, as discussed earlier, traditional spread
spectrum techniques all require pre-shared secret keys, and are not
suitable for broadcast communication where there may be com-
promised or malicious receivers. We have discussed most closely
related works in the introduction, including UFH and its varia-
tions [18–20], UDSSS [14, 15], and BBC [2, 3]. We do not re-
peat them here. An idea similar to ours was also proposed in [7];
however, it is targeted at spread spectrum based pairwise commu-
nication, and does not provide the protection of seed as in our
scheme. RD-DSSS provides the anti-jamming capability by encod-
ing each bit of data using the correlation of unpredictable spreading
codes [11].
There are other related work, including approaches for detecting
jamming attacks [23], identifying insider jammers [4,5], mitigating
jamming of control channels [9, 21], jamming avoidance and eva-
sion [2,22,24], and mitigating jamming in sensor networks [10,22].
Our technique is complementary to these techniques.
10
1
0.1
)
s
m
(
e
m
T
i
0.01
0
50
100
200
150
Number of codes in code set (|Cp|)
350
250
300
400
BASIC (|M|=256)
BASIC (|M|=512)
BASIC (|M|=1024)
SUBSET (|M|=256)
SUBSET (|M|=512)
SUBSET (|M|=1024)
UDSSS (|M|=256)
UDSSS (|M|=512)
UDSSS (|M|=1024)
DSSS (|M|=256)
DSSS (|M|=512)
DSSS (|M=1024|)
450
1.4
1.2
1
0.8
0.6
0.4
0.2
)
s
m
(
e
m
T
i
0
16
(a) for different code set sizes (l = 32)
BASIC (|M|=256)
BASIC (|M|=512)
BASIC (|M|=1024)
SUBSET (|M|=256)
SUBSET (|M|=512)
SUBSET (|M|=1024)
UDSSS (|M|=256)
UDSSS (|M|=512)
UDSSS (|M|=1024)
DSSS (|M|=256)
DSSS (|M|=512)
DSSS (|M=1024|)
24
32
40
48
56
64
Code length (l)
(b) for different code lengths (|Cp| = 111)
Figure 11: Comparison of time to despread message in DSSS, UDSSS, and DSD-DSSS
[11] Y. Liu, P. Ning, H. Dai, and A. Liu. Randomized differential dsss:
Jamming-resistant wireless broadcast communication. In
Proceedings of the 2010 IEEE INFOCOM, 2010.
[12] Ettus Research LLC. The USRP product family products and
daughter boards. http://www.ettus.com/products.
Accessed in August 2010.
[13] R. Poisel. Modern Communications Jamming Principles and
Techniques. Artech House Publishers, 2006.
[14] Pöpper, M. Strasser, and S. ˇCapkun. Anti-jamming broadcast
communication using uncoordinated spread spectrum techniques.
IEEE Journal on Selected Areas in Communications: Special Issue
on Mission Critical Networking, 2010.
[15] C. Pöpper, M. Strasser, and S. ˇCapkun. Jamming-resistant broadcast
communication without shared keys. In Proceedings of the USENIX
Security Symposium, 2009.
[16] J. Proakis. Digital Communications. McGraw-Hill, August 2000.
[17] SAS. Business analytics and business intelligence software.
http://www.sas.com.
[18] D. Slater, P. Tague, R. Poovendran, and B. Matt. A coding-theoretic
approach for efﬁcient message veriﬁcation over insecure channels. In
Procceedings of the 2nd ACM Conference on Wireless Networking
Security (WiSec ’09), pages 151–160, March 2009.
[19] M. Strasser, C. Pöper, S. ˇCapkun, and M. ˇCagalj. Jamming-resistant
key establishment using uncoordinated frequency hopping. In
Proceedings of the 2008 IEEE Symposium on Security and Privacy,
pages 64–78, 2008.
[20] M. Strasser, C. Pöpper, and S. ˇCapkun. Efﬁcient uncoordinated
FHSS anti-jamming communication. In Procceedings of MobiHoc
’09, May 2009.
[21] P. Tague, M. Li, and R. Poovendran. Probabilistic mitigation of
control channel jamming via random key distribution. In Proceedings
of IEEE 18th International Symposium on Personal, Indoor and
Mobile Radio Communications (PIMRC ’07), pages 1–5, 2007.
[22] W. Xu, W. Trappe, and Y. Zhang. Channel surﬁng: Defending
wireless sensor networks from jamming and interference. In
Proceedings of the 6th International Conference on Information
Processing in Sensor Networks (IPSN ’07), 2007.
[23] W. Xu, W. Trappe, Y. Zhang, and T. Wood. The feasibility of
launching and detecting jamming attacks in wireless networks. In
Proceedings of ACM International Symposium on Mobile Ad Hoc
Networking and Computing (MobiHoc ’05), 2005.
[24] W. Xu, T. Wood, W. Trappe, and Y. Zhang. Channel surﬁng and
spatial retreats: Defenses against wireless denial of service. In
Proceedings of the 3rd ACM Workshop on Wireless Security (WiSe
’04), 2004.
8. CONCLUSION
In this paper, we proposed DSD-DSSS, an efﬁcient anti-jamming
broadcast communication scheme. It achieves anti-jamming capa-
bility through randomly generating the spreading code sequence
for a broadcast message through a random seed and delaying the
disclosure of the seed at the end of the message. We also devel-
oped an effective protection for the disclosure of the random seed
through content-based code subset selection. Our analysis in this
paper demonstrated that this suite of techniques can effectively de-
feat jamming attacks. Our implementation and evaluation shows
the feasibility of DSD-DSSS in real world. We measured the per-
formance of DSD-DSSS without jamming attacks due to the time
limitation. Although DSD-DSSS is slower than UDSSS without
jamming attacks, DSD-DSSS may be faster than UDSSS in pres-
ence of jammers. We will verify this in our future work.
9. REFERENCES
[1] GNU Radio - The GNU Software Radio.
http://www.gnu.org/software/gnuradio/.
[2] L. Baird, W. Bahn, and M. Collins. Jam-resistant communication
without shared secrets through the use of concurrent codes. Technical
report, US Air Force Academy, 2007.
[3] L. C. Baird, W. L. Bahn, M. D. Collins, M. C. Carlisle, and S. C.
Butler. Keyless jam resistance. In Proceedings of the IEEE
Information Assurance and Security Workshop, pages 143–150, June
2007.
[4] J. Chiang and Y. Hu. Extended abstract: Cross-layer jamming
detection and mitigation in wireless broadcast networks. In
Proceedings of ACM International Symposium on Mobile Ad Hoc
Networking and Computing (MobiHoc ’07), 2007.
[5] J. Chiang and Y. Hu. Dynamic jamming mitigation for wireless
boradcast networks. In Proceedings of IEEE International
Conference on Computer Communications (INFOCOM ’08), 2008.
[6] A. Goldsmith. Wireless Communications. Cambridge University
Press, August 2005.
[7] T. Jin, G. Noubir, and B. Thapa. Zero pre-shared secret key
establishment in the presence of jammers. In Procceedings of
MobiHoc ’09, May 2009.
[8] D. L. Kreher and D. Stinson. Combinatorial Algorithms: Generation,
Enumeration, and Search. CRC Press, 1999.
[9] L. Lazos, S. Liu, and M. Krunz. Mitigating control-channel jamming
attacks in multi-channel ad hoc networks. In Proceedings of 2nd
ACM Conference on Wireless Networking Security (WiSec ’09),
March 2009.
[10] M. Li, I. Koutsopoulos, and R. Poovendran. Optimal jamming attacks
and network defense policies in wireless sensor networks. In
Proceedings of IEEE International Conference on Computer
Communications (INFOCOM ’07), 2007.
View publication stats
View publication stats