# PostgreSQL 优化指南

## 超时设置
- **statement_timeout**  
  - 语句超时，防止雪崩。
- **lock_timeout**  
  - 锁超时。
- **deadlock_timeout**  
  - 死锁超时。
- **idle_in_transaction_session_timeout**  
  - 空闲事务会话超时。

### 操作建议
- 为了防止由锁等待引发的DDL操作导致的系统雪崩，可以使用以下方法：
  - **锁等待机制介绍**
    - [详细说明](https://github.com/digoal/blog/blob/master/201705/20170521_01.md)
  - **DDL、大锁建议**
    ```sql
    BEGIN;
    SET lock_timeout = 'ns';
    -- 执行DDL操作
    END;
    ```

## 表切换
- 参考文档：[表切换指南](https://github.com/digoal/blog/blob/master/201807/20180725_04.md)

## 性能分析工具
- **当前等待事件透视**
  - [文档链接](https://www.postgresql.org/docs/devel/static/monitoring-stats.html#MONITORING-STATS-VIEWS)
- **PPAS AWR报告**
  - 包含等待时间统计报告
- **性能分析利器**
  - [perf insight](https://github.com/digoal/blog/blob/master/201901/20190125_02.md)

## 数据库优化
- **擒贼先擒王（TOP SQL）**
- **SQL执行计划分析与优化**
- **数据库内核代码层瓶颈分析**
- **慢SQL定位与优化**
- **数据库活动信息跟踪参数**
- **锁等待问题定位**
- **等待事件透视**
- **全面健康报告**
- **索引接口的选择与适应场景**
  - `SELECT * FROM pg_am;`
  - [创建索引文档](https://www.postgresql.org/docs/devel/static/sql-createindex.html)
  - [自动选择索引接口](https://github.com/digoal/blog/blob/master/201706/20170617_01.md)
- **复合索引顺序**
- **非驱动列扫描优化**
- **优化器开关介绍（因子、开关）**
  - [文档链接](https://www.postgresql.org/docs/devel/static/runtime-config-query.html)
- **HINT的使用**
  - [HINT介绍](https://github.com/digoal/blog/blob/master/201607/20160723_02.md)
  - [阿里云pg_hint_plan插件使用](https://github.com/digoal/blog/blob/master/201604/20160401_01.md)

## 函数和存储过程优化
- **plpgsql函数调用优化**
  - [auto_explain插件](https://github.com/digoal/blog/blob/master/201611/20161121_02.md)
  - [pldebugger扩展 + pgadmin](https://github.com/digoal/blog/blob/master/201704/20170424_02.md)
  - [raise notice 和 print stack](https://www.postgresql.org/docs/devel/static/plpgsql-errors-and-messages.html)

### 判断有无满足条件记录
```sql
PERFORM 1 FROM tbl WHERE ... LIMIT 1;
IF FOUND THEN
  ...
ELSE
  ...
END IF;
```
- 不要使用以下方式：
  ```sql
  SELECT COUNT(*) INTO var FROM tbl WHERE ...;
  IF var >= 1 THEN
    ...
  ELSE
    ...
  END IF;
  ```

## 连接池优化
- **pgbouncer**
  - [详细说明](https://github.com/digoal/blog/blob/master/201005/20100511_03.md)
- **内置连接池**
  - [详细说明](https://github.com/digoal/blog/blob/master/201805/20180521_03.md)
- **Greenplum连接池实践**
  - [详细说明](https://github.com/digoal/blog/blob/master/201801/20180128_04.md)
- **阿里云高并发版本**
  - [详细说明](https://github.com/digoal/blog/blob/master/201805/20180505_07.md)

## 事务可靠性与可用性设置
- **事务级提交模式可调**
  - 例如，涉及金额较大的交易使用同步模式，涉及金额较小的交易使用异步模式。
  - 可以设置为用户级或数据库级。
  - [详细说明](https://github.com/digoal/blog/blob/master/201712/20171207_01.md)
- **synchronous_commit**
  - 值包括：`on`, `remote_apply`, `remote_write`, `local`, `off`
  - [详细说明](https://www.postgresql.org/docs/10/static/runtime-config-wal.html#GUC-SYNCHRONOUS-COMMIT)
- **synchronous_standby_names**
  - [详细说明](https://www.postgresql.org/docs/10/static/runtime-config-replication.html#RUNTIME-CONFIG-REPLICATION-MASTER)

## 分布式事务 (2PC)
- **分布式事务**
  - [详细说明](https://github.com/digoal/blog/blob/master/201102/20110214_01.md)
- **勿滥用2PC**
  - [详细说明](https://github.com/digoal/blog/blob/master/201509/20150924_01.md)

### 示例
```sql
BEGIN;
INSERT INTO t VALUES (0, 'abc');
PREPARE TRANSACTION 'pxt1';
COMMIT PREPARED 'pxt1';
```

## RDS PG资源使用
- **防雪崩**
  - [详细说明](https://github.com/digoal/blog/blob/master/201712/20171211_02.md)
- **限制慢SQL并发度**

希望这些优化指南能够帮助你更好地管理和优化PostgreSQL数据库。