.md
• statement_timeout
– 语句超时，防止雪崩
• lock_timeout
– 锁超时
• deadlock_timeout
– 死锁超时
• idle_in_transaction_session_timeout
– 空闲中事务超时
操作建议 防止 锁等待引发
DDL - DDL
雪崩
• 锁等待机制介绍
– https://github.com/digoal/blog/blob/master/201705/2017
0521_01.md
• DDL、大锁建议
– begin;
– set lock_timeout='ns';
– DDL
– end;
表切换
AB
• https://github.com/digoal/blog/blob/master/
201807/20180725_04.md
性能分析利器 当前等待事件透视
7 -
https://www.postgresql.org/docs/devel/static/monitoring-stats.html#MONITORING-STATS-VIEWS
PPAS
AWR内包含等待时
间统计报告
性能分析利器
7 - perf insight
https://github.com/digoal/blog/blob/master/201901/20190125_02.md
数据库优化
• 擒贼先擒王（TOP SQL）
• SQL执行计划分析、优化
• 数据库内核代码层瓶颈分析
• 慢SQL定位、优化
• 数据库活动信息跟踪参数
• 锁等待问题定位
• 等待事件透视
• 全面健康报告
• 9种索引接口的适应场景与选择
• 复合索引顺序
• 非驱动列扫描优化
• 优化器开关介绍（因子、开关）
• HINT的使用
性能分析利器
8 - AWR
• PostgreSQL
– https://github.com/digoal/blog/blob/master/201611/
20161123_01.md
• PPAS(类似 ORACLE statspack)
– https://github.com/digoal/blog/blob/master/201606/
20160628_01.md
• Cloud DBA
– 已上线
、 飙升分析、优化
IO CPU
• OS
– cgroup 检查thrott
– top find PID
– iotop find PID
– iostat ，是否到达瓶颈、IOHANG问题
– dmesg
• DB
– pid -> find pg_stat_activity
– freeze 风暴问题
• https://github.com/digoal/blog/blob/master/201804/20180411_01.md
• https://github.com/digoal/blog/blob/master/201801/20180117_03.md
• https://github.com/digoal/blog/blob/master/201606/20160612_01.md
• https://github.com/digoal/blog/blob/master/201605/20160520_01.md
– autovacuum_naptime , 长事务, 长2PC, long sql, hot_standby_feedback(备库长事务, 长2PC, long sql) ,
vacuum_defer_cleanup_age
• https://github.com/digoal/blog/blob/master/201704/20170410_03.md
• https://github.com/digoal/blog/blob/master/201505/20150503_01.md
数据库优化
• 擒贼先擒王（TOP SQL）
• SQL执行计划分析、优化
• 数据库内核代码层瓶颈分析
• 慢SQL定位、优化
• 数据库活动信息跟踪参数
• 锁等待问题定位
• 等待事件透视
• 全面健康报告
• 9种索引接口的适应场景与选择
• 复合索引顺序
• 非驱动列扫描优化
• 优化器开关介绍（因子、开关）
• HINT的使用
索引接口的选择
select * from pg_am;
https://www.postgresql.org/docs/devel/static/sql-createindex.html
https://github.com/digoal/blog/blob/master/201706/20170627_01.md
自动选择索引接口：
https://github.com/digoal/blog/blob/master/201706/20170617_01.md
索引接口的选择
• BTree
– =, >, >=, ,>,-|-,&
– 普通类型(通过btree_gist 插件支持)：与B-Tree类似，增加空间类型类似操作符
– 数组类型(通过intarray 插件支持)：与GIN类似
– 多列：任意列组合查询
• SPGiST
– 平面几何类型：与GiST类似
– 范围类型：与GiST类似
索引接口的选择
• RUM
– 多值类型(数组、全文检索类型)：包含、相交、相似排序
– 普通类型：与B-Tree类似
• BRIN
– 适合 线性数据、时序数据、（HEAP PAGE之间边界清晰的数据）。
– 普通类型：与B-Tree类似
– 空间类型：包含
• Bloom
– 多列：任意列组合，等值查询
• 表达式索引
– 搜索条件为表达式时。
– where st_makepoint(x,y) op ?
– create index idx on tbl USING gist ( (st_makepoint(x,y)) );
• 条件索引(定向索引)
– 搜索时，强制过滤某些条件时。
– where status='active' and col=? 。
– create index idx on tbl (col) where status='active'; --激活用户占比70%，只针对这些数据进行索引
– 监控系统例子 select x from tbl where temp>60; --99, 1% 异常数据
思考、问题
• 多列复合索引如何设计字段顺序
• 非驱动列查询，如何使用索引扫描
多列复合索引字段顺序原则
• https://github.com/digoal/blog/blob/master/201803/20180314_02.md
非驱动列查询的优化
• https://github.com/digoal/blog/blob/master/201803/20180323_03.md
数据库优化
• 擒贼先擒王（TOP SQL）
• SQL执行计划分析、优化
• 数据库内核代码层瓶颈分析
• 慢SQL定位、优化
• 数据库活动信息跟踪参数
• 锁等待问题定位
• 等待事件透视
• 全面健康报告
• 9种索引接口的适应场景与选择
• 复合索引顺序
• 非驱动列扫描优化
• 优化器开关介绍（因子、开关）
• HINT的使用
优化器开关介绍（因子、开关）
• 优化器开关、成本计算系数因子
– https://www.postgresql.org/docs/devel/static/run
time-config-query.html
• 校准因子
– https://github.com/digoal/blog/blob/master/201
311/20131126_03.md
SQL HINT
• HINT介绍
– https://github.com/digoal/blog/blob/master/201
607/20160723_02.md
• 阿里云 pg_hint_plan插件使用
– https://github.com/digoal/blog/blob/master/201
604/20160401_01.md
sr_plan
• profile
• https://github.com/digoal/blog/blob/master/
201702/20170228_01.md
• 框架开发，无法修改 SQL，无法加 HINT。
– 内核层优化器修改
– PROFILE
数据库优化
• 擒贼先擒王（TOP SQL）
• SQL执行计划分析、优化
• 数据库内核代码层瓶颈分析
• 慢SQL定位、优化
• 数据库活动信息跟踪参数
• 锁等待问题定位
• 等待事件透视
• 全面健康报告
• 9种索引接口的适应场景与选择
• 复合索引顺序
• 非驱动列扫描优化
• 优化器开关介绍（因子、开关）
• HINT的使用
• 函数、存储过程调用优化
函数 存储过程 性能诊断、优
plpgsql ( )
化
• auto_explain插件
• plpgsql函数中每一个调用的详细执行计划
– https://github.com/digoal/blog/blob/master/201
611/20161121_02.md
函数
plpgsql debug
• https://www.postgresql.org/docs/devel/static/plpgsql-control-structures.html
• https://www.postgresql.org/docs/devel/static/plpgsql-statements.html#PLPGSQL-
STATEMENTS-DIAGNOSTICS
• https://www.postgresql.org/docs/devel/static/plpgsql-errors-and-messages.html
• pldebugger extension + pgadmin
– https://github.com/digoal/blog/blob/master/201704/20170424_02.md
• raise notice
• print stack
– GET STACKED DIAGNOSTICS variable { = | := } item [ , ... ];
– GET [ CURRENT ] DIAGNOSTICS variable { = | := } item [ , ... ];
函数
plpgsql debug
• pldebugger extension + pgadmin
• raise notice
• print stack
– GET STACKED
判断有无满足条件记录
plpgsql
• perform 1 from tbl where .... limit 1;
• if FOUND then
• ...
• else
• ...
• end if;
• DON'T use
– select count(*) into var from tbl where ....;
– if var >= 1 then
– else
– end if;
数据库优化
• 擒贼先擒王（TOP SQL）
• SQL执行计划分析、优化
• 数据库内核代码层瓶颈分析
• 慢SQL定位、优化
• 数据库活动信息跟踪参数
• 锁等待问题定位
• 等待事件透视
• 全面健康报告
• 9种索引接口的适应场景与选择
• 复合索引顺序
• 非驱动列扫描优化
• 优化器开关介绍（因子、开关）
• HINT的使用
• 函数、存储过程调用优化
• 连接池
连接池的优化
连接池的优化
连接池的优化
• pgbouncer
– https://github.com/digoal/blog/blob/master/201005/20100511_03.md
• 内置连接池
– https://github.com/digoal/blog/blob/master/201805/20180521_03.md
• Greenplum 连接池实践
– https://github.com/digoal/blog/blob/master/201801/20180128_04.md
• 阿里云高并发版本
– https://github.com/digoal/blog/blob/master/201805/20180505_07.md
事务可靠性、可用性级别设置
鱼与熊
掌兼得
事务级提交模式可调。
例如涉及金额较大的使用同步模式
涉及金额较小的使用异步模式
也可以设置为：
1、用户级
2、数据库级
https://github.com/digoal/blog/blob/master/201712/20171207_01.md
事务可靠性、可用性级别设置
• https://www.postgresql.org/docs/10/static/runtime-config-
wal.html#GUC-SYNCHRONOUS-COMMIT
– synchronous_commit
• on, remote_apply, remote_write, local, off
• https://www.postgresql.org/docs/10/static/runtime-config-
replication.html#RUNTIME-CONFIG-REPLICATION-MASTER
– synchronous_standby_names
• [FIRST] num_sync ( standby_name [, ...] )
• ANY num_sync ( standby_name [, ...] )
• standby_name [, ...]
分布式事务
(2PC)
• 分布式事务
• https://github.com/digoal/blog/blob/master/201102/20110214_01.md
• 勿滥用2PC
• https://github.com/digoal/blog/blob/master/201509/20150924_01.md
• max_prepared_transactions = 1000
• postgres=# begin;
• postgres=# insert into t values (0,'abc');
• postgres=# prepare transaction 'pxt1';
• PREPARE TRANSACTION
• postgres=# select * from pg_prepared_xacts ;
• transaction | gid | prepared | owner | database
• -------------+------+-------------------------------+----------+----------
• 2756839324 | pxt1 | 2018-04-18 15:08:15.901434+08 | postgres | postgres
• (1 row)
• postgres=# commit prepared 'pxt1';
• COMMIT PREPARED
• postgres=# select * from pg_prepared_xacts ;
• transaction | gid | prepared | owner | database
• -------------+-----+----------+-------+----------
• (0 rows)
资源使用
RDS PG
资源使用
RDS PG
防雪崩
• https://github.com/digoal/blog/blob/master/201712/20171211_02
.md
• statement_timeout
– 语句超时，防止雪崩
• lock_timeout
– 锁超时
• deadlock_timeout
– 死锁超时
• idle_in_transaction_session_timeout
– 空闲中事务超时
操作建议 防止 锁等待引发
DDL - DDL
雪崩
• 锁等待机制介绍
– https://github.com/digoal/blog/blob/master/201705/2017
0521_01.md
• DDL、大锁建议
– begin;
– set lock_timeout='ns';
– DDL
– end;
表切换
AB
• https://github.com/digoal/blog/blob/master/
201807/20180725_04.md
限制慢 并发度
SQL