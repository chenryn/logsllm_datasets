and even the same rows, as illustrated in Figure 5. Specifically, we
first identified the physical address of interest in the victim enclave.
This can be achieved by reading the page tables directly. Then we
allocated a large chunk of memory buffer in the spying enclave and
determined their physical addresses. Using the reverse-engineering
tool provided by the original DRAMA attack [36], we picked two
memory addresses p and p′, as stated above. The attack is illustrated
as in Figure 5. p and p′ are accessed in turns without any delay.
The access latency of memory block p is measured to determine
whether the target address d in the victim enclave has just been
visited.
Second, obtain fine-grained timers in enclaves. An unexpected
challenge in executing this attack is the lack of a reliable clock. The
SGXv1 processor family does not provide timing information within
an enclave: the instructions such as RDTSC and RDTSCP are not valid
for enclave programs. To measure time, a straightforward way is
making system calls, which is heavyweight, slow and inaccurate,
due to the variation in the time for processing EEXIT and calls.
A much more lightweight solution we come up with utilizes the
observation that an enclave process can access the memory outside
without mode-switch. Therefore we can reserve a memory buffer
for smuggling CPU cycle counts into the attack enclave. Specifically,
a thread outside the enclave continuously dumps the cycle counts to
the buffer and the attack thread inside continuously reads from the
buffer. Although the race condition between them brings in noise
occasionally due to our avoidance of mutex for supporting timely
interactions between the threads, most of the time we successfully
10
Figure 5: Illustration of cache-DRAM attack.
operations. Of course, because the DRAM row is large (e.g., typi-
cally 8 KB), false detection is likely. Even so, DRAMA is shown to
effectively detect the existence of keystroke activities [36].
Directly applying DRAMA to perform cross-enclave attacks faces
several challenges, most of which are also faced by our design of
cache-DRAM attacks. Therefore, we defer the discussion of these
design challenges to Section 5.3 where we detail the cache-DRAM at-
tacks. Here we enumerate some limitations of cross-enclave DRAMA
attacks.
First, most of the victim’s memory access will be cached (EPC
is cacheable by default), and hence no information will be leaked
through the use of DRAM rows. While we could manually disable
cache by setting the cache disable (CD) bit of CR0 for the core
running the victim enclave3, this would slow down the enclave
process for approximately 1000×.
Second, DRAMA attacks may falsely detect row hits that are
unrelated to the victim enclave’s visit to d, because the 8KB DRAM
row can be shared by multiple data structure or code regions. This
false detection, however, is very common in our experiments.
Finally, DRAMA cannot achieve fine-grained spatial accuracy.
As an example, on our test system a memory page is distributed
over 4 DRAM rows. In an extreme case the attacker could occupy
an entire row except a single 1KB chunk for the victim enclave and
achieve a spatial accuracy of 1KB (see Table 7), which is better than
the Prime+Probe cache attack (16 KB), however still worse than a
Flush+Reload cache attack (64B).
5.3 Cache-DRAM Attacks (Vector 7 & 8)
To improve cross-enclave DRAMA attacks, we propose a novel
cache-DRAM attack. We show that by leveraging both vector 7 and
8, the adversary can significantly improve the spatial granularity
of memory side-channel attacks.
Techniques. Particularly, the cache-DRAM attack is performed
using two threads: one thread runs in non-enclave mode which
Prime+Probes a cache set in the last-level cache in which the
address d is mapped; the other thread conducts the cross-enclave
DRAMA without disabling caching. As the Prime+Probe attack
causes conflicts with d in the last-level cache, the victim enclave’s
3In Intel SGX programming reference [1] it is said that PRMRR_BASE register could
be programmed with values UC(0x0) to set PRM range as uncacheable. We confirmed
on our platform that PRMRR_BASE register cannot be changed after system boot.
Row bufferVictim enclaveSpying enclavepAddress translation and timing supportp’dDRAMMemory busCore 1Core 2Core n…LLCSystem softwareCache probingSession K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2430Table 7: Analysis of side-channel attack surfaces.
Vectors
i/dCache Prime+Probe
L2 Cache Prime+Probe
L3 Cache Prime+Probe
page faults
B/T-SPM
HT-SPM
cross-enclave DRAMA
cache-DRAM
Accuracy
2MB
128KB
16KB
4KB
4KB
4KB
1KB
64B
AEX
high
high
none
high
modest
none
none
none
Slowdown
high
high
modest
high
modest
modest
high
minimal
Moreover, we only observed a 2% slowdown of enclave program in
our experiment.
Discussion. The cache-DRAM attack achieves a spatial accuracy
of 64 byte which is as accurate as the Flush+Reload cache attacks.
In the meanwhile it ensures that only the targeted cache set is
primed which further reduces the false positives caused by accesses
of shared DRAM rows. The attack can be more powerful for a
dedicated attacker by reserving a DRAM bank exclusively for the
victim and spying enclaves.
6 MITIGATION AND DISCUSSION
6.1 Analysis of Attack Surfaces
Table 7 summarizes the characteristics of the memory side-channel
attacks discovered over different vectors. The data here were col-
lected from the system configuration in Table 1 and a PRM size of
128MB. The value under the Accuracy column shows the spatial ac-
curacy of the attack vectors. For example, the iCache Prime+Probe
channel has an accuracy of 2MB (i.e., 128MB/64): that is, detecting
one cache miss in one of the iCache sets could probably mean any of
2MB of the physical memory being accessed. The larger the number
is, the coarser-grained the vector will be. The attack with the finest
granularity is the cache-DRAM attack, which is 64 bytes, equivalent
to the Flush+Reload cache attacks. However, note that due to lack
of shared memory pages—as EPC pages only belong to one enclave
at a time—Flush+Reload cache attacks are not feasible on SGX
enclaves. It is also worth noting that the calculation of the accuracy
does not consider knowledge of the physical memory exclusively
used by the target enclave. This information can help improve the
granularity even further. Prime+Probe cache attacks on iCache,
dCache and L2 cache induce high volume of AEXs. This does not
take HyperThreading into consideration. If so, both AEX numbers
and slowdowns will become modest. Most of the attack vectors that
need to frequently preempt the enclave execution will induce high
overheads. The cross-enclave DRAMA needs to disable cache to
conduct effective attacks, therefore inducing high slowdown. What
is not shown in the table is temporal observabilities. Except for page-
fault attacks, all other attacks have temporal observabilities, as they
allow observing finer-grained information than allowed by their
basic information unit, which are leaked through timing signals.
Other attack vectors not listed. Flush+Reload cache attacks
against cached PTE entries are one attack vector that we have not
listed in Table 7. As a PTE entry shares cache line with 7 more
PTE entries, the spatial accuracy is 4KB×8 = 32KB. The attack can
achieve the spatial accuracy of 4KB if PTE entries are intentionally
organized. Combining SPM and DRAMA attacks will also introduce
Figure 6: Distribution of access latency for probing the same
row and a different row.
return sum ;
if ( SUM_INTOBJS ( sum , opL , opR ))
// adding two small integers
if ( ARE_INTOBJS ( opL , opR ) ) {
1 /* An input dependent branch from gap library */
2 Obj SumInt ( Obj opL , Obj opR ) {
3
// initialize temp variables
4
// ...
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21 }
}
// adding one large integer and small integer
else if ( IS_INTOBJ ( opL ) || IS_INTOBJ ( opR ) ) {
}
// add two large integers
else {
cs = INT_INTOBJ ( opL )+ INT_INTOBJ ( opR );
// ...
// ...
// ...
}
Figure 7: An input-dependent branch in Gap 4.8.6.
observed a timing difference between a row hit and a row conflict
when probing the target enclave addresses. We use this method to
measure the access latency of p.
Evaluation. First we evaluate the accuracy of the timer we build
for the attack. We designed a simple enclave process continuously
visiting d with clflush instruction forcing the memory accesses
to reach a DRAM row. An evaluator enclave utilized the timer to
measure the access latency of p (the address on the same row as d),
as well as the access latency of p′ (the address on a different row),
1 million times each. Figure 6 shows the distributions of the access
latency measured by the evaluator enclave during these accesses.
As we see here the cases of DRAM row hit can be easily identified
based on the timing difference observed through our timer (the
left-most part of its distribution).
As an example, we ported Gap 4.8.6 to Graphene-SGX, targeting
an input-dependent branch which is illustrated in Figure 7. Gap is a
software package implementing various algebra algorithms. It uses
a non-integer data type for values that cannot fit into 29 bits, other-
wise the values are stored as immediate integers. In our experiment
we had the victim enclave running the SumInt operation every 5
µs. We set the range for a row hit detection as within 400-426 cpu
cycles. To further reduce false positives brought by prefetching, we
disabled hardware prefetches on the victim core by updating MSR
0x1A4. With the cache-DRAM attack targeting the instructions in
line 8, our attack enclave could detect whether the branch in line 7
was taken with a probability of 14.6% and <1% false positive rate.
11
row hitSession K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2431a new attack vector. We did not show these attacks due to the
similarity to the ones we demonstrated.
6.2 Effectiveness of Existing Defenses
Deterministic multiplexing. Shinde et al. [39] proposes a compiler-
based approach to opportunistically place all secret-dependent con-
trol flows and data flows into the same pages, so that page-level
attacks will not leak sensitive information. However, this approach
does not consider cache side channels or DRAM side channels,
leaving the defense vulnerable to cache attacks and DRAMA.
Hiding page faults with transactional memory. T-SGX [38]
prevents information leakage about page faults inside enclaves by
encapsulating the program’s execution inside hardware-supported
memory transactions. Page faults will cause transaction aborts,
which will be handled by abort handler inside the enclave first. The
transaction abort handler will notice the abnormal page fault and
decide whether to forward the control flow to the untrusted OS
kernel. As such, the page fault handler can only see that the page
fault happens on the page where the abort handler is located (via
register CR2). The true faulting address is hidden.
However, T-SGX cannot prevent the accessed flags enabled mem-
ory side-channel attacks. According to Intel Software Developer’s
manual [3], transaction abort is not strictly enforced when the ac-
cessed flags and dirty flags of the referenced page table entries are
updated. This means there is no security guarantee that memory
access inside transactional region is not leaked through updates of
the page table entries.
Secure processor design. Sanctum [16] is a new hardware de-
sign that aims to protect against both last-level cache attacks and
page-table based attacks. As Sanctum enclave has its own page
tables, page access patterns become invisible to the malicious OS.
Therefore, the page-faults attacks and SPM attacks will fail. How-
ever, Sanctum does not prevent cross-enclave DRAMA attack. As
a matter of fact, Sanctum still relies on the OS to assign DRAM
regions to enclaves, create page table entries and copy code and
data into the enclave during enclave initialization. Since OS knows
the exact memory layout of the enclave, the attacker can therefore
run an attack process in a different DRAM region that shares a
same DRAM row as the target enclave address.
Timed execution. Chen et al. [15] proposes a compiler-based ap-
proach, called DÉJÀ VU, to measure the execution time of an enclave
program at the granularity of basic blocks in a control-flow graph.
Execution time larger than a threshold indicates that the enclave
code has been interrupted and AEX has occurred. The intuition
behind it is that execution time measured at the basic block level
will not suffer from the variations caused by different inputs. Due
to the lack of timing measurements in SGX v1 enclaves, DÉJÀ VU
constructs a software clock inside the enclave which is encapsu-
lated inside Intel Transactional Synchronization Extensions (TSX).
Therefore, the clock itself will not be interrupted without being
detected. It was shown that DÉJÀ VU can detect AEX with high
fidelity. Therefore, any of the side-channel attack vectors that in-
duce high volume of AEX will be detected by DÉJÀ VU. However,
those not involving AEX in the attacks, such as T-SPM or HT-SPM
attacks will bypass DÉJÀ VU completely.
12
Enclave Address Space Layout Randomization. SGX-Shield [37]
implemented fine-grained ASLR when an enclave program is loaded
into the SGX memory. However the malicious OS could still learn
the memory layout after observing memory access patterns in a
long run as SGX-Shield does not support live re-randomization.