图1.9
它的活动线程 是从这几个 private 区域启动，ProcessHacker 的 堆栈回溯里也仍然能看到下面几个恶意的区域.
图1.10
[Winnti](https://hitcon.org/2016/pacific/0composition/pdf/1201/1201%20R2%201610%20winnti%20polymorphism.pdf)
是另一个采用这种内存模块注入技术的恶意软件，相比之下，它的特征更明显些，因为它的内存区段属性有一个仍为 RWX.
图1.11
但
[Winnti](https://hitcon.org/2016/pacific/0composition/pdf/1201/1201%20R2%201610%20winnti%20polymorphism.pdf)
有一个值得肯定的地方就是它的 MZ/PE头已经被擦除了，这也让它更难被检测到！
图1.12
**0x4、进程 Hollowing**
进程 Hollowing 是逃避安全软件和安全员检测的另一个攻击技术，它通过创建一个 挂起（CreateProcess 的 Creation
标志设置为CREATE_SUSPENDED）
的进程，删除(Hollowing)进程空间原本的内容，然后重新分配并写入新的payload进去，用SetThreadContext重定向原来的执行流程到新的payload处，最后调用ResumeThread让进程恢复运行。
现在这类技术大多的变种都会用 Create/Map 相关的API替代 敏感的 WriteProcessMemory ，并且修改入口点跳转来代替 敏感的
SetThreadContext 函数.
[DarkComet](http://journeyintoir.blogspot.com/2015/02/process-hollowing-meets-cuckoo-sandbox.html)
是很多使用这种技术的恶意软件中的一个！这里有几个常规的方法可以检测进程Hollowing，其中一个是检测进程是否被以 CREATE_SUSPENDED
方式创建，就像[DarkComet](http://journeyintoir.blogspot.com/2015/02/process-hollowing-meets-cuckoo-sandbox.html) 样本展示的这样.
图1.13
**0x5、模块覆盖**
本文到目前为止，讨论的所有技术都会导致存在 无镜像关联的
执行代码，因此这些也都非常容易得被检测到，但模块覆盖技术却并不会这样，这让的它更难被检测，这个技术具体实现是将
目标进程中没有使用的模块映射到进程中，之后再将自己的payload写在映射的模块里，[Flame](http://blog.ioactive.com/2012/06/inside-flame-you-say-shell32-i-say.html) 是第一个被大众所知的使用这个技术的恶意软件，不久，
[Careto](https://kasperskycontenthub.com/wp-content/uploads/sites/43/vlpdfs/unveilingthemask_v1.0.pdf) 和
[Odinaff](https://www.endgame.com/blog/technical-blog/protecting-financial-sector-early-detection-trojanodinaff)也被发现使用这个技术。当然也有很多其他检测技术可以感知到 模块覆盖
这种技术，比如将内存中的数据和磁盘上相应的模块文件关联起来作对比！
**0x6、GARGOYLE**
GARGOYLE
已经被证明是一种可以逃避大多数安全软件检测的内存驻留技术，它利用当前线程被唤醒时APC中的注册函数会被执行的机制，当线程被唤醒时会首先执行APC队列中的被注册的函数，当payload执行完成后再往后执行.检测这种攻击技术的方法是通过检查线程和用户APC调用来发现隐藏其中的恶意
ROP 链.
**检测内存攻击**
鉴于这些技术已经被扩散和极其容易获取的特性，安全相关人员必须对基于内存的攻击技术保持警惕，并主动在网络中搜寻它们的踪迹，然而，现实是大多是安全产品不具备大规模检测这种内存攻击技术的能力，并且离检测这类攻击在技术上还差的太多.
正是因为这样，[Endgame](https://www.endgame.com/)
团队才在这上面做了很多有意义的探索，并且希望能将这种针对以上所有攻击并实现低误报检测的方法引入我们现有的安全产品中.
鉴于这种针对内存驻留检测技术的差距所涉及到的用户规模和带来的影响，提高所有相关环节而并不止是客户的能力迫在眉睫，因此，我们和 Jared Atkinson
在他所开发的 powershell tool 工具 [Get-InjectedThreads](https://gist.github.com/jaredcatkinson/23905d34537ce4b5b1818c3e6405c1d2)
上进行了合作, 这个工具提供了在检测内存驻留技术上相对低误报的方式，它的大概原理就是
通过扫描系统上所有活跃线程的可疑启动地址，安全员通过它去检测自己所在的网络的话，可以很快的鉴别出大多数类型的内存驻留线程.
这个脚本通过 NtQueryInformationThread 函数查询每个活跃线程的启动地址，然后  
用 VirtualQueryEx 去查询启动地址相关的区段属性，如果这个线程的启动地址是没有关联并且可执行的（不是 image
属性），那么我们基本可以考虑它是一个注入线程，下面这张图展示了在检测 9002 RAT
[sample](https://www.virustotal.com/en/file/49ac6a6c5449396b98a89709b0ad21d078af783ec8f1cd32c1c8b5ae71bec129/analysis/)
时的情景.
图1.14
这个脚本可以捕获大多数恶意软件家族所使用的shellcode注入技术、反射型注入技术、内存模块注入技术以及 进程hollowing注入
技术，但是需要指出的是，它并不能完全替代安全产品在综合阻止内存注入方面的能力，比如 [Endgame](https://www.endgame.com/).
**企业如何大范围检测内存驻留**
EndGame 企业安全产品
能够检测上面所述的所有驻留技术（或许更多），提供了市场上能找到的最好的来定位内存中威胁的功能。我们不仅仅依赖于简单的检测方法，例如监控众所周知的调用系统API实现注入的流程，而且具备有效地分析内存并找到所有已知的恶意软件驻留的能力。为我们的用户提供了基于线程级的关于注入代码的可见性，以及复杂的后续操作，例如检查到注入的代码后仅仅只会挂起恶意注入的线程来修复威胁。我们的产品在阻止注入过程中和注入成功后的情景都很有效，而且速度快的不行，在几秒钟之内即可定位几万个主机的威胁.
和任何无签名文件的检测技术一样，误报率是我们很看重的一方面，我们从研究到开始应用这个技术去阻止内存驻留的每一步，如何降低误报率都是我们最看重的地方！  
大多数误报都和安全软件，即时（JIT）编译代码或DRM保护/打包应用程序这三方面有关。
0xa、很多安全产品有时会为系统中的某些或所有进程注入代码，以增强其行为检测能力。但这样做的缺点是如果安全产品都滥用这种方法的话，它最终可能会损害到系统的安全性，并使得真正的内存驻留恶意软件更难被检测.
0xb、即时（JIT）编译代码是另一个容易导致误报的情况，它会实时生成
存在于没有任何关联或者浮动内存中的代码，.NET或Java应用程序是使用JIT技术最典型的例子，不过幸运的是，JIT
类型的检测比流氓安全产品的行为更容易识别和过滤.
0xc、最后，应该牢记使用数字版权管理（DRM）方案打包或保护的应用程序。同时这些应用程序可能会在内存中才解密或者使用混淆技术去阻止被调试或者逆向破解，同样恶意软件也会使用相同的技术来避开安全软件的检测并阻止安全从业者的分析。
但经过精细的设计和额外的测试，我们的安全产品现在达到了一个很低的误报率，我相信它会使得我们 EndGame 的用户很快摆脱内存驻留软件的危害.
**结论**
我们的对手当然会不断地开发新的技术去躲避检测并达到他们的目的，内存驻留技术也不例外，过去十多年，在这一领域我们一直处于十分被动的地位.幸运的是，通过掌握最新的技术，我们慢慢板回了一局。EndGame
就是通过开发出检测这种攻击的方法，从而在无文件攻击检测这一领域获得了市场领导者的地位（加入了我们另一个关键的技术
[other](https://www.endgame.com/blog/technical-blog/capturing-zero-day-exploits-automated-prevention-technology) key
[technologies](https://www.endgame.com/blog/technical-blog/world-meet-malwarescore)），想要了解更多内存攻击检测方面的知识，查看我们在SANS威胁寻找和IR峰会上演示的[幻灯片](https://www.slideshare.net/JoeDesimone4/taking-hunting-to-the-next-level-hunting-in-memory)。