# 【缺陷周话】第19期：LDAP 注入

## 译文声明
本文为翻译文章，译文仅供参考，具体内容及含义以原文为准。

## 1. LDAP 注入

LDAP（Lightweight Directory Access Protocol）是基于 X.500 标准的轻量级目录访问协议，提供了一种访问目录数据库的方法和服务。它常用于与目录数据库组成目录服务。目录是一种为查询、浏览和搜索而优化的专业分布式数据库，其数据呈树状结构组织，类似于 Linux/Unix 系统中的文件目录。公用证书、安全密钥、公司的物理设备信息等不频繁修改的数据适合存储在目录中。可以将 LDAP 理解为一种搜索协议，它类似于 SQL，拥有自己的查询语法，并且同样存在被注入攻击的风险。LDAP 注入是指客户端发送查询请求时，输入的字符串中含有一些特殊字符，导致修改了 LDAP 本来的查询结构，从而使得攻击者能够访问更多未授权数据的一种攻击方式。

本文将以 Java 语言源代码为例，分析 CWE ID 90（不当处理 LDAP 查询中的特殊元素）样本中 LDAP 注入漏洞产生的原因及其修复方法。详细信息请参见：

- CWE ID 90: Improper Neutralization of Special Elements Used in an LDAP Query (‘LDAP Injection’)
  - [http://cwe.mitre.org/data/definitions/90.html](http://cwe.mitre.org/data/definitions/90.html)
- CWE ID 639: Authorization Bypass Through User-Controlled Key
  - [http://cwe.mitre.org/data/definitions/639.html](http://cwe.mitre.org/data/definitions/639.html)

## 2. LDAP 注入的危害

LDAP 注入利用用户提供的参数生成恶意 LDAP 查询，通过构造 LDAP 过滤器来绕过访问控制和提升用户权限。在维持正常过滤器的情况下，攻击者可以通过注入 AND 和 OR 操作符来获取敏感信息。从 2018 年 1 月至 2019 年 1 月，CVE 中共有 4 条与此相关的漏洞信息。部分漏洞如下：

| CVE 编号 | 概述 |
| --- | --- |
| CVE-2018-12689 | phpLDAPadmin 1.2.2 允许通过 `cmd.php?cmd=loginform` 请求中精心设计的 `serverid` 参数或登录面板中精心设计的用户名和密码进行 LDAP 注入。 |
| CVE-2018-5730 | MIT krb5 1.6 或更高版本允许经过身份验证的 kadmin 将主体添加到 LDAP Kerberos 数据库，通过提供 “linkdn” 和 “containerdn” 数据库参数来绕过 DN 容器检查，或者通过提供扩展的 DN 字符串来绕过 DN 容器检查。 |
| CVE-2016-8750 | Apache Karaf 在 4.0.8 之前的版本使用 LDAPLoginModule 通过 LDAP 对用户进行身份验证。但由于未正确编码用户名，容易受到 LDAP 注入攻击，导致拒绝服务。 |
| CVE-2011-4069 | PacketFence 3.0.2 之前的 `html/admin/login.php` 允许远程攻击者通过精心设计的用户名进行 LDAP 注入攻击，从而绕过身份验证。 |

## 3. 示例代码

示例来源于 Samate Juliet Test Suite for Java v1.3 ([https://samate.nist.gov/SARD/testsuite.php](https://samate.nist.gov/SARD/testsuite.php))，源文件名为 `CWE90_LDAP_Injection__connect_tcp_01.java`。

### 3.1 缺陷代码

在上述示例代码的第 39-61 行，程序通过 TCP 连接读取 Socket 的数据并将其赋值给变量 `data`。在第 118 行动态构造一个 LDAP 查询语句，并在第 119 行执行该查询。LDAP 为人员组织机构封装了常见的对象类，例如人员（person）包含姓（sn）、名（cn）、电话（telephoneNumber）、密码（userPassword）等属性。该查询用于验证是否存在名为 `data` 的员工，但并未对 `data` 的内容做任何过滤。使用最简单的注入方式，令传入参数的值为“*”，则构造的动态查询条件为 `(cn=*)`，这样可以查询到所有员工的信息，导致信息泄露。

使用 360 代码卫士对上述示例代码进行检测，可以检出“LDAP 注入”缺陷，显示等级为高。从跟踪路径中可以分析出数据的污染源以及数据流向，在第 120 行报出缺陷，如图 1 所示：

**图 1：LDAP 注入的检测示例**

### 3.2 修复代码

在上述修复代码中，第 119 行使用 `javax.naming.ldap` 包下的扩展类 `BaseControl` 接收需要处理的参数。第 120 行调用 `control` 对象的 `getEncodedValue()` 方法将接收的参数 `data` 进行编码，编码后的值为字符对应的 ASN.1 BER 编码值。编码后的字节数组不存在参与命令解析的特殊字符，可以构造结构和内容正常的 LDAP 查询语句，从而避免了 LDAP 注入的发生。

使用 360 代码卫士对修复后的代码进行检测，可以看到已不存在“LDAP 注入”缺陷，如图 2 所示：

**图 2：修复后检测结果**

## 4. 如何避免 LDAP 注入

LDAP 注入的根本原因是攻击者提供了可以改变 LDAP 查询含义的 LDAP 元字符。在构造 LDAP 筛选器时，程序员应清楚哪些字符应作为命令解析，哪些字符应作为数据解析。为了防止攻击者侵犯程序员的各种预设情况，应使用白名单的方法，确保 LDAP 查询中由用户控制的数值完全来自于预定的字符集合，并且不应包含任何 LDAP 元字符。如果由用户控制的数值范围要求必须包含 LDAP 元字符，则应使用相应的编码机制转义这些元字符在 LDAP 查询中的意义。

- 例如，&、!、|、=、,、+、-、"、'、; 这些字符在正常情况下不会用到，如果用户的输入中出现了这些字符，需要用反斜杠进行转义处理。
- 另外一些字符如 (、)、\*、/、NUL 不仅需要用反斜杠处理，还需要将字符转换成相应的 ASCII 码值。