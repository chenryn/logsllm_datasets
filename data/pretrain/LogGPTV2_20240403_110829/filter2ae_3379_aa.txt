**作者：lxraa  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL **
# 前言
由于目前公司部分业务使用erlang实现，中文互联网上对于erlang安全问题研究较少，为了了解erlang应用的安全问题本人结合代码和公开资料进行了一些研究。
本文为erlang安全研究项目中针对erlang distribution通信协议的研究，目的是解决erlang应用的公网暴露面问题。
文中的pcap包，文档，代码存放于`https://github.com/lxraa/erl-matter/tree/master/otp25`
# 一、环境搭建（windows）
## 1、erlang运行环境安装
[Downloads - Erlang/OTP](https://www.erlang.org/downloads)
## 2、erlang包管理安装-rebar3
    git clone https://github.com/erlang/rebar3.git
    cd rebar3
    ./bootstrap
## 3、erlang调试环境搭建（vscode）
[VSCode Debug Erlang工程配置_犀牛_2046的博客-CSDN博客_vscode调试erlang](https://blog.csdn.net/weixin_38044597/article/details/118194771)
    # vscode安装erlang插件时可能会出现以下提示
    # no such file or directory pgourlain..._build...
    # 原因是vscode erlang extension（pgourlain）不会自己编译
    # 需要手动到extension目录下，使用rebar3 compile编译，生成_build文件夹
# 二、erlang集群通信demo
## 1、erlang语言的特点
  * 解释型语言
  * 函数式
  * 无反射
  * 擅长并行处理
    * 维护了一套ring3的线程，因此线程调度并不依赖syscall，开销较小，可以轻易创建大量线程。
  * 自带分布式
    * 底层通过rpc调用。
    * 由于没有反射，集群通信不存在反序列化rce（反序列化的本质是绕过黑名单的method.invoke），但是仍然可能存在其他安全问题。
## 2、集群通信原理图
1、machine1对外开放服务时，会先在4369端口开放epmd服务，这个服务可以理解为注册中心，用来保存machine1服务的(name,port)
2、machine2想调用machine1的服务时，需要先找epmd拿到machine1的(name,port)列表
3、machine2直接连接machine1的port，rpc调用
## 3、通信demo
开启一个linux虚拟机，使用windows远程调用linux节点
  * 以debug模式开启，为了方便连接，给机器指定一个hostname
    # linux
    epmd -d
    hostname localcentos2
  * 使用-sname指定名称，erl会自动把process对外开放，并注册到epmd（没有epmd时，还会自动开启epmd）
    erl -sname test
  * 设置cookie
    %%注意，erlang中单引号代表atom类型，并不是string
    %% atom可以理解为全局唯一标识符，类似js的Symbol
    auth:set_cookie('123456'). 
  * windows开启erlang shell,并配置与linux node相同的cookie
host文件互相加dns解析记录
    erlang -sname test
    >> auth:set_cookie('123456').
  * 连接节点，并查看是否连接成功
    %% 连接 记得关闭linux防火墙 systemctl stop firewalld
    net_adm:ping('test@localcentos2').
    %% 查看已连接的节点
    nodes().
  * 这时test@PPC2LXR和test@localcentos2连接成功
    %% 执行代码
    rpc:call('test@localcentos2','os','cmd',["touch /tmp/connect_success.txt"]).
可以看到，process是通过cookie保护的，拿到cookie相当于拥有执行任意代码权限，以下解决两个问题
1、认证是与epmd通信还是与process通信？
2、认证过程是否存在安全问题？
# 三、epmd协议分析
epmd是一台主机erlang节点的注册服务，提供了name到node的解析，可以理解为一个注册中心，用来告诉外部连接这个主机上的node信息。当有外部主机请求epmd服务时，epmd返回当前主机上所有node监听端口信息和节点的name
    erl
    1> net_adm:names("localcentos2").
    {ok,[{"test",36612}]}
注意，epmd是没有认证的，也就是说epmd会暴露该主机所有通过sname或name启动的process信息，且
**epmd对非local的操作只支持查询，代码在** otp_src/erts/epmd/src/epmd_src.c:line 799 : void
do_request(g, fd, s, buf, bsize)
    ...
    case EPMD_ALIVE2_REQ:
        //只允许local调用
        dbg_printf(g, 1, "** got ALIVE2_REQ");
        if (!s->local_peer)
        {
          dbg_printf(g, 0, "ALIVE2_REQ from non local address");
          return;
        }
      case EPMD_PORT2_REQ:
        dbg_printf(g, 1, "** got PORT2_REQ");
        if (buf[bsize - 1] == '\000') /* Skip null termination */
          bsize--;
        if (bsize nodes.reg; node; node = node->next)
          {
            int offset;
            if (is_same_str(node->symname, name))
            {
              wbuf[1] = 0; /* ok */
              put_int16(node->port, wbuf + 2);
              wbuf[4] = node->nodetype;
              wbuf[5] = node->protocol;
              put_int16(node->highvsn, wbuf + 6);
              put_int16(node->lowvsn, wbuf + 8);
              put_int16(length_str(node->symname), wbuf + 10);
              offset = 12;
              offset += copy_str(wbuf + offset, node->symname);
              put_int16(node->extralen, wbuf + offset);
              offset += 2;
              memcpy(wbuf + offset, node->extra, node->extralen);
              offset += node->extralen;
              if (!reply(g, fd, wbuf, offset))
              {
                dbg_tty_printf(g, 1, "** failed to send PORT2_RESP (ok) for \"%s\"", name);
                return;
              }
              dbg_tty_printf(g, 1, "** sent PORT2_RESP (ok) for \"%s\"", name);
              return;
            }
          }
          wbuf[1] = 1; /* error */
          if (!reply(g, fd, wbuf, 2))
          {
            dbg_tty_printf(g, 1, "** failed to send PORT2_RESP (error) for \"%s\"", name);
            return;
          }
          dbg_tty_printf(g, 1, "** sent PORT2_RESP (error) for \"%s\"", name);
          return;
        }
        break;
      case EPMD_NAMES_REQ:
        dbg_printf(g, 1, "** got NAMES_REQ");
       ...
       break;
      case EPMD_DUMP_REQ:
        dbg_printf(g, 1, "** got DUMP_REQ");
        if (!s->local_peer)
        {
          dbg_printf(g, 0, "DUMP_REQ from non local address");
          return;
        }
        // 只允许local调用
        ...
        break;
      case EPMD_KILL_REQ:
        if (!s->local_peer)
        {
          dbg_printf(g, 0, "KILL_REQ from non local address");
          return;
        }
        dbg_printf(g, 1, "** got KILL_REQ");
       // 只允许local调用
      case EPMD_STOP_REQ:
        dbg_printf(g, 1, "** got STOP_REQ");
        if (!s->local_peer)
        {
          dbg_printf(g, 0, "STOP_REQ from non local address");
          return;
        }
        // 只允许local调用
        break;
      default:
        dbg_printf(g, 0, "got garbage ");
      }
EPMD_NAMES_REQ显然是用来响应net_adm:names().，以下调试EPMD_PORT2_REQ
①修改epmd代码，在do_request前print输出tcp包的内容，并`make&&make install`，在主机A通过epmd