Consider the output of a winning algebraic adversary
1
. Now, we will show that a winning algebraic adversary can be used to compute
C,{Sb, mb[Sb], ˆπb}b=0,1
15
together with z, y such that C = gz(cid:62)a+αN y(cid:62)a[−1]
that either m0[S0] (cid:54)= z[S0] or m1[S1] (cid:54)= z[S1]. Let (S∗, m∗, ˆπ∗) be such that
m∗[S∗] (cid:54)= z[S∗] and Verify(C, S∗, m∗[S∗], ˆπ∗) = 1
1
. Since m0[S0 ∩ S1] (cid:54)= m1[S0 ∩ S1], it must be the case
Since ˆπ∗ is an accepting proof, we have:
e(C, g
2
i∈S∗ αN +1−iti
) = e(ˆπ∗, g2) · gαN +1m∗[S∗](cid:62)t
T
where ti = H(i, C, S∗, m∗[S∗]). (cid:145)is implies
(cid:80)
(cid:80)
C
We can write the LHS as a product of terms that involve gαN +1
and terms that do not, namely
(cid:0)gαN +1z[S∗](cid:62)t
(cid:1) ·(cid:0)
1
Moving the terms involving gαN +1
1
i∈S∗ αN +1−iz[−i](cid:62)a[−i]ti
(cid:18)
(cid:80)
g
1
i∈S∗ αN +1−iti = ˆπ∗ · gαN +1m∗[S∗](cid:62)t
1
depends on gα2
, . . . , gα2N
1
g
(cid:125)
(cid:123)(cid:122)
(cid:80)
1
1(cid:124)
i∈S∗ αN +1−iz[−i](cid:62)a[−i]ti
(cid:19)
to the RHS, we obtain
αN y(cid:62)a[−1](cid:80)
1 , . . . , gαN
(cid:18)
, gαN +2
1
1
·
g
1
(cid:1)
(cid:125)
i∈S∗ αN +1−iti
, . . . , gα3N
1
(cid:1) ·(cid:0) g
αN y(cid:62)a[−1](cid:80)
(cid:123)(cid:122)
1(cid:124)
(cid:19)
depends on gαN +3
1
i∈S∗ αN +1−iti
· (ˆπ∗)−1 = gαN +1(m∗[S∗]−z[S∗])(cid:62)t
1
Now, recall that m∗[S∗] (cid:54)= z[S∗] and that there are no H-lucky queries, so we must have (m∗[S∗] −
z[S∗])(cid:62)t (cid:54)≡p 0, and therefore we can compute its inverse r modulo p and raise both sides of the preceding
equation to the power r to get gαN +1
on the RHS. Since the LHS is something we can compute given the
output of the adversary and ga
, we can compute gαN +1
, gα2N a
.
1
1 , gαN a[−1]
1
1
1
4.4 Proof of binding for cross-commitment aggregation
Our scheme satis(cid:128)es binding for cross-commitment aggregation under the same models and assumptions
as for same-commitment aggregation.
Step 1: bounding “H-lucky” queries (cid:145)is step is the same as for same-commitment aggregation.
Step 2: bounding “H(cid:48)-lucky” queries Consider any query ((cid:63),{ Cj, Sj, mj[Sj]}j∈[(cid:96)]) that an algebraic
adversary makes to H(cid:48). Since the adversary is algebraic, it must output { zj, yj }j∈[(cid:96)] such that
Cj = g
z(cid:62)
j a+αN y(cid:62)
1
j a[−1]
We say that the query is “H(cid:48)-lucky” if
(cid:62)
∃j : (mj[Sj] − zj[Sj])
tj (cid:54)≡p 0
and
(cid:96)(cid:88)
j=1
(cid:62)
(mj[Sj] − zj[Sj])
tjt(cid:48)
j ≡p 0
where tj = (H(i, Cj, Sj, m[Sj]), i ∈ Sj). A query is H(cid:48)-lucky with probability at most 1/p. Here we
use the fact that the query to H(cid:48) (cid:128)xes { (Sj, mj[Sj], zj[Sj])}j∈[(cid:96)].
16
1
j, yb
j
j0 and y1
such that Cb
Step 3: extracting gαN +1
because the adversary is algebraic, it also contains zb
conditions speci(cid:128)es j0 and j1 such that C0
z1
j1 = z0
j1 = y0
to argue that either m0
. Consider the output of a winning adversary. It contains { Cb
(cid:62)
for b = 0, 1;
. (cid:145)e winning
j1; regardless of what the adversary outputs, we will set
j0. (cid:145)is allows to us to apply the same reasoning as in the same-commitment case
j1 is distinct from z0
j0 or m1
m∗
j∗[S∗
j∗[S∗
j∗] and
(VerifyAcross({ C∗
j ]}j∈[(cid:96)∗], π∗) = 1
j [S∗
j , m∗
j , S∗
1 , m∗
1 , S∗
or ((cid:96)∗ = 1 and Verify(C∗
j1. (cid:145)at is, for ∗ equal to either 0 or 1,
1 ], π∗) = 1)) .
j }j∈[(cid:96)b]
a[−1]
j∗] (cid:54)= z∗
zb
j
j = g
1
j0 = C1
j0 = z1
1[S∗
a+αN yb
j
(cid:62)
If Verify(··· ) = 1, we use the argument for same-commitment aggregation. If VerifyAcross(··· ) = 1,
then via a similar calculation we deduce that
(cid:80)(cid:96)∗
(cid:80)(cid:96)∗
j=1 αN y(cid:62)
αN +1(cid:80)(cid:96)∗
j a[−1](cid:80)
i∈S∗ αN +1−itj,it(cid:48)
j [−i](cid:62)a[−i]tj,it(cid:48)
αN +1−iz∗
j=1(m∗
(cid:19)
(cid:18)
j ]−z∗
(cid:80)
j [S∗
i∈S∗
j=1
j
j
j
g
1
·(π∗)−1 = g
1
j [S∗
j ])(cid:62)tj t(cid:48)
j
(cid:145)e LHS of the equation above does not depend on gαN +1
. Since there are no H-lucky queries, it must
be the case that
j∗[S∗
Moreover, since there are no H(cid:48)-lucky queries, we have
j∗] − z∗
j∗[S∗
(m∗
1
j∗])(cid:62)tj∗ (cid:54)≡p 0 .
·
g
1
(cid:96)∗(cid:88)
(m∗
j [S∗
j ] − z∗
j [S∗
j ])(cid:62)tjt(cid:48)
j (cid:54)≡p 0 .
We can then compute gαN +1
1
the same way as for the same-commitment case.
j=1
4.5 Adding hiding
(cid:145)e technique is identical to the one of Libert and Yung [LY10]. We will introduce a random coordinate
into the exponent vector used by Commit, so that the commitment itself becomes uniformly distributed
and thus leaks no information about m. (cid:145)is small change su(cid:129)ces to get hiding, because proofs do not
leak additional information. Speci(cid:128)cally, an accepting proof πi for mi is uniquely determined given C, mi,
and therefore leaks no additional information about m apart from C, mi, thus providing information-
theoretic privacy for m[−i]. (cid:145)e same holds for aggregated proofs, which use no information except for
the commitments, the proofs, and the messages being opened.
Scheme. Let (Setup0, Commit0, Prove0, Aggregate0, Verify0) denote our non-private scheme. Our private
scheme is as follows:
Setup(1λ, 1N−1). Run Setup0(1λ, 1N ).
Commit(m; r ← Zp). Run Commit0(m(cid:107)r).
Prove(i, m, r). Run Prove0(i, m(cid:107)r).
17
(cid:145)e remaining algorithms Verify and Aggregate are exactly as before.
Proof of binding. Follows from binding of the underlying scheme.
Proof of privacy. We construct the simulator as follows:
Setup∗(1λ, 1N−1). Same as Setup with td = (α).
Commit∗(; r ← Zp). Outputs C ← gr
.
Prove∗(α, r, i, mi). Computes C ← gr
and outputs
1
1
πi = CαN +1−i · g
−αN +1mi
1
(cid:145)is simulator is perfect, in the sense that the real and the simulated distributions are identical, rather than
merely close, as can be seen by the following simple hybrid argument:
• First, we replace (Setup, Prove) with (Setup∗, Prove∗). Here, we think of Prove∗ as taking input the
commitment C (as output by Commit) instead of r. (cid:145)is follows from the fact that Setup, Setup∗ are
identically distributed, and the output of Prove∗ is identical to the output of Prove for every given
pp, C, i, mi (because it is the only input that will pass veri(cid:128)cation).
• Next, we replace Commit with Commit∗. (cid:145)is follows from the fact that the output of each Commit
is a uniformly random group element in G1; this extends readily to the se(cid:139)ing with multiple
commitments.
)r(cid:48). (cid:145)is
Rerandomization Note that a commitment can be rerandomized via multiplication by (gαN
procedure will allow us, in particular, to hide the fact that a pre- and a post-update commitment are related.
1
5 Pointproofs in Blockchains
In this section, we describe how Pointproofs can result in signi(cid:128)cant e(cid:129)ciency improvements in blockchain
applications and empirically evaluate their performance.
Background on Blockchains For our purposes, a blockchain is an append-only public ledger that
consists of blocks, with every block containing some number of transactions. (cid:145)e fundamental problem
in blockchains is to agree on a new block. Regardless of how this problem is solved, this agreement
involves someone proposing a block, and then multiple parties, whom we will call validators, verifying
that the transactions included in the proposed block are valid. Who these validators are is not essential
for our purposes: they may be chosen by some selection method (as is o(cid:137)en the case in the proof-
of-stake blockchains) or self-selected (as in the proof-of-work blockchains). Similarly, the underlying
consensus protocol may be randomized and select a commi(cid:139)ee to certify each block of transactions (as
in Algorand [GHM+17], Ouroboros [DGKR18], Snow White [DPS19], (cid:145)underella [PS18]) or mine based
on the heuristic longest-chain rule (as in Bitcoin [Nak09] and Ethereum [But14]).
Simple transactions send money from one account to another. More complex transactions may be
veri(cid:128)ed by a complicated piece of code, known as a smart contract. Execution of the smart contract
may also depend on its memory. For example, a smart contract may implement the rules of a securities
exchange, and its memory may be used to store the holdings of various entities in the exchange. A
transaction may be valid or invalid depending on the values stored in some of the memory locations;
it may also modify memory locations upon successful execution.
18
(cid:145)us, to validate transactions, validators need to know the current state of the account balances, or,
more generally, of the values stored in the memory of various smart contracts. Some participants (so-called
“archival nodes”) may choose to maintain the entire state of all balances and smart contracts and perhaps
even provide access to it as a service. However, maintaining this state increases the memory requirements
on transaction validators, making participation in the consensus protocol more costly. We would like to
permit participation by some validators who are not archival node and thus do not incur the high storage
cost.
To reduce the amount of storage required of validators, many authors (including [ST99, Mil12, Whi15,
Tod16, But17, Dra17, RMCI17, CPZ18, BBF19]) proposed that validators instead store commitments to
vectors of relevant values instead of the values themselves. ((cid:145)ese proposals are sometimes referred to
as “stateless clients” or “stateless blockchains.”) Transactions would then include the values on which
they depend, together with the proofs of correctness of these values with respect to the commitments
stored by the validators (which the validators would update a(cid:137)er successful transactions). (cid:145)is approach
suggests a natural tradeo(cid:130) between storage, bandwidth, and computation. Ideal commitment schemes for
this application would have small commitments and proof sizes and add li(cid:139)le computation and bandwidth
overheads to the validators.
5.1 Accounts with large memory for smart contracts
We now focus on smart-contract-based transactions. We abstract the model of computation and describe
how to apply Pointproofs to save on storage and bandwidth requirements. Subsequently, in Section 5.2,
we compare our application of Pointproofs in smart contracts with alternative designs.
Modeling smart contracts We abstract smart contracts using the following model.
• (cid:145)e system has multiple accounts. Each account a is associated with a smart contract Pa (a predicate)
and account memory ma = (m1, . . . , mN ) (a sequence of values).
• A transaction T involves one or more accounts. If it involves account a, it may need to read and
perhaps modify ma at some locations S ⊆ [N ], changing those entries from ma[S] to m(cid:48)
a[S]. (cid:145)e
transaction T is valid only if Pa(T, ma[S]) = 1; if so, the transaction computes possibly new values
for m(cid:48)
a[S].
In a basic implementation without commitments, each validator would store account memory ma for
every account a in order to be able to validate the transactions; the validators would update this memory
whenever a transaction modi(cid:128)es it.
Using Pointproofs in smart contracts. We can use Pointproofs to reduce validator storage as follows
(see Figure 1):
• (cid:145)e public parameters are generated as discussed in Section 4.1 and either hard-coded into the
so(cid:137)ware or posted on the blockchain.
• (cid:145)e owner of account a holds (Pa, ma) and generates a commitment Ca to ma using Commit.
• Each validator stores (Pa, Ca) instead of (Pa, ma). Here we assume the predicate Pa is small and can
be stored on-chain or hardcoded in the blockchain platform and called by “reference”. (Alternatively,
it may be included in the memory of the account ma.)
19
tx1
S1
tx2
S2
tx3
S3
P1, m1
P2, m2
P3, m3
account 1
account 2
account 3
(m1[S1], ˆπ1)
(m2[S2], ˆπ2)
(m3[S3], ˆπ3)
ˆπ1, ˆπ2, ˆπ3 (cid:55)→ π
block proposer
{ma[Sa]}a=1,2,3, π
stores {Pa, Ca}a=1,2,3