                        $pattern .= ')*';
                    }   
                    $pattern .= $ra[$i][$j];   
                }   
                $pattern .= '/i';    
                $replacement = substr($ra[$i], 0, 2).''.substr($ra[$i], 2);
                $val = preg_replace($pattern, $replacement, $val);
                if ($val_before == $val) {    
                    $found = false;    
                }
            }    
        }    
        return $val;    
    }
简单来说这里的处理流程就是对你输入的字符串进行一个检测是否符合，随即就是看你传递的字符串中是不是包含一些标签、事件这种关键字，如果包含的话，那么就会对其进行一个替换操作。最后再将处理完的值返回出来。  
到了这里也就将安全过滤文件的一个大致流程分析完了，继续回到`global.php`往下读
    if(is_file(LIB_PATH.'webscan360/360safe/360webscan.php')){
     require_once(LIB_PATH.'webscan360/360safe/360webscan.php');
    }
可以看到这里判断是否存在`360webscan.php`这个文件，如果存在的话就进行引入。其里边的模式大致与上面分析的一致，因此不做分析，只是规则不同。也就是说如果挖掘一些`XSS`、`SQL注入`等漏洞并且两个安全过滤文件已生效的话，那么就需要考虑绕过两个安全过滤文件。  
然后继续往下看`global.php`代码
    include_once(LIB_PATH.'public.function.php');
    include_once(LIB_PATH.'public.domain.php');
    include(LIB_PATH.'public.url.php');
    include(PLUS_PATH.'seo.cache.php');
`LIB_PATH.'public.function.php'`
这个文件是一个公共函数库，在我们使用危险函数回溯方法的时候，可以看看这个公共函数库里面的函数，然后根据函数再回溯。  
大致的审计流程就是这样，接下来直接进入到漏洞所在处：`/member/user/model/expectq.class.php`
    function save_action(){
      $IntegralM=$this->MODEL('integral');
      if($_POST['submit']){
          $_POST=$this->post_trim($_POST);
       $eid=(int)$_POST['eid'];
       $data['doc']=str_replace("&","&",$_POST['doc']);
       $_POST['lastupdate']=mktime();
       $_POST['integrity']=100;
       unset($_POST['eid']);
       unset($_POST['submit']);
       unset($_POST['doc']);
       if(!$eid){
           /**无关要紧代码省略**/
       }else{
        $_POST['height_status']='0';
        $this->obj->update_once("resume_expect",$_POST,array("id"=>$eid));
        $nid=$this->obj->update_once("resume_doc",$data,array("uid"=>$this->uid,"eid"=>$eid));
        if($nid){
         $this->obj->update_once('resume',array('lastupdate'=>time()),array('uid'=>$this->uid));
         $this->obj->member_log("更新粘贴简历",2,2);
         $this->ACT_layer_msg("更新成功！",9,"index.php?c=resume");
        }else{
         $this->ACT_layer_msg("更新失败！",8,"index.php?c=resume");
        }
        }
      }
     }
正常函数不正常用法指的是：`update_once("resume_doc",$data,array("uid"=>$this->uid,"eid"=>$eid));`
这里，这个时候跟进内部里面看一下。
    /*
    我们来记录下传递进来的参数分别是什么
    $table 表名
    $data 传递的数据
    $w where条件
    */
     function update_once($table,$data=array(),$w=''){ 
      $this->db->connect();
      $value=array();
      $where=array();
      include(PLUS_PATH.'dbstruct.cache.php');//包含了一个文件，咱们后边再跟入一下。
      $TableFullName=$this->def.$table;//这里的结果最后是表前缀(phpyun_)拼接上传进来的表名(resume_expect)。最后完整的表名为:phpyun_resume_expect
      if(is_array($$TableFullName)){ 
          $fields=array_keys($$TableFullName);
      }
    /*
    这里判断的是可变变量是不是为一个数组，也就是 `$TableFullName`变量的值前面加上一个`$`.结果为：$phpyun_resume_expect。
    但是我们全文中并没有这个变量，这个时候就要注意了看代码附近有没有包含引入什么文件，有的话就需要跟入进去看看这个变量的值是什么。
    最后在dbstruct.cache.php这个代码文件中发现该变量就是一个以表名定义的一个数组：
    $phpyun_resume_expect=array('id'=>'int(11)','uid'=>'int(11)','name'=>'varchar(25)' 因为太多后边省略); 这里存放的就是phpyun_resume_expect这张表的表结构。
    可以判断$$TableFullName为一个数组，因此走进真区间。
    紧接着调用array_keys函数取这个数组的全部键，也就是将$phpyun_resume_expect数组里面的键：`id`、`uid`等键取出来存在$fields中。这里只取键不取值。
    */
      if(is_array($fields)){
       if(is_array($data)){
        foreach($data as $key=>$v){
         if(in_array($key,$fields)){
          $v = $this->FilterStr($v);
          $value[]="`".$key."`='".$this->db->escape_string($v)."'";
         }
        }
        /*
            这里可以看成前面讲的全局过滤文件那样： foreach($_POST as $key=>$v)。
            因为传递进来的是整个POST，所以可以看成这种方式。
            然后判断你传递进来的数据键是不是在$fields中。
            也就是会判断你传递进来的键是不是属于这张表的字段。如果不是的话那么就不会处理。
            如果在表字段里面就会进行数据的拼接，比如你传递过来的数据为：content=test&user_id=1
            最后拼接完给$value数组的数据呈现如下：
            array(
                [0]=>`content`='test'
                [1]=>`user_id`='1'
            )
        */
       }
       if(is_array($w)){
        //这里where条件的处理
        foreach($w as $key=>$v){
         if(in_array($key,$fields)){
          $v = $this->FilterStr($v);
          $where[]="`".$key."`='".$this->db->escape_string($v)."'";
         }
        }
        $where=@implode(" and ",$where);
       }else{
        $where = $w;
       }
       $value=@implode(",",$value);//最后会将$value数组以逗号分割成字符串，也就是：content=test,user_id=1 这种形式
       return $this->DB_update_all($table,$value,$where);//我们继续跟入DB_update_all这个方法看看做了些什么操作。
      }
     }
`DB_update_all函数：`
    function DB_update_all($tablename, $value, $where = 1,$pecial=''){
      if($pecial!=$tablename){
       $where =$this->site_fetchsql($where,$tablename);
      } 
         $SQL = "UPDATE `" . $this->def . $tablename . "` SET $value WHERE ".$where; 
            $this->db->query("set sql_mode=''");
      $return=$this->db->query($SQL);
      return $return;
     }
首先我们看到最重要的一行代码，也就是最后的SQL语句拼接。  
最终将会拼接成如下的SQL语句：  
`UPDATE phpyun_resume_expect SET content='test',user_id='1' where id = $eid`  
也就是我们现在已经知道了`$value`是可控的，最终将会以一个修改的形式对数据库字段进行修改，所以就相当于我们可以控制这张表的全部字段的数据了，也就是任意修改某个字段的值。  
最后一个有意思的地方，可以看到`where`条件，仅仅对`id`也就是简历id作为一个条件进行修改这条数据并没有以当前登陆会员的会员id进行判断，按照正常`where`应该是这样的：`where
uid = 当前登陆会员id AND id = $eid`
而它这里并没有对`uid`进行判断，所以这里是导致越权的，只要我们知道了简历ID，就可以修改其它会员的简历信息。
最后来分析一下漏洞利用前提条件是什么：
  * 1.必须是`POST`并且必须包含`submit`参数
  * 2.`$eid`必须要有值，并且需要为有效的简历ID，这里的`$eid`对应的其实就是简历ID。
  * 3.传递的参数必须是目标表的字段才能修改成功。
如果说想要修改简历为置顶的话，我们可以看到数据库表内的字段：`top`、`topdate` 一个是置顶状态，一个是置顶时间。  
可以看到目前简历状态是未置顶的。  
以`eid`做为修改条件，只要在请求包中新增需要修改的参数以及参数值即可。
最后可以看到这里有一个`uid`字段，那么我们就可以以`id`做为条件然后修改`uid`值，将其它会员的简历归属改成我的。  
也就是只要在数据包加个`uid=2`就可以将`id = 3`的这条数据中`uid`这个字段的值改为2