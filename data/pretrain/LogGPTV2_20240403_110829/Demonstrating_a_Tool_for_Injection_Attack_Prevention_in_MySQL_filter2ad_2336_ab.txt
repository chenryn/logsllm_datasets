application source code to use the mechanism (unlike
[6], [2], [3], [20], [25]);
No application source code analysis – SEPTIC does
not need to do source code analysis to ﬁnd the queries
in the source code of the web application (unlike [6],
[1]);
Learning – SEPTIC is able to learn the query models
in training mode or incrementally in normal mode
(see Section II-E). Similarly to GreenSQL [5] and
Percona Tools [12], it needs information on the queries
that it will be monitored to be able to detect attacks.
However, SEPTIC has two different ways of learning
that information, whereas these systems have only one
(during a training phase).
C. Modules
SEPTIC contains four main modules, which are presented
in the following paragraphs:
1) QS&QM manager: MySQL parses and validates a
query, storing the query elements in a stack data structure.
SEPTIC receives this structure and creates another stack with
that data, the query structure (QS). Each node of the stack
represents a query element belonging to a category (e.g.,
ﬁeld, function, operator) and information about it – data type
(e.g., integer, string) and data (e.g., user inputs). Each node
of the stack has one of the following formats: (cid:2)ELEM TYPE,
ELEM DATA(cid:3) or (cid:2)DATA TYPE, DATA(cid:3).
as
an example
Figure 2(a) depicts
the QS for
the query SELECT * FROM tickets WHERE reservID =
’ID34FG’ AND creditCard = 1234. This query returns all
data associated with a ﬂight ticket, after an user provided the
ticket reservation ID and the last four digits of the credit card
number. The ﬁgure shows from bottom to top the SQL clauses
and its elements. As we can observe, each element (a line in the
ﬁgure) is represented either as ELEM TYPE or as DATA TYPE.
After the QS is built, the QS&QM manager requests from
the ID generator module an identiﬁer for the query (ID). Next,
it searches the QM learned store for a query model (QM) with
the same identiﬁer. If the QM is found, the QS and the QM are
sent to the attack detector module and the query processing
continues from there. Otherwise, the QM of the query is built
from the QS, and is associated with the previously created ID.
Finally, it is stored in the QM Learned store.
To create the QM from the QS the following operation is
performed: DATA information, in all (cid:2)DATA TYPE, DATA(cid:3) nodes
of the QS, are replaced by a special value ⊥. Figure 2(b) shows
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:11)(cid:12)(cid:3)(cid:1)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:6)(cid:3)(cid:7)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:11)(cid:6)(cid:8)(cid:14)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:11)(cid:12)(cid:3)(cid:1)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:22)(cid:7)(cid:23)(cid:6)(cid:3)(cid:24)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:11)(cid:6)(cid:8)(cid:14)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:10)(cid:3)(cid:4)
(cid:13)
(cid:1)(cid:2)(cid:3)(cid:4)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:11)(cid:12)(cid:3)(cid:1)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:6)(cid:3)(cid:7)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:10)(cid:3)(cid:4)
(cid:13)
(cid:31)
(cid:30)
(cid:15)(cid:16)(cid:17)(cid:18)(cid:19)(cid:20)(cid:1)(cid:21)(cid:16)(cid:18)
(cid:11)(cid:6)(cid:8)(cid:14)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:15)(cid:16)(cid:17)(cid:18)(cid:19)(cid:20)(cid:1)(cid:21)(cid:16)(cid:18)
(cid:13)
(cid:11)(cid:12)(cid:3)(cid:1)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:22)(cid:7)(cid:23)(cid:6)(cid:3)(cid:24)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:13)
(cid:31)
(cid:30)
(cid:5)(cid:6)(cid:3)(cid:4)(cid:7)(cid:8)
(cid:16)(cid:17)(cid:25)(cid:17)(cid:16)(cid:26)(cid:6)(cid:4)
(cid:11)(cid:6)(cid:8)(cid:14)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:16)(cid:17)(cid:25)(cid:17)(cid:16)(cid:26)(cid:6)(cid:4)
(cid:22)(cid:8)(cid:14)(cid:8)(cid:1)(cid:7)(cid:5)(cid:11)(cid:6)(cid:8)(cid:14)(cid:4)
(cid:27)
(cid:22)(cid:8)(cid:14)(cid:8)(cid:1)(cid:7)(cid:5)(cid:11)(cid:6)(cid:8)(cid:14)(cid:4)
(cid:11)(cid:23)(cid:2)(cid:9)(cid:5)(cid:7)(cid:10)(cid:28)(cid:14)(cid:8)
(cid:20)(cid:19)(cid:15)(cid:29)(cid:17)(cid:20)(cid:25)
(cid:11)(cid:23)(cid:2)(cid:9)(cid:5)(cid:7)(cid:10)(cid:28)(cid:14)(cid:8)
(cid:27)
(cid:20)(cid:19)(cid:15)(cid:29)(cid:17)(cid:20)(cid:25)
(a) Query structure (QS)
(b) Query model (QM)
Fig. 2: QS and QM of a query.
the QM for the query presented above, where we can observe
these substitutions.
The ID is formed by composing distinct
2) ID generator: SEPTIC is ﬁrst trained to learn the query
models of the queries issued by the application, associating to
each a unique ID. Later on, in normal mode, for each query
received, it is necessary to compute a query identiﬁer and look
(in QM Learned store) if there is a query model with this ID.
types of in-
formation related to the query. We call identiﬁers to these
information types. One of these identiﬁers may be (optionally)
provided by the application or SSLE (e.g., PHP Zend) and the
other is (mandatorily) created by SEPTIC. The ﬁrst identiﬁer
can take an arbitrary value deﬁned by the programmer. It
is sent
to MySQL inside a comment (i.e., /* external
identifier */) that is concatenated with the query. The
second identiﬁer is produced by SEPTIC based on the QM
in order to ensure uniqueness.
The ID generator receives a request from the QS&QM
manager module. First, it determines if the query comes with
an identiﬁer (an external identiﬁer), which is then retrieved.
Second, it creates its own (internal) identiﬁer. The ID is the
concatenation of both identiﬁers (or just the internal identiﬁer
in case the other does not exist).
3) Attack detector: This module is executed only during
the normal mode of operation. It performs two kinds of attack
discovery, namely SQLI and stored injection detection.
•
•
SQLI detection – is implemented by comparing the
query structure with the query model. The module
executes an algorithm with two steps: (1) it veriﬁes
if the number of nodes of QS and QM are equal;
(2) checks, for each node of QS, if its element is
equal to the corresponding node in the QM. Step (2)
is only carried out if step (1) does not fail. An attack
is detected if any of these steps fails. In such case,
the logger module is triggered. Otherwise, the query
is delivered to MySQL to be executed.
Stored injection detection – is performed for INSERT
and UPDATE commands. The module executes two
steps per query: (1) a lightweight checking of the user
input is done to determine if it contains characters
associated with malicious actions (e.g., ’’
for stored XSS), which are then used to ﬁnd out the
553
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:13 UTC from IEEE Xplore.  Restrictions apply. 
potential type of attack; (2) a more precise validation
is run, tailored to conﬁrm with higher certainty the
attack. The second step is executed only if the ﬁrst
ﬂags problems. If an attack is detected, the logger
module is activated; otherwise, the query execution
proceeds.
4) Logger: This module is used to register the events
observed by SEPTIC, namely an attack being discovered or
a new query reaches the database (in which case there is no
query model). The module is activated by the attack detector
and QS&QM manager modules.
An attack record contains the query received by MySQL,
the query identiﬁer,
its query model, and the step of the
algorithm that found the problem (these two last items are
registered for a SQLI attack). For a new observed query, the
logger registers the received query, the query model and its
query identiﬁer.
D. Attack detection examples
This section presents two detection examples to illustrate
the process.
is
that
the
database,
example
introduced previously.
1) SQLI attack detection: Consider the query SELECT *
FROM tickets WHERE reservID = ? AND creditCard
= ?, based on the
It
accepts two inputs represented by a question mark. The
corresponding query model
shown in Figure 2(b).
Consider a second-order SQLI attack: (1) a malicious user
leads
provides an input
the application to insert
i.e.,
in
concat(ID34FG,U+02BC- - )
ID34FG’- - with the prime represented in Unicode as
U+02BC; (2) later this data is retrieved from the database and
inserted in the reservID ﬁeld in the query above, resulting in
the query SELECT * FROM tickets WHERE reservID =
concat(ID34FG,U+02BC- - ) AND creditCard = 0; (3)
MySQL parses and validates the query, decoding U+02BC into
a prime, and the resulting query becomes SELECT * FROM
tickets WHERE reservID=ID34FG. This attack modiﬁes
the structure of the query. Figure 3 presents the QS for this
query. When the query is issued, SEPTIC compares the QS
with the QM during structural veriﬁcation (ﬁrst step). This
comparison shows that they do not match as the number of
nodes is different, detecting the attack.
input ID34FG’ AND 1=1- - is inserted in the reservID ﬁeld.
The resulting query is SELECT * FROM tickets WHERE
reservID=ID34FG AND 1=1. Figure 4 represents the query
structure of this query. When the query is issued, SEPTIC
compares QS with QM (Figure 4 with Figure 2(b)). First,
it checks that they match, as the number of items of both
structures is equal; then, it observes that the (cid:2)INT ITEM, 1(cid:3)
node from QS (fourth row in Figure 4) does not match with
the (cid:2)FIELD ITEM, CREDITCARD(cid:3) node from QM (fourth row
in Figure 2(b)). The attack is ﬂagged due to this difference.
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:11)(cid:12)(cid:3)(cid:1)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:6)(cid:3)(cid:7)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:6)(cid:3)(cid:7)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:11)(cid:12)(cid:3)(cid:1)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:22)(cid:7)(cid:23)(cid:6)(cid:3)(cid:24)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:11)(cid:6)(cid:8)(cid:14)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:10)(cid:3)(cid:4)
(cid:13)
(cid:1)
(cid:1)
(cid:13)
(cid:5)(cid:6)(cid:3)(cid:4)(cid:7)(cid:8)
(cid:16)(cid:17)(cid:25)(cid:17)(cid:16)(cid:26)(cid:6)(cid:4)
(cid:22)(cid:8)(cid:14)(cid:8)(cid:1)(cid:7)(cid:5)(cid:11)(cid:6)(cid:8)(cid:14)(cid:4)
(cid:27)
(cid:11)(cid:23)(cid:2)(cid:9)(cid:5)(cid:7)(cid:10)(cid:28)(cid:14)(cid:8)
(cid:20)(cid:19)(cid:15)(cid:29)(cid:17)(cid:20)(cid:25)
Fig. 4: QS of query with ID34FG’ AND 1=1 input as re-
servID.
registers new users. Consider
2) Stored XSS attack detection: Consider a web ap-
also that
plication that
a malicious user
inserts as his ﬁrst name , which is a JavaScript
code. When SEPTIC receives the query, it does the ﬁltering
step (ﬁrst step) and ﬁnds two characters associated with XSS,
’’. So, it calls the plugin that detects stored XSS
attacks. This plugin inserts this input in a web page and calls
an HTML parser. Then, it ﬁnds that the input contains a script
and ﬂags a stored XSS attack.
E. Operation modes and actions
As mentioned above, before performing the detection of
attacks, SEPTIC has to learn query models of the queries that
might be called in the application. Therefore, SEPTIC has two
main operation modes: training mode and normal mode.
•
(cid:11)(cid:12)(cid:3)(cid:1)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:13)
(cid:22)(cid:7)(cid:23)(cid:6)(cid:3)(cid:24)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:11)(cid:6)(cid:8)(cid:14)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)
(cid:5)(cid:6)(cid:3)(cid:4)(cid:7)(cid:8)
(cid:16)(cid:17)(cid:25)(cid:17)(cid:16)(cid:26)(cid:6)(cid:4)
(cid:22)(cid:8)(cid:14)(cid:8)(cid:1)(cid:7)(cid:5)(cid:11)(cid:6)(cid:8)(cid:14)(cid:4)
(cid:27)
(cid:11)(cid:23)(cid:2)(cid:9)(cid:5)(cid:7)(cid:10)(cid:28)(cid:14)(cid:8)
(cid:20)(cid:19)(cid:15)(cid:29)(cid:17)(cid:20)(cid:25)
Fig. 3: QS of query SELECT * FROM tickets WHERE
reservID = ? AND creditCard = ? with ID34FG’- - as
reservID.
As a second example consider a syntax mimicry attack,