LKM
/dev/kmem
/dev/kmem
/dev/kmem
LKM
/dev/mem
DKOM†
DKOM
Driver
Driver
Driver
Driver
Driver
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
partial‡
(cid:2)
(cid:2)
(cid:2)
Outcome
insmod fails
insmod fails
insmod fails
insmod fails
insmod fails
insmod fails
insmod fails
insmod fails
Installation fails silently
insmod fails
insmod fails
Installation fails
Installation fails
Installation fails
insmod fails
Installation crashes
Driver loading fails
Driver loading fails
Driver loading fails
Driver loading fails
Driver loading fails
Driver loading fails
Driver loading fails
Break Mode
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
Prevented? Outcome
Seg. fault
Seg. fault
Seg. fault
Seg. fault
Seg. fault
Seg. fault
Seg. fault
Seg. fault
Seg. fault
Seg. fault
Seg. fault
Seg. fault
Seg. fault
Seg. fault
Seg. fault
Seg. fault
BSOD§
BSOD
BSOD
BSOD
BSOD
BSOD
BSOD
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
our experimental results: NICKLE is able to detect and prevent the execution of
malicious kernel code in all experiments using both rewrite and break response
modes. Finally, we note that NICKLE in all three VMMs is able to achieve the
same results. In the following, we present details of two representative experi-
ments. Some additional experiments are presented in [16].
SucKIT Rootkit Experiment. The SucKIT rootkit [18] for Linux 2.4 infects
the Linux kernel by directly modifying the kernel through the /dev/kmem inter-
face. During installation SucKIT ﬁrst allocates memory within the kernel, injects
its code into the allocated memory, and then causes the code to run as a function.
Figure 2 shows NICKLE preventing the SucKIT installation. The window on the
left shows the VM running RedHat 8.0 (with 2.4.18 kernel), while the window on
the right shows the NICKLE output. Inside the VM, one can see that the SucKIT
installation program fails and returns an error message “Unable to handle ker-
nel NULL pointer dereference”. This occurs because NICKLE (operating in break
mode) foils the execution of injected kernel code by fetching a string of zeros from
the shadow memory, which causes the kernel to terminate the rootkit installation
program. Interestingly, when NICKLE operates in rewrite mode, it rewrites the
malicious code and forces it to return −1. However, it seems that SucKIT does not
bother to check the return value and so the rootkit installation just fails silently
and the kernel-level functionality does not work.
In the right-side window in Figure 2, NICKLE reports the authentication
and shadowing of sequences of kernel instructions starting from the initial BIOS
Guest-Transparent Prevention of Kernel Rootkits
13
Fig. 2. NICKLE/QEMU+KQEMU foils the SucKIT rootkit (guest OS: RedHat 8.0)
bootstrap code to the kernel text as well as its initialization code and ﬁnally to
various legitimate kernel modules. In this experiment, there are ﬁve legitimate
kernel modules, parport.o, parport pc.o, ieee1394.o, ohci1394, and autofs.o, all
authenticated and shadowed. The code portion of the kernel module begins with
an oﬀset of 0x60 bytes in the ﬁrst page. The ﬁrst 0x60 bytes are for the kernel
module header, which stores pointers to information such as the module’s name,
size, and other entries linking to the global linked list of loaded kernel modules.
This is another example of mixed kernel pages with code and data in Linux
(Section 2.2).
FU Rootkit Experiment. The FU rootkit [19] is a Windows rootkit that
loads a kernel driver and proceeds to manipulate kernel data objects. The ma-
nipulation will allow the attacker to hide certain running processes or device
drivers loaded in the kernel. When running FU on NICKLE, the driver is unable
to load successfully as the driver-speciﬁc initialization code is considered unau-
thorized kernel code. Figure 3 compares NICKLE’s two response modes against
FU’s attempt to load its driver. Under break mode, the OS simply breaks with
a blue screen. Under rewrite mode, the FU installation program fails (“Failed to
initialize driver.”) but the OS does not crash.
4.2 Impact on Performance
To evaluate NICKLE’s impact on system performance we have performed
benchmark-based measurements on both VMMs – with and without NICKLE.
The physical host in our experiments has an Intel 2.40GHz processor and 3GB of
RAM running Ubuntu Linux 7.10. QEMU version 0.9.0 with KQEMU 1.3.0pre11
or VirtualBox 1.5.0 OSE is used where appropriate. The VM’s guest OS is
Redhat 8.0 with a custom compile of a vanilla Linux 2.4.18 kernel and is
started inuniprocessor mode with the default amount of memory (256MB for
14
R. Riley, X. Jiang, and D. Xu
(a) Under break mode
(b) Under rewrite mode
Fig. 3. Comparison of NICKLE/QEMU+KQEMU’s response modes against the FU
rootkit (guest OS: Windows 2K)
Table 2. Software conﬁguration for performance evaluation
Item Version Conﬁguration
Redhat 8.0
Using Linux 2.4.18
Item
Apache
Version Conﬁguration
2.0.59
Using the default high-performance
conﬁguration ﬁle
Kernel 2.4.18
Standard kernel compilation ApacheBench 2.0.40-dev -c3 -t 60 
Unixbench
4.1.0
-10 index
Table 3. Application benchmark results
QEMU+KQEMU
VirtualBox
Benchmark
Kernel Compiling
insmod
Apache
w/o NICKLE w/NICKLE Overhead w/o NICKLE w/ NICKLE Overhead
231.490s
0.088s
233.529s
0.095s
0.87%
7.34%
0.65%
351.714 req/s 349.417 req/s
463.140 req/s 375.024 req/s
156.482s
0.035s
168.377s
0.050s
7.06%
30.00%
19.03%
VirtualBox and 128MB for QEMU+KQEMU). Table 2 shows the software con-
ﬁguration for the measurement. For the Apache benchmark, a separate ma-
chine connected to the host via a dedicated gigabit switch is used to launch
ApacheBench. When applicable, benchmarks are run 10 times and the results
are averaged.
Three application-level benchmarks (Table 3) and one micro-benchmark
(Table 4) are used to evaluate the system. The ﬁrst application benchmark is
a kernel compilation test: A copy of the Linux 2.4.18 kernel is uncompressed,
conﬁgured, and compiled. The total time for these operations is recorded and
a lower number is better. Second, the insmod benchmark measures the amount
of time taken to insert a module (in this case, the ieee1394 module) into the
kernel and again lower is better. Third, the ApacheBench program is used to
measure the VM’s throughput when serving requests for a 16KB ﬁle. In this
case, higher is better. Finally, the UnixBench micro-benchmark is executed to
evaluate the more ﬁne-grained performance impact of NICKLE. The numbers
Guest-Transparent Prevention of Kernel Rootkits
15
Table 4. UnixBench results (for the ﬁrst two data columns, higher is better)
QEMU+KQEMU
VirtualBox
Benchmark w/o NICKLE w/NICKLE Overhead w/o NICKLE w/ NICKLE Overhead
1843.1
605.8
205.4
2511.8
4837.5
7249.9
4646.9
92.1
259.2
2193.3
1172.6
1768.6
543.0
178.2
2415.7
4646.9
7134.3
4590.9
85.3
239.8
2179.9
1108.7
4.04%
10.37%
13.24%
3.83%
3.94%
1.59%
1.21%
7.38%
7.48%
0.61%
5.45%
Dhrystone
Whetstone
Execl
File copy 256B
File copy 1kB
File copy 4kB
Pipe throughput
Process creation
Shell scripts (8)
System call
Overall
659.3
256.0
126.0
45.5
67.6
128.4
41.7
124.7
198.3
20.9
106.1
660.0
256.0
127.3
46
68.2
127.4
40.7