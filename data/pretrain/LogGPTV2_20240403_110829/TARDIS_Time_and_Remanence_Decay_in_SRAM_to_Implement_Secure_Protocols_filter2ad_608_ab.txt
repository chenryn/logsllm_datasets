cedure MEASURE TEMPERATURE stores inside-the-chip
temperature in the ﬂash memory upon power-up. The pro-
cedure DECAY calls the TEMPERATURE ANALYZE func-
tion to decide if the temperature changes are normal.
TIME: The TARDIS TIME procedure returns time and
decay. The precision of the time returned can be derived
from the decay.
If the memory decay has not started
(decay = 0), the procedure returns {time,0} meaning that
the time duration is less than time. If the SRAM decay
has started but has not ﬁnished yet (0 ≤ decay ≤ 50%),
the return value time is an estimate of the elapsed time
based on the decay. If the SRAM decay has ﬁnished
(decay (cid:39) 50%), the return result is {time,50} meaning
that the time elapsed is greater than time.
ESTIMATION: The procedure ESTIMATE uses a lookup
table ﬁlled with entries of decay, temperature, and time
stored in non-volatile memory. This table is computed
based on a set of experiments on SRAM in different tem-
peratures. Once the time is looked up based on the mea-
sured decay and the current temperature, the result is
returned as time by the ESTIMATE procedure. The pre-
compiled lookup table does not necessarily need to be
calibrated for each chip as we have observed that chip-to-
chip variation affects decay only negligibly (Section 6).
3.1 TARDIS Performance
The two most resource-consuming procedures of the
TARDIS are INIT (initializing parts of the SRAM as well
as measuring and storing the temperature) and DECAY
(counting the zero bits and measuring the temperature).
Table 3 shows that energy consumed in total by these two
procedures is about 48.75 µJ and it runs in 15.20 ms.
Our experiments of time and energy measurements
are performed on Moo RFID[56] sensor tags that use an
MSP430F2618 microcontroller with 8 KB of memory,
and a 10 µF capacitor. A tag is programmed to perform
one of the procedures, and the start and end of the task
is marked by toggling a GPIO pin. The tag’s capacitor is
get the complete image. The microcontroller was tested in a circuit
shown in Figure 6 with a 10 µF capacitor at 26◦C. No block transfer
computation was necessary.
Algorithm 1 TARDIS Implementation
INIT(addr,size)
1
2
3
for i ← 1 to size
temperature ← MEASURE TEMPERATURE()
do memory(addr +i−1) ← 0xFF
decay ← COUNT0S(addr,size)
if TEMPERATURE ANALYZE(temperature)
DECAY(addr,size)
1
2 (cid:31) Proc. COUNT0S counts the number of 0s in a byte.
3
4 (cid:31) This procedure decides if the temperature changes
are expected considering the history of temperature
values stored in ﬂash memory.
then return decay
else return error
5
6
EXPIRED(addr,size)
1 (cid:31) Checks whether SRAM decay has ﬁnished.
2
3
4
5
decay ← DECAY(addr,size)
if (decay ≥ %50× 8× size)
then return true
else return false
TIME(addr,size,temperature)
1 (cid:31) Estimate the passage of time by comparing the
percentage of decayed bits to a precompiled table.
decay ← DECAY(addr,size)/(8× size)
time ← ESTIMATE(decay,temperature)
return {time,decay}
2
3
4
charged up to 4.5 V using a DC power supply and then
disconnected from the power supply so that the capacitor
is the only power source for the tag. In the experiments,
the DC power supply is used instead of an RF energy
supply because it is difﬁcult to disconnect the power har-
vesting at a precise capacitor voltage. We measured the
voltage drop of the capacitor and the GPIO pin toggling
using an oscilloscope. The energy consumption of the
2 ×CV 2) at the start and
task is the difference of energy ( 1
end of the task. The reported measurement is the average
of ten trials.
4 Securing Protocols with the TARDIS
There are many cases where the security of real-world
applications has been broken because the adversary could
query the device as many times as required for attack.
Table 1 gives a summary of today’s practical attacks on in-
termittently powered devices. By integrating the TARDIS,
these applications could throttle their response rates and
4
Figure 3: Programs without access to a trustworthy clock can determine time elapsed during a power failure by
observing the contents of uninitialized SRAM. These bitmap images of the TARDIS [1] represent four separate trials of
storing the bitmap in SRAM, creating an open circuit across the voltage supply for the speciﬁed time at 26◦C, then
immediately returning a normal voltage supply and reading uninitialized SRAM upon reboot. The architecture of a
contactless card is modeled using a 10 µF capacitor and a diode in series with the MSP430 microcontroller’s voltage
supply pin. The degree of decay is a function of the duration of power failure, enabling hourglass-like timekeeping
precision without power. No TARDIS was harmed or dematerialized in this experiment.
Procedure
INIT
DECAY
Energy Cost
11.53 µJ ± 2.47
37.22 µJ ± 9.31
Exec. Time
2.80 ms± 0.0¯0
12.40 ms± 1.10
Table 3: Overhead of TARDIS INIT and DECAY proce-
dures measured for TARDIS size of 256 bytes.
improve their security.
We discuss six security protocols that could strengthen
their defense against brute-force attacks by using the
TARDIS. To demonstrate the ease of integrating the
TARDIS, we have implemented and tested three of
these security protocols on the Moo, a batteryless
microcontroller-based RFID tag with sensors but without
a clock [56]. Our prototypes demonstrate the feasibility
of the TARDIS and its capabilities in practice.
Sleepy RFID Tags: To preserve the users privacy and pre-
vent traceability, one could use a “kill” command to per-
manently deactivate RFID tags on purchased items [25].
However, killing a tag disables many features that a cus-
tomer could beneﬁt from after purchase. For example,
smart home appliances (e.g., refrigerators or washing ma-
chines) may no longer interact with related items even
though they have RFID tags in them. One could tem-
porarily deactivate RFID tags by putting them to “sleep.”
However, lack of a simple and practical method to wake
up the tags has made this solution inconvenient [25]. By
providing a secure notion of time, the TARDIS makes it
possible to implement sleepy tags that can sleep temporar-
ily without requiring additional key PINs or cryptographic
solutions. We consider a time resolution on the order of
hours more appropriate for this application.
To extend the sleep time of sleepy tags, one could use a
counter along with the TARDIS as follows: upon power-
up, the tag checks the TARDIS timer, and it does not
respond to the reader if the timer has not expired. If the
TARDIS timer has expired, the tag decreases the counter
by one and initializes the TARDIS again. This loop will
continue while the counter is not zero. For example, using
a counter initially set to 1000 and a TARDIS resolution
time of 10 seconds, the tag could maintain more than 2
hours of delay. Since the tag exhausts its counter every
time it wakes up, the reader interacting with the tag has
to query the tag intermittently.
The TARDIS could prevent yet another attack on Elec-
tronic Product Code (EPC) tags that use “kill” commands.
To prevent accidental deactivation of tags, a reader must
issue the right PIN to kill a tag [12]. An adversary could
brute-force the PIN (32 bits for EPC Class1 Gen2 tags).
The TARDIS enables the RFID tag to slow down the unau-
thorized killing of a tag by increasing the delay between
queries and responses.
Squealing Credit Cards: Today, a consumer cannot de-
termine if her card has been used more than once in a
short period of time unless she receives a receipt. This
is because a card cannot determine the time elapsed be-
tween two reads as the card is powered on only when it
communicates with the reader. The TARDIS enables a
“time lock” on the card such that additional reads would be
noticed. Thus a consumer could have some assurance that
after exposing a card to make a purchase, an accidental
second read or an adversary trying to trick the card into
5
0150190210Time (sec)operator is to prevent multiple people from accessing the
system simultaneously using the same card. To achieve
this goal, systems are typically connected to a central
database that prevents a card from being used twice in
a short time frame.3 Using the TARDIS, a card could
implement delay before permitting re-entry rather than
requiring the system to check a central database.
Resurrecting Duckling: Secure communication in ad-
hoc wireless networks faces many obstacles because of
the low computing power and scarce energy resources of
these devices. Stajano et al. [45] proposed a policy in
which these devices would transiently accept a new owner.
The devices will later return to an unprogrammed status
when the owner no longer needs them, they receive a kill
command, or another predeﬁned reset condition is met.
Later, others can reclaim and reuse these devices.
For wirelessly powered devices, the TARDIS can pro-
vide a sense of time, allowing them to be “reborn” with a
new owner only if there is an extended power outage. A le-
gitimate user can continue to power the device wirelessly,
but if she wishes to transfer ownership to another entity,
she must power it down for a long enough time (deﬁned
by the user). Otherwise, the RFID tag refuses to interact
with anyone not possessing the present cryptographic key.
An example of this application is secure pairing for com-
putational contact lenses [22]. The controller could be
cryptographically bound until power disappears for more
than a few minutes. Another use of this application is to
make stealing SIM cards difﬁcult [16]. The card could
refuse to boot if it has been unpowered for a fair amount
of time.
Time-out in Authentication Protocols: Because RFID
tags rely on a reader as their source of energy, they can-
not measure the delay between a request to the reader
and its corresponding response. The tag ignorance gives
the reader virtually unlimited time to process the request
and response in an authentication algorithm. Having un-
limited response time enables the adversary to employ
various attacks on the request message with the goal of
breaking it. Using the TARDIS will limit the adversary
time frame for a successful attack. An example of these
protocols can be seen in the e-passport BAC protocol
where the reader and passport create a session key for
communication. Using The TARDIS would enable pass-
ports to enforce expiration of these keys.
Implementation and Evaluation
4.1
For the implementation of sleepy tags, squealing credit
cards, and forgiving e-passports, we have chosen the Moo,
a batteryless microcontroller-based RFID tag. We have
3Houston METRO system:
http://www.ridemetro.org/
fareinfo/default.aspx
Figure 4: Measured response time of a 2010-issued
French passport [5]. The passport imposes up to 14 sec-
onds of delay on its responses after unsuccessful execu-
tion. The delay will remain until a correct reading happens
even if the passport were removed from the reader’s ﬁeld
for a long time.
responding would be revealed. Squealing credit cards
would work similarly to today’s credit cards, but they are
empowered by the TARDIS to estimate the time between
queries and warn the user audibly (a cloister bell) if a
second read is issued to the card too quickly. A time lock
of about one minute can be considered enough for these
applications.
Forgiving E-passports: RFID tags are used in e-
passports to store holder’s data such as name, date of
birth, biometric ID, and a unique chip ID number. E-
passports are protected with techniques such as the Basic
Access Control (BAC) protocol, shielding, and passive
authentication. However, in practice, e-passports are not
fully protected. An adversary can brute-force the BAC
key in real time by querying the passport 400 times per
minute for a few weeks [6]. Another attack can accurately
trace a speciﬁc passport by sending hundreds of queries
per minute [11].
To mitigate the effect of brute-force attacks, French
e-passports have implemented a delay mechanism—we
imagine using a counter—to throttle the read rate [5].
This delay increases to 14 seconds after 14 unsuccessful
attempts (Figure 4) and would occur even if the passport
was removed from the RF ﬁeld for several days. Once the
tag is presented with an authorized reader, the delay will
be enforced and then reset to zero. The TARDIS provides
a time-aware alternative that delays unauthorized access
but ignores the previous false authentication attempts if
the passport has been removed from the reader’s range
for an appropriate duration. A time duration matching
the maximum implemented delay (14 seconds for French
passports) would be enough to implement this function.
Passback - Double-tap Prevention: In mass transporta-
tion and other similar card entry systems, the goal of the
6
SecondsRequests02468101214161820PersonalCommunicationAboutFrenchPassportsGildasAvoineUniversit´ecatholiquedeLouvain,BelgiumWeperformedsomeexperimentsontheBasicAccessControlofaFrenchpassportissuedin2010.WenoticedthatonceaBACexecutionfails(weprovidedawrongMRZtothepassport),thebehaviorofthepassportismodiﬁedasfollows:thetimetakenbythepassporttoanswertothenextMutualAuthenticatecommand(iethecommandusedintheBAC)increases.Itactuallyincreasesupto14secondsafter14unsuccessfulexecutions.Atthispoint,theresponsetimeremains14secondsaslongastheBACexecutionsfail.Figure1representstheresponsetimeofthepassportduringourexperiment(wealwayssentawrongMRZ).024681012141602468101214161820SecondsRequestsFig.1.ResponsetimeofaFrenchpassportwhenawrongMRZissent.TheexperimentshavebeendonewithanOmnikey5321.Aninterestingpointisthat,whenthepassportentersintothiskindof“protectingmode”,itstaysinthismodetillacorrectMRZisprovided.Thismeansthatremovingthepassportfromthereader’sﬁeld,evenforseveraldays,doesnotchangeanything.Forexample,let’sconsiderthatweperform14unsuccessfullBACexecutions.Severaldayslater,weperforma15thexecutionwithacorrectMRZ.Duringthis15thexecution,thepassportwilltakeabout14secondstoanswerbutwillleavethe“protectingmode”,meaningthatitwillnolongerdelayitsresponseinthenextexecutions.Thismeansthattheideasuggestedin[1](Section4.1)hasbeenimplementedintheFrenchpassport(issuedin2010)weexperimented.References1.GildasAvoine,KassemKalach,andJean-JacquesQuisquater.ePassport:SecuringInternationalContactswithContactlessChips.InGeneTsudik,editor,FinancialCryptographyandDataSecurity–FC’08,volume5143ofLectureNotesinComputerScience,pages141–155,Cozumel,Mexico,January2008.IFCA,Springer.246810121416primary power source. The TARDIS resolution time on
average was 12.03 seconds with a standard deviation of
0.11 seconds. A similar tag, which uses 100 mF, yields a
TARDIS resolution time of 145.85 seconds. These time
measurements are speciﬁc to the platform we have chosen
for our experiment. The resolution could potentially be
extended to hours using additional capacitors (Table 5).
5 Security Analysis
Depending on the application, the adversary may wish
either to slow down or to speed up the expiration of the
TARDIS. We discuss four different attacks that try to
distort the TARDIS interpretation of time.
Cooling Attacks. An adversary might try to reduce the
system’s temperature, aiming to slow down the memory
decay rate. Other works [19] have used this technique
to prevent data decay in DRAM for the purpose of data
extraction. Cooling attacks might target the TARDIS
timer in cases where the adversary needs to slow the pas-
sage of time. As explained in Algorithm 1, the TARDIS
measures and records a device’s temperature over time
and therefore it can prevent cooling attacks by observing
unexpected temperature changes.
Heating Attacks. In contrast to cooling attacks, an at-
tacker might need to speed up the TARDIS timer. For ex-
ample, someone might try to decrease the delay between
queries in order to speed up brute-force attacks. Simi-
larly to the defense against cooling attacks, the TARDIS