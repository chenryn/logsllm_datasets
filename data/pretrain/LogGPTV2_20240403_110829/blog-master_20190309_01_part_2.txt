USE_PGXS=1 make  
USE_PGXS=1 make install  
```  
### rpm安装  
```  
https://github.com/lesovsky/pgcenter/releases  
wget https://github.com/lesovsky/pgcenter/releases/download/v0.6.1/pgcenter_0.6.1_Linux_x86_64.rpm  
rpm -ivh pgcenter_0.6.1_Linux_x86_64.rpm   
[root@pg11-test ~]# rpm -ql pgcenter  
/usr/bin/pgcenter  
```  
### 举例: 使用pgcenter观察问题PID或者当前某个慢SQL的等待事件  
使用帮助  
https://github.com/lesovsky/pgcenter/blob/master/doc/examples.md  
1、找到当前慢SQL，以及对应的PID。  
```  
postgres=# select pid, now()-query_start during, query, wait_event_type, wait_event   
           from pg_stat_activity   
           where wait_event is not null order by query_start limit 1;  
  pid  |     during      |         query         | wait_event_type | wait_event   
-------+-----------------+-----------------------+-----------------+------------  
 21207 | 00:00:28.975778 | select pg_sleep(100); | Timeout         | PgSleep  
(1 row)  
```  
2、使用pgcenter profile跟踪这个PID。  
pgcenter跟踪PID时，需要给出一个采样频率（每秒采样多少次），输出的是该PID下面每条执行完后对这个QUERY的等待时间占比统计。  
```  
digoal@pg11-test-> pgcenter profile --help  
'pgcenter profile' profiles wait events of running queries  
Usage:  
  pgcenter profile [OPTIONS]... [DBNAME [USERNAME]]  
Options:  
  -d, --dbname DBNAME           database name to connect to  
  -h, --host HOSTNAME           database server host or socket directory.  
  -p, --port PORT               database server port (default 5432)  
  -U, --username USERNAME       database user name  
  -P, --pid PID                 backend PID to profile to  
  -F, --freq FREQ               profile at this frequency (min 1, max 1000)  
  -s, --strsize SIZE            limit length of print query strings to STRSIZE chars (default 128)  
General options:  
  -?, --help            show this help and exit  
      --version         show version information and exit  
Report bugs to https://github.com/lesovsky/pgcenter/issues  
```  
跟踪，例如每秒采样10次等待事件，每次间隔100毫秒。  
```  
pgcenter profile -h 127.0.0.1 -p 8001 -U postgres -d postgres -P 42616 -F 10  
LOG: Profiling process 42616 with 100ms sampling  
```  
3、制造LONG QUERY   
```  
postgres=# \d t_hintbit  
                             Table "public.t_hintbit"  
 Column |   Type   | Collation | Nullable |                Default                  
--------+----------+-----------+----------+---------------------------------------  
 id     | bigint   |           | not null | nextval('t_hintbit_id_seq'::regclass)  
 c1     | smallint |           |          |   
Indexes:  
    "t_hintbit_pkey" PRIMARY KEY, btree (id)  
postgres=# select pg_backend_pid();  
 pg_backend_pid   
----------------  
          42616  
(1 row)  
postgres=# update t_hintbit set c1=1;  
```  
观察profile  
```  
------ ------------ -----------------------------  
% time      seconds wait_event                     query: update t_b set info='test' ;  
------ ------------ -----------------------------  
97.90     47.239459 Running  
1.47       0.707298 IO.DataFileExtend  
0.63       0.304460 IO.DataFileRead  
------ ------------ -----------------------------  
100.00    48.251217  
------ ------------ -----------------------------  
% time      seconds wait_event                     query: update t_b set info='test' ;  
------ ------------ -----------------------------  
87.35     25.146099 Running  
9.47       2.727026 IO.DataFileExtend  
3.16       0.909462 LWLock.WALWriteLock  
------ ------------ -----------------------------  
99.98     28.782587  
```  
## pgcenter 原理  
1、采样各个维度统计信息表，输出统计信息。  
与perf insight , AWR 类似。  
## 参考  
[《阿里云 PostgreSQL 产品生态；案例、开发管理实践、原理、学习资料、视频；PG天天象上沙龙记录 - 珍藏级》](../201801/20180121_01.md)    
1、函数的性能诊断，PROFILE。  
[《PostgreSQL 函数调试、诊断、优化 & auto_explain & plprofiler》](../201611/20161121_02.md)    
2、内核层面的代码诊断1。  
[《PostgreSQL 代码性能诊断之 - OProfile & Systemtap》](../201505/20150509_01.md)    
3、数据库等待事件层面的性能监控。  
[《PostgreSQL Oracle 兼容性之 - performance insight - AWS performance insight 理念与实现解读 - 珍藏级》](../201901/20190125_02.md)    
4、内核层面的代码诊断2。  
[《PostgreSQL 源码性能诊断(perf profiling)指南 - 珍藏级》](../201611/20161129_01.md)    
5、数据库内核代码层面诊断3。  
[《PostgreSQL Systemtap example : autovacuum_naptime & databases in cluster》](201310/20131010_02.md)    
6、除此之外，PG社区很多性能监控、报告相关的小工具。  
[《PostgreSQL pg_top pgcenter - 实时top类工具》](../201810/20181003_01.md)    
[《PostgreSQL pgmetrics - 多版本、健康监控指标采集、报告》](../201810/20181001_03.md)    
7、AWR报告  
[《PostgreSQL AWR报告(for 阿里云ApsaraDB PgSQL)》](../201611/20161123_01.md)    
[《如何生成和阅读EnterpriseDB (PPAS(Oracle 兼容版)) AWR诊断报告》](../201606/20160628_01.md)    
8、数据库等待事件统计视图  
[《PostgreSQL 等待事件 及 等待采样统计(pg_wait_sampling)》](../201610/20161006_01.md)    
9、大量的实时统计信息视图  
[《PostgreSQL pg_stat_ pg_statio_ 统计信息(scan,read,fetch,hit)源码解读》](../201610/20161018_03.md)    
https://blog.dataegret.com/2019/03/pgcenters-wait-event-profiler.html  
https://github.com/lesovsky/pgcenter#install-notes  
https://github.com/lesovsky/pgcenter/blob/master/doc/examples.md  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")