数据元素
数据元素
数据项1数据项2
数据项1
数据项2
数据项1
数据项2
数据项1
数据项2
图1-7-1
由这些概念，给出了数据结构的定义：数据结构是相互之间存在一种或多种特定
关系的数据元素的集合。同样是结构，从不同的角度来讨论，会有不同的分类，如图
1-7-2所示。
逻辑结构
物理结构
·集合结构
·顺序存储结构
线性结构
·链接存储结构
·树形结构
·图形结构
图1-7-2
之后，我们还介绍了抽象数据类型及它的描述方法，为今后的课程打下基础。
---
## Page 39
第1章数据结构绪论
1.8结尾语
最后，我想对那些已经开始自学数据结构的同学说，可能你们会困惑、不懂、不
理解、不会应用，甚至不知所云。可实际上，无论学什么，都是要努力才可以学到真
东西。只有真正掌握技术的人，才有可能去享用它。如果你中途放弃了，之前所有的
努力和付出都会变得没有价值。学会游泳难吗？掌握英语口语难吗？可能是难，但在
掌握了的人眼里，这根本不算什么，“就那么回事呀”。只要你相信自己一定可以学得
会、学得好，既然无数人已经掌握了，你凭什么不行。
最终的结果一定是，你对着别人很牛地说：“数据结构一就那么回事。”
哎，我如此口干舌燥地投众位所好，怎么还有人打睡呢？罢了罢了，下课。
15
---
## Page 40
大话
数据结构
书笔记
---
## Page 41
第2章算法
启示
算法：
算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且
每条指令表示一个或多个操作。
循环累加
求
和
---
## Page 42
大语数据结构
2.1开场白
各位同学大家好。
上次上完课后，有同学对我说，老师，我听了你的课，感觉数据结构没什么的，
你也太夸大它的难度了。
是呀，我好像是强调了数据结构比较搞脑子，而上次课，其实还没拿出复杂的东
西来说道。不是不想，是没必要，第一次课就把你们糊弄晕，那以后还玩什么，逃课
的不就更多了吗？你们看，今天来的人数和第一次差不多，面且暂时还没有睡觉的。
今天我们介绍的内容在难度上就有所增加了，做好准备了吗？
2.2数据结构与算法关系
我们这门课程叫数据结构，但很多时候我们会讲到算法，以及它们之间的关系。
有人可能就要问了，那你到底是只讲数据结构呢，还是和算法一起讲？它们之间
是什么关系呢？干吗要放在一起？
这问题怎么回答。打个比方吧，今天是你女友生日，你打算请女友去看爱情音乐
剧，到了戏院，抬头一看一《梁山伯》18：00开演。嗯，怎么会是这样？一问才
知，今天饰演祝英台的演员生病，所以梁山伯唱独角戏。真是搞笑了，这还有什么看
头。于是你们打算去看爱情电影。到了电影院，一看海报一《罗密欧》，是不是名字
写错了，问了才知，原来饰演朱丽叶的演员因为嫌弃演出费用太低，中途退演了。制
片方考虑到已经开拍，于是就把电影名字定为《罗密欧》，主要讲男主角的心路旅程。
哎，这电影还怎么看啊？
事实上，数据结构和算法也是类似的关系。只谈数据结构，当然是可以，我们可
以在很短的时间就把几种重要的数据结构介绍完。听完后，很可能你没什么感觉，不
知道这些数据结构有何用处。但如果我们再把相应的算法也拿来讲一讲，你就会发
现，甚至开始感慨：哦，计算机界的前辈们，的确是一些很牛很牛的人，他们使得很
多看似很难解决或者没法解决的问题，变得如此美妙和神奇。
也许从这以后，慢慢地你们中的一些人会开始把你们的崇拜对象，从帅哥美女、
18
---
## Page 43
第2章算法
了。而且，这显然是一种成熟的表现，我期待你们中多一点这样的人，这样我们国家
的软件行业，也许就有得救了。
不过话说回来，现在好多大学里，通常都是把“算法”分出一门课单独讲的，也
就是说，在《数据结构》课程中，就算谈到算法，也是为了帮助理解好数据结构，并
不会详细谈及算法的方方面面。我们的课程也是按这样的原则来展开的。
2.3两种算法的比较
大家都已经学过一门计算机语言，不管学的是哪一种，学得好不好，好歹是可以
写点小程序了，现在我要求你写一个求1+2+3++100结果的程序，你应该怎么写
3
大多数人会马上写出下面的C语言代码（或者其他语言的代码）：
inti,sum-0,n-100;
for（i-1:1<-n;i++）
sumsum+1
printf（"ad"，sum）;
这是最简单的计算机程序之一，它就是一种算法，我不去解释这代码的含义了。
问题在于，你的第一直觉是这样写的，但这样是不是真的很好？是不是最高效？
此时，我不得不把伟大数学家高斯的童年故事拿来说一遍，也许你们都早已经听
过，但不妨再感受一下，天才当年是如何展现天分和才华的。
据说18世纪生于德国小村庄的高斯，上小学的一天，课堂很乱，就像我们现在下
面那些窃窃私语或者拿着手机不停摆弄的同学一样，老师非常生气，后果自然也很严
重。于是老师在放学时，就要求每个学生都计算1+2++100的结果，谁先算出来谁
先回家。
天才当然不会被这样的问题难倒，高斯很快就得出了答案，是5050。老师非常惊
讶，因为他自己想必也是通过1+2=3，3+3=6，6+4=10，，4950+100=5050这样
算出来的，也算了很久很久。说不定为了怕错，还算了两三遍。可眼前这个少年，为
何可以这么快地得出结果？
19
---
## Page 44
大话数据结构
高斯解释道：
sum=1+2+3+-+99+100
+z+“+86+66+00I=wns
2xsum=101+101+101++101+101
美100个
Y
所以sum=5050
用程序来实现如下：
inti,sum=0,n=100;
sum=（1+n）*n/2:
printf（"ed",sum）;
神童就是神童，他用的方法相当于另一种求等差数列的算法，不仅仅可以用于1
加到100，就是加到一千、一万、一亿（需要更改整型变量类型为长整型，否则会溢
出），也就是瞬间之事。但如果用刚才的程序，显然计算机要循环一千、一万、一亿次
的加法运算。人脑比电脑算得快，似乎成为了现实。
2.4算法定义
什么是算法呢？算法是描述解决问题的方法。算法（Agorithm）这个单词最早出
现在波斯数学家阿勒·花刺子密在公元825年（相当于我们中国的唐朝时期）所写的
《印度数字算术》中。如今普遍认可的对算法的定义是：
算法是解决特定问题求解步骤的描述，在计算机中表现为指令的
有限序列，并且每条指令表示一个或多个操作。
刚才的例子我们也看到，对于给定的问题，是可以有多种算法来解决的。
那我就要问问你们，有没有通用的算法呀？这个问题其实很弱智，就像问有没有
可以包治百病的药呀！
现实世界中的问题千奇百怪，算法当然也就千变万化，没有通用的算法可以解决
所有的问题。甚至解决一个小问题，很优秀的算法却不一定适合它。
算法定义中，提到了指令，指令能被人或机器等计算装置执行。它可以是计算机
指令，也可以是我们平时的语言文字。
OZ
---
## Page 45
第2章算法
为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一
组操作，每一个操作都完成特定的功能，这就是算法了。
2.5算法的特性
算法具有五个基本特性：输入、输出、有穷性、确定性和可行性。
2.5.1输入输出
输入和输出特性比较容易理解，算法具有零个或多个输入。尽管对于绝大多数算
法来说，输入参数都是必要的，但对于个别情况，如打印“helloworld！”这样的代
码，不需要任何输入参数，因此算法的输入可以是零个。算法至少有一个或多个输
出，算法是一定需要输出的，不需要输出，你用这个算法干吗？输出的形式可以是打
印输出，也可以是返回一个或多个值等。
2.5.2有穷性
有穷性：指算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每
一个步骤在可接受的时间内完成。现实中经常会写出死循环的代码，这就是不满足有
穷性。当然这里有穷的概念并不是纯数学意义的，而是在实际应用当中合理的、可以
接受的“有边界”。你说你写一个算法，计算机需要算上个二十年，一定会结束，它在
数学意义上是有穷了，可是媳妇都熬成婆了，算法的意义也不就大了。
2.5.3确定性
确定性：算法的每一步骤都具有确定的含义，不会出现二义性。算法在一定条件
下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确
定义而无歧义。
2.5.4可行性
可行性：算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限
次数完成。可行性意味着算法可以转换为程序上机运行，并得到正确的结果。尽管在
目前计算机界也存在那种没有实现的极为复杂的算法，不是说理论上不能实现，而是
---
## Page 46
大话数据结构
因为过于复杂，我们当前的编程方法、工具和大脑限制了这个工作，不过这都是理论
研究领域的问题，不属于我们现在要考虑的范围。
2.6算法设计的要求
刚才我们谈到了，算法不是唯一的。也就是说，同一个问题，可以有多种解决问
题的算法。这可能让那些常年只做有标准答案题目的同学失望了，他们多么希望存在
标准答案，只有一个是正确的，把它背下来，需要的时候套用就可以了。不过话说回
来，尽管算法不唯一，相对好的算法还是存在的。掌握好的算法，对我们解决问题很
有帮助，否则前人的智慧我们不能利用，就都得自己从头研究了。那么什么才叫好的
算法呢？
嗯，没错，有同学说，好的算法，起码要是正确的，连正确都谈不上，还谈什么
别的要求？
2.6.1正确性
正确性：算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、
能正确反映问题的需求、能够得到问题的正确答案。
但是算法的“正确”通常在用法上有很大的差别，大体分为以下四个层次。
1.算法程序没有语法错误。
2.算法程序对于合法的输入数据能够产生满足要求的输出结果。
3.算法程序对于非法的输入数据能够得出满足规格说明的结果。
4.算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。
对于这四层含义，层次1要求最低，但是仅仅没有语法错误实在谈不上是好算
法。这就如同仅仅解决温饱，不能算是生活幸福一样。而层次4是最困难的，我们几
乎不可能逐一验证所有的输入都得到正确的结果。
因此算法的正确性在大部分情况下都不可能用程序来证明，而是用数学方法证明
的。证明一个复杂算法在所有层次上都是正确的，代价非常昂贵。所以一般情况下，
我们把层次3作为一个算法是否正确的标准。
好算法还有什么特征呢？
ZZ
---
## Page 47
第2章算法
很好，我听到了说算法容易理解。没错，就是它。
2.6.2可读性
可读性：算法设计的另一目的是为了便于阅读、理解和交流。
可读性高有助于人们理解算法，晦涩难懂的算法往往隐含错误，不易被发现，并
且难于调试和修改。
实现俄罗斯方块”。因为我自已也写过类似的小游戏程序，所以想研究一下他是如何写
的。由于他追求的是“最少代码”这样的极致，使得他的代码真的不好理解。也许除
了计算机和他自己，绝大多数人是看不懂他的代码的。
我们写代码的目的，一方面是为了让计算机执行，但还有一个重要的目的是为了
便于他人阅读，让人理解和交流，自已将来也可能阅读，如果可读性不好，时间长了
自己都不知道写了些什么。可读性是算法（也包括实现它的代码）好坏很重要的标
志。
2.6.3健壮性
一个好的算法还应该能对输入数据不合法的情况做合适的处理。比如输入的时间
或者距离不应该是负数等。
健壮性：当输入数据不合法时，算法也能做出相关处理，面不是产生异常或莫名
其妙的结果
2.6.4时间效率高和存储量低
最后，好的算法还应该具备时间效率高和存储量低的特点。
时间效率指的是算法的执行时间，对于同一个问题，如果有多个算法能够解决，
执行时间短的算法效率高，执行时间长的效率低。存储量需求指的是算法在执行过程
中需要的最大存储空间，主要指算法程序运行时所占用的内存或外部硬盘存储空间。
设计算法应该尽量满足时间效率高和存储量低的需求。在生活中，人们都希望花最少
的钱，用最短的时间，办最大的事，算法也是一样的思想，最好用最少的存储空间，
花最少的时间，办成同样的事就是好的算法。求100个人的高考成绩平均分，与求全
省的所有考生的成绩平均分在占用时间和内存存储上是有非常大的差异的，我们自然
EZ
---
## Page 48
大话数据结构
是追求可以高效率和低存储量的算法来解决问题。
综上，好的算法，应该具有正确性、可读性、健壮性、高效率和低存储量的特
正。
2.7算法效率的度量方法
刚才我们提到设计算法要提高效率。这里效率大都指算法的执行时间。那么我们
如何度量一个算法的执行时间呢？
正所谓“是骤子是马，拉出来通逾”。比较容易想到的方法就是，我们通过对算法
的数据测试，利用计算机的计时功能，来计算不同算法的效率是高还是低。
2.7.1事后统计方法
事后统计方法：这种方法主要是通过设计好的测试程序和数据，利用计算机计时
器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。
但这种方法显然是有很大缺陷的：