ing the current session in a new thread. This allows for multiple crashes/session,
something that was not originally considered. This accounts for the thousands of
crashes observed. Also, keep in mind these tests are done in a lab environment, not
on production systems. Nothing was affected by our crashes or could have caused
them. These tests were done in January 2007, and no ongoing effort against GFTP
is in place to observe whether these bugs have been patched. Also, no time was spent
attempting to develop exploits from the recorded crash data. It is the authors’ opin-
ion that such exploits could be developed, but we would rather focus on continued
development and testing of EFS.
7.6.12 Conclusions on EFS
The Evolving Fuzzing System was able to learn a protocol and find bugs in real soft-
ware using a gray-box evolutionary robustness testing technique. Further research
on pools could extend the test coverage, as in the study they don’t seem to have
completely covered the target interface. A similar technique could also be applied
to binary protocols.
Figure 7.18 Best of pool and session over six runs.
6760 Book.indb 233 12/22/17 10:50 AM
234 Advanced Fuzzing
Figure 7.19 One-pool crash total (all runs).
Figure 7.20 Four-pool crash total (all runs).
6760 Book.indb 234 12/22/17 10:50 AM
7.7 In-Memory Fuzzing 235
Figure 7.21 Ten-pool crash total (all runs).
7.7 In-Memory Fuzzing
As described in Section 5.2.7, in-memory fuzzing can be used to target a single
function or basic block in the target instead of fuzzing the whole application.
This section describes implementation of in-memory fuzzing with the Pin14 tool.
Thanks to Jonathan Salwan for contributing material for to section.
7.7.1 Implementation of In-Memory Fuzzer
There are a lot of possible ways to implement in-memory fuzzing. For instance, a
debugger can be used to set breakpoints or modify registers. The general workflow
for the implementation described in this section is shown in Figure 7.22.
The workflow can be opened in to five steps:
1. Target a function or a basic block;
2. Take a snapshot of the current register/memory states;
3. Generate input values;
4. Execute target until breakpoin;
5. Restore the snapshot and return to step 3.
14 https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool.
6760 Book.indb 235 12/22/17 10:50 AM
236 Advanced Fuzzing
Figure 7.22 In-memory fuzzing workflow.
While performing the fuzzing the target program should be monitored for all interest-
ing SIGNALs which may indicate that something of interest happened in the target.
7.7.2 Instrumentation
Pin is a dynamic binary instrumentation framework that is used in this implemen-
tation. It is available on Windows, Linux, and OSX, for both IA-32 and x86-64
instruction-set. Binary instrumentation gives the opportunity to add callbacks to
each executed instruction. This can be used to monitor what is going on at each
program point during the execution. For instance, it can be used to monitor/control
memory and registers at each program point, but these features imply overhead.
Using a Pin CONTEXT for every callback entails an overhead of almost 1,000×,
as seen in Figure 7.23.
Figure 7.23 Performance impact of Pin CONTEXT.
6760 Book.indb 236 12/22/17 10:50 AM
7.7 In-Memory Fuzzing 237
7.7.3 The pin ApI
The Pin API provides all functionality needed to implement an in-memory fuzzer.
To detect error conditions, the PIN_InterceptSignal() function can be used to
catch signals from the target. This function takes as arguments a signal type and
a callback. For example, code like this can be used to catch the SIGSEGV signal:
PIN_InterceptSignal(SIGSEGV, catchSignal, 0);
Pin sends the CONTEXT to the callback when a SIGSEGV occurs. Knowing that,
it is possible to get the value of registers and our crash triggering input using the
PIN_GetContextReg() function.
PIN_GetContextReg (const CONTEXT *ctxt, REG reg)
As with getting the state of registers, it is possible to modify values with the PIN_
SetContextReg() function.
PIN_SetContextReg (const CONTEXT *ctxt, REG reg, ADDRINT value)
PIN_SaveContext() function can be used to save the current state of registers. In
this implementation it is used to save and restore a snapshot.
CONTEXT snapshot;
...
PIN_SaveContext(ctx, &snapshot); // Take the snapshot registers
...
PIN_SaveContext(&snapshot, ctx); // Restore the snapshot
PIN_ExecuteAt(ctx); // Execute from the new context
However, Pin_SaveContext() only saves the registers’ state, not the memory. It
means that all STORE instructions must be monitored and the modified bytes
must be restored during the snapshot restoration process. The following InsertCall
is added before the execution to save the bytes overwritten.
if (INS_OperandCount(ins) > 1 && INS_MemoryOperandIsWritten(ins,
0))
INS_InsertCall( ins, IPOINT_BEFORE, (AFUNPTR)memoryWrite,
IARG_PTR, new string(INS_Disassemble(ins)),
IARG_ADDRINT, INS_Address(ins),
IARG_MEMORYOP_EA, 0,
IARG_UINT32,
INS_MemoryWriteSize(ins),
IARG_END);
7.7.4 register Example
Figure 7.24 shows the control flow graph of a function. The first argument (rdi and
so [rbp+var_4]) are controllable by the user (untrusted input). In the highlighted
6760 Book.indb 237 12/22/17 10:50 AM
238 Advanced Fuzzing
basic block, eax holds the user argument. To execute in-memory fuzzing, a snap-
shot is taken at the entry point of the basic block and restored at the end. For every
iteration, a new fuzzed value is injected to the eax register.
Using the Pin API, Jonathan Salwan developed a Pin tool that fuzzes, in mem-
ory, a targeted area until a crash occurs. The Pin tool takes a “start” and an “end”
address, and then it offers two fuzzing strategies: incremental or random.
Required
--------
-start  The start address of the
fuzzing area
-end  The end address of the
fuzzing area
-reg  The register which to fuzz
Figure 7.24 Example control flow graph.
6760 Book.indb 238 12/22/17 10:50 AM
7.7 In-Memory Fuzzing 239
Optional
--------
-startValue  The start value
-maxValue  The end value
-fuzzingType  Type of fuzzing: incremental
or random
For example, the incremental fuzzing strategy on eax to attack the highlighted basic
block can be used like this:
$ time pin -t ./InMemoryFuzzing.so -start 0x4005a5 -end 0x4005bb
-reg eax -fuzzingType inc -startValue 1 -maxValue 0x3000 -- ./
test 1 > dump
[2] 8472 segmentation fault
0.53s user 0.20s system 99% cpu 0.729 total
The program crashes and the dump file tells that the last value in the RAX register
was 0x2420.
[Restore Context]
[Save Context]
[CONTEXT]=----------------------------------------------------------
RAX = 0000000000002420 RBX = 0000000000000000 RCX =
00007fff3134c168
RDX = 00007fff3134abe0 RDI = 0000000000000001 RSI =
00007fff3134abe0
RBP = 00007fff3134abc0 RSP = 00007fff3134abb0 RIP =
00000000004005a5
+-------------------------------------------------------------------
+--> 4005a5: cdqe
+--> 4005a7: add rax, qword ptr [rbp-0x10]
+--> 4005ab: movzx eax, byte ptr [rax]
/!\ SIGSEGV received /!\
[SIGSGV]=----------------------------------------------------------
RAX = 00007fff3134d000 RBX = 0000000000000000 RCX =
00007fff3134c168
RDX = 00007fff3134abe0 RDI = 0000000000000001 RSI =
00007fff3134abe0
RBP = 00007fff3134abc0 RSP = 00007fff3134abb0 RIP =
00000000004005ab
+-------------------------------------------------------------------
In summary, a Pin tool was used to fuzz a specific basic block without rerun-
ning the binary itself; this is what is called in-memory fuzzing. It is possible to tar-
get much more than just a single basic block, for example an entire function and
6760 Book.indb 239 12/22/17 10:50 AM
240 Advanced Fuzzing
its callees. This might commonly be done when a program accepts encrypted data.
Generally it is desirable to fuzz the blocks that parse unencrypted data. Thus, it
would be practical to hook after the decryption, and again after the parsing.
7.7.5 pros and Cons
Obviously, this fuzzing technique has a lot of disadvantages. First is the need to
reverse-engineer the code in order to identify what to fuzz, including what registers
the user can control, what the values should look like, and so forth. For instance, if
there is a branch condition (eax > 0 and eax >> from z3 import *
>>>
>>> x = BitVec(‘x’, 32)
>>> s = Solver()
>>>
>>> s.add(x > 0)
>>> s.add(x >> s.add(x % 2 == 0)
>>> while s.check() == sat:
Figure 7.25 Path conditions.
6760 Book.indb 240 12/22/17 10:50 AM
7.7 In-Memory Fuzzing 241
... print s.model()[x]
... s.add(x != s.model()[x])
...
8
2
6
4
>>>
The snapshot process is still the same as that in the previous section. This time, sym-
bolic passes are used to build the path condition and finally generate every concrete
values that a path can hold, instead of using random values as shown in Figure 7.26.
The first pass is applied to build each path condition and to generate all concrete
values that paths can hold.
The main disadvantages of this technique are the extra execution time and
the stability of the implementation. If one of the semantics is wrong, or if the path
formula is not complete, unreachable values are generated or equations will be
unsatisfiable. The benefit of DSE is providing smarter fuzzing, that achieves more
accurate results.
For instance, by extracting the part of the path condition of the last CFG and
appling a symbolic execution, the result can be presented as:
mov [rbp-0x4], edi #3 = (_ bv1 32) ; edi tainted
mov [rbp-0x10], rsi #4 = (_ bv140736503416592 64)
cmp [rbp-0x4], 0x0 #5 = (assert (= ((_ extract 31 0)#3) (_
bv0 32)))
jle 0x400666 #6 = (assert (bvugt ((_ extract 31 0)#3) (_
bv0 32)))
cmp [rbp-0x4], 0x2fff #7 = (assert (= ((_ extract 31 0)#3) (_
bv12287 32)))
jnle 0x400666 #8 = (assert (bvult ((_ extract 31 0)#3) (_
bv12287 32)))
mov eax, [rbp-0x4] #9 = #3
Figure 7.26 Path conditions built with symbolic passes.
6760 Book.indb 241 12/22/17 10:50 AM
242 Advanced Fuzzing
In the reference symbolic engine, all instructions are translated into the SMT2 lan-
guage and reference-based expressions. The reference #9 (targeted register to fuzz)
points to the reference #3 (which is tainted). This reference is also tested in the last
two branches condition (#6 and #8). If these two branch conditions are extracted
and provided to the SMT solver, the model result is:
Request:
(set-logic QF_AUFBV)
(declare-fun SymVar_1 () (_ BitVec 32))
(assert (bvugt ((_ extract 31 0)SymVar_1) (_ bv0 32)))
(assert (bvult ((_ extract 31 0)SymVar_1) (_ bv12287 32)))
(check-sat)
(get-value (SymVar_1))
Answer:
sat
((SymVar_1 #x00000001))
The SMT solver gives us a valid model which is 0x1. At this point, there is a pos-
sibility to get every concrete value that the reference #9 can hold. This is why the
dynamic symbolic execution is helpful in some cases. As fuzzers strive to explore the
dark corners of code, solvers can help. They may run slower, but should ultimately
achieve better code coverage if properly built.
7.8 Distributed Fuzzing
Ben Nagy proposed a basic fuzzing formula in a kernel fuzzing talk he did at Rux-
Con.15 He stated that the number of bugs discovered is equal to the probability of
finding a bug, multiplied by the number of tests run.
num_bugs = prob_to_find * number_of_tests
As such, when possible, a tester should try to influence both variables prob_to_find
and number_of_tests. The tester can zoom in on one little portion of the code and
increase the prob_to_find by tailoring the fuzzer to that code, but the number of
tests likely goes down. Or, you can do less intelligent fuzzing, and your prob_to_find
is likely lower, but if the tester does lots of tests, the total bugs discovered could
be the same as the number of tests for a dumb fuzzer can be as large as we like.
This is where fuzzing experience, available tools, and type of application come to
bear: the tester has to think about which makes more sense for a given situation.
Personal preference may even be a factor: some will prefer to go slow and try to
not miss any bugs, and ensure that each find is reproducible, and so forth. On the
15 https://www.youtube.com/watch?v=FY-33TUKlqY.
6760 Book.indb 242 12/22/17 10:50 AM
7.8 Distributed Fuzzing 243
other hand, another fuzzing pro may prefer to take the approach of going as fast as
possible, preferring randomness and scale, rather than exhaustive test case genera-
tion. The neat thing: for sufficiently complex applications, each approach is likely
to find many bugs, and often the two approaches will find different kinds of bugs.
In the spirit of the second approach, this chapter is about distributed fuzzing.
We will discuss some considerations and case studies for creating a farm, cluster,
or cloud of fuzzing nodes to distribute the work load of fuzzing, in an effort to
increase the number of bugs found in a given time period.
Oftentimes, distributing a fuzzing load involves giving a portion of the total
job to separate virtual machines in a cloud-like setup. That cloud could be geared
toward just one application, or could accommodate fuzzing multiple applications.
For example, Google’s ClusterFuzz project is a distributed fuzzing service originally
designed for the open-source Chromium project, whereas, one of the authors also
created a project called ClusterFuzz (CF) (the same project name is pure coincidence
as far as we know—both were released around mid-2012), but DeMott’s CF was
able to geared toward fuzzing a variety of closed-source applications. Obviously,
Google ClusterFuzz would likely be better for finding bugs in Chrome, while the
later benefited from more general use, and was geared differently for closed-source
postmortem analysis. Let’s examine each of these two tools in greater detail.