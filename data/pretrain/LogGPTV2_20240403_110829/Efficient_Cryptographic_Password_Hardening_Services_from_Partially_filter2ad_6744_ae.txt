instance has access to 1 CPU core (Intel Xeon) and 1 GB of
RAM. The server instance has access to 8 CPU cores (Intel
Xeon) and 15 GB of RAM.
HTTP-Keepalive
Enrollment
Validation
Validation Failure
Pythia-Eval
Network RTT
Local
WAN
EC Operations(µs)
On
7.28
9.51
9.01
13.79
Oﬀ
11.70
13.80
13.47
17.24
On
24.54
21.56
23.96
34.25
Oﬀ
64.62
Sampling
56.8
67.00 Group op.
3.2
68.96 Mod. Exp.
191.1
76.91 Hash to G 65.4
0.338
6.656
Table 1: Average latency in milliseconds of diﬀerent
client requests for 1000 requests each and average
runtime in µs of diﬀerent group operations.
For comparison purposes, we set up an instance of Pythia
using the code provided at [18] and ran performance mea-
surements using the same web server setup.
The results of the latency tests appear on the left side
of Table 1 and show client latency for LAN and WAN set-
tings as the average latency of 1000 client requests for an
enrollment or a validation request. We provide measurements
for HTTP-Keep-alive turned on and turned oﬀ.
In the WAN setting, which resembles a multi-tenant setup
as envisioned in [19], we can achieve latency which is at least
1.4 times lower than that of Pythia if HTTP-Keep-alive is
active. Given the additional overhead without HTTP-Keep-
alive we achieve a speedup by a factor of 1.1.
In the LAN setting, which is similar to most local enter-
prise networks, our implementation outperforms the Pythia
prototype with 1.4 times lower latency in the case of suc-
cessful validation and even better 1.9 times lower latency for
enrollment.
Throughput. We have used the automated HTTP web
server load testing tool autobench to perform throughput
testing for our test setup. We use a static web page served
using the same web server as the baseline comparison for
throughput measurements of all the protocol operations the
web service oﬀers For the static web page, the maximum
connection rate is at 6050 connections per second (cps), pa-
rameter retrieval is similarly high at 6000 cps. For validation
queries, the reply rate levels oﬀ at around 1100 cps while
enrollment can withstand request rates up to 1900 cps.
Storage. We used our setup to test the typical storage
requirements of our password-authentication scheme both
on client side and server side. To this end, we performed
100,000 enrollment queries for randomly chosen tweaks and
passwords to generate 100,000 enrollment records on the
client side and 100,000 time-stamped tweaks on the server
side. On both sides, the information is stored in an indexed
mongoDB instance.
Server-side storage For rate-limiting purposes, the server
stores a 32-byte hash of any tweak which is queried
together with a 32-byte timestamp. The average size
of one such entry in the database is 83 bytes, with the
additional overhead resulting from the database index
structure.
Client-side storage On the client side, the enrollment re-
cords are stored together with a 32-byte hash of the
given tweak. The average size of one database entry
is approximately 444 bytes bringing the total size of
our record database of 100,000 successful enrollments
to a mere 43MB. Extrapolating linearly suggests that
a database of 20 million enrollment records could ﬁt
within 8.5GB of memory.
6. REVISITING PO-PRFS
Partially oblivious pseudorandom functions (PO-PRFs)
allow the computation of pseudorandom function values in a
protocol between two parties, such that one party holds the
function key and the other party holds the function inputs.
After the execution of the protocol, the party which has
provided the inputs learns the function output. Furthermore,
the evaluation is (partially) oblivious, meaning that the re-
spective inputs of both parties stay hidden to the other party,
except one part of the function inputs which is known to
both parties. The possibility to partially reveal the function
input separates the primitive from previous work on fully
oblivious PRFs [33, 24], where no information on the inputs
may be revealed.
In [19], the authors left open the question if the security
of their scheme can be based on weaker assumption. In this
section, we answer this question negatively.
6.1 Preliminaries
Partially Oblivious PRFs. We recall the formal deﬁnition
of partially oblivious pseudorandom functions given in [19].
Deﬁnition 6 (Partially Oblivious Pseudorandom Functions).
A partially oblivious PRF protocol (PO-PRF) is a tuple of
three algorithms (KeyGen, Client, Server) and a keyed function
fk : {0, 1}∗ × {0, 1}∗ → {0, 1}∗ which behave as follows:
KeyGen. The key generation algorithm outputs a public and
secret key pair (pk , sk ).
Server. The server algorithm takes as input the secret key
sk and a client request bit string. It outputs a response bit
string.
Client. The client algorithm takes as input a tweak t and a
message m. It can perform a single invocation of the server
algorithm before outputting a value x.
A PO-PRF protocol is said to be correct if for all security
parameters n and all key-pairs (pk , sk ) ←$ KeyGen(1n), the
protocol (cid:104)Client(t, m), Server(sk )(cid:105) always results in client-side
output fsk (t, m).
The primitive supports veriﬁability of outputs, i.e., the
client is able to verify the correctness of the server computa-
tion. Additionally the server does not learn the clients input
m. Leakage of the tweak t, however, is allowed.
One-More Unpredictability. We recall the formal se-
curity property of one-more unpredictability [19]. On a
high-level, one-more unpredictability says that an adversary
cannot predict the value of the function f associated with
the scheme on new inputs, except with negligible probability.
This is formalized in the following experiment.
Deﬁnition 7. A PO-PRF Π = (KeyGen, Client, Server) is
called one-more unpredictable if for any PPT adversary A
there exists a negligible function such that
Pr(cid:2)UnpredictabilityΠ,A(1n) = 1(cid:3) ≤ negl(n) ,
where the randomness is taken over the random coins of the
experiment and the adversary and the experiment is deﬁned
as follows:
UnpredictabilityΠ,A(1n)
(sk , pk ) ←$ KeyGen(1n); c ← 0
((t1, m1, T1), . . . , (tq, mq, Tq)) ←$ AO(·,·)(pk )
if q > c and Ti = fsk (ti, mi) for all i ∈ {1, . . . , q}
return 1
else return 0
where O(t, X) responds with Server(sk , t, X) and sets c ←
c + 1.
The authors also deﬁned a stronger property similar to
one-more unpredictability, but where the outputs must be
pseudorandom. Since we are interested in proving an im-
possibility result it is suﬃcient to only consider one-more
unpredictability as this property is strictly weaker and thus
our impossibility result is strictly stronger.
Hard Non-interactive Problem. We recall the deﬁnition
of a hard non-interactive problem following [22].
Deﬁnition 8 (Hard Non-interactive Problem). A non-interactive
problem P = (I, V ) consists of two eﬃcient algorithms:
Instance Generation I(1n). The instance generation algo-
rithm takes as input the security parameter 1n and outputs
an instance x.
Instance Verification V (x, y). The instance veriﬁcation
algorithm takes as input a value y as well as an instance x
of a cryptographic problem, and outputs a decision bit.
We say that a problem is hard if for any PPT algorithm
A, the probability that A solves the problem, i.e. on input
x ←$ I(1n) outputs y such that with overwhelming probabil-
ity V (x, y) = 1 is negligible.
6.2 The Pythia Protocol
In this section, we recall Pythia, the PO-PRF protocol
given in [19]. We consider the deﬁnition of one-more un-
predictability and show that there cannot be a black-box
reduction of this property to any non-interactive assumption.
To prove this formally, we use meta-reduction techniques as
put forward in e.g., [35, 8, 22]. Meta-reduction techniques
can be seen as building a “reduction against the reduction”.
Before showing our meta-reduction and explaining the main
ideas, we recall the basics of bilinear maps and the PO-PRF
from [19].
Bilinear Setting. Let G1, G2, GT be groups of order q
and let g1 ∈ G1, g2 ∈ G2 be generators, such that there is
a bilinear map e : G1 × G2 → GT and it holds e(gα
2 ) =
e(g1, g2)α·β for all α, β ∈ Zq. Furthermore, e is non-degenerate
meaning that e(g1, g2) (cid:54)= 1 and e(g1, g2) is a generator of GT .
The Pythia PO-PRF. To describe the Pythia PO-PRF, we
ﬁrst recall the underlying language to verify the computations
of the server. Let LPythia describe the following language of
valid server responses:
1 , gβ
LPythia = {(g, h, x, y) | ∃sk .gsk = h ∧ xsk = y}.
Based on this language, we describe the Pythia protocol.
Construction 2 (Pythia). Let H1 : {0, 1}∗ → G1, H2 :
{0, 1}∗ → G2 be hash functions modeled as random oracles,
with G1, G2 groups as described in the bilinear setting above
and let P = (P, V) be a non-interactive zero-knowledge proof
system for LPythia.
Setup(1n). picks a random exponent sk ←$ Zq and computes
a public key pk = gsk
1 . The secret key sk is sent to the server,
the public key to the client.
Client(pk , t, m). picks a random r ←$ Zq and sends (t, H2(m)r)
to the server. Upon response (y, π) from the server, the client
veriﬁes the proof π and if it is valid, outputs y1/r.
Server(sk , t, x). computes ˆx = e(H1(t), x) and y = ˆxsk as well
as π ←$ P((g1, pk , ˆx, y), sk). It sends (y, π) back to the client.
6.3
Impossibility Result
Our meta-reduction is similar to [22] and it shows that
there does not exists (using black-box techniques) a reduction
of the unpredictability of the protocol to any non-interactive
problem. Note that the result from [22] applies to blind
signature schemes and not to partially oblivious PRFs. For
clarity and succinctness, we show the impossibility result
for a version of the protocol which omits the non-interactive
zero-knowledge proofs. However, the result also holds for the
veriﬁable version presented above.
To show that no reduction to a non-interactive problem
exists, we introduce a magic adversary, which has access
to a computationally unbounded oracle Σ which allows the
adversary to break the scheme. A reduction R using the
magic adversary, could therefore solve the non-interactive
problem. This alone does not lead to a contradiction, since
the magic adversary has access to an unbounded oracle and
can thus not be considered eﬃcient. However, in our proof we
show that this adversary can be simulated eﬃciently, proving
that there cannot be an eﬃcient reduction if the problem is
indeed computationally diﬃcult.
We construct the simulation of the adversary, the so-called
meta-reduction M , in the same way as [22], by resetting the
execution of the reduction at an appropriate point and thus
fooling the reduction with the result of computations that
have occurred before the reset.
Let Σ be an unbounded DLOG oracle such that on input
two group elements (g, h), Σ returns x, such that gx = h.
The magic adversary uses Σ to generate a valid output of
the protocol by extracting the secret key from the public key
and performing all computations locally.
Deﬁnition 9 (Magic Adversary). The magic adversary is
deﬁned as follows: Choose messages m0, m1 ←${0, 1}∗ and
tweak t ←${0, 1}∗ as well as randomness r ←${0, 1}∗. Upon
input pk from the challenger, compute x = H2(m0)r and
send it along with tweak t to the challenger to obtain response
y. Now invoke Σ(g, pk ) to obtain the secret key sk . Finally,
compute z1 = e(t, H2(m1))sk and z0 = y1/r and output
(m0, z0) , (m1, z1).
Now for the main result.
Theorem 2. The unpredictability of Pythia cannot be
reduced to a non-interactive problem.
Proof. Assume R was a reduction of the unpredictability of