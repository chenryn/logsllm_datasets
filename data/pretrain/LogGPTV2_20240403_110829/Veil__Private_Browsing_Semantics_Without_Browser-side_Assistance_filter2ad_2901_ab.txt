design to protect against various kinds of privacy leakage.
Then, we describe how Veil handles more complex pages that
dynamically fetch and generate new content.
A. The Veil Compiler and veilFetch()
The compiler processes the HTML in our example page
(Figure 1), and ﬁnds references to three external objects (i.e.,
the CSS ﬁle, the JavaScript ﬁle, and the image). The compiler
computes a hash value for each object, and then replaces the
associated HTML tags with dynamic JavaScript loaders for the
objects. For example, if the original image tag looked like this:
the compiler would replace that tag with the following:
where the argument
to veilFetch() is the hash name
of the image. At page load time, when veilFetch()
runs,
to download
the appropriate object
In our
example,
the URL in the XMLHttpRequest might be
http://veil.io/b6a0d....
it uses an XMLHttpRequest request
from the blinding service.
Such a URL resides in the domain of the blinding servers,
not the domain of the original content publisher. Furthermore,
the URL identiﬁes the underlying object by hash, so the URL
itself does not leak information about the original publisher or
the data contained within the object. So, even though the exe-
cution of veilFetch() may pollute name-based interfaces
like the DNS cache, a post-session attacker which inspects
those registries cannot learn anything about the content that
was fetched. However, a network-observing attacker who sees
a veilFetch() URL can simply ask the blinding server for
3
Fig. 1. The Veil architecture (cryptographic operations omitted for clarity).
the associated content, and then directly inspect the data that
the user accessed during the private session!
To defend against such an attack, Veil associates each
user with a symmetric key kuser (we describe how this
key is generated and stored in Section IV-D). Veil also as-
sociates the blinding service with a public/private keypair.
When veilFetch(hashName) executes, it does not ask
the blinding service for hashName—instead,
it asks for
kuser. In the HTTP header for the request,
veilFetch() includes P ubKeyBServ, i.e., the
user’s symmetric key encrypted by the blinding service’s
public key. When the blinding service receives the request, it
uses its private key to decrypt P ubKeyBServ. Then,
it uses  to extract the hash name of the requested
object. The blinding service locates the object, encrypts it
with kuser, and then sends the HTTP response back to the
client. Figure 2 depicts the full protocol.1 In practice, the
blinding service’s public/private keypair can be the service’s
TLS keypair, as used by HTTPS connections to the service.
Thus, the encryption of kuser can be encrypted by the standard
TLS mechanisms used by an HTTPS connection.
Once veilFetch() receives the response, it decrypts
the data and then dynamically reconstructs the appropriate
object, replacing the script tag that contained veilFetch()
with the reconstructed object. The compiler represents each
serialized object using JSON [13]; Figure 3 shows an example
of a serialized image. To reinﬂate the image, veilFetch()
extracts metadata like the image’s width and height, and
dynamically injects an image tag into the page which has
the appropriate attributes. Then, veilFetch() extracts the
Base64-encoded image data from the JSON, and sets the src
attribute of the image tag to a data URL [37] which directly
embeds the Base64 image data. This causes the browser to load
the image. veilFetch() uses similar techniques to reinﬂate
other content types.
1A stateful blinding service can cache decrypted user keys and eliminate
the public key operation from all but the user’s ﬁrst request.
4
Fig. 2. The veilFetch() protocol.
{"img_type": "jpeg",
"dataURI": "ab52f...",
"tag_attrs": {"width": "20px",
"height": "50px"}}
Fig. 3. A serialized  tag.
This client-server protocol has several nice properties. First,
it solves the replay problem—if an attacker wants to replay
old fetches, or guess visited URLs (as in a CSS-based history
attack [29], [71]), the attacker will not be able to decrypt the
responses unless she has the user’s key. Also, since the blinding
service returns encrypted content, that encrypted content is
what would reside in the browser cache. Thus, Veil pages can
now persist data in the browser cache such that only the user
can decrypt and inspect that content. Of course, a page does
not have to use the browser cache—when a publisher uploads
an object to the blinding service, the publisher indicates the
caching headers that the service should return to clients.
In addition to uploading data objects like images to
the blinding service, the compiler also uploads “root” ob-
jects. Root objects are simply top-level HTML ﬁles like
foo.com/index.html. Root objects are signed with the
publisher’s private key, and are stored in a separate names-
pace from data objects using a 2-tuple key that consists
of the publisher name (foo.com) and the HTML name
(index.html). Unlike data objects, which are named by
CSSJavaScriptImageVeil compilerVeil blindingserversVeil bootstrap pageOriginal page content restoredOverwritesitselfPublisherCloudClient browserVeil-key: PubKeyBServiceVeil pageBlinding serviceHTTP 200 OKkuserHTTP GET  kuserhash (and thus self-verifying), root objects change over time as
the associated HTML evolves. Thus, root objects are signed by
the publisher to guarantee authenticity and allow the blinding
service to reject fradulent updates.
B. The Blinding Service
In the previous section, we described the high-level opera-
tion of the blinding service. It exports a key/value interface
to content publishers, and an HTTP interface to browsers.
The HTTP code path does content encryption as described
above. As described in Section IV-F, the blinding service also
performs content mutation to protect RAM artifacts that spill
to disk; mutation does not provide cryptographically strong
protections, but it does signiﬁcantly raise the difﬁculty of post-
session forensics. The blinding servers also implement the
DOM hiding protocol (§IV-H), which Veil sites can use to
prevent exposing any site-speciﬁc HTML, CSS, or JavaScript
to client browsers.
The blinding service can be implemented in multiple ways,
e.g., as a peer-to-peer distributed hash table [58], [62], a
centralized service that is run by a trusted authority like the
EFF, or even a single cloud VM that is paid for and operated
by a single privacy-conscious user. In practice, we expect a
blinding service to be run by an altruistic organization like the
EFF, or by altruistic individuals (as in Tor [15]), or by a large
set of privacy-preserving sites who will collaboratively pay for
the cloud VMs that run the blinding servers. Throughout the
paper, we refer to a single blinding service veil.io for con-
venience. However, independent entities can simultaneously
run independent blinding services.
Veil’s publisher-side protocol is compatible with account-
ing, since the blinding service knows which publisher uploaded
each object, and how many times that object has been down-
loaded by clients. Thus, it is simple for a cloud-based blinding
service to implement proportional VM billing, or cost-per-
download billing. In contrast, an altruistic blinding service
(e.g., implemented atop a peer-to-peer DHT [58], [62]) could
host anonymous object submissions for free.
C. The Same-origin Policy
A single web page can aggregate content from a variety of
different origins. As currently described, Veil maps all of these
objects to a single origin: at compile time, Veil downloads the
objects from their respective domains, and at page load time,
Veil serves all of the objects from https://veil.io.
The browser uses the same-origin policy [59] to constrain
the interactions between content from different origins. Map-
ping all content to a single origin would effectively disable
same-origin security checks. Thus, Veil’s static rewriter injects
the sandbox attribute [51] into all  tags. Using
this attribute, the rewriter forces the browser to give each
frame a unique origin with respect to the same-origin policy.
This means that, even though all frames are served from
the veil.io domain, they cannot tamper with each other’s
JavaScript state. In our current implementation of the compiler,
developers are responsible for ensuring that dynamically-
generated frames are also tagged with the sandbox attribute;
however, using DOM virtualization [27], [40], the compiler
5
could inject DOM interpositioning code that automatically in-
jects sandbox attributes into dynamically-generated frames.
DOM storage [69] exposes the local disk to JavaScript
code using a key/value interface. DOM storage is partitioned
by origin, i.e., a frame can only access the DOM storage of
its own domain. By assigning an ephemeral, unique origin to
each frame, Veil seemingly prevents an origin from reliably
persisting data across multiple user sessions of a Veil page. To
solve this problem, Veil uses indirection. When a frame wants
to access DOM storage, it ﬁrst creates a child frame which has
the special URL https://veil.io/domStorage. The
child frame provides Veil-mediated access to DOM storage,
accepting read and write requests from the parent frame
via postMessage(). Veil associates a private storage area
with a site’s public key, and engages in a challenge/response
protocol with a frame’s content provider before agreeing to
handle the frame’s IO requests; the challenge/response trafﬁc
goes through the blinding servers (§IV-G). The Veil frame
that manages DOM storage employs the user’s key to encrypt
and integrity-protect data before writing it, ensuring that post-
session attackers cannot extract useful information from DOM
storage disk artifacts.
Since Veil assigns random, ephemeral origins to frames,
cookies do not work in the standard way. To simulate persistent
cookies, an origin must read or write values in DOM storage.
Sending a cookie to a server also requires explicit action.
For example, a Veil page which contains personalized content
might use an initial piece of non-personalized JavaScript to
ﬁnd the local cookie and then generate a request for dynamic
content (§IV-G).
D. The Bootstrap Page
Before the user can visit any Veil sites, she must perform a
one-time initialization step with the Veil bootstrap page (e.g.,
https://veil.io). The bootstrap page generates a private
symmetric key for the user and places it in local DOM storage,
protecting it with a user-chosen password. Veil protects the
in-memory versions of the password and symmetric key with
heap walking (§IV-E) to prevent these cleartext secrets from
paging to disk.
the
user
URL
Later,
determines
the
(e.g.,
foo.com/index.html) of a Veil
site to load. The
user should discover this URL via an already-known Veil
page like a directory site, or via out-of-band mechanisms
like a traditional web search on a different machine than
the one needing protection against post-session attackers;
looking for Veil sites using a traditional search engine on the
target machine would pollute client-side state with greppable
content. Once the user possesses the desired URL, she returns
to the bootstrap page. The bootstrap prompts the user for her
password, extracts her key from local storage, and decrypts it
with the password. The bootstrap then prompts the user for
the URL of the Veil page to visit. The bootstrap fetches the
root object for the page. Then, the bootstrap overwrites itself
with the HTML in the root object. Remember that this HTML
is the output of the Veil compiler; thus, as the browser loads
the HTML, the page will use veilFetch() to dynamically
fetch and reinﬂate encrypted objects.
i.e.,
still
the browser’s address bar will
Once the bootstrap page overwrites itself, the user will
see the target page. However, no navigation will have
occurred,
say
https://veil.io. Thus, the browser’s history of visited
pages will never include the URL of a particular Veil page,
only the URL of the generic Veil bootstrap. The compiler
rewrites links within a page so that, if the user clicks a link,
the page will fetch the relevant content via a blinded URL, and
then deserialize and evaluate that content as described above.
E. Protecting RAM Artifacts
As a Veil page creates new JavaScript objects, the browser
transparently allocates physical memory pages on behalf of
the site. Later,
the OS may swap those pages to disk if
memory pressure is high and those pages are infrequently
used. JavaScript is a high-level, garbage-collected language
that does not expose raw memory addresses. Thus, browsers
do not deﬁne JavaScript interfaces for pinning memory, and
Veil has no explicit way to prevent the OS from swapping
sensitive data to disk.
By frequently accessing sensitive JavaScript objects, Veil
can ensure that the underlying memory pages are less likely
to be selected by the OS’s LRU replacement algorithm. Veil’s
JavaScript
runtime deﬁnes a markAsSensitive(obj)
method; using this method, an application indicates that
Veil should try to prevent obj from paging to disk. In-
ternally, Veil maintains a list of all objects passed to
markAsSensitive(). A periodic timer walks this list,
accessing every property of each object using JavaScript
reﬂection interfaces. Optionally, markAsSensitive() can
recurse on each object property, and touch every value in the
object tree rooted by obj. Such recursive traversals make it
easier for developers to mark large sets of objects at once.
JavaScript deﬁnes a special window object that is an alias for
the global namespace, so if an application marks window as
recursively sensitive, Veil will periodically traverse the entire
heap graph that
is reachable from global variables. Using
standard techniques from garbage collection algorithms, Veil
can detect cycles in the graph and avoid inﬁnite loops.
markAsSensitive() maintains references to all of the
sensitive objects that it has ever visited. This prevents the
browser from garbage collecting the memory and possibly
reusing it without applying secure deallocation [11]. At page
unload time, Veil walks the sensitive list a ﬁnal time, deleting
all object properties. Since JavaScript does not expose raw
memory, Veil cannot memset() the objects to zero, but
deleting the properties does make it more difﬁcult for a post-
session attacker to reconstruct object graphs.
Sensitive data can reside in the JavaScript heap, but it can
also reside in the memory that belongs to the renderer. The ren-
derer is the browser component that parses HTML, calculates
the screen layout, and repaints the visual display. For example,
if a page contains an HTML tag like Secret, the
cleartext string Secret may page out from the renderer’s
memory. As another example, a rendered page’s image content
may be sensitive.
The renderer is a C++ component that is separate from
the JavaScript engine; JavaScript code has no way to directly
access renderer state. However, JavaScript can indirectly touch
6
renderer memory through preexisting renderer interfaces. For
example, if the application creates an empty, invisible 
tag, and injects the tag into the page’s HTML, the browser
invalidates the page’s layout. If the application then reads the
size of the image tag’s parent, the browser is forced to recal-
culate the layout of the parent tag. Recalculating the layout
touches renderer memory that is associated with the parent
tag (and possibly other tags). Thus, Veil can walk the renderer
memory by periodically injecting invisible tags throughout the
HTML tree (forcing a relayout) and then removing those tags,
restoring the original state of the application.
The browser’s network stack contains memory buffers with
potentially sensitive content from the page. However, Veil
only transmits encrypted data over the network, so network
buffers reveal nothing to an attacker if they page out to disk
and are subsequently recovered. Importantly, Veil performs
heap walking on the user’s password and symmetric key. This
prevents those secrets from paging out and allowing an attacker
to decrypt swapped out network buffers.
F. Mutation Techniques
Veil’s main protection mechanism for RAM artifacts is
heap walking, and we show in Section VII-C that heap walking
is an effective defense during expected rates of swapping.
However, Veil provides a second line of defense via content
mutation. Mutation ensures that, each time a client
loads
a page,
the page will return different HTML, CSS, and
JavaScript, even if the baseline version of the page has not
changed. Mutation makes grep-based attacks more difﬁcult,
since the attacker cannot simply navigate to a non-Veil version
of a page, extract identifying strings from the page, and then
grep local system state for those strings. Content mutation is
performed by the blinding servers (§IV-B); below, we brieﬂy
sketch some mutation techniques that the blinding servers can
employ.
Note that blinding servers can mutate content
in the