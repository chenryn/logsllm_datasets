if ((cur_protection & VM_PROT_EXECUTE) && !(flags &
VM_FLAGS_MAP_JIT)){
printf(”EMBEDDED: %s curprot cannot be write+execute.
turning off execute\n”, __PRETTY_FUNCTION__);
cur_protection &= ~VM_PROT_EXECUTE;
}
}
As you saw in Chapter 4, there is an exception to the rule for so-called JIT
(just-in-time) mappings. This is a special type of memory area that is allowed
to be writable and executable at the same time, which is required for the JIT
JavaScript compiler inside MobileSafari. An application can make use of this
exception only one time and only if it has the dynamic code-signing entitlement.
So far this is true only for MobileSafari. All other applications cannot have
self-modifying code, dynamic code generators, or JIT compilers, with the excep-
tion of the dynamic code-signing vulnerability found by Charlie Miller, which
is discussed in Chapter 4. For a full jailbreak, this is an unwanted limitation,
because it disallows runtime patching of applications, which is required for
the popular MobileSubstrate. Additionally, a number of emulators, which are
available for jailbroken iPhones, require self-modifying code.
To fi nd the best way to patch this check you should have a look at the iOS kernel
binary. Though there is no symbol for the vm_map_enter() function, it is very easy
to fi nd the function by looking for strings containing vm_map_enter. A look at the
ARM assembly of the check shows that multiple different one-byte patches exist
to kill the check. For example, the AND.W R0, R1, #6 can be changed into AND
.W R0, R1, #8; or the BIC.W R0, R0, #4 can be changed into BIC.W R0, R0, #0:
800497C6 LDR R1, [R7,#cur_protection]
800497C8 AND.W R0, R4, #0x80000
800497CC STR R0, [SP,#0xB8+var_54]
800497CE STR R1, [SP,#0xB8+var_78]
800497D0 AND.W R0, R1, #6
800497D4 CMP R0, #6
800497D6 ITT EQ
800497D8 LDREQ R0, [SP,#0xB8+var_54]
800497DA CMPEQ R0, #0
800497DC BNE loc_800497F0
800497DE LDR.W R1, =aKern_return_
800497E2 MOVS R0, #0
800497E4 BL sub_8001D608
800497E8 LDR R0, [R7,#cur_protection]
800497EA BIC.W R0, R0, #4
800497EE STR R0, [SP,#0xB8+var_78]
For people who jailbreak their iPhones just for the purpose of security research
or to have shell access, this patch is not required. It is actually counterproductive to
have this limitation patched, because the phone behaves less like a default iPhone.
cc1100..iinndddd 331177 44//1166//22001122 55::4477::4444 PPMM
318 Chapter 10 n Jailbreaking
vm_map_protect
When the protection on mapped memory is changed, the kernel function vm_map_
protect() is called. You can trigger this, for example, by using the mprotect()
system call. Similar to the vm_map_enter() function, it does not allow changing
the protection to writable and executable at the same time. The following code
enforces this rule. You can also fi nd the full code of this function in the fi le
/osfmk/vm/vm_map.c, if you want to look at it in more detail. As you can see in
the code, the VM_PROT_EXECUTE fl ag is again cleared in case the VM_PROT_WRITE
fl ag is also set:
kern_return_t vm_map_protect(
register vm_map_t map,
register vm_map_offset_t start,
register vm_map_offset_t end,
register vm_prot_t new_prot,
register boolean_t set_max)
{
. . .
#if CONFIG_EMBEDDED
if (new_prot & VM_PROT_WRITE) {
if ((new_prot & VM_PROT_EXECUTE) && !(current->used_for_jit)) {
printf(„EMBEDDED: %s can‘t have both write and exec at the
same time\n“, __FUNCTION__);
new_prot &= ~VM_PROT_EXECUTE;
}
}
#endif
Again you can see that an exception is made only for memory ranges that
are used for JIT, which can be created only by applications with the dynamic
code-signing entitlement. No other applications can use mprotect() to make a
memory area writable and executable at the same time. The standard jailbreaks
therefore patch this check, to allow applications to make previously allocated
memory writable and executable.
To patch this function it fi rst has to be found. Although there is no kernel
symbol pointing to it, there is a reference to the string vm_map_protect within
the function, which makes it easy to fi nd. A look at the ARM disassembly shows
you that, again, two alternative one-byte patches can be applied to remove the
security check. The AND.W R1, R6, #6 can be changed into AND.W R1, R6, #8;
or the BIC.W R6, R6, #4 can be changed into BIC.W R6, R6, #0:
8004A950 AND.W R1, R6, #6
8004A954 CMP R1, #6
8004A956 IT EQ
8004A958 TSTEQ.W R0, #0x40000000
8004A95C BNE loc_8004A96A
8004A95E BIC.W R6, R6, #4
cc1100..iinndddd 331188 44//1166//22001122 55::4477::4455 PPMM
Chapter 10 n Jailbreaking 319
Because of this patch, jailbreaking weakens the memory protection of the iOS
device. We suggest applying this patch only if the user of the jailbreak wants
to run applications that require self-modifying code. The problem with these
patches is that they disable the non-executable memory restrictions, so that
remote attacks against iPhone applications do not need to be implemented in
100 percent ROP. Instead, these attacks (or malware) just need a short ROP stub
that uses mprotect() to make the injected code executable.
AMFI Binary Trust Cache
The AMFI kernel module is responsible for validating the digital signature on
code-signing blobs. It registers several MAC policy handlers like the vnode_
check_signature hook, which is called every time a new code-signing blob
is added to the kernel. The AMFI handler validates the signature against the
certifi cate from Apple. However, the validation is bypassed if the amfi_get_out_
of_my_way or the amfi_allow_any_signature boot-arguments are set, which is
only possible with a bootrom- or iBoot-based jailbreak. But the validation is also
skipped if the SHA1 hash of the code-signing blob is found within a built-in
list of more than 2200 known hashes, which is called the AMFI binary trust.
The trust cache lookup is implemented in a single function that is patched by
comex to always return success. This makes AMFI believe that every signature
is within this cache and therefore trusted, which effectively disables the digital
signature on the code-signing blobs.
You can fi nd the address of this function by looking up the AMFI vnode_check_
signature MAC policy handler in the AMFI MAC policy table and searching
for the fi rst function call inside. An alternative way to fi nd the function is to
search for the following byte pattern in the kernel binary:
f0 b5 03 af 2d e9 00 05 04 46 .. .. 14 f8 01 0b 4f f0 13 0c
This code is then overwritten with a function that just returns true, which
will help in bypassing the digital signature. Further research into this kernel
patch will show you that it is not required at all. When you look into the code
for mac_vnode_check_signature, which is defi ned in /security/mac_vfs.c, you
can see that the AMFI handler is already completely disabled by the previous
proc_enforce patch:
int mac_vnode_check_signature(struct vnode *vp, unsigned char *sha1, void *
signature, size_t size)
{
int error;
if (!mac_vnode_enforce || !mac_proc_enforce)
cc1100..iinndddd 331199 44//1166//22001122 55::4477::4455 PPMM
320 Chapter 10 n Jailbreaking
return (0);
MAC_CHECK(vnode_check_signature, vp, vp->v_label, sha1, signature, size);
return (error);
}
If the mac_proc_enforce fl ag is disabled, the AMFI vnode_check_signature
check is not called. The same is true for all the other MAC policy handlers that
make use of the AMFI binary trust cache.
Task_for_pid 0
Although this patch is not necessary for the majority of jailbreakers, we
document it here because it involves a mach trap and therefore allows us to
introduce you to a strategy for fi nding the mach_trap_table within the iOS
kernel binary.
The function task_for_pid() is a mach trap that returns the task port for
another process, named by its process ID. This is limited to processes of the
same user ID, unless the process requesting the task port is privileged. In earlier
versions of Mac OS X, it is possible to get the task port of the kernel process
by asking for the task port of process 0. This technique was used by Mac OS
X rootkits, because it allowed userspace processes to read and write arbitrary
kernel memory.
This might be the reason why task_for_pid() was changed to no longer
allow access to the task port of process ID 0, as you can see in the following
code that was taken from the fi le /bsd/vm/vm_unix.c of the XNU source code:
kern_return_t task_for_pid(struct task_for_pid_args *args)
{
mach_port_name_t target_tport = args->target_tport;
int pid = args->pid;
user_addr_t task_addr = args->t;
proc_t p = PROC_NULL;
task_t t1 = TASK_NULL;
mach_port_name_t tret = MACH_PORT_NULL;
ipc_port_t tfpport;
void * sright;
int error = 0;
AUDIT_MACH_SYSCALL_ENTER(AUE_TASKFORPID);
AUDIT_ARG(pid, pid);
AUDIT_ARG(mach_port1, target_tport);
/* Always check if pid == 0 */
if (pid == 0) {
(void ) copyout((char *)&t1, task_addr, sizeof(mach_port_name_t));
AUDIT_MACH_SYSCALL_EXIT(KERN_FAILURE);
return(KERN_FAILURE);
}
cc1100..iinndddd 332200 44//1166//22001122 55::4477::4455 PPMM
Chapter 10 n Jailbreaking 321
As you can see, now there is an explicit check for the process ID zero and if
it is specifi ed, an error code is returned. comex patches this check by changing
the conditional jump generated by the if statement into an unconditional jump.
The address to patch is found by a pattern search for the following byte string:
91 e8 01 04 d1 f8 08 80 00 21 02 91 ba f1 00 0f 01 91
An alternative way to fi nd the place to patch is to look up the address of the
task_for_pid() function in the mach trap table. However, the symbol mach_
trap_table, which is defi ned in the fi le /osfmk/kern/syscall_sw.c, is not
exported, and therefore the table requires some extra work to be found. When
you look at the defi nition of the table it looks like this:
mach_trap_t mach_trap_table[MACH_TRAP_TABLE_COUNT] = {
/* 0 */ MACH_TRAP(kern_invalid, 0, NULL, NULL),
/* 1 */ MACH_TRAP(kern_invalid, 0, NULL, NULL),
/* 2 */ MACH_TRAP(kern_invalid, 0, NULL, NULL),
. . .
/* 26 */ MACH_TRAP(mach_reply_port, 0, NULL, NULL),
/* 27 */ MACH_TRAP(thread_self_trap, 0, NULL, NULL),
/* 28 */ MACH_TRAP(task_self_trap, 0, NULL, NULL),
. . .
/* 45 */ MACH_TRAP(task_for_pid, 3, munge_www, munge_ddd),
As you can see, the table starts with a number of invalid kernel traps. This fact
can be used to detect the address of the mach_trap_table in memory. The
table defi ned in the public XNU source code shows the fi rst 26 mach traps as
invalid. However, when you look at the iOS kernel you will fi nd that only the
fi rst 10 mach traps are invalid.
Unfortunately, the function kern_invalid() is also not exported and there-
fore it has to be found fi rst. This is not a problem, because as you can see in the
following code, it references a very revealing string:
kern_return_t kern_invalid(__unused struct kern_invalid_args *args)
{
if (kern_invalid_debug) Debugger(“kern_invalid mach trap”);
return(KERN_INVALID_ARGUMENT);
}
Because the referenced string is used only once throughout the code, the only
cross reference to this string is from within the kern_invalid() function. With
the help of this address, the mach_trap_table can be found by searching for a
repeating pattern of four bytes fi lled with 0, followed by four bytes fi lled with
the address of the function. However, in the current iOS kernel, the address of
kern_invalid() is not really required to fi nd the table, because the repeated
pattern of zero followed by the same pointer is good enough to fi nd the table.
cc1100..iinndddd 332211 44//1166//22001122 55::4477::4455 PPMM
322 Chapter 10 n Jailbreaking
Sandbox Patches
The last kernel patch from comex’s set of kernel patches changes the behavior
of the sandbox. Without this patch, certain applications like MobileSafari and
MobileMail will not work on jailbroken iPhones. The reason for this is that the
/Applications directory is moved to the /var/stash/Applications directory,
which leads to sandbox violations. A surprise is that only those two applications
are affected as far as we know. All the other built-in applications seem to work
fl awlessly without the sandbox patch.
The patch itself consists of two parts: The fi rst part overwrites the beginning
of the sb_evaluate() function with a hook, and the second part is new code
that gets written into an unused area inside the kernel. For more information
about this function, review Chapter 5. The patch changes the behavior of the
sandbox evaluation to handle access to certain directories differently.
Before we describe the new evaluation functionality, we have to fi nd a method
to locate the sb_evaluate() function inside the kernel code, because there is
no symbol available. One possibility would be to search for the table of mac
policy handlers inside the Sandbox kernel extension. Several of the mac policy
handlers make use of the sb_evaluate() function. For current iOS kernels, it is
easier to search for the string bad opcode. It is used only within your function
of interest, and once you fi nd its data reference you just have to fi nd the begin-
ning of the function in which it is used.
With the address of the sb_evaluate() function located, you can put a hook
into it and let it jump to one of the unused kernel areas, where you put the rest of
the code. We already discussed how to fi nd these unused areas in Chapter 9. You
can fi nd the source code of the evaluation hook inside the datautils0 GitHub
repository from comex, but we discuss it here, piece by piece. The overall idea
of this code is to exclude fi les outside of /private/var/mobile and fi les inside /
private/var/mobile/Library/Preferences from the sandbox check. The code
starts by checking if the supplied vnode is 0. If this is the case, the hook ignores
this call and just passes execution to the original handler:
start:
push {r0-r4, lr}
sub sp, #0x44
ldr r4, [r3, #0x14]
cmp r4, #0
beq actually_eval
The next piece of the code calls the vn_getpath() function to retrieve the path
for the supplied vnode. If this function returns an error, the error ENOSPC is
ignored; all other errors result in the execution being passed to the original handler:
ldr r3, vn_getpath
mov r1, sp
cc1100..iinndddd 332222 44//1166//22001122 55::4477::4455 PPMM
Chapter 10 n Jailbreaking 323
movs r0, #0x40
add r2, sp, #0x40
str r0, [r2]
mov r0, r4
blx r3
cmp r0, #28
beq enospc
cmp r0, #0
bne actually_eval
If no error was returned or there was not enough space to get the full path-
name, the returned pathname is compared against the string /private/var/
mobile. If the pathname does not match, access is allowed:
enospc:
# that error’s okay...
mov r0, sp
adr r1, var_mobile ; # “/private/var/mobile”
movs r2, #19 ;# len(var_mobile)
ldr r3, memcmp
blx r3
cmp r0, #0
bne allow
If the pathname matches, it is compared against /private/var/mobile/Library/
Preferences/com.apple next. If it matches, the original sb_evaluate() func-
tion is called:
mov r0, sp
adr r1, pref_com_apple
; # “/private/var/mobile/Library/Preferences/com.apple”
movs r2, #49 ;# len(preferences_com_apple)
ldr r3, memcmp
blx r3