title:EFA for Efficient Regular Expression Matching in NIDS (Poster
Abstract)
author:Dengke Qiao and
Tingwen Liu and
Yong Sun and
Li Guo
EFA for Eﬃcient Regular Expression Matching
in NIDS(cid:2) (Poster Abstract)
Dengke Qiao1,3, Tingwen Liu2,3, Yong Sun1, and Li Guo1
1 Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China
2 Institute of Computing Technology, Chinese Academy of Sciences, Beijing, China
3 Graduate University of Chinese Academy of Sciences, Beijing, China
{qiaodengke,liutingwen}@nelmail.iie.ac.cn, PI:EMAIL
Abstract. Regular Expression (RegEx) matching has been widely used
in many network security systems. Despite much eﬀort on this impor-
tant problem, it remains a fundamentally diﬃcult problem. DFA-based
solutions are eﬃcient in time but ineﬃcient in memory, while NFA-based
solutions are memory-eﬃcient but time-ineﬃcient. This poster provides
a new solution named EFA (Excl-deterministic Finite Automata) to ad-
dress the problem by excluding cancerogenic states from active state
sets. The cancerogenic states are identiﬁed based on conﬂict relations.
We make an evaluation of EFA with real RegExes and traﬃc traces.
Experimental results show that EFA can dramatically reduce DFA state
size at the cost of limited matching performance.
1
Introduction and Our Work
How to perform RegEx matching at line rate is a crucial issue in a variety
of network security applications, such as network intrusion detection systems
(NIDS). Comparing with NFA, DFA is the preferred representation of RegExes
in gigabit backbones because of its high matching eﬃciency. DFA, which is full-
deterministic from NFA, may experience state explosion during the process of
transformation that creates a DFA state for each possible Active S tate Set of
NFA (ASSet). We ﬁnd that some states in a NFA are the key reason that leads
to state explosion, we call them cancerogenic states.
Y.H.E. Yang et al. [1] deﬁne a string set for each NFA state, and then they
deﬁne four relationships between states based on the corresponding string sets.
They further prove that a NFA without conﬂict relations between its any two
states will not generate an explosive DFA. However, their method to calculate
the relations by comparing string sets is ineﬃcient and inaccurate.
This poster ﬁrst introduces an accurate method named ROBAS to calculate
relations between states based on ASSets but not string sets. We prove that the
relation between states x and y can be exactly calculated by the following three
(cid:2) Supported by the National High-Tech Research and Development Plan of China
under Grant No. 2011AA010705 and the Strategic Priority Research Program of the
Chinese Academy of Sciences under Grant No.XDA06030200.
D. Balzarotti, S. Stolfo, and M. Cova (Eds.): RAID 2012, LNCS 7462, pp. 382–383, 2012.
c(cid:2) Springer-Verlag Berlin Heidelberg 2012
EFA for Eﬃcient Regular Expression Matching in NIDS
383
Table 1. Comparison among NFA, DFA and EFA on state size and construction time
RegEx
set
NFA
EFA (k = 3) EFA (k = 15)
states times(s) states times(s) states times(s) states times(s)
DFA
snort24 749
bro217 2645
0.08
0.18
13886 178.50
260.63
6533
2394
3300
26.28
34.39
592
2659
16
35.33
Table 2. Comparison among NFA, DFA and EFA on the size of ASSet during matching
RegEx
NFA
EFA (k = 3) EFA (k = 15)
set max average max average max average max average
DFA
snort24 10
39
bro217
1.144
9.33
1
1
1
1
1
2
1
1.004
1
3
1
1.056
conditions: x ∩ y, x ∩ y and x ∩ y. The condition x ∩ y implies x and y are both
active in some ASSets. States x and y are conﬂict if the three conditions are all
true. Based on the insight, we can get that the ﬁrst condition for any two states
in the same ASSet is true, and the second condition for the case that one state
in an ASSet and the other state not in the ASSet is true. Thus, for a given NFA,
we can get its all relations exactly after scanning its ASSets in one time.
For a given NFA, transforming it into a DFA can obtain all ASSets. The DFA
transition matrix is needless, thus abandoning it can largely reduce memory con-
sumption. Even so, the modiﬁed transformation is still slow. To accelerate the
process, this poster proposes an algorithm named ASS-SUBSET. As an ASSet (a
DFA state) has many common transitions, it is wasteful to obtain all ASSets on
256 characters. In ASS-SUBSET, each ASSet only transfers on these necessary
characters got by combining the selected characters of NFA states in the ASSet.
We regards these NFA states that have many conﬂict relations as cancerogenic
states. Speciﬁcally, we introduce a threshold k, and exclude the k states that have
the most conﬂict relations from ASSets. Then we can transform NFA to EFA
similarly as the transformation from NFA to DFA.
2 Evaluation
We make use of real RegExes from Snort system and Bro system, and real traﬃc
traces captured from backbones to evaluate our work. As shown in Table 1 and
Table 2, our experimental results show that EFA can reduce states by several to
dozens of times while at the cost of one percent loss in matching speed comparing
with DFA. Moreover, the time used to construct EFA from RegExes is much less
than that used to construct DFA. This implies that EFA is more suitable to
perform large-scale RegEx matching in high-speed networks.
Reference
1. Yang, Y.H.E., Prasanna, V.K.: Space-Time Tradeoﬀ in Regular Expression Match-
ing with Semi-Deterministic Finite Automata. In: INFOCOM, pp. 1853–1861 (2011)