as shown in Fig. 11.
Viterbi Algorithm. Viterbi algorithm [27], [28] is a classic re-
cursive optimal solution for searching the most likely sequence
of hidden states, which is particularly suited for solving HMM.
We formalize this algorithm for our settings: suppose the state
space of HMM is S = Li, i ∈ [1, 5], the probability of initial
state Li is πLi and the transition probability from Li to Lj
is T rLi,Lj . If the observation sequence is {y1, y2, . . . , yT}
(every element is the interrupt amount of a gram), the most
likely state sequence {Lx1, Lx2, . . . , LxT} could be calculated
through:
V1,Lk
= Pr(y1|Lk) · πLk
Vt,Lk
= max
Lx∈S
{Vt−1,Lx · T rLx,Lk
· Pr(yt|Lk)}
(3)
(4)
where Vt,Lk is the probability of the most likely state sequence
with the ﬁrst t observations and Lk as the ﬁnal state. Pr(yt|Lk)
is the emission probability of showing observation yt in the
hidden state Lk. So, to apply Viterbi algorithm, we need a
422422
, i, j ∈ [1, 5].
way to represent emission probability Pr(yt|Li), i ∈ [1, 5] and
transition probability T rLi,Lj
Emission Probability. Since the probability for each state Li
for a gram has been calculated in the previous step using
Equation 2, we assign the emission probability Pr(yt|Li) with
these values.
Transition Probability. We build set M containing the map-
pings between all the 389,112 pattern passwords and state
sequences (e.g., [41235789−→L1L3L5L3]), and use it to
infer the probability per state sequence. Different from the
standard Viterbi algorithm, the transition probability at step t
in our case does not only rely on the one state ahead, but all
previously encountered states (the sequence of previous states
is deﬁned as Lseq(t−1)). Thus, we customize the formula of
transition probability as below:
(cid:6)
(cid:6)
M [s].start with(Lseq(t−1)(cid:3)Lj
M [s].start with(Lseq(t−1))
)
(5)
T rLseq(t−1),Lj
=
(cid:6)
M [s].start with(Lseq(t−1)) is the amount of state
where
sequences that start with seq(t − 1) and contain s states (the
target unlock pattern is s-gram, which is determined during
the previous data pre-processing stage).
Top-N Result. The output of Viterbi algorithm is the most
likely state sequence, which may be incorrect sometimes.
Therefore, we could provide N most likely state sequences
ranked by the overall probabilities to increase the chances of
successful attacks. The algorithm is shown in Algorithm 1.
Algorithm 1: Top N state sequences calculation
1 for i=1 to N do
2
StateSeq = Viterbi(ObservedSeq);
result.add(StateSeq) ;
// record Top X result
M.remove(StateSeq) ; // adjust M to change T r
3
4 end
5 output result;
Pattern Password Recovery. A state sequence inferred in the
last step could be shared by multiple pattern passwords (e.g.,
both 1235789 and 7415963 can be described by L3L5L3).
The concrete pattern password could be obtained by attempt-
ing the combinations of digits corresponding to the state
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:05 UTC from IEEE Xplore.  Restrictions apply. 
SEARCH SPACE AFTER SUCCESSFUL STATE SEQUENCE INFERENCE
TABLE III
TABLE IV
SUCCESS RATE FOR GRAM SEGMENTING
Pattern
# of Patterns
Space Reduction
2-gram
3-gram
4-gram
5-gram
12.9
99.997 %
25.7
99.993 %
29.2
99.992 %
29.9
99.992 %
sequence. It turns out the search space is signiﬁcantly reduced
when starting from state sequences, as shown in Table III. If
the phone is grabbed by an attacker, only dozens of attempts
are needed for a correctly interred state sequence. Take 3-gram
pattern as an example, 99.993 % patterns have been excluded
already and on average only 25.7 pattern passwords need to be
tested. If we assume drawing one pattern takes 4 s, an attacker
could unlock victim’s phone in (cid:5)25.7(cid:6) × 4 + 4 × 30 = 224 s
(every 5 wrong attempts lead to 30 s punitive wait, which is
the default setting in AOSP). This process can even be fully
automated by plugging in a signal simulator to the victim’s
phone [29].
C. Evaluation
We evaluate the effectiveness of our attack against the pat-
tern passwords inputted by real users. Different from previous
works [2], [30], which only attack a very limited number of
patterns (50 for [2] and 1 for [30]), our attack targets all
389,112 patterns. In particular, we ﬁrst evaluate the accuracy
of gram segmentation during the data pre-processing stage.
Then, we examine the success rate of the state sequence
inference. As a comparison, we also run the attack under the
same setting of [2].
Attack App. Two modules, interrupt sampling module and
data analysis module, are developed and included in the attack
app. For the ﬁrst module, we wrote it in native C using
Android NDK [31]. The second module is written in Java.
For the optimal performance, we implemented the HMM and
Viterbi algorithm (around 750 lines of code) instead of using
other general libraries.
Experimental Setup. The Gaussian model for single state
needs to be trained before the actual attack, and we reuse
the data collected from the 5 users. For testing, we invited 2
users and none of them participated in the training step. The
experiment device is the same Google Nexus 6 phone with
our attack app installed.
We only consider 2-gram, 3-gram, 4-gram and 5-gram
patterns, because too long gram patterns are rarely used
in practice [17], [32]. Besides, it is difﬁcult to require the
users during our test to remember all long pattern passwords.
We randomly generated 20 password patterns for each x-
gram (x ∈ [2, 5]) from 389,112 pattern passwords (listed in
the Appendix VIII-D) and asked these two users to draw
each generated pattern two times. In total, we obtained 160
password patterns from each user.
Gram Segmentation Result. In this part, we examine whether
the interrupt time series could be segmented correctly and the
result is shown in Table IV. The success rate turns out to be
Pattern
2-gram
3-gram
4-gram
5-gram
Success Rate
98.75 %
92.5 %
97.5 %
97.5 %
Search Space Reduction
99.96 % (from 389,112 to 168)
99.35 % (from 389,112 to 2,544)
97.16 % (from 389,112 to 11,048)
90.45 % (from 389,112 to 37,160)
SUCCESS RATE FOR STATE SEQUENCE INFERENCE
TABLE V
User #
User 1
User 2
Top N
Top 3
Top 5
Top 10
Top 20
Top 40
Top 3
Top 5
Top 10
Top 20
Top 40
2-gram 3-gram 4-gram 5-gram Popular
47.2 %
52.8 %
61.1 %
72.2 %
83.3 %
50 %
61.1 %
63.9 %
75 %
77.8 %
0
0
2.5 %
12.5 %
17.5 %
2.5 %
5 %
10 %
20 %
22.5 %
7.5 %
10 %
20 %
37.5 %
52.5 %
15 %
22.5 %
25 %
40 %
57.5 %
50 %
80 %
97.5 %
97.5 %
97.5 %
45 %
62.4 %
95 %
100 %
100 %
25 %
27.5 %
40 %
60 %
90 %
20 %
22.5 %
35 %
50 %
70 %
very high (more than 95 % on average), which also suggests
the interrupt gap between different swipe lines is prominent.
From the perspective of computation complexity, even if the
attacker’s knowledge is only the number of grams, the search
space can be substantially reduced.
State Sequence Inference Result. We tested the effectiveness
of the output of state sequence inference and the result is
listed in Table V. In the case of 3-gram, random guessing
only reaches 0.0157 % success rate (guessing 3 times) while
our attack could improve the success rate to thousands of
times – 20 % at least. Given that exhausting passwords for
a 3-gram pattern is only 25.7 times (see Table III), for 20%
such patterns, the attack time is acceptable. The success rate
decreases with the increase of the number of grams since more
errors would be introduced.
Popular Patterns. Recent studies [17], [32], [33] on usable
security discovered that the pattern used by a user is not a
random selection. In fact, several patterns are extensively used,
and we could leverage this insight to remove unpopular pat-
terns from search space. We studied the 6 popular patterns [32]
(ranging from 2-gram to 5-gram) and removed any pattern
from the 389,112 patterns if it contains a L4 line or starting
dot is {5, 6, 8, 9}. L4 line is hard to be drawn by user, and
none of the starting dot is used by popular patterns.
To test our attack against popular patterns, we use the 6
patterns as the initial set and extend it through clock-wise
rotations (90, 180 degrees separately), totally 18 patterns. The
shapes of the original 6 patterns and the list of all 18 patterns
are shown in Appendix VIII-D. We asked the same 2 users to
input the 18 patterns twice. The result shows our success rate
is improved noticeably (see the last column in Table V).
Password Pattern Inference with Prior Knowledge. The
previous experiments consider all valid password patterns
423423
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:05 UTC from IEEE Xplore.  Restrictions apply. 
SUCCESSFUL RATE FOR PATTERN PASSWORD INFERENCE
TABLE VI
User #
Top N
User 1
User 2
Top 1
Top 2
Top 3
Top 5
Top 1
Top 2
Top 3
Top 5
50
patterns
38 %
56.5 %
60 %
60 %
38.5 %
61.1 %
64 %
64 %
100
patterns
29 %
40.3 %
46.3 %
49.7 %
31.1 %
42 %
47.1 %
51.5 %
200
patterns
23.8 %
28.5 %
29.5 %
32.3 %
22.3 %
27.5 %
29 %
32.3 %
500
patterns
11.5 %
16.7 %
18.7 %
20.4 %
12.2 %
17 %
18.6 %
19.6 %
as targets. For this experiment, we adopt the same setting
of previous works [2], that user’s password choices can be
conﬁned based on the prior knowledge. We assume the victim
selects her secret pattern passwords from a pre-deﬁned set.
Also in this experiment, we evaluate the success rate of
breaking the password pattern instead of state sequence.
We asked the two users each to select one pattern from the
80 patterns (4 × 20) provided in the previous experimental
setup and draw it on the testing phone twice. This process
was repeated 20 times. The selected pattern is then mixed with
randomly generated password patterns to build the pre-deﬁned
set. Four different set sizes are considered here: 50, 100, 200
and 500 and the password inference success rate is listed in
Table VI. When the set size is 50, we have more than half
a chance to unlock victim’s phone by just 2 attempts. This
result is comparable to [2] exploiting the side-channel from
accelerometer, which was able to crack a password pattern
within 5 attempts with 73 % accuracy when user’s sitting and
40 % accuracy when user’s walking. In addition, our attack
removes the two restrictions of [2]: 1) the body movement
has to be small (the accuracy is much worse when the user
walks than sits). 2) the mobile phone has to be held at hand
(accelerometer produces no usable data when the phone is
placed on the desk).
Battery and Time Consumption. Most of the battery con-
sumption is cost by the interrupt sampling module. Since this
module only runs when the screen is lighted and ends before
the phone is unlocked (generally, the sampling period <30 s),
the battery consumption is very slim and hard to be observed
(<1 %). To infer one unlock pattern, the computation time
of data analysis module is less than 0.3 s, which is also
negligible.
V. FOREGROUND APP INFERENCE ATTACK
In this section, we present the attack on inferring the app
running in the foreground. We start from introducing Display
Sub-System and interrupts. We then elaborate how we leverage
the interrupt side-channel for attacks and the evaluation result.
A. Display Sub-System and Interrupt
Display Sub-System (DSS) takes in charge of controlling the
actual display and governing the FrameBuffer driver. It keeps
refreshing the screen using the content from FrameBuffer
VSync
VSync
VSync
1
2
2
3
3
4
2
3
4
Display
GPU
CPU
0
1
1
Time
Fig. 12. VSync signal that keeps refreshing rate ﬁxed.
(/dev/graphics/fbX) when the content is updated till
all
the changes are rendered. The complete workﬂow of
Android display system is provided in Appendix VIII-B as
supplementary.
IRQ from DSS. The design of screen refreshing is changed
drastically since Android 4.1, and our attack targets the DSS
under this setting. In Android 4.1, Project Butter is launched
by Google to improve UI display smoothness. As one of
the main visual performance improvements, the VSync (ver-
tical synchronization) mechanism is integrated [34] to keep
the refresh rate ﬁxed at 60 Hz, or 60 frames per second
(FPS). Speciﬁcally, the refresh requests will be queued and
synchronized at regular interval. Fig. 12 illustrates this VSync
mechanism, in which the drawing operations of CPU and GPU
always start with the VSync signal [35].
A VSync IRQ will be issued by DSS after one full-
screen refresh is completed [36], announcing the end of one
frame interval and the beginning of the next. As shown in
Section III-B, the IRQ time series is distinctive for each app’s
launching process, depending on the content loaded by the
app and its refreshing strategy. Since only one app is allowed
to run in the foreground, we could infer the foreground app
through observed interrupt time series from DSS.
Remarks. For some phones under VSync mechanism, the
frequency of interrupts issued from DSS can be 120 Hz,
due to VSync signal virtualization [37], a new enhancement
by Google since Android 4.4. This technique is proposed
for more efﬁcient synchronization. Two virtual VSync signals
(one is used for app UI data preparation, and another is
for SurfaceFlinger) will be sprung from one physical VSync
signal.
B. Attack Methodology
Different from the unlock pattern inference attack, where
the interrupt time series can be segmented and the amount of
interrupts within each segment can be mapped to a limited set
of states, the interrupt time series of app launching is more
random and it is impractical to map the foreground app to
an arbitrary one. Therefore, we build app ﬁngerprints using
interrupt time series for popular apps a priori and attempt to
ﬁnd a matching app for a foreground app running on victim’s
phone. We ﬁrst elaborate our techniques for reading interrupt
data, data pre-processing and similarity calculation. Then we
describe the training process for building ﬁngerprint base and
testing process for detecting foreground app.
424424
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:05 UTC from IEEE Xplore.  Restrictions apply. 
TABLE VII
SUMMARY OF DEVICE NAMES FOR DSS
Phone Model
Google Nexus 6
Moto Droid Turbo
Moto Milestone 2
Sony Xperia Z3
Sony Xperia ion
Samsung Galaxy A5
Samsung Galaxy S3
Samsung Galaxy S
Advance
Device Name
PIC Name
MDSS
GIC
MDSS
GIC
OMAP DSS
INTC
MDSS
GIC
MDP
GIC
GIC
MDSS
COMBINER s3cfb
GIC
nmk-i2c
(non-unique)
Device Vendor
Qualcomm