In addition to focusing on a common class of semantic bugs,
LRSan differs from aforementioned missing-check detectors in that
it can identify security checks without the requirements of multiple
implementations of target systems or manual specifications.
8.3 Double-Fetch Bugs
Recent research has attempted to detect a class of semantic bugs
named double-fetch in OS kernels. A double-fetch bug is a case
in which same user-space data is fetched into kernel space twice.
Since malicious users may race to change the data between the two
fetches, inconsistent data could be fetched. A double fetch itself is
not a security issue but rather just improper programming practice.
Depending on how the fetched data is used and checked, a double-
fetch case may become a security bug. The Bochspwn project [16]
introduced double-fetch bugs for the Windows kernel. Wang et
al. [41] then systematically studied double fetches and employed
patch matching to find successive fetches (e.g., copy_from_user()).
DECAF [33] exposes double fetches through cache side channel in-
formation because double fetches leave cache patterns. All these de-
tectors do not further check if a double-fetch would lead to security
issues, causing significant false positives. Deadline [46] improves
double-fetch detection and detects double-fetch bugs by checking
whether the value may influence control flow or data flow between
the fetches. However, if the value obtained from the second fetch
is rechecked or never used for security-related operations, such
a double fetch is still not a real bug. By contrast, LRSan aims to
detect actual check-bypassing bugs. That is, a critical variable with
check-violating values is used. Moreover, LRSan targets general
critical data (i.e., not just the one from user space) and general
modification (i.e., not just from copy_from_user()). Five new bugs
found by LRSan target non-user data, which by definition cannot
be identified by double-fetch detection.
8.4 Atomicity Bugs
When a modification is coming from another thread, LRC has an
overlap with atomicity violation (by contrast, double-fetch is a class
of race condition, not atomicity violation). Atomicity is a generic
concurrency property that ensures proper synchronization on ac-
cesses from multiple threads to shared data structures. Atomicity
violation has been extensively studied in previous work [14, 15,
20, 27, 42]. In high level, existing detection tools define atomicity-
violation bugs as cases in which a variable is shared by multiple
threads, and one thread has a pair of accesses to this variable while
other threads may potential write to or read from the variable be-
tween the two accesses. Such a detection mechanism is not suitable
for detecting LRC bugs due to several reasons: (1) the variable in
LRC may not be shared but modified locally in the same thread;
(2) the modification may cross user-kernel boundary or come from
global or heap; and (3) the traditional detection pattern is too gen-
eral and thus suffers from significant false positives. In LRSan, we
design multiple dedicated mechanisms to detect LRC bugs. LRSan
focuses on critical variables inferred from identified security checks
and is able to detect modification from local.
More importantly, if the modification is from the thread itself,
an LRC bug is not an atomicity-violation bug. In other words, LRC
bugs can exist in single-threaded programs. Therefore, LRC also
differs from atomicity violation.
8.5 Error-Code Analysis
Prior research works have tried to detect and monitor error-code
propagation [9, 13, 31, 32]. However, they mainly focused on analyz-
ing the completeness and correctness of error-code propagation and
handling, instead of leveraging error codes to infer security checks.
Kenali [36] attempts to infer access controls based on error code
-EACCES. However, it uses a simple pattern-matching approach to
find return -EACCES and treats the closest if statement as the access-
control check. Such an approach misses cases where an error code
is assigned to a to-be-returned variable. Kenali does not support
general error codes nor formally define a security check, suffering
from significant false reports. In comparison, we formally define
security checks. LRSan is capable of systematically and precisely
find security checks using ECFG. LRSan is also able to recursively
find the associated critical variables.
9 CONCLUSION
OS kernels validate external inputs and critical operations through
a large number of security checks. LRSan identifies more than
131K security checks in current Linux kernel. A security-checked
variable should not be modified before being used. Otherwise, the
security check is rendered ineffective. If a recheck is missing after
a modification, various critical security issues may arise. Attackers
can control the security-checked variable to bypass the security
check, causing attacks such as privilege escalation, out-of-bound
access, or denial-of-services. We call such cases LRC bugs, a specific
class of semantic errors that has not been explored before.
This paper presents the first in-depth study of LRC bugs, includ-
ing the formal definition, common causes, and security impact of
such bugs. This paper also describes LRSan, the first automated
static analysis system for detecting LRC cases in OS kernels. LRSan
is equipped with multiple novel techniques such as automated se-
curity check identification and recursive critical-variable inference
to systematically detect LRC cases. LRSan’s static analysis is inter-
procedural, flow sensitive, context sensitive, and field sensitive. We
have implemented LRSan based on LLVM and applied it to the
latest Linux kernel. LRSan is able to finish the detection within
four hours. Detection results show that LRSan finds 2,808 potential
LRC cases. At the time of paper submission, we have found 19 new
LRC bugs, most of which have been confirmed or fixed with our
patches by Linux kernel maintainers. The results show that LRC is
a common class of semantic errors in OS kernels and that LRSan is
capable of finding LRC bugs effectively.
ACKNOWLEDGMENTS
We would like to thank Hayawardh Vijayakumar and the anony-
mous reviewers for their valuable comments and helpful sugges-
tions. This work is supported in part by the National Science Foun-
dation under Grant No. CNS-1514444.
REFERENCES
[1] Periklis Akritidis, Cristian Cadar, Costin Raiciu, Manuel Costa, and Miguel Cas-
tro. 2008. Preventing Memory Error Exploits with WIT. In Proceedings of the
2008 IEEE Symposium on Security and Privacy (SP ’08). IEEE Computer Society,
Washington, DC, USA, 263–277. https://doi.org/10.1109/SP.2008.30
[2] Marcel Böhme, Van-Thuan Pham, and Abhik Roychoudhury. 2016. Coverage-
based Greybox Fuzzing As Markov Chain. In Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’16). ACM, New York,
NY, USA, 1032–1043. https://doi.org/10.1145/2976749.2978428
[3] Dan Carpenter. 2009. Smatch - the source matcher. http://smatch.sourceforge.
[4] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. 2011. S2E: A
Platform for In-vivo Multi-path Analysis of Software Systems. In Proceedings of
the Sixteenth International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS XVI). ACM, New York, NY, USA,
265–278. https://doi.org/10.1145/1950365.1950396
[5] Kees Cook. 2017. Linux Kernel Self Protection Project. https://outflux.net/slides/
2017/lss/kspp.pdf.
[6] Will Dietz, Peng Li, John Regehr, and Vikram Adve. 2012. Understanding In-
teger Overflow in C/C++. In Proceedings of the 34th International Conference
on Software Engineering (ICSE ’12). IEEE Press, Piscataway, NJ, USA, 760–770.
http://dl.acm.org/citation.cfm?id=2337223.2337313
[7] Dawson Engler, David Yu Chen, Seth Hallem, Andy Chou, and Benjamin Chelf.
2001. Bugs As Deviant Behavior: A General Approach to Inferring Errors in
Systems Code. In Proceedings of the Eighteenth ACM Symposium on Operat-
ing Systems Principles (SOSP ’01). ACM, New York, NY, USA, 57–72. https:
//doi.org/10.1145/502034.502041
[8] David Gens, Simon Schmitt, Lucas Davi, and Ahmad-Reza Sadeghi. 2018. K-Miner:
Uncovering Memory Corruption in Linux. In 2018 Network and Distributed System
Security Symposium (NDSS ’18).
[9] Haryadi S. Gunawi, Cindy Rubio-González, Andrea C. Arpaci-Dusseau, Remzi H.
Arpaci-Dussea, and Ben Liblit. 2008. EIO: Error Handling is Occasionally Cor-
rect. In Proceedings of the 6th USENIX Conference on File and Storage Technolo-
gies (FAST’08). USENIX Association, Berkeley, CA, USA, Article 14, 16 pages.
http://dl.acm.org/citation.cfm?id=1364813.1364827
[10] Ben Hardekopf and Calvin Lin. 2007. The Ant and the Grasshopper: Fast and Accu-
rate Pointer Analysis for Millions of Lines of Code. In Proceedings of the 28th ACM
SIGPLAN Conference on Programming Language Design and Implementation (PLDI
’07). ACM, New York, NY, USA, 290–299. https://doi.org/10.1145/1250734.1250767
[11] Ben Hardekopf and Calvin Lin. 2011. Flow-sensitive Pointer Analysis for Mil-
lions of Lines of Code. In Proceedings of the 9th Annual IEEE/ACM International
Symposium on Code Generation and Optimization (CGO ’11). IEEE Computer Soci-
ety, Washington, DC, USA, 289–298. http://dl.acm.org/citation.cfm?id=2190025.
2190075
[12] Intel. June, 2017. Programming with Intel Transactional Synchronization Exten-
sions. In Intel 64 and IA-32 Architectures Software Developer’s Manual, Volume 1,
Chapter 16.
[13] Suman Jana, Yuan Kang, Samuel Roth, and Baishakhi Ray. 2016. Automatically
Detecting Error Handling Bugs Using Error Specifications. In Proceedings of the
25th USENIX Conference on Security Symposium (SEC’16). USENIX Association,
Berkeley, CA, USA, 345–362. http://dl.acm.org/citation.cfm?id=3241094.3241122
[14] Guoliang Jin, Linhai Song, Wei Zhang, Shan Lu, and Ben Liblit. 2011. Automated
Atomicity-violation Fixing. In Proceedings of the 32Nd ACM SIGPLAN Conference
on Programming Language Design and Implementation (PLDI ’11). ACM, New
York, NY, USA, 389–400. https://doi.org/10.1145/1993498.1993544
[15] Guoliang Jin, Wei Zhang, Dongdong Deng, Ben Liblit, and Shan Lu. 2012. Auto-
mated Concurrency-bug Fixing. In Proceedings of the 10th USENIX Conference on
Operating Systems Design and Implementation (OSDI’12). USENIX Association,
Berkeley, CA, USA, 221–236. http://dl.acm.org/citation.cfm?id=2387880.2387902
[16] Mateusz Jurczyk and Gynvael Coldwind. 2013. Bochspwn: Identifying 0-days via
System-wide Memory Access Pattern Analysis. (2013).
[17] James C. King. 1976. Symbolic Execution and Program Testing. Commun. ACM
19, 7 (July 1976), 385–394. https://doi.org/10.1145/360248.360252
[18] Byoungyoung Lee, Chengyu Song, Taesoo Kim, and Wenke Lee. 2015. Type
Casting Verification: Stopping an Emerging Attack Vector. In Proceedings of the
24th USENIX Conference on Security Symposium (SEC’15). USENIX Association,
Berkeley, CA, USA, 81–96. http://dl.acm.org/citation.cfm?id=2831143.2831149
[19] Kangjie Lu, Chengyu Song, Taesoo Kim, and Wenke Lee. 2016. UniSan: Proactive
Kernel Memory Initialization to Eliminate Data Leakages. In Proceedings of the
2016 ACM SIGSAC Conference on Computer and Communications Security (CCS
’16). ACM, New York, NY, USA, 920–932. https://doi.org/10.1145/2976749.2978366
[20] Shan Lu, Joseph Tucek, Feng Qin, and Yuanyuan Zhou. 2006. AVIO: Detect-
ing Atomicity Violations via Access Interleaving Invariants. In Proceedings of
the 12th International Conference on Architectural Support for Programming Lan-
guages and Operating Systems (ASPLOS XII). ACM, New York, NY, USA, 37–48.
https://doi.org/10.1145/1168857.1168864
[21] Aravind Machiry, Chad Spensky, Jake Corina, Nick Stephens, Christopher
Kruegel, and Giovanni Vigna. 2017. DR. CHECKER: A Soundy Analysis for
Linux Kernel Drivers. In 26th USENIX Security Symposium (USENIX Security
17). USENIX Association, Vancouver, BC, 1007–1024. https://www.usenix.org/
conference/usenixsecurity17/technical-sessions/presentation/machiry
[22] Changwoo Min, Sanidhya Kashyap, Byoungyoung Lee, Chengyu Song, and Tae-
soo Kim. 2015. Cross-checking Semantic Correctness: The Case of Finding File
System Bugs. In Proceedings of the 25th Symposium on Operating Systems Prin-
ciples (SOSP ’15). ACM, New York, NY, USA, 361–377. https://doi.org/10.1145/
2815400.2815422
[23] Maliheh Monshizadeh, Prasad Naldurg, and V. N. Venkatakrishnan. 2014. MACE:
Detecting Privilege Escalation Vulnerabilities in Web Applications. In Proceedings
of the 2014 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’14). ACM, New York, NY, USA, 690–701. https://doi.org/10.1145/2660267.
2660337
[24] Ben Niu and Gang Tan. 2014. Modular Control-flow Integrity. In Proceed-
ings of the 35th ACM SIGPLAN Conference on Programming Language Design
and Implementation (PLDI ’14). ACM, New York, NY, USA, 577–587. https:
//doi.org/10.1145/2594291.2594295
[25] Peter Norvig. 1992. The General Problem Solver.
[26] Yoann Padioleau, Julia Lawall, René Rydhof Hansen, and Gilles Muller. 2008.
Documenting and Automating Collateral Evolutions in Linux Device Drivers.
In Proceedings of the 3rd ACM SIGOPS/EuroSys European Conference on Com-
puter Systems 2008 (Eurosys ’08). ACM, New York, NY, USA, 247–260. https:
//doi.org/10.1145/1352592.1352618
[27] Soyeon Park, Shan Lu, and Yuanyuan Zhou. 2009. CTrigger: Exposing Atom-
icity Violation Bugs from Their Hiding Places. In Proceedings of the 14th Inter-
national Conference on Architectural Support for Programming Languages and
Operating Systems (ASPLOS XIV). ACM, New York, NY, USA, 25–36. https:
//doi.org/10.1145/1508244.1508249
[28] Hui Peng, Yan Shoshitaishvili, and Mathias Payer. 2018. T-Fuzz: fuzzing by pro-
gram transformation. In 2018 IEEE Symposium on Security and Privacy (SP ’18),
Vol. 00. 917–930. https://doi.org/10.1109/SP.2018.00056
[29] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida,
and Herbert Bos. 2017. VUzzer: Application-aware Evolutionary Fuzzing. In 2017
Network and Distributed System Security Symposium (NDSS ’17).
[30] Matthew J. Renzelmann, Asim Kadav, and Michael M. Swift. 2012. SymDrive:
Testing Drivers Without Devices. In Proceedings of the 10th USENIX Conference
on Operating Systems Design and Implementation (OSDI’12). USENIX Association,
Berkeley, CA, USA, 279–292. http://dl.acm.org/citation.cfm?id=2387880.2387908
[31] Cindy Rubio-González, Haryadi S. Gunawi, Ben Liblit, Remzi H. Arpaci-Dusseau,
and Andrea C. Arpaci-Dusseau. 2009. Error Propagation Analysis for File Sys-
tems. In Proceedings of the 30th ACM SIGPLAN Conference on Programming Lan-
guage Design and Implementation (PLDI ’09). ACM, New York, NY, USA, 270–280.
https://doi.org/10.1145/1542476.1542506
[32] Cindy Rubio-González and Ben Liblit. 2011. Defective Error/Pointer Interac-
tions in the Linux Kernel. In Proceedings of the 2011 International Symposium on
Software Testing and Analysis (ISSTA ’11). ACM, New York, NY, USA, 111–121.
https://doi.org/10.1145/2001420.2001434
[33] Michael Schwarz, Daniel Gruss, Moritz Lipp, Clémentine Maurice, Thomas Schus-
ter, Anders Fogh, and Stefan Mangard. 2017. Automated Detection, Exploita-
tion, and Elimination of Double-Fetch Bugs using Modern CPU Features. CoRR
abs/1711.01254 (2017). arXiv:1711.01254 http://arxiv.org/abs/1711.01254
[34] Juraj Somorovsky. 2016. Systematic Fuzzing and Testing of TLS Libraries. In
Proceedings of the 2016 ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS ’16). ACM, New York, NY, USA, 1492–1504.
https:
//doi.org/10.1145/2976749.2978411
[35] Sooel Son, Kathryn S. McKinley, and Vitaly Shmatikov. 2011. RoleCast: Finding
Missing Security Checks when You Do Not Know What Checks Are. In Proceed-
ings of the 2011 ACM International Conference on Object Oriented Programming
Systems Languages and Applications (OOPSLA ’11). ACM, New York, NY, USA,
1069–1084. https://doi.org/10.1145/2048066.2048146
[36] Chengyu Song, Byoungyoung Lee, Kangjie Lu, William R. Harris, Taesoo Kim,
and Wenke Lee. 2016. Enforcing Kernel Security Invariants with Data Flow
Integrity. In 2016 Network and Distributed System Security Symposium (NDSS ’16).
[37] Laszlo Szekeres, Mathias Payer, Tao Wei, and Dawn Song. 2013. SoK: Eter-
nal War in Memory. In Proceedings of the 2013 IEEE Symposium on Security
and Privacy (SP ’13). IEEE Computer Society, Washington, DC, USA, 48–62.
https://doi.org/10.1109/SP.2013.13
[38] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar
Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-edge Control-
flow Integrity in GCC & LLVM. In Proceedings of the 23rd USENIX Conference on
Security Symposium (SEC’14). USENIX Association, Berkeley, CA, USA, 941–955.
http://dl.acm.org/citation.cfm?id=2671225.2671285
[39] Linus Torvalds. 2006. match - the source matcher. https://sparse.wikii.kernel.
org/index.php/Main_Page.
[40] Hayawardh Vijayakumar, Xinyang Ge, Mathias Payer, and Trent Jaeger. 2014.
JIGSAW: Protecting Resource Access by Inferring Programmer Expectations.
In Proceedings of the 23rd USENIX Conference on Security Symposium (USENIX
Security 14). USENIX Association, Berkeley, CA, USA, 973–988. http://dl.acm.
org/citation.cfm?id=2671225.2671287
[41] Pengfei Wang, Jens Krinke, Kai Lu, Gen Li, and Steve Dodier-Lazaro. 2017. How
Double-Fetch Situations turn into Double-Fetch Vulnerabilities: A Study of Dou-
ble Fetches in the Linux Kernel. In 26th USENIX Security Symposium (USENIX
Security 17). USENIX Association, Vancouver, BC, 1–16. https://www.usenix.org/
conference/usenixsecurity17/technical-sessions/presentation/wang-pengfei
[42] Wenwen Wang, Zhenjiang Wang, Chenggang Wu, Pen-Chung Yew, Xipeng Shen,
Xiang Yuan, Jianjun Li, Xiaobing Feng, and Yong Guan. 2014. Localization of
Concurrency Bugs Using Shared Memory Access Pairs. In Proceedings of the 29th
ACM/IEEE International Conference on Automated Software Engineering (ASE ’14).
ACM, New York, NY, USA, 611–622. https://doi.org/10.1145/2642937.2642972
[43] Xi Wang, Haogang Chen, Zhihao Jia, Nickolai Zeldovich, and M. Frans Kaashoek.
2012. Improving Integer Security for Systems with KINT. In Proceedings of the 10th
USENIX Conference on Operating Systems Design and Implementation (OSDI’12).
USENIX Association, Berkeley, CA, USA, 163–177. http://dl.acm.org/citation.
cfm?id=2387880.2387897
[44] Christian Wressnegger, Fabian Yamaguchi, Alwin Maier, and Konrad Rieck. 2016.
Twice the Bits, Twice the Trouble: Vulnerabilities Induced by Migrating to 64-
Bit Platforms. In Proceedings of the 2016 ACM SIGSAC Conference on Computer
and Communications Security (CCS ’16). ACM, New York, NY, USA, 541–552.
https://doi.org/10.1145/2976749.2978403
[45] Jun Xu, Dongliang Mu, Ping Chen, Xinyu Xing, Pei Wang, and Peng Liu. 2016.
CREDAL: Towards Locating a Memory Corruption Vulnerability with Your
Core Dump. In Proceedings of the 2016 ACM SIGSAC Conference on Computer
and Communications Security (CCS ’16). ACM, New York, NY, USA, 529–540.
https://doi.org/10.1145/2976749.2978340
[46] Meng Xu, Chenxiong Qian, Kangjie Lu, Michael Backes, and Taesoo Kim. 2018.
Precise and Scalable Detection of Double-Fetch Bugs in OS Kernels. In Proceedings
of the 39th IEEE Symposium on Security and Privacy (Oakland). San Francisco,
CA.
[47] Fabian Yamaguchi, Christian Wressnegger, Hugo Gascon, and Konrad Rieck.
2013. Chucky: Exposing Missing Checks in Source Code for Vulnerability
Discovery. In Proceedings of the 2013 ACM SIGSAC Conference on Computer
and Communications Security (CCS ’13). ACM, New York, NY, USA, 499–510.
https://doi.org/10.1145/2508859.2516665
[48] Insu Yun, Changwoo Min, Xujie Si, Yeongjin Jang, Taesoo Kim, and Mayur Naik.
2016. APISan: Sanitizing API Usages through Semantic Cross-Checking. In
25th USENIX Security Symposium (USENIX Security 16). USENIX Association,
Austin, TX, 363–378. https://www.usenix.org/conference/usenixsecurity16/
technical-sessions/presentation/yun