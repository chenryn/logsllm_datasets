### 8.3 Double-Fetch Bugs

Recent research has focused on detecting a class of semantic bugs known as double-fetch bugs in operating system (OS) kernels. A double-fetch bug occurs when the same user-space data is fetched into kernel space twice. Malicious users can exploit this by racing to change the data between the two fetches, leading to inconsistent data being fetched. While a double-fetch itself is not a security issue, it can become one depending on how the fetched data is used and checked.

The Bochspwn project [16] first introduced double-fetch bugs in the Windows kernel. Wang et al. [41] then systematically studied these bugs and employed patch matching to identify successive fetches, such as `copy_from_user()`. DECAF [33] uses cache side-channel information to detect double fetches, as they leave specific cache patterns. However, these detectors do not check if a double-fetch would lead to security issues, resulting in significant false positives.

Deadline [46] improves double-fetch detection by checking whether the value may influence control flow or data flow between the fetches. However, if the value from the second fetch is rechecked or never used for security-related operations, the double-fetch is not a real bug. In contrast, LRSan aims to detect actual check-bypassing bugs, where a critical variable with check-violating values is used. LRSan targets general critical data (not just user-space data) and general modifications (not just from `copy_from_user()`). Five new bugs found by LRSan target non-user data, which cannot be identified by double-fetch detection.

### 8.4 Atomicity Bugs

When a modification comes from another thread, LRC overlaps with atomicity violations. Atomicity ensures proper synchronization on accesses from multiple threads to shared data structures. Atomicity violations have been extensively studied in previous work [14, 15, 20, 27, 42]. Existing detection tools define atomicity-violation bugs as cases where a variable is shared by multiple threads, and one thread has a pair of accesses to this variable while other threads may write to or read from the variable between the two accesses.

This detection mechanism is not suitable for LRC bugs for several reasons:
1. The variable in LRC may not be shared but modified locally within the same thread.
2. The modification may cross the user-kernel boundary or come from global or heap memory.
3. Traditional detection patterns are too general, leading to significant false positives.

LRSan is designed with dedicated mechanisms to detect LRC bugs, focusing on critical variables inferred from identified security checks and capable of detecting local modifications. Importantly, if the modification is from the thread itself, an LRC bug is not an atomicity-violation bug. LRC bugs can exist in single-threaded programs, further differentiating them from atomicity violations.

### 8.5 Error-Code Analysis

Previous research has attempted to detect and monitor error-code propagation [9, 13, 31, 32]. These works primarily focused on analyzing the completeness and correctness of error-code propagation and handling, rather than leveraging error codes to infer security checks. Kenali [36] attempts to infer access controls based on the error code `-EACCES` using a simple pattern-matching approach. However, this approach misses cases where an error code is assigned to a to-be-returned variable and does not support general error codes, leading to significant false reports.

In comparison, LRSan formally defines security checks and systematically finds them using Extended Control Flow Graphs (ECFG). LRSan can also recursively find associated critical variables, providing a more precise and comprehensive analysis.

### 9 Conclusion

Operating system (OS) kernels validate external inputs and critical operations through numerous security checks. LRSan identifies over 131,000 security checks in the current Linux kernel. A security-checked variable should not be modified before use; otherwise, the security check becomes ineffective. If a recheck is missing after a modification, various critical security issues may arise, such as privilege escalation, out-of-bound access, or denial-of-service attacks. We term such cases LRC bugs, a specific class of semantic errors that have not been explored before.

This paper presents the first in-depth study of LRC bugs, including their formal definition, common causes, and security impact. It also describes LRSan, the first automated static analysis system for detecting LRC cases in OS kernels. LRSan is equipped with novel techniques such as automated security check identification and recursive critical-variable inference to systematically detect LRC cases. LRSan's static analysis is interprocedural, flow-sensitive, context-sensitive, and field-sensitive. We implemented LRSan based on LLVM and applied it to the latest Linux kernel, completing the detection within four hours. Detection results show that LRSan finds 2,808 potential LRC cases. At the time of submission, we have found 19 new LRC bugs, most of which have been confirmed or fixed with our patches by Linux kernel maintainers. The results demonstrate that LRC is a common class of semantic errors in OS kernels and that LRSan is effective in finding LRC bugs.

### Acknowledgments

We would like to thank Hayawardh Vijayakumar and the anonymous reviewers for their valuable comments and helpful suggestions. This work is supported in part by the National Science Foundation under Grant No. CNS-1514444.

### References

[References listed as provided in the original text]

This optimized version enhances the clarity, coherence, and professionalism of the text, making it more suitable for academic or technical audiences.