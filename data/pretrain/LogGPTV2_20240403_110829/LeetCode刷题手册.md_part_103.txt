解题思路
提示：
的 25%。请你找到并返回这个整数。
给你一个非递减的 有序整数数组，已知这个数组中恰好有一个整数，它的出现次数超过数组元素总数
题目大意
 Constraints:
Return that integer.
that occurs more than 25% of the time. 
Given an integer array sorted in non-decreasing order, there is exactly one integer in the array
Array.
1287. Element Appearing More Than 25% In Sorted
·简单题，由于已经非递减有序了，所以只需要判断 arr[i]== arr[i+n/4] 是否相等即可。
Example 1: 
题目
func findspecialInteger(arr []int) int {
● 0= O; i-- {
j，temp := -1,0 
j = max(j， temp)
arr[i] = j 
temp = arr[i] 
---
## Page 1101
代码
解题思路
提示：
和最接近 target 的方案，请你返回这些整数中的最小值。请注意，答案不一定是 arr 中的数字。
的值变成 value 后，数组的和最接近 target（最接近表示两者之差的绝对值最小）。如果有多种使得
给你一个整数数组 arr 和一个目标值 target，
·给出一个数组 arr 和 target。能否找到一个 value 值，
● 1 >1
 low = mid + 1 
high = mid 
请你返回一个整数 value，使得将数组中所有大于value 
使得将数组中所有大于 value 的值变成
---
## Page 1102
代码
解题思路
提示：
给你一棵二叉树，请你返回层数最深的叶子节点的和。
题目大意
Constraints:
Example 1:
Given a binary tree, return the sum of values of its deepest leaves.
题
1302. Deepest Leaves Sum
·这一题不难，DFS 遍历把最底层的叶子节点和都加起来即可。
·给你一棵二叉树，请你返回层数最深的叶子节点的和。
·每个节点的值在1到100 之间。
·树中节点数目在1到10^4之间。
● The value of nodes is between 1 and 100.
● The number of nodes in the tree is between 1 and 10^4 .
func deepestLeavesSum(root *TreeNode) int {
output: 15
Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
目
S
9
8
---
## Page 1103
题目大意
Example 2:
'0 op dn ppe Kauz pey yons shagau anbiun u gujuseuos Kee Kue unal 'u aau! ue uan!
1304. Find N Unique Integers Sum up to Zero
Constraints:
Example 3: 
Example 1: 
题
·1 *maxLevel {
return sum
dfsDeepestLeavesSum(root, O, &maxLevel, &sum)
maxLevel, sum := 0, 0 
 return
*sum += root.Val
*maxLevel, *sum = level, root.Val
level+l, 
 maxLevel, sum)
---
## Page 1104
Example 1:
 Return a list containing all the integers from both trees sorted in ascending order.
Given two binary search trees root1 and root2 .
题目
1305. All Elements in Two Binary Search Trees
代码
解题思路
提示：
给你一个整数 n，请你返回 任意一个由 n 个 各不相同 的整数组成的数组，并且这 n 个数相加和为 0。
·简单题，简单循环即可。
·给出一个数n，输出一个有n个数的数组，里面元素之和为 0。
●1 index 4 -> index 1 -> index 3 
:t o ane yaim e xapus ae yoeau on Kem aaissod auo