pending exception, without restoring the context state frame between exceptions.
Due to the fact that the context state stack frame contains a stored pc value
that is restored on exception return, an exception handler with a vulnerability
that allows an attacker to control the content of the context state frame on the
stack constitutes a valid attack vector. This attack diﬀers from a traditional
ROP attack in that the attacker does not need to control the immediate lr
value (which may reside only in the lr register), as during the execution of
the exception handler lr contains merely the current ERV value. Instead, by
manipulating the pc value in the context state stack frame, an attacker can
cause an eﬀective return from the exception handler to an arbitrary address.
To avoid this, CaRE needs to be interrupt aware, and accurately record the
correct return address for the exception handler onto the shadow stack. However,
exceptions (when enabled) may be triggered by events external to the main
274
T. Nyman et al.
program execution, eﬀectively pre-empting the main program at an arbitrary
position in the code, even during the execution of another exception handler
(assuming an exception of higher priority arriving concurrently).
To tackle this challenge, we introduce exception trampolines. When an excep-
tion is received, the trampoline determines the return address, stores it on the
shadow stack, and then proceeds to execute the original exception handler. The
exception trampolines can be instrumented in place by rewriting the non-secure
state exception vector and replacing the address of each exception with the
address of a corresponding exception trampoline, that ends in a ﬁxed branch
to the original exception handler. That address is the original exception vector
entry.
Since CaRE may interrupt the execution of another exception handler, we
need to support a nested exception return, i.e. when the pc is being supplied
with two consecutive return values in immediate succession. However, pc values
in the 0xF0000000 - 0xFFFFFFFF range are only recognized as ERVs when they
are loaded to the pc either via a pop instruction, or a bx with any register (see
Sect. 2.1). In particular, when an ERV is loaded to the pc as part of an exception
return, it is instead interpreted as a memory address in an inaccessible range thus
causing a hard fault in the processor. To overcome this, we also deploy return
trampolines, small fragments of instruction sequences that contain the diﬀerent
eﬀective return instructions originally present in the program image prior to
binary rewriting. When the Branch Monitor returns from the supervisor call
exception handler, it does so via the trampoline corresponding to the original
return instruction.
5 Evaluation
5.1 Security Considerations
A key consideration for the eﬀectiveness of CaRE is the ability of the Branch
Monitor to perform complete mediation of
indirect control-ﬂow events in
untrusted non-secure state program code. After all, any branch instruction for
which an adversary can control the destination may potentially be used to dis-
rupt the normal operation of the program. In practice, it is not possible to com-
pletely eliminate all instructions that may act as indirect branches from the non-
secure state program image. In particular, the bootstrap code, the Branch Mon-
itor itself and the return trampolines must remain uninstrumented. We argue
that despite the Branch Monitor and bootstrap code being uninstrumented,
CaRE is secure in terms of fulﬁlling Requirement 1. We demonstrate this with
the following reasoning.
Claim. In order to maintain the control-ﬂow integrity of the non-secure state
program it is suﬃcient for the Branch Monitor to mediate calls that occur
within the strongly connected component of the main program’s call graph.
We base our reasoning on the following observations:
CFI CaRE: Hardware-Supported Call and Return Enforcement
275
Observation 1. The secure state software stack, and the Branch Monitor are
trusted and cannot be disabled or modiﬁed.
This follows from Assumptions 2 and 3. A secure boot mechanism protects
the program code at rest and read-only memory protects it from modiﬁcation
at runtime.
Observation 2. The main program has been instrumented in a manner which
replaces all subroutine calls and indirect branch instructions with Branch Mon-
itor calls.
This follows simply from the operation of our instrumentation.
Based on these observations we formulate the following invariants:
Invariant 1. Each subroutine within the main program has a ﬁxed entry address
that is the entry point for all control-transfer instructions (that are not returns)
that branch to the subroutine.
Invariant 2. All control-transfer instructions in the main program that act as
eﬀective returns target a previously executed call site within the main program.
Invariant 1 is true for all subroutines that are entered by control-transfer
instructions where the destination address is an immediate operand that is
encoded into the machine code instruction itself. This remains true after instru-
mentation as per Observations 1 and 2, as the destinations addresses are repli-
cated read-only in the branch table, and the control-ﬂow transfer for instru-
mented calls is mediated by the Branch Monitor. The entry address to an inter-
rupt handler is the address recorded in the interrupt vector, and thus ﬁxed, as
interrupt handlers are not called directly from main program code.
As long as Invariant 1 holds control-ﬂow transfers to an oﬀset from the begin-
ning of a subroutine are not possible. This includes branches that target 32-bit
Thumb-2 instructions at a 16-bit oﬀset10, thus attempting to make use of the
ambiguity in the Thumb-2 instruction set encoding.
Invariant 2 follows during benign execution from the structure of the pro-
gram’s call graph and Assumption 2. It remains true after instrumentation,
notably even in the case the return addresses are compromised, because Observa-
tions 1, 2 and Invariant 1 imply that the Branch Monitor has complete mediation
of control-ﬂow transfers within the main program. Thus, the Branch Monitor has
the ability to enforce that no return may target an address from which a match-
ing call site has not been observed.
Based on this, and given that no instrumented subroutine call will ever occur
from the bootstrap code nor from the Branch Monitor into the main program
we may formulate the following corollaries:
Corollary 1. No return within the main program may target the Branch Mon-
itor.
10 Half-word alignment for branch instruction target addresses is enforced by the hard-
ware itself.
276
T. Nyman et al.
Corollary 2. No return within the main program may target the initialization
code.
Hence, as long as the Branch Monitor can correctly mediate all immediate
branches corresponding to subroutine calls and all indirect branch instructions
within the main program, the call/return matching performed by the Branch
Monitor enforces that no control-ﬂow transfers to outside the main program
occur as a result of mediated calls.
We evaluated the eﬀectiveness of our Branch Monitor implementation by
attempting to corrupt control-ﬂow data on the stack through a buﬀer overﬂow
introduced into our sample binaries. We also performed simulations where we
corrupted the target addresses kept in memory or registers for diﬀerent branch
types (both calls and returns) in a debugger. In each case, we observed the
Branch Monitor detecting and preventing the compromised control ﬂow.
5.2 Performance Considerations
The overhead CaRE adds to program execution is dependent on the number of
subroutine calls and returns in the program. We evaluated the impact of CaRE
on performance using microbenchmarks with varying proportions of subroutine
calls (and returns) in relation to other instructions. Our microbenchmarks con-
sisted of an event-based One-Time Password (OTP) generation algorithm that
uses the Corrected Block Tiny Encryption Algorithm (XXTEA) block cipher
algorithm, and a Hash-based Message Authentication Code (HMAC) implemen-
tation using the SHA256 cryptographic hash function. The size of the branch
table was kept constant for each experiment. Our microbenchmarks contain only
direct subroutine calls and all indirect branches corresponded to eﬀective returns.
Table 2. Microbenchmark results. “Monitor traps” shows the number of Branch Mon-
itor invocations during the execution of the microbenchmark routine. “Ratio” shows
the ratio of instrumented control-ﬂow transfer instructions in relation to other machine
code instructions in the main program image.
Program Monitor traps Ratio Uninstrumented Instrumented Overhead
otp
hmac
4
80
1
956
1
588.4
0.53 ms
0.02 ms
0.59 ms
0.09 ms
0.07 ms
0.07 ms
We also instrumented the Dhrystone 2.1 benchmark program [47] in order
to estimate the performance impact on larger pieces of software. Dhrystone is
a synthetic systems programming benchmark used for processor and compiler
performance measurement. It is designed to reﬂect actual programming prac-
tice in systems programming by modeling the distribution of diﬀerent types of
high-level language statements, operators, operand types and locality sourced
from contemporary systems programming statistics. In particular, it attempts
CFI CaRE: Hardware-Supported Call and Return Enforcement
277
Table 3. Dhrystone results. The “One run through Drystone” column shows the aver-
age runtime through the Dhrystone benchmark for the “Uninstrumented ” and “Instru-
mented ” program versions respectively.
Monitor traps Ratio One run through Drystone
34
1
26.4
0.15 ms
0.76 ms
0.61 ms
Uninstrumented Instrumented Overhead
to reﬂect good programming practice by ensuring that the number of subroutine
calls is not too low. Today Dhrystone has largely been supplanted by more com-
plex benchmarks such as SPEC CPU bencmarks11 and CoreMark12. The SPEC
CPU benchmarks in particular have been used in prior CFI literature [2,14].
However, the SPEC suite is not practical to port to MCUs cores. The support
library accompanying the Dhrystone benchmark contains both direct and indi-
rect subroutine calls, and indirect returns. Other types of indirect branches were
not observed in the main program portion of the samples.
All measurements were performed on an ARM Versatile Express Cortex-M
Prototyping System MPS2+ FPGA conﬁgured as a Cortex-M23 processor exe-
cuting at 25 MHz. Table 2 shows the results of the microbenchmarks and Table 3
shows the result for the Dhrystone benchmarks. According to the measurements
the overhead of CaRE ranges between 13%–513%. The results compare favor-
ably to existing software protection based shadow stack schemes with reported
overheads ranging between 101%–4400% [10,20] (see Sect. 7).
5.3 Memory Considerations
While layout preserving instrumentation does not add instructions to the pro-
gram image, the Branch Monitor and the constructed branch and call target
tables and need to be placed in device memory. The Branch Monitor only needs
to include the logic to handle branch variants present for a particular program
image. For our microbenchmark program image the Branch Monitor implemen-
tation adds a ﬁxed 700 bytes (5.1%) to the program image size. The branch table
for the microbenchmarks program binary consists of 75 8-byte records, adding
600 bytes (4.3%) to the program image. Overall the memory consumption of
our microbenchmark program increased by 9.4%. For our Dhrystone program
image the Branch Monitor adds 1143 bytes (5.5%) and the branch and call
target tables 1528 bytes (7.3%) and 376 bytes (1.7%). Overall the memory con-
sumption of the Dhrystone program increased by 14.5%). The numbers for the
Dhrystone program include full instrumentation of the support library.
11 https://www.spec.org/benchmarks.html.
12 http://www.eembc.org/coremark/about.php.
278
T. Nyman et al.
6 Extensions
Function-Reuse Attacks. The call target validation as presented in Sect. 4 does
not fully address the issue of complete function reuse attacks within the main
program code. An attacker might perform a pointer substitution where a pointer
to one subroutine is exchanged for another subroutine. As both constitute valid
call targets, the control-ﬂow transfer would be allowed. Our instrumentation
tools allow a human analyst to reduce the set of subroutines that may be subsi-
tituted for each other by limiting the entries to the call target table known to be
targeted by indirect subroutine calls, e.g. subrutines used as callback functions.
However, as the call target may be computed by the program only at runtime, it
is impractical to programatically fully explore all possible execution paths of a
program during static analysis and pre-compute a complete CFG. This remains
an open problem for any CFI scheme.
Threading. In our current implementation, the normal state software is limited
to using the Main stack. In order to enable CFI for the rudimentary threading
supported by Cortex-M processors, the Branch Monitor must be extended to
maintain a separate shadow stack for return addresses on the Process call stack.
The changes to the Branch Monitor are straightforward as it can consult the
spsel register to determine which shadow stack to update.
On-device instrumentation. The layout-preserving instrumentation approach
described in Sect. 4.3 has properties that make it suitable for performing binary
rewriting on-device. Firstly, since it does not aﬀect addresses resolved at link-
time, it can be completed in a single pass over the binary image. Secondly,
the logic consists of a simple search and replace of branch instruction patterns
and branch table construction. While our current implementation relies on an
separate tool for rewriting, it is straighforward to implement the needed instru-
mentation as part of the installation process on-device.
Binary patching. Another approach to performing the instrumentation required
for CFI is Binary patching [5]. In binary patching, instrumented instructions
are replaced with dispatch instructions to trampolines that are placed in unused
memory. Compared to binary rewriting [27], binary patching does not require
adjusting of all pc-relative oﬀsets and thus has less impact to the program mem-
ory layout. However, as explained in Sect. 2, Thumb-2 code has properties that
makes binary patching more challenging compared to the instrumentation app-
roach described in Sect. 4.3; dispatch instructions used for ARM binary patching
are typically 32-bit Thumb-2 pc-relative branches in order to encode a suﬃcient
oﬀset to reach the trampolines. If the instrumented instruction is 16 bits in
size, the 32-bit dispatch instruction cannot be inserted without aﬀecting the
memory layout of the binary. Instead of adjusting all subsequent instructions,
both the 16-bit target instruction, and another (16-bit or 32-bit) instruction is
moved to the trampoline to make room for the dispatch instruction. If the moved
instruction contains a pc-relative operation, it needs to be adjusted accordingly
CFI CaRE: Hardware-Supported Call and Return Enforcement
279
since the new location of the instruction will correspond to a diﬀerent pc value.
Even for a small instruction sets such as Thumb, the required logic to perform
such adjustments is not in general practical to be implemented as part of the
software update mechanism on a resource constrained device. Additionally, as
trampolines may contain instructions moved from the instrumentation point,
each instrumentation point requires a corresponding trampoline. However, for