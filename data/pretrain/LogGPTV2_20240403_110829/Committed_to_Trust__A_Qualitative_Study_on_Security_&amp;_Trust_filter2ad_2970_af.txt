decisions based on direct community input and feedback and
utilizing package registries and other distribution infrastruc-
tures depending on the needs of their users. Our participants
appear to fully utilize modern build systems, including during
testing and deployment, with criteria for dependencies ranging
from readily available metrics to elaborate reviews.
RQ2: “If and what guidance and policies are provided by
open source projects?” Our participants appear to diverge in
their opinions regarding the helpfulness of (written) guidance,
with some preferring more hands-on approaches to knowledge
transfer. For security policies, rather large projects described
dedicated security teams, while smaller projects just offered a
security contact point. Most projects mentioned some type of
disclosure policy or contact for security issues.
RQ3: “How do open source projects approach security and
trust challenges?” Most of our participants reported having
experienced neither a security nor trust incident in the past, al-
though many of our participants were familiar with suspicious
or low quality commits as well as potential vulnerabilities
introduced by dependencies. Most of our participants use
some form of meritocracy for establishing trust with new
contributors, with some even assuming trustworthiness by
default to facilitate first-time contributions. Participants with
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:27 UTC from IEEE Xplore.  Restrictions apply. 
1891
larger, older projects more frequently reported incidents and
approaches for incident handling.
Below, we discuss some of our additional findings in greater
detail. Open source projects are part of a larger connected
ecosystem of components, libraries, and software registries. A
single compromised dependency can introduce vulnerabilities
into thousands of projects further down the chain, a fact that
our participants were keenly aware of:
“What we don’t have is the money to fix all the depen-
dencies, like all the ones that depend on the project
because every backward incompatible change that
we will do in the project to address the security
concern would have repercussions in the ecosystem
that goes beyond our own project.” — P22.
In general, project development as described by our partic-
ipants appears to be highly community-driven and practical:
important decisions such as release windows, announcements,
and distribution infrastructure are all based on the input,
feedback, and needs of contributors and users. Most projects
appear to handle security and trust incidents “as they happen”.
This seems to be a pragmatic strategy, as it seems unlikely that
a project could cover all possible incident types beforehand,
especially with the limited personpower of smaller communi-
ties.
As mentioned by our participants, the combination of deep
dependency chains and automatic testing can lead to many
false positive security warnings. These false positives can lead
to a habituation effect, as summarized by a participant:
“So one false positive is worse than missing a real
vulnerability, in my opinion, because if you miss a
real vulnerability, everyone’s like, oh, we better care
more about security. If there’s a false positive, then
everyone says, oh, security warnings are bullshit. It
is much harder to unwind the security-warnings-are-
bullshit attitude than it is to make people care about
security.” — P06
Fittingly, we can let one of our participant’s words help
with summarizing our general findings: “Ultimately, I believe
that people are the key. Automation is something that can help
people. But in the end, the people are like the ultimate barrier
between the harm and the intent.” (P10).
VI. CONCLUSION
In 27 in-depth, semi-structured interviews with owners,
maintainers, and contributors from a diverse set of open source
projects, we investigate their security measures and trust
processes. We explore projects’ behind-the-scene processes,
provided guidance & policies, as well as past challenges and
incident handling. We find that our participants’ projects are
highly diverse both in deployed security measures and trust
processes as well as their underlying motivations.
As projects grow in scope and contributors, so grow their
needs for security and trust processes. We argue for supporting
projects in ways that their growth supports. A small three
person project will never live up to security and trust measures
provided by a 1,000+ maintainer project with corporate back-
ing, yet it should not be left out of any support. Interesting
aspects for future consideration include the type and appli-
cability of support for small projects, as well as identifying
measures with the best trade-off in working hours and security
improvement.
Especially smaller projects handle security and trust inci-
dents “as they happen”. Elaborate incident playbooks and com-
mitter structures are likely of little use to these projects due
to frequently changing committers and structures. We surmise
that especially these smaller projects could be better supported
with public, general example playbooks and resources for
incidents that they then can utilize when the need arises.
As researchers, we advocate against treating open source
developers solely as data sources and review process black-
boxes, and instead to consider them as valuable partners in
bringing security and trust to OSS and software ecosystems
as a whole. Overall, we argue for supporting open source
projects in ways that better consider their individual strengths
and limitations, especially in the case of smaller projects with
low contributor numbers and limited access to resources.
ACKNOWLEDGEMENTS
With this, we want to acknowledge our interviewees for
their participation: It was a great experience to interview
you for this study. We appreciate your knowledge, project
information, and most importantly your valuable time that you
have generously given. We hope that with this work and your
contribution, both the research and open source community
are one step closer to more secure and trustworthy software.
Last but not least, we thank the anonymous reviewers for their
valuable feedback.
REFERENCES
[1] GitHub, The State of the Octoverse, https://octoverse.github.com/,
Accessed: 2021-10-15, 2020.
[5]
[2] Microsoft, GitHub, https://github.com, Accessed: 2021-09-29, 2008.
[3] GitLab Inc., GitLab, https://gitlab.com, Accessed: 2021-09-29, 2014.
[4] Cybersecurity and I. S. A. (CISA), Malware discovered in popular
npm package, ua-parser-js, https://us- cert.cisa.gov/ncas/current-
activity/2021/10/22/malware-discovered-popular-npm-package-ua-
parser-js, Accessed: 2021-10-24, 2021.
L. Abrams, Popular npm library hijacked to install password-
stealers, miners, https://www.bleepingcomputer.com/news/security/
popular-npm-library-hijacked-to-install-password-stealers-miners/,
Accessed: 2021-10-24, 2021.
[6] M. Hanley, Github’s commitment to npm ecosystem security, https:
//github.blog/2021-11-15-githubs-commitment-to-npm-ecosystem-
security/#security- issues- related- to- the- npm- registry, Accessed:
2021-11-17, Nov. 2021.
[8]
[7] A. Sharma, Npm fixes private package names leak, serious autho-
rization bug, https://www.bleepingcomputer.com/news/security/
npm-fixes-private-package-names-leak-serious-authorization-bug/,
Accessed: 2021-11-16, Nov. 2021.
The Linux Foundation, “Open source software supply chain secu-
rity,” Tech. Rep., Feb. 2020, Accessed: 2021-11-16.
[9] RedHat, The State of Enterprise Open Source 2020: Enterprise open
source use rises, proprietary software declines, https://www.redhat.
com/en/blog/state- enterprise- open- source- 2020- enterprise- open-
source-use-rises-proprietary-software-declines, Accessed: 2021-06-
23, Feb. 2020.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:27 UTC from IEEE Xplore.  Restrictions apply. 
1892
[10]
Linux Foundation’s Technical Advisory Board, Report on University
of Minnesota breach-of-trust incident, https : / / lwn . net / ml / linux -
kernel/202105051005.49BFABCE@keescook/, Accessed: 2021-11-
27, May 2021.
[11] K. Thompson, “Reflections on trusting trust,” Commun. ACM,
vol. 27, no. 8, pp. 761–763, Aug. 1984.
[12] A. Pietri, D. Spinellis, and S. Zacchiroli, “The software heritage
graph dataset: Public software development under one roof,” in Pro-
ceedings of the 16th International Conference on Mining Software
Repositories, ser. MSR ’19, Montreal, Quebec, Canada: IEEE Press,
2019, pp. 138–142.
[13] ——, “The software heritage graph dataset: Large-scale analysis
of public software development history,” in Proceedings of
the
17th International Conference on Mining Software Repositories,
ser. MSR ’20, Seoul, Republic of Korea: Association for Computing
Machinery, 2020, pp. 1–5.
[14] A. Alali, H. Kagdi, and J. I. Maletic, “What’s a typical commit? a
characterization of open source software repositories,” in 2008 16th
IEEE International Conference on Program Comprehension, 2008,
pp. 182–191.
[15] G. Robles, L. Arjona Reina, A. Serebrenik, B. Vasilescu, and
J. M. González-Barahona, “Floss 2013: A survey dataset about
free software contributors: Challenges for curating, sharing, and
combining,” in Proceedings of the 11th Working Conference on
Mining Software Repositories, ser. MSR 2014, New York, NY, USA:
Association for Computing Machinery, 2014, pp. 396–399.
[16] A. Gkortzis, D. Mitropoulos, and D. Spinellis, “Vulinoss: A dataset
of security vulnerabilities in open-source systems,” in Proceedings of
the 15th International Conference on Mining Software Repositories,
ser. MSR ’18, Gothenburg, Sweden: Association for Computing
Machinery, 2018, pp. 18–21.
[17] M. Shahzad, M. Z. Shafiq, and A. X. Liu, “A large scale exploratory
analysis of software vulnerability life cycles,” in Proceedings of the
34th International Conference on Software Engineering, ser. ICSE
’12, Zurich, Switzerland: IEEE Press, 2012, pp. 771–781.
[18] G. Gousios and D. Spinellis, “Ghtorrent: Github’s data from a
firehose,” in Proceedings of the 9th IEEE Working Conference on
Mining Software Repositories, ser. MSR ’12, Zurich, Switzerland:
IEEE Press, 2012, pp. 12–21.
[19] G. Gousios, B. Vasilescu, A. Serebrenik, and A. Zaidman, “Lean
ghtorrent: Github data on demand,” in Proceedings of the 11th
Working Conference on Mining Software Repositories, ser. MSR
2014, Hyderabad, India: Association for Computing Machinery,
2014, pp. 384–387.
[20] Q. Tu et al., “Evolution in open source software: A case study,”
in Proceedings 2000 International Conference on Software Mainte-
nance, IEEE, 2000, pp. 131–142.
[21] A. Mockus, R. T. Fielding, and J. D. Herbsleb, “Two case studies
of open source software development: Apache and mozilla,” ACM
Transactions on Software Engineering and Methodology (TOSEM),
vol. 11, no. 3, pp. 309–346, 2002.
T. T. Dinh-Trong and J. M. Bieman, “The freebsd project: A repli-
cation case study of open source development,” IEEE Transactions
on Software Engineering, vol. 31, no. 6, pp. 481–494, 2005.
[23] N. Edwards and L. Chen, “An historical examination of open source
releases and their vulnerabilities,” in Proceedings of the 2012 ACM
Conference on Computer and Communications Security, ser. CCS
’12, Raleigh, North Carolina, USA: Association for Computing
Machinery, 2012, pp. 183–194.
[24] A. D. Householder, J. Chrabaszcz, T. Novelly, D. Warren, and
J. M. Spring, “Historical analysis of exploit availability timelines,”
in 13th USENIX Workshop on Cyber Security Experimentation and
Test (CSET 20), 2020.
[25] A. Bosu, J. C. Carver, M. Hafiz, P. Hilley, and D. Janni, “When are
oss developers more likely to introduce vulnerable code changes?
a case study,” in Open Source Software: Mobile Open Source
Technologies, L. Corral, A. Sillitti, G. Succi, J. Vlasenko, and A. I.
Wasserman, Eds., Berlin, Heidelberg: Springer Berlin Heidelberg,
2014, pp. 234–236.
P. Anbalagan and M. Vouk, “Towards a unifying approach in
understanding security problems,” in 20th International Symposium
on Software Reliability Engineering, 2009, pp. 136–145.
[22]
[26]
[27]
[28]
L. Tan, C. Liu, Z. Li, X. Wang, Y. Zhou, and C. Zhai, “Bug charac-
teristics in open source software,” Empirical software engineering,
vol. 19, no. 6, pp. 1665–1705, 2014.
J. Walden, “The impact of a major security event on an open
source project: The case of openssl,” in Proceedings of the 17th
International Conference on Mining Software Repositories, 2020,
pp. 409–419.
[36]
[35]
[34]
[33]
[31]
[29] K. Altinkemer, J. Rees, and S. Sridhar, “Vulnerabilities and patches
of open source software: An empirical study,” Journal of Informa-
tion System Security, vol. 4, no. 2, pp. 3–25, 2008.
[30] M. Alenezi and Y. Javed, “Open source web application security:
A static analysis approach,” in 2016 International Conference on
Engineering & MIS (ICEMIS), 2016, pp. 1–5.
F. Zampetti, S. Scalabrino, R. Oliveto, G. Canfora, and M. Di Penta,
“How open source projects use static code analysis tools in contin-
uous integration pipelines,” in Proceedings of the 14th International
Conference on Mining Software Repositories, ser. MSR ’17, Buenos
Aires, Argentina: IEEE Press, 2017, pp. 334–344.
[32] M. Zahedi, M. Ali Babar, and C. Treude, “An empirical study
of security issues posted in open source projects,” in Proceedings
of the 51st Hawaii International Conference on System Sciences
(HICSS18), 2018, pp. 5504–5513.
P. Deligiannis, A. F. Donaldson, and Z. Rakamaric, “Fast and precise
symbolic analysis of concurrency bugs in device drivers,” in 2015
30th IEEE/ACM International Conference on Automated Software
Engineering (ASE), IEEE, 2015, pp. 166–177.
J.-J. Bai, J. Lawall, Q.-L. Chen, and S.-M. Hu, “Effective static
analysis of concurrency use-after-free bugs in linux device drivers,”
in 2019 USENIX Annual Technical Conference (USENIX ATC 19),
2019, pp. 255–268.
J. ´Sliwerski, T. Zimmermann, and A. Zeller, “When do changes
induce fixes?” SIGSOFT Softw. Eng. Notes, vol. 30, no. 4, pp. 1–5,
May 2005.
F. Li and V. Paxson, “A large-scale empirical study of security
patches,” in Proceedings of the 2017 ACM SIGSAC Conference on
Computer and Communications Security, 2017, pp. 2201–2215.
[37] R. Ramsauer, L. Bulwahn, D. Lohmann, and W. Mauerer, “The
sound of silence: Mining security vulnerabilities from secret integra-
tion channels in open-source projects,” in Proceedings of the 2020
ACM SIGSAC Conference on Cloud Computing Security Workshop,
ser. CCSW’20, Virtual Event, USA: Association for Computing
Machinery, 2020.
[38] V. Piantadosi, S. Scalabrino, and R. Oliveto, “Fixing of security
vulnerabilities in open source projects: A case study of apache http
server and apache tomcat,” in 2019 12th IEEE Conference on Soft-
ware Testing, Validation and Verification (ICST), 2019, pp. 68–78.
L. Dabbish, C. Stuart, J. Tsay, and J. Herbsleb, “Social coding in
github: Transparency and collaboration in an open software repos-
itory,” in Proceedings of the ACM 2012 Conference on Computer
Supported Cooperative Work, ser. CSCW ’12, Seattle, Washington,
USA: Association for Computing Machinery, 2012, pp. 1277–1286.
[40] B. Vasilescu, K. Blincoe, Q. Xuan, et al., “The sky is not the
limit: Multitasking across github projects,” in Proceedings of the
38th International Conference on Software Engineering, ser. ICSE
’16, Austin, Texas: Association for Computing Machinery, 2016,
pp. 994–1005.
[41] K. Constantino, M. Souza, S. Zhou, E. Figueiredo, and C. Kästner,
“Perceptions of open-source software developers on collaborations:
An interview and survey study,” Journal of Software: Evolution and
Process, e2393, 2021.
L. Moldon, M. Strohmaier, and J. Wachs, “How gamification affects
software developers: Cautionary evidence from a natural experiment
on github,” in 2021 IEEE/ACM 43rd International Conference on
Software Engineering (ICSE), 2021, pp. 549–561.
[43] C. Overney, J. Meinicke, C. Kästner, and B. Vasilescu, “How to
not get rich: An empirical study of donations in open source,” in
Proceedings of the ACM/IEEE 42nd International Conference on
Software Engineering, 2020, pp. 1209–1221.
[44] G. Gousios, M. Pinzger, and A. v. Deursen, “An exploratory study of
the pull-based software development model,” in Proceedings of the
36th International Conference on Software Engineering, ser. ICSE
2014, Hyderabad, India: Association for Computing Machinery,
2014, pp. 345–355.
[39]
[42]
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:27 UTC from IEEE Xplore.  Restrictions apply. 
1893
[45]
J. Tsay, L. Dabbish, and J. Herbsleb, “Influence of social and
technical factors for evaluating contribution in github,” in Proceed-
ings of the 36th International Conference on Software Engineering,
ser. ICSE 2014, Hyderabad, India: Association for Computing
Machinery, 2014, pp. 356–366.
[49]
[46] D. Ford, M. Behroozi, A. Serebrenik, and C. Parnin, “Beyond
the code itself: How programmers really look at pull requests,”
in Proceedings of the 41st International Conference on Software
Engineering: Software Engineering in Society, ser. ICSE-SEIS ’19,
Montreal, Quebec, Canada: IEEE Press, 2019, pp. 51–60.
[47] W. Li, N. Meng, L. Li, and H. Cai, “Understanding language
selection in multi-language software projects on github,” in 2021
IEEE/ACM 43rd International Conference on Software Engineering:
Companion Proceedings (ICSE-Companion), 2021, pp. 256–257.
[48] H. Hata, R. G. Kula, T. Ishio, and C. Treude, “Research artifact:
The potential of meta-maintenance on github,” in 2021 IEEE/ACM