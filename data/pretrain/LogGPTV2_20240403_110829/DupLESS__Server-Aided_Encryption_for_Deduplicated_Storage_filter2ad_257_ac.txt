184  22nd USENIX Security Symposium 
USENIX Association
6
sion handshake. It follows that no client can make more
than 2q queries within a tE -unit time period.
Setting q gives rise to a balancing act between online
brute-force attack speed and sufﬁciently low-latency KS
requests, since a legitimate client that exceeds its budget
will have to wait until the epoch ends to submit further
requests. However, when using these OPRF protocols
within DupLESS, we also have the choice of exploiting
the trade-off between dedupability and online brute-force
speed. This is because we can build clients to simply
continue with randomized encryption when they exceed
their budgets, thereby alleviating KS availability issues
for a conservative choice of q.
In any case, the bound q and epoch duration should
be set so as to not affect normal KS usage. Enterprise
network storage workloads often exhibit temporal self-
similarity [44], meaning that they are periodic. In this
case, a natural choice for the epoch duration is one pe-
riod. The bound q can be set to the expected number of
client requests plus some buffer (e.g., one or more stan-
dard deviations). Administrators will need to tune this
for their deployment; DupLESS helps ease this burden
by its tolerance of changes to q as discussed above.
We also considered two other mechanisms for rate
limiting. The ﬁxed delay mechanism works by intro-
ducing an artiﬁcial delay tD before the KS responds to
a client’s query. This delay can either be a system-wide
constant, or be set per client. Although this method is
the simplest to implement, to get good brute-force secu-
rity, the delay introduced would have to be substantially
high and directly impacts latency. The exponential delay
mechanism starts with a small delay, and doubles this
quantity after every query. The doubling stops at an up-
per limit tU . The server maintains synchronized epochs,
as in the bounded approach, and checks the status of ac-
tive clients after each epoch. If a client makes no queries
during an entire epoch, its delay is reset to the initial
value. In both these approaches, the server maintains an
active client list, which consists of all clients with queries
awaiting responses. New queries from clients in the ac-
tive client list are dropped. Client timeout in ﬁxed delay
is max(tD,tR) and in exponential delay it is max(tU ,tR).
To get a sense of how such rate-limiting mechanisms
might work in real settings, we estimate the effects on
brute-force attacks by deriving parameters from the char-
acteristics of a workload consisting of about 2,700 com-
puters running on an enterprise network at NetApp, as
reported in [57]. The workload is periodic, with simi-
lar patterns every week. The clients together make 1.65
million write queries/week, but the distribution is highly
skewed, and a single client could potentially be responsi-
ble for up to half of these writes. Let us be conservative
and say that our goal is to ensure that clients making at
most 825, 000 queries/week should be unaffected by rate-
Mechanism Rate formula NetApp Scenario
Bounded
Fixed delay
Exp. delay
None
Ofﬂine
2q/tE
1/tD
2tE /tU
3,200
2.73
1.36
2.73
3,200
120–12000
120–12000
Figure 2: Comparing brute-force rates in queries per second
for different rate limiting approaches, no rate limiting (None),
and hashes as computed using SHA-256 (Ofﬂine). The ﬁrst
column is the formula used to derive the rate as a function of
the request limit q, epoch duration tE , delay tD, and upper limit
tU . The second column is the rates as for the NetApp workload.
The None row does not include ofﬂine computation cost.
limiting. We set the epoch duration tE as one week and
query bound as q = 825k. The ﬁxed delay would need
to be set to 730 milliseconds (in order to facilitate 825k
requests in one week), which is also the upper limit tU
for the exponential technique.
The maximum query rates in queries per second that
an attacker who compromised a client can achieve are
given in Figure 2, along with the formulas used to calcu-
late them. The “None” row, corresponding to no rate lim-
iting, gives as the rate the highest number of replies per
second seen for OPRFv2 in the throughput experiment
above. The ofﬂine brute force rate was measured by run-
ning Intel’s optimized version of SHA256 [49] to get pro-
cessing speed as 120 MBps on our client system, whose
7200-RPM hard disk has peak read speed of 121MBps
(as measured by hdparm). The range then varies from
the number of hashes per second for 1 MB ﬁles up to the
number of hashes per second for 1 KB ﬁles, assuming
just a single system is used.
Despite being generous to ofﬂine brute-force attacks
(by just requiring computation of a hash, not considering
parallelization, and not including in the online attacks
any ofﬂine computational costs), the exercise shows the
huge beneﬁt of forcing brute-force attackers to query the
KS. For example, the bounded rate limiting mechanism
slows down brute-force attacks by anywhere from 43x
for large ﬁles up to 4,395x for small ﬁles. If the attacker
wants to identify a 1KB ﬁle which was picked at random
from a set S of 225 ﬁles, then the ofﬂine brute-force attack
requires less than an hour, while the bounded rate limited
attack requires more than twenty weeks.
We note that bounded rate-limiting is effective only
if the ﬁle has enough unpredictability to begin with. If
|S| < q = 825k, then the online brute-force attack will
be slowed down only by the network latency, meaning
that it will proceed at one-fourth the ofﬂine attack rate.
Moreover, parallelization will speed up both online and
ofﬂine attacks, assuming that this is permitted by the KS.
USENIX Association  
22nd USENIX Security Symposium  185
7
Operation
Latency (ms)
OPRFv1 KSReq (Low KS load)
OPRFv2 KSInit
OPRFv2 KSReq (Low KS load)
OPRFv2 KSReq (Heavy KS load)
Ping (1 RTT)
374 ± 34
278 ± 56
83 ± 16
118 ± 37
78 ± 01
Figure 3: The median time plus/minus one standard deviation
to perform KSInit and KSReq operations over 1000 trials. Low
KS load means the KS was otherwise idle, whereas Heavy KS
load means it was handling 3000 queries per second.
Performance. For the OPRF, as mentioned in Section 4,
we implement RSA1024 with full-domain-hash using
SHA256 in the standard way [22]. The PKI setup
uses RSA2048 certiﬁcates and we ﬁx the ECDHE-RSA-
AES128-SHA ciphersuite for the handshake. We set up
the two KS implementations (OPRFv1 and OPRFv2) on
Amazon EC2 m1.large instances. The client machine,
housed on a university LAN, had an x86-64 Intel Core
i7-970 processor with a clockspeed ﬁxed at 3201 MHz.
Figure 3 depicts the median times, in milliseconds, of
various operations for the two protocols. OPRFv2 signif-
icantly outperforms OPRFv1, due to the reduced number
of round trip times. On a lightly loaded server, a KS re-
quest requires almost the smallest possible time (the RTT
to the KS). The time under a heavy KS load was mea-
sured while a separate m1.large EC2 instance sent 3000
requests per second. The KS request time for OPRFv2
increases, but is still three times faster than OPRFv1
for a low KS load. Note that the time reported here is
only over successful operations; ones that timed out three
times were excluded from the median.
To understand the drop rates for the OPRFv2 protocol
on a heavily loaded server and, ultimately, the through-
put achievable with our (unoptimized) implementation,
we performed the following experiment. A client sent
100i UDP request packets per second (qps) until a total
of 10,000 packets are sent, once for each of 1 ≤ i ≤ 64.
The number of requests responded to was then recorded.
The min/max/mean/standard deviation over 100 trials are
shown in Figure 4. At rates up to around 3,000 queries
per second, almost no packets are dropped. We expect
that with further (standard) performance optimizations
this can be improved even further, allowing a single KS
to support a large volume of requests with very occa-
sional single packet drops.
Security of the KS protocols. Adversarial clients can
attempt to snoop on, as well as tamper with, commu-
nications between (uncompromised) clients and the KS.
With rate-limiting in play, adversaries can also attempt
to launch denial-of-service (DOS) attacks on uncompro-
d
e
i
l
p
e
r
s
e
i
r
e
u
q
f
o
e
g
a
t
n
e
c
r
e
P
100
80
60
40
20
Max
Min
Mean
29
210
211
212
213
214
215
Queries per second
Figure 4: Packet loss in OPRFv2 as a function of query rate.
Packet loss is negligible at rates < 3k queries per second.
mised clients, by spooﬁng packets from such clients. Fi-
nally, adversaries might try to circumvent rate-limiting.
A secure protocol must defend against all these threats.
Privacy of OPRF inputs and outputs follows from
blinding in the OPRF protocol. Clients can check
OPRF output correctness and hence detect tampering. In
OPRFv1, every KSReq interaction starts with a mutual-
authentication TLS handshake, which prevents adver-
saries from spooﬁng requests from other clients.
In
OPRFv2, creating a new session once again involves a
mutual-authentication TLS handshake, meaning that an
adversary cannot initiate a session pretending to be a un-
compromised client. Moreover, an adversary cannot cre-
ate a fresh KSReq packet belonging to a session which
it did not initiate, without a successful MAC forgery
(HMAC with SHA256 speciﬁcally). Packets cannot be
replayed across sessions, due to session identiﬁers being
picked at random and being included in the MAC, and
packets cannot be replayed within a session, due to in-
creasing sequence numbers. Overall, both protocols of-
fer protecting against request spooﬁng, and neither of the
two protocols introduce new denial-of-service vulnera-
bilities.
In the Bounded rate-limiting approach,
the server
keeps track of the total number of the queries made by
each client, across all sessions in an epoch, and stops
responding after the bound q is reached, meaning that
even adversarial clients are restricted to q queries per
epoch.
In the ﬁxed-delay and exponential-delay ap-
proaches, only one query from a client is handled at a
time by the KS in a session through the active clients list.
If a client makes a second query — even from a different
session, while a query is in process, the second query is
not processed by the KS, but simply dropped.
186  22nd USENIX Security Symposium 
USENIX Association
8
Command
Description
SSput(P, F, M)
Stores ﬁle contents M as P/F
SSget(P, F )
SSlist(P)
SSdelete(P, F )
SSsearch(P, F )
SScreate(P)
Gets ﬁle P/F
Gets metadata of P
Delete ﬁle F in P
Search for ﬁle F in P
Create directory P
SSmove(P1, F1, P2, F2) Move P1/F1 to P2/F2
Figure 5: API commands exposed by the storage service (SS)
used by DupLESS. Here F represents a ﬁlename and P is the
absolute path in a directory hierarchy.
6 The DupLESS client
The Dupless client works with an SS which implements
the interface described in Figure 5 (based on the Drop-
box API [39]), and provides an analogous set of com-
mands DLput, DLget, DLlist, etc. Figure 6 gives pseu-
docode for the DupLESS commands for storing and re-
trieving a ﬁle. We now explain the elements of these
commands, and will then discuss how other API com-
mands are handled.
Path and ﬁlename encryption. The SS provides a rudi-
mentary ﬁle system abstraction. Clients can generate
directories, use relative and absolute paths, move ﬁles
from one directory to another, etc. Following our design
goal of supporting as much of the base SS functional-
ity as possible, DupLESS should also support paths, ﬁle-
names, and related functionalities such as copying ﬁles.
One option is to treat paths and ﬁlenames as non-private,
and simply mirror in clear the directory hierarchy and
ﬁlenames asked for by a user. This has the beneﬁt of
simplicity and no path-related overheads, but it relies on
users guaranteeing that paths and ﬁlenames are, in fact,
not conﬁdential. A second option would be to hide the
directory structure from the SS by using just a single di-
rectory, and storing the client’s directory hierarchy and
ﬁlenames in completely encrypted form using some kind
of digest ﬁle. But this would increase complexity and
decrease performance as one would (essentially) have
to build a ﬁle system on top of the SS. For example,
this would bar use of the SS API to perform ﬁlename
searches on behalf of DupLESS.
We design DupLESS to provide some security for di-
rectory and ﬁlenames while still enabling effective use
of the SS APIs. To encrypt ﬁle and directory names,
we use the SIV DAE scheme [68] SIV = (ED, DD) with
HMAC[SHA256] and CTR[AES]. The EncPath subrou-
tine takes as input a DAE key Kdae, a path P (a sequence
of directory names separated by ‘/’), and a ﬁlename F,
and returns an encrypted path Cpath and an encrypted
ﬁlename F. It does so by encrypting each directory D
in P by way of ED(Kdae, 0, D) and likewise encrypting
F by ED(Kdae, 0, F ). (The associated data being set to
0 here will be used to distinguish this use from that of
the key encapsulation, see below.) Being deterministic,
twice encrypting the same ﬁle or directory name results