most effective phrasing for a postmortem is to say, “Mistakes are inevitable in any
system with multiple subtle interactions. You were on-call, and I trust you to make
the right decisions with the right information. I’d like you to write down what you
were thinking at each point in time, so that we can find out where the system misled
you, and where the cognitive demands were too high.”
Sort Fires According to Type
There are two types of fires in this simplified-for-convenience model:
• Some fires shouldn’t exist. They cause what is commonly called ops work or toil
(see Chapter 5).
• Other fires that cause stress and/or furious typing are actually part of the job. In
either case, the team needs to build tools to control the burn.
420 | Chapter 30: Embedding an SRE to Recover from Operational Overload
Sort the team fires into toil and not-toil. When you’re finished, present the list to the
team and clearly explain why each fire is either work that should be automated or
acceptable overhead for running the service.
Phase 3: Driving Change
Team health is a process. As such, it’s not something that you can solve with heroic
effort. To ensure that the team can self-regulate, you can help them build a good
mental model for an ideal SRE engagement.
Humans are pretty good at homeostasis, so focus on creating (or
restoring) the right initial conditions and teaching the small set of
principles needed to make healthy choices.
Start with the Basics
Teams struggling with the distinction between the SRE and traditional ops model are
generally unable to articulate why certain aspects of the team’s code, processes, or cul‐
ture bother them. Rather than trying to address each of these issues point-by-point,
work forward from the principles outlined in Chapters 1 and 6.
Your first goal for the team should be writing a service level objective (SLO), if one
doesn’t already exist. The SLO is important because it provides a quantitative measure
of the impact of outages, in addition to how important a process change could be. An
SLO is probably the single most important lever for moving a team from reactive ops
work to a healthy, long-term SRE focus. If this agreement is missing, no other advice
in this chapter will be helpful. If you find yourself on a team without SLOs, first read
Chapter 4, then get the tech leads and management in a room and start arbitrating.
Get Help Clearing Kindling
You may have a strong urge to simply fix the issues you identify. Please resist the urge
to fix these issues yourself, because doing so bolsters the idea that “making changes is
for other people.” Instead, take the following steps:
1. Find useful work that can be accomplished by one team member.
2. Clearly explain how this work addresses an issue from the postmortem in a per‐
manent way. Even otherwise healthy teams can produce shortsighted action
items.
3. Serve as the reviewer for the code changes and document revisions.
4. Repeat for two or three issues.
Phase 3: Driving Change | 421
When you identify an additional issue, put it in a bug report or a doc for the team to
consult. Doing so serves the dual purposes of distributing information and encourag‐
ing team members to write docs (which are often the first victim of deadline pres‐
sure). Always explain your reasoning, and emphasize that good documentation
ensures that the team doesn’t repeat old mistakes in a slightly new context.
Explain Your Reasoning
As the team recovers its momentum and grasps the basics of your suggested changes,
move on to tackle the quotidian decisions that originally led to ops overload. Prepare
for this undertaking to be challenged. If you’re lucky, the challenge will be along the
lines of, “Explain why. Right now. In the middle of the weekly production meeting.”
If you’re unlucky, no one demands an explanation. Sidestep this problem entirely by
simply explaining all of your decisions, whether or not someone requests an explana‐
tion. Refer to the basics that underscore your suggestions. Doing so helps build the
team’s mental model. After you leave, the team should be able to predict what your
comment on a design or changelist would be. If you don’t explain your reasoning, or do
so poorly, there is a risk that the team will simply emulate that lackadaisical behavior,
so be explicit.
Examples of a thorough explanation of your decision:
• “I’m not pushing back on the latest release because the tests are bad. I’m pushing
back because the error budget we set for releases is exhausted.”
• “Releases need to be rollback-safe because our SLO is tight. Meeting that SLO
requires that the mean time to recovery is small, so in-depth diagnosis before a
rollback is not realistic.”
Examples of an insufficient explanation of your decision:
• “I don’t think having every server generate its routing config is safe, because we
can’t see it.”
This decision is probably correct, but the reasoning is poor (or poorly explained).
The team can’t read your mind, so they very likely might emulate the observed poor
reasoning. Instead, try “[…] isn’t safe because a bug in that code can cause a correla‐
ted failure across the service and the additional code is a source of bugs that might
slow down a rollback.”
• “The automation should give up if it encounters a conflicting deployment.”
Like the previous example, this explanation is probably correct, but insufficient.
Instead, try “[…] because we’re making the simplifying assumption that all changes
422 | Chapter 30: Embedding an SRE to Recover from Operational Overload
pass through the automation, and something has clearly violated that rule. If this hap‐
pens often, we should identify and remove sources of unorganized change.”
Ask Leading Questions
Leading questions are not loaded questions. When talking with the SRE team, try to
ask questions in a way that encourages people to think about the basic principles. It’s
particularly valuable for you to model this behavior because, by definition, a team in
ops mode rejects this sort of reasoning from its own constituents. Once you’ve spent
some time explaining your reasoning for various policy questions, this practice rein‐
forces the team’s understanding of SRE philosophy.
Examples of leading questions:
• “I see that the TaskFailures alert fires frequently, but the on-call engineers usually
don’t do anything to respond to the alert. How does this impact the SLO?”
• “This turnup procedure looks pretty complicated. Do you know why there are so
many config files to update when creating a new instance of the service?”
Counterexamples of leading questions:
• “What’s up with all of these old, stalled releases?”
• “Why does the Frobnitzer do so many things?”
Conclusion
Following the tenets outlined in this chapter provides an SRE team with the
following:
• A technical, possibly quantitative, perspective on why they should change.
• A strong example of what change looks like.
• A logical explanation for much of the “folk wisdom” used by SRE.
• The core principles needed to address novel situations in a scalable manner.
Your final task is to write an after-action report. This report should reiterate your per‐
spective, examples, and explanation. It should also provide some action items for the
team to ensure they exercise what you’ve taught them. You can organize the report as
a postvitam,1 explaining the critical decisions at each step that led to success.
1 In contrast to a postmortem.
Conclusion | 423
The bulk of the engagement is now complete. Once your embedded assignment con‐
cludes, you should remain available for design and code reviews. Keep an eye on the
team for the next few months to confirm that they’re slowly improving their capacity
planning, emergency response, and rollout processes.
424 | Chapter 30: Embedding an SRE to Recover from Operational Overload
CHAPTER 31
Communication and Collaboration in SRE
Written by Niall Murphy with Alex Rodriguez, Carl Crous, Dario
Freni, Dylan Curley, Lorenzo Blanco, and Todd Underwood
Edited by Betsy Beyer
The organizational position of SRE in Google is interesting, and has effects on how
we communicate and collaborate.
To begin with, there is a tremendous diversity in what SRE does, and how we do it.
We have infrastructural teams, service teams, and horizontal product teams. We have
relationships with product development teams ranging from teams that are many
times our size, to teams roughly the same size as their counterparts, and situations in
which we are the product development team. SRE teams are made up of people with
systems engineering or architectural skills (see [Hix15b]), software engineering skills,
project management skills, leadership instincts, backgrounds in all kinds of industries
(see Chapter 33), and so on. We don’t have just one model, and we have found a vari‐
ety of configurations that work; this flexibility suits our ultimately pragmatic nature.
It’s also true that SRE is not a command-and-control organization. Generally, we owe
allegiance to at least two masters: for service or infrastructure SRE teams, we work
closely with the corresponding product development teams that work on those serv‐
ices or that infrastructure; we also obviously work in the context of SRE generally.
The service relationship is very strong, since we are held accountable for the perfor‐
mance of those systems, but despite that relationship, our actual reporting lines are
through SRE as a whole. Today, we spend more time supporting our individual serv‐
ices than on cross-production work, but our culture and our shared values produce
strongly homogeneous approaches to problems. This is by design.1
1 And, as we all know, culture beats strategy every time: [Mer11].
425
The two preceding facts have steered the SRE organization in certain directions when
it comes to two crucial dimensions of how our teams operate—communications and
collaboration. Data flow would be an apt computing metaphor for our communica‐
tions: just like data must flow around production, data also has to flow around an
SRE team—data about projects, the state of the services, production, and the state of
the individuals. For maximum effectiveness of a team, the data has to flow in reliable
ways from one interested party to another. One way to think of this flow is to think of
the interface that an SRE team must present to other teams, such as an API. Just like
an API, a good design is crucial for effective operation, and if the API is wrong, it can
be painful to correct later on.
The API-as-contract metaphor is also relevant for collaboration, both among SRE
teams, and between SRE and product development teams—all have to make progress
in an environment of unrelenting change. To that extent, our collaboration looks
quite like collaboration in any other fast-moving company. The difference is the mix
of software engineering skills, systems engineering expertise, and the wisdom of pro‐
duction experience that SRE brings to bear on that collaboration. The best designs
and the best implementations result from the joint concerns of production and the
product being met in an atmosphere of mutual respect. This is the promise of SRE: an
organization charged with reliability, with the same skills as the product development
teams, will improve things measurably. Our experience suggests that simply having
someone in charge of reliability, without also having the complete skill set, is not
enough.
Communications: Production Meetings
Although literature about running effective meetings abounds [Kra08], it’s difficult to
find someone who’s lucky enough to only have useful, effective meetings. This is
equally true for SRE.
However, there’s one kind of meeting that we have that is more useful than the aver‐
age, called a production meeting. Production meetings are a special kind of meeting
where an SRE team carefully articulates to itself—and to its invitees—the state of the
service(s) in their charge, so as to increase general awareness among everyone who
cares, and to improve the operation of the service(s). In general, these meetings are
service-oriented; they are not directly about the status updates of individuals. The goal
is for everyone to leave the meeting with an idea of what’s going on—the same idea.
The other major goal of production meetings is to improve our services by bringing
the wisdom of production to bear on our services. That means we talk in detail about
the operational performance of the service, and relate that operational performance
to design, configuration, or implementation, and make recommendations for how to
fix the problems. Connecting the performance of the service with design decisions in
a regular meeting is an immensely powerful feedback loop.
426 | Chapter 31: Communication and Collaboration in SRE
Our production meetings usually happen weekly; given SRE’s antipathy to pointless
meetings, this frequency seems to be just about right: time to allow enough relevant
material to accumulate to make the meeting worthwhile, while not so frequent that
people find excuses to not attend. They usually last somewhere between 30 and 60
minutes. Any less and you’re probably cutting something unnecessarily short, or you
should probably be growing your service portfolio. Any more and you’re probably
getting mired in the detail, or you’ve got too much to talk about and you should shard
the team or service set.
Just like any other meeting, the production meeting should have a chair. Many SRE
teams rotate the chair through various team members, which has the advantage of
making everyone feel they have a stake in the service and some notional ownership of
the issues. It’s true that not everyone has equal levels of chairing skill, but the value of
group ownership is so large that the trade-off of temporary suboptimality is worth‐
while. Furthermore, this is a chance to instill chairing skills, which are very useful in
the kind of incident coordination situations commonly faced by SRE.
In cases where two SRE teams are meeting by video, and one of the teams is much
larger than the other, we have noticed an interesting dynamic at play. We recommend
placing your chair on the smaller side of the call by default. The larger side naturally
tends to quiet down and some of the bad effects of imbalanced team sizes (made
worse by the delays inherent in video conferencing) will improve.2 We have no idea if
this technique has any scientific basis, but it does tend to work.
Agenda
There are many ways to run a production meeting, attesting to the diversity of what
SRE looks after and how we do it. To that extent, it’s not appropriate to be prescrip‐
tive on how to run one of these meetings. However, a default agenda (see Appendix F
for an example) might look something like the following:
Upcoming production changes
Change-tracking meetings are well known throughout the industry, and indeed
whole meetings have often been devoted to stopping change. However, in our
production environment, we usually default to enabling change, which requires
tracking the useful set of properties of that change: start time, duration, expected
effect, and so on. This is near-term horizon visibility.
2 The larger team generally tends to unintentionally talk over the smaller team, it’s more difficult to control
distracting side conversations, etc.
Communications: Production Meetings | 427
Metrics
One of the major ways we conduct a service-oriented discussion is by talking
about the core metrics of the systems in question; see Chapter 4. Even if the sys‐
tems didn’t dramatically fail that week, it’s very common to be in a position
where you’re looking at gradually (or sharply!) increasing load throughout the
year. Keeping track of how your latency figures, CPU utilization figures, etc.,
change over time is incredibly valuable for developing a feeling for the perfor‐
mance envelope of a system.
Some teams track resource usage and efficiency, which is also a useful indicator
of slower, perhaps more insidious system changes.
Outages
This item addresses problems of approximately postmortem size, and is an indis‐
pensable opportunity for learning. A good postmortem analysis, as discussed in
Chapter 15, should always set the juices flowing.
Paging events
These are pages from your monitoring system, relating to problems that can be
postmortem worthy, but often aren’t. In any event, while the Outages portion
looks at the larger picture of an outage, this section looks at the tactical view: the
list of pages, who was paged, what happened then, and so on. There are two
implicit questions for this section: should that alert have paged in the way it did,
and should it have paged at all? If the answer to the last question is no, remove
those unactionable pages.
Nonpaging events
This bucket contains three items:
• An issue that probably should have paged, but didn’t. In these cases, you
should probably fix the monitoring so that such events do trigger a page.
Often you encounter the issue while you’re trying to fix something else, or it’s
related to a metric you’re tracking but for which you haven’t got an alert.
• An issue that is not pageable but requires attention, such as low-impact data
corruption or slowness in some non-user-facing dimension of the system.
Tracking reactive operational work is also appropriate here.
• An issue that is not pageable and does not require attention. These alerts
should be removed, because they create extra noise that distracts engineers
from issues that do merit attention.
428 | Chapter 31: Communication and Collaboration in SRE
Prior action items
The preceding detailed discussions often lead to actions that SRE needs to take—
fix this, monitor that, develop a subsystem to do the other. Track these improve‐
ments just as they would be tracked in any other meeting: assign action items to
people and track their progress. It’s a good idea to have an explicit agenda item
that acts as a catchall, if nothing else. Consistent delivery is also a wonderful
credibility and trust builder. It doesn’t matter how such delivery is done, just that
it is done.
Attendance
Attendance is compulsory for all the members of the SRE team in question. This is
particularly true if your team is spread across multiple countries and/or time zones,
because this is your major opportunity to interact as a group.
The major stakeholders should also attend this meeting. Any partner product devel‐
opment teams you may have should also attend. Some SRE teams shard their meeting
so SRE-only matters are kept to the first half; that practice is fine, as long as everyone,
as stated previously, leaves with the same idea of what’s going on. From time to time
representatives from other SRE teams might turn up, particularly if there’s some
larger cross-team issue to discuss, but in general, the SRE team in question plus
major other teams should attend. If your relationship is such that you cannot invite
your product development partners, you need to fix that relationship: perhaps the