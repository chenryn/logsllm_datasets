til the next contact for an edge. Thus, the contacts summary
oracle can only respond with time-invariant or summary char-
acteristics about contacts.
Contacts Oracle This oracle can answer any question regard-
ing contacts between two nodes at any point in time. This is
equivalent to knowing the time-varying DTN multi-graph. The
contacts summary oracle can be constructed using the contacts
oracle, but not vice versa.
Queuing Oracle This oracle gives information about instan-
taneous bu(cid:11)er occupancies (queuing) at any node at any time,
and can be used to route around congested nodes. Unlike the
other oracles, the queuing oracle is a(cid:11)ected by both new mes-
sages arriving in the system and the choices made by the routing
algorithm itself. We expect it to be the most di(cid:14)cult oracle to
realize in a distributed system.
Tra(cid:14)c Demand Oracle This oracle can answer any question
regarding the present or future tra(cid:14)c demand.
It is able to
provide the set of messages injected into the system at any
time.
5.2 Routing Algorithm Classes
We now present di(cid:11)erent routing algorithms (Table 1 gives
an overview). They fall into the following three classes, based
upon the amount of knowledge they need to compute routes.
Zero knowledge These algorithms do not utilize any oracles.
Not surprisingly, they perform poorly. They de(cid:12)ne the minimal
extreme of the knowledge-performance relationship in Figure 3.
Complete knowledge This class consists of algorithms that
utilize all the oracles (contacts, queuing and tra(cid:14)c demand).
The Linear Programming formulation of the DTN routing prob-
lem falls into this category and is discussed in Section 8. While
these assumptions are far too strong to operate in a widely dis-
tributed, dynamic routing environment envisioned by DTNs,
we believe this to be the (cid:12)rst full formulation of the problem
and is, therefore, an important step to establish a deeper un-
derstanding and baseline for performance comparisons.
Partial knowledge These algorithms route in the absence of
the tra(cid:14)c demand oracle and use one or more of the other ora-
cles (congestion, queuing). Messages are routed independently
of the future tra(cid:14)c demand. This is a more practical assump-
tion from an implementation perspective. Therefore, we devote
most of our attention to algorithms in this class.
6. ROUTING WITH ZERO KNOWLEDGE
Algorithms in this class route with almost no assistance from
any knowledge oracle. We explore one very simple such algo-
rithm that in e(cid:11)ect routes randomly using any available con-
tact. Its main purpose is to provide one extreme point in the
knowledge-performance relationship space of Figure 3.
Algorithm: First Contact (FC)
Oracles: None
A message is forwarded along an edge chosen randomly among
all the current contacts. If all edges are currently unavailable,
the message waits for an edge to become available and is as-
signed to the (cid:12)rst available contact.
Properties FC performs poorly in nontrivial topologies be-
cause the chosen next-hop is essentially random and forwarding
along the selected edge may not make any progress toward the
destination. A message may also oscillate forever among a set
of nodes (especially when frequent contacts are present among
a small set of nodes) or be delivered to a dead end. It has no
provision to route around congestion. Clearly, FC requires only
local knowledge about the network and is trivial to implement.
Improvements The basic approach can be enhanced in many
ways. One is to incorporate a sense of trajectory between the
source and the destination so that the message is routed in a
direction closer to the destination [17]. To prevent loops, a path
vector type of approach can be used.
7. ROUTING WITH PARTIAL KNOWLEDGE
The algorithms in this category compute paths using one or
more of the following oracles: contacts summary, contacts, and
queuing. Further, each message is routed independently of the
future demand because the tra(cid:14)c oracle is not used. These al-
gorithms are all based upon assigning costs to edges and com-
puting a form of minimum-cost (\shortest") path. Costs are
assigned to edges (by consulting the available oracles) to re(cid:13)ect
the estimated delay of the message in taking that edge. The
challenge and sophistication lies in assigning costs such that
the assigned costs are close to the delay that will actually be
encountered when a message is forwarded across the DTN.
The reasons for considering only cost-based algorithms in this
class are two-fold. First, they provide a convenient and common
way to utilize the di(cid:11)erent knowledge oracles (thereby, identi-
fying to what extent global knowledge is necessary). Second,
they correspond naturally to traditional shortest-path based
routing problems which are well-understood and for which sim-
ple computationally-e(cid:14)cient distributed algorithms are known.
This simplicity, however, comes at the price of imposing certain
restrictions on the nature of routing paths determined. One key
limitation is that only a single path to a destination is derived.
As argued earlier, for DTNs it may be important to use multi-
ple paths (with splitting) to achieve near-optimal performance.
Interestingly, the basic ideas introduced here can be used to (cid:12)nd
multiple routes and good split sizes. This is discussed brie(cid:13)y
at the end of this section.
7.1 Computing Shortest (minimum cost) Paths
To model the forwarding delay of a message in a DTN, we
consider three delay components: 1) queuing time: time until a
contact becomes available, 2) transmission delay: time to inject
a message completely into an edge, and 3) propagation delay.
Queuing time includes both the time waiting for an edge to
become available (waiting time) plus the time to drain messages
already scheduled for departure on that edge. Queuing time can
be large because edges may be unavailable for long periods of
time. Given that edge capacities and propagation delays vary
with time, we also expect route selection to vary with time.
When edge costs are time-invariant, shortest paths can be
computed using Dijkstra’s shortest path algorithm. However,
if the costs are changing with time the straightforward approach
does not work. We must make two modi(cid:12)cations to overcome
this problem. First, the time a message will arrive at a par-
ticular node must be predicted. Second, the predicted arrival
time must be used to determine the cost of taking subsequent
edges. This would, in turn, a(cid:11)ect the time the message arrives
at neighboring nodes. Interestingly, Dijkstra’s algorithm can be
adapted to compute the shortest paths for this case. Pseudo-
code for the modi(cid:12)ed algorithm is given in Algorithm 7.1.
The key di(cid:11)erence between this algorithm and the traditional
Dijkstra’s algorithm is the de(cid:12)nition and the use of the w (cost)
function. It takes into account the time a message arrives at a
node. This time is then used to compute the cost of travers-
ing edges emanating from that node (lines 7 and 8 of Algo-
rithm 7.1).
The modi(cid:12)ed Dijkstra’s algorithm requires the cost function
for all edges to have the FIFO property. This property ensures
that a message can not arrive earlier at the destination of an
edge by simply waiting longer at the source of the edge (i.e. you
will not travel more quickly over an edge if you wait to use it).
Formally, it means that for all edges e and all pairs of time t1; t2
with t1  (L[u] + w(e; L[u] + T )) then
L[v]   L[u] + w(e; L[u] + T )
Let u 2 Q be the node s.t L[u] = minx2Q L[x]
Input: G = (V; E), s, T , w(e; t)
Output: L
1: Q   fV g
2: L[s]   0 , L[v]   1 8 v 2 V s:t v 6= s.
3: while Q 6= fg do
4:
5: Q = Q   fug
6:
7:
8:
end if
9:
10:
end for
11: end while
Algorithm 1: Dijkstra’s Algorithm modi(cid:12)ed to use time-
varying edge costs. s is the source node. T is the start time.
L : V ! R is the array returning the cost of the shortest path for
all nodes. The cost function w : E (cid:2) R+ ! R+, gives the cost
as a function of edge and time. The interpretation of w(e; t) is the
following: Let e be an edge from node u to node v. Given a message
at u at time t, w(e; t) is the cost (delay) of sending it to v. Therefore,
if e is taken the message will reach v at time t+w(e; t). The algorithm
also works if the network topology is a multigraph. The unmodi(cid:12)ed
Dijkstra’s algorithm (for time invariant costs) is the same except that
the cost function w(e; L[u] + T ) is replaced by w(e) in lines 7 and 8.
di(cid:11)erent cost assignments, we make sure the above condition
holds. In practice it does because, in a single physical link, any
message would not be able overtake other messages sent earlier.
The above property does not prevent a message from waiting
at a node in order to reduce the overall delay. For example,
consider a case in which two nodes have two edges between
them with di(cid:11)erent propagation delays. The algorithm may
prefer to wait for the lower propagation delay link over the
other even if it is currently unavailable.
7.2 Algorithms with Time-Invariant Costs
Algorithm: Minimum Expected Delay (MED)
Oracles: Contacts Summary
The cost of an edge is the sum of the average waiting time,
propagation delay and transmission delay. The route of a mes-
sage is independent of time so a proactive routing approach
can be used. MED uses the same path for all messages with
the same source-destination pair. No mechanism is employed
to route around congestion or avoid message drops if storage
space is unavailable.
Properties The key property of MED is that it minimizes the
average waiting time. It fails to exploit superior edges which
become available after the route has been computed. For exam-
ple, a direct contact to the message destination arises when the
message is waiting for the pre-computed next-hop to become
available. In this case, the new contact would not be used.
Improvements Finding multiple disjoint paths with similar
costs and randomly selecting among them could improve load
balancing and reduce congestion [16]. The precomputed route
could be modi(cid:12)ed in-transit if a superior contact becomes avail-
able. This would, in e(cid:11)ect, make it a form of loose source rout-
ing, with a somewhat reactive behavior.
7.3 Algorithms with Time-Varying Costs
The w function varies with both edge and time. In addition,
it depends on the size of the message under consideration (be-
cause of transmission delay). It may also depend on the node
assigning costs because costs may depend on its local queue
occupancy. Therefore, for sake of uniformity, we represent the
cost function w(e; t) in the following form:
w(e; t) = w0(e; t; m; s)
Here, e is the edge, t is the time for which we are comput-
ing the cost, m is the size of the message under consideration
and s is the node assigning the costs (and invoking Dijkstra’s
algorithm). The w0 function is now de(cid:12)ned as:
w0(e; t; m; s) = t0(e; t; m; s) (cid:0) t + d(e; t0)
where,
t0(e; t; m; s) = minft00j 
t00
x=t
c(e; x) dx (cid:21) (m + Q(e; t; s))g
The functions c(e; t) and d(e; t) are the capacity and the prop-
agation delay functions for the DTN topology (given by the
contacts oracle). The function Q(e; t; s) is the queue size at the
source of edge e at time t as predicted by the node s. The pa-
rameter s in Q(e; t; s) is used to distinguish between local and
global queuing. We now explain how w0 models the delay that
will be seen by the message when sent over the edge e starting
at time t.
t0 is the earliest time the queued data at edge e and the mes-
sage under consideration can be unloaded into the network for
transmission (assuming FIFO queuing). The integral captures
the volume of data that could be moved through the edge dur-
ing the time interval [t; t00]. The d(e; t0) function captures the
propagation delay seen by the message. Therefore, the w0 func-
tion represents the total time to transfer a message of size m
over edge e (starting at time t).
The cost assignments used in the algorithms we present next
di(cid:11)er primarily in the de(cid:12)nition of the Q function. The (cid:12)rst
algorithm uses only the contacts oracle and lacks information
about either local or global queuing (it thus assigns a value of
zero to Q). The second algorithm assigns a non zero value to
Q(e; t; s) whenever e is a local edge with respect to s and a zero
value otherwise. Finally, the third algorithm uses the queuing
oracle to determine Q(e; t; s) everywhere, thereby incorporating
global knowledge about the status of queues.
Algorithm: Earliest Delivery (ED)
Oracles: Contacts
This algorithm does not incorporate any queuing information
and assigns a value of zero to the Q function:
Q(e; t; s) = 0
Computed routes are loop free, because the paths computed
by the Dijkstra’s shortest path algorithm are loop free. The
route is determined once at the source and (cid:12)xed, making ED a
form of source routing. Paths are computed without considering
the availability of storage at intermediate nodes on the path
and this may lead to drops when bu(cid:11)ers over(cid:13)ow. The route
computation is not a(cid:11)ected by existing messages in the system,
limiting ED’s ability to route around congestion.
Properties ED is optimal in the following two cases:
if the
nodes on the selected path have no queued messages, or if con-
tact capacities are su(cid:14)ciently large. In the (cid:12)rst case, ED is op-
timal because it has assigned the correct value (zero) to the Q
function everywhere. In the second case, it is also optimal (even
if queuing is not zero) because once an edge is available and its
capacity is large, the time to transmit all the queued data (in-
cluding the message itself) is negligible. Thus, the queue size
does not a(cid:11)ect the delay in these cases, and ED’s selection of a
zero value for Q is appropriate.
Paths computed by ED do not take into account queuing
delays.
If an edge is purported to be available at a certain
time, the algorithm assumes that it can, in fact, be used to
send the message. However, if many other messages are ahead
in the queue, the contact may (cid:12)nish before the message is sent.
This is now disastrous because the time the message reaches
the next-hop is very di(cid:11)erent from what was predicted when the
route was computed. Therefore, continuing the route computed
earlier may be far from optimal. We explore this point in detail
in our evaluation in Section 9.4.
Algorithm: Earliest Delivery with Local Queuing (EDLQ)
Oracles: Contacts
In this algorithm, local queue occupancy is taken into ac-
count in estimating the edge delays. The Q function is:
Q(e; t; s) =
data queued for e at time t
0
if e = (s; (cid:3))
otherwise
The Q function accounts for queuing at all edges outgoing
from the current node (denoted by (cid:3) above) and helps to route
around congestion at the (cid:12)rst hop.
It does not account for
queuing that will be encountered when the message reaches
other nodes in the path. However, unlike ED, we recompute
the route at every hop (per-hop routing). This allows the path
traversed to be sensitive to the queuing present at all edges in
the path.
Properties The EDLQ cost assignment function depends on
the node which is computing the route. This may lead to loop
formation and the possibility that messages may oscillate for-
ever. Such oscillations can be avoided by employing path vec-
tors and performing a re-computation with (cid:12)xed routes (e.g.
calculated using ED) when a loop is detected. Like ED, mes-
sages might get dropped because of bu(cid:11)er overrun.
Algorithm: Earliest Delivery with All Queues (EDAQ)
Oracles: Contacts, Queuing
EDAQ uses the queuing oracle to determine the instanta-
neous queue sizes across the entire topology at any point in
time. The Q function is:
Q(e; t; s) = data queued for e at time t at node s
Like ED, messages are source routed. Routes are not recom-
puted at every hop because when routes were selected, the Q
function already took into account queuing at all nodes.
After computing the best route for a message, edge capacity
must be reserved for the message over all edges (at appropri-
ate times) along its path. Such reservations ensure that mes-
sages will have been moved in su(cid:14)cient time to avoid missing
scheduled contacts.
In addition, reservations allow the queu-
ing oracle to make accurate predictions about queuing in the
network. Realizing bandwidth reservations is likely to be a sig-
ni(cid:12)cant challenge for a DTN, where communicate with some
nodes may be signi(cid:12)cantly delayed. For systems where central-
ization is practical (e.g. a separate low-delay control network
exists), bandwidth allocation would be greatly simpli(cid:12)ed.
Properties EDAQ determines an optimal route for a new
message given existing reservations for the previous messages.
This follows because it correctly accounts for the queuing de-
lay, provided by the queuing oracle. Bandwidth reservations are
required to accurately implement the queuing oracle. Finally,
like previous algorithms, EDAQ is also oblivious to available
bu(cid:11)er capacity.
Incorporating storage constraints within the
framework of computing shortest paths by assigning costs is
much harder and open for future investigation. One approach
is to use a di(cid:11)erent algorithmic methodology such as a linear
programming formulation, as discussed in the next section. Dy-
namic (cid:13)ow control may also be e(cid:11)ective.
7.4 Other Algorithmic Variations