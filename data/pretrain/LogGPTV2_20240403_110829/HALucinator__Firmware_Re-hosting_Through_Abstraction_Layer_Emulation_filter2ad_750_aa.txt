title:HALucinator: Firmware Re-hosting Through Abstraction Layer Emulation
author:Abraham A. Clements and
Eric Gustafson and
Tobias Scharnowski and
Paul Grosen and
David Fritz and
Christopher Kruegel and
Giovanni Vigna and
Saurabh Bagchi and
Mathias Payer
HALucinator: Firmware Re-hosting Through 
Abstraction Layer Emulation
Abraham A Clements, Sandia National Laboratories; Eric Gustafson, 
UC Santa Barbara and Sandia National Laboratories; Tobias Scharnowski, 
Ruhr-Universität Bochum; Paul Grosen, UC Santa Barbara; David Fritz, 
Sandia National Laboratories; Christopher Kruegel and Giovanni Vigna, 
UC Santa Barbara; Saurabh Bagchi, Purdue University; Mathias Payer, EPFL
https://www.usenix.org/conference/usenixsecurity20/presentation/clements
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.HALucinator: Firmware Re-hosting
Through Abstraction Layer Emulation
Abraham A. Clements*,1, Eric Gustafson*,1,2,
Tobias Scharnowski3, Paul Grosen2, David Fritz1, Christopher Kruegel2,
Giovanni Vigna2, Saurabh Bagchi4, and Mathias Payer5
1Sandia National Laboratories, 2UC Santa Barbara, 3Ruhr-Universität Bochum,
4Purdue University, 5École Polytechnique Fédérale de Lausanne
{aacleme, djfritz}@sandia.gov, PI:EMAIL,
{edg, pcgrosen, chris, vigna}@cs.ucsb.edu,
PI:EMAIL, PI:EMAIL
Abstract
Given the increasing ubiquity of online embedded devices,
analyzing their ﬁrmware is important to security, privacy, and
safety. The tight coupling between hardware and ﬁrmware
and the diversity found in embedded systems makes it hard to
perform dynamic analysis on ﬁrmware. However, ﬁrmware
developers regularly develop code using abstractions, such as
Hardware Abstraction Layers (HALs), to simplify their job.
We leverage such abstractions as the basis for the re-hosting
and analysis of ﬁrmware. By providing high-level replace-
ments for HAL functions (a process termed High-Level Emu-
lation – HLE), we decouple the hardware from the ﬁrmware.
This approach works by ﬁrst locating the library functions in a
ﬁrmware sample, through binary analysis, and then providing
generic implementations of these functions in a full-system
emulator.
We present these ideas in a prototype system, HALucinator,
able to re-host ﬁrmware, and allow the virtual device to be
used normally. First, we introduce extensions to existing
library matching techniques that are needed to identify library
functions in binary ﬁrmware, to reduce collisions, and for
inferring additional function names. Next, we demonstrate
the re-hosting process, through the use of simpliﬁed handlers
and peripheral models, which make the process fast, ﬂexible,
and portable between ﬁrmware samples and chip vendors.
Finally, we demonstrate the practicality of HLE for security
analysis, by supplementing HALucinator with the American
Fuzzy Lop fuzzer, to locate multiple previously-unknown
vulnerabilities in ﬁrmware middleware libraries.
1 Introduction
Embedded systems are pervasive in modern life: vehicles,
communication systems, home automation systems, and
even pet toys are all controlled through embedded CPUs.
Increasingly, these devices are connected to the Internet for
extra functionality. This connectivity introduces new security,
* These authors contributed equally to this work.
privacy, and reliability concerns. Unfortunately, auditing the
ﬁrmware of these systems is a cumbersome, time-consuming,
per-device effort.
Today, developers create and test ﬁrmware almost entirely
on physical testbeds, typically consisting of development
versions of the target devices. However, modern software-
engineering practices that beneﬁt from scale, such as
test-driven development, continuous integration, or fuzzing,
are challenging or impractical due to this hardware depen-
dency. In addition, embedded hardware provides limited
introspection capabilities, including extremely limited num-
bers of breakpoints and watchpoints, signiﬁcantly restricting
the ability to perform dynamic analysis on ﬁrmware. The
situation for third-party auditors and analysts is even more
complex. Manufacturing best-practices dictate stripping out
or disabling debugging ports (e.g., JTAG) [26, 40], meaning
that many off-the-shelf devices remain entirely opaque.
Even if the ﬁrmware can be obtained through other means,
dynamic analysis remains challenging due to the complex
environmental dependencies of the code.
Emulation, also known as ﬁrmware re-hosting, provides
a means of addressing many of these challenges, by offering
the ability to execute ﬁrmware at scale through the use of
commodity computers, and providing more insight into the
execution than is possible on a physical device [44]. Yet,
heterogeneity in embedded hardware poses a signiﬁcant
barrier to the useful emulation of ﬁrmware. The rise of
intellectual-property-based, highly-integrated chip designs
(e.g., ARM based Systems on Chip – SoC) has resulted in
an explosion of available embedded CPUs, whose various on-
chip peripherals and memory layouts must be supported in a
specialized manner by emulators. However, the popular open-
source QEMU emulator supports fewer than 30 ARM devices.
Intel’s SIMICS [38, 57] supports many CPUs and peripherals,
but requires the analyst to manually construct a full model of
the system at the hardware level. Worse yet, most embedded
systems have other components on their circuit boards that
must exist for the ﬁrmware to operate, such as sensors, storage
devices, or networking components. Emulation support for
USENIX Association
29th USENIX Security Symposium    1201
ARTIFACTEVALUATEDPASSEDthese peripherals is virtually nonexistent. Therefore, it is
nearly impossible to take an embedded ﬁrmware sample and
emulate it without signiﬁcant engineering effort.
Current solutions allowing for the emulation of diverse
hardware rely on a real specimen of the device, where the
emulator forwards interactions with unsupported peripherals
to the hardware [36, 43, 58]. Such a “hardware-in-the-loop”
approach limits the ability to scale testing to the availability
of the original hardware, and offers restricted instrumentation
and analysis possibilities compared to what is possible in
software. Other techniques [22, 32, 54] focus on recording
and subsequently replaying or modeling data from hardware,
which allows these executions to be scaled and shared, but
necessarily requires trace recording from within the device
itself, limiting faithful execution in the emulator to just the
recorded paths in the program.
The immense diversity of hardware also affects ﬁrmware
developers. To mitigate some of the challenges of developing
ﬁrmware, chip vendors and various third parties provide
Hardware Abstraction Layers (HALs). HALs are software
libraries that provide high-level hardware operations to the
programmer, while hiding details of the particular chip or
system on which the ﬁrmware executes. This makes porting
code between the many similar models from a given vendor,
or even between chip vendors, much simpler. Firmware
written with HALs are therefore, by design, less tightly
coupled to the hardware.
This observation inspired us to design and implement a
novel technique to enable scalable emulation of embedded
systems through the use of high-level abstraction layers and
reusable replacement functionality, known as High-Level
Emulation (HLE). Our approach works by ﬁrst identifying
the HAL functions responsible for hardware interactions in
a ﬁrmware image. Then, it provides simple, analyst-created,
high-level replacements, which perform the same conceptual
task from the ﬁrmware’s perspective (e.g., sending an Ethernet
packet and acknowledging the action to the ﬁrmware).
The ﬁrst crucial step to enabling high-level emulation
is the precise identiﬁcation of HAL functions within the
ﬁrmware image. While a developer can re-host their own
code by skipping this step, as they have debugging symbols,
third-party analysts must untangle library and application
code from the stripped binary ﬁrmware image. We observe
that, to ease development, most HALs are open-source, and
are packaged with a particular compiler toolchain in mind.
We leverage the availability of source code for HALs to
drastically simplify this task.
After HAL function identiﬁcation, we next substitute our
high-level replacements for the HAL functions. While each re-
placement function (which we term a handler) is created man-
ually, this minimal effort scales across chips from the same
vendor, and even across ﬁrmware using the same middleware
libraries. For example, ARM’s open-source mBed OS [39]
contains support for over 140 boards and their associated hard-
Figure 1: Overview of HALucinator, with our contribution
shown in gray.
ware from 16 different manufacturers. By identifying and
intercepting the mBed functions in the emulator, we replace
the low-level input/output (I/O) interactions—that a generic
emulator such as QEMU does not support—with high level
implementations that provide external interaction, and enable
emulation of ﬁrmware that uses mBed OS. As an additional
effort-saving step, these handlers can make use of peripheral
models, which serve as the abstraction for generic classes of
hardware peripherals (e.g., serial ports, or bus controllers) and
serve as the point of interaction between the emulated environ-
ment and the host environment, without needing complicated
logic of their own. This allows the creation of handlers to also
extend across these classes of peripherals, as handlers for any
HAL can use the same peripheral models as-is.
Handlers may perform a task as complicated as sending
an Ethernet frame through a Direct Memory Access (DMA)
peripheral, but their implementation remains straightforward.
Most handlers that interact with the outside world merely
need to translate the arguments of the HAL function (for
example, the Ethernet device to use, a pointer to the data to
send, and its length), into the data a peripheral model can
use to actually perform a task (e.g., the raw data to be sent).
In many cases, the handler does not need to perform any
action at all, as some hardware concepts do not even exist
in emulation, such as power and clocking.
We assemble these ideas into a prototype system, HALu-
cinator, as shown in Figure 1, which provides a high-level
emulation environment on top of the QEMU emulator. HALu-
cinator supports “blob” ﬁrmware, (i.e., a ﬁrmware sample in
which all code is statically linked into one binary executable)
from multiple chip vendors for the ARM Cortex-M architec-
ture. It handles complex peripherals, such as Ethernet, WiFi,
and an IEEE 802.15.4 radio (the physical and media access
control layers used in ZigBee and 6LoWPAN i.e., IPv6 over
Low Power Wireless Personal Area Networks). The system
1202    29th USENIX Security Symposium
USENIX Association
FirmwareFWFunc. addrs.to interceptLibrary SourceLibMatchISA Emulator(e.g QEMU)UartModelUARTHandlerOtherHandlerIO Serverenables emulator host interactionsHalucinatorEthernetModelOther Periph.Models...EthernetHandler...is capable of emulating the ﬁrmware and its interactions with
the outside world. We present case studies focused on hybrid
emulated environments, wireless networks, and app-enabled
devices. HALucinator emulates these systems sufﬁciently to
allow interactive emulation, such that the device can be used
for its original intended purpose without its hardware. We
additionally show the applicability of HALucinator to secu-
rity analyses by pairing it with the popular AFL fuzzer, and
demonstrate its use in the discovery of security vulnerabilities,
without any use of the original hardware. Additionally, the
Shellphish CTF team used HALucinator to win the 2019
CSAW Embedded Security Challenge, by leveraging its
unique re-hosting, debugging, and fuzzing capabilities [5, 11].
In summary, our contributions are as follows:
1. We enable emulation of binary ﬁrmware using a generic
system emulator (QEMU for us) without relying on the
presence of the actual hardware. We achieve this through
the novel use of abstraction libraries called HALs, which
are already provided by vendors for embedded platforms.
2. We improve upon existing library matching techniques,
to better locate functions for interception in the ﬁrmware.
3. We present HALucinator, a high-level emulation system
capable of interactive emulation and fuzzing ﬁrmware
through the use of a library of abstract handlers and
peripheral models.
4. We show the practicality of our approach through case
studies modeled on 16 real-world ﬁrmware samples, and
demonstrate that HALucinator successfully emulates
complex functionality with minimal effort. Through
fuzzing the ﬁrmware, we ﬁnd use-after-free, memory dis-
closure, and exploitable buffer overﬂow bugs resulting in
CVE-2019-9183 and CVE-2019-8359 in Contiki OS [25].
2 Motivation
Virtually every complex electronic device has a CPU exe-
cuting ﬁrmware. The increasing complexity of these CPUs
and the introduction of ubiquitous connectivity has increased
the complexity of ﬁrmware. To reduce the burden of creating
these devices’ ﬁrmware, various libraries (i.e., HALs) have
been created to abstract away direct hardware interactions.
To make their product portfolios more attractive to develop-
ers, microcontroller manufactures are developing HALs and
licensing them under permissive terms (e.g., BSD) to gain
a market advantage [16, 42, 53]. HALs provide a common ab-
straction for families of microcontrollers, thus a single HAL
covers many different microcontrollers. For example, STMi-
croelectronic’s STM32Cube HAL covers all their Cortex-M
based microcontrollers. As evidence of the investment put
into HALs, consider that NXP acquired Freescale in 2015
and currently provides the MCUExpresso HAL—a uniﬁed
HAL that covers their Cortex-M microcontrollers. Many of
these microcontrollers were originally designed by separate
companies. It is unlikely NXP would have invested into
Figure 2: (a) Software and hardware stack for an illustrative
HTTP Server. (b) Conceptual illustration of HTTP Server
when executing using HALucinator.
unifying these HALs if availability of easy to use HALs was
not a priority to developers. In addition, the manufacturer’s
HALs are integrated in their own IDEs [2, 4, 10, 41] and
third party development tools (e.g., Keil, IAR). These same
HALs are included in embedded OSes (e.g., in FreeRTOS [1],
mBed OS [8], RIOT OS [17], and Arduino [9]). These OSes
are currently used in commercially available devices [3]. We
believe that market pressures to reduce time to market will in-
crease the adoption of HAL’s. While we cannot automatically
measure the population of devices using HALs today without
a large dataset of microcontroller ﬁrmware (which does un-
fortunately not exist), given all of this information, we expect
HALs to become ubiquitous in ﬁrmware going forward.
Understanding how ﬁrmware is built using these HALs
is foundational to how HALucinator enables emulation of
these ﬁrmware samples. Figure 2a depicts the software and
hardware components used in a representative embedded
system that HALucinator is designed to emulate. When
emulating the system, the on-chip peripherals and off-chip
hardware are not present, yet much of the system functionality
depends on interactions with these components. For example,
in Section 5 we ﬁnd that QEMU halts when accessing
unsupported (and therefore unmapped) peripherals. The
result is all 16 test cases execute less than 39 basic blocks
halting on hardware setup, typically clocks, at power up.
2.1 Emulating Hardware and Peripherals
To achieve our goal of scalably re-hosting embedded
ﬁrmware, we must emulate the environment it runs in. This
environment consists of, ﬁrst and foremost, the main CPU of
the device with its instruction set and basic memory features.
Modern CPUs, even low-power, low-cost microcontrollers,
include a full complement of on-chip peripherals, including
USENIX Association
29th USENIX Security Symposium    1203
HTTP ServerOS Library(e.g., mBed)TCP Stack(e.g., LWIP)ApplicationEthernet HALTemp.SensorLibraryI2CHALMiddlewareEthernet MACI2CBusHALsOn-chipHW Periph.Off-chip HWHTTP ServerOS Library(e.g., mBed)TCP Stack(e.g., LWIP)Temp.SensorLibraryHalucinatorModelsEmulator HostResources(a)(b)timers, bus controllers, networking components, and display
devices. Code executing on the CPU controls these features
via Memory-Mapped I/O (MMIO), where various control and
data registers of peripherals are accessed as normal memory
locations in a pre-determined region. The exact layout and
semantics of each peripheral’s MMIO regions vary, but are
described in the chip’s documentation.
Further complicating re-hosting is the interaction of a
ﬁrmware with off-chip devices (e.g., sensors, actuators,
external storage devices, or communications hardware). As
each product usually contains custom-designed circuit boards,
the complete execution environment of each ﬁrmware sample
is largely unique. Existing emulation tools (e.g., QEMU [18]
and SIMICS [57]) support a relatively limited number of
CPU’s, and even fewer on-chip and off-chip devices. To
use these tools, the on-chip and off-chip devices must be
implemented to conform to the MMIO register interface
used by the ﬁrmware. This requires understanding and
implementing the state machines and logic of each device,
a time consuming and challenging task.
2.2 The Firmware Stack
The software and hardware stack for an illustrative HTTP
server is shown in Figure 2a. Consider an example where the
HTTP server provides the temperature via a webpage. The
application gets the temperature using an API from the library
provided by the temperature sensor’s manufacturer, which
in turn uses the I2C HAL provided by the microcontroller
manufacturer, to communicate with the off-chip temperature
sensor over the I2C bus. When the page containing the
temperature is requested, the HTTP server uses the OS
library’s API to send and receive TCP messages. The OS,
in turn, uses a TCP stack provided via another library, e.g.,
Lightweight IP (lwIP) [37]. lwIP translates the TCP messages
to Ethernet frames and uses the Ethernet HAL to send the
frames using the physical Ethernet port.
While this is an illustrative example, the complexity of
modern devices and pressure to reduce development time is
increasingly making it so that functionality in ﬁrmware is
built on top of a collection of middleware libraries and HALs.
Many of these libraries are available from chip manufacturers
in their software development kits (SDKs) to attract develop-
ers to use their hardware. These SDKs incorporate example
applications and middleware libraries including: OS libraries
(e.g., mBed OS [39], FreeRTOS [30], and Contiki [25]), pro-
tocol stacks (e.g., TCP/IP, 6LoWPAN, and Bluetooth), ﬁle
systems, and HALs for on-chip peripherals. Each of these
libraries abstracts lower-level functionality, decoupling the
application from its physical hardware. In order for HALuci-
nator to break the coupling between ﬁrmware and hardware, it
must intercept one of these layers, middleware/library or HAL,
and interpose its replacement functionality instead, as shown
in Figure 2b. Which layer we choose, however, provides trade-
offs in terms of generality and reusability of the high-level
function replacements, the amount of actual code that we can
execute and test, as well as the likelihood of ﬁnding a given li-
brary in a target device’s ﬁrmware. While it is more likely that
the author of a given ﬁrmware is using the chip vendor’s HAL,
this bottom-most layer has the largest number of functions,
which often have very speciﬁc semantics, and often have com-
plex interactions with hardware features, such as interrupts
and DMA. At a higher level, such as the network stack or
middleware, we may not be able to predict which libraries are
in use, but handlers built around these layers can be simpler,
and more portable between devices. The chosen layer can also
affect the efﬁcacy of some analyses, as we demonstrate in Sec-
tion 5. In short, the right answer depends largely on the ana-
lyst’s goals, and what libraries the ﬁrmware uses. In this work,
we focus primarily on re-hosting at the HAL level, but also ex-
plore high-level emulation approaches targeting other layers,
such as the middleware, in our evaluation of HALucinator.
2.3 High-Level Emulation
Before discussing the design of HALucinator, we ﬁrst
highlight the ways in which high-level emulation enables
scalable emulation of ﬁrmware.
First, our approach reduces the emulation effort—instead
of manual effort that increases with the number of unique
devices, emulation effort increases much more slowly with
the number of HALs or middleware libraries, depending on
the level where we interpose the function calls. Large groups
of devices, from the same manufacturer or device family,
share the same programmer-facing library abstractions. For
example, STMicroelectronics provides a uniﬁed HAL inter-
face for all its Cortex-M devices [53]. Similar higher-level
libraries, such as mBed, provide abstractions for devices from
multiple manufacturers, and commonly used protocol stacks
(e.g., lwIP) abstract details of communication protocols.
Intercepting these libraries enables emulating devices from
many different manufacturers.
Since HALs abstract away hardware from the programmer,
our handlers inherit this simplicity as well. High-level
emulation removes
the requirement of understanding
low-level details of the hardware. Thus, handlers do not need
to implement low-level MMIO manipulations, but simply
need to intercept the corresponding HAL function, pass
desired parameters on to an appropriate peripheral model and
return a value that the ﬁrmware expects.
Finally, our approach allows ﬂexibility in the ﬁdelity of
handlers that we have to develop. For peripherals that the an-
alyst is not concerned with, or which are not necessary in the
emulator, simple low-ﬁdelity handlers that bypass the func-
tion and return a value indicating successful execution can
be used. In cases where external input and output is needed,
higher-ﬁdelity handlers enabling communication with the
host environment are needed. For example, the function
1204    29th USENIX Security Symposium
USENIX Association
HAL_TIM_OscConfig from the STM32Cube HAL conﬁgures
and calibrates various timer and clock parameters; if not han-
dled, the ﬁrmware will enter an inﬁnite loop inside this func-
tion. As the emulator has no concept of a conﬁgurable clock