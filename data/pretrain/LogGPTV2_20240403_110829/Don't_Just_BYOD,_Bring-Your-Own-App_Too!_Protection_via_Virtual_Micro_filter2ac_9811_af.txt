### Optimized Text

#### Complexity and Overhead of Concurrent Threads
The complexity associated with concurrent threads accessing hardware-dependent services, along with the high overhead in the worst-case scenario (where the number of threads equals the product of the number of services and taints), is a significant challenge. In our current implementation, we have modified the system service implementations, such as the Account Service, Clipboard, and Activity Manager, to be taint-aware and maintain separate taints. This design improvement has significantly reduced SWIRLS's performance overhead.

#### Comparison with Histar
Histar employs initially fixed Asbestos labels on kernel objects, including threads, containers, and devices, and uses hierarchical fixed integrity levels for data operations like read and write. In contrast, SWIRLS supports dynamic capsule policy updates and enables the enforcement of more expressive generic policies that are not easily deployable using hierarchical integrity levels. For example, consider the following policy rules for contexts A, B, and C: A can flow to B and C; B can flow to C; C can flow to A but not B. There is no straightforward hierarchical integrity level assignment that would allow this information flow. Additionally, SWIRLS allows simultaneous and policy-compliant multi-taint data access by the same process, leveraging its fine-grained Information Flow Tracking (IFT) support. HiStar does not support multi-taint processes.

#### SE-Android and Knox
SE-Android adapts SELinux mandatory access control (MAC) policies for the Android platform, protecting system components such as system services, Zygote-forked processes, and third-party apps. However, it does not deploy different policies for individual apps. The Android Open Source Project (AOSP) strongly discourages users from modifying any SE-Android policy, leading to an inflexible architecture with generic and coarse-grained policies. Knox deploys stricter fixed SE-Android policy rules for corporate apps to support Bring Your Own Device (BYOD). Similar to SE-Android, Knox requires initial system-wide data labeling. Using Knox for BYOD, employees need to use separate email apps for personal and professional emails. SWIRLS provides a more user-friendly solution through dynamic secure policy definitions and distribution, enabling transparent data access control via a unified user interface for various contexts. Additionally, SE-Android policies are app-based and monitor control flow, whereas SWIRLS focuses on data flow-based policies. Finally, Knox cannot support simultaneous multi-context data access by the same app.

#### Related Work
**Strict App Sandboxing:** Proposed solutions such as FlaskDroid [10] and Saint [27] extend existing permission policies for Android apps. Bluebox [8] provides per-app data encryption and corporate data access tracking. SWIRLS goes further by providing multiple centrally monitored contexts. Unlike Bluebox, SWIRLS does not rely on network tools to detect data leakages, instead tracking data flow and enforcing policies locally within the system.

**IFT-Based Solutions:** Operating system-level frameworks like Asbestos [14], HiStar [38], TaintDroid [15], and Flume [23] employ kernel-enforced mechanisms, Dalvik machine-enabled techniques, or user-space engines for IFT across system objects. CleanOS [34] introduces a security-enhanced garbage collector to protect sensitive data objects using encryption and data eviction. AppFence [21] suggests providing fake information when apps request sensitive user data. DroidScope [37] offers offline VM introspection for IFT on Android emulators. Aquifer [25] and IpShield [11] prevent data leakages using LSM-based and Android sensor-level data protection, respectively.

**Android Permission System Limitations:** The limitations and misuse of the Android permission system are well-documented [13], [30], [18], [17], [16], [21], [12]. SE-Android [32] deploys SELinux at the kernel and middleware levels. Porscha [26] provides policy-based digital rights management without tracking sensitive data flows. Trustdroid [9] offers two-context work/personal domain isolation based on Tomoyo Linux. DeepDroid [36] enforces isolation policies at the system server level. These MAC solutions rely on statically defined policies and do not support on-the-fly policy installation and enforcement. FlaskDroid [10] and ASM [20] provide kernel and user-space hooks for developers, but the scope of policy enforcement is limited by the hooks' points.

#### Discussions
Like most practical IFT technologies today, SWIRLS is unable to handle termination, timing, and implicit flows that can be used to circumvent data isolation. Even coarse-grained isolation techniques like virtualization do not always protect against covert channel attacks by apps. Rather than improving IFT, SWIRLS aims to enable BYOD through a more fine-grained and user-transparent data isolation model, giving data owners (not apps) control over data protection policies. Until IFT advances enable covert channel detection, SWIRLS copes through a judicious choice of goals and threat models. The SWIRLS Trusted Computing Base (TCB) includes the Android system (kernel, Dalvik, system services) and the SWIRLS server (Section IV). This TCB does not prevent a user from rooting the device and replacing the kernel to circumvent SWIRLS, similar to other isolation solutions. To prevent such attacks, hardware support like TPM or TrustZone [1] is needed to ensure the TCB has not been tampered with, as some manufacturers do today, e.g., Samsung Knox on Galaxy S series phones [29].

#### Conclusions
SWIRLS enables BYOD through dynamic virtual micro-security perimeters, i.e., capsules, to protect data and data owners rather than apps and services within a system. SWIRLS tracks each capsule boundary across the system and enforces relevant policies by deploying intra- and inter-process level mandatory access control. Our fully-working SWIRLS prototype (>25K LOC) runs on Android 4.1.1 r6, causes a reasonably low overhead on the system's overall throughput, and facilitates two appealing BYOD use-cases for data interactions between corporations and their employees.

#### Acknowledgments
We appreciate the support of the Department of Homeland Security Science & Technology Directorate (DHS S&T) Cyber Security Division, and our Program Manager Vincent Sritapan for their support under contract No. D15PC00159.

#### References
[1] T. Alves and D. Felton. Trustzone: Integrated hardware and software security. ARM white paper, 3(4):18–24, 2004.
...
[38] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazières. Making information flow explicit in HiStar. In Proceedings of the 7th USENIX Symposium on Operating Systems Design and Implementation, volume 7, pages 19–19, 2006.

---

This optimized version enhances clarity, coherence, and professionalism, making the text more accessible and easier to understand.