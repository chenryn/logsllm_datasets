plexity of concurrent threads accessing hardware-dependent
services and its high overhead in the worst case (#threads
= #services*#taints). In our current implementation, we have
instead modiﬁed the system service implementations, e.g.,
Account Service, Clipboard, and Activity Manager, to be taint-
aware and keep different taints separate. This improved design
reduced SWIRLS’s performance overhead signiﬁcantly.
Histar provides IFT using initially ﬁxed Asbestos labels
on kernel objects, e.g., threads, containers, and devices. Histar
policy uses hierarchical ﬁxed integrity levels associated with
categories, i.e., data operations such as read and write. SWIRLS
allows dynamic capsule policy updates, and enables enforce-
ment of more expressive generic policies that are not simply
deployable using hierarchical integrity levels. For instance,
consider the following policy rules for contexts A, B, and
C: A can ﬂow to B and C; B can ﬂow to C; C can ﬂow
to A but not B. There is no straightforward hierarchical
integrity level assignment that would allow the information
ﬂow above. Additionally, SWIRLS allows simultaneous and
policy-compliant multi-taint data access by the same process
using its ﬁne-grained IFT support. HiStar does not support
multi-taint processes.
SE-Android [31] and Knox [29]. SE-Android adapts SE-
Linux mandatory access control (MAC) policies for Android
platform to protect system components such as system ser-
vices, Zygote-forked processes and third-party apps (it does
not deploy different policies for individual apps). AOSP [4]
strongly encourages the users not to add, delete, or modify
any SE-Android policy. This could result
in an inﬂexible
architecture with too generic and coarse-grained policies that
are not customized for individual apps. Knox [29] deploys
stricter ﬁxed SE-Android policy rules for corporate apps to
support BYOD, and similar to SE-Android, requires initial
system-wide data labeling. Using Knox for BYOD, employees
need to use separate email apps to check their personal and
professional emails. SWIRLS provides more usable solution
through dynamic secure policy deﬁnitions and distribution, and
enables user-transparent data access control through its uniﬁed
user interface for various contexts. Additionally, SE-Android
policies are app-based and monitor control ﬂow (deﬁne what
each app can do/access unlike SWIRLS’s data ﬂow-based
policies). Finally, Knox cannot support simultaneous multi-
context data access by the same app.
VII. RELATED WORK
Strict
app
[27]
has
been
proposed
sandboxing
in
that extend the existing
FlaskDroid [10] and Saint
permission policies by Android apps. Bluebox [8] provides a
per-app data encryption mechanism, and corporate data access
tracking. SWIRLS goes one step further and provides multiple
contexts
that are centrally monitored. Unlike Bluebox,
SWIRLS does not rely on any network tool to detect data
leakages, and tracks the data ﬂow and enforces the policies
within the system locally.
IFT-based solutions such as operating system-level frame-
works, e.g., Asbestos [14], HiStar [38], TaintDroid4 [15],
Flume [23], employ kernel-enforced mechanisms [14], [38],
Dalvik machine-enabled techniques [15] or user-space en-
gines [23] for IFT across system objects. CleanOS [34]
introduces a security-enhanced garbage collector to protect
sensitive data objects using encryption and data eviction.
AppFence [21] suggests providing fake information when apps
ask for sensitive user data. DroidScope [37] introduces ofﬂine
VM introspection for IFT on Android emulators. Aquifer [25]
and IpShield [11] prevent data leakages using LSM-based and
Android sensor-level data protection, respectively.
Android permission system limitations or misuse is a well-
studied problem [13], [30], [18], [17], [16], [21], [12]. SE-
Android [32] deploys SE-Linux for Android at the kernel
and middleware levels. Porscha [26] provides policy-based
digital right management for smartphones without tracking
the sensitive data ﬂows. Trustdroid [9] provides a two-context
work/personal domain isolation based on Tomoyo Linux.
DeepDroid [36] enforce isolation policies at system server
level. These MAC solutions rely on statically deﬁned policies
and do not support on-the-ﬂy policy installation and enforce-
ment. FlaskDroid [10] and ASM [20] provide kernel and user-
space hooks for developers, however, the scope of the policy
enforcement are limited by the hooks’ points.
VIII. DISCUSSIONS
Like most of existing practical IFT technology today,
SWIRLS is unable to handle termination, timing, and implicit
ﬂows that can be used to circumvent data isolation. Even
coarse-grained isolation techniques like virtualization do not
always provide protection against covert channel attacks by
apps. Rather than trying to improve on IFT, SWIRLS’s goal
is to enable BYOD through a more ﬁne-grained and user-
transparent data isolation model that gives data owners (not
apps) control over data protection policies. Until IFT advances
enable covert channel detection, we cope through a judicious
choice of goals and threat model. Additionally, the SWIRLS
TCB contains the Android system (kernel, Dalvik, system
services), and the SWIRLS server (Section IV). This TCB does
not prevent a user from rooting the device and replacing the
kernel to circumvent SWIRLS, no different from other isolation
solutions available today. To prevent those attacks, hardware
support such as TPM or TrustZone [1] are needed to ensure
that the TCB has not been tampered with, no different from
4For a more detailed comparison, please see Section VI-E.
536
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:45 UTC from IEEE Xplore.  Restrictions apply. 
what some manufacturers do today, e.g., Samsung Knox on
Galaxy S series phones [29]. We consider this problem outside
the scope of this paper.
IX. CONCLUSIONS
SWIRLS enables BYOD through dynamic virtual micro se-
curity perimeters, i.e., capsules, to protect data and data owners
rather than apps and services within a system. SWIRLS keeps
track of each capsule boundary across the system, and enforces
relevant policies by deploying intra- and inter-process level
mandatory access control. Our implemented fully-working
SWIRLS prototype (>25K LOC) runs on Android 4.1.1 r6,
causes a reasonably low overhead on the system’s overall
throughput, and facilitates two appealing BYOD use-cases for
data interactions between corporates and their employees.
ACKNOWLEDGMENTS
We appreciate the Department of Homeland Security Sci-
ence & Technology Directorate (DHS S&T) Cyber Security
Division, and our Program Manager Vincent Sritapan for their
support of our project under the contract No. D15PC00159.
REFERENCES
[1] T. Alves and D. Felton. Trustzone: Integrated hardware and software
security. ARM white paper, 3(4):18–24, 2004.
[2] Android, 2015. Android APK expansion ﬁles; available at https:
//developer.android.com/google/play/expansion-ﬁles.html.
[3] Android, 2015. Location API; available at https://developer.android.
com/training/location.
[4] Android Developers Manual - Customizing SELinux, 2015. https://
[5]
source.android.com/devices/tech/security/selinux/customize.html.
J. Andrus, C. Dall, A. Hof, O. Laadan, and J. Nieh. Cells: a virtual
mobile smartphone architecture.
In Proceedings of the Twenty-Third
ACM Symposium on Operating Systems Principles, pages 173–187.
ACM, 2011.
[6] AnTuTu, 2015. Android AnTuTu performance benchmark; available at
http://www.antutu.net.
[7] K. Barr, P. Bungale, S. Deasy, V. Gyuris, P. Hung, C. Newell, H. Tuch,
and B. Zoppis. The vmware mobile virtualization platform: is that a
hypervisor in your pocket? ACM SIGOPS Operating Systems Review,
44(4):124–135, 2010.
[8] Bluebox, 2014. https://bluebox.com/.
[9] S. Bugiel, L. Davi, A. Dmitrienko, S. Heuser, A.-R. Sadeghi, and
B. Shastry. Practical and lightweight domain isolation on android. In
ACM workshop on Security and privacy in smartphones and mobile
devices, pages 51–62, 2011.
[10] S. Bugiel, S. Heuser, and A.-R. Sadeghi. Flexible and ﬁne-grained
mandatory access control on android for diverse security and privacy
policies. In Usenix security, pages 131–146, 2013.
[11] S. Chakraborty, C. Shen, K. R. Raghavan, Y. Shoukry, M. Millar,
and M. Srivastava. ipshield: a framework for enforcing context-aware
privacy. In Proceedings of the 11th USENIX Conference on Networked
Systems Design and Implementation, pages 143–156. USENIX Associ-
ation, 2014.
[12] K. Z. Chen, N. Johnson, V. DSilva, S. Dai, K. MacNamara, T. Magrino,
E. Wu, M. Rinard, and D. Song. Contextual policy enforcement in
android applications with permission event graphs.
In Proc. NDSS,
2013.
[13] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. Wallach. Quire:
In 20th
Lightweight provenance for smart phone operating systems.
USENIX Security Symposium, 2011.
[14] P. Efstathopoulos, M. Krohn, S. VanDeBogart, C. Frey, D. Ziegler,
E. Kohler, D. Mazieres, F. Kaashoek, and R. Morris. Labels and event
processes in the asbestos operating system. ACM SIGOPS Operating
Systems Review, 39(5):17–30, 2005.
[15] W. Enck, P. Gilbert, B. Chun, L. Cox, J. Jung, P. McDaniel, and
A. Sheth. Taintdroid: an information-ﬂow tracking system for realtime
privacy monitoring on smartphones. In Proceedings of the 9th USENIX
conference on Operating systems design and implementation, pages 1–
6. USENIX Association, 2010.
[16] W. Enck, M. Ongtang, and P. McDaniel. Understanding android
security. Security & Privacy, IEEE, 7(1):50–57, 2009.
[17] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android
permissions demystiﬁed. In Proceedings of the 18th ACM conference on
Computer and communications security, pages 627–638. ACM, 2011.
[18] A. P. Felt, K. Greenwood, and D. Wagner. The effectiveness of
application permissions. In Proceedings of the 2nd USENIX conference
on Web application development, pages 7–7. USENIX Association,
2011.
[19] M. Georgiev, S.
Iyengar, S. Jana, R. Anubhai, D. Boneh, and
V. Shmatikov. The most dangerous code in the world: validating ssl
certiﬁcates in non-browser software. In Proceedings of the 2012 ACM
conference on Computer and communications security, pages 38–49.
ACM, 2012.
[20] S. Heuser, A. Nadkarni, W. Enck, and A.-R. Sadeghi. Asm: a
programmable interface for extending android security. Intel CRI-SC at
TU Darmstadt, North Carolina State University, CASED/TU Darmstadt,
Tech. Rep. TUD-CS-2014-0063, 2014.
[21] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall. These
aren’t the droids you’re looking for: retroﬁtting android to protect
data from imperious applications.
In Proceedings of the 18th ACM
conference on Computer and communications security, pages 639–652.
ACM, 2011.
Invisible Things Lab, 2011. http://www.qubes-os.org/.
[22]
[23] M. Krohn, A. Yip, M. Brodsky, N. Cliffer, M. F. Kaashoek, E. Kohler,
and R. Morris. Information ﬂow control for standard os abstractions. In
ACM SIGOPS Operating Systems Review, volume 41, pages 321–334.
ACM, 2007.
[24] M. Lange, S. Liebergeld, A. Lackorzynski, A. Warg, and M. Peter.
L4android: a generic operating system framework for secure smart-
phones.
In Proceedings of the 1st ACM workshop on Security and
privacy in smartphones and mobile devices, pages 39–50. ACM, 2011.
[25] A. Nadkarni and W. Enck. Preventing accidental data disclosure in
modern operating systems. In Proceedings of the 2013 ACM SIGSAC
conference on Computer &#38; communications security, CCS ’13,
pages 1029–1042, New York, NY, USA, 2013. ACM.
[26] M. Ongtang, K. Butler, and P. McDaniel. Porscha: Policy oriented
secure content handling in android. In Proceedings of the 26th Annual
Computer Security Applications Conference, pages 221–230. ACM,
2010.
[27] M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel. Semantically
rich application-centric security in android. Security and Communica-
tion Networks, 5(6):658–673, 2012.
[28] D. Quigley, J. Sipek, C. P. Wright, and E. Zadok. Unionfs: User-
and community-oriented development of a uniﬁcation ﬁlesystem.
In
Proceedings of the 2006 Linux Symposium, volume 2, pages 349–362,
2006.
[29] Samsung Knox, 2014. http://www.samsungknox.com/.
[30] B. Sarma, N. Li, C. Gates, R. Potharaju, C. Nita-Rotaru, and I. Molloy.
Android permissions: a perspective combining risks and beneﬁts.
In
Proceedings of the 17th ACM symposium on Access Control Models
and Technologies, pages 13–22. ACM, 2012.
[31] S. Smalley, 2015. SE-Android; available at http://seandroid.bitbucket.
org/.
[32] S. Smalley and R. Craig. Security enhanced (se) android: Bringing
ﬂexible mac to android. 2013.
[33] Swirls, 2015. Swirls anonymous demonstration; available at http://goo.
gl/ofsC5N (capsule installation) and http://tinyurl.com/knvg77a (capsule
boundary tracking and policy enforcement).
[34] Y. Tang, P. Ames, S. Bhamidipati, A. Bijlani, R. Geambasu, and
N. Sarda. Cleanos: Limiting mobile data exposure with idle eviction.
OSDI, 2012.
[35] R. Wang, W. Enck, D. Reeves, X. Zhang, P. Ning, D. Xu, W. Zhou, and
A. M. Azab. Easeandroid: Automatic policy analysis and reﬁnement
for security enhanced android via large-scale semi-supervised learning.
In USENIX Security, 2015.
[36] X. Wang, K. Sun, Y. Wang, and J. Jing. Deepdroid: Dynamically
enforcing enterprise policy on android devices. 2015.
[37] L. Yan and H. Yin. Droidscope: Seamlessly reconstructing the os
and dalvik semantic views for dynamic android malware analysis. In
USENIX conference on Security symposium, pages 29–29, 2012.
[38] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazi`eres. Making
information ﬂow explicit in histar. In Proceedings of the 7th USENIX
Symposium on Operating Systems Design and Implementation, vol-
ume 7, pages 19–19, 2006.
537
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:45 UTC from IEEE Xplore.  Restrictions apply.