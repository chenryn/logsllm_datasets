### References

1. **Attacks.** In *25th USENIX Security Symposium (USENIX Security 16)*. USENIX Association, 773–789.

2. **Palla, Gergely, Imre Derényi, Illés Farkas, and Tamás Vicsek.** 2005. "Uncovering the Overlapping Community Structure of Complex Networks in Nature and Society." *Nature* 435, 7043 (2005), 814–818.

3. **Papernot, Nicolas, Patrick McDaniel, and Ian Goodfellow.** 2016. "Transferability in Machine Learning: From Phenomena to Black-Box Attacks Using Adversarial Samples." arXiv preprint arXiv:1605.07277 (2016).

4. **Papernot, Nicolas, Patrick McDaniel, Somesh Jha, Matt Fredrikson, Z Berkay Celik, and Ananthram Swami.** 2016. "The Limitations of Deep Learning in Adversarial Settings." In *Security and Privacy (EuroS&P), 2016 IEEE European Symposium on*. IEEE, 372–387.

5. **Perdisci, Roberto, Wenke Lee, and Nick Feamster.** 2010. "Behavioral Clustering of HTTP-Based Malware and Signature Generation Using Malicious Network Traces." In *NSDI, Vol. 10*, 14.

6. **Rahbarinia, Babak, Roberto Perdisci, and Manos Antonakakis.** 2015. "Segugio: Efficient Behavior-Based Tracking of Malware-Control Domains in Large ISP Networks." In *Dependable Systems and Networks (DSN), 2015 45th Annual IEEE/IFIP International Conference on*. IEEE, 403–414.

7. **Ravasz, Erzsébet, Anna Lisa Somera, Dale A Mongru, Zoltán N Oltvai, and A-L Barabási.** 2002. "Hierarchical Organization of Modularity in Metabolic Networks." *Science* 297, 5586 (2002), 1551–1555.

8. **Rieck, Konrad, Philipp Trinius, Carsten Willems, and Thorsten Holz.** 2011. "Automatic Analysis of Malware Behavior Using Machine Learning." *Journal of Computer Security* 19, 4 (2011), 639–668.

9. **Rndic, Nedim, and Pavel Laskov.** 2014. "Practical Evasion of a Learning-Based Classifier: A Case Study." In *Security and Privacy (SP), 2014 IEEE Symposium on*. IEEE, 197–211.

10. **Sales-Pardo, Marta, Roger Guimera, André A Moreira, and Luís A Nunes Amaral.** 2007. "Extracting the Hierarchical Organization of Complex Systems." *Proceedings of the National Academy of Sciences* 104, 39 (2007), 15224–15229.

11. **Sebastián, Marcos, Richard Rivera, Platon Kotzias, and Juan Caballero.** 2016. "Av-class: A Tool for Massive Malware Labeling." In *International Symposium on Research in Attacks, Intrusions, and Defenses*. Springer, 230–253.

12. **Sivakorn, Suphannee, Iasonas Polakis, and Angelos D Keromytis.** 2016. "I Am Robot: (Deep) Learning to Break Semantic Image CAPTCHAs." In *Security and Privacy (EuroS&P), 2016 IEEE European Symposium on*. IEEE, 388–403.

13. **Smutz, Charles, and Angelos Stavrou.** 2012. "Malicious PDF Detection Using Metadata and Structural Features." In *Proceedings of the 28th Annual Computer Security Applications Conference*. ACM, 239–248.

14. **Sun, Jimeng, Huiming Qu, Deepayan Chakrabarti, and Christos Faloutsos.** 2005. "Neighborhood Formation and Anomaly Detection in Bipartite Graphs." In *Data Mining, Fifth IEEE International Conference on*. IEEE, 8–pp.

15. **Tan, Kymie MC, Kevin S Killourhy, and Roy A Maxion.** 2002. "Undermining an Anomaly-Based Intrusion Detection System Using Common Exploits." In *International Workshop on Recent Advances in Intrusion Detection*. Springer, 54–73.

16. **Tramèr, Florian, Fan Zhang, Ari Juels, Michael K Reiter, and Thomas Ristenpart.** 2016. "Stealing Machine Learning Models via Prediction APIs." In *USENIX Security*.

17. **Von Luxburg, Ulrike.** 2007. "A Tutorial on Spectral Clustering." *Statistics and Computing* 17, 4 (2007), 395–416.

18. **Wagner, David, and Paolo Soto.** 2002. "Mimicry Attacks on Host-Based Intrusion Detection Systems." In *Proceedings of the 9th ACM Conference on Computer and Communications Security*. ACM, 255–264.

19. **Wall, Michael E, Andreas Rechtsteiner, and Luis M Rocha.** 2003. "Singular Value Decomposition and Principal Component Analysis." In *A Practical Approach to Microarray Data Analysis*. Springer, 91–109.

20. **Wittel, Gregory L, and Shyhtsun Felix Wu.** 2004. "On Attacking Statistical Spam Filters." In *CEAS*.

21. **Network X.** Accessed in May 2017. "Community API." http://perso.crans.org/aynaud/communities/api.html. (Accessed in May 2017).

22. **Xu, Weilin, Yanjun Qi, and David Evans.** 2016. "Automatically Evading Classifiers." In *Proceedings of the 2016 Network and Distributed Systems Symposium*.

23. **Yen, Ting-Fang, Alina Oprea, Kaan Onarlioglu, Todd Leetham, William Robertson, Ari Juels, and Engin Kirda.** 2013. "Beehive: Large-Scale Log Analysis for Detecting Suspicious Activity in Enterprise Networks." In *Proceedings of the 29th Annual Computer Security Applications Conference*. ACM, 199–208.

### Figures and Tables

#### Figure 12: Cumulative Distribution of Distinct Number of NX-DOMAINs Queried by Each Host in 12/18/2016
- **Description:** This figure shows the cumulative distribution for the distinct number of NXDOMAINs queried by hosts on 12/18/2016 in the network datasets from a telecommunication network.
- **Key Points:**
  - A host querying two distinct NXDOMAINs is at the 48th percentile.
  - A host querying ten distinct NXDOMAINs is at the 95th percentile.

#### Table 5: DGA Families Contained Within Our Ground Truth Dataset
- **Top Part:**
  - **DGA Family | Number of Domains**
    - Chinad | 4,608
    - Corebot | 720
    - Gozi | 864
    - Locky | 360
    - Murofet | 36,864
    - Necurs | 54,720
    - NewGOZ | 18,000
    - PadCrypt | 1,728
    - Qadars | 3,600
    - Qakbot | 180,000
    - Ranbyus | 720
    - Sisron | 1,152
    - Symmi | 90,300
    - Pykspa | 1,190
    - Suppobox | 12,846
    - Gimemo | 9,144
- **Bottom Part:**
  - **DGA Family | Number of Feature Vectors**
    - Chinad | 18
    - Corebot | 18
    - Gozi | 72
    - Locky | 36
    - Murofet | 56
    - Necurs | 18
    - NewGOZ | 18
    - PadCrypt | 36
    - Qadars | 18
    - Qakbot | 35
    - Ranbyus | 18
    - Sisron | 19
    - Symmi | 18
    - Pykspa | 48
    - Suppobox | 40
    - Gimemo | 17

### Implementation of Pleiades DGA Detection System

#### A. Unique Domains Queried by Hosts
- **Figure 12** shows the cumulative distribution for the distinct number of NXDOMAINs queried by hosts on 12/18/2016 in the network datasets from a telecommunication network. The CDF indicates that a host querying two distinct NXDOMAINs is at the 48th percentile, and a host querying ten distinct NXDOMAINs is at the 95th percentile.

#### B. Labeled DGA Families
- We used default parameters to generate different versions of the malware families for 18 different seed dates. The number of domains generated for each malware family is recorded in the top part of Table 5.

#### C. Reimplementing Pleiades
- **Step-by-Step Process:**
  1. **Filtering Data:** From the NXDOMAIN query data, we filtered out hosts that only queried one domain name in a day, as done by the authors of Pleiades.
  2. **Constructing the Association Matrix:** We constructed an association matrix representing the bipartite graph between hosts and the NXDOMAINs they queried. Each row represents one host, and each column represents one NXDOMAIN. If host \( i \) queried NXDOMAIN \( j \) in that day, we assigned weight \( w_{ij} = 1 \) in the matrix; otherwise, \( w_{ij} = 0 \). Each row was normalized such that the sum of weights is one.
  3. **Singular Value Decomposition (SVD):** We performed SVD over this matrix and kept the first \( N \) eigenvalues. For our dataset, we chose \( N = 35 \) according to the scree plot of Eigenvalues. Figure 4 shows that the Eigenvalues line plateaus after \( N \geq 35 \).
  4. **Clustering:** The resulting eigenvectors were used for XMeans clustering.
  5. **Feature Extraction:** Once we had the clusters of NXDOMAINs, we extracted a feature vector for each cluster, which would be used for classification. We have four feature families: length, entropy, pairwise Jaccard distance of character distribution, and pairwise Dice distance of bigram distribution. This yields a 36-length feature vector for classification that relies on properties of the domain strings themselves. Please refer to Section 4.1.1 in the original Pleiades paper [9] for further details.
  6. **Classification:** Finally, the classifier uses the feature vectors of the clusters to detect existing, known DGAs and identify never-before-seen DGAs.

#### D. Current DGA Landscape
- **Newly Discovered DGAs:**
  - **New DGA A:** Classified as similar to the DGA Chinad, with a total of 59,904 domains. The generated domains have a fixed length of 18 characters and use five different TLDs: .com, .net, .cn, .biz, and .ru. Chinad has similar characteristics in domain names, but its domain length is 16 characters, and it uses two additional TLDs: .info and .org.
  - **New DGA B:** A dictionary-words DGA classified as similar to Gozi. Gozi generates domains by combining words from word lists such as Requests for Comments (RFC), the Ninety Five Theses of Martin Luther in its original Latin text, and GNU General Public License (GNU GPL). In 12 days, we observed 9,815 domain names from this DGA, with 10,435 infected hosts.
  - **New DGA C:** Classified as similar to Gimemo. It repeatedly uses bigrams and trigrams as units for composing domain name strings. We found 6,738 domains for New DGA C. Most of the domains from DGA C follow a pattern of consonant-vowel-consonant at the beginning, usually followed by another similar pattern or a sequence of vowel-consonant-vowel, making the generated domains appear almost readable. However, the generated domains did not follow the character frequency distribution for any language using the English or similar alphabets. The length of the generated domains is not fixed but appears to be around 10 characters, with either a character added or removed.
  - **New DGA D:** Uses .com TLD, and second-level labels varying between 12 and 18 characters.
  - **New DGA E-v1:** Iterates through both algorithm-generated second-level domains and child labels.

- **Evasion Attempts in the Wild:**
  - The DGAs of Qakbot and Pykspa provide evidence that malware authors are attempting to avoid or obstruct detection.
  - **Qakbot:** A special mode is triggered when the malware detects it is running inside a sandbox environment. Specifically, the seed of the algorithm is appended to generate redundant domains that won't be used as actual C&C.
  - **Pykspa:** Generates two sets of domains based on two different seed sets, which appear identical to a human analyst as if there were only one set of generated domains. Unlike Qakbot, in normal operation, Pykspa queries both sets of domains, along with a list of benign domains. This behavior could be a method to detect analysis efforts. If an analyst sets the environment to provide answers to these "bogus" queries, it could indicate an anomaly to the malware. Generating a large number of "fake" domains could also increase the cost of sinkholing the botnets, making the sinkholing operation more likely to fail to cover all of the actual C&C domains [38]. These evasion attempts are in their infancy in terms of complexity and effectiveness. Future creativity from malware authors may lead to more elaborate evasion cases that require significant effort to identify and detect.
  - **Classifier Performance:** Our classifier has low confidence for detecting new DGAs B, C, and E-v1 because there are no DGA domains with child labels in the training dataset. After deploying the classifier for 12 days, we retrained it with additional DGA families observed from the network. After retraining, our classifier successfully identified the following new variants with high confidence: DGA E-v2 and DGA E-v3.

### ROC Curves

#### Figure 13: ROC Curves for 16 Malware DGA Classes and One Benign Class
- **Description:** This figure shows the multi-class ROC curves of the classifier performance for 16 malware DGA classes and one benign class.

#### Figure 14: Micro and Macro ROC Curves
- **Description:** This figure shows the micro and macro ROC curves of the multi-class classifier in our implementation of Pleiades.

### Conclusion
- **Model Selection:** We performed model selection among the following algorithms: Naive Bayes, Linear SVM, Random Forest, Logistic Regression, and Stochastic Gradient Descent Classifier. After analyzing the performance of different classifiers, we chose to use Random Forest as our classifier. Random Forests are similar to Alternative Decision Trees, a boosted tree-based classifier, which was used in the original Pleiades paper. We tested our classifier with five-fold cross-validation and measured an average accuracy of 96.08% and a false positive rate of 0.9%.

- **Future Work:** As malware authors continue to evolve their techniques, it is essential to continuously update and improve our detection systems to stay ahead of these threats.