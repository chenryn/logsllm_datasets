Attacks. In 25th USENIX Security Symposium (USENIX Security 16). USENIX
Association, 773–789.
[42] Gergely Palla, Imre Derényi, Illés Farkas, and Tamás Vicsek. 2005. Uncovering
the overlapping community structure of complex networks in nature and society.
Nature 435, 7043 (2005), 814–818.
[43] Nicolas Papernot, Patrick McDaniel, and Ian Goodfellow. 2016. Transferability
in Machine Learning: from Phenomena to Black-Box Attacks using Adversarial
Samples. arXiv preprint arXiv:1605.07277 (2016).
[44] Nicolas Papernot, Patrick McDaniel, Somesh Jha, Matt Fredrikson, Z Berkay Celik,
and Ananthram Swami. 2016. The Limitations of Deep Learning in Adversarial
Settings. In Security and Privacy (EuroS&P), 2016 IEEE European Symposium on.
IEEE, 372–387.
[45] Roberto Perdisci, Wenke Lee, and Nick Feamster. 2010. Behavioral Clustering
of HTTP-Based Malware and Signature Generation Using Malicious Network
Traces. In NSDI, Vol. 10. 14.
[46] Babak Rahbarinia, Roberto Perdisci, and Manos Antonakakis. 2015. Segugio:
Ecient Behavior-Based Tracking of Malware-Control Domains in Large ISP
Networks. In Dependable Systems and Networks (DSN), 2015 45th Annual IEEE/IFIP
International Conference on. IEEE, 403–414.
[47] Erzsébet Ravasz, Anna Lisa Somera, Dale A Mongru, Zoltán N Oltvai, and A-L
Barabási. 2002. Hierarchical organization of modularity in metabolic networks.
science 297, 5586 (2002), 1551–1555.
[48] Konrad Rieck, Philipp Trinius, Carsten Willems, and Thorsten Holz. 2011. Au-
tomatic Analysis of Malware Behavior Using Machine Learning. Journal of
Computer Security 19, 4 (2011), 639–668.
[49] Nedim Rndic and Pavel Laskov. 2014. Practical Evasion of a Learning-Based
Classier: A Case Study. In Security and Privacy (SP), 2014 IEEE Symposium on.
IEEE, 197–211.
[50] Marta Sales-Pardo, Roger Guimera, André A Moreira, and Luís A Nunes Amaral.
2007. Extracting the hierarchical organization of complex systems. Proceedings
of the National Academy of Sciences 104, 39 (2007), 15224–15229.
[51] Marcos Sebastián, Richard Rivera, Platon Kotzias, and Juan Caballero. 2016. Av-
class: A Tool for Massive Malware Labeling. In International Symposium on
Research in Attacks, Intrusions, and Defenses. Springer, 230–253.
[52] Suphannee Sivakorn, Iasonas Polakis, and Angelos D Keromytis. 2016. I Am
Robot:(deep) Learning to Break Semantic Image Captchas. In Security and Privacy
(EuroS&P), 2016 IEEE European Symposium on. IEEE, 388–403.
[53] Charles Smutz and Angelos Stavrou. 2012. Malicious PDF Detection Using
Metadata and Structural Features. In Proceedings of the 28th Annual Computer
Security Applications Conference. ACM, 239–248.
[54] Jimeng Sun, Huiming Qu, Deepayan Chakrabarti, and Christos Faloutsos. 2005.
Neighborhood formation and anomaly detection in bipartite graphs. In Data
Mining, Fifth IEEE International Conference on. IEEE, 8–pp.
[55] Kymie MC Tan, Kevin S Killourhy, and Roy A Maxion. 2002. Undermining
an Anomaly-Based Intrusion Detection System Using Common Exploits. In
International Workshop on Recent Advances in Intrusion Detection. Springer, 54–
73.
[56] Florian Tramèr, Fan Zhang, Ari Juels, Michael K Reiter, and Thomas Ristenpart.
2016. Stealing Machine Learning Models via Prediction Apis. In USENIX Security.
[57] Ulrike Von Luxburg. 2007. A Tutorial on Spectral Clustering. Statistics and
computing 17, 4 (2007), 395–416.
[58] David Wagner and Paolo Soto. 2002. Mimicry Attacks on Host-Based Intrusion
Detection Systems. In Proceedings of the 9th ACM Conference on Computer and
Communications Security. ACM, 255–264.
[59] Michael E Wall, Andreas Rechtsteiner, and Luis M Rocha. 2003. Singular value
decomposition and principal component analysis. In A practical approach to
microarray data analysis. Springer, 91–109.
[60] Gregory L Wittel and Shyhtsun Felix Wu. 2004. On Attacking Statistical Spam
[61] Network X. Accessed in May 2017. Community API. http://perso.crans.org/
aynaud/communities/api.html. (Accessed in May 2017).
[62] Weilin Xu, Yanjun Qi, and David Evans. 2016. Automatically Evading Classiers.
In Proceedings of the 2016 Network and Distributed Systems Symposium.
[63] Ting-Fang Yen, Alina Oprea, Kaan Onarlioglu, Todd Leetham, William Robertson,
Ari Juels, and Engin Kirda. 2013. Beehive: Large-Scale Log Analysis for Detecting
Suspicious Activity in Enterprise Networks. In Proceedings of the 29th Annual
Computer Security Applications Conference. ACM, 199–208.
Filters. In CEAS.
Session E4:  Adversarial Social NetworkingCCS’17, October 30-November 3, 2017, Dallas, TX, USA11391.0
0.9
0.8
0.7
0.6
0.5
F
D
C
10
1,000
Number of NXDomains
100
10,000
Figure 12: Cumulative distribution of distinct number of NX-
DOMAINs queried by each host in 12/18/2016.
DGA Family # of Domains
4,608
Chinad
720
Corebot
864
Gozi
Locky
360
54,720
Murofet
36,864
Necurs
18,000
NewGOZ
1,728
PadCrypt
Qadars
3,600
180,000
Qakbot
720
Ranbyus
739
Sisron
Symmi
1,152
90,300
Pykspa
1,190
Pykspa
9,144
Gimemo
Suppobox
12,846
# of Feature Vectors
18
18
72
36
56
18
18
36
18
35
18
19
18
48
40
17
40
Table 5: DGA families contained within our ground truth
dataset.
A UNIQUE DOMAINS QUERIED BY HOSTS
Figure 12 shows the cumulative distribution for distinct number of
NXDOMAINs queried by hosts seen on 12/18/2016 in the network
datasets from the telecommunication network. The CDF shows
that a host querying two distinct NXDOMAINs is at the 48th per-
centile, and a host querying 10 distinct NXDOMAINs is at the 95th
percentile.
B LABELED DGA FAMILIES
We use default parameters to generate dierent versions of the
malware families for 18 dierent seed dates. The number of domains
generated for each malware family is recorded in the top part of
Table 5.
C REIMPLEMENTING PLEIADES
We implement a simplied version of the Pleiades DGA detection
system. We follow the exact next steps to implement the graph
clustering and modeling components of Pleiades.
(2) We construct an association matrix representing the bipartite
graph between hosts and the NXDOMAINs they queried.
Each row represents one host and each column represents
one NXDOMAIN. If host i queried NXDOMAIN j in that
day, we assign weight wij = 1 in the matrix. Otherwise, we
assign wij = 0. Then, each row is normalized such that the
sum of weights is one.
(3) Next, we do Singular Value Decomposition (SVD) over this
matrix and keep therst N eigenvalues. For our dataset, we
choose N = 35 according to the scree plot of Eigenvalues.
Figure 4 shows that the Eigenvalues line plateaus after N >=
35.
(4) The resulting eigenvectors are used for XMeans clustering.
(5) Once we have the clusters of NXDOMAINs, we extract a
feature vector for each cluster, which will be used for classi-
cation. We have four feature families: length, entropy, pair-
wise jaccard distance of character distribution, and pairwise
dice distance of bigram distribution. This yields a 36-length
feature vector for classication that relies on properties of
the domain strings themselves. Please refer to Section 4.1.1
in the original Pleiades paper [9] for further details.
(6) Finally, the classier uses the feature vectors of the clusters
to detect existing, known DGAs and identify never-before-
seen DGAs.
(1) From the NXDOMAIN query data, we lter out hosts that
only queried one domain name in a day (as the authors of
Pleiades did).
To obtain DGA domains as a training dataset for the classier, we
analyzed dynamic malware execution trac and executed reverse-
engineered DGA algorithms. Firstly, we identied NXDOMAINs
that were queried by malware md5s by analyzing malware pcaps
obtained from a security vendor. We used AVClass [51] to get the
malware family labels of those md5s. Using this method, we la-
beled pykspa, suppobox, and gimemo malware families, which
were active in our dataset. We extract one feature family per clus-
ter for these. Secondly, we use reverse engineered DGA domains
to compensate limited visibility of DGAs active in the network
dataset. Although only Pykspa, Suppobox, and Murofet domains
have matches in active clusters, we extract one feature vector for
each version’s daily domains of 14 DGA families from the reversed
engineered DGA domain dataset. Table 5 shows the distribution of
the number of features vectors from the reverse engineered DGAs
(top) and those seen in clusters (bottom).
We trained the classier with 17 classes, including 16 malware
families and one manually labeled benign class. We labeled benign
class from clusters containing mixture of all kinds of benign do-
mains, as well as clusters containing disposable domains (e.g., DNS
queries to Anti-Virus online reputation products [19]).
We performed model selection to choose among the following
algorithms: Naive Bayes, Linear SVM, Random Forest, Logistic
Regression and Stochastic Gradient Descent Classier. After the
analysis of the performance of the dierent classiers, we chose to
use Random Forest as our classier. Random Forests are similar to
Alternative Decision Trees, a boosted tree-based classier, which
Session E4:  Adversarial Social NetworkingCCS’17, October 30-November 3, 2017, Dallas, TX, USA1140New DGA A
ns1d8qh2t51tndo5v3[.]net
kcprqut8ub4zgsrfst[.]ru
5qq6fzk452ijexoavi[.]net
niv62bplro1yre1efs[.]cn
2x5d2mg73yjnc3mitm[.]com
New DGA B
www.alltraveltweets[.]com
www.kenfeverbusterrec[.]com
www.profnimorningmap[.]com
www.heavyninjaeternal[.]com
www.hubasicsbinjames[.]com
New DGA C
www.mazubykuhat[.]kz
www.kesgunvux[.]kz
www.qatwafpyg[.]kz
www.hucadunvucy[.]kz
www.soruqlyahat[.]kz
New DGA D
zmvctpqqibxymed0[.]com
algxwtzbnnwtbvo0e[.]com
neuqfxffaoazda1e[.]com
zwaikccluviktrh[.]com
jwioadkvjlnfrl[.]com
New DGA E-v1
wmdgu1a6.myrkraverk[.]net
0nxnc9mu.plorp[.]com
dk5ikx03.strangled[.]net
mp9693zy.iiiii[.]info
cgakona8.myfruit[.]org[.]ru
New DGA E-v2
iyjiy.teakwondo[.]one[.]pl
39mig.mafia-ag[.]info
lzj2q.good[.]one[.]pl
w9u1k.no-ip[.]org
z23uq.ignorelist[.]com
New DGA E-v3
r7g4en.professionalcopy[.]net
0akah1.myvnc[.]com
cjch25.nitrousexpress[.]info
b8sl4c.bot[.]nu
zw7wj8.aintno[.]info
Figure 15: Newly found DGAs.
e
t
a
R
e
v
i
t
i
s
o
P
e
u
r
T
1.0
0.9
0.8
0.7
0.6
0.5
0.00
0.25
0.75
False Positive Rate
0.50
1.00
class
benign
chinad
corebot
gimemo
gozi
locky
murofet
necurs
newgoz
padcrypt
pykspa
qadars
qakbot
ranbyus
sisron
suppobox
symmi
Figure 13: ROC curves for 16 malware DGA classes and one
benign class.
e
t
a
R
e
v
i
t
i
s
o
P
e
u
r
T
1.0
0.9
0.8
0.7
0.6
0.5
micro−average ROC curve
macro−average ROC curve
0.00
0.25
0.50
False Positive Rate
0.75
1.00
Figure 14: Micro and macro ROC curves.
were used in the original Pleiades paper. We tested our classier
with ve fold cross-validation and measured an average accuracy
at 96.08%, and a false positive rate of 0.9%. Figure 13 shows the
multi-class ROC curves of the classier performance. Figure 14
shows the micro and macro ROC curves of the multi-class classier
in our implementation of Pleiades.
D CURRENT DGA LANDSCAPE
We ran the DGA detection system over anonymized network trac
from a Recursive DNS server in a telecommunication provider, from
December 18, 2016 to December 29, 2016.
Newly Discovered DGAs. We found 12 new DGA malware fami-
lies. Figure 15 shows 5 of them. New DGA A is classied as similar
to the DGA Chinad, with a total of 59,904 domains. The generated
domains have a xed length of 18 characters and use ve dierent
tlds: .com, .net, .cn, .biz, and .ru. Chinad has similar characteristics
in domain names, but its domain length is 16 characters, and it uses
two additional tlds: .info and .org. New DGA B is a dictionary-words
DGA that is classied as similar to Gozi. Gozi generates domains by
combining words from word lists such as Requests for Comments
(RFC), the Ninety Five Theses of Martin Luther in its original Latin
text, and GNU General Public License (GNU GPL). In 12 days, we
observed 9815 domain names from this DGA, with 10,435 infected
hosts. New DGA C is classied as similar to Gimemo. It repeatedly
uses bigrams and trigrams as units for composing domain name
strings. We found 6,738 domains for new DGA C. Most of the do-
mains from DGA C follow a pattern of consonant-vowel-consonant
at the beginning, usually followed by another similar pattern or a
sequence of vowel-consonant-vowel, which makes the generated
domains appear almost readable. Nevertheless, New DGA C gener-
ated domains did not follow the character frequency distribution
for any of the languages that use the English or similar alphabets.
The length of the generated domains is not xed but it appears
to be around 10 characters with either a character added or re-
moved. New DGA D uses .com tld, and second-level labels varying
between 12 and 18 characters. New DGA E-v1 iterates through both
algorithm-generated second level domains and child labels.
Evasion Attempts in the Wild. The DGAs of qakbot and pykspa
provide us with evidence that the malware authors are attempting
to avoid or obstruct detection. A special mode of Qakbot is trig-
gered when the malware detects that it is running inside a sandbox
environment. Specically, the seed of the algorithm is appended
to generate redundant domains that won’t be used as actual C&C.
Similary, Pykspa generates two sets of domains based on two dier-
ent seed sets, which appear identical to a human analyst as if there
were only one set of generated domains. Dierent than Qakbot,
in normal operation Pykspa queries both sets of domains, along a
list of benign domains. This kind of behavior could be a method to
detect analysis eorts. If an analyst sets the environment to provide
answers to these “bogus” queries, it could indicate anomaly to the
malware. Generating a large number of “fake” domains could also
increase the cost of sinkholing the botnets. It makes the sinkhol-
ing operation more likely to fail to cover all of the actual C&C
domains [38]. These eorts appear to be in their infancy in terms
of complexity and eectiveness at this point. If malware authors
unleash their creativity in the future, we might come across more
elaborate evasion cases that require a lot more eort to identify
and detect.
Furthermore, we identify instances of DGAs already evading
the classication part of Pleiades by introducing a child label. Our
classier has low condence for detecting new DGAs B, C, and
E-v1. Since there are no DGA domains with child labels in the
training dataset, the classier does not have the requisite knowledge
to predict such DGAs. After deploying the classier for 12 days,
Session E4:  Adversarial Social NetworkingCCS’17, October 30-November 3, 2017, Dallas, TX, USA1141we retrained the classier with additional DGA families observed
from the network. After retraining, our classier has successfully
identied the following new variants with high condence: DGA
E-v2 and DGA E-v3.
Session E4:  Adversarial Social NetworkingCCS’17, October 30-November 3, 2017, Dallas, TX, USA1142