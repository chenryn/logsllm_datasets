In the construction of KR-SHA1, we prepend the string
08 to the input to SHA1 in keyder to ensure that the
inputs to SHA1 never collide between the keyder and
unwind algorithms; note that the stm variable always
denotes a 160-bit string.
Construction 5.1 [KR-SHA1.]
The key regression
scheme KR-SHA1 = (setup, wind, unwind, keyder) is
deﬁned as follows. MW is a positive integer and a pa-
rameter of the construction.
Alg. setup
stmMW
For i = MW downto 2 do
$← {0, 1}160
stmi−1 ← unwind(stmi)
stp ← h1, stm1, . . . , stmMWi
Return stp
Alg. wind(stp)
If stp = ⊥ then return (⊥, ⊥)
Parse stp as hi, stm1, . . . , stmMWi
If i > MW return (⊥, ⊥)
stp0 ← hi + 1, stm1, . . . , stmMWi
Return (stp0, stmi)
Alg. unwind(stm)
stm0 ← SHA1(stm) ; Return stm0
Alg. keyder(stm)
K ← SHA1(08kstm) ; Return K
The derived key space for the scheme KR-SHA1 is
DK = {0, 1}160.
In practice we assume that the MW might be some rea-
sonable value like 220. We give a proof of security for
KR-SHA1 in Section 9.
In our proof of security we
view the application of SHA1(·) in unwind as one ran-
dom oracle and the application of SHA1(08k·) in keyder
as another random oracle. The proof of security for
KR-SHA1 is thus in the random oracle model [9].
MW = ∞
Random oracles
setup cost
wind cost
unwind cost
keyder cost
KR-SHA1
KR-AES
No
Yes
No
No
KR-RSA
Yes
Yes
MW SHA1 ops MW AES ops
1 RSA key generation
no crypto
1 SHA1 op
1 SHA1 op
no crypto
1 AES op
1 AES op
1 RSA decryption
1 RSA encryption
1 SHA1 op
Table 1. Our preferred constructions. There are ways of implementing these constructions with
different wind costs. The “random oracles” line refers to whether our security proof is in the
random oracle model or not.
5.2 The KR-AES construction
Our next preferred construction, KR-AES, uses the
AES block cipher and is provably secure in the standard
model, meaning without random oracles but assuming
that AES is a secure pseudorandom permutation [8, 35].
Construction 5.2 [KR-AES.]
The key regression
scheme KR-AES = (setup, wind, unwind, keyder) is de-
ﬁned as follows. MW is a positive integer and a param-
eter of the construction.
Alg. setup
stmMW
For i = MW downto 2 do
← {0, 1}128
$
stmi−1 ← unwind(stmi)
stp ← h1, stm1, . . . , stmMWi
Return stp
Alg. wind(stp)
If stp = ⊥ then return (⊥, ⊥)
Parse stp as hi, stm1, . . . , stmMWi
If i > MW return (⊥, ⊥)
stp0 ← hi + 1, stm1, . . . , stmMWi
Return (stp0, stmi)
Alg. unwind(stm)
stm0 ← AESstm(0128) ; Return stm0
Alg. keyder(stm)
K ← AESstm(1128) ; Return K
The derived key space for the scheme KR-AES is DK =
{0, 1}128.
As with KR-SHA1, we assume that the MW might be
some reasonable value like 220. We prove the secu-
rity of KR-AES in stages. We ﬁrst show how to build a
secure key regression scheme from any forward-secure
pseudorandom bit generator (FSPRG) [10]; we call our
construction KR-FSPRG. We then recall one of Bellare
and Yee’s [10] methods (FSPRG-PRG) for building se-
cure FSPRGs from standard pseudorandom bit genera-
tors (PRGs) [10, 11, 51]. Instantiating KR-FSPRG with
FSPRG-PRG yields a secure PRG-based key regression
scheme that we call KR-PRG. KR-AES is then an instan-
tiation of KR-PRG with a PRG that, on input a 128-bit
string stm, outputs AESstm(0128)kAESstm(1128). Since
the constructions KR-FSPRG and KR-PRG have mul-
tiple possible instantiations, we consider them to be of
independent interest. Details in Sections 6 through 8.
Remark. On can also view KR-SHA1 as an instan-
tiation of KR-PRG with a PRG (in the random ora-
cle model) that, on input a string stm ∈ {0, 1}160,
outputs SHA1(stm)kSHA1(08kstm).
In Section 9 we
prove KR-SHA1 directly, rather than by instantiating
KR-PRG, in order to obtain tighter bounds.
5.3 The KR-RSA construction
Our ﬁnal preferred construction, KR-RSA derives
from the key rotation scheme in Figure 2. KR-RSA dif-
fers from KR-SHA1 and KR-AES in that MW = ∞,
meaning that a content provider can invoke the KR-RSA
winding algorithm an unbounded number of times with-
out violating the correctness properties of key regres-
sion schemes. This ability is particularly useful be-
cause it means that an implementor need not ﬁx MW
to some ﬁnite value at implementation or conﬁguration
time. Nevertheless, our security proof in Section 10 sug-
gest that in practice a content publisher should limit the
number of times it invokes wind to some reasonable
value. As another motivation for KR-RSA, we note that
if MW is large, then maintaining the publisher states
for KR-SHA1 and KR-AES may require a non-trivial
amount of space (if the publisher stores the entire vector
stp) or time (if the publisher re-derives stp during every
wind operation).
Construction 5.3 [KR-RSA.]
The key regression
scheme KR-RSA = (setup, wind, unwind, keyder) is de-
ﬁned as follows. Let Krsa be an RSA key generator for
some security parameter k and let m: Z
2k → {0, 1}k
denote the standard big-endian encoding of the integers
in Z
2k to k-bit strings.
Alg. setup
(N, e, d) $← Krsa ; S
Return stp
Alg. wind(stp)
$← Z∗
N ; stp ← hN, e, d, Si
Parse stp as hN, e, d, Si ; S 0 ← Sd mod N
stp0 ← hN, e, d, S 0i ; stm ← hN, e, Si
Return (stp0, stm)
Alg. unwind(stm)
Parse stm as hN, e, Si
S 0 ← Se mod N ; stm0 ← hN, e, S 0i
Return stm0
Alg. keyder(stm)
Parse stm as hN, e, Si ; K ← SHA1(m(S))
Return K
The derived key space for KR-RSA is DK = {0, 1}160.
In our experiments, we set k = 1 024, and Krsa returns
e = 3 as the RSA public exponent.
The proof of security for KR-RSA is in Section 10. The
proof is in the random oracle model and assumes that the
RSA key generator is one-way; we deﬁne one-wayness
in Section 10.
5.4 Discussion
Alternate constructions. Besides KR-SHA1, KR-AES,
and KR-RSA,
there are numerous possible ways to
build key regression schemes, some of which are sim-
ple variants of the more general constructions that we
present in subsequent sections (KR-FSPRG, KR-PRG,
KR-RO, and KR-RSA-RO). Using advanced tree-based
schemes [4, 6, 36, 38], a publisher could give access to
any contiguous sequence of keys using only a logarith-
mic number of nodes from a key tree. We do not con-
sider key trees here because one of our primary design
goals is to minimize the size of the member states that
the content publisher must transmit to members. For in-
stance, it is desirable to have constant-sized metadata in
ﬁle systems.
On the use of SHA1. We completed the bulk of our re-
search prior to Wang, Yin, and Yu [49] showing how to
ﬁnd collisions in SHA1 faster than brute force. The re-
sult of Wang, Yin, and Yu raises the question of whether
one should continue to use SHA1 in real constructions,
including KR-SHA1 and KR-RSA. This concern is well
justiﬁed, particularly because other researchers [31, 33]
have shown how to extend certain types of collision-
ﬁnding attacks against hash functions to break cryp-
tosystems that, at ﬁrst glance, appear to depend only on
a weaker property of the underlying hash function (like
second-preimage resistance) and therefore initially ap-
pear to be immune to collision-ﬁnding attacks. Still, we
currently suspect that our constructions will resist im-
mediate extensions to collision-ﬁnding attacks against
SHA1, particularly because the content publisher is the
entity responsible for determining the inputs to SHA1
and, under our model, the content publisher would not
wish to intentionally compromise the pseudorandom-
ness of its keys. Alternatively, one could replace the use
of SHA1 in our constructions with another hash func-
tion, perhaps a hash function that behaves like a random
oracle assuming that the underlying compression func-
tion is a random oracle [15].
6 Key regression from FSPRGs
Toward proving the security of KR-AES, we ﬁrst
show how to construct a key regression scheme
from a forward-secure pseudorandom bit generator
(FSPRG) [10]. We call our construction KR-FSPRG;
see Construction 6.1. Since there are multiple pos-
sible ways to instantiate KR-FSPRG, we believe that
KR-FSPRG may be of independent interest. Moreover,
our result in this section suggests that future work in
forward-secure pseudorandom bit generators could have
useful applications to key regression schemes.
6.1 Forward-secure pseudorandom generators
Bellare and Yee [10] deﬁne stateful pseudorandom
bit generators and describe what it means for a stateful
pseudorandom bit generator to be forward-secure. Intu-
itively a stateful PRG is forward-secure if even adver-
saries that are given the generator’s current state cannot
distinguish previous outputs from random.
Syntax. A stateful PRG consists of two algorithms:
SBG = (seed, next). The randomized setup algorithm
$← seed. The
returns an initial state; we write this as stg
deterministic next step algorithm takes a state as input
and returns a new state and an output from OutSpSBG,
or the pair (⊥, ⊥); we write this as (stg0, K) ←
next(stg). We require that the set OutSpSBG is efﬁ-
ciently samplable. MaxLenSBG ∈ {1, 2, . . .} ∪ {∞} de-
notes the maximum number of output blocks that SBG
is designed to produce from a correctness (not security)
perspective.
let stg0
Correctness. The correctness requirement for state-
$← seed and, for
ful PRGs is as follows:
i = 1, 2, . . ., let (stgi, Ki) $← next(stgi−1). We require
that for i ≤ MaxLenSBG, (stgi, Ki) 6= (⊥, ⊥).
Security. Let SBG = (seed, next) be a stateful bit gen-
erator. Let A be an adversary. Consider the experiments
Expfsprg-b
SBG,A, b ∈ {0, 1}, and the oracles NextOb below.
The adversary runs in two stages: ﬁnd and guess.
Experiment Expfsprg-b
SBG,A
Oracle NextOb
stg
$← seed
$← ANextOb(ﬁnd)
st
b0 $← A(guess, stg, st)
Return b0
(stg, K) ← next(stg)
If b = 0 then
K
$← OutSpSBG
Return K
The FSPRG-advantage of A in breaking the security of
SBG is deﬁned as
SBG,A
SBG,A = 1i − Prh Expfsprg-0
Advfsprg
= Prh Expfsprg-1
SBG,A = 1i .
Under the concrete security approach, the scheme SBG
is said to be FSPRG-secure if the FSPRG-advantage of
all adversaries A using reasonable resources is “small.”
6.2 An FSPRG-based key regression scheme
We deﬁne KR-FSPRG in Construction 6.1 below. At
a high level, one can view KR-FSPRG’s setup algorithm
as running the FSPRG SBG backward, meaning setup
runs seed and the output of seed becomes KR-FSPRG’s
MW-th member state. From the MW-th member state,
setup invokes next to obtain the (MW − 1)-st member
state; setup continues in this manner until deriving the
1-st member state. The setup algorithm then outputs a
content publisher state stp consisting of an index i, ini-
tially 1, and the MW member states. The wind algo-
rithm, on input a publisher state stp with index i ≤ MW,
outputs the i-th member state in the vector and outputs a
revised publisher state stp0 with index i + 1. On input a
member state stm, the wind and keyder algorithms both
invoke next on stm to obtain a pair (stm0, K); wind then
outputs the revised member state stm0 whereas keyder
outputs the key K.
Construction 6.1 [KR-FSPRG.]
Given a stateful
generator SBG = (seed, next), we can con-
struct a key regression scheme KR-FSPRG =
(setup, wind, unwind, keyder) as follows. MW ≤
MaxLenSBG is a positive integer and a parameter of the
construction.
Alg. setup
$← seed
stgMW
For i = MW downto 2 do
(stgi−1, Ki−1) ← next(stgi)
stp ← h1, stg1, . . . , stgMWi
Return stp
Alg. wind(stp)
If stp = ⊥ then return (⊥, ⊥)
Parse stp as hi, stg1, . . . , stgMWi
If i > MW return (⊥, ⊥)
stp0 ← hi + 1, stg1, . . . , stgMWi
Return (stp0, stgi)
Alg. unwind(stm)
(stm0, K) ← next(stm) ; Return stm0
Alg. keyder(stm)
(stm0, K) ← next(stm) ; Return K
The derived key space for KR-FSPRG is DK =
OutSpSBG.
In order for setup and wind to be “efﬁcient,” we assume
that MW has some “reasonable” value like 220; in the
asymptotic setting we would require that MW be poly-
nomial in some security parameter.
(i.e.,
is FSPRG-secure),
The theorem below states that
Security.
if SBG
is a secure forward-secure pseudorandom bit gen-
erator
then the resulting
key regression scheme KR-FSPRG built from SBG
via Construction 6.1 will be secure (i.e., KR-secure).
Speciﬁcally, Theorem 6.2 says that given an adversary
A against KR-FSPRG, one can construct an adversary
B against SBG such that B uses reasonable resources
(if A does and if MW is small) and Equation (1) in the
theorem statement holds; q is the minimum of MW and
the maximum number of wind and key derivation ora-
cle queries that A makes. These properties imply secu-
rity for KR-FSPRG since, if SBG is FSPRG-secure and
if A uses reasonable resources, then Advfsprg
SBG,B and q
must both be small, which means that Advkr
KR,A, the
advantage of A in attacking KR-FSPRG, must be small
as well.
Theorem 6.2 If SBG is FSPRG-secure, then KR built
from SBG via KR-FSPRG (Construction 6.1) is KR-
secure. Concretely, given an adversary A attacking KR,
we can construct an adversary B attacking SBG such
that
Advkr
KR,A ≤ (q + 1) · Advfsprg
SBG,B
(1)
where q is the minimum of MW and the maximum num-
ber of wind and key derivation oracle queries that A
makes. B makes up to MW queries to its oracle and uses