*   主机上`docker2` :
    ```
    ExecStart=/usr/bin/dockerd --ipv6 --fixed-cidr-v6=2003:ef11::/64
    ```
如果我们应用此配置，重新加载`systemd`配置并在每台主机上重新启动 Docker 服务，我们应该会看到`docker0`桥已经从定义的 IPv6 CIDR 范围中获取了第一个可用的 IP 地址:
```
user@docker1:~$ ip -6 addr show dev docker0
3: docker0:  mtu 1500
    inet6 2003:cd11::1/64 scope global tentative
       valid_lft forever preferred_lft forever
    inet6 fe80::1/64 scope link tentative
       valid_lft forever preferred_lft forever
user@docker1:~$
user@docker2:~$ ip -6 addr show dev docker0
5: docker0:  mtu 1500
 inet6 2003:ef11::1/64 scope global tentative
       valid_lft forever preferred_lft forever
    inet6 fe80::1/64 scope link tentative
       valid_lft forever preferred_lft forever
user@docker2:~$
```
在这一点上，我们的拓扑看起来很像它在第一个食谱:
![How to do it…](img/5453_10_05.jpg)
Docker 将向它创建的每个容器发出一个 IPv6 地址和一个 IPv4 地址。让我们在第一台主机上旋转一个容器，看看我的意思:
```
user@docker1:~$ docker run -d --name=web1 jonlangemak/web_server_1
50d522d176ebca2eac0f7e826ffb2e36e754ce27b3d3b4145aa8a11c6a13cf15
user@docker1:~$
```
注意我们没有将`-P`标志传递给容器来公布容器暴露的港口。如果我们在本地测试，我们可以验证主机可以从容器的 IPv4 和 IPv6 地址到达容器内的服务:
```
user@docker1:~$ docker exec web1 ifconfig eth0
eth0      Link encap:Ethernet  HWaddr 02:42:ac:11:00:02
          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link
 inet6 addr: 2003:cd11::242:ac11:2/64 Scope:Global
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:16 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:1792 (1.7 KB)  TX bytes:648 (648.0 B)
user@docker1:~$ curl http://172.17.0.2
    Web Server #1 - Running on port 80
user@docker1:~$ curl -g http://[2003:cd11::242:ac11:2]
    Web Server #1 - Running on port 80
user@docker1:~$
```
### 注
使用带 IPv6 地址的`curl`时，需要将 IPv6 地址放在括号内，然后通过传递`-g`标志告诉`curl`不要 glob。
我们可以看到，IPv6 地址的行为与 IPv4 地址相同。同样，同一台主机上的容器可以使用其分配的 IPv6 地址通过`docker0`桥直接相互对话。让我们在同一台主机上启动第二个容器:
```
user@docker1:~$ docker run -d --name=web2 jonlangemak/web_server_2
```
快速的验证将向我们证明，这两个容器被允许使用它们的 IPv6 地址直接相互对话，正如预期的那样:
```
user@docker1:~$ docker exec web2 ip -6 addr show dev eth0
10: eth0@if11:  mtu 1500
    inet6 2003:cd11::242:ac11:3/64 scope global nodad
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:3/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$
user@docker1:~$ docker exec -it web1 curl -g \
http://[2003:cd11::242:ac11:3]
    Web Server #2 - Running on port 80
user@docker1:~$
```
# 使用支持 IPv6 的容器
在之前的配方中，我们看到了 Docker 如何处理支持 IPv6 的容器的基本分配。到目前为止，我们看到的行为与我们在前面章节中看到的仅处理 IPv4 寻址容器的行为非常相似。然而，并非所有的网络功能都是如此。Docker 目前在 IPv4 和 IPv6 之间没有完整的功能奇偶校验。也就是说，正如我们将在本食谱中看到的，Docker 没有支持 IPv6 的容器的`iptables` (ip6tables)集成。在本章中，我们将回顾一些网络功能，这些功能是我们之前使用仅支持 IPv4 的容器访问的，并查看它们在使用 IPv6 寻址时的表现。
## 做好准备
在这个配方中，我们将在之前配方中构建的实验室的基础上进行构建。您需要对每台主机进行根级访问，以更改网络配置。假设安装了 Docker，这是默认配置。
## 怎么做…
如上所述，Docker 目前没有主机防火墙，特别是 netfilter 或`iptables`，集成 IPv6。这意味着，在处理容器 IPv6 地址时，我们以前依赖于 IPv4 的几个功能会有所不同。让我们从一些基本功能开始。在之前的食谱中，我们看到同一个主机上的两个容器，连接到`docker0`桥，可以直接相互对话。
当使用 IPv4 地址时，这种行为是意料之中的，并且以几乎相同的方式工作。如果我们想阻止这种通信，我们可以在 Docker 服务中禁用**容器间通信** ( **ICC** )。让我们更新主机上的 Docker 选项`docker1`，将 ICC 设置为`false`:
```
ExecStart=/usr/bin/dockerd --icc=false --ipv6 --fixed-cidr-v6=2003:cd11::/64
```
然后，我们可以重新加载`systemd`配置，重启 Docker 服务，重启容器:
```
user@docker1:~$ docker start web1
web1
user@docker1:~$ docker start web2
web2
user@docker1:~$ docker exec web2 ifconfig eth0
eth0      Link encap:Ethernet  HWaddr 02:42:ac:11:00:03
          inet addr:172.17.0.3  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::42:acff:fe11:3/64 Scope:Link
          inet6 addr: 2003:cd11::242:ac11:3/64 Scope:Global
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:12 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:1128 (1.1 KB)  TX bytes:648 (648.0 B)
user@docker1:~$
user@docker1:~$ docker exec -it web1 curl http://172.17.0.3
curl: (7) couldn't connect to host
user@docker1:~$ docker exec -it web1 curl -g \
http://[2003:cd11::242:ac11:3]
    Web Server #2 - Running on port 80
user@docker1:~$
```
正如我们看到的，IPv4 上的尝试失败，随后的 IPv6 尝试成功。由于 Docker 不管理与容器 IPv6 地址相关的任何防火墙规则，因此没有什么可以阻止 IPv6 地址之间的直接连接。
由于 Docker 不管理与 IPv6 相关的防火墙规则，您可能还会认为出站伪装和端口发布等功能也不再起作用。虽然从 Docker 没有创建 IPv6 关联的 NAT 规则和防火墙策略的意义上来说，这是正确的，但这并不意味着无法从外部网络访问容器的 IPv6 地址。让我们通过一个例子向你展示我的意思。让我们在第二个 Docker 主机上启动一个容器:
```
user@docker2:~$ docker run -dP --name=web2 jonlangemak/web_server_2
5e2910c002db3f21aa75439db18e5823081788e69d1e507c766a0c0233f6fa63
user@docker2:~$
user@docker2:~$ docker port web2
80/tcp -> 0.0.0.0:32769
user@docker2:~$
```
请注意，当我们在主机`docker2`上运行容器时，我们传递了`-P`标志来告诉 Docker 发布容器的公开端口。如果我们检查端口映射，我们可以看到主机已经选择了端口`32768`。请注意，端口映射表示`0.0.0.0`的一个 IP 地址，它通常表示任何 IPv4 地址。让我们从另一台 Docker 主机上执行一些快速测试，以验证哪些工作正常，哪些工作不正常:
```
user@docker1:~$ curl http://10.10.10.102:32769
    Web Server #2 - Running on port 80
user@docker1:~$
```
正如预期的那样，IPv4 端口映射工作正常。通过利用`iptables` NAT 规则将端口`32769`映射到`80`的实际服务端口，我们能够通过 Docker hosts IPv4 地址访问容器服务。现在让我们尝试相同的示例，但使用主机的 IPv6 地址:
```
user@docker1:~$ curl -g http://[2003:ab11::2]:32769
    Web Server #2 - Running on port 80