title:On the structure and characteristics of user agent string
author:Jeffery Kline and
Paul Barford and
Aaron Cahn and
Joel Sommers
On the Structure and Characteristics of User Agent String
Jeff Kline
comScore, Inc.
PI:EMAIL
University of Wisconsin-Madison
Paul Barford
comScore, Inc.
PI:EMAIL
Aaron Cahn
comScore, Inc.
PI:EMAIL
Joel Sommers
Colgate University
PI:EMAIL
ABSTRACT
User agent (UA) strings transmitted during HTTP transactions
convey client system configuration details to ensure that content
returned by a server is appropriate for the requesting host. As
such, analysis of UA strings and their structure offers a unique per-
spective on active client systems in the Internet and when tracked
longitudinally, offers a perspective on the nature of system and
configuration dynamics. In this paper, we describe our study of
UA string characteristics. Our work is based on analyzing a unique
corpus of over 1B UA strings collected over a period of 2 years by
comScore. We begin by analyzing the general characteristics of
UA strings, focusing on the most prevalent strings and dynamic
behaviors. We identify the top 10 most popular User Agents, which
account for 26% of total daily volume. These strings describe the
expected instances of popular platforms such as Microsoft, Apple
and Google. We then report on the characteristics of low-volume
UA strings, which has important implications for unique device
identification. We show that this class of user agent generates the
overwhelming majority of traffic, with between 2M and 10M in-
stances observed each day. We show that the distribution of UA
strings has temporal dependence and we show the distribution
measured depends on the type of content served. Finally, we report
on two large-scale UA anomalies characterized by web browsers
sending false and misleading UAs in their web requests.
CCS CONCEPTS
• Information systems → Web log analysis; Traffic analysis;
Data mining; • Software and its engineering → Context specific
languages;
KEYWORDS
User Agent Strings, Character Entropy Matrix, Internet Measure-
ment
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
IMC ’17, November 1–3, 2017, London, United Kingdom
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-5118-8/17/11...$15.00
https://doi.org/10.1145/3131365.3131406
ACM Reference Format:
Jeff Kline, Aaron Cahn, Paul Barford, and Joel Sommers. 2017. On the Struc-
ture and Characteristics of User Agent String. In Proceedings of IMC ’17,
London, United Kingdom, November 1–3, 2017, 7 pages.
https://doi.org/10.1145/3131365.3131406
1 INTRODUCTION
The diversity of client system configurations (defined in terms of
hardware, operating system and applications that access content)
in the Internet presents significant challenges for application and
content service providers. The key challenge is that content must
be delivered in formats that are specifically designed for different
types of clients in order to provide the best user experience. Con-
tent providers often have complex regression test environments
to ensure their pages render and behave correctly on different plat-
forms [9, 20]. However, the primary mechanism for ensuring that
content is delivered in the optimal format is the user agent string
(UA), which is transmitted by clients as part of a request for content.
UAs are used by a variety of Internet applications (e.g., web,
crawlers, mobile apps, etc.) for content negotiation, but we restrict
our focus in this paper to their use in the web1. The basic format
for a web UA is “one or more product identifiers, each followed by
zero or more comments” in a format like product[/version] [22].
The intent of the UA is to provide sufficient detail about a client
system to enable a server to transmit content in the appropriate
format and for debugging interoperability problems [18, 22]. As has
been observed in prior studies (e.g., [11]), however, UAs themselves
are a compelling source of information about client systems in the
Internet writ large.
In this paper, we describe our study of UA characteristics. The
goal of our work is to provide a new perspective on UAs that will be
useful for content service providers and other entities that utilize
UAs, to provide a perspective to the research community on Inter-
net client diversity and dynamics, and to provide a perspective that
can inform other potential uses of UAs such as client fingerprint-
ing [11, 12]. Our work is based on analyzing a unique corpus of
over 1B UA strings collected over a period of 2 years by comScore2.
Data collection at comScore is enabled by the placement of tags
on partner web pages that are activated when clients access those
pages. Prior studies (e.g. [8]) have found that comScore tags are
among the most prevalent third-party tag deployments across the
Internet. UAs are captured by comScore servers on tag activation.
1Technically, applications such as web browsers are the user agents. In this paper, our
use of the term UA refers to user agent strings transmitted by web browsers.
2We plan to make a subset of this data available to the community on publication.
IMC ’17, November 1–3, 2017, London, United Kingdom
Jeff Kline, Aaron Cahn, Paul Barford, and Joel Sommers
To conduct our study, we built a UA processing and analysis in-
frastructure. Similar to other studies of large data sets, our process-
ing infrastructure is primarily Hadoop-based. The unique aspect of
our work includes developing a UA parsing capability that is robust
to both standard measurement errors (corrupted characters, etc.)
and non-standard UA formats. Categorization and volume counts of
historical UAs relied on an archive of UA descriptors that comScore
maintains.
Our analysis begins by considering the basic characteristics of
our UA data from both time-series and entropy-based perspectives.
We find that UAs collected for our study exhibit variability on
multiple time scales. On daily time scales, our analysis indicates
how users shift between devices over the course of a day, and
between weekdays and the weekend. On longer timescales, we see
clear indications of occasional hardware and software updates. The
entropy-based representation provides a characterwise measure of
the diversity within the space of UA strings over time. Based on
this representation, we find that there is structure within the space
of strings and show that changes within the UAs distribution tend
to be step-wise, not smooth.
The next step in our analysis considers characteristics of both
high- and low-volume strings. We find that the most prevalent UAs
comprise only 26% of all traffic. We also find that the rank-frequency
distribution of UAs exhibits a power-law-like structure. Finally, we
observe O(1M) unique UAs on a daily basis. We describe sources
of diversity within the UA space and show that the prevalance
of mobile browser apps and developer error are also contributing
factors.
The final aspect of our analysis considers anomalous character-
istics of strings. We report on two instances where high-volume
UA strings are inaccurate or unexpected in significant ways. For
example, we find evidence of various anomalous events in our data
including spurious appearances of a large volume (O(100M)/day) of
outdated UAs, which we diagnose as a software misconfiguration.
In summary, the primary contribution of this paper is in charac-
terizing UA strings. Our results on multiscale UA dynamics have
implications for content providers. Our result on the power law-
like UA prevalence combined with our results showing that many
factors have an impact on the distribution of UAs suggests that
simple, UA-based device fingerprinting methods are unlikely to be
effective. Finally, our results regarding unwanted behaviors support
the notion of efforts related to identifying invalid traffic based on
UAs [10]. To the best of our knowledge, ours is the first study to
consider UA characteristics broadly.
2 DATA
The data we analyze has been collected by comScore, an Internet
measurement company who partners with publishers, brands, ad
networks and others for the purpose of reporting on online audi-
ence behaviors. comScore acquires its data by providing each of its
partners with a block of customized JavaScript code. Each partner
then embeds this code within the content it serves. For example, if
the partner is a publisher, the publisher deploys comScore’s code on
each of its web pages. If the partner is a brand running an ad cam-
paign, the code is delivered alongside the ad campaign’s creative
content (e.g. an image with an embeded link).
When executed by a web browser, this code instructs the browser
to make an HTTP request to comScore’s measurement domain
which, in turn, logs each request. The data comScore collects in-
cludes the cookie, referrer, UA, a timestamp, and other information
pertinent to comScore’s business. comScore has clear and strict
guidelines concerning the use and the protection of personally-
identifiable information.
The daily volume of HTTP requests ingested by comScore is
O(50B). Since its mission concerns reporting about online behaviors,
comScore also maintains several repositories of high-level histor-
ical information about the traffic it observes. These repositories
include high-level summary information about UAs. comScore also
maintains a code-base that categorizes user agents by manufacturer,
device type, browser type and so on.
Our data processing systems are a hybrid combination of Apache
Hadoop MapReduce tasks and Greenplum (a variant of Postgres)
SQL queries.
3 GENERAL CHARACTERISTICS
A fundamental task of web log analysis is the generation of aggre-
gated statistics over browser, device type and operating system.
Typically such statistics are derived from the UA. To help in this
effort, the HTTP standard describes general features about the
structure and information that belongs within the UA string [22,
§5.5.3]. Despite this recommendation, we report below that the
space of user agents within a typical web log are, in fact, a loosely-
structured, very dynamic and extremely diverse set of strings. In
short, using the UA as the basis for web traffic categorization is a
complex endeavor.
In this section, we focus our discussion around four challenges
faced by processes that categorize UAs: coverage of the space, ef-
fective partitioning of the space, validation of the categorization
process itself, and coping with the constant evolution of browsers,
device types and to a lesser extent, operating systems.
We begin by describing the problem of covering the space. A
consistent feature that we observe, and which we discuss in the
next section is that the rank-frequency distribution of UA strings
exhibits a power law-like structure. As a consequence, the majority
of web requests have UA strings that are unpopular. This rare-is-
typical phenomenon means that in order to accurately describe basic
features of Internet traffic, one must have an accurate description of
rarely-seen user agent strings. On a typical day, comScore servers
observe O(1M) distinct UA strings.
To expose some of complexity of proper categorization, we drill
down on two user agent strings that each generated about 30M
records on May 10, 2017. By volume, both ranked among the top
200 overall. The first belongs to a device that runs the Android
operating system:
Dalvik/2.1.0 (Linux; U; Android 5.1; F100A Build/LMY47D)
This User Agent’s device type is reported as F100A. Categorizing
this device as a phone, tablet, game console or by its manufacturer,
however, is simply not possible without an external reference that
can supply this information. (We believe it represents a Forsa F100
model.)
Next, the most common Facebook Mobile App user agent ob-
served on May 10 was:
On the Structure and Characteristics of User Agent String
IMC ’17, November 1–3, 2017, London, United Kingdom
Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X)\