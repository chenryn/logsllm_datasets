# Automatically Detecting SSL Error-Handling Vulnerabilities in Hybrid Mobile Web Apps

## Authors
- Chaoshun Zuo, Shandong University, Email: [EMAIL]
- Jianliang Wu, Shandong University, Email: [EMAIL]
- Shanqing Guo, Shandong University, Email: [EMAIL]

## Abstract
Hybrid mobile web applications (apps) that combine native Android user interfaces (UIs) and WebView UIs are increasingly popular due to their ease of development and lower maintenance complexity. To ensure secure and private communication, these apps typically use HTTPS via WebView, a key component in modern web browsers. This paper identifies a new type of SSL vulnerability arising from error-handling code in hybrid mobile web apps. Specifically, the error-handling code should terminate communication upon certificate errors but often proceeds, leading to Man-in-the-Middle (MITM) attacks. We present a hybrid approach combining static and dynamic analysis to automatically detect these vulnerabilities. Our implementation was evaluated on 13,820 real-world mobile web apps, confirming 645 as truly vulnerable, with an average overhead of 60.8 seconds per app.

### Categories and Subject Descriptors
- D.2.4 [Software Engineering]: Software/Program Verification
- D.2.5 [Software Engineering]: Testing and Debugging

### Keywords
- Android Security, HTTPS, SSL, WebView

## 1. Introduction
Hybrid apps, which integrate both native Android UIs and WebView UIs, have gained popularity due to their ease of development and lower maintenance complexity. These apps use WebViews to display web pages and communicate with web servers. Since some web pages may transfer sensitive information such as usernames and passwords, they use HTTPS connections for protection. Normally, attackers cannot intercept HTTPS connections without cryptographic keys. However, incorrect implementations of HTTPS in WebViews can allow the presentation of web pages with invalid certificates, making them susceptible to MITM or phishing attacks.

Figure 1 illustrates the state machine of the error-handling process. When an app opens an HTTPS web page with an invalid certificate, it passes the URL to Android for verification. If the certificate is invalid, Android triggers the developer's error-handling code, which often ignores the error and proceeds to show the page. This paper aims to identify this specific implementation vulnerability.

While manual analysis is possible for individual apps, it is impractical for large-scale detection. Unlike native apps, mobile web apps require testing both the native and WebView UIs. Existing tools like androguard [3] are not suitable for detecting this vulnerability because they cannot track variables, and static analysis alone often leads to false positives. Dynamic analysis is necessary to verify if the WebView loads an HTTPS page and if its error handling is vulnerable.

To address these challenges, we designed a system that combines static and dynamic analysis. The static analysis identifies potentially vulnerable apps, which are then further analyzed using dynamic analysis. This paper makes the following contributions:
- Discovery of a new type of SSL vulnerability in WebView HTTPS connections.
- Development of a hybrid test framework for Android web apps using multiple emulators, incorporating both static and dynamic analysis.
- Implementation and evaluation of our framework on 13,820 apps, identifying 1,360 potential vulnerabilities and confirming 645 as truly vulnerable.

## 2. System Overview

### 2.1 Problem Statement
For hybrid mobile web apps, when an HTTPS URL is passed to WebView, it first verifies the server's certificate. If the verification fails and the app has overridden the error-handling process, WebView will pass the error to the app, which may ignore the error and proceed. This is a serious security issue, especially for apps that transfer sensitive information like login, user, payment, and authorization data. Unfixed, this vulnerability allows attackers to easily obtain this information through MITM attacks.

### 2.2 Challenges and Solutions

#### 2.2.1 Is the Potential Vulnerable Code Reachable?
To determine if an app is vulnerable, we must ensure it contains potential vulnerable code. We assume classes inheriting from WebViewClient and overriding the `onReceivedSslError` method with ignore code are potentially vulnerable. It is challenging to confirm if `onReceivedSslError` is reachable because it is called by system callbacks. We locate the `setWebViewClient` method call and check if a potentially vulnerable WebViewClient is registered. If so, we find the Activity that loads the WebView and consider it a target Activity, ensuring the potential vulnerable code is reachable.

#### 2.2.2 How to Record Activity Jump Relations with Trigger Events?
To confirm if a potential app is vulnerable, we need to jump from the launcher Activity to the target Activity by triggering recorded events. We build an Activity Call Graph (ACG) to find a path from the launcher Activity to the target Activity, guiding the dynamic test. ACG is a directed graph where vertices represent Activities and edges represent trigger events. We find edges by identifying methods causing activity jumps and locating the event methods (e.g., `onClick`) that trigger these jumps.

#### 2.2.3 How to Simulate Human Operations for Both Native Android UI and WebView UI?
Manual analysis is sufficient for individual apps but impractical for large datasets. We developed an automated test system, Android Tester, by modifying the Android framework and using Robotium to create a general test script. This system simulates human operations, allowing us to know which Activity is active, which views are present, and how to trigger specific events. For WebView, we adopt a crawling strategy to load and extract links until an HTTPS link is found or the crawl depth reaches three layers.

### 2.3 System Overview
Our system takes APK files as input and outputs whether the app is vulnerable. It performs static analysis to identify potential vulnerabilities, followed by dynamic analysis to confirm them. The dynamic analysis involves installing and running the app on an emulator, finding a path from the launcher Activity to the target Activity, and triggering events to reach the target Activity. We also build an attack environment to redirect HTTPS connections to a fake server with an invalid certificate. The system logs and reports which apps are vulnerable and the URLs they visited.

## 3. Detailed Design

### 3.1 Static Analysis Module
**Static Detection:** We decompile the APK into Smali files using apktool [5]. The static analysis scans all Smali files to find classes inheriting from WebViewClient. If no such class is found, the app is considered invulnerable.