Our results show that a “textbook implementation” of a
heap allocator, such as the one used by dlmalloc version
2.7.2, does not offer an effective protection against memory
corruption. Conversely, as expected, security-enhanced ver-
sions, such as dlmalloc version 2.8.6 and musl, are
much more robust against exploitation.
However, adding additional complexity to the design, as
in ptmalloc, makes the implementation of consistency
checks challenging. This results in a surprisingly weak result
for the recently published ptmalloc version 2.26, which
is only slightly stronger than dlmalloc version 2.7.2
from 2005, and weaker than ptmalloc version 2.23 for
what concerns reaching an AW exploitation primitive.
USENIX Association
27th USENIX Security Symposium    109
Technique
Exploitation
Primitive
fastbin dup
house of einherjar
house of spirit
overlapping chunks
unsafe unlink
unsorted bin
poison null byte
house of lore
NHA
NHA
NHA
OA
AWC
AW
OA
NHA
List of Transactions
Runtime
M-M-F-UAF-M-M
M-M-O-F-M
FF-M
M-M-M-F-O-M
M-M-O-F
M-M-F-UAF-M
M-M-M-F-O-M-M-F-F-M
M-M-F-M-UAF-M-M
9.93s
51.10s
9.22s
14.05s
13.80s
9.54s
603.40s
18.72s
Table 3: Summary of the known attacks techniques against
ptmalloc that HEAPHOPPER has been able to reproduce.
Each attack is presented with the reached exploitation prim-
itive and the minimum number of transactions needed to
reach it. Additionally, we show the unique list of transac-
tions, which can be compared against the results in Table 2.
In the last column we give HEAPHOPPER’s runtime to find
a path that reaches the exploitation primitive based on an
interaction model representing this technique.
7.6 Case Study: Reproducing Known At-
tacks on ptmalloc
In this case study we want to test whether HEAPHOPPER is
able to find known attacks against ptmalloc, and how we
can use these results to evaluate other allocator implementa-
tions. The biggest collection of known heap attacks affecting
ptmalloc is the how2heap repository [44].
Therefore, we translated each of the attacks into a composi-
tion of our transactions, and set the bounds for allocation and
overflow sizes accordingly. Afterwards, we ran HEAPHOP-
PER with each these compositions against ptmalloc ver-
sion 2.23. The results can be found in Table 3. For the
interested reader, we included the sequence of transactions
and the resulting PoC in Appendix A.4 and Appendix A.5,
respectively. We found the path that leads to the expected
exploitation primitives for all the cases listed in Table 3. No-
tably, HEAPHOPPER was unable to reproduce the so-called
house of force technique. This technique relies on an integer
overflow, which is then coupled with a dynamic allocation
size that is based on the current heap offset. HEAPHOPPER
is bounded by specific allocation sizes, which can be sym-
bolic but not completely arbitrary, hence, the house of force
technique is not reproducible inside our bounds.
The results of this case study show how HEAPHOPPER is
able to find those attacks, which have been individually found
over years by different vulnerability researchers, in a system-
atic way through our bounded model checking approach.
Furthermore, HEAPHOPPER is able to identify the presence
of similar attacks against other allocator implementations,
disproving the effectiveness of newly introduced checks.
7.7 Case Study: 1-null-byte overflow
With the uncertainty of the effectiveness of the patched in-
troduced by Chris Evans (as discussed in Section 2.3), this
issue is a great showcase to demonstrate the abilities of
HEAPHOPPER to verify specific changes and checks even
for more complex techniques. Therefore, we build a ptmal-
loc shared library from the commit introducing the new
check, and used the transactions for the poison null byte
from the previous evaluation. We also used the same configu-
ration with the addition of having each allocated chunk filled
with symbolic memory. The resulting sequence is shown in
Appendix A.1. With this setup, HEAPHOPPER, in about 4
hours, was able to identify a bypass to Chris Evans’ patch
similar to the recently published workaround [44] (which we
already showed in Figure 1), by setting a “fake” previous
size. For the interested reader, the resulting PoC is provided
in Appendix A.3
Given this result, we analyze the shortcomings of the patch
and identified that the problem stems from the fact that the
consistency check uses values obtained by using the manip-
ulated offsets in the previous size. Hence, we implemented
an alternative patch that verifies the previous sizes before
using them for any calculation. However, due the complex-
ity caused by indirections that these checks face, it is hard
to evaluate their effectiveness by hand. Therefore, we ran
HEAPHOPPER again with the same bounds against ptmal-
loc, with our patch in-lieu of Chris Evans’. HEAPHOPPER
could not find any path that reached an OA, showing that
our patch is indeed protecting against the poison NULL byte
attack. Consequently, we proposed our patch to the glibc
maintainers, where it is currently under review [15].
This case study shows how HEAPHOPPER is able to ver-
ify the effectiveness of new security checks and can help
to make objective design choices, while developing new
security features for an allocator implementation.
7.8 Case Study: tcache
In the experiment in Section 7.1, we discovered an unex-
pected weak result for the latest ptmalloc version. We
traced the problem down to a new structure introduced called
thread cache (tcache). This structure is designed to keep
track of freed chunks, and it is placed as a cache before the
traditional list of free chunks.
In order to analyze its effects on the overall security of
ptmalloc, we compiled the newest release of ptmalloc
once with tcache enabled and once without. We used
the same bounds as in the original experiment, and ran
HEAPHOPPER on both versions of the library. The effects of
enabling tcache on the exploitation primitives discovered
by HEAPHOPPER can be summarized as follow:
• OA: When tcache is enabled, all the constraints that
would otherwise limit an attacker trying to achieve OA are
not present anymore.
110    27th USENIX Security Symposium
USENIX Association
• NHA: Similar to the OA case, the constraints on the
contents of the memory area to be allocated are not present
anymore.
• AW: On the latest ptmalloc without tcache, the only
way we found to obtain an unconstrained arbitrary write
(AW) required a UAF (specifically, this technique is typically
called unsafe unlink, see Table 3). However, when en-
abling tcache, a new possibility of achieving unconstrained
arbitrary writes is introduced. Specifically, it is possible to
achieve an AW using a fake-free operation.
After manually analyzing the implementation of tcache,
we found that it completely omits all the security checks on
the traditional list of free chunks, by establishing another
layer of free-lists that is used before the original structures.
With this result, HEAPHOPPER exposed the significance
of this design change in ptmalloc. It was able to identify
severe security implications that invalidated the efforts of
former consistency checks. Ultimately, this case study shows
how HEAPHOPPER can be used to systematically identify
critical issues in new additions to an allocator implemen-
tation, with the potential of exposing them before they are
released into production systems.
Since we discovered this issue, we have contacted the
glibc maintainers to make them aware of the security im-
plications of tcache [17].
8 Limitations and Future Work
HEAPHOPPER is affected by limitations regarding both the
used models and the symbolic execution engine.
8.1 Model Limitations
The first limitation of our approach is the need to manually
specify the types of transactions that an attacker can perform.
This limitation has two consequences.
First of all, we cannot reason about transactions that could
be possible in specific attack scenarios, but were not imple-
mented in HEAPHOPPER. Secondly, the bounds we set in
our model may cause HEAPHOPPER to miss other exploita-
tion opportunities. For instance, we are bounding the size
parameters of M, O, and UAF to discrete predefined values,
as shown in Table 1. However, in some cases, using arbitrary
values adaptively for these transactions can be the key to
bypass specific security checks, as it is the case for the house
of force technique, mentioned in Section 7.6.
In addition to arbitrary values for some of the transac-
tions’ parameters, certain known attack techniques, such as
the poisoned NULL byte, require a large amount of transac-
tions until they reach a malicious state in the heap. While
HEAPHOPPER, in theory, does not have a limitation on the
amount of transactions, an increase of this amount will result
in an exponential increase in the number of permutations.
Therefore, in practice, it is necessary to add bounds to the
maximum number of transactions. Due to the mentioned
bounds, HEAPHOPPER is not able to achieve completeness
in a general scenario and does not guarantee the absence of
exploitable heap states.
8.2 Symbolic Execution Limitations
HEAPHOPPER handles symbolic pointers as explained in
Section 5.3. Consequently, the introduced thresholds might
disregard solutions that would reach a new heap state, within
the specified bounds.
Additionally, we are affected by the emulation correctness
of the symbolic execution engine. This could affect the
completeness of HEAPHOPPER’s results, for example, in
case a heap state cannot be reached because of some incorrect
initialization of the initial heap state. Nevertheless, by using
the PoC generation described in Section 6, HEAPHOPPER
allows for the verification of its results by a human analyst.
8.3 PoC Generation Imprecisions
One of HEAPHOPPER’s contributions is the automatic gen-
eration of proof-of-concept programs demonstrating effec-
tive heap metadata corruption exploits. Unfortunately, as
HEAPHOPPER is built on top of the angr binary analy-
sis framework, it suffers from some of the limitations of
the framework itself. These include the assumptions angr
makes about the memory layout (leading to incorrect mem-
ory offsets in the PoC), and limitations that it suffers during
the handling of complex symbolic memory accesses (leading
in over-relaxed constraints in PoC generation). These two
issues cause some of the PoCs generated by HEAPHOPPER
to attempt to read from or write to invalid memory or to pro-
cess incorrect data, resulting in segmentation faults or heap
implementation assertions rather than producing an actual
attack. These issues affect about 5% of the generated PoCs
for the most recent version of ptmalloc and 13% of the
generated PoCs for the most recent version of dlmalloc.
More precisely, the first issue causes valid PoCs to fail
and, since HEAPHOPPER discards all failing PoCs, it will
ultimately cause false negatives. Conversely, the second issue
leads to false positives. In particular, when dealing with fake-
free transactions, the relaxation of the constraints defining the
fake freed chunk can result in a state incorrectly detected
as vulnerable. From testing a subset of PoCs, we estimate the
false positive rate (among the PoCs that do not run properly)
to be between 5% to 10%. The results in Section 7 solely
contain verified, working PoCs.
8.4 Future Work
Implementing additional transactions would allow one to
find weaknesses triggered by specific error conditions. As
USENIX Association
27th USENIX Security Symposium    111
an example, a “single bitflip” transaction could be used to
test the resilience of an allocator against the well-known
rowhammer attack [29].
Increasing the type of possible
transactions and their number may require some changes
to improve the performance of HEAPHOPPER, since the
number of paths to be analyzed would inevitably increase.
In this case, techniques to “cache” already-explored paths
(or part of a path) within our model could be used to both
speed-up the symbolic execution and lower the memory
consumption.
9 Related Work
In this section, we frame our paper in the context of related
work in the field.
Automatic
exploit generation. Our work with
HEAPHOPPER is tangentially related to the field of Auto-
matic Exploit Generation, which focuses on automatically
identifying [10] and exploiting [4, 5, 8, 14, 24, 26, 27, 42, 53]
software vulnerabilities. However, HEAPHOPPER does not
look at the client software that utilizes heap implementations,
but instead assumes that this software will have a vulnerabil-
ity and examines the potential impact of that vulnerability
on the heap.
Heap exploitation. Partially due to the recent progress in
defenses against simpler software exploitation attack vectors
(like stack-based buffer overflows), heap-based exploitation
has become more prevalent. Exploiting invalid-free and use-
after-free vulnerabilities usually requires heap massaging
or Heap Feng Shui, which refers to the action of chaining
multiple basic heap operations to obtain an ideal layout of
allocated chunks in heap memory for the purpose of ex-
ploitation [40, 49]. Work in automated heap layout opti-
mization makes exploiting heap vulnerabilities easier, and
consequently, effective defenses are in greater demand [25].
To battle against these vulnerabilities and exploits, various
mitigation techniques have been proposed. Heap-based ex-
ploitation attempts can be detected during the execution of
a program with some runtime overhead [41]. Furthermore,
the detection of heap-based vulnerabilities and data leaks in
applications has been targeted by research [3, 52]. There
have been attempts to model heap and basic heap opera-
tions like allocate and free in order to guide the automated
exploitation of and defense against heap-based vulnerabili-
ties [35, 51]. To the best of our knowledge, HEAPHOPPER is
the first automated system that performs a systematic analy-
sis of the exploitation mitigations in implementations of heap
allocators.
Automatic heap analysis. While security analysis of
heap operations has been carried out in the past [32, 34, 35,