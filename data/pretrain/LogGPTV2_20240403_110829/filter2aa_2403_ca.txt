loc_7C 
or       
$at, $zero 
loc_30:       
# CODE XREF: main+88 
lw       
$v0, 0x18+var_C($fp) 
lw       
$a0, 0x18+var_10($fp) 
lw       
$a1, 0x18+var_C($fp) 
lw       
$v1, 0x18+var_10($fp) 
or       
$at, $zero 
mult    
$a1, $v1 
mflo     
$a2 
lw       
$v1, (tbl & 0xFFFF)($gp) 
sll      
$v0, 1 
sll      
$a1, $v0, 2 
addu     
$v0, $a1 
addu     
$v0, $a0 
sll      
$v0, 2 
addu     
$v0, $v1, $v0 
sw       
$a2, 0($v0) 
lw       
$v0, 0x18+var_10($fp) 
or       
$at, $zero 
addiu    
$v0, 1 
sw       
$v0, 0x18+var_10($fp) 
loc_7C:       
# CODE XREF: main+28 
lw       
$v0, 0x18+var_10($fp) 
or       
$at, $zero 
slti     
$v0, 0xA 
bnez     
$v0, loc_30 
or       
$at, $zero 
lw       
$v0, 0x18+var_C($fp) 
or       
$at, $zero 
addiu    
$v0, 1 
sw       
$v0, 0x18+var_C($fp) 
loc_A0:       
# CODE XREF: main+1C 
lw       
$v0, 0x18+var_C($fp) 
or       
$at, $zero 
slti     
$v0, 0xA 
bnez     
$v0, loc_24 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 18 章  数    组 
269 
or       
$at, $zero 
move     
$v0, $zero 
move     
$sp, $fp 
lw       
$fp, 0x18+var_4($sp) 
addiu    
$sp, 0x18 
jr       
$ra 
or       
$at, $zero 
.comm tbl:0x64            
# DATA XREF: main+4C 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 1199 章
章    位
位    操
操    作
作  
有很多程序都把输入参数的某些比特位当作标识位处理。在表面看来，使用布尔变量足以替代标志位
寄存器，但是这种替代的做法并不理智。 
19.1 特定位 
19.1.1 x86 
Win32 的 API 中有这么一段接口声明： 
    HANDLE fh; 
    fh=CreateFile ("file", GENERIC_WRITE | GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_ALWAYS ,  
    FILE_ATTRIBUTE_NORMAL, NULL); 
经过 MSVC 2010 编译，可得到如下所示的指令。 
指令清单 19.1  MSVC 2010 
    push    0 
    push    128  
; 00000080H 
    push    4 
    push    0 
    push    1 
    push    -1073741824 
; c0000000H 
    push    OFFSET $SG78813 
    call    DWORD PTR __imp__CreateFileA@28 
    mov     DWORD PTR _fh$[ebp], eax 
库文件 WinNT.h 对有关常量的相关位域进行了定义。 
指令清单 19.2  WinNT.h 
#define GENERIC_READ  
(0x80000000L) 
#define GENERIC_WRITE  
(0x40000000L) 
#define GENERIC_EXECUTE 
(0x20000000L) 
#define GENERIC_ALL 
(0x10000000L) 
毫无疑问，在 API 声明里，CreatFile()函数的第二个参数为“GENERIC_READ | GENERIC_WRITE” = 
0x80000000 | 0x40000000 = 0xC0000000。 
CreatFile()函数如何检测标志位呢？ 
我们可以在 Windows XP SP3 x86 的 KERNEL32.DLL 中，找到 CreateFileW()函数的相关代码。 
指令清单 19.3  KERNEL32.DLL (Windows XP SP3 x86) 
.text:7C83D429  test     
byte ptr [ebp+dwDesiredAccess+3], 40h 
.text:7C83D42   Dmov      
[ebp+var_8], 1 
.text:7C83D434  jz       
short loc_7C83D417 
.text:7C83D436  jmp      
loc_7C810817 
比较讲究的是 TEST 指令。在这里，它没有整个使用第二个参数，而是仅仅拿它数权最高的头一个字
节（ebp+dwDesiredAccess+3）和 0x40（对应 GENERIC_WRITE 标志）进行与运算。 
TEST 与 AND 指令的唯一区别是前者不保存运算结果，CMP 指令和 SUB 指令之间也存在这种差别（请
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 19 章  位  操  作 
271 
参见本书 7.3.1 节）。 
即，上述可执行的程序源代码逻辑是： 
if ((dwDesiredAccess&0x40000000) == 0) goto loc_7C83D417 
如果此处的与运算（&）的结果是 1，则会清零 ZF 标志位，而不会触发 JZ 跳转。只有在 dwDesiredAccess
变量与 0x40000000 的计算结果为 0 的情况下，条件转移指令才会被触发；即与运算（&）的结果是零、ZF
标志位为 1，从而触发条件转移指令。 
如果使用 Linux 的 GCC 4.4.1 编译下面的代码： 
#include  
#include  
void main()  
{ 
  int handle; 
  handle=open ("file", O_RDWR | O_CREAT); 
}; 
得到的汇编指令会如下所示。 
指令清单 19.4  GCC 4.4.1 
public main 
main       proc near 
var_20       = dword ptr -20h 
var_1C       = dword ptr -1Ch 
var_4        = dword ptr -4 
push    ebp 
            mov     ebp, esp 
and     esp, 0FFFFFFF0h 
sub     esp, 20h 
mov     [esp+20h+var_1C], 42h 
mov     [esp+20h+var_20], offset aFile ; "file" 
call    _open 
mov     [esp+20h+var_4], eax 
leave 
retn 
main       endp 
在库文件 libc.so.6 里，open()函数只是调用 syscall 而已。 
指令清单 19.5  open() (libc.so.6) 
.text:000BE69B             
mov  edx, [esp+4+mode] ; mode 
.text:000BE69F  
mov  ecx, [esp+4+flags] ; flags 
.text:000BE6A3  
mov  ebx, [esp+4+filename] ; filename 
.text:000BE6A7  
mov  eax, 5 
.text:000BE6AC  
int  80h       ; LINUX - sys_open 
可见，在执行 Open()函数时，Linux 内核会检测某些标识位。 
当然，我们可以下载 Glibc 和 Linux 内核源代码来一窥究竟。但是本文旨在粗略地介绍原理，就不逐
行地解释代码了。 
在 Linux 2.6 中，当程序通过 syscall 调用 sys_open 的时候，它调用的函数实际上是内核函数 do_sys_open()。
在执行函数 do_sys_open()的时候，系统又会调用 do_filp_open() 函数。有兴趣的读者，可以在 Linux 内核
源代码里的 fs/namei.c 里找到这部分内容。 
编译器不仅会使用栈来传递参数，它还会使用寄存器传递部分参数。编译器最常采用的函数调用约定
是fastcall（参见 6.4.3 节）。这个规范优先使用寄存器来传递参数。这使得CPU不必每次都要访问内存里的
异步社区会员 dearfuture(15918834820) 专享 尊重版权
272 
逆向工程权威指南（上册） 
数据栈，大大提升了程序的运行效率。此外，我们可以通过GCC的regparm选项
①
在Linux 2.6 内核的编译选项中，设定了寄存器选项“-mregparm=3”。
，设置传递参数的寄存器
数量。 
②
19.1.2 ARM 
这个选项决定，编译器首先通过 EAX、EDX 和 ECX 寄存器传递函数所需的头 3 个参数，再通过栈传
递其余的参数。当然，如果参数的总数不足 3 个，它只会用到部分寄存器。 
在 Ubuntu 里下载 Linux Kernel 2.6.31，并用“make vmlinux”指令编译，然后使用 IDA 打开程序，寻
找函数 do_filp_open()。这个函数的开头部分大体是这样的。 
指令清单 19.6  do_filp_open() (Linux kernel 2.6.31) 
do_filp_open     proc near 
......  
push    ebp 
mov     ebp, esp 
push    edi 
push    esi 
push    ebx 
mov     ebx, ecx 
add     ebx, 1 
sub     esp, 98h 
mov     esi, [ebp+arg_4] ; acc_mode (5th arg) 
test    bl, 3 
mov     [ebp+var_80], eax ; dfd (1th arg) 
mov     [ebp+var_7C], edx ; pathname (2th arg) 
mov     [ebp+var_78], ecx ; open_flag (3th arg) 
jnz     short loc_C01EF684 
mov     ebx, ecx        ; ebx <- open_flag 
函数序言部分，GCC 就把 3 个寄存器里的参数值存储在栈里。若非如此，那么后续程序可能出现寄
存器不够使用的资源紧张问题。 
我们再来看下 do_filp_open()函数的另外一段代码。 
指令清单 19.7  do_filp_open() (Linux kernel 2.6.31) 
loc_C01EF6B4:                    
; CODE XREF: do_filp_open+4F 
test    bl, 40h      ; O_CREAT 
jnz     loc_C01EF810 
mov     edi, ebx 
shr     edi, 11h 
xor     edi, 1 
and     edi, 1 
test    ebx, 10000h 
jz      short loc_C01EF6D3 
or      edi, 2 
汇编宏 O_CREAT 的值就是 0x40h。TEST 指令检查 open_flag 里是否存在 0x40 的标志位，如果这个位
是 1，则会触发下一条 JNZ 指令。 
在 Linux Kernel 3.8.0 平台的系统里，O_CREAT 的检查操作有所不同。 
指令清单 19.8  Linux kernel 3.8.0 
struct file *do_filp_open(int dfd, struct filename *pathname, 
const struct open_flags *op) 
① http://ohse.de/uwe/articles/gcc-attributes.html#func-regparm。 
② 参见：http://kernelnewbies.org/Linux_2_6_20#head- 042c62f290834eb1fe0a1942bbf5bb9a4accbc8f 以及源代码文件。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 19 章  位  操  作 
273 
{ 
... 
  filp = path_openat(dfd, pathname, &nd, op, flags | LOOKUP_RCU); 
... 
} 
static struct file *path_openat(int dfd, struct filename *pathname, 
struct nameidata *nd, const struct open_flags *op, int flags) 
{ 
... 
  error = do_last(nd, &path, file, op, &opened, pathname); 
... 
} 
static int do_last(struct nameidata *nd, struct path *path, 
   struct file *file, const struct open_flags *op, 
   int *opened, struct filename *name) 
{ ... 
  if (!(open_flag & O_CREAT)) { 
    ... 
error = lookup_fast(nd, path, &inode); 
    ... 
  } else { 
    ... 
error = complete_walk(nd); 
  } 
... 
}  
使用 IDA 打开 ARM 模式的内核程序，可以看到 do_last()函数的代码如下所示。 
指令清单 19.9  do_last() (vmlinux) 
... 
.text:C0169EA8    
MOV  
R9, R3  ; R3 - (4th argument) open_flag 
... 
.text:C0169ED4    
LDR  
R6, [R9] ; R6 - open_flag 
... 
.text:C0169F68    
TST  
R6, #0x40 ; jumptable C0169F00 default case 
.text:C0169F6C    
BNE  
loc_C016A128 
.text:C0169F70    
LDR  
R2, [R4,#0x10] 
.text:C0169F74    
ADD  
R12, R4, #8 
.text:C0169F78    
LDR  
R3, [R4,#0xC] 
.text:C0169F7C    
MOV  
R0, R4 
.text:C0169F80    
STR  
R12, [R11,#var_50] 
.text:C0169F84    
LDRB  