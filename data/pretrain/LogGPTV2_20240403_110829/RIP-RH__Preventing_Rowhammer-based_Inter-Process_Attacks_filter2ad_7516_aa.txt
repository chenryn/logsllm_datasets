title:RIP-RH: Preventing Rowhammer-based Inter-Process Attacks
author:Carsten Bock and
Ferdinand Brasser and
David Gens and
Christopher Liebchen and
Ahmad-Reza Sadeghi
RIP-RH: Preventing Rowhammer-based Inter-Process Attacks
Carsten Bock
Technische Universität Darmstadt
PI:EMAIL
Ferdinand Brasser
Technische Universität Darmstadt
PI:EMAIL
David Gens
Technische Universität Darmstadt
PI:EMAIL
Christopher Liebchen
Technische Universität Darmstadt
PI:EMAIL
Ahmad-Reza Sadeghi
Technische Universität Darmstadt
PI:EMAIL
ABSTRACT
Run-time attacks pose a continuous threat to the security of com-
puter systems. These attacks aim at hijacking the operation of a
computer program by subverting its execution at run time. While
conventional run-time attacks usually require memory-corruption
vulnerabilities in the program, hardware bugs represent an increas-
ingly popular attack vector. Rowhammer represents a vulnerability
in the design of DRAM modules that allows an adversary to mod-
ify memory locations in physical proximity to attacker-controlled
memory on the module without accessing them. This is a serious
threat to real-world systems, since DRAM is used as main memory
on virtually all platforms.
Recent research proposed defenses against rowhammer, such by
patching the memory controller in hardware, or statically partition-
ing physical memory to protect the operating system kernel from
a user space adversary. However, sharing DRAM memory securely
between a number of different entities currently remains as an
open problem. In this paper, we present RIP-RH, a DRAM-aware
memory allocator that allows for dynamic management of multiple
user-space processes. RIP-RH ensures that the memory partitions
belonging to individual processes are physically isolated. In our
detailed evaluation we demonstrate that our prototype implemen-
tation of RIP-RH incurs a modest run-time overhead of 3.17% for
standard benchmarks and offers practical performance in a number
of real-world scenarios.
ACM Reference Format:
Carsten Bock, Ferdinand Brasser, David Gens, Christopher Liebchen, and Ahmad-
Reza Sadeghi. 2019. RIP-RH: Preventing Rowhammer-based Inter-Process
Attacks. In ACM Asia Conference on Computer and Communications Security
(AsiaCCS ’19), July 9–12, 2019, Auckland, New Zealand. ACM, New York, NY,
USA, 12 pages. https://doi.org/10.1145/3321705.3329827
1 INTRODUCTION
Memory-corruption vulnerabilities pose a continuous threat to the
security of modern computer systems. Attackers exploit these vul-
nerabilities to introduce malicious behavior to benign applications.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6752-3/19/07...$15.00
https://doi.org/10.1145/3321705.3329827
Traditionally, these vulnerabilities are caused by programming er-
rors [4, 6, 26, 31]. In the infamous case of rowhammer, however,
researchers demonstrated an attack that exploits a weakness in
DRAM chips to corrupt memory—even in the absence of any soft-
ware vulnerabilities [14]. While initially termed by manufacturers
to describe a glitch caused by electromagnetic coupling effects, they
found that the repetitive access of the same memory cells can in-
fluence the content of physically neighboring memory cells which
leads to bit flips, i.e., modification without access.
Rowhammer is particularly dangerous because it enables at-
tackers to bypass any virtual memory isolation or memory-access
permissions. Hence, it comes with no surprise that rowhammer is
an effective technique to implement privilege escalation attacks.
Seaborn and Dullien [27] were the first to demonstrate how the
attacker can exploit the rowhammer vulnerability to flip bits in
page table, which is a data structure to configure memory permis-
sions. As a consequence, the attacker gains full control over the
page table, and thus, the attacked system. Subsequently, researchers
demonstrated the power of rowhammer attacks by exploiting the
vulnerability to attack virtual machines in the cloud [25, 35], and
even demonstrated that the rowhammer bug can be triggered from
the browser [2, 11], and on other architectures than x86 [33].
Due to the nature of the rowhammer vulnerability it can only
be fixed by modifying the hardware design. However, in the mean-
time, researchers suggested a number of software-based defenses
to mitigate the effects of rowhammer. Aweke et al. [1] proposed
to detect rowhammer-based attacks by monitoring the system’s
hardware-performance counters to detect a high number of cache
misses. Although the approach incurs only a small run-time over-
head it represents only a probabilistic defense, and hence, suffers
from false positives.
Partitioning physical memory was proposed as an alternative
approach, and related work demonstrated an isolation policy that
protects the operating system from an user-space adversary. In par-
ticular, CATT [3] proposed a kernel extension that enforces physical
isolation of user and kernel to ensure that attacker-controlled user
memory cannot corrupt kernel memory (e.g., page tables). However,
their mitigation is limited to two domains, kernel and user, and
physically isolating a higher number of entities in system mem-
ory dynamically at run time currently remains an open problem.
ZebRAM [15] extends the idea of physical memory isolation by
statically inserting guard rows in memory.
Recently Gruss et al. [10] demonstrated that breaking the iso-
lation between user and kernel memory might not be required in
practice for an user-space adversary to escalate privileges: in par-
ticular, they showed that flipping bits in one of the setuid binaries
Session 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand561allows malicious users to elevate their privileges to root. We can
already see such attacks becoming increasingly relevant, as attack-
ers start to improve their primitives, e.g., by accelerating remote
rowhammer attacks using GPUs to attack the browser on mobile
devices [8].
For this reason, we present RIP-RH, the first DRAM-aware mem-
ory allocator that enables physical isolation of individual user pro-
cesses running concurrently on the system. While security-aware
memory allocators have been studied for a long time to harden
existing systems against software-based memory-corruption at-
tacks [16, 20, 29], we propose to harden existing allocators by dy-
namically safe-guarding adjacent pages based on the allocating
process.
Dynamically managing multiple isolation domains poses a num-
ber of difficult challenges such as management of a potentially high
number of processes, frequent and dynamic reallocation, and min-
imizing fragmentation. As we will show our design tackles all of
these challenges by carefully adopting an over-allocation of mem-
ory pages to effectively protect against bit flips from surrounding
rows by using guard pages located directly above and below the
target row in DRAM.
We implemented our prototype of RIP-RH for Linux and thor-
oughly evaluated our implementation using a number of bench-
marks and real-world applications. We tested our prototype in
various real-world scenarios, for instance, by marking all setuid
programs on a recent Ubuntu 16.04 machine as critical. We were
able to verify that this successfully prevents physical co-location of
attacker-controlled memory in the kernel’s page cache. Our solution
is compatible with standard system configurations and orthogonal
to existing isolation defenses, e.g., against speculative execution
attacks. As our isolation works in the physical memory domain, it
does not interfere in any way with defenses against Meltdown [18],
which operate in virtual memory.
To summarize, our main contributions are:
• We present RIP-RH, a DRAM-aware memory allocator to
physically isolate process memory and deterministically de-
fend against rowhammer-based attacks without requiring
hardware changes. Our design is transparent to user space
and does not disrupt legacy applications.
• We implement our isolation-based allocator as an extension
to the physical page allocator in Linux to enforce our mit-
igation for all processes on the system. RIP-RH enables an
isolation between different user processes in general and
between user and kernel as a special case. This ensures that
attackers cannot flip bits in memory that does not belong to
them.
• We rigorously analyze RIP-RH’s security by reimplement-
ing the exploit steps that are necessary to force physical
co-location (e.g, as described by Gruss et al. [10] in their
recent user-level root exploit). In our extensive tests we
demonstrate that the attacks no longer succeed in allocating
neighboring memory when isolating the victim processes
(such as the setuid binaries).
• We thoroughly evaluate the performance, robustness and
usability of RIP-RH in a number of benchmarking scenarios
and real-world applications. Our performance measurements
Figure 1: DRAM modules are highly standardized, consist-
ing of multiple hierarchically components.
indicate that our prototype already offers practical perfor-
mance for typical use cases such as server applications and
web browsers.
2 BACKGROUND
In this Section we briefly cover the concepts necessary for the
understanding of the remainder of this paper. Firstly, we introduce
technical background on DRAM, and secondly give an overview of
existing rowhammer-based attacks and defenses.
2.1 DRAM Basics
Synchronous Dynamic Random Access Memory (SDRAM, or simply
DRAM) is a clocked integrated circuit component that implements
parallelizable volatile memory on a chip. Due to its comparatively
low manufacturing costs, DRAM chips represent the most widely
used implementation of main memory for computer systems today.
As such, the design for DRAM is highly standardized, with both
the DDR3 and DDR4 standards combined accounting for 97% of the
market share in 2017 [12].
While there are different form factors for servers, desktops, lap-
tops, and mobile devices, the conceptual design is the same, as
depicted in Figure 1: one or two DRAM modules are connected via
a channel to the mainboard. Each module consists of 1 or 2 ranks,
which correspond to the front and back of a Dual Inline Memory
Module (DIMM). Each rank in turn consists of a number of chips,
which contain banks. Each bank comprises rows, which contain
the individual memory cells that hold the electrical charge corre-
sponding to the stored bit. A memory cell can be implemented in
hardware by connecting a transistor (as switch) to a capacitor (as
single-bit storage).
Memory accesses to separate banks can be parallelized and in-
terleaved, however, within a bank access is only possible per row.
During a read operation the charge from all cells in a row is trans-
ferred to the row buffer of that bank. The bits are then forwarded
to the rank, channel, and finally the memory bus. Afterwards, the
charge is written back to the row to restore its original state. Be-
cause the charge of the capacitor also degrades naturally over time,
DRAM requires a continuous refresh operation, with typical refresh
intervals of 32ms or 64ms. Since there can be only one row buffer
for every bank, it represents a bottle neck for the access latency of
the module.
The physical address space of the memory as seen by devices
and the processor serves as an abstraction from these low-level
implementation details of the hardware, and hence, they are usually
not visible to the software. The memory controller implements
ChannelModule...ChipBankRankRowCellCellCellCellRowCellCellCellCellRow BuﬀerRowCellCellCellCell...Session 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand562kernel privileges from a user process. The sandbox escape was
achieved by flipping bits in the target address of a restricted jmp
instruction. The kernel privilege escalation exploited bit flips in
kernel memory by creating a huge number of virtual mappings to
spray the physical memory with page table entries. A bit flip at the
correct position in a page table entry then allows an adversary to
re-map the kernel as writable and take over the system.
Subsequently, several possible defenses were proposed, however,
most require changes to the hardware or suffer from false positives
and we discuss them in detail in section 9. To thwart rowhammer
attacks on kernel memory Brasser et al. [3] recently presented an
isolation-based defense against rowhammer by partitioning the
physical memory into two security domains purely in software.
By leveraging knowledge about the mapping between physical ad-
dresses and DRAM structures it is possible to isolate kernel memory
within a dedicated region in DRAM. Consequently, the attacker
can no longer induce bit flips in kernel memory from user space
processes. However, their defense is designed for the special case
of two domains, i.e., kernel and user land, and there are significant
challenges when isolating a larger number of domains.
Figure 2: An adversary controlling one process can mod-
ify physical memory of other processes by exploiting the
Rowhammer bug despite an isolation policy being enforced
in virtual memory.
a physical-to-DRAM mapping that is intended to distribute the
load between different DRAM structures and improve performance.
This means, that while physical memory is addressed sequentially,
consecutive memory pages can be mapped onto different rows,
banks, etc.
2.2 Existing Attacks and Defenses
Similar to processor feature sizes, DRAM chip area has been de-
creased by manufacturers through increasing density of memory
cells per chip to offer higher capacity, parallelism, and through-
put. While memory errors have always been a randomly occurring
phenomenon in microelectrical circuitry,1 recent feature sizes ap-
proach less than 10nm, and electromagnetic coupling effects in the
form of capacitive or inductive crosstalk are becoming increasingly
problematic.
Kim et al. [14] were the first to systematically analyze what was
considered mostly a reliability problem by manufacturers and dis-
covered that by repeatedly accessing one row they were able to
influence contents of memory cells from neighboring rows within
the same bank (hence, the term row-hammer). In their study they
found the behavior to be reproducible from software on a large
number of (mostly 2GB) memory modules across different manu-
facturers.
Yet, rowhammer is not just a reliability issue, but has significant
repercussions for security as well, as it leaves systems vulnerable
to a range of dangerous attacks. The general workflow of such
an attack is depicted in Figure 2: an adversary with some limited
access2 to the system is confined I , e.g., by means of de-privileging
and MMU-based isolation in virtual memory. Hence, any attempted
access to isolated system entities (such as the sandbox, another
process, the kernel, or the hypervisor) is prevented. However, by
allocating II or otherwise obtaining access to memory that is physi-
cally adjacent to victim memory in the DRAM module, the attacker
can exploit the rowhammer effect to corrupt its contents III .
Consequently, rowhammer was quickly picked up by the security
community and researchers demonstrated two row-hammer-based
exploits [27] by breaking out of the Chrome sandbox and gaining
1For instance, through thermal conditions, alpha particles from natural decay, or
cosmic rays [19].
2In this case the attacker has access to a user process, but in principle this could also
be a VM-guest or a sandboxed script in a document viewer or browser.
3 THREATMODEL
Our threat model is derived from and in line with the related work
in this field [1–3, 11, 14, 24, 25, 27, 33, 35]:
has been reverse engineered.
• The attacker has full control over a user-space process and
can execute code, allocate memory, and utilize kernel ser-
vices through system calls.
• The physical-to-DRAM mapping is publicly documented or
• The operating system has sole privileged access to the ma-
chine and cannot be corrupted through rowhammer, since
its memory is isolated (e.g., through the partitioning scheme
described in [3]).
• The OS and processes are isolated from each other, which is
enforced through different address spaces in virtual memory,
and the memory-management units (MMU, I/O-MMU) are
configured accordingly.
• The main memory of the system is vulnerable to rowham-
mer.
In this setting the goal of an adversary is to compromise another
process, e.g., to elevate privileges, gain control over some service,
or corrupt its data. While run-time attacks through exploitation
of memory-corruption vulnerabilities represent real-world threats,
we treat software-based attacks as an orthogonal problem [5–7, 9,
17, 21, 23, 30].
4 DESIGN
In this section we present the design of RIP-RH. We first give a brief
overview of its structure and workflow. Secondly, we present how
to isolate dynamic process memory physically. Finally, we highlight
the main challenges that RIP-RH tackles.
4.1 Overview
The main goal of RIP-RH is to enable physical isolation for user
space processes. To this end, we devise an interface for managing
the startup, isolation policy to be used, and tear-down of critical
CoreMMUPhysicalMemoryDRAM BankUser AUser BCoreUser BUser A⛔111101000100111100011111IIIIIISession 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand563Figure 3: Our design of RIP-RH incorporates components for (1) managing process-owned memory and isolation policies, (2)
an interface for running isolated processes, (3) a DRAM-aware physical page allocator, and (4) a partitioning scheme to thwart
inter-process rowhammer attacks, such as opcode flipping [10]. Critical processes can be started from the domain manager,
in this case user process B is configured to be isolated from the attacking process A. Consequently, its allocated pages will
be allocated from the free lists in such a way, that guard pages remain above and below its physical row index on the DRAM
module.
processes, i.e., programs that should be isolated physically in DRAM
by the system at run time. Figure 3 depicts a high-level overview
of RIP-RH.
The first component, the Domain Manager I , extends the OS
to add the notion of a critical process, i.e., a user-space process
that should be isolated from all other processes.3 It also provides
services to user space for starting, stopping, and managing such
processes. There are different possible configuration options for the