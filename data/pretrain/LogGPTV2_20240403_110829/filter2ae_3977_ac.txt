            }
        }
**规避建议**
本问题是对以太坊可能面临的威胁的一种探讨，目前作者尚未发现真实案例，这个留作开放问题来探讨。
### **自毁漏洞**
**漏洞介绍**
Solidity有自毁函数selfdestruct()，该函数可以对创建的合约进行自毁，并且可以将合约里的Ether转到自毁函数定义的地址中。
如果自毁函数的参数是一个合约地址，自毁函数不会调用参数地址的任何函数，包括fallback
函数，最终被销毁合约的Ether成功转到参数地址。如果此销毁特性被攻击者利用，就会发生安全问题。
**漏洞示例**
尚未发现利用此特性导致的真实攻击示例。但预测此漏洞更容易出现在使用this.balance作为判断依据的合约中，因为selfdestruct()转移的金额会加到this.balance中。
另一潜在威胁的场景是利用此漏洞预先发送Ether到尚未创建的合约地址上。等地址创建后，发送的Ether就存在于该地址上。这一场景暂时未导致安全问题。
**规避建议**
自毁漏洞发生的主要原因是目标合约对this.balance使用不当。建议使用自定义变量，即使有恶意Ether强行转入，也不会影响自定义变量的值。
### **影子变量漏洞**
**漏洞介绍**
在Solidity中，有storage和memory两种存储方式。storage变量是指永久存储在区块链中的变量；memory变量的存储是临时的，这些变量在外部调用结束后会被移除。
但是在一些低版本上，Solidity对复杂的数据类型，如array，struct在函数中作为局部变量是，会默认存储在storage当中。会产生安全漏洞。目前自
0.5.x版本已经强制开发者指定存储位置。
**漏洞示例**
以下代码unlocked存在slot0中registRecord存在 slot1 中。newRecord默认存在 storage
中，指向slot0.那么newRecord.name和 newRecord.addr分别指向slot0和slot1.
    pragma solidity 0.4.26;
    contract Shadow {
        bool public unlocked = false;   // slot0
        struct Record{
            bytes32 name;
            address addr;
        }
        mapping(address => Record) public registRecord; //slot1
        event Log(address addr, bool msg);
        function regist(bytes32 _name, address _addr) public {
            Record newRecord; 
            newRecord.name = _name; // slot0
            newRecord.addr = _addr; // slot1
            emit Log(msg.sender, unlocked);
        }
    }
**攻击步骤**
攻击者传入_name参数，值不为0，即可覆盖 unlocked的值，把unlocked置为1。
**规避建议**
使用高版本的编译器。从0.5.x以上，编译器就会强制开发者指定存储位置。把newRecord存储在memory 中，即可避免此类问题。
### **短地址漏洞**
**漏洞介绍**
一般ERC-20 TOKEN标准的代币都会实现transfer方法，这个方法在ERC-20标签中的定义为：function transfer(address
to, uint tokens) public returns (bool success);
第一参数是发送代币的目的地址，第二个参数是发送token的数量。
当我们调用transfer函数向某个地址发送N个ERC-20代币的时候，交易的input数据分为3个部分：
4 字节，是方法名的哈希：a9059cbb
32字节，放以太坊地址，目前以太坊地址是20个字节，高位补0
000000000000000000000000abcabcabcabcabcabcabcabcabcabcabcabcabca
32字节，是需要传输的代币数量，这里是1*1018 GNT
0000000000000000000000000000000000000000000000000de0b6b3a7640000
所有这些加在一起就是交易数据：
a9059cbb000000000000000000000000abcabcabcabcabcabcabcabcabcabcabcabcabca0000000000000000000000000000000000000000000000000de0b6b3a7640000
短地址攻击是指用ABI调用其他合约的时候，特意选取以00结尾的地址，传入地址参数的时候省略最后的00，导致EVM在解析数量参数时候对参数错误的补0，导致超额转出代币。
**漏洞示例**
**以如下合约为例：**
    contract MyToken {
        mapping (address => uint) balances;
        event Transfer(address indexed _from, address indexed _to, uint256 _value);
        function MyToken() {
            balances[tx.origin] = 10000;
        }
        function sendCoin(address to, uint amount) returns(bool sufficient) {
            if (balances[msg.sender] 
### **提前交易漏洞**
**漏洞介绍**
简单来说，“提前交易”就是某人提前获取到交易者的具体交易信息（或者相关信息），抢在交易者完成操作之前，通过一系列手段（通常是危害交易者的手段，如提高报价）来抢在交易者前面完成交易。
**漏洞示例**
有个MathGame的合约，设置了一些 puzzle，如果有人回答正确就可以得到一定的奖励。
图片来源 seebug
**攻击步骤**
图片来源 seebug
有个用户成功解出了题目， 并发送答案到 MathGame
合约。攻击者一直在扫描交易池并且发现了答案，攻击者就提高了手续费，把答案发送出去。矿工因为攻击者付的手续费更多，优先打包了攻击者的交易。攻击者就窃取了他人的成果。
**规避方法**
合约编写者要充分考虑这种提前交易或者条件竞争的情景，在编写合约的时候事先想好应对措施。比如设置答题序号，并延迟发送奖励，比如延迟到次日发送奖励。先把收集到的答案缓存起来，如果有更早序号的正确答案的交易过来，就把当前答案的发送者用更早的答案的发送者替换掉。因为延迟到次日开奖，考虑到成本，攻击者不可能一直阻塞矿工打包更早答案的交易。
本文主要介绍了以太坊平台常见的漏洞类型。不排除还存在其他的威胁类型本文没有收录，欢迎大家随时反馈。
本系列后续的文章之下集也会在本周及时更新，欢迎关注。
## **参考文献**
1.
2.[https://mp.weixin.qq.com/s?__biz=MzU4ODQ3NTM2OA==&mid=2247483952&idx=1&sn=e09712da8b943b983a847878878b5f70&chksm=fddd7cb7caaaf5a1e3d4d781ee785e25dcef30df5c2c050fd581e4c4d5fb1027c1bbe02961e9&scene=21](https://mp.weixin.qq.com/s?__biz=MzU4ODQ3NTM2OA==&mid=2247483952&idx=1&sn=e09712da8b943b983a847878878b5f70&chksm=fddd7cb7caaaf5a1e3d4d781ee785e25dcef30df5c2c050fd581e4c4d5fb1027c1bbe02961e9&scene=21)
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17.
18.
19.《区块链安全入门与实战》第3 章. 刘林炫. 北京. 机械工业出版社.
扫码关注蚂蚁安全实验室微信公众号，干货不断！
* * *