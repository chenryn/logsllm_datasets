Steganography in Commonly 
Used HF Radio Protocols
@pdogg77     @TheDukeZip
pdogg
● Paul / pdogg / 
@pdogg77
● Day Job: Security 
Researcher at Confer 
Technologies Inc.
● Hobby: Licensed as 
an amateur radio 
operator in 1986, 
ARRL VE
● This is my second 
trip to DEF CON
thedukezip
● Brent / thedukezip / @thedukezip
● Software & 
Systems Engineer (RF)
● Licensed ham radio op 
since 2006, ARRL VE
Why You Shouldn't Do This And 
Why We Didn't Do It On The Air
FCC Regulations (Title 47 – Part 97)
§ 97.113 Prohibited transmissions.
(a) No amateur station shall transmit:
…
(4) Music using a phone emission except as specifically 
provided elsewhere in this section; communications intended 
to facilitate a criminal act; messages encoded for the purpose 
of obscuring their meaning, except as otherwise provided 
herein; obscene or indecent words or language; or false or 
deceptive messages, signals or identification.
How This Project Started... 
Final Warning Slide...
● Hackers + Drinks = Project
● WANC - We are not cryptographers
● We are not giving cryptographic advice
● You should talk to a cryptographer
● If you are a cryptographer, we welcome your 
input
What?
We set out to demonstrate it was possible (or 
impossible) to create a:
● Low Infrastructure
● Long Range
● Covert
● Point to Point, Broadcast or Mesh
● Short Message Protocol
Using existing consumer radio and computer 
equipment, leveraging a commonly used digital mode
Why?
● Avoid censorship
● Avoid spying
● We believe you have the right to communicate 
without this interference
● You COULD use our method to communicate, 
OR use similar techniques to create your own 
method
… Or “The Terrorists”
No Internet?
Amateur radio operators have expertise in this!
Amateur Radio
● Many frequency bands reserved for amateur 
radio operators to communicate
● Voice chat, digital modes...
● Take a multiple choice test to get licensed
● Reminder: The rules say you can't do what 
we're showing you...
AirChat
● Anonymous 
Lulzlabs
● Encrypted 
communication in 
plain sight
● Cool project with a 
different purpose
● Also breaks the 
rules
Good Steganography / Good 
OPSEC
● … means hiding well in plain sight.
● Invisible to normal users
● “Plausible deniability”
● Not this → 
More Like This
Ways to Hide...    
● Protocol features (headers, checksums etc)
● Timing or substitution 
● Errors
● No “spurious emissions” etc... (against the 
rules, obvious, very “visible”)
● Candidate Protocol must:
… be in widespread common use
… have places to hide
… be relatively power efficient
Need no special hardware or closed software
Popular Sound Card Digital Modes
● RTTY
– In use on radio since at least 
the 1920s
– Baudot code – 5 bit symbols 
with a stop and a shift – 
“mark and space”
– Amateurs almost always 
use a 45 baud version with 
170hz carrier shift
– Limited character set
● PSK31 etc.
– Phase shift keying 31 
baud... 
– Developed by Peter 
Martinez G3PLX in 1998
– VERY tight protocol - 
“Varicode”
JT65
● Developed by Joe Taylor – K1JT – 2005
● Original paper: “The JT65 Communications 
Protocol”
● Designed for Earth-Moon-Earth 
communications. Also now widely used for 
skywave contacts
● Very power efficient
● Structured communication, very low data rate
● Open source implementation
JT65 Conversations
Some Common 
HF Ham Freqs:
   20m 14.076MHz
   15m 21.076MHz
   10m 28.076MHz
   Upper Side Band
Some JT65 Technical Details
Some JT65 Technical Details
User Message
Some JT65 Technical Details
User Message
Some JT65 Technical Details
User Message
Source Encoding
Some JT65 Technical Details
User Message
Source Encoding
Some JT65 Technical Details
FEC
User Message
Source Encoding
Some JT65 Technical Details
FEC
User Message
Source Encoding
Some JT65 Technical Details
FEC
User Message
Source Encoding
Some JT65 Technical Details
FEC
User Message
Source Encoding
Some JT65 Technical Details
FEC
User Message
Source Encoding
Matrix Interleaving
Some JT65 Technical Details
User Message
Source Encoding
FEC
Matrix Interleaving
Some JT65 Technical Details
User Message
Source Encoding
FEC
Matrix Interleaving
Gray Coding
Some JT65 Technical Details
User Message
Source Encoding
FEC
Matrix Interleaving
Gray Coding
Audio
● JT65 “packet” sliced into 126 .372s intervals – 47.8s
● 1270.5 Hz sync tone - “pseudo-random synchronization 
vector” 
● Symbols - 1270.5 + 2.6917(N+2)m Hz
– N is the integral symbol value, 0 ≤ N ≤ 63
– m assumes the values 1, 2, and 4 for JT65 sub-modes A, 
B, and C
Hiding in Reed Solomon Codes
● Exploit error correction!
● Easy/PoC Mode: Shove in some errors... :) 
(static “key”)
● Medium mode: Shove in errors, add some 
random cover
● Hard Mode: Encrypt and pack message, add 
FEC
●  Prior Work: Hanzlik, Peter “Steganography in 
Reed-Solomon Codes”, 2011
Encoding Steganography (Basic)
Steg: DEF CON 22
Encoding Steganography (Basic)
Steg: DEF CON 22
Source Encoding: 
Encoding Steganography (Basic)
Steg: DEF CON 22
Source Encoding: 
FEC:
Can tolerate 4 errors 
Hiding Steganography
Key: pdogg thedukezip
Generate 20 'locations' based on SHA512
Hiding Steganography
Key: pdogg thedukezip
Generate 20 'locations' based on SHA512
Injecting Errors
JT65: KB2BBC KA1AAB DD44
Injecting Errors
JT65: KB2BBC KA1AAB DD44
Steg: DEF CON 22
Injecting Errors
JT65: KB2BBC KA1AAB DD44
Steg: DEF CON 22
Key: pdogg thedukezip
Injecting Errors
JT65: KB2BBC KA1AAB DD44
Steg: DEF CON 22
Key: pdogg thedukezip
Injecting Errors
JT65: KB2BBC KA1AAB DD44
Steg: DEF CON 22
Key: pdogg thedukezip
Injecting Errors
JT65: KB2BBC KA1AAB DD44
JT65: KB2BBC KA1AAB DD44
Steg: DEF CON 22
Key: pdogg thedukezip 
What About Encryption?
What About Encryption?
● We have 12 * 6 = 72 bits to play with
● We need 8 bit bytes...
● Well that gives us exactly 9 bytes
What About Encryption?
● We have 12 * 6 = 72 bits to play with
● We need 8 bit bytes...
● Well that gives us exactly 9 bytes
“Packing” Function
Status
1 byte
Data
8 bytes
01111000
11110010
10110001
11001001
10000001
00001001
00011001
00101010
10010011
“Packing” Function
Status
1 byte
Data
8 bytes
01111000
11110010
10110001
11001001
10000001
00001001
00011001
00101010
10010011
Steganography
12 6-bit symbols
100000
011100
100110
110001
111100
100111
100010
010011
001010
100001
100100
001001
“Status” Byte
Status
1 byte
● Track how many 
total packets in message
● Flags for first / last 
packet
● Track size for 
stream ciphers
“Status” Byte – Stream Cipher
First packet: 
Middle packets: 
Last packet: 
Max size: 64 packets (512 bytes) 
● (0x80) | (# of total packets)
● (0x40) | (# of bytes in packet)
● Packet Number
First
Packet?
Last
Packet?
          First? : # of total packets
          Last? : # of bytes in packet
          Else : Packet Number
1 bit
1 bit
6 bits
“Status” Byte – Block Cipher
First packet: 
Other packets: 
Max size: 128 packets (1024 bytes) 
● (0x80) | (# of total packets)
● Packet Number
First
Packet?
          First? : # of total packets
          Else : Packet Number
1 bit
7 bits
Hiding the Status Byte
● We'll talk about analysis in a bit...
● Steganography traffic was trivial to pick out of 
normal traffic because of this byte :(
Perform Bit Swap
Status
1 byte
Data
8 bytes
01111000
11110010
10110001
11001001
10000001
00001001
00011001
00101010
10010011
Perform Bit Swap
Status
1 byte
Data
8 bytes
00111000
01110010
10110001
11001001
10111000
01001001
00011001
00101010
00010011
Perform Bit Swap
Status
1 byte
Data
8 bytes
Steganography
12 6-bit symbols
101110
001100
100110
110001
011100
100011
100000
010011
001010
100001
100101
001001
00111000
01110010
10110001
11001001
10111000
01001001
00011001
00101010
00010011
JT65 Base Layer
jt65 bin / lib
JT65 Base Layer
jt65 bin / lib
JT65 Wrapper Layer
jt65wrapy.py
JT65 Base Layer
jt65 bin / lib
JT65 Wrapper Layer
jt65wrapy.py
Libraries
jt65stego.py
JT65 Base Layer
jt65 bin / lib
JT65 Wrapper Layer
jt65wrapy.py
Libraries
jt65stego.py
jt65sound.py
JT65 Base Layer
jt65 bin / lib
JT65 Wrapper Layer
jt65wrapy.py
Libraries
jt65stego.py
jt65sound.py
jt65tool.py
JT65 Base Layer
jt65 bin / lib
JT65 Wrapper Layer
jt65wrapy.py
Libraries
jt65stego.py
jt65sound.py
jt65tool.py
jt65analysis.py
JT65 Base Layer
jt65 bin / lib
JT65 Wrapper Layer
jt65wrapy.py
Libraries
jt65stego.py
jt65sound.py
jt65tool.py
jt65analysis.py
Unit Tests
Black Box 
Tests
Tool Demo...
“Feed Reader” RasPi Demo...
Analysis/Steganalysis 
● Defined set of legitimate JT65 packets
● “Known Cover Attack”
● Receive packet → Decode → Encode
● Demodulator provides “probability” or confidence
● Theory:
– Packets suspected to contain steganography can be 
easily distinguished by some quantitative measure
Analysis Module 
Finding Steganography is Easy
Finding Steganography is Hard
Finding Steganography is Hard
Interesting Patterns (and a warning)
Distance
● Considering we cannot SEND these packets
● Let's pretend we received them (<= 7 errors)
● How far away were the senders?
Effectiveness as a World Wide Short 
Message Protocol
“Vulnerabilities” / Known Limitations
● Analysis and Detection
– As discussed / other methods
● Transmitter location (foxhunting)
– Well studied problem/game by 
amateurs and TLAs
– FCC/DEA/NSA - SANDKEY(1)
● Message Forgery
● Storage / long term cryptographic 
analysis
(1) http://cryptomeorg.siteprotect.net/dea-nsa-sandkey.pdf 
How to get it?
Oh yeah, it's on your conference DVD too...
Available today!
Conclusions 
● Protocols and methods such as those presented can, in 
theory, provide a platform for short message 
communications with desirable properties:
– Low infrastructure 
– Long distance
– Covert
– Plausibly deniable 
● Potential for analysis and detection
– Especially for well equipped adversaries
Next Steps / Further Areas of Study
● Continued Detection / Counter Detection Work
● Cryptographic Improvements
● Enhanced amateur applications
● Useful protocols and networks
Ham Exam            Cram Session
Crypto & Privacy Village
Sunday 12 PM – 3 PM
Wireless Village
Sunday 9 AM – 12 PM
THANKS!
@pdogg77
@TheDukeZip
https://www.github.com/pdogg/jt65stego/
Special Thanks @masshackers