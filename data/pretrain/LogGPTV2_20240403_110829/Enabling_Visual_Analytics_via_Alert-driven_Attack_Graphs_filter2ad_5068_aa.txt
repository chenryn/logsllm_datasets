# Enabling Visual Analytics via Alert-driven Attack Graphs

**Authors:**
- Azqa Nadeem, Delft University of Technology, Delft, The Netherlands
- Sicco Verwer, Delft University of Technology, Delft, The Netherlands
- Stephen Moskal, Rochester Institute of Technology, Rochester, United States
- Shanchieh Jay Yang, Rochester Institute of Technology, Rochester, United States

## Abstract

Attack graphs (AGs) are a popular research area that visualizes all possible paths an attacker can exploit to penetrate a network. Current techniques for generating AGs heavily rely on expert input regarding vulnerabilities and network topology. In this work, we propose the use of AGs constructed directly from observed intrusion alerts, without prior expert input. We have developed an unsupervised visual analytics system, called SAGE, to learn alert-driven attack graphs. Our approach enables forensic analysis of past attacks and proactive defense by providing relevant threat intelligence regarding attacker strategies. We believe that alert-driven AGs can play a key role in AI-enabled cyber threat intelligence, as they open up new avenues for analyzing attacker strategies while reducing analyst workload.

**CCS Concepts:**
- Human-centered computing → Visualization
- Security and privacy → Intrusion detection systems
- Computing methodologies → Unsupervised learning

**Keywords:**
- Attack graphs
- Intrusion alerts
- Finite state automaton

**ACM Reference Format:**
Azqa Nadeem, Sicco Verwer, Stephen Moskal, and Shanchieh Jay Yang. 2021. Enabling Visual Analytics via Alert-driven Attack Graphs. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3460120.3485361

## 1. Motivation and Related Work

### Expert Input and Its Limitations

Expert input is both expensive and often impractical for many real-world operations. Existing methods for generating attack graphs (AGs) primarily depend on vulnerability scanning and expert knowledge [2, 13, 14]. However, Security Operations Centers (SOCs) frequently possess a wealth of cybersecurity observables, such as intrusion alerts, from previous security incidents, which contain valuable insights into attacker strategies [7].

### Alert Overload

SOC analysts receive millions of intrusion alerts daily, leading to alert fatigue [4]. While alert correlation techniques help reduce the volume of alerts [1, 15, 16], they do not provide a clear picture of how the attack unfolded. Consequently, identifying attacker strategies remains a largely manual process.

To the best of our knowledge, using intrusion alerts for attack graph construction is still an open problem [5]. This is significant because such AGs can uncover and visualize hidden patterns in large volumes of alerts, thereby augmenting human intelligence.

### Challenges in Machine Learning Application

Machine learning (ML) has emerged as a promising solution for gaining insights into attacker behavior [6, 9, 11, 12]. However, applying ML to this domain presents several challenges:

1. **Class Imbalance:** There is a significant imbalance between severe (e.g., exploitation) and non-severe (e.g., scanning) alerts. Severe alerts are infrequent but critical, while non-severe alerts are more common and also important. A solution that retains both types of alerts while highlighting infrequent ones is needed. Most ML solutions tend to discard infrequent events, making this a challenging problem.
   
2. **Contextual Cues:** The future and past of a given alert provide crucial contextual information about the attacker's intent. Therefore, the proposed solution must model this context to distinguish between similar alerts that lead to different attacks.
   
3. **Explainability:** Black-box solutions that security analysts cannot understand are undesirable. An explainable approach is essential to ensure that analysts can interpret and trust the results.

## 2. Contributions

We have developed an unsupervised visual analytics system called SAGE (IntruSion alert-driven Attack Graph Extractor). Details about SAGE’s workflow are provided in [10]. SAGE processes raw intrusion alerts into episode (hyper-alert) sequences. It leverages the temporal and probabilistic dependence between alerts using a suffix-based probabilistic deterministic finite automaton (S-PDFA).

### Key Features of SAGE

- **Suffix-based PDFA:** We propose a suffix-based PDFA to emphasize infrequent severe alerts. The model distinguishes between episodes with different contexts but identical signatures. If the future and past of two episodes are statistically different, the S-PDFA considers them as different states, even if they have the same signature.
  
- **Explainable and Deterministic Model:** The S-PDFA is an explainable and deterministic graphical model of all attack paths present in an alert dataset. We extract objective-oriented AGs from the S-PDFA on a per-victim, per-objective basis.

### Visual Representation

An alert-driven AG can be seen as an aggregated representation of relevant alerts, where each attack path originates from one of the starting vertices (yellow) and leads to the root (objective) vertex. Each attacker that achieves the objective is shown using a different edge color, along with the attacker IP next to the starting vertex. Multiple attack attempts are broken into individual attack paths. The context of an episode is denoted using the state identifier from the S-PDFA. To reduce the number of resulting vertices, we remove state identifiers for low-severity episodes, further highlighting the infrequent high-severity episodes and their varying contexts.

### Integration and Benefits

SAGE can directly augment existing IDSs and SIEMs for alert triaging and visual analytics. Alert-driven AGs are powerful because they enable forensic analysis of prior attacks (displaying and comparing attack paths) and provide relevant threat intelligence about attacker strategies (insights into behavioral dynamics, fingerprinting paths for attacker re-identification, and ranking attackers based on the uniqueness and severity of their actions). We believe that alert-driven AGs can play a key role in AI-enabled cyber threat intelligence, opening up new avenues for analyzing attacker strategies while reducing analyst workload.

## 2.1 Extensions

We demonstrate several use-cases for alert-driven AGs using intrusion alerts collected through security testing competitions. In addition to the experiments conducted on the Collegiate Penetration Testing Competition (CPTC-2018) by Nadeem et al. [10], we apply SAGE to two additional datasets: one from a penetration testing competition (CPTC-2017) and another from a blue team exercise (CCDC-2018). Table 1 summarizes the experimental datasets. For CCDC-2018, no additional information is known, reinforcing the claim that SAGE does not require any expert input to produce insightful AGs.

### Model Comparison

We compare the quality of the S-PDFA against two alternative modeling approaches: a suffix tree and Markov chains. Using Perplexity [3] to measure the predictive power of each model, the results suggest that the suffix tree is best at modeling the training data, which is expected since it is a tree representation of the input data. The S-PDFA is best at modeling unseen test data and second-best at modeling the training data. Markov chains struggle to achieve optimal values. Additionally, the AGs generated from each model show different perspectives: Markov chain-AGs do not model the context and make broad generalizations, offering no added benefit. Suffix tree-AGs and S-PDFA-AGs are highly similar, except that S-PDFA-AGs are smaller due to the state merging algorithm. The real benefit of the S-PDFA becomes apparent in larger graphs, where similar paths are merged, thus consolidating repeated (sub-)strategies.