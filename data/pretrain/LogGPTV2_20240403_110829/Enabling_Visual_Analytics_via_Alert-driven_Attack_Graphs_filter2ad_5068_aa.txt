title:Enabling Visual Analytics via Alert-driven Attack Graphs
author:Azqa Nadeem and
Sicco Verwer and
Stephen Moskal and
Shanchieh Jay Yang
Enabling Visual Analytics via Alert-driven Attack Graphs
Azqa Nadeem∗
Delft University of Technology
Delft, The Netherlands
PI:EMAIL
Stephen Moskal
Rochester Institute of Technology
Rochester, United States
PI:EMAIL
Sicco Verwer
Delft University of Technology
Delft, The Netherlands
PI:EMAIL
Shanchieh Jay Yang
Rochester Institute of Technology
Rochester, United States
PI:EMAIL
ABSTRACT
Attack graphs (AG) are a popular area of research that display all
the paths an attacker can exploit to penetrate a network. Existing
techniques for AG generation rely heavily on expert input regard-
ing vulnerabilities and network topology. In this work, we advocate
the use of AGs that are built directly using the actions observed
through intrusion alerts, without prior expert input. We have devel-
oped an unsupervised visual analytics system, called SAGE, to learn
alert-driven attack graphs. We show how these AGs (i) enable foren-
sic analysis of prior attacks, and (ii) enable proactive defense by
providing relevant threat intelligence regarding attacker strategies.
We believe that alert-driven AGs can play a key role in AI-enabled
cyber threat intelligence as they open up new avenues for attacker
strategy analysis whilst reducing analyst workload.
CCS CONCEPTS
• Human-centered computing→ Visualization; • Security and
privacy→ Intrusion detection systems; • Computing method-
ologies → Unsupervised learning.
KEYWORDS
Attack graphs; Intrusion alerts; Finite state automaton;
ACM Reference Format:
Azqa Nadeem, Sicco Verwer, Stephen Moskal, and Shanchieh Jay Yang. 2021.
Enabling Visual Analytics via Alert-driven Attack Graphs. In Proceedings of
the 2021 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New
York, NY, USA, 3 pages. https://doi.org/10.1145/3460120.3485361
1 MOTIVATION & RELATED WORKS
Expert input is expensive. Attack graphs (AG) are visual models
of attacker strategies. Existing approaches for AG generation rely
mostly on vulnerability scanning and expert knowledge [2, 13, 14],
which is costly and ineffective for many real-world operations.
∗Corresponding author.
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-8454-4/21/11.
https://doi.org/10.1145/3460120.3485361
Meanwhile, Security Operations Centers (SOC) often possess an
abundance of rapidly evolving cybersecurity observables, such as in-
trusion alerts, from prior security incidents, which contain valuable
insights regarding attacker strategies [7].
Alert overload. SOC analysts receive millions of intrusion alerts
on a daily basis, leading to alert fatigue [4]. While alert correla-
tion techniques help reduce the volume of alerts [1, 15, 16], they
do not show how the attack transpired. Thus, attacker strategy
identification is still largely a manually process.
To the best of our knowledge, utilizing intrusion alerts for attack
graph construction remains an open problem [5]. This is an impor-
tant question because such AGs can discover and visualize hidden
patterns in large amounts of alerts to augment human intelligence.
ML application is challenging. In recent years, machine learn-
ing (ML) has emerged as a promising solution for obtaining insights
into attacker behavior [6, 9, 11, 12]. ML application requires that
the following three challenges be addressed:
(1) Class imbalance between severe (e.g., exploitation) and non-
severe (e.g., scanning) alerts presents a huge difficulty. Severe
alerts are infrequent, while non-severe alerts reflect an im-
portant aspect of an attacker’s strategy. A solution that keeps
both type of alerts, while highlighting infrequent alerts is
required. This is a tricky problem because most ML solutions
discard infrequent events.
(2) The future and past of a given alert captures important con-
textual cues about the intent of an attacker. Thus, the pro-
posed solution must model this context to distinguish be-
tween similar alerts that lead to different attacks.
(3) Black-box solutions that security analysts cannot understand
are undesirable, thus calling for an explainable approach.
2 CONTRIBUTIONS
We have developed an unsupervised visual analytics system, called
SAGE (IntruSion alert-driven Attack Graph Extractor)1. Details
about SAGE’s workflow are given in [10]. Essentially, SAGE pro-
cesses raw intrusion alerts into episode (hyper-alert) sequences. The
temporal and probabilistic dependence between alerts is leveraged
using a suffix-based probabilistic deterministic finite automaton
(S-PDFA). We propose a suffix-based PDFA to accentuate infrequent
severe alerts. Further, the model distinguishes between episodes
with different contexts but identical signatures: if the future and
past of two episodes are statistically different, then the S-PDFA
1SAGE is open-source: https://github.com/tudelft-cda-lab/SAGE.
Session 8: Poster & Demo Session CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2420considers them to be different states even if they have the same
signature. Thus, an S-PDFA is an explainable and deterministic
graphical model of all attack paths present in an alert dataset. We
extract objective-oriented AGs from the S-PDFA on a per-victim,
per-objective basis.
An alert-driven AG can be considered as an aggregated repre-
sentation of relevant alerts, where each attack path originates from
one of the starting (i.e., yellow) vertices and leads to the root (i.e.,
objective) vertex. Each attacker that obtains the objective is shown
using a different edge color (along with the attacker IP next to the
starting vertex) and multiple attack attempts are broken into indi-
vidual attack paths. The context of an episode is denoted using the
state identifier from the S-PDFA. Since low-severity episodes are
too frequent, we remove their state identifiers to reduce the number
of resulting vertices. This post-processing step further highlights
the infrequent high-severity episodes and their varying contexts.
SAGE can directly augment existing IDSs and SIEMs for alert
triaging and visual analytics. The alert-driven AGs are powerful be-
cause they not only enable forensic analysis of prior attacks (i.e., dis-
playing and comparing attack paths), but they also provide relevant
threat intelligence about attacker strategies (i.e., insights into behav-
ioral dynamics, fingerprinting paths for attacker re-identification,
and ranking attackers based on the uniqueness and severity of their
actions). We believe that alert-driven AGs can play a key role in
AI-enabled cyber threat intelligence as they open up new avenues
for attacker strategy analysis whilst reducing analyst workload.
2.1 Extensions
We show several different use-cases for alert-driven AGs using
intrusion alerts collected through security testing competitions. In
addition to the experiments conducted on the Collegiate Penetration
Testing Competition (i.e., CPTC-2018 [8]) by Nadeem et al. [10], we
apply SAGE on two additional alert datasets: one collected through
a penetration testing competition (i.e., CPTC-20172) and the other
through a blue team exercise (i.e., CCDC-20183). Table 1 shows
the summary of the experimental datasets. For CCDC-2018, no
additional information is known, which reinforces the claim that
SAGE does not need any expert input to produce insightful AGs.
We also compare the quality of the S-PDFA against two alterna-
tive modeling approaches, i.e., a suffix tree and Markov chains. Using
Perplexity [3] to measure the predictive power of each model, the re-
sults suggest that the suffix tree is best at modeling the training data,
which is to be expected since it is a tree representation of the input
data. The S-PDFA is best at modeling unseen test data (and second
best at modeling the training data). The Markov chains struggle to
achieve optimal values. In addition, the AGs generated from each of
the models show a different perspective: The Markov chain-AGs do
not model the context and make vast over-generalizations, thus pro-
ducing no added-benefit of the modeling step. The suffix tree-AGs
and the S-PDFA-AGs are highly similar, except the S-PDFA-AGs
are smaller due to the state merging algorithm. The real benefit
of the S-PDFA becomes apparent in larger graphs: Similar paths
are merged in an S-PDFA. Thus, repeated (sub-)strategies are dis-