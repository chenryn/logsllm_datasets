        if err != nil {
            dns.HandleFailed(w, req)
            return
        }
        if err := w.WriteMsg(resp); err != nil {
            dns.HandleFailed(w, req)
            return
        }
    })
    x go func() {
        y sigs := make(chan os.Signal, 1)
        z signal.Notify(sigs, syscall.SIGUSR1)
        for sig := range sigs {
            { switch sig {
前沿信安资讯阵地  公众号：i nf osrc
Exploiting DNS   129
            case syscall.SIGUSR1:
                log.Println("SIGUSR1: reloading records")
               | recordLock.Lock()
                parse("proxy.config")
                } recordLock.Unlock()
            }
        }
    }()
    log.Fatal(dns.ListenAndServe(":53", "udp", nil))
}
Listing 5-7: Your completed proxy (/ch-5/dns_proxy /main.go)
There are a few additions. Since the program is going to be modifying 
a map that could be in use by concurrent goroutines, you’ll need to use a 
mutex to control access.1 A mutex prevents concurrent execution of sensitive 
code blocks, allowing you to lock and unlock access. In this case, you can 
use RWMutex u, which allows any goroutine to read without locking the others 
out, but will lock the others out when a write is occurring. Alternatively, 
implementing goroutines without a mutex on your resource will introduce 
interleaving, which could result in race conditions or worse. 
Before accessing the map in your handler, call RLock v to read a value 
to match; after the read is complete, RUnlock w is called to release the map 
for the next goroutine. In an anonymous function that’s running within 
a new goroutine x, you begin the process of listening for a signal. This is 
done using a channel of type os.Signal y, which is provided in the call to 
signal.Notify() z along with the literal signal to be consumed by the SIGUSR1 
channel, which is a signal set aside for arbitrary purposes. In a loop over the 
signals, use a switch statement { to identify the type of signal that has been 
received. You’re configuring only a single signal to be monitored, but in 
the future you might change this, so this is an appropriate design pattern. 
Finally, Lock() | is used prior to reloading the running configuration to 
block any goroutines that may be trying to read from the record map. Use 
Unlock() } to continue execution.
Let’s test this program by starting the proxy and creating a new listener 
within an existing teamserver. Use the domain attacker3.com. With the proxy  
running, modify the proxy.config file and add a new line pointing the domain 
to your listener. You can signal the process to reload its configuration by 
using kill, but first use ps and grep to identify the process ID.
$  ps -ef | grep proxy
$  kill -10 PID
The proxy should reload. Test it by creating and executing a new stage-
less executable. The proxy should now be functional and production ready.
1. Go versions 1.9 and newer contain a concurrent-safe type, sync.Map, that may be used to 
simplify your code.
前沿信安资讯阵地  公众号：i nf osrc
130   Chapter 5
Summary
Although this concludes the chapter, you still have a world of possibilities 
for your code. For example, Cobalt Strike can operate in a hybrid fashion, 
using HTTP and DNS for different operations. To do this, you’ll have to 
modify your proxy to respond with the listener’s IP for A records; you’ll also 
need to forward additional ports to your containers. In the next chapter, 
you’ll delve into the convoluted craziness that is SMB and NTLM. Now, 
go forth and conquer!
前沿信安资讯阵地  公众号：i nf osrc
In the previous chapters, you examined 
various common protocols used for network 
communication, including raw TCP, HTTP, 
and DNS. Each of these protocols has interesting 
use cases for attackers. Although an extensive number 
of other network protocols exist, we’ll conclude our
discussion of network protocols by examining Server Message Block (SMB), 
a protocol that arguably proves to be the most useful during Windows 
post-exploitation. 
SMB is perhaps the most complicated protocol you’ll see in this book. 
It has a variety of uses, but SMB is commonly used for sharing resources such 
as files, printers, and serial ports across a network. For the offensive-minded 
reader, SMB allows interprocess communications between distributed net-
work nodes via named pipes. In other words, you can execute arbitrary com-
mands on remote hosts. This is essentially how PsExec, a Windows tool that 
executes remote commands locally, works. 
6
IN T E R AC T ING W I T H  
S M B  A N D N T L M
前沿信安资讯阵地  公众号：i nf osrc
132   Chapter 6
SMB has several other interesting use cases, particularly due to the way 
it handles NT LAN Manager (NTLM) authentication, a challenge-response 
security protocol used heavily on Windows networks. These uses include 
remote password guessing, hash-based authentication (or pass-the-hash), 
SMB relay, and NBNS/LLMNR spoofing. Covering each of these attacks 
would take an entire book. 
We’ll begin this chapter with a detailed explanation of how to imple-
ment SMB in Go. Next, you’ll leverage the SMB package to perform remote 
password guessing, use the pass-the-hash technique to successfully authen-
ticate yourself by using only a password’s hash, and crack the NTLMv2 hash 
of a password.
The SMB Package
At the time of this writing, no official SMB package exists in Go, but we 
created a package where you can find the book-friendly version at https://
github.com/blackhat-go/bhg/blob/master/ch-6/smb/. Although we won’t show 
you every detail of this package in this chapter, you’ll still learn the basics 
of interpreting the SMB specification in order to create the binary com-
munications necessary to “speak SMB,” unlike in previous chapters, where 
you simply reused fully compliant packages. You’ll also learn how to use a 
technique called reflection to inspect interface data types at runtime and 
define arbitrary Go structure field tags to marshal and unmarshal com-
plicated, arbitrary data, while maintaining scalability for future message 
structures and data types. 
While the SMB library we’ve built allows only basic client-side commu-
nications, the codebase is fairly extensive. You’ll see relevant examples from 
the SMB package so that you can fully understand how communications 
and tasks, such as SMB authentication, work.
Understanding SMB
SMB is an application-layer protocol, like HTTP, that allows network nodes 
to communicate with one another. Unlike HTTP 1.1, which communicates 
using ASCII-readable text, SMB is a binary protocol that uses a combina-
tion of fixed- and variable-length, positional, and little-endian fields. SMB 
has  several versions, also known as dialects—that is, versions 2.0, 2.1, 3.0, 
3.0.2, and 3.1.1. Each dialect performs better than its predecessors. Because 
the handling and requirements vary from one dialect to the next, a client 
and server must agree on which dialect to use ahead of time. They do this 
during an initial message exchange. 
Generally, Windows systems support multiple dialects and choose the 
most current dialect that both the client and server support. Microsoft has 
provided Table 6-1, which shows which Windows versions select which dia-
lect during the negotiation process. (Windows 10 and WS 2016—not shown 
in the graphic—negotiate SMB version 3.1.1.)
前沿信安资讯阵地  公众号：i nf osrc
Interacting with SMB and NTLM    133
Table 6-1: SMB Dialects Negotiated By Windows Versions
Operating 
system
Windows 8.1 
WS 2012 R2
Windows 8 
WS 2012
Windows 7 
WS 2008 R2
Windows Vista 
WS 2008
Previous 
versions
Windows 8.1 
WS 2012 R2
SMB 3.02
SMB 3.0
SMB 2.1
SMB 2.0
SMB 1.0
Windows 8 
WS 2012
SMB 3.0
SMB 3.0
SMB 2.1
SMB 2.0
SMB 1.0
Windows 7 
WS 2008 R2
SMB 2.1
SMB 2.1
SMB 2.1
SMB 2.0
SMB 1.0
Windows Vista 
WS 2008
SMB 2.0
SMB 2.0
SMB 2.0
SMB 2.0
SMB 1.0
Previous 
versions
SMB 1.0
SMB 1.0
SMB 1.0
SMB 1.0
SMB 1.0
For this chapter, you’ll use the SMB 2.1 dialect, because most modern 
Windows versions support it. 
Understanding SMB Security Tokens 
SMB messages contain security tokens used to authenticate users and machines 
across a network. Much like the process of selecting the SMB dialect, select-
ing the authentication mechanism takes place through a series of Session 
Setup messages, which allow clients and servers to agree on a mutually sup-
ported authentication type. Active Directory domains commonly use NTLM 
Security Support Provider (NTLMSSP), a binary, positional protocol that uses 
NTLM password hashes in combination with challenge-response tokens in 
order to authenticate users across a network. Challenge-response tokens are 
like the cryptographic answer to a question; only an entity that knows the 
correct password can answer the question correctly. Although this chapter 
focuses solely on NTLMSSP, Kerberos is another common authentication 
mechanism.
Separating the authentication mechanism from the SMB specification 
itself allows SMB to use different authentication methods in different envi-
ronments, depending on domain and enterprise security requirements as 
well as client-server support. However, separating the authentication and 
the SMB specification makes it more difficult to create an implementation 
in Go, because the authentication tokens are Abstract Syntax Notation One 
(ASN.1) encoded. For this chapter, you don’t need to know too much about 
ASN.1—just know that it’s a binary encoding format that differs from the 
positional binary encoding you’ll use for general SMB. This mixed encod-
ing adds complexity. 
Understanding NTLMSSP is crucial to creating an SMB implemen-
tation that is smart enough to marshal and unmarshal message fields 
selectively, while accounting for the potential that adjacent fields—within 
a single message—may be encoded or decoded differently. Go has stan-
dard packages that you can use for binary and ASN.1 encoding, but Go’s 
前沿信安资讯阵地  公众号：i nf osrc
134   Chapter 6
ASN.1 package wasn’t built for general-purpose use; so you must take into 
account a few nuances.
Setting Up an SMB Session
The client and server perform the following process to successfully set up 
an SMB 2.1 session and choose the NTLMSSP dialect:
1. The client sends a Negotiate Protocol request to the server. The mes-
sage includes a list of dialects that the client supports.
2. The server responds with a Negotiate Protocol response message, which 
indicates the dialect the server selected. Future messages will use that 
dialect. Included in the response is a list of authentication mechanisms 
the server supports.
3. The client selects a supported authentication type, such as NTLMSSP, 
and uses the information to create and send a Session Setup request 
message to the server. The message contains an encapsulated security 
structure indicating that it’s an NTLMSSP Negotiate request.
4. The server replies with a Session Setup response message. This message 
indicates that more processing is required and includes a server chal-
lenge token.
5. The client calculates the user’s NTLM hash—which uses the domain, 
user, and password as inputs—and then uses it in combination with 
the server challenge, random client challenge, and other data to gen-
erate the challenge response. It includes this in a new Session Setup 
request message that the client sends to the server. Unlike the message 
sent in step 3, the encapsulated security structure indicates that it’s an 
NTLMSSP Authenticate request. This way, the server can differentiate 
between the two Session Setup SMB requests.
6. The server interacts with an authoritative resource, such as a domain 
controller for authentication using domain credentials, to compare the 
challenge-response information the client supplied with the value the 
authoritative resource calculated. If they match, the client is authenti-
cated. The server sends a Session Setup response message back to the 
client, indicating that login was successful. This message contains a 
unique session identifier that the client can use to track session state.
7. 
The client sends additional messages to access file shares, named pipes, 
printers, and so on; each message includes the session identifier as a 
reference through which the server can validate the authentication 
status of the client.
You might now begin to see how complicated SMB is and understand 
why there is neither a standard nor a third-party Go package that imple-
ments the SMB specification. Rather than take a comprehensive approach 
and discuss every nuance of the libraries we created, let’s focus on a few 
of the structures, messages, or unique aspects that can help you imple-
ment your own versions of well-defined networking protocols. Instead of 
前沿信安资讯阵地  公众号：i nf osrc
Interacting with SMB and NTLM    135
extensive code listings, this chapter discusses only the good stuff, sparing 
you from information overload. 
You can use the following relevant specifications as a reference, but 
don’t feel obligated to read each one. A Google search will let you find the 
latest revisions.
MS-SMB2 The SMB2 specification to which we attempted to conform. 
This is the main specification of concern and encapsulates a Generic 
Security Service Application Programming Interface (GSS-API) struc-
ture for performing authentication.
MS-SPNG and RFC 4178 The GSS-API specification within which the 
MS-NLMP data is encapsulated. The structure is ASN.1 encoded.
MS-NLMP The specification used for understanding NTLMSSP 
authentication token structure and challenge-response format. It 
includes formulas and specifics for calculating things like the NTLM 
hash and authentication response token. Unlike the outer GSS-API 
container, NTLMSSP data isn’t ASN.1 encoded.
ASN.1 The specification for encoding data by using ASN.1 format.
Before we discuss the interesting snippets of code from the package, 
you should understand some of the challenges you need to overcome in 
order to get working SMB communications.
Using Mixed Encoding of Struct Fields
As we alluded to earlier, the SMB specification requires positional, binary, 
little-endian, fixed- and variable-length encoding for the majority of the 
message data. But some fields need to be ASN.1 encoded, which uses explic-
itly tagged identifiers for field index, type, and length. In this case, many 
of the ASN.1 subfields to be encoded are optional and not restricted to a 
specific position or order within the message field. This may help clarify 
the challenge.
In Listing 6-1, you can see a hypothetical Message struct that presents 
these challenges.
type Foo struct {
    X int
    Y []byte
}
type Message struct {
    A int    // Binary, positional encoding
    B Foo    // ASN.1 encoding as required by spec
    C bool   // Binary, positional encoding
}
Listing 6-1: A hypothetical example of a struct requiring variable field encodings
The crux of the problem here is that you can’t encode all the types 
inside the Message struct by using the same encoding scheme because B, a 
Foo type, is expected to be ASN.1 encoded, whereas other fields aren’t. 
前沿信安资讯阵地  公众号：i nf osrc
136   Chapter 6
Writing a Custom Marshaling and Unmarshaling Interface
Recall from previous chapters that encoding schemes such as JSON or XML 
recursively encode the struct and all fields by using the same encoding for-
mat. It was clean and simple. You don’t have the same luxury here, because 
Go’s binary package behaves the same way—it encodes all structs and struct 
fields recursively without a care in the world, but this won’t work for you 
because the message requires mixed encoding:
binary.Write(someWriter, binary.LittleEndian, message)
The solution is to create an interface that allows arbitrary types to 
define custom marshaling and unmarshaling logic (Listing 6-2). 
u type BinaryMarshallable interface {
    v MarshalBinary(*Metadata) ([]byte, error)
    w UnmarshalBinary([]byte, *Metadata) error
}
Listing 6-2: An interface definition requiring custom marshaling and unmarshaling methods
The interface u, BinaryMarshallable, defines two methods that must be 
implemented: MarshalBinary() v and UnmarshalBinary() w. Don’t worry too 
much about the Metadata type passed into the functions, as it’s not relevant 
to understand the main functionality.
Wrapping the Interface 