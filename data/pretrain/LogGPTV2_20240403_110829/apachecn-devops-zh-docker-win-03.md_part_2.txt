```
`config`目录填充了默认的配置文件，所以我可以从映像中运行一个容器，而不必指定任何额外的设置:
```
docker container run -d -P dockeronwindows/ch03-aspnet-config:2e
```
当我获取容器的端口并浏览到它时，我看到显示默认配置文件中的值的网页:
![](img/c2ba482d-3bc5-451f-af92-3f10af0aebb4.png)
我可以通过从主机上的目录加载配置文件，将本地目录挂载为容器内的目标卷`C:\inetpub\wwwroot\config`，为不同的环境运行应用。当容器运行时，该目录的内容将从主机上的目录加载:
```
docker container run -d -P `
 -v $pwd\prod-config:C:\inetpub\wwwroot\config `
 dockeronwindows/ch03-aspnet-config:2e
```
I'm using PowerShell to run this command, which expands `$pwd` to the full value of the current directory, so I'm saying the `prod-config` directory in the current path should be mounted as `C:\inetpub\wwwroot\config` in the container. You can use fully-qualified paths too.
当我浏览到这个容器的端口时，我看到显示了不同的配置值:
![](img/a42dd810-c2c0-4f38-9f3b-455b9164f98d.png)
这里重要的是，我使用的是完全相同的 Docker 映像，在每个环境中都有相同的设置和相同的二进制文件。只有配置文件会改变，Docker 提供了一种很好的方法。
# 促进环境变量
现代应用越来越多地使用环境变量进行配置设置，因为几乎每个平台都支持它们，从物理机器到平台即服务，再到无服务器功能。所有平台都以相同的方式使用环境变量——作为键值对的存储——因此，通过使用环境变量进行配置，您可以使您的应用高度可移植。
ASP.NET 应用已经在`Web.config`中有了丰富的配置框架，但是通过一些小的代码更改，您可以进行关键设置并将其移动到环境变量中。这使您可以为应用构建一个 Docker 映像，该映像可以在不同的平台上运行，在容器中设置环境变量来更改配置。
Docker 允许您在 Dockerfile 中指定环境变量，并为它们提供初始默认值。`ENV`指令设置环境变量，每个`ENV`指令可以设置一个变量，也可以设置多个变量。以下示例来自`dockeronwindows/ch03-iis-environment-variables:2e`的文档:
```
 ENV A01_KEY A01 value
 ENV A02_KEY="A02 value" `
     A03_KEY="A03 value"
```
用`ENV`添加到 Dockerfile 中的设置成为映像的一部分，因此从映像运行的每个容器都将设置这些值。运行容器时，可以使用`--env`或`-e`选项添加新的环境变量或替换现有映像变量的值。您可以看到环境变量如何与一个简单的纳米服务器容器一起工作:
```
> docker container run `
  --env ENV_01='Hello' --env ENV_02='World' `
  mcr.microsoft.com/windows/nanoserver:1809 `
  cmd /s /c echo %ENV_01% %ENV_02%
Hello World
```
在 IIS 中托管应用的情况下，使用 Docker 中的环境变量会很复杂。当 IIS 启动时，它从系统中读取所有环境变量并缓存它们。当 Docker 运行一个设置了环境变量的容器时，它会在进程级别写入这些变量，但这是在 IIS 缓存了原始值之后发生的，因此它们不会被更新，IIS 应用也不会看到新值。然而，IIS 不会以同样的方式缓存机器级环境变量，所以我们可以将 Docker 设置的值提升到机器级环境变量，IIS 应用将能够读取它们。
提升环境变量可以通过将它们从过程级复制到机器级来实现。您可以在容器启动命令中使用 PowerShell 脚本，这是通过循环遍历所有进程级变量并将它们复制到机器级来实现的，除非机器级密钥已经存在:
```
 foreach($key in [System.Environment]::GetEnvironmentVariables('Process').Keys) {
     if ([System.Environment]::GetEnvironmentVariable($key, 'Machine') -eq $null) {
         $value = [System.Environment]::GetEnvironmentVariable($key, 'Process')
         [System.Environment]::SetEnvironmentVariable($key, $value, 'Machine')
     }
 }
```
如果您使用的是基于微软 IIS 映像的映像，则不需要这样做，因为它是通过名为`ServiceMonitor.exe`的实用程序为您完成的，该实用程序打包在 IIS 映像中。ServiceMonitor 做三件事——它使进程级环境变量可用，它启动一个后台 Windows 服务，然后它监视服务以确保它保持运行。这意味着您可以使用服务监视器作为容器的启动进程，如果 IIS 窗口服务失败，服务监视器将退出，Docker 将看到您的应用已经停止。
`ServiceMonitor.exe` is available as a binary file on GitHub, but it's not open source and not all its behavior is documented (it seems to only work for the default IIS App Pool). It's copied into Microsoft's IIS image and set as the `ENTRYPOINT` for containers. The ASP.NET image is based on the IIS image, so it also has ServiceMonitor configured.
如果您想使用 ServiceMonitor 和您自己的逻辑来回显 IIS 日志，您需要在后台启动 ServiceMonitor，并在 Dockerfile 中完成您的启动命令和日志读取。我在`dockeronwindows/ch03-iis-environment-variables:2e`中这样做，用 PowerShell 的`Start-Process` cmdlet 运行 ServiceMonitor:
```
ENTRYPOINT ["powershell"]
CMD Start-Process -NoNewWindow -FilePath C:\ServiceMonitor.exe -ArgumentList w3svc; `
    Invoke-WebRequest http://localhost -UseBasicParsing | Out-Null; `
    netsh http flush logbuffer | Out-Null; `
    Get-Content -path 'C:\iislog\W3SVC\u_extend1.log' -Tail 1 -Wait 
```
The `ENTRYPOINT` and `CMD` instructions both tell Docker how to run your application. You can combine them to specify a default entry point and allow users of your image to override the command when they start a container.
映像中的应用是一个简单的 ASP.NET 网页表单页面，其中列出了环境变量。我可以用通常的方法在容器中运行:
```
docker container run -d -P --name iis-env dockeronwindows/ch03-iis-environment-variables:2e
```
当容器启动时，我可以获取容器的端口，并在 ASP.NET 网页表单页面上打开一个浏览器，使用一些简单的 PowerShell 脚本:
```
$port = $(docker container port iis-env).Split(':')[1]
start "http://localhost:$port"
```
该网站显示了 Docker 映像中作为过程级变量列出的默认环境变量值:
![](img/2e618d29-6ac9-4bbd-9146-05ec35667a31.png)
您可以使用不同的环境变量运行同一个映像，覆盖其中一个映像变量并添加一个新变量:
```
docker container run -d -P --name iis-env2 ` 
 -e A01_KEY='NEW VALUE!' ` 
 -e B01_KEY='NEW KEY!' `
 dockeronwindows/ch03-iis-environment-variables:2e
```
浏览新容器的端口，您将看到由 ASP.NET 页面写出的新值:
![](img/ef181092-bc3c-4348-8c38-689692850087.png)
我现在已经在 IIS 映像中添加了对 Docker 环境变量管理的支持，因此 ASP.NET 应用可以使用`System.Environment`类来读取配置设置。我在这个新映像中保留了 IIS 日志回声，所以这是一个很好的 Docker 公民，现在您可以配置应用并通过 Docker 检查日志。
我能做的最后一个改进是告诉 Docker 如何监控容器内运行的应用，这样 Docker 就可以确定应用是否健康，如果变得不健康就采取行动。
# 构建监视应用的 Docker 映像
当我将这些新功能添加到 NerdDinner Dockerfile 文件中并从该映像运行一个容器时，我将能够看到带有`docker container logs`命令的 web 请求和响应日志，该命令将中继 Docker 捕获的所有 IIS 日志条目，并且我可以使用环境变量和配置文件来指定 API 键和数据库用户凭据。这使得运行和管理遗留的 ASP.NET 应用与我如何使用 Docker 上运行的任何其他容器化应用保持一致。我还可以配置 Docker 为我监控容器，这样我就可以管理任何意外的故障。
Docker 通过 Dockerfile 中的`HEALTHCHECK`指令，提供了监控应用运行状况的能力，而不仅仅是检查应用进程是否仍在运行。有了`HEALTHCHECK`你告诉 Docker 如何测试应用是否还健康。语法类似于`RUN`和`CMD`指令。您传入一个 shell 命令来执行，如果应用是健康的，它应该有一个返回代码`0`，如果不是健康的，它应该有一个返回代码`1`。Docker 会在容器运行时定期运行运行状况检查，并在容器运行状况发生变化时发出状态事件。
对于 web 应用来说，*健康的*的简单定义是正常响应 HTTP 请求的能力。你的要求取决于你希望检查的彻底程度。理想情况下，该请求应该执行应用的关键部分，因此您确信它工作正常。但是同样，请求应该快速完成，并且对计算的影响最小，所以处理大量的健康检查不会影响消费者的请求。
任何 web 应用的一个简单的健康检查就是只使用`Invoke-WebRequest` PowerShell cmdlet 获取主页并检查 HTTP 响应代码是否为`200`，这意味着响应被成功接收:
```
try { 
    $response = iwr http://localhost/ -UseBasicParsing
    if ($response.StatusCode -eq 200) { 