title:Towards fully incremental cryptographic schemes
author:Kevin Atighehchi and
Traian Muntean
Towards Fully Incremental Cryptographic Schemes
Kévin Atighehchi
ERISCS Research Group
Aix-Marseille University, France
PI:EMAIL
Traian Muntean
ERISCS Research Group
Aix-Marseille University, France
PI:EMAIL
ABSTRACT
This paper focus on incremental cryptographic schemes that solve
the privacy problem introduced by Bellare, Goldreich and Gold-
wasser. To our knowledge, none of the schemes designed so far
provide simultaneously strong privacy guarantees and byte-wise
incremental operations. We propose a new method that extends
a block-wise incremental cryptographic scheme into a fully byte-
wise incremental one while keeping good performances. This one
insures the property of perfect privacy with the same average over-
head for both the size of the cryptographic form and the number of
operations to perform when applying the conjugate algorithm.
Categories and Subject Descriptors
E.3 [Data]: Data Encryption; D.4.6 [Software]: Security and Pro-
tection
Keywords
Incremental cryptography; Perfect privacy; Parallel cryptography
1.
INTRODUCTION
Incremental cryptography, introduced in [1, 2, 3], is used to
maintain up-to-date, at low computational cost, cryptographic trans-
formations of ﬁles such as encryption, authenticated encryption,
signature or ﬁngerprint. More speciﬁcally, let us assume that we
have a document D on which we have applied a cryptographic
function T to generate T (D). Suppose that D is updated in D(cid:48)
via an update operation M. The goal is then to ﬁnd an incremen-
tal update algorithm I which allows to compute the cryptographic
transformation on D(cid:48) from T (D) and M faster than if we would
have had to compute this transformation on D(cid:48) from scratch. Such
a low computational efﬁciency for update operations is essential in
areas such as virus protections [2], memory authentication [5], dic-
tionary authentication [8], securing ﬁles systems and databases, or
more generally ﬁles handling over networks of remote servers.
For incremental cryptographic schemes based on balanced tree,
the run time of I is logarithmic in the number of blocks of D [2,
10, 5, 8]. In the ideal case, the run time of I is proportional with
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIA CCS’13, May 8–10, 2013, Hangzhou, China.
Copyright 2013 ACM 978-1-4503-1767-2/13/05 ...$15.00.
the amount of changes made in D to obtain D(cid:48). This is the case
for schemes based on pair-wise chaining [7, 2, 4]. Schemes sup-
porting efﬁcient insert and delete operations may be based on pair-
wise chaining or on dynamic data structures such as a signature
scheme using a 2-3 Tree [2], a randomised version [10], or even
a non-deterministic skip list [8]. Those based on randomised self-
balancing data structures (Oblivious Tree [10] or non-deterministic
skip list [8]) or on pair-wise chaining can ensure a perfect privacy
property at each modiﬁcation, that is, the updated cryptographic
form is indistinguishable from an original one. Another interest of
using a self-balancing data structure is its ability to ensure tamper-
proof security [2, 10, 6] at quite low computational cost.
Perfectly private incremental cryptographic schemes designed so
far are block-based incremental schemes. They can be impractical
in general since they do not allow insertion or deletion of data of
arbitrary lengths, an essential characteristic for workﬂow document
editing. We propose here a new method that extends a block-wise
incremental cryptographic scheme into a byte-wise one while keep-
ing good performances. The method transforms byte-based up-
dates to block-based updates and subsequently uses a block-based
scheme as a black box. At each modiﬁcation performed on the doc-
ument, our approach insures the property of perfect privacy with
the same average overhead for both the size of the cryptographic
transformation and the number of operations to perform when ap-
plying the conjugate algorithm.
The paper is structured as follows. After having recalled deﬁ-
nitions in Section 2, we exhibit some drawbacks of current incre-
mental cryptographic schemes and we introduce a generic method
to extend them into fully incremental schemes in Section 3. Then,
security considerations are discussed in Section 4.
2. BACKGROUND AND DEFINITIONS
2.1 Cryptography and documents update
Cryptographic schemes take as input a document D which is di-
vided into a sequence of ﬁxed-size blocks P0, P1, ..., Pn. These
schemes are deﬁned thanks to a so-called mode of operation over
these blocks. Thus, documents are viewed as strings over an alpha-
bet(cid:80) = {0, 1}8N where N is the block-size in bytes.
Operations on documents. We recall here the block-wise space
of modiﬁcation MB, as deﬁned for block-wise incremental cryp-
tographic schemes. We borrow the notations deﬁned in [4] and
slightly redeﬁne the main modiﬁcation operations M ∈ MB
into the more general operations M = (blocks_substitute, i, j, β)
which substitute block i + 1 to block j − 1 (included) by β, a string
(possibly empty) constituted of an integral number of blocks.
505Incremental cryptographic schemes. We recall here the very
generic deﬁnition of an incremental cryptographic algorithm as
presented by Bellare et al [2], with the same notations.
Deﬁnition 1. An incremental cryptographic scheme is speciﬁed
by a 4-tuple of algorithms Π = (K,T ,I,C) in which:
• K, the key generation algorithm, is a probabilistic polyno-
mial time algorithm that takes as input a security parameter
k and returns a pair (K(cid:48), K(cid:48)(cid:48)) of keys called the transforma-
tion key and the conjugate key respectively.
• T , the tranformation algorithm, is a probabilistic polynomial
time (p.p.t.) algorithm that takes as input K(cid:48) and document
D ∈(cid:80)+ and returns a cryptographic form TK(cid:48) (D).
• I, the incremental update algorithm, is a p.p.t. algorithm
that takes as input a key K(cid:48), (a document D), modiﬁcation
operation M ∈ MB, and the cryptographic form t (related
to D) and returns the modiﬁed cryptographic form t(cid:48).
• C, the conjugate algorithm, is a deterministic polynomial time
algorithm that takes as input a key K(cid:48)(cid:48) and a cryptographic
form t = TK(cid:48) (D) and returns either document D or a special
symbol ⊥ to indicate that t is invalid.
These four algorithms of an incremental cryptographic scheme
Π will be denoted, depending on the context, Π = (K,E,I,D)
for an incremental encryption scheme and Π = (K,S,I,V) for
an incremental signature scheme. We can distinguish several types
of incremental cryptosystems: (i) in the asymmetric case : pub-
lic key encryption schemes (digital signature schemes) where the
decryption key K(cid:48)(cid:48) (resp. signature key K(cid:48)) is kept secret, while
the encryption key K(cid:48) (resp. veriﬁcation key K(cid:48)(cid:48)) is public; (ii)
in the symmetric case : modes of encryption, symmetric signa-
ture schemes (Message Authentication Code), or even authenti-
cated encryption schemes that combine encryption and authenti-
cation, where the secret key K(cid:48)(cid:48)(= K(cid:48)) is kept secret.
The above deﬁnition is very simpliﬁed. Regarding certain digital
signatures with appendix or MACs (the list is certainly not exhaus-
tive), the cryptographic form t should be interpreted cautiously as
a couple of elements (D, t(cid:48)) where D is the document and t(cid:48) is the
appendix of the signature (or the tag). In the case of a signature
scheme we will refer by t to the appendix of signature or the tag.
2.2 Security
Indistinguishability. Indistinguishibility measures the unability
for an adversary to distinguish ciphertexts (and updates). We de-
ﬁne an adversary A in a ﬁnd-then-guess game: (i) “ﬁnd” phase:
A makes queries to its encryption oracle OEK(cid:48) and update oracle
OIK(cid:48) and eventually submits to the challenger either a pair of dis-
tinct chosen plaintexts (D0, D1) of same length, or a ciphertext C
with a pair of modiﬁcation operations (M0, M1) (of the same type
and modifying the same amount at the same location); (ii) “guess”
phase: The challenger selects a bit b ∈ {0, 1} uniformly at random,
encrypts the message Db with EK(cid:48) or applies the update Mb on C
with IK(cid:48), and the result is given to A which may then make more
oracle queries. Finally A must output a guess for the value of b. We
deﬁne the advantage of the adversary as twice the probability of a
correct guess, minus 1/2. We say that Π is (t, qe, µ, qinc, )-secure
in the sense of indistinguishability if, for any adversary A which
runs in time t, making qe queries to the encryption oracle OEK(cid:48)
and qi valid queries to the update oracle OIK(cid:48) , the advantage of
A is negligible. Note that in asymmetric case the encryption and
incremental update oracles are replaced by the public key K(cid:48).
Unforgeability. Existential unforgeability measures the unability
for an adversary to generate a pair (D, s) where D is a document
that has not been signed by the signing oracle, nor issued from the
update oracle, and s is a signature on that document. The adver-
sary A has access to signature oracle OSK(cid:48) and incremental up-
date oracle OIK(cid:48) . We deﬁne the advantage of the adversary as the
probability of a valid forgery, that is, for which VK(cid:48)(cid:48) (s) (cid:54)= ⊥. We
say that Π is (t, qs, qinc, )-secure in the sense of unforgeability
if, for any adversary A which runs in time t, making qs queries to
the signing oracle OSK(cid:48) and qi valid queries to the update oracle
OIK(cid:48) , the advantage of A is negligible.
Perfect privacy. An incremental cryptographic scheme is oblivi-
ous [10, 4, 2] if it produces updated cryptographic forms that are
indistinguishable from original ones. Suppose that Alice sends a
signature (or ciphertext) to Bob. The latter might be disappointed
if he realizes that the signed (or ciphered) document has been ob-
tained by an incremental update. This problem could arise with
documents such as commitments, contracts whose cryptographic
forms must not disclose any information at all about modiﬁcations,
not even the fact that update operations have been performed.
3. BYTE-WISE INCREMENTAL CRYPTO-
GRAPHIC SCHEMES
If there exist incremental update cryptographic algorithms which
support operations such as insertion, with a cost proportional to
the number of blocks to insert, and deletion with a constant cost,
this complexity is valid only when the resulting bytestring does not
have problem of alignement, that is to say, when the size of the data
being the subject of one of these two operations is a multiple of the
block-size.
We illustrate solutions by taking as example a block-based in-
cremental encryption scheme. A simple way to deal with such an
incremental scheme is to use only one byte per block but this low
payload implies an excessive cost for both the expansion of the ci-
phertext and the number of block-cipher evaluations. Another so-
lution is to allow the insertion of a variable size of data without en-
suring contiguity. Indeed, a plaintext block might be partially used
before being ciphered, what would eliminate the need to recipher
all following subsequent blocks since data are not re-aligned. Such
a method is used by [9], in which a document is divided into parts
whose sizes follow a bounded geometric distribution. The parti-
tioned document is ciphered thanks to the authenticated encryption
scheme RPC [4]. By using this mode, each variable-length block
is encapsulated in the usable part (payload) of a RPC-block. The
bound for the number of bytes is determined by the permissible
payload. Nevertheless, this method is not without defects. First, the
absence of standard padding for each encapsulated block renders
this authenticated encryption not secure. Then, the upper bound
for the distribution could be arbitrarily chosen so that we ﬁnd a
tradeoff between the expansion of the ciphertext, the total number
of cipher/decipher evaluations for the encryption/decryption algo-
rithm and the number of cipher evaluations for the update algo-
rithm. Finally, the major defect is that the update algorithm does
not take into account the readjustement of the distribution. This is
even more drastic when the insertions are quite frequent and con-
cern small amount of data.
An incremental variable-length block cryptographic scheme must
ensure: (i) The obliviousness since statistical tests could reveal out-
lying regions in the sequence of variable-length parts and therefore
the locations of insertions; (ii) Relatively to the size of the message,
the conservation (on average) of the overhead for the cryptographic
506transformation size and the number of operations to perform in the
conjugate algorithm.
Deﬁnition 2. An incremental variable-length block-based cryp-
tographic scheme is perfectly private if and only if:
1. The distribution of blocks’ lengths does not depend on infor-
mation about modiﬁcations performed. Update operations
are implemented so that this distribution is preserved.
2. The underlying incremental mode used to operate these blocks
is itself perfectly private.
3.1 Variable-length block partition algorithm
The bytes string D is divided into variable-sized blocks (Bi)i=0..n
whose corresponding lengths (ui)i=0..n are generated from the same
probability distribution φ on the set {1, . . . , N}.
For convenience, we deﬁne a P art operation which takes as in-
put the probability distribution φ, the document D and outputs a
partitioned form D (accompanied of the corresponding sequence
of lengths):
P [a, b]
Bi
D = B = (Bi)
ui = |Bi|
ui
φ← {1, . . . , N}
i
u = (ui)
|B| = |u|
B(cid:48)
B(cid:48) = (B(cid:48)
i)
i = |B(cid:48)
i|
u(cid:48)
u(cid:48) = (u(cid:48)
i)
k0, k1
u−∞, u+∞
B−∞, B+∞
substring of P from the byte a up to the
byte b (included), b ≥ a ≥ 1
variable length block belonging to the par-
tition of D
list of Bi forming the partition
size of Bi, in number of bytes
ui is drawn from the set {1, . . . , N} ac-
cording to φ
list of variable lengths ui