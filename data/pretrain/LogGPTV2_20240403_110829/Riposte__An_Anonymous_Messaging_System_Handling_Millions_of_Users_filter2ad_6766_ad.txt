sA ←R Sx, and a single random PRG seed s∗
←R S.
(cid:2)x
Given bA and sA, we deﬁne bB and sB as:
bA = (b0, . . . , b(cid:2)x
bB = (b0, . . . , ¯b(cid:2)x
sA = (s0, . . . , s(cid:2)x
sB = (s0, . . . , s∗
(cid:2)x
, . . . , bx−1)
, . . . , bx−1)
, . . . , sx−1)
, . . . , sx−1)
(cid:2)x ).
That is, the vectors bA and bB (similarly sA and sB)
differ only at index (cid:2)x.
Let m · e(cid:2)y be the vector in Fy of all zeros except that it
has value m at index (cid:2)y. Deﬁne v ← m· e(cid:2)y + G(s(cid:2)x ) +
G(s∗
The output DPF keys are:
kA = (bA, sA, v)
) → m(cid:2). Interpret k as a tuple (b, s, v). To
• Eval(k, (cid:2)(cid:2)
evaluate the PRF at index (cid:2)(cid:2), ﬁrst write (cid:2)(cid:2) as an ((cid:2)(cid:2)
x, (cid:2)(cid:2)
y)
y ∈ Zy, and (cid:2)(cid:2)
x ∈ Zx, (cid:2)(cid:2)
tuple such that (cid:2)(cid:2)
xy + (cid:2)(cid:2)
= (cid:2)(cid:2)
y. Use
the PRG G to stretch the (cid:2)(cid:2)
x-th seed of s into a length-y
x]). Return m(cid:2) ← (g[(cid:2)(cid:2)
vector: g ← G(s[(cid:2)(cid:2)
x]v[(cid:2)(cid:2)
y] + b[(cid:2)(cid:2)
y]).
Figure 2 graphically depicts how Eval stretches the keys
kB = (bB, sB, v)
into a table of x × y ﬁeld elements.
Correctness. We prove correctness of the scheme in Ap-
pendix B.
Privacy. The privacy property requires that there exists an
efﬁcient simulator that, on input “A” or “B,” outputs samples
from a distribution that is computationally indistinguishable
from the distribution of DPF keys kA or kB.
The simulator Sim simulates each component of the DPF
key as follows: It samples b ←R {0, 1}x, s ←R Sx, and
v ←R Fy. The simulator returns (b, s, v).
We must now argue that the simulator’s output distribution
is computationally indistinguishable from that
induced by
the distribution of a single output of Gen. Since the b and
s vectors outputted by Gen are random, the simulation is
perfect. The v vector outputted by Gen is computationally
indistinguishable from random, since it is padded with the
output of the PRG seeded with a seed unknown to the holder of
the key. An efﬁcient algorithm to distinguish the simulated v
vector from random can then also distinguish the PRG output
from random.
Key Size. A key for this DPF scheme consists of: a vector
in {0, 1}x, a vector in Sx, and a vector in Fy. Let α be the
number of bits required to represent an element of S and let
β be the number of bits required to represent an element of
F. The total length of a key is then:
|k| = (1 + α)x + βy
For ﬁxed spaces S and F, we can ﬁnd the optimal choices of
x and y to minimize the key length. To do so, we solve:
xy ≥ L
(cid:11)
((1 + α)x + βy)
subject to
min
x,y
and conclude that the optimal values of x and y are:
β
√
√
L and
x = c
y =
1
c
L where
c =
.
1 + α
328328
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:16 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 2: Left: We represent the output of Eval as an x × y matrix of ﬁeld elements. Left-center: Construction of the v vector
used in the DPF keys. Right: using the v, s, and b vectors, Eval expands each of the two keys into an x × y matrix of ﬁeld
elements. These two matrices sum to zero everywhere except at ((cid:2)x, (cid:2)y) = (3, 4), where they sum to m.
The key size is then O(
√
L).
When using a database table of one million rows in length
(L = 220), a row length of 1 KB per row (F = F28192), and a
PRG seed size of 128 bits (using AES-128, for example) the
keys will be roughly 263 KB in length. For these parameters,
the keys for the naïve construction (Section III-A) would be
1 GB in length. Application of efﬁcient DPFs thus yields a
4,000× bandwidth savings in this case.
Computational Efﬁciency. A second beneﬁt of this scheme
is that both the Gen and Eval routines are computationally
efﬁcient, since they just require performing ﬁnite ﬁeld addi-
tions (i.e., XOR for binary ﬁelds) and PRG operations (i.e.,
computations of the AES function). The construction requires
no public-key primitives.
D. An s-Server Scheme Tolerating s − 1 Malicious Servers
√
The (2, 1)-DPF scheme described above achieved a key
L) bits using only symmetric-key primitives. The
size of O(
limitation of that construction is that it only maintains privacy
when a single key is compromised. In the context of a write-
private database scheme, this means that the construction can
only maintain anonymity in the presence of a single mali-
cious server. It would be much better to have a write-private
database scheme with s servers that maintains anonymity in
the presence of s−1 malicious servers. To achieve this stronger
security notion, we need a bandwidth-efﬁcient (s, s − 1)-
distributed point function.
In this section, we construct an (s, s − 1)-DPF where each
key has size O(
L). We do so at the cost of requiring more
expensive public-key cryptographic operations, instead of the
symmetric-key operations used in the prior DPF. While the
(2, 1)-DPF construction above directly follows the work of
Chor and Gilboa [16], this (s, s−1)-DPF construction is novel,
as far as we know.
√
This construction uses a seed-homomorphic pseudorandom
generator [3], [10], [63], to split the key for the pseudo-
random generator G across a collection of s DPF keys.
Deﬁnition
seed-
homomorphic PRG is a pseudo-random generator G
mapping seeds in a group (S,⊕) to outputs in a group (G,⊗)
(Seed-Homomorphic
PRG). A
6
with the additional property that for any s0, s1 ∈ S:
G(s0 ⊕ s1) = G(s0) ⊗ G(s1)
It is possible to construct a simple seed-homomorphic PRG
from the decision Difﬁe-Hellman (DDH) assumption [10],
[63]. The public parameters for the scheme are list of y
generators chosen at random from an order-q group G, in
which the DDH problem is hard [9]. For example, if G is
an elliptic curve group [57], then the public parameters will
be y points (P0, . . . , Py−1) ∈ Gy. The seed space is Zq and
the generator outputs vectors in Gy. On input s ∈ Zq, the
generator outputs (sP0, . . . , sPy−1). The generator is seed-
homomorphic because, for any s0, s1 ∈ Zq, and for all
i ∈ {1, . . . , y}: s0Pi + s1Pi = (s0 + s1)Pi.
As in the prior DPF construction, we ﬁx a DPF domain size
L, and integers x and y such that xy ≥ L. The construction
requires a seed-homomorphic PRG G : S (cid:12)→ Gy, for some
group G of prime order q.
For consistency with the prior DPF construction, we will
write the group operation in G using additive notation. Thus,
the group operation applied component-wise to vectors u, v ∈
Gy results in the vector (u + v) ∈ Gy. Since G has order q,
qA = 0 for all A ∈ G.
The algorithms comprising the (s, s − 1)-DPF are:
• Gen((cid:2), m) → (k0, . . . , ks−1). Compute integers (cid:2)x ∈ Zx
and (cid:2)y ∈ Zy such that (cid:2) = (cid:2)xy + (cid:2)y. Sample random
integer-valued vectors b0, . . . , bs−2 ←R (Zq)x, random
vectors of PRG seeds s0, . . . , ss−2 ←R Sx, and a single
random PRG seed s∗ ←R S.
Select bs−1 ∈ (Zq)x such that Σ
s−1
k=0bk = e(cid:2)x (mod q)
and select ss−1 ∈ Sx such that Σ
k=0sk = s∗ · e(cid:2)x ∈ Gx.
s−1
Deﬁne v ← m · e(cid:2)y
The DPF key for server i ∈ {0, . . . , s − 1} is ki =
(bi, si, v).
) → m(cid:2). Interpret k as a tuple (b, s, v). To
• Eval(k, (cid:2)(cid:2)
evaluate the PRF at index (cid:2)(cid:2), ﬁrst write (cid:2)(cid:2) as an ((cid:2)(cid:2)
x, (cid:2)(cid:2)
y)
x ∈ Zx, (cid:2)(cid:2)
y ∈ Zy, and (cid:2)(cid:2)
= (cid:2)(cid:2)
tuple such that (cid:2)(cid:2)
xy + (cid:2)(cid:2)
y. Use
the PRG G to stretch the (cid:2)(cid:2)
x-th seed of s into a length-y
x]). Return m(cid:2) ← (g[(cid:2)(cid:2)
vector: g ← G(s[(cid:2)(cid:2)
y] + b[(cid:2)(cid:2)
x]v[(cid:2)(cid:2)
y]).
We omit correctness and privacy proofs, since they follow
exactly the same structure as those used to prove security of
− G(s∗
).
329329
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:16 UTC from IEEE Xplore.  Restrictions apply. 
our prior DPF construction. The only difference is that correct-
ness here relies on the fact that G is a seed-homomorphic PRG,
rather than a conventional PRG. As in the DPF construction
of Section IV-C, the keys here are of length O(
√
L).
Computational Efﬁciency. The main computational cost of
this DPF construction comes from the use of the seed-
homomorphic PRG G. Unlike a conventional PRG, which
can be implemented using AES or another fast block cipher
in counter mode, known constructions of seed-homomorphic
PRGs require algebraic groups [63] or lattice-based cryptog-
raphy [3], [10].
When instantiating the (s, s− 1)-DPF with the DDH-based
PRG construction in elliptic curve groups, each call to the
DPF Eval routine requires an expensive elliptic curve scalar
multiplication. Since elliptic curve operations are, per byte,
orders of magnitude slower than AES operations, this (s, s −
1)-DPF will be orders of magnitude slower than the (2, 1)-
DPF. Security against an arbitrary number of malicious servers
comes at the cost of computational efﬁciency, at least for these
DPF constructions.
With DPFs, we can now construct a bandwidth-efﬁcient
tolerates one malicious
write-private database scheme that
server (ﬁrst construction) or s − 1 out of s malicious servers
(second construction).
V. PREVENTING DISRUPTORS
The ﬁrst-attempt construction of our write-private database
scheme (Section III-A) had two limitations: (1) client write
requests were very large and (2) malicious clients could cor-
rupt the database state by sending malformed write requests.
We addressed the ﬁrst of these two challenges in Section IV.
In this section, we address the second challenge.
A client write request in our protocol just consists of a
collection of s DPF keys. The client sends one key to each of
the s servers. The servers must collectively decide whether the
collection of s keys is a valid output of the DPF Gen routine,
without revealing any information about the keys themselves.
One way to view the servers’ task here is as a secure multi-
party computation [41], [78]. Each server i’s private input is
its DPF key ki. The output of the protocol is a single bit,
which determines if the s keys (k0, . . . , ks−1) are a well-
formed collection of DPF keys.
Since we already rely on servers for availability (Sec-
tion II-B), we need not protect against servers maliciously
trying to manipulate the output of the multi-party protocol.
Such manipulation could only result in corrupting the database
(if a malicious server accepts a write request that it should have
rejected) or denying service to an honest client (if a malicious
server rejects a write request that it should have accepted).
Since both attacks are tantamount to denial of service, we
need not consider them.
We do care, in contrast, about protecting client privacy
against malicious servers. A malicious server participating in
the protocol should not gain any additional information about
the private inputs of other parties, no matter how it deviates
from the protocol speciﬁcation.
We construct two protocols for checking the validity of
client write requests. The ﬁrst protocol is computationally
inexpensive, but requires introducing a third non-colluding
party to the two-server scheme. The second protocol requires
relatively expensive zero-knowledge proofs [30], [42], [43],
[70], but it maintains security when all but one of s servers is
malicious. Both of these protocols must satisfy the standard
notions of soundness, completeness, and zero-knowledge [12].
A. Three-Party Protocol
Our ﬁrst protocol for detecting malformed write requests
works with the (2, 1)-DPF scheme presented in Section IV-C.
The protocol uses only hashing and ﬁnite ﬁeld additions,
so it is computationally inexpensive. The downside is that
it requires introducing a third audit server, which must not
collude with either of the other two servers.
We ﬁrst develop a three-party protocol called AlmostEqual
that we use as a subroutine to implement the full write request
validation protocol. The AlmostEqual protocol takes place
between three parties: server A, server B, and an audit server.
Server A’s private input is a vector vA ∈ Fn and server B’s
private input is a vector vB ∈ Fn. The audit server has no
private input. The output of the AlmostEqual protocol is “1”
bit if vA and vB differ at exactly one index and is “0” bit
otherwise. As with classical secure multi-party computations,
the goal of the protocol is to accurately compute the output
without leaking any extraneous information about the players’
private inputs [29], [41], [78]. We use AlmostEqual in such
a way that, whenever the client’s write request is properly
formed and whenever no two servers collude, the output of the
protocol will be “1.” Thus, we need only prove the protocol
secure in the case when the output is “1.”
We denote an instance of
the three-party protocol as
AlmostEqual(vA, vB), where the arguments denote the two
secret inputs of party A and party B. The protocol proceeds
as follows:
1) Servers A and B use a coin-ﬂipping protocol [8] to
sample n hash functions h0, . . . , hn−1 from a family
of pairwise independent hash functions H [55] having
domain F. The servers also agree upon a random “shift”
value f ∈ Zn.
the values mi ← hi(vA[i])