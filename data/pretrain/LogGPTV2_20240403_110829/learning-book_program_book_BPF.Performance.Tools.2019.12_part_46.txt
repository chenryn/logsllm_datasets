### 8.3 BPF Tools

#### 8.3.1 xfsdist

The `xfsdist` tool in BCC is used to generate histograms for read, write, and open operations on the XFS file system. The output provides a detailed distribution of operation latencies, indicating the current workload characteristics.

**Histograms:**

- **Reads:**
  - 0 -> 1 µs: 414
  - 2 -> 3 µs: 1327
  - 4 -> 7 µs: 22415
  - 16 -> 31 µs: 65348
  - 32 -> 63 µs: 5955
  - 64 -> 127 µs: 1409
  - 128 -> 255 µs: 2B
  - 256 -> 511 µs: 253
  - 512 -> 1023 µs: 98
  - 1024 -> 2047 µs: 89
  - 2048 -> 4095 µs: 39
  - 4096 -> 8191 µs: 37
  - 8192 -> 16383 µs: 27
  - 65535 µs: 21
  - 65536 -> 131071 µs: 10

- **Writes:**
  - 0 -> 1 µs: 7557
  - 2 -> 3 µs: 6
  - 4 -> 7 µs: 22415
  - 16 -> 31 µs: 65348
  - 32 -> 63 µs: 5955
  - 64 -> 127 µs: 1409
  - 128 -> 255 µs: 2B
  - 256 -> 511 µs: 253
  - 512 -> 1023 µs: 98
  - 1024 -> 2047 µs: 89
  - 2048 -> 4095 µs: 39
  - 4096 -> 8191 µs: 37
  - 8192 -> 16383 µs: 27
  - 65535 µs: 21
  - 65536 -> 131071 µs: 10

- **Opens:**
  - 0 -> 1 µs: 7557
  - 2 -> 3 µs: 6
  - 4 -> 7 µs: 22415
  - 16 -> 31 µs: 65348
  - 32 -> 63 µs: 5955
  - 64 -> 127 µs: 1409
  - 128 -> 255 µs: 2B
  - 256 -> 511 µs: 253
  - 512 -> 1023 µs: 98
  - 1024 -> 2047 µs: 89
  - 2048 -> 4095 µs: 39
  - 4096 -> 8191 µs: 37
  - 8192 -> 16383 µs: 27
  - 65535 µs: 21
  - 65536 -> 131071 µs: 10

**Interpretation:**
- The read histogram shows a bimodal distribution, with many reads taking less than seven microseconds and another mode at 16 to 31 microseconds. These fast reads are likely served from the page cache.
- The slowest reads (65 to 131 milliseconds) may be from storage devices and involve queueing.
- The write histogram indicates that most writes are in the 16 to 31-microsecond range, suggesting the use of write-back buffering.

**Command Line Usage:**
```bash
xfsdist [options] [interval [count]]
```
- **Options:**
  - `-m`: Print output in milliseconds (default is microseconds).
  - `-p PID`: Measure this process only.
- **Interval and Count:** Allow these histograms to be studied over time.

**bpftrace Code:**
```c
#!/usr/local/bin/bpftrace
BEGIN
{
    printf("Tracing XFS operation latency... Hit Ctrl-C to end.\n");
}

kprobe:xfs_file_read_iter,
kprobe:xfs_file_write_iter,
kprobe:xfs_file_open,
kprobe:xfs_file_fsync
{
    @start[tid] = nsecs;
    @name[tid] = func;
}

kretprobe:xfs_file_read_iter,
kretprobe:xfs_file_write_iter,
kretprobe:xfs_file_open,
kretprobe:xfs_file_fsync
/ [pT]re=8/
{
    @latency[@name[tid]] = hist((nsecs - @start[tid]) / 1000);
    delete(@start[tid]);
    delete(@name[tid]);
}

END
{
    clear(@start);
    clear(@name);
}
```

#### 8.3.2 ext4dist

The `ext4dist` tool in BCC works similarly to `xfsdist`, but for the ext4 file system. It generates histograms for read, write, and open operations.

**Output Example:**
```plaintext
 ext4dist.bt
Attaching 9 probes..
Tracing ext4 operation latency... Hit Ctrl-C to end.
us |ext4_sync_file| :
[18, 2K)
[2K, 4K)
[4K, 8K)
[8K, 16K]
...
us |ext4_file_write_iter| :
[1]
[2, 4)
[4, 8)
[8, 16]
...
us |ext4_file_open| :
[0]
[1]
[2, 4]
[4, 8]
...
```

**bpftrace Code:**
```c
#!/usr/local/bin/bpftrace
BEGIN
{
    printf("Tracing ext4 operation latency... Hit Ctrl-C to end.\n");
}

kprobe:ext4_file_read_iter,
kprobe:ext4_file_write_iter,
kprobe:ext4_file_open,
kprobe:ext4_sync_file
{
    @start[tid] = nsecs;
    @name[tid] = func;
}

kretprobe:ext4_file_read_iter,
kretprobe:ext4_file_write_iter,
kretprobe:ext4_file_open,
kretprobe:ext4_sync_file
/ [pT]re=8/
{
    @latency[@name[tid]] = hist((nsecs - @start[tid]) / 1000);
    delete(@start[tid]);
    delete(@name[tid]);
}

END
{
    clear(@start);
    clear(@name);
}
```

#### 8.3.3 icstat

`icstat` traces inode cache references and misses and prints statistics every second.

**Example Output:**
```plaintext
Attaching 3 probes...
+ icstat.bt
Tracing icache lookups... Hit Ctrl-C to end.
REFS   HITS   MISS   %
0      0      0      0%
21647  1001   38925  35250  8%  815  806  1%  0  0%
...
```

**bpftrace Code:**
```c
#!/usr/local/bin/bpftrace
BEGIN
{
    printf("Tracing Lcache lookups... Hit Ctrl-C to end.\n");
    printf("%10s %10s %5s\n", "REFS", "HITS", "MISS%");
}

kretprobe:find_inode_fast
{
    @refs++;
    if (retval == 0) {
        @misses++;
    }
}

Interval:s:1
{
    $hits = @refs - @misses;
    $percent = @refs > 0 ? 100 * $hits / @refs : 0;
    printf("%10d %10d %4.1f%%\n", @refs, @misses, $percent);
    clear(@refs);
    clear(@misses);
}

END
{
    clear(@refs);
    clear(@misses);
}
```

#### 8.3.4 bufgrow

`bufgrow` provides insight into the operation of the buffer cache, showing which processes grew the cache by how many Kbytes.

**Example Output:**
```plaintext
+ bufgrow.bt
Attaching 1 probe..
^C
ekb[dd] : 101856
```

**bpftrace Code:**
```c
#!/usr/local/bin/bpftrace
#include <uapi/linux/stat.h>

kprobe:add_to_page_cache_lru
{
    $inode = args->host->i_mode;
    if ($inode & 0x6000) { // match block mode
        @ekb[comm] = sum(4); // page size
    }
}
```

These tools provide valuable insights into file system performance and can help in diagnosing and optimizing I/O operations.