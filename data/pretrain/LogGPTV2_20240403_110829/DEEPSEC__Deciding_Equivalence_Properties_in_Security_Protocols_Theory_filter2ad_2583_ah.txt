ities of the attacker;
• deduction formulas in F reason about potentially de-
ducible terms.
After an output transition, our decision procedure dis-
tinguishes whether the new output term can increase the
deduction capabilities of the attacker. This is done by adding
a formula to F which is then simpliﬁed into a deduction fact,
so that we can easily decide whether
a) it induces a new deducible term (in which case it is
added to K), or
b) it is a consequence of the deduction facts already in K.
More generally we say that (ξ, u)—or simply u—is a
consequence of a set of deduction facts S when u can be
deduced from S (using recipe ξ). The notion of solution
of extended constraint systems carries out this idea: we
say that (Σ, σ) is a solution of (Φ, D, E1, E2, K, F) when
(Φσ, Σ, σ) |= D ∧ E1 ∧ E2 with the two requirements that
1) all recipes in Σ must be a consequence of the attacker
knowledge K;
2) recipes in Σ must be chosen in a uniform way: two
different recipes in the solution must deduce different
protocol terms.
Rule SAT. Le us now present the three case-distinction
rules. We recall that these rules operate on sets of sets of
constraint systems S representing the children partition in
the partition tree. The ﬁrst rule, SAT, helps obtaining the
requirement that n ∈ S shall contain constraint systems with
the same second-order solutions. Thus, the rule will perform
544
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:36 UTC from IEEE Xplore.  Restrictions apply. 
a case distinction on whether solutions of all constraint
systems in the same set n ∈ S are instance of a common
mgs Σ. This is formalised by the rule
)}p
i=1} → S ∪ {Epos,Eneg}
(SAT)
S ∪ {{(Pi,Ci,Ce
with Epos = {(Pi,Ci,Ce
and Eneg = {(Pi,Ci,Ce
i
i :Σ)}p
[E
i
i=1
2 ∧ ¬Σ])}p
i=1
j
where Σ ∈ mgs(Ce
) for some j, and C:Σ is the application
of Σ to C. The deﬁnition of C:Σ is actually a little more
involved than a plain application of substitution—as some
structural invariants have to be maintained for the sake of
the procedure—but we omit details for readability.
This rule is also applied to solve syntactic disequations
and formulas in F. For this usage, Σ is not computed as a
simple mgs of Ce
j but embodies additionial constraints. For
exemple, if E1(Ce
) contains the disequation x (cid:15)=? v, the
rule will partition the solutions depending on whether they
satisfy or such disequations. This is done by considering the
mgs of Ce
j σ where σ = {x → v}.
j
Rule EQ. The second rule, EQ, focuses on static equivalence
between constraint systems of a same node of the partition
tree. For instance, given two deduction facts ξ (cid:20)? u, ζ (cid:20)? v
in some attacker knowledge K, the rule distinguishes so-
lutions in which the two deduction facts deduce the same
protocol term.
where
(EQ)
Hence the formula ψi, stating that sdec(ξΣ, XΣ) should
deduce a message:
ψi = ∀X, x, y.(sdec(ξΣ, XΣ) (cid:20)?
x)
vi ∧ senc(x, y) =?
⇐ (y =?
ui)
) and (XΣ, vi) is a consequence of
i
i :Σ) and D(Ce
where ξ (cid:20)? ui ∈ K(Ce
K(Ce
i :Σ).
Appendix D.
Bounding the size of solutions
One key argument to obtain the coNEXP complexity is
the bound on the sizes of mgs’ of partition trees (theorem 8).
Let us give some insight about this result. In all case-
distinction rules, we apply mgs’ Σ of constraint systems.
Therefore we need to bound
1) the size of such substitutions Σ
2) the number of applications of the three rules.
We only detail the ﬁrst (polynomial) bound here and
omit the second (exponential) bound due to lack of space.
Technically, we use a measure counting the protocol sub-
terms not already deduced by a recipe in E2, K and D:
for all ξ ∈ st c(Ce)
ξ /∈ X 2, (ξ, t) is
not consequence of
K(Ce) and D(Ce)
⎧⎪⎨
⎪⎩t ∈ P T (Ce) (cid:2) X 1
M(Ce) =
⎫⎪⎬
⎪⎭
(cid:19)(cid:19)(cid:19)(cid:19)(cid:19)(cid:19)(cid:19)
(cid:19)(cid:19)(cid:19)(cid:19)(cid:19)(cid:19)(cid:19)
(cid:19)(cid:19)(cid:19)(cid:19)(cid:19)(cid:19)(cid:19)
• μi = mgu(Ei(Ce)|=) for i ∈ {1, 2};
• P T (Ce) is the set of protocol subterms in Φ(Ce)μ1,
K(Ce)μ1, D(Ce)μ1 and μ1;
• st c(Ce) is a set of recipes subterms of img(μ2) directly
consequence of K(Ce)μ2 and D(Ce).
The important argument is that this measure decreases
by application of mgs, namely
∀Σ ∈ mgs(Ce), M(Ce:Σ) (cid:3) M(Ce)
This relation also holds for any constraint systems with
the same recipe structure as Ce, i.e. constraint systems that
differs from Ce by its protocol terms but not its recipes.
In particular, in all case-distinction rules described in the
previous appendix, we have
∀i ∈ Np, M(Ce
i :Σ) (cid:3) M(Ce
i
)
Additionally, the growth of st c(Ce) after application of mgs
can also be bounded—with a dependency in |F|. More
precisely, if α the maximal arity of F, we proved that for
all Σ ∈ mgs(Ce):
|R(Ce:Σ)| − |R(Ce)| (cid:3) α(M(Ce) − M(Ce:Σ))
Let us then consider the two initial processes P1 and P2
for which the procedure is intended to generate a partition
tree. Let us also consider a constraint system C in some
node of T . Seeing C as an extended constraint system where
K(C) = ∅ and E2(C) = (cid:25), we easily obtain
M(Ce) (cid:3) M(C)
and M(C) (cid:3) |P T (C)|
S ∪ {{(Pi,Ci,Ce
with Epos = {(Pi,Ci,Ce
and Eneg = {(Pi,Ci,Ce
i
)}p
i=1} → S ∪ {Epos,Eneg}
i :Σ[F ∪ {ψi}])}p
2 ∧ ¬Σ])}p
[E
i=1
i
i=1
where Σ ∈ mgs(Ce
facts (ξ (cid:20)? u), (ζ (cid:20)? v) ∈ K(Ce
recipes ξ and ζ should deduce the same protocol terms:
j mgu(u, v)) for some j and deduction
). The formulas ψi state that
j
ψi = (ξΣ =?
f ζΣ ⇐ ui =?
vi)
where (ξ (cid:20)? ui), (ζ (cid:20)? vi) ∈ K(Ce
).
i
Rule REW. The third rule, REW, focuses on intruder knowl-
edge, that is K. Typically, when the last symbolic transition
is an output, the rule applies rewrite rules on this output to
determine whether the attacker can deduce new messages
from it. For example, sdec(senc(x, y), y) → x leads to
)}p
i=1} → S ∪ {Epos,Eneg}
(REW)
S ∪ {{(Pi,Ci,Ce
with Epos = {(Pi,Ci,Ce
and Eneg = {(Pi,Ci,Ce
i
i :Σ[F ∪ {ψi}])}p
2 ∧ ¬Σ])}p
[E
i=1
i
i=1
where for some j, (ξ (cid:20)? u) ∈ K(Ce
Ce
(cid:2) = Ce
[D ∧ X (cid:20)?
y][E
j
j
j
), Σ = mgs(Ce
(cid:2)) with
1 ∧ senc(x, y) =?
u]
j
with X, x, y fresh. Here the solutions Ce
solutions of Ce
represents the
j in which we can apply a decryption on ξ.
(cid:2)
j
545
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:36 UTC from IEEE Xplore.  Restrictions apply. 
({{P 1}},∅)
({{Q}},∅)
c(1)
({{c(cid:4)0(cid:5)}},∅)
({{c(cid:4)proj2((cid:4)1, 1(cid:5))(cid:5)}},∅)
(cid:2)(cid:3)(cid:3)
if proj2((cid:4)1, 1(cid:5)) = 1 then c(cid:4)0(cid:5)
else c(cid:4)proj2((cid:4)1, 1(cid:5))(cid:5)
({{c(cid:4)proj2((cid:4)1, 1(cid:5))(cid:5)}},∅)
c(cid:5)ax1(cid:6)
(cid:4)(cid:4)
(cid:5)
c(cid:5)ax1(cid:6)
,∅
Figure 9: A concrete witness of ({{P 1}},∅) (cid:15)≈(cid:2) ({{Q}},∅).
Finally, from the the symbolic semantics (ﬁg. 4), we can
see that a protocol term in C is a protocol term in P1 or P2
on which a mgu σ has been applied. This lead to
|P T (C)| (cid:3) 2|P1, P2|dag(1 + |R|dag)
Above, we showed the relation between |R(Ce:Σ)| and
|R(Ce)| when Σ ∈ mgs(Ce). However, for case distinction
rules, we also compute most general solutions of the con-
straint system with additional deduction facts and protocol
term equations. Hence, to compute |R(Ce:Σ)|, we need to
also consider the terms introduced by rewrite rules and
disequations. For instance, with the rule REW, we have
that for all i, |R(Ce
)| (cid:3) |F|(2|P1, P2|dag(1 +
|R|dag) +|R|dag(2 +|F|)). This shows that the DAG size of
recipes in constraint systems increases at most polynomially
in P1,P2, F and R.
i :Σ)| − |R(Ce
i
Appendix E.
Decidability of labelled bisimilarity
In the body of the paper, we outlined quite precisely the
decision procedure for trace equivalence through lemma 7:
we explain here how to adapt this approach to labelled
bisimilarity. Typically, a witness of A (cid:15)≈t B is a sequence
of actions tr, and a set of pairs of recipes—witnessing
violations of static equivalence. The case of bisimilarity is
more involved. Borrowing vocabulary from game’s theory,
a witness that A (cid:15)≈(cid:2) B is an adversary’s winning strategy in
the bisimulation game. Such a strategy can be modelled as
a tree whose nodes are labelled by pairs of processes:
1) for each node n labelled (A, B) such that A ∼ B, the
attacker shall be able to choose an action a ∈ A and
either a transition A a−→
(cid:2) has been chosen. Then
(cid:2)) where
c A
2) say, for example, that A a−→
(cid:2)
the labels of the children of n are all (A
B a=⇒c B
(cid:2) or B a−→
c A
(cid:2) and A
(cid:2) ∼ B
, B
(cid:2);
c B
(cid:2).
Example 9. Consider the running examples P 1 and Q. A
witness of ({{P1}},∅) (cid:15)≈(cid:2) ({{Q}},∅) is depicted in ﬁg. 9.
First, the adversary inputs (cid:5)1, 1(cid:6), selecting the transition
(Q,∅) c((cid:4)1,1(cid:5))
−−−−−→
c
({{c(cid:5)proj2((cid:5)1, 1(cid:6))(cid:6)}},∅)
Whatever the answer of the defender, the adversary can
then reach a leave of the tree by choosing the transition
({{0}},{ax1 (cid:9)→ 1})
({{c(cid:5)proj2((cid:5)1, 1(cid:6))(cid:6)}},∅) c(cid:4)ax1(cid:5)−−−−→
c
The defender can indeed not answer to this move without
violating static equivalence.
As for trace equivalence we can show that we can decide
≈(cid:2) for convergent subterm destructor
labelled bisimulation in coNEXP.
Theorem 11. Equiv
rewriting systems is in coNEXP.
Proof overview. Our ﬁrst goal is to show that there exists
p such that whenever ({{P1}},∅) (cid:15)≈(cid:2) ({{P2}},∅) then there
exists a witness w such that |w|dag < 2|P1,P2,R|p
dag. We
therefore introduce the notion of symbolic witness: a
symbolic witness are similar to subtrees of the partition
tree PTree(P1, P2) where
• internal nodes n contain a pair of processes of Γ(n);
• leaves contain a single process (witnessing impossibil-
ity for the defender to answer to the attacker’s move).
A solution of a symbolic witness is a function that
maps each node n to a second-order solution of Γ(n).
To ensure coherence of a solution we require that the
solution of child nodes extend the solution of their parent.
We can then show that ({{P1}},∅) (cid:15)≈(cid:2) ({{P2}},∅) iff there
exists a symbolic witness with non-empty solution.
Then, relying on theorem 8 just as for trace equiv-
alence, we want
to show that any symbolic witness
with non-empty solution entails existence of a concrete
witness w such that |w|dag < 2|P1,P2,R|p
dag. However, a
solution of a symbolic witness requires that the solution
of each child extends the solution of the parent—which
is not guaranteed by the deﬁnition of partition trees in
general. Fortunately, our construction appears to ensure
the existence of such a solution of the parent node while
preserving the exponential size.
Given the concrete witness we obtain a straightfor-
ward procedure for non-bisimilarity running in NEXP:
1) We ﬁrst guess the witness w (structure only). As
mentionned above it sufﬁcies to guess w of expo-
nential size.
2) Then we check validity of w. This requires to ex-
plore the possibly-exponential number of branches
of w and to verify an exponential number of static
equivalences (whose frames are at most of exponen-
tial size). Therefore, checking non-validity of w can
indeed be performed in non-deterministic exponen-
tial time—since static equivalence is coNP.
546
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:36 UTC from IEEE Xplore.  Restrictions apply.