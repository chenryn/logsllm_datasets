List of privileges
This value contains the list of privileges that 
the service requires to function. The SCM 
computes their union when creating the token 
for the shared process related to this service, if 
any.
Se
cu
rit
y
Security 
descriptor
This value contains the optional security 
descriptor that defines who has what access to 
the service object created internally by the 
SCM. If this value is omitted, the SCM 
applies a default security descriptor.
La
un
ch
SERVICE_LAUN
CH_PROTECTE
D_NONE (0x0)
The SCM launches the service unprotected 
(default value).
Pr
ot
ec
te
d
SERVICE_LAUN
CH_PROTECTE
D_WINDOWS 
(0x1)
The SCM launches the service in a Windows 
protected process.
SERVICE_LAUN
CH_PROTECTE
D_WINDOWS_ 
LIGHT (0x2)
The SCM launches the service in a Windows 
protected process light.
SERVICE_LAUN
CH_PROTECTE
D_ANTIMALWA
RE_LIGHT (0x3)
The SCM launches the service in an 
Antimalware protected process light.
SERVICE_LAUN
CH_PROTECTE
D_APP_LIGHT 
(0x4)
The SCM launches the service in an App 
protected process light (internal only).
Us
er
Se
rvi
ce
Fl
ag
s
USER_SERVICE
_FLAG_DSMA_
ALLOW (0x1)
Allow the default user to start the user service.
USER_SERVICE
_FLAG_NONDS
MA_ ALLOW 
(0x2)
Do not allow the default user to start the 
service.
Sv
c
H
os
tS
pli
0 or 1 (TRUE or 
FALSE)
When set to, 1 prohibits the SCM to enable 
Svchost splitting. This value applies only to 
shared services.
tD
isa
bl
e
Pa
ck
ag
eF
ull
N
a
m
e
String
Package full name of a packaged service.
A
pp
Us
er
M
od
elI
d
String
Application user model ID (AUMID) of a 
packaged service.
Pa
ck
ag
e
Or
igi
n
PACKAGE_ORI
GIN_UNSIGNED 
(0x1)
PACKAGE_ORI
GIN_INBOX 
(0x2)
PACKAGE_ORI
GIN_STORE 
(0x3)
These values identify the origin of the AppX 
package (the entity that has created it).
PACKAGE_ORI
GIN_DEVELOP
ER_UNSIGNED 
(0x4)
PACKAGE_ORI
GIN_DEVELOP
ER_SIGNED 
(0x5)
 Note
The SCM does not access a service’s Parameters subkey until the service
is deleted, at which time the SCM deletes the service’s entire key,
including subkeys like Parameters.
Notice that Type values include three that apply to device drivers: device
driver, file system driver, and file system recognizer. These are used by
Windows device drivers, which also store their parameters as registry data in
the Services registry key. The SCM is responsible for starting non-PNP
drivers with a Start value of SERVICE_AUTO_START or
SERVICE_DEMAND_START, so it’s natural for the SCM database to include
drivers. Services use the other types, SERVICE_WIN32_OWN_PROCESS
and SERVICE_WIN32_SHARE_PROCESS, which are mutually exclusive.
An executable that hosts just one service uses the
SERVICE_WIN32_OWN_PROCESS type. In a similar way, an executable
that hosts multiple services specifies the
SERVICE_WIN32_SHARE_PROCESS. Hosting multiple services in a single
process saves system resources that would otherwise be consumed as
overhead when launching multiple service processes. A potential
disadvantage is that if one of the services of a collection running in the same
process causes an error that terminates the process, all the services of that
process terminate. Also, another limitation is that all the services must run
under the same account (however, if a service takes advantage of service
security hardening mechanisms, it can limit some of its exposure to malicious
attacks). The SERVICE_USER_SERVICE flag is added to denote a user
service, which is a type of service that runs with the identity of the currently
logged-on user
Trigger information is normally stored by the SCM under another subkey
named TriggerInfo. Each trigger event is stored in a child key named as the
event index, starting from 0 (for example, the third trigger event is stored in
the “TriggerInfo\2” subkey). Table 10-8 lists all the possible registry values
that compose the trigger information.
Table 10-8 Triggered services registry parameters
Val
ue 
Set
tin
g
Value Name
Value Setting Description
Act
ion
SERVICE_TRIGGER
_ACTION_SERVICE
_ START (0x1)
Start the service when the trigger event 
occurs.
SERVICE_TRIGGER
_ACTION_SERVICE
_ STOP (0x2)
Stop the service when the trigger event 
occurs.
Typ
e
SERVICE_TRIGGER
_TYPE_DEVICE_ 
INTERFACE_ARRIV
AL (0x1)
Specifies an event triggered when a 
device of the specified device interface 
class arrives or is present when the 
system starts.
SERVICE_TRIGGER
_TYPE_IP_ADDRES
Specifies an event triggered when an IP 
address becomes available or 
S_AVAILABILITY 
(0x2)
unavailable on the network stack.
SERVICE_TRIGGER
_TYPE_DOMAIN_JO
IN (0x3)
Specifies an event triggered when the 
computer joins or leaves a domain.
SERVICE_TRIGGER
_TYPE_FIREWALL_
PORT_EVENT (0x4)
Specifies an event triggered when a 
firewall port is opened or closed.
SERVICE_TRIGGER
_TYPE_GROUP_PO
LICY (0x5)
Specifies an event triggered when a 
machine or user policy change occurs.
SERVICE_TRIGGER
_TYPE_NETWORK_
ENDPOINT (0x6)
Specifies an event triggered when a 
packet or request arrives on a particular 
network protocol.
SERVICE_TRIGGER
_TYPE_CUSTOM 
(0x14)
Specifies a custom event generated by 
an ETW provider.
Gui
d
Trigger subtype 
GUID
A GUID that identifies the trigger event 
subtype. The GUID depends on the 
Trigger type.
Dat
a[In
dex
]
Trigger-specific data
Trigger-specific data for the service 
trigger event. This value depends on the 
trigger event type.
Dat
aTy
pe[I
SERVICE_TRIGGER
_DATA_TYPE_BINA
RY (0x1)
The trigger-specific data is in binary 
format.
nde
x]
SERVICE_TRIGGER
_DATA_TYPE_STRI
NG (0x2)
The trigger-specific data is in string 
format.
SERVICE_TRIGGER
_DATA_TYPE_LEVE
L (0x3)
The trigger-specific data is a byte value.
SERVICE_TRIGGER
_DATA_TYPE_KEY
WORD_ANY (0x4)
The trigger-specific data is a 64-bit (8 
bytes) unsigned integer value.
SERVICE_TRIGGER
_DATA_TYPE_KEY
WORD_ALL (0x5)
The trigger-specific data is a 64-bit (8 
bytes) unsigned integer value.
Service accounts
The security context of a service is an important consideration for service
developers as well as for system administrators because it dictates which
resource the process can access. Most built-in services run in the security
context of an appropriate Service account (which has limited access rights, as
described in the following subsections). When a service installation program
or the system administrator creates a service, it usually specifies the security
context of the local system account (displayed sometimes as SYSTEM and
other times as LocalSystem), which is very powerful. Two other built-in
accounts are the network service and local service accounts. These accounts
have fewer capabilities than the local system account from a security
standpoint. The following subsections describe the special characteristics of
all the service accounts.
The local system account
The local system account is the same account in which core Windows user-
mode operating system components run, including the Session Manager
(%SystemRoot%\System32\Smss.exe), the Windows subsystem process
(Csrss.exe), the Local Security Authority process
(%SystemRoot%\System32\Lsass.exe), and the Logon process
(%SystemRoot%\System32\Winlogon.exe). For more information on these
processes, see Chapter 7 in Part 1.
From a security perspective, the local system account is extremely
powerful—more powerful than any local or domain account when it comes
to security ability on a local system. This account has the following
characteristics:
■    It is a member of the local Administrators group. Table 10-9 shows
the groups to which the local system account belongs. (See Chapter 7
in Part 1 for information on how group membership is used in object
access checks.)
■    It has the right to enable all privileges (even privileges not normally
granted to the local administrator account, such as creating security
tokens). See Table 10-10 for the list of privileges assigned to the local
system account. (Chapter 7 in Part 1 describes the use of each
privilege.)
■    Most files and registry keys grant full access to the local system
account. Even if they don’t grant full access, a process running under
the local system account can exercise the take-ownership privilege to
gain access.
■    Processes running under the local system account run with the default
user profile (HKU\.DEFAULT). Therefore, they can’t directly access
configuration information stored in the user profiles of other accounts
(unless they explicitly use the LoadUserProfile API).
■    When a system is a member of a Windows domain, the local system
account includes the machine security identifier (SID) for the
computer on which a service process is running. Therefore, a service
running in the local system account will be automatically
authenticated on other machines in the same forest by using its
computer account. (A forest is a grouping of domains.)
■    Unless the machine account is specifically granted access to resources
(such as network shares, named pipes, and so on), a process can
access network resources that allow null sessions—that is,
connections that require no credentials. You can specify the shares
and pipes on a particular computer that permit null sessions in the
NullSessionPipes and NullSessionShares registry values under
HKLM\SYSTEM\CurrentControlSet\Services\LanmanServer\Paramet
ers.
Table 10-9 Service account group membership (and integrity level)
Local System
Network 
Service
Local Service
Service 
Account
Administrators
Everyone
Authenticated 
users
System 
integrity level
Everyone
Users
Authenticated 
users
Local
Network 
service
Console logon
System 
integrity level
Everyone
Users
Authenticated 
users
Local
Local service
Console logon
UWP capabilities 
groups
System integrity 