+\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| age \| tinyint(3) unsigned \| YES \| \| NULL \| \|
+\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
Null 是否允许为空值(默认), not null不允许为空 Default:字段的默认值 Extra
额外设置
数据中"" "null" 都不是空值,null才是空(没双引号)
mysql\> create table t1( #在当前库中创建t1表
-\> name char(10) not null, #name 不为空
-\> age tinyint unsigned not null default 18, #age不为空，默认值18
-\> likes set(\"eat\",\"game\",\"film\") default \"eat\" );
#likes枚举型set(多选多),默认值eat
## 修改表结构(alter)
**添加表字段(add)基本用法:**
alter table 表名 add 字段名 类型 约束条件; #默认在最后添加
alter table 表名 add 字段名 类型 约束条件 after 字段名a; #字段a后面添加
alter table 表名 add 字段名 类型 约束条件 first; #表最前面添加
mysql\> alter table t1 add class char(7) default \"nsd1811\" first;
mysql\> alter table t1 add email varchar(30),add qq varchar(11);
#同时添加两个字段
**修改字段类型（modify）基本用法：**
Alter table 表名 modify 字段名 类型（宽度） 约束条件;
Alter table 表名 modify 字段名 类型(宽度) 约束条件 after 字段a;
#将字段放到字段a后
Alter table 表名modify 字段名 类型（宽度） 约束条件 first;
1.  修改哪一部分就写新的，不修改就原样复制（否则变成默认值），
2.  如果该字段已有数据，修改的约束条件不能与原数据冲突
mysql\> alter table t1 modify sex enum(\'man\',\'woman\',\'no\') not
null default \"no\";
mysql\> alter table t1 modify age tinyint(3) unsigned not null default
18 after name;
**修改字段名（change）基本用法：**
Alter table 表名 change 原字段名 新字段名 类型(宽度) 约束条件;
mysql\> alter table t1 change email mail varchar(30); #将email 改成mail
**删除字段名（drop）基本用法：**
Alter table 表名 drop 字段名1；
Alter table 表名 drop 字段名1，drop 字段名2；
mysql\> alter table t1 drop mail , drop qq;
**修改表名（rename）基本用法：**
Alter table 表名 rename 新表名;
mysql\> alter table t1 rename stuinfo;
**清空表数据,结构不变(delete)**
mysql\> delete from stuinfo;
## Mysql 键值(索引,主键,外键)
键值类型：
-   Index普通索引:key标志是MUL,
-   Unique唯一索引:
    这种索引和前面的"普通索引"基本相同，但有一个区别：索引列的所有值都只能出现一次，即必须唯一
-   Fulltext:全文索引
-   Foreign key:外键
-   Primary key:主键,key标志是PRI,
**Index:普通索引(MUL)**
Primary key使用说明:
1.  一个表中可以有多个index 字段
2.  字段值允许有重复,且可以赋null值
3.  经常把做查询条件的字段设置为index字段
4.  Index字段的key标志是MUL
**索引创建**
creater index 索引名on 表名(字段名);
mysql\> create index age on t2(age); #方法一：在已有表中创建
mysql\> alter table tablename add index \[索引的名字\] (列的列表);
#方法二：修改表的方式
mysql\>create table tablename ( 字段1，字段2, INDEX \[索引的名字\]
(字段名) ); #方法三：建表时创建
mysql\>drop index 索引名(键值类型) on 表名; #删除指定表中索引
**Primary key :主键(PRI)**
Primary key使用说明:
1.  对应的字段值不允许有重复,且不允许赋null值
2.  如果有多个字段都作为primary key 称为复合主键,必须一起创建
3.  主键字段的key标志是PRI
4.  通常与Auto_Increment(自增属性)连用
5.  经常把表中是唯一标识记录的字段设置为主键字段:如\[记录编号字段\]
**建表时候创建主键:**第1种:在末尾添加
mysql\> create table t3(
-\> stu_num char(9),
-\> age int ,
-\> primary key (stu_num) );
**建表时候创建主键:**第2种在字段后面 输入关键字
mysql\> create table t4(
-\> name char(9) primary key,
-\> age int );
**在已有表里添加字段时添加主键1**
选择一个无重复/无空值的字段,下面操作是先清空stuinfo表数据,再添加stu_num字段做为主键
mysql\> alter table stuinfo add stu_num char(9) primary key after class;
> #以上类似添加表字段方法:alter table 表名 add 字段名 类型 约束条件
> after 字段名a; #字段a后面添加
**在已有表指定字段为主键中添加主键2**
将gzt表中的gzt_id字段设置为主键
mysql\> alter table gzt add primary key(gzt_id);
**删除主键**
alter table 表名 modify id int not null
#如果有自增属性(auto_increment),必须先去掉
alter table 表名 drop primarey key;
主键删除后,字段可以有重复数据了,但是空值不行,需要修改
**创建复合主键(必须同时添加):**
复合主键作用:插入多条数据,只要复合主键的值没有同时重复,即可插入成功,
mysql\> create table t5(
-\> name char(10),
-\> class char(7),
-\> status enum(\"yes\",\"no\"),
-\> primary key (name,class) ); #name和class都是主键
Query OK, 0 rows affected (0.19 sec)
mysql\> insert into t5 values(\"bob\",\"1811\",\"no\");
#插入name数据和class数据
Query OK, 1 row affected (0.04 sec)
mysql\> insert into t5 values(\"bob\",\"1811\",\"yes\");
#主键值同时相同,插入不成功
ERROR 1062 (23000): Duplicate entry \'bob-1811\' for key \'PRIMARY\'
mysql\> insert into t5 values(\"bob\",\"1812\",\"yes\");
#name主键相同,class主键不同
Query OK, 1 row affected (0.05 sec)
mysql\> insert into t5 values(\"dc\",\"1812\",\"no\");
#name主键不同,class相同
Query OK, 1 row affected (0.03 sec)
**与auto_increment(自增长)连用**
Auto_increment:作用是让字段的值自增长
-   字段类型必须是数值类型,且必须是主键
-   如果定义自增长的字段的值,就不自增长添加,按照你定义的值添加,添加的不能重复
-   自增长的值都是按照上一条数据的值自增长1,不管数据有没有被删除
mysql\> create table t6(
-\> id int primary key auto_increment, #id为主键,且有自增长属性
-\> name char(10),
-\> sex enum(\"man\",\"woman\") );
**删除有auto_increment(自增长)的主键**
alter table 表名 modify id int not null #如果有自增属性,必须先去掉
mysql\> alter table t6 drop primary key; #无法删除主键
ERROR 1075 (42000): Incorrect table definition; there can be only one
auto column and it must be defined as a key
mysql\> alter table t6 modify id int not null; #去掉自增长
Query OK, 5 rows affected (0.52 sec)
Records: 5 Duplicates: 0 Warnings: 0
mysql\> alter table t6 drop primary key; #删除主键成功
Query OK, 5 rows affected (0.49 sec)
Records: 5 Duplicates: 0 Warnings: 0
**Foreign key 外键**
**什么是外键:**
外键作用:让当前表字段的值在另一个表中字段值的范围内选择
A表中的name字段设置了外键,参考的是B表中的user字段
A表中的name字段数据内容必须在B表中的user字段内容选择
B表中的user字段必须是主键
**使用外键的条件:**
1.  表的存储引擎必须是innodb,只有innodb支持外键
2.  字段类型要一致
3.  被参照字段必须要是索引类型的一种(primary key)
外键规则
**创建外键(建表时创建)**
Create table 表A名(
字段名1 类型 ,
字段名2 类型 ,
Foreign key (表A的字段名1) references 表B名(字段名)
On update cascade #表A与表B名(字段名)数据同步更新
On delete cascade #表A与表B名(字段名)数据同步删除
)engine=innodb;
创建工资表gzt
创建外键,定义gzt_id为外键,参考ygt表的(ygt_id)字段,同步更新与删除
mysql\> create table gzt(
-\> gzt_id int,
-\> pay float(7,2),
-\> foreign key(gzt_id) references ygt(ygt_id) on update cascade on
delete cascade
-\> )engine=innodb;
**查看表创建详情**
mysql\> show create table gzt;
\...\.....此处省略
\| gzt \| CREATE TABLE \`gzt\` (
\`gzt_id\` int(11) DEFAULT NULL,
\`pay\` float(7,2) DEFAULT NULL,
KEY \`gzt_id\` (\`gzt_id\`),
CONSTRAINT \`gzt_ibfk_1\` FOREIGN KEY (\`gzt_id\`) REFERENCES \`ygt\`
(\`ygt_id\`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1 \|
+\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--\...\...\...\....此处省略
**解释:**CONSTRAINT \`gzt_ibfk_1\` 为外键名称
FOREIGN KEY (\`gzt_id\`) 外键创建在(\`gzt_id\`)字段上
REFERENCES \`ygt\` (\`ygt_id\`) 参考为ygt表的ygt_id字段
ON DELETE CASCADE 跟参考同步更新 ON UPDATE CASCADE 跟参考同步删除
ENGINE=InnoDB 存储引擎为InnoDB
**删除外键**
Alter table 表名 drop foreign key 约束名(外键名)
先查看表创建详情,再执行删除
mysql\> alter table gzt drop foreign key gzt_ibfk_1;
#查询出来的约束名(如上)再删除
**已有表中添加外键**
要保证外键字段的数据值与参考表中参考字段的值相匹配
mysql\> alter table gzt add foreign key(gzt_id) references ygt(ygt_id)
on update cascade on delete cascade;
**注意事项**
-   当表中有外键时:被参考的表和被参考的字段都不能删除
-   被参考的表的所有记录被删除,外键表的所有记录也将被删除
## MYSQL结构