title:ARMlock: Hardware-based Fault Isolation for ARM
author:Yajin Zhou and
Xiaoguang Wang and
Yue Chen and
Zhi Wang
ARMlock: Hardware-based Fault Isolation for ARM
Yajin Zhou∗
North Carolina State University
PI:EMAIL
Xiaoguang Wang∗
Xi’an Jiaotong University
PI:EMAIL
Zhi Wang
Florida State University
PI:EMAIL
Yue Chen
Florida State University
PI:EMAIL
ABSTRACT
Software fault isolation (SFI) is an eﬀective mechanism to conﬁne
untrusted modules inside isolated domains to protect their host ap-
plications. Since its debut, researchers have proposed diﬀerent SFI
systems for many purposes such as safe execution of untrusted na-
tive browser plugins. However, most of these systems focus on the
x86 architecture. In recent years, ARM has become the dominant
architecture for mobile devices and gains in popularity in data cen-
ters. Hence there is a compelling need for an eﬃcient SFI system
for the ARM architecture. Unfortunately, existing systems either
have prohibitively high performance overhead or place various lim-
itations on the memory layout and instructions of untrusted mod-
ules.
In this paper, we propose ARMlock, a hardware-based fault iso-
lation for ARM. It uniquely leverages the memory domain support
in ARM processors to create multiple sandboxes. Memory accesses
by the untrusted module (including read, write, and execution) are
strictly conﬁned by the hardware, and instructions running inside
the sandbox execute at the same speed as those outside it. ARM-
lock imposes virtually no structural constraints on untrusted mod-
ules. For example, they can use self-modifying code, receive ex-
ceptions, and make system calls. Moreover, system calls can be
interposed by ARMlock to enforce the policies set by the host. We
have implemented a prototype of ARMlock for Linux that supports
the popular ARMv6 and ARMv7 sub-architecture. Our security
assessment and performance measurement show that ARMlock is
practical, eﬀective, and eﬃcient.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Access con-
trols, Information ﬂow controls
Keywords
SFI; ARMlock; Fault Isolation; DACR
∗The bulk of this work was completed when the ﬁrst two authors
were visiting Florida State University.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660344 .
1.
INTRODUCTION
Software fault isolation (SFI [43]) is a mechanism to eﬀectively
isolate untrusted modules in a host application. It creates a logi-
cally separated area called sandbox, or fault domain, in the host’s
address space, and strictly conﬁnes the untrusted module into this
area so that it cannot directly access other domains’ memory or
execute their instructions (a domain is either the host or a sand-
box). Data could only be exchanged via explicit cross-domain com-
munications in a fashion similar to Remote Procedure Call [28].
SFI is particularly useful to isolate untrusted code such as third-
party browser plugins downloaded from Internet, or benign code
that handles untrusted and potentially malicious inputs. For exam-
ple, many popular open-source libraries that have been embedded
in hundreds of thousands of programs are found to contain vul-
nerabilities that may be exploited to compromise their host appli-
cations, such as libpng (CVE-2012-5470, CVE-2012-3425, etc.),
libtiﬀ (CVE-2013-4244, CVE-2013-4243, etc.), gzip (CVE-2012-
1461, CVE-2012-1460, etc.), and many others [25]. By isolating
these modules in separate domains, SFI can conﬁne the damages
and thus protect the host application and the operating system.
Since its introduction [43], there has been a long stream of re-
search to improve or apply SFI to protect low-level software se-
curity [8, 9, 20, 21, 23, 33, 43, 46, 47]. For example, Native
Client (NaCl) relies on SFI to safely run untrusted native plugins
in a web browser, bringing performance and safety to browser plu-
gins [33, 46]. Many of these systems focus on the x86 architecture,
the most prevalent CPU architecture until recently. In the past few
years, ARM has become the other dominating CPU architecture
due to the huge popularity of ARM-based mobile devices. For ex-
ample, Google has activated more than 750 million Android-based
devices by March 2013 [3]. The vast majority of them are pow-
ered by the ARM processor. Moreover, ARM processors are in-
creasingly being deployed in data centers because of the improved
performance and superior power eﬃciency [4]. However, only a
few systems have been proposed to enable SFI for the ARM ar-
chitecture, including NaCl for ARM [33] and ARMor [49]. Both
systems are based on binary rewriting: NaCl for ARM reserves the
lower 1GB address space of the host application for the untrusted
module, and instruments the module to conﬁne its memory and in-
struction references to this range; ARMor, a “fully-veriﬁed” SFI
for ARM, guarantees memory safety and control ﬂow integrity [2]
by inserting guards before potentially dangerous operations. Al-
though it is easy to deploy since no kernel modiﬁcation is required,
binary rewriting could cause relatively high performance overhead
or undesirable trade-oﬀs (e.g., unchecked memory reads [21]). For
example, ARMor has as high as 2× performance overhead for some
computation-intensive tasks such as the string search.
In this paper, we propose ARMlock, a hardware-based fault iso-
lation system for the ARM architecture. ARMlock leverages an
often-overlooked hardware feature in the commodity ARM proces-
sors called memory domain to eﬃciently establish multiple sand-
boxes. Speciﬁcally, memory in a process can be assigned to one
of the sixteen domains, whose access rights are determined by the
domain access control register (DACR). ARMlock assigns diﬀerent
domain IDs to the host and the sandboxes, and updates DACR when
entering or leaving a sandbox so that only the currently running
domain is accessible. As such, instruction execution and memory
references by the untrusted module are strictly locked down to its
sandbox by the processor’s memory management hardware. ARM-
lock imposes no limitations on the instructions that could be exe-
cuted by an untrusted module. The untrusted module can also make
its own system calls using the svc instruction. Those system calls
are interposed by ARMlock to enforce the policies set by the host.
Particularly, the host can instruct ARMlock to ignore system calls
from the module or selectively allow a subset of them (e.g., to read
from/write to an existing socket but not to create new ones).
By combining the hardware-based memory isolation and ﬂexible
system call interposition, ARMlock has the following three major
advantages: ﬁrst, instructions running inside the sandbox virtually
have no performance overhead compared to those running outside
it. ARM processors always have memory domain enabled. Run-
ning in a diﬀerent domain does not aﬀect the performance. Second,
the host application and its untrusted modules usually are tightly
coupled. Eﬃcient domain switch is of vital importance for any
SFI solution. Our experiment shows that ARMlock can perform
more than 903,000 domain switches each second, or 1.1µs per do-
main switch, even on the low-end ARM processor of Raspberry
Pi [29]. Third, by not restricting instruction layout or structure [21,
33, 46], ARMlock can readily support advanced features such as
self-modifying code, just-in-time compiling (JIT), and exception
delivery. Those features are diﬃcult or even impossible to support
in existing systems, but are useful nevertheless, for example, to iso-
late the JavaScript engine that uses JIT to compile frequently-used
JavaScript code into native instructions.
Like any hardware-supported fault isolation systems, ARMlock
requires certain kernel-level support to operate on the privileged
hardware. To facilitate its deployment, ARMlock is designed as a
kernel module (along with a user library) that can be loaded into
the kernel on-demand. We have built a prototype of ARMlock for
Linux. Its kernel module has less than 500 lines of source code.
The main Linux kernel remains unchanged except for ﬁve lines of
incompatible code we adjusted during our prototyping. As such,
our prototype’s addition to the trusted computing base is negligi-
ble. Our experiments show that ARMlock can eﬀectively isolate
vulnerable software components, and it’s highly eﬃcient with min-
imal performance overhead for the sandboxed code and fast domain
switches.
The rest of this paper is organized as the following: we ﬁrst de-
scribe the design and implementation of ARMlock in Section 2 and
Section 3, then evaluate the system performance and eﬀectiveness
in Section 4. We discuss limitations and possible improvements in
Section 5 and the related work in Section 6. Finally, we conclude
the paper in Section 7.
2. SYSTEM DESIGN
2.1 Goals and Assumptions
ARMlock is a hardware-based fault isolation scheme for the ARM
architecture. It is designed to securely isolate untrusted modules
from the host application so that they can safely co-exist in a sin-
gle address space. To achieve that, we have three design goals for
ARMlock:
• Strict isolation: ARMlock needs to strictly isolate untrusted mod-
ules into their own domains. Speciﬁcally, memory references by
an untrusted module, including read, write, and execution, can
only target memory in the sandbox. Any attempt to escape from
the sandbox should be prevented. Moreover, ARMlock does
not limit instructions of the module, including the system call
instruction. System calls made by the module should be inter-
posed. Commodity OS kernels have a large attack surface that
may impair the system security.
• Performance: our solution should incur negligible performance
overhead when properly applied. Particularly, code running in-
side the sandbox should have no or minimal overhead when com-
pared to that running natively. This prevents us from adopting bi-
nary rewriting because it will lead to constant performance over-
head [9, 33, 49]. Moreover, untrusted modules are often tightly
coupled with its host, and require frequent cross-domain commu-
nications. For example, tcpdump [40] has parsers for hundreds
of network protocols. Many parsers were found to surfer from
memory-based vulnerabilities (CVE-2007-3798, CVE-2005-1267,
CVE-2005-1278, CVE-2005-1280 [25]). By sandboxing those
parsers, we can signiﬁcantly reduce tcpdump’s attack surface.
However, close interaction between the parsers and other parts
of tcpdump requires ARMlock to minimize the domain switch
overhead. We brieﬂy considered to use page tables to isolate
domains but vetoed it because switching page tables is an ex-
pensive operation as it may aﬀect TLB (Translation Lookaside
Buﬀer [41]) and user-space cache [38].
• Compatibility: our system should not impose restrictions on un-
trusted modules. Many existing SFI systems mandate memory
layout and/or instruction structure of the modules [9, 21, 33, 46].
Such constraints may undermine its compatibility or harm the
performance. For example, many SFI systems do not support
self-modifying code and exception delivery. Moreover, to im-
prove compatibility, ARMlock should be structured as a load-
able kernel module, and avoid changing the base kernel, if at all
possible.
Threat model: in this work, we assume a threat model similar to
other SFI systems in which the kernel is trusted, and the host is
benign but vulnerable. The goal is to protect the host application
from the compromised or malicious modules by isolating them in
separate domains. The host does not trust its modules, which could
be vulnerable (e.g., protocol parsers in tcpdump) or simply mali-
cious (e.g., browser plugins downloaded from Internet). Security
of the host or the kernel themselves is a non-goal and considered
out-of-scope. Various existing systems can be applied to enhance
their security and be combined with ARMlock to provide defense
in depth [16, 35].
2.2 Overall Design
In the rest of this section, we brieﬂy introduce the background
of ARM’s virtual memory management and then give a high-level
overview of the design of ARMlock, particularly the run-time en-
vironment for the sandbox.
ARMlock leverages the “memory domain” of the page table to
create its sandboxes. 32-bit ARM processors support 2-level page
tables. The ﬁrst-level page table has 4096 entries, each mapping
1MB of memory for a total of 4GB address space. Each ﬁrst-level
Type
Value
Description
No Access
Client
Reserved
Manager
00
01
10
11
No access permitted
Permissions deﬁned by page tables
Reserved
No permissions check
Table 1: ARM domain access control
page table entry includes a 4-bit domain ID used as an index into
the domain access control register (DACR). DACR is a 32-bit priv-
ileged register [1] and is only accessible in the privileged processor
modes. It is divided into 16 two-bit ﬁelds, and each of which de-
ﬁnes the access right for its associated domain. The four possible
access rights for a domain are No Access, Client, Reserved,
and Manager as shown in Table 1. That is, those ﬁelds allow us to
(1) prohibit any access to the mapped memory – No Access, (2)
ignore permission bits in the page table and allow unlimited access
to the related memory – Manager, (3) or let the page table to deter-
mine the access right – Client. Client is the default setting. In
Linux, domain 0, 1, and 2 are reserved for the kernel, user-space,
and device memory, respectively. They all have the access right of
Client. As such, ARMlock for Linux can simultaneously support
13 sandboxes for each process. Few applications require that many
sandboxes, and more can be supported when necessary by adjust-
ing the page table, as long as these sandboxes are not active at the
same time. ARM’s memory domain is particularly suitable for SFI
because changes to DACR are instantly put into eﬀect without af-
fecting the TLB. In Section 5, we discuss how the x86 architecture
might be extended to support the similar feature.
ARMlock allocates a disjoint block of memory for each sandbox
and assigns to it a unique domain ID. ARMlock manages the DACR
register so that only memory of the currently running domain is ac-
cessible. Any attempt to access other domains’ memory will lead to
a hardware domain fault and be trapped. Cross-domain communi-
cations such as function invocation and memory references need to