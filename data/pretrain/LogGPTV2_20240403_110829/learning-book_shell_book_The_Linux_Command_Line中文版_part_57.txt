减。等价于 parameter= parameter—value°
parameter *= value
乘。等价于parameter = parameter value °
_parameter / value
整除。等价于 parameter = parameter/value°
parameter %= value
取模。等价于parameter =parameter %value °
parameter++
后缀自增变量。等价于parameter=parameter +1
（但，要看下面的讨论）。
parameter--
后缀自减变量。等价于parameter=parameter-1°
++parameter
前缀自增变量。等价于parameter=parameter+1°
--parameter
-aaened=aaered。目鉴
表35-4:赋值运算符
）
（--）运算符，它们会把它们的参数值加1或减1。这种风格的表示法取自C编程语言井且被其
它几种编程语言吸收，包括bash。
自增和自减运算符可能会出现在参数的前面或者后面。然而它们都是把参数值加1或减1
这两个位置有个微小的差异。若运算符放置在参数的前面，参数值会在参数返回之前增加（或
减少）。若放置在后面，则运算会在参数返回之后执行。这相当奇怪，但这是它预期的行为。这
里是个演示的例子：
[nedlinuxbox -]$ foo=]
[ne@linuxbox -]$ echo $((foo++))
[ne@linuxbox -]$ echo $foo
2
如果我们把1赋值给变量foo，然后通过把自增运算符++放到参数名foo之后来增加它，
foo返回1。然而，如果我们第二次查看变量foo的值，我们看到它的值增加了1。若我们把+
472
---
## Page 474
+运算符放到参数foo之前，我们得到更期望的行为：
[ne@linuxbox-]$ foo=1
[ne@linuxbox -]$ echo $((++foo))
2
[ne@linuxbox -]$ echo $foo
2
对于大多数shell应用来说，前缀运算符最有用。
自增++和自减--运算符经常和循环操作结合使用。我们将改进我们的modulo脚本，让
代码更紧凑些：
#1/bin/bash
# nodulo2 : denonstrate the nodulo operator
for ((i = 0; 1 。 FuTzd
else
T$P%.Fau2d
fi
done
printf "\n*
35.3.5位运算符
位运算符是一类以不寻常的方式操作数字的运算符。这些运算符工作在位级别的数字。它们被
用在某类底层的任务中，经常涉及到设置或读取位标志。
运算符
描远
按位取反。对一个数字所有位取反。
f
位左移.把一个数字的所有位向左移动。
9
位右移.把一个数字的所有位向右移动。
&
位与。对两个数字的所有位执行一个AND操作。
1
位或。对两个数字的所有位执行一个OR操作。
位异或。对两个数字的所有位执行一个异或操作。
473
---
## Page 475
表35-5:位运算符
注意除了按位取反运算符之外，其它所有位运算符都有相对应的赋值运算符（例如，=
大于或相等
大于
==
相等
!=
不相等
&&
逻辑与
逻辑或
expr1?expr2:expr3
条件（三元）运算符。若表达式exprl的计算结果为
非零值（算术真）．则执行表达式expr2，否则执行表
达式expr3°
表35-6:比较运算符
474
---
## Page 476
当表达式用于逻辑运算时，表达式遵循算术逻辑规则：也就是，表达式的计算结果是零，则
认为假，而非零表达式认为真。该（（）复合命令把结果映射成shell正常的退出码：
[neelinuxbox -]$ if ((1)); then echo "true*; else echo "false"; fi
true
[nedlinuxbox -]$ if ((0)): then echo "true*; else echo "false"; f1
false
最陌生的逻辑运算符就是这个三元运算符了。这个运算符（仿照于C编程语言里的三元运
算符）执行一个单独的逻辑测试。它用起来类似于if/then/else语句。它操作三个算术表达式
（字符串不会起作用），并且若第一个表达式为真（或非零），则执行第二个表达式。否则，执行
第三个表达式。我们可以在命令行中实验一下：
[ne@linuxbox-]$ a=0
[ne@linuxbox-]$ ((a>> >q $[-xoqxnuou]
4
35.4.2
一个脚本实例
作为一个真实世界的例子，我们将构建一个脚本，用于计算每月的还贷金额。在下面的脚本中，
我们使用了here文档把一个脚本传递给bc：
#!/bin/bash
# loan-calc : script to calculate monthly loan payments
PROGNAME=$(basenane $0)
usage (){
cat <<- EOF
Usage: SPROGNAME PRINCIPAL INTEREST MONTHS
Where:
478
---
## Page 480
PRINCIPAL is the anount of the loan.
INTEREST is the APR as a nunber (7% = 0.07).
HONTHS is the length of the loan's tern.
EOF
if (($# != 3)); then
usage
exit 1
f1
principal=$1
interest=$2
months=$3
bc <<-EOP
scale = 10
1 = Sinterest / 12
p * $principal
n = Smonths
((T -(u。(下 +I))) / ((u。(T +T))+F))▪ d=e
print a, "\"
E0F
当脚本执行后，输出结果像这样：
[ne@linuxbox -]$ 1oan-calc 135000 0.0775 180
475
1270 .7222490000
若贷款135.000美金，年利率为7.75%，借贷180个月（15年），这个例子计算出每月需要
了对bc脚本语言的详尽描述。虽然bc的数学符号与shell的略有差异（bc与C更相近），但
是基于目前我们所学的内容，大多数符号是我们相当熟悉的。