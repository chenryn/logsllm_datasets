作为使用函数来生成动态内容的简单示例，让我们编写一个在每次请求时生成一个带有不同
320
①～@后接一个新行可以告诉FORMAT忽略换行之后的所有空白，这样就可以精美地缩进代码而不会在HTML中增加大
正如该函数显示的，可以只用FORMAT将HTML打印到由reque st-reply-stream返回的流
宏with-http-response和with-http-body是AllegroServe的一部分。前者启动生成一个
发布生成动态内容的实体几乎和发布静态内容一样简单。函数publish和publish-prefix
在本例中，:prefix参数指定了应由该实体接手的URL路径部分的开始。这样，如果服务器
量的空白。由于HTML中的空白通常会被忽略，因此这不会影响到浏览器，但它可以让产生的HTML看起来更美观。
用 AllegroServe 生成动态内容
(with-http-body (request entity)
第26章
(request-reply-stream request)
(format
(random 1000)))))
~@
Random number:
Random~@
"~@
~@
实践： 用 AllegroServe 进行 Web 编程
www.TopSage.com
~α~@
(" Twu/axa. ad-auaguoo:
---
## Page 338
述表示法可以扩展到更复杂的HTML。例如，下面的HTML
（:p"foo")来表示了。由于HTML元素嵌套的方式与S-表达式中的列表嵌套方式相同，因此上
列表，例如一个与HTML标签同名的关键字符号。这样，HTMLfoo就可以用S-表达式
用S-表达式来表示HTML元素，方法是将HTML中的每个元素视为一个以适当头元素“标记”的
的具体实现的细节。不过目前你只需要知道如何使用FOO。
FOO%的库，它在很大程度上来自Franz的htmlgen，并且你将在第30章和第31章里看到更多关于它
形式的表示生成HTML，其中的htmlgen就包含在AllgroServe中。在本章里你将使用一个称为
复杂的页面，那么如果有一种更简洁的HTML生成方式就更好了。有几个库可以用来从S-表达式
26.4生成HTML
数的页面，如图26-3所示。
publish调用以后，可以让浏览器指向http:/localhost:2001/random-number来得到一个带有一个随机
以允许你以后重定义该函数而无需重新发布即可令AllegroServe使用新的函数定义。在求值了
径部分。：function参数用来指定函数的名字或实际的函数对象。像这样使用一个函数的名字可
①FOO是来源于FOOOutputsOutput的递归伪技术缩略语。
从Lisp里生成HTML是件相当自然的事情，因为本质上S-表达式跟HTML是同构的。你可以
尽管使用FORMAT来生成HTML对于到目前为止所讨论的简单页面还不错，但如果要构建更
参数:path与它在publish-file函数中的用法相同，它指定导致该函数被调用的URL的路
#
现在你可以发布这个函数了
Hello
Done
R andom number: 508
www.TopSage.com
Hep
26.4生成HTML
321
---
## Page 339
来，而一旦HTML生成出来以后，整个S-表达式就没有任何用处了。为了避免这种低效，FOO还
构造S-表达式并将其传给emit-html：
要生成一个含有10000个随机数的列表的HTML页面。你可以像下面这样使用一个反引用模板来
的完整S-表达式表示。尽管构造这样一个表示很容易，但它却并不总是高效的。例如，假设你想
表达式并输出相应的HTML。
用下列S-表达式来表示：
个不是关键字符号的元素代表该HTML元素内容的开始。这样，你可以将下面的HTML
性的方式。一种方式是简单地在列表的第一个元素之后跟上一个键值对。跟在键值对后面的第一
可以用下列S-表达式来表示：
322
不过，emit-html并非总是最有效的HTML生成方式，因为其参数必须是想要生成的HTML
FOO可以通过这两种方式使用S-表达式来表示HTML。函数emit-html接受一个HTML的S-
FOO支持的另一种语法是将标签名和属性组织在它们自己的列表中，如下所示：
This is a link
不过，这会导致在实际开始生成HTML之前就先要构造出一个含有10000个元素的列表的树
((((iom 'otah d:) oq:) ((motaH :) eu:) Wu:). T4u-atwa) 
(:html
(:body (:p "Hello, world!")))
(:head
(:html
Hello, world!
Hello
(:body
(:head
第 26章实践：用AllegroServe进行Web 编程
((((( ： aao (000 uo0u) o 0000 ada do0)@′ d:)
(:h1 "Random numbers")
(:title "Random numbers"))
(:title "Hello"))
www.TopSage.com
---
## Page 340
在每次代码运行时来做了。
而且emit-html的很多在运行期解释S-表达式的工作现在都可以在宏展开时一次性完成，而不必
为了输出那个3，必须写成下面这样
在计算并丢弃值3以后会生成下面的HTML
它将产生下面的HTML：
了在HTML中输出一个列表的内容，你可以写成下面这样
码返回的任何值都将被忽略，但是代码可以通过调用html宏本身来产生更多的HTML。例如，为
都将生成下面的代码：
符号将被视为对变量的引用，宏所生成的代码会在运行期输出它们的值。这样，下面两个形式
支持一个宏html，它允许你在一个HTML的S-表达式中嵌入一点儿Lisp代码。
宏版本将比emit-htm1版本更加高效。你不仅不再需要生成一个代表整个页面的S-表达式，
（html（:ul （dolist（item（1ist123））（html（:li item））））)
这样，你就可以使用html宏来生成随机数的列表了，如下所示：
如果你想输出一个列表形式的值，必须将其包装在伪标签：print中。这样，表达式
不以一个关键字符号开始的列表形式会被视为代码，并被嵌入到生成的代码中。被嵌入的代
(1et（（x（+12）））（html（:px）））
或者也可以先计算出该值并将其保存在一个html调用之外的变量里，如下所示：
（html（:p（:print（+12）））)
（html（:p（+12）））
foo
(html
（（（x:））（（x)））
(html（:p"foo"))
(:html
3
2
1
(:body
(:head
(:title"Randomnumbers"))
"Randomnumbers")
www.TopSage.com
26.4生成HTML
C
---
## Page 341
可以生成这样的HTML：
编译之前展开。例如，下面的形式
HTML S-表达式。例如，假设你经常发现自己会编写下列形式的页面：
26.5
random-number，如下所示：
该宏是FOO库的一部分。这样，你可以使用来自FOO的with-html-output和html宏来重写
(html (:standard-page (:title "Hello") (:p "Hello, world.")))
你可以通过宏with-html-output来控制由html和emit-html生成的输出被发送到哪里,
324
FOO还有一个特性，
现在，你可以在你的S-表达式HTML中使用“标签”：standard-page了，它将在被解释或
那么你应该定义一个HTML宏来捕捉这个模式，就像这样：
(define-html-macro :standard-page ((&key title) &body body)
(:html
(defun random-number (request entity)
( :body
(:head
(u(uau/axaa, aa-auaauoo: Aataua asanbai) asuodsar-aaau-uatm)
(:html
Hello, world.
Hello
Hello
(:h1 "Some title")
HTML 宏
(with-http-body (request entity)
(:head (:title ,title))
第 26章实践：用AllegroServe进行Web 编程
@body）））
:body
(with-html-output ((request-reply-stream request))
:h1
(:title "Some title"))
(html
,title)
(:html
(:body
(:head (:title "Random"))
((((((((((ooot wopue1) autid:)  :iaqunu wopuey d:)
，它允许你定义一种HTML“宏”可将任意形式转化成html宏可理解的
www.TopSage.com
---
## Page 342
据将发送到show-query-params：
那么你应该可以得到一个类似图26-4所示的页面。
有它收到的查询参数：
用函数requiest-query从请求对象中获取alist。下面的函数可以返回一个页面，其中显示了所
时，所有来自查询字符串和/或POST数据的键/值对都已被解码并放置在一个alist中，后者可以使
参数，两者都是向服务器端代码提供输入的途径。
中讨论过的，当浏览器从Web服务器上请求一个页面时，它可以在URL和POST数据中发送查询
26.6
和多数Web编程框架一样，AllegroServe可以帮你解析这两种输入。等到你发布的函数被调用
http://localhost:2001/show-query-params?foo=bar&baz=10
(defun show-query-params (request entity)
当然，生成HTML输出还只是Web编程的一半，另一半是得到来自用户的输人。正如26.1节
(suered-Ktanb-mous, uotaoung: "sweied-Aanb-mous/ : uaed: usttqnd)
(n [wau/axan: ad-auazuoo: Kataua asanbat) asuodsar-daau-uatm)
查询参数
(with-http-body
(html
(:standard-page
(if (request-query request)
(:title "Query Parameters")
图26-4  http://localhost:2001/show-query-params?foo=bar&baz=10
Done
((((((((('sxazauexed anb oN. d:) Tuu)
(html
{:table :border 1
(request entity)
(loop for (k 
do (html (:tr (:td k)