[ManualExamples]$ echo "_" | ../../../pin -t obj-ia32/inscount0.
so -o inscount.out -- ~/baleful_unpack ; cat inscount.out
Please enter your password: Sorry, wrong password!
Count 437603
确实没有，写下脚本：
1478
6.2.5 re PicoCTF2014 Baleful
#!/usr/bin/env python
import os
def get_count(flag):
cmd = "echo " + "\"" + flag + "\"" + " | ../../../pin -t obj
-ia32/inscount0.so -o inscount.out -- ~/baleful_unpack"
os.system(cmd)
with open("inscount.out") as f:
count = int(f.read().split(" ")[1])
return count
charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0
123456789_-+*'"
flag = list("A" * 30)
p_count = get_count("".join(flag))
for i in range(30):
for c in charset:
flag[i] = c
print("".join(flag))
count = get_count("".join(flag))
print("count: ", count)
if count != p_count:
break
p_count = count
print("password: ", "".join(flag))
packers_and_vms_and_xors_oh_mx
Please enter your password: Sorry, wrong password!
count: 507925
packers_and_vms_and_xors_oh_my
Please enter your password: Congratulations!
count: 505068
password: packers_and_vms_and_xors_oh_my
简单到想哭。
1479
6.2.5 re PicoCTF2014 Baleful
参考资料
Pico CTF 2014 : Baleful
1480
6.2.6 re SECCONCTF2017 printf_machine
6.2.6 re SECCONCTF2017 printf_machine
题目解析
参考资料
下载文件
题目解析
$ file fsmachine
fsmachine: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV
), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,
for GNU/Linux 2.6.32, BuildID[sha1]=2c99311f15c42eaa9c06b6567ef6
8b73bed27f07, not stripped
参考资料
https://ctftime.org/task/5042
400_printf_machine
1481
6.2.7 re CodegateCTF2018 RedVelvet
6.2.7 re CodegateCTF2018 RedVelvet
题目解析
参考资料
下载文件
题目解析
$ file RedVelvet
RedVelvet: ELF 64-bit LSB executable, x86-64, version 1 (SYSV),
dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for
GNU/Linux 2.6.32, BuildID[sha1]=84e7ef91c33878cf9eefc00a7a45089
5aa573494, not stripped
参考资料
https://ctftime.org/task/5231
1482
6.2.8 re DefcampCTF2015 entry_language
6.2.8 re DefcampCTF2015 entry_language
题目解析
参考资料
下载文件
题目解析
这是一题标准的密码验证题，输入一个字符串，程序验证对误。
$ file entry_language
defcamp_r100: ELF 64-bit LSB executable, x86-64, version 1 (SYSV
), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,
for GNU/Linux 2.6.24, BuildID[sha1]=0f464824cc8ee321ef9a80a799c7
0b1b6aec8168, stripped
$ ./entry_language
Enter the password: ABCD
Incorrect password!
为了与 angr 的自动化做对比，我们先使用传统的方法，逆向算法求解， main 函
数和验证函数 fcn.004006fd 如下：
[0x00400610]> pdf @ main
/ (fcn) main 153
| main ();
| ; var int local_110h @ rbp-0x110
| ; var int local_8h @ rbp-0x8
| ; DATA XREF from 0x0040062d (entry0)
| 0x004007e8 55 push rbp
| 0x004007e9 4889e5 mov rbp, rsp
| 0x004007ec 4881ec100100. sub rsp, 0x110
| 0x004007f3 64488b042528. mov rax, qword fs:[0x
28] ; [0x28:8]=-1 ; '(' ; 40
1483
6.2.8 re DefcampCTF2015 entry_language
| 0x004007fc 488945f8 mov qword [local_8h],
rax
| 0x00400800 31c0 xor eax, eax
| 0x00400802 bf37094000 mov edi, str.Enter_th
e_password: ; 0x400937 ; "Enter the password: "
| 0x00400807 b800000000 mov eax, 0
| 0x0040080c e8affdffff call sym.imp.printf
; int printf(const char *format)
| 0x00400811 488b15500820. mov rdx, qword [obj.s
tdin] ; [0x601068:8]=0
| 0x00400818 488d85f0feff. lea rax, [local_110h]
| 0x0040081f beff000000 mov esi, 0xff
; 255
| 0x00400824 4889c7 mov rdi, rax
| 0x00400827 e8b4fdffff call sym.imp.fgets
; char *fgets(char *s, int size, FILE *stream)
| 0x0040082c 4885c0 test rax, rax
| ,= 0x00400855 bf52094000 mov edi, str.Incorrec
t_password_ ; 0x400952 ; "Incorrect password!"
| | | 0x0040085a e841fdffff call sym.imp.puts
; int puts(const char *s)
| | | 0x0040085f b801000000 mov eax, 1
| |,== 0x00400866 b800000000 mov eax, 0
| || ; JMP XREF from 0x00400864 (main)
1484
6.2.8 re DefcampCTF2015 entry_language
| || ; JMP XREF from 0x00400853 (main)
| ``--> 0x0040086b 488b4df8 mov rcx, qword [local
_8h]
| 0x0040086f 6448330c2528. xor rcx, qword fs:[0x
28]
| ,= 0x0040087f c9 leave
\ 0x00400880 c3 ret
[0x00400610]> pdf @ fcn.004006fd
/ (fcn) fcn.004006fd 171
| fcn.004006fd (int arg_bh);
| ; var int local_38h @ rbp-0x38
| ; var int local_24h @ rbp-0x24
| ; var int local_20h @ rbp-0x20
| ; var int local_18h @ rbp-0x18
| ; var int local_10h @ rbp-0x10
| ; arg int arg_bh @ rbp+0xb
| ; CALL XREF from 0x0040083b (main)
| 0x004006fd 55 push rbp
| 0x004006fe 4889e5 mov rbp, rsp
| 0x00400701 48897dc8 mov qword [local_38h]
, rdi
| 0x00400705 c745dc000000. mov dword [local_24h]
, 0
| 0x0040070c 48c745e01409. mov qword [local_20h]
, str.Dufhbmf ; 0x400914 ; "Dufhbmf"
| 0x00400714 48c745e81c09. mov qword [local_18h]
, str.pG_imos ; 0x40091c ; "pG`imos"
| 0x0040071c 48c745f02409. mov qword [local_10h]
, str.ewUglpt ; 0x400924 ; "ewUglpt"
| 0x00400724 c745dc000000. mov dword [local_24h]
, 0
| ,= 0x0040072d 8b4ddc mov ecx, dword [local
_24h]
| :| 0x00400730 ba56555555 mov edx, 0x55555556
1485
6.2.8 re DefcampCTF2015 entry_language
| :| 0x00400735 89c8 mov eax, ecx
| :| 0x00400737 f7ea imul edx
| :| 0x00400739 89c8 mov eax, ecx
| :| 0x0040073b c1f81f sar eax, 0x1f
| :| 0x0040073e 29c2 sub edx, eax
| :| 0x00400740 89d0 mov eax, edx
| :| 0x00400742 01c0 add eax, eax
| :| 0x00400744 01d0 add eax, edx
| :| 0x00400746 29c1 sub ecx, eax
| :| 0x00400748 89ca mov edx, ecx
| :| 0x0040074a 4863c2 movsxd rax, edx
| :| 0x0040074d 488b74c5e0 mov rsi, qword [rbp +
rax*8 - 0x20]
| :| 0x00400752 8b4ddc mov ecx, dword [local
_24h]
| :| 0x00400755 ba56555555 mov edx, 0x55555556
| :| 0x0040075a 89c8 mov eax, ecx
| :| 0x0040075c f7ea imul edx
| :| 0x0040075e 89c8 mov eax, ecx
| :| 0x00400760 c1f81f sar eax, 0x1f
| :| 0x00400763 29c2 sub edx, eax
| :| 0x00400765 89d0 mov eax, edx
| :| 0x00400767 01c0 add eax, eax
| :| 0x00400769 4898 cdqe
| :| 0x0040076b 4801f0 add rax, rsi
; '+'
| :| 0x0040076e 0fb600 movzx eax, byte [rax]
| :| 0x00400771 0fbed0 movsx edx, al
| :| 0x00400774 8b45dc mov eax, dword [local
_24h]
| :| 0x00400777 4863c8 movsxd rcx, eax
| :| 0x0040077a 488b45c8 mov rax, qword [local
_38h]
| :| 0x0040077e 4801c8 add rax, rcx
; '&'
| :| 0x00400781 0fb600 movzx eax, byte [rax]
| :| 0x00400784 0fbec0 movsx eax, al
| :| 0x00400787 29c2 sub edx, eax
| :| 0x00400789 89d0 mov eax, edx
| :| 0x0040078b 83f801 cmp eax, 1
1486
6.2.8 re DefcampCTF2015 entry_language
; 1
| ,=== 0x00400797 8345dc01 add dword [local_24h]
, 1 ; i = i + 1
| | :| ; JMP XREF from 0x0040072b (fcn.004006fd)
| | :`-> 0x0040079b 837ddc0b cmp dword [local_24h]
, 0xb ; [0xb:4]=-1 ; 11
| | `== 0x004007a6 5d pop rbp
\ 0x004007a7 c3 ret
整理后可以得到下面的伪代码：
int fcn_004006fd(int *passwd) {
char *str_1 = "Dufhbmf";
char *str_2 = "pG`imos";
char *str_3 = "ewUglpt";
for (int i = 0; i <= 11; i++) {
if((&str_3)[i % 3][2 * (1 / 3)] - *(i + passwd) != 1) {
return 1;
}
}
return 0;
}
然后写出逆向脚本：
1487
6.2.8 re DefcampCTF2015 entry_language
str_list = ["Dufhbmf", "pG`imos", "ewUglpt"]
passwd = []
for i in range(12):
passwd.append(chr(ord(str_list[i % 3][2 * (i / 3)]) - 1))
print ''.join(passwd)
逆向算法似乎也很简单，但如果连算法都不用逆的话，下面就是见证 angr 魔力的
时刻，我们只需要指定让程序运行到 0x400844 ，即验证通过时的位置，而不用
管验证的逻辑是怎么样的。
完整的脚本如下：
import angr
project = angr.Project("entry_language", auto_load_libs=False)
@project.hook(0x400844)
def print_flag(state):
print "FLAG SHOULD BE:", state.posix.dump_fd(0)
project.terminate_execution()
project.execute()
Bingo!!!
$ python2 solve_angr.py
FLAG SHOULD BE: Code_Talkers
$ ./entry_language
Enter the password: Code_Talkers
Nice!
参考资料
https://ctftime.org/task/1691
1488
6.2.8 re DefcampCTF2015 entry_language
1489