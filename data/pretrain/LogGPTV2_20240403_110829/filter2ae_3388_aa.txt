Author: lz520520@深蓝攻防实验室
# 前言
之前没有具体跟过JNDI注入的流程，以及一些JDK限制绕过姿势，所以这里详细记录下这个过程。  
​
首先JNDI注入主要通过rmi和ldap利用，分为三种利用方式，第一种仅限于低版本，后续会一个个调试
  1. rmi/ldap 请求vps远程加载恶意class，不需要本地依赖
  2. rmi/ldap 请求vps直接反序列化gadgets执行代码
  3. rmi/ldap 请求vps调用本地工厂类来执行代码
​
rmi client和server之间确实是通过序列化传输数据的，但ldap不是，就是ldap标准协议传输。
​
这里调试使用了jdk1.8.201/1.8.131/1.8.20做测试
# jndi+ldap利用
## 入口
LdapCtx#c_lookup  
​
通过this.doSearchOnce请求ldap server获取LdapResult  
LdapResult如下，server返回了两个属性，javaserializeddata和javaclassname，这是是忽略大小写的。  
进一步会判断属性里是否有`JAVA_ATTRIBUTES[2]=javaClassName`，有则进一步调用`com.sun.jndi.ldap.Obj#decodeObject`用于解码对象,所以为啥server需要返回一个无关紧要的javaclassname，就是这里需要判断  
​
JAVA_ATTRIBUTES如下  
​
​
    JAVA_ATTRIBUTES
    0 = "objectClass"
    1 = "javaSerializedData"
    2 = "javaClassName"
    3 = "javaFactory"
    4 = "javaCodeBase"
    5 = "javaReferenceAddress"
    6 = "javaClassNames"
    7 = "javaRemoteLocation"
    JAVA_OBJECT_CLASSES
    0 = "javaContainer"
    1 = "javaObject"
    2 = "javaNamingReference"
    3 = "javaSerializedObject"
    4 = "javaMarshalledObject"
    JAVA_OBJECT_CLASSES_LOWER
    0 = "javacontainer"
    1 = "javaobject"
    2 = "javanamingreference"
    3 = "javaserializedobject"
    4 = "javamarshalledobject"
## 三个分支
​
com.sun.jndi.ldap.Obj.class#decodeObject解析如下，emmm反编译有些问题，var1值和var2有复用情况  
有三种选择
    static Object decodeObject(Attributes var0) throws NamingException {
            String[] var2 = getCodebases(var0.get(JAVA_ATTRIBUTES[4])); // javaCodeBase
            try {
                Attribute var1;
                if ((var1 = var0.get(JAVA_ATTRIBUTES[1])) != null) { // javaSerializedData
                    ClassLoader var3 = helper.getURLClassLoader(var2);
                    return deserializeObject((byte[])((byte[])var1.get()), var3);
                } else if ((var1 = var0.get(JAVA_ATTRIBUTES[7])) != null) { // javaRemoteLocation
                    return decodeRmiObject((String)var0.get(JAVA_ATTRIBUTES[2]).get(), (String)var1.get(), var2); // javaClassName
                } else {
                    var1 = var0.get(JAVA_ATTRIBUTES[0]); // objectClass
                    return var1 == null || !var1.contains(JAVA_OBJECT_CLASSES[2]) && !var1.contains(JAVA_OBJECT_CLASSES_LOWER[2]) ? null : decodeReference(var0, var2); // javaNamingReference
                }
            } catch (IOException var5) {
                NamingException var4 = new NamingException();
                var4.setRootCause(var5);
                throw var4;
            }
        }
## 第一个分支(反序列化)
    if ((var1 = var0.get(JAVA_ATTRIBUTES[1])) != null) { // javaSerializedData
                    ClassLoader var3 = helper.getURLClassLoader(var2);
                    return deserializeObject((byte[])((byte[])var1.get()), var3);
                }
  1. 属性里包含javaSerializedData，则进入第一个分支，getURLClassLoader获取类加载器，这里会判断trustURLCodebase是否为true，来选择URLClassLoader还是getContextClassLoader()，这个对于javaSerializedData其实不重要。
这里的trustURLCodebase其实就是jdk高版本限制JNDI注入的系统变量com.sun.jndi.ldap.object.trustURLCodebase
    private static final String trustURLCodebase = (String)AccessController.doPrivileged(new PrivilegedAction() {
            public String run() {
                return System.getProperty("com.sun.jndi.ldap.object.trustURLCodebase", "false");
            }
        });
接着通过deserializeObject来使用上面获取到的类加载器对javaSerializedData的值进行反序列化，从而触发反序列化利用链。  
ldap
server对应处理如下，添加javaClassName和javaSerializedData，序列化gadget存储在javaSerializedData里  
​
总结  
ldap server需要返回两个属性
  * javaClassName：值无所谓
  * javaSerializedData：存储反序列化利用链
​
​
  1. 存在javaRemoteLocation属性，则进入第二个分支，
        else if ((var1 = var0.get(JAVA_ATTRIBUTES[7])) != null) { // javaRemoteLocation
                 return decodeRmiObject((String)var0.get(JAVA_ATTRIBUTES[2]).get(), (String)var1.get(), var2); // javaClassName
             }
decodeRmiObject里仅仅是根据javaClassName和javaRemoteLocation新建一个Reference对象，而且没有初始化Reference的classFactory和classFactoryLocation，导致后续无法利用，所以这里不做进一步分析了。  
​
###
## 第三个分支（引用类远程加载）
  1. 最后一条分支，虽然没有if判断，但需要调用decodeReference，需要满足objectClass的属性值为javaNamingReference。
        var1 = var0.get(JAVA_ATTRIBUTES[0]); // objectClass
    return var1 == null || 
     !var1.contains(JAVA_OBJECT_CLASSES[2]) // javaNamingReference
     && !var1.contains(JAVA_OBJECT_CLASSES_LOWER[2]) ? null : decodeReference(var0, var2); // javanamingreference
com.sun.jndi.ldap.Obj#decodeReference  
这里javaClassName就是最开始的要求，没有其他作用，然后获取javaFactory，用该值生成一个Reference对象，javaFactory在利用的时候是这样设置的#exp，接着的javaReferenceAddress在利用工具中没有写入，这一块后续再具体分析。后续就是返回Reference对象。  
Obj.decodeObject获取到Reference对象后，会通过`DirectoryManager.getObjectInstance`进行实例化  
LdapCtx#c_lookup  
`javax.naming.spi.DirectoryManager#getObjectInstance`会调用`javax.naming.spi.NamingManager#getObjectFactoryFromReference`获取ObjectFactory对象  
`javax.naming.spi.NamingManager#getObjectFactoryFromReference`先会用this.getContextClassLoader()加载reference对象里的类名对应的本地类，如果找不到本地类，就会getFactoryClassLocation()获取之前javaCodeBase里的URL，通过URLClassLoader来进行远程类加载，最后调用无参构造方法实例化。  
远程类加载，会自动根据类名添加.class后缀  
上面是小于1.8.191的，高于这个版本有限制远程类加载，我们看下  
NameManager#getObjectFactoryFromReference  
看起来和原来没有区别，但是loadclass内部做了限制  
需要设置系统变量com.sun.jndi.ldap.object.trustURLCodebase=true  
​
总结  
远程类加载方式，ldap server需要返回的属性
  1. javaClassName：任意值
  2. javaCodeBase：远程类加载地址，
  3. objectClass: 固定值为javaNamingReference
  4. javaFactory: 远程类加载的类名，如exp，http server上就需要放置一个exp.Class
​
​
## 第一个分支（本地工厂类）
在通过javaSerializedData进行反序列化时，如果本地没有利用链就无法利用，但这里其实还有另外一个思路，就是找本地的工厂类，这个类首先要实现ObjectFactory接口，并且其getObjectInstance方法实现中有可以被用来构造exp的逻辑，org.apache.naming.factory.BeanFactory类是tomcat容器catalina.jar里的，被广泛使用，getObjectInstance中会实例化beanClass并反射调用其方法。
  1. Obj#decodeObject返回对象，这里无反序列化利用链触发
  2. 接着会进入NamingManager#getObjectFactoryFromReference，如果是Reference对象，则会返回一个ObjectFactory对象（这里实现类是BeanFactory）
  3. 进而调用factory.getObjectInstance实例化BeanFactory对象里的beanClass
  4. 实例化beanClass后，会获取Reference对象里的forceString属性值
  5. 将属性值会以逗号和等号分割，格式如param1=methodName1,param2=methodName2
  6. 接着会反射调用beanClass对象里名为methodName1的方法，并传入参数，限定参数类型为String，参数通过Reference对象里param1属性获取。
简单来讲，原先server返回一个反序列化利用链，而现在本地构造不成利用链，就通过非反序列化方式执行，条件是
  1. ObjectFactory的实现类，其getObjectInstance方法里有可被用来构造exp的逻辑。
​
org.apache.naming.factory.BeanFactory就是一个，而BeanFactory是用来实例化beanClass的，所以还需要再找一个类，而这个类又有条件限定
  1. 本地classpath里存在