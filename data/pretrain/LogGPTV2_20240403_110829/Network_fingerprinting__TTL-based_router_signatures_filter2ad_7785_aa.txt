title:Network fingerprinting: TTL-based router signatures
author:Yves Vanaubel and
Jean-Jacques Pansiot and
Pascal M&apos;erindol and
Benoit Donnet
Network Fingerprinting: TTL-Based Router Signatures
Yves Vanaubel
Université de Liège
Belgium
PI:EMAIL
Jean-Jacques Pansiot
Université de Strasbourg
France
PI:EMAIL
Pascal Mérindol
Université de Strasbourg
France
PI:EMAIL
Benoit Donnet
Université de Liège
Belgium
PI:EMAIL
ABSTRACT
Fingerprinting networking equipment has many potential
applications and beneﬁts in network management and se-
curity. More generally, it is useful for the understanding of
network structures and their behaviors. In this paper, we de-
scribe a simple ﬁngerprinting mechanism based on the initial
TTL values used by routers to reply to various probing mes-
sages. We show that main classes obtained using this simple
mechanism are meaningful to distinguish routers platforms.
Besides, it comes at a very low additional cost compared
to standard active topology discovery measurements. As a
proof of concept, we apply our method to gain more insight
on the behavior of MPLS routers and to, thus, more accu-
rately quantify their visible/invisible deployment.
Categories and Subject Descriptors
C.2.1 [Network Architecture and Design]: Network
topology
General Terms
Measurement
Keywords
network discovery, ﬁngerprinting, MPLS, router signatures,
initial TTL
1.
INTRODUCTION
Fingerprinting [1, 2] refers to the act of dividing network
equipment into disjoint classes by analyzing messages sent
by that equipment, usually in response to some form of ac-
tive probing. Those classes may correspond, for instance,
to router operating system (OS), router brand, or router
conﬁguration. Providing such a ﬁngerprinting is useful for
several applications and studies. Indeed, for instance in net-
work management, if the ﬁngerprinting is based on router
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
IMC’13, October 23–25, 2013, Barcelona, Spain.
Copyright 2013 ACM 978-1-4503-1953-9/13/10 ...$15.00.
http://dx.doi.org/10.1145/2504730.2504761.
OS, it may help in listing the network nodes and identifying
vulnerable hosts in terms of security and fault tolerance [1,
3].
It may also help in identifying which nodes have an
abnormal behavior (e.g., delay, packets drop/modiﬁcation,
etc). In network topology discovery [4], ﬁngerprinting could
ﬁnd a suitable usage to understand how various types of
equipment are interconnected. Indeed, obtaining the router
level map of the topology from traceroute data requires
an additional probing intensive step: alias resolution [5].
Router ﬁngerprinting may drastically speed up this step,
since IP addresses belonging to diﬀerent classes cannot be
aliases and, so, do not require to be further probed for alias
resolution. Another interesting application is to understand
whether IP networks are heterogenous in terms of hardware
and software at diﬀerent scales (e.g., temporal to study the
evolution and structural to understand internal structure of
autonomous systems).
Indeed, an accurate ﬁngerprinting
technique may allow one to distinguish router OS among a
given brand.
However, ﬁngerprinting can be costly and possibly intru-
sive as it could require many probes [1]. In this case, ﬁn-
gerprinting could be a time consuming process using undue
network resources. Moreover, too many probes towards a
network node or a subnet could be seen as remote host scan-
ning and, consequently, be ﬁltered.
In this paper, we present a ﬁngerprinting method that is
a companion to traceroute-like exploration. Our method is
simple1, requires few additional probes to traceroute ones,
but still allows for classifying Internet routers based on their
hardware and OS. Our ﬁngerprinting method infers initial
TTL values [6, 7] used by routers when building their dif-
ferent kinds of reply packets. We call this set of TTL values
router signatures. Router signatures are meaningful for ﬁn-
gerprinting as the initial TTL values vary not only between
diﬀerent router platforms but also depending on the proto-
col and the type of message (error versus standard replies
for instance).
Indeed, no speciﬁc default value has been
standardized for the TTL ﬁeld.2
We consider a router signature as a n-tuple made of n ini-
tial TTL values. Those n TTL values are derived from TTL
included in diﬀerent types of probe replies. The number and
1Note that most routers do not reply to “complex” scanning
tools such as nmap [1].
2It is worth to notice that RFC1700 recommends to use 64
as initial TTL value [8]. This is however not followed by
most router manufacturers.
3691.0
0.8
f
d
c
0.6
0.4
0.2
0.0
echo-reply
time-exceeded
dst-unreachable
32
64
128
255
∗
iTTL
Figure 1: Initial TTL distribution (∗ refers to non-
responding routers)
the variety of probes sent give the actual value of n. In this
preliminary work, we focus on n = 2 TTL values, but we
already envision longer (i.e., n > 2) signatures to provide
better distributions among router’s OS. Indeed, the more
discriminating, the more meaningful the signiﬁcant classes.
Note that it is not that easy since the OS market is known
to be not uniformly shared. Thus, for an application such
as providing a pre-partition to speed up alias resolution pro-
cess, the interest may be limited at the granularity of the
partition.
Based on a large-scale measurement campaign, we ﬁrst
demonstrate that our router signatures are consistent among
measurement points. After providing some general distribu-
tion results, we illustrate how it can be used in the context
of topology discovery [4] or active probing in general.
In
particular, it can be useful to determine if measurements
are biased due to router type dependency.
In this paper,
we focus on MPLS tunnels identiﬁcation and validation [9,
10]. We try to map the behavior of several MPLS tunnel
classes [10] to our set of router signatures. We are thus able
to improve our previous study [10] on MPLS quantiﬁcation
thanks to TTL-based ﬁngerprinting. We believe that any
active probing tool can take beneﬁt from our simple ﬁnger-
printing proposal.
The remainder of this paper is organized as follows: Sec. 2
discusses our TTL-based signatures and our methodology;
Sec. 3 shows how those classes can be helpful to improve
our previous MPLS tunnels classiﬁcation and quantiﬁcation;
Sec. 4 positions this paper regarding the state of the art;
ﬁnally, Sec. 5 concludes this paper by providing discussions
on ongoing works and perspectives for further works.
2. ROUTER SIGNATURES
This section introduces the fundamentals of our ﬁnger-
printing method. In order to obtain replies from most routers,
our probing mechanism must remain as basic as possible.
We thus only rely on the standard behavior of IP routers.
The IP packet header contains a time-to-live (TTL) ﬁeld
used to avoid packets looping forever when a routing loop
occurs. This 8-bit ﬁeld is set by the originating host/router
to an initial value that is usually and nearly always a power
of 2 in the list 32 (or 30), 64, 128, and 255. The TTL ﬁeld
is decremented by one at each intermediate node along the
path the packet takes. When the TTL value is one, the
router determines that the packet has consumed suﬃcient
resources in the network, drops it, and informs the packet
source by sending back an Internet Control Message Protocol
(ICMP) time-exceeded message. traceroute [11] is based
on this simple behavior.
In this paper, we need to determine the initial TTL (iTTL)
of a received packet. Obviously, the (known) received value
is equal to iT T L − #hops where #hops is the number of
hops between the sender and the receiver.
It is worth to
notice that #hops  32) would give an incorrect guess of 32
instead of 64, e.g., a route of length 34 would be interpreted
as a route of length 2. Those cases could be managed during
a traceroute campaign by looking at the number of hops
of the forward route. A diﬀerence between the number of
forward and backward hops close to 32 would indicate that
the iTTL is 64 instead of 32.
A router signature is made of a n-tuple of n iTTLs, those
iTTLs being retrieved from diﬀerent ICMP messages. Our
basic pair-signature (with n = 2) simply uses the iTTL of
two diﬀerent messages: a time-exceeded message elicited by
a traceroute probe, and an echo-reply message obtained
from an echo-request probe. Quite surprisingly, for the
same ICMP protocol, a signiﬁcant proportion of nodes use
two diﬀerent iTTL values for these two messages, as shown
on Fig. 1.3 We also tried to add a third iTTL to our sig-
natures: a destination-unreachable message elicited by a
UDP probe. As shown on Fig. 1, more than 40% of routers
do not respond to such probes. Mostly, our basic signatures
are thus extended with an absence of response. We decided
to not take the destination-unreachable iTTL into ac-
count in this preliminary study. However, the information
it brings extends the number of possible signatures and we
think it could be helpful for alias resolution in particular.
In future works, we envision to consider more ICMP reply
types and also diﬀerent IP header ﬁelds. We already ob-
served that the iTTL does not only depend on the reply
type (error or standard replies) nor the answer origin (the
central or the per interface processors).
In theory, using n probes, we may have up to 4 × 5n−1
diﬀerent signatures since we can count the absence of an-
swer for echo-reply (i.e., a ∗) as a valuable pattern. It is
worth to notice that the “4” before the multiplication sign is
due to the fact that ICMP time-exceeded messages are our
basic probing mechanism, i.e., time-exceeded messages are
used to direct subsequent probes (echo-request, UDP pack-
ets, . . . ). This means that the ∗ does not count for time-
exceeded messages and, only |{255,128,64,32}| patterns are
available for such replies.
2.1 Measurement campaign
We used Paris Traceroute [12] with ICMP echo-request
packets to collect IP level paths. Each ICMP time-exceeded
packet received is used to build the ﬁrst component of a
router signature. In addition, for each IP interface discov-
ered, we sent 6 ICMP echo-request probes (in particular
to ensure the robust meaning of a ∗ and help our MPLS dis-
covery). We used the ICMP echo-reply packets received
to complete the second component of our router signature.
3The methodology of our measurement campaign will be
given in Sec. 2.1.
370Note that, each IP address collected is pinged six times only
once per vantage point (i.e., when it is discovered for the
ﬁrst time).
We perform our measurement study with a team of 200
randomly selected PlanetLab vantage points (VPs). Of the
200 VPs, 121 were located within the US; 10 VPs were lo-
cated in Europe, and the other 69 in diﬀerent countries. We
randomly selected 1,000,000 destinations in the Archipelago [13]
target list and evenly divided this target list among our VPs
team. The dataset has been collected between January 8th,
2013 and January 10th, 2013 using scamper [14]. Once the
data has been collected, we consider each IP address only
once and associate this unique address to its signature. We
so gathered 335,646 distinct IP addresses.
2.2 Measurement Cost
The additional overhead of a measurement campaign to
ﬁngerprint a set of routers found by a traceroute measure-
ment campaign comes at a low cost: each discovered IP
address must be probed with k ICMP echo-request mes-
sages, where k is a robustness parameter. Usually, many
traces discover the same IP addresses that need to be probed
only once [15]. So, at worst, this ﬁngerprinting needs k more
messages per IP address than traceroute only, and, on the
average, much less. In our measurement campaign (where
k = 6), 13.437.896 traceroute responses and 14.803.614
ping responses have been received. That is with our ﬁnger-
printing method, and on the average, a probed node sends
about the same number of time-exceeded messages and
echo-reply messages. This number could be further re-
duced by using a smaller robustness factor or by adding
some extra cooperation between VPs in order to avoid as
much as possible pinging the same IP address several times.
2.3 Signatures Consistency
The objective behind ﬁngerprinting is to obtain a signa-
ture that depends only on the probed node. To verify that
fact, we compared the signatures of IP addresses observed
by at least two distinct VPs (that is through distinct trace-
route and ping probes). Note that we consider only IP ad-
dresses that responded to traceroute probes, but some of
them do not always respond to ping probes (i.e., the second
component of the signature may take the value ∗). For the
IP addresses seen from several VPs, we classify our signa-
tures into three categories:
• coherent: the same signature is observed for a given
router interface among measurements done by all VPs.
This is the perfect case. Coherent signatures are ob-
served in 95.92% of the cases.
• weakly incoherent: from some VPs, the signature is of
the type  while it is  for some others.
This concerns 3.94% of our signatures.
• incoherent: several diﬀerent signatures are observed
for a given router interface among measurements done
by all VPs. This is the worst case but it is also very
infrequent (0.14% of the cases).
Weakly incoherent signatures can be explained by two
phenomena: some nodes may not respond to ping at some
time, for example because of overloading, rate limiting, or
ﬁltering inducing the echo-reply lost on some paths [16].
For the 3.94% of weakly incoherent signatures we observed
f
d
p
0.5
0.4
0.3
0.2
0.1
0.0
2 5 5
2 5 5
−
2 5 5
−
∗
2 5 5
6 4
−
1 2 8
−
∗