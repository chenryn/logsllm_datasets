client.cmd('*, 'dnsutil.hosts_append',['/etc/hosts','127.0.0.1','ad1.yuk.co'])
3）API调用：
#删除指定被控主机hosts的主机配置项
salt '*! dnsutil.hosts_append /etc/hosts 127.0.0.1 adl.yuk.com,ad2.yuk.com
#添加指定被控主机hosts的主机配置项
2）示例：
1）功能：
（5）dnsutil模块
client.cmd('sSN2013-08-021',cron.set_job',['root',*',*',*,*,'*,/usr/echo'])
3）API调用：
salt'sN2013-08-022'cron.rm_job root/usr/local/weekly
#删除指定的被控主机、root用户crontab的/usr/local/weekly任务作业
#为指定的被控主机、root用户添加/usr/local/weekly任务作业
salt 'SN2013-08-022' cron.raw_cron root
#查看指定被控主机、
2）示例：
1）功能：
（4）cron模块
client.cmd('sSN2013-08-021', 'cp.get_file',[' salt://path/to/file ',′ /minion/dest'])
3）API调用：
#下载URL内容到被控主机指定位置
：被控主机文件常见操作，
dnsutil.hosts_remove /etc/hosts adl.yuk.com
：实现被控主机通用DNS 相关操作。
实现被控主机的crontab 操作。
Linux公社
root用户的crontab清单
www.linuxidc.com
，包括文件读写、权限、查找、校验等。
第10章集中化管理平台Saltstack详解
I*+
*
*'1/usr/local/weekly
163
---
## Page 191
164第二部分高级篇
RELATED,ESTABLISHED-jACCEPT
Salt1*1
-jACCEPT'
#在所有被控端主机追加（append)、插入（insert）iptables 规则，其中INPUT为输入链
2）示例：
1）功能：被控主机iptables支持。
（7）iptables 模块
client.cmd('*'，file.remove
3）API调用：
salt*file.remove/tmp/foo
#删除所有被控主机的/tmp/foo文件
#给所有被控主机的/tmp/test/test.conf文件追加内容“maxclient100"
salt*'file.mkdir/opt/test
#在所有被控主机创建/opt/test目录
#修改所有被控主机/etc/passwd的权限mode为0644
salt*file.get_mode/etc/passwd
#获取所有被控主机/etc/passwd的权限mode，如755、644
salt * file.stats /etc/passwd
#获取所有被控主机/etc/passwd的stats信息
salt
#复制所有被控主机本地/path/to/src文件到本地的/path/to/dst文件
#修改所有被控主机/etc/passwd 文件的属组、用户权限，等价于chown root:root/etc/passwd
salt*'file.get_sum/etc/passwdmd5
#校验所有被控主机文件的加密信息、支持md5、sha1、sha224、sha256、sha384、sha512加密算法
返回True
file.copy/path/to/src/path/to/dst
file.chown/etc/passwdroot root
iptables.insert filter INPUT position=3 rule='-m state --state
iptables.append filter INPUT rule='-m state
Linux公社
/tmp/test/test.conf"maxclient100"
*,[/tmp/foo'])
www.linuxidc.com
-state RELATED,ESTABLISHED
---
## Page 192
等
2）示例：
1）功能：被控主机程序包管理，如 yum、apt-get 等。
（9）pkg包管理模块
client.cmd('SN2013-08-022','network.ip_addrs')
3）API调用：
salt'SN2013-08-022'
#获取指定被控主机·SN2013-08-022+的子网信息
salt'SN2013-08-022'
#获取指定被控主机·SN2013-08-022·的IP地址配置信息
salt'SN2013-08-022'network.interfaces
#获取指定被控主机·SN2013-08-022·的网卡配置信息
#检测指定被控主机·SN2013-08-022，是否属于10.0.0.0/16子网范围，属于则返回True
salt'SN2013-08-022'
#获取指定被控主机·SN2013-08-022·的MAC地址
salt
salt
salt
2）示例：
1）功能：返回被控主机网络信息。
（8）netwrok模块
--sport80-jACCEPT\''])
client.cmd('SN2013-08-022',
3）API调用：
salt+*
#保存所有被控端主机规则到本地硬盘（/etc/sysconfig/iptables）
jACCEPT'
#在所有被控端主机删除指定链编号为3（position=3）或指定存在的规则
等价于yum-y install php
salt
alt
SN2013-08-022'
'SN2013-08-022'
SN2013-08-022'
iptables.save/etc/sysconfig/iptables
iptables.deletefilter
Linux公社
network.subnets
network.ip_addrs
network.hwaddr eth0
network.traceroutewww.qq.com
network.pingwww.qq.com
network.dig www.qq.com
:www.linuxidc.com
'iptables.append',['filter','INPUT','rule=\'-p tcp
INPUT rule='-m state'-state RELATED,ESTABLISHED
第10章
集中化管理平台Saltstack详解165
---
## Page 193
信息通常都是一些静态类的数据，包括CPU、内核、操作系统、虚拟化等，在服务器端可以
index.html#all-salt-modules。当然，我们也可以通过Python扩展功能模块来满足需求。
（文件系统挂载模块），等等，更多内容见官网介绍：http://docs.saltstack.com/ref/modules/all/
（系统用户模块）、group（系统组模块）、partition（系统分区模块）、puppet（puppet 管理模块）、
10.4
166第二部分高级篇
grains 是 Saltstack 最重要的组件之一，grains 的作用是收集被控主机的基本信息，这些
通过上面介绍的10个常用模块，基本上已经覆盖日常运维操作。Saltstack还提供了user
（11）其他模块
client.cmd('SN2013-08-022','service.stop',['nginx'])
3）API调用：
2）示例：
1）功能：被控主机程序包服务管理。
（10）Service服务模块
client.cmd('SN2013-08-022','pkg.remove,['php'])
3）API调用：
#升级所有被控主机的软件包
#卸载所有被控主机的PHP环境
salt*'pkg.install php
salt
salt
salt
salt
saltI*'service.enablenginx
#开启（enable）禁用（disable）nginx开机自启动服务
grains 组件
pkg.remove php
service.status nginx
service.stop nginx
service.start nginx
service.restart nginx
service.reload nginx
service.disable nginx
Linux公社 www.linuxidc.com
---
## Page 194
只适合相对固定的键与值。下面分别举例说明。
控端扩展模块API实现，区别是模块更灵活，
10.4.2
"SN2013-08-022'grains.item os，结果如图 10-9所示。
10.4.1
行版本为CentOS的被控端可以通过-G参数来过滤，如 salt-G'os:CentOS'test.ping。
022（centOS6.4）为例，最终得到“host:SN2013-08-022”。同时，命令行的匹配操作系统发
供的用来区分不同操作系统的示例如下（采用jinja模板）：
根据这些信息进行灵活定制，管理员可以利用这些信息对不同业务进行个性化配置。官网提
定义 grains 数据的方法有两种，其中一种为在被控主机定制配置文件，另一种是通过主
获取主机id为“SN2013-08-022”的所有 grains 键及值信息，执行命令如图10-10所示。
当然，也可以获取主机单项 grains 数据，
获取所有主机的 grains项信息：
salt -G'kernelrelease:2.6.32-358.14.1.el6.x86_64'cmd.rununame-a'
匹配内核版本为2.6.32-358.14.1.el6.x86_64的主机：
示例中CentOS发行版主机将被“host:{{grains[fqdn]}”匹配，以主机SN2013-08-
{%ifgrains['os']=='Ubuntu'}
定义 grains 数据
grains 常用操作命令
Linux公社 www.linuxidc.com
os:Centos
rooteSN2013-08-020~]# saltSN2013-08-022'grains.itemos
图 10-9根据 grains 获取主机操作系统发行版本信息
'Centos'}
第10章集中化管理平台Saltstack详解167
，可以通过Python 编程动态定义，而配置文件
，如获取操作系统发行版本，执行命令：salt
---
## Page 195
如图10-11所示。
端主机运行：salt＇SN2013-08-022'grains.item roles deployment cabinet，观察配置的键与值，
参数为default_include:minion.d/*.conf，具体操作如下：
168第二部分高级篇
重启被控主机 salt-minion服务，使之生效：service salt-minion restart。验证结果在主控
【 /etc/salt/minion.d/hostinfo.conf 】
SSH登录一台被控主机，如 SN2013-08-022，配置文件定制的路径为/etc/salt/minion，
grains:
1.被控端主机定制grains数据
cabinet:13
deployment:datacenter4
roles:
-webserver
memcache
erfaces:lo:[127.0.0.1′],eth0:[192.168.1.22]
SN2013-08-022
2013-08-022
Linux
P
coding:UIF8
Linux公社 www.linuxidc.com
Intel(R) Pentium(R) CPU G2030 e 3.00GHz
6.00
2.6.32-358.18.1.e16.x86_64
：07/02/2012
en_us
图10-10获取主机所有 grains信息（部分截图）
vendor
pat pse36
cx16pc
---
## Page 196
grains数据。
srv/salt/_grains开始编写代码，实现获取被控主机系统允许最大打开文件数（ulimit-n）的
文件的file_roots 项，默认的base配置在/srv/salt）下生成_grains 目录，执行install -d /
效（即编译Python 源码文件成字节码pyc）。在主控端bash目录（见/etc/salt/master 配置
grains['max_open_file]=_open_file 将获取的 Linux ulimit -n 的结果值赋予 grains['max
 grains={初始化一个 grains字典，变量名一定要用 grains，以便 Saltstack 识别；
 grains_openfileO定义一个获取最大打开文件数的函数，函数名称没有要求，符合
【/srv/salt/_grains/sysprocess.py】
首先在主控端编写Python代码，然后将该Python文件同步到被控主机，最后刷新生
import os,sys,commands
2.主控端扩展模块定制grains 数据
Python 的函数命名规则即可；
上面代码的说明如下。
return grains
if getulimit[0]==0:
except Exception,e:
cry:
open_file=65536
#init default value
grains={}
deployment:datacenter4
roles:
pass
getulimit=commands.getstatusoutput('source /etc/profile;ulimit-n')
return os max open file of grains value
_open_file=int(getulimit[l])
webserver
Linux公社 www.linuxidc.com
图 10-11定制grains 数据信息
第10章集中化管理平台Saltstack详解169
grains.i
item
roles
deploy
nent
Di
---
## Page 197
义和使用。
式，即键／值，最上层的键一般为主机的id或组名称。下面详细描述如何进行pillar 的定
业务组主机的用户id、组id、读写权限、程序包等信息，定义的规范是采用Python字典形
全性很高，适用于一些比较敏感的数据，这也是区别于 grains 最关键的一点，如定义不同
业务特性的被控主机相关联，这样不同被控主机只能看到自己匹配的数据，因此pillar安
定义好的数据可以被其他组件使用，如模板、state、API等。在pillar中定义的数据与不同
10.5
open_file，结果显示“max_open_file:65535"，这就是前面定制的主机 grains信息。
为Python可执行的格式。
路径下生成字节码pyc；/var/cache/salt/minion/fles/base/_grains/为临时存放位置。
么？文件已经同步到minioncache目录中，如下：
比如硬件、内核信息等。当有动态类的功能需求时，需要提行刷新，具体操作如下：
170第二部分高级篇
pillar也是Saltstack最重要的组件之一，
刷新模块salt"SN2013-08-022'sys.reload_modules，再看看主机发生了什么变化？在/var/
同步模块salt‘SN2013-08-022'saltutil.sync_all，看看“SN2013-08-022”主机上发生了什
SN2013-08-022:
校验结果为可以在主控端查看 grains 信息，执行 salt 'SN2013-08-022 grains.item max_
/var/cache/salt/minion/extmods/grains/为扩展模块文件最终存放位置，刷新模块后将在同
/var/cache/salt/minion/extmods/grains/grains_openfile.py
最后同步模块到指定被控端主机并刷新生效，因为 grains 比较适合采集静态类的数据，
/var/cache/salt/minion/files/base/_grains/grains_openfile.py
/var/cache/salt/minion/extmods/grains/grains_openfile.pyc
/var/cache/salt/minion/extmods/grains/grains_openfile.py
/var/cache/salt/minion/files/base/_grains/grains_openfile.py
pillar 组件
max_open_file: 65535
Linux公社www.linuxidc.com
，其作用是定义与被控主机相关的任何数据
---
## Page 198
细介绍pillar使用sls定义的配置过程。
分相似，新人容易将两者混淆，两者文件的配置格式、人口文件top.sls 都是一致的。下面详
果，以主机“SN2013-08-022”为例，执行 salt'SN2013-08-022'pillar.data。
这项功能，修改后执行 salt *pillar.data来观察效果。图10-12为pillar_opts:Ture 的返回结
开放，可通过修改/etc/salt/master配置中的 pillar_opts:Ture或 False 来定义是否开启或禁用
10.5.1
pillar支持在 sls文件中定义数据，格式须符合YAML规范，与 Saltstack的 state 组件十
Saltstack 默认将主控端配置文件中的所有数据都定义到pillar中，而且对所有被控主机
2.SLS文件定义
1.主配置文件定义
pillar的定义
Linux公社www.linuxidc.com
eSN2013-08-020-#saltSN2013-08-022'pi11ar
syth
config_dir:
conf_file:
cluster masters:
client_acl_btacklist:
client_acl:
duth
图10-12主机所有pillar信息（部分截图）
False
False
/etc/salt
Dode:
tei
第10章集中化管理平台Saltstack详解171
data
---
## Page 199
机pillar数据，运行salt*saltutil.refresh_pillar即可。
时可以看到我们定义的数据，如图10-13所示，如果结果不符合预期，可以尝试刷新被控主
机，其中包括了一个data.sls文件，具体内容如下：
172第二部分高级篇
通过查看“N2013-08-022”主机的pillar数据，可以看到多出了data.sls数据项，原因是
（3）校验pillar
appname:website
【/srv/pillar/data.sls】
【 /srv/pillar/top.sls】
flow:
base:
（2）定义人口文件top.sls
同时创建pillar目录，
pillar_roots:
修改主配置文件/etc/salt/master的pillar_roots 参数，定义 pillar的主目录，格式如下：
（1）定义pillar的主目录
maxconn:30000
base:
-/srv/pillar
data
rooteSN2013-08-020-J#salt'SN2013-08-022
2013-08-022:
flow:
Linux公社www.linuxidc.com
maxconnt
30000
，执行命令：install-d/srv/pillaro。
图10-13返回主机pillar的信息
pillar.data appname
FLOW
---
## Page 200
org/docs/templates/
endf”为jinja2的模板语法，更多信息请访问jinja2官网语法介绍，网址为 http:/jinja.pocoo.