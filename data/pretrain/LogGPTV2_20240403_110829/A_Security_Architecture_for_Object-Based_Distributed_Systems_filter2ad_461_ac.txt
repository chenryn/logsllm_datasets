secure bindings between DSOs and their public keys. The
replica certiﬁcates create secure bindings between replicas
and the DSOs they are part of. Finally, it is the individual
clients’ responsibility to establish secure name bindings for
the DSOs they are using (but external CAs could mediate
this).
6 Platform Security
Globe relies heavily on mobile executable code - code
that is downloaded on the ﬂy from possibly untrusted
sources to instantiate replicas and user proxies. Globe also
relies heavily on remote code execution - object code is up-
loaded and executed on possibly untrusted hosts in order to
bring computation close to the clients (this is the dynamic
replica creation we brieﬂy discussed in Section 4.1). This is
where platform security issues come from. We distinguish
two categories: protection against malicious code, and pro-
tection against malicious hosts. Since Globe object code is
executed on Globe object servers, it is here where platform
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
security issues are handled.
One of the aims of our research is to create a highly se-
cure object server that prevents malicious replicas from cor-
rupting the host on which they run. Knowing they can host
other people’s code without danger for their own machine,
would convince more people to share their computing re-
sources and run DSO replicas even if they have no prior
knowledge of the owners of these DSOs. Our ultimate goal
is to create a large peer-to-peer community running Globe
object servers. In such a community, object server owners
could negotiate to host each other’s DSO replicas (we are
investigating mechanisms that could automate such negoti-
ation, but this is outside the scope of this paper).
As for a motivating example, consider creating a Globe
object modeling a popular Web site and placing replicas of
this DSO on hosts on the Internet according to where most
of the download requests come from [20]. A community
of Globe users running Globe servers that facilitate such
Web-site mirroring would, in fact, create a peer-to-peer ver-
sion of a Content Delivery Network. Mirroring Web docu-
ments is only one possible application for a Globe commu-
nity and other types of applications that could also beneﬁt
from adaptive replication algorithms easily come to mind.
Looking at such possible applications, we realize that
while the host protection from malicious replica code is es-
sential for the acceptance of such an architecture, it is the
reverse problem - protecting replicas from malicious hosts -
that would ensure the usability of the system. For example,
for Web page mirroring, we need to ensure that an object
server that has agreed to host a mirror replica will not mali-
ciously alter the pages it is hosting.
6.1 Protection against Malicious Code
With respect to the problem of protecting of hosts against
malicious mobile code, our approach is a combination of
sandboxing and code signing. We want to emphasize that
the focus of this work is not designing new sandboxing
tools, but rather using existing ones. We have decided to
implement the Globe object server in Java 2.0, which pro-
vides extensive support for per-class and per-package con-
ﬁgurable security policies, but using other secure sandbox-
ing environments, such as Janus [11], should produce sim-
ilar results. We require mobile Globe object code to be
signed with the object’s private key, and we make use of the
Java protection domains [12] to associate permissions with
code packages signed with different keys. We differentiate
between object code actively installed by the user running
the object server, and replicas that are installed on the server
as a result of remote requests (when a DSO wants to place
one of its replicas on that particular server). The user run-
ning the object server installs new local objects whenever
he wants to use a new DSO. Recall that before using a DSO
a user has to create a name binding between that object’s
OID and the human-readable name of the application mod-
eled by that DSO. It is during this name-binding process that
the user also sets the local permissions for the DSO, namely
what set of actions the DSO’s local object is allowed to per-
form on the user’s machine. This local security policy is
then associated with the object key derived from the OID,
so when the object code signed with that key is downloaded,
that security policy is automatically associated with it. By
default, the security policy for DSO’s local objects is quite
restrictive, it does not allow any access to the ﬁle system or
to other system resources such as the printer. It is up to the
object server owner to grant more rights to a local object.
For example, the local object for a DSO modeling a video-
on-demand application might be allowed to write data in the
/tmp directory for buffering purposes.
The other case when mobile object code is installed is
when a DSO replica with administrative privileges decides
to start another replica on some object server. Before the
object code for the new replica is installed, there is a negoti-
ation phase between the object server and the administrative
replica. The administrative replica has to prove that (1) it is
part of the identiﬁed DSO, and (2) it is authorized to cre-
ate a new replica for that DSO. The administrative replica
will generally need to negotiate with the object server about
resource usage, such as required memory, storage, CPU ca-
pacity, and network bandwidth. Note that our scheme easily
permits differentiating between objects by associating per-
missions with OIDs. For example, certain DSOs may be
given permission to access part of the server’s ﬁle system,
while others may be prohibited to be hosted at all.
Once this negotiation is completed, the administrative
replica needs to produce a replica certiﬁcate for the replica
to be created. This new replica certiﬁcate will contain the
object server’s public key together with the bitmap corre-
sponding to the object methods the new replica is allowed
to execute.
6.2 Protection against Malicious Hosts
The second problem we are trying to solve is how to per-
form trusted computations on an untrusted host. We believe
the general problem is extremely hard, possibly intractable.
Despite new protection techniques, such as code cloaking,
and a variety of hardware solutions, illegitimate modiﬁca-
tion of software is still a major issue. Since it seems unfea-
sible to solve the general problem, in Globe we will focus
on techniques that reduce the threat of catastrophic DSO
state corruption due to replicas running on malicious hosts.
In other words, we assume we can always have malicious
replicas, but we concentrate on minimizing the negative ef-
fect such replicas can have on the DSO’s functionality.
One way to achieve this protection is through the reverse
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
access control mechanism described earlier. Recall that
replicas are issued replica certiﬁcates that specify which of
the DSO’s methods they are allowed to execute. In this way,
execution of security-sensitive actions can be restricted to
replicas running only on trusted hosts. For example the ob-
ject owner can select a trusted group of core replicas, and set
a security policy where all methods that change the DSO’s
state are executed only on these core replicas. The core
replicas can propagate state updates to a much larger set
of less-trusted cache replicas. Users can perform read op-
erations on the cache replicas. Although malicious cache
replicas can choose to ignore state updates, or even return
bogus data as answers to read requests, the harm they can
do is limited for two reasons. First, such bogus data is sent
only to the fraction of users that are connected to the mali-
cious cache, and a malicious cache cannot propagate bogus
state updates to other caches, since the reverse access con-
trol mechanism allows only core replicas to execute write
requests (of course, there are applications for which a great
deal of harm can be done sending bogus data even to a small
percentage of the users - stock quotes for example - in such
a case, different protection mechanisms need to be consid-
ered).
Another mechanism that can be used to achieve secu-
rity guarantees for methods executed by untrusted replicas
is state signing. For example, a Globe-powered Web site
(as described in [27]) can have all its individual documents
time-stamped and signed with the object’s key, so that for
each GET request, the client’s semantics subobject would
check to make sure the untrusted cache replica is returning
a properly signed fresh document, with the same title as the
link being followed. Through state signing we can achieve
highly secure distributed objects, since now all the harm
that malicious replicas can do is denial of service. No cache
will be able to produce a bogus document, because it would
have to fake the DSO’s signature. However, state signing
is rather application speciﬁc. If the state is large, as is the
case, for example, with Web sites, we need to ﬁnd a way to
partition that state so that each part can be signed separately.
Partitioning needs to be done in units that match the result
values of read operations, which is not always possible as
is easily seen by considering a result value that needs to be
computed such as an average value. Nevertheless, we be-
lieve that in many cases, state signing in combination with
the more general reverse access control mechanism is a very
useful tool in making certain classes of Globe applications
more secure.
Finally, we are investigating how a reputation or user-
rating mechanism can be used to offer security guarantees to
running replicas on untrusted servers [19]. A highly trusted
server can be granted more permissions for executing meth-
ods (expressed in the replica certiﬁcate) than a less-trusted
server. The problem is that we need to be able to securely
check whether trust in a server is still justiﬁed. This mech-
anism is subject of current research.
7 Secure Method Invocation
Before starting our discussion about secure method invo-
cation, let us ﬁrst formally deﬁne this concept in the Globe
context. A method invocation  issued by a user U and to
be executed on a replica R is said to be secure if the follow-
ing conditions are met:
(cid:15) U is allowed to invoke  under the DSO’s security
policy (i.e., U has been issued a user certiﬁcate with
the bit corresponding to  set).
(cid:15) R is allowed to execute  under the DSO’s security
policy (i.e., R has been issued a replica certiﬁcate with
the bit corresponding to  set).
(cid:15) all the network communication between U and R takes
place through a channel that preserves data integrity,
origin and destination authenticity, and possibly also
secrecy.
In this context, we say that a user proxy and a replica
have established a secure channel if they have exchanged
and veriﬁed each other’s certiﬁcates and have established a
communication channel that preserves data integrity. Such
secure channels are established between security subobjects
of local representatives on top of the regular communication
channels established at the communication subobject level.
They are identiﬁed through channel IDs.
For a user, invoking methods on a DSO involves only
calling those methods on his proxy. The replication, com-
munication and security subobjects of the user proxy work
together to transform the user requests into remote invoca-
tions, send them to replicas allowed to handle them, wait
for the return values and present these values to the user.
We will look at this process in more detail and explain what
mechanisms are employed to make it secure.
The user invokes a DSO method by using the interface
presented by the control subobject of his proxy. The control
subobject ﬁrst makes sure the user is allowed to invoke that
method by inspecting the user certiﬁcate (this can also help
in providing personalized user interfaces - only show what
has a chance of succeeding). This check can be easily cir-
cumvented by a malicious user, and is in place only to warn
the user if he by mistake invokes forbidden methods. As we
will show below, a DSO does not need to trust the user’s
local object. If the method call is allowed, the control sub-
object then marshals the method and parameters and passes
them to the replication subobject. The replication subobject
decides whether the method invocation can be performed
locally, or whether it needs to be sent to another replica.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
In many cases, user proxies will not even have a semantics
subobject, so the request will have to be executed some-
where else. The replication subobject looks at the request,
and asks the security subobject to establish a secure channel
with a replica that is allowed to execute such a request. The
security object ﬁrst searches in a list of established secure
channels to determine whether such a replica is already in
that list. If it is, it simply returns the corresponding chan-
nel ID to the replication subobject, which uses it to send the
request through the communication subobject.
The other possibility is that none of the replicas with
which the user proxy has established secure channels is al-
lowed to execute that particular method request.
In this
case, the security subobject has to ﬁnd such a replica, ei-
ther using the Globe Location Service or some other direc-
tory service provided by the object itself. As we mentioned
earlier, we do not have to trust any of these services, they
only provide hints that help the proxy ﬁnd a replica allowed
to execute certain methods. Once such a candidate replica
is identiﬁed, it will have to prove that it indeed has these
rights. Such a proof is part of the protocol for secure chan-
nel establishment, which is outlined in Figure 7.
1. Method invocation
(by the user)
User Proxy
Control
subobject
   2. Check user
   permissions
Security     Subobject
3. Marshall request
Replication
subobject
   4. Request 
 secure channel
7. Send request over
    network channel
Communication
subobject
8. Encrypt and sign   
 network packet
Secure Channels Table
Channel 
ID
Replica
Permissions
    0
    1
    2
00111101
01110000
11000011
9. Network data transfer
   Location Service
5. Find replica allowed
to execute request
Replica
  6. Establish
  secure channel
Figure 5. Transforming a user request into a
remote method invocation
This protocol is derived from the ISO/IEC 9798-3 mu-
tual authentication protocol [30]. We have chosen to use a
challenge-response 4-pass protocol instead of a more com-
pact 3-pass one based on timestamps because in this way
our security does not depend on synchronized clocks, which
some clients may not have. Note that the replica commits
to expensive public key cryptographic operations only af-
ter the proxy has done the same. This provides basic pro-
tection against denial of service attacks. Also, the shared
key is generated by the replica since we assume a user may
want to install a lightweight version of the object server that
may not implement a very strong random number generator
algorithm.
After the completion of the above protocol, Key becomes
the shared secret between the user proxy and the replica and
can be used to protect the integrity and secrecy of the data
further exchanged by the two parties. Once a secure chan-
nel has been established with the replica, and assuming that
the replica is allowed to execute the requested method, the
user proxy’s security subobject can return this new chan-
nel ID to the replication subobject which will use it to send
the request through the communication subobject. Figure 5
illustrates the steps described so far.