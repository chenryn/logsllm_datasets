tion matching accuracy higher than 90% and above state-of-the-art
approaches such as Bindiff or Diaphora. iLine [26] is a graph-based
lineage recovering tool based on a combination of low-level binary
features, code-level basic blocks and binary execution traces. It is
evaluated on a small dataset of 84 Windows malware and claim
an accuracy of 72%. Ming et al. [33] also proposed an optimisation
for the iBinHunt binary diffing tool, which computes similarity
between binaries from their execution traces. They further apply
their tool on a dataset of 145 Windows malware samples from 12
different families.
While these approaches for binary similarity and lineage infer-
ence provide invaluable insights when applied in the context in
which they were developed, none of them can be applied on Linux-
based IoT malware. First of all few of them are able to handle Linux
binaries, and those that can typically do not go beyond the ARM
and MIPS architectures. We also believe that binary-level or basic
block-based malware slicing is likely to be prone to over-specific
code reuse identification. Similarly, execution traces are likely to
be too coarse-grained for variant identification. Additionally, we
have witnessed in our dataset that, when used, packing of IoT mal-
ware can easily be evaded. As a result, given the reasonably low
obfuscation of the IoT malware in our dataset we have decided to
take this opportunity to use function-level binary diffing to identify
relevant code similarities between and within IoT malware families.
Finally, the lack of any available scalable Linux-compatible multi-
architecture binary similarity technique led us to choose the open
source binary diffing (IDA plugin) tool Diaphora [1].
7 CONCLUSION
We have presented the largest study known to date over a dataset
consisting of 93K malicious samples. We use binary similarity-
based techniques to uncover more than 1500 malware variants and
validate more than 200 of them thanks to their source code leaked
online. AV signatures appear to be not robust enough against small
modifications inside binaries. As such rewriting a specific function
or borrowing it from another family can be enough to derail AVs
often leading to mislabeling or missed detections.
ACKNOWLEDGMENTS
We are greateful to Karl Hiramoto from VirusTotal for assisting us
with the binary samples and VirusTotal reports used for this study.
This research was supported by the European Research Council
(ERC) under the European Union’s Horizon 2020 research and in-
novation programme (grant agreement No 771844 - BitCrumbs).
REFERENCES
[1] [n.d.]. Diaphora, a free and open source program diffing tool. http://diaphora.re/.
[2] [n.d.]. VirusTotal. https://www.virustotal.com/.
[3] Manos Antonakakis, Tim April, Michael Bailey, Matt Bernhard, Elie Bursztein,
Jaime Cochran, Zakir Durumeric, J Alex Halderman, Luca Invernizzi, Michalis
Kallitsis, et al. 2017. Understanding the mirai botnet. In USENIX Security.
[4] T. Asano, B. Bhattacharya, M. Keil, and F. Yao. 1988. Clustering Algorithms
Based on Minimum and Maximum Spanning Trees. In Proceedings of the Fourth
Annual Symposium on Computational Geometry (Urbana-Champaign, Illinois,
USA) (SCG ’88). Association for Computing Machinery, New York, NY, USA,
252–257. https://doi.org/10.1145/73393.73419
[5] Michael Bailey, Jon Oberheide, Jon Andersen, Z Morley Mao, Farnam Jahanian,
and Jose Nazario. 2007. Automated classification and analysis of internet malware.
In RAID.
[6] Ulrich Bayer, Paolo Milani Comparetti, Clemens Hlauschek, Christopher Kruegel,
and Engin Kirda. 2009. Scalable, behavior-based malware clustering.. In NDSS.
[7] BitDefender. 2018. New Hide ‘N Seek IoT Botnet using custom-built Peer-to-Peer
communication spotted in the wild. https://labs.bitdefender.com/2018/01/new-
hide-n-seek-iot-botnet-using-custom-built-peer-to-peer-communication-
spotted-in-the-wild/.
[8] BleepingComputer. 2019. Cr1ptT0r Ransomware Infects D-Link NAS Devices,
Targets Embedded Systems. https://www.bleepingcomputer.com/news/security/
cr1ptt0r-ransomware-infects-d-link-nas-devices-targets-embedded-systems/.
[9] Alejandro Calleja, Juan Tapiador, and Juan Caballero. 2016. A Look into 30
Years of Malware Development from a Software Metrics Perspective, Vol. 9854.
325–345.
[10] Alejandro Calleja, Juan Tapiador, and Juan Caballero. 2018. The MalSource
Dataset: Quantifying Complexity and Code Reuse in Malware Development. (11
2018).
[11] Ricardo JGB Campello, Davoud Moulavi, and Jörg Sander. 2013. Density-based
clustering based on hierarchical density estimates. In PAKDD.
[12] Emanuele Cozzi, Mariano Graziano, Yanick Fratantonio, and Davide Balzarotti.
2018. Understanding Linux Malware. In IEEE S&P.
[13] Matteo Dell’Amico. 2019.
Incremental, Scalable,
Hierarchical Density-Based Clustering for Arbitrary Data and Distance.
arXiv:1910.07283 [cs.LG]
FISHDBC: Flexible,
[14] Wei Dong, Charikar Moses, and Kai Li. 2011. Efficient k-nearest neighbor graph
construction for generic similarity measures. In Proceedings of the 20th interna-
tional conference on World wide web. ACM, 577–586.
[15] Tudor Dumitraş and Iulian Neamtiu. 2011. Experimental Challenges in Cyber
Security: A Story of Provenance and Lineage for Malware. In CEST.
[16] Martin Ester, Hans-Peter Kriegel, Jörg Sander, and Xiaowei Xu. 1996. A density-
based algorithm for discovering clusters in large spatial databases with noise.. In
KDD.
[17] Cong Fu, Chao Xiang, Changxu Wang, and Deng Cai. 2019. Fast approximate
nearest neighbor search with the navigating spreading-out graph. Proceedings of
the VLDB Endowment 12, 5 (2019), 461–474.
[18] Leslie Ann Goldberg, Paul W Goldberg, Cynthia A Phillips, and Gregory B Sorkin.
1998. Constructing Computer Virus Phylogenies. J. Algorithms 26, 1 (1998).
[19] Mariano Graziano, Davide Canali, Leyla Bilge, Andrea Lanzi, and Davide
Balzarotti. 2015. Needles in a Haystack: Mining Information from Public Dynamic
Analysis Sandboxes for Malware Intelligence. In Proceedings of the 24rd USENIX
Security Symposium (USENIX Security).
The Tangled Genealogy of IoT Malware
ACSAC 2020, December 7–11, 2020, Austin, USA
[20] M. Hao. [n.d.]. A Look into the Gafgyt Botnet Trends from the Commu-
nication Traffic Log. https://nsfocusglobal.com/look-gafgyt-botnet-trends-
communication-traffic-log/.
[21] Irfan Ul Haq and Juan Caballero. 2019. A Survey of Binary Code Similarity.
arXiv:1909.11424 [cs.CR]
wide-open-backdoor/.
Figure 7: File size distribution of malware in the dataset.
A FEATURES-BASED CLUSTERING
In this Section we describe our initial attempt at reconstructing
IoT malware lineage using a traditional feature-based clustering
approach. As explained in Section 3, we eventually adopted a differ-
ent solution to reach our goal. However, as feature-based clustering
is often used in malware studies, we believe there is a value in
reporting the results of this attempt and discuss the reasons behind
its failure.
A.1 Foreword on Malware Clustering
Malware clustering has been extensively studied in order to cope
with the increasing sophistication and the rapid increase in the
number of observed samples [5, 6, 23, 25, 29, 38]. As a result, there’s
a long list of works (of which we summarize what we believe to be
the most relevant ones).
A large corpus of works focus on behavior-based malware clus-
tering [5, 6, 29, 38] and typically differ by their used malware fea-
tures, clustering algorithm and size of the dataset. Bailey et al. [5]
created fingerprints from user-visible system state changes (e.g.,
files written, processes created) and then leveraged a single-linkage
hierarchical clustering algorithm to automatically classify approxi-
mately 3.7K samples. Bayer et al. [6] leveraged augmented malware
execution traces and then applied a single-linkage hierarchical
clustering algorithm on 14K samples. Perdisci et al. [38] produced
malware network signatures by using clustering to extract struc-
tural similarities in malicious HTTP traffic traces generated by 25K
samples. Kirat et al. [29] built a system that automatically generates
system call-based signatures for 3.1K evasive malware samples and
further grouped those samples using a complete-linkage clustering
algorithm.
Others have looked at static analysis-based malware cluster-
ing [23, 25]. Hu et al. [23] proposed MutantX-S to exploit a hashing
trick to reduce static feature dimension and leverage a prototype-
based clustering algorithm to resolve the scalability issues faced
by previous malware clustering approaches. Similarly, Jiang et
al. [25] proposed BitShred to use feature hashing to reduce the
high-dimensional feature spaces that are common in malware anal-
ysis.
[22] Jingxuan He, Pesho Ivanov, Petar Tsankov, Veselin Raychev, and Martin Vechev.
2018. Debin: Predicting debug information in stripped binaries. In Proceedings
of the 2018 ACM SIGSAC Conference on Computer and Communications Security.
ACM, 1667–1680.
[23] Xin Hu, Kang G Shin, Sandeep Bhatkar, and Kent Griffin. 2013. Mutantx-s:
Scalable malware clustering based on static features. In USENIX ATC.
[24] He Huang, Amr M. Youssef, and Mourad Debbabi. 2017. BinSequence: Fast,
Accurate and Scalable Binary Code Reuse Detection. In Proceedings of the 2017
ACM on Asia Conference on Computer and Communications Security (ASIA CCS
’17). ACM, 155–166.
[25] Jiyong Jang, David Brumley, and Shobha Venkataraman. 2011. BitShred: Feature
Hashing Malware for Scalable Triage and Semantic Analysis. In ACM CCS.
[26] Jiyong Jang, Maverick Woo, and David Brumley. 2013. Towards Automatic
Software Lineage Inference. In 22nd USENIX Security Symposium (USENIX Security
13). USENIX, Washington, D.C., 81–96. https://www.usenix.org/conference/
usenixsecurity13/technical-sessions/papers/jang
[27] Rommel Joven, Jasper Manuel, and David Maciejack. 2018. Mirai: Beyond the Af-
termath. https://www.botconf .eu/wp-content/uploads/2018/12/2018-R-Joven-
Mirai-Beyond-the-Aftermath.pdf.
[28] Md Enamul Karim, Andrew Walenstein, Arun Lakhotia, and Laxmi Parida. 2005.
Malware phylogeny generation using permutations of code. Journal in Computer
Virology 1 (11 2005).
[29] Dhilung Kirat and Giovanni Vigna. 2015. Malgene: Automatic extraction of
malware analysis evasion signature. In ACM CCS.
[30] Peng Li, Limin Liu, Debin Gao, and Michael K Reiter. 2010. On challenges in
evaluating malware clustering. In RAID.
[31] Martina Lindorfer, Alessandro Di Federico, Federico Maggi, Paolo Milani Com-
paretti, and Stefano Zanero. 2012. Lines of Malicious Code: Insights into the
Malicious Software Industry. In Proceedings of the 28th Annual Computer Security
Applications Conference (ACSAC ’12). ACM, 349–358.
[32] Y. A. Malkov and D. A. Yashunin. 2018. Efficient and robust approximate near-
est neighbor search using Hierarchical Navigable Small World graphs.
IEEE
Transactions on Pattern Analysis and Machine Intelligence (2018), 1–1. https:
//doi.org/10.1109/TPAMI.2018.2889473
[33] Jiang Ming, Dongpeng Xu, and Dinghao Wu. 2015. Memoized Semantics-Based
Binary Diffing with Application to Malware Lineage Inference. In IFIP Advances
in Information and Communication Technology, Vol. 455. 416–430. https://doi.org/
10.1007/978-3-319-18467-828
[34] A. Moser, C. Kruegel, and E. Kirda. 2007. Limits of Static Analysis for Malware
Detection. In Twenty-Third Annual Computer Security Applications Conference
(ACSAC 2007). 421–430.
[35] Yin Minn Pa Pa, Shogo Suzuki, Katsunari Yoshioka, Tsutomu Matsumoto,
Takahiro Kasama, and Christian Rossow. 2015. IoTPOT: analysing the rise of IoT
compromises. In WOOT.
[36] PaloAlto Networks. 2019. Home & Small Office Wireless Routers Exploited
to Attack Gaming Servers. https://unit42.paloaltonetworks.com/home-small-
office-wireless-routers-exploited-to-attack-gaming-servers/.
[37] Leo Hyun Park, Jungbeen Yu, Hong-Koo Kang, Taejin Lee, and Taekyoung Kwon.
2020. Birds of a Feature: Intrafamily Clustering for Version Identification of
Packed Malware. IEEE Systems Journal (2020).
[38] Roberto Perdisci, Wenke Lee, and Nick Feamster. 2010. Behavioral Clustering
of HTTP-based Malware and Signature Generation Using Malicious Network
Traces. In NSDI.
[39] Roberto Perdisci and ManChon U. 2012. VAMO: Towards a Fully Automated
Malware Clustering Validity Analysis. In ACSAC.
[40] Erich Schubert, Jörg Sander, Martin Ester, Hans Peter Kriegel, and Xiaowei
Xu. 2017. DBSCAN Revisited, Revisited: Why and How You Should (Still) Use
DBSCAN. ACM Trans. Database Syst. 42, 3, Article 19 (July 2017), 21 pages.
https://doi.org/10.1145/3068335
[41] Marcos Sebastian, Richard Rivera, Platon Kotzias, and Juan Caballero. 2016. AV-
class: A Tool for Massive Malware Labeling. In RAID.
[42] Symantec. 2018.
Symantec Internet Security Threat Report
(ISTR).
https://www.symantec.com/content/dam/symantec/docs/reports/istr-23-
2018-en.pdf.
[43] Symantec. 2019.
Symantec Internet Security Threat Report
(ISTR).
https://www.symantec.com/content/dam/symantec/docs/reports/istr-24-
2019-en.pdf.
[44] Talos. 2018. New VPNFilter malware targets at least 500K networking devices
worldwide. https://blog.talosintelligence.com/2018/05/VPNFilter.html.
[45] Pierre-Antoine Vervier and Yun Shen. 2018. Before Toasters Rise Up: A View
into the Emerging IoT Threat Landscape. In RAID.
[46] T. Yeh. [n.d.].
Netis Routers Leave Wide Open Backdoor.
https:
//blog.trendmicro.com/trendlabs-security-intelligence/netis-routers-leave-
100101102103104Size [KB]02004006008001000120014001600Number of samplesStatically linkedDynamically linkedACSAC 2020, December 7–11, 2020, Austin, USA
Cozzi, et al.
Finally, Li et al. [30] discussed the challenges in evaluating mal-
ware clustering, especially when it comes to building an accurate
ground truth. Perdisci et al. [39] also proposed a machine learning-
based system to build an AV label-based model against which third
party clustering results can be evaluated.
Note that none of these works have applied their technique on
Linux malware, which brings a lot of challenges related to the
various CPU architectures. Moreover, the size of our dataset (93K
samples) and the high number of (static and dynamic) features led us
to choose the FISHDBC [13] algorithm for our initial feature-based
clustering.
A.2 Feature Extraction
To analyze each sample, we leverage a free ELF binary analysis
service4 based on a recent work [12]. The service relies on a combi-
nation of static and dynamic analyses to comprehensively evaluate
ELF binaries. It provides runtime behavioral reports via its multi-
architecture sandboxing environment, from which we extract 146
features that belong to five groups. We refer the reader to Appen-
dix B for the complete list of extracted features.
(1) ELF and byte-level features capture low-level character-
istics of the binary, such as its architecture, whether it is
statically or dynamically linked, stripped or unstripped, the
number of ELF sections, its file size, the entropy of each
section and its most common bytes, etc.
(2) Binary disassembly features report numerical statistics
extracted with IDA Pro, such as the number of functions,
their complexity, the number of instructions, etc.
(3) Strings includes printable strings extracted from the binary,
grouped into IP addresses, URLs, and UNIX paths.
(4) Runtime behavior covers the information extracted from
the execution of the binary in a sandbox, including whether
the sample was executed correctly, the list of issued system
calls, the different files opened, modified or deleted, whether
the binary has attempted to achieve persistence on the sys-
tem, etc.
(5) Network traffic features provide a detailed breakdown of
all network connections observed while the binary was run-
ning, as extracted by the Zeek (formally Bro) IDS, including
contacted IP addresses, files transferred, domain name re-
solved, etc.
A.3 Clustering
Our dataset is large and very complex, containing 93K samples and
146 features, several of them categorical. We converted categori-
cal features to numeric ones with the standard one-hot encoding
technique, whereby each categorical feature becomes a set of n
boolean representing whether each item belongs to each of the n
categories for that feature. For categorical features, we ended up
with a sparse matrix having tens of thousands of columns: such
a large dimensionality is generally very problematic in terms of
scalability for generic clustering algorithms. To deal with it, we use
FISHDBC [13], a density-based clustering algorithm designed for
scalability for complex datasets and arbitrary/non-metric distance
functions. FISHDBC approximates HDBSCAN* [11], an evolution of
4Padawan: https://padawan.s3.eurecom.fr
the widely known DBSCAN algorithm [16, 40], without generally
compromising in terms of results quality. Due to scalability issues
we could not run HDBSCAN* on our complete dataset, but we con-
firmed that results of FISHDBC and HDSBCAN* were equivalent
on smaller datasets. This algorithm outputs hierarchical clustering
results in a top-down approach—from the most coarse-grained to
the most fine-grained—and allows to identify the level that yields
the best classification.
We consider numeric and categorical features for each group
separately; for categorical features we pre-process the dataset using
tf-idf and the Cosine distance, while we use the Euclidean distance
for numerical features. To empirically assess the impact of feature
groups, we performed 25 rounds of clustering including different
combinations of feature groups, i.e., by including or discarding
some of the five categories.
To get a rough estimation of the quality of the clustering we use
AV labels as a provisional ground truth. In fact, even if some errors
in the label may exist, we still expect to find samples in the same
cluster to largely come from the same family. By using the output of
AVClass, we flag each cluster as one of four categories: (i) Pure if it
contains all samples with the same AV label, (ii) Single if it contains
a combination of samples with the same AV label and unlabelled
samples, (iii) Majority if more than 90% of samples in the cluster
have the same AV label, and (iv) Mixed if it does not fit any of the
previous categories. Table 6 provides a summary of the results of
the 25 rounds of clustering. For the sake of conciseness, we only
provide the best results obtained per combination of feature groups
across all tested weights. Note that the clustering on the IDA Pro
features could only be performed on a restricted set of the 4,960
samples dynamically linked samples, to avoid introducing noise in
the IDA Pro features due to the large amount of embedded library
code. Moreover, the table does not contain results for the network
features alone because network features were too sparse and could
not be used by themselves to build our hierarchical clusters.
Table 6 shows that individual sets successfully identify several
groups of samples belonging to the same family (i.e., pure clusters),
but then also cluster together many samples that have little or noth-
ing in common (e.g., mixed clusters). The results do not improve
much by combining all features, as the limitation of each group
tends to increase the noise in the overall classification. Out of all
combinations we tried in our experiments, the ELF and bytes fea-
tures alone produced the best clustering results with a total of 44,491