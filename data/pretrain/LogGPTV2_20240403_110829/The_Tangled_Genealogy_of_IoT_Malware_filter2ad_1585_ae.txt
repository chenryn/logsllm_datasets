### Improved Text

#### Introduction
Recent advancements in binary similarity and lineage inference, such as Bindiff and Diaphora, have achieved matching accuracies exceeding 90%, surpassing state-of-the-art methods. iLine [26] is a graph-based lineage recovery tool that integrates low-level binary features, code-level basic blocks, and binary execution traces. It was evaluated on a dataset of 84 Windows malware samples and reported an accuracy of 72%. Ming et al. [33] introduced an optimization for the iBinHunt binary diffing tool, which computes similarity between binaries using their execution traces. They applied their tool to a dataset of 145 Windows malware samples from 12 different families.

While these approaches provide valuable insights in their respective contexts, they are not suitable for Linux-based IoT malware. Few of these tools can handle Linux binaries, and those that do typically support only ARM and MIPS architectures. Additionally, binary-level or basic block-based malware slicing may be overly specific, and execution traces may be too coarse-grained for variant identification. In our dataset, we observed that packing of IoT malware can often be evaded, and the generally low obfuscation levels allowed us to use function-level binary diffing to identify relevant code similarities within and across IoT malware families. The lack of scalable, multi-architecture binary similarity techniques for Linux led us to choose the open-source binary diffing tool Diaphora [1].

#### Conclusion
We have conducted the most extensive study to date, analyzing a dataset of 93,000 malicious samples. Using binary similarity techniques, we uncovered more than 1,500 malware variants and validated over 200 of them with their leaked source code. Our findings indicate that AV signatures are not robust enough against small modifications within binaries. Rewriting a specific function or borrowing it from another family can often mislead AVs, leading to mislabeling or missed detections.

#### Acknowledgments
We are grateful to Karl Hiramoto from VirusTotal for providing the binary samples and VirusTotal reports used in this study. This research was supported by the European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation program (grant agreement No 771844 - BitCrumbs).

#### References
[1] [n.d.]. Diaphora, a free and open-source program diffing tool. http://diaphora.re/.
[2] [n.d.]. VirusTotal. https://www.virustotal.com/.
[3] Manos Antonakakis, Tim April, Michael Bailey, Matt Bernhard, Elie Bursztein, Jaime Cochran, Zakir Durumeric, J. Alex Halderman, Luca Invernizzi, Michalis Kallitsis, et al. 2017. Understanding the Mirai botnet. In USENIX Security.
[4] T. Asano, B. Bhattacharya, M. Keil, and F. Yao. 1988. Clustering Algorithms Based on Minimum and Maximum Spanning Trees. In Proceedings of the Fourth Annual Symposium on Computational Geometry (Urbana-Champaign, Illinois, USA) (SCG '88). Association for Computing Machinery, New York, NY, USA, 252–257. https://doi.org/10.1145/73393.73419
[5] Michael Bailey, Jon Oberheide, Jon Andersen, Z. Morley Mao, Farnam Jahanian, and Jose Nazario. 2007. Automated classification and analysis of internet malware. In RAID.
[6] Ulrich Bayer, Paolo Milani Comparetti, Clemens Hlauschek, Christopher Kruegel, and Engin Kirda. 2009. Scalable, behavior-based malware clustering. In NDSS.
[7] BitDefender. 2018. New Hide ‘N Seek IoT Botnet using custom-built Peer-to-Peer communication spotted in the wild. https://labs.bitdefender.com/2018/01/new-hide-n-seek-iot-botnet-using-custom-built-peer-to-peer-communication-spotted-in-the-wild/.
[8] BleepingComputer. 2019. Cr1ptT0r Ransomware Infects D-Link NAS Devices, Targets Embedded Systems. https://www.bleepingcomputer.com/news/security/cr1ptt0r-ransomware-infects-d-link-nas-devices-targets-embedded-systems/.
[9] Alejandro Calleja, Juan Tapiador, and Juan Caballero. 2016. A Look into 30 Years of Malware Development from a Software Metrics Perspective, Vol. 9854. 325–345.
[10] Alejandro Calleja, Juan Tapiador, and Juan Caballero. 2018. The MalSource Dataset: Quantifying Complexity and Code Reuse in Malware Development. (November 2018).
[11] Ricardo JGB Campello, Davoud Moulavi, and Jörg Sander. 2013. Density-based clustering based on hierarchical density estimates. In PAKDD.
[12] Emanuele Cozzi, Mariano Graziano, Yanick Fratantonio, and Davide Balzarotti. 2018. Understanding Linux Malware. In IEEE S&P.
[13] Matteo Dell’Amico. 2019. FISHDBC: Flexible, Incremental, Scalable, Hierarchical Density-Based Clustering for Arbitrary Data and Distance. arXiv:1910.07283 [cs.LG].
[14] Wei Dong, Charikar Moses, and Kai Li. 2011. Efficient k-nearest neighbor graph construction for generic similarity measures. In Proceedings of the 20th International Conference on World Wide Web. ACM, 577–586.
[15] Tudor Dumitraş and Iulian Neamtiu. 2011. Experimental Challenges in Cyber Security: A Story of Provenance and Lineage for Malware. In CEST.
[16] Martin Ester, Hans-Peter Kriegel, Jörg Sander, and Xiaowei Xu. 1996. A density-based algorithm for discovering clusters in large spatial databases with noise. In KDD.
[17] Cong Fu, Chao Xiang, Changxu Wang, and Deng Cai. 2019. Fast approximate nearest neighbor search with the navigating spreading-out graph. Proceedings of the VLDB Endowment 12, 5 (2019), 461–474.
[18] Leslie Ann Goldberg, Paul W. Goldberg, Cynthia A. Phillips, and Gregory B. Sorkin. 1998. Constructing Computer Virus Phylogenies. J. Algorithms 26, 1 (1998).
[19] Mariano Graziano, Davide Canali, Leyla Bilge, Andrea Lanzi, and Davide Balzarotti. 2015. Needles in a Haystack: Mining Information from Public Dynamic Analysis Sandboxes for Malware Intelligence. In Proceedings of the 24rd USENIX Security Symposium (USENIX Security).
[20] M. Hao. [n.d.]. A Look into the Gafgyt Botnet Trends from the Communication Traffic Log. https://nsfocusglobal.com/look-gafgyt-botnet-trends-communication-traffic-log/.
[21] Irfan Ul Haq and Juan Caballero. 2019. A Survey of Binary Code Similarity. arXiv:1909.11424 [cs.CR].
[22] Jingxuan He, Pesho Ivanov, Petar Tsankov, Veselin Raychev, and Martin Vechev. 2018. Debin: Predicting debug information in stripped binaries. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. ACM, 1667–1680.
[23] Xin Hu, Kang G. Shin, Sandeep Bhatkar, and Kent Griffin. 2013. MutantX-S: Scalable malware clustering based on static features. In USENIX ATC.
[24] He Huang, Amr M. Youssef, and Mourad Debbabi. 2017. BinSequence: Fast, Accurate and Scalable Binary Code Reuse Detection. In Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security (ASIA CCS '17). ACM, 155–166.
[25] Jiyong Jang, David Brumley, and Shobha Venkataraman. 2011. BitShred: Feature Hashing Malware for Scalable Triage and Semantic Analysis. In ACM CCS.
[26] Jiyong Jang, Maverick Woo, and David Brumley. 2013. Towards Automatic Software Lineage Inference. In 22nd USENIX Security Symposium (USENIX Security 13). USENIX, Washington, D.C., 81–96. https://www.usenix.org/conference/usenixsecurity13/technical-sessions/papers/jang
[27] Rommel Joven, Jasper Manuel, and David Maciejack. 2018. Mirai: Beyond the Aftermath. https://www.botconf.eu/wp-content/uploads/2018/12/2018-R-Joven-Mirai-Beyond-the-Aftermath.pdf.
[28] Md Enamul Karim, Andrew Walenstein, Arun Lakhotia, and Laxmi Parida. 2005. Malware phylogeny generation using permutations of code. Journal in Computer Virology 1 (November 2005).
[29] Dhilung Kirat and Giovanni Vigna. 2015. Malgene: Automatic extraction of malware analysis evasion signature. In ACM CCS.
[30] Peng Li, Limin Liu, Debin Gao, and Michael K. Reiter. 2010. On challenges in evaluating malware clustering. In RAID.
[31] Martina Lindorfer, Alessandro Di Federico, Federico Maggi, Paolo Milani Comparetti, and Stefano Zanero. 2012. Lines of Malicious Code: Insights into the Malicious Software Industry. In Proceedings of the 28th Annual Computer Security Applications Conference (ACSAC '12). ACM, 349–358.
[32] Y. A. Malkov and D. A. Yashunin. 2018. Efficient and robust approximate nearest neighbor search using Hierarchical Navigable Small World graphs. IEEE Transactions on Pattern Analysis and Machine Intelligence (2018), 1–1. https://doi.org/10.1109/TPAMI.2018.2889473
[33] Jiang Ming, Dongpeng Xu, and Dinghao Wu. 2015. Memoized Semantics-Based Binary Diffing with Application to Malware Lineage Inference. In IFIP Advances in Information and Communication Technology, Vol. 455. 416–430. https://doi.org/10.1007/978-3-319-18467-8_28
[34] A. Moser, C. Kruegel, and E. Kirda. 2007. Limits of Static Analysis for Malware Detection. In Twenty-Third Annual Computer Security Applications Conference (ACSAC 2007). 421–430.
[35] Yin Minn Pa Pa, Shogo Suzuki, Katsunari Yoshioka, Tsutomu Matsumoto, Takahiro Kasama, and Christian Rossow. 2015. IoTPOT: Analysing the Rise of IoT Compromises. In WOOT.
[36] PaloAlto Networks. 2019. Home & Small Office Wireless Routers Exploited to Attack Gaming Servers. https://unit42.paloaltonetworks.com/home-small-office-wireless-routers-exploited-to-attack-gaming-servers/.
[37] Leo Hyun Park, Jungbeen Yu, Hong-Koo Kang, Taejin Lee, and Taekyoung Kwon. 2020. Birds of a Feature: Intrafamily Clustering for Version Identification of Packed Malware. IEEE Systems Journal (2020).
[38] Roberto Perdisci, Wenke Lee, and Nick Feamster. 2010. Behavioral Clustering of HTTP-based Malware and Signature Generation Using Malicious Network Traces. In NSDI.
[39] Roberto Perdisci and ManChon U. 2012. VAMO: Towards a Fully Automated Malware Clustering Validity Analysis. In ACSAC.
[40] Erich Schubert, Jörg Sander, Martin Ester, Hans Peter Kriegel, and Xiaowei Xu. 2017. DBSCAN Revisited, Revisited: Why and How You Should (Still) Use DBSCAN. ACM Trans. Database Syst. 42, 3, Article 19 (July 2017), 21 pages. https://doi.org/10.1145/3068335
[41] Marcos Sebastian, Richard Rivera, Platon Kotzias, and Juan Caballero. 2016. AV-class: A Tool for Massive Malware Labeling. In RAID.
[42] Symantec. 2018. Symantec Internet Security Threat Report (ISTR). https://www.symantec.com/content/dam/symantec/docs/reports/istr-23-2018-en.pdf.
[43] Symantec. 2019. Symantec Internet Security Threat Report (ISTR). https://www.symantec.com/content/dam/symantec/docs/reports/istr-24-2019-en.pdf.
[44] Talos. 2018. New VPNFilter malware targets at least 500K networking devices worldwide. https://blog.talosintelligence.com/2018/05/VPNFilter.html.
[45] Pierre-Antoine Vervier and Yun Shen. 2018. Before Toasters Rise Up: A View into the Emerging IoT Threat Landscape. In RAID.
[46] T. Yeh. [n.d.]. Netis Routers Leave Wide Open Backdoor. https://blog.trendmicro.com/trendlabs-security-intelligence/netis-routers-leave-wide-open-backdoor/.

#### Features-Based Clustering
In this section, we describe our initial attempt at reconstructing IoT malware lineage using a traditional feature-based clustering approach. Although we eventually adopted a different solution, we believe there is value in reporting the results of this attempt and discussing the reasons for its failure.

##### Foreword on Malware Clustering
Malware clustering has been extensively studied to address the increasing sophistication and rapid growth in the number of observed samples [5, 6, 23, 25, 29, 38]. A significant body of work focuses on behavior-based malware clustering, which typically differs by the features used, the clustering algorithm, and the size of the dataset. Bailey et al. [5] created fingerprints from user-visible system state changes (e.g., files written, processes created) and used a single-linkage hierarchical clustering algorithm to classify approximately 3,700 samples. Bayer et al. [6] leveraged augmented malware execution traces and applied a single-linkage hierarchical clustering algorithm to 14,000 samples. Perdisci et al. [38] generated malware network signatures by clustering structural similarities in malicious HTTP traffic traces from 25,000 samples. Kirat et al. [29] built a system that automatically generates system call-based signatures for 3,100 evasive malware samples and grouped them using a complete-linkage clustering algorithm.

Other works have explored static analysis-based malware clustering [23, 25]. Hu et al. [23] proposed MutantX-S, which uses a hashing trick to reduce static feature dimensions and employs a prototype-based clustering algorithm to address scalability issues. Similarly, Jiang et al. [25] introduced BitShred, which uses feature hashing to reduce high-dimensional feature spaces common in malware analysis.

Li et al. [30] discussed the challenges in evaluating malware clustering, particularly in building an accurate ground truth. Perdisci et al. [39] proposed a machine learning-based system to build an AV label-based model for evaluating third-party clustering results.

None of these works have applied their techniques to Linux malware, which presents challenges related to various CPU architectures. The size of our dataset (93,000 samples) and the high number of static and dynamic features led us to choose the FISHDBC [13] algorithm for our initial feature-based clustering.

##### Feature Extraction
To analyze each sample, we used a free ELF binary analysis service [12] that combines static and dynamic analyses to evaluate ELF binaries comprehensively. The service provides runtime behavioral reports via a multi-architecture sandboxing environment, from which we extracted 146 features grouped into five categories. For a complete list of extracted features, see Appendix B.

1. **ELF and Byte-Level Features**: These capture low-level characteristics of the binary, such as architecture, linking type (static or dynamic), stripped or unstripped, number of ELF sections, file size, entropy of each section, and most common bytes.
2. **Binary Disassembly Features**: These report numerical statistics extracted with IDA Pro, such as the number of functions, their complexity, and the number of instructions.
3. **Strings**: These include printable strings extracted from the binary, grouped into IP addresses, URLs, and UNIX paths.
4. **Runtime Behavior**: This covers information extracted from the execution of the binary in a sandbox, including whether the sample executed correctly, the list of issued system calls, files opened, modified, or deleted, and attempts to achieve persistence on the system.
5. **Network Traffic Features**: These provide a detailed breakdown of all network connections observed while the binary was running, including contacted IP addresses, transferred files, and resolved domain names, as extracted by the Zeek (formerly Bro) IDS.

##### Clustering
Our dataset is large and complex, containing 93,000 samples and 146 features, many of which are categorical. We converted categorical features to numeric ones using one-hot encoding, resulting in a sparse matrix with tens of thousands of columns. To handle this, we used FISHDBC [13], a density-based clustering algorithm designed for scalability and arbitrary/non-metric distance functions. FISHDBC approximates HDBSCAN* [11], an evolution of the widely known DBSCAN algorithm [16, 40], without compromising result quality. Due to scalability issues, we could not run HDBSCAN* on our complete dataset, but we confirmed that FISHDBC and HDBSCAN* produced equivalent results on smaller datasets.

FISHDBC outputs hierarchical clustering results in a top-down approach, from the most coarse-grained to the most fine-grained, allowing us to identify the level that yields the best classification. We considered numeric and categorical features separately; for categorical features, we pre-processed the dataset using tf-idf and Cosine distance, while for numerical features, we used Euclidean distance. To empirically assess the impact of feature groups, we performed 25 rounds of clustering with different combinations of feature groups, including or discarding some of the five categories.

To estimate the quality of the clustering, we used AV labels as a provisional ground truth. Even if some errors in the labels exist, we expect samples in the same cluster to largely come from the same family. Using the output of AVClass, we categorized each cluster as one of four types: (i) Pure, if it contains all samples with the same AV label, (ii) Single, if it contains a combination of samples with the same AV label and unlabelled samples, (iii) Majority, if more than 90% of samples in the cluster have the same AV label, and (iv) Mixed, if it does not fit any of the previous categories. Table 6 summarizes the results of the 25 rounds of clustering, providing the best results per combination of feature groups across all tested weights.

Clustering on the IDA Pro features was performed on a restricted set of 4,960 dynamically linked samples to avoid introducing noise due to embedded library code. The table does not include results for network features alone because they were too sparse to build hierarchical clusters.

Table 6 shows that individual sets successfully identify several groups of samples belonging to the same family (i.e., pure clusters), but also cluster together many samples with little or no commonality (e.g., mixed clusters). Combining all features did not significantly improve the results, as the limitations of each group increased the noise in the overall classification. Among all combinations, the ELF and byte-level features alone produced the best clustering results, with a total of 44,491 clusters.