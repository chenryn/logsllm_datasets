### 3. 自动生成策略
除了手动指定策略外，还可以通过机器学习技术自动生成策略。首先，我们可以收集一组具有代表性的恶意软件和良性样本作为训练集。使用这个训练集，Panorama 将提取相应的污点图。然后，我们需要开发一种机制将污点图转换为特征向量。基于良性样本和恶意样本的特征向量，可以应用标准分类算法来确定模型。利用该模型，可以对新的样本进行分类。我们将在未来的工作中进一步探索这一方法。

### 4.2 基于污点图的恶意软件分析
给定一个污点图，第一步是检查该图中是否存在与待分析样本相对应的节点。如果存在这样的节点，我们就知道该样本访问了某些被污染的输入数据。这是可疑的行为，因为测试用例的设计使得输入数据仅发送到可信的应用程序，而不会发送到待分析的样本。一旦确定样本访问了某些输入数据，就可以检查该样本在图中的后续节点。这表明捕获的数据是如何被处理的。这些见解对于系统管理员和分析师理解恶意软件的行为和动作非常有用。

例如，回想之前在图2中展示的污点图。该污点图是通过对密码窃取程序GINA spy [16]的行为自动分析生成的。请注意，输入的密码由Windows登录进程（Winlogon.exe）接收，并传递给lsass.exe进行后续身份验证。有趣的是，密码数据也被待分析的样本（mscad.dll）访问，该样本由Winlogon.exe加载。该代码模块读取密码并将其保存到名为c:\ginalog.log的文件中。该图正确反映了用户密码如何被Windows处理，以及密码窃取者如何截获它。

| 类别 | 关键记录器 | 密码窃取者 | 网络嗅探器 | 隐蔽后门 | 间谍软件/广告软件 | Rootkit | 浏览器插件 | 多媒体 | 安全 | 系统工具 | 办公生产力 | 游戏 | 其他 | 总计 | 错误否定 | 错误肯定 |
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
| 数量 | 5 | 2 | 2 | 3 | 22 | 8 | 16 | 9 | 10 | 9 | 4 | 4 | 4 | 98 | 0 | 3 |

表2：针对恶意软件和良性样本的检测结果总结

在第5.2节中，我们将讨论我们在实验中研究的一个更复杂的现实世界示例。

### 5. 评估
在本节中，我们将详细介绍对Panorama系统的实验评估。我们的评估包括三个部分。首先，我们使用大量现实世界的恶意软件和良性样本来调查基于污点图的恶意软件检测方法的有效性。然后，以Google Desktop为例（即，来自我们认为其隐私政策可信赖的供应商的样本），我们探讨了可以从未知样本的污点图中提取多少详细信息。第三，我们进行了性能开销测试来评估原型的性能。在所有实验中，我们在一台配备双核3.2 GHz Pentium 4 CPU和2GB RAM的Linux机器上运行Panorama。在Panorama之上，我们安装了Windows XP Professional，并分配了512M RAM。

#### 5.1 恶意软件检测
我们的恶意软件集合包括42个现实世界的恶意软件样本，其中包括5个键盘记录器、2个密码窃取者、2个网络嗅探器、3个隐蔽后门和22个间谍软件BHO，以及8个Rootkit。其中一些样本可以在互联网上公开获取（例如，从诸如www.rootkit.com等网站），其他样本则从学术研究人员和一家奥地利反病毒公司处收集。此外，我们从一个信誉良好且值得信赖的网站（www.download.com）下载了56个良性免费样本。这些良性样本是来自各种不同应用领域的免费程序（如浏览器插件、系统工具和办公生产力应用程序），大小不超过3MB。

为了进一步促进实验，我们开发了一个Python工具来运行样本并使用几种启发式方法自动执行安装过程。该工具可以处理测试集中70%的样本。对于剩余的样本，有些需要手动配置（它们都是恶意软件样本），而其他样本则无法被启发式方法正确处理。然后我们手动安装了剩余的样本。每次最多安装3个样本。之后，我们运行测试用例。我们将测试引擎设置为等待5分钟后再关闭虚拟机。根据安装延迟，整个过程持续15到25分钟。

表2总结了该实验的结果。我们可以看到，Panorama能够正确识别所有恶意软件样本，但错误地将三个良性样本判定为恶意软件。

这三个误报中有两个是个人防火墙程序。第三个误报是一个浏览器加速器。通过检查与这三个样本相关的污点图，我们观察到这些良性样本的信息访问和处理行为与恶意软件非常相似。实际上，这两个个人防火墙安装了数据包过滤器并监控所有网络流量。因此，它们的行为类似于恶意网络嗅探器。在浏览器加速器的情况下，我们观察到该应用程序为浏览器预取网页并将其存储在自己的缓存文件中。这种行为类似于监视用户浏览的网页的间谍软件。误报的原因在于基于污点图的检测方法只能识别给定样本的信息访问和处理行为，而不能识别其意图。在实际生活中，污点图对于人类分析师来说是非常宝贵的，因为它可以帮助他们快速确定和理解未知样本是否确实为恶意软件，或者是否为表现出恶意软件行为的良性软件。

#### 5.2 恶意软件分析
为了确定我们对未知样本进行详细分析的能力，我们选择了Google Desktop作为案例研究。该应用程序在其隐私政策[19]中声称，它将在用户使用系统时索引和存储数据文件、邮件、聊天日志和网页历史记录。此外，如果启用了特殊配置设置“跨计算机搜索”，Google Desktop将安全地将用户的索引文件副本传输到Google服务器。因此，事实上，Google Desktop表现出了一些类似恶意软件的行为，因为索引文件可能包含关于用户（例如，用户访问过的网站列表）的敏感信息，并且这些文件会被发送到外部服务器。

首先，我们下载了安装文件（GoogleDesktopSetup.exe）。在安装工具之前，我们标记了安装文件，以便跟踪哪些组件将被安装到系统中。安装完成后，我们观察到安装了18个可执行文件和共享库，以及十几个数据文件。

其次，我们使用Google Desktop的默认设置（其中“跨计算机搜索”被禁用）运行了测试用例。完成测试用例后，我们观察到从安装文件中提取的一些组件访问了被污染的输入，包括HTTPS、HTTP和文档。所有这些信息后来都被保存到了本地安装目录中的索引文件中。为了确定信息是否被发送到远程主机，我们保持系统运行12小时。然而，我们没有观察到这种行为。

第三，我们更改了Google Desktop的设置并启用了“跨计算机搜索”功能。然后，我们再次运行测试用例，并保持系统运行另外30分钟。从生成的污点图中可以看出，在这种模式下，Google Desktop确实通过HTTPS连接将收集到的信息泄露给了Google服务器。我们选择了一个代表性污点图，清楚地展示了Google Desktop组件如何处理从QEMU网站接收到的HTTP连接的传入流量（见图3）。

通过检查该污点图，我们可以得出以下结论：
1. 传入的网页首先由Internet Explorer（IEXPLORE.EXE）接收并处理，随后将其内容保存到临时Internet文件夹中的缓存文件（qemu[1].htm）；
2. Google Desktop的一个组件（GoogleDesktopAPI2.dll）被加载到IEXPLORE.EXE中，获取网页并将其传递给Google Desktop的独立程序（GoogleDesktopIndex.exe）；
3. GoogleDesktopIndex.exe进一步处理此信息，并将其保存到其本地安装目录中的两个数据文件（rpm1m.cf1和fiih.ht1）；
4. 它通过HTTPS连接将从网页中提取的一些信息发送到远程Google服务器（72.14.219.147）。

借助Panorama提供的能力，我们可以确认，当激活特定功能时，Google Desktop确实会发送一些敏感信息（正如其隐私政策所声明的那样）。

#### 5.3 性能开销
我们使用Cygwin中的几个实用工具（如curl、scp、gzip和bzip2）测量了Panorama的性能开销。在运行这些工具时，我们相应地对文件和网络输入进行了污染。我们发现，当前未经优化的Panorama实现平均减速了20倍。由于Panorama旨在支持离线恶意软件检测和分析，我们认为这种开销对我们预期的应用场景并不是严重的限制。考虑到目前未知的恶意软件样本大多是由人工分析的，显然像Panorama这样的自动化系统可以显著简化并加快这项任务。此外，一些研究已经探索了更高效的动态污点分析手段。Ho等人提出了需求仿真（Demand Emulation），在这种方式下，正在运行的系统在虚拟化和仿真执行之间动态切换，并且只有在CPU处理受污染数据时才使用仿真[20]。探索由ECC提供的更细粒度的硬件保护可能会进一步显著提高性能[30]。最近，Qin等人探索了几种优化动态二进制插桩的方法，以最小化运行时开销[31]。

### 6. 讨论
在本节中，我们将讨论恶意软件作者可能尝试用来挫败当前Panorama实现的几种潜在逃避技术。此外，我们还将讨论可以采取的对策。

**破坏污点信息传播**
如第3.1节所述，恶意软件作者可以设计代码，使污点引擎无法正确跟踪受污染的信息。例如，通过利用间接依赖关系（使用控制流决策编码的依赖关系），恶意程序可以隐藏敏感信息泄露的事实。这是当前实现的一个限制。我们将在未来增强实现，以通过控制流跟踪污点传播，就像我们在早期实现中所做的那样[14]。此外，需要注意的是，当前系统会观察样本访问受污染数据的所有实例。也就是说，恶意软件样本只能隐藏其泄露信息的事实（以及与此信息相关的操作系统资源）。