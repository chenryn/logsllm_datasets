最后，如果有人试图玩不可变容器，那么不可变容器必然会崩溃，因此对故障的任何操作在初始阶段都是无效的。
### 资源隔离
众所周知，容器正被定位于**微服务架构** ( **MSA** )时代。也就是说，在单个系统中，可以有多个通用和专用服务，它们动态地相互协作，以实现易于维护的分布式应用。随着物理系统中服务的多样性和异构性不断攀升，安全性的复杂性自然会激增。因此，需要明确划分和隔离资源，以避免任何危险的安全漏洞。广泛接受的安全方法是利用包括名称空间在内的内核特性。以下是命名空间和 cgroups 的说明:
*   **命名空间**:一个 Linux 命名空间包装了一组系统资源，并将它们呈现给命名空间内的进程，使其看起来像是专用于这些进程的。简而言之，名称空间是一种资源管理工具，有助于为进程隔离系统资源。内核名称空间提供了第一种也是最重要的隔离形式。在一个容器中运行的进程不会影响在另一个容器或主机系统中运行的进程。网络命名空间确保每个容器获得自己的网络栈，从而限制对其他容器接口的访问。
*   **cggroups**:这是一个 Linux 内核概念，管理一组进程的系统资源(如 CPU 和内存)的隔离和使用。例如，如果您有一个占用大量 CPU 周期和内存的应用，如科学计算应用，您可以将该应用放在一个 cgroup 中，以限制其 CPU 和内存的使用。它确保了每个容器都获得了公平的内存、中央处理器和磁盘输入/输出份额，更重要的是，单个容器不会因为耗尽其中一个资源而导致系统崩溃。
#### 资源核算和控制
容器消耗不同的物理资源，以便提供其独特的功能。然而，资源消耗必须有纪律、有秩序，并因此受到严格监管。当出现偏差时，容器更有可能无法及时执行分配的任务。例如，如果资源使用没有系统地同步，就会产生 DoS。
Linux 容器利用 cgroups 实现资源核算和审计，以无摩擦的方式运行应用。众所周知，有多种资源有助于容器的成功运行。它们提供了许多有用的指标，并确保每个容器都获得其公平份额的内存、中央处理器和磁盘输入/输出。此外，它们还保证单个容器不会因耗尽这些资源中的任何一个而导致系统崩溃。这项功能可以帮助您抵御一些 DoS 攻击。此功能有助于在云环境中作为多租户公民运行容器，以确保其正常运行时间和性能。其他容器的任何形式的利用都会被主动识别并消灭在萌芽状态，从而避免任何形式的意外。
### 根特权-影响和最佳实践
Docker 引擎通过利用最近提到的资源隔离和控制技术，有效地保护容器免受任何恶意活动的影响。尽管如此，Docker 暴露了一些潜在的安全威胁，因为 Docker 守护程序是以根权限运行的。在这一节中，我们列出了一些安全风险和减轻这些风险的最佳实践。
另一个要坚持的重要原则是最小特权。容器中的每个进程都必须以最小的访问权限和资源运行，以便交付其功能。这样做的好处是，如果一个容器遭到破坏，其他资源和数据可以逃脱进一步的攻击。
### 受信任的用户控件
由于 Docker 守护程序以 root 权限运行，因此它能够将 Docker 主机上的任何目录装载到容器中，而不限制任何访问权限。也就是说，您可以启动一个容器，其中`/host`目录将是您的主机上的`/`目录，并且该容器将能够不受任何限制地更改您的主机文件系统。这只是无数恶意使用中的一个例子。考虑到这些活动，Docker 的后几个版本限制了通过 UNIX 套接字对 Docker 守护程序的访问。如果您明确决定这样做，Docker 可以配置为通过 HTTP 上的 REST API 访问守护程序。但是，您应该确保它只能从受信任的网络或虚拟专用网络访问，或者受到 stunnel 和客户端 SSL 证书的保护。你也可以用 HTTPS 和证书来保护他们。
#### 非根容器
如前所述，Docker 容器默认情况下以 root 权限运行，在容器内部运行的应用也是如此。从安全角度来看，这是另一个主要问题，因为黑客可以通过黑客攻击容器内运行的应用来获得对 Docker 主机的根访问权限。Docker 提供了一个简单而强大的解决方案，将容器的权限更改为非根用户，从而阻止恶意根用户访问 Docker 主机。可以使用`docker run`子命令的`-u`或`--user`选项或`Dockerfile`中的`USER`指令来完成对非根用户的更改。
在本节中，我们将向您展示 Docker 容器的默认根权限，然后使用`Dockerfile`中的`USER`指令继续修改非根用户的根权限。
首先，通过在`docker run`子命令中运行一个简单的`id`命令来演示 Docker 容器的默认根权限，如下所示:
```
$ sudodocker run --rm ubuntu:16.04 id
uid=0(root) gid=0(root) groups=0(root)  
```
现在，让我们执行以下步骤:
1.  创建一个`Dockerfile`，创建一个非根权限用户，并将默认根用户修改为新创建的非根权限用户，如下图所示:
```
      ##########################################
      # Dockerfile to change from root to 
      # non-root privilege
      ###########################################
      # Base image is Ubuntu
      FROM ubuntu:16.04
      # Add a new user "peter" with user id 7373
      RUN useradd -u 7373 peter
      # Change to non-root privilege
      USER peter 
```
2.  使用`docker build`子命令继续构建 Docker 映像，如下图所示:
```
      $ sudo docker build -t nonrootimage .
```
3.  最后，让我们使用`docker run`子命令中的`id`命令来验证容器的当前用户:
```
 $ sudo docker run --rm nonrootimage id
 uid=7373(peter) gid=7373(peter) groups=7373(peter) 
```
显然，容器的用户、组和组现在都变成了非根用户。
将默认根权限修改为非根权限是遏制恶意渗透到 Docker 主机内核的一种非常有效的方式。