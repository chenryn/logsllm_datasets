### Attack Vectors for Deploying Malicious PostScript Code

There are two primary methods an attacker can use to deploy malicious PostScript code:

1. **File Extension Renaming:**
   - The attacker renames the PostScript file extension to a whitelisted file type, such as `.png`.
   
2. **Content Type Spoofing:**
   - The attacker changes the content type to a harmless or whitelisted header, such as `image/png`.

The goal of these obfuscation techniques is to bypass the web application's logic that restricts file uploads to "images only" by imitating other file types. Since ImageMagick analyzes the first bytes of the file content to determine which interpreter to use, the attacker can still force the execution of malicious PostScript files.

### Obfuscation with PDFs

PDF files support embedded PostScript code, making them a potential vector for hiding and uploading malicious code. Various tools can be used to create malicious PDF files, such as the `pdfmark` [3] PostScript command in combination with `ps2pdf`, or open-source tools like PDFBox4 [4].

We identified four techniques to embed PostScript within PDFs:

#### 1. PostScript Prepended to PDF
Many PDF interpreters, such as Adobe Reader or Chrome's internal PDF viewer, treat PDF files as valid if the PDF header starts within the first 1024 bytes [19]. Any prepended byte streams are ignored.

```plaintext
%!PS
{malicious code up to 1023 bytes in total}
%PDF-1.5
{legitimate PDF content}
```

This technique allows an attacker to create a valid PDF file with up to 1023 bytes of PostScript code prepended. The PostScript code is executed only if the file is processed by Ghostscript, which recognizes the PostScript header. Other PDF viewers will display the legitimate PDF content instead.

#### 2. PostScript Pass-Through
Ghostscript supports a proprietary, undocumented feature that allows inline PostScript code snippets to be hidden within PDF byte stream containers. While other PDF viewers ignore the malicious PostScript code, Ghostscript executes it when the PDF file is converted, for example, to an image.

```plaintext
({malicious code}) PS
```

#### 3. PostScript XObjects
The PDF standard allows the embedding of external objects (XObjects), such as images. PDF 1.1 allows XObjects containing PostScript code to be executed when printing the document. However, this feature is discouraged by the PDF 1.3 specification and is disabled in current versions of Ghostscript.

```plaintext
>
stream
%!PS
{malicious code}
endstream
```

#### 4. PostScript Fonts
The PDF standard allows the embedding of fonts in various formats. Type 1 fonts, defined in plain PostScript, can contain arbitrary PostScript code. While these are limited to a subset of the PostScript language [1], Ghostscript does not enforce this limitation and executes any embedded PostScript code.

```plaintext
>
stream
%!PS-AdobeFont-1.0
{malicious code}
endstream
```

### Summary of Obfuscation Techniques

There are multiple ways to obfuscate PostScript code or files to bypass restrictions imposed by web applications. Simple techniques include changing the file extension or sending the wrong content type. When PDF files are processed by a web application, more sophisticated techniques can be used to hide malicious PostScript code. Additionally, deflating the PostScript code within the byte stream container, as defined in the PDF specification, can complicate detection by firewalls and Intrusion Detection Systems (IDSs).

### Evaluation of PostScript-Based Attacks

To evaluate PostScript-based attacks, we created a comprehensive attack catalog implemented as a specially crafted EPS file and uploaded it to various websites. This proof-of-concept file is available for download from [http://bit.ly/ps_attacker_catalog5](http://bit.ly/ps_attacker_catalog5). The attack catalog serves as a blueprint to test PostScript processing applications, such as websites that generate thumbnail previews of uploaded images. It can also be used to perform security evaluations of other software, such as print servers or desktop applications.

#### 6.1 Image Conversion Websites

We evaluated 100 image conversion websites and found that 56 of them were vulnerable to at least one attack. Most websites do not accept PostScript or EPS files based on the file extension and content type. However, renaming the file extension to `.png` and setting the content type to `image/png` often allowed the attack to succeed.

- **MD5 Hash Calculation:** We measured the time it takes to calculate 10,000 MD5 hash sums, which varied between 14 ms and 2,147 ms.
- **Information Disclosure:** Limited information disclosure attacks, such as obtaining the system date and leaking pathnames, were possible on all 56 websites.
- **System Environment Variables:** These could be dumped on 35 websites using proprietary Ghostscript commands, addressed by CVE-2013-5653.
- **Arbitrary File Read (LFI):** Full read access was possible on 31 websites due to missing `-dSAFER` options or a bypass addressed in CVE-2016-7977.
- **Limited Read Access:** On 22 sites, we had limited read access to fonts and Ghostscript configuration files.
- **Arbitrary File Write:** We could write to arbitrary files on five websites due to missing `-dSAFER` options.
- **Directory Listing:** We could get a directory listing for the whole file system on 33 websites and list font and configuration directories on 21 sites.
- **Remote Shell Command Execution:** We gained remote shell command execution on nine websites, five due to missing `-dSAFER` options and four due to CVE-2016-7976.
- **Content Masking Attacks:** We created a PDF file containing PostScript overlay code and successfully generated different views of the same document on 32 websites.

#### 6.2 Alexa Top 15 Sites

We performed tests on the Alexa top 15 websites, excluding those without an English interface and those requiring a mainland China phone number for registration. Of the remaining ten websites, two allow the upload of EPS/PostScript files directly (google.com and live.com), while six allow PDF file uploads and server-side previews (google.com, wikipedia.org, yahoo.com, amazon.com, and live.com).

- **Google:** Google Drive and Google Mail preview uploaded EPS files containing PostScript code, but their conversion process is sandboxed, limiting the attacks to a virtual machine.
- **Wikipedia:** Using PostScript pass-through, we created a specially crafted PDF file that executed PostScript code, which could be used for DoS attacks. Information disclosure and file system access were limited.
- **Microsoft OneDrive:** Allows arbitrary EPS files to be uploaded and processed for preview, enabling environment variable dumping and arbitrary file read (LFI).

### Responsible Disclosure and Ethical Considerations

We responsibly disclosed all security vulnerabilities to the respective website administrators. Microsoft rewarded our findings with $5000. Ethical considerations were discussed internally, and a methodology was defined to ensure verifiability of our attacks and minimal interference with the tested services.

### Towards a Hybrid Exploit

Web applications are not the only systems that can be attacked with PostScript. We created a hybrid proof-of-concept PostScript/PDF worm that can attack various types of hosts, including web applications, client systems, and printers. The worm abuses missing `-dSAFER` mode, CVE-2016-7976, and CVE-2017-8291 to attack Ghostscript and CVE-2017-2741 to attack HP printers.

- **Web Applications:** When uploaded and processed by a web application, the worm infects all PDF files on the server it has write access to.
- **Client Systems:** If an infected PDF is downloaded by a victim, all PDF files on the hostâ€™s file system would be infected.
- **Printers and Print Servers:** The worm can exploit known vulnerabilities in printers and print servers, such as CVE-2017-2741.

In conclusion, the flexibility and persistence of PostScript as an attack vector highlight the need for robust security measures and regular updates to mitigate these risks.