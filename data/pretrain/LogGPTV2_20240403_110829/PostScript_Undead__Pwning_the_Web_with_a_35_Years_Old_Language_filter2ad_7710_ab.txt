There are two options for an attacker to get PostScript code deployed: Either (1)
rename the PostScript ﬁle extension to a whitelisted ﬁletype such as .png or (2)
change the content type to a harmless or whitelisted header like image/png.
The goal of such obfuscation is to bypass the web application’s logic limiting
the ﬁle upload to ‘images only’ by imitating other ﬁletypes. Since ImageMagick
analyzes the ﬁrst bytes of the ﬁle content to determine which interpreter should
be used, the attacker can still enforce the execution of malicious PostScript ﬁles.
Obfuscation with PDFs. PDF supports PostScript code deﬁned within itself.
Thus, if a web application accepts PDF ﬁles, PostScript code can be hidden and
uploaded. Diﬀerent tools can be used for the creation of malicious PDF ﬁles.
For instance, the pdfmark [3] PostScript command in combination with tools
such as ps2pdf allows to create a PDF document containing PostScript code.
Another option is to use open-source tools implementing the PDF speciﬁcation
such as PDFBox4. We identiﬁed four techniques to embed PostScript within
PDF.
PostScript Prepended to PDF. Many PDF interpreters such as Adobe
Reader or Chrome’s internal PDF viewer treat PDF ﬁles as valid if the PDF
header starts within the ﬁrst 1024 bytes [19]. Prepended byte streams are
ignored.
1
2
3
4
%!PS
{malicious code up to 1023 bytes in total}
%PDF-1.5
{legitimate PDF content}
Listing 3. PostScript code prepended to a legitimate PDF ﬁle.
This allows an attacker to create a valid PDF ﬁle with up to 1023 bytes of
PostScript code prepended. This PostScript code however is only executed if the
ﬁle is processed by Ghostscript – which recognizes the PostScript header – while
other PDF viewers will display the PDF content instead.
PostScript Pass-Through. Ghostscript supports a proprietary, undocu-
mented feature which allows to hide inline PostScript code snippets within PDF
byte stream containers. While other PDF viewers ignore the malicious PostScript
code, Ghostscript executes it in case the PDF ﬁle is converted, e.g. to an image.
1
({malicious code}) PS
Listing 4. Inline pass-through PostScript code within a PDF ﬁle.
4 The Apache Software Foundation, PDFBox, https://pdfbox.apache.org/, Mar. 2017.
610
J. M¨uller et al.
PostScript XObjects. The PDF standard allows to embed external objects
(XObjects), e.g. images. PDF 1.1 allows XObjects containing PostScript code to
be executed when printing the document. However, this feature is discouraged
by the PDF 1.3 speciﬁcation and is disabled in current versions of Ghostscript.
The ﬁrst four lines in Listing 5 deﬁne an object within a PDF ﬁle. The type is
XObject and the subtype deﬁnes that the content is PostScript code. In line 5,
the beginning of a byte stream container is deﬁned. The following lines contain
the PostScript code, which ends in line 8 by closing the byte stream container.
1
2
3
4
5
6
7
8
>
stream
%!PS
{malicious code}
endstream
1
2
3
4
5
6
7
8
>
stream
%!PS-AdobeFont-1.0
{malicious code}
endstream
Listing 5. PostScript code hidden in
an XObject object within a PDF ﬁle.
Listing 6. PostScript code hidden in
an Font object within a PDF ﬁle.
PostScript Fonts. The PDF standard allows fonts of various formats to be
embedded. One format is of particular interest: Type 1 fonts are deﬁned in plain
PostScript itself. While these are actually limited to a subset of the PostScript
language [1], Ghostscript does not consider this limitation and executes arbitrary
PostScript code embedded in Type 1 fonts within a PDF ﬁle, see Listing 6.
Summary. There are various ways to obfuscate PostScript code or ﬁles in order
to bypass restrictions imposed by a web application. Some of the bypasses use
simple techniques such as changing the ﬁle extension or sending the wrong con-
tent type. When PDF ﬁles are processed by a web application, more sophisticated
techniques can be used to hide malicious PostScript code within them. In addi-
tion, the obfuscation can be improved by deﬂating the PostScript code within
the byte stream container. This feature is deﬁned in the PDF speciﬁcation and
supported by all PDF interpreters which makes the detection of PostScript code
by ﬁrewalls and Intrusion Detection Systems (IDSs) more complicated.
6 Evaluation
To evaluate PostScript based attacks as described in Sect. 4, we created a com-
prehensive attack catalog – implemented as a specially crafted EPS ﬁle – and
uploaded it to various websites. This proof-of-concept ﬁle is available for down-
load from http://bit.ly/ps attacker catalog5. The attack catalog serves as a
5 Note that the proof-of-concept ﬁle is hosted on Dropbox. After uploading, we real-
ized that Dropbox itself processes PostScript documents. The shown preview image
therefore is the rendered result of the attack catalog executed on the Dropbox server.
PostScript Undead: Pwning the Web with a Years Old Language
611
blueprint to test PostScript processing applications such as websites that gen-
erate thumbnail previews of uploaded images. It can also be used to perform
a security evaluation of other software like print servers or desktop applica-
tions. If processed, the attack catalog automatically checks for various features,
misconﬁgurations, and vulnerabilities in both the PostScript language and the
Ghostscript implementation. A resulting preview image after conversion by a
web application running Ghostscript 9.19 is given in Fig. 4 in the appendix.
Based on the catalog, we ﬁrst evaluated 100 image conversion websites to get
a large-scale overview. We conducted a Google search for online image converter
and tested the top 100 results. Second, we evaluated the Alexa top 15 sites to
verify if more popular web applications are vulnerable too.
6.1 Image Conversion Websites
Given our test set of 100 image conversion sites, we could have executed malicious
PostScript code on 56 of them. An overview is given in Fig. 2. Detailed results
are documented in Table 2 in the appendix.
Fig. 2. Evaluation of 100 image conversion websites. 56% of them were found vulnerable
to at least one attack.
Most websites do not accept PostScript or EPS ﬁles based on the ﬁle exten-
sion and content type (application/postscript). However, by renam-
ing the ﬁle extension to .png and accordingly setting the content type
(image/png) the attack often works. Observing this behavior of web applica-
tions, it is obvious that PostScript documents were actually not intended to be
supported by the web applications but could be enforced by simple obfuscation
techniques.
We did not perform any tests concerning actual DoS attacks. Instead, we mea-
sured the time it takes to calculate 10,000 MD5 hash sums, which was possible for
all 56 websites and varied between 14 ms and 2,147 ms. Limited information dis-
closure attacks such as obtaining the system date and leaking pathnames could
also be performed on all 56 PostScript processing websites. These results can be
explained by the fact that even if Ghostscript is started with the -dSAFER ﬂag,
these commands are allowed. System environment variables could be dumped on
612
J. M¨uller et al.
35 websites using proprietary Ghostscript commands. The reason for the lower
number of aﬀected systems is that this vulnerability is already addressed by
CVE-2013-5653.
Read access to arbitrary ﬁles (LFI) could be performed on 31 websites. Such
full read access is based on missing -dSAFER options or on a bypass addressed
in CVE-2016-7977. By this means, older version of Ghostscript are still aﬀected.
On 22 sites, we had only limited read access to fonts and Ghostscript con-
ﬁguration ﬁles. This can also be problematic since an attacker can read out the
gs init.ps ﬁle deﬁning protection mechanisms. Disclosing this information
can lead to further, more precise attack vectors bypassing the deﬁned restric-
tions. On ﬁve websites we could write to arbitrary ﬁles due to missing -dSAFER
options.
On 33 websites, we could get a directory listing for the whole ﬁle system.
On 21 sites, we could only list the font and conﬁguration directories, which has
limited impact. This vulnerability abuses a Ghostscript conﬁguration with less
restrictive -dSAFER options, which is already documented in CVE-2013-5653.
However, we could still get status information for arbitrary ﬁles on the ﬁle
system on 51 websites. Using the PostScript ‘status’ command, the existence of
ﬁles/directories on the server including sizes and timestamps can be veriﬁed.
On nine websites we gained remote shell command execution – on ﬁve of
them due to missing -dSAFER options and on four due to CVE-2016-7976. Note
that we did not evaluate further known vulnerabilities and CVEs existing for
the used Ghostscript versions because they are based on buﬀer overﬂows, which
can harm the server and cause damage.
Because PostScript/EPS is vulnerable to content masking attacks by design,
we limited such attacks to PDF ﬁles. As proof-of-concept we created a PDF ﬁle
containing PostScript overlay code. In case that the converted version of the
ﬁle visually diﬀers from the unconverted PDF, the attack was successful. On 32
websites we were able to generate diﬀerent views of the same document.
It is interesting to note that most websites use outdated versions of
Ghostscript. Out of 56 websites interpreting PostScript, 30 use a Ghostscript
version older than 9.18 (the current version for Debian/Ubuntu) which leads to
multiple vulnerabilities. Furthermore, some websites with the same Ghostscript
version behave diﬀerently – we assume this due to backporting.
6.2 Alexa Top 15 Sites
Image conversion websites can be considered easy targets because they are likely
to be less hardened and to accept PostScript input. Therefore, we performed a
test on the Alexa top 15 websites, which are frequently checked by hundreds of
security researchers and bug bounty hunters around the world. Because Google’s
domains (google.co.in, google.co.jp) occur multiple times in this list – likely with
the same technology serving them – we limited our test to the main google.com
domain. Furthermore, three domains (baidu.com, qq.com, taobao.com) do not
have an English interface and require a mainland China phone number to regis-
ter. Thus, we could not test these.
PostScript Undead: Pwning the Web with a Years Old Language
613
Table 1. Evaluation of PostScript based attacks against top websites.
Of the remaining ten websites, two allow the upload of EPS/PostScript ﬁles
directly (google.com and live.com), while six allow PDF ﬁles to be uploaded
and preview them on the server side (google.com, wikipedia.org, yahoo.com,
amazon.com, and live.com). Note that Facebook uses client side JavaScript code
to preview PDF ﬁles, which is out of scope for our attacks. We did not succeed
in embedding and executing PostScript code within PDF ﬁles on Yahoo! and
Amazon. All ten websites allow image ﬁles to be uploaded, however, we could
not inject PostScript code through their image upload function. In the end, we
could attack three websites discussed below. It is noteworthy to mention that
all of them use outdated versions of Ghostscript. An overview of the evaluation
is given in Table 1.
Google. Google Drive and Google Mail preview uploaded EPS ﬁles that contain
PostScript code. However, after contacting the Google developers we learned that
their conversion process is sandboxed, limiting the attacks to a virtual machine.
Wikipedia. Wikipedia, which is based on MediaWiki6, does not allow
PostScript or EPS ﬁles to be uploaded directly for security reasons. However,
PDF ﬁles can be uploaded and previews are generated on the server side. Using
PostScript pass-through as described in Sect. 5, we could create a specially
crafted PDF ﬁle which executes PostScript code that could be used for DoS
attacks. Information disclosure and accessing the ﬁle system was limited because
we could only extract a limited number of bytes using this technique.
Microsoft. Microsoft OneDrive, which is hosted on live.com, allows arbitrary
EPS ﬁles to be uploaded, which are processed for preview on the server side. This
allowed us to dump environment variables and to read arbitrary ﬁles (LFI).
6 Wikimedia Foundation, MediaWiki, https://www.mediawiki.org/, Mar. 2017.
614
J. M¨uller et al.
6.3 Responsible Disclosure and Ethical Considerations
We responsibly disclosed all security vulnerabilities to the respective website
administrators. Microsoft rewarded our ﬁndings with $5000. Ethical consider-
ations were discussed internally during the creation of the attack catalog and
before starting the tests. As a result, we deﬁned a methodology that ensured
both the veriﬁability of our attacks as well as minimal interference with the
tested services. This includes precautions against DoS or leaking sensitive data
like private keys or passwords.
7 Towards a Hybrid Exploit
Web applications are not the only systems that can be attacked with PostScript.
To demonstrate the ﬂexibility of malicious PostScript code hidden inside PDFs
as described in Sect. 5 we created a hybrid proof-of-concept PostScript/PDF
worm which can be used to attack various types of hosts as depicted in Fig. 3. It
abuses missing -dSAFER mode, CVE-2016-7976 and CVE-2017-8291 to attack
Ghostscript and CVE-2017-2741 to attack HP printers.
Fig. 3. A PostScript-based worm attacking and spreading on diﬀerent systems.
Web Applications. When uploaded and processed by a web application vul-
nerable to Ghostscript-based remote code execution, the worm infects all PDF
ﬁles found on the server it has write access to. Such a scenario would especially be
disastrous for cloud storage providers which keep the PDFs of many users, or for
scholarly research databases like IEEE Xplore or ACM which provide millions
of PDF documents frequently requested by researchers around the world.
Client Systems. If any of these infected PDF ﬁles is downloaded by a vic-
tim onto a vulnerable Linux client, in turn, all PDF ﬁles on his host’s ﬁle sys-
tem would be infected. Infection routines could either be provided by simply
replacing benign PDF ﬁles with a copy of the worm or by silently injecting
malicious PostScript code into benign PDF ﬁles. The later method can be can
be accomplished by restructuring the PDF content without changing the actual
appearance of the document. Note that to trigger the infection it is not always
necesarry to open the PDF ﬁle. It usually is suﬃcient to open a ﬁle manager
PostScript Undead: Pwning the Web with a Years Old Language
615
which previews containing images and PDF ﬁles and therefore execute the mali-
cious code. Even simple command-line tools like less(1)7 are aﬀected because on
current Linux distributions, less file.pdf automatically converts PDFs to
text to preview them in the console using Ghostscript. Note that the Windows
world is not directly aﬀected because PostScript code within PDF ﬁles is usually
just ignored here. However known vulnerabilities and CVEs exist, e.g. for Adobe
Reader which could be added to the malicious PDF document.
Printers and Print Servers. In April 2017, HP published CVE-2017-2741, a
critical vulnerability present in various printer models without giving any details.