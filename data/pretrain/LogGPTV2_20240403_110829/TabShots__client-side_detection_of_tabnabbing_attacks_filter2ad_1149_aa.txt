title:TabShots: client-side detection of tabnabbing attacks
author:Philippe De Ryck and
Nick Nikiforakis and
Lieven Desmet and
Wouter Joosen
TabShots: Client-Side Detection of Tabnabbing Attacks
Philippe De Ryck, Nick Nikiforakis, Lieven Desmet, Wouter Joosen
iMinds-Distrinet, KU Leuven, 3001 Leuven, Belgium
PI:EMAIL
ABSTRACT
As the web grows larger and larger and as the browser be-
comes the vehicle-of-choice for delivering many applications
of daily use, the security and privacy of web users is under
constant attack. Phishing is as prevalent as ever, with anti-
phishing communities reporting thousands of new phishing
campaigns each month.
In 2010, tabnabbing, a variation
of phishing, was introduced.
In a tabnabbing attack, an
innocuous-looking page, opened in a browser tab, disguises
itself as the login page of a popular web application, when
the user’s focus is on a diﬀerent tab. The attack exploits the
trust of users for already opened pages and the user habit
of long-lived browser tabs.
To combat this recent attack, we propose TabShots. Tab-
Shots is a browser extension that helps browsers and users to
remember what each tab looked like, before the user changed
tabs. Our system compares the appearance of each tab and
highlights the parts that were changed, allowing the user to
distinguish between legitimate changes and malicious mas-
querading. Using an experimental evaluation on the most
popular sites of the Internet, we show that TabShots has
no impact on 78% of these sites, and very little on another
19%. Thereby, TabShots eﬀectively protects users against
tabnabbing attacks without aﬀecting their browsing habits
and without breaking legitimate popular sites.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection; H.3.5 [Information
Storage and Retrieval]: Web-based services
Keywords
Tabnabbing, phishing, client-side protection
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIA CCS’13, May 8–10, 2013, Hangzhou, China.
Copyright 2013 ACM 978-1-4503-1767-2/13/05 ...$15.00.
1.
INTRODUCTION
Phishing, the process that involves an attacker tricking
users into willingly surrendering their credentials, is as preva-
lent as ever. PhishTank, a volunteer-driven site for tracking
phishing pages [13], in their latest publicly available report,
reported a total of 22,851 valid phishing attempts just for
July of 2012. In these attacks, an attacker targets the user
and capitalizes on a user’s inability of distinguishing a le-
gitimate page from one that looks legitimate but is actually
fraudulent. Phishing attacks can be conducted both on large
and small scale, depending on an attacker’s objectives. The
latest publicized attack against the White House, involved
the use of “spear phishing”, a type of phishing that is tar-
geting highly speciﬁc individuals and companies [9].
In 2010, Aza Raskin presented a new type of phishing at-
tack which he called “tabnabbing” [14]. In tabnabbing, the
user is lured into visiting a malicious site, which however
looks innocuous. If a user keeps the attacker’s site open and
uses another tab of her browser to browse to a diﬀerent web-
site, the tabnabbing page takes advantage of the user’s lack
of focus (accessible through JavaScript as window.onBlur)
to change its appearance (page title, favicon and page con-
tent) to look identical to the login screen of a popular site.
According to Raskin, when a user returns back to the open
tab, she has no reason to re-inspect the URL of the site
rendered in it, since she already did that in the past. This
type of phishing separates the visit of a site from the actual
phishing attack and could, in theory, even trick users who
would not fall victim to traditional phishing attacks.
In this paper we present TabShots, a countermeasure for
detecting changes to a site when its tab is out of focus. Tab-
Shots allows a browser to “remember” what the tab looked
like before it lost focus, and compare it with the appear-
ance after regaining focus. More precisely, whenever a tab
is fully loaded, TabShots records the favicon1 and captures
a screenshot of the visible tab. Whenever a user revisits a
tab, a new capture is taken and compared to the previously
stored one. If any changes are detected, the user is warned
by adding a visual overlay on the current tab, showing ex-
actly the content that was changed, assisting the user in
distinguishing between legitimate changes and tabnabbing
attacks. Our system is based on the user’s visual percep-
tion of a site and not the HTML representation of it, allow-
ing TabShots to withstand attacks that straightforwardly
circumvent previously proposed, tabnabbing-detection sys-
tems. We implement TabShots as a Chrome extension and
evaluate it against the top 1000 Alexa sites, showing that
1The small icon displayed in the tab’s title space
447Figure 1: A seemingly innocuous page on the left performs a tabhabbing attack once the user switches focus,
resulting in the page on the right [14].
78% of sites fall within a safe threshold of less than 5%
changes, and an additional 19% fall within the threshold of
less than 40% of changes. This means that TabShots eﬀec-
tively protects against tabnabbing attacks, without hinder-
ing a user’s day-to-day browsing habits.
The rest of this paper is structured as follows: In Sec-
tion 2 we ﬁrst explore the original tabnabbing attack and
then discuss possible variations taking advantages of the dif-
ferent implementations of the tabbing mechanism in popular
browsers. In Section 3 we describe in detail the workings of
TabShots and our implementation choices. In Section 4 we
evaluate TabShots on security, performance and compati-
bility against the Alexa top 1000. In Section 5, we brieﬂy
describe how TabShots could be deployed on the server-side
to create tabnabbing blacklists and expand protection to all
users. In Section 6 we discuss the related work and conclude
in Section 7.
2. BACKGROUND
2.1 Anatomy of a tabnabbing attack
Tabnabbing relies on the tab mechanism, which is com-
mon in all modern browsers. Users visit websites, but in-
stead of navigating away from that website when they want
to consume the content of a diﬀerent website, they open a
new tab, and use that tab instead. The old site remains
open in the old tab, and many tabs can accumulate over
time in a user’s browser. A 2009 study of user’s browsing
habits revealed that users have an average of 3.2 tabs open
in their browsers [6]. We expect that today, this number
has increased, due to the sustained popularity of social net-
working sites and web applications that constantly update
a user’s page with new information. The latest features in-
troduced by browsers attest to this popularity of multiple
open tabs, since they give the user the ability to “pin” any
given tab to the browser and treat it as a web application.
The steps of a tabnabbing attack as presented by Raskin [14]
are the following:
1. An attacker convinces the user to visit a website under
his control. This website appears to be an innocuous
site that is not trying to fool the user into giving up
her credentials. What the attacker must do, is con-
vince the user to keep this tab open, and browse to
a diﬀerent website. This is easily achieved in a wide
range of ways, for instance by providing an article that
is both very interesting, but also too long to read in
a single go, or some sort of free product that will be
available in the near future. Directing the user away
from the attacker’s site is straightforward by adding
the target="_blank" attribute to interesting hyper-
links, so that new links automatically open in a new
tab or window.
2. JavaScript code running in the attacker’s website is
triggered when the current window has lost focus, by
registering to the window.onBlur event handler.
3. The user keeps the attacker’s website open and uses
other tabs to surf the Internet.
4. The attacker realizes that his window is currently not
in focus, and, after a possible delay of a few seconds
in order to make sure that the user is busy consum-
ing other content, changes the title, favicon and layout
of the page to mimic the login screen of a web appli-
cation, for instance the user’s web mail or social net-
working site. The attacker can choose a default web
application (like Gmail) under the assumption that
most users have a Gmail account or can combine the
tabnabbing attack with a history-revealing attack [8,
21], and present the login of a web application that he
knows is visited in the past by the user. This process
is also shown in Figure 1
5. At some point in the future, the user recognizes a tab
with a familiar favicon (e.g. GMail) and unwittingly
opens the attacker-controlled tab. At this point, the
user is no longer checking the URL of the website,
since it is a website that she opened in the past and
thus “trusted”. Given a convincing login screen, the
user proceeds into typing her credentials in the given
forms which are then transferred to the attacker, thus
completing the tabnabbing attack.
448Figure 2: Chrome keeps all tabs visible but shrinks
the space alloted to each tab
Figure 3: After a number of tabs, Firefox hides older
tabs in order to make space for the new ones
The main diﬀerence between tabnabbing and traditional
phishing attacks is that the fake login form is decoupled
from the visit of the malicious website. Thus, users who
have been trained to spot phishing attacks by immediately
checking the URL of the page they open, may fall victim to
this variant of phishing. This “delayed maliciousness” can
also be used to evade detection by any automated honey-
clients which may be autonomously searching for phishing
pages based on various heuristics [22].
If the honeyclient
does not stay for long enough on the malicious page, or does
not trigger the window.onBlur event, then the actual phish-
ing page will never be shown and the attacker can avoid
detection.
2.2 Overly Speciﬁc Detection
In the previous section, we described the anatomy of a tab-
nabbing attack, exactly as it was ﬁrst presented by Raskin in
2010 [14]. According to Raskin, an attacker needs to change
three things in order to conduct a successful tabnabbing at-
tack: the page’s title, the page’s favicon and the page itself.
Accordingly, currently known countermeasures depend on
changes in these three properties, or include even more spe-
ciﬁc tabnabbing characteristics (more details in Section 6).
This overly speciﬁc detection gives the attacker more ﬂexi-
bility to avoid detection.
One example of such ﬂexibility is carrying out a tab-
nabbing attack without changing the title of the tab, sim-
ply by taking advantage of the tabbing behavior within a
browser. While conducting our research, we noticed that
diﬀerent browsers behave diﬀerently when a user has many
open tabs in one window. Figures 2 and 3 show how Chrome
and Firefox handle many open tabs. Chrome, starts resiz-
ing the label of each tab, in an eﬀort to keep all tabs vis-
ible. Here, one can notice that most of the title of each
tab is hidden while favicons remain visible. On the other
hand, Firefox starts hiding tabs which the user can access
by clicking on the left arrow (circled in Figure 3). More-
over, Firefox preserves the title bar above the tabs, which
Chrome dispenses in an eﬀort to maximize the amount of
space available for HTML.
In the case of Chrome, assuming that a user has many
tabs open, the attacker can avoid the title change altogether,
since it will likely not be visible to the user anyway.
In the next section, we present TabShots, which detects
tabnabbing attacks using visual comparison. Since Tab-
Shots does not depend on ﬁne-grained detection properties,
we leave no room for an attacker to sneak through.
Figure 4: The overlay generated by TabShots for
the attack from Figure 1. Here, only certain parts
of the white background remained unchanged.
3. TabShots PROTOTYPE
3.1 Core idea
As discussed before, a successful tabnabbing attack de-
pends on the user visiting a malicious page, shifting focus
to a diﬀerent tab and returning at some point, after which
the malicious page has changed its looks to resemble a pop-
ular application’s login form. In itself, a tabnabbing attack
is extremely obvious to detect, since a convincing phishing
page will diﬀer from the previous content. Detection is how-
ever complicated by the tab being out of focus, and the user
placing some trust in previously opened and visited tabs.
TabShots takes advantage of these obvious changes needed
by a successful tabnabbing attack, by remembering what a
tab looks like before it loses focus, and comparing that to
what it looks like when it regains focus. Any changes that
happened in the background will be detected, and commu-
nicated to the user by means of a colored overlay. This
allows the user to decide for herself whether the changes are
innocent (e.g. an incoming chat message) or malicious mas-
querading (e.g. a login form and GMail logo popping up).
Figure 4 shows how TabShots detects the tabnabbing at-
tack from Figure 1. This non-intrusive behavior guarantees
compatibility with all existing sites, since changes are only
highlighted and not blocked or prevented.
Our approach is purely built on the visible content of a
tab, exactly as the user perceives it. This yields several
advantages compared to techniques analyzing the structure
and contents of a page. TabShots is invulnerable to HTML,
CSS or JavaScript trickery, aimed at circumventing tab-
nabbing countermeasures (see Section 6), scrolling attacks
or other obfuscation attacks.
3.2 Implementation details
TabShots is currently implemented as an extension for
Google Chrome2, but could easily be ported to other browsers
supporting an extension system, provided they oﬀer a reli-
able way to capture screenshots of tabs.
2A prototype of TabShots is available at http://people.cs.
kuleuven.be/~philippe.deryck/papers/asiaccs2013/
449In the following paragraphs, we discuss several implemen-
tation techniques and strategies for the major components
of TabShots.
Capturing Tabs.
TabShots records the favicon and captures screenshots of
the currently focused tab at regular intervals, keeping track
of the latest version. This latest snapshot will be the ba-
sis for comparison when a tab regains focus. Capturing a
screenshot of a tab in Google Chrome is trivial, since the
browser oﬀers an API call to capture the currently visible
tab of a window. Capture data is stored as a data URL [10].
Capturing snapshots of a tab at regular intervals is a delib-
erate design decision, allowing TabShots to handle changes
that happen in a tab while it is in focus. These changes typi-
cally occur in highly dynamic applications, such as Facebook
or GMail, which often use AJAX techniques to dynamically