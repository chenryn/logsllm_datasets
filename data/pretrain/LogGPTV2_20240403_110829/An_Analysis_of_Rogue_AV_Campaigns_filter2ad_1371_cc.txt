warehouse for ad-hoc queries. Proc. VLDB Endow. 1(2), 1337–1345 (2008)
16. Stonebraker, M., Abadi, D.J., Batkin, A., Chen, X., Cherniack, M., Ferreira, M.,
Lau, E., Lin, A., Madden, S., O’Neil, E., O’Neil, P., Rasin, A., Tran, N., Zdonik, S.:
C-store: a column-oriented dbms. In: VLDB 2005: Proceedings of the 31st Inter-
national Conference on Very Large Data Bases, VLDB Endowment, pp. 553–564
(2005)
17. Sullivan, M., Heybey, A.: Tribeca: A system for managing large databases of net-
work traﬃc. In: USENIX, pp. 13–24 (1998)
18. Cisco Systems. Cisco ios netﬂow, http://www.cisco.com
19. Vertica Systems. Vertica, http://www.vertica.com
20. Ziv, J., Lempel, A.: A universal algorithm for sequential data compression. IEEE
Transactions on Information Theory 23, 337–343 (1977)
21. Zukowski, M., Boncz, P.A., Nes, N., H´eman, S.: Monetdb/x100 - a dbms in the
cpu cache. IEEE Data Eng. Bull. 28(2), 17–22 (2005)
Live and Trustworthy Forensic Analysis of
Commodity Production Systems
Lorenzo Martignoni1, Aristide Fattori2,
Roberto Paleari2, and Lorenzo Cavallaro3
1 Universit`a degli Studi di Udine, Italy
PI:EMAIL
2 Universit`a degli Studi di Milano, Italy
{aristide,roberto}@security.dico.unimi.it
3 Vrije Universiteit Amsterdam, The Netherlands
PI:EMAIL
Abstract. We present HyperSleuth, a framework that leverages the vir-
tualization extensions provided by commodity hardware to securely per-
form live forensic analysis of potentially compromised production
systems. HyperSleuth provides a trusted execution environment that guar-
antees four fundamental properties. First, an attacker controlling the
system cannot interfere with the analysis and cannot tamper the results.
Second, the framework can be installed as the system runs, without a
reboot and without loosing any volatile data. Third, the analysis per-
formed is completely transparent to the OS and to an attacker. Finally,
the analysis can be periodically and safely interrupted to resume nor-
mal execution of the system. On top of HyperSleuth we implemented
three forensic analysis applications: a lazy physical memory dumper, a
lie detector, and a system call tracer. The experimental evaluation we
conducted demonstrated that even time consuming analysis, such as the
dump of the content of the physical memory, can be securely performed
without interrupting the services oﬀered by the system.
1 Introduction
Kernel-level malware, which compromise the kernel of an operating system (OS),
are one of the most important concerns systems security experts have to ﬁght
with, nowadays [1]. Being executed at the same privilege level of the OS, such
a malware can easily fool traditional analysis and detection techniques. For in-
stance, Shadow Walker exploits kernel-level privileges to defeat memory content
scanners by providing a de-synchronized view of the memory used by the mal-
ware and the one perceived by the detector [2].
To address the problem of kernel-level malware and of attackers that are able
to obtain kernel-level privileges, researchers proposed to run out-of-the-box anal-
yses by exploiting virtual machine monitor (VMM), or hypervisor, technology.
In such a context, the analysis is executed in a trusted environment, the VMM,
while the monitored OS and users’ applications, are run as a guest of the virtual
machine. Recently, this research direction has been strongly encouraged by the
introduction of hardware extensions for the x86 architecture that simplify the
S. Jha, R. Sommer, and C. Kreibich (Eds.): RAID 2010, LNCS 6307, pp. 297–316, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010
298
L. Martignoni et al.
development of virtual machine monitors [3,4]. Since the hypervisor operates at a
higher privilege level than the guest OS, it has complete control of the hardware,
it can preemptively intercept events, it cannot be tampered by a compromised
OS, and therefore it can be used to enforce stronger protection [5,6,7,8,9]. Ad-
vanced techniques, like the one used by Shadow Walker to hide malicious code,
are defeated using out-of-the-box memory content scanners. Unfortunately, all
the VMM-based solutions proposed in literature are based on the same assump-
tion: they operate proactively. In other words, the hypervisor must be started
before the guest OS and it must run until the guest terminates. Therefore, post-
infection analysis of systems that were not running such VMM-based protections
before an infection continues to be unsafe, because the malware and the tools
used for the analysis run at the same privilege level.
In this paper we propose HyperSleuth, a tool that exploits the VMM extensions
available nowadays (and typically unused) in commodity hardware, to securely
perform live forensic analyses of potentially compromised production systems.
HyperSleuth is executed on systems that are believed to be compromised, and
obtains complete and tamper-resistant control over the OS, by running at “ring
minus-one” (i.e., the hypervisor privilege level). HyperSleuth consists in (i) a
tiny hypervisor that performs the analysis and (ii) a secure loader that installs
the hypervisor and veriﬁes that its code is not tampered during installation.
Like in virtualization-based malware, the hypervisor is installed on-the-ﬂy: the
alleged compromised host OS is transformed into a guest as it runs [10]. Since
the hardware guarantees that the hypervisor is not accessible from the guest
code, HyperSleuth remains persistent in the system for all the time necessary to
perform the live analysis. On the contrary, other solutions proposed in literature
for executing veriﬁed code in untrusted environments are not persistent and thus
cannot guarantee that the veriﬁed code is not tampered when the execution
of the untrusted code is resumed [11, 12, 13]. By providing a persistent trusted
execution environment, HyperSleuth opens new opportunities for live and trusted
forensic analyses, including the possibility to perform analyses that require to
monitor the run-time behavior of the system. When the live analysis is concluded
positively (e.g., no malicious program is found), HyperSleuth can be removed
from the system and the OS, which was temporarily transformed into a guest
OS, becomes again the host OS. As for the installation, the hypervisor is removed
on-the-ﬂy.
We developed a memory acquisition tool, a lie detector [6], and a system call
tracer on top of HyperSleuth, to show how our hardware-supported VMM-based
framework can be successfully used to gather volatile data even from production
systems whose services cannot be interrupted. To experimentally demonstrate
our claims about the eﬀectiveness of HyperSleuth, we simulated two scenarios:
a compromised production system running a heavy-loaded DNS server and a
system infected by several kernel-level malware. We used HyperSleuth to dump
the content of the physical memory of the former and to detect the malware in
the latter. In the ﬁrst case, HyperSleuth was able to dump the entire content of
the physical memory, without interrupting the services oﬀered by the server. In
the second case, HyperSleuth detected all the infections.
Live and Trustworthy Forensic Analysis of Commodity Production Systems
299
3. Analysis
2. Dynamic Root of
Trust bootstrap
d
a
o
L
.
1
4. Result
Potentially
compromised host
Trusted host
Fig. 1. Overview of HyperSleuth execution
2 Overview
HyperSleuth should not be considered merely as a forensic tool, but rather as a
framework for constructing forensic tools. Indeed, its goal is to provide a trusted
execution environment for performing any live forensic analysis on production
systems. More precisely, the execution environment in which a forensic analysis
should be performed must guarantee four fundamental properties. First, the en-
vironment must guarantee a tamper-proof execution of the analysis code. That
is, an attacker controlling the system cannot interfere with the analysis and can-
not tamper the results. Second, it must be possible to perform an a-posteriori
bootstrap of the trusted execution environment, even after the system has been
compromised, and the bootstrap process itself must require no speciﬁc support
from the system. Third, the trusted execution environment must be completely
transparent to the system and to the attacker. Fourth, the trusted execution
environment must be persistent. That is, the analysis performed in the trusted
environment can be periodically interrupted, and the normal execution of the
system resumed. Practically speaking, that allows to analyze an alleged com-
promised system without freezing it and without interrupting the services it
provides. Moreover, such a property would allow to perform forensic analyses
that require to monitor the run-time behavior of the system. As we will brieﬂy
see in the next sections, HyperSleuth fulﬁlls all the aforementioned properties
and can thus be used to safely analyze any compromised system that meets the
requirements described in Section 2.3.
Figure 1 depicts the execution of HyperSleuth. HyperSleuth is installed and
executed on demand (step 1 in Figure 1), only when there is a suspect that the
host has been compromised, or in general when there is the necessity to perform
a live forensic analysis. The execution is characterized by two phases. In the ﬁrst
phase (step 2 in Figure 1), HyperSleuth assumes complete control of the host
and establishes a Dynamic Root of Trust (DRT). That is accomplished with the
collaboration of a trusted host (located in the same local network). The trusted
host is responsible for attesting that the DRT has been correctly established. In
the second phase (steps 3–4 in Figure 1), HyperSleuth performs a speciﬁc live
forensic analysis and transmits the results of the analysis to the trusted host.
Since the trusted host has a proof that the DRT has been correctly established
and since, in turn, the DRT guarantees that the analysis code executes in the
300
L. Martignoni et al.
untrusted host untampered, the results of the analysis can be transitively con-
sidered authentic.
In the following, we brieﬂy describe the architecture of HyperSleuth and how
it manages to assume and maintain complete control of the untrusted host.
Then, we describe the mechanism we use to bootstrap the dynamic root of
trust, and, ﬁnally, we describe the assumptions and the threat model under
which HyperSleuth runs.
2.1 HyperSleuth Architecture
HyperSleuth needs to be isolated from the host OS, to prevent any attack po-
tentially originating from a compromised system. Simultaneously, HyperSleuth
must be able to access certain resources of the host, to perform the requested
forensic analysis, and to access the network to transmit the result to the trusted
machine.
Figure 2 shows the position where HyperSleuth resides in the host. Since Hy-
perSleuth needs to obtain and maintain complete control of the host and needs
to operate with more privileges than the attacker, it resides at the lowest level:
between the hardware and the host OS. HyperSleuth exploits hardware virtu-
alization support available in commodity x86 CPUs [3, 4] (which is typically
unused). In other words, it executes at the privilege level of a Virtual Machine
Monitor (VMM) and thus it has direct access to the hardware and its isolation
from the host OS is facilitated by the CPU.
One of the peculiar features of HyperSleuth is the possibility to load and unload
the VMM as the host runs. This hot-plug capability is indeed a very important
feature: it allows to transparently take over an allegedly compromised system,
turning, on-the-ﬂy, its host OS into a guest one, and vice-versa at will. This is
done without rebooting the system and thus preserving all those valuable run-
time information that can allow to discover a malware infection or an intrusion.
To do that, HyperSleuth leverages a characteristic of the hardware virtualization
support available in x86 CPUs that allows to launch a VMM at any time, even
when the host OS and users’ applications are already running. Once the VMM
is launched, the host becomes a guest of the VMM and the attacker loses her
monopoly of the system and any possibility to tamper the execution of the VMM
and the results of the forensic analysis.
The greyed portions in Figure 2 represent the trusted components in our sys-
tem. During the launch, HyperSleuth assumes complete control of virtual memory
management, to ensure that the host OS cannot access any of its private memory
locations. Moreover, HyperSleuth does not trust any existing software component
of the host. Rather, it contains all the necessary primitives to inspect directly
the state of the guest and to dialog with the network card to transmit data to
the trusted party.
Depending on the type of forensic analysis, the analysis might be performed
immediately after the launch, or it might be executed in multiple rounds, in-
terleaved with the execution of the OS and users’ applications. The advantage
of the latter approach over the former is that the host can continue its normal
Live and Trustworthy Forensic Analysis of Commodity Production Systems
301
User
process
User
process
User
process
User
process
User
process
User
process
Operating system kernel
Operating system kernel
HyperSleuth VMM
Unload
Load
Fig. 2. Overview of HyperSleuth architecture
activity while the analysis is being performed. Thus, the analysis does not result
in a denial of service and can also target run-time evolving characteristics of
the system. In both cases, when the analysis is completed, HyperSleuth can be
disabled and even unloaded.
2.2 HyperSleuth Trusted Launch
HyperSleuth’s launch process consists in enabling the VMM privilege level, in
conﬁguring the CPU to execute HyperSleuth code at this level, and in conﬁguring
the CPU such that all virtual memory management operations can be intercepted
and supervised by the VMM. Unfortunately, an attacker could easily tamper the
launch. For example, she could simulate a successful installation of the VMM and
then transmit fake analysis results to the trusted host. This weakness stems from
the fact that the launch process just described lacks an initial trusted component
on which we can rely to establish the DRT.
The approach we use to establish the DRT is based on a primitive for tamper
proof code execution. This primitive allows to create and to prove the establish-
ment of a minimalistic trusted execution environment that guarantees that the
code executed in this environment runs with maximum available privileges and
that no attacker can manipulate the code before and during the execution. We
use this primitive to create the environment to launch HyperSleuth and to prove
to the trusted host that we have established the missing trusted component and
that all subsequent operations are secured.
We currently rely on a pure software primitive that is based on a challenge
and response protocol and involves an external trusted host [14]. Alternatively,
a TPM-based hardware attestation primitive can be used for this purpose (e.g.,
Intel senter and AMD skinit primitives [3, 15]).
2.3 Requirements and Threat Model
Since HyperSleuth leverages hardware support for virtualization available in com-
modity CPUs, such support must be available on the system that must be
302
L. Martignoni et al.
analyzed1. To maximize the portability of HyperSleuth, we have designed it to
only require ﬁrst generation of hardware facilities for virtualization (i.e., Hyper-
Sleuth does not require extensions for MMU and I/O virtualization). Clearly,
HyperSleuth cannot be used on systems on which virtualization support is al-
ready in use [16]. If a trusted VMM were already running on the host, the VMM
could be used directly to perform the analysis. On the other side, if a malicious
VMM were running on the host, HyperSleuth’s trusted launch would fail.
In order to launch HyperSleuth some privileged instructions must be executed.
That can be accomplished by installing a kernel driver in the target host. Note
that, in the unlikely case of a damaged system that does not allow to load any
kernel driver, alternative solutions for executing code in the kernel can be used
(e.g., the page-ﬁle attack [10]).
The threat model under which HyperSleuth operates takes into consideration
a very powerful attacker, e.g., an attacker with kernel-level privileges. Nonethe-
less, some assumptions were made while designing HyperSleuth. In particular, the
attacker does not operate in system management mode, the attacker does not
perform hardware-based attacks (e.g., a DMA-based attack), and the attacker
does not leverage an external and more powerful host to simulate the bootstrap
of the DRT. Some of these assumptions could indeed be relaxed by virtualizing
completely I/O devices using either a pure-software approach or recent hardware
support for devices virtualization (e.g., Intel VT-d), and by employing an hard-
ware trusted platform for code attestation (e.g., TPM), keeping HyperSleuth a
secure and powerful framework for performing forensic analysis of live data.
3 Implementation
The core of HyperSleuth is a minimalistic virtual machine monitor that is in-
stalled on the host while the OS and users’ applications are already running.
We achieve this goal by exploiting hardware support for virtualization available
in modern x86 CPUs. In this Section we describe how we have implemented
HyperSleuth on a system with an Intel x86 CPU with VT-x extensions.
3.1 Intel VT-x
Before presenting the details of HyperSleuth VMM implementation, we give a
brief overview of the hardware virtualization technology available in Intel x86
CPUs, called VT-x. AMD technology, named SVM, is very similar and diﬀers
mostly in terms of terminology.
Intel VT-x separates the CPU execution into two modes of operation: VMX
root mode and VMX non-root mode. The VMM and the guest (OS and appli-
cations) execute respectively in root and non-root modes. Software executing in
both modes can operate in any of the four privilege levels that are supported
1 Although nowadays all consumer CPUs come with hardware support for virtual-
ization, in order to be usable, the support must be enabled via the BIOS. At the
moment we do not know how many manufactures enable the support by default.
Live and Trustworthy Forensic Analysis of Commodity Production Systems
303
by the CPU. Thus, the guest OS can execute at the highest CPU privilege and
the VMM can supervise the execution of the guest without any modiﬁcation of
the guest. When a VMM is installed, the CPU switches back and forth between
non-root and root mode: the execution of the guest might be interrupted by
an exit to root mode and subsequently resumed by an enter to non-root mode.
After the launch, the VMM execution is never scheduled and exits to root-mode
are the only mechanism for the VMM to regain the control of the execution.
Like hardware exceptions, exits are events that block the execution of the guest,
switch from non-root mode to root mode, and transfer the control to the VMM.
However, diﬀerently from exceptions, the set of events triggering exits to root
mode can be conﬁgured dynamically by the VMM. Examples of exiting events
are exceptions, interrupts, I/O operations, and the execution of privileged in-
structions that access control registers or descriptor tables. Exits can also be
requested explicitly by the guest through a VMM call. Exits are handled by a
speciﬁc VMM routine that eventually executes an enter to resume the execution
of the guest. The state of the CPU at the time of an exit and of an enter is
stored in a data structure called Virtual Machine Control Structure, or VMCS.
This structure also controls the set of events triggering exists and the state of
the CPU for executing in root-mode.
In the typical deployment, the launch of the VMM consists of three steps.
First, the VMX root-mode is enabled. Second, the CPU is conﬁgured to execute
the VMM in root-mode. Third, the guests are booted in non-root mode. However,
Intel VT-x allows to launch a VMM at any time, thus giving the ability to
transform a running host into a guest of a VMM. The procedure for such a
delayed launch is the same as the one just described, with the exception of the
third step. The state of the CPU for non-root mode is set to the exact same state
of the CPU preceding the launch, such that, when the launch is completed, the
execution of the OS and its applications resumes in non-root mode. The inverse
procedure can be used to unload the VMM, disable VMX root-mode, and give
back full control of the system to the OS.
3.2 HyperSleuth VMM
HyperSleuth can be loaded at any time by exploiting the delayed launch feature
oﬀered by the CPU. Figure 3 shows a simpliﬁed memory layout after the launch
of HyperSleuth. The environment for non-root mode, in which the OS and users’
application are executed, is left intact. The environment for root mode instead
is created during the launch and maintained isolated by the VMM. The VMCS
controls the execution contexts of both root and non-root modes. In the following
paragraphs we describe in details the steps required to launch the VMM, to
recreate the environment for running the OS and users’ applications, and to
enforce the isolation of root-mode from non-root mode.
VMM Launch. To launch HyperSleuth VMM in a running host we perform
the following operations. First, we allocate a ﬁxed-size chunk of memory to hold