### They cannot be used for proving the absence of a side channel.
There are two primary reasons why the bounds provided by CacheAudit may be overly pessimistic:
1. **Overestimation due to Static Analysis Imprecision:** CacheAudit might overestimate the amount of leaked information because of the inherent imprecision in static analysis techniques.
2. **Computational Bounded Adversary Limitations:** The secret input may not be effectively recoverable from the leaked information by an adversary that is computationally bounded.

### 8. Related Work
The work most closely related to ours is [34]. In that study, the authors quantify cache side channels by integrating a commercial, closed-source tool for the static analysis of worst-case execution times [1] with an algorithm for counting concretizations of abstract cache states. However, the application of this tool to side-channel analysis is limited to access-based adversaries and requires extensive code instrumentation. In contrast, CacheAudit provides tailored abstract domains for various types of cache side-channel adversaries, supports different replacement strategies, and is modular and open for further extensions. Additionally, the bounds delivered by CacheAudit are significantly tighter than those reported in [34]; see Section 7 for details.

Zhang et al. [48] propose an approach for mitigating timing side channels based on contracts between software and hardware. The contract is enforced on the software side using a type system and on the hardware side, for example, by using dedicated hardware such as partitioned caches. This analysis ensures that an adversary cannot obtain any information by observing public parts of the memory; any confidential information the adversary obtains must be via timing, which is controlled using dedicated mitigation commands. Tiwari et al. [45] sketch a novel microarchitecture that facilitates information-flow tracking by design, using noninterference as a baseline confidentiality property. Other mitigation techniques include coding guidelines [15] for thwarting cache attacks on x86 CPUs and novel cache architectures that are resistant to cache side-channel attacks [46]. Our approach differs from these in that we focus on the analysis of microarchitectural side channels rather than their mitigation. Our method does not rely on a specific platform and can be applied to any language and hardware architecture, provided the necessary abstractions are in place.

Kim et al. [29] introduce StealthMem, a system-level defense against cache-timing attacks in virtualized environments. The core of StealthMem is a software-based mechanism that locks pages of a virtual machine into the cache and prevents their eviction by other VMs. StealthMem can be seen as a lightweight variant of flushing/preloading countermeasures. As future work, we plan to use our tool to derive formal, quantitative guarantees for programs using StealthMem.

For AES, there are efficient software implementations that avoid the use of data caches by bit-slicing [28]. Additionally, a model for the statistical estimation of the effectiveness of AES cache attacks based on cache line sizes and lookup tables has been presented in [44]. In contrast, our analysis technique applies to arbitrary programs.

Technically, our work builds on methods from quantitative information-flow analysis (QIF) [14], where the automation by reduction to counting problems appears in [9, 38, 26, 37], the connection to abstract interpretation in [35], and the application to side-channel analysis in [33]. Our work goes beyond language-based approaches that consider caching [7, 25] by relying on more realistic models of caches and aiming for more permissive, quantitative guarantees.

### 9. Conclusions
We presented CacheAudit, the first automatic tool for the static derivation of formal, quantitative security guarantees against cache side-channel attacks. We demonstrated the usefulness of CacheAudit by establishing the first formal proofs of security for software-based countermeasures against a comprehensive set of adversaries, based on executable code.

The open architecture of CacheAudit makes it an ideal platform for future research on microarchitectural side channels. We are currently investigating the derivation of security guarantees for concurrent adversaries, which will provide a handle for extending our security guarantees to the operating system level. We will also investigate abstractions for hardware features such as pipelines, out-of-order execution, and leakage-resilient cache designs, with the goal of providing broad tool support for reasoning about side-channels arising at the hardware/software interface.

### Acknowledgments
We thank Adam Chlipala and the anonymous reviewers for their constructive feedback, and Ignacio Echeverría and Guillermo Guridi for their help with the implementation.

This work was partially funded by European Projects FP7-256980 NESSoS and FP7-229599 AMAROUT, the Spanish Project TIN2012-39391-C04-01 Strong-Soft, the Madrid Regional Project S2009TIC-1465 PROMETIDOS, and the German Research Council (DFG) as part of the Transregional Collaborative Research Center AVACS.

### References
[1] AbsInt aiT Worst-Case Execution Time Analyzers. http://www.absint.com/a3/
[2] Intel Advanced Encryption Standard (AES) Instructions Set. http://software.intel.com/file/24917
[3] PolarSSL. http://polarssl.org/
[4] Sorting algorithms. http://www.codebeach.com/2008/09/sorting-algorithms-in-c.html
...
[48] D. Zhang, A. Askarov, and A. C. Myers. Language-based control and mitigation of timing channels. In PLDI, pages 99–110. ACM, 2012.
[49] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart. Cross-VM side channels and their use to extract private keys. In CCS. ACM, 2012.