they cannot be used for proving that it is not.
There are two reasons why the bounds may be overly
pessimistic: First, CacheAudit may over-estimate the
amount of leaked information due to imprecision of the
static analysis. Second, the secret input may not be ef-
fectively recoverable from the leaked information by an
adversary that is computationally bounded.
8 Related Work
The work most closely related to ours is [34]. There,
the authors quantify cache side channels by connecting a
commercial, closed-source tool for the static analysis of
worst-case execution times [1] to an algorithm for count-
ing concretizations of abstract cache states. The appli-
cation of the tool to side-channel analysis is limited to
access-based adversaries and requires heavy code instru-
mentation. In contrast, CacheAudit provides tailored ab-
stract domains for all kinds of cache side-channel ad-
versaries, different replacement strategies, and is mod-
ular and open for further extensions. Furthermore, the
bounds delivered by CacheAudit are signiﬁcantly tighter
than those reported in [34]; see Section 7.
Zhang et al. [48] propose an approach for mitigating
timing side channels that is based on contracts betweens
software and hardware. The contract is enforced on the
software side using a type system, and on the hardware
USENIX Association  
22nd USENIX Security Symposium  443
array length
BubbleSort
InsertionSort
SelectionSort
Ctr
28
15.23
28
8
Ctime Cacc
0
4.86
0
6.91
4.86
0
16
Ctime
6.92
10.15
6.92
Ctr
120
44.3
120
Cacc
0
0
0
Ctr
496
117.7
496
32
Ctime Cacc
0
8.96
0
13.3
8.96
0
64
Ctime Cacc
0
11
0
15.8
11
0
Ctr
2016
296
2016
Figure 9: The table illustrates the security guarantees derived by CacheAudit for the implementations of BubbleSort, SelectionSort,
and InsertionSort, for trace-based, timing-based, and access-based adversaries, for LRU caches of 4KB and line sizes of 32B.
side, e.g., by using dedicated hardware such as parti-
tioned caches. The analysis ensures that an adversary
cannot obtain any information by observing public parts
of the memory; any conﬁdential information the adver-
sary obtains must be via timing, which is controlled using
dedicated mitigate commands. Tiwari et al. [45] sketch a
novel microarchitecture that faciliates information-ﬂow
tracking by design, where they use noninterference as
a baseline conﬁdentiality property. Other mitigation
techniques include coding guidelines [15] for thwarting
cache attacks on x86 CPUs, or novel cache architectures
that are resistant to cache side-channel attacks [46]. The
goal of our approach is orthogonal to those approaches
in that we focus on the analysis of microarchitectural
side channels rather than on their mitigation. Our ap-
proach does not rely on a speciﬁc platform; rather it can
be applied to any language and hardware architecture, for
which abstractions are in place.
Kim et al. put forward StealthMem [29], a system-
level defense against cache-timing attacks in virtualized
environments. The core of StealthMem is a software-
based mechanism that locks pages of a virtual machine
into the cache and prevents their eviction by other VMs.
StealthMem can be seen as a lightweight variant of ﬂush-
ing/preloading countermeasures. As future work, we
plan to use our tool to derive formal, quantitative guar-
antees for programs using StealthMem.
For the case of AES, there are efﬁcient software im-
plementations that avoid the use of data caches by bit-
slicing [28]. Furthermore, a model for statistical estima-
tion of the effectiveness of AES cache attacks based on
sizes of cache lines and lookup tables has been presented
in [44]. In contrast, our analysis technique applies to ar-
bitrary programs.
Technically, our work builds on methods from quan-
titative information-ﬂow analysis (QIF) [14], where the
automation by reduction to counting problems appears
in [9, 38, 26, 37], the connection to abstract interpreta-
tion in [35], and the application to side channel analysis
in [33]. Finally, our work goes beyond language-based
approaches that consider caching [7, 25] in that we rely
on more realistic models of caches and aim for more per-
missive, quantitative guarantees.
9 Conclusions
We presented CacheAudit, the ﬁrst automatic tool for the
static derivation of formal, quantitative security guaran-
tees against cache side-channel attacks. We demonstrate
the usefulness of CacheAudit by establishing the ﬁrst
formal proofs of security of software-based countermea-
sures for a comprehensive set of adversaries and based
on executable code.
The open architecture of CacheAudit makes it an ideal
platform for future research on microarchitectural side
channels.
In particular, we are currently investigating
the derivation of security guarantees for concurrent ad-
versaries. Progress along those lines will provide a han-
dle for extending our security guarantees to the operating
system level. We will further investigate abstractions for
hardware features such as pipelines, out-of-order execu-
tion, and leakage-resilient cache designs, with the goal
of providing broad tool support for reasoning about side-
channels arising at the hardware/software interface.
Acknowledgments We thank Adam Chlipala and the
anonymous reviewers for the constructive feedback, and
Ignacio Echeverr´ıa and Guillermo Guridi for helping
with the implementation.
This work was partially funded by European Projects
FP7-256980 NESSoS and FP7-229599 AMAROUT, by
the Spanish Project TIN2012-39391-C04-01 Strong-
Soft, by the Madrid Regional Project S2009TIC-1465
PROMETIDOS, and by the German Research Council
(DFG) as part of the Transregional Collaborative Re-
search Center AVACS.
References
[1] AbsInt aiT Worst-Case Execution Time Analyzers.
http://www.absint.com/a3/.
[2] Intel Advanced Encryption Standard (AES) In-
structions Set. http://software.intel.com/
file/24917.
[3] PolarSSL. http://polarssl.org/.
[4] Sorting algorithms.
http://www.codebeach.
com/2008/09/sorting-algorithms-in-c.
html.
444  22nd USENIX Security Symposium 
USENIX Association
[5] O. Aciic¸mez and C¸ . K. Koc¸. Trace-driven cache at-
tacks on AES. In ICICS, pages 112–121. Springer,
2006.
[6] O. Aciic¸mez, W. Schindler, and C¸ . K. Koc¸. Cache
based remote timing attack on the AES. In CT-RSA,
pages 271–286. Springer, 2007.
[7] J. Agat. Transforming out timing leaks. In POPL
2000, pages 40–53. ACM, 2000.
[8] J. Agat and D. Sands. On conﬁdentiality and algo-
rithms. In SSP, pages 64–77. IEEE, 2001.
[9] M. Backes, B. K¨opf, and A. Rybalchenko. Auto-
matic discovery and quantiﬁcation of information
leaks. In SSP, pages 141–153. IEEE, 2009.
[10] D. Bernstein.
attacks
Cache-timing
on
http://cr.yp.to/antiforgery/
AES.
cachetiming-20050414.pdf.
[11] D. Bernstein.
snuffle.html.
Salsa20.
http://cr.yp.to/
[12] F. Bourdoncle. Efﬁcient chaotic iteration strate-
In FMPA, pages 128–141.
gies with widenings.
Springer, 1993.
[13] A. Chlipala. Modular development of certiﬁed pro-
In ICFP,
gram veriﬁers with a proof assistant.
pages 160–171. ACM, 2006.
[14] D. Clark, S. Hunt, and P. Malacaria. A static anal-
ysis for quantifying information ﬂow in a simple
imperative language. JCS, 15(3):321–371, 2007.
[15] B. Coppens, I. Verbauwhede, K. D. Bosschere, and
B. D. Sutter. Practical mitigations for timing-based
side-channel attacks on modern x86 processors. In
SSP, pages 45–60. IEEE, 2009.
[16] P. Cousot and R. Cousot. Abstract interpretation: a
uniﬁed lattice model for static analysis of programs
by construction of approximation of ﬁxpoints. In
POPL, pages 238–252, 1977.
[17] P. Cousot and R. Cousot. Systematic design of pro-
gram analysis frameworks. In POPL, pages 269–
282, 1979.
[18] P. Cousot, R. Cousot, and L. Mauborgne. Theo-
ries, solvers and static analysis by abstract interpre-
tation. Journal of the ACM, 59(6):31, 2012.
[19] G. Doychev, D. Feld, B. K¨opf, L. Mauborgne, and
J. Reineke. CacheAudit: A tool for the static anal-
ysis of cache side channels.
http://eprint.
iacr.org/2013/253.
[20] S. Dziembowski and K. Pietrzak. Leakage-resilient
In FOCS, pages 293–302. IEEE,
cryptography.
2008.
[21] C. Ferdinand, F. Martin, R. Wilhelm, and M. Alt.
Cache behavior prediction by abstract interpreta-
tion. Science of Computer Programming, 35(2):163
– 189, 1999.
[22] D. Grund. Static Cache Analysis for Real-Time Sys-
tems – LRU, FIFO, PLRU. PhD thesis, Saarland
University, 2012.
[23] D. Gullasch, E. Bangerter, and S. Krenn. Cache
games - bringing access-based cache attacks on
AES to practice.
In SSP, pages 490–505. IEEE,
2011.
[24] R. Heckmann, M. Langenbach, S. Thesing, and
R. Wilhelm. The inﬂuence of processor architecture
on the design and the results of WCET tools. IEEE
Proceedings on Real-Time Systems, 91(7):1038–
1054, 2003.
[25] D. Hedin and D. Sands. Timing aware information
ﬂow security for a JavaCard-like bytecode. ENTCS,
141(1):163–182, 2005.
[26] J. Heusser and P. Malacaria. Quantifying informa-
tion leaks in software. In ACSAC, pages 261–269.
ACM, 2010.
[27] S. Jana and V. Shmatikov. Memento: Learning se-
crets from process footprints. In SSP, pages 143–
157. IEEE, 2012.
[28] E. K¨asper and P. Schwabe. Faster and timing-attack
resistant AES-GCM. In CHES, pages 1–17, 2009.
[29] T. Kim, M. Peinado, and G. Mainar-Ruiz. Stealth-
Mem: System-level protection against cache-based
side channel attacks in the cloud. In 19th USENIX
Security Symposium. USENIX, 2012.
[30] J. Kinder, F. Zuleger, and H. Veith. An abstract
interpretation-based framework for control ﬂow re-
construction from binaries. In VMCAI, pages 214–
228. Springer, 2009.
[31] P. Kocher. Timing attacks on implementations of
Difﬁe-Hellman, RSA, DSS, and other systems. In
CRYPTO, pages 104–113. Springer, 1996.
[32] P. Kocher, J. Jaffe, and B. Jun. Differential power
In CRYPTO, pages 388–397. Springer,
analysis.
1999.
[33] B. K¨opf and D. Basin. An Information-Theoretic
Model for Adaptive Side-Channel Attacks. In CCS,
pages 286–296. ACM, 2007.
[34] B. K¨opf, L. Mauborgne, and M. Ochoa. Auto-
In
matic quantiﬁcation of cache side-channels.
CAV, pages 564–580. Springer, 2012.
[35] B. K¨opf and A. Rybalchenko. Approximation
and randomization for quantitative information-
ﬂow analysis. In CSF, pages 3–14. IEEE, 2010.
[36] L. Mauborgne and X. Rival.
Trace partition-
ing in abstract interpretation based static analyz-
USENIX Association  
22nd USENIX Security Symposium  445
A Example Code
Selection Sort
void SelectionSort(int a[], int array_size){
int i;
for (i = 0; i  0 && a[j-1] > index; j--)
a[j] = a[j-1];
a[j] = index;
}
}
ers. In ESOP, volume 3444 of LNCS, pages 5–20.
Springer, 2005.
[37] Z. Meng and G. Smith. Calculating bounds on in-
formation leakage using two-bit patterns. In PLAS.
ACM, 2011.
[38] J. Newsome, S. McCamant, and D. Song. Measur-
ing channel capacity to distinguish undue inﬂuence.
In PLAS, pages 73–85. ACM, 2009.
[39] D. A. Osvik, A. Shamir, and E. Tromer. Cache at-
tacks and countermeasures: the case of AES. In CT-
RSA, volume 3860 of LNCS, pages 1–20. Springer,
2006.
[40] C. Percival. Cache missing for fun and proﬁt. In
BSDCan, 2005.
[41] T. Ristenpart, E. Tromer, H. Shacham, and S. Sav-
age. Hey, you, get off of my cloud: exploring infor-
mation leakage in third-party compute clouds. In
CCS, pages 199–212. ACM, 2009.
[42] A. Sabelfeld and A. C. Myers. Language-based
IEEE Journal on Se-
information-ﬂow security.
lected Areas in Communications, 21(1):5–19, 2003.
[43] G. Smith. On the foundations of quantitative infor-
mation ﬂow. In FoSSaCS, pages 288–302. Springer,
2009.
[44] K. Tiri, O. Aciic¸mez, M. Neve, and F. Andersen.
An analytical model for time-driven cache attacks.
In FSE, volume 4593 of LNCS, pages 399–413.
Springer, 2007.
[45] M. Tiwari, J. Oberg, X. Li, J. Valamehr, T. E. Levin,
B. Hardekopf, R. Kastner, F. T. Chong, and T. Sher-
wood. Crafting a usable microkernel, processor,
and I/O system with strict and provable informa-
tion ﬂow security. In ISCA, pages 189–200. ACM,
2011.
[46] Z. Wang and R. B. Lee. New cache designs for
thwarting software cache-based side channel at-
tacks. In ISCA, pages 494–505. ACM, 2007.
[47] Y. Yu, F.-X. Standaert, O. Pereira, and M. Yung.
Practical leakage-resilient pseudorandom genera-
tors. In CCS, pages 141–151. ACM, 2010.
[48] D. Zhang, A. Askarov, and A. C. Myers. Language-
based control and mitigation of timing channels. In
PLDI, pages 99–110. ACM, 2012.
[49] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart.
Cross-VM side channels and their use to extract pri-
vate keys. In CCS. ACM, 2012.
446  22nd USENIX Security Symposium 
USENIX Association