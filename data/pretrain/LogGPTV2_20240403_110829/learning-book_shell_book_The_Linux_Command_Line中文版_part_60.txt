## Page 497
任何给变量赋值的命令都会遭遇这样的问题。幸运地是，shell提供了一种奇异的展开方式，叫
做进程替换，它可以用来解决这种麻烦。进程替换有两种表达方式：
一种适用于产生标准输出的进程：
(1ist)
这里的list是一串命令列表：
为了解决我们的read命令问题，我们可以雇佣进程替换，像这样：
read >ouop
这个循环对目录列表的每一个条目执行read命令。列表本身产生于该脚本的最后一行代
码。这一行代码把从进程替换得到的输出重定向到这个循环的标准输入。这个包含在管道线中
的tail命令，是为了消除列表的第一行文本，这行文本是多余的。
当脚本执行后，脚本产生像这样的输出：
[ne@linuxbox -]$ pro_sub 1 head -n 20
Filenase: addresses.1dif
Size: 14540
Quner: me
Group:me
Modified: 2009-04-02 11:12
Links:
1
Attributes: -rv-r--r-
Filenase: bin
Size: 4096
Ovner: se
Group: me
Modified: 2009-07-10 07:31
Links: 2
Attributes: druxr-xr-x
Filenase: bookmarks .htnl
Size: 394213
Quner: me
Group:me
497
---
## Page 499
37.2陷阱
在第10章中，我们看到过程序是怎样响应信号的。我们也可以把这个功能添加到我们的脚本
中。然而到目前为止，我们所编写过的脚本还不需要这种功能（因为它们运行时间非常短暂，
并且不创建临时文件），大且更复杂的脚本可能会受益于一个信息处理程序。
当我们设计一个大的，复杂的脚本的时候，若脚本仍在运行时，用户注销或关闭了电脑，这
时候会发生什么，考虑到这一点非常重要。当像这样的事情发生了，一个信号将会发送给所有
受到影响的进程。依次地，代表这些进程的程序会执行相应的动作，来确保程序合理有序的终
止。比方说，例如，我们编写了一个会在执行时创建临时文件的脚本。在一个好的设计流程
我们应该让脚本删除创建的临时文件，当脚本完成它的任务之后。若脚本接收到一个信号，表
明该程序即将提前终止的信号，此时让脚本删除创建的临时文件，也会是很精巧的设计。
为满足这样需求.bash提供了一种机制.众所周知的trap°陷阱正好由内部命令trap实
现。trap使用如下语法：
trap argument signal [signal...]
这里的argument是一个字符串，它被读取并被当作一个命令，signal是一个信号的说明，
它会触发执行所要解释的命令。
这里是一个简单的例子：
#1/bin/bash
# trap-demo : simple signal handling deno
for i in {1..5); do
echo "Iteration $i of 5"
sleep 5
done
这个脚本定义一个陷阱，当脚本运行的时候，这个陷阱每当接受到一个SIGINT或
SIGTERM信号时，就会执行一个echo命令。当用户试图通过按下Ctrl-c组合键终止脚本运
行的时候，该程序的执行结果看起来像这样：
498
---
## Page 500
[ne@linuxbox -]$ trap-deno
Iteration 1 of 5
Iteration 2 of 5
I aa ignoring you.
Iteration 3 of 5
I an ignoring you.
Iteration 4 of 5
Iteration 5 of 5
正如我们所看到的，每次用户试图中断程序时，会打印出这条信息。
构建一个字符串来形成一个有用的命令序列是很笨拙的，所以通常的做法是指定一个shell
函数作为命令。在这个例子中，为每一个信号指定了一个单独的shell函数来处理：
#!/bin/bash
# trap-dezo2 : siaple signal handling deso
exit_on_signal_SIGINT () {
exit 0
exit_on_signal_SIGTERM () (
exit 0
J
trap exit_on_signal_SIGINT SIGINT
trap exit_on_signal_SIGTERM SIGTERM
for i in {1..5); do
echo "Iteration $i of 5"
sleep 5
done
这个脚本的特色是有两个trap命令，每个命令对应一个信号。每个trap，依次，当接受到
相应的特殊信号时，会执行指定的shell函数。注意每个信号处理函数中都包含了一个exit命
令。没有exit命令，信号处理函数执行完后，该脚本将会继续执行。
当用户在这个脚本执行期间，按下Ctrl-c组合键的时候，输出结果看起来像这样：
499
---
## Page 501
Zoup-de1as[-xoqnustsou]
Iteration 1 of 5
Iteration 2 of 5
Script interrupted.
临时文件
把信号处理程序包含在脚本中的一个原因是删除临时文件，在脚本执行期间，脚
本可能会创建临时文件来存放中间结果。命名临时文件是一种艺术。传统上，在类
似于unix系统中的程序会在/tmp目录下创建它们的临时文件，/tmp是一个服务
于临时文件的共享目录。然而，因为这个目录是共享的，这会引起一定的安全顾虑，
尤其对那些用超级用户特权运行的程序。除了为暴露给系统中所有用户的文件设置
合适的权限这一明显步骤之外，给临时文件一个不可预测的文件名是很重要的。这
就避免了一种为大众所知的temprace攻击。一种创建一个不可预测的（但是仍有
意义的）临时文件名的方法是，做一些像这样的事情：
tempfile= /tmp/$(basename $0).$S.$RANDOM
这将创建一个由程序名字，程序进程的ID（PID）文件名，和一个随机整数组
成。注意，然而，该$RANDOMshell变量只能返回一个范围在1-32767内的整数
值，这在计算机术语中不是一个很大的范围，所以一个单一的该变量实例是不足以
克服一个坚定的攻击者的。
一个比较好的方法是使用mktemp程序（不要和mktemp标准库函数相混淆）
来命名和创建临时文件。这个mktemp程序接受一个用于创建文件名的模板作为参
母和数字替换掉。一连申的“X”字符越长，则一连申的随机字符也就越长。这里
是一个例子：
tempfile=S(mktemp /tmp/foobar.$S.XXXXXXXXXX)
这里创建了一个临时文件，并把临时文件的名字赋值给变量tempfile。因为模板
中的“X”字符会被随机字母和数字代替。所以最终的文件名（在这个例子中，文件
名也包含了特殊参数$S的展开值，进程的PID）可能像这样：
/tmp/foobar.6593.UOZuvM6654
对于那些由普通用户操作执行的脚本，避免使用/tmp目录，而是在用户家目录
下为临时文件创建一个目录，通过像这样的一行代码：
500
---
## Page 502
{/ -d SHOME/tmp // // mkdir $HOME/tmp
37.3异步执行
有时候需要同时执行多个任务。我们已经知道现在所有的操作系统若不是多用户的但至少是多
任务的。脚本也可以构建成多任务处理的模式。
通常这涉及到启动一个脚本，依次，启动一个或多个子脚本来执行额外的任务，而父脚本继
续运行。然而，当一系列脚本以这种方式运行时，要保持父子脚本之间协调工作，会有一些问
题。也就是说，若父脚本或子脚本依赖于另一方，并且一个脚本必须等待另一个脚本结束任务
之后，才能完成它自己的任务，这应该怎么办？
bash有一个内置命令，能帮助管理诸如此类的异步执行的任务。wait命令导致一个父脚本
暂停运行，直到一个特定的进程（例如，子脚本）运行结束。
37.3.1等待
首先我们将演示一下wait命令的用法。为此，我们需要两个脚本，一个父脚本：
#1/bin/bash
# async-parent : Asynchronous execution deno (parent)
echo *Parent: starting...*
echo *Parent: launching child script...*
asyac-child 
pid=s!
echo *Parent: child (PID= $pid) launched."
echo *Parent: continuing.-."
sleep 2
echo *Parent: pausing to vait for child to finish...*
vait $pid
echo *Parent: child is finished. Continuing...*
echo *Parent: parent is done. Exiting."
和一个子脚本：
501
---
## Page 503
#!/bin/bash
# async-child : Asynchronous execution deno (child)
--guruuz st PITo PTTU. ogoo
sleep 5
echo *Child: child is done. Exiting.*
在这个例子中，我们看到该子脚本是非常简单的。真正的操作通过父脚本完成。在父脚本
中，子脚本被启动，并被放置到后台运行。子脚本的进程ID记录在pid变量中，这个变量的
值是S!shell参数的值，它总是包含放到后台执行的最后一个任务的进程ID号。
父脚本继续，然后执行一个以子进程PID为参数的wait命令。这就导致父脚本暂停运行
直到子脚本退出，父脚本随之结束。
当执行后，父子脚本产生如下输出：
[ne@linuxbox -]8 async-parent
Parent: starting...
Parent: launching child script.. -
Parent: chi1d (PID= 6741) launched.
Parent: continuing...
Child: child is running.-
Parent: pausing to vait for child to finish...
Child: child is done. Exiting-
Parent: child is finished. Continuing...
Parent: parent is done. Exiting.
37.4命名管道
在大多数类似Unix的操作系统中，有可能创建一种特殊类型的文件，叫做命名管道。命名管
道用来在两个进程之间建立连接，也可以像其它类型的文件一样使用。虽然它们不是那么流行，
但是它们值得我们去了解。
有一种常见的编程架构，叫做客户端-服务器，它可以利用像命名管道这样的通信方式，也
可以使用其它类型的进程间通信方式，比如网络连接。
最为广泛使用的客户端-服务器系统类型当然是一个web浏览器与一个web服务器之间进
行通信。web浏览器作为客户端，向服务器发出请求，服务器响应请求，并把对应的网页发送
502
---
## Page 504
给浏览器。
命名管道的行为类似于文件，但实际上形成了先入先出（FIFO）的缓冲。和普通（未命令
的）管道一样，数据从一端进入，然后从另一端出现。通过命名管道，有可能像这样设置一些
东西：
process1 > nased_pipe
和
process2 < nased_pipe
表现出来就像这样：
process1 I process2
37.4.1设置一个命名管道
首先，我们必须创建一个命名管道。使用mkfifo命令能够创建命名管道：
[adtdogtgus[-xoqxnuroou]
[ne@linuxbox -]$ 1s -1 pipe1
prv-r--r-- 1 me
me
0 2009-07-17 06:41 pipe1
这里我们使用mkfifo创建了一个名为pipel的命名管道。使用ls命令，我们查看这个文件，
看到位于属性字段的第一个字母是“p”，表明它是一个命名管道。
37.4.2使用命名管道
一个终端中，我们输入一个简单命令，并把命令的输出重定向到命名管道：
503
---
## Page 505
[odtd<[- s s[- xoqxmuou]
我们按下Eanter按键之后，命令将会挂起。这是因为在管道的另一端没有任何对象来接收
数据。这种现象被称为管道阻塞。一旦我们绑定一个进程到管道的另一端，该进程开始从管道
中读取输入的时候，管道阻塞现象就不存在了。使用第二个终端窗口，我们输入这个命令：
[ne@linuxbox -]$ cat < pipe1
然后产自第一个终端窗口的目录列表出现在第二个终端中，并作为来自cat命令的输出。在
第一个终端窗口中的ls命令一旦它不再阻塞，会成功地结束。
37.5总结
嗯，我们已经完成了我们的旅程。现在剩下的唯一要做的事就是练习，练习，再练习。纵然在
我们的长途跋涉中，我们涉及了很多命令，但是就命令行而言，我们只是触及了它的表面。仍
留有成千上万的命令行程序，需要去发现和享受。开始挖掘/usr/bin目录吧，你将会看到！
37.6拓展阅读
·bash手册也的EXPANSION部分包含了一小部分进程替换的内容：
·《高级Bash脚本指南》也有对进程替换的讨论：
http://tldp.org/LDP/abs/html/process-sub.html
·《Linux杂志》有两篇关于命名管道的好文章。第一篇，源于1997年9月：
http://www.linuxjournal.com/article/2156
·和第二篇，源于2009年3月：
http:/www.linuxjournal.com/content/using-named-pipes-fifos-bash
504
---