        uint16 tech_mod_id;//
        union *msg_sig_p{ //offset 0x10
            struct msgrq_sig *msgq_p;//msgr reg type 1,4G及以后使用的mailbox消息传递系统
            struct rexq_sig *rexq_p;//msgr reg type 2,兼容2G/3G时代使用的Rex IPC消息传递系统
        }
        struct msgrq *msgrq_p;//offset 0x14 ,if reg type 1    
        struct msgr_client_obj *msgr_client_obj_ptr;//offset 0x30
    }
    struct msgr_client_obj{//msgr_client结构体
         unsigned int msgr_client_reg_type;//1-> msgrq aka mailbox,2->rex_q,接受消息的方式
         unsigned int register_umid_counts;//offset 8 ,消息接受器注册的umid的总数
         unsigned int total_reged_recv_signal_counts;//offset 0x0c,注册的接受消息的signal的个数
         union sig_recv_obj{
           msgrq_sig  *msgrq_signal_obj;// offset 0x10 msgrq_sig type,4/5G未来的主流类型
           rexq_sig *rex_signal_obj;//offset 0x10  rexq_sig type ,这个主要是为了兼容之前2/3G的系统的数据结构
         }     
         unsigned int task_recv_signal_set_mask;//offset 0x14 ,注册的接受消息的signal号的掩码
         uint32 err_counts;//offset 0x18
         unsigned int recvd_signal_id;//offset 0x1c,当前接受到的signal id,msgr_client_reg_type为1
         struct msgrq *recvd_msgrq_ptr;//offset 0x20,当前接受消息承载的msgrq对象,msgr_client_reg_type为1
         struct msgrq *msgrq_first_entry;// offset 0x24,接受msgrq消息链表结构指针,msgr_client_reg_type为1
         unsigned int total_msgrq_counts;//offset 0x28, 可以接受msgrq消息的总数,通过可以task_recv_signal_set_mask来确定,msgr_client_reg_type为1
     }
     struct msgrq_sig{
        uint32 sig_ready_flag;//must be 1
        struct sig_def{
            uint32 signal_id_for_recv;//offset 8
            uint32 signal_reged_wait_mask;//offset 0xc
            void * kernel_msg_queue;
            unsigned int attribute;
        };
     }
     struct rexq_sig{ //size 0x1c, 兼容2/3G系统的数据结构
         utcb *msgr_client_utcb_ptr;//offset 0  任务接受消息使用的utcb标识
         uint32 msgr_client_signal_id;//offset 4 接受消息使用的signal id
         msg_queue *msgr_out_msg_q;//offset 0x8
         msg_queue *rex_msg_in_q;//offset 0xc
         uint16 msg_data_q_used_size;//offset 0x10
         uint16 rexq_id;//offset 0x12
         uint16 msg_data_q_size;//offset 0x14
     }
      struct msg_data_q{
             struct msg_data_q *prev_q;
             struct msg_data_q *next_q;
             char data[msg_data_q_size-8];
         }
     struct msg_queue{
        struct msg_data_q *headp;
        struct msg_data_q *tailp;
        uint32 total_q_counts;
     }
     struct msgrq{
        void *msg_recv_buf_header;//offset 0
        void *msg_recv_end_buf;//offset 4
        char msgrq_name[16];//offset 0x10
        int msgrq_recvd_seq;//ofset 0x18
        unsigned int reged_recv_signal_id_mask;//offset 0x1c,可供接受消息signal的掩码
        void *msgr_buf_remain_ptr;//offset 0x20,可供接受消息的剩余空间起始地址
        void *msgr_recv_buf;//offset 0x24,当前接受到消息的buf地址
        uint32 msgr_buf_remain_size;//offset 0x28
        unsigned int total_msg_recv_buf_size;//offset 0x30
        int8 is_buf_in_use;//offset 0x70 ,0-> in use, 1-> not in use
        uint32 recvd_msg_blocks;//offset 0x58 ,收到的消息次数总和
        struct msgrq *next_msgrq;//offset 0x74
     }
为了更方便的理解上述的数据结构的关系与操作算法，画了一张简单的图来加深该消息系统的理解。
通过以上算法和数据结构，可以很方便的完成UMID与tech_mod_id的消息路由的注册，消息发送等操作。
需要说明的一点就是一个tech_mod_id可能会关联多个msgr_client，所以msgr_client_id就成了消息传递的唯一标识，通过msgr_client_id得到全局的msgr_client_desc的结构定义，该结构体里面包含接受消息的任务utcb和接受消息的signal
id，这里通过tech_mod_id 0xf19对应的MM（Mobility Management）任务进行举例。
我在一个实时运行的MDM9607系统上面，描绘出所有UMID和tech_mod_id之间的消息路由情况，由于实在太大，
可以在https://github.com/vessial/baseband/blob/master/umid_pro.svg 进行查看。
### 消息状态机（State Machine）
高通基带系统里面的消息状态机，是实现3GPP定义功能最重要的组成部分，消息状态机在移动通信系统里面扮演着非常重要的角色，也是多模移动通信系统的核心，3GPP在定义的多个移动通信技术的分层协议栈时，不同的通信技术模式之间切换，会通过状态机来维护相应的分层逻辑的状态和可操作功能，接下来将重要介绍高通基带系统使用的状态机数据结构以及相关算法，本文将研究主要流4G
LTE和5G NR系统上使用的第二代状态机消息系统，老的第一代状态机系统不在这里介绍了。
    struct sm_state_instance{ //eg ,size 0x1c
        struct sm_obj *sm;//状态机对象定义
        unsigned int current_state_id;//状态机当前所处的状态id
        unsigned int recvd_umid_in_sm_entity_seq;//offset 8, 状态机当前收到的umid所在状态机umid列表中的序列号
        unsigned int instance_id;// 状态机实例编号
        uint8 sm_state_lock;//offset 0x11 0->state unlock,1-> state lock 状态机锁的状态
        void *stm_idle_buf;//offset 0x14 状态机操作可能需要的buf空间
        unsigned int debug_code;//offset 0x18 状态机调试码
    }
    struct sm_obj{ //状态机的定义结构
        struct msgr_stm_obj *stm;
        unsigned char *stm_obj_name; //状态机的名称，例如LTE_RRC_SIB_SM
        unsigned int stm_obj_name_hash; //状态机名称的hash值
        unsigned int stm_inst_id;//stm instance id ，状态机的实例编号，状态机可能存在多个实例，通过这个编号来区别不同的状态机实体
    }
    struct msgr_stm_obj {
        int instance_counts; //该状态机支持的实例个数
        int state_cnts; //该状态机的状态数量
        struct state_status_def *state_def;//状态机每个不同状态的定义的数据结构,size state_cnts*0x10
        int umid_cnts;//状态机注册的可接受umid总数
        struct umid_msg_list *umid_msg_def;//存储umid和umid描述信息的指针,size umid_cnts*8
        struct umid_msg_states_func_cb_list *umid_in_state_cb;//存储着所有umid对应每个状态的回调操作函数
        void *cb_func1;// stm enter //offset 0x18 ,进入该状态机的回调函数
        void *cb_func2;// stm exit  //offset 0x1c ,退出该状态机的回调函数
        void *cb_func3;// stm error //offset 0x20 ,状态机出错的回调函数
        void *cb_func4; //stm debug //offset  0x24 ,状态机调试的回调函数
        unsigned int  init_state_id; // default 0 ,状态机初始默认状态id
    }
    struct umid_msg_states_func_cb_list {//状态机在接受到相应的umid后的原语操作回调函数
            void *umid_msg_in_states_1_cb_list[umid_cnts];
            void *umid_msg_in_states_2_cb_list[umid_cnts];
            void *umid_msg_in_states_3_cb_list[umid_cnts];
            ...
            void *umid_msg_in_states_state_cnts_cb_list[umid_cnts];
        }
    struct state_status_def{//每个状态的定义
        unsigned char *state_name; //状态名称，eg,active/inactive etc
        void *cb_func1; //state enter //状态机进入该状态的回调函数
        void *cb_func2; //state exit  //状态机退出该状态的回调函数
        void *cb_func3; //state debug ?//可能是调试函数
    }
    struct umid_msg_list{//状态机可接受的umid消息定义
        unsigned char *umid_msg_name; //umid对应的描述名称
        unsigned int umid;            //umid
    }
    关键API描述
    stm_instance_activate(struct sm_state_instance *sm_st_inst,uint32 inst_id,uint32 initial_state_id);//初始化状态机实例
    stm_instance_process_input(uint32 state_id,struct sm_state_instance *sm_st_inst,uint32 sm_inst_id,uint32 umid_input,void *stm_payload_ptr);//对状态机接受到的umid和数据进行原语操作
我从MDM9607固件里面提取的详细的状态机信息可以在https://github.com/vessial/baseband/blob/master/lte_sm.log
进行查看。
3GPP定义的L3层的RRC(Radio Resource Control)的状态机是最为复杂的，高通在实现4G
LTE的RRC时使用了大量的状态机进行功能管理。 MDM9607 4G LTE RRC状态机类型如下:
state name: LTE_RRC_CSG_ASF_SM  
state name: LTE_RRC_DT_SM //  
state name: LTE_RRC_IRAT_TO_G_MGR_SM  
state name: LTE_RRC_LLC_SM  
state name: LTE_RRC_CAPABILITIES_SM  
state name: LTE_RRC_IRAT_FROM_1X_MGR_SM  
state name: LTE_RRC_SEC_SM //sim认证和密钥协商管理相关的状态机  
state name: LTE_RRC_CRP_SM  
state name: LTE_RRC_IRAT_FROM_DO_MGR_SM //负责从CDMA-EVDO切换到LTE的管理状态机  
state name: LTE_RRC_IRAT_FROM_TDS_MGR_SM //负责从TDSCDMA切换到LTE的状态机  
state name: LTE_RRC_PAGING_SM //寻呼管理的状态机  
state name: LTE_RRC_CONFIG_SM  
state name: LTE_RRC_MISC_SM  
state name: LTE_RRC_MEAS_SM  
state name: LTE_RRC_CEP_SM  
state name: LTE_RRC_IRAT_TO_1X_MGR_SM  
state name: LTE_RRC_IRAT_FROM_W_MGR_SM  
state name: LTE_RRC_MDT_SM  
state name: LTE_RRC_IRAT_TO_DO_MGR_SM  
state name: LTE_RRC_CONTROLLER_SM //关键的LTE的控制状态机，控制服务的停止和开启  
state name: LTE_RRC_IRAT_TO_TDS_MGR_SM  
state name: LTE_RRC_IRAT_TO_W_MGR_SM //从LTE切换到WCDMA的管理状态机  
state name: LTE_RRC_EMP_SM  
state name: LTE_RRC_MH_SM  
state name: LTE_RRC_UEINFO_SM //UE信息管理的状态机  
state name: LTE_RRC_SIB_SM //系统信息块的管理状态机  
state name: LTE_RRC_PLMN_SEARCH_SM //搜索网络使用的状态机  
state name: LTE_RRC_IRAT_FROM_G_MGR_SM //从GSM切换到LTE的状态机  
state name: LTE_RRC_CSP_SM //cell search plmn状态机  
state name: LTE_RRC_ESMGR_SM // EMBMS管理状态机  
state name: LTE_RRC_CRE_SM
我们拿LTE_RRC_PAGING_SM状态机定义作例子与之对应的数据结构作解析
    LTE_RRC_PAGING_SM addr 0xd10b35e0
         state machine name: LTE_RRC_PAGING_SM inst_cnts 1 total states 3  total umid 10
         state name: INITIAL state enter 0xd0b923a8 state exit 0xd0b923c8 state debug 0x0
         state name: IDLE_CAMPED state enter 0xd0b923e0 state exit 0xd0b92400 state debug 0x0
         state name: CONNECTED state enter 0xd0b92418 state exit 0xd0b92450 state debug 0x0
    0x040d140c   LTE_RRC_CAMPED_INDI
    0x040d0207   LTE_RRC_DRX_INFO_REQ
    0x040d0206   LTE_RRC_SIM_UPDATE_REQ
    0x040d0401   LTE_RRC_SERVICE_IND
    0x040d0710   LTE_RRC_PAGING_DLM
    0x040d1405   LTE_RRC_CONNECTED_INDI
    0x040d022a   LTE_RRC_MTC_CFG_REQ