title:SeCReT: Secure Channel between Rich Execution Environment and Trusted
Execution Environment
author:Jin Soo Jang and
Sunjune Kong and
Minsu Kim and
Daegyeong Kim and
Brent ByungHoon Kang
SeCReT: Secure Channel between Rich Execution
Environment and Trusted Execution Environment
Jinsoo Jang, Sunjune Kong∗, Minsu Kim, Daegyeong Kim, Brent Byunghoon Kang
Graduate School of Information Security
Korea Advanced Institute of Science and Technology
{jisjang, sunjune.kong, pshskms, daegyeong.kim, brentkang}@kaist.ac.kr
Abstract—ARM TrustZone, which provides a Trusted Exe-
cution Environment (TEE), normally plays a role in keeping
security-sensitive resources safe. However, to properly control
access to the resources, it is not enough to just isolate them
from the Rich Execution Environment (REE). In addition to the
isolation, secure communication should be guaranteed between
security-critical resources in the TEE and legitimate REE pro-
cesses that are permitted to use them. Even though there is a
TEE security solution — namely, a kernel-integrity monitor —
it aims to protect the REE kernel’s static regions, not to secure
communication between the REE and TEE.
We propose SeCReT to ameliorate this problem. SeCReT
is a framework that builds a secure channel between the REE
and TEE by enabling REE processes to use session keys in the
REE that is regarded as unsafe region. SeCReT provides the
session key to a requestor process only when the requestor’s code
and control ﬂow integrity are veriﬁed. To prevent the key from
being exposed to an attacker who already compromised the REE
kernel, SeCReT ﬂushes the key from the memory every time the
processor switches into kernel mode.
In this paper, we present the design and implementation
of SeCReT to show how it protects the key in the REE. Our
prototype is implemented on Arndale board, which offers a
Cortex-A15 dual-core processor with TrustZone as its security
extension. We performed a security analysis by using a kernel
rootkit and also ran LMBench microbenchmark to evaluate the
performance overhead imposed by SeCReT.
I.
INTRODUCTION
A Trusted Execution Environment (TEE) that is isolated
from a Rich Execution Environment (REE) aims to protect
assets such as crypto keys and user credentials. As an ex-
ample of a TEE for embedded devices, ARM TrustZone
has been used to execute security-critical services [7], [9].
TrustZone’s resources are physically isolated from the REE,
such that attackers in the REE cannot access them directly.
Any direct access from the REE to TrustZone’s memory
region is restricted by a hardware access-control mechanism
∗Co-ﬁrst author. Also, an employee of SAMSUNG ELECTRONICS (sun-
PI:EMAIL).
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’15, 8-11 February 2015, San Diego, CA, USA
Copyright 2015 Internet Society, ISBN 1-891562-38-X
http://dx.doi.org/10.14722/ndss.2015.23189
(e.g., TZASC) [5], which guarantees the conﬁdentiality of the
resources it protects.
However, the current design of TrustZone’s architecture
does not authenticate the access to the resources in TrustZone.
To access the resources in TrustZone, a legitimate process
in the REE uses a communication channel between the REE
and TrustZone. The channel is created with an REE process
that synchronously invokes the speciﬁc instruction with the
arguments written on domain-shared memory that is allocated
in the REE. The legitimate REE process can send a request
to (and get a response from) TrustZone through the channel.
Unfortunately, the channel is vulnerable to an attacker with the
REE’s kernel privilege who attempts to access the resources in
TrustZone. Such an attacker can create a malicious process that
continuously sends requests with crafted arguments to discover
the vulnerabilities of the resources in TrustZone.
To the best of our knowledge, no message-protection
mechanism exists in TrustZone. Thus,
the attacker could
easily perform a man-in-the-middle attack to manipulate the
messages transferred through the channel. Some security ana-
lysts performed a simple fuzzing test, exploiting the insecure
communication channel, against a PlayReady — a TrustZone-
based DRM service — on a Samsung Galaxy S3 phone to
demonstrate such an attack “in the wild” [10]. The Motorola
phone’s bootloader was unlocked by sending a crafted message
through the insecure channel to exploit the vulnerability of
TrustZone’s kernel [2], [3]. The assets in TrustZone, such as
DRM and mobile-payment services, are closely related to the
monetary interest. Thus, failing to protect them can lead to
the potentially severe economic consequences, which not only
affect the owner of the device, but also the manufacturer of
devices and the service provider in TrustZone; the importance
of enhancing the security of TrustZone cannot be overempha-
sized.
To minimize the attack surface and to protect the resources
in TrustZone, we propose the following security requirements.
First, access to the resources in TrustZone should be restricted
to those on the access control
list (ACL) maintained by
TrustZone. The ACL contains a list of REE processes that
are permitted to access TrustZone’s resources. Second, the
messages transferred through the channel should be signed for
secure communication. To this end, a session key for signing
the messages should be created with a trusted anchor to protect
against attackers in the REE.
To satisfy these requirements, we propose SeCReT — a
framework for building a secure channel between the REE
and TrustZone. SeCReT creates a session key to sign the mes-
sages transferred during inter-domain communication. With the
signed messages, the process in the REE can communicate
with TrustZone securely. Because the session key is symmet-
rically assigned for both the REE and TrustZone, SeCReT
protects the key in the REE that is regarded as an unsafe region.
SeCReT veriﬁes every access to the memory page that
contains the key in the REE. SeCReT’s veriﬁcation mechanism
ensures that only predeﬁned and legitimate user processes can
read the key. To prevent an attacker from directly reading the
memory page containing the key value, SeCReT ﬂushes the
page and shadows the register values every time the processor
mode switches to kernel. However, an attacker might also
manipulate the user-process’ control ﬂow to read the key value
and copy it to an unmonitored memory region. SeCReT limits
this kind of attack by verifying the registers that contain critical
values such as the return-address. SeCReT performs this
register veriﬁcation whenever the process switches back and
forth between user and kernel mode. To minimize performance
degradation, these key-protection mechanisms are activated
only when the process that is assigned with a session key
exists in the REE.
We developed a prototype of SeCReT on Arndale board
[6] that provides an ARM processor integrating TrustZone.
We ran Linux 3.9.1 as the REE OS and assumed that active
monitoring was running on TrustZone [14], [19] to protect the
REE kernel’s static region, such as the code and exception
vector. To implement SeCReT, approximately 140 LoC for
the REE’s kernel code and 900 LoC for TrustZone’s monitor
code were added. To evaluate the prototype, we performed a
security analysis by using a kernel rootkit that snapshots the
REE’s speciﬁc memory page to exﬁltrate the session key. We
measured the performance degradation for the entire system
when SeCReT’s key protection mechanism is activated. The
speciﬁc overhead induced by the access control to the page
that contains the session key was also evaluated.
SeCReT is similar to [16], [17], [20], [29] in that it protects
security-critical resources. However, SeCReT capitalizes on
existing hardware components rather than software stacks.
Previous works utilized hypervisors and compiler techniques.
TrustZone does not maintain additional page tables, such as the
extended page tables (EPT) of the hypervisor [16], [20]. More-
over, it does not provide the instruction-level introspection
that the compiler-based approach does [17]. The lack of these
features leads to difﬁculties in deploying the security functions
in TrustZone. However, it is worth noting that encryption is
not necessarily required to prevent attackers from reading the
security-critical part of the user process, provided that the
critical data and code are properly classiﬁed and located in
TrustZone. Furthermore, TIMA, an active monitoring system
that protects the kernel’s static region, is already available
in TrustZone [14], [27], [30]. To protect trampoline code on
the REE kernel — part of SeCReT’s implementation — we
assume that TrustZone-based active monitoring (e.g., TIMA) is
available.
In summary, SeCReT makes the following contributions:
•
This is the ﬁrst work that generates a secure channel
to reinforce the access control of the resources in
TrustZone. We propose comprehensive steps designed
to protect the session key that is used to sign the
messages transferred between the REE and TrustZone.
• We provide a technique that enables TrustZone to pro-
tect the speciﬁc memory area from the compromised
kernel in the REE. To this end, SeCReT makes the
best use of an existing hardware component without
adopting additional software stacks such as hypervisor.
We believe SeCReT can easily coordinate with already
deployed TrustZone-based security solutions such as
TIMA.
• We introduce an interface for user processes to com-
municate with TrustZone, which prevents the inter-
vention of an attacker even with kernel privileges.
With the proposed interface, we can extend the usage
of TrustZone more ﬂexibly, not
limited to simply
providing a TEE.
The next section reviews ARM TrustZone and TrustZone-
based active monitoring, constituting the trusted computing
base (TCB) for SeCReT. Section III describes the attack
models and assumptions. Section IV presents the design for
SeCReT, which is comprised of trampoline code in the REE
and access-control modules in TrustZone. Section V explains
the details regarding the implementation of SeCReT on the
ARM architecture. Section VI details the security analysis
and performance evaluation of SeCReT. Section VII discusses
the remaining issues pertaining to SeCReT, and Section VIII
examines related work. We summarize and conclude in Sec-
tion IX.
II. BACKGROUND
SeCReT is a framework to build a secure communication
channel between the REE and TrustZone. We implemented
SeCReT based on the assumption that the REE kernel’s static
region and the inserted code in the REE’s kernel-code area are
protected. We believe this is a reasonable assumption because
TrustZone-based active monitoring systems, such as TIMA,
are already available today. In this section, we provide the
background for ARM TrustZone and TrustZone-based active
monitoring.
A. ARM Trustzone
ARM TrustZone is a hardware-based security extension
to processors, which separates the system logically into two
domains:
the Rich Execution Environment (REE) and the
Trusted Execution Environment (TEE). Each domain has
banked registers and memory to run the domain-dedicated OS
and software. Security-critical services, such as E-Ticket, Bring
Your Own Device (BYOD), and Digital Rights Management
(DRM), can be executed in the TEE. Processes in the REE
place the arguments in domain-shared memory and invoke a
secure-monitor call (SMC) to trigger one of the services in
the TEE. The domain-shared memory is allocated physically
in the REE’s memory region. However, any process that runs
in the TEE can access it by simply mapping the REE’s memory
address to a page table maintained in the TEE. This is possible
because the ARM processor’s architectural design accords the
highest privilege to the TEE.
The security extension to the ARM processor provides a
monitor mode that manages the switches between the two
2
TABLE I.
EXAMPLE OF SECURITY-SENSITIVE INSTRUCTIONS AND THE SMC
Operation
Size of Operation (Byte)
Description
MCR p15, 0, , c1, c0, 0
MCR p15, 0, , c2, c0, 0
SMC #
4
4
4
Write to control register
Write to page table base register
SMC with 4bit immediate value
domains. In most designs,
the code that runs in monitor
mode ensures that the state for each domain is saved safely
and restored correctly after every domain switch. The Non-
Secure (NS) bit from the Secure Conﬁguration Register (SCR)
indicates the current context of the domain. That is, if the NS
bit is set, the context is in the REE. Otherwise, it is in the TEE.
To switch domains, the monitor code changes the value of the
NS bit after saving the context for the “from domain”, and
then restores the context for the “to domain.” There are two
ways to enter monitor mode from the REE: an SMC instruction
can be explicitly invoked, guaranteeing synchronous entry into
monitor mode; or, the control register can be set to enter
monitor mode asynchronously with each occurrence of an
interrupt or an external abort. In our prototype for SeCReT,
we used only an SMC instruction to synchronously invoke the
SeCReT code deployed in monitor mode.
The Translation Table Base Register (TTBR) contains the
address for the page-table base address that is required to
translate the address from virtual to physical. The TTBR is
banked for each domain, so the monitor code uses the TTBR
in the TEE. However, the monitor code can access any address
in the REE by constructing a map for the address in the REE
for the page table in the TEE. Because the TTBR is unique
for each process, it was adopted in the implementation of
SeCReT. The details regarding the TTBR’s usage are described
in Section IV.
B. TrustZone-based Active Monitoring
TrustZone-based active monitoring [14], [19], such as
TIMA, protects the kernel’s static region in the REE. To
prevent the direct modiﬁcation of kernel code and static data,
active monitoring sets write-protect (WP) bits from the page
descriptors for pages that contain the objects to be protected.
Active monitoring not only write-protects the code and static
data, such as system call-tables and exception vectors, but
page tables as well. Therefore, any update to the page table
causes a data-abort exception. This exception is brought to
TrustZone through the inserted SMC instructions on the ex-
ception handlers. The active-monitoring agent for TrustZone
veriﬁes the exception. If the root cause of the exception is a
legitimate update to the page table, the agent emulates it. In
other words, the page-table update for the REE is available
only in TrustZone, provided that active monitoring is running.
Attackers can exploit privileged instructions that disable the
MMU or update the page-table base register. Active monitoring
replaces all of these privileged instructions with an SMC such
that any execution of security-sensitive operations is veriﬁed
and emulated in TrustZone. As can be seen in Table I, the
size of the security-sensitive instructions and the SMC are
equivalent to four bytes. Thus, replacing all of the security-
sensitive instructions is feasible. In addition to replacing the
instructions, active monitoring ensures that newly allocated
pages are set with Privileged Execute Never (PXN) bits by
default. As a result, any attempt
to run security-sensitive
instructions on the newly allocated page causes an exception
that is also brought to TrustZone. All such enforcements from
active monitoring guarantee that the REE kernel’s static region
remains immutable.
III. ATTACK MODEL AND ASSUMPTIONS
A. Trust Base of SeCReT
The prototype of SeCReT is implemented on ARM-based
SoC hardware with security extension. We assume that com-
mercially available security features such as Secure Boot [12]
and active monitoring are already activated as a base-line
defense against attacks. Therefore, only the authorized OS and
applications for both the REE and TEE are loaded during the
startup process. Because the presence of a malicious manufac-
turer is not a consideration for our attack model, intentionally
implanted vulnerabilities or malwares are not assumed to be
loaded. During runtime, the kernel’s static region in the REE
is protected by active monitoring in the TEE. We also assume
that a list of REE processes permitted to access TEE resources
is predeﬁned and safely maintained in the TEE. Furthermore,
all valuable resources that could be the target of attacks are
properly classiﬁed and stored in the TEE.
B. The Weakness of Communication Channel for TrustZone
When an REE process employs resources from the TEE,
a communication channel is necessary for the transmission of
messages between the two domains. The channel is regarded
simply as the domain-shared memory that can be accessed
from both domains. Although the shared memory is allocated