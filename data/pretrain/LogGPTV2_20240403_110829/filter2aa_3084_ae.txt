TTL
(DNS
Response)
Time to Live (TTL) of the Resource Record (RR); a 32-bit integer in seconds; primarily used by
resolvers when caching RRs; describes how long to cache RR before discarded.
dns.resp.ttl
QTYPE
A two-octet code which speciﬁes type of query; The values include all codes valid for a TYPE
ﬁeld, together with more general codes which can match more than one type of RR; used in
resource records to distinguish types such as A, AAAA, NS, CNAME.
dns.qry.type
dns.qry.type == 1
A – IPv4 for Host Address
dns.aaaa
AAAA – IPv6 Address
dns.cname
Canonical Name Record type
dns.ns
Name Server Record type
dns.mx.mail_exchange
Mail Exchange Record type
Al-mashhadi et al. (2021), PeerJ Comput. Sci., DOI 10.7717/peerj-cs.640
23/34
The ﬁrst feature is the average randomness in queried domain names (F1), calculated
using Shannon entropy, and as described in Section “Materials & Methods”, the queried
domains are aggregated according to the source IP address (src_IP) every 5 s. Then, a
python script is used to compute the enriched features, including the average entropy
(avg_domain_ent) as per Eq. (2).
To calculate the second enriched feature (F2), several Wireshark ﬁlters are used in the
process. The successful response (dns.sec.resp) is extracted using (dns.ﬂags.rcode == 0)
ﬁlter; the number of DNS requests (dns.req.num) is extracted using the (dns.ﬂags.response
== 0) ﬁlter; and both (dns.sec.resp) and (dns.req.num) are aggregated for each 5-second
period using (src_IP). The ratio of successful response is calculated using Eq. (3) where the
aggregated successful response is divided by the aggregated number of requests.
For the third enriched feature (F3), the DNS query packet is extracted using (dns.ﬂags.
response == 0) ﬁlter every 5 s. The entropy of the DNS query is calculated using Eq. (4).
For the fourth enriched feature (F4), the resolved DNS records number is extracted using
(dns.qry) ﬁlter. The result is calculated every 5 s using Eq. (5).
For the ﬁfth feature (F5), the value of TTL response is extracted using (dns.resp.ttl)
ﬁlter; then, the average response TTL is calculated using Eq. (6).
The rest of the features from F6 to F10 are calculated by following the same methods of
using Wireshark ﬁlters, as shown in Table 8. The calculated DNS features are prepared as
input for the next stage and stored in a CSV ﬁle. It is then considered as a labelled training
dataset with only new DNS features. Table 9 shows the ﬁnal number of dataset records
after performing the ﬂow aggregation.
Design of rule-based detection stage
In this stage, the Weka tool is used to extract botnet-based DNS detection ruleset using
both PART and JRip classiﬁers. Initially, the enriched training dataset is the input for both
PART and JRip classiﬁers. Then, to properly assess the predictive performance and
overcome any bias in this process, the k-fold cross-validation training technique is used
with the value of k set to 10 to build and test the model (Luo et al., 2017). Figure 14
illustrates the rules extraction process in this stage. Appendices A1, A2 and A3, provide in
details the extracted rules for each used classiﬁer.
RESULTS
The three extracted models are evaluated using two different benchmark datasets (NIMS
and CTU13) to measure the detection accuracy and false-positive rate, as shown in Eqs.
(7)–(10). These evaluation metrics are computed by the parameters of the confusion
Table 9 Total number of dataset instances.
Dataset
Instances
Attack
Normal
NIMS-based dataset
44,577
100
Mixed dataset
44,577
625
Al-mashhadi et al. (2021), PeerJ Comput. Sci., DOI 10.7717/peerj-cs.640
24/34
matrix, as stated in Fig. 15. Many researchers adopted these evaluation metrics in their
work (Soltanaghaei & Kharrazi, 2015; Kwon et al., 2016; Alieyan, 2018; Shi & Sun, 2020).
Detection accuracy ¼
TP þ TN
TP þ TN þ FP þ FN
(7)
False Positives rate ¼
FP
FP þ TN
(8)
Precision ¼
TP
TP þ FN
(9)
F1 score ¼
2TP
ð2TP þ FP þ FN
Þ
(10)
Precision (proportion of correctly reported anomalies) and Recall (share of correctly
reported anomalies compared to the total number of anomalies), Recall is another option
Figure 15 Evaluation metrics.
Full-size
DOI: 10.7717/peerj-cs.640/ﬁg-15
Figure 14 Rules extraction process.
Full-size
DOI: 10.7717/peerj-cs.640/ﬁg-14
Al-mashhadi et al. (2021), PeerJ Comput. Sci., DOI 10.7717/peerj-cs.640
25/34
which calculated implicitly using the F-measure. F-measure (F1) is a function that
represents the relationship between Precision and Recall; a higher F-measure indicates a
more accurate classiﬁcation output.
Furthermore, to select the best detection model for the DNS-based botnet detection
approach, the extracted rules for each classiﬁer are separately evaluated using the cross-
validation technique. The model with the highest detection accuracy was selected. The
cross-validation experiments were conducted using a mixed dataset and (NIMS) dataset.
Table 10 presents the result of the extracted rules and models and model complexity for
each dataset.
Model complexity can be measured using various criteria, including memory
consumption, time, and the number of the detection rules extracted using learning
algorithms. Two complexity criteria are used in this work: (i) the estimated training time,
which depends on the research platform, and (ii) the complexity of the model based on the
number of extracted detection rules.
We can notice from Table 10 that the maximum time required to build the ﬁnal model
is 6.03 s. This short time results from a ﬂow-based analysis that reduced the trafﬁc to DNS
trafﬁc only where the packets are aggregated every 5 s.
Furthermore, the results for the mixed dataset show that the PART classiﬁer extracted
rule model has a 99.95% accuracy rate and a 3.84% false-positive rate, which outperformed
the JRip classiﬁer. Moreover, the proposed hybrid model achieved even better detection
accuracy at 99.96% with only a 1.6% FP rate, which surpassed the other extracted models.
In contrast, the F1 score and precision were the same in value.
As for the NIMS-based dataset results, the PART-extracted model also outperformed
the JRip-extracted model’s accuracy rate. Similarly, the proposed hybrid model has a
99.97% accuracy rate and a 5% FP rate, which is better than PART and JRip extracted
models.
The FP rate for the NIMS-based dataset was higher compared to the result of the mixed
dataset. As mentioned in the previous section, the NIMS-based dataset contains fewer
records of normal trafﬁc instances, leading to a biased detection rule. Consequently, the
result shows a higher FP rate than the mixed dataset, which contains a higher number of
normal trafﬁc instances. Hence, having a higher percentage of normal instances in a
Table 10 The results of the proposed approach.
Datsaets
Algorithms
Accuracy%
Precision
F1 score
FP rate%
Time Complexity (sec)
Rules complexity
MIXED
JRip
99.87
99.94
99.931
4.34
5.23
10
PART
99.9
99.95
99.949
3.84
0.8
22
Hybrid (JRip+PART)
99.96
99.97
99.977
1.6
6.03
32
NIMS
JRip
99.94
99.97
99.967
13
1.34
5
PART
99.95
99.97
99.974
11
0.66
10
Hybrid (JRip+PART)
99.97
99.98
99.988
5
2
32
Al-mashhadi et al. (2021), PeerJ Comput. Sci., DOI 10.7717/peerj-cs.640
26/34
training dataset is imperative for machine learning classiﬁer training to develop more
accurate extracted detection rules with a low FP rate.
Furthermore, the high detection accuracy rate is due to the evaluation of the detection
model using a 10-fold cross-validation testing method where the testing data is the same as
in trained data. The detection accuracy rate could be reduced if the detection model
evaluated using a real-world or supplied dataset. In addition, the data pre-processing,
which is the ﬁrst stage of the proposed approach, has contributed to the enhancing of the
detection accuracy
Since high accuracy and low FP rates are essential for botnet detection, the evaluation
results for both datasets guarantee the suitability of the proposed hybrid rule model to
detect DNS-based botnet with the best accuracy and FP rate of the mixed dataset.
Result comparison
Haddadi et al. (2014) proposed an approach for botnet detection and tested its
performance against NIMS dataset (Haddadi et al., 2014). Later research conducted by the
same researchers (Haddadi et al., 2014) used two methods during the pre-processing stage:
(1) without using hypertext transfer protocol (HTTP) ﬁlters; and (2) using HTTP ﬁlters.
The ﬁrst method yielded an 87.5% botnet detection accuracy, while the second method
obtained 91.5% accuracy. However, since our proposed approach was not using HTTP
ﬁlters, we only compared our results with the ﬁrst test case (Haddadi et al., 2014). Table 11
shows the comparison results.
Like our methodology, Deepbot (Shi & Sun, 2020) also used a hybrid model. It utilised
RNN and LSTM algorithms to extract hybrid models for botnet trafﬁc classiﬁcation.
However, despite extracting only 11 DNS features compared to 35 network trafﬁc features
by Shi & Sun (2020), our study obtained a better result (99.96% vs. 99.36%) with a higher
F1 score of 99.97% vs. 98.4%. Table 12 shows the comparison results.
The proposed new enriched DNS features computed with the aid of information theory
contributed to a higher accuracy rate. However, as discussed earlier, the low number of
Table 11 Comparison of proposed approach with Haddadi el al. (2014).
Dataset
Proposed approach
Haddadi et al. (2014)
Accuracy
FP Rate
Accuracy
FP Rate
NIMS
99.97%
5%
87.5%
13.25%
MIXED
99.96%
1.6%
–
–
Table 12 Comparison of proposed approach with deepbot (Shi & Sun, 2020).
Proposed approach
Deepbot (Shi & Sun, 2020)
Accuracy
F1
Accuracy
F1
99.96%
99.97%
99.36%
98.4%
Al-mashhadi et al. (2021), PeerJ Comput. Sci., DOI 10.7717/peerj-cs.640
27/34
normal instances led to an FP rate of 5% for the NIMS dataset. Thus, to reduce the FP rate,
the study used a mixed dataset that comprised a higher percentage of normal instances and
successfully achieved a lower FP rate (1.6%).
CONCLUSION
Nowadays, botnets are more diverse, resilient, widespread, and utilised in many cyber
attacks. Therefore, there is a pressing need for a better botnet detection method. This study
presents a hybrid rule-based approach for detecting DNS-based botnet. New features are
proposed and used to form new rules. A total of 32 rules extracted using PART and JRip
machine learning algorithms are used to detect DNS-based botnets in the datasets. The
performance of the proposed approach was evaluated using two benchmark datasets
(NIMS and CTU13). The experimental results show that the detection accuracy of the
proposed approach achieved 99.97% and 99.96% for NIMS and mixed datasets,
respectively. Meanwhile, the FP rates are 5% and 1.6% for NIMS and mixed datasets,
respectively. The comparison results show that our proposed approach outperformed
other existing approaches.
Finally, this research opens avenues for future research in the following aspects: (i)
adapting the proposed rules to detect blockchain-based DNS botnets, (ii) hybridising the
resulted rules with other approaches, such as the signature-based approach, could improve
DNS-based botnet detection accuracy further, (iii) investigating and study the impact of
encrypted DNS trafﬁc, such as DoH (DNS-over-HTTPS) and DoT (DNS-over-TLS), on
the proposed DNS-based botnet detection approach, and (iv) scaling behaviour analysis to
better understand the applicability of the proposed approach in the real world.
ADDITIONAL INFORMATION AND DECLARATIONS
Funding
The authors received no funding for this work.