Attribute Support. Data-only attacks are hard to mit-
igate in practice. To give developers an efﬁcient way to
protect sensitive data like cryptographic keys at source
code level, we added a IMIX attribute which can be used
to annotate C/C++ variables which should be allocated
in isolated pages. All instructions accessing those anno-
tated variables will use the IMIX IR instructions instead
of the regular ones. LLVM’s annotate attribute allows
arbitrary annotations to be deﬁned, so we only needed to
provide the logic needed to process our attribute. We
implemented this as an LLVM optimization pass that re-
places regular variable allocations with indexed slots in
a IMIX protected safe region (one per compilation mod-
ule), and changes all accessors accordingly.
Modiﬁcations to x86 Back End.
In the back end, we
added code needed to process sload and sstore instruc-
tions. In LLVM, the process of lowering IR instructions
to machine code is two-staged. First, the FastEmit mech-
anism is used. It consists of transformation rules explic-
itly coded in C++ that are too complex to be processed
using regular expressions. These are mainly platform-
speciﬁc optimizations and workarounds. The mechanism
can be used to either generate machine code directly, or
to assign a rule that should be applied in the next stage.
In the second stage, LLVM applies rule-based lower-
ing using pattern matching. The IR instruction and its
operands are matched against string patterns in LLVM’s
TableGen deﬁnitions, which deﬁne rules to lower the IR
to the platform-speciﬁc machine code. We modiﬁed both
stages of the lowering process, similarly to how load and
store are handled.
5.4 Case Study: CPI
To evaluate the impact of our lightweight memory
isolation technique to the performance, we ported Code-
Pointer Integrity (CPI) by Kuznetsov et al. [38] to use
IMIX. CPI uses a safe region in memory to guarantee
integrity of code pointers and prevent code-reuse attacks.
USENIX Association
27th USENIX Security Symposium    89
All code pointers, pointers to pointers, and so on, are
moved to the safe region, so that memory corruption
vulnerabilities cannot be exploited to overwrite them.
Return addresses are protected using a shadow stack.
In contrast to its x86-32 implementation that leverages
segmentation, CPI relies on hiding for x86-64 to protect
the safe region. CPI places the safe region at a random
address and stores this address in a segment, which
is selected using the segment register %gs. During
compilation, CPI’s optimization pass moves every code
pointer and additional metadata about bounds to the safe
region. In order to access the safe region, CPI provides
accessors that use mov instructions with a %gs segment
override, which access the safe region using %gs as the
base address and an offset. These accessors are provided
by a compiler runtime extension which is linked late in
compilation process. Evans et al. show that this CPI
implementation is vulnerable, since the location of the
safe region can be brute-forced [22].
We replaced data hiding with IMIX as the memory iso-
lation technique used to prevent unintended accesses to
CPI’s safe region (including the shadow stack). First, we
changed CPI’s memory allocation function to not only
allocate the safe region, but also set the IMIX protec-
tion ﬂag. Second, we modiﬁed the compiler runtime,
which provides access to the safe region, to make use of
our smov instruction. Speciﬁcally, we changed the safe
region functions to access memory directly via smov
instructions instead of using register-offset addressing.
This increases security of CPI dramatically. Since IMIX
provides deterministic protection of the safe region, we
do not need to prevent spilling of the safe region base ad-
dress (stored in %gs), which IMIX makes CPI leakage
resilient. Thus, knowing or brute-forcing the memory lo-
cation brings no beneﬁt any more, and prevents attacks
like “Missing the Point(er)” by Evans et al. [22].
6 Security Analysis
The main objective of IMIX is to provide in-process
memory isolation for data in order to make it accessi-
ble only by trusted code. Hence, the goal of an attacker
is to access the isolated data. As IMIX is a hardware ex-
tension, an attacker cannot directly bypass it, i.e., use a
regular memory access instruction to access the isolated
memory. Thus, the attacker relies on creating or reusing
trusted code, or manipulating the data ﬂow to pass mali-
cious values to the trusted code, or access to the conﬁgu-
ration interface of IMIX.
Attacks on Trusted Code. As mentioned in our adver-
sary model, IMIX assumes mitigations preventing the
attacker from injecting new code [3], or reusing existing
code [7, 50, 52, 54]. This prevents attackers from inject-
ing smov instructions that are able to access the isolated
data, or reusing trusted code with unchecked arguments,
or exploiting unaligned instructions. This assumption is
fulﬁlled by existing mitigations: the strict enforcement of
W⊕X [44, 48] prevents the attacker from marking data
as code, or changing existing code. Mitigations, such as
Control-ﬂow Integrity (CFI) [1, 45, 59] and Code-Pointer
Integrity (CPI) [38] prevent the attacker from reusing
trusted code.
Attacks on Data Flow.
In general, attacks on the data
ﬂow [12, 19, 23, 28, 29] are hard to prevent since it would
require the ability to distinguish between benign and ma-
licious input data, which generally depends on the con-
text. Therefore, the trusted code must either ensure that
its input data originates from isolated pages protected by
IMIX, or sanitize the data before using it. The former
can be ensured by using the smov instruction to access
the input data as IMIX’s design ensures that the smov
instruction cannot access unprotected memory. The lat-
ter heavily depends on the ability of the defense devel-
oper to correctly block inputs that would allow the at-
tacker to manipulate the data within the protected mem-
ory in a malicious way: IMIX merely provides a primi-
tive to isolate security critical data. Hence, if the devel-
oper fails to sanitize the input data in the trusted code, the
code is vulnerable to data-ﬂow attacks independently of
whether it leverages IMIX or not. In practice, however,
sanitizing inputs correctly requires limited complexity,
e.g., in the case of a shadow stack [18] or CPI’s safe re-
gion [38].
Attacks on Conﬁguration. A common way to bypass
mitigations is to disable them. For example, to bypass
W⊕X, real-world exploits leverage code-reuse attacks to
invoke a system call to mark a data buffer as code before
executing it.
There are two ways for an attacker to re-conﬁgure IMIX:
1) leveraging the interface of the operating system to
change memory permissions, or 2) manipulating page ta-
ble entries.
For the ﬁrst case, we assume that the attacker is able
to manipulate the arguments of a benign system call to
change memory permissions (mprotect() on Linux).
Our design of IMIX’s operating system support prevents
the attacker from re-mapping protected memory to un-
protected memory. Further, before IMIX memory is un-
mapped, the kernel sets the memory to zero to avoid any
form of information disclosure attacks. Similarly, the
kernel initializes memory, which is re-mapped as IMIX
memory, with zeros to prevent the attacker from initializ-
ing memory with malicious values, mapping it as IMIX
90    27th USENIX Security Symposium
USENIX Association
Figure 3: Performance overhead of CPI with segmentation-based memory hiding, and with IMIX.
memory, and then passing it to trusted code. Therefore,
the developer must be aware that the attacker is poten-
tially able to pass a pointer into a zero-ﬁlled page as an
input value to trusted code.
For the second case, we assume that the attacker is able
to exploit a memory-corruption vulnerability in the ker-
nel. While the focus of this paper is on how user-mode
defenses can leverage IMIX, our design allows kernel-
based defenses to leverage IMIX as well. Hence, to mit-
igate data-only attacks against the page table [19] exist-
ing defenses [17, 25] can leverage IMIX to ensure that
only trusted code can access the page tables.
7 Performance Evaluation
To evaluate the performance of our approach, we ported
the original implementation of CPI by Kuznetsov et
al. [38] to leverage IMIX to isolate the safe region
and applied it to the SPEC CPU2006 benchmark suite.
Speciﬁcally, we executed all C/C++ benchmarks with the
reference workload to measure the performance over-
heads. The SPEC CPU2006 benchmarking suite is com-
prised of CPU-intensive benchmarks that frequently ac-
cess memory, and hence, are well suited to evaluate
our instrumentation. We performed our evaluation us-
ing Ubuntu 14.04 LTS with Linux Kernel version 3.19.0
on an Intel Core i7-6700 CPU in 64-bit mode running at
3.40 GHz with dynamic voltage and frequency scaling
disabled, and 32 GB RAM.
Baseline. First, we measured the performance impact
of the original CPI implementation, which we obtained
from the project website [39]. Despite efforts, we were
unable to execute the CPI-instrumented version of perl-
bench and povray. Using the geometric mean of posi-
tive overheads, we measured a performance overhead of
4.24% (arithmetic mean of 9.05%, Kuznetsov et al. [38]
measured an average performance overhead of 8.4%).
We measured a maximum overhead of 61.49% (gcc),
while a maximum of 44.2% (for omnetpp) was reported
in the original paper.
CPI with IMIX. Next, we evaluated the performance
overhead of IMIX. As hardware emulation turned out to
be too slow for executing the SPEC CPU2006 bench-
marking tests, we instead evaluated IMIX by replac-
ing smov instructions with mov instructions that access
memory directly. We argue that this reﬂects the actual
costs for smov instructions, because the IMIX permis-
sion check is part of the paging permission check.
During our performance evaluation we made the inter-
esting observation that our IMIX instrumentation comes
with a higher overhead than the baseline.
In total,
we measured a performance overhead of 14.70% for
IMIX, which is an increase of 1.94% in comparison
to segmentation-based CPI. In addition, we observed a
maximum overhead of 73.27%, compared to a maximum
of 61.49% for segmentation-based CPI.
We further investigated this counter-intuitive result.
First, we veriﬁed with the help of a custom micro-
benchmarks that the access time to a memory buffer
through a segment register is consistently faster than
just dereferencing a general purpose register.
Interest-
ingly, it makes no difference whether the base address
of the segment is set to 0 or the base address of the
buffer. Second, we found that the faster access through
segment registers is, at least partially, related to the L2
hardware prefetcher: when we disable it, memory ac-
cesses through a general purpose register are faster than
segment-based accesses (difference in geometric mean is
0.47% in SPEC CPU2006).
USENIX Association
27th USENIX Security Symposium    91
-100102030405060708090Performance Overhead (%)CP+SegCPI+IMIXTechnique
SFI
Segmentation
Memory Hiding
Paging / EPT
Intel MPK
Intel SGX
Intel MPX
Intel CET
SMOV
Policy-based Isolation
Hardware Enforced
Fast Interleaved Access
Fails Safe

only for x86-32

only single-threaded applications



only for Shadow Stack




























Table 1: Comparison of memory-isolation techniques. Legend: Policy-based Isolation means that the memory protec-
tion itself cannot be bypassed with an arbitrary memory read-write primitive. Hardware Enforced is self-explanatory.
Fast Interleaved Access refers to the ability to alternately access protected and unprotected memory without additional
performance impact. Fails Safe means that regular (un-instrumented) memory instructions cannot access the protected
memory.
CPI with IMIX (Segment-based Addressing). Sim-
ilarly to a regular mov instruction, the IMIX instruc-
tion allows to access memory through a segment regis-
ter. Unsurprisingly, by adjusting our IMIX-based CPI
instrumentation to use segment register-based addressing
we achieve 0% overhead over CPI. We further compare
IMIX to other memory protection approaches, namely
Intel MPK and Intel MPX, in Section 9.
8 Discussion
On the Feasibility of Our ISA Extension. One of the
main values of any defense in the ﬁeld of system security
is practicality. Therefore, it comes with no surprise that
existing research often sacriﬁces security in favor of per-
formance [45, 53, 67], and retroﬁt existing hardware fea-
tures [6, 16, 18, 41, 58, 63] instead of introducing more
suitable ones. The reason is that in practice it is unlikely
that hardware vendors are going to change their hardware
design and risk compatibility issues with legacy software
in order to strengthen the security and increase the per-
formance of a speciﬁc mitigation.
However, we argue that this does not apply to IMIX
for two reasons:
1) IMIX enables strong and ef-
ﬁcient
in-process isolation of data which is an in-
evitable requirement of many memory-corruption de-
fenses. 2) IMIX can be implemented by slightly mod-
ifying Intel’s proposal, Control-ﬂow Enforcement Tech-
nology (CET) [33].
As we discussed in Section 2, memory-corruption de-
fenses often reduce the attack surface from potentially
the whole application’s memory to the memory that is
used by the defense itself. With IMIX we provide a
strong and efﬁcient hardware primitive to enforce the
protection of this data which is mitigation-agnostic. By
providing a primitive, which is essential to memory-
corruption defenses, rather than implementing a speciﬁc
defense in hardware [33], vendors avoid the risk of a later
bypass [50].
We believe that IMIX can be adopted in real world with
comparatively low additional effort. With CET [33]
Intel provides a specialization of IMIX. Similar to