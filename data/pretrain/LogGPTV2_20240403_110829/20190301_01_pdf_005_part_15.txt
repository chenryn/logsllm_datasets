### 2.3.57 DROP TYPE

**Name**
DROP TYPE -- Remove a type definition

**Synopsis**
```sql
DROP TYPE [ BODY ] name;
```

**Description**
The `DROP TYPE` command removes the specified type definition. To execute this command, you must be a superuser or the owner of the type.

- The optional `BODY` qualifier applies only to object type definitions and not to collection or composite types. If `BODY` is specified, only the object type body is removed, while the object type specification remains intact.
- If `BODY` is omitted, both the object type specification and body are removed.
- The type will not be deleted if there are other database objects dependent on it.

**Parameters**
- `name`: The name of the type definition to remove.

**Examples**
- Drop an object type `addr_obj_typ`:
  ```sql
  DROP TYPE addr_obj_typ;
  ```
- Drop a nested table type `budget_tbl_typ`:
  ```sql
  DROP TYPE budget_tbl_typ;
  ```

**See Also**
- `CREATE TYPE`
- `CREATE TYPE BODY`

---

### 2.3.58 DROP USER

**Name**
DROP USER -- Remove a database user account

**Synopsis**
```sql
DROP USER name [ CASCADE ];
```

**Description**
The `DROP USER` command removes the specified user account. To drop a superuser, you must be a superuser yourself. To drop non-superusers, you must have the `CREATEROLE` privilege.

- A user cannot be removed if they are still referenced in any database within the cluster. An error will be raised if this is the case.
- Before dropping the user, you must drop all objects owned by the user or reassign their ownership, and revoke any privileges granted to the user.
- It is not necessary to remove role memberships involving the user; `DROP USER` automatically revokes any memberships of the target user in other roles and of other roles in the target user. The other roles are not dropped or otherwise affected.
- If the only objects owned by the user belong within a schema that is owned by the user and has the same name as the user, the `CASCADE` option can be used. In this case, the issuer of the `DROP USER name CASCADE` command must be a superuser, and the named user, the schema, and all objects within the schema will be deleted.

**Parameters**
- `name`: The name of the user to remove.
- `CASCADE`: If specified, also drops the schema owned by, and with the same name as the user (and all objects owned by the user belonging to the schema) as long as no other dependencies on the user or the schema exist.

**Examples**
- To drop a user account who owns no objects and has not been granted any privileges:
  ```sql
  DROP USER john;
  ```
- To drop a user account, `john`, who has not been granted any privileges and does not own any objects outside of a schema named `john` that is owned by user `john`:
  ```sql
  DROP USER john CASCADE;
  ```

**See Also**
- `CREATE USER`
- `ALTER USER`

---

### 2.3.59 DROP VIEW

**Name**
DROP VIEW -- Remove a view

**Synopsis**
```sql
DROP VIEW name;
```

**Description**
The `DROP VIEW` command removes an existing view. To execute this command, you must be a database superuser or the owner of the view. The named view will not be deleted if other objects depend on it (such as a view of a view).

- The form of the `DROP VIEW` command compatible with Oracle does not support a `CASCADE` clause. To drop a view and its dependencies, use the PostgreSQL-compatible form of the `DROP VIEW` command. For more information, see the PostgreSQL core documentation at:
  - [PostgreSQL Documentation](https://www.postgresql.org/docs/11/static/sql-dropview.html)

**Parameters**
- `name`: The name (optionally schema-qualified) of the view to remove.

**Examples**
- This command will remove the view called `dept_30`:
  ```sql
  DROP VIEW dept_30;
  ```

**See Also**
- `CREATE VIEW`

---

### 2.3.60 EXEC

**Name**
EXEC

**Synopsis**
```sql
EXEC function_name ['('[argument_list]')'];
```

**Description**
The `EXEC` statement is used to execute a function.

**Parameters**
- `function_name`: The (optionally schema-qualified) function name.
- `argument_list`: A comma-separated list of arguments required by the function. Each argument corresponds to a formal parameter expected by the function, which can be an `IN`, `OUT`, or `INOUT` parameter.

**Examples**
- The `EXEC` statement may take one of several forms, depending on the arguments required by the function:
  ```sql
  EXEC update_balance;
  EXEC update_balance();
  EXEC update_balance(1, 2, 3);
  ```

---

### 2.3.61 GRANT

**Name**
GRANT -- Define access privileges

**Synopsis**
```sql
GRANT { { SELECT | INSERT | UPDATE | DELETE | REFERENCES } [,...] | ALL [ PRIVILEGES ] }
ON tablename
TO { username | groupname | PUBLIC } [, ...]
[ WITH GRANT OPTION ];

GRANT { { INSERT | UPDATE | REFERENCES } (column [, ...]) } [, ...]
ON tablename
TO { username | groupname | PUBLIC } [, ...]
[ WITH GRANT OPTION ];

GRANT { SELECT | ALL [ PRIVILEGES ] }
ON sequencename
TO { username | groupname | PUBLIC } [, ...]
[ WITH GRANT OPTION ];

GRANT { EXECUTE | ALL [ PRIVILEGES ] }
ON FUNCTION progname ( [ [ argmode ] [ argname ] argtype ] [, ...] )
TO { username | groupname | PUBLIC } [, ...]
[ WITH GRANT OPTION ];

GRANT { EXECUTE | ALL [ PRIVILEGES ] }
ON PROCEDURE progname [ ( [ [ argmode ] [ argname ] argtype ] [, ...] ) ]
TO { username | groupname | PUBLIC } [, ...]
[ WITH GRANT OPTION ];

GRANT { EXECUTE | ALL [ PRIVILEGES ] }
ON PACKAGE packagename
TO { username | groupname | PUBLIC } [, ...]
[ WITH GRANT OPTION ];

GRANT role [, ...]
TO { username | groupname | PUBLIC } [, ...]
[ WITH ADMIN OPTION ];

GRANT { CONNECT | RESOURCE | DBA } [, ...]
TO { username | groupname } [, ...]
[ WITH ADMIN OPTION ];

GRANT CREATE [ PUBLIC ] DATABASE LINK
TO { username | groupname };

GRANT DROP PUBLIC DATABASE LINK
TO { username | groupgroup };

GRANT EXEMPT ACCESS POLICY
TO { username | groupname };
```

**Description**
The `GRANT` command has three basic variants: one that grants privileges on a database object (table, view, sequence, or program), one that grants membership in a role, and one that grants system privileges. These variants are similar in many ways but are different enough to be described separately.

- **Roles**: In Advanced Server, the concept of users and groups has been unified into a single type of entity called a role. A user is a role with the `LOGIN` attribute, allowing the role to create a session and connect to an application. A group is a role without the `LOGIN` attribute, meaning the role cannot create a session or connect to an application.
- **Role Hierarchy**: A role may be a member of one or more other roles, forming a general multi-level hierarchy of roles. User names and group names share the same namespace, so it is not necessary to distinguish whether a grantee is a user or a group in the `GRANT` command.

**2.3.62 GRANT on Database Objects**

This variant of the `GRANT` command gives specific privileges on a database object to a role. These privileges are added to those already granted, if any.

- The keyword `PUBLIC` indicates that the privileges are to be granted to all roles, including those that may be created later. `PUBLIC` can be thought of as an implicitly defined group that always includes all roles. Any particular role will have the sum of privileges granted directly to it, privileges granted to any role it is a member of, and privileges granted to `PUBLIC`.
- If the `WITH GRANT OPTION` is specified, the recipient of the privilege may in turn grant it to others. Without the `WITH GRANT OPTION`, the recipient cannot do that. Grant options cannot be granted to `PUBLIC`.
- There is no need to grant privileges to the owner of an object (usually the user that created it), as the owner has all privileges by default. The right to drop an object or alter its definition in any way is inherent in the owner and cannot be granted or revoked.
- Depending on the type of object, the initial default privileges may include granting some privileges to `PUBLIC`. The default is no public access for tables and `EXECUTE` privilege for functions, procedures, and packages. The object owner may revoke these privileges.
- The possible privileges are:
  - `SELECT`: Allows `SELECT` from any column of the specified table, view, or sequence. For sequences, this privilege also allows the use of the `currval` function.
  - `INSERT`: Allows `INSERT` of a new row into the specified table.
  - `UPDATE`: Allows `UPDATE` of a column of the specified table. `SELECT ... FOR UPDATE` also requires this privilege (besides the `SELECT` privilege).
  - `DELETE`: Allows `DELETE` of a row from the specified table.
  - `REFERENCES`: To create a foreign key constraint, it is necessary to have this privilege on both the referencing and referenced tables.
  - `EXECUTE`: Allows the use of the specified package, procedure, or function. When applied to a package, allows the use of all of the package's public procedures, public functions, public variables, records, cursors, and other public objects and object types.
  - `ALL PRIVILEGES`: Grants all of the available privileges at once.

**2.3.63 GRANT on Roles**

This variant of the `GRANT` command grants membership in a role to one or more other roles. Membership in a role is significant because it conveys the privileges granted to a role to each of its members.

- If the `WITH ADMIN OPTION` is specified, the member may in turn grant membership in the role to others and revoke membership in the role as well. Without the `WITH ADMIN OPTION`, ordinary users cannot do that.
- Database superusers can grant or revoke membership in any role to anyone. Roles having the `CREATEROLE` privilege can grant or revoke membership in any role that is not a superuser.
- There are three pre-defined roles:
  - `CONNECT`: Granting the `CONNECT` role is equivalent to giving the grantee the `LOGIN` privilege. The grantor must have the `CREATEROLE` privilege.
  - `RESOURCE`: Granting the `RESOURCE` role is equivalent to granting the `CREATE` and `USAGE` privileges on a schema that has the same name as the grantee. This schema must exist before the grant is given. The grantor must have the privilege to grant `CREATE` or `USAGE` privileges on this schema to the grantee.
  - `DBA`: Granting the `DBA` role is equivalent to making the grantee a superuser. The grantor must be a superuser.

**Notes**
- The `REVOKE` command is used to revoke access privileges.
- When a non-owner of an object attempts to `GRANT` privileges on the object, the command will fail outright if the user has no privileges whatsoever on the object. As long as a privilege is available, the command will proceed, but it will grant only those privileges for which the user has grant options.
- Database superusers can access all objects regardless of object privilege settings. This is comparable to the rights of root in a Unix system. It is unwise to operate as a superuser except when absolutely necessary.
- If a superuser chooses to issue a `GRANT` or `REVOKE` command, the command is performed as though it were issued by the owner of the affected object. In particular, privileges granted via such a command will appear to have been granted by the object owner.
- `GRANT` and `REVOKE` can also be done by a role that is not the owner of the affected object, but is a member of the role that owns the object, or is a member of a role that holds privileges `WITH GRANT OPTION` on the object. In this case, the privileges will be recorded as having been granted by the role that actually owns the object or holds the privileges `WITH GRANT OPTION`.

**Examples**
- Grant `INSERT` privilege to all users on table `emp`:
  ```sql
  GRANT INSERT ON emp TO PUBLIC;
  ```
- Grant all available privileges to user `mary` on view `salesemp`:
  ```sql
  GRANT ALL PRIVILEGES ON salesemp TO mary;
  ```
- Grant membership in role `admins` to user `joe`:
  ```sql
  GRANT admins TO joe;
  ```
- Grant `CONNECT` privilege to user `joe`:
  ```sql
  GRANT CONNECT TO joe;
  ```

**See Also**
- `REVOKE`
- `SET ROLE`

---

### 2.3.64 GRANT on System Privileges

This variant of the `GRANT` command gives a role the ability to perform certain system operations within a database. System privileges relate to the ability to create or delete certain database objects that are not necessarily within the confines of one schema. Only database superusers can grant system privileges.

- **CREATE [PUBLIC] DATABASE LINK**: The `CREATE [PUBLIC] DATABASE LINK` privilege allows the specified role to create a database link. Include the `PUBLIC` keyword to allow the role to create public database links; omit the `PUBLIC` keyword to allow the specified role to create private database links.
- **DROP PUBLIC DATABASE LINK**: The `DROP PUBLIC DATABASE LINK` privilege allows a role to drop a public database link. System privileges are not required to drop a private database link. A private database link may be dropped by the link owner or a database superuser.
- **EXEMPT ACCESS POLICY**: The `EXEMPT ACCESS POLICY` privilege allows a role to execute a SQL command without invoking any policy function that may be associated with the target database object. That is, the role is exempt from all security policies in the database. The `EXEMPT ACCESS POLICY` privilege is not inheritable by membership to a role that has the `EXEMPT ACCESS POLICY` privilege.

**Examples**
- Grant `CREATE PUBLIC DATABASE LINK` privilege to user `joe`:
  ```sql
  GRANT CREATE PUBLIC DATABASE LINK TO joe;
  ```
- Grant `DROP PUBLIC DATABASE LINK` privilege to user `joe`:
  ```sql
  GRANT DROP PUBLIC DATABASE LINK TO joe;
  ```
- Grant the `EXEMPT ACCESS POLICY` privilege to user `joe`:
  ```sql
  GRANT EXEMPT ACCESS POLICY TO joe;
  ```

**Using the ALTER ROLE Command to Assign System Privileges**
The Advanced Server `ALTER ROLE` command also supports syntax that you can use to assign:
- The privilege required to create a public or private database link.
- The privilege required to drop a public database link.
- The `EXEMPT ACCESS POLICY` privilege.

The `ALTER ROLE` syntax is functionally equivalent to the respective commands compatible with Oracle databases.

**See Also**
- `REVOKE`
- `ALTER ROLE`

---

### 2.3.65 INSERT

**Name**
INSERT -- Create new rows in a table

**Synopsis**
```sql
INSERT INTO table[@dblink ] [ ( column [, ...] ) ]
{ VALUES ( { expression | DEFAULT } [, ...] )
[ RETURNING return_expression [, ...]
{ INTO { record | variable [, ...] }
| BULK COLLECT INTO collection [, ...] } ]
| query }
```

**Description**
The `INSERT` command is used to create new rows in a table.