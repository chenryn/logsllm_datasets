our instantiation is already usable in practice and can be efficiently
executed with current, well-established hardware. Details on the
implementation and measurements, as well as ideas for further
optimizations can be found in Section 6.
1.2 Related Work
At first sight, the problem of privacy-preserving point collection
might appear easily solvable using (offline) e-cash: user and ac-
cumulator may execute the e-coin withdrawal protocol to collect
several points. All collected coins may later be redeemed using the
spend protocol (multiple times). However, besides not being very
efficient, because coins typically cannot be aggregated, this also
violates user privacy as in traditional offline e-cash, e.g. [12], with-
drawing e-coins is identifying. This is because the identity of a user
needs to be encoded into an e-coin during withdrawal to enable
double-spending detection. In our system, we initially encode this
identity into the user’s token (aka wallet or piggy bank) which is
used to collect points and not into a point itself.
Even transferable e-cash, e.g. [6], does not achieve our goals. In
such a scheme, the ownership of a coin can be transferred anony-
mously and unlinkably between users multiple times without the
help of the bank. Applied to our scenario, an accumulator could
thus withdraw e-coins, possibly from the issuer acting as bank, and
transfer them anonymously to a user. However, an impossibility
result by Canard and Gouget [13] implies that an adversary imper-
sonating issuer, accumulators, and verifiers would be able to link
a user’s collection and redeeming transactions. Moreover, trans-
ferable e-cash allows users to transfer e-coins arbitrarily among
each other, a property which is undesirable in our scenario as users
would be able to pool their points.
Besides BBA [25], which we already discussed, only [28] ap-
pears to consider a point collection mechanism as a multi-purpose
building block on its own. However, the proposed protocol—called
uCentive—targets a simpler scenario than we do: incentives are
not accumulatable on the user’s side but stored and redeemed indi-
vidually, negative points are not supported, and double-spending
detection is done online rather than offline. BBA+ and uCentive also
differ regarding the use of cryptographic building blocks: uCentive
makes use of anonymous credentials and partially blind signatures.
Moreover, the security and privacy properties of their system are
only informally stated and no proofs are given.
BBA+ shares some aspects with the notion of priced oblivious
transfer (POT). POT was introduced by Aiello et al. [3] as a tool to
protect the privacy of customers buying digital goods. The goal is
to allow a buyer to purchase digital goods from a vendor without
leaking the “what, when and how much”. In the original notion of
POT, a user’s wallet is not possessed by the user itself. In [3] the
vendor manages this information. Consequently, user anonymity
cannot be granted and the system is inherently limited to a single
vendor. Camenisch et al. [11] extended POTs by anonymity of users
and unlinkability of individual transactions which brings it closer to
our framework. Nonetheless, the scheme is still limited to a single
vendor or a system where all vendors share a joint state in an online
Session I3:  Personal PrivacyCCS’17, October 30-November 3, 2017, Dallas, TX, USA1927fashion, whereas our system is an offline system. Moreover, [11]
lacks a rigorous formal treatment and an implementation.
The techniques we use to instantiate BBA+ bear some resem-
blance with P-signatures [8, 24] which have been introduced by
[8] as a tool to construct anonymous credentials. A P-signature
scheme is a two-party scheme between a user and an issuer. The
scheme combines the algorithms of a commitment scheme, a signa-
ture scheme and extends them by some additional zero-knowledge
protocols that allow the user to prove certain statements about the
commitments. More precisely, a user can generate commitments
to messages. He can ask the issuer to sign the original message
inside the commitment using the issuer’s secret key without the
issuer learning this message. Moreover, the user can prove that he
knows a valid signature on the message inside a commitment or
generate two new commitments and prove the equality of their
content. The scheme in [8] builds on weak Boneh-Boyen signatures
[9], Groth-Sahai commitments and Groth-Sahai NIZK proofs [21].
To instantiate a BBA+ scheme, properties beyond that of a P-
signature scheme are needed. To see this, let us try to build a BBA+
scheme from P-signatures. We would like to embed our piggy bank
as a message, encoding the balance, a serial number, a user ID, and
maybe some additional information. This message could then be
blindly signed by the issuer using the P-signature scheme. To collect
some points, the user would generate a fresh commitment to the
message and send it to the accumulator along with a proof showing
that he has a signature on the message inside the commitment. Note
that this step can be done repeatedly using the same message, as P-
signatures do not include a mechanism (double-spending detection)
to prevent a user from showing the same message twice. In fact, such
a mechanism is not required for standard anonymous credentials.
However, in our setting this is necessary as a user could present
an old piggy bank to collect or redeem points and thus get rid
of negative points. Apart from this, there are other shortcomings.
After a user proved that she has a valid piggy bank, it needs to be
updated by the accumulator to add new points. To realize this with
the P-signature scheme, the user would like to update the balance in
the old message accordingly, commit to this updated message and
prove that the two messages (for which the accumulator obtained
commitments) are closely “related” (i.e., only differ wrt. balance
and serial number). However, a P-signature scheme only offers
a protocol for showing that two commitments contain the same
message.
From a technical perspective, in our BBA+ instantiation, com-
mitments rather than messages inside commitments as in [8, 24]
are signed. Thus, in combination with Groth-Sahai NIZK proofs we
make use of F-binding commitments (cf. Section 2.2) rather than
F-unforgeable signatures as in [8].
2 PRELIMINARIES
We make use of the common notation to describe cryptographic
schemes and define their security properties.
2.1 Bilinear Groups and Assumptions
The results of this paper are in the setting of asymmetric bilin-
ear groups. We use the following definition of a bilinear group
generator.
Definition 2.1 (prime-order bilinear group generator). A prime-
order bilinear group generator is a PPT algorithm SetupGrp that on
input of a security parameter 1n outputs a tuple of the form
gp := (G1, G2, GT , e, p, д1, д2) ← SetupGrp(1n )
where G1, G2, GT are descriptions of cyclic groups of prime order
p, log p = Θ(n), д1 is a generator of G1, д2 is a generator of G2,
and e : G1 × G2 → GT is a map (aka pairing) which satisfies the
following properties:
• e is efficiently computable
• Bilinearity: For all a ∈ G1, b ∈ G2, x, y ∈ Zp, we have
e (ax , by ) = e (a, b)xy.
• Non-Degeneracy: e (д1, д2) generates GT .
Our construction relies on the SXDH assumption in bilinear
groups, which essentially asserts that the DDH assumption holds
in both source groups of the bilinear map.
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)Pr
′
b = b
Definition 2.2. We say that the DDH assumption holds with
SetupGrp,i,A (1n )
respect to SetupGrp over Gi if the advantage AdvDDH
defined by
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) gp := (G1, G2, GT , e, p, д1, д2) ← SetupGrp(1n )
2
is a negligible function in n for all PPT algorithms A. We say that
the SXDH assumption holds with respect to SetupGrp if the above
holds for both i = 1 and i = 2.
x, y, z ← Zp; h0 := д
; h1 := дz
i
y
i , hb )
i , д
b′ ← A(1n, gp, дx
 − 1
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
xy
i
; b ← {0, 1}
We also make use of the Co-CDH assumption which is obviously
implied by the SXDH assumption.
(cid:34)
a = дx2
respect to SetupGrp if the advantage AdvCO-CDH
by
Definition 2.3. We say that the Co-CDH assumption holds with
(cid:35)
SetupGrp,A (1n ) defined
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) gp := (G1, G2, GT , e, p, д1, д2) ← SetupGrp(1n )
Pr
x ← Zp; a ← A(1n, gp, дx1 )
is a negligible function in n for all PPT algorithms A.
2.2 Building Blocks
For our semi-generic construction, we draw from Fgp-extractable
non-interactive zero-knowledge (NIZK) proofs, as well as equivocal
homomorphic commitments, digital signatures, and public-key en-
cryption which all need to be compatible with the proof system. In
the following, we describe these building blocks in an informal fash-
ion appropriate to understand the construction. Formal definitions
can be found in the full version [22].
Fgp-extractable NIZKs. Let R be a witness relation for some
NP language L = {x | ∃wit s.t. (x, wit) ∈ R}. Informally speaking, a
zero-knowledge proof scheme is a system that allows a prover P
to convince a verifier V that some x given to V is contained in L
without V learning anything beyond that fact. In a non-interactive
zero-knowledge (NIZK) proof, only one message, the proof π, is
sent from P to V for that purpose.
More precisely, a (group-based) NIZK proof system consists of
the algorithms SetupGrp, SetupPoK, Prove, and Vfy. SetupGrp(1n )
generates public parameters gp given implicitly to all algorithms.
Session I3:  Personal PrivacyCCS’17, October 30-November 3, 2017, Dallas, TX, USA1928The considered language Lgp may depend on gp. SetupPoK(gp)
outputs a common reference string CRS. Prove(CRS, x, wit) outputs
a proof π on input of x ∈ Lgp and a valid witness wit with (x, wit) ∈
R, else Prove outputs ⊥. Vfy(CRS, x, π ) outputs 1 if π is considered
a valid proof for x ∈ Lgp, and 0 otherwise. The proof system is called
perfectly complete if Vfy(CRS, x, π ) always accepts proofs generated
by Prove(CRS, x, wit). It is called perfectly sound if it is impossible
to generate a proof π for x (cid:60) Lgp such that Vfy(CRS, x, π ) = 1.
Moreover, it is called perfectly Fgp-extractable if there exists some
PPT algorithms SetupEPoK and ExtractW such that (1) SetupEPoK
outputs some CRS which is perfectly indistinguishable from a real
CRS as well as a trapdoor tdepok and (2) ExtractW is able to exploit
this trapdoor to extract Fgp(wit) for an NP-witness wit for x ∈ Lgp
from any valid proof π. Perfect Fgp-extractability implies perfect
soundness. Note that if Fgp is the identity function, then the system
is a real proof of knowledge. However, in our case the domain of
Fgp consists of tuples of group elements and exponents e ∈ Zp,
where Fgp maps exponents e to дe1 ∈ G1 or дe2 ∈ G2 (depending
on the context e is used in) and acts as the identity function on
group elements. This is a property of the Groth-Sahai proof system
[18, 21] we have to deal with. Finally, the proof system is called
composable zero-knowledge if there exist PPT algorithms SetupSPoK
and SimProof such that (1) SetupSPoK outputs some CRS which
is computationally indistinguishable from a real CRS as well as a
trapdoor tdspok and (2) SimProof can use this trapdoor to generate
proofs for x (not necessarily in Lgp) without knowing a witness
that look real even if tdspok is known.
Fgp-binding commitments. A commitment scheme allows a
user to commit to a message m and publish the result, called com-
mitment c, in a way that m is hidden from others, but also the
user cannot claim a different m afterwards when he opens c. In an
Fgp-binding commitment scheme one commits to a message m but
opens the commitment using Fgp (m).
More precisely, a non-interactive commitment scheme consists of
the four algorithms SetupGrp, Gen, Com, and Open. SetupGrp(1n )
generates public (group) parameters gp and Gen(gp) creates a pub-
lic common reference string CRS. The parameters gp fix a message
space for the commitment scheme. Let Fgp be a bijective function
on the message space. We call the codomain of Fgp the implicit
message space. Com takes the CRS and a message m as input and
outputs a commitment c as well some decommitment value d. To
verify that a commitment can be opened to a message Open is
used. It takes CRS, c, d, as well as some implicit message SM as
input and returns 1 or 0. We call the scheme correct if Open al-
ways returns 1 on input (c, d ) ← Com(CRS, m) and Fgp(m). A
commitment scheme is called hiding if any PPT adversary A has
negligible advantage to distinguish between the commitments to
two messages chosen by A. It is called Fgp-binding if any PPT ad-
versary has a negligible advantage to find a commitment that can
be opened using two different implicit messages M (cid:44) M′. Moreover,
it is equivocal if, roughly speaking, there is a trapdoor for the CRS
that allows to efficiently open a commitment to any given implicit
message. Finally, the scheme is called additively homomorphic if
commitments c1 to m1 and c2 to m2 with decommitment values d1
and d2, respectively, can efficiently be combined using CAdd(c1, c2),
resulting in a commitment c to m1 + m2 with decommitment value
d ← DAdd(d1, d2).
Digital signatures. A digital signature scheme consists of the
four algorithms SetupGrp, Gen, Sgn, and Vfy. SetupGrp(1n ) gen-
erates public (group) parameters gp. The key generation algorithm
Gen(gp) outputs a secret key sk and a public key pk. The signing
algorithm Sgn outputs a signature σ on input of a message m and
sk. The verification algorithm Vfy decides whether σ is a valid sig-
nature on m given pk, m, and σ. A signature scheme is correct if Vfy
always outputs 1 on input σ ← Sgn(sk, m), pk and m. It is called
EUF-CMA secure if any PPT adversary A given pk and access to
a signature oracle which signs arbitrary messages, has negligible
advantage to compute a signature to a new message.
PKE. A public-key encryption (PKE) scheme consists of the
four algorithms SetupGrp, Gen, Enc, and Dec. SetupGrp(1n ) gen-
erates public (group) parameters gp. The key generation algorithm
Gen(gp) outputs a secret key sk and a public key pk. The encryp-
tion algorithm Enc(pk, m) takes pk and a message m and outputs
a ciphertext c. The decryption algorithm Dec(sk, c) takes sk and c
and outputs a message m or ⊥. For correctness, we want that Dec
always outputs m on input c ← Enc(pk, m). A PKE scheme is called
IND-CPA secure if any PPT adversary A has negligible advantage
to distinguish the ciphertexts of two messages chosen by A.
3 BBA+ DEFINITION
In this section, we introduce BBA+ schemes along with security
and privacy definitions appropriate for a variety of applications.
3.1 High-Level System Description
Let us start with an overview of the different parties involved in a
BBA+ scheme and a high-level description of the algorithms and
protocols they use.
A BBA+ system mainly involves five types of parties: A Trusted
Third Party (TTP), an Issuer, an Accumulator, a Verifier, and a User.
Issuers, accumulators and verifiers are subsumed under the term
operators. In particular, they need to trust each other as the share
the same secret key (see below).
System setup. To setup the system once, we make use of a
Trusted Third Party T (or a number of mutually distrusting parties
doing a multi-party computation). This party computes a common
reference string (CRS), which typically consists of a description
of the underlying algebraic framework used by all algorithms and
protocols as well as certain system-wide public keys. The TTP also
computes a trapdoor which can be used to remove the unlinkabil-
ity of user transactions but which is only needed for definitional
purposes. Of course, we need to assume that this trapdoor is not
given to anyone (e. g., the Issuer, Accumulator, or Verifier). The TTP
could be a (non-governmental) organization trusted by both, Users
to protect their privacy and Issuers, Accumulators, and Verifiers to