  resource "authentik_stage_prompt_field" "password" {
    field_key = "password"
    label     = "Password"
    type      = "password"
    order = 300
    placeholder = "Password"
    placeholder_expression = false
    required = true
  }
  resource "authentik_stage_prompt_field" "password_repeat" {
    field_key = "password_repeat"
    label     = "Password (repeat)"
    type      = "password"
    order = 301
    placeholder = "Password (repeat)"
    placeholder_expression = false
    required = true
  }
  ```
  We had to redefine all the `authentik_stage_prompt_field` because the terraform provider doesn't yet support [the `data` resource of the `authentik_stage_prompt_field`](https://github.com/goauthentik/terraform-provider-authentik/issues/243)
* Bind the User write stage:
  Graphically you would need to:
  * Click on `Bind Stage`
  * Fill the form with the next data:
    * Stage: select `enrollment-invitation-admin-write`
    * Order: 30
  * Click Create
  Or use the next terraform snippet:
  ```terraform
  resource "authentik_flow_stage_binding" "invitation_user_write" {
    target = authentik_flow.enrollment_admin.uuid
    stage  = authentik_stage_user_write.admin_write.id
    order  = 30
  }
  ```
* Bind the email account confirmation stage: 
  Graphically you would need to:
  * Click on `Bind Stage`
  * Fill the form with the next data:
    * Stage: select `email-account-confirmation`
    * Order: 40
  * Click Create
  * Edit the stage and make sure that you have enabled:
    * Activate pending user on success
    * Use global settings
  * Click Update
  Or use the next terraform snippet:
  ```terraform
  resource "authentik_flow_stage_binding" "invitation_account_confirmation" {
    target = authentik_flow.enrollment_admin.uuid
    stage  = authentik_stage_email.account_confirmation.id
    order  = 40
  }
  ```
* Bind the User login stage: This is a builtin stage where the user is asked to log in
  Graphically you would need to:
  * Click on `Bind Stage`
  * Fill the form with the next data:
    * Stage: select `default-source-enrollment-login`
    * Order: 50
  * Click Create
  Or use the next terraform snippet:
  ```terraform
  resource "authentik_flow_stage_binding" "invitation_login" {
    target = authentik_flow.enrollment_admin.uuid
    stage  = data.authentik_stage.default_source_enrollment_login.id
    order  = 50
  }
  ```
## [Configure password recovery](https://www.youtube.com/watch?v=NKJkYz0BIlA)
Recovery of password is not enabled by default, to configure it you need to create two new stages:
* An identification stage:
  ```terraform
  data "authentik_source" "built_in" {
    managed = "goauthentik.io/sources/inbuilt"
  }
  resource "authentik_stage_identification" "recovery" {
    name           = "recovery-authentication-identification"
    user_fields    = ["username", "email"]
    sources = [data.authentik_source.built_in.uuid]
    case_insensitive_matching = true
  }
  ```
* An Email recovery stage: 
  ```terraform
  resource "authentik_stage_email" "recovery" {
    name                     = "recovery-email"
    activate_user_on_success = true
    subject                  = "Password Recovery"
    template                 = "email/password_reset.html"
    timeout                  = 10
  }
  ```
* We will reuse two existing stages too:
  ```terraform
  data "authentik_stage" "default_password_change_prompt" {
    name = "default-password-change-prompt"
  }
  data "authentik_stage" "default_password_change_write" {
    name = "default-password-change-write"
  }
  ```
Then we need to create the recovery flow and bind all the stages:
```terraform
resource "authentik_flow" "password_recovery" {
  name        = "Password Recovery"
  title       = "Password Recovery"
  slug        = "password-recovery"
  designation = "recovery"
}
resource "authentik_flow_stage_binding" "recovery_identification" {
  target = authentik_flow.password_recovery.uuid
  stage  = authentik_stage_identification.recovery.id
  order  = 0
}
resource "authentik_flow_stage_binding" "recovery_email" {
  target = authentik_flow.password_recovery.uuid
  stage  = authentik_stage_email.recovery.id
  order  = 10
}
resource "authentik_flow_stage_binding" "recovery_password_change" {
  target = authentik_flow.password_recovery.uuid
  stage  = data.authentik_stage.default_password_change_prompt.id
  order  = 20
}
resource "authentik_flow_stage_binding" "recovery_password_write" {
  target = authentik_flow.password_recovery.uuid
  stage  = data.authentik_stage.default_password_change_write.id
  order  = 30
}
```
Finally we need to enable it in the site's authentication flow. To be able to do change the default flow we'd need to do two manual steps, so to have all the code in terraform we will create a new tenancy for our site and a new authentication flow.
Starting with the authentication flow we need to create the Flow, stages and stage bindings.
```terraform
# -----------
# -- Flows --
# -----------
resource "authentik_flow" "authentication" {
  name        = "Welcome to Authentik!"
  title        = "Welcome to Authentik!"
  slug        = "custom-authentication-flow"
  designation = "authentication"
  authentication = "require_unauthenticated"
  compatibility_mode = false
}
# ------------
# -- Stages --
# ------------
resource "authentik_stage_identification" "authentication" {
  name           = "custom-authentication-identification"
  user_fields    = ["username", "email"]
  password_stage = data.authentik_stage.default_authentication_password.id
  case_insensitive_matching = true
  recovery_flow = authentik_flow.password_recovery.uuid
}
data "authentik_stage" "default_authentication_mfa_validation" {
  name = "default-authentication-mfa-validation"
}
data "authentik_stage" "default_authentication_login" {
  name = "default-authentication-login"
}
data "authentik_stage" "default_authentication_password" {
  name = "default-authentication-password"
}
# -------------------
# -- Stage binding --
# -------------------
resource "authentik_flow_stage_binding" "login_identification" {
  target = authentik_flow.authentication.uuid
  stage  = authentik_stage_identification.authentication.id
  order  = 10
}
resource "authentik_flow_stage_binding" "login_mfa" {
  target = authentik_flow.authentication.uuid
  stage  = data.authentik_stage.default_authentication_mfa_validation.id
  order  = 20
}
resource "authentik_flow_stage_binding" "login_login" {
  target = authentik_flow.authentication.uuid
  stage  = data.authentik_stage.default_authentication_login.id
  order  = 30
}
```
Now we can bind it to the new tenant for our site:
```terraform
# ------------
# -- Tenant --
# ------------
resource "authentik_tenant" "default" {
  domain         = "your-domain.org"
  default        = false
  branding_title = "Authentik"
  branding_logo = "/static/dist/assets/icons/icon_left_brand.svg"
  branding_favicon = "/static/dist/assets/icons/icon.png"
  flow_authentication = authentik_flow.authentication.uuid
  # We need to define id instead of uuid until 
  # https://github.com/goauthentik/terraform-provider-authentik/issues/305
  # is fixed.
  flow_invalidation = data.authentik_flow.default_invalidation_flow.id
  flow_user_settings = data.authentik_flow.default_user_settings_flow.id
  flow_recovery = authentik_flow.password_recovery.uuid
}
# -----------
# -- Flows --
# -----------
data "authentik_flow" "default_invalidation_flow" {
  slug = "default-invalidation-flow"
}
data "authentik_flow" "default_user_settings_flow" {
  slug = "default-user-settings-flow"
}
```
## [Hide and application from a user](https://goauthentik.io/docs/applications#authorization)
Application access can be configured using (Policy) Bindings. Click on an application in the applications list, and select the Policy / Group / User Bindings tab. There you can bind users/groups/policies to grant them access. When nothing is bound, everyone has access. You can use this to grant access to one or multiple users/groups, or dynamically give access using policies.
With terraform you can use `authentik_policy_binding`, for example:
```terraform
resource "authentik_policy_binding" "admin" {
  target = authentik_application.gitea.uuid
  group  = authentik_group.admins.id
  order  = 0
}
```
## [Protect applications that don't have authentication](https://piotrkrzyzek.com/how-to-setup-use-authentik-with-simple-forward-proxy/)
Some applications don't have authentication, for example [prometheus](prometheus.md). You can use Authentik in front of such applications to add the authentication and authorization layer.
Authentik can be used as a (very) simple reverse proxy by using its Provider feature with the regular "Proxy" setting. This let's you wrap authentication around a sub-domain / app where it normally wouldn't have authentication (or not the type of auth that you would specifically want) and then have Authentik handle the proxy forwarding and Auth.
In this mode, there is no domain level nor 'integrated' authentication into your desired app; Authentik becomes both your reverse proxy and auth for this one particular app or (sub) domain. This mode does not forward authentication nor let you log in into any app. It's just acts like an authentication wrapper.
It's best to use a normal reverse proxy out front of Authentik. This adds a second layer of routing to deal with but Authentik is not NGINX or a reverse proxy system, so it does not have that many configuration options. 
We'll use the following fake domains in this example:
- Authentik domain: auth.yourdomain.com
- App domain: app.yourdomain.com
- Nginx: nginx.yourdomain.com
- Authentik's docker conter name: auth_server
The steps are:
- Configure the proxy provider:
  ```terraform
  # ---------------
  # -- Variables --
  # ---------------
  variable "prometheus_url" {
    type        = string
    description = "The url to access the service."
  }
  # ----------
  # -- Data --
  # ----------
  data "authentik_flow" "default-authorization-flow" {
    slug = "default-provider-authorization-implicit-consent"
  }
  # --------------------
  # --    Provider    --
  # --------------------
  resource "authentik_provider_proxy" "prometheus" {
    name               = "Prometheus"
    internal_host      = "http://prometheus:9090"
    external_host      = var.prometheus_url
    authorization_flow = data.authentik_flow.default-authorization-flow.id
    internal_host_ssl_validation = false
  }
  ```
- Configure the application:
  ```terraform
  variable "prometheus_icon" {
    type        = string
    description = "The icon shown in the application"
    default     = "/application-icons/prometheus.svg"
  }
  # -----------------------
  # --    Application    --
  # -----------------------
  resource "authentik_application" "prometheus" {
    name              = "Prometheus"
    slug              = "prometheus"
    meta_icon         = var.prometheus_icon
    protocol_provider = authentik_provider_proxy.prometheus.id
    lifecycle {
      ignore_changes = [
        # The terraform provider is continuously changing the attribute even though it's set
        meta_icon,
      ]
    }
  }
  ```
- Edit the default outpost. So far [there is no way to load the default outpost automatically](https://github.com/goauthentik/terraform-provider-authentik/issues/341) in terraform, so you need to import it manually with `terraform import authentik_outpost.default default_outpost_id`. You can get the `default_outpost_id` by going to the Admin interface/Applications/Outposts, open the browser network inspector and click on edit the `authentik Embedded Outpost`, the first request you see will be to an uri similar to `/api/v3/outposts/instances/eabbbc70-e411-48f9-95b6-29bh23ldghwc/`, then your `default_outpost_id` is `eabbbc70-e411-48f9-95b6-29bh23ldghwc`. Then run the next terraform code
  ```terraform
  # ----------------
  # --- Outposts ---
  # ----------------
  resource "authentik_outpost" "default" {
    name = "authentik Embedded Outpost"
    service_connection = authentik_service_connection_docker.local.id 
    protocol_providers = [
      authentik_provider_proxy.prometheus.id
    ]
  }
  # ----------------------------
  # --- Outpost integrations ---
  # ----------------------------
  resource "authentik_service_connection_docker" "local" {
    name  = "Local Docker connection"
    local = true
  }
  ```
## [Use blueprints](https://goauthentik.io/developer-docs/blueprints/)
WARNING: [Use the `terraform` provider instead!!!](#terraform)
Blueprints offer a new way to template, automate and distribute authentik configuration. Blueprints can be used to automatically configure instances, manage config as code without any external tools, and to distribute application configs.
Blueprints are yaml files, whose format is described further in [File structure](https://goauthentik.io/developer-docs/blueprints/v1/structure) and uses [YAML tags](https://goauthentik.io/developer-docs/blueprints/v1/tags) to configure the objects. It can be complicated when you first look at it, reading [this example](https://goauthentik.io/developer-docs/blueprints/v1/example) may help.
Blueprints can be applied in one of two ways:
* As a Blueprint instance, which is a YAML file mounted into the authentik (worker) container. This file is read and applied every time it changes. Multiple instances can be created for a single blueprint file, and instances can be given context key:value attributes to configure the blueprint.
* As a Flow import, which is a YAML file uploaded via the Browser/API. This file is validated and applied directly after being uploaded, but is not further monitored/applied.
The authentik container by default looks for blueprints in `/blueprints`. Underneath this directory, there are a couple default subdirectories:
* `/blueprints/default`: Default blueprints for default flows, tenants, etc
* `/blueprints/example`: Example blueprints for common configurations and flows
* `/blueprints/system`: System blueprints for authentik managed Property mappings, etc
Any additional `.yaml` file in /blueprints will be discovered and automatically instantiated, depending on their labels.
To disable existing blueprints, an empty file can be mounted over the existing blueprint.
File-based blueprints are automatically removed once they become unavailable, however none of the objects created by those blueprints are affected by this.
### [Export blueprints](https://goauthentik.io/developer-docs/blueprints/export)
Exports from either method will contain a (potentially) long list of objects, all with hardcoded primary keys and no ability for templating/instantiation. This is because currently, authentik does not check which primary keys are used where. It is assumed that for most exports, there'll be some manual changes done regardless, to filter out unwanted objects, adjust properties, etc. That's why it may be better to use the [flow export](#flow-export) for the resources you've created rather than the [global export](#global-export).
#### Global export
To migrate existing configurations to blueprints, run `ak export_blueprint` within any authentik Worker container. This will output a blueprint for most currently created objects. Some objects will not be exported as they might have dependencies on other things.
Exported blueprints don't use any of the YAML Tags, they just contain a list of entries as they are in the database.
Note that fields which are write-only (for example, OAuth Provider's Secret Key) will not be added to the blueprint, as the serialisation logic from the API is used for blueprints.
Additionally, default values will be skipped and not added to the blueprint.
#### Flow export
Instead of exporting everything from a single instance, there's also the option to export a single flow with it's attached stages, policies and other objects.
This export can be triggered via the API or the Web UI by clicking the download button in the flow list.
## [Monitorization](https://goauthentik.io/docs/installation/monitoring)
I've skimmed through the prometheus metrics exposed at `:9300/metrics` in the core and they aren't that useful :(
# Troubleshooting
## [I can't log in to authentik](https://goauthentik.io/docs/troubleshooting/login/)
In case you can't login anymore, perhaps due to an incorrectly configured stage or a failed flow import, you can create a recovery key.
To create the key, run the following command:
```bash
docker run --it authentik bash
ak create_recovery_key 1 akadmin
```
This will output a link, that can be used to instantly gain access to authentik as the user specified above. The link is valid for amount of years specified above, in this case, 1 year.
# References
* [Source](https://github.com/goauthentik/authentik)
* [Docs](https://goauthentik.io/docs/)
* [Home](https://goauthentik.io/)
* [Terraform provider docs](https://registry.terraform.io/providers/goauthentik/authentik/latest/docs)
* [Terraform provider source code](https://github.com/goauthentik/terraform-provider-authentik)