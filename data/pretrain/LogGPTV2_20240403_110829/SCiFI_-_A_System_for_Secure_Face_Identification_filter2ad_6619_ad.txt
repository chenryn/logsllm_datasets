the
1. The client sends the homomorphic encryption of each bit
receives
encrypted
j) +pk (1 −pk Epk(wj)) ·pk wi
j.
of the binary representation of w = w0, . . . , w(cid:2)−1.
The
representation
{Epk(w0), . . . , Epk(w(cid:2)−1)}. The following steps are
repeated for each database item wi ∈ {w1, . . . , wN}:
2. For each bit location j the server calculates Epk(ϑj),
where ϑj = wj ⊕ wi
j. The calculation can be done in the
following way (although a more efﬁcient computation
method is described in the text below): Epk(ϑj) =
Epk(wj) ·pk (1 − wi
(cid:2)(cid:2)−1
3. Using the homomorphic properties, the server sums the
results of the previous step and computes Epk(dH ) =
range
{0, 1, . . . , dmax} and is equal to the Hamming distance
between w and wi.
The server chooses a random value ri ∈ F, computes
the value Epk(dH + ri), and sends it to the client. Note
that with overwhelming probability of 1−dmax/|F|, this
addition operation does not involve a modular reduction.
4. The client receives Epk(dH +ri) and decrypts the result.
5. Next, the parties map the result to the appropriate output
protocol where the client
value, by invoking a OTdmax+1
is the receiver and the server is the sender:
Epk(ϑj). The value dH is
in the
0
1
(cid:3)
- The input of the client is (dH +ri) mod (dmax +1).
- The server has inputs X0, . . . , Xdmax, where
if 0 ≤ (j − ri) mod dmax ≤ ti
otherwise
Xj =
1
0
Figure 2: The Fthreshold protocol where the client learns the
output.
Correctness: In Step 3 of the protocol the server com-
putes the value E(dH +ri), where ri was chosen at random.
If ri  ti. The client learns
nothing.