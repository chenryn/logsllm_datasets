某Air客户端0click RCE分析
前⾔
某Air客户端的RCE漏洞曝出来有⼀段时间了，前⼈已经分析了如何利⽤%00截断实现双击
附件即可执⾏exe的效果。[详情⻅附件1] 本⽂就再进⼀步，借助⼀个XSS实现打开邮件即可触
发RCE。
XSS挖掘
翻了⼀下⽂件，发现客户端显示邮件的⻚⾯是⽤HTML写的，客户端调⽤cef渲染HTML。
HTML⽂件在 cmclient\app\template\readMail  ⽬录中，其中 index.html  是⻚⾯内容； 
readMail.html  是邮件正⽂的模板，打开邮件时客户端会依照这个模板⽣成⼀个包含邮件正⽂
的完整html⻚⾯放在 C:\Users\Administrator\AppData\Roaming\Cm\CMClient\temp\mail  ⽬录，通过
iframe包含在⻚⾯中。简单看⼀下代码很容易就能发现两个疑似的XSS漏洞点。
第⼀个点在index.html中，
如果这⾥ mailId  可控的话也许可以使⽤单引号构造⼀个XSS，但是没找到控制mailId的办
法，⽽且这⾥还是需要点击才能触发，满⾜不了预期。
第⼆个点在邮件正⽂中，Air客户端在处理邮件正⽂的时候虽然去掉了   标签以
及 onxxx  的事件，但是通过⼀个换⾏很容易就能绕过
不过这⾥由于正⽂模板中加了很严格的CSP策略，inline的js代码⽆法执⾏，所以这条路也被迫
终⽌。（p.s. ⽹⻚版没有CSP限制，不过同样也没有这个绕过🤡）
本以为这次分析到这⾥就要以失败告终了。多亏了⼤佬提醒，才发现原来邮件正⽂的 
charset  中也有⼀个XSS。 charset  来⾃于模板替换，⽽且位于CSP之前所以不受CSP的影
响。之前⼀⼼想着如果通过不完善的策略绕过CSP，确没想到就在眼⽪底下还有另外⼀个不受
CSP影响的漏洞点。哎，果然是不识庐⼭真⾯⽬，只缘身在此⼭中。
charset变量xss漏洞成因
⼤概分析了⼀下由模板⽂件⽣成⽬标html的的过程:
parse_html 函数主要将模板中的变量都替换为eml中⽂的值，然后调⽤WriteFile写⼊临时⽂
件，这⾥主要跟⼊⼀下  parse_html  函数，此函数有⼀个⼤循环，会对模板中的多处变量都进
⾏替换。
主要看replace_key函数：
调试⼀下，看⼀下到底传⼊的是什么参数。
 第⼆个参数 3E  是html模板开头到  {{CHARSET}}  的⻓度，第三个参数 0B  是 {{CHARSET}}  
的⻓度，第四个参数就是我们 eml中设定的变量值，继续跟会发现。
直接⼏次内存copy，将字符串拼接起来：
接着第⼆次copy：
⾄此发现并没有对 charset的值进⾏任何的过滤，直接拼接到了模板⾥，所以可以逃逸双引号，
产⽣XSS漏洞。
新版本patch分析
最后看⼀下最新版是怎么patch的，找到同样的函数，发现在读取eml⽂件的时候加了这样的⼀
个过滤函数：
如果读取的 charset变量有字符不再这个⽩字符串表中，就直接将 charset变量重置为空，这修
复⽅法太暴⼒了.... 感觉是没办法再搞了。
但是要注意他这个仅仅是对  charset  变量做了⼀次，如果其他地⽅也有可以控制的变量，同
样还是存在xss的可能。  
构造利⽤
有了XSS其实就⽐较容易利⽤了，只需要执⾏js触发打开附件的操作，就可以实现0click 
rce。
由于众所周知的原因PoC暂时不公开，感兴趣的伙伴可以⾃⾏尝试构造⼀波。
知识星球
欢迎⼤家加⼊我的知识星球，和⼀群⼩伙伴⼀起交流学习。