# 重逢——Java安全之反射
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
Java反射可谓是Java安全中的基础中的基础，你可以在各个代码的角落中看到他的身影，既然在江湖上碰见这么多次，那么一定要找机会好好了解一下。对于Java反射的爱恨情仇给我一包烟再给我一瓶酒我可以讲上一天，别的不吹，关于反射我也讲不出花来，也就是总结、整理、思考目前互联网上一些大佬的知识，今天我们先把反射知识捋一捋，希望本文能更好的让你理解和记住反射操作，并在以后的安全研究中能够举一反三熟练运用，为之后rmi、反序列化等知识打下基础。
## 0x01 反射的概念
###  0x1 反射介绍
反射（Reflection） 是 Java 程序开发语言的特征之一，它允许运行中的 Java
程序对自身进行检查，或者说“自审”，并能直接操作程序的内部属性和方法。在 **程序运行时** ，对于 **任意一个类**
，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性。这种 **动态的获取** 信息以及动态调用对象的方法的功能称为
java 的反射机制。
###  0x2 为什么存在反射
其实从官方定义中就能找到其存在的价值，在 **运行时** 获得程序或程序集中 **每一个类型** 的 **成员** 和 **成员的信息，** 从而
**动态的** 创建、修改、调用、获取其属性，而不需要事先知道运行的对象是谁。划重点： **在运行时而不是编译时**
> 在正向开发领域反射最广泛的用途就是开发各种通用框架，比如
  * Spring 框架的 IOC 基于反射创建对象和设置依赖属性。
  * Spring MVC 的请求调用对应方法，也是通过反射。
  * JDBC 的 Class#forName(String className) 方法，也是使用反射。
> 在安全领域反射最广泛的用途就是构造利用链，触发命令执行
  * 反序列化中的利用链构造
  * 动态获取或执行任意类中的属性或方法
  * 动态代理的底层原理是反射技术
  * rmi反序列化也涉及到反射操作
## 0x02 反射深层次理解
为了更好的理解反射，我们向反射深一层次的知识点进发，当然这里不是反射的底层实现原理（我也没写相关的技术点分析），只是帮助你更好的理解反射机制。我们首先要介绍一个概念Class
###  0x1 Class概念
Class是个名字比较特殊的类，这点确定无疑（很容易和class混在一起），我们在JDK中可以看到相关定义，在Java反射中，这个类起到了关键的作用，这是因为Class类中定义了很多
**保存类的信息** 。从定义上来看我们在Java中 **每一个类** 都会有一个 **Class类实例** 与之 **一一对应**
（这种关系属于一对一）。
* * *
有很多小伙伴们经常把Class和class混为一谈，但实际上概念差距很大
**Class类** 是由 **class**
关键字修饰的一个特殊的类，因为class本身是个关键字，我们在定义类的时候都会用到。在这好好掰扯掰扯类、class以及Class的关系。  
 **类(class)** 是一个 **语法层次** 上的概念，可以理解为一个 **抽象概念** ，比如我们通常所说的String类，其实说的是那个
**抽象的字符串类型** 。  
 **实例** 是指根据抽象的class定义在运行时声明的一段内存区间，该内存区间可以按照class的定义进行合法的访问。我们这里的Class
Instance就是一个实例。  
​
我之前画了一个类与Class对应关系图我这里搬过来讲一讲，下图是String类和Class对象的对应关系，可以看出每个类对应的Class
Instance中保存着这个类的相关信息。 **String类不是实例，它是一个class，只是可以用一个Class的实例来描述。**
看到这个图class和Class的关系也就不言而喻了，这种一一对应关系，体现的非常完美。class代表语法概念，Class代表JDK中提供的Class数据结构。
###  0x2 Class在反射中的作用
**Class主要用于反射** ，正是因为该类实例保存了对应类中的 **方法** 和 **属性信息，**
我们的反射调用才能正常进行（我感觉在学反射前先把这块给理清楚），一般反射时进行的操作是获取要反射类的 **Class对象** ，从而获取类型 **元数据**
（metadata），比如字段、属性、构造器、方法等，获取后并调用。
通过上图可以清晰的看出 **类** 和 **对应Class对象**
的关系，我们在反射的时候其实主要运用了a2这个对象。在Class类中定义了很多和反射有关的方法和属性：
    public final class Class implements java.io.Serializable,
                                  GenericDeclaration,
                                  Type,
                                  AnnotatedElement {
    public static Class forName(String className){}
    public Field getField(String name){}
    public Method getMethod(String name, Class... parameterTypes){}
    public Method[] getMethods() throws SecurityException {}
    public Method[] getDeclaredMethods() throws SecurityException {}
    public Constructor getConstructor(Class... parameterTypes){}
    public Field[] getDeclaredFields() throws SecurityException {}
    ......
    }
###  0x3 举例说明其重要性
我们都知道class是在JVM第一次读取到他的类型时，将其加载进内存的，每加载一种class，JVM就为其创建一个Class类型的实例，并关联起来。注意：这里的Class类型是一个名叫Class的class，前面说过。如下所示
    public final class Class {
        private Class() {}
    }
以String类为例，当JVM加载String类时，它首先读取String.class文件到内存，然后，为String类创建一个Class实例并关联起来：
    Class cls = new Class(String);
这个Class实例是JVM内部创建的，如果我们查看JDK源码，可以发现Class类的构造方法是private，只有JVM能创建Class实例，我们自己的Java程序是无法创建Class实例的，并且JVM持有的每个Class实例都指向一个数据类型（class或interface），一个Class实例包含了该class的所有完整信息：
由于JVM为每个加载的class创建了对应的Class实例，并在实例中保存了该class的所有信息，包括
**类名、包名、父类、实现的接口、所有方法、字段**
等，因此，如果获取了某个Class实例，我们就可以通过这个Class实例获取到该实例对应的class的所有信息。
###  0x4 Class实例获取方式
既然类对应的Class对象这么重要那么怎么去获取呢？总结了四种方式以及他们的注意事项，但是在这之前我首先介绍下java中的初始化（在部分获取类Class对象操作的时候会初始化类）。
**1\. 类初始化**
  * 类初始化时机： **类第一次** 加载到内存时会触发 **类初始化** ，并且只进行一次（前提是被同一类加载器加载）
  * 类初始化行为：1、准备阶段虚拟机会给静态变量分配内存并初始化为零。2、初始化阶段执行类构造器（cinit），收集类初始化代码和static{}代码变成cinit函数，并执行。
**2\. Class对象获取方式**
    // 1.通过字符串获取Class对象，这个字符串必须带上完整路径名，进行类初始化
    Class studentClass = Class.forName("com.test.reflection.Student");
    // 2.通过类的class属性，不进行类初始化
    Class studentClass2 = Student.class;
    // 3.通过对象的getClass()函数
    Student studentObject = new Student();
    Class studentClass3 = studentObject.getClass();
    // 4.通过classloader获取，不进行类初始化
    ClassLoader  classLoader = this.getClass().getClassLoader();
    Class  clazz5 = classLoader.loadClass("com.test.reflection.Student");
  * 第一种方法是通过类的全路径字符串获取 Class 对象，不需要事先import导入
  * 第二种方法有限制条件：需要导入类的包；
  * 第三种方法已经有了 Student 对象，不再需要反射。
  * 第四种方法首先要获取个classLoader实例，之后再通过字符串获取Class对象。
因为Class.forName有重载函数，重点针对这个获取方式展开讲解，主要是理清楚这两个函数的区别
    Class forName(String name)
    Class forName(String name, **boolean** initialize, ClassLoader loader)
引用p神总结的知识点，在代码层面的关系是
    Class.forName(className)
    Class.forName(className, true, currentLoader)
第一个参数是类名；第二个参数表示是否初始化；第三个参数为classLoader。关于classLoader和初始化我打算单独开篇文章学习记录。最后再明确一点
**类初始化** 和 **对象初始化** 是不同的概念，Class的获取一般与目标类的初始化有关，和目标对象初始化无关。
###  0x5 Class获取与初始化关系测试
关于Class实例获取初始化过程我们可以用个例子测试下
    //Animal.java
    public class Animal {
        private static String name = getName();
        static {
            System.out.println("父类静态代码块");
        }
        {
            System.out.println("父类代码块");
        }
        public Animal() {
            System.out.println("父类构造函数");
        }
        private static String getName() {
            System.out.println("父类静态变量");
            return null;
        }
    }
    //Monkey.java
    public class Monkey extends Animal{
        {
            System.out.println("子类代码块");
        }
        static {
            System.out.println("子类静态代码块");
        }
        private static String name = getName1();
        public Monkey() {
            System.out.println("子类构造方法");
        }
        private static String getName1() {
            System.out.println("子类静态变量");
            return null;
        }
    }
    //test.java
    public class test {
        public void get() throws ClassNotFoundException {
    //        Class a = Monkey.class;
            Class a = Class.forName("Monkey");
    //        Monkey mk = new Monkey();
    //        Class a = mk.getClass();
    //        ClassLoader  classLoader = this.getClass().getClassLoader();
    //        Class a = classLoader.loadClass("Monkey");
        }
        public static void main(String[] args) throws ClassNotFoundException {
            test t = new test();
            t.get();
        }
    }
## 0x03 反射关键技术
Java类的成员包括以下三类：成员变量、成员方法、构造方法。那么反射技术就是讲每个类型都看作是类，
###  0x1 创造实例
反射概念本身并不是很难，主要是在进行实践的时候会遇到各种各样的问题，比如在创建实例的时候就会分很多种情况，我梳理了下大概有以下几种
  * 1.公有无参构造方法
  * 2.公有含参构造方法
  * 3.私有构造方法