### Performance and Network Latency

The performance of the encryption process is significantly influenced by the network latency between the client and the server. To evaluate this, we considered two distinct scenarios:

1. **Worst-Case Scenario (Single-Threaded Client):** In this scenario, the client encrypts one value at a time, which means that the application must endure the network latency for each individual value. This setup represents the most challenging condition in terms of performance.

2. **Parallel Workload (Concurrent Client):** In the second scenario, the application can encrypt multiple values simultaneously, thereby amortizing and overlapping the network latency across multiple values. To ensure there is always enough parallel work to keep the pipeline full, we used 5,000 concurrent threads.

Figure 11 illustrates the results. As expected, the performance of the single-threaded client decreases as the network latency increases. However, mOPE maintains high throughput for the concurrent client, even when performing multiple operations in parallel.

![Throughput of mOPE as a function of the client-server network latency, for a single-threaded client and for a concurrent client that performs multiple encryptions in parallel.](figure_11.png)

### Storage and Ciphertext Sizes

To evaluate the storage cost of mOPE, we measured the size of the on-disk representation of mOPE’s B-tree. On average, we found that mOPE stores 40 bytes per encrypted value when encrypting 64-bit values.

### Ciphertext Update Cost

To understand the impact of ciphertext updates in mOPE, we measured the average number of existing ciphertexts updated in a database when encrypting a new value. Figure 12 shows the results. The number of rewrites is typically around 2–4 and grows slowly as the number of items increases. This indicates that mOPE’s order-preserving encodings are relatively stable and do not change often as new values are encrypted. A sequential workload incurs fewer rewrites because our 4-way B-tree fills nodes from left to right, reducing the need for rebalancing when inserting increasing values.

To further understand the cost of ciphertext updates in a real system, we used mOPE to encrypt data in a SQL database. We analyzed the throughput of the scheme on both a sequential workload and on a trace of INSERT and UPDATE queries from TPC-C, an industry-standard database benchmark. Figure 13 shows the throughput when ciphertexts are updated in the database (using our transformation summaries) and when they are not updated. Overall, the cost of ciphertext updates is modest. For the sequential workload, rewrites cause a small drop in throughput of less than 15%. For TPC-C, the cost of rewrites is even smaller because TPC-C inserts a large number of repeating values, which do not modify mOPE’s tree and thus do not trigger rewrites. For TPC-C, the first few values take longer to encrypt because they are unique, and later throughput increases due to repetitions.

![Number of ciphertexts updated for each additional item encrypted in mOPE, as a function of the total number of encrypted items.](figure_12.png)

![Throughput of SQL queries per second for sequential INSERT queries and for the TPC-C mix of INSERT and UPDATE queries, as a function of the database size.](figure_13.png)

### Conclusion

We presented mOPE, the first order-preserving encoding scheme that achieves ideal IND-OCPA security, where an adversary learns nothing but the order of elements based on the ciphertexts. mOPE uses the concept of mutable ciphertexts, and we show that mutable ciphertexts are required to achieve IND-OCPA. We propose a stronger notion of same-time OPE security that allows an adversary to learn only the order of elements present in an encrypted database at the same time, and present an extension of mOPE, called stOPE, that achieves this stronger definition. We also present versions of mOPE and stOPE that protect against a malicious server using Merkle hashing. Finally, we demonstrate that mOPE achieves good performance both in microbenchmarks and in the context of an encrypted database running TPC-C queries, and that it outperforms the state-of-the-art OPE scheme by 1-2 orders of magnitude.

### Acknowledgments

We thank Emily Stark, the anonymous reviewers, and our shepherd, Srđan Čapkun, for their feedback. This work was supported by NSF award IIS-1065219 and by Google.

### References

[1] D. Agrawal, A. El Abbadi, F. Emekci, and A. Metwally. Database management as a service: Challenges and opportunities. In ICDE, 2009.
[2] R. Agrawal, J. Kiernan, R. Srikant, and Y. Xu. Order preserving encryption for numeric data. In ACM SIGMOD, 2004.
[3] G. W. Ang, J. H. Woelfel, and T. P. Woloszyn. System and method of sort-order preserving tokenization. US Patent Application 13/450,809, 2012.
[4] G. Antoshenkov, D. Lomet, and J. Murray. Order preserving compression. In ICDE, 1996.
[5] C. Binnig, S. Hildenbrand, and F. Färber. Dictionary-based order-preserving string compression for main memory column stores. In ACM SIGMOD, 2009.
[6] A. Boldyreva, N. Chenette, Y. Lee, and A. O’Neill. Order-preserving symmetric encryption. In EUROCRYPT, 2009.
[7] A. Boldyreva, N. Chenette, and A. O’Neill. Order-preserving encryption revisited: Improved security analysis and alternative solutions. In CRYPTO, 2011.
[8] D. Boneh and B. Waters. Conjunctive, subset, and range queries on encrypted data. In Theory of Cryptography, 2007.
[9] CipherCloud. Tokenization for cloud data. <http://www.ciphercloud.com/tokenization-cloud-data.aspx>.
[10] R. Falkenrath and P. Rosenzweig. Encryption, not restriction, is the key to safe cloud computing. Nextgov, 2012. <http://www.nextgov.com/cloud-computing/2012/10/o/58608/>.
[11] K. Fraser and T. Harris. Concurrent programming without locks. ACM TOCS, 25(2), 2007.
[12] Gazzang. Gazzang zNcrypt: Transparent data encryption to fit your cloud. <http://www.gazzang.com/products/zncrypt>.
[13] T. Ge and S. B. Zdonik. Fast, secure encryption for indexing in a column-oriented DBMS. In ICDE, 2007.
[14] C. Gentry. Fully homomorphic encryption using ideal lattices. In ACM STOC, 2009.
[15] C. Gentry, S. Halevi, and N. P. Smart. Homomorphic evaluation of the AES circuit. Cryptology ePrint Archive, Report 2012/099, 2012.
[16] O. Goldreich. Foundations of Cryptography: Volume I Basic Tools. Cambridge University Press, 2001.
[17] O. Goldreich. Foundations of Cryptography: Volume II Basic Applications. Cambridge University Press, 2004.
[18] O. Goldreich, S. Micali, and A. Wigderson. How to play any mental game. In ACM STOC, 1987.
[19] H. Hacigümüş, B. Iyer, C. Li, and S. Mehrotra. Executing SQL over encrypted data in the database-service-provider model. In ACM SIGMOD, 2002.
[20] H. Kadhem, T. Amagasa, and H. Kitagawa. MV-OPES: Multivalued-order preserving encryption scheme: A novel scheme for encrypting integer value to many different values. IEICE Trans. on Info. and Systems, E93.D(9), 2010.
[21] H. Kadhem, T. Amagasa, and H. Kitagawa. A secure and efficient order preserving encryption scheme for relational databases. In International Conference on Knowledge Management and Information Sharing, 2010.
[22] V. Kolesnikov and A. Shikfa. On the limits of privacy provided by order-preserving encryption. Bell Labs Technical Journal, 17(3), 2012.
[23] S. Lee, T.-J. Park, D. Lee, T. Nam, and S. Kim. Chaotic order preserving encryption for efficient and secure queries on databases. IEICE Trans. on Info. and Systems, E92.D(11), 2009.
[24] X. Liangliang, O. Bastani, and D. Lin. Security analysis for order preserving encryption schemes. Technical Report UTDCS-01-12, University of Texas at Dallas, 2012.
[25] I.-L. Y. Liangliang Xiao and D. Lin. Security analysis for an order preserving encryption scheme. Technical Report UTDCS-06-10, University of Texas at Dallas, 2010.
[26] D. Liu and S. Wang. Programmable order-preserving secure index for encrypted database query. In IEEE International Conference on Cloud Computing, 2012.
[27] D. Liu and S. Wang. Nonlinear order preserving index for encrypted database query in service cloud environments. Concurrency and Computation: Practice and Experience, 2013.
[28] Y. Lu. Privacy-preserving logarithmic-time search on encrypted data in cloud. In NDSS, 2012.
[29] R. C. Merkle. A certified digital signature. In CRYPTO, 1989.
[30] G. Özsoyoglu, D. A. Singer, and S. S. Chung. Anti-tamper databases: Querying encrypted databases. In IFIP WG 11.3 Working Conf. on Database and Applications Security, 2003.
[31] O. Pandey and Y. Rouselakis. Property preserving symmetric encryption. In EUROCRYPT, 2012.
[32] Perspecsys. The PRS server: Data protection for cloud applications. <http://www.perspecsys.com/perspecsys-cloud-protection-gateway/>.
[33] R. A. Popa, C. M. S. Redfield, N. Zeldovich, and H. Balakrishnan. CryptDB: Protecting confidentiality with encrypted query processing. In ACM SOSP, 2011.
[34] R. A. Popa, F. H. Li, and N. Zeldovich. An ideal-security protocol for order-preserving encoding. Cryptology ePrint Archive, Mar. 2013. <http://eprint.iacr.org/>.
[35] F. Y. Rashid. Salesforce.com acquires SaaS encryption provider Navajo Systems. eWeek.com, 2011.
[36] E. Shi, J. Bethencourt, T.-H. H. Chan, D. Song, and A. Perrig. Multi-dimension range query over encrypted data. In IEEE Symposium on Security and Privacy, 2007.
[37] Vormetric. Cloud encryption. <http://www.vormetric.com/products/encryption/cloud-encryption/>.
[38] L. Xiao, I.-L. Yen, and D. T. Huynh. Extending order preserving encryption for multi-user systems. Cryptology ePrint Archive, Report 2012/192, 2012.
[39] L. Xiao, I.-L. Yen, and D. T. Huynh. A note for the ideal order-preserving encryption object and generalized order-preserving encryption. Cryptology ePrint Archive, Report 2012/350, 2012.
[40] D. Yum, D. Kim, J. Kim, P. Lee, and S. Hong. Order-preserving encryption for non-uniformly distributed plaintexts. In Intl. Workshop on Information Security Applications, 2011.