2θe−ε − 1
,
for
eε + 1
2
(cid:2) θ  b. Also, Pr(y|S2) = 1
(cid:2) b· (cid:2) = b
(no matter x = {3} or x = {4} is sampled, the probability of
reporting y is b). Thus, Pr(y|S1)
= eε1, where
a larger (cid:2) will reduce this ratio (i.e., privacy ampliﬁcation).
Theorem 2 and Theorem 3 provide a tighter bound on
the total privacy guarantee than the sequential composition
(ε = ε1 +ε2). However, in practice, the budgets are determined
in a reverse way: given ε (a constant), we need to allocate the
corresponding ε1 and ε2 before any perturbation. In Sec. 5.4,
we will discuss the optimized privacy budget allocation (i.e.,
how to determine ε1 and ε2 when ε is given) by minimizing
the estimation error that is analyzed in Sec. 5.3. In summary,
both the tight budget composition and optimized budget allo-
cation in our scheme will improve the privacy-utility tradeoff.
Note that PrivKVM [25] simply allocates the privacy budget
with ε1 = ε2 = ε/2 by sequential composition (Theorem 1).
Pr(y|S2) = 1 + a/b−1
(cid:2) a + (1− 1
(cid:2) (cid:2) a
b
5.3 Aggregation and Estimation
This subsection corresponds to step 4(cid:10) 5(cid:10) in Figure 2. Intu-
itively, the value mean of a certain key can be estimated by
the ratio between the summation of all true values and the
count of values regarding this key; however, the fake values
affect both the summation and the count. In PrivKVM [25],
since the count of values includes the fake ones, the mean
of fake values should be close to the true mean to guarantee
the unbiasedness of estimation. Therefore, a large number
of iterations are needed to make the fake values approach
the true mean. In our scheme, however, the fake values have
expected zero summation because they are assigned as −1 or
1 with probability 0.5 respectively. Therefore, we can use the
estimated frequency to approach the count of truly existing
values, thus only one round is needed.
Aggregation. After all users upload their outputs to the
server, the server will count the number of 1’s and −1’s that
supports k ∈ K in output, denoted as n1 and n2 respectively
(the subscript k is omitted for brevity). Since the outputs of the
proposed two mechanisms have different formats, the server
computes n1 = Count(y[k] = 1) and n2 = Count(y[k] = −1)
(cid:3) = (cid:8)k,1(cid:9)) and n2 =
in PCKV-UE, or computes n1 = Count(y
(cid:3) = (cid:8)k,−1(cid:9)) in PCKV-GRR. Then, n1 and n2 will be
Count(y
calibrated to estimate the frequency and mean of key k ∈ K .
Baseline Estimation Method. For frequency estimation,
we use the estimator in [23] for itemset data, which is shown
to be unbiased when each user’s itemset size is no more than
(cid:2). Since n1 + n2 is the observed count of users that possess
the key, we have the following equivalent frequency estimator
ˆfk =
(n1 + n2)/n− b
a− b
· (cid:2)
(7)
For mean estimation, since our mechanisms generate the fake
values as −1 or 1 with probability 0.5 respectively (i.e., the
expectation is zero), they have no contribution to the value
summation statistically. Therefore, we can estimate the value
mean by dividing the summation with the count of real keys.
According to Randomized Response (RR) in Sec. 3.2, the
calibrated summation is n1−n(1−p)
2p−1 . The
2p−1
count of real keys which are still reported as possessed can
be approximated by n ˆfka/(cid:2) because the sampling rate is 1/(cid:2)
and real keys are reported as possessed with probability a.
Therefore, the corresponding mean estimator is
− n2−n(1−p)
= n1−n2
2p−1
ˆmk =
(n1 − n2)/(2p− 1)
n ˆfka/(cid:2)
(n1 − n2)(a− b)
a(2p− 1)(n1 + n2 − nb)
=
(8)
The following theorem analyzes the expectation and variance
of our estimators in (7) and (8) when each user has no more
than (cid:2) key-value pairs (the same condition as in [23]).
Theorem 4 (Estimation Error Analysis). If the padding
length (cid:2) (cid:3) |Su| for all user u ∈ U; then, for frequency and
mean estimators in (7) and (8) of k ∈ K , ˆfk is unbiased, i.e.,
E[ ˆfk] = f
+
∗
k , and their expectation and variance are
(1− a− b)
∗
(cid:12)
k
n(a− b)
(cid:2)2b(1− b)
(cid:11)
n(a− b)2
∗
k
(cid:2)· f
(1− b− δ)b
+ b(1− b)− δ
where parameters δ and γ are deﬁned by
Var[ ˆfk] =
E[ ˆmk] ≈ m
1 +
Var[ ˆmk] (cid:4) b + δ
nγ2
· m
∗
k
2
nδ2
nδ2
δ = (a− b) f
∗
k /(cid:2),
γ = a(2p− 1) f
∗
k /(cid:2)
(9)
(10)
(11)
(12)
The variance in (11) is an approximate upper bound and the
approximation in (10) and (11) is from Taylor expansions.
974    29th USENIX Security Symposium
USENIX Association
a,b, p and padding length (cid:2).
Algorithm 4 Aggregation and Estimation with Correction
Input: Outputs of all users, domain of keys K , perturbation probabilities
Output: Frequency and mean estimation ˆfk and ˆmk for all k ∈ K .
1: for k ∈ K do
2:
Count the number of supporting 1’s and −1’s for key k in outputs
from all users, denoted as n1 and n2.
Compute ˆfk by (7) and correct it into [1/n,1].
Compute ˆn1 and ˆn2 by (13), and correct them into [0,n ˆfk/(cid:2)].
Compute ˆmk by (14).
3:
4:
5:
6: end for
7: Return ˆfk and ˆmk, where k ∈ K .
Proof. See Appendix C. Note that Theorem 4 works for both
PCKV-UE and PCKV-GRR.
∗
k
∗
= (1−b−δ)bm
k
Pros and Cons of the Baseline Estimator. The baseline
estimation method estimates frequency and mean by (7) and
(8) respectively. According to (10) and (11), for non-zero
constants δ and γ, when the user size n → +∞, we have
E[ ˆmk] − m
nδ2 → 0 (i.e., the bias of ˆmk is pro-
gressively approaching 0) and Var[ ˆmk] → 0, which means
∗
ˆmk converges in probability to the true mean m
k. However,
1
/(cid:2))2 is not small, the large bias and large variance
when
n( f ∗
k
would make the estimated mean ˆmk far away from the true
mean, even out of the bound [−1,1]. Similarly, if Var[ ˆfk] in
→ 1, the estimated
(9) is not very small, then for f
frequency ˆfk may also be outside the bound [0,1]. Hence,
these outliers need further correction to reduce the estimation
error.
→ 0 or f
∗
k
∗
k
Improved Estimation with Correction. Since the value
perturbation depends on the output of key perturbation, we
ﬁrst correct the result of frequency estimation. Considering
the corrected frequency cannot be 0 (otherwise the mean
estimation will be inﬁnity), we clip the frequency values using
the range [1/n,1], i.e., set the outliers less than 1/n to 1/n and
outliers larger than 1 to 1. For the mean estimation, denote
the true counts of sampled key-value pair x = (cid:8)k,1(cid:9) and x =
(cid:8)k,−1(cid:9) (the output of Algorithm 1) of all users as n
∗
∗
1 and n
2
respectively (the subscript k is omitted for brevity). Then we
∗
have the following lemma for the estimation of n
1 and n
∗
∗
Lemma 1. The unbiased estimators of n
2 are
1 and n
ap− b
a(1−p)− b
(cid:11)
(cid:12)
(cid:12)
(cid:11)
(cid:12)
∗
2.
, where A =
2
a(1−p)− b
2
2
ap− b
2
(cid:11)
n1 − nb/2
n2 − nb/2
−1
= A
ˆn1
ˆn2
(13)
Proof. See Appendix D.
Note that Lemma 1 works for both PCKV-UE and PCKV-
(cid:13)
1 −1
(cid:14)
GRR. According to (13), we have
ˆn1 − ˆn2 =
= n1 − n2
a(2p− 1)
then ˆmk in (8) can be represented by ˆn1 − ˆn2 and ˆfk in (7)
−1
A
(cid:12)
(cid:11)
n1 − nb/2
n2 − nb/2
ˆmk = (cid:2)( ˆn1 − ˆn2)/(n ˆfk)
(14)
∗
1
+ n
2 (the supporting number of 1 and −1 for
∗
which means n
key k ∈ K ) is estimated by n ˆfk/(cid:2). Therefore, ˆn1 and ˆn2 should
be bounded by [0,n ˆfk/(cid:2)]. The aggregation and estimation
mechanism (with correction) is shown in Algorithm 4, where
the difference between PCKV-UE and PCKV-GRR is only on
the aggregation step, which is caused by the different types
of output (one is a vector, another is a key-value pair).
5.4 Optimized Privacy Budget Allocation
In this section, we discuss how to optimally allocate budgets
ε1 and ε2 given the total privacy budget ε, which corresponds
to step 1(cid:10) in Figure 2. The budget composition (Theorem 2
and Theorem 3) provides the relationship among ε, ε1, and
ε2. Intuitively, when the total privacy budget ε is given, we
can ﬁnd the optimal ε1 and ε2 that satisfy the budget com-
position by solving an optimization problem of minimizing
the combined Mean Square Error (MSE) of frequency and
+β·MSE ˆmk. However, from
mean estimations, i.e., α·MSE ˆfk
∗
∗
Theorem 4, Var[ ˆfk] and Var[ ˆmk] depend on f