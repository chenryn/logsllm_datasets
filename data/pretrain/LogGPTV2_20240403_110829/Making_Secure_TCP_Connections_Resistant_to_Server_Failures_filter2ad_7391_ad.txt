abort 
timer expires  and the  clients  begin resetting
connections. This  value  is  established  on  the order  of 
multiple minutes,  with  two  minutes  being  the general
minimum  and  nine  minutes  the  common value.
In our
experiments, recovery even under load takes less than two
minutes.
The following shows the time spent in a representative
SSH recovery session:
Monitor alerts of server crash:
Recovery start:
IP 
take over  and recovery  server
daemon started:
Recovery complete:
17:39:21
17:39:26
17:39:32
17:39:40
It  takes  approximately  11  seconds  to discover  a  server
crash, reset  the virtual  interface,  and  start  a  recovery
daemon.    The  actual  recovery  process, which  includes
controlled partial replay, reading and decrypting the saved
parameters, and resetting the recovery server’s encryption
cipher states, takes another 8 seconds. This is compared to 
observations  that  show  a  regular  client  login  to  server
takes, on average, 3.2 seconds.
Recovery ratio
Avg recovery time
d
e
r
e
v
o
c
e
r
%
100
80
60
40
20
0
)
c
e
s
(
e
m
i
t
y
r
e
v
o
c
e
R
250
200
150
100
50
0
1
5 10 20 30 40 50 60 70
1
5 10 20 30 40 50 60 70
# of open connections
# of open connections
Figure 5.  Recovery percentage and the average recovery time vs. # of open sessions.
Table 1.  Recovery time for multiple concurrent sessions (time unit is second).
# of connections
Avg recovery time
standard deviation
median
shortest recovery time
longest recovery time 
5
1
30
19 37.4 57.2 120 118
10
20
50
40
129
60
184 189.6
70
191
13 17.3 54.8 53.49 55.61
169
91
258
134
97
152
173
99
255
171
54
248
0 0.89 2.68
8.4
19
19
19
38
36
38
58 124 123
51 101
88
59 127 128
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:51:08 UTC from IEEE Xplore.  Restrictions apply. 
We  observe  that  the  recovery  percentage  drops  from 
100%  with  20  or  less  simultaneous  sessions,  to  around 
60%  recovered  with  70  simultaneous  sessions.    This 
degradation  is  partially  due  the  limitations  imposed  by  a 
relatively obsolete hardware.  Under 20~30 open sessions, 
we  achieve  the  average  recovery  time  within  the  two 
minute  TCP  timer  expiration  limit,  again,  determined  by 
our inadequate hardware. It is obvious that more powerful 
systems  can  handle  more  demanding  tasks  such  as  larger 
number  of  concurrent  logins,  and  thus  likewise  the 
recovery tasks presented in this paper.   It is also possible 
that  tremendously  high  network  load  could  cause  lost 
packets  (as  addressed  more  fully  in  [4],  but  this  has  not 
been  found  to  be  a  limiting  factor.    Regardless  of  cause, 
recovery  of  most  sessions,  with  some  failures  that  would 
have  failed  anyway,  may  be  preferable  to  losing  all 
sessions.
7.  Conclusions and Future Work 
Until  such 
time  as  secure  TCP-based  migration 
solutions  are  available  on  the  hundreds  of  millions  of 
existing  systems,  there  will  remain  a  need  for  client-
transparent  migration. 
system 
demonstrates how certain techniques can be deployed in a 
simple  manner,  without  requiring  changes  to  any  clients.  
The  simplicity  and 
the 
techniques  demonstrated  in  this  paper  make  SecureJeebs 
attractive for adoption in commercial product development.   
immediate  applicability  of 
  The  SecureJeebs 
We  are  currently  extending  this  work  in  the  following 
directions: 
(cid:131) Migrate HTTPS by proposing simple extensions to 
(cid:131)
(cid:131)
SSL
Prove  the  applicability  of  the  methods  presented 
here to secure file transfer protocol (SFTP) 
Improve  the  recovery  ratio  under  high  load  by 
employing more sophisticated recovery methods 
Acknowledgements 
We thank Sada Narayanappa for useful discussions on 
various modules, Profs. Leutenegger and Lopez for 
lending us the hardware to do experimentation, and Ocean 
Yang for her help with the figures. 
References
 [1]   N. Aghdaie and Y. Tamir.  Implementation and Evaluation 
of Transparent Fault-Tolerant Web Service with Kernel-
Level Support.  In Proc. of the 11th International 
Conference on Computer Communications and Networks 
(ICCCN 2002), Miami, Florida, October 14-16, 2002. 
[2]   L. Alvisi, T. C. Bressoud, A. El-Khashab, K. Marzullo, 
and D. Zagorodnov.  Wrapping Server-Side TCP to Mask 
Connection Failures.  In Proc. of IEEE INFOCOM, 
Anchorage, Alaska, pp. 329-337 (April 2001). 
[3]   E. Amir, S. McCanne, and R. Katz.  An Active Service 
Framework and its Application to Real-time Multimedia 
Transcoding.  In Proc., ACM SIGCOMM ’98, Sep. 1998. 
[4]   A. Burt, S. Narayanappa and R. Thurimella. Techniques 
for Client-Transparent TCP Migration. Submitted.  
 [5]  Cisco Systems. Cisco Distributed Director. 
http://www.cisco.com/warp/public/cc/pd/cxsr/dd/tech/dd_
wp.htm.
[6]   A. Fox, S. Gribble, Y. Chawathe, and E. Brewer.  Cluster-
based Scalable Network Services. In Proc. ACM SOSP ’97, 
Oct. 1997. 
[7]   M. Haungs, R. Pandey, E. Barr, and J.F. Barnes.  
Migrating Sockets: Bridging the OS Primitive/Internet 
Application Gap.  Manuscript. Available for download 
from http://www.cs.ucdavis.edu/~haungs/my_cv/
[8]   B. Kuntz and K. Rajan.  MIGSOCK: Migratable TCP 
Socket in Linux , M.S. Thesis, Information Networking 
Institute, Carnegie Mellon University, Feb. 2002. 
[9]   D. A. Maltz and P. Bhagwat.  MSOCKS: An Architecture 
for Transport Layer Mobility.  In Proc. IEEE INFOCOM, 
Mar. 1998.  
[10]   Netscape SmartDownload, 
http://wp.netscape.com/computing/download/smartdownlo
ad/ib/about.html.
[11]   M. Orgiyan and C. Fetzer. Tapping TCP Streams. in Proc. 
of IEEE International Symposium on Network Computing 
and Applications (NCA2001), Boston, MA, USA, Feb. 
2002.
[12]   V. S. Pai, M. Aron, G. Banga, M. Svendsen, P. Druschel, 
W. Zwaenepoel, and E. Nahum.  Locality-aware Request 
Distribution in Cluster-based Network Servers.  In Proc. 
ASPLOS ’98, Oct. 1998.  
[13]   A. E. Papathanasiou and E. V. Hensbergen.  KNITS: 
Switch-based Connection Hand-off.  In Proc. IEEE 
INFOCOM, Jun. 2002. 
[14]   X. Qu and J. Xu Yu and R.P. Brent.  Implementation Of a 
Portable-IP System For Mobile TCP/IP. TR-CS-97-19, 
The Australian National University, Canberra, Australia, 
1997.
[15]  Scaling Next Generation Web Infrastructure with Content-
Intelligent Switching, 
http://www.nortelnetworks.com/products/library/collateral/
intel_int/l7_white_paper1.pdf
[16]   C. Snoeren and H. Balakrishnan.  An End-to-End 
Approach to Host Mobility.  In Proc. 6th ACM 
MOBICOM, Aug. 2000. 
[17]   C. Snoeren, D. G. Andersen, and H. Balakrishnan.  Fine-
Grained Failover Using Connection Migration.  In Proc. 
3rd USENIX Symp. on Internet Technologies and Systems 
(USITS), Mar. 2001.  
[18]   O. Spatscheck, J. S. Hansen, J. H. Hartman and L. L. 
Peterson.  Optimizing TCP Forwarder Performance. 
IEEE/ACM Transactions on Networking, 8:2, pp. 146—
157, 2000. 
[19]   SSH Transport Layer Protocol.  
http://www.ietf.org/internet-drafts/draft-ietf-secsh-
transport-15.txt
[20]   SSH Authentication Protocol.  
http://www.ietf.org/internet-drafts/draft-ietf-secsh-
userauth-16.txt.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:51:08 UTC from IEEE Xplore.  Restrictions apply. 
[21]   SSH Connection Protocol.  http://www.ietf.org/internet-
drafts/draft-ietf-secsh-connect-16.txt
[22]   SSH Protocol Architecture. http://www.ietf.org/internet-
drafts/draft-ietf-secsh-architecture-13.txt 
[23]   R. R. Stewart, Q. Xie, K. Morneault, C. Sharp, H. J. 
Schwarzberger, T. Taylor, I. Rytina, M. Kalla, L. Zhang, 
and V. Paxson.  RFC 2960: Stream Control Transport 
Protocol, 2000. 
[24] F. Sultan, K. Srinivasan, and L. Iftode.  Transport Layer 
Support for Highly-Available Network Services.  In Proc. 
HotOS-VIII, May 2001. Extended version: Technical 
Report DCS-TR-429, Rutgers University. 
[25] F. Sultan, K. Srinivasan, D. Iyer, L. Iftode.  Migratory TCP: 
Connection Migration for Service Continuity over the 
Internet.  In Proc. of the 22nd International Conference on 
Distributed Computing Systems (ICDCS '02), July 2002. 
[26] V.C. Zandy and B.P. Miller. Reliable Network Connections. 
In Proc. 8th Annual ACM/IEEE International Conference 
on Mobile Computing and Networking, pages 95–106, 
Atlanta, Georgia, September 2002. 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:51:08 UTC from IEEE Xplore.  Restrictions apply.