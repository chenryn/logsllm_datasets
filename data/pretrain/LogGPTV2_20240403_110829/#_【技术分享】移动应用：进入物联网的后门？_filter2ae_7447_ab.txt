通过逆向Android应用程序，能够更轻松地找到每个characteristic的意义。例如，图4中的代码给出了牙刷的电动机速度（其转换为刷子每分钟的行程）的UUID和象限蜂鸣（当最终用户在特定象限中的刷牙时间足够长时，牙刷就会振动）。我们在表1和2中分别列出了已知的BLE服务和characteristic。
图4：用于电机速度和象限蜂鸣的BLE characteristic。
    UUID                               描述
    00001800-0000-1000-8000-00805f9b34fb 通用访问（标准）
    c05fc343-c076-4a97-95d3-f6d3e92a2799 固件 OTA 服务
    04234f8e-75b0-4525-9a32-193d9c899d30 Beam 服务
    89bae1fa-2b59-4b06-919a-8a775081771d 可能是加速度计/陀螺仪芯片服务
表1：Beam牙刷的BLE服务。
    UUID                                   描述
    a8902afd-4937-4346-a4f1-b7e71616a383 布尔指示器，指示牙刷处于活动状态
    267b09fd-fb8e-4bb9-85ccade55975431b  电机状态
    3530b2ca-94f8-4a1d-96beaa76d808c131  当前时间
    833da694-51c5-4418-b4a9-3482de840aa8 电机速度
    19dc94fa-7bb3-4248-9b2d-1a0cc6437af5 自动关闭和象限蜂鸣指示器（2位）
    6dac0185-e4b7-4afd-ac6b-515eb9603c4c 电池电量（2字节）
    0971ed14-e929-49f9-925f-81f638952193 牙刷颜色(1 byte)
    0227f1b0-ff5f-40e3-a246-b8140205bc49 加速度计数据（6字节）
    ed1aa0cf-c85f-4262-b501-b9ddf586a1db 陀螺仪（6字节）
    cf0848aa-ccdb-41bf-b1e1-337651f65461 按钮状态
表2：我们对Beam牙刷最感兴趣的BLE characteristics
有了这些信息，我们便可以使用自己的实现代码来控制自动关闭和象限蜂鸣功能了。
我们可以控制的功能包括：
打开与牙刷的BLE连接。
将字节值写入相应的characteristic UUID中。最低有效位用来控制象限蜂鸣，第二位控制自动关闭。
断开牙刷的连接。
BLE命令可以使用诸如建立在bluez（蓝牙栈实现）之上的gattlib [21]之类的库和简单的BLE USB dongle来发送。
**利弊**
通过对Beam牙刷的移动应用程序进行逆向，我们发现了下列有效信息。
存在陀螺仪和加速度计。这一点上，通过拆卸牙刷的硬件也能达到同样的效果，只不过做起来可能会有点难度，具体取决于芯片的封装方式。显然，逆向移动应用程序的优点是我们不需要拆开牙刷，并且也没有毁坏它的风险。缺点是我们看不到组件的铭牌和型号，因此也无法了解其电器规格。
存在固件更新服务。对于这一点来说，很难通过其他方式（例如通过监听BLE流量）来获得。
积分并未存储在牙刷本身中。这一点很难通过硬件探测或BLE扫描找到。
实现代码的设计。显然，没有反汇编代码的话，是没有办法了解这一点的。我们唯一不知道的部分，就是硬件设计。
识别BLE服务和characteristic。这一点也可以使用BLE扫描器应用程序（例如nRF主控制面板[22]）来达到目的，但需要消耗更长的时间，因为必须通过尝试各种值，然后通过观察牙刷的行为差异来进行识别。
**智能手表**
**架构**
我们对索尼的智能手表SmartWatch 2 SW2进行了相应的实验。
与Beam牙刷不同，这款智能手表提供了很多技术信息和开发人员信息，这主要得益于索尼鼓励开发人员为其编写新的应用程序。索尼为该产品提供了相应的API、文档、示例和教程。该智能手表含有STM32F439
SoC（包括ARM
Cortex-M4和加密加速器）、光传感器、加速器，支持NFC和蓝牙3.0（注意不兼容低功耗蓝牙技术）和LiPo电池。它运行的是Micrium的μC/
OS-II实时操作系统。
知道了这一点，那么就可以请μC/ OS-II或ST微电子SoC专家继续对设备的相关部件进行深入调查。在本文中，我们假设研究人员无法接触这方面的专家，相反，我们将重点研究该智能手表的应用情况。要使用智能手表，必须至少安装两个Android应用程序：一个名为Smart
Connect的应用程序以及一个名为SmartWatch 2 SW2的应用程序。这里，我们将重点考察这两个应用程序。
要了解这些应用程序，必须首先掌握索尼的有关术语。对于索尼而言，智能手表更一般的称呼为智能配件，因为还有其他类型的配件，如耳机等。一个智能手表的“应用程序”（我们稍后就会发现，实际上根本没有这样的东西）被称为智能扩展。
要创建新的智能扩展程序，开发人员需要对使用了索尼的智能扩展API的代码进行编译，从而得到一个Android应用程序（即一个.apk程序，研究人员可以使用标准工具，如apktool，baksmali等对它们进行逆向）——但需要注意的是，只有将我们前面提到的两个应用程序都安装之后，该应用程序才能正常运行。
因此，为了安装智能扩展程序，最终用户需要安装开发人员的apk，即Android应用程序。该应用程序由两个强制性应用程序之一的Smart
Connect自动找到，并添加到相应的智能配件中。这样，新的智能扩展图标就会出现在智能手表上。
需要注意的是，我们没有在智能手表本身上直接安装软件。事实上，根本就没有智能手表应用程序的概念。实际上，智能扩展的所有工作都是在智能手机上完成的。智能手表基本上只是充当一个远程显示器。智能扩展生成的各种事件和消息都是由两个强制性应用程序中的第二个，即SmartWatch
2
SW2生成的。这个应用程序实际上就是索尼所谓的主机应用程序，即专门用来跟给定智能附件（就本例而言，就是SW2）通信的Android应用程序。我们在表3和图5中对相关的术语进行了详细的解释，需要注意的是，其中一些很容易引起误解。
图5：索尼SmartWatch 2 SW2的架构。
    名称            说明
    主机应用程序专门用于跟特定智能配件通信的Android应用程序的通用术语。
    智能配件    智能手表、智能耳机等的通用术语
    Smart Connect这是必须安装在智能手机上才能使用智能手表的两个强制性Android应用程序之一。这是一个官方的索尼应用程序。它管理哪个扩展使用哪个配件。它的软件包名称是com.sonyericsson.extras.liveware。
    智能扩展    这是一个Android应用程序，它在手机上运行，但可从智能手表远程访问/控制。索尼提供了几个扩展（Twitter feed，Facebook feed，Chrono），并鼓励开发人员创建自己的扩展。
    Smart Watch 2 SW 2这是SW2的两个强制性Android应用程序中的另一个。实际上，它是SW2配件的主机应用程序。这是一个官方的索尼应用程序，该软件包名为com.sonymobile.smartconnect.smartwatch2。
表3：索尼的智能手表术语。
**推论**
知道了智能手表的架构之后，可以得到下列推论：对于智能手表上的任何扩展，实际上都可以通过逆向其Android应用程序的代码来进行安全分析。
我们假设，需要考察发送SMS消息的扩展。智能手表本身没有什么可逆向的，相反，我们需要做的是反汇编相关的Android应用程序，这样，就能找到像smsManager.sendTextMessage（mPhoneNumber，null，message，…）这样的代码。如果智能手表恶意软件的确存在并在传播的话，防病毒供应商只需要为相应的Android应用程序写签名即可，这些事情正是他们所擅长的。
此外，我们还可以对官方SmartWatch 2
SW2主机应用程序也进行逆向工程。逆向结果表明，与远程智能手表的通信是通过“Costanza”消息来进行处理的。这些消息由类型（消息类型），消息标识符和打包的缓冲区字节组成。打包或解包是通过名为“protocol”（libprotocol.so）的本机库进行处理的。一旦打包完毕，这些消息就可以通过蓝牙进行发送了——这里是通过Android
API来打开蓝牙套接字的。Costanza消息的类型有多种，例如：
电池电量指示（id = 18），电量水平以百分比形式表示。
恢复出厂设置的请求和响应（id = 20或21）。
'Force crash'（id = 666）。源代码表明，这里有一个隐藏的调试界面，其中含有“Force crash on
watch”按钮。这将创建以下消息：
    public RequestForceCrash(int
    newMessageId) {
    super(newMessageId);
    this.type = 666;
    this.mMagic = 0xC057A72A;