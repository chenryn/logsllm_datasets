standard computational model, similar to models for simulation-
based security (see, e.g., [30]), in which inexhaustible interactive
Turing machines (IITMs) communicate via tapes. In this model,
only one IITM is active at a time. Such a machine may perform
computations polynomially bounded by the security parameter and
the input of its enriching tapes. It may send a message to another
IITM which is then triggered.
There is one special IITM, called the master, which is triggered
ﬁrst. This machine is also triggered if, at some point, no message
is sent.
Here, every IITM only has so-called consuming tapes. By this, it
is guaranteed that polynomially bounded IITMs plugged together
form a polynomially bounded system. See [30] for a detailed dis-
cussion of this issue.
In,Out,{Πa}a∈Σ,{ ˆΠa}a∈Σ):
Participants. The set Σ of the protocol participants consists of the
Bingo1 in the following way as the protocol (Σ, Ch,
We deﬁne Pa
voters v1, . . . ,vn, the voting machine M, the auditors A1, . . . ,Ar(cid:48), the
random number generator RNG, the judge a, and, additionally, the
scheduler S and the voting booth B. The role of the scheduler
(who formally will be the master) is to make sure that every party
gets a chance to perform some actions in every protocol phase. It
is important, because otherwise we could not blame parties who
did not perform required actions (for instance, did not open their
commitments, as required, in the appropriate protocol stage). B
models the voting booth, including the Bulletin Board.
Channels. The set of channels (correspond to tapes in the IITM
b, for every a,b ∈
model) we consider here includes the channels cha
Σ\{RNG}. The channel cha
b is an output channel of a and an input
channel of b. Therefore a and b can communicate using cha
b and
chb
a. Further, the RNG is connected to the voting booth B and there
is a channel chRNG
M , modelling that the RNG can only be triggered
when a voter indeed is physically in the voting booth. In particular,
as we will assume that B is honest, the voting machine M cannot
send messages to the RNG. This reﬂects security assumption A1.
If it were possible for the machine to send instructions to the
RNG, both devices could cooperate to change a voter’s vote, from,
say, candidate i to candidate j in the following way: The machine
chooses an unopened commitment on (i,x), for some x, and instruct
the RNG to display x as the freshly generated number. Then the
machine chooses a fresh random number y and writes y next to j
and x next to i. By this, the machine produces a valid ballot for
candidate j without the risk of being detected.
Sets of programs Πa. First, we deﬁne the sets of honest programs
of the protocol participants.
The RNG. The RNG is triggered by B when a voter is in the vot-
ing booth (see below). The honest program of the RNG then creates
a fresh random number and sends this number to B. We assume
that the probability that two randomly picked numbers coincide is
negligible.
The Voter. The IITM running the honest program of a voter waits
until it is triggered by the scheduler. It then determines the voter’s
choice c according to the probability distribution (cid:126)p and runs the
following procedure Vote(c). It does nothing, if the choice c is to
abstain (which happens with probability p0). Otherwise, the voter
enters the voting booth by sending an enter-message to B. After
being triggered by B, it sends the chosen candidate c to B. B
forwards the number from the RNG and the receipt to the voter.
The voter checks with probability qnum whether the number on
the receipt next to the chosen candidate corresponds to the num-
ber from the RNG. If this is not the case, the voter sends a com-
plain-message to the judge. Further, in the tallying phase, with
probability qrec, the voter checks the receipt, i.e. demands from B
the information on the Bulletin Board and compares that with the
receipt that she received from B in the voting phase. If the receipts
does not match, the voter sends the receipt to the judge.
The Machine. The honest program of the voting machine is de-
scribed in the protocol description, where the machine publishes
everything that is to be published (e.g. the commitments and the
receipts) by sending these values to B (see below).
The Auditors. The honest program of an auditor picks, always
when it is triggered by the scheduler, a random bit and sends this
bit to the scheduler.
The Judge. The honest program of the judge is speciﬁed by the
judging procedure.
The Scheduler. As we have mentioned in every instance of the
protocol, the processes of the scheduler is the master. The role of
the scheduler, as we have also mentioned, is to trigger every party,
so that it is given a chance to perform the actions required by the
protocol. We assume that the run is stopped if the judge outputs
something on his decision-tape.
The honest program of S is as follows:
• It starts the system by ﬁrst triggering the voting booth B that
is in charge of choosing the setup parameters (see below).
• It then triggers the voting machine M which is supposed to
send the commitments (according to the protocol speciﬁca-
tions) to the voting booth B (recall that B plays the role of
the Bulletin Board), who conﬁrms to S that this has been
done correctly. If S does not receive a conﬁrmation, it sends
a message to the judge a who then outputs dis(M) on the tape
decisiona.
• S then triggers in turn the auditors and computes the random
challenges from the responses by taking the XOR over the
responses. We assume that at least one auditor is honest, see
below for a discussion of this issue.
• Then the machine M is triggered with these random chal-
lenges. The machine is supposed to open the commitments
corresponding to the challenges, i.e. sending the respective
information to B. S triggers the judge who checks if this
ZK-proof is done correctly, and, in case it is not, outputs
dis(M).
• Otherwise, S starts the voting phase by triggering the ﬁrst
voter v1, chosen randomly among all voters. Note that S
could also trigger the voters in a ﬁxed order, or even trigger
the voters in an order determined by some other party, without
changing the result (if every voter gets the possibility to vote).
• After it received a done(v1)-message from the booth B (see
below), it triggers the next voter and so on.
• If in this phase, at some point no message is sent the scheduler
(as it is the master) is triggered. In this case the scheduler
asks the booth B which participant misbehaved (see below)
and forwards this to the judge who outputs the corresponding
blaming on his decision-tape.
• After all voters have been triggered, S starts the tallying
phase by triggering the voting machine M, who is supposed
to open the unused commitments by sending the respective
information to B. Then S triggers the judge who checks
whether the commitments are opened correctly, and, in case
this is not the case, outputs dis(M). Otherwise, analogously
to the ﬁrst ZK-proof, the auditors are triggered, S computes
the random challenges from the responses and the machine is
asked to open the respective commitments.
• After that, S triggers in turn every voter, who ask B with
probability qrec for the information on the Bulletin Board and
check whether her receipt has been published correctly. If the
judge receives a receipt from a voter, he/she checks that the
receipt is correctly signed and blames in case.
• After the tallying phase, S triggers the judge a who checks
the ZK-proofs, whether a number occurs twice or whether the
published result is compatible to the number of voters that
voted (the judge gets this information from B) and behaves
accordingly to the judging procedure.
The voting booth. The set of honest programs of the voting booth
B consists of the following program:
14
• When it is ﬁrst triggered by S , it sets up the parameters for
the cryptographic primitives, i.e. for the commitment scheme
and the digital signatures. We model our security assumption
A3, i.e.
that it is not possible to forge a receipt, by means
of digital signatures. We assume that B chooses the parame-
ters of a digital signature scheme in a way that the probability
that a polynomially bounded algorithm can forge a signature
is negligible. As B serves as the Bulletin Board, every partic-
ipant may request these parameters. In order that B does not
get exhausted, every participant can only once demand these
values.
• B also serves as Bulletin board for the messages that the ma-
chine has to publish, e.g. the commitments in the initializa-
tion phase. Every participant may once demand these values.
B also reports to S if messages to be published are not cor-
rect, i.e.
if the number of commitments does not match or
the commitments do not belong to the space of commitments
speciﬁed by the setup parameters.
• It accepts exactly one enter-message from every eligible
voter vi, modelling that every eligible voter may only enter
once the voting booth. B counts correctly the voters, reﬂect-
ing the security assumption A4. Every participant may once
demand the total number of voters after the tallying phase.
• After B received a enter-message, she triggers the RNG
who is supposed to answer with a fresh random number.
• After that B triggers the voter who is supposed to answer
with a choice for a candidate.
• Then the voting machine M is triggered by B by sending the
choice and the random number to it. The machine is supposed
to answer with the receipt (speciﬁed by the protocol).
• If B does not receive messages of the expected type she re-
ports this to the judge, who blames the respective participant.
• If B does not receive a message at all (from the voter, the
RNG or the machine) the scheduler is activated who then asks
B for the misbehaving party. B answers correctly to that
request.
• If everybody behaves correctly, B sends the entire receipt to
the voter together with a digital signature. The voter then may
send a complain-message to the booth.
• B forwards this complain to the judge a (if we consider
Bingo1) who states dis(M) ∨ dis(RNG) ∨ dis(vi) or ignores
Pa
it (if we consider Variant II, see below).
• Finally, B sends a done(vi)-message to the scheduler.
We deﬁne the set Πb of the programs of b to be the set of honest
programs of b, i.e. Πb = { ˆΠb}, as deﬁned above, if b is honest,
i.e. for S , B, and the judge a. For simplicity of presentation we
assume that auditor A1 is honest. Note that our security assumption
A2 only states that one auditor is honest. This could be directly
encoded in the left hand sides of the accountability constraints (by
only considering the runs in which at least one auditor is honest).
However, as from the responses of the auditors, the random chal-
lenges are computed in a symmetric way (by XOR) it does not mat-
ter which auditor is honest.
The set of all possible programs is only limited by the network
conﬁguration, if b is not assumed to be honest.
By these speciﬁcations we guarantee that every honest partici-
pant has enough ressources in order to follow the protocol. How-
ever, the entire system remains polynomially bounded.
A.3 Proof of Theorem 1
Fairness. By the deﬁnition of the judging procedure, and the hon-
esty of B and S, it follows that a is fair: This is trivial if a blames
some participant b (i.e. outputs the trivial formula dis(b)) because
of an obvious deviation. Further, a states dis(M) ∨ dis(RNG) ∨
dis(v) iff v complains in the voting booth.
In this case, either
the machine or the RNG indeed cheated or the voter is dishon-
est, because she complained for no reason. Further, if a states
dis(M)∨dis(RNG), then a number occurs on two different receipts,
which only happens with negligible probability if both are honest.
For the same reason, the probability that a states dis(M) because of
a number occuring twice is negligible if M is honest.
Completeness. Let π be an instance of Pa
Bingo1. For a set of runs α,
with Pr[π(1(cid:96)) (cid:55)→ α] we denote the probability that π(1(cid:96)) produces
a run in α. Then we have
Pr[π(1(cid:96)) (cid:55)→ αcompl, ¬(a : dis(M)∨ dis(RNG)∨ dis(v1)), . . .
. . . ,¬(a : dis(M)∨ dis(RNG)∨ dis(vn))] = 0
and
Pr[π(1(cid:96)) (cid:55)→ αtwice, ¬(a : dis(M)∨ dis(RNG))] = 0,
as by the deﬁnition of the judging procedure, a states the respective
formulas in case of the respective events. Hence it remains to show,
that Pr[X] is δk
Bingo-bounded, where X is the event that a run of
π(1(cid:96)) does not belong to γk, αcompl, αtwice and that a does not state
dis(M) nor dis(RNG).
As neither the machine nor the RNG is blamed in a run belonging
to X, we have in particular that these two parties do not deviate from
the protocol in an obvious way, e.g., by not producing numbers at
all. Recall that in this case the booth B would inform S about the
misbehavior, and S would inform then the (honest) judge a about
this, who would output the respective verdict on his tape decisiona.
We distinguish whether or not the machine tries to fake a zero-
knowledge proof, i.e.
if the machine does not produce the same
number of commitments for every candidate or writes different
commitments next to the receipts in the second ZK-proof. Let F de-
note the event that the machine tries to fake some zero-knowledge
proof. Then we have
Pr[X] = Pr[X | F]· Pr[F] + Pr[X | F]· Pr[F]
≤ max(Pr[X | F], Pr[X | F]).
To complete the proof it is enough to show that
Pr[X | F] ≤ 1
2s + f ((cid:96))
(12)
and
Pr[X | F] ≤ max((1−qnum), (1−qrec), max
j=1,...,l
p j)k+1 + f ((cid:96)) (13)
for some negligible function f .
First, let us prove inequality (12). So, assume that F holds, i.e.
the machine fakes some zero-knowledge proof. X means, among
others, that a does not state dis(M). As we assume that B picks the
parameters for the commitment scheme honestly and as the runtime
of system is polynomially bounded, under the DLOG-assumption,
the probability that the machine opens a commitment on one value
to another value is negligible. Further, if the machine tries to cheat
in the shufﬂing and re-randomization phase of a zero-knowledge
proof by pretending that it can open a commitment to another value,
15
this is detected with probability 1
2s as the challenges are really ran-
dom. Hence, as can be shown by a reduction proof, a does not state
dis(M) only with probability 1
2s + f ((cid:96)) for some negligible function
f .
Now, we will prove (13). So, consider the probability X given F,
i.e. the machine does not fake a zero-knowledge proof. F implies
that the machine produces the same number of commitments for
every candidate. Further, we get the following claims:
CLAIM 1. Assume that F and X hold. Then with overwhelming
probability, every receipt published on the bulletin board is well
formed in the following sense: Let x1, . . . ,xl be the numbers printed
on a receipt next to candidates 1, . . . ,l, respectively. For (l − 1)
elements of {x1, . . . ,xl}, a commitment on (i,xi) has been published
on the bulletin board in the initialization phase and no commitment