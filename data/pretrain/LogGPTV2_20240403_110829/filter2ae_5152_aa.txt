**作者：Hcamael@知道创宇404实验室  
时间：2021年8月6日**

### 项目背景
近期，我们正在研究一款软路由。从其官方网站下载的ISO镜像中提取了rootfs，但发现该rootfs无法直接解压出文件系统，怀疑经过某种加密处理。将该软路由安装到PVE环境中后，也无法获取Linux Shell权限，仅能访问到厂商自定义的路由器控制台界面。尽管可以启用telnet或ssh服务并设置密码，但连接后依然只能看到同样的控制台界面。

### 研究策略
#### 下策 - 黑盒测试
在缺乏对系统内部结构了解的情况下进行黑盒测试，难度极高且效率低下，通常只作为最后手段考虑。

#### 中策 - 逆向分析vmlinux
考虑到即使不联网也能正常运行该软路由，推测本地已经具备所有必要的解密条件，缺少的是具体的加密算法和rootfs格式信息。一般而言，这些解密逻辑会包含在vmlinux内。因此，通过逆向工程解析vmlinux中的相关代码段，理论上能够实现对rootfs的手动解压。虽然这种方法技术上可行，但工作量较大。

#### 上策 - 利用GDB调试
由于该软路由是基于KVM虚拟化技术部署在PVE平台上的，我们可以利用GDB工具来调试其内核，并尝试修改内存及寄存器值以达到执行任意命令的目的，从而获得Linux Shell访问权限。

### 使用GDB调试软路由的具体步骤
1. **启动gdbserver**
   在PVE管理界面的`Monitor`选项中输入`gdbserver`指令，默认监听端口为1234。
   
2. **提取vmlinux**
   使用`extract-vmlinux boot/vmlinuz > /tmp/vmlinux`命令导出vmlinux文件。
   
3. **连接远程调试器**
   启动GDB并加载提取出来的vmlinux镜像 (`gdb /tmp/vmlinux`)，随后连接至远程gdbserver (`target remote x.x.x.x:1234`)。
   
4. **寻找用户态入口点**
   为了进入用户空间而非内核空间，需增加软路由的工作负载（例如频繁请求Web服务），然后中断程序多次直至断点位于非`0xFFFFFFFF`开头的地址处，这表明已成功跳转到用户态。
   
5. **注入shellcode**
   直接修改目标进程的内存映射，插入简短的shellcode如`execve("/bin/sh", ["/bin/sh","-c","/usr/sbin/telnetd -l /bin/sh -p xxxxx"], 0)`，其中`telnetd`路径需事先确认存在。

### 注意事项
- 尽量避免直接修改内核态代码以免引起系统崩溃。
- 对于用户态代码的修改也应谨慎操作，特别是针对关键库函数（如`libc`）的改动可能会导致更广泛的稳定性问题。
- 推荐使用自动化脚本或插件简化上述过程，提高工作效率的同时减少人为错误。

### 一键操作
计划开发一个基于GEF框架的GDB插件，通过单条命令完成整个调试流程。为此，收集整理了不同架构下的参数寄存器、系统调用指令以及`execve`系统调用编号等必要信息。初步设计如下：
```python
@register_command
class ExecveCommand(GenericCommand):
    """Execute a command via execve."""
    _cmdline_ = "execve"
    _syntax_  = "{:s} [command]|set addr [address]".format(_cmdline_)
    _example_ = "{:s} /usr/sbin/telnetd -l /bin/bash -p 23333\n{:s} set addr 0x7fb4360748ae".format(_cmdline_)
    _aliases_ = ["exec",]

    def __init__(self):
        super().__init__(complete=gdb.COMPLETE_FILENAME)
```

以上即为我们针对该软路由进行深入分析与破解的整体思路及具体实施方案。