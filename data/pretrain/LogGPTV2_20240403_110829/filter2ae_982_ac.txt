    #endif
            void *p = chunk2mem(victim);
            alloc_perturb(p, bytes);
            return p;
          }
        }
      }
### large bin1
这部分并不是真正地使用large bin，只是计算出了对应的large bin的索引，并调用`malloc_consolidate`函数合并fast
bin，目的是减少堆中的碎片。
    /*
         If this is a large request, consolidate fastbins before continuing.
         While it might look excessive to kill all fastbins before
         even seeing if there is space available, this avoids
         fragmentation problems normally associated with fastbins.
         Also, in practice, programs tend to have runs of either small or
         large requests, but less often mixtures, so consolidation is not
         invoked all that often in most programs. And the programs that
         it is called frequently in otherwise tend to fragment.
       */
      else
      {
        idx = largebin_index(nb);//算出对应的large bin的索引
        //合并 fast bin 到 unsorted bin
        if (atomic_load_relaxed(&av->have_fastchunks))
          malloc_consolidate(av);
      }
### unsorted bin
unsorted bin也存储在bins数组中，下标为1，所以只有一条unsorted bin链表。unsorted
bin也是双向循环链表，但是链表里的chunk大小没有限制，任何大小的chunk都可以放到unsorted
bin链表中，也没有顺序，采用的算法也是FIFO。
遍历unsorted bin的所有chunk，如果unsorted
bin中只有一个chunk且为last_remainder时，就拆分last_remainder，并返回；否则如果当前chunk大小是所需的大小则先尝试放入tcache再返回，否则就将当前chunk放入对应的bin中，如果tcache已经有足够多的chunk则从tcache中返回chunk。当遍历完后，再判断是否有chunk被放入tcache，如果有则从tcache中返回chunk。
    /*
         Process recently freed or remaindered chunks, taking one only if
         it is exact fit, or, if this a small request, the chunk is remainder from
         the most recent non-exact fit.  Place other traversed chunks in
         bins.  Note that this step is the only place in any routine where
         chunks are placed in bins.
         The outer loop here is needed because we might not realize until
         near the end of malloc that we should have consolidated, so must
         do so and retry. This happens at most once, and only when we would
         otherwise need to expand memory to service a "small" request.
       */
    //tcache变量定义及初始化
    #if USE_TCACHE
      INTERNAL_SIZE_T tcache_nb = 0;
      size_t tc_idx = csize2tidx(nb);//nb对应的tcache索引
      if (tcache && tc_idx bk) != unsorted_chunks(av))
        {
          bck = victim->bk;//倒数第二个chunk
          //victim的大小非法
          if (__builtin_expect(chunksize_nomask(victim)  av->system_mem, 0))
            malloc_printerr("malloc(): memory corruption");
          size = chunksize(victim);//victim的大小
          /*
                 If a small request, try to use last remainder if it is the
                 only chunk in unsorted bin.  This helps promote locality for
                 runs of consecutive small requests. This is the only
                 exception to best-fit, and applies only when there is
                 no exact fit for a small chunk.
               */
          if (in_smallbin_range(nb) && //如果请求的大小在small bin的范围内
              bck == unsorted_chunks(av) && //并且unsorted bin中只有一个chunk
              victim == av->last_remainder &&//并且该chunk就是last remainder
              //并且在该chunk中拿走nb的内存后依然可以成为一个chunk
              (unsigned long)(size) > (unsigned long)(nb + MINSIZE))
          {
            /* split and reattach remainder */
            remainder_size = size - nb;//剩余部分的大小
            remainder = chunk_at_offset(victim, nb);//剩余部分的起始地址
            //将剩余部分取代原来的chunk放入unsorted bin链表中
            unsorted_chunks(av)->bk = unsorted_chunks(av)->fd = remainder;
            av->last_remainder = remainder;
            remainder->bk = remainder->fd = unsorted_chunks(av);
            //如果剩余部分过大则将fd_nextsize和bk_nextsize指针置空
            if (!in_smallbin_range(remainder_size))
            {
              remainder->fd_nextsize = NULL;
              remainder->bk_nextsize = NULL;
            }
            //设置victim的头部
            set_head(victim, nb | PREV_INUSE |
                                 (av != &main_arena ? NON_MAIN_ARENA : 0));
            //设置剩余部分的头部
            set_head(remainder, remainder_size | PREV_INUSE);
            //设置剩余部分的尾部
            set_foot(remainder, remainder_size);
            //返回victim
            check_malloced_chunk(av, victim, nb);
            void *p = chunk2mem(victim);
            alloc_perturb(p, bytes);
            return p;
          }
          /* remove from unsorted list */
          //将victim移出链表
          unsorted_chunks(av)->bk = bck;
          bck->fd = unsorted_chunks(av);
          /* Take now instead of binning if exact fit */
          if (size == nb)//如果victim的大小正好是要求的大小
          {
            //设置标识位
            set_inuse_bit_at_offset(victim, size);
            if (av != &main_arena)
              set_non_main_arena(victim);
    #if USE_TCACHE
            /* Fill cache first, return to user only if cache fills.
             We may return one of these chunks later.  */
            //如果tcache没满就优先把victim放入tcache，而不是返回给用户
            if (tcache_nb && tcache->counts[tc_idx] fd;
          }
          else //否则就放入large bin中
          {
            victim_index = largebin_index(size);
            bck = bin_at(av, victim_index);
            fwd = bck->fd;
            /* maintain large bins in sorted order */
            if (fwd != bck)//如果large bin链表不为空
            {
              /* Or with inuse bit to speed comparisons */
              //将PREV_INUSE置1，加速比较
              size |= PREV_INUSE;
              /* if smaller than smallest, bypass loop below */
              //确保bck->bk在main arena中
              assert(chunk_main_arena(bck->bk));
              //如果victim比链表中的最后一个也就是最小的一个还小，就直接插入最后
              if ((unsigned long)(size) bk))
              {
                fwd = bck;
                bck = bck->bk;
                victim->fd_nextsize = fwd->fd;
                victim->bk_nextsize = fwd->fd->bk_nextsize;
                fwd->fd->bk_nextsize = victim->bk_nextsize->fd_nextsize = victim;
              }
              else
              {
                assert(chunk_main_arena(fwd));
                //找到第一个不大于victim的chunk，即找victim的位置
                while ((unsigned long)size fd_nextsize;
                  assert(chunk_main_arena(fwd));
                }
                //如果victim和找到的chunk一样大就不用插入nextsize循环链表
                if ((unsigned long)size == (unsigned long)chunksize_nomask(fwd))
                  /* Always insert in the second position.  */
                  fwd = fwd->fd;//victim插在与之相同大小的chunk的后面
                else //如果victim和找到的chunk不一样大就需要插入nextsize循环链表
                {
                  victim->fd_nextsize = fwd;
                  victim->bk_nextsize = fwd->bk_nextsize;
                  fwd->bk_nextsize = victim;
                  victim->bk_nextsize->fd_nextsize = victim;
                }
                bck = fwd->bk;
              }
            }
            //如果large bin链表为空，直接插入，让victim的fd_nextsize和bk_nextsize都指向自己
            else 
              victim->fd_nextsize = victim->bk_nextsize = victim;
          }
          //利用之前找到的bck和fwd的值将victim插入循环链表中
          mark_bin(av, victim_index);
          victim->bk = bck;
          victim->fd = fwd;
          fwd->bk = victim;
          bck->fd = victim;
    //如果已经将足够多的chunk放入tcache就直接从tcache中找到chunk并返回
    #if USE_TCACHE
          /* If we've processed as many chunks as we're allowed while
         filling the cache, return one of the cached ones.  */
          ++tcache_unsorted_count;
          if (return_cached && mp_.tcache_unsorted_limit > 0 && tcache_unsorted_count > mp_.tcache_unsorted_limit)
          {
            return tcache_get(tc_idx);
          }
    #endif
    #define MAX_ITERS 10000
          //wille循环最多10000次
          if (++iters >= MAX_ITERS)
            break;
        }
    //while循环结束后判断是否有chunk被放进tcache，如果有就从tcache中取出chunk并返回
    #if USE_TCACHE
        /* If all the small chunks we found ended up cached, return one now.  */
        if (return_cached)
        {
          return tcache_get(tc_idx);
        }
    #endif
在这个遍历unsorted bin的过程中，不仅找了所需大小的chunk，还对unsorted
bin中的chunk进行了整理，把他们分别分配到了各自该在的bin中，这也是给chunk找家的唯一代码。
到这里，用到tcache的地方就结束了，可以看到放入tcache中的所有chunk都是和被需要的chunk相同大小的，这是因为在很多情况下，刚被需要的内存块大小有更大的概率被继续需要，所以在tcache链未满的情况下把所有与被需要的内存块大小相同的chunk放入tcache，并在分配时优先从tcache中找，可以有效地提高内存分配的效率。
### large bin2
large bin也在bins数组中，一共有63个，不同的是每个large
bin中的chunk并不是大小相同的，而是存储一定范围的chunk，每个large bin存储的范围都不同。
查找完unsorted bin后就真正开始从large bin中找，因为large
bin是有序链表，第一个最大，依次减小，所以就依次扫描链表，直到找到一个符合要求的最小chunk。
    /*
             If a large request, scan through the chunks of current bin in
             sorted order to find smallest that fits.  Use the skip list for this.
           */
        if (!in_smallbin_range(nb))
        {
          bin = bin_at(av, idx);//idx在之前被赋值，idx = largebin_index(nb)
          /* skip scan if empty or largest chunk is too small */
          //如果large bin非空并且large bin中最大的chunk不小于nb
          if ((victim = first(bin)) != bin && (unsigned long)chunksize_nomask(victim) >= (unsigned long)(nb))
          {