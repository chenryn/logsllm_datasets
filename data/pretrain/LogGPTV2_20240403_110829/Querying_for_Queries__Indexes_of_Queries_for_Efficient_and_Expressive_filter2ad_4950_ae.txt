### Transposition and Encoding of Π

To clarify the structure, we should transpose the matrix \(\Pi\) with respect to its height (k) and depth (p) axes. This transposition yields a new matrix \(\Pi' \in F^{p \times r \times k}\), where for each \(i = 1, \ldots, p\) and \(j = 1, \ldots, k\), the \(i\)-th "plane" corresponds to a specific search term \(z_i\). In this plane, the vector intersecting the "layer" at depth \(j\) holds a positional query for the \(j\)-th best matching block for \(z_i\) in the database \(D\).

Each server will then hold one bucket from a "layer-wise" \(k\)-ary encoding of \(\Pi'\). To fetch the best \(k\) matches for the search term \(z_i\), the user encodes \(k\) copies of the standard basis vector \(\vec{e}_i\) in a \(t\)-private \(k\)-batch query, at \(x = 0\), \(x = 1\), and so on up to \(x = k - 1\). It is important to note that the user encodes the same basis vector at each of \(x = 0, \ldots, k - 1\).

In a typical \(k\)-batch query, encoding multiple copies of the same basis vector would not provide any additional benefit to the user and would only unnecessarily reduce the query’s Byzantine robustness. Additionally, the user can choose to encode just \(m\) copies, where \(m \geq 1\), and let \(x_1, \ldots, x_\ell \in F \setminus \{0, \ldots, k - 1\}\) be pairwise distinct scalars.

### Index of k-Batch Queries

A sequence of matrices \(\Pi_1, \ldots, \Pi_\ell \in F^{p \times r}\) is an index of \(k\)-batch queries for Goldberg’s IT-PIR with bucket coordinates \(x_1, \ldots, x_\ell\) if, for each \(i = 1, \ldots, p\), the matrix
\[
\begin{pmatrix}
\pi_{i0} & \cdots & \pi_{i(k-1)}
\end{pmatrix}
\]
is a pseudo-permutation matrix, where for each \(j \in [0, k - 1]\),
\[
\pi_{ij} = \vec{e}_i \cdot \sum_{n=1}^\ell \left( \frac{j - x_n}{x_n - x_1} \cdot \Pi_n \cdot \prod_{m \neq n} \frac{j - x_m}{x_n - x_m} \right).
\]

We emphasize that indexes of \(k\)-batch queries are a special case of \(k\)-batch indexes of queries. Therefore, Theorem 4.2 implies that \(t\)-private queries through an index of \(k\)-batch queries \(\Pi\) are \(t\)-private with respect to \(\Pi\). Consequently, Theorem 5.2 is a restatement of Corollary 4.3.

**Theorem 5.2:** The construction just described implements \(t\)-private, \(v\)-Byzantine-robust \((m, \ell)\)-server IT-PIR for any \(m \geq t + 2k - 1\) and \(v \leq m - t - 2k + 1\).

### Related Work

This section discusses the existing literature on expressive PIR queries, highlighting how our new techniques relate to and differ from prior works.

#### Keyword-Based PIR Queries

Chor, Gilboa, and Naor [7] proposed a mechanism for users to fetch blocks privately by specifying keywords of interest. Similar to our indexes of queries, they achieve this by augmenting the database with an auxiliary data structure (such as a binary search tree, a trie, or a minimal perfect hash function) to help users translate keyword-based requests into positional PIR queries. The user employs positional queries to obliviously traverse the auxiliary data structure, eventually fetching the desired record using a final positional PIR query over the actual data.

In contrast, indexes of queries allow users to fetch data in a single round of interaction without revealing any information about the structure and layout of the underlying data set. The communication and computation costs are decoupled from the number of blocks in the database and are upper-bounded by the cost of a positional PIR query.

#### SQL-Based PIR Queries

Olumofin and Goldberg [21] extended Chor et al.’s approach to enable users to fetch blocks privately using simple SQL queries filtered by WHERE or HAVING clauses. They accomplish this by preparing inverted indexes that map sensitive search criteria to the physical locations of associated blocks in the database. While their technique may leak some information about which blocks a user seeks, it hides the sensitive search terms.

Unlike Olumofin and Goldberg’s approach, indexes of batch queries can return batches in a single response using only a single query, without leaking the size of the response.

#### PIR from Function Secret Sharing (FSS)

Our proposal is most directly comparable to recent PIR protocols based on Boyle, Gilboa, and Ishai’s function secret sharing (FSS) [3–5]. FSS allows clients to split functions into pairs of "function shares," enabling the construction of expressive 2-server protocols for private record fetching using polynomial-sized branching programs. FSS constructions for more than two servers exist but are less efficient and require stronger computational assumptions.

FSS permits keyword searches without the need for the server to prepare auxiliary data structures. However, this flexibility comes at the cost of stronger security assumptions and higher computational costs. Unlike our information-theoretic PIR, FSS-based PIR protocols (i) require a non-collusion assumption, (ii) provide only computational security, and (iii) incur higher computational costs.

#### SQL-Based PIR Queries from FSS

Wang, Yun, Goldwasser, Vaikuntanathan, and Zaharia [27] proposed Splinter, a system that uses FSS to support a range of queries. Splinter provides both the best and worst of both worlds: it supports a similar set of queries as SQL-based PIR with improved performance but leaks the shape of queries and requires strong computational and non-collusion assumptions.

Despite the benefits of indexes of queries, there are use cases where keyword- and SQL-based approaches are more useful. An actual private email client, for example, would benefit from simultaneous support for both indexes of queries and keyword- or SQL-based queries. Fortunately, none of these approaches require modifications to the underlying database, allowing servers to support all of them simultaneously.

### Implementation and Evaluation

All three variants of indexes of queries introduced in this paper yield sparse matrices, making querying an instance of sparse matrix-vector (SpMV) multiplication, which is well-suited for implementation on massively parallel compute platforms like GPUs.

To empirically gauge the practicality of our approach, we implemented finite-field SpMV multiplication and ran experiments on an Nvidia Tesla K20 GPU Accelerator and an Intel Core i5-2500 CPU. Each experiment was repeated for 100 trials, and we report the mean number of requests per second. Error bars were omitted due to their small size (all standard deviations were below 2% of the mean).

**Figure 2:** Number of 4-batch index of queries requests our implementation can process per second. Figure 2(a) shows the counts for a massively parallel implementation on an Nvidia Tesla K20 GPU Accelerator; Figure 2(b) shows the same counts for a single-threaded implementation on an Intel Core i5-2500 CPU.