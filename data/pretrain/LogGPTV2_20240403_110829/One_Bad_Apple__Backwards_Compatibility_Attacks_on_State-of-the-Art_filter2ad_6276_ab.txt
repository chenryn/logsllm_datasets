In
particular GCM provides security against chosen-ciphertext
attacks, like padding-oracle attacks [68, 61, 24, 38, 3], for
instance. GCM is therefore an attractive choice for a re-
placement of modes of operation that are susceptible to such
attacks.
For this reason, GCM was recently included in the XML
Encryption [27] standard as a replacement for CBC, in re-
sponse to the attack from [38]. It is also widely supported
in other applications, like IPsec [70].
Description.
In the sequel let us assume a block-cipher
(Enc, Dec), consisting of an encryption algorithm Enc and
a decryption algorithm Dec, with 128-bit block size3 (like
AES [2]). Let m = (m(1), . . . , m(n)) be a message con-
sisting of n 128-bit blocks, where n < 232.4 Let k be the
symmetric key used for encryption and decryption. A mes-
sage is encrypted with (Enc, Dec) in GCM-mode as follows
(cf. Figure 1).
• A 96-bit initialization vector iv ∈ {0, 1}96 is cho-
sen at random. A counter cnt is initialized to cnt :=
iv||031||1, where 031 denotes the string consisting of
31 0-bits.
3In [26] GCM is speciﬁed only for 128-bit block ciphers.
4This is the maximal message length of GCM, longer messages must
be split and encrypted separately.
Figure 1. Counter-mode encryption and de-
cryption, as used in Galois Counter Mode
(GCM), of two message blocks.
• For i ∈ {1, . . . , n}, the i-th message block5 m(i) is
encrypted by computing the i-th ciphertext block C (i)
as
C (i) := Enc(k, cnt + i) ⊕ m(i).
• In parallel, an authentication tag τ (a message authen-
tication code) is computed using arithmetic over a bi-
nary Galois ﬁeld. The details of this computation are
not relevant for our attack.6
ciphertext
is
C
=
• The
resulting
(iv, C (1), . . . , C (n), τ ).
The decryption procedure inverts this process in the obvious
way.
2.1.2 Cipher-Block Chaining
Cipher-block chaining (CBC) [53] is presumably the most
widely used block-cipher mode of operation in practice.
Let (Enc, Dec) be a block-cipher with 128-bit block
size7, let m = (m(1), . . . , m(n)) be a (padded) message
consisting of n 128-bit blocks, and let k be the symmetric
key used for encryption and decryption. A message is en-
crypted with (Enc, Dec) and key k in CBC-mode as follows
(cf. Figure 2).
• An initialization vector iv ∈ {0, 1}128 is chosen at
random. The ﬁrst ciphertext block is computed as
x := m(1) ⊕ iv,
C (1) := Enc(k, x).
(1)
5Note that i < 232.
6In fact, the BC attack described in this section does not only apply
to Galois counter mode, but to any “counter” mode of operation which
encrypts messages in a similar way, cf. Section 3.1.
7CBC is speciﬁed for an arbitrary block length, we consider the special
case for consistency reasons.
(cid:11)(cid:76)(cid:89)(cid:3)(cid:95)(cid:95)(cid:3)(cid:19)(cid:17)(cid:17)(cid:17)(cid:19)(cid:20)(cid:12)(cid:3)(cid:14)(cid:3)(cid:20)(cid:40)(cid:81)(cid:70)(cid:78)(cid:38)(cid:11)(cid:20)(cid:12)(cid:80)(cid:11)(cid:20)(cid:12)(cid:11)(cid:76)(cid:89)(cid:3)(cid:95)(cid:95)(cid:3)(cid:19)(cid:17)(cid:17)(cid:17)(cid:19)(cid:20)(cid:12)(cid:3)(cid:14)(cid:3)(cid:21)(cid:40)(cid:81)(cid:70)(cid:78)(cid:38)(cid:11)(cid:21)(cid:12)(cid:80)(cid:11)(cid:21)(cid:12)(cid:40)(cid:81)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)(cid:76)(cid:82)(cid:81)(cid:11)(cid:76)(cid:89)(cid:3)(cid:95)(cid:95)(cid:3)(cid:19)(cid:17)(cid:17)(cid:17)(cid:19)(cid:20)(cid:12)(cid:3)(cid:14)(cid:3)(cid:20)(cid:40)(cid:81)(cid:70)(cid:78)(cid:80)(cid:11)(cid:20)(cid:12)(cid:38)(cid:11)(cid:20)(cid:12)(cid:11)(cid:76)(cid:89)(cid:3)(cid:95)(cid:95)(cid:3)(cid:19)(cid:17)(cid:17)(cid:17)(cid:19)(cid:20)(cid:12)(cid:3)(cid:14)(cid:3)(cid:21)(cid:40)(cid:81)(cid:70)(cid:78)(cid:80)(cid:11)(cid:21)(cid:12)(cid:38)(cid:11)(cid:21)(cid:12)(cid:39)(cid:72)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)(cid:76)(cid:82)(cid:81)2.2 The Backwards Compatibility Attack
In this section, we describe a generic backwards com-
patibility attack on GCM, which is based on a weakness
of CBC. We will ﬁrst describe an abstract application sce-
nario, which is practically motivated by the recent develop-
ment of the XML Encryption standard. Then we describe
the attack that allows an attacker to determine whether a
ciphertext contains a certain message, and discuss the rele-
vance of such distinguishing attacks. Finally, we sketch op-
timizations of the generic attack, which lead to signiﬁcant
efﬁciency improvements.
2.2.1 Application Scenario
In the sequel let us consider a scenario (an example appli-
cation) in which encrypted messages are sent from senders
S1, . . . , S(cid:96) to a receiver R. Each ciphertext C received by
R consists of two components C = (Cpub, C CBC
sym ), where
• Cpub is a public-key encryption of an ephemeral ses-
• C CBC
sym encrypts the actual payload data under key k,
sion key k under R’s public-key, and
using a block-cipher in CBC-mode.
Suppose that S1, . . . , S(cid:96) and R use this application, un-
til it eventually turns out that it is susceptible to a chosen-
ciphertext attack (CCA) which allows an attacker to decrypt
ciphertexts in CBC-mode. For example, this may involve a
padding oracle attack.
The application is immediately updated. The update re-
places CBC-mode with GCM-mode, because GCM-mode
provides provable CCA-security [51]. It is well-known that
if the public-key encryption scheme used to encrypt the ses-
sion key k is CCA-secure too,8 then this combination forms
a CCA-secure encryption scheme. Therefore senders using
this combination of algorithms may expect that their data is
protected against chosen-ciphertext attacks.
After
the update the receiver R remains capable
of decrypting CBC-mode ciphertexts
for backwards-
compatibility reasons, since it is infeasible to update the
software of all senders S1, . . . , S(cid:96) simultaneously. How-
ever, at least those senders that are using GCM instead of
CBC may expect that their data is sufﬁciently protected.
We show that the latter is not true. The sole capability
of R being able to decrypt CBC ciphertexts signiﬁcantly
undermines the security of GCM ciphertexts.
2.2.2 A Distinguishing Attack on GCM
We describe a distinguishing attack, which allows the at-
tacker to test whether a GCM ciphertext contains a partic-
ular message.The attack exploits the CBC decryption capa-
8For
instance, RSA-OAEP [10],
standardized in RSA-PKCS#1
v2.1 [42], is a widely used public-key encryption algorithm that provably
meets this security property [30].
Figure 2. Cipher-block chaining (CBC) en-
cryption and decryption of
two message
blocks.
• The subsequent ciphertext blocks C (2), . . . , C (d) are
computed as
x := m(i) ⊕ C (i−1),
C (i) := Enc(k, x)
(2)
for i = 2, . . . , n.
• The resulting ciphertext is C = (iv, C (1), . . . , C (n)).
The decryption procedure inverts this process in the obvious
way.
2.1.3 Known Attacks on CBC
Starting with Vaudenay’s padding-oracle attacks [68], sev-
eral efﬁcient attacks exploiting the malleability of CBC-
encrypted ciphertexts have been published. Prominent tar-
gets are ASP.NET [24], XML Encryption [38], and Data-
gram TLS [3]. These attacks are the main reason why CBC
is phased out in new standards and replaced with modes of
operation like GCM that provide security against chosen-
ciphertext attacks.
An abstract view on attacks on CBC. The details of
these attacks will not be important for our further consid-
erations. Only two properties that all these attacks have in
common will be important for us: they allow to decrypt ci-
phertexts encrypted in CBC-mode, and they are efﬁcient.
the at-
tacks provide an efﬁcient CBC decryption oracle OCBC.
This oracle takes as input a CBC-encrypted cipher-
text C = (iv, C (1), . . . , C (n)) encrypting a message
(m(1), . . . , m(n)), and returns
from an abstract point of view,
Thus,
(m(1), . . . , m(n)) = OCBC(C)
(cid:76)(cid:89)(cid:40)(cid:81)(cid:70)(cid:78)(cid:38)(cid:11)(cid:20)(cid:12)(cid:80)(cid:11)(cid:20)(cid:12)(cid:40)(cid:81)(cid:70)(cid:78)(cid:38)(cid:11)(cid:21)(cid:12)(cid:80)(cid:11)(cid:21)(cid:12)(cid:40)(cid:81)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)(cid:76)(cid:82)(cid:81)(cid:76)(cid:89)(cid:39)(cid:72)(cid:70)(cid:78)(cid:80)(cid:11)(cid:20)(cid:12)(cid:38)(cid:11)(cid:20)(cid:12)(cid:39)(cid:72)(cid:70)(cid:78)(cid:80)(cid:11)(cid:21)(cid:12)(cid:38)(cid:11)(cid:21)(cid:12)(cid:39)(cid:72)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)(cid:76)(cid:82)(cid:81)bility of R. It can be applied block-wise to each ciphertext
block, which enables the attacker to employ a “divide-and-
conquer” strategy that in many scenarios is equivalent to a
decryption attack. See Section 2.2.3 for further discussion
of why distinguishing attacks matter.
The attack consists of two key ingredients.
1. We show that the availability of the CBC decryption
attack allows the attacker not only to decrypt arbitrary
ciphertexts in CBC-mode, but also to invert the block-
cipher used within CBC at arbitrary positions. That is,
we show that a CBC decryption oracle implies a block-
cipher decryption oracle.
2. We show that this block-cipher decryption oracle can
be used to mount a distinguishing attack on GCM.
CBC-Decryption implies Block-Cipher Inversion. Due
to the availability of the CBC decryption attack, R invol-
untarily provides an efﬁcient CBC decryption oracle OCBC,
which takes as input a tuple C = (Cpub, C CBC
sym ), and returns
sym under the key k contained in Cpub.
the decryption of C CBC
We show that this oracle OCBC can be turned into a
new oracle ODec that inverts the block-cipher used in CBC-
mode. Oracle ODec takes as input a tuple C = (Cpub, C(cid:48)),
and returns the block-cipher decryption m(cid:48) = Dec(k, C(cid:48))
of C(cid:48) under the key k contained in Cpub.
Oracle ODec proceeds on input (Cpub, C(cid:48)) as follows.
1. It chooses an arbitrary initialization vector iv(cid:48).
2. It queries the CBC decryption oracle on input
(Cpub, (iv(cid:48), C(cid:48))).
Note that (iv(cid:48), C(cid:48)) is a valid CBC ciphertext consist-
ing of an initialization vector iv and a single ciphertext
block C(cid:48). Therefore oracle OCBC will return the CBC
decryption
m = Dec(k, C(cid:48)) ⊕ iv
of (iv(cid:48), C(cid:48)).
3. Finally, ODec computes and outputs m(cid:48) = m ⊕ iv(cid:48).
It is straightforward to verify that m(cid:48) = Dec(k, C(cid:48)).
Distinguishing GCM Ciphertexts. Consider an attacker
that eavesdrops an encrypted message C = (Cpub, C GCM
sym )
sent from a sender S to receiver R. Ciphertext Cpub en-
crypts a key k, and C GCM
sym = (iv, C (1), . . . , C (n), τ ) en-
crypts a message m = (m(1), . . . , m(n)) in GCM-mode
with key k.
Assume the attacker has access to an oracle ODec which
takes as input a tuple C = (Cpub, C(cid:48)) where C(cid:48) is a single
ciphertext block, and returns the block cipher decryption of
C(cid:48) under the key k contained in Cpub.
The attacker can use this oracle to test whether the i-
th encrypted message block m(i) contained in the eaves-
dropped ciphertext block C (i) is equal to a certain message
m(cid:48). It proceeds as follows.
1. The attacker queries oracle ODec by submitting the ci-
phertext
˜C := (Cpub, C (i) ⊕ m(cid:48)).
2. If the decryption oracle ODec responds with
ODec( ˜C) = iv||031||1 + i,
(3)
then the adversary concludes that m(cid:48) = m(i).
To see that this indeed allows the attacker to determine
whether C (i) encrypts m(cid:48), note that in GCM-mode
Dec(k, C (i) ⊕ m(i)) = iv||031||1 + i
holds if and only if
C (i) = Enc(k, iv||031||1 + i) ⊕ m(i).
Because (Enc, Dec) is a block-cipher, Enc(k,·) is a permu-
tation, and Dec(k,·) = Enc
−1(k,·) is its inverse. Thus, if
Equation (3) holds, then it must hold that m(i) = m(cid:48).
2.2.3 Why Distinguishing Attacks Matter
Practitioners are prone to dismissing distinguishing attacks
as being only of theoretical interest. However, we caution
against this viewpoint, for two reasons. Firstly, such at-
tacks are readily converted into plaintext recovery attacks
when the plaintext is known to be of low entropy. We will
demonstrate this in practice in Section 5.2. Secondly, such
attacks are indicative of problems that tend to become more
severe with time. The recent example of TLS1.0 provides
a good example of this phenomenon: as early as 1995,
Rogaway [62] pointed out that CBC encryption is vulner-
able to a chosen plaintext distinguishing attack when the
IVs used are predictable to the adversary. This vulnerabil-
ity was addressed in TLS1.1, but TLS1.0 support remained
widespread. Then in 2011, the Duong and Rizzo BEAST
attack [25] showed how to extend Rogaway’s original ob-
servation to produce a full plaintext recovery attack. Their
attack applies to certain applications of TLS in which there
is some adversarially-controllable ﬂexibility in the position
of unknown plaintext bytes. The resulting scramble to up-
date implementations to avoid the Rogaway/BEAST attack
could easily have been avoided had the distinguishing attack
been given more credence in the ﬁrst place.
2.2.4 Optimizations
We have based our description of the GCM distinguishing
attack in Section 2.2.2 on the availability of an abstract CBC
decryption oracle OCBC. This oracle can be provided some-
how, that is, by an arbitrary attack on CBC-mode encryp-
tion. The distinguishing attack uses the OCBC oracle naively
as a black-box, without taking into account which speciﬁc
weaknesses of CBC-encryption and the target application
are exploited to implement OCBC. While on the positive
side this implies that the GCM distinguishing attack works
in combination with any CBC decryption attack, we also
note that an attack making naive usage of the OCBC oracle
is potentially not optimally efﬁcient.
For instance, in practice the CBC decryption oracle is
usually given by a padding oracle attack. A typical padding
oracle attack requires on average between 14 [38] and
128 [68, 24] chosen-ciphertext queries to recover one plain-
If the CBC decryption oracle OCBC is used
text byte.
naively as a black-box, without further consideration of
which particular attack is performed by OCBC, then this
complexity is inherited by the attack on GCM. Thus, in or-
der to test whether a particular GCM-encrypted ciphertext
block C (i) contains a particular message m(cid:48) (in case of a
16-byte block cipher like AES [2]) one expects that between
14·16 = 224 and 128·16 = 2048 chosen-ciphertext queries
are required to perform one test.
We note that the GCM distinguishing attack can be im-
proved dramatically by exploiting speciﬁc properties of the
provided CBC padding oracle and the application. Jumping
a bit ahead, our implementation of the GCM distinguish-
ing attack (as described in Section 5.2) uses an optimized
version of the naive attack from Section 2.2.2. This opti-
mized attack takes into account speciﬁc details of the target
application, like formatting of valid plaintexts and padding,
which allows for much more efﬁcient attacks. For the opti-
mized attacks on GCM in XML Encryption and JOSE de-
tailed in Section 5.2, only 2 queries are already sufﬁcient to
mount our distinguishing attack.
3 Further BC Attacks on Symmetric Crypto-
graphy and Generic Countermeasures
The principle of backwards-compatibility attacks on
symmetric encryption schemes is of course not limited to
CBC and GCM. We have chosen to describe this special
case in the previous section as a ﬁrst example, and because
it represents a reasonable practical scenario which nicely
matches the practical attacks described in Section 5.2. In
this section, we discuss further BC attacks on symmetric
encryption schemes and generic countermeasures.
3.1 BC Attacks on Other Modes of Operation
There exists a large number of block-cipher modes of
operation deﬁned by various organizations in various stan-
dards. For instance, popular unauthenticated modes of oper-
ation are ECB, CBC, OFB, and CTR [53, 55]. Widely used
authenticated modes of operation are OCB [63], EAX [11],
and CCM [56].
For any authenticated mode of operation, one can select
a suitable unauthenticated mode of operation and describe
a backwards compatibility attack which allows an attacker
to distinguish encrypted messages or even to decrypt high-
entropy ciphertexts. Since of course most combinations of