### Chapter 3: Testing Techniques

#### 3.9.4 Unit Testing
- **Page:** 90

#### 3.9.5 Fault Injection
- **Page:** 90

#### 3.9.6 Syntax Testing
- **Page:** 91

#### 3.9.7 Negative Testing
- **Page:** 94

#### 3.9.8 Regression Testing
- **Page:** 95

#### 3.10 Summary
- **Page:** 96

### Chapter 4: Fuzzing Metrics

#### 4.1 Threat Analysis and Risk-Based Testing
- **Page:** 103

##### 4.1.1 Threat Trees
- **Page:** 104

##### 4.1.2 Threat Databases
- **Page:** 105

##### 4.1.3 Ad-Hoc Threat Analysis
- **Page:** 106

#### 4.2 Transition to Proactive Security
- **Page:** 107

##### 4.2.1 Cost of Discovery
- **Page:** 108

##### 4.2.2 Cost of Remediation
- **Page:** 115

##### 4.2.3 Cost of Security Compromises
- **Page:** 116

##### 4.2.4 Cost of Patch Deployment
- **Page:** 117

#### 4.3 Defect Metrics and Security
- **Page:** 120

##### 4.3.1 Coverage of Previous Vulnerabilities
- **Page:** 121

##### 4.3.2 Expected Defect Count Metrics
- **Page:** 124

##### 4.3.3 Vulnerability Risk Metrics
- **Page:** 125

##### 4.3.4 Interface Coverage Metrics
- **Page:** 127

##### 4.3.5 Input Space Coverage Metrics
- **Page:** 127

##### 4.3.6 Code Coverage Metrics
- **Page:** 130

##### 4.3.7 Process Metrics
- **Page:** 133

#### 4.4 Test Automation for Security
- **Page:** 133

#### 4.5 Summary
- **Page:** 134

### Chapter 5: Building and Classifying Fuzzers

#### 5.1 Fuzzing Methods
- **Page:** 137

##### 5.1.1 Paradigm Split: Random or Deterministic Fuzzing
- **Page:** 138

##### 5.1.2 Source of Fuzz Data
- **Page:** 140

##### 5.1.3 Fuzzing Vectors
- **Page:** 141

##### 5.1.4 Intelligent Fuzzing
- **Page:** 142

##### 5.1.5 Intelligent Versus Dumb (Nonintelligent) Fuzzers
- **Page:** 144

##### 5.1.6 White-Box, Black-Box, and Gray-Box Fuzzing
- **Page:** 144

#### 5.2 Detailed View of Fuzzer Types
- **Page:** 145

##### 5.2.1 Single-Use Fuzzers
- **Page:** 145

##### 5.2.2 Fuzzing Libraries: Frameworks
- **Page:** 146

##### 5.2.3 Protocol-Specific Fuzzers
- **Page:** 148

##### 5.2.4 Generic Fuzzers
- **Page:** 149

##### 5.2.5 Capture-Replay
- **Page:** 150

##### 5.2.6 Next-Generation Fuzzing Frameworks: Sulley
- **Page:** 159

##### 5.2.7 In-Memory Fuzzing
- **Page:** 161

#### 5.3 Fuzzer Classification via Interface
- **Page:** 162

##### 5.3.1 Local Program
- **Page:** 162

##### 5.3.2 Network Interfaces
- **Page:** 162

##### 5.3.3 Files
- **Page:** 163

##### 5.3.4 APIs
- **Page:** 164

##### 5.3.5 Web Fuzzing
- **Page:** 164

##### 5.3.6 Client-Side Fuzzers
- **Page:** 164

##### 5.3.7 Layer 2 Through 7 Fuzzing
- **Page:** 165

#### 5.4 Summary
- **Page:** 166

### Chapter 6: Target Monitoring

#### 6.1 What Can Go Wrong and What Does It Look Like?
- **Page:** 167

##### 6.1.1 Denial of Service (DoS)
- **Page:** 167

##### 6.1.2 File System–Related Problems
- **Page:** 168

##### 6.1.3 Metadata Injection Vulnerabilities
- **Page:** 168

##### 6.1.4 Memory-Related Vulnerabilities
- **Page:** 169

#### 6.2 Methods of Monitoring
- **Page:** 170

##### 6.2.1 Valid Case Instrumentation
- **Page:** 170

##### 6.2.2 System Monitoring
- **Page:** 171

##### 6.2.3 Remote Monitoring
- **Page:** 175

##### 6.2.4 Commercial Fuzzer Monitoring Solutions
- **Page:** 176

##### 6.2.5 Application Monitoring
- **Page:** 176

#### 6.3 Advanced Methods
- **Page:** 180

##### 6.3.1 Library Interception
- **Page:** 180

##### 6.3.2 Binary Simulation
- **Page:** 181

##### 6.3.3 Source Code Transformation
- **Page:** 183

##### 6.3.4 Virtualization
- **Page:** 183

#### 6.4 Monitoring Overview
- **Page:** 184

#### 6.5 A Test Program
- **Page:** 184

##### 6.5.1 The Program
- **Page:** 184

##### 6.5.2 Test Cases
- **Page:** 185

##### 6.5.3 Guard Malloc
- **Page:** 187

##### 6.5.4 Valgrind
- **Page:** 188

##### 6.5.5 Insure++
- **Page:** 189

#### 6.6 Case Study: PCRE
- **Page:** 190

##### 6.6.1 Guard Malloc
- **Page:** 192

##### 6.6.2 Valgrind
- **Page:** 193

##### 6.6.3 Insure++
- **Page:** 194

#### 6.7 Summary
- **Page:** 195

### Chapter 7: Advanced Fuzzing

#### 7.1 Automatic Protocol Discovery
- **Page:** 197

#### 7.2 Using Code Coverage Information
- **Page:** 198

#### 7.3 Symbolic Execution
- **Page:** 199

#### 7.4 Evolutionary Fuzzing
- **Page:** 201

##### 7.4.1 Evolutionary Testing
- **Page:** 201

##### 7.4.2 ET Fitness Function
- **Page:** 201

##### 7.4.3 ET Flat Landscape
- **Page:** 202

##### 7.4.4 ET Deceptive Landscape
- **Page:** 202

##### 7.4.5 ET Breeding
- **Page:** 203

##### 7.4.6 Motivation for an Evolutionary Fuzzing System
- **Page:** 203

##### 7.4.7 EFS: Novelty
- **Page:** 204

##### 7.4.8 EFS Overview
- **Page:** 204

##### 7.4.9 GPF + PaiMei + Jpgraph = EFS
- **Page:** 206

##### 7.4.10 EFS Data Structures
- **Page:** 206

##### 7.4.11 EFS Initialization
- **Page:** 207

##### 7.4.12 Session Crossover
- **Page:** 207

##### 7.4.13 Session Mutation
- **Page:** 208

##### 7.4.14 Pool Crossover
- **Page:** 209

##### 7.4.15 Pool Mutation
- **Page:** 210

##### 7.4.16 Running EFS
- **Page:** 211

##### 7.4.17 Benchmarking
- **Page:** 215

##### 7.4.18 Test Case—Golden FTP Server
- **Page:** 215

##### 7.4.19 Results
- **Page:** 215

##### 7.4.20 Conclusions and Future Work
- **Page:** 219

#### 7.5 Summary
- **Page:** 219

### Chapter 8: Fuzzer Comparison

#### 8.1 Fuzzing Life Cycle
- **Page:** 221

##### 8.1.1 Identifying Interfaces
- **Page:** 221

##### 8.1.2 Input Generation
- **Page:** 222

##### 8.1.3 Sending Inputs to the Target
- **Page:** 222

##### 8.1.4 Target Monitoring
- **Page:** 223

##### 8.1.5 Exception Analysis
- **Page:** 223

##### 8.1.6 [Continued]