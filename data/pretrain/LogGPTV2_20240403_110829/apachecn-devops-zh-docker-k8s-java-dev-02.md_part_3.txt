对于我们的卷示例，我在我的`D`驱动器上创建了一个`docker_volumes/volume1`目录，并在里面创建了一个空的`data.txt`文件:
![](img/6a333358-6ef0-443b-afb7-f33ecce3d8fe.png)
创建卷有两种方法。第一个是在运行映像时指定`-v`选项。让我们运行我们已经知道的`busybox`映像，同时为我们的数据创建一个卷:
```
$ docker run -v d:/docker_volumes/volume1:/volume -it busybox  
```
在前面的命令中，我们使用`-v`开关创建了一个卷，并指示 Docker 将`host`目录`d:/docker_volumes/volume1`映射到运行容器中的`/volume`目录。如果我们现在列出正在运行的`busybox`容器中的`/volume`目录的内容，我们可以看到我们的空`data1.txt`文件，如下图所示:
![](img/19c70934-a246-4ec6-8189-29df936dd685.png)
`-v`选项中的参数是主机上的目录(在本例中是您自己的操作系统，在我们的示例中是`d:/docker_volumes/volume1`)、冒号以及容器可用的路径(在我们的示例中是`/volume1`)。创建的卷是一种映射目录。它可用于容器，也可用于主机操作系统。任何已经存在于映射目录(主机的`d:/docker_volumes/volume1`)中的文件将在容器中可用；它们不会在映射过程中被删除。
`-v`选项不仅可以用于目录，也可以用于单个文件。如果您希望容器中有可用的配置文件，这将非常有用。最好的例子是来自 Docker 官方文档的例子:
```
$ docker run -it -v ~/.bash_history:/root/.bash_history ubuntu 
```
执行前面的命令将在本地机器和运行的 Ubuntu 容器之间产生相同的 bash 历史。最重要的是，如果您退出容器，您自己的本地机器上的 bash 历史将包含您一直在容器内执行的 bash 命令。例如，作为开发人员，当调试或试用应用配置时，映射文件对您也很有用。
Mapping a single file from a host allows exposing a configuration of your application.
除了在启动容器时创建卷之外，还有一个在启动容器之前创建卷的命令。我们现在就用。
创建无名卷的最简单方式就是:
```
$ docker volume create 
```
作为输出，Docker 将为您提供卷标识符，您以后可以使用它来引用该卷。最好给一卷起一个有意义的名字。要创建独立的命名卷，请执行以下命令:
```
$ docker volume create --name myVolume  
```
要列出我们现在可用的卷，请执行`docker volume ls`命令:
```
$ docker volume ls  
```
输出将只是我们到目前为止创建的卷列表:
![](img/25ad0942-6c10-4d34-b207-cc10e149bebb.png)
以这种方式创建的卷不会与主机上的路径显式映射。如果容器的基本映像包含指定装载点的数据(作为 Dockerfile 处理的结果)，该数据将在卷初始化时复制到新卷中。这与显式指定`host`目录不同。其背后的思想是，在创建映像时，您不应该关心卷在主机系统上的位置，这使得映像可以在不同的主机之间移植。让我们运行另一个容器，并将命名卷映射到其中:
```
$ docker run -it -v myVolume:/volume --name myBusybox3 busybox  
```
请注意，这次我们没有在主机上指定路径。相反，我们指示 Docker 使用我们在上一步中创建的命名卷。命名卷将在容器中的`/volume`路径可用。让我们在卷上创建一个文本文件:
![](img/509483f3-7508-4178-9310-1402f884c648.png)
如果我们现在运行另一个容器，指定相同的命名卷，我们将能够访问我们先前创建的`myBusybox3`容器中可用的相同数据:
```
$ docker run -it -v myVolume:/volume --name myBusybox4 busybox  
```
我们的两个容器现在共享同一个卷，如下面的截图所示:
![](img/5b998a22-c56f-4b49-a863-43459ba95d05.png)
Docker 命名卷是一种在容器之间共享卷的简单方法。它们也是纯数据容器的一个很好的替代，在 Docker 的旧时代，纯数据容器是一种常见的做法。现在已经不是这样了，命名卷要好得多。值得注意的是，每个容器的容量不仅限于一个，因为这将是一个严重的限制。
You can use the `-v` multiple times to mount multiple data volumes.
另一个在容器之间共享容积的选择是`-volumes-from`开关。如果您的一个容器已经装载了卷，通过使用此选项，我们可以指示 Docker 使用映射到其他容器中的卷，而不是提供卷的名称。考虑这个例子:
```
$ docker run -it -volumes-from myBusybox4 --name myBusybox5 busybox  
```
以这种方式运行`myBusybox5`容器后，同样，如果您在运行的`myBusybox5`容器中输入`/volume`目录，您将看到相同的`data.txt`文件。
`docker volume ls`命令可以取一些滤波器参数，可能会很有用。例如，您可以列出没有被任何容器使用的卷:
```
docker volume ls -f dangling=true 
```
任何容器不再使用的卷都可以通过使用 docker volumes prune 命令轻松删除:
```
docker volume prune  
```
要列出使用特定驱动程序创建的卷(我们稍后将介绍驱动程序)，您可以使用驱动程序过滤器过滤列表，如下例所示:
```
docker volume ls -f driver=local  
```
最后但同样重要的是，另一种创建卷的方法是 Dockerfile 中的`VOLUME CREATE`指令。我们将在本书后面的内容中使用它，从 Dockerfile 创建映像。与在容器启动期间使用`-v`选项相比，使用`VOLUME CREATE`指令创建卷有一个非常重要的区别:使用`VOLUME CREATE`时不能指定`host`目录。这类似于公开和映射端口。您不能映射 Dockerfile 中的端口。Dockerfiles 意味着可移植、可共享和独立于主机。`host`目录是 100%依赖主机的，并且会在任何其他机器上中断，这与 Docker 的想法有点不同。因此，只能在 Dockerfile 中使用可移植指令。
If you need to specify a `host` directory when creating a volume, you need to specify it at runtime.
# 删除卷
与创建卷相同，在 Docker 中有两种删除卷的方法。首先，您可以通过引用容器的名称并执行 docker `rm -v`命令来删除卷:
```
$ docker rm -v   
```
在没有提供`-v`选项的情况下移除容器时，Docker 不会警告您删除其体积。因此，您将拥有`dangling`卷—不再被容器引用的卷。正如您所记得的，使用 docker 卷清理命令很容易摆脱它们。
另一个删除卷的选项是使用`docker volume rm`命令:
```
$ docker volume rm   
```
如果卷恰好被容器使用，Docker Engine 将不允许您删除它，并将向您发出警告消息:
![](img/0eb5d9c3-c43d-473f-9237-8ff3bfba01f9.png)
正如您所看到的，在 Docker 中创建、共享和删除卷并不是那么棘手。它非常灵活，允许创建应用所需的设置。但这种灵活性还有更多。创建卷时，您可以指定一个`--driver`选项(或简称为`-d`，如果您需要映射一些外部的、不那么标准的存储，这可能会很有用。到目前为止，我们创建的卷使用的是本地文件系统驱动程序(文件存储在主机系统的本地驱动器上)；使用`volume inspect`命令检查卷时，可以看到驱动程序名称。不过，还有其他选择——让我们现在来看看。
# 音量驱动器
与网络驱动插件一样，卷插件扩展了 Docker 引擎的功能，并支持与其他类型的存储集成。网上有很多免费的现成插件；你可以在 Docker 的 GitHub 页面上找到一个列表。其中包括:
*   **用于 Azure 文件存储的 Docker 卷驱动**:这是一个 Docker 卷驱动，使用 Azure 文件存储将云上的文件共享作为卷挂载到 Docker 容器中。它使用 Azure 文件存储的网络文件共享(SMB/CIFS 协议)功能。您可以创建 Docker 容器，这些容器可以从一台主机无缝迁移到另一台主机，或者在不同主机上运行的多个容器之间共享卷。
*   **IPFS** :开源卷插件，允许使用 IPFS 文件系统作为卷。IPFS 是一个非常有趣和有前途的存储系统；它可以高效地分发大量数据。它提供了重复数据消除、高性能和集群持久性，提供了安全的 P2P 内容交付、快速性能和分散归档。IPFS 提供弹性数据访问，独立于低延迟或主干网连接。
*   **keywish**:你可以用这个驱动让你的容器和远程 keywish 服务器对话。Keywhiz 是一个用于管理和分发机密数据的系统，与 TLS 证书/密钥、GPG 密钥、API 令牌和数据库凭证相同。不是将这些数据放在配置文件或复制文件中(这类似于被泄露或难以跟踪)，keywish 使管理变得更容易和更安全:集群中的 keywish 服务器将加密的秘密集中存储在数据库中。客户使用**相互认证的顶级域名系统** ( **顶级域名系统**)来检索他们可以访问的机密。
从前面的例子可以看出，它们相当有趣，有时甚至具有异国情调。由于 Docker 及其插件架构的可扩展性，您可以创建非常灵活的设置。但是，第三方驱动程序并不总是引入全新的存储类型；有时，他们只是扩展现有的驱动程序。这方面的一个例子是本地持久插件，这是一个卷插件，它通过允许您在主机上的任何位置指定装载点来扩展默认本地驱动程序的功能，这使得文件能够始终持久，即使通过`docker volume rm`命令删除卷也是如此。
如果你需要一个还没有的卷插件，你可以自己写。这个过程在 Docker 的 GitHub 页面上有很好的记录，还有可扩展的例子。
我们现在已经介绍了如何向外部世界开放我们的容器。我们可以使用网络和装载的卷在容器和其他主机之间共享数据。让我们总结一下本章到目前为止所学的内容:
*   我们可以使用网络插件来进一步扩展网络数据交换
*   即使容器重新启动，卷也会保存数据
*   对卷上文件的更改是直接进行的，但在更新映像时不会包括这些更改
*   即使容器本身被删除，数据量仍然存在
*   卷允许在主机文件系统和 Docker 容器之间或其他 Docker 容器之间共享数据
*   我们可以使用卷驱动程序来进一步扩展文件交换的可能性
Containers from the same Docker host see each other automatically on the default bridge network.
# 摘要
在本章中，我们已经了解了 Docker 网络和存储卷功能。我们知道如何区分各种网络类型，如何创建网络，以及公开和映射网络端口。
我们已经完成了与卷相关的命令，现在可以创建或删除卷。在[第 3 章](03.html)、*使用微服务*中，我们将重点关注我们将使用 Docker 和 Kubernetes 部署的软件，以及稍后的 Java 微服务。