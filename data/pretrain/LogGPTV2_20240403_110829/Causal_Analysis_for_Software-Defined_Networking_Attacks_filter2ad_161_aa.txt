title:Causal Analysis for Software-Defined Networking Attacks
author:Benjamin E. Ujcich and
Samuel Jero and
Richard Skowyra and
Adam Bates and
William H. Sanders and
Hamed Okhravi
Causal Analysis for Software-Defined 
Networking Attacks
Benjamin E. Ujcich, Georgetown University; Samuel Jero and Richard Skowyra, 
MIT Lincoln Laboratory; Adam Bates, University of Illinois at Urbana-Champaign; 
William H. Sanders, Carnegie Mellon University; Hamed Okhravi, MIT Lincoln Laboratory
https://www.usenix.org/conference/usenixsecurity21/presentation/ujcich
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Causal Analysis for Software-Deﬁned Networking Attacks
Benjamin E. Ujcich
Georgetown University
Samuel Jero
MIT Lincoln Laboratory
Richard Skowyra
MIT Lincoln Laboratory
Adam Bates
University of Illinois at Urbana-Champaign
William H. Sanders
Carnegie Mellon University
Hamed Okhravi
MIT Lincoln Laboratory
Abstract
Software-deﬁned networking (SDN) has emerged as a ﬂexi-
ble network architecture for central and programmatic control.
Although SDN can improve network security oversight and
policy enforcement, ensuring the security of SDN from so-
phisticated attacks is an ongoing challenge for practitioners.
Existing network forensics tools attempt to identify and track
such attacks, but holistic causal reasoning across control and
data planes remains challenging.
We present PICOSDN, a provenance-informed causal ob-
server for SDN attack analysis. PICOSDN leverages ﬁne-
grained data and execution partitioning techniques, as well
as a uniﬁed control and data plane model, to allow practi-
tioners to efﬁciently determine root causes of attacks and to
make informed decisions on mitigating them. We implement
PICOSDN on the popular ONOS SDN controller. Our evalu-
ation across several attack case studies shows that PICOSDN
is practical for the identiﬁcation, analysis, and mitigation of
SDN attacks.
1 Introduction
Over the past decade, the software-deﬁned networking
(SDN) architecture has proliferated as a result of its ﬂexi-
bility and programmability. The SDN architecture decouples
the decision-making of the control plane from the trafﬁc be-
ing forwarded in the data plane, while logically centralizing
the decision-making into a controller whose functionality can
be extended through network applications (or apps).
SDN has been touted as an enhancement to network se-
curity services, given that its centralized design allows for
DISTRIBUTION STATEMENT A. Approved for public release. Dis-
tribution is unlimited. This material is based upon work supported by the
Under Secretary of Defense for Research and Engineering under Air Force
Contract No. FA8702-15-D-0001. Any opinions, ﬁndings, conclusions or
recommendations expressed in this material are those of the author(s) and
do not necessarily reﬂect the views of the Under Secretary of Defense for
Research and Engineering.
complete oversight into network activities. However, the pro-
grammable nature of SDN creates new security challenges
and threat vectors. In particular, the control plane’s state
and functionality can be maliciously inﬂuenced by data in-
put originating from the data plane and apps. These cross-
plane [13,24,41,49,53,62] and cross-app [8,52] attacks have
signiﬁcant security repercussions for the network’s behavior,
such as bypassing access control policies or redirecting data
plane trafﬁc. An adversary only needs to attack data plane
hosts or apps, and does not have to compromise the controller.
In software-deﬁned networks, as in traditional networks,
security products such as ﬁrewalls and intrusion detection
systems (e.g., Snort, Zeek/Bro, Splunk) must be deployed
to continuously monitor potential security incidents. When
these tools signal a security alert, the network operator must
investigate the incident to diagnose the attack, establish possi-
ble root causes, and determine an appropriate response. This
investigation stage is particularly essential when considering
that security monitoring tools are notoriously prone to issuing
false alarms [16]; however, in the case of SDN, the control
plane and its novel attack vectors may also be implicated
when incidents occur. To this end, recent network causality
and provenance analysis tools have been proposed to aid in
SDN forensics [15, 52, 55, 61]. However, we argue that such
tools have limitations in terms of providing the precise and
holistic causal reasoning that is needed by investigators.
First, the control plane’s causality (or provenance) model
has a signiﬁcant effect on the precision with which a prac-
titioner can identify root causes. If the control plane’s data
structures are too coarse-grained or if the control plane uses
long-running processes, this can lead to dependency explosion
problems in which too many objects share the same prove-
nance. That reduces the ability to identify precise causes.
Second, the control plane’s decisions cause the data plane’s
conﬁguration to change; the effects of the data plane’s con-
ﬁguration on packets sent to the controller cause subsequent
control plane actions. When such tools examine the control
plane alone, the indirect causes of control plane actions that
result from data plane packets will lead to an incomplete
USENIX Association
30th USENIX Security Symposium    3183
dependency problem that ignores the data plane topology.
Third, a practitioner will want to know not only the root
causes for an action but also the extent to which such root
causes impacted other network activities. For instance, if a
spoofed packet is found to be the attack vector for an attack,
then the practitioner will want to investigate what else that
spoofed packet inﬂuenced to understand whether other attacks
and undesirable behavior have also occurred.
Overview We present PICOSDN, a tool for SDN attack
analysis that mitigates the aforementioned dependency ex-
plosion and incomplete dependency challenges. PICOSDN
allows practitioners to effectively and precisely identify root
causes of attacks. Given evidence from an attack (e.g., vio-
lations of intended network policies), PICOSDN determines
common root causes in order to identify the extent to which
those causes have affected other network activities.
PICOSDN’s approach uses data provenance, a data plane
model, and a set of techniques to track and analyze network
history. PICOSDN records provenance graphically to allow
for efﬁcient queries over past state. Although similar network
forensics tools have also used graphical structures [52,55,60],
these tools’ provenance models suffer from dependency ex-
plosion or incomplete dependency problems. To account for
those challenges, PICOSDN performs ﬁne-grained partition-
ing of control plane data objects and leverages app event
listeners to further partition data and process execution, re-
spectively. PICOSDN also incorporates the data plane’s topol-
ogy such that indirect control plane activities caused by data
plane packets are correctly encoded, which mitigates incom-
plete dependencies. Finally, PICOSDN’s toolkit reports the
impacts of suspected root causes, identiﬁes how network iden-
tiﬁers (i.e., host identities) evolve over time, and summarizes
how the network’s conﬁguration came to be.
We have implemented PICOSDN within the popular ONOS
SDN controller [5]. Many telecommunications providers,
such as Comcast, use ONOS or one of its proprietary deriva-
tives. We evaluated PICOSDN by executing and analyzing
recent SDN attack scenarios found in the literature and in
the Common Vulnerabilities and Exposures (CVE) database.
PICOSDN precisely identiﬁes the root causes of such attacks,
and we show how PICOSDN’s provenance model provides
better understanding than existing network tools do. Our im-
plementation imposes an average overhead latency increase of
between 7 and 21 ms for new forwarding rules, demonstrating
PICOSDN’s practicality in realistic settings.
Summary of Contributions Our main contributions are:
1. An approach to the dependency explosion problem for
SDN attack provenance that utilizes event listeners as
units of execution.
2. An approach to the incomplete dependency problem
for SDN attack provenance that incorporates a data
Figure 1: Topology of the CVE-2018-12691 attack scenario
described in § 2.1. The red path represents the attacker’s
desired data plane communication from h1 to h2.
plane model and tracking of network identiﬁers.
3. The design and implementation of PICOSDN on
ONOS to evaluate SDN attacks and to demonstrate PI-
COSDN’s causal analysis beneﬁts.
4. The performance and security evaluations of PI-
COSDN on recent SDN attacks.
2 Background and Motivation
Many real-world SDN attacks leverage data plane dependen-
cies and long-running state corruption tactics to achieve their
goals. SDN controllers are susceptible to attacks from data
plane hosts that poison the controller’s network state view
and cause incorrect decisions [13, 24, 41, 49, 53]. We consider
a motivating attack to illustrate the limitations that a prac-
titioner encounters when using existing network forensics
tools.
2.1 Motivating Attack Example
Scenario Consider the control plane attack CVE-2018-
12691 [53] in ONOS. It enables an attacker to use spoofed
packets to circumvent ﬁrewall rules. This class of cross-plane
attack leverages spoofed data plane input to fool the controller
into maliciously changing the data plane forwarding. Com-
plete prevention of such attacks is generally challenging, as
spoofed information from data plane hosts is a notorious net-
work security problem in SDN [13, 24, 28]. Such attacks can
also be one part of a multi-stage attack in which the attacker’s
goal is to defeat the data plane access control policy and move
laterally across data plane hosts to gain additional access [18].
Suppose that the attack is carried out on a network topology
as shown in Figure 1. Assume that the controller runs a data
plane access control application and a reactive1 forwarding
application. The attack works as follows. A malicious data
plane host, h1, wants to connect to a victim host, h2, but the
data plane access control policy is conﬁgured to deny trafﬁc
1Although we discuss a reactive SDN conﬁguration here as an example,
PICOSDN’s design generalizes to proactive SDN conﬁgurations, too. We
refer the reader to § 8 for further discussion.
3184    30th USENIX Security Symposium
USENIX Association
Attacker Host (h1)Victim Host (h2)Switch s1Switch s2Control Plane Channel (Southbound API)SDNControllerDATA PLANECONTROL PLANENetwork Applications(Northbound API)(a) Relevant provenance for the CVE-2018-12691 attack based on techniques from FOREN-
GUARD [55]. The activities from switches s1 and s2 appear to be independent of each other,
masking the derivation of a root cause of s2’s ﬂow rule f3 from host h1’s activities on switch
s1.
(b) Relevant provenance generated by PI-
COSDN for the same scenario as (a). This
includes a data plane model, network identi-
ﬁers, and precise responsibility (agency).
Figure 2: Provenance of the CVE-2018-12691 attack. Ellipses represent SDN control plane objects, rectangles represent SDN
processes, and pentagons represent the SDN components responsible for each process or object (i.e., the agency). The text of the
labels in (b) are abbreviations from the text of the labels found in (a).
from h1 to h2 based on its IP address. The malicious host h1
emits into the data plane a spoofed ICMP packet, p1, with an
invalid IP address. The controller creates a data structure, the
host representation object, for h1 with a valid MAC address
but no IP address. The data plane access control application,
acl, checks to see if it needs to insert new ﬂow rules based on
the data plane access control policy. As the controller does
not associate h1 with an IP address, no ﬂow rules are installed.
Some time later, h1 sends to h2 a packet, p2, with a valid
source IP address. ONOS updates the host object for h1 with
h1’s actual IP address. Unfortunately, at this point, a bug
stops the data plane access control application from handling
events in which a host object is updated. Thus, the update
never triggers the application to install ﬂow deny rules that
prevent h1 from sending trafﬁc to h2. The result is that the
reactive forwarding application forwards the packet out (p3).
Environment
In a typical enterprise environment, a variety
of system- and network-layer monitoring tools are usually
deployed [1,17,23,45]). These services are largely reactive in
nature, triggering threat alerts when a suspicious event occurs.
After an alert is raised, it is then the responsibility of a network
practitioner or security analyst to manually investigate the
alert, determine its veracity, and determine an appropriate
incident reponse. Threat investigation routines are carried out
through the use of a variety of log analysis software, often
referred to as Security Indicator & Event Management (SIEM)
systems, (e.g., Splunk). Timely investigation of these alerts
is critical, as failing to respond promptly can increase the
attackers’ dwell time and, therefore, the damage inﬂicted.
Investigation Some time later, a network practitioner is
alerted to a suspicious event within the network—the intru-
sion detection system (IDS) has detected a large data trans-
mission from from host h1 to a known malicious domain.
Unbeknownst to the practitioner, this ﬂow represents an exﬁl-
tration of sensitive data from host h2 to the open network via
h1, violating the intended data plane access control policy. As
the practitioner begins to investigate the alert, they notice that
a new ﬂow rule was recently added between h1 and h2, but it
isn’t clear how or why this network reconﬁguration occurred.
To understand the context of this change to the control
plane, the practitioner attempts to perform causal analysis
using a provenance graph over the control plane’s past state,
which is depicted in Figure 2a. As the practitioner now knows
that a ﬂow rule from h1 and h2 seems to have coincided
with the security incident, they use this as an initial piece of
evidence: a ﬂow rule ( f3) was installed that allowed trafﬁc
from h1 to h2 on switch s2. The practitioner then issues a
query and identiﬁes a set of possible root causes related to the
lineage of that ﬂow rule.
2.2 Existing Tool Limitations
However, the practitioner runs into several challenges when
using existing tools to generate a graph such as the one in Fig-
ure 2a. Although linking h1’s packets to s1’s default ﬂow rule
(i.e., f1) does capture past causality, the practitioner is easily
overwhelmed when all packets over all time from any of s1’s
ports are also linked to that default ﬂow rule. The practitioner
also ﬁnds that switches s1 and s2 as principal agents become
USENIX Association
30th USENIX Security Symposium    3185
Switchs1Switchs2PacketManagerDevice Event ListenerPacketManagerDevice Event ListenerHostProviderPacket ProcessorPacket In p1MACsrc=h1, MACdst=h2IPsrc=255.255.255.255switch:port=s1:1HostProviderPacket ProcessorPacket In p2MACsrc=h1, MACdst=h2IPsrc=10.0.0.1switch:port=s1:1aclHost Event ListenerHost h1(v1)MAC=h1IP=nullaclHost Event ListenerHost h1(v2)MAC=h1IP=10.0.0.1fwdPacket ProcessorfwdPacket ProcessorPacket In p4MACsrc=h1, MACdst=h2IPsrc=10.0.0.1switch:port=s2:1Flow Rule f1match=all traﬃcaction=send to controllerswitch=s1Flow Rule f2match=all traﬃcaction=send to controllerswitch=s2Packet Out p3MACsrc=h1, MACdst=h2IPsrc=10.0.0.1switch:port=s1:2Flow Rule f3match={MACsrc=h1, MACdst=h2IPsrc=10.0.0.1}action=s2:2switch=s2No action taken(IP not matched)No action taken(Event type not handled)Flow rule installedfrom h1 to h2s1s2s1:port 1s2:port 1PMPMHPp1HPp2aclh1(v1)aclh1(v2)fwdfwdp4f1f2  Agency  Agencyp3  AgencyData PlaneModelf3IdentiferEvolutionassigning agency to hosts would not solve the problem either;
malicious hosts would simply induce false dependencies in
the provenance graph.
Limitation (L3): Incomplete dependencies
In contrast to
false dependencies, incomplete dependencies occur when the
provenance model does not capture enough information to
link causally related activities. For SDN attacks, that occurs
when the data plane’s effects on the control plane are not cap-
tured by an implicit data plane model. In our attack scenario
in § 2.1, the reactive forwarding application reacts to activities
from switch s1 before forwarding the packet (i.e., p3) out to
other ports. On the other end of one of s1’s ports, switch s2
receives that incoming packet (i.e., p4) and further processes
it. Figure 2a’s disconnected subgraphs appear to show that
switch s1’s history of events is independent of switch s2’s
history of events. Thus, if a practitioner were starting their
investigation from a ﬂow rule on switch s2, they would not
be able to see that the root cause occurred because of earlier
events related to switch s1 and the malicious host h1’s spoofed
packets. PROVSDN and FORENGUARD do not account for
this kind of data plane model and would thus suffer from in-
complete dependencies. Other tools [11, 57, 59, 61] model the
implicit data plane, but are applicable only in the declarative
networking paradigm. Most of the popular SDN controllers