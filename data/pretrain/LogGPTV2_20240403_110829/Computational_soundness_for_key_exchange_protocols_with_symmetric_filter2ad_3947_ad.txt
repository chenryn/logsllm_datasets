### Realization of Fenc

In the realization \( \text{Penc}(\Sigma) \) (referred to as Penc for brevity), the ideal encryption and decryption operations in Fenc are simply replaced by real encryption and decryption according to \(\Sigma\). No additional randomness or tagging is necessary. However, Penc(\(\Sigma\)) only realizes Fenc in environments that do not generate key cycles or cause the so-called commitment problem. More precisely, environments must be used-order respecting and non-committing.

- **Used-Order Respecting**: An unknown key \( k \) (i.e., a key marked as unknown in Fenc) is considered used if Fenc has been instructed to use it for encryption. An environment is used-order respecting if, when an unknown key \( k \) is used for the first time, it is encrypted only by other unknown keys that have been used for the first time later than \( k \).
- **Non-Committing**: An environment is non-committing if an unknown key that has been used does not become known later on.

A protocol \( P \) that uses Fenc is used-order respecting and non-committing if \( E | P \) is used-order respecting and non-committing for any environment \( E \). As argued in [26, 4], protocols are typically used-order respecting and non-committing. In most protocols, once a key has been used to encrypt a message, it is not encrypted again. Such protocols are called standard protocols. Under static corruption, these protocols can easily be seen to be used-order respecting and non-committing. Therefore, such protocols can be first analyzed using Fenc. By the composition theorem, Fenc can then be replaced by its realization Penc.

In [26], a joint state realization of Fenc is also provided, which ensures that if Fenc is used in multiple sessions, all sessions can use the same long-term symmetric keys.

### Computational Interpretation of Symbolic Protocols

In this section, we briefly describe how a symbolic protocol is executed in the IITM (Interactive Turing Machine) model. This is done in the expected way, with some aspects highlighted.

Let \( P \) be a symbolic protocol as in Section 3. We assume an injective mapping \( \tau \) from global constants (i.e., free names in \( P \)) to bit strings. The protocol system \( [|P|]_\tau \) of \( P \) is a system of IITMs:

\[ [|P|]_\tau := M | M_1 | \ldots | M_l | \text{Fenc} \]

- **IITMs \( M_1, \ldots, M_l \)**: These are the computational interpretations \( [|R_1|]_\tau, \ldots, [|R_l|]_\tau \) of \( R_1, \ldots, R_l \), respectively.
- **Machine \( M \)**: This machine provides the same I/O interface to the environment as Fke and initializes a session. It connects to the systems \( M_1, \ldots, M_l, \text{Fenc} \) via the I/O interface. The environment cannot directly communicate with \( M_1, \ldots, M_l, \text{Fenc} \) via the I/O interface.

Similar to Fke, the machine \( M \) expects to receive a request for key exchange, containing the names of the parties involved in the protocol session. Upon the first request, \( M \) triggers the machines \( M_1, \ldots, M_l \) to initialize themselves: nonces are generated, short-term keys are generated using Fenc, and long-term keys are exchanged, again using Fenc. During the initialization phase, the adversary can corrupt keys (via Fenc) or take over machines \( M_i \) completely (static corruption).

If asked about the corruption status by the environment, \( M \) reports this status to the environment: \( M \) checks the corruption status of every \( M_i \), and each \( M_i \) checks the corruption status of the keys it manages. If one \( M_i \) or a key is corrupted, the whole session is considered corrupted.

An IITM \( M_i \) is derived from its symbolic counterpart \( R_i \) in the natural way. It performs most of the communication with the adversary via the network interface. The I/O interface is used only to receive initialization requests, report the corruption status, or output session keys after successful completion of a session. Encryption and decryption are performed via Fenc. We tag pairs and keys/pointers to prevent confusion with other objects and to allow the extraction of pair components. Tags are not required to distinguish names, nonces, or ciphertexts.

The atomic formula \( M(s) \) is interpreted as true if the computational interpretation of \( s \) does not fail. For example, applying \( \pi_1 \) to a bit string that is not a pair would fail. The atomic formula \( \text{EQ}(s_1, s_2) \) is interpreted as true if the computational interpretations of \( s_1 \) and \( s_2 \) do not fail and yield the same bit strings. The output of the constants `true` and `false` after if-then-else statements is not computationally interpreted; \( M_i \) does not produce such outputs but directly continues with the execution after this output.

### Main Result

We now present the main result of our paper. The symbolic criterion for our computational soundness result consists of two parts:
1. We assume the symbolic protocol to be labeled bisimilar (observationally equivalent) to its randomized version, where instead of the actual session key, a new nonce is output.
2. All keys used within one uncorrupted session of the key exchange protocol remain secret.

To formalize the first part, we define the random-world version of a symbolic protocol. The random-world version \( \text{rand}(P) \) of a symbolic protocol \( P \) is the same as \( P \), except that instead of outputting the actual session key on channel \( \text{cout}_{\text{io}} \), a random key (i.e., a new nonce) is output. Formally, we define:

\[ \text{rand}(P) := (\nu n^*) P_{n^*} \]

where \( n^* \) is a name that does not occur in \( P \), and the process \( P_{n^*} \) is obtained from \( P \) by replacing \( \text{cout}_{\text{io}}(s) \) with \( \text{cout}_{\text{io}}(n^*) \) for every term \( s \) and \( i \leq l \). The first part of our symbolic criterion will then be \( P \sim_l \text{rand}(P) \). This condition can be checked automatically using existing tools, such as ProVerif [11].

To formulate the second part, we extend our signature \( \Sigma \) by adding encryption and decryption symbols \( \text{encsecret}(\cdot, \cdot) \) and \( \text{decrept}(\cdot, \cdot) \), respectively, and add the equation \( \text{decrept}(\text{encsecret}(x, y), y) = x \). By adding these symbols, interference with the other encryption and decryption symbols is prevented. We introduce a protocol \( \text{secret}(P) \) derived from \( P \) as follows: It first generates a new nonce \( n \), used as a secret. It then behaves just as \( P \). However, whenever \( P \) uses a term \( s \) as a key for encryption or decryption, \( \text{secret}(P) \) outputs \( \text{encsecret}(n, s) \).

The second part of our symbolic criterion requires that, when executing \( \text{secret}(P) \), \( n \) can never be derived by the adversary, i.e., for every successor \( Q \) of \( \text{secret}(P) \), it holds that \( \phi(Q) \not\vdash n \). This captures that all terms used as keys in \( P \) are symbolically secret. We say that \( P \) preserves key secrecy.

Now, we are ready to formulate the main theorem of this paper, a computational soundness result for universally composable key exchange. The proof of this theorem is presented in Section 8.

**Theorem 3.** Let \( P \) be a symbolic protocol and let \( \tau \) be an injective mapping of global constants to bit strings. If \( P \) preserves key secrecy and \( P \sim_l \text{rand}(P) \), then \( [|P|]_\tau \leq \text{Fke} \).

Recall that \( [|P|]_\tau \) uses Fenc for encryption. Let \( [|P|]_\tau^{\text{Penc}} \) denote the system obtained from \( [|P|]_\tau \) by replacing Fenc with Penc. As explained in Section 5.2, if \( [|P|]_\tau \) (without Fenc) is a used-order respecting and non-committing protocol, then, by the composition theorem, we can replace Fenc with its realization Penc. However, we even obtain a stronger result where we do not have to assume that \( [|P|]_\tau \) is non-committing:

**Corollary 1.** Let \( P \) and \( \tau \) be as in Theorem 3. If \( P \) preserves key secrecy, \( P \sim_l \text{rand}(P) \), and \( [|P|]_\tau \) is used-order respecting, then \( [|P|]_\tau^{\text{Penc}} \leq \text{Fke} \).

The condition that \( [|P|]_\tau \) is used-order respecting is not a symbolic one. However, there is a simple symbolic criterion that captures the notion of a standard protocol explained in Section 5.2.

**Definition 6.** We call a symbolic protocol \( P \) symbolically standard if in every symbolic trace of \( P \), no short-term key is encrypted by some other short-term key after it has been used for encryption.

It is not hard to see that this condition can be checked automatically using, for example, ProVerif. The condition can be encoded as a secrecy property where a secret is output to the adversary if the condition is violated. We note that decidability results for detecting key cycles in symbolic protocols were presented in [19]. We obtain the following corollary.

**Corollary 2.** Let \( P \) and \( \tau \) be as in Theorem 3. If \( P \) preserves key secrecy, is symbolically standard, and satisfies \( P \sim_l \text{rand}(P) \), then \( [|P|]_\tau^{\text{Penc}} \leq \text{Fke} \).

The above theorem and corollaries talk only about a single protocol session. However, by the composition theorem, we immediately obtain that the multi-session version of \( [|P|]_\tau^{\text{Penc}} \) realizes multiple sessions of the key exchange functionality, i.e., \( ! [|P|]_\tau^{\text{Penc}} \leq ! \text{Fke} \). However, in \( ! [|P|]_\tau^{\text{Penc}} \), every session of \( [|P|]_\tau^{\text{Penc}} \) uses new long-term keys. This is impractical. Fortunately, as already mentioned in Section 5.2, by a joint state theorem established in [26], \( ! \text{Penc} \) can be replaced by its joint state realization, in which the same long-term keys are used across all sessions. In such a realization, session identifiers are encrypted along with the actual plaintexts.

Altogether, the above results show that if a protocol satisfies our symbolic criterion, which is concerned only with a single protocol session and can be checked automatically, then this protocol satisfies a strong, computational composability property for key exchange. In particular, it can be used as a key exchange protocol in every (probabilistic polynomial-time) environment and even if polynomially many copies of this protocol run concurrently. This merely assumes that an authenticated encryption scheme is used for symmetric encryption, which is a standard cryptographic assumption, and that session identifiers are added to plaintexts before encryption. The latter may not be done explicitly in all protocol implementations, although it is often done implicitly, e.g., in IPsec, and it is, in any case, a good design technique.

### Proof of the Main Theorem

Throughout this section, we fix a symbolic protocol \( P = (\nu n)(\text{cin}_{\text{net}}(x_l).(R_1 \parallel \ldots \parallel R_l)) \) that preserves key secrecy and satisfies \( P \sim_l \text{rand}(P) \). We also fix an injective mapping \( \tau \) of global constants to bit strings and an environment \( E \) for \( [|P|]_\tau = M | M_1 | \ldots | M_l | \text{Fenc} \).

We need to show that there exists a simulator \( \text{Sim} \) such that...