

Time
(sec.)
157.0
42.5
49.0
215.8
24.2
37.3
250.4
79.7
51.0
Milking Time
Honeyclient Milker
(sec.)
11.1
1.2
1.3
3.3
2.2
0.4
0.5
0.8
0.4
(sec.)
53.5
118.8
46.8
238.0
20.8
94.1
25.9
96.2
29.6
Table 1: Summary of network dialog minimization of drive-by downloads dialogs.
6. EVALUATION
In this section we evaluate our dialog minimization and dialog
difﬁng techniques for 5 different applications.
6.1 Building Drive-by Download Milkers
Our drive-by download malware collection infrastructure runs a
honeyclient on any suspicious URL received from external feeds.
If the honeyclient is exploited, it outputs a network trace. The in-
frastructure then applies NDM on the honeyclient dialog, to check
if a milker can replace the honeyclient for increased performance.
Goal. The goal function checks if the body of a HTTP response
contains an executable ﬁle (after joining chunks and decompress-
ing, if needed) since in the drive-by download dialogs examined
the binary was not encrypted. If the exploit server drops more than
one executable, the goal function can be set to output true after the
ﬁrst executable is seen, or after a speciﬁed number of binaries is
received using a conjunction of constraints.
Results. Table 1 details the dialog minimization for the 9 exploit
kits for which we built milkers. The left part of Table 1 summa-
rizes the honeyclient dialogs (responses not included).
It shows
the number of nodes in the dialog tree built from the honeyclient
network trace; the split of those nodes into connections, messages,
and ﬁelds (C:M:F); the remaining nodes when messages and con-
nections after the goal are ﬁltered (e.g., C&C communication after
exploitation); and the number of endpoints (IPs) in the ﬁltered dia-
log. Filtering reduces the number of messages by a factor of 1.8 on
average and up to a factor of 11 (CoolExploit). The ﬁltered dialogs
comprise 2–8 connections, 5–66 messages, and 1–2 peers.
The middle part of Table 1 summarizes the 3-level minimiza-
tion on the ﬁltered dialogs. It shows the connections, messages,
and ﬁelds left after each minimization level (L1–L3); the number
of nodes in the minimized dialog; the number of IPs (i.e., tests)
used in the minimization; whether the exploit kit distributed sam-
ples geographically; and the minimization runtime. For 6 kits L2
minimization is not run (marked with asterisk) because connections
remaining after L1 minimization contain at most one request each.
The minimized dialogs for 6 kits contain a single request, i.e., the
malware can be directly downloaded. For BlackHole 1.x and Red-
Kit two messages are left, indicating that the ﬁrst request sets server
state. For Serenity, 2 connections are required because it drops 2
malware samples.
L3 minimization results show that the majority of HTTP head-
ers are not needed to download the malware. For 7 kits, only the
Request-Line (HTTP method, URI, and protocol version) is re-
quired. In addition, Redkit requires Referer and User-agent head-
ers in both requests and Eleonore the Host header. This shows that
NDM reveals which ﬁelds are checked by the server. The 3-level
minimization reduces the nodes in the original tree by a factor of 39
on average, and up to a factor of 162 for Eleonore. The geograph-
ical distribution test (GDT) shows that 7 kits drop the malware to
visitors from any country. BlackHole and Redkit did not serve mal-
ware for IPs in China. After GDT, only 27 IPs (i.e., tests) were
needed on average to minimize a dialog. The Time column shows
the minimization runtime in seconds, when run on a 32-bit 3.3GHz
host with 4 cores and 4GB RAM. On average, 3-level minimiza-
tion took 1.7 minutes, the slowest being RedKit with 4.2 minutes.
Tree size is the dominant runtime factor, but latency and whether
the server keeps state (i.e., L2 minimization needed) also matter.
There were 2 other exploit kits (BlackHole 2.x and Neutrino) for
which minimization failed due to replay protection through dynam-
ically generated URLs. For these exploit kits we used honeyclients.
Savings. The right side of Table 1 shows the milking time when
using a honeyclient and a milker. Using a milker is 34 times faster
than using a honeyclient. These values only include the time for
network communication. The overall savings are larger because the
honeyclient requires an additional 10 seconds to load the snapshot
and transfer the URL, and runs for 4 minutes after initialization to
allow exploitation to complete. Furthermore, each VM uses 512
MB, so the number of VMs that can simultaneously run on a host
is memory constrained. In practice, milkers enabled us to reduce
our milking infrastructure from 3 hosts down to a single host that
runs all milkers and honeyclients.
6.2 Cookie Expiration Validation
In this experiment, we measure how many of the top 100 Alexa
websites are affected by cookie replay attacks, leading to session
hijacking, and the expiration time of their cookies. As preparation,
we create a user account in each of the websites. Then, we obtain
the original network dialog by logging into the website using those
credentials, accessing the user proﬁle, and logging out.
Goal. To determine if the user logged in successfully, the goal
function checks if a server response includes the username string;
all evaluated sites include it in the web page sent to the user after
successful login.
Minimization and replay. 2-level minimization is applied to each
dialog. Then, the minimized dialog is automatically replayed every
30 minutes, each time checking if the goal is reached. If a replay
does not reach the goal, the replayer outputs the cookie lifetime.
Results. Table 2 summarizes the cookie replay experiments. Of the
top 100 Alexa websites, 53 are not vulnerable because they either
use full HTTPS (42) or have no user login (11). For other 10 we
were unable to create a user account due to stricter requirements,
e.g., having a cell phone from a speciﬁc region. Cookies can be
replayed for 37 of the top 100 Alexa sites1. All 37 sites destroy the
1Some of those (e.g., youtube.com, linkedin.com) can be
accessed fully through HTTPS, but by default use HTTP.
Cookie Replays
Total
Websites
100
Replay
login
37
Replay
remote
Replay Duration
Duration
logout > 2 days > 1 week > 1 month
Duration
36
31
27
22
17
No Replay
Comp.
HTTPS
42
No
login
11
Others
10
Table 2: Summary of cookie replay results for Alexa Top 100.
should be replayed. On average, a user moves the blind twice a day
and each use of our tool saves 22 seconds. This amounts to signiﬁ-
cant savings of 3 hours per person each year. More importantly, we
save $10,000 that the building vendor would charge for simplifying
their proprietary web interface.
6.4 Vulnerability Analysis
Dialog minimization and replay is a useful capability in vulnera-
bility analysis. In this experiment, we use our dialog minimization
technique to replay a previously published attack on the OpenSBC
SIP server [32]. Surprisingly, the minimization ﬁnds another, pre-
viously unknown, attack on the OpenSBC server.
To obtain the original dialog we deploy a test OpenSBC server,
conﬁgured in UDP stateful proxying mode without authentication,
and use SIPp [34] to simulate both a SIP user agent client (UAC)
and a SIP user agent server (UAS). Then, we use the available at-
tack tool against the test server, producing an attack trace.
Goal. To check server availability after each test, the goal function
sends a benign request to the server, verifying it still responds.
New attack. The 3-level minimization outputs that a single 74-byte
SIP INVITE request is needed to crash the server (Figure 8). How-
ever, the minimized input does not contain the Via header, whose
ﬂawed processing created the original vulnerability. Replaying the
minimized input against a version of OpenSBC that patches the
original vulnerability, still crashes the server. We have reported
the new vulnerability to the OpenSBC author, who has conﬁrmed
that it corresponds to a null-pointer dereference in the parser. The
vulnerability has been assigned an OSVDB identiﬁer [29]. This
example illustrates that beyond performance savings when replay-
ing, the minimized dialog is also useful for capturing the essential
constraints to reach and exercise a vulnerability, without expensive
code analysis. It can also be used as an exploit signature.
6.5 Dialog Clustering
This experiment describes the use of our dialog similarity met-
rics for clustering benign and malicious dialogs.
Datasets. Our benign dialog dataset contains 60 dialogs obtained
by visiting twice the root page of each Alexa Top 30 website, one
day apart. Each pair of dialogs achieves the same goal but contains
changes introduced by non-determinism and the time difference
such as message reordering, additional messages, and small con-
tent modiﬁcations. Four sites simply redirect a user to the HTTPS
version, which produces short dialogs with 1–2 RRPs. On average
each benign dialog comprises 27.8 connections and 66.3 messages,
the largest being a dialog for 163.com with 177 connections and
355 messages. These numbers highlight how complex web appli-
cation dialogs can be.
The malicious dialog dataset comprises 91 dialogs obtained by
executing 91 labeled malware binaries from 6 families (cleaman,
qakbot.ae, malagent, spyeye, zbot, and zeroaccess),
once each, in a contained environment that allows only HTTP C&C
trafﬁc to reach the Internet. On average, each malware family dia-
log comprises 2.0 connections and 2.6 messages, the largest being
a dialog for spyeye with 4.5 connections and 6.0 messages.
Figure 7: Building Automation Dialog.
client-side cookie when the user clicks the logout link. However,
only 6 sites destroy the server state after the user clicks the logout
link. For the other 31 sites, cookies can still be replayed after the
user believes he has logged out. One site (vk.com) does not allow
cookie replay from an IP address different from the one used to
login. Of the 37 sites for which replay works, for 27 the cookie still
replays after 2 days, for 22 after a week, and for 17 after a month.
Our experiment ﬂags two issues. First, 31% of popular sites do
not destroy the server-side state when a user clicks the logout link.
Thus, the user is effectively still logged in. In addition, for 17% of
the sites the cookie replays for more than a month, creating a very
large window in which session hijacking is possible.
On average a minimized dialog replays in 0.6 seconds compared
to 42.6 seconds for the original, a 71 times reduction. Each site
is visited 48 times a day, so minimization saves over 20 hours of
processing each day.
6.3 Simplifying User Interfaces
In this experiment we simplify the cumbersome proprietary web
interface to move a sunblind up/down in our brand new automated
building, into a simpler command line tool. To begin, we capture
two original dialogs corresponding to a user going through the web
interface to move the sunblind down and up, respectively. Figure
7 shows the sunblind-up dialog, which requires 6 HTTP request-
response pairs during which the user visits the service (an addi-
tional 2 unsuccessful requests are not included), logs in with a user-
name and password; selects the ofﬁce, sunblind item, and event
type; and ﬁnally rises the sunblind.
Goal. The goal function checks whether the server redirects the
user to a webpage that indicates that the command was successful.
Minimization. The minimized dialog comprises a single POST
request to the web service, with the request line, the session cookie,
and a payload deﬁning the sunblind-up event. The replayer is able
to replay this dialog over time without updating the cookie value,
which indicates that the cookie does not have any expiration time.
We have built a 10-line C wrapper for the replayer that takes a
parameter to indicate if the sunblind-up or sunblind-down dialog
GET /screenmatePOST /screenmate/LoginPage.aspx302 FoundGET /screenmate/ScreenMatePage.aspx200 OKGET /screenmate/ScreenMateChangeValuePage.aspx?objectIdRoot=Floor_3-Room_74&objectId=3884200 OKt-0t-2t-4t-3200 OKGET /screenmate/WebStation.jst-1200 OKPOST /screenmate/ScreenMateChangeValuePage.aspx?objectIdRoot=Floor_3-Room_74&objectId=3884t-5302 Found10.x.x.x10.x.x.x10.x.x.xrefererlocationtemporal ordert-nDataset
Alexa
Malware
Alexa
Malware
Algor. Clusters
PAM
PAM