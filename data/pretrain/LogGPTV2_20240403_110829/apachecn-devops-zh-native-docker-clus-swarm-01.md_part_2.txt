*   Docker 引擎是一个运行在主机上的 Docker 守护程序。有时在书中我们会称它为引擎。我们通常通过系统或其他启动服务调用`docker daemon`来启动发动机。
*   **Docker Compose** 是一个在 YAML 描述多容器服务必须如何架构的工具。
*   **Docker 栈**是创建多容器应用(由 Compose 描述)而不是单个容器的映像的二进制结果。
*   一个 **Docker 守护程序**是一个可以与 Docker 引擎互换的术语。
*   一个 **Docker 客户端**是打包在同一个 Docker 可执行文件中的客户端程序。例如，当我们做`docker run`时，我们使用的是 Docker 客户端。
*   **Docker 网络**是一个软件定义的网络，它将同一网络中的一组容器链接在一起。默认情况下，我们将使用 Docker Engine 附带的 libnetwork([https://github.com/docker/libnetwork](https://github.com/docker/libnetwork))实现。但是您可以选择使用插件部署您选择的第三方网络驱动程序。
*   **Docker Machine** 是一个用来创建能够运行名为**Machine***的 Docker 引擎的主机的工具。*
*   Swarm v1 中的 **Swarm 节点是一台预装 Docker 引擎的机器，旁边运行着 Swarm 代理程序。群节点将自己注册到发现服务中。**
*   Swarm v1 中的 **Swarm master 是一台运行 Swarm 管理程序的机器。群主机从其发现服务中读取群节点的地址。**
*   一个**发现服务**是一个由 Docker 提供的基于令牌的服务或者一个自托管的服务。对于自我托管的应用，您可以运行 HashiCorp Consul、CoreOS Etcd 或 Apache ZooKeeper 作为键值存储来充当发现服务。
*   **领袖选举**是群主做的一个寻找主节点的机制。其他主节点将处于副本角色，直到主节点关闭，然后领导者选举过程将再次开始。正如我们将看到的，Swarm masters 的数量应该是一个奇数。
*   **SwarmKit** 是 Docker 为了抽象编排而发布的新套件。理论上，它应该能够运行任何类型的服务*，但在实践中，到目前为止，它只编排容器和容器组。*
**   **Swarm 模式**是自 Docker 1.12 以来推出的新 Swarm，它将 SwarmKit 集成到 Docker 引擎中。*   **Swarm Master(处于 Swarm 模式)**是管理集群的节点:它调度服务，保持集群配置(节点、角色和标签)，并确保有一个集群领导者。*   **Swarm Worker(在 Swarm 模式下)**是运行任务的节点，例如，托管容器。*   **服务**是工作负载的抽象。例如，我们可以将一个服务“nginx”复制 10 次，这意味着您将有 10 个任务(10 个 nginx 容器)分布在集群上，并由 Swarm 本身进行负载平衡*   **任务**是蜂群的工作单位。任务是一个容器。*
 *# 开始使用 Swarm
我们现在将继续安装两个小型 Swarm v1 和 v2 概念验证集群，第一个在本地，第二个在数字海洋。为了执行食谱，检查配料清单，确保你拥有一切，然后开始。
要遵循该示例，您需要:
*   要么是 Windows、Mac OS X，要么是 Linux 桌面
*   一个 Bash 或 Bash 兼容的外壳。在 Windows 上，您可以使用 Cygwin 或 Git Bash。
*   为本地示例安装的 VirtualBox 的最新版本
*   至少 4GB 内存，用于 4 个 VirtualBox 实例，每个实例 1G 内存，用于本地示例
*   Docker 客户端，至少 1.6.0 版适用于 Swarm v1，1.12 版适用于 Swarm v2
*   Docker Machine 的最新版本，目前是 0.8.1
## MAC 的 Docker
Docker 在 2016 年初宣布了 Mac 版 Docker 和 Windows 版 Docker 的桌面版。它比 Docker 工具箱更好，因为它包含了您期望的 Docker CLI 工具，但不再使用 boot2docker 和 VirtualBox(它使用 unikernels 代替，我们将在[第 11 章](11.html "Chapter 11. What is next?")、*下一步是什么？*)并且它完全集成到操作系统中(支持 Hyper-V 的 Mac OS X Sierra 或 Windows 10)。
可以从[https://www . Docker . com/products/overview #/install _ the _ platform](https://www.docker.com/products/overview#/install_the_platform)下载 Docker 桌面，轻松安装。
![Docker for Mac](img/image_01_004.jpg)
如果你正在使用苹果操作系统 x，只需将 Docker 测试版图标拖放到你的应用文件夹中。输入你的测试版注册码，如果有的话，就完成了。
![Docker for Mac](img/image_01_005.jpg)
在 OS X，系统托盘中会有 Docker whale，您可以打开它并配置您的设置。Docker 主机将在您的桌面上本地运行。
![Docker for Mac](img/docker.jpg)
## 窗户 Docker
在窗口 Docker 的情况下，它需要启用 Hyper-V 的 Windows 10。基本上，Hyper-V 附带 Windows 10 专业版或更高版本。双击安装程序后，您将看到第一个屏幕，显示许可协议，看起来类似于下面的截图。安装程序将要求您提供一个与 Mac 的 Docker 相似的密钥。
![Docker for Windows](img/image_01_007.jpg)
如果安装过程顺利，您将看到完成屏幕已准备好，可以启动窗口 Docker，如图所示:
![Docker for Windows](img/image_01_008.jpg)
在启动时，Docker 会将自己初始化为 Hyper-V。一旦这个过程完成，您就可以打开 PowerShell 并开始使用 Docker。
![Docker for Windows](img/image_01_009.jpg)
如果出现问题，您可以从托盘图标的菜单中打开日志窗口，并使用 Hyper-V 管理器进行检查。
![Docker for Windows](img/image_01_010.jpg)
## 准备好使用 Linux
我们将在本书中广泛使用机器，所以请确保您已经通过 Docker for Mac 或 Windows 或 Docker 工具箱安装了它。如果你在桌面上使用 Linux，用你的软件包系统(apt 或 rpm)安装 Docker 客户端。您还必须下载裸机二进制文件，只需卷曲它并为它分配执行权限；遵循[https://docs.docker.com/machine/install-machine/](https://docs.docker.com/machine/install-machine/)的指示。目前稳定的版本是 0.8.1。
```
$ curl -L 
https://github.com/docker/machine/releases/download/v0.8.1/docker-
machine-uname -s-uname -m > /usr/local/bin/docker-machine
$ chmod +x /usr/local/bin/docker-machine`
```
## 检查 Docker 机器是否可用-所有系统
您可以通过命令行中的以下命令来检查机器是否可以使用:
```
$ docker-machine --version
docker-machine version 0.8.1, build 41b3b25
```
如果您有问题，请控制系统路径或为您的架构下载正确的二进制文件。
# 蜂群，昨天
对于第一个例子，我们将在本地运行 Swarm v1 集群的最简单的配置，以了解“旧”Swarm 是如何工作的(并且仍然工作)。这个微小的集群将具有以下特征:
*   它由四个 1CPU 节点组成，每个节点 1GB 内存，由四个 CPU 和 4GB 内存组成
*   每个节点都将在 VirtualBox 上运行
*   每个节点都在本地 VirtualBox 网络上相互连接
*   不涉及发现服务:将使用静态`nodes://`机制
*   没有配置安全性，换句话说，TLS 被禁用
我们的集群看起来类似于下图。四个发动机将通过网状端口`3376`相互连接。事实上，除了 Docker 引擎之外，它们中的每一个都将运行 Docker 容器，在主机上公开端口`3376` (Swarm)，并将其重定向到自身。我们，操作员，将能够通过将环境变量`DOCKER_HOST`设置为`IP:3376`来连接到(任何)主机。如果你一步一步地遵循这个例子，一切都会变得更加清晰。
![Swarm, yesterday](img/B05661_01_25.jpg)
首先，我们必须用 Docker Machine 创建四个 Docker 主机。Docker Machine 通过一个命令自动执行这些步骤，而不是手动创建一个 Linux 虚拟机，生成和上传证书，通过 SSH 登录到它，以及安装和配置 Docker 守护程序。
机器将执行以下步骤:
1.  从 boot2docker 映像启动 VirtualBox 虚拟机。
2.  在 VirtualBox 内部网络上为虚拟机分配一个 IP。
3.  上传和配置证书和密钥。
4.  在此虚拟机上安装 Docker 守护程序。
5.  配置 Docker 守护程序并将其公开，以便可以远程访问。
因此，我们将有一个运行 Docker 的虚拟机，并准备好被访问以运行容器。
## boot 2 时钟
**bootwocker**采用 Tiny Core Linux 构建，是一个轻量级的发行版，专门为运行 Docker 容器而设计。它完全在内存上运行，启动时间非常快，从启动到控制台大约需要五秒钟。启动引擎时，Boot2Docker 默认在安全端口 2376 启动 Docker 引擎。
Boot2Docker 绝不适合生产工作负载。它仅用于开发和测试目的。我们将从使用 boot2docker 开始，然后在后面的章节中继续进行生产。在撰写本文时，Boot2Docker 支持 Docker 1.12.3，使用 Linux 内核 4.4。它附带 AUFS 4 作为 Docker 引擎的默认存储驱动程序。
## 用 Docker Machine 创建 4 个集群节点
如果我们执行:
```
$ docker-machine ls
```
在我们列出可用机器的新安装中，我们看到没有正在运行的机器。
所以，让我们从创建一个开始，用这个命令:
```
$ docker-machine create --driver virtualbox node0
```
该命令特别要求使用 VirtualBox 驱动程序(-d，简称)并命名机器节点 0。Docker Machines 可以在几十个不同的公共和私有提供商上调配机器，例如 AWS、DigitalOcean、Azure、OpenStack，并且有很多选择。目前，我们采用标准设置。一段时间后，第一个群集节点将准备就绪。
此时，发出以下命令来控制该主机(以便远程获得访问权限):
```
$ docker-machine env node0
```
这将打印一些外壳变量。只需复制最后一行，带有 eval 的行，粘贴它并发出 enter。配置了这些变量后，您不再操作本地守护程序(如果有)，而是`node0`的 Docker 守护程序。
![Create 4 cluster nodes with Docker Machine](img/image_01_012.jpg)
如果你再次查看机器列表，你会在映像名称旁边看到一个`*`，表示这是当前正在使用的机器。或者，您可以键入以下命令来打印当前活动的机器:
```
$ docker-machine active
```
![Create 4 cluster nodes with Docker Machine](img/image_01_013.jpg)
守护程序在此机器上运行，具有一些标准设置(例如在端口`tcp/2376`上启用 TLS)。您可以通过登录到节点并验证正在运行的进程来确保:
```
$ docker-machine ssh node0 ps aux | grep docker
1320 root  /usr/local/bin/docker daemon -D -g /var/lib/docker -H 
    unix:// -H tcp://0.0.0.0:2376 --label provider=virtualbox --
    tlsverify --tlscacert=/var/lib/boot2docker/ca.pem -- 
    tlscert=/var/lib/boot2docker/server.pem -- 
    tlskey=/var/lib/boot2docker/server-key.pem -s aufs
```
因此，您可以立即启动这个 Docker 守护程序，例如，启动容器并检查 Docker 状态:
![Create 4 cluster nodes with Docker Machine](img/image_01_014.jpg)
完美！现在，我们以完全相同的方式为其他三个主机提供资源，分别命名为`node1`、`node2`和`node3`:
```
$ docker-machine create --driver virtualbox node1
$ docker-machine create --driver virtualbox node2
$ docker-machine create --driver virtualbox node3
```
当它们完成时，您将有四个可用的 Docker 主机。用 Docker 机器检查。
![Create 4 cluster nodes with Docker Machine](img/image_01_015.jpg)
我们现在准备启动 Swarm 集群。但是，在此之前，为了使第一个示例尽可能简单，我们将禁用运行引擎的 TLS。我们的计划是:在端口`2375`上运行 Docker 守护进程，不需要 TLS。
让我们做一点排序，详细解释所有的端口组合。
| **不安全** | **固定** |
| 发动机:2375 | 发动机:2376 |
| 蜂群:3375 | 蜂群:3376 |
|  | Swarm v2 使用 2377 在节点间进行节点发现 |