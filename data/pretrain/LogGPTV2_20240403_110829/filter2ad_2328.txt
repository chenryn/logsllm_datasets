**Title: SREPT: A Tool for Software Reliability Estimation and Prediction**

**Author: Kishor S. Trivedi**

**Affiliation:**
Center for Advanced Computing and Communication, Department of Electrical and Computer Engineering, Duke University, Durham, NC 27708-0291, USA

**Contact:**
Email: [Your Email Address]

---

### **Abstract**

Several tools have been developed for estimating software reliability, but they are often highly specialized in their approaches and applicable only to specific phases of the software lifecycle. Conventional techniques that treat software as a monolithic entity are insufficient for assessing the reliability of heterogeneous systems. This paper introduces the Software Reliability Estimation and Prediction Tool (SREPT), which addresses these limitations.

### **Introduction**

Despite the availability of numerous tools for software reliability estimation, many are limited in their scope and applicability. Traditional methods, which consider the software as a single, homogeneous unit, are inadequate for evaluating the reliability of complex, heterogeneous systems. SREPT is designed to overcome these limitations by providing a more comprehensive and flexible approach to software reliability estimation and prediction.

### **Architecture of SREPT**

For a detailed description of SREPT, readers are referred to [1] and [2]. The SREPT graphical user interface (GUI) is implemented using the Java programming language. Figure 1 illustrates the high-level architecture of SREPT.

#### **Pre-Testing Phase**

In the pre-testing phase, SREPT accepts software product or process metrics as input. It then estimates the number of faults in each module using either the fault density approach or regression tree modeling.

#### **Testing Phase**

During the testing phase, SREPT provides the option to analyze failure data using the enhanced non-homogeneous Poisson process (ENHPP) model. This model predicts the failure intensity, the number of remaining faults, coverage, and reliability. SREPT currently supports four coverage functions within the ENHPP model: exponential (Goel-Okumoto), Weibull (Generalized Goel-Okumoto), S-shaped, and log-logistic. These functions belong to the class of finite failure non-homogeneous Poisson process (NHPP) models.

The ENHPP model in SREPT also allows for the combination of software metrics, failure data, and coverage-based approaches. Additionally, SREPT includes various optimization engines to compute release times. Unlike most models, which assume instantaneous and perfect debugging, SREPT accounts for non-zero debug times, reflecting more realistic scenarios.

#### **Architecture-Based Analysis**

SREPT is designed to accept the architecture of the application modeled as a discrete or continuous time Markov chain, directed acyclic graph, stochastic Petri net, product form, or non-product form queueing network [3]. By combining the application's architecture with the failure behavior of its components, SREPT provides architecture-based software reliability and performance predictions.

### **Conclusion**

SREPT is a versatile tool that enhances the accuracy and applicability of software reliability estimation and prediction. Its ability to integrate multiple approaches and account for realistic debugging scenarios makes it a valuable resource for software developers and quality assurance teams.

### **References**

[1] S. Gokhale. "Analysis of Software Reliability and Performance." Ph.D. thesis, Duke University, Durham, NC, June 1998.

[2] S. Ramani, S. Gokhale, and K. S. Trivedi. "SREPT: Software Reliability Estimation and Prediction Tool." Performance Evaluation, Vol. 39, pp. 37-60, 2000.

[3] K. S. Trivedi. Probability & Statistics with Reliability, Queuing and Computer Science Applications. Second edition. John Wiley & Sons, New York, 2001.

---

**Proceedings of the International Conference on Dependable Systems and Networks (DSN'02)**
0-7695-1597-5/02 $17.00 Â© 2002 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 04:14:15 UTC from IEEE Xplore. Restrictions apply.