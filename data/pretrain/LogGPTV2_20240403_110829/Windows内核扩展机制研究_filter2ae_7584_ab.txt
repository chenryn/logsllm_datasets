        // Set the FunctionTable in the host to the table supplied by the caller, or to MmBadPointer if a table wasn't supplied.
        if (RegistrationInfo->FunctionTable == nullptr)
        {
            pHostListEntry->FunctionTable = nt!MmBadPointer;
        }
        else
        {
            pHostListEntry->FunctionTable = RegistrationInfo->FunctionTable;
        }
        pHostListEntry->RundownRef = 0;
        // If there is a callback function for this host, call it after registering the extension, with 1 as the first parameter.
        if (pHostListEntry->FunctionAddress)
        {
            pHostListEntry->FunctionAddress(1, pHostListEntry->ArgForFunction);
        }
        // Here there is some more lock-related stuff
        // Set the HostTable of the calling driver to the table of functions listed in the host.
        if (RegistrationInfo->HostTable != nullptr)
        {
            *(PVOID)RegistrationInfo->HostTable = pHostListEntry->hostInterface;
        }
        // Return the initialized host to the caller in the output Extension parameter.
        *Extension = pHostListEntry;
        return STATUS_SUCCESS;
    }
`ExRegisterHost.c`：
    NTSTATUS ExRegisterHost(_Out_ PHOST_LIST_ENTRY ExtensionHost, _In_ ULONG Unused, _In_ PHOST_INFORMATION HostInformation)
    {
        NTSTATUS Status = STATUS_SUCCESS;
        // Allocate memory for a new HOST_LIST_ENTRY
        PHOST_LIST_ENTRY p = ExAllocatePoolWithTag(HostInformation->PoolType, 0x60, 'HExE');
        if (p == nullptr)
        {
            return STATUS_INSUFFICIENT_RESOURCES;
        }
        //
        // Initialize a new HOST_LIST_ENTRY 
        //
        p->Flags &= 0xFE;
        p->RefCount = 1;
        p->FunctionTable = 0;
        p->ExtensionId = HostInformation->ExtensionId;
        p->ExtensionVersion = HostInformation->ExtensionVersion;
        p->hostInterface = HostInformation->hostInterface;
        p->FunctionAddress = HostInformation->FunctionAddress;
        p->ArgForFunction = HostInformation->ArgForFunction;            
        p->Lock = 0;             
        p->RundownRef = 0;        
        // Search for an existing listEntry with the same version and id.
        PHOST_LIST_ENTRY listEntry = ExpFindHost(HostInformation->ExtensionId, HostInformation->ExtensionVersion);
        if (listEntry)
        {
            Status = STATUS_OBJECT_NAME_COLLISION;
            ExpDereferenceHost(p);
            ExpDereferenceHost(listEntry);
        }
        else
        {
            // Insert the new HOST_LIST_ENTRY to the end of ExpHostList.
            if ( *lastHostListEntry != &firstHostListEntry )
            {
                      __fastfail();
            }
            firstHostListEntry->Prev = &p;
            p->Next = firstHostListEntry;
            lastHostListEntry = p;
            ExtensionHost = p;
        }
        return Status;
    }
`ExpFindHost.c`：
    PHOST_LIST_ENTRY ExpFindHost(USHORT ExtensionId, USHORT ExtensionVersion)
    {
        PHOST_LIST_ENTRY entry;
        for (entry == ExpHostList; ; entry = entry->Next)
        {
            if (entry == &ExpHostList) 
            { 
                return 0; 
            }
            if ( *(entry->ExtensionId) == ExtensionId && *(entry->ExtensionVersion) == ExtensionVersion ) 
            { 
                break; 
            }
        }
        InterlockedIncrement(entry->RefCount);
        return entry;
    }
`ExpDereferenceHost.c`：
    void ExpDereferenceHost(PHOST_LIST_ENTRY Host)
    {
          if ( InterlockedExchangeAdd(Host.RefCount, 0xFFFFFFFF) == 1 )
        {
                ExFreePoolWithTag(Host, 0);
        }
    }
###  附录C：结构定义
    struct _HOST_INFORMATION
    {
        USHORT ExtensionId;
        USHORT ExtensionVersion;
        DWORD FunctionCount;
        POOL_TYPE PoolType;
        PVOID HostInterface;
        PVOID FunctionAddress;
        PVOID ArgForFunction;
        PVOID unk;
    } HOST_INFORMATION, *PHOST_INFORMATION;
    struct _HOST_LIST_ENTRY
    {
        _LIST_ENTRY List;
        DWORD RefCount;
        USHORT ExtensionId;
        USHORT ExtensionVersion;
        USHORT FunctionCount; // number of callbacks that the 
                              // extension contains
        POOL_TYPE PoolType;   // where this host is allocated
        PVOID HostInterface;  // table of unexported nt functions, 
                              // to be used by the driver to which 
                              // this extension belongs
        PVOID FunctionAddress; // optional, rarely used. 
                               // This callback is called before and    
                               // after an extension for this host 
                               // is registered / unregistered
        PVOID ArgForFunction; // will be sent to the function saved here
        _EX_RUNDOWN_REF RundownRef;
        _EX_PUSH_LOCK Lock;
        PVOID FunctionTable;    // a table of the callbacks that 
                                // the driver “registers”
    DWORD Flags;                // Only uses one flag. 
                                // Not sure about its meaning.
    } HOST_LIST_ENTRY, *PHOST_LIST_ENTRY;;
    struct _EX_EXTENSION_REGISTRATION_1
    {
        USHORT ExtensionId;
        USHORT ExtensionVersion;
        USHORT FunctionCount;
        PVOID FunctionTable;
        PVOID *HostTable;
        PVOID DriverObject;
    }EX_EXTENSION_REGISTRATION_1, *PEX_EXTENSION_REGISTRATION_1;