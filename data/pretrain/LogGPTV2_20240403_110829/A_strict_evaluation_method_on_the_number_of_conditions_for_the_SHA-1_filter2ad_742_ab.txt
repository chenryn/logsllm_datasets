ferential path for Round 1 does not take account of the oc-
currences of the 6-step local collisions corresponding to the
selection of disturbance vectors.
13
Table 2: Rules of Wang et al. for counting #CVCs
in round 2-4
step
disturb in
disturb in
other bits
comments
1
2
3
For a21
For a21,a22
Condition a20
is “truncated”
19
20
21
22-36
37
38-40
40-60
61-76
77
bit 2
0
0
1
2
3
4
4
2
2
2
4
4
4
4
4
3
2
78
79
80
Conditions
are “truncated”
starting at
step 77.
Conditions for
step 79,80
can be ignored
in analysis.
[Special counting rules by Wang et al.[14]]
(1)
(1)
(1)
(1)
1. If two disturbances start in both bit 2 and bit 1 in the
same step, then they only result in 4 conditions.
2. For Round 3, two consecutive disturbances in the same
bit position only account for 6 conditions (rather than
8). This is due to the property of the MAJ function.
Rectangle RangeDisturbance Vectorsmessage expansionspecial counting rule No.1limitation on HWcounting table &special counting rule No.2Disturbance VectorsDisturbance VectorsDisturbance Vectors &#Chaining Variable ConditionsDisturbance Vectorsstrict differential bit compression6-step local collisionprecise counting rules in every stepdifferential path confirmation for rounds 2 to 4Disturbance VectorsDisturbance Vectors &Differential Paths (2R-4R)Disturbance Vectors &Differential Paths (2R-4R)#Chaining Variable ConditionsDV expansionWang’s approachOur approach5. PROBLEMS OF THE APPROACH OF DV
SEARCH BY WANG ET AL. AND COUN-
TERMEASURES
On the approach of the DV search by Wang et al. de-
scribed in Section 4, we found ﬁve problems in “Wang’s Cal-
culation Algorithm of #CVC”. In this section, we discuss the
details of the problems and introduce the countermeasures.
5.1 Problem 1: Rough Application of Special
Counting Rule 1
Problem.
Wang et al. reduce the HW of DV by the special counting
rule 1. This rule can be stated as “If two local collisions start
in both bit 1 and bit 0 in the same step, then they result
in only 4 conditions.” They consider only the case of bit 1
and 0, however, this technique can also be applied to other
consecutive bits.
Solution.
In order to identify the least #CVCs strictly, we must ap-
ply the above technique to other consecutive bits. In this
paper, we call this technique “Strict Diﬀerential Bit Com-
pression”. We show the detail of this technique in Section 6-
I).
5.2 Problem 2: Selecting DVs by Considering
HW
Problem.
In the DV search of Wang et al., at ﬁrst, they select DVs
with HW less than 27 in order to pick up the DVs that may
have less #CVCs 2. And they carefully analyze the #CVCs
for only selected DVs. However, #CVCs are not depend
on only HW. So they might miss some DVs which have less
#CVCs.
Solution.
In order to solve this problem, we discard the selection
strategy of DVs by considering the HW. Therefore, we can
compare the #CVCs among all possible DVs. The complex-
ity of counting the #CVCs for all DVs is small, so we never
suﬀer any disadvantage by not selecting DVs with low HW.
5.3 Problem 3: Inaccurate Counting Rules
Problem.
In the counting rules, Wang et al.
evaluate that the
#CVCs for LCs that cross from 3rd round to 4th round
(step 57 to 60 in bit position 1) is 4. However, these evalua-
tions are not correct. They count more #CVCs than needed.
Solution.
We correct those inaccuracies when we make the new
counting rules (See Section 6-III for details).
2They claim that 27 is a reasonable threshold since three
CVCs are needed, on average for each local collision so the
total success probability becomes 2−81 or worse, which is
worse than the bound of the attack complexity derived from
birthday paradox (2−80).
5.4 Problem 4: Not all cases of addition in
MSB considered
Problem.
In SHA-1, the #CVCs is reduced if addition is done in
MSB. This case occurs if LCs start in round 2 or 4 from bit
position j, (j = 1, 31). However, their counting rules con-
sider only the case of j = 1.
Solution.
Before we count the #CVCs for a DV, we derive diﬀer-
entials of all CVs from the DV. After that, we count the
#CVCs by considering the diﬀerentials of CVs, rather than
the DV. (Details are explained in Section 6-III) Therefore,
when we count the #CVCs, we know whether diﬀerentials
are in MSB or not, and thus, our counting method covers
all cases of addition in MSB.
5.5 Problem 5: Rough Application of Special
Counting Rule 2
Problem.
In the method of Wang et al., Special Counting Rules 2
takes account of the property of the function f in 3rd round,
and reduces the #CVCs in a special case. However, there
are many other such properties for f , and then, their count-
ing rules don’t cover all the properties of f .
Solution.
At ﬁrst, we analyze all properties of f , and count the
#CVCs for all possible cases. These rules are listed in Sec-
tion 6-II. Our method derives diﬀerentials of all CVs from
DV before we count the #CVCs. Consequently, when we
count the #CVCs, we know what diﬀerentials exist in f , so
we can count the #CVCs by looking for the exact diﬀeren-
tials in f , not DV.
6. THE PROPOSED METHOD
As we discussed in the previous section, the DV search
by Wang et al. contains ﬁve problems. We use four new
techniques “Strict Diﬀerential Bit Compression”, “DV ex-
pansion”, “Precise Counting Rules in Every Step” and “Dif-
ferential Path Conﬁrmation for Rounds 2 to 4” to solve the
problems. The right side of Figure 2 shows our strategy. Our
algorithm is described as Algortihm1. In our algorithm, we
accurately count the #CVCs from a DV by using the four
techniques. And we don’t use HW of the DV in order to
solve Problem 2. The detail of our algorithm is described
below.
14
Table 3: Example of Strict Diﬀerential Bit Compression
Stepi
18
19
20
21
22
23
Stepi
18
19
20
21
22
23
ci
di
ai
bi
29,30,31
#CVC by Wang et al.’s counting technique
xi−1
ei
e0000000
0
0
0
0
0
29,30,31
27,28,29
27,28,29
27,28,29
total
#CVC
3
3
3
3
0
0
12
#CVC by our technique
ai
29
ci
bi
29
27
xi−1
e0000000
0
0
0
0
0
di
ei
#CVC
1
1
1
1
0
0
4
27
27
total
Strict Calculation Algorithm of #CVC.
Algorithm 1. #CVC calculation algorithm
i Expand DV to 80 steps in consideration of message
expansion.
ii Evaluate #CVC of the DV by using the following
“#CVC calculation core algorithm” (Algorithm 2).
iii Check the contradiction of the diﬀerential path for
each steps in rounds 2-4 by using the following “Dif-
ferential Path Conﬁrmation Algorithm” (Algorithm
3).
Algorithm 3. Diﬀerential Path Conﬁrmation Algo-
rithm (Section 6.2-IV)
i Derive the message (without sign) diﬀerentials in
each step by using LCs from (uncompressed) DV.
ii Derive the (without sign) diﬀerentials of output in
each step by using compressed-DV.
iii Check (δai−5,j ≪ 30) ⊕ (δai−1,j ≪ 5) ⊕ (δai,j) ⊕
(δmi−1,j) ⊕ (δfi−1,j) = 0 in each bit position j.
When the above equation is TRUE, ﬁnish this check
as SUCCESS.
iv Check the contradiction more strictly by considering
the carry eﬀect of each parameter.
Algorithm 2. #CVC calculation core algorithm We
assume that chaining variables ai (i ∈ {1, . . . , k}) are
satisﬁable.
i Compress input DV by using “Strict Diﬀerential Bit
Compression” shown in Section 6.2-I.
ii Derive the diﬀerential of output in each step by us-
ing “DV expansion” shown in Section 6.2-II.
iii Calculate #CVC from step k + 1 to step 80 by using
“Precise Counting Rules” shown in Section 6.2-III.
(#CVC is counted by each ai (i ∈ {k − 1, . . . , 80}))
iv Remove conditions for prevent carries at a79, a80 be-
cause it is possible to disregard them in collision
search.
v Return the total #CVC of ai
1, . . . , 80}.
for all i ∈ {k +
I. Strict Differential Bit Compression.
When consecutive “1”s exist in DV in the same step, we
treat this DV as having only “1” exists at the lowest position
in the consecutive bits. For example, we treat e0000000 as
20000000. As we described in Problem 1 in Section 5, Wang
et al.’s “Special Counting Rule 1” addresses only the least
signiﬁcant 2 bits. We apply the compression technique to
the other bits yielding the compressed DV. As a result, we
can count only essential diﬀerential bits given by DV. This
solves Problem 1. However, DV compression is impossible
if consecutive bits exist between the bit position 1 and 2, or
26 and 27 because there are 30-bit and 5-bit rotation shifts
in the SHA-1 compression function.
Table 3 shows diﬀerential path expanded by DV. In this
example, there are three diﬀerential bits in steps 18 to 22.
Wang et al.’s counting technique counts twelve CVCs for
those diﬀerential bits. On the other hand, our method needs
only four CVCs by adding the appropriate sign condition of
mi, and by letting the condition to eliminate the carry of
diﬀerentials. The similar technique is also discussed in [7].
15
Step i
xi−1
24
25
26
27
28
29
40000000
0
0
0
0
0
30
30
28
Step i
xi−1
ai
bi
ci
24
25
26
27
28
29
40000000
20000000
0
0
0
0
30
28
30
28
28
26
Table 4: Example of Eﬀect by DV expansion
ai
#CVC
ei
bi
ci
di
Comment
Wang’s Ours
1
1
1
1
0
0
4
1
1
1
1
0
0
4
#CVC
Wang’s Ours
1