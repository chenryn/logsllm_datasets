i∈C z(cid:48)
i and z(cid:48)
s(cid:48) ←
i
i
Then, S sends (r, s(cid:48)) to FECDSA.
5) Finally, S outputs whatever A outputs.
It is straightforward that the simulation in the key generation
is identical to a real execution in the key generation step. In
the presigning step, the only difference between the simulation
and the real execution is when the adversary sends incorrect
values, but the MAC check in the exponent does not detect
q , which is
it. However, this event happens with probability 1
allowed by the theorem.
We proceed to the signing phase. Observe that in the real
execution, the view of the adversary consists of the values
τ = y · (m(cid:48) + r · sk)
R = x · G
z = x · y
where x and y are random. In contrast, in the simulation, the
adversary’s view is
R = x · G
z
τ = s · z.
Where x and z are random. However, since in the real
z , the distributions in the two executions are
execution s = τ
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:08 UTC from IEEE Xplore.  Restrictions apply. 
152568
The Ideal Functionality FMPC
In addition to the usual operations (i.e. additions, multiplications, inputs and outputs over Fq and F2), the functionality
features the following procedures.
From-Fq-to-G. On input To-G(cid:0)[[sk]](cid:1), the functionality computes PK ← sk· G and sends it to the adversary, waiting for
2-DPF. On input 2-DPF(cid:0)N, [[ω]]2, [[β]], σ1, σ2
(cid:1) from every party, where σ1 and σ2 are different indexes in [n], N is a
a reply. If the answer is OK, the functionality outputs PK to every honest party, otherwise, it aborts.
power of 2, ω is the bit representation of an integer in [N ] and β belongs to Fq, the functionality does the following.
• If Pσ1 and Pσ2 are both corrupted, it sends β and ω to the adversary.
• If β = 0, it sends Zero to the adversary. If the reply is OK, the functionality outputs Zero to the honest partiesa.
• If one party Pσ among Pσ1 and Pσ2 is corrupted, it waits for the adversary to send yσ in FN
q . Moreover, it waits
for a set I ⊆ [N ]. If ω (cid:54)∈ I, it aborts. Otherwise, denoting by θ the index of the honest party among Pσ1 and Pσ2,
it outputs to Pθ
• If Pσ1 and Pσ2 are both honest, it samples y1 uniformly in FN
q and computes
yθ ← (
(cid:122)
(cid:124)
(cid:122)
(cid:124)
Finally, it outputs yi to Pσi for every i ∈ {1, 2}.
y2 ← (
(cid:125)(cid:124)
ω
(cid:125)(cid:124)
ω
(cid:123)
(cid:123)
(cid:123)(cid:122)
N
(cid:123)(cid:122)
N
(cid:125)
(cid:125)
0, 0, . . . , 0, β, 0, 0, . . . , 0
) − yσ.
0, 0, . . . , 0, β, 0, 0, . . . , 0
) − y1.
aThe 2-DPF protocol reveals the multiplication of β by a random element in F×
q . The operation leaks no information except whether β = 0 or not.
Fig. 9. The MPC functionality
statistically close (they differ if and only if x = 0, this event
occurs with probability at most 1/q).
Observe that the pair (r, s(cid:48)) sent by the simulator to the
functional is exactly what the honest parties would output
assuming that the signature veriﬁes. This concludes the proof.
APPENDIX B
PROOF OF THEOREM 2
We present the security proof of the pseudorandom corre-
lation generator PCGECDSA.
Proof: Deﬁne sk :=(cid:80)
i∈[n] ski.
Claim 2.1: The following relations hold
∀i (cid:54)= j : Mi,j = Ki,j + αj · xi,
(cid:88)
i∈[n]
di = sk·(cid:88)
i∈[n]
yi.
Proof of the claim: By the correctness of the DSPF, we
know that for every i (cid:54)= j and r ∈ [c]
(cid:102)M r
i,j(X) + (cid:101)K r
(cid:88)
l∈[t]
i,j(X) =
αj · βr
i [l] · X ωr
i [l] = αj · ur
i (X).
Moreover, for every r ∈ [c],
(cid:88)
i∈[n]
(cid:101)vr
skj · γr
i [l] · X ηr
i [l] =
i (X) =
(cid:88)
(cid:88)
(cid:88)
i∈[n]
i∈[n]
i,j∈[n]
=
=
=
ski · vr
i (X) +
ski · vr
i (X) +
(cid:88)
(cid:88)
(cid:88)
i (X) = sk · (cid:88)
l∈[t]
skj · vr
i(cid:54)=j
i(cid:54)=j
i∈[n]
skj · vr
i (X) =
vr
i (X).
As a consequence, we understand that
Mi,j = (cid:104)a, (cid:102)Mi,j(cid:105) = (cid:104)a,−(cid:102)Ki,j + αj · ui(cid:105) =
= −(cid:104)a,(cid:102)Ki,j(cid:105) + αj · (cid:104)a, ui(cid:105) = Ki,j + αj · xi.
(cid:88)
(cid:101)vi(cid:105) = (cid:104)a, sk · (cid:88)
= sk · (cid:88)
(cid:88)
(cid:104)a,(cid:101)vi(cid:105) = (cid:104)a,
(cid:104)a, vi(cid:105) = sk · (cid:88)
i∈[n]
i∈[n]
i∈[n]
di =
yi.
Moreover,(cid:88)
i∈[n]
vi(cid:105) =
i∈[n]
i∈[n]
Claim 2.2: The following relation holds
(cid:88)
(cid:16)(cid:88)
i∈[n]
(cid:17) ·(cid:16)(cid:88)
yj
j∈[n]
(cid:17)
.
zi =
xi
i∈[n]
162569
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:08 UTC from IEEE Xplore.  Restrictions apply. 
Proof of the claim: By the correctness of the DSPF, we
know that for every r, s ∈ [c], we have
(cid:88)
i∈[n]
wr,s
i =
(cid:88)
+
i(cid:54)=j
i∈[n]
i (X)
l,h∈[t]
i (X)
i [l] · γs
βr
i (X) · vs
(cid:88)
(cid:88)
ur
i (X) · vs
(cid:88)
ur
i(cid:54)=j
l∈[t]
i (X) · vs
ur
(cid:16)(cid:88)
(cid:17) ·(cid:16)(cid:88)
i [l](cid:17) ·(cid:16)(cid:88)
i [l] · X ωr
(cid:88)
βr
h∈[t]
i (X) · vs
(cid:17)
ur
i (X) +
i(cid:54)=j
ur
i (X)
vs
j (X)
(cid:88)
i∈[n]
+
(cid:88)
(cid:16)(cid:88)
i∈[n]
i∈[n]
=
=
=
(cid:88)
i∈[n]
As a consequence, we have that
j∈[n]
i∈[n]
i∈[n]
r,s∈[c]
(cid:88)
(cid:88)
(cid:16)(cid:88)
(cid:16)(cid:88)
(cid:16)(cid:88)
(cid:104)a ⊗ a, wi(cid:105) = (cid:104)a ⊗ a,
(cid:88)
(cid:17) ·(cid:16)(cid:88)
ar · as ·(cid:16)(cid:88)
(cid:17) ·(cid:16)(cid:88)
(cid:88)
(cid:88)
(cid:104)a, vj(cid:105)(cid:17)
(cid:104)a, ui(cid:105)(cid:17) ·(cid:16)(cid:88)
(cid:17)
(cid:17) ·(cid:16)(cid:88)
ar · ur
ur
i (X)
i (X)
j∈[n]
j∈[n]
i∈[n]
i∈[n]
i∈[n]
r∈[c]
s∈[c]
=
xi
yj
j∈[n]
i∈[n]
j∈[n]
zi =
=
=
=
=
j [h] · X ωr
i [l]+ηs
j [h] =
j [h](cid:17)
j [h] · X ηs
γs
=
j (X) =
wi(cid:105) =
(cid:17)
=
(cid:17)
vs
j (X)
as · vs
j (X)
=
Claim 2.3:
Let S ⊆ [n] be a non-empty subset of
parties. No PPT adversary provided with the PCG seeds
of the parties not
in S can distinguish between the real
(αi, ski, xi, (Mi,j, Kj,i)j(cid:54)=i, yi, zi, di)i∈S and the correspond-
ing tuples in which (Mi,j, Kj,i)j(cid:54)=i, zi and di are substituted
with random elements (M(cid:48)
M(cid:48)
j,i)j(cid:54)=i, z(cid:48)
d(cid:48)
i +
i subject to
i and d(cid:48)
i,j, K(cid:48)
yi,
i,j + αj · xi,
i,j = K(cid:48)
(cid:88)
(cid:88)
z(cid:48)
i +
i∈S
i(cid:54)∈S
zi =
Proof of the claim: By Claims 2.1 and 2.2, we know that
Mi,j = Ki,j + αj · xi,
yi,
(cid:88)
(cid:16)(cid:88)
i∈S
i∈[n]
i∈[n]
xi
i(cid:54)∈S
di = sk · (cid:88)
(cid:88)
(cid:17)
(cid:17) ·(cid:16)(cid:88)
di = sk · (cid:88)
(cid:88)
(cid:17) ·(cid:16)(cid:88)
(cid:17)
j∈[n]
i∈[n]
i∈[n]
yj
.
.
yj
j∈[n]
(cid:88)
i∈[n]
(cid:16)(cid:88)
i∈[n]
zi =
xi
These relations hold in both the analysed cases. It remains to
show that the the values (Mi,j, Kj,i)j(cid:54)=i, zi and di for i ∈ S
are pseudorandom elements satisfying the above conditions.
In [BGI15, Theorem 9], it was shown that the outputs of
FullEval on any single party’s DPF key are pseudorandom,
when the key remains hidden. As a result, it holds that for
every i, j ∈ S with i (cid:54)= j, (cid:101)K c−1
i
i
, wc−1,c−1
the values ((cid:101)vc−1
i,j (X) is pseudorandom in R.
Since ac−1 = 1, we conclude that Ki,j is indistinguishable
from a random element in R.
Take now ι ∈ S. Following the same argument as above,
we understand that
)i∈S,i(cid:54)=ι are
pseudorandom in R. Again, since ac−1 = 1, we conclude that