# Private Blocklist Lookups with Checklist

**Authors:**
- Dmitry Kogan, Stanford University
- Henry Corrigan-Gibbs, MIT CSAIL

**Conference:**
- Proceedings of the 30th USENIX Security Symposium, August 11–13, 2021
- ISBN: 978-1-939133-24-3
- Open access sponsored by USENIX
- [Link to Paper](https://www.usenix.org/conference/usenixsecurity21/presentation/kogan)

## Abstract
This paper introduces Checklist, a system for private blocklist lookups. In Checklist, a client can determine whether a specific string is on a server-held blocklist without revealing the string to the server. Checklist is the first blocklist-lookup system that:
1. Leaks no information about the client’s string to the server.
2. Does not require the client to store the entire blocklist.
3. Allows the server to respond to the client’s query in time sublinear in the blocklist size.

To achieve this, we developed a new two-server private-information-retrieval (PIR) protocol that is both asymptotically and concretely faster than previous protocols. We evaluated Checklist using Google’s “Safe Browsing” blocklist, which major browsers use to prevent web clients from visiting malware-hosting URLs. Currently, these lookups leak partial hashes of visited URLs to Google's servers. By modifying Firefox to use Checklist, we eliminate the leakage of partial URL hashes, at the cost of increasing communication by a factor of 3.3× and server-side compute costs by 9.8×. However, Checklist reduces end-to-end server-side costs by 6.7× compared to state-of-the-art two-server PIR schemes.

## Introduction
This paper proposes a new system for private blocklist lookups. In this setting, a client holds a private bitstring, and a server holds a set of blocklisted strings. The client wants to determine if its string is on the server’s blocklist without revealing the string to the server.

The blocklist-lookup problem arises in various computer systems:
- Web browsers check public-key certificates against blocklists of revoked certificates.
- Password-checking services like Google’s Password Checkup and “Have I Been Pwned?” compare user passwords against blocklists of breached credentials.
- Antivirus tools check binary hashes against blocklists of malicious software.
- Browsers and mail clients check URLs against Google’s Safe Browsing blocklist of phishing sites.

A simple approach is to store the blocklist on the server and have the client send its query string. However, this leaks private information. Storing the entire blocklist on the client offers maximal privacy but consumes significant bandwidth and storage. Hybrid approaches, such as storing a compressed version of the blocklist, still leak some information when the client queries the server.

Checklist addresses these issues by providing a new privacy-respecting blocklist-lookup system. It uses a high-throughput form of two-server PIR, requiring only modest server-side computation. For a blocklist of \( n \) entries, the amortized server-side cost is \( O(\sqrt{n}) \) work per query. This reduces server-side compute costs by 6.7× compared to existing PIR protocols.

## Contributions
- A new two-server offline/online PIR protocol that reduces server computation by a factor of the security parameter \( \lambda \approx 128 \).
- A general technique for efficiently supporting database updates in PIR schemes that use database-specific preprocessing.
- A blocklist-lookup system that uses these new PIR techniques to protect client privacy.
- An open-source implementation and experimental validation of Checklist applied to the Safe Browsing API, available on GitHub.

## Goals and Overview
### Problem Statement
In the private-blocklist-lookup problem, there is a client and one or more blocklist servers. The blocklist \( B \) is a set of strings, each of a common length \( \ell \). Initially, the client may download some information about the blocklist. Later, the client can lookup strings in the blocklist and learn whether a given string \( X \in \{0, 1\}^\ell \) is on the blocklist. The goals are:
- **Correctness:** The client should receive correct answers to its queries, except with negligible failure probability.
- **Privacy:** As long as one server is honest, an adversary controlling the network and the other server learns nothing about the client’s queries.
- **Efficiency:** Minimize server-side computation and total communication, amortized over many queries and updates.

### Design Overview
Checklist consists of two main layers:
1. **Private Lookups:** Uses a new offline/online PIR scheme that achieves a 128-fold speedup in server-side computation. This layer allows the server to answer private blocklist queries in time sublinear in the blocklist length.
2. **Dynamic Dictionaries:** Divides the blocklist into \( O(\log n) \) buckets, where the \( b \)-th bucket contains at most \( 2^b \) entries. This approach supports efficient updates and key-value lookups, reducing the amortized cost per update to \( O(\log n) \).

## Background
### Notation
- \( [n] \) denotes the set \( \{1, 2, \ldots, n\} \).
- All logarithms are base 2.
- \( \negl(·) \) refers to a function whose inverse grows faster than any fixed polynomial.
- \( r \leftarrow_R S \) denotes choosing \( r \) independently and uniformly at random from the set \( S \).
- \( b \leftarrow_R \text{Bernoulli}(p) \) denotes choosing the bit \( b \) to be "1" with probability \( p \) and "0" with probability \( 1 - p \).
- \( \bar{b} \) denotes the bit \( 1 - b \).
- \( X \oplus Y \) denotes the bitwise XOR of bit strings \( X \) and \( Y \).

### Private Information Retrieval (PIR)
In a PIR system, a set of servers holds identical copies of an \( n \)-row database. The client wants to fetch the \( i \)-th row without leaking the index \( i \) to the servers. We focus on the two-server setting, where the client interacts with two servers.