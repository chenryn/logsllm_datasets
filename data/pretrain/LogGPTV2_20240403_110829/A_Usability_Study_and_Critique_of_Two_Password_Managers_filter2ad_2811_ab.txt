Selecting the right participants for a usability study is
important. The participants should accurately represent
the users who would use the actual system, and be sim-
ilar in terms of experience and knowledge. Improperly
choosing participants will negatively affect the results of
the tests, typically by missing critical usability problems.
The guideline stating that ﬁve users are enough to dis-
cover most usability problems [18, 29] has long been
used to justify small usability studies. Recent work ques-
tions this assumption and highlights the fact that in most
cases ﬁve users are not enough [9, 22, 28]. They found
that some severe usability problems were only discov-
ered after running a larger group of participants. The
likelihood of ﬁnding usability problems is not evenly dis-
tributed. Some problems only arise under speciﬁc cir-
cumstances so using a small sample of users may not be
sufﬁcient to uncover them. The variability in the number
of problems found by any one user also makes it unlikely
that a sample of ﬁve users would discover most usability
problems. Faulkner justiﬁes that twenty users “can allow
the practitioner to approach increasing levels of certainty
that high percentages of existing usability problems have
been found in the testing” [9].
3.2 Overview of Study
Our
tests were conducted in Carleton University’s
Human-Oriented Technology Lab and the methodology
was reviewed and approved by the university’s ethics
committee. Our study explicitly looks at the password
managers as implemented rather than at the proposed ad-
ditional implementations suggested by the systems’ au-
thors.
The typical tasks that users would need to accomplish
with password managers fall into four categories:
1. Migrate user accounts (passwords) to use the pass-
word manager
4
Security ’06: 15th USENIX Security Symposium
USENIX Association
2. Log in to protected user accounts from a primary
computer
3. Change passwords for user accounts
4. Access user accounts remotely, i.e., from a com-
puter other than the primary computer, such as on
a public or friend’s machine.
Each participant completed a one-hour session, where
they completed a set of ﬁve tasks designed to simu-
late the real tasks that users would accomplish with the
password managers. The set of tasks was repeated so
that each participant completed them with both Pwd-
Hash and P-Multiplier. The order in which the tasks and
the programs were presented was balanced to avoid bias.
Throughout the session, the experimenter observed the
participant and recorded their actions. Additional user
feedback was gathered through questionnaires.
3.3 Participants
Twenty-seven adults participated in the study. Most were
students at our university, from various faculties and de-
gree programs; none were students specializing in com-
puter security. A few had technical backgrounds: four
were from Computer Science, one studied Information
Systems, and none were from Engineering. Data from
one participant was eliminated as a language barrier cou-
pled with very little computer experience hindered their
ability to understand the tasks. Of the remaining 26 par-
ticipants, 21 were between the ages of 18 and 30 and ﬁve
were over 30 years old. Data from these 26 participants
was used for all further analysis in this paper.2
The participants were familiar with using the web and
logging on to web sites requiring a username and pass-
word. All but two reported visiting the web daily, and
these two said they were online several times a week.
The participants were fairly comfortable with using com-
puters; 24 of the participants self-rated their general
computer skill level at 6 or higher on a scale of 1 to 10.
We chose not to screen participants based on experi-
ence using Firefox. Typical Firefox users are more tech-
nically sophisticated than average users so pre-selecting
on this criteria would have biased our pool of partici-
pants. Additionally, interaction with the browser’s inter-
face was minimal; participants simply had to enter URLs
and navigate within web pages. These tasks are accom-
plished in the same manner in Firefox and Internet Ex-
plorer.
A pre-task questionnaire was used to gain insight into
the participants’ initial attitude towards web security and
passwords. They reported using an average of six web
sites requiring a password to log in. A summary of their
responses is presented in Table 1.
3.4 Tasks
Participants completed a set of tasks using two differ-
ent computers during the session. Both computers were
Table 1: Participants’ initial attitude towards web security and
passwords. Results represent the number of participants (out of
26) responding yes to each question. *An additional 27% (7)
responded “somewhat”.
*58%
(15)
Number of Users
(25)
96%
Question
Do you sometimes reuse passwords on
different sites?
Are you concerned about the security
of passwords?
Criteria for choosing passwords:
(18)
Easy to remember
(14)
Difﬁcult for others to guess
(0)
Suggested by the system
(16)
Same as another password
Other
(3)
Participation in online activities requiring personal or
ﬁnancial details:
Online purchases
Online banking
Online bill payments
Other activities
69%
54%
0%
62%
12%
62%
73%
73%
27%
(16)
(19)
(19)
(7)
running Windows XP and Mozilla Firefox. One system
had the PwdHash plug-in (version 1.0 for Mozilla Fire-
fox) installed while the second computer included the P-
Multiplier plug-in (version 0.3 for Windows, Linux, and
Mac OS).
The tasks are described in the following list. The Sec-
ond Login task is dependent on the Update Pwd task, i.e.,
users must have successfully changed their password be-
fore they are able to log on to the site a second time with
their new protected password. All other tasks are inde-
pendent of each other. We did not include a ”delete pass-
word” task because neither system supports this func-
tionality. The tasks are:
Log In: Logging on to a web site that already has its
password protected by the plug-in. This simulates
how users log on once their passwords have been
converted to protected passwords.
Migrate Pwd: Logging on to a web site with an unpro-
tected password then changing the password so that
it becomes protected. This is required by users to
initially migrate each of their passwords.
Remote Login: Logging on to a web site with a pro-
tected password from a remote computer that does
not have the plug-in installed. This models how
users would log on to their accounts from a com-
puter other than their primary machine.
Update Pwd: Logging on to a web site with a protected
password then changing it to a new protected pass-
word. This situation would arise if users had to
change their password once it is already protected.
Second Login: Logging on to a web site a second time,
once the user has changed the password to a pro-
tected password. This task tests whether users un-
USENIX Association
Security ’06: 15th USENIX Security Symposium
5
derstand how to log on to their account once they
have changed to a protected password.
Table 2: Example instructions given to participants on how to
use PwdHash
The tasks were set up using popular web sites (Hot-
mail, Google, Amazon, and Blogger) that users may en-
counter in real life. Test accounts were created so that
participants did not use their personal accounts or pass-
words at any point during the experiment.
Participants completed the set of tasks with both plug-
ins; the order was balanced so that each plug-in was seen
ﬁrst the same number of times. The order of the tasks
within a set was also shufﬂed but an individual partic-
ipant saw the tasks in the same order for both plug-ins.
The Update Pwd and Second Login tasks were ordered so
that they were always separated by exactly one task (for
example, a participant completed the tasks in the order of
Log In, Remote Login, Update Pwd, Migrate Pwd, Sec-
ond Login). This ensured that participants changed their
focus for a time before logging on to the web site a sec-
ond time with their new protected password. One partic-
ipant quit after completing the tasks only with PwdHash,
but the remaining participants completed all tasks.
One of the difﬁculties with testing the usability of
these plug-ins is that they initially have no visible inter-
face. Even during the interaction, only P-Multiplier has
a visible pop-up window. So simply giving the tasks to
participants without instructions on how to use the plug-
ins would have been futile. To preserve ecological va-
lidity, we tried to keep the instructions to a minimum;
giving them written details of how to activate the plug-
in, a brief explanation of how to change a password, and
a short description of how to log on to a web site using
a remote computer. The entire set of instructions was
approximately half a page long for each plug-in (see Ta-
ble 2). Users typically do not read manuals when they
use software [3, 17, 31] so having participants follow
detailed instructions would not have reﬂected a realistic
scenario. Participants were also given a list of the user-
names and passwords that they would require to com-
plete the tasks. To minimize the effect of learning new
passwords, a simple, one-word password was given for
all tasks within a system (“alphabet” and “carleton”).
These passwords were also written on a sheet in front
of participants throughout the session.
Participants were given the instruction sheet for the
particular plug-in and told that they could refer to it
whenever necessary. They were directed to a computer
with a Firefox browser window open and the appropriate
plug-in pre-installed. They were instructed to pretend
that this was their home computer and they should use
Firefox as the browser for these tasks. Participants com-
pleted all tasks with a plug-in before switching comput-
ers to repeat the tasks with the second plug-in. No partic-
ipant expressed any concern over using Firefox instead
of the more popular Internet Explorer and no difﬁcul-
PwdHash Instructions:
Add @@ in front of passwords you want to be made se-
cure, this will activate PwdHash. PwdHash will transform
the password before sending it to the web site. For example,
if your password is “bob”, enter “@@bob”.
You can also activate PwdHash by clicking on the password
ﬁeld and pressing the F2 key before entering your password.
To reset a password:
If your old password was not protected, enter the old pass-
word without activating PwdHash. When entering the new
password, include the @@ at the front of the new pass-
word. This will activate PwdHash and transform this par-
ticular password.
If your old password was already protected by PwdHash, ac-
tivate PwdHash for your old password. When entering your
new password, activate PwdHash and enter a new password
for the site.
To use remotely:
To log in to a web account from a computer that does not
have PwdHash installed, visit:
http://crypto.stanford.edu/PwdHash/RemotePwdHash
to generate your protected password. Enter the address of
the target site and your password. The protected password
will be generated. It can be copied/pasted into the password
ﬁeld of the target site.
ties were observed due to using this alternative browser.
Firefox was selected as the browser because the stable
versions of the plug-ins were not available for Internet
Explorer. Firefox was used in the original PwdHash us-
ability study as well.
Each task was described on an index card (see Table
3 for an example). The card also included two ques-
tions asking participants to rate the difﬁculty of the task
and their satisfaction with the software for this particu-
lar task. Participants could take as long as they needed
to complete the task and were told that if they felt they
had spent enough time on a task and could not complete
it, they could quit. At the end of each task, they circled
their responses to the two questions and were provided
with the next index card.
When participants reached the task where they had to
log on to a web account from a remote computer (Re-
mote Login task), they were instructed to change com-
puters and pretend that they were now at their friend’s
house where the software was not installed. This proved
problematic for P-Multiplier since the authors’ solution
to remote access is to install the plug-in. Participants
could not install the plug-in on the second computer be-
cause it had PwdHash installed and the combination of
the two crashed the computer. The Remote Login task
was therefore eliminated for P-Multiplier. Judging from
participants’ reactions as they read from the instruction
sheet that they had to install software for remote access,
6
Security ’06: 15th USENIX Security Symposium
USENIX Association
Table 3: Example index card given to participants for the Log In task
Log on to www.google.com. Your password is protected by Password Multiplier.
This task was:
very easy
easy
neutral
difﬁcult
very difﬁcult
For this task, how satisﬁed are you with the software used to manage the password?
very dissatisﬁed
dissatisﬁed
neutral
satisﬁed
very satisﬁed
they would not have been pleased with this solution even
if they had been able to complete the task.3
After completing a set of tasks, participants answered
a paper questionnaire about their experience with the par-
ticular plug-in. The entire process was repeated for the
second plug-in. A ﬁnal post-task questionnaire asked
participants to compare the two plug-ins.
3.5 Data Collection
Data was collected in two ways:
through observation
and through questionnaires. An experimenter sat with
each participant throughout the session, recording obser-
vations, noting any difﬁculties, any obvious misconcep-
tions in the participant’s mental model of the software,
any comments made by the participant, and whether they
successfully completed the task. Participants were asked
at the beginning of the session to “think-aloud”. Besides
the standard instructions given to all participants, no fur-
ther explanations were given even if a participant asked
for more instructions. In these cases, the experimenter
remained cordial, clarifying that we were testing the us-
ability of the systems and needed to see if people could
use them without explanations. Occasional prompts such
as “what did you expect to happen there?” were used if
participants forgot to think-aloud.
The users’ goal was to successfully complete the tasks
using the given password manager. They were given as
much time as they wanted and the observer waited for the
participants to signal that they had completed the task or
that they had run out of ideas and could not complete it.
The outcome of each task was recorded by the observer
according to the following possibilities:
Successful: The participant completed the task without
difﬁculty.
Dangerous success: The participant eventually com-
pleted the task after several attempts (i.e., had dif-
ﬁculty). The negative impact is that in some cases,
the unsuccessful attempts prior to the eventual suc-
cess expose the password to attack (see Section 5.4).
Failed: The participant gave up on the task without
completing it.
False completion: The participant failed to complete
the task but erroneously believed that they had in
fact been successful.
Failed due to previous: The participant could not com-
plete the task because they had incorrectly com-
pleted the preceding task. This only applies to the
Second Login task, where the Update Pwd had to be
successful in order to proceed.
The ﬁrst outcome is considered most positive. The
second is somewhat positive but users may have exposed
their passwords to danger (e.g., to JavaScript attacks and
phishing) as they ﬂoundered with the task. They may
even have inadvertently exposed multiple passwords,
since a typical reaction to being unable to log in is to try
all of one’s passwords to see if something will work. The
fourth outcome is especially dangerous because it leads
to a false sense of security on the part of users.
Secondary measures taken in the study consisted of
several Likert-scale questions [16]. These ask respon-
dents to choose their level of agreement with the given
statement from a set of possible answers, usually rang-