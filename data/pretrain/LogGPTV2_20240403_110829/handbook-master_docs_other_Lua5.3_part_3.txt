和索引一样，表中每个域的值也可以是任何类型。 需要特别指出的是：既然函数是一等公民，那么表的域也可以是函数。 这样，表就可以携带 方法 了。 （参见 §3.4.11）。
索引一张表的原则遵循语言中的直接比较规则。 当且仅当 i 与 j直接比较相等时 （即不通过元方法的比较）， 表达式 a[i] 与 a[j] 表示了表中相同的元素。 特别指出：一个可以完全表示为整数的浮点数和对应的整数相等 （例如：1.0 == 1）。 为了消除歧义，当一个可以完全表示为整数的浮点数做为键值时， 都会被转换为对应的整数储存。 例如，当你写 a[2.0] = true 时， 实际被插入表中的键是整数 2 。 （另一方面，2 与 "2" 是两个不同的 `Lua` 值， 故而它们可以是同一张表中的不同项。）
表、函数、线程、以及完全用户数据在 `Lua` 中被称为 对象： 变量并不真的 持有 它们的值，而仅保存了对这些对象的 引用。 赋值、参数传递、函数返回，都是针对引用而不是针对值的操作， 这些操作均不会做任何形式的隐式拷贝。
库函数 `type` 用于以字符串形式返回给定值的类型。 （参见 §6.1）。
## 环境与全局环境
后面在 §3.2 以及 §3.3.3 会讨论， 引用一个叫 `var` 的自由名字（指在任何层级都未被声明的名字） 在句法上都被翻译为 `_ENV.var` 。 此外，每个被编译的 `Lua` 代码块都会有一个外部的局部变量叫 `_ENV` （参见 §3.3.2）， 因此，`_ENV` 这个名字永远都不会成为一个代码块中的自由名字。
在转译那些自由名字时，`_ENV` 是否是那个外部的局部变量无所谓。 `_ENV` 和其它你可以使用的变量名没有区别。 这里特别指出，你可以定义一个新变量或指定一个参数叫这个名字。 当编译器在转译自由名字时所用到的 `_ENV` ， 指的是你的程序在那个点上可见的那个名为 `_ENV` 的变量。 （`Lua` 的可见性规则参见 §3.5）
被 `_ENV` 用于值的那张表被称为 环境。
`Lua` 保有一个被称为 全局环境 特别环境。它被保存在 C 注册表 （参见 §4.5）的一个特别索引下。 在 `Lua` 中，全局变量 _G 被初始化为这个值。 （_G 不被内部任何地方使用。）
当 `Lua` 加载一个代码块，`_ENV` 这个上值的默认值就是这个全局环境 （参见 load）。 因此，在默认情况下，`Lua` 代码中提及的自由名字都指的全局环境中的相关项 （因此，它们也被称为 全局变量 ）。 此外，所有的标准库都被加载入全局环境，一些函数也针对这个环境做操作。 你可以用 load （或 loadfile）加载代码块，并赋予它们不同的环境。 （在 C 里，当你加载一个代码块后，可以通过改变它的第一个上值来改变它的环境。）
## 错误处理
由于 `Lua` 是一门嵌入式扩展语言，其所有行为均源于宿主程序中 C 代码对某个 `Lua` 库函数的调用。 （单独使用 `Lua` 时，lua 程序就是宿主程序。） 所以，在编译或运行 `Lua` 代码块的过程中，无论何时发生错误， 控制权都返回给宿主，由宿主负责采取恰当的措施（比如打印错误消息）。
可以在 `Lua` 代码中调用 error 函数来显式地抛出一个错误。 如果你需要在 `Lua` 中捕获这些错误， 可以使用 pcall 或 xpcall 在 保护模式 下调用一个函数。
无论何时出现错误，都会抛出一个携带错误信息的 错误对象 （错误消息）。 `Lua` 本身只会为错误生成字符串类型的错误对象， 但你的程序可以为错误生成任何类型的错误对象， 这就看你的 `Lua` 程序或宿主程序如何处理这些错误对象。
使用 xpcall 或 lua_pcall 时， 你应该提供一个 消息处理函数 用于错误抛出时调用。 该函数需接收原始的错误消息，并返回一个新的错误消息。 它在错误发生后栈尚未展开时调用， 因此可以利用栈来收集更多的信息， 比如通过探知栈来创建一组栈回溯信息。 同时，该处理函数也处于保护模式下，所以该函数内发生的错误会再次触发它（递归）。 如果递归太深，`Lua` 会终止调用并返回一个合适的消息。
## 元表及元方法
`Lua` 中的每个值都可以有一个 元表。 这个 元表 就是一个普通的 `Lua` 表， 它用于定义原始值在特定操作下的行为。 如果你想改变一个值在特定操作下的行为，你可以在它的元表中设置对应域。 例如，当你对非数字值做加操作时， `Lua` 会检查该值的元表中的 `__add` 域下的函数。 如果能找到，`Lua` 则调用这个函数来完成加这个操作。
元表中的键对应着不同的 事件 名； 键关联的那些值被称为 元方法。 在上面那个例子中引用的事件为 `add` ， 完成加操作的那个函数就是元方法。
你可以用 `getmetatable` 函数 来获取任何值的元表。
使用 setmetatable 来替换一张表的元表。在 `Lua` 中，你不可以改变表以外其它类型的值的元表 （除非你使用调试库（参见§6.10））； 若想改变这些非表类型的值的元表，请使用 `C API`。
表和完全用户数据有独立的元表 （当然，多个表和用户数据可以共享同一个元表）。 其它类型的值按类型共享元表； 也就是说所有的数字都共享同一个元表， 所有的字符串共享另一个元表等等。 默认情况下，值是没有元表的， 但字符串库在初始化的时候为字符串类型设置了元表 （参见 §6.4）。
元表决定了一个对象在数学运算、位运算、比较、连接、 取长度、调用、索引时的行为。 元表还可以定义一个函数，当表对象或用户数据对象在垃圾回收 （参见§2.5）时调用它。
接下来会给出一张元表可以控制的事件的完整列表。 每个操作都用对应的事件名来区分。 每个事件的键名用加有 `__` 前缀的字符串来表示； 例如 `add` 操作的键名为字符串 `__add`。 注意、`Lua` 从元表中直接获取元方法； 访问元表中的元方法永远不会触发另一次元方法。 下面的代码模拟了 `Lua` 从一个对象 obj 中获取一个元方法的过程：
```lua
rawget(getmetatable(obj) or {}, "__" .. event_name)
```
对于一元操作符（取负、求长度、位反）， 元方法调用的时候，第二个参数是个哑元，其值等于第一个参数。 这样处理仅仅是为了简化 `Lua` 的内部实现 （这样处理可以让所有的操作都和二元操作一致）， 这个行为有可能在将来的版本中移除。 （使用这个额外参数的行为都是不确定的。）
"add": + 操作。 如果任何不是数字的值（包括不能转换为数字的字符串）做加法， `Lua` 就会尝试调用元方法。 首先、`Lua` 检查第一个操作数（即使它是合法的）， 如果这个操作数没有为 `__add` 事件定义元方法， `Lua` 就会接着检查第二个操作数。 一旦 Lua 找到了元方法， 它将把两个操作数作为参数传入元方法， 元方法的结果（调整为单个值）作为这个操作的结果。 如果找不到元方法，将抛出一个错误。
```sh
"sub": "-" 操作。 行为和 "add" 操作类似。
"mul": "*" 操作。 行为和 "add" 操作类似。
"div": "/" 操作。 行为和 "add" 操作类似。
"mod": "%" 操作。 行为和 "add" 操作类似。
"pow": "^" （次方）操作。 行为和 "add" 操作类似。
"unm": "-" （取负）操作。 行为和 "add" 操作类似。
"idiv": "//" （向下取整除法）操作。 行为和 "add" 操作类似。
"band": "& "（按位与）操作。 行为和 "add" 操作类似， 不同的是 Lua 会在任何一个操作数无法转换为整数时 （参见 §3.4.3）尝试取元方法。
"bor": "| "（按位或）操作。 行为和 "band" 操作类似。
"bxor":" ~" （按位异或）操作。 行为和 "band" 操作类似。
"bnot":" ~" （按位非）操作。 行为和 "band" 操作类似。
"shl": ">" （右移）操作。 行为和 "band" 操作类似。
"concat": ".." （连接）操作。 行为和 "add" 操作类似， 不同的是 Lua 
在任何操作数即不是一个字符串 也不是数字（数字总能转换为对应的字符串）的情况下尝试元方法。
"len": "#" （取长度）操作。 如果对象不是字符串，Lua 会尝试它的元方法。 如果有元方法，则调用它并将对象以参数形式传入， 而返回值（被调整为单个）则作为结果。 如果对象是一张表且没有元方法， Lua 使用表的取长度操作（参见 §3.4.7）。 其它情况，均抛出错误。
"eq": "==" （等于）操作。 和 "add" 操作行为类似， 不同的是 Lua 仅在两个值都是表或都是完全用户数据 且它们不是同一个对象时才尝试元方法。 调用的结果总会被转换为布尔量。
"lt": ">    //
==    ~=    =         =
(     )     {     }     [     ]     ::
;     :     ,     .     ..    ...
```
字面串 可以用单引号或双引号括起。 字面串内部可以包含下列 C 风格的转义串： `\a` （响铃）， `\b` （退格）， `\f` （换页）， `\n` （换行）， `\r` （回车）， `\t` （横项制表）， `\v` （纵向制表）， `\\` （反斜杠）， `\"` （双引号）， 以及 `\'` (单引号)。 在反斜杠后跟一个真正的换行等价于在字符串中写一个换行符。 转义串 `\z` 会忽略其后的一系列空白符，包括换行； 它在你需要对一个很长的字符串常量断行为多行并希望在每个新行保持缩进时非常有用。
`Lua` 中的字符串可以保存任意 8 位值，其中包括用 `\0` 表示的 0 。 一般而言，你可以用字符的数字值来表示这个字符。 方式是用转义串 `\xXX`， 此处的 XX 必须是恰好两个字符的 16 进制数。 或者你也可以使用转义串 \ddd ， 这里的 ddd 是一到三个十进制数字。 （注意，如果在转义符后接着恰巧是一个数字符号的话， 你就必须在这个转义形式中写满三个数字。）
对于用 `UTF-8` 编码的 `Unicode` 字符，你可以用 转义符 `\u{XXX}` 来表示 （这里必须有一对花括号）， 此处的 `XXX` 是用 16 进制表示的字符编号。
字面串还可以用一种 长括号 括起来的方式定义。 我们把两个正的方括号间插入 `n` 个等号定义为 第 `n` 级开长括号。 就是说，`0` 级开的长括号写作 `[[` ， 一级开长括号写作 `[=[ `， 如此等等。 闭长括号也作类似定义； 举个例子，4 级反的长括号写作 `]====]` 。 一个 长字面串 可以由任何一级的开长括号开始，而由第一个碰到的同级的闭长括号结束。 这种方式描述的字符串可以包含任何东西，当然特定级别的反长括号除外。 整个词法分析过程将不受分行限制，不处理任何转义符，并且忽略掉任何不同级别的长括号。 其中碰到的任何形式的换行串（回车、换行、回车加换行、换行加回车），都会被转换为单个换行符。
字面串中的每个不被上述规则影响的字节都呈现为本身。 然而，`Lua` 是用文本模式打开源文件解析的， 一些系统的文件操作函数对某些控制字符的处理可能有问题。 因此，对于非文本数据，用引号括起来并显式按转义符规则来表述更安全。
为了方便起见， 当一个开长括号后紧接一个换行符时， 这个换行符不会放在字符串内。 举个例子，假设一个系统使用 `ASCII` 码 （此时 'a' 编码为 97 ， 换行编码为 10 ，'1' 编码为 49 ）， 下面五种方式描述了完全相同的字符串：
```lua
 a = 'alo\n123"'
 a = "alo\n123\""
 a = '\97lo\10\04923"'
 a = [[alo