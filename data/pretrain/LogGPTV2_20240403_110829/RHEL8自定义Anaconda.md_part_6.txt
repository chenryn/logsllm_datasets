    # to the spoke or leave empty to extract everything
    builderObjects = ["helloWorldSpokeWindow", "buttonImage"]
    # the name of the main window widget
    mainWidgetName = "helloWorldSpokeWindow"
    # name of the .glade file in the same directory as this source
    uiFile = "hello_world.glade"
    # category this spoke belongs to
    category = HelloWorldCategory
    # spoke icon (will be displayed on the hub)
    # preferred are the -symbolic icons as these are used in Anaconda's spokes
    icon = "face-cool-symbolic"
    # title of the spoke (will be displayed on the hub)
    title = N_("_HELLO WORLD")
```
:::
:::
`__all__`{.literal} 属性导出 `spoke`{.literal}
类，后跟其定义的第一行，包括之前在 ["GUI
附加组件基本特性"一节](#developing-installer-add-ons_customizing-anaconda.html#gui-add-on-basic-features_developing-installer-add-ons "GUI 附加组件基本特性"){.xref}
中所述的属性定义。这些属性值引用
`com_example_hello_world/gui/spokes/hello.glade`{.literal}
文件中定义的小部件。还有两个其他显著属性：
::: itemizedlist
-   `category`{.literal}，它的值从
    `com_example_hello_world.gui.gui.categories`{.literal} 模块的
    `HelloWorldCategory`{.literal} 类导入。附加组件路径位于
    `sys.path`{.literal} 中的 `HelloWorldCategory`{.literal}，以便能够从
    `com_example_hello_world`{.literal}
    软件包导入值。`category`{.literal} 属性是 `N_ 功能`{.literal}
    名称的一部分，用于标记要转换的字符串；但会返回字符串的非翻译版本，因为转换是在后续阶段进行。
-   `标题`{.literal}，其定义中包含一个下划线。`title`{.literal}
    属性下划线标记标题本身的开头，并通过 `Alt+H`{.literal} 键盘快捷键使
    spoke 可访问。
:::
通常在类定义标头和类 `属性`{.literal}
定义后面是初始化类实例的构造器。如果是 Anaconda
图形界面对象，可以通过两种方法初始化新实例： `__init__`{.literal} 方法和
`初始化`{.literal} 方法。
两个这样的功能背后的原因是，一次可在内存中创建 GUI
对象，并在不同时间完全初始化，因为 `spoke`{.literal}
初始化可能会耗时。因此，`__init__`{.literal} 方法应只调用父的
`__init__`{.literal} 方法，例如初始化非 GUI
属性。另一方面，安装程序图形用户界面 `初始化`{.literal}
时调用的初始化方法应该完成 spoke 的完整初始化过程。
在
`Hello World 附加组件示例中`{.literal}，按如下所示定义这两种方法：注意传递到
`__init__`{.literal} 方法的参数编号和描述。
::: example
[]{#developing-installer-add-ons_customizing-anaconda.html#def-init-and-initialize-method}
**例 4.5. 定义 `__init__ 并`{.literal} 初始化方法：**
::: example-contents
``` literallayout
def __init__(self, data, storage, payload):
    """
    :see: pyanaconda.ui.common.Spoke.init
    :param data: data object passed to every spoke to load/store data
    from/to it
    :type data: pykickstart.base.BaseHandler
    :param storage: object storing storage-related information
    (disks, partitioning, bootloader, etc.)
    :type storage: blivet.Blivet
    :param payload: object storing packaging-related information
    :type payload: pyanaconda.packaging.Payload
    """
    NormalSpoke.init(self, data, storage, payload)
    self._hello_world_module = HELLO_WORLD.get_proxy()
def initialize(self):
    """
    The initialize method that is called after the instance is created.
    The difference between init and this method is that this may take
    a long time and thus could be called in a separate thread.
    :see: pyanaconda.ui.common.UIObject.initialize
    """
    NormalSpoke.initialize(self)
    self._entry = self.builder.get_object("textLines")
    self._reverse = self.builder.get_object("reverseCheckButton")
```
:::
:::
传递到 \_ `init__`{.literal} 方法的数据参数是存储所有数据的 Kickstart
文件的内存树式表示。在ancestors 的 `__init__`{.literal}
方法之一中，它存储在 `self.data`{.literal}
属性中，它允许类中的所有其他方法读取和修改结构。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
从 RHEL8 开始，`存储对象`{.literal}
不再可用。如果您的附加组件需要与存储配置交互，请使用
`Storage DBus`{.literal} 模块。
:::
因为 HelloWorldData 类已在 ["Hello World addon
示例"一节](#developing-installer-add-ons_customizing-anaconda.html#the-hello-world-addon-example_developing-installer-add-ons "Hello World addon 示例"){.xref}
中定义，所以此附加组件的 self.data 中已有子树。其 root（一个类实例）作为
`self.data.addons.com_example_hello_world`{.literal} 提供。
ancestor 的 `__init__`{.literal} 的另一个操作是使用
`spoke 的 .glade`{.literal} 文件初始化 GtkBuilder 的实例，并将它存储为
`self.builder`{.literal}。`初始化`{.literal}
方法使用它来获取用于显示和修改 Kickstart 文件 %addon 部分中的文本的
`GtkTextEntry`{.literal}。
在创建 spoke 时，`__init__`{.literal} 和 `初始化`{.literal}
方法都很重要。但是，发言人的主要角色是希望更改或查看发言人值显示和集的用户访问。要启用此功能，可以使用其他三种方法：
::: itemizedlist
-   `刷新`{.literal} - 在要访问 spoke 时调用 ；此方法会刷新 spoke
    的状态，主要是 UI
    元素，以确保显示的数据与内部数据结构匹配，并通过它来确保显示
    self.data 结构中存储的当前值。
-   `应用`{.literal} - 当 spoke 保留时调用，用于将 UI 元素的值存储回
    `self.data`{.literal} 结构。
-   `执行`{.literal} - 当用户离开 spoke 并用于根据 spoke
    的新状态执行任何运行时更改时调用。
:::
这些功能在 Hello World 附加组件示例中通过以下方式实现：
::: example
[]{#developing-installer-add-ons_customizing-anaconda.html#def-refr}
**例 4.6. 定义刷新、应用和执行方法**
::: example-contents
``` literallayout
def refresh(self):
    """
    The refresh method that is called every time the spoke is displayed.
    It should update the UI elements according to the contents of
    internal data structures.
    :see: pyanaconda.ui.common.UIObject.refresh
    """
    lines = self._hello_world_module.Lines
    self._entry.get_buffer().set_text("".join(lines))
    reverse = self._hello_world_module.Reverse
    self._reverse.set_active(reverse)
def apply(self):
    """
    The apply method that is called when user leaves the spoke. It should
    update the D-Bus service with values set in the GUI elements.
    """
    buf = self._entry.get_buffer()
    text = buf.get_text(buf.get_start_iter(),
                        buf.get_end_iter(),
                        True)
    lines = text.splitlines(True)
    self._hello_world_module.SetLines(lines)
    self._hello_world_module.SetReverse(self._reverse.get_active())
def execute(self):
  """
  The execute method that is called when the spoke is exited. It is
  supposed to do all changes to the runtime environment according to
  the values set in the GUI elements.
  """
  # nothing to do here
  pass
```
:::
:::
您可以使用几个额外方法控制 spoke 的状态：
::: itemizedlist
-   `Ready`{.literal} - 确定 spoke
    是否准备好被访问；如果值为\"False\"，则不能访问
    `spoke`{.literal}，例如，在配置软件包源前，`Package Selection`{.literal}
    spoke。
-   `Complete`{.literal} - 确定 spoke 是否已完成。
-   `强制`{.literal} - 决定 spoke
    是强制还是非强制的，例如，必须始终进行查询的
    `Installation Destination`{.literal} spoke，即使您想要使用自动分区。
:::
所有这些属性都需要根据安装过程的当前状态动态确定。
以下是在 Hello World 附加组件中实施这些方法的示例，这需要在
`HelloWorldData`{.literal} 类的文本属性中设置特定的值：
::: example
[]{#developing-installer-add-ons_customizing-anaconda.html#def-ready-comp-mand}
**例 4.7. 定义就绪、已完成和强制的方法**
::: example-contents
``` literallayout
@property
def ready(self):
    """
    The ready property reports whether the spoke is ready, that is, can be visited
    or not. The spoke is made (in)sensitive based on the returned value of the ready
    property.
    :rtype: bool
    """
    # this spoke is always ready
    return True
@property
def mandatory(self):
    """
    The mandatory property that tells whether the spoke is mandatory to be
    completed to continue in the installation process.
    :rtype: bool
    """
    # this is an optional spoke that is not mandatory to be completed
    return False
```
:::
:::
在定义了这些属性后，spoke 可以控制其可访问性和完整性，但不能提供
中配置的值的摘要 - 您必须访问 spoke
以查看配置方式，可能不需要这样做。因此，存在名为 `status`{.literal}
的额外属性。此属性包含一行文本，其中含有已配置值的简短摘要，然后可显示在
spoke 标题下的 hub 中。
status 属性在 `Hello World 示例`{.literal} 附加组件中定义，如下所示：
::: example
[]{#developing-installer-add-ons_customizing-anaconda.html#def-status-prop}
**例 4.8. 定义 `status`{.literal} 属性**
::: example-contents
``` literallayout
@property
def status(self):
    """
    The status property that is a brief string describing the state of the
    spoke. It should describe whether all values are set and if possible
    also the values themselves. The returned value will appear on the hub
    below the spoke's title.
    :rtype: str
    """
    lines = self._hello_world_module.Lines
    if not lines:
        return _("No text added")
    elif self._hello_world_module.Reverse:
        return _("Text set with {} lines to reverse").format(len(lines))
    else:
        return _("Text set with {} lines").format(len(lines))
```
:::
:::
在定义了示例中描述的所有属性后，附加组件完全支持显示图形用户界面(GUI)以及
Kickstart。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
此处演示的示例非常简单，不包含任何控制；需要掌握 Python Gtk
编程知识才能在 GUI 中开发功能性的交互式发言人。
:::
个值得注意的限制是每个 spoke 都必须有自己的主窗口，即
`SpokeWindow`{.literal} 小部件的实例。此小部件以及其他特定于 Anaconda
的小部件可在 `anaconda-widgets`{.literal} 软件包中找到。您可以在
`anaconda-widgets-devel`{.literal} 软件包中找到使用 GUI
支持开发附加组件所需的其他文件，如 `Glade`{.literal} 定义。
旦图形界面支持模块包含所有必要的方法，您可以继续使用以下方法以添加对基于文本的用户界面的支持，或者您可以继续使用
["部署和测试 Anaconda
附加组件"一节](#developing-installer-add-ons_customizing-anaconda.html#deplyoing-and-testing-an-anaconda-add-on_developing-installer-add-ons "部署和测试 Anaconda 附加组件"){.xref}
并测试附加组件。
:::
::: section
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#_addon_gui_advanced_features}Addon GUI 高级功能 {.title}
:::
`pyanaconda`{.literal}
软件包包含多个帮助程序和实用程序功能，以及可供集线器和 spoke
使用的构造。其中大多数位于 `pyanaconda.ui.gui.utils`{.literal}
软件包中。
`Hello World`{.literal} 附加组件示例演示了 Anaconda 还使用的 the
`englightbox`{.literal}
内容管理器的用法。此内容管理器可以将窗口置于照盘中，以提高其可见性并专注于防止用户与底层窗口交互。为了演示此功能，示例附加组件包含一个打开新对话框窗口的按钮；对话框本身是一个从
GUIObject 类继承的特殊 HelloWorldDialog，在
pyanaconda.ui.gui.[*init*]{.emphasis} 中定义的。
对话框类定义运行和销毁可通过 self.window 属性访问的内部 Gtk 对话框的 run
方法，该属性使用含义相同的 mainWidgetName
类属性填充。因此，定义对话框的代码非常简单，如下例所示：
::: example
[]{#developing-installer-add-ons_customizing-anaconda.html#def-englightbox-dial}
**例 4.9. 定义 englightbox 对话框**
::: example-contents
``` literallayout
        # every GUIObject gets ksdata in init
        dialog = HelloWorldDialog(self.data)
        # show dialog above the lightbox
        with self.main_window.enlightbox(dialog.window):
            dialog.run()
```
:::
:::
`定义 englightbox Dialog`{.literal}
示例代码会创建一个对话框实例，然后使用使用者框上下文管理器在 lightbox
中运行对话框。上下文管理器引用了发言人的窗口，只需要对话框的窗口来实例化对话框。
Anaconda
提供的另一个有用功能是能够定义一个在安装期间和第一次重启后显示的
spoke。`Initial Setup`{.literal} 工具在
["添加对附加图形用户界面(GUI)的支持"一节](#developing-installer-add-ons_customizing-anaconda.html#adding-support-for-the-add-on-graphical-user-interface-gui_developing-installer-add-ons "添加对附加图形用户界面(GUI)的支持"){.xref}
中被描述。要使 Anaconda 和 Initial Setup 都可用，必须继承特殊的
`FirstbootSpokeMixIn`{.literal} 类（也称为 `混合）`{.literal}，作为
`pyanaconda.ui.common`{.literal} 模块中定义的第一个继承类。
如果您只想在 Initial Setup 中提供特定 spoke，则这个 spoke 应该继承
`FirstbootOnlySpokeMixIn`{.literal} 类。
`pyanaconda`{.literal} 软件包提供了更多高级功能，如
`@gtk_action_wait`{.literal} 和 `@gtk_action_nowait`{.literal}
decorators，但它们不在本指南范围之内。有关更多示例，请参阅安装程序的来源。
:::
::: section
::: titlepage