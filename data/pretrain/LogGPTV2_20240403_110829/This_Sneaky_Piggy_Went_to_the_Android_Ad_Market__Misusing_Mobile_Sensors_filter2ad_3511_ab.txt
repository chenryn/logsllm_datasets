the corresponding user action.
Motion
sensors
P.O.1 | P.O.2
GPS
CAM
P.O.1
MIC
P.O.1
without
SYSTEM_ALERT_WINDOW
with
SYSTEM_ALERT_WINDOW
s
n
o
i
t
c
A
r
e
s
U
Device Lock
UI Swipe
Swipe + Lock
Force Stop
✓
✓
✗
✗
Intra-app data exfiltration
Inter-app data exfiltration
✓
✓
✗
✗
✓
✓
✗
✗
✓
✗ | ✓
✗
✗
Figure 1: Overview of our attack vector. A malicious actor
publishes an ad campaign that accesses mobile sensors, for
delivering sophisticated and stealthy attacks.
which affects every Android device (71.93% of mobile users world-
wide [100]). As opposed to prior attacks, our attack vector does not
require any malicious app to be installed on the device, nor does it
rely on a user visiting a malicious website. Furthermore, as these are
embedded in-app advertisements, they cannot be blocked through
ad-blocking browser extensions. Our presented attack uses in-app
advertisements to obtain the device’s motion sensor readings, al-
lowing the attacker to stealthily infer sensitive user information
including any information that is typed on the screen (e.g., creden-
tials, credit card information, and pin numbers). While we use the
inference of user input as our driving scenario, since it is also the
most frequently feasible sensor-based attack [34], our attack vector
can be tailored for any sensor-based attack. This is possible due to
the lack of any restriction in accessing the device’s sensors (except
for the camera and microphone) through an Android permission
or a user prompt.
Figure 1 provides an overview of our attack, where the attacker
creates a seemingly-benign mobile ad campaign. Given that access-
ing sensor-based data is an emerging trend in mobile ads, with
up to a nine-times higher engagement rate than simple mobile
banners [74], the attacker can release their ad campaign through
major legitimate ad platforms. Since ad campaigns can be tailored
to specific needs, the attacker can instruct the Ad Server or DSP to
only display the ad on mobile devices and, specifically, as an in-app
ad. The attacker can even specify a set of select apps to maximize
the impact of the attack, as we describe in §4.2.
The actual context of the advertisement does not really matter
as our attack does not require the user to click on the ad or in-
teract with it in any way. The advertisement will go through the
normal process of publishing and eventually be displayed as an
in-app advertisement across different apps. When the advertise-
ment reaches the user’s device, the JavaScript code leverages the
appropriate HTML5 API calls for accessing the motion sensors and
then exfiltrates this data to a server controlled by the attacker.
4.2 Intra & Inter-Application Attacks
Here we provide technical details about two distinct attack scenar-
ios that can be used to exfiltrate sensitive data from an Android
device, namely intra and inter-application data exfiltration. We
present notable examples for exfiltrating billing information (e.g.,
credit card number, paypal account, etc.) for both attack scenarios
by targeting (i) the Google Play Billing Library, widely used for
in-app purchases in popular applications, and (ii) the official Play
Store app. Table 1 summarizes the app permission requirements
(if any) and whether sensor access is granted for different mobile
sensors in each attack scenario. CAM, MIC and GPS require that the
app holds the appropriate permissions. Apps targeting API versions
greater than API 28, also need ACCESS_BACKGROUND_LOCATION for
accessing GPS in the background. Additionally, since API 30 allows
different options for dangerous permissions, we tested the permis-
sion option “Allowed only while in use” (P.O.1) for CAM and MIC.
For GPS we tested “Allowed only while in use” (P.O.1) and “Allowed
all the time” (P.O.2). The User Actions rows denote whether sensor
access by in-app ads continues after specific user interactions (e.g.,
UI Swipe) for the inter-application data exfiltration scenario.
Intra-Application Data Exfiltration. In this attack we can
capture the input data of the Android app that is displaying the
sensor-capturing advertisement. This can be done through two dif-
ferent techniques, which we describe next, or using a combination
of both. In practice, advertisements are displayed inside a WebView
object, which is responsible for fetching and loading all the ad re-
sources from the web. Each WebView is displayed as part of an
activity layout and is co-located with other View objects. When
the WebView has finished loading the ad’s content, the appropriate
HTML5 APIs are executed and the advertisement can capture touch
input from the co-located View objects. This is extremely important
since many Views in Android apps contain sensitive input. We note
that apart from the WebView object responsible for displaying the
ad, other WebViews may coexist for handling other app function-
ality such as logging in or completing a payment. Therefore, any
part of the application that is attached to the View that contains the
ad is vulnerable for input hijacking. Even though it is considered
good practice to not show ads in Views with sensitive input, in our
analysis we found several cases of apps violating this guideline.
Ad ServerDSPAd Campaign ReportAD EXCHANGELeaked Sensor DataSession 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1068Interestingly, the attack’s coverage significantly increases if the
application is using Google’s interstitial ad placements. Interstitial
ads are interactive advertisements that cover the interface of their
host app. These ads appear between content or activities and allow
for a more natural transition. In order to achieve this effect, intersti-
tial ads preload the advertisement’s content before being displayed
on the screen. Our empirical analysis revealed that Google’s library
for interstitial ad placements allows interstitial ads’ code to execute
from the moment they are preloaded until the user has closed the
advertisement. Since an interstitial ad will be displayed only when
a specific element of the app is pressed (and they can be attached to
any element) the code of the advertisement will continue running
until this specific element is pressed. As such, the user may be
exploring other parts of the app, including Views with sensitive
content, while the interstitial ad is capturing the motion sensor
data. It is important to emphasize that loading the interstitial ad
(i.e., loadAd()) as early as possible to ensure it is available during
the show(), is encouraged by the developer documentation [30].
Furthermore, our experiments with Google’s library for intersti-
tial ad placements revealed that these ads continue to execute code
not only in different Views but also in different Activities within
the same app. To make matters worse, the code will continue execut-
ing even if the application Activity that initiated the preloading
mechanism has been destroyed (e.g., activity.finish()). As such,
interstitial ads not only increase the attack’s robustness, but also
increase the attack’s stealthiness since even more security-cautious
users that do not input sensitive data when ads are being displayed
would be deceived. As we discuss in §6, our measurements reveal
that the use of interstitials is commonplace in popular apps.
Case Study - Play Billing library. Apart from login creden-
tials, an attacker using the techniques described above can also
target apps that offer in-app purchases in order to steal the user’s
billing information. Since in-app purchases are the most common
monetization model, with users spending $380 billion worldwide [99],
apps that integrate them are ideal candidates for this attack. As
such, we tested Google’s Play Billing library version 2, as well as the
latest version 3.0.3 and found that in-app ads can capture motion
sensor data while the user is providing input in any of the available
billing options of the library (e.g., credit card, Paypal and Paysafe).
Inter-Application Data Exfiltration. Android apps are exe-
cuted in a sandbox environment and in different processes to pre-
vent unintended data leakage from one app to another. WebViews,
by default, are attached to the app’s UI thread and are not able to ex-
ecute code in the background if the user switches apps. Nonetheless,
Android offers a mechanism for executing code in the background,
specifically, by attaching a View in the WindowManager. Surpris-
ingly, we found that the same applies for WebViews; if the host app
holds the SYSTEM_ALERT_WINDOW permission for it’s core function-
ality, then an ad-related WebView can be configured to run in the
background and continue accessing motion sensors even if the user
switches apps. The SYSTEM_ALERT_WINDOW permission, according
to the official Android SDK [92], falls into a special category of
permissions that require the user to explicitly grant it when re-
quested (the app opens the Android Settings for this specific app
and informs the user of the permission’s abilities). However, if an ap-
plication is downloaded directly from the official Google Play, then
this permission is granted automatically and without any user inter-
action. Specifically, as mentioned in [44], an app’s developer can
issue a request to the Google Play App Review team so that the SYS-
TEM_ALERT_WINDOW permission is granted automatically. Addition-
ally, as mentioned in [32], if apps have the ROLE_CALL_SCREENING
and request the SYSTEM_ALERT_WINDOW they are also automatically
granted the permission. For instance, the com.truecaller app has
this functionality and if during the initial setup the user sets the
app as the default caller id and spam app, then the permission is
automatically granted. Moreover, during this step the app falsely
informs the user that no permissions are needed.
We argue that such instances of relaxed policies, not only confuse
users and developers alike but can lead to misuses with severe ram-
ifications. Furthermore, even experienced users that can identify
suspicious apps that were automatically granted the permission can
be mislead. This is especially true for popular apps that need this
permission for showing pop up messages and providing additional
functionality on top of other apps. Applications requesting this
permission include Skype, Facebook Messenger and Viber. We note
that Viber, a very popular messaging app that is used by banks for
sending two-factor authentication codes, contains ads and is suscep-
tible to our inter-application data exfiltration attack. Furthermore,
our manual investigation revealed that several apps request this
permission for their core functionality. For example, apps request
this permission for playing videos in the background while the user
is performing other tasks. These apps attach a WebView in the Win-
dowManager and are vulnerable to the inter-application scenario,
since the embedded in-app ads (including video ads) have access to
the motion sensors. To better illustrate the magnitude of this attack
scenario, we note that if one application holds this specific permis-
sion and is displaying ads, all apps installed on the device can be
compromised and are vulnerable to input hijacking. Even banking
apps that use the WindowManager.LayoutParams.FLAG_SECURE
option, a security feature to treat the contents of the window as
"secure" [93], are vulnerable to sensor-based inter-app side channel
attacks. As we describe later on, we found that 9.28% of the apps in
our dataset hold this permission, and 69.95% also display ads.
To make matters worse, we have also identified a security vul-
nerability that further magnifies the attack’s impact. In more detail,
when an app’s WebView is executing content in the background,
the Android operating system will not terminate the code even if
the user “kills” the host application using the traditional UI swipe
method. This issue is further complicated and the deceptiveness
of the attack is enhanced by the fact that the app will no longer
appear in the list of background apps, even though the application
and the WebView still exist and are executing code.
In fact, as can be seen in Table 1, we have only identified two
ways for the user to successfully close the app and terminate any
background executed code. One way is to navigate to the Android
Settings, select the app and then select the force-stop option. An-
other way for stopping all app activities is to perform the UI swipe
for the host app and also lock the device. We tested this abnormal
functionality on Pixel devices running (AOSP) API 29 and API 30
using a mock app with a WebView that accesses mobile sensors
using HTML5 WebAPIs. The Pixel 4 device had Android v11 and
the latest security updates at the time of writing (April 2021).
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1069and slightly modifying them within appropriate and legitimate
bounds. We identify ad hyperlinks inside WebViews by hooking
the appropriate WebView and Chromium APIs. Additionally, we
leverage functionality from prior work [35] for (i) verifying which
of the sensor-specific Android API calls are permission-protected
and (ii) traversing the app’s graph using a breadth-first traversal
for achieving high coverage.
Network Layer. The other major component of our framework
employs a transparent proxy server for intercepting all network
traffic by using mitmproxy [23] and injecting code for intercepting
JavaScript calls. We used the javascript-hooker Node.js mod-
ule [16] which allows us to hook any JavaScript function called
inside a WebView and intercept the method to be called and its
arguments. Using this approach we hook all the functions that
access and retrieve mobile-specific sensor data through the offi-
cial mobile HTML5 WebAPI [40]. We also monitor any calls of the
XMLHttpRequest function, since in-app advertisements can leak
data using this method. The injected JavaScript logs all informa-
tion to the console. To log this information to the Android logcat,
we created an Xposed module and during run-time hooked the
android.webkit.WebChromeClient.onConsoleMessage() func-
tion and performed any necessary instrumentations for redirecting
any console messages to the logcat along with other useful infor-
mation, such as the package name of the app being tested. Using
this technique we can also verify that network flows and JavaScript
accessing motion sensors or other tracking related WebAPIs origi-
nate from the app being tested. Table 7 in Appendix A, provides a
complete list of all the HTML5 WebAPIs monitored by our system.
By combining hooks from low-level sensor-related system calls
as well as JavaScript calls from the network, we can successfully
distinguish sensor access requested by in-app advertisements from
those requested by the app’s functionality. Specifically, if we identify
a sensor system call from the OS without a corresponding sensor
API call at the network layer, then we can deduce that the app itself
requested access to this sensor. On the contrary if we identify both
a sensor call (e.g., for the Accelerometer) at the network layer and
the Android layer then we can successfully deduce that the in-app
advertisement accessed the mobile sensor. It is worth noting that
in cases where both the application and the in-app advertisement
perform the same sensor call, our analysis is not affected. Finally,
to avoid contamination from other apps accessing sensors, we an-
alyzed each app individually and limited other background app
activities using the adb toolkit. We verified that our framework
behaves as expected by executing separately all HTML5 APIs that
access mobile sensors using a mock application.
6 LARGE SCALE MEASUREMENT STUDY
Here we present our findings from our large-scale study on the use
of HTML5 WebAPI calls by embedded in-app ads in the wild.
6.1 Dataset & Experimental Setup
App selection. Our main app dataset consists of free apps down-
loaded from the official Google Play market. First, we selected the
top 100 apps (or as many as were available) from 61 categories.
Next, using two lists of websites that access mobile sensors [25, 34],
we tried to download the corresponding mobile app if it exists in
Figure 2: Overview of our framework’s infrastructure. The
combined components of both layers provide an in-depth
view of requests to access mobile sensors. Components
in the Android layer (left) are responsible for monitoring
system API calls, while components in the Network layer
(right) monitor JavaScript calls and network traffic.
Case Study - Play Store. Even though many popular apps con-
tain sensitive input information, one app that is pre-installed on
every Android device is widely used and contains sensitive input
information. Specifically, we tested the official Play Store app and
found that through the in-app ads of background apps, attackers
can capture the motion sensor values while the user is typing billing
information in the Play Store’s “Payments & Subscriptions” section.
5 SYSTEM DESIGN AND IMPLEMENTATION
Motivated by our preliminary findings, we conduct a large-scale,
end-to-end automated study of in-app advertisements accessing
mobile sensors. We dynamically analyze applications with in-app
advertisements and monitor access to all available mobile sensors
and record any potential leakage of this type of data.
One of the challenges for dynamically analyzing in-app ads is
being able to differentiate sensor accesses issued by embedded
ads from those that originate from the app’s core functionality.
Our framework obtains an in-depth view of sensor data access by
combining logs from two different layers. As can be seen in Figure 2,
for each of these layers (Android and Network) we monitor different
API calls using multiple components. At the Android layer we
monitor system call using modules from the Xposed framework [91],
while at the Network Layer we monitor HTML5 WebAPI calls using
injected JavaScript code. Our testbed consists of three Nexus 5x
devices, running Android 7.1.1 that we configured with the mitm
proxy’s root certificate that allows us to intercept HTTPS traffic.
In Appendix A, we provide additional technical details concerning
our methodology for monitoring in-app advertisements.
Android Layer. This part of our framework monitors apps’ ac-
cess to sensors by intercepting Android system calls using a custom
Xposed module that detects and hooks requests to sensor-specific
Android API calls. Since values from the accelerometer and the gy-
roscope are expected to change when the device is used by an actual
human and because motion sensors have been used by apps to evade
analysis or hide suspicious activity [71], we made our infrastructure
more robust by intercepting the values returned by certain sensors
Network LayerAndroid LayerReaperSensors APIsWebView APIsHTML5 SensorsAPIsXMLHttpRequestTestbedmitmproxy certiﬁcateLogsLogsInjected ScriptsOS HooksSession 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1070Table 2: Number of apps containing in-app ads accessing We-
bAPIs, analyzed across different countries.
WebAPI
#Apps per country
DE
UK