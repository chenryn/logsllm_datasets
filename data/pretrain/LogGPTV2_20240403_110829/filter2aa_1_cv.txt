        "expanded_url": "https://twitter.com/i/web/status/1050118621198921728",
        "display_url": "twitter.com/i/web/status/1...",
        "indices": [
          117,
          140
        ]
      }
    ]
  },
  4 "user": {
    "id": 6253282,
    "id_str": "6253282",
    "name": "Twitter API",
    "screen_name": "TwitterAPI",
    "location": "San Francisco, CA",
    "description": "The Real Twitter API. Tweets about API changes, service issues and our Developer Platform. 
Don't get an answer? It's on my website.",
[...]
1 }
    APIs usually return data in JSON or XML format. JSON is a way to represent data in plaintext, and it’s commonly used to transport data within web messages. You’ll often see JSON messages when you’re testing applications, so it’s helpful to learn how to read them.
    API通常以JSON或XML格式返回数据。JSON是一种以纯文本形式表示数据的方式，常用于在Web消息中传输数据。在测试应用程序时，您经常会看到JSON消息，因此学习如何阅读它们很有帮助。
    JSON objects start and end with a curly bracket
     1
    . Within these curly brackets, the properties of the represented object are stored in key-value pairs. For example, in the preceding data block representing a tweet, the
     created_at
    property has the value
     Wed Oct 10 20:19:24 +0000 2018
    . This indicates that the tweet was created on Wednesday, October 10, 2018 at 8:19 PM
     2
    .
    JSON对象以左右花括号开始和结束。在这些花括号内，表示对象的属性以键值对的形式存储。例如，在上面的推文数据块中，created_at属性的值为Wed Oct 10 20:19:24 +0000 2018。这表示推文创建于2018年10月10日星期三晚上8:19。
    JSON objects can also contain lists or other objects. Curly brackets denote objects. The preceding tweet contains a
     user
    object indicating the user who created the tweet
     4
    . Lists are denoted with square brackets. Twitter returned an empty list of hashtags in the preceding JSON block, which means no hashtags were used in the tweet
     3
    .
    JSON对象还可以包含列表或其他对象。花括号表示对象。上一个推文包含一个用户对象，表示创建推文的用户。 4.列表用方括号表示。Twitter在前面的JSON块中返回了一个空的hashtag列表，这意味着该推文中没有使用hashtag。 3.
    You might be wondering how the API server decides who can access data or execute actions. APIs often require users to authenticate before accessing their services. Typically, users include access tokens in their API requests to prove their identities. Other times, users are required to use special authentication headers or cookies. The server would then use the credentials presented in the request to determine which resources and actions the user should access.
    API服务器是如何决定谁可以访问数据或执行操作的，你可能会感到困惑。API通常要求用户在访问其服务之前进行身份验证。通常，用户在API请求中包含访问令牌以证明其身份。其他情况下，用户需要使用特殊的身份验证头或Cookie。服务器会利用请求中提供的凭据来确定用户应该访问哪些资源和操作。
    REST APIs
    There are multiple kinds of APIs. The Twitter API discussed here is called a
     Representational State Transfer (
     REST
     )
    API. REST is one of the most commonly used API structures. Most of the time, REST APIs return data in either JSON or plaintext format. REST API users send requests to specific resource endpoints to access that resource. In Twitter’s case, you send GET requests to
     https://api.twitter.com/1.1/statuses/show/
    to retrieve tweet information, and GET requests to
     https://api.twitter.com/1.1/users/show/
    to retrieve user information.
    有多种类型的API。在这里讨论的Twitter API被称为Representational State Transfer（REST）API。REST是最常用的API结构之一。大多数情况下，REST API会以JSON或纯文本格式返回数据。REST API用户发送请求到特定的资源端点来访问该资源。在Twitter的情况下，您发送GET请求到https://api.twitter.com/1.1/statuses/show/以检索推文信息，并发送GET请求到https://api.twitter.com/1.1/users/show/以检索用户信息。
    REST APIs usually have defined structures for queries that make it easy for users to predict the specific endpoints to which they should send their requests. For example, to delete a tweet via the Twitter API, users can send a POST request to
     https://api.twitter.com/1.1/statuses/destroy/
    , and to retweet a tweet, users can send a POST request to
     https://api.twitter.com/1.1/statuses/retweet/
    . You can see here that all of Twitter’s API endpoints are structured in the same way (
     https://api.twitter.com/1.1/RESOURCE/ACTION
    ):
    REST API通常具有定义良好的查询结构，使用户可以轻松预测应该将请求发送到哪些特定端点。例如，通过Twitter API删除推文，用户可以发送POST请求至https://api.twitter.com/1.1/statuses/destroy/，而转发推文，则可以发送POST请求至https://api.twitter.com/1.1/statuses/retweet/。可以看到，所有Twitter的API端点都以相同的方式结构化（https://api.twitter.com/1.1/RESOURCE/ACTION）。
https://api.twitter.com/1.1/users/show
https://api.twitter.com/1.1/statuses/show
https://api.twitter.com/1.1/statuses/destroy
https://api.twitter.com/1.1/statuses/retweet
    REST APIs can also use various HTTP methods. For example, GET is usually used to retrieve resources, POST is used to update or create resources, PUT is used to update resources, and DELETE is used to delete them.
    REST API也可以使用不同的HTTP方法。例如，GET通常用于检索资源，POST用于更新或创建资源，PUT用于更新资源，DELETE用于删除它们。
    SOAP APIs
     SOAP
    is an API architecture that is less commonly used in modern applications. But plenty of older apps and IoT apps still use SOAP APIs. SOAP APIs use XML to transport data, and their messages have a header and a body. A simple SOAP request looks like this:
    SOAP是一种API架构，现代应用程序中不常用。但许多老应用程序和物联网应用程序仍然使用SOAP API。SOAP API使用XML来传输数据，它们的消息具有头和正文。一个简单的SOAP请求如下：
DELETE / HTTPS/1.1
Host: example.s3.amazonaws.com
  quotes
   AKIAIOSFODNN7EXAMPLE
  2006-03-01T12:00:00.183Z
  Iuyz3d3P0aTou39dzbqaEXAMPLE=
    This example request is taken from Amazon S3’s SOAP API documentation. It deletes an S3 bucket named
     quotes
    . As you can see, API request parameters are passed to the server as tags within the XML document.
    此请求示例取自Amazon S3的SOAP API文档。它删除名为quotes的S3存储桶。正如您所看到的，API请求参数以XML文档中的标签形式传递到服务器上。
    The SOAP response looks like this:
    SOAP响应如下：
    204
    No Content
    This response indicates that the bucket is successfully deleted and no longer found.
    该响应表示该存储桶已成功删除且不再存在。
    SOAP APIs have a service called
     Web Services Description Language (
     WSDL)
    , used to describe the structure of the API and how to access it. If you can find the WSDL of a SOAP API, you can use it to understand the API before hacking it. You can often find WSDL files by adding
     .wsdl
    or
     ?wsdl
    to the end of an API endpoint or searching for URL endpoints containing the term
     wsdl
    . In the WSDL, you will be able to find a list of API endpoints you can test.
    SOAP APIs有一个叫做Web Services Description Language (WSDL)的服务，用于描述API的结构和如何访问它。如果你能找到一个SOAP API的WSDL，你可以在入侵前使用它来了解API。你可以通过在API端点的末尾添加 .wsdl 或 ?wsdl，或者搜索包含wsdl术语的URL端点来找到WSDL文件。在WSDL中，你将能够找到你可以测试的API端点列表。
    GraphQL APIs
     GraphQL
    is a newer API technology that allows developers to request the precise resource fields they need, and to fetch multiple resources with just a single API call. GraphQL is becoming increasingly common because of these benefits.
    GraphQL是一种较新的API技术，能够让开发人员请求所需精确资源字段，并通过单个API调用获取多个资源。由于这些优势，GraphQL正变得越来越普遍。
    GraphQL APIs use a custom query language and a single endpoint for all the API’s functionality. These endpoints are commonly located at
    /graphql,
     /gql
    , or
     /g
    . GraphQL has two main kinds of operations: queries and mutations.
     Queries
    fetch data, just like the GET requests in REST APIs.
     Mutations
    create, update, and delete data, just like the POST, PUT, and DELETE requests in REST APIs.
    GraphQL API使用自定义查询语言和单个端点来实现所有API的功能。这些端点通常位于/graphql、/gql或/g处。GraphQL有两种主要操作类型：查询和变更。查询获取数据，就像REST API中的GET请求一样。变更创建、更新和删除数据，就像REST API中的POST、PUT和DELETE请求一样。
    As an example, take a look at the following API requests to Shopify’s GraphQL API. Shopify is an e-commerce platform that allows users to interact with their online stores via a GraphQL API. To access Shopify’s GraphQL API, developers need to send POST requests to the endpoint
     https://SHOPNAME.myshopify.com/admin/api/API_VERSION/graphql.json
    with the GraphQL query in the POST request body. To retrieve information about your shop, you can send this request:
    例如，来看一下对Shopify的GraphQL API发送的以下API请求。Shopify是一款电子商务平台，允许用户通过GraphQL API与他们的在线商店进行交互。开发人员需要向终端https://SHOPNAME.myshopify.com/admin/api/API_VERSION/graphql.json发送POST请求，并在POST请求正文中包含GraphQL查询才能访问Shopify的GraphQL API。要检索有关您的商店的信息，您可以发送此请求：
query {
   shop {
     name
     primaryDomain {
       url
       host
     }
   }
 }
    This GraphQL query indicates that we want to retrieve the name and
     primaryDomain
    of the shop, and that we need only the
     primaryDomain
    ’s URL and host properties.
    这个GraphQL查询表示我们想要检索店铺的名称和primaryDomain，并且我们仅需要primaryDomain的URL和host属性。
    Shopify’s server will return the requested information in JSON format:
    Shopify的服务器将以JSON格式返回请求的信息：
{
   "data": {
     "shop": {
       "name": "example",
       "primaryDomain": {
         "url": "https://example.myshopify.com",
         "host": "example.myshopify.com"
       }
     }
   }
}
    Notice that the response doesn’t contain all the object’s fields, but instead the exact fields the user has requested. Depending on your needs, you can request either more or fewer fields of the same data object. Here is an example that requests fewer:
    请注意，响应并不包含所有对象的字段，而是用户请求的确切字段。根据您的需要，您可以请求相同数据对象的更多或更少的字段。这是一个请求更少字段的示例：
query {
   shop {
     name
   }
 }
    You can also request the precise subfields of a resource’s properties and other nested properties. For example, here, you request only the URL of the
     primaryDomain
    of a shop:
    您还可以请求资源属性及其他嵌套属性的精确子域。例如，在此，您只请求店铺的primaryDomain的URL：
query {
   shop {
     primaryDomain {
       url
     }
   }
 }
    These queries are all used to retrieve data.
    这些查询用于检索数据。
    Mutations, used to edit data, can have arguments and return values. Let’s take a look at an example of a mutation taken from
     graphql.org
    . This mutation creates a new customer record and takes three input parameters:
     firstName
    ,
     lastName
    , and
     email
    . It then returns the ID of the newly created customer:
    变异是用于编辑数据的，可以具有参数和返回值。让我们来看一下来自graphql.org的变异示例。这个变异创建一个新的客户记录，并接受三个输入参数：firstName、lastName和email。然后返回新创建的客户的ID。
mutation {
  customerCreate(
    input: {
      firstName: "John",
      lastName: "Tate",
      email: "PI:EMAIL" })
     {
     customer {
       id
     }
   }
}
    GraphQL’s unique syntax might make testing it hard at first, but once you understand it, you can test these APIs the same way that you test other types of APIs. To learn more about GraphQL’s syntax, visit