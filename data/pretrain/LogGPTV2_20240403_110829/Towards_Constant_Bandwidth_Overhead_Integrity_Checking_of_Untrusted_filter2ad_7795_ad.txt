tl-mv-to-lh are obtained at runtime from
(nlh) and
the simulators. The worst-case costs of C
tl-op and C
tl-chk
3In the synchronized cache, the hashes of cached nodes may not be the
same as they would have been if the hash tree had been used. However, the
values of these hashes are not important (cf. the invariant in Section 4.1).
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
bkoff
(nlh) can be calculated; on the tree-log-check and
C
tree-log-bkoff operations, R decreases by an amount that
is guaranteed to be smaller than these worst-case costs.
We show how to calculate these worst-case costs in Ap-
pendix B.
(0) during the current check period. Thus, R(cid:1)
In Figure 8, the ﬁrst test in step 1 is similar to the
test in Section 6.3. However, in this case, the reserve
that the checker uses to regulate the rate at which ad-
dresses are added to the log-hash scheme is R(cid:1)
cp, where
cp is the reserve that the checker has gained after R >
R(cid:1)
=
C
bkoff
R − max(C
cp only begins record-
(0) be-
ing reserve after R has become greater than C
cause otherwise, the checker would not have enough re-
serve to be able to backoff if it needed to. The test also
gives a small reserve buffer per address in the log-scheme,
(nlh), for the tree-log scheme to start outperforming
C
cp-start
(0), R
). R(cid:1)
bkoff
bkoff
cp
buffer
the hash tree.
cp
+ C
+ C
cp
bkoff
tl-chk
> (C
tl-mv-to-lh
(nlh + 1) + C
cp, R > R(cid:1)
The test in step 2 determines whether the checker needs
to backoff. The tree-log and hash tree caches are unsynchro-
nized if the log-hash scheme has been used (since the begin-
ning of the FSM’s execution or since the checker last backed
off). It is only necessary to perform the test if the tree-log
and hash tree caches are unsynchronized. From the expres-
(0). From the ﬁrst test,
sion for R(cid:1)
to successfully move an address to the log-hash scheme,
(nlh +
R(cid:1)
buffer
(nlh + 1) +
1)). Thus, R > (C
(nlh + 1) + C
(0)). From the expression for
C
(nlh), R > (C
(nlh + 1) +
C
+
(nlh +1)+C
C
(nlh + 1) + C
(0)). Thus,
C
R > (C
(nlh +
1)). This means that, whenever an address is success-
(nlh) +
fully moved to the log-hash scheme, R > (C
(nlh)), (recall that nlh is incremented when an ad-
C
dress is successfully moved to the log-hash scheme).
If
the log-hash scheme has been used, the second test uses
∆R
tl-op, obtained from the simulators, to determine if per-
forming the store operation would result in its reserve drop-
tl-chk
(0)+Csync) > (C
(nlh + 1) + C
tl-mv-to-lh
bkoff
tl-mv-to-lh
buffer
bkoff
buffer
bkoff
tl-chk
buffer
+ C
(nlh + 1) + C
tl-mv-to-lh
tl-mv-to-lh
buffer
buffer
tl-chk
tl-chk
bkoff
bkoff
+ C
+ C
d
a
e
h
r
e
v
O
h
t
i
d
w
d
n
a
B
25
20
)
n
o
i
t
a
r
e
p
o
r
e
p
s
e
t
y
b
(
15
10
5
0
d
a
e
h
r
e
v
O
h
t
Tree-Log
Hash Tree
i
d
w
d
n
a
B
102
100
108
Check Period (FSM operations)
104
106
)
n
o
i
t
a
r
e
p
o
r
e
p
s
e
t
y
b
(
30
25
20
15
10
5
0
Tree-Log
Hash Tree
102
108
100
Check Period (FSM operations)
106
104
d
a
e
h
r
e
v
O
h
t
d
w
d
n
a
B
i
)
n
o
i
t
a
r
e
p
o
r
e
p
s
e
t
y
b
(
100
90
80
70
60
50
40
30
20
10
0
Tree-Log
Hash Tree
Log-Hash
b1
b2
b3
b4
(a) b1, cache size = 16 blocks
(b) b1, cache size = 12 blocks
(c)
Figure 9. Experimental Results
(nlh). If it does, the checker backs off,
ping below C
then performs the operation. Otherwise, it just performs the
operation in its current state.
bkoff
With regards to the theoretical claims on the tree-log al-
gorithm in Section 6.3, the ﬁrst two features on being adap-
tive and providing a parameterizable worst case bound re-
main the same. (With the second feature, it is implicit that
if, for a particular FSM, the hash tree performs well, then
the tree-log scheme will also perform well, because the tree-
log bandwidth overhead will be, at most, the parameteriz-
able worst case bound more than the hash tree bandwidth
overhead.) With regards to the third feature, with a cache,
the adaptive tree-log checker will not improve over the hash
tree for some FSMs. FSMs whose runtime performance im-
proves when the log-hash scheme is used experience the
asymptotic behavior. From the expression for calculating
reserve (and from our experiences with experiments), we
see that the general trend is that the greater the hash tree
bandwidth overhead, the less likely it is for the checker to
backoff and the greater the tree-log scheme’s improvement
will be when it improves the checker’s performance. Thus,
if the hash tree is expensive for a particular FSM, the adap-
tive tree-log scheme will, when it has built up sufﬁcient re-
serve, automatically start using the log-hash scheme to try
to reduce the integrity checking bandwidth overhead.
(4 ∗ 9 ∗ 64 ∗ nlh) bytes.) Figure 9(a) shows the bandwidth
overhead for different check periods for a particular bench-
mark, b1. The cache size was 16 blocks. The tree-log
scheme has exactly the same bandwidth overhead as the
hash tree for check periods of 103 FSM store/load opera-
tions and less. Around check periods of 104 operations,
there is a slight degradation (tree-log: 21.4 bytes per opera-
tion, hash tree: 21.0 bytes per operation), though not worse
than the 10% bound. Thereafter, the bandwidth overhead
of the tree-log scheme becomes signiﬁcantly smaller. By
check periods of 107 operations, the tree-log scheme con-
sumes 1.6 bytes per operation, a 92.4% reduction in the
bandwidth overhead compared to that of the hash tree. (We
do not show the results for the log-hash scheme for this ex-
periment because its bandwidth overhead is prohibitively
large when check periods are small.)
In Figure 9(b), the
cache size is reduced to 12 blocks, making the hash tree
more expensive. The ﬁgure shows a greater tree-log scheme
improvement over the hash tree bandwidth overhead when
the tree-log scheme improves on the hash tree. Figure 9(c)
shows the results for different benchmarks of an access pat-
tern that checked after a check period of 106 operations,
then after each of ﬁve check periods of 103 operations. The
experiment demonstrates a simple access pattern for which
the tree-log scheme outperforms both the hash tree and log-
hash schemes.