 **Do you want to request a _feature_ or report a _bug_?**  
bug
**What is the current behavior?**  
Sometimes, Webpack generates code that contains Promises that are not
rejectable. If an error is thrown in those Promise's body, the Promise is not
rejected and thus the error bubbles up to the console, uncatched.
**If the current behavior is a bug, please provide the steps to reproduce.**  
Let's lazy-load some module based on the value of an input field (a real world
use-case would be a SPA that loads modules based on the current route)...
    let input = document.createElement('input');
    document.body.appendChild(input);
    input.addEventListener('change', function(){
        let path;
        path = input.value;
        import(`${path}`)
            .then(module => document.body.innerText = module.default)
            .catch(reason => {console.log(reason); /* go to 404 maybe... */})
    })
if the value of the input field is not a valid module path, it throws.  
It would be nice and clean to let developer decide whether or not to catch
that exception.  
If the developer doesn't catch it, it will naturally bubble up to the console.
That's the expected behaviour of promises, anyway.
**What is the expected behavior?**  
If a Promise is rejected it should be catchable.
**If this is a feature request, what is motivation or use case for changing
the behavior?**  
When working with Promises the developer should be in control about whether or
not to catch the possible exception.
**Please mention other relevant information such as the browser version,
Node.js version, webpack version and Operating System.**
Node: 6.11.3  
Webpack 3.5.6  
OS: Windows 10