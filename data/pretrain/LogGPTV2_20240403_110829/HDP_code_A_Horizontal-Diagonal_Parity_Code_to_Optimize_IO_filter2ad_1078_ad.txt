### 1.5 (14)
In our HDP Code, we obtain \( R_p = 1.43 \) when \( p = 7 \).

Unlike the generic erasure coding technologies mentioned above, EVENODD [3] is a specialized erasure coding technique designed specifically for RAID-6. It consists of two types of parity: the P parity, which is similar to the horizontal parity in RAID-4, and the Q parity, which is generated from the elements on the diagonals. Another specialized erasure coding technology for RAID-6 is RDP [8]. The P parity in RDP is identical to that in EVENODD. However, RDP employs a different method to construct the Q parity, thereby improving both construction and reconstruction computational complexity.

A specific class of erasure coding technologies known as lowest-density codes has been identified by Blaum et al. [4]. They point out that in a typical horizontal code for RAID-6, if the P parity is fixed as horizontal parity, then with an \( i \)-row-\( j \)-column matrix of data elements, at least \( (i \times j + j - 1) \) data elements must participate in generating the Q parities to achieve the lowest density. Examples of lowest-density codes include Blaum-Roth, Liberation, and Liber8tion codes. Compared to other horizontal codes for RAID-6, these codes offer the advantage of near-optimal single write complexity. However, most horizontal codes, such as RDP, exhibit unbalanced I/O distribution, particularly high workload on parity disks, as illustrated in Figure 1.

### 2) Vertical MDS Codes
X-Code, Cyclic code, and P-Code are examples of vertical codes, characterized by their parities not being confined to dedicated redundant disk drives but distributed across all disks. This layout enhances encoding/decoding computational complexity and improves single write complexity.

- **X-Code [42]**: Utilizes diagonal and anti-diagonal parity. The number of columns (or disks) in X-Code must be a prime number.
- **Cyclic Code [6]**: Offers a scheme to support various column number settings in vertical MDS RAID-6 codes. The column number in Cyclic Code is typically \( (p-1) \) or \( 2 \times (p-1) \).
- **P-Code [23]**: A simple construction rule where columns are labeled with integers from 1 to \( (p-1) \). Parity elements are placed in the first row, and data elements are in the remaining rows. Each data element contributes to the generation of two parity elements, with the sum of the column numbers of the two parity elements modulo \( p \) equal to the data element’s column number.

From the constructions of these vertical codes, it is observed that P-Code may suffer from unbalanced I/O due to uneven parity distribution, as shown in Figure 2. Although other vertical codes like X-Code maintain load balancing well, they also incur higher I/O costs for recovering a single disk failure compared to horizontal codes, as depicted in Figure 4.

We summarize our HDP code and other popular codes in Table VII.

### B. Load Balancing in Disk Arrays
Load balancing is a critical issue in parallel and distributed systems [43], and numerous approaches have been developed to achieve it in disk arrays. In the early 1990s, Holland et al. [19] investigated parity declustering as an effective method for maintaining load balance in RAID-5, while Weikum et al. [37] found that dynamic file allocation can help achieve load balancing. Ganger et al. [12] compared disk striping with conventional data allocation in disk arrays and concluded that disk striping provides better load balance with reduced complexity for various applications. Scheuermann et al. [31] [32] proposed a data partitioning method to optimize disk striping, achieving load balance through proper file allocation and dynamic redistribution of data access. After 2000, several industry patents addressed the load balancing problem in disk arrays [22] [1] [18] [2]. Recently, with the advent of virtualization in computer systems, some approaches have focused on dynamic load balancing in virtual storage devices and virtual disk arrays [34] [14] [15].

### VII. Conclusions
In this paper, we introduce the Horizontal-Diagonal Parity Code (HDP Code) to optimize I/O load balancing for RAID-6 by leveraging both horizontal and diagonal/anti-diagonal parities in MDS codes. HDP Code is designed for an array of \( p-1 \) disks, where \( p \) is a prime number. The parities in HDP Code include horizontal-diagonal and anti-diagonal parities, distributed among all disks in the array to achieve balanced I/O. Our mathematical analysis demonstrates that HDP Code achieves superior load balancing and high reliability compared to other MDS codes.

### Acknowledgments
We thank the anonymous reviewers for their insightful comments. This research is supported by the U.S. National Science Foundation (NSF) Grants CCF-1102605, CCF-1102624, and CNS-1102629, the National Basic Research 973 Program of China under Grant No. 2011CB302303, the National Natural Science Foundation of China under Grant No. 60933002, the National 863 Program of China under Grant No. 2009AA01A402, and the Innovative Foundation of Wuhan National Laboratory for Optoelectronics. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the funding agencies.

### References
[1] E. Bachmat and Y. Ofek. Load balancing method for exchanging data in different physical disk storage devices in a disk array storage device independently of data processing system operation. US Patent No. 6237063B1, May 2001.
[2] E. Bachmat, Y. Ofek, A. Zakai, M. Schreiber, V. Dubrovsky, T. Lam, and R. Michel. Load balancing on disk array storage device. US Patent No. 6711649B1, March 2004.
[3] M. Blaum, J. Brady, J. Bruck, and J. Menon. EVENODD: An efficient scheme for tolerating double disk failures in RAID architectures. IEEE Transactions on Computers, 44(2):192–202, February 1995.
[4] M. Blaum and R. Roth. On lowest density MDS codes. IEEE Transactions on Information Theory, 45(1):46–59, January 1999.
...
[43] A. Zomaya and Y. Teh. Observations on using genetic algorithms for dynamic load-balancing. IEEE Transactions on Parallel and Distributed Systems, 12(9):899–911, September 2001.