Extreme Privilege Escalation On Windows 8/UEFI Systems
Corey Kallenberg
Xeno Kovah
John Butterworth
Sam Cornwell
PI:EMAIL, PI:EMAIL
PI:EMAIL, PI:EMAIL
The MITRE Corporation
Approved for Public Release
Distribution Unlimited. Case Number 14-2221
Abstract
The UEFI speciﬁcation has more tightly coupled the bonds of the operating system and the platform
ﬁrmware by providing the well-deﬁned “Runtime Service” interface between the operating system and
the ﬁrmware. This interface is more expansive than the interface that existed in the days of conventional
BIOS, which has inadvertently increased the attack surface against the platform ﬁrmware. Furthermore,
Windows 8 has introduced an API that allows accessing this UEFI interface from a privileged userland
process. Vulnerabilities in this interface can potentially allow a privileged userland process to escalate its
privileges from ring 3 all the way up to that of the platform ﬁrmware, which attains permanent control
of the very-powerful System Management Mode. This paper discusses two such vulnerabilities that the
authors discovered in the UEFI open source reference implementation and the techniques that were used
to exploit them.
1
Contents
1
Introduction
3
2
Runtime Services
3
2.1
Variable Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4
2.2
Capsule Update . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4
2.2.1
Capsule Update Initiation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4
2.2.2
PEI Phase Capsule Coalescing
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5
2.2.3
DXE Phase Capsule Processing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5
3
Capsule Update Vulnerabilities
6
3.1
Coalescing Vulnerability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7
3.2
Envelope Vulnerability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9
4
Capsule Update Exploitation
10
4.1
Coalescing Exploitation
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
10
4.1.1
Coalescing Exploitation Diﬃculties . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11
4.1.2
Descriptor Overwrite Approach . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
12
4.1.3
Optimization Tricks
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
12
4.1.4
Coalesce Exploitation Success . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
13
4.2
Envelope Exploitation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
14
4.3
Exploitation From Windows 8 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
16
5
Leveraging The Attack
18
6
User Experience
19
7
A↵ected Systems
19
7.1
OEM Firmware Instrumentation
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
19
7.2
HP EliteBook 2540p F23 Case Study . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
20
7.3
General Observations Regarding A↵ected Systems
. . . . . . . . . . . . . . . . . . . . . . . .
21
8
Vendor Response
22
9
Recommendations
22
10 Related Work
22
11 Conclusion
22
12 Acknowledgments
23
2
1
Introduction
UEFI is rapidly replacing conventional BIOS on modern computers. A driving factor behind this migration
is Microsoft’s addition of UEFI ﬁrmware to the recommended hardware for Windows 81. An important
reason for Microsoft’s push for UEFI adoption is the additional security features that UEFI provides. UEFI
Secure Boot is one of these features which protects against bootkit style attacks that can compromise the
integrity of the NT kernel at load time. Starting with Windows Vista, 64 bit editions of Windows have also
enforced the requirement that kernel drivers be signed with an authenticode certiﬁcate. Thus the signed
driver requirement coupled with Secure Boot enforces of the integrity of the ring 0 code in the Windows 8
x64 environment.
In the post exploitation phase, it may be desirable for an attacker to inject a rootkit into ring 0 in order to
have powerful inﬂuence over the system. Due to Secure Boot and the signed driver requirement, the attacker
would now require a ring 3 to ring 0 privilege escalation exploit that attacks a vulnerability in the NT kernel
or a 3rd party driver. This particular attack model has already been discussed at length[12][13][14]. This
paper instead seeks to explore a di↵erent method of post exploitation privilege escalation that allows the
attacker permanent residence in an even more extreme environment... System Management Mode (SMM).
userspace
kernel
VMM
SMM
SPI flash
ring 3
ring 0
“ring  -1”
“ring  -2”
“ring  -2.5”
userspace
kernel
VMM
SMM
SPI flash
Extreme Post-Exploitation
Privilege Escalation
Plain Jane Post-Exploitation
Privilege Escalation
Figure 1: Plain Jane Post-Exploitation Privilege Escalation vs. Extreme Post-Exploitation Privilege Escalation
The attack surface explored in this paper is the UEFI Runtime Services interface. A successful attack
against this interface may allow an attacker to permanently alter the UEFI ﬁrmware.
From the UEFI
ﬁrmware, the attacker is allowed to control the early bootup process of the system, including the conﬁguration
and initialization of the SMM code. This paper highlights the UEFI Runtime Services as a new and viable
attack surface by describing and exploiting two UEFI vulnerabilities discovered by the authors.
2
Runtime Services
UEFI provides a set of functions that are accessible to both the early boot environment and to the operating
system[18]. These functions are known as the “Runtime Services.” The Runtime Services provide function-
ality to reset the system, modify ﬁrmware environment variables, initiate a ﬁrmware update, as well as other
tasks. Typically these services are meant to be used by the operating system kernel. However, Windows 8
has introduced an API that exposes a subset of the Runtime Services to administrator userland processes.
1http://windows.microsoft.com/en-us/windows-8/system-requirements
3
2.1
Variable Interface
The Runtime Services provide functions for accessing “EFI Variables.” EFI variables are similar to op-
erating system environment variables.
Typically EFI variables are consumed by the platform ﬁrmware
during the boot up of the system.
Alternatively, some EFI variables may be created by the ﬁrmware
to communicate information to the operating system. For instance, the platform language and the boot
media order are stored as EFI variables.
The Runtime Services provide functions for reading, writing,
creating and enumerating EFI variables.
Furthermore, Windows 8 introduced the SetFirmwareEnviron-
mentVariable and GetFirmwareEnvironmentVariable functions for programmatically interacting with EFI
variables from userland[11]. These functions are callable from an administrator userland process with the
SE SYSTEM ENVIRONMNENT NAME access token.
The important observation is the EFI variable interface is a conduit by which a less privileged domain
(ring 3) can insert data for a more privileged domain (the platform ﬁrmware) to consume. Furthermore, many
of these variables serve undocumented purposes and have complex contents. Historically this is the type of
interface where memory corruption vulnerabilities have been discovered. Alert readers may draw comparisons
to Unix environment variable parsing vulnerabilities2. In fact, vulnerabilities have already been discovered
in some of these EFI variables that allowed bypassing Secure Boot or bricking the victim computer[16][4].
However, the aforementioned vulnerabilities were design ﬂaws resulting from security critical conﬁguration
data being stored in an unprotected3 EFI variable. This paper speciﬁcally considers memory corruption
vulnerabilities that were found in the Intel UEFI reference implementation’s[9] parsing of a standard EFI
variable, “CapsuleUpdateData.”
2.2
Capsule Update
The platform ﬁrmware is stored on a SPI ﬂash chip that is soldered onto the motherboard. Because the
ﬁrmware is a security critical component, Intel provides a number of chipset[5] ﬂash protection mechanisms
that can protect the contents of the ﬂash chip from even ring 0 code. It is also necessary to implement a
means to securely update the platform ﬁrmware in the event that bugs need to be patched, or new features
added. Historically, the ﬁrmware update process was non standardized and OEM speciﬁc. UEFI attempts to
standardize the ﬁrmware update process by deﬁning “capsule update” functionality as part of the Runtime
Services.
The capsule update Runtime Service seeds a ﬁrmware update capsule into RAM and then performs a
soft reset of the system. During a warm reset of the system, the contents of RAM will remain intact, thus
allowing the capsule contents to survive for consumption by the ﬁrmware. The ﬂash chip is also unlocked
as part of the reset. Early in the boot up of the system, the ﬁrmware will check for the existence of a
ﬁrmware update capsule. If one exists, the ﬁrmware will verify the update contents are signed by the OEM,
and if so, write the new ﬁrmware update to the still unlocked ﬂash. If the update contents can not be
cryptographically veriﬁed, or if no update is pending, the ﬁrmware locks the ﬂash protection registers on
the chipset to prevent further write access to the ﬁrmware. For further information on these ﬂash protection
mechanisms, the reader is referred to another paper[15][16].
Because an open source UEFI reference implementation is provided by Intel[8], the exact details of the
UEFI capsule update implementation can be examined at the source code level. The implementation speciﬁcs
are now described in detail.
2.2.1
Capsule Update Initiation
The capsule update process is initiated by calling the UpdateCapsule Runtime Service function.
2This class of vulnerability allowed an unprivileged user to escalate their privileges to root by seeding an environment variable
with an exploit payload, and then calling a suid root program that unsafely parsed the relevant environment variable
3Non Authenticated, Runtime Accessible.
4
typedef
EFI_STATUS
UpdateCapsule (
IN EFI_CAPSULE_HEADER
**CapsuleHeaderArray,
IN UINTN
CapsuleCount,
IN EFI_PHYSICAL_ADDRESS ScatterGatherList OPTIONAL
);
Listing 1: UpdateCapsule deﬁnition.
The ScatterGatherList in Listing 1 is an array of EFI CAPSULE BLOCK DESCRIPTOR entries. Each
descriptor entry is a pair consisting of a capsule fragment data pointer, and a capsule fragment size.
typedef struct (
UINT64 Length;
union {
EFI_PHYSICAL_ADDRESS DataBlock;
EFI_PHYSICAL_ADDRESS ContinuationPointer;
}Union;
) EFI_CAPSULE_BLOCK_DESCRIPTOR;
Listing 2: EFI CAPSULE BLOCK DESCRIPTOR deﬁnition.
It is the responsibility of the calling operating system to decide how to fragment the contiguous update
capsule so that it ﬁts within the resource constraints of the system. Note that each individual fragment
of the update capsule is unsigned. The location of the ScatterGatherList is stored in an EFI Non-Volatile
variable named “CapsuleUpdateData” so that it can be passed onto the ﬁrmware during reboot. At this
point, a warm reset is performed.
2.2.2
PEI Phase Capsule Coalescing
The UEFI boot process is divided into several phases. The Pre-EFI Initialization (PEI) phase occurs early in
the boot up process and is responsible for, among other things, initializing the CPUs and main memory[7].
PEI is where the processing of the incoming capsule update image begins. Initially, an attempt is made to
determine whether or not a ﬁrmware update is pending. If the platform is booting under a warm reset and
the CapsuleUpdateData variable exists, the boot mode is changed to BOOT ON FLASH UPDATE. At this
point the contents of the CapsuleUpdateData variable is interpretted as a physical address pointing to the
aforementioned ScatterGatherList.
Before processing can continue, the capsule update must be coalesced into its original form. The results
of this process are described visually in Figure 2. After the update has been coalesced, further processing is
deferred to the DXE phase.
2.2.3
DXE Phase Capsule Processing
The Driver Execution Environment Phase (DXE) is responsible for the majority of system initialization[6].
DXE is responsible for continuing to process the capsule image that was coalesced during PEI. The contents
of the capsule image are encapsulated in a series of envelopes that provide contextual information about the
contents of the update. For a visual depiction see Figure 3.
5
00000000
FFFFFFFF
MemBase 
MemBase + MemSize
3C1BF000
100000
Coalesced 
Capsule
UEFI PEI Code
PEI Stack
Capsule Data Block 0
Capsule Data Block 1
Capsule Data Block 1
Capsule Data Block N-1
...
Capsule Data Block 0
Capsule Data Block N-1
3F000000
3E000000
3D000000
DescriptorArray (BlockList)
DescriptorArray[0]
Length=0x20000
DataBlock=3F000000
DescriptorArray[1]
Length=0x20000
DataBlock=3D000000
...
DescriptorArray[N-1]
Length=0x100
DataBlock=3E000000
3E700000
“CapsuleUpdateData”  = 3E700000
Figure 2: Capsule Image Coalesced During PEI Phase
typedef struct {
EFI_GUID
CapsuleGuid;
UINT32
HeaderSize;
UINT32
Flags;
UINT32
CapsuleImageSize;
} EFI_CAPSULE_HEADER;
typedef struct {
UINT8
ZeroVector[16];
EFI_GUID
FileSystemGuid;
UINT64
FvLength;
UINT32
Signature;
EFI_FVB_ATTRIBUTES
Attributes;
UINT16