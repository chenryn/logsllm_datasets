### Extreme Privilege Escalation on Windows 8/UEFI Systems

**Authors:**
- Corey Kallenberg
- Xeno Kovah
- John Butterworth
- Sam Cornwell

**Contact Information:**
- PI:EMAIL, PI:EMAIL
- PI:EMAIL, PI:EMAIL

**The MITRE Corporation**

**Approved for Public Release; Distribution Unlimited. Case Number 14-2221**

---

### Abstract

The UEFI specification has more tightly integrated the operating system and platform firmware by providing a well-defined "Runtime Service" interface between them. This interface is more extensive than the one that existed in the days of conventional BIOS, inadvertently increasing the attack surface against the platform firmware. Additionally, Windows 8 introduced an API that allows privileged userland processes to access this UEFI interface. Vulnerabilities in this interface can potentially allow a privileged userland process to escalate its privileges from ring 3 all the way up to the level of the platform firmware, thereby gaining permanent control over the powerful System Management Mode (SMM). This paper discusses two such vulnerabilities discovered in the UEFI open source reference implementation and the techniques used to exploit them.

---

### Contents

1. Introduction
2. Runtime Services
   2.1 Variable Interface
   2.2 Capsule Update
      2.2.1 Capsule Update Initiation
      22.2.2 PEI Phase Capsule Coalescing
      2.2.3 DXE Phase Capsule Processing
3. Capsule Update Vulnerabilities
   3.1 Coalescing Vulnerability
   3.2 Envelope Vulnerability
4. Capsule Update Exploitation
   4.1 Coalescing Exploitation
      4.1.1 Coalescing Exploitation Difficulties
      4.1.2 Descriptor Overwrite Approach
      4.1.3 Optimization Tricks
      4.1.4 Coalesce Exploitation Success
   4.2 Envelope Exploitation
   4.3 Exploitation From Windows 8
5. Leveraging The Attack
6. User Experience
7. Affected Systems
   7.1 OEM Firmware Instrumentation
   7.2 HP EliteBook 2540p F23 Case Study
   7.3 General Observations Regarding Affected Systems
8. Vendor Response
9. Recommendations
10. Related Work
11. Conclusion
12. Acknowledgments

---

### 1. Introduction

Unified Extensible Firmware Interface (UEFI) is rapidly replacing conventional BIOS on modern computers. A key driver behind this transition is Microsoft's inclusion of UEFI firmware as a recommended hardware feature for Windows 8. One of the primary reasons for Microsoft's push towards UEFI adoption is the enhanced security features it provides. UEFI Secure Boot, for instance, protects against bootkit-style attacks that can compromise the integrity of the NT kernel at load time. Starting with Windows Vista, 64-bit editions of Windows have also enforced the requirement that kernel drivers be signed with an Authenticode certificate. Thus, the combination of Secure Boot and the signed driver requirement ensures the integrity of ring 0 code in the Windows 8 x64 environment.

In the post-exploitation phase, an attacker may seek to inject a rootkit into ring 0 to gain significant control over the system. Due to Secure Boot and the signed driver requirement, an attacker would need a ring 3 to ring 0 privilege escalation exploit targeting a vulnerability in the NT kernel or a third-party driver. This attack model has been extensively discussed in previous research [12][13][14]. This paper, however, explores a different method of post-exploitation privilege escalation that allows the attacker to gain permanent residence in an even more extreme environmentâ€”System Management Mode (SMM).

**Figure 1: Plain Jane Post-Exploitation Privilege Escalation vs. Extreme Post-Exploitation Privilege Escalation**

The attack surface explored in this paper is the UEFI Runtime Services interface. A successful attack on this interface could allow an attacker to permanently alter the UEFI firmware. From the UEFI firmware, the attacker can control the early bootup process of the system, including the configuration and initialization of SMM code. This paper highlights the UEFI Runtime Services as a new and viable attack surface by describing and exploiting two UEFI vulnerabilities discovered by the authors.

---

### 2. Runtime Services

UEFI provides a set of functions accessible to both the early boot environment and the operating system [18]. These functions are known as "Runtime Services." They provide functionality to reset the system, modify firmware environment variables, initiate firmware updates, and perform other tasks. Typically, these services are intended for use by the operating system kernel. However, Windows 8 introduced an API that exposes a subset of the Runtime Services to administrator userland processes.

#### 2.1 Variable Interface

The Runtime Services provide functions for accessing "EFI Variables," which are similar to operating system environment variables. EFI variables are typically consumed by the platform firmware during the boot-up process. Some EFI variables are created by the firmware to communicate information to the operating system, such as the platform language and boot media order.

The Runtime Services provide functions for reading, writing, creating, and enumerating EFI variables. Windows 8 introduced the `SetFirmwareEnvironmentVariable` and `GetFirmwareEnvironmentVariable` functions, allowing userland processes with the `SE_SYSTEM_ENVIRONMENT_NAME` access token to interact with EFI variables programmatically.

The critical observation is that the EFI variable interface is a conduit through which a less privileged domain (ring 3) can insert data for a more privileged domain (the platform firmware) to consume. Many of these variables serve undocumented purposes and have complex contents, making them a potential source of memory corruption vulnerabilities. Historically, such interfaces have been prone to vulnerabilities, similar to Unix environment variable parsing issues [2]. In fact, vulnerabilities have already been discovered in some EFI variables, allowing bypassing of Secure Boot or bricking the victim computer [16][4]. However, these were design flaws resulting from security-critical configuration data being stored in an unprotected EFI variable. This paper specifically considers memory corruption vulnerabilities found in the Intel UEFI reference implementation's [9] parsing of the standard EFI variable "CapsuleUpdateData."

#### 2.2 Capsule Update

The platform firmware is stored on a SPI flash chip soldered onto the motherboard. Because the firmware is a security-critical component, Intel provides several chipset flash protection mechanisms [5] to protect the contents of the flash chip from even ring 0 code. It is also necessary to implement a means to securely update the platform firmware to patch bugs or add new features. Historically, the firmware update process was non-standardized and OEM-specific. UEFI attempts to standardize the firmware update process by defining "capsule update" functionality as part of the Runtime Services.

The capsule update Runtime Service seeds a firmware update capsule into RAM and then performs a soft reset of the system. During a warm reset, the contents of RAM remain intact, allowing the capsule contents to survive for consumption by the firmware. The flash chip is also unlocked as part of the reset. Early in the boot-up process, the firmware checks for the existence of a firmware update capsule. If one exists, the firmware verifies that the update contents are signed by the OEM. If verified, the new firmware update is written to the still-unlocked flash. If the update cannot be cryptographically verified, or if no update is pending, the firmware locks the flash protection registers on the chipset to prevent further write access to the firmware. For more information on these flash protection mechanisms, see [15][16].

Because Intel provides an open-source UEFI reference implementation [8], the exact details of the UEFI capsule update implementation can be examined at the source code level. The implementation specifics are now described in detail.

##### 2.2.1 Capsule Update Initiation

The capsule update process is initiated by calling the `UpdateCapsule` Runtime Service function.

```c
typedef EFI_STATUS
UpdateCapsule (
    IN EFI_CAPSULE_HEADER **CapsuleHeaderArray,
    IN UINTN CapsuleCount,
    IN EFI_PHYSICAL_ADDRESS ScatterGatherList OPTIONAL
);
```

The `ScatterGatherList` in the above definition is an array of `EFI_CAPSULE_BLOCK_DESCRIPTOR` entries. Each descriptor entry is a pair consisting of a capsule fragment data pointer and a capsule fragment size.

```c
typedef struct {
    UINT64 Length;
    union {
        EFI_PHYSICAL_ADDRESS DataBlock;
        EFI_PHYSICAL_ADDRESS ContinuationPointer;
    } Union;
} EFI_CAPSULE_BLOCK_DESCRIPTOR;
```

It is the responsibility of the calling operating system to decide how to fragment the contiguous update capsule so that it fits within the resource constraints of the system. Note that each individual fragment of the update capsule is unsigned. The location of the `ScatterGatherList` is stored in an EFI Non-Volatile variable named "CapsuleUpdateData" so that it can be passed to the firmware during reboot. At this point, a warm reset is performed.

##### 2.2.2 PEI Phase Capsule Coalescing

The UEFI boot process is divided into several phases. The Pre-EFI Initialization (PEI) phase occurs early in the boot-up process and is responsible for initializing the CPUs and main memory [7]. PEI is where the processing of the incoming capsule update image begins. Initially, an attempt is made to determine whether a firmware update is pending. If the platform is booting under a warm reset and the `CapsuleUpdateData` variable exists, the boot mode is changed to `BOOT_ON_FLASH_UPDATE`. At this point, the contents of the `CapsuleUpdateData` variable are interpreted as a physical address pointing to the aforementioned `ScatterGatherList`.

Before processing can continue, the capsule update must be coalesced into its original form. The results of this process are depicted in Figure 2. After the update has been coalesced, further processing is deferred to the DXE phase.

##### 2.2.3 DXE Phase Capsule Processing

The Driver Execution Environment Phase (DXE) is responsible for the majority of system initialization [6]. DXE continues to process the capsule image that was coalesced during PEI. The contents of the capsule image are encapsulated in a series of envelopes that provide contextual information about the update. For a visual depiction, see Figure 3.

**Figure 2: Capsule Image Coalesced During PEI Phase**

```c
typedef struct {
    EFI_GUID CapsuleGuid;
    UINT32 HeaderSize;
    UINT32 Flags;
    UINT32 CapsuleImageSize;
} EFI_CAPSULE_HEADER;

typedef struct {
    UINT8 ZeroVector[16];
    EFI_GUID FileSystemGuid;
    UINT64 FvLength;
    UINT32 Signature;
    EFI_FVB_ATTRIBUTES Attributes;
    UINT16 Reserved;
} EFI_FIRMWARE_VOLUME_HEADER;
```

--- 

This optimized version of the text aims to improve clarity, coherence, and professionalism. The structure and content have been refined to ensure a smoother and more logical flow of information.