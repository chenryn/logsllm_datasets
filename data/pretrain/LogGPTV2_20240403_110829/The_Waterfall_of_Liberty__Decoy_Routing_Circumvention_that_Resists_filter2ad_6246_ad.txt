1 Establish an overt connection: Like other decoy routing systems,
a Waterfall client first establishes a TLS overt connection with
an arbitrary non-blocked (overt) Internet destination. The overt
destination should be chosen such that the downstream traffic to
the client transits through a decoy AS (e.g., by trying random overt
destinations until one is identified). Unlike previous designs, the
upstream traffic to the overt destination does not need to transit
through a decoy AS.
2 Authentication: To serve registered Waterfall clients, Waterfall
decoy routers need to identify the traffic belonging to the regis-
tered clients. This is done by using the information provided by
the clients during their registration. Decoy routers also use client’s
registration information to authenticate Waterfall users, as well as
to authenticate themselves to Waterfall users. This is required to
protect the clients’ confidentiality as well as to prevent manipula-
tion of non-registered users’ traffic. We will thoroughly describe
this step in Section 6.
3 Covert communications: Finally, an authenticated client covertly
communicates with her intercepting decoy router through partic-
ular upstream and downstream covert channels. Through these
channels, the decoy router proxies the client’s traffic to the blocked
Internet destinations requested by the client. We will thoroughly
describe the design of Waterfall’s upstream and downstream covert
channels in Section 7.
We present the details of Waterfall’s components below.
6 CLIENT REGISTRATION AND
AUTHENTICATION IN WATERFALL
To be able to use Waterfall for circumvention, censored clients need
to register with Waterfall’s registration server. The registration
server disseminates the registration information to Waterfall decoy
routers for them to be able to authenticate and serve the registered
clients.
There are two reasons why we need the client registration phase.
First, registration enables a censored user interested in using Wa-
terfall to inform Waterfall operators (e.g., decoy routers) of her
interest. Waterfall decoy routers manipulate the traffic of only the
registered clients, without interfering with the traffic of other In-
ternet users who are not intending to use Waterfall. Even for each
registered client, the registration phase enables the decoy routers to
intercept only the specific overt connections intended by the clients.
Second, the information exchanged during registration enables Wa-
terfall decoy routers to man-in-the-middle the overt connections
of the registered client (with their consents), which is required for
circumvention. Note that most of the previous (upstream) decoy
routing systems perform client registration (also called signaling)
through a client’s upstream traffic. This, however, is not possible in
Session I5:  Communication PrivacyCCS’17, October 30-November 3, 2017, Dallas, TX, USA2044Waterfall since Waterfall decoys are not expected to be intercepting
the client’s upstream traffic.
Registration mechanism: Client registration is performed by a
client sending a particularly formatted file, called the registration
package, to a Waterfall registration server. Waterfall’s registration
phase is not latency-sensitive, therefore the registration package can
be sent through any latency-insensitive communication channel. In
our design of Waterfall, a client encrypts her registration package
with the public key of Waterfall registration server, and emails the
encrypted package to the publicly-advertised email address of the
registration server. The server confirms the receipt of the package
through a confirmation email.
Note that using email is not central to our design, as the en-
crypted registration package can be sent through any other latency-
insensitive channel, e.g., by broadcasting on social networks or
through domain fronted Tor bridges.
Registration package: A registration package is a file formatted
as:
I D|Conn2
I D|...)
RClient = EncryptP K(ClientI D|Conn1
I D are described in the following.
(1)
where PK is the public encryption key of Waterfall’s registration
server; ClientI D and Conni
Client identifier (ClientI D). Client identifier is used by decoy routers
to filter out unrelated overt traffic. A client with a static public IP
address will use that IP as her ID. For a client behind dynamic NAT,
the client will use her subnet as her ID.
Connection identifier (Conni
I D). Each connection identifier contains
information that lets a decoy router identify an overt Waterfall
connection created by a registered Waterfall client. Table 4 shows
the format of a connection identifier. A connection identifier enables
a decoy router to perform four main tasks:
1 Identify overt Waterfall connections: A connection identifier
allows a decoy router to identify the overt connection created by
a registered client for decoy routing. In our design, the TCP ISN
value is used for identifying such overt connections. Note that the
TCP ISN is a 4 Bytes field that is generated randomly by the client
establishing a connection. Waterfall clients will pre-generate such
ISNs, and share them with the decoy routers during registration.
2 Man-in-the-middle the identified overt connections: Waterfall
decoy routers will only man-in-the-middle the overt connections
that are identified as described above (i.e., by comparing the TCP
ISNs). Figure 5 shows a typical TLS handshake. As can be seen from
the figure, to be able to man-in-the-middle a TLS connection, a
decoy router needs to know the client’s TLS Random nonce as well
as the client’s public exchange key. Since the decoy router does not
intercept the upstream traffic, the Waterfall client includes them
as part of connection identifiers (Table 4). This will be discussed
further in Section 7.
3 Authenticate Waterfall clients: An adversary may send invalid
registration information to Waterfall on behalf of a user who is
not willing to use Waterfall (i.e., to DoS specific users or flood
Waterfall). The adversary, however, has little chance in correctly
guessing the values of the ISN and TLS Random nonces to be used by
the non-Waterfall client. Therefore, once a decoy router succeeds
in de-ciphering an overt connection’s downstream traffic using
a connection identifier provided in the registration package, the
authenticity of the registration package is verified.
4 Secure covert communications: The write and read keys (last
column of Table 4) are used to encrypt the client’s upstream and
downstream covert communications with a decoy router.
Note that each registration package will contain multiple con-
nection identifiers. To preserve unobservability, each connection
identifier should be used only once for covert communications.
Size of the registration package: Each client identifier is 4 Bytes,
and each connection identifier is at maximum 375 Bytes (as shown
in Table 4). Therefore, a registration package with 1000 connection
identifiers has a size of around 375 KBytes, which can easily be sent
through a latency-insensitive channel like email. A client needs
to send a new registration package to the registration server only
after he runs out of unused connection identifiers.
7 COVERT COMMUNICATIONS IN
WATERFALL
In this section, we describe how a registered client covertly com-
municates with the Waterfall decoy router intercepting her overt
traffic. As discussed earlier, we use different channels for upstream
and downstream covert communications in Waterfall. Figure 6 il-
lustrates a typical covert communication in Waterfall. We assume
that the decoy router has already authenticated the client based on
her registration information, as described earlier in Section 6.
7.1 Upstream Covert Channel
A registered client uses Waterfall’s upstream covert channel to send
various messages to Waterfall decoys. Particularly, the channel is
used by the clients to send to the decoys the upstream traffic (i.e.,
TCP packets) destined to censored destinations. The channel can
also be used by the client to send various Waterfall-specific com-
mands to a decoy router, such as commands to update registration
information. Note that a client encrypts her upstream covert traffic
using the Write Keys shared with Waterfall during the registration
process (last column of Table 4).
To enable interactive, real-time browsing of the censored web-
sites, the upstream channels between Waterfall clients and decoys
should be low-latency channels. Previous designs [4, 15, 21, 25, 58,
59] (which are all upstream designs) establish this channel by sim-
ply embedding upstream covert messages into the upstream TLS
records destined to an overt destination (whose upstream path is
intercepted by some decoy routers). This, however, is not possible
in a downstream-only decoy routing system like Waterfall since the
decoys are not expected to be intercepting clients’ upstream traffic
to overt destinations. We therefore design several novel low-latency
covert channels for upstream communications between Waterfall
clients and decoys. Our channels offer lower capacity compared to
the upstream channel used in previous (upstream) decoy proposals,
however, the capacity suffices for upstream covert communica-
tions in Waterfall given the asymmetric nature of web traffic (i.e.,
upstream HTTP traffic has much less volume than downstream).
7.1.1 HTTP-based Channels. We leverage various features of
the HTTP protocol to establish several kinds of upstream covert
channels in Waterfall, i.e., from a client to a decoy router on the
Session I5:  Communication PrivacyCCS’17, October 30-November 3, 2017, Dallas, TX, USA2045Table 4: The format of connection identifiers (Conni
I D), sent in a registration package.
Needed to intercept connection
Client public/private exchange keys (2 × 255
Bytes Maximum)
Client public/private exchange keys (2 × 255
Bytes Maximum)
Client TLS random nonce (4 Bytes)
Needed to identify connections
TCP ISN #1 (4 Bytes)
TCP ISN #2 (4 Bytes)
Needed to secure covert communication
Write Key, Write MAC Secret (56 Bytes)
Read Key, Read MAC Secret (56 Bytes)
Write Key, Write MAC Secret (56 Bytes)
Read Key, Read MAC Secret (56 Bytes)
Client TLS random nonce (4 Bytes)
.
.
.
.
.
.
Figure 5: A typical TLS handshake. The bolded elements are needed by a decoy router to intercept the TLS connection.
sent towards the client, therefore intercepted by Waterfall decoys.
Figure 6a illustrates the main idea.
HTTP 404 Error. If a webserver receives an HTTP GET for a non-
existing URL, the webserver will respond with an HTTP 404 error
message; many webservers include the invalid URL in the returned
error message. We leverage this to build an upstream covert channel
for Waterfall. In order to send a covert message CovertMessage,
a Waterfall client sends the following HTTP message to her overt
destination:
GET /CovertMessage HTTP/1.1
Host: www.overt.com
Since /CovertMessage is not a valid URL, the server will respond
the following back to the client, which will be intercepted by the
decoy router on the downstream traffic:
HTTP/1.1 404 Not Found
Content-Length: 95
 Not Found 
The url  /CovertMessage  was
not found.
Note that not all websites replay the URL in the 404 error message.
Particularly, our evaluation of the top 10,000 Alexa websites [2]
shows that 3,916 websites support HTTPS, out of which 812 (20%)
replay the URL in the 404 error.
HTTP 3XX Redirects. Typical Internet websites usually have
multiple alternative hostnames. The HTTP 3XX redirection mes-
sages are designed to redirect a client to a different location. The
(a) Upstream Covert Communication using HTTP Redirect chan-
nels.
(b) Downstream Covert Communication
Figure 6: Covert communications in Waterfall.
downstream (but not upstream) path. The common feature of these
HTTP-based channels is that they reflect (part of) the message being
sent in an upstream HTTP message (which is not intercepted by
downstream-only decoy routers) into a downstream HTTP message
Session I5:  Communication PrivacyCCS’17, October 30-November 3, 2017, Dallas, TX, USA2046most common use case of 3XX redirects is when a websites redi-
rects to its www prefixed hostname, e.g. redirecting a request for
example.com to www.example.com, or vice versa. What enables
us to use HTTP 3XX Redirects for upstream covert communications
is that such HTTP 3XX Redirect messages typically contain the
whole requested path as part of the Location header. Therefore, a
Waterfall client can send the following upstream HTTP message to
her overt destination in order to send CovertMessage to a decoy:
GET /CovertMessage HTTP/1.1
Host: overt.com
The overt.com server will respond the following downstream
message to the client, which will be intercepted by a Waterfall
decoy router:
HTTP/1.1 301 Moved Permanently
Location: www.overt.com/CovertMessage
Note that CovertMessage can be any arbitrary covert message,
for instance, HTTP GET covert.com.
Our evaluation of the top 10,000 Alexa websites [2] show that
50% (1,976 out of all 3,916) of all HTTPS websites perform HTTP
3XX Redirect to or from their www prefixed hostnames, therefore
can be used for our upstream covert channel.
Channels tailored to specific (popular) webpages. Aside from
the channels mentioned above, which work for a large number of
overt websites, we also design upstream covert channels that are
tailored to specific (popular) overt websites. Such channels exist
because some websites reflect parts of the HTTP requests they
receive from clients, such as the requested path or an HTTP header,
back to the clients. In particular, sending the following request to
the Google search engine:
GET /url?rct=j&url=CovertMessage HTTP/1.1
Host: www.google.com
will result in an HTTP response with the following META tag:
Similar to Google search, most websites with search capabili-
ties tend to repeat the search query in the response HTML. Em-
bedding covert messages in the search query will allow the de-
coy router to obtain the messages from the responses. Websites
supporting this type of channel include popular search engines
such as google.com, bing.com, yandex.com and yahoo.com and
other websites with search capabilities such as github.com and
amazon.com. Note that some (but not all) searchable websites in-
spect uncommon queries from users, e.g., by asking the user to
solve a CAPTCHA.