# Ambiguity Resolution via Passive OS Fingerprinting
## Author
Greg Taleck  
NFR Security, Inc.  
5 Choke Cherry Rd, Suite 200, Rockville, MD 20850  
Email: [PI:EMAIL](mailto:pi@email.com)  
[http://www.nfr.com/](http://www.nfr.com/)

## Abstract
With the increasing use of tools like fragrouter and fragroute, which exploit differences in common operating systems to evade IDS detection, it has become crucial for IDS sensors to accurately represent the variety of end hosts' network stacks. This paper presents an approach that uses passively detected OS fingerprints to resolve ambiguities between different network stack implementations. Additionally, a new technique is introduced to enhance the confidence level of fingerprint matches by examining TCP connection negotiations more extensively.

## 1. Introduction
Ptacek and Newsham [3] highlight a fundamental challenge for network intrusion detection systems (IDS) that passively monitor a network link: the ability of skilled attackers to evade detection by exploiting ambiguities in the traffic stream as seen by the NIDS. These ambiguities arise from the variations in protocol implementations by different operating system vendors, due to ambiguities in common Internet protocols.

This paper addresses the problem of providing IDS sensors with knowledge of an end host's network stack implementation to prevent attackers from evading detection or generating false alerts. We also describe the implementation of this approach in version 4 of the NFR IDS Sensor.

### 1.1 Motivation
Resolving network protocol ambiguities has long been a challenge for network intrusion detection systems. Exploitable ambiguities can occur in three scenarios [4]: incomplete analysis by the IDS sensor, lack of detailed knowledge about the end host's protocol implementation, and insufficient topology knowledge to determine if a host sees a given packet. Our solution primarily targets the second scenario, aiming to provide the IDS with more detailed information about the end host in a passive environment.

The ambiguity in the Internet Protocol (IP) regarding fragmentation leads to significant challenges, particularly in accurately determining what a given end host would see in the presence of overlapping fragments. Similarly, Transmission Control Protocol (TCP) implementations vary in handling overlapping TCP data, despite the specification stating that segments should be trimmed to contain only new data. These issues create exploitable conditions for current IDS sensors, which we aim to minimize through the approach described in this paper.

The rest of the paper is organized as follows: Section 2 reviews related work and research in this area. Section 3 discusses existing state-of-the-art fingerprinting technologies. In Section 4, we detail the construction of fingerprint databases and introduce new techniques for accurate host OS identification. Section 5 presents our current implementation, while Section 6 examines the resource consumption of our approach and methods to reduce it. Our results and measurements are provided in Section 7, and potential areas for future research are discussed in Section 8.

## 2. Related Work

### 2.1 Active Mapping
Our work is inspired by research on Active Mapping [1], which involves a Mapper system actively mapping hosts within a network to determine their ambiguity resolution policies. The Mapper builds a Host Profile Table by sending various combinations of overlapping, fragmented IP packets and overlapping TCP segments. This table is then used by the IDS to resolve ambiguities. However, this method has drawbacks, such as the need for active, potentially harmful traffic and the inability to map dynamically assigned IP addresses.

### 2.2 Traffic Normalization
Traffic normalization [5] addresses ambiguities by eliminating them, acting as a gateway for all ingress and egress traffic. While effective, it can be resource-intensive and may break connectivity when hosts rely on un-normalized traffic. Normalizers must also be highly fault-tolerant.

### 2.3 Existing Fingerprinting Tools
Active and passive OS fingerprinting tools, such as nmap, queso, ettercap, p0f, and prelude-ids, have been available for some time. These tools identify hosts by analyzing subtle variations in network stack implementations, primarily using ICMP and TCP packets. While valuable, these approaches have not been widely integrated into IDS solutions and are mainly used for forensic investigations.

## 3. OS Fingerprinting

### 3.1 Active Fingerprinting
Active fingerprinting involves sending malformed and unique payloads to a remote host and examining the returned values. Tools like nmap and queso use this method, sending special combinations of TCP flags to both open and closed ports.

### 3.2 Passive Fingerprinting
Passive fingerprinting identifies the host type by monitoring network traffic without sending any packets. Existing tools examine fields in the IP and TCP headers of initial TCP SYN segments, including Initial Window Size, Time To Live, Maximum Segment Size, and others. Other techniques analyze TCP segments throughout the connection or the timing of TCP segments.

### 3.3 Defeating OS Fingerprinting
Despite the accuracy of both active and passive fingerprinting, there are methods to prevent attackers from guessing a host's OS. For example, changing any of the enumerated values can fool p0f, while more complex changes are needed to deceive nmap or queso.

### 3.4 Exploitation of the TCP Three-Way Handshake
Existing passive fingerprinting tools focus on the first SYN segment of a TCP connection. However, the SYNACK response from the server can also provide valuable information. Since servers are typically within the same network as the IDS, this information is crucial. During the three-way handshake, the client sends a TCP SYN segment, and the server responds with a SYNACK. Analyzing these segments can help identify the server's OS and resolve ambiguities in subsequent fragmented packets.

## 4. Building TCP SYN/SYNACK Fingerprint Tables
To passively map hosts to specific operating systems, we deploy IDS sensors with pre-built tables containing mappings of TCP SYN/SYNACK fingerprints to ambiguity resolution policies. Two tables are necessary: one for identifying TCP SYN segments and another for identifying TCP SYNACK segments. We use existing active fingerprinting techniques and new methods to build these policy tables.

### 4.1 Eliciting TCP SYNs
The p0f tool includes a robust table for mapping TCP SYN segments but requires manual updates. To automate this process, we use a combination of existing and new techniques.