的字典类型，方便后续的业务逻辑处理，程序运行结果如下：
(*SN2013-08-022*: True, *S82013-08-021': True)
过滤表达式中的悉意函数。
---
## Page 183
162第二部分高级篇
（1）Archive模块
1）功能：实现系统层面的压缩包调用，支持 gunzip、gzip、rar、tar、unrar、unzip 等。
2）示例：
采用 gzunzip 拆压 /tnp/sourcefile,txt ,gz包
salt +** archive.gunzip /tmp/sourcefile.txt-gz
系用 gzip 压缩/tmp/sourcefile,txt文件
salt '** archive.gzip /tmp/sourcefile.txt
3）API润用：
([, z6*x*atgooznos/du/.1 *,dzun6*aqoxe ,*,,)puo*quato
（2）cmd模块
1）功能：实现远程的命令行调用执行（默认具备root操作权限，使用时需评估风险）。
2）示例：
获取所有被控主机的内春使用情况
salt '** cmd.run "free -m"
在SN2013-08-021主机运行test.sh所本，其中script/test.sh存放在rile_roots定的目录，
该命令会做两个动作：首先同步test.sh到minion的cache 目录（如具多到/var/cache/salt/
minion/fles/base/script/test.sh) 其次域行该脚本
's32013-08-021' cnd.script salt://script/test.sh
 IV (
client.cmd (*s82013-08-021', *cnd.run′,[′free -n*1)
（3）cp模块
1）功能：实现远程文件、目录的复制，以及下载URL文件等操作。
2）示例：
将指定被控主机的/etc/hosts 文件复制到被控主机本地的saltcache 目录（/var/cache/salt/
ninion/1oca1files/);
salt *** cp.cache_1oca1_file /etc/hosts
将主限务器file_roots 指定位置下的目录复制到被控主机
sa1t *** cp,get_dir salt://path/to/diz/ /minion/dest
将主服务器rile_zoots 指定位置下的文件复制到被控主机
salt *** cp,get_ile salt://path/to/file /minion/dest
---
## Page 184
第10章集中化管理平台Saltstack详解163
下载URL内容到被控主机指定位置
salt *** cp-get_ur1 http://wwv.slashdot.org /tmp/index.htm1
3）API调用：
c1ient,cmd(*sN2013-08=021*, *cp-get_file′, (* salt://path/to/fi1e *, * /min1on/dest*1)
（4）cron模块
1）功能：实现被控主机的crontab操作。
2）示例：
查看指定被控主机、root用户的crontab清单
salt *sN2013-08-022* cron.rav_cron root
salt *sN2013-08-022' cron.set_job root **+ +** **+*** 1/usr/local/weekly
为指定的被控主机、root用户源加/usr/1oca1/week1y生务作业
 肃除指定的根控主机root用户 crontab 的 /usr/1ocal/weekly 任务作业
sa1t *sN2013-08-022' cron.rm_job root /usr/1oca1/weekly
3）API调用：
client  cmd(*SN2013-08-021*, *cron,set_job′, [*zoot'*,***, ***, *
（5）dmsutil模块
1）功能：实现被控主机通用DNS相关操作。
2）示例：
部加指定被控主机ho8ts 的主机配置项
salt *** dnsuti1.hosts_append /etc/hosts 127,0.0.1 ad1.yuk.com, ad2.yuk,com
删除指定被控主机hosts 的主机配置项
salt **' dnsutil.hosts_renove /etc/hosts adl.yuk.com
3)AP1调用：
elient .cnd(***, *dnsut11.hosts_append′, [*/etc/hosts′, *127,0.0.1*,*ad1-yuk.co*1)
（6）file模块
1）功能：被控主机文件常见操作，包括文件读写、权限、查找、校验等。
2）示例：
校橙所有被控主机/etc/Estab文件的md5是否为6254e84e2f6ffa54e0cBd9cb230f5505，一致则
---
## Page 185
164第二部分高级篇
salt *** fle,check_hash /etc/fstab md5=6254e84e2f6ffa54e0c8d9cb230f5505
校验所有被控主机文件的害息、文持md5、sha1、sha224、sha256、sha384、sha512加客算法
salt *** file.get_sum /etc/passwd md5
修改所有被控主机/etc/passwd 文件的属组、用户权限，等价于 chown root:root/etc/passwd
salt **' file.chown /etc/passvd root root
复制所有被控主机本地/path/to/8rc文件到本地的/path/to/dst文伴
salt ** file,copy /path/to/src /path/to/dst
检奎所有被控主机/etc目录是否存在，存在则返因True，检查文件是否存在使用file.file_exists 方法
salt *** tle.directory_exists /etc
获取所有被控主机/etc/passwd的stats 悠息
salt *** file,stats /etc/passwd
获取所有被控主机/etc/passwd 的权累mode，如755、644
salt **' file.get_mode /etc/passvd
够改所有被控主机 /etc/passwd 的权景mode为 0644
salt *** file.set_mode /etc/passvd 0644
在所有被控主机创建/opt/test 目录
salt *** file,mkdir /opt/test
将所有被控主机/etc/httpd/httpd.cont 文件的 LogLeve1 参数的 wazn 售够改成info
salt *** file.append /tmp/test/test,conf *naxclient 100*
删除所有被控主机的/tmp/foo文件
salt *** file.renove /tmp/foo
3）API调用：
(1,oog/du/,1 ',ouaxg ,**,)puo*uo
（7）iptables 模块
1）功能：被控主机iptables支持。
2）示例：
在所有被控墙主机追加（append）、插入（insert)iptables 规则，其中 INPUT 为输入链
ACCEPT*
RELATED,ESTABLISHED -] ACCEPT*
---
## Page 186
第10章集中化管理平台Saltstack详解165
在所有被控确主机删除指定链编号为3（position=3）或指定存在的规则
salt ** iptables.delete filter INPUT rule=*m state -state RELATED,ESTABLISHSD
salt '*' iptables.delete filter IsPUT position=3
-} ACCEPT'
保存所有被控墙主机规则到本地硬盘（/etc/sysconfig/iptables)
salt *** iptables.save /etc/sysconfig/iptables
3）API调用：
do d-,\=onz, *,0aN, *,xostT,1′,puedde*satqead, *,z20-α0ctozNs,)puo*uet[o
(I.,\Ld33ov [- 08 1zods--
（8）netwrok模块
1）功能：返回被控主机网络信息。
2）示例：
在指定被控主机·SN2013-08-022*获率 dig、ping、traceroute 目承域名常息
salt
*sx2013-08-022* network.dig www.qq.com
salt
*sx2013-08-022* network-ping www.qg.com
salt *s32013-08-022* network.traceroute www.qg-com
获取指定被控主机*SN2013-08-022*的MAC地址
sa1t *sN2013-08-022* network.hvaddr eth0
检测指定被控主机*SN2013-08-022*是否属于10.0.0，0/16子网范图，属于则返图True
salt *S82013-08-022* network,in_subnet 10.0.0.0/16
获取指定被控主机*SN2013-08-022*的网卡配置信息
salt *sN2013-08-022* network.interfaces
获取指定被控主机·SN2013-08-022*的IP地址配置售惠
salt *sN2013-08-022* network.ip_addrs
salt *ss2013-08-022′ network.subnets
+获取指定被控主机*S82013-08-022*的子网售惠
3）API调用：
client,cnd(*sN2013-08-022*, 'netvork.ip_addrs*)
（9）pkg包管理模块
1）功能：被控主机程序包管理，如yum、apt-get 等。
2）示例：
为所有被控主机安装PHP环境，根据不网系统发行版调用不网安装工具进行都署，如redhat平台的yum
等价 yum -y insta11 php
---
## Page 187
166第二部分高级
salt *** pkg-install php
却载所有被控主机的PHP环境
salt '** pkg.remove php
升级所有被控主机的教件包
salt '*' pkg-upgrade
3 ) API 润用:
c1ient ,cnd(*SN2013-08-022*,*pxg-remove′, (*php*1)
（10）Service服务模块
1）功能：被控主机程序包服务管理。
2）示例：
开鲁（enable)、禁用（disab1e) mg1nx开机自8动服务
salt '** service.enable nginx
salt *** service disable nginx
针对 nginx 服务的 reload、restart、start、stop、status 摄作
salt *** service,reload nginx
salt *** service.restart nginx
salt *** service.start nginx
salt '** service,status nginx
3）API调用：
c11ent .cmd(*sx2013-08-022*,*service.stop*, [*nginx*1)
（11）其他模块
通过上面介绍的10个常用模块，基本上已经覆盖日常运维操作。Saltstack还提供了user
（系统用户模块）、group（系统组模块）、partition（系统分区模块）、puppet（puppet 管理模块）、
system（系统重启、关机模块）、timezone（时区管理模块）、nginx（Nginx管理模块）mount
（文件系统挂载模块），等等，更多内容见官网介绍：http://docs.saltstack.com/ref/modules/all/
index.html#all-salt-modules。当然，我们也可以通过Python 扩展功能模块来满足需求。
10.4grains组件
grains 是Saltstack最重要的组件之一，grains 的作用是收集被控主机的基本信息，这些
信息通常都是一些静态类的数据，包括CPU、内核、操作系统、虚拟化等，在服务器端可以
---
## Page 188
第10章集中化管理平台Saltstack详解167
根据这些信息进行灵活定制，管理员可以利用这些信息对不同业务进行个性化配置。官网提
供的用来区分不同操作系统的示例如下（采用jinja模板）：
(3 if grains[*os′]== *Ubuntu*)
(([,19ou,1eue26 1) 1eoq
($ elif grains[*os′] *= *Centos* $)
(([,upbg,]eure2b }} 1sou
[$ endif ]
示例中CentOS发行版主机将被“host:（{grains[fqdn]}}”匹配，以主机SN2013-08
022（centOS6.4）为例，最终得到“host:SN2013-08-022”。同时，命令行的匹配操作系统发
行版本为CentOS的被控端可以通过-G参数来过滤，如salt-G'os:CentOS'tesLping
10.4.1grains常用操作命令
匹配内核版本为2.6.32-358.14.1.el6.x86_64的主机：
获取所有主机的grains项信息：
salt *** grains.1s
当然，也可以获取主机单项grains数据，如获取操作系统发行版本，执行命令：salt
SN2013-08-022' grains.item 0s，结果如图 10-9 所示。
os:CentoS
图10-9根据grains 获取主机操作系统发行版本信息
10.4.2定义grains数据
定义grains数据的方法有两种，其中一种为在被控主机定制配置文件，另一种是通过主
控端扩展模块API实现，区别是模块更灵活，可以通过Python编程动态定义，而配置文件
只适合相对固定的键与值。下面分别举例说明。
---
## Page 189
168第二部分高级简
0.229-88-ES.155-0-8a-1N5
ZU2/2/20:
de pe tsc
8664
faultlcraum
S2013-08-022
II Adopter',ven
ip_1nterfoces:('lo²:['1z7.0.0.1°],ete':[192.168.1.22*]]
N2913-88-827
192.168.1.22
2.6.32-358.18.1.e16.x86_64
oen.fi1e:65535
图10-10获取主机所有grains信息（部分截图）
1.被控端主机定制grains数据
SSH登录一台被控主机，如 SN2013-08-022，配置文件定制的路径为/etc/salt/minion，
参数为 defaul_include：minion.d*.conf，具体操作如下：
[ /etc/salt/minion.d/hostinfo.conf ]
grains1
roles1
-
webserver
- memcache
deployment: datacenter4
cabinet: 13
重启被控主机salt-minion服务，使之生效：service salt-minion restart。验证结果在主控
端主机运行：salt *SN2013-08-022” grains.item roles deployment cabinet，观察配置的键与值，
如图10-11所示。
---
## Page 190
第10章集中化管理平台Saltstack详解169
net:13
cache
图10-11定制 grains 数据信息
2.主控端扩展模块定制grains数据
首先在主控端编写Python代码，然后将该Python文件同步到被控主机，最后刷新生
效（即编译Python 源码文件成字节码pyc）。在主控端bash目录（见/etc/salt/master 配置
文件的file_roots项，默认的 base 配置在/srv/salt）下生成_grains 目录，执行install -d /
srv/salt/_grains开始编写代码，实现获取被控主机系统允许最大打开文件数（ulimit-n）的
grains 数据。
[/srv/salt/_grains/sysprocesspy 
Inport os, sys, conmands
def Grains_openfile () :
return os max open file of grain8 value
 1 *
grains = ()
init Gefault value
_open_fil1e=65536
try:
getulimit=conmands-getstatusoutput (*source /etc/profile/ulimit =n*)
except Exception, e:
1f getulimit[0]==0:
pass
_open_flle=1nt (getu1im1t [111
grains[*max_open_file*] = _open_file
return grains
上面代码的说明如下。
口grains_openfile0定义一个获取最大打开文件数的函数，函数名称没有要求，符合
Python的函数命名规则即可；
grains={初始化一个grains 字典，变量名一定要用 grains，以便Saltstack识别；
 grains[’max_open_ile] = _open_ile 将获取的 Linux ulimit -n 的结果值赋予 grains[max_
open_file].其中 “max_open_file”就是 grains 的项，_open_file 就是 grains 的值。
---
## Page 191
170第二部分高级篇
最后同步模块到指定被控端主机并刷新生效，因为grains比较适合采集静态类的数据，
比如硬件、内核信息等。当有动态类的功能需求时，需要提行刷新，具体操作如下：
么？文件已经同步到minion cache目录中，如下：
/vaz/cache/salt/minLon/extmods/grains/gra1.ns_openfile -py
/var/cache/salt/minion/fles/base/_grains/grains_openfile-py
/var/cache/salt/minion/extmods/grains/为扩展模块文件最终存放位置，刷新模块后将在同
路径下生成字节码pyc：/var/cache/salt/minion/files/base/_grains/为临时存放位置。
刷新模块salt‘SN2013-08-022”sys.reload_modules，再看看主机发生了什么变化？在/var
cache/salt/minion/extmods/grains/位置多了一个编译后的字节码文件grains_openfile.pye文件，
为Python可执行的格式。
/var/cache/salt/minLon/extmods/grains/grains_openfile-py
/vaz/cache/salt/minion/extmods/grains/grains_openfile-pyc
/var/cache/salt/minLon/files/base/_grains/grains_openfile py
校验结果为可以在主控端查看grains 信息，执行salt“SN2013-08-022”grains.item max
open_file，结果显示“max_open_file:65535"，这就是前面定制的主机grains信息。
SN201308022:
S05591otyuadoxeu
10.5pillar组件
pillar也是Saltstack最重要的组件之一，其作用是定义与被控主机相关的任何数据，
定义好的数据可以被其他组件使用，如模板、state、API等。在pillar中定义的数据与不同
业务特性的被控主机相关联，这样不同被控主机只能看到自己匹配的数据，因此pilar安
全性很高，适用于一些比较敏感的数据，这也是区别于grains最关键的一点，如定义不同
业务组主机的用户id、组id、读写权限、程序包等信息，定义的规范是采用Python字典形
式，即键/值，最上层的键一般为主机的id或组名称。下面详细描述如何进行pilar的定
义和使用。
---