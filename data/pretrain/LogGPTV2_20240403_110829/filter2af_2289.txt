### 优化后的文本

**原文链接：**
继上个月关于Web缓存投毒的[演示文稿](https://www.youtube.com/watch?v=iSDoUGjfW3Q)和[白皮书](https://portswigger.net/blog/practical-web-cache-poisoning)发布后，各公司纷纷部署防御措施以缓解此类攻击。本文将探讨一些通用弱点，用以绕过这些防御措施。

该研究引发了多家主要缓存供应商的响应。Akamai发表了一篇简短回应，但令人困惑的是，文中引用了针对Web缓存欺骗的[缓解措施](https://blogs.akamai.com/2018/08/on-cache-poisoning.html)，实际上这些措施对Web缓存投毒攻击几乎无效。Fastly则发布了[安全公告](https://www.fastly.com/security-advisories/cache-poisoning-leveraging-various-x-headers)，提供了详细的缓解建议。Cloudflare更进一步，采取了全局性缓解措施，并在博客文章[如何保护客户免受缓存投毒](https://blog.cloudflare.com/cache-poisoning-protection/)中详细说明。

让我们仔细看看Cloudflare部署的两个主要防御策略。首先，他们在WAF（Web应用防火墙）中添加了一条规则，用于阻止类似XSS（跨站脚本攻击）的字符，例如我在研究中使用的某些请求头中的`<script>`标签。

**修复后的缓存键：** `https://waf.party/`

我上周向Cloudflare报告了这个问题，他们迅速进行了修补。虽然最初的修复并不完全成功，但他们值得称赞，因为Cloudflare是唯一尝试技术修复的供应商。目前我的绕过方法已被修复，我认为他们的默认配置是最安全的。需要注意的是，尽管Cloudflare的修复措施有效，但仍有可能无法完全阻止使用常见请求头进行的缓存投毒攻击。

其他公司在尝试修补漏洞时也可能会犯错。一个常见的错误是在发现缓存投毒攻击后，直接阻止已缓存的响应，这可能导致拒绝服务问题。例如，Tesla网站使用WAF阻止任何包含字符串`burpcollaborator.net`的请求头：

```
GET /en_GB/roadster HTTP/1.1
Host: www.tesla.com
Any-Header: burpcollaborator.net
HTTP/1.1 403 Forbidden
Access Denied. Please contact PI:EMAIL
```

在这种情况下，任何试图访问该页面的人都会收到403 Forbidden响应：

```
GET /en_GB/roadster HTTP/1.1
Host: www.tesla.com
HTTP/1.1 403 Forbidden
Access Denied. Please contact PI:EMAIL
```

另一个常见的错误是公司在修补引入漏洞的框架时低估了请求头的全部潜力。例如，某个站点将可接受的`request.host`变量值列入了白名单，该变量由`X-Forwarded-Host`请求头赋值。然而，他们没有注意到这个请求头还可以影响`request.port`变量，从而导致持久的拒绝服务：

```
GET / HTTP/1.1
Host: redacted.com
X-Forwarded-Host: redacted.com:123
HTTP/1.1 301 Moved Permanently
Location: https://redacted.com:123/
```

最终，在特定基础上修补Web缓存投毒可能非常棘手，Web框架的作者才是解决这些问题的最佳人选。近年来，像Django和Flask这样的框架已经禁用了对这些请求头的支持，而像Ruby on Rails这样的其他框架虽被[反复警告](https://github.com/rails/rails/issues/29893)，但直到最近才开始部署修复程序。

最后，我要提一下，我将在周一发布的[Param Miner](https://github.com/PortSwigger/param-miner)中进行实质性更新，特别是默认禁用静态`fcbz`缓存爆破程序，因为它可能破坏某些网站。这意味着当您使用浏览器或Repeater尝试缓存投毒时，需要手动指定自己的缓存爆破值，否则可能会意外影响其他访问者。

祝你好运，保持安全！