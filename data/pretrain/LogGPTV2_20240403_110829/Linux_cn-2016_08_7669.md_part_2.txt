```
lrwxrwxrwx  1 root root             3 May 18 10:26 cdrom -> sr0
lrwxrwxrwx  1 root root            11 May 18 15:54 core -> /proc/kcore
lrwxrwxrwx  1 root root            13 May 18 15:54 fd -> /proc/self/fd
lrwxrwxrwx  1 root root             4 May 18 10:26 rtc -> rtc0
lrwxrwxrwx  1 root root             8 May 18 10:26 shm -> /run/shm
lrwxrwxrwx  1 root root            15 May 18 15:54 stderr -> /proc/self/fd/2
lrwxrwxrwx  1 root root            15 May 18 15:54 stdin -> /proc/self/fd/0
lrwxrwxrwx  1 root root            15 May 18 15:54 stdout -> /proc/self/fd/1
```
Linux 中使用 `ln` 工具就可以创建一个符号链接文件，如下所示：
```
# touch file1.txt
# ln -s file1.txt /home/tecmint/file1.txt  [创建符号链接文件]
# ls -l /home/tecmint/ | grep "^l"         [列出符号链接文件]
```
在上面的例子中，首先我们在 `/tmp` 目录创建了一个名叫 `file1.txt` 的文件，然后创建符号链接文件，将 `/home/tecmint/file1.txt` 指向 `/tmp/file1.txt` 文件。
 管道   （    Pipe    ） 和 命令管道   （    Named pipe    ）  : 将一个进程的输出连接到另一个进程的输入，从而允许进程间通信（IPC）的文件。
命名管道实际上是一个文件，用来使两个进程彼此通信，就像一个 Linux 管道一样。
列出某目录下的管道文件：
```
# ls -l | grep "^p"
```
输出例子：
```
prw-rw-r-- 1 tecmint tecmint    0 May 18 17:47 pipe1
prw-rw-r-- 1 tecmint tecmint    0 May 18 17:47 pipe2
prw-rw-r-- 1 tecmint tecmint    0 May 18 17:47 pipe3
prw-rw-r-- 1 tecmint tecmint    0 May 18 17:47 pipe4
prw-rw-r-- 1 tecmint tecmint    0 May 18 17:47 pipe5
```
在 Linux 中可以使用 `mkfifo` 工具来创建一个命名管道，如下所示：
```
# mkfifo pipe1
# echo "This is named pipe1" > pipe1
```
在上的例子中，我们创建了一个名叫 `pipe1` 的命名管道，然后使用 [echo 命令](http://www.tecmint.com/echo-command-in-linux/) 加入一些数据，这之后在处理输入的数据时 shell 就变成非交互式的了（LCTT 译注：被管道占住了）。
然后，我们打开另外一个 shell 终端，运行另外的命令来打印出刚加入管道的数据。
```
# while read line ;do echo "This was passed-'$line' "; done 套接字文件   （    socket    ）  ： 提供进程间通信方法的文件，它们能在运行在不同环境中的进程之间传输数据和信息。
这就是说，套接字可以为运行网络上不同机器中的进程提供数据和信息传输。
一个 socket 运行的例子就是网页浏览器连接到网站服务器的过程。
```
# ls -l /dev/ | grep "^s"
```
输出例子：
```
srw-rw-rw-  1 root root             0 May 18 10:26 log
```
下面是使用 C 语言编写的调用 `socket()` 系统调用的例子。
```
int socket_desc= socket(AF_INET, SOCK_STREAM, 0 );
```
上例中：
* `AF_INET` 指的是地址域（IPv4）
* `SOCK_STREAM` 指的是类型（默认使用 TCP 协议连接）
* `0` 指协议（IP 协议）
使用 `socket_desc` 来引用管道文件，它跟文件描述符是一样的，然后再使用系统函数 `read()` 和 `write()` 来分别从这个管道文件读写数据。
#### 目录文件
这是一些特殊的文件，既可以包含普通文件又可包含其它的特殊文件，它们在 Linux 文件系统中是以根（/）目录为起点分层组织存在的。
列出某目录下的目录文件：
```
# ls -l / | grep "^d" 
```
输出例子：
```
drwxr-xr-x   2 root root  4096 May  5 15:49 bin
drwxr-xr-x   4 root root  4096 May  5 15:58 boot
drwxr-xr-x   2 root root  4096 Apr 11  2015 cdrom
drwxr-xr-x  17 root root  4400 May 18 10:27 dev
drwxr-xr-x 168 root root 12288 May 18 10:28 etc
drwxr-xr-x   3 root root  4096 Apr 11  2015 home
drwxr-xr-x  25 root root  4096 May  5 15:44 lib
drwxr-xr-x   2 root root  4096 May  5 15:44 lib64
drwx------   2 root root 16384 Apr 11  2015 lost+found
drwxr-xr-x   3 root root  4096 Apr 10  2015 media
drwxr-xr-x   3 root root  4096 Feb 23 17:54 mnt
drwxr-xr-x  16 root root  4096 Apr 30 16:01 opt
dr-xr-xr-x 223 root root     0 May 18 15:54 proc
drwx------  19 root root  4096 Apr  9 11:12 root
drwxr-xr-x  27 root root   920 May 18 10:54 run
drwxr-xr-x   2 root root 12288 May  5 15:57 sbin
drwxr-xr-x   2 root root  4096 Dec  1  2014 srv
dr-xr-xr-x  13 root root     0 May 18 15:54 sys
drwxrwxrwt  13 root root  4096 May 18 17:55 tmp
drwxr-xr-x  11 root root  4096 Mar 31 16:00 usr
drwxr-xr-x  12 root root  4096 Nov 12  2015 var
```
您可以使用 mkdir 命令来创建一个目录。
```
# mkdir -m 1666 tecmint.com
# mkdir -m 1666 news.tecmint.com
# mkdir -m 1775 linuxsay.com
```
### 结论
现在应该对为什么 Linux 系统中一切都是文件以及 Linux 系统中可以存在哪些类型的文件有一个清楚的认识了。
您可以通过阅读更多有关各个文件类型的文章和对应的创建过程等来增加更多知识。我希望这篇教程对您有所帮助。有任何疑问或有补充的知识，请留下评论，一起来讨论。
---
via: 
作者：[Aaron Kili](http://www.tecmint.com/author/aaronkili/) 译者：[runningwater](https://github.com/runningwater) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出