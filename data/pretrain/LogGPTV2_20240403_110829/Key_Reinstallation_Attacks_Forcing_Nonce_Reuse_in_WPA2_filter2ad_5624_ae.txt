Supplicant (victim)
Adversary (MitM)
Authenticator
initial 4-way or FT handshake
Encx
ptk{ Group1(r; GTK) }
Encx
ptk{ Group1(r; GTK) }
Refresh GTK
Install GTK
Ency
ptk{ Group2(r) }
Install GTK
Encx +1
ptk { Group1(r+1; GTK) }
Enc1
gtk{ GroupData(...) }
Enc1
gtk{ GroupData(...) }
Encx +1
ptk { Group1(r+1; GTK) }
Reinstall GTK
Enc1
gtk{ GroupData(...) }
1○
2○
3○
4○
5○
Figure 7: Key reinstallation attack against the group key
handshake, when the authenticator (AP) immediately in-
stalls the GTK after sending a Group Message 1 to all clients.
4.3 Attacking Delayed Key Installation
Attacking the group key handshake when the AP installs the GTK
in a delayed fashion is more tedious. Note that the previous attack
would fail because the broadcast frame transmitted in stage 3 of
Figure 7 would still be encrypted under the old group key. Indeed,
at this point the AP did not yet receive group message 2 from the
client, meaning it is still using the old group key. This is problematic
because group message 1 (re)installs the new group key, and hence
cannot be abused to reset the replay counter of the old group key.
One way to deal with this problem is illustrated in Figure 8. The
first two stages of this attack are similar to the previous one. That is,
the AP generates a new group key, transports it to the victim, and
the adversary blocks group message 2 from arriving at the AP. This
makes the AP retransmit group message 1 using an incremented
EAPOL replay counter of r + 1. In stage 3 of the attack, however,
we forward the older group message 2 with replay counter value r
to the AP. Interestingly, the AP should accept this message even
though it does not use the latest replay counter value [1, §12.7.7.3]:
On reception of [group] message 2, the AP verifies
that the Key Replay Counter field value matches one
it has used in the group key handshake.
The standard does not require that the replay counter matches the
latest one that the AP used. Instead, it must match one that was
used in the group key handshake, that is, one used in any of the
(re)transmitted group message 1’s. In practice we discovered that
several implementations indeed accept this older not-yet-received
replay counter (see Table 2 column 2). As a result, the AP installs the
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1321CCS’17, October 30–November 3, 2017, Dallas, TX, USA.
Mathy Vanhoef and Frank Piessens
Supplicant (victim)
Adversary (MitM)
Authenticator
initial 4-way or FT handshake
Encx
ptk{ Group1(r; GTK) }
Encx
ptk{ Group1(r; GTK) }
Refresh GTK
Install GTK
Ency
ptk{ Group2(r) }
Encx +1
ptk { Group1(r+1; GTK) }
Ency
ptk{ Group2(r) }
Enc1
gtk{ GroupData(...) }
Enc1
gtk{ GroupData(...) }
Install GTK
Encx +1
ptk { Group1(r+1; GTK) }
Reinstall GTK
Enc1
gtk{ GroupData(...) }
1○
2○
3○
4○
5○
6○
Figure 8: Key reinstallation against the group key hand-
shake, when the AP installs the GTK after accepting replies
with a non-yet-received replay counter from all clients.
new group key. From this point on, the attack proceeds in a similar
fashion as the previous one. That is, we wait until a broadcast frame
is transmitted, perform the group key reinstallation in stage 5 of
the attack, and then replay the broadcast frame in stage 6.
Again it is essential that the broadcast frame we want to replay
is sent before the retransmission of group message 1. Otherwise it
includes the updated replay counter of the group key.
We tested this attack against APs that install the GTK in a delayed
fashion, and that accept replay counters it has used in a message to
the client, but did not yet receive in a reply (recall Table 2 column 2).
Note that we already know that all Wi-Fi clients reset the replay
counter when reinstalling a GTK, and hence are all vulnerable.
Finally, an OpenBSD AP is not vulnerable because it installs the
GTK in a delayed fashion, and only accepts the latest replay counter.
5 ATTACKING THE 802.11R FT HANDSHAKE
In this section we introduce the Fast BSS Transition (FT) handshake,
and show that implementations of it are also affected by our key
reinstallation attack.
5.1 The Fast BSS Transition (FT) Handshake
Amendment 802.11r added the Fast Basic Service Set (BSS) Transi-
tion (FT) handshake to 802.11 [5]. Its goal is to reduce the roaming
time when a client moves from one AP, to another one of the same
protected network (i.e. of the same Basic Service Set). Traditionally,
this required a handshake that includes a new 802.1x and 4-way
handshake (recall Figure 2). However, because the FT handshake
relies on master keys derived during a previous connection with
the network, a new 802.1x handshake is not required. Additionally,
it embeds the 4-way handshake stage in the authentication and
reassociation frames.
A normal FT handshake is shown in stage 1 of Figure 9. Observe
that unlike the 4-way handshake, the FT handshake is initiated
by the supplicant. The first two messages are an Authentication
Request (AuthReq), and an Authentication Response (AuthResp).
They are functionality equivalent to Message 1 and 2 of the 4-way
handshake, respectively, and carry randomly generated nonces that
will be used to derive a fresh session key. After this, the client
sends a Reassociation Request (ReassoReq), and the AP replies
with a Reassociaton Response (ReassoResp). They are similar in
functionality to Message 3 and 4 of the 4-way handshake, finalize
the FT handshake, and transport the GTK to the client.
Only the two reassociation messages are authenticated using a
MIC (see Figure 9). Additionally, none of the messages in the FT
handshake contain a replay counter. Instead, the FT handshake re-
lies on the random SNonce and ANonce to provide replay protection
between different invocations of the handshake [1, §13.5.2].
According to the standard, the PTK must be installed after the
authentication response is sent or received [1, §13.9]. This is illus-
trated by the gray boxes in stage 1 of Figure 9. Additionally, the
802.1x logical port is only opened after sending or receiving the reas-
sociation request. This assures that, even though the PTK is already
installed while the handshake is still in progress, the AP and client
only transmit and accept data frames once the handshake com-
pleted. Combined, this implies that the FT handshake, as defined
in the 802.11r amendment, is not vulnerable to a key reinstallation
attack. However, through experiments and code inspections, we
found that most implementations actually install the PTK, as well as
the GTK, after sending or receiving the reassociation response. This
behaviour is illustrated by the black boxes in stage 1 of Figure 9. As
a result, in practice most implementations of the FT handshake are
vulnerable to a key reinstallation attack.
5.2 A Key Reinstallation Attack against the AP
Since the AP installs the PTK in response to a reassociation request,
our goal will be to replay this frame. We remark that, in practice,
APs must accept retransmissions of reassociation requests. This is
because the reassociation response of the AP may be lost due to
background noise, making the client send a new request.
Figure 9 shows the resulting key reinstallation attack against the
FT handshake. Note that we do not require a man-in-the-middle
position. Instead, being able to eavesdrop and inject frames is suffi-
cient. In the first stage of the attack, we let the client and AP execute
a normal FT handshake. We then wait until the AP has transmitted
one or more encrypted data frames. At this point, we replay the
reassociation request to the AP. Because it does not contain a re-
play counter, and has a valid MIC, the AP will accept and process
the replayed frame. As a result, the AP will reinstall the PTK in
stage 3 of the attack, thereby resetting the associated nonce and
replay counter. Finally, the next data frame sent by the AP will be
encrypted using an already used nonce. Similar to our previous key
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1322Key Reinstallation Attacks: Forcing Nonce Reuse in WPA2
CCS’17, October 30–November 3, 2017, Dallas, TX, USA.
Supplicant (client)
Adversary
Authenticator (victim)
AuthReq(SNonce)
AuthResp(ANonce, SNonce)
Install PTK ?
Install PTK ?
ReassoReq(ANonce, SNonce, MIC)
ReassoResp(ANonce, SNonce, MIC; GTK)
Install PTK & GTK
Install PTK
Enc1
ptk{ Data(...) }
ReassoResp(A/Snonce, MIC; GTK)
ReassoResp(ANonce, SNonce, MIC; GTK)
Reinstall PTK
next transmitted frame(s) will reuse nonces
Enc1
ptk{ Data(...) }
1○
2○
3○
4○
Figure 9: Key reinstallation attack against the Fast BSS Tran-
sition (FT) handshake. Note that a MitM position is not re-
quired, only the ability to eavesdrop and replay frames.
reinstallation attacks, this also enables an attacker to replay old
data frames sent by the client to the AP. We remark that our attack
is particularly devastating against the FT handshake because its
messages do not contain replay counters. This enables an adver-
sary to replay the reassociation request continuously, each time
resetting both the nonce and replay counter used by the AP.
We tested this attack against all our three APs supporting 802.11r.
The first is the open source hostapd implementation, the second is
MediaTek’s implementation for home routers running on a Linksys
RE7000, and the third is a professional Aerohive AP. All three were
vulnerable to the above key reinstallation attack.
Note that if the reassociation response is lost due to background
noise, the client will retransmit the reassociation request sponta-
neously, causing the AP to reinstall the key. That is, without an
adversary being present, APs may already be reusing nonces.
Note that messages in the FT handshake never undergo (addi-
tional) protection using a data-confidentiality protocol. In particular,
Management Frame Protection (MFP) does not protect authentica-
tion and reassociation frames [1, §12.6.19]. Hence, key reinstallation
attacks against the FT handshake are trivial even if MFP is enabled.
5.3 Abusing BSS Transition Requests
An FT handshake is only performed when a station roams from one
AP to another. This limits when an attack can take place. However,
we can force a victim to perform an FT handshake as follows. First,
assume a client is connected to an AP of a network that supports
802.11r. Then, if no other AP of this network is within range of
the client, we clone a real AP of this network next to the client
using a wormhole attack [41]. This makes the client think another
AP of the targeted network is nearby. Finally, we send a BSS Tran-
sition Management Request to the client. This frame is used for
load balancing [1, 11.24.7] and commands the client to roam to
another AP. It is an unauthenticated management frame, and hence
can be forged by an adversary. Consequently, the client accepts this
frame, and roams to the (wormholed) AP using an FT handshake.
We tested this against clients supporting 802.11r. This confirmed
that wpa_supplicant, iOS [8], and Windows 10 [52] accept the
transition request, and roam to another AP using an FT handshake.
6 EVALUATION AND DISCUSSION
In this section we evaluate the impact of nonce reuse for the data-
confidentiality protocols of 802.11, present example attack scenar-
ios, discuss implementation specific vulnerabilities, explain why
security proofs missed our attacks, and present countermeasures.
6.1 Impact of Nonce Reuse in 802.11
The precise impact of nonce reuse caused by our attacks depends on
the data-confidentiality protocol being used. Recall that this can be
either TKIP, CCMP, or GCMP. All three protocol use a stream cipher
to encrypt frames. Therefore, reuse of a nonce always implies reuse
of the keystream. This can be used to decrypt packets. We remark
that in our attack the replay counter of the victim is also reseted.
Therefore, all three protocols are also vulnerable to replay attacks.
When TKIP is used, we can also recover the MIC key as follows.
First, we abuse nonce reuse to decrypt a full TKIP packet, including
its MIC field. Then we attack the weak Michael algorithm: given
the plaintext frame and its decrypted MIC value, we can recover
the MIC key [66]. Because TKIP uses a different MIC key for each
communication direction (recall Section 2.4), this allows us to forge
frames in one specific direction. The origin of this direction is the
device targeted by the key reinstallation attack. Table 3 summarizes
this under the rows mentioning TKIP.
When CCMP is used, practical attacks are restricted to replay and
decryption of packets. Although there is some work that discusses
message forging attacks when nonces are repeated, the attacks are
theoretic and cannot be used to forge arbitrary messages [31].
When GCMP is used, the impact is catastrophic. First, it is pos-
sible to replay and decrypt packets. Additionally, it is possible to
recover the authentication key [43], which in GCMP is used to pro-
tect both communication directions (recall Section 2.4). Therefore,