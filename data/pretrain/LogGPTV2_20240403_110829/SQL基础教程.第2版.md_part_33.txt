000B | 名古屋 | 0006 | 高压锅
000B | 名古屋 | 0007 | 高压锅
000C | 大阪 | 0003 | 高压锅
000C | 大阪 | 0004 | 高压锅
000C | 大阪 | 0006 | 高压锅
000C | 大阪 | 0007 | 高压锅
000D | 福冈 | 0001 | 高压锅
000A | 东京 | 0001 | 叉子
000A | 东京 | 0002 | 叉子
000A | 东京 | 0003 | 叉子
000B | 名古屋 | 0002 | 叉子
000B | 名古屋 | 0003 | 叉子
000B | 名古屋 | 0004 | 叉子
000B | 名古屋 | 0006 | 叉子
000B | 名古屋 | 0007 | 叉子
000C | 大阪 | 0003 | 叉子
000C | 大阪 | 0004 | 叉子
000C | 大阪 | 0006 | 叉子
000C | 大阪 | 0007 | 叉子
000D | 福冈 | 0001 | 叉子
000A | 东京 | 0001 | 擦菜板
000A | 东京 | 0002 | 擦菜板
000A | 东京 | 0003 | 擦菜板
000B | 名古屋 | 0002 | 擦菜板
000B | 名古屋 | 0003 | 擦菜板
000B | 名古屋 | 0004 | 擦菜板
000B | 名古屋 | 0006 | 擦菜板
000B | 名古屋 | 0007 | 擦菜板
000C | 大阪 | 0003 | 擦菜板
000C | 大阪 | 0004 | 擦菜板
000C | 大阪 | 0006 | 擦菜板
000C | 大阪 | 0007 | 擦菜板
000D | 福冈 | 0001 | 擦菜板
000A | 东京 | 0001 | 圆珠笔
000A | 东京 | 0002 | 圆珠笔
000A | 东京 | 0003 | 圆珠笔
000B | 名古屋 | 0002 | 圆珠笔
000B | 名古屋 | 0003 | 圆珠笔
000B | 名古屋 | 0004 | 圆珠笔
000B | 名古屋 | 0006 | 圆珠笔
000B | 名古屋 | 0007 | 圆珠笔
000C | 大阪 | 0003 | 圆珠笔
000C | 大阪 | 0004 | 圆珠笔
000C | 大阪 | 0006 | 圆珠笔
000C | 大阪 | 0007 | 圆珠笔
000D | 福冈 | 0001 | 圆珠笔
7-2 联结（以列为单位对表进行联结） 249 ●
可能大家会惊讶于结果的行数，但我们还是先来介绍一下语法结构吧。
KEYWORD 对满足相同规则的表进行交叉联结的集合运算符是CROSS JOIN（笛卡
●CROSS JOIN（笛卡儿积）
儿积）。进行交叉联结时无法使用内联结和外联结中所使用的ON子句，
这是因为交叉联结是对两张表中的全部记录进行交叉组合，因此结果中
的记录数通常是两张表中行数的乘积。本例中，因为ShopProduct
表存在13条记录，Product表存在8条记录，所以结果中就包含了
13 × 8 = 104条记录。
可能这时会有读者想起前面我们提到过集合运算中的乘法会在本节
中进行详细学习，这就是上面介绍的交叉联结。
内联结是交叉联结的一部分，“内”也可以理解为“包含在交叉联
结结果中的部分”。相反，外联结的“外”可以理解为“交叉联结结果
之外的部分”。
交叉联结没有应用到实际业务之中的原因有两个。一是其结果没有实
用价值，二是由于其结果行数太多，需要花费大量的运算时间和高性能设
备的支持。
联结的特定语法和过时语法
之前我们学习的内联结和外联结的语法都符合标准SQL的规定，可
以在所有DBMS中执行，因此大家可以放心使用。但是如果大家之后从
事系统开发工作的话，一定会碰到需要阅读他人写的代码并进行维护的情
况，而那些使用特定和过时语法的程序就会成为我们的麻烦。
SQL是一门特定语法及过时语法非常多的语言，虽然之前本书中也
多次提及，但联结是其中特定语法的部分，现在还有不少年长的程序员和
系统工程师仍在使用这些特定的语法。
例如，将本节最初介绍的内联结的SELECT语句（代码清单7-9）替
换为过时语法的结果如下所示（代码清单7-16）。
● 250 第7章 集合运算
代码清单7-16 使用过时语法的内联结（结果与代码清单7-9相同）
SELECT SP.shop_id, SP.shop_name, SP.product_id, P.product_name, 
P.sale_price
FROM ShopProduct SP, Product P
WHERE SP.product_id = P.product_id
AND SP.shop_id = '000A';
表示下一行接续本行，只是由于版面所限而换行。
这样的书写方式所得到的结果与标准语法完全相同，并且这样的语法
可以在所有的DBMS中执行，并不能算是特定的语法，只是过时了而已。
但是，由于这样的语法不仅过时，而且还存在很多其他的问题，因此
不推荐大家使用，理由主要有以下三点。
第一，使用这样的语法无法马上判断出到底是内联结还是外联结（又
或者是其他种类的联结）。
第二，由于联结条件都写在WHERE子句之中，因此无法在短时间内
分辨出哪部分是联结条件，哪部分是用来选取记录的限制条件。
第三，我们不知道这样的语法到底还能使用多久。每个DBMS的开
发者都会考虑放弃过时的语法，转而支持新的语法。虽然并不是马上就不
能使用了，但那一天总会到来的。
虽然这么说，但是现在使用这些过时语法编写的程序还有很多，到目
前为止还都能正常执行。我想大家很可能会碰到这样的代码，因此还是希
望大家能够了解这些知识。
法则7-7
对于联结的过时语法和特定语法，虽然不建议使用，但还是希望大家能够读懂。
7-2 联结（以列为单位对表进行联结） 251 ●
专 栏
关系除法
本章中我们学习了以下4个集合运算符。
● UNION（并集）
● EXCEPT（差集）
● INTERSECT（交集）
● CROSS JOIN（笛卡儿积）
虽然交集是一种独立的集合运算，但实际上它也是“只包含公共部分的特殊
UNION”。剩下的3个在四则运算中也有对应的运算。但是，除法运算还没有介绍。
难道集合运算中没有除法吗？当然不是，除法运算是存在的。集合运算中的
KEYWORD 除法通常称为关系除法。关系是数学领域中对表或者视图的称谓，但是并没有定
●关系除法 义像UNION或者EXCEPT这样专用的运算符。如果要定义，估计应该是DIVIDE
（除）吧。但截至目前并没有DBMS使用这样的运算符。
为什么只有除法运算不使用运算符（只有除法）对被除数进行运算呢？其中的
理由有点复杂，还是让我们先来介绍一下“表的除法”具体是一种什么样的运算吧。
我们使用表7-A和表7-B两张表作为示例用表。
表7-A Skills（技术）表：关系除法中的除数
skill
Oracle
UNIX
Java
表7-B EmpSkills（员工技术）表：关系除法中的被除数
emp skill
相田 Oracle
相田 UNIX
相田 Java
相田 C#
神崎 Oracle
神崎 UNIX
神崎 Java
平井 UNIX
平井 Oracle
平井 PHP
平井 Perl
平井 C++
若田部 Perl
渡来 Oracle
● 252 第7章 集合运算
创建上述两张表并向其中插入数据的SQL语句请参考代码清单7-A。
代码清单7-A 创建Skills/EmpSkills表并插入数据
-- DDL：创建表
CREATE TABLE Skills
(skill VARCHAR(32),
PRIMARY KEY(skill));
CREATE TABLE EmpSkills
(emp VARCHAR(32),
skill VARCHAR(32),
PRIMARY KEY(emp, skill));
SQL Server PostgreSQL
-- DML：插入数据
BEGIN TRANSACTION; ①
INSERT INTO Skills VALUES('Oracle');
INSERT INTO Skills VALUES('UNIX');
INSERT INTO Skills VALUES('Java');
INSERT INTO EmpSkills VALUES('相田', 'Oracle');
INSERT INTO EmpSkills VALUES('相田', 'UNIX');
INSERT INTO EmpSkills VALUES('相田', 'Java');
INSERT INTO EmpSkills VALUES('相田', 'C#');
INSERT INTO EmpSkills VALUES('神崎', 'Oracle');
INSERT INTO EmpSkills VALUES('神崎', 'UNIX');
INSERT INTO EmpSkills VALUES('神崎', 'Java');
INSERT INTO EmpSkills VALUES('平井', 'UNIX');
INSERT INTO EmpSkills VALUES('平井', 'Oracle');
INSERT INTO EmpSkills VALUES('平井', 'PHP');
INSERT INTO EmpSkills VALUES('平井', 'Perl');
INSERT INTO EmpSkills VALUES('平井', 'C++');
INSERT INTO EmpSkills VALUES('若田部', 'Perl');
INSERT INTO EmpSkills VALUES('渡来', 'Oracle');
COMMIT;
特定的SQL
不同的DBMS的事务处理的语法也不尽相同。代码清单7-A中的DML语
句在MySQL中执行时，需要将①部分更改为“START TRANSACTION;”，在
Oracle和DB2中执行时，无需用到①的部分（请删除）。
详细内容请大家参考4-4节中的“创建事务”。
EmpSkills表中保存了某个系统公司员工所掌握的技术信息。例如，从该
表中我们可以了解到相田掌握了Oracle、UNIX、Java、C#这4种技术。
下面我们来思考一下如何从该表中选取出掌握了Skills表中所有3个领域的技
术的员工吧（代码清单7-B）。
7-2 联结（以列为单位对表进行联结） 253 ●
代码清单7-B 选取出掌握所有3个领域的技术的员工
SELECT DISTINCT emp
FROM EmpSkills ES1
WHERE NOT EXISTS
(SELECT skill
FROM Skills
EXCEPT
SELECT skill
FROM EmpSkills ES2
WHERE EP1.emp = ES2.emp);
这样我们就得到了包含相田和神崎2人的结果。虽然平井也掌握了Orcale和
UNIX，但很可惜他不会使用Java，因此没有选取出来。
执行结果（关系除法中的商）
emp
------
神崎
相田
这样的结果满足了除法运算的基本规则。肯定有读者会产生这样的疑问：“到
底上述运算中什么地方是除法运算呢？”实际上这和数值的除法既相似又有所不
同，大家从与除法相对的乘法运算的角度去思考就能得到答案了。
除法和乘法是相辅相成的关系，除法运算的结果（商）乘以除数就能得到除
法运算前的被除数了。例如对于20÷4 = 5来说，就是5(商)×4(除数) = 20(被
除数)（图7-A）。
关系除法中这样的规则也是成立的。通过商和除数相乘，也就是交叉联结，
注A 就能够得到作为被除数的集合了A 。
虽然不能恢复成完整的被除数，
图7-A 除法运算和乘法运算相辅相成的关系图
但是这里我们也不再追究了。
除法运算 乘法运算
20 ÷ 4 ＝ 5 5 × 4 ＝ 20
商
除数
被除数
如上所述，除法运算是集合运算中最复杂的运算，但是其在实际业务中的应用十
分广泛，因此希望大家能在达到中级以上水平时掌握其使用方法。此外，想要详细了
解SQL中除法运算实现方法的读者，可以参考拙著《达人に学ぶSQL彻底指南书》
(翔泳社)中的1-4节和1-7节。
● 254 第7章 集合运算
练习题
7.1 请说出下述SELECT语句的结果。
-- 使用本章中的Product表
SELECT *
FROM Product
UNION
SELECT *
FROM Product
INTERSECT
SELECT *
FROM Product
ORDER BY product_id;
7.2 7-2节的代码清单7-11中列举的外联结的结果中，高压锅和圆珠笔2条
记录的商店编号（shop_id）和商店名称（shop_name）都是NULL。请使
用字符串“不确定”替换其中的NULL。期望结果如下所示。
执行结果
shop_id | shop_name | product_id | product_name | sale_price
---------+----------+----------+-----------+-----------
000A | 东京 | 0002 | 打孔器 | 500
000A | 东京 | 0003 | 运动T恤 | 4000
000A | 东京 | 0001 | T恤衫 | 1000
000B | 名古屋 | 0006 | 叉子 | 500
000B | 名古屋 | 0002 | 打孔器 | 500
000B | 名古屋 | 0003 | 运动T恤 | 4000
000B | 名古屋 | 0004 | 菜刀 | 3000
000B | 名古屋 | 0007 | 擦菜板 | 880
000C | 大阪 | 0006 | 叉子 | 500
000C | 大阪 | 0007 | 擦菜板 | 880
000C | 大阪 | 0003 | 运动T恤 | 4000
000C | 大阪 | 0004 | 菜刀 | 3000
000D | 福冈 | 0001 | T恤衫 | 1000
不确定 | 不确定 | 0005 | 高压锅 | 6800
不确定 | 不确定 | 0008 | 圆珠笔 | 100
将商店编号和商店名称输出为“不确定”
7-2 联结（以列为单位对表进行联结） 255 ●
第8章 SQL 高级处理
窗口函数
GROUPING运算符
本章重点
本章将要学习的是SQL中的高级聚合处理。即使是“高级处理”，说到底
也还是在SQL中能够执行的处理。从用户的角度来说，就是那些对数值进行排序，
计算销售总额等我们熟悉的处理。
和自然语言一样，SQL语言也会随着时间而不断变化，现在每隔几年就会