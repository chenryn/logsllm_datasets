### Weight Distribution and Compact Certificate Size

To evaluate the size of the compact certificate when the distribution of weights is non-uniform, we generated several skewed distributions based on a skew parameter \( s \). The chosen skew distribution was designed to be easily modeled and understood, with the primary goal of illustrating the effect of skew on certificate size, rather than modeling any real-world distribution. Each skewed distribution consisted of 1 million attestors. The first attestor had a weight of \( 2^{44} \), and the weight of each subsequent attestor was multiplied by \( 1 - 10^{-s} \) (rounded up to ensure that all 1 million attestors have non-zero weight).

**Figure 7** shows the results. With extremely skewed distributions, the number of distinct reveals (i.e., \( |T| \)) is low because the same attestor is chosen multiple times but appears only once in the resulting certificate (Section IV-A, Step 6). For example, at \( s = 1 \), there are only 29 distinct reveals even though \( \text{numReveals} = 129 \). As seen from the graph, at extreme skew levels (e.g., \( s \leq 2 \)), the naive approach of sending the highest-weight signatures is more efficient than using a compact certificate. For instance, with \( s = 2 \), signatures from the top 69 attestors account for half of the total weight.

**Figure 7.** Size of compact certificate (bytes) and number of distinct reveals as a function of the skew of the weight distribution, for \( \text{signedWeight} = \text{totalWeight} = 2 \times \text{provenWeight} \).

At moderate skew levels (e.g., \( s \geq 3 \)), attestors are no longer chosen multiple times, but the certificate size remains manageable. 

### Challenges in Decentralized Settings

In a decentralized setting, several challenges arise due to resource constraints, adversarial nodes, and fault tolerance. We use the term "node" to refer to a computer participating in the decentralized protocol. In Algorand's deployment, a special type of node called a "relay" supports the protocol by relaying messages among participants. A public directory of known relay nodes allows any participant to join the Algorand network. Non-relay nodes typically connect to several relay nodes but do not connect directly to one another. We assume that the underlying blockchain system (Algorand) provides a consensus mechanism, which ensures reliability.

#### Resource Constraints: Collecting Signatures

The first challenge in our decentralized setting is deciding which nodes will form compact certificates. Constructing a compact certificate requires access to all signatures from attestors, even though the resulting certificate is much smaller. This means that any node forming a compact certificate must receive and store many messages, which can be costly if the number of attestors is high.

To address this, relay nodes are responsible for collecting all signatures and relaying them to other relay nodes, ensuring that all relay nodes have all the signatures. Non-relay nodes send their signatures to relay nodes but do not receive signatures from other nodes. Each node in the system (both relay and non-relay) chooses several relay nodes to which it will send its messages. For relay nodes, this forms a network where signatures propagate in relatively few hops. For non-relay nodes, this ensures that their signatures are quickly propagated across relay nodes, even if some relay nodes are faulty.

It is crucial to carefully manage the timing of signature transmission. All attestors are likely to produce signatures simultaneously (e.g., when the next candidate block becomes available). To avoid overwhelming the system with a spike in messages, we de-synchronize the transmission of signatures by randomizing the time at which signatures are sent. Specifically, we use the round number of the latest block as a proxy for time and designate a window (e.g., the N/2 rounds after a multiple-of-N block is decided) for transmitting signatures. When an attestor signs a message, the node chooses a pseudorandom offset within the window for sending the signature. Relay nodes immediately relay new, previously unseen signatures, while duplicates are not relayed.

A significant cost of the compact certificate protocol lies in the verification of signatures before constructing the compact certificate. While it might seem optimal to avoid eager verification, this can lead to issues. To prevent an adversary from flooding the network with invalid signatures, relays would need to verify signatures once they receive two or more from the same attestor. This optimization makes it difficult for a relay node to know when it is ready to build a compact certificate, leading to potential restarts. Therefore, we chose to avoid this optimization to achieve more predictable resource consumption.

#### Adversarial Nodes: When to Create a Certificate?

In a decentralized setting, there is a tension regarding when to form a compact certificate. On one hand, it is desirable to form a compact certificate quickly to reduce memory usage and allow attestors to stop re-transmitting their signatures. On the other hand, waiting for more signatures to arrive enables a smaller compact certificate, as a higher signed weight implies fewer reveals (Section V-B).

This tension is exacerbated by the presence of adversarial nodes. Any relay node should be able to create a compact certificate, but an adversarial node could create a certificate with the lowest acceptable signed weight, leading to a larger-than-necessary certificate.

To address this, we implement a decaying threshold for the signed weight of an acceptable compact certificate. The threshold decays linearly over time, measured by the round number of the latest block. The creation of the compact certificate can start at the end of the signature transmission window. At that time, the threshold is initialized to the total weight, decaying towards the proven weight. Nodes will accept a compact certificate only if its signed weight is at least the current threshold value. The decay rate should be gradual enough to allow honest nodes to propose the best compact certificate while still allowing the system to make progress.

#### Fault Tolerance: Retransmitting Signatures

It is important that compact certificates can be formed even if network or node failures occur during signature collection, as long as a sufficient set of nodes comes back online. To this end, nodes must durably store their attestors' signatures until they see that a corresponding compact certificate is durably stored by the system. In a blockchain setting, storing the compact certificate on the blockchain itself ensures durability, making it safe to delete the input signatures.

Nodes periodically retransmit their stored signatures, so that a compact certificate can be formed even if the signatures were lost initially. Each node periodically sends out all its stored signatures to the relays to which it is connected. Relay nodes resend known signatures on their own schedule, while new signatures are immediately relayed to ensure timely propagation.

In the common case, network-level retransmission (e.g., TCP) should ensure reliable message propagation, so the above retransmission plan should not start until after the initial transmission time window plus the decay time. This ensures that, in the common case, signatures for a compact certificate are sent at most once by each node to each of its connected relays.

### Acknowledgments

We thank Alessandro Chiesa for clarifying the results of [10], Chris Peikert for a careful reading of our proof, Fraser Brown for editorial feedback, and Max Justicz for suggestions on and review of our implementation. We also thank Sebastian Faust and the anonymous referees of both the real and the shadow program committees of IEEE S&P for help improving our presentation. The work of G.V. was performed while the author was at Algorand.

### References

[References listed here as per the original text]

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the original text.