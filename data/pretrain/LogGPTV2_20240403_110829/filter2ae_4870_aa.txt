# 陷阱标识检查
陷阱标志(TF)位于[EFLAGS](https://en.wikipedia.org/wiki/FLAGS_register
"EFLAGS")寄存器内。如果TF设置为1，CPU将在每个指令执行后产生INT 01h或‘单步’异常。以下反调试示例基于TF设置和异常调用检查：
    BOOL isDebugged = TRUE;
    __try
    {
        __asm
        {
            pushfd
            or dword ptr[esp], 0x100 // set the Trap Flag 
            popfd                    // Load the value into EFLAGS register
            nop
        }
    }
    __except (EXCEPTION_EXECUTE_HANDLER)
    {
        // If an exception has been raised – debugger is not present
        isDebugged = FALSE;
    }
    if (isDebugged)
    {
        std::cout  uf kernelbase!CheckRemotedebuggerPresent
    KERNELBASE!CheckRemoteDebuggerPresent:
    ...
    75207a24 6a00            push    0
    75207a26 6a04            push    4
    75207a28 8d45fc          lea     eax,[ebp-4]
    75207a2b 50              push    eax
    75207a2c 6a07            push    7
    75207a2e ff7508          push    dword ptr [ebp+8]
    75207a31 ff151c602775    call    dword ptr [KERNELBASE!_imp__NtQueryInformationProcess (7527601c)]
    75207a37 85c0            test    eax,eax
    75207a39 0f88607e0100    js      KERNELBASE!CheckRemoteDebuggerPresent+0x2b (7521f89f)
    ...
如果我们看一下NtQueryInformationProcess文档，这个汇编程序列表将向我们显示CheckRemoteDebuggerPresent函数被分配了DebugPort值，因为ProcessInformationClass参数值(第二个)是7。以下是基于调用NtQueryInformationProcess的反调试代码示例：
    typedef NTSTATUS(NTAPI *pfnNtQueryInformationProcess)(
        _In_      HANDLE           ProcessHandle,
        _In_      UINT             ProcessInformationClass,
        _Out_     PVOID            ProcessInformation,
        _In_      ULONG            ProcessInformationLength,
        _Out_opt_ PULONG           ReturnLength
        );
    const UINT ProcessDebugPort = 7;
    int main(int argc, char *argv[])
    {
        pfnNtQueryInformationProcess NtQueryInformationProcess = NULL;
        NTSTATUS status;
        DWORD isDebuggerPresent = 0;
        HMODULE hNtDll = LoadLibrary(TEXT("ntdll.dll"));
        if (NULL != hNtDll)
        {
            NtQueryInformationProcess = (pfnNtQueryInformationProcess)GetProcAddress(hNtDll, "NtQueryInformationProcess");
            if (NULL != NtQueryInformationProcess)
            {
                status = NtQueryInformationProcess(
                    GetCurrentProcess(),
                    ProcessDebugPort,
                    &isDebuggerPresent,
                    sizeof(DWORD),
                    NULL);
                if (status == 0x00000000 && isDebuggerPresent != 0)
                {
                    std::cout 
    #include "mhook.h"
    typedef NTSTATUS(NTAPI *pfnNtQueryInformationProcess)(
        _In_      HANDLE           ProcessHandle,
        _In_      UINT             ProcessInformationClass,
        _Out_     PVOID            ProcessInformation,
        _In_      ULONG            ProcessInformationLength,
        _Out_opt_ PULONG           ReturnLength
        );
    const UINT ProcessDebugPort = 7;
    pfnNtQueryInformationProcess g_origNtQueryInformationProcess = NULL;
    NTSTATUS NTAPI HookNtQueryInformationProcess(
        _In_      HANDLE           ProcessHandle,
        _In_      UINT             ProcessInformationClass,
        _Out_     PVOID            ProcessInformation,
        _In_      ULONG            ProcessInformationLength,
        _Out_opt_ PULONG           ReturnLength
        )
    {
        NTSTATUS status = g_origNtQueryInformationProcess(
            ProcessHandle,
            ProcessInformationClass,
            ProcessInformation,
            ProcessInformationLength,
            ReturnLength);
        if (status == 0x00000000 && ProcessInformationClass == ProcessDebugPort)
        {
            *((PDWORD_PTR)ProcessInformation) = 0;
        }
        return status;
    }
    DWORD SetupHook(PVOID pvContext)
    {
        HMODULE hNtDll = LoadLibrary(TEXT("ntdll.dll"));
        if (NULL != hNtDll)
        {
            g_origNtQueryInformationProcess = (pfnNtQueryInformationProcess)GetProcAddress(hNtDll, "NtQueryInformationProcess");
            if (NULL != g_origNtQueryInformationProcess)
            {
                Mhook_SetHook((PVOID*)&g_origNtQueryInformationProcess, HookNtQueryInformationProcess);
            }
        }
        return 0;
    }
    BOOL WINAPI DllMain(HINSTANCE hInstDLL, DWORD fdwReason, LPVOID lpvReserved)
    {
        switch (fdwReason)
        {
        case DLL_PROCESS_ATTACH:
            DisableThreadLibraryCalls(hInstDLL);
            CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)SetupHook, NULL, NULL, NULL);
            Sleep(20);
        case DLL_PROCESS_DETACH:
            if (NULL != g_origNtQueryInformationProcess)
            {
                Mhook_Unhook((PVOID*)&g_origNtQueryInformationProcess);
            }
            break;
        }
        return TRUE;
    }
# 基于NtQueryInformationProcess的其它反调试保护技术
从NtQueryInformationProcess函数中提供的信息，我们可以知道有很多调试器检测技术：
    1.ProcessDebugPort 0x07，已在上面讨论过。
    2.ProcessDebugObjectHandle 0x1E
    3.ProcessDebugFlags 0x1F
    4.ProcessBasicInformation 0x00
    ProcessDebugObjectHandle
我们将详细考虑第2条和第4条
## ProcessDebugObjectHandle
从WindowsXP开始，将为调试的进程创建一个“调试对象”。以下就是检查当前进程调试对象的例子：
    status = NtQueryInformationProcess(
                GetCurrentProcess(),
                ProcessDebugObjectHandle,
                &hProcessDebugObject,
                sizeof(HANDLE),
                NULL);
    if (0x00000000 == status && NULL != hProcessDebugObject)
    {
        std::cout << "Stop debugging program!" << std::endl;
        exit(-1);
    }
如果存在调试对象，则正在调试该进程。
## ProcessDebugFlags
当检查该标识时，它会返回到EPROCESS内核结构的NoDebugInherit位的反转值。如果NtQueryInformationProcess函数的返回值为0，则正在调试该进程。以下是此类反调试检查的示例：
    status = NtQueryInformationProcess(
        GetCurrentProcess(),
        ProcessDebugObjectHandle,
        &debugFlags,
        sizeof(ULONG),
        NULL);
    if (0x00000000 == status && NULL != debugFlags)
    {
        std::cout << "Stop debugging program!" << std::endl;
        exit(-1);
    }
## ProcessBasicInformation
当使用ProcessBasicInformation标志调用NtQueryInformationProcess函数时，将返回PROCESS_BASIC_INGISION结构：
    typedef struct _PROCESS_BASIC_INFORMATION {
        NTSTATUS ExitStatus;
        PVOID PebBaseAddress;
        ULONG_PTR AffinityMask;
        KPRIORITY BasePriority;
        HANDLE UniqueProcessId;
        HANDLE InheritedFromUniqueProcessId;
    } PROCESS_BASIC_INFORMATION, *PPROCESS_BASIC_INFORMATION;
该结构中最有趣的是InheritedFromUniqueProcessId字段。在这里，我们需要获取父进程的名称并将其与流行调试器的名称进行比较，下是这种反调试检查的示例：
    std::wstring GetProcessNameById(DWORD pid)
    {
        HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if (hProcessSnap == INVALID_HANDLE_VALUE)
        {
            return 0;
        }
        PROCESSENTRY32 pe32;
        pe32.dwSize = sizeof(PROCESSENTRY32);
        std::wstring processName = L"";
        if (!Process32First(hProcessSnap, &pe32))
        {
            CloseHandle(hProcessSnap);
            return processName;
        }
        do
        {