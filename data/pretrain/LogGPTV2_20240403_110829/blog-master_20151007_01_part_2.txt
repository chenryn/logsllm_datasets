                 }    
                 pg_usleep(1000000L);    
         }    
 }    
```    
禁止Aurora实例启动checkpointer进程    
vi src/backend/postmaster/checkpointer.c    
```    
 #include "postmaster/postmaster.h"    
 bool  aurora;    
   //////    
 /*    
  * Main entry point for checkpointer process    
  *    
  * This is invoked from AuxiliaryProcessMain, which has already created the    
  * basic execution environment, but not enabled signals yet.    
  */    
 void    
 CheckpointerMain(void)    
 {    
   //////    
         /*    
          * Loop forever    
          */    
         for (;;)    
         {    
                 bool            do_checkpoint = false;    
                 int                     flags = 0;    
                 pg_time_t       now;    
                 int                     elapsed_secs;    
                 int                     cur_timeout;    
                 int                     rc;    
                 pg_usleep(100000L);    
                 /* Clear any already-pending wakeups */    
                 if (!aurora)  ResetLatch(&MyProc->procLatch);    
                 /*    
                  * Process any requests or signals received recently.    
                  */    
                 if (!aurora) AbsorbFsyncRequests();    
                 if (!aurora && got_SIGHUP)    
                 {    
                         got_SIGHUP = false;    
                         ProcessConfigFile(PGC_SIGHUP);    
                         /*    
                          * Checkpointer is the last process to shut down, so we ask it to    
                          * hold the keys for a range of other tasks required most of which    
                          * have nothing to do with checkpointing at all.    
                          *    
                          * For various reasons, some config values can change dynamically    
                          * so the primary copy of them is held in shared memory to make    
                          * sure all backends see the same value.  We make Checkpointer    
                          * responsible for updating the shared memory copy if the    
                          * parameter setting changes because of SIGHUP.    
                          */    
                         UpdateSharedMemoryConfig();    
                 }    
                 if (!aurora && checkpoint_requested)    
                 {    
                         checkpoint_requested = false;    
                         do_checkpoint = true;    
                         BgWriterStats.m_requested_checkpoints++;    
                 }    
                 if (!aurora && shutdown_requested)    
                 {    
                         /*    
                          * From here on, elog(ERROR) should end with exit(1), not send    
                          * control back to the sigsetjmp block above    
                          */    
                         ExitOnAnyError = true;    
                         /* Close down the database */    
                         ShutdownXLOG(0, 0);    
                         /* Normal exit from the checkpointer is here */    
                         proc_exit(0);           /* done */    
                 }    
                 /*    
                  * Force a checkpoint if too much time has elapsed since the last one.    
                  * Note that we count a timed checkpoint in stats only when this    
                  * occurs without an external request, but we set the CAUSE_TIME flag    
                  * bit even if there is also an external request.    
                  */    
                 now = (pg_time_t) time(NULL);    
                 elapsed_secs = now - last_checkpoint_time;    
                 if (!aurora && elapsed_secs >= CheckPointTimeout)    
                 {    
                         if (!do_checkpoint)    
                                 BgWriterStats.m_timed_checkpoints++;    
                         do_checkpoint = true;    
                         flags |= CHECKPOINT_CAUSE_TIME;    
                 }    
                 /*    
                  * Do a checkpoint if requested.    
                  */    
                 if (!aurora && do_checkpoint)    
                 {    
                         bool            ckpt_performed = false;    
                         bool            do_restartpoint;    
                         /* use volatile pointer to prevent code rearrangement */    
                         volatile CheckpointerShmemStruct *cps = CheckpointerShmem;    
                         /*    
                          * Check if we should perform a checkpoint or a restartpoint. As a    
                          * side-effect, RecoveryInProgress() initializes TimeLineID if    
                          * it's not set yet.    
                          */    
                         do_restartpoint = RecoveryInProgress();    
                         /*    
                          * Atomically fetch the request flags to figure out what kind of a    
                          * checkpoint we should perform, and increase the started-counter    
                          * to acknowledge that we've started a new checkpoint.    
                          */    
                         SpinLockAcquire(&cps->ckpt_lck);    
                         flags |= cps->ckpt_flags;    
                         cps->ckpt_flags = 0;    
                         cps->ckpt_started++;    
                         SpinLockRelease(&cps->ckpt_lck);    
                         /*    
                          * The end-of-recovery checkpoint is a real checkpoint that's    
                          * performed while we're still in recovery.    
                          */    
                         if (flags & CHECKPOINT_END_OF_RECOVERY)    
                                 do_restartpoint = false;    
   //////    
                         ckpt_active = false;    
                 }    
                 /* Check for archive_timeout and switch xlog files if necessary. */    
                 if (!aurora) CheckArchiveTimeout();    
                 /*    
                  * Send off activity statistics to the stats collector.  (The reason    
                  * why we re-use bgwriter-related code for this is that the bgwriter    
                  * and checkpointer used to be just one process.  It's probably not    
                  * worth the trouble to split the stats support into two independent    
                  * stats message types.)    
                  */    
                 if (!aurora) pgstat_send_bgwriter();    
                 /*    
                  * Sleep until we are signaled or it's time for another checkpoint or    
                  * xlog file switch.    
                  */    
                 now = (pg_time_t) time(NULL);    
                 elapsed_secs = now - last_checkpoint_time;    
                 if (elapsed_secs >= CheckPointTimeout)    
                         continue;                       /* no sleep for us ... */    
                 cur_timeout = CheckPointTimeout - elapsed_secs;    
                 if (!aurora && XLogArchiveTimeout > 0 && !RecoveryInProgress())    
                 {    
                         elapsed_secs = now - last_xlog_switch_time;    
                         if (elapsed_secs >= XLogArchiveTimeout)    
                                 continue;               /* no sleep for us ... */    
                         cur_timeout = Min(cur_timeout, XLogArchiveTimeout - elapsed_secs);    
                 }    
                 if (!aurora) rc = WaitLatch(&MyProc->procLatch,    
                                            WL_LATCH_SET | WL_TIMEOUT | WL_POSTMASTER_DEATH,    
                                            cur_timeout * 1000L /* convert to ms */ );    
                 /*    
                  * Emergency bailout if postmaster has died.  This is to avoid the    
                  * necessity for manual cleanup of all postmaster children.    
                  */    
                 if (rc & WL_POSTMASTER_DEATH)    
                         exit(1);    
         }    
 }    
   //////    
 /* SIGINT: set flag to run a normal checkpoint right away */    
 static void    
 ReqCheckpointHandler(SIGNAL_ARGS)    
 {    
         if (aurora)    
            return;    
         int                     save_errno = errno;    
         checkpoint_requested = true;    
         if (MyProc)    
                 SetLatch(&MyProc->procLatch);    
         errno = save_errno;    
 }    
   //////    
 /*    
  * AbsorbFsyncRequests    
  *              Retrieve queued fsync requests and pass them to local smgr.    
  *    
  * This is exported because it must be called during CreateCheckPoint;    
  * we have to be sure we have accepted all pending requests just before    
  * we start fsync'ing.  Since CreateCheckPoint sometimes runs in    
  * non-checkpointer processes, do nothing if not checkpointer.    
  */    
 void    
 AbsorbFsyncRequests(void)    
 {    
         CheckpointerRequest *requests = NULL;    
         CheckpointerRequest *request;    
         int                     n;    
         if (!AmCheckpointerProcess() || aurora)    
                 return;    
   //////    
```    
禁止Aurora实例手工调用checkpoint命令    
vi src/backend/tcop/utility.c    
```    
 #include "postmaster/postmaster.h"    
 bool  aurora;    
   //////    
 void    
 standard_ProcessUtility(Node *parsetree,    
                                                 const char *queryString,    
                                                 ProcessUtilityContext context,    
                                                 ParamListInfo params,    
                                                 DestReceiver *dest,    
                                                 char *completionTag)    
 {    
   //////    
                 case T_CheckPointStmt:    
                    if (!superuser() || aurora)    
                                 ereport(ERROR,    
                                                 (errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),    
                                                  errmsg("must be superuser to do CHECKPOINT")));    
```    
改完上面的代码，重新编译一下，现在接近一个DEMO了。现在Aurora实例不会更新控制文件，不会写数据文件，不会执行checkpoint，是我们想要的结果。    
PS：主库bgwriter, backend process, checkpoint刷脏页时，判断对应脏页是否已在备库APPLY，这部分DEMO里面没有做。    
### DEMO验证  
启动只读实例时，加一个参数aurora=true，表示启动Aurora实例。    
```    
pg_ctl start -o "-c log_directory=pg_log1922 -c port=1922 -c aurora=true"    
```    
要产品化，还有很多细节需要考虑，这是一个DEMO，但是已经表明了PostgreSQL是可以的。阿里云RDS的小伙伴们加油！    
## 参考    
1、https://aws.amazon.com/cn/rds/aurora/    
2、src/backend/access/transam/xlog.c    
```    
 /*    
  * Open the WAL segment containing WAL position 'RecPtr'.    
  *    
  * The segment can be fetched via restore_command, or via walreceiver having    
  * streamed the record, or it can already be present in pg_xlog. Checking    
  * pg_xlog is mainly for crash recovery, but it will be polled in standby mode    
  * too, in case someone copies a new segment directly to pg_xlog. That is not    
  * documented or recommended, though.    
  *    
  * If 'fetching_ckpt' is true, we're fetching a checkpoint record, and should    
  * prepare to read WAL starting from RedoStartLSN after this.    
  *    
  * 'RecPtr' might not point to the beginning of the record we're interested    
  * in, it might also point to the page or segment header. In that case,    
  * 'tliRecPtr' is the position of the WAL record we're interested in. It is    
  * used to decide which timeline to stream the requested WAL from.    
  *    
  * If the record is not immediately available, the function returns false    
  * if we're not in standby mode. In standby mode, waits for it to become    
  * available.    
  *    
  * When the requested record becomes available, the function opens the file    
  * containing it (if not open already), and returns true. When end of standby    
  * mode is triggered by the user, and there is no more WAL available, returns    
  * false.    
  */    
 static bool    
 WaitForWALToBecomeAvailable(XLogRecPtr RecPtr, bool randAccess,    
                                                         bool fetching_ckpt, XLogRecPtr tliRecPtr)    
 {    
   //////    
         static pg_time_t last_fail_time = 0;    
         pg_time_t       now;    
         /*-------    
          * Standby mode is implemented by a state machine:    
          *    
          * 1. Read from either archive or pg_xlog (XLOG_FROM_ARCHIVE), or just    
          *        pg_xlog (XLOG_FROM_XLOG)    
          * 2. Check trigger file    
          * 3. Read from primary server via walreceiver (XLOG_FROM_STREAM)    
          * 4. Rescan timelines    
          * 5. Sleep 5 seconds, and loop back to 1.    
          *    
          * Failure to read from the current source advances the state machine to    
          * the next state.    
          *    
          * 'currentSource' indicates the current state. There are no currentSource    
          * values for "check trigger", "rescan timelines", and "sleep" states,    
          * those actions are taken when reading from the previous source fails, as    
          * part of advancing to the next state.    
          *-------    
          */    
```    
3、src/backend/storage/buffer/bufmgr.c    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")