上述代码还可以像下面这样写：
执行示例
```ruby
>> %w(42 39 56).map(&:to_i)
=> [42, 39, 56]
```
按照类名排序的程序，也可以写成：
执行示例
```ruby
>> [Integer, String, Array, Hash, File, IO].sort_by(&:name)
=> [Array, File, Hash, IO, Integer, String]
```
熟悉这样的写法可能需要一定的时间，但这种写法不仅干净利索，而且意图明确。
# Proc 的特征
虽然 `Proc` 对象可以作为匿名函数或方法使用，但它并不只是单纯的对象化。
```ruby
def counter
  c = 0         # 初始化计数器
  Proc.new do   # 每调用 1 次 call 方法，计数器加1
    c += 1      # 返回加 1 后的 Proc 对象
  end
end
# 创建计数器 c1 并计数
c1 = counter
p c1.call       #=> 1
p c1.call       #=> 2
p c1.call       #=> 3
# 创建计数器 c2 并计数
c2 = counter    # 创建计数器c2
p c2.call       #=> 1
p c2.call       #=> 2
# 再次用 c1 计数
p c1.call       #=> 4
```
第 1 行到第 6 行为 `counter` 方法的定义。该方法首先把作为计数器的本地变量 `c` 初始化为 0。然后每调用 1 次 `Proc.call` 方法，就将计数器加 1，并返回该 `Proc` 对象。在第 9 行中，调用 `counter` 方法，将 `Proc` 对象赋值给 `c1`。可以看到，`c1` 调用 `call` 方法后，`proc` 对象引用的本地变量 `c` 开始计数了。在第 15 行中，以同样的方法创建新的计数器，之后计数器被重置。在最后的第 20 行中，再次调用最初创建的 `c1` 的 `call` 方法，计数器开始接着之前的结果计数。
通过这个例子我们可以看出，变量 `c1` 与变量 `c2` 引用的 `Proc` 对象，是分别保存、处理调用 `counter` 方法时初始化的本地变量的。与此同时，`Proc` 对象也会将处理内容、本地变量的作用域等定义块时的状态一起保存。
像 `Proc` 对象这样，将处理内容、变量等环境同时进行保存的对象，在编程语言中称为闭包（closure）。使用闭包后，程序就可以将处理内容和数据作为对象来操作。这和在类中描述处理本身、在实例中保存数据本质上是一样的，只是从写程序的角度来看，使用类的话当然也就意味着可以使用更多的功能。
就像刚才的计数器的例子那样，`Proc` 对象可被用来对少量代码实现的功能做对象化处理。另外，由于 Ruby 中大量使用了块，因此在有一定规模的程序开发中，我们就难免会使用到 `Proc` 对象。特别是像调用和传递带块的方法时的方法、通过闭包保存数据等功能，我们都需要透彻理解才行。
# Proc 类的实例方法
- `prc.call(args, ...)`
- `prc[args, ...]`
- `prc.yield(args, ...)`
- `prc.(args, ...)`
- `prc === arg`
    上述方法都执行 `Proc` 对象 prc。
    ```ruby
    prc = Proc.new{|a, b| a + b}
    p prc.call(1, 2)    #=> 3
    p prc[3, 4]         #=> 7
    p prc.yield(5, 6)   #=> 11
    p prc.(7, 8)        #=> 15
    p prc === [9, 10]   #=> 19
    ```
    由于受到语法的限制，通过 `===` 指定的参数只能为 1 个。大家一定要牢记这个方法会在 `Proc` 对象作为 `case` 语句的条件时使用。因此，在创建这样的 `Proc` 对象时，比较恰当的做法是，只接收一个参数，并返回 `true` 或者 `false`。
    下面的例子实现的是，从 1 到 100 的整数中，当值为 3 的倍数时输出 `Fizz`，5 的倍数时输出 `Buzz`，15 的倍数时输出 `Fizz Buzz`，除此以外的情况下则输出该值本身。
    ```ruby
    fizz = proc{|n| n % 3 == 0 }
    buzz = proc{|n| n % 5 == 0 }
    fizzbuzz = proc{|n| n % 3 == 0 && n % 5 == 0}
    (1..100).each do |i|
    case i
    when fizzbuzz then puts "Fizz Buzz"
    when fizz then puts "Fizz"
    when buzz then puts "Buzz"
    else puts i
    end
    end
    ```
- `prc.arity`
    返回作为 `call` 方法的参数的块变量的个数。以 `|*args|` 的形式指定块变量时，返回 -1。
    ```ruby
    prc0 = Proc.new{ nil }
    prc1 = Proc.new{|a| a }
    prc2 = Proc.new{|a, b| a + b }
    prc3 = Proc.new{|a, b, c| a + b +c }
    prcn = Proc.new{|*args| args }
    p prc0.arity    #=> 0
    p prc1.arity    #=> 1
    p prc2.arity    #=> 2
    p prc3.arity    #=> 3
    p prcn.arity    #=> -1
    ```
- `prc.parameters`
    返回关于块变量的详细信息。返回值为 [ 种类 , 变量名 ] 形式的数组的列表。
    符号	    | 意义
    - | -
    `:opt`	    | 可省略的变量
    `:req`	    | 必需的变量
    `:rest`	    | 以 *args 形式表示的变量
    `:key`	    | 关键字参数形式的变量
    `:keyrest`	| 以 **args 形式表示的变量
    `:block`	    | 块
    ```ruby
    prc0 = proc{ nil }
    prc1 = proc{|a| a }
    prc2 = lambda{|a, b| [a, b] }
    prc3 = lambda{|a, b=1, *c| [a, b, c] }
    prc4 = lambda{|a, &block| [a, block] }
    prc5 = lambda{|a: 1, **b| [a, b] }
    p prc0.parameters    #=> []
    p prc1.parameters    #=> [[:opt, :a]]
    p prc2.parameters    #=> [[:req, :a], [:req, :b]]
    p prc3.parameters    #=> [[:req, :a], [:opt, :b], [:rest, :c]]
    p prc4.parameters    #=> [[:req, :a], [:block, :block]]
    p prc5.parameters    #=> [[:key, :a], [:keyrest, :b]]
    ```
- `prc.lambda?`
    判断 prc 是否为通过 `lambda` 定义的方法。
    ```ruby
    prc1 = Proc.new{|a, b| a + b}
    p prc1.lambda?  #=> false
    prc2 = lambda{|a, b| a + b}
    p prc2.lambda?  #=> true
    ```
- `prc.source_location`
    返回定义 prc 的程序代码的位置。返回值为 [ 代码文件名 , 行编号 ] 形式的数组。prc 由扩展库等生成，当 Ruby 脚本不存在时返回 `nil`。
    ```
    prc0 = Proc.new{ nil }
    prc1 = Proc.new{|a| a }
    p prc0.source_location
    p prc1.source_location
    ```
    执行示例
    ```
    > ruby proc_source_location.rb
    ["proc_source_location.rb", 1]
    ["proc_source_location.rb", 2]
    ```