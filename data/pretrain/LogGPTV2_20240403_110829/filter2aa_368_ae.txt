a
ys
to
sanitize
the
BIOS
Data
Area
after
reading
user
input.
The
rst
one
in
v
olv
es
clearing
the
relev
an
t
memory
areas
af-
ter
usage
in
the
b
o
otloader
itself.
The
second
one
is
to
clear
those
same
areas
at
b
o
ot
time
in
the
k
ernel.
None
of
the
suggested
x
is
p
erfect
:
if
w
e
clear
the
BD
A
righ
t
after
the
b
o
otloader
has
completed
its
task,
hence
b
efore
the
k
ernel
is
loaded,
then
an
y
pre-b
o
ot
authen
tication
routine
implemen
ted
in
the
earliest
stages
of
the
k
ernel
itself
25
will
still
b
e
vulnerable
to
plain
text
passw
ords
leak
age.
On
the
other
hand,
if
w
e
clear
the
memory
in
the
k
ernel,
then
a
rogue
b
o
otloader
loaded
after
the
actual
b
o
otloader
(or
BIOS
routine),
but
b
efore
the
k
ernel,
could
still
retriev
e
the
passw
ords
from
memory
26
.
W
e
pro
vide
a
partial
x
for
GNU/Lin
ux
x86
(assuming
a
3GB/1GB
user-
land/k
erneland
split)
2.6
k
ernels
an
yw
a
y
,
that
will
zero
out
the
three
memory
areas
men
tioned
earlier
:
cf
gur
e
21.
Lik
ewise,
initializing
(or
cleaning)
the
BIOS
k
eyb
oard
buer
and
its
p
oin
ters
at
b
o
otloader
lev
el
is
a
matter
of
adding
a
few
lines
of
16b
assem
bly
:
cf
gur
e
22.
W
e
b
eliev
e
that
initializing
and
cleaning
should
b
e
done
in
the
soft
w
are
manipulating
the
BIOS
k
eyb
oard
buer,
b
eing
it
the
BIOS
itself,
the
b
o
otloader
or
the
k
ernel.
The
b
o
oting
sequence
in
x86
arc
hitecture
b
e-
ing
strictly
monopro
cess,
this
is
the
safest
w
a
y
to
a
v
oid
race
conditions
b
et
w
een
the
x
and
an
y
p
oten
tial
b
o
otloader
in
the
middle,
let
aside
patc
hing
of
the
initializing
or
cleaning
routine,
against
whic
h
w
e
are
not
a
w
are
of
an
y
p
ossible
denitiv
e
x.
6
Conclusion
In
the
presen
t
pap
er,
w
e
ha
v
e
detailed
a
new
class
of
vulnerabilit
y
af-
fecting
pre-b
o
ot
authen
tication
soft
w
are
:
man
y
pre-b
o
ot
authen
tication
soft
w
are
programmers
are
not
a
w
are
of
the
inner
w
orkings
of
the
BIOS
in
terruptions
they
use
in
their
pro
ducts,
whic
h
can
lead
them
to
wrongly
assume
the
BIOS
handles
the
k
eyb
oard
in
a
secure
w
a
y
b
y
itself.
In
fact,
w
e
ha
v
e
rstly
sho
wn
that
man
y
pre-b
o
ot
authen
tication
soft-
w
are
do
not
clean
the
BIOS
k
eyb
oard
buer
after
prompting
the
user
25
lik
e
tuxonice/susp
end2
hib
ernation
to
disk
k
ernel
patc
h.
26
in
other
w
ords,
there
is
a
race
condition
b
et
w
een
the
attac
k
and
the
x...
Fig.
21.
Suggested
Lin
ux
Kernel
Mo
dule
to
sanitize
the
BIOS
Data
Area.
for
a
passw
ord,
whic
h
leads
to
plain
text
passw
ord
leak
age
attac
ks.
W
e
exp
osed
an
attac
k
scenario
resulting
in
plain
text
passw
ord
leak
age
to
a
lo
cal
unprivileged
user
under
an
y
v
ersion
of
Microsoft
Windo
ws.
High
v
alue
protectiv
e
soft
w
are,
in
particular
the
v
ersion
of
Microsoft
Bitlo
c
k
er
using
the
latest
TPM
tec
hnology
ship
ed
with
Microsoft
Vista
Ultimate
Edition
are
kno
wn
to
b
e
vulnerable
to
this
attac
k.
Other
commercial
and
op
en
source
soft
w
are,
including
BIOS
R
OMs
ha
v
e
equally
b
een
pro
v
ed
vulnerable.
W
e
ha
v
e
lik
ewise
sho
wn
that
this
class
of
attac
k
is
practical
under
*nix
(GNU/Lin
ux,
*BSD
and
Solaris
userland
exploit
co
des
ha
v
e
b
een
pro
vided,
as
w
ell
as
a
k
ernel
land
Lin
ux
exploit)
assuming
the
at-
tac
k
er
has
enough
privileges,
t
ypically
ro
ot.
Secondly
,
w
e
ha
v
e
sho
wn
that
not
initializing
the
BIOS
k
eyb
oard
buer
allo
ws
an
attac
k
er
with
enough
privileges
to
write
to
the
Master
Bo
ot
Record
but
without
console
access
to
remotely
reb
o
ot
a
pre-b
o
ot
authen-
tication
soft
w
are
protected
computer
and
to
pass
custom
parameters
to
the
b
o
otloader,
resulting
in
privilege
escalation
or
further
p
enetration
of
other
Op
erating
Systems
hosted
on
the
same
computer.
This
b
o
otloader
in
the
middle
attac
k
fully
em
ulates
a
user
t
yping
on
a
k
eyb
oard,
ev
en
if
full
disk
encryption
is
enabled,
b
y
lling
the
BIOS
k
eyb
oard
buer,
thanks
to
a
rogue
b
o
otloader,
b
efore
the
b
o
otloader
attempts
to
retriev
e
user
input.
F
rom
a
b
o
otloader's
p
ersp
ectiv
e,
there
is
no
w
a
y
to
tell
if
the
Fig.
22.
Suggested
b
o
otloader
routine
to
sanitize
the
BIOS
Data
Area.
data
is
coming
from
a
rogue
b
o
otloader
or
from
a
gen
uine
k
eyb
oard.
By
com
bining
the
t
w
o
attac
ks,
w
e
ha
v
e
demonstrated
a
practical
full
securit
y-b
ypass
attac
k
scenario
against
pre-b
o
ot
authen
tication
soft
w
are.
Finally
,
w
e
ha
v
e
suggested
partial
xes,
at
b
o
otloader
and
k
ernel
lev-
els.
Those
patc
hes
are
quite
imp
erfect
since
they
fail
at
ensuring
the
atomicit
y
of
the
v
arious
buer
manipulations
:
initializing
and
reading
or
reading
and
cleaning
the
BIOS
k
eyb
oard
buer.
Therefore,
ev
en
if
the
early
b
o
otstraping
pro
cess
is
supp
osed
to
b
e
monopro
cess,
a
b
o
otloader
in
the
middle
attac
k
can
still
b
e
attempted
if
an
attac
k
er
is
ready
to
insert
his
co
de
during
the
normal
execution
of
the
actual
b
o
otloader
(af-
ter
buer
has
b
een
initialized,
but
b
efore
k
eystrok
es
ha
v
e
b
een
read),
or
righ
t
after
it
(once
the
buer
is
lled,
but
b
efore
it
is
later
cleaned).
W
e
b
eliev
e
this
issue
cannot
b
e
addressed
b
y
soft
w
are
only
means
and
w
ould
require
additional
in
tegrit
y
c
hec
ks
implemen
ted
at
BIOS
lev
el
to
ensure
the
Master
Bo
ot
Record
has
not
b
een
tamp
ered
with.
A
dditionally
,
w
e
ha
v
e
limited
the
scop
e
of
this
pap
er
to
passw
ord
based
authen
tication
and
exploitation
without
ph
ysical
access
solely
.
Biomet-
rics,
usb-tok
ens
or
an
y
other
iden
tication
means
ma
y
also
exhibit
iden-
tical
lac
k
of
care
with
temp
orary
buers
when
retrieving
input
from
the
user.
The
metho
dology
adopted
to
retriev
e
information
from
the
ph
ys-
ical
memory
could
also
b
e
used
to
attac
k
soft
w
are
other
than
pre-b
o
ot
authen
tication
ones.
If
the
attac
k
er
also
ac
hiev
ed
to
get
ph
ysical
access
to
the
computer,
then
the
BIOS
k
eyb
oard
buer's
con
ten
t
can
still
b
e
retriev
ed
b
y
other
attac
k
v
ectors
lik
e
DRAM
remanence[3℄
or
Firewire
buses[5℄.
Annexe
A
:
Non
exhaustiv
e
list
of
soft
w
are
vulnerable
to
plain
text
passw
ord
leak
age
V
ulnerable
soft
w
are
:
BIOS
passw
ords
:
A
w
ard
BIOS
Mo
dular
4.50pg[33℄
Insyde
BIOS
V190[34℄
In
tel
Corp
PE94510M.86A.0050.2007.0710.1559
(07/10/2007)
Hewlett-P
ac
k
ard
68DTT
V
er.
F.0D
(11/22/2005)
Leno
v
o
7CETB5WW
v2.05
(10/13/2006)
F
ull
disk
encryption
with
pre-b
o
ot
authen
tication
capabilities
:
Bitlo
c
k
er
with
TPM
and
passw
ord
based
authen
tication
enabled
un-
der
Microsoft
Vista
Ultimate
Edition
T
ruecrypt
5.0
for
Windo
ws
DiskCryptor
0.2.6
for
Windo
ws
(latest)
Secu
Star
Driv
eCrypt
Plus
P
ac
k
v3.9
(latest)
Bo
ot
loader
passw
ords
:
grub
(GNU
GR
UB
0.97)
(latest
CVS)
lilo
v
ersion
22.6.1
(curren
t
under
Mandriv
a
2006)
Other
Soft
w
are
:
Soft
w
are
susp
end
2
(no
w
tuxonice),
Lin
ux
Kernel
P
atc
h
(w
e
tested
v
ersion
susp
end2-2.2.1
with
2.6.16
k
ernel)
Non
vulnerable
soft
w
are
:
BIOS
P
assw
ords
:
Hewlett-P
ac
k
ard
F.20
(04/15/2005)
Hewlett-P
ac
k
ard
F.05
(08/14/2006)
Pheonix
BIOS
V
ersion
F.0B,
7/3/2006
Pho
enix
T
ec
hnologies
L
TD
R0220Q0
(25-05-2007)
F
ull
disk
encryption
with
pre-b
o
ot
authen
tication
capabilities
:
SafeGuard
4.40
for
Windo
ws
PGP
Desktop
Professional
9.8
for
Windo
ws
(T
rial
V
ersion)
Annexe
B
:
Shellco
de.S
;---------------------
[
Shellcode.S
℄
-------------------------;
;
;
;
Jonathan
Brossard
//
PI:EMAIL
;
;
PI:EMAIL
;
;
;
;
16b
shellcode,
BIOS
API
only
used
:
aimed
at
being
Xplatform
;
;
if
run
under
virtual
or
real
mode...
;
;
;
;
Compiling
:
nasm
-fbin
./Shellcode.S
-o
Shellcode.COM
;
;---------------------------------------------------------------;
;\x30\xe4\xb0\x40\x8e\xd8\xb0\x1c\x89\xc6\x30\xed\xb1\x10\x3e\x8b
;\x04\x30\xe4\x3c\x20\x72\x04\x3c\x7e\x72\x02\xb0\x20\x83\xc6\x02
;\x56\x51\x50\xb4\x03\x30\xff\xcd\x10\xb4\x02\xfe\xc2\xcd\x10\x58
;\xb4\x0a\xb3\x06\xb1\x01\xcd\x10\x59\x5e\xe2\xd2\x30\xe4\xb0\x4c
;\xcd\x21
org
100h
section
.text
_start:
xor
ah,
ah
mov
al,
0x40
;
0x40:0x1e
:
keyboard
buffer
address
mov
ds,
ax
mov
al,
0x1c
mov
si,
ax
xor
ch,ch
mov
cl,
0x10
leakloop:
mov
ax,
[ds:si℄
xor
ah,ah
cmp
al,
0x20
jb
keepcopying
cmp
al,
0x7e
jb
keepcopying2
keepcopying:
mov
al,
0x20
keepcopying2:
add
si,
byte
+0x2
;
Replace
this
line
by
add
si,4
;
if
you
plan
to
use
it
under
MS-Dos
;
due
to
imperfect
emulation
of
16b
;
arch
under
windows.
push
si
push
cx
push
ax
mov
ah,
0x03
xor
bh,
bh
int
0x10
mov
ah,
0x02
inc
dl
int
0x10
pop
ax
mov
ah,
0ah
mov
bl,
06h