### LaTeX Editor
- **LaTeX Editor**
- **Text Editor**
- **Text Editor**
- **Text Editor**
- **Text Editor**
- **Messenger**
- **Messenger**
- **Messenger**
- **CHM Viewer**
- **Document Viewer**
- **Document Viewer**
- **Media Player**
- **Email Client**

### Program Statistics
| Program | Count |
|---------|-------|
| LaTeX Editor | 21337 |
| Text Editor | 16864 |
| Messenger | 11850 |
| CHM Viewer | 42701 |
| Document Viewer | 58485 |
| Media Player | 37103 |
| Email Client | 19825 |
| Other Programs | 12975, 15408, 21977, 6897, 50937, 25113, 10952, 14807, 2582, 10816, 16319, 10830, 21191, 16179, 6508, 15839, 13798, 9343, 9011, 5589, 23958, 21361, 25547, 7450, 5642, 6630, 18656, 3223, 24615, 5867, 3502, 4734, 1979, 8014, 7144, 6247, 8354, 7095, 3267, 10725, 6787 |

### Testing Program Set
We evaluated the SCDG (System Call Dependency Graph) birthmarks for both Gecko and Aspell against 24 large application programs. Each test program was executed under our dynamic analysis system to perform a simple operation and then quit. For all browsers, we used a homepage URL as input and performed spell checking if applicable. For word processors, text editors, instant messengers, and email clients, we fed the homepage HTML and performed spell checking if applicable. For other programs, appropriate input and a simple operation were provided before quitting. Table 2 shows the statistics for the SCDGs of the test program set. Note that for most of the programs in the testing set, we did not have prior knowledge of whether they contained Gecko and/or Aspell; thus, our test was a blind test.

### Experiment with GNU Aspell
In this experiment, we tested whether the programs in the testing set contained the GNU Aspell spell checker. GNU Aspell is the standard spell checker for the GNU software system and can be used as a library or an independent spell checker. It is widely used in word processors, document editors, text editors, and instant messengers.

We extracted Aspell's SCDG from a standalone Aspell 0.60.5 program, which contained 481 nodes and 659 edges. One SCDG birthmark, shown in Figure 5, was generated after comparing with the SCDGs of the training programs set (i.e., after removing common SCDGs). The Aspell SCDG birthmark was compared with the SCDGs of the programs in the testing set. The result showed that five programs—Opera, Kword, Lyx, Bluefish, and Pidgin—contained the Aspell birthmark, indicating that each of these programs included the Aspell component. This result was confirmed by manually checking the programs in the testing set.

### Experiment with Gecko Engine
In this experiment, we studied SCDG birthmarks using web browsers and their layout engines. A layout engine renders web content (e.g., HTML, XML, image files) combined with formatting information (e.g., CSS, XSL) onto display units or printers. Gecko, the second most popular layout engine on the Web, is used in most Mozilla software and its derivatives.

We extracted Gecko SCDG birthmarks from Firefox 3.0.4, which contained 726 nodes and 1048 edges. Two SCDG birthmarks were extracted after comparing with the training program set. Figure 6 shows an example SCDG birthmark of Gecko. These two Gecko SCDG birthmarks were compared with the SCDGs of the testing programs set. The result showed that four programs—Flock, Epiphany, SongBird, and Geleon—contained one of the two Gecko birthmarks, indicating that each of these programs included the Gecko component. This result was confirmed by manually checking the programs in the testing set.

### Impact of Compiler Optimization Levels
Changing compiler optimization levels is a semantic-preserving transformation technique that may be used to avoid detection. We evaluated the impact of compiler optimization levels on system call-based birthmarks using three programs: bzip2, gzip, and oggenc. To avoid incompatible compiler features, single compilation-unit source code (bzip2.c, gzip.c, and oggenc.c) were used. We used five optimization switches (-O0, -O1, -O2, -O3, and -Os) of GCC to generate executables at different optimization levels. The generated executables were executed with the same input, and a system call trace was recorded. We found that applying optimization options did not change the system call traces and SCDGs of bzip2 and gzip. However, the system call traces for oggenc with optimization options (-O3 and -Os) contained one fewer "write" system call than those with optimization options (-O0, -O1, and -O2). This result shows that system call-based SCDG birthmarks are robust to compiler optimization.

### Impact of Different Compilers
A software plagiarist may use a different compiler to avoid detection. To evaluate the impact of different compilers, we compared system call sequences using GCC, TCC, and Watcom. We used the three compilers to generate executables for each of the three programs (bzip2, gzip, and oggenc). The generated executables were executed with the same input, and a system call trace and SCDG were recorded for each executable. The results showed that the system call traces and SCDGs were exactly the same between TCC and GCC (both with default optimization levels). The system call traces between GCC and Watcom looked different due to the different standard C libraries used (glibc for GCC and TCC, and Watcom's own implementation). Three types of differences were found: different but equivalent system calls, failed system calls appearing in one result but not the other, and differences caused by memory management system calls. These differences can be removed by our noise filtering step, ensuring that our proposed birthmarks can survive under the three different compilers.

### Impact of Obfuscation Techniques
Obfuscation is another semantic-preserving transformation technique. There are two types of obfuscation tools: source code based and binary based. A source code obfuscator generates a functionally equivalent but harder-to-understand source file, while a binary obfuscator uses binary rewriting techniques. We evaluated the impact of obfuscation techniques over two state-of-the-art obfuscation tools.