Latex Editor
Latex Editor
Text Editor
Text Editor
Text Editor
Text Editor
Messenger
Messenger
Messenger
CHM Viewer
Doc. Viewer
Doc. Viewer
Media Player
Email Client
21337
16864
11850
42701
58485
37103
19825
12975
15408
21977
6897
50937
25113
10952
14807
2582
10816
16319
10830
21191
16179
6508
15839
13798
9343
9011
5589
23958
21361
25547
7450
5642
6630
18656
3223
24615
5867
3502
4734
1979
8014
7144
6247
8354
7095
3267
10725
6787
Testing Program Set. We evaluated Gecko SCDG birth-
marks and Aspell SCDG birthmarks against 24 large appli-
cation programs shown in Table 2. Each test program was
executed under our dynamic analysis system and perform a
simple operation and then quit. Again, we fed the home page
stat
read
read
read
read
read
read
read
read
read
close
access
open
stat
read
read
read
read
close
stat
read
read
read
read
read
read
close
lseek
munmap
stat
read
read
read
close
access
open
open
mmap
open
stat
read
read
close
access
open
lseek
munmap
lseek
munmap
stat
read
close
stat
read
mmap
mmap
close
stat
read
close
stat
read
mmap
mmap
close
open
open
open
open
close
stat
read
close
read
open
open
stat
read
read
close
open
Figure 5: An Example Birthmark extracted From Aspell
url as input to all browsers, and performed spell checking if
applicable, and then quit after the home page was displayed.
We fed the home page html to all word processors, text ed-
itors, instant messengers and email clients and performed
spell checking if applicable and quit. For other programs,
appropriate input and a simple operation were provided and
then quit. Table 2 shows statistics for the SCDGs of the test
program set. Note that for most of programs in the testing
sets, we do not have the preknowledge whether they contain
Gecko and/or Aspell or not; that is, our test is a blind test.
Experiment of GNU Aspell. In this experiment, we
test whether a program in the testing set contained a small
software component – GNU Aspell spell checker. GNU As-
pell is the standard spell checker for the GNU software sys-
tem. It can either be used as a component (library) or as
an independent spell checker. As a software component, it
has been widely used in word processors, document editors,
text editors and instant messengers.
We extracted birthmarks of Aspell from a standalone pro-
gram Aspell 0.60.5. The extracted SCDG graph contains
481 nodes and 659 edges. One SCDG birthmark, shown
in Figure 5, was generated after compared with SCDGs of
the training programs set (i.e., after removing the common
SCDGs). The Aspell SCDG birthmark was compared with
SCDGs of the programs in the testing set. The result is
that ﬁve programs, including Opera, Kword, Lyx, Blueﬁsh,
Pidgin, contain the Aspell Birthmark. It shows that each
of the ﬁve programs contain Aspell component, while others
not. This result was conﬁrmed by manually checking the
programs in the testing set.
Experiment of Gecko Engine.
In this experiment,
we study SCDG birthmarks using web browsers and their
layout engines. A layout engine is a software component
that renders web contents (such as HTML, XML, image ﬁles,
etc.) combined with formatting information (such as CSS,
XSL, etc.) onto the display units or printers. It is not only
the core components of a web browser, but also used by
other applications that require the rendering (and editing)
of web contents. Gecko [3], which is the second most popular
layout engine on the Web, is an layout engine used in most
Mozilla software and its derivatives.
We extracted Gecko SCDG birthmarks from Firefox 3.0.4.
The extracted SCDG graph contains 726 nodes and 1048
edges. Two SCDG birthmarks were extracted after compar-
ing with the training program set. Figure 6 shows an exam-
ple SCDG birthmark of Gecko. The two Gekco SCDG birth-
marks were compared with SCDGs of testing programs set.
The result is that four programs, including Flock, Epiphany,
SongBird and Geleon, contain one of the two Gecko Birth-
marks.
It shows that each of the four programs contain
Gecko components, while others not. This result was con-
ﬁrmed by manually checking the programs of the testing
set.
4.3 Impact of Compiler Optimization Levels
Changing compiler optimization levels is a type of seman-
tic preserving transformation techniques which may be used
by a software plagiarist to avoid detection. Here, we eval-
uated the impact of compiler optimization levels on sys-
tem call based birthmarks. A set of programs were used:
bzip2 (the second-most popular lossless compression tool
for Linux), gzip (a lossless compression tool) and oggenc (a
command-line encoding tool for Ogg Vorbis, a non-proprietary
lossy audio compression scheme). To avoid incompatible
compiler features, single compilation-unit source code (bzip2.c,
gzip.c and oggenc.c) were used 3. We used ﬁve optimiza-
tion switches (-O0,-O1,-O2,-O3 and -Os) of GCC to generate
executables of diﬀerent optimization levels (e.g., bzip2-O0,
bzip2-O3, etc.) for each program. The generated executa-
bles were executed with the same input, a system call trace
was recorded, and ﬁnally SCDGs were generated for each
executable. We compared the system call sequences and
found that applying optimization options does not change
the system call traces and SCDGs of bzip2 and gzip, while
the system call traces for oggenc with optimization options
(-O3 and -Os) contain only one “write” system call less than
that with optimization options (-O0, -O1 and -O2). This
result shows that system call based SCDG birthmarks are
robust to compiler optimization.
4.4 Impact of Different Compilers
A software plagiarist may also use a diﬀerent compiler to
3http://people.csail.mit.edu/smcc/projects/single-ﬁle-
programs/
read
read
read
read
read
close
read
read
read
read
read
close
lseek
lseek
lseek
lseek
lseek
stat
open
stat
open
lseek
read
read
close
lseek
read
read
read
read
read
read
read
read
read
read
close
read
read
read
read
read
close
open
open
open
open
Figure 6: An Example Birthmark Extracted from Gecko
avoid detection. To evaluate the impact of applying dif-
ferent compilers, we compared system call sequences with
three compilers: GCC, TCC and Watcom. We used the
three compilers to generate executables for each of the three
programs (e.g., bzip2-gcc, bzip2-tcc) we used before. The
generated executables were executed with the same input
and a system call trace and SCDG is recorded for the each
executable. We used GCC result to compare with TCC
and Watcom results. The results show that the system call
traces and SCDGs are exactly the same between TCC and
GCC (both with default optimization levels). The system
call traces between GCC and Watcom look diﬀerent. By
checking the compilers, we found that the diﬀerences were
caused by diﬀerent standard C libraries used by the com-
pilers, not because of the compilers themselves. Both GCC
and TCC use glibc, while Watcom uses its own implemen-
tation. Three types of diﬀerences are found. First, diﬀerent
but equivalent system calls are used between the two libc im-
plementation such as stat and stat64. Second, failed system
calls appear many times in one result, but not in the other.
Last, some diﬀerences caused by memory management sys-
tem calls. Fortunately, as mentioned in Section 3.3, such
diﬀerences can be removed by our noise ﬁltering step. As
such, our proposed birthmarks can survive under the three
diﬀerent compilers in this experiment.
4.5 Impact of Obfuscation Techniques
Obfuscation is another type of semantic preserving trans-
formation techniques. There are two types of obfuscation
tools: source code based and binary based. A source code
obfuscator accepts a program source ﬁle and generates an-
other functionally equivalent source ﬁle which is much harder
to understand or to reverse-engineer. A binary obfuscator
exploits binary rewriting technique for obfuscation. We eval-
uated the impacts of obfuscation techniques over two state-