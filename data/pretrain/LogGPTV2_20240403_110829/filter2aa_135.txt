tomcat整体架构和处理请求的流程
tomcat源码调试
以 tomcat8.5.68 为例
首先下载tomcat源代码：tomcat8
创建资源文件目录。在任意文件夹下可以创建一个文件夹，用于存放配置文件，站点信息等。我创
建的 catalina_home  
新建pom.xml，使用maven管理项目，导入调试所需要的依赖包
    4.0.0
    org.apache.tomcat
    Tomcat8.5.38
    Tomcat8.5.38
    8.5
        1.8
            junit
            junit
            4.12
            test
            org.easymock
            easymock
            3.5.1
            test
            ant
            ant
            1.7.0
            ant
            ant-apache-log4j
            1.6.5
            ant
            ant-commons-logging
            1.6.5
            wsdl4j
            wsdl4j
            1.6.2
            javax.xml.rpc
            javax.xml.rpc-api
            1.1
            org.eclipse.jdt.core.compiler
            ecj
            4.6.1
        Tomcat8.5
        java
                java
                org.apache.maven.plugins
                maven-compiler-plugin
                3.5
                    UTF-8
使用IDEA导入项目 
                    ${java.version}
                    ${java.version}
配置一个允许环境，新建一个Application 
设置java版本和tomcat入口 
配置VM options 
运行项目
ps：运行时会出现一个空指针异常的报错，需要手动添加如上代码。原因竟然是jsp的编译器没有
初始化，我们只需要在 apache-tomcat-8.5.38-
src\java\org\apache\catalina\startup\ContextConfig.java 类中只需添加一句代码即可手
动初始化：
-Dcatalina.home=D:\\Java\\tomcat\\apache-tomcat-8.5.68-src\\catalina_home
-Dcatalina.base=D:\\Java\\tomcat\\apache-tomcat-8.5.68-src\\catalina_home
-Djava.endorsed.dirs=D:\\Java\\tomcat\\apache-tomcat-8.5.68-
src\\catalina_home\\endorsed
-Djava.io.tmpdir=D:\\Java\\tomcat\\apache-tomcat-8.5.68-src\\catalina_home\\temp
-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager
-Djava.util.logging.config.file=D:\\Java\\tomcat\\apache-tomcat-8.5.68-
src\\catalina_home\\conf\\logging.properties
context.addServletContainerInitializer(new JasperInitializer(),null)
tomcat架构图解
除了 Connector 组件和 container 组件，tomcat还定义了很多其他组件来工作（ server-service-
connector/container-engine-host-context-wrapper ），这些组件采用套娃的方式设计，如果一个
组件包含了其他组件，那么这个组件也称之为容器
配置完成的项目地址
server：Server容器代表一个Tomcat实例（Catalina实例），其下可以有一个或者多个Service容
器；
Service：Service是提供具体对外服务的，一个Service容器中又可以有多个Connector组件（监听不
同端口请求，解析请求）和一个servlet容器（做具体的业务逻辑处理）
Engine和Host：Engine组件（引擎）是servlet容器catalina的核心，它支持在其下定义多个虚拟主
机（Host），虚拟主机允许Tomcat引擎在将配置在一台机器上的多个域名。
Context：每个虚拟主机又可以支持多个Web应用部署在下面，这就是我们所熟知的上下文对象
Context，上下文是使用由servlet规范中指定的Web应用程序格式表示，不论是压缩过的war包还是未压
缩的目录形式
Wrapper：在上下文中又可以部署多个servlet，并且每个servlet都会被一个包装组件（Wrapper）
所包含
添加一个测试用Servlet
web.xml 配置：
tomcat启动过程之init 源码剖析
        resumeservlet
        lagou.edu.servlet.ResumeServlet  
        1
        resumeservlet
        /addresume
public interface Lifecycle 生命周期接口，所有组件直接或间接实现接口 
1. 进入入口文件，创建Bootstrap对象。
2. 调用 init() 方法进行初始化。 
在 init 方法中通过反射创建了 Catalina 对象，然后执行了 setParentClassLoader 方法。最后
将创建的 Catalina 对象返回给 catalinaDaemon 。 
3. 进行 load 方法，在 load 方法中使用反射调用 Catalina 的 load 方法。 
在 Catalina 对象的 load 方法当中，加载了 server.xml 文件。 
4. server.xml 文件的解析。在 load 方法中调用 digester.parse 方法进行 xml 的解析。 
解析完成之后的 Root 参数： 
可以看到 server 的参数是一个 standardServer 类的对象，也就是 server 类的实现类
StandardServer 。 
此处的 server 也满足 xml 文件的套娃定义： 
5. getServer.init() 方法进行生命周期初始化（LifecycleBase的初始化） 
之后进入 initInternal 方法： 
6. service 的初始化，在 initInternal 方法中，第849行开始进行 service 的初始化 
此时的 service 是一个 standardService 对象 
7. 进行 engine 的初始化， engine.init()  
engine 在此处初始化了一个线程池，将之后其余子组件的初始化放入线程池中进行。 
engine 的初始化结束
8. 连接器初始化
此处创建了一个连接器适配器 CoyoteAdapter ，之后进行 endpoint 初始化。 protocolHandler
初始化，主要是内部的 endPoint 初始化。 
9. endpoint 初始化，第80行通过 super.init() 进行 endpoint 的初始化，在 endpoint 初始化的
过程中会进行端口绑定
tomcat 使用 Nio 的通信模型，所以 bind 方法会进入到 NioEndpoint 类当中 
tomcat启动过程之start过程
Servlet请求处理链路
问：一个 servlet 是如何被 tomcat 处理的？
答：一个servlet请求->找到能够处理当前servlet请求的servlet实例->servlet.service() 
Servlet请求处理分析
1. 请求处理分析流程需要关注的是 start 过程中的 Connector 过程，其中有一个 Poller 线程，用于
监听可以被处理的 channel ,因此这个是请求处理的入口。 
2. 经过中间过程的处理，最后通过 org.apache.coyote.http11.Http11Processor.java 开始封装
request 和 response 两个对象。 
3. 之后将 request 和 response 两个请求交给 adapter 进行处理，将 request 和 response 转换
servletRequest 和 servletResponse  
4. 找到能够处理当前请求的 servlet 容器 
5. 开始调用容器进行处理。
6. 上面这一步会进入到Engien层，去寻找Host 
7. 进入Engien之后又会去寻找Host： 
8. 最后来到Context层，最后调用servlet进行处理。 
9. 此时堆栈示意图：
10. 执行 servlet 的过程是 StandardWrapperValve.java 。 
11. 第173行,将servlet封装进入filterChain中一起执行. 
12. 执行filterChain,这一步也就是执行servlet 
Mapper组件体系结构
tomcat中使用了Mapper重新封装了 Host-context-wrapper(servlet) 之间的数据。在匹配出能
够处理当前请求的 Host-context-Wrapper 之前， mapper 对象已经初始化完成了，那 mapper 对象
是什么时候初始化的？
1. 关于 Mapper 对象,以及 postParseRequest 方法中对于Mapper的处理过程. 
2. 此处 request.getMappingData 获取的数据为空,之后调用 Mapper.map 进行处理。 
3. 之后再进入 internalMap 方法。 
4. request.getMappingData() 中负责存储本次请求url与servlet的请求。而
this.connector.getMapper().map 中负责查找url与servlet的对应关系，并存储到
request.getMappingData() 中。下面我们主要分析一下 this.connector.getMapper().map 方
法，当然该方法最终调用的是 org.apache.tomcat.util.http.mapper.Mapper#internalMap 方
法，继续跟踪 internalMap
5. 此处 contextList 保存的是一共有几个应用，即 context ，之后会查找当前的 uri 位于哪一个
context 中，如果不失配，进入到之后的处理。 
6. 从 Mapper 中根据 webapp 的名称，查找到相关的 Map.context 。而 Map.context 中，存储着每
个 webapp 中 url 与 servlet 的对应关系。在方法的最后，调用 this.internalMapWrapper 去查
找相对应的 Wrapper ，并存放在 request 中，作为本次请求中待调用的 servlet 。