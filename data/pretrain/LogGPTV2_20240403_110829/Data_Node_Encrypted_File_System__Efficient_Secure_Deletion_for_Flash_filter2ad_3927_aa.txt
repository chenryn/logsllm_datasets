title:Data Node Encrypted File System: Efficient Secure Deletion for Flash
Memory
author:Joel Reardon and
Srdjan Capkun and
David A. Basin
Data Node Encrypted File System:
Eﬃcient Secure Deletion for Flash Memory
Joel Reardon, Srdjan Capkun, David Basin
Department of Computer Science, ETH Zurich
Abstract
We propose the Data Node Encrypted File Sys-
tem (DNEFS), which uses on-the-ﬂy encryption and
decryption of ﬁle system data nodes to eﬃciently
and securely delete data on ﬂash memory systems.
DNEFS is a generic modiﬁcation of existing ﬂash
ﬁle systems or controllers that enables secure data
deletion while preserving the underlying systems’ de-
sirable properties: application-independence, ﬁne-
grained data access, wear-levelling, and eﬃciency.
We describe DNEFS both abstractly and in the
context of the ﬂash ﬁle system UBIFS. We propose
UBIFSec, which integrates DNEFS into UBIFS. We
implement UBIFSec by extending UBIFS’s Linux
implementation and we integrate UBIFSec in the
Android operating system running on a Google
Nexus One smartphone. We show that it is eﬃ-
cient and usable; Android OS and applications (in-
cluding video and audio playback) run normally on
top of UBIFSec. To the best of our knowledge,
this work presents the ﬁrst comprehensive and fully-
implemented secure deletion solution that works
within the speciﬁcation of ﬂash memory.
1 Introduction
Flash memory is used near universally in portable
devices. However, the way modern systems use ﬂash
memory has a serious drawback—it does not guaran-
tee deletion of stored data. To the user, data appears
to be deleted from the ﬁle system, but in reality
it remains accessible after deletion [39]. This prob-
lem is particularly relevant for modern smartphones,
as they store private data, such as communications,
browsing, and location history as well as sensitive
business data. The storage of such data on portable
devices necessitates guaranteed secure deletion.
no longer possible on that storage medium [9]. This
is in contrast to standard deletion, where metadata
simply indicates that the data’s storage location is
no longer needed and can be reused. The time be-
tween marking data as deleted and its actual (se-
cure) deletion is called the deletion latency. We use
the term guaranteed secure deletion to denote secure
deletion with a ﬁxed, (small) ﬁnite upper bound on
the deletion latency for all data.
On magnetic storage media, secure data deletion
is implemented by overwriting a ﬁle’s content with
non-sensitive information [29], or by modifying the
ﬁle system to automatically overwrite any discarded
sector [2]. However, ﬂash memory cannot perform
in-place updates of data (i.e., overwrites) [8]; it in-
stead performs erasures on erase blocks, which have
a larger granularity than read/write operations. A
single erase block may store data for diﬀerent ﬁles,
so it can only be erased when all the data in the
erase block is marked as deleted or when the live
data is replicated elsewhere. Moreover, ﬂash mem-
ory degrades with each erasure, so frequent erasures
shorten the device’s lifetime. Therefore, the simplis-
tic solution of erasing any erase block that contains
deleted data is too costly with regards to time and
device wear [35].
In this work, we present the Data Node Encrypted
File System (DNEFS), which securely and eﬃciently
deletes data on ﬂash memory; it requires only a few
additional erasures that are evenly distributed over
the erase blocks. DNEFS uses on-the-ﬂy encryption
and decryption of individual data nodes (the small-
est unit of read/write for the ﬁle system) and relies
on key generation and management to prevent access
to deleted data. We design and implement an in-
stance of our solution for the ﬁle system UBIFS [14]
and call our modiﬁcation UBIFSec.
Secure deletion is the operation of sanitizing data
on a storage medium, so that access to the data is
UBIFSec has the following attractive properties.
It provides a guaranteed upper bound on deletion
1
It provides ﬁne-grained deletion, also for
latency.
truncated or overwritten parts of ﬁles. It runs eﬃ-
ciently and produces little wear on the ﬂash memory.
Finally, it is easy to integrate into UBIFS’s existing
Linux implementation, and requires no changes to
the applications using UBIFS. We deploy UBIFSec
on a Google Nexus One smartphone [11] running an
Android OS. The system and applications (includ-
ing video and audio playback) run normally on top
of UBIFSec.
Even though DNEFS can be implemented on
YAFFS (the ﬁle system used on the Android OS),
this would have required signiﬁcant changes to
YAFFS. We test DNEFS within UBIFS, which is
a supported part of the standard Linux kernel (since
version 2.6.27) and which provides interfaces that
enable easy integration of DNEFS.
We summarize our contributions as follows. We
design DNEFS, a system that enables guaranteed
secure data deletion for ﬂash memory—operating
within ﬂash memory’s speciﬁcation [26]. We in-
stantiate DNEFS as UBIFSec, analyze its security,
and measure its additional battery consumption,
throughput, computation time, and ﬂash memory
wear to show that it is practical for real-world use.
We provide our modiﬁcation freely to the commu-
nity [37].
2 Background
Flash Memory. Flash memory is a non-volatile
storage medium consisting of an array of electronic
components that store information [1]. Flash mem-
ory has very small mass and volume, does not incur
seek penalties for random access, and requires little
energy to operate. As such, portable devices almost
exclusively use ﬂash memory.
Flash memory is divided into two levels of gran-
ularity. The ﬁrst level is called erase blocks, which
are on the order of 128 KiB [11] in size. Each erase
block is divided into pages, which are on the order
of 2 KiB in size. Erase blocks are the unit of era-
sure, and pages are the unit of read and write oper-
ations [8]. One cannot write data to a ﬂash memory
page unless that page has been previously erased ;
only the erasure operation performed on an erase
block prepares the pages it contains for writing.
Erasing ﬂash memory causes signiﬁcant physical
wear [22]. Each erasure risks turning an erase block
into a bad block, which cannot store data. Flash
erase blocks tolerate between 104 to 105 erasures be-
fore they become bad blocks. To promote a longer
device lifetime, erasures should be evenly levelled
over the erase blocks.
MTD Layer. On Linux, ﬂash memory is accessed
through the Memory Technology Device (MTD)
layer [23]. MTD has the following interface: read
and write a page, erase an erase block, check if an
erase block is bad, and mark an erase block as bad.
Erase blocks are referenced sequentially, and pages
are referenced by the erase block number and oﬀset.
Flash File Systems. Several ﬂash memory ﬁle
systems have been developed at the MTD layer [4,
40]. These ﬁle systems are log-structured: a class
of ﬁle systems that (notably) do not perform in-
place updates. A log-structured ﬁle system con-
sists of an ordered list of changes from an initial
empty state, where each change to the ﬁle system
is appended to the log’s end [34]. Therefore, stan-
dard log-structured ﬁle systems do not provide se-
cure deletion because new data is only appended.
When a change invalidates an earlier change then
the new, valid data is appended and the erase block
containing the invalidated data now contains wasted
space. Deleting a ﬁle, for example, appends a change
that indicates the ﬁle is deleted. All the deleted ﬁle’s
data nodes remain on the storage medium but they
are now invalid and wasting space. A garbage col-
lection mechanism detects and recycles erase blocks
with only invalid data; it also copies the remaining
valid data to a new location so it may recycle erase
blocks mostly ﬁlled with invalid data.
Flash Translation Layer. Flash memory is com-
monly accessed through a Flash Translation Layer
(FTL) [1, 15], which is used in USB sticks, SD cards,
and solid state drives. FTLs access the raw ﬂash
memory directly, but expose a typical hard drive in-
terface that allows any regular ﬁle system to be used
on the memory. FTLs can either be a hardware con-
troller or implemented in software. An FTL trans-
lates logical block addresses to raw physical ﬂash ad-
dresses, and internally implements a log-structured
ﬁle system on the memory [6]. Therefore, like log-
structured ﬁle systems, FTLs do not provide secure
data deletion. In Section 5 we explain how to mod-
ify an FTL to use DNEFS to enable eﬃcient secure
deletion for any ﬁle system mounted on it.
UBI Layer. Unsorted Block Images (UBI) is an
abstraction of MTD, where logical erase blocks are
transparently mapped to physical erase blocks [10].
UBI’s logical mapping implements wear-levelling
and bad block detection, allowing UBI ﬁle systems
to ignore these details. UBI also permits the atomic
updating of a logical erase block—the new data is
either entirely available or the old data remains.
2
journal is full, it is committed to the main storage
area by logically moving the journal to an empty
location and growing the main storage area to en-
compass the old journal. An index is used to lo-
cate data nodes, and this index is also written to
the storage medium. At its core, UBIFS is a log-
structured ﬁle system; in-place updates are not per-
formed. As such, UBIFS does not provide guaran-
teed secure data deletion.
In this work, we model a
Adversarial Model.
novel kind of attacker that we name the peek-a-boo
attacker. This attacker is more powerful than the
strong coercive attacker considered in other secure
deletion works [27, 30]. A coercive attacker can,
at any time, compromise both the storage medium
containing the data along with any secret keys or
passphrases required to access it. The peek-a-boo
attacker extends the coercive attacker to also allow
the attacker to obtain (“to peek into”) the content of
the storage medium at some point(s) in time prior
to compromising the storage medium.
Coercive attacks model legal subpoenas that re-
quire users to forfeit devices and reveal passwords.
Since the time of the attack is arbitrary and therefore
unpredictable, no extraordinary sanitization proce-
dure can be performed prior to the compromise time.
Since the attacker is given the user’s secret keys,
it is insuﬃcient to simply encrypt the storage me-
dia [17]. The peek-a-boo attacker models an at-
tacker who additionally gets temporary read-access
to the medium (e.g., a hidden virus that is forced
to send suicide instructions upon being publicly ex-
posed) and then subsequently performs a coercive
attack. It is roughly analogous to forward secrecy
in the sense that if a secure deletion scheme is re-
silient to a peek-a-boo attacker, it prevents recovery
of deleted data even if an earlier snapshot of the data
from the storage medium is available to the attacker.
Figure 2 shows a timeline of data storage and an
adversarial attack. We divide time into discrete in-
tervals called purging epochs. At the end of each
purging epoch any data marked for deletion is se-
curely deleted (purged). We assume that purging is
an atomic operation. The lifetime of a piece of data
is then deﬁned as all the purging epochs from the one
when it was written to the one when it was deleted.
We say that data is securely deleted if a peek-a-boo
attacker cannot recover the data when performing
peek and boo attacks in any purging epochs outside
the data’s lifetime.
Figure 1: Erase block relationships among MTD, UBI,
and UBIFS. Diﬀerent block shades label diﬀerent areas
of the ﬁle system. Empty LEBs are labelled by ε and are
not mapped to a corresponding PEB by UBI. Similarly,
bad PEBs are labelled and not mapped onto by UBI.
UBI exposes the following interface:
read and
write to a Logical Erase Block (LEB), erase an LEB,
and atomically update the contents of an LEB. UBI
LEBs neither become bad due to wear, nor should
their erasure counts be levelled.
Underlying this interface is an injective partial
mapping from LEBs to physical erase blocks (PEBs),
where PEBs correspond to erase blocks at the MTD
layer. The lower half of Figure 1 illustrates this re-
lationship. Wear monitoring is handled by tracking
the erasures at the PEB level, and a transparent
remapping of LEBs occurs when necessary. Remap-
ping also occurs when bad blocks are detected. De-
spite remapping, an LEB’s number remains con-
stant, regardless of its corresponding PEB.
Atomic updates occur by invoking UBI’s update
function, passing as parameters the LEB number to
update along with a buﬀer containing the desired
contents. An unused and empty PEB is selected and
the page-aligned data is then written to it. UBI then
updates the LEB’s mapping to the new PEB, and
the previous PEB is queued for erasure. This erasure
can be done either automatically in the background
or immediately with a blocking system call. If the
atomic update fails at any time—e.g., because of a
power loss—then the mapping is unchanged and the
old PEB is not erased.
UBIFS. The UBI ﬁle system, UBIFS [14], is de-
signed speciﬁcally for UBI, and Figure 1 illustrates
UBIFS’s relationship to UBI and MTD. UBIFS di-
vides ﬁle data into ﬁxed-sized data nodes. Each data
node has a header that stores the data’s inode num-
ber and its ﬁle oﬀset. This inverse index is used by
the garbage collector to determine if the nodes on
an erase block are valid or can be discarded.
UBIFS ﬁrst writes all data in a journal. When this
3
εεεPEBεεεεbadbadεεεεbadbadMTD (flash)εεεUBIFSblock, etcsuper main storage areajournalLEBUBI3.2 Our Solution
We now present our secure deletion solution and
show how it fulﬁlls the listed requirements.
In the spirit of Boneh and Lipton [3], DNEFS
uses encryption to provide secure deletion.
It en-
crypts each individual data node (i.e., the unit of
read/write for the ﬁle system) with a diﬀerent key,
and then manages the storage, use, and purging of
these keys in an eﬃcient and transparent way for
both users and applications. Data nodes are en-
crypted before being written to the storage medium
and decrypted after being read; this is all done in-
memory. The keys are stored in a reserved area of
the ﬁle system called the key storage area.
DNEFS works independent of the notion of ﬁles;
neither ﬁle count/size nor access patterns have any
inﬂuence on the size of the key storage area. The en-
crypted ﬁle data stored on the medium is no diﬀerent
than any reversible encoding applied by the storage
medium (e.g., error-correcting codes) because all le-
gitimate access to the data only observes the unen-
crypted form. This is not an encrypted ﬁle system,
although in Section 5 we explain that it can be easily
extended to one. In our case, encryption is simply
a coding technique that we apply immediately be-
fore storage to reduce the number of bits required
to delete a data node from the data node size to the
key size.
Key Storage Area. Our solution uses a small mi-
grating set of erase blocks to store all the data nodes’
keys—this set is called the Key Storage Area (KSA).
The KSA is managed separately from the rest of the
ﬁle system. In particular, it does not behave like a
log-structured ﬁle system: when a KSA erase block
is updated, its contents are written to a new erase
block, the logical reference to the KSA block is up-
dated, and the previous version of the KSA erase
block is then erased. Thus, except while updating,
only one copy of the data in the KSA is available on
the storage medium. Our solution therefore requires
that the ﬁle system or ﬂash controller that it mod-
iﬁes can logically reference the KSA’s erase blocks
and erase old KSA erase blocks promptly after writ-
ing a new version.
Each data node’s header stores the logical KSA
position that contains its decryption key. The erase
blocks in the KSA are periodically erased to securely
delete any keys that decrypt deleted data. When the
ﬁle system no longer needs a data node—i.e, it is
removed or updated—we mark the data node’s cor-
responding key in the KSA as deleted. This solution
is independent of the notion of ﬁles; keys are marked
Figure 2: Example timeline for secure deletion. Time
is divided into discrete purging epochs. Data is written
in epoch 2 and deleted in epoch 5, and the data’s life-
time includes all epochs between these. Here, the peek
attack (read access to the entire storage medium) occurs