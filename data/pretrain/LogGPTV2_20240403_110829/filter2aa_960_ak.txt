    "username" => "root",
    "uuid" => "hjahs9kw",
    "exploit_uuid" => "gcprpj2a",
    "routes" => [ ]
    }
}
This response is returned as a map: the Meterpreter session identifiers 
are the keys, and the session detail is the value. 
Let’s build the Go types to handle both the request and response data. 
Listing 3-13 defines the sessionListReq and SessionListRes. 
u type sessionListReq struct {
    v _msgpack struct{} `msgpack:",asArray"`
    Method   string
    Token    string
}
w type SessionListRes struct {
    ID          uint32 `msgpack:",omitempty"`x
    Type        string `msgpack:"type"`
    TunnelLocal string `msgpack:"tunnel_local"`
    TunnelPeer  string `msgpack:"tunnel_peer"`
    ViaExploit  string `msgpack:"via_exploit"`
    ViaPayload  string `msgpack:"via_payload"`
    Description string `msgpack:"desc"`
前沿信安资讯阵地  公众号：i nf osrc
62   Chapter 3
    Info        string `msgpack:"info"`
    Workspace   string `msgpack:"workspace"`
    SessionHost string `msgpack"session_host"`
    SessionPort int    `msgpack"session_port"`
    Username    string `msgpack:"username"`
    UUID        string `msgpack:"uuid"`
    ExploitUUID string `msgpack:"exploit_uuid"`
}
Listing 3-13: Metasploit session list type definitions (/ch-3/metasploit-minimal/rpc/msf.go)
You use the request type, sessionListReq u, to serialize structured data 
to the MessagePack format in a manner consistent with what the Metasploit 
RPC server expects—specifically, with a method name and token value. 
Notice that there aren’t any descriptors for those fields. The data is passed 
as an array, not a map, so rather than expecting data in key/value format, 
the RPC interface expects the data as a positional array of values. This is 
why you omit annotations for those properties—no need to define the key 
names. However, by default, a structure will be encoded as a map with the 
key names deduced from the property names. To disable this and force the 
encoding as a positional array, you add a special field named _msgpack that 
utilizes the asArray descriptor v, to explicitly instruct an encoder/decoder 
to treat the data as an array.
The SessionListRes type w contains a one-to-one mapping between 
response field and struct properties. The data, as shown in the preceding 
example response, is essentially a nested map. The outer map is the session 
identifier to session details, while the inner map is the session details, repre-
sented as key/value pairs. Unlike the request, the response isn’t structured 
as a positional array, but each of the struct properties uses descriptors to 
explicitly name and map the data to and from Metasploit’s representation. 
The code includes the session identifier as a property on the struct. However, 
because the actual value of the identifier is the key value, this will be popu-
lated in a slightly different manner, so you include the omitempty descriptor x 
to make the data optional so that it doesn’t impact encoding or decoding. 
This flattens the data so you don’t have to work with nested maps.
Retrieving a Valid Token
Now, you have only one thing outstanding. You have to retrieve a valid token 
value to use for that request. To do so, you’ll issue a login request for the 
auth.login() API method, which expects the following:
["auth.login", "username", "password"]
You need to replace the username and password values with what you used 
when loading the msfrpc module in Metasploit during initial setup (recall 
that you set them as environment variables). Assuming authentication is 
successful, the server responds with the following message, which contains 
an authentication token you can use for subsequent requests.
前沿信安资讯阵地  公众号：i nf osrc
HTTP Clients and Remote Interaction with Tools    63
{ "result" => "success", "token" => "a1a1a1a1a1a1a1a1" }
An authentication failure produces the following response:
{ 
    "error" => true, 
    "error_class" => "Msf::RPC::Exception",
    "error_message" => "Invalid User ID or Password" 
}
For good measure, let’s also create functionality to expire the token by 
logging out. The request takes the method name, the authentication token, 
and a third optional parameter that you’ll ignore because it’s unnecessary 
for this scenario:
[ "auth.logout", "token", "logoutToken"]
A successful response looks like this:
{ "result" => "success" }
Defining Request and Response Methods
Much as you structured the Go types for the session.list() method’s request 
and response, you need to do the same for both auth.login() and auth.logout() 
(see Listing 3-14). The same reasoning applies as before, using descriptors 
to force requests to be serialized as arrays and for the responses to be treated 
as maps: 
type loginReq struct {
    _msgpack struct{} `msgpack:",asArray"`
    Method   string
    Username string
    Password string
}
type loginRes struct {
    Result       string `msgpack:"result"`
    Token        string `msgpack:"token"`
    Error        bool   `msgpack:"error"`
    ErrorClass   string `msgpack:"error_class"`
    ErrorMessage string `msgpack:"error_message"`
}
type logoutReq struct {
    _msgpack    struct{} `msgpack:",asArray"`
    Method      string
    Token       string
    LogoutToken string
}
前沿信安资讯阵地  公众号：i nf osrc
64   Chapter 3
type logoutRes struct {
    Result string `msgpack:"result"`
}
Listing 3-14: Login and logout Metasploit type definition (/ch-3/metasploit-minimal/rpc 
/msf.go)
It’s worth noting that Go dynamically serializes the login response, 
populating only the fields present, which means you can represent both 
successful and failed logins by using a single struct format.
Creating a Configuration Struct and an RPC Method
In Listing 3-15, you take the defined types and actually use them, creating 
the necessary methods to issue RPC commands to Metasploit. Much as 
in the Shodan example, you also define an arbitrary type for maintaining 
pertinent configuration and authentication information. That way, you 
won’t have to explicitly and repeatedly pass in common elements such as 
host, port, and authentication token. Instead, you’ll use the type and build 
methods on it so that data is implicitly available.
type Metasploit struct {
    host  string
    user  string
    pass  string
    token string
}
func New(host, user, pass string) *Metasploit {
    msf := &Metasploit{
        host: host,
        user: user,
        pass: pass,
    }
    return msf
} 
Listing 3-15: Metasploit client definition (/ch-3 /metasploit-minimal/rpc/msf.go)
Now you have a struct and, for convenience, a function named New() 
that initializes and returns a new struct.
Performing Remote Calls
You can now build methods on your Metasploit type in order to perform 
the remote calls. To prevent extensive code duplication, in Listing 3-16, you 
start by building a method that performs the serialization, deserialization, 
and HTTP communication logic. Then you won’t have to include this logic 
in every RPC function you build.
func (msf *Metasploit) send(req interface{}, res interface{})u error {
    buf := new(bytes.Buffer)
前沿信安资讯阵地  公众号：i nf osrc
HTTP Clients and Remote Interaction with Tools    65
    v msgpack.NewEncoder(buf).Encode(req)
    w dest := fmt.Sprintf("http://%s/api", msf.host)
    r, err := http.Post(dest, "binary/message-pack", buf)x
    if err != nil {
        return err
    }
    defer r.Body.Close()
    if err := msgpack.NewDecoder(r.Body).Decode(&res)y; err != nil {
        return err
    }
    return nil
}
Listing 3-16: Generic send() method with reusable serialization and deserialization  
(/ch-3/metasploit-minimal/rpc/msf.go)
The send() method receives request and response parameters of type 
interface{} u. Using this interface type allows you to pass any request 
struct into the method, and subsequently serialize and send the request 
to the server. Rather than explicitly returning the response, you’ll use the 
res interface{} parameter to populate its data by writing a decoded HTTP 
response to its location in memory.
Next, use the msgpack library to encode the request v. The logic to do 
this matches that of other standard, structured data types: first create an 
encoder via NewEncoder() and then call the Encode() method. This populates 
the buf variable with MessagePack-encoded representation of the request 
struct. Following the encoding, you build the destination URL by using the 
data within the Metasploit receiver, msf w. You use that URL and issue a POST 
request, explicitly setting the content type to binary/message-pack and setting 
the body to the serialized data x. Finally, you decode the response body y. 
As alluded to earlier, the decoded data is written to the memory location of 
the response interface that was passed into the method. The encoding and 
decoding of data is done without ever needing to explicitly know the request 
or response struct types, making this a flexible, reusable method.
In Listing 3-17, you can see the meat of the logic in all its glory.
func (msf *Metasploit) Login()u error {
    ctx := &loginReq{
        Method:   "auth.login",
        Username: msf.user,
        Password: msf.pass,
    }
    var res loginRes
    if err := msf.send(ctx, &res)v; err != nil {
        return err
    }
    msf.token = res.Token
    return nil
}
前沿信安资讯阵地  公众号：i nf osrc
66   Chapter 3
func (msf *Metasploit) Logout()w error {
    ctx := &logoutReq{
        Method:      "auth.logout",
        Token:       msf.token,
        LogoutToken: msf.token,
    }
    var res logoutRes
    if err := msf.send(ctx, &res)x; err != nil {
        return err
    }
    msf.token = ""
    return nil
}
func (msf *Metasploit) SessionList()y (map[uint32]SessionListRes, error) {
    req := &SessionListReq{Method: "session.list", Token: msf.token}
    z res := make(map[uint32]SessionListRes)
    if err := msf.send(req, &res){; err != nil {
        return nil, err
    }
    | for id, session := range res {
        session.ID = id
        res[id] = session
    }
    return res, nil
}
Listing 3-17: Metasploit API calls implementation (/ch-3/metasploit-minimal/rpc/msf.go)
You define three methods: Login() u, Logout() w, and SessionList() y. 
Each method uses the same general flow: create and initialize a request 
struct, create the response struct, and call the helper function vx{ 
to send the request and receive the decoded response. The Login() and 
Logout() methods manipulate the token property. The only significant dif-
ference between method logic appears in the SessionList() method, where 
you define the response as a map[uint32]SessionListRes z and loop over that 
response to flatten the map |, setting the ID property on the struct rather 
than maintaining a map of maps.
Remember that the session.list() RPC function requires a valid authenti-
cation token, meaning you have to log in before the SessionList() method call 
will succeed. Listing 3-18 uses the Metasploit receiver struct to access a token, 
which isn’t a valid value yet—it’s an empty string. Since the code you’re devel-
oping here isn’t fully featured, you could just explicitly include a call to your 
Login() method from within the SessionList() method, but for each additional 
authenticated method you implement, you’d have to check for the existence 
of a valid authentication token and make an explicit call to Login(). This isn’t 
great coding practice because you’d spend a lot of time repeating logic that 
you could write, say, as part of a bootstrapping process. 
前沿信安资讯阵地  公众号：i nf osrc
HTTP Clients and Remote Interaction with Tools    67
You’ve already implemented a function, New(), designed to be used for 
bootstrapping, so patch up that function to see what a new implementa-
tion looks like when including authentication as part of the process (see 
Listing 3-18).
func New(host, user, pass string) (*Metasploit, error)u {
    msf := &Metasploit{
        host: host,
        user: user,
        pass: pass,
    }
    if err := msf.Login()v; err != nil {
        return nil, err
    }
    return msf, nil
}
Listing 3-18: Initializing the client with embedding Metasploit login (/ch-3/metasploit 
-minimal/rpc/msf.go)
The patched-up code now includes an error as part of the return value 
set u. This is to alert on possible authentication failures. Also, added to the 
logic is an explicit call to the Login() method v. As long as the Metasploit 
struct is instantiated using this New() function, your authenticated method 
calls will now have access to a valid authentication token.
Creating a Utility Program
Nearing the end of this example, your last effort is to create the utility pro-
gram that implements your shiny new library. Enter the code in Listing 3-19 
into client/main.go, run it, and watch the magic happen.
package main
import (
    "fmt"
    "log"
    "github.com/blackhat-go/bhg/ch-3/metasploit-minimal/rpc"
)
func main() {
    host := os.Getenv("MSFHOST")
    pass := os.Getenv("MSFPASS")
    user := "msf"
    if host == "" || pass == "" {
        log.Fatalln("Missing required environment variable MSFHOST or MSFPASS")
    }
前沿信安资讯阵地  公众号：i nf osrc
68   Chapter 3
    msf, err := rpc.New(host, user, pass)u
    if err != nil {
        log.Panicln(err)
    }
    v defer msf.Logout()
    sessions, err := msf.SessionList()w
    if err != nil {
        log.Panicln(err)
    }
    fmt.Println("Sessions:")
    x for _, session := range sessions {
        fmt.Printf("%5d  %s\n", session.ID, session.Info)
    }
}
Listing 3-19: Consuming our msfrpc package (/ch-3/metasploit-minimal/client/main.go)
First, bootstrap the RPC client and initialize a new Metasploit struct u. 
Remember, you just updated this function to perform authentication dur-
ing initialization. Next, ensure you do proper cleanup by issuing a deferred 
call to the Logout() method v. This will run when the main function returns 
or exits. You then issue a call to the SessionList() method w and iterate over 
that response to list out the available Meterpreter sessions x. 
That was a lot of code, but fortunately, implementing other API calls 
should be substantially less work since you’ll just be defining request and 
response types and building the library method to issue the remote call. 
Here’s sample output produced directly from our client utility, showing one 
established Meterpreter session:
$ go run main.go
Sessions:
    1 WIN-HOME\jsmith @ WIN-HOME
There you have it. You’ve successfully created a library and client util-
ity to interact with a remote Metasploit instance to retrieve the available 
Meterpreter sessions. Next, you’ll venture into search engine response 
scraping and document metadata parsing.
Parsing Document Metadata with Bing Scraping
As we stressed in the Shodan section, relatively benign information—when 
viewed in the correct context—can prove to be critical, increasing the likeli-