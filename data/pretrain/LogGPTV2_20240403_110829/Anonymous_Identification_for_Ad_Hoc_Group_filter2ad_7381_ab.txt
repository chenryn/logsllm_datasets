require a superset GPK0 ¶ GPK to be speciﬂed, such that membership to
GPK0 can be tested in polynomial time.
The Make-GPK algorithm shall run in time linear in the number of public
keys being aggregated; we also remark here that our deﬂnition forces Make-
GPK to be order-independent i.e., the order in which the public keys to be
aggregated are provided shall not matter.
{ Make-GSK, the group secret key construction algorithm, is a deterministic
algorithm used to combine a set of user public keys S 0, along with a secret
key/public key pair (sku; pku), into a single group secret key gsku, suitable
for use in the Anon-ID protocol described below.
Make-GSK takes as input param, a set S 0 (cid:181) PK0 and a key pair (sku; pku)
satisfying sku›pku, and it shall run in time proportional to the size of S 0.
Its output implicitly deﬂnes a domain GSK of possible group secret keys.
The Make-GPK and Make-GSK algorithms can be used to extend the
:
›-relation to GSK £ GPK, as follows: A group secret key gsk
=
Make-GSK(param; S 0; (sk; pk)) is in ›-relation with a group public key
:
= Make-GPK(param; S) if and only if S = S 0[fpkg. Observe that even in
gpk
the case that the ›-relation is one-to-one over SK £ PK, it is usually many-
to-one over GSK £ GPK, as more than one group secret key correspond to
the same group public key.
:
= (Anon-IDP; Anon-IDV), the Anonymous Identiﬂcation Protocol, is
an e–cient two-party protocol, in which both Anon-IDP (the prover ) and
Anon-IDV (the veriﬂer ) get in input the system’s parameters param and a
group public key gpk (corresponding to some set S of user public keys i.e.,
:
= Make-GPK(param; S)); Anon-IDP is also given a group secret key gsk
gpk
as an additional input.
Any execution of the Anon-ID protocol shall complete in time independent
from the number of public keys that were aggregated when constructing gpk
and/or gsk; at the end of each protocol run, Anon-IDV outputs a 0/1-valued
answer.
{ Anon-ID
Correctness. For correctness, we require that any execution of the Anon-ID
protocol in which the additional input to Anon-IDP is a group secret key gsk
›-related to the common input gpk, shall terminate with Anon-IDV outputting
a 1 answer, with overwhelming probability.
Honest user registration oracle OHReg
IN:
u 2 U
User corruption oracle OCor
pku 2 PK0
IN:
RUN: 1. (sku; pku)
R
ˆ Register(param; u) RUN: 1. sku ˆ DB:Lookup(pku)
2. DB:Store(sku; pku)
/* sku ˆ ? if no match found */
OUT: pku
OUT: sku
Transcript oracle OScr
S 0 (cid:181) PK0; pku 2 PK0
IN:
RUN: 1. sku ˆ DB:Lookup(pku)
2. if sku = ?
3. then … ˆ ?
4. else gpk ˆ Make-GPK(param; S 0 [ fpkug)
5.
gsk ˆ Make-GSK(param; S 0; (sku; pku))
6.
OUT: …
R
ˆ Anon-IDP(param; gpk; gsk) $ Anon-IDV(param; gpk)
…
Fig. 1. Oracles for the soundness attack game. DB denotes a database storing user
secret key/public key pairs, indexed by public key.
3.2 Soundness
The Attack Game. We formalize the soundness guarantees that we require
from an Ad hoc Anonymous Identiﬂcation scheme in terms of a game being played
between an honest dealer and an adversary A. In this game, the adversary is
allowed to interact with three oracles OHReg (the honest user registration oracle),
OCor (the user corruption oracle), and OScr (the transcript oracle) (see Fig. 1).
The game begins with the honest dealer running the Setup algorithm for
the security parameter 1‚, and handing the resulting global parameters param
to the adversary. Then, A arbitrarily interleaves queries to the three oracles,
according to any adaptive strategy she wishes: eventually, she outputs a target
group S ⁄ (cid:181) PK0. At this point, A starts executing, in the role of the prover, a
run of the Anon-ID protocol with the honest dealer, on common inputs param and
gpk⁄ :
= Make-GPK(param; S ⁄). Notice that during such interaction, the adversary
is still allowed to query the three oracles OReg; OScr and OCor. Let ~… be the
transcript resulting from such run of the Anon-ID protocol. A wins the game if
the following conditions hold:
1. for all pk⁄ 2 S ⁄, there is an entry indexed by pk⁄ in the SK-DB Database,
and
2. ~… is a valid transcript i.e., the run completed with the honest dealer out-
putting 1, and
3. for all pk⁄ 2 S ⁄, A never queried OCor on input pk⁄;
Deﬂne SuccImp
A (‚) to be the probability that A wins the above game.
Deﬂnition 3. An Ad hoc Anonymous Identiﬂcation scheme is sound against
passive chosen-group attacks if any adversary A has negligible advantage to win
the above game:
(8‚ 2 N)(8P P T A)[SuccSnd
A (‚) • ”(‚)]
Challenge oracle OCh
S 0 (cid:181) PK0; (sk0; pk0); (sk1; pk1)
IN:
RUN: 1. b⁄ R
ˆ f0; 1g
2. if sk06›pk 0 or sk16›pk 1 then abort
3. gpk ˆ Make-GSK(param; S 0 [ fpk0; pk1g)
4. gsk⁄ ˆ Make-GSK(param; S 0 [ fpk1¡b⁄ g; (skb⁄ ; pkb⁄ ))
5. …⁄ R
ˆ Anon-IDP(param; gpk; gsk⁄) $ Anon-IDV(param; gpk)
OUT: …⁄
Fig. 2. The oracle for the anonymity attack game.
A Note on Active Security. Our deﬂnition of soundness models an adversary
that, in her attempt to fool an honest veriﬂer into accepting a \fake" run of
the Anon-ID protocol, can actively (and, in fact, adaptively) corrupt users, but
can only passively eavesdrop the communication between honest provers and
veriﬂers. One could, of course, deﬂne stronger notions of security by considering
active, concurrent or even reset attacks, along the lines of previous work on
Identiﬂcation Schemes [26, 5]; however, we refrain from doing so, both to keep the
presentation simpler, and because the main application of our Ad hoc Anonymous
Identiﬂcation schemes is to obtain new ring and group signatures scheme by
means of the Fiat-Shamir Heuristic (see Section 6.3), for which security against
a passive adversary su–ces.
3.3 Anonymity
The Attack Game. We formalize the anonymity guarantees that we require
from an Ad hoc Anonymous Identiﬂcation scheme in terms of a game being played
between an honest dealer and an adversary A. In this game, the adversary is
allowed to interact only once with a \challenge" oracle OCh, described in Fig. 2.
The game begins with the honest dealer running the Setup algorithm for the
security parameter 1‚, and handing the resulting global parameters param to the
adversary. Then, the adversary A creates as many user secret key/public key
pairs as she wishes, and experiments with the Make-GPK, Make-GSK, Anon-IDP
and Anon-IDV algorithms as long as she deems necessary; eventually, she queries
the OCh oracle, getting back a \challenge" transcript …⁄. The adversary then
continues experimenting with the algorithms of the system, trying to infer the
random bit b⁄ used by the oracle OCh to construct the challenge …⁄; ﬂnally, A
outputs a single bit ~b, her best guess to the \challenge" bit b⁄.
Deﬂne SuccAnon
A (‚) to be the probability that the bit ~b output by A at the
end of the above game is equal to the random bit b⁄ used by the OCh oracle.
Deﬂnition 4. An Ad hoc Anonymous Identiﬂcation scheme is fully anonymiz-
ing if any probabilistic, polynomial-time adversary A has success probability at
most negligibly greater than one half:
(8‚ 2 N)(8P P T A)hﬂﬂﬂ
SuccAnon
A (‚) ¡
• ”(‚)i
1
2ﬂﬂﬂ
3.4 Extensions
Identity Escrow. In some scenarios, complete anonymity might create more
security concerns than what it actually solves. Instead, some degree of \limited
anonymity", not hindering user accountability, would be preferable. In our con-
text, this can be achieved with the help of a trusted Identity Escrow Authority, or
IEA (also called Anonymity Revocation Manager elsewhere [15]), endowed with
the capability of \reading" the identity of the prover \between the lines" of any
transcript produced by a run of the Anon-ID protocol.
To enable such escrow capability, the deﬂnition of Ad hoc Anonymous Iden-
tiﬂcation scheme from Section 3.1 is modiﬂed as follows:
is
replaced
by
an
{ Register
{ The Setup algorithm is run by the IEA, and it additionally outputs an identity
escrow key skIE (from some domain SKIE), which the IEA keeps for himself.
protocol
(Registeruser; RegisterIEA), meant to be run between the prospective user and
the IEA, at the end of which the IEA learns the user’s newly generated
public key pku (possibly along with some other information auxu about u
that the IEA stores in a public registry database DB), but he doesn’t learn
anything about the corresponding secret key sku.
two-party
e–cient
{ An additional (deterministic) Extract algorithm is deﬂned, which takes as
input a transcript … (for the Anon-ID protocol), along with the Identity
Escrow secret key skIE and the registry database DB, and returns a public
key pk 2 PK0 or one of the special symbols ? and ?. Intuitively, the algorithm
should be able to recover the identity of the user who participated as the
prover in the run of the Anon-ID protocol that produced … as transcript; the
symbol ? should be output when … is ill-formed (e.g., when … comes from a
ZK simulator), whereas ? indicates failure to trace the correct identity.
Our deﬂnitions of the security properties of the system have to be adjusted,
since we now have an additional functionality that the adversary may try to
attack; moreover, the presence of the IEA may open new attack possibilities to
the adversary.
The security requirements for the new Extract algorithm are formalized by
augmenting the attack scenario deﬂning the soundness property (Section 3.2). In
this new, combined game, the adversary initially gets the IEA’s secret key skIE,
along with the public parameters param of the system. Then, the game proceeds
as described in Section 3.2, except that we loosen the conditions under which
the adversary is considered to win the game, substituting the last two caveats
with the following:
20. ~… is a valid transcript i.e., Extract(~…; skIE; DB) 6= ? and
30. for all pk⁄ 2 S ⁄, either Extract(~…; skIE; DB) 6= pk⁄, or A never queried OCor
on input pk⁄;
As for the anonymity property, the deﬂnition from Section 3.3 is changed
in that the adversary is now given access to two more oracles (beside
:
the challenge oracle OCh): a corrupted-user registration oracle OCReg()
=
:
RegisterIEA(skIE; param; DB), and a user identity extraction oracle OXtr(¢)
=
Extract(¢; skIE; DB). The adversary wins the game if she successfully guesses the
random bit chosen by the challenge oracle OCh, without ever submitting the
challenge transcript …⁄ to the extraction oracle OXtr.
Supporting Multiple Large Ad Hoc Groups. In many applications where
Ad hoc Anonymous Identiﬂcation schemes could be useful, new ad hoc groups
are often created as supersets of existing ones: for example, if ad hoc groups are
used to enforce access control, new users may be added to the group of principals
authorized to access a given resource. In such cases, the ability to \augment" a
group public key with the a new user’s public key can be very handy, especially
if coupled with algorithms to e–ciently create the corresponding group secret
key for the new user, and to update the group secret keys for the existing users.
Our model can be easily amended to capture this incremental functionality; we
refer the reader to the full version of this paper [25] for the details.
4 Generic Construction
In this section, we will establish the fact that the existence of accumulators
with one way domain implies the existence of Ad hoc Anonymous Identiﬂcation
schemes. Below we describe how the algorithms (Setup, Register, Make-GPK,
Make-GSK, Anon-IDP, Anon-IDV) can be implemented given an accumulator with
one-way domain (fF‚g‚2N, fX‚g‚2N; fZ‚g‚2N; fR‚g‚2N; ).
{ Setup executes the accumulator generation algorithm G on 1‚ to obtain
f 2 F‚. Then it samples Uf to obtain u 2R Uf . Setup terminates by setting
param := (‚; u; f; D; W ), where D and W are polynomial-time algorithms
respectively to decide and to sample the relation R‚.
{ Register ﬂrst samples a pair (x; z) 2 X‚ £ Z‚ such that (x; z) 2 R‚ using the
sampling algorithm W of the relation R‚ on input 1‚. Then, Register outputs
:
sk
= x (the user public key). Observe that
SK0 = SK
:
= z (the user secret key) and pk
:
= Z‚, PK0 = X ext
f