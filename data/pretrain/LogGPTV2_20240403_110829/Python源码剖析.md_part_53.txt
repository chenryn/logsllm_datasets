---
## Page 362
332
Python源码剖析
第13章Python运行环境初始化
wxPython时装入的路径文件。wx.pth的内容如下：
能输出图13-8右侧的“weare in site.py”。
简化为一行Python代码：“import site”。就是在这里，Python进入了site.py，从而也就
机制的核心所在，将在下一章详细剖析。在这里，我们只需要知道，这个函数调用，可以
动作是由initsite完成的。
猜测，应该就是这个site.py将site-packages目录加入到了前面提到的sys.path中。而这个
个site.py也正是Python能正确加载位于site-packages目录下的ajango的关键。我们可以
wx-28-msw-unicode
[wx.pth]
[pythonrun.c]
void Py_InitializeEx（int install_sigs)
static void initsite(void)
可以看到，Pyhon在初始化过程中确实进入了site.py，所以才有了右侧的输出。而这
对于第2条，来个具体的例子，在我的site-packages目录下，有一个wx.pth，是安装
处理site-packages目录下的所有.ph文件中的所有路径加入到sys.path中。
将site-pakcages路径加入到sys.path中，对于不同平台，又分不同情况。
>Win32平台：%PythonHome%/lib/site-packages。
在sitepy中，Python进行了两个动作。
Pyobject
initmain(O:
PyImoartHooks_Init(:
Unix/Linux平台：
PyImport_EmportModule("site"):
深度探索动态语言核心技术
%sys.exec_prefix%/lib/site-python。
%sys.exec_prefix%/lib/python/site-packages;
%osys.prefix%/lib/site-python;
*mt
Mddule
---
## Page 363
运行Python程序时可以利用的资源，如图13-9所示。
成这些初始化动作之后Python为我们准备了什么重要的东西，这些东西就是我们在正式
看能否正确地在Python中对你的module进行import动作。
Mlibi
c:\\python251/lib\/site-packages\/wx-2.8
'c\pyt hon25
到现在，Python中绝大部分重要的初始化动作都已经完成了，好了，我们来看一看完
好了，现在你可以自己在site-packages中写一个module，
"c:\\python25\/libllsite-packages,
import sys
所以，
o:\wINDowSA\system32\python25.zip,e:Mpython25\DLUs"
c:python25111ib\plat-win,e:\python25\/1ib/1ib-tk
，我的sys.path的结果如下：
error_registry
search cache
search_path
tstate_head
interp_head
搜索路径集合
builtins
sysdict
modules
next
"exceptionis"
图13-9
builtin.
"sys"
"exceptions"
,seinpou,
"path"
bultin
"sys"
main
完成初始化后的环境
dlctof exceptionsmodule
dlctof sys module
Python源码剖析
[s]
13.2
系统module初始化
module_main
ss enpo>
然后添加一个pb文件，看
一深度探索动态语言核心技术
V
333
---
## Page 364
Python源码剖析
13.3
334
路径最终又会融入同一条路径。
文件则进入另一条路径pyRun_SimpieFileExFlags，别着急，过一会就可以看到，两条
明Python是以交互式的方式运行的，从而进入PyRun_工nteractiveLoopFlags：而脚本
的编译参数，大多数情况下，都不会指定编译参数，所以我们不考察这个参数。
传入一个“。与之对应的，第一个参数fp或是指向了打开的脚本文件，或是指
果是以交互式方式运行Python，则filename为NULL，所以会为 PyRun_AnyFileExFlags
[pythonrun.c]
上将要看到的，这两种执行方式将殊途同归，进入同一个字节码虚拟机。
pythonabc.py的方式运行脚本文件。看上去这两种方式有些不同，但实际上，正如我们马
节码虚拟机后，初始化的阶段才算真正完成。
始化的动作还没有真正完成，当Python真正地进入到了我们在第2部分中详细剖析的字
[main.c]
Python通过Py_FdIsInteractive来判断fp是否指向了标准输入流，如果是，则表
如果以脚本文件方式运行Python，那这里的filename就是文件名，比如abc.py：而如
激活Python虚拟机
else
ByRiin
第13章Python运行环境初始化
/根据ED是否代表交互环境
PyRun_AnyFileExFlags(
Py_Initialize(1;
一般地，Pyhon有两种运行的方式，一种是在命令行下的交互式环境：另一种则是以
到了这里，Py山on已经完成了执行程序所必需的基础设施的建设，但是我们认为，初
return PyRun_SimpleFileExFlags(fp, filename,closeit, flags)
return err,
int
一深度探索动态语言核心技术
fclose(fp):
AnyBileExFlags(FIbE *fp,const char *Eflename， int closeit)
&ef):
对程序流程进行分流
Filename)
---
## Page 365
13.3.1
代码清单13-9
[pythonrun.c]
*flags)
m=Py Import_AddModule（
我们先来看看Python以交互式方式运行时的情形（见代码清单13-9）。
1/获得>》
021：
PySys_Getobject("psl");
psl=PyString_AsString（v):
PySys_SetObject("ps2",
PySyssetobject(*ps1",
DSZ
w
Tet
ret:
创建交互式环境提示符
=NUL）
(ret
=PyRun_IntaractiveoneFlags(fp,
=PystringAsString（w);
arena;
*m
NULL)
IA
flags)
a,
fiags,
Py_single
main
ps2
*V
cerrcode,
>中维护的dict
*W:
anduy
main
V=eyString_FromString(r..））
（<<<）buuoBuxs=
filename
Python源码剖析
p82
char
13.3激活Python虚拟机
filename,
*ilename,
一深度探索动态语言核心技术
flags）:
PyCompilerFlags
335
---
## Page 366
Python源码剖析
13.3.2
336
代码清单13-10
字空间。
将作为Python虚拟机开始执行时当前活动的frame对象的1ocal名字空间和global名
对象取出，作为参数传递给run_mode，这个参数关系极为重大，实际上这里的参数d就
用的PyRun_InteractiveOneFlags中，Pyhon完成了至关重要的两步，如代码清单13-9
所示。
处分别设置了在交互式环境中每天和我们“facetoface”的两个提示符。然后，在[3]处调
[pythonrun.c]
#define Py_file_input257
[python.h]
第13章Python运行环境初始化
脚本文件运行方式
调用run_mode，在run_mode中，将最终完成对用户输入语句的执行动作。关于这
代码清单13-9的[4]和[5]分别有如下含义：
在pyRun_InteractiveLoopFlags中，可以发现Python在代码清单13-9中的[1]和[2]
接下来，我们看一看直接运行脚本文件的方式（见代码清单13-10）。
一点，后面我们会看得很清楚。
译，其结果是构造与Python语句对应的抽象语法树（AST），并返回AST。
调用PyParser_ParseFileFlags，对用户在交互式环境下输入的Pyhon语句进行编
//121：执行脚本文件
Pyobject*m,
return 0:
//[5]：执行用户输入的Python语句
d=PyModule_GetDiaL（m):
7111在
const
(PyDiet_GetItemString(a,
PyDict_SetItemString(d,
PyModule_GetDict(m);
Pyobject
一深度探索动态语言核心技术
charext;
PyCompilerFlags
main
*a
filename,d
module中设置“
main
三
dflags,arena）;
_file
file_
le”属性
）：
==NULL)
---
## Page 367
13.3.3
代码清单13-11
码虚拟机，开始让Pyton成为一个有生命的精灵（见代码清单13-11）。
又胜利会师，现在是一起杀入run_mode的时候了。
参数globals、locals，再明显不过了。
我们可以更清楚地通过调用run_node时的变量名看到这一点。看看那个rur_mode中的
PyDictobject对象作为1ocal名字空间和global名字空间传入了run_mode。在这里，
文件的执行流程最后也进入了run_mode，而且也同样地将_main_modile中维护的
FileExFlags中被分流了，但是，它们都有着相同的动作。同交互式执行方式一样，脚本
run mod(mod
statie Pyobject
[pythonrun.c]
*globals,Pyobject
PyRun_PileExFlags(FILE *fp
Pyobfect
好了，欢呼吧，在PyRun_AnyFileExFlags中，两种执行方式分道扬，到了这里，
从run_mode开始，Pyhon现在只剩下最后一件需要完成的工作了，那就是启动字节
V= PyEval EvalCode(co, globals,localsl:
//[21：创建PyFrameObject对象，执行PyCodeObjeat对象中的字节码指令序列
很显然，
V=PyRun_FileexFlags（tp.filename,Py_file_1nput,d,d,closeit,Flags);
/[1]:
Pyobject
PyCodeObjectMco;
启动虚拟机
PyArena_Free(arena);
ret=run_mod (mod,
PyArena *arenal=PyArena_New();
mod_ty mod;
PyObject *ret;
/执
编译
fclose(fp):
(closeit)
行
基于AST编译字节码指令序列，创建FyCodeObject 对象
脚本文件的执行流程虽然和交互式执行方式的流程在PyRun_Simple-
mod,
const char *ilename，
filename, globals,
int closeit,PyCompilerFlags *flags)
const char *filename
Python源码剖析
Locais,flags, arena):
Pyobject *globals,Pyobject
13.3激活Python虚拟机
arena):
int stant
一深度探索动态语言核心技术
Pyobject
337
---
## Page 368
Python源码剖析
338
那里探索了很久，挖掘了很久，现在，我们再一次回到起始的地方，终于有了一种融会贯
Python世界中无数对象生生灭灭的字节码虚拟机一