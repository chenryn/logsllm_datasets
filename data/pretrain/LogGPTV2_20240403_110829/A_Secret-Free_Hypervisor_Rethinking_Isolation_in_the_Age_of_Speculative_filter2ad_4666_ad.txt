### 问题和优化

在原始文本中，存在一些表述不够清晰、连贯性不足以及专业术语使用不规范的问题。以下是经过优化后的版本：

---

**已识别的 Bug 及其影响**

1. **映射/取消映射调用不平衡导致的 Bug**：这些 Bug 是由于 `map` 和 `unmap` 调用次数不匹配、页偏移错误（off-by-one-page unmap）以及全局内存取消映射引起的。
2. **直接映射下的表现**：当 API 使用直接映射时，这些 Bug 并未显现，因为对直接映射的 `unmap` 调用被编译为无操作（no-ops）。

**Xen HVM 客户端中的 EPT 页**

3. **EPT 页作为性能关键的非机密数据**：对于使用 EPT 1 的 Xen HVM 客户端，我们进一步确定 EPT 页是性能关键的非机密数据，应进行全局映射以提高两阶段页表遍历的效率。

**两阶段页表遍历的性能影响**

- 在两阶段页表遍历过程中，最多需要 25 个临时映射（如图 6 所示），这会导致高且不可预测的延迟，具体取决于映射缓存的命中率。
- 对于 Xen 来说，两阶段遍历的性能至关重要，因为 Xen 超级调用 ABI 中的内存参数以 Guest 虚拟地址（GVA）传递，需要由 Hypervisor 手动遍历后才能复制内存。这是 Xen 最初完全虚拟化模式的遗留问题，其中伪物理地址（guest 物理地址）被使用。

**术语说明**

- 我们将 EPT（扩展页表）作为第二阶段页表的通用术语。在 AMD 系统中，这种页表被称为 NPT（嵌套页表）。

---

**SPEC-CPU 2017 性能测试**

- 图 7 显示了运行 SPEC-CPU 2017 时不同缓解配置的性能影响。与未缓解的基线相比，所有基准测试的性能下降均低于 3%。
- 这些结果符合预期，因为 SPEC-CPU 基准测试是 CPU 和内存密集型的，它们很少需要进入 Hypervisor。

**微基准测试**

- 我们展示了四个微基准测试：寄存器超级调用、内存超级调用、上下文切换和 IPI 性能。
  - 寄存器超级调用的输入和输出参数完全在寄存器中，而内存超级调用则需要映射和复制客户机内存。
  - 上下文切换测试中，我们从两个域启动两个客户机 vCPU，并在同一个主机核心上调度它们。
  - IPI 基准测试测量全局 IPI 序列的同步操作，在基线配置中，其参数放置在调用者的堆栈上。

**表 II 显示了相对于现有 Xen 缓解措施的秘密自由设计的开销。**

- 秘密自由版本在多个类别中表现出接近基线的性能。
- 如果将 EPT 视为客户机内存秘密，则 HVM 内存超级调用的性能会因两阶段页表遍历所需的 25 个临时映射而下降 28.26%。
- 默认的 Xen 缓解措施的开销来自于受限的推测执行和显式的分支预测器屏障，这使得 PV 寄存器超级调用的延迟翻倍。

**全上下文切换的性能下降**

- 秘密自由实现显示了明显的全上下文切换性能下降，主要来自三个来源：
  1. 微架构缓冲区刷新：防止下一个客户机嗅探秘密并隔离恶意状态（如误导的分支预测器）。
  2. 每个 vCPU 栈切换：增加了缓存和 TLB 缺失。
  3. 全局缓冲区使用：减少了数据局部性。

**IPI 性能**

- IPI 性能基本保持不变，开销主要由 IPI 本身而非推测性缓解措施引起。
- 同步发送 IPI 显示出高延迟和方差。相比之下，使用全局反弹缓冲区的秘密自由 Hypervisor 的开销可以忽略不计。

**HVM MMIO 微基准测试**

- 我们进一步通过测量每秒可发出的最大 `gettimeofday()` 调用次数来微基准测试一个更现实的设置。
- 表 III 显示了 HPET MMIO 区域使用默认 2MB 大页时的最大 `gettimeofday()` 频率（以 MHz 为单位）。SF 和 SF+EPT 分别映射 4 页和 19 页。
- 与基线相比，SF 仅将 `gettimeofday()` 频率降低了 3.26%，而默认的 Xen 缓解措施使性能下降了 24.68%。

**I/O 性能**

- 图 8 显示了磁盘和网络 I/O 吞吐量的开销。
- 顺序读写饱和了后备存储，但随机同步 4K I/O 受到前端和后端驱动程序之间通信的瓶颈限制。
- 在这些基准测试中，所有秘密自由配置都显示出接近基线的竞争力，SF+EPT 的最大降幅为 7.67%。相比之下，Xen 缓解措施使随机同步 I/O 下降超过 15%。

**应用基准测试**

- 我们收集了包括 Apache httpd、Linux 内核编译、Numpy、LLVM 编译、LevelDB、Nginx、PostgreSQL (pgbench)、SQLite 和代码库解压缩在内的多种实际工作负载的结果。
- 除了 XPTI 之外，每个配置的几何平均开销均低于 2.5%，与之前的压力测试相比几乎可以忽略不计。

**安全性评估**

- 我们使用三类概念验证投机执行攻击（权限、强制和微架构）来评估秘密自由 Xen Hypervisor 的安全性。
- 攻击从一个无特权的 domU 发起，受害者包含一个单独 VM 中的秘密消息缓冲区。
- 我们还评估了针对 ret2dir 的攻击，通过向 Xen 注入堆溢出漏洞来实现。

**Meltdown 攻击**

- 我们启动了一个恶意的 PV domU 来通过 Xen 直接映射转储受害者的缓冲区。

**Spectre 攻击**

- 攻击者尝试误导分支预测器，将 Hypervisor 投机执行重定向到访问秘密消息。

**L1TF 攻击**

- 恶意域嗅探兄弟线程留在 L1 缓存中的任何秘密。重定向代码执行到直接映射无效，因为 Xen 将其标记为不可执行。

**ret2dir 攻击**

- 我们复制了 [25] 中的攻击，使用堆栈转向小工具将 Hypervisor 堆栈指针转向直接映射上的恶意帧。

---

通过上述优化，文本变得更加清晰、连贯和专业。希望这对你有所帮助！