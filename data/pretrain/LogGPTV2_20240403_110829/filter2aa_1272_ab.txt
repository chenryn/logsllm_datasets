First, we systematically analyze the email speciﬁcations.
In terms of syntax, we extract the ABNF rules [10], focusing
on headers (e.g., Mail From/From/Helo/Sender headers)
related to authentication. We also pay attention to seman-
tics, particularly the identity veriﬁcation of emails at each
stage in the RFCs. Second, we collect legitimate email sam-
ples and generate the test samples with authentication-related
headers based on the ABNF grammar [17]. Since common
email services usually refuse to handle emails with highly
deformed headers, we specify certain header values for our
empirical experiment purposes. For example, we limit the
value of domain to several famous email domain names (e.g.,
gmail.com, icloud.com). Third, we introduce the common
mutation methods in protocol fuzzing [35], such as header re-
peating, inserting spaces, inserting Unicode characters, header
encoding, and case variation. Fourth, we use the generated
samples to test the security veriﬁcation logic of the target
email system in four stages. Finally, we analyze and sum-
marize the adversarial techniques that make email sender
spooﬁng successful in practice.
3.4
Experiment Setup
In this work, we aim to summarize the potential email spoof-
ing methods against the tested email services. Thus, we try to
ﬁnd out all veriﬁcation issues from the four stages of the email
transmission process mentioned in Section 2. Below, we ﬁrst
introduce the successful attacks from each stage separately.
Then, we discuss our efforts to minimize the measurement
bias and avoid ethical problems.
The Successful Attacks. We consider an email spooﬁng at-
tack successful if either of the following four conditions is
satisﬁed. (1) In the email sending authentication stage, an at-
tacker can modify the identiﬁers (e.g., Auth username/ MAIL
From/ From) arbitrarily. (2) In the email receiving veriﬁcation
stage, the receiver’s MTA gives a "none/pass" veriﬁcation
result even if the spoofed domain name has already deployed
strict SPF/DKIM/DMARC policies. Since the veriﬁcation
results are not always shown in the email headers, we can
infer the result by checking whether the email has entered the
inbox as an alternative. Besides, we consider an attack failed
if our spooﬁng email is dropped into the spam box, which
means the receiver’s MTA has detected the spooﬁng and taken
defensive measures. To avoid accidental cases, we repeat each
attack three times, ensuring that the spooﬁng email has actu-
ally penetrated the security protocols. Only the attacks that
work all three times are regarded as successful attacks. (3)
In the email forwarding stage, the forwarder gives a higher
security endorsement to the forwarded email. Additionally, an
attack is also considered successful if the attacker can freely
conﬁgure forwarded emails to any accounts without any au-
thentication veriﬁcation. (4) In the email UI rendering stage,
the displayed email address is inconsistent with the real one.
In this stage, we use APPEND function of the IMAP [11] pro-
tocol to deliver the spooﬁng emails into the inbox, since we
only need to check the UI rendering results rather than bypass
the spam engine. Finally, we collect information and analyze
the results depend on the webmail and email clients on the UI
level.
Minimize the Measurement Bias. First, to exclude the in-
ﬂuence of the spam detection, we select the legitimate, be-
nign and desensitized email samples provided by our indus-
trial partner, a famous email provider, as the contents of our
spooﬁng emails. These emails’ content is legal and harm-
less and can not be judged as spam. Second, all spooﬁng
emails are sent from 15 IP addresses located in different re-
gions with an interval of 10 minutes. Furthermore, we deploy
MX/TXT/PTR records for the attacker’s domain names and
IP addresses. Third, to test how the receiver’s MTA handles
email with "fail" SPF/DMARC veriﬁcation results, we repro-
duce the spooﬁng experiments in Hu’s paper [20] on our target
30 email services. We ﬁnd that 23 of them reject the emails
with "fail" SPF/DMARC veriﬁcation results. The remaining
ones mark them as spams. Besides, the results show that most
of the vulnerabilities pointed in Hu’s paper [20] have been
ﬁxed in the past two years.
Ethics. We have taken active steps to ensure research ethics.
Our measurement work only uses dedicated email accounts
owned by ourselves. No real users are affected by our experi-
ments. We have also carefully controlled the message sending
rate with intervals over 10 minutes to minimize the impact on
the target email services.
3.5
Experiment Results
This work organizes all testing results in Table 1 and Ta-
ble 2 to provide a general picture of the experiment results
for sender spooﬁng attacks. The details of each attack and
spooﬁng results are discussed in Section 4. We summarize
our experiment ﬁndings as follows.
First, we measured the deployment and veriﬁcation of email
security protocols by these email services. All email services
deploy the SPF protocol on the sender’s side, while only 23
services deploy all of the three protocols. Surprisingly, all
email services run the SPF, DKIM and DMARC detection
on the receiver’s side. However, only 12 services perform the
sender inconsistency checks. Second, all target email services
and email clients are vulnerable to certain types of attacks.
Finally, combined attacks allow attackers to forge spooﬁng
email which looks more authentic.
4
Email Sender Spooﬁng Attacks
This section describes the various techniques employed in
email spooﬁng attacks. We divide the attacks into four cate-
gories, corresponding to the four authentication stages in the
email delivery process.
4.1
Attacks in Email Sending Authentication
Email sending veriﬁcation is a necessary step to ensure email
authenticity. Attacks in email sending authentication can
abuse the IP reputation of a well-known email service. They
can even bypass all the veriﬁcation of SPF/DKIM/DMARC
protocols, which poses a signiﬁcant threat to the email secu-
rity ecosystem. These attacks are mainly used in the shared
attack model (Model a⃝).
As mentioned in Section 2.1, there are three sender identi-
ﬁers in email sending process: (1) Auth username; (2) Mail
From; (3) From. An attack is considered successful while it
can arbitrarily control these identiﬁers during email sending
authentication process.
The Inconsistency between Auth username and Mail
From headers (A1). As shown in Figure 5(a), an attacker can
pretend to be any user under the current domain name to send
Table 1: Sender spooﬁng experiment results on 30 target email services.
Email Services
Protocols Deployment
UI Protections
Weaknesses in Four Stages of Email Flows
SPF
DKIM
DMARC
SIC
Sending
Receiving
Forwarding
UI Rendering
Gmail.com
✓
✓
✓
✓
A6
A12
Zoho.com
✓
✓
✓
✓
A2
A4
A11
A13
iCloud.com
✓
✓
✓
A2
A4, A7
A9
A12
Outlook.com
✓
✓
✓
A2
A7
A9
A14
Mail.ru
✓
✓
✓
A4
A12
Yahoo.com
✓
✓
✓
A2
A3, A7
A10
A14
QQ.com
✓
✓
✓
✓
A2
A5
A13, A14
139.com
✓
✓
✓
A4
A13
Sohu.com
✓
A2
A4, A5
A9
A13
Sina.com
✓
A2
A3, A4, A5, A8
A13, A14
Tom.com
✓
✓
✓
A2
A9
Yeah.com
✓
✓
✓
✓
A2
A3, A4, A5, A7, A8
A9
A12, A13, A14
126.com
✓
✓
✓
✓
A2
A3, A4, A5, A8
A9
A12, A13, A14
163.com
✓
✓
✓
✓
A2
A3, A4, A5, A7, A8
A9
A12, A13, A14
Aol.com
✓
✓
✓
A2
A5, A7
A14
Yandex.com
✓
✓
✓
A3, A4,A6, A7, A8
A9
A14
Rambler.ru
✓
✓
✓
A2
A3
Naver.com
✓
✓
✓
A2
A4, A5, A8
21cn.com
✓
A2
A4, A5
A9
Onet.pl
✓
A2
A4, A5
Cock.li
✓
✓
A2
A3, A4
A13, A12
Daum.net
✓
✓
A5
Hushmail.com
✓
✓
✓
A3, A4, A8
A12
Exmail.qq.com
✓
✓
✓
✓
A2
A5
A14
Coremail.com
✓
✓
✓
✓
A2
A8
A9
Ofﬁce 365
✓
✓
✓
✓
A2
A4
A9, A10,A11
A14
Alibaba Cloud
✓
✓
✓
✓
A2
A3, A4, A5, A8
A10
A13
Zimbra
✓
✓
✓
✓
A1, A2
A3, A5, A8
A9
A12, A13
EwoMail
✓
✓
✓
A2
A3, A4, A8
A13