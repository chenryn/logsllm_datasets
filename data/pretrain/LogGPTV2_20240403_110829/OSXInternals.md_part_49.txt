### Memory and mbuf Cluster Pool Initialization

The `mbinit()` function assigns memory pages to the mbuf cluster pool. Additionally, it starts a kernel thread that runs `mbuf_expand_thread()`, defined in `bsd/kern/uipc_mbuf.c`. This thread is responsible for expanding the cluster pool if the number of free clusters becomes low.

### Audit Subsystem Initialization

`audit_init()`, located in `bsd/kern/kern_audit.c`, initializes the kernel's audit event table, audit memory zone, associated data structures, and the BSM (Basic Security Module) audit subsystem. It calls `kau_init()` from `bsd/kern/kern_bsm_audit.c` to initialize the BSM audit subsystem. `kau_init()` in turn calls `au_evclassmap_init()` from `bsd/kern/kern_bsm_klib.c` to set up the initial mapping between audit events and event classes. For example, the event `AUE_OPEN_R` (defined in `bsd/bsm/audit_kevents.h`) is mapped to the event class `AU_FREAD` (defined in `bsd/sys/audit.h`). `audit_init()` also initializes a memory zone (`audit_zone`) for audit records. Note that audit logging does not start until the user-space audit daemon (`auditd`) is started.

### kqueue Kernel Event Notification Mechanism Initialization

`knote_init()`, found in `bsd/kern/kern_event.c`, initializes a memory zone (`knote_zone`) for the kqueue kernel event notification mechanism and allocates related locks.

### Asynchronous I/O (AIO) Subsystem Initialization

`aio_init()`, located in `bsd/kern/kern_aio.c`, initializes the AIO subsystem. This includes setting up locks, queues, statistics, and a memory zone (`aio_workq_zonep`) for AIO work queue entries. It creates AIO worker threads by calling `_aio_create_worker_threads()`, with the number of threads determined by the `aio_worker_threads` variable, which is initialized to `AIO_THREAD_COUNT` (set to 4 in `bsd/conf/param.c`). Each AIO worker thread runs the `aio_work_thread()` function.

### Pipe Data Structures Initialization

`pipeinit()`, found in `bsd/kern/sys_pipe.c`, initializes a memory zone (`pipe_zone`) for pipe data structures and allocates locking data structures.

### POSIX and System V IPC Mechanisms Initialization

`bsd_init()` initializes locks for the POSIX and System V IPC mechanisms. It also calls `pshm_cache_init()` from `bsd/kern/posix_shm.c` and `psem_cache_init()` from `bsd/kern/posix_sem.c` to initialize hash tables for storing hash values of looked-up names of POSIX shared memory and semaphores, respectively.

### Time Zone Lock Initialization

`bsd_init()` calls `time_zone_slock_init()` from `bsd/kern/kern_time.c` to initialize `tz_slock`, a simple lock used for accessing the global time zone structure `tz`, defined in `bsd/conf/param.c`. This lock is used by the `gettimeofday()` and `settimeofday()` system calls.

### Sysctl Registration

`bsd_init()` registers sysctl object IDs from statically defined sysctl lists, such as `newsysctl_list` and `machdep_sysctl_list`, using `sysctl_register_fixed()` from `bsd/kern/kern_newsysctl.c`. This includes creating and populating top-level sysctl nodes like `kern`, `hw`, `machdep`, `net`, `debug`, and `vfs`. It then calls `sysctl_mib_init()` from `bsd/kern/kern_mib.c` to populate optional sysctls.

### Networking Subsystem Initialization

`bsd_init()` initiates the networking subsystem initialization. `dlil_init()`, located in `bsd/net/dlil.c`, initializes the data link interface layer (DLIL), including queues for data link interfaces, interface families, and protocol families. It also starts the DLIL input thread (`dlil_input_thread()`) and a thread for delayed detachment of protocols, protocol filters, and interface filters (`dlil_call_delayed_detach_thread()`).

The input thread services two input queues of mbufs: one for the loopback interface and the other for non-loopback interfaces. For each packet, it invokes `dlil_input_packet()` with the interface, an mbuf pointer for the packet, and a pointer to the packet header. The input thread then calls `proto_input_run()`, which handles pending attachment or detachment of protocol input handler functions and processes packets for each protocol.

`proto_kpi_init()`, found in `bsd/net/kpi_protocol.c`, allocates locking data structures for the protocol code.

`socketinit()`, located in `bsd/kern/uipc_socket.c`, allocates locking data structures and initializes a memory zone (`so_cache_zone`) for the kernel's socket-caching mechanism. It also arranges for `so_cache_timer()` to run periodically, freeing cached socket structures older than `SO_CACHE_TIME_LIMIT`.

`domaininit()`, found in `bsd/kern/uipc_domain.c`, creates a list of all available communication domains and calls `init_domain()` on each domain. `init_domain()` initializes the domain and its supported protocols, updating global variables like `max_linkhdr`, `max_protohdr`, `max_hdr`, and `max_datalen`.

### Miscellaneous BSD Initialization (Part 3)

`bsd_init()` sets process 0's root and current directory pointers to `NULL` and wakes threads sleeping on `lbolt`, the global once-a-second sleep address. It calls `timeout()` to start running `lightning_bolt()`, which continues to call `thread_wakeup()` on `lbolt` every second and checks for pending log entries.

`bsd_init()` calls `bsd_autoconf()`, which initializes the pseudo-devices by iterating over the `pseudo_inits` array and calling each element's `ps_func` function. It also publishes the BSD kernel as a resource named "IOBSD" using `IOKitBSDInit()`.

`bsd_init()` attaches the loopback interface by calling `loopattach()`, which registers the `PF_INET` and `PF_INET6` protocol families and attaches the loopback interface to the Berkeley Packet Filter (BPF) mechanism. It also initializes the Ethernet interface family and support for VLANs and link aggregation.

### Mounting the Root File System

`bsd_init()` initiates mounting of the root file system in an infinite loop that breaks when the root file system is successfully mounted. It calls `setconf()` to determine the root device and whether it is accessed over the network, and then attempts to mount the root device using `vfs_mountroot()`.

`setconf()` uses `IOFindBSDRoot()` to determine the root device. If `IOFindBSDRoot()` fails, `setconf()` may set the root device to `/dev/sd0a` for debugging. It also sets the `mountroot` function pointer based on the value of the `flags` variable, which indicates if the root is a network boot device.

`IOFindBSDRoot()` keeps track of the number of times it has been called and sleeps for 5 seconds on subsequent invocations. It checks for the presence of the `rd` and `rootdev` boot arguments and retrieves their values.