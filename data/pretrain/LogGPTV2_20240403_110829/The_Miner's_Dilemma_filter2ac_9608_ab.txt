our analysis.
Many pools are open and accept any interested miner. A
pool interface is typically comprised of a web interface for
registration and a miner interface for the mining software.
In order to mine for a pool, a miner registers with the
web interface, supplies a Bitcoin address to receive its
future shares of the revenue, and receives from the pool
credentials for mining. Then he feeds his credentials and
the pool’s address to its mining rig, which starts mining.
The mining rig obtains its tasks from the pool and sends
partial and full proof of work, typically with the STRATUM
protocol [20]. As it ﬁnds blocks, the pool manager credits
the miner’s account according to its share of the work, and
transfers these funds either on request or automatically to
the aforementioned Bitcoin address.
Too Big Pools
Despite their important role of enabling small-scale min-
ing, pools can constitute a threat to the Bitcoin system if their
size is too large. If one pool controls the majority of mining
power, the system becomes unstable [21], [22] (and [23]
warns that the system is unstable with even smaller pools).
Arguably, in realistic scenarios of the Bitcoin system no
pool controls a majority of the mining power. As an example,
for one day in June 2014 a single pool called GHash.IO
produced over 50% of the blocks in the Bitcoin main
chain. The Bitcoin community backlashed at the pool (which
has done nothing worse than being extremely successful).
GHash.IO reduced its relative mining power and publicly
committed to stay away from the 50% limit.
C. Block Withholding and its Detection
Classical Block Withholding [10] is an attack performed
by a pool member against the other pool members. The
attacking miner registers with the pool and apparently starts
mining honestly — it regularly sends the pool partial proof
of work. However, the attacking miner sends only partial
proof of work. If it ﬁnds a full solution that constitutes a full
proof of work it discards the solution, reducing the pool’s
total revenue.3 This attack is illustrated in Figure 2.
The attacker does not change the pool’s effective mining
power, and does not affect directly the revenue of other
pools. However, the attacked pool shares its revenue with
the attacker. Therefore each miner earns less, as the same
revenue is distributed among more miners.
Recall that the proof of work is only valid for a speciﬁc
block, as it is the nonce with which the block’s hash is
smaller than its target. The attacking miner cannot use it.
3Although the term block withholding has become canonical, note that
the block is discarded and never introduced into the system as the name
block withholding implies.
Miners
Miners
Miners
Miners
Pool 1
Pool 2
Bitcoin Network
Figure 2. Classical Block Withholding attack. A group of miners attack
Pool 2 with a block withholding attack, denoted by a dashed red arrow.
Moreover, this attack reduces the attacker’s revenue com-
pared to solo mining or honest pool participation: It suffers
from the reduced revenue like the other pool participants,
and its revenue is less than its share of the total mining
power in the system. This attack can therefore only be used
for sabotage, at a cost to the attacker.
Detection: Even if a pool detects that it is under a block
withholding attack, it might not be able to detect which
of its registered miners are the perpetrators. A pool can
estimate its expected mining power and its actual mining
power by the rates of partial proofs of work and full proofs
of work, respectively, supplied by its miners. A difference
above a set conﬁdence interval indicates an attack. To detect
whether a single miner is attacking it, the pool must use a
similar technique, comparing the estimated mining power of
the attacker based on its partial proof of work with the fact
it never supplies a full proof of work. If the attacker has
a small mining power, it will send frequent partial proofs
of work, but the pool will only expect to see a full proof
of work at very low frequency. Therefore, it cannot obtain
statistically signiﬁcant results that would indicate an attack.
An attacker can use multiple small block withholding
miners and replace them frequently. A small miner is,
for example, a miners whose expected full proof of work
frequency is yearly. Such a miner will see a non-negligible
average daily revenue (B25/365 ≈ B0.07). If the attacker
replaces such a small miner every month, he will collect
about B2 at the end of each month. The pool must decide
within this month whether the miner is an attacker (and
revoke its earnings), or just an unlucky honest miner. Since
an honest miner of this power is unlikely to ﬁnd a full proof
of work within a month (probability of about 8% according
to the exponential distribution) a pool that rejects miners
based on this criterion would reject the majority of its honest
miners. The alternative of rejecting small miners in general
or distributing revenue on a yearly basis contradicts the goal
of pooled mining.
9292
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:05:40 UTC from IEEE Xplore.  Restrictions apply. 
III. MODEL AND STANDARD OPERATION
We specify the basic model in which participants operate
in Section III-A, proceed to describe how honest miners
operate in this environment in Sections III-B and III-C, and
how the classical block withholding attack is implemented
with our model in Section III-D.
A. Model
The system is comprised of the Bitcoin network and nodes
with unique IDs, and progresses in steps. A node i generates
tasks which are associated with its ID i.
A node can work on a task for the duration of a step. The
result of this work is a set of partial proofs of work and a
set of full proofs of work. The number of proofs in each set
has a Poisson distribution, partial proofs with a large mean
and full proofs with a small mean. Nodes that work on tasks
are called a miners, miners have identical power, and hence
identical probabilities to generate proofs of work.
The Bitcoin network pays for full proofs of work. To
acquire this payoff an entity publishes a task task and its
corresponding proof of work to the network. The payoff
goes to the ID associated with task. The Bitcoin protocol
normalizes revenue such that the average total revenue dis-
tributed in each step is a constant throughout the execution
of the system. Any node can transact Bitcoins to another
node by issuing a Bitcoin transaction.
Nodes that generate tasks but outsource the work are
called pools. Pools send tasks to miners over the network,
the miners receive the tasks, perform the work, and send the
partial and full proofs of work to the pool.
Apart from working on tasks, all local operations, pay-
ments, message sending, propagation, and receipt are in-
stantaneous.
We assume that the number of miners is large enough such
that mining power can be split arbitrarily without resolution
constraints.
Denote the number of pools with p, the total number
of mining power in the system with m and the miners
participating in pool i (1 ≤ i ≤ p) with mi. We use a quasi-
static analysis where miner participation in a pool does not
change over time.
B. Solo Mining
A solo miner is a node that generates its own tasks. In
every step it generates a task, works on it for the duration
of the step and if it ﬁnds a full proof of work, it publishes
this proof of work to earn the payoff.
C. Pools
A pool is a node that serves as a coordinator and multiple
miners can register to a pool and work for it. In every step
it generates a task for each registered miner and sends it
over the network. Each miner receives its task and works on
it for the duration of the step. At the end of the step, the
miner sends the pool the full and the partial proofs of work
it has found. The pool receives the proofs of work of all its
miners, registers the partial proofs of work and publishes the
full proofs. It calculates its overall revenue, and proceeds to
distribute it among its miners. Each miner receives revenue
proportional to its success in the current step, namely the
ratio of its partial proofs of work out of all partial proofs of
work the pool received. We assume that pools do not collect
fees of the revenue. Pool fees and their implications on our
analysis are discussed in Section IX.
D. Block Withholding Miner
A miner registered at a pool can perform the classical
block withholding attack. An attacker miner operates as
if it worked for the pool. It receives its tasks and works
on them, only at the end of each round it sends only its
partial proofs of work, and omits full proofs of work if it
had found any. The pool registers the miner’s partial proofs,
but cannot distinguish between miners running honestly and
block withholding miners.
The implications are that a miner that engages in block
withholding does not contribute to the pool’s overall mining
power, but still shares the pool’s revenue according to its
sent partial proofs of work.
To reason about a pool’s efﬁciency we deﬁne its per-miner
revenue as follows.
Deﬁnition 1 (Revenue density). The revenue density of a
pool is the ratio between the average revenue a pool member
earns and the average revenue it would have earned as a
solo miner.
The revenue density of a solo miner, and that of a miner
working with an unattacked pool are one. If a pool is at-
tacked with block withholding, its revenue density decreases.
E. Continuous Analysis
Because our analysis will be of the average revenue,
we will consider proofs of work, both full and partial, as
continuous deterministic sizes, according to their probability.
Work on a task therefore results in a deterministic fraction
of proof of work.
IV. THE POOL GAME
A. The Pool Block Withholding Attack
Just as a miner can perform block withholding on a pool j,
a pool i can use some of its mining power to inﬁltrate
a pool j and perform a block withholding attack on j.
Denote the amount of such inﬁltrating mining power at step t
by xi,j(t). Miners working for pool i, either mining honestly
or used for inﬁltrating pool j, are loyal to pool i. At the end
of a round, pool i aggregates its revenue from mining in the
current round and from its inﬁltration in the previous round.
It distributes the revenue evenly among all its loyal miners
according to their partial proofs of work. The pool’s miners
9393
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:05:40 UTC from IEEE Xplore.  Restrictions apply. 
are oblivious to their role and they operate as regular honest
miners, working on tasks.
B. Revenue Convergence
Note that pool j sends its revenue to inﬁltrators from
pool i at the end of the step, and this revenue is calculated
in pool i at the beginning of the subsequent step. If there is
a chain of pools of length (cid:2) where each pool inﬁltrates the
next, the pool revenue will not be static, since the revenue
from inﬁltration takes one step to take each hop. If (cid:2)max is
the longest chain in the system, the revenue stabilizes after
(cid:2)max steps. If there are loops in the inﬁltration graph, the
system will converge to a certain revenue, as stated in the
following lemma.
Lemma 1 (Revenue convergence). If inﬁltration rates are
constant, the pool revenues converge.
Proof: Denote the revenue density of pool i at the end
of step t by ri(t), and deﬁne the revenue density vector
C. The Pool Game
In the pool game pools try to optimize their inﬁltration
rates of other pools to maximize their revenue. The overall
number of miners and the number of miners loyal to each
pool remain constant throughout the game.
Time progresses in rounds. Let s be a constant integer
large enough that revenue can be approximated as its conver-
gence limit. In each round the system takes s steps and then
a single pool, picked with a round-robin policy, may change
its inﬁltration rates of all other pools. The total revenue of
each step is normalized to 1/s, so the revenue per round is
one.
The pool
taking a step knows the rate of inﬁltrators
attacking it (though not their identity) and the revenue rates
of each of the other pools. This knowledge is required
to optimize a pool’s revenue, as we see next. We explain
in Section VIII how a pool can technically obtain this
knowledge.
D. General Analysis
T .
r(t) Δ
= (r1(t), . . . , rp(t))
In every round, pool i uses its mining power of m1−(cid:2)
j x1,j
used for direct mining (and not attacking), and shares it
among its m1 +
including malicious
inﬁltrators (all sums are over the range 1, . . . , p). Denote
the direct mining revenue density of each pool (ignoring
normalization, which is a constant factor) with the vector
j xj,1 members,
(cid:2)
(cid:3)
m1 −(cid:2)
(cid:2)
m1 +
m Δ
=
j x1,j
j xj,1
, . . . ,
(cid:2)
mp − xp,j
j xj,p
mp +
(cid:4)T
The revenue of Pool i in step t taken through inﬁltration
from pool j’s revenue in step t − 1 is xi,jrj(t − 1). Pool i
k xk,i members —
distributes this revenue among its mi +
loyal and inﬁltrators. Deﬁne the p × p inﬁltration matrix by
its i, j element
(cid:2)
(cid:6)
(cid:5)
G Δ
=
(cid:2)
xi,j
mi +
k xk,i
ij
.
And the revenue vector at step t is
r(t) = m + Gr(t − 1) .
(1)
Since the row sums of the inﬁltration matrix are smaller
than one, its largest eigenvalue is smaller than 1 according
to the Perron-Frobenius theorem. Therefore, the revenues at
all pools converge as follows:
(cid:4)
Gt(cid:2)
(cid:3)
t−1(cid:7)
t(cid:2)=0
r(t) =
m + Gtr(0)
t→∞−−−→ (1 − G)
−1m .
(2)
9494
.
Ri
Δ
=
(3)
Recall that mi is the number of miners loyal to pool i. and
xi,j(t) is the number of miners used by pool i to inﬁltrate
pool j at step t.
The mining rate of pool i is therefore the number of its
loyal miners minus the miners it uses for inﬁltration. This
effective mining rate is divided by the total mining rate in
the system, namely the number of all miners that do not
engage in block withholding4. Denote the direct mining rate
of pool i at step t by
mi −(cid:2)p
(cid:2)p
m −(cid:2)p
j=1
j=1 xi,j
k=1 xj,k
The revenue density of pool i at the end of step t is its
revenue from direct mining together with its revenue from
inﬁltrated pools, divided by the number of its loyal miners
together with block-withholding inﬁltrators that attack it:
ri(t) =
Ri(t) +
mi +
j=1 xi,j(t)rj(t)
j=1 xj,i(t)
.
(4)