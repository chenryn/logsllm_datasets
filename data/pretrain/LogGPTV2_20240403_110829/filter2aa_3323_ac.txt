SWAP1
63
0x0000004e f3
RETURN
64
65
loc_0000004f:
66
0x0000004f 5b
JUMPDEST
67
0x00000050 92
SWAP3
68
0x00000051 91
SWAP2
69
0x00000052 50
POP
70
0x00000053 50
POP
71
0x00000054 56
JUMP
Listing 16: Runtime Bytecode Porosity Disassembly
First, the dispatcher reads the 4 bytes function hash from the envi-
ronment block by calling
calldataload(0x0) / exp(0x2, 0xe0) .
Since the
CALLDATALOAD instruction reads a 256-bit integer by default, therefore it is
followed by a division to ﬁlter the ﬁrst 32-bits out.
18
1
(0x12345678aaaaaaaabbbbbbbbccccccccdddddddd000000000000000000000000 /
2
0x0000000100000000000000000000000000000000000000000000000000000000)
3
= 0x12345678
Listing 17: dispdisasm
We can try and emulate the code using the EVM emulator or using poros-
ity as long as Ethereum is used in the following manner as illustrated in
listing 18.
1
PS C:\Program Files\Geth> .\evm.exe \
2
--code 60e060020a6000350463deadbabe \
3
--debug \
4
--input 12345678aaaaaaaabbbbbbbbccccccccdddddddd
5
PC 00000014: STOP GAS: 9999999920 COST: 0
6
STACK = 2
7
0000: 00000000000000000000000000000000000000000000000000000000deadbabe
8
0001: 0000000000000000000000000000000000000000000000000000000012345678
9
MEM = 0
10
STORAGE = 0
Listing 18: EVM Emulator
We can notice there are two PUSH4 instructions that corresponds to the
function hashes we previously computed.
In the above scenario the equivalent EVM code would translate to the
pseudo-code jumpi(eq(calldataload(0x0) / exp(0x2, 0xe0), 0xeee97206)) . Us-
ing Control Flow Graph (CFG) feature of Porosity, we can generate a static
CFG or a dynamic CFG. Both graphs will be generated in GraphViz format.
Static CFG often contains orphan basic blocks, due to the fact that some
destination addresses are computed at runtime. While the dynamic CFG
resolves those orphan basic blocks by emulating the code as we can see in
the output of both ﬁg. 1 and ﬁg. 2.
19
Figure 1: Static CFG
Figure 2: Enulated CFG
This helps us to translate such graph to the following pseudo like C code,
as shown in listing 19.
1
hash = calldataload(0x0) / exp(0x2, 0xe0);
2
switch (hash) {
3
case 0xeee97206: // double(uint256)
4
memory[0x60] = calldataload(0x4) * 2;
5
return memory[0x60];
6
break;
7
case 0xf40a049d: // triple(uint256)
8
memory[0x60] = calldataload(0x4) * 3;
9
return memory[0x60];
10
break;
11
default:
12
// STOP
13
break;
14
}
Listing 19: Static/Dynamic Graph Pseudo-C Code
As we can notice from the above pseudo code. Each runtime code has a
dispatcher for each user-deﬁned function. Once it is decompiled we get the
following output shown in listing 20.
20
1
contract C {
2
function double(int arg_4) {
3
return arg_4 * 2;
4
}
5
6
function triple(int arg_4) {
7
return arg_4 * 3;
8
}
9
}
Listing 20: Decompiled Pseudo-C code
7
Code Analysis
7.1
Vulnerable Contract
Let’s take a simple vulnerable smart contract such as the one shown in list-
ing 21. The detailed analysis of the vulnerability has already been published
by Abhiroop Sarkar in his blog and can be thoroughly read there.
21
7.1.1
Solidity source code
1
contract SendBalance {
2
mapping ( address => uint ) userBalances ;
3
bool withdrawn = false ;
4
5
function getBalance (address u) constant returns ( uint ){
6
return userBalances [u];
7
}
8
9
function addToBalance () {
10
userBalances[msg.sender] += msg.value ;
11
}
12
13
function withdrawBalance (){
14
if (!(msg.sender.call.value (
15
userBalances [msg . sender ])())) { throw ; }
16
userBalances [msg.sender ] = 0;
17
}
18
}
Listing 21: Vulnerable Smart Contract
22
7.1.2
Runtime Bytecode
1
60606040526000357c01000000000000000000000000000000 \
2
00000000000000000000000000900480635fd8c7101461004f \
3
578063c0e317fb1461005e578063f8b2cb4f1461006d576100 \
4
4d565b005b61005c6004805050610099565b005b61006b6004 \
5
80505061013e565b005b610083600480803590602001909190 \
6
505061017d565b604051808281526020019150506040518091 \
7
0390f35b3373ffffffffffffffffffffffffffffffffffffff \
8
ff16600060005060003373ffffffffffffffffffffffffffff \
9
ffffffffffff16815260200190815260200160002060005054 \
10
60405180905060006040518083038185876185025a03f19250 \
11
5050151561010657610002565b6000600060005060003373ff \
12
ffffffffffffffffffffffffffffffffffffff168152602001 \
13
908152602001600020600050819055505b565b346000600050 \
14
60003373ffffffffffffffffffffffffffffffffffffffff16 \
15
81526020019081526020016000206000828282505401925050 \
16
819055505b565b6000600060005060008373ffffffffffffff \
17
ffffffffffffffffffffffffff168152602001908152602001 \
18
6000206000505490506101b6565b91905056
Listing 22: Vulnerable Smart Contract Runtime Bytecode
23
7.1.3
ABI Deﬁnition
1
[
2
{
3
"constant": false,
4
"inputs": [],
5
"name": "withdrawBalance",
6
"outputs": [],
7
"type": "function"
8
},
9
{
10
"constant": false,
11
"inputs": [],
12
"name": "addToBalance",
13
"outputs": [],
14
"type": "function"
15
},
16
{
17
"constant": true,
18
"inputs": [
19
{
20
"name": "u",
21
"type": "address"
22
}
23
],
24
"name": "getBalance",
25
"outputs": [
26
{
27
"name": "",
28
"type": "uint256"
29
}
30
],
31
"type": "function"
32
}
33
]
Listing 23: Vulnerable Smart Contract ABI Deﬁnition
24
7.1.4
Decompiled version
1
function getBalance(address) {
2
return store[arg_4];
3
}
4
5
function addToBalance() {
6
store[msg.sender] = store[msg.sender];
7
return;
8
}
9
10
function withdrawBalance() {
11
if (msg.sender.call.value(store[msg.sender])()) {
12
store[msg.sender] = 0x0;
13
}
14
}
15
16
**L12 (D8193): Potential reentrant vulnerability found.**
Listing 24: Vulnerable Smart Contract Decompilation
8
Bugs
Keeping an eye on Solidity Compiler Bugs is one of the important notes one
would consider.
8.1
Reentrant Vulnerability / Race Condition
Also known as the DAO vulnerability. similar to the SendBalance contract
from above.
In the meantime signiﬁcant changes have been made to the
EVM which includes the introduction of a REVERT instruction to restore a
given state. An excerpt of the explanation is as follows:
call the function to execute a split before that withdrawal
ﬁnishes. The function will start running without updating your
balance, and the line we marked above as ”the attacker wants to
run more than once” will run more than once.
25
8.2
Call Stack Vulnerability
Call stack attack, explained by Least Authority[14] takes advantage of the
fact that a CALL operation will fail if it causes the stack depth to exceed 1024
frames. Which happens to also be the current limit of the stack as previously
described earlier. It will ultimately fail and not cause an exception. Unlike
stack underﬂow which happens when frames are not present on the stack
during the invocation of a speciﬁc instruction. This is a known problem that
indicates an error instead of reverting back to the state to the caller. There
are often a lack of assert checks in Solidity contracts, due to the poor support
for actual unit testing. Given the special condition requiring to trigger this
problem, which is an environment speciﬁc problem then we cannot easily spot
it through static analysis. One potential mitigation would be for the EVM
to implement integrity checks before executing a contract that would ensure
the state of the stack, and the depth required by the contract (computed
either dynamically or statically by the compiler) are met.
8.3
Time Dependance Vulnerability
TIMESTAMP returns the current blockchain timestamp and should not be used.
As the timestamp of the block can be predicted or manipulated by the miner,
which is something that the developers must keep in mind when implementing
routines that depend on such variable. Because of this, developers must be
extremely careful with time dependency. This was well explained by the case
study from @mhswende with the Ethereum Roulette[12] that shows how an
implementation of Ethereum Roulette was abused.
9
Future
As contracts are embedded in blockchain, there is no easy way to deploy
updates to patch existing contracts like we would do with any regular soft-
ware. This is an implementation limitation to understand. Regular softwares
development has seen the integration and the raise of Security Development
Lifecycle (SDL) as part of its development lifecycle, this is a process which
has became increasingly popular that also includes models such as threat
modeling which has yet to be seen within the smart-contract World regard-
less of the platform itself.
26
There is also a growing community that aims at raising awareness for
writing secure solidity code, such as the ”Underhanded Solidity Coding Con-
test” [15] announced early July for the ﬁrst time that aims at judging code
containing hidden vulnerabilities that can be interpreted as backdoors. Such
vulnerabilities/backdoors that aren’t obvious during the code auditing pro-
cess, and can easily be misinterpreted and dismissed as coder error(s). USCC
ﬁrst contest is around the theme of Initial Coins O↵ering (ICOs), and includes
Solidity Lead Developer, Christian Reitwiessner, in its jury. In addition of
that, some forks such as Quorum [16] are rising interest by adding an privacy
layer on top of the smart-contract blockchain, often required and currently
missing with the actual Ethereum implementation.
10
Acknowledgments
Mohamed Saher
Halvar Flake
DEFCON Review Board Team
Max Vorobjov & Andrey Bazhan
Gavin Wood
Andreas Olofsson
27
References
[1] Suiche, Matt. ”Porosity: Ethereum Smart-Contract Decompiler” N.p.,
n.d. Web. https://github.com/comaeio/porosity
[2] Woods, Gavin. ”Ethereum: A Secure Decentralised Generalised Transac-
tion Ledger.” N.p., n.d. Web. https://github.com/ethereum/yellowpaper.
[3] Olofsson,
Andreas.
”Solidity
Workshop.”
N.p.,
n.d.
Web.
https://github.com/androlo/solidity-workshop.
[4] Olofsson,
Andreas.
”Solidity
Contracts.”
N.p.,
n.d.
Web.
https://github.com/androlo/standard-contracts.
[5] Velner,
Yarn,
Jason
Teutsch,
and
Loi
Luu.
”Smart
Con-
tracts
Make
Bitcoin
Mining
Pools
Vulnerable.”
N.p.,
n.d.
Web.
https://eprint.iacr.org/2017/230.pdf.
[6] Luu, Loi, Duc-Hiep Chu, Hrishi Olickel, Aquinas Hobor. ”Making Smart
Contracts Smarter.” N.p., n.d. Web. https://www.comp.nus.edu.sg/%7
Ehobor/Publications/2016/Making%20Smart%20Contracts%20Smarter.
pdf.
[7] Atzei, Nicola, Massimo Bartoletti, and Tiziana Cimoli. ” A Sur-
vey of Attacks on Ethereum Smart Contracts.” N.p.,
n.d. Web.
https://eprint.iacr.org/2016/1007.pdf.
[8] Sarkar, Abhiroop. ”Understanding the Transactional Nature of Smart
Contracts.” N.p., n.d. Web. https://abhiroop.github.io/Exceptions-and-
Transactions.
[9] Siegel, David. ”Understanding The DAO Attack.” N.p., n.d. Web.
http://www.coindesk.com/understanding-dao-hack-journalists.
[10] Blockchain
software
for
asset
management.
”OYENTE:
An
Analysis
Tool
for
Smart
Contracts.”
N.p.,
n.d.
Web.
https://github.com/melonproject/oyente.
[11] Holst Swende, Martin. ”Devcon1 and Ethereum Contract Security.”
N.p.,
n.d. Web. http://martin.swende.se/blog/Devcon1-and-contract-
security.html.
28
[12] Holst
Swende,
Martin.
”Breaking
the
House”,
N.p.,n.d.
Web.
http://martin.swende.se/blog/Breaking the house.html.
[13] Buterin,
Vitalik.
”Thinking
About
Smart
Contract
Security.”
N.p., n.d. Web. https://blog.ethereum.org/2016/06/19/thinking-smart-
contract-security.
[14] Least Authority. ”Gas Economics:
Call Stack Depth Limit Er-
rors.” N.p., n.d. Web. https://github.com/LeastAuthority/ethereum-
analyses/blob/master/GasEcon.md#callstack-depth-limit-errors.
[15] Underhanded Solidity Coding Contest, Web. http://u.solidity.cc/.
[16] Quorum. ”A permissioned implementation of Ethereum supporting data
privacy.” https://github.com/jpmorganchase/quorum
29