For a joint node, the flow function Fjnt unions the data-flow
facts on its incoming edges. For a branch node, Fbr updates its
input execution state σ with σ ′ = σ ∪{E} if Feasible (σ ′) holds, i.e.,
the branch predicate E is not ruled out due to path contradiction,
decided by a satisfiability solver, which is Z3 [18] in our evaluation.
For a statement node, Fstmt maps its input state to a new output
state by using the transfer function T F defined in Figure 4(c). Note
that a free statement is handled at line 19 as a special case.
T F (n,⟨live, σ⟩, o) and T F (n,⟨dead, σ⟩, o) handle the state tran-
sitions of o when the current property states are live and dead,
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
Hua Yan, Yulei Sui, Shiping Chen, and Jingling Xue
1:int main() {
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
*p = i;
*r = j;
}
else {
free(p);
*r = i;
int* p = malloc(1);//o
int flg = userInput();
int* r = &flg;
int i = 1, j = 0;
if (flg < 0) {
}
. . . //q is defined here
if (flg == 1)
*q = i;
14:
15:
16:}
Line
2:
4:
5:
6:
7:
8:
11:
12:
13:
14:
Symbolic State
[live, p =⊥]
[live, r = p = flg =⊥]
[live, r = p = flg =⊥, i =1, j =0]
[live, r = p =⊥, flg <0, i =1, j =0]
[dead, r = p =⊥, flg <0, i =1, j =0]
[dead, r = p =⊥, flg =1, i =1, j =0]
[live, r = p =⊥, flg≥0, i =1, j =0]
[live, r = p =⊥, flg =0, i =1, j =0]
[dead, r = p =⊥, flg =1, i =1, j =0] ∪
[live, r = p =⊥, flg =0, i =1, j =0]
[dead, r = p =⊥, flg =1, i =1, j =0]
Table 4: Open-source benchmarks.
Program Version
rtorrent
less
bitlbee
nghttp2
mupdf
h2o
xserver
php
Total
0.96
451
4.2
1.6.0
1.2.337
1.7.2
1.14.3
5.6.7
—
Language
C++
C
C
C++
C++
C++
C
C
—
LOC #Frees
118
13,036
27,134
86
201
68,413
29
71,387
253
122,481
517,731
896
1,675
568,964
1,391
709,356
2,098,502
4,649
#Uses
3,039
7,902
5,897
7,566
105,911
150,887
90,841
244,917
616,960
Figure 6: An example for illustrating Tac.
respectively. The former is handled in the usual way. So let us focus
on the latter. Tac reports a UAF bug if T F (n,⟨dead, σ⟩, o) signifies
a state transition of o from dead to error (Figure 1), when n is a
use (q) or a f ree (q). Thus, there are two cases. If n is a use (q), then
a UAF warning is issued when both (1) o ∈ pt(q), implying that ∗p
in a free site f ree (p) seen earlier and ∗q are found to be aliased
with o by the pointer analysis [58], and (2) predict (n) returns true,
implying that this alias is also validated by our SMV classifier. If n
is a f ree (q), then a double-free warning is issued, instead.
Finally, Figure 4(d) gives the rules for performing strong up-
dates on address-taken objects in order to improve the precision
of Feasible (σ ′) in Figure 4(a) for top-level variables. We can distin-
guish two cases when tracking the execution states of statements.
For a scalar statement p ← E, σ simply evolves into σ[p ← σ (E)].
However, updating σ for a memory-related statement is more com-
plex, as shown in Figure 4(d). Strong updates are performed when
p points to exactly one (runtime) singleton object o′ in Sinдleton,
which contains all objects in A except for the locals in recursion
cycles and all the heap objects [34, 58]. Otherwise, the variables
on the left-hand side of an assignment are updated to be ⊥ con-
servatively. Note that dynamically (statically) allocated arrays are
treated as heap objects (locals or globals). For an array access p[i],
o′[σ (i)] represents any element in o′ if i is statically unknown.
3.2.2
Interprocedural Analysis. Given a whole program, our
typestate analysis proceeds context-sensitively on its interproce-
dural CFG [29] with indirect calls resolved by Andersen’s pointer
analysis [5]. Every function has a unique entry node and a unique
exit node, with each callsite being split into a call node and a re-
turn node. Context-sensitivity is achieved by solving a balanced-
parentheses problem [50] with an additional abstract call stack (a
sequence of callsites) maintained in every symbolic state to filter out
unrealizable inter-procedural paths by matching calls and returns.
Following ESP [17], we apply a mod-ref analysis to avoid analyzing
a function invoked at a callsite if it may not access the candidate
UAF object being analyzed by using value-flow slicing [17, 60]. Un-
like ESP [17], which starts its from the entry of the program, our
analysis starts from an allocation statement, as discussed above.
3.2.3 Example. We use an example in Figure 6 to illustrate how
Tac correctly reports the true UAF bug (at lines 7 and 15). At line 2,
a memory object o is allocated and pointed by p. In the if-branch
(lines 6 – 9), o is freed, indicated with f lд set as 1. In the else-branch
(lines 10 – 13), o is updated, indicated with f lд set as 0. Lines 14
– 15 are the buggy code that mistakenly check f lд == 1 instead
of f lд == 0 before dereferencing p, causing a UAF bug. Figure 6
gives the symbolic states obtained by Tac at some program points.
Tac starts from o’s allocation site at line 2, where the property
state of o is initialized as live and the symbolic state of p is set
as ⊥. At line 3 (not shown), f lд is assumed to be initialized to ⊥
(returned by userInput()). Let us see how the if-branch (lines 6
– 9) is analyzed. When analyzing line 6, Tac records its branch
condition f lд < 0 in the resulting symbolic state. At line 7, o is
freed, causing the property state of o to transit from live to dead.
At line 8, Tac makes a strong update to get f lд = 1, since r points
to f lд, where f lд ∈ Sinдleton.
Let us now move to the else-branch (lines 10 – 13). When ana-
lyzing line 10, Tac records f lд ≥ 0 in the resulting symbolic state.
At line 11, the property state of o remains unchanged according to
Γ. At line 12, Tac makes a strong update to get f lд = 0.
At line 13, Fbr is applied to merge the two symbolic states from
the two branches. The if branch at lines 14-15 filters out the states
that do not satisfy f lд == 1. Thus, [dead, r = p = ⊥, flg = 1, i =
1, j =0] is kept but [live, r = p = ⊥, flg =0, i =1, j =0]] dropped.
Finally, there are two cases when line 15 (∗q = i) is analyzed. If ∗q
is found not to be aliased with ∗p according to the pointer analysis,
then no UAF bug exists. Otherwise, predict (∗q = i) comes into play.
The FSA for o will transit from dead to error if ⟨free(p), *q=i⟩∈
XML and remains in the dead state otherwise.
4 EVALUATION
Our evaluation aims to demonstrate the effectiveness of our
machine-learning-guided approach in detecting UAF bugs with
a low false alarm rate in real-world programs. We evaluate Tac
using eight popular open-source C/C++ programs described in Ta-
ble 4: rtorrent, a fast text-based BitTorrent client; less, a text file
viewer; bitlbee, a cross-platform IRC instant messaging gateway;
nghttp2, an implementation of hypertext transfer protocol; mupdf,
an E-book viewer; h2o, an optimized HTTP server, xserver, a win-
dowing system for bitmap displays on UNIX-like OS; and php, a
general-purpose scripting language for web development.
Tac is implemented in the LLVM compiler (version 3.8.0) [30].
The source files of each C/C++ program are compiled under -O0
into LLVM bit-code files by Clang and then merged using the LLVM
Gold Plugin at link time to produce a whole program bc file.
Machine-Learning-Guided Typestate Analysis for Static Use-After-Free Detection ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
In the training phase, Tac uses the widely-used SVM classifier
libSVM [10]. In the analysis phase, Tac’s pre-analysis is imple-
mented on top of SVF [59]. For the flow-sensitive demand-driven
pointer analysis [58] deployed in the analysis phase, the budget of
a points-to query is set as 50,000 (the maximum number of def-use
chains traversable) in the underlying pointer analysis to enable
early termination and returning conservative may-alias results.
Our experiments were conducted on a 3.0 GHZ Intel Core2 Duo
processor with 128 GB memory, running RedHat Enterprise Linux
5 (2.6.18). As listed in Table 4, the eight programs combined exhibit
a total of 2,098,502 LOC, containing 4,649 free sites and 616,960 use
sites. As shown in Table 5, these programs contain 6 known UAF
bugs, with 5 registered in the CVE database and 1 unregistered.
Table 5: 14 (distinct) UAF bugs detected by Tac, including 5
known CVE vulnerabilities and 1 known bug given in Col-
umn 2 and 8 new bugs given in Column 3.
Known bugs
Identifier
Detected
—
—
New bugs
#Detected
0
1
0
0
0
5
0
2
—
—
!
!
!
!
!
!
Program
rtorrent
less
bitlbee
nghttp2
mupdf
h2o
xserver
php
CVE-2016-10188
CVE-2015-8659
BugID-694382
CVE-2016-4817
CVE-2013-4396
CVE-2015-1351
4.1 The Training Phase
We train the SVM classifier for Tac using both false and true UAF
samples in real-world programs, as illustrated in Table 6. To gener-
ate false alarm samples, we run Tac-NML, an ESP-based typestate
analysis without machine learning, to analyze four relatively small
ones in the set of eight programs evaluated (Table 4), rtorrent,
less, bitlbee, and nghttp2. Then, we manually inspect 30% (a
limit set for the manual labor invested) of all the warnings reported
by Tac-NML for each program. To generate true UAF bugs, we use