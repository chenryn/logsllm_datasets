 o
_[.pr.]ous,:aI. oupa
_, [,aueuuasn, moug*_:Jasn, oqa
,*[.puomssed, ]moug_:ssed, oqpa
<>, oqa
mysq]_close($conn);
,,*tbss'_asn mou, oupa
?>
由于代码没有过滤解码后的Sid，且将Sid直接拼接到SQL语句中，所以存在SQL
注入漏洞。当访问id-1 union select 1,2,3#（访问时，先进行base64编码）时，执行的
SQL语句为：
---
## Page 143
124Web安全攻防：渗透测试实战指南
 .  
此时SQL语句可以分为select *from users whereid'=1和union select 1,2,3两条，利
用第二条语句（Union查询）就可以获取数据库中的数据。
这种攻击方式还有其他利用场景，例如，如果有WAF，则WAF会对传输中的参
数ID进行检查，但由于传输中的ID经过base64编码，所以此时WAF很有可能检测不
到危险代码，进而绕过了WAF检测。
4.2.13XFF注入攻击
xFF注入攻击的测试地址：http://www.ccctf.cn/sql/xff.php。
通过BurpSuite抓取数据包容，可以看到HTTP请求头中有一个头部参数
X-Forwarded-for。X-Forwarded-For简称XFF头，它代表客户端真实的IP，通过修改
X-Forwarded-for的值可以伪造客户端IP，将X-Forwarded-for设置为127.0.0.1，然后访
问该URL，页面返回正常，如图4-62所示。
_teat
heeti3 : tee4111-bta
图4-62XFF头
将X-Forwarded-for设置为127.0.0.1'，再次访间该URL，页面返回MySQL的报错
信息，结果如图4-63所示。
图4-63访问X-Forwarded-for:127.0.0.1'的结果
将X-Forwarded-for分别设置为127.0.0.1and1=1#和127.0.0.1'and1=2#，再次访问
该URL，结果如图4-64和图4-65所示。
---
## Page 144
第4章Web安全原理剖析125
Der70g3 Des 211 0154 e
hecegt-Rscodi
eet111 + test1111@r>
图4-64访间x-Forwarded-for:127.0.0.1’and 1=1#的结果
sstest-Gengtbt 8
图4-65访间X-Forwarded-for:127.0.0.1'and1=2#的结果
通过页面的返回结果，可以判断出该地址存在SQL注入漏洞，接着可以使用order
by判断表中的字段数量，最终测试出数据库中存在4个字段，尝试使用Union查询注
入方法，语法是X-Forwarded-for:127.0.0.1′union select 1,2,3,4#，如图4-66所示。
kooegt-Laot
st-a1t
Forva
1 + 1kb
图4-66使用Union注入
接着，使用Union注入方法完成此次注入。
4.2.14XFF注入代码分析
PHP中的getenvO函数用于获取一个环境变量的值，类似于S_SERVER或S_ENV，
返回环境变量对应的值，如果环境变量不存在则返回FALSE。
使用以下代码即可获取客户端IP地址，程序先判断是否存在HTTP头部参数
HTTP_CLIENT_IP，如果存在，则赋给Sip，如果不存在，则判断是否存在HTTP头部
参数HTTP_X_FORWARDED_FOR，如果存在，则赋给Sip，如果不存在，则将HTTP
头部参数REMOTE_ADDR赋给Sip
---
## Page 145
126Wcb安全政防：渗透测试实战指南
°;
接下来，将Sip拼接到select语句，然后将查询结果输出到界面上。
由于HTTP头部参数是可以伪造的，所以可以添加一个头部参数CLIENT_IP或
X_FORWARDED_FOR.当设置X_FORWARDED_FOR=1union select1,2,3%23时，
执行的SQL语句为：
此时SQL语句可以分为select*from user whereip²=1和union select 1,2,3两条，利
用第二条语句（union查询）就可以获取数据库中的数据。
4.3SQL注入绕过技术
4.3.1大小写绕过注入
大小写绕过注入的测试地址：http://ccctf.cn/sql/1.php?id=1。
---
## Page 146
第4章Web安全原理制析127
访问id=1'，发现页面报出MySQL错误，当访间id=1and1=1时，页面返回“nohack”，
显然是被拦截了，说明有关键词被过滤。使用关键字大小写的方式尝试绕过，如And
1=1（任意字母大小写都可以，如aNd1=1，AND1=1等），可以看到访问id-1And1=1
时页面返回与id=1相同的结果，访问id=1And1=2时页面返回与id=1不同的结果，得
出存在SQL注入漏洞的结论，如图4-67和图4-68所示。
adnis : sdnis
图4-67访问id=1 And 1=1的结果
图4-68访问id=1 And1=2的结果
使用orderby查询字段数量，发现还是被拦截了，如图4-69所示，还是利用修改
关键字大小写来绕过它，尝试只改order这个单词，结果发现当order改成Order后，页
面显示正常，说明by并没有被拦截，如图4-70所示，最终通过尝试，发现数据库表中
存在3个字段。
89/eg1/1,peg7lae+order+by+1 xt/1.1
0110
q=0.8
so heck1
图4-69order by被拦截
---
## Page 147
128Web安全攻防：渗造洲试实战指街
/1.0.1
图4-70Order by没被拦截
接着，使用Union方法完成此次注入，如果仍然遇到关键字被拦截，则尝试使用
修改大小写的方式绕过拦截。
4.3.2双写绕过注入
双写绕过注入的测试地址：http://ccctf.cn/sq/2.php?id-1。
访问id=1'，发现页面报出MySQL错误，接着访间id-1and1=1，页面依然报出
MySQL的错误，但是从错误信息中可以看出，输入的and 1-1变成了1-1，如图4-71
所示。
s·as Liae
图4-71关键字and被过滤
因此可以得知，关键字and被过滤了。这时尝试使用双写的方式绕过，如anandd
1=1，当and被过滤后，anandd变成了and，所以这时传入数据库的语句是and1=1，结
果如图4-72所示，成功执行井返回正常页面。
sdnis + adsiebr>
图4-72关键字anandd被过滤后正确执行
---
## Page 148
第4章Web安全原理剖析129
接着，输入aandnd1=2，返回错误信息，判断页面参数存在SQL注入漏洞。当访
问id-1orderby3时，MySQL的错误信息为“der by 3”，如图4-73所示，所以这里并
没有过滤order整个单词，而是仅过滤or，因此只需要双写or即可，结果如图4-74所示。
Lion1soeap
图4-73过滤了关键字or
/2r
sgima/1.
adeis : adeiaGt>
图4-74双写关键字or
后面的注入过程与Umion注入的一致。
4.3.3编码绕过注入
编码绕过注入的测试地址：http:/ccctf.cn/sql/3.php?id=1。
访问id=1，发现页面报出MySQL错误，接着访问id=1and1=1和id=1and1=2时，
发现关键字and被拦截。会试使用URL全编码的方式绕过拦截。由于服务器会自动对
URL进行一次URL解码，所以需要把关键词编码两次，这里需要注意的地方是，URL
编码需选择全编码，而不是普通的URL编码。如图4-75所示，关键字and进行两次URL
全编码的结果是 %25%36%31%25%36%65%25%36%34，访间id=1%25%36%31%
25%36%65%25%36%341=1时，页面返回与id=1相同的结果，如图4-76所示，访问
id=1%25%36%31%25%36%65%25%36%341=2时，页面返回与id=1不同的结果，如
图4-77所示，所以该网址存在SQL注入漏洞。
---
## Page 149
130Web安全攻防：渗透测试实战指南
t61$6e464
J
灶利
16116et64
$25$36$31$25$36$65$25$36$34]
图4-75两次URL编码关键字and
aryt kc
kaep-a1
asgtbt 37
图4-76访问id=1 and 1=1时的结果
Cotant-Types tazt/btal1ch
3.30
图4-77访问id=1and 1=2时的结果
后面的注入过程与Union注入的一致，只需判断过滤的关键词，并经过两次URL
全编码即可。
---
## Page 150
第4章Web安全原理剖析131
4.3.4内联注释绕过注入
内联注释绕过注入的测试地址：http://ccctf.cn/sql/4.php?id=1。
访问id=1',发现页面报出MySQL错误，接着访间id=1and1=1和id=1and1=2时，
发现页面提示“nohack”，即关键字被拦截。尝试使用内联注释绕过。内联注释的相
关内容在介绍MySQL的知识点时讲解过。访间id=1/*!and*/1=1时，页面返回与id-1
相同的结果：访问id-1/*land*/1-2时，页面返回与id-1不同的结果，如图4-78和图4-79
所示。
G /eg1/4-gap75d=[+/*/end*/+]=, Hff7/1.1
loetseeetf-en
3000511/448
1g-0.5
admis : adnis
图4-78访问id=1/*land*/ 1=1时的结果
WFTF/1.1200K
Beeegt!
Tas-4.0
-
图4-79访问id=1/*land*/ 1=2时的结果
后面的注入过程与Union注入的一致。
4.3.5SQL注入修复建议
常用的SQL注入漏洞的修复方法有两种。
1.过滤危险字符
多数CMS都采用过滤危险字符的方式，例如，采用正则表达式匹配union、sleep、
load_file等关键字，如果匹配到，则退出程序。例如80sec的防注入代码，如下所示。
---
## Page 151
132Web安全政防：渗透测试实战指南
functionCheckSq1($db_string,$querytype=′select′)
global$cfg_cookie_encode;
$clean='`;
$old_pos= 0;
$error='';
$pos= -1;
$log_fi1e= DEDEINC. /../data/ .nd5($cfg_cookie_encode) . *_safe.txt°*;
SuserIP= GetIP();
$getur1= GetCurUr1();
//如果是普通查询语句，直接过滤一些特殊语法
1f(Squerytypes'select’)
{
$nota1low1=[^e-9a-z@\-_-]{1,}(umion|sleep|benchnark |1oad_fi1e|outf1le)[^0-9a-z@\
--}(1,)";
\/|--, = zmot[eous//
1f(preg_match(°/~ .$nota11ow1.“/1",$db_string))
fputs(fopen($1og_f11e,*a+′),“$userIP1I$getur1|1$db_string1[SelectBreak\\n°);
exit(*Safe Alert: Request Error step
1 1);
//完整的SQL检查
whi11e(TRUE)