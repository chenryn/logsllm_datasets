      /** Synchronously open a file and return an instance of `Deno.File`.  The
       * file does not need to previously exist if using the `create` or `createNew`
       * open options.  It is the callers responsibility to close the file when finished
       * with it.
       *
       * ```ts
       * const file = Deno.openSync("/foo/bar.txt", { read: true, write: true });
       * // Do work with file
       * Deno.close(file.rid);
       * ```
       *
       * Requires `allow-read` and/or `allow-write` permissions depending on options.
       */
      export function openSync(path: string, options?: OpenOptions): File;
      /** Open a file and resolve to an instance of `Deno.File`.  The
       * file does not need to previously exist if using the `create` or `createNew`
       * open options.  It is the callers responsibility to close the file when finished
       * with it.
       *
       * ```ts
       * const file = await Deno.open("/foo/bar.txt", { read: true, write: true });
       * // Do work with file
       * Deno.close(file.rid);
       * ```
       *
       * Requires `allow-read` and/or `allow-write` permissions depending on options.
       */
      export function open(path: string, options?: OpenOptions): Promise;
      /** Creates a file if none exists or truncates an existing file and returns
       *  an instance of `Deno.File`.
       *
       * ```ts
       * const file = Deno.createSync("/foo/bar.txt");
       * ```
       *
       * Requires `allow-read` and `allow-write` permissions.
       */
      export function createSync(path: string): File;
      /** Creates a file if none exists or truncates an existing file and resolves to
       *  an instance of `Deno.File`.
       *
       * ```ts
       * const file = await Deno.create("/foo/bar.txt");
       * ```
       *
       * Requires `allow-read` and `allow-write` permissions.
       */
      export function create(path: string): Promise;
      /** Synchronously read from a resource ID (`rid`) into an array buffer (`buffer`).
       *
       * Returns either the number of bytes read during the operation or EOF
       * (`null`) if there was nothing more to read.
       *
       * It is possible for a read to successfully return with `0` bytes. This does
       * not indicate EOF.
       *
       * ```ts
       * // if "/foo/bar.txt" contains the text "hello world":
       * const file = Deno.openSync("/foo/bar.txt");
       * const buf = new Uint8Array(100);
       * const numberOfBytesRead = Deno.readSync(file.rid, buf); // 11 bytes
       * const text = new TextDecoder().decode(buf);  // "hello world"
       * Deno.close(file.rid);
       * ```
       */
      export function readSync(rid: number, buffer: Uint8Array): number | null;
      /** Read from a resource ID (`rid`) into an array buffer (`buffer`).
       *
       * Resolves to either the number of bytes read during the operation or EOF
       * (`null`) if there was nothing more to read.
       *
       * It is possible for a read to successfully return with `0` bytes. This does
       * not indicate EOF.
       *
       * ```ts
       * // if "/foo/bar.txt" contains the text "hello world":
       * const file = await Deno.open("/foo/bar.txt");
       * const buf = new Uint8Array(100);
       * const numberOfBytesRead = await Deno.read(file.rid, buf); // 11 bytes
       * const text = new TextDecoder().decode(buf);  // "hello world"
       * Deno.close(file.rid);
       * ```
       */
      export function read(rid: number, buffer: Uint8Array): Promise;
      /** Synchronously write to the resource ID (`rid`) the contents of the array
       * buffer (`data`).
       *
       * Returns the number of bytes written.
       *
       * ```ts
       * const encoder = new TextEncoder();
       * const data = encoder.encode("Hello world");
       * const file = Deno.openSync("/foo/bar.txt");
       * const bytesWritten = Deno.writeSync(file.rid, data); // 11
       * Deno.close(file.rid);
       * ```
       */
      export function writeSync(rid: number, data: Uint8Array): number;
      /** Write to the resource ID (`rid`) the contents of the array buffer (`data`).
       *
       * Resolves to the number of bytes written.
       *
       * ```ts
       * const encoder = new TextEncoder();
       * const data = encoder.encode("Hello world");
       * const file = await Deno.open("/foo/bar.txt");
       * const bytesWritten = await Deno.write(file.rid, data); // 11
       * Deno.close(file.rid);
       * ```
       */
      export function write(rid: number, data: Uint8Array): Promise;
      /** Synchronously seek a resource ID (`rid`) to the given `offset` under mode
       * given by `whence`.  The new position within the resource (bytes from the
       * start) is returned.
       *
       * ```ts
       * const file = Deno.openSync('hello.txt', {read: true, write: true, truncate: true, create: true});
       * Deno.writeSync(file.rid, new TextEncoder().encode("Hello world"));
       * // advance cursor 6 bytes
       * const cursorPosition = Deno.seekSync(file.rid, 6, Deno.SeekMode.Start);
       * console.log(cursorPosition);  // 6
       * const buf = new Uint8Array(100);
       * file.readSync(buf);
       * console.log(new TextDecoder().decode(buf)); // "world"
       * ```
       *
       * The seek modes work as follows:
       *
       * ```ts
       * // Given file.rid pointing to file with "Hello world", which is 11 bytes long:
       * // Seek 6 bytes from the start of the file
       * console.log(Deno.seekSync(file.rid, 6, Deno.SeekMode.Start)); // "6"
       * // Seek 2 more bytes from the current position
       * console.log(Deno.seekSync(file.rid, 2, Deno.SeekMode.Current)); // "8"
       * // Seek backwards 2 bytes from the end of the file
       * console.log(Deno.seekSync(file.rid, -2, Deno.SeekMode.End)); // "9" (e.g. 11-2)
       * ```
       */
      export function seekSync(
        rid: number,
        offset: number,
        whence: SeekMode
      ): number;
      /** Seek a resource ID (`rid`) to the given `offset` under mode given by `whence`.
       * The call resolves to the new position within the resource (bytes from the start).
       *
       * ```ts
       * const file = await Deno.open('hello.txt', {read: true, write: true, truncate: true, create: true});
       * await Deno.write(file.rid, new TextEncoder().encode("Hello world"));
       * // advance cursor 6 bytes
       * const cursorPosition = await Deno.seek(file.rid, 6, Deno.SeekMode.Start);
       * console.log(cursorPosition);  // 6
       * const buf = new Uint8Array(100);
       * await file.read(buf);
       * console.log(new TextDecoder().decode(buf)); // "world"
       * ```
       *
       * The seek modes work as follows:
       *
       * ```ts
       * // Given file.rid pointing to file with "Hello world", which is 11 bytes long:
       * // Seek 6 bytes from the start of the file
       * console.log(await Deno.seek(file.rid, 6, Deno.SeekMode.Start)); // "6"
       * // Seek 2 more bytes from the current position
       * console.log(await Deno.seek(file.rid, 2, Deno.SeekMode.Current)); // "8"
       * // Seek backwards 2 bytes from the end of the file
       * console.log(await Deno.seek(file.rid, -2, Deno.SeekMode.End)); // "9" (e.g. 11-2)
       * ```
       */
      export function seek(
        rid: number,
        offset: number,
        whence: SeekMode
      ): Promise;
      /** Close the given resource ID (rid) which has been previously opened, such
       * as via opening or creating a file.  Closing a file when you are finished
       * with it is important to avoid leaking resources.
       *
       * ```ts
       * const file = await Deno.open("my_file.txt");
       * // do work with "file" object
       * Deno.close(file.rid);
       * ````
       */
      export function close(rid: number): void;
      /** The Deno abstraction for reading and writing files. */
      export class File
        implements
          Reader,
          ReaderSync,
          Writer,
          WriterSync,
          Seeker,
          SeekerSync,
          Closer {
        readonly rid: number;
        constructor(rid: number);
        write(p: Uint8Array): Promise;
        writeSync(p: Uint8Array): number;
        read(p: Uint8Array): Promise;
        readSync(p: Uint8Array): number | null;
        seek(offset: number, whence: SeekMode): Promise;
        seekSync(offset: number, whence: SeekMode): number;
        close(): void;
      }
      /** A handle for `stdin`. */
      export const stdin: Reader & ReaderSync & Closer & { rid: number };
      /** A handle for `stdout`. */
      export const stdout: Writer & WriterSync & Closer & { rid: number };
      /** A handle for `stderr`. */
      export const stderr: Writer & WriterSync & Closer & { rid: number };
      export interface OpenOptions {
        /** Sets the option for read access. This option, when `true`, means that the
         * file should be read-able if opened. */
        read?: boolean;
        /** Sets the option for write access. This option, when `true`, means that
         * the file should be write-able if opened. If the file already exists,
         * any write calls on it will overwrite its contents, by default without
         * truncating it. */
        write?: boolean;
        /**Sets the option for the append mode. This option, when `true`, means that
         * writes will append to a file instead of overwriting previous contents.
         * Note that setting `{ write: true, append: true }` has the same effect as
         * setting only `{ append: true }`. */
        append?: boolean;
        /** Sets the option for truncating a previous file. If a file is
         * successfully opened with this option set it will truncate the file to `0`
         * size if it already exists. The file must be opened with write access
         * for truncate to work. */
        truncate?: boolean;
        /** Sets the option to allow creating a new file, if one doesn't already
         * exist at the specified path. Requires write or append access to be
         * used. */
        create?: boolean;
        /** Defaults to `false`. If set to `true`, no file, directory, or symlink is
         * allowed to exist at the target location. Requires write or append
         * access to be used. When createNew is set to `true`, create and truncate
         * are ignored. */
        createNew?: boolean;
        /** Permissions to use if creating the file (defaults to `0o666`, before
         * the process's umask).
         * Ignored on Windows. */
        mode?: number;
      }
      /**
       *
       *  Check if a given resource id (`rid`) is a TTY.
       *
       * ```ts
       * // This example is system and context specific
       * const nonTTYRid = Deno.openSync("my_file.txt").rid;
       * const ttyRid = Deno.openSync("/dev/tty6").rid;
       * console.log(Deno.isatty(nonTTYRid)); // false
       * console.log(Deno.isatty(ttyRid)); // true
       * Deno.close(nonTTYRid);
       * Deno.close(ttyRid);
       * ```
       */
      export function isatty(rid: number): boolean;
      /** A variable-sized buffer of bytes with `read()` and `write()` methods.
       *
       * Deno.Buffer is almost always used with some I/O like files and sockets. It
       * allows one to buffer up a download from a socket. Buffer grows and shrinks
       * as necessary.
       *
       * Deno.Buffer is NOT the same thing as Node's Buffer. Node's Buffer was
       * created in 2009 before JavaScript had the concept of ArrayBuffers. It's
       * simply a non-standard ArrayBuffer.
       *
       * ArrayBuffer is a fixed memory allocation. Deno.Buffer is implemented on top
       * of ArrayBuffer.
       *
       * Based on [Go Buffer](https://golang.org/pkg/bytes/#Buffer). */
      export class Buffer implements Reader, ReaderSync, Writer, WriterSync {
        constructor(ab?: ArrayBuffer);
        /** Returns a slice holding the unread portion of the buffer.
         *
         * The slice is valid for use only until the next buffer modification (that
         * is, only until the next call to a method like `read()`, `write()`,
         * `reset()`, or `truncate()`). The slice aliases the buffer content at
         * least until the next buffer modification, so immediate changes to the
         * slice will affect the result of future reads. */
        bytes(): Uint8Array;
        /** Returns whether the unread portion of the buffer is empty. */
        empty(): boolean;
        /** A read only number of bytes of the unread portion of the buffer. */
        readonly length: number;
        /** The read only capacity of the buffer's underlying byte slice, that is,
         * the total space allocated for the buffer's data. */
        readonly capacity: number;
        /** Discards all but the first `n` unread bytes from the buffer but
         * continues to use the same allocated storage. It throws if `n` is
         * negative or greater than the length of the buffer. */
        truncate(n: number): void;
        /** Resets the buffer to be empty, but it retains the underlying storage for
         * use by future writes. `.reset()` is the same as `.truncate(0)`. */
        reset(): void;
        /** Reads the next `p.length` bytes from the buffer or until the buffer is
         * drained. Returns the number of bytes read. If the buffer has no data to
         * return, the return is EOF (`null`). */
        readSync(p: Uint8Array): number | null;
        /** Reads the next `p.length` bytes from the buffer or until the buffer is
         * drained. Resolves to the number of bytes read. If the buffer has no
         * data to return, resolves to EOF (`null`).
         *
         * NOTE: This methods reads bytes sychronously; it's provided for
         * compatibility with `Reader` interfaces.
         */
        read(p: Uint8Array): Promise;
        writeSync(p: Uint8Array): number;
        /** NOTE: This methods writes bytes sychronously; it's provided for
         * compatibility with `Writer` interface. */
        write(p: Uint8Array): Promise;
        /** Grows the buffer's capacity, if necessary, to guarantee space for
         * another `n` bytes. After `.grow(n)`, at least `n` bytes can be written to
         * the buffer without another allocation. If `n` is negative, `.grow()` will
         * throw. If the buffer can't grow it will throw an error.
         *
         * Based on Go Lang's
         * [Buffer.Grow](https://golang.org/pkg/bytes/#Buffer.Grow). */
        grow(n: number): void;
        /** Reads data from `r` until EOF (`null`) and appends it to the buffer,
         * growing the buffer as needed. It resolves to the number of bytes read.
         * If the buffer becomes too large, `.readFrom()` will reject with an error.
         *
         * Based on Go Lang's
         * [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom). */
        readFrom(r: Reader): Promise;
        /** Reads data from `r` until EOF (`null`) and appends it to the buffer,
         * growing the buffer as needed. It returns the number of bytes read. If the
         * buffer becomes too large, `.readFromSync()` will throw an error.
         *
         * Based on Go Lang's
         * [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom). */
        readFromSync(r: ReaderSync): number;
      }
      /** Read Reader `r` until EOF (`null`) and resolve to the content as
       * Uint8Array`.
       *
       * ```ts
       * // Example from stdin
       * const stdinContent = await Deno.readAll(Deno.stdin);
       *
       * // Example from file
       * const file = await Deno.open("my_file.txt", {read: true});
       * const myFileContent = await Deno.readAll(file);
       * Deno.close(file.rid);
       *
       * // Example from buffer
       * const myData = new Uint8Array(100);
       * // ... fill myData array with data
       * const reader = new Deno.Buffer(myData.buffer as ArrayBuffer);
       * const bufferContent = await Deno.readAll(reader);
       * ```
       */
      export function readAll(r: Reader): Promise;
      /** Synchronously reads Reader `r` until EOF (`null`) and returns the content
       * as `Uint8Array`.
       *
       * ```ts
       * // Example from stdin
       * const stdinContent = Deno.readAllSync(Deno.stdin);
       *
       * // Example from file
       * const file = Deno.openSync("my_file.txt", {read: true});
       * const myFileContent = Deno.readAllSync(file);
       * Deno.close(file.rid);
       *
       * // Example from buffer
       * const myData = new Uint8Array(100);
       * // ... fill myData array with data
       * const reader = new Deno.Buffer(myData.buffer as ArrayBuffer);
       * const bufferContent = Deno.readAllSync(reader);
       * ```
       */
      export function readAllSync(r: ReaderSync): Uint8Array;
      /** Write all the content of the array buffer (`arr`) to the writer (`w`).
       *
       * ```ts
       * // Example writing to stdout
       * const contentBytes = new TextEncoder().encode("Hello World");
       * await Deno.writeAll(Deno.stdout, contentBytes);
       *
       * // Example writing to file
       * const contentBytes = new TextEncoder().encode("Hello World");
       * const file = await Deno.open('test.file', {write: true});
       * await Deno.writeAll(file, contentBytes);
       * Deno.close(file.rid);
       *
       * // Example writing to buffer
       * const contentBytes = new TextEncoder().encode("Hello World");
       * const writer = new Deno.Buffer();
       * await Deno.writeAll(writer, contentBytes);
       * console.log(writer.bytes().length);  // 11
       * ```
       */
      export function writeAll(w: Writer, arr: Uint8Array): Promise;
      /** Synchronously write all the content of the array buffer (`arr`) to the
       * writer (`w`).
       *
       * ```ts
       * // Example writing to stdout
       * const contentBytes = new TextEncoder().encode("Hello World");
       * Deno.writeAllSync(Deno.stdout, contentBytes);
       *
       * // Example writing to file
       * const contentBytes = new TextEncoder().encode("Hello World");
       * const file = Deno.openSync('test.file', {write: true});
       * Deno.writeAllSync(file, contentBytes);