for two-key probabilistic encryption schemes [35] (pp. 170).
Dual-key ciphers provide a very diﬀerent way to formalize
an object suﬃcient to construct garbling schemes.
Formally, a dual-key cipher is a function E that asso-
ciates to any k ∈ N, any keys A, B ∈ {0, 1}k and any tweak
A,B : {0, 1}k → {0, 1}k. Let
T ∈ {0, 1}τ (k) a permutation E
A,B : {0, 1}k → {0, 1}k denote the inverse of this permuta-
tion. It is required that the maps (A, B, T, P) (cid:12)→ E
A,B(P) and
(A, B, T, C) (cid:12)→ D
A,B(C) be polynomial-time computable. We
refer to τ as the tweak length of E.
D
T
T
T
T
The deﬁnition above describes syntax alone. We postpone
giving a security deﬁnition until we’ve deﬁned Garble1.
Definition of Garble1.
Let E be a dual-key cipher
with tweak length τ . We associate to E the garbling scheme
Garble1[E] as shown in Fig. 5. Wires carry k-bit tokens. A
token X will encode a one-bit type. Rather arbitrarily, the
type is the ﬁnal bit of the token, namely its LSB. When
we write T ← g (cid:13) a(cid:13) b (line 106 and 155) where g ∈ N and
a, b ∈ {0, 1}, we mean that g mod 2τ (k)−2 is encoded as a
(τ (k) − 2)-bit string and a(cid:13) b is concatenated, yielding a
τ (k)-bit tweak. The ev function (lines 140–145) is precisely
evcirc; the code is repeated for completeness and to make
visible the commonality with Ev (lines 150–156).
1 , . . . , X xn
To garble a circuit, we begin selecting two tokens for each
wire, one of each type. One of these will represent 0—the
token is said to have semantics of 0—while the other will
represent 1. The variable X b
i names the token of wire i
with semantics (not type!) of b. Thus the encoding func-
tion e (see lines 120–123) will map x = x1 ···x n ∈ {0, 1}n to
X = (X x1
n ). For each wire i that is not an output
wire, we select, at line 102, random tokens of opposite type,
making the association between a token’s type and its se-
mantics random. For each wire i that is an output wire, we
again select random tokens of opposite types, but this time
the token’s type is the token’s semantics.
Lines 104–106 compute q garbled truth tables, one for each
gate g. Table P [g,·,·] has four rows, entry a, b the row to
use when the left incoming token is of type a and the right
incoming token is of type b. The token that gets encrypted
for this row (line 106) is the token for the outgoing-wire with
the correct semantics. At lines 154–155, given two tokens Xa
and Xb we use their types to determine which entry of the
propagation table we need to decrypt. The description of
the decoding function d (line 109) is empty because no in-
formation is needed to map an output token to its semantics,
the type being the semantics.
Security notion for dual-key ciphers. We already
A,B : {0, 1}k →
deﬁned the syntax of a DKC, a permutation E
{0, 1}k for each A, B, T. Our deﬁnition of security will allow
the adversary to select whichever of the two keys it wants to
learn. We will hand it not only that key but, also, the last of
the undisclosed key. (This corresponds to the type bit in runs
of Garble1). We consider only nonadaptive, known-plaintext
attacks. These plaintexts will be either the disclosed keys or
truly random strings. We prohibit encryption cycles. During
the adversary’s attack, the tweaks used must be nonces—
values used at most once.
More formally, the security of a DKC E : {0, 1}k×{0, 1}k×
T
790(n, m, q, A, B, G) ← f
for i ∈ {1, . . . , n + q − m} do t (cid:2){0, 1}, X 0
for i ∈ {n + q − m + 1, . . . , n + q} do X 0
for (g, i, j) ∈ {n + 1, . . . , n + q} × {0, 1} × {0, 1} do
i (cid:2){0, 1}k−1t X 1
i (cid:2){0, 1}k−10, X 1
i (cid:2) {0, 1}k−1t
i (cid:2) {0, 1}k−11
100 proc Gb(1k, f )
101
102
103
104
105
106
107 F ← (n, m, q, A, B, P )
1 , . . . , X 0
108
109 d ← ε
110
a ← A(g), b ← B(g)
A ← X i
e ← (X 0
return (F, e, d)
1 , X 1
n, X 1
n)
a, a ← lsb(A), B ← X j
b , b ← lsb(B), T ← g (cid:13) a(cid:13) b, P [g, a, b] ← E
(cid:2)
X Gg (i,j)
g
(cid:3)
T
A,B
(X 0
120 proc En(e, x)
121
122 X ← (X x1
return X
123
1 , X 1
1 , . . . , X 0
n) ← e
n, X 1
1 , . . . , X xn
n )
140 proc ev(f, x)
141
142
143
144
145
(n, m, q, A, B, G) ← f
for g ← n + 1 to n + q do
a ← A(g), b ← B(g)
x ← Gg(xa, xb)
return xn+q−m+1 . . . xn+q
130 proc De(d, Y )
131 (Y1, . . . , Ym) ← Y
132 for i ∈ {1, . . . , m} do yi ← lsb(Yi)
133 return y ← y1 ···y m
150 proc Ev(F, X)
151
152
153
154
155
156
(n, m, q, A, B, P ) ← F
for g ← n + 1 to n + q do
return (Xn+q−m+1, . . . , Xn+q)
a ← A(g), b ← B(g)
A ← Xa, a ← lsb(A), B ← Xb, b ← lsb(B)
T ← g (cid:13) a(cid:13) b, Xg ← D
(cid:2)
(cid:3)
P [g, a, b]
T
A,B
Game DKC
return lsb(K)
K2i (cid:2){0, 1}k−1 0
K2i−1 (cid:2){0, 1}k−1 1
proc Initialize()
b (cid:2){0, 1}, K (cid:2) {0, 1}k, R1, R2, . . . (cid:2){0, 1}k
for i ∈ {1, 2 . . .} do
Figure 5: Garbling scheme Garble1. Its components are (Gb, En, De, Ev, ev) where ev, shown for completeness,
is the canonical circuit evaluation. We assume a DKC E with tweak length τ and let D denote its inverse.
At line 102, we use {0, 1}k−1t and {0, 1}k−1t to refer to the sets of k-bit binary strings whose last bit is t and t
respectively.
{0, 1}τ (k) × {0, 1}k → {0, 1}k is speciﬁed using the game
of Fig. 6. The game starts by choosing a bit b (cid:2) {0, 1}
and a key K (cid:2){0, 1}k. It chooses inﬁnitely many random
strings K1, K2, . . . such that the last bit of Ki is i mod 2. It
chooses inﬁnitely many random strings R1, R2, . . .. Except
for the last bit of K, the key K shall be kept secret. The
strings K1, K2, . . . are initially secret, but the adversary A
will eventually learn them through its queries. The random
strings R1, R2, . . ., used only in the “reference game” when
b = 0, are secret. We require that the adversary A be non-
adaptive, that is, it prepares all queries before interrogating
In each query, adversary A has to spec-
the DKC oracle.
ify an integer i indicating that it wants to use {K, Ki} as
keys of the dual-key cipher for this query, and an integer j,
indicating that it wants to encrypt the string Kj . We re-
quire that i < j to avoid encryption cycles. It also speciﬁes
a boolean pos to indicate the position, left or right, of the
secret key K. Finally, it provides a tweak T, which must
be a nonce. If b = 1 then the oracle returns the encryption
of Kj to the adversary. If b = 0 then the oracle returns the
encryption of Rj . When adversary A outputs a bit b
its
(k)] − 1. We say
advantage is Advdkc
E (A, k)
that E is a secure dual-key cipher if ε(k) = Advdkc
is negligible for every nonadaptive PPT adversary A whose
input is 1k and the bit returned by Initialize.
Discussion.
By way of further explanation, ciphertexts
T1
T2
K,K1 (X1), E
K2,K(X2), . . . should be indistinguishable from
E
random strings as long as K is secret and the tweaks T1, T2, . . .
are nonces—even if random values Ki and Xj are all dis-
closed. We demand that this hold even if the last bit of K
is released to the adversary and the adversary can actively
choose the last bit of each Ki.
A subtle issue arises when the adversary happens to pos-
T2
K2,K(X). One may be tempted to
sess, say E
require that the two ciphertexts be indistinguishable from
two independent random strings. This, however, would not
T
A,B(X) = EA(EB(X)) for an ideal ci-
allow instantiations like E
pher E. Instead, we choose a secret Y (cid:2)M, where M is the
T2
K2,K (X)
message space, and demand that E
be indistinguishable from E
proc Encrypt(i, j, pos, T)
if used[T] or i ≥ j then return ⊥
used[T] ← true
if pos = 1 then (A, B) ← (K, Ki) else (A, B) ← (Ki, K)
if b = 1 then X ← Kj else X ← Rj
return (Ki, Kj , E
T
Figure 6: Security of a DKC. Cipher E
A,B has a tweak
and two keys, only one of which, K, its position cho-
sen by the adversary, is secret. The ﬁnal bit of K is
disclosed. Procedure Finalize(b
The deﬁnitional intricacies for dual-key ciphers arise from
wanting to require of a DKC little more than what is actually
T1
K1,K (X) and E
T2
K2,K (Y ).
E (A, k) = 2 Pr[DKC
A
T1
K1,K (Y ) and E
T1
K1,K (X) and E
) returns (b = b
T
A,B(X))
).
(cid:3)
(cid:3)
(cid:3)
791needed to prove Garble1. Too strong a deﬁnition for DKC
security and interesting instantiations will be lost.
Security of Garble1. Our deﬁnition of DKC security
suﬃces to prove security for Garble1. The result is stated
below and proven in the full version of this paper [11].
Theorem 1. Let E be a secure dual-key cipher. Then
G = Garble1[E] ∈ GS(prv.ind, Φtopo).
E (D, k) ≥ 1
The theorem is underlain by an explicit, blackbox, uniform
if A(1k) outputs circuits of at most r
reduction U s.t.
wires and fan-out at most ν, then D = U
A
achieves advan-
(A, k) and makes
tage Advdkc
Q ≤ 2ν oracle queries, with E[Q] < 4. It runs in time about
that of A plus the time for 4r computations of E on k-bit
keys. The small overhead implicit in the word “about” is
manifest in the proof. The above assumes that r ≤ 2τ (k)−2.
In asymptotic statements, r and ν are understood as poly-
nomials r(k) and ν(k).
prv.ind, Φtopo
G
2r Adv
We comment that Garble1 does not satisfy obliviousness
or authenticity. To defeat obliviousness, an adversary can
just make the query (AND, OR, 00, 11) to receive (F, X),
and then evaluate Y = Ev(F, X), returning 1 if De(ε, Y ) = 1
and 0 otherwise. This adversary has advantage 1. To defeat
authenticity, an adversary can query (OR, 11), and then
output (0k, 0k). Again it has advantage 1. We will soon
describe Garble2 that satisﬁes obliviousness and authenticity
in addition to privacy.
The primitive used by Lindell and Pinkas [35] as a basis for
encryption of gate entries is a randomized, IND-CPA secure
symmetric encryption scheme with an elusive and eﬃciently
veriﬁable range. Dual-key ciphers, in contrast, are deter-
ministic. Our PRF-based instantiation avoids probabilistic
encryption. Besides speed it results in shorter ciphertexts
for each row of each gate. The additional properties of en-
cryption assumed by [35] are to allow the evaluator to know
which gate entry is the “correct” one. Our solution via type
bits (the “point-and-permute” technique, which dates to Ro-
gaway [45]) is well known.
Dual-key ciphers from a PRF. Our primary interest will
be in instantiating a dual-key cipher via a PRF. Let F asso-
ciate to key K ∈ {0, 1}k−1 a map FK : {0, 1}τ (k) → {0, 1}k.
We require that the map K, T (cid:12)→ FK(T) be polynomial-time
computable. We refer to τ as the input length.
The prf-advantage of an adversary D against F is deﬁned
F (k)] − 1 where game PRFF is
D
as Adv
as follows. Initialize picks a random bit b and a random
(k − 1)-bit key K. The adversary has access to procedure Fn
that maintains a table Tbl[·] initially everywhere undeﬁned.
Given T ∈ {0, 1}τ (k), the procedure returns F(K, T) if b = 1.
Otherwise, it picks and returns Tbl[T] (cid:2){0, 1}k if Tbl[T] =
⊥, or returns Tbl[T] if Tbl[T] (cid:6)= ⊥. Finalize(b
(cid:3)
) returns
F (D,·) is
prf
). We say that F is PRF-secure if Adv
(b = b
negligible for all polynomial-time adversaries D.
F (D, k) = 2 Pr[PRF
prf
Given a PRF F as above, we deﬁne the dual-key cipher