# BCC Documentation

## Table of Contents
1. [README](#readme)
2. [Reference](#reference)
3. [Manual](#manual)
4. [Guide](#guide)
5. [Tools](#tools)
6. [Examples](#examples)
7. [Pages](#pages)
8. [INSTALL](#install)
9. [Tutorials](#tutorials)
10. [Python Files](#python-files)
11. [Example Files](#example-files)
12. [Markdown Files](#markdown-files)
13. [BCC Tools and Tutorial](#bcc-tools-and-tutorial)
14. [BCC Features](#bcc-features)
    - [Kernel-Level Features](#kernel-level-features)
    - [User-Level Features](#user-level-features)
15. [BCC Installation](#bcc-installation)
    - [Kernel Requirements](#kernel-requirements)
    - [Ubuntu](#ubuntu)
    - [RHEL](#rhel)
    - [Other Distributions](#other-distributions)
16. [BCC Tools](#bcc-tools)
    - [Highlighted Tools](#highlighted-tools)
    - [Tool Characteristics](#tool-characteristics)
    - [Single-Purpose Tools](#single-purpose-tools)
    - [Multi-Purpose Tools](#multi-purpose-tools)

---

## README
This section provides an overview of the BCC repository.

## Reference
Find detailed reference materials for BCC tools and development.

## Manual
Access the manual pages for BCC tools.

## Guide
A comprehensive guide for using BCC tools and developing new ones.

## Tools
Explore the various BCC tools available.

## Examples
View example usage and output for BCC tools.

## Pages
Navigate through the documentation pages.

## INSTALL
Instructions for installing BCC on different Linux distributions.

## Tutorials
Step-by-step tutorials for using and developing BCC tools.

## Python Files
List of Python files in the BCC repository.

## Example Files
Example files demonstrating the use of BCC tools.

## Markdown Files
Documentation and guides in Markdown format.

## BCC Tools and Tutorial
Figure 4-1: BCC structure
The BCC repository includes tools, a tutorial, and a reference guide for BCC tool development. It provides interfaces for developing BCC tools in Python, C++, and Lua. More interfaces may be added in the future.
Repository: https://github.com/iovisor/bcc

In the BCC repository, Python tools have a `-py` extension, which is usually removed when BCC is installed via a software package. The final location of the BCC tools and man pages depends on the package used, as different Linux distributions have packaged it differently. Tools may be installed in `/usr/share/bcc/tools`, `/sbin`, or `/snap/bin`, and may have a prefix or suffix to indicate they are from the BCC collection. These differences are described in Section 4.3.

## BCC Features
BCC is an open-source project created and maintained by engineers from various companies. It is not a commercial product. Feature lists can help you understand the capabilities of BCC. The features are organized into kernel- and user-level features.

### Kernel-Level Features
- **Dynamic instrumentation, kernel-level (BPF support for kprobes)**
- **Dynamic instrumentation, user-level (BPF support for uprobes)**
- **Static tracing, kernel-level (BPF support for tracepoints)**
- **Timed sampling events (BPF with perf_event_open())**
- **PMC events (BPF with perf_event_open())**
- **Filtering (via BPF programs)**
- **Debug output (bpf_trace_printk())**
- **Per-event output (bpf_perf_event_output())**
- **Basic variables (global and per-thread variables, via BPF maps)**
- **Associative arrays (via BPF maps)**
- **Frequency counting (via BPF maps)**
- **Histograms (power-of-two, linear, and custom, via BPF maps)**
- **Timestamps and time deltas (bpf_ktime_get_ns() and BPF programs)**
- **Stack traces, kernel (BPF stackmap)**
- **Stack traces, user (BPF stackmap)**
- **Overwrite ring buffers (perf_event_attr.write_backward)**
- **Low-overhead instrumentation (BPF JIT, BPF map summaries)**
- **Production safe (BPF verifier)**

### User-Level Features
- **Static tracing, user-level (SystemTap-style USDT probes via uprobes)**
- **Debug output (Python with BPEtrace_pipe() and BPEtrace_fields())**
- **Per-event output (BPF_PERF_OUTPUT macro and BPE.open_perf_buffer())**
- **Interval output (BPE.get_table() and table.clear())**
- **Histogram printing (table.print_log2_hist())**
- **C struct navigation, kernel-level (BCC rewriter maps to bpf_probe_read())**
- **Symbol resolution, kernel-level (ksym() and ksymaddr())**
- **Symbol resolution, user-level (usymaddr())**
- **Debuginfo symbol resolution support**
- **BPF tracepoint support (via TRACEPOINT_PROBE)**
- **BPF stack trace support (BPF_STACK_TRACE)**
- **Various other helper macros and functions**
- **Examples (under /examples)**
- **Many tools (under /tools)**
- **Tutorials (/docs/tutorial*.md)**
- **Reference guide (/docs/reference_guide.md)**

## BCC Installation
BCC packages are available for many Linux distributions, including Ubuntu, RHEL, Fedora, and Amazon Linux. For the latest install and build instructions, check `INSTALL.md` in the BCC repository.

### Kernel Requirements
BCC tools require major kernel BPF components added between Linux 4.1 and 4.9. It is recommended to use a Linux 4.9 kernel or later. Ensure the following kernel configuration options are enabled:
- `CONFIG_BPF=y`
- `CONFIG_BPF_SYSCALL=y`
- `CONFIG_BPF_EVENTS=y`
- `CONFIG_BPF_JIT=y`
- `CONFIG_HAVE_EBPF_JIT=y`

These options are enabled by default in many distributions.

### Ubuntu
Install BCC using the following command:
```sh
sudo apt-get update
sudo apt-get install bcc-tools
```
This will place the tools in `/sbin` with a `-bpfcc` suffix. You can also fetch the latest stable and signed packages from the iovisor repository:
```sh
echo "deb https://repo.iovisor.org/apt/$(lsb_release -cs) $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/iovisor.list
sudo apt-get update
sudo apt-get install bcc-tools
```
The tools are installed in `/usr/share/bcc/tools`.

Alternatively, BCC is available as an Ubuntu snap:
```sh
sudo snap install bcc
```
The tools are installed in `/snap/bin` and available with a `bcc.` prefix (e.g., `bcc.opensnoop`).

### RHEL
BCC is included in the official yum repository for Red Hat Enterprise Linux 7.6 and can be installed using:
```sh
sudo yum install bcc-tools
```
The tools are installed in `/usr/share/bcc/tools`.

### Other Distributions
Refer to `INSTALL.md` for installation instructions for Fedora, Arch, Gentoo, and openSUSE, as well as instructions for building from source.

## BCC Tools
Figure 4-2: BCC performance tools
BCC includes a variety of tools to observe and analyze system components.

### Highlighted Tools
| Topic | Highlighted Tools | Chapter |
|-------|------------------|---------|
| Debugging / multi-purpose | `trace`, `argdist`, `funccount`, `stackcount`, `opensnoop` | 4 |
| CPUs | `execsnoop`, `runqlat`, `runqlen`, `cpudist`, `profile`, `offcputime`, `syscount`, `softirq`, `hardirq` | 6 |
| Memory | `memleak` | 7 |
| File systems | `opensnoop`, `filfe`, `vfsstatt`, `fleslower`, `cachestat`, `writeback`, `dcstat`, `xfsslower`, `xfsdist`, `ext4dist` | 8 |
| Disk I/O | `biolatency`, `biosnoop`, `biotop`, `bitesize` | 6 |
| Networking | `tcpconnect`, `tcpaccept`, `tcplife`, `tcpretrans` | 10 |
| Security | `capable` | 11 |
| Languages | `javastat`, `javacalls`, `javathreads`, `javaflow`, `javagc` | 12 |
| Applications | `mysqld_qslower`, `signals`, `killsnoop` | 13 |
| Kernel | `wakeuptime`, `offwaketime` | 14 |

### Tool Characteristics
- **Real observability issues**: Built out of necessity.
- **Designed for production environments**: Run by the root user.
- **Man page for every tool**: Located under `man/man8`.
- **Example file for every tool**: Contains example output and explanations (under `tools/*_example.txt`).
- **Options and arguments**: Most tools accept options and arguments and print a USAGE message with the `-h` option.
- **Consistent style**: Source code follows a consistent style (checked using the `pep8` tool).
- **Reviewed by maintainers**: New tool additions are reviewed by BCC maintainers, and authors are directed to follow the `CONTRIBUTING_SCRIPTS.md` guide.

### Single-Purpose Tools
BCC contains many single-purpose tools, such as `opensnoop(8)`, `execsnoop(8)`, and `biolatency(8)`. These tools are easy to learn and maintain, and provide concise and practical code examples.

#### Example: `opensnoop(8)`
Usage:
```sh
usage: opensnoop [-h] [-T] [-U] [-x] [-p PID] [-t TID] [-u UID] [-d DURATION] [-n NAME] [-e] [-f FLAG_FILTER]
Trace open() syscalls
optional arguments:
  -h, --help            show this help message and exit
  -T, --timestamp       include timestamp on output
  -U, --print-uid       print UID column
  -x, --failed          only show failed opens
  -p PID, --pid PID     trace this PID only
  -t TID, --tid TID     trace this TID only
  -u UID, --uid UID     trace this UID only
  -d DURATION, --duration DURATION
                        total duration of trace in seconds
  -n NAME, --name NAME  only print process names containing this name
  -e, --extended-fields show extended fields
  -f FLAG_FILTER, --flag-filter FLAG_FILTER
                        filter on flags argument (e.g., O_WRONLY)
```
Examples:
```sh
$ opensnoop
$ opensnoop -T
$ opensnoop -U
$ opensnoop -x
$ opensnoop -p 181
$ opensnoop -t 123
$ opensnoop -u 1000
$ opensnoop -d 10
$ opensnoop -n main
$ opensnoop -e
$ opensnoop -f O_WRONLY -f O_RDWR
```

### Multi-Purpose Tools
BCC also includes multi-purpose tools that can be used for a variety of tasks. They are more powerful but harder to learn. Some of the most powerful multi-tools are `funccount(8)`, `stackcount(8)`, `trace(8)`, and `argdist(8)`.

#### Advantages of Multi-Purpose Tools
- **Greater visibility**: Analyze multiple components at once.
- **Reduces code duplication**: Avoid having multiple tools with similar code.

### Table 4-2: Multi-purpose Tools Covered in This Chapter
| Tool | Source | Description |
|------|--------|-------------|
| `funccount` | BCC Software | Counts events including function calls |
| `stackcount` | BCC Software | Counts stack traces that led to events |
| `trace` | BCC Software | Prints custom per-event details |
| `argdist` | BCC Software | Analyzes argument distributions |

---

For more information, refer to the BCC repository: https://github.com/iovisor/bcc