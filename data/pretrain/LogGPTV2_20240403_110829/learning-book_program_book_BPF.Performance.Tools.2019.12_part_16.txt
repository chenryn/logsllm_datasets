README
Reference
Man
Guide
Tools
Examples
Pages
INSTALL
Tutorials
*.py
*_exanple.txt
*,8
*,md
python
Figure 4-1 BCC structure
for using BCC tools and a tutorial and reference guide for BCC tool development. It provides
be added in the future.
interfaces for developing BCC tools in Python, C++, and lua (not pictured); more interfaces may
The repository is:
https://github.com/iovisor/bcc
In the BCC repository, the Python tools have a -py extension, but this extension is usually
removed when BCC is installed via a software package. The final location of the BCC tools and
man pages depends on the package you use, as different Linux distributions have packaged it
dlifferently. Tools may be installed either in /ust/share/bcc/tools, /sbin, or /snap/bin, and the
tools themselves may have a prefix or suffix to show that they are from the BCC collection. These
differences are described in Section 4.3.
4.2
BCC Features
It is not a commercial product. If it were, there would be a marketing department creating
BCC is an open source project created and maintained by engineers from various companies.
advertisements, boasting of its many features.
Feature lists (if accurate) can help you learn the capabilities of a new technology. During BPF and
BCC development, I created lists of desired capabilities [57]. As these features now exist, these
have become delivered feature lists and are organized into kernel- and user-level features. They are
described in the following sections.
---
## Page 124
4.2  BCC Features
8
4.2.1Kerne-Level Features
BCC can use a number of kernel-level features, such as BPF, kprobes, uprobes, and so on. The
following list includes some implementation details in parentheses:
 Dynamic instrumentation, kermel-level (BPF support for kprobes)
• Dynamic instrumentation, user-level (BPF support for uprobes)
 Static tracing, kernel-level (BPF support for tracepoints)
• Timed sampling events (BPF with perf_event_open())
• PMC events (BPF with perf_event_open()
• Filtering (via BPF programs)
 Debug output (bpf_trace_printk())
• Per-event output (bpf_perf_event_output())
 Basic variables (global and per-thread variables, via BPF maps)
● Associative arrays (via BPF maps)
● Frequency counting (via BPF maps)
•Histograms (power-of-two, linear, and custom, via BPF maps)
 Timestamps and time deltas (bpf_ktime_get_ns() and BPF programs)
•Stack traces, kernel (BPF stackmap)
Stack traces, user (BPF stackmap)
 Overwrite ring buffers (perf_event_attr.write_backward)
■ Low-overhead instrumentation (BPF JIT, BPF map summaries)
• Production safe (BPF verifier)
See Chapter 2 for background on these kernel-level features
4.2.2 BCC User-Level Features
The BCC user-level front end and BCC repository provide the following user-level features
 Static tracing, user-level (SystemTap-style USDT probes via uprobes)
• Debug output (Python with BPEtrace_pipe() and BPEtrace_fields0)
• Per-event output (BPF_PERF_OUTPUT macro and BPE.open_perf_buffer()
• Interval output (BPE.get_table( and table.clear()
 Histogram printing (table.print_log2_hist()
● C struct navigation, kernel-level (BCC rewriter maps to bpf_probe_read0)
Symbol resolution, kernel-level (ksym() and ksymaddr())
---
## Page 125
88
Chapter 4 BCC
• Symbol resolution, user-level (usymaddr()
 Debuginfo symbol resolution support
• BPF tracepoint support (via TRACEPOINT_PROBE)
 BPF stack trace support (BPF_STACK_TRACE)
Various other helper macros and functions
 Examples (under /examples)
• Many tools (under /tools)
•Tutorials (/does/tutorial*.md)
• Reference guide (/docs/reference_guide.md)
4.3BCCInstallation
BCC packages are available for many Linux distributions, including Ubuntu, RHEL, Fedora, and
the latest install and build instructions, check INSTALL.md in the BCC repository [58].
Amazon Linux, making installation trivial. If desired, you can also build BCC from source. For
4.3.1 Kernel Requirements
The major kernel BPF components that BCC tools use were added between the Linux 4.1 and 4.9
releases, but improvements have been added in later releases, so the newer your kernel, the better.
It is therefore recommended that you use a Linux 4.9 kernel (released in December 2016) or later.
Some kernel configuration options also need to be enabled: CONFIG_BPF=y, CONFIG_BPF_
SYSCALL=y, CONFIG_BPF_EVENTS=y, CONFIG_BPF_JIT=y, and CONFIG_HAVE_EBPF_JIT=y.
These options are now enabled by default in many distributions, so you typically do not need to
change them.
4.3.2 Ubuntu
sooopdq aeu aesped a m rosoda asaanu nunq a u paeed uaq seu 
Install it using the following command:
(x- eueum) s-sxepeey-xnutT stooq-oogdq Ttesut 1e6de opns
This will place the tools in /sbin with a *-bpfce” suffix:
 1s /sbLn/*bpfcc
/usr/sbin/axgdist-bpfcc
/usr/sbin/bashxead1ine=bpfcc
/usr/sbin./biolatencybpfce
/usz/sbin/blosnoop-bpfcc
/usr/slbin/biotop-bpfcc
---
## Page 126
4.4 BCC Tools
89
/usr/sbin/bitesizebpfcc
[.--]
+ opensnoop-bpfoo
PID
CONX
29588device po11
FD ERR PATH
qzn/2nq,/nap/ 0
[.--]
You can also fetch the latest stable and signed packages from the iovisor repository:
000+8ztaeszzs0s sfexnoex-- wco*nqumgn*xenxes/ex xesxes.ex-- ape exde opns
echo *deb https://repo.iovisot,org/apt/$(lsb_release -cs} $ (lsb_release -cs) msin* 1\
sudo tee /etc/apt/souzces 1ist,d/1ovisor, 1ist
α4epdn 4a6↓de opns
[x- oueun) s-sxepeexnutt serduexeoogatt stooa-ooq tteasut 1e6de cpns
The tools are installed in /usz/share/bcc/tools.
Finally, BCC is also available as an Ubuntu snap:
sudo snap install bcc
The tools are installed in /snap/bin (which may already be in your SPATH) and available with a
*bc.” prefix (e.g., bcc.opensnoop).
4.3.3 RHEL
BCC is included in the official yum repository for Red Hat Enterprise Linux 7.6 and can be
installed using:
sudo yus Inatall bcc=too1.s
The tools are installed in /ust/share/bcc/tools.
4.3.4 Other Distributions
The INSTALL_md also includes install instructions for Fedora, Arch, Gentoo, and openSUSE, as
well as instructions for source code builds.
4.4BCC Tools
Figure 4-2 shows major system components and many of the BCC tools available to observe
them.
agsin after book publication, after porting some of the most important new bpftrace tools from this book to BCC.
---
## Page 127
90
Chapter 4 BCC
bashreadline
gethost]atency
Applications
kilian
Gacbetatcocbe
Runtimes
System Libraries
cpadies cpo
pidpe
dLw
System Call Interface
Sockets
protile
Fle Systems
TCP/UDP
Scheduler
offetineptine
btrfsdist
Volume Manager
IP
Net Device
p dre
Device Drivers
mdflush
teptop teplife teptraoer
Other:
capable
sofdsnoop
Figure 4-2
BCC performance tools
4.4.1
Highlighted Tools
Table 4-1
Selected BCC Tools by Topic and Chapter
Topic
Highlighted Tools
Chapter
Debugging /
trace, argdist, funccount, stackcount, opensnoop
4
multi-purpose
CPUs
execsnoop, runqlat, runqlen, cpudist, profile, offcputime,
6
syscount, softirq, hardirq 
Memory
memleak
7
File systems
opensnoop, filfe, vfsstatt, fleslower, cachestat,
8
writeback, dcstat, xfsslower, xfsdist, ext4dist
Disk I/0
biolatency, biosnoop, biotop, bitesize
6
Networking
tcpconnect, tcpaccept, tcplife, tcpretrans
10
Security
capable
11
Languages
javastat, javacalls, javathreads, javaflow, javagc
12
Applications
mysqld_qslower, signals, killsnoop
13
Kermel
wakeuptime, offwaketime
14
---
## Page 128
4.4BCC Tools
T6
Note that these chapters also contain many additional bpftrace tools not listed in Table 4-1
After this chapter and Chapter 5, you may jump to later chapters as needed, using this book as a
reference guide.
4.4.2 Tool Characteristics
The BCC tools all share these characteristics:
•They solve real observability issues, built out of necessity.
They are designed to be run in production environments, by the root user.
●There is a man page for every tool (under man/man8).
There is an examples file for every tool, containing example output and explanations of
the output (under tools/*_example.txt)
• Many tools accept options and arguments, and most will print a USAGE message if you use
the h option.
The tool source code begins with a block comment introxduction.
•The tool source code follows a consistent style (checked using the pep8 tool).
To maintain consistency, new tool additions are reviewed by the BCC maintainers, and authors
are directed to follow the BCC CONTRIBUTING_SCRIPTS.md guide [59].
The BCC tools are also designed to look and feel like other tools on the system, including
vmstat(1) and iostat(1). As with vmstat(1) and top(1), it is helpful to have some understanding of
how the BCC tools work, especially for estimating tool overhead. This book explains how these
tools work and often describes expected overhead; the internals of BCC and kernel technologies
in use are covered in this chapter and Chapter 2.
g aq 6q pasn salenue Aaeuud au 'spua juouy a8enue suaagp suoddns Og q8nouv
tools are Python for the user-level components and C for kernel-level BPE These Python/C tools
this book.
get the most attention and maintenance from the BCC developers, and are therefore covered in
One of the suggestions in the contributors' guide is *Write the tool to solve the problem and no
more. This encourages the development of single-purpose tools rather than multi-purpose tools,
where possible.
4.4.3 Single-Purpose Tools
au sem sp jo uogssaudxa auo am  op pue Suu auo op o sem xqu po Audosod au
creation of smaller, high-quality tools that could be connected together using pipes to accomplish
more complex tasks. This led to a multitude of small, single-purpose tools that are still in use
today, such as grep(1), cut(1), and sed(1)
---
## Page 129
92
Chapter 4 BCC
BCC contains many similar single-purpose tools, including opensnoop(8), execsnoop(8), and
biolatency(8). opensnoop(8) is a good example. Consider how the options and output are
customized for the one task of tracing open(2) family syscalls:
U- doousuedo 1
usage:opensnoop[h] [-T] [U][x][-p PID][t TID][-u ID]
[d DURATION]  [n NANE] [e] [f FLAG_FILTER]
Trace open () syscalls
optional azguments:
-h,
shov this help nessage and exit
7,
--t.imes tanp
Lnclude tinestanp on output
J,
-=print-uid
print UID column
-x,
--fa1led
only shox falled opens
-p PID,
 --pid PI0
trace this PID only
-t TID,
--t1d 7ID
trace this TID only
-α UID,
--uid UI0
trace this UIo only
-d DURATI08,
--duration DURATION
total duration of trace in seconds
=n NAXE,
--nane NAYE
only print process nanes contain.ing thla nane
-e,
--extended_fields
shov extended flelds
-f FLAG_FILTER,
--flag_fi1ter FLAG_FILTER
filtez on flags argunent (e,g-, O_WRoNLY)
exanples:
 /opensnoop
 trace all open(1 syscalls
/opensnoop -T
#include tLmestanps
/opensnoop -t
 include UID
/opensnoop =x
only show falled opens
TeT d- doousuado/
 only trace PID 181
./opensnoop -t 123
# only trace TID 123
./opensnoop
=α 1000
only trace UID 1000
/opensnoop -d 10
trace fox 10 seconds only
 /opensnoop -n. main
f only print process nanes containing *nsin*
 /opensnoop
shou extended flelds
/opensnoop -f o_MRonLY -f o_RoWR  only print calls for veiting
doousuado 1
PID
CONX
FD ERR PATH
Ttod ataap 88567
qun/znq/6ep/ 0
Itod 8ap 88552
0 /dev/bus/usb/004
[. . - ]
---
## Page 130
4.4BCC Tools
6
For BPF tools, the benefits of this style are
 Easy for beginners to learn: The default output is usually sufficient. This means that
beginners can use these tools immediately without making any decisions about command
line usage, or knowing what events to instrument. For example, opensnoop(8) produces
useful and concise output just by running open.snoop. No knowledge of kprobes or
tracepoints to instrument opens is needed.
• Easy to maintain: For the tool developer, the amount of code to be maintained should be
smaller and require less testing. Multi-purpose tools may instrument a variety of workloads
Susa go simou aunba Aew poo au o aueu eus e os 'sem puauagp jo Aae e u
with different workloads, to confirm that nothing has regressed. For the end user, this
means that the single-purpose tools are more likely to work when you want them to.
 Code examples: Each small tool provides a concise code example that is also practical.
Many people who learn BCC tool development will begin with these single-purpose tools
and customize and extend them as needed.
· Custom arguments and output: The tool arguments, positional parameters, and output
do not need to accommodate other tasks and can be customized for the one single purpose.
qepeau pue Aaqesn aaordu ueo s
For people new to BCC, the single-purpose tools are a good place to start, before moving to more
complex multi-purpose tools.
4.4.4 Multi-Purpose Tools
BCC contains multi-purpose tools that can be used for a variety of different tasks. They are harder
to learn than the single-purpose tools, but they are also more powerful. If you only use the multi-
purpose tools occasionally, you might not need to learn them in depth; you can instead collect
some one-liners to execute when needed.
The advantages of multi-purpose tools are:
·Greater visibility: Instead of analyzing a single task or target, you can look at various
components at once.
• Reduces code duplication: You can avoid having multiple tools with similar code
The most powerful multi-tools in BCC are funccount(8), stackcount(8), trace(8), and argdlist(8),
which are covered in the following sections. These multi-tools often let you decide which events
to trace. However, to take advantage of this flexibility, you need to know which kprobes, uprobes,
and other events to useand how to use them. Later chapters on specific topics return to the
single-purpose tools.
Table 4-2 lists the multi-purpose tools that are summarized in this chapter.
---
## Page 131
94
Chapter 4 BCC
Table 4-2 Multi-purpose Tools Covered in This Chapter
Tool
Source
Description
funccount
BCC
Software
Counts events including function calls
stackcount
BCC
Software
Counts stack traces that led to events
trace
BCC
Software
Prints custom per-event details
argdist
BCC
Software