例如提高work_mem减少某些情况下的临时空间使用。  
#### 绘图  
趋势图  
### 26、数据库IO、事务活跃情况    
#### 检查方法：    
```  
pg_stat_database  
 View "pg_catalog.pg_stat_database"  
    Column     |  Type   | Modifiers   
---------------+---------+-----------  
 datid         | oid     |   
 datname       | name    |   
 numbackends   | integer |   
 xact_commit   | bigint  | -- 提交  
 xact_rollback | bigint  | -- 回滚  
 blks_read     | bigint  | -- 未在数据库shared buffer中命中的读  
 blks_hit      | bigint  | -- 在数据库shared buffer中命中的读  
```  
单位时间已提交事务数  
单位时间回滚事务数  
单位时间事务回滚比率  
单位时间物理读  
单位时间命中读  
单位时间未命中读比例  
以下指标需要修改内核：  
单位时间 qps  
单位时间 insert qps  
单位时间 select qps  
单位时间 update qps  
#### 判断方法：    
超过阈值  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
未命中读过多，建议添加内存。  
回滚率过高，建议业务方排查业务。  
#### 绘图  
趋势图  
### 27、数据库集群概貌  
主机数  
segment数  
规格  
集群配置  
```  
Table "pg_catalog.gp_segment_configuration"  
      Column      |    Type    | Modifiers   
------------------+------------+-----------  
 dbid             | smallint   | not null  
 content          | smallint   | not null  
 role             | "char"     | not null  
 preferred_role   | "char"     | not null  
 mode             | "char"     | not null  
 status           | "char"     | not null  
 port             | integer    | not null  
 hostname         | text       |   
 address          | text       |   
 replication_port | integer    |   
 san_mounts       | int2vector |   
```  
集群历史事件  
```  
  Table "pg_catalog.gp_configuration_history"  
 Column |           Type           | Modifiers   
--------+--------------------------+-----------  
 time   | timestamp with time zone | not null  
 dbid   | smallint                 | not null  
 desc   | text                     |   
```  
已使用容量  
```  
select pg_size_pretty((sum(pg_database_size(datname)))::int8) from pg_database ;  
```  
### 28、吞吐  
单位时间吞吐（每N小时、天、。。。）  
#### 检查方法：    
1、写入、删除、更新记录数（集群级、库级、schema级、owner级、表级）。  
```  
                     View "pg_catalog.pg_stat_database"  
     Column     |           Type           | Collation | Nullable | Default   
----------------+--------------------------+-----------+----------+---------  
 datid          | oid                      |           |          |   
 datname        | name                     |           |          |   
 numbackends    | integer                  |           |          |   
 xact_commit    | bigint                   |           |          |   
 xact_rollback  | bigint                   |           |          |   
 blks_read      | bigint                   |           |          |   
 blks_hit       | bigint                   |           |          |   
 tup_returned   | bigint                   |           |          |   
 tup_fetched    | bigint                   |           |          |   
 tup_inserted   | bigint                   |           |          |   
 tup_updated    | bigint                   |           |          |   
 tup_deleted    | bigint                   |           |          |   
 conflicts      | bigint                   |           |          |   
 temp_files     | bigint                   |           |          |   
 temp_bytes     | bigint                   |           |          |   
 deadlocks      | bigint                   |           |          |   
 blk_read_time  | double precision         |           |          |   
 blk_write_time | double precision         |           |          |   
 stats_reset    | timestamp with time zone |           |          |   
```  
2、容量变化趋势 (实例级、表、索引、SCHEMA、OWERN、DB级）。  
```  
                                   List of functions  
   Schema   |          Name          | Result data type | Argument data types |  Type    
------------+------------------------+------------------+---------------------+--------  
 pg_catalog | pg_database_size       | bigint           | name                | normal  
 pg_catalog | pg_database_size       | bigint           | oid                 | normal  
 pg_catalog | pg_indexes_size        | bigint           | regclass            | normal  
 pg_catalog | pg_relation_size       | bigint           | regclass            | normal  
 pg_catalog | pg_relation_size       | bigint           | regclass, text      | normal  
 pg_catalog | pg_table_size          | bigint           | regclass            | normal  
 pg_catalog | pg_tablespace_size     | bigint           | name                | normal  
 pg_catalog | pg_tablespace_size     | bigint           | oid                 | normal  
 pg_catalog | pg_total_relation_size | bigint           | regclass            | normal  
```  
3、WAL产生速度  
```  
pg_current_wal_lsn()  -- 快照，记录位点  
pg_size_pretty(pg_wal_lsn_diff(lsn1, lsn2))   -- 计算两个位点的WAL差异  
```  
4、临时文件产生速度 (从审计日志生成)    
#### 判断方法：    
超过阈值  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
无  
#### 绘图  
趋势图  
### 29、执行计划翻转  
[《执行计划维度统计\判断执行计划翻转\统计每种执行计划的统计信息 use pg_stat_plans in PostgreSQL 9.0, 9.1 and 9.2》](../201210/20121022_01.md)    
执行计划变化，不做告警，只做诊断参考。  
### 30、安全，认证错误  
日志文件中的密码错误类错误，达到一定阈值，报警。  
```  
Class 28 — Invalid Authorization Specification  
28000	invalid_authorization_specification  
28P01	invalid_password  
```  
### 31、备库延迟(PG)  
1、物理备库  
```  
                    View "pg_catalog.pg_stat_replication"  
      Column      |           Type           | Collation | Nullable | Default   
------------------+--------------------------+-----------+----------+---------  
 pid              | integer                  |           |          |   
 usesysid         | oid                      |           |          |   
 usename          | name                     |           |          |   
 application_name | text                     |           |          |   
 client_addr      | inet                     |           |          |   
 client_hostname  | text                     |           |          |   
 client_port      | integer                  |           |          |   
 backend_start    | timestamp with time zone |           |          |   
 backend_xmin     | xid                      |           |          |   
 state            | text                     |           |          |   
 sent_lsn         | pg_lsn                   |           |          |   
 write_lsn        | pg_lsn                   |           |          |   
 flush_lsn        | pg_lsn                   |           |          |   
 replay_lsn       | pg_lsn                   |           |          |   
 write_lag        | interval                 |           |          |   
 flush_lag        | interval                 |           |          |   
 replay_lag       | interval                 |           |          |   
 sync_priority    | integer                  |           |          |   
 sync_state       | text                     |           |          |   
```  
```  
select pg_xlog_location_diff(pg_current_xlog_location(),flush_location), * from pg_stat_replication;  
select pg_xlog_location_diff(pg_current_xlog_location(),restart_lsn), * from pg_replication_slots;  
```  
```  
查询闪断的逻辑备库,   
select * from pg_stat_replication where application_name = ?;  
如果没有记录返回，说明出现了闪断  
```  
根据主库WAL产生速度，备库WAL APPLY速度，主备WAL差异，评估备库还有多久能赶上主库。（这是在学校时最常见的解追赶问题。）     
2、逻辑备库  
[《PostgreSQL 10 流式物理、逻辑主从 最佳实践》](../201707/20170711_01.md)    
[《PostgreSQL 10.0 preview 逻辑复制 - 原理与最佳实践》](../201702/20170227_01.md)    
### 32、TOP SQL(PG)  
```  
pg_stat_statements  
          View "public.pg_stat_statements"  
       Column        |       Type       | Modifiers   
---------------------+------------------+-----------  
 userid              | oid              |   
 dbid                | oid              |   
 queryid             | bigint           |   
 query               | text             |   
 calls               | bigint           |   
 total_time          | double precision |   
 rows                | bigint           |   
 shared_blks_hit     | bigint           |   
 shared_blks_read    | bigint           |   
 shared_blks_dirtied | bigint           |   
 shared_blks_written | bigint           |   
 local_blks_hit      | bigint           |   
 local_blks_read     | bigint           |   
 local_blks_dirtied  | bigint           |   
 local_blks_written  | bigint           |   
 temp_blks_read      | bigint           |   
 temp_blks_written   | bigint           |   
 blk_read_time       | double precision |   
 blk_write_time      | double precision |   
```  
TOP SQL：  
```  
ORDER BY total cpu  
ORDER BY total io  
ORDER BY per cpu  
ORDER BY per io  
ORDER BY 产生临时文件top  
```  
抖动TOP  
```  
ORDER BY 标准方差(SQL抖动)  
```  
## 数据库维护任务    
### 1、回收垃圾    
#### 处理方法：    
1、确保如下参数打开，注意很多地方都需要依赖这两个参数，比如pg_stat_xxx, pg_statio_xxx。    
```    
track_counts = on    
track_activities = on    
```    
连接到所有数据库，执行如下步骤    
2、查询需要回收垃圾的对象（例如超过20%的垃圾）    
```    
select schemaname, relname from pg_stat_all_tables where  (n_tup_upd+n_tup_del)::float8/(n_tup_upd+n_tup_del+n_tup_ins+1) > 0.2;    
```    
3、回收垃圾    
```    
VACUUM schemaname.relname;    
```    
4、保留统计信息    
```    
insert into tbl select now(),* from pg_stat_all_tables;    
```    
5、清空统计信息    
```    
计数器清零。包括pg_stat_xxx, pg_statio_xxx等。  
select pg_stat_reset();    
```    
#### 重要程度：    
重要    
#### 执行频率：    
天    
### 2、生成统计信息。    
#### 处理方法：    
连接到所有数据库，执行如下步骤    
```    
analyze;    
```    
#### 重要程度：    
重要    
#### 执行频率：    
在导入大量数据、更新大量数据、删除大量数据后，都建议执行。    
### 3、备份。    
#### 处理方法：    
gpcrondump    
#### 重要程度：    
非常重要    
#### 执行频率：    
根据数据变更频率执行。    
如果底层存储支持快照备份，建议快照备份。    
### 4、元数据维护。    
#### 处理方法：    
每个节点都要缓存元数据，用于QUERY一些阶段使用（例如优化器，生成最优执行计划）。    
如果你发现执行计划时间比以前久，也许是系统表需要维护了。    
1、回收垃圾    
同回收垃圾章节    
检查膨胀，并回收垃圾，此处可省略。    
```    
vacuum 系统表;    
```    
2、重建系统表索引    
连接到所有数据库，分别执行    
```    
reindex SYSTEM 库名;    
```    
3、生成系统表统计信息    
```    
ANALYZE pg_catalog.系统表;    
```    
#### 重要程度：    
重要    
#### 执行频率：    
视情况，例如频繁创建表，删除表，创建删除视图、索引、函数等等。则系统表垃圾产生很快。    
周    
## 补丁和升级    
评估并升级OS补丁、GPDB补丁。    
## 参考    
http://gpdb.docs.pivotal.io/43160/admin_guide/monitoring/monitoring.html    
http://greenplum.org/docs/admin_guide/monitoring/monitoring.html    
https://github.com/digoal/pgsql_admin_script/blob/master/generate_report.sh    
[《Use PostgreSQL collect and analyze Operation System statistics》](../201202/20120214_01.md)    
http://pgstatsinfo.sourceforge.net/documents/reporter3.2/html/files/report_sample.html#alerts  
[《PostgreSQL AWR报告(for 阿里云ApsaraDB PgSQL)》](../201611/20161123_01.md)    
[《如何生成和阅读EnterpriseDB (PPAS)诊断报告》](../201606/20160628_01.md)    
http://docs.oracle.com/cd/E11882_01/server.112/e41573/autostat.htm#PFGRF94162  
https://bucardo.org/check_postgres/  
[《PostgreSQL pg_stat_ pg_statio_ 统计信息(scan,read,fetch,hit)源码解读》](../201610/20161018_03.md)    
https://github.com/dalibo/pgbadger  
深挖一下，我们可以基于这些数据实现更详细的诊断报告，包括自动推荐索引，自动SQL重写优化，预测业务高峰，防雪崩等。   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")