name=CVE-2009-1886, 2009.
[27] NIU, B., AND TAN, G. Modular control-ﬂow integrity.
PLDI’14 (2014).
In
[28] PAPPAS, V., POLYCHRONAKIS, M., AND KEROMYTIS, A. D.
Transparent ROP exploit mitigation using indirect branch tracing.
In USENIX Security (2013), pp. 447–462.
[29] PAX-TEAM. PaX ASLR (Address Space Layout Randomiza-
tion). http://pax.grsecurity.net/docs/aslr.txt, 2003.
[30] PAYER, M., BARRESI, A., AND GROSS, T. R. Fine-grained
control-ﬂow integrity through binary hardening. In DIMVA’15.
[31] PHILIPPAERTS, P., YOUNAN, Y., MUYLLE, S., PIESSENS,
F., LACHMUND, S., AND WALTER, T. Code pointer mask-
ing: Hardening applications against code injection attacks.
In
DIMVA’11 (2011).
[32] PINCUS, J., AND BAKER, B. Beyond stack smashing: Recent
advances in exploiting buffer overruns. IEEE Security and Pri-
vacy 2 (2004), 20–27.
[33] ROPPER. Ropper – rop gadget ﬁnder and binary information tool.
https://scoding.de/ropper/, 2014.
[34] SALWAN, J. ROPgadget – Gadgets ﬁnder and auto-roper. http:
//shell-storm.org/project/ROPgadget/, 2011.
[35] SCHWARTZ, E. J., AVGERINOS, T., AND BRUMLEY, D. Q:
Exploit hardening made easy. In USENIX Security’11 (2011).
[36] SHACHAM, H. The geometry of innocent ﬂesh on the bone:
Return-into-libc without function calls (on the x86). In CCS’07.
[37] SZEKERES, L., PAYER, M., WEI, T., AND SONG, D. SoK:
Eternal war in memory. In IEEE S&P’13 (2013).
[38] VAN DE VEN, A., AND MOLNAR,
I.
Exec shield.
https://www.redhat.com/f/pdf/rhel/WHP0006US_
Execshield.pdf, 2004.
[17] JIM, T., MORRISETT, J. G., GROSSMAN, D., HICKS, M. W.,
CHENEY, J., AND WANG, Y. Cyclone: A safe dialect of C. In
ATC’02 (2002).
[39] WANG, Z., AND JIANG, X. Hypersafe: A lightweight approach
In IEEE
to provide lifetime hypervisor control-ﬂow integrity.
S&P’10 (2010).
174  24th USENIX Security Symposium 
USENIX Association
14
[40] YEE, B., SEHR, D., DARDYK, G., CHEN, J. B., MUTH, R.,
ORMANDY, T., OKASAKA, S., NARULA, N., AND FULLAGAR,
N. Native client: A sandbox for portable, untrusted x86 native
code. In IEEE S&P’09 (2009).
[41] ZENG, B., TAN, G., AND ERLINGSSON, U. Strato: A retar-
getable framework for low-level inlined-reference monitors. In
USENIX Security’13 (2013).
[42] ZHANG, C., WEI, T., CHEN, Z., DUAN, L., MCCAMANT, S.,
AND SZEKERES, L. Protecting function pointers in binary. In
ASIACCS’13 (2013).
[43] ZHANG, C., WEI, T., CHEN, Z., DUAN, L., SZEKERES, L.,
MCCAMANT, S., SONG, D., AND ZOU, W. Practical control
ﬂow integrity and randomization for binary executables. In IEEE
S&P’13 (2013).
[44] ZHANG, M., AND SEKAR, R. Control ﬂow integrity for COTS
binaries. In USENIX Security’13 (2013).
A Minimal vulnerable program for indi-
rect jump or call hijacking
The program in Figure 6 contains a bug that allows the
attacker to reliably hijack an indirect jump or indirect call
target. The function overflow() allows an attacker to
overﬂow a struct allocated on the stack that contains two
pointers used as the targets for an indirect jump or an
indirect call, respectively. The attacker can use the indi-
rect jump or call to divert control ﬂow to a return gadget
and continue with a classic ROP attack. Alternatively, an
attacker may rely on JOP or COP techniques. We also
examined variations of this minimal vulnerable program,
e.g., putting the struct somewhere on the heap or requir-
ing the attacker to ﬁrst perform a stack pivot to ensure
that the stack pointer points to attacker-controlled data.
B Printf is Turing-complete
The semantics of printf() allow for Turing-complete
computation while following the minimal CFG.
At a high level, we achieve Turing-completeness by
creating logic gates out of calls to printf(). We show
how to expand a byte to its eight bits, and how to com-
pact the eight bits back to a byte. We will compute on
values by using them in their base-1 (unary) form and
we will use string concatenation as our primary method
of arithmetic. That is, we represent a true value as the
byte sequence 0x01 0x00, and the false value by the byte
sequence 0x00 0x00, so that when treated as strings their
lengths are 1 and 0 respectively.
Figure 7 contains an implementation of an OR gate us-
ing only calls to printf(). In the ﬁrst call to printf(),
if either of the two inputs is non-zero, the output length
will be non-zero, so the output will be set to a non-zero
value. The second call to printf() normalizes the value
so if it was any non-zero value it becomes a one. Figure 7
# include 
# include 
# define STDIN 0
void j m p t a r g e t ();
void c a l l t a r g e t ();
struct data {
char buf [1024];
int arg1 ;
int arg2 ;
int arg3 ;
void (* jmpPtr )();
void (* callPtr )( int , int , int );
};
void o v e r f l o w () {
struct data o u r _ d a t a ;
o u r _ d a t a . jmpPtr = && label ;
o u r _ d a t a . callPtr = & c a l l t a r g e t ;
printf ( " % x \ n " , ( u n s i g n e d int )& o u r _ d a t a . buf );
printf ( " \ ndata > ‘ " );
read ( STDIN , o u r _ d a t a . buf , 1044);
printf ( " \ n " );
asm ( " push ‘ %0; push ‘ %1; push ‘ %2; call ‘ *%3; add ‘ $12 ,%% esp ; "
: :" r " ( o u r _ d a t a . arg3 ) ,
" r " ( o u r _ d a t a . arg2 ) ,
" r " ( o u r _ d a t a . arg1 ) ,
" r " ( o u r _ d a t a . callPtr ));
asm ( " jmp ‘ *%0 " : : " r " ( o u r _ d a t a . jmpPtr ));
printf ( " ?\ n " );
label :
printf ( " label ‘ reached \ n " );
}
void j m p t a r g e t () {
printf ( " j m p t a r g e t () ‘ called \ n " );
}
void c a l l t a r g e t ( int arg1 , int arg2 , int arg3 ) {
printf ( " c a l l t a r g e t () ‘ called ‘ ( args : ‘ %x , ‘ %x , ‘ % x )\ n " ,
arg1 , arg2 , arg3 );
}
int main ( int argc , char * argv []) {
setbuf ( stdout , NULL );
o v e r f l o w ();
printf ( " \ ndone .\ n " );
return 0;
}
Figure 6: A minimal vulnerable program that allows hi-
jack of an indirect jump or indirect call target.
implements a NOT gate using the fact that adding 255 is
the same as subtracting one, modulo 256.
In order to operate on bytes instead of bits in our con-
trived format, we implement a test gate which can test if
a byte is equal to a speciﬁc value. By repeating this test
gate for each of the 256 potential values, we can con-
vert a 8-bit value to its “one-hot encoding” (a 256-bit
value with a single bit set, corresponding to the orig-
inal value). Splitting a byte into bits does not use a
pointer to a byte, but a byte itself. This requires that
the byte is on the stack. Moving it there takes some
effort, but can still be done with printf(). The eas-
iest way to achieve this would be to interweave calls
to memcpy() and printf(), copying the bytes to the
stack with memcpy() and then operating on them with
USENIX Association  
24th USENIX Security Symposium  175
15
void or ( int * in1 , int * in2 , int * out ) {
printf ( " % s % s % n " , in1 , in2 , out );
printf ( " % s % n " , out , out );
}
void not ( int * in , int * out ) {
printf ( " %* d % s % n " , 255 , in , out );
printf ( " % s % n " , out , out );
}
void test ( int in , int const , int * out ) {
printf ( " %* d %* d % n " , in , 0 , 256 - const , 0 , out );
printf ( " % s % n " , out , out );
printf ( " %* d % s % n " , 255 , out , out );
printf ( " % s % n " , out , out );
}
char * pad = m e m a l i g n (257 , 256);
memset ( pad , 1 , 256);
pad [256] = 0;
void s i n g l e _ n o t ( int * in , int * out ) {
printf ( " %* d % s % n % hhn % s % s % n " , 255 , in , out ,
a d d r _ o f _ a r g u m e n t , pad , out , out );
}
Figure 7: Gadgets for logic gates using printf.
printf(). However, this requires more of the program
CFG, so we instead developed a technique to achieve
the same goal without resorting to memcpy(). When
printf() is invoked, the characters are not sent di-
rectly to the stdout stream. Instead, printf() will use
the FILE struct corresponding to the stdout stream to
buffer the data temporarily. Since the struct is stored
in a writable memory location, the attacker can invoke
printf() with the “%n” format speciﬁer to point the
buffer onto the stack. Then, by reading values out of
memory with “%s” the attacker can move these values
onto the stack. Finally, the buffer can be moved back to
its original location.
It is possible to condense multiple calls to printf()
to only one. Simply concatenating the format strings is
not enough, because the length of the strings is important
with the “%n” modiﬁer. That is, after executing a NOT
gate, the string length will either be 255 or 256. We can-
not simply insert another NOT gate, as that would make
the length be one of 510, 511, or 512. We ﬁx this by in-
serting a length-repairing sequence of “%hhn%s”, which
pads the length of the string to zero modulo 256. We use
it to create a NOT gate in a single call to printf() in
Figure 7. Using this technique, we can condense an ar-
bitrary number of gates into a single call to printf().
This allows bounded Turing-complete computation.
To achieve full Turing-complete computation, we need
a way to loop a format string. This is possible by over-
writing the pointer inside printf() that tracks which
character in the format string is currently being executed.
The attacker is unlucky in that at the time the “%n” for-
mat speciﬁer is used, this value is saved in a register on
our 64-bit system. However, we identify one point in
time in which the attacker can always mount the attack.
The printf() function makes calls to puts() for the
static components of the string. When this function call
is made, all registers are saved to the stack. It turns out
that an attacker can overwrite this pointer from within the
puts() function. By doing this, the format string can be
looped.
An attacker can cause puts() to overwrite the desired
pointer. Prior to printf() calling puts(), the attacker
uses “%n” format speciﬁers to overwrite the stdout FILE
object so that the temporary buffer is placed directly on
top of the stack where the index pointer will be saved.
Then, we print the eight bytes corresponding to the new
value we want the pointer to have. Finally, we use more
“%n” format speciﬁers to move the buffer back to some
other location so that more unintended data will not be
overwritten.
C Fputs-oriented programming
These printf-style attacks are not unique to printf():
many other functions can be exploited in a similar man-
ner. We give one further attack using fputs(). For
brevity, we show how an attacker can achieve a condi-
tional write, however other computation is possible.
The FILE struct contains three char* ﬁelds to tem-
porarily buffer character data before it is written out:
a base pointer, a current pointer, and an end pointer.
fputs() works by storing bytes sequentially starting
from the base pointer keeping track with the current
pointer. When it exceeds the end pointer, the data is
written out, and the current pointer is set back to the
base. Programmatically, the way this works is that if the
current pointer is larger than the end pointer, fputs()
ﬂushes the buffer and then sets the current pointer to the
base pointer and continues writing.
This can be used to conditionally copy from source
address S to target address T if the byte address C is non-
zero. Using fputs(), the attacker copies the byte at C
on top of each of the 8 bytes in the end pointer. Then,
the attacker sets the current pointer to T and then calls
fputs() with this FILE and argument S. If the byte at C
is zero, the end pointer is the NULL pointer, and no data
is written. Otherwise, the data is written.
This attack requires two calls to fputs(). We initial-
ize memory with the constant pointers that are desired.
The ﬁrst call to fputs() moves the C byte over the end
pointer. The second call is the conditional move. The
two calls can be obtained by loop injection, or by identi-
fying an actual loop in the CFG.
176  24th USENIX Security Symposium 
USENIX Association
16