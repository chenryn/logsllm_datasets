a container with size smaller than the size of the resource,
rendering the resource will make the increment track pieces
of the container scrollbars appear. Without loss of generality,
we can place the logo image of target website in a div
component and take it as the attack object. We denote the
time of the increment track piece beginning to appear as Tch
when loading the image from the cache (cache hit) and Tcm
when loading it from a website (cache miss) respectively.
Apparently, Tch is always earlier than Tcm (i.e., Tch
Figure 8. The measurement-based attack PoC page for detecting whether
the victim has visited the NSF.
Figure 9.
The jump-page for the attacking website shown in Fig. 8.
The page will automatically redirect to the attack page (attack.html) in 3
seconds. A request for a nonexistent image (nonexistent.png) will be issued
when browsing the page.
construct a maliciously jump-page as shown in Fig. 9.
B. Comparison-based Attack
In the real world, the attacker often does not know the
time distributions of the rendering process in the victim’s
browser. To this end, we develop a novel comparison-based
attack approach, which is not dependent on precise time
measurement. The basic idea of comparison-based attacks is
the introduction of related resources as the timing baselines
and comparing their rendering processes with that of the
attack object.
There are two interesting features of browsers that we
can leverage to effectively perform a comparison-based
attack. First, for most browsers, the cached resources will
be rendered prior to non-cached ones even when they are
arranged behind non-cached resources in a web page. For
example, if a page contains two images, one is cached and
another is non-cached, the cached one is placed behind the
non-cached. When loading the page, the browser will ﬁrstly
try to load the cached image form the local cache. In other
words, a non-cached object can be utilized as a comparison
baseline when placed in front of the attack object. Second,
there is a limit for concurrent requests to the same domain
in all popular browsers. If the number of concurrent requests
reaches that limit, the subsequent requests will be blocked
until one of the previous requests concludes. For example,
the max concurrent connections to the same domain are
six for Chrome and Safari. We can leverage the feature to
deliberately delay the rendering process of the attack object
when it is non-cached.
Surprisingly, we can choose the attack object itself as
its own baseline image. We found that if the URL of the
legitimate request to an image is equipped with a parameter
sufﬁx, such as “?id=0001”, many web servers will ignore
the sufﬁx and still return the image for the fake request.
Furthermore, the image will always be re-downloaded from
the remote server for every distinct sufﬁx. Thus, we can
introduce such fake object references as baselines. We per-
formed an investigation to determine which mainstream web
servers possess such characteristic. The result shows that
almost all popular web servers, such as Apache, Microsoft-
IIS, and Nginx, will ignore the malformed sufﬁx and return
the original image.
in the cache,
In order to effectively identify the fact that the attack
the number of fake
object does not exist
object references should be no less than the max concur-
rent connections in the targeted browser. These fake object
references will be placed in front of the attack object in
the attack page. When the browser renders the page and the
attack object does not exist in the cache, the browser will
send the resources downloading requests one by one from
the top to the bottom of the page. The request for the attack
object will be blocked by the requests for fake objects. As a
result, the rendering of the attack object will begin later than
the fake objects. On the contrary, when the attack object is
cached, the rendering process of it will begin earlier than
that of the fake objects in most browsers.
Eventually, the attacker needs to know whether the attack
object is rendered earlier than the fake objects. We designed
two attack vectors to deliver information by using CSS
scrollbar customization and media queries respectively:
1) Using CSS Scrollbar Customization for Comparison-
based Attacks
Using techniques similar to those described in Section
III-A, the rendering of the attack object and fake objects will
trigger different requests to the attack server. The attacker
can examine the receipt order of these requests on the server
to sniff the victim’s browsing histories. For example, when
attacking Chrome users, the attack page for the NSF can
employ the description given in Fig. 10.
...
...
six baseline images(cid:3)
Figure 10. The PoC page of the comparison-based attack that uses CSS
scrollbar customization.
For mobile browsers, the max concurrent connections is
often two,
thus we can introduce only two fake image
references. The sufﬁx of their URLs can be generated ran-
domly, ensuring that they will always be downloaded from
a remote server. The height of a container is set to 70 pixels
for both the logo image and fake images. When rendering
these images, the browser will send the two kinds of report
requests (BASELINE and TARGET) to the attack server. If
the logo image did exist in the cache, the browser will load
it directly and send the TARGET request immediately. But
for the six fake images, the browser needs to spend more
time on downloading. In this case, the order of requests to
the attack server is . On the other
hand, if the logo image is non-cached, the browser needs
to send a request for downloading it. However, the request
will blocked by the requests for the six fake images. As a
result, the fake images will be rendering prior to the logo
image, and the order of requests to the attack server will be
.
Six fake image references are functioning as baselines
and placed in front of the logo image in the given page.
Additionally, because the rendering of a PNG or JPG
image will immediately start after only a small part of it
117117117
is downloaded, the baseline image may be render earlier
than the cached target image when the victim uses a high-
speed network. To avoid false positives, we can introduce
additional fake objects, guaranteeing that all baseline images
are rendered later than the cached target
image. In the
following attack page, we include additional six fake objects
on the top of the page body.
Nevertheless, another problem remains: because the re-
quests BASELINE and TARGET may choose different rout-
ing paths, the order of receiving them in the attack server
may be different to the original order of their sending. We
can leverage the limit of concurrent requests to address
the problem. The attacker can use some additional resource
references to control the capabilities of the channel between
the victim’s browser and the attacker server.
Figure 11. The large images used to occupy connections.
For attacking Chrome users, ﬁve references to large JPG
images can be placed on the top of the attack page to occupy
ﬁve connections, as shown in Fig. 11. As a result, there is
only one network channel available for sending BASELINE
or TARGET requests while downloading the ﬁve large im-
ages. If the download time is long enough, a BASELINE
or TARGET request will be suspended and forced to wait
until another request is completed. This guarantees that a
BASELINE or TARGET request sent early must also be
received early. In practice, the resource download speed can
also be customized in many web servers. For example, in
Apache, which is the server we used in our experiments,
one can limit the images’ download speed by loading the
mod bw.dll and modifying the conﬁguration ﬁle as:
LoadModule bw_module modules/mod_bw.dll
LargeFileLimit.jpg 1000 2048
This means, for all the JPG ﬁles on this server, that if
its size is larger than 1000KB, the download speed will
be limited to less than 2KB/s. By lowering the download
speed, the connections for downloading those large images
can continue long enough to ensure that all report requests
will be received in the order of sending.
The above attack’s PoC is very well suited for Webkit-
based browsers, with the exception of Safari. Inexplicably
in Safari rendering a cached image may be blocked by the
concurrent network requests to the same domain. This may
result in false negatives. A simple but effective solution is
cutting down the number of baseline images to ﬁve (one less
than the max concurrent connections of Safari). By doing
so we ensure that rendering of the target image will not be
blocked when it is cached. On the other hand, when the
image is non-cached, the rendering process of it is hardly
possible to happen prior to that of the all ﬁve baseline
images. The experiment has demonstrated that the modiﬁed
PoC can also be effectively applied to Safari.
2) Using CSS Media Queries for Comparison-based At-
tacks
To widen our scope to include more major browsers, we
can leverage CSS media queries to launch a comparison-
based attack. Using media queries to request a remote
resource is supported by almost all popular browsers.
Speciﬁcally, we employ the HTML table to combine the
attack object with a media query. The target image and
an IFrame container are placed in two cells of the same
column in a table. When the image is rendered, the whole
column will be widened to suit the image. This can make
the width of the IFrame change to the same of that of the
image simultaneously. By embedding a media query page
in the IFrame, the rendering of the target image can be
observed via querying the width of the page screen, and
the attacker can be informed via requesting a remote image
as the background of the page body. Having introduced
baseline images and a query page in another table,
the
attacker can launch a comparison-based attack. For example,
when attacking IE users, the attack page for NSF website
can be outlined as Fig. 12 demonstrates. Similarly to the
PoC shown in Fig. 10, we introduce some additional fake
objects on the top of the page body to avoid false positives.