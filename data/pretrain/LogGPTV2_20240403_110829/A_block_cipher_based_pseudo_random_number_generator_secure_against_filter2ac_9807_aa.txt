title:A block cipher based pseudo random number generator secure against
side-channel key recovery
author:Christophe Petit and
François-Xavier Standaert and
Olivier Pereira and
Tal Malkin and
Moti Yung
A Block Cipher based Pseudo Random Number Generator
Secure Against Side-Channel Key Recovery
Christophe Petit 1,∗, François-Xavier Standaert 1,†,
Olivier Pereira 1,(cid:166), Tal G. Malkin 2, Moti Yung 2,3.
1 UCL Crypto Group, Université catholique de Louvain.
2 Dept. of Computer Science, Columbia University., 3 Google Inc.
e-mails: christophe.petit,fstandae,PI:EMAIL; tal,PI:EMAIL
ABSTRACT
We study the security of a block cipher-based pseudorandom
number generator (PRNG), both in the black box world and
in the physical world, separately. We ﬁrst show that the
construction is a secure PRNG in the ideal cipher model.
Then, we demonstrate its security against a Bayesian side-
channel key recovery adversary. As a main result, we show
that our construction guarantees that the success rate of the
adversary does not increase with the number of physical ob-
servations, but in a limited and controlled way. Besides, we
observe that, under common assumptions on side-channel
attack strategies, increasing the security parameter (typi-
cally the block cipher key size) by a polynomial factor in-
volves an increase of a side-channel attack complexity by
an exponential factor, making the probability of a success-
ful attack negligible. We believe this work provides a ﬁrst
interesting example of the way the algorithmic design of a
cryptographic scheme inﬂuences its side-channel resistance.
1.
INTRODUCTION
Side-channel attacks are a powerful cryptanalytic technique
that exploits data-dependent physical leakages (e.g. power
consumption or electromagnetic radiation) in order to re-
cover secret data from actual implementations. Following
their demonstration in the late 1990s, a number of coun-
termeasures have been proposed to increase the security of
cryptographic devices. For example, several proposals at-
tempt to reduce the amount of information provided by any
single query to a target device, including noise addition [13],
masking [8] or hiding [18]. In this paper, we adopt a diﬀer-
ent approach in which we do not try to aﬀect single query
leakages. Assuming that actual side-channel attacks require
∗Research Fellow of the Belgian Fund for Scientiﬁc Re-
search (F.R.S.-FNRS). †Postdoctoral researcher of the Bel-
gian Fund for Scientiﬁc Research. (cid:166)Research associate of the
Belgian Fund for Scientiﬁc Research.
ASIACCS ’08, March 18-20, Tokyo, Japan,
Copyright 2008 ACM 1-59593-979-1/08/0003 ...$5.00.
56
to combine several queries to reach high success rates, we
rather try to make the eﬃcient combination of the leakages
diﬃcult. Therefore, the approach we propose here can (and
sometimes has to) be eﬃciently combined with other coun-
termeasures. In contrast with most ad hoc solutions to pre-
vent side-channel attacks, we include our security analysis
within a theoretical framework introduced in [16] and pro-
vide generic evaluations for the success rate of a side-channel
key-recovery adversary. But since the actual security of an
implementation can only be shown for practical instances of
leakage functions, we also demonstrate exemplary contexts
in which our construction provides security, from the fre-
quently considered Hamming weight leakage function to the
powerful identity leakage function.
As a case-study, we investigate the design of a pseudoran-
dom generator (PRNG) based on block ciphers. We believe
this example is interesting on its own, as PRNGs are stan-
dard components in many common applications, including
authentication in low-power devices, or re-keying for block
ciphers. The construction of a side-channel resistant PRNG
was also considered in the “physically observable cryptog-
raphy” model of Micali and Reyzin [14]. Our study diﬀers
from that one by several important aspects. The most im-
portant one being that our analysis is based on what Micali
and Reyzin call a “specialized model”: our model of side-
channel leakages and adversarial power is inﬂuenced by the
experience gained in the practice of side-channel attacks. As
a result of this specialization, we expect our construction to
be more eﬃcient. We use two chained block ciphers, and our
PRNG outputs a number of bits equal to the block size after
each round (rather than one bit per round, based on any one-
way permutation as in the Blum-Micali construction used
by Micali and Reyzin). Our PRNG construction is inspired
by well-known re-keying techniques [1] and protocol-based
strategies to withstand side-channel attacks [12]. But con-
trary to the simple arguments given in [11], we use our case-
study to illustrate the strong dependency between a leakage
function, the structure of a target algorithm and the combi-
nation of the side-channel observations. In addition we turn
our theoretical analysis into quantitative metrics in order to
evaluate the security of any implementation of our PRNG.
For these purposes, and as a ﬁrst step towards the prov-
able security against side-channel attacks, we clearly sepa-
rate black box and physical security issues. In a ﬁrst part
of the paper, we consider our PRNG construction in the
classical cryptographic setting and demonstrate that under
the assumption that its component ciphers are ideal, it is a
secure PRNG. Then, we investigate a generic implementa-
tion of our primitive. We demonstrate that for exemplary
but meaningful leakage functions, increasing the number of
round observations of the target device does not increase
the success rate of a side-channel key recovery adversary
but in a limited and controlled way. An interesting conse-
quence of this observation is that, under certain reasonable
assumptions about the computational limits and strategy of
the side-channel adversary, increasing the ciphers key size by
a polynomial factor involves an increase of the side-channel
attack complexity by an exponential factor. In addition, our
evaluations relate to the amount of randomness (i.e. noise)
in the side-channel observations that can consequently be
used as an alternative security parameter, since the noise is
a typical countermeasure to aﬀect single PRNG round leak-
ages. As a matter of fact, the combination of these results
does not imply that our construction is a secure PRNG in
the physical world but that (independently): (i) it is a se-
cure PRNG in the black box world, and (ii) side-channel key
recovery against its implementation is hard. We leave the
combination of black box and physical security notions in a
uniﬁed way as an important scope for further research.
Roadmap: This paper is organized as follows. In Section 2,
we give an overview of our PRNG construction. In Section
3, we state standard security deﬁnitions, and use them to
show the security of our PRNG in a black box world. In Sec-
tions 4 and 5, we turn to the physical world and investigate
the resistance of our PRNG to recovery of its seed, by con-
sidering side-channel attacks. Section 6 considers diﬀerent
leakage functions and shows the security of our construction
in these speciﬁc contexts. Section 7 gives further insights on
the practical security impact of our construction strategy.
Eventually, Sections 8 and 9 relax certain assumptions used
in our analysis and conclusions are in Section 10.
2. DESCRIPTION OF THE PRNG
The PRNG construction is illustrated in Figure 1. It is a se-
rial combination of two instances of a block cipher, denoted
by E1 and E2 in Fig. 1, placed into the Cipher Block Chain-
ing encryption mode. The input of the ﬁrst block cipher is
initialized to a public IV , and each block cipher is initial-
ized with its own master key, denoted k and k∗ respectively,
these keys playing the role of seed for the PRNG.
Figure 1: Block cipher based PRNG.
The execution of one round of our block cipher is as fol-
lows: given the input xi of the ﬁrst block cipher, and the
current value of the keys ki and k∗
i used by the two block
ciphers, an intermediate value mi is computed as Eki (xi).
57
i
i+1 = k∗
Then the output of the PRNG is computed as yi = Ek∗
(mi),
the keys to be used by the block ciphers in the next round
as ki+1 = ki ⊕ mi and k∗
i ⊕ mi, and the new input
for the ﬁrst block cipher as xi+1 = IV ⊕ yi. In the following,
we refer to k, k∗ as the master keys and to ki, k∗
i as the run-
ning keys. The construction is generic in the sense that its
input/output/key bit sizes are not speciﬁed (but identical):
they depend on the actual block cipher chosen to instanti-
ate the PRNG. The design of this scheme is based upon the
following two principles:
1. If the block ciphers E1 and E2 are “good” in the black
box world, then so should the PRNG be.
2. Each running key ki, k∗
i
is used to encrypt only one
message. For this purposes, we assume a ﬁxed pub-
lic IV (i.e. it cannot be selected by the PRNG user).
A way to relax this assumption and to initialize the
PRNG with a public seed is discussed in Section 8.
The goal of the second principle is to make it computation-
ally diﬃcult to combine the leaked information from diﬀer-
ent encryption steps. In order to respect that principle, the
running keys are updated after each PRNG round.
3. BLACK-BOX SECURITY OF OUR PRNG
This section studies the security of our PRNG in an ideal
world, where the only interface between the adversary and
the PRNG occurs through the PRNG output. We show
that, in the ideal cipher model proposed by Shannon [15],
an adversary has a negligible probability to distinguish the
output of our PRNG from a random sequence of bits. We
ﬁrst describe the ideal cipher model and deﬁne the security
properties we expect from pseudorandom generators, then
discuss the security of our construction.
3.1 Security Notions
Block cipher security. The ideal cipher model has been
used in many works, including [4].
It assumes that block
ciphers are random families of permutations. That is, they
consist of random permutations chosen independently for
each possible key. More precisely, suppose K and M are
sets. An ideal block cipher is a map E : K × M where, for
each key k ∈ K, the function Ek(·) = E(k,·) is a random per-
mutation on the message set M (independent of any other
permutation). If E is an ideal block cipher, then E−1 is its
inverse and E−1
k (y) is the string x such that Ek(x) = y. In
the rest of this paper, we assume K = M: the messages and
keys used by our block ciphers belong to the same set.
Pseudorandom generator security. A pseudorandom
generator is a deterministic algorithm G that maps elements
of a domain K on elements of a larger domain ˆK with the
property that it is hard to distinguish the uniform distribu-
tion on ˆK from the distribution on ˆK deﬁned as the image
through G of the uniform distribution on K. This hardness
is measured through the notion of prng-advantage of adver-
saries, that we deﬁne as follows, after [19].
Deﬁnition 1. Let G : K → ˆK be a pseudorandom gen-
erator, and let A be an algorithm that takes an element of
ˆK as input and returns a bit. Consider:
Succprng−1
G,A
= Pr[A(ˆk) = 1 : ˆk R←− ˆK],
Succprng−0
G,A
= Pr[A(ˆk) = 1 : ˆk ← G(k); k R←− K],
where x R←− X denotes the selection of an element x of
the set X according to the uniform distribution. The prng-
advantage of A against G is deﬁned as:
Advprng
G,A = |Succprng−1
G,A
− Succprng−0
G,A
|.
We say that the pseudorandom generator G is secure if the
prng-advantage of any polynomial time adversary is small
in the by now traditional complexity theoretic sense.
3.2 Security of our PRNG
We now justify the security of the PRNG of Section 2 by
relating its security to the security of its underlying ciphers.
Claim 1. Under the assumption that its component block
ciphers are ideal ciphers, the PRNG of section 2 is secure.
Security of a single round. We ﬁrst consider the se-
curity of any single round of our PRNG. For this purpose,
we consider the family of PRNGs G = {GX}X∈K, where
each GX : K × K → K × K × K is deﬁned as follows:
GX (K, K
) = (EK (X) ⊕ K, EK (X) ⊕ K
, EK∗ (EK (X))).
∗
∗
Here, the index X represents the value used as input for the
ﬁrst block cipher, the ﬁrst two parts of the output represent
the keys that will be used in the next round, and the last
part of the output represents the visible output of the round.
Fix now any adversary A against GX ∈ G, and consider the
probability of success:
Succprng−0
GX ,A = Pr[A(ˆk) = 1 : ˆk← GX (k, k
) R←− K×K]
); (k, k
∗
∗
1 , y) = 1 : k R←− K; k
∗
1 ← m ⊕ k
∗
∗
GX ,A = Pr[A(k1, k
m ← Ek(X); k1 ← m ⊕ k; k
Unwinding the deﬁnition of GX , It can be rewritten as:
Succprng−0
∗ R←− K;
; y ← Ek∗ (m)].
We ﬁrst observe that, in the ideal cipher model, the random
selection of a key k followed by the use of the permutation Ek
is equivalent to the use of a randomly selected permutation
P. Therefore, we have that:
Succprng−0
GX ,A = Pr[A(k1, k
P R←− P erm(K); P
k1 ← m ⊕ k; k
1 , y) = 1 : k R←− K; k
∗ R←− K;
∗
∗ R←− P erm(K); m ← P(X);
1 ← m ⊕ k
∗
∗
; y ← P
∗
(m)]
Now, we observe that since m and y are computed by ap-
plying random permutations on elements of K, they cannot
be distinguished from random elements of K:
Succprng−0
GX ,A = Pr[A(k1, k
m R←− K; k1 ← m ⊕ k; k
1 , y) = 1 : k R←− K; k
∗
∗ R←− K;
1 ← m ⊕ k
∗
∗
; y ← K]
Eventually, we observe that k1 and k∗
1 are computed as the
XOR of independent uniformly chosen values. As a result,
these variables cannot be distinguished from independent
and uniformly distributed values by the adversary: