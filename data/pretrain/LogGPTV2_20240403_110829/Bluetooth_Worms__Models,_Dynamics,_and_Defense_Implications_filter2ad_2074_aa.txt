title:Bluetooth Worms: Models, Dynamics, and Defense Implications
author:Guanhua Yan and
Stephan J. Eidenbenz
Bluetooth Worms: Models, Dynamics, and Defense Implications
∗
Guanhua Yan and Stephan Eidenbenz
Discrete Simulation Sciences (CCS-5)
Los Alamos National Laboratory
{ghyan, eidenben}@lanl.gov
Abstract
Recent occurrences of mobile worms like Cabir, Mabir
and CommWarrior have created growing concerns over
the security of data stored on mobile devices such as cell
phones and PDAs. These worms have in common that they
all use Bluetooth communication as their infection channel.
In order to prepare effective defense strategies against such
worms, we study the nature, characteristics, and spread-
ing dynamics of Bluetooth worms in the safe environment
of simulation. Our key ﬁndings are: (i) Mobility may not
boost the Bluetooth worm propagation; instead, link insta-
bility owing to it has negative impact on the worm spreading
speed; (ii) The inherent capacity constraints imposed by the
wireless channel (e.g. interference) and the speciﬁcs of the
Bluetooth protocol can signiﬁcantly slow down the Blue-
tooth worm propagation; (iii) Intelligently designed worms
can improve their propagation speed to a noticeable de-
gree by strategically selecting worm model parameters or
exploiting out-of-band propagation capabilities.
1
Introduction
Bluetooth, originally designed as a cable replacement so-
lution, is a short-range radio technology that connects wire-
less devices.
It differentiates itself from other competing
radio technologies such as IEEE 802.11 by operating at low
power consumption and at low cost. Bluetooth has a wide
range of applications, including wireless headsets, peer-to-
peer ﬁle exchanges, and data synchronization. The market
for Bluetooth devices has been growing tremendously in re-
cent years: world-wide, 272 million Bluetooth devices have
been shipped in 2005, twice as many as in 2004 [18].
The wide-spread deployment of Bluetooth devices has
made the technology attractive for worm propagation. The
ﬁrst cell phone worm called Cabir [9], which hit mo-
bile cell phones in 2004, used Bluetooth channels on cell
phones running the Symbian Operating System to spread
onto other phones. The Cabir descendant Mabir [6] and
∗
Los Alamos National Laboratory Publication No. LA-UR-06-1476
the CommWarrior worm [13] are both capable of propa-
gating themselves through the Bluetooth interfaces of cell
phones. While these worms created considerable nuisance
by draining the batteries of infected devices due to inten-
sive scanning operations and probably also by congesting
the wireless channel, they have not caused any serious se-
curity breaches as none of them actually carried a malicious
payload. However, security concerns over Bluetooth worms
that spread on cell phone networks are hard to exaggerate:
once a worm has compromised a cell phone, it can easily
place bogus calls, propagate spam emails, and steal conﬁ-
dential or private information that is stored on the cell phone
[10][14]. More advanced worms might gain control over a
large number of cell phones in which they implant zombies.
These resulting wireless botnets could be used to launch
Distributed Denial of Service (DDoS) attacks against base
stations, cellular switches, speciﬁc IP addresses or phone
numbers such as emergency numbers [10][7].
The potential security impact of Bluetooth worms on cell
phone networks calls for an in-depth understanding of their
nature, characteristics, and dynamic behavior. We are par-
ticularly interested in the propagation speed of Bluetooth
worms. Examples of extremely fast Internet worms like
Slammer [16] tell us that manual human intervention is
hardly effective in stopping such worms. We now face a
similar question: how fast can a worm propagate in a Blue-
tooth network? To answer it, we conduct a simulation study
of Bluetooth worms. Mathematical analysis of MAC/PHY
layer interactions between Bluetooth devices in a network
at the scale in our study is difﬁcult, if not impossible. On
the other hand, it is costly to deploy a real Bluetooth testbed
and it is also difﬁcult to control the speed of real Bluetooth
devices in the way as what we want. Hence, simulation, due
to its repeatability and controllability in a laboratory setup,
stands out as the only practical tool to conduct this study.
In this paper, we propose a baseline worm model that
mirrors the designs of existing Bluetooth worms such as
Cabir and CommWarrior. We use simulations to understand
the propagation property of this baseline worm in a vari-
ety of scenarios. We observe that the spreading speed of
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006the Bluetooth worm depends on factors such as device den-
sity, device mobility, and existence of insusceptible devices.
We also observe that the Bluetooth worm propagation time
grows almost linearly with the network size.
An important ﬁnding from our simulation results is that
mobility does not necessarily boost the Bluetooth worm
propagation. This disagrees with the observation made in
some earlier work. Further examination on the dynamics of
the Bluetooth worm reveals that link instability due to de-
vice mobility forces the Bluetooth worm to rely on timers to
detect connection failures, thus slowing down its spreading
speed. Another observation is that as a Bluetooth network
of high device density becomes populated with infected de-
vices, heavy co-channel interference may result and in re-
turn slows down the worm propagation process itself. Af-
ter a model ﬁtting exercise, we conclude that the logistic
model, which has successfully been used to characterize the
Internet worm propagation, fails to fully capture the dynam-
ics of Bluetooth worm propagation. We thus provide some
guidelines on what properties of Bluetooth worms should
be considered when building an analytical model.
We further explore whether an advanced Bluetooth
worm can strategically select its model parameters to maxi-
mize its propagation speed. We ﬁnd that a Bluetooth worm
that aggressively carries out its infection activities may not
improve its propagation speed and on the contrary, if de-
vices in the network are relatively static, its propagation
speed can be negatively affected. As a reﬂection of recent
worms such as CommWarrior that exploit communication
capabilities besides Bluetooth, we examine how availability
of MMS (Multimedia Message Service) accelerates Blue-
tooth worm propagation. The simulation results reveal that
with only a couple of MMS contact “buddies” per device a
Bluetooth worm can speed up its propagation by 50%.
We structure this paper as follows. Section 2 provides
a brief overview of Bluetooth technology as background
knowledge. We present the design of a baseline worm
model in Section 3 and the experimental results with this
model in varied scenarios in Section 4. We analyze the
spreading dynamics of the Bluetooth worm in Section 5 and
provide some considerations from the modeling perspective
in Section 6. We explore the effect of model parameters
in Section 7 and investigate how long-range infection chan-
nels can boost Bluetooth worm propagation in Section 8.
Section 9 brieﬂy presents some implications on the defense
against Bluetooth worms. Section 10 discusses related work
and Section 11 summarizes this paper.
2 Bluetooth Primer
Bluetooth is a short-range radio technology that is aimed
at connecting different wireless devices at low power con-
sumption and at low cost. It operates in the 2.4GHz fre-
quency band and its channels are shared among devices
through a time-division duplexing (TDD) scheme. It also
uses frequency hopping scheme to reduce interference.
When a Bluetooth device wants to ﬁnd other devices in
its vicinity, it broadcasts inquiry packets by hopping 3,200
times per second along a 32-channel inquiry hopping se-
quence. A nearby device in the discoverable mode listens
on the same frequency sequence but moves forward its lis-
tening carrier every 1.28 seconds. When a device hears an
inquiry packet, it backs off for a random period of time and
then reenters the scanning state. When it receives another
inquiry packet, it responds with a Frequency Hop Synchro-
nization (FHS) packet. On the arrival of this packet, the in-
quirer device knows that the responder is in its radio range.
Once a device has discovered its neighboring devices,
it may want to establish a connection with one or more of
them. In order to set up a Bluetooth link with a neighbor
device, it goes through the paging process. This process is
similar to the inquiry process, except that the paging de-
vice explicitly speciﬁes the receiver’s address to indicate
with which device it wants to set up a connection. After
a connection is established, the pager device and the paged
device are called the master and slave of the new link re-
spectively. In the connected state, the master and the slave
can exchange normal data packets by hopping 1,600 times
per second along a 79-channel frequency sequence decided
by the master’s local clock and its device address.
A Bluetooth link has a maximum capacity of 1Mbps.
The Bluetooth speciﬁcation deﬁnes two types of links: syn-
chronous connection-oriented (SCO) links for voice com-
munication and asynchronous connectionless (ACL) links
for data communication. ACL links use the Automatic Re-
peat Request (ARQ) scheme to recover lost packets. ACL
links support 6 types of packets, among which DH5 pack-
ets have the highest data rates. The payload of each DH5
packet has 339 bytes.
3 A Bluetooth Worm Model
We present the design and implementation of our Blue-
tooth worm in a Bluetooth protocol simulator. In our Blue-
tooth worm model, an infected device only attempts to in-
fect devices within its range. It does not need the network-
ing layer to route packets to devices multiple hops away.
Such design captures the behavior of existing Bluetooth
worms like Cabir and CommWarrior. This single-hop prop-
agation behavior is the key difference from Internet worms.
The infection cycle of a Bluetooth worm is illustrated
in Figure 1. When a Bluetooth worm is activated, it starts
looking for Bluetooth-enabled devices in its vicinity. When
it starts an inquiry, it speciﬁes both the inquiry timeout,
Tinq, and the expected number of responses, Ninq. If the
infected device sees the Ninq-th response before Tinq time
units after it starts the inquiry, the inquiry process ﬁnishes;
otherwise, if the infected device receives less than Ninq re-
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Idle
Idle timer expires
Inquiry for new devices
Bluetooth−enabled
device found?
No
Yes
Collect a list of neighbors
Extract a neighbor device
from the list, connect to it
No
Connection
succeeds?
Yes
Probe for infectability
Replicate worm code
Disconnect from victim
Probing timer expires
Replicating
timer expires
Disconnecting
timer expires
No
Yes
List empty?
Figure 1. Infection Cycle of A Bluetooth Worm
sponses when Tinq time units elapse after it initiated the
inquiry, the inquiry process also terminates. The default
value for Tinq in the Bluetooth speciﬁcation is 10.24 sec-
onds, which ensures that all devices can be discovered in a
loss-free environment if there is no limit on Ninq.
After
the Bluetooth worm has compiled a list of
Bluetooth-enabled devices in its radio range,
it iterates
through the list attempting the following with each neighbor
device: establish a connection, probe infection possibility,
replicate itself, and disconnect from the victim device.
Establishing a connection to a victim device involves the
paging process. It is, however, possible that paging fails.
One obvious reason is that the victim device has moved out
of radio range at time of paging request. Paging failures can
also result from interference. For example, if two devices
page each other simultaneously, they both will fail; if a de-
vice pages a node that is performing an inquiry, it will also
fail [19]. In order to detect paging failures, a Bluetooth de-
vice schedules a paging (or connection establishing) timer
that expires after Tconn time units. The default value of
Tconn in the Bluetooth speciﬁcation is 5.12 seconds.
If the infected device fails to establish a connection to
a victim device, it removes it from the list and attempts
to infect the next one; otherwise, it probes the victim de-
vice for the infection possibility. When the victim device
receives the probing packet, its response depends on its in-
ternal state: (1) if at state insusceptible, it sends back a RE-
JECTED response packet; (2) if at state susceptible but in-
fected, it sends back an INFECTED response packet; (3) if
at state susceptible and uninfected, it sends back an UNIN-
FECTED response packet.
On the arrival of a REJECTED or INFECTED response
packet, the probing device removes the victim device from
the list and attempts to infect the next one. If the probing
device ﬁnds that the victim device is vulnerable and has not
yet been infected, it starts to replicate the worm code onto
the victim device. Similar to the paging process, the prob-
ing device may not receive any response from the victim
device. Hence, it starts a timer as it sends out the probing
packet. The probing timer expires after Tprobe time units
if no response has been received. When the timer ﬁres, the
worm attempts to infect the next device on the list.
The probing process in our worm model closely mirrors
the behavior of most real Bluetooth worms. For instance,
a CommWarrior worm probes each victim device for the
availability of the ’Obex Push’ service; on a positive reply,
the worm replicates itself onto that device [8]. Moreover, if
a victim device is susceptible to the worm attack, our model
distinguishes two cases: it has not been infected, and it has
already been infected. This is possible because a worm, af-
ter gaining control over a victim device, can inform probing
devices of the fact that the probed device has already been
infected. This prevents the worm from replicating itself to
the same device unnecessarily for more than one time.
The time that a worm takes to upload itself onto another
device depends on its size Sworm and the packet type. We
assume all worm packets are DH5 packets. The size of a
Bluetooth worm seen so far ranges from thousands to tens
of thousands of bytes. For example, the Cabir.H worm (a
variant of Cabir worm) consists of only about 7,000 bytes;
the CommWarrior.a!sys worm (a variant of CommWarrior
worm) has 30,582 bytes [2].
Worm replication may fail because devices move out of
each other’s radio range. Thus, a replication timer is started
when an infected device starts uploading. If it expires after
Trep time units, the infected device gives up the attempt and
tries to infect the next one on its neighbor list. After a worm
successfully copies itself onto another device, it disconnects
from it. In case that the communication channel is lost dur-
ing this period, we also schedule a timer to ensure that the
channel between them is destroyed successfully. The dis-
connection timeout is Tdisc time units in our worm model.
After attempts to replicate itself onto all the devices
found in the vicinity, a worm keeps inactive for Tidle time
units before another infection cycle starts.
4 Baseline Worm Experiments
We implemented the Bluetooth worm model described
in Section 3 in the ns-2 network simulator [3] using the
Bluetooth module UCBT [4]. The UCBT module has a
full implementation of the Bluetooth protocol stack. How-
ever, it does not provide a detailed radio propagation model.
Hence, we have implemented the radio propagation model
used in [11] to calculate signal attenuation. In this model,
the path loss, which refers to signal attenuation on the prop-
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Notation
Value
Notation
Tinq
Tconn
Trep
Tdisc
10.24 (sec)
5.12 (sec)
10 (sec)
0.1 (sec)
Ninq
Tprobe
Sworm
Tidle
Value
7
0.1 (sec)
20,000 bytes
20 (sec)
Table 1. Notations and values in the baseline
worm model
agation path, is deﬁned as follows:
(cid:1)
Ploss =
20 × log10(4πd/0.1224) d ≤ 8m
58.3 + 33× log10(d/8)
d > 8m
(1)
This model assumes free space propagation for the ﬁrst 8
meters (i.e., it assumes that there always exists an unob-
structed line-of-sight path between the source and the desti-
nation); beyond this range, the signal attenuates at a rate that
is a function of d3.3, where d is the distance to the source.
Interference is a major limiting factor in the performance
of Bluetooth networks [11].
In our simulation study, we
take co-channel interference into consideration. Co-channel
interference occurs when devices on different channels use
the same frequency to transmit packets at the same time.
The Bluetooth speciﬁcation requires that in order for the
receiver to successfully decode a signal, the carrier to inter-
ference ratio (C/I) must be at least 11 dB. In this study, we
assume that a lower C/I ratio leads to packet loss.
We conﬁgure the parameters in our baseline Bluetooth
worm model as illustrated in Table 1. In all the experiments
in this paper, we simulate Bluetooth networks operating at
power class 2; thus, each Bluetooth device has a commu-
nication range of 10 meters. In the following sections, we
investigate how the worm propagation speed is affected by
varied scenario parameters, including device density, device
mobility, network size and fraction of insusceptible devices.
4.1 Eﬀects of Density and Speed
In this set of experiments, we simulate a network with
200 Bluetooth devices. We vary device densities by putting
these devices in square areas with side length 50, 75, 100,
125, and 150 meters. An important part of our simulation
study is how to model device mobility. Ideally, we would
like to use traces from real Bluetooth networks. Unfor-
tunately, the few publicly available mobility datasets are
not suitable as they do not provide position data of each
device at ﬁne-grained time scales. Under such circum-
stance, we apply the widely used random waypoint mobil-
ity model to generate device movement traces despite its
well-known ﬂaws.
In this model, a node stays at a loca-
tion for a uniformly distributed period between τmin and
τmax, then chooses another location randomly and moves
towards it at a uniformly distributed speed between vmin
and vmax. In all the simulation studies in this paper, we
have: τmin = 0(sec), τmax = 10(sec), vmin = 0(m/s).
In this set of experiments, we vary the mean speed (i.e.,
(vmin + vmax)/2) among 1, 2, 3, 4, and 5 m/s. For each
scenario we simulate 10 sample runs.
Figure 2 depicts the average propagation time needed for
50% and 95% infection coverage in 3-dimension graphs.
We observe that given the same mean device speed, both
times increase roughly linearly with the side length. The
simulation results agree with our intuition that Bluetooth
worms should propagate more slowly in a sparse network
than in a dense network. On the other hand, given the
same device density, both propagation times seem to grow
roughly linearly with the mean speed. The observed linear-
ity, however, may hold only in the parameter space exam-
ined. It is worth mentioning that our simulation results dis-
agree with the observation made in [15] that mobility boosts
viral propagation in mobile environments. The key reason
for this different conclusion is that our work considers de-
tailed MAC/PHY layer characteristics. We will present de-
tailed explanation later in Section 5.
4.2 Eﬀects of Insusceptible Devices
Real Bluetooth networks usually mix susceptible and in-
susceptible devices. For instance, Cabir worm only spreads
on smart cell phones running Symbian OS 6.1 or higher; it
can not infect those that run other operating systems. An
interesting question, then, is to understand how coexistence
of susceptible and insusceptible devices affects worm prop-
agation in Bluetooth networks. We consider a network with
the same number of Bluetooth devices. There are two con-
ﬂicting factors that may affect worm propagation. On one
hand, existence of insusceptible devices eliminates the ne-
cessity of replicating worm code onto these devices, but on
the other hand, it also lowers the probability that two sus-
ceptible devices are within each other’s radio range.
To understand which factor is important in Bluetooth
worm propagation, we perform another set of experiments
where susceptible and insusceptible devices are mixed to
varied degrees. The proportion of susceptible devices is
chosen among 0.25, 0.5, 0.75, and 1.0. We still use the
random waypoint mobility model to generate device move-
ment traces; we vary its mean speed between 1 and 3 meters
per second. We also vary device densities by simulating 200
devices in square areas with side 75 and 150 meters.
Figure 3 depicts how varied fractions of susceptible de-
vices impact the worm propagation time for 50% and 95%
coverage.
It is clear that in all scenarios both times de-
crease monotonically as the fraction of susceptible devices
increases. This reveals that the second factor plays a dom-
inant role in affecting worm propagation. We also ﬁnd
that when the device density is relatively low, increasing
the fraction of insusceptible devices leads to super-linear
growth of worm propagation time.
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Time for 50% coverage (s)
Time for 50% coverage (s)
 600
 500
 400
 300
 200
 100
 0
 1
 1.5
 2
 2.5
Speed (m/s)
 3
 3.5
 4 50
 150
 125
 100
Side (m)
 75
(1) 50% infection coverage
Time for 95% coverage (s)
Time for 95% coverage (s)
 900
 800
 700
 600
 500
 400
 300
 200
 100
 1
 1.5
 2
 2.5
Speed (m/s)
 3
 3.5
 4 50
 150
 125
 100
Side (m)
 75
 600
 500
 400
 300
 200
 100
 0
 900
 800
 700
 600
 500
 400
 300