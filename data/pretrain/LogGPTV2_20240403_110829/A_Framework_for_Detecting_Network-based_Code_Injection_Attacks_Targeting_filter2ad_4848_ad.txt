### Functions and Their Execution

The following functions are utilized during the execution of the process:
- `kernel32.WaitForSingleObject`
- `kernel32.CreateProcessA`
- `kernel32.ExitThread`
- `ws2_32.WSAStartup`
- `ws2_32.WSASocketA`
- `ws2_32.bind`
- `ws2_32.listen`
- `ws2_32.accept`
- `ws2_32.closesocket`

### Initialization and Socket Creation

- **WSAStartup**: This function initializes the WinSock API.
- **WSASocketA**: A socket is created using this function.

### Binding, Listening, and Accepting Connections

- **bind**: The socket is bound to port 9999.
- **listen**: The process listens for incoming connections.
- **accept**: The process accepts connections from an attacker at a later stage.

### DLL Hooking Method Using Detours

The DLL hooking method, implemented using Detours [7], logs resource usage by identifying calls to DLL functions. Table 4 lists some of the library calls executed during runtime. The trace begins with the `ws2_32.WSASocketA` call to create the socket and ends with the `ws2_32.accept` call, indicating that the process is waiting for incoming connections. This log provides sufficient information to identify the attack operations, including the creation of a socket and subsequent calls to `bind`, `listen`, and `accept`.

### Exploit Detection and Analysis

Table 5 contains a list of tested exploits, their vulnerabilities, and whether they were detected. For undetected attacks, the first executable instruction could not be accurately identified. In such cases, the first instruction of the exploit code was directly inserted into the analyzer to generate the function call log.

- **Exploit 1**: Adds an administrator user to the vulnerable host.
- **Exploits 2, 3, and 4**: Spawn listening shells on ports 5555, 9999, and 101, respectively.
- **Exploits 5 and 6**: Attempt to connect to an external host to download additional executable code.

### Shellcode Sandboxing Approach

The shellcode sandboxing approach has demonstrated excellent accuracy and completeness when correctly implemented. During testing in a Linux environment, all attacks were detected without any false positives [2]. False positives are rare due to the distinct appearance of shellcode compared to normal binary executables. Shellcode has a higher density of calls, and long jumps only occur for direct calls to DLL functions. The detector was also tested on 3GB of Windows binary file transmission using the NOP executable instruction detection approach, with no false positives recorded.

### Conclusion and Future Work

We have presented a framework for detecting code injection attacks in a heterogeneous environment. The framework can detect new or previously unseen attacks, regardless of obfuscation techniques. The approach involves an Intrusion Detection System (IDS) that identifies potentially executable instructions and sends the packet payload to a monitored execution environment. The appropriate execution environment is selected based on the IP address of the incoming packet.

For Windows code, we compared two tracing approaches and found that the DLL hooking approach outperforms the Native API monitoring approach. However, future work will focus on improving system call monitoring in the Windows environment to ensure that attacks using only the native API are not missed. The prototype implementation can detect Windows code injection attacks as long as the IDS can identify executable instructions. While the system's accuracy is high, its completeness depends on the IDS's ability to identify executable instructions. Future work includes developing more efficient algorithms to detect potentially executable instructions in network streams, thereby enhancing the system's completeness.

### References

[1] S. Andersson, A. Clark, and G. Mohay. Network-based buffer overflow detection by exploit code analysis. In G. Mohay, A. Clark, and K. Kerr, editors, Proceedings of AusCERT Asia Pacific Information Technology Security Conference (AusCERT2004): R&D Stream, Gold Coast, Australia, 2004. University of Queensland. ISBN: 1-86499-774-5.

[2] S. Andersson, A. Clark, and G. Mohay. Detecting network-based obfuscated code injection attacks using sandboxing. In A. Clark, K. Kerr, and G. Mohay, editors, AusCERT Asia Pacific Information Technology Security Conference (AusCERT2005): Refereed R&D Stream, Gold Coast, Australia, 2005. University of Queensland. ISBN: 1-86499-799-0.

[3] P. Bania. Windows syscall shellcode. http://www.securityfocus.com/infocus/1844, 2005. Accessed: 16/09-05.

[4] R. Battistoni, E. Gabrielli, and L. V. Mancini. A host intrusion prevention system for Windows operating systems. In ESORICS, volume 3193 of LNCS, pages 352–369. Springer-Verlag, 2004.

[5] J. Beale, J. C. Foster, J. Posluns, and B. Caswell. Snort 2.0 Intrusion Detection. Syngress Publishing, Rockland, 2003.

[6] H. Debar, M. Dacier, and A. Wespi. Towards a taxonomy of intrusion-detection systems. Computer Networks, 31, 1999.

[7] G. Hunt and D. Brubacher. Detours: Binary interception of Win32 functions. In Proceedings of the 3rd USENIX Windows NT Symposium, Seattle, WA, 1999.

[8] Y. Kaplan. API spying techniques for Windows 9x, NT, and 2000. http://www.internals.com/articles/apispy/apispy.htm, 2000. Accessed: 16/09-05.

[9] D. Mutz, C. Kruegel, W. Robertson, G. Vigna, and R. Kemmerer. Reverse engineering of network signatures. In A. Clark, K. Kerr, and G. Mohay, editors, AusCERT Asia Pacific Information Technology Security Conference (AusCERT2005): Refereed R&D Stream, Gold Coast, Australia, 2005. University of Queensland. ISBN: 1-86499-799-0.

[10] M. Russinovich. Inside the Native API. http://www.sysinternals.com/Information/NativeApi.html, 2004. Accessed: 16/09-05.

[11] S. B. Schreiber. Undocumented Windows 2000 Secrets. Addison Wesley, Upper Saddle River, 2001.

[12] T. Toth and C. Kruegel. Accurate buffer overflow detection via abstract payload execution. In Recent Advances in Intrusion Detection, volume 2516 of Lecture Notes in Computer Science, pages 274–291, Zurich, Switzerland, 2002. Springer.

---

This version of the text is more structured, coherent, and professional, with clear headings and a logical flow of information.