title:Gallium: Automated Software Middlebox Offloading to Programmable Switches
author:Kaiyuan Zhang and
Danyang Zhuo and
Arvind Krishnamurthy
Gallium: Automated Software Middlebox Offloading to
Programmable Switches
Kaiyuan Zhang
University of Washington
PI:EMAIL
Danyang Zhuo
Duke University
PI:EMAIL
Arvind Krishnamurthy
University of Washington
PI:EMAIL
Abstract
Researchers have shown that offloading software middleboxes (e.g.,
NAT, firewall, load balancer) to programmable switches can yield
orders-of-magnitude performance gains. However, it requires manu-
ally selecting the middle-box components to offload and rewriting the
offloaded code in P4, a domain-specific language for programmable
switches. We design and implement Gallium, a compiler that trans-
forms an input software middlebox into two parts—a P4 program that
runs on a programmable switch and an x86 non-offloaded program
that runs on a regular middlebox server. Gallium ensures that (1) the
combined effect of the P4 program and the non-offloaded program
is functionally equivalent to the input middlebox program, (2) the
P4 program respects the resource constraints in the programmable
switch, and (3) the run-to-completion semantics are met under con-
current execution. Our evaluations show that Gallium saves 21-79%
of processing cycles and reduces latency by about 31% across various
software middleboxes.
CCS Concepts
• Networks → Programmable networks; In-network process-
ing;
Keywords
Protocol offload, Middleboxes
ACM Reference Format:
Kaiyuan Zhang, Danyang Zhuo, and Arvind Krishnamurthy. 2020. Gallium:
Automated Software Middlebox Offloading to Programmable Switches. In
Annual conference of the ACM Special Interest Group on Data Communication
on the applications, technologies, architectures, and protocols for computer
communication (SIGCOMM ’20), August 10–14, 2020, Virtual Event, NY, USA.
ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/3387514.3405869
1 Introduction
Recent advancement in programmable switches has enabled a new
approach to achieve higher middlebox performance: offloading
packet processing functions into programmable switches. For ex-
ample, Silkroad [20] proposes to leverage programmable switches
to build high-performance load balancers that can handle substan-
tially more concurrent connections. New use cases, such as using
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-7955-7/20/08...$15.00
https://doi.org/10.1145/3387514.3405869
283
Slow
Fast
Pre-processing
Post-processing
Non-offloaded
Programmable Switch Middlebox Server
Figure 1: Packet flow in an offloaded middlebox.
programmable switches for in-network DDoS detection [2], are
also emerging.
To offload a software middlebox to a programmable switch, devel-
opers must consider several issues. For example, what functions to
offload, how to run offloaded functions on programmable switches,
how to execute the non-offloaded functions, and how to ensure
that the programmable switch doesn’t run out of resources? Un-
derstanding these issues requires developers to become experts on
programmable switches, slowing down development.
In this paper, we ask a simple question: given a software middle-
box written in a general-purpose programming language (C++), is it
possible to automatically produce a functionally equivalent middlebox
that leverages a programmable switch for higher performance? To
make our question concrete, we focus on a single type of offloading
scenario shown in Figure 1 that uses a programmable P4 switch
(e.g., a Tofino switch [3]) and a regular middlebox server.
The goal is to automatically partition the input middlebox pro-
gram into three parts, i.e., a pre-processing partition, a non-offloaded
partition, and a post-processing partition. The pre-processing and
post-processing partitions run on the programmable switch as a
single P4 program, and the non-offloaded partition executes on the
middlebox server. Packets coming to the middlebox go through
the pre-processing, non-offloaded, and post-processing partitions
sequentially. Because a programmable switch is efficient at packet
processing, this offloading scenario can improve middlebox perfor-
mance if enough instructions are offloaded to the switch. Further, if
the non-offloaded partition is not involved in processing a packet,
the packet can simply skip the middlebox server, reducing latency
and processing cycles in the server. We call this a fast path in the
middlebox.
We have designed and implemented Gallium, a compiler that
automatically partitions and compiles a software middlebox written
in C++ to a functionally equivalent middlebox that leverages a
programmable switch to achieve higher performance. Gallium has
to address three main challenges: (1) ensuring the output code
is functionally equivalent to the input middlebox, (2) enforcing
expressiveness constraints and resource limits on the pre- and
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Kaiyuan Zhang, Danyang Zhuo, and Arvind Krishnamurthy
post-processing partitions, and (3) providing the run-to-completion
concurrency model even though packet processing is split across a
software middlebox and a hardware switch.
Gallium partitions the input middlebox source code at a fine
granularity (e.g., P4 operations and CPU instructions). To ensure
functional equivalence, Gallium keeps track of each instruction’s
dependencies, i.e., what instructions need to run before a given
instruction. For an instruction, I, to behave in the same way for the
unpartitioned and partitioned versions, we need to make sure the
state accessed by I is the same across the two versions. Therefore,
we need to execute all the instructions that may affect I’s observ-
able state before we run I. Gallium provides a simple approach to
extract all the instruction-level dependencies by comparing each
instruction’s read and write sets (i.e., the collection of variables an
instruction accesses or modifies).
Because programmable switches only accept P4 programs—a dec-
laration of a pipeline of match-action tables with limited ALU func-
tions (e.g., addition, subtraction, comparison), Gallium statically
analyzes the input middlebox to figure out the set of instructions
to assign to the pre- and post-processing partitions. Gallium must
also consider the resource constraints inside the programmable
switch, e.g., the total amount of memory and the scratchpad state
used to process a packet. We design and implement a partitioning
algorithm that maximizes the number of offloaded operations while
meeting the constraints on the programmable switch.
Finally, Gallium needs to generate deployable output middle-
boxes and execute them with the desired run-to-completion seman-
tics. Gallium maps data structures and instructions in a general-
purpose programming language (C++) to their P4 counterparts.
Gallium synthesizes the packet formats to allow middlebox states
to flow between the switch and the server. Gallium further employs
state synchronization techniques typically found in primary-backup
systems to provide the desired run-to-completion concurrency se-
mantics.
We evaluate Gallium on five different middleboxes: MazuNAT, an
L4 load balancer, a firewall, a network proxy, and a trojan detector,
written using the Click [21] framework in C++ and totaling over 6K
lines of code. Our evaluations show that Gallium is able to automat-
ically offload middlebox functionality, save up to 79% processing
cycles, reduce latency by up to 31%, and improve throughput by up
to 46%.
2 Background
The advent of programmable switches has enabled network pro-
grammability at line-rate performance. We first describe the op-
erational model of programmable switches and then explain the
restrictions imposed on packet processing.
2.1 Programmable Switches
Programmable switches [7] are packet processing devices that allow
programmability at line rate. We assume an abstract switch model,
as described in [6], that provides the following functionality.
Match-action tables: The internal architecture of a programmable
switch is a chain of physical match-action tables. Each match-action
table can match on specific fields of the packet header and trigger a
set of actions, including packet header rewriting, dropping a packet,
or delivering a packet to the next table. The match operation can
check for exact matches, wildcards, and longest prefix matches.
As long as each packet goes through the chain only once, packet
processing is at line rate.
Registers or stateful memory: A limited amount of memory
can maintain state across packets, such as counters, meters, and
registers. This state can be both read and updated during packet
processing.
Computation primitives: The switch can perform a limited amount
of processing on header fields and registers (e.g., additions, bit-shifts,
and hashing).
Programmable switches support the P4 [6] programming model.
A P4 program specifies the header format, the pipeline sequence,
including what packet header fields each table matches on, what
actions each table takes, and how the tables are interlinked. The
contents of the tables are read-only for the data plane. To modify the
contents of a table, the switch’s CPU (x86) can issue commands to
the switching silicon. These commands issued through the control
plane can be significantly slower than packet processing.
2.2 Restrictions
Programmable switches support only a small set of ALU operations
on limited data types. Currently, they support integers only but
not floating-point numbers. The list of supported operations is lim-
ited to integer addition, subtraction, bitwise operations (i.e., AND,
OR, XOR, NOT, SHIFT), and comparison. Further, a programmable
switch also limits the number of sequential processing steps to the
number of match-action pipeline stages (generally around 10 to 20),
so the amount of computation that can be offloaded is bounded.
Within a pipeline stage, rules are processed in parallel.
A key restriction is the memory limit on the programmable
switch. The total amount of memory is a few tens of MBs on to-
day’s switches. Another memory constraint that requires atten-
tion is the scratchpad memory allowed for per-packet processing.
A programmable switch allows some metadata to be stored in a
scratchpad memory while processing a packet. This metadata is
allocated when a packet arrives and is garbage-collected when the
packet leaves the switch. The total amount of scratchpad memory
for storing packet-level metadata is less than a few hundred bytes
for processing a single packet.
Programmable switches also restrict the control flow. P4 pro-
grams cannot have loops, because the hardware realization is a
sequence of physical tables, and each packet goes through the se-
quence only once. Another implication is that if a packet does a
lookup on a particular table, the packet can no longer access the
same table in a later pipeline stage.
Programmable switches can read and write packet contents that
are only at the beginning of the packet (typically, the first 200 bytes
of a packet). This restriction means that developers must carefully
design the packet format if they want to transfer additional data
using packet headers.
3 Gallium Overview
Gallium is a compiler that transforms an input middlebox pro-
gram written in a general-purpose programming language (C++)
using Click APIs [21] into a functionally equivalent middlebox im-
plementation that has two parts: (1) a P4 program that runs on
284
Gallium: Automated Software Middlebox Offloading to Prog. Switches
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
either all or none of the state updates made by pi. Note that, if
the later packet pj observes none of the state updates, then the
resulting execution is considered to be equivalent to the setting
where pi was delayed in the network and received after pj.
The correctness criteria described above embody both a condi-
tion on handling causal dependencies (i.e., packets observe the state
updates of other packets that causally preceded them) and an atom-
icity requirement (i.e., packets either observe all or none of the state
updates of previous packets). It is worth noting that this is similar
to the correctness requirements imposed on multi-threaded middle-
box programs, wherein in-flight packets are processed atomically
by the middlebox in any order.
3.2 Compilation Process and Execution
We outline below how Gallium is designed to meet the desired goals.
We overview the partitioning and compilation process and then
describe how the runtime system ensures the correct execution of
the generated code. Figure 2 shows the workflow of Gallium.
Middlebox Source Code
Click API Annotations
Dependency Extraction
Dependency Graph
Hardware Constraints
Partitioning
Pre-processing
Non-offloaded
Post-processing
Code Generation
Device Code (P4)
Server Code (C++)
Figure 2: Workflow of Gallium. The shaded box is the input
program written by middlebox programmers. Other rectan-
gular boxes are annotation and configuration inputs given
to Gallium, intermediate representations, and final outputs.
a programmable switch, and (2) a C++ program that runs on a
traditional middlebox server.
3.1 Goals
Gallium has to realize three goals with the generated code.
• Functional equivalence: the combined effect of the two parts (i.e.,
the P4 program and the C++ code) should be functionally equiv-
alent to the input middlebox program.
• Conform to constraints: the generated P4 program should satisfy
the expressiveness and resource constraints of programmable
switches.
• Concurrency-safe execution: the output middlebox must provide
per-packet run-to-completion semantics even though the code
on the switch executes concurrently with the server program.
We now elaborate on the third goal. Runtime systems for mid-
dlebox dataplanes typically guarantee the run-to-completion se-
mantics for packets, wherein all protocol processing for a packet
is done before moving on to the next packet. In our setting, where
we are concurrently executing portions of the middlebox logic on
the switch and the server, we run the risk of a later packet observ-
ing none or only a subset of the state updates made by a previous
packet.
We, therefore, formalize the desired run-to-completion semantics.
If a packet pj is received by the middlebox1 after pi and if pj is
causally dependent on pi’s receipt (e.g., pi is a SYN packet and
pj is the corresponding SYN-ACK packet), then we require pj to
observe all of the state updates made by pi. If pj is not causally
dependent on pi’s receipt (i.e., there is no end-to-end constraint that
the middlebox has processed pi before pj), then pj should observe
1In the context of Gallium, a middlebox refers to the aggregated entity comprising of
a server and a switch.
285
To ensure functional-equivalence, we need to keep the instruction-
level dependencies equivalent between the source program and the
generated program. (See §4.1.) Let us consider a code statement
S in the source program, and let Gallium assign this statement to
one of two partitions (i.e., server code or switch program). We need
to ensure that S has the same effect in the generated middlebox
as in the input middlebox. This requirement means that, before S
runs, the program state that S can access should be the same in
the input and the generated program. To capture this notion, we
define a "depends on" relation that combines both data and control
dependencies that exist in the program. A statement S2 depends on
S1, if and only if the observable variables in S2 are affected by S1’s