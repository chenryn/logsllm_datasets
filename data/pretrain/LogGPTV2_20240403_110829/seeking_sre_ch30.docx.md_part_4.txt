如果我们接受前面的事实，轮值到被用于处理许多情况，但主要是为了避免未知的无解问题引发的软件故障，并且人类实际上并不擅长轮值，并且这还对他们的身心健康不利，那么我们还能做些什么呢？
从广义上讲，我们可以努力使现有的情况变得更好，也可以尝试做一些全新的事情。
为了使现有情况更好，让我们将其细分为培训、确定优先次序、调度，以及在职技能提升。
## 培训
  培训往往是暴露问题最严重的领域，这是令人惊讶的，因为它在理论上也是最容易解决的问题之一。造成这种情况的部分原因是由于一个棘手的问题：在职业生涯中我们何时需要进行这类培训。例如，就我所知，在任何地方任何计算机科学课程中都没有关于轮值的学术课程。与医学相比，差别巨大。如果我错了，请纠正我。因此，对于该行业的新人来说，经常会在工作的轮值部分完全无法得到支持、纠正或修改他们入职时面对的轮值情况。追究这一责任并决定（有效地）让他人受挫是很容易也很容易理解的。这当然会造成许多不良关系，并导致争竞氛围，最终使每个人的情况变得更糟。好消息是，有多个场所会讨论最佳实践，所以即使缺乏可公开转发的材料（也许网站可靠性工程的关于[轮值](https://landing.google.com/sre/book/chapters/being-on-call.html)和[故障排除](https://landing.google.com/sre/book/chapters/effective-troubleshooting.html)的章节是一个合理的起点，尽管也许是PagerDuty
的[培训材料](https://response.pagerduty.com/oncall/being_oncall/)假设读者知道的东西较少）现状仍然可以改进。无论如何，有关如何这样做的信息有用，且存在广泛可用的支持。
## 确定优先次序
 但改善的重点实际上是改善的*意愿*。这与企业文化紧密相关，正如 Cindy
Sridharan 引起争议（但并非不公地指出）。Cindy
Sridharan，["轮值不必糟心"](https://medium.com/@copyconstruct/on-call-b0bd8c5ea4e0)，Medium.com。
在这种情况下，更好的企业文化将涉及对产品开发人员的培训，实际上，拥有更好的轮值系统的方式，不是通过严格抵制任何轮值的调派，而是在轮值人员需要时，*优先*考虑所需修复的项目和需要完善的项目。运维起来容易的软件也会是一款更通用的软件。
有关为什么需要确定优先次序的讨论，请参阅[SRE
一书关于自动化的章节。](https://landing.google.com/sre/book/chapters/automation-at-google.html)
不过很可能遇到一个困境，虽然产品开发人员是最能够改善系统行为的一方，但往往又是系统问题爆发时最晚发现的那一方，这样就导致了恶性循环，不会产生任何好处。业务可能碰巧正常运行的，但它迟早会为这样的恶性循环付出代价（无论是资源成本、人员流失成本还是敏捷开发成本），而
SRE
的存在恰恰就是为了破除这个恶性循环的存在。类似的角色对立还会在故障后的检查报告中出现。
### 调度
为轮值的人提供补给也是一项重要的补救措施。如果提供更多的便利，就能避免轮值者面对太大的压力，也使更多的人将能够参与进来。如果有更多人能够参与进来，那么工作就分给更多人完成，也就意味着可以取得更多进展。如果能够取得更多进展，就可以多花些时间在日常的清理工作上，进一步导致轮值的压力减轻。这就形成了良性循环。
调度包括但不限于：对轮值工作的补偿，特别是非工作时间轮值的补偿；灵活合理的时间表，使参与者可以调整轮值的日程（取决于问题的严重程度，有时候看似最简单的操作也可能变得非常棘手）；故障恢复和后续行动；对于那些实际上无法做到这一点的人而言，如果没有反对，就会被排除在外。
### 补偿
  许多人仍然在没有轮值补偿的岗位上工作，或者没有正式的补偿计划。公司没有这个计划确实会更省不少钱，但这是非常短视的。首先是对员工的生活不利，其次道德上也不正确。尽管短期可能会省钱，但是对业务来说是不利的。*相反，我们应该有一个清晰明确的行业规范*，或一系列规范，以便每个组织都可以选择最适合它的规范，并且组织中的工程师*也可以*自由选择。通过为轮值者提供支持，承认企业有义务保障轮值者的利益，这将增加愿意这样做的工程师，从而有利于保持团队多样性，也保障了团队成员的生活品质。
### 灵活的日程安排
   要保证日程安排很灵活，首先应该消除不灵活的来源。管理层可能首先需要确认这个观点，那就是通过更灵活的日程安排，不但整体绩效会更好，招聘也会更容易。每一天的工作时间可能会有所不同，具体取决于那天发生故障的可能性。正式的服务级别协议（SLA）不仅极大地帮助了基于服务级别目标（SLO）的警报，这通常会降低警报的数量。哪怕是首次尝试探讨服务级别协议，也会帮助管理层了解问题的本质：那就是，他们实际上并不需要尝试（也不可能）获得100％的可用性。这反过来又可以实现更灵活的日程安排。
### 恢复
 我见过的大多数轮值员工的补偿计划都侧重于加班补贴或休假，但并不一定会在令人疲惫的值班后立即补偿。在轮值期间的工作超过一定强度时，公司可以从前一天晚上开始提供一个上午的休假，这应该是在换休制度以外的特别奖励才对。
### 避免遭到排挤
   确保人们对你所在的团队感到安全（无论他们对轮值的态度是什么或能力如何）主要是靠成功的一线管理，而不是公司政策的一部分。但公司可以提前发出信号，表示他们采取"选择退出而无需顾虑的轮值"政策，这将再次有助于吸引更多员工。 
## 提高在职绩效
 在职表现在很多方面是解决待命问题的最不重要的组成部分。首先，它实际上没有推进摆脱它的议程。此外，糟糕但可通过的轮值表现不太可能让你被解雇。如果真的解雇轮值员工的话，一个组织最终可能会不断解雇更多轮值员工，导致最终没人愿意承担这个职责，这样的恶性循环会导致最后无人愿意值守。
相反，通常来的情况是，只有那些犯下严重错误的人才会遭到解雇，大多数管理层关心的是工程师认真解决问题付出的努力，而不是一味追求泰勒主义一贯推崇的低平均恢复时间（MTTR）Frederick
Taylor
是一位科学管理理论家，他通过密切管理指标，介绍了在工作环境中使人们机械化的非常成功的想法。指标。因此，在轮值的人出现并做出努力之后，系统本身通常没有足够的激励来改善它，唯一的推动力是不想本周再写一次故障报告。
话虽如此，仍然有很多技术可以用来改进。
### Cognitive hacks
  首先，有许多认知"小窍门"可以改善轮值情况下的表现；例如，皱眉可以帮助我们减少力量，这反过来又使我们不太可能专注于特定情况，而排除其他所有干扰；阅读
John Allspaw
关于[不谈论责任的故障报告](https://codeascraft.com/2012/05/22/blameless-postmortems/)的材料也可以帮助我们在分布式系统中出现故障时，摆脱对实际存在问题的错误假设，并专注于自我反思，这是能帮助我们避免情绪化应对的关键途径。如前所述，反应是发现复杂事实的严重障碍，分布式系统中没有其他类型的真相。
  另一个潜在的小窍门的是*组对轮值*；这有非常有用的效果，当你需要向别人解释自己的思路时，不得不明确表达你的想法，通常可以帮助你弄清自己是否错了，只需要通过语言表达出来。这与主动/被动或首要/次要轮值的概念不同，因为这意味着人们在轮值期间以交互方式紧密合作。（这在工作时间最容易处理，却很难以小团队方式组织。）积极的假设，这是一种在想法出错之后抛出想法的技术，尽可能不同，也可能是有用的。当许多事情同时出现问题时尤其如此，因为压力增加会使思想变得狭窄。它还有助于问题定位，避免认知偏差问题。最后，良好的纪律，例如始终保持切换记录和遵循良好的故障管理流程，对于有效应对快速发生的事件是必要的；通过流程规定的大量深入调查，可以帮助你在不确定的情况下做出正确的反应。 
# 我们需要从根本上改变方法
 尽管所有这些实用建议都很有用，但总是给人一种感觉是在随大流。那么，一个更有趣的问题是，我们可以做些什么来*从根本上*改变这种情况？
当然，这取决于您如何给问题定性。回想一下软件系统核心的根本冲突：我们知道它们是肯定存在的，所以无论如何它们都有迹象。然而，问题不断地以最糟糕的方式表现出来，让我们惊讶于问题的复杂性（和问题如何相互作用）是如何导致故障的。
但是这种不可靠性是如何产生的呢？[*"网站可靠性工作手册"*](http://shop.oreilly.com/product/0636920132448.do)中对