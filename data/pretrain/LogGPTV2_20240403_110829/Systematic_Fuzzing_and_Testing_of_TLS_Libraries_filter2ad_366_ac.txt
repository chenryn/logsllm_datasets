### Modifiable Variables in TLS-Attacker

#### Overview of `ModifiableInteger` Class

The `ModifiableInteger` class encapsulates two main components: an original integer value (`origValue`) and a modification object. The `origValue` holds the initial integer value, which is computed during program execution. The `getValue()` method allows for the application of specific modifications before returning the final value.

```java
private Modification modification;
public int getValue() {
    if (modification != null) {
        return modification.modify(origValue);
    }
    return origValue;
}
```

#### Usage Example

To illustrate the functionality of `ModifiableInteger`, consider the following example:

```java
ModifiableInteger i = new ModifiableInteger();
i.setOriginalValue(30);
i.setModification(new AddModification(20));
System.out.println(i.getValue()); // Output: 50
```

In this example, we create a `ModifiableInteger` instance and set its original value to 30. We then define an `AddModification` that adds 20 to the original value. When `getValue()` is called, it applies the modification and returns 50.

#### Supported Modifications

`ModifiableInteger` supports various types of modifications, such as:
- **Add**: Adds a specified value.
- **ExplicitValue**: Sets a specific value.
- **Xor**: Performs a bitwise XOR operation.
- **Shift**: Shifts the bits of the value.
- **Subtract**: Subtracts a specified value.

Similar modifications are available for other numeric types, and `ModifiableByteArray` supports operations like delete, insert, and xor on byte arrays. These modifications can be concatenated and executed successively.

#### Modifiable Variables in Protocol Messages

All relevant protocol messages and record data in TLS-Attacker are stored using modifiable variables. For example, the `ClientHello` message in the TLS protocol flow uses modifiable variables:

```java
public class ClientHelloMessage {
    ModifiableInteger compressionLength;
    ModifiableByteArray compressions;
    ModifiableInteger cipherSuiteLength;
    ModifiableByteArray cipherSuites;
    // Other fields...
}
```

These modifiable variables allow for dynamic modifications before and during the protocol execution. For instance, a developer can set the `cipherSuitesLength` to 5, even if only 2 cipher suites are used, potentially triggering an overflow.

### High-Level Overview of TLS-Attacker

TLS-Attacker is organized into several Maven modules, each with a specific purpose:
- **ModifiableVariable**: Contains the concept of modifiable variables.
- **Transport**: Handles transport utilities for TCP and UDP.
- **TLS**: Implements the core TLS protocol functionality.
- **Attacks**: Defines various TLS attacks.
- **Fuzzer**: Provides fuzzing techniques.
- **TestSuite**: Offers an extensible TLS test suite.

The TLS module is further divided into packages such as `config`, `constants`, `crypto`, `protocol`, and `workflow`. The `protocol` package implements TLS messages and their handlers, while the `workflow` package provides a flexible protocol flow implementation.

### TLS-Attacker Features

TLS-Attacker currently supports:
- **Protocol Versions**: TLS 1.0, 1.1, 1.2, and DTLS 1.2.
- **Key Exchange Algorithms**: RSA, ECDH(E), DH(E).
- **Encryption Algorithms**: AES-CBC, 3DES-CBC.
- **Extensions**: EC, EC point format, Heartbeat, Maximum fragment length, Server name indication, Signature and hash algorithms.

### Using TLS-Attacker Interfaces

To demonstrate how TLS-Attacker interfaces can be used, consider the following example for detecting vulnerability to Bleichenbacher's attack:

```java
TlsContext context = initializeTlsContext(config);
WorkflowExecutor executor = initializeWorkflowExecutor(context);

// Setting explicit modification of the premaster secret
RSAClientKeyExchangeMessage rsa = new RSAClientKeyExchangeMessage();
ModifiableVariable<byte[]> pms = new ModifiableVariable<>();
pms.setModification(new ExplicitValueModification(VALUE));
rsa.setPlainPaddedPremasterSecret(pms);

// Constructing protocol message flow
List<AbstractTlsMessage> m = context.getProtocolMessages();
m.add(new ClientHelloMessage());
m.add(new ServerHelloMessage());
m.add(new CertificateMessage());
m.add(new ServerHelloDoneMessage());
m.add(rsa);
m.add(new ChangeCipherSpecMessage(ConnectionEnd.CLIENT));
m.add(new FinishedMessage(ConnectionEnd.CLIENT));
m.add(new Alert(ConnectionEnd.SERVER));

// Protocol execution
executor.executeWorkflow();
```

By setting a custom premaster secret, the security engineer can force TLS-Attacker to execute a TLS handshake with this custom value, revealing server behaviors that can indicate vulnerabilities.

### XML Serialization

For developers who prefer not to write Java code, TLS-Attacker supports XML serialization using JAXB. This allows for the definition of protocol flows and custom modifications in a simple XML document, making it easier to construct and test complex scenarios.

### Fuzzing with TLS-Attacker

TLS-Attacker provides a robust framework for fuzzing attacks, enabling systematic evaluation of TLS libraries. The approach is divided into two stages, as illustrated in Figure 4.

In the following sections, we will delve into the basics of fuzzing and how TLS-Attacker facilitates this process.