title:PHMon: A Programmable Hardware Monitor and Its Security Use Cases
author:Leila Delshadtehrani and
Sadullah Canakci and
Boyou Zhou and
Schuyler Eldridge and
Ajay Joshi and
Manuel Egele
PHMon: A Programmable Hardware Monitor and 
Its Security Use Cases
Leila Delshadtehrani, Sadullah Canakci, Boyou Zhou, Schuyler Eldridge, 
Ajay Joshi, and Manuel Egele, Boston University
https://www.usenix.org/conference/usenixsecurity20/presentation/delshadtehrani
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.PHMon: A Programmable Hardware Monitor
and Its Security Use Cases
Leila Delshadtehrani, Sadullah Canakci, Boyou Zhou, Schuyler Eldridge, Ajay Joshi, and Manuel Egele
Department of Electrical and Computer Engineering, Boston University
{delshad, scanakci, bobzhou, schuye, joshi, megele}@bu.edu
Abstract
There has been a resurgent trend in the industry to enforce a
variety of security policies in hardware. The current trend for
developing dedicated hardware security extensions is an im-
perfect, lengthy, and costly process. In contrast to this trend, a
ﬂexible hardware monitor can efﬁciently enforce and enhance
a variety of security policies as security threats evolve. Ex-
isting hardware monitors typically suffer from one (or more)
of the following drawbacks: a restricted set of monitoring
actions, considerable performance and power overheads, or
an invasive design. In this paper, we propose a minimally-
invasive and efﬁcient implementation of a Programmable
Hardware Monitor (PHMon) with expressive monitoring rules
and ﬂexible ﬁne-grained actions. PHMon can enforce a va-
riety of security policies and can also assist with detecting
software bugs and security vulnerabilities.
Our prototype of PHMon on an FPGA includes the hard-
ware monitor and its interface with a RISC-V Rocket proces-
sor as well as a complete Linux software stack. We demon-
strate the versatility of PHMon and its ease of adoption
through four different use cases: a shadow stack, a hardware-
accelerated fuzzing engine, an information leak prevention
mechanism, and a hardware-accelerated debugger. Our pro-
totype implementation of PHMon incurs 0.9% performance
overhead on average, while the hardware-accelerated fuzzing
engine improves fuzzing performance on average by 16×
over the state-of-the art software-based implementation. Our
ASIC implementation of PHMon only incurs a 5% power
overhead and a 13.5% area overhead.
1 Introduction
In recent years, there has been a growing demand to enforce
security policies in hardware with the goal of reducing the
performance overhead of their software-level counterparts.
As a response to this growing demand, leading processor
companies have introduced several security extensions. A
successful hardware-based enforcement of security policies,
such as the NX (non-executable) bit, provides an efﬁcient per-
manent security solution. The processor companies have also
established secure and isolated execution environments such
as Intel Trusted Execution Technology (TXT) [64], Intel Soft-
ware Guard Extensions (SGX) [3], ARM TrustZone [62], and
AMD Secure Virtual Machine (SVM) [61]. Additionally, Intel
has introduced Memory Protection Extensions (MPX) [65]
and Control-Flow Enforcement Technology (CET) [67] to
enforce security policies.
Unfortunately, the current trend to develop dedicated hard-
ware security extensions suffers from several drawbacks. Im-
plementing new security extensions in a new generation of
processors is a lengthy and costly process (which can take
up to several years and millions of dollars). Additionally, the
implemented extensions apply ﬁxed security policies. Since
these ﬁxed security policies are built in silicon, any problems
in the design or implementation of these policies requires
a ﬁx in the next generation of the processors. For example,
Intel introduced MPX as a hardware-assisted extension to
provide spatial memory safety by adding new instructions
and registers to assist with software-based bounds check-
ing. Software-based techniques, such as Safe-C (1994) [6]
and SoftBound (2009) [53], existed several years before In-
tel MPX was announced in 2013 and introduced commer-
cially in late 2015. Unexpectedly, Intel MPX incurs a con-
siderable performance overhead (up to 4× slow down in the
worst case [55]) and its supporting infrastructure cannot com-
pile/run 3-10% of legacy programs [55]. Due to various Intel
MPX problems, GCC, LLVM, and Linux discontinued their
support for MPX [42, 43]. Additionally, MPX does not pro-
tect the stack against Return-Oriented Programming (ROP)
attacks. Hence, in 2016, Intel announced a new security tech-
nology speciﬁcation, called Control-Flow Enforcement Tech-
nology (CET), for full stack protection.
The above Intel MPX example shows the lengthy and im-
perfect process of implementing ﬁxed hardware security ex-
tensions. As a result, these extensions cannot evolve with the
same pace as security threats. In contrast to the current trend
in the industry to develop rigid hardware security extensions,
USENIX Association
29th USENIX Security Symposium    807
ARTIFACTEVALUATEDPASSEDa ﬂexible hardware implementation can enforce and enhance
a variety of security policies as security threats evolve. Such
a ﬂexible hardware implementation provides a realistic envi-
ronment (a hardware prototype with full software stack) to
evaluate the security policies before a manufacturer enforces
a policy as a dedicated feature in hardware.
A ﬂexible hardware to enforce security policies can be
designed in the form of a hardware-assisted runtime monitor.
To characterize a general runtime monitor, we present an
event-action model. In this model, we deﬁne the runtime
monitoring by a set of events, where each event is deﬁned by a
ﬁnite set of monitoring rules, followed by a ﬁnite sequence of
actions. This deﬁnition does not restrict events/actions to high-
level (e.g., accessing a ﬁle) or low-level (e.g., execution of an
instruction) events/actions. Accordingly, runtime monitoring
consists of three main steps: 1) collecting runtime execution
information, 2) evaluating the ﬁnite set of monitoring rules on
the collected information to detect events, and 3) performing a
ﬁnite sequence of follow-up actions. Intuitively, a monitoring
system that allows the user to deﬁne generic rules, events, and
actions is more widely applicable than a system that restricts
the expressiveness of these aspects. Such a monitoring system
can be used in a wide range of applications, including, but
not limited to, enforcing security policies, debugging, and
runtime optimization.
A reference monitor [4,70] is a well-known concept, which
deﬁnes the requirements for enforcing security policies. A ref-
erence monitor observes the execution of a process and halts
or conﬁnes the process execution when the process is about
to violate a speciﬁed security policy. The reference monitor
observation can happen at different abstraction levels, e.g.,
OS kernel, hardware, or inline. We can describe a reference
monitor using our event-action monitoring model, where the
events are speciﬁed by security policies and the sequence of
actions is limited to halting/conﬁning the process execution.
An event-action monitoring model has a broader scope and is
not restricted to specifying reference monitors for enforcing
security policies.
Software-only runtime monitoring techniques can enforce
the event–action monitoring model with virtually no restric-
tion. However, these software techniques are not suited for
always on monitoring and prevention mechanisms due to their
considerable performance overhead (2.5× to 10× [47, 60]
caused by the dynamic translation process of Dynamic Bi-
nary Instrumentation (DBI) tools). Hardware-assisted moni-
toring techniques reduce this signiﬁcant overhead [26, 28, 89].
Nonetheless, they commonly restrict the expressiveness of
the event–action monitoring model. Some of the hardware-
assisted monitoring techniques are designed for a speciﬁc
monitoring use case, e.g., Bounds Checking (BC) [15, 27, 32,
51, 52], data-race detection [89], and Dynamic Information
Flow Tracking (DIFT) [18, 19, 78, 81]. Other techniques pro-
vide some ﬂexibility [10, 11, 25, 26, 28] and can be applied to
a range of use cases including BC, DIFT, and Control Flow
Integrity (CFI). We refer to these ﬂexible techniques as Flex-
ible Hardware Monitors (FHMons). However, the existing
FHMons suffer from three common limitations:
1. Most existing FHMon techniques (e.g., [25, 26, 28]) ex-
tend each memory address and register with a tag. These
techniques provide a set of actions only for tag propa-
gation and raising an exception (handled by software),
which restricts the expressiveness of their actions. Over-
all, this limits their deployment beyond tag-based mem-
ory corruption prevention. In principle, we can consider
the tag-based FHMons as hardware reference monitors
to enforce memory protection policies.
2. Some FHMon techniques [11, 12, 46] rely on a separate
general-purpose core to perform generic monitoring ac-
tions. These techniques incur large overheads (in terms
of performance, power, and area) despite leveraging ﬁl-
tering and hardware-acceleration strategies.
3. Some FHMons require invasive modiﬁcations to the
processor design (e.g., [16, 28, 76]). This limits the feasi-
bility of FHMon adoption in commercial processors as
well as the composition of FHMon.
Overall, the existing hardware-assisted monitoring techniques
only implement a restricted subset of an ideal event–action
monitoring model. Hence, they suffer from limited applica-
bility. To address the aforementioned limitations and expand
the set of monitoring rules and follow-up actions, we propose
a minimally-invasive and low-overhead implementation of a
Programmable Hardware Monitor (PHMon).
Our PHMon can enforce a variety of security policies and
it can also assist with detecting software bugs and security
vulnerabilities. We interface PHMon with a RISC-V [83]
Rocket [5] processor and we minimally modify the core to
expose an instruction execution trace to PHMon. This execu-
tion trace captures the whole architectural state of the core.
Each event is identiﬁed based on programmable monitoring
rules applied to the instruction execution trace. Once PHMon
detects an event, it performs follow-up actions in the form of
hardware operations including ALU operations and memory
accesses or an interrupt (handled by software). We modify the
Linux Operating System (OS) to support PHMon at process
level. Hence, unlike most existing FHMons and tag-based
memory corruption prevention techniques, PHMon offers the
option of enforcing different security policies for different
processes. Additionally, we provide a software API consist-
ing of a set of C functions to program PHMon. A user can
simply use this API to specify the monitoring rules and pro-
gram PHMon to monitor separate events, count the number of
event occurrences, and take a series of follow-up actions. We
demonstrate the versatility of PHMon and its ease of adop-
tion through four representative use cases: a shadow stack, a
hardware-accelerated fuzzing engine, information leak pre-
vention, and hardware-accelerated debugging.
808    29th USENIX Security Symposium
USENIX Association
To evaluate PHMon in a realistic scenario, we implement
a prototype of PHMon interfaced with a RISC-V Rocket
core [5] using Xilinx Zedboard FPGA [63]. Our FPGA-based
evaluation shows that PHMon improves the performance of
fuzzing by 16× over the state-of-the art software-based im-
plementation while our programmed shadow stack (for call
stack integrity protection) has 0.9% performance overhead,
on average. When implemented as an ASIC, PHMon incurs
less than 5% power and 13.5% area overhead compared to an
unmodiﬁed RISC-V core.
In summary, we make the following contributions:
• Design: We propose a minimally-invasive and efﬁcient
programmable hardware monitor to enforce an event–
action monitoring model with programmable monitor-
ing rules and ﬂexible hardware-level follow-up actions.
Additionally, we provide the OS and software support
for our hardware monitor.
• Application: We demonstrate the ﬂexibility and ease of
adoption of our hardware monitor to enforce different
security policies and to assist with detecting software
bugs and security vulnerabilities via four use cases.
• Implementation: We implement a practical prototype,
consisting of a Linux kernel and user-space running
on a RISC-V processor interfaced with our PHMon,
on an FPGA. Our evaluation indicates that PHMon in-
curs low performance, power, and area overheads. In the
spirit of open science and to facilitate reproducibility
of our experiments, we will open-source the hardware
implementation of our PHMon, our patches to the Linux
kernel, and our software API: https://github.com/bu-
icsg/PHMon.
2 Related work
In this section, we discuss existing hardware features in pro-
cessors and hardware-assisted monitors, which are applied
in security use cases, and compare them with PHMon. We
classify the hardware-assisted runtime monitors into two cate-
gories: “trace-based” and “tag-based”. Trace-based monitors
apply the monitoring rules and actions on the whole execution
trace, while the tag-based monitors restrict the monitoring
rules and/or actions to tag propagation. Table 1 compares
different features of our trace-based PHMon with other tag-
based and trace-based monitors. We can consider the tag-
based monitors as reference monitors that can enforce one or
more security policies for memory corruption prevention. In
general, trace-based monitors are applied to a wider range of
applications than merely memory protection. For example, as
listed in Table 1, data race detection is one of the use cases of
the Log-Based Architectures (LBA) [10, 11].
2.1 Custom Hardware for Monitoring
Dedicated hardware monitors have been used for a variety
of debugging and security applications including hardware-
assisted watchpoints for software debugging [35, 88] and
hardware-assisted Bounds Checking (BC) [27, 32, 51]. Simi-
lar to [35, 88], PHMon can be integrated with an interactive
debugger, such as GDB, and provide watchpoints by effec-
tively ﬁltering and monitoring different ranges of memory
addresses. PHMon can also evaluate conditional break points
and we illustrate this capability in Section 5.4.
Dynamic Information Flow Tracking (DIFT) is a tech-
nique for tracking information during the program’s execu-
tion by adding tags to data and tracking the tag propagation.
Software-only implementations of DIFT [50, 54, 59] have
large performance overheads. To reduce the performance
overhead, hardware implementations for DIFT have been pro-
posed [13, 19, 78, 81]. These techniques provide different
levels of ﬂexibility for DIFT, from 1-bit tags [59] and multi-
bit tags [19] to more ﬂexible designs [13, 81]. Instead of
comparing PHMon with custom hardware for BC and DIFT,
Section 2.2 provides a comparison with FHMons that are
capable of performing both BC and DIFT.
2.2 Flexible Hardware Monitors (FHMons)
FHMons provide ﬂexible monitoring capabilities and can be
applied to a range of applications. MemTracker [82] imple-
ments tag-based hardware support to detect memory bugs.
Several existing works [25, 26, 28] extend DIFT tag-based
monitoring into more ﬂexible frameworks capable of support-
ing different security use cases. PUMP [28] provides pro-
grammable software policies for tag-based monitoring with
invasive changes to the processor pipeline. FlexCore [25] is
a re-conﬁgurable architecture decoupled from the processor,
which provides a range of runtime monitoring techniques.
The programmable FPGA fabric of FlexCore restricts its in-
tegration with a high-performance core. Harmoni [26] is a
coprocessor designed to apply different runtime tag-based
monitoring techniques, where the tagging capability is not
as ﬂexible as FlexCore or PUMP. HDFI [76] and REST [74]
provide memory safety through data-ﬂow isolation by adding
a 1-bit tag to the L1 data cache.
Among the tag-based FHMons, HDFI [76] is the closest
work to PHMon in terms of providing a realistic evaluation
environment. Both HDFI and PHMon implement a hardware
prototype, rather than relying on simulations, and evaluate