### Search Space and Resilience Against Structural Attacks

The search space for an attacker encompasses all 2^k candidate Primary Inputs (PIs). However, D2PIPs (Distance-2 PIs) form only a small subset of all input patterns. Future attacks may attempt to enumerate all D2PIPs. The search space \( S \) for an attacker is defined as the set of all possible PIs that have a distance greater than one from all the PIs of the corrupted circuit. The size of this search space quantifies the resilience against structural attacks, which is highly specific to the circuit in question.

**Theorem 1**: Satisfying the Dist2 property is sufficient to achieve \( b \)-security against structural attacks on Boolean circuits represented in Sum-of-Products (SOP) form, where \( b = |S| \).

**Proof**: The proof is provided in Appendix C.

This theorem establishes a fundamental condition for resilience against structural attacks, but it is specifically for two-level SOP circuits. This result can be extended to multi-level circuits by considering the principles of multi-level logic synthesis or specific circuit formats.

### Synthesis and Security Considerations

When a corrupted circuit PIT (Primary Input Table) is constructed by removing a D2PIP from the original circuit, the synthesized gate-level netlist should not introduce a standalone sub-circuit for the excluded D2PIP, as this would increase the Power, Performance, and Area (PPA) cost. Modern EDA (Electronic Design Automation) tools aim for the least cost implementation, making it unlikely for a D2PIP to appear standalone in the netlist. However, ensuring security requires precise consideration of the EDA algorithm used, so that the desired security properties are maintained at each step of the synthesis process.

### I/O Attacks and Key Bits

D2PIPs may contain both specified bits and don't care bits. Only the specified bits can be treated as key bits, as the circuit function remains the same regardless of the value assigned to the don't care bits. A challenge in protecting circuits using only D2PIPs is that the maximum key size is dictated by the number of specified bits in the D2PIPs. For example, if PI1 is selected as a D2PIP in Figure 5(a), the key size is three; if PI2 is selected, the key size is nine. Existing synthesis algorithms aim to maximize the number of don't care bits in PIs to reduce implementation costs, resulting in smaller key sizes for circuits processed with these tools.

### Feasibility of Satisfying Dist2 Property

To check if a circuit satisfies the Dist2 property, a PIT must be computed, which is an NP-Hard problem. For most standard benchmark circuits, we can extract PITs for more than 80% of the logic cones. However, for circuits b20 and b22, which have unusually high percentages of logic cones with 2^15 or more inputs, ABC cannot extract PITs within 48 hours. On average, the data in Table 7 represents the general characteristics of standard benchmark circuits. Even for circuits b20 and b22, the computed PITs exhibit similar trends for D2PIPs as the remaining circuits.

### Critical Findings

Our study reveals that only a small fraction of logic cones are protectable using D2PIPs. A logic cone is considered protectable if its PIT has at least one D2PIP. On average, only 1.3%, 9.5%, and 51.4% of logic cones satisfy the Dist2 property in the ITC'99 circuits, ARM Cortex-M3 controllers, and the GPS circuit, respectively. The GPS circuit and ARMc1 controllers are notable exceptions, with 51.5% and 31.2% protectable cones. Importantly, the number of D2PIPs found in any circuit is extremely small, with the GPS circuit having the largest number at 64. This scarcity of D2PIPs limits the designer's ability to protect PIs based on their application or use-case and keeps the error rate at the outputs low.

Table 7 also reports the maximum achievable key size, a key indicator of resilience against I/O attacks. The maximum key size attained is 29, 20, and 63 for the ITC'99, Cortex-M3, and GPS circuits, respectively. Key sizes around 30 can be easily brute-forced using today's desktop computers, implying that most benchmark circuits cannot defend against brute-force attacks. A security level of 2^63 is significantly lower than the NIST-recommended security level of 2^112 [76]. Therefore, our most important finding is that commonly-used circuits are unsuitable for logic-locking techniques, as they fail to achieve a sufficiently large key size when satisfying the Dist2 property.

### Potential Countermeasures and Scalability

The small number of D2PIPs in conventional designs indicates that logic locking cannot protect the vast majority of circuits. This is due to the optimization objectives of EDA tools, which aim to pack the maximum number of codewords in the least number of bits while reducing PPA. These objectives lead to many closely arranged PIs, reducing the number of D2PIPs. We call for a revamp of existing industrial EDA tools to consider supply chain security. In the future, we intend to develop a security-centric encoding scheme to ensure a minimum inter-PI distance, increasing the number of specified bits in the PIT. Finding an optimal trade-off between security and PPA overhead will be crucial.

The SPI attack, which requires generating the PIT of a Boolean function and computing the distance between all PIs, is an NP-Hard problem. However, a divide-and-conquer approach can scale the attack to larger circuits, eliminating the need to compute the PIT of the complete circuit.

### Other Locking Techniques

- **Meerkat**: Considers resilience against structural attacks by introducing key gates, but it requires transforming a netlist into a reduced-ordered binary decision diagram and does not scale well for large circuits.
- **Cyclic Locking**: Introduces cycles in combinational circuits to defeat I/O attacks, but our attack can still be applied by unrolling the circuit.
- **Sequential Locking**: Adds states to finite state machines (FSMs) to enter functional states only with the correct key, but FSM synthesis techniques follow a distance-1 merging rule, making them vulnerable to our attack.
- **Scan Locking**: Defends against I/O attacks by locking scan chains or making scanned-out responses independent of the key value, but logic locking can be broken even without scan access.

### Conclusion

Our examination of logic-locking techniques processed through industry-standard EDA tools highlights their vulnerability. The SPI attack, which analyzes Boolean functions rather than specific netlist formats, can break any locked circuit in seconds, regardless of the CAC technique. The attack has a 100% success rate, even when circuits are optimized using various logic-synthesis tools, underscoring the inadequacy of EDA tools in defending against white-box attacks. Our findings highlight the infeasibility of locking circuits with reasonable security, calling for a reevaluation of the security of logic-locking techniques and the development of EDA tools and locking techniques that are cognizant of each other.