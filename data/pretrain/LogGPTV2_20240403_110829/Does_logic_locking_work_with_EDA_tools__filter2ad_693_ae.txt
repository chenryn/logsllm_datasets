search space for an attacker is all 2k candidate PIPs. However,
D2PIPs form only a small subset of all input patterns, and
future attacks can attempt to enumerate all D2PIPs.The search
space S for an attacker is the set of all possible PIs that have
a distance greater than one from all the PIs of the corrupted
circuit. The size of the search space quantiﬁes the resilience
against structural and is highly circuit speciﬁc. Theorem 1
presents the resilience against structural attacks for locking
two-level SOP circuits using only D2PIPs. Recall that the SOP
format uses two levels of gates, AND gates (implementing
product) followed by an OR gate (implementing sum).
Theorem 1: Satisfying Dist2 property is sufﬁcient to achieve
b-security against structural attacks on Boolean circuits rep-
resented in SOP form, where b = jSj.
Proof: The proof is presented in Appendix C.
The theorem provides a fundamental condition for re-
silience against structural attacks but only for two-level SOP
circuits. This result can be extended to multi-level circuits
(or any circuit format) by taking into account the principles
of multi-level logic synthesis (or a speciﬁc circuit format).
Suppose a corrupted circuit PIT is constructed by removing a
D2PIP from the original circuit. When the PIT is synthesized
into a gate-level netlist, a logic-synthesis algorithm should not
introduce a standalone sub-circuit for the excluded D2PIP into
the netlist since that will increase the PPA cost. Even upon
synthesis with current EDA tools, the chances for a D2PIP
to appear standalone in a netlist will be small since the tools
aim at the least cost implementation. However, a challenge
in establishing security guarantees is that the precise EDA
algorithm used to synthesize the circuit in the given format
must be considered so that the desired security properties are
maintained at each step of the algorithm.
I/O attacks. D2PIPs may contain both speciﬁed bits and
don’t care bits. Only the speciﬁed bits can be treated as key
bits for the circuit function remains the same regardless of the
value assigned to the don’t care bits. A caveat of protecting
USENIX Association
30th USENIX Security Symposium    1065
Table 7: Feasibility of satisfying Dist2 property by common benchmark circuits. A protectable logic cone has at least one D2PIP.
Circuit
# Logic cones
Logic cones examined (%)
Protectable logic cones (%)
Max # D2PIPs (in one cone)
Max # PIs (in one cone)
Cumulative # D2PIPs
Max key size
Max execution time (s)
b10
17
100
0
0
24
0
N/A
0.1
b11
31
100
16.1
3
256
11
15
76.8
b12
119
100
7.6
32
132
222
26
102.7
b13
53
100
13.2
2
105
11
11
60.9
ITC’99
b15
449
81.7
0.4
1
5.6(cid:2)104
b17
1445
81.1
0.4
1
8.2(cid:2)104
b20
512
40.2
1.6
2
8.2(cid:2)104
2
7
1.3(cid:2)104
6
7
2.2(cid:2)103
14
29
4.5
b22
757
38.9
1.1
8
8.4(cid:2)104
21
29
4.9
ARM Cortex-M3
ARMc1 ARMc2 ARMc3 ARMc4
125
100
31.2
3
363
66
20
56
63
90.5
1.6
1
12
1
6
3.4
66
89.4
3
2
6.5(cid:2)103
4
2
3.4
43
93
2.3
2
14
2
2
2.9
CEP
GPS
9.7(cid:2)103
99
51.4
64
1.1(cid:2)103
7.6(cid:2)104
63
85
only D2PIPs is that the maximum key size is dictated by the
number of speciﬁed bits in the D2PIPs. If PI1 is selected as a
D2PIP in Fig. 5(a), the key size is only three; upon selecting
PI2, the key size is nine. Existing synthesis algorithms aim
at maximizing the number of don’t care bits in PIs to reduce
the implementation cost. Thus, the circuits processed using
existing EDA tools will achieve relatively smaller key sizes.
5.2 Can Benchmark Circuits Satisfy Dist2?
Checking whether a circuit satisﬁes the Dist2 property re-
quires the computation of a PIT, which is an NP-Hard prob-
lem. As already mentioned in Section 3.4 PITs may not be
computed for certain circuits. For all but two circuits (b20
and b22), we can extract the PITs for more at least 80% of
the logic cones in standard benchmark circuits. The two cir-
cuits have unusually high percentages of logic cones with 215
or more inputs; thus, ABC cannot extract PITs for them in
48 hours. Since for all the circuits except b20 and b22, we
can extract the PITs for more than 90% of the logic cones,
on average, we claim that the data in Table 7 represents the
general characteristics of standard benchmark circuits. Even
for circuits b20 and b22, the computed PITs exhibit the same
trend for D2PIPs as that for the remaining circuits.
Satisfying Dist2 property. A critical ﬁnding of our study is
that only a small fraction of the logic cones are protectable
using D2PIPs. We say a logic cone is protectable if its PIT has
at least one D2PIP. On average, only 1.3, 9.5%, and 51.4% of
logic cones satisfy the Dist2 property in the ITC’99 circuits,
ARM Cortex-M3 controllers, and the GPS circuit, respectively.
The GPS circuit and ARMc1 controllers are notable exceptions
with 51.5% and 31.2% protectable cones. More importantly,
the number of D2PIPs found in any circuit is extremely small.
The GPS circuit has the largest number of D2PIPs in any
logic cone, which is only 64. All other circuits have smaller
numbers of D2PIPs, mostly (cid:20) 10. This dearth of D2PIPs
deprives the designers of any choice in protecting PIs based
on their application or use-case. Furthermore, since only a
few D2PIPs exist, the error-rate at the outputs will remain
low. One may ask if it is possible for the majority of D2PIPs
to be concentrated in the un-examined cones for which the
PITs could not be computed in 48 hours. This is unlikely as
D2PIPs that can only be a small subset of the input space.
Table 7 also reports the maximum achievable key size, the
main indicator of resilience against I/O attacks. The max-
imum key size attained is 29, 20, and 63 for the ITC’99,
Cortex-M3, and GPS circuits, respectively. Key sizes around
30 can be easily brute-forced using today’s desktop comput-
ers, implying that most of the benchmark circuits cannot even
defend against brute-force. A security level of 263 is signiﬁ-
cantly smaller compared to the NIST recommended security
level of 2112 [76]. Thus, our most important ﬁnding is that the
commonly-used circuits are unsuitable for any logic-locking
technique as they fail to achieve a sufﬁciently large key size
when satisfying the Dist2 property. To secure the IC supply
chain against piracy and to securely outsource IC fabrication,
designers can currently rely on schemes such as veriﬁable
computation, homomorphic encryption, and multi-party com-
putation that are computationally expensive and may incur
prohibitive PPA overhead [77, 78].
6 Discussion
6.1 Potential Countermeasures
As we have seen in Section 5.2, the number of D2PIPs in
conventional designs is mostly a few tens. This small number
indicates that logic locking cannot protect the vast majority
of the circuits. The reason for a small number of D2PIPs
is the EDA tools and their optimization objectives. Before
logic-synthesis tools convert high-level functions into their
corresponding Boolean circuits, the high-level variables need
to be Boolean encoded. For instance, the encoding process
translates instructions in the high-level format, such as ADD,
SUB, MUL, etc., to their corresponding opcode. The resul-
tant Boolean circuit implements the mapping between inputs
and outputs. Usually, such encoding schemes aim at pack-
ing the maximum number of codewords in the least number
of bits [69] while simultaneously reducing the PPA of the
resultant circuit [79]. Unfortunately, as we observed, these
optimization objectives lead to a PIT with many PIs closely
arranged, thereby reducing the number of D2PIPs. A recent
analysis of properties of Boolean functions also alludes to the
difﬁculty of locking certain circuits [80]. By demonstrating
that the current EDA algorithms and encoding schemes are
1066    30th USENIX Security Symposium
USENIX Association
not fully compatible with existing logic-locking techniques,
our paper calls for a revamp of existing industrial EDA tools
to take supply chain security into account. In the future, we
intend to develop a security-centric encoding scheme to en-
sure that the PIs maintain a minimum inter-PI distance. This
distance constraint will increase the number of speciﬁed bits
in the PIT, leading to high PPA costs. Thus, we need to ﬁnd
an optimal trade-off between security and PPA overhead.
6.2 Scalability
The SPI attack requires generating the PIT of a Boolean
function and computing the distance between all PIs. The
exact optimization of a PIT is an NP-Hard problem [81],
which raises concerns scalability of the attack. However, as
described in Section 3.4 and demonstrated experimentally in
Section 4.2, the attack can be easily scaled to larger circuits
using a divide-and-conquer approach that eliminates the need
for computing PIT of the complete circuit.
6.3 Other Locking Techniques
Meerkat considers resilience against structural attacks [82].
It introduces key gates such that that netlist structure remains
identical regardless of the key value, hampering structural
analysis attacks on netlists. Meerkat, however, requires the
transformation of a netlist into a reduced-ordered binary de-
cision diagram and cannot scale well for large circuits [82].
Meerkat, however, does not account for I/O attacks.
Cyclic locking techniques attempt to defeat I/O attacks by
introducing cycles in a combinational circuit [83–85]. The
underlying assumption is that the SAT/SMT solvers will loop
forever in the cycles. However, our attack is still applicable
to cyclic locking: a circuit protected by cyclic locking could
be converted to an acyclic circuit by unrolling it. Successful
attacks also exist against cyclic locking [84].
Sequential locking introduces additional states into ﬁnite
state machines (FSM) so that a design enters the desired
functional states only upon applying the correct key [6, 17,
86–88]. Even FSM synthesis techniques follow the distance-1
merging rule, similar to that for combinational circuits [70,89].
Naturally, one can extend our SPI attack to sequential locking
by targeting the sequential synthesis steps.
Scan locking. All oracle-based attacks rely on scan chains to
query the oracle. A few defense techniques thwart I/O attack
by locking the scan chains [90] or making the scanned-out
responses independent of the key value [91]. However, logic
locking can be broken even without scan access [87, 92].
7 Conclusion
We have examined how vulnerable logic-locking tech-
niques become when processed through industry-standard
EDA tools. Contrary to the existing attacks, our SPI attack
does not target a speciﬁc netlist format. Instead, it analyzes
the Boolean functions, which renders our proposed attack and
security property widely applicable. Our SPI attack takes only
a few seconds to break any locked circuit irrespective of the
CAC technique. The attack has a 100% success rate even
when the circuits are optimized using various logic-synthesis
tools, highlighting the inadequacy of the EDA tools in defend-
ing against white-box attacks. Our ﬁndings, in satisfying the
Dist2 property, highlight the infeasibility of locking circuits
with reasonable security.
Ramiﬁcations. The SPI attack calls for reevaluating the se-
curity of logic-locking techniques. The encoding schemes
underlying current logic-synthesis tools and the subsequent
optimizations in their current form fail to make a logic-locking
technique secure. We have also highlighted the scarcity of
D2PIPs in common benchmark circuits. Thus, we urge logic-
locking researchers to consider the following: (i) Is the gate-
level netlist the right abstraction level to apply logic locking?
Thus, are ISCAS and ITC circuits appropriate benchmarks to
evaluate logic locking? (ii) Can we blindly trust EDA tools
for logic locking and other hardware security problems? We
urge the need for the community to develop EDA tools and
locking techniques that are cognizant of each other.
Acknowledgement
We thank Dr. Abhrajit Sengupta, Nimisha Limaye, Prof.
Ozgur Sinanoglu from NYU-AD, and other CSAW’19 orga-
nizers for their help in providing locked circuits and verifying
the keys. We thank other members of the TAMU SETH lab
for their help in collecting data. We also thank Prof. Krishna
Narayanan from TAMU for valuable discussions. And, we
thank anonymous reviewers for their comments. The work
was supported in part by the National Science Foundation
(NSF CNS-1749175) and the Defense Advanced Research
Projects Agency grants HR0011-20-9-0043 and FA8650-18-
1-7827. Any opinions, ﬁndings, conclusions, or recommen-
dations expressed herein are those of the authors, and do not
necessarily reﬂect those of the US Government.
References
[1] D. Takahashi, “Globalfoundries: Next-generation chip factories
will cost at least $10 billion.” https://rb.gy/pjllsf, 2017.
Last accessed on 10/12/2020.
[2] J. Purcher, “Apple Supply Chain News: TSMC & Foxconn
Plan new chip plants.” https://rb.gy/ot1hfv, 2017. Last
accessed on 10/12/2020.
[3] M. Rostami, F. Koushanfar, and R. Karri, “A Primer on Hard-
ware Security: Models, Methods, and Metrics,” Proceedings
of IEEE, vol. 102, no. 8, pp. 1283–1295, 2014.
[4] SEMI, “Innovation is at Risk Losses of up to $4 Billion Annu-
ally due to IP Infringement.” https://rb.gy/ajtlnw, 2008.
Last accessed on 10/04/2020.
USENIX Association
30th USENIX Security Symposium    1067
[5] A. Kahng, J. Lach, W. H. Mangione-Smith, S. Mantik,
I. Markov, M. Potkonjak, P. Tucker, H. Wang, and G. Wolfe,
“Watermarking Techniques for Intellectual Property Protec-
tion,” IEEE/ACM Design Automation Conference, pp. 776–781,
1998.
[6] Y. Alkabani and F. Koushanfar, “Active Hardware Metering
for Intellectual Property Protection and Security,” USENIX
Security Symposium, pp. 291–306, 2007.
[7] J. Roy, F. Koushanfar, and I. Markov, “EPIC: Ending Piracy of
Integrated Circuits,” IEEE/ACM Design, Automation & Test in
Europe, pp. 1069–1074, 2008.
[8] J. Rajendran, Y. Pino, O. Sinanoglu, and R. Karri, “Security
Analysis of Logic Obfuscation,” IEEE/ACM Design Automa-
tion Conference, pp. 83–89, 2012.
[9] P. Subramanyan, S. Ray, and S. Malik, “Evaluating the Security
of Logic Encryption Algorithms,” IEEE International Sympo-
sium on Hardware Oriented Security and Trust, pp. 137–143,
2015.
[10] M. Yasin, A. Sengupta, M. T. Nabeel, M. Ashraf, J. Rajendran,
and O. Sinanoglu, “Provably-Secure Logic Locking: From
Theory To Practice,” ACM SIGSAC Conference on Computer
& Communications Security, pp. 1601–1618, 2017.