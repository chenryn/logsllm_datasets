            bool            inUpdateCursor
            )
    {
        byte textAttribute = ((inTextColor) | (inBackgroundColor &lt;&lt; 4));
        byte lengthOfString = CString::Strlen(inStrSource);
        __asm
         {
            pushbp
            moval, inUpdateCursor
            xorbh, bh
            movbl, textAttribute
            xorcx, cx
            movcl, lengthOfString
            movdh, inY
            movdl, inX  
            mov     es, word ptr[inStrSource + 2]
            mov     bp, word ptr[inStrSource]
            movah,13h
            int10h
            popbp
        }
    }
    void CDisplay::ClearScreen()
    {
        __asm
        {
            mov     al, 02h
            mov     ah, 00h
            int     10h
        } 
    }
    void CDisplay::ShowCursor(
            bool inMode
            )
    {
        byte flag = inMode ? 0 : 0x32;
        __asm
        {
            mov     ch, flag
            mov     cl, 0Ah
            mov     ah, 01h
            int     10h
        }
    }
**4.7 Types.h实现**
Types.h是一个头文件，包含数据类型以及宏的定义。
    // Types.h
    #ifndef __TYPES__
    #define __TYPES__     
    typedef unsigned char   byte;
    typedef unsigned short  word;
    typedef unsigned long   dword;
    typedef char            bool;
    #define true            0x1
    #define false           0x0
    #endif // __TYPES__
**4.8 BootMain.cpp实现**
BootMain()是程序的主功能函数，也是第一个入口点（类似于main()）。程序的主要功能实现位于该函数中。
    // BootMain.cpp
    #include "CDisplay.h"
    #define HELLO_STR               ""Hello, world…", from low-level..."
    extern "C" void BootMain()
    {
        CDisplay::ClearScreen();
        CDisplay::ShowCursor(false);
        CDisplay::TextOut(
            HELLO_STR,
            0,
            0,
            BLACK,
            WHITE,
            false
            );
        return;
    }
**4.9 StartPoint.asm实现**
    ;------------------------------------------------------------    .286   ; CPU type
    ;------------------------------------------------------------    .model TINY   ; memory of model
    ;---------------------- EXTERNS -----------------------------    extrn_BootMain:near   ; prototype of C func
    ;------------------------------------------------------------    ;------------------------------------------------------------   
    .code   
    org07c00h   ; for BootSector
    main:
    jmp short start   ; go to main
    nop
    ;----------------------- CODE SEGMENT -----------------------    start:
            cli
            mov ax,cs               ; Setup segment registers
            mov ds,ax               ; Make DS correct
            mov es,ax               ; Make ES correct
            mov ss,ax               ; Make SS correct        
            mov bp,7c00h
            mov sp,7c00h            ; Setup a stack
            sti
                                    ; start the program 
            call           _BootMain
            ret
            END main                ; End of program
**  
**
**五、编写汇编代码**
****
**5.1 创建COM文件**
现在，在编写代码时，我们需要将代码转化为16位操作系统中可用的文件。这些文件是 **.com文件**
。我们可以通过命令行运行每个编译器（即汇编语言编译器、C及C++编译器），输入必要的参数，然后生成几个目标文件。下一步我们需要启动链接器，将所有.obj文件转化为可执行的.com文件。这是可行的工作方式，但做起来不是特别容易。
我们可以自动化完成这个过程。为了实现自动化，我们创建了.bat文件，将命令及必要的参数输入脚本文件中。应用程序汇编处理的完整过程如图4所示。
图4. 程序编译过程
**Build.bat**
现在，我们需要将编译器以及链接器放在当前工程目录中。在同一个目录下，我们创建了.bat文件，根据演示需求往文件中添加适当命令（你可以将其中的VC152替换为编译器及链接器所在的那个目录名）：
    .VC152CL.EXE /AT /G2 /Gs /Gx /c /Zl *.cpp
    .VC152ML.EXE /AT /c *.asm
    .VC152LINK.EXE /T /NOD StartPoint.obj bootmain.obj cdisplay.obj cstring.obj
    del *.obj
**5.2 自动化汇编**
作为本节的最后一部分，我们将介绍如何设置微软的Visual Studio
2005/2007，让其支持任意编译器，使其成为合适的开发环境。让我们跳转到工程属性，依次选择如下菜单：Project->Properties->Configuration
PropertiesGeneral->Configuration Type
**Configuration Properties** 选项卡包含三个选项： **General、Debugging** 以及 **NMake** 。转到
**NMake** 选项，将 **Build Command Line** 以及 **Rebuild Command Line** 字段设置为
**build.bat** ，如图5所示。
图5. NMake工程设置
如果一切进展顺利，那么你就可以使用熟悉的 **F7** 或者 **Ctrl + F7**
方式来编译工程，所有的输出信息都会在Output窗口中显示。这样做的主要优点不仅在于能够自动化完成汇编工作，当代码出现错误时，这样做也能快速定位错误代码。
**六. 测试及用例展示**
****
本节主要介绍的是如何查看boot loader的引导效果，测试并调试boot loader。
**6.1 如何测试boot loader**
你可以在真实的硬件上测试boot loader，也可以使用专用的VMware虚拟机来完成这一任务。使用真实的硬件进行测试时，你可以确保boot
loader能够正常工作，而使用虚拟机进行测试时，你只能得出boot
loader可以工作的结论。当然，我们可以说VMware是测试及调试的绝佳选择。在本文中，这两种方法都会涉及到。
首先，我们需要一个工具，以便将我们的boot
loader写入虚拟磁盘或物理磁盘上。据我所知，有一些免费或者商业的基于控制台或者GUI的应用程序能够完成这一任务。对于Windows系统，我选择的是
**Disk Explorer for NTFS 3.66** 这个工具（适用于FAT的版本为Disk Explorer for FAT），对于MS-DOS系统，我选择的是 **Norton Disk Editor 2002** 。
在这里我只会介绍Disk Explorer for NTFS 3.66这个工具，因为使用该工具是满足我们的需求的最为简单的一种方法。
**6.2 使用VMware虚拟机进行测试**
**6.2.1 创建虚拟机**
我们需要5.0、6.0或者更高版本的VMware程序。为了测试boot
loader，我们需要创建一个新的虚拟机，磁盘大小设为最小（如1Gb）。将硬盘格式化为NTFS文件系统。现在我们需要将格式化后的硬盘映射到VMware中的虚拟磁盘。依次选择如下菜单：
**File- >Map or Disconnect Virtual Disks…**
之后就会弹出一个窗口，这里我们需要点击“Map”按钮。在弹出窗口中，我们需要将路径设置为硬盘所在的路径。然后我们需要指定硬盘的盘符。如图6所示。
图6. 设置虚拟磁盘映射参数
不要忘记勾掉 **“Open file in read-only mode (recommended)”**
复选框。选中该复选框则意味着硬盘会以只读模式打开，阻止写入操作以避免数据损坏。
之后我们可以像使用Windows逻辑磁盘那样来使用虚拟机的磁盘。现在我们需要使用Disk Explorer for NTFS 3.66,将boot
loader写入到物理偏移为0的地址处。
**6.2.2 使用Disk Explorer for NTFS**
程序启动后，我们需要转到我们的那个磁盘（ **File- >Drive**）。在弹出窗口中，转到“Logical
Drives”部分，选择包含特定盘符的那个硬盘（本例中为Z盘），如图7所示。
图7. 在Disk Explorer for NTFS中选择磁盘
现在，在菜单栏中选择 **View** 以及 **As Hex**
命令，在生成的窗口中，我们可以看到以16进制呈现的硬盘数据，硬盘数据按扇区和偏移量进行分隔。从窗口中我们发现一堆的0，因为此时此刻硬盘是个空硬盘。第一个扇区情况如图8所示。
图8. 硬盘第1个扇区的数据
现在我们应该将我们的boot loader写入第一个扇区中。将光标设定在00处，如图8所示。为了复制boot loader，我们使用 **Edit**
菜单项，选择 **Paste from file** 命令。在打开的窗口中，指定文件的路径，然后点击 **Open**
按钮。之后，第一个扇区的内容应该会发生改变，如图9所示（如果你没有修改代码，那么扇区数据肯定会发生改变）。
你还需要在距离扇区起始位置的1FE偏移处写入55AAh特征数据。如果不这么做，BIOS会检查最后两个字节，找不到这个特征后，会将该扇区视为不可引导扇区，不会将其读入内存。
要想切换回编辑模式，你可以按下 **F2** 键，再写入55AAh这个特征数据，然后按下 **Esc** 键离开编辑模式。
接下来我们需要确认数据写入情况。
图9.引导扇区数据
要完成数据写入，我们需要转到 **Tools- >Options**，在弹出窗口中，选择 **Mode** 子项，选择写入方式（为 **Virtual
Write** ），点击 **Write** 按钮，如图10所示。
之后程序会经过一系列的操作，完成写入过程，现在我们可以看到从本文开头就一直在开发的研究成果。回到VMware中，断开虚拟磁盘（选择 **File->Map**或者 **Disconnect Virtual Disks…** ，然后点击 **Disconnect** ）。
现在我们可以试着启动虚拟机。我们可以看到屏幕中出现了我们熟悉的那个字符串： **“Hello, world…”, from low-level…**
。如图11所示。
**6.3 在真实硬件上进行测试**
在真实硬件上的测试过程与在虚拟机上的测试过程非常类似，只不过此时如果某些功能无法正常工作，相对比简单地创建新的虚拟机，你可能需要花费更多的时间才能修复出现的问题。在测试boot
loader时，为了避免造成数据损坏（一切都有可能发生），我建议你使用闪存驱动器（flash
drive），但首先你需要重启计算机，进入BIOS，检查BIOS是否支持从闪存驱动器启动。如果支持，那么一切都会非常顺利，如果不支持，那么测试过程还是仅限于虚拟机环境比较好。
使用Disk Explorer for NTFS 3.66将boot
loader写入闪存驱动器中与虚拟机的写入过程相同。你只需要选择硬盘驱动器本身，而不是选择硬盘驱动器的逻辑分区来完成写入过程即可。如图12所示。
图12.选择物理期盼作为目标设备
**6.4 调试**
如果整个过程中出现问题（通常都会发生这种情况），你需要某些工具来调试boot
loader。我想说的是，这是非常复杂、非常烦人同时又非常耗时的一个过程。你需要在汇编机器码中遨游，因此你需要熟练掌握这门语言。我列了一些工具，仅供参考：
1\. **TD (Turbo Debugger)** ：Borland出品的用于16位实模式的非常好的一个调试器。
2\. **CodeView** ：微软出品的用于16位模式的非常好的一个调试器。
3\. **Bocsh** ：虚拟机程序模拟器，包含机器命令调试器。
**七、参考资料**
****
**Kip R. Irvine** 写的 **"Assembly Language for Intel-Based Computers"**
这本书非常好，详细介绍了计算机的内部结构以及汇编语言的开发细节，从中你也能找到如何安装、配置及使用MASM 6.15编译器的相关信息。
你也可以访问了解BIOS中断列表。
**八、总结**
****
在本文中，我们介绍了boot
loader的基本知识、BIOS的工作原理、系统启动时系统各组件之间的交互过程等信息。在实践部分，我们介绍了如何开发一个简单的自定义的boot
loader。我们介绍了混合代码技术，也介绍了如何使用微软的Visual Studio 2005、2008来自动化完成程序的汇编过程。
当然，与低级编程语言方面翔实的参考资料相对比，本文只能算九牛一毛，但如果能引起广大读者的兴趣就已足够。
读者可以参考[Apriorit](http://www.apriorit.com/case-studies.html)网站了解更多研究成果。