$v0, 7 
.text:00000030          
lw       
$t9, (printf & 0xFFFF)($gp) 
.text:00000034          
sw       
$v0, 0x38+var_1C($sp) 
; prepare 1st argument in $a0: 
.text:00000038          
lui      
$a0, ($LC0 >> 16) # "a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%"… 
; pass 9th argument in stack: 
.text:0000003C          
li       
$v0, 8 
.text:00000040          
sw       
$v0, 0x38+var_18($sp) 
; pass 1st argument in $a1:  
.text:00000044          
la       
$a0, ($LC0 & 0xFFFF) # "a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%"... 
; pass 2nd argument in $a1: 
.text:00000048          
li       
$a1, 1 
; pass 3rd argument in $a2: 
.text:0000004C          
li       
$a2, 2 
; call printf(): 
.text:00000050          
jalr     
$t9 
; pass 4th argument in $a3 (branch delay slot): 
.text:00000054          
li       
$a3, 3 
; function epilogue: 
.text:00000058          
lw       
$ra, 0x38+var_4($sp) 
; set return value to 0: 
.text:0000005C          
move     
$v0, $zero 
; return 
.text:00000060          
jr       
$ra 
.text:00000064          
addiu    
$sp, 0x38 ; branch delay slot 
Non-optimizing GCC 4.4.5 
关闭优化选项后，GCC 会生成较为详细的指令。 
指令清单 6.16  Non-optimizing GCC 4.4.5（汇编输出） 
$LC0: 
         .ascii  "a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%d; h=%d\012\000" 
main: 
; function prologue: 
         addiu  $sp,$sp,-56 
         sw       $31,52($sp) 
         sw       $fp,48($sp) 
         move     $fp,$sp 
         lui      $28,%hi(__gnu_local_gp) 
         addiu    $28,$28,%lo(__gnu_local_gp) 
         lui      $2,%hi($LC0) 
         addiu    $2,$2,%lo($LC0) 
; pass 5th argument in stack: 
         li       $3,4         
# 0x4 
         sw       $3,16($sp) 
; pass 6th argument in stack: 
         li       $3,5         
# 0x5 
         sw       $3,20($sp) 
; pass 7th argument in stack: 
         li       $3,6         
# 0x6 
         sw       $3,24($sp) 
; pass 8th argument in stack: 
         li       $3,7         
# 0x7 
         sw       $3,28($sp) 
; pass 9th argument in stack: 
         li       $3,8         
# 0x8 
         sw       $3,32($sp) 
; pass 1st argument in $a0: 
         move     $4,$2 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 6 章  printf()函数与参数调用 
55 
; pass 2nd argument in $a1: 
         li       $5,1         
# 0x1 
; pass 3rd argument in $a2: 
         li       $6,2         
# 0x2 
; pass 4th argument in $a3: 
         li       $7,3         
# 0x3 
; call printf(): 
         lw       $2,%call16(printf)($28) 
         nop 
         move     $25,$2 
         jalr     $25 
         nop 
; function epilogue: 
         lw       $28,40($fp) 
; set return value to 0: 
         move     $2,$0 
         move     $sp,$fp 
         lw       $31,52($sp) 
         lw       $fp,48($sp) 
         addiu    $sp,$sp,56 
; return 
         j        $31 
         nop 
指令清单 6.17  Non-optimizing GCC 4.4.5 (IDA) 
.text:00000000 main: 
.text:00000000 
.text:00000000 var_28    
= -0x28 
.text:00000000 var_24    
= -0x24 
.text:00000000 var_20    
= -0x20 
.text:00000000 var_1C    
= -0x1C 
.text:00000000 var_18    
= -0x18 
.text:00000000 var_10    
= -0x10 
.text:00000000 var_8     
= -8 
.text:00000000 var_4     
= -4 
.text:00000000 
;  function prologue: 
.text:00000000     
addiu $sp, -0x38 
.text:00000004     
sw  $ra, 0x38+var_4($sp) 
.text:00000008     
sw  $fp, 0x38+var_8($sp) 
.text:0000000C     
move  $fp, $sp 
.text:00000010     
la  $gp, __gnu_local_gp 
.text:00000018     
sw  $gp, 0x38+var_10($sp) 
.text:0000001C     
la  $v0, aADBDCDDDEDFDGD # "a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%" ... 
; pass 5th argument in stack: 
.text:00000024     
li    $v1, 4 
.text:00000028     
sw    $v1, 0x38+var_28($sp) 
; pass 6th argument in stack: 
.text:0000002C     
li  $v1, 5 
.text:00000030     
sw  $v1, 0x38+var_24($sp) 
; pass 7th argument in stack: 
.text:00000034     
li  $v1, 6 
.text:00000038     
sw  $v1, 0x38+var_20($sp) 
; pass 8th argument in stack: 
.text:0000003C     
li  $v1, 7 
.text:00000040     
sw  $v1, 0x38+var_1C($sp) 
; pass 9th argument in stack: 
.text:00000044     
li  $v1, 8 
.text:00000048     
sw   $v1, 0x38+var_18($sp) 
; pass 1st argument in $a0: 
.text:0000004C     
move $a0, $v0 
; pass 2nd argument in $a1: 
.text:00000050     
li  $a1, 1 
; pass 3rd argument in $a2: 
.text:00000054     
li 
$a2, 2 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
56 
逆向工程权威指南（上册） 
; pass 4th argument in $a3: 
.text:00000058     
li  $a3, 3 
; call printf(): 
.text:0000005C     
lw  $v0, (printf & 0xFFFF)($gp) 
.text:00000060     
or 
$at, $zero 
.text:00000064     
move  $t9, $v0 
.text:00000068     
jalr $t9 
.text:0000006C     
or 
$at, $zero ; NOP 
; function epilogue: 
.text:00000070     
lw 
$gp, 0x38+var_10($fp) 
; set return value to 0: 
.text:00000074     
move $v0, $zero 
.text:00000078     
move $sp, $fp 
.text:0000007C     
lw  $ra, 0x38+var_4($sp) 
.text:00000080     
lw  $fp, 0x38+var_8($sp) 
.text:00000084     
addiu $sp, 0x38 
; return 
.text:00000088     
jr 
$ra 
.text:0000008C     
or 
$at, $zero ; NOP 
6.4 总结 
调用函数的时候，程序的传递过程大体如下。 
指令清单 6.18  x86 
... 
PUSH 3rd argument 
PUSH 2nd argument 
PUSH 1st argument 
CALL function 
; modify stack pointer (if needed) 
指令清单 6.19  x64 (MSVC) 
MOV RCX, 1st argument 
MOV RDX, 2nd argument 
MOV R8, 3rd argument 
MOV R9, 4th argument 
... 
PUSH 5th, 6th argument, etc (if needed) 
CALL function 
; modify stack pointer (if needed) 
指令清单 6.20  x64 (GCC) 
MOV RDI, 1st argument 
MOV RSI, 2nd argument 
MOV RDX, 3rd argument 
MOV RCX, 4th argument 
MOV R8, 5th argument 
MOV R9, 6th argument 
... 
PUSH 7th, 8th argument, etc (if needed) 
CALL function 
; modify stack pointer (if needed) 
指令清单 6.21  ARM 
MOV R0, 1st argument 
MOV R1, 2nd argument 
MOV R2, 3rd argument 
MOV R3, 4th argument 
; pass 5th, 6th argument, etc, in stack (if needed) 
BL function 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 6 章  printf()函数与参数调用 
57 
; modify stack pointer (if needed) 
指令清单 6.22  ARM64 
MOV X0, 1st argument 
MOV X1, 2nd argument 
MOV X2, 3rd argument 
MOV X3, 4th argument 
MOV X4, 5th argument 
MOV X5, 6th argument 
MOV X6, 7th argument 
MOV X7, 8th argument 
; pass 9th, 10th argument, etc, in stack (if needed) 
BL CALL function 
; modify stack pointer (if needed) 
指令清单 6.23  MIPS（O32 调用约定） 
LI $4, 1st argument ; AKA $A0 
LI $5, 2nd argument ; AKA $A1 
LI $6, 3rd argument ; AKA $A2 
LI $7, 4th argument ; AKA $A3 
; pass 5th, 6th argument, etc, in stack (if needed) 
LW temp_reg, address of function 
JALR temp_reg 
6.5 其他 
在 x86、x64、ARM 和 MIPS 平台上，程序向函数传递参数的方法各不相同。这种差异性表明，函数
间传递参数的方法与 CPU 的关系并不是那么密切。如果付诸努力，人们甚至可以开发出一种不依赖数据栈
即可传递参数的超级编译器。 
为了方便记忆，在采用 O32 调用约定时，MIPS 平台的 4 号～7 号寄存器也叫作$A0~$A7 寄存器。实
际上，编程人员完全可以使用$ZERO 之外的其他寄存器传递数据，也可以采取其他的函数调用约定。 
CPU 完全不在乎程序使用何种调用约定。 
汇编语言的编程新手可能采取五花八门的方法传递参数。虽然他们基本上都是利用寄存器传递参数，
但是传递参数的顺序往往不那么讲究，甚至可能通过全局变量传递参数。不过，这样的程序也能正常运行。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 77 章
章    ssccaannff(())  
本章演示 scanf()函数。 
7.1 演示案例 
#include 
intmain() 
{ 
        int x; 
        printf ("Enter X:\n"); 
        scanf ("%d", &x); 
        printf ("You entered %d...\n", x); 
        return 0; 
}; 
好吧，我承认时下的程序如果大量使用 scanf()就不会有什么前途。本文仅用这个函数演示整形数据的
指针的传递过程。 
7.1.1  指针简介 
在计算机科学里，“指针”属于最基础的概念。如果直接向函数传递大型数组、结构体或数据对象，程
序的开销就会很大。毫无疑问，使用指针将会降低开销。不过指针的作用不只如此：如果不使用指针，而