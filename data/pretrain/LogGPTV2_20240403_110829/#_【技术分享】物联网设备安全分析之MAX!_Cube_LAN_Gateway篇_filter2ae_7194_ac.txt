NSE脚本是用Lua语言编写的，而Lua又是一种相当简单和易于理解的脚本语言。
开始编写自己的脚本时，最简单的方法是就是学习现有的脚本（脚本通常位于/usr/share/nmap/scripts目录中，或者在线查找）。例如，对于身份请求来说，我们只需要发送一个UDP包，然后检索响应的有效载荷即可。一个浅显易懂例子是daytime.nse脚本，具体如下所示：
    portrule = shortport.port_or_service(13, "daytime", {"tcp", "udp"})
    action = function(host, port)
      local status, result = comm.exchange(host, port, "dummy", {lines=1})
      if status then
        return result
      end
    end
在开头部分，只是定义了一些元数据，实际上对于每个NSE脚本来说，真正的起始位置都是从portrule这里开始的。它定义了该脚本的运行时机。就本例来说，如果13端口已经打开了，并且与端口13或TCP或UDP服务匹配的时候，就会运行该脚本。
NSE脚本中的第二个重要的事情是action，它可以被看作是NSE脚本的main（）函数。action总是需要两个参数：主机和端口。应当指出，这些不仅仅是一个包含主机名或IP地址和端口号的字符串，每个都是一个保存了诸如主机表（host.mac_addr）中的MAC地址或端口表（port.protocol）中的协议（TCP或UDP）之类附加信息的表。
这个脚本使用了comm模块中的exchange（）函数，而该模块是Nmap提供的诸多LUA模块之一。这个函数的作用，只是发送一个有效载荷并返回响应。如果脚本需要向用户返回信息的话，可以通过纯字符串或LUA表的形式来返回。
作为Nmap脚本的第一个例子，这里只是在TCP端口62910连接Cube设备，并解析该设备返回的第一行内容，从而输出该Cube设备的序列号、RF地址和固件版本
。
    H:KMD1016788,099c3e,0113,00000000,7ee2b5d7,00,32,100408,002c,03,0000
    [...]
所以，我们的脚本只需要连接到该端口，获得响应并解析值KMD1016788（序列号）、099c3e（RF地址）和0113（固件版本），代码具体如下所示：
    local shortport = require "shortport"
    local stdnse = require "stdnse"
    description = [[
    ]]
    author = "CHANGEME"
    license = "Same as Nmap--See https://nmap.org/book/man-legal.html"
    categories = {"discovery", "safe"}
    portrule = shortport.portnumber(0, "tcp")
    action = function(host, port)
    end
在上面的代码的基础之上，可以继续添加所需的功能。
因为我们只需要连接到一个端口来获取响应而不发送任何东西，所以最简单的方法是使用一个简单的套接字。有了Nmap后，利用NSE脚本进行socket通信变得异常轻松：
    local sock = nmap.new_socket()
    local status, err = sock:connect(host, port, "tcp")
    if not status then
      stdnse.debug1("%s", err)
      return
    end
    local status, data = sock:receive()
    if not status or not data then
      stdnse.debug1("%s", "Could not receive any data")
      return
    end
这样就可以在变量ret中接收响应了，然后解析该变量，就能提取所需的信息了：
    local output = stdnse.output_table()
    local serial, rf_address, firmware
    for serial,rf_address,firmware in data:gmatch("H:(%u%u%u%d%d%d%d%d%d%d),(%x%x%x%x%x%x),(%d%d%d%d),") do
        output["MAX Serial:"] = serial
        output["RF Address"] = rf_address
        output["Firmware Version"] = firmware
    end
现在，我们就有了一个输出表，其中包含了需要返回给用户的所有信息。正如前面说过的一样，为此只需在action的末尾放上一个“return output”即可。
完整的脚本可以在这里下载。
我们可以测试该脚本，检查是否能够正常工作：
    max-cube/nse » nmap --script maxcube-info.nse -Pn -p 62910 192.168.0.222
    Starting Nmap 7.12SVN ( https://nmap.org ) at 2016-04-08 01:11 CEST
    Nmap scan report for 192.168.0.222
    Host is up (0.0051s latency).
    PORT      STATE SERVICE
    62910/tcp open  unknown
    | maxcube-info: 
    |   MAX Serial:: KMD1016788
    |   RF Address: 099c3e
    |_  Firmware Version: 0113
从上面的结果来看，我们的脚本工作正常。但它可能是非常不可靠的：就像我前面提到的，当端口62910上有一个开放的TCP连接（例如管理软件正在运行或有人通过netcat连接该端口）的时候，Nmap将无法与该端口进行通信，那么这个脚本自然就无法正常工作了。
一些有用的提示：
stdnse模块提供了debug()函数，可以用来在脚本中打印所有的调试输出。为此，至少需要提供一个-d命令行参数。
命令行参数-script-trace能够提供调试NSE脚本所需的更详细的输出结果。
为了在已标识为打开的所有端口上运行该脚本，请在脚本名称前面加上前缀+，例如不要用“-script myscript.nse”，而是使用“-script +
myscript.nse”
**接下来要做什么？**
还有两个大问题需要解决：
**加密密钥来自哪里？**
我认为加密密钥（看起来像一个MD5哈希值）是只有供应商知道的密码串与序列号的哈希值。由于供应商可以区分密文，这意味着每个设备都可能有一个自己的密钥（我只有一个设备可以测试）。
一个不同的论点：我在电路板上的QR码中发现的密钥。这可能表示，密钥在设备的制造期间就已经确定下来了。
加密密钥可以是完全随机的，并且甚至可能不是包括序列号的任何明文的散列值。但这意味着供应商将需要建立一个列表，以便在制造期间将所有的序列号都映射为相应的密钥。
**文件firmware.enc是如何加密的？**
Cube提供了更新功能，也就是可以通过UDP数据包发送一些新版本的固件（记住，这是未经验证的）。
然而，固件文件是不可读的，并且需要在该设备上进行解密，因为管理软件只能解析文件，但无法解密它们。我已经编写了一个简单的解析代码（地址），但固件本身似乎是加密的。
不过，我猜修改固件是一件很酷的事情。
**编写其他Nmap脚本**
正如在文章开头所看到的那样，至少有两种方法可以识别网络上的Cube：多播或单播UDP数据包。然而，这些方法还是需要一点技巧的，因为响应的源端口是静态的（总是23272）。所以，如果你打算在脚本中使用Nmap的comm.exchange()函数的话，那么是无法在函数中获得任何响应的，因为它会使用随机的源端口。
这个问题的解决方案是发送组播数据包，然后使用pcap捕获响应。实际上，Nmap的一些脚本已经可以做到这一点了，例如我就写过一个脚本，专门利用类似的技术来寻找KNX设备。
**结束语**
根据我们分析IoT设备的经验，大部分物联网设备都存在许多常见的安全漏洞，如缺乏身份验证或验证不足等。
此外，在网络上识别这样的设备通常是轻而易举的事情，因为它们具有一些“奇异”的属性，例如响应分组中的固定源端口或者仅允许单个TCP连接等。所以，我希望分析未知设备的研究人员也开始共享他们的研究成果，例如向Nmap等项目贡献代码，以便帮助更多的人。