Report Generated On:Sat Mar 05 09:19:19 PST 2011 Num Description Type
Price Qty
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
101. HD Camcorder Video \$210.00 010
102. Refrigerator Appliance \$850.00 002
103. MP3 Player Audio \$270.00 015
+-----+------------------------------+--------------------------------+
| >   | > Tennis Racket Sports       | > \$190.00 020                 |
| 104 |                              |                                |
+=====+==============================+================================+
| >   | > Laser Printer Office       | > \$475.00 005                 |
| 105 |                              |                                |
+-----+------------------------------+--------------------------------+
## Two Way Communication
Awk can communication to an external process using \"\|&\", which is two
way communication.
The following simple sed example substitutes the word \"Awk\" with \"Sed
and Awk\".
> \$ echo \"Awk is great\" \| sed \'s/Awk/Sed and Awk/\' Sed and Awk is
> great
To understand how the two way communication from Awk works, the
following awk script simulates the above simple example using \"\|&\"
\$ cat two-way.awk BEGIN {
> command = \"sed \'s/Awk/Sed and Awk/\'\" print \"Awk is Great!\" \|&
> command close(command,\"to\");
>
> command \|& getline tmp print tmp; close(command);
}
\$ awk -f two-way.awk Sed and Awk is Great!
In the above example:
-   command = \"sed \'s/Awk/Sed and Awk/\'\" \-- This is the command to
    > which we are going to establish the two way communication from
    > awk. This is a simple sed substitute command, that will replace
    > \"Awk\" with \"Sed and Awk\".
-   print \"Awk is Great!\" \|& command \-- The input to the command.
    > i.e. The input to the sed substitute command is \"Awk is Great!\".
    > The \"\|&\" indicates that it is a two way communication. The
    > input to the command on the right side to the \"\|&\" comes from
    > the left side.
-   close(command,\"to\") - Once the process is executed, you should
    > close the \"to\" process.
-   command \|& getline tmp - Now that the process is completed, it is
    > time to get the output of the process using the getline. The
    > output of the previously executed command will now be stored in
    > the variable \"tmp\".
-   print tmp - This prints the output.
-   close(command) - Finally, close the command.
Two way communication can come-in handy when you rely heavily on output
from external programs.
## System Function
You can use the system built-in function to execute system commands.
Please note that there is a difference between two way communication and
system command.
In \"\|&\", you can pass the output of any awk command as input to an
external command, and you can receive the output from the external
command in your awk program (basically it is two way communication).
Using the system command, you can pass any string as a parameter, which
will get executed exactly as given in the OS command line, and the
output will be returned (which is not same as the two way
communication).
The following are some simple examples of calling pwd and date command
from awk:
\$ awk \'BEGIN { system(\"pwd\") }\'
/home/ramesh
\$ awk \'BEGIN { system(\"date\") }\' Sat Mar 5 09:19:47 PST 2011
When you are executing a long awk program, you might want it to send an
email when the program starts and when it ends. The following example
shows how you can use system command in the BEGIN and END block to send
you an email when it starts and completes.
\$ cat system.awk BEGIN {
system(\"echo \'Started\' \| mail -s \'Program system.awk started..\'
[PI:EMAIL\");](mailto:PI:EMAIL)
}
{
> split(\$2,quantity,\",\");
>
> total=0;
>
> for (x in quantity) total=total+quantity\[x\];
>
> print \"Item\", \$1, \":\", total, \"quantities sold\";
}
END {
system(\"echo \'Completed\' \| mail -s \'Program system.awk
completed..\'
[PI:EMAIL\");](mailto:PI:EMAIL)
}
\$ awk -f system.awk items-sold.txt Item 101 : 2 quantities sold
Item 102 : 0 quantities sold
Item 103 : 10 quantities sold
Item 104 : 2 quantities sold
Item 105 : 10 quantities sold
## Timestamp Functions
These are available only in GAWK.
As you see from the example below, systime() returns the time in POSIX
epoch time, i.e. the number of seconds elapsed since January 1, 1970.
\$ awk \'BEGIN { print systime() }\' 1299345651
The systime function becomes more useful when you use the strftime
function to convert the epoch time to a readable format.
The following example displays the current timestamp in a readable
format using systime and strftime function.
\$ awk \'BEGIN { print strftime(\"%c\",systime()) }\'
Sat 05 Mar 2011 09:21:10 AM PST
The following awk script shows various possible date formats.
\$ cat strftime.awk BEGIN {
> print \"\-\-- basic formats \--\"
>
> print strftime(\"Format 1: %m/%d/%Y %H:%M:
%S\",systime())
> print strftime(\"Format 2: %m/%d/%y %I:%M:%S
%p\",systime())
> print strftime(\"Format 3: %m-%b-%Y %H:%M:
%S\",systime())
> print strftime(\"Format 4: %m-%b-%Y %H:%M:%S
%Z\",systime())
> print strftime(\"Format 5: %a %b %d %H:%M:%S %Z
%Y\",systime())
> print strftime(\"Format 6: %A %B %d %H:%M:%S %Z
%Y\",systime())
> print \"\-\-- quick formats \--\"
>
> print strftime(\"Format 7: %c\",systime()) print strftime(\"Format 8:
> %D\",systime()) print strftime(\"Format 8: %F\",systime()) print
> strftime(\"Format 9: %T\",systime()) print strftime(\"Format 10:
> %x\",systime()) print strftime(\"Format 11: %X\",systime()) print
> \"\-\-- single line format with %t\--\" print strftime(\"%Y %t%B
> %t%d\",systime()) print \"\-\-- multi line format with %n \--\" print
> strftime(\"%Y%n%B%n%d\",systime())
}
\$ awk -f strftime.awk
\-\-- basic formats \--
Format 1: 03/05/2011 09:26:03
Format 2: 03/05/11 09:26:03 AM
Format 3: 03-Mar-2011 09:26:03
Format 4: 03-Mar-2011 09:26:03 PST
Format 5: Sat Mar 05 09:26:03 PST 2011
Format 6: Saturday March 05 09:26:03 PST 2011
\-\-- quick formats \--
Format 7: Sat 05 Mar 2011 09:26:03 AM PST
Format 8: 03/05/11
Format 8: 2011-03-05
Format 9: 09:26:03
Format 10: 03/05/2011
Format 11: 09:26:03 AM
\-\-- single line format with %t\-- 2011 March 05
\-\-- multi line format with %n \-- 2011
March 05
Following are the various time format identifiers you can use in the
strftime function. Please note that all the abbreviations shown below
depend on your locale setting. These examples are shown for English
(en).
#### Basic Time Formats:
+------------+---------------------------------------------------------+
| > **Format | > **Description**                                       |
| > Id       |                                                         |
| entifier** |                                                         |
+============+=========================================================+
| > %m       | > Month in two number format. January is shown as 01    |
+------------+---------------------------------------------------------+
| > %b       | > Month abbreviated. January is shown as Jan            |
+------------+---------------------------------------------------------+
| > %B       | > Month displayed fully. January is shown as January.   |
+------------+---------------------------------------------------------+
| > %d       | > Day in two number format. 4th of the month is shown   |
|            | > as 04.                                                |
+------------+---------------------------------------------------------+
+------------+---------------------------------------------------------+
| > %Y       | > Year in four number format. For example: 2011         |
+============+=========================================================+
| > %y       | > Year in two number format. 2011 is shown as 11.       |
+------------+---------------------------------------------------------+
| > %H       | > Hour in 24 hour format. 1 p.m is shown as 13          |
+------------+---------------------------------------------------------+
| > %I       | > Hour in 12 hour format. 1 p.m is shown as 01.         |
+------------+---------------------------------------------------------+
| > %p       | > Displays AM or PM. Use this along with %I 12 hour     |
|            | > format.                                               |
+------------+---------------------------------------------------------+
| > %M       | > Minute in two character format. 9 minute is shown as  |
|            | > 09.                                                   |
+------------+---------------------------------------------------------+
| > %S       | > Seconds in two character format. 5 seconds is shown   |
|            | > as 05                                                 |
+------------+---------------------------------------------------------+
| > %a       | > Day of the week shown in three character format.      |
|            | > Monday is shown as Mon.                               |
+------------+---------------------------------------------------------+
| > %A       | > Day of the week shown fully. Monday is shown as       |
|            | > Monday.                                               |
+------------+---------------------------------------------------------+
| %Z         | > Time zone. Pacific standard time is shown as PST.     |
+------------+---------------------------------------------------------+
| > %n       | > Displays a new line character                         |
+------------+---------------------------------------------------------+
| > %t       | > Displays a tab character                              |
+------------+---------------------------------------------------------+
> **Quick Time Formats:**
+-----------------------+----------------------------------------------+
| > **Format            | > **Description**                            |
| > Identifier**        |                                              |
+=======================+==============================================+
| > %c                  | > Displays the date in current locale full   |
|                       | > format. For example: Fri 11 Feb 2011       |
|                       | > 02:45:03 AM PST                            |
+-----------------------+----------------------------------------------+
| > %D                  | > Quick date format. Same as %m/%d/%y        |
+-----------------------+----------------------------------------------+
| > %F                  | > Quick date format. Same as %Y-%m-%d        |
+-----------------------+----------------------------------------------+
| > %T                  | > Quick time format. Same as %H:%M:%S        |
+-----------------------+----------------------------------------------+
| > %x                  | > Date format based on your locale.          |
+-----------------------+----------------------------------------------+
| %X                    | > Time format based on your locale.          |
+-----------------------+----------------------------------------------+
## getline Command
As you already know, the body block of an awk script gets executed once
for every line in the input file. You don\'t have any control over it,
as awk does it automatically.
However using the getline command, you can control the reading of lines
from the input-file (or from some other file). Note that after getline
is executed, the awk script sets the value of NF, NR, FNR, and
\$0 built-in variables appropriately.
#### Simple getline
\$ awk -F\",\" \'{getline; print \$0;}\' items.txt
102,Refrigerator,Appliance,850,2
104,Tennis Racket,Sports,190,20 105,Laser Printer,Office,475,5
When you just specify getline in the body block, awk reads the next line
from the input-file. In this example, the 1st statement in the body
block is getline. So, even though awk already read the 1st line from the
input-file, getline reads the next line, as we are explicitly requesting
the next line from the input-file. So, executing \'print \$0\' after
getline makes awk print the 2nd line.
Here is how it works:
-   At the beginning of the body block, before executing any statement,
    > awk reads the 1st line of the items.txt and stores it in \$0
-   getline - we are forcing awk to read the next line from the input
    > file and store it in the built-in \$0 variable.
-   print \$0 - since the 2nd line is read into \$0, print \$0 will
    > print the 2nd line (And not the 1st line).
-   The body block continues in the same way for rest of the lines in
    > the items.txt and prints only the even numbered lines.
#### getline to a variable
You can also get the next line from the input file into a variable
(instead of reading it to \$0).
> **The following example prints only the odd numbered lines.**
\$ awk -F\",\" \'{getline tmp; print \$0;}\' items.txt 101,HD
Camcorder,Video,210,10
103,MP3 Player,Audio,270,15 105,Laser Printer,Office,475,5
Here is how it works:
-   At the beginning of the body block, before executing any statement,
    > awk reads the 1st line of the items.txt and stores it in \$0
-   getline tmp - We are forcing awk to read the next line from the
    > input file and store it in the tmp variable.
-   print \$0 - \$0 still contains the 1st line, as \"getline tmp\"
    > didn\'t overwrite the value of \$0. So, print \$0 will print the
    > 1st line (and not the 2nd line).
-   The body block continues in the same way for rest of the lines in
    > the items.txt and prints only the odd numbered lines.
The following example prints both \$0 and tmp. As you see below, \$0
contains the odd numbered lines and tmp contains the even numbered
lines.
\$ awk -F\",\" \'{getline tmp; print \"\$0-\>\", \$0; print \"tmp-\>\",
tmp;}\' items.txt
\$0-\> 101,HD Camcorder,Video,210,10 tmp-\>
102,Refrigerator,Appliance,850,2
\$0-\> 103,MP3 Player,Audio,270,15
tmp-\> 104,Tennis Racket,Sports,190,20
\$0-\> 105,Laser Printer,Office,475,5 tmp-\> 104,Tennis
Racket,Sports,190,20
#### getline from a different file
The previous two examples read the line from the given input-file
itself. Using getline you can also read lines from a different file
(than the current input-file) as shown below.
Switch back and forth between two files, printing lines from each.
\$ awk -F\",\" \'{print \$0; getline \ awk reads the 1st line of items.txt and stores it in
> \$0
-   print \$0 - Prints the 1st line from items.txt
-   getline \ sold.txt and stores it in \$0.
-   print \$0 - Prints the 1st line from items-sold.txt (not from
    > items.txt)
-   The body block continues in the same way for the rest of the lines
    > in items.txt and items-sold.txt
#### getline from a different file to a variable
Rather than reading both files into \$0, you can also use the \"getline
var\" format to read lines from a different file into a variable.
Switch back and forth between two files, printing lines from each (using
tmp var).
\$ awk -F\",\" \'{print \$0; getline tmp \ FS=\",\";
>
> \"date\" \| getline close(\"date\")
>
> print \"Timestamp:\" \$0
}
{
> if ( \$5 \
> print \"Buy More: Order\", \$2, \"immediately!\" else
print \"Sell More: Give discount on\", \$2, \"immediately!\"
}
\$ awk -f getline1.awk items.txt Timestamp:Sat Mar 5 09:29:22 PST 2011
Sell More: Give discount on HD Camcorder immediately! Buy More: Order
Refrigerator immediately!
Sell More: Give discount on MP3 Player immediately! Sell More: Give
discount on Tennis Racket immediately! Buy More: Order Laser Printer
immediately!
Instead of storing the output in the \$0 variable, you can also store it
in any awk variable (for example: timestamp) as shown below.
\$ cat getline2.awk BEGIN {
> FS=\",\";
>
> \"date\" \| getline timestamp close(\"date\")
>
> print \"Timestamp:\" timestamp
}
{
> if ( \$5 \
> print \"Buy More: Order\", \$2, \"immediately!\" else
print \"Sell More: Give discount on\", \$2, \"immediately!\"
}
\$ awk -f getline2.awk items.txt Timestamp:Sat Mar 5 09:38:22 PST 2011
Sell More: Give discount on HD Camcorder immediately! Buy More: Order
Refrigerator immediately!
Sell More: Give discount on MP3 Player immediately! Sell More: Give
discount on Tennis Racket immediately! Buy More: Order Laser Printer
immediately!
> Knowledge is not one man\'s Entity
>
> Book Hacked by VELOCIRAPTOR