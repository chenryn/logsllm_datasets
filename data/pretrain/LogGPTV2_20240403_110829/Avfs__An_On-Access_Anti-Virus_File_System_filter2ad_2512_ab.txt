to state 0. State 1 does not have a transition for “a,”
(there is no pattern that begins with “aa”). To determine
this failure transition, the ﬁrst character is removed from
the preﬁx, and transitions for the remaining characters
are followed starting from state 0. So, the failure transi-
tion for “a” in state 1 points back to state 1. Similarly,
state 3 does not have a transition for “b” (there is no pat-
tern that begins with “abab”). To compute the failure
transition for “b” in state 3, transitions for “bab” are fol-
lowed from state 0. This failure transition points to state
2. Other failure transitions are set up similarly.
To determine if a text string contains any of the pat-
terns, it is applied as the input to the automaton. The au-
tomaton follows transitions for each character from the
input string until either the end of the string is reached,
or the automaton visits one of the ﬁnal states. To de-
termine which pattern matches when the automaton vis-
its the ﬁnal state s, we simply follow the shortest path
from the start state 0 to s. This automaton is a trie data
structure. Trie data structures are used for fast pattern
matching in input text. In the trie, each node and all of
its children have the same preﬁx. This preﬁx can be re-
trieved by traversing the trie from the root node.
To quickly look up each character read from the input,
ClamAV constructs a trie structure with a 256-element
lookup array for each of the ASCII characters. The
memory usage of ClamAV depends on how deep the trie
is. The deeper the trie, the more nodes are created. Each
node is 1,049 bytes (1KB for the lookup array plus aux-
iliary data). Since the Aho-Corasick algorithm builds an
automaton that goes as deep as the pattern length, the
memory usage of ClamAV’s structure would be unac-
ceptably large because some patterns in the database are
as long as 2KB.
ClamAV modiﬁes the Aho-Corasick algorithm so that
the trie is constructed only to some maximum height,
and all patterns beginning with the same preﬁx are stored
in a linked list under the appropriate trie leaf node.
ClamAV has the further restriction that all pattern lists
must be stored at the same trie level. This restriction sig-
niﬁcantly simpliﬁes trie construction and pattern match-
ing, but due to this restriction, the shortest pattern length
dictates the maximum trie height. Since the shortest pat-
tern is only two bytes long, ClamAV can only build a trie
with two levels. Figure 3 shows a fragment of a trie built
by the ClamAV algorithm.
ClamAV takes the following steps to construct a trie:
0 1 ...
254
255
0 1 ...
254
255
...
0 1 ...
254
255
Leaf Node
Patterns
Fail
...
Figure 3: A fragment of the ClamAV trie structure. Success
transitions are solid lines. Failure transitions are dashed lines.
1. Read the next pattern from the virus database.
2. Traverse the trie to ﬁnd an appropriate node to add
the pattern to, creating new levels as needed until
the maximum trie height is reached (this step sets
up success transitions).
3. Add the pattern to the linked list inside a leaf node.
4. Process all nodes of the trie by depth (level-order
traversal), and set up all failure transitions.
After the trie is constructed, ClamAV is ready to check
whether an input matches any of the patterns in the trie.
For each character read, ClamAV follows the trie tran-
sition and if a leaf node is encountered, all patterns in-
side the linked list are checked using sequential string
comparisons. This process continues until the last input
character is read, or a match is found.
3.2 Oyster Design
Our kernel-based virus scanner module is called by the
ﬁle system to perform scanning every time ﬁles are read
for the ﬁrst time, created, or modiﬁed. Since each ﬁle
contains one or more pages, and there are many ﬁles be-
ing accessed simultaneously, two of the major require-
ments for Oyster were speed and efﬁciency. In addition,
since the number of viruses constantly grows, the virus
scanner must be scalable. Unfortunately, ClamAV did
not prove to be scalable. Its performance gets linearly
worse as the number of patterns increase (see Section
6 for a detailed performance comparison).
In Section
3.2.1 we explain the scalability problems with ClamAV.
In Sections 3.2.2 through 3.2.4 we describe changes we
made to the ClamAV data structures and algorithms. In
Section 3.2.5 we describe the Oyster API for other ker-
nel modules.
3.2.1 Virus Database and Scalability
The primary issue that limits ClamAV’s scalability is
the restriction that all pattern lists must be stored at the
same trie level. This restriction forces the maximum
trie height to be two. With the maximum level of two,
and with each node holding 256 transitions, it would ap-
pear that this data structure should be scalable for up to
2562 = 65536 patterns, but this approximation is correct
only if virus signatures consist of uniformly distributed
random characters. However, virus signatures are nei-
ther random nor uniformly distributed.
Figure 4 shows the distribution of one-character pre-
ﬁxes in the ClamAV’s database. Just 25 out of 256 one-
character preﬁxes account for almost 50% of all preﬁxes.
The distribution of two character preﬁxes is not random
either. There are 6,973 unique two-character preﬁxes.
10% of those preﬁxes account for 57% of all patterns.
1200
1000
800
600
400
200
)
x
i
f
e
r
p
r
a
h
c
1
(
y
c
n
e
u
q
e
r
F
0
0
64
128  
Character (ASCII)
      192
255
Figure 4: A histogram showing the one-character preﬁx
distribution of ClamAV’s database with 19,807 viruses (256
unique preﬁxes).
This high clustering of patterns means that there are
some leaf nodes in the trie that contain linked lists with
a large number of patterns. Since all of these patterns
are scanned sequentially, performance suffers whenever
such a node is traversed during ﬁle scanning. To have
acceptable performance levels with large databases, the
ClamAV data structures and algorithms had to be mod-
iﬁed to minimize the number of times that patterns in
leaf nodes were scanned and to minimize the number of
patterns stored in each list.
Our modiﬁcations to the ClamAV data structures and
algorithms are designed to meet the following three
goals: (1) improve scalability and performance, (2) min-
imize memory usage and support a maximum trie height
restriction so that an upper bound on memory usage can
be set, and (3) allow the administrator to conﬁgure the
system to trade-off memory vs. speed.
3.2.2 Variable Height Trie
To improve performance and scalability for
large
databases, we redesigned the ClamAV data structures to
support trie heights greater than two. With each addi-
tional level, we add an additional 256-way fan-out for
the trie, thus reducing the probability that leaf nodes will
be scanned, which in turn improves performance. Pat-
terns that are shorter than the maximum trie height or
contain a wildcard character at a position less than the
maximum trie height must be added to the linked lists in
the intermediate trie nodes. Such nodes can contain both
transitions to the lower level as well as patterns. We will
use “?” to denote a single wildcard character. Figure 5
shows a trie with a height of four (plus leaf nodes). The
trie contains patterns beginning with ASCII characters
h254; 0; 0; 79i (node 8). It also contains patterns that be-
gin with h0; 0; ?i (node 3), as well as patterns beginning
with h0; 0; 123; 255i (node 7).
Root
0 1 ...
254
255
L0
Node1
0 1 ...
254
255
Node3
0 1 ...
123
...
L1
L2
0 1 ...
0 1 ...
Node2
255
254
Node4
255
254
Patterns
Node5
0 1 ...
254
255
L3
0 1 ...
79
Node7
Leaf Node
Patterns
Node6
...
Node8
Leaf Node
Patterns
Figure 5: A trie with four levels (only success transitions are
shown). Patterns beginning with characters h0
?i are stored
inside node 3, which contains both patterns and transitions.
0
;
;
The trie depicted in Figure 5 has two problems. The
If a pattern can be
ﬁrst problem is memory usage.
uniquely identiﬁed by a two-character preﬁx, then there
is no need to store it at the maximum trie height level
since a lot of memory would be used due to the large
node size (each node is over 1KB). Our solution stores
the pattern at the lowest possible level as soon as a
unique preﬁx for this pattern is found.
The second problem is more involved. Suppose we
have two patterns h0; 0; ?; 1i and h254; 0; 0; 79; 10i. The
ﬁrst pattern is stored inside node 3 in Figure 5. This
pattern cannot be stored at a higher level because a
transition over the wildcard is not unique. The sec-
ond pattern is stored inside node 8. Now suppose that
we have an input string h254; 0; 0; 79; 1i. The automa-
ton will start transitioning through the right hand side
of the trie: root node, node 2, node 4, node 6, and ﬁ-
nally node 8. At this point, the last input character “1”
will be matched against the last character of the pat-
tern h254; 0; 0; 79; 10i, and the match will fail. How-
ever, while traversing the right hand side of the trie,
the characters h0; 0; 79; 1i match the pattern stored in-
side node 3, but we never visited this node to detect the
match. More formally, if we have two patterns with
unique preﬁxes P1[1::m] and P2[1::n]; m > n, and
P1[j::k] = P2[1::n], where j (cid:21) 2 and k (cid:20) m, then
the patterns with preﬁx P2 must be scanned as soon as
character k is read. We call this situation a collision.
...
a
...
...
a
...
...
a
...c
...
a
...
...
a
...c
...
a
...
...
a
...c
...
a
b
...
Node
aax,aby,cdz
ax,by
aaax,aaby,acdz
Node
Node
dz
Node
ax
Node
by
Node
Leaf Node
acdz
...
a
b
...
Leaf Node
acdz
Leaf Node
aaax
LeafNode
aaby
(a) Step 1
(b) Step 2
(c) Step 3
(d) Step 4
(e) Step 5
Figure 6: Operation of the addpatterns function.
3.2.3 Improving Memory Usage
To store patterns at the lowest possible level, we modi-
ﬁed the ClamAV trie construction algorithm. Instead of
storing the patterns in the trie as soon as they are read
from the database, we store them in an array. We sort
this array lexicographically by comparing pattern pre-
ﬁxes of length equal to the maximum trie height. After
the patterns are sorted, each pattern is assigned an ID
that is equal to the pattern’s offset in the sorted pattern
array. This sorting enables Oyster to conveniently iden-
tify all patterns with some unique preﬁx P by specifying
start and end offsets into the sorted array.
We then proceed with the trie construction by call-
ing our addpatterns(node, start offset,
end offset) function, where node is the current
node in the trie, start offset and end offset are offsets
into the sorted pattern array that identify the range of pat-
terns to add to the node. To begin trie construction, we
call addpatterns, passing it the root node and the en-
tire range of patterns as arguments. The addpatterns
function operates as follows:
1. If the maximum trie height is reached, add all pat-
terns in the range to the current node and return.
2. If the range contains only one pattern, add this pat-
tern to the current node, and return.
3. Add to the current node all patterns of length equal
to the current height and all patterns that have a “?”
character at the current height. If there are no more
patterns left, return.
4. Otherwise, the range still contains patterns. For
each character 0 (cid:20) i (cid:20) 255, ﬁnd the range of pat-
terns that have character i in the position equal to
the current height, create transitions for i inside the
current node, and recursively call the function with
the new range and new node. The maximum re-
cursion depth is equal to the maximum trie height.
The kernel has a limited stack size, but because our
recursive function is bounded by a small maximum