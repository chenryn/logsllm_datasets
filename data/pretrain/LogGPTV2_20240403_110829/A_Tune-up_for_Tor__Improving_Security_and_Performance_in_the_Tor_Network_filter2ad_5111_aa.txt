title:A Tune-up for Tor: Improving Security and Performance in the Tor Network
author:Robin Snader and
Nikita Borisov
A Tune-up for Tor: Improving Security and Performance in the Tor Network
Robin Snader
Department of Computer Science
University of Illinois at Urbana–Champaign
PI:EMAIL
Nikita Borisov
Department of Electrical and Computer Engineering
University of Illinois at Urbana–Champaign
PI:EMAIL
Abstract
The Tor anonymous communication network uses self-
reported bandwidth values to select routers for building
tunnels. Since tunnels are allocated in proportion to this
bandwidth, this allows a malicious router operator to at-
tract tunnels for compromise. Since the metric used is in-
sensitive to relative load, it does not adequately respond to
changing conditions and hence produces unreliable perfor-
mance, driving many users away. We propose an oppor-
tunistic bandwidth measurement algorithm to replace self-
reported values and address both of these problems. We
also propose a mechanisms to let users tune Tor perfor-
mance to achieve higher performance or higher anonymity.
Our mechanism effectively blends the trafﬁc from users of
different preferences, making partitioning attacks difﬁcult.
We implemented the opportunistic measurement and tun-
able performance extensions and examined their perfor-
mance both analytically and in the real Tor network. Our
results show that users can get dramatic increases in either
performance or anonymity with little to no sacriﬁce in the
other metric, or a more modest improvement in both. Our
mechanisms are also invulnerable to the previously pub-
lished low-resource attacks on Tor.
1. Introduction
Anonymous communication on the Internet seems ﬁ-
nally within reach. Though an initial commercial deploy-
ment of Onion Routing [27], The Freedom Network [2],
was in the end shut down, a volunteer-run replacement net-
work using the second-generation onion routing design —
Tor [8] — has been operational for several years and has
about a thousand nodes and a hundred thousand users [20].
Tor is used by an increasing variety of parties: reporters
communicating with sources, dissidents and embassies hid-
ing their activities from local governments [14], people try-
ing to get around geographic restrictions [13], and more.
However, for the average user, the performance penalty in-
troduced by Tor is still prohibitively high for everyday use.
At the same time, the popularity of Tor has lead to develop-
ment of a number of attacks on the system.
Contributing to both problems is the Tor load-balancing
algorithm. Tor routers self-report their bandwidth capabili-
ties, and clients choose them in proportion to their fraction
of the overall Tor capacity. This enables a low-resource at-
tack, where routers misreport their bandwidth to be the ar-
tiﬁcially high and thereby capture a large fraction of tun-
nels [3]. Additionally, due to constantly changing condi-
tions, self-reported bandwidth is frequently an overestimate
of the actual node capacity, leading to unreliable perfor-
mance delivered to Tor users.
We propose to replace the Tor mechanism with an op-
portunistic bandwidth measurement mechanism. Due to
the complete topology of the Tor network, each router will
have a chance to interact with most other routers and thus
observe their performance empirically. We show through
experiments that this mechanism is a suitable replacement
for self-reported bandwidth in that it accurately predicts the
performance of the routers and is signiﬁcantly less suscepti-
ble to low-resource attacks. Also, since over-utilized routers
will show decreased performance, it also greatly reduces the
long tail of the transfer time distribution, making the worst
case signiﬁcantly better.
We also propose a user-tunable mechanism for selecting
routers based on their bandwidth capabilities. Rather than
trying to ﬁnd a compromise that satisﬁes both those users
who desire strong anonymity protection and those for whom
performance is more of a priority, as is done in the current
Tor design, we suggest letting users express a preference in
the tradeoff between anonymity and performance and make
router selections accordingly. We design a mechanism that
effectively blends the trafﬁc of users with different prefer-
ences, making partitioning attacks difﬁcult.
Our experiments with Tunable Tor show that users can
achieve great improvements in performance without sacri-
ﬁcing much anonymity, or signiﬁcantly increase anonymity
protection without any loss in performance. They also al-
low for moderate improvements in both, which is what we
expect to be chosen by most users. This improved ﬂexi-
bility should make Tor palatable to a wider range of users,
and thus increase anonymity for everyone due to a larger
community [7].
The remainder of this paper is structured as follows: Sec-
tion 2 examines the current implementation and points out
two important weaknesses. Section 3 analyzes these weak-
nesses and proposes improvements to Tor to address them;
it also evaluates these changes in isolation. Section 4 eval-
uates their performance in the real Tor network. Section 5
discusses some related work. Finally, Section 6 summa-
rizes our conclusions and examines future directions for this
work.
2. Weaknesses in the implementation of Tor
We ﬁrst present a high-level overview of the Tor network
design and then highlight two important problems in the
load-balancing algorithm. Interested readers can ﬁnd more
details about the Tor protocol in [8].
2.1. Tor design
The Tor network is based on an onion-routing [27] de-
sign, where trafﬁc is forwarded through several routers and
multiply encrypted, with each router removing one layer of
the encryption. The path through the network — a tunnel —
is constructed in a telescoping fashion, so that each router
knows only the previous and the next router in the path.
In particular, the ﬁrst (entry) router knows the source of
the tunnel, but not its destination, and the last (exit) router
knows the destination but not the source. However, if both
routers cooperate, they can use trafﬁc analysis to link com-
munication over the same tunnel; hence there is little beneﬁt
to using long paths and in practice Tor path length is set to
3.1
Tor routers are registered with a directory service. Each
router reports its IP address, public key, policies about what
trafﬁc it will accept, and a bandwidth value that is deter-
mined by monitoring the peak bandwidth achieved by the
1There are some small beneﬁts to using 3 rather than 2, a full discussion
of which is beyond the scope of this paper.
router over a period of time. The directory service also
maintains statistics about the uptime of each router. The
Tor path construction algorithm, executed by the Tor client,
will ﬁrst select all routers that have an acceptable forward-
ing policy (e.g. many routers are unwilling to serve as exit
routers) and then choose a random router out of the list, with
the selection weighted by the reported bandwidth. This way,
trafﬁc is roughly balanced across Tor nodes in proportion to
the bandwidth they have available. To prevent a router from
reporting an unreasonably high bandwidth, an upper bound
(currently 1.5 MB/s2) is enforced.
To defend against the predecessor attack [30], recent
versions have introduced guard nodes, ﬁrst described by
Wright et al. [31]. Each client picks a set of three nodes
that will be used as entry routers for all of its tunnels. Guard
nodes are chosen among stable nodes, i.e. those with a high
uptime, that have a bandwidth higher than the median band-
width reported by all Tor nodes.
Fundamentally, Tor forms an overlay network for for-
warding trafﬁc, and thus needs to address the performance
issues associated with this task. It also has an extra require-
ment of preserving anonymity, making this task that much
more difﬁcult. We next examine two shortcomings of the
Tor load-balancing scheme that motivate our work.
2.2. Advertised Bandwidth
The bandwidth values used in the load balancing algo-
rithm are self-reported by each node and are not veriﬁed in
any way. This leaves the door open to attacks where ma-
licious nodes can report a higher-than-actual bandwidth so
that a larger fraction of tunnels are routed through them.
Despite the enforced upper bound, the attack can be quite
successful: Bauer et al. [3] report that a small fraction of at-
tacker nodes can attain the ﬁrst and last node positions (thus
violating anonymity) on nearly half the tunnels.
Even when nodes are honest, the reported values can
be a poor predictor of the available bandwidth at a node
due to changing network conditions and other factors. This
makes Tor performance highly variable. Our studies of Tor
(see Figure 5) shows that, although the Tor network pro-
vides reasonable bandwidth on most connections, the per-
formance curve has a long tail. In particular, while the me-
dian bandwidth is 29 KB/s, the 90th percentile bandwidth
is less than a quarter of that, at 6 KB/s, and there is a sig-
niﬁcant fraction of tunnels which perform still worse. This
presents a poor user experience, especially to users who are
browsing the web (the majority of connections in Tor [17]),
with connections frequently slowing down.
2On August 30, 2007, the Tor project released a version of Tor that
changes this upper bound to 10 MB/s, increasing network utilization at the
cost of increased vulnerability to low-resource routing attacks.
2.3. User Heterogeneity
The Tor load balancing algorithm is a compromise be-
tween performance and anonymity. Users who are highly
anonymity sensitive (e.g. dissidents) might wish to dis-
tribute all of the tunnels uniformly across all routers, to
prevent (reportedly) high-bandwidth routers from having a
higher chance of compromising their trafﬁc. Users who are
less privacy-sensitive and are using the network for casual
web browsing (e.g. users who want to hide their browsing
activities from their neighbors) might value performance
more and would be more willing to use high-bandwidth
routers more often. By aiming to achieve a common de-
fault, the Tor router selection algorithm sacriﬁces the needs
of both of these classes.3
3. Proposed Improvements
To address these issues, the fundamental questions of an
overlay network must be readdressed: ﬁrst, how is the per-
formance of a router measured; and second, given a list of
measured routers, how is the route selected. In this work,
our goal is to improve the bandwidth available to a Tor tun-
nel, rather than other performance characteristics such as
latency or jitter. Our reason for focusing on bandwidth is
threefold. First, bandwidth is already a key factor in Tor
design. Second, bandwidth is typically a property of a node
rather than a link between two nodes, since the bottleneck is
likely to be close to the node rather than in the intermediate
network [1, 16]. This makes measurements and optimiza-
tions much more feasible than for link properties, since for
N nodes there are O(N 2) links. Additionally, a scheme
that optimizes latency is bound to leak at least some infor-
mation about the starting point of a path, whereas it is possi-
ble to optimize bandwidth without such information leaks.
Finally, the overwhelming majority of Tor trafﬁc, by both
data volume and number of connections, is from web and
peer-to-peer trafﬁc [17] — applications that are relatively
insensitive to latency and jitter.
3.1. Router Measurement
A simple way to measure the available bandwidth at a
router is to perform a probe. Though crude, this mechanism
is likely to present the most accurate picture of the perfor-
mance of a node. Of course, it is unrealistic to expect all
nodes to probe all routers, since that will generate an unrea-
sonable amount of extra trafﬁc and create a negative impact
on overall Tor performance. A single prober, on the other
3In fact, a recent discussion on the or-dev mailing list about raising
the upper bound of reported bandwidth hit precisely the stumbling block
of not being sure which of these two groups to serve [6]; the determination
was eventually made to signiﬁcantly raise the limit.
hand, will serve as an unnecessary point of failure. Addi-
tionally, if probes can be identiﬁed, malicious routers may
choose to devote more of their resources to probes to gain a
higher rating.
We propose instead that opportunistic monitoring be
used to measure bandwidth capacity; that is, each router
in the Tor network keeps track the peak bandwidth it has
recently seen for each of its peers. In practice, Tor routers
communicate with a large set of routers over a short period
of time — we observed up to 800 routers contacted within a
single day — and thus can accumulate a large set of statis-
tics. By aggregating statistics across multiple Tor routers, a
client can obtain an even more accurate picture of the net-
work, and at the same time be less susceptible to attacks.
We propose that the client use the median of the collected
bandwidth values, since it is signiﬁcantly harder to inﬂu-
ence the median than other aggregation functions, such as
mean, maximum, minimum, etc. The directory servers that
a client uses to learn about other nodes are good candidates
for providing this information, as they are already used to
distribute similar information securely.
This approach has the additional advantage of being dy-
namic: if a router’s available bandwidth ﬂuctuates over time
(e.g. a router located at the university is likely to have more
available bandwidth during the summer and on weekends),
this will be noticed by its peers and it will be used more
or less frequently accordingly. To some extent, dynamic
measurements can also help balance load across different
routers, since as a router gets overloaded, its measurements
will suffer and it will start getting used less frequently. In
the extreme case, such dynamic load balancing can cause
route oscillations [11], but the Tor bandwidth measurement
algorithms use intervals of ten seconds, providing sufﬁ-
cient damping that we do not anticipate that this will be a
problem. A full investigation of the load balancing behav-
ior of dynamic router measurements, as well as our other
proposed improvements, requires a complex whole-system
simulation or analysis and thus is left to future work.
3.1.1 Evaluation of Predictive Power
In order to determine the predictive power of the various
methods of bandwidth assessment, we ran a large number of
tests (approximately 22 000) where a 1 MB ﬁle was fetched
over HTTP via the Tor network. In order to eliminate con-
founding factors, both the entry node and the exit node were
ﬁxed hosts near the ﬁle host; the middle hop was selected
randomly from all Tor active at the time the ﬁle fetch began.
The three methods of bandwidth assessment are:
1. Advertised bandwidth:
the bandwidth prediction is
simply the advertised bandwidth of the host under
test. As Figure 1(a) shows, this method of assess-
ment gives a systematic overestimation of the available
bandwidth, since the capacity is necessarily shared
among all tunnels using that host. The log-log corre-
lation between predicted and actual bandwidth in this
case is approximately 0.57.
2. Opportunistic bandwidth measurement: as described
above, a Tor router was modiﬁed to record the maxi-
mum bandwidth seen recently4, and this becomes the
predicted bandwidth.
It is to be expected that this
method will become more accurate as data from mul-
tiple sources in the network is combined. We see in
Figure 1(b) that this method has a much smaller sys-
tematic bias than that seen in the previous method. It
gives a log-log correlation of 0.48.
3. Active bandwidth probing: ﬁnally, we tested the pre-
dictive power of active bandwidth probing by using all
previous tests from a given host to estimate the band-
width available. Note that this is signiﬁcantly different
from the second method described above: because the
exact ﬁle size and how long it took to fetch are known
in this case, an accurate assessment of bandwidth can
be achieved. In the previous method, only a rough es-
timate of the bytes-per-second sent during an obser-
vation window is available; if only a small amount of
data was requested, the available bandwidth will be un-
avoidably underestimated. The predicted bandwidth
then becomes the simple mean of past observations.
As expected, Figure 1(c) shows that this method has
the best predictive power with a log-log correlation of
0.63.
These evaluations show several things: ﬁrst, as expected,
active probing provides the most accurate prediction of
available bandwidth, even though it is certainly not prac-
tical for other reasons. Second, bandwidth advertisements
correlate relatively strongly to available bandwidth, but
they exhibit a strong systematic bias toward overestimation.
Finally, opportunistic bandwidth measurements provide a
strong predictor of actual bandwidth without the unaccept-
able overhead of active probing or the bias and vulnerability
to malicious nodes of using bandwidth advertisements.
In the following section we will examine how this band-
width measurement can be used to further harden Tor
against malicious routers and simultaneously improve the
user experience.
3.2. Variable Router Selection Algorithm
In this section, we propose several modiﬁcations to the
router selection algorithm used by Tor in order to decrease
4This is measured according to the existing Tor bandwidth tracking
functionality; by default this is the smaller of the single-direction maxi-
mum bandwidths over (potentially different) 10 second intervals over the
past day.
)
s
/
B
i
t
(
h
d
w
d
n
a
B
d
e
v
r
e
s
b
O
1M
100k
10k
1k
1k
Accuracy of Bandwidth Advertisements
Advertised capacity prediction (r=0.569)
10k
100k
Predicted Bandwidth (B/s)
1M
(a) Advertised vs. actual bandwidth (r = 0.57)
Accuracy of Opportunistic bandwidth Prediction
1M
Opportunistic prediction (r=0.481)
)
s
/
B
i
(
h
t
d
w
d
n
a
B
d
e
v
r
e
s
b
O
100k
10k
1k
1k
10k
100k
Predicted Bandwidth (B/s)
1M
(b) Opportunistically probed vs. actual bandwidth (r = 0.48)
)
s
/
B
i
(
h
t
d
w
d
n
a