      10.times do |value|
      ticketNum=20
      buyTicket(ticketNum)
      sleep 0.01
      end
  end
  sleep 1
  ticket1.join
  ticket2.join
  ```
  以上代码执行结果为：
  ```
  Synchronize Thread
  you have successfully bought 15 tickets
  you have successfully bought 20 tickets
  you have successfully bought 15 tickets
  you have successfully bought 20 tickets
  you have successfully bought 15 tickets
  you have successfully bought 20 tickets
  you have successfully bought 15 tickets
  you have successfully bought 20 tickets
  you have successfully bought 15 tickets
  you have successfully bought 20 tickets
  you have successfully bought 15 tickets
  sorry,no enough tickets
  sorry,no enough tickets
  sorry,no enough tickets
  sorry,no enough tickets
  sorry,no enough tickets
  sorry,no enough tickets
  sorry,no enough tickets
  sorry,no enough tickets
  sorry,no enough tickets
  ```
  除了使用 `lock` 锁定变量，还可以使用 `try_lock` 锁定变量，还可以使用 `Mutex.synchronize` 同步对某一个变量的访问。
- 监管数据交接的 Queue 类实现线程同步
  Queue 类就是表示一个支持线程的队列，能够同步对队列末尾进行访问。不同的线程可以使用统一个队列，但是不用担心这个队列中的数据是否能够同步，另外使用 SizedQueue 类能够限制队列的长度
  SizedQueue 类能够非常便捷的帮助我们开发线程同步的应用程序，因为只要加入到这个队列中，就不用关心线程的同步问题。
  经典的生产者消费者问题：
  ```ruby
  require "thread"
  puts "SizedQuee Test"
  queue = Queue.new
  producer = Thread.new do
      10.times do |i|
            sleep rand(i) # 让线程睡眠一段时间
            queue << i
            puts "#{i} produced"
      end
  end
  consumer = Thread.new do
      10.times do |i|
            value = queue.pop
            sleep rand(i/2)
            puts "consumed #{value}"
      end
  end
  consumer.join
  ```
**线程变量**
线程可以有其私有变量，线程的私有变量在线程创建的时候写入线程。可以被线程范围内使用，但是不能被线程外部进行共享。
但是有时候，线程的局部变量需要别别的线程或者主线程访问怎么办？ruby 当中提供了允许通过名字来创建线程变量，类似的把线程看做 hash 式的散列表。通过 `[]=` 写入并通过 `[]` 读出数据。我们来看一下下面的代码：
```ruby
count = 0
arr = []
10.times do |i|
   arr[i] = Thread.new {
      sleep(rand(0)/10.0)
      Thread.current["mycount"] = count
      count += 1
   }
end
arr.each {|t| t.join; print t["mycount"], ", " }
puts "count = #{count}"
```
以上代码运行输出结果为：
```
8, 0, 3, 7, 2, 1, 6, 5, 4, 9, count = 10
```
主线程等待子线程执行完成，然后分别输出每个值。
**线程优先级**
线程的优先级是影响线程的调度的主要因素。其他因素包括占用 CPU 的执行时间长短，线程分组调度等等。
可以使用 `Thread.priority` 方法得到线程的优先级和使用 `Thread.priority=` 方法来调整线程的优先级。
线程的优先级默认为 0 。优先级较高的执行的要快。
一个 `Thread` 可以访问自己作用域内的所有数据，但如果有需要在某个线程内访问其他线程的数据应该怎么做呢？ `Thread` 类提供了线程数据互相访问的方法，你可以简单的把一个线程作为一个 `Hash` 表，可以在任何线程内使用 `[]=` 写入数据，使用 `[]` 读出数据。
```ruby
athr = Thread.new { Thread.current["name"] = "Thread A"; Thread.stop }
bthr = Thread.new { Thread.current["name"] = "Thread B"; Thread.stop }
cthr = Thread.new { Thread.current["name"] = "Thread C"; Thread.stop }
Thread.list.each {|x| puts "#{x.inspect}: #{x["name"]}" }
```
可以看到，把线程作为一个 `Hash` 表，使用 `[]` 和 `[]=` 方法，我们实现了线程之间的数据共享。
---
# 线程互斥
Mutex(Mutal Exclusion = 互斥锁)是一种用于多线程编程中，防止两条线程同时对同一公共资源（比如全局变量）进行读写的机制。
**不使用 Mutax 的实例**
```ruby
require 'thread'
count1 = count2 = 0
difference = 0
counter = Thread.new do
   loop do
      count1 += 1
      count2 += 1
   end
end
spy = Thread.new do
   loop do
      difference += (count1 - count2).abs
   end
end
sleep 1
puts "count1 :  #{count1}"
puts "count2 :  #{count2}"
puts "difference : #{difference}"
```
以上实例运行输出结果为：
```
count1 :  9712487
count2 :  12501239
difference : 0
```
**使用 Mutax 的实例**
```ruby
require 'thread'
mutex = Mutex.new
count1 = count2 = 0
difference = 0
counter = Thread.new do
   loop do
      mutex.synchronize do
         count1 += 1
         count2 += 1
      end
    end
end
spy = Thread.new do
   loop do
       mutex.synchronize do
          difference += (count1 - count2).abs
       end
   end
end
sleep 1
mutex.lock
puts "count1 :  #{count1}"
puts "count2 :  #{count2}"
puts "difference : #{difference}"
```
以上实例运行输出结果为：
```
count1 :  1336406
count2 :  1336406
difference : 0
```
**死锁**
两个以上的运算单元，双方都在等待对方停止运行，以获取系统资源，但是没有一方提前退出时，这种状况，就称为死锁。
例如，一个进程 p1占用了显示器，同时又必须使用打印机，而打印机被进程 p2 占用，p2 又必须使用显示器，这样就形成了死锁。
当我们在使用 Mutex 对象时需要注意线程死锁。
```ruby
require 'thread'
mutex = Mutex.new
cv = ConditionVariable.new
a = Thread.new {
   mutex.synchronize {
      puts "A: I have critical section, but will wait for cv"
      cv.wait(mutex)
      puts "A: I have critical section again! I rule!"
   }
}
puts "(Later, back at the ranch...)"
b = Thread.new {
   mutex.synchronize {
      puts "B: Now I am critical, but am done with cv"
      cv.signal
      puts "B: I am still critical, finishing up"
   }
}
a.join
b.join
```
以上实例输出结果为：
```
A: I have critical section, but will wait for cv
(Later, back at the ranch...)
B: Now I am critical, but am done with cv
B: I am still critical, finishing up
A: I have critical section again! I rule!
```
---
Web 应用大多是 IO 密集型的，利用 Ruby 多进程 + 多线程模型将能大幅提升系统吞吐量。其原因在于：当 Ruby 某个线程处于 IO Block 状态时，其它的线程还可以继续执行。但由于存在 Ruby GIL (Global Interpreter Lock)，MRI Ruby 并不能真正利用多线程进行并行计算。JRuby 去除了 GIL，是真正意义的多线程，既能应付 IO Block，也能充分利用多核 CPU 加快整体运算速度。
# Ruby 多线程和 IO Block
先看下面一段代码
```ruby
def func1
  puts "sleep 3 seconds in func1\n"
  sleep(3)
end
def func2
  puts "sleep 2 seconds in func2\n"
  sleep(2)
end
def func3
  puts "sleep 5 seconds in func3\n"
  sleep(5)