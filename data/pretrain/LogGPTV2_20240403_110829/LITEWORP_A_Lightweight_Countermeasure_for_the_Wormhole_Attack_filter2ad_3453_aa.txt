title:LITEWORP: A Lightweight Countermeasure for the Wormhole Attack
in Multihop Wireless Networks
author:Issa M. Khalil and
Saurabh Bagchi and
Ness B. Shroff
LITEWORP: A Lightweight Countermeasure for the Wormhole Attack in Multihop 
Wireless Networks 
Issa Khalil, Saurabh Bagchi, Ness B. Shroff 
Dependable Computing Systems Lab and Center for Wireless Systems and Applications (CWSA)  
School of Electrical & Computer Engineering, Purdue University 
465 Northwestern Avenue, West Lafayette, IN 47907. 
Email: {ikhalil, sbagchi, shroff}@purdue.edu Ph. 765-494-3362 Contact author: Saurabh Bagchi 
Abstract 
In multihop wireless systems, such as ad-hoc and sensor networks, the need for cooperation among nodes to 
relay each other’s packets exposes them to a wide range of security attacks. A particularly devastating attack is 
known as the wormhole attack, where a malicious node records control and data traffic at one location and tunnels 
it  to  a  colluding  node,  which  replays  it  locally.  This  can  have  an  adverse  effect  in  route  establishment  by 
preventing  nodes  from  discovering  routes  that  are  more  than  two  hops  away.  In  this  paper,  we  present  a 
lightweight  countermeasure  for  the  wormhole  attack,  called  LITEWORP,  which  does  not  require  specialized 
hardware. LITEWORP is particularly suitable for resource-constrained multihop wireless networks, such as sensor 
networks. In this paper, we present a detailed description of LITEWORP for static networks, and discuss extensions 
to mobile networks. Our solution allows detection of the wormhole, followed by isolation of the malicious nodes. 
Simulation results show that every wormhole is detected and isolated within a very short period of time over a 
large  range  of  scenarios.  The  results  also  show  that  the  fraction  of  packets  lost  due  to  the  wormhole  when 
LITEWORP is applied is negligible compared to the loss encountered when the method is not applied. 
Keywords:  Wireless  sensor  and  ad-hoc  networks,  neighbor  watch,  wormhole  attack,  compromised  node 
detection, compromised node isolation. 
1 
Introduction 
Ad-hoc and sensor networks are emerging as a promising platform for a variety of application areas in both 
military  and  civilian  domains.  These  networks  are  especially  attractive  for  scenarios  where  it  is  infeasible  or 
expensive to deploy significant networking infrastructure. Initial research efforts have focused on the realization 
and practical implementation of these networks by focusing on their functional attributes such as data aggregation 
1
protocols and routing protocols. However, the open nature of the wireless communication channels, the lack of 
infrastructure, the fast deployment practices,  and the hostile environments where they  may be deployed,  make 
them  vulnerable  to  a  wide  range  of  security  attacks.  These  attacks  could  involve  eavesdropping,  message 
tampering, or identity spoofing, that have been addressed by customized cryptographic primitives in the wired 
domain. Alternately, the attacks may be targeted to the control or the data traffic in wireless networks, such as the 
blackhole  attack  [12]  and  the  rushing  attack  [16].  Since  many  multihop  wireless  environments  are  resource-
constrained  (e.g.,  bandwidth,  power,  or  processing),  providing  detection  and  countermeasures  to  such  attacks 
often turn out to be more challenging than in wired networks. 
A particularly severe security attack, called the wormhole attack, has recently been introduced in the context of 
ad-hoc networks [12], [14], [15]. During the attack, a malicious node captures packets from one location in the 
network, and “tunnels” them to another malicious node at a distant point, which replays them locally. The tunnel 
can be established in many different ways, such as through an out-of-band hidden channel (e.g., a wired link), 
packet encapsulation, or high powered transmission. This tunnel makes the tunneled packet arrive either sooner or 
with lesser number of hops compared to the packets transmitted over normal multihop routes. This creates the 
illusion that the two end points of the tunnel are very close to each other. A wormhole tunnel can actually be 
useful if used for forwarding all the packets. However, in its malicious incarnation, it is used by attacking nodes 
to subvert the correct operation of ad-hoc and sensor network routing protocols. The two malicious end points of 
the  tunnel  may  use  it  to  pass  routing  traffic  to  attract  routes  through  them.  They  can  then  launch  a  variety  of 
attacks  against  the  data  traffic  flowing  on  the  wormhole,  such  as  selectively  dropping  the  data  packets.  The 
wormhole  attack  can  affect  network  routing,  data  aggregation  and  clustering  protocols,  and  location-based 
wireless  security  systems.  Finally,  it  is  worth  noting  that  the  wormhole  attack  can  be  launched  even  without 
having access to any cryptographic keys or compromising any legitimate node in the network.  
In this paper, we present a simple lightweight protocol, called LITEWORP, to detect and mitigate wormhole 
attacks  in  ad-hoc  and  sensor  wireless  networks.  LITEWORP  uses  secure  two-hop  neighbor  discovery  and  local 
monitoring  of  control  traffic  to  detect  nodes  involved  in  the  wormhole  attack.  It  provides  a  countermeasure 
technique  that  isolates  the  malicious  nodes  from  the  network  thereby  removing  their  ability  to  cause  future 
damage. We provide a novel taxonomy of the different ways in which wormhole attacks can be launched and 
2
show how LITEWORP can be used to handle all but one of these attack modes. LITEWORP has several features that 
make it especially suitable for resource-constrained wireless environments, such as sensor networks. LITEWORP 
does  not  require  any  specialized  hardware,  such  as  directional  antennas  or  fine  granularity  clocks.  It  does  not 
require any time synchronization between the nodes in the network. It does not increase the size of the network 
traffic,  and  incurs  negligible  bandwidth  overhead,  only  at  initialization  and  on  detection  of  a  wormhole.  The 
lightweight  feature  of  LITEWORP  is  in  contrast  to  other  countermeasures  for  wormhole  attacks,  which  have 
requirements (e.g. directional antennas [15],  highly accurate time measurement [28], and clock synchronization 
[14]) that often make them impractical for sensor networks and infeasible for many classes of ad-hoc networks.  
In this paper, we present a coverage analysis of LITEWORP and show the relation between the number of nodes 
required for local monitoring, called the guards, and the probability of false or missed detection. Also, we build a 
simulation  model  for  LITEWORP  using  the  network  simulator  ns-2  and  perform  comparative  evaluation  of  a 
network  with  and  without  the  technique.  The  results  show  that  LITEWORP  can  achieve  100%  detection  of  the 
wormholes  for  a  wide  range  of  network  densities.  They  also  show  that  detection  and  isolation  of  the  nodes 
involved  in  the  wormhole  can  be  achieved  in  a  negligible  time  after  the  attack  starts,  and  that  the  cumulative 
number  of  lost  packets  and  malicious  routes  established  do  not  grow  because  wormholes  are  identified  and 
isolated.  Finally,  we  provide  analysis  for  the  storage,  computational,  and  bandwidth  overheads  incurred  by 
LITEWORP, and demonstrate its lightweight nature. 
The  rest  of  the  paper  is  organized  as  follows.  Section  2  presents  related  work  in  the  field  of  wormhole 
detection and mitigation. Section 3 describes a taxonomy of the wormhole attack modes. Section 4 describes the 
LITEWORP  protocol  and  its  defenses  against  the  various  modes  of  the  wormhole  attack.  Section  5  presents 
coverage and cost analysis of LITEWORP. Section 6 presents simulation results. Finally, Section 7 discusses some 
extensions and concludes the paper. 
2  Related Work 
The wormhole attack in wireless networks was independently introduced by Dahill [1], Papadimitratos [4], and 
Hu [14]. Initial proposals to thwart wormhole attacks suggest using secure modulation of bits over the wireless 
channel that can be demodulated only by authorized nodes. This only defends against outside attackers who do 
3
not possess cryptographic keys.  A similar approach called RF watermarking [24] modulates the radio waveform 
in a specific pattern and any change to the pattern is used as the trigger for detection. This mechanism will fail to 
prevent  a  wormhole  if  the  waveform  is  accurately  captured  at  the  receiving  end  of  the  wormhole  and  exactly 
replicated at the transmitting end. 
Hu et al.  [14]  introduce  the  concept  of  geographical  and  temporal  packet  leashes  for  detecting  wormholes. 
They define a leash to be any added information to the packet for the purpose of defending against the wormhole. 
The geographical leashes ensure that the recipient of the packet is within a certain distance from the sender. They 
require each node to know its own location, and require all the nodes to have loosely synchronized clocks. When 
sending a packet, the sending node includes in the packet an authenticated version of its own location and the time 
at which it sent the packet. The receiving node uses these values, in addition to its own location and the time at 
which  it  receives  the  packet,  to  compute  an  upper  bound  on  the  distance  to  the  sender.  The  temporal  leashes 
ensure  that  the  packet  has  an  upper  bound  on  its  lifetime,  which  restricts  the  maximum  travel  distance.  They 
require  that  all  nodes  have  tightly  synchronized  clocks.  The  sender  includes  in  each  packet  an  authenticated 
version of the time of sending. The receiver compares this value to the time at which it received the packet. Based 
on the time delay and the speed of light, the receiver can determine if the packet has traveled too far. An implicit 
assumption  is  that  packet  processing,  sending,  and  receiving  delays  are  negligible.  Both  geographical  and 
temporal leashes need to add authentication data to each packet to protect the leash, which add processing and 
communication overhead. In addition a large amount of storage is needed at each node since a hash tree based 
authentication scheme is used [32]. If only loose time synchronization is possible, the smallest packet size that can 
be authenticated becomes  large (e.g., 4900 bytes with 1 s synchronization). Perhaps,  more importantly, packet 
leashes do not nullify the capacity of the compromised nodes from launching attacks in the future.  
Capkun et al. [28] present SECTOR, a set of mechanisms for the secure verification of the time of encounters 
between nodes in multihop wireless networks. They show how to detect wormhole attacks without requiring any 
clock synchronization through the use of MAD (Mutual Authentication with Distance-Bounding). Each node u 
estimates  the  distance  to  another  node  v  by  sending  it  a  one  bit  challenge,  which  node  v  responds  to 
instantaneously. Using the time of flight, node u detects if node v is a neighbor or not. The approach uses special 
hardware for the challenge request-response and accurate time measurements. 
4
Hu and Evans [15] use directional antennas [25],[26] to prevent the wormhole attack. To thwart the wormhole, 
each node shares a secret key with every other node and maintains an updated list of its neighbors. To discover its 
neighbors,  a  node,  called  the  announcer,  uses  its  directional  antenna  to  broadcast  a  HELLO  message  in  every 
direction. Each node that hears the HELLO message sends its identity and an encrypted message, containing the 
identity of the announcer and a random challenge nonce, back to the announcer.  Before the announcer adds the 
responder to its neighbor list, it verifies the message authentication using the shared key, and that it heard the 
message in the opposite directional antenna to that reported by the neighbor. This approach is suitable for secure 
dynamic  neighbor  detection.  However,  it  only  partially  mitigates  the  wormhole  problem.  Specifically,  it  only 
prevents the kind of wormhole attacks in which malicious nodes try to deceive two nodes into believing that they 
are neighbors. This is only one of the five wormhole attack modes that we describe in Section 3. The requirement 
of directional antennas on all nodes may be infeasible for some deployments. Finally, the protocol may degrade 
the  connectivity  of  the  network  by  rejecting  legitimate  neighbors  in  their  conservative  approach  to  prevent 
wormholes from materializing. Awerbuch et al. [27] present a protocol called ODSBR that does not prevent the 
wormhole from happening but tries to mitigate its consequences through discovery and avoidance. The technique 
suffers from the drawback that every single packet needs to be acknowledged by the destination and many packets 
could be lost before the wormhole is discovered.  
3  Wormhole Attack Modes 
In this section we classify the wormhole attack based on the techniques used for launching it. 
3.1  Wormhole using Encapsulation 
Wormhole attacks are particularly severe against many ad-hoc and sensor network routing protocols, such as 
the two ad-hoc on-demand routing protocols DSR [10] and AODV [21], and the sensor TinyOS beaconing routing 
protocol [12]. First, we demonstrate how a generic wormhole attack is launched against such routing protocols, 
using DSR as an example. In DSR, if a node, say S, needs to discover a route to a destination, say D, S floods the 
network with a route request packet. Any node that hears the request packet transmission processes the packet, 
adds its identity to the source route, and rebroadcasts it. To limit the amount of flooding through the network, 
each node broadcasts only the first route request it receives and drops any further copies of the same request. For 
5
each route request D receives, it generates a route reply and sends it back to S.   The source S then selects the best 
path from the route replies; the best path could be either the path with the shortest number of hops or the path 
associated  with  the  first  arrived  reply.  However,  in  a  malicious  environment,  this  protocol  will  fail.  When  a 
malicious node at one part of the network hears the route request packet, it tunnels it to a second colluding party 
at a distant location near the destination. The second party then rebroadcasts the route request. The neighbors of 
the second colluding party receive the route request and drop any further legitimate requests that may arrive later 
on legitimate multihop paths. The result is that the routes between the source and the destination go through the 
two  colluding  nodes  that  will  be  said  to  have  formed  a  wormhole  between  them.  This  prevents  nodes  from 
discovering legitimate paths that are more than two hops away. 
One way for two colluding malicious nodes can involve themselves in a route is by simply giving the false 
illusion that the route through them is the shortest, even though they may be many hops away. Consider Figure 1 
in which nodes A and B try to discover the shortest path between them, in the presence of the two malicious nodes 
X and Y. Node A broadcasts a route request (REQ), X gets the REQ and encapsulates it in a packet destined to Y 
through  the  path  that  exists  between  X  and  Y  (U-V-W-Z).  Node  Y  demarshalls  the  packet,  and  rebroadcasts  it 
again, which reaches B. Note that due to the packet encapsulation, the hop count does not increase during the 
traversal through U-V-W-Z. Concurrently, the REQ travels from A to B through C-D-E. Node B now has two 
routes, the first is four hops long (A-C-D-E-B), and the second is apparently three hops long (A-X-Y-B). Node B 
will choose the second route since it appears to be the shortest while in reality it is seven hops long. So X and Y 
succeed  in  involving  themselves  in  the  route  between  A  and  B.  Any  routing  protocol  that  uses  the  metric  of 
shortest path to choose the best route is vulnerable to this mode of wormhole attack. 
X
a
A
U
b
V
W
d
Z
g
Y
a
X
A
b
C
D
E
d
g
Y
B
Z
F
C
D
Good node
E
B
Malicious node
Figure 1: Wormhole through packet encapsulation 
Good node
Malicious node
Out-of-band channel
Figure 2: Wormhole through out-of-band channel
6
This mode of the wormhole attack is easy to launch since the two ends of the wormhole do not need to have 
any cryptographic information, nor do they need  any special capabilities, such as a high speed wireline link or a 
high power source. A simple way of countering this mode of attack is a by-product of the secure routing protocol 
ARAN [17], which chooses the fastest route reply rather than the one which claims the shortest number of hops. 
This was not a stated goal of ARAN, whose motivation was that a longer, less congested route is better than a 
shorter and congested route. 
3.2  Wormhole using Out-of-Band Channel 
This mode of the wormhole attack is launched by having an out-of-band high-bandwidth channel between the 
malicious nodes. This channel can be achieved, for example, by using a long-range directional wireless link or a 
direct wired link. This mode of attack is more difficult to launch than the previous one since it needs specialized 
hardware capability. Consider the scenario depicted in Figure 2. Node A is sending a route request to node B, 
nodes X and Y are malicious having an out-of-band channel between them.  Node X tunnels the route request to Y, 
which is a legitimate neighbor of B. Node Y broadcasts the packet to its neighbors, including B. Node B gets two 
route requests — A-X-Y-B and A-C-D-E-F-B. The first route is both shorter and faster than the second, and is thus 
chosen by B. This results in a wormhole being established between X and Y on the route between A and B. 
3.3  Wormhole using High Power Transmission 
 In this mode, when a single malicious node gets a route request, it broadcasts the request at a high power 
level,  a  capability  which  is  not  available  to  other  nodes  in  the  network.  Any  node  that  hears  the  high-power 
broadcast, rebroadcasts it towards the destination. By this method, the malicious node increases its chance to be in 
the routes established between the source and the destination even without the participation of a colluding node. A 
simple method to mitigate this attack is possible if each node can accurately measure the received signal strength 
and  has  models  for  signal  propagation  with  distance.  In  that  case,  a  node  can  independently  determine  if  the 
transmission it receives is at a higher than allowable power level. However, this technique is approximate at best 
and dependent on environmental conditions. The local monitoring approach used in LITEWORP provides a more 
feasible defense against this mode. 
7
3.4  Wormhole using Packet Relay 
  In this mode of the wormhole attack, a malicious node relays packets between two distant nodes to convince 
them that they are neighbors. It can be launched by even one malicious nodes. Cooperation by a greater number of 
malicious nodes serves to expand the neighbor list of a victim node to several hops. For example, assume that 
node A and node B are two non-neighbor nodes  with a  malicious neighbor node X. Node X can relay packets 
between nodes A and B to give them the illusion that they are neighbors. 
3.5  Wormhole using Protocol Deviations 
 Some routing protocols, such as ARAN [17], choose the route with the shortest delay in preference to the one 
with the shortest number of hops. During the route request forwarding, the nodes typically back off for a random 
amount  of  time  before  forwarding.  This  is  motivated  by  the  fact  that  the  request  forwarding  is  done  by 
broadcasting and hence, reducing MAC layer collisions is important. A malicious node can create a wormhole by 
simply not complying with the protocol and broadcasting without backing off. The purpose is to let the request 
packet it forwards arrive first at the destination. This increases the probability that the route between the source 
and the destination will include the malicious node. This is a special form of the rushing attack described in [16].  
Mode name 
Packet encapsulation 
Out-of-band channel 
High power transmission 
Packet relay 
Protocol deviations 
Minimum  #  of 
compromised 
nodes 
Two 
Two 
One 
One 
One 
Special 
requirements 
None 
Out-of-band link 
High energy source 
None 
None 
   Summarizing,  the  different  modes  of  the 
wormhole  attack  along  with  the  associated 
requirements  are  given 
in  Table  1.  Many 
applications  in  ad-hoc  and  sensor  networks 
become vulnerable once a successful wormhole 
Table 1: Summary of wormhole attack modes 
attack  has  been  launched. Routing is  an  important  example.  As  we  discussed  in  Section 3,  on demand  ad-hoc 
routing  protocols  like  DSR  and  AODV,  and  the  sensor  TinyOS  routing  protocol  are  highly  vulnerable  to  the 
attack.  Other  routing  protocols  like  SEAD  [2],  Ariadne  [3],  ARRIVE  [11],  directed  diffusion  [5],  multipath 
routing [6], minimum cost forwarding [7], rumor routing [8], and even secure routing protocols presented in [4] 
and [13] are also vulnerable to wormhole attacks. For further details on the vulnerability of routing protocols, the 
reader may refer to [14]. Moreover, all the protocols that are used in building neighbor lists and, by extension, the 
routing protocols (e.g. DSDV [9], OLSR [22], and TBRPF [23]) that use these lists, are vulnerable as well.  
8
4  Defenses 
In  this  section,  we  describe  the  method  for  wormhole  detection  in  LITEWORP  followed  by  the  method  for 
isolation of the malicious nodes. This is described in the context of static networks, while an extension to mobile 
wireless networks is briefly described in Section 7. 
4.1  System Model and Assumptions 
Attack Model: In the attack model that we consider, the wormhole is launched by a malicious node, which may be 
either an external node that does not have the cryptographic keys, or an insider node, that possesses the keys. The 
insider  node  may  be  created,  for  example,  by  compromising  a  legitimate  node.  All  these  malicious  nodes  can 
exhibit Byzantine behavior and can collude amongst themselves. The malicious node can be a powerful entity that 
can establish out-of-band fast channels or have high powered transmission capability. 
System assumption: We assume that the links are bi-directional, which means that if a node A can hear node B 
then  B  can  hear  A.  We  assume  that  there  is  a  certain  amount  of  time  from  a  node’s  deployment,  called  the 
compromise  threshold  time  (TCT)  that  is  minimally  required  to  compromise  the  node.  We  have  a  protocol 
presented in Section 4.2.1 for discovery of first and second hop transmission neighbors of a node. We define the 
maximum time required for the neighbor discovery protocol to complete as TND (ND: Neighbor Discovery). Our 
assumption is that for a given node ni, all its first and second hop neighbors are deployed within TCT-2TND of the 
deployment  of  ni.  This  assumption  implies  that  there  can  be  no  malicious  insider  node  within  two  hops  of  ni 
within TND time units from its deployment. Note however, that this assumption allows external malicious nodes to 
exist anywhere in the network at any time of deployment. Further, insider malicious nodes, that are greater than 
two hops from ni are allowed. We assume that the network has a static topology, though the functional roles a 
node plays (e.g., cluster head, data aggregator, etc.) may change. Finally, LITEWORP requires a pre-distribution 
pair-wise key management protocol (e.g. [18] for ad-hoc networks and [19],[20] for sensor networks). The key 
management does not incur any overhead during the normal failure-free functioning of the network but only at 
initialization time and during isolation of a malicious node. From the point of view of LITEWORP, incremental 
deployment  of  a  node  in  the  network  is  identical  to  having  a  mobile  node  move  to  its  location.  This  can  be 
handled by augmenting LITEWORP with a dynamic neighbor discovery protocol as in [15],[16]. 
9
4.2  Wormhole Defense using Local Monitoring 
4.2.1  Information Structures 
Building Neighbor Lists: As soon as a node, say A, is deployed in the field, it does a one-hop broadcast of a 
HELLO  message.  Any  node,  say B,  that  hears  the  message,  sends  back  an  authenticated  reply to A, using  the 
shared key. Node A accepts all the replies that arrive within a timeout. For each reply, A verifies the authenticity 
of  the  reply  and  adds  the  responder  to  its  neighbor  list  RA.  Then  A  does  a  one-hop  broadcast  of  a  message 
containing the list RA. This broadcast is authenticated individually by the shared key with each member in RA. 
When B hears the broadcast, it verifies the authenticity of RA, and stores RA if correctly verified. Hence, at the end 
of this neighbor discovery process, each node has a list of its direct neighbors and the neighbors of each one of its 
direct neighbors. Note that this requires a larger memory than simply keeping a list of first hop and second hop 
neighbors.  This  process  is  performed  only  once  in  the  lifetime  of  a  node  and  is  secure  because  of  the  system 
model assumptions. Henceforth, a node will not accept a packet from a node that is not a neighbor nor forward to 
a node that is not a neighbor. Also, second hop neighbor information is used to determine if a packet is legitimate 
or not. If a node C receives a packet forwarded by B purporting to come from A in the previous hop, C discards 
the packet if A is not a second hop neighbor. After building its first and second hop neighbor list, node A activates 
local monitoring. 
Local Monitoring: A collaborative detection strategy for wormholes is used, where a node monitors the traffic 
going in and out of its neighbors. For a node, say a, to be able to watch a node say, b, two conditions are required: 
(i) each packet forwarder must explicitly announce the immediate source of the packet it is forwarding, i.e., the 
node from which it receives the packet, and (ii) a must be a neighbor of both b and the previous hop from b, say 
d. If the second condition is satisfied, we call a the guard node for the link from d to b. This implies that α is the 
guard node for all its outgoing links. For example, in Figure 3, nodes M, N, and X are the guard nodes of the link 
from  X  to  A.  Information  from  each  packet  sent  from  X  to  A  is  saved  in  a  watch  buffer  at  each  guard.  The 
information  includes  the  packet  identification  and  type,  the  packet  source,  the  packet  destination,  the  packet’s 
immediate sender (X), and the packet’s immediate receiver (A). The guards expect that A will forward the packet 
towards the ultimate destination, unless A is itself the destination. Each entry in the watch buffer is time stamped 
10
with a time threshold,t, by which A must forward the packet. Each packet forwarded by A with X as a previous 
hop is checked for the corresponding information in the watch buffer. 
X
B
X
M
N
S
Y
The transmission range of node Y
Figure 3: X, M, and N are guards of the link from X 
to A  
A
A  malicious  counter  (MalC(i,j))  is  maintained  at  each 
guard node, i, for a node, j, at the receiving end of each 
A
D