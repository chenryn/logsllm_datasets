snic(family=, address='169.254.129.196',
netmask='255.255.0.0', broadcast=None, ptp=None),
snic(family=, address='fe80::c4d5:6dfb:a94c:81c4',
netmask=None, broadcast=None, ptp=None)],
'本地连接* 8': [snic(family=,
address='00-00-00-00-00-00-00-E0', netmask=None, broadcast=None, ptp=None),
snic(family=, address='fe80::100:7f:fffe',
netmask=None, broadcast=None, ptp=None)],
'Loopback Pseudo-Interface 1': [snic(family=,
address='127.0.0.1', netmask='255.0.0.0', broadcast=None, ptp=None),
snic(family=, address='::1', netmask=None,
broadcast=None, ptp=None)]}
78
第2章 基础运维
……
In[17]: psutil.net_if_stats() # 获取网络接口状态
Out[17]:
{'以太网': snicstats(isup=False, duplex=, speed=0,
mtu=1500),
'蓝牙网络连接': snicstats(isup=False, duplex=,
speed=3, mtu=1500),
'以太网 2': snicstats(isup=True, duplex=,
speed=1000, mtu=1300),
'VMware Network Adapter VMnet1': snicstats(isup=True,
duplex=, speed=100, mtu=1500),
'VMware Network Adapter VMnet8': snicstats(isup=True,
duplex=, speed=100, mtu=1500),
'Loopback Pseudo-Interface 1': snicstats(isup=True,
duplex=, speed=1073, mtu=1500),
'WLAN': snicstats(isup=True, duplex=, speed=87,
mtu=1500),
'本地连接* 3': snicstats(isup=False, duplex=,
speed=0, mtu=1500),
'本地连接* 8': snicstats(isup=False, duplex=,
speed=0, mtu=1472)}
In[18]:psutil.net_connections() # 获取当前网络连接信息
Out[18]:
[sconn(fd=-1, family=, type=2,
laddr=addr(ip='fe80::b59c:a707:c281:37fa', port=61797), raddr=(), status='NONE',
pid=2600),
sconn(fd=-1, family=, type=1,
laddr=addr(ip='127.0.0.1', port=8307), raddr=(), status='LISTEN', pid=5152),
sconn(fd=-1, family=, type=2,
laddr=addr(ip='fe80::b59c:a707:c281:37fa', port=1900), raddr=(), status='NONE',
pid=2600),
sconn(fd=-1, family=, type=2, laddr=addr(ip='::',
port=500), raddr=(), status='NONE', pid=4092),
sconn(fd=-1, family=, type=1, laddr=addr(ip='::',
port=443), raddr=(), status='LISTEN', pid=5152),
sconn(fd=-1, family=, type=2,
laddr=addr(ip='192.168.81.1', port=61803), raddr=(), status='NONE', pid=2600),
sconn(fd=-1, family=, type=1,
laddr=addr(ip='192.168.81.1', port=139), raddr=(), status='LISTEN', pid=4),
sconn(fd=-1, family=, type=1, laddr=addr(ip='::',
port=49669), raddr=(), status='LISTEN', pid=768),
sconn(fd=-1, family=, type=2,
laddr=addr(ip='fe80::6c20:f634:3e7a:52cb', port=2177), raddr=(), status='NONE',
pid=15584),
sconn(fd=-1, family=, type=2,
laddr=addr(ip='fe80::6c20:f634:3e7a:52cb', port=1900), raddr=(), status='NONE',
pid=2600),
sconn(fd=-1, family=, type=1,
laddr=addr(ip='192.168.0.188', port=64165), raddr=addr(ip='114.215.171.69',
port=443), status='CLOSE_WAIT', pid=3444),
sconn(fd=-1, family=, type=1, laddr=addr(ip='::',
79
Python自动化运维快速入门
port=49670), raddr=(), status='LISTEN', pid=724),
sconn(fd=-1, family=, type=2,
laddr=addr(ip='192.168.0.188', port=137), raddr=(), status='NONE', pid=4),
sconn(fd=-1, family=, type=2, laddr=addr(ip='::',
port=5353), raddr=(), status='NONE', pid=2984),
sconn(fd=-1, family=, type=1,
laddr=addr(ip='192.168.0.188', port=65128), raddr=addr(ip='52.230.83.250',
port=443), status='ESTABLISHED', pid=4364),
......
【示例2-17】获取进程信息。
In[32]: for pid in psutil.pids(): #获取所有进程的pid
...: print(pid,end=',')
...:
0,4,312,536,636,652,724,736,768,880,888,896,964,1012,448,632,1084,1096,1116,11
52,1188,1260,1364,1420,1440,1452,1616,1720,1728,1740,1752,1796,1832,1884,1892,
1900,1972,2024,2060,2116,2248,2332,2356,2380,2440,2528,2540,2600……
In[33]: for proc in psutil.process_iter(attrs=['pid', 'name', 'username']):
...: if proc.info['name'].startswith('WeChat'): #查找微信程序的相关信息
...: print(proc.info)
...:
{'pid': 12476, 'name': 'WeChat.exe', 'username': 'XX\\xx'}
{'pid': 15420, 'name': 'WeChatWeb.exe', 'username': 'XX\\xx'}
前面使用psutil.process_iter获取了进程相关的信息，返回结果是一个可迭代对象，每个元
素的info是一个字典，通过字典可以获取我们关心的信息。获取进程的其他信息如CPU占用、
内存占用、进程的线程数等，还可以使用如下方式：
In[35]: psutil.Process(12476).cpu_times() #获取CPU占用
Out[35]: pcputimes(user=80.390625, system=97.046875, children_user=0.0,
children_system=0.0)
In[36]: psutil.Process(12476).memory_info() #获取内存占用，rss就是实际占用的内存
Out[36]: pmem(rss=69345280, vms=105222144, num_page_faults=304706,
peak_wset=113065984, wset=69345280, peak_paged_pool=787272, paged_pool=764312,
peak_nonpaged_pool=75760, nonpaged_pool=66192, pagefile=105222144,
peak_pagefile=121634816, private=105222144)
In[37]: psutil.Process(12476).num_threads() #获取线程数
Out[37]: 41
In[38]: psutil.Process(12476).memory_percent() #获取内存占比
Out[38]: 1.6528748173747048
【示例2-18】下面是几种常见的实用方法。
1 import os
2 import psutil
3 import signal
4
5 #按名称查找进程相关信息 1
6 def find_procs_by_name(name):
7 "Return a list of processes matching 'name'."
8 ls = []
80
第2章 基础运维
9 for p in psutil.process_iter(attrs=['name']):
10 if p.info['name'] == name:
11 ls.append(p)
12 return ls
13
14
15 #按名称查找进程相关信息 2
16 def find_procs_by_name(name):
17 "Return a list of processes matching 'name'."
18 ls = []
19 for p in psutil.process_iter(attrs=["name", "exe", "cmdline"]):
20 if name == p.info['name'] or \
21 p.info['exe'] and os.path.basename(p.info['exe']) == name or \
22 p.info['cmdline'] and p.info['cmdline'][0] == name:
23 ls.append(p)
24 return ls
25
26 #杀掉进程树
27 def kill_proc_tree(pid, sig=signal.SIGTERM, include_parent=True,
28 timeout=None, on_terminate=None):
29 """Kill a process tree (including grandchildren) with signal
30 "sig" and return a (gone, still_alive) tuple.
31 "on_terminate", if specified, is a callabck function which is
32 called as soon as a child terminates.
33 """
34 if pid == os.getpid():
35 raise RuntimeError("I refuse to kill myself")
36 parent = psutil.Process(pid)
37 children = parent.children(recursive=True)
38 if include_parent:
39 children.append(parent)
40 for p in children:
41 p.send_signal(sig)
42 gone, alive = psutil.wait_procs(children, timeout=timeout,
43 callback=on_terminate)
44 return (gone, alive)
45
46
47 #杀掉子进程
48 def reap_children(timeout=3):
49 "Tries hard to terminate and ultimately kill all the children of this
process."
50 def on_terminate(proc):
51 print("process {} terminated with exit code {}".format(proc,
proc.returncode))
52
53 procs = psutil.Process().children()
54 # send SIGTERM
55 for p in procs:
56 p.terminate()
57 gone, alive = psutil.wait_procs(procs, timeout=timeout,
81
Python自动化运维快速入门
callback=on_terminate)
58 if alive:
59 # send SIGKILL
60 for p in alive:
61 print("process {} survived SIGTERM; trying SIGKILL" % p)
62 p.kill()
63 gone, alive = psutil.wait_procs(alive, timeout=timeout,
callback=on_terminate)
64 if alive:
65 # give up
66 for p in alive:
67 print("process {} survived SIGKILL; giving up" % p)
68
小结：本节主要介绍了如何通过psutil库获取常见的系统信息和进程信息，系统信息和进
程相关的指标非常多，具体使用时我们只关心自己需要监控的指标即可，深入了解psutil模块
请查阅psutil的官方文档。
2.3
文件系统监控
运维工作离不开文件系统的监控，如某个目录被删除，或者某个文件被修改、移动、删除
时需要执行一定的操作或发出报警。当然，读者可能会想到使用循环检查文件或目录的信息来
满足上述需求，也不是不可以，但这不是一个最好的方案，一是因为循环操作会不停地执行指
令太耗 CPU，二是不够实时，循环操作中会放一些等待指令，如 time.sleep(3)来减少 CPU 的
消耗，这就会导致监控的时机有一定的滞后，不够实时。本节介绍一个第三方库 watchdog 来
实现文件系统监控，其原理是通过操作系统的事件触发的，不需要循环，也不需要等待。
文件系统空间不足的监控请参考上节系统信息监控中磁盘监控的部分。
【示例2-19】watchdog用来监控指定目录/文件的变化，如添加删除文件或目录、修改文
件内容、重命名文件或目录等，每种变化都会产生一个事件，且有一个特定的事件类与之对应，
然后通过事件处理类来处理对应的事件，怎么样处理事件完全可以自定义，只需继承事件处理
类的基类并重写对应实例方法。
1 from watchdog.observers import Observer
2 from watchdog.events import *
3 import time
4
5
6 class FileEventHandler(FileSystemEventHandler):
7
8 def __init__(self):
9 FileSystemEventHandler.__init__(self)
82
第2章 基础运维
10
11 def on_moved(self, event):
12 now = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
13 if event.is_directory:
14 print(f"{ now } 文件夹由 { event.src_path } 移动至
{ event.dest_path }")
15 else:
16 print(f"{ now } 文件由 { event.src_path } 移动至 { event.dest_path }")
17
18 def on_created(self, event):
19 now = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
20 if event.is_directory:
21 print(f"{ now } 文件夹 { event.src_path } 创建")
22 else:
23 print(f"{ now } 文件 { event.src_path } 创建")
24
25 def on_deleted(self, event):
26 now = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
27 if event.is_directory:
28 print(f"{ now } 文件夹 { event.src_path } 删除")
29 else:
30 print(f"{ now } 文件 { event.src_path } 删除")
31
32 def on_modified(self, event):
33 now = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
34 if event.is_directory:
35 print(f"{ now } 文件夹 { event.src_path } 修改")
36 else:
37 print(f"{ now } 文件 { event.src_path } 修改")
38
39
40 if __name__ == "__main__":
41 observer = Observer()
42 path = r"d:\test"
43 event_handler = FileEventHandler()
44 observer.schedule(event_handler, path, True)#True表示递归子目录
45 print(f"监控目录 {path}")
46 observer.start()
47 observer.join()
运行结果如下：
监控目录 d:\test
2018-06-05 22:28:52 文件夹 d:\test\dir0 创建
2018-06-05 22:29:03 文件 d:\test\file1.txt 创建
2018-06-05 22:29:03 文件 d:\test\file1.txt 修改
2018-06-05 22:29:14 文件夹由 d:\test\dir0 移动至 d:\test\dir3
2018-06-05 22:29:25 文件由 d:\test\file1.txt 移动至 d:\test\file2.txt
2018-06-05 22:29:29 文件 d:\test\file2.txt 删除
运维中以下场景十分适合使用watchdog。
83
Python自动化运维快速入门
（1）监控文件系统中文件或目录的增、删、改情况
（2）当特定的文件被创建、删除、修改、移动时执行相应的任务
第二个场景在后续的小节中会有具体的应用。
2.4
执行外部命令 subprocess