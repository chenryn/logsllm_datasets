    ![Figure 13.29: New dashboard panel displaying memory usage ](img/B15021_13_24.jpg)
图 13.29:显示内存使用情况的新仪表板面板
现在，这应该可以更容易地监控系统上运行的容器的内存和 CPU 使用情况。仪表板提供了比浏览`docker stats`命令更简单的界面，尤其是当您开始在系统上运行更多的容器时。
## 活动 13.02:配置全景徒步旅行应用，向普罗米修斯展示指标
**解决方案**:
我们可以通过多种方式进行这项活动。在这里，我们选择向我们作为全景徒步应用的一部分运行的 PostgreSQL 容器中添加一个导出器:
1.  If you don't have the panoramic trekking app running, make sure that at least the PostgreSQL container is running so that you can complete this activity. You won't need to have Prometheus running yet as you will need to make some changes to the configuration file first. Run the following command to verify that the PostgreSQL database is running:
    ```
    docker run --rm -d --name postgres-test -e POSTGRES_PASSWORD=docker -p 5432:5432 postgres
    ```
    为了从您的 PostgreSQL 容器中收集更多的指标，您可以在 GitHub 上找到用户已经创建的导出器`albertodonato`。使用别人已经创建的比创建自己的要容易得多。文档和详细信息可在以下网址找到:[https://github.com/albertodonato/query-exporter](https://github.com/albertodonato/query-exporter)。
2.  The aforementioned GitHub account has a good breakdown of how to set up the configuration and metrics. Set up a basic configuration file to get started. Find the IP address that the PostgreSQL container is running on by running the following `docker inspect` command. This gives you the internal IP address your container is running on. You'll also need to substitute the container name you have running for ``:
    ```
    docker inspect --format '{{ .NetworkSettings.IPAddress }}' 
    ```
    您的 IP 地址可能与这里的不同:
    ```
    172.17.0.3
    ```
3.  对于这个导出器，您需要设置一些额外的配置来输入导出器。首先，在工作目录中创建一个名为`psql_exporter_config.yml`的配置文件，并用文本编辑器打开该文件。
4.  在下面的配置文件中输入前四行。这是导出器连接到数据库的方式。您需要提供可以访问数据库的密码，以及您在上一步中获得的 IP 地址，或者是否为数据库分配了域:
    ```
    1 databases:
    2   pg:
    3     dsn: postgresql+psycopg2://postgres:@/        postgres
    4
    ```
5.  将第一个指标添加到配置文件中。输入以下行来添加您的度量名称、仪表类型、描述和标签:
    ```
    5 metrics:
    6   pg_process:
    7     type: gauge
    8     description: Number of PostgreSQL processes with their         states
    9     labels: [state]
    10
    ```
6.  Set up a database query to gather the metric details you want for the `pg_process` gauge. *Line 13* shows that you want to create a database query with *lines 14* and *15,* assigning the results to the metric you created earlier. *Lines 16* to *23* are the query we want to run on our database in order to create a gauge for the number of processes running on the database:
    psql_exporter_config.yml
    ```
    11 queries:
    12   process_stats:
    13     databases: [pg]
    14     metrics:
    15       - pg_process
    16     sql: >
    17       SELECT
    18         state,
    19         COUNT(*) AS pg_process
    20       FROM pg_stat_activity
    21       WHERE state IS NOT NULL
    22       GROUP BY state
    23       FROM pg_stat_database
    ```
    你可以在这里找到完整的代码[https://packt.live/32C47K3](https://packt.live/32C47K3)。
7.  保存配置文件，并从命令行运行导出程序。出口商将在港口公布其指标。装载您在本练习前面创建的配置文件。您还将获得最新版本的`adonato/query-exporter`映像:
    ```
    docker run -p 9560:9560/tcp -v --name postgres-exporter ${PWD}/psql_exporter_config.yml:/psql_exporter_config.yml --rm -itd adonato/query-exporter:latest -- /psql_exporter_config.yml
    ```
8.  打开网络浏览器，使用网址`http://0.0.0.0:9560/metrics`查看您为作为全景徒步旅行应用的一部分运行的 PostgreSQL 容器设置的新指标:
    ```
    # HELP database_errors_total Number of database errors
    # TYPE database_errors_total counter
    # HELP queries_total Number of database queries
    # TYPE queries_total counter
    queries_total{database="pg",status="success"} 10.0
    queries_total{database="pg",status="error"} 1.0
    # TYPE queries_created gauge
    queries_created{database="pg",status="success"} 
    1.5795789188074727e+09
    queries_created{database="pg",status="error"} 
    1.57957891880902e+09
    # HELP pg_process Number of PostgreSQL processes with their states
    # TYPE pg_process gauge
    pg_process{database="pg",state="active"} 1.0
    ```
9.  移动到安装了普罗米修斯的目录中，用文本编辑器打开`prometheus.yml`文件，并添加导出器详细信息，让普罗米修斯开始收集数据:
    ```
    45   - job_name: 'postgres-web'
    46     scrape_interval: 5s
    47     static_configs:
    48     - targets: ['0.0.0.0:9560']
    ```
10.  保存您对`prometheus.yml`文件所做的更改，并从命令行再次启动普罗米修斯应用，如下所示:
    ```
    ./prometheus --config.file=prometheus.yml
    ```
11.  If everything has worked as it should, you should now see the `postgres-web` target displayed on the Prometheus `Targets` page, as demonstrated here:
    ![Figure 13.30: New postgres-web Targets page displayed on Prometheus ](img/B15021_13_25.jpg)
图 13.30:普罗米修斯上显示的新 postgres-web 目标页面
这就把我们带到了活动的结尾和本章的结尾。这些活动应该有助于巩固之前所学的知识，并为您提供收集应用和运行系统的指标以及以更方便用户的方式显示它们的经验。
# 14。收集容器日志
## 活动 14.01:为 Splunk 安装创建 docker-compose.yml 文件
**解决方案**:
我们可以通过多种方式进行这项活动。以下步骤概述了一种可能的方法。
在这里，您将设置一个`docker-compose.yml`文件，该文件将至少以本章中相同的方式运行您的 Splunk 容器。为了安装`/opt/splunk/etc`目录和`/opt/splunk/var`目录，您将设置两个卷。您需要公开端口`8000`、`9997`和`8088`，以允许访问您的 web 界面并允许数据转发到 Splunk 实例。最后，您需要设置一些环境变量来接受 Splunk 许可证并添加管理员密码。让我们开始吧:
1.  创建一个名为`docker-compose.yml`的新文件，用你喜欢的文本编辑器打开。
2.  从您喜欢的版本`Docker Compose`开始，创建您要使用的卷，以便挂载`var`和`ext`目录:
    ```
    1 version: '3'
    2
    3 volumes:
    4   testsplunk:
    5   testsplunkindex:
    6
    ```
3.  为 Splunk 安装设置服务，使用`splunk`作为主机名，使用`splunk/splunk`作为您安装时使用的映像。另外，设置`SPLUNK_START_ARGS`和`SPLUNK_PASSWORD`的环境变量，如下图:
    ```
    7 services:
    8   splunk:
    9     hostname: splunk
    10    image: splunk/splunk
    11    environment:
    12      SPLUNK_START_ARGS: --accept-license
    13      SPLUNK_PASSWORD: changeme
    ```
4.  最后，安装卷并展示您的安装访问 web 界面和转发来自转发器和容器的数据所需的端口:
    ```
    14    volumes:
    15      - ./testsplunk:/opt/splunk/etc
    16      - ./testsplunkindex:/opt/splunk/var
    17    ports:
    18      - "8000:8000"
    19      - "9997:9997"
    20      - "8088:8088"
    ```
5.  Run the `docker-compose up` command to make sure it is all working correctly. Use the `-d` option to make sure it is running as a daemon in the background of our system:
    ```
    docker-compose up -d
    ```
    该命令应返回类似如下的输出:
    ```
    Creating network "chapter14_default" with the default driver
    Creating chapter14_splunk_1 ... done
    ```
6.  Once your Splunk installation is running again, it's time to get one of your services from the Panoramic Trekking App running so that you can forward logs to Splunk to be indexed. When using the `docker run` command, add the log driver details, as you did previously in this chapter, and make sure you include the correct token for your `HTTP Event Collector`:
    ```
    docker run --rm -d --name postgres-test \
    -e POSTGRES_PASSWORD=docker -p 5432:5432 \
    --log-driver=splunk \
    --log-opt splunk-url=http://127.0.0.1:8088 \
    --log-opt splunk-token=5c051cdb-b1c6-482f-973f-2a8de0d92ed8 \
    --log-opt splunk-insecureskipverify=true \
    --log-opt tag="{{.Name}}/{{.FullID}}" \
    postgres -c log_statement=all 
    ```
    注意
    请注意，我们在`docker run`命令中使用了`-c log_statement=all`，因为这将确保我们所有的 PostgreSQL 查询都被记录并发送到 Splunk。
7.  Log in to the Splunk web interface and access the `Search & Reporting` app. Enter the `source="http:docker logs" AND postgres-test` query into the interface and press *Enter*. Since you have tagged our container, you should see your containers tagged with the name and full ID, so adding `postgres-test` to your search will make sure only your PostgreSQL logs are visible:
    ![Figure 14.48: PostgreSQL logs displaying in Splunk ](img/B15021_14_46.jpg)
图 14.48:Splunk 中显示的 PostgreSQL 日志
从前面的截图中可以看到，我们的日志成功地流过了 Splunk。记下添加到日志条目中的标记，如前面的截图所示。
这个活动教我们如何使用 Docker Compose 在我们的开发项目中实现日志记录过程。
## 活动 14.02:创建 Splunk 应用来监控全景徒步应用
**解决方案**:
您可以通过多种方式来执行此活动。以下步骤是实现这一点的一种方法。在这里，您将向作为全景徒步应用一部分运行的`PostgreSQL`容器添加一个导出器:
1.  确保 Splunk 正在运行，并且您一直监控的服务已经运行了一段时间，以确保您正在为此活动收集一些日志。
2.  Log in to the Splunk web interface. From the Splunk home screen, click on the cog icon next to the `Apps` menu; you will be presented with the `Apps` page for your Splunk environment:
    ![Figure 14.49: Apps page of the Splunk environment ](img/B15021_14_49.jpg)
    图 14.49:Splunk 环境的应用页面
3.  Click the `Create` app button and fill in the form. It will be similar to the following, in which `Name` is set to `Panoramic Trekking App`, `Folder name` is set to `panoramic_trekking_app`, and `Version` is set to `1.0.0`. Click `Save` to create the new app:
    ![Figure 14.50: Creating your new app in Splunk ](img/B15021_14_50.jpg)
    图 14.50:在 Splunk 中创建新应用
4.  Return to the Splunk home page and make sure your `Panoramic Trekking App` is visible from the `Apps` menu. Click `Panoramic Trekking App` to bring up the `Search & Reporting` page so that you can start querying your data:
    ![Figure 14.51: Selecting Panoramic Trekking App  ](img/B15021_14_51.jpg)
    图 14.51:选择全景徒步应用
5.  Type `source="http:docker logs" AND postgres-test AND INSERT AND is_superuser | stats count` into the query bar and press *Enter*. The search will look for any `Super Users` that were created as part of the application. When your data comes up, click the `Visualization` tab and change it to display a single-value visualization:
    ![Figure 14.52: Entering a query in the query bar ](img/B15021_14_52.jpg)
    图 14.52:在查询栏中输入查询
6.  Click the `Save As` button at the top of the screen and select the `Dashboards` panel. When you are presented with this screen, select the panel to be added to a new dashboard and give it the name `PTA Monitoring`. Also, give the panel the title `Super User Access` and click `Save`:
    ![Figure 14.53: Adding details to the dashboard panel ](img/B15021_14_53.jpg)
    图 14.53:向仪表板面板添加细节
7.  When you are presented with your new dashboard, click the `Edit` and `Add` panel buttons. Select `New` and then `Single Value` as the visualization type. Set `Content Title` to `Database Creation`. Add the `source="http:docker logs" AND postgres-test AND CREATE DATABASE | stats count` source string and click `Save`. This will search through your logs to show if anyone has created any databases on the PostgreSQL database, which should only happen when the app is set up and created:
    ![Figure 14.54: Editing the dashboard panel ](img/B15021_14_54.jpg)
    图 14.54:编辑仪表板面板
8.  再次单击`New Panel`按钮，从可视化效果中选择`New`和`Column Chart`。添加`App Usage`的`Content Title`，添加`source="http:docker logs" AND postgres-test AND SELECT AND photo_viewer_photo earliest=-60m | timechart span=1m count`搜索查询，点击`Save`。该搜索将为您提供一段时间内使用该应用查看您照片的人数。
9.  Feel free to move the panels around the dashboard. When you are happy with the changes, click the `Save` button. Your dashboard should look similar to the following:
    ![Figure 14.55: New dashboard panel used to monitor PostgreSQL usage ](img/B15021_14_55.jpg)
图 14.55:用于监控 PostgreSQL 使用情况的新仪表板面板
这项活动帮助您为全景徒步旅行应用收集日志数据，并使用 Splunk 以更加用户友好的方式显示这些数据。
# 15。用插件扩展 Docker
## 活动 15.01:安装带有网络和卷插件的 WordPress
**解决方案:**
通过以下步骤，可以使用卷和网络插件为数据库和 WordPress 博客创建容器:
1.  Create a network with the following command:
    ```
    docker network create  \
    --driver=store/weaveworks/net-plugin:2.5.2 \
    --attachable \
    wp-network
    ```
    该命令使用编织网插件创建一个网络，用`driver`标志指定。此外，卷被指定为`attachable`，这意味着您将来可以连接到 Docker 容器。最后，容器的名称将是`wp-network`。您应该得到如下输出:
    ```
    mk0pmhpb2gx3f6s00o57j2vd
    ```
2.  Create a volume with the following command:
    ```
    docker volume create -d vieux/sshfs \
    --name wp-content \
    -o sshcmd=root@localhost:/tmp \
    -o password=root \
    -o port=2222
    ```
    该命令使用`vieux/sshfs`插件通过 SSH 创建一个卷。该卷的名称为`wp-content`，并为`ssh`命令、端口和密码传递了其他选项:
    ```
    wp-content
    ```
3.  Create the `mysql` container with the following command:
    ```
    docker run --name mysql -d \
    -e MYSQL_ROOT_PASSWORD=wordpress \
    -e MYSQL_DATABASE=wordpress \
    -e MYSQL_USER=wordpress \
    -e MYSQL_PASSWORD=wordpress \
    --network=wp-network \
    mysql:5.7
    ```
    该命令以分离模式运行`mysql`容器，使用环境变量和`wp-network`连接。
4.  Create the `wordpress` container with the following command:
    ```
    docker run --name wordpress -d \
    -v wp-content:/var/www/html/wp-content \
    -e WORDPRESS_DB_HOST=mysql:3306 \
    -e WORDPRESS_DB_USER=wordpress \
    -e WORDPRESS_DB_PASSWORD=wordpress \
    -e WORDPRESS_DB_NAME=wordpress \
    --network=wp-network \
    -p 8080:80 \
    wordpress
    ```
    该命令使用环境变量和`wp-network`连接以分离模式运行`wordpress`容器。此外，容器的`80`港在主机系统的`8080`港可用。
    成功启动后，您将有两个容器运行`mysql`和`wordpress`:
    ```
    docker ps
    ```
    ![Figure 15.17: The WordPress and database containers ](img/B15021_15_15.jpg)
    图 15.17:WordPress 和数据库容器
5.  Open `http://localhost:8080` in your browser to check the WordPress setup screen:
    ![Figure 15.18: WordPress setup screen ](img/B15021_15_18.jpg)
图 15.18: WordPress 设置屏幕
WordPress 安装屏幕验证是否使用网络和卷插件安装了 WordPress。
在本练习中，您已经使用编织网插件创建了一个自定义网络，并使用`sshfs`插件创建了一个自定义卷。您创建了一个使用自定义网络的数据库容器和一个使用自定义网络和自定义卷的 WordPress 容器。设置成功后，您的 Docker 容器通过自定义网络相互连接，并通过 SSH 使用卷。在本练习中，您将 Docker 扩展用于实际应用。现在，您可以放心地用您的定制业务需求和技术扩展 Docker。