[dmtsai@study tmp]# touch -d "2 days ago" bashrc
[dmtsai@study tmp]# date; ll bashrc; ll --time=atime bashrc; ll --time=ctime bashrc
Tue Jun 16 00:51:52 CST 2015
-rw-r--r--. 1 dmtsai dmtsai 231 Jun 14 00:51 bashrc
-rw-r--r--. 1 dmtsai dmtsai 231 Jun 14 00:51 bashrc
-rw-r--r--. 1 dmtsai dmtsai 231 Jun 16 00:51 bashrc
# 跟上个范例比较看看，本来是 16 日变成 14 日了 （atime/mtime）～不过， ctime 并没有跟着改变喔！
范例四：将上个范例的 bashrc 日期改为 2014/06/15 2:02
[dmtsai@study tmp]# touch -t 201406150202 bashrc
[dmtsai@study tmp]# date; ll bashrc; ll --time=atime bashrc; ll --time=ctime bashrc
Tue Jun 16 00:54:07 CST 2015
-rw-r--r--. 1 dmtsai dmtsai 231 Jun 15 2014 bashrc
-rw-r--r--. 1 dmtsai dmtsai 231 Jun 15 2014 bashrc
-rw-r--r--. 1 dmtsai dmtsai 231 Jun 16 00:54 bashrc
# 注意看看，日期在 atime 与 mtime 都改变了，但是 ctime 则是记录目前的时间！
通过 touch 这个指令，我们可以轻易的修订文件的日期与时间。并且也可以创建一个空的文件喔！ 不过，要注意的是，即使我们复制一
个文件时，复制所有的属性，但也没有办法复制 ctime 这个属性的。 ctime 可以记录这个文件最近的状态 （status） 被改变的时间。无论如
何，还是要告知大家， 我们平时看的文件属性中，比较重要的还是属于那个 mtime 啊！我们关心的常常是这个文件的“内容” 是什么时候被更动
的说～了乎？
无论如何， touch 这个指令最常被使用的情况是：
创建一个空的文件；
将某个文件日期修订为目前 （mtime 与 atime）
由第五章、Linux文件权限的内容我们可以知道一个文件有若干个属性， 包括读写执行（r, w, x）等基本权限，及是否为目录 （d） 与文
件 （-） 或者是链接文件 （l） 等等的属性！ 要修改属性的方法在前面也约略提过了（chgrp, chown, chmod） ，本小节会再加强补充一下！
除了基本r, w, x权限外，在Linux传统的Ext2/Ext3/Ext4文件系统下，我们还可以设置其他的系统隐藏属性， 这部份可使用 chattr 来设置，
而以 lsattr 来查看，最重要的属性就是可以设置其不可修改的特性！让连文件的拥有者都不能进行修改！ 这个属性可是相当重要的，尤其是在
安全机制上面 （security）！比较可惜的是，在 CentOS 7.x 当中利用 xfs 作为默认文件系统， 但是 xfs 就没有支持所有的 chattr 的参数了！仅
有部份参数还有支持而已！
首先，先来复习一下上一章谈到的权限概念，将下面的例题看一看先：
例题：
你的系统有个一般身份使用者 dmtsai，他的群组属于 dmtsai，他的主文件夹在 /home/dmtsai， 你是root，你想将你的
~/.bashrc 复制给他，可以怎么作？
答：
由上一章的权限概念我们可以知道 root 虽然可以将这个文件复制给 dmtsai，不过这个文件在 dmtsai 的主文件夹中却可能让
dmtsai 没有办法读写（因为该文件属于 root 的嘛！而 dmtsai 又不能使用 chown 之故）。 此外，我们又担心覆盖掉 dmtsai 自
己的 .bashrc 配置文件，因此，我们可以进行如下的动作喔：
复制文件： cp ~/.bashrc ~dmtsai/bashrc
修改属性： chown dmtsai:dmtsai ~dmtsai/bashrc
例题：
我想在 /tmp 下面创建一个目录，这个目录名称为 chapter6_1 ，并且这个目录拥有者为 dmtsai， 群组为 dmtsai，此外，任何人
都可以进入该目录浏览文件，不过除了 dmtsai 之外，其他人都不能修改该目录下的文件。
答：
因为除了 dmtsai 之外，其他人不能修改该目录下的文件，所以整个目录的权限应该是 drwxr-xr-x 才对！ 因此你应该这样做：
创建目录： mkdir /tmp/chapter6_1
修改属性： chown -R dmtsai:dmtsai /tmp/chapter6_1
修改权限： chmod -R 755 /tmp/chapter6_1
在上面这个例题当中，如果你知道 755 那个分数是怎么计算出来的，那么你应该对于权限有一定程度的概念了。 如果你不知道 755 怎
么来的？那么...赶快回去前一章看看 chmod 那个指令的介绍部分啊！这部分很重要喔！你得要先清楚的了解到才行～否则就进行不下去啰～
假设你对于权限都认识的差不多了，那么下面我们就要来谈一谈，“新增一个文件或目录时，默认的权限是什么？”这个议题！
OK！那么现在我们知道如何创建或者是改变一个目录或文件的属性了，不过， 你知道当你创建一个新的文件或目录时，他的默认权限
会是什么吗？呵呵！那就与 umask 这个玩意儿有关了！那么 umask 是在搞什么呢？基本上， umask 就是指定 “目前使用者在创建文件或目录
时候的权限默认值”， 那么如何得知或设置 umask 呢？他的指定条件以下面的方式来指定：
[root@study ~]# umask
0022  -rw-r--r--
创建目录时：（drwxrwxrwx） - （d----w--w-） ==> drwxr-xr-x
不相信吗？我们就来测试看看吧！
[root@study ~]# umask
0022
[root@study ~]# touch test1
[root@study ~]# mkdir test2
[root@study ~]# ll -d test*
-rw-r--r--. 1 root root 0 6月 16 01:11 test1
drwxr-xr-x. 2 root root 6 6月 16 01:11 test2
呵呵！瞧见了吧！确定新建文件的权限是没有错的。
umask的的利利用用与与重重要要性性：：专专题题制制作作
想像一个状况，如果你跟你的同学在同一部主机里面工作时，因为你们两个正在进行同一个专题， 老师也帮你们两个的帐号创建好了相
同群组的状态，并且将 /home/class/ 目录做为你们两个人的专题目录。 想像一下，有没有可能你所制作的文件你的同学无法编辑？果真如此的
话，那就伤脑筋了！
这个问题很常发生啊！举上面的案例来看就好了，你看一下 test1 的权限是几分？ 644 呢！意思是“如果 umask 订定为 022 ，那新建的
数据只有使用者自己具有 w 的权限， 同群组的人只有 r 这个可读的权限而已，并无法修改喔！”这样要怎么共同制作专题啊！您说是吧！
所以，当我们需要新建文件给同群组的使用者共同编辑时，那么 umask 的群组就不能拿掉 2 这个 w 的权限！ 所以啰， umask 就得要是
002 之类的才可以！这样新建的文件才能够是 -rw-rw-r-- 的权限模样喔！ 那么如何设置 umask 呢？简单的很，直接在 umask 后面输入 002 就
好了！
[root@study ~]# umask 002
[root@study ~]# touch test3
[root@study ~]# mkdir test4
[root@study ~]# ll -d test[34] # 中括号 [ ] 代表中间有个指定的字符，而不是任意字符的意思
-rw-rw-r--. 1 root root 0 6月 16 01:12 test3
drwxrwxr-x. 2 root root 6 6月 16 01:12 test4
所以说，这个 umask 对于新建文件与目录的默认权限是很有关系的！这个概念可以用在任何服务器上面， 尤其是未来在你架设文件服
务器 （file server） ，举例来说， SAMBA Server 或者是 FTP server 时， 都是很重要的观念！这牵涉到你的使用者是否能够将文件进一步利
用的问题喔！不要等闲视之！
例题：
假设你的 umask 为 003 ，请问该 umask 情况下，创建的文件与目录权限为？
答：
umask 为 003 ，所以拿掉的权限为 --------wx，因此：
文件： （-rw-rw-rw-） - （--------wx） = -rw-rw-r--
目录： （drwxrwxrwx） - （d-------wx） = drwxrwxr--
Tips
关于 umask 与权限的计算方式中，教科书喜欢使用二进制的方式来进行 AND 与 NOT 的计算， 不过，鸟哥还是比较喜欢使用符号方式来计算～
联想上面比较容易一点～
但是，有的书籍或者是 BBS 上面的朋友，喜欢使用文件默认属性 666 与目录默认属性 777 来与 umask 进行相减的计算～这是不好的喔！以上面例题来
看， 如果使用默认属性相加减，则文件变成：666-003=663，亦即是 -rw-rw--wx ，这可是完全不对的喔！ 想想看，原本文件就已经去除 x 的默认属性
了，怎么可能突然间冒出来了？ 所以，这个地方得要特别小心喔！
在默认的情况中， root 的 umask 会拿掉比较多的属性，root 的 umask 默认是 022 ， 这是基于安全的考虑啦～至于一般身份使用者，
通常他们的 umask 为 002 ，亦即保留同群组的写入权力！ 其实，关于默认 umask 的设置可以参考 /etc/bashrc 这个文件的内容，不过，不建
议修改该文件， 你可以参考第十章 bash shell 提到的环境参数配置文件 （~/.bashrc） 的说明！
什么？文件还有隐藏属性？光是那九个权限就快要疯掉了，竟然还有隐藏属性，真是要命～ 但是没办法，就是有文件的隐藏属性存在
啊！不过，这些隐藏的属性确实对于系统有很大的帮助的～ 尤其是在系统安全 （Security） 上面，重要的紧呢！不过要先强调的是，下面的
chattr指令只能在Ext2/Ext3/Ext4的 Linux 传统文件系统上面完整生效， 其他的文件系统可能就无法完整的支持这个指令了，例如 xfs 仅支持部
份参数而已。下面我们就来谈一谈如何设置与检查这些隐藏的属性吧！
chattr （（设设置置文文件件隐隐藏藏属属性性））
[root@study ~]# chattr [+-=][ASacdistu] 文文件件或或目目录录名名称称
选项与参数：
+ ：增加某一个特殊参数，其他原本存在参数则不动。
- ：移除某一个特殊参数，其他原本存在参数则不动。
= ：设置一定，且仅有后面接的参数
A ：当设置了 A 这个属性时，若你有存取此文件（或目录）时，他的存取时间 atime 将不会被修改，
可避免 I/O 较慢的机器过度的存取磁盘。（目前建议使用文件系统挂载参数处理这个项目）
S ：一般文件是非同步写入磁盘的（原理请参考前一章sync的说明），如果加上 S 这个属性时，
当你进行任何文件的修改，该更动会“同步”写入磁盘中。
a ：当设置 a 之后，这个文件将只能增加数据，而不能删除也不能修改数据，只有root 才能设置这属性
c ：这个属性设置之后，将会自动的将此文件“压缩”，在读取的时候将会自动解压缩，