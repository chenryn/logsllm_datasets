rendering of the force feedback can damage or endanger the
underlying surface and make the robot suffer a heavy load.
In Figure 11, we show the impact of shifting depth map
information during transmission of the information from the
publisher to the subscriber. The ﬁgure shows that because
of the shifted distance measure, the 3D rendering of the left
half of the box is ﬂattened (and indeed would be hard to
differentiate from the surface, were it not for the colors), and
the original surface on the right side of the box has gained
volume. As shown in the ﬁgure, this fault model can lead to
penetration of the object by the robot that would have been
prevented by the non-corrupted image.
The last fault we studied was corruption of the derived
reference point (the ArUco marker). The object in Figure 12a
has the reference point set on the ArUco marker, whereas the
reference point in Figure 12b has been shifted upward. The
distance between the object and the robot arm (marked with a
double-headed arrow) has been updated accordingly. (I.e., the
(a)
(b)
Figure 10: Simulated Raven operation with (a) uncorrupted
depth map and (b) corrupted depth map. Note the difference
between the dotted circles.
(a)
(b)
Figure 11: Simulated Raven operation with (a) uncorrupted
depth map, and (b) shifted depth map. Note the problems
inside the contents of dotted circles.
(a)
(b)
Figure 12: Simulated Raven operation with (a) uncorrupted
camMsg, and (b) shifted camMsg. Note the difference be-
tween the reference points (inside dotted circles).
distance in (b) is larger than in (a), while (a) depicts the actual
setup of the robot and the object.) For the corrupted distance,
the rendered feedback is no longer valid. In the experiment
shown in Figure 12, the haptic device did not receive haptic
346          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Associationfeedback upon touching the surface of the object, and the
robot penetrated the object.
7 Discussion
Generalization. As demonstrated in this paper, the ROS 1
is vulnerable to variations of MITM attacks. We show that
our prototype smart malware can utilize the leaked data to
trigger an attack at the most opportune time so as to maxi-
mize the attack’s impact. The inference of the opportune time
range for execution of the attack payload reduces the chances
of exposure, which helps the malware disguise the attack as
an accidental failure. (Recall that the faults were designed
to represent accidental failures.) Without the smart trigger-
ing, frequent and likely unsuccessful injections of the fault
could make the system administrator aware of the malicious
intent behind the sequence of failures. To make things worse,
our DBSCAN-based approach does not require extensive
prior knowledge of the target robotic application. Alemzadeh
et al. [2] also introduce a triggering algorithm (i.e., a side-
channel attack that predicts the state of the robot from the
byte values of speciﬁc packets), but we ﬁnd that our approach
is more intuitive and effective4. (I.e., our approach simply
searches for a dense region (corresponding to a high density
of critical activities), and that does not require background
knowledge on the design/implementation details of the target
robot.) However, despite the smartness of the malware, our
attack is limited in its payload. Unlike the fault in [2], which
tackles the time gap between a safety check of the input and
its execution (i.e., faults are injected after the safety check),
our faults (or faulty scenarios) are injected through corrup-
tion of the raw data, and that corruption might be detected by
safety checks (if such checks were implemented as part of the
robotic application).
While we demonstrated the feasibility of a smart malware
attack in the context of the Raven-II surgical robot and its hap-
tic feedback rendering algorithm, our threat model exploits
vulnerabilities in the underlying framework (ROS). Hence, a
robotic application running on the most common version of
ROS, ROS 1, is vulnerable to MITM attacks and to smart mal-
ware that exploits the leaked data. Furthermore, the generic
idea of malware driven by ML algorithms can be expanded
to any computing infrastructure that generates a stream of
data if the data contain actionable intelligence that smart
malware can infer and the system has vulnerabilities that
allow malicious entities to access data. While we leverage
vulnerabilities in the ROS, as discussed in [1], various entry
points exist through which malicious entities could intrude
into robotic applications. By leveraging such vulnerabilities,
our design for smart malware can be revised to target robotic
applications in general.
4Please note that the goals of the two approaches were different. The goal
of the approach in [2] is to infer the time when the corrupted data will be
passed to the robot and update its state.
The work performed in this study is not intended to support
hackers, but to proactively assess the resiliency of robotic
applications, identify vulnerabilities in their design, and drive
development of methods to harden robotic systems. For in-
stance, the sensitivity of the haptic feedback rendering algo-
rithm to its input data (as identiﬁed during our experiment)
requires hardening of the data validation process. That hard-
ening can be done by validating the publisher (to maintain
the integrity of the data) or by deploying redundancy in the
sensors.
7.1 Protection
The leakage of control data being transmitted between compo-
nents of a robot can lead to inference of sensitive information
that can threaten the operation of the robot. As a result, it
is critical to secure the robot by (i) assuring that only autho-
rized entities can control robot operation, (ii) securing the
communications between the components of the application,
and (iii) closely monitoring the robot for anomalies. In this
section, we discuss technologies that can be used to secure
the application, and their limitations. Also, we introduce our
safety module, which detects abnormal circumstances and
brings the robot to a predeﬁned safe state.
In terms of computer security, MITM attacks have been
well-studied, and a number of protection and detection meth-
ods have been introduced [11,24,32]. For instance, to prevent
ARP poisoning (which is a critical step in performing an at-
tack), each machine can have its ARP table set to be static,
to prevent unknown entities from updating the table. Also,
authentication of the nodes can prevent unauthorized enti-
ties from hijacking a session. (I.e., unauthorized ROS nodes
should not be able to register to the ROS core, and entries that
can publish/subscribe a topic should be deﬁned.)
Security enhancements for ROS (SROS). To better se-
cure the communications within the robotics applications,
SROS [39, 55] provides TLS support in the socket-level trans-
port. However, the current distribution of SROS is limited to
TCPROS (not UDPROS) and robotic applications written in
Python (not C++ or Java). As an alternative, one can add a
layer of authentication by running all ROS nodes within a
VPN (which would require authentication), and that approach
is already common. However, it is not rare for malicious en-
tities to intrude into a protected network by using weak or
stolen credentials.
Secure ROS. Unlike the well-studied TCP MITM attack, our
ROS-speciﬁc attack model has not been well-investigated.
Fortunately, a “fork” of the core ROS packages was released
to enable secure communication in the ROS applications [51].
The “Secure ROS” introduced a new conﬁguration ﬁle, which
speciﬁes the conﬁguration of the application. Furthermore, by
utilizing IPSec, Secure ROS ensures that the IP packets cannot
be tampered with or spoofed. While Secure ROS enhances the
security of ROS applications, the neutralization of the patch
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 347the ROS master detects a name conﬂict (due to a new node’s
registering of itself with a name already in use), it terminates
the original node and registers the new node with the name
in conﬂict. Our safety module detects the shutdown signal
transmitted over the network (see Figure 13). Upon detecting
the shutdown signal due to a name conﬂict (see Figure 13),
our safety module (operating as another ROS node) termi-
nates the node that publishes the state of the robot joints. By
terminating the node, the safety module can prevent the mali-
cious entity from taking control of the robot. Furthermore, if
needed, the safety module can bring the robot to a predeﬁned
safe state (in our experiment, the reset position of the robot).
As the safety module runs on the ROS master with privilege,
we can be assured that the shutdown packet will be detected,
with minimal risk that the attacker can corrupt the detection.
Also, as the detection relies on an unusual signature, we can
minimize false positives. (I.e., name conﬂict is a rare event
and when there are multiple nodes with identical names by
design, the programmer enables the anonymous mode, which
pads a hash to the name to avoid the conﬂict.)
8 Related work
Attacks with learning features. In [41], an open-source
hacking AI, DeepHack, was presented. Powered with a neural
network, the tool learns how to intrude into web applications.
DeepLocker [28], on the other hand, takes advantage of a deep
neural network for target detection. Until the malware detects
the target, the malware disguises itself as benign software.
Furthermore, the malware encrypts the payload to conceal the
malicious intent, which makes reverse-engineering challeng-
ing. In [10], the authors leverage a learning technique to infer
an attack payload from CPS operational data. The malware
in [10] predicts failure-causing abnormalities in the CPS op-
erational data, and injects abnormalities into the control data
to corrupt the operation of the CPS.
Attacks against ROS. Some vulnerabilities of ROS were dis-
cussed in [42, 43]. Using the STOP surveillance system, the
authors demonstrate an attack that changes the route of the pa-
trol robot. They proposed the use of IPSec, which was indeed
incorporated in the upgrade to ROS 2. The whitelist method
proposed by Dóczi et al. [17] has also become part of the
new ROS framework. Similarly, [15] discusses a method for
preventing malicious publishers and subscribers from inter-
fering with a given ROS node network. The authors ensured
broadcast encryption by whitelisting nodes in an authenti-
cation server and by requiring any new publisher to run an
authentication to certify itself as a legitimate new publisher.
Despite the efforts to secure ROS applications, as demon-
strated in [13], a signiﬁcant number of ROS applications that
are connected to networks are vulnerable. The authors of [13],
by scanning over the whole IPV4 address space, identiﬁed
more than 100 hosts running as ROS masters. Also, in [5], the
authors demonstrate that ROS applications can be vulnerable
Figure 13: Packet capture of the network packet carrying the
“shutdown” command from the roscore, triggered by a conﬂict
in node names.
is not particularly difﬁcult. As the package is an addition to
an already existing ROS installation in the system, it has a
single parameter (deﬁned in a bash script) that enables the
patch. As a result, an attacker can overwrite the parameter to
disable the entire security patch, thus returning the system
back to the vulnerable ROS.
ROS 2. ROS 2 (released in 2015) [36] is a major update from
the original ROS. On top of introducing new features to ad-
dress challenges that arose from extended usage of the frame-
work (e.g., with real-time systems, or groups of robots), the
upgrade also covers the vulnerabilities discussed in this paper.
The ROS 2 uses the data distribution service (DDS) [34] for
publish-subscribe transport. The security enhancements pro-
vided by the Secure ROS and SROS patch can be embedded in
ROS 2 using DDS. Hence, the vulnerabilities exploited in this
paper can be eliminated by using the upgraded framework.
However, ROS 2 is not backward-compatible. As a result,
the existing applications must be rewritten to take advantage
of the new features in ROS 2, and such rewriting is not triv-
ial. Even if the developer manages to re-program the robotic
application with the new interface, conﬁguring of the DDS
to support the security needs is left to the robot’s program-
mers. Such conﬁguration requires thorough understanding
of encryption, certiﬁcation, and access control. Without se-
curity in mind, if the programmer decides not to enable the
security features of DDS (e.g., using the eProsima Fast RTPS
middleware [18]) or if the programmer makes a mistake in
conﬁguring the DDS [16], the vulnerabilities discussed in
this paper remain current. As discussed in [27], the DDS
and its implementation have limitations (e.g., lack of forward
security) and vulnerabilities (e.g., skipping of variable initial-
ization) that attackers can exploit.
7.2 Safety module
The limitations of existing technologies mean that the threats
described in this paper (especially that speciﬁc to ROS ap-
plications) remain current and, hence, can occur in any of
the 125+ existing robots. As a result, we ﬁnd a need for a
safety module that can (i) detect abnormalities in the robot
and (ii) take control of the robot and bring it to a safe state
under such circumstances. As discussed in Section 4, when
348          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Associationto attacks that modify the instructions of a Raven operator
(e.g., by manipulating packets to cause loss, reordering, or
delay of commands) and to session-hijacking attacks.
[6] Gary Bradski and Adrian Kaehler. Learning OpenCV:
Computer Vision with the OpenCV Library. O’Reilly
Media, Inc., 2008.
9 Conclusions
In this paper, we studied the impact of security attacks that
exploit security vulnerabilities in ROS to attack robotic appli-
cations. More speciﬁcally, we demonstrated (i) the possibility
of neutralizing the force feedback engine in Raven-II by cor-
rupting a message passed across ROS nodes over the network,
and (ii) the possibility of misleading the robot operator by
providing incorrect feedback. Our study of ROS and obser-
vations on the impact of security attacks reveal a need for
advanced security APIs to be provided by the framework. We
suggest that the applications be secured in the implementation
phase, and be enforced by the framework.
Acknowledgments
This material is based upon work supported by the National
Science Foundation under Grant Nos. 18-16673 and 15-45069.
Any opinions, ﬁndings, and conclusions or recommendations
expressed in this material are those of the authors and do not
necessarily reﬂect the views of the National Science Founda-
tion.
References
[1] Homa Alemzadeh. Data-driven Resiliency Assessment
of Medical Cyber-physical Systems. PhD thesis, Univer-
sity of Illinois at Urbana-Champaign, 2016.