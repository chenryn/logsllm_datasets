### Rendering and Force Feedback Impact

Incorrect rendering of force feedback can damage or endanger the underlying surface and subject the robot to excessive load. In Figure 11, we illustrate the impact of shifting depth map information during transmission from the publisher to the subscriber. The figure demonstrates that due to the shifted distance measure, the 3D rendering of the left half of the box is flattened (and would be difficult to distinguish from the surface without color differentiation), while the right side of the box appears to have gained volume. This fault model can lead to the robot penetrating the object, which would have been prevented with an uncorrupted image.

### Fault in Derived Reference Point

The final fault we examined was the corruption of the derived reference point (the ArUco marker). In Figure 12a, the reference point is correctly set on the ArUco marker, whereas in Figure 12b, the reference point has been shifted upward. Consequently, the distance between the object and the robot arm (indicated by a double-headed arrow) has been updated. Specifically, the distance in (b) is larger than in (a), where (a) represents the actual setup. For the corrupted distance, the rendered feedback becomes invalid. In the experiment shown in Figure 12, the haptic device did not receive haptic feedback upon touching the object's surface, leading to the robot penetrating the object.

### Figures

**Figure 10:**
- **(a)** Simulated Raven operation with an uncorrupted depth map.
- **(b)** Simulated Raven operation with a corrupted depth map. Note the differences within the dotted circles.

**Figure 11:**
- **(a)** Simulated Raven operation with an uncorrupted depth map.
- **(b)** Simulated Raven operation with a shifted depth map. Observe the issues within the dotted circles.

**Figure 12:**
- **(a)** Simulated Raven operation with an uncorrupted `camMsg`.
- **(b)** Simulated Raven operation with a shifted `camMsg`. Note the difference in the reference points within the dotted circles.

### Discussion

#### Generalization
As demonstrated in this paper, ROS 1 is vulnerable to various Man-in-the-Middle (MITM) attacks. Our prototype smart malware can utilize leaked data to trigger an attack at the most opportune time, maximizing its impact. By inferring the optimal time for executing the attack payload, the chances of exposure are reduced, making the attack appear as an accidental failure. Without smart triggering, frequent and likely unsuccessful injections of faults could alert system administrators to malicious intent. Our DBSCAN-based approach does not require extensive prior knowledge of the target robotic application, unlike the side-channel attack method introduced by Alemzadeh et al. [2], which predicts the robot's state from specific packet byte values. Our approach simply identifies dense regions of critical activities, requiring no detailed background knowledge of the robot's design or implementation. However, our attack is limited in its payload. Unlike the fault in [2], which exploits the time gap between safety checks and execution, our faults are injected through raw data corruption, which might be detected by safety checks if implemented.

While we demonstrated the feasibility of a smart malware attack using the Raven-II surgical robot and its haptic feedback rendering algorithm, our threat model exploits vulnerabilities in the underlying ROS framework. Therefore, any robotic application running on ROS 1 is vulnerable to MITM attacks and smart malware. The generic idea of ML-driven malware can be applied to any computing infrastructure that generates actionable data, provided the system has vulnerabilities that allow malicious access.

#### Protection
The leakage of control data between robot components can lead to the inference of sensitive information, threatening the robot's operation. It is crucial to secure the robot by:
1. Ensuring only authorized entities can control the robot.
2. Securing communications between application components.
3. Closely monitoring the robot for anomalies.

We discuss technologies for securing applications and their limitations. We also introduce our safety module, which detects abnormal circumstances and brings the robot to a predefined safe state.

##### Security Enhancements for ROS (SROS)
SROS provides TLS support for socket-level transport but is currently limited to TCPROS and Python applications. An alternative is to run all ROS nodes within a VPN, though this can still be compromised with weak or stolen credentials.

##### Secure ROS
Secure ROS introduces a new configuration file and uses IPSec to ensure IP packets cannot be tampered with or spoofed. However, an attacker can easily disable the security patch by overwriting a single parameter.

##### ROS 2
ROS 2, released in 2015, addresses the vulnerabilities discussed. It uses DDS for publish-subscribe transport and incorporates security enhancements. However, ROS 2 is not backward-compatible, and existing applications must be rewritten. Configuring DDS for security requires a deep understanding of encryption, certification, and access control. If these features are not enabled or misconfigured, the vulnerabilities persist.

### Safety Module
Given the limitations of existing technologies, there is a need for a safety module that can detect abnormalities and bring the robot to a safe state. As discussed, when the safety module detects a shutdown signal due to a name conflict, it terminates the node publishing the robot's joint state, preventing the malicious entity from taking control. The safety module runs with privileges on the ROS master, ensuring minimal risk of detection corruption and minimizing false positives.

### Related Work
- **Attacks with Learning Features:** Tools like DeepHack and DeepLocker use neural networks for intrusion and target detection, respectively. Other works leverage learning techniques to infer and inject attack payloads into CPS operational data.
- **Attacks against ROS:** Various vulnerabilities in ROS have been identified, and methods such as IPSec and whitelisting have been proposed. Despite these efforts, many ROS applications remain vulnerable, as demonstrated by scans identifying numerous hosts running as ROS masters.

### Conclusions
In this paper, we studied the impact of security attacks exploiting ROS vulnerabilities. We demonstrated the possibility of neutralizing the force feedback engine in Raven-II by corrupting messages and misleading the operator with incorrect feedback. Our observations highlight the need for advanced security APIs in the framework and suggest that applications should be secured during implementation and enforced by the framework.

### Acknowledgments
This work was supported by the National Science Foundation under Grant Nos. 18-16673 and 15-45069. Any opinions, findings, and conclusions or recommendations expressed are those of the authors and do not necessarily reflect the views of the National Science Foundation.

### References
[1] Homa Alemzadeh. Data-driven Resiliency Assessment of Medical Cyber-physical Systems. PhD thesis, University of Illinois at Urbana-Champaign, 2016.