# 分布式链路追踪在字节跳动的实践
## 作者：字节跳动基础架构可观测性基础设施团队 朱珠

### 大纲
1. 什么是分布式链路追踪（Trace）
2. 字节链路追踪系统的挑战、机遇和目标
3. 字节链路追踪系统的实现
4. 实践应用案例

### 什么是分布式链路追踪（Trace）
- **定义**：分布式链路追踪是一种监控技术，用于跟踪请求在多个分布式微服务节点之间的执行路径。
- **重要性**：通过将Metric、Log和Trace数据关联起来，形成一个完整的监控体系，从而提升系统的可观测性和故障排查效率。

### 字节链路追踪系统的挑战、机遇和目标
#### 挑战
- 线上流量巨大
- 微服务数量庞大且关系复杂，迭代速度快
- 研发团队规模大，分工复杂

#### 机遇
- 微服务框架高度统一
- 微服务高度容器化，环境一致
- 存储/中间件基础设施统一

#### 功能性目标
- **统一数据模型与语义规范**：建立MTL（Metric, Trace, Log）可靠关联关系
- **开放自定义能力**：支持不同业务场景下的自定义配置
- **中心化动态管控**：包括采样、染色、熔断限流、索引、脱敏等策略
- **一站式观测平台**：提高监控排障、SLO优化等场景的能效

#### 非功能性目标
- **集成开销最小化**：降低接入成本
- **平衡成本与需求**：高效处理和存储大量数据，保证秒级检索速度
- **多机房容灾完备**：确保单机房故障不影响整体可用性
- **简化架构与依赖**：便于部署和运维

### 字节链路追踪系统的实现
#### 数据模型
- **Span**：表示一个有时间跨度的事件，如一次RPC调用或函数执行
- **Event**：表示一个无时间跨度的事件，如一条日志记录或一次panic
- **Metric**：带有多维标签的数值，例如消息体大小
- **Trace**：一个请求上下文在多个分布式微服务节点上的完整执行链路
- **Transaction**：一条Trace在一个服务节点上的所有Span/Event/Metric对象构成的树形结构

#### 统一数据模型建立MTL可靠关系
- **Context贯穿整个请求生命周期**，在进程内及跨进程中持续传递，串联起所有相关数据
- **精确关联Trace与Log**：通过TraceID+SpanID实现
- **精确映射Trace与Metric**：通过多维Tag实现

#### 采样策略
- **固定概率采样**：基于Logid作为种子，按固定概率进行采样
- **自适应概率采样**：根据当前QPS自动调整采样率
- **染色采样**：对特定请求强制采样
- **PostTrace后置采样**：当Trace过程中出现异常时，触发采样以收集相关信息

#### 中心化配置管控
- **动态配置采样策略**：根据不同条件灵活调整
- **熔断保护机制**：防止Trace采集占用过多资源
- **自定义索引**：满足特定字段的检索需求
- **脱敏保密**：确保敏感信息的安全

#### 整体架构
- **私有协议数据流**：提升性能
- **高吞吐量日志存储**：底层采用自研技术
- **单元化架构**：保障多机房容灾完备性
- **精细灵活的调控能力**：兼顾实时查询与计算分析
- **准确度与时效性**：高效采集元数据

### 实践应用案例
#### 微服务P99毛刺请求根因定位
1. 观察耗时指标并筛选出毛刺请求
2. 发现客户端耗时高而服务端耗时低
3. 通过底层调用分析排除网络问题，确定卡顿发生在客户端进程
4. 查看Pod监控指标，发现CPU Throttle现象导致请求延迟

#### 全链路实时监控
- 从任意微服务节点检索上下游关联拓扑
- 实时观测各节点的流量、延迟、错误率、资源使用情况等，快速获取全链路状态

#### 业务活动全链路扩容估算
- 根据实际业务需求进行容量规划

#### 错误传播链分析
- 快速识别故障源头
- 分析异常来源及其影响范围
- 进行长期离线订阅，梳理强弱依赖关系
- 持续优化SLO

### 小结
- **Trace与Metric、Log的关系**：三者相辅相成，共同构建了全面的监控体系
- **字节链路追踪系统的挑战、机遇和目标**：应对大规模分布式系统中的复杂性，提供高效可靠的解决方案
- **系统实现**：涵盖数据模型设计、采样策略、配置管理等多个方面
- **实践应用案例**：展示了该系统在实际生产环境中的具体应用场景及其价值

THANKS