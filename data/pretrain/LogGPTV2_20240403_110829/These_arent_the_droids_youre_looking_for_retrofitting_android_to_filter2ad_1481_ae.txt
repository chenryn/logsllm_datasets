### Processes and Taint Tracking

Some methods prevent unauthorized processes from accessing sensitive data. However, these methods do not track taint propagation within applications, leading to the loss of taint when data is copied between objects. One particularly relevant approach is RIFLE by Vachharajani et al. [24], which enforces security policies at runtime by translating programs into a custom instruction set architecture designed to track information flow.

### Detecting Potential Abuses in Android Applications

Several researchers have focused on detecting potential abuses of permissions and data in Android applications. Enck et al. [9] developed a lightweight security checker called Kirin, which analyzes manifest files to identify dangerous combinations of permissions.

### Permission Models in Android and iOS

Android applications require user consent for all permissions at the time of installation [12]. In contrast, Apple's iOS platform uses a time-of-access consent model for certain resources (e.g., location [4]). This model provides users with more granular control over when applications can access sensitive resources, potentially reducing the success rate of ultimatums. However, it also increases the frequency of user interruptions. The Android team argues that the usability cost of time-of-access consents works "to the detriment of security" [12]. Regardless of when permissions are granted, neither the time-of-install nor the time-of-access consent model can prevent applications from misusing them.

### Conclusion

AppFence offers two approaches for protecting sensitive data in Android applications: shadowing sensitive data and blocking sensitive data from being exfiltrated off the device. Our study of 50 applications found that 34% had a direct conflict between desired functionality and the privacy constraints our controls were designed to enforce—ensuring that sensitive data never leave the device. The testing methodology we developed for assessing side effects proved valuable in characterizing the types of application functionality that may be impacted by privacy controls. For the remaining applications, all side effects could be avoided with the right choice of either data shadowing or exfiltration blocking. However, helping users make the right choice remains a challenge for future research.

### Acknowledgments

We would like to thank Intel Labs for supporting this work, William Enck for sharing Android application binaries, and Byung-Gon Chun, Peter Gilbert, Daniel Halperin, Patrick Gage Kelley, Robert Reeder, Anmol Sheth, the anonymous reviewers, and our shepherd, Ninghui Li, for providing valuable feedback. This work was supported by National Science Foundation award CNS-0917341.

### References

[1] android-apktool: Tool for reengineering Android apk files. http://code.google.com/p/android-apktool/.

[2] Privacy Blocker. http://privacytools.xeudoxus.com/.

[3] S. T. Amir Efrati and D. Searcey. Mobile-app makers face U.S. privacy investigation. http://online.wsj.com/article/SB10001424052748703806304576242923804770968.html, Apr. 5, 2011.

[4] Apple Inc. iPhone and iPod touch: Understanding location services. http://support.apple.com/kb/HT1975, Oct. 22, 2010.

[5] A. R. Beresford, A. Rice, N. Skehin, and R. Sohan. MockDroid: Trading privacy for application functionality on smartphones. In Proceedings of the 12th Workshop on Mobile Computing Systems and Applications (HotMobile), 2011.

[6] J. Chow, B. Pfaﬀ, T. Garﬁnkel, K. Christopher, and M. Rosenblum. Understanding data lifetime via whole system simulation. In USENIX Security Symposium, 2004.

[7] M. Egele, C. Kruegel, E. Kirda, and G. Vigna. PiOS: Detecting privacy leaks in iOS applications. In NDSS, 2011.

[8] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. TaintDroid: An information-flow tracking system for real-time privacy monitoring on smartphones. In OSDI, 2010.

[9] W. Enck, M. Ongtang, and P. McDaniel. On lightweight mobile phone application certification. In CCS, 2009.

[10] A. Felt and D. Evans. Privacy protection for social networking APIs. In Proceedings of Web 2.0 Security And Privacy (W2SP), 2008.

[11] Google Inc. Android developers: Content providers. http://developer.android.com/guide/topics/providers/content-providers.html.

[12] Google Inc. Android developers: Security and permissions. http://developer.android.com/guide/topics/security/security.html.

[13] Google Inc. Android developers: Using aapt. http://developer.android.com/guide/developing/tools/aapt.html.

[14] Google Inc. Android developers: Platform versions. http://developer.android.com/resources/dashboard/platform-versions.html, Aug. 2011.

[15] A. Jäskeläinen. Design, Implementation and Use of a Test Model Library for GUI Testing of Smartphone Applications. Doctoral dissertation, Tampere University of Technology, Tampere, Finland, Jan. 2011.

[16] J. Newsome, S. McCamant, and D. Song. Measuring channel capacity to distinguish undue influence. In Proceedings of the ACM SIGPLAN Fourth Workshop on Programming Languages and Analysis for Security, June 15, 2009.

[17] N. Provos. A virtual honeypot framework. In USENIX Security Symposium, 2004.

[18] E. Smith. iPhone applications & privacy issues: An analysis of application transmission of iPhone unique device identifiers (UDIDs). In Technical Report, 2010.

[19] L. Spitzner. Honeypots: Tracking Hackers. Addison-Wesley, Boston, MA, Sept. 10, 2002.

[20] Tampere University of Technology. Introduction: Model-based testing and glossary. http://tema.cs.tut.fi/intro.html.

[21] The Honeynet Project. Know Your Enemy: Revealing the Security Tools, Tactics, and Motives of the Blackhat Community. Addison-Wesley, 2001.

[22] S. Thurm and Y. I. Kane. The Journal’s cellphone testing methodology. The Wall Street Journal. Dec. 18, 2010. http://online.wsj.com/article/SB10001424052748704034804576025951767626460.html.

[23] S. Thurm and Y. I. Kane. Your apps are watching you. The Wall Street Journal. Dec. 18, 2010. http://online.wsj.com/article/SB10001424052748704694004576020083703574602.html.

[24] N. Vachharajani, M. J. Bridges, J. Chang, R. Rangan, G. Ottoni, J. A. Blome, G. A. Reis, M. Vachharajani, and D. I. August. RIFLE: An architectural framework for user-centric information-flow security. In MICRO, 2004.

[25] X. Wang, Z. Li, N. Li, and J. Y. Choi. PRECIP: Practical and retrofittable confidential information protection. In NDSS, Feb. 2008.

[26] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda. Panorama: Capturing system-wide information flow for malware detection and analysis. In CCS, 2007.

[27] Y. Zhou, X. Zhang, X. Jiang, and V. Freeh. Taming information-stealing smartphone applications (on Android). In International Conference on Trust and Trustworthy Computing (TRUST), 2011.

### Appendix A: When Applications Are "Less Functional"

When evaluating the impact of privacy controls on user experience, we consider certain side effects to render an application "less functional" if the application can perform its primary purpose but cannot perform some secondary function. Here, we explain the precise circumstances that led us to classify applications as less functional:

- **Device ID (IMEI)**: We classified games as less functional if they could not load a cross-application high-score profile because the profile is associated with the true device ID. Additionally, the iheartradio application was classified as less functional because its searches for nearby radio stations failed due to the inclusion of the device ID with the search request.
  
- **Location**: We included applications where location proximity provided enhanced, but not core, functionality. For example, the npr radio application enhances its primary service by identifying local stations, yearbook offers local chat in addition to other chat options, and heytell allows users to optionally include their current location with sent messages. Some applications could no longer automatically capture the user's location but offered manual entry (e.g., the apartments apartment-hunting application). The papertoss application became less functional when its high-score profile failed to load because it sends the user's location with the request.
  
- **Contacts**: We included the mocospace chat application, which could no longer add users' local contacts to the server-side chat contacts database. We also classified the quickmark barcode scanning application as less functional because it could not send a barcode image to someone in the contacts book if contacts were protected.
  
- **Bookmarks**: We included the skyfire browser, which could still browse the web but could not read or save bookmarks if they were protected.
  
- **Calendar**: We classified the tvguide application as less functional because it could not add reminders to the user's calendar if the calendar had been replaced by a shadow calendar.

### Appendix B: Applications Scripted for Automated Testing

| # | Application | Package Name |
|---|-------------|--------------|
| 1 | Antivirus | com.antivirus |
| 2 | Apartments | com.cellit.forrent |
| 3 | Assistant | com.netgate |
| 4 | Astrid | com.timsu.astrid |
| 5 | Autorun | com.rs.autorun |
| 6 | Avril | com.ringtone.avrillavigne |
| 7 | Basketball | com.droidhen.basketball |
| 8 | Bible | com.faithcomesbyhearing.android.bibleis |
| 9 | CallerID | net.bsdtelecom.calleridfaker |
| 10 | Christmas | com.maxdroid.christmas |
| 11 | Chuck Norris | com.bakes.chucknorrisfacts |
| 12 | Compass | com.a0soft.gphone.aCompass |
| 13 | Dex | com.mportal.dexknows.ui |
| 14 | Dilbert | com.tarsin.android.dilbert |
| 15 | DocsToGo | com.dataviz.docstogo |
| 16 | DroidJump | com.electricsheep.edj |
| 17 | ESPN | com.espnsport |
| 18 | FlightView | com.flightview.flightview_free |
| 19 | FMLife | fmlife.activities |
| 20 | HeyTell | com.heytell |
| 21 | HowToTie | com.artelplus.howtotie |
| 22 | iHeartRadio | com.clearchannel.iheartradio.controller2 |
| 23 | Kayak | com.kayak.android |
| 24 | MangaViewer | com.ceen.mangaviewer |
| 25 | Mario | de.joergjahnke.mario.android.free |
| 26 | Minesweeper | artfulbits.aiMinesweeper |
| 27 | MocoSpace | com.jnj.mocospace.android |
| 28 | Moron | com.distinctdev.tmtlite |
| 29 | MP3 Ringtone | net.lucky.star.mrtm |
| 30 | MusicBox | com.dreamstep.musicbox |
| 31 | NPR | org.npr.android.news |
| 32 | PaperToss | com.bfs.papertoss |
| 33 | Princesses | com.socialin.android.puzzle.princess |
| 34 | QuickMark | tw.com.quickmark |
| 35 | Simon | com.neilneil.android.games.simonclassic |
| 36 | Simpsons | us.sourcio.android.puzzle.simpson |
| 37 | SkyFire | com.skyfire.browser |
| 38 | SlotMachine | com.slot.slotmachine |
| 39 | SmartTacToe | com.dynamix.mobile.SmartTacToe |
| 40 | SmileyPops | com.boolbalabs.smileypops |
| 41 | SQD | com.superdroid.sqd |
| 42 | Starbucks | com.brennasoft.findastarbucks |
| 43 | Taskos | com.taskos |
| 44 | Trism | com.feasy.tris2.colorblocks |
| 45 | TuneWiki | com.tunewiki.lyricplayer.android |
| 46 | TVGuide | com.roundbox.android.tvguide.presentation.activity |
| 47 | VideoPoker | com.infimosoft.videopoker |
| 48 | WNYPages | com.avantar.wny |
| 49 | Yearbook | com.myyearbook.m |
| 50 | YellowPages | com.avantar.yp |

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content.