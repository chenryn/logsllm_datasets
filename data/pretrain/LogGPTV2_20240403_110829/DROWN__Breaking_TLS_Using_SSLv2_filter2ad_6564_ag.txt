Using the above formulas for u/t = 7/8, the overall
probability of success is P = 1/8· 0.71· 0.37· 1/256 =
1/7,774; thus the attacker expects to find an SSLv2 con-
formant ciphertext after testing 7,774 randomly chosen
TLS conformant ciphertexts. The attacker can decrease
the number of TLS conformant ciphertexts needed by mul-
tiplying each candidate ciphertext by several fractions.
Note that testing random s values until c1 = c0 · se mod
N is SSLv2 conformant yields a success probability of
Prnd ≈ (1/256)3 ∗ (255/256)249 ≈ 2−25.
A.2 Optimizing the chosen set of fractions
In order to deduce the validity of a single ciphertext, the
attacker would have to perform a non-trivial brute-force
search over all 5 byte master_key values. This translates
into 240 encryption operations.
The search space can be reduced by an additional opti-
mization, relying on the fractional multipliers used in the
first step. If the attacker uses u/t = 8/7 to compute a new
SSLv2 conformant candidate, and m0 is indeed divisible
by t = 7, then the new candidate message m1 = m0/t · u
is divisible by u = 8, and the last three bits of m1 (and
thus mksecret) are zero. This allows reducing the searched
master_key space by selecting specific fractions.
More generally, for an integer u, the largest power of 2
by which u is divisible is denoted by v2(u), and multiply-
ing by a fraction u/t reduces the search space by a factor
of v2(u). With this observation, the trade-off between the
3 metrics: the required number of intercepted ciphertexts,
the required number of queries, and the required number
of encryption attempts, becomes non-trivial to analyze.
Therefore, we have resorted to using simulations when
evaluating the performance metrics for sets of fractions.
The probability that multiplying a ciphertext by any frac-
tion out of a given set of fractions results in an SSLv2
conformant message is difficult to compute, since the
events are in fact inter-dependent: If m · 16/15 is con-
forming, then m is divisible by 5, greatly increasing the
probability that m· 4/5 is also conforming. However, it is
easy to perform a Monte Carlo simulation, where we ran-
domly generate ciphertexts, and measure the probability
that any fraction out of a given set produces a conforming
message. The expected required number of intercepted
ciphertexts is the inverse of that probability.
Formally, if we denote the set of fractions as F, and
the event that a message m is conforming as C(m), we
perform a Monte Carlo estimation of the probability PF =
P(∃ f ∈ F : C(m· f )), and the expected number of required
intercepted ciphertexts equals 1/PF. The required number
of oracle queries is simply 1/PF ·|F|. Accordingly, the re-
quired number of server connections is 2·1/PF ·|F|, since
each oracle query requires two server connections. And
as for the required number of encryption attempts, if we
denote this number when querying with a given fraction
f = u/t as E f , then E f = Eu/t = 240−v2(u). We further
define the required encryption attempts when testing a
ciphertext with a given set of fraction F as EF = ∑ f∈F E f .
Then the required number of encryption attempts in Phase
1 for a given set of fractions is (1/PF )· EF.
We can now give precise figures for the expected num-
ber of required intercepted ciphertexts, connections to the
targeted server, and encryption attempts. The results pre-
sented in Table 1 were obtained using the above approach
with one billion random ciphertexts per fraction set F.
704  25th USENIX Security Symposium 
USENIX Association
16
A.3 Rotation and multiplier speedups
For a randomly chosen s, the probability that the two
most significant bytes are 0x00 02 is 2−16; for a 2028-bit
modulus N the probability that the next (cid:31)m − (cid:31)k − 3 bytes
of m2 are all nonzero is about 0.37 as in the previous
section, and the probability that the (cid:31)k +1 least significant
delimiter byte is 0x00 is 1/256. Thus a randomly chosen s
will work with probability 2−25.4 and the attacker expects
to try 225.4 values for s before succeeding.
However, since the attacker has already learned (cid:31)k + 3
most significant bytes of m1 · R−1 mod N, for (cid:31)k ≥ 4 and
s < 230 they do not need to query the oracle to learn if the
two most significant bytes are SSLv2 conformant; they
can compute this themselves from their knowledge of
˜m1·R−1. They iterate through values of s, test that the top
two bytes of ˜m1·R−1 mod N are 0x00 02, and only query
the oracle for s values that satisfy this test. Therefore, for a
2048-bit modulus they expect to test 216 values offline per
oracle query. The probability that a query is conformant is
then P = (1/256)∗(255/256)249 ≈ 1/678, so they expect
to perform 678 oracle queries before finding a fully SSLv2
conformant ciphertext c2 = (s· R−1)ec1 mod N.
We can speed up the brute force testing of 216 values
of s using algebraic lattices. We are searching for values
of s satisfying ˜m1R−1s < 3B mod N, or given an offset
s0 we would like to find solutions x and z to the equation
˜m1R−1(s0 +x) =2B +z mod N where |x| < 216 and |z| <
B. Let X = 215. We can construct the lattice basis
L =
−B X ˜m1R−1
0
0
XN
0
˜m1R−1s0 + B
0
N
We then run the LLL algorithm [31] on L to obtain a
reduced lattice basis V containing vectors v1,v2,v3. We
then construct the linear equations f1(x,z) =v 1,1/B· z +
v1,2/X · x + v1,3 = 0 and f2(x,z) = v2,1/B · z + v2,2/X ·
x + v2,3 = 0 and solve the system of equations to find a
candidate integer solution x = ˜s. We then test s = ˜s + s0
as our candidate solution in this range.
detL = XZN2 and dimL = 3, thus we expect the
vectors vi in V to have length approximately |vi| ≈
(XZN2)1/3. We will succeed if |vi| < N, or in other words
XZ < N. N ≈ 28(cid:31)m, so we expect to find short enough
vectors. This approach works well in practice and is sig-
nificantly faster than iterating through 216 possible values
of ˜s for each query.
In summary, given an SSLv2 conformant ciphertext
c1 = me
1 mod N, we can efficiently generate an SSLv2
conformant ciphertext c2 = me
2 mod N where m2 = s ·
m1 · R−1 mod N and we know several most significant
bytes of m2, using only a few hundred oracle queries in
expectation. We can iterate this process as many times as
we like to continue generating SSLv2 conformant cipher-
texts ci for which we know increasing numbers of most
significant bytes, and which have a known multiplicative
relationship to our original message c0.
A.4 Rotations in the general DROWN attack
After the first phase, we have learned an SSLv2 confor-
mant ciphertext c1, and we wish to shift known plaintext
bytes from least to most significant bits. Since we learn
the least significant 6 bytes of plaintext of m1 from a suc-
cessful oracle OSSLv2-export query, we could use a shift of
2−48 to transfer 48 bits of known plaintext to the most
significant bits of a new ciphertext. However, we perform
a slight optimization here, to reduce the number of en-
cryption attempts. We instead use a shift of 2−40, so that
the least significant byte of m1 · 2−40 and ˜m1 · 2−40 will
be known. This means that we can compute the least sig-
nificant byte of m1 · 2−40 · s mod N, so oracle queries now
only require 232 encryption attempts each. This brings
the total expected number of encryption attempts for each
shift to 232 ∗ 678 ≈ 241.
We perform two such plaintext shifts in order to obtain
an SSLv2 conformant message, m3 that resides in a nar-
row interval of length at most 28(cid:31)−66. We can then obtain
a multiplier s3 such that m3 · s3 is also SSLv2 conformant.
Since m3 lies in an interval of length at most 28(cid:31)−66, with
high probability for any s3 < 230, m3·s3 lies in an interval
of length at most 28(cid:31)m−36 < B, so we know the two most
significant bytes of m3 · s3. Furthermore, we know the
value of the 6 least significant bytes after multiplication.
We therefore test possible values of s3, and for values
such that m3 · s3 ∈ [2B,3B), and (m3 · s3)[(cid:31)m − 5] =0 , we
query the oracle with c3 · se
3 mod N. The only condition
for PKCS conformance which we haven’t verified be-
fore querying the oracle is the requirement of non-zero
padding, which holds with probability 0.37.
In summary, after roughly 1/0.37 = 2.72 queries we
expect a positive response from the oracle. Since we know
the value of the 6 least significant bytes after multiplica-
tion, this phase does not require performing an exhaustive
search. If the message is SSLv2 conformant after multipli-
cation, we know the symmetric key, and can test whether
it correctly decrypts the ServerVerify message.
A.5 Adapted Bleichenbacher iteration
After we have bootstrapped the attack using rotations, the
original algorithm proposed by Bleichenbacher can be
applied with minimal modifications.
The original step obtains a message that starts with
the required 0x00 02 bytes once in roughly every two
queries on average, and requires the number of queries to
be roughly 16(cid:31)m. Since we know the value of the 6 least
significant bytes after multiplying by any integer, we can
only query the oracle for multipliers that result in a zero
6th least significant byte, and again an exhaustive search
over keys is not required. However, we cannot ensure
USENIX Association  
25th USENIX Security Symposium  705
17
that the padding is non-zero when querying, which again
holds with probability 0.37. Therefore, for a 2048-bit
modulus, the overall expected number of queries for this
phase is roughly 2048∗ 2/0.37 = 11,070.
A.6 Special DROWN MITM performance
For the first step, the probability that the three padding
bytes are correct remains unchanged. The probability that
all the intermediate padding bytes are non-zero is now
slightly higher, P1 = (1− 1/256)229 = 0.41, yielding an
overall maximal success probability P = 0.1· 0.41· 1
256 =
1/6,244 per oracle query. Since the attacker now only
needs to connect to the server once per oracle query, the
expected number of connections in this step is the same,
6,243. Phase 1 now yields a message with 3 known
padding bytes and 24 known plaintext bytes.
fraction. For
For the remaining rotation steps, each rotation requires
an expected 630 oracle queries. The attacker could now
complete the original Bleichenbacher attack by perform-
ing 11,000 sequential queries in the final phase. However,
with this more powerful oracle it is more efficient to apply
a rotation 10 more times to recover the remaining plain-
text bits. The number of queries required in this phase is
now 10· 256/0.41 ≈ 6,300, and the queries for each of
the 10 steps can be executed in parallel.
Using multiple queries per
the
OSSLv2-extra-clear oracle,
the attacker can increase
their chances of success by querying the server multiple
times per ciphertext and fraction, using different cipher
suites with different key lengths. They can negotiate
DES and hope the 9th least significant byte is zero, then
negotiate 128-bit RC4 and hope the 17th least significant
byte is zero, then negotiate 3DES and hope the 25th
least significant is zero. All three queries also require
the intermediate padding bytes to be non-zero. This
technique triples the success probability for a given
pair of (ciphertext, fraction), at a cost of triple the
queries. Its primary benefit is that fractions with smaller
denominators (and thus higher probabilities of success)
are now even more likely to succeed.
For a random ciphertext, when choosing 70 fractions,
the probability of the first zero delimiter byte being in
one of these three positions is 0.01. Hence, the attacker
can use only 100 recorded ciphertexts, and expect to use
100∗ 70∗ 3 = 21,000 oracle queries. For the Extra Clear
oracle, each query requires one SSLv2 connection to the
server. After obtaining the first positive response from the
oracle, the attacker proceeds to phase 2 using 3DES.
A.7 Special DROWN with combined oracles
Using the Leaky Export oracle, the probability that a
fraction u/t will result in a positive response is P = P0∗P3,
where the formula for computing P0 = P((m· u/t)[1,2] =
00||02) is provided in Appendix A.1, and P3 is, for a
2048-bit modulus:
P3 = P(0x00 (cid:26)∈ {m3, . . . ,m 10}∧
0x00 ∈ {m11, . . . ,m (cid:28)})
= (1− 1/256)8 ∗ (1− (1− 1/256)246) =0.60
(1)
Phase 1. Our goal for this phase is to obtain a divisor t
as large as possible, such that t|m. We generate a list of
fractions, sorted in descending order of the probability
of resulting in a positive response from OSSLv2-export-leaky.
For a given ciphertext c, we then query with the 50 frac-
tions in the list with the highest probability, until we ob-
tain a first positive response for a fraction u0/t0. We can
now deduce that t0|m. We then generate a list of fractions
u/t where t is a multiple of t0, sort them again by success
probability, and again query with the 50 most probable
fractions, until a positive answer is obtained, or the list is
exhausted. If a positive answer is obtained, we iteratively
re-apply this process, until the list is exhausted, resulting
in a final fraction u∗/t∗.
Phase 2. We then query with all fractions denominated
by t∗, and hope the ciphertext decrypts to a plaintext of
one of seven possible lengths: {2,3,4,5,8,16,24}. As-
suming that this is the case, we learn at least three least
significant bytes, which allows us to use the shifting tech-
nique in order to continue the attack. Detecting plaintext
lengths 8, 16 and 24 can be accomplished using three Ex-
tra Clear oracle queries, employing DES, 128-bit RC4 and
3DES, respectively, as the chosen cipher suite. Detecting
plaintext lengths 2, 3, 4 and 5 can be accomplishing by
using a single Leaky Export oracle query, which requires
at most 241 offline computation. In fact, the optimization
over the key search space described in Section 3.2.1 is
applicable here and can slightly reduce the required com-
putation. Therefore, by initiating four SSLv2 connections
and performing at most 241 offline work, the attacker can
test for ciphertexts which decrypt to one of these seven
lengths.
In practice, choosing 50 fractions per iteration as de-
scribed above results in a success probability of 0.066 for
a single ciphertext. Hence, the expected number of re-
quired ciphertexts is merely 1/0.066 = 15. The expected
number of fractions per ciphertext for phase 1 is 60, as
in most cases phase 1 consists of just a few successful
iterations. Since each fraction requires a single query to
OSSLv2-export-leaky, the overall number of queries for this
stage is 15∗ 60 = 900, and the required offline computa-
tion is at most 900∗ 241 ≈ 251, which is similar to general
DROWN. For a 2048-bit RSA modulus, the expected
number of queries for phase 2 is 16. Each query con-
sists of three queries to OSSLv2-extra-clear and one query to
OSSLv2-export-leaky, which requires at most 241 computa-
tion. Therefore in expectancy the attacker has to perform
245 offline computation for phase 2.
706  25th USENIX Security Symposium 
USENIX Association
18