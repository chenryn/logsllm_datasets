### Optimized Text

#### Increased Link Speeds and Larger WANs
The increasing link speeds and the expansion of Wide Area Networks (WANs) suggest that future switches may require a greater number of rules. If switches support only 1,000 rules, traditional k-shortest path routing methods can utilize only 90% of the network capacity. In contrast, SWAN's dynamic tunnels approach can fully utilize network capacity with significantly fewer rules, aligning well with the capabilities of current-generation switches.

#### Dynamic Tunnel Stages
Figure 16 (right) illustrates the number of stages required for dynamically changing tunnels, assuming a limit of 750 OpenFlow rules, which is supported by our testbed switches. With a 10% buffer, only two stages are needed 95% of the time. This efficiency is due to:
1. The minimal set of rules required per interval.
2. The slow change in demand matrices across adjacent intervals, providing temporal locality.

#### Microbenchmarks
We conclude our evaluation of SWAN with key microbenchmarks.

**Update Time:**
Figure 17 shows the time required to update IDN from the start of a new epoch. Our controller uses a PC with a 2.8 GHz CPU and runs unoptimized code. The left graph presents a cumulative distribution function (CDF) across all updates, while the right graph depicts the average time spent in various parts. Most updates complete within 22 seconds, with the majority of this time spent waiting for service rate limits to take effect (10 seconds each for reducing and increasing rates, t1 to t3 and t4 to t5, respectively). SWAN computes the congestion-controlled plan concurrently with the first rate reduction. The network’s data plane is in flux for an average of 600 ms (t3 to t4), including communication delays and rule updates. Without explicit resource signaling, the average update time would be just 600 ms.

**Traffic Carried During Updates:**
During updates, SWAN ensures high network utilization. As shown in Figure 18a, the median traffic carried by SWAN during updates is 96% compared to an optimal method with instantaneous updates.

**Update Frequency:**
Figure 18b demonstrates that frequent updates to the network’s data plane lead to higher efficiency. It plots the drop in throughput as the update duration increases. Despite service demands changing every 5 minutes, the network data plane updates at a slower rate (x-axis), and the controller allocates as much traffic as the current data plane can carry. An update frequency of 10 (100) minutes reduces throughput by 5% (30%).

**Prediction Error for Interactive Traffic:**
The error in predicting interactive traffic demand is minimal. Only 1% of the time does the actual amount of interactive traffic on a link differ from the predicted amount by over 1%.

### Discussion
This section addresses several issues not covered in the main body of the paper.

**Non-Conforming Traffic:**
Services may occasionally send more traffic than allocated, possibly due to bugs. SWAN can detect such situations using traffic logs collected from switches every 5 minutes. It then notifies the service owners and protects other traffic by re-marking the DSCP bits of non-conforming traffic to a lower class, ensuring it is carried only if there is spare capacity.

**Truthful Declaration:**
Services may misdeclare their traffic priority or request more bandwidth than they need. SWAN discourages this behavior through appropriate pricing, where services pay more for higher priority and for all allocated resources, even within a single organization.

**Richer Service-Network Interface:**
Our current design features a simple interface between services and the network based on current bandwidth demand. Future work will explore a richer interface, allowing services to reserve resources ahead of time and express their needs in terms of total bytes and deadlines. This can further boost efficiency, for example, by enabling store-and-forward transfers through intermediate data centers. The key challenge is designing scalable and fair allocation mechanisms that accommodate diverse service needs.

### Related Work
SWAN builds upon several themes in prior research.

**Intra-DC Traffic Management:**
Recent works manage intra-DC traffic to balance load [1, 7, 8] or share among self-interested parties [16, 28, 31]. SWAN is similar to the former in using centralized traffic engineering (TE) and to the latter in providing fairness. However, intra-DC constraints and opportunities do not always translate to WANs. For example, EyeQ [16] assumes a full bisection bandwidth core, which is not typical for WANs. Seawall [31] uses TCP-like adaptation for fair sharing, but high round-trip times (RTTs) in WANs slow convergence. Faircloud [28] identifies strategy-proof sharing mechanisms, and SWAN uses explicit resource signaling to prevent greedy actions.

**WAN TE & SDN:**
B4 [15] also uses SDNs in inter-DC WANs. While B4 develops custom switches and integrates existing routing protocols, SWAN focuses on congestion-free data plane updates and efficient use of commodity switch forwarding table capacity.

**Optimizing WAN Efficiency:**
There is extensive literature on optimizing WAN efficiency, including tuning ECMP weights [12], adapting allocations across pre-established tunnels [10, 17], storing and re-routing bulk data at relay nodes [21], caching at the application layer [32], and leveraging reconfigurable optical networks [22]. SWAN not only aims for bandwidth efficiency but also addresses performance and bandwidth requirements of different traffic classes. It can enhance many systems by providing available bandwidth information and offering routes through the WAN that may not be discovered by application-layer overlays.

**Guarantees During Network Update:**
Some recent work provides guarantees during network updates, such as connectivity, loop-free paths, or consistent SDN rules [19, 23, 29, 34]. SWAN offers a stronger guarantee of no congestion during forwarding rule changes. Vanbever et al. [34] suggest finding an ordering of updates to individual switches that avoids congestion, but such an ordering may not exist, especially at high utilization.

### Conclusions
SWAN enables a highly efficient and flexible inter-DC WAN by coordinating service sending rates and centrally configuring the network data plane. Frequent network updates are necessary for high efficiency, and we have shown how, by leaving a small amount of scratch capacity on links and switch rule memory, these updates can be implemented quickly and without congestion or disruption. Testbed experiments and data-driven simulations demonstrate that SWAN can carry 60% more traffic than current practices.

### Acknowledgements
We thank Rich Groves, Parantap Lahiri, Dave Maltz, and Lihua Yuan for feedback on the design of SWAN. We also thank Matthew Caesar, Brighten Godfrey, Nikolaos Laoutaris, John Zahorjan, and the SIGCOMM reviewers for feedback on earlier drafts of the paper.

### References
[References remain unchanged]

---

This optimized text is more structured, clear, and professional, making it easier to read and understand.