One limitation of the functional approach is discoverability: which functions
can be applied to a given type? This is not necessary however: We (should)
know all the functions which take an object of given type as first argument.
This leads to the possibility of code completion:
    abstract type Animal end
    struct Cat 
The important point is that it doesn't change the fundamentals of the language
at all**, it's just syntactic sugar with the huge benefit of discoverability
in the REPL. It might also hugely increase adoption.
Corollary: An inverse 'methods' function which lists all the methods for a
given type (can be huge).
(** I've read https://discourse.julialang.org/t/psa-julia-is-not-at-that-
stage-of-development-anymore/44872 )