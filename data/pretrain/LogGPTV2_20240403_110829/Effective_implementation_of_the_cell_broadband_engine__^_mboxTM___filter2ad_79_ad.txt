and IBM 4758 [27] proposed original secure co-processors
for the application validation and decryption. In those sys-
tems, the main processor and the secure co-processor col-
laborate with each other to provide a secure domain. The
secure co-processors have secure local memory which is not
accessible from any software or from other hardware. It is
useful to store decryption keys or other secrets in such a se-
cure memory. The advantage of co-processor solutions are
easy setup of the secure domains by attaching co-processors
and installing software stacks for them. Compared with the
SPE isolation loader, the software stacks for IBM 4758 and
NGSCB do not support encrypted application execution.
Also, in our approach, the SPE isolation loader validates the
integrity of a security-sensitive application every time when
it is initiated, because we address attacks during the system
runtime. Dyad, IBM 4758, and NGSCB perform the secure
boot only at the boot time. In Dyad, since the applications
are encrypted with the hardware root key, application de-
velopers must build new binaries for other machines with
these diﬀerent hardware keys to execute their applications
on these machines. It is impractical to distribute applica-
tions tightly coupled with speciﬁc hardware. At the same
time, our layered structure enables application developers
to make their programs independent of hardware crypto-
311graphic algorithms, although they are dependent on the SPE
isolation loader’s cryptographic algorithms. The software
authentication layer can hide the hardware changes, which
provides portability and ﬂexibility for their applications.
6.3 Secure Main-processors
In XOM [16] and Cerium [5], secure and trusted soft-
ware validates the integrity of each application whenever
data is transferred to a CPU. When a CPU needs to send
any computed results back to the main memory, the secure
and trusted software encrypts them prior to the data trans-
fers. Both XOM and Cerium assume that secure and trusted
software has the highest privilege level, since neither system
trusts the commodity operating systems. To protect secure
and trusted software against tampering (e.g., a DMA attack
[19] that can directly attack the supervisory software), the
whole image of that program must stay in the cache or in
local memory in the CPU, as in our approach. However,
[20] pointed out that XOM has a security ﬂaw. It is possible
for hackers to use replay attacks against the encrypted data
and instructions from a XOM processor.
AEGIS [22] is a system to realize secure application load-
ing based on a secure boot. It also supports encrypted ap-
plication execution similar to the SPE isolation loader. In
contrast to our approach, AEGIS does not utilize a run-
time secure boot.
Instead, they embed hash values of a
runtime system, in particular for a secure small kernel into
an application image at build time. When an application is
launched, secure and trusted software computes the current
hash values of the running hypervisor, kernel and the target
application. It subsequently validates the target application
by comparing the embedded hash values with the current
ones. However, in this approach, programmers must rebuild
their applications every time security patches for the oper-
ating systems or hypervisors are released, because the hash
values of those programs will be changed. In contrast, we
establish a chain-of-trust with the runtime secure boot with
the layered structure. In our approach, the hash values of
the underlying software are not required for the application
build process.
In XOM, Cerium, and AEGIS, when secrets are trans-
ferred from the caches of a secure CPU to the main mem-
ory, secure and trusted software or hardware automatically
encrypts them with their hard-coded cryptographic algo-
rithms. Although application programmers are freed from
taking care of the secure secrets handling, it is diﬃcult to
change the encryption algorithms according to application
requests.
In contrast, we allow application developers to
program cryptographic algorithms protecting the secrets to
be transferred from the isolated LS to the main memory.
This provides ﬂexibility in programming secure applications
according to users’ requirements. Our software stack also
provides a high-performance cryptographic user library, the
SPE cryptographic library [1]. Application developers can
easily program secure DMA transfer functions.
TrustZone [25] is also categorized in this group, but this
technology is diﬀerent from these solutions. In TrustZone, a
new privilege level is added into an ARM processor, which
realizes both a secure domain and a non-secure domain in
one machine. A secure kernel, secure device drivers, and
secure applications are running in the secure domain, while
a traditional kernel, drivers and applications are running in
the non-secure domain.
It is impossible to access the se-
cure domain resources from the non-secure domain, because
TrustZone partitions both domains at the hardware level.
In the secure domain, a secure boot is performed from the
kernel layer to the application layer. Note that the secure
kernel that has the role of loading the secure applications is
validated only at the system boot time. The SPE isolation
loader that has the same role is also validated by the hard-
ware every time when an SPE secure application is launched.
The main diﬀerence between our work and TrustZone is that
the isolation runtime modules isolate the secure application
domain from the supervisory software domain. No super-
visory software is running in the same memory space in
the secure application domain. When third-parties secure
drivers or secure applications are concurrently running in
the TrustZone secure domain, those programs might try to
observe the behavior of a security-sensitive application or
it might be possible for hackers to steal secret data by at-
tacking security ﬂaws in these third parties’ programs. Our
approach reduces these security risks.
7. CONCLUSION AND FUTURE WORK
We have introduced the detailed design and implementa-
tion of an SPE isolation loader, which is a part of the IBM
SDK for Multicore Acceleration. The SPE isolation loader
makes security practical, extensible, and portable by exploit-
ing the Cell/B.E. security features. The coupling technique
for the digital certiﬁcate and the decryption key introduced
in this paper solved the substituted-ciphertext attack that
can reveal secrets to others having legitimate signing keys.
In the performance measurements, it took only 50 mil-
liseconds for the SPE secure application load process, in-
cluding RSA-2048 decryption and AES-128 decryption pro-
cesses, even if the SPE secure application is large. Note
that this overhead only aﬀects the SPE secure application
load. Once an SPE secure application obtains control, the
application can utilize all of the hardware resources, such
as the registers, LS, and channels, to obtain high perfor-
mance from the SPE. Our evaluation also showed that we
could implement the SPE isolation loader eﬃciently and se-
curely. If we replace the RSA-2048 decryption part with a
better cryptographic algorithm such as Elliptic Curve Cryp-
tography, it would be possible to apply a sign-then-encrypt
policy to our loader. The design and implementation of a
sign-then-encrypt policy is future work.
In addition, we have developed a code veriﬁcation service
in Section 5 by extending the SPE isolation loader’s vali-
dation feature. This example demonstrated that it would
be possible to realize a virtual TPM or a virtual IBM 4758
co-processor in software. Although we only showed the val-
idation implementation in this paper, our service can also
be extended as a cryptographic accelerator by integrating
it with AES and RSA encryption/decryption in the SPU
cryptographic library. For instance, a software-based secure
cryptographic accelerator would encrypt all outgoing traﬃc
from a cluster of machines or decrypt all incoming traﬃc for
the cluster. The cryptographic keys never leave the secure
vault with our framework. We will investigate such applica-
tions in the future.
8. ACKNOWLEDGMENTS
The authors would like to thank the management team,
development team, the researchers, and the architects for
312their support and guidance. In particular, we would like to
thank Mike Day, Peter Hofstee, Dan Brokenshire, Jeremy
Kerr, Mark Nutter, Arnd Bergmann, Mike Kistler, Sally
Tekulsky, Mike Perks, and Vladimir Zbarsky. This work
would not have been possible without their support.
9. REFERENCES
[1] SPE Cryptographic Library User
Documentation Version 1.0. http://publib.boulder.
ibm.com/infocenter/systems/scope/syssw/index.
jsp?topic=/eicce/SPE_Libcrypto_API_v1.0.
pdf&Open&S_TACT=105AGX16&S_CMP=HP.
[2] PowerXCell 8i Hardware Initialization Guide.
http://www-01.ibm.com/chips/techlib/techlib.
nsf/techdocs/53991AEE3346F21E0025751A0015539F/
$file/PXC8i_HIG_V1.2_8Dec2008.pdf.
detection. In System Administration, Networking and
Security Conference III, 1994.
[16] David Lie, Chandramohan Thekkath, Mark Mitchell,
Patrick Lincoln, Dan Boneh, John Mitchell, and Mark
Horowitz. Architectural support for copy and tamper
resistant software. In Proceedings of the 9th
International Conference on Architectural Support for
Programming Languages and Operating Systems
(ASPLOS-IX), pages 168–177, November 2000.
[17] Jonathan M. McCune, Bryan J. Parno, Adrian Perrig,
Michael K. Reiter, and Hiroshi Isozaki. Flicker: an
execution infrastructure for tcb minimization. In
Eurosys ’08: Proceedings of the 3rd ACM
SIGOPS/EuroSys European Conference on Computer
Systems 2008, pages 315–328, New York, NY, USA,
2008. ACM.
[18] Microsoft NGSCB. http://www.microsoft.com/
[3] AT97SC3203S SMBus Two-Wire Interface Summary.
resources/ngscb/default.mspx.
http://www.atmel.com/dyn/resources/prod_
documents/5132s.pdf.
[4] Cell Broadband Engine Architecture Version 1.02.
http://www-01.ibm.com/chips/techlib/techlib.
nsf/techdocs/1AEEE1270EA2776387257060006E61BA/
$file/CBEA_v1.02_11Oct2007_pub.pdf.
[5] Benjie Chen and Robert Morris. Certifying program
execution with secure processors. In HOTOS’03:
Proceedings of the 9th conference on Hot Topics in
Operating Systems, pages 23–23, Berkeley, CA, USA,
2003. USENIX Association.
[6] Colin Percival. Cache missing for fun and proﬁt.
http://www.daemonology.net/papers/htt.pdf.
[7] Christian S. Collberg and Clark Thomborson.
Watermarking, tamper-prooﬁng, and obfuscation tools
for software protection. IEEE TRANSACTIONS ON
SOFTWARE ENGINEERING, 28(8):735–746, August
2002.
[8] Microsoft Corporation. Authenticode.
[19] Peter Panholzer. Physical security attacks on windows
vista. http://www.sec-consult.com/fileadmin/
Whitepapers/Vista_Physical_Attacks.pdf, 2008.
[20] William Shapiro and Radek Vingralek. How to
Manage Persistent State in DRM Systems. In DRM
’01: Revised Papers from the ACM CCS-8 Workshop
on Security and Privacy in Digital Rights
Management, pages 176–191, London, UK, 2002.
Springer-Verlag.
[21] Shimizu Kanna. The Cell Broadband Engine
Processor Security Architecture. http://www-
128.ibm.com/developerworks/power/library/pa-
cellsecurity.
[22] G. Edward Suh, Dwaine Clarke, Blaise Gassend,
Marten van Dijk, and Srinivas Devadas. The aegis
processor architecture for tamper-evident and
tamper-resistant processing. Technical Report
LCS-TM-460, MIT Laboratory for Computer Science,
February 2003.
http://technet.microsoft.com/en-us/library/
cc750035.aspx.
[23] Trusted Computing Group. https:
//www.trustedcomputinggroup.org/specs/TPM/.
[9] Don Davis. Defective sign & encrypt in s/mime,
[24] Chenxi Wang, Jonathan Hill, John Knight, and Jack
pkcs#7, moss, pem, pgp, and xml. http://world.
std.com/~dtd/sign_encrypt/sign_encrypt7.html.
[10] B. Flachs, S. Asano, S. H. Dhong, H. P. Hofstee,
G. Gervais, R. Kim, T. Le, P. Liu, J. Leenstra,
J. Liberty, B. Michael, H.-J. Oh, S. M. Mueller,
O. Takahashi, A. Hatakeyama, Y. Watanabe, and
N. Yano. The microarchitecture of the streaming
processor for a cell processor. In Proceedings of the
IEEE International Solid-State Circuits Symposium,
pages 184–185, February 2005.
Davidson. Software tamper resistance: Obstructing
static analysis of programs. Technical Report
CS-2000-12, Dept. Computer science, University of
Virginia, Charlottesville, VA, USA, 2000.
[25] Peter Wilson, Alexandre Frey, Tom Mihm, Danny
Kershaw, and Tiago Alves. Implementing Embedded
Security on Dual-Virtual-CPU Systems. IEEE Des.
Test, 24(6):582–591, 2007.
[26] Bennet Yee. Using secure coprocessors. PhD thesis,
Carnegie Mellon University, May 1994.
[11] GNU Toolchain 4.1.1 and GDB for the Cell BE’s
[27] Xiaolan Zhang, Leendert van Doorn, Trent Jaeger,
PPU/SPU. http://www.bsc.es/projects/
deepcomputing/linuxoncell/.
[12] GNU GRand Uniﬁed Bootloader (GRUB).
http://www.gnu.org/software/grub/grub.en.html.
[13] John L. Hennessy and David A. Patterson. Computer
Architecture: A Quantitative Approach. Morgan
Kaufmann Publishers, third edition, 2002.
[14] IBM SDK for Multicore Acceleration V3.1. http:
//www-03.ibm.com/technology/cell/swlib.html.
[15] Gene. H. Kim and Eugene. H. Spaﬀord. Experiences
with tripwire: Using integrity checkers for intrusion
Ronald Perez, and Reiner Sailer. Secure
coprocessor-based intrusion detection. In Proceedings
of the 10th workshop on ACM SIGOPS European
workshop: beyond the PC, 2002.
tertainment, Inc.
• Cell Broadband Engine is a trademark of Sony Computer En-
• IBM, POWER, Power Architecture, PowerPC, PowerXCell are
trademarks of IBM Corporation in the United States, other
countries, or both.
• Other company, product, or service names may be trademarks
or service marks of others. Other company, product, or service
names may be trademarks or service marks of others.
313