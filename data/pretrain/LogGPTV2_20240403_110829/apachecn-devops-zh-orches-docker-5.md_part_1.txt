# 五、Docker 社区
到目前为止，我们一直忙于学习所有关于 Docker 的知识。影响开源项目寿命的一个主要因素是它周围的社区。Docker 的创作者，Docker Inc .(**dot cloud 的分支)**，负责开发和维护 Docker 及其姊妹项目如 libcontainer、libchan、swarm 等(完整列表可在[github.com/docker](http://github.com/docker)找到)。然而，像任何其他开源项目一样，开发是开放的(在 GitHub 中)，它们接受拉请求。
该行业也接受了 Docker。谷歌、亚马逊、微软、易贝和红帽等巨头积极使用 Docker 并为其做出贡献。大多数流行的 IaaS 解决方案，如亚马逊网络服务、谷歌计算云等，都支持创建预装 Docker 并针对 Docker 进行优化的映像。许多初创企业也在将自己的命运押在 Docker 身上。CoreOS、Drone.io 和 Shippable 是一些初创公司，它们被建模为基于 Docker 提供服务。所以你可以放心，它不会很快消失。
在本章中，我们将讨论围绕 Docker 的一些项目以及如何使用它们。我们还将关注您可能已经熟悉的项目，这些项目可以促进您的 Docker 工作流程(并使您的生活更加轻松)。
首先，我们将与 Docker 谈论使用厨师和木偶食谱。你们中的许多人可能已经在工作流程中使用了这些工具。本节将帮助您将 Docker 与您当前的工作流相集成，并帮助您轻松融入 Docker 生态系统。
接下来，我们将尝试设置一个 **apt-cacher** ，这样我们的 Docker 构建就不会花费大量时间从 Canonical 服务器获取经常使用的包。这将大大减少从 Dockerfiles 构建映像所需的时间。
在早期阶段，让 Docker 大肆宣传的一件事是，当用 Docker 实现时，一些已知很难的事情看起来是多么容易。其中一个项目就是 **Dokku** ，一个 100 行的 bash 脚本，建立了一个像 PaaS 一样的**迷你** - **Heroku** 。在本章中，我们将使用 Dokku 设置我们自己的 PaaS。我们将在本书中讨论的最后一件事是使用 CoreOS 和 Fleet 部署高可用性服务。
简而言之，在我们旅程的最后一段，我们将关注以下主题:
*   厨师和木偶一起使用 Docker
*   设置一个合适的缓存器
*   建立你自己的迷你英雄库
*   设置高可用性服务
# 与厨师和木偶一起使用 Docker
当企业开始向云迁移时，扩展变得更加容易，因为人们可以毫不费力地从一台机器扩展到数百台机器。但这也意味着配置和维护这些机器。配置管理工具(如 Chef 和 Puppet)源于在公共/私有云中自动部署应用的需求。如今，世界各地的初创企业和公司每天都在使用 Chef 和 Puppet 来管理他们的云环境。
## 与厨师一起使用 Docker
厨师网站声明如下:
> *“厨师”将基础设施转化为代码。借助 Chef，您可以自动构建、部署和管理您的基础架构。您的基础架构变得像应用代码一样可版本化、可测试和可重复。”*
现在，假设您已经设置了厨师，并且熟悉厨师工作流程，让我们看看如何使用厨师-docker 烹饪书对厨师使用 Docker。
您可以用任何一本食谱依赖管理器安装这本食谱。烹饪书([https://supermarket.getchef.com/cookbooks/docker](https://supermarket.getchef.com/cookbooks/docker))的厨师社区网站上提供了伯克架、图书管理员和小刀的安装说明。
### 安装和配置 Docker
安装 Docker 很简单。只需将`recipe[docker]`命令添加到您的运行列表(配置设置列表)中。一个例子抵得上一百万字，那么我们来看看如何编写一个厨师食谱，在 Docker 上运行`code.it`文件(我们的示例项目)。
### 写一份厨师食谱在 Docker 上运行代码
以下厨师食谱基于`code.it`启动容器:
```
# Include Docker recipe
include_recipe 'docker'
# Pull latest image
docker_image 'shrikrishna/code.it'
# Run container exposing ports
docker_container 'shrikrishna/code.it' do
  detach true
  port '80:8000'
  env 'NODE_PORT=8000'
  volume '/var/log/code.it:/var/log/code.it'
end
```
第一个无评论声明包括厨师-Docker 食谱。`docker_image 'shrikrishna/code.it'`语句相当于在控制台运行`$ docker pull shrikrishna/code.it`命令。食谱末尾的语句块相当于运行`$ docker run --d -p '8000:8000' -e 'NODE_PORT=8000' -v '/var/log/code.it:/var/log/code.it' shrikrishna/code.it`命令。
## 用木偶做 Docker
PuppetLabs 的网站声明如下:
> *“Puppet”是一个配置管理系统，允许您定义 IT 基础架构的状态，然后自动强制执行正确的状态。无论您管理的是几台服务器还是成千上万台物理机和虚拟机，Puppet 都可以自动执行系统管理员通常手动执行的任务，从而释放时间和精神空间，让系统管理员可以从事能够带来更大业务价值的项目。”*
木偶相当于厨师烹饪书的是模块。Docker 有一个支持良好的模块。它的安装通过运行以下命令来完成:
```
$ puppet module install garethr-docker
```
### 写一个傀儡清单，在 Docker 上运行代码
以下傀儡清单启动一个`code.it`容器:
```
# Installation
include 'docker'
# Download image
docker::image {'shrikrishna/code.it':}
# Run a container
docker::run { 'code.it-puppet':
  image   => 'shrikrishna/code.it',
  command => 'node /srv/app.js',
  ports   => '8000',
  volumes => '/var/log/code.it'
}
```
第一个非注释语句包括`docker`模块。`docker::image {'shrikrishna/code.it':}`语句相当于在控制台运行`$ docker pull shrikrishna/code.it`命令。配方末尾的语句块相当于运行`$ docker run --d -p '8000:8000' -e 'NODE_PORT=8000' -v '/var/log/code.it:/var/log/code.it' shrikrishna/code.it node /srv/app.js`命令。
# 建立一个合适的缓存器
当你有多个 Docker 服务器时，或者当你构建多个不相关的 Docker 映像时，你可能会发现你每次都要下载包。这可以通过在服务器和客户端之间设置缓存代理来防止。它会在您安装软件包时缓存它们。如果您试图安装一个已经缓存的包，它将由代理服务器本身提供服务，从而减少获取包的延迟并大大加快构建过程。
让我们编写一个 Dockerfile，将 apt 缓存服务器设置为缓存代理服务器:
```
FROM        ubuntu
VOLUME      ["/var/cache/apt-cacher-ng"]
RUN       apt-get update ; apt-get install -yq apt-cacher-ng
EXPOSE      3142
RUN     echo "chmod 777 /var/cache/apt-cacher-ng ;" + "/etc/init.d/apt-cacher-ng start ;" + "tail -f /var/log/apt-cacher-ng/*" >> /init.sh
CMD     ["/bin/bash", "/init.sh"]
```
该 Dockerfile 在映像中安装`apt-cacher-ng`包，并暴露端口`3142`(供目标容器使用)。
使用以下命令构建映像:
```
$ sudo docker build -t shrikrishna/apt_cacher_ng
```
然后运行它，绑定暴露的端口:
```
$ sudo docker run -d -p 3142:3142 --name apt_cacher shrikrishna/apt_cacher_ng
```
要查看日志，请运行以下命令:
```
$ sudo docker logs -f apt_cacher
```
## 在构建 Dockerfiles 时使用适当的缓存器
所以我们设置了一个合适的缓存器。我们现在必须在我们的 Dockerfiles 中使用它:
```
FROM ubuntu
RUN  echo 'Acquire::http { Proxy "http://:3142"; };' >> /etc/apt/apt.conf.d/01proxy
```
在第二条指令中，用 Docker 主机的 IP 地址替换``命令(在`docker0`界面)。在构建这个 Dockerfile 时，如果它遇到任何用于之前已经安装的包的`apt-get install`安装命令(对于这个映像或任何其他映像)，它将从本地代理服务器获取包，而不是使用 Docker 或 Canonical 包存储库，从而加快构建过程中的包安装。如果正在安装的包不在缓存中，那么它将从规范存储库中获取并保存在缓存中。
### 类型
apt 缓存器只适用于使用 Apt 包管理工具的基于 Debian 的容器(如 Ubuntu)。
# 建立自己的迷你英雄库
现在让我们做一些很酷的事情。对于不熟悉的人来说，Heroku 是一个云 PaaS，这意味着你在构建一个应用时所需要做的就是将它推送到 Heroku，它将被部署到 https://www.herokuapp.com 的 T2。您不需要担心应用如何或在哪里运行。只要 PaaS 支持您的技术栈，您就可以只在本地开发，并将应用推送到服务，使其在公共互联网上实时运行。
除了 Heroku，还有很多 PaaS 提供商。一些受欢迎的提供商是谷歌应用引擎、红帽云和云代工。Docker 就是由这样一个 PaaS 提供商——dot cloud 开发的。几乎每个 PaaS 都是通过在预定义的沙盒环境中运行应用来工作的，这是 Docker 擅长的。今天，Docker 让建立一个 PaaS 变得更容易，如果不是简单的话。证明这一点的项目是 Dokku。Dokku 与 Heroku 共享使用模式和术语(如`buildpacks`、`slug` `builder`脚本)，这使得它更容易使用。在这一部分，我们将使用 Dokku 设置一个迷你 PaaS，并推送我们的`code.it`应用。
### 注
接下来的步骤应该在**虚拟**T3 私有**服务器** ( **VPS** )或虚拟机上完成。您工作的主机应该设置了 git 和 SSH。
## 使用引导程序脚本安装 Dokku
有一个脚本将建立道库。在 VPS/虚拟机器中运行以下命令:
```
$ wget -qO- https://raw.github.com/progrium/dokku/v0.2.3/bootstrap.sh | sudo DOKKU_TAG=v0.2.3 bash
```
### 注
12.04 版本的用户在运行前面的`bootstrapper`脚本之前需要运行`$ apt-get install -y python-software-properties`命令。
`bootstrapper`脚本将下载所有依赖项并设置 Dokku。
## 使用游民安装 Dokku
步骤 1:克隆〔t0〕doku:
```
$ git clone https://github.com/progrium/dokku.git