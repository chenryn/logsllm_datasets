User: From the documentation of Popen.wait(), I see

Warning This will deadlock when using stdout=PIPE and/or stderr=PIPE
  and the child process generates enough output to a pipe such that it
  blocks waiting for the OS pipe buffer to accept more data. Use
  communicate() to avoid that.

I am having a bit of trouble understanding the behavior below as the command run below can generate a fairly large amount of standard out.
However, what I notice is that 
subproc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT) 
will hang. 
While 
subproc = subprocess.Popen(command, stdout=subprocess.PIPE)
will not hang.
If the command is generating a large amount of standard out, why does the second statement not hang as we are still using stdout=subprocess.PIPE?
Assistant: The second command will not hang because the issue is not with a large amount of data on standard output, but a large amount of data on standard error.
In the former case, standard error is being redirected to standard output, which is being piped to your program. Hence, a large amount of data being produced on standard error gives an equivalent result to a large amount of data being produced on standard output.
In the latter case, the subprocess's standard error is redirected to the calling process's standard error, and hence can't get stuck in the pipe.