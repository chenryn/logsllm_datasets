（2）DHCP服务返回用户需要的ip和pex服务信息  
（3）用户发送DHCP请求，要分配ip地址给用户  
（4）服务返回DHCP承认  
（5）客户端执行启动服务发现  
（6）MDT服务返回承认消息，并发送PXR信息  
（7）客户端发送PXE boot请求  
（8）服务端通过TFTP返回PXE boot请求  
你可能会问拿到PXE的引导镜像有什么用？第一，可以注入提权向量，在PXE启动完成后获取管理员访问权限。第二可以抓取密码，获取AD内的账户密码。理论上我们按照通信流程就执行这种攻击，不过要让自己的设备加入进对方企业的域实在是太过苛刻（除了社工我想不出其他办法加入对面网络），我们就跳过前面的ip获取，假设我们已经拿到了一台服务器的权限，通过某种方法找到了MDT
服务器的 IP（也许是扫描，也许是历史文件等等），就像是如下靶场利用一般：  
这里是我们在靶场预先给好的ip地址，10.200.26.202和bcd文件名称，一般来说，我们需要把每个 BCD
文件都拿下来，检查配置情况，不过这里就只检查特定的bcd节约时间：  
使用tftp -i 10.200.26.202 GET
"\Tmp\x64{8193F713-2552-4A20-9ABE-13A9443BAC58}.bcd" conf.bcd 获取  
拿到.bcd文件之后我们需要确定系统镜像的位置，这里用到了一个powershell脚本PowerPXE.ps1
（  
依次执行即可获取系统路径  
powershell -executionpolicy bypass  
Import-Module .\PowerPXE.ps1  
Get-WimFile -bcdFile $BCDFile  
拿到系统路径后我们就可以下载系统了，局域网网速一般都很快。  
tftp -i 10.200.26.202 GET "\Boot\x64\Images\LiteTouchPE_x64.wim" pxeboot.wim
下载文件  
也是刚刚用的脚本，使用Get-FindCredentials -WimFile pxeboot.wim成功恢复密码：  
**第六种，配置文件泄露出AD用户的账户密码。**  
集中部署的应用程序的配置文件、注册表、应用服务、web服务的配置文件都值得我们关注，常用的工具有Seatbelt和winPEAS，可以自动化帮我们寻找敏感密码。本靶场已经提供了ma.db的数据库文件，它是McAfee
Enterprise Endpoint Security的文件，McAfee 将安装期间使用的凭据嵌入到名为 ma.db 的文件中以连接回
orchestrator，靶场已经告诉我们文件位置：  
使用scp命令下载到本地来解密：  
查看数据库也非常简单，直接kali下用sqlitebrowser ma.db直接打开：  
翻找密码，成功找到域的账户auth_user和auth_password，需要解密auth_password  
解密成功：  
拿到了合法的账户通常我们就可以登录我们的目标主机了。但是上面拿到的账号，并不一定每个账号都能直接登录，这里要提一下runas.exe，Runas将凭据注入内存中，使得当前的cmd执行命令的使用用的是特定账号的权限。下面是常用的命令（需要管理员运行）：runas.exe
/netonly /user:\ cmd.exe
之后会启动一个新的cmd.exe,为了确保账号正常工作，需要执行一下dir \\SYSVOL命令来保证账号的有效性。
通常使用三种方式对AD进行信息收集：cmd、powershell、bloodhound,通常来说这三种都差不多，但就个人而言bloodhound是图形化的，非常方便，powershell的命令远比cmd的命令好记忆，看个人习惯去使用即可。需要注意，信息收集和漏洞利用密切相关，漏洞利用后又需要信息收集，渗透本身就是一个信息收集的过程，在复杂域下更是如此，这里就浅解释一下载体，具体信息在渗透中有什么作用将放到下篇仔细说明。  
在cmd下执行命令通常使用net命令，一般来说此类命令不太会被蓝队和EDR监控，不过这类命令执行必须要在域内的主机才可以执行，同时如果命令返回的数量太多，net就不会返回全部信息。常见的命令如下：
        net user /domain 列出域下的全部用户
    net user zoe.marshall /domain 检查zoe.marshall用户的详细信息
    net group /domain 检查域下的组
    net group "Tier 1 Admins" /domain 检查特定组的详细信息
    net accounts /domain列出账户策略信息
在powershell中进行信息收集无需我们控制的机器加入到域环境内，仅仅只需要指定域服务器即可，以下是常用命令：
        Get-ADUser -Identity gordon.stevens -Server za.tryhackme.com -Properties *
    -Identity代表我们要查询的用户名
    -Properties 代表与帐户关联的属性，* 将显示所有属性
    -Server 指定域名
在大型复杂域环境下采用bloodhound图形化分析是非常常见的手法，这里个人强烈推荐kali安装bloodhound，如果用windows安装会浪费你大量的时间，出现各种兼容性的问题，具体安装可以参考
这里不再赘述。bloodhound可能会产生大量日志引起安全设备告警，算是各有优缺点了。我们需要去github内找到collectors目录，信息收集器有exe和ps1的，如果你喜欢无文件渗透，可以使用powershell远程加载或者使用C#版本的内存加载运行，完全取决于你。  
这里用exe用法举例，有非常多的选项，我们一般要收集全部信息命令如下：  
Sharphound.exe --CollectionMethods All --Domain za.tryhackme.com –ExcludeDCs  
\--CollectionMethods，确定 Sharphound 将收集的数据类型,我们可以手动修改，类型非常多，如下图给出。  
\--Domain 指定要枚举的域名，如果域非常复杂，可以可能想要枚举与现有域信任的父域或其他域，用此参数即可控制。  
–ExcludeDCs：这将指示 Sharphound 不要接触域控制器，这会降低 Sharphound 运行引发警报的可能性。  
工具非常复杂，师傅们有兴趣可以进一步查阅文档了解相关用法，调整参数降低被蓝队发现的概率：  
运行完成后会在当前生成一个zip文件，用鼠标直接拖到bloodhound里面就行了，需要注意我们的bloodhound必须用最新版本的，才能和github的兼容，不然没办法导入成功。  
Bloodhound揭示了域内账户直接的关系，这些关系到底有什么用下面靶场举了一个简单的图片：  
上图所示，我们在右上角搜寻开始节点MARCUS.GARNER和目的节点Tier 1 ADMINS，Tier 1
ADMINS属于管理员组，我们最开始拿到的账户是MARCUS.GARNER账户，途中展示了我们怎么才能到Tier 1
ADMINS。首先MARCUS根据图片DOMAIN PI:EMAIL，
PI:EMAIL可以RDP进入THMJMP1.ZA.TRYHACKME.COM，THMJMP1.ZA.TRYHACKME.COM内部含有PI:EMAIL的会话，如果我们能权限提升成管理员就能偷走它的hash，就能获取Tier
1
ADMINS的管理员权限，实战中可能路径有更多，而且不一定都能走通，需要根据情况选择最佳路径，实战可以一个CVE就打下来了，也可能横向非常复杂，甚至压根走不通。
总结，本篇围绕AD凭据的获取介绍了几种常用的获取初始立足点的方法，这种方法在国内都是利用漏洞打点实际可能作用不是特别大，仅仅做了解，算是扩充一下师傅们的思路，后半部分补充了一下常用的信息收集的工具，其实也是老生常谈的东西了，真要展开也不是几千字能搞完的了，后续看情况在聊一下AD的利用和权限维持吧，最后，感谢大家看到这里。
参考资料和数据来源：  