title:CoDaRR: Continuous Data Space Randomization against Data-Only Attacks
author:Prabhu Rajasekaran and
Stephen Crane and
David Gens and
Yeoul Na and
Stijn Volckaert and
Michael Franz
CoDaRR : Continuous Data Space Randomization against
Data-Only Attacks
Prabhu Rajasekaran
PI:EMAIL
University of California, Irvine
Stephen Crane
PI:EMAIL
Immunant, Inc.
David Gens
PI:EMAIL
University of California, Irvine
Yeoul Na
PI:EMAIL
Stijn Volckaert
PI:EMAIL
Michael Franz
PI:EMAIL
University of California, Irvine
Department of Computer Science,
University of California, Irvine
imec-DistriNet, KU Leuven
ABSTRACT
The widespread deployment of exploit mitigations such as
CFI and shadow stacks are making code-reuse attacks in-
creasingly difficult. This has forced adversaries to consider
data-only attacks against which the venerable ASLR remains
the primary deployed defense. Data-Space Randomization
(DSR) techniques raise the bar against data-only attacks
by making it harder for adversaries to inject malicious data
flows into vulnerable applications. DSR works by masking
memory load and store instructions. Masks are chosen (i)
to not interfere with intended data flows and (ii) such that
masking likely interferes with unintended flows introduced
by malicious program inputs.
In this paper, we show two new attacks that bypass all
existing static DSR approaches; one that directly discloses
memory and another using speculative execution. We then
present CoDaRR, the first dynamic DSR scheme resilient
to disclosure attacks. CoDaRR continuously rerandomizes
the masks used in loads and stores, and re-masks all mem-
ory objects to remain transparent w.r.t. program execution.
Our evaluation confirms that CoDaRR successfully thwarts
these attacks with limited run-time overhead in standard
benchmarks as well as real-world applications.
ACM Reference Format:
Prabhu Rajasekaran, Stephen Crane, David Gens, Yeoul Na,
Stijn Volckaert, and Michael Franz. 2020. CoDaRR : Continu-
ous Data Space Randomization against Data-Only Attacks. In
Proceedings of the 15th ACM Asia Conference on Computer
and Communications Security (ASIA CCS ’20), October 5–9,
2020, Taipei, Taiwan. ACM, New York, NY, USA, 14 pages.
https://doi.org/10.1145/3320269.3384757
Permission to make digital or hard copies of all or part of this work
for personal or classroom use is granted without fee provided that
copies are not made or distributed for profit or commercial advantage
and that copies bear this notice and the full citation on the first
page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy
otherwise, or republish, to post on servers or to redistribute to lists,
requires prior specific permission and/or a fee. Request permissions
from permissions@acm.org.
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-6750-9/20/10. . . $15.00
https://doi.org/10.1145/3320269.3384757
1 INTRODUCTION
Data-only attacks [14, 17, 26, 27] corrupt or leak program
data without violating a control flow integrity (CFI) policy.
Prior work showed that these attacks are powerful enough to
escalate the program’s privileges, perform Turing-complete
computation, or execute arbitrary system calls, all while
bypassing code-reuse defenses such as CFI [14, 20, 22, 26, 27,
38].
To combat data-only attacks, defenders can either retrofit
memory-safety techniques such as bounds checking into the
program [46], rewrite the program in a safer programming
language or language dialect [21, 29, 37], or apply exploit
mitigations such as Data-Flow Integrity (DFI) [13], Write
Integrity Testing (WIT) [2], or Data Space Randomization
(DSR) [8, 11]. Historically, exploit mitigations have been a
focus of research, since they usually require less developer
effort while also being applicable to legacy software.
Data Space Randomization [8, 11] is a probabilistic exploit
mitigation technique that randomizes the representation of
data in memory to prevent deterministic corruption of data
or plaintext information leakage. DSR applies static program
analysis to partition all data accesses into disjoint equivalence
classes based on the aliasing relationships between variables.
A pair of variables will be in the same equivalence class if
and only if the analysis determines that legitimate data flows
could exist between the two.
At run time, the program then randomizes the representa-
tion of memory objects that fall into different classes. This
can be implemented efficiently by using lightweight XOR op-
erations with a data-randomization mask (or “key”) that
is unique to each equivalence class. The compiler generates
masks for each data partition and embeds them directly in
the binary code of the application [8, 11], or stores them in a
dedicated key cache [7]. In both cases, the masks can be pro-
tected from memory exploit-based disclosure, either by giving
the binary code pages execute-only permissions [6, 19, 24],
or by modifying the CPU such that the key cache can only
be accessed through custom data access instructions [7].
DSR is only effective as long as the masks remain secret.
However, there are a number of possible ways to disclose
masks, even if they cannot be read directly. For instance, an
adversary could leverage memory vulnerabilities to disclose
masked data. If the attacker can choose or inject data (chosen-
plaintext attack, CPA), knows the data (known-plaintext at-
tack, KPA), or guess them with high probability, he can infer
the value of a mask used for an equivalence class and all
variables in it. Since all variables in an equivalence class
have the same mask applied to them, this could then enable
further leakage via a JIT-ROP style attack [44]. Alterna-
tively, adversaries could exploit a remote side channel, such
as NetSpectre [43], to directly disclose the secret key from
the binary or the key cache.
In this paper, we first demonstrate two novel attacks
against DSR. Our attacks disclose DSR masks using direct
memory disclosure or side-channel attacks. This allows us to
write arbitrary plaintext data into the entire equivalence class
whose mask we disclosed. Both of our attacks are sufficiently
generic to work against any prior implementation of DSR,
including those that rely on hardware support to protect keys
against disclosure, because they exploit design choices in the
DSR scheme rather than implementation flaws.
Second, we propose a new DSR scheme dubbed CoDaRR
(Continuous Data Re-Randomization) which thwarts our pre-
sented and similar attacks by dynamically rerandomizing
the masks and updating all program data accordingly. Co-
DaRR supports both periodic and on-demand rerandomiza-
tion. Since purely periodic key refresh could be subject to
well-timed attacks, we provide the option to rerandomize
at chosen strategic points in the execution of the protected
application, thereby ensuring that critical program actions
will always trigger rerandomization. To the best of our knowl-
edge, we are the first to present a working rerandomization
framework to protect data.
Rerandomizing masks at run time poses unique challenges.
For instance, old data representations will no longer be valid
under the new mask values. This means, that all masked
values have to be tracked and updated to ensure correctness.
This is non-trivial, since the program might propagate masked
values across registers and memory during execution, and
rerandomization can trigger at any point in time. To enable
reliable rerandomization of data, we add metadata sufficient
to identify all masked data and the locations of the masks
themselves at any point during program execution.
In summary, our contributions are threefold:
∙ We present two novel attacks on DSR. Our attacks al-
low us to exploit attacker-controlled write operations to
write arbitrary plaintext data to an encrypted memory
equivalence class.
∙ We identify the key challenges towards rerandomiza-
tion of data randomization keys and data and present
a new scheme, CoDaRR, which addresses these chal-
lenges. CoDaRR supports on-demand as well as con-
tinuous rerandomization of data. We implemented a
prototype of CoDaRR and show that it thwarts our
attacks against traditional DSR schemes.
∙ We evaluated CoDaRR’s performance using benchmark
suites as well as applications such as Nginx and thttpd.
int a , b , c ;
int * ptr , * ptr2 , * ptr3 ;
if ( cond == 1) {
ptr = & a ; ptr2 = & b ;
foo ( ptr ) ;
} else {
ptr = & b ; ptr2 = & c ;
foo ( ptr3 ) ;
}
* ptr = 2;
void foo ( int * p ) {
/* ... */ }
Listing 1: A simple C program with pointer aliasing
Our experiments show acceptable performance in most
cases.
2 BACKGROUND
Data Space Randomization. DSR thwarts data flows
that cannot occur in memory-safe executions of the program
by encrypting program variables when they are stored to
memory and decrypting them when they are loaded. This
way, when the program uses the base pointer of one variable
to access a variable in a different equivalence class, the result-
ing access uses the wrong DR key and yields unpredictable
program behavior. An ideal implementation of DSR has the
following properties:
(1) the DR key used for each memory access should be
known a priori and embedded into the binary statically
as a read-only constant or an instruction operand;
(2) program variables and struct fields should share the
same DR key only when they truly alias;
(3) the program should randomly generate new masks with
high entropy at load time;
(4) the program should use strong cryptographic primitives
to encrypt memory.
Such an ideal implementation would probabilistically stop
most memory corruption attacks, regardless of whether they
hijack the control flow of the program or not. Two of the four
properties (2 and 4) are infeasible in practice, however. To
implement property 2, the program needs to know the target
object for every memory access instruction, as well as the
offset within the target. This requires the compiler to run a
fully precise flow-, context-, and field-sensitive pointer analy-
sis, which is undecidable in the general case [31, 41], and does
not scale to large programs even when approximated. Imple-
menting property 4 is not practical either because of the high
run-time overhead it would incur. Existing implementations
of DSR therefore relax both of these properties.
Key Assignment. To make DSR practical, existing im-
plementations statically assign masks to memory read and
write instructions based on the set of objects they can access.
Because most programs use pointers, DSR must take pointer
aliasing into account when doing so. Consider, for example,
the program shown in Listing 1. In this program, variable
ptr may point to variables a or b, depending on which path
the program executed. The program assigns the value 2 to
the target of variable ptr and, since both of the possible
targets are stored in memory, the value should be encrypted.
To allow for encryption with a single, static DR key, DSR
assigns the same masks to all variables in ptr’s points-to set.
All memory accesses to a variable in ptr’s points-to set must
similarly use the same DR key. This leads the DSR implemen-
tation to merge points-to sets and to construct “equivalence
classes” out of pointers with overlapping points-to sets. In
the example, pointers ptr and ptr2 are put in the same
equivalence class because they can both target variable b.
Similarly, variables a, b, and c will be encrypted with the
same key so they can be accessed from either pointer.
Bhatkar and Sekar’s implementation of DSR [8] constructs
equivalence classes using Steensgaard’s pointer analysis algo-
rithm [47]. This algorithm runs a flow- and context-insensitive
pass over all program statements and merges the points-to
sets of both pointers whenever one pointer is assigned to
another. Formally, the analysis would generate constraint
𝑃 𝑂𝐼𝑁 𝑇 𝑆 𝑇 𝑂(𝑝) = 𝑃 𝑂𝐼𝑁 𝑇 𝑆 𝑇 𝑂(𝑞) for every assignment
statement 𝑝 = 𝑞. Cadar et al.’s DSR implementation [11]
uses Andersen’s pointer analysis [4], which builds subset
constraints for all program statements. Under this anal-
ysis, an assignment of 𝑝 = 𝑞 would generate constraint
𝑃 𝑂𝐼𝑁 𝑇 𝑆 𝑇 𝑂(𝑝) ⊇ 𝑃 𝑂𝐼𝑁 𝑇 𝑆 𝑇 𝑂(𝑞). Contrary to Bhatkar
and Sekar’s implementation, Cadar et al.’s implementation
computes equivalence classes in a separate step after calcu-
lating points-to sets, whereas in the former implementation,
every points-to set is an equivalence class. Belleville et al.’s
HARD uses a context-sensitive version of Steensgaard’s anal-
ysis [7]. The advantage of this implementation is that it can
specialize the call to function foo based on its calling con-
text, thereby avoiding the need to collapse ptr and ptr3’s
points-to sets into the same equivalence class because func-
tion argument p might point to both sets (in different calling
contexts).
Lightweight Encryption. After constructing the equiva-
lence classes, the DSR scheme inserts the necessary encryp-
tion and decryption operations. All existing implementations
use XOR masking for this purpose. While XOR masking
is not cryptographically secure under key reuse it is more
efficient than using symmetric ciphers. Software implementa-
tions of DSR embed the XOR keys directly into the binary
code of the program and insert metadata to mark the loca-
tions of the keys. In this way, the DSR runtime component
can randomly choose keys at program startup and rewrite
the binary code in memory. Previous work by Belleville et
al. [7] reported an average run-time overhead of 40.96% in
fully instrumented programs with context-sensitive masks.
Belleville et al. [7] further presented a hardware imple-
mentation of DSR, which stores the masks in a protected
memory key table that is backed by a dedicated cache. At
run time, the encryption operations look up XOR keys in the
key table by their index. Therefore, this implementation is
more resilient to direct disclosure attacks, since the XOR keys