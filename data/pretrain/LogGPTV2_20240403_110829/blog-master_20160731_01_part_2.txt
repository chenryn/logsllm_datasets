### ulimit 设置   
ulimit 设置主要是限制进程级别对系统资源的使用。    
```  
       ulimit [-HSTabcdefilmnpqrstuvx [limit]]  
              Provides  control over the resources available to the shell and to processes started by it, on systems that allow such control.  The -H and -S options specify that the hard or soft limit is set for the given resource.  
              A hard limit cannot be increased by a non-root user once it is set; a soft limit may be increased up to the value of the hard limit.  If neither -H nor -S is specified, both the soft and  hard  limits  are  set.   The value  of limit can be a number in the unit specified for the resource or one of the special values hard, soft, or unlimited, which stand for the current hard limit, the current soft limit, and no limit, respectively.  
              If limit is omitted, the current value of the soft limit of the resource is printed, unless the -H option is given.  When more than one resource is specified, the limit name and unit  are  printed  before  the  value.  
              Other options are interpreted as follows:  
              -a     All current limits are reported  
              -b     The maximum socket buffer size  
              -c     The maximum size of core files created  
              -d     The maximum size of a process's data segment  
              -e     The maximum scheduling priority ("nice")  
              -f     The maximum size of files written by the shell and its children  
              -i     The maximum number of pending signals  
              -l     The maximum size that may be locked into memory  
              -m     The maximum resident set size (many systems do not honor this limit)  
              -n     The maximum number of open file descriptors (most systems do not allow this value to be set)  
              -p     The pipe size in 512-byte blocks (this may not be set)  
              -q     The maximum number of bytes in POSIX message queues  
              -r     The maximum real-time scheduling priority  
              -s     The maximum stack size  
              -t     The maximum amount of cpu time in seconds  
              -u     The maximum number of processes available to a single user  
              -v     The maximum amount of virtual memory available to the shell and, on some systems, to its children  
              -x     The maximum number of file locks  
              -T     The maximum number of threads  
              If  limit  is  given, it is the new value of the specified resource (the -a option is display only).  If no option is given, then -f is assumed.  Values are in 1024-byte increments, except for -t, which is in seconds,  
              -p, which is in units of 512-byte blocks, and -T, -b, -n, and -u, which are unscaled values.  The return status is 0 unless an invalid option or argument is supplied, or an error occurs while setting a new limit.  
```  
配置文件举例     
/etc/security/limits.conf    
```  
#              
#  
#Where:  
# can be:  
#        - a user name  
#        - a group name, with @group syntax  
#        - the wildcard *, for default entry  
#        - the wildcard %, can be also used with %group syntax,  
#                 for maxlogin limit  
#  
# can have the two values:  
#        - "soft" for enforcing the soft limits  
#        - "hard" for enforcing hard limits  
#  
# can be one of the following:  
#        - core - limits the core file size (KB)  
#        - data - max data size (KB)  
#        - fsize - maximum filesize (KB)  
#        - memlock - max locked-in-memory address space (KB)  
#        - nofile - max number of open files  
#        - rss - max resident set size (KB)  
#        - stack - max stack size (KB)  
#        - cpu - max CPU time (MIN)  
#        - nproc - max number of processes  
#        - as - address space limit (KB)  
#        - maxlogins - max number of logins for this user  
#        - maxsyslogins - max number of logins on the system  
#        - priority - the priority to run user process with  
#        - locks - max number of file locks the user can hold  
#        - sigpending - max number of pending signals  
#        - msgqueue - max memory used by POSIX message queues (bytes)  
#        - nice - max nice priority allowed to raise to values: [-20, 19]  
#        - rtprio - max realtime priority  
#  
#                   
#  
#*               soft    core            0  
#*               hard    rss             10000  
#@student        hard    nproc           20  
#@faculty        soft    nproc           20  
#@faculty        hard    nproc           50  
#ftp             hard    nproc           0  
#@student        -       maxlogins       4  
# End of file  
* soft    nofile  655360  
* hard    nofile  655360  
* soft    nproc   655360  
* hard    nproc   655360  
* soft    memlock unlimited  
* hard    memlock unlimited  
* soft    core    unlimited  
* hard    core    unlimited  
```  
查看进程设置    
\# cat /proc/$PID/limits     
```  
Limit                     Soft Limit           Hard Limit           Units       
Max cpu time              unlimited            unlimited            seconds     
Max file size             unlimited            unlimited            bytes       
Max data size             unlimited            unlimited            bytes       
Max stack size            8388608              unlimited            bytes       
Max core file size        unlimited            unlimited            bytes       
Max resident set          unlimited            unlimited            bytes       
Max processes             655360               655360               processes   
Max open files            655360               655360               files       
Max locked memory         unlimited            unlimited            bytes       
Max address space         unlimited            unlimited            bytes       
Max file locks            unlimited            unlimited            locks       
Max pending signals       513997               513997               signals     
Max msgqueue size         819200               819200               bytes       
Max nice priority         0                    0                      
Max realtime priority     0                    0                      
Max realtime timeout      unlimited            unlimited            us          
```  
查看当前用户的limit配置      
```  
# ulimit -a  
core file size          (blocks, -c) unlimited  
data seg size           (kbytes, -d) unlimited  
scheduling priority             (-e) 0  
file size               (blocks, -f) unlimited  
pending signals                 (-i) 513997  
max locked memory       (kbytes, -l) unlimited  
max memory size         (kbytes, -m) unlimited  
open files                      (-n) 655360  
pipe size            (512 bytes, -p) 8  
POSIX message queues     (bytes, -q) 819200  
real-time priority              (-r) 0  
stack size              (kbytes, -s) 8192  
cpu time               (seconds, -t) unlimited  
max user processes              (-u) 655360  
virtual memory          (kbytes, -v) unlimited  
file locks                      (-x) unlimited  
```  
PostgreSQL 推荐设置    
```  
* soft    nofile  655360    # The maximum number of open file descriptors  
* hard    nofile  655360    
* soft    nproc   655360    # The maximum number of processes available to a single user  
* hard    nproc   655360  
* soft    memlock unlimited  # The maximum size that may be locked into memory  
* hard    memlock unlimited  
* soft    core    unlimited  # The maximum size of core files created  
* hard    core    unlimited  
```  
core dump 相关内核设置    
```  
kernel.core_pattern = /xxx/xxx/core_%e_%u_%t_%s.%p  
kernel.core_uses_pid = 1  
```  
### OOM score adj 设置  
PostgreSQL 的守护进程是postgres，如果它挂了，数据库就挂了，其他进程挂了它会负责crash recovery，自动重启数据库（默认设置了 restart_after_crash = on ）    
所以如果要防止系统OOM时杀掉postgres主进程，需要在启动数据库前，使用root用户设置self脚本进程的oom_score_adj，然后启动数据库。    
```  
echo -1000 > /proc/self/oom_score_adj  
or   
echo -17 > /proc/self/oom_score_adj  
```  
例子    
```  
# echo -1000 > /proc/self/oom_score_adj  
启动是需要在启动环境中设置这两个环境变量  
# export PG_OOM_ADJUST_FILE=/proc/self/oom_score_adj  # 设置postgres主进程oom_score_adj  
# export PG_OOM_ADJUST_VALUE=0  # 设置子进程oom_score_adj  
# su - digoal -c "export PG_OOM_ADJUST_FILE=/proc/self/oom_score_adj;export PG_OOM_ADJUST_VALUE=0;. ~/env.sh; pg_ctl start"  
# ps -efw|grep digoal  
digoal    2492     1  9 23:22 ?        00:00:00 /home/digoal/pgsql9.5/bin/postgres  
digoal    2493  2492  0 23:22 ?        00:00:00 postgres: logger process     
digoal    2495  2492  0 23:22 ?        00:00:00 postgres: checkpointer process     
digoal    2496  2492  0 23:22 ?        00:00:00 postgres: writer process     
digoal    2497  2492  0 23:22 ?        00:00:00 postgres: wal writer process     
digoal    2498  2492  0 23:22 ?        00:00:00 postgres: autovacuum launcher process    
digoal    2499  2492  0 23:22 ?        00:00:00 postgres: stats collector process   
# cat /proc/2492/oom_score_adj   
-1000  
# cat /proc/2493/oom_score_adj   
0  
```  
## 参考  
* https://www.postgresql.org/docs/9.5/static/kernel-resources.html#SYSVIPC  
* https://www.postgresql.org/docs/9.5/static/runtime-config-resource.html#RUNTIME-CONFIG-RESOURCE-MEMORY    
* man shm_open, shmget, mmap, semctl, sem_overview  
## 小结  
本文主要帮助大家理解PostgreSQL数据库对操作系统资源的需求，以及计算方法。    
如果用户需要在一个系统中运行多个数据库集群，则需要将所有集群的需求加起来。    
PostgreSQL 9.2以及以前的版本，在数据库启动时对SysV共享内存段的需求很大，所以要设得比较大，需要用户注意。    
祝大家玩得开心，欢迎随时来 **阿里云促膝长谈业务需求** ，恭候光临。    
阿里云的小伙伴们加油，努力 **做好内核与服务，打造最贴地气的云数据库** 。    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")