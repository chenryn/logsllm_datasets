creasing by roughly a second compared to the 45 expe-
rienced by the full document OCR method. In all, our
method requires about 6 seconds to check a 20 page doc-
ument, rather than 50 seconds, using one core on a laptop
processor (Intel i7 at 2.7GHz). This provides far better
scalability for the target systems than the alternative, and
is easily applied to current systems without requiring up-
grades.
8 Related Work
Most exploit research targeting the PDF standard has
been in bugs surrounding various programs rendering,
displaying, exporting, or otherwise handling PDF docu-
ments. The not-for-proﬁt MITRE Corporation lists in its
Common Vulnerabilities and Exposures (CVE) collec-
tion 431 entries involving the keyword “PDF” and having
to do with these external programs [5]. These allow for
arbitrary code execution on the host computer and all the
associated security risks [6], including establishment of
botnets, data exﬁltration, and other high-impact security
issues. They are, however, limited to basic hacking-type
exploits, zero-days chased by patches, and the PDF itself
is essentially a vehicle for the hack [7]. These attacks are
not thematically novel, and the patches indeed follow the
zero-days with reasonable speed [8].
844    26th USENIX Security Symposium
USENIX Association
(cid:50)(cid:48)(cid:49)(cid:55)(cid:49)(cid:52)(cid:49)(cid:49)(cid:56)(cid:53)(cid:80)(cid:101)(cid:114)(cid:99)(cid:101)(cid:110)(cid:116)(cid:97)(cid:103)(cid:101)(cid:32)(cid:111)(cid:102)(cid:32)(cid:109)(cid:97)(cid:115)(cid:107)(cid:101)(cid:100)(cid:32)(cid:99)(cid:104)(cid:97)(cid:114)(cid:97)(cid:99)(cid:116)(cid:101)(cid:114)(cid:115)(cid:48)(cid:53)(cid:48)(cid:49)(cid:48)(cid:48)(cid:68)(cid:101)(cid:116)(cid:101)(cid:99)(cid:116)(cid:105)(cid:111)(cid:110)(cid:32)(cid:114)(cid:97)(cid:116)(cid:101)(cid:32)(cid:40)(cid:37)(cid:41)(cid:70)(cid:117)(cid:108)(cid:108)(cid:32)(cid:100)(cid:111)(cid:99)(cid:117)(cid:109)(cid:101)(cid:110)(cid:116)(cid:32)(cid:79)(cid:67)(cid:82)(cid:70)(cid:111)(cid:110)(cid:116)(cid:32)(cid:118)(cid:101)(cid:114)(cid:105)(cid:102)(cid:105)(cid:99)(cid:97)(cid:116)(cid:105)(cid:111)(cid:110)(cid:50)(cid:52)(cid:54)(cid:56)(cid:49)(cid:48)(cid:78)(cid:117)(cid:109)(cid:98)(cid:101)(cid:114)(cid:32)(cid:111)(cid:102)(cid:32)(cid:112)(cid:97)(cid:103)(cid:101)(cid:115)(cid:56)(cid:48)(cid:57)(cid:48)(cid:49)(cid:48)(cid:48)(cid:68)(cid:101)(cid:116)(cid:101)(cid:99)(cid:116)(cid:105)(cid:111)(cid:110)(cid:32)(cid:114)(cid:97)(cid:116)(cid:101)(cid:32)(cid:40)(cid:37)(cid:41)(cid:70)(cid:117)(cid:108)(cid:108)(cid:32)(cid:100)(cid:111)(cid:99)(cid:117)(cid:109)(cid:101)(cid:110)(cid:116)(cid:32)(cid:79)(cid:67)(cid:82)(cid:70)(cid:111)(cid:110)(cid:116)(cid:32)(cid:118)(cid:101)(cid:114)(cid:105)(cid:102)(cid:105)(cid:99)(cid:97)(cid:116)(cid:105)(cid:111)(cid:110)(cid:53)(cid:49)(cid:48)(cid:49)(cid:53)(cid:50)(cid:48)(cid:78)(cid:117)(cid:109)(cid:98)(cid:101)(cid:114)(cid:32)(cid:111)(cid:102)(cid:32)(cid:112)(cid:97)(cid:103)(cid:101)(cid:115)(cid:48)(cid:49)(cid:48)(cid:50)(cid:48)(cid:51)(cid:48)(cid:52)(cid:48)(cid:53)(cid:48)(cid:83)(cid:101)(cid:99)(cid:111)(cid:110)(cid:100)(cid:115)(cid:70)(cid:117)(cid:108)(cid:108)(cid:32)(cid:100)(cid:111)(cid:99)(cid:117)(cid:109)(cid:101)(cid:110)(cid:116)(cid:32)(cid:79)(cid:67)(cid:82)(cid:70)(cid:111)(cid:110)(cid:116)(cid:32)(cid:118)(cid:101)(cid:114)(cid:105)(cid:102)(cid:105)(cid:99)(cid:97)(cid:116)(cid:105)(cid:111)(cid:110)Similarly, some exploration has been performed on
the JavaScript execution ability within the PDF standard.
When abused, this too allows for arbitrary code execu-
tion. Security researcher Didier Stevens offers a series
of blogs discussing how to misuse this JavaScript exe-
cution, including how to encode the strings involved to
create polymorphic malware resisting simple signature-
based antivirus products [32].
Some research ﬁnds
that writing polyglots (code valid in multiple languages)
within PDFs can expose security concerns depending on
what language the reader uses to interpret the code [2].
Successive updates to the PDF standard implement mea-
sures to block certain functions, such as reaching out to
the Internet, placing their function behind a conﬁrmation
window for the user to view [12]. Additionally, most cur-
rent antivirus products offer real-time protection using
heuristics that can detect potentially malicious behaviors
despite simple code obfuscation.
Some academic research regarding PDF security ana-
lyzes the JavaScript being executed to verify safety. One
work analyzes a set of static features extracted from the
PDF, and then instruments with context monitoring code
the JavaScript within. This combination static and run-
time approach is tested on a collection of 18623 PDF
documents without malware and 7370 with, resulting in
few false negatives and no false positives [1]. Other
research targets attacks not dependent on JavaScript or
other parsing vulnerabilities, including one that works to
detect these attacks using machine learning on existing
ﬂagged PDF ﬁles using data extracted from the structure
of the ﬁle as well as its content [3]. One may expect
this strategy to suffer from the same difﬁculties experi-
enced by signature-based antivirus products, namely an
inability to detect malware not already discovered by re-
searchers. Another work allows PDF documents to be
opened in an emulated environment to track how they
behave before doing so in the host environment [4].
Some works slightly closer to ours examine the pos-
sibility of causing PDF documents to be rendered differ-
ently on different computers, showing how to restrict the
syntax of the PDF standard to prevent this from occur-
ring [33] [34]. This attack against data consistency has
some vague similarity to the concept of content mask-
ing - displaying different content for the human than the
machine. However, we provide several real-world exam-
ples of how our content masking attack can subvert real
systems, while the impact of the attack in this work is rel-
atively limited to the document looking different to hu-
mans using different computers. Some works [35] [36]
[37] examine poisoning search results, but this is from
the perspective of presenting false data to the machine
through website code or manipulations of the PageRank
algorithm via botnets, an existing threat vector for which
defenses have been continually adapting.
Section 2 introduces the Character Map (CMap),
through which letters are mapped to entries within fonts,
ultimately displaying the associated glyphs. During our
literature search, we found a work [13] from a social
science journal of Assessment & Evaluation in Higher
Education which touches on a similar topic from a non-
scientiﬁc stance. [13] discusses how the CMap can be
altered to make letters map to different characters within
a font. In this way, plagiarism detection can be fooled
by mapping to obscure characters whose glyphs are sim-
ilar in appearance to those for the typically used charac-
ters. After devising our attacks, we discovered this work
also contains cursory mention of the ability to modify the
glyphs within a font, but does not explore this possibility
or demonstrate its practicality as we do. We evaluate new
methods to target speciﬁc similarity scores such that the
resultant PDF does not appear unnatural with a 0% sim-
ilarity score. Further, we show how these custom fonts
can be used to subvert conference reviewer-assignment
systems and search indexing, developing new and dis-
tinct attack methods speciﬁc to each of these very dif-
ferent targets. Additionally, we provide a robust defense
method, including a defense against the slightly differ-
ent attack proposed in [13] involving the use of existing
characters similar in appearance to normal letters.
9 Conclusion
In this paper, we have presented a new class of content
masking attacks against the Adobe PDF standard. Af-
ter creating algorithms for each of three content mask-
ing attack variants, we perform a comprehensive evalu-
ation showing that each lives up to its theory and oper-
ates in present state-of-the-art systems. Our ﬁrst attack
allows academic paper writers and reviewers to collude
via subverting the automatic reviewer assignment sys-
tems in current use by academic conferences including
INFOCOM, which we simulated. This requires no visi-
ble changes to the paper being reviewed and the addition
of just 3-5 custom masking fonts for almost all of the 100
papers tested, easily lost in any paper’s natural fonts. We
show a second attack that renders ineffective plagiarism
detection software, particularly Turnitin, to the point of
being able to target speciﬁc small plagiarism similarity
scores to appear natural and evade detection. In our ﬁ-
nal attack, we successfully place masked content into the
indexes for Bing, Yahoo!, and DuckDuckGo which ren-
ders as information entirely different from the keywords
used to locate it. Lastly, we provide and test a robust font
veriﬁcation algorithm which is more accurate than full
document OCR and requires considerably less computa-
tion power.
USENIX Association
26th USENIX Security Symposium    845
References
[1] D. Liu, H. Wang, and A. Stavrou, “Detecting Mali-
cious Javascript in PDF through Document Instru-
mentation,” in 2014 44th Annual IEEE/IFIP Inter-
national Conference on Dependable Systems and
Networks, pp. 100–111, June 2014.
[2] J. Magazinius, B. K. Rios, and A. Sabelfeld, “Poly-
glots: crossing origins by crossing formats,” in Pro-
ceedings of the 2013 ACM SIGSAC conference on
Computer & communications security, pp. 753–
764, ACM, 2013.
[3] D. Maiorca, D. Ariu, I. Corona, and G. Giacinto,
“A structural and content-based approach for a pre-
cise and robust detection of malicious PDF ﬁles,”
in 2015 International Conference on Information
Systems Security and Privacy (ICISSP), pp. 27–36,
Feb 2015.
[4] F. Schmitt, J. Gassen, and E. Gerhards-Padilla,
“PDF Scrutinizer: Detecting JavaScript-based at-
tacks in PDF documents,” in Privacy, Security and
Trust (PST), 2012 Tenth Annual International Con-
ference on, pp. 104–111, July 2012.
Corporation,
and
“CVE
-
Exposures
Common
(CVE).”
[5] MITRE
Vulnerabilities
https://cve.mitre.org/cgi-bin/cvekey.
cgi?keyword=pdf, 2016.
[6] K. Selvaraj and N. F. Gutierrez, The Rise of PDF
Malware. Symantec, Recurity Response, 2010.
[7] R. Brandis and L. Steller, Threat Modelling Adobe
PDF. DSTO Defence Science and Technology Ori-
ganisation, 2012.
[8] Adobe Security, PDF Security Reaches New Lev-
els with Adobe Reader XI and Adobe Acrobat XI.
Adobe, 2013.
[9] B. Li and Y. T. Hou, “The New Automated IEEE
INFOCOM Review Assignment System,” IEEE
Network, vol. 30, no. 5, pp. 18–24, 2016.
[10] “Submitting
a
Paper.”
https://guides.
turnitin.com/01_Manuals_and_Guides/
Student/Classic_Student_User_Guide/09_
Submitting_a_Paper, 2016.
[11] Y. Shinyama,
“PDFMiner.” https://euske.
github.io/pdfminer/, 2013.
[12] Adobe, PDF Reference. Adobe Systems Incorpo-
rated, 2006.
[13] J. Heather, “Turnitoff:
Identifying and Fixing a
Hole in Current Plagiarism Detection Software,”
Assessment & Evaluation in Higher Education,
vol. 35, no. 6, pp. 647–660, 2010.
[14] S. T. Dumais, G. W. Furnas, T. K. Landauer,
S. Deerwester, and R. Harshman, “Using Latent
Semantic Analysis to Improve Access to Textual
Information,” in Proceedings of the SIGCHI Con-
ference on Human Factors in Computing Systems,
CHI ’88, (New York, NY, USA), pp. 281–285,
ACM, 1988.
[15] M. D. Blei, A. Y. Ng, and M. I. Jordan, “Latent
Dirichet Allocation,” Journal of machine learning
research, vol. 3, no. Jan, pp. 993–1022, 2003.
[16] L. K. Pritchard, M. Stephens, and P. Donnelly, “In-
ference of Population Structure Using Multilocus
Genotype Data,” Genetics, vol. 155, no. 2, pp. 945–
959, 2000.
[17] “Student
Paper
Migrations.”
https:
//guides.turnitin.com/01_Manuals_and_
Guides/Administrator/Administrator_
User_Guide/22_Student_Paper_Migrations,
2016.
[18] “How
Search Works:
Algorithms.”
https://www.google.com/insidesearch/
howsearchworks/algorithms.html, 2016.
[19] S. Brin and L. Page, “Reprint of: The Anatomy of
a Large-Scale Hypertextual Web Search Engine,”
Computer networks, vol. 56, no. 18, pp. 3825–
3833, 2012.
[20] “PDFs
in Google Search Results.” https:
//webmasters.googleblog.com/2011/09/
pdfs-in-google-search-results.html,
2011.
[21] G. Williams, “FontForge.” https://fontforge.
github.io/, 2017.
[22] J.
Berkenbilt,
“QPDF.”
sourceforge.net/, 2015.
http://qpdf.
[23] J. Zhao, “Custom Fonts in Latex.” http://math.
stanford.edu/~jyzhao/latexfonts.php,
2012.
[24] E. L. Bird, Steven and E. Klein, Natural Language
Processing with Python. OReilly Media Incorpo-
rated, 2009.
[25] Google, “Custom Search Engine.” https://cse.
google.com/cse/, 2016.
846    26th USENIX Security Symposium
USENIX Association
[26] Yahoo!, “BOSS Hosted Search.” https://boss.
yahoo.com/hosted-web-search, 2016.
[27] Microsoft,
https:
“Bing
Search API.”
//datamarket.azure.com/dataset/
5BA839F1-12CE-4CCE-BF57-A49D98D29A44,
2016.
[28] R. Smith and Z. Podobny, “Tesseract OCR.”
https://github.com/tesseract-ocr, 2017.
[29] K. J. Ward and V. Costan, “PDF-Extract.” https:
//github.com/CrossRef/pdfextract, 2015.
[30] D. Malmgren, “textract.” https://textract.
readthedocs.io/en/stable/, 2014.
[31] S. Hoffstaetter, J. Bochi, and M. Lee, “pytesser-
https://pypi.python.org/pypi/
act.”
pytesseract/0.1, 2014.
[32] D. Stevens, “PDF, Let Me Count
the Ways
.” https://blog.didierstevens.com/2008/
04/29/pdf-let-me-count-the-ways/, 2008.
[33] G. Endignoux, O. Levillain, and J. Y. Migeon,
“Caradoc: A Pragmatic Approach to PDF Parsing
and Validation,” in 2016 IEEE Security and Privacy
Workshops (SPW), pp. 126–139, May 2016.
[34] J. Wolf, “Omg wtf pdf,” 2010.
[35] N. Leontiadis, T. Moore, and N. Christin, “A nearly
four-year longitudinal study of search-engine poi-
soning,” in Proceedings of the 2014 ACM SIGSAC
Conference on Computer and Communications Se-
curity, pp. 930–941, ACM, 2014.
[36] D. Y. Wang, S. Savage, and G. M. Voelker, “Juice:
A longitudinal study of an seo botnet.,” in NDSS,
2013.
[37] K. Du, H. Yang, Z. Li, H. Duan, and K. Zhang,
“The ever-changing labyrinth: A large-scale anal-
ysis of wildcard dns powered blackhat seo,” in
25th USENIX Security Symposium (USENIX Secu-
rity 16), USENIX Association.
USENIX Association
26th USENIX Security Symposium    847