Given a c fraction of residual corrupted blocks from a server’s
fragment, we can compute a lower bound on the fraction of chal-
lenges that contain at least one incorrect block q,c = 1− ((1−c )m
)
v
(m
v )
(for m the size of ﬁle segments and v the number of blocks aggre-
gated in a challenge). Based on q,c, we can determine a threshold
q (chosen at q,c
2 ) at which the client considers the server frag-
ment corrupted and calls the redistribute algorithm. We estimate
the probability pn that we fail to detect corruption of at least a c-
fraction of blocks.
PROPOSITION 1. Let μ be the uf-ecc advantage of an adver-
sary for the (composite) dispersal code ECCd (as given by Lem-
mas 1 and 3 in Section 5.3 and 5.4, respectively). For q = q,c
2 ,
the probability with which the client does not detect a corruption
of c fraction of blocks at a server with a correct code base is
pn ≤ e
− nq (q,c−2μ)2
8(q,c−μ)
.
195Challenges for 20 aggregated blocks and different server codes
Challenges for 0.05 server code and different aggregation values
s
e
g
n
e
l
l
a
h
c
f
o
r
e
b
m
u
N
 350
 300
 250
 200
 150
 100
 50
 0
 0
Detection 0.9
Detection 0.99
Detection 0.999
Detection 0.9999
Detection 0.99999
Detection 0.99999
 0.02
 0.04
 0.06
 0.08
 0.1
 0.12
 0.14
 0.16
Server code redundancy
s
e
g
n
e
l
l
a
h
c
f
o
r
e
b
m
u
N
 200
 150
 100
 50
 0
20
50
100
200
0.9
0.99
0.999
0.9999 0.99999 0.999999
Detection probability
Figure 3: Number of challenges for different server codes (left) and different number of blocks aggregated in a challenge (right).
Role of dispersal code.
Based on the above proposition, we can choose the frequency of
challenge-response interactions in an epoch based on the desired
probability of detection (1 − pn), the redundancy embedded in the
server code and the number of aggregated blocks in a challenge.
The left graph in Figure 3 shows that the number of challenges nq
increases when the server code shrinks, and also when the detection
probability increases (this graph assumes that 20 blocks are aggre-
gated in a challenge). The right graph in Figure 3 shows that the
client needs to issue less challenges in an epoch if more blocks are
aggregated in a challenge (this graph is done for a server code with
redundancy 5%).
The adversary controls up to b ≤
(cid:11) n−(cid:3)−1
(cid:12) out of the n servers in epoch t and corrupted up to b
servers in epoch t − 1. Therefore, we can only guarantee that at
least n − 2b servers successfully completed at least one challenge-
response round with the client in epoch t − 1 with a correct code
base, and still have a correct code base.
For those n − 2b servers, there are still two cases in which a
server’s fragment is too heavily corrupted to be recovered with the
server code: (1) The corruption level is below c, but the server
code can not correct c—a low probability side-effect of using an
“adversarial code” or (2) The corruption level is ≥ c, but the HAIL
challenge-response protocol didn’t successfully detect the corrup-
tion. We can bound the probability of Case (1) by the adversarial
code advantage γ. The probability of Case (2) is bounded above by
pn, as computed in Proposition 1.
2
These two bounds apply to a single server. In order to compute
the availabilty of the whole HAIL system, we must treat the sys-
tem as a stochastic process. Our goal, then, is to obtain an upper
bound on the probability that enough fragments become unrecov-
erable that F is unavailable. We do so in the following theorem.
-
(cid:4)(n−2b)(γ+pn )
available in a time epoch. Then U is upper bounded by:
THEOREM 1. Let U be the probability that HAIL becomes un-
(cid:3)
− 1, if b <
, for β = n−2b−(cid:3)−1
(n−2b)(γ+pn )
(1+β)1+β
and γ + pn < n−2b−(cid:3)−1
n−(cid:3)−1
- 1 − [1 − (γ + pn)](cid:3)+1, if b = n−(cid:3)−1
The probability that HAIL becomes unavailable over an interval
n−2b
.
.
2
β
e
2
of t epochs is upper bounded by tU.
Figure 4 shows HAIL’s availability (per epoch) for b = 3 faults
tolerated in an epoch, different conﬁgurations for the dispersal code
and different detection probabilities. In the left graph from Figure
4, the number of primary servers is ﬁxed to 8 and the number of
total servers varies from 15 to 24. In the right graph of Figure 4,
the total number of servers is constant at 20 and the number of
primary servers is between 6 and 13.
Consider epochs of length one week for a 2-year time interval
(about 100 epochs). A 10−6 unavailability target for 2 years trans-
lates to 10−8 unavailability per epoch. This availability level can
be obtained, for instance, from a (17,8) dispersal code at detection
level 0.99999 or (20,9) code at detection level 0.999. Once the de-
tection level is determined, parameters such as server code redun-
dancy and frequency of challenge-response protocol in an epoch
can be determined from Proposition 1.
Weaker adversarial model. Our experiment in Figure 2 deﬁnes
a very strong adversarial model: As A is fully Byzantine, it can
corrupt both the code base and the storage systems of servers. As
servers and storage can be separate systems, it is interesting to con-
sider a model in which the adversary only corrupts storage systems.
Such a “storage-limited” adversarial model yields better security
bounds: n−b servers are needed to decode the ﬁle instead of n−2b
(under the technical condition that n − b ≥ (cid:4) + 1). Table 1 illus-
trates several code parameters and the availability they offer for the
weaker, “storage-limited” adversarial model.
b
1
1
1
1
2
2
n
3
4
5
6
5
6
(cid:4)
1
2
3
2
2
3
Unavailability
2 · 10−6
3 · 10−6
4 · 10−6
4 · 10−9
3 · 10−6
4 · 10−6
b
2
2
3
3
3
3
n
7
8
6
7
8
9
(cid:4)
4
3
2
3
4
3
Unavailability
5 · 10−6
6 · 10−9
3 · 10−6
3 · 10−6
5 · 10−6
6 · 10−9
Table 1: Several code parameters and their availability per
epoch for a weaker model.
8.
IMPLEMENTATION
We have implemented HAIL ﬁle-encoding functionality in or-
der to test the effect of dispersal code choice on encoding time.
The code was written in C++ and experiments were run on an Intel
Core 2 processor running at 2.16 GHz. All cryptographic opera-
tions utilize the RSA BSAFE C library.
The dispersal code was implemented using the Jerasure [29] op-
timized library written in C. In order to implement the integrity-
protected ECC algorithm, PRF values are added to the fragments
stored on secondary servers. One subtle issue when implementing
the IP-ECC construction is that the symbol size of Reed-Solomon
encoding should be equal to the security parameter (e.g., 128 bits).
However, Jerasure implements codes with symbol sizes up to 32
196HAIL unavailability for 8 primary servers and 3 faults per epoch
HAIL unavailability for 20 total servers and 3 faults per epoch
e
l
i
b
a
l
i
a
v
a
t
o
n
a
a
d
t
f
o
y
t
i
l
i
b
a
b
o
r
P
 1
 1e-010
 1e-020
 1e-030
 1e-040
 1e-050
 15
Detection 0.9
Detection 0.99
Detection 0.999
Detection 0.9999
Detection 0.99999
Detection 0.999999
 16
 17
 19