Q ∈ QS ∧ the_mru_vote(v_hist, Q) ∈ {⊥, v} .
Following the discussion above, we prove that:
mru_guard(votes, Q, v) =⇒ safe(votes, next_round, v),
for any Q ∈ QS and v ∈ V . Replacing safe with mru_guard
in the event sv_round thus yields a correct reﬁnement of
Same Voting. As the MRU scheme works even with just
partial information, we are now ready to move to a distributed
implementation.
A. Optimizing MRU Vote
Like Fast Consensus, the MRU scheme can also be opti-
mized to avoid transmitting the entire voting histories of all the
processes. The histories were only used in the mru_guard, to
determine the MRU vote of a quorum of processes. This can
obviously also be done by just looking at the MRU vote of each
individual process in the quorum, together with its associated
round number. The optimized state of the system is thus:
record opt_v_state =
next_round : N
mru_vote : Π (cid:2) (N × V )
decisions : Π (cid:2) V
The guard is changed in the obvious fashion. It now takes a
parameter mrus : Π (cid:2) (N × V ):
opt_mru_guard(mrus, Q, v) (cid:3)
Q ∈ QS ∧ opt_mru_vote(mrus[Q]) ∈ {⊥, v} .
400400
For brevity we skip the deﬁnition of opt_mru_vote. The
voting round is changed as expected, and the reﬁnement proof
is straightforward.
Event opt_mru_round(r, S, v, Q, r_decisions):
Guard
r = next_round
S (cid:10)= ∅ =⇒ opt_mru_guard(mru_vote, Q, v)
d_guard(r_decisions, [S (cid:16)→ v])
Action
next_round := r + 1
mru_vote := mru_vote (cid:6) [S (cid:16)→ (r, v)]
decisions := decisions (cid:6) r_decisions
This gives us a method of picking candidates. The processes
must also agree on exactly one such candidate, and, as in the
previous section, we must choose a vote agreement scheme.
The Paxos [22] and Chandra-Toueg [10] algorithms opt for a
leader-based scheme. We have derived both of these algorithms
in our formal development, but we do not discuss them here,
and instead present a new algorithm that we devised.
B. New Algorithm
In [12], Charron-Bost and Schiper posed the question
whether there exists a leaderless consensus algorithm tolerating
f  N
2 then
propp := smallest w from (_, w) received.
(cid:2)HOr
p
let mrus = set of all tsv
let mru = opt_mru_vote(mrus)
if mru (cid:10)= ⊥ then
candp := mru
else
(cid:2)s from (tsv, _) received
if
10:
11:
12:
13:
14:
15:
16:
// vote agreement
candp := propp
else
candp := ⊥
17:
18:
19: Sub-Round r = 3φ + 1:
20: sendr
p:
send candp to all
21:
22:
23: nextr
p:
if received some v (cid:10)= ⊥ more than N
24:
25:
26:
27:
28:
29: Sub-Round r = 3φ + 2:
30: sendr
p:
send agreed_votep to all
31:
32:
33: nextr
p:
if received some v (cid:10)= ⊥ more than N
34:
35:
mru_votep := (φ, v)
agreed_votep := v
agreed_votep := ⊥
decisionp := v
else
// voting proper
2 times then
2 times then
Figure 7. The HO model of the New Algorithm
voting principle reﬂected in the check in line 24, and requires
no leader. The output of vote agreement corresponds to the
parameter v of the abstract opt_mru_round event. If a process
accepts v as its round vote, it updates its MRU vote, reﬂecting
the update of the mru_vote ﬁeld in the abstract event. The last
sub-round then deals with ordinary voting, with the decision
rule in lines 34–35 implementing the d_guard.
The reﬁnement
relation equates
the decisionp and
mru_votep variables of each process to decision(p) and
mru_vote(p) in the abstract model, and the proof follows the
discussion above. The only part of the algorithm that we must
still explain is termination, which relies on the communication
predicate:
∃φ. Punif (3φ) ∧ ∀i ∈ {0, 1, 2} . Pmaj (3φ + i).
As in UniformVoting, the processes try to help convergence to
a common vote candidate by taking the smallest prop value
seen so far. The above predicate then ensures that all processes
hold the same (non-⊥) cand after sub-round 3φ. In sub-rounds
3φ + 1 and 3φ + 2, the processes then adopt this cand ﬁrst as
the round vote, and then also as the decision.
401401
IX. CONCLUSION
We have presented a uniﬁed description of a number of
consensus algorithms found in the literature: OneThirdRule,
AT,E, Paxos, Chandra-Toueg, Ben-Or, UniformVoting, and the
generic algorithm of [17]. By using reﬁnement, we could (1)
describe the main algorithmic ideas behind them in simple
terms and (2) create a taxonomy of the algorithms based on
these ideas. We hope that we have also shed light on why
the algorithms are constructed the way they are. Finally, the
insights gained from the taxonomy helped us develop a new
algorithm, which is leaderless, tolerates f < N
2 failures, and
does not employ waiting to guarantee safety. This answers a
question posed in [12] asking whether such an algorithm exists.
The consensus problem has been thoroughly studied. Nev-
ertheless, we believe that our work provides both a useful
synthesis of existing knowledge about the algorithms we cover
and a novel way of understanding and relating them. In
particular, the Voting model and the no defection property
provide a simple basis for describing the different algorithms,
a basis we have not seen in the literature before.
Our work, of course, has its own limitations. The as-
sumption of communication-closedness puts some practical
algorithms, such as Disk Paxos, outside of our scope. Further-
more, algorithms such as Fast Paxos [24] essentially combine
several algorithms and as such they do not cleanly ﬁt into our
hierarchy. Finally, our abstract models capture only the safety
guarantees of the target algorithms. It is unclear whether and
how this could be extended to termination in a simple fashion.
As future work, we plan to extend our development to
cover Byzantine failures. We are conﬁdent that this is possible,
as reﬁnement has been used to adapt consensus algorithms
to the Byzantine setting before [25], [26]. We would also
like to extend the scope of our work to tasks that build
upon consensus, such as atomic broadcast. Stepwise reﬁnement
has been used in this context already [36], but it may be
possible to soundly apply some form of lockstep abstraction
to these tasks as well. Finally, while the lockstep abstraction
is extremely useful for reasoning, the resulting models are
somewhat farther away from implementations than the more
standard asynchronous models with failure detectors, despite
the result in [11]. It would be interesting to see how to best
bridge this gap and develop formally veriﬁed implementations
of protocols speciﬁed in the HO and similar models.
REFERENCES
[1] M. Abadi and L. Lamport. The existence of reﬁnement mappings.
Theor. Comput. Sci., 82(2):253–284, 1991.
J.-R. Abrial. Modeling in Event-B: System and Software Engineering.
Cambridge University Press, 2010.
[2]
[3] M. Ben-Or. Another advantage of free choice: Completely asynchronous
agreement protocols. In PODC, pages 27–30, 1983.
[4] M. Biely, J. Widder, B. Charron-Bost, A. Gaillard, M. Hutle, and
In PODC, pages
A. Schiper. Tolerating corrupted communication.
244–253, 2007.
[5] R. Boichat, P. Dutta, S. Frølund, and R. Guerraoui. Deconstructing
Paxos. SIGACT News, 34(1):47–67, 2003.
[6] R. Boichat, P. Dutta, S. Frølund, and R. Guerraoui. Reconstructing
Paxos. SIGACT News, 34(2):42–57, 2003.
[7] F. Brasileiro, F. Greve, A. Mostefaoui, and M. Raynal. Consensus in
one communication step. In PaCT, pages 42–50, 2001.
402402
[8]
J. W. Bryans. Developing a consensus algorithm using stepwise
reﬁnement. In ICFEM, pages 553–568, 2011.
[9] C. Cachin. Yet another visit to Paxos. Technical Report RZ 3754, IBM
Research, 2009. Revised April 7, 2011.
[10] T. D. Chandra and S. Toueg. Unreliable failure detectors for reliable
distributed systems. Journal of the ACM (JACM), 43(2):225–267, 1996.
[11] M. Chaouch-Saad, B. Charron-Bost, and S. Merz. A reduction theorem
for the veriﬁcation of round-based distributed algorithms. In Reacha-
bility Problems, pages 93–106. 2009.
[12] B. Charron-Bost and A. Schiper. The heard-of model: computing
in distributed systems with benign faults. Distributed Computing,
22(1):49–71, 2009.
[13] H. Debrat and S. Merz. Verifying fault-tolerant distributed algorithms
in the heard-of model. Archive of Formal Proofs, 2012.
[14] C. Dwork, N. Lynch, and L. Stockmeyer. Consensus in the presence of
partial synchrony. Journal of the ACM (JACM), 35(2):288–323, 1988.
Impossibility of
distributed consensus with one faulty process. J. ACM, 32(2):374–382,
1985.
[15] M. J. Fischer, N. A. Lynch, and M. S. Paterson.
[16] E. Gafni. Round-by-round fault detectors: Unifying synchrony and
asynchrony. In PODC, pages 143–152, 1998.
[17] R. Guerraoui and M. Raynal. The information structure of indulgent
consensus. IEEE Trans. Computers, 53(4):453–466, 2004.
[18] R. Guerraoui and M. Raynal. The alpha of indulgent consensus.
Comput. J., 50(1):53–67, 2007.
[19] M. Hurﬁn, A. Mostéfaoui, and M. Raynal. A versatile family of con-
sensus protocols based on Chandra-Toueg’s unreliable failure detectors.
IEEE Trans. Computers, 51(4):395–408, 2002.
[20] M. Hutle and A. Schiper. Communication predicates: A high-level
abstraction for coping with transient and dynamic faults. In DSN, pages
92–101, 2007.
[21] F. Junqueira, B. Reed, and M. Seraﬁni.
Zab: High-performance
broadcast for primary-backup systems. In DSN, pages 245–256, 2011.
[22] L. Lamport. The part-time parliament. ACM Trans. Comput. Syst.,
16(2):133–169, 1998.
[23] L. Lamport. Paxos made simple. ACM SIGACT News, 32(4):51–58,
2001.
[24] L. Lamport. Fast Paxos. Distributed Computing, 19(2):79–103, 2006.
[25] L. Lamport. Byzantizing Paxos by reﬁnement. In Distributed Comput-
ing, pages 211–224. Springer, 2011.
[26] B. Lampson. The ABCD’s of Paxos. In PODC, 2001.
[27] D. Malkhi and M. K. Reiter. Byzantine quorum systems. Distributed
Computing, 11(4):203–213, 1998.
[28] O. Mari´c and C. Sprenger. Consensus reﬁned. Archive of Formal Proofs,
2015. http://afp.sf.net/entries/Consensus_Reﬁned.shtml.
[29] A. Mostéfaoui, S. Rajsbaum, and M. Raynal. A versatile and modular
consensus protocol. In DSN, pages 364–373, 2002.
[30] A. Mostéfaoui and M. Raynal. Solving consensus using Chandra-
Toueg’s unreliable failure detectors: A general quorum-based approach.
In DISC, pages 49–63, 1999.
[31] T. Nipkow, L. C. Paulson, and M. Wenzel.
Isabelle/HOL – A Proof
Assistant for Higher-Order Logic, volume 2283. Springer, 2002.
[32] R. D. Prisco, B. W. Lampson, and N. A. Lynch. Revisiting the Paxos
algorithm. Theor. Comput. Sci., 243(1-2):35–91, 2000.
[33] M. Raynal and J. Stainer. Synchrony weakened by message adversaries
vs asynchrony restricted by failure detectors. In PODC, pages 166–175,
2013.
[34] O. Rütti, Z. Milosevic, and A. Schiper. Generic construction of
consensus algorithms for benign and byzantine faults. In DSN, pages
343–352, 2010.
[35] Y. J. Song, R. van Renesse, F. B. Schneider, and D. Dolev. The building
blocks of consensus. In ICDCN, pages 54–72, 2008.
[36] R. van Renesse, N. Schiper, and F. B. Schneider. Vive la différence:
IEEE Transactions on
Paxos vs. Viewstamped Replication vs. Zab.
Dependable and Secure Computing, PP(99):1–1, 2014.