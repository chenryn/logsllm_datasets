### Optimized Text

#### Section A: Optimizing MRU Vote

Given the condition \( Q \in QS \) and \(\text{the\_mru\_vote}(v_{\text{hist}}, Q) \in \{\bot, v\}\), we can establish the following implication:
\[ \text{mru\_guard}(\text{votes}, Q, v) \implies \text{safe}(\text{votes}, \text{next\_round}, v) \]
for any \( Q \in QS \) and \( v \in V \). By substituting \(\text{safe}\) with \(\text{mru\_guard}\) in the event \(\text{sv\_round}\), we achieve a correct refinement of the Same Voting protocol. Since the MRU scheme is effective even with partial information, we are now prepared to transition to a distributed implementation.

##### 1. Optimizing the MRU Scheme

Similar to Fast Consensus, the MRU scheme can be optimized to avoid transmitting the entire voting histories of all processes. The histories were only used in the \(\text{mru\_guard}\) to determine the MRU vote of a quorum of processes. This can also be achieved by examining the MRU vote of each individual process in the quorum, along with its associated round number. The optimized state of the system is defined as:

```plaintext
record opt_v_state =
  next_round : N
  mru_vote : Π (N × V)
  decisions : Π V
```

The guard is modified to take a parameter \(\text{mrus} : \Pi (N \times V)\):

```plaintext
opt_mru_guard(mrus, Q, v) := Q \in QS \land \text{opt\_mru\_vote}(\text{mrus}[Q]) \in \{\bot, v\}
```

For brevity, we omit the definition of \(\text{opt\_mru\_vote}\). The voting round is updated as expected, and the refinement proof is straightforward.

##### 2. Event Definition

```plaintext
Event opt_mru_round(r, S, v, Q, r_decisions):
  Guard
    r = next_round
    S \neq \emptyset \implies \text{opt\_mru\_guard}(\text{mru\_vote}, Q, v)
    d_guard(r_decisions, [S \mapsto v])
  Action
    next_round := r + 1
    mru_vote := mru_vote \cup [S \mapsto (r, v)]
    decisions := decisions \cup r_decisions
```

This method allows us to select candidates. The processes must agree on exactly one such candidate, and, as in the previous section, we need to choose a vote agreement scheme. Algorithms like Paxos [22] and Chandra-Toueg [10] use a leader-based scheme. We have derived both these algorithms in our formal development, but we do not discuss them here. Instead, we present a new algorithm that we devised.

#### Section B: New Algorithm

In [12], Charron-Bost and Schiper posed the question of whether there exists a leaderless consensus algorithm tolerating \( f < \frac{N}{2} \) failures. Our new algorithm addresses this question. The algorithm operates in sub-rounds and ensures that processes agree on a single candidate without a leader.

##### 1. Sub-Round Definitions

- **Sub-Round \( r = 3\phi \):**
  - Each process sends its current value.
  - If a process receives a value \( w \) more than \( \frac{N}{2} \) times, it sets \( \text{propp} \) to the smallest \( w \).

- **Sub-Round \( r = 3\phi + 1 \):**
  - Each process sends its candidate \( \text{candp} \) to all other processes.
  - If a process receives a value \( v \neq \bot \) more than \( \frac{N}{2} \) times, it updates its \(\text{mru\_votep}\) and \(\text{agreed\_votep}\).

- **Sub-Round \( r = 3\phi + 2 \):**
  - Each process sends its agreed vote \( \text{agreed\_votep} \) to all other processes.
  - If a process receives a value \( v \neq \bot \) more than \( \frac{N}{2} \) times, it updates its decision.

##### 2. Communication Predicate

The communication predicate ensures that all processes converge to a common vote candidate:

```plaintext
∃φ. P_unif(3φ) ∧ ∀i ∈ {0, 1, 2}. P_maj(3φ + i)
```

This predicate ensures that all processes hold the same non-\(\bot\) candidate after sub-round \( 3\phi \). In sub-rounds \( 3\phi + 1 \) and \( 3\phi + 2 \), the processes adopt this candidate as the round vote and then as the decision.

#### Conclusion

We have provided a unified description of several consensus algorithms, including OneThirdRule, AT,E, Paxos, Chandra-Toueg, Ben-Or, UniformVoting, and the generic algorithm of [17]. Using refinement, we have (1) described the main algorithmic ideas in simple terms and (2) created a taxonomy of the algorithms based on these ideas. Our work sheds light on why these algorithms are constructed as they are. The insights gained from the taxonomy helped us develop a new algorithm that is leaderless, tolerates \( f < \frac{N}{2} \) failures, and does not rely on waiting to guarantee safety. This answers a question posed in [12].

While our work has limitations, such as the assumption of communication-closedness, we plan to extend our development to cover Byzantine failures and tasks that build upon consensus, such as atomic broadcast. Stepwise refinement has been used in these contexts before, and we aim to bridge the gap between our models and practical implementations.

#### References

[1] M. Abadi and L. Lamport. The existence of refinement mappings. Theor. Comput. Sci., 82(2):253–284, 1991.
[2] J.-R. Abrial. Modeling in Event-B: System and Software Engineering. Cambridge University Press, 2010.
[3] M. Ben-Or. Another advantage of free choice: Completely asynchronous agreement protocols. In PODC, pages 27–30, 1983.
[4] M. Biely, J. Widder, B. Charron-Bost, A. Gaillard, M. Hutle, and A. Schiper. Tolerating corrupted communication. In PODC, pages 244–253, 2007.
[5] R. Boichat, P. Dutta, S. Frølund, and R. Guerraoui. Deconstructing Paxos. SIGACT News, 34(1):47–67, 2003.
[6] R. Boichat, P. Dutta, S. Frølund, and R. Guerraoui. Reconstructing Paxos. SIGACT News, 34(2):42–57, 2003.
[7] F. Brasileiro, F. Greve, A. Mostefaoui, and M. Raynal. Consensus in one communication step. In PaCT, pages 42–50, 2001.
[8] J. W. Bryans. Developing a consensus algorithm using stepwise refinement. In ICFEM, pages 553–568, 2011.
[9] C. Cachin. Yet another visit to Paxos. Technical Report RZ 3754, IBM Research, 2009. Revised April 7, 2011.
[10] T. D. Chandra and S. Toueg. Unreliable failure detectors for reliable distributed systems. Journal of the ACM (JACM), 43(2):225–267, 1996.
[11] M. Chaouch-Saad, B. Charron-Bost, and S. Merz. A reduction theorem for the verification of round-based distributed algorithms. In Reachability Problems, pages 93–106. 2009.
[12] B. Charron-Bost and A. Schiper. The heard-of model: computing in distributed systems with benign faults. Distributed Computing, 22(1):49–71, 2009.
[13] H. Debrat and S. Merz. Verifying fault-tolerant distributed algorithms in the heard-of model. Archive of Formal Proofs, 2012.
[14] C. Dwork, N. Lynch, and L. Stockmeyer. Consensus in the presence of partial synchrony. Journal of the ACM (JACM), 35(2):288–323, 1988.
[15] M. J. Fischer, N. A. Lynch, and M. S. Paterson. Impossibility of distributed consensus with one faulty process. J. ACM, 32(2):374–382, 1985.
[16] E. Gafni. Round-by-round fault detectors: Unifying synchrony and asynchrony. In PODC, pages 143–152, 1998.
[17] R. Guerraoui and M. Raynal. The information structure of indulgent consensus. IEEE Trans. Computers, 53(4):453–466, 2004.
[18] R. Guerraoui and M. Raynal. The alpha of indulgent consensus. Comput. J., 50(1):53–67, 2007.
[19] M. Hurfin, A. Mostefaoui, and M. Raynal. A versatile family of consensus protocols based on Chandra-Toueg’s unreliable failure detectors. IEEE Trans. Computers, 51(4):395–408, 2002.
[20] M. Hutle and A. Schiper. Communication predicates: A high-level abstraction for coping with transient and dynamic faults. In DSN, pages 92–101, 2007.
[21] F. Junqueira, B. Reed, and M. Serafini. Zab: High-performance broadcast for primary-backup systems. In DSN, pages 245–256, 2011.
[22] L. Lamport. The part-time parliament. ACM Trans. Comput. Syst., 16(2):133–169, 1998.
[23] L. Lamport. Paxos made simple. ACM SIGACT News, 32(4):51–58, 2001.
[24] L. Lamport. Fast Paxos. Distributed Computing, 19(2):79–103, 2006.
[25] L. Lamport. Byzantizing Paxos by refinement. In Distributed Computing, pages 211–224. Springer, 2011.
[26] B. Lampson. The ABCD’s of Paxos. In PODC, 2001.
[27] D. Malkhi and M. K. Reiter. Byzantine quorum systems. Distributed Computing, 11(4):203–213, 1998.
[28] O. Maric and C. Sprenger. Consensus refined. Archive of Formal Proofs, 2015. http://afp.sf.net/entries/Consensus_Refined.shtml.
[29] A. Mostefaoui, S. Rajsbaum, and M. Raynal. A versatile and modular consensus protocol. In DSN, pages 364–373, 2002.
[30] A. Mostefaoui and M. Raynal. Solving consensus using Chandra-Toueg’s unreliable failure detectors: A general quorum-based approach. In DISC, pages 49–63, 1999.
[31] T. Nipkow, L. C. Paulson, and M. Wenzel. Isabelle/HOL – A Proof Assistant for Higher-Order Logic, volume 2283. Springer, 2002.
[32] R. D. Prisco, B. W. Lampson, and N. A. Lynch. Revisiting the Paxos algorithm. Theor. Comput. Sci., 243(1-2):35–91, 2000.
[33] M. Raynal and J. Stainer. Synchrony weakened by message adversaries vs asynchrony restricted by failure detectors. In PODC, pages 166–175, 2013.
[34] O. Rütti, Z. Milosevic, and A. Schiper. Generic construction of consensus algorithms for benign and Byzantine faults. In DSN, pages 343–352, 2010.
[35] Y. J. Song, R. van Renesse, F. B. Schneider, and D. Dolev. The building blocks of consensus. In ICDCN, pages 54–72, 2008.
[36] R. van Renesse, N. Schiper, and F. B. Schneider. Vive la différence: Paxos vs. Viewstamped Replication vs. Zab. IEEE Transactions on Dependable and Secure Computing, PP(99):1–1, 2014.