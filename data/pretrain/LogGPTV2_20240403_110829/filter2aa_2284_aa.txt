Demystifying Key 
Stretching and PAKEs
Steve “Sc00bz” Thomas
2
Who am I? Why am I here?
3
Who am I? Why am I here?
● Password cracker
● Cryptography enthusiast
● I just wanted a pw manager
– Bugs and vulns galore
– How would I make one?
● PHC Panelist
– I broke Schvrch and old Makwa
4
● Key Stretching
– What?
– Why?
– Types
– What goes wrong?
– How?
– Settings
Agenda
● Password Authenticated 
Key Exchange (PAKE)
– What?
– Why?
– Types
– How?
– Properties
5
Key Stretching
● Passwords
– Hashing (Authentication)
– KDF (Key Derivation Function)
● Fingerprints
– Signal’s Safety Numbers (299.7 → 2112)
6
Key Stretching – Why?
● Ashley Madison data breach (2015)
– 36.15 million bcrypt cost 12 hashes
● 113 H/s/GPU (GTX 980 Ti, the best at the time)
● 89 GPU-hours/password
7
Key Stretching – Why?
● Ashley Madison data breach (2015)
– 36.15 million bcrypt cost 12 hashes
● 113 H/s/GPU (GTX 980 Ti, the best at the time)
● 89 GPU-hours/password
– 15.26 million salted, case-insensitive MD5 hashes[1]
● 11.2 million bcrypt cracked in 10 days
● 73% with MD5 hashes
8
Key Stretching – Types
● Computationally hard
– Amount of work done (number of blocks hashed)
● Parallel vs Sequential
● Memory hard
– Amount of memory used
– Bandwidth consumed
● Cache hard
– Random small transactions
9
Key Stretching – Types
● Computationally hard
– Parallel PBKDF2
– PBKDF2
● Memory hard
– Argon2
– Balloon Hashing
– scrypt
● Cache hard
– bcrypt
– bscrypt
10
Key Stretching – How?
1) seed = H(inputs)
a) [optional] independent seed = H(non-secret inputs)
2) work = doWork(settings, seed[, independent seed])
3) key = KDF(output size, work, seed or inputs)
11
Key Stretching Bugs
● md5crypt (CVE-2012-3287)
● PBKDF2 (CVE-2013-1443)
● phpass (CVE-2014-9034)
● shacrypt (CVE-2016-20013)
● bcrypt's $2$, $2a$→$2b$, $2x$, truncation, and null 
characters
12
Key Stretching Bugs
● bcrypt silently truncates at 72 bytes
$passhash = password_hash(
phash('P3rv4d3_extrasalt') .
$fields['password'] .
phash('S0ftw4r3_extrapepper'),
PASSWORD_BCRYPT);
Note “phash()” is SHA-256 hex output
Source: https://twitter.com/Paul_Reviews/status/1538124477317451777
Code from
UK’s “Police CyberAlarm”
13
Key Stretching Bugs
● bcrypt silently truncates at 72 bytes
$passhash = password_hash(
phash('P3rv4d3_extrasalt') .
  $fields['password'] .
  phash('S0ftw4r3_extrapepper'),
PASSWORD_BCRYPT);
Note “phash()” is SHA-256 hex output
Source: https://twitter.com/Paul_Reviews/status/1544735763807539200
14
Key Stretching Bugs
● Bouncy Castle’s bcrypt compare .indexOf() vs .charAt() (CVE-
2020-28052)
● Checks the first occurrences of ./0123456789
● $2y$10$UnluckySalt./3456789..HashValueWontMatter............
– 1 in 1,030,319 (for costs 11 and 12)
– 1 in 197,153 (for all other normal costs)
15
● Key Stretching
– What?
– Why?
– Types
– What goes wrong?
– How?
– Settings
Agenda
● Password Authenticated 
Key Exchange (PAKE)
– What?
– Why?
– Types
– How?
– Properties
16
Key Stretching – How?
1) seed = H(inputs)
2) work = doWork(settings, seed)
3) key = KDF(outSize, work, seed)
17
Key Stretching – How?
1) seed = H(inputs)
2) work = doWork(settings, seed)
3) key = KDF(outSize, work, seed)
18
PBKDF2
HMAC-Init
Password
HMAC-Finish
Salt || 1
HMAC-Finish
XOR
XOR
HMAC-Finish
XOR
HMAC-Finish
Salt || 2
HMAC-Finish
XOR
XOR
HMAC-Finish
XOR
Concatenate
...
19
Parallel PBKDF2
work = xorBlocks(
  pbkdf2(password, salt,
    iterations:1024,
    length:128*cost*hashLength))
output =
  pbkdf2(password, work,
    iterations:1,
    length:outputLength)
20
Password Settings
● Minimum
– Such that an attacker gets <10 kH/s/GPU[17]
● Maximum
– Doesn’t take too much time 
100 ms
≲
– Doesn’t use too much memory
– Meets your needed throughput on your hardware
21
bscrypt Minimum Settings
● m=256 (256 KiB), t=8, p=1
● m=256 (256 KiB), t=4, p=2
● m=256 (256 KiB), t=3, p=3
● General
– m=highest per core cache level in KiB
– t≥max(3, 1900000/1024/m/p)
– p≤cores
https://tobtu.com/minimum-password-settings/
BSidesLV 2022 (PasswordsCon track)
bscrypt - A Cache Hard Password Hash
22
bcrypt Minimum Settings
● Cost 9
– Technically it's like “8.1” but it's an integer.
– This should be about 5.3 kH/s on an RTX 3080 12GB.
https://tobtu.com/minimum-password-settings/
23
Argon2 Recommended Settings
● RFC9106
1) Argon2id: m=2097152 (2 GiB), t=1, p=4
2) Argon2id: m=65536 (64 MiB), t=3, p=4
https://tobtu.com/minimum-password-settings/
24
Argon2 Recommended Settings
● RFC9106
1) Argon2id: m=2097152 (2 GiB), t=1, p=4
2) Argon2id: m=65536 (64 MiB), t=3, p=4
https://tobtu.com/minimum-password-settings/
Just kidding. Those are
wildly different strengths.
25
Argon2 Minimum Settings
● Argon2{id,d}: m=45056 (44 MiB), t=1, p=1
● Argon2{id,d}: m=18432 (18 MiB), t=2, p=1
● Argon2: m=11264 (11 MiB), t=3, p=1
● Argon2: m=8192 (8 MiB), t=4, p=1
● Argon2: m=7168 (7 MiB), t=5, p=1
● General
– Argon2i: m≥89062.5/(3*t-1)*α, t≥3, p=1
– Argon2{id,d}: m≥89062.5/(3*t-1)*α, t≥1, p=1
https://tobtu.com/minimum-password-settings/
26
scrypt Minimum Settings
● N=217 (128 MiB), r=8, p=1
● N=216 (64 MiB), r=8, p=2
● N=215 (32 MiB), r=8, p=3
● N=214 (16 MiB), r=8, p=5
● N=213 (8 MiB), r=8, p=9
● General
– N≥570000/r/p*α, r=8, p≥1
https://tobtu.com/minimum-password-settings/
27
PBKDF2 Settings “Poll”
A) 1’000’000 iterations
B) 100’000 iterations
C) 10’000 iterations
D) 1’000 iterations
28
PBKDF2 Minimum Settings
● PBKDF2-HMAC-BLAKE-512*
– 170’000 iterations
● PBKDF2-HMAC-SHA-512
– 130’000 iterations
● PBKDF2-HMAC-SHA-256
– 350’000 iterations
● PBKDF2-HMAC-SHA-1
– 860’000 iterations
https://tobtu.com/minimum-password-settings/
Best but not a NIST approved hash
29
Parallel PBKDF2 Minimum Settings
● PPBKDF2-SHA-256
– Cost 3
● PPBKDF2-SHA-512
– Cost 1
● Each cost is equivalent to 131’072 (217) iterations of PBKDF2
https://tobtu.com/minimum-password-settings/
30
● Key Stretching
– What?
– Why?
– Types
– What goes wrong?
– How?
– Settings
Agenda
● Password Authenticated 
Key Exchange (PAKE)
– What?
– Why?
– Types
– How?
– Properties
31
PAKEs
● Password authentication
● Encrypted tunnels
● Sending files
– https://github.com/magic-wormhole
● Fighting phone spoofing
– https://commsrisk.com/?p=35506
32
Why not SCRAM?
● “Salted Challenge Response Authentication Mechanism”
● Untrusted channels
– Messages are equivalent to a password hash
33
Types of PAKEs
● Balanced
– Peer-to-Peer
● Augmented (aPAKE)
– Client-Server
● Doubly Augmented[9]