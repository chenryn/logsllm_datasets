# Demystifying Key Stretching and PAKEs
## Steve “Sc00bz” Thomas

### Introduction
**Who am I? Why am I here?**
- **Background:**
  - Password cracker
  - Cryptography enthusiast
  - Developer interested in creating a password manager
    - Encountered numerous bugs and vulnerabilities
    - Explored how to build a secure password manager
- **Experience:**
  - PHC (Password Hashing Competition) Panelist
  - Identified and reported vulnerabilities in Schvrch and older versions of Makwa

### Agenda
1. **Key Stretching**
   - What is it?
   - Why is it important?
   - Types of key stretching
   - Common issues
   - How it works
   - Recommended settings
2. **Password Authenticated Key Exchange (PAKE)**
   - What is it?
   - Why is it important?
   - Types of PAKE
   - How it works
   - Key properties

### Key Stretching
#### Overview
- **Passwords:**
  - **Hashing:** Used for authentication
  - **KDF (Key Derivation Function):** Generates cryptographic keys
- **Fingerprints:**
  - Example: Signal’s Safety Numbers (299.7 → 2112)

#### Why Key Stretching?
- **Example: Ashley Madison Data Breach (2015)**
  - **Bcrypt Cost 12 Hashes:**
    - 36.15 million hashes
    - 113 H/s/GPU (GTX 980 Ti, the best at the time)
    - 89 GPU-hours/password
  - **Salted, Case-Insensitive MD5 Hashes:**
    - 15.26 million hashes
    - 11.2 million bcrypt hashes cracked in 10 days
    - 73% with MD5 hashes

#### Types of Key Stretching
- **Computationally Hard:**
  - Amount of work done (number of blocks hashed)
  - Examples:
    - Parallel PBKDF2
    - PBKDF2
- **Memory Hard:**
  - Amount of memory used
  - Bandwidth consumed
  - Examples:
    - Argon2
    - Balloon Hashing
    - scrypt
- **Cache Hard:**
  - Random small transactions
  - Examples:
    - bcrypt
    - bscrypt

#### How Key Stretching Works
1. **Generate Seed:**
   - `seed = H(inputs)`
   - [Optional] `independent seed = H(non-secret inputs)`
2. **Perform Work:**
   - `work = doWork(settings, seed[, independent seed])`
3. **Derive Key:**
   - `key = KDF(output size, work, seed or inputs)`

#### Common Bugs in Key Stretching
- **md5crypt (CVE-2012-3287)**
- **PBKDF2 (CVE-2013-1443)**
- **phpass (CVE-2014-9034)**
- **shacrypt (CVE-2016-20013)**
- **bcrypt's $2$, $2a$→$2b$, $2x$, truncation, and null characters**

#### Example Bug: Bcrypt Truncation
- **Code Example:**
  ```php
  $passhash = password_hash(
    phash('P3rv4d3_extrasalt') .
    $fields['password'] .
    phash('S0ftw4r3_extrapepper'),
    PASSWORD_BCRYPT);
  ```
  - Note: `phash()` is SHA-256 hex output
  - Source: [Twitter](https://twitter.com/Paul_Reviews/status/1538124477317451777)
  - Context: UK’s “Police CyberAlarm”

- **Bouncy Castle’s bcrypt compare .indexOf() vs .charAt() (CVE-2020-28052)**
  - Checks the first occurrences of ./0123456789
  - Example: `$2y$10$UnluckySalt./3456789..HashValueWontMatter............`
  - Probability:
    - 1 in 1,030,319 (for costs 11 and 12)
    - 1 in 197,153 (for all other normal costs)

### Recommended Settings for Key Stretching
- **General Guidelines:**
  - **Minimum:**
    - Ensure an attacker gets <10 kH/s/GPU
  - **Maximum:**
    - Should not take more than 100 ms
    - Should not use too much memory
    - Meet the needed throughput on your hardware

- **Specific Algorithms:**
  - **bscrypt:**
    - `m=256 (256 KiB), t=8, p=1`
    - `m=256 (256 KiB), t=4, p=2`
    - `m=256 (256 KiB), t=3, p=3`
  - **bcrypt:**
    - Cost 9 (approximately 5.3 kH/s on an RTX 3080 12GB)
  - **Argon2:**
    - RFC9106:
      - `m=2097152 (2 GiB), t=1, p=4`
      - `m=65536 (64 MiB), t=3, p=4`
  - **scrypt:**
    - `N=217 (128 MiB), r=8, p=1`
    - `N=216 (64 MiB), r=8, p=2`
    - `N=215 (32 MiB), r=8, p=3`
    - `N=214 (16 MiB), r=8, p=5`
    - `N=213 (8 MiB), r=8, p=9`
  - **PBKDF2:**
    - `PBKDF2-HMAC-BLAKE-512`: 170,000 iterations
    - `PBKDF2-HMAC-SHA-512`: 130,000 iterations
    - `PBKDF2-HMAC-SHA-256`: 350,000 iterations
    - `PBKDF2-HMAC-SHA-1`: 860,000 iterations

### Password Authenticated Key Exchange (PAKE)
#### Overview
- **Applications:**
  - Password authentication
  - Encrypted tunnels
  - Secure file transfer
  - Fighting phone spoofing

#### Why Not SCRAM?
- **SCRAM (Salted Challenge Response Authentication Mechanism):**
  - Untrusted channels
  - Messages are equivalent to a password hash

#### Types of PAKE
- **Balanced PAKE:**
  - Peer-to-Peer
- **Augmented PAKE (aPAKE):**
  - Client-Server
- **Doubly Augmented PAKE:**
  - Enhanced security features

#### How PAKE Works
- **Process:**
  - Detailed steps and protocols for each type of PAKE

#### Properties of PAKE
- **Security:**
  - Resistance to various attacks
- **Usability:**
  - Ease of implementation and use

This document provides a comprehensive overview of key stretching and PAKEs, including their importance, types, common issues, and recommended settings.