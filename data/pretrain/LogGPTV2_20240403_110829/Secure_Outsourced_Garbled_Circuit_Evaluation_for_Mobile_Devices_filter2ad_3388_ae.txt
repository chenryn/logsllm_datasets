USENIX Association
12
RSA128
Dijkstra20
Dijkstra50
Dijkstra100
64 Circuits (ms)
128 Circuits (ms)
32 Circuits Time (ms)
734000.0 ± 4% 1420000.0 ± 1%
505000.0 ± 2%
25800.0 ± 2%
49400.0 ± 1%
106000.0 ± 1%
197000.0 ± 3%
389000.0 ± 2%
135000.0 ± 1%
892000.0 ± 2% 1300000.0 ± 2% 2560000.0 ± 1%
Optimized Gates
Unoptimized Gates
Size (MB)
116,083,727
1,653,542
22,109,732
168,422,382
192,537,834
20,288,444
301,846,263
2,376,377,302
774
11
147
1124
Table 3: Execution time for evaluating a 128-bit blinded RSA circuit and Dijkstra shortest path solvers over graphs
with 20, 50, and 100 vertices. All numbers are for outsourced evaluation, as the circuits are too large to be computed
without outsourcing to a proxy.
(a) 20 identiﬁed intersections.
(b) 50 identiﬁed intersections.
(c) 100 identiﬁed intersections.
Figure 8: Map of potential presidential motorcade routes through Washington, DC. As the circuit size increases, a
larger area can be represented at a ﬁner granularity.
garbled circuits to date. While it may be possible for
existing protocols to evaluate circuits of similar size, it
is signiﬁcant that we are evaluating comparably massive
circuits from a resource-constrained mobile device.
7.2 Privacy-Preserving Navigation
Mapping and navigation are some of the most popular
uses of a smartphone. Consider how directions may be
given using a mobile device and an application such as
Google Maps, without revealing the user’s current loca-
tion, their ultimate destination, or the route that they are
following. That is, the navigation server should remain
oblivious of these details to ensure their mutual privacy
and to prevent giving away potentially sensitive details if
the phone is compromised. Speciﬁcally, consider plan-
ning of the motorcade route for the recent Presidential
inauguration. In this case, the route is generally known
in advance but is potentially subject to change if sudden
threats emerge. A ﬁeld agent along the route wants to re-
ceive directions without providing the navigation service
any additional details, and without sensitive information
about the route loaded to the phone. Moreover, because
the threats may be classiﬁed, the navigation service does
not want the holder of the phone to be given this infor-
mation directly. In our example, the user of the phone is
trying to determine the shortest path.
To model this scenario, we overlay a graph topology
on a map of downtown Washington D.C., encoding in-
tersections as vertices. Edge weights are a function of
their distance and heuristics such as potential risks along
a graph edge. Figure 8 shows graphs generated based
on vertices of 20, 50, and 100 nodes, respectively. Note
that the 100-node graph (Figure 8c) encompasses a larger
area and provides ﬁner-grained resolution of individual
intersections than the 20-node graph (Figure 8a).
There is a trade-off between detail and execution time,
however; as shown in Table 3, a 20-vertex graph can be
evaluated in under 26 seconds, while a 100-vertex graph
requires almost 15 minutes with 32 circuits in our 64-
core server testbed. The 64 circuit evaluation requires
more time: almost 50 seconds for the 20-vertex graph,
and almost 22 minutes for a 100-vertex graph. We an-
ticipate that based on the role a particular agent might
have on a route, they will be able to generate a route that
covers their particular geographical jurisdiction and thus
have an appropriately sized route, with only certain users
requiring the highest-resolution output. Additionally, as
described in Section 6.3, servers with more parallel cores
can simultaneously evaluate more circuits, giving faster
results for the 64 circuit evaluation.
Figure 9 reﬂects two routes. The ﬁrst, overlaid with a
dashed blue line, is the shortest path under optimal con-
ditions that is output by our directions service, based on
origin and destination points close to the historical start
and end points of the past six presidential inaugural mo-
torcades. Now consider that incidents have happened
along the route, shown in the ﬁgure as a car icon in a
hazard zone inside a red circle. The agent recalculates
the optimal route, which has been updated by the navi-
gation service to assign severe penalties to those corre-
sponding graph edges. The updated route returned by
the navigation service is shown in the ﬁgure as a path
with a dotted purple line. In the 50-vertex graph in Fig-
ure 8, the updated directions would be available in just
over 135 seconds for 32-circuit evaluation, and 196 and
a half seconds for 64-circuit evaluation.
USENIX Association  
22nd USENIX Security Symposium  301
13
START 
POINT
Modiﬁed Route
Optimal Route
END 
POINT
Figure 9: Motorcade route with hazards along the route. The dashed blue line represents the optimal route, while the
dotted violet line represents the modiﬁed route that takes hazards into account.
8 Conclusion
While garbled circuits offer a powerful tool for secure
function evaluation, they typically assume participants
with massive computing resources. Our work solves
this problem by presenting a protocol for outsourcing
garbled circuit evaluation from a resource-constrained
mobile device to a cloud provider in the malicious
setting. By extending existing garbled circuit evaluation
techniques, our protocol signiﬁcantly reduces both com-
putational and network overhead on the mobile device
while still maintaining the necessary checks for mali-
cious or lazy behavior from all parties. Our outsourced
oblivious transfer construction signiﬁcantly reduces the
communication load on the mobile device and can easily
accommodate more efﬁcient OT primitives as they are
developed. The performance evaluation of our protocol
shows dramatic decreases in required computation and
bandwidth. For the edit distance problem of size 128
with 32 circuits, computation is reduced by 98.92% and
bandwidth overhead reduced by 99.95% compared to
non-outsourced execution. These savings are illustrated
in our privacy-preserving navigation application, which
allows a mobile device to efﬁciently evaluate a massive
garbled circuit securely through outsourcing. These
results demonstrate that
improvements in
garbled circuit efﬁciency can be applied in practical
privacy-preserving mobile applications on even the most
resource-constrained devices.
the recent
Acknowledgments This material is based on research
sponsored by DARPA under agreement number FA8750-
11-2-0211. The U.S. Government is authorized to repro-
duce and distribute reprints for Governmental purposes
notwithstanding any copyright notation thereon. The
views and conclusions contained herein are those of the
authors and should not be interpreted as necessarily rep-
resenting the ofﬁcial policies or endorsements, either ex-
pressed or implied, of DARPA or the U.S. Government.
We would like to thank Benjamin Kreuter, abhi shelat,
and Chih-hao Shen for working with us on their garbled
circuit compiler and evaluation framework; Chris Peikert
for providing helpful feedback on our proofs of security;
Thomas DuBuisson and Galois for their assistance in the
performance evaluation; and Ian Goldberg for his guid-
ance during the shepherding process.
References
[1] M. Bellare and S. Micali. Non-interactive obliv-
In Advances in
ious transfer and applications.
Cryptology–CRYPTO, 1990.
[2] M. Ben-Or, S. Goldwasser, and A. Wigder-
son. Completeness theorems for non-cryptographic
fault-tolerant distributed computation. In Proceed-
ings of the annual ACM symposium on Theory of
computing, 1988.
302  22nd USENIX Security Symposium 
USENIX Association
14
[3] J. Brickell and V. Shmatikov. Privacy-preserving
graph algorithms in the semi-honest model. In Pro-
ceedings of the international conference on Theory
and Application of Cryptology and Information Se-
curity, 2005.
[14] Y. Huang, D. Evans, and J. Katz. Private set in-
tersection: Are garbled circuits better than custom
protocols? In NDSS ’12: Proceedings of the 19th
ISOC Symposium on Network and Distributed Sys-
tems Security, San Diego, CA, USA, Feb. 2012.
[4] R. Canetti, Y. Lindell, R. Ostrovsky, and A. Sahai.
Universally composable two-party and multi-party
secure computation. In Proceedings of the annual
ACM symposium on Theory of computing, 2002.
[5] H. Carter, C. Amrutkar, I. Dacosta, and P. Traynor.
Efﬁcient oblivious computation techniques for
privacy-preserving mobile applications. Journal of
Security and Communication Networks (SCN), To
appear 2013.
[6] H. Carter, B. Mood, P. Traynor, and K. Butler. Se-
cure outsourced garbled circuit evaluation for mo-
bile devices. Technical Report GT-CS-12-09, Col-
lege of Computing, Georgia Institute of Technol-
ogy, 2012.
[7] D. Chaum, C. Cr´epeau, and I. Damgard. Multiparty
unconditionally secure protocols. In Proceedings of
the annual ACM symposium on Theory of comput-
ing, 1988.
[8] S. G. Choi, J. Katz, R. Kumaresan, and H.-S. Zhou.
On the security of the ”free-xor” technique. In Pro-
ceedings of the international conference on Theory
of Cryptography, 2012.
[9] I. Damg˚ard and Y. Ishai. Scalable secure multi-
party computation.
In Proceedings of the annual
international conference on Advances in Cryptol-
ogy, 2006.
[10] I. Damg˚ard and J. B. Nielsen. Scalable and un-
conditionally secure multiparty computation.
In
Proceedings of the annual international cryptology
conference on Advances in cryptology, 2007.
[11] V. Goyal, P. Mohassel, and A. Smith. Efﬁcient two
party and multi party computation against covert
adversaries. In Proceedings of the theory and ap-
plications of cryptographic techniques annual in-
ternational conference on Advances in cryptology,
2008.
[12] M. Green, S. Hohenberger, and B. Waters. Out-
sourcing the decryption of abe ciphertexts.
In
Proceedings of the USENIX Security Symposium,
2011.
[13] Y. Huang, P. Chapman, and D. Evans. Privacy-
Preserving Applications on Smartphones. In Pro-
ceedings of the USENIX Workshop on Hot Topics
in Security, 2011.
[15] Y. Huang, D. Evans, J. Katz, and L. Malka. Faster
secure two-party computation using garbled cir-
cuits. In Proceedings of the USENIX Security Sym-
posium, 2011.
[16] Y. Huang, J. Katz, and D. Evans. Quid-pro-quo-
tocols: Strengthening semi-honest protocols with
dual execution. In Proceedings of the IEEE Sympo-
sium on Security and Privacy, 2012.
[17] A. Iliev and S. W. Smith. Small, stupid, and scal-
able: Secure computing with faerieplay.
In The
ACM Workshop on Scalable Trusted Computing,
2010.
[18] Y. Ishai, J. Kilian, K. Nissim, and E. Petrank. Ex-
tending oblivious transfers efﬁciently. In Proceed-
ings of the Annual International Cryptology Con-
ference, 2003.
[19] S. Jha, L. Kruger, and V. Shmatikov. Towards prac-
tical privacy for genomic computation. In Proceed-
ings of the IEEE Symposium on Security and Pri-
vacy, 2008.
[20] S. Kamara, P. Mohassel, and M. Raykova. Out-
sourcing multi-party computation.
Cryptology
ePrint Archive, Report 2011/272, 2011. http:
//eprint.iacr.org/.
[21] S. Kamara, P. Mohassel, and B. Riva. Salus: A sys-
tem for server-aided secure function evaluation. In
Proceedings of the ACM conference on Computer
and communications security (CCS), 2012.
[22] M. S. Kiraz. Secure and Fair Two-Party Compu-
tation. PhD thesis, Technische Universiteit Eind-
hoven, 2008.
[23] M. S. Kiraz and B. Schoenmakers. A protocol is-
sue for the malicious case of yaos garbled circuit
construction. In Proceedings of Symposium on In-
formation Theory in the Benelux, 2006.
[24] V. Kolesnikov and T. Schneider.
Improved gar-
bled circuit: Free xor gates and applications.
In
Proceedings of the international colloquium on
Automata, Languages and Programming, Part II,
2008.
[25] B. Kreuter, a. shelat, and C. Shen. Billion-gate se-
In
cure computation with malicious adversaries.
USENIX Association  
22nd USENIX Security Symposium  303
15
Proceedings of the USENIX Security Symposium,
2012.
[26] L. Kruger, S. Jha, E.-J. Goh, and D. Boneh. Se-
cure function evaluation with ordered binary deci-
sion diagrams.
In Proceedings of the ACM con-
ference on Computer and communications security
(CCS), 2006.
[27] Y. Lindell. Lower bounds and impossibility results
for concurrent self composition. Journal of Cryp-
tology, 21(2):200–249, 2008.
[28] Y. Lindell and B. Pinkas. Privacy preserving data
mining. In Proceedings of the Annual International
Cryptology Conference on Advances in Cryptology,
2000.
[29] Y. Lindell and B. Pinkas. An efﬁcient protocol
for secure two-party computation in the presence of
malicious adversaries. In Proceedings of the annual
international conference on Advances in Cryptol-
ogy, 2007.
[30] Y. Lindell and B. Pinkas. Secure two-party com-
putation via cut-and-choose oblivious transfer. In
Proceedings of the conference on Theory of cryp-
tography, 2011.
[31] L. Malka. Vmcrypt: modular software architecture
for scalable secure computation. In Proceedings of
the 18th ACM conference on Computer and com-
munications security, 2011.
[32] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella.
Fairplay–a secure two-party computation system.
In Proceedings of the USENIX Security Sympo-
sium, 2004.
[37] M. Naor, B. Pinkas, and R. Sumner. Privacy pre-
serving auctions and mechanism design.
In Pro-
ceedings of the ACM conference on Electronic com-
merce, 1999.
[38] N. Nipane, I. Dacosta, and P. Traynor. “Mix-In-
Place” anonymous networking using secure func-
tion evaluation. In Proceedings of the Annual Com-
puter Security Applications Conference (ACSAC),
2011.
[39] C. Peikert, V. Vaikuntanathan, and B. Waters. A
framework for efﬁcient and composable oblivious
transfer.
In Advances in Cryptology (CRYPTO),
2008.
[40] W. Rash.
Dropbox password breach high-
http:
lights cloud security weaknesses.
//www.eweek.com/c/a/Security/
Dropbox-Password-Breach-Highlights
-Cloud-Security-Weaknesses-266215/,
2012.
[41] a. shelat and C.-H. Shen. Two-output secure com-
putation with malicious adversaries.
In Proceed-
ings of the Annual international conference on The-
ory and applications of cryptographic techniques,
2011.
[42] K. Thomas. Microsoft cloud data breach heralds
things to come. http://www.pcworld.com/
article/214775/microsoft_cloud_
data_breach_sign_of_future.html,
2010.
[43] A. C. Yao. Protocols for secure computations. In
Proceedings of the Annual Symposium on Founda-
tions of Computer Science, 1982.
[33] Message Passing
passing
message
http://www.mcs.anl.gov/research/
projects/mpi/, 2009.
Interface Forum.
interface
(mpi)
The
standard.
[34] P. Mohassel and M. Franklin. Efﬁciency tradeoffs
for malicious two-party computation. In Proceed-
ings of the Public Key Cryptography conference,
2006.
[35] B. Mood, L. Letaw, and K. Butler. Memory-
efﬁcient garbled circuit generation for mobile de-
vices.
In Proceedings of the IFCA International
Conference on Financial Cryptography and Data
Security (FC), 2012.
[36] M. Naor and B. Pinkas. Efﬁcient oblivious transfer
protocols. In Proceedings of the annual ACM-SIAM
symposium on Discrete algorithms, 2001.
304  22nd USENIX Security Symposium 
USENIX Association
16