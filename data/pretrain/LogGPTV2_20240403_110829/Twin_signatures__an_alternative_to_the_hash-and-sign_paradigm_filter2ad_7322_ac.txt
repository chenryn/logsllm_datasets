n for random primes ei = H(mi, ri).
Using the chameleon property, for the i-th query m to
the signing oracle, the simulator who knows the trapdoor
can get an r such that H(mi, ri) = H(m, r) = ei. In the
random oracle model, one simply deﬁnes H(m, r) ← ei.
fore consists of the triple {m, r, s} satisfying
j(cid:1)=i ej = y1/ei mod n and the signature there-
(cid:1)
Then s = x
H(m,r)
s
= y mod n.
Cramer and Shoup [5] also proposed a scheme based on
the Strong RSA Assumption, the ﬁrst practical signature
scheme to be secure in the standard model, but with univer-
sal one-way hash functions; our twin scheme will be similar
but with a nice symmetry in the description (which helps
for the security analysis) and no hash-functions, unless one
wants to sign a long message.
5.2 Preliminaries
We build our scheme in two steps. The ﬁrst scheme resists
existential forgeries when subjected to no-message attacks.
Twinning will immune it against adaptively chosen-message
attacks.
5.2.1
Injective function into the prime integers.
Before any description, we will assume the existence of
a function p with the following properties: given a security
parameter k (which will be the size of the signed messages),
p maps any string from {0, 1}k into the set of the prime inte-
gers, p is also designed to be easy to compute and injective.
A candidate is proposed and analyzed in Appendix B.
5.2.2 The Flexible RSA Problem and the Strong RSA
Assumption.
Let us also recall the Flexible RSA Problem [5]. Given an
RSA modulus n and an element y ∈ Z
(cid:12)
n, ﬁnd any exponent
e > 1, together with an element x such that xe = y mod n.
The Strong RSA Assumption is the conjecture that this
problem is intractable for large moduli. This was indepen-
dently introduced by [2, 7], and then used in many further
security analyses (e.g. [5, 8]).
5.3 A First GHR Variant
The ﬁrst scheme is very similar to GHR without random
oracles but with function p instead:
• To sign m ∈ {0, 1}k, the signer computes e ← p(m)
and the e-th root of y modulo n using the factorization
of n
s ← y
1/e
mod n
• To verify a given {m, s}, the veriﬁer checks that
p(m)
s
mod n
?
= y.
Since p provides a new prime for each new message (in-
jectivity), existential forgery contradicts the Strong RSA
Assumption. However, how can we deal with adaptively
chosen-message attacks without any control over the output
of the function p, which is a publicly deﬁned non-random
oracle and not a trapdoor function either?
5.4 The Twin Version
The ﬁnal scheme is quite simple since it consists in du-
plicating the previous one: the signer uses two (cid:28)-bit RSA
(cid:12)
(cid:12)
moduli n1, n2 and two elements y1, y2 in Z
n2 re-
n1 and Z
spectively. Secret keys are the prime factors of the ni.
• To sign a message m, the signer probabilistically de-
rives two messages µ1, µ2 ∈ {0, 1}k, (from m and a
random tape ω), computes ei ← p(µi) and then the
ei-th root of yi modulo ni, for i = 1, 2, using the fac-
torization of the moduli:
{s1 ← y
1/e1
1 mod n1, s2 ← y
1/e2
2 mod n2}
• To verify a given {m, ω, s1, s2}, the veriﬁer computes
?
= yi, for
p(µi)
µ1 and µ2, then checks that s
i
i = 1, 2.
mod ni
To prevent forgeries, a new message must involve a new
exponent, either e1 or e2, which never occurred in the sig-
natures provided by the signing oracle. Therefore, a ﬁrst
requirement is that µ1 and µ2 deﬁne at most one message
m, but only if they have been correctly constructed. Thus,
some redundancy is furthermore required.
We thus suggest the following derivation, to get µ1 and
µ2 from m ∈ {0, 1}k/2 (we assume k to be even): one
chooses two random elements a, b ∈ {0, 1}k/2, then µ1 =
(m ⊕ a)||(m ⊕ b) and µ2 = a||b.
Clearly, given µ1 and µ2, one gets back M = µ1 ⊕ µ2,
which provides a valid message if and only if the redundancy
holds: M = M , where S and S denote the two k/2-bit
halves of a k-bit string S, the most signiﬁcant and the least
signiﬁcant parts respectively.
5.5 Existential Forgeries
Let us show that existential forgery of the twin scheme,
with above derivation process, leads to a new solution of the
Flexible RSA Problem:
Lemma 1. After q queries to the signing oracle, the prob-
ability that there exist a new message m and values a, b,
24which lead to µ1 = (m ⊕ a)||(m ⊕ b) and µ2 = a||b, such
that both e1 = p(µ1) and e2 = p(µ2) already occurred in the
signatures provided by the signing oracle is less than q2/2k/2.
Proof. Let {mi, ai, bi, s1,i, s2,i} denote the answers of
the signing oracle. Using the injectivity of p, the existence
of such m, a and b means that there exist indices i and j for
which
(m ⊕ a)||(m ⊕ b) = µ1 = µ1,i = (mi ⊕ ai)||(mi ⊕ bi)
a||b = µ2 = µ2,j = aj||bj.
Then
a ⊕ b = (m ⊕ a) ⊕ (m ⊕ b) = (mi ⊕ ai) ⊕ (mi ⊕ bi) = ai ⊕ bi,
and
a ⊕ b = aj ⊕ bj.
Therefore, for a j > i (the case i > j is similar), the new
random elements aj, bj must satisfy aj ⊕ bj = ai ⊕ bi. Since
it is randomly chosen by the signer, the probability that this
occurs for some i < j is less than (j − 1)/2k/2.
Altogether, the probability that for some j there exists
some i < j which satisﬁes the above equality is less that
q2/2× 2
−k/2. By symmetry, we obtain the same result if we
exchange i and j.
The probability that both exponents already appeared is
consequently smaller than q2/2k/2.
To prevent adaptively chosen-message attacks, we need
no trapdoor property for p, nor random oracle assumption
either. We simply give the factorization of one modulus to
the simulator, which can use any pre-computed exponenti-
ation with any new message, as when chameleon functions
are used [8].
5.6 Adaptively Chosen-Message Attacks
Indeed, to prevent adaptively chosen-message attacks, one
just needs to describe a simulator; our simulator works as
follows:
(cid:12)
n1 , y2 ∈ Z
• The simulator is ﬁrst given the moduli n1, n2 and the
elements y1 ∈ Z
(cid:12)
n2 , as well as the factor-
ization of nγ, where γ is randomly chosen in {1, 2}.
To simplify notations we assume that γ = 1. And
the following works without loss of generality since the
derivation of µ1 and µ2 is perfectly symmetric: they
are randomly distributed, but satisfy µ1 ⊕ µ2 = m||m
(it is a perfect secret sharing).
• The simulator randomly generates q values e2,j ←
p(µ2,j), with randomly chosen µ2,j ∈R {0, 1}k for j =
1, . . . , q and computes
(cid:1)
z ← y
2
j=1,...,q e2,j
mod n2.
The new public key for the signature scheme is the
following: the moduli n1, n2 with the elements y1, z in
Z
(cid:12)
(cid:12)
n1 and Z
n2 respectively.
• For the j-th signed message m, the simulator ﬁrst gets
(a||b) ← (m||m) ⊕ µ2,j. It therefore computes µ1 ←
a||b, and thus µ2 ← µ2,j = (m ⊕ a)||(m ⊕ b).
Then, it knows s2 = y
2
s1 using the factorization of n1.
mod n2, and computes
i(cid:1)=j e2,i
(cid:1)
Such a simulator can simulate up to q signatures, which
leads to the following theorem.
Theorem 3. Let us consider an adversary against the
twin-GHR scheme who succeeds in producing an existen-
tial forgery, with probability greater than ε, after q adaptive
queries to the signing oracle in time t, then the Flexible RSA
(cid:2)
within
Problem can be solved with probability greater than ε
a time bound t
(cid:2)
(cid:2)
t
= t + O(q × (cid:28)
2 × k).
and
(cid:2)
(cid:3)
, where
ε − q2
2k/2
(cid:2)
ε
=
1
2
(cid:2) ∼
= 2t.
(cid:2) ∼
= ε/2 and t
Proof. Note that the above bounds are almost optimal
since ε
Indeed, the time needed to
produce an existential forgery after q signature queries is
already in O(q × (|n1|2 + |n2|2)k). To evaluate the success
probability, q is less than say 240, but k may be taken greater
than 160 bits (and even much more).
To conclude the proof, one just needs to address the ran-
dom choice of γ. As we have seen in Lemma 1, with proba-
bility greater than ε − q2/2k/2, one of the exponents in the
forgery never appeared before. Since γ is randomly chosen
and the view of the simulation is perfectly independent of
this choice, with probability of one half, e = e¯γ is new. Let
us follow our assumption that γ = 1, then
(cid:1)
e
s
e
= s
2 = z = y
π
2 mod n2,
j=1,...,q e2,j. Since e is new, it is relatively
where π =
prime with π, and therefore, there exist u and v such that
ue + vπ = 1: let us deﬁne x = yu
2 sv mod n2,
v
)
e
(s
π
2 )
−v
= y2 mod n2.
e
x
= (y
v
u
2 s
e
)
1−vπ
= y
2
ev
s
= y2(y
We thus obtain an e-th root of the given y2 modulo n2, for
a new prime e.
5.7 More Signatures
One may remark that the length of the messages we can
sign with above construction is limited to k/2 bits, because
of the required redundancy. But one can increase the size, by
signing three derived messages: in order to sign m ∈ {0, 1}k,
one chooses two random elements a, b ∈ {0, 1}k/2 (we still
assume k to be even), and signs with diﬀerent moduli
µ1 = m ⊕ (a||b)
µ2 = a||b
µ3 = m ⊕ (b||a).
6. CONCLUSION
AND FURTHER RESEARCH
We proposed an alternative to the well-known hash-and-