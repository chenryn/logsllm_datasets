Proof. This result is a special case of Theorem 4.4.
. Then jd(σ0) = Θ (log (σ0.G.diam)).
(cid:2)
4.2. Joining Delay in the Presence of Failures
. Then jd(σ0) = O (log (|σ0.J|)).
In this section we consider executions with failures. We
ﬁrst evaluate the single-request case, then multi-request
case. Recall that we assume that the network does not parti-
tion and that the join-connectivity graphs are always con-
nected. For the single-request case we show that if two
nodes join the system by the time it becomes stable, then
they learn about each other in time proportional to the log-
arithm of the diameter of the join-connectivity graph in
which both nodes are originally represented. However for
the multi-request case, we show that it is possible to have
unbounded join-delay.
4.2.1. Single-requests in the presence of failures
Theorem 4.6 Let α be a α(cid:1)
-normal execution of JOIN-
SYSTEM, where after α(cid:1)
nodes may fail and new nodes may
join at only one node. Let (cid:3)σj(cid:4)j≥0 be the milestone states in
α after α(cid:1)
Proof. Let us deﬁne for any state σi and vertex w ∈ σi.J,
σi.L(w) = max{k : σi.N(w; k) (cid:16)= ∅}. Now, consider
the join-connectivity graph(σi.J, σi.E) and any two ver-
tices u, v ∈ σi.J such that for some i(cid:1) ≥ i, (u, v) ∈ σi(cid:1) .E.
Then there is a path from v to u in (σi.J, σi.E). Also, we
know σi.L(v) ≤ |σi.J|.
Now, if no node fails between the states σi and σi+4, i.e.,
σi.J ⊆ σi+4.J, then we have σi+4.L(v) ≤
+ 1.
Next, we observe the above recurrence relation holds even
for the case where some noes my fail between states σi and
σi+4. This is true because nodes can join through one other
node hence no new node can be in any shortest path dur-
ing the execution untill the fourth milestone state after it re-
ceived the join-acknowledgment. To show this observe that
for any v(cid:1) ∈ σi+4.J(v) there is a shortest path between v
and v(cid:1)
in (σi+4.J, σi+4.E) that includes no node that joined
between states σi and σi+4. To see this suppose w ∈ σi+4.J
and w (cid:16)= v, v(cid:1)
be such a node that received the join-
acknowledgment between states σi and σi+4 from some
σi.L(v)
(cid:6)
(cid:7)
2
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:50:34 UTC from IEEE Xplore.  Restrictions apply. 
(cid:6)
(cid:7)
. But when v(cid:1)(cid:1)
vertex v(cid:1)(cid:1)
sent the join-acknowledgment to w
at that instant N(v; 1) contained at least two other vertices
that are in a shortest path from v to v(cid:1)
in (σi+4.J, σi+4.E).
Let these vertices be v1 and v2 then because the states σi
and σi+4 corresponds to time instants that differ by at least
2d time units we have (v1, v2) ∈ σi+4.E which obviates
the inclusion of w in the shortest path between v and v(cid:1)
.
This shows that σi.L(v) ≤
+ 1. So, for state
σi, such that, i = O(log |σi.J|) we have σi.L(v) ≤ 2.
Therefore, σi.J ⊆ (cid:12)2
k=1 σi.N(v; k). Hence after one more
step we have either v ∈ u.world or u ∈ v.world. So,
jd(σ0) = O(log (|σ0.J|)).
(cid:2)
Theorem 4.7 Let α be a α(cid:1)
-normal execution of JOIN-
SYSTEM, where after α(cid:1)
nodes may fail and new nodes may
join at only one node. Let (cid:3)σj(cid:4)j≥0 be the milestone states in
α after α(cid:1)
Proof. This follows directly from Lemma 4.3.
. Then jd(σ0) = Ω (log (σ0.G.diam)).
σi.L(v)
2
(cid:2)
4.2.2. Multi-requests in the presence of failures
Figure 2. Illustration for the proof of Theorem 4.8
. Then jd(σ0) is unbounded.
We now show that in the presence of failures, when new
nodes join the system at multiple nodes, then it is possible
to have unbounded join-delay (Theorem 4.8). We also show
that by constraining failures somewhat, we are able to get a
reasonable join-delay, e.g., logarithmic in the diameter of a
join-connectivity graph at some instant (Theorem 4.9).
Theorem 4.8 Let α be a α(cid:1)
-normal execution of JOIN-
SYSTEM, where after α(cid:1)
nodes may fail and new nodes may
join at one or more nodes. Let (cid:3)σj(cid:4)j≥0 be the milestone
states in α after α(cid:1)
Proof. Consider n ∈ N such that n > 2 and the
graph (σi.J, σi.E), where σi.J = {v0, v1,··· , vn−1}
and σi.E = {(v0, vi) : vi ∈ σi.J \ {v0}} as shown
the graph (σi.J , σi.E) is con-
in Figure 2. Clearly,
nected and |σi.J| = n. We call vertex v0 the center ver-
tex for the star graph (σi.J, σi.E). Also, we assume that
there is a vertex v(cid:1)
such that σi.v(cid:1).status = request and
send(join)v(cid:1),vj , vi ∈ σi.J \ {v0} and receive(m)v(cid:1),vi,
vi ∈ σi.J \ {v0} are executed before the system state was
σi.
pattern A:
1. At the end of every round of communication, i.e. at
σj, j ≥ i, the adversary A adds a node v(cid:1)
0 and so that
0 executes send(join)v(cid:1),vj , vi ∈ σi.J \ {v0} i.e. send
v(cid:1)
join-request to the nodes {v1, v2,··· vn−1} beginning
at σj.
Now, we consider the following adversary or join-failure
2. Just before the beginning of every round of communi-
cation, i.e. just before the global clock tick the adver-
sary A crashes the central vertex v0.
It is easy to observe that a graph isomorphic to the graph
(σi.J, σi.E) is preserved at every i(cid:1) > i with only the cen-
(cid:2)
tral vertex changing.
(cid:14)
(cid:13)
4(cid:19))
σ0.B(v; 2(cid:18) k
4(cid:19)) for every k > 1.
As we have seen in the previous theorem, join-delay is
unbounded in the case when with node failures and new
nodes may join through multiple nodes. In order to guar-
antee bounded join-delay we consider a weaker adversar-
ial behaviour. This adversary can fail almost an exponential
number of nodes, with respect to the number of rounds.
In more precise terms, consider the join-connectivity
graph (σ0.J, σ0.E) and let us denote by F0,k = σ0.J\σk.J.
So, F0,k denotes the set of nodes that were alive at mile-
stone state σ0 but failed before milestone state σk. We as-
sume an adversary such that there exists some set of mu-
v∈T such that
tually disjoint open balls
F0,k ⊆ (cid:12)
v∈T σ0.B(v; 2(cid:18) k
Theorem 4.9 Let α be a α(cid:1)
-normal execution of JOIN-
SYSTEM, where after α(cid:1)
nodes may fail and new nodes
may join at one or more nodes. Let (cid:3)σj(cid:4)j≥0 be the
milestone states in α after α(cid:1)
. Consider the adver-
(cid:14)
sarial behavior where there exists some set of mutu-
4(cid:19))
σ0.B(v; 2(cid:18) k
v∈T such that
ally disjoint open balls
F0,k ⊆ (cid:12)
4(cid:19)) for every k > 1. Then
jd(σ0) = O (log (σ0.G.diam)).
Proof. Consider any v, u ∈ σ0.J so that eventually the edge
(u, v) appears in some join-connectivity graph in a state oc-
curing after σ0. Since there is a path from v to u in
the undirected version of (σ0.J, σ0.E), hence there ex-
(cid:13)
v∈T σ0.B(v; 2(cid:18) k
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:50:34 UTC from IEEE Xplore.  Restrictions apply. 
ists a sequence of, say n + 1, balls σ0.B(u; 2) =
σ0.B(u0; 2), σ0.B(u1; 2), . . . , σ0.B(un; 2) = σ0.B(v; 2)
such that σ0.B(uk; 2) ∩ σ0.B(uk+1; 2)
(cid:16)= ∅ for
k = 0, 1, . . . , n − 1.
Observe
that
in state σ4
for
and σ0.B(uk+2; 2)
any three balls
σ0.B(uk; 2), σ0.B(uk+1; 2)
for
k = 0, 1, . . . , n − 2 we have for some w ∈ σ0.B(uk; 2)
and w(cid:1) ∈ σ0.B(uk+2; 2) that (w, w(cid:1)) ∈ σ4.E. This is be-
cause of the restriction on the possible failures caused by
the adversary.
(cid:5)
(cid:4)
say,
0; 2),
σ4.B(u(cid:1)
n; 2) = σ4.B(v; 2) such that
k+1; 2) (cid:16)= ∅ for k = 0, 1, . . . , n(cid:1) − 1.
σ4.B(u(cid:1)
So, ﬁnally in some state σi for i = O (log (σ0.G.diam))
we have (u, v) ∈ σi.E, and since n ≤ σ0.G.diam we have
(cid:2)
jd(σ0) = O (log (σ0.G.diam)).
Now in state σ4 we have a sequence of,
balls σ4.B(u; 2) = σ4.B(u(cid:1)
n+1
= n(cid:1)
1; 2), . . . , σ4.B(u(cid:1)
k; 2) ∩ σ4.B(u(cid:1)
2
5. Conclusion
In this paper we introduced and studied the Join Prob-
lem for dynamic network algorithms. We speciﬁed an asyn-
chronus protocol, called Join-Protocol, allowing nodes to
join the system and to learn about each other by means
of gossip. We studied join-delay, the time required for two
nodes to learn about each other once they joined the sys-
tem. We speciﬁed Join-Protocol using the Input/Output Au-
tomata notation and we analyzed the protocol by impos-
ing some constraints on the executions of Join-Protocol.
In order to examine execution states at speciﬁc time in-
stants we deﬁned the concept of milestone states in the time-
passage reﬁnement of arbitrary executions. We deﬁned the
performance measures for studying the problem in terms
of milestone states and join-connectivity graphs. We per-
formed the analysis of four distinct scenarios involving dif-
ferent assumptions about the failures and joining at single
or multple locations. We derived upper and lower bounds
for join-delay in each of these scenarios. For example, in
the case when new participants join at multiple participants
and participants may crash, the number of rounds cannot be
bounded. In the more benign cases when the failures can be
controlled or when new participants join at only one partic-
ipant, the bound on rounds is shown to be logarithmic in the
diameter of the initial conﬁguration. We made a surprising
observation that while joining at multiple nodes leads to im-
proved fault-tolerance, it also may lead to unbounded join-
delays. Thus we considered a weaker adversary for which a
logarithmic join-delay can still be obtained.
Future work includes assessing join-delay for protocols
that incorporate constrained gossip. In this work we deal
with the failures consisting of node crashes and message
loss and reordering. It is also interesting to consider other
types of failure models.
References
[1] F. Cuenca-Acuna, C. Peery, R. P. Martin and T. D. Nguyen,
“PlanetP: Using Gossiping to Build Content Address-
able Peer-to-Peer Information Sharing Communities”, 12th
IEEE International Symposium on High Performance Dis-
tributed Computing, pp. 236–249, 2003.
[2] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson,
S. Shenker, H. Sturgis, D. Swinehart and D. Terry, “Epi-
demic Algorithms for Replicated Database Maintenance”,
in Proc. of the Sixth Symposium on Principles of Dis-
tributed Computing (PODC’87), pp. 1–12, 1987.
[3] Ch Georgiou, D. Kowalski and A. Shvartsman, ”Robust
distributed cooperation using inexpensive gossip”, in Proc.
of 17th International Symposium on Distributed Comput-
ing, pp. 224–238, 2003.
[4] S. Gilbert, N. Lynch, and A. Shvartsman, “RAMBO II.
Rapidly Reconﬁgurable Atomic Memory for Dynamic Net-
works”, in Proc. of the International Conference on De-
pendable Systems and Networks (DSN), pp. 259–268, 2003.
[5] S. M. Hedetniemi, T. Hedetniemi and A. L. Liestman, “A
Survey of Gossiping and Broadcasting in Communication
Networks”, Networks, Vol 18, pp. 319–349, 1988.
[6] D. Kowalski and A. Pelc, “Deterministic broadcasting time
in radio networks of unknown topology”, in Proc. 43rd
Ann. IEEE Symp. on Foundations of Computer Science
(FOCS’2002), pp. 63–72, 2002.
[7] R. Kumar, P. Raghavan, S. Rajagopalan, D. Sivakumar, A.
Tomkins and Eli Upfal. “Stochastic models for the Web
graph”, in Proc. of the 41th IEEE Symp. on Foundations
of Computer Science, pp. 57–65, 2000.
[8] D. Liben-Nowell, H. Balakrishnan and David Karger,
“Analysis of the evolution of peer-to-peer systems”, in
Proc. of the Twenty First Symposium on Principles of Dis-
tributed Computing (PODC’02), pp. 233–242, 2002.
[9] A. L. Liestman and D. S. Richards, “Perpetual Gossiping”,
Parallel Processing Letters, Vol 3, pp. 347–355, 1993.
[10] N. A. Lynch, “Distributed Algorithm”, Morgan Kaufmann
Publishers Inc, San Francisco, CA, 1997.
[11] N. Lynch and A. Shvartsman, “RAMBO: A Reconﬁgurable
Atomic Memory Service for Dynamic Networks”, in Proc.
of the 16’th International Sysmposium on Distributed Com-
puting(DISC), pp. 173–190, 2002.
[12] N. A. Lynch and M. Tuttle. “Hierarchical correctness
proofs for distributed algorithms”, CWI Quaterly Vol 2, No.
3, pp. 219–246, 1989.
[13] G. Pandurangan, P. Raghavan and E. Upfal, “Building Low-
Diameter Peer-to-Peer Networks”, IEEE Journal on Se-
lected Areas in Communications (JSAC), Vol 21, No 6, pp.
995–1002, 2003.
[14] A. Pelc, “Fault-tolerant Broadcasting and Gossiping in
Communication Networks”, Networks, Vol. 28, pp. 143–
156, 1996.
[15] I. Stoica, R. Morris, D Liben-Nowell, D Karger, M. F.
Kaashoek, F. Dabek and H. Balakrishnan, “Chord: A scal-
able peer-to-peer lookup service for internet applications”,
SIGCOMM, pp. 149–160, 2001.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:50:34 UTC from IEEE Xplore.  Restrictions apply.