( PARTITION p1 VALUES LESS THAN ('2019-02-01 00:00:00'), PARTITION p2 VALUES LESS
THAN ('2019-02-02 00:00:00')
);
--创建List分区表
CREATE TABLE test_list (col1 int, col2 int) partition by list(col1)
(
partitionp1values(2000),partitionp2values(3000),partitionp3values(4000),
partition p4 values (5000)
);
--创建Hash分区表
CREATE TABLE test_hash (col1 int, col2 int) partition by hash(col1)
(
partition p1, partition p2
);
更多的表分区语法信息，参见《GBase 8s V8.8_SQL 手册》中 CREATE TABLE
PARTITION章节。
南大通用数据技术股份有限公司
49
GBase 8s V8.8开发者手册
4.3.3 字段设计
选择数据类型
在字段设计时，基于查询效率的考虑，一般遵循以下原则：
 【建议】尽量使用高效数据类型。
 选择数值类型时，在满足业务精度的情况下，选择数据类型的优先级从高到低依次为整
数、浮点数、NUMERIC。
 【建议】当多个表存在逻辑关系时，表示同一含义的字段应该使用相同的数据类型。
 【建议】对于字符串数据，建议使用变长字符串数据类型，并指定最大长度。请务必确
保指定的最大长度大于需要存储的最大字符数，避免超出最大长度时出现字符截断现象。
除非明确知道数据类型为固定长度字符串，否则，不建议使用CHAR(n)、BPCHAR(n)、
NCHAR(n)、CHARACTER(n)。
常用字符串类型介绍
在进行字段设计时，需要根据数据特征选择相应的数据类型。字符串类型在使用时比较
容易混淆，下表列出了支持的常见字符串类型：
表 4-3 常用字符串类型
名称 描述 最大存储空间
定长字符串，n描述了存储的字节长度，如果输入
CHAR(n) 的字符串字节格式小于n，那么后面会自动用空字 10MB
符补齐至n 个字节。
定长字符串，n描述了存储的字节长度，如果输入
CHARACTER(n) 的字符串字节格式小于n，那么后面会自动用空字 10MB
符补齐至n 个字节。
定长字符串，n描述了存储的字节长度，如果输入
NCHAR(n) 的字符串字节格式小于n，那么后面会自动用空字 10MB
符补齐至n 个字节。
BPCHAR(n) 定长字符串，n描述了存储的字节长度，如果输入 10MB
南大通用数据技术股份有限公司
50
GBase 8s V8.8开发者手册
的字符串字节格式小于n，那么后面会自动用空字
符补齐至n 个字节。
VARCHAR(n) 变长字符串，n描述了可以存储的最大字节长度。 10MB
变长字符串，n描述了可以存储的最大字节长度；
CHARACTER
此数据类型和 VARCHAR(n)是同一数据类型的不 10MB
VARYING(n)
同表达形式。
变长字符串，n描述了可以存储的最大字节长度，
VARCHAR2(n) 此数据类型是为兼容Oracle 类型新增的，行为和 10MB
VARCHAR(n)一致。
NVARCHAR2(n) 变长字符串，n描述了可以存储的最大字节长度。 10MB
TEXT 不限长度(不超过1GB-8203字节)变长字符串。 1GB-8203字节
4.3.4 约束设计
DEFAULT和NULL约束
 【建议】如果能够从业务层面补全字段值，那么，就不建议使用DEFAULT约束， 避
免数据加载时产生不符合预期的结果。
 【建议】给明确不存在NULL值的字段加上NOTNULL约束，优化器会在特定场景下
对其进行自动优化。
 【建议】给可以显式命名的约束显式命名。除了NOTNULL和DEFAULT约束外， 其
他约束都可以显式命名。
局部聚簇
PartialClusterKey（局部聚簇，简称PCK）是列存表的一种局部聚簇技术，在GBase8s
中，使用PCK可以通过min/max稀疏索引实现事实表快速过滤扫描。PCK的选取遵循以下
原则：
 【关注】一张表上只能建立一个PCK，一个PCK可以包含多列，但是一般不建议超过
2列。
 【建议】在查询中的简单表达式过滤条件上创建PCK。这种过滤条件一般形如colop
南大通用数据技术股份有限公司
51
GBase 8s V8.8开发者手册
const，其中col为列名，op为操作符=、>、>=、 同步系统时间”章节内容。
fetchsize
 【关注】在应用程序中，如果需要使用fetchsize，必须关闭autocommit。开启autocommit，
会令fetchsize配置失效。
autocommit
 【建议】在JDBC向GBase8s申请连接的代码中，建议显式打开autocommit开关。如
果基于性能或者其它方面考虑，需要关闭autocommit时，需要应用程序自己来保证事
务的提交。例如，在指定的业务SQL执行完之后做显式提交，特别是客户端退出之前 务
必保证所有的事务已经提交。
释放连接
 【建议】推荐使用连接池限制应用程序的连接数。每执行一条SQL就连接一次数据库，
是一种不好SQL的编写习惯。
南大通用数据技术股份有限公司
53
GBase 8s V8.8开发者手册
 【建议】在应用程序完成作业任务之后，应当及时断开和GBase8s的连接，释放资源。
建议在任务中设置session超时时间参数。
 【建议】使用JDBC连接池，在将连接释放给连接池前，需要执行以下操作，重置会话
环境。否则，可能会因为历史会话信息导致的对象冲突。
如果在连接中设置了 GUC 参数，那么在将连接归还连接池之前，必须使用“SET
SESSIONAUTHORIZATIONDEFAULT;RESETALL;”将连接的状态清空。
如果使用了临时表，那么在将连接归还连接池之前，必须将临时表删除。
CopyManager
 【建议】在不使用ETL工具，数据入库实时性要求又比较高的情况下，建议在开发应
用程序时，使用GBase8sJDBC驱动的copyManger接口进行微批导入。
4.5 SQL 编写
DDL
 【建议】在GBase8s中，建议DDL（建表、comments等）操作统一执行，在批处理作
业中尽量避免DDL操作。避免大量并发事务对性能的影响。
 【建议】在非日志表（unloggedtable）使用完后，立即执行数据清理（truncate）操作。
因为在异常场景下，GBase8s不保证非日志表(unloggedtable)数据的安全性。
 【建议】临时表和非日志表的存储方式建议和基表相同。当基表为行存（列存） 表时，
临时表和非日志表也推荐创建为行存（列存）表，可以避免行列混合关联带来的高计算
代价。
 【建议】索引字段的总长度不超过50字节。否则，索引大小会膨胀比较严重，带来较
大的存储开销，同时索引性能也会下降。
 【建议】不要使用DROP…CASCADE方式删除对象，除非已经明确对象间的依赖关系，
以免误删。
数据加载和卸载
 【建议】在insert语句中显式给出插入的字段列表。例如：
INSERT INTO task(name,id,comment) VALUES ('task1','100','第100个任务');
 【建议】在批量数据入库之后，或者数据增量达到一定阈值后，建议对表进行analyze
操作，防止统计信息不准确而导致的执行计划劣化。
南大通用数据技术股份有限公司
54
GBase 8s V8.8开发者手册
 【建议】如果要清理表中的所有数据，建议使用truncatetable方式，不要使用deletetable
方式。deletetable方式删除性能差，且不会释放那些已经删除了的数据占用的磁盘空间。
类型转换
 【建议】在需要数据类型转换（不同数据类型进行比较或转换）时，使用强制类型转换，
以防隐式类型转换结果与预期不符。
 【建议】在查询中，对常量要显式指定数据类型，不要试图依赖任何隐式的数据类型转
换。
 【关注】若sql_compatibility参数设置为A，在导入数据时，空字符串会自动转化为NULL。
如果需要保留空字符串需要sql_compatibility参数设置为C。
查询操作
 【建议】除ETL程序外，应该尽量避免向客户端返回大量结果集的操作。如果结果集
过大，应考虑业务设计是否合理。
 【建议】使用事务方式执行DDL和DML操作。例如，truncatetable、updatetable、delete
table、droptable等操作，一旦执行提交就无法恢复。对于这类操作，建议使用事务进
行封装，必要时可以进行回滚。
 【建议】在查询编写时，建议明确列出查询涉及的所有字段，不建议使用“SELECT*”
这种写法。一方面基于性能考虑，尽量减少查询输出列；另一方面避免增删字段对前端
业务兼容性的影响。
 【建议】在访问表对象时带上schema前缀，可以避免因schema切换导致访问到非预期
的表。
 【建议】超过3张表或视图进行关联（特别是fulljoin）时，执行代价难以估算。建议
使用WITHTABLEAS语句创建中间临时表的方式增加SQL语句的可读性。
 【建议】尽量避免使用笛卡尔积和Fulljoin。这些操作会造成结果集的急剧膨胀， 同
时其执行性能也很低。
 【关注】NULL值的比较只能使用ISNULL或者ISNOTNULL的方式判断，其他任何
形式的逻辑判断都返回NULL。例如：NULL<>NULL、NULL=NULL和NULL<>1 返
回结果都是NULL，而不是期望的布尔值。
 【关注】需要统计表中所有记录数时，不要使用count(col)来替代count(*)。count(*)会
统计NULL值（真实行数），而count(col)不会统计。
南大通用数据技术股份有限公司
55
GBase 8s V8.8开发者手册
 【关注】在执行count(col)时，将“值为NULL”的记录行计数为0。在执行sum(col)时，
当所有记录都为NULL时，最终将返回NULL；当不全为NULL时， “值为NULL”的
记录行将被计数为0。
 【关注】count(多个字段)时，多个字段名必须用圆括号括起来。例如，
count((col1,col2,col3))。注意：通过多字段统计行数时，即使所选字段都为NULL，该
行也被计数，效果与count(*)一致。
 【关注】count(distinctcol)用来计算该列不重复的非NULL的数量，NULL将不被计数。
 【关注】count(distinct (col1,col2,...))用来统计多列的唯一值数量，当所有统计字段都
为NULL时，也会被计数，同时这些记录被认为是相同的。
 【建议】使用连接操作符“||”替换concat函数进行字符串连接。因为concat函数生成的
执行计划不能下推，导致查询性能严重劣化。
 【建议】使用下面时间相关的宏替换now函数来获取当前时间。因为now函数生成的
执行计划无法下推，导致查询性能严重劣化。
表 4-4 时间相关的宏
宏名称 描述 示例
gbase=#selectCURRENT_DATE;
date
获取当前日期，不包
CURRENT_DATE ------------
含时分秒。
2018-02-02
(1row)
gbase=#selectCURRENT_TIME;
timetz
获取当前时间，不包
CURRENT_TIME --------------------
含年月日。
00:39:34.633938+08
(1row)
gbase=#selectCURRENT_TIMESTAMP(6);
获取当前日期和时 timestamptz
CURRENT_TIMES 间，包含年月日时分 -------------------------------
TAMP(n) 秒。说明n表示存储 2018-02-02
的毫秒位数。 00:39:55.231689+08
(1row)
 【建议】尽量避免标量子查询语句的出现。标量子查询是出现在select语句输出列 表
中的子查询，在下面例子中，下划线部分即为一个标量子查询语句：
南大通用数据技术股份有限公司
56
GBase 8s V8.8开发者手册
SELECT id, (SELECT COUNT(*) FROM films f WHERE f.did = s.id) FROM staffs_p1 s;
标量子查询往往会导致查询性能急剧劣化，在应用开发过程中，应当根据业务逻辑，对
标量子查询进行等价转换，将其写为表关联。
 【建议】在where子句中，应当对过滤条件进行排序，把选择度较大（筛选出的记录数
较少）的条件排在前面。
 【建议】where子句中的过滤条件，尽量符合单边规则。即把字段名放在比较条件的一
边，优化器在某些场景下会自动进行剪枝优化。形如colopexpression， 其中col为表
的一个列，op为‘=’、‘>’的等比较操作符，expression为不含列名的表达式。例如，
SELECT id, from_image_id, from_person_id, from_video_id FROM face_data WHERE
current_timestamp(6) - time  current_timestamp(6) - '1 days'::interval;
 【建议】尽量避免不必要的排序操作。排序需要耗费大量的内存及CPU，如果业务逻
辑许可，可以组合使用orderby和limit，减小资源开销。gbase默认按照ASC&NULL
LAST进行排序。
 【建议】使用ORDERBY子句进行排序时，显式指定排序方式（ASC/DESC）， NULL
的排序方式（NULLFIRST/NULLLAST）。
 【建议】不要单独依赖limit子句返回特定顺序的结果集。如果部分特定结果集， 可以
将ORDERBY子句与Limit子句组合使用，必要时也可以使用offset跳过特定结果。
 【建议】在保障业务逻辑准确的情况下，建议尽量使用UNIONALL来代替UNION。
 【建议】如果过滤条件只有OR表达式，可以将OR表达式转化为UNIONALL以提升
性能。使用OR的SQL语句经常无法优化，导致执行速度慢。例如，将下面语句
SELECT * FROM scdc.pub_menu
WHERE (cdp= 300 AND inline=301) OR (cdp= 301 AND inline=302) OR (cdp= 302
ANDinline=301);
转换为：
SELECT * FROM scdc.pub_menu WHERE (cdp= 300 AND inline=301) union all
SELECT * FROM scdc.pub_menu WHERE (cdp= 301 AND inline=302) union all