**译者：知道创宇404实验室翻译组  
原文链接：**
ESET公司研究发现了一个以前未记录的 UEFI bootkit，其根源可以追溯到至少2012年
## 前言
ESET 的研究人员发现了一个以前从未记录的真实存在的 UEFI bootkit，它现在仍然存在于 EFI系统分区上，我们称之为 ESPecter
。它可以绕过驱动程序强制签名限制来加载自己的未签名驱动程序，这为其间谍活动提供了便利。除了卡巴斯基最近发现的关联不大的 FinSpy
bootkit，现在可以肯定地说，现实世界中的 UEFI
威胁不再局限于[Lojax](http://https://hackernews.cc/archives/24185 "Lojax")使用的 SPI
闪存植入。 传统 BIOS 基础上的 UEFI
(可扩展固件接口)已经一去不复返了。作为嵌入到现代计算机和设备芯片中的一种先进技术，它在保证操作系统前期环境安全和加载操作系统方面起着至关重要的作用。如此广泛使用的技术成为威胁行为者寻求一劳永逸的诱人目标，这一点毫不奇怪。
## 概述
在过去几年中，我们已经看过 UEFI bootkits (DreamBoot、 EfiGuard)、泄露文档(DerStarke、
QuarkMatter)甚至泄露源代码(Hacking Team Vector EDK)的实例，这表明真正的 UEFI 恶意软件是存在的，不论是以SPI
闪存植入还是 ESP 植入的形式。尽管如此，到目前为止，只发现了三个 UEFI
恶意软件([LoJax](https://www.welivesecurity.com/wp-content/uploads/2018/09/ESET-LoJax.pdf)、[MosaicRegressor](https://securelist.com/mosaicregressor/98849/)、FinSpy）。虽然前两个属于
SPI 闪存植入类别，最后一个属于 ESP 植入类别，令人惊讶的是，它不是唯一的ESP 植入类别。 现在，我们描述的最近发现的
ESPecter，是第二个使用ESP形式的UEFI bootkit，它以修补的Windows引导管理器的形式存在，进行分析。ESPecter
是在一台遭到感染的机器上发现的，而且它配有一个具有键盘记录和文档窃取功能的用户模式客户端组件，因此我们认为 ESPecter
主要用于间谍活动。有趣的是，我们追溯这种威胁的根源至少可以追溯到2012年，之前它是作为一个引导工具包为传统BIOS系统提供服务的。尽管 ESPecter
存在了很长时间，但是它的操作和升级到 UEFI的行为却直到现在才被记录下来。请注意，ESPecter 和卡巴斯基 FinSpy
之间唯一的相似之处在于，它们共享 UEFI 启动管理器妥协方法。
图1. Windows系统上的传统引导流程(左)和 UEFI 引导流程(右)的比较 通过修补 Windows Boot
Manager，攻击者可以在操作系统完全加载之前执行系统引导过程的早期阶段(参见上图) 。因而ESPecter 可以绕过 Windows
驱动程序签名强制(DSE) ，以便在系统启动时执行自己的无签名驱动程序。然后，该驱动程序将其他用户模式组件注入到特定的系统进程中，以启动与 ESPecter
的 c & c 服务器的通信，并允许攻击者通过下载和运行其他恶意软件或执行 c & c 命令来控制受到攻击的机器。 尽管 Secure Boot
可以阻止执行ESP来源的不可信的 UEFI 二进制文件，但在过去几年中，我们已经见证了各种 UEFI 固件漏洞，成千上万个设备因为允许禁用或绕过
Secure Boot，而受到攻击(例如 VU # 758382，VU # 976132，VU # 631788，...)。这表明，确保 UEFI
固件安全这个工作颇具挑战性，而且各种供应商运用安全策略和使用 UEFI 服务的方式并不总是恰当的。 以前，我们报道过多个恶意 EFI
案例，它们是简单的、单用途的 UEFI 应用程序，没有广泛的功能。这些报道以及同时发现的 ESPecter 和 FinFisher bootkit
(两者都是全功能 UEFI bootkit)表明，威胁行为者在操作系统之前的持久性方面不仅仅依赖 UEFI 固件植入，而且还试图利用遭到禁用的 Secure
Boot 来执行他们自己的 ESP 植入。 我们尚未确定 ESPecter 背后的威胁行为者。
## ESPecter bootkit 的进化
当我们查看遥测数据时，我们可以将这个 bootkit 的起源追溯到至少2012年。一开始，它使用 MBR
(主引导记录)修改作为其长期使用方法，并且它的作者对新的 Windows OS
版本投入越来越多的关注。有趣的是，这些年来，这个恶意软件的组件几乎没有变化，2012年和2020年版本之间的差异并没那么明显。 多年之后，ESPecter
背后的人显然决定将他们的恶意软件从传统 BIOS 系统移植到现代的 UEFI 系统。为了实现这一点，他们修改了位于 ESP 上的合法的 Windows
Boot Manager 二进制文件(`bootmgfw.efi`)，同时覆盖从 Windows 7到 Windows 10的多个 Windows
版本。正如我们前面提到的，这个方法有一个缺点——它要求禁用Secure Boot，以便使用修改过的boot管理器。然而，值得一提的是，第一个支持安全启动的
Windows 版本是 Windows 8，这意味着所有以前的版本都容易受到这种方法的攻击。 对于支持安全启动的 Windows
操作系统版本，攻击者需要禁用它。现在，我们还不知道 ESPecter 运营者是如何做到这一点的，但有几种可能的情况: \-攻击者可以对设备进行物理访问(历史上称为“evil maid”攻击) ，并在 BIOS 设置菜单中手动禁用安全启动(固件配置菜单仍然被标记并称为“ BIOS
设置菜单”是很常见的，甚至在 UEFI 系统中也是如此) \-安全引导已经在被攻破的机器上禁用了(例如，用户可能会使用双引导窗口和其他不支持安全引导的操作系统) \- 利用允许禁用安全启动的未知 UEFI 固件漏洞
\- 在已过时的固件版本或不再支持的产品上利用已知的 UEFI 固件漏洞
## 技术分析
在我们的调查中，我们发现了一些与 ESPecter 相关的恶意组件: \- 安装程序，仅适用于bootkit的旧版 MBR 版本，其目的是通过重写引导设备的
MBR 在计算机上设置持久性 \-启动代码，以UEFI系统上修改的Windows引导管理器（`bootmgfw.efi`）形式，或以旧引导系统中恶意MBR形式 \-内核模式驱动程序，用于为用户模式有效负载准备环境，并在操作系统启动的早期阶段将它们注入特定的系统进程来加载 \- 用户模式有效负载，负责与 c & c
进行通信、更新 c & c 配置并执行 c & c 命令
有关 ESPecter bootkit 危害的完整方案，请参见下图。
## 实现持久性-UEFI 启动
在使用 UEFI 启动模式的系统上，ESPecter 持久性是通过修改 Windows启动管理器`bootmgfw.efi`和 回退引导装载程序二进制
`bootx64.efi` 建立的，这两个文件通常分别位于 ESP 目录 EFI\Microsoft\Boot\和 EFI\Boot\
中。引导加载程序的修改包括添加一个名为.efi 到 PE，并更改可执行文件的入口点地址，这样程序流就跳转到添加部分的开头，如下图所示。
原版(顶部)和修改版(底部) Windows 启动管理器(bootmgfw.efi)的比较
### 简化的启动链
如下图左侧的方案所示，UEFI 系统上的引导过程(忽略固件部分)是从执行位于 ESP 中的引导加载程序开始。对于 Windows 操作系统，这部分由
Windows Boot Manager 二进制文件(bootmgfw.efi) 完成，其用途是查找已安装的操作系统并将执行转移到其 OS 核心引导程序-winload.efi。与引导管理器类似，OS 内核加载程序负责加载和执行引导链中的下一个组件—— Windows 内核(ntoskrnl.exe)。
典型的 Windows UEFI 引导流程(左)与 ESPecter 修改的引导流程(右)相比较
### ESpecter 如何修改 UEFI 启动过程
为了成功地删除其恶意负载，ESPecter 需要在启动过程中绕过 Windows Boot Manager 和 Windows
内核执行的完整性检查。为了做到这一点，它寻找字节模式来识别内存中所需的函数，并相应地对它们进行补丁。 关于引导加载程序Windows Boot
Manager (bootmgfw.efi)，启动工具包从修补 BmFwVerifySelfIntegrity
函数开始。此函数负责验证引导管理器自己的数字签名，并用于防止执行修改后的引导管理器。在下图中，您可以看到 ESPecter
是如何使用各种字节模式搜索内存中的 BmFwVerifySelfIntegrity函数 (以支持众多 bootmgfw.efi 版本)
，并修改这个函数，使其始终返回零，暗示函数验证是成功的。
 hex-ray 反编译代码——搜索和修补 BmFwVerifySelfIntegrity 函数
如前所述，这个引导装载程序的主要目标是找到一个已安装的操作系统并将执行转移到其 OS 内核装载程序。对于 Windows Boot Manager，这发生在
Archpx64TransferTo64BitApplicationAsm 函数中; 因此，ESPecter
查找这个函数是为了捕捉操作系统加载程序已加载到内存中但尚未执行的时刻。如果捕捉到这个时刻，ESPecter
补丁此函数插入自己的迂回函数，由此可以方便地在恰当时间修改内存中加载的 OS 加载程序。
操作系统加载程序的修改不包括任何完整性检查或其他功能的补丁。在这个阶段，bootkit需要重新分配它的代码，因为作为一个 UEFI
应用程序，它在从其入口点函数返回后可能会被从内存中卸载。为此，它会使用 BlImgAllocateImageBuffer 或
BlMmAllocateVirtualPages
函数(取决于找到的模式)。在这次重新分配之后，bootkit将在负责传输执行到操作系统内核的函数——OslArchTransferToKernel
中插入一个迂回函数(位于先前分配的缓冲区)，这样它就可以在内存中修补 Windows 内核，时间只要在被加载后，但是被执行之前即可。Bootkit
的引导代码的最后一个阶段负责通过修补 SepInitializeCodeIntegrity 内核函数来禁用 DSE。
 hex 射线反编译 SepInitializeCodeIntegrity
函数在内存中修补前(左)和后(右)的比较
有趣的是，引导代码还对 MiComputeDriverProtection
内核函数进行了补丁。尽管这个功能不会直接影响恶意驱动程序的成功加载，但是如果没有在内核内存中找到并修补这个功能，bootkit
就不会继续放置驱动程序。我们无法确定第二个补丁的用途，但是我们假设这个修改后的函数可能被其他未知的ESPecter组件使用。 \-\SystemRoot\System32\null.sys(驱动器) \- \SystemRoot\Temp\syslog (加密配置)
该配置由内核驱动程序部署的 WinSys.dll 用户模式组件使用，由一个单字节的 XOR 密钥和加密的配置数据组成。为了解密配置，WinSys.dll:
\- Base64对配置数据进行解码 \- XORs 使用 XOR 键对数据进行处理 \- Base64对由“ |”分隔的每个值分别进行解码
下图展示了一个由于 EFI 版本的 ESPecter 放置的配置示例。IoCs 部分提供了一个完整的 IP 地址和域名列表，这些列表来自我们发现的
ESPecter bootkit 示例(包括 Legacy Boot 和 UEFI 版本)中嵌入的配置。
 ESPecter bootkit EFI 版本提供的配置的解密
## 实现持久性-Legacy Boot
如前所述，我们现在知道的有支持 UEFI 的 ESPecter 版本，以及支持传统启动模式的其他版本。对于
传统启动模式，持久性是通过修改位于磁盘驱动器的第一个物理扇区中的 MBR
代码这一技术实现的，这个技术较为常见，因此，我们在这里不详细解释它，只是对它进行总结。
### ESPecter 如何修改遗留引导过程？
恶意 MBR 首先通过安装程序解密先前复制到磁盘扇区2、3和4的代码，钩住实模式 INT13h (BIOS 扇区读写服务)
中断处理器，然后将执行程序传递给原始的 MBR 代码，并由安装程序备份到第二扇区(扇区1)。与其他已知的 MBR 引导工具包类似，当调用
**INT13h** 中断处理器 时，钩子代码(位于扇区0)检查服务0x02(从驱动器读取扇区)和0x42(从驱动器读取扩展扇区)
，以拦截`bootmgr`（Windows 启动管理器的传统版本）的加载。注意，ESPecter 的遗留版本不需要在 `bootmgr` 中为