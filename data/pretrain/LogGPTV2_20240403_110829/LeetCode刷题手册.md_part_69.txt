725. Split Linked List in Parts
● Each value of a node in the input will be an integer in the range [0, 999].
●The length of root will be in the range [0, 1000].
1, and earlier parts are a larger size than the later parts.
Explanation:
Output: [[1, 2,3,4],[5, 6, 7]，[8,9,10]]
root = [1, 2， 3，4,5，6,7,8,9， 10］,k = 3
Input:
ListNode is [].
The last element output[4] is null, but it's string representation as a
The first element output[O] has output[O].val = 1, output[O].next = null.
\root.next.next.val = 3, and root.next.next.next = null.
For example, the input root has root.val = l, root.next.val = 2,
The input and each element of the output are ListNodes, not arrays.
Explanation:
Output: [[1],[2],[3],[],[]]
root = [1, 2， 3],k = 5
Input:
---
## Page 708
代码
注意长度不足 K 的时候要用 nil 进行填充。
前m 组长度为 n+ 1，后 K-m 组链表长度是 n。
m，代表前 m 组链表长度为 n +1。相当于把多出来的部分都分摊到前面 m 组链表中了。最终链表是
把链表长度对K进行除法，结果就是最终每组的长度 n。把链表长度对K 进行取余操作，
解题思路
把链表分成K个部分，要求这K个部分尽量两两长度相差不超过1，并且长度尽量相同。
题目大意
●k will be an integer in the range [1, 50].
length, k, lengNum, SplitNum+l, k-lengNum, SplitNum)
func splitListToParts(root *ListNode, k int) []*ListNode {
import "fmt"
package leetcode
* Definition for singly-linked list.
fmt.Printf("总长度 %v，分%组，前面 % 组长度为 %V，剩余 %组，每组 %\n",
pre := root
splitNum := length / k 
res := make([]*ListNode, 0) 
head := root
cur := root
lengNum := length % k 
length := getLength(root)
 type ListNode struct {
return res 
for i := O; i 1{ 
S += a.name 
S += strconv.Itoa(a.cnt)
{ this[i]， this[j] = this[j], this[i]
{ return strings.Compare(this[i].name,
return
len(this)}
---
## Page 712
func countofAtoms(s string) string {
for i := O; i ='a' && v ='A' & curr.start && curr.end > e.start {
start, end int
left, right *Event
fasle。整个查找的时间复杂度是 O(log n)。
区间左值为依据，递归插入，每次插入依次会继续判断区间是否重合。直到不能插入，则返回
这一题有多种解法，第一种解法可以用类似第 34 题的解法。先排序每个区间，然后再这个集合中
要求实现一个日程安排的功能，如果有日程安排冲突了，就返回 false，
if curr.start = end {
// if pos != len(this.calendar)-1 && pos != -1 & this.calendar[pos].End = end { 
//如果元素比开头的元素还要小，要插入到开头
if intervals[mid].Start > 1)
return true
this.calendar = append(this.calendar, Interval{Start: start, End: end})