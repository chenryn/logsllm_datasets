2
BUG : k e r n e l NULL p o i n t e r d e r e f e r e n c e ,
RIP :
0 0 1 0 : _nv018026rm +0 x158 /0 x1520 [ n v i d i a ]
a d d r e s s : 0000000000000008
Listing 5: NULL pointer dereference
Excerpts of the kernel logs are shown in Listing 5 and Listing 6.
Syzkaller successfully reproduced the crashes and generated mini-
mized C programs that trigger the bugs. We tested the reproducers
on the host system with the physical hardware device present and
verified them. The NULL pointer dereference bug causes the oper-
ating system to crash and requires a reboot for recovery.
1
2
BUG : KASAN : use−a f t e r −f r e e
Read of
s i z e 8 a t addr
in nv_match_dev_state +0 x124 /0 x130 [ n v i d i a ]
f f f f 8 8 8 0 1 e 8 3 5 3 8 0 by t a s k crash /369
Listing 6: KASAN Use-After-Free
FreeBSD. We set up FreeBSD version 12.2-RELEASE and also
installed the most recent NVIDIA driver version 460.56. Since the
driver package for FreeBSD contains the same binary blobs as the
01000200030004000500060001001000100001000001x106coveragetime in s0501001502002503000103050709111315execs/mintime in days59BSOD: Binary-only Scalable fuzzing Of device Drivers
RAID ’21, October 6–8, 2021, San Sebastian, Spain
BSOD-AFL
BSOD-Syzkaller
Windows
Linux
FreeBSD
-
NULL pointer dereferences
General Protection Faults
-
Use-After-Free, NULL pointer dereferences NULL pointer dereferences
Table 5: Found bug classes per fuzzer and operating system.
Figure 16: BSOD-AFL paths for fuzzing nvlddmkm.sys on
Windows
Linux driver package, the preparation of the needed Syzkaller de-
scriptions was convenient because we could reuse the descriptions
we created for Linux. Syzkaller was able to trigger the identical
NULL pointer dereference bug that we already found in the Linux
kernel driver, as shown in Listing 5. We expected this case due to
the identical binary blobs.
Windows. We have also applied the BSOD-AFL approach for
fuzzing the most recent NVIDIA kernel driver version 461.72 for
the Windows operating system, namely nvlddmkm.sys. The prac-
ticability without any required adaptions of the setup shows the
independence of the target operating system. It does solely require
the creation of a target-specific harness for the Windows oper-
ating system. The created harness is kept very simple and only
targets the device node
that is accessed via
DeviceIoControl.
By using an exemplary application that accesses the device, we
captured some typical data inputs. These data revealed at which
memory offsets pointer values need to be replaced by the harness.
Furthermore, we used these data again as input seeds for AFL.
We performed the fuzzing with the physical hardware device
in one single guest with all four available cores so that AFL was
able to execute test cases with a mean execution speed of 10.7k
execs/s. BSOD-AFL uncovered a bug after about 45 minutes of
the experiment, which caused the system to crash by triggering
a Blue Screen of Death (BSoD). We investigated the input data
and classified the fault as a NULL pointer dereference bug that
a user-mode application can trigger via a single ioctl call. Then,
we manually reduced the input to the necessary bytes to create a
reproducer.
Interestingly, we triggered the bug initially in driver version
441.12 that was released over a year ago. After updating to version
456.71, the found input no longer triggered the crash. When we
started fuzzing again and added the crashing input to the initial
seeds, it took only seconds to trigger again. The new crashing input
only differs from the previous one by a single increased byte value
and is still present in the most recent driver version.
To avoid triggering the same bug multiple times during fuzzing
with the cost of rebooting the system each time, we blocklisted the
respective combination of bytes that we already identified for the
reproducer and continued fuzzing. Figure 16 shows the explored
paths over time of this experiment.
The NULL pointer deference bugs are not exploitable to gain
higher privileges but can be abused to cause a Denial of Service
(DoS). The presented findings proved that both approaches find
real existing bugs in closed-source kernel drivers to answer the
initial question.
6 CONCLUSION
BSODs instrumentation allows us to fuzz binary-only drivers with
real devices in virtual machines. We reach decent execution speed
and coverage without the need for certain hardware features, such
as Intel PT. Fuzzing the complex drivers of graphics cards yielded
a range of bugs on all tested operating systems. On top of fuzzing
with real attached devices, we were able to record and replay graph-
ics card traces using BSOD-fakedev. The virtual device emulates
parts of the device’s behavior by replaying traced MMIO interac-
tions. It enabled us to scale to additional fuzzing instances in the
cloud without the need for additional physical devices. The results
of our experiments are convincing, yielding good fuzzing speeds
and driver exploration with Syzkaller and AFL++ respectively. As
depicted in Table 5, we found multiple bugs in Windows, FreeBSD,
and Linux drivers.
AVAILABILITY
All relevant source code for BSOD is avaliable open-source at
https://github.com/0xf4b1/bsod-kernel-fuzzing.
DISCLOSURE PROCESS
We reported all found bugs to the NVIDIA Product Security Incident
Response Team. The coordinated disclosure process is ongoing.
ACKNOWLEDGMENTS
The authors would like to thank Jiska Classen for valuable feedback.
REFERENCES
[1] National Security Agency. 2019. GHIDRA. https://ghidra-sre.org
[2] Fabrice Bellard. 2005. QEMU, a Fast and Portable Dynamic Translator. In Proceed-
ings of the Annual Conference on USENIX Annual Technical Conference (Anaheim,
CA) (ATEC ’05). USENIX Association, USA, 41.
[3] Marcel Böhme, Van-Thuan Pham, and Abhik Roychoudhury. 2016. Coverage-
Based Greybox Fuzzing as Markov Chain. In Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security (Vienna, Austria) (CCS
’16). Association for Computing Machinery, New York, NY, USA, 1032–1043.
https://doi.org/10.1145/2976749.2978428
https:
Attacking the Windows NVIDIA Driver.
[4] Oliver Chang. 2017.
//googleprojectzero.blogspot.com/2017/02/attacking-windows-nvidia-
driver.html
[5] H.D. Chirammal, P. Mukhedkar, and A. Vettathu. 2016. Mastering KVM Virtual-
ization. Packt Publishing. https://books.google.de/books?id=fAjVDQAAQBAJ
[6] Abraham A Clements, Eric Gustafson, Tobias Scharnowski, Paul Grosen, David
Fritz, Christopher Kruegel, Giovanni Vigna, Saurabh Bagchi, and Mathias Payer.
020406080100120140160180200220110100100010000total pathstimein sBSOD:Binary-onlyScalablefuzzingOfdeviceDriversRAID’21,October6–8,2021,SanSebastian,SpainWindowsLinuxFreeBSDBSOD-AFLNULLpointerdereferencesGeneralProtectionFaults-BSOD-Syzkaller-Use-After-Free,NULLpointerdereferencesNULLpointerdereferencesTable5:Foundbugclassesperfuzzerandoperatingsystem.020406080100120140160180200220110100100010000total pathstimein sFigure16:BSOD-AFLpathsforfuzzingnvlddmkm.sysonWindowsLinuxdriverpackage,thepreparationoftheneededSyzkallerde-scriptionswasconvenientbecausewecouldreusethedescriptionswecreatedforLinux.SyzkallerwasabletotriggertheidenticalNULLpointerdereferencebugthatwealreadyfoundintheLinuxkerneldriver,asshowninListing5.Weexpectedthiscaseduetotheidenticalbinaryblobs.Windows.WehavealsoappliedtheBSOD-AFLapproachforfuzzingthemostrecentNVIDIAkerneldriverversion461.72fortheWindowsoperatingsystem,namelynvlddmkm.sys.Theprac-ticabilitywithoutanyrequiredadaptionsofthesetupshowstheindependenceofthetargetoperatingsystem.Itdoessolelyrequirethecreationofatarget-specificharnessfortheWindowsoper-atingsystem.Thecreatedharnessiskeptverysimpleandonlytargetsthedevicenode\\.\NvAdminDevicethatisaccessedviaDeviceIoControl.Byusinganexemplaryapplicationthataccessesthedevice,wecapturedsometypicaldatainputs.Thesedatarevealedatwhichmemoryoffsetspointervaluesneedtobereplacedbytheharness.Furthermore,weusedthesedataagainasinputseedsforAFL.WeperformedthefuzzingwiththephysicalhardwaredeviceinonesingleguestwithallfouravailablecoressothatAFLwasabletoexecutetestcaseswithameanexecutionspeedof10.7kexecs/s.BSOD-AFLuncoveredabugafterabout45minutesoftheexperiment,whichcausedthesystemtocrashbytriggeringaBlueScreenofDeath(BSoD).WeinvestigatedtheinputdataandclassifiedthefaultasaNULLpointerdereferencebugthatauser-modeapplicationcantriggerviaasingleioctlcall.Then,wemanuallyreducedtheinputtothenecessarybytestocreateareproducer.Interestingly,wetriggeredthebuginitiallyindriverversion441.12thatwasreleasedoverayearago.Afterupdatingtoversion456.71,thefoundinputnolongertriggeredthecrash.Whenwestartedfuzzingagainandaddedthecrashinginputtotheinitialseeds,ittookonlysecondstotriggeragain.Thenewcrashinginputonlydiffersfromthepreviousonebyasingleincreasedbytevalueandisstillpresentinthemostrecentdriverversion.Toavoidtriggeringthesamebugmultipletimesduringfuzzingwiththecostofrebootingthesystemeachtime,weblocklistedtherespectivecombinationofbytesthatwealreadyidentifiedforthereproducerandcontinuedfuzzing.Figure16showstheexploredpathsovertimeofthisexperiment.TheNULLpointerdeferencebugsarenotexploitabletogainhigherprivilegesbutcanbeabusedtocauseaDenialofService(DoS).Thepresentedfindingsprovedthatbothapproachesfindrealexistingbugsinclosed-sourcekerneldriverstoanswertheinitialquestion.6CONCLUSIONBSODsinstrumentationallowsustofuzzbinary-onlydriverswithrealdevicesinvirtualmachines.Wereachdecentexecutionspeedandcoveragewithouttheneedforcertainhardwarefeatures,suchasIntelPT.Fuzzingthecomplexdriversofgraphicscardsyieldedarangeofbugsonalltestedoperatingsystems.Ontopoffuzzingwithrealattacheddevices,wewereabletorecordandreplaygraph-icscardtracesusingBSOD-fakedev.Thevirtualdeviceemulatespartsofthedevice’sbehaviorbyreplayingtracedMMIOinterac-tions.Itenabledustoscaletoadditionalfuzzinginstancesinthecloudwithouttheneedforadditionalphysicaldevices.Theresultsofourexperimentsareconvincing,yieldinggoodfuzzingspeedsanddriverexplorationwithSyzkallerandAFL++respectively.AsdepictedinTable5,wefoundmultiplebugsinWindows,FreeBSD,andLinuxdrivers.AVAILABILITYAllrelevantsourcecodeforBSODisavaliableopen-sourceathttps://github.com/0xf4b1/bsod-kernel-fuzzing.DISCLOSUREPROCESSWereportedallfoundbugstotheNVIDIAProductSecurityIncidentResponseTeam.Thecoordinateddisclosureprocessisongoing.ACKNOWLEDGMENTSTheauthorswouldliketothankJiskaClassenforvaluablefeedback.REFERENCES[1]NationalSecurityAgency.2019.GHIDRA.https://ghidra-sre.org[2]FabriceBellard.2005.QEMU,aFastandPortableDynamicTranslator.InProceed-ingsoftheAnnualConferenceonUSENIXAnnualTechnicalConference(Anaheim,CA)(ATEC’05).USENIXAssociation,USA,41.[3]MarcelBöhme,Van-ThuanPham,andAbhikRoychoudhury.2016.Coverage-BasedGreyboxFuzzingasMarkovChain.InProceedingsofthe2016ACMSIGSACConferenceonComputerandCommunicationsSecurity(Vienna,Austria)(CCS’16).AssociationforComputingMachinery,NewYork,NY,USA,1032–1043.https://doi.org/10.1145/2976749.2978428[4]OliverChang.2017.AttackingtheWindowsNVIDIADriver.https://googleprojectzero.blogspot.com/2017/02/attacking-windows-nvidia-driver.html[5]H.D.Chirammal,P.Mukhedkar,andA.Vettathu.2016.MasteringKVMVirtual-ization.PacktPublishing.https://books.google.de/books?id=fAjVDQAAQBAJ[6]AbrahamAClements,EricGustafson,TobiasScharnowski,PaulGrosen,DavidFritz,ChristopherKruegel,GiovanniVigna,SaurabhBagchi,andMathiasPayer.60RAID ’21, October 6–8, 2021, San Sebastian, Spain
Toepfer and Maier
2020. HALucinator: Firmware Re-hosting Through Abstraction Layer Emulation.
In 29th USENIX Security Symposium (USENIX Security 20). USENIX Association,
1201–1218. https://www.usenix.org/conference/usenixsecurity20/presentation/
clements
[7] Jake Corina, Aravind Machiry, Christopher Salls, Yan Shoshitaishvili, Shuang
Hao, Christopher Kruegel, and Giovanni Vigna. 2017. DIFUZE: Interface Aware
Fuzzing for Kernel Drivers. In Proceedings of the 2017 ACM SIGSAC Confer-
ence on Computer and Communications Security (Dallas, Texas, USA) (CCS
’17). Association for Computing Machinery, New York, NY, USA, 2123–2138.
https://doi.org/10.1145/3133956.3134069
[8] Sushant Dinesh, Nathan Burow, Dongyan Xu, and Mathias Payer. 2020.
RetroWrite: Statically Instrumenting COTS Binaries for Fuzzing and Sanitization.
1497–1511. https://doi.org/10.1109/SP40000.2020.00009
[9] Brendan Dolan-Gavitt, Josh Hodosh, P. Hulin, T. Leek, and R. Whelan. 2014.
Repeatable Reverse Engineering for the Greater Good with PANDA.
[10] Brendan Dolan-Gavitt, Josh Hodosh, Patrick Hulin, Tim Leek, and Ryan Whelan.
2015. Repeatable Reverse Engineering with PANDA. In Proceedings of the 5th
Program Protection and Reverse Engineering Workshop (Los Angeles, CA, USA)
(PPREW-5). Association for Computing Machinery, New York, NY, USA, Article
4, 11 pages. https://doi.org/10.1145/2843859.2843867
[11] David Drysdale. 2016. Coverage-guided kernel fuzzing with syzkaller. https:
[12] Bo Feng, Alejandro Mera, and Long Lu. 2020. P2IM: Scalable and Hardware-
independent Firmware Testing via Automatic Peripheral Interface Modeling. In
29th USENIX Security Symposium (USENIX Security 20). USENIX Association,
1237–1254. https://www.usenix.org/conference/usenixsecurity20/presentation/
feng
//lwn.net/Articles/677764/
[13] Andrea Fioraldi, Dominik Maier, Heiko Eißfeldt, and Marc Heuse. 2020. AFL++:
Combining Incremental Steps of Fuzzing Research. In 14th USENIX Workshop on
Offensive Technologies (WOOT 20). USENIX Association.
[14] Google. [n.d.]. honggfuzz. https://honggfuzz.dev
[15] Eric Gustafson, Marius Muench, Chad Spensky, Nilo Redini, Aravind Machiry,
Yanick Fratantonio, Davide Balzarotti, Aurélien Francillon, Yung Ryn Choe,
Christophe Kruegel, and Giovanni Vigna. 2019. Toward the Analysis of Embed-
ded Firmware through Automated Re-hosting. In 22nd International Symposium
on Research in Attacks, Intrusions and Defenses (RAID 2019). USENIX Associa-
tion, Chaoyang District, Beijing, 135–150. https://www.usenix.org/conference/
raid2019/presentation/gustafson
linuxfoundation.org/wp-content/uploads/2017/11/LSS2018.pdf
[16] Sami Tolvanen Jeff Vander Stoep. 2018. Android Kernel Security. https://events19.
[17] Tim Newsham Jesse Hertz. 2016. Project Triforce. https://raw.githubusercontent.
[18] Richard Johnson. 2017. Evolutionary Kernel Fuzzing.
https://www.fuzzing.
com/nccgroup/TriforceAFL/master/slides/ToorCon16_TriforceAFL.pdf
io/Presentations/Evolutionary%20Kernel%20Fuzzing-BH2017-rjohnson-
FINAL.pdf
536173/
latest/index.html
[19] Michael Kerrisk. 2013. LCA: The Trinity fuzz tester. https://lwn.net/Articles/
[20] Marcelina Kościelnicka. 2013. envytools. https://envytools.readthedocs.io/en/
[21] Volodymyr Kuznetsov, Vitaly Chipounov, and George Candea. 2010. Testing
Closed-Source Binary Device Drivers with DDT. In Proceedings of the 2010 USENIX
Conference on USENIX Annual Technical Conference (Boston, MA) (USENIXATC’10).
USENIX Association, USA, 12.
[22] Tamas K Lengyel. 2015. LibVMI: Simplified Virtual Machine Introspection. https:
[23] Tamas K Lengyel. 2020.
VM Forking and Hypervisor-based Fuzzing.
//libvmi.com
https://static.sched.com/hosted_files/xen2020/bc/XPDS2020%20-%20VM%
20forking%20and%20Hypervisor%20Based%20Fuzzing.pptx
[24] Dominik Maier, Benedikt Radtke, and Bastian Harren. 2019. Unicorefuzz: On
the Viability of Emulation for Kernelspace Fuzzing. In 13th USENIX Workshop
on Offensive Technologies (WOOT 19). USENIX Association, Santa Clara, CA.
https://www.usenix.org/conference/woot19/presentation/maier
[25] MITRE. 2017. Common Vulnerabilities and Exposures. https://cve.mitre.org
[26] Marius Muench, Dario Nisi, Aurélien Francillon, and Davide Balzarotti. 2018.
Avatar 2 : A Multi-Target Orchestration Platform. https://doi.org/10.14722/bar.
2018.23017
[27] S. Nagy and M. Hicks. 2019. Full-Speed Fuzzing: Reducing Fuzzing Overhead
through Coverage-Guided Tracing. In 2019 IEEE Symposium on Security and
Privacy (SP). 787–802. https://doi.org/10.1109/SP.2019.00069
[28] NIST. 2017. NVD National Vulnerability Database. https://nvd.nist.gov
[29] Hui Peng and Mathias Payer. 2020. USBFuzz: A Framework for Fuzzing USB
Drivers by Device Emulation. In 29th USENIX Security Symposium (USENIX Secu-
rity 20). USENIX Association, 2559–2575. https://www.usenix.org/conference/
usenixsecurity20/presentation/peng
[30] I. Pustogarov, Q. Wu, and D. Lie. 2020. Ex-vivo dynamic analysis framework
for Android device drivers. In 2020 IEEE Symposium on Security and Privacy (SP).
1088–1105. https://doi.org/10.1109/SP40000.2020.00094
[31] Nguyen Anh Quynh. 2014. Capstone. http://www.capstone-engine.org
[32] Matthew J. Renzelmann, Asim Kadav, and Michael M. Swift. 2012. SymDrive:
Testing Drivers without Devices. In 10th USENIX Symposium on Operating Sys-
tems Design and Implementation (OSDI 12). USENIX Association, Hollywood,
CA, 279–292. https://www.usenix.org/conference/osdi12/technical-sessions/
presentation/renzelmann
[33] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian Schinzel, and
Thorsten Holz. 2017. KAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels.
In Proceedings of the 26th USENIX Conference on Security Symposium (Vancouver,
BC, Canada) (SEC’17). USENIX Association, USA, 167–182.
[34] Kostya Serebryany. [n.d.]. libFuzzer – a library for coverage-guided fuzz testing.
https://llvm.org/docs/LibFuzzer.html
[35] Dokyung Song, Felicitas Hetzelt, Dipanjan Das, Chad Spensky, Yeoul Na, Stijn
Volckaert, Giovanni Vigna, Christopher Kruegel, Jean-Pierre Seifert, and Michael
Franz. 2019. PeriScope: An Effective Probing and Fuzzing Framework for the
Hardware-OS Boundary. In 26th Annual Network and Distributed System Security
Symposium, NDSS 2019, San Diego, California, USA, February 24-27, 2019. The
Internet Society. https://www.ndss-symposium.org/ndss-paper/periscope-an-
effective-probing-and-fuzzing-framework-for-the-hardware-os-boundary/
[36] Dokyung Song, Felicitas Hetzelt, Jonghwan Kim, Brent ByungHoon Kang, Jean-
Pierre Seifert, and Michael Franz. 2020. Agamotto: Accelerating Kernel Driver
Fuzzing with Lightweight Virtual Machine Checkpoints. In 29th USENIX Security
Symposium (USENIX Security 20). USENIX Association, 2541–2557. https://www.
usenix.org/conference/usenixsecurity20/presentation/song
[37] Mathieu Tarral. 2019. KVM-based Virtual Machine Instrospection. https://github.
[38] Ryan Whelan, Tim Leek, and David Kaeli. 2013. Architecture-Independent
Dynamic Information Flow Tracking. In Compiler Construction, Ranjit Jhala and
Koen De Bosschere (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 144–
163.
com/KVM-VMI
With Processor Trace Feedback.
//doi.org/10.1109/ACCESS.2018.2851237
[39] Michał Zalewski. 2013. american fuzzy lop. https://lcamtuf.coredump.cx/afl/
[40] G. Zhang, X. Zhou, Y. Luo, X. Wu, and E. Min. 2018. PTfuzz: Guided Fuzzing
IEEE Access 6 (2018), 37302–37313. https:
[41] Yaowen Zheng, Ali Davanian, Heng Yin, Chengyu Song, Hongsong Zhu, and
Limin Sun. 2019. FIRM-AFL: High-Throughput Greybox Fuzzing of IoT Firmware
via Augmented Process Emulation. In 28th USENIX Security Symposium (USENIX
Security 19). USENIX Association, Santa Clara, CA, 1099–1114. https://www.
usenix.org/conference/usenixsecurity19/presentation/zheng
61