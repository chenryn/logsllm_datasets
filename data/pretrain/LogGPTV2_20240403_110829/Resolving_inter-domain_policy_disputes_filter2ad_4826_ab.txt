(D)
D
(i)
(ii)
(iv)
(iii)
(AD)
(BCD)
(CD)
A
A
(D)
D
(ABD)
(D)
(D)
(D)
(D)
B
C
B
C
(CD)
(CAD)
(a)
A
P1A, t = 1, j = 0
P2A, t = 1, j = 1
P3A, t = 0, j = 2
(b)
P1A, t = 0, j = 0
P2A, t = 1, j = 1
P3A, t = 0, j = 2
(P1A:1)
(P2A:1)
(P3A:0)
(BP3A:2)
B
C
A
(BP1A:0)
B
C
(P1A:0)
(P2A:1)
(P3A:0)
Figure 4:
(a) AS B’s local preference for route
(P3A:0) to destination AS A is ranked third. Ad-
vertisement of this route to AS C will result in the
increasing of its global precedence by 2. (b) AS B
now considers the route (P1A:0) to AS A to be the
most locally preferred. Advertisement of this route
to AS C will not alter its global precedence value.
Figure 3: Simple example of dispute wheel oscilla-
tion: The simple local policy enforced at each node
is the import ﬁltering of routes with more than 2
hops.
relationships a priori, the method we describe in the next
section triggers a mechanism to resolve the corresponding
dispute wheel whenever an oscillation is detected.
4. THE PRECEDENCE METRIC
We begin by augmenting BGP’s decision process, prepend-
ing it with an additional step that utilizes a new metric
which we call the precedence metric. We describe this met-
ric below, and show that it eliminates route oscillations due
to dispute wheels.
2
Each route advertisement is tagged with a global
prece-
dence value that is non-negative: a numerically greater value
translates to a lower precedence. We denote the precedence
value, say v, associated with path P by (P :v). Each AS
maintains a history of observed route advertisements from
its immediate neighbors. In this history, we associate every
route with a local precedence value starting from 0. This lo-
cal precedence value is obtained from the route’s rank, and
is determined via the usual BGP decision process. Thus
the route ranked ith has a local precedence of i-1 and is
preferred over all routes with local precedence greater than
that. Strict ranking is performed, such that no two routes of
equal local precedence exist. In short, the selected route is
ﬁrst determined using the incoming global precedence value
(since this step occurs before the current BGP decision pro-
cess), followed by its local precedence value.
Suppose the selected route has an incoming global prece-
dence of t, and a local precedence value of j. Then, the
outgoing route advertisement is tagged with a global value
of t+j. Thus, a route that is most preferred for all ASes
along its path is tagged with 0 at all hops. Figure 4 gives an
example of this update process. Without loss of generality,
we assume for the rest of this paper that the destination AS
advertises routes with global precedence value of 0.
The increased value advertised by the pivot nodes depends
on the number of paths advertised in parallel by immediate
neighboring pivot nodes. We use Figure 5 to explain this.
2
Again, the term global only means that this precedence
value has meaning across more than one AS, not that all
ASes share this precedence value.
(Rb0 :αb0 )
a
b
(Rbm :αbm )
(Qa:βa)
(Qb:βb)
d
Figure 5: Multiple paths advertised by neighboring
nodes can cause the global precedence value of a
route to increase by more than 1.
Here, node b has a spoke path Qb to destination d. Assuming
that b locally prefers routes advertised by neighboring pivot
node a along Rb0 , Rb1 , . . . , Rbm compared to Qb, we have
the history state shown in Table 1. Clearly, if the spoke
path is selected, it will be advertised as (bQbd:βb+m+1).
A non-uniform increase in global precedence values around
the dispute wheel causes the rest of the network, i.e. nodes
not in dispute and not along spoke paths, to lose autonomy.
To correct this, instead of increasing the selected route’s
value by its local precedence, we bound the increase by 1.
Precedence values can take on multiple non-negative val-
ues as opposed to just binary 0 or 1 values. The presence of a
dispute wheel causes routes beyond the nodes in and within
the wheel to be advertised with the same incremented value.
Nodes outside the wheel can still be in dispute, in which case
the global precedence will be incremented again. We next
show that this precedence metric prevents the formation of
dispute wheels.
4.1 Dispute Wheel Elimination
Proposition 4.1. If routes encountered during previous
policy-induced oscillations are stored and the precedence met-
ric is used, then no further policy-induced oscillations can
occur.
Proof. It is proven in [8] that the absence of dispute
wheels is suﬃcient for safety, and hence it suﬃces to show
that the precedence mechanism precludes dispute wheels.
Using proof by contradiction, we begin by assuming that a
dispute wheel exists.
Figure 6 is used to illustrate our proof, in which we con-
sider a single destination d. Nodes p0, p1, . . . , pk−1 are the
subset of nodes that are in the dispute wheel and have stable
paths to the destination, that is, these are the pivot nodes.
Table 1: History of Node b in Figure 5
Local Precedence
Route
Global Precedence
Rb0 aQad
Rb1 aQad
· · ·
αb0 + βa
αb1 + βa
· · ·
Rbm aQad
Qbd
αbm + βa
βb
(R0 : α0)
p0
0
1
· · ·
m
m + 1
p1
(R1 : α1)
(Rk−1 : αk−1)
pk−1
(Q0 : β0)
(Q1 : β1)
(Qk−1 : βk−1)
d
(Qi : βi)
(Ri : αi)
pi
Figure 6: Dispute wheel illustration and notation
used in our proof.
(Qi:βi) is the tuple consisting of Qi, the spoke path from
source pi to destination d, and βi, the precedence value as-
sociated with path Qi. The tuple (Ri:αi) on the other hand
consists of the rim path Ri, which leads from pi+1 to pi,
and αi, the change in precedence along Ri, including node
pi+1. In other words, if γ is the precedence value for path
Ripi+1Qi+1d, then γ=αi+βi+1. We also have ri be the total
number of nodes along Ri, including pi+1 and excluding pi.
This implies
αi ≤ ri
∀ i
Suppose p0, p1, . . . , pk−1 each receive route advertisements
from their immediate next hops along Q0, Q1, . . . , Qk−1 with
global precedence values β0, β1, . . . , βk−1, respectively. Node
pi then selects the route Qi, updates the value, and adver-
tises that.
We next assume that the dispute occurs: node pi prefers
path (Ripi+1Qi+1d:αi+βi+1), over route (Qid:βi). In Fig-
ure 6, this corresponds to each node picking its immediate
neighbor, in the clockwise direction, as the next hop.
In
this proof, we assume that the route advertisements received
and stored as part of the history include those encountered
during oscillations.
Note that we do not need all routes en-
countered during one oscillation period to be stored, merely
one that has higher local precedence than the stable spoke
route. Then, the dispute wheel implies
3
α0 + β1 ≤ β0
α1 + β2 ≤ β1
...
αk−1 + β0 ≤ βk−1
Summing, we obtain
3
Other routes will at most merely increase the precedence
value, and not aﬀect the correctness of the proof.
k−1X
i=0
k−1X
βi ≤ k−1X
βi
αi +
i=0
αi ≤ 0
i=0
k−1X
i=0
or
Since, by deﬁnition, α0, α1, . . . , αk−1 are non-negative, we
have
αi = 0
∀ i
which implies that all nodes p0, p1, . . . , pk−1 locally prefer
routes through Q0, Q1, . . . , Qk−1 respectively. This means
that if the dispute wheel exists and each Ripi+1Qi+1 is cho-
sen over Qi, it must be because of the global precedence
values.
Thus, for the dispute wheel to form, we will require
∀ i
βk−1  0, and an advertised
route vP , P∈S, with positive precedence value. If this hap-
pens, then P must not be the most locally preferred route;
suppose that route is Q. The precedence value of Q must be
positive, otherwise v would have chosen it. This means there
must be some node w along Q that increases its precedence
value; w is similar to v, in that it must have some other path
Q(cid:2)
with positive global precedence, causing it to choose Q.
Thus, we can repeat this process at w and subsequent sim-
ilar nodes. As the destination node is never encountered,
because it always advertises routes with precedence value
0, we must ultimately encounter a node already traversed.
The resulting cycle of nodes naturally form a dispute wheel
that has been resolved using the precedence mechanism.
Corollary 4.3. From Propositions 4.1 and 4.2, global
precedence values greater than that advertised by the desti-
nation exist when routing converges if and only if dispute
wheels causing oscillations exist.
Corollary 4.4. A route traversing resolved disputes can-
not advertise the same global precedence at all hops.
Proof. Assume that such a route exists. Since the prece-
dence value advertised by all hops are the same, this implies
that the route selected by each node is its most preferred.
This in turn implies that the destination node must be part
of the dispute wheel, which is a contradiction.
4.2 Accounting for Non-Strict Preferences
The precedence metric is proven to eliminate dispute-
based oscillations for strict preferences; that is, routes can
be ranked independent of others.
In general, preferences
are non-strict, and are encountered for instance in BGP’s
Multi-Exit Discriminators (MEDs) [6].
In this subsection
we propose a minor extension to account for this.
Non-strict preferences results in an incoming route Ri
causing route Rcs to be selected, where Ri(cid:5)=Rcs and Rcs
is not the previous route selected (Rps). This is an Indepen-
dent Route Ranking (IRR) violation [11]. In terms of strict
preferences, it appears as though the existence of Ri results
in the eviction of Rps from the most locally preferred rank.
Thus, to capture the fact that Rps used to be the most pre-
ferred before Ri arrived, we create and associate a logical
route R(cid:2)
ps = Rps except that compari-
son of R(cid:2)
should ignore the presence
of Ri. This slight tweak is used when computing the local
preference of Rcs. Since the goal is to determine if the global
precedence should be incremented, we will be comparing R(cid:2)
with Rcs, ignoring Ri. Furthermore, as Ri(cid:5)=Rcs, we will not
ps
encounter the scenario when Ri and R(cid:2)
ps are compared. In
the case where Rcs becomes unavailable in the future and is
replaced by Ri, we evict R(cid:2)
ps.
ps with Ri, where R(cid:2)
4
ps with any other route
5. FROM THEORY TO PRACTICE
In §4, we showed that usage of the precedence metric,
coupled with the knowledge of routes encountered during
oscillations, can cause the network to converge. The primary
diﬃculty in implementing the solution is knowing precisely
the relevant set of routes encountered during oscillations and
not others. In this section we describe how this is achieved
in practice. We begin by deﬁning our goals:
One: We distinguish between transient and permanent
oscillations, where the former disappear with the conver-
gence of the network. The association of routes with dis-
putes should be removed if the latter is found to be transient.
Further, changes in network topology aﬀecting resolved dis-
putes should cause the removal of stored state associated
with those disputes.
Two: The solution should not reveal any ISP policies.
Three: Only local information associated with incoming
advertised routes, and no global knowledge, is necessary.
Four: Knowledge of potential pivot nodes should be pro-
vided as feedback by the protocol. The presence of resolved
disputes causes precedence values to increase, thereby pos-
sibly restricting the choices of routes. In general we believe
it is preferable to react by altering the local preferences at a
subset of the pivot nodes so that disputes do not arise in the
ﬁrst place and route choices become unconstrained. Since
access to the global view is probably unattainable, we seek
an alternative means of identifying the potential pivots.
Our solution consists of a detection and a stable phase
(Figure 7). We give a brief description of the two phases
below, with elaborations in the subsequent subsections.
Detection Phase: Initially, a node locally determines
that it may be a pivot and be involved in a dispute when its
current selected and advertised route is less preferred than
its previous one. By keeping in memory such withdrawn
(also known as infeasible) routes, the precedence value of
the advertised route is incremented. The timeout period for
infeasible routes thus determines the duration of the detec-
tion phase, and is elaborated on in the following section.
Stable Phase: In this phase, incoming and more pre-
4
when determining the local precedence value using the cur-
rent BGP decision process
(i)
(BD:0)
A
A
(D:0)
D
(ii)
Detection
A
A
(AD:0)
(BCD:0)
(D:0)
(ABD:0)
History
CD:0
D:0
(D:0)
(D:0)
B
C
(CD:0)
History