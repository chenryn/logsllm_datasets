### Image Manipulation and Forgery Detection

#### Image Pixelation
- **Pixelation**: This process involves manipulating images by reducing their resolution, resulting in a blocky, low-detail appearance (Figure 15).
- **Forgery via Pixelation**: Such forgeries can be easily performed using modern video editing software [5]. We use these tools to test various types of forgery. Additionally, we developed a script using OpenCV to automate the forgery process.

**Note**: The sizes of the images have been slightly adjusted for better presentation in this paper.

#### Types of Forgery and Success Rates
- **Forgery Success Ratio (F-ratio)**: This metric measures the probability of successfully forging an image without detection.
- **Table 3**: Summary of forgery experiment results on 1280×720 HD frames. The table also includes results from using only pixelation or hashing to highlight the necessity of combining both techniques.

| Forgery Type | No Pixelation (Hash-only) | Pixelation H_Pixelation (P-scale: 12) |
|--------------|---------------------------|--------------------------------------|
| Copy-move    | 0%                        | 0%                                   |
| Retouching   | 0%                        | 0%                                   |
| Collision    | 0%                        | 0%                                   |
| Pixelation   | 0%                        | 0%                                   |
| Splicing     | 0%                        | 0%                                   |
| Erasing      | 0%                        | 0%                                   |
| Lighting     | 0%                        | 0%                                   |

#### Verification by Forgery Type
- **Forgery Success Ratio (F-ratio)**: Measures the probability of making a forgery undetected. A forgery is considered successful if the altered video still produces the same result as its real-time h_pixelated version, which can be authenticated by its certified p_digest along with the video's timestamp.
- **Table 3**: Shows the results of various forgery types on 1280×720 HD frames. It also demonstrates why combining pixelation with hash embedding is necessary. The h_pixelation method provides forgery-proofing in all cases, while using only pixelation or hashing leaves the video vulnerable to specific types of forgery.

#### Specific Types of Forgery
- **Collision Forgery**: Forgers can create visually meaningful images that produce the same pixelation result. By tweaking input pixels, they can generate fake images (Figure 15b and 15c) that, when pixelated, produce the same output (Figure 15d). However, h_pixelation is resistant to such attacks due to the embedded original hash.
- **Pixelation Forgery**: Real-time signatures generated solely from original images become invalid for post-pixelated videos. Even with block-level hashing, forgers can falsify parts of a frame via fake pixelation to convey disinformation (Figure 16b). Using only original hashes is susceptible to such forgery. In contrast, h_pixelation, which reflects both original and real-time pixelated versions, prevents such forgery.

### Video Quality on Real Applications

#### Determining Video Quality
- **In-Frame Block Count**: This parameter determines the video quality of Pinto. To evaluate real-world applications, we implemented Pinto on three different embedded platforms: a security cam, an in-car dashcam, and a drone cam. Table 4 provides details about the deployment.

| Platform           | IoT Interface | Application  | Object Size |
|--------------------|---------------|--------------|-------------|
| BeagleBone (720 MHz) | Wi-Fi        | Security cam | Large       |
| CubieBoard (1.0 GHz) | LTE          | Dashcam      | Medium      |
| Raspberry Pi (1.2 GHz) | LTE         | Drone cam    | Small       |

#### On-Site Security Cam with Pinto
- **Setup**: We used a BeagleBone with a 720 MHz CPU running Ångström Linux, connected to a $30 HD webcam via USB. The Video4Linux2 (v4l2) API was used to capture MJPEG frames, and a USB WiFi adapter was used to send p_digests to the timestamping server.
- **Video Quality Metrics**:
  - **Frame Rate (fps)**: Measured in frames per second, it is a crucial aspect of video quality. A frame rate of at least 12 fps is recommended for proper motion perception.
  - **Per-Frame Quality (SSIM)**: The Structural Similarity (SSIM) index, valued between -1 and 1, measures the human-perceived quality of digital videos. An SSIM close to 1 indicates high similarity.
- **Results**:
  - **Frame Rate**: Figure 17a shows the frame rate decreasing evenly with B-count, maintaining 18 fps even at B-count=400.
  - **SSIM**: Figure 17b shows the SSIM increasing with B-count, converging close to 1 when B-count ≥ 196, indicating satisfactory perceived quality.

#### In-Car Dashcam with Pinto
- **Setup**: We used a Cubieboard with a 1 GHz CPU running Cubian Linux, connected to a webcam and an Alcatel LTE USB stick.
- **Results**:
  - **Frame Rate**: Figure 19a shows a similar trend to the security cam, with 19 fps at B-count=400.
  - **SSIM**: Figure 19b shows the SSIM reaching close to 1 when B-count ≥ 225, suggesting satisfactory perceived quality.

#### Aerial Drone Cam with Pinto
- **Setup**: We built a mid-sized drone using a Raspberry Pi with a 1.2 GHz CPU running Raspbian Linux, powered by Navio2 and controlled via a 2.4 GHz Devo7 transmitter. The PiCamera add-on was used to capture JPEG frames.
- **Results**:
  - **Frame Rate**: Figure 21a shows a more declining trend over B-count, with 17 fps at B-count=256.
  - **SSIM**: Figure 21b shows the SSIM becoming close to 1 when B-count ≥ 256, indicating satisfactory perceived quality.

#### Choice of In-Frame Block Count
- **Trade-off**: Our evaluations show a trade-off between motion and per-frame quality based on the choice of B-count. B-count around 196, 225, and 256 provides satisfactory perceived video quality for on-site, vehicular, and aerial surveillance, respectively.

For more detailed results, please refer to the provided links for sample videos:
- **Security Cam**: https://github.com/inclincs/pinto-sec-cam-video-ex
- **Dashcam**: https://github.com/inclincs/pinto-dashcam-video-ex
- **Drone Cam**: https://github.com/inclincs/pinto-drone-cam-video-ex