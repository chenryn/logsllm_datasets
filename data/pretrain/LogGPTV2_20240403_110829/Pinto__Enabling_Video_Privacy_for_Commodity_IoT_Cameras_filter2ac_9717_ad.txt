images with the same pixelation results as the original ones; Fig.
15), and Pixelation (manipulating images via pixelation; Fig. 16).
Such forgery can be done easily with video editing software avail-
able today [5]. We partly use them to exercise the various types of
forgery listed above. We also develop our own script using OpenCV
that automates the forgery process.
2We here slightly adjust their sizes to fit for presentation in the paper.
Forgery type
Forgery success ratio (F-ratio)
No Pixelation
(Hash-only)
Pixelation H_Pixelation
(P-scale: 12)
(P-scale: 12)
Copy-move
Retouching
Collision
Pixelation
Splicing
Erasing
Lighting
Table 3: Summary of the forgery experiment results.
0%
0.3%
100%
0%
0%
0%
0%
0%
0%
0%
100%
0%
0%
0%
0%
0%
0%
0%
0%
0%
0%
6.2.2 Verification by Forgery-Type
We measure the forgery success ratio (F-ratio) as the probability of
making forgery without detection. We consider that a forgery is
successful if the alteration of a video still produces the same result
as its realtime h_pixelated version—hence authenticatable by its
certified p_digest along with the time of the video3. Table 3 shows
the measurement summary from the various type of forgery on
1280×720 HD frames. We also present the results of solely using
pixelation or hashing to demonstrate why pixelation with hash
embedding is necessary. As shown in the table, the h_pixelation
provides forgery-proofing in all cases. On the other hand, the solely
use of pixelation or hashing lays video evidence open to posterior
fabrication with the following two specific types of forgery.
Figure 15: Collision forgery example.
Collision forgery. Given an original image, it is possible for
forgers to create other images—even visually meaningful—that
produce the same pixelation. The forgers, aware of the pixelation
function (e.g., averaging pixel values), can come up with fake im-
ages (Fig. 15b and 15c) by tweaking the input pixels while their
pixelated outputs are the same (Fig. 15d). Pixelation at any P-scale
is vulnerable to such collision forgery. On the other hand, the
h_pixelation is collision resistant. Especially the original hash, that
is embedded into the pixelation, eliminates the possibility of such a
second-preimage attack.
3 Note, faking the time of a video is very difficult because: (i) it is certified by the
timestamping server who signs p_digest with the current time upon recording; and
(ii) one cannot predict the future, e.g., time of an incident, and the usefulness of a
recording is not known a priori.
(c) Collision 2 (b) Collision 1 (a) Original (d) Pixelation-only H_Pixelation … Same pixelation result Collision resistant via hash embedding Session 6A: IoTCCS’18, October 15-19, 2018, Toronto, ON, Canada1097(a) Original-frame image
(b) Forgery: Fake pixelation
Figure 16: Pixelation forgery example.
Realtime signatures, if solely generated
Pixelation forgery.
from original images, are no longer valid for post-pixelated videos.
Even if block-level hashing is applied, the forger still can poste-
riorly falsify a part of a frame via fake pixelation to convey dis-
information (Fig. 16b). The solely use of original hashes is prone
to such pixelation forgery. This can further admit of “unpixelated”
alterations with falsely marked as pixelation, if possible, to elude
authenticity verification. On the other hand, realtime signatures
of h_pixelation—which reflect not only original images but also
their realtime pixelated versions—preclude the possibility of such
pixelation forgery.
6.3 Video Quality on Real Applications
The in-frame block count determines video quality of Pinto. To eval-
uate the video quality on real-world applications, we implement
Pinto in three different embedded platforms, and apply them to spe-
cific application contexts: security cam, in-car dashcam, and drone
cam. Table 4 gives the information (platforms, network interfaces,
object sizes) about our real-world deployment.
(a) Frame rate
(b) SSIM
Figure 17: Video quality on BeagleBone (720 MHz CPU) as a Pinto-
enabled security cam for on-site surveillance
6.3.2 On-Site Security Cam with Pinto
We apply Pinto to a security cam for on-site surveillance. We use
the BeagleBone [2], a single-board computer with 720 MHz CPU
running Ångström Linux as a Pinto-enabled device. With no custom
add-on available, we use an off-the-shelf $30 HD webcam as camera
module connected (via USB port) to the BeagleBone. To capture
video stream from the webcam, we use the Video4Linux2 (v4l2)
API [21]. We specifically set the capture format as MJPEG via the
ioctl() function to get JPEG frames as input for Pinto. We use
a USB WiFi adapter to send p_digests upon their creation to our
timestamping server. Figure 18a shows the picture of our Pinto-
enabled security camera installed for on-site surveillance.
Platform
IoT
interface
Application
Security cam
Dashcam
Drone cam
Object
size
Large
Medium
Small
Table 4: Deployment on real-world applications.
BeagleBone (720 MHz)
CubieBoard (1.0 GHz)
Raspberry Pi (1.2 GHz)
Wi-Fi
LTE
LTE
6.3.1 Video Quality Metrics
Frame rate is measured in frames per second
Video frame rate.
(fps) and is the one of the most important aspects of video quality.
It describes the speed of recording hence the speed of playback,
representing the motion aspect of a video stream—the quality of
the video motion. A frame rate of at least 12 fps is recommended
for the human eye to comprehend the motion properly [7].
Per-frame quality. Due to the block-level pixelation, the sizes
of pixelated areas in p_videos are inevitably at least equal or larger
than the actual sizes of sensitive objects in their frames. We use the
structural similarity (SSIM) index [64], a method for measuring the
human-perceived quality of digital videos to compare p_videos with
the conventional, object-sized pixelated versions 4. The SSIM index
is valued between -1 and 1. When two sets of images are nearly
identical, the resultant SSIM index is close to 1. This represents the
perceived quality of each frame.
4We exclude unpixelated frames from the SSIM calculation for conservative results.
(a) Pinto-enabled security cam
(b) p_video (B-count=196)
Figure 18: On-site surveillance with Pinto.
We evaluate video quality of the Pinto-enabled security cam
using the predefined P-scale=12, while varying the in-frame block
count (or B-count). Figure 17a plots the resulting frame rate. Note,
the x-axis for B-count is a log scale that increases by factors of 2.
The frame rate evenly decreases with B-count, and our videos are
still at 18 fps even when B-count=400. We also run the conventional
realtime blurring on BeagleBone, which results in 0.4 fps. Our in-
tention here is not for direct comparison, but rather to give a sense
that the frame rate achieved by Pinto is previously unattainable for
privacy-protected, forgery-proof videos in these kinds of low-end
devices.
We next measure the SSIM of p_videos from our on-site video
surveillance. When calculating SSIM, we use the conventional
object-sized pixelation as reference. To obtain more meaningful
results, we only take into account the frames containing sensitive
objects, filtering out the cases where the reference and Pinto have
identical, unpixelated frames. Figure 17b shows the SSIM result
!"#"$!"$#"%!"%#"$"#"&"$’"$("%$"%#"%&")*+,-"*+.-"/0123"!"#$%/456789.3":;9.7",-"?=8*"!"!#$"!#%"!#&"!#’"!#("!#)"!#*"!#+"!#,"$"$"(","$&"$*"%$"%("%,"--./"!"#$%012345678%Camera  module WiFi module BeagleBone  for Security Cam  (Pinto-enabled) Session 6A: IoTCCS’18, October 15-19, 2018, Toronto, ON, Canada1098(a) Frame rate
(b) SSIM
(a) Frame rate
(b) SSIM
Figure 19: Video quality on Cubieboard (1 GHz CPU) as a Pinto-
enabled dashcam for vehicular surveillance
Figure 21: Video quality on Raspberry Pi (1.2 GHz CPU) as a Pinto-
enabled drone for aerial surveillance
over B-count. We see that, the SSIM increases with B-count, con-
verging close to 1 when B-count ≥ 196. Note, when two images are
nearly identical, their SSIM is close to 1. This implies that here the
B-count near at 196 is fine-gained enough for satisfactory perceived
quality. Figure 18b shows a sample frame of our p_video at 19 fps
with B-count=196. We refer the reader to our security-cam p_video
at https://github.com/inclincs/pinto-sec-cam-video-ex.
6.3.3 In-Car Dashcam with Pinto
We apply Pinto to a dashcam for vehicular surveillance. We here
use the Cubieboard [8] with 1 GHz CPU running Cubian Linux
as a Pinto-enabled device. As in the previous case, we use the
off-the-shelf webcam as camera module for Pinto running on the
Cubieboard. We have an Alcatel LTE USB stick plugged to the
Cubieboard for the connection with our timestamping server. Figure
20a shows the picture of our in-vehicle setup.
at 20 fps with B-count=225. We refer the reader to our dashcam
p_video at https://github.com/inclincs/pinto-dashcam-video-ex.
6.3.4 Aerial Drone Cam with Pinto
We apply Pinto to a drone camera for aerial surveillance. We build a
mid-sized drone (diagonal 360mm) using the Raspberry Pi with 1.2
GHz CPU running Raspbian Linux as a Pinto-enabled device. The
drone is powered by Navio2 [12], an autopilot kit for Raspberry
Pi, with a set of open-source drivers for all sensors and motors.
The Raspberry Pi controls (via GPIO pins) the drone with user
commands from our remote 2.4 GHz Devo7 transmitter. We use
PiCamera [15], a custom add-on for Raspberry Pi, that provides a
Python interface to capture JPEG frames as input for Pinto. Figure
22a shows the picture of our Pinto-enabled drone built for aerial
surveillance.
(a) Pinto-enabled dashcam
(b) p_video (B-count=225)
Figure 20: Vehicular surveillance with Pinto.
Figure 19a plots the frame rate of the Pinto-enabled dashcam.
The dashcam result shows a similar trend to the security-cam case
as both devices have video recording as their main functionality.
Here, the resulting videos are at 19 fps when B-count=400. We also
test with the realtime blurring on the Cubieboard. The frame rate
on Cubieboard, albeit somewhat better than the realtime blurring
on BeagleBone, is at only 1.1 fps.
Figure 19b shows the SSIM of p_videos from our vehicular surveil-
lance. In this environment where license plates are the majority of
sensitive objects for pixelation—mostly appearing as medium-sized
objects in frames, the SSIM reaches close to 1 when B-count ≥ 225.
This suggests that the B-count near at 225 provides satisfactory
perceived quality. Figure 20b shows a sample frame of our p_video
(a) Pinto-enabled drone
(b) p_video (B-count=256)
Figure 22: Aerial surveillance with Pinto.
Figure 21a plots the frame rate of the Pinto-enabled drone cam
while in flight. It exhibits a more declining trend over B-count. This
is because the Raspberry Pi not only runs Pinto but also controls
the drone in this case. Indeed, videos produced by a Pinto-enabled
Raspberry Pi, when used for security cam or dashcam, are at 24
fps with satisfactory perceived quality. Figure 21b shows the SSIM
of p_videos from our aerial surveillance. In this context, most of
sensitive objects appear as small-sized ones in frames, and their
SSIM becomes close to 1 when B-count ≥ 256. Our drone-cam videos
with B-count=256 are at 17 fps. Note, most of commercial drones
today have higher device capabilities than Raspberry Pi [3]. We
expect that Pinto performs better in reality, as our current prototype
leaves more room for improvement, such as image processing using
GPUs and multi-threading for concurrent block-wise pixelation and
I/O operations. Figure 22b shows a sample frame of our p_video
!"#"$!"$#"%!"%#"$"#"&"$’"$("%$"%#"%&")*+,-"*+.-"/0123"!"#$%/456789.3":;9.7",-"?=8*"!"!#$"!#%"!#&"!#’"!#("!#)"!#*"!#+"!#,"$"$"(","$&"$*"%$"%("%,"--./"!"#$%012345678%Camera  module LTE module Cubieboard  for Dashcam  (Pinto-enabled) !"#"$!"$#"%!"%#"$"#"&"$’"$("%$"%#"%&")*+,-"*+.-"/0123"!"#$%/456789.3":;9.7",-"?=8*"!"!#$"!#%"!#&"!#’"!#("!#)"!#*"!#+"!#,"$"$"(","$&"$*"%$"%("%,"--./"!"#$%012345678%Raspberry Pi  for Drone  (Pinto-enabled) Camera  module LTE module  Session 6A: IoTCCS’18, October 15-19, 2018, Toronto, ON, Canada1099at 17 fps with B-count=256. We refer the reader to our drone-cam
p_video at https://github.com/inclincs/pinto-drone-cam-video-ex.
6.3.5 Choice of In-Frame Block Count
Our evaluations demonstrate a trade-off between motion and per-
frame quality, induced by the choice of B-count. Our results report
that B-count around at 196, 225, and 256 provides satisfactory per-
ceived video quality (both frame rate and SSIM) for on-site, vehicu-