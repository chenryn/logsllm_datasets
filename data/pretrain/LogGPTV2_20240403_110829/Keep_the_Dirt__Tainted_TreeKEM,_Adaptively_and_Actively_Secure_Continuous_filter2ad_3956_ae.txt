): a user ID requests to add another
(cid:48)
1) add-user(ID, ID
user ID
(cid:48) to the group.
(cid:48)
2) remove-user(ID, ID
another user ID
(cid:48) from the group.
): a user ID requests to remove
3) update(ID): the user ID requests to refresh its current
local state γ.
4) conﬁrm(q, β): the q-th query in the game, which must
be an action a ∈ {add-user, remove-user, update} by
some user ID, is either conﬁrmed (if β = 1) or rejected
(if β = 0). In case the action is conﬁrmed, C updates
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:47 UTC from IEEE Xplore.  Restrictions apply. 
276
Fig. 3: Cost for non-administrators
Fig. 4: Cost for administrators
Fig. 5: Average cost per user
Fig. 6: Updaters follow uniform dist.
Fig. 7: Updaters follow Zipf dist.
ID’s state and deletes the previous state; otherwise ID
keeps its previous state).
5) process(q, ID
): if the q-th query is as above, this action
(cid:48) which
forwards the (W or T ) message to party ID
immediately processes it.
(cid:48)
6) start-corrupt(ID): from now on the entire internal state
and randomness of ID is leaked to the adversary.
7) end-corrupt(ID): ends the leakage of user ID’s internal
state and randomness to the adversary.
8) challenge(q∗): A picks a query q∗ corresponding to an
action a∗ ∈ {add-user, remove-user, update} or the
initialization (if q∗ = 0). Let k0 denote the group key
that is sampled during this operation and k1 be a fresh
random key. The challenger tosses a coin b and – if the
safe predicate below is satisﬁed – the key kb is given
to the adversary (if the predicate is not satisﬁed the
adversary gets nothing).
At the end of the game, the adversary outputs a bit b(cid:48) and wins
if b(cid:48) = b. We call a CGKA scheme (Q, , t)-CGKA-secure if
for any adversary A making at most Q queries of the form
add-user(·,·), remove-user(·,·), or update(·) and running in
time t it holds
AdvCGKA(A) := |Pr[1 ← A|b = 0] − Pr[1 ← A|b = 1]| < .
B. The Safe Predicate
We deﬁne the safe predicate to rule out trivial winning
strategies and at the same time restrict the adversary as little
as possible. For example, if the adversary challenges the ﬁrst
(create-group) query and then corrupts a user in the group, he
can trivially distinguish the real group key from random. Thus,
intuitively, we call a query q∗ safe if the group key generated in
response to query q∗ is not computable from any compromised
state. Since each group key is encrypted to at most one init
key for each party, this means that the users which are group
∗. Then, clearly, ID
members11 at time q∗ must not be compromised as long as
these init keys are part of their state. However, deﬁning a
reasonable safe predicate in terms of allowed sequences of
actions is very subtle.
To gain some intuition, consider the case where query q∗
∗ must not
is an update for a party ID
be compromised right after it generated the update. On the
other hand, since the update function was introduced to heal
∗ before
a user’s state and allow for PCS, any corruption of ID
∗
q∗ should not harm security. Similarly, any corruption of ID
∗ should not
after a further processed update operation for ID
help the adversary either (compare FS). Finally, also in the
∗
case where the update generated at time q∗ is rejected to ID
∗ processes this message of the form conﬁrm(q∗, 0)
and ID
∗ after
by returning to its previous state, any corruption of ID
processing the reject message should not affect security of the
challenge group key. All these cases should be considered safe.
Additionally, we have to take care of other users which
are part of the group when the challenge key is generated:
For a challenge to be safe, we must make sure that
the
challenge group key is not encrypted to any compromised key.
At the same time, one has to be aware of the fact that in the
asynchronous setting the view of different users might differ
substantially. As mentioned above, we consider inconsistency
of user’s states rather a matter of functionality than security,
and aim to deﬁne the safe predicate as unrestrictive as possible,
to also guarantee security for inconsistent group states. For
example, consider the following scenario: user ID generates an
update during an uncompromised time period and processes a
reject for this update still in the uncompromised time period,
∗
but this update is conﬁrmed to and processed by user ID
before he does his challenge update q∗; this results in a safe
11To be precise, since parties might be in inconsistent states, group
membership is not unique but rather depends on the users’ views on the group
state. We will discuss this below.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:47 UTC from IEEE Xplore.  Restrictions apply. 
277
challenge, since the challenge group key is only encrypted
to the new init key, which is not part of ID’s state at any
compromised time point. However, one has to be careful here,
since in a similar scenario where ID does not process the reject
for its own update, the challenge group key would clearly not
be safe anymore.
For the following deﬁnitions we consider discrete time steps
measured in terms of the number of queries that have been
issued by the adversary so far.
We ﬁrst identify for each user a critical window in the view
∗. The idea is to deﬁne exactly the time
of a speciﬁc user ID
∗ generates
frame in which a user may leak a group key if ID
it at a speciﬁc point in time and distributes it to the group.
Clearly, the users may not be corrupted in this time frame if
this happens to be the challenge group key.
∗
Deﬁnition 3 (Critical window, safe user). Let ID and ID
be two (not necessarily different) users and q∗ ∈ [Q] be some
query. Let q− ≤ q∗ be the query that set ID’s current key in the
∗ at time q∗, i.e. the query q− ≤ q∗ that corresponds
view of ID
to the last update message a−
ID := update(ID) processed by
∗ does not
ID
process such a query then we set q− = 1, the ﬁrst query.
Analogously, let q+ ≥ q− be the ﬁrst query that invalidates
ID’s current key, i.e. ID processes one of the following two
conﬁrmations:
∗ at some point [q−, q∗] (see Figure 8). If ID
1) conﬁrm(a−
2) conﬁrm(a+
ID, 0), the rejection of action a−
ID, 1),
the conﬁrmation an update a+
update(ID) (cid:54)= a−
ID.
ID; or
ID :=
If ID does not process any such query then we set q+ = Q,
the last query. We say that the window [q−, q+] is critical for
∗. Moreover, if the user ID is
ID at time q∗ in the view of ID
not corrupted at any time point in the critical window, we say
∗.
that ID is safe at time q∗ in the view of ID
1
ID
a−
ID
q−
ID
a−
ID
ID
ID
∗
a−
ID
q∗
∗
ID
a−
ID conﬁrm(a−
ID, 1)
q∗
ID
conﬁrm(a−
ID, 0)
q+
ID
ID
Q
a+
ID
conﬁrm(a+
ID, 1)
q−
1
Fig. 8: A schematic diagram showing the critical window for a user ID in
the view of another user ID∗ with respect to query q∗. An arrow from a user
to the timeline is interpreted as a request by the user, whereas an arrow in
the opposite direction is interpreted as the user processing the message. The
ﬁgure at top (resp., bottom) corresponds to the ﬁrst (resp., second) case in
Deﬁnition 3.
q+
Q
We are now ready to deﬁne when a group key should be
considered safe. The group key is considered to be safe if all
∗ considers to be in the group are individually
the users that ID
safe, i.e., not corrupted in its critical window, in the view of
∗. We point out that there is a exception when the action that
ID
∗ where, to
generated the group key sk
allow healing, instead of the normal critical window we use
the window [q∗, q+] as critical.
Deﬁnition 4 (Safe predicate). Let sk
ated in an action
∗ be a group key gener-
∗ is a self-update by ID
a∗ ∈ {add-user(ID
∗
update(ID
,·), remove-user(ID
∗
,·)}
), create-group(ID
∗
∗
,·),
at time point q∗ ∈ [Q] and let G∗ be the set of users which
would end up in the group if query q∗ was processed, as viewed
∗ is considered safe
by the generating user ID
if for all users ID ∈ G∗ (including ID
∗) we have that ID is
∗ (as per Deﬁnition 3) with the
safe at time q∗ in the view of ID
∗ and a∗ = update(ID
∗
following exceptional case: if ID = ID
)
∗ to be safe w.r.t. the window [q∗, q+].
then we require ID
∗. Then the key sk
C. The Challenge Graph
In the last section, we deﬁned what it means for a group
key to be safe via a safe predicate. In this section, we try to
interpret the safe predicate for the TTKEM protocol. That is,
our goal is to show that if the safe predicate is satisﬁed for
a group key ∆∗ generated while playing the CGKA game on
TTKEM, then none of the seeds or secret keys used to derive
this group key are leaked to the adversary (Lemma 1) — this
fact will be crucial in the next section (§III-E) where we argue
the security of TTKEM using the framework of Jafargholi et
al. [12]. To this end, we view the CGKA game for TTKEM
as a game on a graph and then deﬁne the challenge graph for
challenge group key ∆∗ as a sub-graph of the whole CGKA
graph.
a) The CGKA graph.: A node i in the CGKA graph for
TTKEM is associated with seeds ∆i and si := H2(∆i) and a
key-pair (pki, ski) := Gen(si) (as deﬁned in §II). The edges
of the graph, on the other hand, are induced by dependencies
via the hash function H1 or (public-key) encryptions. To be
more precise, an edge (i, j) might correspond to either:
1) a ciphertext of the form Encpki(∆j); or
2) an application of H1 of the form ∆j = H1(∆i) used in
hierarchical derivation.
Naturally,
the structure of the CGKA graph depends on
the update, add-user or remove-user queries made by the
adversary, and is therefore generated adaptively.
b) The challenge graph.: The challenge graph for ∆∗,
intuitively, is the sub-graph of the CGKA graph induced on
the nodes from which ∆∗ is trivially derivable. Therefore,
according to the deﬁnition of the CGKA graph, this consists
of nodes from which ∆∗ is reachable and the corresponding
edges (used to reach ∆∗). For instance, in the case where the
adversary maintains all users in a consistent state and there
are no tainted nodes, the challenge graph would simply be the
binary tree rooted at ∆∗ with leaves corresponding to init keys
of users in the group at that point. When the group view is
inconsistent among the users these leaves would correspond
∗. Moreover, if
to the init keys of users in the view of ID
there are tainted nodes, the tree could also have (non-init key)
leaves corresponding to these tainted nodes. Below we state the
key lemma which connects the safe predicate to the challenge
graph of TTKEM; a proof can be found in the full version of
this paper.
Lemma 1. For any safe challenge group key in TTKEM it
holds that none of the seeds and secret keys in the challenge
graph is leaked to the adversary via corruption.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:47 UTC from IEEE Xplore.  Restrictions apply. 
278
D. Security Proof for TTKEM in the Standard Model
To prove security of TTKEM in the standard model, we will
use the framework of Jafargholi et al. [12], with which we will
assume familiarity throughout this section and, particularly,
in Theorem 4. Recall that in the CGKA security game, the
aim of the adversary is to distinguish a safe challenge group