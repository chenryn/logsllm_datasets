Teaching Old Shellcode 
New Tricks
DEF CON 25
@midnite_runr
Whoami
• US Marine (out in 2001) 
• Wrote BDF/BDFProxy 
• Found OnionDuke 
• Co-Authored Ebowla 
• Work @ Okta 
• Twitter: @midnite_runr 
• Github: github.com/
secretsquirrel
Why This Talk
•
It’s fun 
•
It’s time to update publicly available Windows 
shellcode
Outline
•
History 
•
Further Development 
•
Mitigations and Bypasses
Part I  
History
Stephen Fewer’s Hash 
API 
•
SFHA or Hash API or MetaSploit Payload Hash 
•
Introduced: 8/2009 
•
Uses a 4 byte hash to identify DLL!WinAPI in EAT 
•
JMPs to the WinAPI ; return to payload 
•
Some code borrowed from M.Miller’s 2003 
Understanding Windows Shellcode paper
http://blog.harmonysecurity.com/2009/08/calling-api-functions.html
Typical SHFA Based 
Payload
[—SHFA—][the actual payload logic]
Typical SHFA Based 
Payload
[—SHFA—][the actual payload logic]
1
Typical SHFA Based 
Payload
[—SHFA—][the actual payload logic]
1
2
Typical SHFA Based 
Payload
[—SHFA—][the actual payload logic]
1
2
3
Typical SHFA Based 
Payload
[—SHFA—][the actual payload logic]
[some winAPI]
1
2
3
Typical SHFA Based 
Payload
[—SHFA—][the actual payload logic]
[some winAPI]
1
2
3
4
Typical SHFA Based 
Payload
[—SHFA—][the actual payload logic]
[some winAPI]
1
2
3
4
5, Continue to 2 until done
Defeating SFHA
•
EMET 
•
Piotr Bania Phrack 63:15 // HAVOC - POC||GTFO 12:7 
EMET Caller/EAF(+)
•
EAF(+) 
•
Introduced: 2010/2014(+) 
•
Protect reading KERNEL32/NTDLL and KERNELBASE(+) 
•
Caller 
•
2013 
•
Block ret/jmp into a winAPI (Anti/rop) for 
critical functions
EMET is EOL
•
Supported through July 31, 2018 
•
Still works** 
•
Re-introduced in Windows 10 RS3
** Depends on threat model
Tor Browser Exploit 
vs EMET 
Bypassing EMET 
EAF(+)
•
2010: Berend-Jan Wever (Skypher Blog) - ret-to-libc 
via ntdll 
•
1/2012 Piotr Bania - Erase HW Breakpoints via 
NtContinue 
•
9/2014 - Offensive Security - EAF+ bypass via EMET 
function reuse calling ZwSetContextThread directly
http://web.archive.org/web/20101125174240/http://skypher.com/index.php/2010/11/17/bypassing-eaf/
http://piotrbania.com/all/articles/anti_emet_eaf.txt
https://www.offensive-security.com/vulndev/disarming-emet-v5-0/
Bypassing EMET 
Caller
2/2014 - Jared Demot - Demo’ed a payload that 
directly used LoadLibraryA (LLA) 
https://bromiumlabs.ﬁles.wordpress.com/2014/02/bypassing-emet-4-1.pdf
IAT Based Payloads 
in BDF
•
May 30, 2014 
•
Added IAT based payloads/shellcode to BDF 
•
Directly used IAT API thunks 
•
This bypassed EMET Caller/EAF(+) checks
Position Independent 
IAT Shellcode
•
Dec, 2014 
•
12/2003 - Skape (M. Miller) Understanding Windows 
Shellcode 
•
2005 - Piotr Bania - IAT Parser - Phrack 63:15 
•
1997 - Cabanas Virus - 29A
http://www.hick.org/code/skape/papers/win32-shellcode.pdf
http://phrack.org/issues/63/15.html
http://virus.wikidot.com/cabanas
Emailed the EMET Team 
¯\_()_/¯ 
IAT Based Stub
LoadLibraryA(LLA)/GetProcAddress(GPA) in Main Module
https://gist.github.com/secretsquirrel/2ad8fba6b904c2c952b8
IAT Based Stub(s)
•
LoadLibraryA/GetProcAddress in Main Module 
•
LoadLibraryA/GetProcAddress in a loaded Module 
(dll)
GetProcAddress Only 
Stub
GetProcAddress Only 
Stub
GetProcAddress
LoadLibraryA
GetProcAddress Only 
Stub
GetProcAddress
LoadLibraryA
LoadLibraryA.Handle = GetProcAddress(Kernel32.addr, ‘LoadLibraryA’)
GetProcAddress Only 
Stub
GetProcAddress
LoadLibraryA
LoadLibraryA.Handle = GetProcAddress(Kernel32.addr, ‘LoadLibraryA’)
Push eax; LLA is in EAX 
mov ebx, esp; mov ptr to LLA in ebx 
… 
call [ebx] 
IAT Based Stub(s)
•
LoadLibraryA(LLA)/GetProcAddress(GPA) in main 
module 
•
LLA/GPA in a loaded module (dll) 
•
GPA to LLA in main module 
•
GPA to LLA in loaded module
System Binaries/DLLs with 
LLAGPA or GPA in IAT
LLAGPA
GPA
XPSP3
1300
5426
VISTA
645
26855
WIN7
675
48383
WIN8
324
31158
WIN10
225
50522
FireEye Flash Malware w/
EMET Bypass Jun 06, 2016
https://www.ﬁreeye.com/blog/threat-research/2016/06/angler_exploit_kite.html
POC: https://github.com/ShellcodeSmuggler/IAT_POC
https://www.okta.com/blog/2016/07/the-emet-serendipity-emets-ineffectiveness-against-non-exploitation-uses/
What now?
•
July 2016  
•
More payloads 
•
Many MetaSploit payloads were based off of Hash API 
stub 
•
Much work 
•
Some ideas
Part II   
Further Development
Two Ideas
•
Remove SFHA and replace it with X 
•
Build something to rewrite the payload logic for 
use with an IAT parsing stub
REWRITE ALL THE 
THINGS
MSF Winx86 Payloads 
Follow a pattern 
https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_recv.asm
Workflow
•
Take Input via stdin or from file 
•
Disassemble 
•
Capture blocks of instructions 
•
Capture API calls 
•
Capture control flow between two locations 
•
Protect LLA/GPA registers from being clobbered
LOE
LOE
•
Five days straight at about 12-15 hour days
LOE
•
Five days straight at about 12-15 hour days
•
When I solved one problem, 2-3 more appeared
LOE
•
Five days straight at about 12-15 hour days
•
When I solved one problem, 2-3 more appeared
•
There is a point where a manual rewrite would have 
been easier - I crossed it
LOE
•
Five days straight at about 12-15 hour days
•
When I solved one problem, 2-3 more appeared
•
There is a point where a manual rewrite would have 
been easier - I crossed it
•
!BURN IT DOWN!
Next idea
Next idea
[—SFHA—]
Next idea
[the actual payload logic]
[—SFHA—]
Next idea
[the actual payload logic]
Next idea
[the actual payload logic]
[IAT Stub]
Next idea
[IAT Stub] [offset table] [the actual payload logic]
Some requirements
•
Support Read/Execute Memory 
•
Try to keep it small 
•
Support any Metasploit Shellcode that uses SFHA
Workflow
•
Take Input via stdin or from file 
•
Disassemble 
•
Capture blocks of instructions 
•
Capture API calls 
•
Build a lookup/offset table 
•
Find an appropriate IAT for the EXE 
•
OUTPUT
Offset Table 
Approach
Offset Table 
Approach
[876f8b31][XX][XX][a2a1de0][XX][XX][9dbd95a6]
[XX][XX]
Offset Table 
Approach
[876f8b31][XX][XX][a2a1de0][XX][XX][9dbd95a6]
[XX]
[XX]