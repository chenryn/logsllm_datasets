# Teaching Old Shellcode New Tricks

## DEF CON 25
**Speaker:** @midnite_runr

### Whoami
- **US Marine (retired in 2001)**
- **Author of BDF/BDFProxy**
- **Discoverer of OnionDuke**
- **Co-author of Ebowla**
- **Employed at Okta**
- **Twitter:** @midnite_runr
- **GitHub:** github.com/secretsquirrel

### Why This Talk
- **It’s fun!**
- **Time to update publicly available Windows shellcode**

### Outline
1. **History**
2. **Further Development**
3. **Mitigations and Bypasses**

---

## Part I: History

### Stephen Fewer’s Hash API (SFHA)
- **Also known as Hash API or MetaSploit Payload Hash**
- **Introduced:** August 2009
- **Functionality:** Uses a 4-byte hash to identify DLL!WinAPI in the Export Address Table (EAT)
- **Execution Flow:** Jumps to the WinAPI and returns to the payload
- **Code Borrowing:** Some code is borrowed from M. Miller's 2003 paper, "Understanding Windows Shellcode"
- **Reference:** [Calling API Functions](http://blog.harmonysecurity.com/2009/08/calling-api-functions.html)

### Typical SHFA-Based Payload
```
[—SHFA—][the actual payload logic]
```

### Defeating SFHA
- **EMET (Enhanced Mitigation Experience Toolkit)**
- **Piotr Bania Phrack 63:15 // HAVOC - POC||GTFO 12:7 EMET Caller/EAF(+)**
- **EAF(+)**
  - **Introduced:** 2010/2014
  - **Protection:** Guards against reading KERNEL32/NTDLL and KERNELBASE
- **Caller (2013)**
  - **Functionality:** Blocks return/jump into a WinAPI (Anti/ROP) for critical functions

### EMET End of Life (EOL)
- **Support Ended:** July 31, 2018
- **Current Status:** Still works, depending on the threat model
- **Reintroduction:** Reintroduced in Windows 10 Redstone 3 (RS3)

### Bypassing EMET
- **Tor Browser Exploit vs EMET**
  - **Bypass Techniques:**
    - **2010:** Berend-Jan Wever (Skypher Blog) - ret-to-libc via ntdll
    - **January 2012:** Piotr Bania - Erase Hardware Breakpoints via NtContinue
    - **September 2014:** Offensive Security - EAF+ bypass via EMET function reuse calling ZwSetContextThread directly
  - **References:**
    - [Bypassing EAF](http://web.archive.org/web/20101125174240/http://skypher.com/index.php/2010/11/17/bypassing-eaf/)
    - [Anti-EMET EAF](http://piotrbania.com/all/articles/anti_emet_eaf.txt)
    - [Disarming EMET v5.0](https://www.offensive-security.com/vulndev/disarming-emet-v5-0/)

- **Bypassing EMET Caller**
  - **February 2014:** Jared Demot - Demonstrated a payload that directly used LoadLibraryA (LLA)
  - **Reference:** [Bypassing EMET 4.1](https://bromiumlabs.files.wordpress.com/2014/02/bypassing-emet-4-1.pdf)

### IAT-Based Payloads in BDF
- **May 30, 2014:**
  - **Addition:** IAT-based payloads/shellcode added to BDF
  - **Functionality:** Directly uses IAT API thunks, bypassing EMET Caller/EAF(+) checks

### Position Independent IAT Shellcode
- **December 2014:**
  - **Historical References:**
    - **December 2003:** Skape (M. Miller) - Understanding Windows Shellcode
    - **2005:** Piotr Bania - IAT Parser - Phrack 63:15
    - **1997:** Cabanas Virus - 29A
  - **References:**
    - [Understanding Windows Shellcode](http://www.hick.org/code/skape/papers/win32-shellcode.pdf)
    - [IAT Parser](http://phrack.org/issues/63/15.html)
    - [Cabanas Virus](http://virus.wikidot.com/cabanas)

### Communication with the EMET Team
- **Emailed the EMET Team** (¯\_()_/¯)
- **IAT-Based Stub Example:**
  - **LoadLibraryA/GetProcAddress in Main Module**
  - **Example Code:**
    ```assembly
    LoadLibraryA.Handle = GetProcAddress(Kernel32.addr, 'LoadLibraryA')
    Push eax; LLA is in EAX 
    mov ebx, esp; mov ptr to LLA in ebx 
    call [ebx]
    ```

### System Binaries/DLLs with LLA/GPA in IAT
| OS Version | LLAGPA | GPA |
|------------|--------|-----|
| XPSP3      | 1300   | 5426 |
| VISTA      | 645    | 26855 |
| WIN7       | 675    | 48383 |
| WIN8       | 324    | 31158 |
| WIN10      | 225    | 50522 |

### FireEye Flash Malware with EMET Bypass
- **Date:** June 6, 2016
- **Reference:** [FireEye Blog Post](https://www.fireeye.com/blog/threat-research/2016/06/angler_exploit_kite.html)
- **Proof of Concept (POC):** [IAT_POC](https://github.com/ShellcodeSmuggler/IAT_POC)
- **Additional Reading:** [The EMET Serendipity](https://www.okta.com/blog/2016/07/the-emet-serendipity-emets-ineffectiveness-against-non-exploitation-uses/)

### What Now?
- **July 2016:**
  - **More Payloads:** Many Metasploit payloads were based on the Hash API stub
  - **Future Work:** Several ideas for further development

---

## Part II: Further Development

### Two Ideas
1. **Remove SFHA and Replace it with X**
2. **Build Something to Rewrite the Payload Logic for Use with an IAT Parsing Stub**

### MSF Winx86 Payloads Follow a Pattern
- **Reference:** [block_recv.asm](https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_recv.asm)

### Workflow
1. **Input:** Take input via stdin or from a file
2. **Disassemble:** Disassemble the code
3. **Capture Instructions:** Capture blocks of instructions
4. **Capture API Calls:** Identify and capture API calls
5. **Capture Control Flow:** Capture control flow between two locations
6. **Protect Registers:** Protect LLA/GPA registers from being clobbered

### Level of Effort (LOE)
- **Duration:** Five days straight, working 12-15 hours per day
- **Challenges:** Solving one problem often led to 2-3 more
- **Reflection:** At some point, a manual rewrite would have been easier

### Next Idea
- **Replace SFHA with IAT Stub:**
  - **Structure:**
    ```assembly
    [—SFHA—]
    [the actual payload logic]
    [—SFHA—]
    [the actual payload logic]
    [IAT Stub] [offset table] [the actual payload logic]
    ```
- **Requirements:**
  - **Support Read/Execute Memory**
  - **Keep It Small**
  - **Support Any Metasploit Shellcode Using SFHA**

### Workflow
1. **Input:** Take input via stdin or from a file
2. **Disassemble:** Disassemble the code
3. **Capture Instructions:** Capture blocks of instructions
4. **Capture API Calls:** Identify and capture API calls
5. **Build Lookup/Offset Table:** Create a lookup/offset table
6. **Find Appropriate IAT:** Identify an appropriate IAT for the EXE
7. **Output:** Generate the final output

### Offset Table Approach
- **Example:**
  ```assembly
  [876f8b31][XX][XX][a2a1de0][XX][XX][9dbd95a6]
  [XX][XX]
  ```

This document provides a structured and detailed overview of the talk, making it more coherent and professional.