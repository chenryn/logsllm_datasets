那么，则可以猜测逻辑应该为：每次下注，目标合约都将取得旧的种子值并根据其和时间戳（或者其他变量）进行种子值更新，更新的种子值 % 5
则为赌注的正确值，在和用户输入比较之后再更新seed表；
这样一来，另一种回滚思路则为下注后内联查询seed表，并通过比较查询得到的新seed值求余是否与此次攻击下注相等来决定是否回滚，代码在这里省略，读者只需要简单地更改上文的
judge 函数即可
###  安全的开奖方式
既然内联的开奖方式是会遭受到回滚攻击的，那幺正确的方式应该何如呢？由于我们无法强制玩家使用非内联方式下注，那么回滚的风险一定存在，但仔细想回滚本身是一种正常的行为，不正常的是黑客通过查询和输赢有关的信息来回滚从而保证只赢不输，那么，我们可以重新设计目标合约让其不会泄露数据库内的相关信息
原合约代码文件可以戳[这](https://github.com/De1ta-team/De1CTF2019/tree/master/writeup/misc/Easy%20EOS/easyeos)查询
更改的合约代码如下
    #include 
    #include 
    #include 
    using namespace eosio;
    class [[eosio::contract]] easyeospack : public contract {
      private:
        struct [[eosio::table]] user_info {
          name username;
          uint32_t win;
          uint32_t lost;
          auto primary_key() const { return username.value; }
        };
        struct [[eosio::table]] seed {
          uint64_t        key = 1;
          uint32_t        value = 1;
          auto primary_key() const { return key; }
        };
        struct [[eosio::table]] mail {
          name username;
          std::string address;
          auto primary_key() const { return username.value; }
        };
        typedef eosio::multi_index users_table;
        typedef eosio::multi_index seed_table;
        typedef eosio::multi_index mails_table;
        users_table _users;
        seed_table _seed;
        mails_table _mails;
      public:
        using contract::contract;
        easyeospack( name receiver, name code, datastream ds ):contract(receiver, code, ds),
                           _users(receiver, receiver.value),
                           _seed(receiver, receiver.value),
                           _mails(receiver, receiver.value) {}
        ACTION deferred1(int new_seed_value) {
          require_auth(get_self());
          auto seed_iterator = _seed.begin();
          _seed.modify( seed_iterator, _self, [&]( auto& s ) {
            s.value = new_seed_value;
          });
        }
        ACTION deferred2(name username, bool has_win) {
          require_auth(get_self());
          auto user_iterator = _users.find(username.value);
          if(has_win) {
            _users.modify(user_iterator, username, [&](auto& new_user) {
              new_user.win = user_iterator->win + 1;
            });
          }
          else{
            _users.modify(user_iterator, username, [&](auto& new_user) {
              new_user.lost = 1;
            });
          }
        }
        [[eosio::action]]
        void bet( name username, int num)
        {
          // Ensure this action is authorized by the player
          require_auth(username);
          int range = 5;
          auto seed_iterator = _seed.begin();
          // Initialize the seed with default value if it is not found
          if (seed_iterator == _seed.end()) {
            seed_iterator = _seed.emplace( _self, [&]( auto& seed ) { });
          }
          // Generate new seed value using the existing seed value
          int prime = 65537;
          auto new_seed_value = (seed_iterator->value + (uint32_t)(eosio::current_time_point().sec_since_epoch())) % prime;
          int random_num = new_seed_value % range;
          // 延迟交易修改 seed 表的值
          eosio::transaction deferred;
          deferred.actions.emplace_back(
            permission_level{get_self(),"active"_n},
            get_self(), "deferred1"_n, 
            std::make_tuple(random_num)
          );
          deferred.send(username.value + 0, get_self());
          // Create a record in the table if the player doesn't exist
          auto user_iterator = _users.find(username.value);
          if (user_iterator == _users.end()) {
            user_iterator = _users.emplace(username,  [&](auto& new_user) {
            new_user.username = username;
            });
          }
          check(user_iterator->lost win >= 10, "You need to win at least 10 times.");
          print("You win!!! Email: ", address);
          auto mail_iterator = _mails.find(username.value);
          if (mail_iterator == _mails.end()) {
            mail_iterator = _mails.emplace(username,  [&](auto& new_mail) {
              new_mail.username = username;
              new_mail.address = address;
            });
          }
          else{
            _mails.modify(mail_iterator, username, [&](auto& new_mail) {
              new_mail.address = address;
            });
          }
        }
    };
这时候再采用原来的攻击合约会发现已经无法成功攻击 Yep ！