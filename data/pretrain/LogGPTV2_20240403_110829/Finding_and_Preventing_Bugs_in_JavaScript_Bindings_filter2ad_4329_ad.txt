sees a cast of an un-type-checked argument, it ﬂags an error.
For each binding layer function, the checker:
1. Initializes the set of UncheckedTypes to the empty set.
2. Adds any user-controlled JavaScript arguments to the set
of UncheckedTypes.
3. Removes any argument that is type checked from the
UncheckedTypes set.
4. Flags an error when a variable in UncheckedTypes is cast
using V8’s As() function.
The checker ﬂags 13 bugs; we conﬁrm 4 by crafting exploits for
them. Most false positives—especially in the Chrome systems—
occur because of impossible paths into our ﬂagged reports; inter-
procedural checking and checking between JavaScript-layer and
C++-layer functions would make our reports far cleaner.
3.3 Memory-Safety Violations
The checkers in this section identify memory-safety violations.
They look for instances where user JavaScript can alter values
used in memory operations and instances where user JavaScript
can force the deallocation of objects still used by C++ code.
Attackers could leverage these sorts of bugs to, for example,
read the TLS keys of a Node.js web application.
Memory operations dependent on implicit casts. V8
return C++ representa-
provides built-in functions that
tions of JavaScript values. For example,
the statement
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:26 UTC from IEEE Xplore.  Restrictions apply. 
“uint32_t y = x->Uint32Value()” assigns y to the C++ un-
signed integer value of x. Programmers occasionally depend on
the results of these functions for sensitive operations such as
memory allocations (e.g., malloc(y)). If the JavaScript receiver
is a primitive type (e.g., x is a Number), this is ﬁne; if the receiver
is a non-primitive type, calls like x->Uint32Value() can be
dangerous. In particular, when x is an Object, the JavaScript en-
gine upcalls the x[Symbol.toPrimitive] function (if deﬁned)
within the Uint32Value function. Attackers can leverage this
function in order to, say, evade bounds checks. We will call
functions like Uint32Value—functions that implicitly cast a
value by calling Symbol.toPrimitive—implicitly casting.
This checker ﬂags instances where the binding layer does
not perform type checking before depending on the result of an
implicitly casting function for a memory operation. It identiﬁes
an out-of-bounds write error in Node.js’s buffer fill function,
which ﬁlls in a user-provided buffer buf with a single value
starting at a start index and going to an end index [92]. fill
must ensure that both start and end are within the bounds of
buf. Bounds checking, though, is not as straightforward as it
seems: fill tries to implement some checking in the JavaScript
layer and some in the C++ binding layer. We give the JavaScript
checks below:
/* node/lib/buffer.js */
662 function fill(val, start, end, encoding) {
663
...
// bounds checks
if (start  this.length)
throw new RangeError('Out of range index');
if (end & args) {
605
size_t start = args[2]->Uint32Value();
size_t end = args[3]->Uint32Value();
size_t fill_length = end - start;
...
CHECK(fill_length + start IsUint32()) return.
V8 API: internally, this function just calls V8’s ToString on the
vp object. Naturally, an attacker can provide their own deﬁnition
of ToString function to delete baAnnot and trigger the UAF.
For example, the following exploit is embedded as JavaScript
code into a PDF with radio-button widgets:
4. Adds the results of any implicitly casting calls on
UncheckedTypes to the DangerousValues set.
5. Adds any values that are assigned using values in
DangerousValues to DangerousValues:
if x is in
DangerousValues, the line y = x + 5 will cause y to
be added to DangerousValues.
6. Flags an error if any value in DangerousValues appears
in an expression that is used as an argument to a memory
operation (e.g., malloc or memcpy).
The checker ﬂags 5 errors, of which 4 are true and 1
is false. All of these reports are in Node.js. Two of our
true bugs appear in template code—WriteFloatGeneric
and ReadFloatGeneric—that is actually used by four ex-
posed binding layer functions: WriteFloatLE, WriteFloatBE,
ReadFloatLE, and ReadFloatBE. We write exploits that resem-
ble the Fill exploit in this section for all 4 errors. The false pos-
itive, in Node.js’s crypto bindings, arises because these bindings
do careful invariant re-checking that accounts for wraparound.
PDFium use-after-frees. This checker ﬂags potential use-after-
free errors, instances in PDFium bindings where malicious user
JavaScript can force an object to be freed while C++ maintains
a live reference to that object. Consider the following bug [24]:
src/third_party/pdfium/fpdfsdk/javascript/Annot.cpp
72 bool Annot::name(IJS_Context* cc, CJS_PropValue& vp,
(cid:2)→
CFX_WideString& sError) {
ToBAAnnot(m_pAnnot.Get());
CPDFSDK_BAAnnot* baAnnot =
(cid:2)→
if (!baAnnot) return false;
...
CFX_WideString annotName;
vp >> annotName;
baAnnot->SetAnnotName(annotName);
73
74
75
76
77
78
79
80 }
This bug appears in the binding layer of PDFium’s JavaScript
API, an API that allows JavaScript embedded in PDFs to make
changes to the underlying PDF representation. The name func-
tion above, for example, is supposed to set the name of a PDF
annotation. name’s CJS_PropValue& argument, vp, is a user-
supplied JavaScript value; we can craft a JavaScript vp argu-
ment that causes pointer baAnnot to be used (line 79) after it is
freed (line 78).
The function initializes baAnnot and checks that it is non-
null. The next two lines are supposed to assign annotName, a
special type of PDFium String, to the value of baAnnot, the
annotation name. This assignment uses the overloaded “>>”
operator; when annotName is a CFX_WideString, the operator
calls the function ToCFXWideString with vp as the receiver.
ToCFXWideString is part of PDFium’s layer which wraps the
568
1 const annots = this.getAnnots();
2 annots[0].name = {
toString: () => {
3
this.removeField("myRadio");
gc();
return false;
4
5
6
}
7
8 }
In this snippet, annots[0] corresponds to vp in the bind-
ing layer. We override name’s toString function to remove
the "myRadio" ﬁeld, which corresponds to baAnnot in the
binding layer. Now, there are no more JavaScript references
to "myRadio"; when we call gc and force garbage collec-
tion on line 5, the GC frees the memory associated with
"myRadio". This memory, however, is also associated with
baAnnot in the binding layer. Unfortunately, when control re-
turns to the bindings, baAnnot is used without any checks
(baAnnot->SetAnnotName(annotName))—even though the
JavaScript call already caused it to be freed.
Our UAF checker does a forward traversal of each
PDFium function parse tree. Its main computed data set is
FreeablePointers, pointers that may have been freed in user
JavaScript; it ﬂags a bug whenever a freeable pointer is used.
For each function, it:
1. Initializes the set of all pointers that have been initialized,
InitPointers, to empty.
2. Initializes FreeablePointers, the set of pointers that may
be altered by user JavaScript, to empty.
3. Adds newly initialized pointers to InitPointers (e.g., af-
ter the line BAAnnot* x = foo(), x is in InitPointers).
4. Adds all InitPointers to FreeablePointers when it
encounters a PDFium function that can upcall into user
JavaScript. For example, it adds x to FreeablePointers
after the line jsval.ToInt().
5. Flags an error when FreeablePointers are used (e.g., at
the line *x).
This checker moves x in InitPointers to FreeablePointers
when x’s initialization is followed by an upcall into JavaScript.
The checker does so because the JavaScript upcall may remove
the JavaScript object associated with x and then force garbage
collection, thereby making any subsequent uses of x in C++
a use-after-free violation. In our checker implementation, we
consider any potential upcall (e.g., x.ToInt()) to be a feasible
upcall since PDFium does not perform any binding layer type
checking. Therefore, we know we can almost always pass an
Object with maliciously overridden methods to the function.
We do not add obvious unique pointers to the InitPointers or
FreeablePointers sets, since we cannot trigger a UAF attack
on a unique pointer.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:26 UTC from IEEE Xplore.  Restrictions apply. 
This checker ﬂags 9 errors. We wrote exploits for 3 of them
and mark the remaining 6 suspicious. All the suspicious bugs
are easy to reach, but we are not sure which PDF ﬁelds can be
removed from user JavaScript. We are in contact with PDFium
developers about how to remove certain elements (such as an-
notations, above) from PDFs.
4 Runtime System Design and Attacker Models
In the previous sections, we outlined several classes of binding
layer bugs; in this section, we contextualize the real-world
impact of our results in the systems that we analyze—Blink,
the Chrome extension system, Node.js, and PDFium. We also
outline the attacker models that the systems assume and efforts
they make to mitigate the effects of binding layer bugs. In some
cases, we propose changes to their efforts and attacker models.
4.1 Blink
Chrome’s rendering engine, Blink, relies on V8 to expose APIs
(e.g., the DOM) to JavaScript web applications. Blink assumes
that JavaScript application code may be malicious [14]—that it
may, for example, try to leak or corrupt data of different origins
by exploiting a bug in the binding layer. As a result, Blink treats
type- and memory-safety violations as security concerns. Blink
does not consider crashing bugs and denial-of-service attacks
to be security errors because malicious JavaScript can always
hang the event loop and deny service. Nevertheless, Blink tries
to mitigate the risk and likelihood of all three categories of
bug: they use automatically generated bindings, a C++ garbage
collector, and out-of-process iframes (Figure 2a).
Blink addresses most type- and crash-safety binding bugs
by automatically generating most of its bindings from We-
bIDL speciﬁcations of web platform APIs (e.g., the DOM,
XMLHttpRequest, etc.). Once the generating templates are cor-
rect, generated code can perform type checking in a consistent,
crash safe way, avoiding type confusion and hard-crashing bugs.
Templates and WebIDL compilers may still be buggy [15], but
they are more reliable than manual type checking.
Blink avoids memory leaks and use-after-free vulnerabilities
with a garbage collector, called Oilpan, for C++ binding ob-
jects. Oilpan prevents memory errors that arise when binding