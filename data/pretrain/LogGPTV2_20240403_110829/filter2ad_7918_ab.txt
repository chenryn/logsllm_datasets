### 不完善的CSRF保护

#### 漏洞原因
此漏洞主要由错误配置的`OAuth`组件引起，特别是`state`参数的配置。`state`参数通常是一个与会话信息相关的哈希值，在服务端和客户端之间传递，作为客户端的CSRF令牌。如果未正确配置该参数，攻击者可以通过将客户端绑定到自己的账户来劫持客户端账户。

##### 实验：强制OAuth个人资料链接
**描述**
> 本实验允许用户将社交媒体个人资料附加到其账户，以便通过[OAuth](https://portswigger.net/web-security/oauth)登录，而不是使用常规用户名和密码。由于客户端应用程序不安全地实现了OAuth流程，攻击者可以利用此功能获取其他用户的账户访问权限。
>
> 要解决此实验，请使用[CSRF攻击](https://portswigger.net/web-security/csrf)将您的社交媒体个人资料附加到博客网站上的管理员用户账户中，然后访问管理员面板并删除Carlos。

**分析步骤**
1. 单击“我的账户”进行登录。
2. 登录成功后跳转到`/my-account`路由。
3. 在此页面上，有一个选项可以将社交账号绑定到账户。
4. 点击“附加一个社交个人资料”，然后使用靶场提供的社交信息登录。
5. 注意在请求过程中，`redirect_uri`将授权代码发送到了`/oauth-linking`路由，但没有`state`参数，存在CSRF漏洞。
6. 在Burp Suite中开启拦截器，重新加载社交账号。
7. 首先放行包含`client_id`的请求。
8. 继续放行直到出现带有授权码的URL，并复制该URL。
9. URL: `https://0ad800510493bb41c0ae20b800aa004d.web-security-academy.net/oauth-linking?code=k8gw_duVfcBUiN1irp_BkqHe8n_m9t06knW5iRVerQY`
10. 在内置漏洞利用服务器中添加可造成CSRF漏洞的代码。
11. 点击“将漏洞利用传递给受害者”，当其加载恶意的`iframe`标签时，完成OAuth流程并将恶意社交媒体配置文件附加到博客网站上的管理员帐户。
12. 退出账户并使用社交账户重新登录。
13. 成为管理员账户后，删除Carlos账户以完成漏洞利用。

### OAuth服务端中的利用

#### 泄露授权码和访问令牌
根据授权类型，获取token的代码将被发送到授权请求的`redirect_uri`参数中的位置。如果服务端未正确验证此URI，攻击者可以通过此漏洞将客户端的授权码和令牌发送到攻击者控制的`redirect_uri`地址。攻击者可以利用这些信息发送到服务端合法的`redirect_uri`地址，从而成功获取用户的账户访问权限。

##### 实验：通过`redirect_uri`劫持OAuth账户
**描述**
> 本实验使用[OAuth](https://portswigger.net/web-security/oauth)服务允许用户通过社交媒体账户登录。由于OAuth提供商的配置错误，攻击者可以窃取与他人账户关联的授权码。
>
> 要解决此实验，请窃取与管理员用户关联的授权码，然后使用它访问其账户并删除Carlos。
>
> 管理员用户会打开从漏洞利用服务器发送的任何内容，并且他们始终与OAuth服务保持活跃会话。

**分析步骤**
1. 登录账户形成一个会话，然后注销账户。
2. 再次登录账户时发现不需要输入凭证，因为存在一个会话。
3. 观察HTTP请求中设置了重定向的URL，将数据包发送到Repeater中修改`redirect_uri`。
4. 修改`redirect_uri`为恶意服务器的URL，查看日志，发现携带了一个授权码的链接。
5. 抓取登录账户的`client_id`页面的数据包，使用Burp自带的CSRF生成方式生成PoC。
6. 在漏洞利用服务器中的`View`选项中发送payload，测试是否可行。
7. 在日志记录中发现生成的授权码。
8. 直接攻击受害者，成功返回admin的授权码。
9. 使用授权码加上原始`redirect_uri`登录。
10. 成功登录admin账户。

#### 通过代理页面窃取授权码和访问令牌
这是上一种方法的升级版，`redirect_uri`不能传递到外部域中，但提出了一种利用思路。可以尝试找到成功访问不同子域或路径的方法，通过目录穿越寻找白名单。

##### 实验：通过开放重定向窃取OAuth访问令牌
**分析步骤**
1. 同样的步骤进行首次登录，然后再次登录，获取`client_id`。
2. 虽然`redirect_uri`不能指定外部域，但这里存在一个目录穿越漏洞，可以通过`../`进行穿越。
3. 发现在“下一篇文章”中的`/post/next?path=`参数存在开放式重定向，甚至可以指定完整域名进行重定向。
4. 将漏洞利用传递给受害者，然后从日志中复制他们的token。
5. 在Repeater中，转到GET /me请求并将Authorization: Bearer标头中的token替换为您刚刚复制的token。
6. 发送请求，观察您已成功进行API调用以获取受害者的数据，包括他们的API密钥。

# 参考
- [PortSwigger Web Security Academy](https://portswigger.net/web-security)
- [OAuth Security Best Practices](https://oauth.net/articles/security-best-practices/)