# A Real-time 802.11 Compatible Distributed MIMO System

**Authors:**
- Ezzeldin Hamed
- Hariharan Rahul
- Mohammed A. Abdelghany
- Dina Katabi

**Affiliation:**
Massachusetts Institute of Technology
{ezz, rahul, melmotaz, dina}@csail.mit.edu

## Abstract
We present a demonstration of a real-time distributed MIMO system, DMIMO. This system synchronizes transmissions from four distributed MIMO transmitters in time, frequency, and phase, and performs distributed multi-user beamforming to independent clients. DMIMO is built on a Zynq hardware platform integrated with an FMCOMMS2 RF front end. The platform implements a custom 802.11n-compatible MIMO PHY layer, augmented with a lightweight distributed synchronization engine. The demonstration showcases the received constellation points, channel characteristics, and effective data throughput at each client.

## CCS Concepts
- **Networks:** Network protocols; Wireless access points, base stations, and infrastructure.
- **Hardware:** Digital signal processing.

## 1. Introduction
In recent years, the demand for wireless data has surged, putting significant pressure on the limited available wireless spectrum. Distributed multi-user beamforming has been proposed as a solution to this "spectrum crunch" by allowing wireless throughput to scale with the number of transmitters in the network.

Our demonstration builds on recent advances in practical distributed multi-user beamforming. Specifically, MegaMIMO [2] demonstrated an implementation using USRPs that achieved low-overhead distributed time, frequency, and phase synchronization across transmitters to provide distributed beamforming, scaling throughput with the number of transmitters. However, these prior systems were not real-time or implemented in hardware.

In contrast, our system, DMIMO, implements a complete 802.11n-compatible MIMO physical layer and the synchronization subsystem in hardware. This hardware implementation requires addressing real-time constraints such as integration with carrier sense and response to interference, which previous systems did not need to consider. Additionally, we ensure that our time, frequency, and phase synchronization subsystems are simple enough to meet the timing and resource constraints inherent to hardware while still achieving the desired accuracy for scaling throughput with the number of transmitters.

## 2. System Architecture

### 2.1 Hardware
DMIMO is implemented on the Xilinx Zynq platform [3], integrated with the Analog Devices FMCOMMS2/3 RF front-end card [1]. The Zynq platform consists of an Artix-based FPGA connected by a high-speed bus to an ARM dual-core Cortex A9 processor. We implement the PHY layer for our 80core 802.11n-compatible MIMO transceiver subsystem using Verilog on the Zynq FPGA. Each MIMO transmitter can precode up to eight independent streams to two antennas. Four such transmitters can coordinate to jointly emulate a single 8x8 MIMO transmitter. We also run Linux on the ARM core with drivers to interact with the PHY layer. The PHY layer exposes read and write registers for real-time configuration and monitoring by drivers, as well as DMA for bulk data transfer for packet transmission and reception. Figure 1 shows the hardware architecture of our system.

In addition to typical transmission and reception functionalities, our PHY has the following configurable capabilities:
- Reporting the decoded constellation points on all subcarriers.
- Reporting the estimated channel from the packet headers and decoded data.
- Joint transmission with a master transmitter, along with time, frequency, and phase synchronization.

### 2.2 Software Controller
Figure 2 illustrates the DMIMO architecture. The software controller coordinates the transmitters to measure the channels to clients and perform distributed multi-user beamforming. It schedules joint channel measurement transmissions from the master and slave transmitters, as described in [2]. The controller then obtains the measured channel information from the clients and computes a precoding matrix to be used by the transmitters. The controller distributes the appropriate rows of the precoding matrix to each transmitter along with the data for joint transmission and sets registers to ensure that the master and slave transmissions are synchronized in frequency and phase. The PHY layer then performs the beamforming and synchronized transmission in hardware.

## 3. Demonstration

The demonstration setup includes four 2-antenna MIMO transmitters capable of distributed MIMO and four 2-antenna MIMO clients, as shown in Figure 3. Each transmitter can participate, along with other transmitters, in an 8-stream distributed MIMO transmission. One transmitter is configured as the master, and the others as slaves. The transmitters are connected to an Ethernet backhaul, as indicated by the yellow Ethernet cables to the left of each transmitter device. The clients communicate wirelessly with the transmitters and are not connected to any wired network. Each client is connected to a monitor, which displays various statistics related to the received data, such as constellations, channel plots, and throughput.

The transmitters periodically transmit channel measurement packets to the clients. The clients use these packets to estimate the channels from the different transmitters and transmit the measured channels back to the transmitters. The software controller, running on the master, computes the precoding matrix based on these measured channels and transmits the relevant rows of the precoding matrix to each transmitter. Each transmitter then precodes the 8 streams intended for the clients with its rows of the precoding matrix. The clients are unaware that the transmissions are joint and decode their streams individually.

The system supports 1 and 2 stream 802.11n (i.e., 56 subcarriers with 4 pilots) and all 1 and 2 stream 802.11n modulations and code rates (BPSK 1/2 rate, 4-QAM 1/2 rate, 4-QAM 3/4 rate, 16-QAM 1/2 rate, 16-QAM 3/4 rate, 64-QAM 2/3 rate, 64-QAM 3/4 rate, and 64-QAM 5/6 rate).

An application on the transmitters chooses the rate for joint transmission to the different clients, as well as the beamforming algorithm to be used (e.g., zero-forcing beamforming, conjugate beamforming, no beamforming).

The clients demonstrate the following statistics:
- **Received constellation points:** As shown on the monitors in Figure 3, the clustering of the constellation points indicates the impact of channel feedback quality and timeliness on the accuracy of beamforming and the performance of different beamforming algorithms.
- **Channel at each client:** This shows the channel magnitude across all subcarriers for the 2x2 channel matrix at each client. Each client receives only a 2-stream packet after the combination of all transmissions, effectively seeing only a 2x2 channel. Figure 4 shows an example channel matrix at a client.
- **Throughput as a function of time:** The demonstration shows a graph of the effective throughput, i.e., the rate of correctly received and decoded data as a function of time. The graph illustrates the effect of the transmitted modulation on the received throughput, considering the quality and timeliness of the channel measurement. It also demonstrates the impact of various kinds of interference (single tone and wideband) on the received throughput.

## References
[1] Analog Devices FMCOMMS2. http://www.analog.com/en/design-center/evaluation-hardware-and-software/evaluation-boards-kits/EVAL-AD-FMCOMMS2.html.

[2] H. Rahul, S. Kumar, and D. Katabi. MegaMIMO: Scaling Wireless Capacity with User Demands. In ACM SIGCOMM 2012, Helsinki, Finland, August 2012.

[3] Xilinx Zynq. http://www.xilinx.com/products/silicon-devices/soc/zynq-7000.html. Zynq All Programmable SOC.