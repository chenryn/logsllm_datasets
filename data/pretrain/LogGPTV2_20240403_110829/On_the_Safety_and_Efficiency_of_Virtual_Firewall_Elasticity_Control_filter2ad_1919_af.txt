### VFW Controller Overview

The VFW Controller includes several key modules for efficient and optimal virtual firewall (VFW) management. These include a Buffer Cost Calculation module, an Optimal Scaling Calculation module, and a Floodlight module. The Optimal Scaling Calculation module leverages a Matlab ILP solver to achieve optimal scaling. The Floodlight module implements the functions of the Floodlight SDN controller [8] and communicates with the VFW Controller via Floodlight REST APIs. This communication channel is also used by SDN switches to send network traffic statistics back to the VFW Controller.

### Performance Improvement

To enhance the performance of the VFW Controller, our implementation combines both online and prior processing. Prior analyses, such as dependency analysis, flow update analysis, update cost calculation, and buffer cost calculation, are conducted in advance. The VFW Controller maintains a copy of firewall rules for each virtual firewall and the flow rules in its database for these analyses. Results from these analyses are stored and retrieved whenever scaling is required. Online operations include overload/underload detection, optimal scaling calculation, virtual firewall creation/deletion, migration of firewall rules and flow states, and flow updates.

### 6XL Toolstack

6XL is a toolstack that provides the capability to provision guest VMs in Xen.

### Evaluation

#### Goals

The VFW Controller aims to achieve safe, efficient, and optimal virtual firewall scaling. Our evaluation focuses on the following goals:

1. **Demonstrate the relationship between virtual firewall performance and rule size** (Figure 7). This justifies the VFW Controller's choice of rule splitting over rule copying.
2. **Study the rule dependency relations in firewall policies** (Table I). This justifies the necessity of dependency analysis in the VFW Controller.
3. **Demonstrate the VFW Controller’s capability to quickly scale** (Figure 8).
4. **Quantify the impact of firewall rule migration on virtual firewall throughput** (Figure 9).
5. **Evaluate the performance of the VFW Controller’s optimal scaling calculation** (Figure 10).

#### Setup and Methodology

Our experiments were conducted using CloudLab [3], an open cloud platform providing various resources (server, storage, and network) for experimenters to run cloud software stacks such as OpenStack and CloudStack. In our setup, we deployed a client machine to generate traffic, a server machine to receive traffic, and a firewall machine created by the VFW Controller to process the traffic between the client and the server. The client generated synthetic workloads using Scapy, a powerful interactive packet manipulation program.

### Experiments

#### 1. Virtual Firewall Performance

We examined the relationship between the processing capacity, \( c \), of a virtual firewall and its firewall rule size, \( S \). We used three traffic datasets: the CAIDA UCSD anonymized Internet trace [16], the LBNL/ICSI enterprise trace [5], and the Campus network trace. For each dataset, we increased \( S \) from 1 to 3000 and measured the processing capability for each \( S \) value, repeating each measurement 100 times to calculate the average processing capacity (Figure 7(a)).

- **Results**: The average processing capacity decreases linearly as \( S \) increases across all datasets. The LBNL enterprise traffic, which contains packets with larger payloads, had a more significant impact on performance. Polynomial curve fitting and linear regression on the CAIDA trace yielded the function:
  \[
  c(S) = -0.0043S + 6.2785
  \]
  with \( R^2 = 0.9864 \), indicating a good fit. This function will be used in the evaluation of optimal scaling calculations (§ VIII-B5).

- **Processing Time**: We also recorded the average time a virtual firewall instance spent processing a packet (Figure 7(b)). As \( S \) increases, the average processing time shows a linear increase, leading to increased packet latency. These results are used for buffer cost calculation (§ VI-A).

#### 2. Rule Dependencies in Firewall Policies

We studied 8 real-world firewall policies from different sources, including campus networks and major ISPs. We partitioned each policy into disjoint groups using the algorithm in Section IV (Table I). The results show that rule dependencies are common in real-world firewall policies, justifying the need for dependency analysis in the VFW Controller. The largest group contained only 18 firewall rules (Policy H in Table I).

#### 3. Elasticity of VFW Controller

We demonstrated the VFW Controller's ability to elastically scale out an overloaded virtual firewall through three scenarios (Figure 8):

- **Scenario 1**: A single virtual firewall with 400 rules processed the traffic.
- **Scenario 2**: Two parallel virtual firewalls, each with half of the 400 rules, processed the traffic.
- **Scenario 3**: A single virtual firewall was initially standalone, then connected to the VFW Controller and scaled out.

- **Results**: The single virtual firewall in Scenario 1 experienced significant packet loss, while the two parallel firewalls in Scenario 2 handled the traffic without loss. In Scenario 3, the single virtual firewall was scaled out, resulting in a throughput increase to around 2.8 Gbps. Similar results were observed for TCP traffic (Figure 8(b)).

#### 4. Impact of Migration

During migration, in-flight traffic is buffered, leading to a temporary decrease in throughput. We quantified the duration and magnitude of this degradation for UDP and TCP flows (Figure 9).

- **Results**: The degradation lasted for a short period (≈0.75s for 1200 flows) and was more pronounced for TCP due to congestion avoidance mechanisms. Both UDP and TCP throughput began to recover within 0.1 seconds after reaching the lowest point.

#### 5. Performance of Optimal Scaling Calculation

We introduced a three-step heuristic approach in the VFW Controller to calculate an optimal solution for scaling out an overloaded virtual firewall. The performance of this approach depends on the ILP formulation and solving used in the second step. We tested the ILP performance for varying numbers of firewall rule groups (\( m \)) and new virtual firewall instances (\( n \)) (Figure 10).

- **Results**: The time to find an optimal solution increases with \( m \) and \( n \), but remains very short. Even for \( m = 1000 \), the approach needs less than 0.11 seconds. Similarly, for scaling in, even with 100 underloaded virtual firewalls, the approach takes less than 0.08 seconds to find an optimal solution.

### Related Work

Recent research efforts, such as Pico Replication [43], Split/Merge [44], and OpenNF [28], have focused on designing control systems to address scaling issues of virtualized network functions. Pico Replication provides APIs for NFs to create, access, and modify internal state, while other approaches offer different mechanisms for managing and scaling network functions.