# PHP文件包含漏洞的小结

##### 译文声明
本文为翻译文章，原作者为酒仙桥6号部队，原文来源：酒仙桥6号部队。译文仅供参考，具体内容及含义以原文为准。

## 1. 前言
近期在一个项目中频繁发现安全问题，如信息泄露和XSS攻击等，但始终未能成功获取服务器权限（getshell）。某日偶然间发现了文件包含漏洞，并通过查阅资料尝试了多种方法后，最终利用日志文件实现了getshell。以下将模拟当时情景进行复现，并总结几种常见的getshell方法，以便于在遇到类似漏洞时能更快地获取权限。

### 1.1 本地复现步骤
1. 发现URL参数`file=/home/task.php`，尝试将其替换为`../../../../../../etc/passwd`。
2. 接着发送带有PHP代码的请求，先测试`phpinfo()`函数。
3. 尝试包含日志文件，但多次尝试均失败，提示"no such file"。
4. 尝试包含配置文件也未成功。
5. 最终想到可以尝试包含SSH日志文件，经过几次尝试终于成功。
6. 通过SSH连接目标主机：
   ```bash
   ssh user@remotehost
   ```
7. 成功执行命令`id`，证明已成功getshell。

## 2. 文件包含基础知识
### 2.1 包含函数
- **include** 和 **require**: 加载并执行指定文件中的程序。区别在于如果找不到文件，`include`会发出警告而`require`则会导致致命错误。
- **include_once** 和 **require_once**: 与上述功能相同，但在文件已被加载过一次后不再重复加载。

### 2.2 支持协议
- `file://`: 访问本地文件系统。
- `http(s)://`: 访问HTTP(S) URL。
- `ftp://`: 访问FTP URL。
- `php://`: 访问各种输入/输出流。
- `zlib://`: 压缩流。
- `data://`: 数据URI。
- `glob://`: 查找匹配的文件路径模式。
- `phar://`: PHP归档。
- `ssh2://`: Secure Shell 2。
- `rar://`: RAR压缩包。
- `ogg://`: 音频流。
- `expect://`: 处理交互式流。

### 2.3 常见伪协议解析
- **file://**: 展示本地文件系统，默认目录是当前工作目录。
- **php://input**: 只读流，可访问POST请求的原始数据。
- **php://filter**: 用于数据流打开时的数据筛选过滤。
- **phar://**: 自PHP 5.3.0起支持，用于处理PHP归档文件。

### 2.4 伪协议利用小结
此处省略具体实现细节，建议参考官方文档或相关安全指南了解更多信息。

## 3. getshell方法总结
### 3.1 通过session文件
前提条件：已知session文件路径且部分内容可控。
- 获取路径：查看`phpinfo()`中的`session.save_path`。
- 利用方式：控制session文件内容，插入恶意代码并通过文件包含执行。

### 3.2 通过日志文件
#### 3.2.1 访问日志
- 条件：需知道日志存储路径且文件可读。
- 默认路径包括但不限于Apache、IIS等Web服务器的日志存放位置。
- 利用方法：通过修改请求内容使其被记录到日志文件中，再通过文件包含执行其中的PHP代码。

#### 3.2.2 SSH日志
- 条件：需知SSH日志位置且可读。
- 默认路径通常位于`/var/log/auth.log`或`/var/log/secure`。
- 利用方法：使用SSH连接后，通过文件包含执行日志文件中的代码。

### 3.3 通过environ文件
- 条件：PHP以CGI模式运行且environ文件路径已知。
- 默认路径：`/proc/self/environ`。
- 利用方法：向User-Agent头部注入PHP代码，然后通过文件包含执行。

### 3.4 利用phpinfo页面
- 条件：存在phpinfo页面且有文件包含漏洞。
- 原理：上传临时文件至/tmp目录，通过竞争条件在文件删除前完成包含。
- 利用方法：发送包含恶意代码的数据包给phpinfo页面，并快速包含该临时文件。

### 3.5 通过上传文件
- 条件：存在文件上传点且知道上传后的文件名和路径。
- 利用方法：上传带有PHP代码的图片或其他类型文件，再通过文件包含执行。

## 4. 应对措施
1. 配置`open_basedir`限制可访问的文件路径。
2. 使用白名单限制可包含文件类型。
3. 对输入数据进行严格验证和过滤。
4. 尽量避免使用动态文件包含功能。

希望以上内容对你有所帮助，在实际操作过程中务必遵守法律法规，确保网络安全。