图7.15 静态网页
【在客户端执行的脚本】
不过过了几年，人们就不满足于仅仅靠HTML提供的这种静态的网页了。于是各种网页脚本语言开始盛行，比如JavaScript。这种脚本嵌入在HTML的网页源码中，用户的浏览器下载下网页的源码之后，除了按照HTML排版出网页以外，还要运行网页上的JavaScript语言写的脚本程序。有了这样的脚本语言，就可以实现很多有意思的效果，比如图片的移动（比如某些网页上飘来飘去的广告），背景的切换，甚至实现一个网页上的小游戏，都没有问题。于是，网页开始越来越有意思了。图7.16所示就是一个有一定互动性的动态网页的例子。
![alt](images/00382.jpeg){.calibre3}
图7.16 互动网页
【在服务器端执行的脚本】
不过这种脚本语言也有它的问题。随着这种脚本运用得越来越广泛，写得越来越复杂，执行的效率就难以保障了。用户的电脑多种多样，有的是奔腾166
MHz的CPU，16 MB的内存；有的是8核CPU，8
GB的内存。这两台电脑如果运行同一个网页行的脚本，速度肯定不一样。并且由于不同的浏览器对脚本的解释也会有些细微的差别，因此一个脚本要想在各种电脑、各种浏览器上都能有相同的效果，需要做大量的兼容性测试工作。
这时候，PHP语言吸引了人们的目光。PHP也是一种脚本语言，但它是运行在服务器端的。它同样可以提供一些互动性的或者动态的网页，但这种动态和互动性是依赖服务器的运算能力来实现的，不需要用户的浏览器和电脑做过多的工作。
这样做的好处就是减少了客户端浏览器和计算机硬件的不同带来的差异性，减轻了客户端浏览器的工作压力，让网页的效果更有保证。
7.2.2 解释型语言
PHP是一种解释型的语言，跟刚才咱们说的编译型的C语言不一样。那么解释型语言又是怎么回事呢？
解释型语言就是由一个统一的解释器根据脚本程序进行各种操作，实现各种各样的功能。假设还是你懒得翻书这件事。如果用编译型语言，就相当于设计出一张"自动翻书机"的图纸，然后照着图纸制造出这么个机器，之后你就可以懒到看书不用翻了。
如果用解释型语言呢？那你需要先有一台"全功能懒人助手机器人"，然后你写一段翻书的程序输入到里面，程序里写明了该怎么翻、如何翻、全是字的页隔多长时间翻、有插图的隔多长时间翻等。然后这个全能机器人理解了你写的程序后，就可以帮你做翻书的动作了。
这时候，你写的那个清单，就相当于解释型语言的程序清单。而全能机器人能够解释你的程序，并做出相应的动作，于是它就是你这种"翻书语言"的解释器了。
从我们操作系统的角度看，编译型语言是通过编译器创造出新的程序，然后让这个新的程序去完成你需要的任务；而解释型语言是有一个通用的，干什么都行的解释器程序（比如全能机器人），通过写程序告诉这个程序该去干什么，然后由解释器程序去具体实现各种功能。
![alt](images/00011.jpeg){.tpzz}**提示：**[我们熟悉的bash其实也是一种解释器，Shell脚本就是用bash能够看懂的语言写的一段程序。]{.kai1}
7.2.3 安装Apache和PHP
懒蜗牛同学准备安装Apache了。
【安装必要的软件包】
有人问，这个Apache是什么？不是在说PHP么？你是不是印错了？告诉您，没错。这个Apache是我们Linux下的一个Web服务器软件，对外提供Web服务。再简单点说吧，有了Apache，就可以把你的电脑做成一个网站了。Apache的Logo是一片彩色的羽毛，您可能曾经看到过，如图7.17所示：
![alt](images/00383.jpeg){.calibre3}
图7.17 Apache的Logo
因为PHP主要是用在网页上的脚本语言，而且还是在服务器端执行的，所以当然先得有个Web服务器才好使用PHP脚本。
![alt](images/00011.jpeg){.tpzz}**提示：**[一些轻量级的Web服务器软件，例如Lighttpd、thttpd等，也可以支持PHP脚本。]{.kai1}
安装Apache还是找超级牛力，PHP也找超级牛力装，为了省事，可以写在一条命令里，类似这样：
![alt](images/00384.jpeg){.calibre3}
【验证Apache正常】
安装的过程没什么悬念，安装后你就可以用Firefox访问http://127.0.0.1/这个地址来看看效果了，如果正常，应该会看到如图7.18所示的页面。
![alt](images/00385.jpeg){.calibre3}
图7.18 Apache默认页面
![alt](images/00011.jpeg){.tpzz}**提示：**[根据TCP/IP协议，127.0.0.1为代表本机的特殊地址。]{.kai1}
那么这个简陋的页面是从哪里来的呢？
装上了Apache之后，你的电脑就相当于一个网站的服务器了。而这个页面，就相当于网站的首页。这个页面存储在/var/www/目录下，里面有个index.html文件，里面的内容很简单，大约就是这样：
![alt](images/00386.jpeg){.calibre3}
用狐狸妹妹访问127.0.0.1的时候，狐狸妹妹就连接到本机的80端口，然后会发现Apache在那里笑盈盈地等着，并把这个简单的index.html文件交给狐狸妹妹，狐狸再根据HTML语言的规则把文件显示出来，就是您刚才看到的那个页面。
如果能够显示这个页面，Apache算是正常工作了，但我们还没有看到PHP的身影呢。
【验证PHP正常】
要验证PHP是否正常工作，需要写一个PHP的页面。还在刚才那个/var/www/目录里，咱们再写一个index.php。当然，这个目录不是随便哪个人都能写入的，需要sudo：
![alt](images/00387.jpeg){.calibre3}
这样，gedit会打开一个空文件，然后我们往里面写入如下内容。暂时照着写，不要问为什么。
![alt](images/00388.jpeg){.calibre3}
写完之后保存好，再访问http://127.0.0.1/index.php（如果访问http://127.0.0.1/，还会获取到index.html），然后，就是见证奇迹的时刻，如图7.19所示。
![alt](images/00389.jpeg){.calibre3}
图7.19 PHP信息页面
我们写下的短短几行的代码竟然显示出这么复杂的一个页面。这个页面里介绍了当前正在运行的PHP的一些信息，比如版本、各种相关的配置等。看到这个页面，就说明PHP已经正常地运行起来了。
7.2.4 又是HelloWorld
好了，现在开发PHP的环境装好了，懒蜗牛同学要开始学习怎么写PHP程序了。
【浏览器中的PHP页面】
刚才我们看到了，PHP的程序是嵌入在HTML语言之间的，用标记"\"作为结束。这两个标记之间的内容，就是PHP的语句。懒蜗牛同学又写了个经典的HelloWorld程序，存为test.php文件，放在了/var/www/目录下。程序全文如下：
![alt](images/00390.jpeg){.calibre3}
![alt](images/00011.jpeg){.tpzz}**提示：**[曾经PHP语言的开始标记也可简写为"\"之间的内容，并且按照PHP语言去解释它们，执行相应的操作，用操作输出的结果替换掉"\"之间的内容，再交回Apache手里。这时候的代码里就没有PHP的内容了，比如懒蜗牛同学写的这个简单的test.php页面，经过PHP翻译之后，大约就是下面的样子：
![alt](images/00391.jpeg){.calibre3}
（3）之后，Apache才将PHP翻译过的这个文件交给狐狸妹妹，让她去根据HTML语言的规范去显示页面。狐狸显示出来的test.php大约就是图7.20所示的这个样子了。所以说狐狸根本看不到什么PHP语句，这就是所谓的"运行在服务器端"的脚本语言。
![alt](images/00392.jpeg){.calibre3}
图7.20 test.php效果
【命令行中的PHP脚本】
另外，PHP脚本也不一定非要用在网页上，如果你对PHP语言非常熟悉，想用它写个脚本实现一些简单的功能，比如批量处理文件、自动格式化硬盘之类的，也是没问题的。不过这需要一个命令行下的PHP解释器，需要安装"php5cli"这个软件包，运行以下命令即可，都是老熟人了，我就不讲解这个命令是什么意思了：
![alt](images/00393.jpeg){.calibre3}
装好之后，你就可以写PHP脚本了，比如下面这个简单的例子：
![alt](images/00394.jpeg){.calibre3}
这个文件第一行，咱们之前说过，说明了这个脚本的解释器是/usr/bin/php。下面就是PHP的语句了，当然，虽然不是网页，但PHP语句也一定要写在\之间。把这个文件写好了之后，存储为cpu.sh并赋予执行权限之后，即可执行这个脚本看效果了，其实就是用来查看CPU信息的一个小脚本。
![alt](images/00011.jpeg){.tpzz}**提示：**[使用chmod +x
cpu.sh命令来赋予可执行权限。]{.kai1}
[7.3 Java开发环境的搭建]{.kai}
除了C语言外，应用最广泛的语言大概就是Java了，尤其是在开发手机应用方面，更是Java的天下。因此，懒蜗牛同学决定，还得好好学一下Java。