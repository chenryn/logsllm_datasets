out-of-band channels, 319 nslookup command, 365
McDonald, John, 634
path traversal vulnerabilities, NTLM protocol, 50
meaningful token attackers, 212
651 NULL bytes
memory management, web
sleep function, 323 attackers, 23–24
server software, 687–689
syntax, 332–334 WAFs, 460
metacharacters, OS command
tiered architectures extracting, XSS, 460
injection, 420. Seealso shell
650–652 NULL value, 306–307
metacharacters
UDFs, 328 numeric data
Microsoft. Seealso Internet
limits, 417
Explorer
Asirra puzzles, 612 N SQL injection into, 299–301,
315–316
IIS naming schemes
error messages, 628 application mapping, 85–86
ISAPI extensions, 688 brute-force exercise, 88 O
path traversal vulnerabilities, identifying, 87 obfuscation
691–692 static resources, 87 bytecode, decompiling browser
security, 431–432 native client components, 153 extensions, 144–146
SiteLock Active Template native compiled applications custom schemes, 109
Library, 559 buffer overfl ow, 634–640 OCR. See optical character
mobile devices examples, 633 recognition
applications, 4 format string vulnerabilities, ODBC. See open database
UI redress attacks, 515 643–644 connectivity
mod_isapi, Apache, 688 integer vulnerabilities, 640–643 off-by-one vulnerabilities,
mod_proxy, Apache, 688 testing for, 633–634 636–638
MongoDB, NoSQL injection, native software bugs OllyDbg, 153
343–344 hacker’s methodology, 837–838 Omitted Results, Google, 90
MOVE method, 679–680 web servers, 848 100 Continue, 48
MS-SQL databases source code, 709–710 on-site request forgery (OSRF),
attackers, 326–327 NBFS. See .NET Binary Format 502–503
automated exploitation, 330 for SOAP onsubmit attributes, 130
batch queries, 317 negative price method, 120 opaque data
default lockdown, 326–327 Ness, Jonathan, 634 attackers, 124
bbiinnddeexx..iinndddd 886688 88//1199//22001111 1122::0011::3366 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 869
Index n P–P 869
client-side data transmission, PL/SQL Exclusion List, change functionality, 171–172,
123–124 676–677 193
open database connectivity web server software fi lter application logic fl aws,
(ODBC), 624 bypass, 692–694 409–410
open redirection vulnerabilities web server, 676–677 misuse, 199
causes, 540–541 TheOracleHacker’sHandbook username, 172
fi nding and exploiting, (Litchfi eld), 693 cleartext storage, 190–191
542–546 oracles. See encryption oracle forgotten, 14, 584
hacker’s methodology, 830–831 ORDER BY clause, 295 functionality, 173–175
JavaScript, 546 SQL injection, 301–302 guessing, 160
preventing, 546–547 Origin headers, 528–529 techniques, 163–164
rickrolling attacks, 541 OS commands. See operating hacker’s methodology,
source code, 707–708 system commands authentication
URLs, 542 OSRF. See on-site request forgery guessing, 807
absolute prefi x, 545–546 other user attackers, 431–432 quality, 806
blocking absolute, 544–545 out-of-band channels recovery function, 807–808
user input, 543–544 application mapping, input hints, 174, 200
OpenLDAP, 352 entry points, 101 predictable initial, 183
operating system commands (OS MS-SQL databases, 317 real-world, 163
commands) MySQL, 319 recovery
ASP.NET API methods, Oracle databases, 317–318 challenges, 173–174
722–723 SQL injection, 316–319 hacker’s methodology,
injection, 358–368 unavailable, 319 authentication, 807–808
ASP.net, 360–361 out-of-band delivery, XSS, 450 hints, 200
dynamic code execution, output validation misuse, 199–200
362 DOM-based XSS, 497–498 secondary challenge, 200
dynamic code execution, HTTP header injection, 536 time-limited URLs, 174–175
vulnerabilities, 366–367 stored XSS, refl ected XSS, requirements, 192
fl aws, 363–366 493–495 resetting, 175
hacker’s methodology, system-generated, 192
832–833 P truncated, 180–181
metacharacters, 420 padding oracle weak, 161–162
Perl language, 358–360 attack, 626 path restriction cookies, 247–248
preventing, 367–368 .NET, 685–687 path traversal vulnerabilities
shell metacharacters, 363, 365 pageid parameter, 598 Apple iDisk Server, 690
source code, 708 parameter-based access controls, application mapping, 371
spaces, 366 265–266 attackers
time delay, 363–364 parameterized queries circumventing obstacles,
Java API methods, 715–716 provisos, 341 374–377
Perl language API methods, SQL injection, 339–341 successful, 374
738 parameters targets, 370–371
PHP API methods, 731 application mapping, input causes, 368–369
optical character recognition entry points, 99 chrooted fi le system, 380–381
(OCR), 611 hidden, application mapping, custom encoding, 377–378
OPTIONS functions, 43 96–97 detecting, 372–374
OPTIONS method, 679–680 URL, client-side data initial testing, 372
OPTIONS request, 528 transmission, 121–122 exploiting, 379
Oracle parseResponse method, 585, fi nding, 370–378
databases 589 hacker’s methodology, 833–835
attackers, 327 passive scanning, 764–765 input fi lters, 374–377
11g, 318 passwords Microsoft IIS, 691–692
error messages, 334–338 access controls attackers MySQL, 651
out-of-band channels, harvesting, 275–276 preventing, 379–381
317–318 backdoor, 178–179 source code, 706–707
syntax, 332–334 source code, 708 subtlety, 370
time delays, 323–324 brute-force techniques for UNIX compared to Windows,
UNION operator, 307–308 wiki, 424 374
bbiinnddeexx..iinndddd 886699 88//1199//22001111 1122::0011::3366 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 870
870 Index n Q–R
user input, 379–380 PL/SQL Exclusion List, Oracle, proxy services
Payment Card Industry (PCI), 7 676–677 cross-domain data capture,
Perl language web server software fi lter 529–531
API methods bypass, 692–694 GT, 530–531
database access, 737–738 POJO. See Plain Old Java Object Jitko worm, 530–531
dynamic code execution, 738 port scanning, Java Script, 561, public information
fi le access, 737 566 error messages, 623
OS command execution, 738 POST method, 43, 192 hacker’s methodology,
potentially dangerous, purpose, 264 application mapping, 796
736–739 POST request hidden content discovery with,
sockets, 739 Content-Length header, 581 89–91
URL redirection, 738 XSS converting, 474–475 Internet forums, 91
eval function, 362 PostgreSQL, 323 search engines for, 89
OS command injection via, Pragma header, 42 web archives for, 89–90
358–360 predictable initial passwords, published content
security confi guration, 739–740 183–184 error messages, 625
session interaction, 736 predictable tokens, 213–223 hidden content discovery with
shell metacharacters, 360 Burp Intruder, 213–214 inference from, 85–89
user input, 735–736 concealed sequences, 213–215 information disclosure, 625
per-page tokens, 252–253 time dependency, 215–217 PUT functions, 43
persistent cookies, 550 weak random number PUT method, 679–680
phishing attacks, 541, 707 generation, 218–219
PHP testing quality, 219–223 Q
API methods preg_replace function, 730
quantity parameter,
database access, 729–730 prepared statements, 339–341
restricting, 128
dynamic code execution, privacy attacks. See local privacy
queries
730–731 attacks
CGI, 735–736
fi le access, 727–729 privilege
conjunctive fi lters, 350
OS command execution, 731 data stores, 287
LDAP injection, 352–353
potentially dangerous, DBA, 325–326
disjunctive fi lters, 350
727–732 escalation
LDAP injection, 351
sockets, 732 horizontal, 258, 416
parameterized
URL redirection, 731–732 vertical, 258, 416
provisos, 341
eval function, 362 multilayered model
SQL injection, 339–341
fi le inclusion vulnerabilities, access controls security,
search engines, 90
381–382 280–283
SELECT queries, UNION
mail() command, 398–399 attackers, 283
operator, 304–305
safe mode, 666 privs fi eld, 295
structure, SQL injection,
security confi guration, 732–735 proceeding to checkout,
301–302
magic_quotes-gpc application logic fl aws,
directive, 734 410–411
register_globals programmatic access controls, R
directive, 733 282 race conditions, 427
safe_mode directive, PROPFIND method, 679 Rails 1.0, 55
733–734 proxy history records, 769–771 RBAC. See role-based access
session interaction, 727 proxy servers. Seealso control
tiered architectures, 653–654 intercepting proxies real-world
user input, 724–727 hacker’s methodology, web application logic fl aws, 406–407
web functionality, 54–55 servers, 847 CSRF fl aw, 505
.php fi le extension, 108 hidden HTML form passwords, 163
phpinfo.php, 672 modifi cation with XSS, 442–443
ping command, 364 intercepting, 119–120 recompiling, source code to
PKC # 5 padding, 685 HTTP, 49–50 bytecode
CBC, 686–687 HTTPS, 50 within browser,
Plain Old Java Object (POJO), invisible, 138 142–143
53 web servers as, 682–683 outside browser, 143
bbiinnddeexx..iinndddd 887700 88//1199//22001111 1122::0011::3366 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 871
Index n S–S 871
redirection attacks. See open CSRF, 8, 244, 504–511 deliberate backdoor, 660–661
redirection vulnerabilities anti-CSRF tokens, 508–509, enumerating identifi ers,
referer-based access controls, 266 516–517 576–577
Referrer header, 41–42 authentication, 507–508 error messages, 616–617
client-side data transmission, exploiting fl aws, 506–507 hacker’s toolkit custom,
122 hacker’s methodology, 820 786–789
Firefox, 239 preventing fl aws, 508–510 Curl, 788
XSS exploiting via, 475–476 real-world fl aws, 505 Netcat, 788–789
refl ected XSS, 434–438 session management, 251 Stunnel, 789
Apache, 442 XSS defeating anti-CSRF Wget, 788
cookies, 437–438 tokens, 510–511 HTML form validation,
delivering, 448–449 OSRF, 502–503 129–131
DOM XSS converted from, request headers, 45–46 injection
472–473 “request in browser,” Burp Suite, hacker’s methodology, 835
exploiting, 435–438, 474 272–273 preventing vulnerabilities,
fi lters request macros, Burp Suite, 368
defensive, 455–456 604–606 refl ected XSS user input testing
sanitizing, 468–471 response headers, 46 to introduce, 454–455
signature-based, 455–456 REST. See representational state session token attacker, 217
fi nding and exploiting, 452–481 transfer script code
hacker’s methodology, 829–830 reverse strokejacking, 560 bypassing fi lters, 465–468
IE, 435 rickrolling attacks, 541 dot character alternatives,
length limits, 471–473 Rios, Billy, 485 466
preventing, 492–496 robots.txt, 74 dynamically constructed
HTML limitations, 495–496 role-based access control strings, 466
input insertion, 495 (RBAC), 282 encoding, 468
input validation, 492–493 rolling your own insurance, eval function alternatives,
output validation, 493–495 application logic fl aws, 466
“remember me” function, 437 412–413 JavaScript escaping, 465–466
steps, 436–437 Ruby on Rails (Ruby), 55 multiple technique
stored XSS compared to, WEBrick, 690 combination, 466–467
439–440 VBScript, 467
user input testing, 453 S VBScript and JavaScript,
script introduction, 454–455 467–468
safe data handling approach,
register_globals directive, HTML introducing
input, 25
733 dynamically evaluated CSS
“safe for scripting” registration,
“reject known bad” approach, styles, 459
ActiveX controls, 555–557
input, 23–24 event handlers, 457–458
safe_mode directive, 733–734
RemembeMe cookie, 407–408 script pseudo-protocols, 458
same-origin policy, 524–525
“remember me” functions scripttags, 457
browser extensions, 525–527
application logic fl aws, script pseudo-protocols, 458
Flash, 525–526
encryption oracle, 407 search engines
Java, 527
authentication, 175–176, 193 error messages, 623
Silverlight, 526–527
hacker’s methodology, 808 inference, 626
hacker’s methodology, 851–852
cookies, 175–176 public information, 89
HTML5, 528–529
encrypting, 177 queries, 90
web functionality, 64
refl ected XSS, 437 search function
sanitization approach, input,
remote attackers, 427 application logic fl aws, 422–
24–25
remote black-box testing, 427 424, 429
remote fi le inclusion, 381–382 sanitizing fi lters, 468–471 stored XSS, 439
fl aw testing, 383 scanning. See vulnerability SEARCH method, 679
remoting, 70 scanners secondary challenge
representational state transfer Schuh, Justin, 634 login function, 173, 200
(REST), URLs, 44–45 ScreenName cookie, 407–408 password recovery, 200
spidering, 74–75 scripts. Seealso cross-site second-order SQL injection,
request forgery scripting 313–314
bbiinnddeexx..iinndddd 887711 88//1199//22001111 1122::0011::3377 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 872
872 Index n S–S
second-order XSS. See stored XSS reputation, 1 ASP.NET, 54, 103
secret questions, login function, session management, 248–254 dissecting requests, 107–108
189 shared hosting, 665–667 Java, 53–54
Secure Socket Layer (SSL) component segregation, 667 PHP, 54–55
client-side certifi cation, 138 customer access, 665–666 Ruby on Rails, 55
communication protection, 192 customer functionality SQL, 55–56
hacker’s methodology check segregation, 666 web application behavior
for weak ciphers, 851 SSL, 7–8 extrapolation, 109–110
HTTP tunneled over, 49 tiered architectures, 654–656 web application behavior
security, 7–8 time and resources impacting, isolation, 110
session tokens, 233 11 web services, 56–57
vulnerabilities of, 8 token generation, 210 XML, 56
security. Seealso defense underdeveloped awareness HTTP redirection, 390–392
mechanisms of, 10 exploiting, 391–392
access controls, 278–283 web application, 1, 6–15 technologies
best practices, 279–280 attackers, 6 application mapping
central component approach, developer understanding, 3 identifying, 101–106
280 future, 14–15 banner grabbing, 101
multilayered privilege key factors, 10–12 directory names, 105
model, 280–283 new network perimeter for, fi le extensions, 102–105
pitfalls, 278–279 12–14 HTTP fi ngerprinting, 102
application logic fl aws, 428 user input threatening, 9–10 session tokens, 105
ASP.NET vulnerabilities, 7–8 third-party code
confi guration, 723–724 web server components, 105
ViewState, 155 confi guration, 684 sessions
ASPs, 665–667 software, 695–697 ASP.NET, 719–720
component segregation, 667 website evolution and, 2 fi xation
customer access, 665–666 XSS, evolution, 433 cookie injection, 537–540
customer functionality SELECT NULL value, UNION fi nding and exploiting,
segregation, 666 operator, 306–307 539–540
authentication, 191–201 SELECT queries, UNION operator, preventing, 540
brute-force attack prevention, 304–305 steps, 537–538
196–199 SELECT statements hacker’s methodology
subtleties, 195 SQL injection, 294–295 fi xation, 819
client-side, 431–432 WHERE clause, 321 terminating, 818–819
client-side data transmission, self-registration, usernames, hacker’s methodology,
154–156 182, 196 application mapping,
logging and alerting, 156 semantic checks, input, 25 tokens to, 818
validation, 155 semicolon character, batch hijacking, 436
evolution, 432 function, 363 HTTP authentication
hardening, 695–696 serialization, 70 alternative to, 208–209
HTTP headers and serialized data Java, 712–713
assumptions with, 123 browser extensions Perl language, 736
Java confi guration, 716–717 intercepting data PHP, 727
media focus on, 432 transmission, handling, standalone vulnerability
Microsoft, 431–432 136–138 scanners handling,
myths, 433 Java, 136–137 778–779
PCI standards, 7 Flash, 137–138 state information managed