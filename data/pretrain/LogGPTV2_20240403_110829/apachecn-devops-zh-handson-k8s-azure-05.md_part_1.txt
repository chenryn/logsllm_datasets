# 五、AKS 中常见故障的处理
Kubernetes 是一个具有许多工作部件的分布式系统。AKS 为你抽象了其中的大部分，但当坏事情发生时，你仍然有责任知道该往哪里看，如何应对。许多故障处理是由 Kubernetes 自动完成的；但是，您会遇到需要手动干预的情况。
在部署在 AKS 之上的应用中，有两个地方可能会出错。要么集群本身有问题，要么部署在集群顶部的应用有问题。本章特别关注集群问题。集群可能会出现几个问题。
首先可能出错的是群集中的一个节点可能变得不可用。这可能是由于 Azure 基础架构中断或虚拟机本身的问题(如操作系统崩溃)造成的。无论哪种方式，Kubernetes 都会监控集群中的节点故障，并将自动恢复。在本章中，您将看到这一过程在起作用。
Kubernetes 集群中的第二个常见问题是资源不足故障。这意味着您尝试部署的工作负载需要的资源比集群上可用的资源多。您将学习如何监控这些信号以及如何解决它们。
另一个常见问题是装载存储的问题，当节点变得不可用时就会出现这种问题。当 Kubernetes 中的节点变得不可用时，Kubernetes 不会分离连接到此故障节点的磁盘。这意味着这些磁盘不能被其他节点上的工作负载使用。您将看到这方面的一个实际例子，并学习如何从这次失败中恢复。
我们将在本章深入探讨以下主题:
*   处理节点故障
*   解决资源不足的故障
*   处理存储装载问题
在本章中，您将了解常见的故障场景，以及这些场景的解决方案。首先，我们将介绍节点故障。
#### 注意:
参考 Kubernetes 家的艰难之路(https://github.com/kelseyhightower/kubernetes-the-hard-way)，这是一个很好的教程，来了解 Kubernetes 家所在的街区。关于 Azure 版本，请参考 Kubernetes the Hard Way-Azure Translation([https://github . com/ivanforavanti/Kubernetes-the Hard Way on Azure](https://github.com/ivanfioravanti/kubernetes-the-hard-way-on-azure))。
## 处理节点故障
有意(为了节省成本)或无意，节点可能会宕机。当这种情况发生时，你不会想听到众所周知的凌晨 3 点的电话，说你的系统出了问题。Kubernetes 可以自动为您处理故障节点上的移动工作负载。在本练习中，您将部署留言簿应用，并在集群中关闭一个节点，看看 Kubernetes 会如何响应:
1.  Ensure that your cluster has at least two nodes:
    kubectl 获取节点
    这将产生如图 5.1 所示的输出:
    ![List of nodes in the created cluster](img/B17338_05_01.jpg)
    图 5.1:集群中的节点列表
    如果集群中没有两个节点，请在 Azure 门户中查找集群，导航到节点池，选择要扩展的池，然后单击扩展。然后您可以将节点计数缩放到 2 个节点，如图 5.2*所示:*
    ![Scaling the cluster size to two nodes using the Azure portal](img/B17338_05_02.jpg)
    图 5.2:扩展集群
2.  As an example application in this section, deploy the guestbook application. The YAML file to deploy this has been provided in the source code for this chapter (**guestbook-all-in-one.yaml**). To deploy the guestbook application, use the following command:
    kubectl create -f 留言簿一体机. yaml
3.  Watch the **service** object until the public IP becomes available. To do this, type the following:
    忽必烈得到服务-w
    #### 注意
    您也可以通过使用**Kubernetes get SVC**而不是完整的**Kubernetes get service**来获得服务。
4.  This will take a couple of seconds to show you the updated external IP. *Figure 5.3* shows the service's public IP. Once you see the public IP appear (20.72.244.113 in this case), you can exit the watch command by hitting *Ctrl* + *C*:
    ![Fetching the external IP of the Service object](img/B17338_05_03.jpg)
    图 5.3:前端服务的外部 IP 从变为实际的 IP 地址
5.  Go to **http://** (**http://20.72.244.113** in this case) as shown in *Figure 5.4*:
    ![Browsing to the guestbook application using the external IP](img/B17338_05_04.jpg)
    图 5.4:浏览到留言簿应用
6.  Let's see where the pods are currently running using the following command:
    kubectl 的 PODS 很宽
    这将产生如图 5.5 所示的输出:
    ![List of pods running on nodes 0 and 2](img/B17338_05_05.jpg)
    图 5.5:Pod 分布在节点 0 和节点 2 之间
    这表明您应该将工作负载分布在节点 0 和节点 2 之间。
    #### 注意
    在*图 5.5* 所示的示例中，工作负载分布在节点 0 和节点 2 之间。您可能会注意到这里缺少节点 1。如果您遵循了*第 4 章“构建可扩展应用”*中的示例，那么您的集群应该处于类似的状态。这样做的原因是，当 Azure 移除旧节点并向集群添加新节点时(正如您在*第 4 章“构建可扩展应用”*中所做的那样)，它会不断增加节点计数器。
7.  Before introducing the node failures, there are two optional steps you can take to verify whether your application can continue to run. You can run the following command to hit the guestbook front end every 5 seconds and get the HTML. It's recommended to open this in a new Cloud Shell window:
    虽然真实；做
    curl-m 1 http:///；
    睡眠 5；
    完成的
    #### 注意
    前面的命令会一直调用你的应用，直到你按下 *Ctrl* + *C* 。有时您可能会收到回复，这是意料之中的，因为 Kubernetes 需要几分钟来重新平衡系统。
    您还可以添加一些留言簿条目，看看当您导致节点关闭时会发生什么。这将显示如图 5.6 所示的输出:
    ![Adding a couple of entries in the guestbook application](img/B17338_05_06.jpg)
    图 5.6:在留言簿上写一些信息
8.  In this example, you are exploring how Kubernetes handles a node failure. To demonstrate this, shut down a node in the cluster. You can shut down either node, although for maximum impact it is recommended you shut down the node from *step 6* that hosted the most pods. In the case of the example shown, node 2 will be shut down.
    要关闭这个节点，在 Azure 搜索栏中查找 **VMSS** ( **虚拟机比例集**，选择你的集群使用的比例集，如图*图 5.7* 。如果您的订阅中有多个比例集，请选择其名称对应于*图 5.5* 所示节点名称的比例集:
    ![Searching for vmss in the azure search bar, and selecting the scale set used by your cluster](img/B17338_05_07.jpg)
    图 5.7:寻找托管集群的规模集
    导航到比例集的窗格后，转到实例视图，选择要关闭的实例，然后点击停止按钮，如图*图 5.8* :
    ![Shutting down the desired node through the Instances pane of the scale set used by your cluster](img/B17338_05_08.jpg)
    图 5.8:关闭节点 2
    这将关闭节点。要了解 Kubernetes 对您的 Pod 的反应，您可以通过以下命令观察集群中的 Pod :
    kubectl get pods -o wide -w
    过了一会儿，您应该会注意到额外的输出，显示在健康主机上重新安排了 PODS，如图 5.9 所示:
    ![Pods from the failed node getting rescheduled on healthy nodes](img/B17338_05_09.jpg)
    图 5.9:故障节点的 pods 在正常节点上重新创建
    您在这里看到的是:
    *   由于主机变得不健康，运行在节点 2 上的 Redis 主 pod 被终止。
    *   在主机 0 上创建了一个新的 Redis 主 pod。这经历了挂起、包含创建和运行阶段。
    #### 注意
    在前面的例子中，Kubernetes 在重新安排 PODS 之前发现宿主不健康。如果您要执行 **kubectl 获取节点**，您会看到节点 2 处于未就绪状态。Kubernetes 中有一个配置叫做**pod-驱逐-超时**，它定义了系统在一个健康的主机上等待重新调度 pod 的时间。默认值为 5 分钟。
9.  如果您在*步骤 7* 期间在留言簿中记录了许多消息，请浏览回留言簿应用的公共 IP。你能看到的是，你所有珍贵的信息都不见了！这显示了在节点故障的情况下，对于任何想要存活的数据，拥有**PersistentVolumeClaims**(**PVCs**)的重要性，而在我们这里的应用中，情况并非如此。在本章的最后一节，您将看到一个这样的例子。
在本节中，您学习了 Kubernetes 如何通过在健康节点上重新创建 pods 来自动处理节点故障。在下一节中，您将学习如何诊断和解决资源不足的问题。
## 解决资源不足故障
Kubernetes 集群的另一个常见问题是集群资源不足。当集群没有足够的 CPU 功率或内存来调度额外的 Pod 时，Pod 将陷入**挂起**状态。您在*第 4 章【构建可扩展的应用】中也看到了这种行为。*
Kubernetes 使用请求来计算某个 pod 需要多少 CPU 功率或内存。留言簿应用为所有部署定义了请求。如果您打开文件夹**第 05 章**中的**留言簿一体机. yaml** 文件，您将看到以下关于**重新复制**部署的信息:
63 种:部署
64 元数据:
65 名称:redis-复制
...
83 资源:
84 项请求:
85 个 CPU:200 米
86 内存:100 兆
本节解释了**重新复制**部署的每个 Pod 需要**200 米**的中央处理器内核( **200** 毫或 **20%** )和**100 兆字节**(兆字节)的内存。在您的 2 个 CPU 集群中(节点 1 关闭)，将其扩展到 10 个单元会导致可用资源出现问题。让我们看看这个:
#### 注意
在 Kubernetes 中，您可以使用二进制前缀表示法或十进制表示法来指定内存和存储。二进制前缀表示法是用 KiB (kibibyte)表示 1，024 字节，用 MiB (mebibyte)表示 1，024 KiB，用 Gib (gibibyte)表示 1，024 MiB。十进制表示法是用千字节表示 1000 字节，兆字节表示 1000 千字节，千兆字节表示 1000 兆字节。
1.  Let's start by scaling the **redis-replica** deployment to 10 pods: