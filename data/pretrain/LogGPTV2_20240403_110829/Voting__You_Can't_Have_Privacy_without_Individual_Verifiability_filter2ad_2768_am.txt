• C1 simulates A1, similarly to B1. However, unlike B1, it stops there, and does not corrupt all identities.
• C2 first draws at random a bit β′′, Similarly to B2, C2 then simulates A2 and uses lists hL, V. For each call to Op,c
vote(id, v0, v1), provided
id ∈ U1\CU1 does not already occur in V, C calls Oc(id, vβ′′). C obtains a ballot b and appends (id, vβ′′) to V, and b to hL. Finally C
returns b.
• A2 eventually returns a board BB. C then draws at random a ballot of BB and returns it.
Note that the lists BB, hL, are the same for C in ExpNM at the point C2 returns, and for B in Expind at the point the simulated A2 returns.
Similarly V in C is the same as Vβ′′ in B. Let us also notice that hL in C is equal to the list L in the game ExpNM.
We will now prove that if A wins Exppriv−careful, then B wins Expind provided C does not win ExpNM.
The adversary C is polynomial, i.e. there exists a polynomial q(λ) bounding its number of operations. q(λ) necessarily also bounds the
length of the board BB that C computes.
30
For any β, assume BB\hL contains a ballot b such that there exists a honest (∗, cred) ∈ U\CU such that opencred(b, sk, U) = cred (note
that U,CU in ExpNM are equal to U1, CU1 in B). Thus, provided C correctly guesses β′′ = β, and chooses this b from BB, the condition
b (cid:60) L ∧ ∃(id, cred) ∈ U\CU. opencred(b, sk, U) = cred in ExpNMC holds. Indeed, since b (cid:60) hL, b (cid:60) L. Thus ExpNMC = 1.
ExpNMC = 1(cid:105), which is smaller than 2q(λ) P(cid:104)
ExpNMC = 1(cid:105) since |BB| ≤ q(λ).
Therefore, such a ballot b exists with probability at most 2|BB| P(cid:104)
ExpNMC = 1(cid:105).
holds except with probability at most 2q(λ) P(cid:104)
For any β, Expind, βB
Assume BB\hL does not contain any ballot associated with a honest credential (i.e. a credential in U1\CU1), which, as we have established,
(λ) = 1 if and only if B2 returns 1 in this game.
Let us then show that A4 is accurately simulated by B2, i.e. it is provided by B2 with the same input as when it is called in Exppriv, βA , that
is the actual tally of the board BB (which A2 returned) if ρ(V0) = ρ(V1)) and if ∀id. (id,∗) ∈ V0, V1 ⇒ id ∈ H; and ⊥ otherwise.
It is clear from the definition of B that when either the equality condition ρ(V0) = ρ(V1) or the voter verification condition ∀id. (id,∗) ∈
V0, V1 ⇒ id ∈ H do not hold, A4 is indeed given ⊥ as an argument.
Let us now study the case where both these conditions are met. Among the ballots in BB, some are also in the list hL of ballots created by
c. We will thus see BB as an interleaving (BB\hL) ⊎ (BB ∩ hL) of the ballots in BB\hL and BB ∩ hL (keeping the same order
the oracle Oi
within each of these two lists).
By assumption, BB\hL contains no ballot for honest credentials, whereas by construction hL (and thus BB ∩ hL) only contains ballots for
honest credentials. In addition, by construction, hL contains at most one ballot for each credential. Thus, BB ∩ hL also contains at most
one distinct ballot (of which there can be several copies) for each credential. The list of distinct ballots with honest credentials in BB (not
necessarily in the same order) is thus a subset of hL.
Moreover, we assumed the voter verifications succeeded, i.e. ∀id. (id,∗) ∈ V0, V1 ⇒ id ∈ H holds. By construction, each b ∈ hL was
added when simulating a call to Op
vote(id, v0, v1) for some honest id ∈ U1\CU1 and some v0, v1. Therefore (id, v0) ∈ V0, (id, v1) ∈ V1, and
Lid = [b]. Hence, id ∈ H. By definition of B (which performs the voter verifications), this means that b is in BB.
Consequently, all ballots in hL are also in BB. Thus the list of distinct ballots with honest credentials in BB (not necessarily in the same
order) is actually equal to hL.
The revote policy specified for Civitas is to count only the first ballot corresponding to each credential. Since BB can be separated into the
lists BB\hL and BB ∩ hL (whose ballots do not share any credential, by assumption), and since the ballots of each of these two lists occur in
the same order in BB, we have
Tally(BB, sk, U1) = Tally(BB ∩ hL, sk, U1) ∗ Tally(BB\hL, sk, U1).
Then, by the previous observation that the list of distinct ballots in BB ∩ hL is hL (regardless of the order, which does not matter since all
ballots in hL have distinct credentials by construction):
Tally(BB, sk, U1) = Tally(hL, sk, U1) ∗ Tally(BB\hL, sk, U1).
By construction, hL contains ballots for either the votes in V0 or those in V1, depending on β. Since at that point ρ(V0) = ρ(V1), we have
returns the list L of the credentials and votes of each ballot in BB\hL. Since L′ is the list
ρ(V0) = Tally(hL, sk, U1). In addition, the oracle Oi
of the first vote for each credential in L, we thus have Tally(BB\hL, sk, U1) = ρ(L′). Therefore, ρ(V0) ∗ ρ(L′), which is the result computed by
d
B2, is indeed Tally(BB, sk, U1), which concludes the proof that A4 is accurately simulated by B2.
(λ) = 1 if and only if the accurately simulated A4
.
(7)
We thus have:(cid:12)(cid:12)(cid:12)P(cid:104)
=
Hence, unless cL\hL contains a ballot associated with a honest credential, Expind, βB
Thus
returns 1, i.e. if and only if Exppriv−careful, β
(λ) = 1.
A
A
Expind, βB
Exppriv−careful, β
(cid:12)(cid:12)(cid:12)P(cid:104)
(λ) = 1(cid:105) − P(cid:104)
(λ) = 1(cid:105) − P(cid:104)
(λ) = 1(cid:105) − P(cid:104)
B (λ) = 1(cid:105) − P(cid:104)
(λ) = 1(cid:105) − P(cid:104)
B (λ) = 1(cid:105) − P(cid:104)
B (λ) = 1(cid:105) − P(cid:104)
(λ) (cid:44) 1(cid:105)(cid:12)(cid:12)(cid:12) ≤ 2q(λ) P(cid:104)
ExpNMC = 1(cid:105)
(λ) = 1(cid:105)(cid:12)(cid:12)(cid:12)
B (λ) = 1(cid:105)(cid:17)
(cid:16)P(cid:104)
B (λ) = 1(cid:105) − P(cid:104)
(λ) = 1(cid:105)(cid:17)(cid:12)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12)P(cid:104)
B (λ) = 1(cid:105)(cid:12)(cid:12)(cid:12) +
B (λ) = 1(cid:105) − P(cid:104)
(λ) = 1(cid:105)(cid:12)(cid:12)(cid:12)
B (λ) = 1(cid:105)(cid:12)(cid:12)(cid:12) + 4q(λ) P(cid:104)
ExpNMC = 1(cid:105)
A
Expind,0
Exppriv−careful,1
A
Expind,1
Exppriv−careful,1
Expind,0
Exppriv−careful,1
(cid:12)(cid:12)(cid:12)(cid:16)P(cid:104)
(cid:16)P(cid:104)
≤ (cid:12)(cid:12)(cid:12)P(cid:104)
(cid:12)(cid:12)(cid:12)P(cid:104)
≤ (cid:12)(cid:12)(cid:12)P(cid:104)
Exppriv−careful,0
Exppriv−careful,0
A
Expind,1
Exppriv−careful,0
A
Expind,1
Expind,0
Expind,0
Expind,1
A
+
A
+
+
31
Expind,1
B (λ) = 1(cid:105)(cid:17)
B (λ) = 1(cid:105)(cid:12)(cid:12)(cid:12)
Expind,0
Therefore, if A breaks privacy with careful voters, i.e. if(cid:12)(cid:12)(cid:12)P(cid:104)
B breaks Expind, or C breaks ExpNM.
(λ) = 1(cid:105) − P(cid:104)
(λ) = 1(cid:105)(cid:12)(cid:12)(cid:12) is not negligible, then
Exppriv−careful,1
A
Exppriv−careful,0
A
□
1
c, Oi
d
(state′
1, pk). For each call to Op,c
(pk) first simulates AOreg, Ocorr
C.2.3 Belenios is private for Exppriv−careful.
Theorem C.3. Assuming no adversary wins Expind nor ExpNM with non-negligible probability, Belenios is private for Exppriv−careful.
Proof. Let A = A1, A2, A3, A4 be an adversary that wins Exppriv−careful. We consider an adversary B = B1, B2, B3 that plays Expind:
• BOreg, Ocorr
(pk), i.e. B registers and corrupts the same identities as A, while keeping lists U1, CU1 of
1
the identities it declares and corrupts by calling Oreg and Ocorr. A returns some state′
1. B1 then corrupts each user A1 has registered,
i.e., B1 calls Ocorr(id) for each id A1 has declared, and stores each id’s credential in a list CU2.
• BOi
2
Exppriv−careful. B2 will also use lists hL, H, and a list Lid for each id ∈ U1, all of them initially empty.
B2 first simulates AOp,c
vote(id, v0, v1), provided id ∈ U1\CU1, B retrieves id’s credential credid from
c(id, credid, v0, v1). B obtains a ballot b. B then removes from V0 and V1 all elements of the form (id,∗), and appends
CU2, and calls Oi
(id, v0) to V0, (id, v1) to V1, b to hL, and b to Lid. Finally B returns b to A.
A2 eventually returns a board BB. We write BB\hL (resp. BB ∩ hL) the sublist of BB (in the same order) of ballots that do not occur
(resp. do occur) in hL.
d(BB\hL), and obtains a list L of pairs of credentials and votes. B2 then computes the list L′ of the last vote for each
(state1, pk) maintains lists V0, V1, BB, initially empty, which will be used to simulate the lists with the same name in
accepts to open all (valid) ballots in BB\hL.
credential in L. We will see later that under the right assumptions, Oi
d
• B2 then simulates AOhappyBB
(id), provided id ∈ U1\CU1, following the specification of the voter verification
for Belenios, B retrieves id’s credential cred from CU2, and checks whether the last ballot b in Lid is the last ballot associated to cred
(i.e. signed by cred) in BB. If so, B appends id to H. In any case, B then resumes the execution of A3.
• B2 then computes ρ(V0), ρ(V1), and checks that they are equal, and that every id occurring in V0, V1 is also an element of H. If so, B2
computes r = ρ(V0) ∗ ρ(L′). Otherwise, B2 lets r = ⊥.
• B2 then calls A4 on r, and obtains a bit β′. B2 returns β′.
Note that the lists BB, V0, V1, H in B are equal to the lists of the same name in Exppriv−careful, β
. Then, by construction, A2 is always
accurately simulated by B2, i.e. it is called on the same inputs, and provided with the same oracles as what would happen in Exppriv, βA . Given
the specification of VerifVoter for Belenios, A3 is also accurately simulated by B2.
. For each call to OhappyBB
• B2 calls Oi
A
vote
2
3
We also construct an adversary C, who plays the game ExpNM.
• C1 simulates A1, similarly to B1. However, unlike B1, it stops there, and does not corrupt all identities.
• C2 first draws at random a bit β′′, Similarly to B2, C2 then simulates A2 and uses lists hL, V. For each call to Op,c
vote(id, v0, v1), provided
id ∈ U1\CU1, C calls Oc(id, vβ′′). C obtains a ballot b, removes all elements of the form (id,∗) from V, and appends (id, vβ′′) to V,
and b to hL. Finally C returns b.
• A2 eventually returns a board BB. C then draws at random a ballot of BB and returns it.
Note that the lists BB, hL are the same for C in ExpNM at the point C2 returns, and for B in Expind at the point the simulated A2 returns.
Similarly V in C is the same as Vβ′′ in B. Let us also notice that hL in C is equal to the list L in the game ExpNM.
We will now prove that if A wins Exppriv−careful, then B wins Expind provided C does not win ExpNM.
The adversary C is polynomial, i.e. there exists a polynomial q(λ) bounding its number of operations. q(λ) necessarily also bounds the
length of the board BB that C computes.
For any β, assume BB\hL contains a ballot b such that there exists honest (id, cred) ∈ U\CU, and a vote v, such that open(b, sk) = (cred, v)
(note that U,CU in ExpNM are equal to U1, CU1 in B). Thus, provided C correctly guesses β′′ = β, and chooses this b from BB, the condition
b (cid:60) L ∧ ∃(id, cred) ∈ U\CU. open(b, sk) = (cred,∗) in ExpNMC holds. Indeed, since b (cid:60) hL, b (cid:60) L. and thus ExpNMC = 1.
ExpNMC = 1(cid:105), which is smaller than 2q(λ) P(cid:104)
ExpNMC = 1(cid:105) since |BB| ≤ q(λ).
Therefore, such a ballot b exists with probability at most 2|BB| P(cid:104)
ExpNMC = 1(cid:105).
holds except with probability at most 2q(λ) P(cid:104)
For any β, Expind, βB
Assume BB\hL does not contain any ballot associated with a honest credential (i.e. a credential in U1\CU1), which, as we have established,
(λ) = 1 if and only if B2 returns 1 in this game.
32
Note that this assumption notably implies that no ballot in BB\hL has the same ciphertext as a ballot generated by a call to Oi
c, that is, for
all b ∈ BB\hL, extract(b) (cid:60) L. Indeed, the ciphertext part of the ballot, for Belenios, is signed with the credential. Hence any c ∈ L is (by
c) signed with a honest credential, which, by the assumption, is not the case of any of the ballots in BB\hL. Therefore, as
definition of Oi
stated earlier, Oi
d
accepts to open all (valid) ballots in BB\hL.
is the actually tally of the board BB (which A2 returned) if ρ(V0) = ρ(V1)) and if ∀id. (id,∗) ∈ V0, V1 ⇒ id ∈ H; and ⊥ otherwise.
V0, V1 ⇒ id ∈ H do not hold, A4 is indeed given ⊥ as an argument.
the oracle Oi
lists).
Let us then show that A4 is accurately simulated by B2, i.e. it is provided by B2 with the same input as when it is called in Exppriv, βA , that
It is clear from the definition of B that when either the equality condition ρ(V0) = ρ(V1)) or the voter verification condition ∀id. (id,∗) ∈
Let us now study the case where both these conditions are met. Among the ballots in BB, some are also in the list hL of ballots created by
c. We will thus see BB as an interleaving of the ballots in BB\hL and BB ∩ hL (keeping the same order within each of these two
By assumption, BB\hL contains no ballot for honest credentials, whereas by construction hL (and thus BB ∩ hL) only contains ballots for
honest credentials.
Moreover, we assumed the voter verifications succeeded, i.e. ∀id. (id,∗) ∈ V0, V1 ⇒ id ∈ H holds. According to the specification of
vote(id,∗,∗), is
VerifVoter for Belenios, this means that for all id occurring in V0, V1, the last ballot b in Lid, i.e. the last ballot produced by Op,c
also the last ballot signed by credid in BB. (credid being the credential associated with id in CU2). Since id (and thus credid) is honest by
definition of V0, V1, b is actually the last ballot signed by credid in BB ∩ hL.
Consider a credential cred such that BB ∩ hL contains at least one ballot signed by cred. This ballot can only have been added to hL by
a call to Op,c
, and therefore, by definition of this oracle, the associated id was at one point added to V0 and V1. Since no identity is ever
vote
removed from these lists, at the time of tallying, id still occurs in V0, V1.
Hence, the list hL′ of the last ballots signed by each credential in BB ∩ hL is exactly the list of the last ballots produced by Op,c
for
each id in V0, V1. By construction, this list contains ballots for either the votes in V0 or those in V1, depending on β. Since at that point
ρ(V0) = ρ(V1), we have ρ(V0) = Tally(hL′, sk, U1). In addition, the revote policy specified for Belenios is to count only the last ballot signed
by each credential. Therefore, Tally(BB ∩ hL, sk, U1) = Tally(hL′, sk, U1) = ρ(V0).
vote
Besides, the oracle Oi
d
with each credential in L, we thus have Tally(BB\hL, sk, U1) = ρ(L′).
returns the list L of the credentials and votes of each ballot in BB\hL. Since L′ is the list of the last votes associated
Since BB can be separated into the lists BB\hL and BB ∩ hL (whose ballots do not share any credential, by assumption), and since the
ballots of each of these two lists occur in the same order in BB, we have
Tally(BB, sk, U1) = Tally(BB ∩ hL, sk, U1) ∗ Tally(BB\hL, sk, U1) = ρ(V0) ∗ ρ(L
′).
Therefore, ρ(V0) ∗ ρ(L′), which is the result computed by B2, is indeed Tally(BB, sk, U1), which concludes the proof that A4 is accurately
simulated by B2.
(λ) = 1 if and only if the accurately simulated A4
B breaks Expind, or C breaks ExpNM.
33
□
(λ) = 1.
Expind, βB
A
(cid:12)(cid:12)(cid:12)P(cid:104)
Exppriv−careful, β
A
returns 1, i.e. if and only if Exppriv−careful, β
We thus have:(cid:12)(cid:12)(cid:12)P(cid:104)
Hence, unless BB\hL contains a ballot associated with a honest credential, Expind, βB
Thus
(λ) = 1(cid:105) − P(cid:104)
(λ) = 1(cid:105) − P(cid:104)
(λ) = 1(cid:105) − P(cid:104)
B (λ) = 1(cid:105) − P(cid:104)
(λ) = 1(cid:105) − P(cid:104)