如果大家读完上文后有种恍然大悟的感觉，对程序的运行机制有
了一个整体的印象，那么本书的目的也就达到了。只要对程序的运行
机制有了一个整体印象，相信大家的编程能力和应用能力也会快速得
到提高。现在再看之前写出来的程序，是不是感觉它们也变得活灵活
现了呢？
本章在介绍标志寄存器时，提到过“位”这个专业术语。1位代表
二进制数的一个字节位，这一点对了解计算机的运算机制非常重要。
在下一章中，我们将以位为基础，向大家介绍一下二进制数和浮点数
这些数据形式，以及逻辑运算和位操作等相关知识。
---
## Page 33
2
第
章
数据是用二进制数
表示的
热身问答
阅读正文前，让我们先回答下面的问题来热热身吧。
1.32位是几个字节？
2.二进制数01011100转换成十进制数是多少？
3.二进制数00001111左移两位后，会变成原数的几倍？
4.补码形式表示的8位二进制数11111111，用十进制数表示
的话是多少？
5.补码形式表示的8位二进制数10101010，用16位的二进
制数表示的话是多少？
6.反转部分图形模式时，使用的是什么逻辑运算？
---
## Page 34
期2章数据是用二进制数表示的
是笔者的答案和解析，供大家参考。
1.4字节
2.92
3.4倍
4. -1
5. 1111111110101010
6.XOR运算
解析·
1.因为8位=1字节，所以32位就是32÷8=4字节
2.将二进制数的各数位的值和位权相乘后再相加，即可转换成十
进制数。
3.二进制数左移1位后会变成原来的值的2倍。左移两位后，就
是2倍的2倍，即4倍。
4.所有位都是1的二进制数，用十进制数表示的话就是-1。
5.使用原数的最高位1来填充高位。
6.XOR运算只反转与1相对应的位。NOT运算是反转所有的位。
---
## Page 35
2.1用二进制数表示计算机信息的原因
本章
重点
要想对程序的运行机制形成一个大致印象，就要
了解信息（数据）在计算机内部是以怎样的形式来表现
的，又是以怎样的方法进行运算的。在C和Java等高级语言编写的
程序中，数值、字符串和图像等信息在计算机内部都是以二进制数值
的形式来表现的。也就是说，只要掌握了使用二进制数来表示信息的
方法及其运算机制，也就自然能够了解程序的运行机制了。那么，为
什么计算机处理的信息要用二进制数来表示呢？接下来我们就从其原
因开始说起。
2.1
用二进制数表示计算机信息的原因
想必大家都知道计算机内部是由IC这种电子部件构成的。第1章
介绍的CPU（微处理器）和内存也是IC的一种。IC有几种不同的形状，
有的像一条黑色娱蛇，在其两侧有数个乃至数百个引脚；有的则像插花
用的针盘，引脚在IC内部并排排列着。IC的所有引脚，只有直流电压
0V或5V两个状态。也就是说，IC的一个引脚，只能表示两个状态。
IC的这个特性，决定了计算机的信息数据只能用二进制数来处理。
由于1位（一个引脚）只能表示两个状态，所以二进制的计数方式就变
成了0、1、10、11、100-这种形式。虽然二进制数并不是专门为IC
而设计的，但是和IC的特性非常吻合（图2-1）。计算机处理信息的最
①IC是集成电路（Integraled Circuit）的简称，有模拟IC和数字IC两种。本
章介绍的是数字IC。关于内存IC，我们会在第4章详细说明。
②大部分IC的电源电压都是+5V。不过，为了控制电量的消耗，有的IC也
会使用+5V以下的电压。如果IC使用的电源电压为+5V，那么引脚状态
就不只是0V和+5V，还存在不接收电流信号的高阻抗（high impedance）
状态。但在本书中，我们暂时不考虑高阻抗状态。
---
## Page 36
第2章数据是用二进制数表示的
小单位—位，就相当于二进制中的一位。位的英文bit是二进制数位
（binary digit）的缩写。
8个引脚
8位二进制数
围2-1IC的一个引瞬表示二进制数的1位
二进制数的位数一般是8位、16位、32位也就是8的倍数，
这是因为计算机所处理的信息的基本单位是8位二进制数。8位二进制
数被称为一个字节。字节是最基本的信息计量单位。位是最小单位，
字节是基本单位。内存和磁盘都使用字节单位来存储和读写数据，使
用位单位则无法读写数据。因此，字节是信息的基本单位。
用字节单位处理数据时，如果数字小于存储数据的字节数（=二进
制数的位数），那么高位上就用0填补。例如，100111这个6位二进制
数，用8位（=1字节）表示时为00100111，用16位（=2字节）表示
时为0000000000100111。奔腾等32位微处理器，其有32个引脚以用
于信息的输人和输出。也就是说，奔腾一次可以处理32位（32位-4
字节）的二进制数信息。
①半节是由bite（）一词而衍生出来的词语。8位（8 bit）二进制数，就类
似于“咬下的一D”，因此被视为信息的基本单位。
---
## Page 37
22什么是二进制数
程序中，即使是用十进制数和文字等记述信息，在编译后也会转
换成二进制数的值，所以，程序运行时计算机内部处理的也是用二进
制数表示的信息（图2-2）
39（十进制数）
编译
00100111（二进制数）
A（文字）
01000001（二进制数）
图2-2计算机内部所有信息都用二进制数处理
对于用二进制数表示的信息，计算机不会区分它是数值、文字，
还是某种图片的模式等，而是根据编写程序的各位对计算机发出的指
示来进行信息的处理（运算）。例如00100111这样的二进制数，既可以
视为纯粹的数值作加法运算，也可以视为“”（单引号，single
quotation）文字而显示在显示器上，或者视为□口□口这一图
形模式印刷出来。具体进行何种处理，取决于程序的编写方式。
2.2什么是二进制数
什么是二进制数？为了更清晰地说明二进制数的机制，首先让我
们把00100111这个二进制数值转换成十进制数值来看一下。二进制数
的值转换成十进制数的值，只需将二进制数的各数位的值和位权相乘，
然后将相乘的结果相加即可（图2-3）。
假使有人问你：“为什么使用这样的转换方法呢？你能解释一下
吗？”你这么回答是不行的：“不知道原因，只是把方法背下来了。”我
们了解了二进制数的机制后，再看二进制数转换成十进制数的方法，
就没有死记硬背的必要了。下面我们会对照着十进制数来说明二进制
数的机制，这部分是重点，请大家一定要掌握。
---
## Page 38
第2章数据是用二进制数表示的
00100111（二进制数）
(0 ×2”) + (0 ×2°) + [1 ×2°) + (0 ×29 + (0 ×29) + (1 ×2°) + (1 ×2')+ (1 ×2°)
(0 × 128) + (0 ×64) + (1 ×32) + (0 ×16) + (0 × 8) + (1 × 4)+ (1 ×2) + (1 × 1)
0+ 0+32+ 0+0+4+2+1
39 (十进制数)
图2-3二进制数转换成十进制数的方法
首先，让我们从位权的含义说起。例如。十进制数39的各个数位
的数值，并不只是简单的3和9，这点大家应该都知道。3表示的是
3x10=30，9表示的是9×1=9。这里和各个数位的数值相乘的10和
1.就是位权。数字的位数不同，位权也不同。第1位（最右边的一位）
是10的0次幂（=1），第2位是10的1次幂（=10），第3位是10的
2次幂（=100），依此类推。这部分相信大家都能够理解。那么，我们
就继续讲一下二进制数。
位权的思考方式也同样适用于二进制数。即第1位是2的0次幂
（=1），第2位是2的1次幂（=2）第3位是2的2次幂（=4），，
第8位是2的7次幂（=128）。“OO的××次幂”表示位权，其中，
十进制数的情况下OO部分为10，二进制数的情况下则为2。这个称
为基数。十进制数是以10为基数的计数方法，二进制数则是以2为基
数的计数方法。“OO的××次幂”中的×X，在任何进制数中都是
①所有数的0次军部是1。
②数值的表现方法，进位计数制中各数位上可能有的数值的个数。十进制数
的基数是10，二进制数的基数是2
---
## Page 39
2.3移位运算和乘除运算的关系
数的位数-1”。即第1位是1-1=0次幂，第2位是2-1=1次幂，
第3位是3-1=2次幂。
接下来，让我们来解释一下各数位的数值和位权相乘后“相加”这
个处理的原因。其实大家所说的数值，表示的就是构成数值的各数位
的数值和位权相乘后再相加的结果。例如39这个十进制数，表示的就
是30+9，即各数位的数值和位权相乘后再相加的数值。
这种思考方式在二进制数中也是通用的。二进制数00100111用十进
制数表示的话是39，因为（0×128）+（0×64）+（1×32）+（0×16）
+（0×8）+（1×4）+（1×2）+（1×1）=39。大家明白了吗？
2.3
移位运算和乘除运算的关系
在了解了二进制数的机制后，接下来我们来看一下运算。和十进
制数一样，四则运算同样也可以使用在二进制数中，只要注意逢2进
位即可。下面，我们就来重点看一下二进制数所特有的运算。二进制
数所特有的运算，也是计算机所特有的运算，因此可以说是了解程序
运行原理的关键。
首先我们来介绍移位运算。移位运算指的是将二进制数值的各数
位进行左右移位（shift=移位）的运算。移位有左移（向高位方向）
和右移（向低位方向）两种。在一次运算中，可以进行多个数位的移
位操作。
代码清单2-1中列出的是把变量a中保存的十进制数值39左移两
位后再将运算结果存储到变量b中的C语言程序。《运算符。>运算符的左侧是被移位
的值，右侧表示要移位的位数。那么，这个示例程序运行后，变量b
---
## Page 40
2章数据是用二进制数表示的
的值是多少，大家知道吗？
代码清单2-1将变量a的值左移两位的C语言程序
a = 39;
b = a <c 21
如果你认为“由于移位运算是针对二进制数值的位操作，十进制数
39的移位操作就行不通了”，那么就请重新读一下本章的内容。无论程
序中使用的是几进制，计算机内部都会将其转换成二进制数来处理，
因此都能进行移位操作。但是，“左移后空出来的低位，要补上什么样
的数值呢？”想到这个问题的人真是思维敏锐！空出来的低位要进行补
0操作。不过，这一规则只适用于左移运算。至于右移时空出来的高位
要进行怎样的操作，我们会在后面说明。此外，移位操作使最高位或
最低位溢出的数字，直接丢弃就可以了。
接下来让我们继续来看代码清单2-1。十进制数39用8位的二进制
表示是00100111，左移两位后是10011100，再转换成十进制数就是156。
不过这里没有考虑数值的符号。至于其原因，之后大家就知道了。
100100/111
移位前-39
√/////在移两位
100121100
移位后=156
空出来的低位补0
图2-4左移两位的运算
---
## Page 41
2.4便于计算机处理的“补数”
实际的程序中，移位运算以及将在本章最后介绍的逻辑运算在使
用位单位处理信息的情况下比较常用。虽然这里没有列举具体的程序
示例，但对程序员来说，掌握位运算和逻辑运算的机制是一项基本技
能，所以一定要掌握。形象地说，移位运算就好比使用二进制表示的
图片模式像宽虹灯一样左右流动的样子。
不过，移位运算也可以通过数位移动来代替乘法运算和除法运算。
例如，将00100111左移两位的结果是10011100，左移两位后数值变成
了原来的4倍。用十进制数表示的话，数值从39（00100111）变成了
156（10011100），也正好是4倍（39×4=156）。
其实，反复思考几遍后就会发现确实如此。十进制数左移后会变
成原来的10倍、100倍、1000倍.同样，二进制数左移后就会变成
原来的2倍、4倍、8倍反之，二进制数右移后则会变成原来的
1/2、1/4、1/8…这样一来，大家应该能够理解为什么移位运算能代替
乘法运算和除法运算了吧。
2.4便于计算机处理的“补数”
刚才之所以没有介绍有关右移的内容，是因为用来填充右移后空
出来的高位的数值，有0和1两种形式。要想区分什么时候补0什么
时候补1，只要掌握了用二进制数表示负数的方法即可。这部分内容较
多，接下来我们就一起来看看表示负数的方法和右移的方法。
二进制数中表示负数值时，一般会把最高位作为符号来使用，因
此我们把这个最高位称为符号位。符号位是0时表示正数，符号位是
1时表示负数。那么-1用8位二进制数来表示的话是什么样的呢？可
能很多人会认为“1的二进制数是00000001，因此-1就是10000001”，
---
## Page 42
第2章数撕是用二进制数表示的
但这个答案是错的，正确答案是11111111。
计算机在做减法运算时，实际上内部是在做加法运算。用加法
运算来实现减法运算，是不是很新奇呢？为此，在表示负数时就需
要使用“二进制的补数”。补数就是用正数来表示负数，很不可思
议吧。
为了获得补数，我们需要将二进制数的各数位的数值全部取反
然后再将结果加1。例如，用8位二进制数表示-1时，只需求得1，
也就是00000001的补数即可。具体来说，就是将各数位的0取反成1，
1取反成0，然后再将取反的结果加1，最后就转化成了11111111
（图2-5）。
1000D000