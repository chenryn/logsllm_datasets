### Per-Application Basis

**Figure 3: Overview of Structure Abstraction Framework**

In the diagram, text labels are associated with the transitions to their left. For example, a label like "http in" indicates an inbound HTTP connection, while "eph" corresponds to an ephemeral port (one that is both not well-known and changes from session to session). The thickness of an arc indicates its relative frequency of transition compared to other arcs in the DFA.

The goal of our structure abstraction framework is to derive a “natural” DFA, which offers several benefits over the exact DFA:

1. **Simplicity**: Reducing the number of states and edges makes the DFA easier to comprehend.
2. **Generalization**: The abstracted DFA can capture a more complete set of possible session types, including some not present in the exact DFA. For instance, the construct `(ftp in|ftp out) (other in|other out)*` captures an infinite set of session types, which cannot be represented in the exact DFA derived from a finite trace.
3. **Highlighting Common Behavior**: Some session types exhibit different modes (e.g., browsing sessions) or instances of individualized or idiosyncratic behavior (e.g., login sessions that spawn many subsequent connections). By weighting commonly seen elements over rare ones, we can highlight tradeoffs between simplicity and capturing rare activity for the analyst.
4. **Minimizing False Positives**: Given the statistical nature of session extraction, the exact DFA may include false aggregations. Abstraction helps weed these out because they tend to appear as isolated, rare structures.

### 5.2 Abstraction Framework

**Figure 3** shows the four steps in our abstraction framework:

1. **Application Categorization**: This semi-automatic step identifies the applications in the trace and categorizes the observed session types. We lack ground truth for identifying applications at the desired granularity, so we use the service associated with the first connection in a session as a proxy for the application type. We extracted a list of service ports by identifying those occurring more frequently than a fixed threshold, \( T_{\text{service}} \) (set to 5). We then manually analyzed this list to determine the associated application using an extensive directory [30] or by inspecting packet payloads when available. With the list of application types, we categorize sessions based on the server port of the first connection.

2. **Exact Abstraction**: This step produces an exact DFA, \( E \), that describes the session structure of an application \( A \) based on the complete set of observed session types, \( ST \). We construct \( E \) from the union of each observed session type, minimizing the DFA using the FSA toolbox [12].

3. **Coverage Phase**: This step (detailed in §5.3) emits a sequence of DFAs \( F_1, F_2, \ldots \) that represent subsets of \( E \) and progressively account for greater coverage (fraction of \( ST \) matched) as we add edges.

4. **Generalization Phase**: This step (detailed in §5.4) applies three generalization rules to the sequence \( F_1, F_2, \ldots \) to introduce commonly useful abstractions, producing a set of generalized DFAs, \( G_1, G_2, \ldots \).

At the end of this process, we present to the analyst a coverage curve that plots the coverage of generalized DFAs against their complexity. The analyst uses this curve to guide the selection of DFAs for inspection to understand the application’s session structure at different levels of abstraction. We discuss this process in §5.5.

### 5.3 Coverage Phase

Our coverage phase aims to extract a set of DFAs that balance simplicity (fewest states/edges) and coverage (capturing most types of observed behavior). This helps in keeping rare or peculiar session instances from obscuring commonly observed patterns and minimizes the effects of false positives in our extraction algorithm. This phase produces a sequence of DFAs \( F_1, F_2, \ldots, F_n \) that increasingly cover the observed set \( ST \).

We define the “coverage metric” of a DFA \( F_i \) with respect to a set \( ST \) as the fraction of session types in \( ST \) accepted by \( F_i \), weighted by the frequency with which the type occurs. The following greedy algorithm produces a sequence of DFAs with increasing coverage metric:

1. Feed every session instance in \( ST \) to \( E \), the exact DFA, accumulating a hit count \( h(e) \) for every edge \( e \in E \).
2. Compute the augmented hit count \( h'(e) \) to capture implicit dependencies among the edges, prioritizing upstream edges over downstream ones.
3. Order edges by decreasing \( h'(e) \); denote this ordering by \( e_1, e_2, \ldots \).
4. Construct DFAs \( F_i \) by taking the union of all edges \( e_1, \ldots, e_i \).

### 5.4 Generalization Phase

In this step, we apply a set of transformations to the coverage DFAs \( F_1, F_2, \ldots \) to obtain a sequence of generalized DFAs \( G_1, G_2, \ldots \). We found three generalizations that worked well across about 40 applications in our trace:

1. **Prefix Rule**: If we observe a session type \( ST_i = (T_i^1, \ldots, T_i^m) \) in \( ST \), then any prefix of this type is also considered a session type. We implement this rule by marking all states of the DFA \( F_i \) as accepting states.

2. **Invert Direction Rule**: This rule is based on the observation that an application session is typically independent of the direction (inbound vs. outbound) of the originating connection. For example, if we observe \( ST_i = (\text{ftp in}, \text{other in}) \), we extend the DFA to also match \( ST_i = (\text{ftp out}, \text{other out}) \).

3. **Counting Rule**: If a DFA \( F_i \) matches \( aBc \) and \( aB^nc \) (for \( n > 1 \)), where \( a \) and \( c \) are individual connection types and \( B \) is a union of one or more connection types, we transform \( F_i \) so that the corresponding \( G_i \) matches \( aB^+c \). Restricting \( n = 2 \) provides satisfactory results.

The order in which we apply these rules affects the generalized DFA \( G_i \), but the sequence Preﬁx Rule, Invert Direction, Counting Rule is idempotent. Thus, we apply the rules in this sequence once and output the result as \( G_i \). These rules have a monotonicity property: if the sequence of DFAs \( F_1, F_2, \ldots \) has increasing coverage metrics, the sequence \( G_1, G_2, \ldots \) retains this property.

### 5.5 Coverage Curves

A coverage curve, such as that shown in Figure 4(A), plots the number of edges \( i \) in the generalized DFA \( G_i \) against \( G_i \)'s coverage metric. Note that although \( F_i \) (the basis for \( G_i \)) retains exactly \( i \) edges, \( G_i \) may have more or fewer than \( i \) edges due to the generalization rules. These rules can simplify the DFA by adding edges (Invert Direction and Counting Rules) or marking certain states as final states (Prefix Rule). Since our DFAs are always minimized, performing the minimization procedure after simplification may decrease the number of edges, leading to a non-monotone nature of the curve, as illustrated by the dip at 8 edges in Figure 4(A).

A knee in the coverage curve marks a point where the coverage metric increases sharply with the addition of a few particular edges. Such knees generally correspond to modes where adding a bit more complexity to the abstraction provides a substantially more comprehensive description. Knees guide the analyst in choosing which DFAs merit scrutiny. Additionally, the coverage curve helps the analyst deal with idiosyncratic sessions and false aggregations, which typically appear towards the far right side of the curve.

### 6. Results

#### 6.1 Parameter Settings

**Session Extraction**: For setting the timing parameters \( T_{\text{aggreg}} \), \( T_{\text{trigger}} \), and \( T_{\text{rate}} \), we were guided by [24, 29]. We verified that for the corresponding values, the arrival process of sessions was Poisson-like for most applications. A few applications, such as NTP, violated this assumption due to being timer-based, but the imprecision of our statistical session extraction test is remedied by our structure abstraction mechanism.

- \( T_{\text{aggreg}} \) (used in the aggregation rule) was set to 100 seconds.
- \( T_{\text{trigger}} \) (maximum duration between the finish time of a session and the arrival time of a new connection) was set to 500 seconds, conservatively, to account for long sessions in FTP and Login sessions.
- \( T_{\text{rate}} \) (time duration over which rate estimates are computed) was set to 3,600 seconds, based on the reported stationarity of arrival rates in [24, 29].
- The threshold used in our statistical test, \( \alpha \), was set to 0.1, based on our calibration of sessions for SMTP, FTP, and two Web services.

**Structure Abstraction**: The parameters used in structure abstraction are relatively easier to set. For the semi-automatic application categorization step, we relied on port numbers to classify connections into applications. We looked at all applications occurring at least 5 times in the 2-week trace (i.e., \( T_{\text{service}} \geq 5 \)).

- The counting rule (inferring general positive closure) is restricted to \( |B| = 2 \) to avoid excessive computational cost.
- We only feed our structure abstraction algorithm session types of length ≤ 10 to prevent the DFA from becoming too complex.

**Role of Analyst**: The analyst uses the coverage curve to select a cutoff coverage fraction and peruses the appropriate DFAs. Knees in the coverage curve make this choice easy, while in cases like HTTP, the presence of a long tail allows the analyst to choose the level of detail to explore.

#### 6.2 Empirically Observed Session Structure

We now examine some of the session structures discovered for the applications in our trace.

**6.2.1 FTP**

**Figure 4** shows the coverage curve (subplot A) for FTP and DFAs representing some knees in this graph in subplots B-G. The coverage curve shows a linear increase until 6 edges, after which the coverage tapers off slowly until about 100 edges (tail not shown).

- **2 Edges**: Captures singleton incoming and outgoing FTP sessions.
- **4 Edges (subplot B)**: Captures sessions with a single data transfer connection in the same direction as the initial control connection.
- **4 Edges (subplot C)**: Captures the pattern \((\text{ftp in}|\text{ftp out})(\text{eph in}|\text{eph out})\), allowing for sessions with a single data transfer in either direction.
- **8 Edges (subplot D)**: Captures incoming (outgoing) FTP sessions with a single data transfer in the opposite direction.
- **Subplot E**: Captures sessions with any number of data transfers in the same direction.
- **10 Edges (subplot F)**: Shows how HTTP connections can occur during FTP sessions, likely due to intermingled access to Web pages with links to FTP URLs.
- **18 Edges (subplot G)**: Captures sessions with any number of FTP or HTTP transfers in either direction, achieving over 99% coverage.

**6.2.2 Timbuktu**

**Figure 5** shows the coverage curve and two pertinent DFAs for Timbuktu, a Mac and Windows remote desktop application. The coverage curve (subplot A) shows a sharp knee in the beginning, gradually tapering off towards the tail.

- **4 Edges (subplot B)**: Reveals that Timbuktu sessions may include some browsing behavior.
- **10 Edges (subplot C)**: Shows that Timbuktu connections can occur in conjunction with AppleTalk file sharing and SSH connections, suggesting that login connections of several kinds tend to occur together.

**6.2.3 HTTP**

HTTP sessions come in various forms. The most common (≈ 99%) are singleton or aggregated sessions reflecting successive retrieval of multiple pages from the same server, which the coverage curve (omitted for space constraints) shows as a very sharp knee early on. However, there is also a long tail accounting for the other 1% of sessions. To illustrate, **Figure 6** presents the HTTP DFA with 30 edges, revealing detailed information about the long tail.