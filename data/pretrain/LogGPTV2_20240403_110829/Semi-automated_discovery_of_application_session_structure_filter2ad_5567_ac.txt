Per-Application Basis
Figure 3: Overview of Structure Abstraction Framework
for example). In the diagram, text labels are associated with the
transitions to their left. A label like http in indicates an inbound
HTTP connection. eph corresponds to an ephemeral port (one that
is both not well-known and changes from session to session). Also,
recall that the thickness of an arc indicates its relative frequency of
transition in comparison to all the other arcs in the DFA.
The goal of our structure abstraction framework is to derive such
a “natural” DFA since it yields a number of beneﬁts over the exact
DFA:
Simplicity: The reduction in number of states and edges makes
the DFA easier to comprehend.
set of possible
Generalization: The abstracted DFA can capture a more
complete
including some not
present
in Figure 2 the construct
(f tp in|f tp out) (other in|other out)∗ captures an inﬁnite set
of session types; the “*” construct cannot occur in the exact DFA
since it is derived from a ﬁnite trace.
For example,
structures,
in ST.
Highlighting Common Behavior: Some types of sessions can
exhibit quite different modes (e.g., browsing sessions), and/or in-
stances of individualized or idiosyncratic behavior (e.g., login ses-
sions that spawn many subsequent connections). By constructing
abstractions that weight commonly seen elements over rare ones,
we can highlight for the analyst tradeoffs between simplicity and
capturing rare activity.
Minimizing False Positives: Given the statistical nature of our
session extraction, the exact DFA may include false aggregations.
Abstraction can help weed these out because they will tend to ap-
pear as isolated, rare structures, similar to the last item above.
5.2 Abstraction Framework
Figure 3 shows the four steps in our abstraction framework:
Application Categorization. This semi-automatic step identi-
ﬁes the applications in the trace and uses these to categorize the
observed session types. The remaining steps operate on a per-
application basis.
We lack ground truth for identifying the applications present in
our trace at the granularity we desire, namely notions like “user is
processing their email.” Instead, we use the service associated with
the ﬁrst connection in a session as a proxy for the application type.
To do so, we extracted a list of service ports by identifying those
occurring in the trace more often than a ﬁxed threshold, Tservice
(which we set to 5). We then manually analyzed this list to deter-
mine the associated application via either entries in an extensive
directory [30], or, in ambiguous cases, by inspecting packet pay-
loads when available. Armed with the list of types of applications,
we then categorize sessions based on the server port of the ﬁrst
connection in that session.
Exact Abstraction. This step produces an exact DFA, E, that
describes the session structure of an application A based on the
complete set of session types, ST observed for A. We construct E
from the union of each of the observed session types, minimizing
the DFA using the FSA toolbox [12].
Coverage Phase. This step (detailed in §5.3) emits a sequence
of DFAs F1, F2, . . . that represent subsets of E that progressively
(and greedily) account for greater and greater coverage (fraction of
the set ST matched) as we add edges.
Generalization Phase. This step (detailed in §5.4) applies three
generalization rules to the sequence F1, F2, . . . that introduce com-
monly useful abstractions, producing a set of generalized DFAs,
G1, G2, . . . .
At the end of this process, we present to the analyst a cover-
age curve that plots the coverage of generalized DFAs against their
complexity. The analyst then uses this curve as guidance regard-
ing which DFAs to inspect in order to understand the application’s
session structure at different levels of abstraction. We discuss this
process in §5.5.
5.3 Coverage Phase
Our coverage phase aims to extract a set of DFAs that cap-
ture subsets of the observed session behavior that best trade off
simplicity-of-expression (fewest states/edges) for coverage (captur-
ing most types of observed behavior). As noted above, this helps
both with keeping rare or peculiar session instances from obscur-
ing the commonly observed patterns, and for minimizing the effects
of false positives in our extraction algorithm (since these will tend
to manifest as rare, peculiar sessions). This phase produces a se-
quence of DFAs F1, F2, . . . , Fn that “cover” the observed set ST to
increasing extents. We formulate the notion of a DFA Fi’s “cover-
age metric” with respect to a set ST as the fraction of session types
in ST accepted by Fi, weighted by the frequency with which the
type occurs. Given this deﬁnition, the following greedy algorithm
produces a sequence of DFAs with increasing coverage metric.
We ﬁrst feed every session instance in ST to E, the exact DFA,
accumulating a hit count h(e) for every edge e ∈ E, i.e., the
number of traversals of e. Next, for each edge e we compute the
augmented hit count, h(cid:2)(e), as
h(e(cid:2)). The purpose
of this augmented hit count is to capture the implicit dependen-
cies among the edges in the DFA. The overall idea is to priori-
tize “upstream” edges more than “downstream” edges. We then or-
der edges by decreasing h(cid:2)(e); denote this ordering by e1, e2, . . . .
Finally, we construct DFAs Fi by taking the union of all edges
e1, . . . , ei.
e’ reachable from e
P
5.4 Generalization Phase
In this step we subject the coverage DFAs, F1, F2, . . . , to a
set of transformations to obtain a sequence of generalized DFAs,
G1, G2, . . . . We found 3 generalizations that worked well across
about 40 applications in our trace:
Preﬁx Rule. If we observe a session type STi = (T i
m)
in ST, then consider any preﬁx of this type also a session type for
the application. We implement this rule by marking all states of the
DFA Fi as accepting states.
1, . . . , T i
Invert Direction Rule. We base this rule on the observation
that an application session is typically independent of the direction
(inbound vs. outbound) of the originating connection. For example,
if we observe STi = (f tp in, other in), then we extend the DFA
to also match STi = (f tp out, other out).
Counting Rule.
If a DFA Fi matches aBc and aBnc, (for
n > 1), where a and c are individual connection types and B is a
union of one-or-more connection types (e.g., other in|other out),
then we transform Fi so that the corresponding Gi matches aB+c.
Note that in §6 we ﬁnd that restricting n = 2 provides satisfactory
results.
Finally, while the order in which we apply these rules affects the
generalized DFA Gi, it can be shown that the following sequence
is idempotent: Preﬁx Rule, Invert Direction, Counting Rule. Thus,
we simply apply the rules in this sequence once and output the re-
sult as Gi. Note that these rules have an appealing monotonicity
property: if the sequence of DFAs F1, F2, . . . has increasing cov-
erage metrics, the sequence G1, G2, . . . retains this property.
In our experiments, we chose to apply all of these rules before
presenting the DFA to the analyst.
(An alternative would be to
leave the choice of which rules to apply to the analyst.) The Pre-
ﬁx Rule intuitively holds since any session may terminate mid-way
due to various error conditions. In our trace, we found only one
case where the Preﬁx Rule not hold: one mail server always orig-
inated exactly two reverse Ident connections in response to an in-
coming SMTP connection. The Invert Direction rule is sometimes
incorrect in the sense that a particular session structure visible in
sessions originated from inside (outside) may not apply for ses-
sions originated in the other direction. We however chose to apply
it since the weights included on the edges do reﬂect this fact to
the analyst. Also, the session structure for most applications in our
trace also conform to the Counting Rule (the mail server we alluded
to before does not conform to this rule).
5.5 Coverage Curves
A coverage curve, such as that shown in Figure 4(A), plots the
number of edges i in the generalized DFA Gi against Gi’s cover-
age metric. Note that though we obtain Fi (the basis for Gi) by
retaining exactly i edges E, Gi may have more or fewer than i
edges. This is because our generalization rules can simplify the
structure of the DFA by adding edges (Invert Direction and Count-
ing Rules) or marking certain states as ﬁnal states (Preﬁx Rule).
Since our DFAs are always minimized at every step in the process,
performing the minimization procedure, after such a simpliﬁcation
of structure, may decrease the number of edges. This phenomenon
is what leads to the non-monotone nature of the curve, as illustrated
in the dip at 8 edges in Figure 4(A).
A knee in the coverage curve marks a point where the cover-
age metric increases sharply with the addition of a few particular
edges. Such knees generally correspond to modes: points where
adding a bit more complexity to the abstraction provides a substan-
tially more comprehensive description. Such knees guide the ana-
lyst in choosing which DFAs merit scrutiny. In addition, the cover-
age curve helps the analyst deal with the problems of idiosyncratic
sessions and false aggregations. Both of these typically appear to-
wards the far right side of the coverage curve.
6. RESULTS
In this section, we describe the evaluation of our scheme using
4 weeks of traces collected at the border of the Lawrence Berkeley
National Laboratory, a site with about 8,000 hosts that on average
participated in 2,700,000 connections each day. We used the ﬁrst
2 weeks for calibration and guiding the design of heuristics in our
scheme, while we present results obtained by using our calibrated
scheme over the last 2 weeks.
6.1 Parameter Settings
Session Extraction. For setting the timing parameters Taggreg,
Ttrigger, and Trate, we were guided by [24, 29]. We veriﬁed that
for the corresponding values, for most applications the arrival pro-
cess of sessions was Poisson-like (see [16] for detailed results). A
few applications, such as ntp, violated Poisson grossly because they
are timer-based, but in general, the imprecision of our statistical
session extraction test is remedied by the way in which our struc-
ture abstraction mechanism trims rarely exhibited behavior.
We set Taggreg (used in the aggregation rule) to 100 sec. We also
experimented with a few other values (200 and 500 sec) suggested
in [24, 29], but in the range we experimented with, we found that
our ﬁnal session descriptors did not vary much.
We set Ttrigger (the maximum duration between the ﬁnish time
of a session and the arrival time of a new connection) to 500 sec. In
general, for most application sessions, Ttrigger need be no greater
than 100 sec. However, a few applications like FTP and Login
sessions, sometimes had long sessions in our trace. So, we conser-
vatively set Ttrigger to be 500 sec based on duration of sessions
we observed in our trace. Note that the number of false positives
in our mechanism is upper-bounded by the parameter α (irrespec-
tive of the value of Ttrigger). Thus, despite conservatively setting
Ttrigger to 500 sec, the false positive performance is still under the
threshold α.
We set Trate (the time duration over which rate estimates are
computed) to 3,600 sec, the value over which the arrival rates were
reported to be stationary in [24, 29].
We set the threshold used in our statistical test, α, to 0.1, based
on our calibration of sessions for four applications. We ﬁrst ex-
tracted, using our partial a priori knowledge of the session structure
for SMTP, FTP, and two Web services (a Web proxy service, and
an HTTP interface to a service running on 9303/tcp), all sessions
belonging to these applications in the trace. We then examined how
many of the session types implied by these legitimate sessions were
found by our session extraction test. Except for FTP, it found all of
them. For FTP, extraction generally missed long sessions consist-
ing of several data-transfer connections, but such sessions have a
very simple structure of the form (ftp) (ftp-data)*. Missing these
is not a serious concern when inferring session descriptors, since
our structure abstraction using its generalization rules can “ﬁll in
the gaps”.
Structure Abstraction. The parameters used in structure ab-
straction are relatively easier to set. Regarding the semi-automatic
application categorization step, since our packet captures did not in-
clude the entire packet, we had to rely on port numbers to classify
connections into applications. Once this classiﬁcation was done,
we looked at all applications occurring at least 5 times in the 2-
week trace (i.e., Tservice ≥ 5).
Apart from this parameter, there are two details worth noting.
In our na¨ıve implementation, the counting rule (inferring general
positive closure) is too expensive to implement for high values of
|B| (the size of the repeating unit). Since the number of states s
sometimes exceeds 100, we examined the impact of using much
smaller values. We found that simply restricting the rule to the case
of |B| = 2 allows us to correctly infer positive closure in each in-
stance where we know a priori that it makes sense. In addition,
we only feed our structure abstraction algorithm session types of
length ≤ 10—otherwise, the number of states in the DFA can ex-
plode due to the exponential growth in the number of session types
with increasing length. One example of such a long session is an
FTP session where a control connection is followed by, say, 15 data
connections. We ﬁnd that omitting such sessions does not result in
any loss of information in the inferred session descriptors, since
our generalization rules can usually capture such session structures
anyway (in this case, by allowing any number of data connections).
Role of Analyst. In obtaining the results below, the role of the
analyst is to ﬁrst use the coverage curve in order to select a cut-
off coverage fraction, and then peruse the appropriate DFAs corre-
sponding to that fraction. In some cases, the existence of knees in
the coverage curve makes this choice easy, while in others (such
as HTTP), the presence of a long tail implies that the analyst can
choose as much detail to “explore” as much of the tail as he desires.
6.2 Empirically Observed Session Structure
We now turn to examining some of the session structures discov-
ered for the applications in our trace. For session structures that can
be veriﬁed by using protocol speciﬁcations, we found that our ses-
sion descriptions generally capture all the behavior implied by the
speciﬁcation with no false positives. Unfortunately, many session
structures arise due to empirical behavior, and for those, we can
only assess their plausibility. Finally, some sessions arise for truly
anomalous reasons, such as misconﬁgurations or attacks. These
last will typically be few in number, and will not appear in the DFA
unless the analyst asks for very high coverage. However, they are
interesting in demonstrating the value of having a general tool that
can detect causality.
6.2.1 FTP
Figure 4 shows the coverage curve (subplot A) for FTP , and
DFAs representing some knees in this graph in subplots B-G. We
use this as our primary example of the possibilities of our session
structure discovery.
The coverage curve shows the number of edges in the general-
ized DFA Gi versus the coverage provided by Gi. We see a linear
increase until 6 edges, after which the coverage tapers off slowly
until about 100 edges (tail not shown in the ﬁgure). We now ex-
amine the various knees in this curve, showing that they usually
correspond to some feature of the underlying sessions. Note that
we describe the generalized DFAs corresponding to the knees in
this graph as ordered by the number of edges included from the
exact DFA; this does not necessarily correspond to ordering them
by the number of edges in the DFA itself, since the generalization
procedure can sometimes simplify the DFA considerably.
The ﬁrst noteworthy point occurs at 2 edges. This is simply
the DFA (not shown) that captures singleton incoming and out-
going FTP sessions. The second point occurs at 4 edges (sub-
plot B), corresponding to the DFA capturing sessions with a sin-
gle data transfer connection in the same direction as the initial
control connection. Subplot C shows the next DFA of interest,
which also has 4 edges (the plot shows the highest coverage ex-
hibited by a DFA of a given number of edges; so the coverage
in the plot for 4 edges corresponds to this DFA). This captures
the pattern (f tp in|f tp out)(eph in|eph out), which allows for
sessions with a single data transfer in either direction. Subplot D
shows the next interesting DFA, with 8 edges, which also captures
incoming (outgoing) FTP sessions with a single data transfer in the
opposite direction. The DFA in Subplot E includes more edges
from the exact DFA, but has fewer actual edges due to generaliza-
tion of the structure of the DFA, capturing sessions with any num-
ber of data transfers in the same direction. The DFA in Subplot F
(10 edges) shows how HTTP connections can occur during FTP
sessions, likely due to intermingled access to Web pages with links
to FTP URLs. Finally, another knee (not particularly visible in the
coverage curve) occurs at 18 edges, as shown in subplot G. This
DFA captures sessions with any number of FTP or HTTP transfers
in either direction. This DFA has over 99% coverage, implying
that it “explains” nearly all the sessions found by session extrac-
tion, and, further, captures all the characteristics of the FTP proto-
col speciﬁcation.
6.2.2 Timbuktu
Figure 5 shows the coverage curve and two pertinent DFAs for
Timbuktu [36], a Mac and Windows remote desktop application.
The coverage curve (subplot A) shows a sharp knee in the begin-
ning, gradually tapering off towards the tail. The knee corresponds
to singletons, which comprise > 90% of sessions. Although the tail
accounts for < 10% of the remaining sessions, it reveals interesting
details. Subplot B shows the DFA with 4 edges, revealing that Tim-
buktu sessions may include some browsing behavior as well. Sub-
plot C shows the DFA with 10 edges. The associated ephemeral
ports likely correspond to dynamic ports negotiated in the main
channel (which corresponds to the Timbuktu listening port). We
also see browsing behavior reﬂected by associated HTTP connec-
tions, and that Timbuktu connections can occur in conjunction with
the AppleTalk ﬁle sharing protocol, presumably due to users per-
forming ﬁle transfers along with remote control software. Finally,
SSH connections also occur in such sessions, suggesting that login
connections of several kinds tend to occur together.
6.2.3 HTTP
HTTP sessions come in a number of variations. By far, the most
common (≈ 99%) are singleton or aggregated sessions that reﬂect
successive retrieval of multiple pages from the same server, which
the coverage curve (omitted for space constraints) shows as a very
sharp knee very early on. However, there is also a long tail clearly
visible in the coverage curve, accounting for the other 1% of ses-
sions. To illustrate the useful information that may be gleaned from
this tail, Figure 6 presents the HTTP DFA with 30 edges, though