ok: [web1]
TASK [ensure apache is at the latest version] *****************************
ok: [web1]
TASK [ensure apache is running] *******************************************
ok: [web1]
PLAY RECAP ****************************************************************
web1: ok=3 changed=0 unreachable=0 failed=0
```
请注意，输出略有不同。这一次，该命令没有改变服务器上的任何内容。这是因为每个 Ansible 模块都被设计成幂等的。换句话说，在一个序列中多次执行同一个模块应该与只执行一次具有相同的效果。
实现幂等性的最简单的方法是总是首先检查任务是否还没有被执行，并且只有当它还没有被执行时才执行它。幂等性是一个强大的特性，我们应该总是这样写我们的可翻译任务。
如果所有的任务都是幂等的，那么我们可以任意多次执行它们。在这种情况下，我们可以把剧本看作是对远程机器期望状态的描述。然后，`ansible-playbook`命令负责使机器(或机器组)进入该状态。
# 经理人
只有在其他任务发生变化时，才能执行某些操作。例如，假设您将配置文件复制到远程机器，并且只有当配置文件发生变化时，Apache 服务器才应该重新启动。如何处理这种情况？
例如，假设您将配置文件复制到远程机器，并且只有当配置文件发生变化时，Apache 服务器才应该重新启动。如何处理这种情况？
Ansible 提供了一个面向事件的机制来通知变更。为了使用它，我们需要知道两个关键词:
*   `handlers`:指定通知时执行的任务
*   `notify`:指定应该执行的处理程序
让我们看一个例子，说明我们如何将配置复制到服务器，并仅在配置发生变化时重新启动 Apache。
```
tasks:
- name: copy configuration
  copy:
    src: foo.conf
    dest: /etc/foo.conf
  notify:
  - restart apache
handlers:
- name: restart apache
  service:
    name: apache2
    state: restarted
```
现在，我们可以创建`foo.conf`文件并运行`ansible-playbook`命令。
```
$ touch foo.conf
$ ansible-playbook playbook.yml
...
TASK [copy configuration] ************************************************
changed: [web1]
RUNNING HANDLER [restart apache] *****************************************
changed: [web1]
PLAY RECAP ***************************************************************
web1: ok=5 changed=2 unreachable=0 failed=0   
```
Handlers are executed always at the end of the play and only once, even if triggered by multiple tasks.
Ansible 复制了文件并重新启动了 Apache 服务器。重要的是要明白，如果我们再次运行该命令，将不会发生任何事情。但是，如果我们更改`foo.conf`文件的内容，然后运行`ansible-playbook`命令，文件将被再次复制(Apache 服务器将被重新启动)。
```
$ echo "something" > foo.conf
$ ansible-playbook playbook.yml
...
TASK [copy configuration] *************************************************
changed: [web1]
RUNNING HANDLER [restart apache] ******************************************
changed: [web1]
PLAY RECAP ****************************************************************
web1: ok=5 changed=2 unreachable=0 failed=0   
```
我们使用了`copy`模块，它足够智能，可以检测文件是否已经更改，然后在这种情况下，在服务器上进行更改。
There is also a publish-subscribe mechanism in Ansible. Using it means assigning a topic to many handlers. Then, a task notifies the topic to execute all related handlers. You can read more about it at: [http://docs.ansible.com/ansible/playbooks_intro.html](http://docs.ansible.com/ansible/playbooks_intro.html).
# 变量
虽然 Ansible 自动化使多台主机的操作相同且可重复，但服务器可能需要一些差异是不可避免的。例如，考虑应用端口号。根据机器的不同，可能会有所不同。幸运的是，Ansible 提供了变量，这是处理服务器差异的好机制。让我们创建一个新的剧本并定义一个变量。
例如，考虑应用端口号。根据机器的不同，可能会有所不同。幸运的是，Ansible 提供了变量，这是处理服务器差异的好机制。让我们创建一个新的剧本并定义一个变量。
```
---
- hosts: web1
  vars:
    http_port: 8080
```
配置用值`8080`定义`http_port`变量。现在，我们可以使用 Jinja2 语法来使用它。
```
tasks:
- name: print port number
  debug:
    msg: "Port number: {{http_port}}"
```
The Jinja2 language allows doing way more than just getting a variable. We can use it to create conditions, loops, and many more. You can find more details on the Jinja page at: [http://jinja.pocoo.org/](http://jinja.pocoo.org/).
`debug`模块在执行时打印消息。如果我们运行`ansible-playbook`命令，我们可以看到变量的用法。
```
$ ansible-playbook playbook.yml
...
TASK [print port number] **************************************************
ok: [web1] => {
 "msg": "Port number: 8080"
}  
```
Variables can also be defined in the inventory filing using the `[group_name:vars]` section. You can read more about it at: [http://docs.ansible.com/ansible/intro_inventory.html#host-variables](http://docs.ansible.com/ansible/intro_inventory.html#host-variables).
除了用户定义的变量，还有预定义的自动变量。例如，`hostvars`变量存储了一个映射，该映射包含清单中所有主机的相关信息。使用 Jinja2 语法，我们可以迭代并打印清单中所有主机的 IP 地址。
```
---
- hosts: web1
  tasks:
  - name: print IP address
    debug:
      msg: "{% for host in groups['all'] %} {{
              hostvars[host]['ansible_host'] }} {% endfor %}"
```
然后，我们可以执行`ansible-playbook`命令。
```
$ ansible-playbook playbook.yml
...
TASK [print IP address] **************************************************
ok: [web1] => {
 "msg": " 192.168.0.241  192.168.0.242 "
}
```
请注意，使用 Jinja2 语言，我们可以在 Ansible 剧本文件中指定流控制操作。
An alternative to the Jinja2 templating language, for the conditionals and loops, is to use the Ansible built-in keywords: `when` and `with_items`. You can read more about it at: [http://docs.ansible.com/ansible/playbooks_conditionals.html](http://docs.ansible.com/ansible/playbooks_conditionals.html).
# 角色
我们可以使用 Ansible 行动手册在远程服务器上安装任何工具。想象一下，我们想要一个带有 MySQL 的服务器。我们可以很容易地准备一份类似于`apache2`套餐的剧本。然而，如果你仔细想想，使用 MySQL 的服务器是很常见的情况，而且肯定有人已经为它准备了剧本，所以也许我们可以重用它？易变角色和易变星系来了。
# 理解角色
Ansible 角色是一个结构良好的行动手册部分，准备包含在行动手册中。角色是独立的单元，总是具有以下目录结构:
```
templates/
tasks/
handlers/
vars/
defaults/
meta/
```
You can read more about roles and what each directory means on the official Ansible page at: [http://docs.ansible.com/ansible/playbooks_roles.html](http://docs.ansible.com/ansible/playbooks_roles.html).
在每个目录中，我们可以定义`main.yml`文件，该文件包含可以包含在`playbook.yml`文件中的剧本部分。继续 MySQL 的案例，GitHub 上定义了一个角色:[https://github.com/geerlingguy/ansible-role-mysql](https://github.com/geerlingguy/ansible-role-mysql)。该存储库包含可以在我们的行动手册中使用的任务模板。让我们看一下`tasks/main.yml`文件的一部分，它安装了`mysql`包。
```
...
- name: Ensure MySQL Python libraries are installed.
  apt: "name=python-mysqldb state=installed"
- name: Ensure MySQL packages are installed.
  apt: "name={{ item }} state=installed"
  with_items: "{{ mysql_packages }}"
  register: deb_mysql_install_packages
...
```
这只是`tasks/main.yml`文件中定义的任务之一。其他人负责 MySQL 配置。
The `with_items` keyword is used to create a loop over all the items. The `when` keyword means that the task is executed only under a certain condition.
如果我们使用这个角色，那么为了在服务器上安装 MySQL，创建以下 playbook.yml 就足够了:
```
---
- hosts: all
  become: yes
  become_method: sudo
  roles:
  - role: geerlingguy.mysql
    become: yes
```
这种配置使用`geerlingguy.mysql`角色将 MySQL 数据库安装到所有服务器上。
# 易逝星系
ansi ble Galaxy to ansi ble Docker Hub 对于 Docker 来说是什么——它存储公共角色，以便其他人可以重用它们。您可以在 Ansible Galaxy 页面浏览可用角色，网址为:[https://galaxy.ansible.com/](https://galaxy.ansible.com/)。
要从 Ansible Galaxy 安装角色，我们可以使用`ansible-galaxy`命令。
```
$ ansible-galaxy install username.role_name
```
该命令自动下载角色。在 MySQL 示例中，我们可以通过执行以下命令来下载角色:
```
$ ansible-galaxy install geerlingguy.mysql
```
该命令下载`mysql`角色，以后可以在剧本文件中使用。
If you need to install a lot of roles at the same time, you can define them in the `requirements.yml` file and use `ansible-galaxy install -r requirements.yml`. Read more about that approach and about Ansible Galaxy at: [http://docs.ansible.com/ansible/galaxy.html](http://docs.ansible.com/ansible/galaxy.html).
# 使用 Ansible 部署
我们已经介绍了 Ansible 最基本的特性。现在让我们暂时忘记 Docker，并使用 Ansible 配置完整的部署步骤。我们将在一台服务器上运行计算器服务，在第二台服务器上运行 Redis 服务。
# 正在安装 Redis
我们可以在新剧本中指定一出戏。让我们用以下内容创建`playbook.yml`文件:
```
---
- hosts: web1
  become: yes
  become_method: sudo
  tasks:
  - name: install Redis
    apt:
      name: redis-server
      state: present
  - name: start Redis
    service:
      name: redis-server
      state: started
  - name: copy Redis configuration
    copy:
      src: redis.conf
      dest: /etc/redis/redis.conf
    notify: restart Redis
  handlers:
  - name: restart Redis
    service:
      name: redis-server