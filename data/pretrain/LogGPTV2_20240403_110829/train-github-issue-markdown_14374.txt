My issue is about zpk2sos conversion I presume.  
The power of the numerators of second order sections are evaluated not
correctly
#### Reproducing code example:
    Sample code to reproduce the problem
    Jupyter QtConsole 5.0.3
    Python 3.9.5 (default, May  9 2021, 14:00:28) 
    Type 'copyright', 'credits' or 'license' for more information
    IPython 7.23.1 -- An enhanced Interactive Python. Type '?' for help.
    import math
    from scipy import signal
    import sympy
    s = sympy.Symbol('s')
    filterOrder = 3
    passBand = list(map(lambda x: x*2*math.pi, [1000, 7000]))
    filterType = 'bandpass'
    z,p,k = signal.butter( filterOrder, passBand, filterType, analog=True, output='zpk')
    b,a = signal.zpk2tf(z,p,k)
    sos = signal.zpk2sos(z,p,k)
    print("Transfer Function from z,p,k")
    n,d = signal.zpk2tf(z,p,k)
    print("H(s) =", sympy.Poly(n,s)/sympy.Poly(d,s))
    print()
    print("Transfer Function from sos")
    n1,d1 = signal.sos2tf(sos)
    print("H(s) =", sympy.Poly(n1,s)/sympy.Poly(d1,s))
    Transfer Function from z,p,k
    H(s) = 53578846103558.1*s**3/(1.0*s**6 + 75398.223686155*s**5 + 3671492837.20524*s**4 + 95251281961881.0*s**3 + 1.01461309221017e+18*s**2 + 5.75806638891985e+21*s + 2.11044155773651e+25)
    Transfer Function from sos
    H(s) = 53578846103558.1*s**6/(1.0*s**6 + 75398.223686155*s**5 + 3671492837.20524*s**4 + 95251281961881.0*s**3 + 1.01461309221017e+18*s**2 + 5.75806638891985e+21*s + 2.11044155773651e+25)
It can be seen that the numerators are different in the power of s.
#### Scipy/Numpy/Python version information:
1.6.3 1.20.3 sys.version_info(major=3, minor=9, micro=5, releaselevel='final',
serial=0)