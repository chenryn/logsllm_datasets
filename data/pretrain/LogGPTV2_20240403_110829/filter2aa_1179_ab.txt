K
H
Check 
& 
Decrypt
PRNG
LBC
LBC
H2’
M’
H2’’
M’’
LBC
HASH
H1’
H1’’
Fig. 1. The operations required by the “swap” method
ordinary counter-mode cipher, he might alter a speciﬁc byte in the payload of
a message entering the MIX-net. Since many of the outgoing messages will be
in part predictable (either entirely plaintext, or with predictable PGP header
material), the adversary can later observe messages exiting the MIX-net and
look for payloads that have a corresponding anomaly at that byte.
We use a large-block cipher as described in the previous section to minimize
the amount of information an adversary can learn from tagging. If he tags a
message leaving Alice, the payload will be entirely random when it reaches Bob.
Thus, an adversary who tags a message can at worst turn the corresponding
payload into trash.
We brieﬂy considered introducing cover-trash to frustrate these tagging at-
tacks; but that problem is as complex as the dummy traﬃc problem [6]. Instead,
we use the decryption-by-hash-of-payload step at the crossover point to prevent
the attacker from learning information from tagging attacks. Speciﬁcally, our
solution falls into several cases:
– Forward messages: if the message is tagged during the ﬁrst leg, the second
header is unrecoverable, and so the adversary cannot learn the intended
destination of the message. If the message is tagged during the second leg,
then the ﬁrst leg has already provided anonymity, and so the adversary
cannot learn the sender.
– Direct reply messages: since the decryption algorithm provides secrecy equiv-
alent to encryption, the eﬀect is similar to encrypting the payload at each
7
step along a reply block. Only the recipient can learn, after peeling oﬀ all lay-
ers, whether the message has been tagged. Thus tagging attacks are useless
against reply messages.
– Anonymized reply messages: as with forward messages, if the ﬁrst leg is
tagged the second header is unrecoverable — so an adversary will never
learn that the message was addressed to a reply block. And as with direct
reply messages, only the recipient can learn if the second leg is tagged.
While direct reply messages do not need a crossover point in the path (the
adversary can never observe his tag), forward messages still need a crossover
point to prevent end-to-end tagging. But since the ﬁrst leg either provides suf-
ﬁcient anonymity or destroys the information about the second leg, the second
leg in a forward message can be very short. At the extreme, the ﬁrst hop in the
second header could directly specify the message recipient. However, the choice
of crossover point can still reveal information about the intended recipient,2 and
so we recommend that the second leg be at least a few hops long.
No MIX except the crossover point can distinguish forward messages from
replies — even the crossover point cannot be sure whether it is processing a
reply or forward message, but it may be able to guess that crossover points are
more frequent on forward paths than direct replies or anonymized reply paths.
3.5
Multiple-message tagging attacks
The above design is still vulnerable to a subtle and dangerous attack. If Alice
sends a group of messages along the same path, the adversary can tag some of
those message as they leave Alice, recognize the pattern (number and timing of
tagged and untagged messages) at the crossover point, and observe where the
untagged ones go. With some assumptions about our adversary, we can reduce
this attack to a traﬃc conﬁrmation attack we’re already willing to accept: when
Alice sends a bunch of messages, the adversary can count them and look for the
pattern later. He can also drop some of them and look for resulting patterns.
The adversary can only recognize a tag if he happens to own the crossover
point that Alice chooses. Therefore, Alice picks k crossover points for her mes-
sages;3 to match a tag signature with certainty an adversary would have to own
all k crossover points. (And even then, it seems harder as the subsets of her
messages would overlap with subsets of messages from other senders.)
The key here is that when the adversary doesn’t own a given crossover point,
tagging messages destined for that crossover is equivalent to dropping them. The
crossover point in question simply doesn’t deliver the message to the second leg.
2 For instance, some MIXes may only allow outgoing mail to local addresses; if such a
node gets a crossover message that has been trashed, it might guess that the recipient
is one of the local addresses.
3 We can prevent the adversary from using divide-and-conquer on Alice’s groupings
if Alice uses a hybrid path starting with a short cascade — so even if the adversary
tags a subset of the messages he doesn’t know (unless he owns the whole cascade)
the groupings of tagged messages.
8
Therefore, if the adversary doesn’t own most of the crossover points that Alice
chooses, a successful multiple-message tagging attack seems infeasible. We leave
a security analysis of the multiple-paths idea to future work; but see Section 7.
4
Related design decisions
4.1
Link encryption and what it gets us
Unlike remailer Types I and II that used SMTP [36] (i.e. ordinary Internet e-
mail) as their underlying transport mechanism, Mixminion clients and nodes
communicate using a forward secure encrypted channel based on TLS [13]. TLS
allows the establishment of an encrypted tunnel using ephemeral Diﬃe-Hellman
keys. In order to guarantee that the receiving end is the one intended by the
creator of the anonymous message, the receiving node can sign the ephemeral
key. As soon as a session key has been established, the parties destroy their
Diﬃe-Hellman keys and begin sending messages through the tunnel. After each
message, the parties perform a standard key update operation to generate a fresh
key, and delete the old key material. Key updates don’t require any asymmetric
encryption techniques, so they are relatively fast.
The purpose of link encryption is to provide forward secrecy: after the keys
have been deleted, not even the nodes that exchange messages can decrypt or
recognize messages that might have been intercepted on the links. This makes it
impossible to comply with decryption notices of past traﬃc that might be served
in some jurisdictions. Even if an attacker manages to get hold of the session key
at a particular point they would have to observe all subsequent traﬃc to be able
to update their key appropriately.
The encrypted channel oﬀers only limited protection against traﬃc analysis.
Encrypted links between honest nodes prevent an adversary from recognizing
even his own messages; but without link padding, he can still measure how
much traﬃc is being transmitted.
As a fringe beneﬁt, using a separate link protocol makes it easier to deploy
relay-only MIXes — such nodes simply omit SMTP support. (See Section 4.2
below.)
4.2
Message types and delivery modules
Once a Mixminion packet reaches the ﬁnal MIX in its path, it must either be
delivered to its intended recipient, dropped if it is an intra-network dummy
message, or processed further if it is a remixed Type II packet. In order to support
diﬀerent kinds of delivery, the header includes a type code for the action to be
taken to deliver the message. A few types — such as ‘dummy’, ‘SMTP’, and
‘local delivery’ — are speciﬁed as a part of the Mixminion standard. Others may
be added by future extensions, to implement abuse-resistant exit policies (see
Section 4.3), to administer nymservers (see Section 6), to publish anonymously
to Usenet, to relay messages to older remailers, or to support other protocols.
9
Nearly all delivery methods require additional information beyond the mes-
sage type and its payload. The SMTP module, for example, requires a mailbox.4
This information is placed in a variable-length annex to the ﬁnal subheader.
The types each MIX supports are described in a capability block, which also
includes the MIX’s address, long-term (signing) public key, short-term public
key (for use in header encryption), remixing capability, and batching strategy.
MIXes sign these capability blocks and publish them on directory servers (see
Section 5). Clients download this information from the directory servers.
The possibility of multiple delivery methods doesn’t come free: their presence
may fragment the anonymity set. For example, if there were ﬁve ways to send
an SMTP message to Bob, an attacker could partition Bob’s incoming mail by
guessing that one of those ways is Alice’s favorite. An active attacker could
even lure users into using a compromised exit node by advertising that node as
supporting a rare but desirable delivery method.
We claim that these attacks do not provide an argument against extensibility
per se, but rather argue against the proliferation of redundant extensions, and
against the use of rare extensions.
4.3
Exit policies and abuse
One important entry in a node’s capability block is its exit policy. Exit abuse is
a serious barrier to wide-scale remailer deployment — rare indeed is the network
administrator tolerant of machines that potentially deliver hate mail.
On one end of the spectrum are open exit nodes that will deliver anywhere;
on the other end are middleman nodes that only relay traﬃc to other remailer
nodes and private exit nodes that only deliver locally. More generally, nodes can
set individual exit policies to declare which traﬃc they will let exit from them,
such as traﬃc for local users or other authenticated traﬃc [41].
Preventing abuse of open exit nodes is an unsolved problem. If receiving mail
is opt-in, an abuser can forge an opt-in request from his victim. Indeed, requiring
recipients to declare their interest in receiving anonymous mail is risky — human
rights activists in Guatemala cannot both sign up to receive anonymous mail and
also retain plausible deniability.5 Similarly, if receiving mail is opt-out, an abuser
can deny service by forging an opt-out request from a legitimate user. We might
instead keep the mail at the exit node and send a note to the recipient telling
them how to collect their mail; but this increases server liability by storing
messages (see Section 6 below), and also doesn’t really solve the problem.
4 A mailbox is the canonical form of the “user@domain” part of an e-mail address.
Mixminion uses only mailboxes in the protocol, because the display name and com-
ment parts of an e-mail address could potentially be diﬀerent for senders who have
obtained an address from diﬀerent sources, leading to smaller anonymity sets.
5 Compare with the 1965 U.S. Supreme Court case Lamont v. Postmaster General
(381 U.S. 301), where the Post Oﬃce would detain mail it deemed to be ‘communist
political propaganda’ and instead send a form to the addressee telling him to send
back the signed form if he wanted to receive such mail. The government maintained
a list of citizens who had ﬁlled out these forms.
10
Of course, a mixture of open and restricted exit nodes will allow the most
ﬂexibility for volunteers running servers. But while a large number of middleman
nodes is useful to provide a large and robust network, the small number of
exit nodes still simpliﬁes traﬃc conﬁrmation (the adversary observes both a
suspected user and the network’s exit nodes and looks for timing or packet
correlations). The number of available open exit nodes remains a limiting security
parameter for the remailer network.
4.4
Replay prevention, message expiration, and key rotation
Mixmaster oﬀers rudimentary replay prevention by keeping a list of recent mes-
sage IDs. To keep the list from getting too large, it expires entries after a server-
conﬁgurable amount of time. But if an adversary records the input and output
batches of a MIX and then replays a message after the MIX has forgotten about
it, the message’s decryption will be exactly the same. Thus, Mixmaster does not
provide the forward anonymity that we want.
Chaum ﬁrst observed this attack in [9], but his solution (which is proposed
again in Babel6) — to include in each message a timestamp that describes when
that message is valid — also has problems. Speciﬁcally, it introduces a new class
of partitioning attacks, where the adversary can distinguish and track messages
based on timestamps. If messages have short lifetimes, legitimate messages may
arrive after their expiration date and be dropped. But if we specify expiration
dates well after when we expect messages to arrive, messages arriving near their
expiration date will be rare: an adversary can delay a message until near its
expiration date, then release it and trace it through the network.
One way of addressing this partitioning attack is to add dummy traﬃc so
that it is less rare for messages to arrive near their expiration date; but dummy
traﬃc is still not well-understood. Another approach would be to add random
values to the expiration date of each MIX in the path, so an adversary delaying
a message at one MIX cannot expect that it is now near to expiring elsewhere
in the path; but this seems open to statistical attacks.
A possible compromise solution that still provides forward anonymity is as
follows: Messages don’t contain any timestamp or expiration information. Each
MIX must keep hashes of the headers of all messages it has processed since the
last time it rotated its key. MIXes should choose key rotation frequency based
on security goals and on how many hashes they want to store.
Note that this solution does not entirely solve the partitioning problem —
near the time of a key rotation, the anonymity set of messages will be divided
into those senders who knew about the key rotation and used the new key, and
those who did not. Moreover, if keys overlap, the above delaying attack still
6 Actually, Babel is vulnerable to a much more direct timestamp attack: each layer of
the onion includes “the number of seconds elapsed since January 1, 1970 GMT, to
the moment of message composition by the sender.” Few people will be composing
a message on a given second, so an adversary owning a MIX at the beginning of the
path and another at the end could trivially recognize a message.
11
works. Also note that while key rotation and link encryption (see Section 4.1)
both provide forward security, their protection is not redundant. With only link
encryption, an adversary running one MIX could compromise another and use
its private key to decrypt messages previously sent between them. Key rotation
limits the window of opportunity for this attack.
A more complete solution to partitioning attacks may be possible by using
the “synchronous batching” approach described in Section 7.2; this is a subject
for future research.
5
Directory Servers
The Mixmaster protocol does not specify a means for clients to learn the lo-
cations, keys, capabilities, or performance statistics of MIXes. Several ad hoc
schemes have grown to ﬁll that void [27]; here we describe Mixminion directory
servers and examine the anonymity risks of such information services.
In Mixminion, a group of redundant directory servers serve current node
state. It is important that these servers be synchronized and redundant: we lose
security if each client has diﬀerent information about network topology and node
reliability. An adversary who controls a directory server can track certain clients
by providing diﬀerent information — perhaps by listing only MIXes it controls
or only informing certain clients about a given MIX.
An adversary without control of a directory server can still exploit diﬀerences
among client knowledge. If Eve knows that MIX M is listed on server D1 but not
on D2, she can use this knowledge to link traﬃc through M to clients who have
queried D1. Eve can also distinguish traﬃc based on any diﬀerences between
clients who use directory servers and those who don’t; between clients with up-
to-date listings and those with old listings; and (if the directory is large and so is
given out in pieces) between clients who have diﬀerent subsets of the directory.
So it is not merely a matter of convenience for clients to retrieve up-to-date
MIX information. We must specify a directory service as a part of our standard.
Thus Mixminion provides protocols for MIXes to advertise their capability cer-
tiﬁcates to directory servers, and for clients to download complete directories.7
Servers can work together to ensure correct and complete data by successively
signing certiﬁcate bundles, so users can be sure that a given MIX certiﬁcate has
been seen by a threshold of directory servers.
But even if client knowledge is uniform, an attacker can mount a trickle attack
by delaying messages from Alice at a compromised node until the directory
servers remove some MIX M from their listings — he can then release the
delayed messages and guess that any messages still using M are likely to be
from Alice. An adversary controlling many nodes can launch this attack very
7 New advances in Private Information Retrieval [25] may down the road allow clients
to eﬃciently and privately download a subset of the directory. We recommend against
using the MIX-net to anonymously retrieve a random subset: an adversary observing
the directory servers and given two hops in a message’s path can take the intersection
over recently downloaded directory subsets to guess the remaining hops in the path.
12