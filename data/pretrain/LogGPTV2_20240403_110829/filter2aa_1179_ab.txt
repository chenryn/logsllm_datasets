### The Operations Required by the "Swap" Method

- **Check & Decrypt PRNG**
- **LBC (Large-Block Cipher)**
  - **LBC**
  - **H2’**
  - **M’**
  - **H2’’**
  - **M’’**
  - **LBC**
- **HASH**
  - **H1’**
  - **H1’’**

**Figure 1.** The operations required by the "swap" method.

### Tagging Attacks and Mitigation

In a typical counter-mode cipher, an adversary might alter a specific byte in the payload of a message entering the MIX-net. Since many outgoing messages are partially predictable (either entirely plaintext or with predictable PGP header material), the adversary can later observe messages exiting the MIX-net and look for payloads with corresponding anomalies at that byte.

To minimize the information an adversary can learn from tagging, we use a large-block cipher. If an adversary tags a message leaving Alice, the payload will be entirely random when it reaches Bob. Thus, the worst outcome is that the payload becomes garbage.

We briefly considered introducing cover-trash to frustrate these tagging attacks, but this problem is as complex as the dummy traffic problem [6]. Instead, we use the decryption-by-hash-of-payload step at the crossover point to prevent the attacker from learning information from tagging attacks. Specifically, our solution falls into several cases:

- **Forward Messages:**
  - If the message is tagged during the first leg, the second header is unrecoverable, and the adversary cannot learn the intended destination.
  - If the message is tagged during the second leg, the first leg has already provided anonymity, so the adversary cannot learn the sender.

- **Direct Reply Messages:**
  - The decryption algorithm provides secrecy equivalent to encryption. Only the recipient can determine if the message has been tagged after peeling off all layers. Thus, tagging attacks are ineffective against reply messages.

- **Anonymized Reply Messages:**
  - Similar to forward messages, if the first leg is tagged, the second header is unrecoverable, and the adversary will not learn that the message was addressed to a reply block.
  - As with direct reply messages, only the recipient can determine if the second leg is tagged.

While direct reply messages do not need a crossover point (the adversary can never observe their tag), forward messages still need a crossover point to prevent end-to-end tagging. However, since the first leg either provides sufficient anonymity or destroys the information about the second leg, the second leg in a forward message can be very short. At the extreme, the first hop in the second header could directly specify the message recipient. Nevertheless, the choice of the crossover point can still reveal information about the intended recipient, so we recommend that the second leg be at least a few hops long.

No MIX except the crossover point can distinguish forward messages from replies. Even the crossover point cannot be certain whether it is processing a reply or a forward message, but it may guess that crossover points are more frequent on forward paths than on direct or anonymized reply paths.

### Multiple-Message Tagging Attacks

The above design is still vulnerable to a subtle and dangerous attack. If Alice sends a group of messages along the same path, the adversary can tag some of those messages as they leave Alice, recognize the pattern (number and timing of tagged and untagged messages) at the crossover point, and observe where the untagged ones go. With some assumptions about our adversary, we can reduce this attack to a traffic confirmation attack we are already willing to accept: when Alice sends multiple messages, the adversary can count them and look for the pattern later. He can also drop some messages and observe resulting patterns.

The adversary can only recognize a tag if he owns the crossover point that Alice chooses. Therefore, Alice picks \( k \) crossover points for her messages; to match a tag signature with certainty, an adversary would have to own all \( k \) crossover points. (Even then, it seems harder as the subsets of her messages would overlap with subsets of messages from other senders.)

The key here is that when the adversary doesn't own a given crossover point, tagging messages destined for that crossover is equivalent to dropping them. The crossover point in question simply doesn’t deliver the message to the second leg. For instance, some MIXes may only allow outgoing mail to local addresses; if such a node gets a crossover message that has been trashed, it might guess that the recipient is one of the local addresses.

If the adversary doesn't own most of the crossover points that Alice chooses, a successful multiple-message tagging attack seems infeasible. We leave a security analysis of the multiple-paths idea to future work; see Section 7.

### Related Design Decisions

#### Link Encryption and Its Benefits

Unlike remailer Types I and II that used SMTP [36] (i.e., ordinary Internet email) as their underlying transport mechanism, Mixminion clients and nodes communicate using a forward-secure encrypted channel based on TLS [13]. TLS allows the establishment of an encrypted tunnel using ephemeral Diffie-Hellman keys. To ensure that the receiving end is the one intended by the creator of the anonymous message, the receiving node can sign the ephemeral key. Once a session key has been established, the parties destroy their Diffie-Hellman keys and begin sending messages through the tunnel. After each message, the parties perform a standard key update operation to generate a fresh key and delete the old key material. Key updates don’t require any asymmetric encryption techniques, so they are relatively fast.

The purpose of link encryption is to provide forward secrecy: after the keys have been deleted, even the nodes that exchange messages cannot decrypt or recognize intercepted messages. This makes it impossible to comply with decryption notices of past traffic that might be served in some jurisdictions. Even if an attacker manages to get hold of the session key at a particular point, they would have to observe all subsequent traffic to update their key appropriately.

The encrypted channel offers limited protection against traffic analysis. Encrypted links between honest nodes prevent an adversary from recognizing even their own messages, but without link padding, they can still measure how much traffic is being transmitted.

As a fringe benefit, using a separate link protocol makes it easier to deploy relay-only MIXes—such nodes simply omit SMTP support. (See Section 4.2 below.)

#### Message Types and Delivery Modules

Once a Mixminion packet reaches the final MIX in its path, it must either be delivered to its intended recipient, dropped if it is an intra-network dummy message, or processed further if it is a remixed Type II packet. To support different kinds of delivery, the header includes a type code for the action to be taken to deliver the message. A few types—such as 'dummy', 'SMTP', and 'local delivery'—are specified as part of the Mixminion standard. Others may be added by future extensions to implement abuse-resistant exit policies (see Section 4.3), administer nymservers (see Section 6), publish anonymously to Usenet, relay messages to older remailers, or support other protocols.

Nearly all delivery methods require additional information beyond the message type and its payload. The SMTP module, for example, requires a mailbox. This information is placed in a variable-length annex to the final subheader.

The types each MIX supports are described in a capability block, which also includes the MIX’s address, long-term (signing) public key, short-term public key (for use in header encryption), remixing capability, and batching strategy. MIXes sign these capability blocks and publish them on directory servers (see Section 5). Clients download this information from the directory servers.

The presence of multiple delivery methods can fragment the anonymity set. For example, if there were five ways to send an SMTP message to Bob, an attacker could partition Bob’s incoming mail by guessing that one of those ways is Alice’s favorite. An active attacker could even lure users into using a compromised exit node by advertising that node as supporting a rare but desirable delivery method.

We claim that these attacks do not provide an argument against extensibility per se, but rather argue against the proliferation of redundant extensions and the use of rare extensions.

#### Exit Policies and Abuse

One important entry in a node’s capability block is its exit policy. Exit abuse is a serious barrier to wide-scale remailer deployment—rare indeed is the network administrator tolerant of machines that potentially deliver hate mail.

On one end of the spectrum are open exit nodes that will deliver anywhere; on the other end are middleman nodes that only relay traffic to other remailer nodes and private exit nodes that only deliver locally. More generally, nodes can set individual exit policies to declare which traffic they will let exit from them, such as traffic for local users or other authenticated traffic [41].

Preventing abuse of open exit nodes is an unsolved problem. If receiving mail is opt-in, an abuser can forge an opt-in request from their victim. Requiring recipients to declare their interest in receiving anonymous mail is risky—human rights activists in Guatemala cannot both sign up to receive anonymous mail and retain plausible deniability. Similarly, if receiving mail is opt-out, an abuser can deny service by forging an opt-out request from a legitimate user. We might instead keep the mail at the exit node and send a note to the recipient telling them how to collect their mail, but this increases server liability by storing messages and does not solve the problem.

A mixture of open and restricted exit nodes will allow the most flexibility for volunteers running servers. While a large number of middleman nodes is useful to provide a large and robust network, the small number of exit nodes still simplifies traffic confirmation (the adversary observes both a suspected user and the network’s exit nodes and looks for timing or packet correlations). The number of available open exit nodes remains a limiting security parameter for the remailer network.

#### Replay Prevention, Message Expiration, and Key Rotation

Mixmaster offers rudimentary replay prevention by keeping a list of recent message IDs. To keep the list from getting too large, it expires entries after a server-configurable amount of time. But if an adversary records the input and output batches of a MIX and then replays a message after the MIX has forgotten about it, the message’s decryption will be exactly the same. Thus, Mixmaster does not provide the forward anonymity that we want.

Chaum first observed this attack in [9], but his solution (which is proposed again in Babel) — to include in each message a timestamp that describes when that message is valid — also has problems. Specifically, it introduces a new class of partitioning attacks, where the adversary can distinguish and track messages based on timestamps. If messages have short lifetimes, legitimate messages may arrive after their expiration date and be dropped. But if we specify expiration dates well after when we expect messages to arrive, messages arriving near their expiration date will be rare: an adversary can delay a message until near its expiration date, then release it and trace it through the network.

One way of addressing this partitioning attack is to add dummy traffic so that it is less rare for messages to arrive near their expiration date, but dummy traffic is still not well-understood. Another approach would be to add random values to the expiration date of each MIX in the path, so an adversary delaying a message at one MIX cannot expect that it is now near to expiring elsewhere in the path; but this seems open to statistical attacks.

A possible compromise solution that still provides forward anonymity is as follows: Messages don’t contain any timestamp or expiration information. Each MIX must keep hashes of the headers of all messages it has processed since the last time it rotated its key. MIXes should choose key rotation frequency based on security goals and on how many hashes they want to store.

Note that this solution does not entirely solve the partitioning problem—near the time of a key rotation, the anonymity set of messages will be divided into those senders who knew about the key rotation and used the new key, and those who did not. Moreover, if keys overlap, the above delaying attack still works. Also note that while key rotation and link encryption (see Section 4.1) both provide forward security, their protection is not redundant. With only link encryption, an adversary running one MIX could compromise another and use its private key to decrypt messages previously sent between them. Key rotation limits the window of opportunity for this attack.

A more complete solution to partitioning attacks may be possible by using the “synchronous batching” approach described in Section 7.2; this is a subject for future research.

### Directory Servers

The Mixmaster protocol does not specify a means for clients to learn the locations, keys, capabilities, or performance statistics of MIXes. Several ad hoc schemes have grown to fill that void [27]; here we describe Mixminion directory servers and examine the anonymity risks of such information services.

In Mixminion, a group of redundant directory servers serve current node state. It is important that these servers be synchronized and redundant: we lose security if each client has different information about network topology and node reliability. An adversary who controls a directory server can track certain clients by providing different information—perhaps by listing only MIXes it controls or only informing certain clients about a given MIX.

An adversary without control of a directory server can still exploit differences among client knowledge. If Eve knows that MIX M is listed on server D1 but not on D2, she can use this knowledge to link traffic through M to clients who have queried D1. Eve can also distinguish traffic based on any differences between clients who use directory servers and those who don’t; between clients with up-to-date listings and those with old listings; and (if the directory is large and so is given out in pieces) between clients who have different subsets of the directory.

Thus, it is not merely a matter of convenience for clients to retrieve up-to-date MIX information. We must specify a directory service as part of our standard. Mixminion provides protocols for MIXes to advertise their capability certificates to directory servers, and for clients to download complete directories. Servers can work together to ensure correct and complete data by successively signing certificate bundles, so users can be sure that a given MIX certificate has been seen by a threshold of directory servers.

But even if client knowledge is uniform, an attacker can mount a trickle attack by delaying messages from Alice at a compromised node until the directory servers remove some MIX M from their listings—he can then release the delayed messages and guess that any messages still using M are likely to be from Alice. An adversary controlling many nodes can launch this attack very effectively.