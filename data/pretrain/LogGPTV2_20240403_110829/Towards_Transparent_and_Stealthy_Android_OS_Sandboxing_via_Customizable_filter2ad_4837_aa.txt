title:Towards Transparent and Stealthy Android OS Sandboxing via Customizable
Container-Based Virtualization
author:Wenna Song and
Jiang Ming and
Lin Jiang and
Yi Xiang and
Xuanchen Pan and
Jianming Fu and
Guojun Peng
Towards Transparent and Stealthy Android OS Sandboxing via
Customizable Container-Based Virtualization
Wenna Song1,2, Jiang Ming3,†, Lin Jiang4, Yi Xiang1,2, Xuanchen Pan5, Jianming Fu1,2
Guojun Peng1,2,†
2Key Laboratory of Aerospace Information Security and Trusted Computing, Ministry of Education, China
1School of Cyber Science and Engineering, Wuhan University, China
4Independent Researcher, 5Wuhan Antiy Information Technology Co.,Ltd, China
3University of Texas at Arlington, USA
ABSTRACT
A fast-growing demand from smartphone users is mobile virtualiza-
tion. This technique supports running separate instances of virtual
phone environments on the same device. In this way, users can run
multiple copies of the same app simultaneously, and they can also
run an untrusted app in an isolated virtual phone without causing
damages to other apps. Traditional hypervisor-based virtualiza-
tion is impractical to resource-constrained mobile devices. Recent
app-level virtualization efforts suffer from the weak isolation mech-
anism. In contrast, container-based virtualization offers an isolated
virtual environment with superior performance. However, exist-
ing Android containers do not meet the anti-evasion requirement
for security applications: their designs are inherently incapable of
providing transparency or stealthiness.
In this paper, we present VPBox, a novel Android OS-level sand-
box framework via container-based virtualization. We integrate
the principle of anti-virtual-machine detection into VPBox’s design
from two aspects. First, we improve the state-of-the-art Android
container work significantly for transparency. We are the first to
offer complete device virtualization on mainstream Android ver-
sions. To minimize the fingerprints of VPBox’s presence, we enable
all virtualization components (i.e., kernel-level device and user-
level device virtualization) to be executed outside of virtual phones
(VPs). Second, we offer new functionality that security analysts
can customize device artifacts (e.g., phone model, kernel version,
and hardware profiles) without user-level hooking. This capabil-
ity prevents the tested apps from detecting the particular mobile
device (e.g., Google Pixel phone) that runs an Android container.
Our performance evaluation on five VPs shows that VPBox runs
different benchmark apps at native speed. Compared with other
Android sandboxes, VPBox is the only one that can bypass a set of
virtual environment detection heuristics. At last, we demonstrate
VPBox’s flexibility in testing environment-sensitive malware that
tries to evade sandboxes.
† Guojun Peng (PI:EMAIL) and Jiang Ming (PI:EMAIL) are the
corresponding authors.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11. . . $15.00
https://doi.org/10.1145/3460120.3484544
CCS CONCEPTS
• Security and privacy → Mobile and wireless security.
KEYWORDS
Container-Based Virtualization, Android OS Sandboxing, Anti-
Evasion
ACM Reference Format:
Wenna Song, Jiang Ming, Lin Jiang, Yi Xiang, Xuanchen Pan, Jianming
Fu, Guojun Peng. 2021. Towards Transparent and Stealthy Android OS
Sandboxing via Customizable Container-Based Virtualization. In Proceedings
of the 2021 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’21), November 15–19, 2021, Virtual Event, Republic of Korea.
ACM, New York, NY, USA, 17 pages. https://doi.org/10.1145/3460120.3484544
1 INTRODUCTION
With the proliferation of mobile systems and networks, smart-
phones are replacing traditional personal computers to fulfill most
users’ daily computing needs [22, 27]. The trend of Bring Your
Own Device [13] has paved the way for another fast-growing de-
mand: mobile virtualization. It allows users to run multiple separate
instances of smartphone environments on the same physical de-
vice. Although Android’s multiple users features [7] can switch
among different user accounts without leveraging virtualization,
researchers have found a significant number of vulnerabilities from
this new feature due to its weak isolation mechanism [1, 52]. Espe-
cially, mobile apps are now performing various critical tasks such
as online payment [76], GPS navigation [68], and IoT device remote
control [32]. Inevitably large amounts of private data, such as user
credentials and location data, are stored in the smartphone. The rise
in risks of data thefts and fraudulent attacks [33, 38] also drives the
trend of secure mobile virtualization, which can provide an isolated
environment to run untrusted apps and monitor their behaviors.
Resource-constrained mobile devices limit the adoption of tradi-
tional hypervisor-based virtualization [14, 21, 59]. Security experts
and researchers have been analyzing Android apps dynamically us-
ing emulators [41, 43, 53, 64, 75] on top of a PC. However, traditional
Android emulators are often slow in performance and leave plenty
of fingerprints regarding the runtime environment, hardware ef-
fects, and device artifacts. As they are fundamentally different from
real devices, a broad spectrum of anti-emulation heuristics has been
proposed to detect emulators [16, 30, 34, 45, 50, 55, 69]. The recent
progress on app-level virtualization can run multiple copies of the
same app within a host app [11, 12, 51]. The most representative
one, Parallel Space [42], has been downloaded hundreds of mil-
lion times. However, their weak isolation mechanism violates the
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2858least-privilege principle, leading to possible permission escalation
attacks to guest apps [20, 56, 57, 77, 78].
In contrast, container-based virtualization can potentially over-
come the limitations that exist on both hypervisor-based and app-
level virtualization. It is lightweight OS-level virtualization that
allows several isolated guest virtual machines to run on top of
the Operating System (OS) kernel [28, 61]. Because a container
is managed by the OS kernel and executes directly on the hard-
ware, it is able to provide a close-to-native virtual environment
with high performance. Moreover, as a container does not have
software-emulated hardware, the fingerprint of its presence is also
minimized [18, 36, 37].
Cells [10] is the first Android container architecture to run mul-
tiple virtual phones (VPs) on a single Android instance. However,
the design of Cells does not meet the anti-evasion requirement.
Its user-level virtualization method introduces non-system compo-
nents into the VP. The VP’s apps, running at the same privilege
level as these virtualization components, can find suspicious files
and processes via interface scanning. Besides, Cells’s virtualization
of many devices has been obsolete (e.g., Binder, Network, Display,
and Power), and it also lacks support for some essential devices,
such as Bluetooth and GPS. Furthermore, Cells is inherently inca-
pable of customizing the VP’s device attributes stealthily. All of
these limitations (i.e., the deficiency in stealthiness, incomplete
device virtualization, and a lack of device attribute customization)
can be exploited by adversaries to fingerprint the presence of the
VP. Other follow-up container frameworks [17, 71, 73] share simi-
lar limitations of lacking transparency and stealthiness, restricting
their applications to security-related tasks.
This project seeks to integrate the principle of anti-evasion into
the development of a new Android OS-level sandbox, called VP-
Box.1 We achieve this goal through two contributions: 1) improving
the state-of-the-art Android container work significantly so that
transparent virtualization works on mainstream Android versions;
2) customizing the virtual phone’s device attributes stealthily to
bypass the ad-hoc fingerprinting for a specific phone model.
In particular, we improve Cells [10] significantly to achieve the
goal of “out-of-the-box” virtualization: having no in-guest virtual-
ization component. VPBox consists of kernel-level and user-level
device virtualization methods. The kernel-level mechanism enables
transparency and performance, and it also paves the way for our
novel user-level device virtualization. For the proprietary devices
that are entirely closed source (e.g., Bluetooth) and the devices
whose configurations happen at user space (e.g., WiFi), we propose
a stealthy user-level device virtualization mechanism without com-
promising transparency. In addition, we take a set of optimization
techniques to minimize memory consumption. To enforce a fine-
grained access control policy and record system calls invoked, we
also virtualize SELinux to enable SELinux settings for each VP.
Although apps are difficult to recognize the difference between
VPBox and the underlying physical device, they can still finger-
print the particular smartphone (e.g., Google Pixel phone) that
runs VPBox. We address this limitation by allowing users to config-
ure the VP with various device attributes (e.g., phone model and
hardware profiles). Unlike existing work that relies on user-level
1“VPBox” means running Virtual Phones as an OS-level SandBox.
hooking [54], our customization methods are more stealthy be-
cause they run outside of the VP. VPBox leverages the new device
namespace mechanism to isolate the VP’s requests from the host’s,
and it returns the custom parameters to the VP’s inquiries. Our
isolation design ensures that an app in the VP is unaware of the
custom device artifacts. This new feature also enables security ap-
plications that require diversified virtual phones, such as analyzing
logic bombs [29] that are triggered by particular device artifacts.
VPBox has been tested to support Android versions from 6.0
to 10.0. Our performance experiments, running a set of bench-
mark apps in up to five VPs on Google Nexus 6P and Pixel 3a
XL phones, demonstrate that VPBox introduces negligible runtime
overhead and only modest memory consumption. Unlike emulators,
VPBox’s native performance indicates measuring execution time’s
variability will fail to detect it. Next, we test Android emulators, app-
virtualization sandboxes, and Android containers using mainstream
virtual environment detection heuristics [16, 34, 50, 55, 56, 69, 78],
such as detecting Android system properties, sensor events, video
frame rate, and instruction-level profiles. VPBox is the only one to
exhibit the same hardware effects and device artifacts as the under-
lying physical device. Besides, VPBox is immune to two advanced
unsafe environment detection APIs: Google SafetyNet’s “basicIn-
tegrity” [5] and ishumei [60]. They can recognize the environment
of Android emulators, app-level virtualization, API hooking, and
rooted device, but they fail to detect VPBox. At last, we evaluate
VPBox’s resilience against 1, 961 environment-sensitive malware,
including samples that try to detect Google phones.
Threat Model. We assume the apps running in the VP are
unprivileged user-mode programs. This assumption is also held
by bare-metal malware analysis frameworks such as BareBox [39]
and BareDroid [48]. That being said, a skilled attacker may exploit
a Linux kernel zero-day vulnerability to compromise VPBox. For
this reason, we disable the loading of arbitrary kernel modules
and prevent user-level apps from accessing kernel memory. §9 will
discuss whether VPBox introduces the new artifacts (if any) that
can be exploited by adversaries. In a nutshell, our research makes
the following contributions.
• A Transparent Android Container Framework. VPBox
represents the latest progress in mobile container-based vir-
tualization. Our “out-of-the-box” design advances state of the
art in transparent device virtualization. Our user-level vir-
tualization solution offers a flexible and stealthy alternative
to virtualize new hardware devices without compromising
transparency.
• Device Attribute Customization.
In VPBox, each VP’s
artifacts are highly customizable without user-level hooking.
This new feature offers a cost-effective way to simulate more
diversified VPs on a single device. To the best of our know-
ledge, VPBox offers the most comprehensive device-attribute
editing options so far.
• Open-source Implementation. VPBox reveals a strong
resilience against virtual-machine detection heuristics and
device-consistency checks, as well as native performance.
VPBox’s demo video is available at https://youtu.be/TpGD_
jjxSqc. To foster more research on the VPBox platform, we
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2859release VPBox’s source code at (https://github.com/VPBox/
Dev).
2 BACKGROUND AND RELATED WORK
We first summarize two common Android virtualization techniques
that do not rely on new hardware features (e.g., TrustZone [35]):
Android emulators and app-level virtualization. Their deficiencies
in lacking transparency and stealthiness have been utilized as effec-
tive evasion methods. Next, we discuss the status quo of Android
container-based virtualization. It is a new style, lightweight vir-
tualization technique, but the weaknesses of existing containers
severely limit their adoptions in security applications. Our project
unleashes the power of container-based virtualization to foster
strengths and circumvent weaknesses of the current work. At last,
we introduce the background about Binder. Our Binder virtual-
ization enables having no in-guest virtualization component at
user-level.
2.1 Android Emulators
Android sandboxes based on full-system emulation provide an iso-
lated environment to collect app behaviors [41, 43, 53, 64, 75]. Upon
analysis completion, the virtual environment can be restored to a
clean snapshot in a matter of seconds. Security analysts typically
run Android malware in an emulator to observe malicious behaviors.
However, a long-standing challenge of emulators is to virtualize
various hardware device effects realistically. It is fundamentally
infeasible to make hardware emulation and native hardware in-
distinguishable [31]. Researchers have proposed a set of detection
heuristics to find the hardware-related discrepancies caused by non-
transparent system emulation techniques [16, 30, 34, 45, 50, 55, 69],
and many of them have been adopted by malware [3]. For example,
due to the performance slowdown in graphics rendering emulation,
Android emulators typically exhibit a low video frame rate [69].
Petsas et al. detect QEMU-based emulators by checking the vir-
tual program counter update and cache consistency [50]. Bordoni
et al. find that sensor-related APIs’ return values are different be-
tween mobile emulators and real devices [16]. Sahin et al. uncovered
instruction-level discrepancies between software-based emulators
and real ARM CPUs [55].
In contrast, VPBox’s container-based virtualization has a unique
advantage in the transparent virtualization effect: VPBox does not
have software-emulated hardware, and the foreground VP can al-
ways access hardware devices and run apps at native speed.
2.2 App-Level Virtualization
The recent app-virtualization development (e.g., VirtualApp [11],
DroidPlugin [51], and Parallel Space [42]) provides a more light-
weight option to run multiple copies of the same app on a single
device, such as accessing Facebook simultaneously with two dif-
ferent accounts. The key idea is that a host app provides a virtual
environment on top of the Android framework, and it creates sys-
tem service proxies to launch arbitrary guest apps from their APK
files without installation. Due to the dynamic proxy hooking, the
actions from a guest app will be treated by the Android system as
the host app’s actions. In this way, two copies of the same app are
able to bypass the UID restriction and execute at the same time.
Despite the growing popularity of app-virtualization-based apps
in the Android market, researchers have realized the security prob-
lems caused by this new technical progress [20, 56, 57, 77, 78]. As all
guest apps share the same UID with the host app, the current design
introduces a serious “shared-everything” threat to guest apps [56],
which has made malicious attacks such as permission escalation
and privacy leakage tremendously easier. Although guest apps can
also directly access the Android device that installs the host app, the
host app has to hook API invocations of the guest app so that the
Android system thinks that all API requests and components are
from the host app. However, the hooking mechanism leaves many
host app’s signatures in the guest app’s call stack and memory;
DiPrint [56] utilizes these signatures to detect the presence of an
app-virtualization environment.
By contrast, VPBox can achieve the same goal of running multi-
ple instances of the same app simultaneously, but with a stronger
isolation mechanism among virtual phones and the host device.
Furthermore, VPBox’s virtualization and customization do not
adopt user-level API hooking and thus have better stealthiness
than app-level virtualization.
2.3 Android Container-Based Virtualization
The container-based virtualization reveals distinct benefits in per-
formance and transparent hardware virtualization effects. Initial
investigations on Linux Containers [18, 36] and Docker [37] have
shown that container-based virtualization is very promising to de-
feat emulator-aware malware. However, these works [18, 36, 37] did
not deliver a functional mobile virtualization platform, and many
important topics, such as how to hide new artifacts introduced by