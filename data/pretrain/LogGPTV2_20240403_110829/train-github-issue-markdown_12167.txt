**Migrated issue, originally created by Dmytro Starosud (@dima-starosud)**
This is using sqlalchemy 1.2.0b3.
Please consider following code snippet.
            class A(Base):
                __tablename__ = 'a'
                id = Column(Integer, primary_key=True)
                value = Column(String)
            mapper = inspect(A).mapper
            print('Initial', mapper.all_orm_descriptors.keys())
            A.value_2 = hybrid_property(lambda me: me.value)
            configure_mappers()
            print('Added', mapper.all_orm_descriptors.keys())
            del A.value_2
            configure_mappers()
            print('Deleted', mapper.all_orm_descriptors.keys())
            from sqlalchemy.orm.mapper import _memoized_configured_property
            _memoized_configured_property.expire_instance(mapper)
            print('Expired', mapper.all_orm_descriptors.keys())
    >>>
    Initial ['value', '__mapper__', 'id']
    Added ['value', 'value_2', '__mapper__', 'id']
    Deleted ['value', 'value_2', '__mapper__', 'id']
    Expired ['value', '__mapper__', 'id']
I think `_memoized_configured_property` is not supposed to be used outside lib
code.  
Is there _official_ way to do this?