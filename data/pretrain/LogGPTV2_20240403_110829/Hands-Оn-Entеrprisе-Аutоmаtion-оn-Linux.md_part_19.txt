Making scalable static configuration changes
It is vital that the configuration changes that we make are version controlled, repeatable,
and reliable—thus, let's consider an approach that achieves this aim. Let's start with a
simple example by revisiting our SSH daemon configuration. On most servers, this is likely
to be static, as requirements such as restricting remote root logins and disabling password-
based logins are likely to apply across an entire estate. Equally, the SSH daemon is
normally configured through one central file—/etc/ssh/sshd_config.
On an Ubuntu server, the default configuration is very simple, consisting of just six lines if
we remove all the whitespace and comments. Let's make some modifications to this file so
that remote root logins are denied, X11Forwarding is disabled, and only key-based logins
are allowed, as follows:
ChallengeResponseAuthentication no
UsePAM yes
X11Forwarding no
PrintMotd no
AcceptEnv LANG LC_*
Subsystem sftp /usr/lib/openssh/sftp-server
PasswordAuthentication no
PermitRootLogin no
We will store this file within our roles/ directory structure and deploy it with the
following role tasks:
---
- name: Copy SSHd configuration to target host
copy:
src: files/sshd_config
dest: /etc/ssh/sshd_config
owner: root
group: root
mode: 0644
- name: Restart SSH daemon
service:
name: ssh
state: restarted
[ 190 ]
Configuration Management with Ansible Chapter 7
Here, we use the Ansible copy module to copy the sshd_config file we have created and
stored within the role itself to our target host and ensure it has the ownership and mode
that's suitable for the SSH daemon. Finally, we restart the SSH daemon to pick up the
changes (note that this service name is valid on Ubuntu Server and may vary on other
Linux distributions). Thus, our completed roles directory structure looks like this:
roles/
└── securesshd
├── files
│ └── sshd_config
└── tasks
└── main.yml
Now, we can run this to deploy the configuration to our test host, as follows:
Now, deploying the configuration through this means gives us a number of advantages
over the methods we have explored previously, as listed here:
The role itself can be committed to a version control system, thus implicitly
bringing the configuration file itself (in the files/ directory of the role) under
version control.
Our role tasks are very simple—it is very easy for someone else to pick up this
code and understand what it does, without the need to decipher the regular
expressions.
[ 191 ]
Configuration Management with Ansible Chapter 7
It doesn't matter what happens to our target machine configuration, especially in
terms of whitespace or configuration format. The pitfalls discussed at the end of
the previous section are avoided completely because we simply overwrite the file
on deployment.
All machines have an identical configuration, not just in terms of directives, but
in terms of order and formatting, thus ensuring it is easy to audit configuration
across an enterprise.
Thus, this role represents a big step forward in terms of enterprise-scale configuration
management. However, let's see what happens if we run the role against the same host a
second time. The resulting output can be seen in the following screenshot:
From the preceding screenshot, we can see that Ansible has determined that the SSH
configuration file is unmodified from the last run, and hence, the ok status is returned.
However, in spite of this, the changed status of the Restart SSH daemon task indicates
that the SSH daemon has been restarted, even though no configuration change was made.
Restarting system services is normally disruptive, and so it should be avoided unless
absolutely necessary. In this case, we would not wish to restart the SSH daemon unless a
configuration change is made.
[ 192 ]
Configuration Management with Ansible Chapter 7
The recommended way to handle this is with a handler. A handler is an Ansible
construct that is much like a task, except that it only gets called when a change is made.
Also, when multiple changes are made to a configuration, the handler can be notified
multiple times (once for each applicable change), and yet the Ansible engine batches up all
handler calls and runs the handler once, only after the tasks complete. This ensures that
when it is used to restart a service, such as in this example, the service is only restarted
once, and only then when a change is made. Let's test this now, as follows:
1. First of all, remove the service restart task from the role and add a notify clause
to notify the handler (we shall create this in a minute). The resulting role tasks
should look like this:
---
- name: Copy SSHd configuration to target host
copy:
src: files/sshd_config
dest: /etc/ssh/sshd_config
owner: root
group: root
mode: 0644
notify:
- Restart SSH daemon
2. Now, we need to create a handlers/ directory in the role and add our
previously removed handler code to it so that it looks like this:
---
- name: Restart SSH daemon
service:
name: ssh
state: restarted
3. The resulting roles directory structure should now look like this:
roles/
└── securesshd
├── files
│ └── sshd_config
├── handlers
│ └── main.yml
└── tasks
└── main.yml
[ 193 ]
Configuration Management with Ansible Chapter 7
4. Now, when we run the playbook twice on the same server (having initially
reverted the SSH configuration to the original one), we see that the SSH daemon
is only restarted in the instance where we have actually changed the
configuration, as shown in the following screenshot:
To further demonstrate handlers before we move on, let's consider this enhancement to the
role tasks:
---
- name: Copy SSHd configuration to target host
copy:
src: files/sshd_config
dest: /etc/ssh/sshd_config
owner: root
group: root
[ 194 ]
Configuration Management with Ansible Chapter 7
mode: 0644
notify:
- Restart SSH daemon
- name: Perform an additional modification
lineinfile:
path: /etc/ssh/sshd_config
regexp: '^\# Configured by Ansible'
line: '# Configured by Ansible on {{ inventory_hostname }}'
insertbefore: BOF
state: present
notify:
- Restart SSH daemon
Here, we deploy our configuration file and perform an additional modification. We are
putting a comment into the head of the file, which includes an Ansible variable, with the
hostname of the target host.
This will result in two changed statuses on our target host, and yet, if we revert to the
default SSH daemon configuration and then run our new playbook, we see the following:
Pay careful attention to the preceding output and the sequence in which the tasks are run.
You will note that the handler is not run in sequence and is actually run once at the end of
the play.
[ 195 ]
Configuration Management with Ansible Chapter 7
Even though our tasks both changed and hence would have notified the
handler twice, the handler was only run at the end of the playbook run,
minimizing restarts, just as required.
In this manner, we can make changes to static configuration files at large scales, across
many hundreds—if not thousands—of machines. In the next section, we will build on this
to demonstrate ways of managing configuration where dynamic data is required—for
example, configuration parameters that might change on a per-host or per-group basis.
Making scalable dynamic configuration changes
While the preceding examples resolve many of the challenges of making automated
configuration changes at scale in an enterprise, it is noticeable that our final example was
somewhat inefficient. We deployed a static, version-controlled configuration file, and made
a change to it using the lineinfile module again.
This allowed us to insert an Ansible variable into the file, which in many instances is
incredibly useful, especially when configuring more complex services. However, it is—at
best—inelegant to split this change across two tasks. Also, reverting to the use of
the lineinfile module again exposes us to the risks we discussed earlier and means we
would need one lineinfile task for every variable we wish to insert into a configuration.
Thankfully, Ansible includes just the answer to such a problem. In this case, the concept of
Jinja2 templating comes to our rescue.
Jinja2 is a templating language for Python that is incredibly powerful and easy to use. As
Ansible is coded almost entirely in Python, it lends itself well to the use of Jinja2 templates.
So, what is a Jinja2 template? At its most fundamental level, it is a static configuration file,
such as the one we deployed for the SSH daemon earlier, but with the possibility of
variable substitutions. Of course, Jinja2 is far more powerful than that—it is, in essence, a
language in its own right, and features common language constructs such as for loops
and if...elif...else constructs, just as you would find in other languages. This makes
it incredibly powerful and flexible, and entire sections of a configuration file (for example)
can be omitted, depending on how an if statement evaluates.
As you can imagine, Jinja2 deserves a book of its own to cover the detail of the
language—however, here, we will provide a practical hands-on introduction to Jinja2
templating for the automation of configuration management in an enterprise.
[ 196 ]
Configuration Management with Ansible Chapter 7
Let's go back to our SSH daemon example for a minute, where we wanted to put the target
hostname into a comment at the head of the file. While this is a contrived example,
progressing it from the copy/lineinfile example to a single template task will show the
benefits that templating brings. From here, we can progress to a more comprehensive
example. To start with, let's define our Jinja2 template for the sshd_config file, as follows:
# Configured by Ansible {{ inventory_hostname }}
ChallengeResponseAuthentication no
UsePAM yes
X11Forwarding no
PrintMotd no
AcceptEnv LANG LC_*
Subsystem sftp /usr/lib/openssh/sftp-server
PasswordAuthentication no
PermitRootLogin no
Notice that the file is identical to the file we deployed using the copy module earlier, only
now, we have included the comment in the file header and used the Ansible variable
construct (denoted by pairs of curly braces) to insert the inventory_hostname variable.
Now, for the sake of our sanity, we will call this file sshd_config.j2 to ensure we can
differentiate templates from flat configuration files. Templates are normally placed into
a templates/ subdirectory within the role, and so are subject to version control in the
same way that playbook, roles, and any associated flat configuration files are.
Now, rather than copying the flat file and then performing substitutions with one or more
lineinfile tasks, we can use the Ansible template module to deploy this template and
parse all Jinja2 constructs.
Thus, our tasks now look like this:
---
- name: Copy SSHd configuration to target host
template:
src: templates/sshd_config.j2
dest: /etc/ssh/sshd_config
owner: root
group: root
mode: 0644
notify:
- Restart SSH daemon
Notice that the task is almost identical to our earlier copy task and that we call our handler,
just as before.
[ 197 ]
Configuration Management with Ansible Chapter 7
The completed module directory structure now looks like this:
roles
└── securesshd
├── handlers
│ └── main.yml
├── tasks
│ └── main.yml
└── templates
└── sshd_config.j2
Let's run this and evaluate the results, which can be seen in the following screenshot:
As can be seen here, the template has been copied across to the target host, and the variable
in the header comment has been processed and the appropriate value substituted.
[ 198 ]
Configuration Management with Ansible Chapter 7
This becomes incredibly powerful as our configuration becomes more complex as, no
matter how large and complex the template, the role still only requires the one template
task. Returning to our MariaDB server, suppose that we want to set a number of
parameters on a per-server basis to effect tuning appropriate to the different workloads we
are deploying. Perhaps we want to set the following:
The server bind-address, defined by bind-address
The maximum binary log size, defined by max_binlog_size
The TCP port that MariaDB listens on, as defined by port
All of these parameters are defined in /etc/mysql/mariadb.conf.d/50-server.cnf.
However, as discussed earlier, we need to also ensure the integrity
of /etc/mysql/mariadb.cnf to ensure it includes this (and other) files, to reduce the
possibility of someone overriding our configuration. Let's start building our
templates—first of all, a simplified version of the 50-server.cnf file, with some variable
substitutions. The first part of this file is shown in the following code—note the port and
bind-address parameters, which are now defined using Ansible variables, denoted in the
usual manner with pairs of curly braces:
[server]
[mysqld]
user = mysql
pid-file = /var/run/mysqld/mysqld.pid
socket = /var/run/mysqld/mysqld.sock
port = {{ mariadb_port }}
basedir = /usr
datadir = /var/lib/mysql
tmpdir = /tmp
lc-messages-dir = /usr/share/mysql
skip-external-locking
bind-address = {{ mariadb_bind_address }}
The second part of this file looks as follows—you will observe here the presence of
the mariadb_max_binlog_size variable, while all other parameters remain static:
key_buffer_size = 16M
max_allowed_packet = 16M
thread_stack = 192K
thread_cache_size = 8
myisam_recover_options = BACKUP
query_cache_limit = 1M
query_cache_size = 16M
log_error = /var/log/mysql/error.log
expire_logs_days = 10
max_binlog_size = {{ mariadb_max_binlog_size }}
[ 199 ]
Configuration Management with Ansible Chapter 7
character-set-server = utf8mb4
collation-server = utf8mb4_general_ci
[embedded]
[mariadb]
[mariadb-10.1]
Now, let's also add in a templated version of /etc/mysql/mariadb.cnf, as follows:
[client-server]
!includedir /etc/mysql/conf.d/
!includedir /etc/mysql/mariadb.conf.d/
This file might be short, but it serves a really important purpose. It is the first file that is
read by the MariaDB service when it loads, and it references other files or directories to be
included. If we did not maintain control of this file using Ansible, then anyone with
sufficient privileges could log in and edit the file, possibly including entirely different
configurations and bypassing our Ansible-defined configuration entirely. Whenever you
deploy configuration with Ansible, it is important to consider factors such as this, as
otherwise, your configuration changes might be bypassed by a well-meaning (or otherwise)
administrator.
A template doesn't have to have any Jinja2 constructs in it—if there are no
variables to insert, as in our second example, the file will simply be copied
as-is to the target machine.
Obviously, it would be slightly more efficient to use the copy module to send this static
configuration file to the remote server, but this requires two tasks, where we can use just
one with a loop to process all our templates. Such an example is shown in the following
code block:
---