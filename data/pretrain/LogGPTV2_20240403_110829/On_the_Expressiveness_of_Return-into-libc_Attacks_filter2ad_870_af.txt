28
·
Ryan Roemer et al.
Inst. Seq.
m[&%i6] = LastF
m[&%i7] = LastI
Preset
%i0 = LastF
%i3 = &%i6
(safe)
%i0 = LastI
%i3 = &%i7
(safe)
Assembly
st %i0, [%i3]
ret
restore
st %i0, [%i3]
ret
restore
Optional: Up to 6 function arg seq’s (v[1-6]).
m[&%i ] = v
%l7 = &%i[0-5]
(safe)
%i0 = &v[1-6]
ld [%i0], %l6
st %l6, [%l7]
ret
restore
Previous frame %i7 set to &FUNC - 4.
call FUNC
Opt. 1- Last Seq.: No return value. Just nop.
nop
ret
restore
ret
restore
Opt. 2 - Last Seq.: Return value %o0 stored to r1
r1 = RETURN VAL
%i3 = &r1
st %o0, [%i3]
ret
restore
Fig. 26. Function Calls (call FUNC)
6.7 System Calls
On SPARC, Solaris system calls are invoked by trapping to the kernel using a trap instruc-
tion (like “trap always”, ta) with the value of 0x8 for 32-bit binaries on a 64-bit CPU
(which comports with our test environment). Setup for a trap entails loading the system
call number into global register %g1 and placing up to six arguments in output registers
%o0-5.
Our system call gadget (syscall NUM, v1, v2, ...) uses three to nine instruction
sequences (depending on the number of arguments) and is described in Figure 27. The
ﬁrst instruction sequence loads the value of a gadget variable num (containing the desired
system call number) and stores it into the last (trap) frame %i0 save area. Up to six more
instruction sequences can load gadget variable values v1-6 that store to the register save
area %i0-5 of the next-to-last frame, which will be available in the ﬁnal (trap) frame as
registers %o0-5 after the register slide. The ﬁnal frame calls the ta 8 SPARC instruction
and traps to the kernel for the system call.
7. GADGET EXPLOIT FRAMEWORK
Our x86 (Section 5) and SPARC (Section 6) gadget catalogs provide sufﬁcient tools for
an attacker to hand-code a custom return-oriented program exploit for a vulnerable ap-
plication, as demonstrated in practice for the x86 in Section 5.6. However, to illustrate
the fundamental power of return-oriented programming and the extensibility of our gadget
collection, we take our SPARC research a step further and actually implement a compiler
with a dedicated exploit programming language. Using the dedicated exploit language, an
attacker can craft new exploits using any number of our SPARC gadgets in mere minutes.
Though our compiler is SPARC-speciﬁc, an analogous one for the x86 could just as
easily be written. And, though we designed our own exploit language, a return-oriented
ACM Journal Name, Vol. V, No. N, Month 20YY.
Return-Oriented Programming
29
·
Inst. Seq.
Write system call number to %i0 of trap frame.
Preset
Assembly
m[&%i0] = num
%l7 = &%i0
ld [%i0], %l6
(trap frame) st %l6, [%l7]
%i0 = &num
ret
restore
Optional: Up to 6 system call arg seq’s (v[1-6]).
m[&%i ] = v
%l7 = &%i[0-5]
(arg frame)
%i0 = &v[1-6]
ld [%i0], %l6
st %l6, [%l7]
ret
restore
nop
Arg Frame: Trap arguments stored in %i[0-5]
ret
restore
Trap Frame: Invoke system call with number stored
in %i0 with %0[0-5] as arguments.
trap num
%i0 = num
(stored)
%o0 = v1
%o1 = v2
%o2 = v3
%o3 = v4
%o4 = v5
%o5 = v6
mov %i0, %g1
ta %icc, %g0+8
bcc,a,pt %icc,
4 Ahead
sra %o0,0,%i0
restore
%o0,0,%o0
cerror
ba
nop
ret
restore
Fig. 27. System Calls (syscall NUM)
backend could be added to a compiler suite such as LLVM, allowing exploits to be written
in any supported frontend language.
Our goals in writing a compiler are twofold: (1) make the process of creating different
exploit payloads for arbitrary vulnerabilities as easy as possible, and (2) provide the ex-
pressive power of a high-level language like C for return-oriented programs on SPARC.
To accomplish these goals, we implement a source-to-source translating compiler in Java
using the CUP and JFlex compiler generation tools.5
The exploit language implements C constructs such as variables, loops, pointers, func-
tion calls, and arithmetic operations. (Being a proof-of-concept, it omits some features like
user-deﬁned functions, structures, arrays, and ﬂoating-point operations.)
The compiler translates the exploit language into actual C source code, inserting calls to
functions that implement individual gadgets; the compiler’s output can then be compiled
into an exploit wrapper executable. The functions implementing individual gadgets form a
C gadget API, described in Section B.2 in the Web-only appendix.
Figure 28, for example, is an exploit that execs a shell.
8. EXAMPLE SPARC EXPLOIT
Beyond the simple x86 shellcode of Section 5.6 and the basic execve system call examples
in Section 7, we provide the a more complex return-oriented SPARC exploit to further
5Online: http://www2.cs.tum.edu/projects/cup/ and http://jflex.de/.
ACM Journal Name, Vol. V, No. N, Month 20YY.
30
·
Ryan Roemer et al.
= "/bin/sh";
var arg0
var arg0Ptr = &arg0;
var arg1Ptr = 0;
trap(59, &arg0, &(arg0Ptr), NULL);
Fig. 28. Example Exploit in Our High-Level Exploit Language
void foo(char *str) {
char buf[256];
strcpy(buf, str);
}
printf(&("Shell countdown:\n"));
var v1 = 10;
while (v1 > 0) {
printf(&("%d "), --v1);
}
void main(int argc, char **argv) {
foo(argv[1]);
}
printf(&("\n"));
system(&("/bin/sh"));
Fig. 29. Vulnerable Application
Fig. 30. Gadget Exploit Code
demonstrate the extensibility of the return-oriented programming technique once a little
abstraction is added. Additionally, we provide substantially more complicated example
return-oriented programs using our framework in Section 9.
8.1 Vulnerable Application
Our target application (shown in Figure 29) is a simple C program with an obvious buffer
overﬂow vulnerability, which we compile with SPARC non-executable stack protection
enabled. As discussed in Section 3.2.4, if we overﬂow foo() into the stack frame for
main(), when main() returns the register save area for %i6 will determine the next stack
frame, and %i7 will determine the next instruction to execute.
8.2 Exploit
We create a return-oriented program exploit by selecting SPARC gadgets and encoding
them into a buffer overﬂow payload consisting of “fake” exploit stack frames. We then
exec() a vulnerable application with our exploit payload.
8.2.1 Return-Oriented Program. We create a return-oriented “program” by combining
gadgets using our exploit language, as shown in Figure 30. Note that all gadget variables
are four bytes (and contiguous in order of declaration). The compiler can parse the follow-
ing exploit language code, generate intermediate variables, and break down longer strings
into four-byte chunks for use as gadget variables.
8.2.2 Exploit Payload. The compiler translates the exploit code into a series of gadget
variables, labels, and operations in a C exploit program. This program encodes the instruc-
tion sequences of each gadget as a series of fake exploit stack frames in a string buffer. For
gadget variable memory locations, we predesignate sufﬁcient stack address space below
the ﬁrst gadget exploit frame. The “safe” call stack frame is placed in lower memory than
the gadget variables. We pack the stack frame payload by encoding the %i6 and %i7 val-
ues for an instruction sequence in the previous exploit frame, so that the stack pointer and
program counter correspond to the correct register state (restored from the stack).
ACM Journal Name, Vol. V, No. N, Month 20YY.
Return-Oriented Programming
31
·
We assemble the exploit payload into an argv[1] payload and an envp[0] payload,
each having no NUL bytes. The argv[1] payload overﬂows the %i6 and %i7 save areas in
the vulnerable program’s main() to direct control to gadget exploit stack frame collection
in envp[0]. Although we use the split payload approach common for proof-of-concept
exploits [McDonald 1999; Ivaldi 2007], our techniques equally apply to packing the entire
exploit in a single string buffer. For efﬁciency, we pack each exploit stack frame into 64
bytes, just providing enough room for the save area for the 16 local and input registers.
The C exploit wrapper program passes the exploit argv and envp string arrays to the
vulnerable application via exec(). Our example uses 33 gadgets for 88 exploit stack
frames total, and the entire exploit payload is 5,572 bytes (with an extra 336 bytes for the
initial overﬂow).
8.3 Results
The exploit wrapper program (“exploit”) spawns the vulnerable application (from Sec-
tion 8.1) with our packed exploit payload, overﬂows the vulnerable buffer in foo() and
takes control, counting down and then spawning a shell.
The ﬁrst version of the payload took over 12 hours to craft by hand (manually research-
ing addresses and packing frames). Using our exploit compiler, we were able to create the
same exploit (testing and all) in about 15 minutes.
9. A MORE-COMPLEX FRAMEWORK EXPLOIT
The example exploit from Section 8 illustrates the ease with which return-oriented attacks
can be created using our framework from Section 7. But automation not only makes simple
payloads easy; it makes more complicated payloads possible. To illustrate our framework’s
capabilities, we present a more sophisticated example exploit. This exploit, which uses dy-
namic memory allocation, multiply-nested loops, and pointer arithmetic, demonstrate that
our SPARC compiler and exploit framework abstraction approaches the C language in ex-
pressiveness. We give another exploit example in Section B.5 in the Web-only appendix.
Figure 31 shows an exploit language program (“SelectionSort.rc”) that creates an array
of 10 random integers between 0-511, prints the unsorted array, sorts using selection sort,
and displays the ﬁnal, sorted array. The compiler produces a C language ﬁle, “Selection-
Sort.c”, which is compiled into the executable, “SelectionSort”. When the exploit program
is invoked, it overﬂows the vulnerable program from Figure 29, and displays the output
in Figure 32. The exploit payload for the sort program is just over 24 kilobytes, using 48
gadget variables, 152 gadgets, and 381 instruction sequences.
10. CONCLUSION
We have introduced return-oriented programming, a technique by which an attacker who
subverts a program’s control ﬂow can induce it to take arbitrary computation, without
injecting any new code. We have shown that the return-oriented programming problem ex-
tends to both the Linux/x86 and Solaris/SPARC platforms; subsequent work has extended
return-oriented programming to many additional platforms, buttressing our conjecture that
it is a universal issue. Moreover, we have demonstrated that return-oriented exploits are
practical to write, as the complexity of gadget combination is abstracted behind a program-
ming language and compiler. Subsequent work has automated gadget generation as well.
Since return-oriented exploits reuse existing code, they are not affected by an important
class of exploitation mitigations in use today: those that distinguish good code from bad.
ACM Journal Name, Vol. V, No. N, Month 20YY.
32
·
Ryan Roemer et al.
var i, j, tmp, len = 10;
var* min, p1, p2, a;
// Pointers
srandom(time(0));
a = malloc(40);
p1 = a;
printf(&("Unsorted Array:\n"));
for (i = 0; i < len; ++i) {
// Seed random()
// a[10]
// Initialize to small random values
*p1 = random() & 511;
printf(&("%d, "), *p1);
p1 = p1 + 4;
// p1++
}
p1 = a;
for (i = 0; i < (len - 1); ++i) {
min = p1;
p2 = p1 + 4;
for (j = (i + 1); j < len; ++j) {