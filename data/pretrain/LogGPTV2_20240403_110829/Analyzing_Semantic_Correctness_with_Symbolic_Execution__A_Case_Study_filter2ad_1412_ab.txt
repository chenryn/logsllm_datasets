and their origins could be used to assist root-clause analysis.
This is essentially trading space for time, and as we show later,
the memory overhead is modest. We refer to this as CPT v1.0.
2) Function Filtering: Another interesting consideration
in implementing CPT is what constitutes the origin of a
clause. Blindly copying source level information corresponding
to the current program counter during symbolic execution is
possible, but many times this does not result in a meaningful
outcome, because most real software systems are designed and
implemented in a modular manner using various libraries.
Consider again the path that returns 2 from the running
example (i.e., A (cid:54)= 11 ∧ A = 10), CPT v1.0 would give the
following provenance information, where the origins of the
clauses are shown to be from the instrumented C standard
library which implements the memcmp() function:
(Eq false
(Eq 11 (Read w8 0 A)))
(Eq 10 (Read w8 0 A))
@libc/string/memcmp.c:35
@libc/string/memcmp.c:35
While this is technically accurate, from the perspective of
analyzing the semantic correctness of a protocol implemen-
tation, this is not particularly meaningful. In such a setting,
one would most likely not be very interested in analyzing the
implementation of the underlying low-level library (e.g. the C
standard library) and would prefer to have instead the caller
of memcmp() to be considered as the origin of the clauses.
To this end, we propose to trace stack frames and ﬁlter out
functions that one would like to ignore in tracking origins of
clauses. One can, for example, conﬁgure the CPT to not dive
into functions from the C standard library through blacklisting
exported functions known from the API, and track instead the
caller of those functions as the clause origins, which would
produce the following CPT output for the same path that
returns 2, clearly more useful in understanding the semantics
of a protocol implementation:
(Eq false
(Eq 11 (Read w8 0 A)))
(Eq 10 (Read w8 0 A))
@Example1.c:3
@Example1.c:5
In addition to the C standard library, we have observed
that several cryptography implementations have their own
shim layers mimicking the standard library functions (e.g.
OPENSSL_memcmp() in OpenSSL). This is often done for
the sake of platform portability (e.g. use the C standard library
and some platform-speciﬁc extensions if they are available, and
use a custom imitation if they are not), and is sometimes used
to provide custom constant-time alternatives to avoid timing
side-channel leakages. All these additional functions can be
ﬁltered similarly in CPT as well.
We note that when ﬁltering function calls, there are two
possible heuristics. (1) One is to consider the most recent
caller of the blacklisted library functions as the clause origin.
(2) Another alternative is to consider function calls to have a
boundary, where once a blacklisted function has been called,
the execution stays in a blacklisted territory until that function
returns. While the ﬁrst heuristic is better at handling callback
functions, we have chosen heuristic 2, because fully blacklist-
ing all the library functions that CPT should not dive into (or,
equivalently, whitelisting all the possible origin functions from
a protocol implementation) could be complicated. For example,
speciﬁc implementations of C standard libraries may use their
own undocumented internal functions to implement functions
that are exported in the API. Acquiring this knowledge ahead
of time could be laborious and hinders generalization.
We use CPT v2.0 to refer to the CPT with function ﬁltering
heuristic 2. In the end, we implemented CPT v2.0 by adding
less than 750 lines of code to the KLEE toolchain. We chose
KLEE as our symbolic execution engine because it is widely
used, robust, and is actively maintained.
C. Performance Evaluation
We now evaluate the performance of KLEE [14] equipped
with CPT, and compare it with vanilla KLEE. The goal of
this evaluation is to demonstrate that both the memory and
runtime overheads induced by the CPT feature are tolerable,
as a signiﬁcant increase in either of the two would severely
hinder the practicality of using KLEE in software testing.
The overheads are reported by measuring time and memory
needed by KLEE (with and without CPT) to symbolically
Program
[
base64
basename
cat
chcon
chgrp
chmod
chown
chroot
cksum
comm
cp
cut
date
dd
df
dircolors
dirname
du
echo
env
expand
expr
factor
false
fmt
fold
head
hostid
hostname
KLEE
version
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Original
CPT v2.0
Paths
Completed
Time (s)
1789
1789
2097957
2091665
14070
14070
2261170.67
2248991.67
480351
477896
705117.33
703403.33
430347.00
427392.33
550473.67
543620.67
1496
1496
2552
2552
3895174.33
3857897.33
497.00
496.33
3824504.33
3826345
3564.67
3560.00
1069290.67
1075813.33
5016.33
4127.33
1019074.33
1007623.67
4167
4167
179.67
179.33
5134030
5081012
508649
508649
3466952.00
3377675.67
618634.33
619403.33
4653
4645
23
23
1330
1308
4498176
4426844
1445240
1445458
1022352.00
1021386.67
991770.67
994186.67
63.06
62.76
3,600.01
3,600.01
9.20
9.15
3,600.01
3,600.01
3,600.02
3,600.01
3,600.04
3,600.05
3,600.05
3,600.12
3,600.06
3,600.04
7.25
7.58
7.91
7.74
3,600.01
3,600.01
3,625.05
3,615.35
3,600.01
3,600.01
3,602.71
3,602.82
3,600.02
3,600.02
3,600.13
3,600.10
3,600.02
3,600.03
8.42
8.52
3,600.55
3600.52
3,600.01
3,600.01
942.72
925.12
3,600.01
3,600.01
3,600.09
3,600.14
3,600.06
3,600.06
0.08
0.08
3,610.77
3,610.72
3,600.01
3,600.01
3,600.02
3,600.03
3,600.01
3,600.04
3,600.01
3,600.01
(MB)
29.75
29.79
41.42
41.44
22.81
22.88
23.68
23.76
59.75
59.95
479.42
478.46
393.30
378.08
353.46
349.93
23.83
23.98
24.81
24.85
92.59
91.86
28.76
28.81
26.21
26.31
60.79
61.21
26.48
26.67
71.27
68.98
25.00
25.21
23.43
23.53
55.21
55.32
22.60
22.91
24.04
24.13
63.96
64.05
363.95
363.82