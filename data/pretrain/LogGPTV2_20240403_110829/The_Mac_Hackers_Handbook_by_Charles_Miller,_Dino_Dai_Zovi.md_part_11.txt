### LaunchServices Database Inspection

To inspect the LaunchServices database, you can use the following command:

```bash
/LaunchServices.framework/Versions/A/Support/lsregister -dump
```

#### Data Integrity Check
- **Status**: The database is seeded.
- **Bundle ID**: 55728
- **Path**: `/Applications/Safari.app`
- **Name**: Safari
- **Identifier**: `com.apple.Safari` (0x80007605)
- **Canonical ID**: `com.apple.safari` (0x8000030f)
- **Version**: 5525.20.1
- **Modification Date**: July 7, 2008, 8:57:33
- **Registration Date**: July 7, 2008, 9:03:34
- **Type Code**: `APPL`
- **Creator Code**: `sfri`
- **System Version**: 10.5
- **Flags**: apple-internal, relative-icon-path, handles-file-url, quarantined
- **Item Flags**: container, package, application, extension-hidden, native-app, scriptable, services, ppc, i386
- **Icon Path**: `Contents/Resources/compass.icns`
- **Executable Path**: `Contents/MacOS/Safari`
- **Inode**: 565157
- **Executable Inode**: 8145048
- **Container ID**: 32

#### File Type Claims
- **Claim ID**: 29988
  - **Name**: CSS style sheet
  - **Rank**: Default
  - **Roles**: Viewer
  - **Flags**: apple-internal, relative-icon-path
  - **Icon Path**: `Contents/Resources/document.icns`
  - **Bindings**: `.css`, `text/css`

- **Claim ID**: 30016
  - **Name**: PDF document
  - **Rank**: Default
  - **Roles**: Viewer
  - **Flags**: apple-internal, relative-icon-path
  - **Icon Path**: `Contents/Resources/document.icns`
  - **Bindings**: `.pdf`, `application/pdf`

### Using RCDefaultApp for Coherent Information

The information from `Info.plist` is stored in the LaunchServices database. A graphical tool called [RCDefaultApp](http://www.rubicode.com/Software/RCDefaultApp/) can query this database and present the information in a more coherent form.

#### Example: File Associations
- **File Extension**: `.atr`
- **Associated Application**: QuickTime Player

This file format is not commonly used, making it a potential target for fuzzing. For more details, refer to Chapter 5, "Finding Bugs."

### Safari's Attack Surface

Safari is a feature-rich web browser, and its extensive functionality increases its attack surface. This section explores how to determine the functionalities accessible to an attacker when a user visits a malicious website using Safari.

#### Native File Formats and MIME Types
Safari natively handles several file formats and MIME types. The following list includes all file types that Safari can handle, as derived from the `Info.plist` file:

```bash
$ cd /Applications/Safari.app/Contents
$ grep -A3 CFBundleTypeExtensions Info.plist | grep string
css
pdf
webarchive
syndarticle
webbookmark
webhistory
webloc
download
gif
html
htm
js
jpg
jpeg
jp2
txt
text
png
tiff
tif
url
ico
xhtml
xht
xml
xbl
svg
```

- **Remote vs. Local Handling**: Some file types, like `webarchive`, are only downloaded and not displayed when accessed over the internet.
- **Natively Rendered Formats**: PDF, JPG, PNG, TIF, ICO, SVG.
- **Parsed Formats**: JavaScript, HTML, XML.

#### Plug-ins and Additional File Types
Safari supports many more file types with the help of plug-ins. To view these, go to `Help âž¢ Installed Plug-ins` in Safari. For example:
- **Adobe Flash Plug-in**: Handles `.swf` files.
- **QuickTime Plug-in**: Supports 59 additional file formats.
- **Java Plug-in**: Provides another vector for attacks.

### URL Handlers and Associated Applications

Safari can launch various applications through URL handlers. For example:
- **Dictionary.app**: `dict://attack_surface`
- **Other Applications**: Address Book, iChat, iTunes, Help Viewer, iCal, Keynote, iPhoto, QuickTime Player, Terminal, Finder.

#### Potential Attacks via URL Handlers
- **VNC Session**: Via Screen Sharing.
- **SMB or AFP Session**: Via Finder.
- **DAAP or ITPC Session**: With iTunes.
- **RTSP Session**: With QuickTime Player.

### Safe File Types

Safari automatically opens many file types, but some are considered safe, neutral, or unsafe. The list of safe file types is defined in the `/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/System` file.

#### Risk Categories
- **LSRiskCategorySafe**: Totally safe; auto-open after download.
- **LSRiskCategoryNeutral**: No warning, but not auto-opened.
- **LSRiskCategoryUnsafeExecutable**: Triggers a warning.
- **LSRiskCategoryMayContainUnsafeExecutable**: Triggers a warning unless contents are safe or neutral.

These settings can be overridden by the contents of the following files:
- `/Library/Preferences/com.apple.DownloadAssessment.plist`
- `~/Library/Preferences/com.apple.DownloadAssessment.plist`

### Exploitation Techniques

Safari's ability to handle multiple file formats and launch applications provides attackers with multiple vectors for exploitation. For example, using JavaScript to exploit vulnerabilities within Safari's process space or launching a separate binary for predictable memory layout.

### Conclusion

Understanding the entry points for data into the Mac OS X system is crucial for identifying potential vulnerabilities. From the client side, there are numerous ways to get data processed by various applications and libraries. The remainder of this book will detail how to find and exploit vulnerabilities to gain control of the victim's machine.

### References

- [Hijacking a MacBook in 60 Seconds](http://blog.washingtonpost.com/securityfix/2006/08/hijacking_a_macbook_in_60_seco.html)
- [Launch Services Concepts](http://developer.apple.com/documentation/Carbon/Conceptual/LaunchServicesConcepts/LaunchServicesConcepts.pdf)
- [Mac OS X Hints](http://www.macosxhints.com/article.php?story=20031215144430486)
- [Unsanity Blog](http://unsanity.org/archives/000449.php)
- [Apple Support](http://support.apple.com/kb/HT2340?viewlocale=en_US)
- [MacEnterprise.org](http://macenterprise.org/content/view/201/84/)
- [MOAB-04-01-2007](http://projects.info-pull.com/moab/MOAB-04-01-2007.html)
- [MOAB-20-01-2007](http://projects.info-pull.com/moab/MOAB-20-01-2007.html)