/LaunchServices.framework/Versions/A/Support/lsregister -dump
Checking data integrity......done.
Status: Database is seeded.
…
bundle id: 55728
path: /Applications/Safari.app
name: Safari
identifier: com.apple.Safari (0x80007605)
canonical id: com.apple.safari (0x8000030f)
version: 5525.20.1
mod date: 7/7/2008 8:57:33
reg date: 7/7/2008 9:03:34
type code: ‘APPL’
creator code: ‘sfri’
sys version: 10.5
flags: apple-internal relative-icon-path handles-file-
url quarantined
item flags: container package application extension-hidden
native-app scriptable services ppc i386
icon: Contents/Resources/compass.icns
executable: Contents/MacOS/Safari
inode: 565157
exec inode: 8145048
container id: 32
library:
library items:
…
--------------------------------------------------------
claim id: 29988
name: CSS style sheet
rank: Default
roles: Viewer
flags: apple-internal relative-icon-path
icon: Contents/Resources/document.icns
bindings: .css, text/css
--------------------------------------------------------
claim id: 30016
name: PDF document
9955336633cc0033..iinndddd 7744 11//2255//0099 44::4400::2255 PPMM
Chapter 3 ■ Attack Surface 75
rank: Default
roles: Viewer
flags: apple-internal relative-icon-path
icon: Contents/Resources/document.icns
bindings: .pdf, application/pdf
--------------------------------------------------------
…
The information from Info.plist is seen in the database. A graphical tool called
RCDefaultApp (http://www.rubicode.com/Software/RCDefaultApp/) queries
the LaunchServices database and presents the information in a more coherent
form; see Figure 3-4.
Figure 3-4: RCDefaultApp reveals that files with an atr extension are associated with
QuickTime Player.
In this fi gure, RCDefaultApp indicates that any fi le with the extension “.atr”
will be opened by the QuickTime Player. This particular fi le format is not used
very often and therefore the code may not be well tested. Such obscure fi le
formats can be fertile grounds for fuzzing; see Chapter 5, “Finding Bugs.”
RCDefaultApp can be used to fi nd the application for each fi le format that the
operating system recognizes.
Safari
Safari is the most feature-rich web browser in existence. Features, of course,
require code, and additional code increases the attack surface. In this section
you will see how to determine all the functionality accessible to an attacker
when a Safari web browser visits the attacker’s website.
Safari handles a number of fi le formats and MIME types natively and has
extensive support for fi le formats with built-in plug-ins. The LaunchServices
9955336633cc0033..iinndddd 7755 11//2255//0099 44::4400::2255 PPMM
76 Part I ■ Mac OS X Basics
database (derived from the Info.plist fi le and accessible via RCDefaultApp or from
the Info.plist fi le directly) reveals the fi le types that are handled natively:
$ cd/Applications/Safari.app/Contents
$ grep -A3 CFBundleTypeExtensions Info.plist | grep string
css
pdf
webarchive
syndarticle
webbookmark
webhistory
webloc
download
gif
html
htm
js
jpg
jpeg
jp2
txt
text
png
tiff
tif
url
ico
xhtml
xht
xml
xbl
svg
This list includes all fi le types handled remotely or locally, so they should
be checked individually if you are looking for particular fi le types to attack
remotely. For example, browsing to a “webarchive” fi le over the Internet will
only download the fi le, not display it in Safari. Safari will natively render PDF,
JPG, PNG, TIF, ICO, and SVG image formats. It also parses JavaScript, HTML,
and XML.
Of course, with the help of plug-ins, there are many more fi le types supported.
The easiest way to view these fi le types is to go to Help ➢ Installed Plug-ins in
Safari; see Figure 3-5.
Figure 3-5 indicates that Safari handles .swf fi les with the Adobe Flash plug-
in, which is installed by default. The QuickTime plug-in reveals an additional
59 fi le formats supported by Safari. It is hard to imagine a web browser that has
no bugs when parsing more than 60 fi le formats. The Java plug-in represents
yet another vector of attack through Safari.
9955336633cc0033..iinndddd 7766 11//2255//0099 44::4400::2255 PPMM
Chapter 3 ■ Attack Surface 77
Figure 3-5: The list of installed Safari plug-ins and their associated file types
All of Safari’s Children
In addition to the formats Safari handles through native code and multimedia
plug-ins, it can spawn a large number of other applications through URL han-
dlers. Consult RCDefaultApp for a complete list; see Figure 3-6.
The number of possibilities is astounding. Want to launch the Dictionary.
app program and look up the defi nition of attack surface? Just go to the URL
dict://attack surface; see Figure 3-7. Although there isn’t a large variety of
data that can be passed to this application, it was undoubtedly not designed to
withstand malicious input.
9955336633cc0033..iinndddd 7777 11//2255//0099 44::4400::2255 PPMM
78 Part I ■ Mac OS X Basics
Figure 3-6: RCDefaultApp reveals all the programs that are associated with various URLs,
in this case webcal://
Figure 3-7: The Dictionary.app program launched from within Safari
Other interesting programs that can be launched include Address Book, iChat,
iTunes, Help Viewer, iCal, Keynote, iPhoto, QuickTime Player, and, of course,
Terminal and Finder. Sometimes the amount of data an attacker can input into
these programs is very limited, but at the very least, simply by having a victim
follow a link in Safari, it is possible to have the victim do the following:
■ Open a VNC session via the Screen Sharing application
■ Start an SMB or AFP session via Finder
■ Start a DAAP or ITPC session with iTunes
■ Begin an RTSP session with QuickTime Player
9955336633cc0033..iinndddd 7788 11//2255//0099 44::4400::2255 PPMM
Chapter 3 ■ Attack Surface 79
Besides being a way to launch other processes, the URL handlers themselves
may have vulnerabilities. For example, iPhoto and iChat have been guilty of
format-string vulnerabilities in the way they handle URLs.
This means simply by enticing a user to click on a link, the attacker may
take advantage of a bug in the way Safari natively handles HTML, JavaScript,
a handful of image formats, anything QuickTime Player plays, or any bugs in
a variety of other software on the system—including Finder and iTunes. There
is a very large attack surface for Safari!
Safe File Types
One of the great things about Safari, from a usability (or attack) perspective, is
that it will open many fi le types automatically. Many security warnings issued
against Apple will contain the phrase “Turn off automatic opening of safe fi les,”
but what exactly is a safe fi le and which fi le types are considered safe?
The answer to this question can be found in the /System/Library/
CoreServices/CoreTypes.bundle/Contents/Resources/System fi le. This is an
XML fi le that contains a list of fi le types (and MIME types and extensions)
considered safe, neutral, or unsafe. The following is an excerpt from the begin-
ning of this fi le.
LSRiskCategorySafe
LSRiskCategoryContentTypes
com.adobe.encapsulated-postscript
com.adobe.illustrator.ai-image
com.adobe.pdf
com.adobe.photoshop-image
com.adobe.postscript
com.apple.dashboard-widget
com.apple.ical.ics
com.apple.icns
com.apple.installer-distribution-
package
com.apple.installer-package
com.apple.keynote.key
com.apple.pict
com.apple.protected-mpeg-4-audio
com.apple.quicktime-image
…
9955336633cc0033..iinndddd 7799 11//2255//0099 44::4400::2255 PPMM
80 Part I ■ Mac OS X Basics
The possible categories include the following:
LSRiskCategorySafe: Totally safe; Safari will auto-open after download
LSRiskCategoryNeutral: No warning, but not auto-opened
LSRiskCategoryUnsafeExecutable: Triggers a warning “This fi le is an
application…”
LSRiskCategoryMayContainUnsafeExecutable: This is for things like
archives that contain an executable. It triggers a warning unless Safari
can determine all the contents are safe or neutral
These settings can be overridden by the contents of the files /Library/
Preferences/com.apple.DownloadAssessment.plst and ~/Library/Preferences/
com.apple.DownloadAssessment.plst, which represent changes on a system-
wide or user level, respectively. Using this information, it is possible to deter-
mine exactly which fi les Safari will automatically launch.
Having Your Cake
Safari’s ability to handle many fi le formats through plug-ins and being able to
launch applications means that often it is possible for an attacker to choose which
way they want their malicious content to be handled, either by Safari or by an
accompanying application. For example, in Chapter 8, “Heap Overfl ows,” you’ll
learn to write reliable exploits in Safari by using JavaScript. It might be convenient
to exercise a vulnerability within Safari’s process space. If a bug is discovered
that is exploitable only after hitting the Play button in QuickTime Player, it is
still possible to exercise the bug in Safari. The following HTML code embeds in
a web page any fi le that QuickTime Player can process, and plays it.
Accessing this HTML will automatically play the movie , in this case good
.mov. Any corruption will occur in the same process space as Safari (including
the JavaScript heap).
Conversely, if you would rather exploit a separate binary for this type of
vulnerability, that is possible too. This might be necessary if Safari were in a
sandbox (which it isn’t currently) or if you wanted to make some assumptions
9955336633cc0033..iinndddd 8800 11//2255//0099 44::4400::2255 PPMM
Chapter 3 ■ Attack Surface 81
about memory layout, since Safari may have visited thousands of sites and be in
an unknown state, but a newly launched application might be in a predictable
state. The key to this is the way that Safari handles many fi le types automati-
cally, including gzip fi les. For many such fi les, if you access a gzip version of
the fi le in Safari, it will automatically download, unzip it, and launch it in the
default application for that type (according to LaunchServices). For example, if
you’d rather exploit Preview than Safari with a GIF bug, simply gzip the image
fi le and have the victim surf to the gzipped version. Safari will unzip it and
render it with Preview.
Conclusion
A wise attacker will survey all the opportunities for attack and try the weakest
spot. To do this, it is important to understand all the places where data enters
the Mac OS X system. From the server side there aren’t many possibilities unless
the user has enabled some additional software. From the client side, however,
there are many ways to get data processed by a large number of client applica-
tions and libraries. At this point it is up to the attacker to pick a spot and start
looking for problems. The remainder of this book will outline how to fi nd a
vulnerability in a particular bit of code and how to exploit it to gain control of
the victim’s machine.
References
http://blog.washingtonpost.com/securityfix/2006/08/hijacking_a_
macbook_in_60_seco.html
http://developer.apple.com/documentation/Carbon/Conceptual/
LaunchServicesConcepts/LaunchServicesConcepts.pdf
http://www.macosxhints.com/article.php?story=20031215144430486
http://www.macosxhints.com/article.php?story=2004100508111340&
query=LaunchServices
http://unsanity.org/archives/000449.php
http://support.apple.com/kb/HT2340?viewlocale=en_US
http://macenterprise.org/content/view/201/84/
http://projects.info-pull.com/moab/MOAB-04-01-2007.html
http://projects.info-pull.com/moab/MOAB-20-01-2007.html
9955336633cc0033..iinndddd 8811 11//2255//0099 44::4400::2255 PPMM
9955336633cc0033..iinndddd 8822 11//2255//0099 44::4400::2255 PPMM
Par t
II
Discovering Vulnerabilities
9955336633cc0044..iinndddd 8833 11//2255//0099 44::4400::4466 PPMM
9955336633cc0044..iinndddd 8844 11//2255//0099 44::4400::4466 PPMM
CHAPTER
4
Tracing and Debugging
When looking for bugs or trying to exploit them, it is necessary to peer inside
the workings of applications. This is commonly done with the use of a debug-
ger, such as the GNU debugger that comes with Xcode. There are some other
useful tools for this purpose. One powerful feature that debuted in Leopard is
DTrace, which is a kernel-level tracing API. There is also a Python interface to
the debugging mechanisms in Mac OS X. Nevertheless, Apple wants some of
their applications to not be traced with these mechanisms and tries to prevent
this action. We’ll discuss ways around this prevention to allow tracing of even
the most sensitive applications.
Pathetic ptrace
If you come from a Linux background, you may be familiar with the ptrace
debugging facilities, which the Linux version of the GNU Debugger (GDB) is
based on. It normally provides methods to attach and detach processes, read
and write values to and from memory and registers, and offers mechanisms for
program control such as single-stepping and continuing. This is not the case
in Mac OS X, however.
In Mac OS X, there is indeed a ptrace() system call, but it is not fully func-
tional. It allows for attaching and detaching a process, stepping, and continuing,
85
9955336633cc0044..iinndddd 8855 11//2255//0099 44::4400::4466 PPMM
86 Part II ■ Discovering Vulnerabilities
but does not allow for memory or registers to be read or written. Obviously a
debugger without these functions would be useless.
One other Mac OS X ptrace feature worth discussing is the PT_DENY_
ATTACH ptrace request. This nonstandard request, available only on the Mac
OS X version of ptrace, can be set by an application and denies future requests
for processes to attach to it. This is a simple anti-debugging mechanism imple-
mented mostly for applications such as iTunes. We’ll discuss this more, as well
as ways of circumventing it, later in the chapter.
Good Ol’ GDB
Aside from the peculiarities discussed in the previous section, GDB pretty