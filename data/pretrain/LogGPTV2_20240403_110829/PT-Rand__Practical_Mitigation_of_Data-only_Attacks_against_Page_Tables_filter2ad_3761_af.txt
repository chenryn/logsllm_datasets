for an operating system kernel. It also securely stores the
policies for safeguarding its virtualized guests inside a memory
region that is only accessible by the hypervisor. However, this
solution also comes with signiﬁcant overhead of up to 200%,
and suffers from the constraints mentioned already above,
i.e., requiring virtualization extensions and deployment of a
hypervisor.
SPROBES and TZ-RKP both leverage hardware trust an-
chors [5, 20]. In particular, both issue run-time checks for
the kernel’s memory management functions. These checks
are executed inside the hardware-enabled secure environment
ARM TrustZone. This secure environment cannot be tampered
with by any other software. The overhead of TZ-RKP is up
to 7.56%. In addition to the higher overhead, SPROBES and
TZ-RKP rely on dedicated hardware trust anchors to protect
page tables.
SKEE implements similar run-time checks to SPROBES
and TZ-RKP [4]. It utilizes the fact that ARM provides two
registers for paging. This enables SKEE to isolate the run-time
checks from the kernel. The overhead for protecting memory
management varies between 3% and 15%.
Policy-based
approaches
[54]
like HyperSafe
and
SPROBES/TZ-RKP [5, 20] mark pages that contain the
page table structures as read-only to prevent malicious
modiﬁcations. However, when the operating system needs to
update the page tables these defenses mark the corresponding
pages temporarily writable which opens a time window in
which the attacker can concurrently modify page tables entries
on the same page.
PaX/Grsecurity [50] provide a patch with various tech-
niques to further harden the Linux kernel. Amongst others
the patch aims to prevent information leaks, and randomizes
important data structures at compile time. However, it does not
deploy any techniques to explicitly prevent data-only attacks
against the page table.
Windows 10 [28] recently released an update to randomize
the base address which is used to compute the address of
page table entries. However, the randomized base address is
not protected against information disclosure attacks which is
why the attack we implemented in Section VI-A will also
work against Windows 10. In contrast, PT-Rand mitigates
information-disclosure attacks by keeping the randomization
secret in a register, which cannot be accessed by the attacker,
and by obfuscating all pointers to the page tables.
IX. CONCLUSION
Exploitation of software is a pre-dominant attack vector
against modern computing platforms. In particular, exploits
against the kernel are highly dangerous as they allow the
attacker to execute malicious code with operating system
privileges. The research community has introduced several
13
classes of exploit mitigation techniques that signiﬁcantly raise
the bar of such attacks. However, these defenses build on the
assumption that the attacker cannot alter the kernel’s page
tables which is the main place to manage access permissions
of code and data memory. For the ﬁrst time, we introduce a
highly-efﬁcient randomization technique that enables effective
protection against page table corruption attacks for a contem-
porary Linux-based system. Our open-source solution, called
PT-Rand, randomizes the location of all page tables, and obfus-
cates all references to the page tables without requiring extra
hardware, costly hypervisors, or inefﬁcient integrity checks.
PT-Rand is a practical and necessary extension to complement
existing mitigation technologies such as control-ﬂow integrity,
code randomization, and code pointer integrity.
ACKNOWLEDGMENT
This work was supported in part by the German Sci-
ence Foundation (project S2, CRC 1119 CROSSING), the
European Union’s Seventh Framework Programme (609611,
PRACTICE), and the German Federal Ministry of Education
and Research within CRISP.
REFERENCES
[1] M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti. Control-ﬂow integrity
principles, implementations, and applications. ACM Transactions on
Information System Security, 13, 2009.
[2] Andi Kleen. x86_64 Linux Virtual Memory Map. http://www.kernel.
org/doc/Documentation/x86/x86_64/mm.txt, 2004.
[3] ARM. ARM architecture reference manual.
http://silver.arm.com/
download/ARM_and_AMBA_Architecture/AR150- DA- 70000- r0p0-
00bet9/DDI0487A_h_armv8_arm.pdf, 2015.
[4] A. Azab, K. Swidowski, R. Bhutkar, J. Ma, W. Shen, R. Wang, and
P. Ning. Skee: A lightweight secure kernel-level execution environment
In 23rd Annual Network and Distributed System Security
for arm.
Symposium, NDSS, 2016.
[5] A. M. Azab, P. Ning, J. Shah, Q. Chen, R. Bhutkar, G. Ganesh, J. Ma,
and W. Shen. Hypervision across worlds: Real-time kernel protection
from the arm trustzone secure world. In ACM SIGSAC Conference on
Computer and Communications Security, CCS, 2014.
[6] M. Backes and S. Nürnberger. Oxymoron: Making ﬁne-grained memory
In 23rd USENIX
randomization practical by allowing code sharing.
Security Symposium, USENIX Sec, 2014.
[7] S. Bhatkar and R. Sekar. Data space randomization. In 5th Conference
on Detection of Intrusions and Malware and Vulnerability Assessment,
DIMVA, 2008.
[8] D. Bigelow, T. Hobson, R. Rudd, W. Streilein, and H. Okhravi. Timely
In ACM SIGSAC
rerandomization for mitigating memory disclosures.
Conference on Computer and Communications Security, CCS, 2015.
[9] C. Cadar, P. Akritidis, M. Costa, J.-P. Martin, and M. Castro. Data ran-
domization. Technical Report MSR-TR-2008-120, Microsoft Research,
2008.
[10] S. Chen, J. Xu, E. C. Sezer, P. Gauriar, and R. K. Iyer. Non-control-
data attacks are realistic threats. In 14th USENIX Security Symposium,
USENIX Sec, 2005.
[11] M. Conti, S. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen, M. Negro,
M. Qunaibit, and A.-R. Sadeghi. Losing control: On the effectiveness of
control-ﬂow integrity under stack attacks. In ACM SIGSAC Conference
on Computer and Communications Security, CCS, 2015.
[12] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi,
S. Brunthaler, and M. Franz. Readactor: Practical code randomization
In 36th IEEE Symposium on Security
resilient to memory disclosure.
and Privacy, S&P, 2015.
[13] J. Criswell, N. Dautenhahn, and V. Adve. Kcoﬁ: Complete control-
In 35th IEEE
ﬂow integrity for commodity operating system kernels.
Symposium on Security and Privacy, S&P, 2014.
[14] CVE Details. Linux kernel: Vulnerability statistics.
cvedetails.com/product/47/Linux-Linux-Kernel.html, 2016.
http://www.
[15] L. Davi, C. Liebchen, A.-R. Sadeghi, K. Z. Snow, and F. Monrose.
Isomeron: Code randomization resilient to (Just-In-Time) return-oriented
programming. In 22nd Annual Network and Distributed System Security
Symposium, NDSS, 2015.
[16] N. A. Economou and E. E. Nissim. Getting physical extreme abuse
of intel based paging systems.
https://www.coresecurity.com/system/
ﬁles/publications/2016/05/CSW2016%20- %20Getting%20Physical%
20-%20Extended%20Version.pdf, 2016.
[17] J. Edge. Kernel address space layout randomization.
Articles/569635, 2013.
http://lwn.net/
[18] S. Esser. iOS kernel exploitation. In Blackhat Europe, BH EU, 2011.
[19] X. Ge, N. Talele, M. Payer, and T. Jaeger. Fine-grained control-ﬂow
In 1st IEEE European Symposium on
integrity for kernel software.
Security and Privacy, Euro S&P, 2016.
[20] X. Ge, H. Vijayakumar, and T. Jaeger. SPROBES: Enforcing kernel code
integrity on the trustzone architecture. In Mobile Security Technologies,
MoST, 2014.
[21] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum. Enhanced operating
system security through efﬁcient and ﬁne-grained address space random-
ization. In 21st USENIX Security Symposium, USENIX Sec, 2012.
[22] Y. Gu, Y. Fu, A. Prakash, Z. Lin, and H. Yin. Os-sommelier: Memory-
only operating system ﬁngerprinting in the cloud. In 3rd ACM Sympo-
sium on Cloud Computing, SoCC, 2012.
[23] H. Hu, Z. L. Chua, S. Adrian, P. Saxena, and Z. Liang. Automatic gen-
eration of data-oriented exploits. In 24th USENIX Security Symposium,
USENIX Sec, 2015.
[24] H. Hu, S. Shinde, A. Sendroiu, Z. L. Chua, P. Saxena, and Z. Liang.
Data-oriented programming: On the expressiveness of non-control data
attacks. In 37th IEEE Symposium on Security and Privacy, S&P, 2016.
[25] R. Hund, T. Holz, and F. C. Freiling. Return-oriented rootkits: Bypassing
kernel code integrity protection mechanisms. In 18th USENIX Security
Symposium, USENIX Sec, 2009.
[26] R. Hund, C. Willems, and T. Holz. Practical timing side channel attacks
against kernel space ASLR. In 34th IEEE Symposium on Security and
Privacy, S&P, 2013.
[27] Intel.
Intel 64 and IA-32 architectures software developer’s manual.
http://www-ssl.intel.com/content/www/us/en/processors/architectures-
software-developer-manuals.html, 2015.
[28] A. Ionescu. Owning the image object ﬁle format, the compiler toolchain,
and the operating system: Solving intractable performance problems
through vertical engineering. www.alex-ionescu.com/?p=323, 2016.
[29] Y. Kim, R. Daly, J. Kim, C. Fallin, J. H. Lee, D. Lee, C. Wilkerson,
K. Lai, and O. Mutlu. Flipping bits in memory without accessing them:
In 41st Annual
An experimental study of dram disturbance errors.
International Symposium on Computer Architecture, ISCA, 2014.
[30] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song.
In 11th USENIX Symposium on Operating
Code-pointer integrity.
Systems Design and Implementation, OSDI, 2014.
[31] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz. SoK: Automated
software diversity. In 35th IEEE Symposium on Security and Privacy,
S&P, 2014.
[32] LTP developer. The linux test project. https://linux-test-project.github.
io/, 2016.
[33] K. Lu, C. Song, B. Lee, S. P. Chung, T. Kim, and W. Lee. Aslr-guard:
Stopping address space leakage for code reuse attacks. In ACM SIGSAC
Conference on Computer and Communications Security, CCS, 2015.
[34] T. Mandt. Attacking the ios kernel: A look at "evasi0n". http://www.
nislab.no/content/download/38610/481190/ﬁle/NISlecture201303.pdf,
2013.
[35] L. McVoy and C. Staelin. Lmbench: Portable tools for performance
14
[46] H. Shacham. The geometry of innocent ﬂesh on the bone: return-into-
libc without function calls (on the x86). In ACM SIGSAC Conference
on Computer and Communications Security, CCS, 2007.
[47] H. Shacham, M. Page, B. Pfaff, E. Goh, N. Modadugu, and D. Boneh.
On the effectiveness of address-space randomization. In ACM SIGSAC
Conference on Computer and Communications Security, CCS, 2004.
[48] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and
A. Sadeghi.
Just-in-time code reuse: On the effectiveness of ﬁne-
grained address space layout randomization. In 34th IEEE Symposium
on Security and Privacy, S&P, 2013.
[49] C. Song, B. Lee, K. Lu, W. R. Harris, T. Kim, and W. Lee. Enforcing
In 23rd Annual
kernel security invariants with data ﬂow integrity.
Network and Distributed System Security Symposium, NDSS, 2016.
[50] B. Spengler.
Grsecurity.
http://grsecurity.net, 2016.
Internet [May, 2016]. Available on:
[51] L. Szekeres, M. Payer, T. Wei, and D. Song. SoK: Eternal war in
memory. In 34th IEEE Symposium on Security and Privacy, S&P, 2013.
https://pax.grsecurity.net/docs/PaXTeam-
[52] P. Team. RAP: RIP ROP.
H2HC15-RAP-RIP-ROP.pdf, 2015.
[53] Trusted Computing Group. Tpm 1.2 protection proﬁle.
https://www.
trustedcomputinggroup.org/tpm-1-2-protection-proﬁle/, 2016.
[54] Z. Wang and X. Jiang. Hypersafe: A lightweight approach to provide
lifetime hypervisor control-ﬂow integrity. In Security and Privacy (SP),
2010 IEEE Symposium on, pages 380–395. IEEE, 2010.
[55] R. Wojtczuk. Subverting the xen hypervisor. In Blackhat USA, BH US,
2008.
[56] R. Wojtczuk. Tsx improves timing attacks against kaslr.
https://labs.
bromium.com/2014/10/27/tsx-improves-timing-attacks-against-kaslr/,
2014.
analysis. In USENIX Technical Conference, ATEC, 1996.
[36] T. Müller, F. C. Freiling, and A. Dewald. Tresor runs encryption securely
outside ram. In 20th USENIX Security Symposium, USENIX Sec, 2011.
[37] MWR Labs. MWR Labs Pwn2Own 2013 write-up - kernel exploit.
http://labs.mwrinfosecurity.com/blog/2013/09/06/mwr-labs-pwn2own-
2013-write-up---kernel-exploit, 2013.
[38] MWR Labs. Windows 8 kernel memory protections bypass.
http://
labs.mwrinfosecurity.com/blog/2014/08/15/windows-8-kernel-memory-
protections-bypass, 2014.
[39] V. Pappas, M. Polychronakis, and A. D. Keromytis. Transparent ROP
In 22nd USENIX
exploit mitigation using indirect branch tracing.
Security Symposium, USENIX Sec, 2013.
[40] Perception Point Research Team. Analysis and exploitation of a linux
kernel vulnerability (cve-2016-0728).
http://perception-point.io/2016/
01/14/analysis- and- exploitation- of- a- linux- kernel- vulnerability- cve-
2016-0728/, 2016.
[41] Phoronix. Phoronix test suite.
2016.
http://www.phoronix-test-suite.com/,
[42] S. Renaud. Technical analysis of the windows win32k.sys keyboard lay-
out stuxnet exploit.
http://web.archive.org/web/20141015182927/http:
//www.vupen.com/blog/20101018.Stuxnet_Win32k_Windows_Kernel_
0Day_Exploit_CVE-2010-2743.php, 2010.
[43] R. Riley, X. Jiang, and D. Xu. Guest-transparent prevention of kernel
In 11th International
rootkits with vmm-based memory shadowing.
Symposium on Research in Attacks, Intrusions and Defenses, RAID,
2008.
[44] F. L. Sang, V. Nicomette, and Y. Deswarte. I/O attacks in Intel PC-based
architectures and countermeasures. In SysSec Workshop, SysSec, 2011.
[45] A. Seshadri, M. Luk, N. Qu, and A. Perrig. Secvisor: A tiny hypervisor
to provide lifetime kernel code integrity for commodity oses. ACM
SIGOPS Operating Systems Review, 41(6):335–350, 2007.
15