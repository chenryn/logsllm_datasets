codes to take advantage of “lucky” channel conditions. We term this
the hedging effect. Intuitively, hedging is the ability to decode in
less time when the noise is low, without sacriﬁcing reliability. This
property is more general than the LDPC comparison. In particular,
Figure 7 demonstrates that the rateless spinal code outperforms
every rated version of the spinal code at every SNR.
Constant SNR means that the distribution of the noise does not
vary, but the realized noise does vary substantially over time. Be-
cause rated codes cannot adapt to realized noise, they must be risk-
averse to ensure a high probability of decoding. Hence, they tend to
occupy the channel for longer than strictly necessary. By contrast,
rateless codes can use the channel for less time when the realized
noise is small and thus achieve higher rates. Due to the law of large
Figure 7: Throughput of the rateless spinal code compared to
various rated versions of the spinal code.
numbers (precisely, concentration), this effect diminishes with in-
creasing message length. For the same reason, rated codes approach
capacity only for long message sizes.
Small code block sizes. The results presented above picked favor-
able code block (message) sizes for each code. For many Internet
applications, including audio and games, the natural packet size
is in the 64-256-byte range, rather than tens of thousands of bits.
Understanding the performance of different codes in this regime
would help us evaluate their effectiveness for such applications.
Figure 8 shows the rates achieved by spinal codes, Raptor, and
Strider at three small packet sizes: 1024, 2048, and 3072 bits. Each
column shows the results obtained for data transfers in the SNR
range 5 to 25 dB. In this range, spinal codes outperform Raptor by
between 14% and 20% for these packet sizes.
The gains over Strider are substantial (2.5× to 10×) even when
puncturing is used. To handle small packets in Strider, we used
the same number of layers and reduced the number of symbols per
layer, which is a reasonable method. It is possible that reducing the
number of layers might help, but it is unclear how best to handle
smaller sizes in Strider.
8.3 Hardware Over-the-air Results
Figure 9 shows the results obtained by measuring the Airblue
spinal code implementation in over-the-air experiments for n =
192 bits, k = 4, c = 7, d = 1, and B = 4. Each + sign in the
ﬁgure is the rate measured by transmitting at least 20 messages
over a 10 MHz band. The measured on-air decoding performance
closely tracks the results of a similarly conﬁgured software simulator
across a large SNR range (the range achievable using commodity
USRP2/RFX2400 radio frontends), providing important real-world
validation of the code’s performance. Differences include effects of
ﬁxed-point precision, but should not affect the take-away point: a
reasonable implementation is both achievable and operational.
505101520253035SNR (dB)0123456789rate (bits per symbol)Shannon boundSpinal, n=256, k=4, B=256Spinal, n=1024, k=4, B=256Strider, n=50490Strider+, n=50490LDPC envelopeRaptor, n=9500 20dBSNR range0.00.20.40.60.81.0fraction of capacity achievedspinalraptorstriderstrider+505101520253035SNR (dB)876543210gap to capacity (dB)Spinal, n=256, k=4, B=256Spinal, n=1024, k=4, B=256Strider, n=50490Strider+, n=50490LDPC envelopeRaptor, n=9500505101520253035SNR (dB)0123456789rate (bits per symbol)Shannon boundSpinal, ratelessSpinal, fixed rate68101214SNR (dB)012345rate (bits per symbol)Shannon boundSpinal, ratelessSpinal, fixed rateFigure 8: Average fraction of capacity in range 5-20 dB for
spinal codes, Raptor and Strider at different message sizes.
Figure 10: Performance of spinal codes and strider in a simula-
tion model of a Rayleigh fading environment. The decoders are
given exact fading channel parameters.
Figure 9: Rates achieved by the hardware over-the-air experi-
ment, compared to a software simulation with similar parame-
ters. Throughput (right axis) shows equivalent link rate for a
20 MHz 802.11a/g channel.
Figure 11: Performance of the AWGN decoders on the Rayleigh
simulation. This experiment examines the decoders’ resilience
to varying or inaccurate channel information.
8.4 Fading Channel Performance
This section describes experiments with spinal codes and Strider
(with our puncturing enhancement) over a fading channel model [36].
The model is a Rayleigh fading environment with two parame-
ters (σ 2,τ). The transmitted signal x is transformed according to
y = hx + n, where y is the received signal, n is Gaussian noise of
power σ 2, and h is a complex fading coefﬁcient randomized every
τ symbols to a complex number with uniform phase and Rayleigh
magnitude.
The ﬁrst experiment shows the performance of the codes on fading
channels, with both codes incorporating detailed fading information.
In the second experiment, neither decoder is given fading infor-
mation. As such, this experiment evaluates the robustness of the
codes to varying conditions and to inaccurate estimates of channel
parameters, as might occur in practice.
Figures 10 and 11 show the results of both experiments for three
different coherence times, speciﬁed as multiples of one symbol time.
In both graphs, the top curve is the capacity of the fading channel.
It is noteworthy that spinal codes perform roughly similarly at all
the measured coherence times when fading information is available.
Compared to Strider+, at 10 dB, the improvement is between 11%
and 20% (without puncturing in Strider, the gains are between 19%
and 28%). At an SNR of 20 dB, the gains are between 13% and
20% (without puncturing, between 28% and 33%). When no fading
information is available, spinal codes achieve much higher rates than
Strider+ (Figure 11).
These results show that spinal codes perform well across a wide
range of time-varying conditions, and that spinal decoding is robust
even when the decoder does not have accurate fading information.
8.5 Exploration of Spinal Code Parameters
Collision probability. Spines for two distinct messages can con-
verge when there is a hash collision, i.e., h(si, ¯mi) = h(s0
i). Colli-
i, ¯m0
sions degrade the decoder’s ability to discriminate between candidate
messages with different preﬁxes. The probability that colliding mes-
sages exist can be made exponentially small in the message length n
by choosing ν ≥ 3n (cf. the Birthday Paradox).
In practice, it is not necessary to eliminate all collisions to achieve
high performance. A collision potentially reduces performance if
it occurs between the correct message and another candidate in the
beam. Each iteration explores B2kd nodes. In a decode attempt, a
node collides with the correct one with probability ∼ (n/k)2−ν B2kd,
so these events are rare if ν (cid:29) log(B) + log(n) + kd. For example,
with n = 256, k = 4, B = 256, d = 1, and ν = 32, a collision occurs
only once per 214 decodes on average.
Picking k and B. Figure 12 shows that k = 4 performs well across
a range of compute budgets (the x axis is proportional to B2k/k).
Smaller values of k under-perform at higher SNRs; larger values of k
don’t do well at low compute budgets. Each decoder can use a value
of B according to its price/performance ratio. As computation be-
comes cheaper, increasingly higher budgets can be used, translating
to higher B, to get better performance. From this graph, we conclude
that k = 4 is a good choice for the SNR range we are targeting. For
our experimental compute budgets, B = 256 is a reasonable choice.
Picking c. The number of output bits, c, limits the maximum
throughput. When c is small, even if the channel’s SNR can support
a high rate, there are simply too few bits transmitted to decode with
high throughput. Figure 13 shows that c = 6 is the right choice for
the range of SNR values we are concerned with.
Peak-to-average power ratio (PAPR). A practical modulation
scheme should have a modest PAPR, deﬁned in terms of the output
max|y(t)|2
waveform y(t) as 10· log10
mean|y(t)|2 . High PAPR is a problem be-
cause the linearity of radio components degrades when waveforms
have large peaks. In a non-OFDM wireless system, dense constel-
102420483072message length (bits)0.00.20.40.60.81.0fraction of capacity achievedspinalraptorstriderstrider+02468101214SNR (dB)0.00.51.01.52.02.53.0rate (bits per symbol)Simulation with hardware parametersHardware over-the-air experiment05101520253035Mbps505101520253035SNR (dB)0123456789rate (bits per symbol)spinal; τ=1 symbolsspinal; τ=10 symbolsspinal; τ=100 symbolsstrider+; τ=1 symbolsstrider+; τ=10 symbolsstrider+; τ=100 symbols505101520253035SNR (dB)0123456789rate (bits per symbol)spinal; τ=1 symbolsspinal; τ=10 symbolsspinal; τ=100 symbolsstrider+; τ=1 symbolsstrider+; τ=10 symbolsstrider+; τ=100 symbolsFigure 12: How compute budget per bit (B2k/k) affects perfor-
mance in the SNR range 2-24 dB, for different k. A choice of
k = 4 yields codes that perform well over the entire range of
budgets. This graph also shows that B = 256 is a good choice.
Figure 14: Effect of code block length on performance (k = 4,
B = 256). Some puncturing artifacts can be seen above 25 dB,
where less than one pass is transmitted on average.
application of a random hash function to the message bits to produce
a sequence of coded bits and symbols for transmission. We described
a novel, efﬁcient, capacity-achieving bubble decoder for spinal codes.
Our experimental results show that spinal codes out-perform Raptor,
Strider, and the best envelope of 802.11n LDPC codes by signiﬁcant
amounts over a range of channel conditions and code block sizes.
Our hardware prototype in Airblue [25] runs at 10 Mbits/s on FPGA
hardware, and we estimate it can run at 50 Mbits/s in silicon.
Figure 13: Throughput with different densities of output sym-
bols. c = 6 is a good choice for this range of SNRs.
lations usually have a high PAPR: for QAM-4 it is 0 dB, while for
QAM-∞ it is 4.77 dB.
These results, however, do not carry over to the 802.11a/g OFDM
stack, which our PHY uses. For such OFDM systems using scram-
bling, PAPR is typically 5-12 dB [29], depending on the transmitted
symbols. As shown in Table 1, OFDM obscures all but negligible
differences between the PAPRs of dense constellations and standard
WiFi constellations.
Constellation
QAM-4
QAM-64
QAM-220
Trunc. Gaussian, β = 2
Mean PAPR 99.99% below
7.34 dB
7.31 dB
7.31 dB
7.29 dB
11.31 dB
11.41 dB
11.43 dB
11.47 dB
Table 1: Empirical PAPR for 802.11a/g OFDM with various
constellations, showing negligible effect of constellation density.
Each row summarizes 5 million experiments.
Code block length. A strength of the spinal code is good memory
in the encoding, so bad information from a burst of noise can be
corrected by all following symbols if necessary. But this memory
also has a price: once a path is pruned out, the probability of the
decoder resynchronizing to a useful path is low. The decoder has
to receive more symbols until the true path is not pruned. However
small this probability, for ﬁxed k and B, a longer code block means
more opportunities for the true path to be lost. Hence, longer code
blocks require either more symbols per bit or a larger B in order to
decode, even with the same SNR, as reﬂected in Figure 14.
9. CONCLUSION
This paper described the design, implementation, and evaluation
of rateless spinal codes. The key idea in spinal codes is the sequential
This paper opens up several avenues for future work. First, devel-
oping a wireless network architecture atop spinal codes that provides
a different wireless link abstraction from today: a link is that is
always reliable at all SNR above some well-deﬁned threshold, but
which produces outages below the threshold, eliminating highly
variable packet delays. Second, developing a good link-layer pro-
tocol for rateless codes to deal with the issues raised in §6. Third,
developing a software “shim” layer using spinal codes layered over
a bit-error channel such as an existing wireless link that uses a
sub-optimal coding/modulation scheme. Fourth, investigating the
joint-decoding properties of codes that use hash functions. And last
but not least, the ideas presented in this paper may provide a con-
structive framework for de-randomizing, and realizing in practice,
a variety of random-coding arguments widely used in information-
theoretic proofs.
ACKNOWLEDGMENTS
We thank Joseph Lynch for helping us collect hardware results and
Aditya Gudipati for support in implementing Strider. We thank
David Andersen, Nick Feamster, Daniel Halperin, Mark Handley,
Kyle Jamieson, Henry Pﬁster, Tom Richardson, Pramod Viswanath,
Lizhong Zheng, and the SIGCOMM reviewers for helpful comments.
Three generous graduate fellowships supported this work: the Irwin
and Joan Jacobs Presidential Fellowship (Perry and Iannucci); the
Claude E. Shannon Assistantship (Perry), and the Intel Fellowship
(Fleming). Intel also partially supported the Airblue platform. We
thank the members of the MIT Center for Wireless Networks and
Mobile Computing, including Amazon.com, Cisco, Intel, Mediatek,
Microsoft, and ST Microelectronics, for their interest and support.
REFERENCES
[1]
J. Anderson and S. Mohan. Sequential coding algorithms: A survey
and cost analysis. IEEE Trans. on Comm., 32(2):169–176, 1984.
[2] L. Bahl, J. Cocke, F. Jelinek, and J. Raviv. Optimal Decoding of Linear
Codes for Minimizing Symbol Error Rate (Corresp.). IEEE Trans. Info.
Theory, 20(2):284–287, 1974.
[3] H. Balakrishnan, P. Iannucci, J. Perry, and D. Shah. De-randomizing
Shannon: The Design and Analysis of a Capacity-Achieving Rateless
Code. arXiv:1206.0418, June 2012.
[4] R. Barron, C. Lo, and J. Shapiro. Global design methods for raptor
codes using binary and higher-order modulations. In MILCOM, 2009.
242526272829210computation (branch evaluations per bit)0.600.650.700.750.800.850.90fraction of capacity achievedk=1k=2k=3k=4k=5k=6505101520253035SNR (dB)0123456789rate (bits per symbol)Shannon boundc=1c=2c=3c=4c=5c=6505101520253035SNR (dB)6543210gap to capacity (dB)n=64n=128n=256n=512n=1024n=2048[5] D. Bernstein. The Salsa20 Family of Stream Ciphers. Lecture Notes in
Computer Science, 4986:84–97, 2008.
[7]
[6] C. Berrou, A. Glavieux, and P. Thitimajshima. Near Shannon limit
error-correcting coding and decoding: Turbo-codes (1). In ICC, 1993.
J. Bicket. Bit-Rate Selection in Wireless Networks. Master’s thesis,
Massachusetts Institute of Technology, Feb. 2005.
[8] Erez, U. and Trott, M. and Wornell, G. Rateless Coding for Gaussian
Channels. IEEE Trans. Info. Theory, 58(2):530–547, 2012.
[10]
[9] O. Etesami, M. Molkaraie, and A. Shokrollahi. Raptor codes on sym-
metric channels. In ISIT, 2005.
J. Frigon and B. Daneshrad. Field measurements of an indoor high-
speed QAM wireless system using decision feedback equalization and
smart antenna array. IEEE Trans. Wireless Comm., 1(1):134–144, 2002.
[11] R. Gallager. Low-density parity-check codes. IRE Trans. Information
Theory, 8(1):21–28, 1962.
[12] A. Gudipati and S. Katti. Strider: Automatic rate adaptation and
collision handling. In SIGCOMM, 2011.
J. Ha, J. Kim, and S. McLaughlin. Rate-compatible puncturing of
low-density parity-check codes. IEEE Trans. Info. Theory, 2004.
[13]
[14] D. Halperin, W. Hu, A. Sheth, and D. Wetherall. Predictable 802.11
packet delivery from wireless channel measurements. In SIGCOMM,
2010.
[15] G. Holland, N. Vaidya, and P. Bahl. A Rate-Adaptive MAC Protocol
for Multihop Wireless Networks. In MobiCom, 2001.
[16] P. Iannucci, J. Perry, H. Balakrishnan, and D. Shah. No Symbol Left
Behind: A Link-Layer Protocol for Rateless Codes. In MobiCom, 2012.
[17] F. Jelinek. Fast sequential decoding algorithm using a stack. IBM
Journal of Research and Development, 13(6):675–685, 1969.
[18] G. Judd, X. Wang, and P. Steenkiste. Efﬁcient Channel-aware Rate
[19]
[20]
Adaptation in Dynamic Environments. In MobiSys, June 2008.
IEEE Std 802.11n-2009: Enhancements for Higher Throughput.
J. Li and K. Narayanan. Rate-compatible low density parity check codes
for capacity-approaching ARQ scheme in packet data communications.
In Int. Conf. on Comm., Internet, and Info. Tech., 2002.
[21] M. Luby. LT codes. In FOCS, 2003.
[22] M. Luby, A. Shokrollahi, M. Watson, and T. Stockhammer. Raptor
Forward Error Correction Scheme for Object Delivery. RFC 5053
(Proposed Standard), Oct. 2007.
[23] R. Mantha and F. Kschischang. A capacity-approaching hybrid ARQ
scheme using turbo codes. In GLOBECOM, 1999.
[24] M. Mitzenmacher and E. Upfal. Probability and computing: Random-
ized algorithms and probabilistic analysis, chapter 13, pages 321–326.
Cambridge University Press, 2005.
[25] M. C. Ng, K. E. Fleming, M. Vutukuru, S. Gross, Arvind, and H. Bal-
akrishnan. Airblue: A System for Cross-Layer Wireless Protocol
Development. In ANCS, Oct. 2010.
[26] R. Palanki and J. Yedidia. Rateless codes on noisy channels. In ISIT,
[27]
2005.
J. Perry, H. Balakrishnan, and D. Shah. Rateless Spinal Codes. In