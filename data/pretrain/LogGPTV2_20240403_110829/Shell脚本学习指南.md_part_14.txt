join
语法
join[options...1filelfile2
用建
以典同一个键佳，将已存储文件内的记录加以结合。
主要选项
-1 field1
-2 field2
标明要结合的字段，-1fieldi福的是从filel取出fieldl，而-2
field2指的则为从file2取出field2。字段编号自1开始，而非0。
-o file.field
输出file文停中的field字段，一载的字段则不打印。除非使用多个
-O选项，即可显示多个输出字段。
-t separator
使用separator作为输入字段分隔字存，而非使用空白。此字将也为输
出的字段分隔字持。
行为模式
读取filel与file2，并根据共同键值结合多笔记录，联认以空白分隔字
段。输出结果则也括共同健值、来白filel的其余记录，接着file2的
其余记录（指除了键值外的记录），若Filel为-，则join会读取标准
输入，每个文件的第一个字投是用来结合的殿认键值：可以使用-1与-2
更改之。默认情况下、在两个文件申未含键值的行将不打印（已有选项可
改变，见join（1）手册页）。
登告
-1与-2选项的用法是较新的，在较m的系统上，可能得用：-j1field1
与 -j2 field2。
www.TopSage.com
---
## Page 87
查找与替换
75
$ cat sales
显示sales文件
业务员数据
注释说明
#业务员量
5oe
100
Jane
200
berman
chris
- 300
150
S cat quotae
显示quotas文件
配颜
业务员配额
Joe
jane
75
50
herman
80
chris95
每条记录都有两个字段：业务员的名字与相对应的量。在本例中，列与列之间有多个空
自，从而可以排列整齐。
为了让join运作得到正确结果，输人文件必须先完成排序。例3-2里的程序merge-
sales.sh即为使用join结合两个文件。
例3-2:merge-sales.sh
+1 /bin/sh
nerge-sales.sh
结合配额与业务员数据
+
到除注释井排序数据文件
sed +/^#/d* quotas I sort > quotas.sorted
sed /*#/d* sales1 sort > sales.sorted
join quotas.sorted sales,sorted
以第一个键值作结合，将结果产生至标准输出
到除缓存文件
rn quotas,sorted sales.sorted
首先，使用sed删除注释，然后再排序个别文件。排序后的缓存文件成为join命令的
输人数据，最后删除缓存文件。这是执行后的结果：
S./merge-gales.sh
herman 80 150
chri8 95 300
Jane ·75 200
joe 50 100
www.TopSage.com
---
## Page 88
76
第多常
网
3.3.4使用awk重新编排字段
lopsage.com
awk本身所提供的功能完备，已经是一个很好用的程序语言了，我们在第9章会好好地
介绍该语言的精髓。虽然awk能做的事很多，但它主要的设计是要在Shell脚本中发挥
所长：做一些简易的文本处理，例如取出字段并重新编排这一类。本节，我们将介绍awk
的基本概念，随后你看到这样的“单命令行程序（one-liners）”就会比较了解了。
3.3.4.1模式与操作
awk的基本模式不同于绝大多数的程序语言。它其实比较类似于sed：
awk读取命令行上所指定的各个文件（若无，则为标准输人），一次读取一条记录（行）。
再针对每一行，应用程序所指定的命令。awk程序基本架构为：
pattern (action)
+1
pattern ( action )
...
pattern部分几乎可以是任何表达式，但是在单命令行程序里，它通常是由斜杠括起来
的ERE。action为任意的awk语句，但是在单命令行程序里，通常是一个直接明了的
print语甸（稍后有范例说明）。
pattern或是action都能省略（当然，你不会两个都省略吧？）.省略pattern，则
会对每一条输人记录执行action；省略action则等同于（print：}；将打显示整条
记录（稍后将会介绍）。大部分单命令行程序为这样的形式：
... I awk *( print some-atuff )* 1.".
对每条记录来说，awk会测试程序里的每个pattern。若模式值为真（例如某条记录匹
配于某正则表达式，或是一般表达式计算为真），则awk便执行action内的程序代码。
3.3.4.2字段
1
awk设计的重点就在字段与记录上：awk读取输入记录（通常是一些行），然后自动将
各个记录切分为字段。awk将每条记录内的字段数目，存储到内建变量NF。
默认以空白分隔字段一例如空格与制表字符（或两者混用），像join那样。这通常
就足够使用了，不过，其实还有其他选择：你可以将FS变量设置为一个不同的值，也
就可以变更awk分隔字段的方式。如使用单个字符，则该字符出现一次，即分隔出一个
字段（像cut-d那样）。或者，awk特别之处就是：也可以设置它为一个完整的ERE，
这种情况下，每一个匹配在该ERE的文本都将视为字段分隔字符。
www.TopSage.com
---
## Page 89
查找与替换
77
如需字段值，则是搭配S字符。通常S之后会接着一个数值常数，也可能是接着一个表
达式，不过多半是使用变量名称。列举几个例子如下：
awk '( print $1}*
打印第1个字段（米指定patterm）
avk '( print $2, $5 }*
打印第2与第5个字段（未指定patterm）
avk '( print $1, SNP ) 
打印第1个与最后一个字段（米指定pattern）
evk *NF > 0( print $0 }*
打印非空行（指定pattern与action)
avk *F > 0*
同上（未指定action，则默认为打印）
比较特别的字段是编号0：表示整条记录。
3.3.4.3设置字段分隔字符
在一些简单程序中，你可以使用-F选项修改字段分隔字符。例如，显示/etc/passwd
文件里的用户名称与全名，你可以：
S avk -P:*( print $1. $5 )· /ete/pasad
处理/etc/passwd
root'root
管理账号
tolstoy Leo Tolstoy
实际用户
austen Jane Austen
camus Albert Camus
-F选项会自动地设置FS变量。请注意，程序不必直接参照FS变量，也不用必须管理
读取的记录并将它们分割为字段：awk会自动完成这些事。
你可能已经发现，每个输出字段是以一个空格来分隔的一即便是输入字段的分隔字
符为冒号。awk的输人、输出分隔字符用法是分开的，这点与其他工具程序不同。也就
是说，必须设置OFS变量，改变输出字段分隔字符，方式是在命令行里使用-V选项，
这会设置awk的变量。其值可以是任意的字符申。例如：
处理/etc/passwd
root**root
tolstoy**Leo Tolstoy
实际用户
assten**Jane Austen
camus*A]bert Cams
  I
稍后就可以看到设置这些变量的其他方式。或许那些方式更易于理解，根据你的喜好而
定。
www.TopSage.com
---
## Page 90
78
李E省
3.3.4.4打印行
就像我们已经所介绍过的：大多数时候，你只是想把选定的字段显示来，或者重新安排
其题序。简单的打印可使用print语句微到，只要提供给它需要打印的字段列表、变量
或字符审即可：
$ awx -7:'( print "User",$1, *ie really”, $5 }′ /ete/pasawd
User root is really root
User toletoyis reallyLeo 7o1stoy
User austen is really Jane Austen
User camu8 18 really Albert Camus
 * *
简单明了的print语句，如果没有任何参数，剩等同于printS0，即显示整条记录。
以刚才的例子来说，在混合文本与数值的情况下，多半会使用awk版本的printE语句。
这和先前在2.5.4节所提及的Shel（与C）版本的printf语句相当类似，这里就不再
重复，以下是把上例修改为使用printf语句的用法：
S awk -F: *( printf·*vser s 1s really %s\n", $1, $5 )'/etc/passwd
User root is really root
User tolstoy 18 really Leo Tolstoy
User austen is really Jane Austen
User camus 1s really ALbert Camus
 **
awk的print语句会自动提供最后的换行字符，就像Shell层级的echo与printf那
样，然而，如果使用printf语句，则用户必须要通过\n转义序列的使用自已提供它。
注意：请记得在Drint的参数间用逗点隔开！否则，awk将连接相邻的所有值：
Userrooti8 reallyroot
Usertolstoyis reallyLeo Tolstoy
Usercamusis reallyAlbert Camu8
这样将所有字符串连在一起应该不是你要的，忘了加上遥点，这是个常见又难找到的错误。
: 
3.3.4.5起始与清除
操作。常见于大型awk程序中，且通常写在个别文件里，而不是在命令行上：
www.TopSage.com
---
## Page 91
查找与替换
BEGIN
（起始操作程序代码（startupcode））
.com
patternl(actionl )
pattern2(action2)
END·（清除操作程序代码（cleanupcode））
BEGIN与END的语句块是可选用的。如需设置，习惯上（但不必须）它们应分别置于
awk程序的开头与结尾处。你可以有数个BEGIN与END语句块，awk会按照它们出现
在程序的题序来执行：所有的BEGIN语句块都应该放在起始处，而所有END语旬块也
应放在结尾。以简单程序来看，BEGIN可用来设置变量：
$awk*BEGIN（FS=:;OFS-**）
使用BBGIN设置变量
>(print $1,$5)'/ete/pasawd
被引用的程序继续到第二行
root**root
输出，如前
austen**Jane Austen
camus**Albert Camus
+ = +
警告：POSIX标准中描述了awk语言及其程序选项，POSIXawk是构建在所谓的“新awk”上，
首度全球发布是在1987年的 System V Release3.1版，且在1989年的System VRelease
4版中稍作修正。
但是，直到2005年底，Solaris的/bin/anwk仍然还是原始的、1979年的awkV7版！在
Solaris系统上，你应该使用/usr/xpg4/bin/awk，或参考第9章，使用awk自由下载版
中的一个，
3.4小结
如需从输入的数据文件中取出特定的文本行，主要的工具为grep程序。POSIX采用三
种不同grep变体：grep、egrep与fgrep的功能，整合为单个版本，通过不同的选项，
分别提供这三种行为模式。
虽然你可以直接查找字符串常数，但是正则表达式能提供一个更强大的方式，描述你要
找的文本。大部分的字符在匹配时，表示的是自己本身，但有部分其他字符扮演的是
meta字符的角色，也就是指定操作，例如”匹配0至多个的.."、“匹配正好10个的……
等。
POSIX的正则表达式有两种：基本正则表达式（BRE）以及扩展正则表达式（ERE），哪
个程序使用哪种正则表达式风格，是根据长时间的实际经验，由POSIX制定规格，简化
www.TopSage.com
---
## Page 92
80
第3章
到只剩两种正则表达式的风格，通常，ERE比BRE功能更强大，不过不见得任何情况下
都是这样。
正则表达式对于程序执行时的locale环境相当敏感；方括号表达式里的范围应避免使用，
改用字符集，例如[[：alnum：1]较佳。另外，许多GNU程序都有额外的meta字符。
sed是处理简单字符申替换（substitution）的主要工具。在我们的经验里，大部分的Shell
脚本在使用sed时几平都是用来作替换的操作，我们特意在这里不介绍sed所能提供的
其他任务，是因为已经有《sed&-awk》这本书（已列于参考书目中），它会介绍更多相
关信息，
“从最左边开始，扩展至最长（iongestleftmost）”，这个法则描述了匹配的文本在何处
匹配以及匹配扩展到多长。在使用sed、awk或其他交互式文本编辑程序时，这个法则
相当重要，除此之外，一行与一个字符申之间的差异也是核心观念。在某些程序语言里，