不是复制 Dockerfile 所在目录下的 package.json ，而是复制 上下文
（context） 目录下的 package.json 。
因此， COPY 这类指令中的源文件的路径都是相对路径。这也是初学者经常会问
的为什么 COPY ../package.json /app 或者 COPY /opt/xxxx /app 无法工
作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位
置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。
现在就可以理解刚才的命令 docker build -t nginx:v3 . 中的这个 . ，实际
上是在指定上下文的目录， docker build 命令会将该目录下的内容打包交给
Docker 引擎以帮助构建镜像。
如果观察 docker build 输出，我们其实已经看到了这个发送上下文的过程：
$ docker build -t nginx:v3 .
Sending build context to Docker daemon 2.048 kB
...
64
使用 Dockerfile 定制镜像
理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初
学者在发现 COPY /opt/xxxx /app 不工作后，于是干脆将 Dockerfile 放到
了硬盘根目录去构建，结果发现 docker build 执行后，在发送一个几十 GB 的
东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 docker build
打包整个硬盘，这显然是使用错误。
一般来说，应该会将 Dockerfile 置于一个空目录下，或者项目根目录下。如果
该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西
确实不希望构建时传给 Docker 引擎，那么可以用 .gitignore 一样的语法写一
个 .dockerignore ，该文件是用于剔除不需要作为上下文传递给 Docker 引擎
的。
那么为什么会有人误以为 . 是指定 Dockerfile 所在目录呢？这是因为在默认
情况下，如果不额外指定 Dockerfile 的话，会将上下文目录下的名为
Dockerfile 的文件作为 Dockerfile。
这只是默认行为，实际上 Dockerfile 的文件名并不要求必须为
Dockerfile ，而且并不要求必须位于上下文目录中，比如可以用 -f
../Dockerfile.php 参数指定某个文件作为 Dockerfile 。
当然，一般大家习惯性的会使用默认的文件名 Dockerfile ，以及会将其置于镜
像构建上下文目录中。
其它 的用法
docker build
直接用 Git repo 进行构建
或许你已经注意到了， docker build 还支持从 URL 构建，比如可以直接从 Git
repo 中构建：
65
使用 Dockerfile 定制镜像
$ docker build https://github.com/twang2218/gitlab-ce-zh.git#:8.
14
docker build https://github.com/twang2218/gitlab-ce-zh.git\#:8.14
Sending build context to Docker daemon 2.048 kB
Step 1 : FROM gitlab/gitlab-ce:8.14.0-ce.0
8.14.0-ce.0: Pulling from gitlab/gitlab-ce
aed15891ba52: Already exists
773ae8583d14: Already exists
...
这行命令指定了构建所需的 Git repo，并且指定默认的 master 分支，构建目录
为 /8.14/ ，然后 Docker 就会自己去 git clone 这个项目、切换到指定分
支、并进入到指定目录后开始构建。
用给定的 tar 压缩包构建
$ docker build http://server/context.tar.gz
如果所给出的 URL 不是个 Git repo，而是个 tar 压缩包，那么 Docker 引擎会下
载这个包，并自动解压缩，以其作为上下文，开始构建。
从标准输入中读取 Dockerfile 进行构建
docker build - ... 
COPY ["",... ""]
和 RUN 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。
COPY 指令将从构建上下文目录中  的文件/目录复制到新的一层的镜像
内的  位置。比如：
COPY package.json /usr/src/app/
 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的
filepath.Match 规则，如：
COPY hom* /mydir/
COPY hom?.txt /mydir/
 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工
作目录可以用 WORKDIR 指令来指定）。目标路径不需要事先创建，如果目录不存
在会在复制文件前先行创建缺失目录。
此外，还需要注意一点，使用 COPY 指令，源文件的各种元数据都会保留。比如
读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建
相关文件都在使用 Git 进行管理的时候。
69
ADD 更高级的复制文件
ADD 更高级的复制文件
ADD 指令和 COPY 的格式和性质基本一致。但是在 COPY 基础上增加了一些
功能。
比如  可以是一个 URL ，这种情况下，Docker 引擎会试图去下载这个
链接的文件放到  去。下载后的文件权限自动设置为 600 ，如果这并
不是想要的权限，那么还需要增加额外的一层 RUN 进行权限调整，另外，如果下
载的是个压缩包，需要解压缩，也一样还需要额外的一层 RUN 指令进行解压缩。
所以不如直接使用 RUN 指令，然后使用 wget 或者 curl 工具下载，处理权
限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推
荐使用。
如果  为一个 tar 压缩文件的话，压缩格式为 gzip , bzip2 以及
xz 的情况下， ADD 指令将会自动解压缩这个压缩文件到  去。
在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 ubuntu 中：
FROM scratch
ADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /
...
但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就
不可以使用 ADD 命令了。
在 Docker 官方的最佳实践文档中要求，尽可能的使用 COPY ，因为 COPY 的语
义很明确，就是复制文件而已，而 ADD 则包含了更复杂的功能，其行为也不一定
很清晰。最适合使用 ADD 的场合，就是所提及的需要自动解压缩的场合。
另外需要注意的是， ADD 指令会令镜像构建缓存失效，从而可能会令镜像构建变
得比较缓慢。
因此在 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复
制均使用 COPY 指令，仅在需要自动解压缩的场合使用 ADD 。
70
CMD 容器启动命令
CMD 容器启动命令
CMD 指令的格式和 RUN 相似，也是两种格式：
shell 格式： CMD 
exec 格式： CMD ["可执行文件", "参数1", "参数2"...]
参数列表格式： CMD ["参数1", "参数2"...] 。在指定了 ENTRYPOINT 指
令后，用 CMD 指定具体的参数。
之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进
程，那么在启动容器的时候，需要指定所运行的程序及参数。 CMD 指令就是用于
指定默认的容器主进程的启动命令的。
在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如， ubuntu
镜像默认的 CMD 是 /bin/bash ，如果我们直接 docker run -it ubuntu 的
话，会直接进入 bash 。我们也可以在运行时指定运行别的命令，如 docker
run -it ubuntu cat /etc/os-release 。这就是用 cat /etc/os-release
命令替换了默认的 /bin/bash 命令了，输出了系统版本信息。
在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON
数组，因此一定要使用双引号 " ，而不要使用单引号。
如果使用 shell 格式的话，实际的命令会被包装为 sh -c 的参数的形式进行
执行。比如：
CMD echo $HOME
在实际执行中，会将其变更为：
CMD [ "sh", "-c", "echo $HOME" ]
这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解
析处理。
提到 CMD 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出
现的一个混淆。
71
CMD 容器启动命令
Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机
里面那样，用 upstart/systemd 去启动后台服务，容器内没有后台服务的概念。
一些初学者将 CMD 写为：
CMD service nginx start
然后发现容器执行后就立即退出了。甚至在容器内去使用 systemctl 命令结果
却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和
虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。
对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主
进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的
东西。
而使用 service nginx start 命令，则是希望 upstart 来以后台守护进程形式启
动 nginx 服务。而刚才说了 CMD service nginx start 会被理解为 CMD [
"sh", "-c", "service nginx start"] ，因此主进程实际上是 sh 。那么当
service nginx start 命令结束后， sh 也就结束了， sh 作为主进程退出
了，自然就会令容器退出。
正确的做法是直接执行 nginx 可执行文件，并且要求以前台形式运行。比如：
CMD ["nginx", "-g", "daemon off;"]
72
ENTRYPOINT 入口点
ENTRYPOINT 入口点
ENTRYPOINT 的格式和 RUN 指令格式一样，分为 exec 格式和 shell 格
式。
ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参
数。 ENTRYPOINT 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过
docker run 的参数 --entrypoint 来指定。
当指定了 ENTRYPOINT 后， CMD 的含义就发生了改变，不再是直接的运行其命
令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令，换句话说实际执行
时，将变为：
 ""
那么有了 CMD 后，为什么还要有 ENTRYPOINT 呢？这种  "
" 有什么好处么？让我们来看几个场景。
场景一：让镜像变成像命令一样使用
假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 CMD 来实现：
FROM ubuntu:16.04
RUN apt-get update \
&& apt-get install -y curl \
&& rm -rf /var/lib/apt/lists/*
CMD [ "curl", "-s", "http://ip.cn" ]
假如我们使用 docker build -t myip . 来构建镜像的话，如果我们需要查询当
前公网 IP，只需要执行：
$ docker run myip
当前 IP：61.148.226.66 来自：北京市 联通
73
ENTRYPOINT 入口点
嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我
们希望加参数呢？比如从上面的 CMD 中可以看到实质的命令是 curl ，那么如
果我们希望显示 HTTP 头信息，就需要加上 -i 参数。那么我们可以直接加 -i
参数给 docker run myip 么？
$ docker run myip -i
docker: Error response from daemon: invalid header field value "
oci runtime error: container_linux.go:247: starting container pr
ocess caused \"exec: \\\"-i\\\": executable file not found in $P
ATH\"\n".
我们可以看到可执行文件找不到的报错， executable file not found 。之前
我们说过，跟在镜像名后面的是 command ，运行时会替换 CMD 的默认值。因此
这里的 -i 替换了原来的 CMD ，而不是添加在原来的 curl -s
http://ip.cn 后面。而 -i 根本不是命令，所以自然找不到。
那么如果我们希望加入 -i 这参数，我们就必须重新完整的输入这个命令：
$ docker run myip curl -s http://ip.cn -i
这显然不是很好的解决方案，而使用 ENTRYPOINT 就可以解决这个问题。现在我
们重新用 ENTRYPOINT 来实现这个镜像：
FROM ubuntu:16.04
RUN apt-get update \
&& apt-get install -y curl \
&& rm -rf /var/lib/apt/lists/*
ENTRYPOINT [ "curl", "-s", "http://ip.cn" ]
这次我们再来尝试直接使用 docker run myip -i ：
74
ENTRYPOINT 入口点
$ docker run myip
当前 IP：61.148.226.66 来自：北京市 联通
$ docker run myip -i
HTTP/1.1 200 OK
Server: nginx/1.8.0
Date: Tue, 22 Nov 2016 05:12:40 GMT
Content-Type: text/html; charset=UTF-8
Vary: Accept-Encoding
X-Powered-By: PHP/5.6.24-1~dotdeb+7.1
X-Cache: MISS from cache-2
X-Cache-Lookup: MISS from cache-2:80
X-Cache: MISS from proxy-2_6
Transfer-Encoding: chunked
Via: 1.1 cache-2:80, 1.1 proxy-2_6:8006
Connection: keep-alive
当前 IP：61.148.226.66 来自：北京市 联通
可以看到，这次成功了。这是因为当存在 ENTRYPOINT 后， CMD 的内容将会作
为参数传给 ENTRYPOINT ，而这里 -i 就是新的 CMD ，因此会作为参数传给
curl ，从而达到了我们预期的效果。
场景二：应用运行前的准备工作
启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。
比如 mysql 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要
在最终的 mysql 服务器运行之前解决。
此外，可能希望避免使用 root 用户去启动服务，从而提高安全性，而在启动服
务前还需要以 root 身份执行一些必要的准备工作，最后切换到服务用户身份启
动服务。或者除了服务外，其它命令依旧可以使用 root 身份执行，方便调试
等。
这些准备工作是和容器 CMD 无关的，无论 CMD 为什么，都需要事先进行一个
预处理的工作。这种情况下，可以写一个脚本，然后放入 ENTRYPOINT 中去执
行，而这个脚本会将接到的参数（也就是  ）作为命令，在脚本最后执行。
比如官方镜像 redis 中就是这么做的：
75
ENTRYPOINT 入口点
FROM alpine:3.4
...
RUN addgroup -S redis && adduser -S -G redis redis
...
ENTRYPOINT ["docker-entrypoint.sh"]
EXPOSE 6379
CMD [ "redis-server" ]
可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 ENTRYPOINT
为 docker-entrypoint.sh 脚本。
#!/bin/sh
...
# allow the container to be started with `--user`
if [ "$1" = 'redis-server' -a "$(id -u)" = '0' ]; then
chown -R redis .
exec su-exec redis "$0" "$@"
fi
exec "$@"