User: 请列出常见的安全漏洞类型，并举例说明。
Assistant: 1. SQL 注入漏洞

攻击者通过输入恶意的 SQL 代码，向应用程序的后台数据库发送恶意请求，导致数据库执行恶意代码，获得敏感信息。比如：

```SQL
SELECT * from users WHERE username = 'admin' AND password = '123456'
```

攻击者可以使用以下代码发起注入攻击：

```SQL
' or '1'='1
```

2. XSS（跨站脚本）攻击

攻击者通过将带有恶意的 JavaScript 代码嵌入到网站中输入框、链接等位置，当其他用户访问含有该恶意代码的页面时，JavaScript 代码可能会在访问者的浏览器中执行，从而达到攻击者的某些目的。比如：

```JavaScript
<script>
    alert('恶意代码');
</script>
```

攻击者可以将该代码嵌入到一个评论框中，其他用户查看评论时，就会触发弹出框，造成骚扰或其他更恶劣的后果。

3. CSRF（跨站请求伪造）攻击

攻击者通过将含有恶意代码的链接或表单嵌入到受害者已登录的网站中，使受害者在不知情的情况下，完成某些恶意操作，比如：

```HTML
<img src="http://www.example.com/api/delete?id=3&token=123456" />
```

攻击者分别获得某个网站的删除操作的 API 地址和当前用户的身份令牌，然后将两个参数拼接成一个 img 标签中的 src 属性，将这段 HTML 代码嵌入到恶意网站中，当受害者访问时，如果该用户在此前已在该网站登录，该删除操作就会在不知情的情况下完成。

4. 文件上传漏洞

攻击者通过将恶意文件上传到网站的文件上传功能中，从而获得敏感信息或控制网站的后台等操作。比如，攻击者通过上传恶意文件，将上传的文件作为后续攻击的平台：

```PHP
<?php
    $file = $_FILES['file'];
    $name = uniqid().$file['name'];
    if (move_uploaded_file($file['tmp_name'], 'uploads/'.$name)) {
        echo '上传成功！';
    } else {
        echo '上传失败！';
    }
?>
```

攻击者可以上传一个 PHP 脚本作为攻击平台，之后通过访问该脚本文件直接执行后台命令，控制整个网站的后台操作。