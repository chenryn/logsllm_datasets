### Context-Sensitive Points-to Information in Amandroid

Amandroid leverages context-sensitive points-to information, including that for string objects, which is already computed in the Inter-Component Data Flow Graph (IDFG). This eliminates the need for a separate data flow analysis specifically for Inter-Component Communication (ICC). Additionally, Amandroid uses ICC call parameter information to link ICC call sites to their targets, resulting in an IDFG that includes data flow paths both within and across components.

### Comparison with CHEX

Lu et al. [23] introduced CHEX, a static analysis scheme designed to detect component hijacking in Android applications by identifying information flows. CHEX first constructs app-splits, each of which is a code segment reachable from an entry point. It then computes a data-flow summary for each split using Wala [16]. These summaries are linked in all permutations that do not violate Android system call sequences, potentially revealing transitive information flows. In contrast, Amandroid tracks information flow through the use of environment methods for each component, which call relevant callbacks in the correct order as per Android specifications. Amandroid also builds the IDFG and Data Dependence Graph (DDG) for the entire application, providing a more comprehensive analysis. Notably, CHEX does not track data flow through the ICC channel, a capability that Amandroid offers.

### Systematic Study of ICC Attack Surface

Chin et al. [8] conducted a systematic study of the attack surface related to ICC, identifying issues such as unauthorized intent receipt and intent spoofing. They developed a static analysis tool that can raise warnings for these problems, albeit in an over-conservative manner. ComDroid performs flow-sensitive, intraprocedural static analysis, with limited interprocedural analysis that follows method invocations to a depth of one method call. In contrast, Amandroid conducts a full-fledged, flow- and context-sensitive interprocedural data flow analysis and tracks data flows over ICC channels. Unfortunately, a comparison study between ComDroid and Amandroid could not be conducted due to the unavailability of the ComDroid tool and dataset. Efforts to obtain the tool and dataset from the authors have been unsuccessful so far.

### Security Issues in Android Apps

There has been extensive research on Android app security issues, with some studies employing static analysis techniques [11, 14, 18, 19]. These works focus on specific security problems, but often do not address key issues such as the inter-component nature of Android app execution and the precise modeling of Android callback sequences. Amandroid, however, is a precise and general inter-component static analysis framework capable of addressing a wide range of security issues in Android apps.

### Augmented Infrastructures for Security

Multiple prior works [9, 26, 35] have investigated root security problems in the Android system and proposed augmented infrastructures to enforce given security policies. For instance, SEAndroid [30] enforces Mandatory Access Control (MAC) at both the kernel and middleware layers, providing better mechanisms for sandboxing apps. However, MAC does not prevent security issues that occur within an app or through legitimate ICC channels. In this paper, we assume that the sandboxing and isolation provided by the Android system remain intact, making our approach complementary to these prior works.

### Dynamic vs. Static Analysis

TaintDroid [12] is a dynamic taint-tracking and analysis system designed to detect potential misuse of user's private information. Dynamic analyses, however, are susceptible to evasion attacks. For example, researchers have shown that Google's Bouncer [3] can be fingerprinted and evaded by well-crafted apps. Static analysis, on the other hand, examines the app's code and manifest, which determine its runtime behavior, making it a more robust option for security vetting. Recent work by Sounthiraraj et al. [31] suggests that combining static and dynamic analysis can achieve more effective detection and confirmation of security problems. Amandroid provides a precise and general static analysis framework that can complement dynamic analyses.

### Conclusion

We presented Amandroid, a general static analysis framework for the security analysis of Android applications. Amandroid can precisely track the control and data flow of an app across multiple components and compute an abstraction of the app's behavior in the form of an IDFG and DDG. As a general framework, Amandroid can be easily extended to perform various specialized security analyses. Our experimental results show that Amandroid scales well and outperforms existing static analysis tools for Android apps.

### Acknowledgments

We thank Eric Bodden and Steven Arzt for helping us understand the FlowDroid work, Patrick McDaniel and Damien Octeau for sharing the Epicc dataset and insights, Marc Eisenbarth and Arbor Networks for sharing Android malware samples, and Gang Tan for valuable feedback. Venkatesh Prasad Ranganath contributed many ideas during our discussions. This work was partially supported by the U.S. National Science Foundation under grants no. 0644288, 0954138, and 1018703, and the U.S. Air Force Office of Scientific Research under award no. FA9550-09-1-0138. The opinions, findings, and conclusions expressed in this material are those of the authors and do not necessarily reflect the views of the funding agencies.

### References

[References section remains unchanged]

### Appendix: Basic IDFG Building Process

A static analyzer simulates the program and tracks fact sets until a fixed point is reached. Convergence to a fixed point is guaranteed if the flow equations are monotone and the number of facts is finite, conditions that hold for Amandroid's analysis. For a given app, there is a finite number of object creation sites and variables/fields, and array elements are summarized as one. We also track calling contexts up to a finite number k.

Amandroid builds the IDFG by flowing points-to facts from the program's entry points. The program is the intermediate representation (IR) of the app's dex code, augmented with environment methods as discussed in Section 3.2. Unlike Java applications, there is no "main" method in an Android app; any component can be the starting point. Our component-based environment model captures the full lifecycle of a component and all possible execution paths, including those due to interactions with other components. If we assume an execution path starts from component C, we use C's environment method EC as the program's entry point. To include all possible execution paths from all components, we repeat this process for every component, yielding multiple IDFGs. Formally, let C be a component; the IDFG from C is denoted IDFG(EC), where EC is the environment method of C, and is defined as follows:

\[ \text{IDFG}(E_C) \equiv ((N, E), \{ \text{entry}(n) | n \in N \}) \]

where \( N \) and \( E \) are the nodes and edges of the inter-procedural control flow graph starting from \( E_C \) (denoted ICFG(\( E_C \))). \(\text{entry}(n)\) is the entry set of the statement associated with node \( n \). Each IDFG(\( E_C \)) captures the execution that starts from component C and may involve other components due to ICC. Each statement node is annotated with the statement entry set (the exit set is not shown for clarity).

In this example, Amandroid starts building the IDFG from the entry point method foo with an empty fact set. Amandroid then simulates the program statically based on each statement's semantics and transforms the fact sets along the way according to the flow equation (1).

At a control-flow join point, the exit fact sets from all incoming edges are unioned (e.g., at L7). Facts such as \(\langle v_2, 2 \rangle\) and \(\langle v_2, 5 \rangle\) from different branches accumulate in \(\text{entry}(7)\). Similarly, \(\text{entry}(8)\) can be computed. At this point, Amandroid needs to resolve the target for L8's virtual method invocation with static type A0. The first argument of the call instruction, \( v_2 \), is the receiver object. Since we have calculated the possible points-to values of \( v_2 \)—instance 2 or instance 5—we can resolve the possible call targets precisely: A1.bar for instance 2 and A2.bar for instance 5 (because both A1 and A2 override A0.bar). This demonstrates the advantage of performing a precise points-to analysis concurrently with ICFG building, as it provides more accurate information on call targets and allows for more precise fact propagation, potentially reducing false alarms.

As shown in Figure 5, a call statement contributes a pair of CallNode and ReturnNode to the ICFG. The CallNode connects to the callee's EntryNode, and the callee's ExitNode connects to the ReturnNode. When transferring facts between the caller and the callee, variable-facts need to be remapped to the formal parameters of the callee (e.g., \( v_2 \) in the caller maps to \( v_4 \) in the callee). This mapping is restored when control returns to the caller. Only heap-facts reachable from the call parameters are passed to the callee. Unreachable heap-facts and unrelated variable-facts are transferred directly to the ReturnNode to improve efficiency. For L8's method invocation, there is one variable-fact \(\langle v_9, 6 \rangle\) unrelated to both arguments \( v_2 \) and \( v_3 \). The flow of such a fact (unrelated to any callee) is represented as a double-headed arrow from the CallNode to the ReturnNode. Similarly, facts at the callee side that are unrelated to the caller (e.g., local variables and temporary objects) are filtered out at the callee's ExitNode to enhance efficiency.

For the data flow analysis of A1.bar or A2.bar, which are callees for L8's method invocation, Amandroid tracks the entry of each statement. We observe that \(\text{entry}(\text{Return}_8)\) contains heap-facts showing that field f2 of Instance 2 points to the String "abc". This is the effect of L10. Interestingly, this is not true for the same field (f2) of Instance 5 because no assignment like L10 occurs inside A2.bar.

Next, we compute \(\text{entry}(9)\) and continue processing the next call similarly. The process is similar to what we did for L8, except that we handle the possibility of a null receiver (since there is no fact associated with \( v_2.f1 \) for \(\langle v_2, 5 \rangle\)). For a virtual method statement, if the facts show that the receiver variable might be null, we do not process this particular instance. Instead, we propagate only non-null receiver instances (if any) to the callee and flag the call site as a possible runtime error.