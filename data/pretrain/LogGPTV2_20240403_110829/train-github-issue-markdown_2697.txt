# Bug report
(This is a continuation of #7381, which solved part but not all of the issue.
I _think_ this is a bug. It's possible it's a feature I don't yet understand.
Apologies in advance for the verbose bug report...)
**What is the current behavior?**
When using the split chunks plugin, the resulting compilation chunks sometimes
have duplicate ids. For example, I added this debugging hook to my webpack
config:
      compiler.hooks.afterEmit.tap("log-dupe-chunks", function(compilation) {
        let chunks = compilation.chunks;
        let chunkIds = chunks.map(c => c.id);
        let dupeChunks = chunks
          .filter(c => chunkIds.filter(i => i === c.id).length > 1)
          .map(c =>
            pick(c, ["id", "ids", "debugId", "name", "entryModule", "files", "rendered", "hash", "contentHash", "renderedHash", "chunkReason", "extraAsync"])
          );
        if (dupeChunks.length) {
          console.log(dupeChunks);
        }
      });
Resulting in this output:
    [ { id: 11,
        ids: [ 11 ],
        debugId: 1021,
        name: 'highcharts',
        entryModule: undefined,
        files:
         [ 'split.672955a005ca955ca723.js',
           'split.672955a005ca955ca723.js.map' ],
        rendered: true,
        hash: '672955a005ca955ca7232db2b80f1b7f',
        contentHash: { javascript: '0a19d1f296fc806aaf2e' },
        renderedHash: '672955a005ca955ca723',
        chunkReason: undefined,
        extraAsync: false },
      { id: 11,
        ids: [ 11 ],
        debugId: 1015,
        name: 'channel_dashboard',
        entryModule: undefined,
        files:
         [ 'split.ad76a221da40a498edfb.js',
           'split.ad76a221da40a498edfb.js.map' ],
        rendered: true,
        hash: 'ad76a221da40a498edfb84f74889fc48',
        contentHash: { javascript: 'eb2bbec49673375a4d25' },
        renderedHash: 'ad76a221da40a498edfb',
        chunkReason: undefined,
        extraAsync: false } ]
* * *
I've only seen this happen when using recordsPath. If I delete my webpack
records & re-build, all the chunk ids are unique.
The most recent time I've seen this, my webpack records started like this:
      "chunks": {
        "byName": {
          "vendors~polyfills": 1,
          "polyfills": 2,
          "vendors~backend~highcharts": 5,
          "vendors~markdownediting~uploader": 19,
          "vendors~t_store": 20,
          "vendors~uploader": 21,
          "v4player": 10,
          "highcharts": 11,
          "channel_dashboard": 16,
          "motherchannel": 17,
          "embedediting": 18,
          "markdownediting": 19,
          "t_store": 20,
          "uploader": 21,
          "backend": 22,
          "qrcodes": 23,
          "recommended-follows": 24,
          "auth-modal": 25,
          "preload": 26,
          "vendors~application~embed_player~embed_player_square_ad": 27,
          "vendors~application~embed_player_square_ad": 28,
          "embed_player_square_ad": 29,
          "embed_player": 30,
          "application": 31,
          "vendors~embed_player_square_ad~v4player": 10,
          "channel_dashboard~highcharts": 11
        },
and ended like this:
        "byName": {
          "vendors~polyfills": 1,
          "polyfills": 2,
          "vendors~backend~highcharts": 5,
          "vendors~markdownediting~uploader": 8,
          "vendors~teepublic_store": 9,
          "vendors~uploader": 13,
          "v4player": 10,
          "highcharts": 11,
          "channel_dashboard": 11,
          "motherchannel": 15,
          "embedediting": 18,
          "markdownediting": 19,
          "teepublic_store": 20,
          "uploader": 21,
          "backend": 14,
          "qrcodes": 23,
          "recommended-follows": 24,
          "auth-modal": 25,
          "preload": 26,
          "vendors~application~embed_player~embed_player_square_ad": 27,
          "vendors~application~embed_player_square_ad": 28,
          "embed_player_square_ad": 29,
          "embed_player": 30,
          "application": 31,
          "vendors~embed_player_square_ad~v4player": 10,
          "channel_dashboard~highcharts": 11
        },
Note the multiple chunks with an id of 11.
* * *
**If the current behavior is a bug, please provide the steps to reproduce.**
Sorry, I'm really struggling to narrow this down. It seems to come and go at
the whim of whatever heuristics drive SplitChunksPlugin. If someone can
confirm this is a bug and it's not immediately obvious why it happens, I'll
try harder.
**What is the expected behavior?**
Presumably all compilation chunks should have unique ids?
**Other relevant information:**  
webpack version: 4.11.0  
Node.js version: 8.11.1  
Operating System: Docker with node:8.11-alpine
I'm using https://github.com/GProst/webpack-clean-obsolete-chunks, which
expects chunks to have unique ids, and ends up accidentally deleting files
when they don't. If it turns out that chunks are allowed to have duplicate
ids, I'll submit a fix to that.