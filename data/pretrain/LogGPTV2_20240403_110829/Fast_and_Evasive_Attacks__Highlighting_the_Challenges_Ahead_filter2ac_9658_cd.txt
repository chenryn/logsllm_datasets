each other: an indication of the strength of our sieve-based approach. Stage 5
further expands this idea by taking into account behavioural aspects of traﬃc.
It generates alerts when it encounters anomalies in ﬂow aggregates (e.g., un-
usual amounts of traﬃc) and subsequently drops the streams. Stage 6, at last,
transmits the traﬃc if it is considered clean.
The conservative prevention strategy that we adopted may also drop benign
traﬃc due to false positives. We take the position that occasional dropped con-
nections outweigh the cost of even a single intrusion. That said, we have taken
care to minimise false positives in the individual ﬁltering steps.
The remainder of this paper is structured as follows: we begin with examining
the shortcomings of existing IDSs in Section 2, after which we discuss our novel
features individually in Section 3. The implementation of the complete system is
described in Section 4 and subsequently put to the test in Section 5. We discuss
limitations of our system in Section 6. Conclusions are drawn in Section 7.
2 Related Work
In this paper we address the issue of deploying a practical IPS capable of scan-
ning traﬃc at line rate. For some of our previous work on signature generation
we refer to [8]. Current solutions for stopping intrusions often focus on two layers
of defence, namely (network) intrusion detection and host-based intrusion pre-
vention (exempliﬁed by such approaches as Snort [9] and [10, 11, 12, 13], respec-
tively). We argue that both of them are lacking and propose a third approach:
application-aware network intrusion prevention.
Most network IDSs (nIDS) search for malicious code in network packets, but,
apart from simple ﬁrewalls, they are often not suitable as in-line IPS and prove
vulnerable to insertion and evasion. Even though some systems, like Snort, have
the required functionality for in-line deployment, this is hardly ever used on fast
links since both TCP stream reassembly and pattern matching are prohibitively
expensive. In previous work, CardGuard [7], we achieved 100s Mbit Ethernet
performance when scanning payloads for simple strings after TCP reassembly
on an IXP1200 network processor. Others, like EarlyBird [5] were speciﬁcally de-
signed to allow in-line deployment on high-speed links as IDS solutions, but still
do not lend themselves for prevention, because of the high ratio of false positives.
Work at Georgia Tech uses IXP1200s for TCP stream reconstruction in an
IDS for an individual host [14], using both an IXP1200 and a completely separate
FPGA board. Like [7], it limits itself to simple signature matching and achieves
similar performance. Like SafeCard these systems do not exhibit the ‘fail-open’
ﬂaw [1], because the IDS/IPS is the forwarding engine.
The inadequacy of pattern matching techniques as applied by Snort was also
demonstrated by the recent WMF exploit, for which the pattern was so costly
to inspect that IDS administrators were initially forced to let it pass or setup a
completely separate conﬁguration2. While later attempts yielded fairly reliable
2 Source: http://isc.sans.org/diary.php?storyid=992
314
W. de Bruijn et al.
(although not 100% accurate) signatures that could be handled by Snort, the
issue is symptomatic of a ﬂaw in Snort-like approaches for certain attacks. In
essence, they are too costly when they must handle huge or complex signatures
that can be applied to any traﬃc stream. As a result, nIDSs often limit them-
selves to per-packet processing, which renders them useless for detecting appli-
cation level (layer 7) attacks. Note that we do not dismiss Snort-like pattern
matching out of hand. It can be used for all sorts of malware (spyware, trojans)
that do not use protocol exploits to enter the system. Also, many Snort-like rules
exist and we can use these rules to ﬁlter out a plethora of known attacks. This
saves us from having to develop and check protocol-speciﬁc signatures for each
of these attacks. As a result, a snort-like pattern matcher is one of the pillars
that underlie the SafeCard architecture.
Pattern matching engines are also weak in the face of polymorphism. In re-
sponse, detection techniques were developed that look at aggregate information,
e.g., triggering alerts when an unusual number of outgoing connections to unique
IP addresses is detected [15] or looking at anomalies in webtraﬃc [16]. Doing
so probably incurs too many false positives to be used for IPS by itself. On the
other hand, it may detect suspect behaviour that would otherwise go unnoticed.
Host-based intrusion prevention blocks attacks based on local information.
Many diﬀerent measures fall in this category, including address space and in-
struction set randomisation (ASR and ISR [11,12]), non-executable memory [10,
17,18], systrace [19], language approaches [20,21], anti-virus software, host ﬁre-
walls, and many others. Note that simple measures (like non-executable memory)
are easy to circumvent [22,23] and may break normal code (e.g., Linux depends
on executable stacks for trampolines and signals). An advantage of host-based
protection is that knowledge about the conﬁguration can be exploited. We need
to install speciﬁc ﬁlters only for the software running on the host which in turn
makes signature generation easier. Also, all traﬃc that is classiﬁed as harmful
to the local conﬁguration can be safely dropped without worrying about hurt-
ing related applications (e.g., a request that hurts IIS, but not Apache can be
dropped on the edge if we use IIS).
Most ﬁrewalls are restricted in their cycle budget and limit themselves to
ﬂow-based detection (e.g., port-ﬁltering). This is a crude measure at best that
fails to detect many types of malicious data, such as malformed requests sent to
a vulnerable webserver, or all sorts of services deliberately implemented on top
of port 80 to bypass ﬁrewall rules. Like nIDS, most anti-virus software is good
at scanning for known patterns, but often less so at recognising polymorphic
attacks.
Host-based ﬁlters may check protocol ﬁelds up to layer 7. Recent work has
explored the use of protocol-speciﬁc approaches in detection of buﬀer overﬂow at-
tacks [24]. In this approach the address that causes an alert is traced to a speciﬁc
protocol ﬁeld by the signature generator which then determines the maximum
size M for the protocol ﬁeld. We believe this is a promising approach and we
show how we improved the method to be more accurate. Other approaches look
SafeCard: A Gigabit IPS on the Network Card
315
at executable code in traﬃc [25]. We did not opt for this method because it
seems less reliable if ﬁelds are encoded (e.g., URL encoding).
Perhaps the greatest challenge in host-based protection is the need for user
cooperation. If users are slow to update, unwilling to pay for anti-virus software,
or if they disable ﬁrewalls, host-based protection breaks down. The past has
shown that security policies that hinge on proactive users who secure and update
their systems in a timely fashion are problematic.
In summary, the problems we face are twofold: existing solutions both do not
handle many attacks and are already too slow to be able to scale to Gigabit rates.
To deal with both issues and move from weak intrusion detection to stronger
intrusion prevention we present SafeCard, a practical ﬁlter engine that (1) is
fast enough to be placed in-line as an Intrusion Prevention System (IPS), (2)
can handle polymorphism through smarter matching, (3) oﬀers (up to) layer-
7 detection of intrusions through stream reconstruction and application-level
signatures and (4) coalesces the ﬂow-based and payload-based approaches to
increase each other’s eﬀectiveness. When connected to Argos [8], a signature
generating honeypot, it can even stop (some) zero-day exploits.
Kerschbaum [26] uses in-kernel sensors to place an IDS in the datapath. An
important diﬀerence with SafeCard is that sensors require a reconﬁguration of
kernel code and are therefore more OS-speciﬁc. Paxson’s Bro [27] is another
well-known IDS. Bro focuses on event handling and policy implementation. It
relies on other libraries (e.g., libpcap) for its datapath and thus suﬀers from
their performance problems.
3 Architecture
SafeCard must process at network, transport, and application protocol levels,
as well as handle aggregates. For this reason we designed it as a compound,
pipelined IPS built from independent functions elements (FEs). Each FE takes
as input a stream of data and generates as output a stream of classiﬁcation
results. As side-eﬀect it may also generate derived data streams. For example,
an IP-header ﬁlter takes as input a stream of IP packets, and generates a binary
output stream of per-packet pass or drop instructions. More complex is the TCP
translation FE, which takes as input a stream of TCP segments and generates
a set of continuous streams of application data, while using the classiﬁcation
result for signalling to which stream data belongs.
The FEs are interconnected in a directed acyclic graph (DAG), such that an
FEs classiﬁcation results plus one or more data streams serve as input to an-
other. Each FE can have multiple such IO ports. The architecture that is used
to place, connect, instantiate and run FEs is known as Streamline, a complete
overhaul of its predecessor, the fairly fast packet ﬁlter (FFPF [28]). Stream-
line extends FFPF in many ways, for instance by adding stream reassembly,
distributed processing, packet mangling and forwarding.
Before continuing with implementational details we discuss the FEs that form
the stages in the pipeline. SafeCard combines 4 stages of defence: header-based
316
W. de Bruijn et al.
Fig. 1. Functional architecture of the intrusion prevention system
ﬁltering, payload inspection, ﬂow-based statistical processing and application
level protocol reconstruction. Supporting these methods are 3 additional stages:
packet receive, packet transmit, and TCP stream reassembly. The full 7-stage
pipeline is shown in Figure 1. FEs forward traﬃc from left to right, but each FE
can drop what it perceives as malicious data. Only safe traﬃc reaches the last
stage, where it is transmitted to its destination. The Prospector stage can only
be applied to a a limited set of protocols (currently only HTTP) and is therefore
bypassed by other traﬃc.
The ﬁrst practical stage, header-based ﬁltering, is implemented using FPL-
3 [29]. Its functionality is run-of-the-mill and roughly equivalent to pcap. We
will not discuss it further. The other FEs are explained in the order in which
they are encountered by incoming packets.
3.1 Zero-Copy TCP Stream Reassembly
Recreating a continuous stream of data from packets is expensive because in the
common case it incurs a copy of the full payload. TCP is especially diﬃcult to
reconstruct, as it allows data to overlap and has many variants. These features
have been frequently misused to evade IDSs. We have developed a version of
TCP reassembly that is both eﬃcient and secure. We reassemble in-place, i.e. in
zero-copy fashion, and take a conservative view of traﬃc by dropping overlapping
data.
In terms of performance, we win by reducing memory-access costs. In the
common case, when packets do not overlap and arrive in-order, our method
removes the cost of copying payload completely. Instead, we incur a cost for
bookkeeping of the start and length of each TCP segment. Due to the (growing)
inequality between memory and CPU speed this cost is substantially smaller.
Our TCP reassembly design is based on the insight that consumers of TCP
streams do not need access to the streams continuously. They only need to receive
blocks in consecutive order. Applications generally use the Socket read(..) call
for this. We have slightly modiﬁed this call to return a pointer to a block, whereas
it normally receives one from the caller. We exploit this change to implement
zero-copy transfer as follows. First, we never supply more data than ﬁts in a single
TCP segment. read(..) is allowed to return a smaller block than was requested.
Second, instead of allocating a transfer buﬀer and copying data into it we return
a pointer directly into the original segment. The transport architecture used
to support this is not standard. Packets are stored in one large circular packet
buﬀer. TCP streams have private circular pointer buﬀers, which store references
SafeCard: A Gigabit IPS on the Network Card
317
to the start and end of TCP segments. References are valid only as long as the
pointed-to elements in the shared packet buﬀer exist.
Our method is not just fast, but also secure, because it drops potentially harm-
ful TCP streams. IPSs are inherently more capable in dealing with malformed
TCP options than IDSs: because they work in-line they can operate as a proxy,
reassembling a stream of data as they see ﬁt, checking it, and then re-encoding
the cleansed data in a new TCP stream. Full re-encoding scrubs [30, 2] payload
from abused transport protocol features and thus protects the hosts, but is very
expensive, and incurs multiple checksum computations. The cheap alternative
that we use, dropping malicious streams, will equally deal with malformed pay-
loads, but at much lower cost. In essence, we perform a ﬁrst protocol scrub of
the traﬃc [2]. Later on we will see that higher-layer protocols are scrubbed as
well.
In relation to security, TCP segment overlap is worth mentioning individu-
ally because it has frequently been abused. Meant to circumvent IDS detection,
overlap is powerless against in-line scrubbing. Overlapping traﬃc may be indica-
tive of broader malicious intent, especially when the overlapping segments diﬀer
in content. For this reason its appearance should be notiﬁed to the ﬂow-based
ﬁltering unit, as well. Flow-based detection is discussed further in Section 3.4.
Another security issue concerns out-of-order packet arrival. Received data
must be buﬀered in a reconstruction window until missing data arrives, dramat-
ically increasing memory footprint on links with large bandwidth-delay products.
Arrival of many out-of-order segments can lead to memory exhaustion, a situa-
tion that is potentially exploitable.
One solution is to check payloads per-packet and then pass them on imme-
diately. Feasibility of immediate processing depends on whether ﬁltering algo-
rithms can checkpoint and move around in the datastream. Special care must
be taken not to let an exploit slip through because the signature is larger than
the minimal malicious payload and happens to span two packets.
Even when immediate processing is not possible SafeCard is not subvertible
through memory exhaustion. Since all packets are kept in a single circular buﬀer
there is no memory allocation in the datapath at all. This advantage is oﬀset
by the increased chance of packet drop due to a full buﬀer. Overwriting a single
packet may invalidate an entire (benign) TCP stream if used with in-place re-
assembly. Therefore we have to keep buﬀers large enough to deal with incidental
delays.
3.2 Payload Inspection
Static string matching (as for example provided by hardware CAMs and our own
CardGuard [7]) is too limited for detecting most intrusion attempts. Pattern
matching in SafeCard is therefore implemented using superior regular expres-
sion matching. Our engine, ruler, is innovative in that it matches packets against
the whole set of regular expressions in parallel, which allows it to sustain high
traﬃc rates. Matched substrings can be accepted or rejected entirely, or rewrit-
ten to an altered output packet. Rewriting is of use in address translation or
318
W. de Bruijn et al.
anonymisation, but here we are interested only in Ruler’s high-speed selection
mechanism.
Regular expression matching has been used in IDSs before, but only in special
cases. Traditionally, the cost of matching scales linearly with the number of signa-
tures. Because there are thousands of known signatures, scanning at high-speed
is infeasible. Instead, string-matching algorithms whose runtime complexity re-
mains constant regardless of patternset-size have to be used in the common case.
Ruler can completely replace string-matching because it is a generalisation of and
therefore provably as eﬃcient as Aho-Corasick (AC), a popular constant-time
pattern-matching algorithm that is employed for instance in Snort.
Ruler’s internal design is based on a Deterministic Finite Automaton (DFA).
This allows it to merge many patterns—or more precisely their DFA state
machines—into a single state machine. Each state in the Ruler DFA encodes
a character in a pattern. Patterns that share preﬁxes will reuse subpaths in the
DFA and thus do not impose additional burden apart from their unique tails.
One caveat is that states themselves become more costly to compute when the
number of outgoing connections grows, because internal control-ﬂow is that of a
switch statement. Ruler reverts to an AC automaton when run with only static
strings, but it can be extended, for instance with (unbounded) repetitions.
Compiling regular expressions like those in Ruler is a well-studied prob-
lem3 [32]. The standard approach is to ﬁrst generate a Non-deterministic Fi-
nite Automaton (NFA) from the regular expressions. This NFA contains state
transitions for all matching possibilities of all regular expressions in the ﬁlter.
The NFA is then converted to its DFA form using the subset algorithm. This
algorithm traces execution paths through the NFA, and lists the sets of NFA
states that can be reached for each known NFA state set and each possible input
character. Each distinct NFA state set is a distinct state in the DFA.
To the DFA we apply general optimisations: (i) we merge overlapping parts of
the patterns as much as possible, (ii) we eliminate unreachable patterns and ma-
chine states, (iii) we stop the state machine as soon as a verdict can be reached,
and (iv) we use a standard state minimisation algorithm [33] to construct a DFA
with the smallest number of states.
The Ruler DFA is further optimised for traﬃc processing. Network packets
often contain ﬁxed-length stretches of bytes that need not be inspected at all,
such as header ﬁelds. Instead of having the state machine go through the mo-
tions for these bytes, we support ‘jump’ states that skip past them. Also, we
have provisions for content-dependent ﬁeld lengths, such as IP headers, whose
length is deﬁned in the header itself. Continuous streams place further demands
on the matching engine. An engine must be able to handle multiple streams
concurrently, each of a-priori unknown length. Ruler is capable of checkpointing
its state so that it can switch between streams at will. When data arrives for a
stream it will resume exactly where it left oﬀ.
3 In fact, things are not this simple. Ruler also supports packet rewriting, which re-
quires tagging of positions in the regex for which we need a generalisation of the
DFA construction algorithm [31]. This is beyond the scope of this paper.
SafeCard: A Gigabit IPS on the Network Card
319
A second performance beneﬁt stems from the method of Ruler’s execution.
Instead of running in an interpreter, Ruler code is compiled straight to assembly.
Back-ends exist for network stream processors, kernel modules and application
code. Even Verilog (for FPGAs) can be produced, although this is currently in
its infancy. When used within Streamline, Ruler automatons can be compiled,
shipped and instantiated at runtime on the supported hardware with minimal
intervention.
With the help of our snort2ruler compiler most Snort signatures can be
automatically incorporated in the Ruler DFA, but Ruler also has its own high-
level input language. This supports protocol-speciﬁc constructs such as TCP
options and variable-sized ﬁelds to aid signature generation. Let us illustrate
the language with an example: scanning for the Slammer worm. Slammer is
a 376 byte payload encapsulated in a UDP packet destined for port 1434. To
ﬁnd Slammer-based intrusion attempts in a packet stream, we would use the
following ﬁlter:
include "layouts.rli"
filter slammer [accept_reject]
IPv4_Ethernet_header
IPv4_header with [protocol=17]
UDPv4_header with [dest=1434,length=376]
4 1 1 1 1 1 * "." "D"|"d" "L"|"l" "L"|"l" * => accept;
We require that packets start with Ethernet, IPv4 and UDP headers. The layout
of these headers is deﬁned in the include ﬁle layouts.rli, which is not shown
here. We then scan the payload of such packets for the signature "04 01 01 01
01 01.*[.][Dd][Ll][Ll]". In SafeCard the packet is dropped when a match
is made.
3.3 Protocol-Speciﬁc Detection of Polymorphic Attacks
Scanning streams for known signatures using regular expressions catches a large
class of known and immutable attacks. However, future worms are expected to
be increasingly polymorphic. While exploits are less likely to exhibit advanced