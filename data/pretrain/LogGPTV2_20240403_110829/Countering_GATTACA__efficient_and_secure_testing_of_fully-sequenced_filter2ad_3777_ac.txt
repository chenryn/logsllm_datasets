c )
X, {a1, . . . , av}
ℓ1
, . . . , a′
Y, {a′
ℓv}
{ts1, . . . , tsw}
i = (ai)R′
Online
∀i 1 ≤ i ≤ v, a′
(a′
∀j 1 ≤ j ≤ w, tsj = H′(X Rs· ksj)
1, . . . , a′
) = Π(a′
v )
s
, . . . , a′
ℓv
ℓ1
Figure 1: PSI-CA protocol from [17]. It executes on common input of two primes p and q (such that q|p − 1), a generator g of a
subgroup of size q and two hash functions, H and H′, modeled as random oracles. All computation is mod p.
hardware, as it requires both parties to perform online computation
over the entire genome. Speciﬁcally, PSI-CA entails a number of
(short) modular exponentiations linear in the input size. Table 1
estimates execution times and bandwidth incurred by this naïve ap-
proach. Since Client’s online computation depends on that of the
Server, a single test would consume approximately 10 days.
Ofﬂine
Time
4.5 days
4.5 days
Online
Time
4.5 days
4.5 days
Size
358 GB
414 GB
Client
Server
Table 1: Computation and communication costs of the ﬁrst
straw-man PPGPT protocol.
Improved Protocol. Since about 99.5% of the human genome is
the same, two parties would only need to compare the remaining
0.5%. Unfortunately, there is yet not enough statistical knowledge
to pinpoint where exactly this 0.5% occurs. Nonetheless, experts
claim that, in practice, comparing a properly chosen 1% of the ge-
nome yields an accuracy comparable to analyzing the entire ge-
nome [28]. Running times and bandwidth overhead required by
this improved method are presented in Table 2.
Ofﬂine
Time
67 mins
67 mins
Online
Time
67 mins
67 mins
Size
3.57 GB
4.14 GB
Client
Server
Table 2: Computation and communication costs of improved
PPGPT protocol. Computation is performed over 1% of the
human genome.
Efﬁcient RFLP-based PPGPT
We now present a very efﬁcient technique for Privacy-Preserving
Genetic Paternity Testing (PPGPT). To construct it, we take advan-
tage of domain knowledge in genomics and build upon effective in
vitro techniques (RFLP or SNP) rather than generic computational
techniques. First, we design a protocol that implements RFLP-
based GPT. Next, we propose a cryptographic technique for secure
computation of this protocol that realizes PPGPT. Finally, we show
that the technique used for computing RFLP-based GPT can be
easily adapted to perform SNP-based GPT.
As discussed in Sec. 3.1, RFLPs use speciﬁc restriction enzymes
(e.g., HaeIII, PstI, and HinfI), to digest a genome into hundreds
of smaller fragments. Following the deterministic and well-known
process, enzymes cut the DNA at each occurrence of a given pattern
(e.g., “CTGCAG” with PstI). Next, a subset of these fragments is
selected using a small number of probes for well-known markers,
which are located in known areas of the genome.
In an RFLP-
based paternity test, this process is applied to the DNA of the two
tested individuals. If resulting fragments have comparable lengths,
then the test returns a positive with certain conﬁdence, based on the
exact number of fragments of the same length.
There are a few slightly different ways to select the type and
the number of markers, thus identifying exactly which fragments
to compare. For the sake of reliability, one needs to use markers
that are rare enough (i.e., occur in unrelated individuals with very
low probability) while common enough to occur in at least one of
the tested subjects. Currently, public databases and scientiﬁc litera-
ture offer thousands available probes for RFLP in human genomes
[10, 62, 70]. However, to reduce the cost of in vitro tests, only a
small subset of them is actually used [18]. Different laboratories
consider various accuracy/cost trade-offs. Some compare as few as
9-15 DNA markers, returning a positive result whenever fewer than
two fragments do not match [12], with an estimated 99.9% accu-
racy. Meanwhile, others use up to 25 markers and return a positive
whenever fewer than two fragments do not match, thus providing
signiﬁcantly higher accuracy, i.e., about 99.999% [22, 50].
In the United States, these testing methodologies follow precise
regulations issued by the American Association of Blood Banks
(AABB) and are considered legally admissible as evidence in the
court of law. Since our PPGPT technique closely mimics the in
vitro procedure, it achieves the same level of accuracy. Neverthe-
less, as the cost of RFLP emulation on digitalized genomes is not
signiﬁcantly affected by the number of selected markers, we can
anticipate increasing the number of markers to improve accuracy.
We could perform tests with 50 markers and show that this only
adds a small cost. However, selection of additional markers is out
of the scope of this paper, as their introduction does not change the
algorithm’s functionality presented below.
RFLP-based Protocol. This protocol involves two individuals, on
private input of their respective fully sequenced genomes. We dis-
tinguish between Client and Server, to denote the fact that only the
former learns the test outcome. The protocol is run on common
696/
/
o
o
input of: a threshold τ , a set of enzymes E = {e1, . . . , ej}, and a
set of markers M ={mk1, . . . , mkl}. Each participant also inputs
its digitized genome.
1. First, participants emulate the digestion process of each en-
zyme ei ∈ E on their genome. Consider, for instance, the
PstI enzyme: whenever the string CTGCAG occurs, the en-
zyme cuts the genome in two fragments, so that the ﬁrst ends
with CTGCA and the second starts with G. As a result, ge-
nomes are digested into a large number of fragments of vari-
able length.
2. Next, participants probe the fragments using markers in M .
During this process, each participant selects up to l fragments
{f rag1, . . . , f ragl} (e.g., l = 25), corresponding to M . All
remaining fragments are discarded. Public markers are cho-
sen such that each appears in at most one sequence.
i
|, mki)}l
3. Client builds the set FC = {(|f rag(c)
i=1. For each
marker i not corresponding to any fragment, f rag(c)
is re-
placed with the empty string. Similarly, Server builds FS =
{(|f rag(s)
4. Client and Server run the PSI-CA protocol described in Fig. 1,
on respective inputs: FC and FS. Client learns pt = |FC ∩
FS|, i.e., how many of its and Server’s fragments are of the
same size.
5. Client learns the test result by comparing pt to threshold τ .
i
|, mki)}l
i=1
i
tocol can be extended to perform paternity testing using SNPs: in-
stead of selecting fragments using enzymes and markers, the SNP-
based test selects fragments using a set of known SNPs. Since the
rest of the protocol is unchanged and the size of the set of SNPs is
usually 52 elements [7], the new protocol performs almost identi-
cally to the RFLP-based PPGPT protocol with 50 fragments.
Performance Evaluation. We now measure performance of the
RFLP-based protocol on the Intel Core i5-560M testbed. The (of-
ﬂine) time needed to emulate the enzyme digestion process on the
full genome is 74 seconds. This computation is performed only
once, thus, it does not affect the time required to perform the in-
teractive protocol. Finally, in order to assess the practicality of the
protocol on embedded devices, we also measured its performance
on a modern smartphone — a Nokia N900 equipped with ARM
Cortex A8 CPU running at 600 MHz. Table 3 summarizes the on-
line cost of the RFLP-based protocol, measuring computation and
communication overhead, using different numbers of markers, on
both i5-560M and A8 processors.
Ofﬂine (Time)
A8
Entity (markers)
Client (25)
Server (25)
Client (50)
Server (50)
i5-560M
3.4 ms
3.4 ms
6.7 ms
6.7 ms
323 ms
323 ms
645 ms
645 ms
Online (Time/size)
i5-560M
3.4 ms
3.4 ms
6.7 ms
6.7 ms
A8
323 ms
323 ms
645 ms
645 ms
Size
3 KB
3.5 KB
6 KB
7 KB
Why Compare Lengths? It might seem that comparing string
lengths is unreliable since two same-length strings might encode
completely different content, while our protocol would consider
these strings as matching. In practice, however, this well-established
technique yields false positives with extremely low probability. Se-
quences are selected using markers, i.e., according to (part of) their
content. Selection of markers, in turn, guarantees that they appear
only in one speciﬁc position in the entire genome. Edges of each
fragment are content-dependent as well, since enzymes digest them
according to a speciﬁc pattern of nucleotides. Therefore, two un-
related sequences of the same length would not be compared and
two same-length sequences containing the same marker should be
indeed considered matching.
Furthermore, this approach boosts the resilience of PPGPT a-
gainst sequencing errors. Only errors occurring in the pattern di-
gested by enzymes (or in the markers) inﬂuence the result of the
RFLP-based PPGPT. However, since patterns and markers are rel-
atively short compared to the size of the genome, this happens
with very low probability, since sampling errors are uniformly dis-
tributed. However, if we let participants compare hashes of frag-
ments, rather than their length, even a moderate error rate would
severely increase the probability of false negatives, since even a
single sequencing error would affect the ﬁnal outcome of the test.
Moreover, the main purpose of the PPGPT presented in this paper
is not to improve accuracy of the in vitro test currently used, but to
efﬁciently and securely replicate it in silico.
PSI-CA or PSI? The use of PSI-CA, rather than PSI, is needed
to minimize information learned by Client from protocol execution.
With PSI, if the number of matches is sufﬁciently high (even if the
test is negative), Client would learn the lengths of several Server’s
fragments: it could then use this information to perform a paternity
test between the party previously playing the role of Server and any
other individual (although with slightly lower reliability).
SNP-based Protocol. SNP-based tests are replacing RFLP-based
tests due to their better performance [7]. While this technique is not
yet considered legally admissible in court, it is expected to eventu-
ally supersede its RFLP-based counterpart. Our RFLP-based pro-
Table 3: Computation and communication costs of RFLP-
based PPGPT technique, testing 25 and 50 fragments.
For the sake of completeness, we compared our results to prior
work on privacy-preserving paternity testing, presented in Figure
3 of [6]. Following a conservative approach, we instantiate: (i)
the cheapest protocol variant, which tolerates no error, and (ii) the
most efﬁcient additively homomorphic cryptosystem among those
suggested, i.e., modiﬁed ElGamal [21]. Also, we only count the
number of modular exponentiations. Given that the paternity test
is performed over n alleles (with n ranging from 13 to 67 for in-
creasing accuracy) we estimate the following costs. In step (2) of
the protocol, the party obtaining the test result computes 8n modi-
ﬁed ElGamal encryptions, thus, incurring 24n (short) modular ex-
In the i5-560M testbed, this takes from 43ms to
ponentiations.
224ms, depending on n. In step (3), the other party needs to ob-
tain the encrypted sum using homomorphic properties: it does so
by performing 30n exponentiations. This takes between 54 and
262ms on the i5-560M testbed. Even ignoring all other operations
in [6] and without pre-computation, our most accurate test (using
50 markers) is about 5 times faster than the least accurate test in [6]
(using 13 alleles).
4.2 Personalized Medicine
Personalized Medicine (PM) is increasingly used to provide pa-
tients with drugs designed for their speciﬁc genetic features. As
discussed in Sec. 1, in the context of PM, drugs are associated with
a unique genetic ﬁngerprint. Their effectiveness is maximized in
patients with a matching DNA [37]. To this end, genomes need to
be compared against the ﬁngerprint and a patient need to surrender
her DNA to a physician or a pharmaceutical company.
One privacy-preserving approach is to let the patient indepen-
dently run specialized software over her genome and identify a
match (or lack thereof) with a given drug’s ﬁngerprint. This way,
the patient would learn whether the drug is appropriate. However,
pharmaceuticals may consider DNA ﬁngerprints of their drugs to
be trade secrets and thus might be unwilling to reveal them. At the
same time, for every new drug, pharmaceuticals are required to ob-
697tain approval from appropriate government entities, e.g., the Food
and Drug Administration (FDA) in case of the United States.
We now introduce a technique for Privacy-Preserving Personal-
ized Medicine Testing (P3MT), involving the following steps:
• Following positive clinical trials, a pharmaceutical company
obtains FDA approval on a speciﬁc DNA ﬁngerprint f p and
receives a corresponding authorization, auth.
• The pharmaceutical and the patient engage in a protocol,
where the former inputs (f p, auth) and the latter inputs her
genome.
• At the end of the protocol, the pharmaceutical learns whether
the patient’s genome matches ﬁngerprint f p, provided that
auth is a valid authorization of f p.
Privacy requirements are that: (1) the company learns nothing about
patient genome besides the part matching the (authorized) ﬁnger-
print, and (2) the patient learns nothing about f p or auth.
P3MT Instantiation
We now present a speciﬁc P3MT instantiation. It involves: (1) an
authorization authority (e.g., the FDA) denoted as CA, (2) a phar-
maceutical — Client, and (3) a patient — Server.
Our cryptographic building block is Authorized Private Set In-
tersection (APSI) [8, 15, 16], hence, our Client/Server/CA nota-
tion. We select one speciﬁc APSI construction in [15], illustrated
in Fig. 2, since it currently offers lowest communication and com-
putation complexity. (Moreover, it can be instantiated in the mali-
cious model with only a small constant additional overhead.) For
efﬁciency reasons, Rc:i’s and Rs are chosen uniformly at random
from W = [1..⌊√N /2⌋], rather than from ZN/2, as in the original
version of the protocol. In fact, as proved in [32], the distribution
of gx mod N with x ← W is computationally indistinguishable
from the distribution deﬁned by gx with x ← [1..φ(N )]. This