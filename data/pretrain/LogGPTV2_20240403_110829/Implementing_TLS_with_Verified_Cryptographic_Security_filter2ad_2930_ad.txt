such as AE, we may design F so that C itself is a valid
simulator, i.e. C · A ≈ C · F · A.
Intuitively, emulating such
a functionality corresponds to being secure with respect to a
left-or-right game, in which the left game just does forwarding
and the right game applies the ﬁlter F .
Ideal Interfaces Instead of code, we may use types to express
perfect security properties. For AE, for instance, the ideal
interface below speciﬁes ciphertext integrity (INT-CTXT):
val ENC: p:plain → c:cipher {ENCrypted(p,c)}
val DEC: c:cipher→ o:(plain option)
{∀p. o=Some(p) ⇔ ENCrypted(p,c)}
This interface is more precise than IC: ENC now has a
post-condition ENCrypted(p,c) stating that its result c is an
451
encryption of its argument p. (ENC may assume this as an
event.) Hence, the postcondition of DEC states that decryption
succeeds (that is, returns Some p for some plaintext p) only
when applied to a cipher produced by ENC p.
A module is secure with respect to an ideal interface Ii
C
when it asymptotically implements it, in the following sense:
Deﬁnition 1: C is Ii
C-secure if there exists a module Ci
with (cid:2) Ci ; Ii
C such that, for all p.p.t. expressions A with
C (cid:2) A, we have C · A ≈ Ci · A.
Ii
For instance, one may use an ideal functionality F such that
F ; Ii
C. The advantage of type-based security is that one can
then automatically continue the proof on code that uses Ii
C.
Secrecy using Ideal Interfaces To deﬁne conﬁdentiality using
types, we introduce concrete and ideal
interfaces for the
module that deﬁnes plaintexts for encryption:
type repr = b:bytes {Length(b) =plainsize}
type plain
val repr: plain → repr
val plain: repr → plain
Deﬁnition 2: A plain interface IPlain is of the form
The type repr gives the representation of plaintexts, whereas
the type plain is abstract, with functions repr and plain to
convert between the two. (These may be implemented as
the identity function.) The ideal plain interface Ii
Plain is IPlain
without these two functions. Intuitively, removing them makes
the interface parametric in type plain, so that we can apply
Theorem 2. Using ideal plain interfaces, we give an interface-
based deﬁnition of secrecy.
Plain
(cid:2) is Ii
C, Ii
C-secure, and C
(cid:2) C i ; Ii
Deﬁnition 3: C is Ii
Plain
C (cid:2) A, we have P · C · A ≈ P · C i · A.
module C i with Ii
modules P with (cid:2) P ; I i
IPlain, Ii
; Ii
C-secure when there exists a
C such that, for all p.p.t.
Plain, (cid:2) P ; IPlain, and A with
Parametricity guarantees both plaintext secrecy and integrity
(but not ciphertext integrity). For example, a protocol using
AE may deﬁne type plain = m:repr{Msg(m)} where Msg is
the protocol speciﬁcation of an authentic plaintexts and then
rely on typing to ensure authenticity of decrypted plaintexts.
Multi-instance functionalities Ideal functionalities and inter-
faces compose in the following intuitive sense: if the interfaces
IC and IC(cid:2) are disjoint, C is Ii
C(cid:2)-secure,
then C·C
C(cid:2)-secure, and similarly with functionalities.
Rather than a ﬁxed number of modules, we may use a
module that support multiple, dynamic instances, via a code
transformation that adds an index value (plus e.g. a key) to
every call. (Software libraries are typically multi-instance.)
For a keyed primitive, this module may generates a key at
each call to some function GEN: id:index → (;id)k. The user
provides the index, and type safety guarantees that materials
with different indexes are not mixed. For example, an ideal
multi-instance interface for AE is:
type (;id:index)key
val GEN: id:index → (;id)key
val ENC: id:index → (;id)key → p:(;id)plain→
c:cipher {ENCrypted(id,p,c)}
val DEC: id:index → (;id)key → c:cipher →
o:(;id)plain option { ∀p. o = Some(p) ⇔ ENCrypted(id,p,c) }
(cid:2) is Ii
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:52:05 UTC from IEEE Xplore.  Restrictions apply. 
This interface is parameterized by a plain module that de-
ﬁnes an indexed abstract type (;id:index)plain, and uses an
ENCrypted predicate with an extra index argument. Some
multi-instance interfaces rely on usage restrictions that cannot
be enforced by typing. We document these restrictions as side
conditions. For instance, to achieve CTXT, we would usually
require that users never generate two keys with the same index.
Deﬁnition 4: A program A is a restricted user of Ii
C when
C (cid:2) A and A calls GEN with pairwise distinct indexes.
Ii
Weak cryptographic algorithms Since indexed types keep
different instances separated, we may as well use different
algorithms, as long as they meet
the same interface. For
example, the index may include the name of the algorithm.
Interestingly,
this provides support for dealing with weak
cryptographic algorithms, that is, algorithms that do not meet
their speciﬁed security property. To this end, we introduce a
predicate on indexes, Strong(id), that holds when the algorithm
is cryptographically secure, and we reﬁne our ideal interface
so that it offers security guarantees only at strong indexes.
For AE, we have two security properties, so we introduce
predicates StrongAuth for authenticity and Strong for authen-
ticated encryption. Hence, our postcondition of DEC now
is {StrongAuth(id)⇒ (∀p.o = Some(p) ⇔ ENCrypted(id,p,c))}
We also generalize our ideal plain interface, leaving the
plain and repr functions available, but with preconditions that
restrict their usage to weak algorithms:
val plain: id:index{ not(StrongAuth(id)) } → repr → (;id)plain
val repr: id:index{ not(Strong(id)) } → (;id)plain → repr
Intuitively, this enables AE to forge ciphertexts (or access
plaintexts) at weak indexes, reﬂecting the fact that we do not
have cryptographic security for their concrete algorithms.
Key compromise Cryptographic keys can be corrupted. As a
further reﬁnement of our interfaces, we consider two forms of
key compromises: the leakage of honestly generated keys, and
adversarially chosen keys. To this end we introduce a predicate
on indexes, Corrupt(id), that holds when keys are corrupted.
To provide the adversary with the possibility to compromise
keys we extend our indexed interfaces Ii
val LEAK: id:index {Corrupt(id)} → (;id)key → bytes
val COERCE: id:index {Corrupt(id)} → bytes → (;id)key
and we adapt our ideal interfaces to provide security guar-
antees conditioned by the predicate not(Corrupt(id)), e.g., for
AE, the postcondition of DEC becomes { not(Corrupt(id))∧
StrongAuth(id)⇒ (∀p. o = Some(p) ⇔ ENCrypted(id,p,c))}.
C with functions
As noted, e.g., by [4, 40], an idealized module C i that
ﬁrst encrypts a message and then leaks a key cannot be both
indistinguishable from a real encryption scheme C and para-
metric in the message. Given a ciphertext that is independent
of the message, efﬁcient encryption schemes simply do not add
enough ciphertext entropy to allow the simulation of adaptive
corruptions. To avoid the commitment problem, we require
Corrupt to be monotonic, and ﬁxed after the ﬁrst encryption
of a secret message.
In our TLS formal development,
indexes are similar,
they keep track of more detailed information, for in-
but
the transport
stance about
the ciphersuite and certiﬁcates used in the
handshake to generate the keys. In §IV, we will use two
main predicate on indexes, Safe that guarantees both au-
thenticity and secrecy for
layer, and Auth
that guarantees authenticity but not necessarily secrecy, logi-
= not(Corrupt(id)) ∧ StrongAuth(id)
cally deﬁned as Auth(id)
= not(Corrupt(id)) ∧ Strong(id). For simplicity,
and Safe(id)
we do not model the independent corruption of connections
after key establishment, so the Corrupt predicate will be
determined by the handshake, as the negation of its Honest
predicate on long-term keys.
(cid:3)
(cid:3)
IV. AUTHENTICATED ENCRYPTION FOR TLS STREAMS
We brieﬂy describe the record layer, explain the new length-
hiding features of our API, then outline our results for authen-
ticated encryption in TLS.
Fragment; Compress; MAC; Pad; then Encrypt For each
connection epoch, the transport layer runs two independent
instances of stateful authenticated encryption (StAE) for com-
municating sequences of data fragments in both directions. The
handshake creates these instances according to the sufﬁx of the
negotiated ciphersuite (after WITH), and provides them with
adequate keying materials. In this section, we consider only
the usual MAC-then-encrypt ciphersuites, parameterized by a
symmetric encryption algorithm (3DES, AES, or RC4) and a
MAC algorithm (e.g., HMAC with SHA1); our implementation
also supports all authentication-only ciphersuites and has a
placeholder for GCM encryption.
From protocol messages down to network packets, StAE
proceeds as follows: (1) the message is split into fragments,
each containing at most 214 bytes; (2) each fragment
is
compressed using the method negotiated during the handshake,
if any; (3) each fragment is appended with a MAC over its
content type, protocol version, sequence number, and contents;
(4) when using a block cipher, each fragment is padded, as
detailed below; (5) the resulting plaintext is encrypted; (6)
the ciphertext is sent over TCP, with a header including the
protocol version, content type, and length.
The details of fragmentation and padding are implemen-
tation dependent, but those details matter inasmuch as they
affect cryptographic security and network trafﬁc analysis.
Trafﬁc Analysis and Fingerprinting Even with perfect
cryptography, trafﬁc analysis yields much information about
TLS applications [25]. For example, compression may reveal
redundancy in the plaintext when both plaintext and ciphertext
lengths are known [37]; this sufﬁces to break any IND-CPA
based notion of secrecy. More surprisingly, TLS ﬁrst fragments
then compresses, hence sequences of ciphertext lengths may
leak enough information to identify large messages being
transferred. Thus, we implemented a new attack showing that
an eavesdropper can uniquely identify JPG images and MP3
songs selected from a database, simply by observing short sub-
sequences of ciphertext lengths. The attack is most effective
against RC4 ciphersuites, but also succeeds against block
ciphers with minimal padding.
452
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:52:05 UTC from IEEE Xplore.  Restrictions apply. 
Accordingly, our implementation disables compression, and
our formal results apply only to connections where TLS-level
compression is disabled.
TLS is not designed to prevent trafﬁc analysis, but it does
provide countermeasures when using a block cipher: padding
before encryption hides the actual plaintext length and, by
inserting extra padding beyond the minimal required to align
to the next block boundary, one can hide a larger range of
plaintext lengths. The padding may be any of the following
256 arrays [|0|], [|1; 1|], . . . , [|255;. . .; 255|] as long as the
resulting plaintext is block-aligned. Most implementations use
minimal padding; others, such as GnuTLS [45], randomly
select any of the correct paddings, but per-fragment padding
schemes are often statistically ineffective [25].
A Length-Hiding TLS API Our API lets applications hide
the length of their messages by indexing them with a range
m..n where 0 ≤ m ≤ n. Intuitively, an observer of the
encrypted connection may learn that the plaintext ﬁts within
its range, while its actual length remains secret.
their actual
Consider for example a website that relies on personalized
cookies, containing between 100 and 500 bytes. The website
may give cookies the indexed abstract type (;(100,500))data,
hence requesting that
length be hidden. The
range (100,500) is treated as public, and sufﬁces to determine
fragmentation and padding. If the connection uses a block
cipher, say AES 128 CBC SHA, then any value of this type
can be uniformly split, MACed, encoded, and encrypted into
two fragments of 36 blocks each. Extending this idea, we im-
plement a deterministic fragmentation and padding algorithm
for block ciphers based only on ranges.
Authenticated Encryption Schemes We present
the two
modules that implement multi-instance authenticated encryp-
tion for TLS fragments: ﬁrst LHAE, featuring indexes, ranges,
and additional data (AD) to be authenticated with the plaintext;
then StAE, implementing stateful encryption on top of LHAE
and organizing fragments into streams.
Length-Hiding Authenticated Encryption (LHAE) We deﬁne
I i
LHAEPlain
LHAEPlain
outlined below.
type (;id:index,ad:(;id)data,r:range) plain
type (;r:range) rbytes = b:bytes{ fst(r) ≤ Length(b) ≤ snd(r) }
val plain: id:index{not(Auth(id))} →
r:range → ad:(;id)data → (;r)rbytes → (;id,ad,r) plain
val repr: id:index{not(Safe(id))} →
r:range → ad:(;id)data → (;id,ad,r) plain → (;r)rbytes
Each plaintext is indexed by an instance id, its additional
data ad, and its range r. We use the reﬁned type (;r)rbytes
for concrete representation of plaintexts that ﬁt in range r.
The functions plain and repr translate between concrete and
abstract plaintexts. As explained in §III, their precondition
states that LHAE can use them only on weak ids (e.g. for
weak ciphersuites or corrupt keys).
LHAE security for the plaintext interface I i
;Ii
We deﬁne the interface Ii
LHAE parametrized by I i
omit its COERCE and LEAK functions for brevity.
type (;id:index) key
val GEN: id:index → (;id) key
LHAEPlain; we
val ENC: id:index → k:(;id) key → d:(;id) data → r:range →