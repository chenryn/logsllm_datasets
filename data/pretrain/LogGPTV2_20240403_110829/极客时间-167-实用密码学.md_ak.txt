# 13 \| 如何防止数据被调包？你好，我是范学雷。 还记得我们在前面讨论过 CBC模式补齐预言攻击吗？当时，我们谈到了一个问题，就是解密端是无法判断解密得到的数据是发送者发送的数据，还是被人掉了包的数据的。 这就好比，牛郎要送的信是，"七夕今宵看碧霄，牛郎织女渡鹊桥"。织女拆开一看，却是一堆乱码，或者是变成了"我断不思量，你莫思量我。将你从前与我心，付与他人可"。 如果这封信真的变成了一堆乱码，就意味着信息没有被有效地送达，这样会给织女愁上加愁；而如果内容是"我断不思量"，简直就是一支穿心箭，这可一点都不好玩。 那么，织女看到"我断不思量，你莫思量我。将你从前与我心，付与他人可"的信件，除了靠坚贞不渝的信念这个不靠谱的办法之外，她有没有其他的办法来判断这是一封伪造的信件？牛郎除了坚信织女有坚贞不渝的信念之外，他有没有其他的办法来预防信件的伪造？ 其实，**解决****问题****的思路****也****很直观，就是要能够验证发送的信息**。牛郎发送信息时，心里要想着意外情况，要给织女提供验证信息的办法。织女收到信息时，要有办法验证信息的真伪，不能只依靠心里的信念。 那么，我们今天这一讲，就来分析一下如何防止数据被调包这个问题。 怎样有效地验证一段信息？首先，我们来分析下，要想有效地验证一段信息，需要满足什么条件呢？ 第一个条件就是，**我们要有额外的信息**。只有要验证的信息本身，是没有办法验证这个信息的。也就是说，信息本身不能自己验证自己。这个额外的信息，我们暂且称之为验证信息。 第二个条件就是，**验证****信息和待验证的消息****之间要有关联**。如果没有关联，也就意味着如果我们替换掉待验证的信息，验证信息并不受影响，这显然起不到验证的作用。 如果待验证的信息有变动，验证信息也要变动，而且验证信息的变动结果要不可预测。如果可以人为构造一段信息，它的验证信息和待验证的信息是一样的，也起不到验证的效果。 第三个条件，就是**验证信息的计算要快，数据要小**。不知道这一点，你能不能理解？这点说的就是，计算效率要高，要不然验证信息的实用和推广价值就会大打折扣。 那么，有同时满足上述三个条件的一个方案吗？消息验证码（MessageAuthentication Code,MAC）就是最常用的满足上述三个条件的一个方案。 ![](Images/05ba8596bab70848fa289326e51e292a.png)savepage-src="https://static001.geekbang.org/resource/image/d5/c9/d5eee6ab3fe89befdd25f8cfbe521ec9.jpeg"}消息验证码是怎么工作的？既然消息验证码可以同时满足我们的三个条件，那么消息验证码是怎么工作的？ 首先，我们来看使用消息验证码的前提，就是信息的发送方和接收方要持有相同的密钥，这和我们前面讨论的对称密钥的条件是一样的。能够使用对称密钥的场景，都能够满足这个前提。 另外，信息的发送方和接收方要使用相同的消息验证函数。这个函数的输入数据就是对称密钥和待验证信息。信息的发送方使用消息验证函数，可以生成消息验证码。 接下来，信息发送方把待验证信息和消息验证码都发送给信息接收方。信息接收方使用相同的消息验证函数和对称密钥，以及接收到的待验证信息，生成消息验证码。 然后，信息接收方对比接收到的消息验证码和自己生成的消息验证码。如果两个消息验证码是一样的，就表明待验证信息不是伪造的信息。否则，待验证信息就是被篡改过的信息。 这听起来是一个不错的方案。不过，消息验证函数需要使用对称密钥，输入任意大小的数据，输出为一小段数据。什么样的消息验证函数能够承担起这样的任务呢？ 通常的对称密钥算法，密文数据不会小于明文数据，这样的话，就不能满足验证数据小的要求。因此，通常的对称密钥算法，我们并不能当做消息验证函数使用。 那么，我们到底该怎么选择消息验证函数？ 该怎么选择消息验证函数？我刚才提到，消息验证函数的输出应该是一小段数据，这一点有没有让你想起，我们前面提到的单向散列函数？我们再来回顾一下单向散列函数的三个特点： 1.  正向计算容易，逆向运算困难；        2.  运算结果均匀分布，构造碰撞困难；        3.  给定数据的散列值是确定的，长度固定。        如果你再回头看看，我们上面讨论的消息验证的三个条件，单向散列函数就能够完美地满足这三个条件。那么，对称密钥怎么和单向散列函数结合起来，构造出消息验证函数呢？**最常见的方案就是基于单向散列函数的消息验证码。** 基于单向散列函数的消息验证码（Hash-based Message AuthenticationCode， HMAC）这个名字是不是听起来太长了，所以我们通常使用它的简称HMAC。 在 HMAC的算法里，单向散列函数的输入数据是由对称密钥和待验证消息构造出来的。到目前为止，这种构造方法还没有明显的安全问题，我们不再讨论构造细节。如果你感兴趣，可以查阅1997 年发表的 RFC 2104。 一个密码学算法经历了二十多年还没有明显的安全漏洞，这真的是很难得！ 不过，你需要注意的是，HMAC算法并不使用我们前面讨论过的链接模式。所以，对称密钥链接模式的各种安全问题并不会影响HMAC 算法的安全性。 为什么需要对称密钥？到这里，你是不是早就有了一个疑问，消息验证函数为什么还需要对称密钥呢？我们前面提到，单向散列函数也可以验证数据的完整性。为什么它不直接使用单向散列函数呢？ 还记得吗？我们前面在讨论单向散列函数解决数据完整性问题的时候，还有一个遗留的问题，就是怎么获得原始数据的散列值。对称密钥就是用来解决这个问题的。 我们先来看看，如果没有对称密钥的加入，消息验证码还能不能工作。 信息发送方把待验证信息和消息验证码都发送给信息接收方。假设存在一个中间攻击者，能够解开待验证信息和消息验证码。由于单向散列函数是公开的算法，中间攻击者就可以篡改待验证信息，重新生成消息验证码。 然后，中间攻击者把篡改的信息和篡改的验证码发给信息接收方。篡改的信息和篡改的验证码能够通过信息接收方的信息验证。也就是说，这样的话，信息接收方就没有办法识别出这个信息是不是原始的、没有篡改的信息。这样，信息验证就失效了。 ![](Images/02078b1788d95cb4b6a29d203a76c18b.png)savepage-src="https://static001.geekbang.org/resource/image/3b/02/3ba5851332a0fcc8ea9630473c5c8502.jpeg"}可是，如果对称密钥参与了消息验证码的运算，由于中间攻击者并不知道对称密钥的数据，攻击者就很难伪造出一个能够通过验证的消息验证码。换一个说法，**对称密钥的参与，是为了确保散列值来源于原始数据，而不是篡改的数据。** 有了对称密钥这个私有数据的参与，消息验证码的算法是不是就没有安全漏洞了呢？ 怎么计算 HMAC 算法的强度？HMAC算法与对称密钥和单向散列函数息息相关，所以，对称密钥的安全强度和单向散列函数的安全强度，都会影响HMAC 算法的安全强度。该怎么计算 HMAC算法的安全强度呢？ 严格的来说，HMAC算法的安全强度，是由对称密钥的安全强度和两倍的散列值长度之间较小的那个数值决定的。比如，如果我们选择256 位的对称密钥，以及散列值长度是 160 位的SHA-1。 两倍的散列值长度就是 320 位。那么，在 256 位和 320位两个数值之间，256 位是较小的数值。那么，这个 HMAC 运算的安全强度就是256 位。 一般来说，两倍的散列值长度通常大于流行对称密钥强度。所以，HMAC算法的强度，通常也是由对称密钥决定。简单起见，**对于流行的 HMAC算法，我们只需要考虑对称密钥的安全强度**。 有哪些常见的 HMAC 算法？HMAC算法是由单向散列函数的算法确定的。下面的表格，我列出了一些常见的算法。同样的，我们把HMAC算法也按照退役的、遗留的以及现行的算法来分类。 ![](Images/a996d2f9ede441bc5f8137569bb1e207.png)savepage-src="https://static001.geekbang.org/resource/image/54/20/5409851byy6b8c39102fee2b98aaa720.jpeg"}![](Images/cd22051e0b850dbaf78df7423762d78d.png)savepage-src="https://static001.geekbang.org/resource/image/6f/c8/6fe58983135d71e44afe36cf2b8797c8.jpeg"}其中， **HmacSHA256 和HmacSHA384 是目前最流行的两个 HMAC算法**。和以前的讨论一样，为了最大限度的互操作性和兼容性，我们应该选择当前最流行的算法。 如果单独的加密并不能解决信息的有效传递问题，有没有加密算法，能够综合考虑信息的机密性和完整性？如果存在这样的算法，我们就不需要额外设计消息验证码了。下一次，我们来讨论这个问题。 Take Away（今日收获）今天，我们讨论了防止数据被调包的技术，也就是消息验证码。我们讨论了消息验证码要解决的问题，以及消息验证码的工作原理。我们还谈到如何选择消息验证函数，最常见的方案就是选择基于单向散列函数的消息验证码，也就是HMAC。 为什么我们需要对称密钥？其实是为了解决单向散列函数的遗留问题，因为对称密钥的参与，可以确保散列值来源于原始数据，而不是篡改的数据。 最后，我们还研究了怎么计算 HMAC 算法的强度，还列出了目前常见的 HMAC算法。我们应该选择当前最流行的算法，而对于流行的 HMAC算法，我们只需要考虑对称密钥的安全强度。 通过今天的讨论，我们要： 1.  了解消息验证码要解决的问题；        2.  尽量选用现行的、流行的算法：HmacSHA256 和    HmacSHA384。        思考题今天的思考题，是一个复习题，也是一个改进的题目。 我们前面讨论过的牛郎织女的约会问题。我们再来看看现在，我们有没有更好的办法解决这个问题。如果牛郎要给织女发信息，七夕相约鹊桥会。 >  > 织女：> >>>  > 七月初七晚七点，鹊桥相会。不见不散。> > >>>  > 牛郎> >你能够帮助牛郎想想吗？该怎么使用单向散列函数和消息验证码，来防范约会信息被恶意修改？你建议的办法还有没有其他的问题？ 欢迎在留言区留言，记录、讨论你的想法。 好的，今天就这样，我们下次再聊。 **附：表格中算法参考文献链接** 1.  HmacMD5：        [RFC 1321             2.  HmacSHA1：        [FIPS 180-1            3.  HmacSHA224：        [FIPS 180-3            4.  HmacSHA256、HmacSHA384、HmacSHA512：        [FIPS    180-2         5.  HmacSHA512/224、HmacSHA512/256    ：    [FIPS 180-4             6.  HmacSHA3-224、HmacSHA3-256、HmacSHA3-384、HmacSHA3-512：        [FIPAS 202            
# 14 \| 加密数据能够自我验证吗？你好，我是范学雷。 还记得上一讲，我们讲的消息验证码吗？我们讨论过可以使用消息验证码来验证消息的真伪。但是，不知道你有没有注意，在上一次讨论中，我们并没有讨论该如何安全地传递待验证消息。 而且，待验证信息的传递还是通过明文的方式进行的，这种方式，信息的私密性会受到影响。我们前面讨论过，单独的加密并不能解决信息的有效传递问题，总是存在这样或者那样的问题。 那么，我们能不能把消息验证码和信息加密结合起来，既保持信息的私密性，也保持信息的完整性呢？这就是我们这一次要解决的问题。 先加密还是后加密？想要保持信息的私密性，我们可以在信息传输之前，把明文数据加密成密文数据，然后传输密文数据。如果我们还想要保持信息的完整性，我们就要使用消息验证码。 第一个来到我们面前的问题是：消息验证码和信息加密该怎么结合起来？或者换一种说法就是，怎么构造可认证的加密（AuthenticatedEncryption (AE)）呢？ 加密和验证组合起来的方式不外乎三种方案。 加密并验证第一种方案，就是加密明文数据，计算明文数据的消息验证码，输出密文数据和验证码。这种方案，我们简称为加密并验证。安全外壳协议（SSH）就是采用加密并验证的方案。 ![](Images/009504cf838de0c7c919f6b00238988e.png)savepage-src="https://static001.geekbang.org/resource/image/d9/8c/d9b581e531aa5d05ece275a302f4168c.jpeg"}这个方案的消息验证码，保护的是明文信息的完整性，而不是密文信息的完整性。如果明文信息相同，它的消息验证码也是相同的。从攻击者的角度看，如果发现两个相同的消息验证码，就可以猜测明文信息大概率是相同的。 我们前面反复讨论过，为什么要使用初始化向量来避免重复的明文生成重复的密文。这个方案，又一次把这个缺陷暴露了出来，只不过现在，我们是通过消息验证码来判断的。 加密后验证第二种方案，加密明文数据，计算加密数据的消息验证码，输出密文数据和验证码。这种方案，我们简称为加密后验证。IPSec协议采用的就是加密后验证的方案。 ![](Images/5f6c08867fea2c0c72aed7bbe59fe9ba.png)savepage-src="https://static001.geekbang.org/resource/image/48/a9/481b4ff097445e77b857ed393365a3a9.jpeg"}这个方案的消息验证码，保护的是密文信息的完整性，而不是明文信息的完整性。由于密文是从明文演算过来的，也就间接地保护了明文的完整性。 另外，只要加密算法不把相同的明文信息加密成相同的密文信息，它的消息验证码也就是不同的。所以，这个方案没有上面的加密并验证方案的安全问题。 验证后加密第三种方案，则是计算明文数据的消息验证码，加密明文数据和验证码，输出密文数据。这种方案，我们简称为验证后加密。SSL协议采用的就是验证后加密的方案。 ![](Images/03359b133ee4cee27c9abe7ab6d1c95b.png)savepage-src="https://static001.geekbang.org/resource/image/f5/a8/f5c74b157fe850fb7d2c0d8yye1219a8.jpeg"}这个方案的消息验证码，保护的是明文信息的完整性，而不是密文信息的完整性。如果我们把明文信息和消息验证码看作是一个数据，我们前面提到的CBC攻击方案是不是似乎又回来了？实际的攻击方案比我们前面讨论的复杂，如果你有兴趣，可以看看这篇论文slate-object="inline"。 每一种方案都有重量级的协议支持。重量级的协议都能使用这些方案，我们能不能任意选用哪一款方案呢？我觉得答案是很明显的。 该选用哪一个方案？有了重量级协议的支持，给了我们一个很好的借口。似乎，我们可以选用这其中任何一个方案，把它用到我们的应用程序里。不过，重量级的协议也会有安全问题，有重量级协议撑腰，并不意味着它就是安全的。 由于新的密码分析技术的进展，尤其是前面我们讨论过的 BEAST攻击这种新技术的出现，加密并验证以及验证后加密这两种方案都受到了很大的挑战和质疑。 接下来，在 2014 年以后，无论是 SSH 协议还是 TLS协议，都提供了加密后验证的选项，用来提高协议的安全性。其中，2018年新发布的 TLS 协议，甚至完全抛弃了 CBC模式，也不再使用上述的任何一个方案。 **所以，如果我们只能从上述三个方案中间选择，加密后验证这个方案目前来说，是最安全的方案**。截止到我准备这一讲的时候，就我自己的知识范围里，只要算法选择得当，加密后验证方案还不会出现致命的安全漏洞。 答案似乎很清楚了，结论就是，在应用程序里，我们可以放心使用加密后验证方案。在你决定要把这个结论记下来之前，你想不想知道新的 TLS协议，采用了什么样新的加密方案？这个新的加密方案，应用程序也可以使用吗？ 带关联数据的加密到目前为止，我们都没有讨论，信息是怎么传递给对方的。无论是在互联网里，还是现实生活中，我们要传递给对方的信息，并不单纯只有信息本身。 生活中信件的传递，需要信封，信封上还要贴邮票、盖邮戳；快递的传递，要有包裹，包裹上要贴快递单。信封和包裹，虽然是用来携带具体信息的，但其实也是信息的一部分。信封里的信件是要保密的，但是信封上的信息是公开的。信封上的信息虽然是公开的，但是同样不可更改。 网络上的信息也是这样，而且更复杂。比如一段网络数据，除了要携带应用要传递的信息外，它的信封上一般还要有版本号，信息类型以及数据长度等信息。 ![](Images/50ebec673108c3e9f07251b57c666c96.png)savepage-src="https://static001.geekbang.org/resource/image/ae/4d/aee58eaa5cdb1b9ec7a63df590f6324d.png"}如果一段信息的版本号或者数据类型被篡改，接收方就没有办法正确解读接收到的信息；如果信息的数据长度被修改，接收方就没有办法判断接收的数据是不是完整的，从而影响系统的读写效率，甚至进而存在拒绝服务攻击的风险。 那有没有办法保护信封上的信息，也就是公开部分信息的完整性？ 带关联数据的加密，就是用来解决这个问题的。在解决公开信息的完整性问题的同时，一般的算法设计也会同时解决掉私密信息的完整性问题。所以，这一类算法，通常也叫做带关联的认证加密（AuthenticatedEncryption with AssociatedData（AEAD））。 ![](Images/c1ce4055fdd342159b31bb8a09b1c7f3.png)savepage-src="https://static001.geekbang.org/resource/image/e5/46/e5b3fb7f799d6ae2d8fc4276572a0546.jpeg"}不同于我们前面讨论过的加密函数，带关联的认证加密的加密函数需要三个输入数据： 1.  加密密钥；        2.  明文信息；        3.  关联信息。        输出结果包含两段信息： 1.  密文信息；        2.  验证标签。        一般来说，验证标签可以看做是密文信息的一部分，需要和密文信息一起传输给信息接收方。 如果改变明文信息，密文信息和验证标签都会变化，这一点，就解决了明文信息的验证问题。如果改变关联信息，至少验证标签会不一样，这一点，解决了关联信息的验证问题。 对应地，带关联的认证加密的解密函数需要四个输入数据： 1.  解密密钥；        2.  关联信息；        3.  密文数据；        4.  验证标签。        而输出的是明文信息。在解密过程中，如果密文信息或者关联信息验证失败，明文信息不会输出。换句话说，只有明文信息和关联信息的完整性都得到验证，才会有明文信息输出。 ![](Images/fa74bda9eeadd207222cdc8ee1b91d90.png)savepage-src="https://static001.geekbang.org/resource/image/a9/73/a9920f861a3fd6103f3d325ddac8b573.jpeg"}这么一看，带关联的认证加密既解决了需要保密信息的私密性和完整性，也解决了关联信息的完整性问题，这使得带关联的认证加密算法成为目前主流的加密模式。 带关联的认证加密算法的广泛使用，也使得曾经占据主导地位的 CBC算法可以从容地退出历史舞台。因为，**带关联的认证加密算法能够进行自我验证**。 自我验证，就意味着解密的时候，还能够同时检验数据的完整性。这无疑减轻了应用程序的设计和实现压力。有了带关联的认证加密算法，应用程序再也不需要自行设计、解决数据的完整性问题了。 现在有哪些流行的带关联的认证加密算法呢？下一次，我们接着聊这个话题。 Take Away（今日收获）今天，我们讨论了使用消息验证码构造可认证加密的三种方案。它们分别是加密并验证、加密后验证以及验证后加密。其中，加密并验证以及验证后加密这两种方案存在安全缺陷；加密后验证是一个更安全的方案。 另外，我们还讨论了带关联的认证加密的基本思路 \_。\_带关联的认证加密除了提供可认证的加密，保护私密数据的完整性之外，还通过关联数据保护公开数据的完整性。**能同时保护私密数据的完整性和公开数据的完整性，这是带关联的认证加密算法要解决的主要问题**。 通过今天的讨论，我们要： 1.  知道加密并验证以及验证后加密这两种方案存在安全缺陷，尽量不要使用这两种方案；        2.  了解带关联的认证加密，以及它要解决的问题。        思考题今天的思考题，我们继续挖掘牛郎织女的约会问题。 这一次讨论完，我们再来看看现在有没有更好的办法解决这个问题。为了方便，我把描述部分又抄写一遍。如果牛郎要给织女发信息，七夕相约鹊桥会。 >  > 织女：> >>>  > 七月初七晚七点，鹊桥相会。不见不散。> > >>>  > 牛郎> >你能够帮助牛郎想想吗？该怎么来保证约会信息的私密性和完整性？传递的信息该怎么构造？当然，按照惯例，我们还是要想一想，你建议的办法还有没有其他的问题？ 欢迎在留言区留言，记录、讨论你的想法。 好的，今天就这样，我们下次再聊。 祝你圣诞节快乐！ 