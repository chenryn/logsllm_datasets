### Information on Transitions and Conditions for Method Execution

The information specified in all transitions triggered by a method is encapsulated into pre-conditions and post-conditions for that method, as illustrated in Listing 1. The post-condition asserts that if the pre-condition for invoking a method is true, then its post-condition must also hold true. Specifically, the post-condition of a method \( m \) is considered true if the conjunction of the state invariant of the target state \( t \) and the effect of the transition \( t \) is true, provided that the pre-condition is satisfied. Listing 1 provides an example of the post-condition for the `DELETE(volume)` method.

The implication principle encompasses stateful behavior, as the same method can be invoked from different states, leading to different outcomes. Therefore, if a method is invoked with a specific pre-condition, the corresponding post-condition must also be established.

### Evaluation of Pre- and Post-Conditions

Since the execution of a method may alter the state of a resource, evaluating the pre-condition requires storing the resource state before the method execution. To achieve this, we save the resource state in local variables within the monitor implementation. These values are later used to compute the post-condition. This approach is not computationally expensive because only the values necessary for evaluating guards and invariants are stored, typically requiring just a few bits per method. The pre- and post-conditions generated from the behavioral model and security requirements table in OCL (Object Constraint Language) are shown in Listing 1.

#### Example of Pre- and Post-Conditions

**Pre-Condition:**
```python
PreCondition(DELETE(.../v3/{project[
    (project.id->size() = 1 and project.volumes->size() >= 1 and
    project.volumes 'in-use' and user.id.groups = 'admin') or
    (project.id->size() = 1 and project.volumes->size() >= 1 and
    project.volumes.size() > 1 and volume.status <> 'in-use' and
    user.id.groups = 'admin') or
    (project.id->size() = 1 and project.volumes->size() >= 1 and
    project.volumes = quotasets.volume and volume.status <> 'in-use' and
    user.id.groups = 'admin')
]})):
```

**Post-Condition:**
```python
PostCondition(DELETE(.../v3/{project[
    ((project.id->size() = 1 and project.volumes->size() >= 1 and
    project.volumes 'in-use' and user.id.groups = 'admin'))
    ==> project.id->size() = 1 and
    project.volumes->size() >= 0) or
    ((project.id->size() = 1 and project.volumes->size() >= 1 and
    project.volumes.size() > 1 and volume.status <> 'in-use' and
    user.id.groups = 'admin'))
    ==> project.id->size() = 1 and
    project.volumes->size() >= 1 and
    project.volumes.size() > 0) or
    ((project.id->size() = 1 and project.volumes->size() >= 1 and
    project.volumes = quotasets.volume and volume.status <> 'in-use' and
    user.id.groups = 'admin'))
    ==> project.id->size() = 1 and
    project.volumes->size() >= 1 and
    project.volumes.size() > 0)
]}))
```

### Tool Architecture of Cloud Monitor

Section III outlined the main concepts and architecture of the cloud monitor (CM). In this section, we delve into the details of CM's implementation. The CM is implemented as a proxy interface (wrapper) using the Django web framework. Figure 4 illustrates the tool architecture, where dotted and solid arrows represent manual and automated steps, respectively.

The process begins with the specification document and the description of the security policy. The system analyst creates the resource and behavioral models using UML tools, such as MagicDraw. The XMI (XML Metadata Interchange) files of the behavioral model are generated and used as input for the CM.

#### Implementation Steps

1. **Database Tables (models.py):** 
   - Resources from the class diagram are implemented as database tables.
   - Associations between resources define their relationships and keys.

2. **URLs (urls.py):**
   - Relative URLs for each resource and their access methods (GET, PUT, POST, DELETE) are defined.
   - Paths are composed by traversing the associations between resources.

3. **Business Logic (views.py):**
   - Contains the code that runs when accessing a resource through its URL.
   - Four steps:
     1. Add information about permitted methods over resources.
     2. Extract functional contracts from the behavioral model and add them to the appropriate views.
     3. Add authorization information from guards into the appropriate views.
     4. Read security requirements from comments on transitions and add them as variables in the code.

4. **Export to Code:**
   - Create the file structure needed to run the system in the Django web framework.

#### Usage

To use the cloud monitor, the following command is used:
```bash
uml2django ProjectName DiagramsFileinXML
```
Where `ProjectName` is the Django project name, and `DiagramsFileinXML` contains the required diagrams in XML format.

Users can interact with the cloud monitor using cURL, REST clients, or test scripts. For example, to invoke a DELETE method on a volume resource:
```bash
curl -X DELETE -d id=4 http://127.0.0.1:8000/cmonitor/volumes/4
```

### Technologies Used

- **UML Standard:** For modeling the REST behavioral interface of a private cloud.
- **MagicDraw:** For defining diagrams.
- **XML 2.1 and UML 2.0:** For the models.
- **Python 2.7:** For the compiler, which requires the `lxml` module.
- **urllib2:** For fetching URLs.
- **Django Web Framework:** For running the cloud monitor.

### Limitations

- **User Intervention:** Required to fill in missing lines of code in the generated skeletons.
- **Model-Code Correspondence:** Changes must be made in both models and code to maintain consistency.
- **Scalability and Complexity:** Managing complex models and ensuring scalability is challenging.

### Future Work

We plan to address these limitations by proposing support for splitting models into multiple parts using slicing or aspect-oriented approaches.