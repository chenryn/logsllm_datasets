Yes
No
Yes
No
semaphores, events, 
timers
Yes
No
No
No
No
Yes
Yes
Yes
No
No
Guarded mutexes
Yes
Yes
Yes
No
No
Pushlocks
Yes
No
No
No
Yes
Executive resources
Yes
No
No
Yes
Yes
Rundown protections
Yes
No
No
Yes
No
Kernel dispatcher objects
The kernel furnishes additional synchronization mechanisms to the executive in the form of kernel 
objects, known collectively as dispatcher objects. The Windows API-visible synchronization objects ac-
quire their synchronization capabilities from these kernel dispatcher objects. Each Windows API-visible 
object that supports synchronization encapsulates at least one kernel dispatcher object. The execu-
WaitForSingleObject 
and WaitForMultipleObjects functions, which the Windows subsystem implements by calling analogous 
system services that the Object Manager supplies. A thread in a Windows application can synchronize 
with a variety of objects, including a Windows process, thread, event, semaphore, mutex, waitable 
the kernel can be waited on. Some of these are proper dispatcher objects, whereas others are larger 
chapter in the section “What signals an object?”) shows the proper dispatcher objects, so any other 
object that the Windows API allows waiting on probably internally contains one of those primitives.
Two other types of executive synchronization mechanisms worth noting are the executive resource 
and the pushlock. These mechanisms provide exclusive access (like a mutex) as well as shared read 
they have an API exposed through raw pointers and Ex APIs, and the Object Manager and its handle 
system are not involved. The remaining subsections describe the implementation details of waiting for 
dispatcher objects.
Waiting for dispatcher objects
NtWaitForXxx class 
KeWaitForXxx APIs 
deal directly with the dispatcher object. 
180 
CHAPTER 8 System mechanisms
Because the Nt API communicates with the Object Manager (ObWaitForXxx class of functions), it 
goes through the abstractions that were explained in the section on object types earlier in this chapter. 
Nt
the information in the object type to redirect the wait to the EventFILE_OBJECT. The Ke 
API, on the other hand, only works with true dispatcher objects—that is to say, those that begin with 
a DISPATCHER_HEADER structure. Regardless of the approach taken, these calls ultimately cause the 
kernel to put the thread in a wait state.
A completely different, and more modern, approach to waiting on dispatcher objects is to rely on 
asynchronous waiting. This approach leverages the existing I/O completion port infrastructure to as-
sociate a dispatcher object with the kernel queue backing the I/O completion port, by going through 
an intermediate object called a wait completion packet. Thanks to this mechanism, a thread essentially 
registers a wait but does not directly block on the dispatcher object and does not enter a wait state. 
-
This allows one or more threads to register wait indications on various objects, which a separate thread 
CreateThreadPoolWait 
and SetThreadPoolWait.
Windows 10, through the DPC Wait Event functionality that is currently reserved for Hyper-V (although 
reserved for kernel-mode drivers, in which a deferred procedure call (DPC, explained earlier in this 
chapter) can be associated with a dispatcher object, instead of a thread or I/O completion port. Similar 
to the mechanism described earlier, the DPC is registered with the object, and when the wait is satis-
KeInsertQueueDpc). When the dispatcher lock is dropped and the IRQL returns below DISPATCH_
LEVEL, the DPC executes on the current processor, which is the driver-supplied callback that can now 
react to the signal state of the object.
Irrespective of the waiting mechanism, the synchronization object(s) being waited on can be in one 
of two states: signaled state or nonsignaled state
undergoes a state change, from the nonsignaled state to the signaled state (when another thread sets 
an event object, for example). 
To synchronize with an object, a thread calls one of the wait system services that the Object 
Manager supplies, passing a handle to the object it wants to synchronize with. The thread can wait for 
signal routines checks to see whether any threads are waiting for the object and not also waiting for 
other objects to become signaled. If there are, the kernel releases one or more of the threads from their 
waiting state so that they can continue executing.
CHAPTER 8 System mechanisms
181
port, and then calls NtCreateWaitCompletionPacket to create a wait completion packet object and re-
ceive a handle back to it. Then, it calls NtAssociateWaitCompletionPacket, passing in both the handle to 
the I/O completion port as well as the handle to the wait completion packet it just created, combined 
signaled state, the signal routines realize that no thread is currently waiting on the object, and instead 
check whether an I/O completion port has been associated with the wait. If so, it signals the queue ob-
ject associated with the port, which causes any threads currently waiting on it to wake up and consume 
the wait completion packet (or, alternatively, the queue simply becomes signaled until a thread comes 
in and attempts to wait on it). Alternatively, if no I/O completion port has been associated with the wait, 
then a check is made to see whether a DPC is associated instead, in which case it will be queued on the 
current processor. This part handles the kernel-only DPC Wait Event mechanism described earlier.
The following example of setting an event illustrates how synchronization interacts with thread 
dispatching:
I 
I 
threads waiting for the event.
I 
Another thread sets the event.
I 
details on thread scheduling, see Chapter 4 of Part 1.)
Note Some threads might be waiting for more than one object, so they continue waiting, 
WaitAny wait, which will wake them up as soon as one object (instead 
of all) is signaled.
What signals an object?
during its lifetime and is set to the signaled state by the kernel when the thread terminates. Similarly, 
-
trast, the timer object, like an alarm, is set to “go off” at a certain time. When its time expires, the kernel 
sets the timer object to the signaled state.
When choosing a synchronization mechanism, a programmer must take into account the rules 
object is set to the signaled state varies with the type of object the thread is waiting for, as Table 8-27 
illustrates.
182 
CHAPTER 8 System mechanisms
TABLE 8-27 
Object Type
Set to Signaled State When
Effect on Waiting Threads
Process
Last thread terminates.
All are released.
Thread
Thread terminates.
All are released.
Thread sets the event.
All are released.
Event (synchronization type)
Thread sets the event.
One thread is released and might receive a 
boost; the event object is reset.
Gate (locking type)
Thread signals the gate.
a boost.
Gate (signaling type)
Thread signals the type.
Thread sets event with a key.
is of the same process as the signaler is 
released.
Semaphore
Semaphore count drops by 1.
One thread is released.
Set time arrives or time interval expires.
All are released.
Timer (synchronization type)
Set time arrives or time interval expires.
One thread is released.
Mutex
Thread releases the mutex.
One thread is released and takes ownership 
of the mutex.
Queue
Item is placed on queue.
One thread is released.
When an object is set to the signaled state, waiting threads are generally released from their wait 
states immediately. 
manual reset event in the Windows API) is used to 
announce the occurrence of some event. When the event object is set to the signaled state, all threads 
waiting for the event are released. The exception is any thread that is waiting for more than one object 
at a time; such a thread might be required to continue waiting until additional objects reach the sig-
naled state.
In contrast to an event object, a mutex object has ownership associated with it (unless it was ac-
quired during a DPC). It is used to gain mutually exclusive access to a resource, and only one thread at 
a time can hold the mutex. When the mutex object becomes free, the kernel sets it to the signaled state 
and then selects one waiting thread to execute, while also inheriting any priority boost that had been 
applied. (See Chapter 4 of Part 1 for more information on priority boosting.) The thread selected by the 
kernel acquires the mutex object, and all other threads continue waiting.
A mutex object can also be abandoned, something that occurs when the thread currently owning 
it becomes terminated. When a thread terminates, the kernel enumerates all mutexes owned by the 
thread and sets them to the abandoned state, which, in terms of signaling logic, is treated as a signaled 
state in that ownership of the mutex is transferred to a waiting thread.
CHAPTER 8 System mechanisms
183
information on how to put these objects to use in Windows programs, see the Windows reference 
Windows 
via C/C++ from Microsoft Press.
Object-less waiting (thread alerts)
condition to occur, and another thread 
needs to signal the occurrence of the condition. Although this can be achieved by tying an event to 
the condition, this requires resources (memory and handles, to name a couple), and acquisition and 
creation of resources can fail while also taking time and being complex. The Windows kernel provides 
two mechanisms for synchronization that are not tied to dispatcher objects:
I 
Thread alerts
I 
Thread alert by ID
alertable sleep by using SleepEx (ultimately 
resulting in NtDelayExecutionThread). A kernel thread could also choose to use KeDelayExecutionThread. 
We previously explained the concept of alertability earlier in the section on software interrupts and APCs. 
side uses the NtAlertThread (or KeAlertThread) API to alert the thread, which causes the sleep to abort, 
returning the status code STATUS_ALERTED
thread can choose not to enter an alertable sleep state, but instead, at a later time of its choosing, call the 
NtTestAlert (or KeTestAlertThread
by suspending itself instead (NtSuspendThread or KeSuspendThread). In this case, the other side can use 
NtAlertResumeThread to both alert the thread and then resume it.
Although this mechanism is elegant and simple, it does suffer from a few issues, beginning with the 
fact that there is no way to identify whether the alert was the one related to the wait—in other words, 
also alerted the waiting thread, which has no way of distinguishing between 
user services can leverage this mechanism, third-party developers are not meant to use alerts. Third, 
once a thread becomes alerted, any pending queued APCs also begin executing—such as user-mode 
NtAlertThread still requires opening a 
handle to the target thread—an operation that technically counts as acquiring a resource, an operation 
which can fail. Callers could theoretically open their handles ahead of time, guaranteeing that the alert 
will succeed, but that still does add the cost of a handle in the whole mechanism.
To respond to these issues, the Windows kernel received a more modern mechanism start-
ing with Windows 8, which is the alert by ID. Although the system calls behind this mechanism—
NtAlertThreadByThreadId and NtWaitForAlertByThreadId—are not documented, the Win32 user-mode 
wait API that we describe later is. These system calls are extremely simple and require zero resources, 
184 
CHAPTER 8 System mechanisms
using only the Thread ID as input. Of course, since without a handle, this could be a security issue, the 
one disadvantage to these APIs is that they can only be used to synchronize with threads within the 
current process.
NtWaitForAlertByThreadId API, passing in an optional timeout. This makes the thread enter a real wait, 
without alertability being a concern. In fact, in spite of the name, this type of wait is non-alertable, by 
design. Next, the other thread calls the NtAlertThreadByThreadId API, which causes the kernel to look 
up the Thread ID, make sure it belongs to the calling process, and then check whether the thread is in-
deed blocking on a call to NtWaitForAlertByThreadId
This simple, elegant mechanism is the heart of a number of user-mode synchronization primitives later 
in this chapter and can be used to implement anything from barriers to more complex synchronization 
methods.
Data structures
Three data structures are key to tracking who is waiting, how they are waiting, what they are waiting for, 
and which state the entire wait operation is at. These three structures are the dispatcher header, the wait 
block, and the wait status register
KWAIT_
STATUS_REGISTER (and the FlagsKWAIT_STATE enumeration).
The dispatcher header
union 
in programming theory. By using the Type
example, a mutex can be Abandoned, but a timer can be Relative. Similarly, a timer can be Inserted 
into the timer list, but debugging can only be Active
Signaled state and the Wait List Head for the wait blocks associated with the object. 
These wait blocks are what represents that a thread (or, in the case of asynchronous waiting, an I/O 
completion port) is tied to an object. Each thread that is in a wait state has an array of up to 64 wait 
blocks that represent the object(s) the thread is waiting for (including, potentially, a wait block point-
Alternatively, if the alert-by-ID primitives are used, there is a single block with a special indication that 
this is not a dispatcher-based wait. The ObjectHint
NtWaitForAlertByThreadId. This array is maintained for two main purposes:
I 
When a thread terminates, all objects that it was waiting on must be dereferenced, and the wait
blocks deleted and disconnected from the object(s).
I 
and satisfying the wait), all the other objects it may have been waiting on must be dereferenced
and the wait blocks deleted and disconnected.
CHAPTER 8 System mechanisms
185
each dispatcher object also has a linked list of wait blocks tied to it. This list is kept so that when a dis-
patcher object is signaled, the kernel can quickly determine who is waiting on (or which I/O completion 
port is tied to) that object and apply the wait satisfaction logic we explain shortly. 
balance set manager thread running on each CPU (see Chapter 5 of Part 1 for 
more information about the balance set manager) needs to analyze the time that each thread has 
been waiting for (to decide whether to page out the kernel stack), each PRCB has a list of eligible wait-
ing threads that last ran on that processor. This reuses the Ready ListKTHREAD structure 
following three conditions:
I 
to be time-sensitive and not worth the cost of stack swapping).
I 
The thread must have the EnableStackSwap
KeSetKernelStackSwapEnable API).
I 
default for a normal thread in the “real-time” process priority class).
-
on, but as we pointed out earlier, for an alert-by-ID wait, there is no object involved, so this represents 
the Hint
waiting on the object, it can also point to the queue of an I/O completion port, in the case where a wait 
completion packet was associated with the object as part of an asynchronous wait.
wait type and the wait block state, and, 
depending on the type, a wait key can also be present. The wait type is very important during wait 
wait any, the kernel does not care about the state of any other object because at least one of them (the 
current one!) is now signaled. On the other hand, for a wait all, the kernel can only wake the thread if 
all the other objects are also in a signaled state at the same time, which requires iterating over the wait 
blocks and their associated objects. 
Alternatively, a wait dequeue is a specialized case for situations where the dispatcher object is 
actually a queue (I/O completion port), and there is a thread waiting on it to have completion pack-
ets available (by calling KeRemoveQueue(Ex) or (Nt)IoRemoveIoCompletion). Wait blocks attached to 
is signaled, this allows the correct actions to be taken (keep in mind that a thread could be waiting 
on multiple objects, so it could have other wait blocks, in a wait any or wait all state, that must still be 
handled regularly).
wait notification, the kernel knows that no thread is associated with the object at all and that 
this is an asynchronous wait with an associated I/O completion port whose queue will be signaled. 
(Because a queue is itself a dispatcher object, this causes a second order wait satisfaction for the queue 
and any threads potentially waiting on it.) 