在应用包条目中定义的权限后面会通过两种方式实施检查：一种检查在调用给定方法时进
行，由运行环境实施；另一种检查在操作系统底层进行，由库或内核实施。
1.API权限
API权限用于控制访问高层次的功能，这些功能存在于AndroidAPI、框架层，以及某种情
况下的第三方框架中。一个使用API权限的常见例子是READ_PHONE_STATE，这个权限在Android
文档中定义为允许“对手机状态的只读访问”。应用若申请该权限，随后就会授予该权限，从面
可以调用关于查询手机信息的多种方法，其中包括在TelephonyManager类中定义的方法，如
getDeviceSoftwareVersion 和 getDeviceId 等。
前面提到过，一些API权限与内核级的安全实施机制相对应。例如，被授予INTERNET权限，
意味着申请权限应用的UID将会被添加到inet用户组（GID3003）的成员中。该用户组的成员
具有打开AF_INET和AF_INET6套接字的能力，面这是一些更高层次API功能（如创建
HttpURLConnection对象）所必需的。
在第4章中，我们还将讨论了API权限及实施检查机制中的一些疏忽和问题。
2.文件系统权限
Android的应用沙箱严重依赖于严格的Unix文件系统权限模型。默认情况下，应用的唯一
UID和GID都只能访问文件系统上相应的数据存储路径。注意，以下代码清单中的UID和GID
（分别在第2列和第3列）对于目录都是唯一的，它们的权限被设置为只有这些UID和GID才能
访问这些目录。
rootBandroid1/ + 1s -1 /data/data
drwxr-x--x u0_a3
u0_a3
... com.android.browser
drwoxr-x--x u0_a4
u0_a4
... com.android,calculator2
drwxr-x--x u0_a5
drwxr-×--x u0_a24 u0_a24 ... com.android.canera
u0_a5
com.android.calendar
drwxr-x--x u0_a55 u0_a55 ..- com.twitter,android
drwxrx--x u0_a53 u0_a53 ..- com-yougetitback.androidapplication.virgin,
drwxr-x--xL
9seon
u0_a56 ... com.ubercab
mob11e
drwxr-x--x  u0_a31 u0_a31 ..- Jp.co.omronsoft.opermmn
---
## Page 40
24
第2章Android的安全设计与架构
相应地，由这些应用创建的文件也会拥有相应的权限设置。以下代码清单中显示了某个应用
的数据目录，子目录和文件的属主和权限都被只设置给该应用的UID和GID。
root9android:/data/data/com.twitter,android + 1s -1R
drwtrwx-→x u0_a55
 :
u0_a55
2013-1017 00:07 cache
drwcrwx-x u0_a55
u0_a55
2013-1017 00:07 database8
drwxrwx-→x u0_a55
sse"on
20131017 00:07 i1e8
1rwxrwxrvx
insta11
insta11
2013-1022 18:16 1ib ->
drwxrwx-→x u0_a55
/data/app-1ib/com.twitter ,android1
u0_a55
2013-1017 00:07 shared_prefs
 /cache:
drwx-
u0_a55
u0_a55
2013-1017 00:07
com.android.renderscript.cache
. /cache/com.android.rendersczipt.cache:
. /databases:
***-AI-RI-
u0_a55
u0_a55
184320 2013-1017 06:47 0-3.db
u0_a55
sse"on
u0_a55
61440 2013-10-22 18:17 globa1.db
8720 2013-1017 06:47 03.db-journa1
-rW-rW----
u0_a55
-rV-
u0_a55
u0_a55
16928 2013-1022 18:17 global.db-journa1
. /files:
com.crashlytics,sdk,android
u0_a55
2013-1022 18:18
. /files/com.crashlytics.sdk.android:
5266C1300180-0001-0334-EDCC05CFF3D7BeginSession.cls
sse"on
80 2013-10-22 18:18
./shared_prefs :
-W-rW-..-
u0_a55
sse"on
155 2013-1017 00:07 com.crashlytics.prefs.
xm1
-..-AI-RI-
u0_a55
Sse"on
143 2013-10-17 00:07
com, twitter,android_preferences .xm1
正如前面所提到的，特定的辅助用户组GID用于访问共享资源，如SD卡或其他外部存储器。
作为一个例子，注意在HTCOmeV手机上运行mount和1s命令的输出结果，特别是/mnt/sdcard
的路径。
root@android:/ # sount
/dev/block/dn-2 /mnt/sdcard vfat rw, diraync,nosuid,nodev, noexec,relatime,
uid=1000, g1d=1015, fmask=0702, dmask=0702, a11ow_utime=0020, codepage=cp437,
ocharset=1so8859-1, shortname=mixed,utf8, errors=remount-ro 0 0
root@android:/ + 1s -1 /mnt
d---rwxr-x systen
sdcard_rv
1969-12-31 19:00 sdcard
---
## Page 41
2.3深入理解各个层次25
这里你可以看到SD卡被使用GID1015进行挂载，对应为sdcard_rw用户组。应用请求
WRITE_EXTERNAL_STORAGE 权限后，会将自己的UID 添加到这个组中，得到对这一路径的写
权限。
3.IPC权限
IPC权限直接涉及应用组件（以及一些系统的IPC设施）之间的通信，虽然与API权限也有
一些重叠。这些权限的声明和检查实施可能发生在不同层次上，包括运行环境、库函数，或直接
在应用上。具体来说，这个权限集合应用于一些在Android Binder IPC 机制之上建立的主要
Android应用组件。关于这些组件和Binder的详细信息，本章后面会详细描述。
2.3深入理解各个层次
本节将详细介绍Android软件栈中与安全最相关的组件，包括应用层、Android框架层、
DalvikVM、用户空间的支持性原生代码与相关服务，以及Linux内核层。这将为我们理解后续
章节对这些组件的详细介绍打下基础，并为我们攻击这些组件提供必要的知识。
2.3.1Android应用层
为了了解如何评估和攻击Android应用层的安全性，你首先需要了解它们是如何工作的。本
节讨论了Android应用、应用运行时和支持性IPC机制的安全相关部分。这也会为理解第4章奠
定基础。
应用通常被分为两类：预装应用与用户安装的应用。预装应用包括谷歌、原始设备制造商
（OEM）或移动运营商提供的应用，如日历、电子邮件、浏览器和联系人管理应用等。这些应用
的程序包保存在/system/app目录中。其中有些应用可能拥有提升的权限或权能，因此人们会特别
感兴趣。用户安装的应用是指那些由用户自己安装的应用，无论是通过GooglePlay商店等应用
市场直接下载，还是通过pminstall或adbinstal1进行安装。这些应用以及预安装应用的
更新都将保存在/data/app目录中。
Android在与应用相关的多种用途中使用公共密钥加密算法。首先，Android使用一个特殊的
平台密钥来签署预安装的应用包。使用这个密钥签署的应用的特殊之处它们拥有system用户权
限。其次，第三方应用是由个人开发者生成的密钥签名的。对于预安装应用和用户安装应用，
Android都使用签名机制来阻止未经授权的应用更新。
主要的应用组件
尽管Android应用由无数个组件组成，但本节将重点介绍那些与Android系统版本无关，在大多
数应用中都值得关注的组件。这些组件包括AndroidManifest、Intent、Activity、BroadcastReceiver、
Service和 Content Provider。后面4类组件代表IPC通信端点（endpoint），它们有一些非常有趣的安
全属性。
● AndroidManifest.xml
所有的Android应用包（APK）都必须包括AndroidManifestxml文件，这个XML文件含有
---
## Page 42
26第2章Android的安全设计与架构
应用的信息汇总，具体包括如下内容。
唯一的应用包名（如 com.wi1ey.SomeApp）及版本信息。
Activity、Service、BroadcastReceiver 和插桩定义。
口权限定义（包括应用请求的权限以及应用自定义的权限）。
口关于应用使用并一起打包的外部程序库的信息。
口其他支持性的指令，比如共用的UID信息、首选的安装位置和UI信息（如应用启动时的
图标）等。
Manifest文件中一个特别有趣的部分是sharedUserId属性。简单地说，如果两个应用由相
同的密钥签名，它们就可以在各自的Manifest文件中指明同一个用户标识符。在这种情况下，这
两个应用就会在相同的UID环境下运行，从而能使这些应用访问相同的文件系统数据存储以及
潜在的其他资源。
Manifest文件经常是由开发环境自动产生，比如 Eclipse或Android Studio，然后在构建过程
中由明文XML文件转换为二进制XML文件。
应用间通信的一个关键组件是Intent。Intent是一种消息对象，其中包含一个要执行操作的相
关信息，将执行操作的目标组件信息（可选），以及其他一些（对接收方可能非常关键的）标志
位或支持性信息。几乎所有常用的动作—比如在一个邮件中点击链接来启动浏览器，通知短信
应用收到SMS短信，以及安装和卸载应用，等等—都涉及在系统中传递Intent
这类似于一个进程间调用（IPC）或远程过程调用（RPC）机制，其中应用组件可以通过编
程方式和其他组件进行交互，调用功能或者共享数据。在底层沙箱（文件系统、AID等）进行安
全策略实施的情况下，应用之间通常使用这个API进行交互。如果调用方或被调用方指明了发送
或接收消息的权限要求，那么Android运行时将作为一个参考监视器，对Intent执行权限检查。
当在Manifest文件中声明特定的组件时，可以指明一个IntentFilter，来定义端点处理的标准。
Intent Filter特别用于处理那些没有指定目标组件的Intent（即隐式Intent）。
例如，假设一个应用的 Manifest文件中包含了一个自定义的权限（com.wi1ey·permission
INSTALL_WIDGET）和—个 Activity (com.wiley.MyApp.InstallwidgetActivity),后者使
用这个权限来限制启动InstallwidgetActivity。
在这里，我们看到了权限声明和Activity声明。还要注意，权限拥有签名的ProtectionLevel
属性。这限定了可以请求这一权限的应用，它们必须是与初始定义这一权限的应用使用同一私钥
进行签名的其他应用。
---
## Page 43