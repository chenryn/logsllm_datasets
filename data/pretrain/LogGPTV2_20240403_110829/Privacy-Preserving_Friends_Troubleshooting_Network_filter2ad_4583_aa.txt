title:Privacy-Preserving Friends Troubleshooting Network
author:Qiang Huang and
Helen J. Wang and
Nikita Borisov
Privacy-Preserving
Friends Troubleshooting Network
Qiang Huang
Princeton University
PI:EMAIL
Helen J. Wang
Nikita Borisov
Microsoft Research
University of California, Berkeley
PI:EMAIL
PI:EMAIL
Abstract— Content sharing is a popular use of peer-to-peer
systems because of their inherent scalability and low cost of
maintenance. In this paper, we leverage this nature of peer-to-
peer systems to tackle a new problem: automatic misconﬁgu-
ration troubleshooting. In this setting, machine conﬁgurations
from peers are shared to diagnose misconﬁgurations on a sick
machine. The key challenges are preserving privacy of individual
conﬁguration data and ensuring the integrity of peer contri-
butions. To this end, we construct the Friends Troubleshooting
Network (FTN), a peer-to-peer overlay network, where the links
between peer machines reﬂect the friendship of their owners.
Our FTN manifests recursive trust rather than transitive trust.
To achieve privacy, we use the general scheme of a historyless
and futureless random-walk for routing, during which search is
carried out simultaneously with secure parameter aggregation
for the purpose of troubleshooting. Our design has been guided
by the characteristics of a real-world friends network, the MSN
Instant Messenger (IM) network. We have prototyped our FTN
system and analyzed the tradeoff between privacy and protocol
efﬁciency.
I. INTRODUCTION
Today’s desktop PCs have not only brought to their users
an enormous and ever-increasing number of features and
services, but also an increasing amount of troubleshooting
cost and productivity losses. Studies [15], [16] have shown
that technical support contributes 17% to the total cost of
ownership of today’s desktop PCs. A large amount of technical
support time is spent on troubleshooting failures, many of
which are caused by misconﬁgurations.
In this paper, we address the problem of privacy-preserving,
peer-to-peer misconﬁguration diagnosis. We build on our pre-
viously developed algorithm for automatic misconﬁguration
troubleshooting, called PeerPressure [17]. PeerPressure uses
the common conﬁgurations from a set of helper machines
to identify the anomalous misconﬁgurations on the sick one.
With real-world troubleshooting cases as evaluations, we have
shown the effectiveness of the approach. To carry out PeerPres-
sure diagnosis, we need to gather statistics from a sample set
of helper machines. In our position paper [18], we advocated
taking the peer-to-peer approach in searching for helpers and
gathering statistics. As compared to a centralized database, the
peer-to-peer approach provides low cost maintenance of up-to-
date helper conﬁguration samples and distributed trust. How-
ever, PeerPressure-based peer-to-peer troubleshooting poses
interesting challenges in preserving the privacy of both the
troubleshooting users and peer helpers, as well as the integrity
of the troubleshooting results.
Ensuring integrity is challenging because malicious peers
may lie about the applications they own and the conﬁguration
state they have, which can lead to incorrect troubleshooting
results. A machine can be malicious either because its owner
has ill intentions or because it is compromised by an attacker.
We cope with the ill-intentioned-user problem by designing
well-established social trust into the troubleshooting frame-
work. Today, when encountering computer problems, most
people ﬁrst seek help from their friends and neighbors. Based
on this observation, we construct a Friends Troubleshooting
Network (FTN), which is a peer-to-peer overlay network,
where a link between two machines is due to the friendship
of their owners. We assume that friends will either provide
authentic conﬁguration information to each other, or, in cases
where conﬁgurations are privacy sensitive, refuse to supply
information, rather than giving false content.
In the real world, if Alice asks her friend Bob a question to
which Bob does not know the complete answer, Bob may ask
his friend Carol on Alice’s behalf. Troubleshooting requests
in the FTN are recursively forwarded to friends of friends
in the same way. One may quickly conclude that our system
manifests transitive trust. However, if Alice and Carol aren’t
friends, Carol may provide untruthful answers if Alice were to
ask her directly, but truthful ones when asked by Bob. Because
of this, we say that FTN manifests recursive trust instead.
Despite the friendship-based trust
in the FTN, privacy
remains a crucial goal: while friends can be trusted not to
provide false information, they may be curious about the con-
ﬁguration of their peers, and such conﬁgurations may contain
privacy-sensitive information. In our position paper [18], we
sketched an FTN design which tries to achieve privacy through
a historyless and futureless random-walk of an ownerless trou-
bleshooting request, during which search as well as parameter
aggregation are carried out for the purpose of PeerPressure
troubleshooting. The design was not robust against a number
of privacy-compromising attacks. In this paper, we develop
our original idea into a full-ﬂedged design and system. Be-
cause of the unique privacy and integrity requirements of our
problem, previous techniques for anonymity and private data
aggregation cannot be readily applied.
Our design is guided by the operational MSN Instant
Messenger (IM) friends network data. With the IM data, we
analyze the tradeoffs between privacy and efﬁciency. We have
prototyped the FTN system with which a user can diagnose
misconﬁgurations in about a minute while achieving a high
privacy level for all participants.
Coping with compromised FTN nodes remains an open
challenge. We provide no mitigation mechanisms other than
those already presented in [18].
For the rest of the paper, we ﬁrst provide background
on PeerPressure in Section II. Then, we state our privacy
objectives in Section III. In Section IV, we explain our
protocol by reviewing the previous design (Subsection IV-A),
describing attacks against it (Subsection IV-B), and introduc-
ing a cluster-based secure multiparty parameter aggregation
scheme and various other enhancements and optimizations
(Subsections IV-C, IV-D, IV-E). Using the MSN IM data,
we present an evaluation of our design, including analysis
and simulation of the trade-off between privacy and protocol
efﬁciency in Section V. We describe our prototype FTN system
and its performance in Section VI. We compare and contrast
our work with the related work in Section VII and ﬁnally
conclude in Section VIII.
II. BACKGROUND: PEERPRESSURE
PeerPressure [17] assumes that an application operates
correctly on most machines and hence that most machines
have healthy conﬁgurations. It uses the statistics from a set
of sample helper machines that run the same application to
identify anomalous misconﬁgurations. The distinct feature of
PeerPressure in contrast with other work in this area [19]
is that it eliminates the need to manually identify a healthy
machine as a reference point for comparison. We have exper-
imented with a PeerPressure-based troubleshooting toolkit on
Windows systems where most of conﬁguration data is stored
in a centralized registry. Figure 1 illustrates the operation of
our PeerPressure troubleshooter.
Fig. 1. PeerPressure Troubleshooter
PeerPressure ﬁrst uses application tracing (with the “App-
Tracer”) to capture the conﬁguration entries and values that
are touched by the abnormal execution of the application
under troubleshooting. These entries are misconﬁguration sus-
pects. Then, the canonicalizer turns any user- or machine-
speciﬁc entries into a canonicalized form. For example, user
names and machine names are all replaced with constant
strings “USER NAME” and “MACHINE NAME”, respec-
tively. Next, from a sample set of helper machines, for each
suspect entry e, PeerPressure obtains the number of samples
N +Ce
that match the value of the suspect entry Me, the cardinality Ce
(the number of distinct values for this entry among the sample
set), and the most popular value for the entry. PeerPressure
uses these parameters along with the sample set size and
the number of suspect entries to calculate the probability
of a suspect entry being the cause of the symptom: Pe =
N +Cet+CeMe(t−1) where N is the number of samples and t
is the number of suspects. The intuition behind this probability
calculation is that the more conformant a suspect entry is
with the samples, the more likely it is to be healthy. The top
ranking entries with regard to this probability are diagnosed
as the root-cause candidates. Then, the troubleshooting user
can use the collected, most popular values for corrections.1
The sample set can be obtained either from a database of
registry snapshots collected from a large number of user
machines or from a peer-to-peer troubleshooting community
such as the one described in this paper. We have demonstrated
PeerPressure [17] as an effective troubleshooting method: our
PeerPressure troubleshooter was able to pinpoint the root-
cause misconﬁguration accurately for 12 out of 20 real-world
troubleshooting cases and for the remaining ones, it narrowed
down the number of root-cause candidates by three orders of
magnitude.
III. PRIVACY MODEL AND OBJECTIVES
Before we dive into our protocol design, we ﬁrst state our
privacy model and objectives.
A. Private Information
The information being communicated in FTN is PC con-
ﬁguration data. We denote the complete set of conﬁguration
data on a machine as D. A subset of D is identity-revealing,
such as usernames and cookies, which we denote as Di.2 The
canonicalizer ﬁltering turns any user-speciﬁc entries into a
canonicalized form (Section II). The remaining set Dr = D−
Di may contain information that compromises privacy when
linked with user identity. Some examples of such information
are URLs visited and applications installed. Our privacy ob-
jective is to protect all peers’ privacy by anonymizing such
privacy-sensitive information in Dr; of course, Di must never
be revealed.
In addition to the conﬁguration data, we aim to protect
the identities of the sick machine and the helpers. In some
cases, the mere fact that one is running a particular application
may be privacy-sensitive; in our protocol, we hide whether
each participant is the sick machine, a helper, or simply a
forwarding node that does not run the application.
B. Attacks
We assume an operational environment where participants
are honest-but-curious and never lie about their conﬁguration
information. We also assume that attackers do not know the
1Of course, proper roll-back mechanisms are needed if a root-cause
candidate is not actually the root cause (when the correction does not remove
the sick symptom).
2Finding all identity-revealing entries is an open research question.
Registry Entry Suspects0HKLM\System\Setup\...OnHKLM\Software\Msft\...nullHKCU\%\Software\...DataEntryPeerPressureSearch& FetchStatisticalAnalyzerCanonicalizerDB of Registry SnapshotsTroubleshooting Result0.2HKLM\System\Setup\...0.6HKLM\Software\Msft\...0.003HKCU\%\Software\...Prob.EntryAppTracerRun the faulty appP2P Trouble-shootingCommunityFTN topology information. While it
is possible to obtain
friendship topology from side channels, there is much uncer-
tainty on which friends one trusts to troubleshoot with and
which ones of them are online. The ways attackers attempt to
obtain private information include the following:
1) Eavesdrop on machines on the same LAN
2) Message inspection attack: Infer privacy-sensitive infor-
mation by passively inspecting the messages that are
passing by.
3) Polling attack: Repeatedly send fake troubleshooting
requests to a friend to infer his private information.
4) Gossip attack: Friends may gossip (i.e., collude) and
correlate pieces of information.
C. Existing Tools
There are many existing tools for achieving anonymity or
for private data aggregation. We brieﬂy explain why such tools
are not readily applicable to our problem; a more detailed
review of the related work is in Section VII.
Anonymity systems, such as mix networks [4], allow to send
messages while hiding their origin. Forwarding conﬁguration
over a mix network would preserve privacy of the participants,
as it would dissociate the contents from the users identities.
However, it would violate our integrity model, as recursive
trust is achieved only when friends communicate directly with
each other. A mix network would leave no way to verify where
the data came from and thus leave open the possibility of
malicious conﬁguration data.
Another way to preserve the anonymity of the contributors
is to use a private aggregation or voting protocol based on
a secure multi-party sum or homomorphic encryption [2].
However, these protocols work only when there is a known
space of choices for the data. In our case, the space of possible
values for a conﬁguration entry is unknown, and we must
determine the number of distinct values (cardinality) as well
as the most popular value, while not revealing which value
belongs to which participant. To solve this problem, we deﬁne
a new aggregation scheme, described in Section IV-E, which
uses a secure multi-party sum as a building block.
IV. PRIVACY-PRESERVING SEARCH AND PARAMETER
AGGREGATION PROTOCOL IN FTN
The FTN is an overlay network similar to Gnutella [9] or
Kazaa [11]; however, overlay links are made only to trusted
friends’ machines. We assume that friends are able to exchange
public keys out of band and use them to establish secure
communication channels.
We take the following basic approaches to achieve our
privacy objectives in the FTN:
• Integration of search and parameter aggregation in one
transaction: If search is a separate step, returning the
IP addresses of helpers, then the querier can determine
the applications running on the helpers’ machines. Since
application ownership could be private information, we
integrate search and parameter gathering for PeerPressure
into one step in such a way (next bullet) that the parame-
ter values at any point represent the collective state for a
set of friends, and therefore do not reveal any individual
state.
• Historyless and futureless random-walk routing: To pre-
serve the privacy of the troubleshooting user as well
as node owners on the search path, we design the
troubleshooting messages to be ownerless and not
to
contain any routing history or future routing state, such
as the source or the nodes traversed or to be traversed.
In addition, we make sure that the troubleshooting state
gathered from the past is aggregate in nature so that
individual state is disguised. Each node on the forwarding
path of the random-walk is either a forwarder that simply
proxies the request, or a helper that contributes its own
relevant conﬁgurations to the request and then proxies the
request.
For the rest of the section, we ﬁrst review our previous
design from our position paper [18] and the possible attacks
against it in Subsections IV-A and III-B. We then present our
protocol enhancements in Subsections IV-C, IV-D, and IV-E.
A. Previous Design
1) Creating a Request on the Sick Machine: A sick machine
ﬁrst ﬁlters out the identity-revealing entries from the suspects.
Then it creates a troubleshooting request which contains
1) The name of the application executable that
is under
troubleshooting; 2) a random nonce ReqID identifying the
request; 3) the value distribution (or histogram) of each suspect
entry e — a list of values and the vector Counte(i) counting
the occurrences of each value i; the vector size increases
over time as new values are encountered along the way; 4)
Remaining number of samples needed R. The goal of the FTN
protocol is for a sick machine to obtain the aggregate value
distributions for all suspect entries. With the value distribution
of each entry e, the sick node can extract the cardinality (Ce),
the number of matches (Me), and the most popular value to
carry out the PeerPressure diagnosis.
the requester
To preserve source anonymity,
randomly
initializes the value distribution and remaining number of
samples needed. However, careful readers may realize that
it is not possible to do the random initialization for value
distributions since space of plausible values for each entry is
most likely unknown. This was one of the unresolved issues
in our previous paper. In this paper, one of our enhancements
(Section IV-E) makes random initialization possible.
2) Parameter Aggregation: The sick machine establishes a
secure channel with an available friend chosen at random and
sends it the troubleshooting request. The friend sends an ACK
if it can become either a forwarder or a helper for the request.
If no ACK is received upon timeout, then the requester tries
another friend chosen at random. To avoid routing loops or
double-counting, if a friend has already seen the ReqID of an