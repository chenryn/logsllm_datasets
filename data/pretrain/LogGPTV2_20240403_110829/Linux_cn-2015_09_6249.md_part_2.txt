另外请阅读: ['init' 和 'systemd' 背后的故事](http://www.tecmint.com/systemd-replaces-init-in-linux/)
systemd 由 systemctl 工具控制，假如你了解 SysVinit，你将会对以下的内容感到熟悉：
* service 工具，在旧一点的系统中，它被用来管理 SysVinit 脚本，以及
* chkconfig 工具，为系统服务升级和查询运行级别信息
* shutdown 你一定使用过几次来重启或关闭一个运行的系统。
下面的表格展示了使用传统的工具和 systemctl 之间的相似之处：
| 旧式工具 | Systemctl 等价命令 | 描述 |
| --- | --- | --- |
| service name start | systemctl start name | 启动 name （这里 name 是一个服务） |
| service name stop | systemctl stop name | 停止 name |
| service name condrestart | systemctl try-restart name | 重启 name （如果它已经运行了） |
| service name restart | systemctl restart name | 重启 name |
| service name reload | systemctl reload name | 重载 name 的配置 |
| service name status | systemctl status name | 显示 name 的当前状态 |
| service - status-all | systemctl | 显示当前所有服务的状态 |
| chkconfig name on | systemctl enable name | 通过一个特定的单元文件，让 name 可以在系统启动时运行（这个文件是一个符号链接）。启用或禁用一个启动时的进程，实际上是增加或移除一个到 /etc/systemd/system 目录中的符号链接。 |
| chkconfig name off | systemctl disable name | 通过一个特定的单元文件，让 name 可以在系统启动时禁止运行（这个文件是一个符号链接）。 |
| chkconfig -list name | systemctl is-enabled name | 确定 name （一个特定的服务）当前是否启用。 |
| chkconfig - list | systemctl - type=service | 显示所有的服务及其是否启用或禁用。 |
| shutdown -h now | systemctl poweroff | 关机 |
| shutdown -r now | systemctl reboot | 重启系统 |
systemd 也引进了单元（unit）（它可能是一个服务，一个挂载点，一个设备或者一个网络套接字）和目标（target）（它们定义了 systemd 如何去管理和同时开启几个相关的进程，可以认为它们与在基于 SysVinit 的系统中的运行级别等价，尽管事实上它们并不等价）的概念。
### 总结归纳
其他与进程管理相关，但并不仅限于下面所列的功能的任务有：
**1. 在考虑到系统资源的使用上，调整一个进程的执行优先级：**
这是通过 `renice` 工具来完成的，它可以改变一个或多个正在运行着的进程的调度优先级。简单来说，调度优先级是一个允许内核（当前只支持 >= 2.6 的版本）根据某个给定进程被分配的执行优先级（即友善度（niceness），从 -20 到 19）来为其分配系统资源的功能。
`renice` 的基本语法如下：
```
# renice [-n] priority [-gpu] identifier
```
在上面的通用命令中，第一个参数是将要使用的优先级数值，而另一个参数可以是进程 ID（这是默认的设定），进程组 ID，用户 ID 或者用户名。一个常规的用户（即除 root 以外的用户）只可以更改他或她所拥有的进程的调度优先级，并且只能增加友善度的层次（这意味着占用更少的系统资源）。
![在 Linux 中调整进程的优先级](/data/attachment/album/201509/18/143625qrcjyyrp99p5oifo.png)
*进程调度优先级*
**2. 按照需要杀死一个进程（或终止其正常执行）：**
更精确地说，杀死一个进程指的是通过 [kill 或 pkill](/article-2116-1.html) 命令给该进程发送一个信号，让它优雅地（SIGTERM=15）或立即（SIGKILL=9）结束它的执行。
这两个工具的不同之处在于前一个被用来终止一个特定的进程或一个进程组，而后一个则允许你通过进程的名称和其他属性，执行相同的动作。
另外， pkill 与 pgrep 相捆绑，pgrep 提供将受符合的进程的 PID 给 pkill 来使用。例如，在运行下面的命令之前：
```
# pkill -u gacanepa
```
查看一眼由 gacanepa 所拥有的 PID 或许会带来点帮助：
```
# pgrep -l -u gacanepa
```
![找到用户拥有的 PID](/data/attachment/album/201509/18/143625aliip0luf3jsuisw.png)
*找到用户拥有的 PID*
默认情况下，kill 和 pkiill 都发送 SIGTERM 信号给进程，如我们上面提到的那样，这个信号可以被忽略（即该进程可能会终止其自身的执行，也可能不终止），所以当你因一个合理的理由要真正地停止一个运行着的进程，则你将需要在命令行中带上特定的 SIGKILL 信号：
```
# kill -9 identifier               # 杀死一个进程或一个进程组
# kill -s SIGNAL identifier        # 同上
# pkill -s SIGNAL identifier       # 通过名称或其他属性来杀死一个进程
```
### 结论
在这篇文章中，我们解释了在 RHEL 7 系统中，有关开机启动过程的基本知识，并分析了一些可用的工具来帮助你通过使用一般的程序和 systemd 特有的命令来管理进程。
请注意，这个列表并不旨在涵盖有关这个话题的所有花哨的工具，请随意使用下面的评论栏来添加你自已钟爱的工具和命令。同时欢迎你的提问和其他的评论。
---
via: 
作者：[Gabriel Cánepa](http://www.tecmint.com/author/gacanepa/) 译者：[FSSlc](https://github.com/FSSlc) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](https://linux.cn/) 荣誉推出