(b) The click fraud’s mechanism.
Figure 2: The click event generation mechanism in Android
and how attackers use it to commit click fraud.
other components. The advertisers publish ads in the ad network
that are then embedded in the apps developed by developers. Then,
developers publish apps to the users and receive the advertising fee
paid by advertisers through the ad network when users click on
the ads. Currently, one of the most popular payment mechanism
in the ad network is pay-per-click (PPC), in which the revenue
received by developers is related to the number of clicks. However,
these mechanisms are vulnerable to click fraud, in which attack-
ers generate fake clicks to cheat both advertisers and users. For
instance, researchers point out that around 10% to 15% of ads in
Pay-Per-Click online advertising systems are not authentic traf-
fic [12, 31, 34, 38, 39]. A report published by Juniper Research [40]
reveals that the advertiser’s loss caused by click fraud reached $42
billion in 2019.
2.2 Click Event Generation Mechanisms in
Android
Since click fraud causes huge losses in the mobile ad ecosystem, it
is important to figure out how click events are generated. The click
mechanisms in the Android platform are shown below:
• Normal click generation. As shown in Fig. 2(a), when the
smart phone’s screen is touched by the user, the click properties,
such as time, type, and coordinates, are included in a MotionEvent
object and dispatched by the function dispatchTouchEvent to
the targeted view. Then, the click information is delivered to the
ad network, thereby an ad click is finished and counted by the
ad network.
• Click fraud generation. As shown in Fig. 2(b), in a click fraud
scenario, the attacker could inject malicious code snippets into
apps to generate fake clicks without any user interaction. Dif-
ferent from normal clicks, the attacker creates a MotionEvent
AdvertisersAdvertiser AAdvertiser BAdvertiser C...AdNetwork1.Buy Ads2. Send Ad SDK3.Publish Apps4. Click on  Ad View5.Report & Get Ad Fee6. Pay Ad Fee2*. Click Fraud1*.Publish Appswith FraudulentCodesDeveloperBenign Fraudulent User:Ads Flow:Ads Fee Flow  :AttackerBenign Fraudulent ADADxyAd View=(X0,Y0)X∗=getXX0Y∗=getYY0E=MotionEvent(X∗,Y∗)Real clickPay Ad FeeAd NetworkAd ViewGet Ad Viewfake clickSteal Ad FeeX∗=AdView.Heigth()Y∗=AdView.Width()E=MotionEvent(X∗,Y∗)Ad NetworkADSession 1D: Authentication and Click Fraud CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea273more events by building up ClickScanner-Beta characterizing the
app’s activity to scale up the detection in the wild. Note that, when
a touch event occurs, the dispatchTouchEvent [2] delivers the
event from an Android Activity down to the target view. There-
fore, we build ClickScanner-Beta based on Soot [45] to monitor the
MotionEvent.obtain invocation, which generates and delivers the
MotionEvent object — an object used to report movement events [3]
to the dispatchTouchEvent. We optimized ClickScanner-Beta it-
eratively by first filtering out the seed apps through manual verifi-
cation. When a feature is established, we update ClickScanner-Beta
to reduce the overhead of manual verification. We highlight that
the difference between the humanoid attack and random clicks
is four-fold: The basic attack randomizes the click properties (and
sometimes these properties may follow a certain distribution such
as Gaussian distribution) in local codes, such as: 1) simulating the
human clicks by randomizing the coordinates; 2) making the trigger
condition of the fake clicks unpredictable by randomizing the trig-
gering time. The advanced attack receives click properties from the
cloud-server (see Section 6.2) or generates click properties by imposing
random disturbances on user actions, such as 3) generating the fake
clicks by following the legitimate actions of real people; 4) predefining
fake click’s execution logic in code, receiving the click’s coordinates
and trigger condition from a remote server, and avoiding the detection
adaptively and locally. Through the preliminary vetting of our proto-
type and careful manual verification of the apps’ working behaviors
and decompiled codes, we identify 50 apps conducting legitimate
clicks and 50 apps conducting humanoid attacks as the seed apps.
We elaborate on one of the most representative fraudulent apps in
this section as a motivating example.
3.2 Analysis of Our Motivating Example
We use Monkey [13] to randomly click on the motivating exam-
ple and an app with no click fraud. We then show the coordinate
distribution and timing pattern of the click event on ad banners
on both apps to illustrate some of the key challenges addressed
by our work. To illustrate the advantages of our work, we also re-
produce traditional click frauds including fixed clicking and replay
clicking in [8, 32] and compare their coordinate distributions and
timing patterns with humanoid attacks we found. The click event
records are shown in Fig. 3. Note that for simplicity, we filter out
the coordinate distributions and timing patterns generated by each
kind of attack when presenting the results.
The fixed clicking belongs to the traditional click fraud where
the coordinates of the generated touch events (shown in Fig. 3(a)
and 3(b)) are the same, which is easy to detect through traditional
rule-based or threshold-based approaches. The replay clicking is
another traditional click fraud which replays organic clickstreams
on ad banners. This can be detected by [32] because their timing
patterns are similar to traditional timing patterns as shown in
Fig. 3(c). However, we discovered that the humanoid attack is
more sophisticated and cannot be easily detected using the above
approaches, since attackers simulate human clicks to camouflage
their false clicks. The coordinate distribution and timing pattern
of the humanoid attack is generated as if the user clicks. For
instance, the distribution of coordinates in X axis of humanoid
attack resembles normal clicking, whereas the ad traffic generated
(a) Visual distribution of the click points.
(b) Cumulative distribution of the click points along the X axes.
(c) Time distribution of the click events.
Figure 3: Illustration of ad clicks between normal, tradi-
tional (fixed and replay) fraud, and humanoid attack.
by the fraudulent app is nearly 0.5 times more than that of the
normal app, which can be easily passed off as traffic from legitimate
users that are interested in the ad.
To reveal how the attacker achieves this, we next analyze the
decompiled codes of the above humanoid attack app. As shown
in Fig. 4, the code snippet example simplified from the motivating
example exhibits the click fraud following legitimate human ac-
tions. In general, the ad view in the fraudulent app is randomly
clicked again in a random time period after the real person clicks
on the ad. The fake clicks will never be triggered if the real user
does not click the ad. To do this, attackers insert the function
dispatchTouchEvent at lines 5 and 6 which generates the fake
clicks in the body of the function onClick(). At lines 1 and 2 in
Fig. 4, the attacker also tries to fool detectors by making the trig-
ger condition of the click event unpredictable and by randomizing
the coordinate and trigger time of the fake click, impersonating a
human’s click pattern.
This makes it hard for traditional ad network-side fraud detection
approaches to detect it because the click in humanoid attack is
very likely to be triggered by a real person due to the uncertainty of
click patterns. Additionally, user-side approaches are ineffective in
Figure 4: The code snippet simplified from the fraudulent
app in the motivating example.
05001000X/pixel05001000Y/pixelNormal05001000X/pixel05001000Fixed05001000X/pixel05001000Replay05001000X/pixel05001000Humanoid05001000X/pixel00.51CDF05001000X/pixel00.51Fixed05001000X/pixel00.51Replay05001000X/pixel00.51HumanoidNormal050100Time (min)ClickNormal050100Time (min)Fixed050100Time (min)Replay0100200Time (min)Humanoidpublic void onClick(View AdView) {1.  float rand = getRandomNumber();2.long v1 = SystemClock.uptimeMillis() + (long)rand;3.long v2 = v1 - 500 - (((long)new Random().nextInt(500)));4.  if(rand > 0f && rand > new Random().nextFloat()) {5.    float x = ((float)(AdView.getWidth()* (new Random().nextFloat())));6.float y = ((float)(AdView.getHeight()* (new Random().nextFloat())));7.(ViewGroup)AdView.getChildAt(0).dispatchTouchEvent(MotionEvent.obtain(v2, v1, 0, x, y, 0));8.(ViewGroup)AdView.getChildAt(0).dispatchTouchEvent(MotionEvent.obtain(v2, v1, 1, x, y, 0));}}Session 1D: Authentication and Click Fraud CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea274Figure 5: The workflow of ClickScanner.
detecting humanoid attacks, because the click patterns and click
effects on the user-side generated by humanoid attack are almost
the same as those of real clicks since the attackers are assumed to
be allowed to arbitrarily construct the MotionEvent object instead
of just using the same MotionEvent [8]. Further, it is also a challenge
for detectors to trigger humanoid attacks due to its random trigger
condition. Therefore, there is a pressing need to address the fake
clicks that stem from the humanoid attacks. To this end, this paper
presents ClickScanner, a scalable, efficient, and automated static
analysis system to identify the humanoid attack.
3.3 Insight of ClickScanner
Section 3.2 demonstrates that the humanoid attack can manipulate
ad clicks with similar pattern to that of a normal click scenario,
thus causing existing detection schemes based on dynamic analysis
futile. In this study, to successfully detect the humanoid attack,
the key insight is that although the click pattern is camouflaged as
legitimate, at the bytecode code level the difference of the ad click
trigger condition and generation process between legitimate and
fraudulent apps are notably significant, which can be characterized
as detection features.
As illustrated in Fig. 4, it is observed that when generating a
fraudulent click, the app must exploit methods getHeight and
getWidth to obtain the height and width of the ad view. Further-
more, the click trigger condition defined by the method Random is
utilized to disguise fraudulent clicks. By checking the parameters
and trigger conditions within the bytecode of MotionEvent, it is
feasible to detect this humanoid attack case. Therefore, we pro-
pose a static analysis based detection scheme ClickScanner, and
break down ClickScanner in Section 4.
4 SYSTEM DESIGN OF CLICKSCANNER
As shown in Fig. 5, ClickScanner mainly consists of three com-
ponents (i.e., App Dissecting Module, Feature Extraction Module,
Fraud Decision Module) to automatically detect humanoid attacks.
In this section, we break down ClickScanner into each component.
4.1 App Dissecting Module
For a given APK, ClickScanner first determines whether it is asso-
ciated with mobile ads, and then converts the properties of the click
event targeted at an ad view to a data dependency graph (DDG) for
further feature extractions.
4.1.1 Preprocessing of App Dissecting. When detecting humanoid
attacks in apps from the app market, it is crucial for ClickScanner
to only focus on apps involving mobile ads. To achieve this goal,
ClickScanner has the following three steps. First, ClickScanner
checks apps’ permissions and filters out those with no permissions
such as INTERNET and ACCESS_NETWORK_STATE [26]. Second,
for the remaining apps, ClickScanner leverages LibRadar [30], a
popular and obfuscation-resilient tool to detect third-party libraries
on those apps and discards the apps without ad libraries. Third,
ClickScanner needs to remove views that do not contain ad con-
tents to avoid unnecessary analysis. Since there are no explicit
labels that would allow us to easily distinguish ad views from other
views, in this study, ClickScanner uses the relevant ad features,
such as string, type, and placement features, to determine ad views,
followed by prior research [14]. In summary, only the apps that
successfully pass the above three analysis steps would undergo the
static analysis of ClickScanner.
4.1.2 Extracting Click Event Properties through Static Analysis. Af-
ter ClickScanner selects those click events targeted at ad views,
ClickScanner performs static analysis on them and extracts their
properties and trigger conditions. As mentioned in Section 2.2,
attackers typically use the MotionEvent.obtain function to cre-
ate a new MotionEvent object by obtaining the properties of a
click event as its parameters, and then attackers deliver it to the
dispatchTouchEvent function to perform the humanoid attack.
Therefore, for a given app (APK), ClickScanner first utilizes the
static analysis tools Soot [45] and Flowdroid [6] to build inter-
procedural control flow graphs (ICFGs), Def-Use (DU), and Use-Def
(UD) chains of it. However, separately deploying the above ICFG,
UD, and DU chains cannot represent the parameters assignment
process of the MotionEvent.obtain function and the trigger con-
dition formation process of the dispatchTouchEvent. Therefore,
to overcome these issues, we propose a novel data dependency
graph (DDG) to show the overall properties and trigger conditions
of the click event for further feature extraction, and the details of
DDG building are introduced as follows.
The initialization of DDG. We propose a novel data dependency
graph (DDG) to show the overall properties and trigger conditions
of the click event based on ICFGs, DU, and UD chains for further
feature extraction. DDG can include all the data that make up prop-
erties and trigger conditions of the click event in a graph, where
each node represents the statement, and each edge represents the
Fraud PredictionThreshold DecisionDecompileDDGBuild ICFGs & Def-Use and Use-def chains•AxisAPI•ViewSizeAPI•Const•RandAxis•DDGSize•RandCondition•SysAPIFeaturesCrawlerFraud DecisionApp Dissecting ModuleFeature Extraction ModuleFraud Decision ModuleApp val1App val2App val3......Feature Vector 1 Feature Vector 2 Feature Vector 3 ...... Session 1D: Authentication and Click Fraud CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea275const_def = getDefSite(𝑖, 𝑈 𝐷𝐶ℎ𝑎𝑖𝑛)
DDG += New DDGNode(𝑐𝑜𝑛𝑠𝑡_𝑣𝑎𝑙)
func_def = getDefSite(𝐼𝐶𝐹𝐺𝑠, 𝑖)
DDG += getSubGraph(𝑓 𝑢𝑛𝑐_𝑑𝑒 𝑓 )
DDG += New DDGNode(𝑖)
if !isSysAPI(𝑖) then
else if i is func then
Algorithm 1 DDGTool
Input: ICFG; UD chain; DU chain; root;
Output: DDG;
1: DDG = emptyset
2: DDG.setRoot(𝑟𝑜𝑜𝑡)
3: while DDG is changing do
for every i in DDG do
4:
if i is const then
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
end for
22:
23: end while
24: return DDG
else if i is var then
else
end if
else
end if
DDG += New DDGNode(𝑖)
DDG += getPre(𝐼𝐶𝐹𝐺, 𝑈 𝐷&𝐷𝑈𝐶ℎ𝑎𝑖𝑛, 𝑖)
para_caller = getCaller(𝐼𝐶𝐹𝐺𝑠, 𝑖)
DDG += getPara(𝑝𝑎𝑟𝑎_𝑐𝑎𝑙𝑙𝑒𝑟)
dependency relation between the two statements. We can find out
what data have been used to form the properties and trigger condi-
tions of the click event and what the relationship is between them
by the DDG. After obtaining the ICFG, DU chains, and UD chains,
we develop backward program slicing in Algorithm 1 to build the
DDG. Fig. 6 shows a DDG generated by ClickScanner correspond-
ing to Fig. 4. The red arrows are the routes of backward program
slicing and nodes are the statements. The inputs of the algorithm
are the ICFG, DU and UD chains, and the root which are those
items in the condition expression of dispatchTouchEvent and the
parameters of MotionEvent.obtain as mentioned in Section 3. In
particular, the roots of this DDG in Fig. 6 are “x coordinate” node
and “y coordinate” node. The algorithm starts with the empty set
data dependency graph (DDG) and aims at finding the assignment
process of those items and parameters. It is observed that both the
values of the items in the condition expressions and the parame-
ters of MotionEvent.obtain representing the properties of a click
event are usually composed of four types of data. They are constants,
variables, return value of a method and parameters of the function
which calls the dispatchTouchEvent. One or more of these four
types of data are combined through arithmetic operations to form
the final result.
The expansion of DDG. For each item in the DDG generation, as
shown at line 3 to line 22 in Algorithm 1, ClickScanner handles
the above four types of data by repeating the following steps. 1)
If it is a constant, ClickScanner will find the definition site of it
by UD chain and directly add it to the DDG. 2) If it is a return
value of a certain system method that usually has a fixed meaning,
Figure 6: A simplified illustrative figure of the data depen-
dence graph (DDG) of the motivating example constructed
by ClickScanner for the code in Fig. 4. The red arrows are
the routes of backward program slicing.
ClickScanner directly adds the return values of it to the DDG.
However, if it is a return value of the developer-defined method
without fixed meaning, ClickScanner finds the method’s definition
site and identifies what processing has been performed in its method
body. Then, ClickScanner converts all the nodes in their method