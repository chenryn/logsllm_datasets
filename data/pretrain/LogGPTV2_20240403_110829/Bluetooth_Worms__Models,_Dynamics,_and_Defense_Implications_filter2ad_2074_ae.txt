o
r
P
 600
 550
 500
 450
 400
 350
 300
 250
 200
 150
 100
 0
 1
Inquiry timeout: 2.56 seconds
Inquiry timeout: 5.12 seconds
Inquiry timeout: 7.68 seconds
Inquiry timeout: 10.24 seconds
 3
 2
 6
Expected number of inquiry responses
 4
 5
 7
 8
Figure 17. Differences be-
tween the fractions of un-
infected devices and unin-
fected devices discovered
Infection proba-
Figure 18.
bility vs.
their orders on
the neighbor lists (95% con-
ﬁdence interval)
19.
Figure
95% propa-
gation time with differ-
ent
parameters
(Static,75m×75m)
inquiry
speciﬁcation states that Tinq must be at least 10.24 seconds
to discover all devices in an error-free environment. An “in-
telligent” worm, however, may not follow this suggestion if
this does not help improve its propagation speed.
Changing inquiry parameters has mixed effects.
If a
worm uses a larger inquiry timeout value, then it can possi-
bly discover more nearby devices within one infection cy-
cle. However, if there are not enough devices responding
to its inquiry, the inquiry process has to wait until the in-
quiry timer expires. In such circumstance a smaller inquiry
timeout value can shorten the whole inquiry process, but the
worm may not receive as many responses as with a larger
value. A worm can also change Ninq, the expected num-
ber of responses. Similarly, a worm using large Ninq can
potentially discover more devices in its vicinity, but has to
wait for the expiration of the inquiry timer if not as many as
Ninq responses are received within Tinq time units.
In a new set of experiments, we aim to ﬁnd optimal se-
lections on the inquiry parameters for the Bluetooth worm.
We vary Tinq among 10.24, 7.68, 5.12, and 2.56 seconds
and Ninq among 7, 5, 3, and 1. The simulation results for
the static and mobile networks are illustrated in Figures 19
and 20 respectively. For the static network, varying inquiry
timeout value does not impose signiﬁcant performance dif-
ference except the smallest value (i.e., 2.56 seconds). On
the other hand, expecting only one inquiry response for
each inquiry is always a bad choice for shortening propaga-
tion time, irrespective of the inquiry timeout value. When
Tinq is 5.12 seconds and Ninq is 3, the shortest propagation
time is needed to infect 95% of all vulnerable devices; it is
117.36 seconds, which is 27.3% shorter than what is used
by the baseline worm.
For the mobile network, we notice that if the expected
number of inquiry responses is 1 or 3, the propagation time
for 95% infection coverage is relatively insensitive to the in-
quiry timeout value used; otherwise, small inquiry timeout
value can help shorten the propagation time. Another obser-
vation from Figure 20 is that regardless of inquiry timeout
value, smaller Ninq always leads to less time required for
95% infection coverage. In other words, expecting only one
response for each inquiry in the mobile network is the best
choice for the worm. This phenomenon can be explained
from two aspects. First, in the mobile network, it is rela-
tively more difﬁcult to obtain inquiry responses from nearby
devices because of device mobilities; thus, it is more likely
that a worm using large Ninq ﬁnishes its inquiry process un-
til the inquiry timer expires. Second, although a worm using
large Ninq can potentially ﬁnd more devices in its vicinity, it
may suffer more unsuccessful attempts at establishing con-
nections to them because of node mobility. Figure 20 also
reveals that when Ninq is 1 and Tinq is 7.68 seconds, the
least time is needed for 95% infection coverage; under this
conﬁguration, 189.22 seconds is used, which is about 60%
of the time used by the baseline worm.
7.2 Tuning Inactive Duration
As seen from Table 1, the period that the baseline worm
remains inactive after an infection cycle (i.e., Tidle) lasts 20
seconds. As we discuss how a worm accelerates its prop-
agation, a natural strategy for an “aggressive” worm may
be to shorten its inactive period. To see how effective this
strategy can be, we perform a new set of experiments in
which we vary Tidle among 1, 10, 20, and 30 seconds. The
simulation results are illustrated in Figure 21. We, surpris-
ingly, do not observe that smaller Tidle leads to faster worm
propagation.
Instead, we ﬁnd that when the inactive pe-
riod lasts only 1 second, the worm propagation in the static
network takes longer time with an enormously large conﬁ-
dence interval; this phenomenon, however, is not observed
in the mobile networks. It can be explained as follows. A
short inactive period causes severe co-channel interference,
which signiﬁcantly slows down worm propagation in the
static network. In the mobile network, device mobility leads
to uneven device densities; hence, a healthy device is more
likely to move into a area with low interference and thus
gets infected there.
Figure 21 also tells us that for the static network, as we
increase the inactive duration from 1 to 30 seconds, the time
for 95% infection coverage actually decreases, but we be-
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006lieve that this observation may not hold as we continue in-
creasing Tidle. On the other hand, for the mobile network,
varying Tidle has little impact on worm propagation speed.
These results reveal that a Bluetooth worm that aggressively
reduces its inactive duration may not improve its propaga-
tion speed at all, and on the contrary, this can signiﬁcantly
slow down its propagation if the network is relatively static.
8 Exploiting Out-of-Band Propagation
Bluetooth interfaces often coexist with other communi-
cation channels on the same devices. For example, a smart
cell phone can have access to a cellular network such as
GSM/CDMA and UMTS, and it also provides various com-
munication interfaces such as infrared, Bluetooth, 802.11,
and GPRS/CDMA1X [10]. A Bluetooth worm can exploit
out-of-band channels to accelerate its propagation. Actu-
ally, such worms have already appeared on cell phones.
Both Mabir and CommWarrior can spread not only through
Bluetooth interface, but also by using MMS, which is based
on GPRS (General Packet Radio Service) technology.
As a Bluetooth worm uses proximity-based infection, the
victims that can be infected are limited to those in its radio
range. If out-of-band propagation channels are available, a
worm can replicate itself onto devices that are multiple hops
away or even those devices that can never be reached via
mere Bluetooth communication. An intelligent Bluetooth
worm can thus exploit out-of-band communication chan-
nels to expand its infection range.
In this part, we investigate how a Bluetooth worm can
exploit MMS communication to speed up its propagation.
We assume that all devices are equipped with both Blue-
tooth and MMS capabilities. We also assume that MMS
messages are coded by the GPRS 3+2 scheme [1]. The
download and upload speeds are 60.0kbps and 40kbps re-
spectively. We simulate the same networks in Sections 5.1
and 5.2, but each device has a list of “buddies”, which are
devices it often sends MMS messages to. For simpliﬁcation,
we do not model the social network that yields these buddy
lists. Instead, we assume that each device randomly picks k
other devices as its buddies, where k is a conﬁgurable pa-
rameter. The baseline worm behavior is slightly changed
as follows. After a device gets infected, it ﬁrst checks its
buddy list, and uploads a copy of worm code to each one on
the list. Once this is ﬁnished, it starts its Bluetooth infection
cycle shown in Figure 1. We only consider uploading and
downloading time in the worm code transfer.
We vary the number of buddies that each device has in
the experiments. The simulation results are presented in
Figure 22. We ﬁnd that one buddy per device is sufﬁcient
in reducing worm propagation time by half in the static net-
work, and increasing that to two buddies per device only
marginally improves the propagation speed. By contrast,
in the mobile network, there is more noticeable difference
between one buddy per device and two buddies per device:
under the former setting, out-of-band propagation helps re-
duce the time for 95% infection coverage by 35.5%, but
under the latter setting, this time is decreased by 53%.
9 Defense Implications
As Bluetooth worms employ more sophisticated strate-
gies that accelerate their propagation, it makes it increas-
ingly difﬁcult to defend against them through manual hu-
man intervention. Active defense schemes such as patching
counter-worms, which have been proposed to ﬁght Internet
worms, may not be effective in ﬁghting aggressive and ma-
licious Bluetooth worms. The reasons are manifold. First,
using active worms to stop malicious worms requires de-
vices to carry on frequent Bluetooth activities, which can
drain their power rapidly. Second, intense worm behavior
can lead to severe congestion in the network. High packet
loss rates will severely impact normal communications.
Increasing software diversity can be considered as a pos-
sible approach to slowing down Bluetooth worm propaga-
tion. As observed in Figure 3, the total propagation time
increases almost super-linearly with increasing fraction of
insusceptible devices, especially when device density is rel-
atively low. This suggests that if we reduce the number of
vulnerable devices by implementing diverse but function-
ally equivalent software on Bluetooth devices, we can slow
down worm propagation.
Another defense scheme that can be used against Blue-
tooth worms is the quarantine defense. For example, if
Bluetooth worms are found on cell phones located at a spe-
ciﬁc area, quarantine tools can be deployed there to prevent
them from spreading to other places. Bluetooth by principle
is a proximity-based protocol, suggesting that quarantine
defense can be an effective counter-measure against worms
using it as a single infection means. However, as discussed
in Section 8, Bluetooth often coexists with other communi-
cation channels. Such out-of-band communication capabili-
ties overcome the spatial obstacles to Bluetooth worm prop-
agation. It is, therefore, much harder to quarantine devices
infected by a worm like CommWarrior that uses multiple
communication mechanisms to spread itself.
10 Related Work
Although substantial efforts have been made in analyz-
ing, modeling and simulating Internet worms, worm prop-
agation in mobile networks has only been investigated in
a few papers. Mickens et al. [15] also observed that tra-
ditional epidemic models fail to characterize worm propa-
gation in mobile networks. In addition, they claim that a
worm is easier to spread in a more dynamic network. Our
results with a detailed MAC/PHY layer protocol reveal that
this may not be true. Although in a highly dynamic network
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006 320
 300
 280
 260
 240
 220
 200
)
c
e
s
(
n
o
i
t
c
e
f
n
i
%
5
9
r
o
f
e
m
i
t
n
o
i
t
a
g
a
p
o
r
P
 180
 0
 1
Inquiry timeout: 2.56 seconds
Inquiry timeout: 5.12 seconds
Inquiry timeout: 7.68 seconds
Inquiry timeout: 10.24 seconds
 3
 2
 6
Expected number of inquiry responses
 4
 5
)
d
n
o
c
e
s
(
n
o
i
t
c
e
f
n
i
%
5
9
r
o
f
e
m
i
t
n
o
i
t
a
g
a
p
o
r
P
 400
 350
 300
 250
 200
 150
 100
 0
 5
 7
 8
Static
Mobile
 10
Inactive duration (second)
 15
 20
 25
 30
)
c
e
s
(
n
o
i
t
c
e
f
n
i
%
5
9
r
o
f
e
m
i
t
n
o
i
t
a
g
a
p
o
r
P
 350
 300
 250
 200
 150
 100
 50
Static
Mobile
 0
 0.5
 1.5
Number of buddies per device
 1
 2
Figure 20. 95% propaga-
tion time with different in-
quiry parameters (Mobile,
75m×75m)
Figure 21. 95% propagation
time with different inactive
periods (95% conﬁdence in-
terval)
Figure 22. 95% propgation
time under different buddies
per device (95% conﬁdence
interval)
infected devices mix better with healthy ones, higher mobil-
ity also lead to more unsuccessful interactions between de-
vices. Khayam et al. [12] developed a topologically-aware
worm propagation model for stationary wireless sensor net-
works. They incorporate MAC layer interference into this
model by specifying a constant infection rate when a worm
spreads itself onto its neighbors. This differs from our work
because we use detailed MAC/PHY protocol interactions to
decide whether an infection attempt succeeds. Anderson et
[5] simulated mobile contagion using mobility traces
al.
collected from a campus wireless network. Their work con-
siders worm propagation in a different type of mobile net-
works from the one we investigated.
11 Summary
Recent occurrences of Bluetooth worms have created
growing security concerns over the data stored on mobile
devices like cell phones and PDAs. This paper investigates
the nature and dynamics of Bluetooth worm propagation.
We ﬁnd that Bluetooth worm propagation speed can be neg-
atively impacted by the device mobility and the channel
congestion. We also observe that an advanced worm can im-
prove its propagation speed by strategically selecting its pa-
rameters or exploiting extra long-distance communication
capabilities.
References
[1] General
packet
radio
service.
http://en.wikipedia.org/wiki/GPRS.
[2] The McAfee AVERT Virus
Information Library.
http://vil.nai.com/vil/.
Network
[3] The
Simulator
-
ns-2.
http://www.isi.edu/nsnam/ns/index.html.
[4] UCBT - Bluetooth Extention for NS2 at the University of
Cincinnati. http://www.ececs.uc.edu/ cdmc/ucbt/ucbt.html.
[5] E. Anderson, K. Eustice, S. Markstrum, M. Hansen, and
P. Reiher. Mobile contagion: Simulation of infection and
defense. In Proceedings of the 19th Workshop on Principles
of Advanced and Distributed Simulation, June 2005.
[6] E. Chien. Security response: Symbos.mabir. Symantec Cor-
poration, 2005.
[7] W. Enck, P. Traynor, P. McDaniel, and T. F. La Porta. Ex-
ploiting open functionality in sms-capable cellular networks.
In Proceedings of the 12th ACM Conference on Computer
and Communications Security (CCS’05), November 2005.
[8] P. Ferrie and F. Perriot.
Paradise lost. Virus Bulletin,
http://www.virusbtn.com/, April 2005.
[9] P. Ferrie, P. Szor, R. Stanev, and R. Mouritzen. Security
responses: Symbos.cabir. Symantec Corporation, 2004.
[10] C. Guo, H. J. Wang, and W. Zhu. Smart-phone attacks and
defenses. In Proceedings of HotNets III, November 2004.
[11] J. P. Lynch Jr. Co-channel interference in bluetooth piconets.
Master’s thesis, Virginia Polytechnic Institute and State Uni-
versity, 2002.
[12] S. A. Khayam and H. Radha. A topologically-aware worm
propagation model for wireless sensor networks. In Proceed-
ings of The 2nd International Workshop on Security in Dis-
tributed Computing Systems (SDCS-2005), 2005.
[13] M. Lactaotao. Security information: Virus encyclopedia:
Symbos comwar.a: Technical details. Trend Micro Incor-
porated, 2005.
[14] N. Leavitt. Mobile phones: The next frontier for hackers.
Computer, April 2005.
[15] J. W. Mickens and B. D. Noble. Modeling epidemic spread-
ing in mobile environments. In Proceedings of the 4th ACM
workshop on Wireless security, September 2005.
[16] D. Moore, V. Paxson, S. Savage, C. Shannon, S. Staniford,
and N. Weaver. Inside the slammer worm. IEEE Security &
Privacy, 1(4), 2003.
[17] S. Staniford, V. Paxson, and N. Weaver. How to 0wn the in-
ternet in your spare time. In Proceedings of the 11th USENIX
Security Symposium (Security ’02), August 2002.
[18] C. Taylor and N. Mawston. Bluetooth market doubles: CSR
still gaining momentum. http://www.strategyanalytics.net/,
December 2005.
[19] J. Tourrilhes. On-demand bluetooth: Experience integrating
bluetooth in connection diversity. Technical Report HPL-
2003-178, Hewlett-Packard Labs, August 2003.
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006