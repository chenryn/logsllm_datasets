# 2019 Redhat CTF Writeup by X1ct34m
## 前言
有一说一，题目质量比隔壁某py大赛高多了。
## MISC
### 签到
答问卷得flag
### Advertising for Marriage
拿到一个raw文件，应该是内存取证，掏出volatility,不知道为啥kali自带的识别不出镜像信息，换ubuntu才ok，迷。
    #查看镜像信息： 
    $ volatility -f 1.raw imageinfo
    Volatility Foundation Volatility Framework 2.5
    INFO    : volatility.debug    : Determining profile based on KDBG search...
              Suggested Profile(s) : WinXPSP2x86, WinXPSP3x86 (Instantiated with WinXPSP2x86)
                         AS Layer1 : IA32PagedMemoryPae (Kernel AS)
                         AS Layer2 : FileAddressSpace (/home/yulige/Desktop/1.raw)
                          PAE type : PAE
                               DTB : 0xaf9000L
                              KDBG : 0x80545ce0L
              Number of Processors : 1
         Image Type (Service Pack) : 2
                    KPCR for CPU 0 : 0xffdff000L
                 KUSER_SHARED_DATA : 0xffdf0000L
               Image date and time : 2019-10-31 07:15:35 UTC+0000
         Image local date and time : 2019-10-31 15:15:35 +0800
    #查看进程
    $ volatility -f 1.raw --profile=WinXPSP2x86 psscan
    #发现有mspaint.exe和notepad.exe，pid分别是332和1056，将其dump出来
    $ volatility -f 1.raw --profile=WinXPSP2x86 memdump -p 332 --dump-dir=./
    $ volatility -f 1.raw --profile=WinXPSP2x86 memdump -p 1056 --dump-dir=./
然后在notepad进程dump出来的东西里面去查找字符串，找到：  
    hint:????needmoneyandgirlfirend
前面四个问号应该是掩码，先不管这个。  
然后根据mspaintdump出来的bmp文件改后缀为data，参考：
然后将分辨率改为1280*1024，位移改为770000左右可以看到一个图。
因为是反过来看的所以是b1cx，然后加上前面的hint，结合起来就是b1cxneedmoneyandgirlfirend。
    $ volatility -f 1.raw --profile=WinXPSP2x86  filescan | grep -E 'jpg|png|jpeg|bmp|gif'
    Volatility Foundation Volatility Framework 2.5
    0x00000000020d5190      1      0 R--rwd \Device\HarddiskVolume1\Documents and Settings\All Users\Application Data\Microsoft\User Account Pictures\Administrator.bmp
    0x000000000247c1a8      1      0 R--rwd \Device\HarddiskVolume1\WINDOWS\Web\Wallpaper\Bliss.bmp
    0x000000000249ae78      1      0 R--r-- \Device\HarddiskVolume1\Documents and Settings\Administrator\桌面\vegetable.png
    0x0000000002511c70      1      0 R--rwd \Device\HarddiskVolume1\WINDOWS\ime\IMJP8_1\DICTS\imjpgn.grm
    # 可以看到桌面上有一个vegetable.png,将它dump出来。
    $ volatility -f 1.raw --profile=WinXPSP2x86 dumpfiles -Q 0x000000001efb29f8 -n --dump-dir=./
拿到图片之后发现crc32校验过不去，用网上找的脚本跑一下，改高度。  
参考链接：[https://www.cnblogs.com/WangAoBo/p/7108278.html](http://qq://txfile/#)
    # -*- coding: utf-8 -*-    import binascii
    import struct
    crc32key = 0xB80A1736
    for i in range(0, 65535):
      height = struct.pack('>i', i)
      #CRC: CBD6DF8A
      data = '\x49\x48\x44\x52\x00\x00\x01\x1F' + height + '\x08\x06\x00\x00\x00'
      crc32result = binascii.crc32(data) & 0xffffffff
      if crc32result == crc32key:
        print ''.join(map(lambda c: "%02X" % ord(c), height))
改完高度是：  
然后用ps锐化处理，但是后几位实在是看不清。没办法。太佛了。
用zsteg跑一下，发现有东西，但是dump不出来，想到是lsb带密码的加密，密码应该就是hint。
然后用脚本解密出来之后是：VmlyZ2luaWEgY2lwaGVydGV4dDpnbnh0bXdnN3IxNDE3cHNlZGJzNjI1ODdoMA==
解密base64：Virginia ciphertext:gnxtmwg7r1417psedbs62587h0
拿去在线网站爆破密钥恢复明文试试，毫无卵用。
然后突然想到上面的那个打码的图片，好像也有1417的样子，维吉尼亚是不会变数字的，那么如果数字的位置不变的话。那么把{}改成is，位数好像刚好对的上，1417的位置也刚好对的上。
然后如果猜测是对的话，那么前六位的密钥是bcxnee。这个bcxnee不就是刚好刚刚hint把数字去掉么，脑洞大开，想到密钥就是hint去掉前面那个1
不知道是不是，带flag格式交一下试试，对了。
flag{d7f1417bfafbf62587e0}
### 恶臭的数据包
无线wifi流量包，套路走一波。
    #查看essid
    root@kali:~/Desktop# aircrack-ng cacosmia.cap 
    Opening cacosmia.cap
    Read 4276 packets.
       #  BSSID              ESSID                     Encryption
       1  1A:D7:17:98:D0:51  mamawoxiangwantiequan     WPA (1 handshake)
    Choosing first network as target.
                                     Aircrack-ng 1.3 
    Passphrase not in dictionary
    Please specify a 151/235 keys tested w).
          Time left: 0 seconds                                      64.26%
    Quitting aircrack-ng...
    #爆破密码
    root@kali:~/Desktop# aircrack-ng cacosmia.cap -w /usr/share/wordlists/fern-wifi/common.txt 
    Opening cacosmia.cap
    Read 4276 packets.
    [00:00:00] 16/688 keys tested (1029.20 k/s) 
    Time left: 0 seconds                                       2.33%
                       KEY FOUND! [ 12345678 ]
    Master Key     : B4 2C 77 C0 A8 F4 E6 E9 9F 85 1B ED 7B 3F 5A 91 
                   3C AA D4 42 B9 6D 5C D2 A1 90 E3 F9 75 B3 6D 9F 
    Transient Key  : 8B D7 4A 1F 2A 0D B7 40 C1 3B BC C9 13 60 46 E5 
                   49 4E 9B 9A AF BD E3 89 33 5A 73 C8 95 AC 53 94 
                   AF 92 D1 D9 ED E4 B2 AF 40 C1 03 D8 98 2D 8A 90 
                   00 58 39 CF C2 9E B9 80 A2 D5 86 57 9A 00 00 00 
    EAPOL HMAC     : D8 97 A1 FD CF F2 87 89 6A 19 EF 14 44 33 E0 3C 
    #用essid和密码解密流量包
    root@kali:~/Desktop# airdecap-ng cacosmia.cap -e mamawoxiangwantiequan -p 12345678
    Total number of packets read          4276
    Total number of WEP data packets         0
    Total number of WPA data packets       685
    Number of plaintext data packets         0
    Number of decrypted WEP  packets         0
    Number of corrupted WEP  packets         0
    Number of decrypted WPA  packets       538
然后wireshark打开解密的流量包，发现有一个png图片。
winhex打开发现末尾有个压缩包，提取出来之后发现要密码，不知道密码是啥，爆破无果，后来回到压缩包发现jwt的session。
解密看看：
说密码是一个网站，总共就没几个包，在一个udp包里面找到：
这个就是密码，打开拿到flag。
flag{f14376d0-793e-4e20-9eab-af23f3fdc158}
## RE
### xx
根据题目可以猜到是xxtea，这边再加一个换位xor操作  
整回来后解一次xxtea就行  
key是输入的前四  
但是不知道前四是啥  
所以猜是flag  
然后出了
    # -*- coding: UTF-8 -*-    import xxtea
    text = "1111111111111111111"
    key = "flag"
    #encrypt_data = xxtea.encrypt(text, key)
    encrypt_data = 'bca5ce40f4b2b2e7a9129d12ae10c85b3dd7061ddc70f8dc'.decode('hex')
    decrypt_data = xxtea.decrypt(encrypt_data, key)
    print decrypt_data
### easyRE
step1:输入
> Info:The first four chars are `flag`
最后发现主要看sub_400D35  
和上一题一个套路  
猜前4密文xorkey是flag  
然后就出了  
比较简单不贴脚本
### calc
三次输入  
中间有sleep直接patch了  
先对输入进行了平方 FF0是pow函数  
然后是乘4 A90是mul函数  
然后对第二个输入  
乘3  
平方  
对第三个输入  
他先用7 _input3  
然后result\_*input3  
我佛了  
下面是对输入的判断  
input2<input1<input3 //应该是这个，没有仔细看  
然后对三个输入之间进行一些蛇皮操作后就来最终check了  
对了就有flag  
//check大小完后的操作  
550函数为add  
7E0函数为del
    //我输入是 222 123 321
    a = mul(3,input1)
    b = mul(a,input1)   //147852
    c = mul(b,input2)   //18185796
    pow(input2,2)       //15129
    a = mul(3,input1)       //666
    b1 = mul(a,input2)   //input2已经平方 10075914                                      
    a = add(a,b1)   //10076580
    a = add(input1,input2)
    b2 = pow(a,3)       //41063625
    b3 = del(b2,b1)         //30987711
    temp0 = del(b3,c)               //12801915
    a = mul(48,input3)      //15408
    b = mul(12,input3)      //3852
    c = mul(b,input3)       //1236492
    d = add(4,input3)       //325
    x = pow(d,3)        //34328125
    temp1 = del(x,c)            //33091633
    temp2 = del(temp1,a)                    //33076225
    temp3 = del(temp2,22)   //33076203
    if（temp3==temp0）