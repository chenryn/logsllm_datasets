Docker 是一个开发、运输和运行强大的分布式微服务应用的平台。在 Docker 领域的许多第三方产品供应商和初创公司的持续支持下，该平台处于扩展模式。对于不同的用例，正在构建额外的自动化工具并发布到市场上:
*   Docker 集线器
*   可信注册表 Docker
*   Docker 引擎
*   Kitematic Docker
*   Docker 工具箱
*   Docker 注册表
*   Docker 机器
*   DockerSwarm
*   复合 Docker
*   Docker 云
*   数据中心 Docker
有了持续的需求，我们可以放心地期待在接下来的日子里对前面的列表进行新的补充。Docker 团队正在积极主动地开发各种工具，以实现所需的自动化和简单性，从而减轻 IT 专业人员的工作量。
## Docker 技术的含义
随着 Docker 理念的系统化和智慧化应用，全球范围内有进取心的企业和组织必定会从他们的业务转型需求中受益匪浅。本节将描述 Docker 范例的最重要和潜在的影响。毫无疑问，容器是当今的热门话题。企业、服务提供商(云、通信等)和消费者都在追求 Docker 梦想。Docker 一直在为企业和云信息技术创造多方面的印象和影响。Docker 技术的系统杠杆作用肯定会得到加强，为企业带来可喜的进步。
### 现代企业发展
从概念上讲，容器映像可以被认为是可以存储在磁盘上的容器文件系统的快照。容器文件系统通常是分层排列的，每一个变化都在一个单独的层中被仔细捕获。这允许容器映像指示它是从哪个父映像导出的。通过标准化和简化的格式表示的 Docker 映像最终可以导致软件应用的快速和有益的部署和执行。容器是便携式的。这意味着构建一次映像并到处运行它们是可移植性目标的关键。容器可以在运行相关操作系统的任何硬件上运行。
也有挑战。由于单个 Docker 主机中可能有许多容器，因此在云环境(私有、公共和混合)中可能会出现容器蔓延的问题。为了进行有效的监控和管理，集群和编排的概念被用来寻找和绑定不同的分布式容器。此外，为了通过容器化应用构建分布式应用，鼓励通过编排技术进行服务组合。Docker Compose 是制作复合应用的关键解决方案。对于容器级的工作，有自动化的监控、测量、管理和编排软件解决方案(Docker Swarm、Kubernetes 和 Mesos)。在接下来的章节中，我们将解释容器如何最适合敏捷和熟练的业务。这并不意味着虚拟化已经过时。在某些情况和场景下，虚拟化和容器化的混合使用会带来奇迹。
将这些特殊功能与容器映像相结合，产生了一个可行且古老的抽象，实现了应用与底层操作系统之间的完全隔离。映像和操作系统的这种巧妙分离使得在开发、测试、试运行和生产环境中部署软件应用成为可能，没有任何障碍。这种 Docker 支持的一致性和普遍性通过消除各种不一致和不必要的摩擦，提高了部署的可靠性，加快了现代企业的发展。广泛表达的建议是拥有一个气密的容器映像，它可以将应用的所有依赖项包含并封装到一个包中。然后可以将其部署到一个容器中，使运输能够随时随地进行。
### MSA 和 Docker 容器
服务支持已经成功地进行了，原因和目标有很多。每个系统(物理的、机械的、电气的和电子的)都系统地启用了易于使用的接口。RESTful 接口和服务因其简单性而变得无处不在。在最近的过去，随着网络、企业、移动和云应用的激增，REST 理念显然已经吸引了大量的注意力和吸引力。人们很快发现，将业务功能拆分成可重用的服务是非常有效的；然而，与此同时，它引入了一个风险点。这意味着每次一个服务被更新，那么所有使用更新服务的其他服务都必须接受各种形式的验证和确认。这是因为服务不可避免地必须找到、绑定和利用其他服务及其独特的功能和数据点，才能正确和相关。这种肆无忌惮的共享可以发生在本地，也可以通过网络与远程共享。
简而言之，基本上，微服务方法规定，与其拥有一个所有开发人员都接触过的庞大代码库，管理起来往往会变得很危险，不如由跨不同时区的小型敏捷团队来管理大量更小的代码库。每个代码库都必须通过精心设计和定义的 API 进行互操作。每个代码库的大小都很小，但彼此之间完全解耦。依赖性完全消失了，带来了更好的安全性、可靠性、简单性、可扩展性、可用性等等。代码库被称为微服务。微服务史无前例的起飞动机肯定很多；具体来说，粒度扩展、易管理性、可操作性、可重新配置性和可扩展性、通过 API 访问的强安全性、容器作为最佳运行时环境的适当性等等，都是被广泛阐述的。微服务可以独立部署、水平扩展、由任何后端数据库(SQL、NoSQL、NewSQL、内存等)支持，并由任何编程语言构建。
Docker 容器最适合托管微服务。单个服务或流程的这种有意的容器化使得管理、更新和扩展这些服务变得非常简单。现在，随着任何信息技术环境中微服务数量的快速增长，管理复杂性也在不断增加。这意味着挑战包括如何管理集群中的单个服务，以及如何处理分布在不同主机上的多个服务。Kubernetes、MaestroNG、中间层和 Fleet 的出现满足了这种日益增长的需求。
总之，一个突出的原因是微服务的大量出现和推广，这带来了容器的不可或缺性。通过将微服务填充到容器中，可以实现微服务的各种预期目标。这一有趣的组合必将对全球进取型企业的信息技术团队起到非常重要的作用。实际上，容器化原则的广泛使用已经为特定目的以及不可知的微服务的爆发奠定了令人振奋的基础。
#### 个案研究
南非住房贷款公司在发展和生产中面临挑战。SA 目前有四个 scrum 团队，每个团队都有一个开发和一个系统测试实验室。该团队面临缓慢的部署时间，只能在开发实验室中构建和部署两个应用，导致部署周期长，有时需要长达 2 周的时间才能将应用转移到测试环境中。这个问题也延伸到了生产。主要的房屋贷款服务软件 monolithic 是使用传统技术构建的。
信息技术团队有意识地决定采用管理服务协议来获得敏捷性、可移植性和可扩展性，这一突破导致了 50 个微服务。了解了 Docker 技术的重要性后，团队可以将所有的微服务转移到容器中。
团队还需要一个生产就绪的编排服务，该服务可以为团队提供一个管理容器和将容器分发到节点上的单点，并为团队提供对所有容器的高级监督。Docker Swarm 是编排工具。SA Home Loans 现在使用 Docker Datacenter，这是一种内部解决方案，通过本地托管的受支持的**容器即服务** ( **CaaS** )平台为企业带来容器管理和部署服务。SA 房屋贷款现在每天最多构建和部署 20-30 次应用。**通用控制平面** ( **UCP** )嵌入了 Swarm 来提供生产就绪的容器编排解决方案。
### 基础设施优化
虚拟化已经成为巨大优化和组织各种信息技术基础设施(服务器、存储设备、网络和安全解决方案)的主要机制。通过虚拟机实现的经验证的分治技术是信息技术优化的主要目标。最近，Docker 容器因祸得福。容器只包含构建、运输和运行软件应用所必需的东西。与虚拟机不同，容器不需要来宾操作系统或虚拟机管理程序。这使企业能够从根本上减少存储量，并完全消除虚拟机管理程序许可成本。与物理机器中填充的虚拟机数量相比，物理主机或虚拟机中可容纳的容器数量更多。这意味着容器是细粒度的，而虚拟机是粗粒度的。在容器化的情况下，资源的浪费非常少。容器正在有条不紊地使用每一点信息技术基础设施和资源。
便携性是另一个因素。这使 IT 运营团队能够跨不同的云服务、物理服务器或虚拟机移动工作负载，而无需将它们锁定在使用特定的基础架构工具。通过容器进行工作负载整合或优化是没有错误的，因为容器可以在任何地方运行。就虚拟机而言，考虑到虚拟机管理程序的多样性/ **虚拟机监视器** ( **虚拟机管理程序**)，虚拟机放置是一件棘手且棘手的事情。这里的要点是，Docker 允许企业优化基础架构利用率并降低维护现有应用的成本，这顺便是企业 IT 团队每天面临的头号挑战。
Docker 大大减少了安装应用、扩展以满足客户需求或启动新容器所需的时间。这意味着，将新产品推向市场的速度非常快，因为底层基础设施(虚拟或物理)在几秒钟内就准备好了。
#### 个案研究
一个需要建立并提供**数据库即服务**(**【DaaS】**)功能的客户端解决了每个数据库实例都被调配并驻留在其自己的虚拟机中的问题。有时会有 100 个虚拟机运行 100 个数据库。这效率极低，浪费了大量昂贵的资源。现在，相同数量的数据库实例可以在相同数量的容器上运行，而这些容器又可以在几个虚拟机中运行。结果是巨大的成本节约。另一个案例研究如下:
*   **客户详情** : Swisscom 是瑞士领先的电信提供商，提供一系列企业和消费者服务。