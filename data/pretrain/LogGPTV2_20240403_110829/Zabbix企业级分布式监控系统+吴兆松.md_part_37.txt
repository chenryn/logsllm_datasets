"resu1t":"0d225d8d2a058625f814f3a0749cd218",
#result后面的值是SESSIONID，每次访问都会发生变化
"id":0}
error result:
{'code': -32602,
'message':'Invalid params.'}
#判断SESSIONID是否在返回的数据中
'result' in response:
if
auth code=response['result']
else:
print response['error']['data']
# request json
json_data={
"method":"host.get",
"params":{
"output": "extend",
json base={
"jsonrpc":"2.0",
"auth":auth_code,
"id":1
json_data.update(json_base)
#用得到的SESSIONID去验证，获取主机的信息（用http·get方法）
if len(auth code) == 0:
sys.exit(1)
if len(auth_code)!=0:
get_host_data = json.dumps( json_data)
#create request object
request=urllib2.Request(zabbix_url,get_host_data)
for key in zabbix_header:
298
---
## Page 315
第13章ZabbixAPI的使用
request.add_header(key,zabbix_header[key])
#get host list
try:
result=urllib2.urlopen(request)
except URLError as e:
ifhasattr(e,'reason'):
print 'We failed to reach a server.
print'Reason:',e.reason
elif hasattr(e,'code'):
print 'The server could not fulfill the request.'
print 'Error code:, e.code
else:
response = json.loads (result.read())
result.close()
#将所有的主机信息显示出来
print response
#显示主机的个数
print "Number Of Hosts: ", len(response['result'])
将以上代码保存为zabbix_api_get_host_info.py，注意修改用户名、密码和url
为自己实际的环境，运行结果如图13-8所示。
u'maintenan
us
u'o',u'maintenanceid':u'0
u'snmp_available'
uo'，
stat
U'
sf
Number ofHosts:1
图13-8
13.3.7添加Host
添加Host的方法请参考官方文档，网址如下：
https://www.zabbix.com/documentation/2.2/manual/api/reference/host/ create
看到host.create的用法如下：
'id': 1,
'jsonrpc': '2.0',
'method':'host.create',
'[.os. :.ptdnoxb,)] :,sdnoxb,) :,sweaed,
'host': 'Linux server',
'interfaces': ['dns': '',
'ip': '192.168.3.1',
'main': 1,
'port': '10050',
'type': 1,
'useip':1)l,
299
---
## Page 316
Zabbix企业级分布式监控系统
inventory':('macaddress_a':'01234','macaddress_b':
'56768'1,
'templates':[{'templateid':'20045'}]}
上述语句表示添加IP为192.168.3.1、hostname为LinuxServer的这台主机，
由于官方示例中的部分参数并不是实际环境的参数，所以在API中使用时需
要用实际存在的参数。
在MySQL数据库中查看模板id（严格地说，获取模板的ID也应该通过API,
但此处更多的是展示API的用法，以及对应数据库中的关系），确保存在此ID，
这里选用TemplateOSLinux模板，看到其id为10001，故host.create中的templateid
参数为10001，如图13-9所示。
hostid:10001
proxy_hostid:
NULL
host:
Template os,Linux
disahle until:0
图13-9
Groupid在这里归类到id为12的组中，如图13-10所示。
因此，API示例中的jsondata将由图13-11中的语句变为下面的语句。
mysql> select * from groups;
|internalflags
1
0
Devops
12
Devweb app group1
sdnos6 dde daM Aad
14
图13-10
#request json
json_data={
"method":"host.get",
"params":{
"output":"extend",
图13-11
'method':'host.create',
t.:ptdnob,]:,sdnob,):,suexed,
'host':'Web Linux server',
300
---
## Page 317
第13章ZabbixAPI的使用
interfaces':['dns':',
'ip':'192.168.8.1'
'main':1,
05001.,od,
'type':1,
'useip':1)],
'inventory':('macaddress_a':'01234',
'macaddressb':
'56768,
'templates':[{'templateid':'10001'}]}
运行代码，将会看到如图13-12所示的提示。
10050
276f0b99264
图13-12
在Web界面中可以看到刚添加的主机，如图13-13所示。
Discovery (2)Web (0)192.168.8.1: 10050
Templata.Os.Linox
pplications(10)Items（32)Tniqqers（15)GraDhs(5)
Zabbix Aqent)
CONFIGUIRATIONOF HOSTS
Host list
Host:Web
MomtoredZApplicatons（1o） Items(32）Inqgers（15） Graphs（5）Disc
ory
Host name
as 
Visiblename
Group
Othergroup
webappgroup1
businessmanage
dnoso
managergroup3
Lue severs
Newgroup
IPaddress
DNSname
192.168.8.1
IPDNS
图13-13
13.3.8删除Host
关于删除Host的方法，先参考官方文档，地址如下。
https://www.zabbix.com/documentation/2.2/manual/api/reference/host/delete
官方给出的示例如下。
t'auth':'038e1d7b1735c6a5436ee9eae095879e'
'id':1,
'jsonrpc': '2.0',
'method':'host.delete',
'params':['13','32']}
上述语句表示删除hostid为13和32的两台主机。
301
---
## Page 318
Zabbix企业级分布式监控系统
通过运行host.get（13.3.6节中的脚本），知道了hostid为10113。
hostid':u'10113', u'name':u'Web Linux server',u'jmx errors_fro
m':u'0'
json_data将改变为如图13-14所示的语句。
#request json
json_data={
"method":""host.get""
"params":['10113']
图13-14
运行脚本，如图13-15所示。
[root&mysql-master zabbix-api]#
图13-15
看到结果中没有报错，说明删除成功。在Web前端可以看到已经删除成功。
通过前面的学习，相信读者已经掌握了API的使用方法。当然，在实际的API
开发应用中，代码模块会更具有复用性，但原理是相同的。因此，希望读者能够
举一反三，灵活应用。
13.4第三方ZabbixAPI模块
官方收集的模块都是用各种语言编写的，读者可以选用自己熟悉的语言来使
用现有的模块，地址如下。
https://zabbix.org/wiki/Docs/api/libraries
这里以pyzabbix为例，简单讲解其使用方法。
shell#pipinstallpyzabbix #如图13-16所示
In[1]:from pyzabbix import zabbixAPI
In[2]:zapi=ZabbixAPI("http://zabbix-gui.itnihao.com")
In(3]:zapi.1ogin("admin",“zabbix")
6
图13-16
302
---
## Page 319
第13章ZabbixAPI的使用
更多的例子见https://github.com/lukecyca/pyzabbix/tree/master/example。
本章讲解了ZabbixAPI的使用方法，并对照官方文档和实际应用做了说明，
让读者理解API的使用方法，但未做更多实际案例的深入分析，这需要读者根据
实际应用，选择合适的API模块，或者是自己写API模块，基于此，读者可以二
次定制Zabbix所需的应用界面和编程接口，更好地与第三方应用系统进行结合，
从而极大地扩展Zabbix，提高应用的灵活度。
303
---
## Page 320
第14章使用Zabbix协议
前面我们学习了如何使用ZabbixAPI，在某些场合中，我们更希望使用自己
开发的客户端，即在自己的业务程序中内嵌Zabbix客户端，用自己写的客户端发
送数据给Zabbix-Server。那么，这个需求是否能够满足呢？答案是肯定的。Zabbix-
Agent 和Zabbix-Server之间的通信是采用Zabbix协议来实现的，在7.4节中，我
们学习了Zabbix-Sender这种主动的方式发送数据给ZabbixServer，因此，我们完
全可以自己写一个Zabbix-Sender内置到业务程序中，从而避免在系统中安装
Zabbix官方提供的客户端程序。
当我们掌握了Zabbix协议后，无论是进行Zabbix的二次开发、改变原有的代码，
还是写一个新的客户端程序，都具有极大的意义，将会极大地扩展Zabbix应用的范
围和可编程性。例如，可以将Zabbix集成到嵌入式系统，甚至集成到其他硬件系统。
在本章中，将介绍Zabbix的基本协议，如Zabbix-Agent、Zabbix-Sender 和
Zabbix-Get协议，其他协议请读者参考官方文档。
本章所有的代码链接地址为：
https://github.com/itnihao/zabbix-book/blob/master/14-chapter
14.1Zabbix协议概述
Zabbix协议是Zabbix各程序间通信的准则，表14-1展示了各模块的协议和
版本支持概况。
表14-1
版本号
协议
1.1
1.4
1.6
1.8
2.0
2.2
zabbixagent
支持
支持
支持
支持
支持
支持
zabbix sender
支持
支持
支持
zabbixproxy
支持
支持
支持
支持
zabbixJava gateway
支持
支持
zabbix global scripts
>1.69
支持
支持
zabbix queue
支持
注意：读者可以在官方地址https://www.zabbix.org/wiki/Docs/protocols中找
到此表。
---
## Page 321
第14章使用Zabbix协议
在Zabbix各程序间的通信中，其协议传输数据的格式为JSON（JSON的相
关资料，请读者参考网络资料），在Zabbix中的JSON数据输出时，某些JSON
数据不便于阅读，读者可以用JSON格式转换的在线网站（如http://jsonlint.com）
进行转换，或采用Python库进行格式化输出，具体如下。
tool
"data":[
"{#IFNAME}"："1o”
{#IFNAME}":"ethO"
注：关于python-mjson.tool的用法，参考https://docs.python.org/2/library/json.html
14.2Zabbix-Sender 协议
在学习Zabbix-Sender协议之前，先学习Zabbix协议中的一些规则，下面展
示的是如何获取Zabbix的信息，即Zabbix-Get的功能。
Zabbix-Server建立TCP连接到10050端口，请求具体的某个key值，Zabbix-
Agent对请求进行数据的响应，下面用Telnet 来进行模拟测试。
she1l#telnet127.0.0.1 10050
Trying 127.0.0.1..
Connected to 127.0.0.1.
Escape character is'^]'
agent.version
zBxD口rr2.2.2Connection closed by foreignhost.
上述语句中，请求的key是agent.version，响应的数据是ZBXD口2.2.0rc2，
用Zabbix-Get程序获取到的数据如下。
shel1# zabbix_get -s 127.0.0.1 -k agent.version
2.2.2
Agent响应的数据中有一个头部信息ZBXD，如图14-1所示。
ZBXD
0x01
八
头部信息
协议版本
数据长度（非符号64bit）
图14-1
305
---
## Page 322
Zabbix企业级分布式监控系统
ZabbixAgent的数据发送格式如下。
解释如下。
:"ZBXD\x01"（5字节)。
·：数据长度（8字节），1将被格式化为01/00/00/00/00/00/00/00（十
六进制数8字节，64位数字）。
·：大小有限制。为了不耗尽Zabbix-Server的内存，在Zabbix2.2.0~Zab
bix2.2.2中，Zabbix-Server将单个数据的接收大小限制为64MB，Zabbix2.2.0
以前的版本为128MB，在Zabbix2.0.3版本之前对大小无任何限制。在Zabbix2.2.3
中，改为128MB的大小限制，在64MB限制的版本中将会丢弃超过64MB大小限制的数据。
图14-2更加详尽地解释了上面的数据格式。
5Byte
ZBXD
0X01
Y
头部信息
协议版本
JSON数据长度（非符号64bit）
JSON数据（需要发送到服务端的数据）
图14-2
下面分别介绍Sender、Get和Agent协议。
14.2.1Sender数据发送
Zabbix-Sender发送数据时，其数据格式为JSON，数据的三要素是：host、key、
value，具体内容如下。
3
"request":"sender data"
"data":[
"host":"Host name 1",
"key":"item_key",
"value":"33"}，
306
---
## Page 323
第14章使用Zabbix协议
"host":"Host name 2",
"key":"item_key",
"value":"55"
14.2.2Server对数据响应的处理
Zabbix-Server对请求的数据进行响应，其响应的数据格式如下。
"response":"success",
"info":"Processed 1 Failed 1 Total 2 Seconds spent 0.000253"
如果发送的数据中还包含时间戳，格式如下。
"request":"senderdata",
"data":[
"host":"Host name 1"
"key":"item_key",
"value":“33",
"clock":1381482894
"host":"Host name 2"
"key":"item_key",
"value":"55"
"clock":1381482894
'clock":1381482905
14.2.3Zabbix-Sender的实例
下面的示例展示了如何用Python来编写一个Zabbix-Sender的客户端程序。
#!/usr/bin/env python
#-*-coding:utf-8-*-
import socket
import struct
import simplejson
class ZabbixSender:
zbx header='ZBXD
zbx_version=1
zbx_sender_data=(u'request':u'sender data',u'data':[])
send_data =
307
---
## Page 324
Zabbix企业级分布式监控系统
def init_(self, server_host, server_port = 10051):
self.server_ip = socket.gethostbyname(server_host)
self.server_port = server_port
def AddData(self, host, key, value, clock = None) :
adddata={u'host':host，u'key':key,u'value':va
lue}
if clock !=None:
add_data[u'clock']=clock
self.zbx_sender_data['data'].append(add_data)
return self.zbx_sender_data
defClearData(self):
self.zbx_sender_data['data']=[]
return self.zbx sender_data
def_MakeSendData(self):
zbx_sender_json = simplejson.dumps(self.zbx_sender
data, separators=(',', ':'), ensure_ascii=False).encode('utf-8')
json_byte = len(zbx_sender_json)
self.send_data =struct.pack("<4sBq"+ str(json_byte)
+ "s", self.zbx_header, self.zbx_version, json_byte, zbx_sender_json)
def Send(self):
self.MakeSendData()
so = socket.socket()
so.connect((self.server_ip, self.server_port))
wobj = so.makefile(u'wb')
wobj.write(self.send data)
wobj.close()
robj=so.makefile(u'rb')
recv_data = robj.read()
robj.close()
so.close()
tmp_data=struct.unpack("<4sBq"+str(len(recv_data)
-struct.calcsize("<4sBq"))+"s",recv_data)
recv_json=simplejson.loads(tmp_data[3])
return recv_data
ifname==main:
sender =ZabbixSender(u'127.0.0.1')
for num in range(0,2):
sender.AddData(u'Zabbixserver',u'test',u'sentdat
a'+str(num))
res = sender.Send()
print sender.send data
print res
在上面的代码中，有如下字段：
sender.AddData(u'Zabbix server',u'test',u'sent data'+ str(num))