  count    
---------  
 1000000  
(1 row)  
digoal=# checkpoint;  
CHECKPOINT  
digoal=# checkpoint;  
CHECKPOINT  
stap的输出如下, 已经正常了 :   
pid:8981, query start: drop table t;, read: 0,0, write: 0,0  
pid:8981, query done: drop table t;, read: 0,0, write: 65751,2  
pid:8981, query start: create table t(id int, info text, crt_time timestamp);, read: 0,0, write: 0,0  
pid:8981, query done: create table t(id int, info text, crt_time timestamp);, read: 0,0, write: 8448,2  
pid:8981, query start: insert into t select generate_series(1,1000000),md5(random()::text),now();, read: 0,0, write: 0,0  
pid:8981, query done: insert into t select generate_series(1,1000000),md5(random()::text),now();, read: 32768,4, write: 76603392,9351  
pid:8981, query start: select count(*) from t;, read: 0,0, write: 0,0  
pid:8981, query done: select count(*) from t;, read: 0,0, write: 0,0  
pid:8981, query start: select count(*) from t;, read: 0,0, write: 0,0  
pid:8981, query done: select count(*) from t;, read: 0,0, write: 0,0  
pid:8981, query start: create index idx_t_1 on t(id);, read: 0,0, write: 0,0  
pid:8981, query done: create index idx_t_1 on t(id);, read: 0,0, write: 22585576,2758  
pid:8981, query start: select count(*) from t;, read: 0,0, write: 0,0  
pid:8981, query done: select count(*) from t;, read: 8192,1, write: 0,0  
pid:8981, query start: select count(*) from t;, read: 0,0, write: 0,0  
pid:8981, query done: select count(*) from t;, read: 0,0, write: 0,0  
pid:8981, query start: select count(*) from t;, read: 0,0, write: 0,0  
pid:8981, query done: select count(*) from t;, read: 0,0, write: 0,0  
pid:8981, query start: checkpoint;, read: 0,0, write: 0,0  
pid:8981, query done: checkpoint;, read: 0,0, write: 0,0  
pid:8981, query start: checkpoint;, read: 0,0, write: 0,0  
pid:8981, query done: checkpoint;, read: 0,0, write: 0,0  
```  
## 参考  
1\. http://www.postgresql.org/docs/9.3/static/dynamic-trace.html  
2\. syscalls2.stp  
3\. fs/read_write.c  
4\.   
```  
cd /usr/share/systemtap/tapset  
[root@db-172-16-3-39 tapset]# less syscalls2.stp  
# read _______________________________________________________  
# ssize_t sys_read(unsigned int fd, char __user * buf, size_t count)  
probe syscall.read = kernel.function("sys_read").call  
{  
        name = "read"  
        fd = $fd  
        buf_uaddr = $buf  
        count = $count  
        argstr = sprintf("%d, %p, %d", $fd, $buf, $count)  
}  
probe syscall.read.return = kernel.function("sys_read").return  
{  
        name = "read"  
        retstr = return_str(1, $return)  
}  
# write ______________________________________________________  
#  
# ssize_t sys_write(unsigned int fd,  
#            const char __user * buf,  
#            size_t count)  
#  
probe syscall.write = kernel.function("sys_write").call  
{  
        name = "write"  
        fd = $fd  
        buf_uaddr = $buf  
        count = $count  
        argstr = sprintf("%d, %s, %d", $fd, text_strn(user_string($buf), syscall_string_trunc, 1), $count)  
}  
probe syscall.write.return = kernel.function("sys_write").return  
{  
        name = "write"  
        retstr = return_str(1, $return)  
}  
[root@db-172-16-3-39 tapset]# stap -l 'kernel.function("sys_read")'  
kernel.function("sys_read@fs/read_write.c:379")  
[root@db-172-16-3-39 tapset]# stap -l 'kernel.function("sys_write")'  
kernel.function("sys_write@fs/read_write.c:397")  
[root@db-172-16-3-39 src]# locate read_write.c  
/usr/src/debug/kernel-2.6.18/linux-2.6.18-348.12.1.el5.x86_64/fs/read_write.c  
[root@db-172-16-3-39 src]# less /usr/src/debug/kernel-2.6.18/linux-2.6.18-348.12.1.el5.x86_64/fs/read_write.c  
asmlinkage ssize_t sys_read(unsigned int fd, char __user * buf, size_t count)  
{  
        struct file *file;  
        ssize_t ret = -EBADF;  
        int fput_needed;  
        file = fget_light(fd, &fput_needed);  
        if (file) {  
                loff_t pos = file_pos_read(file);  
                ret = vfs_read(file, buf, count, &pos);  
                file_pos_write(file, pos);  
                fput_light(file, fput_needed);  
        }  
        return ret;  
}  
EXPORT_SYMBOL_GPL(sys_read);  
asmlinkage ssize_t sys_write(unsigned int fd, const char __user * buf, size_t count)  
{  
        struct file *file;  
        ssize_t ret = -EBADF;  
        int fput_needed;  
        file = fget_light(fd, &fput_needed);  
        if (file) {  
                loff_t pos = file_pos_read(file);  
                ret = vfs_write(file, buf, count, &pos);  
                file_pos_write(file, pos);  
                fput_light(file, fput_needed);  
        }  
        return ret;  
}  
EXPORT_SYMBOL_GPL(sys_write);  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")