which is freely accessible at http://dtrace.org/guide/preface.html.
The ETW provider
DTrace supports both an ETW provider, which allows probes to fire when certain ETW events are gen-
erated by particular providers, and the etw_trace action, which allows DTrace scripts to generate new 
customized TraceLogging ETW events. The etw_trace action is implemented in LibDTrace, which uses 
TraceLogging APIs to dynamically register a new ETW provider and generate events associated with it. 
More information on ETW has been presented in the “Event Tracing for Windows (ETW)” section previ-
ously in this chapter.
After the symbol store’s path is set, if you restart DTrace targeting the dynamic_memory.d 
script, it should be able to correctly compile it and show the following output:
The Dynamic Memory script has begun.
Now you should simulate a high-memory pressure scenario. You can do this in multiple 
ways—for example, by starting your favorite browser and opening a lot of tabs, by starting a 3D 
game, or by simply using the TestLimit tool with the -d command switch, which forces the system 
to contiguously allocate memory and write to it until all the resources are exhausted. The VM 
worker process in the root partition should detect the scenario and inject new memory in the 
child VM. This would be detected by DTrace:
Physical memory addition request intercepted. Start physical address 0x00112C00, Number of 
pages: 0x00000400.
   Addition of 1024 memory pages starting at PFN 0x00112C00 succeeded!
In a similar way, if you close all the applications in the guest VM and you recreate a high-
memory pressure scenario in your host system, the script would be able to intercept dynamic 
memory’s removal requests:
Physical memory removal request intercepted. Start physical address 0x00132000, Number of 
pages: 0x00000200.
   Removal of 512 memory pages starting at PFN 0x00132000 succeeded!
After interrupting DTrace using Ctrl+C, the script prints out some statistics information:
Dynamic Memory script ended.
Numbers of Hot Additions: 217
Numbers of Hot Removals: 1602
Since starts the system has gained 0x00017A00 pages (378 MB).
If you open the dynamic_memory.d script using Notepad, you will find that it installs a total of 
six probes (four FBT and two built-in) and performs logging and counting actions. For example, 
fbt:nt:MmAddPhysicalMemory:return
/ self->pStartingAddress != 0 /
installs a probe on the exit points of the MmAddPhysicalMemory function only if the starting 
MmAddPhysicalMemory function only if the starting 
MmAddPhysicalMemory
physical address obtained at function entry point is not 0. More information on the D program-
ming language applied to DTrace is available in the The illumos Dynamic Tracing Guide book, 
which is freely accessible at http://dtrace.org/guide/preface.html.
534 
CHAPTER 10 Management, diagnostics, and tracing
The ETW provider is implemented in the DTrace driver. When the Trace engine is initialized by the 
Pnp manager, it registers all providers with the DTrace engine. At registration time, the ETW provider 
configures an ETW session called DTraceLoggingSession, which is set to write events in a circular buf-
fer. When DTrace is started from the command line, it sends an IOCTL to DTrace driver. The IOCTL 
handler calls the provide function of each provider; the DtEtwpCreate internal function invokes the 
NtTraceControl API with the EtwEnumTraceGuidList function code. This allows DTrace to enumerate all 
the ETW providers registered in the system and to create a probe for each of them. (dtrace -l is also 
able to display ETW probes.)
When a D script targeting the ETW provider is compiled and executed, the internal DtEtwEnable 
routine gets called with the goal of enabling one or more ETW probes. The logging session configured 
at registration time is started, if it’s not already running. Through the trace extension context (which, 
as previously discussed, contains private system interfaces), DTrace is able to register a kernel-mode 
callback called every time a new event is logged in the DTrace logging session. The first time that the 
session is started, there are no providers associated with it. Similar to the syscall and FBT provider, for 
each probe DTrace creates a tracking data structure and inserts it in a global RB tree (DtEtwpProbeTree) 
representing all the enabled ETW probes. The tracking data structure is important because it rep-
resents the link between the ETW provider and the probes associated with it. DTrace calculates the 
correct enablement level and keyword bitmask for the provider (see the “Provider Enablement” section 
previously in this chapter for more details) and enables the provider in the session by invoking the 
NtTraceControl API.
When an event is generated, the ETW subsystem calls the callback routine, which searches into 
the global ETW probe tree the correct context data structure representing the probe. When found, 
DTrace can fire the probe (still using the internal dtrace_probe function) and execute all the actions 
associated with it.
DTrace type library
DTrace works with types. System administrators are able to inspect internal operating system data 
structures and use them in D clauses to describe actions associated with probes. DTrace also supports 
supplemental data types compared to the ones supported by the standard D programming language. 
To be able to work with complex OS-dependent data types and allow the FBT and PID providers to set 
probes on internal OS and application functions, DTrace obtains information from different sources:
I 
Function names, signatures, and data types are initially extracted from information embedded
in the executable binary (which adheres to the Portable Executable file format), like from the
export table and debug information.
I 
For the original DTrace project, the Solaris operating system included support for Compact C
Type Format (CTF) in its executable binary files (which adhere to the Executable and Linkable
Format - ELF). This allowed the OS to store the debug information needed by DTrace to run di-
rectly into its modules (the debug information can also be stored using the deflate compression
format). The Windows version of DTrace still supports a partial CTF, which has been added as a
resource section of the LibDTrace library (Dtrace.dll). CTF in the LibDTrace library stores the type
CHAPTER 10 Management, diagnostics, and tracing
535
information contained in the public WDK (Windows Driver Kit) and SDK (Software Development 
Kit) and allows DTrace to work with basic OS data types without requiring any symbol file.
I 
Most of the private types and internal OS function signatures are obtained from PDB symbols.
Public PDB symbols for the majority of the operating system’s modules are downloadable
from the Microsoft Symbol Server. (These symbols are the same as those used by the Windows
Debugger.) The symbols are deeply used by the FBT provider to correctly identify internal OS
functions and by DTrace to be able to retrieve the correct type of parameters for each syscall
and function.
The DTrace symbol server
DTrace includes an autonomous symbol server that can download PDB symbols from the Microsoft pub-
lic Symbol store and render them available to the DTrace subsystem. The symbol server is implemented 
mainly in LibDTrace and can be queried by the DTrace driver using the Inverted call model. As part of the 
providers’ registration, the DTrace driver registers a SymServer pseudo-provider. The latter is not a real 
provider but just a shortcut for allowing the symsrv handler to the DTrace control device to be registered. 
When DTrace is started from the command line, the LibDTrace library starts the symbols server 
by opening a handle to the \\.\dtrace\symsrv control device (using the standard CreateFile API). The 
request is processed by the DTrace driver through the Symbol server IRP handler, which registers the 
user-mode process, adding it in an internal list of symbols server processes. LibDTrace then starts a 
new thread, which sends a dummy IOCTL to the DTrace symbol server device and waits indefinitely for 
a reply from the driver. The driver marks the IRP as pending and completes it only when a provider (or 
the DTrace subsystem), requires new symbols to be parsed.
Every time the driver completes the pending IRP, the DTrace symbols server thread wakes up and 
uses services exposed by the Windows Image Helper library (Dbghelp.dll) to correctly download and 
parse the required symbol. The driver then waits for a new dummy IOCTL to be sent from the symbols 
thread. This time the new IOCTL will contain the results of the symbol parsing process. The user-mode 
thread wakes up again only when the DTrace driver requires it.
Windows Error Reporting (WER)
Windows Error Reporting (WER) is a sophisticated mechanism that automates the submission of both 
user-mode process crashes as well as kernel-mode system crashes. Multiple system components have 
been designed for supporting reports generated when a user-mode process, protected process, trust-
let, or the kernel crashes.
Windows 10, unlike from its predecessors, does not include a graphical dialog box in which the 
user can configure the details that Windows Error Reporting acquires and sends to Microsoft (or to 
an internal server configured by the system administrator) when an application crashes. As shown in 
Figure 10-38, in Windows 10, the Security and Maintenance applet of the Control Panel can show the 
user a history of the reports generated by Windows Error Reporting when an application (or the kernel) 
crashes. The applet can show also some basic information contained in the report.
536 
CHAPTER 10 Management, diagnostics, and tracing
FIGURE 10-38 The Reliability monitor of the Security and Maintenance applet of the Control Panel.
Windows Error Reporting is implemented in multiple components of the OS, mainly because it 
needs to deal with different kind of crashes:
I 
The Windows Error Reporting Service (WerSvc.dll) is the main service that manages the creation
and sending of reports when a user-mode process, protected process, or trustlet crashes.
I 
The Windows Fault Reporting and Secure Fault Reporting (WerFault.exe and WerFaultSecure.
exe) are mainly used to acquire a snapshot of the crashing application and start the genera-
tion and sending of a report to the Microsoft Online Crash Analysis site (or, if configured, to an
internal error reporting server).
I 
The actual generation and transmission of the report is performed by the Windows Error
Reporting Dll (Wer.dll). The library includes all the functions used internally by the WER engine
and also some exported API that the applications can use to interact with Windows Error
Reporting (documented at https://docs.microsoft.com/en-us/windows/win32/api/_wer/). Note
that some WER APIs are also implemented in Kernelbase.dll and Faultrep.dll.
I 
The Windows User Mode Crash Reporting DLL (Faultrep.dll) contains common WER stub code
that is used by system modules (Kernel32.dll, WER service, and so on) when a user-mode appli-
cation crashes or hangs. It includes services for creating a crash signature and reports a hang to
the WER service, managing the correct security context for the report creation and transmission
(which includes the creation of the WerFault executable under the correct security token).
CHAPTER 10 Management, diagnostics, and tracing
537
I 
The Windows Error Reporting Dump Encoding Library (Werenc.dll) is used by the Secure Fault
Reporting to encrypt the dump files generated when a trustlet crashes.
I 
The Windows Error Reporting Kernel Driver (WerKernel.sys) is a kernel library that exports
functions to capture a live kernel memory dump and submit the report to the Microsoft Online
Crash Analysis site. Furthermore, the driver includes APIs for creating and submitting reports for
user-mode faults from a kernel-mode driver.
Describing the entire architecture of WER is outside the scope of this book. In this section, we mainly 
describe error reporting for user-mode applications and the NT kernel (or kernel-driver) crashes. 
User applications crashes
As discussed in Chapter 3 of Part 1, all the user-mode threads in Windows start with the RtlUserThreadStart 
function located in Ntdll. The function does nothing more than calling the real thread start routine 
under a structured exception handler. (Structured exception handling is described in Chapter 8.) 
The handler protecting the real start routine is internally called Unhandled Exception Handler 
because it is the last one that can manage an exception happening in a user-mode thread (when the 
thread does not already handle it). The handler, if executed, usually terminates the process with the 
NtTerminateProcess API. The entity that decides whether to execute the handler is the unhandled 
exception filter, RtlpThreadExceptionFilter. Noteworthy is that the unhandled exception filter and 
handler are executed only under abnormal conditions; normally, applications should manage their 
own exceptions with inner exception handlers.
When a Win32 process is starting, the Windows loader maps the needed imported libraries. 
The kernelbase initialization routine installs its own unhandled exception filter for the process, the 
UnhandledExceptionFilter routine. When a fatal unhandled exception happens in a process’s thread, 
the filter is called to determine how to process the exception. The kernelbase unhandled exception 
filter builds context information (such as the current value of the machine’s registers and stack, the 
faulting process ID, and thread ID) and processes the exception:
I 
If a debugger is attached to the process, the filter lets the exception happen (by returning
CONTINUE_SEARCH). In this way, the debugger can break and see the exception.
I 
If the process is a trustlet, the filter stops any processing and invokes the kernel to start the
Secure Fault Reporting (WerFaultSecure.exe).
I 
The filter calls the CRT unhandled exception routine (if it exists) and, in case the latter does not
know how to handle the exception, it calls the internal WerpReportFault function, which con-
nects to the WER service.
Before opening the ALPC connection, WerpReportFault should wake up the WER service and 
prepare an inheritable shared memory section, where it stores all the context information previously 
acquired. The WER service is a direct triggered-start service, which is started by the SCM only in case 
the WER_SERVICE_START WNF state is updated or in case an event is written in a dummy WER activa-
tion ETW provider (named Microsoft-Windows-Feedback-Service-Triggerprovider). WerpReportFault 
538 
CHAPTER 10 Management, diagnostics, and tracing
updates the relative WNF state and waits on the \KernelObjects\SystemErrorPortReady event, which is 
signaled by the WER service to indicate that it is ready to accept new connections. After a connection 
has been established, Ntdll connects to the WER service’s \WindowsErrorReportingServicePort ALPC 
port, sends the WERSVC_REPORT_CRASH message, and waits indefinitely for its reply. 
The message allows the WER service to begin to analyze the crashed program’s state and performs 
the appropriate actions to create a crash report. In most cases, this means launching the WerFault.exe 
program. For user-mode crashes, the Windows Fault Reporting process is invoked two times using the 
faulting process’s credentials. The first time is used to acquire a “snapshot” of the crashing process. This 
feature was introduced in Windows 8.1 with the goal of rendering the crash report generation of UWP 
applications (which, at that time, were all single-instance applications) faster. In that way, the user could 
have restarted a crashed UWP application without waiting for the report being generated. (UWP and 
the modern application stack are discussed in Chapter 8.)
Snapshot creation
WerFault maps the shared memory section containing the crash data and opens the faulting process 
and thread. When invoked with the -pss command-line argument (used for requesting a process snap-
shot), it calls the PssNtCaptureSnapshot function exported by Ntdll. The latter uses native APIs to query 
multiple information regarding the crashing process (like basic information, job information, process 
times, secure mitigations, process file name, and shared user data section). Furthermore, the function 
queries information regarding all the memory sections baked by a file and mapped in the entire user-
mode address space of the process. It then saves all the acquired data in a PSS_SNAPSHOT data struc-
ture representing a snapshot. It finally creates an identical copy of the entire VA space of the crashing 
process into another dummy process (cloned process) using the NtCreateProcessEx API (providing a 
special combination of flags). From now on, the original process can be terminated, and further opera-
tions needed for the report can be executed on the cloned process.
Note WER does not perform any snapshot creation for protected processes and trustlets. 
In these cases, the report is generated by obtaining data from the original faulting process, 
which is suspended and resumed only after the report is completed.
Crash report generation
After the snapshot is created, execution control returns to the WER service, which initializes the envi-
ronment for the crash report creation. This is done mainly in two ways:
I 
If the crash happened to a normal, unprotected process, the WER service directly invokes the
WerpInitiateCrashReporting routine exported from the Windows User Mode Crash Reporting
DLL (Faultrep.dll).
I 
Crashes belonging to protected processes need another broker process, which is spawned un-
der the SYSTEM account (and not the faulting process credentials). The broker performs some
verifications and calls the same routine used for crashes happening in normal processes.
CHAPTER 10 Management, diagnostics, and tracing
539
The WerpInitiateCrashReporting routine, when called from the WER service, prepares the environ-
ment for executing the correct Fault Reporting process. It uses APIs exported from the WER library to 
initialize the machine store (which, in its default configuration, is located in C:\ProgramData\Microsoft\
Windows\WER) and load all the WER settings from the Windows registry. WER indeed contains many 
customizable options that can be configured by the user through the Group Policy editor or by manu-
ally making changes to the registry. At this stage, WER impersonates the user that has started the fault-
ing application and starts the correct Fault Reporting process using the -u main command-line switch, 
which indicates to the WerFault (or WerFaultSecure) to process the user crash and create a new report.
Note If the crashing process is a Modern application running under a low-integrity level 
or AppContainer token, WER uses the User Manager service to generate a new medium-IL 
token representing the user that has launched the faulting application.
Table 10-19 lists the WER registry configuration options, their use, and possible values. These values 
are located under the HKLM\SOFTWARE\Microsoft\Windows\Windows Error Reporting subkey for 
computer configuration and in the equivalent path under HKEY_CURRENT_USER for per-user configu-
ration (some values can also be present in the \Software\Policies\Microsoft\Windows\Windows Error 
Reporting key).
TABLE 10-19 WER registry settings
Settings
Meaning
Values
ConfigureArchive
Contents of archived data
1 for parameters, 2 for all data
ConsentDefaultConsent
What kind of data should require 
consent
1 for any data, 2 for parameters only, 
3 for parameters and safe data, 4 for 
all data.
ConsentDefaultOverrideBehavior
Whether the DefaultConsent overrides 
WER plug-in consent values
1 to enable override
ConsentPluginName
Consent value for a specific WER plug-in
Same as DefaultConsent
CorporateWERDirectory
Directory for a corporate WER store
String containing the path
CorporateWERPortNumber
Port to use for a corporate WER store
Port number
CorporateWERServer
Name to use for a corporate WER store
String containing the name
CorporateWERUseAuthentication
Use Windows Integrated Authentication 
for corporate WER store
1 to enable built-in authentication
CorporateWERUseSSL
Use Secure Sockets Layer (SSL) for 
corporate WER store
1 to enable SSL
DebugApplications
List of applications that require the user 
to choose between Debug and Continue
1 to require the user to choose
DisableArchive
Whether the archive is enabled
1 to disable archive
Disabled
Whether WER is disabled