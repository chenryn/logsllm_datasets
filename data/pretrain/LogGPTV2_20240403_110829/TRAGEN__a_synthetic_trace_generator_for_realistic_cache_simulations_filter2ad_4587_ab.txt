multiple traffic classes and traffic class mixes seen in modern content
caching scenarios. Further, they lack a provable guarantee that the
generated traces have the same caching properties as the original
ones. They also do not support traffic mix scenarios that are common
in content caching, an important requirement since a CDN cache
is shared across multiple diverse traffic classes. Further, prior work
assume a fixed object catalogue which is not true in practice, since
new content is continually generated, and old content fall out of use,
e.g., the news story on the front page of CNN. In particular, as we
show in Section 5.3, the prior work that use the LRUSM algorithm
[5, 40] do not produce traces that have the same caching properties
as the original trace. Finally, the prior work often consider caches
of small size (in MBs) that do not scale to modern caches that are
many magnitudes larger (in TBs).
Roadmap. In Section 2, we describe the Traffic Modeler that cap-
tures the cache properties of the production traces. In Section 3, we
describe the Traffic Mixer that computes a model for a user specified
traffic mix. In Section 4.1, we describe our Trace Generator and
provide formal guarantees for its correctness and in Section 4.2 we
describe our tool that implements the Trace generator and will be
made available for public use. In Section 5, we provide empirical
results and also show that alternate approaches for trace generation
do not perform well. We end with related work in Section 6 and
conclude in Section 7.
2 Traffic modeler
In this section, we describe traffic classes and the footprint de-
scriptor model that is used to capture the caching properties of a
given traffic class. To model the RHR we leverage the tool of Foot-
print Descriptor (FD) from the work in [50] and extend the model
to a byte-weighted Footprint Descriptor (bFD) to capture the BHR.
The output of the traffic modeler is a model of the original produc-
tion trace that is a three-tuple consisting of its FD, bFD, and its
object size distribution. The model is a succinct representation of the
caching characteristics of the voluminous original trace from which
it is derived.
2.1 Traffic classes
The content accessed by users on the Internet is very diverse,
each with a unique set of characteristics. For the purposes of cache
management, the content is usually bucketed into traffic classes.
A traffic class is a type of content from a content provider and is
treated as a unit in the cache provisioning process [51], for example,
media (i.e., videos) from Hulu, software downloads from Microsoft,
images from Amazon, and web pages from CNN. Each traffic class
has a distinct set of characteristics such as its object size distribution,
specific access patterns, and its popularity distribution. Further, each
traffic class may need a different cache size in order to provide a
minimum hit rate guarantee. The request HRCs (rHRC) and byte
HRCs (bHRC) of the traffic classes Download, Media, Web and
Images is depicted in Figure 2a and Figure 2b, respectively. The
rHRC for the image traffic shows that despite providing a large
cache space we cannot obtain a RHR of above 0.6. This may be
attributed to the fact that a significant number of image objects are
accessed only once and the cache incurs a compulsory miss on a
request for these objects. Such an access pattern may arise with a
large product catalog where a significant fraction of products are
unpopular and their images are seldom accessed. Thus, the caching
properties of each traffic class is different from the other. Figure 2c
shows the variability in the object sizes for the various traffic classes.
As expected, objects in the Media traffic class tend to be larger as
compared those in the Web traffic class.
2.2 Footprint descriptors (FD)
A footprint descriptor (FD) is a succinct space-time representa-
tion of a trace from which its rHRC and other caching properties
can be derived. A traffic class can be characterized by collecting
typical original traces of that class from the production system and
computing their FDs. FDs were first proposed in [50] and are now
used in production CDNs to provision traffic classes to servers [51].
Our definition and presentation of FDs closely follows [50]. Let
trace Π = {𝑟1, . . . , 𝑟𝑛}, be a sequence of requests, where each request
𝑟𝑖 is a tuple ⟨𝑡𝑖, 𝑜𝑖𝑑, 𝑧𝑖⟩ of timestamp, object identifier and object size.
Now, let 𝜃 = {𝑟𝑖, . . . , 𝑟 𝑗}, where 𝑖 < 𝑗, be a request subsequence con-
sisting of consecutive requests in Π. The subsequence 𝜃 is denoted
as a reuse request subsequence if the requests 𝑟𝑖 and 𝑟 𝑗 are made for
the same object that is not requested elsewhere in 𝜃.
A FD of a trace Π is a tuple ⟨𝜆, 𝑃𝑟 (𝑠, 𝑡), 𝑃𝑎(𝑠, 𝑡)⟩ where (i) 𝜆 is the
request rate (number of requests per second) of Π ; (ii) 𝑃𝑟 (𝑠, 𝑡) is the
368
IMC ’21, November 2–4, 2021, Virtual Event, USA
Anirudh Sabnis and Ramesh K. Sitaraman
(a)
(b)
(c)
Figure 2: For the different traffic classes in TC trace (Table 2) (a) Variability in request HRCs; (b) Variability in the byte HRCs; (c) Variability in
object size distribution (SZ)
reuse-subsequence descriptor function that captures the probability
that a reuse request subsequence 𝜃 of Π contains 𝑠 unique bytes and
is of duration 𝑡 seconds. (iii) 𝑃𝑎(𝑠, 𝑡) is the all-sequence descriptor
function that captures the probability that any request subsequence
𝜃 of Π contains 𝑠 unique bytes and is of duration 𝑡 seconds. Note
that 𝑃𝑟 (𝑠, 𝑡) considers only the reuse subsequences, whereas 𝑃𝑎(𝑠, 𝑡)
considers all possible subsequences of Π. The number of unique
bytes 𝑠 in 𝜃 is the sum of the sizes of the unique objects in 𝜃, and the
duration 𝑡 is the difference in the timestamp (𝑡 𝑗−𝑡𝑖) of the last request
𝑟 𝑗 and the first request 𝑟𝑖. Note that the request sequence 𝜃 that starts
at the beginning of the trace and ends in the first request for an object
is considered a reuse subsequence with infinite unique bytes and
infinite duration. The number of unique bytes in a reuse request
subsequence is also known as stack distance [41]. The following
theorem is from [50].
THEOREM 1. Let rHRC(s) be the request hit rate of trace Π for
an LRU cache of size 𝑠. The rHRC(s) is computed from the FD of Π
as follows.
𝑟𝐻𝑅𝐶(𝑠) =
𝑃𝑟 (𝑠′, 𝑡).


𝑡
𝑠′≤𝑠
Observe that the expression in RHS sums the reuse sequence
distribution function (𝑃𝑟 (𝑠′, 𝑡)) across all possible time durations.
In essence, the RHS captures the probability that a reuse request
subsequence, 𝜃 = {𝑟𝑖, . . . , 𝑟 𝑗}, contains at most 𝑠 unique bytes, thus
incurring a cache hit on the request 𝑟 𝑗 . Note that if 𝜃 contained more
than 𝑠 bytes, the LRU policy would have evicted the object requested
by 𝑟𝑖 when the request 𝑟 𝑗 is made, resulting in a miss.
FD calculus. A key property of FDs is that there is an efficient
calculus to evaluate the cache properties of any traffic class mix. For
instance, given footprint descriptors of two traces Π1 and Π2, the
calculus can be used to compute the FD of the traffic mix of Π1 and
Π2 obtained by interleaving the two traces by their timestamps. The
computation of the FD of the traffic mix uses convolution and can
be computed quickly using a Fast Fourier Transform [50]. When
synthetic traces are generated for a traffic mix, TRAGEN uses the
FD calculus to compute the FD of traffic class mix and then uses
this FD to generate a synthetic trace for the mix.
2.3 Byte-weighted footprint descriptor (bFD)
RHR can be derived from FD as shown in Theorem 1, but the
BHR cannot be derived from it. However, we know from practice
that the RHR and BHR can be significantly different. Consider the
following scenario. Let the smaller objects in a trace exhibit higher
temporal locality as compared to the large objects, thus incurring
more cache hits as compared to the larger objects. We can then expect
the BHR of the trace to be smaller than the RHR. In fact, we observe
a similar difference in the rHRC and bHRC of the VIDEO trace
(Table 1) in Figure 3. Thus, to capture the BHR properties of a trace,
we define a new type of footprint descriptor called Byte-weighted
Footprint Descriptor (bFD).
A bFD operates on a byte sequence as opposed to a request
sequence. Let Π𝐵 = {𝑏11, . . . , 𝑏1𝑧1, . . . , 𝑏𝑛1, . . . , 𝑏𝑛𝑧𝑛} be the byte
sequence that is obtained from a request trace Π = {𝑟1, . . . , 𝑟𝑛} by
replacing each request 𝑟𝑖 by the sequence of bytes 𝑏𝑖1, . . . , 𝑏𝑖𝑧𝑖 in
its requested object, where byte 𝑏𝑖 𝑗 corresponds to the 𝑗𝑡ℎ byte of
request 𝑟𝑖 ∈ Π and 𝑧𝑖 is the size of the requested object. Now, let
𝛽 = {𝑏𝑖 𝑗 , . . . , 𝑏𝑘𝑙}, where 𝑖 < 𝑘, correspond to a byte subsequence
in Π𝐵. The byte subsequence 𝛽 is called a reuse byte subsequence if
the first byte (𝑏𝑖 𝑗 ) and the last byte (𝑏𝑘𝑙 ) in 𝛽 correspond to the same
byte that does not occur elsewhere in 𝛽.
A bFD is a tuple ⟨𝜆, 𝑃𝑟𝑏(𝑠, 𝑡), 𝑃𝑟𝑎(𝑠, 𝑡)⟩ where (i) 𝜆 is the traffic
rate i.e., the number of bytes requested per second. (ii) 𝑃𝑟𝑏(𝑠, 𝑡) is
the reuse byte subsequence descriptor function that captures the joint
probability that a reuse byte subsequence consists of 𝑠 unique bytes
and is for a duration 𝑡 seconds, and, (iii) 𝑃𝑟𝑎(𝑠, 𝑡) is the all byte
subsequence descriptor function that captures the joint probability
that a byte subsequence consists of 𝑠 unique bytes and is for a
duration 𝑡 seconds.
The computation of 𝑃𝑟𝑏(𝑠, 𝑡) is done as follows. We maintain a
counter 𝐶(𝑠, 𝑡) that counts the number of reuse byte subsequences
Figure 3: The rHRC and bHRC for the VIDEO trace
369
0.00.51.01.5Cache size (TB)0.00.20.40.60.81.0Request hit rate (RHR)DownloadImageMediaWeb0.00.51.01.5Cache size (TB)0.00.20.40.60.81.0Byte hit rate (BHR)DownloadImageMediaWeb101103105Object size (Bytes)0.00.20.40.60.81.0CDFDownloadImageMediaWeb0.02.55.07.510.0Cache size (TB)0.00.20.40.60.81.0Hit rate RHRBHRTRAGEN: A Synthetic Trace Generator for Realistic Cache Simulations
IMC ’21, November 2–4, 2021, Virtual Event, USA
that contain 𝑠 unique bytes and is of duration 𝑡 seconds. We can ob-
tain 𝐶(𝑠, 𝑡) by enumerating all reuse byte subsequences 𝜃 of Π and
incrementing the appropriate counters. To understand the computa-
tion of 𝐶(𝑠, 𝑡), consider a reuse byte subsequence 𝛽 = {𝑏𝑖1, . . . , 𝑏 𝑗1}
that corresponds to a reuse request subsequence 𝜃 = {𝑟𝑖, . . . , 𝑟 𝑗}. If
the number of unique bytes in 𝜃 is 𝑠, and the duration of 𝜃 is 𝑡, then
counter 𝐶(𝑠, 𝑡) is incremented 𝑧𝑖 times, where 𝑧𝑖 is the size of request
𝑟𝑖. Thus, the computation accounts for all the bytes of request 𝑟𝑖, i.e.,
all reuse byte sequences of the form 𝛽 = {𝑏𝑖𝑘, . . . , 𝑏 𝑗𝑘}, 1 ≤ 𝑘 ≤ 𝑧𝑖.
By updating counter 𝐶(𝑠, 𝑡) for all possible reuse sequences 𝜃 of Π
we obtain 𝑃𝑟𝑏(𝑠, 𝑡) = 𝐶(𝑠,𝑡)
|Π𝐵 | , where |Π𝐵| is the total number of bytes
in Π𝐵.
The following theorem applies to LRU whose variants are widely
used in many production systems like Akamai [38].
THEOREM 2. Let bHRC(s) be the byte hit rate of trace Π for an
LRU cache of size 𝑠. The bHRC(s) is computed from the bFD of Π
as follows.


𝑡
𝑠′≤𝑠
𝑏𝐻𝑅𝐶(𝑠) =
𝑃𝑟𝑏(𝑠′, 𝑡).
PROOF. Our proof is similar to the proof of Theorem 1 in [50].
Consider a byte reuse sequence 𝛽 = {𝑏𝑖 𝑗 , . . . , 𝑏𝑘𝑙}, where 𝑏𝑖 𝑗 and
𝑏𝑘𝑙 are requests for the same byte. For a cache size 𝑠 running
LRU, the request for the byte 𝑏𝑘𝑙 is a hit if and only if the num-
ber of unique bytes accessed in 𝛽 is less than the cache size 𝑠.
The probability of the occurrence is obtained by the expression
□
𝑏𝐻𝑅𝐶(𝑠) =𝑡𝑠′≤𝑠 𝑃𝑟𝑏(𝑠′, 𝑡).
Time complexity. Using efficient data structures and stack based
algorithms FD and bFD can be computed in O(𝑁 log 𝑚), where 𝑁
is the length of the trace and 𝑚 is the number of unique objects in
the trace [3].
3 Traffic mixer
We describe the component that computes the model of a user-
specified traffic mix from the models of the individual traffic classes.
A traffic mix is specified as a list of traffic classes Γ = {𝜏1, . . . , 𝜏𝑛}
and a weight vector W = {𝑤1, . . . , 𝑤𝑛} that describes the traffic
contribution of each traffic class. The traffic contribution can be
specified using the required request-rate (requests/second) or the
required byte-rate (GBps) for each traffic class. The traffic mixer
uses the footprint descriptor calculus [50] to compute the 𝐹 𝐷𝑚𝑖𝑥
(resp. 𝑏𝐹 𝐷𝑚𝑖𝑥 ), i.e., FD (resp., bFD) of the traffic mix. Further, the
traffic mixer also computes the object size distribution of the traffic
mix.
3.1 Footprint descriptor calculus
2(𝑠, 𝑡), 𝑃𝑎
We will now describe the FD calculus that is described in [50] and
show that it extends to bFD as well. Consider two traces Π1 and Π2
and their respective footprint descriptors 𝐹 𝐷1 = ⟨𝜆1, 𝑃𝑟
1 (𝑠, 𝑡)⟩
and 𝐹 𝐷2 = ⟨𝜆2, 𝑃𝑟
2 (𝑠, 𝑡)⟩. Let Π be the trace that is formed
by interleaving Π1 and Π2 by time. A key observation that facili-
tates the calculus is that for a subsequence 𝜃 of Π, of duration 𝑡 and
unique bytes 𝑠, some 𝑠1 bytes could be from Π1 and the rest 𝑠 − 𝑠1
bytes from Π2, assuming Π1 and Π2 contain disjoint objects (The
disjoint object assumption holds in many common situations, includ-
ing when Π1 and Π2 are different traffic classes). Thus, to compute a
1(𝑠, 𝑡), 𝑃𝑎
descriptor function 𝑃(𝑠|𝑡) for Π from the descriptor functions 𝑃1(𝑠|𝑡)
and 𝑃2(𝑠|𝑡) for Π1 and Π2 respectively, the convolution operator is
used to enumerate and add the probabilities of all possible ways of
obtaining 𝑠1 unique bytes from Π1 and the remaining 𝑠 − 𝑠1 unique
bytes from Π2. Thus,
𝑃(𝑠|𝑡) = 𝑃1(𝑠|𝑡) ∗ 𝑃2(𝑠|𝑡)
𝑆−𝑠1
𝑠1=0
=
𝑃1(𝑠1|𝑡)𝑃2(𝑆 − 𝑠1|𝑡),
where * is the convolution operator. We can see that the same ar-
gument follows for the byte sequence Π𝐵 and hence the footprint
descriptor calculus that works for a FD also works for a bFD. We
will briefly describe the basic operations in the calculus using byte
sequences.
1 and Π𝐵
(i) Addition. Given two byte sequences Π𝐵
2 and their
bFDs, 𝑏𝐹 𝐷1 and 𝑏𝐹 𝐷2, if Π𝐵 represents a sequence with Π𝐵
1 and
Π𝐵
2 interleaved by time, then the addition operator provides the byte
footprint descriptor 𝑏𝐹 𝐷𝑚𝑖𝑥 of the interleaved sequence Π𝐵. By
using the Fourier transform to evaluate the convolution operator, the
addition operator runs in 𝑂(𝑇 𝑆 log 𝑆) time, where T and S are the
number of time and stack distance buckets in 𝑃𝑟𝑏(𝑠, 𝑡).
(ii) Subtraction. Given a byte sequence Π𝐵 and its corresponding