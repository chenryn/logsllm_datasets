the traﬃc when it detects suspicious keywords using the ﬁrst
two protocols. To do so, it embeds the decryption key into
the trapdoor used for pattern matching, leading thus to a
full decryption of the traﬃc. The SP is then able to operate
565full IDS over the clear-text traﬃc, reﬁning the results of the
ﬁrst two protocols.
3.2 BlindBox Limitations
While the BlindBox solution provides valuable contribu-
tions that advance the state of the art on privacy-respectful
intrusion detection, it suﬀers, however, from two main limi-
tations. The ﬁrst one is on scalability, and the second is its
compliance with the market ecosystem for network security
solutions.
The encryption protocol implemented by BlindBox re-
quires the SP to engage with both endpoints for a garbled
circuit evaluation, once for every single HTTPS connection,
and for every single detection rule to be tested on the traf-
ﬁc. In fact, the BlindBox solution leverages the regular SSL
handshake in order to generate a symmetric key for encryp-
tion, which is indeed unique for every single HTTPS connec-
tion. Hence, the SP will need to engage with the sender in
order to obtain a secret key that it uses to deterministically
encrypt each detection rule provided by the security editor.
These rules will be then stored by the SP for DPI purposes
during the entire duration of the HTTPS connection. This
drastically increases the setup time for every single HTTPS
connection, reaching up to 97 seconds according to [25], and
so making it impractical under real-world constraints. The
memory space available at the SP appliance will also need
to grow polynomially according to the number of (a) unique
endpoints to be protected, (b) unique HTTPS connections
for every single endpoint, and (c) unique detection rules
supported by the SP. Clearly this would restrain the us-
age of BlindBox to small network environments, including a
limited number of both endpoints and detection rules.
Second, encrypting the detection rules once for every new
HTTPS connection requires the SP to have direct access to
these rules in clear-text. This is clearly inadequate with the
delicate balance in the security market ecosystem, since the
security editors (SE) will be very reluctant to share their
detection rules with the service providers. Using the Blind-
Box solution, one possibility to address this limitation is for
the SP to engage inline with the SE at each new connection
setup in order for the SE to encrypt the rules on behalf of
the SP. The whole set of encrypted rules will be then de-
livered by the SE to the SP in order to implement the DPI
service. Although this solution seems to be feasible from a
technical standpoint, it will add a huge latency during con-
nection setup because the entire set of encrypted rules will
need to be shared between the SE and SP over the network.
Finally, it is worth noticing that the full IDS functional-
ity claimed by [25] works with an embedded decryption key
which is revealed in case of a match. However, this technique
does not allow the SP to have a full IDS functionality. The
regular expressions are indeed not evaluated on the whole
traﬃc, but only on already-suspicious communications. As
such, it only helps in limiting the number of false positive,
but does not reduce the number of false negative.
The Embark system [17] does not treat these limitations.
It only aims to extend the initial BlindBox solution with
the ability to securely outsource network middleboxes to the
cloud.
3.3 Proposed Solutions
Our system oﬀers to encrypt the malicious patterns used
for detection only once for all the HTTPS connections that
are delivered through the SP. This is a fundamental contri-
bution of this paper compared to BlindBox because of the
following two reasons. Firstly, it drastically decreases the
connection setup time, by several orders of magnitude, since
it will be no longer required for the SP to delay the con-
nection setup until it encrypts the entire set of malicious
patterns used for detection. It also decreases the memory
space required to perform DPI by the SP, being dependent
only on the number of detection rules, but not on the num-
ber of endpoints and/or the number of concurrent HTTPS
connections. Secondly, it enables to outsource the rule en-
cryption to the SE, that will be able to encrypt (a.k.a. to
protect) its detection rules, and then to deliver them only
encrypted to the SP.
Sure one can argue that the use of a same encrypted rule-
set for detection may reveal the equality of matched patterns
across diﬀerent connections. The security provider, by com-
paring the matched rules over a large set of network connec-
tions (similar to brute-force attacks), may be able to recover
some detection patterns, which may partially compromise
the market-compliance property. While such brute-force at-
tacks could be possible at least in theory, they apply both
in the context of encrypted and clear-text network connec-
tions. Therefore, we do not consider them as a limitation to
our solution since they are not inherent to our encryption
protocol. Moreover, our protocol provides stronger privacy
guarantees because the security provider does not even know
the detection patterns it is looking for in the encrypted traf-
ﬁc.
To do so, our solution leverages a Decryptable Search-
able Encryption (DSE) scheme that is based on public-key
cryptography [12]. Our protocol enables the SE to gener-
ate a public-key pair (pkR, skR), and a trapdoor key. The
trapdoor key is used by the SE to encrypt the malicious
detection patterns and to obtain trapdoors. These are fur-
ther sent to the SP in order to apply DPI. Using the same
DSE scheme [12], the sender encrypts the traﬃc using the
public key of the receiver, and the SP performs DPI over
the encrypted traﬃc using the trapdoors generated by the
SE. While the use of a public-key cryptography comes with
an increasing decryption overhead on the receiver, extensive
evaluation performed in section 5 shows that this is a fairly
reasonable price to pay in case of short HTTPS connections,
which is common for most popular web sites on the Internet.
4. OUR DSE SOLUTION
Our solution is based on the so-called Decryptable Search-
able Encryption (DSE) cryptographic tool [12], which is a
pairing-based scheme. In this section, we brieﬂy introduce
bilinear maps and DSE, and then we describe the way we
use the DSE protocol to enable intrusion detection over en-
crypted traﬃc.
4.1 Bilinear Environment
First, let us recall the notion of bilinear environment.
Let G1, G2 and Gt be three ﬁnite multiplicative abelian
groups of large prime order q. Let g1 be a generator of G1
and g2 be a generator of G2. We assume that there exists
an asymmetric bilinear map e : G1 × G2 → Gt, such that for
all a, b ∈ Zq:
1 , gb
1 , gb
2) = 1 iﬀ a = 0 or b = 0,
2. e(ga
1. e(ga
2) = e(g1, g2)ab,
5663. e(·,·) is eﬃciently computable.
In the sequel, the tuple (q, G1, g1, G2, g2, Gt, e(·,·)) is re-
ferred to as a bilinear environment.
4.2 Decryptable Searchable Encryption
Formal deﬁnition. A Decryptable Searchable Encryp-
tion scheme is a public-key encryption with keyword search
(a.k.a. PEKS) with the additional possibility for the owner
of a speciﬁc secret key sk to decrypt the ciphertext. Infor-
mally, the keyword search property states that given a ci-
phertext c and a keyword w, this is feasible to test whether
the ciphertext matches the keyword or not. This ability is
obvious for the owner of the decryption key, but can also be
transferred to anyone under the form of a keyword-speciﬁc
trapdoor T (w). A DSE scheme is composed of the following
procedures.
• KeyGen is the key generation algorithm which takes as
input a security parameter λ and outputs a public key
pk, a decryption private key sk and a trapdoor secret
key tk.
• Enc is the encryption procedure and takes as input a
keyword w and the public key pk. It outputs a cipher-
text c related to w and pk.
• TrapGen is the generation of a trapdoor, which takes
as input a keyword w and the trapdoor key tk and
outputs a trapdoor T (w).
• Test is a testing algorithm. It takes as input a cipher-
text c and a trapdoor T (w) and outputs 1 if c is an
encryption of w and 0 otherwise.
• Dec is the decryption procedure. It takes as input a
It outputs the
ciphertext c and the private key sk.
related keyword w.
As detailed in [12], a DSE scheme should verify a partic-
ular form of indistinguishability against Chosen Ciphertext
Attacks (CCA). This property is related to an experiment
such that given the public key pk, the adversary outputs
two diﬀerent keywords w0 and w1 and, after having ran-
domly chosen a bit b ∈ {0, 1}, the challenger outputs cb as
the ciphertext related to wb. Eventually, the adversary out-
puts a bit b(cid:48) and wins if b(cid:48) = b. Throughout the experiment,
the adversary may send queries w /∈ {w0, w1} to a trapdoor
derivation oracle and queries c (cid:54)= cb to a decryption ora-
cle. We say that a DSE satisﬁes indistinguishability under a
chosen-plaintext attack if for every legitimate adversary, the
advantage to win this experiment is negligible.
A DSE scheme. In [12], the authors propose the following
eﬃcient construction. Let (q, G1, g1, G2, g2, Gt, e(., .)) be a
bilinear environment and let F, G, H be three hash functions
that are each modeled as a random oracle.
• KeyGen(1λ). This procedure randomly chooses x, x(cid:48) ∈
1 . We have sk = x,
1 and y(cid:48) = gx(cid:48)
Zq and computes y = gx
tk = x(cid:48) and pk = (y, y(cid:48)).
• Enc(w, pk). This procedure chooses r ∈ Zq and com-
1, (s1, s2) = G(yr), c2 = s1 ⊕ w, c3 = gs2
putes c1 = gr
1 ,
u = e(y(cid:48)s2 , F (w)) and c4 = H(u) + r (mod q). The
ciphertext is c = (c1, c2, c3, c4).
• TrapGen(w, tk). This procedure outputs the trapdoors
T (w) = F (w)x(cid:48)
.
• Test(c, T (w)). This procedure ﬁrst computes the value
u = e(c3, T (w)) and r = c4−H(u) (mod q). If c1 (cid:54)= gr
1,
it returns 0. Otherwise, it computes s = yr, (s1, s2) =
G(s) and w = c2 ⊕ s1. If c3 (cid:54)= gs2
1 , it returns 0. Oth-
erwise 1 is returned.
• Dec(c, sk). This procedure computes s = cx
1 , (s1, s2) =
1 , it returns ⊥.
G(s) and w = c2 ⊕ s1.
Otherwise, it computes u = e(y(cid:48)s2 , F (w)), r = c4 −
H(u) (mod q) and checks whether c1 = gr
If this
1.
condition is satisﬁed, it returns w. Otherwise ⊥ is
returned.
If c3 (cid:54)= gs2
4.3 Overview
Based on the above DSE tool, we now provide a solution
for detecting a malicious content over an encrypted traﬃc.
For example, in the case of an IDS in charge of ﬁltering out
malicious content, the protocol should be set up in a way
that the Service Provider (SP) can detect malicious content,
and if the traﬃc is not compromised, SP should be able
to forward the encrypted traﬃc to the receiver R without
getting any information.
At ﬁrst, we consider that the traﬃc between a sender S
and a receiver R is encrypted using a DSE (in particular, a
modiﬁed version of the one described in the previous section,
as we will see below). This gives us the main desired prop-
erties: the conﬁdentiality of the traﬃc and the possibility to
detect a malicious traﬃc by using equality tests.
Adequacy to security market. This way, we also obtain
an additional property: the Service Provider (SP) does not
know the searched pattern as it only knows the trapdoor
T (w), and not the keyword w itself. But when considering
the eﬃcient instantiation given in [12], we have to face the
problem that when the Test procedure is successful, it also
permits to output the matching keyword, as one can com-
pute w = c2 ⊕ s1. We then modify the above scheme to
achieve our goal. In our protocol below, we compute c4 as
c4 = H(u) + a (mod q) where a ∈ Z∗
q belongs to the public
key given by SE. Using such trick, there is no way for the
SP to obtain information about the keywords, even when a
match is found, as we will see in security proofs. We are
thus compliant with the current security market, contrary
to the BlindBox solution.
Scalability. To achieve our second goal, we use another
trick which consists in observing that the trapdoor and de-
cryption keys are totally independents in the Furh-Paillier
eﬃcient construction [12]. Then, one can independently
compute the public key y related to the “encryption” phase
and the public key y(cid:48) related to the “test” phase. The con-
sequence is that the Security Editor SE can compute its
own trapdoor key tk = x(cid:48) (and the corresponding public
key y(cid:48) = gx(cid:48)
1 ) without needing to know the decryption key
sk = x (and the corresponding public key y = gx
1 ) of a re-
ceiver. Then, we can manage several key pairs (xi, yi)i such
that xi ∈R Z∗
1 : one for each Receiver Ri. This
way, we easily obtain scalability as the SE only publishes
one single set of trapdoors to permit the SP to detect mali-
cious traﬃc for as many endpoints as it wants. Again, this
is much better than the BlindBox solution, both regarding
q and yi = gxi
567the time complexity of the setup, and the space complexity
for SP.
Overview of the protocol. Our solution BlindIDS-DSE
exploits this double property of DSE to build a deep packet
inspection protocol over encrypted data using the crypto-
graphic blocks mentioned in [12]. Upon receiving or gen-
erating the traﬃc and prior to encryption, the Sender (S)
applies a tokenization algorithm to the traﬃc. There are
two tokenization algorithms that generates diﬀerent perfor-
mances at detection time. The tokenization algorithm pro-
duces ﬁxed-length (window-based tokenization) or variable-
length (delimiter-based) keywords, as in [25].
BlindIDS-DSE protocol is composed of four agents, each
implementing diﬀerent modules acting in the detection sys-
tem. The protocol runs as follows.
• System setup (Setup)
– RG runs the DSE key generation algorithm to gen-
erate the secret trapdoor key skSE, and the related
public key pkSE.
– Independently, each receiver R runs the DSE key
generation protocol in order to generate a public
key pair (pkR, skR).
• Rule generation (RuleGen)
– SE uses the trapdoor generation procedure with
keywords of ﬁxed-length in order to produce trap-
doors T (w) for each keyword w related to attacks.
– SE sends the trapdoors to SP for detection.
• Sending preparation (Send)
– At ﬁrst, SP establishes connection with both S
and R.
– S produces ﬁxed-length tokens from the traﬃc,
and, using the speciﬁc receiver R’s public key, en-
crypts each token to which it appends its position
in the payload (in order for the reverse tokeniza-
tion algorithm to be able to reconstruct the traf-
ﬁc), using the DSE encryption algorithm Enc.
– S sends the encrypted tokens to R.
• Detection (Detect)
SP runs equality tests for each encrypted token and
entries in a tree data structure containing trapdoors.
If there is a match for all keywords in the rule, SP’s
detection module outputs 0, else it outputs 1. Accord-
ingly, SP either drops the packet, or sends the tokens