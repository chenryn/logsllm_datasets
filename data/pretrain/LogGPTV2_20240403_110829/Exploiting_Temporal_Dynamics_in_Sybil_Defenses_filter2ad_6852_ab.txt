responding Sybil defense mechanism. Next, the attacker can
exploit vulnerabilities in the design of systems by changing
its Sybil identities over time, while keeping the total number
of Sybil identities at any instant of time below the detection
threshold. This is easily achieved by deleting an existing
Sybil identity and replacing it with a new Sybil identity.
For higher-level applications that leverage Sybil defenses,
the re-registration attack has two immediate consequences.
• First, these applications cannot enforce secure black-
listing of Sybil identities that behave maliciously. This
is because the re-registration attack can delete the
blacklisted Sybil identity, and replace it with a new
Sybil identity. Existing Sybil defenses do not defend
against this attack as they are designed to provide a
bound on the number of Sybil identities at an instant
of time, while the re-registration attacks preserves this
bound.
• Second, the re-registration attack allows the attacker
to impact application resources/properties by chang-
ing Sybil identities over time. Let us consider the
example of a voting system that validates user iden-
tity at the time of voting. By changing the registered
Sybil identities over time, the attacker can insert a
large number of malicious votes so as to subvert the
voting results.
The above observations highlight how re-registration at-
tacks can impact security properties of higher-layer applica-
tions. In this paper, we observe that such attacks have an
impact on the security of the Sybil defense mechanism itself.
In Section 4, we discuss how the re-registration attack can be
used to disable a key security mechanism in the SybilLimit
protocol, completely breaking its security and allowing the
attacker to insert an unbounded number of Sybil identities
at a single instant in time.
3.1.2 Exploiting Churn in Attack Edges
The second category of attacks aim to exploit churn in at-
tack edges. Given the assumption that the number of attack
edges is bounded, the designers of Sybil defenses have not
considered the the issue of attack edge churn in the security
analysis of their protocols.
In a similar spirit to the re-
registration attack discussed above, we propose to consider
changes in attack edges over time, such that the total num-
ber of attack edges remains bounded at any given instant
of time. However, in contrast to the re-registration attack
which involved addition and deletion of Sybil identities, the
attacker does not fully control the process of obtaining new
attack edges, since an honest user must accept or interact
with a Sybil identity to establish a new edge. Thus, careful
attention is needed to model the capabilities of an attacker
aiming to induce and exploit churn in attack edges (see Sec-
tion 3.2 for a formal description of our dynamic attack edge
model ).
Since our churn model for attack edges ensures that the
total number of attack edges are ﬁxed at any instant of time,
the security guarantees of social Sybil defenses should ide-
ally hold. However, we show in this paper that an attacker
can exploit the dynamic nature of attack edges to compro-
mise the security of a number of Sybil defense mechanisms.
We ﬁnd that Sybil-resilient applications such as the Persea
DHT completely fail against dynamic attack edges, because
the system does not have the capability to revoke resources
granted to an attacker based on an attack edge, even if the
attack edge no longer exists. This allows an attacker with
limited resources/attack edges to increase its inﬂuence in the
system over time by changing its attack edges. We will also
show that a number of protocols that rely on the knowledge
of a trusted entity in the system (such as SybilInfer and
SybilRank) are vulnerable to attacks where over time, the
attacker can move its attack edges closer to the honest trust
seed. Finally, such attacks also impact the design of Sybil-
resilient messaging applications such as Ostra, in which an
807attacker can exploit system design and dynamic attack edges
to deny service to honest users.
3.1.3 Exploiting Churn in Honest Region
The third category of attacks aim to exploit natural churn
in the honest social network. Social networks are inherently
dynamic, where new nodes and edges are formed frequently,
and sometimes, existing nodes and edges get deleted. We
note that most Sybil defenses should use interaction graphs,
in which social trust edges are based on interactions among
users. Relying only on binary friendship relationships is
vulnerable to the attacker gaining many attack edges due
to high rates of users accepting friendship requests from
strangers [34, 6]. Prior work has observed, however, that
the frequency of churn among existing edges is greater for
interaction graphs than basic friendship graphs [31].
While the attacker may not control the rate or timings
of churn in the honest social region, we ﬁnd that system
designers have not explicitly considered these issues in de-
signing their protocols. Churn in the honest social region
can lead to changes in the protocol state; such changes are
often left unspeciﬁed by the system designers, and have seri-
ous consequences for system security. We will uncover such
a vulnerability in the design of the SybilLimit protocol, al-
lowing the attacker to compromise system security.
3.2 Temporal Attack Model
3.2.1 Attacker capabilities
Based on the above discussion, we note that the attacker
can actively leverage temporal dynamics, by: (1) inducing
churn in the Sybil identities by deleting existing ones and in-
troducing new ones, and (2) inducing churn among the edges
connecting the Sybil identies by deleting existing edges and
creating new edges. Since the Sybil region is completely
controlled by the attacker, we do not enforce any rate limit
on this exploitation of churn in Sybil region. The attacker
can also passively leverage temporal dynamics by exploit-
ing churn in honest region, and monitoring changes in the
protocol state. For the attack edges churn, the capability
of the attacker is bounded by the basic assumption of social
Sybil defense, i.e. a bounded number of attack edges, which
is also inspired by the use of interaction graphs. Thus, we
note that the attacker cannot create an arbitrary number
of attack edges. Within the given bound, the attacker can
leverage churn in attack edges, by intentionally deleting
some existing edges (e.g. letting the interactions lapse) and
creating new attack edges. In order to do this, the attacker
would need to recollect and reuse its contrained resources for
interactions with honest users, which takes certain amount
of time. Thus, the attacker cannot regain new attack edges
immediately after losing old ones.
3.2.2 Dynamic attack edges model
Motivated by the use of interaction graphs in prior work [31]
and the idea of exploiting churn in attack edges, we formalize
our dynamic attack edges model as follows.
Suppose that the attacker has a recurring budget of $R
per unit time, and that it costs $E per unit time to main-
tain a trust relationship. An attack edge with a given target
user can be maintained by posting messages that generate
responses or comments from the target user, chatting with
the target user, or otherwise inducing two-way communi-
cation that the system could use to label the edge as an
active social relationship. The cost $E thus depends on the
amount of interaction required for maintaining an attack
edge, as well as the cost of human-based services or running
intelligent chatbots for getting regular two-way communica-
tion with users. The attacker initially leverages his budget
resources to obtain g = R
E attack edges.
Under this model, the number of attack edges at any in-
stant of time remains bounded (by R/E). Our temporal
attacks exploit the fact that the interaction graph model
allows the attacker to change the entities it interacts with
over time, i.e., attack edges can be dynamic. The attacker
can achieve this by utilizing its recurring budget. For exam-
ple, in the next time instant, the attacker could allocate his
budget to establish new trust relationships while foregoing
previous trust relationships.
Studies of Sybil attacks in online social networks have
shown that although many users do accept friendship re-
quests from strangers, a signiﬁcant fraction of users do not [6].
We thus further constrain the attacker by introducing a pa-
rameter δ to denote the fraction of users that never establish
a trust relationship with an attacker. Further, attack edges
might not form immediately upon demand. We use p to
denote the maximum rate at which the attacker can obtain
new attack edges (at the cost of previous attack edges).
4. EXPLOITING TEMPORAL DYNAMICS
IN SYBILLIMIT
In this section, we ﬁrst introduce the SybilLimit proto-
col [35], and then present our novel temporal attacks that
allow an adversary to break SybilLimit’s security guaran-
tees. In particular, we show that an adversary can eventu-
ally register an unbounded number of Sybil identities in the
SybilLimit protocol (at a single instant in time).
4.1 SybilLimit Background
SybilLimit is a decentralized protocol that defends against
the Sybil attack. The goal of the protocol is for an honest
veriﬁer node v to determine whether a suspect node s is an
honest node or a Sybil node.
Random routes and tails: SybilLimit deﬁnes a primitive
called random route that operates as follows. Each user
(node) in the social graph ﬁrst constructs a permutation
map of its edges, in which each edge is mapped to another
edge pseudo-randomly. Then a random route of length l is
constructed as a sequence of edges starting from a selected
starting edge and iteratively applying the permutation map
given by the current edge’s terminating user. For example, a
node A with neighbors B, C, D may have the following per-
mutation map: AB → AC, AC → AD, and AD → AB. If
a random route reaches node A via edge AB, then accord-
ing to the permutation map, the route traverses edge AC
to node C, and the process continues with C’s permutation
map. The terminating edge of the random route is deﬁned
as the tail of the random route.
√
Protocol state: In SybilLimit, each user maintains O(
m)
independent permutation maps (m is the number of edges in
the honest region) and performs r = O(
m) random routes
of length w = O(log n) (the mixing time of honest region);
the i’th random route leverages the i’th permutation map
for all nodes in the graph. Each user locally generates a
public-private key pair and registers the public key at the
√
808√
terminal edges of the random routes (tails). SybilLimit does
not assume knowledge of m; the value of r = O(
m) is
estimated by the protocol using a benchmarking technique;
please see [35] for more details.
Veriﬁcation protocol: The key idea in SybilLimit is that
the terminal edge of a random route starting from the honest
region is more likely to be within the honest region than in
the Sybil region, given that the number of attack edges g is
bounded. This intuition motivates the following procedure
used by a veriﬁer node v to validate the identity of a suspect
node s, if s wants to send some network traﬃc to v.
√
• Intersection Condition: The r = O(
m) tails of the
random routes of the veriﬁer and the suspect must have
an intersection (using the Birthday paradox). Veriﬁer
nodes query the suspect for a list of its tails, contacts
the tails to validate that the suspect is registered at
those tails, and computes intersection with its own
tails.
If there is no intersection, the suspect is clas-
siﬁed as a Sybil node. If there is an intersection, then
the following Balance condition is checked.
• Balance Condition: A tail with a malicious terminal
edge is known as a malicious tail. To prevent a ma-
licious tail from validating an unbounded number of
Sybil nodes, a veriﬁer maintains a counter value for
each of its tails that corresponds to how many suspect
identities have been validated by that tail. The key
idea is to keep the counter values for diﬀerent tails of
a user roughly uniform. If the acceptance of a suspect
identity results in the counter values being unbalanced,
then the suspect is classiﬁed as a Sybil.
Security claim: SybilLimit claims to provide the following
security guarantee: given an adversary with g = O( n
log n )
attack edges to honest users, the number of Sybil identities
in the system is bounded by g · w (i.e., the adversary can
insert w Sybil identities per attack edge).
4.2 Temporal Attacks
We ﬁnd that the complexity of decentralized Sybil de-
fenses such as SybilLimit creates opportunities for temporal
attacks. We now present our temporal attacks on Sybil-
Limit: (a) a counter elevation attack that completely breaks
SybilLimit’s security guarantees, and (b) an induced social
churn attack that also impacts SybilLimit security.
Re-registration attacks in SybilLimit: SybilLimit en-
sures that an adversary is limited in the number of edges
(tails) where he can register its Sybil identities. The inter-
section condition ensures that the limited registration slots
translates into a limited number of Sybil identities that can
be validated by honest nodes. However, SybilLimit is vul-
nerable to the re-registration attack discussed previously,
since it allows the initiator of the random route to overwrite
the public key registered at its tail. Thus, while the num-
ber of Sybils is bounded at any instant of time, over time,
the adversary can use these limited registration slots multi-
ple times to insert an unbounded number of identities (by
revoking previously registered Sybil identities and inserting
new Sybil identities in its place).
Counter elevation attack: We now present the counter
elevation attack, which leverages the inter-play between the
re-registration attack and the SybilLimit balance condition.