1）OEM抽象层（OAL）
OEM抽象层又称OEM适配层（OAL，OEMAdaptationLayer）。OAL是整个OEM层的
主体，包含了高度硬件相关的代码，主要负责WindowsCE与硬件的通信。它与CPU、中断、
内存、时钟和调试口等核心设备相关，用于屏蔽CPU平台的细节，保证操作系统内核的可移
植性。OAL的代码在物理上是内核的一部分，最终经过编译链接，成为内核的一部分。
题外话：我们平时使用的桌面版Windows操作系统与PC的硬件之间也存在一个类似
的抽象层，称之为HAL（HardwareAbstractionLayer）。
2）引导程序（BootLoader）
经常玩嵌入式的朋友对BootLoader肯定不会陌生，它其实就是一小段引导程序，主要功能
是初始化硬件，加载操作系统映像（OSImage）到内存，然后跳转到操作系统代码去执行。在这
它的主要任务就是将WindowsCE内核加载到手机硬件系统中并开始启动操作系统的执行。
3）配置文件
配置文件顾名思义，就是一些包含配置信息的文本文件。这些配置信息通常与操作系统映
像或源代码有关，映像配置文件用来指明最终操作系统运行时映像的创建方式，而源代码配置
可以用来告诉编译系统如何编译某些源代码。
206
---
## Page 232
第
4）设备驱动
7
设备驱动是对物理或虚拟设备功能的软件抽象，是操作系统与外部设备或虚拟设备之间的
章
桥梁，应用程序只有通过驱动程序接口才能对物理设备或虚拟设备进行操作。在实际应用中，
手
设备驱动程序的种类非常多，几乎每一种驱动都有不同的接口，例如电池驱动、显卡驱动、USB
机
驱动、文件系统等等。
里
（3）操作系统层
的
操作系统层是WindowsCE的核心层，既要为下层的OEM层提供接口和服务，又要为上
缓
冲
层的应用层提供应用程序编程接口和服务。在这层中还集合了WindowsCE的进程管理、线程
区
管理、处理机管理、调度、物理内存和虚拟内存管理、文件系统、设备管理等功能。这些功能
溢
又是靠以下模块实现的。
出
1)CoreDLL
CoreDLL是最基本的操作系统模块，正如其名，CoreDLL不是一个可执行文件，而是一个
动态键接库。在WindowsCE中所有的应用程序都不能直接与操作系统或硬件打交道，如果应
用程序希望访问WindowsCE所提供的服务，只能通过CoreDLL进行。CoreDLL的主要功能
是负责应用程序与WindowsCE的通信以及完成WindowsCE的系统调用（SystemCall）。系统
调用是操作系统向应用程序提供的服务，一般以函数的形式提供，这些函数通常在应用程序之
外的进程中实现。系统调用过程如图7.1.2所示。
应用程序
DLL楼口
函数调用
Wlm32API
本地函数
进程接口
进程切换
文件系统
GWES
设备管理器
KAER
中断处理
新
硬件
内容银文件
内
中断处理
中
图7.1.2WindowsCE的系统调用
207
---
## Page 233
0
day
接下来我们来看看系统调用的详细过程。
安
第一步，应用程序进行系统调用时，直接调用的是CoreDLL.dll中的一个包装（Wrapper）
全
函数，这个包装函数为真正的系统调用准备所需要的参数。
：
第二步，CoreDLL会抛出一个异常，NK.EXE捕捉到这个异常后触发中断，这样进行系统
软
调用的应用程序进程就挂起了，执行转入NK.EXE。
件
漏
第三步，NK.EXE会根据系统调用的不同，找到具体实现该系统调用的进程，进而转入该
洞
进程继续执行。
分
第四步，执行结束后应用程序从CoreDLL.dll的调用处返回继续执行。
析
技
2）内核
术
内核是WindowsCE的核心，在WindowsCE中内核表现为Nk.exe进程。作为核心进程，
（第
它实现了Win32API中的进程创建加载、线程调度、中断处理和内存管理等核心功能。
Nk.exe由Nk.lib与OAL.lib组成。Nk.lib是微软提供的，代码与CPU指令体系结构相关而
2
与具体的外设无关，这样设计可以做到使OAL尽可能的小。OAL.lib就是OEM层中的OAL
版
代码编译后的输出。
3）图形窗口与事件系统
图形窗口与事件系统（GWES，GraphicalWindowingandEventsystem）包括图形设备接口、
窗口管理器和事件管理器。它是WindowsCE系统中最为高度组件化的模块之一，由USER和
GDI两部分组成，其中USER部分负责处理消息、用户输入（鼠标、键盘、触摸屏等）等任务，
GDI部分负责垃圾图像的显示输出等任务。
GWES在WindowsCE系统中表现为GWES.exe进程。GWES.exe在WindowsCE中的功
能基本上是桌面版Windows中USER32和GDI32功能的集合。
4）对象存储模块
对象存储是WindowsCE保存应用程序及其相关数据的存储方式，其内容包括文件系统、
数据库和注册表三部分。文件系统包括RAM和ROM两部分，为应用程序提供永久存储服务；
数据库是对流式文件的进一步抽象，它提供了结构化的数据存储，并以记录方式保存数据：注
册表保存了系统和应用程序的配置信息，其结构类似于我们平时使用的桌面版Windows的注册
表结构。系统中负责对象存储的进程是Filesys.exe。
5）设备管理模块
WindowsCE中的设备管理器表现为Device.exe进程。它负责基本的设备列表管理、即插
即用管理、I/O资源分配管理以及驱动的记载、卸载、跟踪。它还要管理所有不被GWES.EXE
管理的驱动程序，同时向系统提供所有关于驱动的API的实现。
6）通信与网络模块
通信服务与网络模块为WindowsCE系统提供有线或者无线的通信能力，使CE能够与其
他设备进行通信。为了实现这一功能，通信与网络模块提供了网络驱动接口、通信协议及网络
应用程序编程接口。
7）多媒体模块
现在的手机不再局限于通话这一基本功能，越来越多的手机具备了音频、视频播放能力，
208
---
## Page 234
第
在WindowsMobile中实现这一功能的就是多媒体模块。它提供了丰富的多媒体编程所需的API
7
和多媒体文件解码器，让用户可以体验丰富多彩的多媒体。
章
（4）应用层
手
应用层是应用程序的集合，包含了WindowsCE应用程序、客户应用程序、互联网服务、
机
用户接口等模块。在这一层中程序员编写的程序通过调用Win32API来获得操作系统服务，但
里
在编程时需要注意，由于硬件资源等限制某些在桌面版Windows中存在的API在这是不存在
的
的，WindowsCE下的API是桌面版本Win32API的-一个子集：当然WindowsCE还有许多特
缓
冲
有的API，例如CE数据库。这就需要大家在实际使用中慢慢的积累了。
区
溢
7.1.3WindowsMobile的内存管理
出
既然要讨论WindowsMobile下的溢出问题，那么大家就必须对它的内存管理机制有所了
解。虽然手机的内部可用存储都比较小，但WindowsMobile仍然具备了一套完善的内存管理
机制。WindowsMobile的内核WindowsCE是一个32位的操作系统，因此它具备32位的寻址
能力。WindowsMobile几乎实现了所有桌面版Windows的内存管理功能，包括我们熟悉的虚
拟内存、使用堆栈等功能。同时还提供了类似桌面版Windows内存管理API函数，并针对嵌
入式的特点对内存管理进行了特定的优化和改进。
与我们平时对内存的理解不同，WindowsMobile上的内存不仅仅是RAM，还包括ROM、
FlashMemory等物理存储设备。其中RAM为操作系统和应用程序提供运行和缓冲空间，由于
备用电池的存在，RAM里边的内容在手机电池没电后仍然可以保存：ROM就像我们的硬盘，
数据永久保存，一般用来存放操作系统及与系统绑定的程序：FlashMemory是ROM的替代品，
既可以擦写，又可以永久保存，可以做为扩展存储设备。
WindowsMobile是一个保护模式的操作系统，程序不能通过物理地址直接访问物理内存，
必须通过虚拟内存才可以。由于WindowsMobile是32位的操作系统，寻址能力为32位，所
以WindowsMobile的虚拟寻址能力可以达到4GB，这与32位版的桌面版系统是一致的。但是
其中也有着不同，在桌面版的Windows中每个进程都具有独立的4GB虚拟地址空间，而在
WindowsMobile中所有的进程共享一个4GB的虚拟地址空间。
而且这4GB的虚拟地址空间又被划分为两个2GB的区域：高址部分供系统内核使用：低
址部分供用户使用，应用程序申请的空间都是从低址的部分划分。如图7.1.3所示。
用户空间部分又被划分为64个Slot，每个Slot占32MB的空间。其中Slot0到Slot32用
于存放进程的虚拟地址空间，每个进程占用一个Slot，这也就是WindowsMobile最多支持32
个进程的由来。但是由于Slot0用于映射当前处理器执行的进程，Slot1通常由XIP的DLL占
用，一些其他必须的进程也需要占用Slot，所以在实际使用中用户可用的进程数是少于32个的。
用户空间中的SIot33到Slot63是由所有进程共享的，由于每个进程只有32MB的虚拟地址
空间，如果应用程序希望使用更多的虚拟内存，就可以在这个范围内申请。这个范围包括对象存
储和内存映射文件。需要注意的是Slot63是用来存放纯资源DLL，如果某个DLL里面只有资源
信息（例如图标，位图，菜单，对话框，字符串表等等），这个DLL就会被加载到这个空间内。
从0x80000000开始的高址空间就是WindowsMobile系统内核的专属领域了。其中虚拟地
209
---
## Page 235
day安全"
0
址0x80000000到0x9FFFFFFF一段用来静态映射所有的物理地址。也就是说系统会把所有的
物理内存一比一地映射到这段虚拟地址上。这段地址一共有512MB，这也就是WindowsMobile
最大支持512M物理地址的由来。
软
OxFFFFFFFF
0x7FFFFFFF
件漏
内核池比：
Slot63：资源映射
KPAGE、Trap.Aroas#
0x7E000000
洞
OxE0000000
Slot33~62
分析技
保团
2G
对象存储
内楼
内存映射文件
0xC4000000
空间
Slot97:NK.exe
术
OxC2000000
0x42000000
（第
OxC0000000
2G
Slot2~32
2
用户
进程
版
空间
无色春
0x04000000
OxA0000000
Slot1XIP DLLS
卧为映射出报地址
0x02000000
有级存
Slot0当进程
0x80000000
00000000X0
图7.1.3
WindowsMobile4G的内存地址空间
物理内存
虚拟内存
OxFFFFFFFF
内核空间
OxC0000000
512MB
无缓存
OxA0000000
32MRON
512MB
32MROM
有缓存
0x80000000
0x04000000
用户空间
2GB
0x00000000
0x00000000
图7.1.4物理内存的映射
0xA0000000到0xBFFFFFFF会重复映射所有的物理内存，如图7.1.4所示。需要注意的是
虽然这一段也是物理内存的映射，但是它与0x80000000处映射不同处在于这一段的映射是有
缓冲的。什么意思？通常缓冲可以提高系统的IO效率，但是对于一些OAL或者Bootloader
210
---
## Page 236
第
中的设备驱动程序来说，使用缓冲有可能会造成灾难性后果，因为缓冲有可能会更改我们对设
7
备的写操作顺序。因此在驱动程序中我们如果需要直接访问设备IO或寄存器，这也就是无缓
章
存映射存在的意义。
手
OxC2000000到0xC3FFFFFF是Slot97，为核心进程NK.exe专用的。0xE0000000到
机
OxFFFFFFFF一段最高的地址是内核使用的地址空间。对于不同的处理器体系结构这里保存着
里
不同的东西。通常会放置一些供虚拟内存用的页表、中断向量表等等内核使用的数据结构。
的
现在我们对WindowsMobile的内存管理机制有了一个整体的认识，那么每个进程里面的
缓
冲
内存又是什么样的呢？是不是和桌面版Windows的一致呢？接下来我们来看看进程里的内存。
区
前面我们说过Slot0为当前执行进程，所以我们就以它为例来看一下进程里面虚拟地址空
溢
间的使用情况。在进入SlotO之前我们再来普及一个小知识，WindowsMobile中虚拟内存的申
出
请最小单位为64KB，也就是说每次申请到的虚拟内存大小都会是64KB的整数倍。这种取整
间，那么对于32MB的Slot来说每个进程只能加载512个DLL。这就是为什么说WindowsMobile
中每个进程最多加载512的DLL了。
现在我们就在Slot0来看看一个进程中虚拟内存的使用情况。在一个进程的32MB虚拟地
址空间中，最低的64KB地址，即0x00000000到0x00010000为保留区域，在这64KB之上是
进程的代码和数据，然后是一些堆和栈。
从空间的高址向下存放的是进程加载的ROMDLL的读写数据以及RAMDLL的数据：中
问部分就是自由空间供进程再次申请空间使用，值的注意的是这个空间是从低址向高址增长
的，这与桌面版Windows栈的增长方向是不同的。具体分布情况如图7.1.5所示。
32MB进程空间
0x1FFFFFFF
ROMDLLS读/写数据
RAMDLL数据
ROMDLL代码和数据
自由虚拟空间
进程VirtualAllocO调用
栈
堆
进程代码+数据
64KB保留区域
0x00010000
00000000X0
图7.1.532MB进程空间内分布
211
---
## Page 237
0
day
7.2ARM简介
安
全
介绍完WindowsMobile后我们来介绍一下与手机溢出密切相关的另外一部分ARM。由于
ARM体系庞大，在这我们不可能一一介绍，我们只针对和溢出相关部分进行简单的介绍。如
软
件
果大家对ARM感兴趣的话可以查阅相关书籍。
漏
洞
7.2.1ARM是什么
分
析
ARM（AdvancedRISCMachines），既可以认为是一个公司的名字，也可以认为是对一类
技
微处理器的通称，还可以认为是一种技术的名字。
术
1991年ARM公司成立于英国剑桥，主要出售芯片设计技术的授权。目前，采用ARM技
（第
术知识产权（IP）核的微处理器，即我们通常所说的ARM微处理器，已遍及工业控制、消费
2
类电子产品、通信系统、网络系统、无线系统等各类产品市场，基于ARM技术的微处理器应
版
用约占据了32位RISC微处理器75%以上的市场份额，ARM技术正在逐步渗入到我们生活
的各个方面。
ARM公司是专门从事基于RISC技术芯片设计开发的公司，作为知识产权供应商，本身
不直接从事芯片生产，靠转让设计许可由合作公司生产各具特色的芯片，世界各大半导体生产
都使用ARM公司的授权，因此既使得ARM技术获得更多的第三方工具、制造、软件的支持，
又使整个系统成本降低，使产品更容易进入市场被消费者所接受，更具有竞争力。
7.2.2ARM寄存器结构
ARM处理器共有37个寄存器，被分为若干个组，这些寄存器包括：
·31个通用寄存器，包括分组寄存器、未分组寄存器和程序计数器（PC指针），均为32
位的寄存器。
·6个状态寄存器，用以标识CPU的工作状态及程序的运行状态，均为32位，目前只
使用了其中的一部分。
同时，ARM处理器文有7种不同的处理器模式，在每一种处理器模式下均有一组相应的
寄存器与之对应。即在任意一种处理器模式下，可访问的寄存器包括15个通用寄存器（R0~
R14）、一至二个状态寄存器和程序计数器（PC指针）。在所有的寄存器中，有些是在7种处
理器模式下共用的同一个物理寄存器，而有些寄存器则是在不同的处理器模式下有不同的物理