troduces the experimental platform we have developed
in order to carry out attacks in real-life deployments of
car immobilizer systems.
In particular, we have built
a portable and highly ﬂexible setup allowing us to i)
eavesdrop communications between Hitag2 readers and
transponders, ii) emulate a Hitag2 reader, and iii) emu-
late a Hitag2 transponder. Figure 5 depicts our setup in
the setting of eavesdropping communications between a
reader and a transponder.
The central element of our experimental platform
is the Proxmark III board3, originally developed by
Jonathan Westhues4, and designed to work with RFID
3http://www.proxmark.org
4http://cq.cx/proxmark3.pl
Figure 5: Experimental setup for eavesdropping
transponders ranging from low frequency (125 kHz) to
high frequency (13.56 MHz). The Proxmark III board
cost around 200 USD and comes equipped with a FPGA
and an ARM microcontroller. Low-level RF operations
such as modulation/demodulation are carried out by the
FPGA, whereas high-level operations such as encod-
ing/decoding of frames are performed in the microcon-
troller.
Hitag2 tags are low frequency transponders used in
proximity area RFID applications [36]. Communication
from reader to transponder is encoded using Binary Pulse
Length Modulation (BPLM), whereas from transponder
to reader it can be encoded using either Manchester or
Biphase coding.
In order to eavesdrop, generate, and
read communications from reader to transponder, we ad-
ded support for encoding/decoding BPLM signals, see
Figure 6.
Figure 6: Reader modulation of a read command
For the transponder side, we have also added the func-
tionalities to support the Manchester coding scheme as
shown in Figure 7.
Figure 7: Communication from transponder to reader
4
3 Hitag2
This section describes Hitag2 in detail. Most of this in-
formation is in the public domain. We ﬁrst describe the
Hitag2 functionality, memory structure, and communic-
ation protocols, this comes mostly from the product data
sheet [36]. Then we describe the cipher and the authen-
tication protocol which was previously reverse engin-
eered in [47]. In Section 3.7 we show that it is possible
to run the cipher backwards which we use in our attacks.
We ﬁrst need to introduce some notation. Let F2 =
{0, 1} the ﬁeld of two elements (or the set of Booleans).
The symbol ⊕ denotes exclusive-or (XOR) and 0n de-
notes a bitstring of n zero-bits. Given two bitstrings x and
y, xy denotes their concatenation. x denotes the bitwise
complement of x. We write yi to denote the i-th bit of y.
For example, given the bitstring y = 0x03, y0 = y1 = 0
and y6 = y7 = 1. We denote encryptions by {−}.
3.1 Functionality
Access to the Hitag2 memory contents is determined by
pre-conﬁgured security policies. Hitag2 transponders of-
fer up to three different modes of operation:
1. In public mode the contents of the user data pages
are simply broadcast by the transponder once it is
powered up.
2. In password mode reader and transponder authen-
ticate each other by interchanging their passwords.
Communication is carried out in the clear, therefore
this authentication procedure is vulnerable to replay
attacks.
3. In crypto mode the reader and the transponder per-
form a mutual authentication by means of a 48-bit
shared key. Communication between reader and
transponder is encrypted using a proprietary stream
cipher. This mode is used in car immobilizer sys-
tems and will be the focus of this paper.
3.2 Memory
Hitag2 transponders have a total of 256 bits of non-
volatile memory (EEPROM) organized in 8 blocks of
4 bytes each. Figure 8 illustrates the memory contents
of a transponder conﬁgured in crypto mode. Block 0
stores the read-only transponder identiﬁer; the secret key
is stored in blocks 1 and 2; the password and conﬁgur-
ation bits in block 3; blocks 4 till 7 store user deﬁned
memory. Access to any of the memory blocks in crypto
mode is only granted to a reader after a successful mutual
authentication.
Block
Contents
0
1
2
3
transponder identiﬁer id
secret key low k0 . . . k31
secret key high k32 . . . k47 — reserved
conﬁguration — password
4 − 7
user deﬁned memory
Figure 8: Hitag2 memory map in crypto mode [36]
3.3 Communication
The communication protocol between the reader and
transponder is based on the master-slave principle. The
reader sends a command to the transponder, which then
responds after a predeﬁned period of time. There are ﬁve
different commands: authenticate, read, read, write and
halt. As shown in Figure 9, the authenticate command
has a ﬁxed length of 5 bits, whereas the others have a
length of at least 10 bits. Optionally, these 10 bits can
be extended with a redundancy message of size multiple
of 5 bits. A redundancy message is composed by the
bit-complement of the last ﬁve bits of the command. Ac-
cording to the datasheet [36] this feature is introduced to
“achieve a higher conﬁdence level”.
In crypto mode the transponder starts in a halted state
and is activated by the authenticate command. After a
successful authentication, the transponder enters the act-
ive state in which it only accepts active commands which
are encrypted. Every encrypted bit that is transferred
consists of a plaintext bit XOR-ed with one bit of the
keystream. The active commands have a 3-bit argument
n which represents the offset (block number) in memory.
From this point we address Hitag2 active commands by
referring to commands and explicitly mention authentic-
ation otherwise.
Command
authenticate 11000
Bits
read
read
write
halt
11n0n1n200n0n1n2 . . .
01n0n1n210n0n1n2 . . .
10n0n1n201n0n1n2 . . .
00n0n1n211n0n1n2 . . .
State
halted
active
active
active
active
Figure 9: Hitag2 commands using block number n
Next we deﬁne the function cmd which constructs a
bit string that represents a command c on block n with r
redundancy messages.
Deﬁnition 3.1. Let c be the ﬁrst 2-bit command as
deﬁned in Figure 9, n be a 3-bit memory block number
5
and r be the number of redundancy messages. Then, the
function cmd : F2
is deﬁned by
2 × N → F(10+5r)
2
2 × F3
cmd(c,n,0) = cncn
cmd(c,n,r + 1) =( cmd(c,n,r)cn,
cmd(c,n,r)cn, otherwise.
r is odd;
For example, the command to read block 0 with two re-
dundancy messages results in the following bit string.
cmd(11,0,2) = 11000 00111 11000 00111
The encrypted messages between reader and transponder
are transmitted without any parity bits. The transponder
response always starts with a preﬁx of ﬁve ones, see Fig-
ure 10. In the remainder of this paper we will omit this
preﬁx. A typical forward and backwards communication
takes about 12 ms.
{11000001111100000111}
−−−−−−−−−−−−−−−−−−−→
11111{id0 . . . id31}
←−−−−−−−−−−−−−−−−−−−
Figure 10: Message ﬂow for reading memory block 0
3.4 Cipher
In crypto mode, the communication between transponder
and reader (after a sucessful authentication) is encrypted
with the Hitag2 stream cipher. This cipher has been re-
verse engineered in [47]. The cipher consists of a 48-bit
linear feedback shift register (LFSR) and a non-linear ﬁl-
ter function f . Each clock tick, twenty bits of the LFSR
are put through the ﬁlter function, generating one bit of
keystream. Then the LFSR shifts one bit to the left, us-
ing the generating polynomial to generate a new bit on
the right. See Figure 11 for a schematic representation.
Deﬁnition 3.2. The feedback function L: F48
2 → F2 is
deﬁned by L(x0 . . .x47) := x0 ⊕ x2 ⊕ x3 ⊕ x6 ⊕ x7 ⊕ x8 ⊕
x16 ⊕ x22 ⊕ x23 ⊕ x26 ⊕ x30 ⊕ x41 ⊕ x42 ⊕ x43 ⊕ x46 ⊕ x47.
The ﬁlter function f consists of three different circuits
fa, fb and fc which output one bit each. The circuits fa
and fb are employed more than once, using a total of
twenty input bits from the LFSR. Their resulting bits are
used as input for fc. The circuits are represented by three
boolean tables that contain the resulting bit for each in-
put.
Deﬁnition 3.3 (Filter function). The ﬁlter function
f : F48
2 → F2 is deﬁned by
f (x0 . . . x47) = fc( fa(x2x3x5x6), fb(x8x12x14x15),
fb(x17x21x23x26), fb(x28x29x31x33),
fa(x34x43x44x46)),
where fa, fb : F4
2 → F2 are
2 → F2 and fc : F5
fa(i) = (0xA63C)i
fb(i) = (0xA770)i
fc(i) = (0xD949CBB0)i.
For future reference, note that each of the building blocks
of f (and hence f itself) has the property that it outputs
zero for half of the possible inputs (respectively one).
Remark 3.4 (Cipher schematic). Figure 11 is different
from the schematic that was introduced by [47] and later
used by [14, 19, 44, 45]. The input bits of the ﬁlter func-
tion in Figure 11 are shifted by one with respect to those
of [47]. The ﬁlter function in the old schematic repres-
ents a keystream bit at the previous state f (xi−1 . . . xi+46),
while the one in Figure 11 represents a keystream bit of
the current state f (xi . . .xi+47). Furthermore, we have
adapted the boolean tables to be consistent with our
notation.
3.5 Authentication protocol
The authentication protocol used in Hitag2 in crypto
mode,
reversed engineered and published online in
2007 [47], is depicted in Figure 12. The reader starts the
communication by sending an authenticate command,
to which the transponder answers by sending its identi-
ﬁer id. From this point on, communication is encryp-
ted, i.e., XOR-ed with the keystream. The reader re-
sponds with its encrypted challenge nR and the answer
aR = 0xFFFFFFFF also encrypted to prove knowledge
of the key; the transponder ﬁnishes with its encrypted
answer aT (corresponding to block 3 in Fig. 8) to the
challenge of the reader.
authenticate
−−−−−−−−−−−−−−−−−−−→
←−−−−−−−−−−−−−−−−−−−
id
{nR}{aR}
{aT }
−−−−−−−−−−−−−−−−−−−→
←−−−−−−−−−−−−−−−−−−−
Figure 12: Hitag2 authentication protocol
During the authentication protocol, the internal state
of the stream cipher is initialized. The initial state con-
sists of the 32-bits identiﬁer concatenated with the ﬁrst
16 bits of the key. Then reader nonce nR XORed with the
last 32 bits of the key is shifted in. During initialization,
the LFSR feedback is disabled. Since communication is
encrypted from nR onwards, the encryption of the later
bits of nR are inﬂuenced by its earlier bits. Authentica-
tion is achieved by reaching the same internal state of the
cipher after shifting in nR.
6
0
1
2
3
4
5
6
7
8
9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
⊕
fa = 0xA63C
fb = 0xA770
fb = 0xA770
fb = 0xA770
fa = 0xA63C
fc = 0xD949CBB0
keystream
Figure 11: Structure of the Hitag2 stream cipher, based on [47]
3.6 Cipher Initialization
The following precisely deﬁnes the initialization of the
cipher and the generation of the LFSR-stream a0a1 . . .
and the keystream b0b1 . . ..
Deﬁnition 3.5. Given a key k = k0 . . . k47 ∈ F48
2 , an
identiﬁer id = id0 . . . id31 ∈ F32
2 , a reader nonce nR =
nR0 . . . nR31 ∈ F32
2 , a reader answer aR = aR0 . . . aR31 ∈
2 , and a transponder answer aT = aT0 . . . aT31 ∈ F32
F32
2 ,
is a i :=
the internal state of
ai . . . a47+i ∈ F48
time i
2 . Here the ai ∈ F2 are given by
the cipher at
ai := idi
a32+i := ki
a48+i := k16+i ⊕ nRi
a80+i := L(a32+i . . . a79+i)
∀i ∈ [0,31]
∀i ∈ [0,15]
∀i ∈ [0,31]
∀i ∈ N .
Furthermore, we deﬁne the keystream bit bi ∈ F2 at time
i by
bi := f (ai . . . a47+i)
∀i ∈ N .
Deﬁne {nR}, {aR}i, {aT }i ∈ F2 by
{nR}i := nRi ⊕ bi
{aR}i := aRi ⊕ b32+i
{aT }i := aTi ⊕ b64+i
∀i ∈ [0,31]
∀i ∈ [0,31]
∀i ∈ [0,31].
Note that the ai, a i, bi, {nR}i, {aR}i, and {aT }i are form-
ally functions of k, id, and nR. Instead of making this ex-
plicit by writing, e.g., ai(k,id,nR), we just write ai where
k, id, and nR are clear from the context.
3.7 Rollback
To recover the key it is sufﬁcient to learn the internal state
of the cipher a i at any point i in time. Since an attacker
knows id and {nR}, the LFSR can then be rolled back to
time zero.
Deﬁnition 3.6. The rollback function R : F48
2 → F2 is
deﬁned by R(x1 . . . x48) := x2 ⊕ x3 ⊕ x6 ⊕ x7 ⊕ x8 ⊕ x16 ⊕
x22 ⊕ x23 ⊕ x26 ⊕ x30 ⊕ x41 ⊕ x42 ⊕ x43 ⊕ x46 ⊕ x47 ⊕ x48.
If one ﬁrst shifts the LFSR left using L to generate a
new bit on the right, then R recovers the bit that dropped
out on the left, i.e.,
R(x1 . . .x47 L(x0 . . .x47)) = x0 .
(1)
7
Theorem 3.7. In the situation from Deﬁnition 3.5, we
have
a32+i = R(a33+i . . . a80+i)
ai = idi
∀i ∈ N
∀i ∈ [0,31] .
Proof. Straightforward, using Deﬁnition 3.5 and Equa-
tion (1).
If an attacker manages to recover the internal state of
the LFSR a i = aiai+1 . . .ai+47 at some time i, then she
can repeatedly apply Theorem 3.7 to recover a0a1 . . . a79
and, consequently, the keystream b0b1b2 . . .. By having
eavesdropped {nR} from the authentication protocol, the
adversary can further calculate
nRi = {nR}i ⊕ bi