### Website Implementation and Security Testing

The website, previously accessible at `www.rwycart.com`, is based on the OpenCart platform. We enhanced the OpenCart system by addressing 35 security vulnerabilities and integrating comprehensive testing cases. The website was deployed using an Apache HTTP server and a MySQL database. Our testbed automatically generates a website instance following a pre-defined configuration. For remote access, we utilized OpenSSH, and for managing the MySQL database, we used phpMyAdmin.

We hosted the website on Amazon AWS, using a single t2.medium server instance running Ubuntu 16.04. To enable HTTPS, we obtained a valid SSL certificate from Let's Encrypt. The website was set up solely for research purposes and did not include a real payment gateway. Instead, we implemented a dummy payment gateway that mimics the functionality of CardConnect. This dummy gateway was built using the Flask-RESTful framework, and we modified the `/etc/hosts` file to redirect requests to this endpoint. During our experiments, no real payment transactions were processed by the server. Further details on research ethics are discussed in Section 3.3.

### Implementing Security Test Cases

In Table 3, we detail the implementation of the 35 security test cases. These test cases are categorized into network security, system security, web application security, and secure storage.

#### Network Security
- **Test cases i1 to i3**: Implemented by changing inbound traffic configurations within the Amazon AWS security group.
- **Test case i4 (administer access over the Internet)**: Configured through phpMyAdmin.
- **Test case i5 (default SQL password)**: No password set for the "root" user, with remote access enabled from any host.
- **Test case i7**: Kept port 80 (HTTP) open without redirection to port 443 (HTTPS).
- **Test cases i12, i14, i16, and i17**: Used default certificates from Apache.
- **Test cases i13 and i18**: Configured by changing the `SSLCipherSuite` and `SSLProtocol` settings in the Apache server.
- **Test case i15**: Configured the Apache server to use a valid certificate but with a wrong domain name.

#### System Security
- **Test cases i19â€“i20**: Installed software known to be vulnerable. 
  - **Test case i19**: Used OpenSSL 7.2, which is vulnerable to privilege escalation and timing side channel attacks.
  - **Test case i20**: Used phpMyAdmin 4.8.2, known to be vulnerable to XSS.
- **Test cases i29 to i33**: Configured by changing the Apache server settings.
  - **Test case i33 (HTTP security header)**: Considered `X-Frame-Options`, `X-XSS-Protection`, `X-Content-Type-Options`, and `Strict-Transport-Security`.

#### Web Application Security
- **Test cases i21 to i28**: Modified OpenCart source code.
  - **Test case i23**: Disabled password retry restrictions for both users and administrators.
  - **Test case i24**: Disabled password length checking.
  - **Test cases i21 and i22**: Modified the admin and customer login code to introduce SQL injection vulnerabilities.
  - **Test case i27**: Implanted an XSS vulnerability in the customer profile editing page by allowing HTML content in the "first name" field.
  - **Test case i28**: OpenCart does not have default CSRF protection.
  - **Test case i26 (displaying errors)**: Configured OpenCart to reveal crash reports, which is an insecure practice.
  - **Test case i25**: OpenCart does not check the integrity of JavaScript code loaded from external sources.

#### Secure Storage
- **Test case i8**: Modified the CardConnect extension to store CVV in the database.
- **Test case i10**: Stored the full PAN (instead of the last 4 digits) in plaintext in the database.
- **Test case i11**: Added an option to encrypt PANs before storing, but with a hardcoded encryption key.
- **Test case i9**: Updated the customers' order history page to show the unmasked PAN for each transaction.
- **Test case i34**: Stored raw unsalted MD5 hashes of customer passwords.
- **Test case i35**: Stored plaintext passwords for administrators.

### Research Ethics

To ensure research ethics, we took several precautions:
1. **Website Availability**: The website was only online shortly before and during the scanning experiments, and was taken down immediately afterward.
2. **Domain Registration**: The domain name was freshly registered and not advertised, except to the scanners.
3. **Monitoring**: We closely monitored the HTTP logs and dropped any non-scanner requests.
4. **Scanner Traffic**: PCI scanner traffic was easily distinguishable from real user visits based on IP and User-Agent.

All PCI scanners ran automatically without human involvement. We followed the terms and conditions specified by the scanning vendors and anonymized the names of the scanners to comply with their policies.

### Evaluation of PCI Scanners

Our experiments focused on evaluating PCI scanners to answer the following research questions:
- How do various PCI scanners compare in terms of their detection capabilities?
- What are the security consequences of inadequate scanning?
- How do web scanners (commercial or open-source) compare with PCI scanners in terms of detection capabilities?

We selected 8 U.S.-based PCI DSS scanners, as shown in Table 2. The selection process involved identifying high-quality, affordable scanners from the list of approved vendors [20]. We conducted successful experiments with 6 of these scanners, excluding Scanner7 and Scanner8 due to pricing issues.

### Iterative Test Design

For each PCI scanner, we performed the following steps:
1. **Baseline Test**: Spawned a website instance with all 35 vulnerabilities enabled and ordered a PCI scanning service.
2. **Certified Instance Test**: Modified the web server according to the scan report, fixed the required vulnerabilities, and ordered another round of scanning to identify the minimal set of vulnerabilities needed for PCI DSS compliance.

### Summary

In summary, we carefully designed and conducted our experiments to evaluate the effectiveness of PCI scanners and the security compliance of e-commerce websites. Our approach minimized the impact on servers and ensured ethical research practices. Detailed results and further analysis are provided in the subsequent sections.