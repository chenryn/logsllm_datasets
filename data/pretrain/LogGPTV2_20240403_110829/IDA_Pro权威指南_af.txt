 的大多数功能与 objdump
 相同，它们之间的主要区别在于 readelf
 并不依赖libbfd 。
2. 参见http://www.gnu.org/software/binutils/
 。
2.2.4 otool
otool
 可用于解析与 OS X Mach-O二进制文件有关的信息，因此，可简单将其描述为 OS X系统下的类似于 objdump
 的实用工具。下面的代码说明了如何使用 otool
 显示一个Mach-O二进制文件的动态库依赖关系，从而执行类似于 ldd 的功能。
idabook#  file osx_example  
osx_example: Mach-O executable ppc  
idabook#  otool -L osx_example  
osx_example:  
        /usr/lib/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.4.0)  
        /usr/lib/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0)  
        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 88.1.5)  
otool
 可用于显示与文件的头部和符号表有关的信息，并对文件的代码部分进行反汇编。欲了解更多有关 otool
 功能的信息，请参阅相关手册。
2.2.5 dumpbin
dumpbin
 是微软Visual Studio工具套件中的一个命令行实用工具。与 otool
 和objdump
 一样，dumpbin
 可以显示大量与 Windows PE文件有关的信息。下面的例子说明了如何使用dumpbin
 以类似于ldd
 的方式显示 Windows 计算器程序的动态依赖关系。
$ dumpbin /dependents calc.exe
Microsoft (R) COFF/PE Dumper Version 8.00.50727.762
Copyright (C) Microsoft Corporation.  All rights reserved.
Dump of file calc.exe
File Type: EXECUTABLE IMAGE
  Image has the following dependencies:
    SHELL32.dll
    msvcrt.dll
    ADVAPI32.dll
    KERNEL32.dll
    GDI32.dll
    USER32.dll
dumpbin
 的其他选项可从 PE二进制文件的各个部分提取信息，包括符号、导入的函数名、导出的函数名和反汇编代码。欲了解更多有关如何使用dumpbin
 的信息，请访问Mircrosoft Developer Network（MSDN）3
 。
3. 参见http://msdn.microsoft.com/en-us/library/clh23y6c(VS.71).aspx
 。
2.2.6 c++filt
由于每一个重载的函数都使用与原函数相同的名称，因此，支持函数重载的语言必须拥有一种机制，以区分同一个函数的许多重载版本。下面的 C++ 实例展示了一个名为 demo
 的函数的几个重载版本的原型：
void demo(void);  
void demo(int x);  
void demo(double x);  
void demo(int x, double y);  
void demo(double x, int y);  
void demo(char* str);  
通常，一个目标文件中不能有两个名称相同的函数。为支持重载，编译器将描述函数参数类型的信息合并到函数的原始名称中，从而为重载函数生成唯一的函数名称。为名称完全相同的函数生成唯一名称的过程叫做名称改编（name mangling）4
 。如果使用 nm
 转储前面的C++ 代码的已编译版本中的符号，将得到如下结果（有删减，以突出显示 demo的重载版本）：
4. 有关名称改编的概述，请参考http://en.wikipedia.org/wiki/Name_mangling
 。
idabook#  g++ -o cpp_test cpp_test.cpp
idabook#  nm cpp_test | grep demo
0804843c  T _Z4demoPc  
08048400  T _Z4demod  
08048428  T _Z4demodi  
080483fa  T _Z4demoi  
08048414  T _Z4demoid  
080483f4  T _Z4demov  
C++ 标准没有为名称改编方案制定标准，因此，编译器设计人员必须自己制定标准。为了译解上面列出的 demo
 函数的重载版本，我们需要一个能够理解编译器（这里为 g++ ）的名称改编方案的工具，c++filt
 正是这样一个实用工具。c++filt
 将每个输入的名称看成是改编后的名称（mangled name ），并设法确定用于生成该名称的编译器。如果这个名称是一个合法的改编名称，那么，c++filt
 就输出改编之前的原始名称；如果 c++filt
 无法识别一个改编名称，那它就按原样输出该名称。
如果将上面 nm
 输出的结果交给 c++filt
 处理，将可以得到这些函数的原始名称，如下所示：
idabook#  nm cpp_test | grep demo | c++filt
0804843c  T demo(char*)  
08048400  T demo(double)  
08048428  T demo(double, int)  
080483fa  T demo(int)  
08048414  T demo(int, double)  
080483f4  T demo()  
值得注意的是，改编名称可能包含其他与函数有关的信息，正常情况下，nm无法显示这些信息。在逆向工程过程中，这些信息可能非常重要。在更复杂的情况下，这些额外信息中可能还包含与类名称或函数调用约定有关的信息。
2.3 深度检测工具
到目前为止，我们已经讨论了一些工具，利用这些工具，可以在对文件的内部结构知之甚少的情况下对文件进行粗略分析，也可以在深入了解文件的结构之后，从文件中提取出特定的信息。在这一节中，我们将介绍一些专用于从任何格式的文件中提取出特定信息的工具。
2.3.1 strings
有时候，提出一些与文件内容有关的常规性问题，即那些不需要了解文件结构即可回答的问题，对我们会有一定帮助。例如：“这个文件包含字符串吗？”当然，在回答这个问题之前，必须先回答另一个问题：“到底什么是字符串？”我们将字符串简单定义为由可打印字符组成的连续字符序列。通常，在这一定义的基础上，还需要指定一个最小长度和一个特定的字符集。因此，可以搜索至少包含 4 个连续可打印 ASCII 字符的字符串，并将结果在控制台打印出来。通常，搜索这类字符串不会受到文件结构的限制。在 ELF 二进制文件中搜索字符串就像在微软 Word文档中搜索字符串一样简单。
strings
 实用工具专门用于提取文件中的字符串内容，通常，使用该工具不会受到文件格式的限制。使用strings
 的默认设置（至少包含4 个字符的7 位ASCII 序列），可得到以下结果。
idabook#  strings ch2_example  
/lib/ld-linux.so.2  
__gmon_start__  
libc.so.6  
_IO_stdin_used  
exit  
srand  
puts  
time  
printf  
stderr  
fwrite  
scanf  
__libc_start_main  
GLIBC_2.0  
PTRh  
[^_]  
usage: ch2_example [max]  
A simple guessing game!  
Please guess a number between 1 and %d.  
Invalid input, quitting!  
Congratulations, you got it in %d attempt(s)!  
Sorry too low, please try again  
Sorry too high, please try again  
不过，我们发现，一些字符串看起来像程序输出，一些字符串则像函数名称或库名称。因此，绝不能仅仅根据这些字符串来断定程序的功能。分析人员往往会掉入陷阱，根据 strings
 的输出来推断程序的功能。需要记住的是：二进制文件中包含某个字符串，并不表示该文件会以某种方式使用这个字符串。
下面是使用 strings
 时的一些注意事项。
需要牢记的是，使用 strings
 处理可执行文件时，默认情况下，strings
 仅仅扫描文件中可加载的、经初始化的部分。使用命令行参数–a
 可强制strings
 扫描整个文件。
strings
 不会指出字符串在文件中的位置。使用命令行参数–t
 可令strings
 显示所发现的每一个字符串的文件偏移量信息。
许多文件使用了其他字符集。使用命令行参数–e
 可使strings
 搜索更广泛的字符，如 16位Unicode字符。
2.3.2 反汇编器
前面介绍过，有很多工具都可以生成二进制目标文件的死代码清单形式的反汇编代码。PE、ELF 和MACH-O文件可分别使用 dumpbin
 、objdump
 和otool
 进行反汇编。但是，它们中的任何一个都无法处理任意格式的二进制数据块。有时候，你会遇到一些并不采用常用文件格式的二进制文件，在这种情况下，你就需要一些能够从用户指定的偏移量开始反汇编过程的工具。
有两个用于 x86 指令集的流式反汇编器
 （stream disassembler）：ndisasm