            p = malloc(1024 * (i + 1)); 
            *((int *)p) = i;
            printf("%p: [%i]\n", p, i);
        }
        p = heap_start;
        for (i = 0; i  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    1073                |             Size of previous chunk, if unallocated (P clear)  |
    1074                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    1075                |             Size of chunk, in bytes                     |A|M|P|
    1076          mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    1077                |             User data starts here...                          .
    1078                .                                                               .
    1079                .             (malloc_usable_size() bytes)                      .
    1080                .                                                               |
    1081    nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    1082                |             (size of chunk, but used for application data)    |
    1083                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    1084                |             Size of next chunk, in bytes                |A|0|1|
    1085                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    1086    
    1087        Where "chunk" is the front of the chunk for the purpose of most of
    1088        the malloc code, but "mem" is the pointer that is returned to the
    1089        user.  "Nextchunk" is the beginning of the next contiguous chunk.
->我们是正确的\o/。malloc返回给用户的地址之前的16个字节中，有两个变量：
  * 上一个块的大小（如果上一个块未分配）：我们并没有释放任何块，所以这就是它始终为0的原因
  * 块的大小，以字节为单位
让我们释放一些块以确认前8个字节的使用方式与源代码中描述的方式相同（7-main.c）：
    #include 
    #include 
    #include 
    /**                                                                                            
     * pmem - print mem                                                                            
     * @p: memory address to start printing from                                                   
     * @bytes: number of bytes to print                                                            
     *                                                                                             
     * Return: nothing                                                                             
     */
    void pmem(void *p, unsigned int bytes)
    {
        unsigned char *ptr;
        unsigned int i;
        ptr = (unsigned char *)p;
        for (i = 0; i 
    #include 
    #include 
    /**                                                                                            
     * pmem - print mem                                                                            
     * @p: memory address to start printing from                                                   
     * @bytes: number of bytes to print                                                            
     *                                                                                             
     * Return: nothing                                                                             
     */
    void pmem(void *p, unsigned int bytes)
    {
        unsigned char *ptr;
        unsigned int i;
        ptr = (unsigned char *)p;
        for (i = 0; i < bytes; i++)
        {
            if (i != 0)
            {
                printf(" ");
            }
            printf("%02x", *(ptr + i));
        }
        printf("\n");
    }
    /**
     * main - updating with correct checks
     *
     * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS
     */
    int main(void)
    {
        void *p;
        int i;