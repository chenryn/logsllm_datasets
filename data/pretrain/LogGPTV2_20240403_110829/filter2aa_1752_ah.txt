读的（读的!。
nr 小的读或文件。的 ferror()  feof()（
– 74 –
 3 
出
” 文件”的能的。
     小对     的  同  程  写 的  进  文
件对程能读的即程上的
能读的。
fread() 单的子给读性小的
char buf[64];
size_t nr;
nr = fread (buf, sizeof(buf), 1, stream);
if (nr == 0)
/* error */
我们 fread() 相对的 fwrite() 时我们更的子。
3.5 向流中写数据
读相同 C 将写的。
我们的写的方单的写写
进写。同的写方对 I/O 的。写
以的出的式 r 的的式。
3.5.1 对齐的讨论
的设对的。程内存单
的。处理以小对内存进读写。相处理以
的 ( 2 4 8 或 16 ) 内存。处理的空间
0 进程的读。 C 的存
对的。的自对的的 C 
小相的对。 32 以 4 对。
 int 存能 4 的内存。对的同的
上同程的性能。处理能对的
性能。的处理能对的
件异。更的处理对
的的。自对对
– 75 –
 3 
出
程的。处理内存理存进
进时对。程
方。更的对的内。
3.5.2 写入单个字符
 fgetc() 相对的 fputc():
#include 
int fputc (int c, FILE *stream);
fputc() 将 c 示的 () 写 stream 的
。时 c。 EOF相的设 errno。
单
if (fputc (’p’, stream) == EOF)
/* error */
子将 p 写写。
3.5.3 写入字符串
 fputs() 给的写的
#include 
int fputs (const char *str, FILE *stream);
fputs() 的调将 str 的的写 stream 的
。时 fputs() 。时 EOF。
的子以式文件写将给的写相的
然
stream = fopen (”journal.txt”, ”a”);
if (!stream)
/* error */
if (fputs (”The ship is made of wood.\n”, stream)
== EOF)
/* error */
– 76 –
 3 
出
if (fclose (stream) == EOF)
/* error */
3.5.4 写入二进制数据
程写进单能满。
存进 C  I/O 提 fwrite() :
#include 
size_t fwrite (void *buf,
size_t size,
size_t nr,
FILE *stream);
调 fwrite()  buf 的 nr 写 stream 
size。文件写的的。
时写的 (的!)。小 nr 的
。
3.5.5 缓冲 I/O 示例程序
我们子实上的程
及的。程 pirate然
的。程的文件 dada 的
出将写。同的程 data 读存
pirate 的实。程的内出出:
#include 
int main (void)
{
FILE *in, *out;
struct pirate
{
char name[100]; /* real name */
unsigned long booty; /* in pounds sterling */
– 77 –
 3 
出
unsigned int beard_len; /* in inches */
} p, blackbeard = { ”Edward Teach”, 950, 48 };
out = fopen (”data”, ”w”);
if (!out)
{
perror (”fopen”);
return 1;
}
if (!fwrite (&blackbeard, sizeof (struct
pirate), 1, out))
{
perror (”fwrite”);
return 1;
}
if (fclose (out))
{
perror (”fclose”);
return 1;
}
in = fopen (”data”, ”r”);
if (!in)
{
perror (”fopen”);
return 1;
}
if (!fread (&p, sizeof (struct pirate), 1, in))
{
perror (”fread”);
return 1;
}
if (fclose (in))
– 78 –
 3 
出
{
perror (”fclose”);
return 1;
}
printf (”name=\”%s\” booty=%lu beard_len=%u\n”,
p.name, p.booty, p.beard_len);
return 0;
}
出然原的:
name=”Edward Teach” booty=950 beard_len=48
我们的、对的同程写的
进对程能读的。同的程即
同上的同程能能读 fwrite() 写的。我们的
子以的小或的
将。东能 ABI 的上能相
同。
3.6 定位流
的的。能程读的
的文件。的时能将设文件的
。 I/O 提能调 lseek() 的
()。 fseek()  I/O 的操文件
 offset  whence 的:
#include 
int fseek (FILE *stream, long offset, int whence);
  whence  设   SEEK SET, 文 件 的    设   offset 处。 
whence 设 SEEK CUR, 文件设上 offset.  whence
设 SEEK END, 文件设文件上 offset。
时,fseek()  0空文件 ungetc() 操作。
时 1相的设 errno。的 (EBADF) 
– 79 –
 3 
出
 whence  (EINVAL)。 I/O 提 fsetpos() :
#include 
int fsetpos (FILE *stream, fpos_t *pos);
将的设 pos 处。将 whence 设 SEEK SET 时
的 fseek() 能。时 0。 -1, 相设 errno 的
。 (将的对的 fgetpos() )  ( UNIX) 能
示的的上提。上能
将设的方的能。 linux 的程
们能的上。
 I/O 提 rewind() 段
#include 
void rewind (FILE *stream)、;
调
rewind(stream);
将的。:
fseek (stream, 0, SEEK_SET);
空。 rewind() 能提
。调调空 errno
调零。
errno = 0;
rewind (stream);
if (errno)
/* error */
3.6.1 获得当前流位置
 lseek() 同 fseek() 更新的。单的提
能。 ftell() 的:
– 80 –
 3 
出
#include 
long ftell (FILE *stream);
时 -1相的设 errno。性的出提
 fgetpos() 
#include 
int fgetpos (FILE *stream, fpos_t *pos);
时 fgetpos()  0将的设 pos。时
-1, 相的设 errno。 fsetpos()  fgetpos() 文件
的 linux 上提。
3.7 清洗一个流
 I/O 提将写内的
 write() 写出的。 fflush() 提能
#include 
int fflush (FILE *stream);
调时 stream 的的写的 (flush) 
内。 stream 空的（NULL 进程的。时
fflush()  0。时 EOF相的设 errno。
理 fflush() 的作理 C 的内
自的的。提的调的 C 
的们空间内空间。效率提的原
程空间的调。
或时调。 fflush() 的
写内。效 write() 调
的。能写理的 fsync（
 (同时 I/O)。更的调 fflush() , 即调 fsync(): 
写内然内写。
– 81 –
 3 
出
3.8 错误和文件结束
 I/O  fread(), 调的能
们提 EOF 的。调时
给的出文件。 I/O 提。
 ferror() 上设
#include 
int ferror (FILE *stream);
的 I/O 设。设
零 0。 feof() 文件设
#include 
int feof (FILE *stream);
文件的时 EOF  I/O 设。
设零 0。 clearerr() 空文件
#include 
void clearerr (FILE *stream);
 (方提的
)。 error  EOF 以调 clearerr()操作
的。
/* ’f’ is a valid stream */
if (ferror (f))
printf (”Error on f!\n”);
if (feof (f))
printf (”EOF on f!\n”);
clearerr (f);
– 82 –
 3 
出
3.9 获得关联的文件描述符
时文件方的。的 I/O
存时以的文件对调。
的文件以 fileno():
#include 
int fileno (FILE *stream);
时 fileno() 相的文件。时 1。
 给  的   时 能     时  将 errno 设 
EBADF。出调调。 fileno() 时程
操作谨。的文件
对进 (flush)。 I/O 操作。
3.10 控制缓冲
 I/O 实提
小的。同的提同能同的。
。提内。对
。的。
以单。提内。对出
的。的方式 (出)。
以单。的文
件。的文件相的的。 I/O 。
的效的。然 I/O 实提
的的
#include 
– 83 –
 3 
出
int setvbuf (FILE *stream, char *buf, int mode,
size_t size);
setbuf() 设的式式以的
IONBF 
IOLBF 
IOFBF 
 IONBF  buf  size  buf 以 size 小
的空间 I/O 对给的。 buf 空
 glibc 自。
setvbuf（何操作调。时
 0出零。
时的存。的
作的自作。的
 main() 内的式。以
#include 
int main (void)
{
char buf[BUFSIZ];
/* set stdin to block-buffered with a BUFSIZ
buffer */
setvbuf (stdout, buf, _IOFBF, BUFSIZ);
printf (”Arrr!\n”);
return 0;
}
以离作式或将作
。
的操上的。
的。文件的以。的
小  的 BUFSIZ的 (
小的)。
– 84 –
 3 
出
3.11 线程安全
程同进程的实。程的同空
间的进程。同步或将程程以何
时间。程的操作提（相的程
程相。 I/O 。
能满。时给调将（段
的的 I/O 操作扩。能
提效率。我们。
 I/O 的上程的。内实设
的的程。程何 I/O 
程。或同上的程
能 I/O 操作单调的上文 I/O 操
作原子的。
然实程单的调更的原子
性。程写程能读写
间。的 I/O 操的提
的。
/** 的。程能式将的
I/O 操作程。的。
* /
3.11.1 手动文件加锁
 flockfile() 然的
程然:
#include 
void flockfile (FILE *stream);
 funlockfile() 相的
#include 
void funlockfile (FILE *stream);
– 85 –
 3 
出
 0的程的程能
。调以。程以 flockfile() 调
程相同的 funlockfile() 调。 ftrylockfile() 
flockfile() 的:
#include 
int ftrylockfile (FILE *stream);
 ftrylockfile() 何处理即零
。的程
 0。我们子
flockfile (stream);
fputs (”List of treasure:\n”, stream);
fputs (” (1) 500 gold coins\n”, stream);
fputs (” (2) Wonderfully ornate dishware\n”,
stream);
funlockfile (stream);
单的 fputs() 操作我们内
”List oftreasure” 的出程能程的 fputs() 
间。理程的程同提 I/O 操
作。然的程单调更的
原子操作 flockfile() 的相以。
3.11.2 不加锁流操作
给原。能提更更
的以将的小提效率。 Linux 提
的的 I/O 何操作。们实
上的 I/O
#define _GNU_SOURCE
#include 
int fgetc_unlocked (FILE *stream);
– 86 –
 3 
出
char *fgets_unlocked (char *str, int size, FILE
*stream);
size_t fread_unlocked (void *buf, size_t size,
size_t nr,FILE *stream);
int fputc_unlocked (int c, FILE *stream);
int fputs_unlocked (const char *str, FILE
*stream);
size_t fwrite_unlocked (void *buf, size_t size,
size_t nr,FILE *stream);
int fflush_unlocked (FILE *stream);
int feof_unlocked (FILE *stream);
int ferror_unlocked (FILE *stream);
int fileno_unlocked (FILE *stream);
void clearerr_unlocked (FILE *stream);
们或上的相对的
相同操作。程工。
POSIX 的 I/O 上的 POSIX 
的。们 Linux 的的 Unix 的以上提的
。
3.12 对标准 I/O 的批评
 I/O 出的。
 fgets(), 时能满。 gets（
出。
对 I/O 的的性能。读时 I/O 对内
 read() 调内 I/O 。然程
 I/O 读时 fgetc(
 I/O 的的。写时相的方式给
的空间 I/O 然 I/O  write() 写
内。
的读 I/O 的
– 87 –
 3 
出
。以 I/O 读的
。程实自的时能写以
。实提” ” 的程们
的读时出。
写操作更然能。写
时实备将内时写出
。以散 - 聚集 I/O(scatter-gather I/O) 的 writev() 实
能调。 (我们散布 - 聚集 I/O)。
的们我们的方
。实们自的方。