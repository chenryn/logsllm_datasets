### 优化后的文本

#### 3.4 读取文件
当使用 `fread()` 或 `fscanf()` 等函数从文件中读取数据时，需要检查是否遇到错误或文件结束。`ferror()` 和 `feof()` 函数用于检测这些情况。

```c
char buf[64];
size_t nr;
nr = fread(buf, sizeof(buf), 1, stream);
if (nr == 0) {
    /* 错误处理 */
}
```

在某些情况下，`fread()` 相对于 `fwrite()` 更适合于读取和写入大量数据。

#### 3.5 向流中写入数据
C 提供了多种向文件写入数据的方法。以下是几种常见的写入方式：

##### 3.5.1 对齐的讨论
计算机内存通常以字节为单位进行访问。然而，为了提高性能，处理器可以按更大的单位（如2、4、8或16个字节）进行读写操作。因此，确保数据对齐可以提高程序的性能。

例如，在32位系统上，整数通常以4字节对齐存储。如果一个 `int` 类型的数据没有正确对齐，可能会导致性能下降。

##### 3.5.2 写入单个字符
`fputc()` 用于将单个字符写入文件流中。

```c
#include <stdio.h>

int fputc(int c, FILE *stream);

if (fputc('p', stream) == EOF) {
    /* 错误处理 */
}
```

##### 3.5.3 写入字符串
`fputs()` 用于将字符串写入文件流中。

```c
#include <stdio.h>

int fputs(const char *str, FILE *stream);

if (fputs("The ship is made of wood.\n", stream) == EOF) {
    /* 错误处理 */
}
```

##### 3.5.4 写入二进制数据
`fwrite()` 用于将二进制数据写入文件流中。

```c
#include <stdio.h>

size_t fwrite(void *buf, size_t size, size_t nr, FILE *stream);

if (!fwrite(&blackbeard, sizeof(struct pirate), 1, out)) {
    /* 错误处理 */
}
```

#### 3.6 定位流
文件指针可以通过 `fseek()` 函数进行定位。`fseek()` 的参数包括文件流、偏移量和基准位置。

```c
#include <stdio.h>

int fseek(FILE *stream, long offset, int whence);

/* 将文件指针移动到文件开头 */
fseek(stream, 0, SEEK_SET);

/* 将文件指针移动到当前位置之后的某个位置 */
fseek(stream, 10, SEEK_CUR);

/* 将文件指针移动到文件末尾之前的某个位置 */
fseek(stream, -10, SEEK_END);
```

#### 3.7 清洗一个流
`fflush()` 用于将缓冲区中的数据刷新到磁盘。

```c
#include <stdio.h>

int fflush(FILE *stream);

if (fflush(stream) != 0) {
    /* 错误处理 */
}
```

#### 3.8 错误和文件结束
`ferror()` 和 `feof()` 用于检测文件操作中的错误和文件结束情况。

```c
#include <stdio.h>

int ferror(FILE *stream);
int feof(FILE *stream);

if (ferror(f)) {
    printf("Error on f!\n");
}

if (feof(f)) {
    printf("EOF on f!\n");
}

clearerr(f);
```

#### 3.9 获得关联的文件描述符
`fileno()` 用于获取与文件流关联的文件描述符。

```c
#include <stdio.h>

int fileno(FILE *stream);

int fd = fileno(stream);
if (fd == -1) {
    /* 错误处理 */
}
```

#### 3.10 控制缓冲
`setvbuf()` 用于设置文件流的缓冲模式。

```c
#include <stdio.h>

int setvbuf(FILE *stream, char *buf, int mode, size_t size);

char buf[BUFSIZ];
setvbuf(stdout, buf, _IOFBF, BUFSIZ);
```

#### 3.11 线程安全
标准 I/O 库提供了线程安全的机制。`flockfile()` 和 `funlockfile()` 用于锁定和解锁文件流。

```c
#include <stdio.h>

void flockfile(FILE *stream);
void funlockfile(FILE *stream);

flockfile(stream);
fputs("List of treasure:\n", stream);
funlockfile(stream);
```

#### 3.12 对标准 I/O 的批评
标准 I/O 库虽然功能强大，但在某些情况下可能不如底层 I/O 操作高效。例如，`fgets()` 在处理大文件时可能不如 `read()` 高效。此外，标准 I/O 库的缓冲机制可能导致延迟。

通过自定义实现，可以更好地控制 I/O 操作，从而提高性能。例如，使用 `writev()` 可以实现更高效的分散-聚集 I/O 操作。

希望这些优化后的文本能够帮助你更好地理解和使用 C 语言中的文件 I/O 操作。