# 走进Windows中的提权行为

## 译文声明
本文是翻译文章，译文仅供参考，具体内容表达及含义以原文为准。

## 前言
在[《基于异常行为检测CobaltStrike》](https://blog.moofeng.cn/wei-xie-shou-lie/ji-yu-yi-chang-hang-wei-jian-ce-cobaltstrike#privilege-escalation)一文中，曾简要提及CobaltStrike的提权方式。受限于篇幅，当时未深入探讨。最近阅读了几篇文章，并结合对一些数据源的思考，希望在此汇总部分常见提权手法的攻击原理和检测技巧。

本文主要关注GetSystem的过程，对应ATT&CK攻击框架中的[T1134 – Access Token Manipulation](https://attack.mitre.org/techniques/T1134/)，不涉及UAC绕过。由于相关名词较多（如logon session和access token），理解过程可能需要一定的前置知识。为避免文章冗长，这些背景知识将在后续文章中单独总结。

以下主要选择两种技术作为演示实例：**命名管道提权** 和 **访问令牌窃取**。

## 命名管道提权
我们从经典的Meterpreter中的`getsystem`命令开始讨论，因为其[源码](https://github.com/rapid7/metasploit-payloads/blob/master/c/meterpreter/source/extensions/priv/namedpipe.c)可供参考，有助于读者理解。代码注释中简单解释了工作原理和前置条件：

> Elevate from local admin to local system via Named Pipe Impersonation.
>
> We spawn a cmd.exe under local system which then connects to our named pipe and we impersonate this client.
>
> This can be done by an Administrator without the need for.
>
> Works on 2000, XP, 2003 and 2008 for all local administrators. On Vista and 7 it will only work if the host process has been elevated through UAC first.
> Does not work on NT4.

该技术的核心在于利用**ImpersonateNamedPipeClient** API，通过命名管道的服务端进程模仿客户端进程的访问令牌，从而获取SYSTEM权限。关于该API的详细说明，请参阅[官方文档](https://docs.microsoft.com/en-us/windows/win32/api/namedpipeapi/nf-namedpipeapi-impersonatenamedpipeclient)。调用此API的前提是进程具备SeImpersonatePrivilege权限，通常这意味着我们已经是Admin用户。

对照源代码，我大致拆解了该模块的具体实现步骤：

1. `getsystem`新建一个线程创建命名管道并等待服务发来的连接（服务端）。
2. `getsystem`创建了一个以SYSTEM权限运行的Windows服务，该服务会向命名管道发起连接（客户端）。
3. 启动该服务，向目标命名管道发起连接（客户端 -> 服务端）。
4. 该进程（服务端）接收连接，调用`ImpersonateNamedPipeClient`，从而模仿了SYSTEM权限的访问令牌。
5. 完成提权过程后，停止并删除该服务。

### 第一步：创建命名管道
这一步在Sysmon中有对应的EID 17 (Pipe Created)日志记录，很容易观测到。另外，在时间节点附近，结合该进程对应的GUID，我们还能看到更多的动作，具体见后文。

### 第二步：创建服务
这一步可以通过Windows系统日志观测到EID 7045 (A new service was installed in the system)事件。尽管Sysmon的日志类型中没有涉及Windows服务，但我们可以利用一个小窍门：**Windows安装服务时会写入注册表的特定位置**。这一知识可以用于检测可疑服务的创建，例如注册表键值中包含Powershell敏感命令、base64编码或特殊路径等。

使用以下命令，我们可以定位到这一步创建的服务名称和命令参数等信息：
```spl
index=windows EventCode=13 TargetObject="HKLM\\System\\CurrentControlSet\\Services\\*\\ImagePath"
```

从结果中可以看出，该服务启动后会向服务端的命名管道写入数据。

### 第三步：启动服务，连接管道
关于Windows服务的启动，这里有个有趣的细节。尽管找不到相应的系统日志来监测服务的启动行为，但多次实验后发现每次都会伴随着EID 7009 (服务连接超时)的发生。这是因为类似cmd.exe这样的非有效服务不会向服务管理器返回信号。例如，如果我们在命令行中手动创建一个简易服务，然后查看事件管理器中的系统日志，也会观察到EID 7009。同样，这也可以作为判断`getsystem`命令执行过程中启动服务的证据。

服务启动后，结合前面分析的命令行参数，可以检索到其触发EID 1 (Process Create)的动作。该命令向服务端命名管道发起连接，这一行为会被Sysmon的EID 18 (Pipe Connected)记录。

### 第四步：调用API，完成提权
API的调用暂无对应日志记录，但可以根据用户名(User)和进程完整性(IntegrityLevel)等字段定位到提权的结果。如果这时在MSF控制台执行shell命令，可以看到一个具有SYSTEM权限的cmd.exe诞生，而其父进程却是非SYSTEM权限。这一特征标志着整个提权行为的顺利完成。更多原理细节和检测步骤请参考后文。

### 第五步：删除服务
最后一步容易被忽视——痕迹清除。这一行为在成熟的攻击框架中做得非常到位，但也有利于我们进行行为检测分析。通过分析源码，我在日志中发现了服务删除的动作。

## 访问令牌窃取
除了上述例子中使用的`ImpersonateNamedPipeClient`之外，还有一些Windows API也能帮助我们提升到SYSTEM权限，例如`ImpersonateLoggedOnUser`和`DuplicateTokenEx`。

以上图右边最经典的提权路线为例，我简单解释下各步骤：

1. 通过[OpenProcess](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess)获取SYSTEM权限进程的句柄。
2. 通过[OpenProcessToken](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocesstoken)获取该进程的访问令牌。
3. 通过[DuplicateTokenEx](https://docs.microsoft.com/en-us/windows/win32/api/securitybaseapi/nf-securitybaseapi-duplicatetokenex)函数复制该令牌。
4. 通过[CreateProcessWithTokenW](https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createprocesswithtokenw)创建具备相同访问令牌的进程。

以下是自己测试时使用的代码示例，参考自某处修改而来：

```c
#include <windows.h>
#include <stdio.h>

int main(int argc, char** argv) {
    // 从命令行参数获取PID
    char *pid_c = argv[1];
    DWORD PID_TO_IMPERSONATE = atoi(pid_c);
    HANDLE tokenHandle = NULL;
    HANDLE duplicateTokenHandle = NULL;
    STARTUPINFOW startupInfo;
    PROCESS_INFORMATION processInformation;

    // 代码实现省略
}
```

通过这种方式，我们可以实现对SYSTEM权限的提升。