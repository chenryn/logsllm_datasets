### 4.3.2. Myrinet Packet Type Corruption

Myrinet packet types are determined by a four-byte subsection of the packet header. Since these headers are appended to packets by the network hardware, they are typically not accessible to higher-level software. Although most packet types are reserved for relatively obscure protocols (a complete list can be found on the Myrinet website), we focused on three specific types of interest.

#### Mapping Packet Corruption

We first examined the behavior of a corrupted mapping packet header. Mapping packets are identified by the 16-bit hexadecimal string `0005`. In our tests, this string was corrupted to read `000x`, where `x` is a random value. When a node receives a corrupted mapping packet, it is removed from the network. Similarly, if a node replies to a mapping query with a corrupted packet, it is also removed. This occurs because the mapper does not detect a response to the mapping packet and updates the routing tables accordingly. The affected node remains out of the network until the next mapping packet is received. In a high-speed network transmitting hundreds of megabytes per second, this can cause significant performance degradation.

#### Data Packet Corruption

We also investigated the network's response to corrupted data packet headers (`0004`). In this scenario, the receiving node drops the data packets and does not recognize them as valid data packets. The internal network structures, such as the routing table, remain unchanged after this failure since they are not influenced by data packet transmission or its failures.

### 4.3.3. Source Route Corruption

The beginning of each Myrinet header contains the routing information for the next link in the journey. If the packet is being routed to a switch, the Most Significant Bit (MSB) must be set to one. Conversely, when the packet reaches its destination, the MSB must be zero. According to the Myrinet standard, if a packet arrives at a destination interface with the MSB set to one, it should be "consumed and handled as an error." We tested this by setting the MSB to one when packets arrived at the target interface. The interface dropped these packets without incident, causing no delays or other errors on the target node.

Other errors were injected into the routing subsection, directing packets to the wrong ports on the switch or to the wrong host interface. These errors resulted in expected packet losses, but no incorrect nodes accepted the packets. No bad data was passed to a higher level, and there was no error propagation.

### 4.3.4. Physical Address Corruption

We also examined the impact of data-link layer corruption, specifically the corruption of physical addresses, which are 48-bit Ethernet addresses corresponding to individual Myrinet ports.

#### Destination Address Corruption

One error campaign looked at the network's response to bad addressing. In targeted packets, we replaced the destination address with the address of another node on the network. We observed that the packets were dropped and not received by either the intended destination node or the erroneously specified node. This is due to the incorrect CRC-8 included in the Myrinet packets.

#### Sender's Address Corruption

In a second experiment, the target node's own address was corrupted to match the address of another node on the network. The node became unreachable to all Ethernet-based network traffic because it drops incoming packets that are misaddressed. Since the node does not see its own address, it drops all packets as being misaddressed. However, the node still responds correctly to mapping packets, and the routing information concerning the node remained unchanged. This works because the network map is developed using relative destination ports rather than unique addresses like Ethernet provides.

#### Address Corrupted to Match Controller Address

Most interestingly, when a node's address is corrupted to match the address of the controller (the node in charge of network mapping), the routing table becomes badly corrupted. Figure 9 shows the network map after the routing table error (cf. the uncorrupted network map in Figure 8). The controller is confused by the appearance of what it believes is another controller and is unable to generate a consistent map. Each attempt to resolve the network fails in an apparently random fashion, and although the faulty map was not static, each subsequent mapping attempt results in a similarly damaged map.

#### Address Corruption to Non-Existent Address

Another error mode occurs when a node's address is corrupted into a non-existent address. In this case, packets in transition are dropped, and the routing table is updated with the new information. This is the expected Myrinet response, as it is analogous to removing a computer and replacing it with another.

### 4.3.5. UDP Address Corruption

The fault injector can also emulate faults at higher network levels. We conducted a fault injection campaign that examined UDP packet corruption. Since UDP uses a 16-bit one's complement checksum, corrupt packets should be detected and dropped by the UDP layer. However, if the fault is manifested in a way that satisfies the checksum, the incorrect packet will pass through. Because the checksum is 16 bits, this can be done by swapping bits that are 16 bits apart.

In our test, we corrupted a UDP packet containing the string "Have a lot of fun" to read "veHa a lot of fun." The checksum failed to detect this, and the incorrect message was passed to the sending application. When the corruption did not satisfy the checksum, the packets were dropped.

This campaign demonstrated the fault injector's ability to examine various transmission protocols. Since the expected behavior was observed in all cases, we concluded that the fault injector was working as intended.

### 4.4. Discussion – Faults Considered Harmful

Characterizing errors in hardware-generated control packets is an important consideration when designing new networking protocols and technologies. FPGA-based fault injectors, like the one used in this study, provide valuable insights into the behavior of networks under faults that would otherwise be difficult to simulate, for example, using software-implemented fault injection. Specifically, the proposed design demonstrates the ability to perform a fault injection campaign on control information and other low-level data-link layer faults using precisely determined bit flips and corruptions.

The fault injector allowed us to examine the response of a high-speed Myrinet network to low-level control faults. Generally, the Myrinet network performed acceptably. Although Myrinet was not designed to be a fault-tolerant protocol, it has some error protection. For example, the control symbols were chosen such that a single 1-to-0 bit flip would not change the interpretation of the symbol. Although many of the exhibited responses to faults were unexpected, the Myrinet protocols were able to handle these faults with only transient downtime.

When considering a given design’s response to different faults, it may be helpful to distinguish between passive and active faults. An active fault passes incorrect data or results to a higher system level, such as the successful receipt of a message addressed to someone else or an application crash due to control symbol corruption. A passive fault, on the other hand, puts the network into an unexpected and incorrect state, allowing affected nodes to make bad decisions based on erroneous information. The routing table corruption discussed above is an example of a passive fault. Using this terminology, the faults observed in our injection campaigns were all passive. Data were dropped and lost, but not incorrectly passed on. This may still be of concern to many distributed applications, such as Chameleon [20], which provides a software-implemented fault-tolerant environment. Chameleon contains application processes that block while waiting for certain messages. If errors in the underlying Myrinet network cause a node to hang [6], processes that require the services of a blocking process will block as well, causing correlated failures. (Chameleon handles this situation by diagnosing a hang and initiating its recovery protocol.)

### 5. Conclusions

This paper presents a configurable architecture for performing data-link level network fault injection. The architecture is unique and enables synchronous injection on high-speed networks. The proposed architecture employs reconfigurable logic in the data path and can support a multitude of configurations. The fault injection functionality was developed in hardware description language, synthesized, and simulated. A high-speed PCB was manufactured, assembled, and tested.

A fault injection campaign on a Myrinet network demonstrated the versatility and usefulness of the device. The campaign included a variety of faults inaccessible to traditional SWIFI, such as control packet faults. The reconfigurable nature of the device provides flexibility to conduct a wide range of injection campaigns and supports future research in testability, fault-tolerance, and related fields.

### Acknowledgments

This work was supported in part by NSF grants CCR-00-86096ITR and CCR99-02026, and by a Motorola grant under the Motorola Center for Communications.

### References

[1] Boden N. et al., “Myrinet: A Gigabit-per-Second Local-Area Network,” IEEE Micro, vol.15, no.1, 1995, pp.29-36.
[2] ANSI Standard X3.230:1994, “Fibre Channel - Physical and Signaling Interface (FC-PH),” American National Standards Institute, New York, NY, 1994.
[3] Karlsson J. et al., “Using Heavy-Ion Radiation to Validate Fault-Handling Mechanisms,” IEEE Micro, vol.14, no.1, 1994, pp.8-23.
[4] Arlat J. et al., “Fault Injection for Dependability Validation of Fault-Tolerant Computing Systems,” Proc. 19th Int. Symp. on Fault-Tolerant Computing (FTCS-19), 1989, pp.348-355.
[5] Madeira H. et al., “RIFLE: A General Purpose Pin-level Fault Injector,” in Proc. 1st European Dependable Computing Conf. (EDCC-1), 1994, pp.199-216.
[6] Stott D. et al., “NFTAPE: A Framework for Assessing Dependability in Distributed Systems with Lightweight Fault Injectors,” IEEE Int. Computer Performance and Dependability Symp. (IPDS'00), 2000, pp.91-100.
[7] Hsueh M.-C. et al., “Fault Injection Techniques and Tools,” Computer, vol.30, no.4, 1997, pp.75-82.
[8] Madeira H. et al., “On the Emulation of Software Faults by Software Fault Injection,” International Conference on Dependable Networks and Systems, 2000, pp. 417-427.
[9] Design,” Dependability, D. K. Pradhan, Prentice Hall, 1996.
[10] Kanawati N. A. et al., “Dependability Evolution using Hybrid Fault/Error Injection,” IEEE Int. Computer Performance and Dependability Symp. (IPDS'95), 1995, pp.224-233.
[11] Kanawati G. A. et al., “FERRARI: A Tool for the Validation of System Dependability Properties,” in Proc. 22nd Int. Symp. on Fault-Tolerant Computing (FTCS-22), 1992, pp.336-344.
[12] Martinez R.J. et al., “Experimental validation of high-speed fault-tolerant systems using physical fault injection,” Dependable Computing for Critical Applications 7, 1999, pp. 249-265.
[13] Folkesson P. et al., “Comparison of Simulation Based and Scan Chain Implemented Fault Injection,” Proc. 28th Int. Symp. on Fault-Tolerant Computing (FTCS-28), 1998, pp.284-293.
[14] Merenda A., E. Merenda, “Recovery/Serviceability System Test Improvements for the IBM ES/9000 520 Based Models,” Proc. of the 22nd International Symposium on Fault-Tolerant Computing, 1992, pp. 463-467.
[15] Karlsson J. et al., “Application of Three Physical Fault Injection Techniques to Experimental Assessment of the MARS Architecture,” in Proc. 5th IFIP Int. Working Conf. Dependable Computing for Critical Applications (DCCA-5), 1997, pp.267-287.
[16] Miremadi G., J. Torin, “Evaluating Processor-Behavior and Three Error-Detection Mechanisms Using Physical Fault-Injection,” IEEE Trans. on Reliability, vol.44, no.3, 1995, pp.441-454.
[17] Harboe-Sorenson R. et al., “Observation and Prediction of SEU in Hitachi SRAMs in Low Altitude Polar Orbits,” IEEE Trans. Nuclear Science, vol.40, no.6, 1993, pp.1498-1504.
[18] Samson J.R. et al., “A Technique for Automated Validation of Fault Tolerant Designs Using Laser Fault Injection (LFI),” Proc. 28th Int. Symp. on Fault-Tolerant Computing (FTCS-28), 1998, pp.162-167.
[19] Floering B., “An Adaptive Architecture for Network Based Fault Injection and Measurement,” M.S. Thesis, University of Illinois at Urbana-Champaign, 2000.
[20] Kalbarczyk Z. et al., “Chameleon: A Software Infrastructure for Adaptive Fault Tolerance,” IEEE Trans. Parallel and Distributed Systems, vol.10, no.6, 1999, pp.560-579.

---

**Proceedings of the International Conference on Dependable Systems and Networks (DSN’02)  
0-7695-1597-5/02 $17.00 © 2002 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 04:18:26 UTC from IEEE Xplore. Restrictions apply.**