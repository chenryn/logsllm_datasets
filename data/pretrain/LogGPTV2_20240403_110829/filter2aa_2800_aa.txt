Locking Down Apache
 Locking Down Apache
 Jay Beale
 Senior Security Consultant, Intelguardians
 PI:EMAIL
 (Def Con 12)
 Contents
Configuration Modification
Chroot-ing Apache
Removing Modules
Using Security-focused Apache Modules
 httpd.conf
 We harden recent releases of Apache entirely
 through the httpd.conf file.
/etc/apache/httpd.conf (Solaris)
/etc/httpd/conf/httpd.conf (Linux, recent)
/usr/local/apache/etc/httpd.conf 
 (compiled w/ --prefix=/usr/local/apache)
 Let’s look at this file’s structure.
 Apache Configuration File
 Apache’s configuration file starts with a
 number of generic options and then begins
 to set options based on parts of the 
 webspace in  blocks.
 Order Allow, Deny
 Deny from All
 Apache Config file
 The Apache configuration file has three parts.
 The first part applies to the entire server as
 a whole, virtual servers and all.
  ### Section 1: Global Environment
 ServerRoot "/usr/local/apache"
  #Listen 12.34.56.78:80
  Listen 80
 LoadModule access_module modules/mod_access.so
 LoadModule auth_module modules/mod_auth.so
 LoadModule auth_anon_module modules/mod_auth_anon.s
 ...
 LoadModule alias_module modules/mod_alias.so
 LoadModule rewrite_module modules/mod_rewrite.so
 Apache Config File Section 2 (Slide 1/3)
 Section 2 applies to the main non-virtual
 server.  It also sets defaults for the virtual
 servers that they can override.
  ### Section 2: ’Main’ server configuration
 User nobody
 Group #-1
 ServerAdmin PI:EMAIL
  #ServerName www.example.com:80
 DocumentRoot "/usr/local/apache/htdocs"
     Options FollowSymLinks
     AllowOverride None
 Apache Config File Section 2 (Slide 2/3)
  # This should be changed to whatever you set 
DocumentRoot to.
     Options Indexes FollowSymLinks
     AllowOverride None
     Order allow,deny
     Allow from all
 UserDir public_html
  #
  #    AllowOverride FileInfo AuthConfig Limit Indexes
  #    Options MultiViews Indexes SymLinksIfOwnerMatch 
IncludesNoExec
  #
 Apache Config File Section 2 (Slide 3/3)
 AccessFileName .htaccess
     Order allow,deny
     Deny from all
 ServerTokens Full
 ServerSignature On
 ScriptAlias /cgi-bin/ "/usr/local/apache/cgi-bin/"
     AllowOverride None
     Options None
     Order allow,deny
     Allow from all
 IndexOptions FancyIndexing VersionSort
 Apache Config File Section 3: Virtual 
Hosting
  #NameVirtualHost *:80
  #
  #    ServerAdmin PI:EMAIL
  #    DocumentRoot /www/docs/dummy-host.example.com
  #    ServerName dummy-host.example.com
  #    ErrorLog logs/dummy-host.example.com-error_log
  #    CustomLog logs/dummy-host.example.com-access_log 
common
  #
 Web Server Tightening
 Do You Need a World-Accessible Web Server?
 Modify httpd.conf to either make the web server listen
 only on the loopback inteface:
 Listen  127.0.0.1:80
 or modify it to move the port:
 Listen  192.168.1.4:26457
 This may make the server easier to firewall if you have
 less than granular control over what ports are allowed 
 to what hosts.
 Web Server Tightening
 Of course, using Listen to change the port only doesn’t
 necessarily cut off access to clients in that granular
 a fashion.  For internal hosts, we’ve only hidden the
 server, not cut off access.
 We can restrict the server to specific hosts:
 order allow,deny
 allow from 192.168.1.0/24
 allow from 10.0.0.0/8
 deny from all
 Order / Allow and Deny
 Order statements define whether the
 allow statements will be default deny
 or default allow.
 The second of the two policies in
 the statement is the default policy.
 Access Control
 We can even impose greater restrictions on who can 
 access our site.
           AuthName "Foo for Thought"
           AuthType Digest
           AuthDigestFile /foo/.htpasswd
           Require valid-user
 The  block wasn’t necessary -- if we left it
 out, the access control applies to the entire directory.
 Access Control continued
 Create .htpasswd using the htpasswd command to md5
 passwords.  
 htpasswd -c -m /foo/.htpasswd jay jaypasswd
 After creating the file, all future users are added 
 without the -c option:
 htpasswd -m /foo/.htpasswd seconduser secondpass
 Walking the Filesystem
 Many configurations of Apache allows the
 webserver to serve any files readable by
 its user from the entire server filesystem,
 as soon as someone with write access to
 /usr/local/apache/htdocs does this:
 $ ln -s / /usr/local/apache/htdocs/my_link
 A remote attacker can now see any file that the web 
 server user can see.  Not good.
 Spammers think:  http://localhost/etc/passwd 
 Default Deny on Server Files
 We tell the server to only serve files we
 intend to be served.
      Order allow,deny
      Deny from all
      Order Deny,Allow
      Allow from all
      Order Deny,Allow
 Options
 Options  lists behavior allowed in the given  block.
All - All except multiviews
ExecCGI -  Execution of CGI scripts permitted
FollowSymLinks -  The server follows symlinks.
SymLinksIfOwnerMatch - The server only follows symbolic
 links if the directory owner matches the symlink target.
Includes - Allow SSI’s, including exec
IncludesNoExec - Allow SSI’s, but no exec
Indexes - Lists files in a directory when index.foo is missin
MultiViews - Fuzzy search for content
 Cutting Off Symlink Misconfigurations
 Remove "FollowSymLinks" from Options statements, 
 especially from the  block.
 If we need symlinks, use its better replacement:
 SymLinksIfOwnerMatch
 Alternatively, use mod_rewrite to rewrite URLs to 
 achieve the same effect as symlinks.
 Server Side Includes
 Server side includes (SSI) can be dangerous.  
 They allow web developers to include other files, but 
 also to execute arbitrary commands with the user context of 
 the web server’s user.  Here are the SSI possibilities:
 config  configure output formats
 echo print variables
 exec execute external programs
 fsize print size of a file
 flastmod print last modification time of a file
 include include a file
 printenv print all available variables
 set set a value of a variable
 Removing Server Side Includes
 To remove the exec functionality, we can replace the 
"Options Includes" lines with:
 Options IncludesNOEXEC
 or just remove Includes altogether.
 Removing Indexing
 The "Indexes" option tells the server to show us a list of files 
 whenever index.html is missing from a  directory.  This has 
two weaknesses:
 1) might allow our "walking the filesystem" attack
 2) allows an attacker to potentially find and read files he 
shouldn’t.
 We can deactivate this by removing "Indexes" from the
 Option lines and by creating an index.html file for each 
 directory.
 Protecting the .htaccess and .htpasswd files
 To protect these files against dictionary
 attacks, make sure to not allow reads of the .ht* files:
 Order allow,deny
 Deny from all
 Directory-specific password Authentication: 
htaccess
 There are two ways to define the authentication and
 other behavior for a given directory.  First, and 
 best, you can place configuration in a 
 block in the global configuration file.
 Alternatively, you can apply the same directives
 in a .htaccess file in a given directory.  
 $ cat /home/student/www/.htaccess
 Option Indexes
 AuthName "student site"       
 AuthType Digest          
 AuthDigestFile /home/student/www/.htpasswd          
 Require valid-user
 Blocking .htaccess Overrides
 An .htaccess file can override anything in the Options 
 statements, how the server handles files, or even what
 hosts are allowed to connect to the server.  The latter
 is achieved by specifying directory-specific Allow and Deny 
 statements.
 We can make overrides very specific, via the AllowOverride 
statement:
 Set:
   AllowOverride AuthConfig
 in the  block.
 AllowOverride Options
AuthConfig -  Allow use of the authorization directives
FileInfo -  Allow use of the directives controlling document 
types
Indexes -  Allow use of the directives controlling directory 
indexing
Limit -  Allow use of the directives controlling host access 
(Allow, Deny and Order)
Options - Regular Options statements
 Making Apache Offer Less Config 
Information
 Hide the version number from attackers to make 
 version scanners and potentially worms fail.
 ServerSignature Off
 Hide the list of modules and other status 
 information from an attacker:
 ServerTokens Prod
 Create Error Pages
 Replacing the standard error messages
 with custom pages might help foil automated 
 scanners, though this doesn’t change the
 error code in the server’s HTTP response,
 which is what most read.
 ErrorDocument 500 /error-docs/error.html
 ErrorDocument 404 /error-docs/error.html
 Remove Unused Methods
 Available methods:
 GET POST PUT DELETE CONNECT OPTIONS PATCH 
PROPFIND 
 PROPPATCH MKCOL COPY MOVE LOCK UNLOCK
 Methods are defined in section 9 of RFC2616 
(http://www.ietf.org/rfc/rfc2616.txt)
 Remove Unused Methods
Remove WebDAV methods 
    Order allow,deny
    Deny from all
Removing TRACE would help, but isn’t available here.
 We’ll have to do this through mod_rewrite.
 More about WebDAV:
http://www.apacheweek.com/issues/00-12-29)
http://www.ietf.org/rfc/rfc2518.txt
 Using Limit to remove all but desired 
methods
          Order allow,deny
          Allow from all
          Order deny,allow
          Deny from all
  #
 Dynamic content and CGI
 Dynamic content authors often don’t understand the
 HTTP protocol or have a strong grounding in security 
 principles.
 Try to read or blackbox audit your dynamic content.
 Blackbox Audit
 There are some good blackbox audit programs.  
Immunity’s Spike Proxy:
 http://www.immunitysec.com/resources-freesoftware.shtml
Paros:
 http://www.proofsecure.com/index.shtml
@Stake’s WebProxy
 http://www.atstake.com/products/webproxy/
 In essence, allows you to modify every part of your 
 client’s interaction with the webserver.
 Coping with CGI’s or other Dynamic Conten
 Either set specific directories that can run CGI scripts,
 as is now the default in Apache, or disable them by
 removing scriptalias statements and ExecCGI options 
 in Options statements.
 Forcing CGI’s into a specific directory:
 ScriptAlias /cgi-bin /var/www/cgi-bin
 (http://httpd.apache.org/docs/howto/cgihtml#scriptalias)
 SuEXEC
 Think about using suEXEC or cgiwrap!
 Normally CGI scripts run as the same user as the 
 webserver.  Using suEXEC, they run as a particular user, 
 which lets you contain damage.
 Add --enable-suexec to your ./configure statement,
 recompile and restart the server.  If the server finds
 the suexec binary at the right place, 
/usr/local/apache/sbin/suexec
 in our example, it just starts using it.
 http://httpd.apache.org/docs/suexec.html
 Remove Default Content
 In many web server vulnerabilities, example CGI scripts
 caused the vulnerability.
 Additionally, attackers often scan for specific Web
 server types by looking for its default content.  In
 the case of Apache, that might be the manual or the
 icons directory.
 Removing Default Content 
 Remove:
 /icons
 /manual
 Make sure there are no CGI scripts in the CGI 
 directory.  On Fedora, that’s:
 /var/www/cgi-bin
 Chrooting Apache
 We can contain the damage that a compromised Apache
 server can do to a system by locking it into a 
 jail directory.
 The /jail directory becomes Apache’s new root 
 filesystem.  This directory must contain every
 file on the system that Apache will need.
 Creating the Chroot - Compiling Apache
 It’s easier to re-compile Apache to put all of its
 files in one place than to use a distro’s compile,
 since the distros spread the files around the 
 filesystem.
 $ ./configure --enable-mods-shared=most 
--prefix=/usr/local/apache --enable-suexec
 $ make
 Chrooting Apache - Tools
 When you chroot anything, your two greatest
 allies are strace and ldd.
strace
 runs a child process, displaying all system calls
ldd
 lists the dynamically loaded libraries a program requires
 Chrooting Apache
 Create the primary directory structure:
 umask 022
 mkdir /jail && cd /jail
 mkdir -p dev etc lib tmp usr usr/local usr/bin usr/lib
 chmod 1777 /tmp
 Create Devices
 mknod -m 666 dev/null c 1 3
 mknod -m 666 dev/random c 1 8
 Create a passwd file
 Look at what user Apache uses and create a passwd file.
 egrep ’^user:’ /etc/passwd >etc/passwd
 egrep ’^user:’ /etc/shadow >etc/shadow
 egrep ’^group:’ /etc/group >etc/group
 ldd on /bin/bash
 ldd tells us what dynamically loaded libraries a 
 program uses.
  # ldd /bin/bash
 libtermcap.so.2 => /lib/libtermcap.so.2 (0xb75d2000)        
 libdl.so.2 => /lib/libdl.so.2 (0xb75cf000)        
 libc.so.6 => /lib/tls/libc.so.6 (0xb7498000)        
 /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0xb75eb000)
 Look for necessary libraries for all Apache 
programs
  # ldd /usr/local/apache/bin/* | sort | uniq | grep \=\>
 libapr-0.so.0 => /usr/local/apache/lib/libapr-0.so.0 
(0xb74bb000)