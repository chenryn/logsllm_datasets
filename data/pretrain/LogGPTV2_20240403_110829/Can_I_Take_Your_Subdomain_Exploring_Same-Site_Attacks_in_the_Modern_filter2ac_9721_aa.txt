title:Can I Take Your Subdomain? Exploring Same-Site Attacks in the Modern
Web
author:Marco Squarcina and
Mauro Tempesta and
Lorenzo Veronese and
Stefano Calzavara and
Matteo Maffei
Can I Take Your Subdomain? 
Exploring Same-Site Attacks in the Modern Web
Marco Squarcina, Mauro Tempesta, and Lorenzo Veronese, TU Wien; 
Stefano Calzavara, Università Ca’ Foscari Venezia & OWASP; Matteo Maffei, TU Wien
https://www.usenix.org/conference/usenixsecurity21/presentation/squarcina
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Can I Take Your Subdomain? Exploring Same-Site Attacks in the Modern Web
Marco Squarcina1 Mauro Tempesta1 Lorenzo Veronese1 Stefano Calzavara2 Matteo Maffei1
1 TU Wien
2 Università Ca’ Foscari Venezia & OWASP
Abstract
Related-domain attackers control a sibling domain of their tar-
get web application, e.g., as the result of a subdomain takeover.
Despite their additional power over traditional web attackers,
related-domain attackers received only limited attention from
the research community. In this paper we deﬁne and quantify
for the ﬁrst time the threats that related-domain attackers pose
to web application security. In particular, we ﬁrst clarify the
capabilities that related-domain attackers can acquire through
different attack vectors, showing that different instances of
the related-domain attacker concept are worth attention. We
then study how these capabilities can be abused to compro-
mise web application security by focusing on different angles,
including cookies, CSP, CORS, postMessage, and domain
relaxation. By building on this framework, we report on a
large-scale security measurement on the top 50k domains
from the Tranco list that led to the discovery of vulnerabil-
ities in 887 sites, where we quantiﬁed the threats posed by
related-domain attackers to popular web applications.
1 Introduction
The Web is the most complex distributed system in the world.
Web security practitioners are well aware of this complexity,
which is reﬂected in the threat modeling phase of most web se-
curity analyses. When reasoning about web security, one has
to consider multiple angles. The web attacker is the baseline
attacker model that everyone is normally concerned about. A
web attacker operates a malicious website and mounts attacks
by means of standard HTML and JavaScript, hence any site
operator in the world might act as a web attacker against any
other service. High-proﬁle sites are normally concerned about
network attackers who have full control of the unencrypted
HTTP trafﬁc, e.g., because they operate a malicious access
point. Both web attackers and network attackers are well
known to web security experts, yet they do not capture the
full spectrum of possible threats to web application security.
In this paper we are concerned about a less known attacker,
referred to as related-domain attacker [9]. A related-domain
attacker is traditionally deﬁned as a web attacker with an extra
twist, i.e., its malicious website is hosted on a sibling domain
of the target web application. For instance, when reasoning
about the security of www.example.com, one might assume
that a related-domain attacker controls evil.example.com.
The privileged position of a related-domain attacker endows it,
for instance, with the ability to compromise cookie conﬁden-
tiality and integrity, because cookies can be shared between
domains with a common ancestor, reﬂecting the assumption
underlying the original Web design that related domains are
under the control of the same entity. Since client authentica-
tion on the Web is mostly implemented on top of cookies, this
represents a major security threat.
Despite their practical relevance, related-domain attackers
received much less attention than web attackers and network
attackers in the web security literature. We believe there are
two plausible reasons for this. First, related-domain attackers
might sound very speciﬁc to cookie security, i.e., for many
security analyses they are no more powerful than traditional
web attackers, hence can be safely ignored. Moreover, related-
domain attackers might appear far-fetched, because one might
think that the owner of example.com would never grant con-
trol of evil.example.com to untrusted parties.
Our research starts from the observation that both previous
arguments have become questionable, and this is the right time
to take a second look at the threats posed by related-domain
attackers, which are both relevant and realistic. A key observa-
tion to make is that a related-domain attacker shares the same
site of the target web application, i.e., sits on the same regis-
trable domain. The notion of site has become more and more
prominent for web security over the years, going well beyond
cookie conﬁdentiality and integrity issues. For example, the
Site Isolation mechanism of Chromium ensures that pages
from different sites are always put into different processes,
so as to offer better security guarantees even in presence of
bugs in the browser [44]. Moreover, major browsers are now
changing their behavior so that cookies are only attached
to same-site requests by default, which further differentiates
related-domain attackers from web attackers. In the rest of
USENIX Association
30th USENIX Security Symposium    2917
the paper, we discuss other (normally overlooked) examples
where the privileged position of related-domain attackers may
constitute a signiﬁcant security threat. Finally, many recent
research papers showed that subdomain takeover is a serious
and widespread security risk [8,33]. Large organizations own-
ing a huge number of subdomains might suffer from incorrect
conﬁgurations, which allow an attacker to make subdomains
resolve to a malicious host. This problem also received at-
tention from the general media [40] and the industry [7].
Though these studies proved that related-domain attackers are
a realistic threat, they never quantiﬁed their impact on web
application security at scale.
Contributions
In the present paper, we perform the ﬁrst scientiﬁc analysis of
the dangers represented by related-domain attackers to web
application security. In particular:
1. We introduce a ﬁne-grained deﬁnition of related-domain
attacker that captures the capabilities granted to such
attackers according to the position they operate and the
associated web security threats. In particular, we sys-
tematize the attack vectors that an attacker can exploit
to gain control of a domain, and we present the attacks
that can be launched from that privileged position, dis-
cussing the additional gain with respect to a traditional
web attacker (§3).
2. We implement a toolchain to evaluate the dangers that
related-domain attackers can pose to web application se-
curity. Our toolchain builds on top of an analysis module
for subdomain takeover, which signiﬁcantly improves
over previous results [33]. We use the output of this
module to perform automated web application security
analyses along different angles, including cookies, CSP,
CORS, postMessage, and domain relaxation (§4).
3. We report on experimental results established through
our toolchain. In particular, we enumerate 26M sub-
domains of the top 50k registrable domains from the
Tranco list and discover practically exploitable vulner-
abilities in 887 domains, including major websites like
cnn.com, nih.gov, harvard.edu, and cisco.com. We
also study the security implications of 31 third-party ser-
vice providers and dynamic DNS and present a novel
subdomain hijacking technique that resulted in a bug
bounty of $1,000. Importantly, we quantify for the ﬁrst
time the impact of these vulnerabilities on web applica-
tion security, concluding that related-domain attackers
have an additional gain compared to web attackers that
goes beyond well-studied issues on cookies (§5).
We have responsibly disclosed the identiﬁed vulnerabilities
to the respective site operators. For space reasons, the results
of the notiﬁcation process are shown in Appendix A.
Table 1: Main DNS record types.
Record Type
Description
A
AAAA
CNAME
NS
CAA
Returns the IPv4 address of a domain
Returns the IPv6 address of a domain
Maps an alias name to the canonical domain name
Deﬁnes the authoritative DNS record for a domain
Speciﬁes the allowed certiﬁcate authorities for a domain
2 Background
DNS Resolution. DNS is a protocol that stands at the core
of the Internet [36]. It translates mnemonic domain names to
IP addresses used by the underlying network layer to iden-
tify the associated resources. The translation process, called
DNS resolution, is done transparently to applications. For
instance, when a browser attempts to visit a fully qualiﬁed
domain name (FQDN), such as www.example.com, the lo-
cal resolver forwards the request to one of the DNS servers
designated by the operating system. In case the DNS server
has no information on the requested domain name, it initiates
the recursive resolution from the root DNS server until the
authoritative DNS server for the domain is reached, following
the subdomain hierarchy of the DNS system. Eventually, the
authoritative DNS server returns to the client a set of Resource
Records (RRs) with the format: name, TTL, class, type, data.
A list of relevant DNS record types is summarized in Table 1.
DNS also supports wildcard RRs with the label *, such as
*.example.com. Wildcard RRs are not matched if an explicit
RR is deﬁned for the requested name. In general, wildcard
RRs have a lower priority than standard RRs [31]. For in-
stance, given a wildcard A record *.example.com and an A
record for a.example.com, requests to b.example.com and
c.b.example.com are resolved by the wildcard, while re-
quests to a.example.com are matched by the corresponding
A record. Notice that c.a.example.com is not resolvable.
Public Sufﬁx List. While DNS deﬁnes the hierarchical struc-
ture of domain names, the Public Sufﬁx List (PSL) is a catalog
of domain sufﬁxes controlled by registrars [38]. In contrast
to Top-Level Domains (TLDs) that are deﬁned in the Root
Zone Database [27], such as .com, .org, .net, the sufﬁxes
listed in the PSL are called effective TLDs (eTLDs) and de-
ﬁne the boundary between names that can be registered by
individuals and private names. A domain name having just
one label at the left of a public sufﬁx is commonly referred
to as registrable domain, eTLD+1, or apex domain. Domains
sharing the same eTLD+1 are said to belong to the same site.
Cookies are scoped based on the deﬁnition of site, i.e., sub-
domains of the same site can share cookies (domain cookies)
by setting their Domain attribute to a common ancestor. This
attribute can never be set to a member of the PSL: for in-
stance, since github.io is in the PSL, foo.github.io is
not allowed to set cookies for github.io. This means that
there is no way to share cookies between different GitHub
Pages hosted sites.
2918    30th USENIX Security Symposium
USENIX Association
Table 2: Capabilities of the related-domain attacker.
Capability
Description
headers
js
html
content
access and modify HTTP headers
arbitrary JavaScript code execution
alter the markup of the website with the exclusion of JavaScript
alter the textual content of the website with the exclusion of embed tags,
frames and JavaScript code
host arbitrary ﬁles
operate a website under HTTPS with a valid certiﬁcate
file
https
Note: js subsumes both html and content, since it is possible to
edit the DOM by using JavaScript. Similarly, html subsumes content.
ploiting a reﬂected XSS on a subdomain of a company poses
several restrictions on the actions that can be undertaken by
the attacker. This motivates the need for a new, ﬁne-grained
deﬁnition of related-domain attacker, which precisely charac-
terizes its power based on the acquired capabilities. In §3.2,
we map concrete attack vectors to the set of capabilities (see
Table 2) that the attacker may acquire when escalating to a
related-domain position. In §3.3, we link such capabilities to
web security threats, giving rise to a granular framework that
deﬁnes different instances of the related-domain attacker.
3.2 Abusing Related Domains
We provide a comprehensive characterization of the attack
vectors that can be exploited to acquire a related-domain po-
sition and identify the set of associated capabilities. While
some of these attack vectors have been already analyzed in
the literature in isolation (e.g., dangling DNS records [33] and
domain shadowing [7, 34]), it is the ﬁrst time they are system-
atized to cover the possible abuses which enable escalation to
a related-domain position. Furthermore, we introduce a novel
attack vector that exploits DNS wildcards, and we point out
concrete instances of roaming services, hosting providers, and
dynamic DNS services which are vulnerable to the threats
described in this work.
3.2.1 Dangling DNS Records
Dangling DNS records refer to records in the authoritative
DNS servers of a domain that point to expired resources.
These records should be purged right away after releasing
the pointed resources. Unfortunately, this practice is often
overlooked, resulting in dangling DNS records to persist in-
deﬁnitely. Possible reasons include lack of communication
between the person who releases the resource and the domain
owner or when the pointed resource expires automatically
after a certain period of time, passing unnoticed. A dangling
DNS record is considered vulnerable if an unintended party
can take control of the expired resource [33].
Expired Domains. A DNS CNAME record maps a domain
name (alias) to another one called canonical name. If the
canonical name is expired, a third party can simply register
the domain and serve arbitrary content under the alias domain.
Figure 1: Summary of related-domain attacker instances for dangling
DNS records.
3 The Related-Domain Attacker
We revise the threat model of the related-domain attacker in
light of the directions that the Web has taken in recent years. In
particular, we systematize for the ﬁrst time the different attack
vectors that can be exploited to escalate to a related-domain
position. We also factorize the related-domain attacker into
a set of capabilities and we express prerequisites of web at-
tacks in terms of them, as presented below and summarized
in Figure 1 for the most common subdomain takeover vulner-
abilities [33]. This systematization allows for a quantiﬁcation
of the related-domain attacker problem, which we conduct in
§5 by a large-scale measurement in the wild.
3.1 Threat Model
In its original deﬁnition, the related-domain attacker is a web
attacker who operates a malicious website that is hosted on
a related domain of the target website [9]. Two domains are
related if they share a sufﬁx that is not included in the PSL.
For instance, consider the target site example.com: all its
subdomains are related to the target, as well as being related to
each other. Network attackers are traditionally considered out
of scope, given that they could mount person-in-the-middle
attacks via, e.g., ARP spooﬁng and DNS cache poisoning,
which allow to easily control the IP address of any hostname
accessed by the victim [14].
Subdomain takeovers are often caused by DNS miscon-
ﬁgurations [8, 33], with consequences ranging from altering
the content of a page to full host control. Additionally, orga-
nizations frequently assign a subdomain of their corporate
domain to their users, who could maliciously take advantage
of this implicit trust. Vulnerable web applications can also be
inﬁltrated to increase the privileges of attackers interested in
exploiting their related domains.
As we elaborate in the following, the attack vector exploited
to acquire a related-domain position is not a detail, but has
an impact on the capabilities granted to the attacker. While
full control of the host grants the attacker the ability to con-
ﬁgure the web server to host arbitrary content, other attack
scenarios only grant more limited power. For example, ex-
USENIX Association
30th USENIX Security Symposium    2919
Expired DomainsDiscontinued ServicesDeprovisioned Cloud Inst.headersjshtmlcontentfilehttpsCookiesCSPCORSpostMessagedomain relaxationEnablesMay enableMay be requiredAttackers exploiting this vulnerability have full control of
the host and generally can rely on all the capabilities listed
in our framework. One exception is https in presence of a
CAA DNS record [25]: this record deﬁnes a list of Certiﬁ-
cate Authorities (CAs) which are allowed to issue certiﬁcates
for a given domain, possibly preventing attackers to rely on
automated CAs like Let’s Encrypt [2].
Discontinued Services. Third-party services are widely
used to extend the functionalities of a website. Domain
owners can integrate rich platforms by making them ac-
cessible under a subdomain of their organization, e.g.,
blog.example.com could show a blog hosted by WordPress
and shop.example.com could be an e-shop run by Shopify.
To map a (sub)domain to a service, an integrator typically
has (i) to conﬁgure a DNS record for the (sub)domain, such
as A/AAAA, CNAME or NS, to point to a server controlled by
the service provider, and (ii) to claim the ownership of the
(sub)domain in the account settings of the service. If the ser-
vice provider does not verify the domain ownership explicitly,
i.e., a DNS record pointing to the service is the only condition
required to claim the ownership of a (sub)domain, an attacker
could map to their account any unclaimed (sub)domain with
a valid DNS record in place [33].
In addition, we observe that dangling records can also
occur due to the presence of DNS wildcard. Consider, for
example, a site operator conﬁguring a DNS wildcard such
as *.example.com pointing to a service provider IP to en-
able multiple websites to be hosted under subdomains of
example.com. An attacker could bind a subdomain of their
choice, e.g., evil.example.com, to a new account on the
service provider. Surprisingly, we discovered that some ser-
vice providers do not verify the ownership of a subdomain
even if the parent domain has been already mapped to an
existing account. In practice, this allows an attacker to claim
evil.proj.example.com also in presence of a legitimate
binding for proj.example.com. Even worse, we found that
some service providers perform an automatic redirection of
the www-preﬁxed subdomains to their parent domains without
preventing the www subdomain from being associated to a
different account. We report on this novel attack in §5.1.2.
Attackers’ capabilities vary depending on the platform and
range from altering the content of a single page to full host
control. We refer to §5 for the result of a thorough security
investigation conducted on 31 service providers.
Deprovisioned Cloud Instances. The ephemeral nature of
resources allocated in Infrastructure as a Service (IaaS) envi-
ronments is known to facilitate the spread of dangling DNS
records. DNS records pointing to available IP addresses in
the cloud can be abused by a determined attacker who rapidly
allocates IP addresses in order to control the target of the
dangling DNS record [8, 33]. Similarly to expired domains,
the presence of a CAA DNS record in a parent domain could
hinder the capability of obtaining a valid TLS certiﬁcate.
3.2.2 Corporate Networks and Roaming Services
Large organizations often assign fully qualiﬁed domain names