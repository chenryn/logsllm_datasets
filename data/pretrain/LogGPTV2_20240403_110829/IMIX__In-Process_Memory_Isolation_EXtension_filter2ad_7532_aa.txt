title:IMIX: In-Process Memory Isolation EXtension
author:Tommaso Frassetto and
Patrick Jauernig and
Christopher Liebchen and
Ahmad-Reza Sadeghi
IMIX: In-Process Memory Isolation EXtension
Tommaso Frassetto, Patrick Jauernig, Christopher Liebchen, 
and Ahmad-Reza Sadeghi, Technische Universität Darmstadt
https://www.usenix.org/conference/usenixsecurity18/presentation/frassetto
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.IMIX: In-Process Memory Isolation EXtension
Tommaso Frassetto Patrick Jauernig Christopher Liebchen Ahmad-Reza Sadeghi
Technische Universität Darmstadt, Germany
{tommaso.frassetto, patrick.jauernig, christopher.liebchen, ahmad.sadeghi}@trust.tu-darmstadt.de
Abstract
Memory-corruption attacks have been subject to exten-
sive research in the latest decades. Researchers demon-
strated sophisticated attack techniques, such as (just-in-
time/blind) return-oriented programming and counterfeit
object-oriented programming, which enable the attacker
to execute arbitrary code and data-oriented attacks that
are commonly used for privilege escalation. At the same
time, the research community proposed a number of ef-
fective defense techniques.
In particular, control-ﬂow
integrity (CFI), code-pointer integrity (CPI), and ﬁne-
grained code randomization are effective mitigation tech-
niques against code-reuse attacks. All of these tech-
niques require strong memory isolation. For example,
CFI’s shadow stack, CPI’s safe-region, and the random-
ization secret must be protected from adversaries able to
perform arbitrary read-write accesses.
In this paper we propose IMIX, a lightweight,
in-
process memory isolation extension for the Intel-based
x86 CPUs. Our solution extends the x86 ISA with a
new memory-access permission to mark memory pages
as security sensitive. These memory pages can then only
be accessed with a newly introduced instruction. Unlike
previous work, IMIX is not tailored towards a speciﬁc
defense (technique) but can be leveraged as a primitive to
protect the data of a wide variety of memory-corruption
defenses. We provide a proof of concept of IMIX us-
ing Intel’s Simulation and Analysis Engine. We extend
Clang/LLVM to include our new instruction, and en-
hance CPI by protecting CPI’s safe region using IMIX.
1
Introduction
Memory-corruption attacks have been a major threat
against modern software for multiple decades. Attack-
ers leverage memory-corruption vulnerabilities to per-
form multiple malicious activities including taking con-
trol of systems and exﬁltrating information. Memory-
corruption attacks can be roughly divided into the cat-
egories code-injection [3], code-reuse [50, 52, 54], and
data-only attacks [12, 28, 29]. While code-injection at-
tacks introduce new malicious code into the vulnerable
program, code-reuse attacks reuse the existing code in
an unintended way. Data-only attacks in turn aim to in-
ﬂuence the program behavior by modifying crucial data
variables, e.g., used in branching conditions.
Defenses against memory-corruption typically reduce
the attack surface by preventing the adversary from cor-
rupting part of the application’s memory which is essen-
tial for a successful attack. Prominent examples include:
W⊕X [44, 48] which prevents data from being executed,
and hence, code-injection attacks; Control Flow Integrity
(CFI) [1] and Code-Pointer Integrity (CPI) [38] which
protect code pointers to prevent code-reuse attacks; and
Data Flow Integrity (DFI) [2, 10] mitigating data-only
attacks by restricting data access.
Some of these defenses can be implemented efﬁciently
using mechanisms that reside entirely outside the un-
derlying application process. For instance, the kernel
conﬁgures W⊕X and the hardware enforces it. Hence,
the adversary cannot tamper with this defense mecha-
nism when exploiting a memory-corruption vulnerabil-
ity in the application. However, using an external mech-
anism is not always feasible in practice due to high per-
formance overhead. For instance, CFI requires run-time
checks and a shadow stack [1, 9, 18], which is updated
every time a function is invoked or returns. CPI requires
run-time checks and a safe region, which contains meta-
data about the program’s variables. The required code for
these defenses can be efﬁciently protected when marked
as read-only, just like the application code. However,
as of today no architectural solution exists that protects
the data region of these defenses from unintended/ma-
licious accesses. This data cannot be stored outside of
the process, e.g., in kernel memory, because accessing it
would impose an impractical performance overhead due
to the time needed for a context switch. Hence, to pre-
USENIX Association
27th USENIX Security Symposium    83
vent the adversary from accessing the data some form
of in-process memory isolation is needed, i.e., a mech-
anism ensuring access only by the defense code while
denying access by the potentially vulnerable application
code. However, devising a memory isolation scheme for
current x86 processors is challenging.
Memory Isolation Approaches. A variety of mem-
ory isolation solutions have been proposed or deployed
both in software and/or hardware. Software solutions
use either access instrumentation [8, 61], or data hid-
ing [6, 38]. Instrumentation-based memory isolation in-
serts run-time checks before every memory access in the
untrusted code in order to prevent accesses to the pro-
tected region. However, it imposes a substantial perfor-
mance overhead, for instance, code instrumented using
Software Fault Isolation (SFI) incurs an overhead up to
43% [51]. Data hiding schemes typically allocate data at
secret random addresses. Modern processors have sufﬁ-
ciently large virtual memory space (140 TB) to prevent
brute-force attacks. The randomized base address must
be kept secret and is usually stored in a CPU register.
However, ensuring that this secret is not leaked to the ad-
versary is challenging, especially if the program is very
complex. For instance, compilers sometimes save regis-
ters to the stack in order to make room for intermediate
results from some computation. This is known as regis-
ter spilling and can leak the randomization secret [14].
Moreover, even a large address space can successfully
be brute-forced as it was shown on an implementation
of CPI [22, 24]. Thus, current in-process memory iso-
lation either compromises performance or offers limited
security.
Memory protection based on hardware extensions is an-
other approach to achieve in-process isolation. For in-
stance, Intel has recently announced Control-ﬂow En-
forcement Technology [33] and Memory Protection
Keys [34] (already available on other architectures, e.g.
memory domains on ARM32 [4]). However, these tech-
nologies either provide hardware support limited to a
speciﬁc mitigation, or cause unnecessary performance
overhead. We will discuss those technologies in a more
detailed way in Section 8.
Goals and Contributions.
In this paper we present
IMIX, which enables lightweight in-process memory
isolation for memory-corruption defenses that target the
x86 architecture. IMIX enables isolated pages. Marked
with a special ﬂag, isolated pages can only be accessed
using a single new instruction we introduce, called
smov. Just like defenses like W⊕X protect the code of
run-time defenses from unintended modiﬁcations, IMIX
protects the data of those defenses from unintended ac-
cess.
In contrast to other recently proposed hardware-
based approaches we provide an agnostic ISA extension
that can be leveraged by a variety of defenses against
code-reuse attacks to increase performance and security.
To summarize, our main contributions are:
• Hardware primitive to isolate data memory. We
propose IMIX, a novel instruction set architecture
(ISA) extension to provide effective and efﬁcient in-
process isolation that is fundamental for the security
of memory-corruption defenses (metadata protec-
tion). Therefore, IMIX introduces a new memory-
access permission to protect the isolated pages,
which prevents regular load and store instructions
from accessing this memory. Instead, the code part
of defense mechanisms needs to use our newly in-
troduced smov instruction to access the protected
data.
• Proof-of-concept implementation. We provide a
fully-ﬂedged proof of concept of IMIX. In partic-
ular, we leverage Intel’s Simulation and Analysis
Engine [11] to extend the x86 ISA with our new
memory protection, and to add the smov instruc-
tion. Further, we extend the Linux kernel to support
our ISA extension and the LLVM compiler infras-
tructure to provide primitives for allocation of pro-
tected memory, and access to the former. Finally,
we demonstrate how defenses against memory-
corruption attacks beneﬁt from using IMIX by port-
ing code-pointer integrity (CPI) [38] to leverage
IMIX to isolate its safe-region.
• Thorough evaluation. We evaluate the perfor-
mance by comparing our IMIX-enabled port of CPI
to the original x86-64 variant. Further, we compare
our solution to Intel’s Memory Protection Keys and
Intel’s Memory Protection Extensions [34] over-
head for CPI.
2 Background
In this section we provide the necessary technical back-
ground which is necessary for understanding the remain-
der of this paper. We ﬁrst provide a brief summary of
memory corruption attacks and defenses, and then ex-
plain memory protection on the x86 architecture.
2.1 Memory Corruption
C and C++ are popular programming languages due
to their ﬂexibility and efﬁciency. However, their re-
quirement for manual memory management places a
burden on developers, and mistakes easily result
in
memory-corruption vulnerabilities which enable attack-
ers to change the behavior of a vulnerable application
84    27th USENIX Security Symposium
USENIX Association
during run time. For example, a missing bounds check
during the access of a buffer can lead to a buffer over-
ﬂow, which enables the attacker to manipulate adjacent
memory values. With a write primitive in hand the at-
tacker can achieve different levels of control of the tar-
get, such as changing data ﬂows within the application,
or hijacking the control ﬂow. When conducting a data-
ﬂow attack [28, 29], the attacker manipulates data point-
ers and variables that are used in conditional statements
to disclose secrets like cryptographic keys. In contrast,
during a control-ﬂow hijacking attack, the attacker over-
writes code pointers, which are later used as a target ad-
dress of an indirect branch, to change control ﬂow to
execute injected code [3] or to conduct a code-reuse at-
tack [50, 52, 54].
There exist different approaches to mitigate these at-
tacks, however, they all have in common that they are
part of the same execution context as the vulnerable ap-
plication, and often make a tradeoff between practicality
and security.
For example, combining SoftBounds [46] and CETS [47]
guarantees memory safety for applications written in
C, and hence, prevent
the exploitation of memory-
corruption vulnerabilities in the ﬁrst place. Unfortu-
nately, these guarantees come with an impractical per-
formance overhead of more than 100%. To limit the per-
formance impact, other mitigation techniques focus on
mitigating certain attack techniques. To mitigate control-
ﬂow hijacking attacks, these techniques prevent the cor-
ruption of code pointers [38], verify code pointers before
they are used [1], or ensure that the values of valid code
pointers are different for each execution [16].
Another common aspect of every memory-corruption
mitigation technique is that they reduce the attack sur-
face of a potentially vulnerable application to the miti-
gation itself.
In other words, if the attacker is able to
manipulate the mitigation or memory on which the mit-
igation depends, she can undermine the security of the
mitigation. The protection mitigation’s memory is hard
because it is part of the memory which the attacker can
potentially access.
Next, we provide a short overview memory protection
techniques, which are available on the x86 architecture,
that can be leveraged to protect the application’s and mit-
igation’s memory.
2.2 Memory Isolation
The x86 architecture offers different mechanisms to en-
force memory protection. Segmentation and paging are
the most well-known ones. However, recently, Intel and
AMD proposed a number of additional features to protect
and isolate memory. As we argue in Section 8, IMIX
is most likely to be adapted for Intel-based x86 CPUs,
hence, we focus in this section on memory protection
features that are implemented or will be implemented
for Intel-based x86 CPUs. Note that in most cases AMD
provides a similar feature using different naming conven-
tion. Finally, we shortly discuss software-based memory
isolation.
Traditional Memory Isolation. Segmentation and
paging build a layer of indirection for memory accesses
that can be conﬁgured by the operating system, and the
CPU enforces access control while resolving the indirec-
tion.
Segmentation is a legacy feature that allows developers
to deﬁne segments that consists of a start address, size,
and an access permission. However, on modern 64-bit
systems access permissions are no longer enforced. Nev-
ertheless, many mitigations [6, 18, 38, 41] leverage seg-
mentation to implement information hiding by allocating
their data TCB at a random address, and ensure that it is
only accessed through segmentation.
On modern systems, paging creates an indirection that
maps virtual memory to physical memory. The map-
ping is conﬁgured by the operating system through a data
structure known as page tables, which contain the trans-
lation information and a variety of access permissions.
The paging permission system enables the operating sys-
tem to assign memory to either itself or to the user mode.
To isolate different processes from each other, the oper-
ating system ensures that each process uses its own page
table. Due to legacy reasons, paging does not differen-
tiate between the read and execute permission, which is
why modern systems feature the “non-executable” per-
mission. Further, paging allows to mark memory as
(non-)writable.
New Memory Protection Features. Recently intro-
duced or proposed features that enable memory isola-
tion on x86 are Extended Page Tables (EPT), Mem-
ory Protection Extensions (MPX), Software Guard Ex-
tensions (SGX), Memory Protection Keys (MPK) and
Control-ﬂow Enforcement Technology (CET). We pro-
vide a comparison in Section 9.
The EPT facilitate memory virtualization and are con-
ceptually the same as regular page tables, except that
they are conﬁgured by the hypervisor, and allow to set the
read/write/execute permission individually. Hence, pre-
vious work leveraged the EPT to implement execute-only
memory [16, 58, 63]. MPX implements bounds check-
ing in hardware. Therefore, it provides new instructions
to conﬁgure a lower and upper bound for a pointer to a
buffer. Then, before a pointer is dereferenced, the de-
veloper can leverage another MPX instruction to quickly
check whether this address points into the buffers bound-
aries. SGX allows to create enclaves within a process
USENIX Association
27th USENIX Security Symposium    85
that are completely isolated from the rest of the system
at the cost of high overhead when switching the execu-
tion to the code within an enclave. MPK introduces a