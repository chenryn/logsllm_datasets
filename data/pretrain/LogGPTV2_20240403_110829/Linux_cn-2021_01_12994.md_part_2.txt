用这些命令来定位自己的方向，当你被卡住的时候，会让你有一种方向感。
### 我是否已将我的提交暂存或缓存起来？
你电脑上的代码俗称为你的 工作空间   workspace 。但不是很明显的是，当你在 Git 仓库中时，你还有两个（是的，两个！）其他位置： 索引   index 和 暂存   stash 。当你写了一些内容，然后**添加**时，你是把它添加到索引中，也就是准备提交的缓存内容。有的时候，你的索引中的文件还没有准备好提交，但你想查看另一个分支。这时，暂存就派上用场了。你可以使用 `git stash` 将索引了但尚未提交的文件存储到暂存区中。当你准备好取回文件时，运行 `git stash pop` 将更改带回索引中。
下面是一些你需要使用暂存区和缓存区的命令：
* `git diff ...origin/master` —— 显示最近的本地提交和远程的 `origin` 版本库的 `master` 分支之间的差异。
* `git diff --cached` —— 显示最近的本地提交与添加到本地索引的内容之间的任何差异。
* `git stash` —— 将索引的（已添加但未提交的）文件放在暂存区堆栈中。
* `git stash list` —— 显示暂存区堆栈中的变化。
* `git stash pop` —— 将最近的变化从暂存库中删除。
### 无头骑士
Git 里面有各种比喻。当我想到 `HEAD` 是哪里的时候，我就会想到火车线路。如果你最终处于 脱离的 HEAD   detached HEAD 模式，就意味着你已经脱离了这个隐喻的轨道。
`HEAD` 是指向当前签出分支中最近一次提交的指针。默认的“签出checkout”是指当你创建一个 Git 仓库并进入到 `master` 分支的时候。每次创建或修改到另一个分支时，你都会切换到该分支行。如果你在当前分支的某处进行 `git checkout `，`HEAD` 就会移动到该提交。如果没有提交历史记录将你的当前提交连接到已签出的提交，那么你将处于脱离的 `HEAD` 状态。如果你找不到 `HEAD` 的位置，你可以随时用 `git reset --hard origin/master` 来删除修改，回到已知状态。*警告：这将删除你上次推送到 `master` 后的任何改动。*
### 你是上游还是下游？
你的项目的本地副本被认为是你的本地版本库，它可能有也可能没有远程版本库 —— 远程版本库的副本是用于协作或保存的。也可能还有一个 上游   upstream 版本库，在那里，项目的第三个副本由不同的贡献者托管和维护。
例如，假设我想为 Kubernetes 做贡献。我会首先将 `kubernetes/kubernetes` 项目 复刻   fork 到我的账户下 `mbbroberg/kubernetes`。然后我会将我的项目克隆到我的本地工作区。在这种情况下，我的本地克隆是我的本地仓库，`mbbroberg/kubernetes` 是我的远程仓库，`kubernetes/kubernetes` 是上游。
### 合并的隐喻
当你深入 Git 分支时，根系统的视觉效果就会和火车轨道的形象合二为一。分支通常被用作开发一个新功能的方式，最终你想把它 合并   merge 到主分支中。当这样做时，Git 会按顺序保留共同的提交历史，然后将你的分支的新提交追加到历史中。这个过程有一大堆的细节：是否 变基   rebase ，是否添加一个 合并提交   merge commit ，[Brent Laster](https://opensource.com/users/bclaster) 在《[如何在 Git 中重置、恢复和返回之前的状态](https://opensource.com/article/18/6/git-reset-revert-rebase-commands)》中会有更详细的探讨。
### 我想现在就去 Git
要掌握 Git 命令的世界，有大量的术语和需要探索的地方。我希望这篇关于日常使用术语的第一人称探索能帮助你适应这一切。如果你觉得自己被卡住了或者遇到了挫折，欢迎在 Twitter [@mbbroberg](https://twitter.com/mbbroberg) 上联系我。
#### 回顾
*  提交   Commit  —— 将当前索引的内容保存在一个新的提交中，并附上用户描述更改的日志信息。
*  分支   Branch  —— 指向一个提交的指针。
* `master` —— 第一个分支的默认名称。
* `HEAD` —— 指向当前分支上最近一次提交的指针。
*  合并   Merge  —— 合并两个或多个提交的历史。
*  工作空间   Workspace  —— Git 仓库本地副本的通俗名称。
*  工作树   Working tree  —— 工作区中的当前分支；任何时候你都可以在 `git status` 的输出中看到这个。
*  缓存   Cache  —— 用于临时存储未提交的变更的空间。
*  索引   Index  —— 变更提交前存储其变化的缓存。
* 跟踪和未跟踪的文件 —— 没有被索引缓存的文件或尚未加入其中的文件。
*  暂存   Stash  —— 另一个缓存，作为一个堆栈，在这里可以存储更改而不需要提交它们。
* `origin` —— 远程版本库的默认名称。
*  本地仓库   Local repository  —— 也就是你在工作站上保存 Git 仓库副本的地方。
*  远程存储库   Remote repository  —— Git 存储库的第二副本，你可以在这里推送变更以便协作或备份。
*  上游存储库   Upstream repository  —— 你跟踪的远程存储库的通俗说法。
*  拉取请求   Pull request  —— 这是 GitHub 的专用术语，用于让其他人知道你推送到仓库分支的变化。
*  合并请求   Merge request  —— 这是 GitLab 的专用术语，用于让其他人知道你推送到仓库分支的变化。
* `origin/master` —— 远程版本库及其主要分支的默认名称。
后记：双关语是 Git 最好的部分之一，愿你喜欢。
---
via: 
作者：[Matthew Broberg](https://opensource.com/users/mbbroberg) 选题：[lujun9972](https://github.com/lujun9972) 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出