composed of multiple layers, including pooling and fully connected
layers. We used a similar probabilistic grid search as used earlier, except
allowing both the hyper-parameters and the model layers to be ac-
tively tuned in response to better performance. Under cross-validation
and 75%/25% train/test split, we show our results demonstrating the
Figure 1: High-Level Architecture of the memory extraction,
pre-processing and feature selection, and model evaluation.
Figure 2: Average Pre-Processing Time for Benign (left) and Ma-
licious (right) Memory Snapshots
3 PRE-PROCESSING AND FEATURE SELECTION
With the first phase of snapshot extraction completed, we investigated
various approaches for representing the memory snapshots, with-
out relying on domain-knowledge of the OS. Challenges arose with
many aspects of this problem, particularly with how to store the data
generated earlier, and more importantly, how to derive statistical and
numerical features from binary data (the snapshot) that are compre-
hensive enough to uniquely identify each class of snapshots, benign
or malicious. Beyond extracting features in vectors per sample, we
generated images for use in a Convolutional Neural Network and byte
sequences for a Recurrent Neural Network with LSTM cells. Overall,
we attempted to rid ourselves of the problem of expert knowledge by
leveraging modern machine learning to learn the data itself after our
system provides adequate feature representations.
Shown in Figure 1, for every malicious or benign snapshot, we
applied two additional transformations beyond using the full snapshot
before generating representations: (1) we removed the null-bytes in
the images, reducing the snapshot size by over half, and (2) applied a
recent system called MemScrimper [1] to deduplicate the snapshots
based on a reference snapshot (which is the 0% image for the malicious
snapshots, and the clean state of the VM for the benign snapshots).
After this, we extracted images of various sizes (1000x1000, 2500x2500,
and 5000x5000) by condensing the entire binary matrix, which is done
by averaging every n bytes, where n depends on the original size of
the snapshot. A sample of these images is shown in architecture dia-
gram in Figure 1. We also generated condensed raw byte sequences
POSTER: Towards Architecture and OS-Independent Malware Detection via Memory Forensics
CCS ’18, October 2019, Toronto, CA
ML Algorithm
Decision Tree
Logistic Regression
Random Forest
SGD
SVM
Traditional ML Algorithms: Benign vs. Assorted%, Memscrimper
Mean Test Score (Accuracy) Mean Fit Time (s)
0.995851
0.994814
0.996507
0.991555
0.994518
Mean Score Time (s)
0.001449
0.0247176
0.002633
0.012932
0.013279
0.017205
0.081668
0.781202
0.033968
0.125464
FPR
0.002667%
0.002667%
0.002667%
0.001778%
0.002667%
Table 2: Results obtained from running 9,000 deduplicated memory captures through several different traditional machine learning
algorithms with a train/test split of 25%.
accuracy over 50 epochs in Figure 3. For over 3,000 samples evenly bal-
anced between benign and malicious image representations, our best
CNN model finished with an accuracy of 98% when using the largest
size of images generated based on a non-condensed memory snapshot.
Because of our low sample size, we also include rigorous data aug-
mentation aligned with the best practices in the Keras deep learning
library, which increases the generality of the model when training.
Though the full image representation indicates strong accuracy, worse
performance was found for the null-byte-removed and MemScrimper
representations. Regardless, our future work includes training and test-
ing on more samples, which our experiment infrastructure continues
to extract from the benign and malicious host testbeds.
Figure 3: CNN Accuracy over 50 Epochs for Random Percent
Malicious Snapshot (left) versus 99% Malicious Snapshot (right)
6 RELATED WORK
Most closely related to our analysis of memory snapshots as images is
work originally by Nataraj et al. and Kamundala et al. [6, 7]. Nataraj fo-
cused on representing malware executables as images, which was then
followed by extensions to the original study applying a CNN-based
strategy to other forms of malware, including datasets of Android
samples [4] and the traffic flows of active malware samples [13]. Our
work differs significantly from these systems once we consider the
entire memory snapshot of a device containing a malware’s trail in
volatile memory.
With a similar motivation and a benign dataset developed concur-
rently but independently of ours, the DeepMem system by Song et
al. [11] to appear in CCS 2018 leverages graph-based deep learning to
locate domain-specific data in memory snapshots. Beyond the similar
datasets, our work diverges in that our approach requires no specific
representation of the data in the snapshot, rather leveraging an ar-
ray of statistical and numerical features independent of any inherent
structure.
7 CONCLUSION AND FUTURE WORK
In this paper, we presented to the best of our knowledge, the first
steps towards an OS and architecture-independent malware detection
system, exploiting an array of pre-processing techniques, domain-
unaware feature selection, and a suite of machine learning algorithms.
We built a system for capturing memory snapshots compromised by
malware, as well as a completely novel benign memory snapshot
dataset, totalling several hundred TB in space before pre-processing.
With our datasets, we ultimately evaluated the feasibility of our ap-
proach by testing against 3,000+ samples balanced between benign and
malicious snapshots and with cross-validation. Our system achieved
over 98% accuracy with low false-positive-rate for most traditional ma-
chine learning algorithms and saw similar results for a more complex,
image-based CNN architecture.
Future Work: In order to truly realize the feasibility of our system
in practice, several extensions must be made to our work presented
here. A non-exhaustive list of next steps include: (1) continue to collect
more samples from our distributed infrastructure for analysis. (2)
Evaluate the performance of our models and the pre-processing time
for memory snapshots larger than 1 GB. (3) Present results from an
upcoming deployment of our models on real-world IT infrastructure
at several pilot sites, which should indicate whether our combination
of MalRec and our own benign dataset truly represent the state of
machines in practice. (4) Demonstrate similar results on a dataset of
compromised and benign Mac and Linux memory snapshots, though
work must be done to create benign and compromised datasets for each,
since MalRec only provides Windows data. (5) Include an evaluation
of LSTMs and RNNs for this task, both on the binary sequences and
feature vectors. (6) Attempt to correlate a compromised snapshot’s
feature vector of statistical metrics back to the OS-specific cause for
the sample to be flagged as malicious.
REFERENCES
[1] Michael Brengel and Christian Rossow. 2018. MemScrimper - Time- and Space-
Efficient Storage of Malware Sandbox Memory Dumps. DIMVA (2018).
Endcase Forensics.
https://www.guidancesoftware.com/
[2] Endcase. 2018.
encase-forensic
[3] Google. 2018. Rekall Forensics. http://rekall-forensic.com
[4] TT Huang and Kao HY. 2017. R2-D2: Color-Inspired Convolutional Neural Network
(CNN)-Based Android Malware Detection. https://arxiv.org/abs/1705.04448. arxiv.org
(2017).
[5] IBM, Ponemon Institute. 2018. Cost of Data Breach Study. https://www.ibm.com/
security/data-breach
[6] Espoir K Kamundala and Chang Hoon Kim. 2018. CNN Model to Classify Malware
Using Image Features. KIISE Transactions on Computing Practices 24, 5 (2018), 256–
261.
[7] Lakshmanan Nataraj, Sreejith Karthikeyan, Gregoire Jacob, and BS Manjunath. 2011.
Malware Images: Visualization and Automatic Classification. In Proceedings of the
8th International Symposium on Visualization for Cyber Security. ACM, 4.
[8] Giorgio Severi, Tim Leek, and Brendan Dolan-Gavitt. 2018. Malrec - Compact Full-
Trace Malware Recording for Retrospective Deep Analysis. DIMVA (2018).
[9] Karen Simonyan and Andrew Zisserman. 2015. Very Deep Convolutional Networks
for Large-Scale Image Recognition. International Conference on Learning Representa-
tions (ICLR) (2015).
[10] Jared M Smith, Elliot Greenlee, and Aaron Ferber. 2017. DEMO: Akatosh - Automated
Cyber Incident Verification and Impact Analysis. CCS (2017), 2463–2465.
[11] Song, Wei, Yin, Heng, Liu, Chang, and Song, Dawn. 2018. DeepMem: Learning
Graph Neural Network Models for Fast and Robust Memory Forensic Analysis. ACM
Conference on Computer and Communications Security (CCS) (2018).
[12] The Volatility Foundation. 2018.
Volatility Foundation.
https://www.
volatilityfoundation.org
[13] W Wang, M Zhu, X Zeng, and Ye X. 2017. Malware Traffic Classification Using
IEEE International
Convolutional Neural Network for Representation Learning.
Conference on Information Networking (ICOIN) (2017).