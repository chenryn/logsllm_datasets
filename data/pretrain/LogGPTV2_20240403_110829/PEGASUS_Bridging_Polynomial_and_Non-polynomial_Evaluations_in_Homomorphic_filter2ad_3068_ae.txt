(resp. max-tree). Then, we can compute the min-index (resp.
max-index) using the predicate function T (x) = I(x ≤ 0)
evaluated on mi−min (resp. mi−max) with extra O(t) LUT
evaluations. In total
the min-index/max-index evaluation
needs O(3t) LUTs.
Cheon et al.’s numeric method [16] can also compute the
max/min-index but at
the cost of a longer latency than
PEGASUS which is conﬁrmed in our experiments.
B. Application II: Private Decision Tree Evaluation
Decision tree is a fundamental and popularly used clas-
siﬁcation algorithm. Many current works have considered a
cloud-based classiﬁcation service using decision tree evalu-
ation, using HEs to protect the query privacy for the user,
and the model privacy for the cloud [5], [37], [40], [50],
[51]. However, these approaches are either interactive, using
O(log N ) rounds of communication between the cloud and
the user or having a large communication overhead.
On the other hand, we can achieve a single-round and
communication-efﬁcient private decision tree evaluation by
using PEGASUS. Consider that each edge of the tree has a
binary variable associated to it. The value of the binary zi,j is
0 if, on the input vector a ∈ Rd, one should go from the node
φi to φj, and 1 otherwise. For each leaf node, we write vk to
denote the sum of the binary variables along a path from the
root node to the leaf φN +k. We designate vk as classiﬁcation
predictor as the input is classiﬁed in the leaf node φN +k iff.
vk = 0. Given the encryption of the input vector, the cloud
can compute the binary values {zi,j} using N LUTs. Then
the cloud aggregates the encrypted binary values along each
path in the tree and it obtains the classiﬁcation predictors.
The cloud then calls N distinct LUTs on the classiﬁcation
predictors, i.e., Tk(x) = Ck ·I(x ≤ 0) where Ck > 0 is the
class label in the leaf node φN +k. Finally, the cloud sends
k Tk(vk) to the client. The major
computation costs on the cloud side is O(2N ) LUTs and
about O((cid:100)d/n(cid:101)n log q0) bits are sent.
C. Application III: Secure Clustering on Encrypted Data
a ciphertext of the sum(cid:80)
Rao et al. [45] and Cheon et al. [17] have considered
a privacy-preserving K-mean clustering using homomorphic
encryption and two collusion-free servers. We consider the
same K-means algorithm but in a single server setting: data
are encrypted and collected to a server which performs all
the computation for the clustering. We ﬁrst introduce the
basic K-means algorithm. Then we show how to perform
the K-means clustering on encrypted data using PEGASUS.
Given a dataset of X ∈ RN×d where each row xi is a
data point and given an positive integer K (cid:28) N, the K-
centroids and data points, i.e., min(cid:80)
means clustering algorithm aims to ﬁnd out K centroids
{cj ∈ Rd}j∈(cid:104)K(cid:105)
that minimize the total distances between
j D(xi, cj). We
(cid:80)
i
Table IV: Proposed parameter sets. Bks is the digit decompo-
sition base. The scaling factors are set as ∆ ≈ 236, ∆r ≈ 245
and ∆(cid:48)r = 1. The hamming weight of secret keys is set as
h = 64. The value log Q denotes the total bits of modulus
used in SEAL (including the special modulus). All parameter
sets provide at least 119-bit of security level according to [1].
Encryption
(cid:94)RLWE
(·)
n,q0
s
RGSWn,q(cid:48)q0
(·)
RLWEn,∗
(·)
s
Key
s
SwKs→s
SwKs→s
EK
RK
Parameters
n = 210, q0 ≈ 245, σks = 213, Bks = 27, dks = 7
n = 212, q(cid:48) ≈ 260, σlut = 210
n = 216, qi ≈ 245, σckks = 3.19, log Q = 795
Size
2dksn log q0bits ≈ 5.0 MB
2dksn log q0bits ≈ 315 KB
8nn log(q(cid:48)q0) bits ≈ 420 MB
2n log((cid:81)
i∈(cid:104)L(cid:105) qi) bits ≈ 12 MB
j ) for each i ∈ (cid:104)N(cid:105) and j ∈ (cid:104)K(cid:105).
consider the square Euclidean distance D(xi, cj) = x(cid:62)i cj
here. To solve this optimization problem, iterative algorithms
are used. We write c(t)
as the j-th centroid in the t-th
j
iteration. Without loss of generality, the t-th update can be
described as follows.
1) The distance between each data point and centroid is
computed in a form of matrix D ∈ RN×K such that
D[i, j] = D(xi, c(t)
2) Compute a matrix B ∈ {0, 1}N×K such that B[i, j] =
I(j = argminlD[i, l]). In other words, B[i, j] = 1 means
that the j-th centroid is the closest one of the i-th data point.
3) Update the j-th centroid as c(t+1)
X(cid:62) ˜bj,
=
where ˜bj ∈ {0, 1}N is the j-th column of B.
Our objective is to perform the above update procedure on
encrypted data points. We assume X is already encoded and
encrypted using RLWE encryption. The distance matrix D
can be computed easily using the homomorphic operations
of the RLWE encryption. Suppose D is computed as a
RLWE ciphertext, we ﬁrst extract the ciphertexts of the
distances {cti,j ∈ LWEn,q0
. Then we
can compute the min-index among the LWE ciphertexts
¨cti,0,··· , ¨cti,K−1 ← min-index(cti,0,··· , cti,K−1).
(∆D[i, j])}i∈(cid:104)N(cid:105),j∈(cid:104)K(cid:105)
1(cid:80)
˜bj [i]
(2)
s
j
i
That
of counting (cid:80)
sum (cid:80)
i
s
¨cti,j
is ¨cti,j ∈ LWEn,q0
(∆B[i, j]). Also the reciprocal
i bj[i] can be computed by feeding the
to the reciprocal
look-up table T (x) =
1/x. Finally, we repack all
the computed LWE cipher-
texts and obtain RLWE ciphertexts of the encoded vectors
and scalars ctj ∈ RLWEn,QL(cid:48)
), and ct(cid:48)j ∈
RLWEn,QL(cid:48)
˜b0[i](cid:99)) for j ∈ (cid:104)K(cid:105), which are then
used to update the centroid vectors. We stress that the linear
transform X(cid:62) ˜bj can be computed using an similar tiling
idea in Algorithm 5 which needs O(√K + log2(N/K))
rotations on ciphertexts. Also, the number of clusters K is
commonly a small value, e.g., K < 10. This allows us to
((cid:100)∆/(cid:80)
(cid:16)˜bj, ∆
(cid:17)
(Ecd
s
s
i
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:25:55 UTC from IEEE Xplore.  Restrictions apply. 
1066
Table V: Single-threaded micro-benchmarks of PEGASUS.
(cid:96) denotes the number of slots or the repacking size. We
compare with the implementation of CHIMERA from [19].
Table VI: Benchmarks of some non-polynomial functions on
Pegasus. t is the number of LWE ciphertexts. The time for
extraction and repacking were not included.
KS(s → s)
4192ms
20.14ms
208×
LUT
60s
0.93s
64×
LT
[19]
Ours
Speedup
S2C [32]†
KS(s → s)
260ms
1.49ms
174×
Fmod [33]†
log (cid:96) = 8, 10, 12
0.78s, 1.28s, 2.02s
7.06s
† The performance of our implementations of [32] and [33].
16.76s, 44.50s, 44.65s
log (cid:96) = 8, 10, 12
optimize the complexity of (2) from O(3K) LUTs to O(2K)
LUTs using the same idea in the max-pooling.
VI. EVALUATION
We now report detailed performance of PEGASUS, in-
cluding micro-benchmarks of the basic operations and the
performance of the applications of decision tree and K-
means clustering. We have implemented PEGASUS on top
of the SEAL library with extra optimizations including a
faster NTT [46] and a faster ((cid:5)) operator using a lazy-
reduction. Also, we have implemented the S2C and Fmod
functionalities based on [32] and [33, §4], respectively. More
speciﬁcally, our implementations of S2C and Fmod require 2
and 9 multiplicative depths, respectively. All experiments are
performed on a server with an Intel Xeon Platinum 8269CY
CPU (20-cores) at 2.50 GHz, compiled with gcc 7.5.0.
A. Concrete Parameters
We use L = 16 RNS primes for the ciphertext modulus.
The ﬁrst modulus is chosen q0 ≈ 245 and other moduli
are chosen slightly larger than q0. A special modulus q(cid:48) ≈
260 is used. We set the secret distribution as a hamming
weight distribution over the set of ternary polynomials of
coefﬁcients in {0,±1} subject to the condition that it has
exactly h = 64 nonzero entries. Each coefﬁcient/entry of
(R)LWE error is drawn according to the discrete Gaussian
distribution centered at zero with standard deviation σ.
Table IV illustrates the parameter sets used in our experi-
ments. For this parameter sets, the repacked ciphertexts from
Algorithm 6 have L(cid:48) = 6 moduli left. This enables us to run
our secure clustering application without using the CKKS
bootstrapping [12] because we need 2 levels for updating
the centroids, 1 level for computing the distances, and 2
more levels for S2C.
B. Micro-benchmarks for PEGASUS
The single-threaded micro-benchmarks of PEGASUS are
given in Table V. We can see that
the main-loop (i.e.,
Step 4 to Step 6) in Algorithm 6 took about a second. In
Throughput
#Threads
sigmoid/ReLU/sqrt/reciprocal
1.06/s
3.95s
7.95/s
15.34/s
20.77/s
Latency
Min-Index
Max-Pooling
2 × 2
0.25/s
0.91/s
1.97/s
3.90/s
4.83/s
4 × 4
0.07/s
0.26/s
0.50/s
0.98/s
1.21/s
Sort
1
4
8
16
20
1
4
8
16
20
#Threads
t = 25
493.30s
148.88s
73.02s
38.27s
34.10s
† [16] took about 236s (24×). ‡ [25] took about 43 mins (6.3×).
t = 26
1380.50s
409.09s‡
199.82s
104.33s
84.03s
t = 27
395.39s
124.60s
62.57s
36.33s
25.26s
t = 28
791.84s
238.73s
118.19s
66.15s
44.73s
t = 24
43.24s
176.60s
9.72s†
5.17s
5.17s
other words, the LUT evaluation throughput of PEGASUS
is about 1 LUT per second which can be boosted up easily
using multicores. To compare, we ran some benchmarks on
the same machine using the open-sourced implementation
of CHIMERA from [19]. Basically, we set the dimensions
n and n as same as ours and set other parameters of
CHIMERA to match the security level. However, the repack-
ing implementation of CHIMERA is not provided in [19]
so we compared the key-switching functions and the LUT
function. Table V shows that our framework is about two
orders of magnitude faster than CHIMERA for these basic
functions. Indeed, we adapt the evaluation key idea from
[43] in Fig. 2. This enables us to use a ternary secret whose
security is more well studied than the binary secret used
in CHIMERA. Note that, if we use a binary secret key s as
the CHIMERA does, the performance of our LUT evaluation
would be accelerated by 2×.
C. Applications Evaluation
1) Basic Non-polynomial Functions: We evaluated the