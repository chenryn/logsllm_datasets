### Architecture of PJScan

Figure 2 illustrates the architecture of PJScan, which is designed to analyze JavaScript code embedded in PDF documents. The system performs lexical analysis on the JavaScript code, and the resulting token sequence is used as input for the learning component. This component is initially trained on examples of malicious documents to generate a model for the JavaScript content in malicious PDFs. New documents are classified using this model. A detector measures the deviation of a new document from the learned model and compares it against a predefined threshold (which can also be automatically determined during the training stage). Documents that closely match the learned model are classified as malicious; otherwise, they are classified as benign.

### 3.1 Extraction of JavaScript Content

The primary challenge in extracting JavaScript content lies in decoding object streams and handling the encoding used for JavaScript. Additionally, the parser must be robust against potential incompatibilities with the PDF standard. Unlike the approach in [24], we decided to use a popular open-source PDF parser, Poppler, tailored to our needs.

Our JavaScript extractor starts by opening the PDF file and initializing Poppler and its internal data structures. It then retrieves the Catalog dictionary, which serves as the starting point for searching action dictionaries. All candidate locations listed in Section 2.2 are checked, and the found action dictionaries are queried for their type. If the type is Rendition or JavaScript and the dictionary contains the /JS key, the value of this key (or the referenced object in case of an indirect reference) is retrieved. The JavaScript entity is then decompressed and decoded if necessary.

A key aspect of our approach is that we fully process only those objects where JavaScript and Rendition action dictionaries can potentially occur. This significantly reduces the computational effort required for extraction and is crucial for batch processing large datasets. Files without any JavaScript are not processed beyond the extraction stage.

### 3.2 Lexical Analysis

Two factors motivate the use of lexical analysis for detecting malicious JavaScript code. First, accurate discrimination between malicious and benign programs at the text level is challenging. Second, malicious JavaScript code is often heavily obfuscated, and even benign JavaScript entities extracted from PDF documents can be obfuscated. Therefore, we use an intermediate representation—the set of lexical tokens—to capture the salient properties of the code for subsequent analysis.

Lexical analysis is efficiently performed using the state-of-the-art open-source JavaScript interpreter, SpiderMonkey, developed by the Mozilla Foundation. We patched SpiderMonkey to stop short of byte-code generation, allowing it to extract tokens until an end-of-file or an error is encountered. Tokens representing various syntactic elements of the JavaScript language, such as identifiers, operators, etc., are represented as symbolic names with integer values ranging from -1 (TOK_ERR) to 85.

During lexical analysis, some semantics of the code are lost. For example, all identifiers are assigned the same token (TOK_NAME), and calls to different functions with identical signatures are translated into the same token sequences. As a result, JavaScript entities that are distinct at the source code level may be non-distinct at the token sequence level.

**Example:**
- **Source Code:**
  ```javascript
  bvb('var lBvXSUfYYL7RK = ev' + 'al;'); // a real example
  lBvXSUfYYL7RK('var uzWPsX8 = this.info' + z("%2e%46%61%6b") + 'erss;');
  ```
- **Token Sequence:**
  | Value | Symbolic Name | Description |
  |-------|---------------|-------------|
  | 29    | TOK_NAME      | Identifier  |
  | 27    | TOK_LP        | Left Parenthesis |
  | 31    | TOK_STRING    | String Constant |
  | 15    | TOK_PLUS      | Plus |
  | 31    | TOK_STRING    | String Constant |
  | 28    | TOK_RP        | Right Parenthesis |
  | 2     | TOK_SEMI      | Semicolon   |
  | 29    | TOK_NAME      | Identifier  |
  | 27    | TOK_LP        | Left Parenthesis |
  | 31    | TOK_STRING    | String Constant |
  | 15    | TOK_PLUS      | Plus |
  | 29    | TOK_NAME      | Identifier  |
  | 27    | TOK_LP        | Left Parenthesis |
  | 31    | TOK_STRING    | String Constant |
  | 28    | TOK_RP        | Right Parenthesis |
  | 15    | TOK_PLUS      | Plus |
  | 31    | TOK_STRING    | String Constant |
  | 28    | TOK_RP        | Right Parenthesis |
  | 2     | TOK_SEMI      | Semicolon   |
  | 0     | TOK_EOF       | End of File |

In addition to the tokens recognized by SpiderMonkey, we have defined extra tokens that are indicative of malicious JavaScript entities. These newly introduced tokens are listed below:

| Value | Symbolic Name | Description |
|-------|---------------|-------------|
| 101   | TOK_STR_10    | String literal of length 10,000 |
| 102   | TOK_STR_100   | String literal of length 100,000 |
| 103   | TOK_STR_1000  | String literal of length 1,000,000 |
| 104   | TOK_STR_10000 | String literal of length 10,000,000 |
| 105   | TOK_STR_UNBOUND | Unbounded string literal |
| 120   | TOK_UNESCAPE  | Call to unescape() |
| 121   | TOK_SETTIMEOUT | Call to setTimeOut() |
| 122   | TOK_FROMCHARCODE | Call to fromCharCode() |
| 123   | TOK_EVAL      | Call to eval() |

The impact of these tokens on the classification performance of PJScan is evaluated in Section 5.4.

### 3.3 Learning and Classification

In the final step, the learning component of PJScan determines whether a PDF file is benign or malicious. Prior to deployment, it must be trained on a representative set of malicious PDF files. The training results in a model of malicious JavaScript entities in PDF documents. At the deployment stage, classification of new PDF documents is carried out using the learned model. After feature extraction (as described in Sections 3.1 and 3.2), the set of tokens from a new document is tested for proximity to the model.

We use the One-Class Support Vector Machine (OCSVM) [23] as the learning method. OCSVM's main advantage is that it only requires examples of one class to build a model, which is beneficial since examples of benign PDF documents with JavaScript content are rare and require significant manual effort to verify. In contrast, examples of malicious PDF documents are abundant and can be confidently identified by antivirus systems.

**Learning Stage:**
- **Objective:** Find the center \( c \) and radius \( R \) of a high-dimensional hypersphere such that the total percentage of all data points lying outside the hypersphere is at most \( \nu \).
- **Parameters:** Kernel function type and training rejection rate \( \nu \).

**Classification Stage:**
- **Objective:** Calculate the distance between the data point to be classified and the center of the hypersphere.
- **Decision Rule:** If the distance is greater than \( R \), the data point is considered an anomaly and treated as benign.

OCSVM cannot be directly applied to token sequences emitted by PJScan's feature extraction component because it expects numeric values in a high-dimensional space. To address this, we use a well-established technique of embedding sequences in metric spaces by counting the occurrences of substrings and assigning the resulting numeric values to coordinate axes.

For handling multiple JavaScript entities in the same file, we add them using the addition operation provided by the embedding. To avoid dependence on sequence length, the values in individual dimensions are binarized (by setting any positive values to 1) and normalized so that the Euclidean norm of the resulting vectors is equal to 1.

### 4. Data Collection and Analysis

The success of any learning-based approach depends on the quality of the training data. Our evaluation is based on an extensive dataset collected from the research interface to the popular malicious software portal VirusTotal. The dataset comprises 65,942 PDF documents totaling nearly 59GB.

**Data Collection:**
- **Dates:** November 3, 2010, January 19, 2011, and February 17, 2011.
- **Dataset Size:** Each batch contains all PDF files available on VirusTotal at the given time. Data is kept for 30 days, with little overlap between subsequent months.

**Data Split:**
- **Detected Sub-Corpus:** Documents flagged as malicious by at least one scanner.
- **Undetected Sub-Corpus:** Supposedly benign data.

**Statistical Properties:**
- **Average File Size:** "Detected" corpora (0.106MB) vs. "undetected" corpora (1.390MB).
- **Percentage of Files with JavaScript:** "Detected" corpora (59.5%) vs. "undetected" corpora (2.4%).
- **Average Number of JavaScript Entities per File:** "Detected" corpora (7.2) vs. "undetected" corpora (241.1).
- **Distinctness of JavaScript Entities:** "Detected" corpora (16.9%) vs. "undetected" corpora (5.2%).

**Token Level Analysis:**
- **Distinctness:** "Detected" sub-corpora (6,419) vs. "undetected" sub-corpora (35,990).

To enable quantitative evaluation of detection accuracy, we manually labeled the "undetected" part of our data. Among 960 benign files with JavaScript, many contain identical sets of token sequences, indicating common code reuse in both types of files.

**Table 1: Statistical Properties of the Dataset**

| Date         | Dataset Size | Files in Dataset | Files with JavaScript | JavaScript Entities | Distinct JavaScript Entities | Distinct Token Sequences | Distinct Files on Token Sequence Level |
|--------------|--------------|------------------|-----------------------|--------------------|------------------------------|--------------------------|----------------------------------------|
| 03. Nov. 2010 | 873MB        | 7,592            | 6,626                 | 26,372             | 8,597                        | 1,108                    | 538                                    |
| 19. Jan. 2011 | 429MB        | 6,465            | 1,127                 | 33,418             | 2,376                        | 815                      | 358                                    |
| 17. Feb. 2011 | 1.5GB        | 11,634           | 7,526                 | 50,269             | 9,238                        | 2,947                    | 1,900                                  |
| Total        | 1.5GB        | 22,490           | 492                   | 113,994            | 6,827                        | 764                      | 237                                    |

This comprehensive dataset provides a robust foundation for evaluating the effectiveness of PJScan in detecting malicious PDF documents.