# 【技术分享】Windows 7 下使用 Docker 虚拟化秒部署“漏洞靶机”实操详解
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
****
译者：[myles007](http://bobao.360.cn/member/contribute?uid=749283137)
预估稿费：300RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**一、前言**
**1\. 学习背景**
一开始本来是想搭建一个有关最近爆出的有关samaba共享的漏洞攻击环境的靶机（号称是linux版本的永恒之蓝），但是最后发现搞着搞着变成了研究docker
虚拟化去了。在整个部署的过程遇到了各种坑，这里我们把个人在学习过程中Get到的各种小技能分享于大家。
所以这篇文档的核心就是带着大家一起学习下了解怎样在Widows 7 环境下安装一个Doker
的环境，以及如果通过Docker来快速部署一个“漏洞靶机”，并实现外网对docker 容器的正常访问。
**2\. 内容概要**
Docker 基础知识
window 7环境安装Docker
Docker 容器部署靶机
实现外网对Docker容器的访问
CVE-2017-7494 Samba 远程代码执行漏洞
MSF框架下攻击演示
**二、Docker 基础知识**
Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux
机器上，即可以实现虚拟化。
容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的
app）。几乎没有性能开销，可以很容易地在机器和数据中心中运行。最重要的是，他们不依赖于任何语言、框架或包装系统。
**2.1 Docker 三个基本概念**
镜像(Image)
容器(Container)
仓库(Repository)
只要理解了上面这个是三个概念，我们就可以对Docker有个感性的认识了，大家快随我来吧。
**2.2 镜像(Image)**
2.2.1 理论概念
对于操作系统大家可能都很熟悉，操作系统一般分为内核和用户空间两部分。对于 Linux 来说，其内核启动后，会自动挂载 root
文件系统，并为用户空间支持，方便用户进行相应的数据操作。而 Docker 镜像（Image），就相当于是一个 root
文件系统。比如我们说到Docker官方镜像 ubuntu:14.04时,其实它就是一个包含了完整的 Ubuntu 14.04 最小系统的 root
文件系统。
Docker
镜像其实就是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像是不包含任何动态数据的，其内容在构建之后也不会被改变，也就是说数据与应用是完全分开的。
2.2.2 消化理解
其实技术上了这么多，对于我们这些想用Docker的人来说，我们只要知道Docker镜像就是一个xxx.iso的镜像压缩文件，且知道我们只要有了这个镜像压缩文件，通过Docker我们就可以快速部署一个我们想要的“靶机应用环境”，明确这个就OK了。
等到你用的很溜的时候，你再回来看这些利用理论概念，你就会发现豁然开朗，一切都是那么的So easy !!!
**2.3 容器(Container)**
2.3.1 理论概念
那么说到容器，我们就要从镜像（Image）和容器（Container）的关系了解下容器，这里为了让大家更好的理解容器，我们就用一个类比来给大家解释下什么是容器。
如果大家对编程有点了解的话，Docker中所说的“镜像”与“容器”的关系就像是面向对象程序设计中的“ 类”
和“实例”的关系，我们知道“类”是静态定义好的，而“实例”是在“类”的基础上创建的动态可操作的对象。
“镜像”对应的就是“类”，其是静态的定义好；
“容器”对应的就是“实例”，其就是之前定义好的类上创建出的一个动态对象。
对于容器，我们是可以被创建、启动、停止、删除、暂停等。
2.3.2 消化理解
那么说的再浅显一点就是：“镜像”是由各种大牛们整理好的“漏洞镜像环境”，然后打的一个包（xxx.iso哦！！！），而“容器”就是我们在获取到漏洞环境镜像后，在Docker引擎跑起来的真实的动态环境，而这个运行起来的“漏洞环境”就是“容器”了，也就是我们日思夜想想要的“漏洞环境靶机”了。
**2.4 Docker 仓库服务器（Docker Registry）**
2.4.1 理论概念
为什么我们能通过Docker可以快熟部署一个“漏洞环境靶机”能，就是因为有各种大牛分享出来的镜像，那这些镜像是不是应用该有一个可以集中存放和分发镜像的服务器呢，对了Docker
Registry就是这样一个仓库服务。
我们要明确一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签它对应才是一个镜像。
通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 :
的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。以 Ubuntu 镜像 为例，ubuntu
是仓库的名字，其内包含有不同的版本标签，如，14.04, 16.04。我们可以通过 ubuntu:14.04，或者 ubuntu:16.04
来具体指定所需哪个版本的镜像。如果忽略了标签，比如 ubuntu，那将视为 ubuntu:latest。
仓库名经常以 两段式路径 形式出现，比如 jwilder/nginx-proxy，前者往往意味着 Docker Registry
多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。
2.4.2 消化理解
简单的的理解Docker
Registry，其它就是一个“服务器”，这个服务器里有很多的“各类镜像仓库”，而每个仓库里又存放着各种“镜像”，同时“镜像”使用不同的“标签”来区别不同的版本信息；
2.4.2 Docker 镜像仓库服务器收集
Docker
仓库其官方库在国外，所以对于我们天朝的小伙伴们来说，是件很痛苦的的事情，还好国内也有个仓库，下面就给大家贴出链接，当然我们想要的是漏洞环境镜像库，所以我也收集了一个，大家如果有什么新的好的镜像仓库，也请分享一下。
Dokcer官方仓库：
Docker国内仓库
网易蜂巢：
daocloud：
Dokcer漏洞仓库：
**三、Windows 7 for Docker 安装**
**3.1 Windows 7 环境选择**
在这里不得不跟大家说下，个人选择使用Window 7 作为安装Docker环境的原因，由于个人PC配置比较低，跑不动Windows
10，所以一直在使用Window
7。我们如果对Dockerd的基础知识有点了解的话，我们知道docker其实使用Go语言在linux系统下开发运行的，也就是说起原始安装环境最好时linux,而如果想用window运行，就只能在window基础上先运行一个linux虚拟机，然后再在这个linux虚拟机下运行docker。
网上放出的比较多的windows 的安装教程，其大大部分都是基于windows 10 的系统进说明的，故我们这里就记录下个人在windows 7
下对于docker环境的部署安装。
**3.2 下载DockerToolbox安装包**
由于Docker
的官方现在地址不在咱们天朝，所以下载起来非常的不方便，这也是我们安装过程中遇到的第一个拦路虎了。在整个安装的过程中我就折腾了很久，后来发现国内有个站做的不错，可以直接进行安装包的下载，速度非常快，这里推荐给大家。
安装包名称：DockerToolbox.exe
主网站地址：
最新安装包：
http://dn-dao-github-mirror.daocloud.io/docker/toolbox/releases/download/v17.05.0-ce/DockerToolbox-17.05.0-ce.exe
注： 以上为个人遇到的第一个“坑”哦！！！（安装包的下载与选择）
**3.3 DockerToolbox 安装**
有关于安装包的安装基本没有什么太多需要交代，咱们默认安装一路回车即可。在安装完后会在桌面多出3个软体图片。
Oracle VM VirtualBox ++++>>> 虚拟机
Kitematic (Alpha) ++++>>> 图形化管理工具
Docker Quickstart Terminal ++++>>> 终端管理
**3.4 启动docker**
预告： 前方会有一个“坑”，请大家注意！！！
直接点击运行桌面的“Docker Quickstart
Terminal”快捷方式启动docker,不过在启动过程中我们会发现，程序会去目录“C:Usersadmin.dockermachinecache”下寻找boot2docker.iso镜像文件，如果不存在会自动去github上下载，这样的下载的速度我们是可想而知的了，而且我基本上没有成功下载成功过，所以搞到这里我们是不是就很蛋疼呢，反正我是被坑大了。
小秘密：这里告诉大家一个秘密，其实在我们的docker的安装根目录下已经有一个 boot2docker.iso镜像，只是我也不知道为什么启动程序不去这里找。
那好吧，废话不多说我们就自己手动将这个ISO文件复制到上面截图的目录“C:Usersadmin.dockermachinecache”下（注：以你安装过程中的实际目录位置为准。），然后关闭当前的启动界面，再次启动“Docker”，此时我们会发现启动的非常顺利。至此整个windows
7 环境下的docker 环境我们就部署OK了。
注：以上为个人遇到的第二个“坑”哦，因为下载不了，Docker启动会过不去！！！（boot2docker.iso镜像文件）
**四、 创建Docker容器**
终于来到Docker容器的创建了，接下来我们就进入到通过各种Docker管理工具进行Docker容器的创建了，其实Docker容器的创建真的很简单，基本上两条命令就能搞定了。
但是这里为了让大家更好的了解Docker的一些使用，我这里给大家简单的说下在Windows 环境下Docker部署的结构和几个管理的工具组件。
**4.1 Windows Docker 环境部署结构**
首先大家可以看看下面这个图，本张图主要是展现在三种操作系统（Linux/Windows/OS X）上 Docker
部署实现的不同结构，其实仔细观察会发现Docker的部署实现有两种结构类型。
直接部署Docker 环境
虚拟机+Linux虚拟主机部署Docker 环境
4.1.1 直接部署Docker 环境
前面有提到Docker 是基于GO语言在Linux平台上开发出来的程序，故Linux环境是其原生运行环境，所以Docker
是可以直接安装在相应的Linxu主机平台上。
4.1.2 虚拟机+Linux虚拟主机部署Docker 环境
那么Windows主机如果想要运行Docker环境怎么办呢？那就要借助于虚拟机环境了，所以从图中我们可以清晰的看到，Windows上安装Docker,其实现实部署了一个Linux虚拟机，然后在这个虚拟机里部署了Docker环境。
预告：这里说的Windows系统部署Docker环境的结构，就引起其后面说到的“外网默认是无法访问docker容器”问题的根源。
**4.2 Windows 下Docker 环境组件**
Windows 下安装Docker后，其主体上分为两个组件部分，即Docker machine & Docker Client
（1）Docker machine：其实就是虚拟机环境加上其内部的Docker环境；
（2）Docker client：其是为Windows 提供一个管理Docker Machine环境的客户端工具。
**4.3 创建Docker 容器**
其实上面说的这么多，都是为了这里引出使用什么工具与怎么创建一个Docker容器（即靶机环境）。
4.3.1 管理工具
在Windows 环境下可以管理Docker容器的管理工具有多个，我这里了解的不下三个：
（1）Docker Quickstart Terminal
这个工具是个命令行终端管理工具，我们双击它可以打开Docker machine服务，通过这个终端我们可以进行Dcoker容器的创建与管理。
（2）Git Bash
这个Git Bash 工具是个真正的客户端终端管理工具，我们只要选中桌面，右击鼠标节可以看到Git Bash Here了。不过我们每次使用它连接Docker
machine时，需要配置环境变量，后面再创建Docker 容器时，会介绍给大家。
（3）Kitmatic(Alpha)
这个工具是一个图像好管理工具，由于其默认只能使用官方的镜像源以及图形化操作的局限性，这里不做过多的说明，大家自行研究。