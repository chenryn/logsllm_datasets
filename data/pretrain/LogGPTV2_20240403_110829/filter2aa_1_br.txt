    学习了数据库的结构之后，开始针对特定的表格窃取你感兴趣的数据。
    Gain a Web Shell
    Another way to escalate SQL injections is to attempt to gain a web shell on the server. Let’s say we’re targeting a PHP application. The following piece of PHP code will take the request parameter named
     cmd
    and execute it as a system command:
    另一种升级 SQL 注入的方法是尝试在服务器上获得 Web Shell。假设我们的目标是一个 PHP 应用程序。以下的 PHP 代码将捕获名为 cmd 的请求参数，并将其作为系统命令来执行：
    You can use the SQL injection vulnerability to upload this PHP code to a location that you can access on the server by using
     INTO OUTFILE
    . For example, you can write the password of a nonexistent user and the PHP code
    into a file located at
     /var/www/html/shell.php
    on the target server:
    您可以利用SQL注入漏洞，使用INTO OUTFILE将此PHP代码上传到服务器上您可以访问的位置。例如，您可以将不存在用户的密码和PHP代码写入位于目标服务器上的/var/www/html/shell.php文件中。
SELECT Password FROM Users WHERE Username='abc'
UNION SELECT ""
INTO OUTFILE "/var/www/html/shell.php"
    Since the password of the nonexistent user will be blank, you are essentially uploading the PHP script to the
     shell.php
    file. Then you can simply access your
     shell.php
    file and execute any command you wish:
    由于不存在用户的密码将为空，您基本上将上传PHP脚本到shell.php文件中。然后，您可以轻松访问您的shell.php文件并执行任何您希望执行的命令：
http://www.example.com/shell.php?cmd=COMMAND
    Automating SQL Injections
    Testing for SQL injection manually isn’t scalable. I recommend using tools to help you automate the entire process described in this chapter, from SQL injection discovery to exploitation. For example, sqlmap (
     http://sqlmap.org/
    ) is a tool written in Python that automates the process of detecting and exploiting
    SQL injection vulnerabilities. A full tutorial of sqlmap is beyond the scope of this book, but you can find its documentation at
     https://github.com/sqlmapproject/sqlmap/wiki/
    .
    手动测试 SQL 注入不具可伸缩性。我建议使用工具来协助您自动化本章所描述的整个过程，从 SQL 注入发现到利用。例如，sqlmap（http://sqlmap.org/）是一种用 Python 编写的工具，可自动化检测和利用 SQL 注入漏洞。sqlmap 的完整教程超出了本书的范围，但您可以在 https://github.com/sqlmapproject/sqlmap/wiki/ 找到它的文档。
    Before diving into automating your attacks with sqlmap, make sure you understand each of its techniques so you can optimize your attacks. Most of the techniques it uses are covered in this chapter. You can either use sqlmap as a standalone tool or integrate it with the testing proxy you’re using. For example, you can integrate sqlmap into Burp by installing the SQLiPy Burp plug-in.
    在使用sqlmap自动化攻击之前，请确保您了解每个技巧，以便优化您的攻击。大多数它使用的技术都在本章中涵盖。您可以使用sqlmap作为独立工具，也可以将其与您正在使用的测试代理集成。例如，您可以通过安装SQLiPy Burp插件将sqlmap集成到Burp中。
    Finding Your First SQL Injection!
    SQL injections are an exciting vulnerability to find and exploit, so dive into finding one on a practice application or bug bounty program. Since SQL injections are sometimes quite complex to exploit, start by attacking a deliberately vulnerable application like the Damn Vulnerable Web Application for practice, if you’d like. You can find it at
     http://www.dvwa.co.uk/
    . Then follow this road map to start finding real SQL injection vulnerabilities in the wild:
    SQL注入是一种令人兴奋的漏洞，您可以在练习应用程序或漏洞赏金计划中寻找并利用它们。由于SQL注入有时很复杂，因此如果您想练习，请从攻击一个有意被攻击的应用程序开始，比如Damn Vulnerable Web Application。您可以在http://www.dvwa.co.uk/找到它。然后按照以下路线图开始在野外找到真正的SQL注入漏洞：
     Map any of the application’s endpoints that take in user input.
     Insert test payloads into these locations to discover whether they’re vulnerable to SQL injections. If the endpoint isn’t vulnerable to classic SQL injections, try inferential techniques instead.
     Once you’ve confirmed that the endpoint is vulnerable to SQL injections, use different SQL injection queries to leak information from the database.
     Escalate the issue. Figure out what data you can leak from the endpoint and whether you can achieve an authentication bypass. Be careful not to execute any actions that would damage the integrity of the target’s database, such as deleting user data or modifying the structure of the database.
     Finally, draft up your first SQL injection report with an example payload that the security team can use to duplicate your results. Because SQL injections are quite technical to exploit most of the time, it’s a good idea to spend some time crafting an easy-to-understand proof of concept.
12
      Race Conditions
    Race conditions are one of the most interesting vulnerabilities in modern web applications. They stem from simple programming mistakes developers often make, and these mistakes have proved costly: attackers have used race conditions to steal money from online banks, e-commerce sites, stock brokerages, and cryptocurrency exchanges.
    竞态条件是现代Web应用程序中最有趣的漏洞之一。它们源于开发人员常犯的简单编程错误，而这些错误已经被证明代价高昂：攻击者利用竞态条件从在线银行、电子商务网站、股票经纪公司和加密货币交易所窃取资金。
    Let’s dive into how and why these vulnerabilities happen, and how you can find them and exploit them.
    让我们深入了解这些漏洞是如何发生的，以及为什么会发生，以及您如何找到它们并利用它们。
    Mechanisms
    A
     race condition
    happens when two sections of code that are designed to be executed in a sequence get executed out of sequence. To understand how this works, you need to first understand the concept of concurrency. In computer science,
     concurrency
    is the ability to execute different parts of a program simultaneously without affecting the outcome of the program. Concurrency can drastically improve the performance of programs because different parts of the program’s operation can be run at once.
    当两个被设计按顺序执行的代码部分在不按顺序执行时，发生了竞态条件。要理解这个过程，首先需要了解并发的概念。在计算机科学中，并发是指能够同时执行程序的不同部分而不影响程序的结果。由于程序的不同部分可以同时运行，因此并发可以大大提高程序的性能。
    Concurrency has two types: multiprocessing and multithreading.
     Multiprocessing
    refers to using multiple
     central processing units (
     CPUs
     )
    , the hardware in a computer that executes instructions, to perform simultaneous computations. On the other hand,
     multithreading
    is the ability of a single CPU to provide multiple
     threads
    , or concurrent executions. These threads don’t actually execute at the same time; instead, they take turns using the CPU’s computational power. When one thread is idle, other threads can continue taking advantage of the unused computing resources. For example, when one thread is suspended while waiting for user input, another can take over the CPU to execute its computations.
    并发有两种类型：多处理和多线程。多处理是指使用多个中央处理单元（CPU），计算机中执行指令的硬件，以执行同时计算。另一方面，多线程是单个CPU提供多个线程或并发执行的能力。这些线程实际上不同时执行；相反，它们轮流使用CPU的计算能力。当一个线程空闲时，其他线程可以继续利用未使用的计算资源。例如，当一个线程被暂停等待用户输入时，另一个线程可以接管CPU执行其计算。
    Arranging the sequence of execution of multiple threads is called
     scheduling
    . Different systems use different scheduling algorithms, depending on their performance priorities. For example, some systems might schedule their tasks by executing the highest-priority tasks first, while another system might execute its tasks by giving out computational time in turns, regardless of priority.
    安排多个线程的执行顺序称为调度。不同的系统使用不同的调度算法，这取决于它们的性能优先级。例如，一些系统可能按照最高优先级任务的顺序安排任务执行，而另一个系统可能按照轮流分配计算时间的方式执行任务，不考虑优先级。
    This flexible scheduling is precisely what causes race conditions. Race conditions happen when developers don’t adhere to certain safe concurrency principles, as we’ll discuss later in this chapter. Since the scheduling algorithm can swap between the execution of two threads at any time, you can’t predict the sequence in which the threads execute each action.
    弹性调度正是导致竞争条件发生的原因。竞争条件发生在开发人员不遵守某些安全并发原则时，我们将在本章后面讨论。由于调度算法可以在任何时间之间交换两个线程的执行，因此无法预测线程执行每个动作的顺序。
    To see why the sequence of execution matters, let’s consider an example (courtesy of Wikipedia:
     https://en.wikipedia.org/wiki/Race_condition
    ). Say two concurrent threads of execution are each trying to increase the value of a global variable by 1. If the variable starts out with a value of 0, it should end up with a value of 2. Ideally, the threads would be executed in the stages shown in
     Table 12-1
    .
    为了看到执行顺序的重要性，让我们考虑一个示例（由维基百科提供：https://en.wikipedia.org/wiki/Race_condition）。假设有两个并发的执行线程，每个线程都试图将全局变量的值增加1。如果变量的初始值为0，则应该最终增加到2。理想情况下，线程应该按照表12-1中显示的阶段执行。
       Table 12-1
      : Normal Execution of Two Threads Operating on the Same Variable
      表12-1：两个线程在同一变量上正常执行
         Thread 1
         Thread 2
         Value of variable A
         Stage 1
        0
         Stage 2
        Read value of A
        0
         Stage 3
        Increase A by 1
        0
         Stage 4
        Write the value of A
        1
         Stage 5
        Read value of A
        1
         Stage 6
        Increase A by 1
        1
         Stage 7
        Write the value of A
        2
    But if the two threads are run simultaneously, without any consideration of conflicts that may occur when accessing the same resources, the execution could be scheduled as in
     Table 12-2
    instead.
    但是如果两个线程同时运行，没有考虑到访问相同资源时可能发生的冲突，执行可能会按照表12-2中的计划安排。
       Table 12-2
      : Incorrect Calculation Due to a Race Condition
      表格12-2：由于竞争条件而导致的错误计算。
         Thread 1
         Thread 2
         Value of variable A
         Stage 1
        0
         Stage 2
        Read value of A
        0
         Stage 3
        Read value of A
        0
         Stage 4
        Increase A by 1
        0
         Stage 5
        Increase A by 1
        0
         Stage 6
        Write the value of A
        1
         Stage 7
        Write the value of A
        1
    In this case, the final value of the global variable becomes 1, which is incorrect. The resulting value should be 2.
    在这种情况下，全局变量的最终值变为1，这是不正确的。结果值应该是2。
    In summary, race conditions happen when the outcome of the execution of one thread depends on the outcome of another thread, and when two threads operate on the same resources without considering that other threads are also using those resources. When these two threads are executed simultaneously, unexpected outcomes can occur. Certain programming languages, such as C/C++, are more prone to race conditions because of the way they manage memory.
    总之，当一个线程的执行结果取决于另一个线程的结果，并且两个线程在没有考虑其他线程也在使用这些资源的情况下操作同一资源时，就会发生竞争条件。 当这两个线程同时执行时，可能会发生意外的结果。 由于它们管理内存的方式，某些编程语言（如C / C ++）更容易发生竞争条件。
    When a Race Condition Becomes a Vulnerability
    A race condition becomes a vulnerability when it affects a security control mechanism. In those cases, attackers can induce a situation in which a sensitive action executes before a security check is complete. For this reason, race condition vulnerabilities are also referred to as
     time-of-check
    or
     time-of-use
    vulnerabilities.
    当一种竞争条件影响了安全控制机制时，它就成为了一个漏洞。在这种情况下，攻击者可以导致一个敏感操作在安全检查完成之前执行。因此，竞争条件漏洞也被称为检查时间或使用时间漏洞。
    Imagine that the two threads of the previous example are executing something a little more sensitive: the transfer of money between bank accounts. The application would have to perform three subtasks to transfer the money correctly. First, it has to check if the originating account has a high enough balance. Then, it must add money to the destination account. Finally, it must deduct the same amount from the originating account.
    想象一下，前面示例中的两个线程正在执行更敏感的操作：银行账户之间的转账。应用程序必须执行三个子任务才能正确地转移资金。首先，它必须检查原始帐户是否具有足够高的余额。然后，它必须将钱添加到目标帐户中。最后，它必须从原始帐户中扣除相同金额。
    Let’s say that you own two bank accounts, account A and account B. You have $500 in account A and $0 in account B. You initiate two money transfers of $500 from account A to account B at the same time. Ideally, when two money transfer requests are initiated, the program should behave as shown in
     Table 12-3
    .
    假设您拥有两个银行账户，账户A和账户B。您在账户A中有500美元，在账户B中没有余额。您同时发起了两笔从账户A到账户B的500美元转账请求。理想情况下，当发起两笔转账请求时，程序应该按照表12-3的方式行为。
       Table 12-3
      : Normal Execution of Two Threads Operating on the Same Bank Account
      表格12-3：两个线程正常操作同一银行账户
         Thread 1
         Thread 2
         Balance of accounts A + B
         Stage 1
        Check account A balance ($500)
        $500
         Stage 2
        Add $500 to account B
        $1,000 ($500 in A, $500 in B)
         Stage 3
        Deduct $500 from account A
        $500 ($0 in A, $500 in B)
         Stage 4
        Check account A balance ($0)
        $500 ($0 in A, $500 in B)
         Stage 5
        Transfer fails (low balance)
        $500 ($0 in A, $500 in B)
    You end up with the correct amount of money in the end: a total of $500 in your two bank accounts. But if you can send the two requests simultaneously, you might be able to induce a situation in which the execution of the threads looks like
     Table 12-4
    .
    最终你将以正确的金额结尾：在两个银行账户中总共500美元。但是，如果你能同时发送两个请求，你可能会引发一个看起来像表12-4的线程执行情况。
       Table 12-4
      : Faulty Transfer Results Due to a Race Condition
      表12-4：由于竞态条件导致的故障转移结果
         Thread 1
         Thread 2
         Balance of accounts A + B
         Stage 1
        Check account A balance ($500)
        $500
         Stage 2
        Check account A balance ($500)
        $500
         Stage 3