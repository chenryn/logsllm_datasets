Some elements may not appear in the sequence since ci can
be zero. Let us assume there are l non-zero elements in the
sequence. We apply the Fisher-Yates algorithm to shufﬂe
the l elements into a random sequence, and then sequen-
tially insert each element into the ﬁlter.
Experiment 5. The unshufﬂed sequence in Experiment
4 is inserted into the ﬁlter. That is, all the elements are se-
quentially inserted into the ﬁlter, and each element inserted
repeatedly a random ci time (ci is uniformly distributed on
the range [0,20]).
Experiment 6. This experiment is the same as Experi-
ment 4 except that ci, the number of insertions for each el-
ement, is modelled as a Poisson random variable with pa-
rameter λ = 10.
Experiment 7. Same as Experiment 4 except that ci is
modelled as a Poisson random variable with λ = 20.
Experiment 8. Same as Experiment 4 except that ci is
uniformly distributed on the range [0, 40].
In each of the above experiments, different (m, n, k)
conﬁgurations are tested for both extensions. For each con-
ﬁguration, the simulation is repeated for 1,000 different sets
of hash functions, i.e. 1,000 rounds. The mean and the stan-
dard deviation of the false positive rate will be noted for
each conﬁguration for both extensions.
False positives are obtained by implementing a FP
counter for each extension, which is initialised to zero at
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006the beginning of each round of simulation. After all the in-
sertions are done in a round, all distinct elements that
are inserted into the ﬁlter are identiﬁed. (That ci can
be zero in some experiments implies that some ele-
ments will not be inserted.) A list of such distinct elements
is then run through to query the Bloom ﬁlter identify-
ing those with an erroneous count in each extension. When-
ever such elements are found, the FP counter will be in-
cremented accordingly. For example, in Experiments 1-3,
for an element xi, if min(c[h1(xi)], ..., c[hk(xi)]) (cid:9)= 20,
then it has an erroneous count and the FP counter in-
creases by one. In Experiments 4–8, for an element xi,
if min(c[h1(xi)], ..., c[hk(xi)]) (cid:9)= ci, then it has an erro-
neous count and the FP counter increases by ci.
F P
10,000 in each
in each round of Ex-
The false positive rate is calculated by
round of Experiments 1–3, and by F P
l
periments 4–8, respectively.
5.2. Simulation results and observations
Tables 3–10 show the results of each experiment, includ-
ing the false positive rate of both extended Bloom ﬁlters un-
der different conﬁgurations, and reduction in false positives
achieved by the reﬁned extension. A pictorial comparison
of the false positive rates in both extensions in these exper-
iments can be found in [13].
The main reasons that we choose to provide detailed
experimental result data in this paper include the follow-
ing. The false positive rates observed for both extensions in
k = 4
k = 8
Filter
size m Mean
Std. dev.
80K
2.390E-2 1.556E-3 2.154E-2 1.485E-3 2.548E-2 1.559E-3
160K 2.372E-3 5.013E-4 9.446E-4 2.961E-4 5.686E-4 2.375E-4
320K 1.860E-4 1.381E-4 2.570E-5 5.089E-5 4.500E-6 2.073E-5
Std. dev. Mean
Std. dev. Mean
k = 6
(a)
k = 4
Filter
size m Mean
Std. dev.
80K
5.840E-3 7.786E-4 4.167E-3 6.633E-4 4.316E-3 6.430E-4
160K 5.107E-4 2.323E-4 1.591E-4 1.250E-4 7.720E-5 8.637E-5
320K 3.450E-5 5.692E-5 3.100E-6 1.733E-5 3.000E-7 5.469E-6
Std. dev. Mean
Std. dev. Mean
k = 6
k = 8
(b)
Reduction Rate
Filter
size m k = 4 k = 6 k = 8
80K
4.094 5.170 5.903
160K 4.645 5.937 7.365
320K 5.391 8.290 15.000
(c)
3. The
false positive
in
Table
Experiment 1:
the intuitive exten-
sion; (b) for the reﬁned extension; (c) re-
duction rate achieved by the reﬁned exten-
sion.
rates
for
(a)
our experiments are useful empirical estimates. People can
use these data without repeating the simulations by them-
selves. In particular, the only way of estimating the false
positive rates in the reﬁned extension is to resort to simula-
tion, which is unfortunately very time-consuming.
As observed from the experiments, false positive rates
in both extensions are controllable, and can be made
very small by proper choice of m/n and k. However,
the reﬁned extension has never yielded more false positives
than the intuitive extension, given the same conﬁguration.
Instead, the former can effectively reduce the false positive
rate in most circumstances. The only exception is in Experi-
ment 8, where both extensions were observed to achieve the
same result when m was increased to 640K. This is an ex-
treme case, where m is sufﬁciently large, coincidental hits
will not occur and thus false positives become zero. How-
ever, this is also the case where a Bloom ﬁlter is degener-
ated into an ordinary hash table.
Since there is no beneﬁt at all to use Bloom ﬁlters as or-
dinary hash tables, it appears that we can claim that the re-
ﬁned extension in practice will have less false positives
than the intuitive extension in all realistic cases, given
the same conﬁguration. This also implies that with less
storage requirement (i.e. smaller m) or less computation
(i.e., smaller k) than demanded by the intuitive extension,
the reﬁned extension can achieve the same false positive
rate.
We also calculated the false positive rate in Experiments
4-8 by dividing the number of distinct elements having an
erroneous count with the number of distinct elements in-
serted into the ﬁlter. All the above observations still apply.
Another observation is that for both extensions, when k
is ﬁxed, the false positive rate decreases as m grows in pro-
portion to n. This is because there will be less coinciden-
tal hits when the size of the ﬁlter is increased. However, the
false positive rate in both extensions (of a ﬁxed size m) does
not necessarily decrease as k increases.
In most of our simulations, the reduction rate in false
positives achieved by the reﬁned extension increases as k
increases, when the ﬁlter size m is ﬁxed; the reduction rate
also increases as the ﬁlter size increases, when k is ﬁxed.
However, both do not hold in general.
The largest reduction rates are observed when the num-
ber of insertions for each element is uniformly distributed,
and the elements are inserted into the ﬁlter in a random or-
der (i.e. in Experiment 4). In the best case, the reﬁned exten-
sion has reduced the false positive rate by an order of about
18.
As shown in Experiments 1-5, the order in which a se-
quence of elements is inserted can signiﬁcantly affect the
false positive rate in the reﬁned extension, while it has
no impact at all for the intuitive extension, which per-
forms the same in Experiments 1-3 as well as in Experi-
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006k = 4
Filter
size m Mean
Std. dev.
80K
5.612E-3 7.312E-4 4.069E-3 6.433E-4 4.213E-3 6.214E-4
160K 5.068E-4 2.295E-4 1.587E-4 1.243E-4 7.710E-5 8.629E-5
320K 3.450E-5 5.692E-5 3.100E-6 1.733E-5 3.000E-7 5.469E-6
Std. dev. Mean
Std. dev. Mean
k = 6
k = 8
(a)
Reduction Rate
Filter
size m k = 4 k = 6 k = 8
80K
4.259 5.294 6.046
160K 4.681 5.952 7.375
320K 5.391 8.290 15.000
(b)
rates
4. The
false positive
Table
in
Experiment 2 for the intuitive extension is
the same as in Experiment 1. (a) shows im-
proved result in the reﬁned extension, and
(b) shows reduction rate achieved by the re-
ﬁned extension.
k = 4
Filter
size m Mean
Std. dev.
80K
1.875E-2 1.392E-3 1.538E-2 1.266E-3 1.707E-2 1.292E-3
160K 1.789E-3 4.265E-4 6.278E-4 2.378E-4 3.482E-4 1.871E-4
320K 1.350E-4 1.160E-4 1.630E-5 4.080E-5
2.700E-6 1.621E-5
Std. dev. Mean
Std. dev. Mean
k = 6
k = 8
(a)
Reduction Rate
Filter
size m k = 4 k = 6 k = 8
80K
1.275 1.401 1.493
160K 1.326 1.505 1.633
320K 1.378 1.577 1.667
(b)
rates
5. The
false positive
Table
in
Experiment 3 for the intuitive extension is
the same as in Experiment 1. (a) shows im-
proved result in the reﬁned extension, and
(b) shows reduction rate achieved by the re-
ﬁned extension.
ments 4-5. In other words, the insertion order can have a
signiﬁcant impact on the rate of false positive reduction that
can be achieved by the reﬁned extension.
The frequency that each element is inserted, i.e. the
distribution of ci, can also have an impact on the rate of
false positive reduction. The comparison of reduction rates
in Experiment 4 (ci: uniformly distributed over [0,20]) and
Experiment 6 (ci: Poisson with λ = 10) shows this. Exper-
iment 8 (ci: uniformly distributed over [0,40]) vs. Experi-
ment 7 (ci: Poisson with λ = 20) is another good illustra-
tion.
In all the experiments, we in fact allocate 6 bits to each
cell so that we can compare the counter growth in both ex-
tensions. The observed counter growth in the reﬁned exten-
k = 4
Filter
size m Mean
Std. dev.
80K
2.019E-2 1.734E-3 1.723E-2 1.554E-3 1.964E-2 1.608E-3
160K 1.955E-3 5.295E-4 7.178E-4 2.990E-4 4.059E-4 2.440E-4
320K 1.530E-4 1.426E-4 1.733E-5 4.976E-5 2.662E-6 1.838E-5
Std. dev. Mean
Std. dev. Mean
k = 6
k = 8
(a)
k = 4
Filter
size m Mean
Std. dev.
80K
5.381E-3 7.781E-4 3.231E-3 5.685E-4 2.929E-3 5.193E-4
160K 4.491E-4 2.140E-4 1.096E-4 9.725E-5 4.738E-5 6.371E-5
320K 3.179E-5 5.712E-5 1.611E-6 1.268E-5 1.501E-7 3.049E-6
Std. dev. Mean
Std. dev. Mean
k = 6
k = 8
(b)
Reduction Rate
Filter
size m k = 4 k = 6 k = 8
80K
3.753 5.331 6.706
160K 4.352 6.550 8.567
320K 4.813 10.752 17.733
(c)
6. The
false positive
in
Table
Experiment 4:
the intuitive exten-
sion; (b) for the reﬁned extension; (c) re-
duction rate achieved by the reﬁned exten-
sion.
rates
for
(a)
k = 4
Filter
size m Mean
Std. dev.
80K
5.982E-3 8.812E-4 3.952E-3 7.073E-4 3.810E-3 6.532E-4
160K 5.211E-4 2.511E-4 1.446E-4 1.266E-4 6.395E-5 8.661E-5
320K 3.622E-5 6.495E-5
2.853E-6 1.851E-5 2.402E-7 4.379E-6
Std. dev. Mean
Std. dev. Mean
k = 8