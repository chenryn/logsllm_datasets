        h->nlmsg_flags &= ~a->nc_flags;
        if (nladdr.nl_pid != 0 ||
                    h->nlmsg_pid != rth->local.nl_pid ||
                    h->nlmsg_seq != rth->dump)
                    goto skip_it;
                if (h->nlmsg_flags & NLM_F_DUMP_INTR)
                    dump_intr = 1;
                if (h->nlmsg_type == NLMSG_DONE) {
                    err = rtnl_dump_done(h);
                    if (err nlmsg_len - NLMSG_LENGTH(sizeof(*r)));
        stat.type  = r->udiag_type;
        stat.state = r->udiag_state;
        stat.ino   = stat.lport = r->udiag_ino;
        stat.local.family = stat.remote.family = AF_UNIX;
        if (unix_type_skip(&stat, f))
            return 0;
        if (tb[UNIX_DIAG_RQLEN]) {
            struct unix_diag_rqlen *rql = RTA_DATA(tb[UNIX_DIAG_RQLEN]);
            stat.rq = rql->udiag_rqueue;
            stat.wq = rql->udiag_wqueue;
        }
        if (tb[UNIX_DIAG_NAME]) {
            int len = RTA_PAYLOAD(tb[UNIX_DIAG_NAME]);
            memcpy(name, RTA_DATA(tb[UNIX_DIAG_NAME]), len);
            name[len] = '\0';
            if (name[0] == '\0') {
                int i;
                for (i = 0; i f && run_ssfilter(f->f, &stat) == 0)
            return 0;
        unix_stats_print(&stat, f);
        if (show_mem)
            print_skmeminfo(tb, UNIX_DIAG_MEMINFO);
        if (show_details) {
            if (tb[UNIX_DIAG_SHUTDOWN]) {
                unsigned char mask;
                mask = rta_getattr_u8(tb[UNIX_DIAG_SHUTDOWN]);
                printf(" %c-%c", mask & 1 ? '-' : '');
            }
        }
        printf("\n");
        return 0;
    }
  * `struct unix_diag_msg *r = NLMSG_DATA(nlh); parse_rtattr(tb, UNIX_DIAG_MAX, (struct rtattr *)(r+1),nlh->nlmsg_len - NLMSG_LENGTH(sizeof(*r)));` 获取netlink的数据
  * 解析数据并赋值
``` stat.type = r->udiag_type; stat.state = r->udiag_state; stat.ino =
stat.lport = r->udiag_ino; stat.local.family = stat.remote.family = AF_UNIX;
* * *
stat.rq = rql->udiag_rqueue; stat.wq = rql->udiag_wqueue; ```
#### unix_stats_print
`unix_stats_print(&stat, f);` 获取网络的连接状态
    static void unix_stats_print(struct sockstat *s, struct filter *f)
    {
        char port_name[30] = {};
        sock_state_print(s);
        sock_addr_print(s->name ?: "*", " ",
                int_to_str(s->lport, port_name), NULL);
        sock_addr_print(s->peer_name ?: "*", " ",
                int_to_str(s->rport, port_name), NULL);
        proc_ctx_print(s);
    }
#### sock_state_print
跟踪进入到sock_state_print()中
    static void sock_state_print(struct sockstat *s)
    {
        const char *sock_name;
        static const char * const sstate_name[] = {
            "UNKNOWN",
            [SS_ESTABLISHED] = "ESTAB",
            [SS_SYN_SENT] = "SYN-SENT",
            [SS_SYN_RECV] = "SYN-RECV",
            [SS_FIN_WAIT1] = "FIN-WAIT-1",
            [SS_FIN_WAIT2] = "FIN-WAIT-2",
            [SS_TIME_WAIT] = "TIME-WAIT",
            [SS_CLOSE] = "UNCONN",
            [SS_CLOSE_WAIT] = "CLOSE-WAIT",
            [SS_LAST_ACK] = "LAST-ACK",
            [SS_LISTEN] =   "LISTEN",
            [SS_CLOSING] = "CLOSING",
        };
        switch (s->local.family) {
        case AF_UNIX:
            sock_name = unix_netid_name(s->type);
            break;
        case AF_INET:
        case AF_INET6:
            sock_name = proto_name(s->type);
            break;
        case AF_PACKET:
            sock_name = s->type == SOCK_RAW ? "p_raw" : "p_dgr";
            break;
        case AF_NETLINK:
            sock_name = "nl";
            break;
        default:
            sock_name = "unknown";
        }
        if (netid_width)
            printf("%-*s ", netid_width,
                   is_sctp_assoc(s, sock_name) ? "" : sock_name);
        if (state_width) {
            if (is_sctp_assoc(s, sock_name))
                printf("`- %-*s ", state_width - 3,
                       sctp_sstate_name[s->state]);
            else
                printf("%-*s ", state_width, sstate_name[s->state]);
        }
        printf("%-6d %-6d ", s->rq, s->wq);
    }
根据s→local.family分别输出对应的内容，代码就不做过多的解释了，就是简单的switch case的判断．全部执行完毕之后，输出的结果是:
    Netid  State      Recv-Q Send-Q Local Address:Port                 Peer Address:Port               
    u_seq  ESTAB      0      0      @00017 309855                * 309856
可以发现其实在ss的默认输出情况下也是没有pid信息．如果我们采用`ss -p`，结果是:
    Netid  State      Recv-Q Send-Q Local Address:Port                 Peer Address:Port               
    u_seq  ESTAB      0      0      @00017 309855                * 309856                users:(("code",pid=17009,fd=17))
    u_seq  ESTAB      0      0      @00012 157444                * 157445                users:(("chrome",pid=5834,fd=10))
### user_ent_hash_build
当我们加了-p参数之后，程序运行的结果：
    case 'p':
        show_users++;
        user_ent_hash_build();
        break;
show_users的值变为１，程序接着执行 user_ent_hash_build()
    static void user_ent_hash_build(void)
    {
        const char *root = getenv("PROC_ROOT") ? : "/proc/";
        struct dirent *d;
        char name[1024];
        int nameoff;
        DIR *dir;
        char *pid_context;
        char *sock_context;
        const char *no_ctx = "unavailable";
        static int user_ent_hash_build_init;
        /* If show_users & show_proc_ctx set only do this once */
        if (user_ent_hash_build_init != 0)
            return;
        user_ent_hash_build_init = 1;
        strlcpy(name, root, sizeof(name));
        if (strlen(name) == 0 || name[strlen(name)-1] != '/')
            strcat(name, "/");
        nameoff = strlen(name);
        dir = opendir(name);
        if (!dir)
            return;
        while ((d = readdir(dir)) != NULL) {
            struct dirent *d1;
            char process[16];
            char *p;
            int pid, pos;
            DIR *dir1;
            char crap;
            if (sscanf(d->d_name, "%d%c", &pid, &crap) != 1)
                continue;
            if (getpidcon(pid, &pid_context) != 0)
                pid_context = strdup(no_ctx);
            snprintf(name + nameoff, sizeof(name) - nameoff, "%d/fd/", pid);
            pos = strlen(name);
            if ((dir1 = opendir(name)) == NULL) {
                free(pid_context);
                continue;
            }
            process[0] = '\0';
            p = process;
            while ((d1 = readdir(dir1)) != NULL) {
                const char *pattern = "socket:[";
                unsigned int ino;
                char lnk[64];
                int fd;
                ssize_t link_len;
                char tmp[1024];
                if (sscanf(d1->d_name, "%d%c", &fd, &crap) != 1)
                    continue;
                snprintf(name+pos, sizeof(name) - pos, "%d", fd);
                link_len = readlink(name, lnk, sizeof(lnk)-1);
                if (link_len == -1)
                    continue;
                lnk[link_len] = '\0';
                if (strncmp(lnk, pattern, strlen(pattern)))
                    continue;
                sscanf(lnk, "socket:[%u]", &ino);
                snprintf(tmp, sizeof(tmp), "%s/%d/fd/%s",
                        root, pid, d1->d_name);
                if (getfilecon(tmp, &sock_context) next = NULL;
        p->ino = ino;
        p->pid = pid;
        p->fd = fd;
        p->process = strdup(process);
        p->process_ctx = strdup(proc_ctx);
        p->socket_ctx = strdup(sock_ctx);
        pp = &user_ent_hash[user_ent_hashfn(ino)];
        p->next = *pp;
        *pp = p;
    }
获取inode,pid和fd信息，最终组成一个链表．
#### proc_ctx_print
程序在输出结果的时候，调用proc_ctx_print()
    static void proc_ctx_print(struct sockstat *s)
    {
        char *buf;
        if (show_proc_ctx || show_sock_ctx) {
            if (find_entry(s->ino, &buf,
                    (show_proc_ctx & show_sock_ctx) ?
                    PROC_SOCK_CTX : PROC_CTX) > 0) {
                printf(" users:(%s)", buf);
                free(buf);
            }
        } else if (show_users) {
            if (find_entry(s->ino, &buf, USERS) > 0) {
                printf(" users:(%s)", buf);
                free(buf);
            }
        }
    }
如果show_users>0，执行find_entry(0，根据inode编号找到对应进程的信息：
#### find_entry
    static int find_entry(unsigned int ino, char **buf, int type)
    {
        struct user_ent *p;
        int cnt = 0;
        char *ptr;
        char *new_buf;
        int len, new_buf_len;
        int buf_used = 0;
        int buf_len = 0;
        if (!ino)
            return 0;
        p = user_ent_hash[user_ent_hashfn(ino)];
        ptr = *buf = NULL;
        while (p) {
            if (p->ino != ino)
                goto next;
            while (1) {
                ptr = *buf + buf_used;
                switch (type) {
                case USERS:
                    len = snprintf(ptr, buf_len - buf_used,
                        "(\"%s\",pid=%d,fd=%d),",
                        p->process, p->pid, p->fd);
                    break;
                case PROC_CTX:
                    len = snprintf(ptr, buf_len - buf_used,
                        "(\"%s\",pid=%d,proc_ctx=%s,fd=%d),",
                        p->process, p->pid,
                        p->process_ctx, p->fd);
                    break;
                case PROC_SOCK_CTX:
                    len = snprintf(ptr, buf_len - buf_used,
                        "(\"%s\",pid=%d,proc_ctx=%s,fd=%d,sock_ctx=%s),",
                        p->process, p->pid,
                        p->process_ctx, p->fd,
                        p->socket_ctx);
                    break;
                default:
                    fprintf(stderr, "ss: invalid type: %d\n", type);
                    abort();
                }
                if (len = buf_len - buf_used) {
                    new_buf_len = buf_len + ENTRY_BUF_SIZE;
                    new_buf = realloc(*buf, new_buf_len);
                    if (!new_buf) {
                        fprintf(stderr, "ss: failed to malloc buffer\n");
                        abort();
                    }
                    *buf = new_buf;
                    buf_len = new_buf_len;
                    continue;
                } else {
                    buf_used += len;
                    break;
                }
            }
            cnt++;
    next:
            p = p->next;
        }
        if (buf_used) {
            ptr = *buf + buf_used;
            ptr[-1] = '\0';
        }
        return cnt;
    }
通过遍历p = user_ent_hash[user_ent_hashfn(ino)]; 这个链表得到得到所有的节点．然后利用
    p = user_ent_hash[user_ent_hashfn(ino)];
    ptr = *buf = NULL;
    while (p) {
        if (p->ino != ino)
            goto next;
如果遍历得到inode相等，那么就说明找到了pid，最终输出的结果如下:
    switch (type) {
                case USERS:
                    len = snprintf(ptr, buf_len - buf_used,
                        "(\"%s\",pid=%d,fd=%d),",
                        p->process, p->pid, p->fd);
                    break;
最终输出的结果是:
    Netid  State      Recv-Q Send-Q Local Address:Port                 Peer Address:Port               
    u_seq  ESTAB      0      0      @00017 309855                * 309856                users:(("code",pid=17009,fd=17))
## 总结
由于`ss`和`netstat`数据获取的方式不同，导致在执行效率上面存在很大的差别．`ss`和`netstat`这两种方式也我我们需要获取主机上面的网络数据提供了一个很好的思路．
* * *