# 本地提权技术研究：以Potato家族为例

## 概述
本文基于POC源码，深入探讨了Potato家族中的本地提权技术细节。提权手法依赖于`SeImpersonatePrivilege`或`SeAssignPrimaryTokenPrivilege`权限。

## 特性与漏洞
### 权限要求
提权的前提条件是拥有`SeImpersonatePrivilege`或`SeAssignPrimaryTokenPrivilege`权限。以下用户具有`SeImpersonatePrivilege`权限：
- 本地管理员账户（不包括管理员组的普通账户）和本地服务帐户
- 由SCM启动的服务

需要注意的是，只有更高权限的账户（如SYSTEM）才具备`SeAssignPrimaryTokenPrivilege`权限。即使在本地策略中授予管理员组普通用户`SeImpersonatePrivilege`特权，在cmd.exe中使用`whoami /priv`也不会显示该特权，并且无法利用；而`SeAssignPrimaryTokenPrivilege`特权则可以正常授予普通用户。

### Windows服务登录账户
1. **Local System (NT AUTHORITY\System)**
   - 具有本地系统的最高权限。
   - 如果客户端和服务端都在同一域内，则Local System账户使用PC账户（hostname$）登录远程计算机。
   - 如果客户端或服务端不在同一域内，则Local System账户使用ANONYMOUS LOGON。

2. **Network Service (NT AUTHORITY\Network Service)**
   - 在本地系统上具有普通用户的权限。
   - 访问网络时行为与Local System账户相同。

3. **Local Service (NT AUTHORITY\Local Service)**
   - 在本地系统上具有普通用户的权限。
   - 始终使用ANONYMOUS LOGON，无论计算机是否在域内。

因此，提权路径如下：
- Administrator -> SYSTEM
- Service -> SYSTEM

虽然服务账户在Windows权限模型中本身具有较高的权限，但实际渗透测试中，这种提权方法非常有用。例如，在获取IIS的WebShell或通过SQLi执行`xp_cmdshell`后，攻击者可以通过此方法直接提升至SYSTEM权限。

## SeImpersonate & SeAssignPrimaryToken 权限
如果用户拥有`SeAssignPrimaryToken`或`SeImpersonatePrivilege`，则可以被视为SYSTEM。

### Token对象
Windows的token是描述安全上下文的对象，用户登录系统后会生成token。创建新进程或线程时，这个token会被不断复制。Token包含以下成员：
- 用户账户的SID
- 用户所属组的SID
- 用于标识当前登录会话的登录SID
- 用户或用户组所拥有的权限列表
- 所有者SID
- 所有者组的SID
- 访问控制列表
- 访问令牌的来源
- 主令牌/模拟令牌
- 限制SID的可选列表
- 模拟等级：
  - Anonymous: 服务器无法模拟或识别客户端
  - Identification: 可识别客户端的身份和特权，但不能模拟
  - Impersonation: 可在本地系统模拟
  - Delegation: 可在远程系统上模拟

### 相关函数
- `CreateProcessWithTokenW`
  - 当用户具有`SeImpersonatePrivilege`特权时，可以调用此函数以某个Token的权限启动新进程。

- `CreateProcessAsUserW`
  - 当用户具有`SeAssignPrimaryTokenPrivilege`特权时，可以调用此函数以hToken权限启动新进程。

微软设计这些`Impersonate`函数的初衷是为了让高权限服务端可以模拟低权限客户端来提高安全性，但攻击者却反向利用了这些功能。

## 获取高权限Token的方法
### Origin Potato
最初的Potato通过WPAD或LLMNR/NBNS投毒，使某些高权限系统服务请求自己监听的端口并进行NTLM认证，然后将认证信息relay到本地的SMB listener。这种方法本质上是一个跨协议的NTLM relay攻击，对有SMB签名的系统无效，且微软已通过在lsass中缓存缓解了此类攻击。

### RottenPotato & JuicyPotato
这两种方法通过DCOM call使服务向攻击者监听的端口发起连接并进行NTLM认证。Rotten Potato和Juicy Potato原理相似，后者在前者基础上进行了完善。具体过程如下：
- DCOM对象传递给外部COM服务器时，对象引用被序列化为OBJREF流。
- 攻击者可以滥用RPC绑定字符串指定任意TCP端口，当对象解析器尝试绑定RPC端口时，会向指定地址发起TCP连接并进行NTLM认证。
- JuicyPotato通过传递BITS的CLSID和IStorage对象实例给`CoGetInstanceFromIStorage`函数，使rpcss激活BITS服务，随后通过SSPI的`AcceptSecurityContext`函数进行本地NTLM协商，最终获得高权限的impersonation级别token，并通过`CreateProcessWithTokenW`启动新进程。

### PrintSpoofer (PipePotato, BadPotato)
该POC通过Windows named pipe的一个API `ImpersonateNamedPipeClient`来模拟高权限客户端的token。它利用打印机组件路径检查的BUG，使SYSTEM权限服务能连接到攻击者创建的named pipe。具体步骤如下：
- `spoolsv.exe`服务有一个公开的RPC服务，其中`RpcRemoteFindFirstPrinterChangeNotificationEx`函数的`pszLocalMachine`参数需要传递UNC路径。
- 通过传递特定路径，可以使服务连接到攻击者注册的named pipe，从而窃取client的token。
- 使用`CreateProcessAsUser`而不是`CreateProcessWithToken`来启动新进程，以便实现交互式操作。

### RoguePotato
RoguePotato利用命名管道绕过微软修补后的限制。作者在远程主机上的135端口做流量转发，将其转回受害者本机端口，并写了一个恶意RPC OXID解析器。这种方法在不出网的情况下只能在内网打下一台，存在局限性。

### SweetPotato
SweetPotato结合了COM、WinRM和Spoolsv的技术，通过WinRM在端口5985发起NTLM认证，进一步提升了提权的效果。

## 总结
通过对Potato家族的本地提权技术的研究，我们可以看到攻击者如何利用Windows的安全机制来提升权限。尽管微软已经采取了一些缓解措施，但这些技术仍然在实际渗透测试中具有重要价值。