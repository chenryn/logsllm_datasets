title:Towards Implementing Multi-Layer Reflection for Fault-Tolerance
author:François Ta&quot;ıani and
Jean-Charles Fabre and
Marc-Olivier Killijian
Towards Implementing Multi-Layer Reflection for Fault-Tolerance 
François Taïani, Jean-Charles Fabre, Marc-Olivier Killijian 
LAAS-CNRS, 7, avenue du Colonel Roche, 31077 Toulouse Cedex 4, France 
{francois.taiani, jean-charles.fabre, marco.killijian}@laas.fr 
Abstract 
the 
implementation  of 
Third  party  software  is  now  increasingly  used  in 
systems  with  high  dependability  requirements.  This 
evolution of system development raises new challenges, in 
particular  regarding 
fault-
tolerance.  As  systems  are  often  built  of  black-box 
components,  some  crucial  aspects  of  their  behavior 
regarding replication cannot be handled. This is also true 
to some extent for open-source components as mastering 
their  internal  behavior  is  sometimes  very  tricky  (e.g.  OS 
and  ORBs).  During  the  last  decade  reflection  has 
emerged  as  a  very  fruitful  paradigm  for  the  disciplined 
management  of  non-functional  aspects,  among  which 
fault-tolerance.  In  this  paper  we  discuss  how  to  apply 
reflection  to  multi-layer  systems  for  implementing  fault-
tolerance  in  an  independent  and  principled  manner.  We 
analyze 
the  underlying 
assumptions of fault-tolerance strategies and the different 
layers of a system. Based on this multi-layer analysis we 
show  how  the  requirements  of  a  family  of  replication 
algorithms  can  be  addressed  on  a  concrete  architecture, 
resulting in what we name Multi-Layer Reflection. 
the  connections  between 
1. Introduction 
from 
systems 
components 
Flexibility,  reuse,  and  adaptation  are  becoming  key 
aspects  of  today's  large  computer  systems  (satellite 
systems, transport, automotive), and explain the increasing 
use  of  component-based  approaches  (including  COTS). 
This  trend  raises  two  challenges  when  considering  the 
dependability of the resulting systems: How can we build 
dependable 
that  don't 
specifically  target  dependability  concerns?  What  are  the 
dependability  figures  of  the  resulting  systems?  We  focus 
in this paper on the first question, and more particularly on 
the implementation of fault-tolerance into systems made of 
third  party  software  components.  Fault-tolerance  is  very 
difficult  to  achieve  without  a  minimal  understanding  and 
control  of  the  internal  structure  and  behavior  of  the 
considered  systems.  This  implies  intrusion  within  system 
components,  which  is  very  problematic.  For  this  reason, 
integrators  are 
for  sound  and  principled 
functional 
them 
approaches 
looking 
help 
separate 
that 
to 
[11], 
an 
implement 
fault-tolerance 
development  from  fault-tolerance  concerns,  within  large 
projects, over long life cycles.  
Computational Reflection 
architectural 
paradigm  that  appeared  in  the  late  eighties,  and  related 
technologies such as aspect oriented programming, appear 
as  very  promising  approaches  to  tackle  this  issue.  Using 
reflection 
into  multi-
induces,  however,  several  sub-
component  systems 
problems.  Reflective  architectures  are  centered  on  a  key 
element,  their  meta-model,  that  ensures  the  separation  of 
concerns  between  the  "base"  system  (here  the  system 
resulting 
the 
mechanisms  (here  fault-tolerance)  that  are  added  to  the 
base  system.  To  be  effective,  this  meta-model  must  take 
into  account  both  the  multi-component  nature  of  the 
system  and  the  requirements  of  fault-tolerance  that  it 
should help implement. In this paper, we address this dual 
issue and propose a methodology to help designing meta-
models that specifically target the implementation of fault-
tolerance into systems made of third party components. 
integration) 
component 
from 
and 
The  paper  is  organized  as  follows.  Section  2  briefly 
recalls essential notions regarding computational reflection 
and  introduces  the  steps  of  our  approach.  Section  3
proposes  a  requirement  analysis  of  a  set  of  well-known 
replication strategies from a reflective perspective. Based 
on a small example, Section 4 shows how this analysis can 
be  applied  to  a  concrete  system  architecture  made  of 
several components. This discussion leads us to the notion 
of  Multi-Layer  Reflection  (MLR).  Section  5  further 
develops the practical use of this notion by presenting, on 
a concrete architecture (CORBA and POSIX based), how 
the requirements obtained in Section 3 lead to the precise 
specification  of  a  meta-model  that  is  both  optimized  for 
fault-tolerance and the considered system structure. 
2. Computational Reflection 
A  reflective  system  is  basically  structured  around  a 
representation of itself —or meta-model — that is causally 
connected  to  the  real  system  [11].  This  approach  divides 
the  system  into  two  parts:  a  base-level  where  normal 
computation  takes  place,  and  a  meta-level  where  the 
system computes about itself (meta-computation or meta-
level software). (See Figure 1) 
The  meta-model  is  structured  around  notions  that  are 
major  (runtime)  elements  of  the  base  level,  and  common 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:28:40 UTC from IEEE Xplore.  Restrictions apply. 
layers 
to  all  applications  sharing  the  same  programming  model. 
The  systems  we  are  interested  in  are  made  of  third-party 
components  that  are  most  often  organized  in  a  layered 
architecture: OS kernel, system libraries, compilers, virtual 
machines,  middleware,  etc.  These 
introduce 
different abstraction levels that each provide different sets 
of elements from which applications can be built to run on 
top  of  these  levels.  As  a  consequence,  different  meta-
models corresponding to different abstraction levels of the 
same system can be defined. For instance, the meta-model 
of  an  object-oriented  application  considered  at 
the 
language level would typically contain entities and events 
“Instanciation”,
such 
“Invocation”, or “Attribute”, but would probably not 
contain  anything  about  OS-level  issues  such  as  memory 
paging, or task scheduling. 
“Method”,
“Class”, 
as 
(software components for non-functional requirements)
Metalevel
Reification
Metamodel
(supported by
reflective mechanisms)
Introspection,
Intercession
(application, middleware and operating system components)
Base-level
Figure 1. Organization of a Reflective System  
Meta-models provide an abstract view of the base-level 
system that enables the implementation of non-functional 
mechanisms  at  the  meta-level  (notion  of  separation  of 
concerns).  The  information  contained  in  the  meta-model 
determines  the  range  of  non-functional  mechanisms  that 
can be implement at the meta-level. In our case, an ideal 
meta-model should provide all the reflective features that 
are  required  to  implement  correctly  and  efficiently  fault-
tolerance.  To  this  aim,  we  propose  the  following  steps 
when designing a fault-tolerance oriented meta-model: 
1.  Establish  the  set  of  reflective  features  required  by 
fault-tolerance 
2.  Map  the  requirements  of  Step  1  onto  the  different 
layers of the considered system 
In  the  next  section,  we  investigate  from  a  reflective 
perspective  the  requirements  of  a  set  of  fault-tolerance 
mechanisms (Step 1). In section 4, we address Step 2. 
3. A reflective View of Replication Strategies 
Defining  the  complete  meta-model  that  allows  the 
implementation  of  all  known  fault-tolerance  strategies  is 
very  ambitious.  For  illustration  purposes,  we  limit  our 
analysis  to  well  known  replication  mechanisms  namely 
passive  replication  (e.g.  primary-backup  strategy),  semi-
active  replication  (or  leader-follower  strategy)  and  active 
replication (e.g. TMR strategy)1. This section discusses the 
set  of  reflective  features  that  are  required  to  implement 
1 Please see [14] for more details about these strategies. 
these strategies. We only address the requirements (i.e. the 
"What is needed?")  of  the  different  replication  strategies 
from  a  logical  viewpoint  and  express  them  in  reflective 
terms. From a conceptual viewpoint, this exercise is very 
interesting as it collects the assumptions (e.g. interception 
of  client  requests,  identification  of  non-deterministic 
decisions, state access, etc.) fault-tolerance designers have 
in  mind  when  they  propose  a  given  algorithm.  These 
assumptions usually become implicit, as the designer dives 
into  the  details  of  the  algorithm,  fault  assumptions  or 
performance 
and 
implementation  assumptions are,  however,  key  aspects  to 
decide on the practicality of the proposed algorithms, and 
have often a crucial impact on the implementation. If the 
information  is  easy  to  obtain,  then  fine,  if  not,  then  the 
proposed algorithm cannot be implemented or can only be 
implemented with some restrictions, which often make the 
resulting implementation questionable. In this section, we 
try 
the  conceptual  and 
implementation assumptions made by the designers of the 
three  replication  strategies  we 
investigate,  and  we 
factorize them into a meta-model. 
to  collect  all 
(most  of) 
conceptual 
aspects. 
Those 
3.1. System Model 
We assume a conventional client / server model where 
servers process client requests and return the results of this 
processing. Servers encapsulate data (their state) and code 
(describing  the  services  they  offer  to  clients).  When  a 
service  request  is  received,  an  "execution  point"  appears 
within the server. This execution point travels through the 
code, processes the received request, possibly modifies the 
server's  state,  and  possibly  produces  a  reply  that  is 
returned  to  the  client.  In  this  section,  we  don't  make  any 
assumption about the nature of servers, but we assume that 
server  replicas  are  "distributed"  so 
they  fail 
independently.  Our  notion  of  server  is  very  similar  to 
those  of  "replication  entities,  whatever  they  are"  or 
"distributed  processes"  commonly  found  in  works  on 
distributed algorithms.  
that 
3.2. Considered Replication Strategies 
We  consider  three  replication  mechanisms  (passive, 
semi-active,  and  active  replication  techniques)  according 
to  the  criteria  identified  above.  We  focus  here  on 
implementation 
fault 
assumptions. To simplify the analysis, we also assume that 
requests  are  delivered  to  server  replicas  using  an  atomic 
multicast  protocol.  Table  1  summarizes  the  key  well-
known characteristics of the three replication strategies. 
requirements 
than  on 
rather 
Passive replication: the checkpointed information must 
ensure  that  the  backup  execution  after  a  primary  crash 
remains  consistent  with 
the  previous  execution  as 
perceived by the rest of the system before the crash. 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:28:40 UTC from IEEE Xplore.  Restrictions apply. 
Semi-active 
all  non-
deterministic decisions made by the leader are intercepted 
and forwarded to the followers.  
replication 
requires 
that 
Active  replication  (i.e.  TMR)  can  only  be  considered 
for  deterministic  servers.  If  this  holds,  non-deterministic 
decisions do not need to transit between the replicas. 
3.3. Control and Observability Requirements  
For each considered replication strategy, we distinguish 
three  control  and  observation  facets:  communication,
execution, and state. At each level, we consider the entities
that are concerned by the replication strategy, the actions
of these entities that must be observed and controlled, the 
motivation  for  this,  and  finally  the  available  means  to 
satisfy these requirements. We do not consider the cloning 
of  new  replicas,  as  cloning  involves  operations  (request 
synchronization,  state  transfer)  that  are  very  similar  to 
those  found  in  passive  replication.  The  result  of  our 
analysis is presented in Table 2. 
Our analysis is limited here to the requirements of the 
three  considered  replication  strategies  provided 
the 
assumptions of Table 1 are guaranteed. For instance, semi-
active  replication  requires  a  mechanism  that  ensures 
"determinism" across replicas (e.g. notification messages). 
However,  mechanisms  have  been  proposed  to  enforce 
replica  determinism  with  no  communication  between  the 
replicas, and could be used for active replication [2, 7, 12]. 
3.4. The resulting Meta-Model 
The  essential  reflective  features  given  in  Table  3  result 
from  the  aggregation  of  the  requirements  presented  in 
Table  2.  The  corresponding  meta-model  results  from  the 
interactions  between  the  base-level  (application),  and  the 
meta-level 
(see 
Figure 1) are classified as follows: 
1. Reification:  initiated  by  the  base  level  to  provide 
(fault-tolerance).  These 
interactions 
information to the meta-level. 
2. Introspection:  initiated  by  the  meta-level  to  obtain 
information from the base-level. 
3. Behavioral intercession: initiated by the meta-level to 
modify the behavior of the base-level. 
4. Structural intercession: initiated by the meta-level to 
modify the state of the base-level. 
Table 3 does not contain all the possible features one may 
encounter  in  generic  reflective  systems  [5,  10,  18]. 
However,  although 
these  reflective  features 
supports  a  meta-model  for  the  replication  strategies 
limited, 
Strategy 
Passive 
Semi-active 