title:Side-Channel Analysis of SM2: A Late-Stage Featurization Case
Study
author:Nicola Tuveri and
Sohaib ul Hassan and
Cesar Pereida Garc&apos;ıa and
Billy Bob Brumley
Side-Channel Analysis of SM2:
A Late-Stage Featurization Case Study
Nicola Tuveri
Sohaib ul Hassan
Tampere University of Technology
Tampere, Finland
PI:EMAIL
Cesar Pereida García
Tampere University of Technology
Tampere, Finland
PI:EMAIL
Tampere University of Technology
Tampere, Finland
PI:EMAIL
Billy Bob Brumley
Tampere, Finland
PI:EMAIL
Tampere University of Technology
ABSTRACT
SM2 is a public key cryptography suite originating from Chinese
standards, including digital signatures and public key encryption.
Ahead of schedule, code for this functionality was recently main-
lined in OpenSSL, marked for the upcoming 1.1.1 release. We per-
form a security review of this implementation, uncovering various
deficiencies ranging from traditional software quality issues to
side-channel risks. To assess the latter, we carry out a side-channel
security evaluation and discover that the implementation hits every
pitfall seen for OpenSSL’s ECDSA code in the past decade. We carry
out remote timings, cache timings, and EM analysis, with accom-
panying empirical data to demonstrate secret information leakage
during execution of both digital signature generation and public
key decryption. Finally, we propose, implement, and empirically
evaluate countermeasures.
KEYWORDS
software engineering; applied cryptography; public key cryptog-
raphy; side-channel analysis; timing attacks; cache-timing attacks;
power analysis; TVLA; SM2; OpenSSL
ACM Reference Format:
Nicola Tuveri, Sohaib ul Hassan, Cesar Pereida García, and Billy Bob Brum-
ley. 2018. Side-Channel Analysis of SM2: A Late-Stage Featurization Case Study.
In 2018 Annual Computer Security Applications Conference (ACSAC ’18), De-
cember 3–7, 2018, San Juan, PR, USA. ACM, New York, NY, USA, 14 pages.
https://doi.org/10.1145/3274694.3274725
1 INTRODUCTION
SM21 is a suite of elliptic curve public key cryptosystems, stan-
dardized as a part of Chinese commercial cryptography mandates.
Support for SM2 in OpenSSL landed in the public GitHub reposi-
tory through pull request (PR) #4793,2 created in November 2017
1https://tools.ietf.org/html/draft-shen-sm2-ecdsa-02
2https://github.com/openssl/openssl/pull/4793
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
© 2018 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-6569-7/18/12.
https://doi.org/10.1145/3274694.3274725
147
by external contributors. During the review process, in January
2018, the OpenSSL team assigned the PR to the Post-1.1.1 milestone,
marking functionality intended to be merged after the upcoming
1.1.1 release of OpenSSL.
Due to this, SM2 support was excluded from the two alpha re-
leases for OpenSSL 1.1.1. But in March 2018, just before the release of
the first 1.1.1 beta—and the associated feature freeze—the OpenSSL
development team decided to merge the PR into the 1.1.1 beta devel-
opment cycle, to have a chance to work on it and possibly include
SM2 support as part of the upcoming minor release rather than
waiting for the next one.3 Considering that new features can only be
added with a new minor release and that the current one (OpenSSL
1.1.0) was released on August 2016, it is likely that a similar—if
not longer—development cycle might be required before the SM2
functionality could be added to OpenSSL. The SM2 functionality
has thus been part of the beta development cycle since the release
of OpenSSL 1.1.1-pre3 (beta 1).
At the time of beta 1 release, the release timetable4 for OpenSSL
1.1.1 envisioned four beta releases, aiming at 15th May 2018 as the
first possible final release date. As such, the addition of SM2 sup-
port into the active development branch occurred at an extremely
late stage to be included in the upcoming release cycle, giving a
remarkably short window for public review before the final release.
The original release timeline was later5 updated, waiting for the
final publication of TLS 1.3 as RFC 8446, adding more beta releases,
and eventually shifting the final release date for OpenSSL 1.1.1 to
September 11, 2018.
Motivation and goal. The first contribution of our work, our initial
security review revealed that the late-stage featurization process
resulted in various deficiencies, ranging from code quality issues to
traditional software defects, and hinted at significant side-channel
analysis (SCA) risks based on previous SCA results targeting ECC
within OpenSSL. The goal of this research consists in empirically
verifying these SCA deficiencies, and then responsibly mitigate
them, aiming at intersecting the upcoming OpenSSL 1.1.1 release
to ensure these vulnerabilities do not affect released versions of the
library.
3https://github.com/openssl/openssl/pull/4793#pullrequestreview-104954310
4https://mta.openssl.org/pipermail/openssl-project/2018-March/000372.html
5https://github.com/openssl/web/pull/55
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Nicola Tuveri, Sohaib ul Hassan, Cesar Pereida García, and Billy Bob Brumley
Furthermore, taking SM2 as a case study, we criticize the cur-
rent status of the project. It demonstrates that implementing new
functionality without reintroducing previously fixed vulnerabilities
proves to be unnecessarily challenging, requiring intimate familiar-
ity with internal details of lower level library modules (e.g. where,
when, and how constant-time flags must be re-/enabled, which
codepaths in the lower EC and BIGNUM modules require to use im-
plementations with SCA mitigations, etc.). Hence, as a secondary
goal, we also aim at reviewing the abstraction level at which current
SCA countermeasures are implemented, and push for a secure-by-
default approach—within the boundaries the project enforces for
a minor release—so that future implementations will by default
benefit from them.
Structure and our contributions. Section 2 reviews relevant back-
ground and previous work. We present our security analysis related
to the integration of the SM2 functionality in the OpenSSL code-
base in Section 3, offering an overview of the issues uncovered. In
Section 4, Section 5, and Section 6, respectively, we evaluate SCA
defects in the SM2 implementation related to remote timings, cache
timings and EM analysis. We propose, implement and empirically
evaluate appropriate mitigations in Section 7. Finally, we conclude
in Section 8.
2 BACKGROUND
This section describes SM2, various SCA techniques that potentially
apply to SM2 implementations, and summarizes previous work on
SM2 implementation attacks.
2.1 SM2: Chinese Cryptography Standards
SM2 consists of a digital signature scheme (SM2DSA), a public key
encryption scheme (SM2PKE), and a key agreement protocol. In
this work, we restrict to SM2DSA and SM2PKE.
Elliptic curves and SM2. While the RFC contains cryptosystem test
vectors for several different curves in simplified Weierstrass form
(over both prime and binary fields), one required curve6 consists of
all the (x, y) points (x, y ∈ GF(p)) satisfying the equation
2 = x
3 + ax + b
E : y
over GF(p) along with the point-at-infinity (group identity element).
The domain parameters are consistent with legacy ECC, setting p a
256-bit Mersenne-like prime, a = −3 ∈ GF(p), both b ∈ GF(p) and
generator point G ∈ E seemingly random, and prime group order n
(i.e. co-factor h = 1) slightly below 2256.
SM2DSA digital signatures. The user’s private-public keypair is
(dA, QA) where dA is chosen uniformly from [1 . . n − 1) and QA =
[dA]G holds. Denote ZA the personalization string (hash) and m
the message. Digital signatures compute as follows.
(1) Compute the digest h = H(ZA ∥ m).
(2) Select a secret nonce k uniformly from [1 . . n).
(3) Compute (x, y) = [k]G.
(4) Compute r = h + x mod n.
(5) Compute s = (1 + dA)−1(k − rdA) mod n.
(6) If any of r = 0, s = 0, or s = k hold, retry.
6OID 1.2.156.10197.1.301
(7) Return the SM2 digital signature (r, s).
Hash function H can be any “approved” function, including SM37
standardized in a parallel effort. Verification is not relevant to this
work, hence we omit the description.
SM2PKE public key encryption. SM2PKE is roughly analogous to
ECIES [2, Sec. 5.1]. Denote the ciphertext C = C1 ∥ C2 ∥ C3 where,
at a high level, C1 represents the sender’s ephemeral Diffie-Hellman
public key (point), C2 is the One-Time-Pad (OTP) ciphertext (with
length |C2|), and C3 is the authentication tag. The recipient with
private-public keypair (dB, QB) recovers the plaintext from C as
follows.
not have order n, return an error.
(1) Convert C1 to a point on E. If C1 is not on the curve or does
(2) Compute (x, y) = [dB]C1, the shared ECDH point.
(3) Compute z = KDF(x ∥ y, |C2|), the OTP key; |z| = |C2|.
(4) Compute m′ = z ⊕ C2, i.e. OTP decryption.
(5) Compute t′ = H(x ∥ m′ ∥ y), the purported tag.
(6) If t′ (cid:44) C3 holds, return an error.
(7) Return the plaintext m′.
Encryption is not relevant to this work, hence we omit the descrip-
tion.
2.2 Remote Timing Attacks
Timing attacks exploit differences in the time required by a specific
implementation to perform an operation on different inputs. In
the case of hardware or software cryptosystem implementations, if
there is a correlation between the timing of an operation and some
secret inputs, the leaked information might be used to mount an
attack to recover secret material.
In his seminal work, Kocher [49] introduces a number of simple
timing attacks on modular exponentiation and modular reduction
implementations, affecting implementations of public key cryp-
tosystems with a static key such as RSA and static Diffie-Hellman
or DSA implementations that precompute the ephemeral part.
Brumley and Boneh [22, 23] demonstrate that timing attacks
apply also to general software systems, defying contemporary com-
mon belief, by devising a timing attack against the OpenSSL im-
plementation of RSA decryption—exploiting time dependencies
introduced by the Montgomery reduction and the multiplication
routines—and ultimately retrieving the complete factorization of the
key pair modulus. Moreover, they demonstrate that such attacks are
practical even in a remote scenario, mounting a real-world attack
through a client timing RSA decryptions during SSL handshakes
with an OpenSSL server. The attack is effective when performed
between two processes running on the same host, across co-located
virtual machines, and in local networks. They analyze three possi-
ble defenses, favoring RSA blinding, and as a consequence several
cryptographic libraries, including OpenSSL, enable RSA blinding
by default as a countermeasure.8
Acıiçmez et al. [5] further improve the original attack, by tar-
geting Montgomery Multiplications in the table initialization phase
7https://tools.ietf.org/html/draft-oscca-cfrg-sm3-02
8The issue uncovered by their work was tracked in the public CVE dictionary with the
id CVE-2003-0147, and, addressing it, OpenSSL issued a Security Advisory (17 March
2003), and CERT issued vulnerability note VU#997481.
148Side-Channel Analysis of SM2: A Late-Stage Featurization Case Study
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
of the sliding window algorithm used to perform the RSA expo-
nentiation in OpenSSL, rather than the exponentiation phase itself,
increasing the number of multiplications that leak timing infor-
mation used to retrieve one of the secret prime factors of RSA
moduli.
Chen et al. [26] build on these two attacks, improving the suc-
cess rate through an error detection and correction strategy, thus
reducing the number of queries required to mount a successful
attack and affecting the total time of the attack and its detectability.