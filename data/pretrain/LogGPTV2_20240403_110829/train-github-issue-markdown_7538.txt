I've been trying to have two different versions of a library available, in
order to check which one to use, but I can't find out how to make this work. I
even tried to explicitly separate the handles to the two versions of the
library, but then ccall always calls the one which was loaded first (i.e. it
ignores the library name, and just uses the function name).
Here's the example code:
    julia> const pkgd_dl = dlopen("/home/carlo/.julia/GLPK/deps/usr/lib/libglpk")
    Ptr{Void} @0x0000000003455da0
    julia> const system_dl = dlopen("libglpk")
    Ptr{Void} @0x000000000326d740
    julia> ccall(:add_library_mapping, Cint, (Ptr{Cchar}, Ptr{Void}), "pkgd_libglpk", pkgd_dl)
    0
    julia> ccall(:add_library_mapping, Cint, (Ptr{Cchar}, Ptr{Void}), "system_libglpk", system_dl)
    0
    julia> bytestring(ccall(("glp_version", "pkgd_libglpk"), Ptr{Uint8}, ()))
    "4.48"
    julia> bytestring(ccall(("glp_version", "system_libglpk"), Ptr{Uint8}, ()))
    Warning: Possible conflict in library symbol glp_version
    "4.48"
The last line should read `"4.45"` (and indeed it does if I don't load the
other version first).  
I checked that the `add_library_sym` in `src/ccall.cpp` does find the correct
handles and returns different pointers in the two cases.
Is it possible at all to have two different functions with the same name from
different libraries? Or am I doing something wrong?