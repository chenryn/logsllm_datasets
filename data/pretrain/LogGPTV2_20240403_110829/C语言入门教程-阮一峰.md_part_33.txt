)
接受四个参数。
strftime()
第⼀个参数：⽬标字符串的指针。
第⼆个参数：⽬标字符串可以接受的最⼤⻓度。
第三个参数：格式字符串。
第四个参数：struct tm 结构。
如果执⾏成功（转换并复制）， 函数返回复制的字符串⻓度；如果执⾏失败，返回 。
strftime() -1
下⾯是⼀个例⼦。
#include 
#include 
int main(void) {
char s[128];
time_t now = time(NULL);
strftime(s, sizeof s, "%c", localtime(&now));
puts(s);
strftime(s, sizeof s, "%A, %B %d", localtime(&now));
puts(s);
strftime(s, sizeof s, "It's %I:%M:%S %p", localtime(&now));
puts(s);
strftime(s, sizeof s, "ISO 8601: %FT%T%z", localtime(&now));
puts(s);
}
下⾯是常⽤的格式占位符。
%%：输出 % 字符。
%a：星期⼏的简写形式，以当地时间计算。
%A：星期⼏的完整形式，以当地时间计算。
%b：⽉份的简写形式，以当地时间计算。
%B：⽉份的完整形式，以当地时间计算。
%c：⽇期和时间，使⽤ “%x %X”。
%d：⽉份的天数（01-31）。
%H：⼩时，采⽤ 24 ⼩时制（00-23）。
%I：⼩时，采⽤ 12 ⼩时制（00-12）。
%J：⼀年的第⼏天（001-366）。
%m：⽉数（01-12）。
%M：分钟（00～59）。
%P：AM 或 PM。
%R：相当于 "%H:%M"。
%S：秒（00-61）。
%U：⼀年的第⼏星期（00-53），以星期⽇为第 1 天。
%w：⼀星期的第⼏天，星期⽇为第 0 天。
%W：⼀年的第⼏星期 (00-53)，以星期⼀为第 1 天。
%x：完整的年⽉⽇的⽇期，以当地时间计算。
%X：完整的时分秒的时间，以当地时间计算。
%y：两位数年份（00-99）。
%Y：四位数年份（例如 1984）。
%Z：时区的简写。
timespec_get() #
⽤来将当前时间转成距离时间纪元的纳秒数（⼗亿分之⼀秒）。
timespec_get()
int timespec_get ( struct timespec* ts, int base ) ;
接受两个参数。
timespec_get()
第⼀个参数是 struct timespec 结构指针，⽤来保存转换后的时间信息。struct timespec 的结构如下。
struct timespec {
time_t tv_sec;
long tv_nsec;
};
第⼆个参数是⼀个整数，表示时间计算的起点。标准只给出了宏 TIME_UTC 这⼀个可能的值，表示返回距
离时间纪元的秒数。
下⾯是⼀个例⼦。
struct timespec ts;
timespec_get(&ts, TIME_UTC);
printf("%ld s, %ld ns\n", ts.tv_sec, ts.tv_nsec);
double float_time = ts.tv_sec + ts.tv_nsec/1000000000.0;
printf("%f seconds since epoch\n", float_time);
clock() #
函数返回从程序开始执⾏到当前的 CPU 时钟周期。⼀个时钟周期等于 CPU 频率的倒数，⽐如
clock()
CPU 的频率如果是 1G Hz，表示 1 秒内时钟信号可以变化 10^9 次，那么每个时钟周期就是 10^-9 秒。
clock_t clock(void);
函数返回⼀个数字，表示从程序开始到现在的 CPU 时钟周期的次数。这个值的类型是 clock_t，
clock()
⼀般是 long int 类型。
为了把这个值转换为秒，应该把它除以常量 （每秒的时钟周期），这个常量也由
CLOCKS_PER_SEC time.h
定义。
printf("CPU time: %f\n", clock() / (double)CLOCKS_PER_SEC);
上⾯示例可以输出程序从开始到运⾏到这⼀⾏所花费的秒数。
如果计算机⽆法提供 CPU 时间，或者返回值太⼤，⽆法⽤ 类型表示， 函数就返
clock_t clock()
回 。
-1
为了知道某个操作所耗费的精确时间，需要调⽤两次 ，然后将两次的返回值相减。
clock()
clock_t start = clock();
clock_t end = clock();
long double seconds = (float)(end - start) / CLOCKS_PER_SEC;
参考链接 #
How to Measure Execution Time of a Program
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
语⾔教程 ⽹道
wchar.h - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
宽字符使⽤两个或四个字节表示⼀个字符，导致 C 语⾔常规的字符处理函数都会失效。wchar.h 定义了许
多宽字符专⽤的处理函数。
类型别名和宏 #
wchar.h 定义了⼀个类型别名 wint_t，表示宽字符对应整数值。
wchar.h 还定义了⼀个宏 WEOF，表示⽂件结束字符 EOF 的宽字符版。
btowc()，wctob() #
将单字节字符转换为宽字符， 将宽字符转换为单字节字符。
btowc() wctob()
wint_t btowc(int c);
int wctob(wint_t c);
返回⼀个宽字符。如果参数是 EOF，或转换失败，则返回 WEOF。
btowc()
返回⼀个单字节字符。如果参数是 WEOF，或者参数宽字符⽆法对应单个的单字节字符，则返回
wctob()
EOF。
下⾯是⽤法示例。
wint_t wc = btowc('B');
wprintf(L"Wide character: %lc\n", wc);
unsigned char c = wctob(wc);
wprintf(L"Single-byte character: %c\n", c);
fwide() #
⽤来设置⼀个字节流是宽字符流，还是多字节字符流。
fwide()
如果使⽤宽字符专⽤函数处理字节流，就会默认设置字节流为宽字符流，否则就需要使⽤ 显式设
fwide()
置。
int fwide(FILE* stream, int mode);
它接受两个参数，第⼀个参数是⽂件指针，第⼆个参数是字节流模式，有三种选择。
0：字节流模式保持原样。
-1（或其他负值）：设为多字节字符流。
1（或其他正值）：设为宽字符流。
的返回值也分成三种情况：如果是宽字符流，返回⼀个正值；如果是多字节字符流，返回⼀个负
fwide()
值；如果是普通字符流，返回 。
0
⼀旦设置了字节流模式，就⽆法再更改。
#include 
#include 
int main(void) {
wprintf(L"Hello world!\n");
int mode = fwide(stdout, 0);
wprintf(L"Stream is %ls-oriented\n", mode < 0 ? L"byte" : L"wide");
}
上⾯示例中， 将字节流隐式设为宽字符模式，所以 的返回值⼤于零。
wprintf() fwide(stdout, 0)
宽字符专⽤函数 #
下⾯这些函数基本都是 stdio.h ⾥⾯的字符处理函数的宽字符版本，必须使⽤这些函数来操作宽字符。
fgetwc() 从宽字符流中获取宽字符，对应 fgetc()。
fgetws() 从宽字符流中读取宽字符串，对应 fgets()。
fputwc() 将宽字符写⼊宽字符流，对应 fputc()。
fputws() 将宽字符串写⼊宽字符流，对应 fputs()。
fwprintf() 格式化宽输出到宽字符流，对应 fprintf()。
fwscanf() 来⾃宽字符流的格式化宽字符输⼊，对应 fscanf()。
getwchar() 从 stdin 获取⼀个宽字符，对应 getchar()。
getwc() 从 stdin 获取⼀个宽字符，对应 getc()。
putwchar() 写⼀个宽字符到 stdout，对应 putchar()。
putwc() 写⼀个宽字符到 stdout，对应 putc()。
swprintf() 格式化宽输出到宽字符串，对应 sprintf()。
swscanf() 来⾃宽字符串的格式化宽输⼊，对应 sscanf()。
ungetwc() 将宽字符推回输⼊流，对应 ungetc()。
vfwprintf() 可变参数的格式化宽字符输出到宽字符流，对应 vfprintf()。
vfwscanf() 来⾃宽字符流的可变参数格式化宽字符输⼊，对应 vfscanf()。
vswprintf() 可变参数的格式化宽字符输出到宽字符串，对应 vswprintf()。
vswscanf() 来⾃宽字符串的可变参数格式化宽字符输⼊，对应 vsscanf()。
vwprintf() 可变参数格式化宽字符输出，对应 vprintf()。
vwscanf() 可变参数的格式化宽字符输⼊，对应 vscanf()。
wcscat() 危险地连接宽字符串，对应 strcat()。
wcschr() 在宽字符串中查找宽字符，对应 strchr()。
wcscmp() ⽐较宽字符串，对应 strcmp()。
wcscoll() ⽐较两个考虑语⾔环境的宽字符串，对应 strcoll()。
wcscpy() 危险地复制宽字符串，对应 strcpy()。
wcscspn() 不是从宽字符串前⾯开始计算字符，对应 strcspn()。
wcsftime() 格式化的⽇期和时间输出，对应 strftime()。
wcslen() 返回宽字符串的⻓度，对应 strlen()。
wcsncat() 更安全地连接宽字符串，对应 strncat()。
wcsncmp() ⽐较宽字符串，⻓度有限，对应 strncmp()。
wcsncpy() 更安全地复制宽字符串，对应 strncpy()。
wcspbrk() 在宽字符串中搜索⼀组宽字符中的⼀个，对应 strpbrk()。
wcsrchr() 从末尾开始在宽字符串中查找宽字符，对应 strrchr()。
wcsspn() 从宽字符串前⾯的集合中计算字符，对应 strspn()。
wcsstr() 在另⼀个宽字符串中找到⼀个宽字符串，对应 strstr()。
wcstod() 将宽字符串转换为 double，对应 strtod()。
wcstof() 将宽字符串转换为 float，对应 strtof()。
wcstok() 标记⼀个宽字符串，对应 strtok()。
wcstold() 将宽字符串转换为 long double，对应 strtold()。
wcstoll() 将宽字符串转换为 long long，对应 strtoll()。
wcstol() 将宽字符串转换为 long，对应 strtol()。
wcstoull() 将宽字符串转换为 unsigned long long，对应 strtoull()。
wcstoul() 将宽字符串转换为 unsigned long，对应 strtoul()。
wcsxfrm() 转换宽字符串以根据语⾔环境进⾏⽐较，对应 strxfrm()。
wmemcmp() ⽐较内存中的宽字符，对应 memcmp()。
wmemcpy() 复制宽字符内存，对应 memcpy()。
wmemmove() 复制宽字符内存，可能重叠，对应 memmove()。
wprintf() 格式化宽输出，对应 printf()。
wscanf() 格式化宽输⼊，对应 scanf()。
多字节字符专⽤函数 #
wchar.h 也定义了⼀些多字节字符的专⽤函数。
mbsinit() 判断 mbstate_t 是否处于初始转换状态。
mbrlen() 给定转换状态时，计算多字节字符串的字节数，对应 mblen()。
mbrtowc() 给定转换状态时，将多字节字符转换为宽字符，对应 mbtowc()。
wctombr() 给定转换状态时，将宽字符转换为多字节字符，对应 wctomb()。
mbsrtowcs() 给定转换状态时，将多字节字符串转换为宽字符串，对应 mbstowcs()。
wcsrtombs() 给定转换状态时，将宽字符串转换为多字节字符串，对应 wcstombs()。
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
语⾔教程 ⽹道
wctype.h - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
wctype.h 提供 ctype.h ⾥⾯函数的宽字符版本。
宽字符类型判断函数 #
下⾯函数判断宽字符的类型。
iswalnum() 测试宽字符是否为字⺟数字
iswalpha() 测试宽字符是否为字⺟
iswblank() 测试这是否是⼀个宽空⽩字符
iswcntrl() 测试这是否是⼀个宽控制字符。
iswdigit() 测试这个宽字符是否是数字
iswgraph() 测试宽字符是否是可打印的⾮空格字符
iswlower() 测试宽字符是否为⼩写
iswprint() 测试宽字符是否可打印
iswpunct() 测试宽字符是否为标点符号
iswspace() 测试宽字符是否为空格
iswupper() 测试宽字符是否为⼤写
iswxdigit() 测试宽字符是否为⼗六进制数字
wctype()，iswctype() #
是上⼀节各种宽字符类型判断函数的通⽤版本，必须与 配合使⽤。
iswctype() wctype()
int iswctype(wint_t wc, wctype_t desc);
接受两个参数，第⼀个参数是⼀个需要判断类型的宽字符，第⼆个参数是宽字符类型描述，来
iswctype()
⾃ 的返回值。
wctype()
如果宽字符属于指定类型， 返回⼀个⾮零值，否则返回零。
iswctype()
⽤来获取某个种类宽字符的类型描述。
wctype()
wctype_t wctype(const char* property);
的参数是⼀个给定的字符串，可⽤的值如下：alnum、alpha、blank、cntrl、digit、graph、
wctype()
lower、print、punct、space、upper、xdigit。
的返回值的类型为 wctype_t，通常是⼀个整数。如果参数是⼀个⽆效值，则返回 。
wctype() 0
if (iswctype(c, wctype("digit")))
if (iswdigit(c))
上⾯示例⽤来判断宽字符 是否为数值，相当于 。
c iswdigit()
的完整类型判断如下。
iswctype()
iswctype(c, wctype("alnum"))
iswctype(c, wctype("alpha"))
iswctype(c, wctype("blank"))
iswctype(c, wctype("cntrl"))
iswctype(c, wctype("digit"))
iswctype(c, wctype("graph"))
iswctype(c, wctype("lower"))
iswctype(c, wctype("print"))
iswctype(c, wctype("punct"))
iswctype(c, wctype("space"))
iswctype(c, wctype("upper"))
iswctype(c, wctype("xdigit"))
⼤⼩写转换函数 #
wctype.h 提供以下宽字符⼤⼩写转换函数。
towlower() 将⼤写宽字符转换为⼩写
towupper() 将⼩写宽字符转换为⼤写
towctrans() 宽字符⼤⼩写转换的通⽤函数
wctrans() ⼤⼩写转换的辅助函数，配合 towctrans() 使⽤
先看 和 的⽤法示例。
towlower() towupper()
towlower(L'B')
towupper(L'e')
和 的原型如下。
towctrans() wctrans()
wint_t towctrans(wint_t wc, wctrans_t desc);
wctrans_t wctrans(const char* property);
下⾯是它们的⽤法示例。
towctrans(c, wctrans("toupper"))
towctrans(c, wctrans("tolower"))
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址