### 硬件攻击
- **从多个引脚（如大型QFP或BGA组件）入手：**
  - 通过切断或调节某些电源引脚，可以使芯片出现异常行为。
  - 有时可以混淆芯片，但使其仍然响应调试接口。
  - **总结：** 芯片对电源波动非常敏感，但在过去几年中已经有了很大的改进。

### 软件攻击
- **设备的软件是否可以更新？**
  - 检查官方网站是否有软件更新。
  - 如果有软件更新，下载并尝试反编译（其中包含大量信息）。
  - 如果找到二进制包（如CAB文件），可能找到了固件。
  - 一些供应商喜欢“加密”他们的更新。大多数情况下，这种加密系统非常弱，例如简单的XOR或XOR +/-1。
  - 在大多数情况下，除非是“安全”设备，否则更多公司更关心知识产权泄露而非设备的安全性。

### 固件识别
- **每个设备都有其独特的软件结构方式。**
  - **ARM：**
    - 加载表：这些代表20字节的加载行，告诉MPU如何将覆盖层加载到芯片内存中（因为主芯片没有足够的内存来一次性存储所有内容）。提示：地址为3个字节长！
  - **MSP430：**
    - 注意在0x0000地址处的向量表：
      - seg000:0000FFE0 .short 0F852h
      - seg000:0000FFE2 .short 0F852h
      - seg000:0000FFE4 .short 0F852h
      - seg000:0000FFE6 .short 0F852h
      - seg000:0000FFE8 .short 0F852h
      - seg000:0000FFEA .short 0F852h
      - seg000:0000FFEC .short 0F852h
      - seg000:0000FFEE .short 0F852h
      - seg000:0000FFF0 .short 0F852h
      - seg000:0000FFF2 .short 0F852h
      - seg000:0000FFF4 .short 0F956h
      - seg000:0000FFF6 .short 0F852h
      - seg000:0000FFF8 .short 0F852h
      - seg000:0000FFFA .short 0F852h
      - seg000:0000FFFC .short 0F852h
      - seg000:0000FFFE .short 0F800h
  - **AVR：**
    - 同样，有一个向量表来定义组件在重启、定时器中断等事件中的行为。
    - ROM:0000 TWSI__0: ; CODE XREF: TWSI_j
    - ROM:0000 jmp __RESET ; 外部引脚、上电复位、掉电复位和看门狗复位
    - ROM:0000 ; 函数TWSI__0结束
    - ROM:0002 .org 2
    - ROM:0002 jmp TWSI_ ; 2线串行接口
    - ROM:0004 .org 4
    - ROM:0004 jmp TWSI_ ; 2线串行接口
    - ROM:0006 .org 6
    - ROM:0006 jmp TWSI_ ; 2线串行接口
    - ROM:0008 .org 8
    - ROM:0008 jmp TWSI_ ; 2线串行接口
    - ROM:000A .org 0xA
    - ROM:000A jmp TWSI_ ; 2线串行接口
  - **Xilinx FPGA：**
    - Xilinx比特流：
      ```
      ----------Bitstream Header----------
      Design Name: Unknown
      Part Name: 2vp50
      Date: Unknown
      Time: Unknown
      -------------End Header-------------
      ----------Begin Bitstream-----------
      ffffffff - Dummy Word
      aa995566 - Sync Word
      30008001 - CMD
      00000007 - CMD: Reset CRC
      30016001 - FLR
      000000e1
      30012001 - COR
      00043fe5
      3001c001 - IDCODE
      0129e093
      3000c001 - MASK Type I
      00000000
      30008001 - CMD
      00000009 - CMD: Switch CCLK Frequency
      30002001 - FAR
      00000000 - MJA: 0 MNA: 0
      30008001 - CMD
      00000001 - CMD: Write Configuration
      30004000 - FDRI Type II
      500910ea - Length: 594154 words (2629 frames)
      00800000 - BA: 0 MJA: 0 MNA: 0 Word: 0 (GCLK)
      00000140 - BA: 0 MJA: 0 MNA: 0 Word: 1 (GCLK)
      ```
    - 非常感谢Casey Morford在Xilinix芯片动态重新配置方面的工作。

### 其他芯片结构
- **大多数芯片都有不同版本的嵌入式编译器和实时操作系统（RTOS）。**
  - 每一个都有自己特有的“标记”在二进制映像中。
  - Code Sorcery（现为Mentor Graphics）编译器和链接器以特定方式处理代码覆盖。
  - Keil Software的编译器在其加载程序和向量处理代码中也有一系列标记。
  - 许多开发人员会从制造商提供的代码示例开始（我们也是如此），这使得识别变得更加容易。
  - 查看地址顺序、段号和标志。

### 更新机制
- **每个设备都有自己的更新机制。**
  - 可能可以通过中间人攻击获取解密后的固件。
  - 有些固件可能在组件上进行解密。
  - 如果在文件中发现一个显著区域是重复字符序列（例如4字节），很可能你面对的是简单的XOR加密，并且你看到的是密钥。
  - 同样，如果发现一个值递增或递减的区域，可能是XOR +n/-n密钥。
  - 通过逆向计算，可以确定密钥、重复间隔和进展。
  - 确定单位增量、观察位置的值以及这些单位的偏移量，然后逆向计算出起始密钥。
  - 起始密钥 = ((已知偏移) – (起始偏移)) / (密钥大小) * (已知偏移处的密钥)。大致如此。乘法操作限制在密钥大小内，或者可以使用“for”循环。

### 不同组件类型的机器语言
- **每个组件类型（家族）都有其自己的机器语言。**
  - ARM不同于AVR，AVR不同于Z80，Z80不同于x86，x86不同于PPC。
  - 操作码（OP代码）不同。
  - 外设区域（输入/输出区域）也不同。
  - 有些家族可能具有相同的通用区域。