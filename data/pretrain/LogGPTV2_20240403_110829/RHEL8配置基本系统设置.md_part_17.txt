下表列出了 \[Service\] 部分的重要选项。
::: table
[]{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#tabl-systemd-Service_Sec_Options}
**表 17.2. 重要 \[Service\] 部分选项**
::: table-contents
+----------------------------------+----------------------------------+
| 选项                             | 描述                             |
| [^\[a\]^](#assembly_wo           |                                  |
| rking-with-systemd-unit-files_co |                                  |
| nfiguring-basic-system-settings. |                                  |
| html#ftn.idm140142089741792){#as |                                  |
| sembly_working-with-systemd-unit |                                  |
| -files_configuring-basic-system- |                                  |
| settings.html#idm140142089741792 |                                  |
| .footnote}                       |                                  |
+:=================================+:=================================+
| `Type`{.literal}                 | 配置单元进程启动类型，它会影响   |
|                                  | `ExecStart 的功能`{.literal}     |
|                                  | 和相关选项。其中之一：           |
|                                  |                                  |
|                                  | \* `simple`{.literal} -          |
|                                  | 默认值。使用                     |
|                                  | `ExecStart`{.literal}            |
|                                  | 启动的进程是该服务的主要进程。   |
|                                  |                                  |
|                                  | \* `forking`{.literal} - 使用    |
|                                  | `ExecStart`{.literal}            |
|                                  | 启动的                           |
|                                  | 进程生成一个子进程，成为服务的主 |
|                                  | 进程。父进程在启动完成后会退出。 |
|                                  |                                  |
|                                  | \* `oneshot`{.literal} --        |
|                                  | 这个类型与 `simple`{.literal}    |
|                                  | 类似，但在启动相应单位前会退出。 |
|                                  |                                  |
|                                  | \* `dbus`{.literal} - 这个类型与 |
|                                  | `simple`{.literal}               |
|                                  | 类似，但仅在主进程获得 D-Bus     |
|                                  | 名称后启动。                     |
|                                  |                                  |
|                                  | \* `notify`{.literal} - 此类型与 |
|                                  | `simple`{.literal}               |
|                                  | 类似，但只有在通过               |
|                                  | sd_notify（）函                  |
|                                  | 数发送通知消息后才启动相应单元。 |
|                                  |                                  |
|                                  | \* `idle`{.literal} - 与         |
|                                  | `simple`{.literal}               |
|                                  | 类似，服务二进制文件             |
|                                  | 的实际执行会延迟到所有作业完成前 |
|                                  | ，这样可以避免将状态输出与服务的 |
|                                  | shell 输出混合。                 |
+----------------------------------+----------------------------------+
| `ExecStart`{.literal}            | 指定在启动该单元时要执行的命令   |
|                                  | 或脚本。`ExecStartPre`{.literal} |
|                                  | 和 `ExecStartPost`{.literal}     |
|                                  | 指定在                           |
|                                  | `ExecStartPtart`{.literal}       |
|                                  | 之前和之后要执行的自定           |
|                                  | 义命令。`Type=oneshot`{.literal} |
|                                  | 启用指                           |
|                                  | 定可按顺序执行的多个自定义命令。 |
+----------------------------------+----------------------------------+
| `ExecStop`{.literal}             | 指定在                           |
|                                  | 该单元停止时要执行的命令或脚本。 |
+----------------------------------+----------------------------------+
| `ExecReload`{.literal}           | 指定重新                         |
|                                  | 载入该单元时要执行的命令或脚本。 |
+----------------------------------+----------------------------------+
| `Restart`{.literal}              | 启用此选项后                     |
|                                  | ，服务会在进程退出后重新启动，但 |
|                                  | `systemctl`{.literal}            |
|                                  | 命令的干净停止除外。             |
+----------------------------------+----------------------------------+
| `RemainAfterExit`{.literal}      | 如果设置为                       |
|                                  | True，即使所有进程都退出，       |
|                                  | 该服务也被视为活动状态。默认值为 |
|                                  | False。这个选项在配置了          |
|                                  | `Type=oneshot`{.literal}         |
|                                  | 时特别有用。                     |
+----------------------------------+----------------------------------+
| ::: {#assembly_working-          |                                  |
| with-systemd-unit-files_configur |                                  |
| ing-basic-system-settings.html#f |                                  |
| tn.idm140142089741792 .footnote} |                                  |
| [^\[a\]^](#assembly_work         |                                  |
| ing-with-systemd-unit-files_conf |                                  |
| iguring-basic-system-settings.ht |                                  |
| ml#idm140142089741792){.simpara} |                                  |
| 有关 \[Service\]                 |                                  |
| 部                               |                                  |
| 分中可配置的完整选项列表，请参阅 |                                  |
| `systemd.service(5)`{.literal}   |                                  |
| 手册页。                         |                                  |
| :::                              |                                  |
+----------------------------------+----------------------------------+
:::
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#ref_important-install-section-options_assembly_working-with-systemd-unit-files}重要 \[Install\] 部分选项 {.title}
:::
下表列出了 \[Install\] 部分的重要选项。
::: table
[]{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#tabl-systemd-Install_Sec_Options}
**表 17.3. 重要 \[Install\] 部分选项**
::: table-contents
+----------------------------------+----------------------------------+
| 选项                             | 描述                             |
| [^\[a\]^](#assembly_wo           |                                  |
| rking-with-systemd-unit-files_co |                                  |
| nfiguring-basic-system-settings. |                                  |
| html#ftn.idm140142153348928){#as |                                  |
| sembly_working-with-systemd-unit |                                  |
| -files_configuring-basic-system- |                                  |
| settings.html#idm140142153348928 |                                  |
| .footnote}                       |                                  |
+:=================================+:=================================+
| `Alias`{.literal}                | 为这个单                         |
|                                  | 元提供空格分开的额外名称列表。除 |
|                                  | `systemctl enable`{.literal}     |
|                                  | 以外，多数`systemctl`{.literal}  |
|                                  | 命令                             |
|                                  | 可使用别名而不是实际的单元名称。 |
+----------------------------------+----------------------------------+
| `RequiredBy`{.literal}           | 依赖于这个单                     |
|                                  | 元的单元列表。当启用此单元时，在 |
|                                  | `RequiredBy`{.literal}           |
|                                  | 中                               |
|                                  | 列出的单元会获得对这个单元的一个 |
|                                  | `Require`{.literal} 依赖项。     |
+----------------------------------+----------------------------------+
| `WantedBy`{.literal}             | 依赖于这个单元                   |
|                                  | 的单位列表。当启用这个单元时，在 |
|                                  | `WantedBy`{.literal}             |
|                                  | 中列出的单元会得到一个           |
|                                  | `Want`{.literal} 依赖项。        |
+----------------------------------+----------------------------------+
| `Also`{.literal}                 | 指定要随这                       |
|                                  | 个单元一起安装或卸载的单元列表。 |
+----------------------------------+----------------------------------+
| `DefaultInstance`{.literal}      | 仅限于实例化单                   |
|                                  | 元，这个选项指定启用单位的默认实 |
|                                  | 例。[请参阅使用实例化单元](http  |
|                                  | s://access.redhat.com/documentat |
|                                  | ion/en-us/red_hat_enterprise_lin |
|                                  | ux/8/html-single/configuring_bas |
|                                  | ic_system_settings/index#working |
|                                  | -with-instantiated-units_working |
|                                  | -with-systemd-unit-files){.link} |
+----------------------------------+----------------------------------+
| ::: {#assembly_working-          |                                  |
| with-systemd-unit-files_configur |                                  |
| ing-basic-system-settings.html#f |                                  |
| tn.idm140142153348928 .footnote} |                                  |
| [^\[a\]^](#assembly_work         |                                  |
| ing-with-systemd-unit-files_conf |                                  |
| iguring-basic-system-settings.ht |                                  |
| ml#idm140142153348928){.simpara} |                                  |
| 有关 \[Install\]                 |                                  |
| 部分                             |                                  |
| 中可配置的选项的完整列表，请查看 |                                  |
| `systemd.unit(5)`{.literal}      |                                  |
| 手册页。                         |                                  |
| :::                              |                                  |
+----------------------------------+----------------------------------+
:::
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#proc_creating-custom-unit-files_assembly_working-with-systemd-unit-files}创建自定义单元文件 {.title}
:::
从头开始创建单元文件有几个用例：您可以运行自定义守护进程，创建一些现有服务的第二个实例，如
[创建 sshd
服务的第二个实例](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#creating-custom-unit-files_working-with-systemd-unit-files){.link}一样
另一方面，如果您只想修改或扩展现有单元的行为，请使用修改现有
[单元文件](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#modifying-existing-unit-files_working-with-systemd-unit-files){.link}
中的说明。
::: title
**流程**
:::
以下流程描述了创建自定义服务的一般过程：
::: orderedlist
1.  使用自定义服务准备可执行文件。这可以是自定义创建的脚本，也可以是软件供应商提供的可执行文件。如果需要，准备
    PID 文件来保存自定义服务主要进程的恒定
    PID。也可以包含环境文件来存储该服务的 shell
    变量。确保源脚本可执行（通过执行 `chmod a+x`{.literal}）且不交互式。
2.  在 `/etc/systemd/system/`{.literal}
    目录中创建一个单元文件，并确定它有正确的文件权限。以
    `root`{.literal} 用户身份执行：
    ``` literallayout
    touch /etc/systemd/system/name.service
    chmod 664 /etc/systemd/system/name.service
    ```
    使用要创建的服务的名称替换
    [*name*]{.emphasis}。请注意，该文件不需要可执行。
3.  打开上一步中创建的 `name.service`{.literal}
    文件并添加服务配置选项。根据您要创建的服务类型，可以使用各种选项，查看
    [单元文件结构](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#unit-file-structure_working-with-systemd-unit-files){.link}。
    以下是网络相关服务的单元配置示例：
    ``` literallayout
    [Unit]
    Description=service_description
    After=network.target
    [Service]
    ExecStart=path_to_executable
    Type=forking
    PIDFile=path_to_pidfile
    [Install]
    WantedBy=default.target
    ```
    其中：
    ::: itemizedlist
    -   [*service_description*]{.emphasis} 是一个信息性描述，显示在
        journal 日志文件和 `systemctl status`{.literal} 命令的输出中。
    -   `After`{.literal}
        设置可确保仅在网络运行后启动该服务。添加以空格分隔的其他相关服务或目标列表。
    -   [*path_to_executable*]{.emphasis} 代表到实际可执行服务的路径。
    -   `type=forking`{.literal} 用于生成 fork
        系统调用的守护进程。该服务的主要进程使用
        [*path_to_pidfile*]{.emphasis} 中指定的 PID 创建。在 [Important
        \[Service\]
        部分中查找其他启动类型](#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#tabl-systemd-Service_Sec_Options "表 17.2. 重要 [Service] 部分选项"){.link}。
    -   `WantedBy`{.literal}
        指出该服务应在其下启动的目标。将这些目标视为较旧的运行级别概念的替代。
    :::
4.  以 `root`{.literal} 用户身份执行以下命令来通知
    [**[systemd]{.application}**]{.strong} 是否存在新
    `name.service`{.literal} 文件：
    ``` literallayout
    systemctl daemon-reload
    systemctl start name.service
    ```
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    在创建新单元文件或修改现有单元文件后，始终运行
    `systemctl daemon-reload`{.literal}
    命令。否则，`systemctl start`{.literal} 或
    `systemctl enable`{.literal} 命令可能会因为
    [**[systemd]{.application}**]{.strong}
    状态和磁盘上的实际服务单元文件不匹配而失败。请注意，对于有大量单元的系统来说，这需要很长时间，因为每个单元的状态必须在重新载入的过程中被序列化，然后再进行反序列化。
    :::
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#proc_creating-a-custom-unit-file-by-using-the-second-instance-of-the-sshd-service_assembly_working-with-systemd-unit-files}使用 sshd 服务第二个实例创建自定义单元文件 {.title}
:::
系统管理员通常需要配置并运行多个服务实例。这可以通过创建原始服务配置文件的副本并修改某些参数来避免与服务的主实例冲突。以下步骤演示了如何创建
`sshd`{.literal} 服务第二个实例。
::: orderedlist
**流程**
1.  创建第二个守护进程将使用的 `sshd_config`{.literal} 文件副本：
    ``` literallayout
    # cp /etc/ssh/sshd{,-second}_config
    ```
2.  编辑上一步中创建的 `sshd-second_config`{.literal}
    文件，为第二个守护进程分配不同的端口号和 PID 文件：
    ``` literallayout
    Port 22220
    PidFile /var/run/sshd-second.pid
    ```
    有关 `Port`{.literal} 和 `PidFile`{.literal} 选项的详情，请查看
    `sshd_config`{.literal}(5)手册页。请确定您选择的端口没有被其他服务使用。在运行该服务前，PID
    文件不一定存在，它会在服务启动时自动生成。
3.  为 `sshd`{.literal} 服务创建 systemd 单元文件副本：
    ``` literallayout
    # cp /usr/lib/systemd/system/sshd.service /etc/systemd/system/sshd-second.service
    ```
4.  按如下方式更改上一步中创建的 `sshd-second.service`{.literal}:
    ::: orderedlist
    1.  修改 `Description`{.literal} 选项：
        ``` literallayout
        Description=OpenSSH server second instance daemon
        ```
    2.  将 sshd.service 添加到 `After`{.literal}
        选项中指定的服务，因此第二实例仅在第一个实例启动后启动：
        ``` literallayout
        After=syslog.target network.target auditd.service sshd.service
        ```
    3.  sshd 的第一个实例包括密钥生成，因此删除
        [**ExecStartPre=/usr/sbin/sshd-keygen**]{.strong} 行。
    4.  为 `sshd`{.literal} 命令添加
        `-f /etc/ssh/sshd-second_config`{.literal}
        参数，以便使用其它配置文件：
        ``` literallayout
        ExecStart=/usr/sbin/sshd -D -f /etc/ssh/sshd-second_config $OPTIONS
        ```
    5.  在进行以上修改后，sshd-second.service 应该如下所示：
        ``` literallayout
        [Unit]
        Description=OpenSSH server second instance daemon
        After=syslog.target network.target auditd.service sshd.service
        [Service]
        EnvironmentFile=/etc/sysconfig/sshd
        ExecStart=/usr/sbin/sshd -D -f /etc/ssh/sshd-second_config $OPTIONS
        ExecReload=/bin/kill -HUP $MAINPID
        KillMode=process
        Restart=on-failure
        RestartSec=42s
        [Install]
        WantedBy=multi-user.target
        ```
    :::
5.  如果使用 SELinux，请将第二个 sshd 实例的端口添加到 SSH 端口中，否则
    sshd 的第二个实例将被拒绝绑定到端口：
    ``` literallayout
    # semanage port -a -t ssh_port_t -p tcp 22220
    ```
6.  启用 sshd-second.service，以便在引导时自动启动：
    ``` literallayout
    # systemctl enable sshd-second.service
    ```
7.  使用 `systemctl status`{.literal} 命令验证 sshd-second.service
    是否在运行。
8.  通过连接到该服务来验证是否正确启用了端口：
    ``` literallayout
    $ ssh -p 22220 user@server
    ```
    如果使用防火墙，请确定正确配置了防火墙以便允许到第二个 sshd
    实例的连接。
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#con_converting-sysv-init-scripts-to-unit-files_assembly_working-with-systemd-unit-files}将 SysV init 脚本转换为单元文件 {.title}