### 3.3 Data Integration

USDL/XML and USDL/Ecore define a model that includes attributes (e.g., integers, longs, strings, or other structures) to which values (e.g., 232, 1.4, "ITIL Incident Management") are assigned. This implies that the data associated with a service instance is meaningful only to the entity providing it. In contrast, RDFS enables the reuse of existing web data in the form of Linked Data. For example, when creating a description for the ITIL IM service, the company providing the service can be specified by assigning the unique URI `http://dbpedia.org/resource/Cloudera`, which is maintained at dbpedia.org. This URI is linked to a wealth of additional data, such as the number of employees, address, economic sector, etc. of the service provider.

Using USDL/XML and USDL/Ecore, the string "Cloudera" would simply be assigned to an attribute, limiting its meaning to the entity that provided it. As we move towards a more interconnected world of data, the integration of data and services becomes increasingly important. Compared to USDL/XML and USDL/Ecore, Linked USDL/RDFS incorporates Linked Data mechanisms that are valuable for supporting data integration initiatives within a web of services.

### 3.4 Instance Identification

The result of describing a service with a model is an instance. For global trading of services, each instance needs to be uniquely identified. USDL/XML and USDL/Ecore propose using Universally Unique Identifiers (UUIDs). However, this approach has drawbacks, including the need for central management of identifiers and the potential to "hide" service information, such as the service name and provider, into a number via an encoding mechanism. 

In contrast, Linked USDL/RDFS relies on URIs to provide a simple way to create unique global identifiers for services. Compared to UUIDs, Linked USDL URIs are more suitable for service distribution networks because they are managed locally by service providers. The same URI that provides a global unique identifier for a service also serves as an endpoint for uniform data access to the service description. A Linked USDL URI can be used by tools such as RDFS browsers, RDFS search engines, and web query agents looking for cloud service descriptions.

### 4. Linked USDL Family

Linked USDL is segmented into modules that together form the Linked USDL family. The objective of this division is to reduce the overall complexity of service modeling by allowing providers to use only the necessary modules. Currently, five modules exist, each at different maturity levels:

- **usdl-core (★★★)**: The core module covers essential concepts for a service description, including operational aspects like interaction points during provisioning and the description of business entities involved.
- **usdl-price (★★)**: The pricing module provides a range of concepts needed to describe price structures in the service industry.
- **usdl-agreement (★)**: The service level module gathers functional and non-functional information on the quality of the service provided, such as availability, reliability, and response time.
- **usdl-sec (★★)**: This module aims to describe the main security properties of a service, allowing providers to specify security features.
- **usdl-ipr (★★)**: This module captures the usage rights of a service, often associated with copyright.

For example, the `usdl-agreement` module is being reconstructed to align with the WS-Agreement specification. Customers and providers can use this module to create service level agreements and monitor compliance. In case of violations, penalties or compensations can be directly derived.

**usdl-core** is the central module of the Linked USDL family, tying together all aspects of service descriptions distributed across the USDL modules. Figure 2 shows the conceptual diagram of the core module, where classes are represented with ovals and properties with edges. `usdl-core` has 12 classes and 13 properties (for more details, see [15]).

Other modules, such as Linked Service System USDL (LSS USDL), are being developed as proofs of concept. LSS USDL provides modeling constructs to capture the concepts of a service system, focusing on the internal elements of the service, while Linked USDL looks at the external description.

### 4.1 Standardization Efforts

Service standards are expected to drive the industrialization of the service market, increase transparency and access, and lead to higher trading of services across countries. Linked USDL fills this gap by proposing a specification language that unifies the formalization of business and technical aspects.

A W3C Unified Service Description Language Incubator Group was initiated by Attensity, DFKI, SAP, and Siemens in September 2010 and concluded its activities in October 2011. The group's objectives were to investigate related standards and approaches, redesign USDL to include feedback and requirements, and define and implement reference test cases to validate USDL. The final outcome was a report and a reworked USDL specification: USDL V3.0 (Table 1).

While USDL did not become a W3C standard, the working group agreed that creating a Linked Data version was a step forward for possible standardization and wider adoption. Linked USDL can evolve into a language that addresses the gaps in various fields requiring service modeling, such as cloud computing. In 2012, a report requested by the German Federal Ministry of Economics and Technology indicated that USDL's potential for modeling services could be adapted to make significant contributions to cloud computing.

### 5. Modeling Example

The objective of this modeling exercise is to describe part of the Last.fm service using Linked USDL. Last.fm is a music recommendation service accessible via a browser or programmatically through a Web API. Only a portion of the service will be described due to space constraints. Most of the information used for the modeling was retrieved from the website http://last.fm and is shown in Figure 3. The description was written using the Turtle language.

**Figure 3. LastFM Website Description and Web API**

The class `usdl:Service` provides the entry point for the description. As shown in Listing 1, the new service is named `service_SLastFM`. The specification includes:

- Associating a service model with the service.
- Specifying the business entities participating during service provisioning.
- Enumerating the interaction points provided by the service.

**Listing 1. The S-LastFM Service Class**

```turtle
:service_SLastFM a usdl:Service ;
  dcterms:description "A semantic recommendation service for music." ;
  usdl:hasServiceModel :onlineMusicServiceModel ;
  usdl:hasEntityInvolvement [
    a usdl:EntityInvolvement ;
    usdl:ofBusinessEntity :be_SLastFM_Ltd ;
    usdl:withBusinessRole usdl-br:provider
  ] ;
  usdl:hasInteractionPoint :ip_Advertise ;
  usdl:hasInteractionPoint :ip_Artist_GetInfo .
```

The class `usdl:ServiceModel` is used to create groupings of services that share characteristics. For example, a service model for the S-LastFM service can group services that provide online music services. The example in Listing 1 associates the service `service_SLastFM` with the grouping `onlineMusicServiceModel`.

**Listing 2. Description of the Business Entity Providing the S-LastFM Service**

```turtle
:be_SLastFM_Ltd a gr:BusinessEntity ;
  foaf:homepage  ;
  foaf:logo  ;
  gr:hasISICv4 "5920"^^xsd:string ;
  gr:hasNAICS "512220"^^xsd:string ;
  gr:legalName "SLast.fm Ltd."^^xsd:string ;
  gr:taxID "830 2738 46"^^xsd:string ;
  vcard:hasAddress [
    a vcard:Work ;
    vcard:country-name "UK"@en
  ] .
```

The extract from Listing 1 also defines two interaction points, `ip_Advertise` and `ip_Artist_GetInfo`, for the service `service_SLastFM`. An interaction point (`usdl:InteractionPoint`) represents an actual step in performing the operations made available by a service. On a personal level, an interaction point can model that consumers and providers meet in person to exchange service parameters or resources. On a technical level, this can translate into calling a web service operation. An interaction point can be initiated by the consumer or the provider.

**Listing 3. Description of the Interaction Point `ip_Advertise`**

```turtle
:ip_Advertise a usdl:InteractionPoint ;
  usdl:hasCommunicationChannel [
    a usdl:CommunicationChannel ;
    usdl:interactionType usdl-it:manual ;
    usdl:interactionSpace usdl-is:remote
  ] ;
  usdl:involvesEntities :be_SLastFM_Ltd ;
  usdl:requiresResources :advertisingCampaign ;
  usdl:generatesResources :rateAndSpecs .
```

This specification describes how customers can book advertising campaigns and inquire about rates and specs. Communication channels are characterized by their interaction type and space. Linked USDL provides two reference taxonomies covering the main modes (e.g., automated, semi-automated, and manual) and the interaction space (e.g., on-site and remote).

The specification describes how customers can request information to advertise a campaign with S-LastFM. This can be done using traditional mail, telephone, or email. All communication channels require a manual (`usdl-it:manual`) and remote (`usdl-it:remote`) interaction.