Attestor. The prototype attestor is a simple service that
provides a login box. When a user of the service provides
a valid ID and password, he is provided an internal page
that serves a cache cookie to the visitor’s browser. This
simple HTML ﬁle is transmitted from the attestor to the
visitor only once after login. Any subsequent requests
for the cache-cookie URL are replied to with an HTTP
304 “not modiﬁed” response. This forces the browser to
use a cached version of the cookie if it exists, and does
not provide one to browsers lacking a cached version of
the cookie.
The cache cookie served by the attestor references an
image hosted on the syndicator. The URL used to request
the image is created by JavaScript when the cookie’s
HTML is rendered, and contains the secret γ (which is
generated when the cache cookie is set) as well as the re-
ferrer page, i.e., whichever page caused the cache cookie
to load. Later, when the cookie is loaded in conjunction
with a click, the URL of the referrer will reveal the ID
of the publisher and the ID of the advertisement that was
clicked.
The attestor needs to create and serve these cache
cookies when the user logs in, so additional processing is
required. However, creating a secret value takes very lit-
tle time, and the cookie can be served in a hidden iframe.
The result is no difference in experience for the user, and
only a trivial amount of work for the attestor’s servers.
Syndicator. Of all the entities, the syndicator does the
most work.
It receives coupons released by the cache
cookies (in the form of requested images), veriﬁes the
secrets in the coupons, and records clicks. Additionally,
each ad click must be directed “through” the syndicator,
so it must also serve a transfer page to direct the client’s
web browser to the advertiser’s site. This is an ordinary
ﬂow of trafﬁc in ad-serving systems that brieﬂy delegates
control to the syndicator who records clicks.
• Database. The syndicator hosts a MySQL database
to house the advertisement data (content, adver-
tiser’s ID, URL), click-through log (each click as
it occurs, including advertisement ID and publisher
ID), as well as a log of received coupons. Since
the released coupon history needs to be saved and
searched, we chose to use a database to ease devel-
opment.
• Processing Clicks. When an advertisement
is
clicked,
the client’s browser navigates to the
syndicator’s site, bringing along the advertisement
ID and the publisher ID. For example:
http://syndicator/click.php?ad=x&pub=y.
The syndicator then records the click, and responds
with a web page that causes cache cookies from
all attestors to load.
(We only implemented one
attestor, so one iframe is rendered with its content
being the attestor’s cache cookie. When there are N
possible attestors, N iframes are used.) Attestors’
cache cookies not available in the browser’s cache
are simply not loaded. Coupons are released by the
client’s browser from any attestor’s cache cookies.
22
16th USENIX Security Symposium
USENIX Association
• Receiving Coupons. Coupons are received by the
syndicator in the form of requests for an image
called “coupon.gif”. When this is requested, it is
accompanied by a querystring. For example:
http://syndicator/coupon.gif?
secret=γ&ref=x.
The ref variable in the query string reﬂects both
the publisher ID IDpub and the advertisement IDad
that was clicked. Receiving this request, the syndi-
cator records the time, secret γ and referrer x in the
database, and then serves a tiny image back to the
client. HTTP headers are provided that force the
client’s browser always to request this image, and
not load it from cache. The purpose of this process
is to ensure the coupons are always freshly deliv-
ered, and not loaded from browser cache.
• Analyzing Clicks. On the syndicator’s click-through
page where the attestors’ cache-cookie iframes are
present, a small delay is forced by JavaScript to
allow the coupons transit time, since they load
asynchronously in iframes.
Immediately follow-
ing that, the server decides if a click should be
classiﬁed as “premium.” This is done by look-
ing through the coupon database for recently re-
leased coupons corresponding to the advertisement
that was clicked. Time between when the click
was recorded and when the coupons arrived is
noted, and only coupons within a pre-set window
(τreplay, sixty seconds in our prototype) are consid-
ered in determining the premium status. If coupons
are present and the secrets are valid, the click is
recorded as “premium.”4 Otherwise it is recorded
as a general-class click.
In a production system, click analysis would be
done after redirecting the client by adding it to a
processing queue.
6 Privacy
In deploying our premium-click scheme with multiple at-
testors, A1, . . . ,Aq, it would be natural for a syndicator
to share a unique key ki with each attestor Ai. Given
such independent attestor keys {ki}, though, a coupon
created by Ai conveys and therefore reveals the fact that
a user has visited the Web site of Ai. Observe, how-
ever, that in our scheme a publisher triggers the release
of a coupon from the browser of a visiting user, but does
not see the coupon. The syndicator receives the coupon,
but does not directly interact with the user. In effect, the
syndicator receives the coupon blindly. While the syndi-
cator does learn the IP address of the user, this is infor-
mation that is typically already available: The only ad-
ditional information that the syndicator learns is whether
or not the user has received an attestation. Thus, coupons
naturally decouple information about the browsing pat-
terns of users from the identities and browsing sessions
of users. This is an important, privacy-preserving fea-
ture.
Such decoupling occurs in the case when ads are out-
sourced, that is, when the syndicator and publisher are
separate. When the syndicator and publisher are iden-
tical, i.e., when a search engine displays its own adver-
tisements, coupons may be linked to users, and there-
fore leak potentially sensitive information. A couple of
privacy-enhancing measures are possible. To limit the
amount of leaked browsing implementation, our scheme
may employ a multiple-coupon technique discussed in
depth in Appendix A. Alternatively, attestors may share
a single key k (or attestors may have overlapping sets of
keys). In this case, a MAC does not reveal the identity
If a coupon γ = m k
of the attestor that created it.
M ACk(m) is created, as we propose, with a random
nonce m, then it conveys no information about a user’s
identity. In principle, however, it would be possible for
an attestor to embed a user’s identity in m, thereby trans-
mitting it to the syndicator. This transmission could even
be covert: A ciphertext on a user’s identity, i.e., an en-
cryption thereof, will have the appearance of a random
string. Proper auditing of the policy and operations of
the attestor or syndicator would presumably be sufﬁcient
in most cases to ensure against collusive privacy infringe-
ments of this kind.
As an alternative, m might be based on distinctive, but
veriﬁably non-identifying values. For example, m might
include the IP address5 and/or timestamp of the client
to which an attestor issues a coupon—perhaps supple-
mented by a small counter value.6 A client could then
verify that m was properly formatted, and did not encode
the user’s identity. Of course, M ACk(m) itself might
then embed the user’s identity. It is possible, however, to
eliminate the possibility of a covert channel in the MAC
by periodically refreshing k and publicly revealing old
values.
Remarks:
• There are good business motivations for attestors
not merely to validate, but also to classify users. For
example, an retailer might not merely indicate in
a coupon that a client has spent enough to justify
validation, but also provide a rough indication of
much the client has spent (“low spender,” “medium
spender,” “proﬂigate”). Advertisers might then be
charged on a differential basis according to the as-
sociated, perceived value of a client. Such classiﬁ-
cation would create a new dimension of privacy in-
fringement. In the outsourcing case, where coupons
USENIX Association
16th USENIX Security Symposium
23
are decoupled from user identities, this approach
might meet with user and regulator acceptance. In
the case where the syndicator publishes advertise-
ments, and coupons are linked to users, privacy is
of greater concern. As advertisers will necessarily
learn the syndicator’s differential pricing scheme,
there will be at least some transparency.
• In principle, public-key digital signatures offer
more ﬂexible privacy protection for coupon ori-
gins than MACs. For example, group signatures,
e.g., [1], permit the identity of a signing attestor
to be hidden in the general case, but revoked by a
trusted entity in the case of system compromise. In
a high trafﬁc advertising system, however, public-
key cryptography would be prohibitively resource-
intensive.
7 Security Analysis
Without possession of an attestor key, an adversary can-
not feasibly forge new coupons, thanks to our use of
MACs. An adversary could still bypass our scheme in
several ways:
• Direct publisher fraud: Using a slight modiﬁca-
tion of the proposed solution, the publisher could
cause release of coupons even when users do not
click on ads.
• Indirect publisher fraud: A dishonest Web site
could re-direct users to the publisher’s site.
• Malware-driven clicks: A virus or widely spread
Trojan could either surreptitiously direct a user’s
browser to a Web site and simulate a click or else
steal a coupon from the browser for use on another
platform.
All of these attacks are possible in existing click-fraud
schemes. The various techniques used to address them
today are equally applicable to premium clicks. For ex-
ample, a syndicator can direct its own client machines to
a publisher’s site to determine if the publisher is generat-
ing fraudulent clicks. Indeed, our premium-click scheme
makes detection of misbehavior easier, as it permits a
syndicator to “mark” a client coupon and therefore di-
rectly monitor the trafﬁc generated by the client and even
detect the emergence of stolen coupons.
An adversary can also try to exploit the special char-
acteristics of our scheme as follows:
• Posing as an attestor: An adversary might either
establish itself as an attestor or compromise the key
of an existing attestor. If the syndicator sets appro-
priate policies for creating attestors, then it should
be difﬁcult for an adversary to pose as one. At-
testors are likely, in any case, to be a more exclusive
class of Web site than publishers or even advertisers.
Moreover, in the case where MAC keys are attestor-
speciﬁc, the syndicator can individually monitor the
trafﬁc generated by each attestor, making fraud de-
tection easier.
• Compromise of an attestor key: An adversary can
attempt to learn the MAC key of an existing attestor.
The difﬁculty of this form of attack depends on the
security of the attestor’s Web site. MAC keys for
premium clicks may be protected using many of the
same measures employed to secure SSL keys and
other cryptographic secrets.
• Coupon harvesting: An adversary could harvest
coupons from attestors by creating accounts or
clients that meet their validation criteria. By estab-
lishing appropriate policies for validation by its at-
testors, the syndicator can attempt to attach a ﬁnan-
cial cost to this form of fraud in excess of the gains
that a fraudster might reap from it.
Auditing
Since the syndicator is ultimately in control over decid-
ing which clicks should be considered “premium” (and
earns more when clicks are premium), publishers and
advertisers may accuse the syndicator of improperly in-
ﬂating the percentage of clicks considered premium. To
solve this problem, an additional entity called an auditor
can be contracted to watch the coupons that are released,
and verify the premium-status judgement of the syndica-
tor. The auditor would not be rewarded based on click
trafﬁc, so it would have no incentive to inﬂate or deﬂate
the number of premium clicks from those that are legiti-
mate.
The cache cookies set by attestors can be crafted
so that, when an advertisement’s URL is clicked, the
coupon C = (γ, IDpub, IDad) is released both to the
syndicator and to the auditor who maintains an indepen-
dent database. When the syndicator’s numbers are con-
tested, the coupons recorded by the auditor can be used
to recompute the number of premium clicks for a given
advertisement or publisher, and compared to the syndi-
cator’s calculation.
8 Conclusion
In contrast to today’s heuristic ﬁltering methods for elim-
inating “bad” clicks, our premium-click scheme relies on
a foundation of cryptographic authentication to validate
“good” clicks. Premium clicks are by no means a cure-
all for fraud, and are themselves subject to attack. The
24
16th USENIX Security Symposium
USENIX Association
value of premium clicks lies in the way that they provide
new, cryptographically authenticated visibility into click
trafﬁc, and thus a new, stronger platform for combating
click fraud.
While premium clicks could in principle supplant cur-
rent ﬁltering schemes entirely, they are attractive in that
they can be deployed in a complementary fashion along-
side existing systems. We have proposed a new advertis-
ing model in which advertisers pay a higher charge for
premium clicks. We believe that such a scheme might
be launched experimentally by a syndicator with mini-
mal impact on existing business and then expanded as
its success warrants. Thus premium clicks promise offer
not only a new approach to click fraud, but one with a
practical path to fruition.
References
[1] ATENIESE, G., CAMENISCH, J., JOYE, M., AND TSUDIK, G. A
practical and provably secure coalition-resistant group signature
scheme. In Advances in Cryptology-Crypto ’00 (2000), M. Bel-
lare, Ed., Springer. LNCS vol. 1880.
[2] BELLARE, M., CANETTI, R., AND KRAWCZYK, H. Keying
hash functions for message authentication. In CRYPTO ’96: Pro-
ceedings of the 16th Annual International Cryptology Confer-
ence on Advances in Cryptology (London, UK, 1996), Springer-
Verlag, pp. 1–15.
[3] EBAY. www.ebay.com, Accessed 31 January 2007.
[4] GANDHI, M., JAKOBSSON, M., AND RATKIEWICZ, J. Bad-
vertisements: Stealthy click-fraud with unwitting accessories. In
Anti-Phishing and Online Fraud, Part I Journal of Digital Foren-
sic Practice, Volume 1, Special Issue 2 (November 2006).
[5] JUELS, A., JAKOBSSON, M., AND JAGATIC, T. Cache cookies
for browser authentication (extended abstract). In IEEE Sympo-
sium on Privacy and Security (2006), pp. 301–305.
[6] RSNAKE.
Stealing mouse
http://ha.ckers.org/blog/20070116/stealing-mouse-clicks-for-
banner-fraud/, January 2007.
clicks
for banner
fraud.
[7] STAMM, S., RAMZAN, Z., AND JAKOBSSON, M.
drive-by
Technical
http://www.cs.indiana.edu/pub/techreports/TR641.pdf.
pharming,
2006.
Report,
[8] TSOW, A. Phishing with consumer electronics – malicious home
routers. In In Models of Trust for the Web, a workshop at the 15th
International World Wide Web Conference (WWW2006) (2006).
[9] TSOW, A., JAKOBSSON, M., YANG, L., AND WETZEL, S.
Warkitting: the drive-by subversion of wireless home routers. In
Anti-Phishing and Online Fraud, Part II Journal of Digital Foren-
sic Practice, Volume 1, Special Issue 3 (November 2006).
[10] TUZHILIN, A.
The Lanes gifts v. Google report, 2006.
Independent evaluators assessment of quality of Googles
click-fraud ﬁltering methods. Accessed 31 January 2007 at
http://googleblog.blogspot.com/pdf/Tuzhilin Report.pdf.
Notes
1This research was performed by the author at RavenWhite Inc.
2The reason for having the syndicator trigger coupon-release is
twofold: (1) To prevent JavaScript-based click automation, ads today
are often rendered inside an iframe whose source is loaded from the
syndicator’s site and (2) To eliminate the need for JavaScript on the
publisher’s site.
3An authenticator could create a list X of random codes and transfer
it to the syndicator via a backchannel, but this would not be efﬁcient
(and would also eliminate some of the privacy properties we would
like to achieve).
4In a multi-attestor environment, where clients may carry and re-
lease multiple coupons, the syndicator needs some mechanism to de-
termine which coupons correspond to a given client. A simple option is
to attach a fresh, random number (nonce) to the links in each rendered
advertisement. The nonce will attach itself to all of the coupons that a
client releases in a given click.
5Inclusion of an IP address in a coupon also has some security bene-
ﬁts. In the case where the syndicator publishes its own ads, it can check
that a client’s presented IP address is consistent with the IP address in
the coupon, e.g., it originates with the same service provider.
6A counter might still embed a covert channel, but, if the size of
the channel might be made small enough to alleviate the problem of
privacy infringement signiﬁcantly.
A Multiple Attestors
User privacy in our premium-click scheme depends upon
how the value γ is formed, and on the number and con-
tent of the coupons cached in a user’s browser. Let us
now therefore consider a system with multiple attestors,
A1, . . . ,Aq. Each attestor authi shares a key ki with
the syndicator. We now describe the technical challenges
that arise with multiple attestors.
Multiple coupons. The ﬁrst problem we encounter in
a system with multiple attestors is the difﬁculty of man-
aging multiple cache cookies across different domains.
A cache-cookie system can involve caching of a set of
j different webpages X1, X2, . . . , Xj in a given user’s
browser, each webpage serving as a slot for a distinct
cache cookie. Two difﬁculties arise, however. The ﬁrst
is that a site seeking to release a set of cache cookies (i.e.,
the publisher) cannot determine what slots in a user’s
browser actually contain cache cookies. The only way
for the publisher to release all cache cookies is to call
all j webpages. The second is that a site seeking to set a
cache cookie, i.e., an attestor, cannot determine if a given
slot has been ﬁlled. If the attestor plants a cache cookie
in a slot that already contains one, the previously planted
cache cookie will be effaced.
The simplest way to circumvent these difﬁculties in
our premium-clicks scheme is to manage only a single
slot, that is, to maintain only a single cache cookie in a
given user’s browser. Only the cache cookie planted most
recently by an attestor will then persist. Provided that the
syndicator regards all attestors as having equal authority
USENIX Association
16th USENIX Security Symposium
25
in validating users, this approach does not result in any
service degradation.
If, however, the syndicator desires the ability to har-
vest multiple coupons, then attestors must use multiple
slots. One possible approach is to maintain an individ-
ual slot for each attestor, i.e., to let j = q. If the num-
ber of attestors is small, this may be workable. Alter-
natively, attestors may plant coupons in random slots,
sometimes supplanting previous coupons, or subsets of
attestors may share slots. The syndicator might, for ex-
ample, assign different weight to attestors, according to
the anticipated reliability of their attestations; attestors
with the same rating might share a slot.
Keying. One approach to management of attestor keys
is to assign an identical key k to all attestors, i.e., let
k1 = k2 . . . = k. While this approach has the merit of
simplicity, it has the disadvantage of rendering tracing
and key-revocation difﬁcult.
It is preferable, therefore to create attestor keys {ki} in
an independent manner. In this case, a coupon γ = m k
M ACki(m) is cryptographically bound to the attestor
that created it. That is, only attestor Ai, with its knowl-
edge of ki, can feasibly create γ of this form. To en-
able the syndicator to determine the correct key for ver-
iﬁcation of the MAC, the coupon must be supplemented
with i, the identity of the authenticator. For example, we
might let m = i k r, where r is a random nonce.
26
16th USENIX Security Symposium
USENIX Association