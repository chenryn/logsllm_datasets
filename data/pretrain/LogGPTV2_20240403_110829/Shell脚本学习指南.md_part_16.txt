### 4.1.3 文本块排序

有时，你需要对由多行记录组成的数据进行排序。例如，地址列表通常会将每个地址记录分成多行，并用一个或多个空行分隔。由于这种数据没有固定的排序键值位置可供`-k`选项使用，因此需要添加一些额外的标记来帮助排序。以下是一个简单的示例：

#### 显示地址数据文件
```bash
$ cat my-friends
```

内容如下：
```
SORTKEY: Schlo&, Hans Jurgen
www.TopSage.com
---
## Page 99
文本处理工具
87
Hans Jirgen Schlo5
Unter den Linden 78
Germany
D-10117 Berlin
SORTKEY: Jones, Adrian
371 Montgomery Park Road
Adr1an Jones
Hen1ey-on=Thames RG9 4AJ
 SORTKEY: Brown, Kim
1841 S Main Street
Kim Brown
Westchester, NY 10502
USA
```

这里的排序技巧是利用`awk`处理一般性记录分隔符的能力，识别段落间隔，并在每个地址内暂时使用一个未使用的字符（如不可打印的控制字符`Ctrl-Z`）替换换行符，以及用换行符替换段落间隔。这样，`sort`看到的行就会变成：

```bash
# SORTKEY: SchloB, Hans JUxgen^ZMans Jurgen Schlo&~zOnter den Linden 78^Z...
# SORTKEY: Jones, Adrian^ZAdrian Jones^2371 Montgomery Park Road^2...
# SORTKEY: Browm, Kim*ZKim Brown^Z1841 S Main Street~Z.. *
```

其中，`^Z`表示`Ctrl-Z`字符。第一个过滤步骤是通过`sort`排序后恢复换行和段落分隔符，并且可以轻松删除排序键值行。整个管道命令如下：

```bash
cat my-friends | awk -v RS='---' '{ gsub("\n", "^Z"); print }' | sort -f | awk -v ORS='\n\n' '{ gsub("^Z", "\n") }'
```

最终输出结果：
```
Hans Jorgen
Sch1o8
Unter den Linden
78
D-10117
Germany
Berlin
```

通过这种方式，你可以先按国家和邮政编码对邮件进行排序，以提高邮局处理效率。

### 4.1.4 `sort` 的效率

排序操作通常涉及比较所有成对的项目，常见的算法有冒泡排序和插入排序。这些简单算法在处理少量数据时效果良好，但在处理大量数据时速度较慢，因为它们的时间复杂度接近于 \(O(n^2)\)。相比之下，`sort` 命令使用更高效的排序算法，如 Shellsort、Heapsort、Mergesort 和 Quicksort，时间复杂度为 \(O(n \log n)\) 或更好。你可以放心地使用 `sort`，它已经经过优化，比你自己实现的排序算法要高效得多。

### 4.1.5 `sort` 的稳定性

在排序算法中，稳定性是指相同的记录在输入和输出中的顺序是否保持一致。当使用多键值排序或通过管道处理时，稳定性非常重要。POSIX 标准并不要求 `sort` 具备稳定性，但 GNU 实现的 `coreutils` 包提供了 `--stable` 选项来解决这个问题。例如：

```bash
$ sort -t_ -k1,1 -k2,2 one_tvo_three
one_two
one_tvo_four
one_tvo_five
BOF
one_two
one_two_five
one_two_four
one_two_three
```

每条记录内的排序字段都相同，但输出顺序与输入不一致。使用 `--stable` 选项可以确保输出顺序与输入一致。

### 4.1.6 `sort` 小结

`sort` 是 UNIX 中非常重要的命令之一，值得深入学习。本章详细介绍了 `sort` 的用法，更多用法可以参考系统手册页 `sort(1)`。`sort` 已经被 POSIX 标准化，几乎在所有系统上都能使用。

### 4.2 删除重复

有时需要删除数据流中连续重复的记录。我们之前介绍过 `sort -u` 的用法，但它基于匹配的键值而不是记录本身。`uniq` 命令提供了另一种方式，常用于删除已排序数据中的重复记录。`uniq` 有三个常用选项：

- `-c`：在每个输出行前加上该行重复的次数。
- `-d`：仅显示重复的行。
- `-u`：仅显示未重复的行。

示例如下：

```bash
$ cat latin-numbers
tres
unus
duo
tres
duo
tres

$ sort latin-numbers | uniq
duo
tres
unus

$ sort latin-numbers | uniq -c
3 tres
2 duo
1 unus

$ sort latin-numbers | uniq -d
tres
duo

$ sort latin-numbers | uniq -u
unus
```

`uniq` 也可以与 `diff` 工具结合使用，方便找出两个相似数据流的异同。`uniq` 已被 POSIX 标准化，广泛可用。

### 4.3 重新格式化段落

许多文本编辑器提供重新格式化段落的功能，以便切分段落使其不超过屏幕范围。在 Shell 脚本中处理数据流时，可以使用 `fmt` 命令。尽管 POSIX 没有提及 `fmt`，但它在许多现代 UNIX 系统中都有提供。如果系统中没有 `fmt`，可以安装 GNU 的 `coreutils` 包。

`fmt` 的常用选项包括：

- `-s`：仅切割长行，不会将短行合并成长行。
- `-w n`：设置输出行宽度为 n 个字符（默认约为 75 个字符）。

示例如下：

```bash
$ sed -e '9991,10010p' /usr/dict/words | fmt
Graff graft graham grail grain grainy grammar granmarian grammatic
granary grand grandchild grandchildren granddaughter grandeur grandfather
grandiloquent grandiose grandma grandnother

$ sed -e '9995,10004p' /usr/dict/words | fmt -w 30
grammarian grammatic
grain grainy gramnar
granary grand grandchi1d
grandchi1dren granddaughter
```

注意：不同版本的 `fmt` 在行为上可能有所不同，因此在编写可移植脚本时需谨慎。

### 4.4 计算行数、字数及字符数

`wc` 命令用于计算行数、字数和字符数，是最古老且最简单的 UNIX 工具之一，已被 POSIX 标准化。默认输出包括行数、字数和字节数。

示例如下：

```bash
$ echo "This is a test of tbe energency broadcaet eystem" | wc
4 9 49
```

`wc` 还有许多其他选项，可以在系统手册页 `wc(1)` 中找到详细说明。