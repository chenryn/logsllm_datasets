    In [153]: ccc1
    Out[153]: '\xd4\xfd\xeb\x89\x85\x9c\xba\xf3\xf0\x85s#S\x96|S\xec\xca\x14*nc!\xa9f\xb4\t'
    In [154]: ccc2
    Out[154]: '\xc4\xfa\xa2\x94\xca\x81\xe9\xa0\xfb\x88`5\x00\x8br_\xa9\xddQ$}r0'
    In [155]: ccc3
    Out[155]: '\xfb\xd3\xce\xbd\x9f\x96\xa1\xe0\xf0\x82M5M\xbfsV\xf4'
every cipher in the same positon is > 127 or  output is: KCV: 3f5dc3
    First get the master key and identify it:
    PART1= "5CD00A357AB2F472CDDEF15A98C91823"
    PART2= "6605B51DE869FE6CD69165D13F4A8207"
    PART3= "1304FCA28268E7F08A88314F80B6295C"
    masterkey = PART1^PART2^PART3
    masterkey = 29d1438a10b3edee91c7a5c42735b378
    the output of KCV.py is 3f5dc3 satifies the PDF file 3f 5d c3.
    Second get the 3DES key by decrypting the ciphertext.
    http://tripledes.online-domain-tools.com/
    the 3deskey = 
    identify the key. output of KCV.py is  3a2179 matches the true 3DES key KCV.
    Finally let us catch the flag!!!
    In [95]: b64decode("uOeYzKAhV5/4rOc4kIAqfuqTSNDmrq+/AdxBIjUMMf6LVe3yxl0OoA==")
    Out[95]: '\xb8\xe7\x98\xcc\xa0!W\x9f\xf8\xac\xe78\x90\x80*~\xea\x93H\xd0\xe6\xae\xaf\xbf\x01\xdcA"5\x0c1\xfe\x8bU\xed\xf2\xc6]\x0e\xa0'
    ciphertext = b8e798cca021579ff8ace73890802a7eea9348d0e6aeafbf01dc4122350c31fe8b55edf2c65d0ea0
> DONE!
## CODING
#### Coding 200
  * TODO: 土味英语，需要润色
This challenge is a simple algorithm question about dynamic programming.  
The task we need to do is to choose some challenges to solve which can achieve
the best score in 24 hours (1440 minutes). We can see the challenges as the
items in a knapsack. The score of the challenge is the value of the item and
the ETA is the weight. Only 1440 weights items can put into the knapsack. This
is one of the most classic dynamic programming problem —— 0-1 Knapsack
Problem. But we don't need the best score, we need the item we choose.  
I wrote a python script to finish the process of dynamic programming. And it
will print the IDs of the challenges to choose, sorted by ETA descending which
is the password of `CTF_PRIZE.7z`.
    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-    
    def bag(data):
        dp = list([0 for i in range(24 * 60 + 1)])
        path = list([[0 for j in range(24 * 60 + 1)] for i in range(len(data))])
        for i in range(len(data) - 1, -1, -1):
            for j in range(24 * 60, data[i][-1] - 1, -1):
                if dp[j]  0:
            if path[i][j]:
                ans += data[i][0]
                j -= data[i][-1]
            i += 1
        print('socre:%d' % dp[-1])
        return ans
    if __name__ == '__main__':
        f = open('Challenges.csv', 'r')
        data = list(map(lambda x: x.strip().split(), f.readlines()))
        data.pop(0)
        eta = {}
        for x in data:
            x[-2] = int(x[-2])
            x[-1] = int(x[-1])
            eta[x[0]] = x[-1]
            if x[1] == 'binary':
                x[-1] *= 2
            elif x[1] == 'web':
                x[-1] //= 2
        ans = bag(data)
        print(ans)
        ans = ''.join(sorted(list(ans), key=lambda x: eta[x], reverse=True))
        print(ans)
#### Coding 400
  * TODO: 土味英语，需要润色
This challenge is more like a Misc challenge, it requires we have some
programming skills, especially writting web spider.  
The author provide two door-key pair, by clicking the url we can find that
there are more doors and keys in the starting door. Like a maze right? We need
to explore the whole maze.  
I wrote a multi-thread python script to open all doors.  
Once the script found `FLG` in the response content of the server, it will log
the content to `flag.txt` and exit.
    import requests
    import queue
    import threading
    from bs4 import BeautifulSoup
    WORKER_NUMBER = 16
    jobs = queue.Queue()
    flag = ""
    cache = dict()
    def parse(content):
        if "FLG" in str(content):
            FLAG = content
            with open("flag.txt", "a+") as f:
                f.write(str(content))
            exit(0)
        result = []
        soup = BeautifulSoup(content, "html.parser")
        tbody = soup.tbody
        for tr in tbody.find_all("tr"):
            tds = tr.find_all("td")
            door = str(tds[0]).replace("", "").replace("", "")
            key = str(tds[1]).replace("", "").replace("", "")
            data = (door, key)
            result.append(data)
        return result
    def check(door, key):
        params = {
            "door":door,
            "key":key,
        }
        url = "http://challengebox2.reply.it:1337/webcrawler/open"
        response = requests.get(url, params=params, cookies={
            "JSESSIONID":"D059E78F58A81297FECDFD853BDA5851",
        })
        for i in parse(response.content):
            if i in cache.items():
                print("Item dumplicated! %s" % str(i))
            else:
                cache[i[0]] = i[1]
                jobs.put(i)
    data = [
        ("4f704b99-48c3-401a-8dbc-4cfea131ca1b", "aa0edbdc-2053-49de-823f-9bfc54536fec"),
        ("e359505d-045e-4bf5-b9bb-31105dac2a08", "be8437bd-3313-4b0c-b621-6902c487912f"),
    ]
    for i in data:
        jobs.put(i)
    def worker(wid):
        while True:
            job = jobs.get()
            print("[%d] %s" % (wid, job))
            check(job[0], job[1])
    def start_workers():
        for i in range(WORKER_NUMBER):
            t = threading.Thread(target=worker, args=(i,))
            t.daemon = True
            t.start()
    start_workers()
    while True:
        command = input("> ")
        if command == "list":
            print(cache)
        elif command == "flag":
            print(flag)
        elif command == "exit":
            break
Done.
## MISC
#### MISC 100
The tasks provides a pcap file named `traffic.pcap`, after analysis the pcap,
i found the following message.
    GET / HTTP/1.1
    Host: 192.168.101.222:1337
    Connection: keep-alive
    Cache-Control: max-age=0
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (Linux; Android 6.0.1; ONE E1003 Build/MMB29M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Mobile Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
    Accept-Encoding: gzip, deflate
    Accept-Language: it-IT,it;q=0.9,en-US;q=0.8,en;q=0.7
    HTTP/1.0 200 OK
    Server: SimpleHTTP/0.6 Python/2.7.3
    Date: Mon, 17 Sep 2018 12:53:54 GMT
    Content-type: text/html; charset=UTF-8
    Content-Length: 322
    Directory listing for /
    Directory listing for /
    developers.jpeg
    listencarefully.mp3
    yeah.png
Then using Wireshark to export the HTTP object, we can get a mp3 file named
`listencarefully.mp3`. I think it is a mp3 stego. Open the mps with `Audacity`
and in spectrogram channel we found the flag: