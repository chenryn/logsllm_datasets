E. BIAS Implementation for Secure Connections
In this section we present the implementation of the Secure
Connections downgrade attack that we describe in Section IV-B.
Such attack requires the following capabilities. The attack
device has to impersonate a device that supports Secure Con-
nections but downgrade to Legacy Secure Connections during
secure connection establishment. The attack device has to
switch role before accepting a connection from a master device,
and perform the standard compliant unilateral authentication.
We now describe how we implement those capabilities on our
attack device consisting of the CYW920819EVB-02 board
connected to a Linux laptop (as in Figure 9).
In this section we use as a reference example the imperson-
ation of a Pixel 2 smartphone. The Pixel 2 runs Android 10,
and includes the Snapdragon 835 Bluetooth 5.0 SoC. Using
our BIAS toolkit, we select the Pixel 2 Impersonation File
(IF) from our database and we conﬁgure our attack device to
impersonate all the capabilities listed in the right column of
of Table II. As a result, a user discovering Bluetooth devices
cannot tell our attack device apart from our Pixel 2 as they
advertise the same capabilities with the same identiﬁers.
Then we use our toolkit to conﬁgure the Secure Connections
downgrade, adversarial role switch and unilateral authentication
for the board via the related AF. The Secure Connections
downgrade is implemented using a patch that modiﬁes the
Secure Connections support ﬂags in the board Bluetooth
ﬁrmware. Adversarial role switch and unilateral authentication
are implemented using the same patches that we describe in Sec-
tion VI-D. As a result, our attack board, while impersonating
the Pixel 2, downgrades the authentication procedure used for
secure connection establishment and bypasses authentication.
KA = h4(KL, ”btdk”, BTADDM , BTADDS)
RM(cid:2)RS = h5(KA, CM , CS)
(2)
(3)
To validate the responses produced by the secure authentication
procedure while the victims are pairing we implement the HS
hash function presented in Section IV-B. The hash function
internally uses h4 as in Equation 2 to compute a device
authentication key (KA) from KL, the ”btdk” string, BTADDM
and BTADDS. Then, KA, CM and CS are used by h5 to
compute the concatenation of RM and RS as in Equation 3. We
implement h4 and h5 following their speciﬁcation [6, p. 1699],
and we test our implementation using the test vectors provided
in the standard [6, p. 1615].
VII. EVALUATION
In this section we describe our BIAS attacks evaluation
setup and results. We successfully conducted master and
slave impersonation attacks on 16 Legacy Secure Connections
devices and on 15 Secure Connections devices, using a total
of 28 unique Bluetooth chips.
A. Evaluation Setup
We consider an attack scenario with victim A, victim B,
and the attacker. Victim A and the attack device are two
CYW920819EVB-02 development boards connected to two
laptops running Linux, supporting Secure Connections. Victim
B is any other Bluetooth device at our disposal, and it might
support Secure Connections. Victim A is paired with victim B,
and the attacker does not know their long term key (KL). The
attacker impersonates victim A, and tries to establish secure
connections with victim B as a master and as a slave by using
our BIAS toolkit. We perform four BIAS attacks:
1) LSC MI: Legacy Secure Connections (LSC) Master
Impersonation
2) LSC SI: Legacy Secure Connections Slave Impersonation
3) SC MI: Secure Connections (SC) Master Impersonation
4) SC SI: Secure Connections Slave Impersonation
In the following two paragraphs we describe how we test that
victim B is vulnerable to our four attacks.
a) Master Impersonation: The attack device impersonates
victim A that is not required to be present. We start a secure
connection establishment from the attack device to victim B.
If victim B does not ask the attack device to authenticate (as
in Figure 2), then victim B is vulnerable to LSC MI. If victim
B supports Secure Connections, then it is also vulnerable to
SC MI, because the authentication procedure is downgraded
from secure to legacy (as in Figure 4).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:45 UTC from IEEE Xplore.  Restrictions apply. 
558
b) Slave Impersonation: The attack device impersonates
victim A that
is not required to be present. We start a
secure connection establishment from victim B to victim A.
If the attack board switches role from slave to master before
accepting the connection request, performs unilateral legacy
authentication, and starts the session key negotiation without
being asked by victim B to authenticate (as in Figure 3), then
victim B is vulnerable to LSC SI. If victim B supports Secure
Connections, then it is also vulnerable to SC SI, because the
authentication procedure is downgraded from secure to legacy
(as in Figure 4).
Our evaluation setup allows to test the BIAS attacks against
a target victim in a matter of minutes, and is low cost as it uses
cheap hardware and open source software. Our attack device
consists of a CYW920819EVB-02 board connected to a Linux
laptop. The board costs around 50 USD and any Linux laptop,
or even a Raspberry PI, can be used to control the board. Other
researchers interested in the BIAS attacks can easily reproduce
our setup to test more devices.
B. Evaluation Results
Table III shows our evaluation results. The ﬁrst column
contains the Bluetooth chip name, and the second column
contains the names of the device(s) that we evaluate using
such chip. The third and fourth columns evaluate the LSC
MI and LSC SI BIAS attacks. The ﬁfth and sixth columns
evaluate the SC MI and SC SI BIAS attacks. A solid circle (○)
indicates that a chip and the related devices are vulnerable to an
attack, and an empty circle (○␣) indicates that a chip and related
devices are not vulnerable. Secure Connections is optional in
the Bluetooth standard, and we use - in the SC columns when
a chip/device does not support Secure Connections.
Table III conﬁrms that all the 31 Bluetooth devices (28
unique Bluetooth chips) that we evaluate are vulnerable to
our BIAS attacks. Our list of vulnerable device includes
Bluetooth chips, from Intel, Qualcomm (Snapdragon), Cypress
(including Broadcom wireless IoT business [11]), Apple,
Samsung (Exynos), and CSR (Cambridge Silicon Radio).
Furthermore, the list of vulnerable devices includes a mix
of proprietary and open source Bluetooth host stacks from
Android (Bluedroid and Fluoride), Apple (iOS, iPadOS, and
macOS), Linux (BlueZ), Microsoft (Windows 10 and Windows
Phone), Cypress, and CSR. Overall, we attack 16 Legacy
Secure Connections devices and 15 Secure Connections devices,
supporting Bluetooth versions 5.0, 4.2, 4.1, and lower or equal
to 4.0.
The only exception is the ThinkPad 41U5005 mouse. The
mouse is not vulnerable to our LSC SI attack. In particular,
when we let the mouse establish a secure connection with
our attack device, even if the attack device switches role
and completes the unilateral legacy authentication, the mouse
always asks the attack board to authenticate before starting the
session key negotiation.
The table conﬁrms that our BIAS attacks are standard
compliant, as the attacks are effective regardless the Bluetooth
chip, the Bluetooth host stack, the usage of Secure Connections,
Device(s)
iPhone 7plus
iPad 2018
Sennheiser PXC 550
Galaxy J3 2017
ThinkPad X1 3rd
HP ProBook 430 G3
iPhone 8
CYW920819EVB-02
ThinkPad L390
Nokia 7
Nokia X6
Pixel 2
Pixel 3, OnePlus 6
Chip
Bluetooth v5.0
Apple 339S00397
CYW20819
Intel 9560
Snapdragon 630
Snapdragon 636
Snapdragon 835
Snapdragon 845
Bluetooth v4.2
Apple 339S00056 MacBookPro 2017
Apple 339S00199
Apple 339S00448
CSR 11393
Exynos 7570
Intel 7265
Intel 8260
Bluetooth v4.1
CYW4334
CYW4339
CYW43438
Snapdragon 210
Snapdragon 410
Bluetooth v≤ 4.0
BCM20730
BCM4329B1
CSR 6530
CSR 8648
Exynos 3470
Exynos 3475
Intel 1280
Intel 6205
Snapdragon 200
ThinkPad 41U5008
iPad MC349LL
PLT BB903+
Philips SHB7250
Galaxy S5 mini
Galaxy J3 2016
Lenovo U430
ThinkPad X230
Lumia 530
LSC
SC
MI
SI MI
SI
○ ○ ○ ○
○ ○ ○ ○
○ ○ ○ ○
○ ○ ○ ○
○ ○ ○ ○
○ ○ ○ ○
○ ○ ○ ○
○ ○ ○ ○
○ ○ ○ ○
○ ○ ○ ○
-
○ ○
-
○ ○
-
○ ○
-
○ ○
-
-
-
-
○ ○␣
○ ○
○ ○
○ ○
○ ○
○ ○
○ ○
○ ○
○ ○
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
iPhone 5s
○ ○
-
Nexus 5, iPhone 6
○ ○
RPi 3B+
○ ○ ○ ○
LG K4
○ ○ ○ ○
Motorola G3, Galaxy J5 ○ ○ ○ ○
-
-
TABLE III: BIAS evaluation results. For each of the 28 Blue-
tooth chips tested, the table shows if the chip is vulnerable (○)
or not (○␣) to the Legacy Secure Connections (LSC) Master
Impersonation (MI) and Slave Impersonation (SI) attacks.
Additionally, the last two columns show our results for the
Secure Connections (SC) MI and SI attacks. (-) indicates that
a device does not support Secure Connections.
and the Bluetooth version number. Furthermore, all devices in
the market using any of the vulnerable chips in Table III should
be vulnerable to our BIAS attacks. Based on our results, we
recommend the Bluetooth SIG to ﬁx the standard as soon as
possible, and we provide a list of BIAS attacks countermeasures
in Section VIII-C.
VIII. DISCUSSION
In this section we discuss how to combine our BIAS attack
with the KNOB attack [4]. We also comment on the BIAS
attack root causes and countermeasures.
A. Combination of BIAS and KNOB Attacks
Our BIAS attacks, and the KNOB attack proposed in [4] are
both standard compliant, but they are different as they reach
different goals by exploiting different phases of Bluetooth
secure connection establishment. Our BIAS attacks target link
key authentication, and they allow the attacker to authenticate
as master and slave without having to posses the link key. The
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:45 UTC from IEEE Xplore.  Restrictions apply. 
559
KNOB attack targets session key negotiation, and allows the
attacker to lower the entropy of the session key (to brute force
it). The KNOB attack alone cannot impersonate a Bluetooth
device as the attacker does not posses the long term key.
The BIAS and KNOB attacks can be chained to impersonate
a Bluetooth device, complete authentication without possessing
the link key, negotiate a session key with low entropy, establish
a secure connection, and brute force the session key. The
combination of the two attacks is novel and powerful. For
example, the attacker can impersonate the recipient of a
sensitive ﬁle and recover the plaintext, or impersonate an
unlocker and unlock a device by sending encrypted commands.
B. BIAS Attacks Root Causes
The BIAS attacks evaluated in Section VII are enabled by
four root causes (RC) that we identity in the Bluetooth standard.
The combination of those root causes allows an attacker to
perform master and slave impersonation attacks on LSC and
SC. In the following we summarize the root causes:
1) Integrity. Bluetooth secure connection establishment is not
integrity protected, despite the devices already sharing a
long term key (KL). The lack of integrity protection allows
an attacker to modify the capabilities of the impersonated
victim, including Secure Connections support.
2) Legacy Mutual Authentication. Bluetooth Legacy Secure
Connections does not mandate to use mutually the
legacy authentication procedure [6, p. 559]. When the
procedure is used unilaterally there is only one veriﬁer,
and the attacker can impersonate the veriﬁer and complete
the secure connection establishment without having to
authenticate to the victim.
3) Role Switching. Bluetooth role switch can be performed
anytime after baseband paging [6, p. 595]. In an unilateral
authentication scheme this is problematic, as the attacker
might start the secure connection establishment procedure
as the prover and become the veriﬁer to avoid being asked
to authenticate.
4) Secure Connections Downgrade. Bluetooth does not en-
force the usage of Secure Connections between pairing and
secure connection establishment. Hence, two devices who
paired using Secure Connections can use Legacy Secure
Connections to establish subsequent secure connections.
The attacker exploits this fact to downgrade a Secure
Connections secure connection establishment to Legacy
Secure Connections in order to use the vulnerable legacy
authentication procedure.