### E. Implementation of BIAS for Secure Connections

In this section, we detail the implementation of the Secure Connections downgrade attack described in Section IV-B. This attack requires the following capabilities:
- The attack device must impersonate a device that supports Secure Connections but downgrades to Legacy Secure Connections during the secure connection establishment.
- The attack device must switch roles before accepting a connection from a master device and perform standard-compliant unilateral authentication.

We will now describe how we implemented these capabilities on our attack device, which consists of a CYW920819EVB-02 board connected to a Linux laptop (as shown in Figure 9).

#### 1. Impersonation of a Pixel 2 Smartphone
As a reference example, we used the impersonation of a Pixel 2 smartphone. The Pixel 2 runs Android 10 and includes the Snapdragon 835 Bluetooth 5.0 SoC. Using our BIAS toolkit, we selected the Pixel 2 Impersonation File (IF) from our database and configured our attack device to impersonate all the capabilities listed in the right column of Table II. As a result, a user discovering Bluetooth devices cannot distinguish our attack device from the actual Pixel 2, as they advertise the same capabilities with the same identifiers.

#### 2. Configuration of Secure Connections Downgrade, Role Switch, and Unilateral Authentication
We then used our toolkit to configure the Secure Connections downgrade, adversarial role switch, and unilateral authentication for the board via the related Attack File (AF). The Secure Connections downgrade was implemented using a patch that modifies the Secure Connections support flags in the board's Bluetooth firmware. Adversarial role switch and unilateral authentication were implemented using the same patches described in Section VI-D. Consequently, our attack board, while impersonating the Pixel 2, downgrades the authentication procedure used for secure connection establishment and bypasses authentication.

The key generation and response validation are performed using the following equations:
\[
KA = h4(KL, \text{”btdk”}, BTADDM, BTADDS)
\]
\[
RM \parallel RS = h5(KA, CM, CS)
\]

To validate the responses produced by the secure authentication procedure while the victims are pairing, we implemented the HS hash function presented in Section IV-B. The hash function internally uses \( h4 \) to compute a device authentication key (KA) from \( KL \), the "btdk" string, \( BTADDM \), and \( BTADDS \). Then, \( KA \), \( CM \), and \( CS \) are used by \( h5 \) to compute the concatenation of \( RM \) and \( RS \). We implemented \( h4 \) and \( h5 \) following their specifications [6, p. 1699], and tested our implementation using the test vectors provided in the standard [6, p. 1615].

### VII. Evaluation

In this section, we describe our BIAS attacks evaluation setup and results. We successfully conducted master and slave impersonation attacks on 16 Legacy Secure Connections devices and 15 Secure Connections devices, using a total of 28 unique Bluetooth chips.

#### A. Evaluation Setup
We considered an attack scenario involving victim A, victim B, and the attacker. Victim A and the attack device are two CYW920819EVB-02 development boards connected to two laptops running Linux, supporting Secure Connections. Victim B is any other Bluetooth device at our disposal, and it may support Secure Connections. Victim A is paired with victim B, and the attacker does not know their long-term key (KL). The attacker impersonates victim A and attempts to establish secure connections with victim B as both a master and a slave using our BIAS toolkit. We performed four BIAS attacks:
1. LSC MI: Legacy Secure Connections (LSC) Master Impersonation
2. LSC SI: Legacy Secure Connections Slave Impersonation
3. SC MI: Secure Connections (SC) Master Impersonation
4. SC SI: Secure Connections Slave Impersonation

In the following paragraphs, we describe how we tested whether victim B is vulnerable to our four attacks.

**a) Master Impersonation:**
- The attack device impersonates victim A, who is not required to be present.
- We initiate a secure connection establishment from the attack device to victim B.
- If victim B does not ask the attack device to authenticate (as in Figure 2), then victim B is vulnerable to LSC MI.
- If victim B supports Secure Connections, it is also vulnerable to SC MI because the authentication procedure is downgraded from secure to legacy (as in Figure 4).

**b) Slave Impersonation:**
- The attack device impersonates victim A, who is not required to be present.
- We initiate a secure connection establishment from victim B to victim A.
- If the attack board switches roles from slave to master before accepting the connection request, performs unilateral legacy authentication, and starts the session key negotiation without being asked by victim B to authenticate (as in Figure 3), then victim B is vulnerable to LSC SI.
- If victim B supports Secure Connections, it is also vulnerable to SC SI because the authentication procedure is downgraded from secure to legacy (as in Figure 4).

Our evaluation setup allows us to test BIAS attacks against a target victim in a matter of minutes and is low-cost, using inexpensive hardware and open-source software. Our attack device consists of a CYW920819EVB-02 board connected to a Linux laptop. The board costs around $50, and any Linux laptop, or even a Raspberry Pi, can be used to control the board. Other researchers interested in BIAS attacks can easily reproduce our setup to test more devices.

#### B. Evaluation Results
Table III shows our evaluation results. The first column contains the Bluetooth chip name, and the second column lists the names of the devices we evaluated using such chips. The third and fourth columns evaluate the LSC MI and LSC SI BIAS attacks. The fifth and sixth columns evaluate the SC MI and SC SI BIAS attacks. A solid circle (○) indicates that a chip and the related devices are vulnerable to an attack, and an empty circle (○) indicates that a chip and related devices are not vulnerable. Secure Connections is optional in the Bluetooth standard, and we use (-) in the SC columns when a chip/device does not support Secure Connections.

Table III confirms that all 31 Bluetooth devices (28 unique Bluetooth chips) we evaluated are vulnerable to our BIAS attacks. Our list of vulnerable devices includes Bluetooth chips from Intel, Qualcomm (Snapdragon), Cypress (including Broadcom wireless IoT business [11]), Apple, Samsung (Exynos), and CSR (Cambridge Silicon Radio). Additionally, the list includes a mix of proprietary and open-source Bluetooth host stacks from Android (Bluedroid and Fluoride), Apple (iOS, iPadOS, and macOS), Linux (BlueZ), Microsoft (Windows 10 and Windows Phone), Cypress, and CSR. Overall, we attacked 16 Legacy Secure Connections devices and 15 Secure Connections devices, supporting Bluetooth versions 5.0, 4.2, 4.1, and lower or equal to 4.0.

The only exception is the ThinkPad 41U5005 mouse, which is not vulnerable to our LSC SI attack. Specifically, when we let the mouse establish a secure connection with our attack device, even if the attack device switches roles and completes the unilateral legacy authentication, the mouse always asks the attack board to authenticate before starting the session key negotiation.

The table confirms that our BIAS attacks are standard-compliant, as the attacks are effective regardless of the Bluetooth chip, Bluetooth host stack, usage of Secure Connections, and Bluetooth version number. Furthermore, all devices in the market using any of the vulnerable chips in Table III should be vulnerable to our BIAS attacks. Based on our results, we recommend the Bluetooth SIG to fix the standard as soon as possible, and we provide a list of BIAS attacks countermeasures in Section VIII-C.

### VIII. Discussion

In this section, we discuss how to combine our BIAS attack with the KNOB attack [4]. We also comment on the root causes of BIAS attacks and potential countermeasures.

#### A. Combination of BIAS and KNOB Attacks
Our BIAS attacks and the KNOB attack proposed in [4] are both standard-compliant, but they achieve different goals by exploiting different phases of Bluetooth secure connection establishment. BIAS attacks target link key authentication, allowing the attacker to authenticate as master and slave without possessing the link key. The KNOB attack targets session key negotiation, allowing the attacker to lower the entropy of the session key (to brute force it). The KNOB attack alone cannot impersonate a Bluetooth device as the attacker does not possess the long-term key.

By chaining BIAS and KNOB attacks, an attacker can impersonate a Bluetooth device, complete authentication without possessing the link key, negotiate a session key with low entropy, establish a secure connection, and brute force the session key. This combination is novel and powerful. For example, the attacker can impersonate the recipient of a sensitive file and recover the plaintext, or impersonate an unlocker and unlock a device by sending encrypted commands.

#### B. Root Causes of BIAS Attacks
The BIAS attacks evaluated in Section VII are enabled by four root causes identified in the Bluetooth standard. The combination of these root causes allows an attacker to perform master and slave impersonation attacks on LSC and SC. We summarize the root causes as follows:

1. **Integrity**: Bluetooth secure connection establishment is not integrity-protected, despite the devices already sharing a long-term key (KL). The lack of integrity protection allows an attacker to modify the capabilities of the impersonated victim, including Secure Connections support.
2. **Legacy Mutual Authentication**: Bluetooth Legacy Secure Connections does not mandate the mutual use of the legacy authentication procedure [6, p. 559]. When the procedure is used unilaterally, there is only one verifier, and the attacker can impersonate the verifier and complete the secure connection establishment without authenticating to the victim.
3. **Role Switching**: Bluetooth role switching can be performed anytime after baseband paging [6, p. 595]. In an unilateral authentication scheme, this is problematic, as the attacker might start the secure connection establishment procedure as the prover and become the verifier to avoid being asked to authenticate.
4. **Secure Connections Downgrade**: Bluetooth does not enforce the usage of Secure Connections between pairing and secure connection establishment. Therefore, two devices that paired using Secure Connections can use Legacy Secure Connections to establish subsequent secure connections. The attacker exploits this fact to downgrade a Secure Connections secure connection establishment to Legacy Secure Connections, using the vulnerable legacy authentication procedure.