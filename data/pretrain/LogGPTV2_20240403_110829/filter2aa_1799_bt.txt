Manager is a HAM client.
I 
View Manager (VM) VM detects and manages UWP user interface events and activities
and talks with HAM to keep the UI application in the foreground and in a nonsuspended state.
Furthermore, VM helps HAM in detecting when a UWP application goes into background
state. View Manager is implemented in the CoreUiComponents.dll .Net managed library, which
depends on the Modern Execution Manager client interface (ExecModelClient.dll) to properly
register with HAM. Both libraries live in the User Manager service, which runs in a Sihost process
(the service needs to proper manage UI events)
I 
Background Broker Infrastructure (BI) BI manages the applications background tasks, their
execution policies, and events. The core server is implemented mainly in the bisrv.dll library,
manages the events that the brokers generate, and evaluates the policies used to decide whether
to run a background task. The Background Broker Infrastructure lives in the BrokerInfrastructure
service and, at the time of this writing, is not used for Centennial applications.
There are some other minor components that compose the new application model that we have not 
mentioned here and are beyond the scope of this book.
CHAPTER 8 System mechanisms
245
With the goal of being able to run even standard Win32 applications on secure devices like 
Windows 10 S, and to enable the conversion of old application to the new model, Microsoft has de-
signed the Desktop Bridge (internally called Centennial). The bridge is available to developers through 
Visual Studio or the Desktop App Converter. Running a Win32 application in an AppContainer, even if 
possible, is not recommended, simply because the standard Win32 applications are designed to access 
a wider system API surface, which is much reduced in AppContainers.
UWP applications
We already covered an introduction of UWP applications and described the security environment in 
which they run in Chapter 7 of Part 1. To better understand the concepts expressed in this chapter, it is 
useful to define some basic properties of the modern UWP applications. Windows 8 introduced signifi-
cant new properties for processes:
I 
Package identity
I 
Application identity
I 
AppContainer
I 
Modern UI
We have already extensively analyzed the AppContainer (see Chapter 7 in Part 1). When the user 
downloads a modern UWP application, the application usually came encapsulated in an AppX package. 
A package can contain different applications that are published by the same author and are linked to-
gether. A package identity is a logical construct that uniquely defines a package. It is composed of five 
parts: name, version, architecture, resource id, and publisher. The package identity can be represented 
in two ways: by using a Package Full Name (formerly known as Package Moniker), which is a string 
composed of all the single parts of the package identity, concatenated by an underscore character; or 
by using a Package Family name, which is another string containing the package name and publisher. 
The publisher is represented in both cases by using a Base32-encoded string of the full publisher name. 
In the UWP world, the terms “Package ID” and “Package full name” are equivalent. For example, the 
Adobe Photoshop package is distributed with the following full name: 
AdobeSystemsIncorporated.AdobePhotoshopExpress_2.6.235.0_neutral_split.scale-125_
ynb6jyjzte8ga, where
I 
AdobeSystemsIncorporated.AdobePhotoshopExpress is the name of the package.
I 
2.6.235.0 is the version.
I 
neutral is the targeting architecture.
I 
split_scale is the resource id.
I 
ynb6jyjzte8ga is the base32 encoding (Crockford’s variant, which excludes the letters i, l, u, and
o to avoid confusion with digits) of the publisher.
246 
CHAPTER 8 System mechanisms
Its package family name is the simpler “AdobeSystemsIncorporated.AdobePhotoshopExpress 
_ynb6jyjzte8ga” string.
Every application that composes the package is represented by an application identity. An applica-
tion identity uniquely identifies the collection of windows, processes, shortcuts, icons, and functionality 
that form a single user-facing program, regardless of its actual implementation (so this means that in 
the UWP world, a single application can be composed of different processes that are still part of the 
same application identity). The application identity is represented by a simple string (in the UWP world, 
called Package Relative Application ID, often abbreviated as PRAID). The latter is always combined with 
the package family name to compose the Application User Model ID (often abbreviated as AUMID). For 
example, the Windows modern Start menu application has the following AUMID: Microsoft.Windows.
ShellExperienceHost_cw5n1h2txyewy!App, where the App part is the PRAID.
Both the package full name and the application identity are located in the WIN://SYSAPPID Security 
attribute of the token that describes the modern application security context. For an extensive descrip-
tion of the security environment in which the UWP applications run, refer to Chapter 7 in Part 1.
Centennial applications
Starting from Windows 10, the new application model became compatible with standard Win32 applica-
tions. The only procedure that the developer needs to do is to run the application installer program with 
a special Microsoft tool called Desktop App Converter. The Desktop App Converter launches the installer 
under a sandboxed server Silo (internally called Argon Container) and intercepts all the file system and 
registry I/O that is needed to create the application package, storing all its files in VFS (virtualized file 
system) private folders. Entirely describing the Desktop App Converter application is outside the scope of 
this book. You can find more details of Windows Containers and Silos in Chapter 3 of Part 1. 
The Centennial runtime, unlike UWP applications, does not create a sandbox where Centennial 
processes are run, but only applies a thin virtualization layer on the top of them. As result, compared 
to standard Win32 programs, Centennial applications don’t have lower security capabilities, nor do 
they run with a lower integrity-level token. A Centennial application can even be launched under 
an administrative account. This kind of application runs in application silos (internally called Helium 
Container), which, with the goal of providing State separation while maintaining compatibility, provides 
two forms of “jails”: Registry Redirection and Virtual File System (VFS). Figure 8-42 shows an example of 
a Centennial application: Kali Linux.
At package activation, the system applies registry redirection to the application and merges the 
main system hives with the Centennial Application registry hives. Each Centennial application can 
include three different registry hives when installed in the user workstation: registry.dat, user.dat, 
and (optionally) userclasses.dat. The registry files generated by the Desktop Convert represent “im-
mutable” hives, which are written at installation time and should not change. At application startup, 
the Centennial runtime merges the immutable hives with the real system registry hives (actually, the 
Centennial runtime executes a “detokenizing” procedure because each value stored in the hive con-
tains relative values). 
CHAPTER 8 System mechanisms
247
FIGURE 8-42 Kali Linux distributed on the Windows Store is a typical example of Centennial application.
The registry merging and virtualization services are provided by the Virtual Registry Namespace 
Filter driver (WscVReg), which is integrated in the NT kernel (Configuration Manager). At package 
activation time, the user mode AppInfo service communicates with the VRegDriver device with the 
goal of merging and redirecting the registry activity of the Centennial applications. In this model, if the 
app tries to read a registry value that is present in the virtualized hives, the I/O is actually redirected to 
the package hives. A write operation to this kind of value is not permitted. If the value does not already 
exist in the virtualized hive, it is created in the real hive without any kind of redirection at all. A different 
kind of redirection is instead applied to the entire HKEY_CURRENT_USER root key. In this key, each new 
subkey or value is stored only in the package hive that is stored in the following path: C:\ProgramData\
Packages\\\SystemAppData\Helium\Cache. Table 8-34 shows a summary of 
the Registry virtualization applied to Centennial applications:
TABLE 8-34 Registry virtualization applied to Centennial applications
Operation
Result
Read or enumeration of HKEY_
LOCAL_MACHINE\Software
The operation returns a dynamic merge of the package hives with the local 
system counterpart. Registry keys and values that exist in the package hives 
always have precedence with respect to keys and values that already exist in 
the local system.
All writes to HKEY_CURRENT_USER
Redirected to the Centennial package virtualized hive.
All writes inside the package
Writes to HKEY_LOCAL_MACHINE\Software are not allowed if a registry value 
exists in one of the package hives.
All writes outside the package
Writes to HKEY_LOCAL_MACHINE\Software are allowed as long as the value 
does not already exist in one of the package hives.
248 
CHAPTER 8 System mechanisms
When the Centennial runtime sets up the Silo application container, it walks all the file and direc-
tories located into the VFS folder of the package. This procedure is part of the Centennial Virtual File 
System configuration that the package activation provides. The Centennial runtime includes a list of 
mapping for each folder located in the VFS directory, as shown in Table 8-35.
TABLE 8-35 List of system folders that are virtualized for Centennial apps
Folder Name
Redirection Target
Architecture
SystemX86
C:\Windows\SysWOW64
32-bit/64-bit
System
C:\Windows\System32
32-bit/64-bit
SystemX64
C:\Windows\System32
64-bit only
ProgramFilesX86
C:\Program Files (x86)
32-bit/64-bit
ProgramFilesX64
C:\Program Files
64-bit only
ProgramFilesCommonX86
C:\Program Files (x86)\Common Files
32-bit/64-bit
ProgramFilesCommonX64
C:\Program Files\Common Files
64-bit only
Windows
C:\Windows
Neutral
CommonAppData
C:\ProgramData
Neutral
The File System Virtualization is provided by three different drivers, which are heavily used for 
Argon containers:
I 
indows ind inifilter driver indlt Manages the redirection of the Centennial ap-
plication’s files. This means that if the Centennial app wants to read or write to one of its existing
virtualized files, the I/O is redirected to the file’s original position. When the application creates
instead a file on one of the virtualized folders (for example, in C:\Windows), and the file does
not already exist, the operation is allowed (assuming that the user has the needed permissions)
and the redirection is not applied.
I 
indows Container solation inifilter driver cis Responsible for merging the
content of different virtualized folders (called layers) and creating a unique view. Centennial
applications use this driver to merge the content of the local user’s application data folder
(usually C:\Users\\AppData) with the app’s application cache folder, located in C:\
User\\Appdata\Local\Packages\<Package Full Name\LocalCache. The driver is
even able to manage the merge of multiple packages, meaning that each package can operate
on its own private view of the merged folders. To support this feature, the driver stores a Layer
ID of each package in the Reparse point of the target folder. In this way, it can construct a layer
map in memory and is able to operate on different private areas (internally called Scratch areas).
This advanced feature, at the time of this writing, is configured only for related set, a feature
described later in the chapter.
I 
indows Container ae irtualiation inifilter driver cns While Wcifs driver
merges multiple folders, Wcnfs is used by Centennial to set up the name redirection of the local
user application data folder. Unlike from the previous case, when the app creates a new file or
folder in the virtualized application data folder, the file is stored in the application cache folder,
and not in the real one, regardless of whether the file already exists.
CHAPTER 8 System mechanisms
249
One important concept to keep in mind is that the BindFlt filter operates on single files, whereas Wcnfs 
and Wcifs drivers operate on folders. Centennial uses minifilters’ communication ports to correctly set up 
the virtualized file system infrastructure. The setup process is completed using a message-based commu-
nication system (where the Centennial runtime sends a message to the minifilter and waits for its re-
sponse). Table 8-36 shows a summary of the file system virtualization applied to Centennial applications.
TABLE 8-36 File system virtualization applied to Centennial applications
Operation
Result
Read or enumeration of a well-known 
Windows folder
The operation returns a dynamic merge of the corresponding VFS folder with 
the local system counterpart. File that exists in the VFS folder always had pre-
cedence with respect to files that already exist in the local system one.
Writes on the application data folder
All the writes on the application data folder are redirected to the local 
Centennial application cache.
All writes inside the package folder
Forbidden, read-only.
All writes outside the package folder
Allowed if the user has permission.
The Host Activity Manager
Windows 10 has unified various components that were interacting with the state of a packaged ap-
plication in a noncoordinated way. As a result, a brand-new component, called Host Activity Manager 
(HAM) became the central component and the only one that manages the state of a packaged applica-
tion and exposes a unified API set to all its clients.
Unlike its predecessors, the Host Activity Manager exposes activity-based interfaces to its clients. 
A host is the object that represents the smallest unit of isolation recognized by the Application model. 
Resources, suspend/resume and freeze states, and priorities are managed as a single unit, which usu-
ally corresponds to a Windows Job object representing the packaged application. The job object may 
contain only a single process for simple applications, but it could contain even different processes for 
applications that have multiple background tasks (such as multimedia players, for example).
In the new Modern Application Model, there are three job types:
I 
Mixed A mix of foreground and background activities but typically associated with the fore-
ground part of the application. Applications that include background tasks (like music playing
or printing) use this kind of job type.
I 
Pure A host that is used for purely background work.
I 
ste A host that executes Windows code on behalf of the application (for example, back-
ground downloads).
An activity always belongs to a host and represents the generic interface for client-specific concepts 
such as windows, background tasks, task completions, and so on. A host is considered “Active” if its 
job is unfrozen and it has at least one running activity. The HAM clients are components that interact 
and control the lifetime of activities. Multiple components are HAM clients: View Manager, Broker 
Infrastructure, various Shell components (like the Shell Experience Host), AudioSrv, Task completions, 
and even the Windows Service Control Manager.
250 
CHAPTER 8 System mechanisms
The Modern application’s lifecycle consists of four states: running, suspending, suspend-complete, 
and suspended (states and their interactions are shown in Figure 8-43.)
I 
Running The state where an application is executing part of its code, other than when it's
suspending. An application could be in “running” state not only when it is in a foreground state
but even when it is running background tasks, playing music, printing, or any number of other
background scenarios.
I 
Suspending This state represents a time-limited transition state that happens where HAM
asks the application to suspend. HAM can do this for different reasons, like when the applica-
tion loses the foreground focus, when the system has limited resources or is entering a battery-
safe mode, or simply because an app is waiting for some UI event. When this happens, an
app has a limited amount of time to go to the suspended state (usually 5 seconds maximum);
otherwise, it will be terminated.
I 
SuspendComplete This state represents an application that has finished suspending and
notifies the system that it is done. Therefore, its suspend procedure is considered completed.
I 
Suspended Once an app completes suspension and notifies the system, the system freez-
es the application’s job object using the NtSetInformationJobObject API call (through the
JobObjectFreezeInformation information class) and, as a result, none of the app code can run.
Suspending
Running
(Active)
Suspended
(Halted)
SuspendComplete
FIGURE 8-43 Scheme of the lifecycle of a packaged application.
With the goal of preserving system efficiency and saving system resources, the Host Activity 
Manager by default will always require an application to suspend. HAM clients need to require keep-
ing an application alive to HAM. For foreground applications, the component responsible in keeping 
the app alive is the View Manager. The same applies for background tasks: Broker Infrastructure is the 
component responsible for determining which process hosting the background activity should remain 
alive (and will request to HAM to keep the application alive). 
Packaged applications do not have a Terminated state. This means that an application does not 
have a real notion of an Exit or Terminate state and should not try to terminate itself. The actual model 
for terminating a Packaged application is that first it gets suspended, and then HAM, if required, calls 
NtTerminateJobObject API on the application's job object. HAM automatically manages the app life-
time and destroys the process only as needed. HAM does not decide itself to terminate the application; 
instead, its clients are required to do so (the View Manager or the Application Activation Manager are 
good examples). A packaged application can’t distinguish whether it has been suspended or termi-
nated. This allows Windows to automatically restore the previous state of the application even if it has 
been terminated or if the system has been rebooted. As a result, the packaged application model is 
completely different from the standard Win32 application model.
CHAPTER 8 System mechanisms
251
To properly suspend and resume a Packaged application, the Host Activity manager uses the new 
PsFreezeProcess and PsThawProcess kernel APIs. The process Freeze and Thaw operations are similar to 
suspend and resume, with the following two major differences: