# 内存结构
## 总体内存结构
名称     | 线程私有/共享 | 功能            | 大小                | 异常
------ | ------- | ------------- | ----------------- | -----------------------------------
程序计数器  | 私有      | 保存当前线程执行方法    | 通常固定大小            | 不会
JVM栈   | 私有      | 方法的栈帧         | -Xss              | StackOverflowError,OutOfMemoryError
本地方法栈  | 私有      | 存储native方法信息  | 通常会固定大小           | StackOverflowError,OutOfMemoryError
堆      | 共享      | 存储对象和数组       | -Xms初始堆值,-Xmx最大堆值 | OutOfMemoryError
方法区    | 共享      | 存储类结构 常量 静态变量 | -XX参数             | OutOfMemoryError
运行时常量池 | 共享      | 常量池运行时表示      | 从属于方法区            | OutOfMemoryError
![批注 2020-07-29 083921](/assets/批注%202020-07-29%20083921.png)
![批注 2020-07-29 084922](/assets/批注%202020-07-29%20084922.png)
![截图录屏_选择区域_20200918152033](/assets/截图录屏_选择区域_20200918152033.png)
### 概览
![截图录屏_选择区域_20200918155103](/assets/截图录屏_选择区域_20200918155103.png)
### PC 程序计数器
用来存放执行指令的偏移量和行号指示器等
Java虚拟机的多线程是通过线程轮流切换、分配处理器执行时间的方式来实现的，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器
> 存放指令位置
> 虚拟机的运行，类似于这样的循环：
```c
while( not end ) {
​	取PC中的位置，找到对应位置的指令；
​	执行该指令；
​	PC ++;
}
```
### JVM Stack
每个线程私有
![截图录屏_选择区域_20200918153359](/assets/截图录屏_选择区域_20200918153359.png)
1. Frame - 每个方法对应一个栈帧
   1. Local Variable Table 局部变量表
      存放方法参数和局部变量的区域
   2. Operand Stack 操作栈
      各种指令往栈中写入或者读取信息
      对于long的处理（store and load），多数虚拟机的实现都是原子的
      jls 17.7，没必要加volatile
   3. Dynamic Linking 动态连接
      常量池中一个对当前方法的引用
      https://blog.csdn.net/qq_41813060/article/details/88379473 
      jvms 2.6.3
   4. return address 方法返回地址
      a() -> b()，方法a调用了方法b, b方法的返回值放在什么地方
### 本地方法栈
为本地方法服务
### 堆
- 共享，内存大户，存储所有的对象和数组
- 是垃圾收集器管理的内存区域
- 所有线程共享的Java堆中可以划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB），以提升对象分配时的效率
- -Xms(memory start) 初始堆值，-Xmx(memory max)最大堆值
### 方法区
各个线程共享的内存区域，它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据
1. 1.8之前被HotSpot使用一个永久代实现
   字符串常量位于永久代
   FGC不会清理
   这区域的内存回收目标主要是针对常量池的回收和对类型的卸载 但是类型卸载条件十分苛刻
   大小启动的时候指定，不能变
2. Meta Space (>=1.8)
   字符串常量位于堆
   会触发FGC清理
   不设定的话，最大就是物理内存
#### 运行时常量池
是方法区的一部分
用于存放编译期生成的各种字面量与符号引用
Java语言并不要求常量一定只有编译期才能产生，运行期间也可以将新的常量放入池中，比如String.intern()
### 直接内存
> JVM可以直接访问的内核空间的内存 (OS 管理的内存)
> NIO ， 提高效率，实现zero copy
一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据
本机直接内存的分配不会受到Java堆大小的限制
## 对象的创建
- 内存分配
   - 把那个指针向空闲空间方向挪动一段与对象大小相等的距离，这种分配方式称为“指针碰撞”
   - 如果没有一块完整的空闲内存 就无法使用这种方法了
- 线程安全的保证 分配时 多个线程并发执行
   - 虚拟机是采用CAS配上失败重试的方式保证更新操作的原子性
   - 另外一种方式是每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（TLAB） 只有这个缓冲区用完了 才会在堆中分配
## 对象内存布局
- 以下分析都是基于HotSpot虚拟机
```text
普通对象
4 或 8 字节        | 4 或 8 字节          |
markdord(对象标记)|class pointer(类型指针)|instance data(实例数据)|padding(对齐)
数组
4 或 8 字节        | 4 或 8 字节          | 4 字节        |
markdord(对象标记)|class pointer(类型指针)|length(数组长度)|instance data(实例数据)|padding(对齐)
```
1. 对象头
   1. 对象本身运行时的数据 哈希吗 GC标记 锁信息等等
   2. 类元信息：指向Class的指针 
2. 实例数据：实例成员变量及所有可见的父类成员变量
3. 对齐填充
锁升级：无锁状态 -> 偏向锁 -> 自旋锁 -> 重量级锁
![32位虚拟机对象头](/assets/批注%202020-07-27%20091839.png)
![64位虚拟机对象头](/assets/批注%202020-05-12%20145237.png)
64 位的 Java 虚拟机中，对象头的标记字段占 64 位，而类型指针又占了 64 位，开启指针压缩后，对象头中的类型指针会被压缩成 32 位，使得对象头的大小从 16 字节降至 12 字节，虚拟机通过使用一个 32 位偏移量来表示对象引用，从而降低指针所需要的数据位数，这意味着虚拟机需要对对象的内存进行填充以及重新排列变量的顺序以实现对齐，
**Hotspot开启内存压缩的规则**
UseCompressedOopsClassPointers
UseCompressedOops
1. 4G以下，直接砍掉高32位
2. 4G - 32G，默认开启内存压缩 ClassPointers Oops
3. 32G，压缩无效，使用64位
## 对象定位
- 句柄方式
```mermaid
stateDiagram-v2
    state 栈 {
        ref --> 句柄池
    }
    state 堆 {
        state 句柄池 {
            实例数据指针 --> 对象实例数据
            类型数据指针 --> 对象类型数据
        }
        对象实例数据
    }
    state 方法区 {
        对象类型数据
    }
```
- 直接定位
```mermaid
stateDiagram-v2
    state 栈 {
        ref --> 对象实例数据
    }
    state 堆 {
        state 对象实例数据 {
            类型数据指针 --> 对象类型数据
        }
    }
    state 方法区 {
        对象类型数据
    }
```
使用直接指针来访问最大的好处就是速度更快，它节省了一次指针定位的时间开销
## 对象实例化
### 字节码角度
```java
Object ref = new Object()
```
得到字节码:
```
stack=2, locals=2, args_size=1
   0: new           #2                  // class java/lang/Object
   3: dup
   4: invokespecial #1                  // Method java/lang/Object."":()V
   7: astore_1
   8: return
```
new:
1. 如果类不存在 就先进行类加载
2. 为所有属性值分配内存
3. 对所有属性值进行０值初始化
4. 最后将指向实例对象的引用变量压入虚拟机栈顶
dup:
1. 在栈顶复制实例对象的引用变量
   1. 复制出来的这个变量用来作为句柄调用相关方法