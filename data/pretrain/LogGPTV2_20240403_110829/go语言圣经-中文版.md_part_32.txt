fmt包的%T动作:
接口值 245
gopl
var w io.Writer
fmt.Printf("%T\n", w) // ""
w = os.Stdout
fmt.Printf("%T\n", w) // "*os.File"
w = new(bytes.Buffer)
fmt.Printf("%T\n", w) // "*bytes.Buffer"
在fmt包内部，使用反射来获取接口动态类型的名称。我们会在第12章中学到反射相关的知
识。
7.5.1. 警告：一个包含nil指针的接口不是nil接口
一个不包含任何值的nil接口值和一个刚好包含nil指针的接口值是不同的。这个细微区别产生
了一个容易绊倒每个Go程序员的陷阱。
思考下面的程序。当debug变量设置为true时，main函数会将f函数的输出收集到一个
bytes.Buffer类型中。
const debug = true
func main() {
var buf *bytes.Buffer
if debug {
buf = new(bytes.Buffer) // enable collection of output
}
f(buf) // NOTE: subtly incorrect!
if debug {
// ...use buf...
}
}
// If out is non-nil, output will be written to it.
func f(out io.Writer) {
// ...do something...
if out != nil {
out.Write([]byte("done!\n"))
}
}
我们可能会预计当把变量debug设置为false时可以禁止对输出的收集，但是实际上在out.Write
方法调用时程序发生了panic：
if out != nil {
out.Write([]byte("done!\n")) // panic: nil pointer dereference
}
接口值 246
gopl
当main函数调用函数f时，它给f函数的out参数赋了一个*bytes.Buffer的空指针，所以out的动
态值是nil。然而，它的动态类型是*bytes.Buffer，意思就是out变量是一个包含空指针值的非
空接口（如图7.5），所以防御性检查out!=nil的结果依然是true。
动态分配机制依然决定(*bytes.Buffer).Write的方法会被调用，但是这次的接收者的值是nil。
对于一些如*os.File的类型，nil是一个有效的接收者(§6.2.1)，但是*bytes.Buffer类型不在这些
类型中。这个方法会被调用，但是当它尝试去获取缓冲区时会发生panic。
问题在于尽管一个nil的*bytes.Buffer指针有实现这个接口的方法，它也不满足这个接口具体的
行为上的要求。特别是这个调用违反了(*bytes.Buffer).Write方法的接收者非空的隐含先觉条
件，所以将nil指针赋给这个接口是错误的。解决方案就是将main函数中的变量buf的类型改为
io.Writer，因此可以避免一开始就将一个不完全的值赋值给这个接口：
var buf io.Writer
if debug {
buf = new(bytes.Buffer) // enable collection of output
}
f(buf) // OK
现在我们已经把接口值的技巧都讲完了，让我们来看更多的一些在Go标准库中的重要接口类
型。在下面的三章中，我们会看到接口类型是怎样用在排序，web服务，错误处理中的。
接口值 247
gopl
7.6. sort.Interface接口
排序操作和字符串格式化一样是很多程序经常使用的操作。尽管一个最短的快排程序只要15
行就可以搞定，但是一个健壮的实现需要更多的代码，并且我们不希望每次我们需要的时候
都重写或者拷贝这些代码。
幸运的是，sort包内置的提供了根据一些排序函数来对任何序列排序的功能。它的设计非常独
到。在很多语言中，排序算法都是和序列数据类型关联，同时排序函数和具体类型元素关
联。相比之下，Go语言的sort.Sort函数不会对具体的序列和它的元素做任何假设。相反，它
使用了一个接口类型sort.Interface来指定通用的排序算法和可能被排序到的序列类型之间的约
定。这个接口的实现由序列的具体表示和它希望排序的元素决定，序列的表示经常是一个切
片。
一个内置的排序算法需要知道三个东西：序列的长度，表示两个元素比较的结果，一种交换
两个元素的方式；这就是sort.Interface的三个方法：
package sort
type Interface interface {
Len() int
Less(i, j int) bool // i, j are indices of sequence elements
Swap(i, j int)
}
为了对序列进行排序，我们需要定义一个实现了这三个方法的类型，然后对这个类型的一个
实例应用sort.Sort函数。思考对一个字符串切片进行排序，这可能是最简单的例子了。下面是
这个新的类型StringSlice和它的Len，Less和Swap方法
type StringSlice []string
func (p StringSlice) Len() int { return len(p) }
func (p StringSlice) Less(i, j int) bool { return p[i] < p[j] }
func (p StringSlice) Swap(i, j int) { p[i], p[j] = p[j], p[i] }
现在我们可以通过像下面这样将一个切片转换为一个StringSlice类型来进行排序：
sort.Sort(StringSlice(names))
这个转换得到一个相同长度，容量，和基于names数组的切片值；并且这个切片值的类型有
三个排序需要的方法。
对字符串切片的排序是很常用的需要，所以sort包提供了StringSlice类型，也提供了Strings函
数能让上面这些调用简化成sort.Strings(names)。
sort.Interface接口 248
gopl
这里用到的技术很容易适用到其它排序序列中，例如我们可以忽略大些或者含有特殊的字
符。（本书使用Go程序对索引词和页码进行排序也用到了这个技术，对罗马数字做了额外逻
辑处理。）对于更复杂的排序，我们使用相同的方法，但是会用更复杂的数据结构和更复杂
地实现sort.Interface的方法。
我们会运行上面的例子来对一个表格中的音乐播放列表进行排序。每个track都是单独的一
行，每一列都是这个track的属性像艺术家，标题，和运行时间。想象一个图形用户界面来呈
现这个表格，并且点击一个属性的顶部会使这个列表按照这个属性进行排序；再一次点击相
同属性的顶部会进行逆向排序。让我们看下每个点击会发生什么响应。
下面的变量tracks包好了一个播放列表。（One of the authors apologizes for the other
author’s musical tastes.）每个元素都不是Track本身而是指向它的指针。尽管我们在下面的代
码中直接存储Tracks也可以工作，sort函数会交换很多对元素，所以如果每个元素都是指针会
更快而不是全部Track类型，指针是一个机器字码长度而Track类型可能是八个或更多。
gopl.io/ch7/sorting
type Track struct {
Title string
Artist string
Album string
Year int
Length time.Duration
}
var tracks = []*Track{
{"Go", "Delilah", "From the Roots Up", 2012, length("3m38s")},
{"Go", "Moby", "Moby", 1992, length("3m37s")},
{"Go Ahead", "Alicia Keys", "As I Am", 2007, length("4m36s")},
{"Ready 2 Go", "Martin Solveig", "Smash", 2011, length("4m24s")},
}
func length(s string) time.Duration {
d, err := time.ParseDuration(s)
if err != nil {
panic(s)
}
return d
}
printTracks函数将播放列表打印成一个表格。一个图形化的展示可能会更好点，但是这个小程
序使用text/tabwriter包来生成一个列是整齐对齐和隔开的表格，像下面展示的这样。注意
到 是满足io.Writer接口的。它会收集每一片写向它的数据；它的Flush方法
*tabwriter.Writer
会格式化整个表格并且将它写向os.Stdout（标准输出）。
sort.Interface接口 249
gopl
func printTracks(tracks []*Track) {
const format = "%v\t%v\t%v\t%v\t%v\t\n"
tw := new(tabwriter.Writer).Init(os.Stdout, 0, 8, 2, ' ', 0)
fmt.Fprintf(tw, format, "Title", "Artist", "Album", "Year", "Length")
fmt.Fprintf(tw, format, "-----", "------", "-----", "----", "------")
for _, t := range tracks {
fmt.Fprintf(tw, format, t.Title, t.Artist, t.Album, t.Year, t.Length)
}
tw.Flush() // calculate column widths and print table
}
为了能按照Artist字段对播放列表进行排序，我们会像对StringSlice那样定义一个新的带有必
须Len，Less和Swap方法的切片类型。
type byArtist []*Track
func (x byArtist) Len() int { return len(x) }
func (x byArtist) Less(i, j int) bool { return x[i].Artist < x[j].Artist }
func (x byArtist) Swap(i, j int) { x[i], x[j] = x[j], x[i] }
为了调用通用的排序程序，我们必须先将tracks转换为新的byArtist类型，它定义了具体的排
序：
sort.Sort(byArtist(tracks))
在按照artist对这个切片进行排序后，printTrack的输出如下
Title Artist Album Year Length
----- ------ ----- ---- ------
Go Ahead Alicia Keys As I Am 2007 4m36s
Go Delilah From the Roots Up 2012 3m38s
Ready 2 Go Martin Solveig Smash 2011 4m24s
Go Moby Moby 1992 3m37s
如果用户第二次请求“按照artist排序”，我们会对tracks进行逆向排序。然而我们不需要定义一
个有颠倒Less方法的新类型byReverseArtist，因为sort包中提供了Reverse函数将排序顺序转
换成逆序。
sort.Sort(sort.Reverse(byArtist(tracks)))
在按照artist对这个切片进行逆向排序后，printTrack的输出如下
sort.Interface接口 250
gopl
Title Artist Album Year Length
----- ------ ----- ---- ------
Go Moby Moby 1992 3m37s
Ready 2 Go Martin Solveig Smash 2011 4m24s
Go Delilah From the Roots Up 2012 3m38s
Go Ahead Alicia Keys As I Am 2007 4m36s
sort.Reverse函数值得进行更近一步的学习因为它使用了(§6.3)章中的组合，这是一个重要的
思路。sort包定义了一个不公开的struct类型reverse，它嵌入了一个sort.Interface。reverse的
Less方法调用了内嵌的sort.Interface值的Less方法，但是通过交换索引的方式使排序结果变
成逆序。
package sort
type reverse struct{ Interface } // that is, sort.Interface
func (r reverse) Less(i, j int) bool { return r.Interface.Less(j, i) }
func Reverse(data Interface) Interface { return reverse{data} }
reverse的另外两个方法Len和Swap隐式地由原有内嵌的sort.Interface提供。因为reverse是一
个不公开的类型，所以导出函数Reverse函数返回一个包含原有sort.Interface值的reverse类型
实例。
为了可以按照不同的列进行排序，我们必须定义一个新的类型例如byYear：
type byYear []*Track
func (x byYear) Len() int { return len(x) }
func (x byYear) Less(i, j int) bool { return x[i].Year < x[j].Year }
func (x byYear) Swap(i, j int) { x[i], x[j] = x[j], x[i] }
在使用sort.Sort(byYear(tracks))按照年对tracks进行排序后，printTrack展示了一个按时间先后
顺序的列表：
Title Artist Album Year Length
----- ------ ----- ---- ------
Go Moby Moby 1992 3m37s
Go Ahead Alicia Keys As I Am 2007 4m36s
Ready 2 Go Martin Solveig Smash 2011 4m24s
Go Delilah From the Roots Up 2012 3m38s
对于我们需要的每个切片元素类型和每个排序函数，我们需要定义一个新的sort.Interface实
现。如你所见，Len和Swap方法对于所有的切片类型都有相同的定义。下个例子，具体的类
型customSort会将一个切片和函数结合，使我们只需要写比较函数就可以定义一个新的排
sort.Interface接口 251
gopl
序。顺便说下，实现了sort.Interface的具体类型不一定是切片类型；customSort是一个结构体
类型。
type customSort struct {
t []*Track
less func(x, y *Track) bool
}
func (x customSort) Len() int
func (x customSort) Less(i, j int) bool { return x.less(x.t[i], x.t[j]) }
func (x customSort) Swap(i, j int) { x.t[i], x.t[j] = x.t[j], x.t[i] }
让我们定义一个多层的排序函数，它主要的排序键是标题，第二个键是年，第三个键是运行
时间Length。下面是该排序的调用，其中这个排序使用了匿名排序函数：
sort.Sort(customSort{tracks, func(x, y *Track) bool {
if x.Title != y.Title {
return x.Title < y.Title
}
if x.Year != y.Year {
return x.Year < y.Year
}
if x.Length != y.Length {
return x.Length < y.Length
}
return false
}})
这下面是排序的结果。注意到两个标题是“Go”的track按照标题排序是相同的顺序，但是在按
照year排序上更久的那个track优先。
Title Artist Album Year Length
----- ------ ----- ---- ------
Go Moby Moby 1992 3m37s
Go Delilah From the Roots Up 2012 3m38s
Go Ahead Alicia Keys As I Am 2007 4m36s
Ready 2 Go Martin Solveig Smash 2011 4m24s
尽管对长度为n的序列排序需要 O(n log n)次比较操作，检查一个序列是否已经有序至少需要n
−1次比较。sort包中的IsSorted函数帮我们做这样的检查。像sort.Sort一样，它也使用
sort.Interface对这个序列和它的排序函数进行抽象，但是它从不会调用Swap方法：这段代码
示范了IntsAreSorted和Ints函数和IntSlice类型的使用：
sort.Interface接口 252