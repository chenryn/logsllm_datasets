You install the plugin in the usual way, via the Plugin Manager. Once installed, you configure the
Jenkins Sonar plugin in the Configure System screen, in the Sonar section. This involves defining your
Sonar instances—you can configure as many instances of Sonar as you need. The default configuration
assumes that you are running a local instance of Sonar with the default embedded database. This is useful
for testing purposes but not very scalable. For a production environment, you will typically run Sonar
on a real database such as MySQL or Postgres, and you will need to configure the JDBC connection to
the production Sonar database in Jenkins. You do this by clicking on the Advanced button and filling
in the appropriate fields (see Figure 9.20, “Configuring Sonar in Jenkins”).
252
Figure 9.20. Configuring Sonar in Jenkins
The other thing you need to configure is when the Sonar build will kick off in a Sonar-enabled build job.
You usually configure Sonar to run with one of the long-running Jenkins build jobs, such as the code
quality metrics build. It is not very useful to run the Sonar build more than once a day, as Sonar stores
metrics in 24-hour slices. The default configuration will kick off a Sonar build in a Sonar-enabled build
job whenever the job is triggered by a periodically scheduled build or by a manual build.
To activate Sonar in your build job with the system-wide configuration options, just check the Sonar
option in the Post-build Actions (see Figure 9.21, “Configuring Sonar in a build job”). Sonar will run
whenever your build is started by one of the trigger mechanisms defined above.
253
Figure 9.21. Configuring Sonar in a build job
You typically set up Sonar to run on a regular basis, for example every night or once a week. So you
can activate Sonar on your normal unit/integration test build job, simply by adding a schedule (see
Figure 9.22, “Scheduling Sonar builds”). This avoids duplicated configuration details between jobs. Or,
if you already have a scheduled build job that runs with an appropriate frequency (such as a dedicated
code quality metrics build), you can activate Sonar on this build job.
Figure 9.22. Scheduling Sonar builds
If you click on the Advanced button, you can specify other more sophisticated options, such as running
your Sonar build on a separate branch, passing Maven additional command-line options (such as extra
memory), or overriding the default trigger configuration.
By default, Sonar will run even if the normal build fails. This is usually what you want, as Sonar should
record build and test failures as well as successful results. However, if required, you can deactivate this
option too in the Advanced options.
254
9.9. Conclusion
Code quality is an important part of the build process, and Jenkins provides excellent support for the
wide range of code quality-related tools out there. As a result, Jenkins should be a key part of your code
quality strategy.
255
Chapter 10. Advanced Builds
10.1. Introduction
In this chapter, we will look at some more advanced build job setups. We will discuss parameterized
builds, which allows Jenkins to prompt the user for additional parameters that will be passed into the
build job, and multiconfiguration build jobs, which let you run a single build job though a large number
of variations. We will look at how to run build jobs in parallel, and wait for the outcome of one or more
build jobs before continuing. And we will see how to implement build promotion strategies and build
pipelines so that Jenkins can be used not only as a build server, but also as a deployment server.
10.2. Parameterized Build Jobs
Parameterized builds are a powerful concept that enable you to add another dimension to your build jobs.
The Parameterized Build plugin lets you configure parameters for your build job, that can be either
entered by the user when the build job is triggered, or (as we will see later) from another build job.
For example, you might have a deployment build job, where you want to choose the target environment
in a drop-down list when you start the build job. Or you may want to specify the version of the application
you want to deploy. Or, when running a build job involving web tests, you might want to specify the
browser to run your Selenium or WebDriver tests in. You can even upload a file to be used by the build
job.
Note that it is the job of the build script to analyze and process the parameter values correctly—Jenkins
simply provides a user interface for users to enter values for the parameters, and passes these parameters
to the build script.
10.2.1. Creating a Parameterized Build Job
You install the Parameterized Build plugin as usual, via the Plugin Manager screen. Once you have done
this, configuring a parameterized build job is straightforward. Just tick the “This build is parameterized”
option and click Add Parameter to add a new build job parameter (see Figure 10.1, “Creating a
parameterized build job”). You can add parameters to any sort of build, and you can add as many
parameters as you want for a given build job.
Figure 10.1. Creating a parameterized build job
To add a parameter to your build job, just pick the parameter type in the drop-down list. This will let
you configure the details of your parameter (see Figure 10.2, “Adding a parameter to the build job”).
You can choose from several different parameter types, such as Strings, Booleans, and drop-down lists.
Depending on the type you choose, you will have to enter slightly different configuration values, but the
basic process is identical. All parameter types, with the exception of the File parameter, have a name
and a description, and most often a default value.
In Figure 10.3, “Adding a parameter to the build job”, for example, we are adding a parameter called
version to a deployment build job. The default value (RELEASE) will be initially displayed when
Jenkins prompts the user for this parameter, so if the user doesn’t change anything, this value will be
used.
Figure 10.2. Adding a parameter to the build job
When the user starts a parameterized build job (parameterized build jobs are very often started
manually), Jenkins will propose a page where the user can enter values for each of the build job’s
parameters (see Figure 10.3, “Adding a parameter to the build job”).
258
Figure 10.3. Adding a parameter to the build job
10.2.2. Adapting Your Builds to Work with Parameterized Build
Scripts
Once you have added a parameter, you need to configure your build scripts to use it. Choosing the
parameter name well is important here, as this is also the name of the variable that Jenkins will pass
through as an environment variable when it runs the build job. To illustrate this, consider the very basic
build job configuration in Figure 10.4, “Demonstrating a build parameter”, where we are simply echoing
the build parameter back out to the console. Note that, to make the environment variables more portable
across operating systems, it is good practice to put them all in upper case.
Figure 10.4. Demonstrating a build parameter
When we run this, we get a console output along the following lines:
Started by user anonymous
Building on master
[workspace] $ /bin/sh -xe /var/folders/y+/y+a+wZ-jG6WKHEm9KwnSvE+++TI/-Tmp-/
jenkins5862957776458050998.sh
+ echo Version=1.2.3
Version=1.2.3
Notifying upstream projects of job completion
Finished: SUCCESS
You can also use these environment variables from within your build scripts. For example, in an Ant or
Maven build, you can use the special env property to access the current environment variables:
259
Another option is to pass the parameter into the build script as a property value. The following is a more
involved example from a Maven POM file. In this example, Maven is configured to deploy a specific
WAR file. We provide the version of the WAR file to be deployed in the target.version property,
which is used in the dependency declaration, as shown below:
...
com.wakaleo.gameoflife
gameoflife-web
war
${target.version}
RELEASE
...
When we invoke Maven, we pass in the parameter as one of the build properties (see Figure 10.5,
“Adding a parameter to a Maven build job”). We can then use a tool like Cargo to do the actual
deployment—Maven will download the requested version of the WAR file from the local Enterprise
Repository Manager, and deploy it to an application server.
Figure 10.5. Adding a parameter to a Maven build job
That, in a nutshell, is how you can integrate build job parameters into your build. In addition to plain
old String parameters, however, there are a few more sophisticated parameter types, that we will look
at in the following paragraphs (see Figure 10.6, “Many different types of parameters are available”).
260
Figure 10.6. Many different types of parameters are available
10.2.3. More Advanced Parameter Types
Password parameters are, as you would expect, very similar to String parameters, except that they are
displayed as a password field.
There are many cases where you which to present a limited set of parameter options. In a deployment
build, you might want to let the user choose one of a number of target servers. Or you may want to
present a list of supported browsers for a suite of acceptance tests. Choice parameters let you define a set
of values that will be displayed as a drop-down list (see Figure 10.7, “Configuring a Choice parameter”).
You need to provide a list of possible values, one per line, starting with the default value.
Figure 10.7. Configuring a Choice parameter
Boolean parameters are, as you would expect, parameters that take a value of true or false. They
are presented as checkboxes.
Two more exotic parameter types, which behave a little differently to the others, are Run parameters
and File parameters.
Run parameters let you select a particular run (or build) of a given build job (see Figure 10.8,
“Configuring a Run parameter”). The user picks from a list of build run numbers. The URL of the
corresponding build run is stored in the specified parameter.
261
Figure 10.8. Configuring a Run parameter
The URL (which will look something like http://jenkins.myorg.com/job/game-of-life/197/) can be used
to obtain information or artifacts from that build run. For example, you could obtain the JAR or WAR
file archived in a previous build and run further tests with this particular binary in a separate build job.
For example, to access the WAR file of a previous build in a multimodule Maven project, the URL
would look something like this:
http://buildserver/job/game-of-life/197/artifact/gameoflife-web/target/
gameoflife.war
So, using the parameter configured in Figure 10.8, “Configuring a Run parameter”, you could access
this WAR file using the following expression:
${RELEASE_BUILD}gameoflife-web/target/gameoflife.war
File parameters let you upload a file into the build job workspace, so that it can then be used by
the build script (see Figure 10.9, “Configuring a File parameter”). Jenkins will store the file into the
specified location in the project workspace, where you can access it in your build scripts. You can use
the WORKSPACE variable to refer to the current Jenkins workspace directory, so you could manipulate the
file uploaded in Figure 10.9, “Configuring a File parameter” by using the expression ${WORKSPACE}/
deploy/app.war.
Figure 10.9. Configuring a File parameter
10.2.4. Building from a Subversion Tag
The parameterized trigger has special support for Subversion, allowing you to build against a specific
Subversion tag. This is useful if you want to run a release build using a tag generated by a previous build
262
job. For example, an upstream build job may tag a particular revision. Alternatively, you might use the
standard Maven release process (see Section 10.7.1, “Managing Maven Releases with the M2Release
Plugin”) to generate a new release. In this case, a tag with the Maven release number will automatically
be generated in Subversion.
This approach is useful for projects that need to be partially or entirely rebuilt before they can be
deployed to a given platform. For example, you may need to run the Ant or Maven build using
different properties or profiles for different platforms, so that platform-specific configuration files can
be embedded in the deployed WAR or EAR files.
You can configure a Jenkins build to run against a selected tag by using the “List Subversion Tag”
parameter type (see Figure 10.10, “Adding a parameter to build from a Subversion tag”). You just need
to provide the Subversion repository URL pointing to the tags directory of your project.
Figure 10.10. Adding a parameter to build from a Subversion tag
When you run this build, Jenkins will propose a list of tags to choose from (see Figure 10.11, “Building
from a Subversion tag”).
Figure 10.11. Building from a Subversion tag
10.2.5. Building from a Git Tag
Building from a Git tag is not as simple as doing so from a Subversion tag, though you can still use a
parameter to indicate which tag to use. Indeed, because of the very nature of Git, when Jenkins obtains
a copy of the source code from Git, it clones the Git repository, including all of the tags. Once you have
the latest version of the repository on your Jenkins server, you can then proceed to checkout a tagged
version using git checkout .
263
To set this up in Jenkins, you first need to add a String parameter to your build job (called RELEASE
in this example—see Figure 10.12, “Configuring a parameter for a Git tag”). Unlike the Subversion
support, there is no way to list the available Git tags in a drop-down list, so users will need to know
the name of the tag they want to release.
Figure 10.12. Configuring a parameter for a Git tag
Once you have added this parameter, you need to checkout the corresponding tag once the repository
has been cloned locally. So if you have a freestyle build, the first build step would be a command-line
call to Git to check out the tag referenced by the RELEASE parameter (see Figure 10.13, “Building from
a Git tag”). Of course a more portable way to do this would be to write a simple Ant or Groovy script
to do the same thing in a more OS-neutral way.
Figure 10.13. Building from a Git tag
10.2.6. Starting a Parameterized Build Job Remotely
You can also start a parameterized build job remotely, by invoking the URL of the build job. The typical
form of a parameterized build job URL is illustrated here:
264
http://jenkins.acme.org/job/myjob/buildWithParameters?PARAMETER=Value
So, in the example shown above, you could trigger a build like this:
http://jenkins.acme.org/job/parameterized-build/buildWithParameters?VERSION=1.2.3
When you use a URL to start a build job in this way, remember that the parameter names are case-
sensitive, and that the values need to be escaped (just like any other HTTP parameter). And if you are
using a Run parameter, you need to provide the name of the build job and the run number (e.g., game-
of-life#197) and not just the run number.
10.2.7. Parameterized Build Job History
Finally, it is indispensable to know what parameters were used to run a particular parameterized build.
For example, in an automated deployment build job, it is useful to know exactly what version was
actually deployed. Fortunately, Jenkins stores these values in the build history (see Figure 10.14,
“Jenkins stores what parameter values where used for each build”), so you can always go back and take
a look.
Figure 10.14. Jenkins stores what parameter values where used for each build
10.3. Parameterized Triggers
When you trigger another build job from within a parameterized build job, it is often useful to be able
to pass the parameters of the current build job to the new one. Suppose, for example, that you have an
application that needs to be tested against several different databases. As we have seen, you could do
this by setting up a parameterized build job that accepts the target database as a parameter. You may
want to kick of a series of builds, all of which will need this parameter.
If you try to do this using the conventional “Build other projects” option in the Post-Build Actions
section, it won’t work. In fact, you can’t trigger a parameterized build in this way.
However, you can do this using the Jenkins Parameterized Trigger plugin. This plugin lets you configure
your build jobs to both trigger parameterized builds, and to pass arbitrary parameters to these builds.
265
Once you install this plugin, you will find the option of “Triggering parameterized builds on other
projects” in your build job configuration page (see Figure 10.16, “Adding a parameterized trigger to a
build job”). This lets you start another build job in a number of ways. In particular, it lets you kick off
a subsequent build job, passing the current parameters to this new build job, which is impossible to do
with a normal triggered build. The best way to see how this works is through an example.
In Figure 10.15, “Jenkins stores what parameter values where used for each build” we have an initial
build job. This build job takes a single parameter, DATABASE, which specifies the database to be used
for the tests. As we have seen, the user will be prompted to enter this value whenever the build is started.
Figure 10.15. Jenkins stores what parameter values where used for each build
Now suppose we want to trigger a second build job to run more comprehensive integration tests once
this first build job has finished. However we need it to run the tests against the same database. We can
do this by setting up a parameterized trigger to start this second build job (see Figure 10.16, “Adding
a parameterized trigger to a build job”).
Figure 10.16. Adding a parameterized trigger to a build job
266
In this case, we are simple passing through the current build parameters. This second build job will
automatically be started after the first one, with the DATABASE parameter value provided by the user.
You can also fine-tune the triggering policy, by telling Jenkins when the build should be triggered.
Typically, you would only trigger a downstream build after your build has completed successfully, but
with the Parameterized Trigger plugin you can also configure builds to be triggered even if the build is
unstable, only when the build fails or ask for it to be triggered no matter what the outcome of the first
build. You can even set up multiple triggers for the same build job.
Naturally, the build job that you trigger must be a parameterized build job (as illustrated in Figure 10.17,
“The build job you trigger must also be a parameterized build job”), and you must pass through all of
the parameters it requires.