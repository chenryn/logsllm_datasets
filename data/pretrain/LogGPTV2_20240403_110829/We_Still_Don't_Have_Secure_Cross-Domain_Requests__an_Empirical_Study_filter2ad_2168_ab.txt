In addition to the access control for ori-
complex.
gins, CORS also provides ﬁne-grained access control for
HTTP methods, HTTP headers, and credentials (includ-
ing cookies, TLS client certiﬁcates, and proxy authen-
tication information). Partly for backward compatibility,
CORS classiﬁes cross-origin requests into two categories
based on request methods and headers, “simple requests”
and “non-simple requests”. A simple request must sat-
isfy all of the following three conditions. Otherwise, a
request is considered non-simple.
a) Request method is HEAD, GET or POST.
b) Request header values are not customized, except
for 9 whitelisted headers:
Accept, Accept-
Language, Content-Language, Content-Type,
DPR, Downlink, Save-Data, Viewport-Width, and
Width.
c) Content-Type header value is one of three spe-
“text/plain”, “multipart/form-data”,
ciﬁc values:
and “application/x-form-uri-encoded”.
The preﬂight
request
is
A simple cross-origin request
is considered dangerous,
request
is considered safe
and will be sent out directly by the browser. A
non-simple request
thus
requires a preﬂight
to obtain permission
from the resource owner to send the actual cross-
origin request.
initi-
ated with an OPTIONS method, and includes Ori-
gin, Access-Control-Request-Method, Access-Control-
Request-Headers headers.
The resource server in-
cludes Access-Control-Allow-Origin, Access-Control-
Allow-Method and Access-Control-Allow-Headers in its
HTTP response to indicate the allowed origins, meth-
ods, and headers respectively. The browser then checks
whether the policy in the response headers allow for
sending the actual cross-origin request.
To reduce the performance impact due to preﬂight re-
quests, CORS provides the Access-Control-Max-Age re-
sponse header to allow a browser to cache the results of
preﬂight requests. Further, additional features are also
deﬁned, e.g., Access-Control-Allow-Credentials controls
whether or not a cross-origin request should include cre-
dentials such as cookies.
3 Overview of CORS Security Analysis
Essentially,
the CORS protocol is an access control
model regulating access to cross-origin network re-
sources (including sending requests and reading re-
sponses) between browsers and servers. In this model,
a requesting website script initiates a resource access re-
quest from a user’s browser, which automatically adds
an Origin header to indicate the requester’s identity; then
the third-party website returns the access control policy;
1082    27th USENIX Security Symposium
USENIX Association
1991199419972000200320062009201220152018●●●●●●●●●●●HTML proposedJS and SOP introducedCSRF vulnerablity discoveredUS−CERT vulnerablility note on HFPA attacksJSONP proposedJSONP vulnerablity discoveredFirst CORS draft submittedCORS shipped by IE, Chrome, Firefox, SafariCORS included in WHATWG's Fetch standardCORS accepted as W3C recommendationW3C CORS proposed obsoleteFinally, the browser enforces the access control policy to
determine whether the requester can access the requested
network resources. This section presents an overview of
our study.
3.1 Threat Model
We consider two types of attackers: web attackers and
active network attackers. Web attackers only need to
trick a victim into clicking a link to execute malicious
JavaScript in the victim’s browser, while active network
attackers need to manipulate the victim’s network trafﬁc.
Unless otherwise speciﬁed, attacks in this paper can be
launched by web attackers.
3.2 Methodology
We studied speciﬁcations including W3C’s CORS stan-
dard [38], WHATWG’s Fetch standard [37], and CORS-
related discussions in W3C mailing lists [22] to learn
how CORS is designed and its security considerations.
We also examined CORS implementations including 5
major browsers and 11 popular open-source web frame-
works to understand how CORS features are imple-
mented in practice. In the course of doing so, we iden-
tiﬁed potential interactions between CORS features and
known attacks (speciﬁc and general) and their implica-
tions.
Furthermore, we measure CORS policies of real-
world websites to evaluate CORS deployment in the
wild. We conducted a large scale measurement on Alexa
Top 50,000 websites, including their 97,199,966 distinct
sub-domains. For each domain, we sent cross-origin
requests with different requesting identities to examine
their CORS policies in response headers.
3.3 Summary of Analysis Results
Through the analysis, we found a number of CORS-
related security issues, which we can classify into three
high-level categories, per Table 1.
1) Incomplete reference monitor. CORS allows
“simple requests” to be sent freely by default, to keep
consistent with previous policy (cross-origin GET and
POST requests are allowed by default). Yet, the scope
of simple CORS requests is in fact beyond previous ca-
pabilities in a number of subtle ways. It turns out that
the new by-default sending capability of CORS can be
exploited by web attackers to launch a variety of attacks
that are previously not able to carry out in a web attacker
setting.
2) Trust dependency. A domain with strong security
mechanisms may allow CORS access from a weaker do-
main. A web/network attacker can compromise a weak
domain and issue CORS requests to obtain sensitive in-
formation from the strong security domain.
3) Policy complexity. Because the CORS itself policy
cannot be expressed in the simple form, many websites
implement error-prone dynamic CORS policy generation
at the application level. We found that a variety of mis-
conﬁgurations of CORS policies are due to these com-
plex policies.
In the following three sections, we will describe these
three categories of problems in detail.
4 Overly Permissive Sending Permission
The cross-origin sending permission of default SOP al-
ready poses signiﬁcant security challenges, leading to
vulnerabilities such as CSRF and HFPA attacks (Sec-
tion 2.2). Absent consideration of backward compatibil-
ity, CORS could have addressed all cross-origin access
to solve and unify the defenses against CSRF, HFPA, and
other cross-origin network resource access at the proto-
col level. But instead CORS kept compatibility with the
previous policy.
CORS allows “simple requests” to be sent freely by
default in its new JavaScript interfaces (e.g., XML-
HttpRequest Level2, fetch). However, these new inter-
faces (referred to as “CORS interfaces” subsequently) in
fact implicitly further relax sending permissions, unin-
tentionally allowing malicious customization of HTTP
headers and bodies in CORS simple requests.
4.1 Crafting Request Headers
Before the advent of CORS, cross-origin requests could
only be sent using header ﬁelds and values ﬁxed by the
browser. CORS interfaces provide new capabilities that
allow JavaScript to modify 9 CORS whitelisted headers
(See Section 2.4). Further, CORS imposes few limita-
tions on the values and sizes of these headers. Thus, an
attacker can craft these headers with malicious content to
deliver attack payloads.
CORS imposes few limitations on header val-
ues. RFC 7231 [29] provides clear BNF format re-
quirements for 4 out of 9 CORS whitelisted head-
ers: Accept, Accept-Language, Content-Language and
Content-Type. For example, standard-compliant Accept
header values should be like “text/html,application/xml”.
CORS imposes no format restrictions on any whitelisted
headers, except Content-Type. CORS works on the
top of HTTP, so when implementing CORS interfaces,
browsers should restrict at
those 4 whitelisted
header values according to HTTP’s BNF rules. How-
ever, in our testing of ﬁve mainstream browsers (Chrome,
Edge, Firefox, IE, Safari), all except Safari lack any
restrictions on any headers other than Content-Type.
least
USENIX Association
27th USENIX Security Symposium    1083
Categories
Overly permissive
sending permission
.
Risky trust
dependency
Policy complexity
Table 1: Overview of CORS security problems
Problems
Attacks
Overly permissive header formats and values
Few limitations on header size
Overly ﬂexible body format
Few limitations on body value
HTTPS domain trust their own HTTP domain
Trust in other domains
Poor expressiveness of access control policies
Forgeable “null” Origin values
Security mechanism complexity
Complex interactions with caching
RCE via crafting headers
Infer privacy information for any website
File upload CSRF
Attack binary protocol services
MITM attacks on HTTPS websites
Information theft or account hijacking
Information theft or account hijacking
Information theft or account hijacking
Information theft or account hijacking
Cache poisoning
For example, their values can be set to “(){:;};”, an at-
tack payload for exploiting the Shellshock vulnerabil-
ity [24]. Safari restricts the values of Accept, Accept-
Language and Content-Language, disallowing some de-
limiter characters like “(”,“{”.
In addition, although the ﬁve browsers follow CORS
standards in limiting Content-Type to three speciﬁc val-
ues (“text/plain”, “multipart/form-data”,“application/x-
form-url-encoded”), these restrictions can be bypassed.
We found that all of them preﬁx-match the three values
and ignore the remaining values beyond the ﬁrst comma
or semicolon. Thus, an attacker can still craft malicious
content in Content-Type headers by appending an attack
payload to a valid value.
These implementation ﬂaws open new attack surface
in that a web attacker can manipulate a victim’s browser
to craft exploitation payloads using a CORS simple re-
quest, using the browser as stepping-stone to compro-
mise vulnerable yet nominally internal-only services.
Case study:
In order to demonstrate the threat, we
conducted an experiment to exploit an internal service
by crafting a malicious Content-Type header. We set up
a Apache Struts environment in our local network, one
with the s2-045 vulnerability (CVE-2017-5638) [25].
This vulnerability was caused by incorrect parsing of
Content-Type header, and led to remote code execution.
As the vulnerable service was deployed in our internal
network, it is supposed to be unexploitable by web at-
tackers from an external network. However, with the
help of CORS, we conﬁrmed that an attacker can set up
a web page that sends cross-origin requests with crafted
malicious payload via a Content-Type header. Once an
intranet victim visits this page, the vulnerability is trig-
gered. In our experiment, this attack enabled us to obtain
a shell on the internal server.
CORS imposes few limitations on header sizes.
There is no explicit limit on request header sizes in ei-
ther the HTTP or CORS standards. We tested ﬁve ma-
jor browsers and found all of them allow for at least
16MB of one or more headers in CORS interfaces. When
we set headers to very large values (e.g., 1 GB), the
browsers produced “not enough memory” errors, rather
than “header size too large” errors. This is much larger
than request size limit enforced by other web compo-
nents (e.g., web servers). Table 2 summarizes different
header size limitations for ﬁve major browsers and pop-
ular web servers in default conﬁgurations.
Table 2: Header size limitations for browsers and servers
(single/all headers)
Browser
Chrome
Edge
Firefox
IE
Safari
.
Limitation
>16MB/>16MB
>16MB/>16MB
>16MB/>16MB
>16MB/>16MB
>16MB/>16MB
Server
Apache
IIS
Nginx
Tomcat
Squid
Limitation
8KB/<96KB
16KB/16KB
8KB/<30KB
8KB/8KB
64KB/64KB
Case Study: web attackers can exploit header size
differences between browsers and web servers to launch
side-channel attacks, remotely determining the presence
of a victim’s cookies on any website. To carry out
this attack, an attacker ﬁrst measures the header size
limit of a target web server by directly issuing requests
with increasing-size headers until receiving a 400 Bad
Request response. Then the attacker sends “simple re-
quest” in the victim’s browser with crafted header values
so that the header size is slightly smaller than the mea-
sured limit.
If a cookie is present, the cookie will be
automatically attached in the request. The total header
size will exceed the limitation, resulting a 400 Bad
Request response. In the absence of cookies, the target
server will return a 200 OK response.
In fact, the attacker cannot directly observe whether
a response is 200 or 400 because browsers have nor-
malized such low-level information for security consid-
erations. However, the attacker can utilize timing side-
channels to differentiate the response status. One general
1084    27th USENIX Security Symposium
USENIX Association
timing channel is response time. If the attacker issues the
simple request towards a large ﬁle or a time-consuming
URL, a 200 response will be signiﬁcantly slower than a
400 response. In Chrome, the Performance.getEntries()
API directly exposes whether or not a request is success-
ful: if a response has status code 400, the API will return
empty response time.
Attackers can further infer more details about victim’s
cookies, such as the size of cookies with speciﬁc path
attribute by comparing cookie size under different direc-
tories, or the size of cookies with the secure ﬂag by com-
paring the cookie size in HTTP and HTTPS requests.
As web applications usually use different amounts and
attributes of cookie to keep different states for clients,
cookie size information in different dimensions can po-
tentially indicate a victim’s detailed status on target web-
site, such as whether the user has visited, logged-in, or is
administrator on the target website.
The presence of a cookie can leak private informa-
tion about the victim. For example, an attacker might
remotely infer the victim’s health conditions by looking
for visits to particular disease or hospital websites; infer
political preferences by visits to candidate websites; or
infer ﬁnancial considerations by whether the victim has
an account on lending or investment websites.
4.2 Crafting Request Bodies
Before CORS, JavaScript could only send cross-origin
POST requests via automatic form submission. The
browser will automatically encode the body of a request
before sending, limiting the format and value of POST
body data. CORS allows JavaScript to issue cross-origin
“simple requests” with neither format nor value limita-
tions on request bodies, allowing attackers to craft binary
data in any format.
CORS lacks limits on body format. Standard HTML
forms restrict the format of POST data. HTML form
data is automatically encoded by browsers in three en-
coding types:
“application/x-www-form-urlencoded”,
“text/plain”, or “multipart/form-data”. For the ﬁrst type,