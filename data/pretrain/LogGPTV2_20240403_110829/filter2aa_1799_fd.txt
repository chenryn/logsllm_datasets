disks composed entirely of fast disks (SSD, NVMe, and PM), slow disks, or even composed of all four 
supported disk types (hybrid configuration). In case of hybrid deployments, where a mix of different 
classes of devices are used, Spaces supports two features that allow the cluster to be fast and efficient:
I 
Server cache: Storage Spaces is able to hide a fast drive from the cluster and use it as a cache for
the slower drives. Spaces supports PM disks to be used as a cache for NVMe or SSD disks, NVMe
disks to be used as cache for SSD disks, and SSD disks to be used as cache for classical rotating
HDD disks. Unlike tiered disks, the cache is invisible to the file system that resides on the top of 
the virtual volume. This means that the cache has no idea whether a file has been accessed more
recently than another file. Spaces implements a fast cache for the virtual disk by using a log that
keeps track of hot and cold blocks. Hot blocks represent parts of files (files’ extents) that are often
accessed by the system, whereas cold blocks represent part of files that are barely accessed. The
log implements the cache as a queue, in which the hot blocks are always at the head, and cold
blocks are at the tail. In this way, cold blocks can be deleted from the cache if it’s full and can be
maintained only on the slower storage; hot blocks usually stay in the cache for a longer time.
I 
Tiering: Spaces can create tiered disks, which are managed by ReFS and NTFS. Whereas ReFS sup-
ports SMR disks, NTFS only supports tiered disks provided by Spaces. The file system keeps track of 
the hot and cold blocks and rotates the bands based on the file’s usage (see the “ReFS support
for tiered volumes and SMR” section earlier in this chapter). Spaces provides to the file system
driver support for pinning, a feature that can pin a file to the fast tier and lock it in the tier until
it will be unpinned. In this case, no band rotation is ever executed. Windows uses the pinning
feature to store the new files on the fast tier while performing an OS upgrade.
As already discussed previously, one of the main goals of Storage Spaces is flexibility. Spaces 
supports the creation of virtual disks that are extensible and consume only allocated space in the 
CHAPTER 11
Caching and file systems
773
underlying cluster’s devices; this kind of virtual disk is called thin provisioned. Unlike fixed provisioned 
disks, where all of the space is allocated to the underlying storage cluster, thin provisioned disks al-
locate only the space that is actually used. In this way, it’s possible to create virtual disks that are much 
larger than the underlying storage cluster. When available space gets low, a system administrator can 
dynamically add disks to the cluster. Storage Spaces automatically includes the new physical disks to 
the pool and redistributes the allocated blocks between the new disks.
Storage Spaces supports thin provisioned disks through slabs. A slab is a unit of allocation, which is 
similar to the ReFS container concept, but applied to a lower-level stack: the slab is an allocation unit of 
a virtual disk and not a file system concept. By default, each slab is 256 MB in size, but it can be bigger 
in case the underlying storage cluster allows it (i.e., if the cluster has a lot of available space.) Spaces 
core keeps track of each slab in the virtual disk and can dynamically allocate or free slabs by using its 
own allocator. It’s worth noting that each slab is a point of reliability: in mirrored and parity configura-
tions, the data stored in a slab is automatically replicated through the entire cluster.
When a thin provisioned disk is created, a size still needs to be specified. The virtual disk size will be 
used by the file system with the goal of correctly formatting the new volume and creating the needed 
metadata. When the volume is ready, Spaces allocates slabs only when new data is actually written to 
the disk—a method called allocate-on-write. Note that the provisioning type is not visible to the file 
system that resides on top of the volume, so the file system has no idea whether the underlying disk is 
thin or fixed provisioned.
Spaces gets rid of any single point of failure by making usage of mirroring and pairing. In big stor-
age clusters composed of multiple disks, RAID 6 is usually employed as the parity solution. RAID 6 al-
lows the failure of a maximum of two underlying devices and supports seamless reconstruction of data 
without any user intervention. Unfortunately, when the cluster encounters a single (or double) point of 
failure, the time needed to reconstruct the array (mean time to repair or MTTR) is high and often causes 
serious performance penalties. 
Spaces solves the problem by using a local reconstruction code (LCR) algorithm, which reduces the 
number of reads needed to reconstruct a big disk array, at the cost of one additional parity unit. As 
shown in Figure 11-96, the LRC algorithm does so by dividing the disk array in different rows and by 
adding a parity unit for each row. If a disk fails, only the other disks of the row needs to be read. As a 
result, reconstruction of a failed array is much faster and more efficient.
LRC
RAID 6
D
0
D
2
D
4
P
0
P
1
P
2
D
1
D
3
D
5
D
0
D
1
D
2
D
3
D
4
D
5
P
0
P
1
FIGURE 11-96 RAID 6 and LRC parity.
Figure 11-96 shows a comparison between the typical RAID 6 parity implementation and the LRC 
implementation on a cluster composed of eight drives. In the RAID 6 configuration, if one (or two) 
disk(s) fail(s), to properly reconstruct the missing information, the other six disks need to be read; in 
LRC, only the disks that belong to the same row of the failing disk need to be read.
774
CHAPTER 11
Caching and file systems
EXPERIMENT: Creating tiered volumes
Storage Spaces is supported natively by both server and client editions of Windows 10. You can 
create tiered disks using the graphical user interface, or you can also use Windows PowerShell. 
In this experiment, you will create a virtual tiered disk, and you will need a workstation that, 
other than the Windows boot disk, also has an empty SSD and an empty classical rotating disk 
(HDD). For testing purposes, you can emulate a similar configuration by using HyperV. In that 
case, one virtual disk file should reside on an SSD, whereas the other should reside on a classical 
rotating disk.
First, you need to open an administrative Windows PowerShell by right-clicking the Start 
menu icon and selecting Windows PowerShell (Admin). Verify that the system has already iden-
tified the type of the installed disks:
PS C:\> Get-PhysicalDisk | FT DeviceId, FriendlyName, UniqueID, Size, MediaType, CanPool 
DeviceId FriendlyName
UniqueID
Size MediaType CanPool 
-------- ------------
--------
---- --------- ------- 
2
Samsung SSD 960 EVO 1TB eui.0025385C61B074F7 1000204886016 SSD
False 
0
Micron 1100 SATA 512GB  500A071516EBA521
512110190592 SSD
True 
1
TOSHIBA DT01ACA200
500003F9E5D69494     2000398934016 HDD
True
In the preceding example, the system has already identified two SSDs and one classical 
rotating hard disk. You should verify that your empty disks have the CanPool value set to True.
Otherwise, it means that the disk contains valid partitions that need to be deleted. If you’re test-
ing a virtualized environment, often the system is not able to correctly identify the media type of 
the underlying disk.
PS C:\> Get-PhysicalDisk | FT DeviceId, FriendlyName, UniqueID, Size, MediaType, CanPool
DeviceId FriendlyName
UniqueID
Size MediaType   CanPool
-------- ------------
--------
---- ---------   -------
2
Msft Virtual Disk 600224802F4EE1E6B94595687DDE774B  137438953472 Unspecified    True
1
Msft Virtual Disk 60022480170766A9A808A30797285D77 1099511627776 Unspecified    True
0
Msft Virtual Disk 6002248048976A586FE149B00A43FC73  274877906944 Unspecified   False
In this case, you should manually specify the type of disk by using the command 
Set-PhysicalDisk -UniqueId (Get-PhysicalDisk)[].UniqueID -MediaType ,
where IDX is the row number in the previous output and MediaType is SSD or HDD, depending 
on the disk type. For example:
PS C:\> Set-PhysicalDisk -UniqueId (Get-PhysicalDisk)[0].UniqueID -MediaType SSD
PS C:\> Set-PhysicalDisk -UniqueId (Get-PhysicalDisk)[1].UniqueID -MediaType HDD
PS C:\> Get-PhysicalDisk | FT DeviceId, FriendlyName, UniqueID, Size, MediaType, CanPool
DeviceId FriendlyName
UniqueID
Size MediaType   CanPool
-------- ------------
--------
---- ---------   -------
2
Msft Virtual Disk 600224802F4EE1E6B94595687DDE774B  137438953472 SSD
True
1
Msft Virtual Disk 60022480170766A9A808A30797285D77 1099511627776 HDD
True
0
Msft Virtual Disk 6002248048976A586FE149B00A43FC73  274877906944 Unspecified   False
EXPERIMENT: Creating tiered volumes
Storage Spaces is supported natively by both server and client editions of Windows 10. You can 
create tiered disks using the graphical user interface, or you can also use Windows PowerShell. 
In this experiment, you will create a virtual tiered disk, and you will need a workstation that, 
other than the Windows boot disk, also has an empty SSD and an empty classical rotating disk 
(HDD). For testing purposes, you can emulate a similar configuration by using HyperV. In that 
case, one virtual disk file should reside on an SSD, whereas the other should reside on a classical 
rotating disk.
First, you need to open an administrative Windows PowerShell by right-clicking the Start 
menu icon and selecting Windows PowerShell (Admin). Verify that the system has already iden-
tified the type of the installed disks:
PS C:\> Get-PhysicalDisk | FT DeviceId, FriendlyName, UniqueID, Size, MediaType, CanPool
DeviceId FriendlyName
UniqueID
Size MediaType CanPool
-------- ------------
--------
---- --------- -------
2
Samsung SSD 960 EVO 1TB eui.0025385C61B074F7 1000204886016 SSD
False
0
Micron 1100 SATA 512GB  500A071516EBA521
512110190592 SSD
True
1
TOSHIBA DT01ACA200
500003F9E5D69494     2000398934016 HDD
True
In the preceding example, the system has already identified two SSDs and one classical 
rotating hard disk. You should verify that your empty disks have the CanPool value set to 
CanPool value set to 
CanPool
True.
Otherwise, it means that the disk contains valid partitions that need to be deleted. If you’re test-
ing a virtualized environment, often the system is not able to correctly identify the media type of 
the underlying disk.
PS C:\> Get-PhysicalDisk | FT DeviceId, FriendlyName, UniqueID, Size, MediaType, CanPool
DeviceId FriendlyName
UniqueID
Size MediaType   CanPool
-------- ------------
--------
---- ---------   -------
2
Msft Virtual Disk 600224802F4EE1E6B94595687DDE774B  137438953472 Unspecified    True
1
Msft Virtual Disk 60022480170766A9A808A30797285D77 1099511627776 Unspecified    True
0
Msft Virtual Disk 6002248048976A586FE149B00A43FC73  274877906944 Unspecified   False
In this case, you should manually specify the type of disk by using the command 
Set-PhysicalDisk -UniqueId (Get-PhysicalDisk)[].UniqueID -MediaType ,
where IDX is the row number in the previous output and MediaType is SSD or HDD, depending 
IDX is the row number in the previous output and MediaType is SSD or HDD, depending 
IDX
on the disk type. For example:
PS C:\> Set-PhysicalDisk -UniqueId (Get-PhysicalDisk)[0].UniqueID -MediaType SSD
PS C:\> Set-PhysicalDisk -UniqueId (Get-PhysicalDisk)[1].UniqueID -MediaType HDD
PS C:\> Get-PhysicalDisk | FT DeviceId, FriendlyName, UniqueID, Size, MediaType, CanPool
DeviceId FriendlyName
UniqueID
Size MediaType   CanPool
-------- ------------
--------
---- ---------   -------
2
Msft Virtual Disk 600224802F4EE1E6B94595687DDE774B  137438953472 SSD
True
1
Msft Virtual Disk 60022480170766A9A808A30797285D77 1099511627776 HDD
True
0
Msft Virtual Disk 6002248048976A586FE149B00A43FC73  274877906944 Unspecified   False
CHAPTER 11
Caching and file systems
775
At this stage you need to create the Storage pool, which is going to contain all the physical 
disks that are going to compose the new virtual disk. You will then create the storage tiers. In this 
example, we named the Storage Pool as DefaultPool:
PS C:\> New-StoragePool -StorageSubSystemId (Get-StorageSubSystem).UniqueId -FriendlyName 
DeafultPool -PhysicalDisks (Get-PhysicalDisk -CanPool $true) 
FriendlyName OperationalStatus HealthStatus IsPrimordial IsReadOnly    Size AllocatedSize 
------------ ----------------- ------------ ------------ ----------    ---- ------------- 
Pool         OK                Healthy      False
1.12 TB
512 MB 
PS C:\> Get-StoragePool DefaultPool | New-StorageTier -FriendlyName SSD -MediaType SSD 
...
PS C:\> Get-StoragePool DefaultPool | New-StorageTier -FriendlyName HDD -MediaType HDD 
...
Finally, we can create the virtual tiered volume by assigning it a name and specifying the 
correct size of each tier. In this example, we create a tiered volume named TieredVirtualDisk 
composed of a 120-GB performance tier and a 1,000-GB capacity tier:
PS C:\> $SSD = Get-StorageTier -FriendlyName SSD 
PS C:\> $HDD = Get-StorageTier -FriendlyName HDD 
PS C:\> Get-StoragePool Pool | New-VirtualDisk -FriendlyName "TieredVirtualDisk" 
-ResiliencySettingName "Simple" -StorageTiers $SSD, $HDD -StorageTierSizes 128GB, 1000GB
...
PS C:\> Get-VirtualDisk | FT FriendlyName, OperationalStatus, HealthStatus, Size,
FootprintOnPool
FriendlyName
OperationalStatus HealthStatus
Size FootprintOnPool 
------------
----------------- ------------
---- --------------- 
TieredVirtualDisk OK
Healthy
1202590842880   1203664584704
After the virtual disk is created, you need to create the partitions and format the new volume 
through standard means (such as by using the Disk Management snap-in or the Format tool). 
After you complete volume formatting, you can verify whether the resulting volume is really a 
tiered volume by using the fsutil.exe tool:
PS E:\> fsutil tiering regionList e: 
Total Number of Regions for this volume: 2 
Total Number of Regions returned by this operation: 2 
   Region # 0: 
Tier ID: {448ABAB8-F00B-42D6-B345-C8DA68869020} 
Name: TieredVirtualDisk-SSD 
Offset: 0x0000000000000000 
Length: 0x0000001dff000000 
   Region # 1: 
Tier ID: {16A7BB83-CE3E-4996-8FF3-BEE98B68EBE4} 
Name: TieredVirtualDisk-HDD 
Offset: 0x0000001dff000000 
Length: 0x000000f9ffe00000
At this stage you need to create the Storage pool, which is going to contain all the physical 