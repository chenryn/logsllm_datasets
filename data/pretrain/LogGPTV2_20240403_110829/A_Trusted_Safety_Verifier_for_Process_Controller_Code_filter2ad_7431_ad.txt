e
t
a
t
S
%
1000"
100"
10"
1"
1"
1$
0.1$
0.01$
%
)
s
d
n
o
c
e
s
(
%
e
m
T
i
0.001$
1$
2$
3$
4$
5$
6$
7$
8$
9$
10$
11$
12$
13$
14$
Bounded%Model%Genera4on%Depth%
(d) Model Translation
100$
10$
1$
0.1$
Desktop$Computer$
Raspberry$Pi$
&
&
i
e
m
T
g
n
i
k
c
e
h
C
&
l
&
)
s
d
n
o
c
e
s
(
e
d
o
M
0.01$
0.001$
1$
2$
3$
4$
5$
6$
7$
8$
9$
10$
11$
12$
13$
14$
Bounded&Model&Genera8on&Depth&
(e) Symbolic Model Checking
Fig. 5. Performance Analysis of the Trafﬁc Light Control System.
1$
2$
3$
4$
5$
6$
7$
8$
9$
10$
Bounded%Model%Genera4on%Depth%
(a) Initial Model Creation
Desktop$Computer$
Raspberry$Pi$
1$
2$
3$
4$
5$
10$
Bounded!Model!Genera5on!Depth!
6$
7$
8$
9$
11$
12$
13$
14$
11$
12$
13$
14$
(b) Temporal Execution Graph Generation
10000"
Desktop"Computer"
Raspberry"Pi"
2"
3"
4"
5"
6"
7"
8"
9"
10"
11"
12"
13"
14"
Bounded%Model%Genera3on%Depth%
(c) Temporal Execution Graph Cardinality
Desktop$Computer$
Raspberry$Pi$
•
•
•
•
•
•
PID controller. (Proportional Integral Derivative) The
most common type of controller for real-valued states.
A PID controller attempts to minimize the error be-
tween the actual state, e.g., the temperature in a room,
and a desired state. This is done by adjusting a con-
trolled quantity, e.g., heating element, by a weighted
sum of the error, and its integral and derivative.
•
Safety requirement: (i.) The controlled quantity
may not exceed a constant value.
Trafﬁc light. Trafﬁc lights at a four way intersection
are governed by Boolean output signals, with a single
Boolean value for each color and direction. Light
changes are timer-based.
•
Safety requirements:
(i.) Orthogonal green
lights should not be ON simultaneously, i.e.,
G¬(g1^g2) where Boolean variable gi denotes
the i-th green light. (ii.) A red light should
always be proceeded by a yellow light.
Assembly way. Items are moved down an assembly
line by a belt. A light barrier detects when an item
has arrived at an assembly station, and an arm moves
to hold the item in place. A part is then assembled
with the item, and the barrier removed. The process
repeats further down the line.
•
Safety requirements: (i.) No arm can come
down until the belt stops moving. (ii.) The belt
should not move while the arm is down.
Stacker. A series of items are loaded onto a platform
by a conveyor belt. Once a light barrier detects that the
platform is full, the items are combined by a melter,
and the resulting product is pushed onto a lift and
lowered for removal.
•
Safety requirements: (i.) The product should
never be pushed out while the melter is work-
ing. (ii.) No more items should be loaded once
the platform is full.
Sorter. A conveyor belt passes packages by a barcode
scanner. Depending on the scanned code, one of three
arms extends to push the package into an appropriate
bin.
•
Safety requirements: (i.) No more than one arm
should extend at each time instant. (ii.) An
arm extends only after the barcode scanning
is complete.
Rail Interlocking. As opposed to the other programs,
which drive the actions of a system, a railway inter-
locking checks that a sequence of engineer commands
will not cause conﬂicting routes between two or more
trains.
8Speciﬁcally, the Instruction List samples run on Siemens and Rockwell
PLCs accounting for 50% of PLC market share [28].
9
S0
True
S1
True
S2
True
S3
~((~ X41) && X43 && (~X44)) 
~((~ X41) && X43 && (~X44)) 
~((~ X41) && X49 && (~X44)) 
S4
S5
S6
Fig. 6. Generated Temporal Execution Graph (model checking bound = 4).
•
Safety requirements: (i.) There should never be
conﬂicting routes. (ii.) No inputs are read after
the checking procedure starts execution.
C. Example Safety Violation
To demonstrate the full usage of TSV, we show the
steps that occur when attempting to upload code containing
a safety violation. For this example, we modiﬁed the trafﬁc
light controller to switch both directions to green after cycling
through the correct states once. Speciﬁcally, we appended the
following code to the trafﬁc light program.
... original program ...
RESET
A M 0.5
JC ATTACK
JMP END
ATTACK:
SET
= Q 0.0
= Q 0.3
END: NOP
;; Reset logic accumulator.
;; Check for trigger state.
;; Jump to attack code (if triggered).
;; Skip attack code.
;; Set first green light.
;; Set second green light.
The malicious program was analyzed by TSV against an
interlock property prohibiting both lights from being simul-
taneously green. The model checker produced the concrete
counterexample:
Cycle
1
2
1
f
2
f
Timer
3
4
f
f
5
f
6
t
f
This states that a violation was detected on the scan cycle
where light timers 1-5 are false, and timer 6 switches from
true to false. The next step is to identify the line of code
where the violation occured. First, the ILIL interpreter preloads
the concrete counterexample values for each timer variable.
Next, the ILIL version of the program is instrumented with an
assertion of the violated property after each line:
assert load(mem, [Q::0::0::0::0]) == 0 : reg1_t ||
load(mem, [Q::0::0::0::3]) == 0 : reg1_t;
This simply states that at least one of the output memory loca-
tions for green lights must be off. The instrumented program
is then executed with the concrete timer values. The assertion
fails exactly after the line that stores 1 in [Q::0::0::0::3].
If the operator so desired, an execution trace of instructions
and memory values leading up to this point could also be
produced. Even if the original IL program is obfuscated, the
ability to execute on a concrete counterexample will quickly
point system operators to the offending instruction.
The example above veriﬁes the state invariants for a simple
safety requirement only for presentation clarity. However, as
discussed later, TSV veriﬁed our case study PLC programs for
more complex temporal safety requirements (Section VI-B)
using the execution history information across input-output
scan cycles that was encoded in the generated TEG graph.
D. Performance
We measured the run times for individual TSV components
while checking the safety properties for each test case. Figure 5
shows the results for a sample use case (the trafﬁc light control
system) for up to 14 steps during bounded model generation.
This allows for exploration of control systems with up to 14
consecutive unique state outputs. This is signiﬁcantly more
than Stuxnet’s malicious code, which used a state machine with
three unique outputs to manipulate centrifuge speed [11]9. One
could imagine an attack that evades detection by counting to
15 before violating a safety property. In this case, any control
logic capable of producing a non-repeating chain of more than
14 unique outputs could also be rejected. This bound could
be set higher if required for the legitimate plant functionality.
The results are shown for running TSV on a desktop computer
with a 3.4 GHz processor and Raspberry Pi with a 700 MHz
processor.
The initial processing of the symbolic scan cycle is shown
in Figure 5(a). For all cases,
this step requires less than
22ms. Once TSV creates the initial PLC program models,
it starts building the temporal execution graph, which is the
main source of overhead. Figure 5(b) shows how long TSV
needs to complete the graph generation phase. The majority
of time in this phase is spent performing recursive exploration
of the TEG to set concrete values for atomic propositions.
A complete graph generation for 14 input-output scans takes
2 and 17 minutes on a desktop computer and Raspberry
Pi respectively. However, as expected, trimming the analysis
horizon limit to 10 reduces the graph generation time re-
quirement signiﬁcantly—down to < 10 seconds on a desktop
computer and 1 minute on Raspberry Pi. Figure 5(c) shows
the corresponding state space sizes for the generated graphs.
9We are currently working with several parties to obtain a disassembled
copy of Stuxnet’s PLC code.
10
%
)
s
d
n
o
c