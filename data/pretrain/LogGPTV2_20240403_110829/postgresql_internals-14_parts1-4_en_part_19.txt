explorebufferdistributiondependingontheirusage:
=> SELECT usagecount, count(*)
FROM pg_buffercache
GROUP BY usagecount
ORDER BY usagecount;
usagecount | count
−−−−−−−−−−−−+−−−−−−−
1 | 4128
2 | 50
3 | 4
4 | 4
5 | 73
| 12125
(6 rows)
N usage count values correspond to free buffers. They are quite expected in
thiscasebecausetheserverwasrestartedandremainedidlemostofthetime.The
majorityoftheusedbufferscontainpagesofthesystemcatalogtablesreadbythe
backendtofillitssystemcatalogcacheandtoperformqueries.
Wecancheckwhatfractionofeachrelationiscached,andwhetherthisdataishot
(apageisconsideredhothereifitsusagecountisbiggerthanone):
183
Chapter9 BufferCache
=> SELECT c.relname,
count(*) blocks,
round( 100.0 * 8192 * count(*) /
pg_table_size(c.oid) ) AS "% of rel",
round( 100.0 * 8192 * count(*) FILTER (WHERE b.usagecount > 1) /
pg_table_size(c.oid) ) AS "% hot"
FROM pg_buffercache b
JOIN pg_class c ON pg_relation_filenode(c.oid) = b.relfilenode
WHERE b.reldatabase IN (
0, -- cluster-wide objects
(SELECT oid FROM pg_database WHERE datname = current_database())
)
AND b.usagecount IS NOT NULL
GROUP BY c.relname, c.oid
ORDER BY 2 DESC
LIMIT 10;
relname | blocks | % of rel | % hot
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−+−−−−−−−−+−−−−−−−−−−+−−−−−−−
big | 4097 | 100 | 1
pg_attribute | 30 | 48 | 47
big_pkey | 14 | 100 | 0
pg_proc | 13 | 12 | 6
pg_operator | 11 | 61 | 50
pg_class | 10 | 59 | 59
pg_proc_oid_index | 9 | 82 | 45
pg_attribute_relid_attnum_index | 8 | 73 | 64
pg_proc_proname_args_nsp_index | 6 | 18 | 6
pg_amproc | 5 | 56 | 56
(10 rows)
Thisexampleshowsthatthebigtableanditsindexarefullycached,buttheirpages
arenotbeingactivelyused.
Analyzingdatafromdifferentangles,youcangainsomeusefulinsights.However,
makesuretofollowthesesimpleruleswhenrunningpg_buffercachequeries:
• Repeatsuchqueriesseveraltimessincethereturnedfigureswillvarytosome
extent.
• Donotrunsuchqueriesnon-stopbecausethepg_buffercacheextensionlocks
theviewedbuffers,evenifonlybriefly.
184
9.7 CacheWarming
9.7 Cache Warming
After a server restart,the cache requires some time to warm up,that is,to accu-
mulatetheactivelyuseddata.Itmaybehelpfultocachecertaintablesrightaway,
andthepg_prewarmextensionservesexactlythispurpose:
=> CREATE EXTENSION pg_prewarm;
Apart from loading tables into the buffer cache (or into the  cache only), this v.
extension can write the current cache state to disk and then restore it after the
serverrestart.Toenablethisfunctionality,youhavetoaddthisextension’slibrary
toshared_preload_librariesandrestarttheserver:
=> ALTER SYSTEM SET shared_preload_libraries = 'pg_prewarm';
postgres$ pg_ctl restart -l /home/postgres/logfile
If the pg_prewarm.autoprewarm setting has not changed, a process called auto- on
prewarm leaderwillbestartedautomaticallyaftertheserverisreloaded; oncein
pg_prewarm.autoprewarm_intervalseconds,thisprocesswillflushthelistofcached 300s
pagestodisk(usingoneofthemax_parallel_processesslots).
postgres$ ps -o pid,command \
--ppid `head -n 1 /usr/local/pgsql/data/postmaster.pid` | \
grep prewarm
23279 postgres: autoprewarm leader
Nowthattheserverhasbeenrestarted,thebigtableisnotcachedanymore:
=> SELECT count(*)
FROM pg_buffercache
WHERE relfilenode = pg_relation_filenode('big'::regclass);
count
−−−−−−−
0
(1 row)
185
Chapter9 BufferCache
Ifyouhavewell-groundedassumptionsthatthewholetableisgoingtobeactively
usedanddiskaccesswillmakeresponsetimesunacceptablyhigh,youcanloadthis
tableintothebuffercacheinadvance:
=> SELECT pg_prewarm('big');
pg_prewarm
−−−−−−−−−−−−
4097
(1 row)
=> SELECT count(*)
FROM pg_buffercache
WHERE relfilenode = pg_relation_filenode('big'::regclass);
count
−−−−−−−
4097
(1 row)
Thelistofpagesisdumpedintothe/autoprewarm.blocksfile. Youcanwait
untiltheautoprewarm leadercompletesforthefirsttime,butwewillinitiatethe
dumpmanually:
=> SELECT autoprewarm_dump_now();
autoprewarm_dump_now
−−−−−−−−−−−−−−−−−−−−−−
4224
(1 row)
Thenumberofflushedpagesisbiggerthanbecausealltheusedbuffersare
takenintoaccount. Thefileiswritteninatextformat; itcontainsthesofthe
database,tablespace,andfile,aswellastheforkandsegmentnumbers:
postgres$ head -n 10 /usr/local/pgsql/data/autoprewarm.blocks
>
0,1664,1262,0,0
0,1664,1260,0,0
16391,1663,1259,0,0
16391,1663,1259,0,1
16391,1663,1259,0,2
16391,1663,1259,0,3
16391,1663,1249,0,0
16391,1663,1249,0,1
16391,1663,1249,0,2
186
9.8 LocalCache
Let’srestarttheserveragain.
postgres$ pg_ctl restart -l /home/postgres/logfile
Thetableappearsinthecacherightaway:
=> SELECT count(*)
FROM pg_buffercache
WHERE relfilenode = pg_relation_filenode('big'::regclass);
count
−−−−−−−
4097
(1 row)
Itisagaintheautoprewarmleaderthatdoesallthepreliminarywork: itreadsthe
file,sortsthepagesbydatabases,reordersthem(sothatdiskreadshappensequen-
tiallyifpossible),andthenpassesthemtotheautoprewarmworkerforprocessing.
9.8 Local Cache
Temporary tables do not follow the workflow described above. Since temporary
dataisvisibletoasingleprocessonly,thereisnopointinloadingitintotheshared
buffer cache. Therefore,temporary data uses the local cache of the process that
ownsthetable.1
Ingeneral,localbuffercacheworkssimilartothesharedone:
• Pagesearchisperformedviaahashtable.
• Evictionfollowsthestandardalgorithm(exceptthatbufferringsarenotused).
• Pagescanbepinnedtoavoideviction.
However, local cache implementation is much simpler because it has to handle
neither locks on memory structures (buffers can be accessed by a single process p.
only) nor fault tolerance (temporary data exists till the end of the session at the p.
most).
1 backend/storage/buffer/localbuf.c
187
Chapter9 BufferCache
Sinceonlyfewsessionstypicallyusetemporarytables,localcachememoryisas-
signedondemand. Themaximumsizeofthelocalcacheavailabletoasessionis
8MB limitedbythetemp_buffersparameter.
Despite a similar name,the temp_file_limit parameter has nothing to do with temporary
tables;itisrelatedtofilesthatmaybecreatedduringqueryexecutiontotemporarilystore
intermediatedata.
In the  command output, all calls to the local buffer cache are tagged as
localinsteadofshared:
=> CREATE TEMPORARY TABLE tmp AS SELECT 1;
=> EXPLAIN (analyze, buffers, costs off, timing off, summary off)
SELECT * FROM tmp;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Seq Scan on tmp (actual rows=1 loops=1)
Buffers: local hit=1
Planning:
Buffers: shared hit=12 read=7
(4 rows)
188
10
Write-Ahead Log
10.1 Logging
Incaseofafailure,suchasapoweroutage,anerror,oradatabaseservercrash,
allthecontentsofwillbelost; onlythedatawrittentodiskwillpersist. To
starttheserverafterafailure,youhavetorestoredataconsistency.Ifthediskitself
hasbeendamaged,thesameissuehastoberesolvedbybackuprecovery.
In theory,you could maintain data consistency on disk at all times. But in prac-
tice it means that the server has to constantly write random pages to disk (even
thoughsequentialwritingischeaper),andtheorderofsuchwritesmustguaran-
teethatconsistencyisnotcompromisedatanyparticularmoment(whichishard
toachieve,especiallyifyoudealwithcomplexindexstructures).
Justlikethemajorityofdatabasesystems,Postgreusesadifferentapproach.
Whiletheserverisrunning,someofthecurrentdataisavailableonlyin,its
writing to permanent storage being deferred. Therefore,the data stored on disk
is always inconsistent during server operation, as pages are never flushed all at
once. Buteachchangethathappensin(suchasapageupdateperformedin
the buffer cache) is logged: Postgre creates a log entry that contains all the
essentialinformationrequiredtorepeatthisoperationiftheneedarises.1
A log entry related to a page modification must be written to disk ahead of the
modified page itself. Hence the name of the log: write-ahead log, or . This
requirementguaranteesthatincaseofafailurePostgrecanreadentries
from disk and replay them to repeat the already completed operations whose re-
sultswerestillinanddidnotmakeittodiskbeforethecrash.
1 postgresql.org/docs/14/wal-intro.html
189
Chapter10 Write-AheadLog
Keepingawrite-aheadlogisusuallymoreefficientthanwritingrandompagesto
disk. W entries constitute a continuous stream of data,which can be handled
evenbys.Besides,entriesareoftensmallerthanthepagesize.
It is required to log all operations that can potentially break data consistency in
caseofafailure.Inparticular,thefollowingactionsarerecordedin:
• pagemodificationsperformedinthebuffercache—sincewritesaredeferred
• transactioncommitsandrollbacks—sincethestatuschangehappensin
buffersanddoesnotmakeittodiskrightaway
• file operations (like creation and deletion of files and directories when ta-
blesgetaddedorremoved)—sincesuchoperationsmustbeinsyncwithdata
changes
Thefollowingactionsarenotlogged:
• operationsontables
• operationsontemporarytables—sincetheirlifetimeisanywaylimitedbythe
sessionthatspawnsthem
PriortoPostgre,hashindexeswerenotloggedeither. Theironlypurposewasto
matchhashfunctionstodifferentdatatypes.
Apartfromcrashrecovery,canalsobeusedforpoint-in-timerecoveryfroma
backupandreplication.
10.2 WAL Structure
Logical Structure
Speaking about its logical structure,we can describe 1 as a stream of log en-
triesofvariablelength.Eachentrycontainssomedataaboutaparticularoperation
1 postgresql.org/docs/14/wal-internals.html
backend/access/transam/README
190
10.2 WALStructure
precededbyastandardheader.1 Amongotherthings,theheaderprovidesthefol-
lowinginformation:
• transactionrelatedtotheentry
• theresourcemanagerthatinterpretstheentry2
• thechecksumtodetectdatacorruption
• entrylength
• areferencetothepreviousentry
Wisusuallyreadintheforwarddirection,butsomeutilitieslikepg_rewindmayscanit
backwards.
Wdataitselfcanhavedifferentformatsandmeaning. Forexample,itcanbea
pagefragmentthathastoreplacesomepartofthepageatthespecifiedoffset.The
correspondingresourcemanagermustknowhowtointerpretandreplayaparticu-
larentry.Thereareseparatemanagersfortables,variousindextypes,transaction
status,andotherentities.
W files take up special buffers in the server’s shared memory. The size of the
cacheusedbyisdefinedbythewal_buffersparameter. Bydefault,thissizeis −1
chosenautomaticallyas 1 ofthetotalbuffercachesize.
32
Wcacheisquitesimilartobuffercache,butitusuallyoperatesintheringbuffer
mode: newentriesareaddedtoitshead,whileolderentriesaresavedtodiskstart-
ingatthetail. Ifcacheistoosmall,disksynchronizationwillbeperformed
moreoftenthannecessary.
Underlowload,theinsertposition(thebuffer’shead)isalmostalwaysthesameas
thepositionoftheentriesthathavealreadybeensavedtodisk(thebuffer’stail):
=> SELECT pg_current_wal_lsn(), pg_current_wal_insert_lsn();
pg_current_wal_lsn | pg_current_wal_insert_lsn
−−−−−−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−−−−−−−−−−−−
0/3E72A000 | 0/3E72B2F0
(1 row)
1 include/access/xlogrecord.h
2 include/access/rmgrlist.h
191
Chapter10 Write-AheadLog
PriortoPostgre,allfunctionnamescontainedtheacronyminsteadof.
Torefertoaparticularentry,Postgreusesaspecialdatatype: pg_lsn(logse-
quence number, ). It represents a -bit offset in bytes from the start of the
 to an entry. An  is displayed as two -bit numbers in the hexadecimal
notationseparatedbyaslash.
Let’screateatable:
=> CREATE TABLE wal(id integer);
=> INSERT INTO wal VALUES (1);
Startatransactionandnotetheoftheinsertposition:
=> BEGIN;
=> SELECT pg_current_wal_insert_lsn();
pg_current_wal_insert_lsn
−−−−−−−−−−−−−−−−−−−−−−−−−−−
0/3E744260
(1 row)
Nowrunsomearbitrarycommand,forexample,updatearow:
=> UPDATE wal SET id = id + 1;
The page modification is performed in the buffer cache in . This change is
loggedinapage,alsoin.Asaresult,theinsertisadvanced:
=> SELECT pg_current_wal_insert_lsn();
pg_current_wal_insert_lsn
−−−−−−−−−−−−−−−−−−−−−−−−−−−
0/3E7442A8
(1 row)
To ensure that the modified data page is flushed to disk strictly after the corre-
spondingentry,thepageheaderstorestheofthelatestentryrelated
tothispage.Youcanviewthisusingpageinspect:
=> SELECT lsn FROM page_header(get_raw_page('wal',0));
lsn
−−−−−−−−−−−−
0/3E7442A8
(1 row)
192
10.2 WALStructure
Thereisonlyoneforthewholedatabasecluster,andnewentriesconstantly