# 算法 - 符号表
* [算法 - 符号表](#算法---符号表)
    * [前言](#前言)
    * [初级实现](#初级实现)
        * [1. 链表实现无序符号表](#1-链表实现无序符号表)
        * [2. 二分查找实现有序符号表](#2-二分查找实现有序符号表)
    * [二叉查找树](#二叉查找树)
        * [1. get()](#1-get)
        * [2. put()](#2-put)
        * [3. 分析](#3-分析)
        * [4. floor()](#4-floor)
        * [5. rank()](#5-rank)
        * [6. min()](#6-min)
        * [7. deleteMin()](#7-deletemin)
        * [8. delete()](#8-delete)
        * [9. keys()](#9-keys)
        * [10. 分析](#10-分析)
    * [2-3 查找树](#2-3-查找树)
        * [1. 插入操作](#1-插入操作)
        * [2. 性质](#2-性质)
    * [红黑树](#红黑树)
        * [1. 左旋转](#1-左旋转)
        * [2. 右旋转](#2-右旋转)
        * [3. 颜色转换](#3-颜色转换)
        * [4. 插入](#4-插入)
        * [5. 分析](#5-分析)
    * [散列表](#散列表)
        * [1. 散列函数](#1-散列函数)
        * [2. 拉链法](#2-拉链法)
        * [3. 线性探测法](#3-线性探测法)
    * [小结](#小结)
        * [1. 符号表算法比较](#1-符号表算法比较)
        * [2. Java 的符号表实现](#2-java-的符号表实现)
        * [3. 稀疏向量乘法](#3-稀疏向量乘法)
## 前言
符号表（Symbol Table）是一种存储键值对的数据结构，可以支持快速查找操作。
符号表分为有序和无序两种，有序符号表主要指支持 min()、max() 等根据键的大小关系来实现的操作。
有序符号表的键需要实现 Comparable 接口。
```java
public interface UnorderedST {
    int size();
    Value get(Key key);
    void put(Key key, Value value);
    void delete(Key key);
}
```
```java
public interface OrderedST, Value> {
    int size();
    void put(Key key, Value value);
    Value get(Key key);
    Key min();
    Key max();
    int rank(Key key);
    List keys(Key l, Key h);
}
```
## 初级实现
### 1. 链表实现无序符号表
```java
public class ListUnorderedST implements UnorderedST {
    private Node first;
    private class Node {
        Key key;
        Value value;
        Node next;
        Node(Key key, Value value, Node next) {
            this.key = key;
            this.value = value;
            this.next = next;
        }
    }
    @Override
    public int size() {
        int cnt = 0;
        Node cur = first;
        while (cur != null) {
            cnt++;
            cur = cur.next;
        }
        return cnt;
    }
    @Override
    public void put(Key key, Value value) {
        Node cur = first;
        // 如果在链表中找到节点的键等于 key 就更新这个节点的值为 value
        while (cur != null) {
            if (cur.key.equals(key)) {
                cur.value = value;
                return;
            }
            cur = cur.next;
        }
        // 否则使用头插法插入一个新节点
        first = new Node(key, value, first);
    }
    @Override
    public void delete(Key key) {
        if (first == null)
            return;
        if (first.key.equals(key))
            first = first.next;
        Node pre = first, cur = first.next;
        while (cur != null) {
            if (cur.key.equals(key)) {
                pre.next = cur.next;
                return;
            }
            pre = pre.next;
            cur = cur.next;
        }
    }
    @Override
    public Value get(Key key) {
        Node cur = first;
        while (cur != null) {
            if (cur.key.equals(key))
                return cur.value;
            cur = cur.next;
        }
        return null;
    }
}
```
### 2. 二分查找实现有序符号表
使用一对平行数组，一个存储键一个存储值。
二分查找的 rank() 方法至关重要，当键在表中时，它能够知道该键的位置；当键不在表中时，它也能知道在何处插入新键。
二分查找最多需要 logN+1 次比较，使用二分查找实现的符号表的查找操作所需要的时间最多是对数级别的。但是插入操作需要移动数组元素，是线性级别的。
```java
public class BinarySearchOrderedST, Value> implements OrderedST {
    private Key[] keys;
    private Value[] values;
    private int N = 0;
    public BinarySearchOrderedST(int capacity) {
        keys = (Key[]) new Comparable[capacity];
        values = (Value[]) new Object[capacity];
    }
    @Override
    public int size() {
        return N;
    }
    @Override
    public int rank(Key key) {
        int l = 0, h = N - 1;
        while (l  keys(Key l, Key h) {
        int index = rank(l);
        List list = new ArrayList<>();
        while (keys[index].compareTo(h)  index; j--) {
            keys[j] = keys[j - 1];
            values[j] = values[j - 1];
        }
        keys[index] = key;
        values[index] = value;
        N++;
    }
    @Override
    public Value get(Key key) {
        int index = rank(key);
        if (index   
**二叉查找树**  （BST）是一颗二叉树，并且每个节点的值都大于等于其左子树中的所有节点的值而小于等于右子树的所有节点的值。
BST 有一个重要性质，就是它的中序遍历结果递增排序。
基本数据结构：
```java
public class BST, Value> implements OrderedST {
    protected Node root;
    protected class Node {
        Key key;
        Value val;
        Node left;
        Node right;
        // 以该节点为根的子树节点总数
        int N;
        // 红黑树中使用
        boolean color;
        Node(Key key, Value val, int N) {
            this.key = key;
            this.val = val;
            this.N = N;
        }
    }
    @Override
    public int size() {
        return size(root);
    }
    private int size(Node x) {
        if (x == null)
            return 0;
        return x.N;
    }
    protected void recalculateSize(Node x) {
        x.N = size(x.left) + size(x.right) + 1;
    }
}
```