Goldberg [19] modiﬁed Chor’s scheme to achieve both
robustness and Byzantine robustness. Rather than work-
ing over GF(2) (binary arithmetic), his scheme works
over a larger ﬁeld F, where each element can represent
w bits (so w = (cid:98)lg|F|(cid:99)). The database D is then an r× s
matrix of elements of F.
In Goldberg’s simplest con-
struction, as with Chor’s scheme, each of (cid:96) ≥ 2 servers
gets a copy of the database.
To transform this into a t-private PIR protocol, the
client uses ((cid:96),t) Shamir secret sharing to share the vector
eβ ∈ Fr into (cid:96) independent shares (α1,v1) , . . . , (α(cid:96),v(cid:96)).
That is, the client creates r random degree-t polynomials
f1, . . . , fr satisfying f j(0) = eβ [ j] and chooses (cid:96) distinct
non-zero elements αi ∈ F. Server i’s share will be the
vector vi = (cid:104) f1(αi), . . . , fr(αi)(cid:105).
Each server then computes the product ri = vi · D =
. . . w1s
. . . w2s
...
. . . wrs
(cid:3)
(cid:11) ∈ Fs.
(cid:10)∑ j f j(αi)w j1, . . . , ∑ j f j(αi)w js
(cid:2) f1(αi)
fr(αi)(cid:3)
=(cid:2)∑ j f j(αi)w j1
w11 w12
w21 w22
...
...
wr1 wr2
. . .
. . . ∑ j f j(αi)w js
By the linearity property of Shamir secret sharing,
since {(αi,vi)}(cid:96)
i=1 is a set of Shamir secret shares of
eβ , {(αi,ri)}(cid:96)
i=1 will be a set of Shamir secret shares of
eβ · D, which is the β th block of the database. Look-
ing at it another way, the vector (cid:104)r1[q],r2[q], . . . ,r(cid:96)[q](cid:105)
is a Reed-Solomon codeword encoding the polynomial
gq = ∑ j f jw jq, and the client wishes to compute gq(0)
for each 1 ≤ q ≤ s.
However, some of the servers may be down or Byzan-
tine, so some of the shares returned by these servers may
be missing or incorrect. Goldberg’s scheme ﬁrst op-
timistically assumes that all of the servers that replied
gave correct responses, and uses Lagrange interpolation
to attempt to reconstruct the database row (his EASYRE-
COVER algorithm). He bases this optimistic assump-
tion on the fact that Byzantine servers are discovered
by his scheme, which disincentivizes servers to act ma-
liciously. If the optimism is not justiﬁed, however, his
scheme then uses the Guruswami-Sudan algorithm [22]
(his HARDRECOVER algorithm) to do error correction
(see Section 2.3).
This scheme is t-private, and the Guruswami-Sudan
kt(cid:99) incorrect server re-
sponses. Choosing r = s =(cid:112)n/w yields a total commu-
algorithm can correct v < k−(cid:98)√
√
nw bits to privately retrieve a block
√
nication of (k + (cid:96))
nw bits.
of size
Goldberg’s scheme also allows for an extension called
τ-independence [16], in which the database itself is se-
cret shared among the (cid:96) servers, so that no coalition of
τ or fewer servers can learn the contents of the database.
We will omit the details for ease of presentation, but our
scheme extends naturally to this scenario as well.
4 Our algorithm
Our algorithm follows the same general idea as Gold-
berg during the client-server interaction and Shamir se-
cret sharing. We change the way that queries are ran-
domized and make improvements to the client-side pro-
cessing to greatly improve robustness and the speed of
processing.
Goldberg’s block reconstruction technique uses the
Guruswami-Sudan algorithm to reconstruct the block a
single word at a time. However, we can achieve bet-
ter error-correction bounds with the algorithm of Sec-
tion 2.3.2 by considering multiple blocks simultaneously.
This takes advantage of the observation that a server is
either Byzantine or not; if it is not, it will give correct
results for every query.
receive from the servers are(cid:10)R∗
If the Reed-Solomon codewords the client expects to
1 ≤ q ≤ s, what it actually receives may differ because
some number of servers may be down, and some further
number may be Byzantine. Of the (cid:96) servers, it may only
receive a response from k of them, and of those, v may
be incorrect.
If the client receives (cid:104)R1[q],R2[q], . . . ,R(cid:96)[q](cid:105) for 1 ≤
q ≤ s, then:
(cid:96) [q](cid:11) for
2[q], . . . ,R∗
1[q],R∗
 f1(α1)
...
f1(α(cid:96))
w11 w12
w21 w22
...
...
wr1 wr2
 =
 R1[1]
...
R(cid:96)[1]
R1[2]
...
R(cid:96)[2]
 =
. . . R1[s]
...
. . . R(cid:96)[s]
. . . w1s
. . . w2s
...
. . . wrs
. . .
fr(α1)
...
fr(α(cid:96))
. . .
 g1(α1)
g1(α(cid:96))
...
g2(α1)
...
g2(α(cid:96))
. . .
. . .
gs(α1)
...
gs(α(cid:96))
Figure 1: Our PIR protocol illustrated. Each row of the leftmost matrix corresponds to a Shamir secret share of the
database row being queried; each column of the rightmost two matrices corresponds to a Reed-Solomon codeword
encoding a word of the queried database row. The client sends the ith row of the leftmost matrix to server i and expects
to receive the ith row of the rightmost matrix in reply.
• For (cid:96)− k values of i, Ri[q] =⊥ for all q (these are
the down servers)
• For at least h = k − v values of i, Ri[q] = R∗
i [q] for
all q (these are the honest servers)
• For the remaining at most v values of i, Ri[q] =
R∗
i [q] + ∆iq for error terms ∆iq (these are the Byzan-
tine servers)
4.1 Randomizing queries
In order to use the algorithm of section 2.3.2, we need to
ensure that the Byzantine servers produce random errors;
that is, that the ∆iq terms are randomly and independently
chosen in the m codewords we supply to that algorithm.
We make no a priori assumptions on the types of errors
that the Byzantine servers may produce, but we will ran-
domize the algorithm to cause any kind of spurious or
malicious error to appear random.
To accomplish this, we make the following modi-
the client chooses a
ﬁcation to Goldberg’s protocol:
uniformly random non-zero element ci ∈R F∗ for each
server and sends the server a “blinded” query ciQi =
(cid:104)ci f1(αi), . . . ,ci fr(αi)(cid:105) instead of just Qi. When the
server i returns a vector R(cid:48)
i, the client unblinds it by di-
viding by ci to yield Ri = c−1
i R(cid:48)
i.
This ensures that if the server’s response R(cid:48)
iq = R(cid:48)
iq = Ri[q]− R∗
i was the
correct response to query ciQi, then Ri will be the correct
response to query Qi. Further, for a Byzantine server,
the error ∆(cid:48)
i [q] it maliciously introduces
will be randomized unpredictably by the client to ∆iq =
c−1
i ∆(cid:48)
Note, however, that different errors within the same
server’s response to a single query are not independently
randomized; if a Byzantine server just adds a constant C
to each word of the correct result ciR∗
i before returning it
to the client, the client will see a result Ri that has had the
constant c−1
i C added to each word of the correct result.
from different
queries, though, are independent, and it is this indepen-
dence we leverage to get the linear multi-polynomial al-
Errors from different servers, or
i[q]− ciR∗
i [q].
gorithm in Section 2.3.2 to work: after m queries, we
will have m responses each with independently random
errors, and we can use the algorithm to decode them si-
multaneously with high probability.
4.2 Reconstructing responses
After unblinding, the client possesses responses Ri from
k servers; for ease of notation, suppose they are servers
1 through k. Each Ri is a vector (cid:104)Ri[1], . . . ,Ri[s](cid:105) where s
is the number of words (elements of F) in one database
block. Each (cid:104)R1[q], . . . ,Rk[q](cid:105) for 1 ≤ q ≤ s is a Reed-
Solomon codeword with errors (the (cid:96)−k non-responding
servers’ entries having been removed) encoding a poly-
nomial gq; see Figure 1. The client’s desired block is
(cid:104)g1(0), . . . ,gs(0)(cid:105).
As with Goldberg’s scheme, the client ﬁrst optimisti-
cally attempts to reconstruct each gq using Lagrange in-
terpolation on the points {(α1,R1[q]), . . . , (αk,Rk[q])} to
see if the resulting polynomial has degree at most t. If
there were no Byzantine servers, this will be successful.
For any g j for which Lagrange interpolation fails, we ap-
ply an escalating sequence of error-correction algorithms
from Section 2.3 to attempt to recover g j. Our imple-
mentation ties these together in a portfolio algorithm; see
Section 5.2. If at any time, the error correction algorithm
identiﬁes a particular server as Byzantine, that server’s
results are discarded for all future computations.
If there is still at least one g j which was not yet able to
be reconstructed, any one such unsuccessfully decoded
codeword (cid:104)R1[q], . . . ,Rk[q](cid:105) is stored for later reconstruc-
tion, along with the current state of the computation. The
client’s requested block will not be available at this time.
The client can then do PIR requests for more blocks of
the database. If it was interested in multiple blocks, it can
just request those. Otherwise, it can re-request blocks it
has not yet successfully decoded. Note that the proper-
ties of PIR ensure that the servers cannot tell whether
a request is for a repeated block or a fresh one. Each
time, the client either receives its desired block (from the
Lagrange interpolation or error correcting portfolio algo-
h−t−1
rithms) or another codeword gets stored for later recon-
struction.
(cid:7) ≤ v such codewords have been
When m =(cid:6)
v
collected, we can apply the algorithm of Section 2.3.2.
Since the stored codewords have independent errors, the
algorithm will succeed with high probability. At that
point, all m stored computations can be concluded, the m
blocks will be returned to the client, and the v < k−t −1
Byzantine servers will be identiﬁed. The client can then
avoid those servers in the future.
Note that the decoding algorithm is randomized, so
there is a small chance of failure even when the client
has collected the results of m queries. In this case, the
client can continue to collect queries and construct new
codewords until the algorithm succeeds.
Algorithm 2 summarizes the process.
Algorithm 2 Robust PIR Protocol
Goal: Client wishes to query row β from database D
1: Client
(cid:96) distinct non-zero elements
stored on (cid:96) servers.
chooses
α1, . . . ,α(cid:96) ∈ F∗.
2: Client chooses r random degree-t polynomials
f1, . . . , fr ∈R F[x] satisfying f j(0) = 1 for j = β and
f j(0) = 0 otherwise.
chooses
(cid:96)
c1, . . . ,c(cid:96) ∈R F∗.
random non-zero elements
3: Client
4: Client sends the vector
Qi = (cid:104)ci f1(αi),ci f2(αi), . . . ,ci fr(αi)(cid:105)