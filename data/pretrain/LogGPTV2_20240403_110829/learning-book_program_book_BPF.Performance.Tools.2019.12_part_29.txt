## Page 236
6.3 BPF Tools
199
Applications
Runtimes
"ys
System Libraries
System Call inerface
cpdist
profile
ronqlen
Rest of Kemel
Scheduler
offopetise
seftargs
1lcstat
cputreq
CPUs
Device Drivers
hardirga
Figure 6-4 BPF tools for CPU analysis
These tools are either from the BCC and bpftrace repositories covered in Chapters 4 and 5, or were
created for this book. Some tools appear in both BCC and bpftrace. Table 6-3 lists the origins of
the tools covered in this section (BT is short for bpftrace.)
Table 6-3 CPU-Related Tools
Source
Target
Description
execsnoop
BCC/BT
Sched
Lists new process execution
ex1tsnoop
BCC
Sched
Shows process lifespan and exit reason
runqlat
BCC/BT
Sched
Summarizes CPU run queue latency
runqlen
BCC/BT
Sched
Summarizes CPU run queue length 
runqslover
BCC
Sched
Prints run queue waits slower than a threshold
cpudist
BCC
Sched
Summarizes on-CPU time
cpufreq
Book
CPUs
Samples CPU frequency by process
profi1e
BCC
CPUs
Samples CPU stack traces
offcputine
BCC/book
Sched
Summarizes off-CPU stack traces and times
syscount
BCC/BT
Syscalls
Counts system calls by type and process
argdist
BCC
Syscalls
Can be used for syscall analysis
trace
BCC
Syscalls
Can be used for syscall analysis
funccount
BCC
Software
Counts function calls
softirqs
BCC
Interrupts
Summarizes soft interrupt time
hardirqs
BCC
Interrupts
Summarizes hard interrupt time 
smpca11s
Book
Kemel
Times SMP remote CPU calls
11cstat
BCC
PMCs
Summarizes LLC hit ratio by process
---
## Page 237
200
Chapter 6 CPUs
For the tools from BCC and bpftrace, see their repositories for full and updated lists of tool
options and capabilities. A selection of the most important capabilities are summarized here,
6.3.1
execsnoop
execsnoop(8)² is a BCC and bpftrace tool that traces new process execution system-wide. It can
find issues of short-lived processes that consume CPU resources and can also be used to debug
software execution, inclusding application start scripts.
Example output from the BCC version:
+execsnoop
PCONK
PID
PPID
RET ARGS
pqss
330962366
0 /usz/sbin/sshd -D -R
bash
0/b1n/bash
sdno36
33121
33119
0/usz/bin/groups
1s
33123
33122
0 /bln/1s /etc/bash_conpletion,d
lesspipe
33125
33124
0/usz/bin/lesspipe
basenane
33126
33125
0/usz/bin/basenane /usr/bin/Lessp1pe
dirnane
33129
33128
0/usz/bin/di.mane /usz/bin/lesspipe
tput
33130
33118
0 /usz/bin/tput setaf 1
direolors
33132
33131
0/use/bin/direolors -b
33134
33133
0/b1n/1s /etc/bash_conple t1on, d
mesg
33135
33118
0/ust/bin/nesg n
sleep
33136
2015
0 /bin/sleep 30
sh
33143
33139
0 /bin/sh =c comnand -y debian=sal > /dev/null 6&.
debian-sa1
33144
33143
0 /usz/1ib/sysstat/deblan-sal 1 1
5a1
33144
33143
0/usz/1ib/sysstat/sa1 1 1
sadc
33144
33143
0 /usz/1ib/sysstat/sadc -F -L -S DIsx 1 1 /var/1o..-
sleep
331482015
0/bin/sleep 30
[ . - - ]
launched, including sshd(8),groups(1), and mesg(1). It also shows processes from the system
This tool captured the moment that a user logged into the system using SSH and the processes
activity recorder, sar, writing metrics to its log, including sa1(8) and sadc(8).
3 0rigin: I created the first execsnoop using DTrace on 24-Mar-2004, to solve a common performance problem I was
seeing with short-ived processes in Solaris ensironments. My prior analysis technique was to enable process sccount-
ing or BSM suditing and pick the exec events out of the logs, but both of these came with cavests: Process accounting
truncated the process name and arguments to only eight charscters. By comparison, my execsnoop tool could be run
on a system immediately, without needing special audit modes, and could show muth more of the command string.
execsnoop is installed by defsult on OS X, and some Solaris and BSD versions. I also developed the BCC version of
7-Feb-2016, and the bpftrace version on 15-Nov-2017, and for that I added the join() builtin to bpfrace.
---
## Page 238
6.3 BPF Tools
201
Use execsnoop(8) to look for high rates of short-lived processes that are consuming resources,
They can be hard to spot as they may be very short-lived and may vanish before tools like top(1)
or monitoring agents have a chance to see them. Chapter 1 shows an example of this, where a
a uo aoueuoad au Suqnquad doof e u uogeodde ue qoune o Sueg sem 1dus μues
system. It was easily discovered using execsnoop(8), execsnoop(8) has been used to debug many
production issues: perturbations from background jobs, slow or failing application startup, slow
or failing container startup, and so on.
execsnoop(8) traces the execve(2) system call (the commonly used exec(2) variant) and shows
details of the execve(2) arguments and return value. This catches new processes that follow the
fork(2)/clone(2)->exec(2) sequence, as well as processes that re-exec(2) themselves. Some applica
tions create new processes without calling exec(2), for example, when creating a pool of worker
processes using fork(2) or clone(2) alone. These are not included in the execsnoop(8) output since
they do not callexecve(2). This situation should be uncommon: Applications should be creating
pools of worker threads, not processes.
Since the rate of process execution is expected to be relatively low (argv) 
---
## Page 239
202
Chapter 6 CPUs
BEGIN prints a header. To capture exec(0 events, the syscalls:sys_enter_execve tracepoint is instru-
mented to print a time since the program began running, the process ID, and the command name
and arguments. It uses the join() function on the args->argv field from the tracepoint so that the
command name and arguments can be printed on one line.
A future version of bpftrace may change join( to return a string rather than print it out,* which
would make this code:
tracepoint:syscalls1sys_enter_execve
printf (*g10u g=5d esn*, elapsed / 1000000, pid, join (args=>argv)1
The BCC version instruments both the entry and the return of the execve() syscall so that the
return value can be printed. The bpftrace program could be easily enhanced to do this as well.
See Chapter 13 for a similar tool, threadsnoop(8), which traces the creation of threads rather than
process execution.
6.3.2 exitsnoop
exitsnoop(8)° is a BCC tool that traces when processes exit, showing their age and exit reason. The
age is the time from proces creation to termination, and includes time both on and off CPU. Like
execsnoop(8), exitsnoop(8) can help debug issues of short-lived processes, providing different
information to help understand this type of workload. For example:
+ exitsnoop
PCONK
PID
PPID
7ID
AGE [s] EXIT_CODE
cmake
8994
8993
8994
0,01
 Q
sh
8993
8951
668
0.01
8946
7866
s1eep
894 6
1,00
8996
cmake
C668
L668
0,01
8996
8995
899 6
0,01
sh
Q
make
8995
8951
5668
0,02
cmake
9000
8999
9000
0,02
8999
8998
6668
0.02
sh
git
9003
9002
9003
0 ,00
DOH Korker
5111
4183
T0E8
221.250
sleep
8967
26663
8967
7,31
signs1l 9(KILL)
git
9004
Z006
9004
0,00
[...]
4 See bpfrace issue 26 [67].
euauj os luop peqs(sau as,I 'sgejap auou pue auou mous o paousqua aq Agse9 ueo sueiloud aoeuydq sgel pue si41 9
to keep them short and to the point, as well ss more easily understood
6 0rigin: This wss crested by Arturo Martir-de-Nicolas on 4-May-2019.
---
## Page 240
6.3 BPF Tools
203
This output shows many short-lived processes exiting, such as cmake(1), sh(1), and make(1): a
software build was running. A sleep(1) proces exited successfully (exit code 0) after 1.00 seconds,
and another sleep(1) process exited after 7.31 seconds due to a KILL signal. This also caught a
‘DOM Worker′ thread exiting after 221.25 seconds.
This tool works by instrumenting the sched:sched_process_exit tracepoint and its arguments,
and it also uses bpf_get_current_task() so that the start time can be read from the task struct (an
unstable interface detail). Since this tracepoint should fire infrequently, the overhead of this tool
should be negligible.
Command line usage:
[suotado] d0ousTxe
Options include:
fuo saoosd squ sasnseap :a1a d- =
• t: Includes timestamps
= =x: Only trace fails (a non-zero exit reason)
There is not currently a bpftrace version of exitsnoop(8), but it might be a useful exercise to create
one for those learning bpftrace programming.
6.3.3 runqlat
runqlat(8)a is a BCC and bpftrace tool for measuring CPU scheduler latency, often called run
queue latency (even when no longer implemented using run queues). It is useful for identifying
and quantifying issues of CPU saturation, where there is more demand for CPU resources than
they can service. The metric measured by runqlat(8) is the time each thread (task) spends waiting
for its turn on CPU.
pe Sugenado aouesu 1dv uogonposd nd-g e uo Supuuns (s)sebumu DOg smoqs Sumoog auL
about 42% CPU utilization system-wide. The arguments to runqlat(8) are *10 1° to set a 10-second
interval and output only once:
 runglat 10 1
Tracing run queue Latency-.- Hlt Ctzl-C to end.
usec.s
: count
distributlon
0 > 1
: 3149
E 7
: 274541
7 If you publish it, remember to credit the original BCC suthor: Arturo Martin-de-Nicolas.
8 Origin: I crested the first version using DTrace as dispglat.d, published on 13-Aug2012, inspired by the DTrace sched
provider probes and examples in the “Dynamic Tracing Guide,° Jan 2005 [Sun 05]. dispq is short for dispatcher queue,
another tem for run queue. I developed the BCC runglat version on 7-Feb-2016, and bpfrace on 17-Sep2018.
---
## Page 241
204
Chapter 6 CPUs
 -> 15
: 58576
J**.*..*
16 -> 31
: 15485
| * *
32 > 63
: 24877
|***
64 -> 127
: 6727
128 -> 255
: 1214
256 -> 511
: 606
512 > 1023
:489
1024 -> 2047
: 315
2048 -> 4095
: 122
I618  16383
: 2
This output shows that, most of the time, threads were waiting less than 15 microseconds, with a
mode in the histogram between two and 15 microseconds. This is relatively fast—an example of a
healthy systemand is expected for a system running at 42% CPU utilization. Occasionally run
queue latency reached as high as the eight- to 16-millisecond bucket in this example, but those
were outliers.