## Page 236
### 6.3 BPF Tools

Applications, runtimes, system libraries, and the system call interface all interact with the kernel, including the scheduler, device drivers, and other components. Figure 6-4 illustrates the BPF tools used for CPU analysis.

**Figure 6-4: BPF Tools for CPU Analysis**

These tools are either from the BCC and bpftrace repositories (covered in Chapters 4 and 5) or were created specifically for this book. Some tools are available in both BCC and bpftrace. Table 6-3 lists the origins of the tools covered in this section (BT is short for bpftrace).

**Table 6-3: CPU-Related Tools**

| Tool         | Source | Target | Description                                       |
|--------------|--------|--------|---------------------------------------------------|
| execsnoop    | BCC/BT | Sched  | Lists new process execution                       |
| exitsnoop    | BCC    | Sched  | Shows process lifespan and exit reason            |
| runqlat      | BCC/BT | Sched  | Summarizes CPU run queue latency                  |
| runqlen      | BCC/BT | Sched  | Summarizes CPU run queue length                   |
| runqslover   | BCC    | Sched  | Prints run queue waits slower than a threshold    |
| cpudist      | BCC    | Sched  | Summarizes on-CPU time                            |
| cpufreq      | Book   | CPUs   | Samples CPU frequency by process                  |
| profile      | BCC    | CPUs   | Samples CPU stack traces                          |
| offcputime   | BCC/Book | Sched | Summarizes off-CPU stack traces and times        |
| syscount     | BCC/BT | Syscalls | Counts system calls by type and process           |
| argdist      | BCC    | Syscalls | Can be used for syscall analysis                  |
| trace        | BCC    | Syscalls | Can be used for syscall analysis                  |
| funccount    | BCC    | Software | Counts function calls                             |
| softirqs     | BCC    | Interrupts | Summarizes soft interrupt time                    |
| hardirqs     | BCC    | Interrupts | Summarizes hard interrupt time                    |
| smpcalls     | Book   | Kernel | Times SMP remote CPU calls                        |
| lcstat       | BCC    | PMCs   | Summarizes LLC hit ratio by process               |

For the tools from BCC and bpftrace, see their repositories for full and updated lists of tool options and capabilities. A selection of the most important capabilities is summarized here.

### 6.3.1 execsnoop

`execsnoop(8)` is a BCC and bpftrace tool that traces new process execution system-wide. It can identify issues with short-lived processes that consume CPU resources and can also be used to debug software execution, including application start scripts.

**Example output from the BCC version:**

```
+execsnoop
PCONK PID PPID RET ARGS
pqss 330962366 0 /usr/sbin/sshd -D -R
bash 0/bin/bash
sdno36 33121 33119 0/usr/bin/groups
is 33123 33122 0/bin/ls /etc/bash_completion.d
lesspipe 33125 33124 0/usr/bin/lesspipe
basename 33126 33125 0/usr/bin/basename /usr/bin/Lessp1pe
dirname 33129 33128 0/usr/bin/di.mane /usr/bin/lesspipe
tput 33130 33118 0/usr/bin/tput setaf 1
direolors 33132 33131 0/use/bin/direolors -b
33134 33133 0/bin/ls /etc/bash_conple t1on.d
mesg 33135 33118 0/ust/bin/nesg n
sleep 33136 2015 0/bin/sleep 30
sh 33143 33139 0/bin/sh =c comnand -y debian=sal > /dev/null 6&.
debian-sa1 33144 33143 0/usr/lib/sysstat/deblan-sal 1 1
5a1 33144 33143 0/usr/lib/sysstat/sa1 1 1
sadc 33144 33143 0/usr/lib/sysstat/sadc -F -L -S DIsx 1 1 /var/lo..
sleep 33148 2015 0/bin/sleep 30
[ . - - ]
```

This tool captured the moment a user logged into the system using SSH and the processes launched, including `sshd(8)`, `groups(1)`, and `mesg(1)`. It also shows processes from the system activity recorder, `sar`, writing metrics to its log, including `sa1(8)` and `sadc(8)`.

**Origin:** I created the first `execsnoop` using DTrace on March 24, 2004, to solve a common performance problem with short-lived processes in Solaris environments. My prior analysis technique was to enable process accounting or BSM auditing and pick the exec events out of the logs, but both had limitations. Process accounting truncated the process name and arguments to only eight characters. By comparison, my `execsnoop` tool could be run on a system immediately, without needing special audit modes, and could show much more of the command string. `execsnoop` is installed by default on OS X, and some Solaris and BSD versions. I also developed the BCC version on February 7, 2016, and the bpftrace version on November 15, 2017, and for that, I added the `join()` built-in to bpftrace.

Use `execsnoop(8)` to look for high rates of short-lived processes that are consuming resources. These can be hard to spot as they may be very short-lived and may vanish before tools like `top(1)` or monitoring agents have a chance to see them. Chapter 1 shows an example of this, where a system issue was easily discovered using `execsnoop(8)`. `execsnoop(8)` has been used to debug many production issues, such as perturbations from background jobs, slow or failing application startup, and slow or failing container startup.

`execsnoop(8)` traces the `execve(2)` system call (the commonly used `exec(2)` variant) and shows details of the `execve(2)` arguments and return value. This catches new processes that follow the `fork(2)/clone(2)->exec(2)` sequence, as well as processes that re-exec(2) themselves. Some applications create new processes without calling `exec(2)`, for example, when creating a pool of worker processes using `fork(2)` or `clone(2)` alone. These are not included in the `execsnoop(8)` output since they do not call `execve(2)`. This situation should be uncommon: Applications should be creating pools of worker threads, not processes.

Since the rate of process execution is expected to be relatively low, `BEGIN` prints a header. To capture `exec(0)` events, the `syscalls:sys_enter_execve` tracepoint is instrumented to print a time since the program began running, the process ID, and the command name and arguments. It uses the `join()` function on the `args->argv` field from the tracepoint so that the command name and arguments can be printed on one line.

A future version of bpftrace may change `join()` to return a string rather than print it out, which would make this code:

```c
tracepoint:syscalls1sys_enter_execve
printf ("%llu %5d %s\n", elapsed / 1000000, pid, join(args->argv));
```

The BCC version instruments both the entry and the return of the `execve()` syscall so that the return value can be printed. The bpftrace program could be easily enhanced to do this as well. See Chapter 13 for a similar tool, `threadsnoop(8)`, which traces the creation of threads rather than process execution.

### 6.3.2 exitsnoop

`exitsnoop(8)` is a BCC tool that traces when processes exit, showing their age and exit reason. The age is the time from process creation to termination, and includes time both on and off CPU. Like `execsnoop(8)`, `exitsnoop(8)` can help debug issues of short-lived processes, providing different information to help understand this type of workload. For example:

**Example output:**

```
+ exitsnoop
PCONK PID PPID TID AGE [s] EXIT_CODE
cmake 8994 8993 8994 0.01 0
sh 8993 8951 668 0.01 0
make 8946 7866 8946 1.00 0
cmake 8996 8995 8996 0.01 0
sh 8995 8951 668 0.02 0
make 9000 8999 9000 0.02 0
sh 9002 8998 668 0.02 0
git 9003 9002 9003 0.00 0
DOM Worker 5111 4183 T0E8 221.250 0
sleep 8967 26663 8967 7.31 9(KILL)
git 9004 9006 9004 0.00 0
[...]
```

This output shows many short-lived processes exiting, such as `cmake(1)`, `sh(1)`, and `make(1)`: a software build was running. A `sleep(1)` process exited successfully (exit code 0) after 1.00 seconds, and another `sleep(1)` process exited after 7.31 seconds due to a KILL signal. This also caught a 'DOM Worker' thread exiting after 221.25 seconds.

This tool works by instrumenting the `sched:sched_process_exit` tracepoint and its arguments, and it also uses `bpf_get_current_task()` so that the start time can be read from the task struct (an unstable interface detail). Since this tracepoint should fire infrequently, the overhead of this tool should be negligible.

**Command line usage:**

```sh
[suotado] d0ousTxe
```

**Options include:**

- `-t`: Includes timestamps
- `-x`: Only trace fails (a non-zero exit reason)

There is not currently a bpftrace version of `exitsnoop(8)`, but it might be a useful exercise to create one for those learning bpftrace programming.

### 6.3.3 runqlat

`runqlat(8)` is a BCC and bpftrace tool for measuring CPU scheduler latency, often called run queue latency (even when no longer implemented using run queues). It is useful for identifying and quantifying issues of CPU saturation, where there is more demand for CPU resources than they can service. The metric measured by `runqlat(8)` is the time each thread (task) spends waiting for its turn on CPU.

**Example output:**

```
Tracing run queue Latency-.- Hlt Ctzl-C to end.
usec.s : count distribution
0 -> 1 : 3149
1 -> 7 : 274541
7 -> 15 : 58576
15 -> 31 : 15485
31 -> 63 : 24877
63 -> 127 : 6727
127 -> 255 : 1214
255 -> 511 : 606
511 -> 1023 : 489
1023 -> 2047 : 315
2047 -> 4095 : 122
4095 -> 8191 : 2
```

This output shows that, most of the time, threads were waiting less than 15 microseconds, with a mode in the histogram between two and 15 microseconds. This is relatively fast—an example of a healthy system—and is expected for a system running at 42% CPU utilization. Occasionally, run queue latency reached as high as the eight- to 16-millisecond bucket in this example, but those were outliers.

**Origin:** I created the first version using DTrace as `dispglat.d`, published on August 13, 2012, inspired by the DTrace sched provider probes and examples in the "Dynamic Tracing Guide," January 2005 [Sun 05]. `dispg` is short for dispatcher queue, another term for run queue. I developed the BCC `runqlat` version on February 7, 2016, and bpftrace on September 17, 2018.