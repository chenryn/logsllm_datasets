总而言之，在 Go 中非常重视并发编程，幸运的是，我们有一个强大的工具来捕捉这些竞争条件。它完全集成到 Go 的工具链中。
您可以在这里阅读更多相关信息并了解如何使用它：[介绍 Go 中的竞争条件检测 - Go Blog](https://blog.golang.org/race-detector)。
### 学习曲线
您可以在一个晚上学习**所有**的 Go 语言功能。我是认真的。当然，还有标准库，以及不同的，更具体领域的最佳实践。但是两个小时就足以让你自信地编写一个简单的 HTTP 服务器或命令行应用程序。
Go 语言拥有[出色的文档](https://golang.org/doc/)，大部分高级主题已经在他们的博客上进行了介绍：[Go 编程语言博客](https://blog.golang.org/)。
比起 Java（以及 Java 家族的语言）、Javascript、Ruby、Python 甚至 PHP，你可以更轻松地把 Go 语言带到你的团队中。由于环境易于设置，您的团队在完成第一个生产代码之前需要进行的投资要小得多。
### 反射
代码反射本质上是一种隐藏在编译器下并访问有关语言结构的各种元信息的能力，例如变量或函数。
鉴于 Go 是一种静态类型语言，当涉及更松散类型的抽象编程时，它会受到许多各种限制。特别是与 Javascript 或 Python 等语言相比。
此外，Go [没有实现一个名为泛型的概念](https://golang.org/doc/faq#generics)，这使得以抽象方式处理多种类型更具挑战性。然而，由于泛型带来的复杂程度，许多人认为不实现泛型对语言实际上是有益的。我完全同意。
根据 Go 的理念（这是一个单独的主题），您应该努力不要过度设计您的解决方案。这也适用于动态类型编程。尽可能坚持使用静态类型，并在确切知道要处理的类型时使用 接口   interface 。接口在 Go 中非常强大且无处不在。
但是，仍然存在一些情况，你无法知道你处理的数据类型。一个很好的例子是 JSON。您可以在应用程序中来回转换所有类型的数据。字符串、缓冲区、各种数字、嵌套结构等。
为了解决这个问题，您需要一个工具来检查运行时的数据并根据其类型和结构采取不同行为。 反射   Reflect 可以帮到你。Go 拥有一流的反射包，使您的代码能够像 Javascript 这样的语言一样动态。
一个重要的警告是知道你使用它所带来的代价 —— 并且只有知道在没有更简单的方法时才使用它。
你可以在这里阅读更多相关信息: [反射的法则 — Go 博客](https://blog.golang.org/laws-of-reflection).
您还可以在此处阅读 JSON 包源码中的一些实际代码: [src/encoding/json/encode.go — Source Code](https://golang.org/src/encoding/json/encode.go)
### Opinionatedness（专制独裁的 Go）
顺便问一下，有这样一个单词吗？
来自 Javascript 世界，我面临的最艰巨的困难之一是决定我需要使用哪些约定和工具。我应该如何设计代码？我应该使用什么测试库？我该怎么设计结构？我应该依赖哪些编程范例和方法？
这有时候基本上让我卡住了。我需要花时间思考这些事情而不是编写代码并满足用户。
首先，我应该注意到我完全知道这些惯例的来源，它总是来源于你或者你的团队。无论如何，即使是一群经验丰富的 Javascript 开发人员也很容易发现他们在实现相同的结果时，而大部分的经验却是在完全不同的工具和范例上。
这导致整个团队中出现过度分析，并且使得个体之间更难以相互协作。
嗯，Go 是不同的。即使您对如何构建和维护代码有很多强烈的意见，例如：如何命名，要遵循哪些结构模式，如何更好地实现并发。但你只有一个每个人都遵循的风格指南。你只有一个内置在基本工具链中的测试框架。
虽然这似乎过于严格，但它为您和您的团队节省了大量时间。当你写代码时，受一点限制实际上是一件好事。在构建新代码时，它为您提供了一种更直接的方法，并且可以更容易地调试现有代码。
因此，大多数 Go 项目在代码方面看起来非常相似。
### 文化
人们说，每当你学习一门新的口语时，你也会沉浸在说这种语言的人的某些文化中。因此，您学习的语言越多，您可能会有更多的变化。
编程语言也是如此。无论您将来如何应用新的编程语言，它总能给你带来新的编程视角或某些特别的技术。
无论是函数式编程， 模式匹配   pattern matching 还是 原型继承   prototypal inheritance 。一旦你学会了它们，你就可以随身携带这些编程思想，这扩展了你作为软件开发人员所拥有的问题解决工具集。它们也改变了你阅读高质量代码的方式。
而 Go 在这方面有一项了不起的财富。Go 文化的主要支柱是保持简单，脚踏实地的代码，而不会产生许多冗余的抽象概念，并将可维护性放在首位。大部分时间花费在代码的编写工作上，而不是在修补工具和环境或者选择不同的实现方式上，这也是 Go 文化的一部分。
Go 文化也可以总结为：“应当只用一种方法去做一件事”。
一点注意事项。当你需要构建相对复杂的抽象代码时，Go 通常会妨碍你。好吧，我会说这是简单的权衡。
如果你真的需要编写大量具有复杂关系的抽象代码，那么最好使用 Java 或 Python 等语言。然而，这种情况却很少。
在工作时始终使用最好的工具！
### 总结
你或许之前听说过 Go，或者它暂时在你圈子以外的地方。但无论怎样，在开始新项目或改进现有项目时，Go 可能是您或您团队的一个非常不错的选择。
这不是 Go 的所有惊人的优点的完整列表，只是一些被人低估的特性。
请尝试一下从 [Go 之旅](https://tour.golang.org/) 来开始学习 Go，这将是一个令人惊叹的开始。
如果您想了解有关 Go 的优点的更多信息，可以查看以下链接：
* [你为什么要学习 Go？ - Keval Patel](https://medium.com/@kevalpatel2106/why-should-you-learn-go-f607681fad65)
* [告别Node.js - TJ Holowaychuk](https://medium.com/@tjholowaychuk/farewell-node-js-4ba9e7f3e52b)
并在评论中分享您的阅读感悟！
即使您不是为了专门寻找新的编程语言语言，也值得花一两个小时来感受它。也许它对你来说可能会变得非常有用。
不断为您的工作寻找最好的工具！
*题图来自  的图稿*
---
via: 
作者：[Kirill Rogovoy](https://twitter.com/krogovoy) 译者：[imquanquan](https://github.com/imquanquan) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出