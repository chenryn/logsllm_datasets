### Total

| API Level | 5 | 6 | 7 | 8 | 9 | 10 | 14 | 15 | 16 | 17 | 18 | 19 | 21 | 22 | 23 |
|-----------|---|---|---|---|---|----|----|----|----|----|----|----|----|----|----|
| 0         | 0 | 0 | 13 | 8 | 0 | 30 | 3 | 20 | 21 | 10 | 28 | 54 | 11 | 46 | 2 |
| 1         | 0 | 0 | 2 | 6 | 0 | 1 | 1 | 0 | 0 | 1 | 2 | 9 | 3 | 8 | 0 |
| 2         | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 3         | 5 | 4 | 1 | 5 | 0 | 6 | 7 | 0 | 2 | 6 | 0 | 7 | 0 | 0 | 0 |
| 4         | 1 | 0 | 0 | 8 | 0 | 0 | 3 | 0 | 0 | 0 | 0 | 6 | 4 | 1 | 6 |
| 5         | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 6         | 128 | 135 |  |  |  |  |  |  |  |  |  |  |  |  |  |

Interestingly, while the total number of permissions increases with each new Android release, the number of permissions with normal and dangerous levels, which guard the functionality exposed to third-party applications, remains relatively stable. From a developer's perspective, the cognitive load did not increase significantly in terms of new permissions. However, the amount of compatibility issues to be handled is still growing due to fluctuations in permissions. On the other hand, security researchers and platform/system app developers have to manage an increasing number of permissions.

Permissions are not only added; they are also removed or changed in their protection level. By analyzing code commits to AOSP [1], we identified several reasons for permission removals. Most package permissions were removed because either the corresponding packages were deleted from the system, or the functionality became closed-source. Some permissions became obsolete as the corresponding functionality was made available to all applications (e.g., the backup functionality protected by the BACKUP DATA permission in API 8) or merged with other functionalities, such as GRANT REVOKE PERMISSIONS (removed in API 23). Interestingly, even though the READ OWNER DATA permission was removed in API 9 over five years ago, the current documentation still references it [1]. Additionally, some permissions were simply renamed (e.g., BROADCAST SCORE NETWORKS became BROADCAST NETWORK PRIVILEGED). These changes complicate the understanding of the permission system and its evolution across Android releases.

According to Table 2, there was only one instance of a category change: the ACCESS CACHE FILESYSTEM permission in API 7 was in the package category, while in API 8, its declaration was moved to the core Android Manifest file. As for protection level changes, Table 2 reports the number of permissions that increased or decreased their protection level.

The overall trend in the table shows that, prior to Android 6.0, permissions tended to increase their protection level over time. However, most protection level updates involved changing the level from signature to signature|system, which is not a restriction in control. Internally, signature|system permissions are assigned a higher value, but generally, signature permissions are more restrictive because they allow apps to obtain these permissions only if the declaring and requesting packages are signed with the same certificate. Permissions at the signature|system level can also be granted if the app is installed in the special system folder, allowing vendors to provide pre-installed applications with additional capabilities. For example, the SHUTDOWN permission, which allows system shutdown, was given to vendor apps in API 14. Other changes in protection levels mostly aimed to limit the privileges of third-party apps. For instance, the READ LOGS permission, which allows reading the system log containing sensitive data, changed from dangerous to signature|system in API 16.

Before API 23, there were few cases of decreases in protection levels, primarily to avoid bothering users with approval requests. For example, the WAKE LOCK permission, which prevents the system from going into sleep mode, changed from dangerous to normal in API 17.

Some permissions, like BATTERY STATS, changed their protection level multiple times. Initially, it appeared as normal, then became dangerous in API 17, and signature|system in API 19. Finally, in API 23, it became a signature permission. Thus, BATTERY STATS has had all possible security levels during its lifecycle.

API level 23 introduced significant changes in protection levels. Now, there are fewer dangerous permissions compared to previous Android releases. Table 2 shows that the protection level decreased for 128 permissions. The main reason for this change is the deprecation of the signature|system protection level (104 permissions became signature). The shift to runtime permissions forced platform developers to reconsider the dangerous set, leaving only the most critical ones that users can understand. Consequently, some dangerous permissions were transformed into normal (22 cases). Section 6 discusses the effects of these changes.

Permission groups show more stable behavior. In Android 1.6 (API 4), there were 11 groups. This number remained the same until API 17, when 19 new groups were added. In API 18, one additional group appeared, resulting in 31 total. There is limited information on why this reorganization occurred, but it may be related to the Google Play installer app starting to cluster permissions according to their groups [18]. In Android 6.0, permission groups were completely reconsidered again, with 4 new groups added and 26 removed, resulting in 9 groups total. This radical change happened because dangerous permissions are now granted on a per-group basis, reducing the number of groups to avoid overwhelming users.

### Key Findings

Ideally, the security-critical components of a system should remain stable to ensure easy security assessment. Unfortunately, this is not the case for the Android operating system. This section reports our findings and concerns inferred from the analysis of the evolution of the permission system.

#### Important Changes in API 23

1. **Runtime Permissions:**
   - From a security perspective, one of the biggest changes in Android 6.0 is the introduction of runtime permissions. This change requires efforts from both OS designers and third-party developers to ensure backward and forward compatibility.
   - **Backward Compatibility:** Legacy apps (targeting API levels before 23) and new apps (API level 23) behave differently. During installation, legacy apps require user approval for requested permissions, while new apps are installed silently. After installation, all dangerous permissions for legacy apps are granted, while runtime permissions for new apps are disabled. Core permissions can be granted and revoked for legacy apps, but custom dangerous permissions can be adjusted for new apps.
   - **Forward Compatibility:** New runtime permission functionality is not transparent for application developers. Before making an API call protected by a permission, the app should check if the permission is granted. If not, the developer must request it, and the user can allow or deny it. Both cases must be handled by the developer. However, if an app runs on an older Android version without the requested permission, the check may return an incorrect result. We identified 8 such permissions added after API 4, including USE SIP, ADD VOICEMAIL, WRITE CALL LOG, READ CALL LOG, READ CELL BROADCASTS, READ EXTERNAL STORAGE, BODY SENSORS, and READ TV LISTINGS. These peculiarities are not documented, causing issues for developers.

2. **Runtime Permissions Granted Per Permission Groups:**
   - This decision was made to reduce interruptions and facilitate user understanding. However, experienced users cannot control permissions in a fine-grained manner, and security researchers must consider permission groups in their analysis. This architectural decision received negative feedback from users and security analysts [18].

3. **UID Sharing:**
   - An attempt to change permission granting to a per-package basis failed, and permissions are still granted per UID. This creates an attack vector for collaborative applications sharing the same UID to access functionality protected by runtime permissions. If two applications share the same UID, granting a runtime permission to one app automatically grants the same permission to the second app without user consent. For example, Microsoft Excel and Microsoft PowerPoint share the same UID, so if Excel is granted READ EXTERNAL STORAGE, PowerPoint will also receive it.

4. **Signature Permissions Available to Third-Party Apps:**
   - Previously, it was assumed that third-party applications could not obtain signature permissions unless signed with the same certificate. This is no longer true, and any new security system for Android must account for these permissions. We found 4 groups of exceptions that significantly impact security analysts. This change especially affects permission maps, which previously considered only dangerous and normal permissions as available for third-party apps [23].

5. **Appop Permissions:**
   - The introduction of appop permissions (with FLAG APPOP set) has substantial consequences. Separate activities were added for granting these permissions, such as PACKAGE USAGE STATS, SYSTEM ALERT WINDOW, and WRITE SETTINGS. These activities are accessed through different configuration screens, making it inconvenient for users. Internally, these activities are represented as different classes with hardcoded permissions, requiring OS developers to add a new class for any new appop permission.