#list out the object files in your project here  
OBJS=idabook_plugin.o  
BINARY=$(OUTDIR)$(PROC)$(PLUGIN_EXT)  
all: $(OUTDIR) $(BINARY)  
clean:  
    -@rm *.o  
    -@rm $(BINARY)  
$(OUTDIR):  
    -@mkdir -p $(OUTDIR)  
CC=g++  
INC=-I$(IDA_SDK)include/  
%.o: %.cpp  
    $(CC) -c $(CFLAGS) $(INC) $ -o $@  
LD=g++  
$(BINARY): $(OBJS)  
    $(LD) $(LDFLAGS) -o $@ $(OBJS) $(IDADIR) $(IDALIB) $(EXTRALIBS)  
#change idabook_plugin below to the name of your plugin, make sure to add any  
#additional files that your plugin is dependent on  
idabook_plugin.o: idabook_plugin.cpp
前面的生成文件使用 uname
 命令确定运行平台并相应地配置一些构建标志。通过将相关对象文件的名称附加到$OBJS
 变量的后面及生成文件的末尾，你可以向插件项目添加其他源文件。如果你的插件需要其他库，你应在$EXTRALIBS
 中指定库名称。$IDA_SDK
 变量用于指定 的位置，它可以使用绝对或相对路径。在这个例子中，$IDA_SDK
 使用的是一个相对路径，表示 比插件目录高两个目录。这是为了与/plugins（本例中为/plugins/ idabook_plugin）中的插件项目保持一致。如果选择将插件项目目录放置在相对于 的其他位置，必须确保$IDA_SDK
 正确引用 。最后，前面例子的配置可以将已编译的插件成功地存储在/bin/plugins 目录中。需要记住的是，成功编译一个插件并不一定会安装这个插件。我们将在下一节中讨论插件安装。
install_visual.txt 文件讨论了如何使用微软的 Visual C++ Express 构建IDA 模块。要使用 Visual Studio 2008 从零开始创建一个项目，请执行以下步骤。
选择File▶New ▶Project 打开New Project 对话框，如图 17-1 所示。
图17-1 Visual Studio“新建项目”对话框
指定项目类型为 Visual C++/Win32，选择Win32 Project 模板，并为你的项目提供名称和存储位置。通常，你会将新建的插件项目保存在/plugins目录中，以将所有的插件保存在同一个位置。单击 OK按钮后，Win32 Application Wizard（Win32应用程序向导）出现。单击Next 按钮进入Application Setting 步骤，然后将Application type 设置为DLL ，将 Additional options设置为Empty project ，在单击 Finish 按钮之前，界面如图 17-2 所示。
图17-2 Visual Studio Win32应用程序向导
建立项目的基本框架后，必须进行其他一些设置。通过 Project ▶Properties可打开如图 17-3所示的对话框，并可访问 Visual Studio 2008 中的项目属性。只有你增加或编辑一个新文件，或增加一个现有文件，将一个源文件添加到项目中，C/C++ 配置选项才会生效。
图17-3 Visual Studio“项目属性”对话框
需要修改的设置分布在对话框左侧的Configuration Properties（配置属性）部分。在完成项目的过程中，设置属性的方式如图17-3 所示。对于你在对话框左侧选择的每一类属性，对话框右侧都会显示一个可配置的属性列表。注意，属性类别分层显示。你可以通过文件选择、单行编辑、多行编辑或下拉列表选择来编辑属性。表 17-1 详细说明了创建插件项目时必须编辑的属性。
表17-1 Visual Studio 插件配置值（32位）
配置属性类别
特定的属性
属 性 值
常规
输出目录
根据需要，通常为〈SDKDIR〉\bin\plugins
C/C++▶常规
其他包含目录
添加\include
C/C++▶预处理器年
预处理器定义
附加“;_NT_;_IDP_ ”
C/C++▶代码生成
运行库
多线程〈发行版〉a
多线程调试（调试版）
（非DLL版本）b
链接器▶常规
输出文件
更改扩展名为.plw
链接器▶常规
其他库目录
添加\lib\x86_win_vc_32 c
链接器▶输入
其他依赖关系
添加ida.lib （取自\lib\86_win_vc_32 ）
链接器▶命令行
其他选项
添加/EXPORT:PLUGIN
a 这里的多线程指C++ 运行库本身。IDA 碰巧是一个利用这个库的单线程应用程序。单线程版本的C++ 运行库并不存在。
b 选择DLL 版本的C++ 库要求插件最终运行的系统中包含MSVCR80.DLL 文件。为了消除这种限制，可选择非DLL 版本的C++ 运行库，它生成一个更加便携的静态链接插件。
c 在SDK6.1之前，添加库目录\lib\vc.w32。
值得注意的是，在 Visual Studio中，你可以分别为项目的调试和发行版本指定配置选项（见图17-3 左上角）。如果要为插件构建独立的调试和发行版本，请确保修改两种配置中的属性。另外，从Configurations 下拉列表（Properties对话框的左上角）中选择 All Configurations，可以为你节省一些时间，因为这时你对属性所做的修改将应用于所有构建配置。
17.3 插件安装
和构建插件相比，安装插件非常简单。要安装插件，你只需将已编译的插件模块复制到/plugins 目录中。需要注意的是，在 Windows 系统中不能覆写一个正在使用的可执行文件。因此，要在 Windows 系统中安装一个插件，你必须确保从 IDA 中卸载任何旧版本的插件。根据插件的加载选项，插件可能会在数据库关闭时卸载。但是，对于已经设置 PLUGIN_FIX
 标志的插件，你可能需要完全关闭 IDA 才能将新插件复制到/plugins 目录中。
在Linux 和OSX 系统上，你可以在使用可执行文件时覆写它们，因此，在安装一个新版本的插件时，你不需要卸载这个插件。但是，在 IDA 下一次加载插件之前，新版本的插件不会加载到IDA 中。
一些IDA 插件仅以二进制形式发布，而其他插件则同时以源代码和二进制格式发布。要安装这类插件，你通常需要找到适合你的 IDA 版本的已编译插件，并将它复制到/plugins目录中。在安装插件之前，请一定阅读你希望安装的插件附带的文档资料（如果有），因为有一些插件需要你安装其他组件才能正常运行。
17.4 插件配置
通过/plugins/plugins.cfg 文件中的设置，IDA 可以对插件进行有限的配置。plugins.cfg 中的设置可用于指定与插件有关的以下信息。
插件的一个备选菜单说明。这个值重写插件的 wanted_name
 数据成员。
插件的一个非标准存储位置或文件扩展名。默认情况下，IDA 在/plugins 目录中搜索插件，并期待插件拥有一个默认的、特定于平台的文件扩展名。
一个用于激活插件的备选的或额外的热键。这个值重写插件的wanted_hotkey
 数据成员。
一个整数值。每次激活插件时，向插件的 PLUGIN.run
 函数传递这个值。
一个供调试器插件使用的可选 DEBUG
 标志。第24 章将讨论调试器插件。
插件配置行的有效语法在 plugins.cfg 文件中描述。下面是插件配置行的几个例子：
; Semicolons introduce comments.  A plugin configuration line consists  
; of three required components and two optional components  
;  plugin_name  plugin_file  hotkey  [integer run arg]  [DEBUG]  
The_IdaBook_Plugin   idabook_plugin   Alt-F2  1  
IdaBook_Plugin_Alt   idabook_plugin   Alt-F3  2
插件作者为插件选择 wanted_name
 和wanted_hotkey
 数据成员，并将它们编译到插件中。两个由不同作者开发的插件极有可能使用完全相同的名称或热键。在 plugins.cfg 文件中，plugin_name
 字段（它重写 PLUGIN.wanted_name
 ）指定添加到Edit ▶Plugins 菜单中的文本。你可以给一个插件分配几个名称，因而要分配几个菜单项。在将名称添加到 Edit ▶Plugins 菜单中之前，plugin_name 字段中的下划线字符将被空格字符替换。
plugin_file
 字段指定已编译插件模块文件的名称，当前的配置行即应用于这个文件。如果指定一个完整路径，IDA 将从指定的路径加载这个插件。如果没有指定路径，IDA 将在/plugins 目录中寻找插件。如果没有指定扩展名，则 IDA 会假定插件使用当前平台的默认扩展名。如果指定扩展名，则 IDA 会搜索与插件文件名完全匹配的插件。
hotkey
 字段指定激活插件应使用的热键。这个字段重写 PLUGIN.wanted_hotkey
 ，可用于解决两个插件使用同一个激活热键所造成的热键分配冲突。另外，给一个插件分配几个热键时，你能以多种方式激活这个插件。这时，可以根据激活插件所使用的热键，为 PLUGIN.run
 指定几个独特的整数参数。当你向 PLUGIN.run
 提交不同的整数值时，IDA 可以让插件决定到底如何激活自己。如果一个插件实施好几种行为，且根据插件被激活的方式选择行为，就可以用到上述功能。在前面的配置示例中，只要插件通过 ALT+F3 热键组合激活，IDA 就向idabook_plugin
 的PLUGIN.run
 函数提交整数值 2。
17.5 扩展IDC
到现在为止，我们已经介绍了主要用于操纵数据库或从数据库中提取信息的插件。本节将提供一个扩展 IDC 脚本语言功能1
 的例子。如第 16 章所述，IDC 在IDA API 的基础上运行，因此毫不奇怪，必要时我们可以使用 API 来增强IDC 的功能。
1. 注意现在没有办法通过编程在已编译的插件中扩展IDAPython API 。
在第15 章和第 16 章中，你了解到，IDC 全局数组实际上是一个功能有限的网络节点。我们提到，在 IDC 中，你可以通过提供一个名称而收到一个数组 ID，从而创建全局数组。在 IDC 内部，你提供的名称获得字符串前缀“$ idc_array
 ”，你收到的数组 ID 实际上是一个网络节点索引值。如何扩展 IDC 以访问IDA 数据库中的网络节点呢？通过将索引作为 IDC 中的数组ID，我们已经能够访问已知索引的任何网络节点。因此，我们只需要能够访问已知其名称的网络节点就行了。当前，IDA 阻止我们这样做，因为它在我们提供的每一个网络节点名称前加上了“$ idc_array
 ”前缀。要解决这个问题，首先进入 SDK 和set_idc_func_ex
 函数。
set_idc_func_ex
 函数在expr.hpp 中定义，可用于创建一个新的 IDC 函数，并将它的行为与C++ 实现对应起来。set_idc_func_ex
 函数的原型如下所示：
typedef error_t (idaapi *idc_func_t)(idc_value_t *argv, idc_value_t *res);  
bool set_idc_func_ex(const char *idc_name, idc_func_t idc_impl,  
                     const char *args, int extfunc_flags);
注意，为了简化代码，这里引入了idc_func_t
 数据类型。这个数据类型并不在 SDK 中定义。set_idc_func_ex
 的参数指定我们正创建的新 IDC 函数的名称（idc_name
 ）、一个指向C++ 函数（实施我们新建的 IDC 函数的行为）的指针（idc_impl
 ），还有一个以零结束的字符数组，这些字符指定新IDC 函数的参数类型和列表（args
 ）。
下面的函数可用作插件的初始化函数。它通过创建我们正在设计的新 IDC 函数来完成扩展过程。
    int idaapi init(void) {  
➋     static const char idc_str_args[] = { VT_STR2, 0 };  
➊     set_idc_func_ex("CreateNetnode", idc_create_netnode, idc_str_args, 0);  
       return PLUGIN_KEEP;  
    }
这个函数创建新 IDC 函数CreateNetnode
 ，并将它与我们的实现函数 idc_create_
netnode
 （➊）关联起来。新 IDC 函数的参数是一个字符串类型的参数 VT_STR2
 （➋）。
真正实现 CreateNetnode
 的行为的函数如下所示：
     /*  
      * native implementation of CreateNetnode.  Returns the id of the new netnode  