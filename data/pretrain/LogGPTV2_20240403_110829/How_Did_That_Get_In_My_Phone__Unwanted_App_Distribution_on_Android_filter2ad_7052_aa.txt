title:How Did That Get In My Phone? Unwanted App Distribution on Android
Devices
author:Platon Kotzias and
Juan Caballero and
Leyla Bilge
How Did That Get In My Phone?
Unwanted App Distribution on Android Devices
Platon Kotzias∗, Juan Caballero†, Leyla Bilge∗
∗NortonLifelock Research Group, † IMDEA Software Institute
0
2
0
2
t
c
O
0
2
]
R
C
.
s
c
[
1
v
8
8
0
0
1
.
0
1
0
2
:
v
i
X
r
a
Abstract—Android is the most popular operating system with
billions of active devices. Unfortunately,
its popularity and
openness makes it attractive for unwanted apps, i.e., malware
and potentially unwanted programs (PUP). In Android, app
installations typically happen via the ofﬁcial and alternative mar-
kets, but also via other smaller and less understood alternative
distribution vectors such as Web downloads, pay-per-install (PPI)
services, backup restoration, bloatware, and IM tools. This work
performs a thorough investigation on unwanted app distribution
by quantifying and comparing distribution through different
vectors. At the core of our measurements are reputation logs of a
large security vendor, which include 7.9M apps observed in 12M
devices between June and September 2019. As a ﬁrst step, we
measure that between 10% and 24% of users devices encounter at
least one unwanted app, and compare the prevalence of malware
and PUP. An analysis of
the who-installs-who relationships
between installers and child apps reveals that the Play market
is the main app distribution vector, responsible for 87% of
all installs and 67% of unwanted app installs, but it also has
the best defenses against unwanted apps. Alternative markets
distribute instead 5.7% of all apps, but over 10% of unwanted
apps. Bloatware is also a signiﬁcant unwanted app distribution
vector with 6% of those installs. And, backup restoration is an
unintentional distribution vector that may even allow unwanted
apps to survive users’ phone replacement. We estimate unwanted
app distribution via PPI to be smaller than on Windows. Finally,
we observe that Web downloads are rare, but provide a riskier
proposition even compared to alternative markets.
I. INTRODUCTION
Android has become the most popular operating system with
over 2.5 billion active devices [43] and 75% of the mobile
device market share [40]. A major reason behind Android’s
success is its open environment that allows affordable access
to new app developers, app distribution through the ofﬁcial
Play market and alternative sources, and OS customization by
vendors and mobile network operators. Unfortunately, popu-
larity and openness comes with a cost. Abusive developers also
have easy access to the ecosystem allowing them to distribute
their unwanted apps to a large number of users [6]. We use
unwanted apps to jointly refer to malware (e.g., ransomware,
banking trojans) and potentially unwanted programs (PUP)
(e.g., adware, rogueware). AV vendors keep reporting ever-
increasing numbers of unwanted app detections and collected
unwanted app samples [7], [9], [12].
By default, Android only installs apps from the ofﬁcial Play
market, but the user can optionally enable installations from
other (unknown) sources. Among those, alternative markets
are popular especially in countries like China where Google
services such as the Play market are restricted [53], [77]. Since
app markets are popular and open to any user, prior work
has focused on analyzing them [15], [53], [72], [77], [83].
However, the security community lacks a global understanding
about how Android unwanted apps are distributed. While
apps are largely distributed through markets, other smaller
alternative distribution vectors such as Web downloads, pay-
per-install (PPI) services, bloatware, backup restoration, and
even instant messaging (IM) should not be ignored. We close
this gap in the existing research by investigating how un-
wanted apps get distributed into user devices through different
distribution vectors. We expect our ﬁndings to drive future
defenses that protect users when installing apps from lesser-
known distribution vectors such as backup restoration and
bloatware, which are still responsible for a signiﬁcant fraction
of unwanted app installs. We also expect our ﬁndings to
motivate further research on protecting the Play market, which
despite its defenses, remains by far the largest unwanted app
distribution vector.
At the core of our measurements are reputation logs that,
over the four-month period between June and September 2019,
capture the presence in 12M Android devices of 7.9M apps
(34M APKs) and the who-installs-who relationship between
apps. Such internal view of what is installed on user devices,
and how it arrived, allows us to answer open questions such as
what fraction of apps are installed through different distribu-
tion vectors, which distribution vectors install more unwanted
apps, which apps in the same distribution vector (e.g., different
markets or browsers) are riskier compared to each other, and
what is the prevalence of unwanted app encounters by users.
Prior works have also leveraged a view of apps installed
in real user devices. A recent study analyzed the presence
of pre-installed apps in 2.7K Android devices [33]. In con-
trast, we examine the distribution of unwanted apps by pre-
installed bloatware, and compare it with other distribution
vectors. Furthermore, our device dataset is three orders of
magnitude larger and contains longitudinal logs over a four-
month period. Another recent work detects stalking apps by
analyzing 50M Android devices during 2017–2019 [61]. In
comparison, our analysis is performed on a smaller set of
devices in a four-month-period. However, our analysis does not
focus on one type of threat, but rather covers a large variety
of unwanted apps distributed through various vectors. Shen
et al. [67] compared rooted and unrooted devices, measuring
the prevalence of ﬁve malware classes on 6M Android devices
1
during April 2015. We also measure prevalence, ﬁnding, albeit
on a four month period and including all malware and PUP
classes, signiﬁcantly higher prevalence.
As a prerequisite to analyze unwanted app distribution,
we ﬁrst identify unwanted apps in the dataset. We use the
common practice to collect AV detection labels using the
VirusTotal (VT) online service [75] and consider unwanted
any APK ﬂagged by at
least a threshold number of AV
engines [84]. Using those unwanted APKs we measure the
number of devices that encountered at least one unwanted
app over the four month analysis period. We measure an
unwanted app prevalence of 10%–24%, depending on the
selected VT threshold. This range is very conservative as it
considers benign all APKs not queried to VT or not found
in VT. Compared to previous studies on Windows malware
prevalence on consumer and enterprise hosts [45], [46], [79],
this shows that, despite many security improvements provided
by the Android ecosystem, the security posture of Android
devices with respect to unwanted apps is not better than that
of Windows hosts. We also compare the prevalence of malware
and PUP ﬁnding that the prevalence of both categories is
almost identical, although we identify signiﬁcantly more PUP
samples on the devices.
Then, we examine the who-installs-who relationships be-
tween installers and the child apps they install. To compare
distribution vectors we classify the installer apps into 12 cate-
gories: the ofﬁcial Play market, alternative markets, browsers,
commercial PPI, backup and restore, IM, theme stores, ﬁle
managers, ﬁle sharing apps, bloatware, mobile device manage-
ment (MDM), and package installers. To compare distribution
vectors we compute their vector detection ratio (VDR), i.e.,
the ratio of unwanted apps installed through that vector over
all apps installed through that vector. Below we list our most
signiﬁcant ﬁndings on unwanted app distribution:
• The Play market
is the main app distribution vector
responsible for 87% of all installs and 67% of unwanted
installs. However, its VDR is only 0.6%, better than all
other large distribution vectors. Thus, the Play market
defenses against unwanted apps work, but still signiﬁcant
amounts of unwanted apps are able to bypass them,
making it the main distribution vector for unwanted apps.
• Among the remaining installs, alternative markets are the
largest, being responsible for 5.7% of all installs and
10.4% of unwanted installs. However, on average they
are ﬁve times riskier (3.2% VDR) than the Play market
(0.6%). Download risk highly varies among alternative
markets. Some like Amazon’s and Vivo’s are almost as
safe as the Play market, but users of other top alterna-
tive markets have up to 19 times higher probability of
encountering an unwanted app.
• Backup restoration is an unintended unwanted app distri-
bution vector responsible for 4.8% of unwanted installs.
Cloning of apps during phone replacement can facilitate
unwanted apps to survive phone changes by the user.
• Bloatware is another surprisingly high distribution vector,
responsible for 6% of unwanted installs. This is likely due
to ad-based monetization by device vendors and carriers
of the devices they sell. Bloatware installers are often
privileged, making their removal by security tools and
users challenging.
• App downloads from the Web are rare (<0.1% installs),
but have signiﬁcantly higher risk (3.8% VDR) than down-
loads from markets, even alternative ones (3.2%).
• We provide a very conservative lower bound on com-
mercial PPI service distribution of 0.2% of all installs
and 0.1% of unwanted installs and observe that such
services seem to have improved their ﬁltering of abusive
advertisers compared to their Windows counterparts. We
also estimate that all PPI activity may be responsible for
up to 4% of the unwanted app installs. That upper bound
is still signiﬁcantly lower than the estimate of Windows
commercial PPI services being responsible for over a
quarter of PUP installs [45].
II. BACKGROUND
Android apps are distributed as Android application pack-
ages (APKs), which are compressed ﬁles that contain the
app’s code (e.g., DEX ﬁles and ELF libraries), a manifest
ﬁle, certiﬁcates, resources, and other assets. The manifest
ﬁle contains a package name commonly used to identify the
app. The developer is free to choose the package name and
collisions are possible between apps from different developers.
However, some markets, including the ofﬁcial Play market,
use the package name as a unique app identiﬁer and therefore
do not accept two apps with the same package name. For
this reason, benign developers avoid reusing existing package
names. On the other hand, unwanted apps may impersonate
benign apps by selecting the same package name as an app
in the Play market, and distributing the impersonating app
through alternative markets (e.g., [26], [83]).
A. App Signing
APKs are digitally signed using a private key and they
include the signature and a certiﬁcate chain for the correspond-
ing public key, which the Android framework uses during
installation to validate that the APK has not been modiﬁed.
In practice, the vast majority of APKs contain only a single
self-signed certiﬁcate. An installed app can only be updated
by another APK with the same package name and only if
the new version is signed with the same private key and has
the same certiﬁcate as the old version. To prevent unwanted
app developers from surreptitiously updating the benign apps
with their own versions, it is strictly necessary that developers
keep their private keys conﬁdential. We use the term signer
to refer to the entity that owns the private key that signs an
APK. We identify the APK’s signer by either the SHA1 hash
of the certiﬁcate or by the SHA256 hash of the certiﬁcate’s
public key. Both identiﬁers are essentially equivalent since in
an update the Android framework checks that the hash of the
certiﬁcates is the same, providing no incentive to reuse public
keys across certiﬁcates [21].
Fake apps may impersonate benign apps by using the same
package name as the benign app and distributing the fake app
through alternative distribution vectors. Impersonation allows
the fake app to inherit the positive reputation of the benign
app. Fake apps often correspond to repackaged versions of
the benign app with some possibly malicious modiﬁcations
(e.g., [25], [26], [81], [83]). Unless the attacker compromises
the private key of the app being impersonated, the fake app
will be signed with a different private key, and have a different
certiﬁcate. To identify such impersonations and distinguish the
original app from the impersonating app, we track apps in our
data using both their package name and signer.
Platform keys. Building an Android OS distribution requires
the publisher to provide four pairs of public/private keys:
platform, test, shared, media. Among these, the platform key is
used to sign the core Android platform packages. APKs signed
with a platform key can use System and SignatureOrSystem
permissions [32]. Each device vendor will have at least one
platform key to build its Android images. Some vendors
may use different platform keys for different devices. The
Android Open Source Project (AOSP) repository contains
default platform, test, share, and media key pairs, and their
corresponding certiﬁcates. The default AOSP private keys are
used to sign Android OS debugging builds, and should be
avoided when building production releases since the private
keys are not really private. Signing an APK with an AOSP
key is a well known security issue since any other app also
using the AOSP certiﬁcate can update those apps.
B. App Installation
This work analyzes the who-installs-who relationships
among apps. In particular, we examine installations where
a parent app installs a child app. When parent and child
are the same app, we call it an app update, otherwise we
the parent app an installer and the event an install.
call
When installing a new app, the Android framework stores the
package name of the installer, which can then be accessed
using method PackageInstaller.getInstallerPackageName1. The
installer package is only updated if the app is re-installed from
a different source. The installer package may be null if the
installer is unknown, e.g., when the APK was pre-installed.
Since Android API level 26 (August 2017), a user-level
app that wants to install another app should declare the
REQUEST INSTALL PACKAGES permission. In addition,
if the installer is not a trusted source (i.e., not a ﬁrst party
market such as the Play market or the device manufacturer
market), it needs to hold the install from unknown sources
permission2, which has to be explicitly granted by the user to
1Added in API level 5 (October 2009). Replaced in API level 30 (February
2020) by three methods from the InstallSourceInfo class: getInitiatingPacka-
geName, getInstallingPackageName, getOriginatingPackageName [18].
2Prior to API level 26 (August 2017), install from unknown sources was a
system-wide conﬁguration.
the installer [27]. Even if the installer is authorized to install
from unknown sources, the user is prompted to authorize the
install. To perform installs that do not require user consent,
i.e., silent installs, the installer must hold the system-level
INSTALL PACKAGES permission, which is only granted to
apps signed by the platform key and privileged apps explicitly
granted that permission [13].
Uninstallation. Removing a user-level app prompts the user
to accept the uninstallation. Silent uninstallations require the
uninstaller to hold the system-level DELETE PACKAGES
permission and run in Device or Proﬁle Owner modes [17].
Given these requirements, AV engines prompt the user to
uninstall detected unwanted apps. Furthermore, system apps
(i.e., installed under the read-only /system/ directory) cannot
be uninstalled, only disabled, unless the device is rooted.
C. Unwanted Apps, Malware, PUP
Malware is any software that intentionally causes harm to
computer systems, networks, and their users. Some examples
of malware classes are ransomware, banking trojans, and back-
doors. In contrast, potentially unwanted programs (PUP) [50],
also known as grayware [16], [54], potentially unwanted
applications (PUA) [20], [52], or unwanted software [37],
are software that, while not outright malicious (i.e., not mal-
ware) still may negatively impact computer systems, networks,
and their users, e.g., in terms of privacy, performance, or
user experience. PUP includes software that performs abusive
advertising (adware), that does not implement the claimed
functionality (e.g., rogueware), and tools that some users may
want to install, but can also be abused (e.g., rooting tools).
But, the boundary between malware and PUP is blurry and
often differs between security vendors [20], [37], [50], [52],
[54]. Some classes like spyware (i.e., software the leaks user
data) are sometimes considered malware and others PUP.
Regardless of such differences, which are beyond the scope
of this paper and deserve future work, AV engines alert users
about the presence of both malware and PUP in their protected
devices, although PUP treatment may be more lightweight.
For example, mobile AV engines may display more stern and
frequent notiﬁcations to ask the user to uninstall malware
compared to PUP notiﬁcations, and may even allow the user
to disable PUP notiﬁcations.
Currently, the security community lacks a term to jointly
refer to malware and PUP. Calling both categories malware
raises complaints that PUP is not necessarily malicious. On
the other hand, malware is clearly unwanted. In this work, we
use unwanted apps to jointly refer to Android malware and
PUP, and separate both categories when needed, e.g., in our
prevalence estimations.
III. DATASETS
This section details the datasets that lie at the core of our
study. We use two main datasets summarized in Table I. Repu-
tation logs from the security vendor contain information about
Dataset
Reputation Logs Devices
Data
Countries
APKs
Packages
Signers
Unique events
Install events
Installer packages
Child packages