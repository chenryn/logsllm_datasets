Type:            Opaque
Data
====
pass.txt:    16 bytes
```
如您所见，`describe`命令显示了机密中包含的字节数，以及它的类型`Opaque`。
另一种创建机密的方法是使用声明性的方法手动创建它。让我们看看下一步怎么做。
## 手动声明式方法
当从 YAML 文件中声明性地创建一个机密时，您需要使用一个编码实用程序对要存储的数据进行预编码，例如 Linux 上的`base64`管道。
让我们在这里使用 Linux `base64`命令来编码我们的密码:
```
> echo -n 'myverybadpassword' | base64
bXl2ZXJ5YmFkcGFzc3dvcmQ=
```
现在，我们可以使用 Kubernetes name 规范来声明性地创建我们的机密，我们可以将其命名为`secret.yaml`:
```
apiVersion: v1
kind: Secret
metadata:
  name: my-secret
type: Opaque
data:
  dbpass: bXl2ZXJ5YmFkcGFzc3dvcmQ=
```
我们的`secret.yaml`规范包含我们创建的 Base64 编码字符串。
要创建密码，请运行以下命令:
```
kubectl create -f secret.yaml
```
现在你知道如何创造机密了。接下来，让我们学习如何安装一个机密，供 Pod 使用。
## 以卷的形式安装机密
安装机密与安装配置图非常相似。首先，让我们来看看如何将一个机密作为一个卷(文件)挂载到 Pod。
让我们看看我们的 Pod 规格。在本例中，我们正在运行一个示例应用来测试我们的 Secret。这里是 YAML:
Pod 安装-机密。yaml
```
apiVersion: v1
kind: Pod
metadata:
  name: my-pod-mount-cm
spec:
  containers:
    - name: busybox
      image: busybox
      command:
      - sleep
      - "3600"
      volumeMounts:
      - name: my-config-volume
        mountPath: /app/config
        readOnly: true
  volumes:
    - name: foo
      secret:
      secretName: my-secret
  restartPolicy: Never
```
这里与配置图的一个不同之处是，我们在卷上指定`readOnly`，以防止 Pod 运行时对密码进行任何更改。就我们如何安装“机密”而言，其他一切都是一样的。
同样，我们将在下一章中深入回顾中的卷、[中的*卷、第七章*中的](07.html#_idTextAnchor166)、*Kubernetes 上的存储*卷，但简单解释一下，卷是为您的 Pods 添加存储的一种方式。在本例中，我们将我们的卷(您可以将其视为文件系统)装载到我们的 Pod 中。然后，我们的机密被创建为文件系统中的一个文件。
## 将机密作为环境变量挂载
类似于文件挂载，我们可以将我们的 Secret 挂载为环境变量，就像 ConfigMap 挂载一样。
让我们看看另一个 YAML Pod 。在这种情况下，我们将把我们的机密装载为环境变量:
pod-安装-机密-env.yaml
```
apiVersion: v1
kind: Pod
metadata:
  name: my-pod-mount-env
spec:
  containers:
    - name: busybox
      image: busybox
      command:
      - sleep
      - "3600"
      env:
        - name: MY_PASSWORD_VARIABLE
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: dbpass
  restartPolicy: Never
```
在用`kubectl apply`创建了前面的 Pod 之后，让我们运行一个命令来查看我们的 Pod，看看变量是否被正确初始化。这与`docker exec`的工作方式完全相同:
```
> kubectl exec -it my-pod-mount-env -- /bin/bash
> printenv MY_PASSWORD_VARIABLE
myverybadpassword
```
有效！现在，您应该很好地理解了如何创建、装载和使用配置映射和机密。
作为关于机密的最后一个主题，我们将学习如何使用 Kubernetes`EncryptionConfig`创建安全、加密的机密。
## 实现加密机密
几个托管的 Kubernetes 服务(包括亚马逊的**弹性 Kubernetes 服务** ( **EKS** )在静止状态下自动加密`etcd`数据–因此您不需要做任何事情来实现加密的 Secrets。像 Kops 这样的集群提供程序有一个简单的标志(例如`encryptionConfig: true`)。但是如果你正在艰难地创建你的集群*，你将需要用一个标志、`--encryption-provider-config`和一个`EncryptionConfig`文件来启动 Kubernetes API 服务器。*
 *重要说明
完全从零开始创建集群不在本书的讨论范围之内(查看 *Kubernetes The Hard Way* 以获取这方面的绝佳指南，请访问[https://github.com/kelseyhightower/kubernetes-the-hard-way](https://github.com/kelseyhightower/kubernetes-the-hard-way))。
要快速了解加密是如何处理的，请看下面的`EncryptionConfiguration` YAML，它在启动时被传递给`kube-apiserver`:
加密-config.yaml
```
apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
  - resources:
    - secrets
    providers:
    - aesgcm:
        keys:
        - name: key1
          secret: c2VjcmV0IGlzIHNlY3VyZQ==
        - name: key2
          secret: dGhpcyBpcyBwYXNzd29yZA==
```
在`EncryptionConfiguration`之前的 YAML 列出了应该在`etcd`中加密的资源，以及一个或多个可以用来加密数据的提供者。从 Kubernetes`1.17`开始，允许下列供应商:
*   **身份**:无加密。
*   **Aescbc** :推荐的加密提供商。
*   **Secretbox** :比 Aescbc 更快，更新。
*   **Aesgcm** :注意你需要自己用 Aesgcm 实现密钥轮换。
*   **Kms** :与第三方机密存储一起使用，如 Vault 或 AWS KMS。
要查看完整列表，请参见 https://kubernetes . io/docs/tasks/administrator-cluster/encrypt-data/# providers。当多个提供程序添加到列表中时，Kubernetes 将使用第一个配置的提供程序来加密对象。解密时，Kubernetes 将进入列表，并尝试与每个提供者一起解密-如果都不起作用，它将返回一个错误。
一旦我们创建了一个机密(看看我们之前的例子)，并且我们的`EncryptionConfig`是活动的，我们就可以检查我们的机密是否真的被加密了。
## 检查您的机密是否加密
检查您的机密是否在`etcd`中实际加密的最简单方法是直接从`etcd`中获取值并检查加密前缀:
1.  首先，让我们继续使用`base64` :
    ```
    > echo -n 'secrettotest' | base64
    c2VjcmV0dG90ZXN0
    ```
    制作一个密钥
2.  创建一个名为`secret_to_test.yaml`的文件，内容如下:
    ```
    apiVersion: v1
    kind: Secret
    metadata:
     name: secret-to-test
    type: Opaque
    data:
      myencsecret: c2VjcmV0dG90ZXN0
    ```
3.  创造机密:
    ```
    kubectl apply -f secret_to_test.yaml
    ```
4.  With our Secret created, let's check if it is encrypted in `etcd` by directly querying it. You shouldn't need to directly query `etcd` very often, but if you have access to the certificates used to bootstrap the cluster, it is an easy process:
    ```
    > export ETCDCTL_API=3 
    > etcdctl --cacert=/etc/kubernetes/certs/ca.crt 
    --cert=/etc/kubernetes/certs/etcdclient.crt 
    --key=/etc/kubernetes/certs/etcdclient.key 
    get /registry/secrets/default/secret-to-test
    ```
    根据您配置的加密提供商，您的机密数据将以提供商标签开始。例如，用 Azure KMS 提供商加密的机密将以`k8s:enc:kms:v1:azurekmsprovider`开始。
5.  现在，通过`kubectl` :
    ```
    > kubectl get secrets secret-to-test -o yaml
    ```
    检查机密是否被正确解密(仍将被编码)
输出应该是`myencsecret: c2VjcmV0dG90ZXN0`，这是我们未加密的、编码的 Secret 值:
```
> echo 'c2VjcmV0dG90ZXN0' | base64 --decode
> secrettotest
```
成功！
我们现在在集群上运行加密。让我们找出如何移除它。
## 禁用集群加密
我们还可以相当容易地从 Kubernetes 资源中删除加密。
首先，我们需要使用空白加密配置 YAML 重新启动 Kubernetes API 服务器。如果您自行配置集群，这应该很容易，但是在 EKS 或 AKS 上，这是不可能手动完成的。您需要遵循云提供商特定的文档，了解如何禁用加密。
如果您已经自行配置了群集或使用了 Kops 或 Kubeadm 等工具，那么您可以使用以下`EncryptionConfiguration`在所有主节点上重新启动`kube-apiserver`进程:
加密-重置. yaml
```
apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
  - resources:
    - secrets
    providers:
    - identity: {}
```
重要说明
请注意，身份提供者不需要是唯一列出的提供者，但它确实需要是第一个，因为正如我们前面提到的，Kubernetes 使用第一个提供者来加密`etcd`中的新/更新对象。
现在，我们将手动重新创建我们所有的机密，此时他们将自动使用身份提供者(未加密):
```
kubectl get secrets --all-namespaces -o json | kubectl replace -f -
```
在这一点上，我们所有的机密都是未加密的！
# 总结
在本章中，我们看了 Kubernetes 为注入应用配置提供的方法。首先，我们看了一些配置容器化应用的最佳实践。然后，我们回顾了 Kubernetes 给我们的第一个方法，配置映射，以及创建和安装它们到 Pods 的几个选项。最后，我们看了 Secrets，当加密时，它是处理敏感配置的更安全的方法。到目前为止，您应该已经拥有了向应用提供安全和不安全配置值所需的所有工具。
在下一章中，我们将通过挂载我们的 Secrets 和 ConfigMaps 来深入探讨一个已经涉及到的主题——Kubernetes 卷资源，以及更一般地说，Kubernetes 上的存储。
# 问题
1.  机密和配置映射有什么区别？
2.  机密是如何编码的？
3.  从常规文件创建配置映射和从环境文件创建配置映射的主要区别是什么？
4.  如何在 Kubernetes 上保护机密？为什么默认情况下它们不安全？
# 进一步阅读
*   关于 Kubernetes 数据加密配置的信息可以在[https://Kubernetes . io/docs/tasks/administrator-cluster/encrypt-data/](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)的官方文档中找到。*