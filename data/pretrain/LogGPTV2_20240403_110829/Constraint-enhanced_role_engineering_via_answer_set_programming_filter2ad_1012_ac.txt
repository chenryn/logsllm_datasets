sum of this counting. In comparison with the ﬁrst encoding, it does
not represent A, but only the assignments held in conﬁgurations in
Γ. We observe from the conﬁgurations in Section 5 that the number
of held assignments is much less than |A|. Hence, we prefer and
present this encoding.
4.3 Transformation
We now transform RCP(cid:104)C, Γ(cid:105) to an ASP program, denoted as
Π(RCP(cid:104)C, Γ(cid:105)). It consists of four parts: the ﬁrst part Π(Γ) lays
the basis, the second one Π(γ0) guesses a potential solution γ0, the
third one Π(quality) ensures closeness, and the fourth one Π(C)
enforces constraints in C.
As shown in Figure 3, Π(Γ) contains facts for further reason-
ing. First, a fact conﬁg(γ) declares a conﬁguration γ. Second,
we use terms asg(r, u, ua) and asg(r, p, pa) to denote possi-
ble user-role and role-permission assignments, respectively; a fact
hold (asg(r, u, ua), γ) means that an assignment (r, u) holds in γ.
For each role r, Π(Γ) contains a fact role(r). A fact urp(x) means
x is either a user, a role, or a permission. Finally, facts type(ua)
and type(pa) denote the user-role relation and the role-permission
relation, respectively.
Next we present Π(γ0) in Figure 4. Suppose that γ1 ∈ Γ is se-
lected; a solution γ0 is regarded as reached by making changes to
γ1. Rules (2) and (3) deﬁne applicable changes to γ1, which are
either adding non-existing assignments or deleting existing ones.
change(add (asg(R, X, T ))) ← not hold (asg(R, X, T ), γ1), type(T ), role(R), urp(X), not role(X).
change(del (asg(R, X, T ))) ← hold (asg(R, X, T ), γ1).
applied (G) ← change(G), not not_applied (G).
not_applied (G) ← change(G), not applied (G).
hold (Asg, γ0) ← applied (add (Asg)).
hold (Asg, γ0) ← not applied (del (Asg)), hold (Asg, γ1).
hold (asg(U, P, upa), Y ) ← hold (asg(R, U, ua), Y ), hold (asg(R, P, pa), Y ).
dif (Asg, Y ) ← hold (Asg, γ0), not hold (Asg, Y ), conﬁg(Y ).
dif (Asg, Y ) ← not hold (Asg, γ0), hold (Asg, Y ).
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
(10)
Figure 4: Rules in Π(γ0).
In rule (2), when urp(x) holds but role(x) does not, x is either a
user or a permission. Rules (4) and (5) guess a subset of changes
that are applied to γ1. Rules (6) and (7) further construct γ0 from
the changes and γ1: an assignment holds in γ0 if and only if the
corresponding addition is applied (when the assignment does not
hold in γ1) or the corresponding deletion is not applied (when
the assignment holds in γ1). For each conﬁguration in Γ and γ0,
rule (8) derives the user-permission relation from the user-role and
role-permission relations; a term asg(u, p, upa) denotes a possible
user-permission assignment. Finally, for each γ ∈ Γ, rules (9) and
(10) mark the assignments appearing in exactly one of γ0 and γ.
Π(quality) contains statement (11), which minimizes the
marked assignments. As will be discussed in Section 6.1,
Π(quality) may include other statements to optimize solutions in
ways other than closeness.
(11)
#minimize [dif (Asg, Y ) : conﬁg(Y )] .
program Π(c); we let Π(C) =(cid:83)
Finally, we encode constraints. Each constraint c has an ASP
c∈C Π(c). Consider a structural
constraint s ⊆ s(cid:48). Let s(x) denotes the fact that x is a member
of s (evaluated against γ0). Rule (12) captures this constraint; it
says a conﬂict arises if an answer set contains s(x) but not s(cid:48)(x).
Therefore, an answer set of Π(RCP(cid:104)C, Γ(cid:105)) includes s(cid:48)(x) when-
ever it includes s(x). That means, in conﬁgurations extracted from
the answer sets, a member of s also belongs to s(cid:48).
⊥ ← s(X), not s
(cid:48)
(12)
Now the question is how to deﬁne s(X) (and s(cid:48)(X)). Observe
that a set expression s can be rewritten (in polynomial time) as
below:
(X).
m(cid:92)
ki(cid:91)
s =
si
si =
si,j
(13)
i=1
j=1
where m, k1, . . . , km are positive integers, and si,j is of the form
user[x], role[x], or perm[x].
To deﬁne such a set expression, rule (14) models the intersection;
it says that a ground instance of s(X) holds if so do the correspond-
ing ground instances of {s_1 (X),··· , s_m(X)}.
s(X) ← s_1 (X),··· , s_m(X).
(14)
In turn, rule (15) models the union; it states that a ground instance
of s_i(X ) holds whenever so does at least one of the corresponding
instances of {s_i1 (X ),··· , s_iki (X )}
s_i(X) ← 1 {s_i1 (X),··· , s_iki (X)}, urp(X).
(15)
Note that s may evaluate to be a mixed set of users, roles, and/or
permissions; so rule (15) contains urp(X) in its body.
Since we want to know if γ0 satisﬁes C, set expressions are
evaluated against γ0. Accordingly, in the rules for s we replace
s_ij (X) with hold (Asg, γ0), depending on si,j’s type. For ex-
ample, si,j = user[stu] evaluates to the set of users who take
the role stu; in this case, hold (asg(stu, X, ua), γ0) takes place
of s_ij (X).
For a quantity constraint |s|θn, the translation is similar. We ﬁrst
encode s, and then count the number of members in s. Rules (16)-
(19) represent the constraint when θ takes each one of {=,(cid:54)=,≤,≥
}.
⊥ ← not n #count{s(X)} n .
⊥ ← n #count{s(X)} n .
⊥ ← n + 1 #count{s(X)}.
⊥ ← #count{s(X)} n − 1 .
(16)
(17)
(18)
(19)
Rule (16) says an exact number n of ground instances of s(X)
hold; otherwise there arise a conﬂict. On the contrary, rule (17)
forbids the case where exactly n many such instances hold. The
remaining two rules work likewise.
Optimization.
The above translation is the most general approach; every RCP
instance can be handled in this way. However, the resulting pro-
gram is not necessarily optimal. With domain knowledge of the
problem, further optimization to the encoding is possible. For ex-
ample, domain knowledge enables us to characterize those con-
straints most likely to be used in practice, and hence to identify a
number of strategies for optimizing the transformation. See Ap-
pendix C for discussions.
Example 12. Take constraint con5 : user[fac] ⊆ user[asg] ∩
user[view] for example; the following program encodes it.
con5 _s(X) ← hold (asg(fac, X, ua), γ0).
(X) ← hold (asg(X, asg, upa), γ0),
con5 _s
(cid:48)
hold (asg(X, view, upa), γ0).
⊥ ← con5 _s(X), not con5 _s
(cid:48)
(X).
The ﬁrst two rules corresponds to the set expressions user[fac] and
user[asg] ∩ user[view], respectively. The last rule relates the two
sets, in light of rule (12). Note that this program already uses the
optimization in Appendix C.
Theorem 13. Π(RCP(cid:104)C, Γ(cid:105)) has an answer set if and only if
RCP(cid:104)C, Γ(cid:105) has a solution.
See Appendix B for a sketch of the proof.
Table 2: The conﬁgurations used in experiments. VUA is the av-
erage number of roles that users are assigned to, VPA the average
number of permissions roles are assigned to, and VUPA the average
number of permissions users obtain.
|P|
231
3046
709
590
46
185
277
1164
1587
10127
Datasets
Dom
EMEA
FW1
FW2
HCare
MelbS
USA
APJ
AmSm
AmLa
VPA
30.15
212.09
16.35
67.60
6.87
9.71
1.88
3.70
26.29
211.65
VUPA
9.24
206.29
87.53
112.08
32.30
10.59
4.53
3.35
30.26
53.17
VUA
1.39
1.00
2.39
1.34
2.31
1.41
4.44
1.19
1.37
1.14
|U|
79
35
365
325
46
51
10021
2044
3477
3485
|R|
20
34
66
10
15
48
276
454
192
404
5. EXPERIMENTS
Cases where |Γ| = 1.
Table 2 shows a collection of conﬁgurations [8].5 These conﬁgu-
rations have been widely tested in role engineering community. For
each such conﬁguration γ, we construct an experimental instance
RCP(cid:104)C,{γ}(cid:105). The set C comprises Cran and Cman. Constraints
in Cran are generated based on γ as follows.
1. For each u ∈ U, create a pair of constraints roleγ[u]\R1 ⊆
role[u] ⊆ roleγ[u] ∪ R2; R1 and R2 are randomly cho-
sen from roleγ[u] and R\roleγ[u], respectively, such that
|R1| = α− × |roleγ[u]| and |R2| = α+ × |roleγ[u]|, where
α− and α+ are positive numbers.
2. For each r ∈ R, create a pair of constraints permγ[r]\P1 ⊆
perm[r] ⊆ permγ[r] ∪ P2; P1 and P2 are randomly cho-
sen from permγ[r] and P\permγ[r], respectively, such that
|P1| = α− × |permγ[r]| and |P2| = α+ × |permγ[r]|.
3. For each u ∈ U, create a pair of constraints permγ[u]\P1 ⊆
perm[u] ⊆ permγ[u] ∪ P2; P1 and P2 are randomly cho-
sen from permγ[u] and P\permγ[u], respectively, such that
|P1| = α− × |permγ[u]| and |P2| = α+ × |permγ[u]|.
We now explain the constraints in Cran. First, it is easy to see
that γ satisﬁes Cran. Second, Cran is parameterized by (α+, α−).
Consider permγ[r]\P1 ⊆ perm[r] ⊆ permγ[r] ∪ P2 for example
and suppose |permγ[r]| = 10, α+ = 1.5, and α− = 0.9. This pair
of constraints states that r must have one permission (which is ran-
domly chosen from permγ[r]), and are allowed to have another 15
permissions (which are randomly chosen from P\permγ[r]) in ad-
dition to those in permγ[r]. In this sense, each pair of constraints
in Cran models a range of, for example, permissions that a role
could obtain. When α− ≥ 1, the pair of constraints is reduced to
perm[r] ⊆ permγ[r] ∪ P2. Finally, we believe these range con-
straints arise in practice; see Appendix C for discussions.
As for Cman, we manually create a number β of constraints of
the following patterns:
• role[p1] ∪ role[p2] ⊆ role[p3] ∩ role[p4] to let any role as-
signed to p1 or p2 have both p3 and p4 as well,
• |user[p1] ∩ user[p2]| = 0 to support sod policy regarding p1
and p2, and
5Ene et al.
[8] applied their RE algorithms to real-world ac-
cess control rules and obtained these RBAC conﬁgurations, which
are available at: http://www.hpl.hp.com/personal/