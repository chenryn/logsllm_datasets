set @a=1 a :=1;
类型转换：
type1::type2(eg: '12'::int)
1 char(n) char(n)
2 varchar(n) text
3 int int
4 bigint bigint
5 datetime timestamp
6 money numeric(19,4)
7 date date
8 double double
9 float float
10 numeric numeric ‐‐经纬度
11 image bytea
12 bool bool
13 uniqueidentifier uuid
14 varbinary bytea
15 timestamp interval
16 datetime current_timestamp(0)::timestamp;
17 /now()::timestamp事务时间;
18 clock_timestamp()::timestamp；
19 ## 2017‐08‐24 09:44:19.507167
20 ## 不加timestamp会带时区
function函数转换:
1 isnull() coalesce()
2 datalength() octet_length()
3 len() length()
4 convert() ::type /(cast())
5 'str1'+'str2' 'str1'||'str2';
6 exists() exists()
7 ltrim()/rtrim() trim()
8 lower() lower()
9 upper() upper()
10 round(arg1,0) round(arg1) [round(2.22)==2]
11 floor(arg1) floor(arg1) [取=arg1最小的整数]
13 substring('dfadf', 1, 2)[df] substr()
14 charindex(';', 'fasd;fds', 2) position(';' in 'fasd;fds')
15 getdate() now();
16 dateadd() now()+interval '3 months'; ‐‐如果数字是参数形式传入，
需要使用类似：now() + make_interval(days => 1‐i)
17 DATEDIFF(day, starttime, endtime) date_part('day', endtime ‐
starttime))
18 datepart() date_part('week', now());
19 ‐‐获取到周
20 split_part('d1,d2,d3',',', 2)
数组与字符串之间的转换:
1 arg text [];
2 arg :=string_to_array('df,asd,fa', ',')
3
4 arg text;
5 arg :=array_to_string(array['dfa','dfas','fds'], '?')
6 dfa?dfas?fds
7 postgres=# select t1, array_agg(t2) from t03 group by t1;
8 t1 | array_agg
9 ‐‐‐‐+‐‐‐‐‐‐‐‐‐‐‐‐
10 b | {xxx,yyy}
11 a | {10,20,30}
12 (2 rows)
13 postgres=# select t1, array_to_string(array_agg(t2), ',') from t03 group
by t1;
14 t1 | array_to_string
15 ‐‐‐‐+‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
16 b | xxx,yyy
17 a | 10,20,30
18 (2 rows)
长度不足补'0'(lpad\rpad)
1 greenerp2018=> select lpad('9', 6, '0');
2 lpad
3 ‐‐‐‐‐‐‐‐
4 000009
5 (1 row)
异常捕获
1 begin
2 statment
3 exception
4 when **(others) then
5 out_result:=0;
6 end;
select ** into ** from tab1;
IF NOT FOUND THEN
RAISE EXCEPTION 'No flight at %.', $1;
END IF;
临时表：
1 select * into #t12 from table01;
2 改成：
3 create temp table tmp_t12 on commit drop as select * from table01;
4
5 with … as…
影响的行数：
1 rowcount ==>GET DIAGNOSTICS v_count = ROW_COUNT;
2 while 1=1 loop ‐‐批量删除数据
3 delete from t_inofaout_zcq where trade_id=in_trade_id and
in_trade_id>0 and rq> in_start_date and rq File_ID SERIAL NOT NULL
returning 赋值的变量需要返回
参数默认值 in aaa int default 1
with用法:
1 with ntb as (select a,b,c from tab2) select b,c from ntb where ntb=1;
如果返回的数据根据判断条件不同返回不同的数据集，就不要在function参数中写
out，returns record就行（返回相同类型的数据集时returns setof record），然后
在不同的条件中return query
选择结构：
1 case when a=1 then b:=2
2 when …
3 when …
4 else …
5 end
存储过程中调用存储过程？
1 sqlserver中是exec，转为如果这个函数是返回单值的，就直接调用函数即可：v_info :=
f_getinfo('aaaaa');
2 如果只返回一行数据，应该也可以这样。
3 如果是返回多行的，用
4 for rec in select * from func_name('xxxx') loop
5 …
6 end loop;
returns tables(a text, b text)
返回单行多列的数据集，直接写out，return record就行，不需要setof;
1 create or replace function GetDate(
2 in in_month int,
3 out v_date1 date,
4 out v_date2 date
5 ) returns record
6 as $$
7 BEGIN
8 v_date1 :=now();
9 v_date2 :=now()+make_interval(months => in_month);
10 return;
11 END;
12 $$ LANGUAGE plpgsql;
查看表字段类型：
1 select
table_schema,table_name,column_name,data_type,column_default,is_nullable
2 from information_schema.columns
3 where table_name = 'nginx_log';
4
当只返回单个字段时，returns type要和输出的数据的类型一致。
1 create or replace function GetDate2(
2 in in_date varchar(23),
3 in in_day_num int,
4 out v_date1 varchar(30)
5 )returns varchar
6 as $$
7 begin
8 v_date1 :=to_char(to_date(in_date, 'yyyy‐MM‐DD')+make_interval(days
=> in_day_num), 'yyyy‐MM‐DD');
9 end ;
10 $$
11 language 'plpgsql';
SELECT to_number('21.44', '99D99') 换成 ::float
调用单个返回值的函数，不要用select f_xxxx()，而要用v_result := f_xxxx();
游标替换：
1 CREATE or replace function pro_effuse_dtl_gw_update() returns void
2 as $$
3 declare
4 rec record;
5 arg int;
6 begin
7 for rec in select effuse_detail_id, to_char(stock_date, 'yyyy‐MM‐DD')
as stock_date
8 from sell_effuse m, sell_effuse_detail d
9 where m.effuse_id=d.effuse_id and m.sell_month='2017‐07‐15' and
m.status=1
10 loop
11 arg :=pro_effuse_detail_update_dep(rec.effuse_detail_id);
12 ‐‐ 函数调用时，有返回值的一定要用参数承接，不用select调用
13 end loop;
14 end;
15 $$
16 language 'plpgsql';
select * from function1(arg1..) a, tab2 b where a.col1=b.col2;
如果不想处理函数的返回值可以使用perform关键字:
1 CREATE OR REPLACE FUNCTION f_test16(in in_id1 int)
2 RETURNS int
3 AS $$
4 DECLARE
5 rec record;
6 BEGIN
7 perform f_test15(10);
8 return 10;
9 END;
10 $$ LANGUAGE plpgsql;
查看执行过程，一般看看执行的过程时间：
1 EXPLAIN select * from tab; ‐‐伪执行
2 EXPLAIN ANALYZE select * from tab;
'pub_doc','pub_employee','pub_employee1' ­­这几张表涉及null、image信息
需要使用psycopg2.Binary(content)将image类型字符串转义
键和索引：
1 添加主键：alter table sell_effuse add primary key (effuse_id);
2 添加外键：alter table sell_effuse_detail add constraint
fk_sell_effuse_detail_foreign_effuseid
3 foreign key(effuse_id) references sell_effuse(effuse_id);
4 删除外键：alter table sell_effuse_detail drop constraint
fk_sell_effuse_detail_foreign_effuseid ;
5
6 pg创建索引
7 单字段索引：
8 CREATE INDEX index_name ON table_name (field1);
9 联合索引：
10 CREATE INDEX index_name ON table_name (field1,field2);
11 条件(部分)索引：
12 CREATE INDEX index_name ON table_name (field1) WHERE field1 > 100;
13 注意：想要使用条件索引，在使用select语句时，where条件最好加上field>100（最少
100）的条件，否则索引很可能利用不到。
14
15 块范围索引
16 create index idx_t1_id on t1 using brin (id); ‐‐默认情况下
pages_per_range为128
17 brin索引的使用方法：create index idx_t03_id on t03 using brin(id)
with(pages_per_range=256);
18
19 创建索引时，可以通过包含选项ASC, DESC, NULLS FIRST, 和/或 NULLS LAST调整B‐
tree索引的顺序；例如：
20 CREATE INDEX test2_info_nulls_low ON test2 (info NULLS FIRST);
21 CREATE INDEX test3_desc_index ON test3 (id DESC NULLS LAST);
22
23 数组字段创建索引，建议gin索引？
24
25 各类索引的使用场景和优缺点
26 CREATE TABLE test1 (
27 id integer,
28 content varchar
29 );
30 普通索引
31 CREATE INDEX test1_id_index ON test1 (id);
32
33 hash
34 CREATE INDEX name ON table using hash (column);
35
36 唯一索引