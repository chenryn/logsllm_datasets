### Notation and Definitions
- **n, m**: The number of keywords in an index keyword set and a query, respectively.
- For simplicity, we denote \( pk_S \) and \( pk_R \) by \( pk \), and \( sk_S \) and \( sk_R \) by \( sk \).

From Table 2, it is evident that the storage cost of the index in our scheme is significantly lower than in other schemes. Additionally, the storage cost of \( pk \) is also the smallest among all schemes. Given that \( n \) is not large and the storage cost of \( |Z_q| \) is minimal, the storage cost of \( sk \) and the trapdoor in our scheme remains practical, comparable to other schemes.

### 5.2. Experimental Results

#### 5.2.1. Experimental Setup
Our experiments were conducted on an Intel(R) Core(TM) i7 CPU at 3.40 GHz with 16 GB of memory. We chose Java for implementation due to its cross-platform capabilities and the availability of the Java Pairing Based Cryptography (JPBC) library [32] for bilinear pairing. The dataset used was the Enron e-mail dataset [33], from which we randomly selected 1,000 e-mail messages. Each document's keyword list was extracted, containing between 5 and 25 words. We implemented the schemes from References [7,8,10] and our proposed scheme in the same environment to compare their time and space overheads (source code available at: http://www.inforstation.com/webservers/SPE-CKS/).

#### 5.2.2. Time Overhead
The time overhead was evaluated in terms of key generation, index building, trapdoor generation, and testing. The results are presented in Figure 2.

1. **Key Generation**:
   - Due to the use of dual pairing vector space (DPVS) [8], the time complexity of key generation in OT15 is \( O(n^2) \).
   - The time cost of key generation in the other three schemes is linear with \( n \).

2. **Index Building**:
   - The time cost of index building in ZZ11, OT15, and our scheme is linear with \( n \).
   - Our scheme has a lower time cost compared to ZZ11 and OT15.
   - As \( n \) increases (e.g., \( n > 10 \)), the time cost of index building in ZLW19 becomes higher than in our scheme, as it is linear with \( n^2 \).

3. **Trapdoor Generation**:
   - The time cost of trapdoor generation in ZZ11, OT15, and our scheme is linear with \( n \).
   - Our scheme requires less time due to fewer exponentiation operations.
   - The time cost of trapdoor generation in ZLW19 is linear with \( m \). Since \( m < n \), the time cost in our scheme is slightly more than in ZLW19.

4. **Testing**:
   - The time cost of testing in all four schemes is linear with \( n \).
   - Compared to ZZ11 and ZLW19, our scheme requires fewer pairing operations.
   - Compared to OT15, our scheme requires fewer exponentiation operations on group elements.
   - Given that the time cost of exponentiation is only one-fourth that of pairing, our solution has a lower test time.

#### 5.2.3. Space Overhead
This experiment evaluates the space cost of \( pk \), \( sk \), index, and trapdoor. The results are shown in Figure 3.

1. **pk Size**:
   - The size of \( pk \) in all four schemes is linear with \( n \).
   - Our scheme is the most efficient, requiring fewer elements in group \( G_1 \).

2. **sk Size**:
   - ZZ11 requires only one integer in \( Z_q \).
   - Although the \( sk \) size in OT15, ZLW19, and our scheme is linear with \( n \), both ZLW19 and our scheme have a smaller space cost because the space cost of \( Z_q \) is less than that of \( G_1 \).
   - The \( sk \) size in our scheme is half that of ZLW19.

3. **Index Size**:
   - Our scheme requires less space than OT15 and ZLW19, even though the index size of OT15, ZLW19, and our scheme is linear with \( n \).
   - This aligns with the theoretical analysis. The index size of ZLW19 is linear with \( n^2 \), making it less efficient than our scheme.

4. **Trapdoor Size**:
   - The space complexity of the trapdoor in OT15 and ZLW19 is \( O(1) \) and \( O(m) \), respectively, resulting in lower storage costs.
   - The space cost of the trapdoor in ZZ11 and our scheme is linear with \( n \).
   - Our scheme requires less storage for the trapdoor compared to ZZ11 due to fewer group elements.

### 5.2.4. Discussion
Based on theoretical analysis and experimental results, our scheme outperforms ZZ11 except in key generation time and \( sk \) storage. Key generation is infrequent, and \( sk \) is stored in limited copies, making our scheme more practical overall. Compared to OT15, our scheme is better except for trapdoor space cost. Given that \( n \) is not very large, our scheme is more practical. Compared to ZLW19, our scheme is better except for trapdoor generation time and space cost, which are linear with \( m \). Since \( n \) and \( m \) are typically small, our scheme remains more practical.

For our scheme, when \( n = 10 \):
- The average time costs for index building and testing per document are 63 ms and 62 ms, respectively.
- The average time costs for key and trapdoor generation are 10 ms and 119 ms, respectively.
- This makes our scheme highly practical in mobile settings with limited computational capacity.
- The index structure allows each document to have its own index, enabling parallel computation to accelerate index building and testing.
- Our scheme efficiently supports dynamic operations like document deletion and insertion, making it suitable for real-world e-mail systems.

### 6. Conclusions
In this paper, we propose a secure and efficient SPE-CKS scheme for multi-keyword search over encrypted e-mail data. Theoretical analysis and experimental results show that our scheme outperforms previous SPE-CKS schemes in terms of time and space complexities. An experiment on a real-world e-mail dataset demonstrates the practicality of our scheme in a mobile cloud setting. Future work will focus on constructing a secure and efficient SPE scheme supporting advanced search functions such as disjunctive, Boolean, and fuzzy keyword searches.

### Author Contributions
- **Conceptualization**: Y.Z. and Y.L.
- **Data Curation**: Y.Z. and Y.L.
- **Formal Analysis**: Y.Z. and Y.L.
- **Funding Acquisition**: Y.L.
- **Methodology**: Y.Z.
- **Software**: Y.Z. and Y.W.
- **Validation**: Y.Z., Y.L., and Y.W.
- **Writing—Original Draft**: Y.Z. and Y.L.
- **Writing—Review & Editing**: Y.Z., Y.L., and Y.W.

### Funding
This work was supported by the National Natural Science Foundation of China under Grant Nos. 61402393 and 61601396, and the Nanhu Scholars Program for Young Scholars of XYNU.

### Conflicts of Interest
The authors declare no conflict of interest.

### References
[References listed here, formatted as in the original text]