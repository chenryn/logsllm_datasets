When a new image is mapped into an x86 process, the WoW64 layer informs the simulator, which 
generated based on the executable image path and its internal binary data. The hashes are important be-
cause they avoid the execution of jitted blocks compiled for an old stale version of the executable image. 
module namemodule 
header hashmodule path hashmulti/uniproccache file version
The lazy jitter is the engine of the XtaCache. When the service decides to invoke it, a new version of 
low-privileged environment (AppContainer process), which runs in low-priority mode. The only job of 
the compiler is to compile the x86 code executed by the simulator. The new code blocks are added to the 
EXPERIMENT: Witnessing the XTA cache
Newer versions of Process Monitor can run natively on ARM64 environments. You can use 
In this experiment, you need an ARM64 system running at least Windows 10 May 2019 update 
(1903). Initially, you need to be sure that the x86 application used for the experiment has never 
before been executed by the system. In this example, we will install an old x86 version of MPC-HC 
media player, which can be downloaded from https://sourceforge.net/projects/mpc-hc/files/lat-
est/download. Any x86 application is well suited for this experiment though.
Install MPC-HC (or your preferred x86 application), but, before running it, open Process 
EXPERIMENT: Witnessing the XTA cache
Newer versions of Process Monitor can run natively on ARM64 environments. You can use 
In this experiment, you need an ARM64 system running at least Windows 10 May 2019 update 
(1903). Initially, you need to be sure that the x86 application used for the experiment has never 
before been executed by the system. In this example, we will install an old x86 version of MPC-HC 
media player, which can be downloaded from https://sourceforge.net/projects/mpc-hc/files/lat-
est/download. Any x86 application is well suited for this experiment though.
Install MPC-HC (or your preferred x86 application), but, before running it, open Process 
120 
CHAPTER 8 System mechanisms
Then launch MPC-HC and try to play some video. Exit MPC-HC and stop the event capturing in 
this experiment, you are not interested in the registry). 
compile the x86 image on its own and periodically sent information to the XtaCache. Later, the 
lazy jitter would have been invoked by a worker thread in the XtaCache. The latter created a new 
both itself and Xtac:
If you restart the experiment, you would see different events in Process Monitor: The cache 
execute it directly. As a result, the execution time should be faster. You can also try to delete the 
MPC-HC x86 application again.
command prompt window and insert the following commands:
takeown /f c:\windows\XtaCache 
icacls c:\Windows\XtaCache /grant Administrators:F
Then launch MPC-HC and try to play some video. Exit MPC-HC and stop the event capturing in 
this experiment, you are not interested in the registry). 
compile the x86 image on its own and periodically sent information to the XtaCache. Later, the 
lazy jitter would have been invoked by a worker thread in the XtaCache. The latter created a new 
both itself and Xtac:
If you restart the experiment, you would see different events in Process Monitor: The cache 
execute it directly. As a result, the execution time should be faster. You can also try to delete the 
MPC-HC x86 application again.
command prompt window and insert the following commands:
takeown /f c:\windows\XtaCache
icacls c:\Windows\XtaCache /grant Administrators:F
CHAPTER 8 System mechanisms
121
Jitting and execution
To start the guest process, the x86-on-ARM64 CPU simulator has no other chances than interpreting 
or jitting the x86 code. Interpreting the guest code means translating and executing one machine 
instruction at time, which is a slow process, so the emulator supports only the jitting strategy: it 
dynamically compiles x86 code to ARM64 and stores the result in a guest “code block” until certain 
conditions happen:
I 
An illegal opcode or a data or instruction breakpoint have been detected.
I 
A branch instruction targeting an already-visited block has been encountered.
I 
The block is bigger than a predetermined limit (512 bytes).
(indexed by its RVA) already exists. If the block exists in the cache, the simulator directly executes it 
using a dispatcher routine, which builds the ARM64 context (containing the host registers values) and 
stores it in the 64-bit stack, switches to the 32-bit stack, and prepares it for the guest x86 thread state. 
pop thunk used for transferring the execution from a CHPE to an x86 context. 
When the execution of the code block ends, the dispatcher does the opposite: It saves the new x86 
context in the 32-bit stack, switches to the 64-bit stack, and restores the old ARM64 context containing 
the state of the simulator. When the dispatcher exits, the simulator knows the exact x86 virtual address 
where the execution was interrupted. It can then restart the emulation starting from that new memory 
address. Similar to cached entries, the simulator checks whether the target address points to a memory 
page containing CHPE code (it knows this information thanks to the global CHPE bitmap). If that is the 
cache, and directly executes it.
executing native images. Otherwise, it needs to invoke the compiler for building the native translated 
code block. The compilation process is split into three phases: 
1.
The parsing stage builds instructions descriptors for each opcode that needs to be added in
the code block.
2.
The optimization
3. 
code generation
The generated code block is then added to the per-thread local cache. Note that the simulator 
cannot add it in the XTA cache, mainly for security and performance reasons. Otherwise, an attacker 
would be allowed to pollute the cache of a higher-privileged process (as a result, the malicious code 
the simulator does not have enough CPU time to generate highly optimized code (even though there is 
122 
CHAPTER 8 System mechanisms
However, information about the compiled x86 blocks, together with the ID of the binary hosting 
the x86 code, are inserted into the list mapped by the shared Trace buffer. The lazy jitter of the XTA 
cache knows that it needs to compile the x86 code jitted by the simulator thanks to the Trace buffer. As 
than the others.
System calls and exception dispatching
Under the x86-on-ARM64 CPU simulator, when an x86 thread performs a system call, it invokes the 
code located in the syscall page allocated by the simulator, which raises the exception 0x2E. Each x86 
exception forces the code block to exit. The dispatcher, while exiting from the code block, dispatches 
the exception through an internal function that ends up in invoking the standard WoW64 exception 
handler or system call dispatcher (depending on the exception vector number.) Those have been al-
ready discussed in the previous X86 simulation on AMD64 platforms section of this chapter.
EXPERIMENT: Debugging WoW64 in ARM64 environments
Newer releases of WinDbg (the Windows Debugger) are able to debug machine code run under 
any simulator. This means that in ARM64 systems, you will be able to debug native ARM64, ARM 
Thumb-2, and x86 applications, whereas in AMD64 systems, you can debug only 32- and 64-bit 
x86 programs. The debugger is also able to easily switch between the native 64-bit and 32-bit 
stacks, which allows the user to debug both native (including the WoW64 layer and the emulator) 
and guest code (furthermore, the debugger also supports CHPE.)
In this experiment, you will open an x86 application using an ARM64 machine and switch 
installing one of the kits, open the ARM64 version of Windbg (available from the Start menu.) 
generates, like Data Misaligned and in-page I/O errors (these exceptions are already handled 
Debug menu, click Event FiltersData 
Misaligned event and check the Ignore option box from the Execution group. Repeat the same 
for the In-page I/O-
EXPERIMENT: Debugging WoW64 in ARM64 environments
Newer releases of WinDbg (the Windows Debugger) are able to debug machine code run under 
any simulator. This means that in ARM64 systems, you will be able to debug native ARM64, ARM 
Thumb-2, and x86 applications, whereas in AMD64 systems, you can debug only 32- and 64-bit 
x86 programs. The debugger is also able to easily switch between the native 64-bit and 32-bit 
stacks, which allows the user to debug both native (including the WoW64 layer and the emulator) 
and guest code (furthermore, the debugger also supports CHPE.)
In this experiment, you will open an x86 application using an ARM64 machine and switch
installing one of the kits, open the ARM64 version of Windbg (available from the Start menu.)
generates, like Data Misaligned and in-page I/O errors (these exceptions are already handled 
Debug menu, click Event FiltersData 
Misaligned event and check the Ignore option box from the Execution group. Repeat the same 
for the In-page I/O-
CHAPTER 8 System mechanisms
123
Click Close, and then from the main debugger interface, select Open Executable from the 
File
folder. (In this example, we are using notepad.exe, but any x86 application works.) Also open 
correctly (refer to the https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/
symbol-path-
k command:
0:000> k  
# Child-SP
RetAddr
Call Site 
00 00000000`001eec70 00007ffb`bd47de00 ntdll!LdrpDoDebuggerBreak+0x2c 
01 00000000`001eec90 00007ffb`bd47133c ntdll!LdrpInitializeProcess+0x1da8 
02 00000000`001ef580 00007ffb`bd428180 ntdll!_LdrpInitialize+0x491ac 
03 00000000`001ef660 00007ffb`bd428134 ntdll!LdrpInitialize+0x38 
04 00000000`001ef680 00000000`00000000 ntdll!LdrInitializeThunk+0x14
The simulator is still not loaded at this time: The native and CHPE Ntdll have been mapped 
into the target binary by the NT kernel, while the WoW64 core binaries have been loaded by the 
native Ntdll just before the breakpoint via the LdrpLoadWow64 function. You can check that by 
enumerating the currently loaded modules (via the lm command) and by moving to the next 
frame in the stack via the .f+ command. In the disassembly window, you should see the invoca-
tion of the LdrpLoadWow64 routine:
00007ffb`bd47dde4 97fed31b bl
ntdll!LdrpLoadWow64 (00007ffb`bd432a50)
Click Close, and then from the main debugger interface, select Open Executable from the 
File
folder. (In this example, we are using notepad.exe, but any x86 application works.) Also open 
correctly (refer to the https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/
symbol-path-
k command:
k command:
k
0:000> k 
# Child-SP
RetAddr
Call Site
00 00000000`001eec70 00007ffb`bd47de00 ntdll!LdrpDoDebuggerBreak+0x2c
01 00000000`001eec90 00007ffb`bd47133c ntdll!LdrpInitializeProcess+0x1da8
02 00000000`001ef580 00007ffb`bd428180 ntdll!_LdrpInitialize+0x491ac
03 00000000`001ef660 00007ffb`bd428134 ntdll!LdrpInitialize+0x38
04 00000000`001ef680 00000000`00000000 ntdll!LdrInitializeThunk+0x14
The simulator is still not loaded at this time: The native and CHPE Ntdll have been mapped 
into the target binary by the NT kernel, while the WoW64 core binaries have been loaded by the 
native Ntdll just before the breakpoint via the LdrpLoadWow64 function. You can check that by 
enumerating the currently loaded modules (via the lm command) and by moving to the next 
frame in the stack via the .f+ command. In the disassembly window, you should see the invoca-
tion of the LdrpLoadWow64 routine:
00007ffb`bd47dde4 97fed31b bl
ntdll!LdrpLoadWow64 (00007ffb`bd432a50)
124 
CHAPTER 8 System mechanisms
Now resume the execution with the g command (or F5 key). You should see multiple modules 
being loaded in the process address space and another breakpoint raising, this time under the 
x86 context. If you again display the stack via the k command, you can notice that a new column 
0:000:x86> k 
 #   Arch ChildEBP RetAddr   
00    x86 00acf7b8 77006fb8 ntdll_76ec0000!LdrpDoDebuggerBreak+0x2b 
01   CHPE 00acf7c0 77006fb8 ntdll_76ec0000!#LdrpDoDebuggerBreak$push_thunk+0x48 
02   CHPE 00acf820 76f44054 ntdll_76ec0000!#LdrpInitializeProcess+0x20ec 
03   CHPE 00acfad0 76f43e9c ntdll_76ec0000!#_LdrpInitialize+0x1a4 
04   CHPE 00acfb60 76f43e34 ntdll_76ec0000!#LdrpInitialize+0x3c 
05   CHPE 00acfb80 76ffc3cc ntdll_76ec0000!LdrInitializeThunk+0x14
If you compare the new stack to the old one, you will see that the stack addresses have drasti-
cally changed (because the process is now executing using the 32-bit stack). Note also that some 
containing CHPE code. At this point, you can step into and over x86 code, as in regular x86 
operating systems. The simulator takes care of the emulation and hides all the details. To observe 
how the simulator is running, you should move to the 64-bit context through the .effmach 
command. The command accepts different parameters: x86 for the 32-bit x86 context; arm64 or 
amd64 for the native 64-bit context (depending on the target platform); arm for the 32-bit ARM 
Thumb2 context; CHPE for the 32-bit CHPE context. Switching to the 64-bit stack in this case is 
achieved via the arm64 parameter:
0:000:x86> .effmach arm64 
Effective machine: ARM 64-bit (AArch64) (arm64) 
0:000> k 
 # Child-SP
RetAddr
Call Site 
00 00000000`00a8df30 00007ffb`bd3572a8 wow64!Wow64pNotifyDebugger+0x18f54 
01 00000000`00a8df60 00007ffb`bd3724a4 wow64!Wow64pDispatchException+0x108 
02 00000000`00a8e2e0 00000000`76e1e9dc wow64!Wow64RaiseException+0x84 
03 00000000`00a8e400 00000000`76e0ebd8 xtajit!BTCpuSuspendLocalThread+0x24c 
04 00000000`00a8e4c0 00000000`76de04c8 xtajit!BTCpuResetFloatingPoint+0x4828 
05 00000000`00a8e530 00000000`76dd4bf8 xtajit!BTCpuUseChpeFile+0x9088 
06 00000000`00a8e640 00007ffb`bd3552c4 xtajit!BTCpuSimulate+0x98 
07 00000000`00a8e6b0 00007ffb`bd353788 wow64!RunCpuSimulation+0x14 
08 00000000`00a8e6c0 00007ffb`bd47de38 wow64!Wow64LdrpInitialize+0x138 
09 00000000`00a8e980 00007ffb`bd47133c ntdll!LdrpInitializeProcess+0x1de0 
0a 00000000`00a8f270 00007ffb`bd428180 ntdll!_LdrpInitialize+0x491ac 
0b 00000000`00a8f350 00007ffb`bd428134 ntdll!LdrpInitialize+0x38 
0c 00000000`00a8f370 00000000`00000000 ntdll!LdrInitializeThunk+0x14
thunk has been invoked to restart the simulation to the LdrpDoDebuggerBreak x86 function, 
which caused an exception (managed through the native Wow64RaiseException
debugger via the Wow64pNotifyDebugger routine. With Windbg and the .effmach command, 
you can effectively debug multiple contexts: native, CHPE, and x86 code. Using the g @$exen-
try command, you can move to the x86 entry point of Notepad and continue the debug session 
of x86 code or the emulator itself. You can restart this experiment also in different environments, 
debugging an app located in SysArm32, for example. 
Now resume the execution with the g command (or F5 key). You should see multiple modules 
being loaded in the process address space and another breakpoint raising, this time under the 
x86 context. If you again display the stack via the k command, you can notice that a new column 
k command, you can notice that a new column 
k
0:000:x86> k
 #   Arch ChildEBP RetAddr  
00    x86 00acf7b8 77006fb8 ntdll_76ec0000!LdrpDoDebuggerBreak+0x2b
01   CHPE 00acf7c0 77006fb8 ntdll_76ec0000!#LdrpDoDebuggerBreak$push_thunk+0x48
02   CHPE 00acf820 76f44054 ntdll_76ec0000!#LdrpInitializeProcess+0x20ec
03   CHPE 00acfad0 76f43e9c ntdll_76ec0000!#_LdrpInitialize+0x1a4
04   CHPE 00acfb60 76f43e34 ntdll_76ec0000!#LdrpInitialize+0x3c
05   CHPE 00acfb80 76ffc3cc ntdll_76ec0000!LdrInitializeThunk+0x14
If you compare the new stack to the old one, you will see that the stack addresses have drasti-
cally changed (because the process is now executing using the 32-bit stack). Note also that some 
containing CHPE code. At this point, you can step into and over x86 code, as in regular x86 
operating systems. The simulator takes care of the emulation and hides all the details. To observe 
how the simulator is running, you should move to the 64-bit context through the .effmach
command. The command accepts different parameters: x86 for the 32-bit x86 context; arm64 or 
amd64 for the native 64-bit context (depending on the target platform); arm for the 32-bit ARM 
Thumb2 context; CHPE for the 32-bit CHPE context. Switching to the 64-bit stack in this case is 
achieved via the arm64 parameter:
0:000:x86> .effmach arm64
Effective machine: ARM 64-bit (AArch64) (arm64)
0:000> k
 # Child-SP
RetAddr
Call Site
00 00000000`00a8df30 00007ffb`bd3572a8 wow64!Wow64pNotifyDebugger+0x18f54
01 00000000`00a8df60 00007ffb`bd3724a4 wow64!Wow64pDispatchException+0x108
02 00000000`00a8e2e0 00000000`76e1e9dc wow64!Wow64RaiseException+0x84
03 00000000`00a8e400 00000000`76e0ebd8 xtajit!BTCpuSuspendLocalThread+0x24c
04 00000000`00a8e4c0 00000000`76de04c8 xtajit!BTCpuResetFloatingPoint+0x4828
05 00000000`00a8e530 00000000`76dd4bf8 xtajit!BTCpuUseChpeFile+0x9088
06 00000000`00a8e640 00007ffb`bd3552c4 xtajit!BTCpuSimulate+0x98
07 00000000`00a8e6b0 00007ffb`bd353788 wow64!RunCpuSimulation+0x14
08 00000000`00a8e6c0 00007ffb`bd47de38 wow64!Wow64LdrpInitialize+0x138
09 00000000`00a8e980 00007ffb`bd47133c ntdll!LdrpInitializeProcess+0x1de0
0a 00000000`00a8f270 00007ffb`bd428180 ntdll!_LdrpInitialize+0x491ac
0b 00000000`00a8f350 00007ffb`bd428134 ntdll!LdrpInitialize+0x38
0c 00000000`00a8f370 00000000`00000000 ntdll!LdrInitializeThunk+0x14
thunk has been invoked to restart the simulation to the LdrpDoDebuggerBreak x86 function, 
LdrpDoDebuggerBreak x86 function, 
LdrpDoDebuggerBreak
which caused an exception (managed through the native Wow64RaiseException
debugger via the Wow64pNotifyDebugger routine. With Windbg and the .effmach command, 
you can effectively debug multiple contexts: native, CHPE, and x86 code. Using the g @$exen-
try command, you can move to the x86 entry point of Notepad and continue the debug session 
of x86 code or the emulator itself. You can restart this experiment also in different environments, 
debugging an app located in SysArm32, for example. 
CHAPTER 8 System mechanisms
125
Object Manager
As mentioned in Chapter 2 of Part 1, “System architecture,” Windows implements an object model to 
provide consistent and secure access to the various internal services implemented in the executive. This 
section describes the Windows Object Manager, the executive component responsible for creating, 
deleting, protecting, and tracking objects. The Object Manager centralizes resource control operations 
that otherwise would be scattered throughout the operating system. It was designed to meet the goals 
listed after the experiment.
EXPERIMENT: Exploring the Object Manager
Manager database. These experiments use the following tools, which you should become famil-
I 
information about objects (such as the reference count, the number of open handles, secu-
rity descriptors, and so forth). WinObjEx64, available on GitHub, is a similar tool with more
advanced functionality and is open source but not endorsed or signed by Microsoft.
I 
Process Explorer and Handle from Sysinternals, as well as Resource Monitor (introduced in
Chapter 1 of Part 1) display the open handles for a process. Process Hacker is another tool
that shows open handles and can show additional details for certain kinds of objects.
I 
The kernel debugger !handle extension displays the open handles for a process, as does the
Io.Handles data model object underneath a Process such as @$curprocess.
WinObj and WinObjEx64 provide a way to traverse the namespace that the Object Manager 
EXPERIMENT: Exploring the Object Manager