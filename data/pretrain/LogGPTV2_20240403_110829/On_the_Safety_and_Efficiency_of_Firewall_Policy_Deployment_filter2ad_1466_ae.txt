### Optimized Text

**Flow Rates and Processing Capacity:**
- The system operates with flow rates \(\lambda_{i1}, \lambda_{i2}, ..., \lambda_{iki}\).
- The processing capacity is \(c\left(\sum_{i=1}^{m} s_i\right)\).
- An overload condition occurs if the processing capacity exceeds \(0.9c\left(\sum_{i=1}^{m} s_i\right)\).
- The runtime throughput is denoted by \(\eta\).

**VFW Controller Heuristic Approach:**
The VFW Controller uses a three-step heuristic approach to determine the minimum number of new instances to create and the distribution of firewall rule groups.

**Step 1: Estimation of Minimum Instances:**
- The VFW Controller estimates the minimum number of new instances required.
- If \(\eta > 0.9c\left(\sum_{i=1}^{m} s_i\right)\), the amount of traffic to be shunted away from the overloaded virtual firewall is \(\sum_{j=1}^{k_i} \lambda_{ij} - \eta\). This traffic will be handled by the new instances, each of which must guarantee a processing capacity of \(\Phi\) as per the SLA.
- If \(S < c^{-1}(\Phi)\), the number of firewall rules that must be migrated is \(\sum_{i=1}^{m} s_i - c^{-1}(\Phi)\), which will be split among the new instances, each constrained by an upper bound \(c^{-1}(\Phi)\).
- The floor operation in the estimate implies that the estimate may be smaller than required.

**Step 2: ILP for Firewall Rule Distribution:**
- The VFW Controller uses Integer Linear Programming (ILP) to solve for the distribution of firewall rules.
- Let \(x = \{x_{11}, ..., x_{mn}\}\) be a set of unknown variables, where \(x_{ij} \in \{0, 1\}\) indicates whether firewall rule group \(V_i\) is migrated to new instance \(j\).
- The ILP formulation is as follows:
  - Minimize \(\sum_{i=1}^{m} \sum_{j=1}^{n} x_{ij} \gamma_i\)
  - Subject to:
    1. \(x_{ij} \in \{0, 1\}\) for all \(1 \leq i \leq m\), \(1 \leq j \leq n\)
    2. \(\sum_{j=1}^{n} x_{ij} \leq 1\) for all \(1 \leq i \leq m\)
    3. \(\sum_{i=1}^{m} x_{ij} \beta_i \leq B\) for all \(1 \leq j \leq n\)
    4. \(\sum_{i=1}^{m} x_{ij} s_i \leq c^{-1}(\Phi)\) for all \(1 \leq j \leq n\)
    5. \(\sum_{i=1}^{m} x_{ij} \left(\sum_{l=1}^{k_i} \lambda_{il}\right) \leq 0.9c\left(\sum_{i=1}^{m} s_i\right)\) for all \(1 \leq j \leq n\)
    6. \(\sum_{j=1}^{n} \left(\sum_{i=1}^{m} x_{ij} s_i\right) \leq c^{-1}(\Phi)\)

- Solving this ILP formulation, we obtain \(x\). If \(x_{ij} = 1\), then firewall rule group \(V_i\) is migrated to new instance \(j\). If \(x_{ij} = 0\) for all \(j\), then firewall rule group \(V_i\) stays on the old virtual firewall. If no solution is found, proceed to Step 3.

**Step 3: Incremental Increase:**
- Increase \(n\) by one and repeat Step 2 until a solution is found.

**Optimal Scaling-In:**
- The VFW Controller considers a virtual firewall underloaded if its runtime throughput is 50% less than its processing capacity.
- When more than one virtual firewall is underloaded, the VFW Controller merges them using the following ILP formulation to determine the maximum number of virtual firewalls to be killed while meeting the constraints:
  - Each remaining virtual firewall must not be overloaded after the mergence.
  - Each remaining virtual firewall must not have its buffer space overflowed.
  - Each remaining virtual firewall must satisfy the SLA.
  - The total update cost in the mergence is bounded by a predefined value \(\gamma\).

- Suppose there are \(n\) underloaded virtual firewalls. Underloaded virtual firewall \(j\) has:
  - A set of \(m_j\) firewall rule groups \(\{V_{j1}, V_{j2}, ..., V_{jm_j}\}\) with group \(V_{ji}\) having a rule size of \(s_{ji}\) and \(k_{ji}\) matching traffic flows with the flow rates of \(\lambda_{ji1}, \lambda_{ji2}, ..., \lambda_{jik_{ji}}\).
  - A processing capacity of \(c\left(\sum_{i=1}^{m_j} s_{ji}\right)\) and a runtime throughput of \(\eta_j\).

- Let \(x = \{x_{11}, ..., x_{nn}\}\) be a set of unknown variables, where \(x_{qj} \in \{0, 1\}\) indicates whether underloaded virtual firewall \(j\) is merged onto \(q\).
- The ILP formulation is as follows:
  - Maximize \(\sum_{j=1}^{n} \sum_{q=1}^{n} x_{qj}\)
  - Subject to:
    1. \(x_{qj} \in \{0, 1\}\) for all \(1 \leq q \leq n\), \(1 \leq j \leq n\)
    2. \(x_{qq} = 0\) for all \(1 \leq q \leq n\)
    3. \(\sum_{q=1}^{n} x_{qj} \leq 1\) for all \(1 \leq j \leq n\)
    4. \(\sum_{i=1}^{m_q} s_{qi} + \sum_{j=1}^{n} x_{qj} s_{ji} \leq c^{-1}(\Phi)\) for all \(1 \leq q \leq n\)
    5. \(\sum_{i=1}^{m_q} \beta_{qi} + \sum_{j=1}^{n} x_{qj} \beta_{ji} \leq B\) for all \(1 \leq q \leq n\)
    6. \(\sum_{i=1}^{m_q} \left(\sum_{l=1}^{k_{qi}} \lambda_{qil}\right) + \sum_{j=1}^{n} x_{qj} \left(\sum_{i=1}^{m_j} \sum_{l=1}^{k_{ji}} \lambda_{jil}\right) \leq 0.9c\left(\sum_{i=1}^{m_q} s_{qi}\right)\) for all \(1 \leq q \leq n\)
    7. \(\sum_{j=1}^{n} x_{qj} \gamma_{ji} \leq \gamma\) for all \(1 \leq q \leq n\)

- Solving this ILP formulation, we obtain all \(x_{qj}\). If \(x_{qj} = 1\), then virtual firewall \(j\) is merged onto \(q\). If \(\sum_{q=1}^{n} x_{qj} = 0\), then virtual firewall \(j\) remains. The maximum number of virtual firewalls to be killed is \(\sum_{q=1}^{n} x_{qj}\).

**Avoiding Frequent Scaling:**
- In cases where scaling-out or scaling-in occurs frequently, a potential solution is to set a threshold of frequency above which the scaling process is not allowed. The suggested threshold depends on the scaling performance of the VFW Controller, which can be measured in practice.

### Implementation and Evaluation

**Implementation:**
- We have implemented a prototype of the VFW Controller on top of ClickOS [38], a Xen-based NFV platform optimized for fast provision of virtualized network functions at scale.
- ClickOS creates small VMs (each less than 12MB) and boots one instance within 30 milliseconds.
- We have enhanced ClickOS to provide stateful virtual firewalls using Click modular router software [33]. Click provides rich networking processing elements, including IPFilter, IPClassifier, and IPFragmenter, which we used to implement firewall packet processing.
- We developed new Click elements for firewall rule management, buffer management, and interfaces for migrating rules and states. We also created a programming interface on top of XL [10] for VFW Controller to exert migration controls on individual virtual firewalls.

**Key Functions:**
- Key functions of the VFW Controller have been realized as individual modules:
  - **Dependency Analysis Module:** Based on Header Space Library (Hassel) [4], a tool for static header space analysis.
  - **Flow Update Analysis Module:** Finds the correct flow updates and calculates update costs.
  - **Buffer Cost Analysis Module:** Calculates buffer costs.
  - **Optimal Scaling Calculation Module:** Realizes the approaches for optimal scaling by calling a Matlab ILP solver.
- The VFW Controller also includes a Floodlight module that implements the Floodlight SDN controller.