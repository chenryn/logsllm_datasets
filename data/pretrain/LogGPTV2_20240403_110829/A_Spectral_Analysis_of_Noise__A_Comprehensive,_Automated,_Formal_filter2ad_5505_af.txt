5 should be an improvement, so we alternatively consider
sending the sensitive payload as message 3 of pattern X1X
with Alice as the initiator, which is labelled Level 5. However,
under the above threat model t, this payload is not secret
with X1X, since there is an attack when Alice’s ephemeral
key can be revealed (Re). This means that an ‘upgrade’ from
a Level 3 to a Level 5 leads to an attack on secrecy, which
the Level 3 handshake message would have prevented.
Note that we automatically identiﬁed this example from
the table of all STMs, again illustrating our framework’s ex-
pressiveness.
USENIX Association
29th USENIX Security Symposium    1871
5.3 PSK Handshakes
There are no security claims about PSK patterns in the Noise
speciﬁcation. Our method automatically discovers the detailed
Source and Destination properties of PSK patterns and we
discuss our results here.
5.3.1 Degrees of PFS
As an illustration, we focus here on the insight we can gain
from applying this methodology to secrecy from the sender’s
point of view. In particular, our analysis reveals three slightly
different ﬂavors of PFS, whose distinction can be crucial for
protocol designers.
The ﬁrst ﬂavor (mapping to non-PSK Destination Level 5)
corresponds to PFS relying on asymmetric keys: the attacker
must have compromised the static keys before the session took
place in order to break the secrecy of the messages. However,
they can compromise the PSK before or after the session.
The second ﬂavor is reverse: the PFS guarantee relies on
the PSK only. The attacker must have compromised the PSK
before the session took place, but they may compromise the
static keys before or after the session.
The third ﬂavor is the intersection of the two previous
sets of guarantees, which is a kind of PFS that leverages
both the PSK and asymmetric keys. The attacker must have
compromised both the static key and the PSK before the
session took place.
To illustrate why these distinctions are beneﬁcial, consider
the example of WireGuard (based on IKpsk2). WireGuard
justiﬁes using a PSK pattern by invoking post-quantum
resistance [13, § V. B.], and allows the use of a public
dummy PSK. PFS relying on asymmetric keys only is not
post-quantum resistant, and PFS relying on the PSK only fails
when using a public PSK. Therefore only the aforementioned
third form of PFS is suitable for WireGuard’s goals. In
contrast, the Noise speciﬁcation deﬁnes 6 levels, and in
particular cannot distinguish between these ﬂavors of PFS,
while we do make this distinction and, moreover, effectively
distinguish between 16 levels.
5.3.2 Non-PSK versus dummy PSK
As mentioned before, the Noise speciﬁcation allows PSK-
patterns to be used without securely distributing a PSK by
setting the PSK to a public value like 0, called a dummy PSK.
We model the public nature of these dummy PSKs by consid-
ering PSK-patterns where the PSK is immediately revealed
to the adversary. We now compare such protocols with public
dummy keys to the corresponding non-PSK patterns. Surpris-
ingly, we ﬁnd their security properties differ.
Before the ﬁrst psk or DH token, PSK and non-PSK
patterns have a different policy with respect to payload
encryption. Non-PSK patterns send payloads in clear text,
whereas PSK patterns send them with AEAD with a public
value as the symmetric key. This has consequences for
agreement and anonymity properties.
Agreement: The ﬁrst message of some non-PSK patterns
like NN (see Figure 2a) is Source Level 0.0 because the
recipient cannot distinguish them from the second message
of the handshake. Thus, even with a passive adversary,
a recipient can mistake the second message of another
handshake for a ﬁrst message and falsely conclude that he
has agreed upon a session with this non-existent initiator.
In the corresponding PSK-handshake, encryption of the
ﬁrst payload prevents message confusion (even though the
encryption key is public), and the payload of the ﬁrst message
becomes Source Level 0.1. Note, however, that Source Level
0.0 and 0.1 are both very weak (agreement is violated against
an active adversary), and 0.1 could also be achieved in
non-PSK handshakes using mere message tagging.
Anonymity: For KNpsk0 and KXpsk2, our analysis revealed
that the anonymity of the initiator never holds in the PSK hand-
shake with a dummy PSK, whereas it holds in some threat
models in the corresponding non-PSK handshake. In the case
of KXpsk2, this is due to the early encryption of payloads
described above. Indeed, the authenticated data associated
with the AEAD of the ﬁrst payload contains a hash of the ini-
tiator’s public key. Given a candidate public key, the attacker
can compute the corresponding associated data and verify the
integrity of the AEAD encrypted payload received over the
network. The veriﬁcation operation succeeds if and only if the
candidate public key is correct, thus breaking the initiator’s
anonymity. This also affects several other PSK handshakes
that are not part of our formal analysis.
We investigated the following modiﬁcation of the Noise
speciﬁcation:
the function encryptAndHash returns the
cleartext when called before the ﬁrst psk or DH token.
With this modiﬁcation, our tool proves that the initiator’s
anonymity is now guaranteed by KXpsk2 if the adversary
is passive. This shows that encrypting payloads before the
ﬁrst psk or DH token can actually strictly weaken anonymity
guarantees in some circumstances. Our tool also proves that
this modiﬁcation has no other effect on secrecy and agree-
ment guarantees, except the effect on agreement discussed
above. This modiﬁcation has no effect on KNpsk0, however,
as this handshake begins with a psk token. Strengthening
the anonymity guarantees of KNpsk0 would require more
involved modiﬁcations to encryptAndHash.
Except for the cases above, agreement, secrecy, and
anonymity properties are the same for the dummy PSK and
non-PSK handshakes we considered.
5.4 Anonymity Results
We did not run all anonymity proofs to completion, as ob-
servational equivalence is considerably more expensive to
check than trace properties. Yet, our results for 46 patterns
give some interesting insights. Firstly, the Noise speciﬁcation
1872    29th USENIX Security Symposium
USENIX Association
allows applications to use the hash of the transcript of the
handshake as a session identiﬁer [24, § 11.2]. This hash is
computable solely from public values, including the public
keys of peers. Therefore, if the adversary has access to this
hash and a list of public keys, he can discover the identity
of the peers. As a result, anonymity cannot hold, even for a
passive adversary. For this reason, the speciﬁcation should
clearly state that this session identiﬁer must be kept secret by
applications with anonymity requirements.
We did not model all nine Identity-hiding levels of the
speciﬁcation, but we do reﬁne Level 7 of the Noise speciﬁ-
cation for example. It reads as follows: ‘An active attacker
who pretends to be the initiator without the initiator’s static
private key, who subsequently learns a candidate for the ini-
tiator private key, can then check whether the candidate is
correct.’ The initiator of KN achieves Identity-hiding Level 7,
and yet we ﬁnd an attack against his anonymity under weaker
assumptions: an active adversary and no key compromise.
The adversary impersonates the recipient while guessing the
initiator’s public key. The initiator accepts the second mes-
sage of the handshake if and only if the guess is correct. This
suggests that investigating every identity hiding level of the
Noise protocol framework would be fruitful future work.
Finally, our work provides the very ﬁrst machine-checked
anonymity results for the Noise framework. We discuss our re-
sults at greater length in [17, Section 4.2], where we showcase
the precision we can achieve through examples that meaning-
fully distinguish different classes of privacy attacks.
5.5 Summary of Analysis Insights
We summarize some of the insights provided by our
analysis and make explicit recommendations for the Noise
speciﬁcation.
Session identiﬁers: If the session identiﬁer deﬁned in §11.2
of the Noise speciﬁcation is public, then anonymity never
holds (see Section 5.4). The speciﬁcation should explicitly
state that applications requiring identity hiding for their hand-
shake must treat this session identiﬁer as a secret value.
Early encryption in PSK patterns: As explained in
Section 5.3, some payloads are encrypted before the ﬁrst
psk or DH token with a public value as a symmetric key.
This brings some marginal beneﬁts (agreement against a
passive adversary for some early payloads, which could also
be achieved by mere tagging) but violates the anonymity
guarantees of several patterns like KXpsk2. The speciﬁcation
should highlight this unexpected impact on anonymity when
using a PSK pattern with a dummy key.
Security claims: As explained in Section 5.2, security levels
are given under the assumption that ephemeral keys cannot
be compromised. This assumption should be made explicit,
along with the consequence that the security levels are not
monotonic. It should also be explained that secrecy from the
recipient’s point of view is sometimes weaker than secrecy
from the sender’s point of view as given by the Destination
Level. Protocol designers may otherwise incorrectly assume
there is no distinction between perspectives.
6 Conclusion
We have presented a ﬁne-grained analysis of the protocols
from the Noise speciﬁcation, revealing subtle differences that
were previously unknown and discovering classes of hand-
shakes that should not be used. Our results help practitioners
in selecting the right Noise handshake for their circumstances,
for example by using our hierarchy in Figure 4b.
Our methodology is generic and not tailored to Noise.
Hence it can be directly applied to other families of secu-
rity protocols. One possible item of future work would be
to compare the Noise handshakes and their properties with
the security properties provided by other non-Noise authenti-
cation protocols. We would also like to further optimize our
use of equivalence properties to analyze anonymity in greater
detail and for more handshakes.
References
[1] Myrto Arapinis, Tom Chothia, Eike Ritter, and Mark
Ryan. Analysing Unlinkability and Anonymity Using
the Applied Pi Calculus. In Computer Security Founda-
tions Symposium (CSF), pages 107–121. IEEE, 2010.
[2] David Basin and Cas Cremers. Know your enemy: Com-
promising adversaries in protocol analysis. ACM Trans.
Inf. Syst. Secur., 17(2):7:1–7:31, November 2014.
[3] David Basin, Cas Cremers, Jannik Dreier, Sasa
Schmid, and
The Tamarin Manual.
Radomirovic, Ralf
Benedikt Schmidt.
https://tamarin-prover.github.io/manual/,
2019. Accessed: 2019-11-14.
Sasse, Lara
[4] David Basin, Jannik Dreier, Lucca Hirschi, Saša
Radomirovi´c, Ralf Sasse, and Vincent Stettler. A for-
mal analysis of 5G authentication. In Conference on
Computer and Communications Security (CCS), pages
1383–1396. ACM, 2018.
[5] David Basin, Jannik Dreier, and Ralf Sasse. Automated
symbolic proofs of observational equivalence. In Pro-
ceedings of the 22nd ACM SIGSAC Conference on Com-
puter and Communications Security, pages 1144–1155.
ACM, 2015.
[6] Karthikeyan Bhargavan, Bruno Blanchet, and Nadim
Kobeissi. Veriﬁed models and reference implementa-
tions for the TLS 1.3 standard candidate. In 2017 IEEE
Symposium on Security and Privacy (SP), pages 483–
502, May 2017.
USENIX Association
29th USENIX Security Symposium    1873
[7] Bruno Blanchet. Modeling and verifying security proto-
cols with the applied pi calculus and ProVerif. Founda-
tions and Trends in Privacy and Security, 1(1–2):1–135,
October 2016.
[8] Katriel Cohn-Gordon, Cas Cremers, Luke Garratt, Jon
Millican, and Kevin Milner. On ends-to-ends encryption:
Asynchronous group messaging with strong security
guarantees. In Proceedings of the 2018 ACM SIGSAC
Conference on Computer and Communications Security,
pages 1802–1819. ACM, 2018.
[9] Cas Cremers and Martin Dehnel-Wild. Component-
based formal analysis of 5G-AKA: Channel assump-
tions and session confusion. In 26th Annual Network
and Distributed System Security Symposium, NDSS
2019, San Diego, California, USA, February 24-27,
2019. The Internet Society, 2019.
[17] Guillaume Girol. Formalizing and Verifying the Se-
curity Protocols from the Noise Framework. Master’s
thesis, ETH Zurich, 2019. https://doi.org/10.3929/ethz-
b-000332859.
[18] Guillaume Girol, Lucca Hirschi, Ralf Sasse,
and David
Avail-
https://github.com/symphorien/
Dennis
Basin.
able
spectral-noise-analysis-usenix-artifact.
Jackson, Cas
Vacarme tool and all results.
at
Cremers,
[19] WhatsApp Inc. WhatsApp encryption overwiew—
Technical white paper. https://www.whatsapp.com/
security/WhatsApp-Security-Whitepaper.pdf,
December 2017. Accessed: 2019-11-14.
[10] Cas Cremers, Marko Horvat, Jonathan Hoyland, Sam
Scott, and Thyla van der Merwe. A comprehensive sym-
bolic analysis of TLS 1.3. In Proceedings of the 2017
ACM SIGSAC Conference on Computer and Communi-
cations Security, pages 1773–1788. ACM, 2017.
[20] Nadim Kobeissi, Georgio Nicolas, and Karthikeyan
Bhargavan. Noise Explorer: Fully automated model-
ing and veriﬁcation for arbitrary Noise protocols. In
2019 IEEE European Symposium on Security and Pri-
vacy (EuroS&P), pages 356–370. IEEE, 2019.
[11] Cas Cremers and Dennis Jackson. Prime, Order Please!
Revisiting Small Subgroup and Invalid Curve Attacks
In 32nd IEEE
on Protocols using Difﬁe-Hellman.
Computer Security Foundations Symposium, CSF 2019,
Hoboken, NJ, USA, June 25-28, 2019, pages 78–93.
IEEE, 2019.
[12] Danny Dolev and Andrew C. Yao. On the security of
public key protocols. Information Theory, IEEE Trans-
actions on, 29(2):198–208, March 1981.
[13] Jason A. Donenfeld. WireGuard: Next generation kernel
network tunnel. In 24th Annual Network and Distributed
System Security Symposium, NDSS 2017, San Diego,
California, USA, February 26 - March 1, 2017. The
Internet Society, 2017.
[14] Jason A. Donenfeld and Kevin Milner. Formal veriﬁca-
tion of the WireGuard protocol. Technical report, July
2017.
[15] Benjamin Dowling and Kenneth G Paterson. A cryp-
tographic analysis of the WireGuard protocol. In In-
ternational Conference on Applied Cryptography and
Network Security, pages 3–21. Springer, 2018.
[16] Benjamin Dowling, Paul Rösler, and Jörg Schwenk.
Flexible authenticated and conﬁdential channel estab-
lishment (fACCE): Analyzing the Noise protocol frame-
work. In Proceedings of IACR International Conference
on Practice and Theory of Public-Key Cryptography
(PKC 2020), 2020.
[21] Benjamin Lipp, Bruno Blanchet, and Karthikeyan Bhar-
gavan. A mechanised cryptographic proof of the Wire-
Guard virtual private network protocol. In 2019 IEEE
European Symposium on Security and Privacy (Eu-
roS&P), pages 231–246. IEEE, 2019.
[22] Gavin Lowe. A hierarchy of authentication speciﬁca-
tions. In Proceedings 10th Computer Security Founda-
tions Workshop, pages 31–43. IEEE, 1997.
[23] The Lightning Network.
Bolt 8: Encrypted
https://github.
and authenticated transport.
com/lightningnetwork/lightning-rfc/blob/
130bc5da2c05f212fba09ae309e53fec8cde2c6d/
08-transport.md, December 2017.
2019-11-14.
Accessed:
[24] Trevor Perrin. The Noise Protocol Framework, July
2018. Revision 34, https://noiseprotocol.org/
noise.html.
[25] Benedikt Schmidt, Simon Meier, Cas Cremers, and
David Basin. Automated analysis of Difﬁe-Hellman
protocols and advanced security properties. In Com-
puter Security Foundations Symposium (CSF), pages
78–94. IEEE, 2012.
1874    29th USENIX Security Symposium
USENIX Association