6
5
Number of group members
7
8
9
10
)
s
m
(
e
m
T
i
12000
10000
8000
6000
4000
2000
0
11
12
gmp−reliable−total :
Crash  &  Crash
Crash  &  Ready−to−Switch time−out
gmp−reliable−total−dummy_crypt :
Crash  &  Crash
Crash  &  Ready−to−Switch time−out
3
4
6
5
Number of group members
7
8
9
10
11
12
(a) Single fault: with and with-
out cryptography
(b) Double faults: with and
without cryptography
Figure 4. Comparing gmp-reliable-total & gmp-
reliable-total-dummy crypt stacks for different
faults
to the next step of the view installation ((f +1) Suspect mes-
sages, (2f +1) Ack-New-View messages) increases, because
f increases by 1.
Figure 4 shows comparisons between the gmp-reliable-
total and gmp-reliable-total-dummy crypt stacks, with
additional fault types. From Figure 4(b), we see that for
a given group size, the gap between the values for the
two stacks is approximately the same under different com-
binations of double faults. That is because, for a par-
ticular combination of double faults, the number of mes-
sages exchanged (communication cost) is the same for
both stacks. The same observation applies to the single-
fault case, shown in Figure 4(a). The increase in the
cost with increasing group size is more pronounced for
the gmp-reliable-total stack than the gmp-reliable-total-
dummy crypt stack. That indicates that the cost associated
with cryptography increases more steadily than communi-
cation costs with increase in the group size.
Figure 5 compares the view installation times for differ-
ent combinations of double faults. There are three clusters
of curves in the ﬁgure. The one at the bottom is close to
the curves for single faults; it corresponds to those combi-
nations of double faults for which the fault detection does
not rely on any time-outs. The view installation times for
curves in this cluster are higher than those for single faults,
because the values include the time to detect the additional
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:28:00 UTC from IEEE Xplore.  Restrictions apply. 
)
s
m
(
e
m
T
i
10000
9000
8000
7000
6000
5000
4000
3000
2000
1000
0
3
Single Crash fault
Crash  &  Mutant message
Crash  &  New-View time-out
Crash  &  Commit time-out
Crash  &  bad New-View
Crash  &  bad Commit
Crash  &  Impede Stabilize
gmp-reliable-total : 1 replica/host
gmp-reliable-total-dummy_crypt stack : 1 replica/host
gmp-reliable-total : 2 replicas/host
gmp-reliable-total-dummy_crypt stack : 2 replicas/host
gmp-reliable-total : 3 replicas/host
gmp-reliable-total-dummy_crypt stack : 3 replicas/host
100000
10000
1000
100
)
s
m
(
e
m
T
i
4
5
6
7
8
9
10
11
12
Number of group members
10
3
4
5
7
6
9
Number of group members
8
10
11
12
Figure 5. Comparing the view installation times
for single and double faults
Figure 6. Variation of view installation time with
load (single crash fault)
fault and the time for one transitional view. The difference
in the values between one combination of double faults and
another in this cluster is not large. Different combinations
of double faults are obtained by activating the second faults
at different phases of a transitional view. Since the time
to complete a single phase in the view installation is small,
changing the phase of the transitional view in which the sec-
ond fault is activated does not have much impact on the view
installation time. The other two clusters involve time-outs
for fault detection. The time-out value employed is 4 sec-
onds. However, the lone curve in the second cluster falls
below 4 seconds, because it depicts the case in which the
two simultaneous faults are a crash and a mutant message.
The mutant message is detected ﬁrst, and part of the time-
out for the crash is subsumed in the transitional view instal-
lation intended to remove the mutant message fault. The
third cluster of curves involved are higher than 4 seconds,
because they involve a full time-out of 4 seconds needed to
detect the second fault during the transitional view.
To study the performance impact of having multiple
group members on the same host, we placed more than
one replica in an otherwise unloaded host. Figure 6 shows
the performance results for the single crash fault case
when we had one or two or three replicas per host for the
gmp-reliable-total-dummy crypt and gmp-reliable-total
stacks. For the same group size, the communication cost
associated with the view installation is the same in all three
cases (one replica per host, two replicas per host, and three
replicas per host). That can be observed from the three
curves at the bottom of the graph, which show the view in-
stallation times for the gmp-reliable-total-dummy crypt
stack. The top three curves in the graph show the view
installation times for the gmp-reliable-total stack with all
cryptographic functions. The differences among the view
installation times for these curves are mainly due to the
differences in time needed to complete the cryptographic
operations. The difference becomes larger as the number
of cryptographic operations increases with increasing group
sizes. That highlights the fact that cryptographic overheads
will be signiﬁcantly greater when computing power is at a
premium.
Figure 7 shows the effect on the view installation times
of using time-outs for fault detection in the triple faults case.
The curves in the top cluster involve two transitional views,
both of which use time-outs (of 4 seconds) to detect faults.
Each curve in the middle cluster also involves two transi-
tional views, but has just one time-out. The curves in the
lower cluster do not involve any time-outs. The curves sug-
gest that if not for the time-outs, the time taken for the other
parts of the view installation is about the same in all cases.
We also observe that the view installation time for a group
size of 10 for the single-fault case differs from that for the
triple-faults case (which does not involve any time-outs) by
about 1 second. This large difference is due to the fact that
in the triple-faults case, the view installation time also in-
cludes the time to detect two additional faults.
The results obtained for the intrusion-tolerant group
membership protocol can thus be summarized as follows.
The overhead for tolerating malicious faults due to intru-
sions is signiﬁcant, compared to the overhead for tolerat-
ing just benign faults, like crashes. Detection mechanisms
based on time-outs are slower than mechanisms based on
direct examination of message content or patterns. Fine-
tuning time-outs so as to take into account the current net-
work load and the load on the other members’ hosts may
signiﬁcantly reduce this latency and also the possibility of
excluding members who are genuinely suffering shortage
of resources. Cryptographic operations account for a larger
percentage of the cost of tolerating malicious faults, than
communication does.
4 Conclusion
This paper provides an extensive study, under both fault
and fault-free conditions, of the cost incurred when toler-
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:28:00 UTC from IEEE Xplore.  Restrictions apply. 
)
s
m
(
e
m
T
i
14000
12000
10000
8000
6000
4000
2000
0
3
Single Crash Fault
Crash  &  New-View time-out  &  Commit time-out
Crash  &  bad New-View  &  New-View time-out
Crash  &  Commit time-out  &  Commit time-out
Crash  &  Commit time-out  &  bad New-View
Crash  &  bad New-View  &  bad Commit
4
5
6
7
8
9
10
11
12
Number of group members
Figure 7. Effect of using time-outs for fault detec-
tion in transitional views
ating malicious faults due to intrusions.
In the fault-free
case, we showed the cost, relative to reliable multicast in C-
Ensemble, of both intrusion-tolerant reliable delivery and
intrusion-tolerant total order. We also investigated the cost
associated with removing corrupt group member(s) when
single, double, and triple malicious faults occur, for a rep-
resentative selection of fault types. The results show that
the cost of removing the corrupt member(s) depends on the
detection mechanism that is used to detect the fault(s), and,
if multiple faults occur, depends on the phase of recovery in
which the second and third faults are activated.
In general, the results conﬁrm the notion that the ability
to tolerate malicious faults does not come without cost, and
also provide more detailed information than was previously
available. Whether the cost is acceptable depends on
the application considered.
In all scenarios studied, the
most signiﬁcant contributor to the cost was public key
cryptography, which was especially signiﬁcant under
loaded conditions and for large group sizes. That leads
us to believe that specialized hardware, faster machines,
or symmetric cryptography [11] (and modiﬁed protocols)
could be used to reduce the overall cost signiﬁcantly. The
results should be useful both to application designers, who
can use them to structure distributed applications in such a
way that the costs are acceptable (for example, by building
distributed objects that are heavy enough that the cost of
the group communication system is a small fraction of the
total method invocation cost), and to protocol designers,
who can use them to gain insight into how to build better
intrusion-tolerant group communication systems.
Acknowledgments: We would like to thank other mem-
bers of the ITUA project, Michael Atighetchi, David Cor-
man, Jeanna Gossett, Chris Jones, Joe Loyall, Partha Pal,
Paul Rubel, Richard Schantz, Ron Watro, and Franklin
Webber, for many useful discussions. We are grateful to
Jenny Applequist for helping us to improve the readability
of the paper.
References
[1] Flaviu Cristian and Christof Fetzer, “The Timed Asyn-
chronous Distributed System Model,” IEEE Transactions on
Parallel and Distributed Systems, Vol. 10, No. 6, pp. 642-
657, 1999
[2] Michael K. Reiter, “The Rampart Toolkit for Building High-
integrity Services,” Lecture Notes in Computer Science, Vol.
938, pp. 99-110, 1995
[3] Michael K. Reiter, “Secure Agreement Protocols: Reliable
and Atomic Group Multicast in Rampart,” Proceedings of
the 2nd ACM Conference on Computer and Communica-
tions Security, pp. 68-80, 1994
[4] Michael K. Reiter, “A Secure Group Membership Protocol,”
Proceedings of the IEEE Symposium on Research in Security
and Privacy, pp. 176-189, 1994
[5] HariGovind V. Ramasamy, “Group Membership Protocol
for an Intrusion-Tolerant Group Communication System,”
MS Thesis, University of Illinois at Urbana-Champaign,
2002
[6] Prashant Pandey, “Reliable Delivery and Ordering Mech-
anisms for an Intrusion-Tolerant Group Communication
System,” MS Thesis, University of Illinois at Urbana-
Champaign, 2001
[7] Michel Cukier, James Lyons, Prashant Pandey, HariGovind
V. Ramasamy, William H. Sanders, Partha Pal, Franklin
Webber, Richard Schantz, Joseph Loyall, Ron Watro,
Michael Atighetchi, and Jeanna Gossett, “Intrusion Toler-
ance Approaches in ITUA,” FastAbstract in Supplement of
the 2001 International Conference on Dependable Systems
and Networks, pp. B64-B65, 2001
[8] Brian Matt, Brian Niebuhr, David Sames, Gregg Tally, Brent
Whitmore, and David Bakken, “Intrusion Tolerant CORBA
Architectural Design,” Technical Report 01-007, NAI Labs,
2001
[9] Paulo Ver´ıssimo, Nuno Ferreira Neves, and Miguel Correia,
“The Middleware Architecture of MAFTIA: A Blueprint,”
Technical Report DI/FCUL TR 00-6, Department of Com-
puter Science, University of Lisbon, 2000
[10] Miguel Castro and Barbara Liskov, “Practical Byzantine
Fault Tolerance,” Third Symposium on Operating Systems
Design and Implementation (OSDI ’99), 1999
[11] Miguel Castro and Barbara Liskov, “Authenticated Byzan-
tine Fault Tolerance Without Public-Key Cryptography,”
Technical Memo MIT/LCS/TM-589, MIT Laboratory for
Computer Science, June 1999
[12] Kim Potter Kihlstrom, Louise E. Moser, and P. Michael
Melliar-Smith, “The SecureRing Protocols for Securing
Group Communication,” Proceedings of
the 31st IEEE
Hawaii International Conference on System Sciences, pp.
317-326, 1998
[13] Mark Hayden, “Ensemble Reference Manual,” Cornell Uni-
versity, 2001
[14] Peter Gutmann, “Cryptlib Security Toolkit,” April 2001
[15] Fred Schneider, “Implementing Fault-Tolerant Services Us-
ing the State Machine Approach: A Tutorial,” ACM Com-
puting Surveys, Vol. 22, No. 4, 1990
[16] Kenneth P. Birman, Building Secure and Reliable Network
Applications, Manning, 1996
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:28:00 UTC from IEEE Xplore.  Restrictions apply.