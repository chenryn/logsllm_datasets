title:Examining DES-based Cipher Suite Support within the TLS Ecosystem
author:Vanessa Frost and
Dave (Jing) Tian and
Christie Ruales and
Vijay Prakash and
Patrick Traynor and
Kevin R. B. Butler
Examining DES-based Cipher Suite Support within the TLS
Ecosystem
Dave (Jing) Tian
University of Florida
PI:EMAIL
Patrick Traynor
University of Florida
PI:EMAIL
Vanessa Frost
University of Florida
PI:EMAIL
Vijay Prakash
University of Florida
PI:EMAIL
Christie Ruales
University of Florida
PI:EMAIL
Kevin R. B. Butler
University of Florida
PI:EMAIL
ABSTRACT
In July 2018, over a decade after the DES encryption algorithm was
retired, 3DES was also officially deprecated. While previous work
suggests a successful deprecation of DES, with fewer than 1% of ob-
served SSL/TLS handshakes using some form of DES up until 2018,
such work tends to be limited in scope and does not necessarily
capture the true persistence of DES across the entire TLS ecosys-
tem. In this paper, we actively investigate online support for DES
and DES-derivative ciphers by querying IP addresses responsive
to port 443 connection attempts. To achieve this, we design and
implement our own Internet scanning tool built upon ZMap and
attempt to negotiate handshakes exclusively using DES ciphers. In
total, we have scanned over 31 million unique IP addresses and
found that nearly half of them can still successfully establish an
HTTPS connection using at least one DES cipher. Moreover, we also
find that many servers still support DES40 (which can be broken in
seconds) and anon ciphers (which offer no certificate verification
and are vulnerable to man-in-the-middle attacks). Our investigation
demonstrates the biases and misunderstandings in previous weak
cipher studies within the TLS ecosystem, and discloses the severity
of this problem by targeting DES-based cipher suites.
CCS CONCEPTS
• Security and privacy → Web protocol security; Network se-
curity.
KEYWORDS
DES; TLS; measurement
ACM Reference Format:
Vanessa Frost, Dave (Jing) Tian, Christie Ruales, Vijay Prakash, Patrick
Traynor, and Kevin R. B. Butler. 2019. Examining DES-based Cipher Suite
Support within the TLS Ecosystem. In ACM Asia Conference on Computer
and Communications Security (AsiaCCS ’19), July 9–12, 2019, Auckland,
New Zealand. ACM, New York, NY, USA, 7 pages. https://doi.org/10.1145/
3321705.3329858
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6752-3/19/07...$15.00
https://doi.org/10.1145/3321705.3329858
1 INTRODUCTION
Securely communicating on the Internet has become an area of
intense focus. The past few years have seen broad new initiatives to
ensure safer computing, including the increasing use of TLS across
websites - spurred in part by the Electronic Foundation Frontier’s
“HTTPS Everywhere” initiative [20] and the decisions of browsers
such as Google Chrome to highlight when connections are being
made without TLS [34].
The use of cryptography to secure communication and messages
is not new. The Data Encryption Standard (DES) was introduced
by the US National Bureau of Standards (now NIST) in 1977. DES
protected information for decades, but was publicly broken for the
first time in 1997 [13] and deprecated by NIST in 2004 [30]. To
replace DES, which has seen widespread deployment as well as
dedicated hardware for using it, NIST recommended the use of the
Triple-DES (3DES) cipher [30]; however, 3DES has in turn faced
attacks of increasing strength, and was itself officially deprecated
by NIST in 2018 [31].
Recent work surveying the state of TLS usage on the Internet [27]
has seemingly pointed to DES and its variants (including 3DES)
being used in a minuscule number of connections - less than 0.3% in
2018. However, what analyses such as these do not take into account
is that when they make connections to servers, they connect over
the preferred cipher offered by the client. The server will attempt to
support the most secure ciphersuite offered by the client. However,
these studies do not take into account the universe of ciphersuites
that can be supported by these servers. The implications are that a
server that may otherwise support modern ciphersuites may also
allow connection over insecure ciphersuites that incorporate DES.
In this work, we go beyond past work by performing an in-depth
examination of how many servers across the Internet still support
the use of DES and its variants. Our results are surprising: across
the 31,619,709 IP addresses we examined that represent servers
responding to TLS handshakes on port 443, we find that 40.5% of
them support one or more of the 36 ciphersuite families involving a
variant of DES or 3DES, with evidence of even the entirely insecure
DES40 cipher being supported as a legitimate means of encrypted
communication.
We thus make the following contributions:
• Active IPv4 Measurement. We query each IPv4 address
with explicitly defined DES ciphers in order to determine
existing support for these deprecated ciphers, supplementing
studies that contribute analysis on passive data to determine
use of such ciphers.
• Analysis of Hosts. We examine the host names belonging
to IP addresses which accept DES ciphers in order to rec-
oncile multiple unique IPs to a single shared organization
when possible (e.g., google.com and google.co.uk).
• Geographic Prevalence. Lastly, we give a global represen-
tation of DES support by city and country.
The remainder of this paper is organized as follows: Section 2
introduces DES-based ciphers, TLS, and TLS scanning; Section 3
provides the design and implementations our TLS scanning tool;
Section 4 covers data analysis based on DES-based cipher usage,
host names, and geographic information; Section 5 speculates our
findings with national policies and discusses the limitation of our
methodology; Section 6 summarizes TLS attacks and scans; and
Section 7 concludes.
2 BACKGROUND
Due to the focus on three different DES ciphers, it is necessary
to distinguish between the family of DES ciphers and the original
56-bit DES cipher. Thus, for the remainder of this paper, we use
“DES56” to refer to the 56-bit DES cipher, and refer to the family of
related encryption algorithms as simply “DES”.
2.1 The Data Encryption Standard
In 1977, the National Institute of Standards and Technology (NIST)
adopted the Data Encryption Standard (DES56) as the standard
algorithm with which to encrypt sensitive government informa-
tion. Developed by IBM, and later refined by the NSA, DES56 is a
symmetric-key block cipher with a key length of 56 bits. Due to
the short key length, DES56 is vulnerable to brute-force attacks
and was publicly cracked by a network of computers during the
DES Challenge (DESCHALL) in 1997 [13]. In May of 2005, NIST
officially withdrew DES56 from standards and encouraged the use
of Triple DES instead [30].
As a variation on the DES cipher, Triple DES (3DES) applies the
DES algorithm three times to encrypt data, giving it a maximum key
length of 168 bits. Strong theoretical attacks against 3DES prompted
its deprecation, and it too was officially withdrawn from standards
by NIST in 2018 [31]. A second variation, DES40, has a 40-bit key,
making it far more susceptible to brute-force attacks. While a DES56
key can be found in less than 27 hours using dedicated hardware,
DES40 can be broken in seconds [12, 21].
Other attacks can be leveraged against DES that are faster than
brute force using differential cryptanalysis [10], linear cryptanaly-
sis using known-plaintext [28] and chosen-plaintext attacks [26],
and “meet-in-the-middle” attacks against reduced-round versions
of DES [15]. More recently, the SWEET32 birthday attacks take ad-
vantage of DES’s 64-bit block sizes [8] by exploiting the “birthday-
bound” of block ciphers. A cipher with a block size of n would
have a corresponding birthday-bound of 2n/2, meaning that as the
number of attempted keys grows to 2n/2, the likelihood of finding
a collision between two encrypted blocks is over 50%. Cryptogra-
phers advise frequent key changes to combat this vulnerability, but
few implementations enforce early key renewal.
Despite the deprecation of DES56 and its related encryption
ciphers, millions of servers around the world continue to support
its use in network communication to clients.
2.2 TLS
TLS has become the de facto protocol for network communication
since its introduction in 1999. Originally written as an upgrade
from SSL 3.0, TLS 1.0 quickly became the preferred standard due
to its upgraded security principles and compatibility with older
protocols [11]. While TLS typically supports the use of newer en-
cryption protocols (such as AES), a server using TLS could still
connect and communicate with a client using older encryption
ciphers (such as 3DES). TLSv1.0 was since displaced by versions
1.1 and 1.2 for stronger security principles, and those in turn have
officially been obsoleted by the recent release of TLS 1.3 [33], but
these older versions of TLS are still widespread. Specifically for
DES, this means that legacy implementations of TLS can support
vulnerable ciphers: DES40 is supported in TLS up to version 1.0,
while DES56 is supported up to TLS 1.1 and 3DES is supported up
to TLS 1.2. More TLS attacks are summarized by Kotzias et al. [27].
Information about ciphersuite use in TLS can be gleaned by
observing the TLS handshake. This consists of two messages: the
Client Hello message, whereby the client indicates the set of cipher-
suites it is capable of negotiating, and the Server Hello, whereby the
server selects its preferred ciphersuite from the client’s list. Neither
of these messages are encrypted, allowing for their observation.
2.3 Scanning for TLS Servers
There are two primary means by which scanning for TLS-enabled
servers can be achieved. In passive approaches, information about
TLS handshakes is collected and stored for later query. An example
of this approach is the ICSI SSL Notary [5], which collects TLS con-
nection metadata from a number of universities and other research
networks. An important note to this approach is that connection
data is collected, i.e., the actual parameters that a TLS client and
server negotiated. In active approaches, the observation tool itself
initiates TLS handshakes with servers and records the handshake
results. An advantage to this approach is that the client can be selec-
tive about which ciphersuites are communicated to the server, such
that if a stronger cipher (e.g., an AES-based cipher) is not presented
by the client, the server may instead negotiate a weaker cipher such
as DES56 in its Server Hello message. Such ciphersuite negotiation
represents a perfectly valid TLS connection, but as discussed above,
leaves the connection vulnerable to attack.
Approaches to scanning the entire Internet such as ZMap [19]
can be highly efficient in establishing a server’s responsiveness to
external scans. ZMap sends a single TCP SYN packet to a target IP
address, and will immediately close the connection by sending an
RST packet if it receives a response. This means that an individual
scan can occur very quickly; however, such an approach will not
provide information about protocols supported by the contacted
host, such as whether it is a TLS server and what ciphersuites it
may support. Censys [17] provides not only scans of the Internet
through ZMap but also a list of TLS-enabled servers through the
use of ZGrab [1]. While this approach will allow for discovery of
TLS-enabled servers by initiating a Client Hello and recording the
Server Hello response, it defaults to negotiating with the strongest
cipher available to both server and client (typically AES). As a result,
Censys data on its own will not reveal support for DES variants
amongst TLS-enabled servers. As we discuss in the next section, a
new approach is required to capture this diversity of DES use.
3 DESIGN & IMPLEMENTATION
Collecting data through active methods requires substantially more
connections and computational overhead compared to passive ap-
proaches, which typically record existing connection data rather
than making new connections. There are 36 variants of DES-based
ciphersuites that can be negotiated within TLS, and to determine
whether they are supported or not requires attempting to negotiate
on all 36 of them.
We first downloaded lists of millions of IPv4 addresses responsive
on port 443 from Censys via Google’s BigQuery, and further split the
partitioned lists. We built a multi-threaded Java program to accept
the lists as inputs and create child threads to handle a relatively
small list of IP addresses to query. Each thread performs a ZGrab2
query for each of 36 DES ciphers on each IP address. After receiving