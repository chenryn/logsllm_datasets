access but permits the client to open an authenti-
cation file by sending a special message, gener-
ated by the new fauth system call:
afd = fauth(int fd, char *servicename);
Here fd is the user’s file descriptor for the estab-
lished network connection to the 9P server and
servicename is the name of the desired service
offered on that server, typically the file subsys-
tem to be accessed. The returned file descriptor,
afd, is a unique handle representing the authenti-
cation file created for this connection to authenti-
cate to this service; it is analogous to a capabil-
ity. The authentication file represented by afd is
not otherwise addressable on the server, such as
through the file name hierarchy.
In all other
it behaves like a regular file; most
respects,
important,
it accepts standard read and write
operations.
the user process (via
To prove its identity,
factotum) executes the authentication protocol,
described in the next section of this paper, over
the afd file descriptor with ordinary reads and
writes. When client and server have successfully
negotiated, the authentication file changes state
so it can be used as evidence of authority in
mount.
Once identity is established, the process presents
the (now verified) afd as proof of identity to the
mount system call:
mount(int fd, int afd, char *mountpoint,
int flag, char *servicename)
If the mount succeeds, the user now has appropri-
ate permissions for the file hierarchy made visi-
ble at the mount point.
This sequence of events has several advantages.
First, the actual authentication protocol is imple-
mented using regular reads and writes, not spe-
cial 9P messages, so they can be processed, for-
warded, proxied, and so on by any 9P agent with-
out special arrangement. Second, the business of
negotiating the authentication by reading and
writing the authentication file can be delegated to
an outside agent, in particular factotum; the pro-
grams that implement the client and server ends
of a 9P conversation need no authentication or
cryptographic code. Third, since the authentica-
tion protocol is not defined by 9P itself, it is easy
to change and can even be negotiated dynami-
cally. Finally, since afd acts like a capability, it
can be treated like one: handed to another pro-
cess to give it special permissions; kept around
for
later use when authentication is again
required; or closed to make sure no other process
can use it.
All
these advantages stem from moving the
authentication negotiation into reads and writes
on a separate file. As is often the case in Plan 9,
making a resource (here authentication) accessi-
ble with a file-like interface reduces a priori the
need for special interfaces.
3.1. Plan 9 shared key protocol
In addition to the various standard protocols sup-
ported by factotum, we use a shared key proto-
col for native Plan 9 authentication. This proto-
col provides backward compatibility with older
versions of the system. One reason for the new
architecture is to let us replace such protocols in
the near
future with more cryptographically
secure ones.
P9sk1 is a shared key protocol that uses tickets
much like those in the original Kerberos. The
difference is that we’ve replaced the expiration
time in Kerberos tickets with a random nonce
parameter and a counter. We summarize it here:
Cﬁ
S:
nonce C
Sﬁ C:
nonce S ,uid S ,domain S
Cﬁ A:
nonce S ,uid S ,domain S ,uid C ,
factotum C
Aﬁ C: K C {nonce S ,uid C ,uid S, K n },
K S {nonce S ,uid C ,uid S, K n }
S: K S {nonce S ,uid C ,uid S ,K n },
Cﬁ
K n {nonce S ,counter}
Sﬁ C: K n {nonce C ,counter}
(Here K{x} indicates x encrypted with DES key
K.) The first two messages exchange nonces and
server identification. After this initial exchange,
the client contacts the authentication server to
obtain a pair of encrypted tickets, one encrypted
with the client key and one with the server key.
The client relays the server ticket to the server.
The server believes that the ticket is new because
it contains nonce S and that the ticket is from the
authentication server because it is encrypted in
the server key K S. The ticket is basically a state-
ment from the authentication server that now
uid C and uid S share a secret K n. The authentica-
tor K n {nonce S ,counter} convinces the server
that the client knows K n and thus must be uid C.
Similarly, authenticator K n {nonce C ,counter}
convinces the client that the server knows K n
and thus must be uid S. Tickets can be reused,
without contacting the authentication server
again, by incrementing the counter before each
authenticator is generated.
In the future we hope to introduce a public key
version of p9sk1, which would allow authentica-
tion even when the authentication server is not
available.
3.2. The authentication server
Each Plan 9 security domain has an authentica-
tion server (AS) that all users trust to keep the
complete set of shared keys.
It also offers ser-
vices for users and administrators to manage the
keys, create and disable accounts, and so on. It
typically runs on a standalone machine with few
other services. The AS comprises two services,
keyfs and authsrv.
Keyfs is a user-level file system that manages an
encrypted database of user accounts. Each
account is represented by a directory containing
the files key, containing the Plan 9 key for
p9sk1; secret for the challenge/response proto-
cols (APOP, VNC, CHAP, MSCHAP, CRAM);
log for authentication outcomes; expire for an
expiration time; and status.
If the expiration
time passes, if the number of successive failed
authentications exceeds 50, or if disabled is
written to the status file, any attempt to access
the key or secret files will fail.
Authsrv is a network service that brokers shared
key authentications for
the protocols p9sk1,
APOP, VNC, CHAP, MSCHAP, and CRAM.
Remote users can also call authsrv to change
their passwords.
The p9sk1 protocol was described in the previous
section. The challenge/response protocols differ
in detail but all follow the general structure:
Cﬁ
S:
nonce C
Sﬁ C:
nonce S ,uid S ,domain S
Cﬁ A:
nonce S ,uid S ,domain S ,
hostid C ,uid C
Aﬁ C: K C {nonce S ,uid C ,uid S, K n },
K S {nonce S ,uid C ,uid S, K n }
Cﬁ
S: K S {nonce S ,uid C ,uid S, K n },
K n {nonce S }
Sﬁ C: K n {nonce C }
The password protocol is:
uid C
Cﬁ A:
Aﬁ C: K c {K n }
Cﬁ A: K n {password old ,password new }
Aﬁ C: OK
To avoid replay attacks, the pre-encryption clear
text for each of the protocols (as well as for
p9sk1) includes a tag indicating the encryption’s
role in the protocol. We elided them in these
outlines.
3.3. Protocol negotiation
Rather than require particular protocols for par-
ticular services, we implemented a negotiation
metaprotocol, p9any, which chooses the actual
authentication protocol to use. P9any is used
now by all native services on Plan 9.
The metaprotocol is simple. The callee sends a
null-terminated string of the form:
v.n proto 1@domain 1 proto 2@domain 2 ...
where n is a decimal version number, proto k is
the name of a protocol for which the factotum
has a key, and domain k
is the name of the
domain in which the key is valid. The caller then
responds
proto@domain
indicating its choice. Finally the callee responds
OK
Any other string indicates failure. At this point
the chosen protocol commences. The final
fixed-length reply is used to make it easy to
delimit the I/O stream should the chosen protocol
require the caller rather than the callee to send
the first message.
With this negotiation metaprotocol, the underly-
ing authentication protocols used for Plan 9 ser-
vices can be changed under any application just
by changing the keys known by the factotum
agents at each end.
P9any is vulnerable to man in the middle attacks
to the extent that the attacker may constrain the
possible choices by changing the stream. How-
ever, we believe this is acceptable since the
attacker cannot force either side to choose algo-
rithms that it is unwilling to use.
4. Library Interface to Factotum
Although programs can access factotum’s ser-
vices through its file system interface, it is more
common to use a C library that packages the
interaction. There are a number of routines in the
library, not all of which are relevant here, but a
few examples should give their flavor.
First, consider the problem of mounting a remote
file server using 9P. An earlier discussion
showed how the fauth and mount system calls
use an authentication file, afd, as a capability,
but not how factotum manages afd. The library
contains
(authenticated
mount), that is used by most programs in prefer-
ence to the raw fauth and mount calls. Amount
engages factotum to validate afd; here is the
complete code:
routine,
a
amount
int
amount(int fd, char *mntpt,
int flags, char *aname)
{
}
int afd, ret;
AuthInfo *ai;
afd = fauth(fd, aname);
if(afd >= 0){
ai = auth_proxy(afd, amount_getkey,
"proto=p9any role=client");
if(ai != NULL)
auth_freeAI(ai);
}
ret = mount(fd, afd, mntpt,
flags, aname);
if(afd >= 0)
close(afd);
return ret;
where parameter fd is a file descriptor returned
by open or dial for a new connection to a file
server. The conversation with factotum occurs
in the call to auth_proxy, which specifies, as a
key query, which authentication protocol to use
(here the metaprotocol p9any) and the role being
played (client). Auth_proxy will
read and
write the factotum files, and the authentication
file descriptor afd, to validate the user’s right to
access the service. If the call is successful, any
auxiliary data, held in an AuthInfo structure, is
freed. In any case, the mount is then called with
the (perhaps validated) afd. A 9P server can
cause the fauth system call to fail, as an indica-
tion that authentication is not required to access
the service.
The second argument to auth_proxy is a func-
tion, here amount_getkey, to be called if secret
information such as a password or response to a
challenge is required as part of the authentica-
tion. This function, of course, will provide this
data to factotum as a key message on the
/mnt/factotum/ctl file.
Although the final argument to auth_proxy in
this example is a simple string, in general it can
be a formatted-print specifier in the manner of
printf, to enable the construction of more elab-
orate key queries.
As another example, consider the Plan 9 cpu ser-
vice, which exports local devices to a shell pro-
cess on a remote machine, typically to connect
the local screen and keyboard to a more powerful
computer. At heart, cpu is a superset of a service
called exportfs [12], which allows one machine
to see an arbitrary portion of the file name space
of another machine, such as to export the net-
work device to another machine for gatewaying.
However, cpu is not just exportfs because it
also delivers signals such as interrupt and negoti-
ates the initial environment for the remote shell.
To authenticate an instance of cpu requires
factotum processes on both ends:
the local,
client end running as the user on a terminal and
the remote, server end running as the host owner
of the server machine. Here is schematic code
for the two ends:
/* client */
int
p9auth(int fd)
{
AuthInfo *ai;
ai = auth_proxy(fd, auth_getkey,
"proto=p9any role=client");
if(ai == NULL)
return −1;
/* start cpu protocol here */
}
/* server */
int
srvp9auth(int fd, char *user)
{
AuthInfo *ai;
ai = auth_proxy(fd, NULL,
"proto=p9any role=server");
if(ai == NULL)
return −1;
/* set user id for server process */
if(auth_chuid(ai, NULL) < 0)
return −1;
/* start cpu protocol here */
}
Auth_chuid encapsulates
the negotiation to
change a user id using the caphash and capuse
files of the (server) kernel. Note that although
the client process may ask the user for new keys,
using auth_getkey, the server machine, presum-
ably a shared machine with a pseudo-user for the
host owner, sets the key-getting function to NULL.
5. Secure Store
Factotum keeps its keys in volatile memory,
which must somehow be initialized at boot time.
Therefore, factotum must be supplemented by a
persistent store, perhaps a floppy disk containing
a key file of commands to be copied into
/mnt/factotum/ctl during
bootstrap. But
removable media are a nuisance to carry and are
vulnerable to theft. Keys could be stored
encrypted on a shared file system, but only if
those keys are not necessary for authenticating to
the file system in the first place. Even if the keys
are encrypted under a user password, a thief
might well succeed with a dictionary attack.
Other risks of local storage are loss of the con-
tents through mechanical mishap or dead batter-
ies. Thus for convenience and safety we provide
a secstore (secure store) server in the network
to hold each user’s permanent list of keys, a key
file.
Secstore is a file server for encrypted data, used
only during bootstrapping.
It must provide
strong authentication and resistance to passive
and active protocol attacks while assuming noth-
ing more from the client than a password. Once
factotum has
further
encrypted or authenticated file storage can be
accomplished by standard mechanisms.
The
enables
technology that
secstore is a form of encrypted key exchange
called PAK [2], analogous to EKE [1], SRP [19],
or SPEKE [5]. PAK was chosen because it
comes with a proof of equivalence in strength to
Diffie-Hellman; subtle flaws in some earlier
encrypted key exchange protocols and implemen-
tations have encouraged us to take special care.
In outline, the PAK protocol is:
Cﬁ
Sﬁ C: S,g y ,hash(g xy ,C,S)
Cﬁ
S: C,g xH
S: hash(g xy ,S,C)
loaded the key file,
cryptographic
paper. The Plan 9 open source license provides
for use of Lucent’s encrypted key exchange
patents in this context.
As a further layer of defense against password
theft, we provide (within the encrypted channel
C(cid:146)S) information that is validated at a RADIUS
server, such as the digits from a hardware token
[14]. This provides two-factor authentication,
which potentially requires tricking two indepen-
dent administrators in any attack by social engi-
neering.
The key file stored on the server is encrypted
with AES (Rijndael) using CBC with a 10-byte
initialization vector and trailing authentication
padding. All
this is invisible to the user of
secstore. For that matter, it is invisible to the
secstore server as well; if the AES Modes of
Operation are standardized and a new encryption
format designed, it can be implemented by a
client without
change to the server. The
secstore is deliberately not backed up; the user
is expected to use more than one secstore or