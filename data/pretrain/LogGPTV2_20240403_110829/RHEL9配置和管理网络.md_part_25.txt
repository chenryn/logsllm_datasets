-   通用路由封装（GRE）
-   IPv6 上的通用路由封装（IP6GRE）
-   通用路由封装终端接入点（GRETAP）
-   通用路由登录在 IPv6（IP6GRETAP）上
-   IPv4 over IPv4（IPIP）
-   IPv4 over IPv6（IPIP6）
-   IPv6 over IPv6（IP6IP6）
-   简单的互联网转换（SIT）
:::
根据类型，这些通道在 Open Systems Interconnection（OSI）的第 2 层或 3
层动作。
::: section
::: titlepage
# []{#configuring-ip-tunnels_configuring-and-managing-networking.html#configuring-an-ipip-tunnel-using-nmcli-to-encapsulate--ipv4-traffic-in-ipv4-packets_configuring-ip-tunnels}使用 nmcli 配置 IPIP 隧道来封装 IPv4 数据包中的 IPv4 流量 {.title}
:::
IP over IP（IPIP）隧道在 OSI 层 3 上运行，并封装 IPv4 数据包中的 IPv4
流量，如 [RFC 2003 所述](https://tools.ietf.org/html/rfc2003){.link}。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
通过 IPIP
隧道发送的数据没有加密。出于安全考虑，只在已经加密的数据中使用隧道，比如
HTTPS。
:::
请注意，IPIP 隧道只支持单播数据包。如果您需要支持多播的 IPv4
隧道，请参阅[使用 nmcli 配置 GRE 隧道来封装 IPv4 数据包中的第 3
层流量](#configuring-ip-tunnels_configuring-and-managing-networking.html#configuring-a-gre-tunnel-using-nmcli-to-encapsulate-layer-3-traffic-in-ipv4-packets_configuring-ip-tunnels "使用 nmcli 配置 GRE 隧道来封装 IPv4 数据包中的层 3 流量"){.link}。
此流程描述了如何在两个 RHEL 路由器之间创建 IPIP
隧道以通过互联网连接两个内部子网，如下图所示：
::: informalfigure
::: mediaobject
![IPIP 隧道](images/IPIP-tunnel.png)
:::
:::
::: itemizedlist
**先决条件**
-   每个 RHEL 路由器都有一个网络接口，它连接到其本地子网。
-   每个 RHEL 路由器都有一个网络接口，它连接到互联网。
-   您需要通过隧道发送的流量是 IPv4 单播。
:::
::: orderedlist
**流程**
1.  在网络 A 的 RHEL 路由器上：
    ::: orderedlist
    1.  创建名为 `tun0`{.literal} 的 IPIP 隧道接口：
        ``` literallayout
        # nmcli connection add type ip-tunnel ip-tunnel.mode ipip con-name tun0 ifname tun0 remote 198.51.100.5 local 203.0.113.10
        ```
        `远程和本地`{.literal} `参数设置`{.literal}
        远程和本地路由器的公共 IP 地址。
    2.  将 IPv4 地址设置为 `tun0`{.literal} 设备：
        ``` literallayout
        # nmcli connection modify tun0 ipv4.addresses '10.0.1.1/30'
        ```
        请注意，具有两个可用 IP 地址的 `/30`{.literal}
        子网足以满足隧道的需要。
    3.  将 `tun0`{.literal} 连接配置为使用手动 IPv4 配置：
        ``` literallayout
        # nmcli connection modify tun0 ipv4.method manual
        ```
    4.  添加将流量路由到 `172.16.0.0/24`{.literal}
        网络的静态路由到路由器 B 上的隧道 IP：
        ``` literallayout
        # nmcli connection modify tun0 +ipv4.routes "172.16.0.0/24 10.0.1.2"
        ```
    5.  启用 `tun0`{.literal} 连接。
        ``` literallayout
        # nmcli connection up tun0
        ```
    6.  启用数据包转发：
        ``` literallayout
        # echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/95-IPv4-forwarding.conf
        # sysctl -p /etc/sysctl.d/95-IPv4-forwarding.conf
        ```
    :::
2.  在网络 B 中的 RHEL 路由器中：
    ::: orderedlist
    1.  创建名为 `tun0`{.literal} 的 IPIP 隧道接口：
        ``` literallayout
        # nmcli connection add type ip-tunnel ip-tunnel.mode ipip con-name tun0 ifname tun0 remote 203.0.113.10 local 198.51.100.5
        ```
        `远程和本地`{.literal} `参数设置`{.literal}
        远程和本地路由器的公共 IP 地址。
    2.  将 IPv4 地址设置为 `tun0`{.literal} 设备：
        ``` literallayout
        # nmcli connection modify tun0 ipv4.addresses '10.0.1.2/30'
        ```
    3.  将 `tun0`{.literal} 连接配置为使用手动 IPv4 配置：
        ``` literallayout
        # nmcli connection modify tun0 ipv4.method manual
        ```
    4.  添加将流量路由到 `192.0.2.0/24`{.literal} 网络的静态路由到路由器
        A 的隧道 IP：
        ``` literallayout
        # nmcli connection modify tun0 +ipv4.routes "192.0.2.0/24 10.0.1.1"
        ```
    5.  启用 `tun0`{.literal} 连接。
        ``` literallayout
        # nmcli connection up tun0
        ```
    6.  启用数据包转发：
        ``` literallayout
        # echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/95-IPv4-forwarding.conf
        # sysctl -p /etc/sysctl.d/95-IPv4-forwarding.conf
        ```
    :::
:::
::: itemizedlist
**验证步骤**
-   从每个 RHEL 路由器中，ping 路由器的内部接口的 IP 地址：
    ::: orderedlist
    1.  在路由器 A 上，ping `172.16.0.1`{.literal} ：
        ``` literallayout
        # ping 172.16.0.1
        ```
    2.  在路由器 B 上，ping `192.0.2.1`{.literal} ：
        ``` literallayout
        # ping 192.0.2.1
        ```
    :::
:::
::: itemizedlist
**其他资源**
-   `nmcli`{.literal} man page
-   `nm -settings(5)`{.literal} man page 中的 ip-tunnel``{=html}
    设置部分
:::
:::
::: section
::: titlepage
# []{#configuring-ip-tunnels_configuring-and-managing-networking.html#configuring-a-gre-tunnel-using-nmcli-to-encapsulate-layer-3-traffic-in-ipv4-packets_configuring-ip-tunnels}使用 nmcli 配置 GRE 隧道来封装 IPv4 数据包中的层 3 流量 {.title}
:::
Generic Routing Encapsulation（GRE）隧道封装 IPv4 数据包中的第 3
层流量，如 [RFC 2784](https://tools.ietf.org/html/rfc2784){.link}
所述。GRE 隧道可以使用有效的以太网类型封装任何第 3 层协议。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
通过 GRE
隧道发送的数据没有加密。出于安全考虑，只在已经加密的数据中使用隧道，比如
HTTPS。
:::
此流程描述了如何在两个 RHEL 路由器之间创建 GRE
隧道以通过互联网连接两个内部子网，如下图所示：
::: informalfigure
::: mediaobject
![GRE 隧道](images/GRE-tunnel.png)
:::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
保留 `gre0`{.literal} 设备名称。对该设备使用 `gre1`{.literal}
或者不同的名称。
:::
::: itemizedlist
**先决条件**
-   每个 RHEL 路由器都有一个网络接口，它连接到其本地子网。
-   每个 RHEL 路由器都有一个网络接口，它连接到互联网。
:::
::: orderedlist
**流程**
1.  在网络 A 的 RHEL 路由器上：
    ::: orderedlist
    1.  创建名为 `gre1`{.literal} 的 GRE 隧道接口：
        ``` literallayout
        # nmcli connection add type ip-tunnel ip-tunnel.mode gre con-name gre1 ifname gre1 remote 198.51.100.5 local 203.0.113.10
        ```
        `远程和本地`{.literal} `参数设置`{.literal}
        远程和本地路由器的公共 IP 地址。
    2.  将 IPv4 地址设置为 `gre1`{.literal} 设备：
        ``` literallayout
        # nmcli connection modify gre1 ipv4.addresses '10.0.1.1/30'
        ```
        请注意，具有两个可用 IP 地址的 `/30`{.literal}
        子网足以满足隧道的需要。
    3.  将 `gre1`{.literal} 连接配置为使用手动 IPv4 配置：
        ``` literallayout
        # nmcli connection modify gre1 ipv4.method manual
        ```
    4.  添加将流量路由到 `172.16.0.0/24`{.literal}
        网络的静态路由到路由器 B 上的隧道 IP：
        ``` literallayout
        # nmcli connection modify gre1 +ipv4.routes "172.16.0.0/24 10.0.1.2"
        ```
    5.  启用 `gre1`{.literal} 连接。
        ``` literallayout
        # nmcli connection up gre1
        ```
    6.  启用数据包转发：
        ``` literallayout
        # echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/95-IPv4-forwarding.conf
        # sysctl -p /etc/sysctl.d/95-IPv4-forwarding.conf
        ```
    :::
2.  在网络 B 中的 RHEL 路由器中：
    ::: orderedlist
    1.  创建名为 `gre1`{.literal} 的 GRE 隧道接口：
        ``` literallayout
        # nmcli connection add type ip-tunnel ip-tunnel.mode gre con-name gre1 ifname gre1 remote 203.0.113.10 local 198.51.100.5
        ```
        `远程和本地`{.literal} `参数设置`{.literal}
        远程和本地路由器的公共 IP 地址。
    2.  将 IPv4 地址设置为 `gre1`{.literal} 设备：
        ``` literallayout
        # nmcli connection modify gre1 ipv4.addresses '10.0.1.2/30'
        ```
    3.  将 `gre1`{.literal} 连接配置为使用手动 IPv4 配置：
        ``` literallayout
        # nmcli connection modify gre1 ipv4.method manual
        ```
    4.  添加将流量路由到 `192.0.2.0/24`{.literal} 网络的静态路由到路由器
        A 的隧道 IP：
        ``` literallayout
        # nmcli connection modify gre1 +ipv4.routes "192.0.2.0/24 10.0.1.1"
        ```
    5.  启用 `gre1`{.literal} 连接。
        ``` literallayout
        # nmcli connection up gre1
        ```
    6.  启用数据包转发：
        ``` literallayout
        # echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/95-IPv4-forwarding.conf
        # sysctl -p /etc/sysctl.d/95-IPv4-forwarding.conf
        ```
    :::
:::
::: orderedlist
**验证步骤**
1.  从每个 RHEL 路由器中，ping 路由器的内部接口的 IP 地址：
    ::: orderedlist
    1.  在路由器 A 上，ping `172.16.0.1`{.literal} ：
        ``` literallayout
        # ping 172.16.0.1
        ```
    2.  在路由器 B 上，ping `192.0.2.1`{.literal} ：
        ``` literallayout
        # ping 192.0.2.1
        ```
    :::
:::
::: itemizedlist
**其他资源**
-   `nmcli`{.literal} man page
-   `nm -settings(5)`{.literal} man page 中的 ip-tunnel``{=html}
    设置部分
:::
:::
::: section
::: titlepage
# []{#configuring-ip-tunnels_configuring-and-managing-networking.html#configuring-a-gretap-tunnel-to-transfer-ethernet-frames-over-ipv4_configuring-ip-tunnels}配置 GRETAP 隧道来通过 IPv4 传输以太网帧 {.title}
:::
通用路由封装终端访问点(GRETAP)隧道在 OSI 级别 2 上运行，并封装 IPv4
数据包中的以太网流量，如 [RFC
2784](https://tools.ietf.org/html/rfc2784){.link} 所述。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
通过 GRETAP 隧道发送的数据没有加密。出于安全考虑，通过 VPN
或不同的加密连接建立隧道。
:::
此流程描述了如何在两个 RHEL 路由器之间创建 GRETAP
隧道以使用桥接连接两个网络，如下图所示：
::: informalfigure
::: mediaobject
![GRETAP 隧道](images/GRETAP-tunnel.png)
:::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
保留 `gretap0`{.literal} 设备名称。对该设备使用 `gretap1`{.literal}
或者不同的名称。
:::
::: itemizedlist
**先决条件**
-   每个 RHEL 路由器都有一个网络接口，它连接到其本地网络，接口没有分配
    IP 配置。