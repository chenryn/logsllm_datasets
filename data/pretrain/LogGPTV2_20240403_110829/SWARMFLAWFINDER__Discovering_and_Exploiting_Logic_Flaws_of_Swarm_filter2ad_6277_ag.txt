80
162
9
407
79
310
7
11
752
298
454
179
179
1,589
25
25
140
140
592
571
21
757
36
0
36
189
36
153
225
218
207
11
461
427
34
1,005
1,005
1,684
6
3
2
1
7
3
2
1
1
2
1
1
1
1
16
1
1
1
1
3
2
1
5
1
0
1
3
1
2
4
3
1
2
3
1
2
2
2
8
260
85
175
0
375
65
310
0
0
708
236
472
178
178
1,521
14
14
120
120
524
524
0
658
38
0
38
178
28
150
216
201
193
7
431
414
17
981
981
1,613
5
3
2
0
5
3
2
0
0
2
1
1
1
1
13
1
1
1
1
2
2
0
4
1
0
1
3
1
2
4
2
1
1
2
1
1
2
2
6
148
28
120
0
348
89
259
0
0
617
190
427
137
137
1,250
24
24
116
116
421
421
0
561
46
0
46
166
22
144
212
189
187
0
411
390
0
850
850
1,450
4
3
1
0
5
3
2
0
0
2
1
1
1
1
12
1
1
1
1
2
2
0
4
1
0
1
2
1
1
3
1
1
0
1
1
0
2
2
4
check whether ﬁxes conﬂict with others. If there is no conﬂict,
the integrated ﬁx should eliminate all logical ﬂaws we ﬁnd.
Invidivual Fixes for A1. Table V shows the results for A1.
The numbers in the table represent
the number of failed
missions during the testing. The “Unpatched” columns show
the SWARMFLAWFINDER’s result on the original algorithm
(identical to Table III). Observe that once each ﬁx is ap-
plied, SWARMFLAWFINDER does not ﬁnd any mission failures
caused by the ﬁxed logic ﬂaw, meaning that individual ﬁxes
are effective. For instance, with the ﬁx for C1-1, SWARM-
FLAWFINDER fails to ﬁnd mission failures due to C1-1.
A green cell represents a ﬁx that successfully resolves the
targeted ﬂaw. Note that some ﬁxes resolve ﬂaws that are not
targeted to handle. For example, the ﬁx for C1-2 resolves ﬂaws
caused by C1-3 and C1-4 (represented as yellow cells). The ﬁx
for C1-6 resolves ﬂaws of C1-3 and C1-4, because the ﬁx for
C1-2 makes drones more reactive, avoiding crashes due to C1-
3 and C1-4. Similarly, the ﬁx for C1-6 increases the sensing
sensitivity, mitigating crashes caused by C1-3 and C1-4.
Integrated Fix for A1. The last column shows the result
Fig. 17. Examples of Searching Space Deﬁnition from A1. Dots in this ﬁgure
represent executed test cases with the searching space restrictions.
Results. Table IV shows the experiments results. Observe
the random testing approach’s results vary depending on
the searching space restrictions. First, without any searching
space restriction (“No Restrict.” column), the random approach
misses many unique ﬂaws (represented as red cells): missing
8 from A1, 4 from A2, 3 from A3, and 4 from A4. When
we provide a restricted searching space (the space found by
SWARMFLAWFINDER), the random approach ﬁnds 10 more
ﬂaws (4 for A1, 1 for A2, 1 for A3, and 4 for A4) than the
random testing without the space restriction. If we simply look
at the number of mission failures (not the unique failures), the
random approach with the restriction ﬁnds even more instances
than our system. However, the quality of testing is worse than
ours. It misses 9 ﬂaws (C1-1, C1-2, C2-1, C2-3, and C3-1).
Our manual analysis shows that those ﬂaws are dependent
on subtle timings (i.e., to expose the ﬂaws, an attack drone
has to approach from a certain pose when the swarm makes
a turn). Without the guidance of DCC, the random testing
approach has difﬁculty catch such subtle timings. This result
shows that while the searching space is important in testing,
DCC guided test mutation plays a critical role in ﬁnding
subtle logical ﬂaws. Note that ﬁnding the searching space is a
core contribution of SWARMFLAWFINDER, which the random
testing approach by itself cannot achieve.
Further, we run the experiments with 2x and 3x Bases,
where they mostly perform worse as the searching space gets
larger but still better than the one with no restriction. There
are two exceptions in A1 (C1-2 and C1-4). With the 2x Base
space, the random testing ﬁnds 1 more unique ﬂaw in C1-
2. Similarly, C1-4 is not found with the 2x Base space while
found with the 3x Base space. Our manual analysis shows that
the random testing approach’s result is highly dependent on
the randomness in test mutation.
D. Quality of Fixes
A ﬁx is effective if SWARMFLAWFINDER fails to ﬁnd a
logical ﬂaw the ﬁx aims to resolve. In addition, we create an
integrated ﬁx that combines all the ﬁxes in the algorithm to
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:38:51 UTC from IEEE Xplore.  Restrictions apply. 
171824
(a) Base Radius(b) 2x Base Radius(c) 3x Base RadiusBase Radius(6m)Base Radius(6m)2x Base Radius (12m)Base Radius(6m)2x Base Radius(12m)3x Base Radius (18m)TABLE V
FUZZ TESTING WITH FIXES FOR A1.
ID Root Cause
A1
Total:
that
271
85
176
10
418
81
331
6
0
648
229
419
168
168
1,505
Fix for C1-2
# Exec. Uniq.
4
4
0
0
3
3
0
0
0
2
1
1
1
1
10
26
26
0
0
52
52
0
0
0
631
317
314
112
112
821
Fix for C1-3
# Exec. Uniq.
8
4
4
0
7
3
3
0
1