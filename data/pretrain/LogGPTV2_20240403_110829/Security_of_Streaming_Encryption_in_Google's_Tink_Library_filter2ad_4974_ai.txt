2𝑛 − 𝑖
𝑈(𝐽)−1∏︁
𝑗=0
In the real world, since 𝜏 is good,
Pr[𝒯1 = 𝜏] = 2−𝑢(𝑘+𝑛) ∏︁
𝐽∈{0,1}𝑘
𝑉 (𝐽)−1∏︁
𝑖=0
1
2𝑛 − 𝑖
Hence
Pr[𝒯1 = 𝜏]
Pr[𝒯0 = 𝜏] ≥ 1 .
1
2𝑛 − 𝑉 (𝐽) − 𝑗
.
(4)
Wrapping up. From Lemma 5 with 𝜖 = 0, Eq. (3), and Eq. (4),
Adv±prp
𝐺 (𝒜) ≤ 2𝑝𝑞 + 𝑞2
2𝑘+𝑛
.
as claimed.
D Proof of Theorem 2
Our proof relies on the Chi-Squared method of Dai, Hoang, and Tessaro [10], and the well-known
Azuma’s inequality, which we will review below.
The Chi-squared method. Suppose that we want to bound the advantage of a computationally
unbounded adversary 𝒜 in distinguishing a “real” system S1 from an “ideal” system S0. Without
loss of generality, assume that 𝒜 is deterministic and makes exactly 𝑞 queries. Since the adversary
is deterministic, for any 𝑖 ≤ 𝑞 − 1, the answers for the first 𝑖 queries completely determine the
first 𝑖 + 1 queries. For a system S ∈ {S1, S0} and strings 𝑧1, . . . , 𝑧𝑖, let pS,𝒜(𝑧1, . . . , 𝑧𝑖) denote the
probability that the answers for the first 𝑖 queries that 𝒜 receives when interacting with S are
𝑧1, . . . , 𝑧𝑖. If pS,𝒜(𝑧1, . . . , 𝑧𝑖) > 0, let pS,𝒜(𝑧𝑖+1 | 𝑧1, . . . , 𝑧𝑖) denote the conditional probability that
28
the answer for the (𝑖 + 1)-th query when 𝒜 interacts with system S is 𝑧𝑖+1, given that the answers
for the first 𝑖 queries are 𝑧1, . . . , 𝑧𝑖 respectively.
For each 𝑍 = (𝑧1, . . . , 𝑧𝑞), let 𝑍𝑖 = (𝑧1, . . . , 𝑧𝑖) and let 𝑍0 be the empty string. We write pS,𝐴(· | 𝑍𝑖)
and pS,𝐴(· | 𝑍0) to refer to probabilities pS,𝐴(· | 𝑧1, . . . , 𝑧𝑖) and pS,𝐴(·) respectively. We require that
if pS1,𝒜(𝑍𝑖) > 0 then so is pS0,𝒜(𝑍𝑖). For each 𝑖 ≤ 𝑞 and each vector 𝑍𝑖−1 = (𝑧1, . . . , 𝑧𝑖−1), define
𝜒2(𝑍𝑖−1) =∑︁
𝑧𝑖
(︀pS1,𝒜(𝑧𝑖 | 𝑍𝑖−1) − pS0,𝒜(𝑧𝑖 | 𝑍𝑖−1))︀2
pS0,𝒜(𝑧𝑖 | 𝑍𝑖−1)
,
statistical distance SD(︀pS0,𝐴(·), pS1,𝐴(·))︀ between pS0,𝐴(·) and pS1,𝐴(·), namely the best possible
where the sum is taken over all 𝑧𝑖 such that pS0,𝒜(𝑧𝑖 | 𝑍𝑖−1) > 0. Lemma 6 below bounds the
distinguishing advantage of 𝒜 between S1 and S0.
Lemma 6 (The Chi-Squared Lemma). [10, Lemma 3] Suppose whenever pS1,𝒜(𝑍𝑖) > 0 then
pS0,𝒜(𝑍𝑖) > 0. Then
SD(︀pS0,𝐴(·), pS1,𝐴(·))︀ ≤(︁1
E[𝜒2(𝑋 𝑖−1)])︁1/2
,
𝑞∑︁
𝑖=1
2
where the expectation is taken over vectors 𝑋 𝑖−1 of the 𝑖− 1 first answers sampled according to the
interaction with S1.
Azuma’s inequality. We now briefly recall the Azuma’s inequality; a more detailed exposition
can be found in a standard textbook of probability theory, for example, [25, Chapter 4.4].
Let 𝑇0, 𝑇1, . . . , 𝑇𝑚 be a sequence of random variables. We say that (𝑇0, . . . , 𝑇𝑚) is a martingale if
E[︀|𝑇𝑖|]︀  0,
Pr[︀|𝑇𝑚 − 𝑇0| ≥ 𝑐𝜆
𝑚]︀ ≤ 𝑒−𝜆2/2 .
√
The proof. Consider games 𝑃1–𝑃4 in Fig. 15. Game 𝑃1 corresponds to game Gprf
XOR[𝐸] with chal-
lenge bit 𝑏 = 1, and game 𝑃4 corresponds to game Gprf
XOR[𝐸] with challenge bit 𝑏 = 0. Game 𝑃2 is
similar to game 𝑃1, but it samples a truly random permutation 𝜋𝑖 for each user 𝑖, and for each
call to 𝐸(𝐾𝑖,·), it calls 𝜋𝑖(·) instead. Game 𝑃3 is similar to game 𝑃4, but instead of picking a truly
random function 𝑓𝑖 for each user 𝑖, it imposes a constraint that 𝑓𝑖(𝑋) ̸= 0𝑛 for every 𝑥 ∈ {0, 1}𝑛−1.
To bound the gap between games 𝑃1 and 𝑃2, we construct an adversary ℬ attacking the PRP
security of 𝐺 as follows. Adversary ℬ runs 𝒜 and simulates game 𝑃1. However, for each call to
𝐺(𝐾𝑖,·), it instead makes a corresponding query to its oracle Eval(𝑖,·). Thus
Pr[𝑃1(𝒜)] − Pr[𝑃2(𝒜)] = Advprp
𝐺 (ℬ) .
29
procedure Initialize//Game 𝑃1
𝐾1, 𝐾2, . . . ←$ 𝒦
procedure Eval(𝑖, 𝑀)
𝑌 ← 𝐺(𝐾𝑖, 𝑀 ‖ 0) ⊕ 𝐺(𝐾𝑖, 𝑀 ‖ 1)
return 𝑌
procedure Initialize//Games 𝑃3
Dom ← {0, 1}𝑛−1
Rng ← {0, 1}𝑛∖{0𝑛}
𝑓1, 𝑓2,··· ←$ Func(Dom, Rng)
procedure Eval(𝑖, 𝑀)
𝑌 ← 𝑓𝑖(𝑀); return 𝑌
procedure Initialize//Game 𝑃2
𝜋1, 𝜋2, . . . ←$ Perm(𝑛)
procedure Eval(𝑖, 𝑀)
𝑌 ← 𝜋𝑖(𝑀 ‖ 0) ⊕ 𝜋𝑖(𝑀 ‖ 1)
return 𝑌
procedure Initialize//Games 𝑃4
Dom ← {0, 1}𝑛−1
Rng ← {0, 1}𝑛
𝑓1, 𝑓2,··· ←$ Func(Dom, Rng)
procedure Eval(𝑖, 𝑀)
𝑌 ← 𝑓𝑖(𝑀); return 𝑌
Fig. 15: Games 𝑃1–𝑃4 in the proof of Theorem 2. The games share a common Finalize(𝑏′) that
returns (𝑏′ = 1).
procedure Eval(𝑖, 𝑀) //Games 𝑃3 , 𝑃4
𝑌 ←$ {0, 1}𝑛
if 𝑌 = 0𝑛 then bad ←$ true; 𝑌 ←$ {0, 1}𝑛∖{0𝑛}
return 𝑌
Fig. 16: Rewritten games 𝑃3 and 𝑃4 in the proof of Theorem 2. Procedure Initialize is empty and
thus omitted. Game 𝑃3 contains the boxed statement but game 𝑃4 does not.
For games 𝑃2–𝑃4, we will consider even a computationally unbounded adversary 𝒜, and thus we
can assume that 𝒜 is deterministic and never repeats a prior query. We claim that
Pr[𝑃2(𝒜)] − Pr[𝑃3(𝒜)] ≤
√
50𝑛 · 𝑞
2𝑛
;
the proof is postponed until further below. For games 𝑃3 and 𝑃4, due to the assumption that 𝒜 does
not repeat a prior query, instead of sampling functions 𝑓𝑖 eagerly, we can sample them lazily, and
thus the two games can be rewritten as shown in Fig. 16. In particular, in game 𝑃4, each query will
receive a truly random answer, and in game 𝑃3, each query will receive a random, non-zero answer.
The two games are identical until the flag bad is set, and thus from the Fundamental Lemma of
Game Playing [3],
Pr[𝑃3(𝒜)] − Pr[𝑃4(𝒜)] ≤ Pr[𝑃4 sets bad] .
If 𝒜 makes 𝑞 queries then the chance that one of the truly random answers becomes 0𝑛 is at most
𝑞/2𝑛. Hence
Pr[𝑃3(𝒜)] − Pr[𝑃4(𝒜)] ≤ 𝑞
2𝑛 .
Summing up,
Advprf
XOR[𝐺](𝒜) = Pr[𝑃1(𝒜)] − Pr[𝑃4(𝒜)]
3∑︁
𝑖=1
=
Pr[𝑃𝑖(𝒜)] − Pr[𝑃𝑖+1(𝒜)] ≤ Advprp
𝐺 (ℬ) + 8
30
√
𝑛 · 𝑞
2𝑛
.
We now bound the gap between 𝑃2 and 𝑃3 via the Chi-Squared method. Let S1 be the system that
implements game 𝑃2, and S0 be the system that implements game 𝑃3. Without loss of generality,
suppose that 𝒜 makes exactly 𝑞 queries. Let 𝑋 = (𝑋1, . . . , 𝑋𝑞) be the random variable for the 𝑞
answers in S1, and let 𝑋 𝑖 = (𝑋1, . . . , 𝑋𝑖) for every 𝑖 ≤ 𝑞. Fix 𝑖 ≤ 𝑞 and fix 𝑥 ∈ {0, 1}𝑛∖{0𝑛}. Let
𝑌𝑖,𝑥 be the following random variable. If 𝑋 𝑖−1 takes values (𝑧1, . . . , 𝑧𝑖−1) then 𝑌𝑖,𝑥 takes the value
pS1,𝐴(𝑥 | 𝑧1, . . . , 𝑧𝑖−1). Recall that
We claim that
This claim will be justified later. From Eq. (5) and Eq. (6),
𝜒2(𝑋 𝑖−1) = ∑︁
≤ ∑︁
)︁2]︁ ≤ 100𝑖𝑛
𝑥∈{0,1}𝑛∖{0𝑛}
(𝑌𝑖,𝑥 − 1/(2𝑛 − 1))2
1/(2𝑛 − 1)
𝑥∈{0,1}𝑛∖{0𝑛}
1
24𝑛
𝑌𝑖,𝑥 −
(2𝑛 − 1
E[︁(︁
E[𝜒2(𝑋 𝑖−1)] ≤ ∑︁
(︀Pr[𝑃2(𝒜)] − Pr[𝑃3(𝒜)])︀2 ≤ SD(︀pS0,𝐴(·), pS1,𝐴(·))︀2
E[𝜒2(𝑋𝑖−1)] ≤ 1
2
𝑥∈{0,1}𝑛∖{0𝑛}
≤ 1
2
𝑞∑︁