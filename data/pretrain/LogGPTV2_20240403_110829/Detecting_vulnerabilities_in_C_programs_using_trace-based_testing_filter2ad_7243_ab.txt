violate any security requirement. More speciﬁcally, it does
not include a call to the strcpy function. Statement 2 is
a declaration statement of a buffer; it sets the space of the
buffer to 10. We do not include this in the program con-
straint. Instead, we directly update the space ﬁeld of the
buffer, i.e., buf.space=10, for simplicity.
Statement 3 is a condition statement and the test
case exercises the TRUE branch, which implies that
the program constraint
a > 0 must be TRUE. Thus,
changes from (MIN ≤ a≤MAX)∧(s.strlen≥0) to
(05-6'/;&'."2#/5"-'*-6
)&-&$*/&'*'/&./'%*.&
'
E
'
D
C
&
!
/
.
.
&
%
"
$
C
&
$
(
E
'
F
C
&
!
/
-
"
5
/
#
%
&
8
7
'
%
5
2
"
1
+
0
!
E
'
G
C
&
!
/
5
2
.
.
0
*
-
H
'
0
/
5
2
5
1
*
:
.
5
/
*
!
Figure 2. SecTAC Workﬂow
SecTAC performs security testing through three steps,
preprocessing, symbolic execution, and satisﬁability anal-
ysis, as indicated in Figure 2.
In preprocessing, we gen-
erate execution traces from existing test cases and prepare
the symbol table for tracking the state of program variables;
in symbolic execution, we analyze every execution trace to
extract the program and security constraints at each point in
the trace; and in satisﬁability analysis, we ﬁnd inputs that
can detect security vulnerabilities.
Preprocessing: In this step, we ﬁrst use the transformer
to transform the source program into three-address code to
simply the analysis. To obtain execution traces, the instru-
menter parses and inserts the trace-logging code into this
transformed program. This transformed, instrumented pro-
gram is compiled and then executed by the program execu-
tor using all test cases. The trace-logging code generates an
execution trace for each test case.
The symbol-table builder constructs a symbol table for
all program variables for effectively tracking the program
constraints on them. In addition to the size and type infor-
mation, each program variable is also associated with addi-
tional attributes. For example, for a pointer that points into
a buffer, we introduce two attributes to track which buffer
and which position in the buffer it points into so that we can
test the out-of-bounds buffer access.
Symbolic execution: We use the symbolic executor
to symbolically execute the trace to capture program con-
straints and check the pattern of each executed statement
against the security requirements. Whenever a security re-
quirement applies, e.g., a security-critical function call or a
pointer addition statement is exercised, we generate a secu-
rity constraint corresponding to such security requirement.
The program and security constraints are predicates on the
symbolic values of program variables and their attributes.
Satisﬁability analysis: For each statement in the trace
that generates a security constraint (SC), we get the pro-
gram constraint (PC) at that statement and use a satisﬁa-
bility checker to check if PC ∧¬ SC is satisﬁable. If it is,
a security vulnerability is detected. The solution given by
the satisﬁability checker is then used to generate test data
to uncover the vulnerability. We express both program and
security constraints using the SMT-LIB format [19] and use
the Yices SMT-solver [7] as the satisﬁability checker.
4 SecTAC Implementation
SecTAC in detail based on the workﬂow in Figure 2.
4.1 Step 1: Preprocessing
In this section, we describe the implementation of
The main tasks of preprocessing are (1) generating exe-
cution traces and (2) constructing the symbol table.
4.1.1 Generating Execution Traces
In SecTAC, the program is transformedby CIL [18], instru-
mented by the Java parser generator JavaCC, and executed
under each test case to produce the correspondingexecution
trace. An execution trace was previously deﬁned in Section
2 as a sequence of source code statements exercised by a
test case. This deﬁnition facilitates the understanding of the
basic ideas of our approach. However, our implementation
generates execution traces consisting of sequences of ex-
pressions and special marks. Expressions are either assign-
ment statements or library function calls. Special marks are
used to indicate: (1) function call entry and exit, (2) con-
ditional branching, (3) parameter passing, and (4) returning
of values to variables from function calls.
Note that declaration statements are not included in ex-
ecution traces since they are not “executed” by test cases.
However, they contain important information about the type
and size of program variables. SecTAC handles declaration
statements in the symbol-table builder.
4.1.2 Constructing the Symbol Table
The symbol table is used to track the state of program vari-
ables; it includes information about all program variables
and user-deﬁned functions in the trace. Speciﬁcally, the
symbol-table builder parses the program and creates a data
object for each program variable and a function object for
each user-deﬁned function. These objects include various
attributes to track the state of program variables. Next we
describe the creation of the objects and discuss features
added to address pointer dependency.
Data objects: The symbol-table builder creates a data
class for every program variable type. A data class in-
cludes the size and type information as well as some other
attributes about the data type it represents; an object of this
class is created for each program variable of this data type.
We have a pre-deﬁned class for each primitive type or prim-
itive type with qualiﬁers. For example, we use classes Int
and BCharacter for integers and characters declared in
the program, respectively. For each composite type, we cre-
ate a class using its type name. We also have a pre-deﬁned
class Pointer for pointers, arrays, and buffers. All the
above data classes are extended from a common base class
BaseType that deﬁnes common attributes such as name,
type, and symbolic value.
It also includes a typesize
ﬁeld to record the size of the memory allocated to the vari-
able. For example, the typesize ﬁeld of an Int object
is 4 in a 32-bit computer.
Function objects: SecTAC also creates a class for each
user-deﬁned function to facilitate the trace analysis, i.e.,
help locate objects in the scope of any user-deﬁned function.
For every function class f, we create objects for the param-
eters to the corresponding function and the local variables
declared in this function. These objects are the members of
this function class f. Other statements in the function body
are not included in class f.
All function classes are extended from a common ab-
stract base class Function that includes a getObject
method, which can be used to locate the object represent-
ing a local variable or function parameter in the scope of a
user-deﬁned function given a name.
In C programs, the global variables or static variables de-
clared in the ﬁle scope are not included in any function. To
track these variables, SecTAC also constructs a Global
class and a ﬁle-scope class for each ﬁle, and puts the vari-
ables in these classes accordingly.
Pointer dependency: It is possible that several pointer-
type variables are declared and point to the same array.
For example, we can declare “char p[10]” and deﬁne
a pointer “char *q=p+5” in a C program. We know that
both pointers p and q point into the same array. The only
difference is that p points to the beginning of the array,
while q points to the sixth element of the array. The pointer
objects are said to be related or dependent if they point into
the same array. Hence, p and q are related. We notice that
the operation on a given pointer object may impact its re-
lated pointer objects. For example, if we copy a string of
length 6 to p, then the string lengths of p and q become 6
and 1, respectively. If we immediately copy another string
of length 4 to q, then the string lengths of p and q become
9 and 4, respectively.
To correctly analyze the impact of pointer operations
on related pointer objects, the Pointer class also in-
cludes a start ﬁeld and a space ﬁeld. A pointer object
uses start to record its starting position in the array, and
space to record the size of the space from its starting po-
sition to the end of the array. Thus, we can determine how
the operation on one pointer object can impact others. From
the previous example, we know that the start ﬁelds of the
objects for p and q are 0 and 5, respectively. If a string of
length 6 is copied to p, then we immediately know that q is
impacted and its string length should be 1.
Object locating: Object locating addresses how to de-
termine the target object(s) of a program statement. For
example, for statement “i=j.id;”, we need to locate the
objects created for variable i and the member id of the
structure j. As discussed before, each function class pro-
vides a method getObject to locate the object created for
variables in its scope given a name. However, when a mem-
ber of a composite type variable, e.g., j.id in the above
example, is referenced, we need to further locate the mem-
ber object representing the member of this variable. Every
class created for a composite type variable (e.g., struct or ar-
ray) has a method getObject to locate the member object
given a name or an offset.
4.2 Step 2: Symbolic Execution
Once we have the execution trace and the symbol table,
we start to analyze the execution trace statement by state-
ment to capture the program and security constraints using
symbolic execution (symbolic value propagation).
4.2.1 Producing Program and Security Constraints
The program constraint will be initialized when we are
building the symbol table. Speciﬁcally, when we create
an object for a program variable, we produce a program
constraint conjunction according to the variable declaration
information. For example, statement “int i;” leads to
the creation of an Int type object i. Thus, we produce
a program constraint conjunction (MIN ≤i.sym≤ MAX),
where i.sym is the symbolic value of i. The program con-
straint will also be updated when a statement in the trace is
symbolically executed.
• If it is an assignment statement, the attributes of the ob-
ject for the right part determines the attributes of the ob-
ject for the left part. In this case, we directly update the
attributes of the left object instead of updating the pro-
gram constraint.
• If it is a branch statement, we update the program con-
straint based on which branch is exercised. For example,
a conditional expression “@true i>j” indicates that
the TRUE branch is exercised. Thus, SecTAC generates
a program constraint conjunction (i.sym>j.sym).
• If the statement calls a library function, we need to up-
date the program constraint according to its semantics. If
the return value of the library function is assigned to a
variable, we generate a program constraint conjunction
according to this return type. Since some library func-
tions have constraints on their return values, a program
constraint conjunction that further restricts the range of
the returned value is produced. For example, the return
value of fopen is always greater than or equal to -1,
which is different from the default range of its return
type. In addition, some library functionshave side-effects