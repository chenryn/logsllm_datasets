# Title: Run-Time Reconfiguration for Emulating Transient Faults in VLSI Systems

## Authors:
- David de Andrés
- Juan Carlos Ruiz
- Daniel Gil
- Pedro J. Gil

### Affiliations:
Fault Tolerant Systems Research Group (GSTF), Technical University of Valencia (UPV)  
DISCA-ETS Informática Aplicada, Campus de Vera #14, E-46021, Valencia, Spain  
Phone: +34 96 3877007 Ext {75752, 85703, 75777, 79707}  
Fax: +34 96 3877579  
Email: {ddandres, jcruizg, dgil, pgil}@disca.upv.es

## Abstract
Advances in circuit integration have increased the likelihood of transient faults in VLSI systems. To ensure reliable operation, it is essential to study the system's behavior under such faults. This can be achieved using model-based fault injection techniques, which are significantly accelerated by field-programmable gate arrays (FPGAs). This paper explores how run-time reconfiguration (RTR) techniques can emulate transient faults in VLSI models. While FPGAs have traditionally been used to simulate bit-flip faults, recent studies highlight the need to consider a broader range of fault models, including delays, indeterminations, and pulses. The primary objective of this study is to analyze different RTR methods for emulating these faults while reducing the time required for model execution.

## 1. Introduction
Mission-critical systems, such as those in automotive, avionics, and space applications, require a high degree of dependability. Recent research indicates that the probability of transient faults is increasing in systems built with deep submicron technologies. Therefore, understanding the system's behavior in the presence of faults is crucial.

Fault injection is a well-established technique for assessing the dependability of VLSI systems. It involves studying whether the system can tolerate or safely handle faults while maintaining correct functionality. Model-based fault injection, applied to HDL models, allows early detection and correction of errors, thereby reducing development costs.

SRAM-based FPGAs offer a platform for implementing HDL models of VLSI systems. Although primarily used for logic emulation, their reconfiguration capabilities can also be leveraged to emulate system behavior in the presence of faults, a process known as fault emulation. Fault emulation can be performed using compile-time reconfiguration (CTR) and run-time reconfiguration (RTR). This paper focuses on transient fault emulation using RTR techniques.

Despite the growing importance of various transient fault models, current fault emulation studies have largely focused on the bit-flip model. This paper addresses the use of FPGA reconfiguration capabilities to emulate a wider set of transient faults, including bit-flips, pulses, delays, and indeterminations.

## 2. Run-Time Reconfiguration for Transient Fault Injection
Run-time reconfiguration (RTR) is a methodology for developing reconfigurable applications. It leverages the reconfiguration capabilities of programmable devices to change the system's behavior on-the-fly. In the context of fault emulation, RTR involves reconfiguring the system to emulate its behavior in the presence of faults during workload execution. Figure 1 illustrates the high-level process.

### Steps in Fault Injection Experiments
1. **Fault Location Process**: Identify the elements in the HDL model (ports, signals, and variables) that will be targeted for fault injection. After synthesis and implementation, these elements must be mapped to the internal resources of the FPGA.
2. **Fault Injection Process**: Inject the fault into the HDL model by reconfiguring the FPGA's internal resources. This reconfiguration depends on the type of fault, its location in the model, and the mapping of this location onto the FPGA. A new configuration file is generated and loaded into the device memory to change the FPGA's configuration and functionality.
3. **Observation Process**: Monitor the system's response to the injected fault. Typically, the outputs and state of the system are recorded for later analysis.

## 3. Generic FPGA Architecture
The use of RTR techniques is closely tied to the architecture of the FPGA. A generic FPGA architecture typically includes a grid of configurable blocks (CBs) connected by programmable matrices (PMs). Memory blocks are also embedded for implementing RAM/ROM memories.

- **Configurable Blocks (CBs)**: Each CB consists of a function generator (usually a four-input look-up table, LUT), a D-type flip-flop (FF), and multiplexers. The LUT implements combinational logic, the FF implements sequential logic, and the multiplexers determine the CB's functionality.
- **Programmable Matrices (PMs)**: PMs interconnect the CBs using pass transistors. The configuration of these elements is controlled by bits in the FPGA's configuration memory.

## 4. Emulation of Transient Faults in HDL Models Using FPGAs
Transient faults are short-lived and result from environmental interference. This section describes how RTR capabilities can be used to emulate these faults in HDL models.

### 4.1. Bit-Flip Faults
Bit-flip faults involve reversing the logic state of a memory element. Memory elements are typically implemented as registers, latches, or internal memory blocks. The fault injection process targets these elements when the model is executed on an FPGA.

- **Flip-Flops (FFs)**: The state of a FF can be inverted asynchronously using set/reset signals driven by the Global Set Reset (GSR) line or the Local Set Reset (LSR) line. The GSR line affects all FFs, requiring the current state of all FFs to be read and the set/reset logic to be configured. The LSR line only affects the connected FF, minimizing data transfer.
- **Internal Memory Blocks**: The contents of these blocks are controlled by the FPGA's configuration memory. This work proposes a method for emulating bit-flips in these memory blocks.

## 5. Prototype Tool for Transient Fault Emulation
A prototype tool has been developed to implement the proposed approaches for transient fault emulation. This tool was used to validate the model of a microcontroller, and the results from these experiments are presented in Section 6.

## 6. Experimental Results
This section presents the results obtained from the experiments conducted using the prototype tool. The validation of the microcontroller model and the observed system behavior in the presence of faults are discussed.

## 7. Related Work
This section discusses related topics and previous work in the field of fault emulation and RTR techniques.

## 8. Conclusions and Future Work
The main conclusions of the study are summarized, and potential directions for future work are outlined.

---

**Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06)  
0-7695-2607-1/06 $20.00 © 2006 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021, at 12:11:40 UTC from IEEE Xplore. Restrictions apply.**