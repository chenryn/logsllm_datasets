# Linux 101 Hacks - www.thegeekstuff.com

## CPU Section
- **Us Field**: Time spent running user code (non-kernel code).
- **Sy Field**: Time spent running kernel code.
- **Id Field**: Idle time.
- **Wa Field**: Time spent waiting for I/O.

## Hack 98: Netstat Command
The `netstat` command displays network-related information such as network connections, routing tables, and interface statistics. Here are some examples of how to use the `netstat` command:

### Display Active Internet Connections and Domain Sockets
```sh
# netstat -an
```
**Output:**
```
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        0      0 0.0.0.0:5666            0.0.0.0:*               LISTEN
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN
tcp        0      0 0.0.0.0:4086            0.0.0.0:*               LISTEN
...
Active UNIX domain sockets (servers and established)
Proto RefCnt Flags Type       State I-Node Path
unix  2      [ ACC ] STREAM    LISTENING 7894  /tmp/.font-unix/fs7100
unix  2      [ ACC ] STREAM    LISTENING 9662  /tmp/.gdm_socket
unix  2      [ ACC ] STREAM    LISTENING 10897 @/tmp/fam-root-128
```

### Display Active Connections with Process ID and Program Name
This can be very helpful to identify which program has initiated a specific network connection.
```sh
# netstat -tap
```
**Output:**
```
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 *:nrpe                   *:*                     LISTEN      16277/xinetd
tcp        0      0 localhost.localdomain:smtp *:*                    LISTEN      7263/sendmail: acce
tcp        34     0 localhost.localdomain:54221 localhost.localdomain:4089 CLOSE_WAIT 29881/httpd
tcp        0      3216 dev-db:ssh             cpe-76-94-215-154.soca:4682 ESTABLISHED 11717/sshd: ramesh
```

### Display Routing Table
```sh
# netstat --route
```
**Output:**
```
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window irtt Iface
192.168.1.0     *               255.255.255.0   U       0   0       0   eth0
162.244.0.0     *               255.255.0.0     U       0   0       0   eth0
default         192.168.1.1     0.0.0.0         UG      0   0       0   eth0
```

### Display RAW Network Statistics
```sh
# netstat --statistics --raw
```
**Output:**
```
Ip:
129
Linux 101 Hacks www.thegeekstuff.com
11080343 total packets received
0 forwarded
1 with unknown protocol
0 incoming packets discarded
11037744 incoming packets delivered
11199763 requests sent out
Icmp:
577135 ICMP messages received
64 input ICMP message failed.
ICMP input histogram:
destination unreachable: 537
timeout in transit: 65
source quenches: 2
echo requests: 576476
echo replies: 12
timestamp request: 3
address mask request: 3
581558 ICMP messages sent
0 ICMP messages failed
ICMP output histogram:
destination unreachable: 5079
echo replies: 576476
timestamp replies: 3
```

### Miscellaneous Netstat Commands
- **List of TCP connections to and from the machine:**
  ```sh
  # netstat --tcp --numeric
  ```
- **Display TCP ports that the server is listening on along with the program:**
  ```sh
  # netstat --tcp --listening --programs
  ```
- **Display the routing cache:**
  ```sh
  # netstat -rnC
  ```

## Hack 99: Sysctl Command
The `sysctl` command allows you to change Linux kernel parameters on the fly. It helps configure Linux kernel parameters during runtime.

### Display All Kernel Parameters
```sh
# sysctl -a
```
**Output:**
```
dev.cdrom.autoclose = 1
fs.quota.writes = 0
kernel.ctrl-alt-del = 0
kernel.domainname = (none)
kernel.exec-shield = 1
net.core.somaxconn = 128
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_wmem = 4096 16384 131072
net.ipv6.route.mtu_expires = 600
sunrpc.udp_slot_table_entries = 16
vm.block_dump = 0
```

### Modify Kernel Parameter for Permanent Change
After modifying the kernel parameter in `/etc/sysctl.conf`, execute `sysctl -p` to commit the changes. The changes will persist after a reboot.
```sh
# vi /etc/sysctl.conf
# sysctl -p
```

### Modify Kernel Parameter Temporarily
To temporarily modify a kernel parameter, execute the following command. Note that these changes will be lost after a reboot.
```sh
# sysctl -w {variable-name=value}
```

## Hack 100: Nice Command
The kernel decides the amount of processor time required for a process based on the nice value. The possible range for nice values is -20 to 20. A process with a nice value of -20 is very high priority, while a process with a nice value of 20 is very low priority.

### Display Nice Value of All Running Processes
```sh
# ps axl
```
**Output:**
```
F UID   PID  PPID  PRI  NI  VSZ  RSS  WCHAN  STAT TTY          TIME COMMAND
4  0     1   0     16   0  2172  552  -      S    ?            0:17 init [5]
1  0     3   1     34   19 0    0    ksofti  SN   ?            3:18 [ksoftirqd/0]
1  0    10   1     5   -10  0    0    worker  S<  ?            0:01 [events/0]
4  0  5145  1     25   10  32124 18592 -      SNs  ?            0:08 /usr/bin/python /usr/bin/rhn-applet-gui --sm-client-id default4
4  0  5147  5142  16   0   3528  604  -      S    ?            0:00 /sbin/pam_timestamp_check -d root
1  503 17552 4180  16   0   14208 3920  -      S    ?            0:01 /home/www/apache2/bin/httpd -f /home/www/apache2/conf/httpd.conf -k start
```

### Assign a Low Priority to a Shell Script (Higher Nice Value)
In the example below, when the `nice-test.sh` script is started in the background, it takes the nice value of 0.
```sh
$ ./nice-test.sh &
[3] 13009
$ ps axl | grep nice-test
0  509  13009 12863 17  0   4652  972  wait   S    pts/1        0:00 /bin/bash ./nice-test.sh
```
Now, let's execute the same shell script with a different nice value.
```sh
$ nice -10 ./nice-test.sh &
[1] 13016
$ ps axl | grep nice-test
0  509  13016 12863 30  10  4236  968  wait   SN   pts/1        0:00 /bin/bash ./nice-test.sh
```

### Assign a High Priority to a Shell Script (Lower Nice Value)
In the following example, let's assign a nice value of -10 (minus 10) to the `nice-test.sh` shell script.
```sh
$ nice --10 ./nice-test.sh &
[1] 13021
$ nice: cannot set priority: Permission denied
```
Note: Only the root user can set a negative nice value. Log in as root and try again.
```sh
# nice --10 ./nice-test.sh &
[1] 13060
# ps axl | grep nice-test
4  0    13060 13024 10  -10  5388  964  wait   S<  pts/1        0:00 /bin/bash ./nice-test.sh
```

## Hack 101: Renice Command
The `renice` command alters the scheduling priority of a running process.

### Decrease the Priority of a Running Process (Increase Nice Value)
In the example below, an existing shell script is running at a nice value of 10.
```sh
$ ps axl | grep nice-test
0  509  13245 13216 30  10  5244  968  wait   SN  pts/1        0:00 /bin/bash ./nice-test.sh
```
To increase the nice value (thus reducing the priority), execute the `renice` command.
```sh
$ renice 16 -p 13245
13245: old priority 10, new priority 16
$ ps axl | grep nice-test
0  509  13245 13216 36  16  5244  968  wait   SN  pts/1        0:00 /bin/bash ./nice-test.sh
```

### Increase the Priority of a Running Process (Decrease Nice Value)
In the example below, an existing shell script is running at a nice value of 10.
```sh
$ ps axl | grep nice-test
0  509  13254 13216 30  10  4412  968  wait   SN  pts/1        0:00 /bin/bash ./nice-test.sh
```
To increase the priority, give a lower nice value. However, only the root user can increase the priority of a running process.
```sh
$ renice 5 -p 13254
renice: 13254: setpriority: Permission denied
```
Log in as root to increase the priority of a running process.
```sh
# su -
# renice 5 -p 13254
13254: old priority 10, new priority 5
# ps axl | grep nice-test
0  509  13254 13216 25  5   4412  968  wait   SN  pts/1        0:00 /bin/bash ./nice-test.sh
```

## 12 Amazing and Essential Linux Books
For further reading on Linux, I recommend the following books. These 12 Linux books are some of my favorites that I have enjoyed over the years and believe will enhance your technical abilities on Linux.

1. **Sed and Awk**, by Dale Dougherty and Arnold Robbins. Sed and Awk have transformed the way I work on the Linux command line. This book is the only material you would ever need on Sed and Awk. Once you've mastered even the basics, you'll be amazed at the complex tasks you can perform quickly and elegantly. For quick reference, I use the *Sed and Awk Pocket Reference* by the same author.
2. **Learning the Vi and Vim Editors**, by Arnold Robbins. As a command-line enthusiast, I am a huge fan of Vi and Vim editors. This book is essential for anyone who uses Vi and Vim, even if you have been using them for years.
3. **Bash Cookbook**, by Carl Albing, JP Vossen, and Cameron Newham. Whether you are a sysadmin, DBA, or developer, mastering shell scripting is crucial. This cookbook provides detailed examples to help you automate tasks and put your servers on auto-pilot mode.
4. **SSH, The Secure Shell**, by Daniel J. Barrett, Richard E. Silverman, and Robert G. Byrnes. This is the best book on SSH, covering both theoretical and practical aspects. It is a must-read for any system administrator, providing detailed configuration examples for different flavors of SSH.
5. **Essential System Administration**, by Ã†leen Frisch. This book covers all typical system administration tasks and is perfect for those managing multiple flavors of Unix. The pocket version, *Essential System Administration Pocket Reference*, is also useful.
6. **Linux Server Hacks, Volume One**, by Rob Flickenger. This book contains 100 practical hacks grouped into different sections. After mastering these, read *Linux Server Hacks, Volume Two* by William von Hagen and Brian Jones, which focuses on authentication, monitoring, security, performance, and connectivity.
7. **DNS and BIND**, by Cricket Liu and Paul Albitz. This book is essential for understanding DNS and BIND. It should be in every serious system administrator's library.
8. **Understanding the Linux Kernel**, by Daniel Bovet and Marco Cesati. This book explains the inner workings of the Linux Kernel 2.6, covering memory management, process scheduling, I/O architecture, and block devices. It is a treat for geeks curious about what's under the hood of Linux.
9. **Linux Cookbook**, by Carla Schroder. This book covers Linux features from both users and system administrators' perspectives. It includes chapters on installing and managing software on RPM-based and Debian systems.
10. **Linux Firewalls**, by Michael Rash. This book is essential for building a secure Linux system, specifically focusing on configuring an Intrusion Detection System using iptables, psad, and fwsnort.
11. **Linux Administration Handbook**, by Evi Nemeth, Garth Snyder, and Trent R. Hein. This comprehensive book is organized into three high-level sections: Basic Administration, Networking, and Bunch Oâ€™ Stuff.
12. **Beginning Ubuntu Linux**, by Keir Thomas and Jaime Sicam. This book is perfect for transitioning from Windows to Linux. Install Ubuntu on an old laptop or desktop and use this book as a guide.

## Extended Reading
For more articles, check out the "Best Of The Blog" section on The Geek Stuff blog. Some recommended articles include:
- Turbocharge PuTTY with 12 Powerful Add-Ons
- Nagios - Enterprise Monitoring Solution
- Nagios Jumpstart Guide
- Monitor Windows Server
- Monitor Linux Server
- Monitor Network Switch
- Monitor VPN Device
- Perform SSH and SCP without entering password
- From openSSH to openSSH
- From openSSH to SSH2
- From SSH2 to SSH2
- Vi / Vim Tips and Tricks
- Vim Macro Tutorial: How To Record and Play
- How To Use Vim as Perl IDE and C/C++ IDE
- Automatic Word Completion in Vim
- 3 Steps to Add Custom Header to a File Using Vim
- The Ultimate Guide for Creating Strong Passwords
- Firefox Add-On: Hire 7 Personal Bodyguards to Browse Internet Securely
- Tripwire Tutorial: Linux Host Based Intrusion Detection System
- Midnight Commander (mc) Guide: Powerful Text-based File Manager for Unix

## Your Feedback and Support
I hope you found the *Linux 101 Hacks* eBook helpful. Thank you for reading. I sincerely appreciate the support from regular readers of my blog. Without your tremendous support, it would have been difficult to find the motivation to write this eBook.

### Subscribe to TGS
To get Linux tips, how-tos, guides, and tutorials on an ongoing basis, please subscribe to The Geek Stuff blog. If you subscribe, you will receive new articles posted on the TGS website directly to your inbox or RSS reader.

### Contact TGS
Please use this contact form to send me your feedback, questions, or clarifications on any of the 101 hacks mentioned in this eBook.