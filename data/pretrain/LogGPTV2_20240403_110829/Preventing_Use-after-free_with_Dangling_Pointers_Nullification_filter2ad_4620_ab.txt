but also makes DANGNULL more robust on object relationship
tracings, since it is based on concrete values and reasons about
the correctness of pointer semantics with the liveness of source
and destination heap objects. If the check passes, DANGNULL
first removes an existing relationship, if there is any (line 14).
It then inserts the shadow pointer to both shadow objects (line
16-17).
Note, by using shadowObjTree, DANGNULL does not need
to handle pointer arithmetic to trace pointers. Specifically,
because shadowObjTree contains information (base and size)
of all live heap objects, given any pointer p, DANGNULL
can locate the corresponding object through a search query
(shadowObjTree.find()), i.e., finding object that has its base ≤
q child, which points to the shadow
object of div.
is hierarchical: each running process has multiple objects,
and each object has multiple in/out-bound pointers. Thus,
shadowObjTree is composed of several sub-data structures as
nodes, to better represent this hierarchical structure.
Figure 2 shows a structural view of shadowObjTree. A node
of shadowObjTree is a shadow object, which holds the object’s
memory layout information (i.e., the object boundary with base
and end addresses) and in/out-bound pointers (i.e., directed
references between objects). To find a shadow object for the
given pointer p, shadowObjTree searches for a shadow object
such that the corresponding object’s base ≤ p child = body;
8 + trace(&doc->child, body);
9
10 body->child = div;
11 + trace(&body->child, div);
12
13 // (c) memory free: unsafe dangling pointer, doc->child,
14 //
15 + freeObj(body);
16
17 // (d) use-aftre-free is prevented, avoid dereferencing it
18 if (doc->child)
19
is automatically nullified
doc->child->getAlign();
Example 2: Instrumented running example of Example 1
(actual instrumentation proceeds at the LLVM Bitcode level).
Memory allocations (new) and deallocations (free) are replaced
with allocObj() and freeObj(), and trace() is placed on every
memory assignment, according to the static instrumentation
algorithm (Algorithm 1).
In most cases as we quantified in §V, DANGNULL behaves
correctly without false positives. We have found one rare false
positive case, described in detail in §VI.
In our secured binary (Example 2), doc→child is auto-
matically nullified when body is freed: the shadow object
representing body was created (line 3), propagated to doc→child
(line 8), and nullified when the body is deallocated (line 15). As
a result, depending on NULLIFY_VALUE, the example would raise
the SIGSEGV exception (if NULLIFY_VALUE > 0) or continuously
run (if NULLIFY_VALUE == 0), both of which safely mitigates
negative security impacts by unsafe dangling pointers.
For the SIGSEGV exception cases, DANGNULL guarantees
that the program securely ends in a safe-dereference, which is
defined as follows.
Definition 4. Safe-dereference. If a dereference instruction
accesses the memory address in the range of [0, N] where it is
preoccupied as non-readable and non-writable memory pages
for a given constant N, such a dereference is a safe-dereference.
A safe-dereference guarantees that a dereference on nullified
unsafe dangling pointers turns into a secured crash handled
either by the operating system or DANGNULL’s SIGSEGV excep-
tion handler. In modern operating systems, it is common that
the first several virtual memory pages are protected to avoid any
potential null-dereference attacks (e.g., virtual address spaces
from 0 to 64K are protected in Ubuntu [46]). In other words,
DANGNULL can utilize this existing null address padding to
guarantee safe-dereferences (64K in Ubuntu). Even if this null
address padding is not supported by the operating system,
DANGNULL can still pre-allocate these spaces using the mmap()
system call to be non-readable and non-writable before any
other code runs.
For continuously running cases, DANGNULL utilized the
existing sanity check at line 18. This is because the semantic on
invalid pointers is identical to both DANGNULL’s nullification
and typical programming practices. In other words, because it
is common for developers to check whether the pointer value is
null before accessing it, DANGNULL’s nullification can utilize
ptr = real_alloc(size)
shadowObj = createShadowObj(ptr, size)
shadowObjTree.insert(shadowObj)
return ptr
lhsShadowObj = shadowObjTree.find(lhs)
rhsShadowObj = shadowObjTree.find(rhs)
# Check if lhs and rhs are eligible targets.
if lhsShadowObj and rhsShadowObj:
removeOldShadowPtr(lhs, rhs)
ptr = createShadowPtr(lhs, rhs)
lhsShadowObj.insertOutboundPtr(ptr)
rhsShadowObj.insertInboundPtr(ptr)
1 def allocObj(size):
2
3
4
5
6
7 # NOTE. lhs <- rhs
8 def trace(lhs, rhs):
9
10
11
12
13
14
15
16
17
18
19
20 def freeObj(ptr):
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
return
shadowObj = shadowObjTree.find(ptr)
for ptr in shadowObj.getInboundPtrs():
srcShadowObj = shadowObjTree.find(ptr)
srcShadowObj.removeOutboundPtr(ptr)
if shadowObj.base <= ptr < shadowObj.end:
*ptr = NULLIFY_VALUE
for ptr in shadowObj.getOutboundPtrs():
dstShadowObj = shadowObjTree.find(ptr)
dstShadowObj.removeInboundPtr(ptr)
shadowObjTree.remove(shadowObj)
return real_free(ptr)
Algorithm 2: The Runtime library algorithm. All error handling
and synchronization code is omitted for clarity. DANGNULL has
a global data structure (thread-safe), shadowObjTree, to maintain
object relations with shadow objects. allocObj() and freeObj()
replaced the malloc() and free() (and their equivalence, new and
delete in C++), and trace() will be inserted on every memory
assignments as a result of the static instrumentation (§III-B).
such existing checks and keep the application running as if
there were no unsafe dangling pointers.
This example is oversimplified for the purpose of clarifying
the problem scope and showing how DANGNULL can nullify
dangling pointers. In §V-A, we show that DANGNULL is
effective when applied to real, complex use-after-free bugs in
Chromium.
IV.
IMPLEMENTATION
We implemented DANGNULL based on the LLVM Com-
piler project [43]. The static instrumentation module is imple-
mented as an extra LLVM pass, and the runtime library is
implemented based on LLVM compiler-rt with the LLVM
Sanitizer code base. Table III shows the lines of code to
implement DANGNULL, excluding empty lines and comments.
We placed the initialization function into .preinit_array as
a ELF file format so that the initialization of DANGNULL is
done before any other function4. In this function, all standard
allocation and deallocation functions (e.g., malloc and free,
new and delete, etc) are interposed. In total, DANGNULL
interposed 18 different allocation functions in the current
implementation, and any additional customized allocators for
4DANGNULL’s prototype is implemented on a Linux platform. Although
several implementation details are specific to Linux, these can be generally
handled in other platforms as well.
7
Components
Static Instrumentation
Runtime Library
shadowObjTree
Red-black tree
Runtime function redirection
Others
Total
Lines of code
389
3,955
1,303
476
233
1,943
4,344
Table III: Components of DANGNULL and their complexities,
in terms of their lines of code. All components are written in
C++.
the target application can be easily added with one line of its
function signature.
To avoid multi-threading issues when running DANGNULL,
we used mutex locks for any data structures with the potential
for data racing. One global mutex lock is used for shadowObjTree,
and all shadow objects and their in/out–bound pointer sub-trees
also hold their own mutex locks.
To retain the target program’s original memory layout,
DANGNULL uses a dedicated allocator from Sanitizer that has
dedicated memory pages. All memory for metadata, including
shadowObjTree and its pointer sub-trees, is allocated from this
allocator. Thus, DANGNULL does not interfere with the original
memory layout, and it can avoid any potential side effects by
manipulating the original allocators [14].
We also modified the front-end of LLVM so that users of
DANGNULL can easily build and secure their target applications
with one extra compilation option and linker option. To build
SPEC CPU 2006 benchmarks, we added one line to the build
configuration file. To build the Chromium browser, we added
21 lines to the .gyp build configuration files.
V. EVALUATION
We evaluated DANGNULL on two program sets, the SPEC
CPU2006 benchmarks [40] and the Chromium browser [41] 5.
First, we tested how accurately DANGNULL mitigates known
use-after-free exploits (§V-A). Next, we measured how much
overhead DANGNULL imposes during the instrumentation
phase (§V-B) and the runtime phase (§V-C). Finally, we
conducted a stress test to see if DANGNULL runs well without
breaking compatibility (§V-D). All experiments were conducted
on an Ubuntu 13.10 system (Linux Kernel 3.11.0) with a quad-
core 3.40 GHz CPU (Intel Xeon E3-1245), 16 GB RAM, and
1 TB SSD-based storage.
A. Attack Mitigation
The goal of DANGNULL is to turn use-after-free or double-
free attempts into safe-dereferences by nullifying dangling
pointers. In order to test how DANGNULL accurately nulli-
fied unsafe dangling pointers and eventually protected the
system from temporal memory safety violations, we tested the
DANGNULL-hardened Chromium browser with real-world use-
after-free exploits. Given the Chromium version instrumented
5The Chromium browser is the open source project behind the Chrome
browser, and these two are largely identical.
(29.0.1457.65), we first collected all publicly available use-after-
free exploits from the Chromium bug tracking system [42],
which opens vulnerability information to the public after
mitigation and includes a proof of concept exploit6.
Table IV lists seven use-after-free vulnerabilities that existed
in the targeted Chromium version. All of these were marked
as high severity vulnerabilities by the Chromium team, which
suggests that these have a high potential to be used for arbitrary
code execution. Bug ID 162835 was specifically selected to later
demonstrate that DANGNULL can mitigate this sophisticated
exploit technique.
Before applying DANGNULL, all proofs-of-concept can
trigger SIGSEGV exceptions at invalid addresses (No-Nullify
column in Table IV). These invalid addresses are memory
addresses that are dereferenced, i.e., the values of unsafe
dangling pointers. Although we only present one value for
each vulnerability, this value would randomly change between
different executions due to ASLR and the order of memory
allocations. These seemingly random SIGSEGV exceptions can
be abused to launch control-flow hijacking attacks, information
leaks, etc. They are particularly dangerous if the vulnerability
offers a control between free and use (the right-most column,
Control b/w free and use). For example, with this control,
malicious JavaScript code can place crafted data in freed
memory and turn the SIGSEGV exception (i.e., deference the
unsafe dangling pointer) into control-flow hijacking attacks or
information leakages depending on the context of dereference
operations. Moreover, this control between free and use also
implies that the attackers can bypass memory error detection
tools (e.g., AddressSanitizer [38]) because it allows the attackers
to force the reuse of a freed memory region (see more details
in §VII and a concrete bypassing case (Example 5)).
Once Chromium is instrumented with DANGNULL, all of
these cases were safely mitigated (Nullify-value column).
Depending on the nullify value provided as a parameter,
all 28 cases (7 rows by 4 columns) result in the following
three categories: 1) integer values represent that DANGNULL
securely contained SIGSEGV exceptions with safe-dereference;
2) stopped by assertion represents that DANGNULL re-utilized
existing safe assertions in Chromium; and 3) check marks (✓)
represent that Chromium continuously runs as if Chromium is
already patched.
For the safe-dereference cases, it is worth noting that the
dereferenced address values are quite small (at most 0x2e8).
Although these seven exploits would not be enough to represent
all use-after-free behaviors, we believe this implies that the
moderate size of null address padding for safe-dereference
(§III-C2) would be effective enough. DANGNULL’s null address
padding can be easily extended without actual physical memory
overheads if necessary, and 64-bit x86 architectures can allow
even more aggressive pre-mappings. Moreover, unlike the case
before applying DANGNULL, these dereferenced addresses
did not change between different executions. This indicates
that unsafe dangling pointers were successfully nullified using
6We have not found any double-free vulnerabilities for the given Chromium
version. However, we believe DANGNULL would be equally effective against
double-free exploits because DANGNULL nullifies exploit attempts where both
use-after-free and double-free share common erroneous behaviors (i.e., at the
moment when the unsafe dangling pointer is created).
8
Bug ID CVE
Severity
No-Nullify
261836
265838
279277
282088
286975
295010
162835
-
2013-2909
2013-2909
2013-2918
2013-2922
2013-6625
2012-5137
High
High
High
High
High
High
High
0x7f27000001a8
0x1bfc9901ece1
0x7f2f57260968
0x490341400000
0x60b000006da4
0x897ccce6951
0x612000046c18
Nullify-value
2
0x22
0x2
0x2
0xf0
0x16
0x2
0
1
0x2e8
0x21
✓
0x1
✓
0x1
0xf0
0xf0
✓ 0x15
0x1
0x30
stopped by assertion
3
0x23
0x3
0x3
0xf0
0x17
0x3
Control b/w
free and use
yes
yes
yes
difficult
yes
yes
yes
Table IV: DANGNULL safely nullified all seven real-world use-after-free exploits for Chromium. Among these seven cases,
three correctly run even after use-after-free exploits as if it was patched (represented as a ✓), and one is safely prevented as
DANGNULL re-utilized existing assertions in Chromium (represented as stopped by assertion). Without DANGNULL, all exploits
are potential threats, leading to control-flow hijacking attacks, information leakages, etc. To be concrete, we also include invalid
pointers causing an exception with various nullification values (0-3), and their threat in terms of the chances of an attacker’s
control between free and use.
Name
Lan.
bzip2
C
gcc