visited with low runtime overhead when each system call is
made.
Using kernel-level mechanism to intercept system calls
can achieve low runtime overhead. Our experiments later
will show the overhead for pure algorithm execution is ac-
tually very low.
We will discuss how to handle DLLs later in the paper.
In this section we assume all the functions that the program
invokes are statically linked. We use relative program coun-
ters because the program may be loaded at different places
for different runs, but the relative positions within program
memory space will remain the same.
3.2 Virtual Stack Lists and Virtual Paths
As each system call is made, we extract the system call
name and the current PC, as the FSA method does.
In
addition, we also extract all the return addresses from the
call stack into a virtual stack list A = {a0, a1, . . . , an−1},
where n is the number of frames in the call stack, and an−1
is the return address of the function last called. The current
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
PC is then added into the list A as item an. For example,
assume a function f() is called within the main() function.
Then there are three elements in the virtual stack list when a
system call in function f() is made. a0 and a1 are the return
addresses of main() and f(), respectively; a2 is the current
PC. The virtual stack list denotes a history of all unreturned
functions.
Our model uses a virtual path to denote a transition be-
tween two system calls. Assume A = {a0, a1, . . . , an} and
B = {b0, b1, . . . , bm} are the virtual stack lists for the cur-
rent and the last system calls, respectively. Note that the
two system calls may be called in different functions. We
compare the lists A and B from the beginning, until we ﬁnd
the ﬁrst subscript l so that al (cid:3)= bl. As shown in Figure 1,
the virtual path between the two system calls is deﬁned as:
P = bm → Exit; . . . ; bl+1 → Exit; bl → al;
Entry → al+1; . . . ; Entry → an
(1)
where Entry and Exit are two specially deﬁned PCs de-
noting the entry and exit points of any function.
B
b0...
bl-1
bl
bl+1...
bm
A
a0...
al-1
al
al+1...
an
Figure 1. The virtual path from the last system
call to the current system call, whose virtual
stack lists are B and A, respectively.
The deﬁnition of the virtual path abstracts the execution
between two system calls. The program sequentially returns
from some functions (corresponding to the return addresses
bm−1 to bl), and then gradually enters some other functions
(corresponding to the return addresses al to an−1). We tra-
verse the virtual stack lists back to a common function (cor-
responding to the return address al−1 and bl−1, which are
equal), below which both system calls are made.
For recursive functions, the control ﬂows generally are
very data-driven. The virtual stack lists obtained may be
different for each distinct set of parameters, which results
in a lot of distinct virtual paths. This could make training
harder to converge or result in higher false positive rates.
We modiﬁed our method to avoid this problem. A common
property of recursion in virtual stack lists is that the same
return address occurs repeatedly. When our method ﬁnds
out that a pair of return addresses are the same, all the return
addresses between them are removed from the virtual stack
list, including one end of the pair. This reﬂects the fact
that we only record each function at most once in the call
history.
3.3 Training Phase
During training, we use a hash table, called RA (return
address) table, to save all the return addresses ever occurred
in the virtual stack lists of system calls. If the return ad-
dress is the last item in a virtual stack list (the current PC
item), the corresponding system call number is saved with
it. Another hash table, called VP (virtual path) table, is used
to save all the virtual paths. Virtual paths are denoted in a
compact string form.
The return addresses and virtual paths are gradually
added during many normal program runs. For each run,
we assume there is one null system call with empty virtual
stack list before the ﬁrst real system call, and another one
after the last real system call. The virtual path between the
null system call and the ﬁrst real system call, whose virtual
stack list is A = {a0, a1, . . . , an}, is:
P = Entry → a0; . . . ; Entry → an
(2)
The virtual path between the last real system call, whose
virtual stack list is B = {b0, b1, . . . , bm}, and the null sys-
tem call is:
P = bm → Exit; . . . ; b0 → Exit;
(3)
3.4 Online Detection Phase
After training, we can use the hash tables to monitor the
program execution online. As each system call is made, we
record its virtual stack list. Like in the training, we also as-
sume there are null system calls at the beginning and the end
of the program run. There may be several types of anomaly
phenomena:
• If we cannot get the virtual stack list, the stack must
be corrupted. This is a stack anomaly. This kind of
anomalies often happens during a coarse buffer over-
ﬂow attack.
• Assume the current virtual stack list
is A =
{a0, a1, . . . , an}. We check whether each item is in
the RA table. If any return address is missing, this is a
return address anomaly.
• If an does not have the correct system call, this is a
system call anomaly.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
• We generate the virtual path between the last and the
current system call according to the equations (1), (2)
or (3). If the virtual path is not in the VP table, this is
a virtual path anomaly.
One problem for the FSA method is that the intruder
could possibly craft an overﬂow string that makes the call
stack looks not corrupted while it really is, and thus evading
detection. Using our method, the same attack would prob-
ably still generate a virtual path anomaly because the call
stack is altered. Our method uses and saves more informa-
tion in training, so it is harder for attacks to evade detection.
3.5
Impossible Path Problem
Our method can help solve the impossible path problem
mentioned before. Assume the attacker can somehow mod-
ify the return address within a function f(), so that the pro-
gram enters function f() from one call point and exits from
another. This will not trigger an alarm for the FSA method
because all the transitions are legal. Our experiments later
will show carefully designed attacks exploiting this problem
can fool callgraph and abstract stack methods as well. This
kind of attacks can help the intruder because some critical
part of the program could be jumped, for example, some
permission checking code. The intruder can also use the
technique to repeat the execution of some program part to
create race conditions.
Our method will disallow the virtual path between the
last system call before the call stack alteration point and the
ﬁrst system call after the alteration point. This is because
in the call stack, the return addresses of function f() for
these two system calls will be different. These two return
addresses will be included, resulting in an invalid virtual
path.
4
Implementation Issues
Wagner et al. addressed some implementation issues for
their statically generated models [17]. If not handled prop-
erly, these issues will also affect the effectiveness of the dy-
namic monitoring approaches. However, Sekar et al. only
addressed one of the issues regarding DLLs [16]. More-
over, we believe that their method simpliﬁes the behavior of
DLLs so much that many intrusions on these DLLs may be
missed. We ﬁnd that some of these implementation issues
are much easier to handle at runtime than at static analy-
sis because some information is only available at runtime.
Wagner et al. also pointed out this as the second principle
in their paper [17].
4.1 Non-Standard Control Flows
For optimization and convenience, some non-standard
control ﬂows, such as function pointers, signal handlers and
setjmp() function, are often used in programming. Wagner
et al. stated that these features are always used in real appli-
cations of interests for intrusion detection [17]. They also
found that function pointers and setjmp() are extensively
used in some library functions.
Signals A signal handler is a function that is invoked
when the corresponding signal is received. The program
suspends the current execution and turn to the signal han-
dler. It continues the execution from the suspended point
after the signal handler returns. It is hard to consider signal
handling in the model because a signal may occur anytime
during the program execution. The problem is further com-
plicated if signal handlers can be called within each other.
If we treat signal handler calls as ordinary function calls in
training, there will be false positives when signals occur at
new places.
When the ﬁrst system call in a signal handler is executed,
we save the information about the last system call, includ-
ing its virtual stack list. The last system call is then set
to the null system call. When the signal handler returns,
we restore the information about the last system call. This
framework can be easily extended for the multi-level signal
handler case. Each execution of signal handlers is treated
like a program run. The same techniques used for training
and online detection before can still be applied here with
signal handlers.
For Linux, when a signal handler is called upon the re-
ceipt of a signal, a sigreturn system call is inserted into the
stack frame. It will be called when the signal handler re-
turns, to clean up the stack so that the process can restart
from the suspended point. If we ﬁnd a new sigreturn sys-
tem call in the call stack when a system call is made, we
know a signal handler was executed. If we encounter sigre-
turn, the signal handler just returned. Our method is simpler
than Wagner’s method because it does not need to monitor
the signals received or signal handler registrations.
setjmp()/longjmp() calls and function pointers The
setjmp()/longjmp() library functions are useful for excep-
tion and error handling. The setjmp() call saves the stack
context and environment for later use by longjmp(), which
restores them. After the longjmp() call is ﬁnished, the ex-
ecution continues as if the corresponding setjmp() call just
returned. Function pointers are used to dynamically choose
a function to call at runtime.
It is hard to handle them statically because it is hard to
predict statically the value of a function pointer, or which
setjmp() call is corresponding to a longjmp() call. Wag-
ner et al. can only come up with some rough solutions
that make the model more permissive than necessary or add
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
more nondeterminism because their methods do not train at
runtime. For our method, there is no such problem because
it does not need to be aware of function pointers or the li-
brary calls. In detection phase, if a new function is called
through a function pointer, or a new longjmp()/setjmp() pair
appears, our method will generate an anomaly. It is reason-
able to generate an anomaly here because some new situa-
tions have happened that never occurred before in training.
4.2 Dynamically Linked Libraries
the process’s information pseudo ﬁle system “/proc”. This
ﬁle contains all the memory block information we need.
There are structures containing similar information under
other ﬂavors of UNIX, such as Solaris.
Using the above approach, we can match a dynamically
loaded code block to the same code blocks in other runs,
although this block may be loaded to a different place. A
return address can be uniquely distinguished, and the func-
tions in DLLs can be modeled and checked just like stati-
cally linked functions.
One problem for both our method and the FSA method
is related to dynamically linked libraries (DLLs). The dif-
ﬁculty is that the functions within DLLs may be loaded at
different relative locations (comparing to the static portion)
for different program runs, so the program counters may
change from run to run. The methods Wagner et al. pro-
posed do not have the above problem because they do not
use PC information for online monitoring.
The FSA method tried to solve this problem by travers-
ing the stack back to the statically linked portion. Using the
virtual stack list concept, this means that the FSA method
uses the last item in the list that is in the statically linked
portion as the state. The behavior of a function in DLLs
is simpliﬁed to a list of system calls that can be generated
by this function and all functions it called. There will be
states that have many transitions pointing to themselves la-
beled with these system calls. This simpliﬁes the model
for DLLs a lot. However, intrusions may also occur in the
DLLs. For example, the intruder may install the Trojan ver-
sion of a DLL. The FSA method may make the model for
DLLs too simple to detect these intrusions. As detailed in
a later section, for security critical daemon programs in our
experiments, most system calls are actually made in DLLs.
We model the functions in DLLs just like any statically
linked function. During training, we use a “block” lookup
table to save the information for each executable memory
block of each forked process, including the start address, the
block length, the name (with full path) and the offset of the
ﬁle from which the memory block was loaded. We use the
block length, ﬁle name and offset but not the start address
to match the same memory blocks in different runs. When
we get a return address, we can use the block lookup table
to decide which memory block it is in and what the relative
PC within the block is. These two pieces of information
together can uniquely distinguish a return address. Each
return address is denoted by a global block index and an
offset within the block.
There can be another kind of anomaly: block anomaly.
This happens when we cannot match a memory block to
any memory block occurred during training. This can be
because the intruder is trying to load another DLL.
For Linux, there is a pseudo ﬁle named “maps” under
4.3 Threads
Currently, there are many different ways to implement