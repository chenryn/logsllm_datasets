Binary Code
Modiﬁed Symbolic Execution
Query w
DFA M
True/False
ContA(w)
True/False
w, MissA(M)
w
True/False
ContA(w)
Fig. 1. Illustration of our algorithm
5.1
Characterizing Message Types
Recall that a message type is a pair ⟨D, t⟩ where t is a set of ﬁnitely many
messages. We represent a set t using a predicate P describing the format of
that message type. Hence, we represent a message type by a pair ⟨D, P⟩. We
use predicates over variables {B0, . . . , BN−1}, representing the message bytes.
Recall that N is a maximal length of a message (See Section 3). m[i] denotes
the value of the i-th byte of m, such that 0 ≤ m[i] < 256. We deﬁne M(D, Px)
to be the set of messages from D that is matched by the predicate Px:
M(D, Px) = {m ∈ D | Px(m) = True}
Given a set of messages x ⊆ D, Px is extracted using the following simple
deﬁnition: we hold constraints on message bytes that have the same value for all
the messages in x. Formally, let m ∈ x, we deﬁne:
Px =
N−1
∧
i=0
φi,
φi =
{Bi = m[i], if ∀m′ ∈ x, m′[i] = m[i]
True,
Otherwise
}
∀0 ≤ i ≤ N − 1
Note that the above deﬁnition may be replaced with a more elaborate one, if
needed. We choose this deﬁnition because it is simple and is suﬃciently useful for
many real world protocols. In Section 5.4 we explain how to generate predicates
that are suﬃciently general to describe message types even though we are given
only a small subset of examples for that message type.
8
Ron Marcovich, Orna Grumberg, and Gabi Nakibly
5.2
Handling Alphabet Changes
Recall that the exact version of our method is infeasible in our setting. To rem-
edy this, we replace the sets of message types, Cont(w) and Miss(M), with
their approximations, denoted ContA(w) and MissA(M), of message type
candidates.
As we use an approximation to generate the new message type candidates,
they may intersect with previously found message types currently in Σ. This
breaks the assumption that sets of message types are pairwise disjoint. There-
fore, we present here an algorithm that, given C = ContA(w) or C = MissA(M),
incorporates C in Σ while making sure the elements of Σ remain pairwise dis-
joint. We denote by Σ the current alphabet and by Σ′ the updated alphabet
after the changes. The algorithm initializes Σ′ = Σ.
M(D, Pσ)
M(D, P)
M(D, Pσ ∧ ¬P)
M(D, P ∧ ¬Pσ)
M(D, Pσ ∧ P)
Fig. 2. Colliding predicates
Let c = ⟨D, P⟩ ∈ C be a message type
candidate. We say that ⟨D, P⟩ collides with
⟨Dσ, Pσ⟩ ∈ Σ if Dσ = D and M(D, P) ∩
M(D, Pσ) ̸= ∅. In order to detect if c collides
with σ, we check the satisﬁability of P ∧ Pσ.
If a collision is detected, then ⟨Dσ, Pσ⟩ is re-
moved from Σ and three message types are
added to Σ′: One that is based on a predi-
cate of the intersection of the colliding mes-
sage types and two message types that are based on the a symmetric diﬀerences
of the colliding message types (see Figure 2). The procedure to handle collisions
of a message type candidate c is presented in Algorithm 1.
Algorithm 1 The procedure to handle message type candidate
1: function handle candidate(⟨D, P⟩ ∈ C, Σ)
2:
P′ ← P, Σ′ ← Σ
3:
for all ⟨Dσ, Pσ⟩ ∈ Σ′ such that D = Dσ do
4:
if Pσ ∧ P′ is satisﬁable then
5:
Σ′ ← Σ′ \ {⟨D, Pσ⟩}
6:
if Pσ ∧ ¬P′ is satisﬁable then
7:
Σ′ ← Σ′ ∪ {⟨D, Pσ ∧ ¬P′⟩}
8:
end if
9:
Σ′ ← Σ′ ∪ {⟨D, Pσ ∧ P′⟩}
10:
P′ ← P′ ∧ ¬Pσ
11:
end if
12:
end for
13:
if P′ is satisﬁable then
14:
Σ′ ← Σ′ ∪ {⟨D, P′⟩}
15:
end if
16:
Σ ← Σ′
17: end function
PISE: Protocol Inference using Symbolic Execution and Automata Learning
9
Note that, if Σ originally includes only pairwise disjoint message types, then
it is guaranteed that message types ⟨D, Pσ ∧ ¬P⟩ and ⟨D, Pσ ∧ P⟩ do not collide
with any other message types in Σ. Therefore, it is only left to check for collision
with ⟨D, ¬Pσ ∧ P⟩ in Σ′.
During the procedure we must discard unsatisﬁable predicates. A predi-
cate may become unsatisﬁable in two special cases of collision: If M(D, Pσ) ⊂
M(D, P′) then Pσ ∧ ¬P′ is not satisﬁable and should be discarded (line 6).
If M(D, Pσ) ⊃ M(D, P′) then P′ ∧ ¬Pσ is not satisﬁable and should not be
inserted to Σ (line 13).
We run Algorithm 1 for every c ∈ C. After running this procedure for all
message type candidates, the elements of the resulting Σ′ are pairwise disjoint
and are set as the new alphabet.
If during the above procedure message types are removed from Σ then the L*
algorithm must be restarted with the updated Σ since the learning was done with
inaccurate alphabet. If message types are only added to Σ (and not removed)
then we say that Σ grows. In the latter case the method from the exact algorithm
(Section 4) is used without having to restart L*.
5.3
Equivalence Oracle
Answering equivalence queries in real world for black box systems is generally
infeasible [2]. Therefore, we deﬁne here an oracle to approximate equivalence
queries. We take advantage of a commonly used approach in which an equivalence
query is approximated using a sampling oracle. We use the Wp-Method [11] to
generate a test suite T ⊂ Σ∗
M of queries w. In this method, T is generated using
M and the alphabet ΣM.
The procedure to run a test suite T against a conjectured DFA M is shown
in Appendix A.1. Each w ∈ T is tested using a membership query. If ContA(w)
contains symbols that are not in ΣM, then False is returned with w and
MissA(M) = ContA(w). If w is in the symmetric diﬀerence of L and L(M),
then False is returned with w as a counterexample. If missing message types are
not found and a counterexample w is not found in the entire test suite T, True
is returned and the learning terminates. Recall that, if MissA(M) is returned,
then every w · σ, such that σ ∈ MissA(M), is handled as a counterexample.
5.4
Membership Oracle
Let w ∈ Σ∗ be a sequence of message types sent as a membership query. The
algorithm should answer whether w ∈ L and if w ∈ L it should also provide
ContA(w) – a set of message type candidates that may follow w. By deﬁnition,
w is a sequence of message types. Recall that such a sequence corresponds to
sessions of the protocol. We answer membership queries using symbolic execution
of the binary code.
A symbolic execution begins with a single active initial state, located at the
binary’s entry point. By stepping forward active states iteratively, a set of new
10
Ron Marcovich, Orna Grumberg, and Gabi Nakibly
active states is generated, representing multiple diﬀerent execution paths of the
binary. We divide the symbolic execution into two phases: monitoring phase,
which answers whether w is a valid session of the protocol, and the probing
phase, which results in possible continuations of w. The latter phase is executed
only if w is a valid session. During the monitoring phase we guide the symbolic
execution to consider only execution paths that follow the given sequence w.
During the probing phase, however, we take into account all feasible executions
that are developed as continuations to the executions that we found during the
monitoring phase.
se
Send
⟨D, P⟩ ∈ ContA(w)
Recv
Send
⟨D, P⟩ ∈ ContA(w)
Send
⟨D, P⟩ ∈ ContA(w)
Monitoring Phase
Probing Phase
i = 1
2 . . . n − 1
i = n
Fig. 3. Illustration of symbolic execution during membership query
Monitoring phase Let w = ⟨Dσ1, Pσ1⟩ . . . ⟨Dσn, Pσn⟩ be the queried sequence.
We hook the functions in the binary that send and receive messages1. The pro-
cedures inserted in the hooks are presented in the following subsections. We
perform the monitoring phase in n stages: We start with a single initial state
se located at the binary code’s entry point. For each stage 1 ≤ i ≤ n we add
constraints of the predicate of the message type ⟨Dσi, Pσi⟩. These constraints
restrict the symbolic execution to execution paths that send or receive a mes-
sage of type ⟨Dσi, Pσi⟩ at the current stage. We then resume the execution of
all active states, until all active states are restricted to the i-th message type.
In the next subsections we explain in detail how we eliminate execution paths
that do not match w. Recall that states with unsatisﬁable constraints as well as
abort states, are discarded automatically.
If we successfully ﬁnish the execution of the last stage (for i = n) with at
least one active state, then there is at least one valid session of the binary code
that matches the sequence of message types of w. In such a case the answer
to the query is True. If, however, during one of the stages there are no active
states left, then w represents invalid session for the binary code, and therefore
the oracle returns False as the query’s result.
1 Such functions can be trivially identiﬁed by ﬁnding the system calls that send or
receive messages.
PISE: Protocol Inference using Symbolic Execution and Automata Learning
11
In Figure 3, the monitoring phase is illustrated in the left part of the ﬁgure.
States that represent infeasible executions (infeasible constraints) are discarded
(gray). States that represent feasible executions that do not match the query
w are discarded as well (red). The stages of the monitoring are illustrated as
well. The ﬁgure represents a membership query that is answered with True, as
a single active state (magenta) is found at the end of the monitoring phase.
Monitoring incoming messages The receive function is hooked during the mon-
itoring phase with the following procedure. The purpose of this procedure is to
advance the monitoring of the queried sequence when the binary code receives
a message. Let s be a symbolic state during the i-th stage in which the binary
code calls the receive function, and let σi = ⟨Dσi, Pσi⟩ be the next expected
alphabet symbol in the query.
If σi represents outcoming messages (i.e Dσi = S), then s is not an execution
path that can match the queried sequence w: the execution path represented by
s receives a message in the i-th stage whereas the query w represents sessions
that send a message from M(S, Pσi) in the i-th stage. Therefore we discard s.
On the other hand, if σi represents incoming message type (i.e Dσi = R), we
move s to the i+1-th stage with s′ as its successor. We attach to s′ an assumption
that a message from M(R, Pσi) is read from the network. We implement this
assumption by inserting the predicate Pσi(msg) to the constraints of s′, where
msg is the received message buﬀer.
Once s′ resumes execution, it will continue as if the received message satisﬁes
Pσi and thus ”forcing” descendant states to follow only execution paths that
represent the reception of messages from M(R, Pσi) during the i-th stage.
Monitoring outcoming messages The procedure to hook a send function is similar
to the one used above for incoming messages. The purpose of the procedure is
to perform the monitoring of the queried sequence when the binary code sends
a message. Let s be a symbolic state in which the binary code calls the send
function, and let σi = ⟨Dσi, Pσi⟩ be the next expected alphabet in the query.
In case σi represents incoming messages (i.e Dσi = R), it means that the
execution path of s does not match the sequence query w and we discard s.
On the other hand, if σi represents an outcoming message type (i.e Dσi = S),
we move s to the i + 1-th stage with s′ as its successor. We attach to s′ an
assertion that a message from M(S, Pσi) is sent to the network. We implement
this assertion by inserting the predicate Pσi(msg) to the constraints of s′, where
msg is the sent message buﬀer.
Probing phase The purpose of the probing phase is to generate ContA(w) for
w for which the monitoring phase returned True. As above, we hook the send
and receive functions of the binary code but insert diﬀerent procedures. We
describe them in the upcoming subsections. The aim of the probing procedure is
to uncover all symbolic states that represent execution paths in which a message
is sent or received following w. For each such state s the constraints on the
12
Ron Marcovich, Orna Grumberg, and Gabi Nakibly
message buﬀer received or sent, denoted as msgs, are collected. We assume that
all concrete values for msgs in the context of state s belong to the same message
type and we generate a message type candidate to represent it.
In Figure 3, the probing phase is shown in the right part of the ﬁgure. Since
the purpose of the probing phase is to discover all message type candidates
that can follow the sequence w, we continue the execution from active states
matching the query w at the end of the monitoring phase (magenta). A message
type candidate c is generated from every state s (green), and added to ContA(w).
We demonstrate the probing of message type candidates in Appendix A.2.
Probing outcoming messages The hooking procedure used in the send function
is straightforward. Here msgs is the sent message’s symbolic buﬀer. We assume
that the symbolic buﬀer has enough constraints under the current state s that
suﬃciently represent the sent message type. Therefore, no further symbolic exe-
cution is needed and the symbolic state s is passed to the procedure to generate
a message type candidate.
Probing incoming messages Let s be a state in which the binary code calls a
receive function during the probing phase. Let msg be the symbolic received
message. Upon calling receive, the content of msg is an unconstrained symbolic
value as it is received as an input by the binary code. Hence, one cannot extract
information on the format of the message type that is expected to be received
in state s. To solve this, we present the following novel approach to uncover
information regarding the expected received message type: we clone s to s′ with
msgs′ = msg and resume symbolic execution of s′. During this execution we
assume that the binary code will parse the received message, hence constraints
will be developed on msgs′ that will reveal the format expected by the binary
code. We choose to resume the execution until the binary code sends or receives
another message, or until the code terminates. We assume that until that point
the code completes parsing the received message and acts upon its content,
hence suﬃcient constraints are accumulated on the message buﬀer to identify the
expected message type to be received. During these instructions s′ is developed
into possibly multiple descendant states. These states are then passed to the
procedure to generate a message type candidate.
Generating message type candidates Let s be a state that successfully probed