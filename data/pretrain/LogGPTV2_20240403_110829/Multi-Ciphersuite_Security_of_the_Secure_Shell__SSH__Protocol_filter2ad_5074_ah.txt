Games 0, 1, and 2 proceed exactly as in the proof of Lemma 1.
Game 0. The game equals the multi-ciphersuite ACCE security experiment described in
Section 3.2.
Game 1. In this game we proceed identically to Game 1 in the proof of Lemma 1, adding
an abort rule for non-unique nonces, and get the same result.
Game 2. In the next two games we will exclude adversarial modiﬁcations of all messages
(KEXINIT to KEXDH INIT) by using a successful adversary to either output a hash collision (in
this game) or a signature forgery (next game). In this game we proceed exactly as Game 2 in
the proof of Lemma 1, adding an abort rule for hash collisions, and get the same result.
Game 3. In this game we ensure an adversary cannot use signature forgery to make some
session accept maliciously. If the session πs∗
i∗ maliciously accepts in the sense of Deﬁnition 5,
we know from the discussion in the proof of Lemma 1 that A has modiﬁed at least one of the
key exchange messages and computed a valid signature σ(cid:48) over the hash of the correspondingly
modiﬁed session string. In order to do this, either A has computed a valid signature itself, or A
has utilised the auxiliary signing algorithm (for the negotiated ciphersuite c) Auxc to compute a
hash and signature on the modiﬁed session string. In order for the ACCE-with-auxiliary-oracle
experiment to remain fresh, for all x that A queries to Auxc, we must have that Φc(x) = 0;
in particular, when x is parsed as a session string as given in equation (21), the negotiated
ciphersuite neg( (cid:126)spC, (cid:126)spS) (cid:54)= c. But all sessions that accept have negotiated ciphersuite equal
to c, and thus no query to the auxiliary oracle helps make any session accept maliciously. We
26
now embed a suf-cma signature challenger, receive a public key pk, guess the public-key pkj∗
the oracle will use for signature veriﬁcation, (again costing our reduction by a factor of nP ) and
replace pk with pkj∗. We know any maliciously accepting oracle has veriﬁed a signature σ(cid:48) over
j∗ with the same session string. Thus σ(cid:48) was
a session string where there exists no other oracle πt∗
generated by the adversary, and we can forward (sid(cid:48),σ(cid:48)) as a signature forgery to the suf-cma
signature challenger, and we get:
Pr(break(0)) ≤ Pr(break(0)
3 ) + nP Advsuf-cma
SIGc
(BA
2 ) .
(23)
Final analysis. After Game 3, all of the server’s relevant key-exchange messages are
authenticated via the signature σS, and since Game 3 aborts when a session accepts maliciously,
consequently we have
Pr(break(0)
3 ) = 0 .
(24)
Lemma 6 (Channel security w/auxiliary oracle). Let SSHc be a signed-DH SSH ciphersuite with
signature scheme SIGc, hash function Hc, Diﬃe–Hellman group (gc, qc), and BSAE scheme StEc,
and deﬁne Auxc and Φc as above. The algorithms B3, B4, B5, given in the proof of the lemma,
are such that, for all algorithms A,
Advacce-so-aenc-aux
SSHc,Auxc,Φc
(A) ≤ Advacce-so-auth-aux
Advddh
SSHc,Auxc,Φc
(A)
gc,qc(BA
(cid:16)
(BA
4 ) + Advbsae
where nP , nS, and µ are as in the statement of Theorem 1, and BA
3 , BA
the same running time as A.
3 ) + Advprf
4 , BA
+ nP nS
PRFc
StEc(BA
5 )
.
5 have approximately
(cid:17)
(cid:19)
The proof proceeds identically to the proof of Lemma 2 and yields the same result.
7.4 Final result: Multi-ciphersuite SSH
Combining Lemmas 5 and 6 from the previous subsection with the composition theorem
(Theorem 3) immediately yields that the SSH protocol is multi-ciphersuite secure, even with key
re-use across ciphersuites.
Corollary 1 (SSH is multi-ciphersuite secure). Let (cid:126)SSH be the multi-ciphersuite SSH protocol
with each of the nSP ciphersuites SSHc being a signed-Diﬃe–Hellman ciphersuite as in Section 4.
The algorithms B1, . . . , B5 inferred from the proof are such that, for all algorithms A:
Advmcs-acce-so-auth
(cid:126)SSH,c
(A) ≤ nSP
+ Advcr
Hc(BA
1 ) + nP Advsuf-cma
SIGc
(BA
2 )
(cid:18) (nP nS)2
2µ
and
Advmcs-acce-so-aenc
(cid:126)SSH,c
(A) ≤ Advmcs-acce-so-auth
Advddh
(A)
gc,qq (BA
+ nP nS
(cid:126)SSH,c
(cid:16)
3 ) + Advprf
PRFc
(cid:17)
(BA
4 ) + Advbsae
StEc(BA
5 )
1 , . . . , BA
and BA
of the theorem apply for mutual authentication.
5 have approximately the same running time as A. Moreover, analogous versions
27
struct {
select (KeyExchangeAlgorithm):
case dhe_dss:
case dhe_rsa:
ServerDHParams params;
digitally-signed struct {
opaque client_random[32];
opaque server_random[32];
ServerDHParams params;
} signed_params;
case ec_diffie_hellman:
ServerECDHParams params;
digitally-signed struct {
opaque client_random[32];
opaque server_random[32];
ServerECDHParams params;
} signed_params;
} ServerKeyExchange
struct {
opaque dh_p;
opaque dh_g;
opaque dh_Ys;
} ServerDHParams;
struct {
ECCurveType curve_type = explicit_prime(1);
opaque
ECCurve
ECPoint
opaque
opaque
opaque
prime_p ;
curve;
base;
order ;
cofactor ;
point ;
} ServerECDHParams;
Figure 6: Data structures for signed-Diﬃe–Hellman ciphersuites in TLS
8 TLS is not multi-ciphersuite secure
As described in the Introduction, the TLS protocol is in general not multi-ciphersuite secure.
In particular, in a cross-ciphersuite attack, identiﬁed by Mavrogiannopoulos et al. [28], signed
elliptic curve ephemeral Diﬃe–Hellman parameters can be interpreted as valid signed ﬁnite
ﬁeld ephemeral DH parameters. However, other combinations of ciphersuites do not suﬀer from
the attack. In this section, we review this attack, place it in context of our deﬁnition of multi-
ciphersuite security, explain why our composition theorem cannot apply to those ciphersuites,
and then show which combinations of TLS ciphersuites can be proven multi-ciphersuite secure.
8.1 Attack of Mavrogiannopoulos et al.
In TLS signed-DH ciphersuites (both ﬁnite ﬁeld and elliptic curve), the ServerKeyExchange
message [16, §7.4.3] contains a data structure with the Diﬃe–Hellman parameters and server’s
ephemeral public key, as well as the server’s signature on these values. The signature is meant
to provide server-to-client authentication. Figure 6 shows the ServerKeyExchange message and
sub-structures for ﬁnite ﬁeld and elliptic curve signed-Diﬃe–Hellman ciphersuites.
Putting aside the ﬁnite-ﬁeld versus ephemeral Diﬃe–Hellman case, some multi-ciphersuite
use of TLS is likely to be secure, for example signed ﬁnite-ﬁeld Diﬃe–Hellman with diﬀerent
hash algorithms or bulk ciphers. Bhargavan et al. [9] investigate the multi-ciphersuite security
of the TLS handshake, and show that certain combinations of signature schemes, hashes, PRFs,
and key establishment can be proven to be a secure AKE protocol even with key re-use. In the
rest of this section, we examine solely the case of ﬁnite-ﬁeld versus elliptic curve Diﬃe–Hellman
to illustrate the cross-protocol attack in our model and framework.
In the ServerKeyExchange data structure on the left of Figure 6, for both (ﬁnite ﬁeld) DH
and ECDH the digitally-signedstruct signed params is the signature over the client and
server random values and the Diﬃe–Hellman parameters structure. However, the inputs to the
signature do not contain an indicator distinguishing ServerDHParams or ServerECDHParams:
the ﬁelds from the relevant sub-structure are simply concatenated without a preﬁx. Since the
signature itself does not explicitly indicate whether the thing that is signed is a ServerDHParams
or a ServerECDHParams structure, we are at risk of a cross-ciphersuite attack.
Mavrogiannopoulos et al. show that there is enough ﬂexibility in the ServerECDHParams
struct to construct something that is valid in both ﬁnite ﬁeld and elliptic curve settings.
The ServerECDHParams struct actually supports several curve type values: explicit prime,
explicit char2, and named curve. The attack works by using an explicit prime curve (which
28
is why we only show the explicit prime ﬁelds in Figure 6).5 In particular, if the explicit
curve is actually the secp384r1 standardized curve and the server’s ephemeral private key
is selected randomly, then the ServerECDHParams data structure will also be a well-formed
ServerDHParams structure for a group of around 2048 bits with probability around 2−27.6.
Moreover, the resulting ﬁnite ﬁeld DH group will be smooth with reasonable probability, allowing
the attacker to compute the ephemeral private key, for a total attack success probability of
around 2−40.
The recommended ﬁx by Mavrogiannopoulos et al. is to explicitly include the name of the
peer, the handshake transcript, and the chosen key exchange algorithm in the digitally-signed
data structure. An alternative approach to stop the ephemeral private key recovery attack would
be to have the server check whether the DH group is a “good group”, but that may not rule out
other cross-ciphersuite attacks.
8.2 The attack in our framework
The above attack demonstrates that TLS signed-Diﬃe–Hellman ciphersuites are not multi-
ciphersuite secure in the sense of Section 3, since an attacker can take a ServerKeyExchange
message from a signed-ECDH ciphersuite and use that message to impersonate that server in
a ﬁnite ﬁeld DH ciphersuite with probability around 2−40, causing a client to accept without
a matching session. Note that this attack relies in some sense on the agreed upon ﬁnite ﬁeld
Diﬃe–Hellman group being “weak”. Previous analyses of Diﬃe–Hellman ciphersuites in TLS
have explicitly assumed that secure DH groups are used, so in a sense this type of attack is
excluded from the security analysis. But in fact the TLS speciﬁcation gives no mechanism to
check the strength of the proposed ﬁnite ﬁeld DH parameters.
To gain further intuition on the composition theorem of Section 6, we will also examine why it
cannot be applied to TLS signed-DH ciphersuites. At a high level, the problem is that we cannot
simultaneously satisfy pre-condition 1 of Theorem 3 and have ACCE security with auxiliary
oracle: there is no auxiliary algorithm Aux and predicate Φ such that we have both ACCE
security of signed-DH with auxiliary algorithm Aux under condition Φ and fresh simulatability
of signed-ECDH using the same Aux and Φ.
Suppose we wanted to prove signed-DH and signed-ECDH simultaneously secure using the
composition theorem. For each ciphersuite, we would need to pick an auxiliary algorithm Aux
that would allow us to simulate one ciphersuite using the other. However, as noted above,
some well-formed ServerECDHParams structures are also well-formed ServerDHParams structures.
Thus, there is no predicate Φ that can distinguish ServerECDHParams and ServerDHParams
structures. This means that we cannot prove that signed-DH is ACCE-secure with that Aux and
Φ. We could of course try a diﬀerent Aux or a more restrictive Φ that excludes some well-formed
but undesirable ServerECDHParams. However, then we would not be able to fully simulate the
ciphersuite (pre-condition 1 of Theorem 3). Thus, as we should expect, our composition theorem
cannot be applied to the signed-DH and signed-ECDH ciphersuites in TLS.
9 Discussion
Although we encountered some challenges in proving the ACCE-security of SSH, overall SSH
seemed somewhat easier to prove secure compared with the proofs of signed-DH ciphersuites
in TLS [20]. As in both cases, mutual authentication comes from digital signatures, but in
SSH the object that is signed is the (hash of the) session identiﬁer which is a signiﬁcant
portion of the transcript, whereas in TLS only the ephemeral keys are signed. This means the
5Most popular implementations of elliptic curve cryptography in TLS only implement the named curve type,
but the standard does allow explicit curves.
29
security guarantees from verifying the signature in SSH more readily lead to the proof of entity
authentication for the whole session.
Another nice consequence of how SSH uses signatures is that it enabled us to readily
prove multi-ciphersuite security. Even though long-term signing keys may be used by multiple
ciphersuites, in every case the object that is signed uniquely identiﬁes the ciphersuite it is
intended to be used for. This reinforces the importance of the long-held cryptographic wisdom
of ‘signing what you mean to sign’. Our multi-ciphersuite composition framework precisely
captures Anderson and Needham’s [3] principle 3 on protocol design: “Be careful when signing
or decrypting data that you never let yourself be used as an oracle by your opponent.”
The lessons learned from the TLS cross-ciphersuite attack [28] are particularly interesting in
the context of our multi-ciphersuite framework. Mavrogiannopoulos et al. suggested including
the ciphersuite and handshake transcripts in what is signed in TLS as a countermeasure. If
future versions of TLS do indeed do this, for example moving the server signature to just
before the server’s Finished message and including the complete transcript, then it should be
straightforward to adapt existing security analyses of TLS. Moreover, such an adaptation should
easily have a proof of single-ciphersuite security even with an auxiliary signing oracle, at which
point our composition theorem can readily be applied to yield multi-ciphersuite security. With
discussions for a new version of TLS beginning on the IETF’s mailing list, we hope that TLS
1.3 will indeed incorporate this suggestion.
With a security proof for SSH, an additional direction for future work is whether SSH’s
key re-exchange functionality can be modelled in the renegotiable ACCE framework [17], and
whether there is an elegant way to combine the renegotiation and multi-ciphersuite frameworks.
Additionally, other important real-world protocols that negotiate cryptographic parameters
and share long-term keys, including IPsec’s Internet Key Exchange (IKE) protocol, merit