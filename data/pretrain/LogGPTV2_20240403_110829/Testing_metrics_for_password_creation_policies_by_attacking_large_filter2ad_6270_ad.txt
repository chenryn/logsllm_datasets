256 
724 
2048 
64 
10+ Chars 
21 
4 
16 
45 
128 
What this shows is that a blacklisting approach must be used for 
any  sort  of  security  against  online  password  cracking  attacks, 
considering that nearly 1% of 7+ character long passwords were 
cracked  with  just  four  guesses.  In  all  fairness,  the  NIST  800-63 
document does state that a blacklisting approach was required for 
a  minimum  entropy  estimate.  That  slightly  contradicts  their 
original entropy calculation though, where they assign an optional 
6 bits of guessing entropy if a blacklist is employed. As we’ll see 
later,  even  with  a  blacklisting  approach,  the  NIST  model  of 
entropy  simply  does  not  hold.  In  fact,  no  amount  of  adding  or 
modifying values when calculating the NIST Entropy can allow it 
to be effectively applied to model the success rate of a password 
cracking session against human generated passwords. To illustrate 
this, Fig 4.2.6 shows the previous test in Fig 4.2.4, but this time 
also depicting the expected cracking success rate, (using Equation 
#5),  per  the  NIST  entropy  model  for  policies  requiring  at  least 
seven character long passwords. Equation #5 simply is a rewriting 
of Equation #3 in a way that can be easily graphed, and takes into 
account that a seven character minimum length password creation 
policy would have a NIST entropy score of 16. 
Chance_of_success(y) = Number_of_guesses(x)/216      5 
Fig 4.2.6 shows conclusively that the NIST notion of entropy does 
not  hold  when  modeling  a  password  cracking  session.  For 
example,  the  expected  success  rate  given  to  Equation  #5  means 
100%  of  the  passwords  should  be  cracked  given  just  65,536 
guesses. This is plainly not the case for any sort of real life attack. 
What’s dangerous about the NIST entropy measurement is that it 
overestimates  the  security  of  certain  passwords  that  may  be 
cracked quickly by the attacker, leaving the defender with a false 
sense of security, while drastically underestimating the security of 
many passwords that for all intensive purposes are resistant to an 
online  attack.  This  in  turn  can  lead  to  overly  burdensome 
password creation policies that disallow many passwords that in 
practice would be secure against a determined attacker. In short, 
the entropy value doesn’t tell the defender any useful information 
about how secure their password creation policy is. While you can 
change some values in the NIST calculation around, for example 
saying that each additional character gives 1 bit of entropy vs. 2, 
there is simply no way to transform a Shannon entropy value to 
take advantage of Equation #4 and provide the expected success 
rate  of  a  password  cracking  attack  against  human  generated 
passwords. 
Figure 4.2.6: Comparing the NIST Estimated Cracking Speed 
vs. a Real Life Attack. 
1684.3 
The Effectiveness of Using Blacklists of 
Banned Passwords 
The next question is how effective are different sized blacklists of 
prohibited  passwords.  This  was  simulated  by  creating  blacklists 
based on the training list input dictionary from the previous test. 
For example, a blacklist containing 500 banned passwords would 
be  formed  from  the  500  most  frequently  used  passwords  in  the 
training set. The results of re-running the attacks depicted in Fig. 
4.2.4 against the RockYou_test1 7+ character long list, and using 
various  length  blacklists,  can  be  seen  in  Fig  4.3.1.  For  this 
cracking session, we also allowed the attacker to have knowledge 
of the blacklist so they will not waste their time making guesses 
included in it. In addition, a limit of 50k guesses was once again 
used  to  simulate  an  online  cracking  session  if  there  was  no 
lockout policy. 
Figure 4.3.1: Results of Using Blacklists When Attacking 7+ 
Character Long Passwords of the RockYou1 Test List 
The most restrictive password creation policy in this test, where 
passwords must be seven characters long and a blacklist of 50,000 
words is used, yields a NIST calculated entropy value of 22. For a 
Level 1 certified system, that means an attacker would be able to 
make 4096 guesses, and for a Level 2 system the attacker would 
be able to make 256 guesses. To better illustrate this, Fig. 4.3.2 
shows  the  above  password  cracking  session  limited  to  4,000 
guesses. 
Figure 4.3.2: Results of Using Blacklists When Attacking 7+ 
Character Long Passwords – Shorter Cracking Session 
As the results in Fig 4.3.2 show, given a blacklist of 50k banned 
words, and the 4096 guesses allowed by a level 1 certified system, 
an attacker would still be able to crack 0.848% of the passwords, 
which is still much higher than the 0.097% failure rate that was 
predicted by the NIST model. For a level 2 certified system, an 
attacker would be able to make 256 guesses, and in the above test 
would crack 0.058% of the passwords. This is also significantly 
higher  than  the  NIST  predicted  0.0061%  failure  rate.  On  the 
positive  side,  while  the  results  show  further  flaws  in  NIST 
approach  of  calculating  password  entropy,  these  tests  also 
demonstrate  that  a  significant  improvement  in  the  security  of  a 
system may be obtained with even a moderately sized blacklist. 
4.4 
The Effectiveness of Requiring Uppercase 
Characters 
The  next  password  creation  policy  we  are  going  cover  is  case 
mangling. Fig. 4.4.1 shows a cracking session against a subset of 
the RockYou_test1 list of all the passwords that contained at least 
one  uppercase  character,  with  the  attacker  using  the  RockYou 
training input dictionary. The attacker once again has knowledge 
of  this  password  creation  policy,  and  makes  use  of  this  when 
generating their guesses. 
Figure 4.4.1: Attack when Uppercase is required vs. 
RockYou_test1 
significantly 
they  become 
What  immediately  sticks  out  is  that  the  password  cracking 
sessions  start  out  much  like  the  other  attacks,  but  quickly  hit  a 
plateau  where 
less  effective. 
Unfortunately this means that there still are a sizable number of 
users who pick weak passwords and would be compromised in an 
online cracking attack. On the plus side, this seems to imply that 
even  a  moderately  sized  blacklist  would  provide  significant 
protection. Looking into the possible causes for this plateau, Table 
4.4.1  shows  the  top  ten  case  mangling  rules  for  seven  character 
long alpha strings that were extracted from passwords with at least 
one uppercase character. These alpha strings were extracted from 
the RockYou_training28-32 sets and are independent of the rest of 
the  password  (aka  Table  4.4.1  only  displays  the  letters,  not  the 
digits or special characters that may have also been present in the 
password). As Table 4.4.1 shows, an attacker could target around 
89% of the seven character long alpha strings by either trying all 
uppercase letters or just capitalizing the first character. This is not 
inconsequential  since  in  an  online  attack  that  would  double  the 
number  of  guesses  an  attacker  would  have  to  make,  but  it  is 
hardly ideal. This also means that if an attacker has no additional 
knowledge of the target, they most likely would never try any of 
the other mangling rules in an online attack. That information still 
doesn’t  fully  explain  the  results  in  Fig  4.4.1  though.  As  a  side 
note, the reason a string of all lowercase characters appears in the 
above table is because some of the passwords had an uppercase 
character separated by another value, such as “P#assword”.  
169 Table 4.4.1: Top Ten Case Mangling Rules for 7 characters 
String: U=Upper, L=Lower 
UUUUUUU 
ULLLLLL 
ULLLULL 
LLLLLLL 
ULLLLLU 
ULLULLL 
ULULULU 
LLLLLLU 
UULLLLL 
UUULLLL 
To see if people who used uppercase characters created stronger 
passwords  in  other  ways  vs.  people  who  didn’t  use  uppercase 
characters,  the  RockYou_training28-32  passwords  were  divided 
by  if  they  contained  capital  letters  or  not.  The  results  of  a  few 
simple metrics comparing the two lists can be seen in Table 4.4.2. 
Probability 
53.56% 
35.69% 
1.05% 
1.03% 
0.90% 
0.85% 
0.68% 
0.62% 
0.61% 
0.59% 
Table 4.4.2: Comparison of Lowercase vs. Uppercase 
Metric 
Average Length 
% that Contained 
a Digit 
% that Contained 
a Special Char 
No Uppercase 
Characters 
7.86 characters 
53.93 
Only Passwords that 
Contained an Uppercase 
8.28 characters 
55.74 
3.15 
7.87 
This shows there is a small but noticeable increase in the use of 
other mangling rules when a password is capitalized. That doesn’t 
mean  that  everyone  who  used  uppercase  letters  picked  a  strong 
password.  For  example  in  the  RockYou  training  set  input 
dictionary,  the  top  five  passwords  that  contained  uppercase 
characters  were,  “PASSWORD”,  “ILOVEYOU”,  “PRINCESS”, 
“ABC123”, and “Princess”. This simply implies that the plateau 
may in part be due to a larger proportion of users applying other 
low probability mangling rules or base words. 
4.5 
The Effect of Requiring Special Characters 
Now  we  move  on  to  password  creation  policies  that  require 
special  characters,  (aka  not  uppercase,  lowercase  or  digits).  The 
results  of  running  cracking  sessions  against  the  RockYou_test1 
set,  where  only  passwords  containing  a  special  character  were 
counted, is shown in Figure 4.5.1.  
Figure 4.5.1: Attack when a Special Character is Required 
the  previously  mentioned  reasons  for  why 
Just  like  with  case  mangling,  the  attack  starts  out  fast,  but  also 
quickly plateaus. It should be noted that when special characters 
were required, even in the initial first thousand guesses the attack 
was  much  less  successful  then  with  the  previous  password 
creation  rules,  such  as  requiring  a  digit  or  capitalized  character. 
Beyond 
these 
passwords may be more resilient to attacks, (such as the users who 
chose special characters creating stronger passwords in general), 
the  variation  at  which  people  choose  special  characters  almost 
certainly has something to do with their strength as well. 
Table  4.5.1  shows  the  top  10  single  letter,  (aka  not  part  of  a 
keyboard combo such as “!@#$%”), special characters used. This 
data was collected from the RockYou_training28-32 lists.  
Table 4.5.1: Top Ten One Letter Special Characters 
Special Character 
. 
_ 
! 
- 
@ 
* 
# 
/ 
& 
Probability 
17.81% 
14.72% 
11.34% 
10.25% 
8.72% 
7.19% 
6.54% 
3.92% 
3.01% 
1.84% 
This is in stark contrast with digits, where for example 35% of the 
time if a single digit was selected, that digit was the number ‘1’. 
The  next  step  is  to  see  how  special  characters  were  used  in  the 
password itself. Table 4.5.2 shows the top 10 structures of seven 
character  passwords  from  the  RockYou_Train32  password  list 
that included at least one special character. 
Table 4.5.2: Top Ten Structures for Special Characters 
Probability 
28.50% 
7.87% 
6.32% 
6.18% 
3.43% 
2.76% 
2.64% 
2.50% 
2.38% 
2.17% 
String: A=Alpha, D=Digit, S=Special 
AAAAAAS 
AAASAAA 
AAAASDD 
AAAAASD 