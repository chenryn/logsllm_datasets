Listing 6. Deﬁnitions of section separators
1
----------------------------------------+------------------
2
UMAC (Upper
Medium
Access
Controller ) | Host
Interfaces
3
----------------------------------------+------------------
4
LMAC (Lower
Medium
Access
Controller )
5
-----------------------------------------------------------
6
PHY ( Physical
layer)
7
-----------------------------------------------------------
8
Wi -Fi
Antenna
9
-----------------------------------------------------------
Listing 7. Stack of layers in the Wi-Fi chip (the host communicates with both
UMAC and LMAC)
iwlwifi also deﬁnes the notion of Paging Memory. The sections in
this Paging Memory are loaded using an interface diﬀerent from the other
sections and described later in this article (cf. section 4.1).
All this knowledge gives a better understanding on how the sections
are grouped in the ﬁrmware ﬁle (listing 8).
1
Runtime
code
for
CPU 1 (LMAC):
2
SEC_RT
00404000..004042 b8 (0 x2b8 =696
bytes)
3
SEC_RT
00800000..00818000
(0 x18000 =98304
bytes)
4
SEC_RT
00000000..00038000
(0 x38000 =229376
bytes)
5
SEC_RT
00456000..0048 d874 (0 x37874 =227444
bytes)
6
7
Initialization
code
for
CPU 1 (LMAC):
8
SEC_INIT
00404000..004042 c8 (0 x2c8 =712
bytes)
9
SEC_INIT
00800000..008179 c0 (0 x179c0 =96704
bytes)
10
SEC_INIT
00000000..00024 ee8 (0 x24ee8 =151272
bytes)
11
SEC_INIT
00456000..00471 d04 (0 x1bd04 =113924
bytes)
12
SEC_INIT
00410000..00417100
(0 x7100 =28928
bytes)
13
14
Runtime
code
for
CPU 2 (UMAC):
15
SEC_RT
CPU1_CPU2_SEPARATOR_SECTION ("cc cc ff ff 00 00 00 00")
16
SEC_RT
00405000..004052 b8 (0 x2b8 =696
bytes)
17
SEC_RT
c0080000 .. c0090000
(0 x10000 =65536
bytes)
18
SEC_RT
c0880000 .. c0888000
(0 x8000 =32768
bytes)
19
SEC_RT
80448000..80455 ad4 (0 xdad4 =56020
bytes)
13 https://www.design-reuse.com/articles/39101/reusable-mac-design-for-
various-wireless-connectivity-protocols.html
8
Ghost in the Wireless, iwlwiﬁ edition
20
21
Paging
code
for
CPU 2 (UMAC):
22
SEC_RT
PAGING_SEPARATOR_SECTION ("bb bb aa aa 00 00 00 00")
23
SEC_RT
00000000..00000298
(0 x298 =664
bytes)
24
SEC_RT
01000000..0103 b000 (0 x3b000 =241664
bytes)
25
26
Initialization
code
for
CPU 2 (UMAC):
27
SEC_RT
CPU1_CPU2_SEPARATOR_SECTION ("cc cc ff ff 00 00 00 00")
28
SEC_INIT
00405000..004052 b8 (0 x2b8 =696
bytes)
29
SEC_INIT
c0080000 .. c0090000
(0 x10000 =65536
bytes)
30
SEC_INIT
c0880000 .. c0888000
(0 x8000 =32768
bytes)
31
SEC_INIT
80448000..80455 ad4 (0 xdad4 =56020
bytes)
Listing 8. Decoding of the sections in the ﬁrmware ﬁle, grouped by kind
2.3
Mapping the memory layout
There are some oddities in the list of the ﬁrmware sections presented
in listing 8. One of them is that some addresses start with 80 or c0 instead
of 00. Again, the Linux source code greatly helps to understand what is
going on: it deﬁnes FW_ADDR_CACHE_CONTROL to 0xC0000000 14 and uses
this value to mask the high bits out of some addresses.
During the study we ﬁrst used these addresses as-is. At some point
we stumbled upon the ARC700 Memory Management Unit (MMU) and
found in its reference manual [1]:
The build conﬁguration register DATA_UNCACHED (0x6A) describes
the Data Uncached region. Memory operations that access this
region will always be uncached. Instruction fetches that access the
same region will, however, be cached as this region relates to data
only.
This region, which is only present in builds with an MMU, is
ﬁxed to the upper 1 GB of the memory map. As the upper 2
GB of the memory is the un-translated memory region, the Data
Uncached region is consequently both uncached and un-translated.
This makes this region suitable for e.g. peripherals. Note that this
region is active even if the MMU is disabled.
Addresses starting with c0 are located in the upper 1 GB of the chip
memory and are therefore uncached and un-translated references to the
memory located at the address given by the remaining bits. And addresses
starting with 80, located in the upper 2 GB of the memory, can be cached
14 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/iwl-drv.c#L552
N. Iooss, G. Campana
9
but are never translated by the MMU. For example, the section loaded at
address c0080000 is in fact loaded at physical address 00080000 and uses
high bits in order to bypass the MMU translation. This is illustrated in
ﬁgure 2.
00000000
...
3fffffff
40000000
...
7fffffff
80000000
cached
bfffffff
c0000000
uncached
ffffffff
Virtual address space
MMU Translation
No translation
00000000
...
3fffffff
Physical address space
Fig. 2. Virtual and physical address spaces of ARC700 microcontrollers
Moreover iwlwifi’s code contains references to the address of two Data
Close Coupled Memories (DCCM) and a Static RAM Memory (SMEM).15
This enables writing a map of the memory layout used by the Wi-Fi chip,
presented in ﬁgure 3. This ﬁgure includes some components which are
presented later in this document.
2.4
Verifying the signature
Is it possible to run arbitrary code on the Wi-Fi chip by modifying
the ﬁrmware ﬁle? Now that the layout of the ﬁle has been presented,
it is possible to try modifying any byte in a section. Doing so triggers
a failure reported by iwlwifi and prevents the loaded ﬁrmware from
starting (listing 9).
1
iwlwifi
0000:00:14.3:
SecBoot
CPU1
Status: 0x3030003 ,
2
CPU2
Status: 0x0
Listing 9. Error message seen in the kernel log with a modiﬁed ﬁrmware
15 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/cfg/9000.c#L21
10
Ghost in the Wireless, iwlwiﬁ edition
00000000..00100000
Executable memory (maximum 1 MB)
00000000..00038000 Code used by CPU 1 (LMAC)
00060000..000611ca Loader code which enforces Secure Boot
00061e00..00061f00 Loader Secure Boot RSA public key
00080000..00090000 Code used by CPU 2 (UMAC)
00400000..00490000
SRAM (Static RAM, 576 KB)
00401000..00403000 Loader data, including its stack
00404000..004042c8 Code Signature Section for CPU 1 (LMAC)
00405000..004052b8 Code Signature Section for CPU 2 (UMAC)
00410000..00417100 Code used by CPU 1 Initialization (LMAC)
00422000..00448000 Pages used by CPU 2 (UMAC)
00448000..00455ad4 Code and data used by CPU 2 (UMAC)
00456000..0048d874 Code and data used by CPU 1 (LMAC)
0048f000..00490000 Sensitive data used by CPU 2 (UMAC,
external read access is denied)
00800000..00818000
DCCM (Data Close Coupled Memory, 96 KB)
(data used by CPU 1, LMAC)
00816000..00817000 Stack for LMAC CPU (4096 bytes)
00880000..00888000
DCCM 2 (32 KB)
(data used by CPU 2, UMAC)
00886014..00886334 Stack for task IDLE (800 bytes)
00886334..00886d34 Stack for task MAIN (2560 bytes)
00886d34..00887734 Stack for task BACKGROUND (2560 bytes)
00887734..0O887ffc Stack for interrupt handlers (2248 bytes)
00a00000..00b00000
Hardware Registers (for peripherals)
00a03088..00a0308c Feature ﬂags, including debug mode
00a04c00..00a04c84 Access bits for memory regions
00a24800..00a24b00 RSA2048 coprocessor
00a25000..00a25060 SHA256 coprocessor
00a38000..00a40000 NVM (Non-Volatile Memory)
Fig. 3. Map of the physical memory layout used by the studied Wi-Fi chip
In the error message, SecBoot likely means Secure Boot, a technology
used to ensure that only authorized code can run on a platform. How
is the ﬁrmware authenticated? Usually there is some kind of signature,
which is veriﬁed against a public key.
Looking at the sections from listing 8 again, they can be grouped
in ﬁve parts where each starts with a small section, located at address
0x00404000 for the LMAC CPU, at 0x00405000 for the UMAC CPU
and at 0x00000000 for the paging memory. This section is not parsed by
iwlwifi but it is small enough to be able to guess its layout:
— 0x30 bytes: header, including the build date at oﬀset 0x14 (for
example the bytes 28 01 21 20 encode the date 2021-01-28)
— 0x50 bytes: zeros (probably some padding)
N. Iooss, G. Campana
11
— 0x100 bytes: RSA-2048 modulus, in Little Endian
— 4 bytes: RSA exponent, always 0x10001
— 0x100 bytes: RSA-2048 signature, in Little Endian
— 4 bytes: number of other sections of the group, in Little Endian
— For other sections of the group: 0x10 bytes containing four 32-bit
Little Endian integers {7, size + 8, address, size}
The signature is a RSA PKCS#1 v1.5 signature using SHA256 on
the content of every section, including the small ﬁrst one without the
signature ﬁeld. This conﬁrms that the code loaded on the chip is actually
signed.
By the way, even though iwlwifi does not parse the small section, it
includes some references to something named CSS. The meaning of this
acronym is not documented but it likely is Code Signature Section.
This section contains the public key used to verify the signature.
Compared to usual secure boot implementations, this is normal. Indeed,
some chips only contain a ﬁngerprint of the public key, for example in
their fuses, and verify that the given public key matches this ﬁngerprint.
In this case the public key has to be provided. But some chips could forget
to check the public key, which would enable attackers to easily bypass the
authentication. With the studied Intel Wi-Fi chip, modifying the ﬁrmware
and re-signing it with a custom key did not work (and triggered the same
error as in listing 9).
2.5
Extracting the ﬁrmware code
The previous parts detailed the content of a ﬁrmware ﬁle, the layout
of the memory and the way the code was authenticated. This knowledge
is more than enough to extract the code which actually runs on the chip.
A last question remains before beginning to analyze it: which Instruction
Set Architecture (ISA) is the code using? A few years ago a tool named
cpu_rec.py was published exactly for this kind of need [5]. It guessed
that the code used the ARCompact instruction set. This instruction set
was supported by IDA Pro disassembler and the generated assembly code
seemed to be meaningful.
Moreover, when downloading the Intel Windows drivers,16 the archives
contain a text ﬁle express_logic_threadx.txt describing license amend-
ments for Express Logic ThreadX (listing 10). This ﬁle indicates that
wireless connectivity solutions developed by Intel could use ARC 605,
ARC7 and ARC6, which belong to the ARCompact family.
16 https://www.intel.com/content/www/us/en/download/18231/intel-proset-
wireless-software-and-drivers-for-it-admins.html (accessed on 2022-01-17)
12
Ghost in the Wireless, iwlwiﬁ edition
1
Express
Logic
ThreadX
License
Amendment / Addendum
Summary
2
[...]
3
1/9/2008
4
Adds
ARC
605
5
[...]
6
7/11/1012
7
Modifications
made
by
this
amendment
apply
only
to
Intel
group
that
develops
wireless
connectivity
solutions
8
Adds
ARC7
9
[...]
10
6/16/2013
11
Retroactively