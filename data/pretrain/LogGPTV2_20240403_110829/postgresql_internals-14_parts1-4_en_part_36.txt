development.1
Aquerymayremainunparallelizedforseveralreasons:
• Thistypeofaquerydoesnotsupportparallelizationatall.
• Parallelplanusageisforbiddenbytheserverconfiguration(forexample,be-
causeoftheimposedtablesizelimit).
• Aparallelplanismoreexpensivethanasequentialone.
To check whether a query can be parallelized at all, you can temporarily switch
on the force_parallel_mode parameter. Then the planner will build parallel plans off
wheneverpossible:
1 commitfest.postgresql.org/32/2844
commitfest.postgresql.org/32/2841
commitfest.postgresql.org/32/2610
349
Chapter18 TableAccessMethods
=> EXPLAIN SELECT * FROM flights;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Seq Scan on flights (cost=0.00..4772.67 rows=214867 width=63)
(1 row)
=> SET force_parallel_mode = on;
=> EXPLAIN SELECT * FROM flights;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Gather (cost=1000.00..27259.37 rows=214867 width=63)
Workers Planned: 1
Single Copy: true
−> Seq Scan on flights (cost=0.00..4772.67 rows=214867 width=63)
(4 rows)
Parallel Restricted Queries
Thebiggeristheparallelpartoftheplan,themoreperformancegainscanbepo-
tentiallyachieved. However,certainoperationsareexecutedstrictlysequentially
bytheleaderprocessalone,1eventhoughtheydonotinterferewithparallelization
assuch.Inotherwords,theycannotappearintheplantreebelowtheGathernode.
Non-expandablesubqueries. Themostobviousexampleofanon-expandablesub-
query2isscanningaresult(representedintheplanbytheCTEScannode):
=> EXPLAIN (costs off)
WITH t AS MATERIALIZED (
SELECT * FROM flights
)
SELECT count(*) FROM t;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Aggregate
CTE t
−> Seq Scan on flights
−> CTE Scan on t
(4 rows)
1 postgresql.org/docs/14/parallel-safety.html
2 backend/optimizer/plan/subselect.c
350
18.5 ParallelExecutionLimitations
Ifaisnotmaterialized,theplandoesnotcontaintheCTE Scannode,sothis v.
limitationdoesnotapply.
Note,however,thataitselfcanbecomputedintheparallelmodeifitturnsout
tobelessexpensive:
=> EXPLAIN (costs off)
WITH t AS MATERIALIZED (
SELECT count(*) FROM flights
)
SELECT * FROM t;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
CTE Scan on t
CTE t
−> Finalize Aggregate
−> Gather
Workers Planned: 1
−> Partial Aggregate
−> Parallel Seq Scan on flights
(7 rows)
Another example of a non-expandable subquery is shown under by the SubPlan
nodeintheplanbelow:
=> EXPLAIN (costs off)
SELECT * FROM flights f
WHERE f.scheduled_departure > ( -- SubPlan
SELECT min(f2.scheduled_departure)
FROM flights f2
WHERE f2.aircraft_code = f.aircraft_code
);
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Seq Scan on flights f
Filter: (scheduled_departure > (SubPlan 1))
SubPlan 1
−> Aggregate
−> Seq Scan on flights f2
Filter: (aircraft_code = f.aircraft_code)
(6 rows)
Thefirsttworowsrepresenttheplanofthemainquery:theflightstableisscanned
sequentially,andeachofitsrowsischeckedagainsttheprovidedfilter. Thefilter
351
Chapter18 TableAccessMethods
conditionincludesasubquery;theplanofthissubquerystartsonthethirdrow.So
theSubPlannodeisexecutedseveraltimes,onceforeachrowfetchedbysequential
scanninginthiscase.
TheupperSeq Scannodeofthisplancannotparticipateinparallelexecutionbe-
causeitreliesonthedatareturnedbytheSubPlannode.
Lastbutnotleast,hereisonemorenon-expandablesubqueryrepresentedbythe
InitPlannode:
=> EXPLAIN (costs off)
SELECT * FROM flights f
WHERE f.scheduled_departure > ( -- SubPlan
SELECT min(f2.scheduled_departure)
FROM flights f2
WHERE EXISTS ( -- InitPlan
SELECT *
FROM ticket_flights tf
WHERE tf.flight_id = f.flight_id
)
);
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Seq Scan on flights f
Filter: (scheduled_departure > (SubPlan 2))
SubPlan 2
−> Finalize Aggregate
InitPlan 1 (returns $1)
−> Seq Scan on ticket_flights tf
Filter: (flight_id = f.flight_id)
−> Gather
Workers Planned: 1
Params Evaluated: $1
−> Partial Aggregate
−> Result
One−Time Filter: $1
−> Parallel Seq Scan on flights f2
(14 rows)
UnliketheSubPlannode,InitPlanisevaluatedonlyonce(inthisparticularexample,
oncepereachexecutionoftheSubPlan2node).
The parent node of InitPlan cannot participate in parallel execution (but those
nodesthatreceivetheresultoftheInitPlanevaluationcan,likeinthisexample).
352
18.5 ParallelExecutionLimitations
Temporarytables. Temporarytablesdonotsupportparallelscanning,astheycan
beaccessedexclusivelybytheprocessthathascreatedthem. Theirpagesarepro-
cessedinthelocalbuffercache. Makingthelocalcacheaccessibletoseveralpro- p.
cesseswouldrequirealockingmechanismlikeinthesharedcache,whichwould p.
makeitsotherbenefitslessprominent.
=> CREATE TEMPORARY TABLE flights_tmp AS SELECT * FROM flights;
=> EXPLAIN (costs off)
SELECT count(*) FROM flights_tmp;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Aggregate
−> Seq Scan on flights_tmp
(2 rows)
Parallelrestrictedfunctions. Functionsdefinedasareallowed
onlyinthesequentialpartoftheplan.Youcangetthelistofsuchfunctionsfrom
thesystemcatalogbyrunningthefollowingquery:
SELECT * FROM pg_proc WHERE proparallel = 'r';
Onlylabelyourfunctionsas(tosaynothingof)
ifyouarefullyawareofalltheimplicationsandhavecarefullystudiedalltheim-
posedrestrictions.1
1 postgresql.org/docs/14/parallel-safety#PARALLEL-LABELING.html
353
19
Index Access Methods
19.1 Indexes and Extensibility
Indexesaredatabaseobjectsthatmainlyservethepurposeofacceleratingdataac-
cess.Theseareauxiliarystructures: anyindexcanbedeletedandrecreatedbased
onheapdata.Inadditiontodataaccessspeedup,indexesarealsousedtoenforce
someintegrityconstraints.
ThePostgrecoreprovidessixbuilt-inindexaccessmethods(indextypes):
=> SELECT amname FROM pg_am WHERE amtype = 'i';
amname
−−−−−−−−
btree
hash
gist
gin
spgist
brin
(6 rows)
v.. Postgre’sextensibilityimpliesthatnewaccessmethodscanbeaddedwithout
modifyingthecore. Onesuchextension(thebloommethod)isincludedintothe
standardsetofmodules.
Despite all the differences between various index types, all of them eventually
p. matchakey(suchasavalueofanindexedcolumn)againstheaptuplesthatcon-
tainthiskey.Tuplesarereferredtobysix-bytetuples,ors.Knowingthekey
orsomeinformationaboutthekey,itispossibletoquicklyreadthetuplesthatare
likelytocontaintherequireddatawithoutscanningthewholetable.
354
19.1 IndexesandExtensibility
Toensurethatanewaccessmethodcanbeaddedasanextension,Postgreim-
plementsacommonindexingengine. Itsmainobjectiveistoretrieveandprocess
sreturnedbyaparticularaccessmethod:
• readdatafromthecorrespondingheaptuples
• checktuplevisibilityagainstaparticularsnapshot p.
• recheckconditionsiftheirevaluationbythemethodisindecisive
Theindexingenginealsoparticipatesinexecutionofplansbuiltattheoptimiza-
tionstage. Whenassessingvariousexecutionpaths,theoptimizerneedstoknow
thepropertiesofallpotentiallyapplicableaccessmethods: canthemethodreturn
thedataintherequiredorder,ordoweneedaseparatesortingstage? isitpossible
toreturnseveralfirstvaluesrightaway,ordowehavetowaitforthewholeresult
settobefetched? andsoon.
Itisnotonlytheoptimizerthatneedstoknowspecificsoftheaccessmethod.Index
creationposesmorequestionstoanswer: doestheaccessmethodsupportmulti-
columnindexes? canthisindexguaranteeuniqueness?
Theindexingengineallowsusingavarietyofaccessmethods;inordertobesup-
ported,anaccessmethodmustimplementaparticularinterfacetodeclareitsfea-
turesandproperties.
Accessmethodsareusedtoaddressthefollowingtasks:
• implementalgorithmsforbuildingindexes,aswellasinsertinganddeleting
indexentries
• distribute index entries between pages (to be further handled by the buffer
cachemanager) p.
• implementthealgorithmofvacuuming p.
• acquirelockstoensurecorrectconcurrentoperation p.
• generateentries p.
• searchindexeddatabythekey
• estimateindexscancosts
355
Chapter19 IndexAccessMethods
Extensibilityalsomanifestsitselfastheabilitytoaddnewdatatypes,whichthe
access method knows nothing of in advance. Therefore,access methods have to
definetheirowninterfacesforplugginginarbitrarydatatypes.
Toenableusageofanewdatatypewithaparticularaccessmethod,youhavetoim-
plementthecorrespondinginterface—thatis,provideoperatorsthatcanbeused
withanindex,andpossiblysomeauxiliarysupportfunctions. Suchasetofopera-
torsandfunctionsiscalledanoperatorclass.
Theindexinglogicispartiallyimplementedbytheaccessmethoditself,butsome
ofitisoutsourcedtooperatorclasses. Thisdistributionisratherarbitrary: while
-treeshaveallthelogicwiredintotheaccessmethod,someothermethodsmay
provide only the main framework, leaving all the implementation details at the
discretionofparticularoperatorclasses.Oneandthesamedatatypeisoftensup-
portedbyseveraloperatorclasses,andtheusercanselecttheonewiththemost
suitablebehavior.
Hereisasmallfractionoftheoverallpicture:
bool_ops boolean
int4_ops integer
btree
text_ops
text
text_pattern_ops
Indexing
engine
gist_int4_ops
gist gist_text_ops
point_ops point
accessmethods operatorclasses datatypes
356
19.2 OperatorClassesandFamilies
19.2 Operator Classes and Families
Operator Classes
Anaccessmethodinterface1isimplementedbyanoperatorclass,2whichisasetof
operatorsandsupportfunctionsappliedbytheaccessmethodtoaparticulardata
type.
Classesofoperatorsarestoredinthepg_opclasstableinthesystemcatalog. The
followingqueryreturnsthecompletedatafortheaboveillustration:
=> SELECT amname, opcname, opcintype::regtype
FROM pg_am am
JOIN pg_opclass opc ON opcmethod = am.oid;
amname | opcname | opcintype
−−−−−−−−+−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
btree | array_ops | anyarray
hash | array_ops | anyarray
btree | bit_ops | bit
btree | bool_ops | boolean
...
brin | pg_lsn_minmax_multi_ops | pg_lsn
brin | pg_lsn_bloom_ops | pg_lsn
brin | box_inclusion_ops | box
(177 rows)
Inmostcases,wedonothavetoknowanythingaboutoperatorclasses.Wesimply
createanindexthatusessomeoperatorclassbydefault.
Forexample,hereare-treeoperatorclassesthatsupportthetexttype.Oneofthe
classesisalwaysmarkedasthedefaultone:
=> SELECT opcname, opcdefault
FROM pg_am am
JOIN pg_opclass opc ON opcmethod = am.oid
WHERE amname = 'btree'
AND opcintype = 'text'::regtype;
1 postgresql.org/docs/14/xindex.html
2 postgresql.org/docs/14/indexes-opclass.html
357
Chapter19 IndexAccessMethods
opcname | opcdefault
−−−−−−−−−−−−−−−−−−−−−+−−−−−−−−−−−−
text_ops | t
varchar_ops | f
text_pattern_ops | f
varchar_pattern_ops | f
(4 rows)
Atypicalcommandforindexcreationlooksasfollows:
CREATE INDEX ON aircrafts(model, range);
Butitisjustashorthandnotationthatexpandstothefollowingsyntax:
CREATE INDEX ON aircrafts
USING btree -- the default access method
(
model text_ops, -- the default operator class for text
range int4_ops -- the default operator class for integer
);
Ifyouwouldliketouseanindexofadifferenttypeorachievesomecustombehav-
ior,youhavetospecifythedesiredaccessmethodoroperatorclassexplicitly.
Each operator class defined for a particular access method and data type must
contain a set of operators that take parameters of this type and implement the
semanticsofthisaccessmethod.
For example,the btree access method defines five mandatory comparison opera-
tors.Anybtreeoperatorclassmustcontainallthefive:
=> SELECT opcname, amopstrategy, amopopr::regoperator