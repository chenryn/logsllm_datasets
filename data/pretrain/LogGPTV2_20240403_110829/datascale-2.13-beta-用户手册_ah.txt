# DataScale 服务配置与管理指南

## 配置 DataScale 服务
请参考 Backend 配置文档，在 `./config/datascale.toml` 文件中设置目标炎凰数据平台的接入方式。

## 创建 Group 和 Dataflow
### 创建 Group
根据 Group 配置文档，在 `./config/group/` 目录下创建名为 `another_group` 的组。

### 创建 Dataflow
参照 Dataflow 配置文档，在 `./config/group/default/dataflow/` 和 `./config/group/another_group/dataflow/` 目录下创建相应的 dataflow。有关详细信息，请参阅“创建 dataflow”部分。

## Ansible Host Inventory 配置
编辑 `./hosts` 文件，确保内容如下：
```ini
[all:vars]
enable_cluster=True
ds_groups=default
manager_ip=172.16.0.1
manager_port=7881
```

### 关于 `./hosts` 文件说明
- 当 `enable_cluster=True` 时，DataScale 将以集群模式部署。
- 默认定义了两个主机组：`manager` 和 `worker`。为了便于管理，可以将 `worker` 组进一步细分，如按每个 DataScale worker 所属的 group 分组：
  - `worker1` 属于 `linux_workers` 组，使用默认的 `ds_groups=default` 作为其在 DataScale 中的 group。
  - `worker2` 属于 `windows_workers` 组，使用指定的 `ds_groups=group_for_windows` 作为其在 DataScale 中的 group。
- 如果需要在同一服务器上同时部署 manager 和 worker，则需修改 `./hosts` 中的 `worker vars` 设置（例如 `service_name` 及各服务端口），以避免冲突。示例：
  ```ini
  [linux_workers:vars]
  service_name=datascale-worker
  ds_service_port=9881
  ds_web_port=9880
  ds_vector_api_port=9883
  ds_vector_prometheus_exporter_port=9882
  ```

## 推荐实践
为方便管理和追踪配置变更历史，建议使用版本控制工具（如 Git）来管理解压后的 DataScale Ansible 工具包及 DataScale 配置文件。

## 部署集群
### 安装 DataScale 服务
运行以下命令安装所有 DataScale manager 和 worker。请替换 `<source_file>` 为实际的安装包文件名：
```bash
$ ansible-playbook -i hosts playbook/install.yaml --extra-vars "win_source=<windows_package>.zip linux_source=<linux_package>.tar.gz"
```

### 启动 DataScale 服务
启动所有已安装的服务节点：
```bash
$ ansible-playbook -i hosts playbook/start.yaml
```

### 查看集群状态
通过 Web UI 或炎凰数据平台的 DataScale Monitoring 仪表板检查每个服务节点的状态，并验证通过 dataflow 收集的数据是否正确。

## 更多 Ansible Playbook 操作
- 停止所有服务:
  ```bash
  $ ansible-playbook -i hosts playbook/stop.yaml
  ```
- 更新配置:
  ```bash
  $ ansible-playbook -i hosts playbook/update.yaml
  ```
- 卸载服务:
  ```bash
  $ ansible-playbook -i hosts playbook/uninstall.yaml
  ```
- 限制操作范围至特定主机或组别:
  - 仅停止 Linux workers:
    ```bash
    $ ansible-playbook -i hosts playbook/stop.yaml --limit linux_workers
    ```
  - 仅卸载 `worker1` 上的服务:
    ```bash
    $ ansible-playbook -i hosts playbook/uninstall.yaml --limit worker1
    ```

## 管理 DataScale Worker 群组
有两种方法来管理 DataScale worker 的群组归属：
- **由 worker 自行指定**：在 `./config/datascale.toml` 中设置 `[service.worker]` 下的 `groups` 字段。
- **基于规则匹配**：在集群模式下，可以通过设定规则来自动分配 worker 到不同群组。一旦启用规则匹配，worker 自身指定的群组将被忽略。

## 自定义 Collector 开发
DataScale 提供了 collector 机制以支持定制化的数据采集需求。开发自定义 collector 包括以下几个步骤：

### Collector 安装包结构
一个基础的 collector 安装包应包含：
- `meta.json`: 描述 collector 信息及其执行参数。
- `exec/`: 存放可执行文件或脚本。

#### 示例目录结构
```plaintext
./
├── exec
│   └── dummy_log_printer.sh
└── meta.json
```

#### 命名规范
Collector 安装包文件名格式为 `<name>-<version>-<architecture>-<os>.zip`。例如：
- `example_collector-1.0.0-x86_64-darwin.zip`
- `snmp-1.0.1-arm64-linux.zip`
- `windows_event_log-1.0.0-x86_64-windows.zip`

### Collector 配置文件 (`meta.json`)
该文件定义了 collector 的基本信息和执行参数。示例内容：
```json
{
  "info": {
    "version": "1.0.0",
    "name": "Example Collector",
    "description": "用于演示或学习目的的 DataScale collector。"
  },
  "executables": [
    {
      "type": "",
      "name": "dummy_log_printer.sh",
      "args": [],
      "env": {},
      "transform": {}
    }
  ],
  "global_env": {},
  "global_transform": {}
}
```

### 开发 Collector Executable
Collector 的 executable 是负责实际数据采集工作的程序或脚本。例如，一个简单的输出日志的 shell 脚本：
```sh
#!/bin/sh
echo `date +%Y-%m-%dT%H:%M:%S%z` This is dummy log from dummy_log_printer.sh as a DataScale collector
```

### 运行模式
Collector 可以配置为两种运行模式之一：
- **Scheduled (周期性)**: 适用于能在短时间内完成任务并退出的程序。
- **Streaming (持续)**: 适合需要长时间运行并不断生成新数据的场景。

希望这份优化后的指南能帮助您更有效地配置和管理您的 DataScale 服务。