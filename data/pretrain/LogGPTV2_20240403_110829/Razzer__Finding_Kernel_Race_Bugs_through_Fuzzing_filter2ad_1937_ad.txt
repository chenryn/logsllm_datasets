22
23
24
25
26
27
28
29
30
31
32
33
34
# Post-race behaviors
thr0.add_syscalls(gen_random_syscalls())
thr1.add_syscalls(gen_random_syscalls())
# Determine the execution order
r = random([vCPU0, vCPU1])
thr0.add_hypercall(hcall_order(r))
# Trigger and check races
thr0.add_hypercall(hcall_set_bp(vCPU0, RP_i))
thr0.add_syscalls(syscalls[i])
thr0.add_hypercall(hcall_check-race())
thr1.add_hypercall(hcall_set_bp(vCPU1, RP_j))
thr1.add_syscalls(syscalls[j])
thr1.add_hypercall(hcall_check_race())
# @Pst: A singled threaded program (annotated)
# @i, @j: an index of racing syscalls within Pst
# @RP_i, @RP_j: an address of a corresponding racepair
# instruction (to syscalls[i] and syscalls[j], respectively)
Pmt = Construct_Pmt(thr0, thr1)
return Pmt
Fig. 5: RAZZER’s multi-thread generator algorithm
and thr1. At this point, we do not add racing syscalls yet—
thr0 contains syscalls before i-th syscalls (line 13) and thr1
contains syscalls from (i+1)-th syscalls to (j-1)-th syscalls
(line 14). To guide the execution order of RacePaircand,
RAZZER inserts hcall_set_order() while randomly selecting
the preceding vCPU (lines 17 and 18). Next, in order to trigger
the race deterministically at RacePaircand, RAZZER resorts to
hypervisor’s per-core breakpoint functionality by instrumenting
hcall_set_bp() (lines 21 and 25) immediately before inserting
racy syscalls (lines 22 and 26). RAZZER then instruments
hcall_check_race() further to check precisely if RacePaircand
truly causes a race condition (lines 23 and 27). Lastly, in order
to induce harmful post-race behaviors further (as described
in §II), RAZZER adds randomly generated syscalls (lines 30
and 31).
Multi-Thread Executor. The primary role of the multi-thread
executor is to run Pmt ﬁnally to test if RacePaircand truly triggers
a race. While running at runtime, it leverages hypercalls to setup
a per-core breakpoint in the RacePaircand instructions before
invoking a corresponding racy syscall. hcall_check_race()
then determines if a race is truly triggered by inspecting
the following two conditions: (1) if two breakpoints are
indeed captured by the hypervisor, and (2) the concrete
memory addresses accessed by the RacePaircand instructions
are identical.
Because causing a true race itself does not necessarily imply
a harmful race (§II), RAZZER also invokes post-race syscalls
in an effort to discern harmful races from true races. Most
modern kernels employ runtime race detection mechanisms to
check whether a harmful race occurs. For example, the Linux
(cid:24)(cid:23)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:09 UTC from IEEE Xplore.  Restrictions apply. 
kernel employs various dynamic techniques to detect harmful
races. Examples are lockdep [29], KASAN [2], or assertions
manually inserted by kernel developers. We enabled all of
these techniques while building the kernel binary such that
RAZZER can leverage this enhanced race detection capability.
If a violation is detected, RAZZER generates a detailed report
about the harmful race.
An important feature of RAZZER is that it provides feedback
to the multi-thread generator on Pmt causing a true race (even
when it is a benign race) such that Pmt can be mutated further,
but only for the part related to post-race behaviors.
Example: CVE-2017-2636 with Multi-Thread Fuzz. As
shown in Figure 3, once receiving Pst, the multi-thread generator
transforms Pst into Pmt according to the annotation information
of the matched RacePaircand. Following the transformation
algorithm (Figure 5), the generator places int fd = open(...)
and ioctl(fd, TCLFLSH) in user thread A and write(fd, ...)
in user thread B. It also instruments hypercalls accordingly—
i.e., a hcall_set_order() is inserted into thread A (this
example randomly selected vCPU0 as a parameter) and
hcall_set_bp() is inserted before the racy syscalls. After the
racy syscalls, hcall_check_race() is inserted to check if it
causes a true race. If so, RAZZER promotes RacePaircand to
RacePairtrue, and Pmt is pushed back to the generator such that
it can be mutated further. If any future mutation by the generator
inserts ioctl(fd, TCXONC) and close(fd), the executor will
observe the crash and then generate a race report (shown
in Figure 16 in the appendix). The race report shows the user
program which triggers the race (line 1 to 10 in Figure 16),
followed by detailed RacePairtrue information (line 12 to 20).
After that, the report also includes the crash report generated
by the kernel (lines 24 to 33). It is worth noting that the race
is the root cause of this kernel’s crash report.
IV. IMPLEMENTATION
We implemented RAZZER’s static analysis based on LLVM
4.0.0 and SVF [39], which provides the points-to analysis frame-
work. Because SVF is implemented for user-land programs,
we modiﬁed SVF to handle the kernel’s memory allocation
and free functions in the kernel. Moreover, as SVF ignores all
accesses to non-pointer variables even if a non-pointer variable
resides in the heap or in global structures, we modiﬁed SVF
to handle a non-pointer variable if the variable exists in the
heap area or in global structures. RAZZER’s static analysis
generates RacePaircand as a set of two instructions in a source
code, each of which is represented with a source ﬁlename
and a line number within a ﬁle. RacePaircand is translated
into a machine address during building the kernel using
debugging information generated by GCC. RAZZER’s hypervisor
is implemented on QEMU 2.5.0 and utilizes KVM (Kernel-
based Virtual Machine) to take the advantage of hardware
acceleration. When breakpoints are hit, we use Capstone [1] to
disassemble the instruction to check RacePaircand. RAZZER’s
fuzzer is implemented based on Syzkaller [42], a kernel fuzzer
developed by Google.
To summarize the implementation complexity, RAZZER
modiﬁed the existing framework as follows: SVF [39] to
implement its static analysis (§III-A) with 638 LoC in C++,
QEMU [5] to implement its hypervisor (§III-B) with 652 LoC
in C, and Syzkaller [42] to implement its fuzzer (§III-C) with
6,403 LoC in Go and 286 LoC in C++.
V. EVALUATION
In this section, we evaluate various aspects of RAZZER.
First, we list
the newly discovered harmful races found
by RAZZER (§V-A), and then we evaluate the effectiveness
of RAZZER’s static analysis (§V-B). Next, we measure the
performance overhead of our hypervisor (§V-C) and conduct a
comparison study of the fuzzing efﬁciency with state-of-the-art
tools (§V-D).
Experimental Setup. All of our evaluations were performed
on an Intel(R) Xeon(R) CPU E5-4655 v4 @ 2.50GHz (30MB
cache) with 512GB of RAM. We ran Ubuntu 16.04 with Linux
4.15.12 64-bit as the host kernel. To run RAZZER, we created
32 VMs using our modiﬁed KVM/QEMU, and allocated 16
VMs for single-thread and 16 VMs for multi-thread fuzzing.
To run Syzkaller for comparison, we created 32 VMs using
the stock KVM/QEMU so as to utilize the same computing
power used when RAZZER run.
Target Kernel Preparation. RAZZER requires no manual
modiﬁcation of the target kernel to be analyzed. For each
kernel version, it builds the kernel in two phases. First it builds
using LLVM compiler-suites to generate Bitcode objects to
perform the static analysis. Then, it builds the kernel using
GCC, which will be running as a virtual machine on RAZZER’s
hypervisor.
A. Newly Found Race Bugs
To demonstrate RAZZER’s ability to ﬁnd race bugs, we
ran RAZZER on various versions of the Linux kernel, from
v4.16-rc3 (released on Feb 25, 2018) to v4.18-rc3 (released
on July 1, 2018). We ran RAZZER for approximately 7 weeks
using the machine described in the experimental setup section.
Figure 6 summarizes the races identiﬁed by RAZZER. In total,
RAZZER found 30 harmful races in the kernel. After reporting
these, 16 were conﬁrmed and patches of 14 were accordingly
submitted by the kernel developers. After the patches were
proposed, 13 races were merged into the various versions
of affected kernel versions (including the mainline as well).
We would like to highlight that the Linux kernel has been
extensively fuzzed by many different engineers and researchers
and thus that it is not easy to ﬁnd new bugs with moderate
computing power. For instance, the Syzkaller team at Google
runs their fuzzer on their massive cloud infrastructure in a 24/7
manner to detect bugs early in the Linux kernel. Nevertheless,
RAZZER found 30 races, demonstrating its strong effectiveness
with regard to ﬁnding race bugs.
Efﬁciency in Discovering New Harmful Races. To clarify
how long RAZZER takes to discover such races, Figure 7
illustrates the number of unique crash types found by RAZZER
over time while running v4.17-rc1. In this ﬁgure, we plotted
(cid:24)(cid:23)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:09 UTC from IEEE Xplore.  Restrictions apply. 
Patch submitted
(cid:2)
drivers/tty/
net/
net/packet/
Kernel subsystem
Conﬁrmed
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
net/packet/
(cid:2)
sound/core/seq/oss/ (cid:2)
(cid:2)
(cid:2)
sound/drivers/
(cid:2)(assisted Syzkaller) (cid:2)
Kernel crash summary
KASAN: slab-out-of-bounds write in tty_insert_ﬂip_string_ﬂag
WARNING in __static_key_slow_dec
Kernel BUG at net/packet/af_packet.c:LINE!
WARNING in refcount_dec
Crash type
Use-After-Free
Reachable Warning
Kernel version
v4.8
v4.8
Reachable Assertion
v4.16-rc3
Reachable Warning
v4.16-rc3
unable to handle kernel paging request in snd_seq_oss_readq_puts
Page Fault
KASAN: use-after-free Read in loopback_active_get
KASAN: null-ptr-deref Read in rds_ib_get_mr
KASAN: null-ptr-deref Read in list_lru_del
BUG: unable to handle kernel NULL ptr dereference in corrupted
KASAN: use-after-free Read in nd_jump_root
KASAN: use-after-free Read in link_path_walk
Use-After-Free
Null ptr deref
Null ptr deref
Null ptr deref
Use-After-Free
Use-After-Free
BUG: unable to handle kernel paging request in __inet_check_established
Page Fault
KASAN: null-ptr-deref Read in ata_pio_sector
Null ptr deref
v4.16
v4.16
v4.17-rc1
v4.17-rc1
v4.17-rc1
v4.17-rc1
v4.17-rc1
v4.17-rc1
v4.17-rc1
net/rdma/
fs/
net/sctp/
fs/
fs/
net/ipv4/
net/drivers/ata/
WARNING in ip_recv_error
WARNING in remove_proc_entry
KASAN: null-ptr-deref Read in ip6gre_exit_batch_net
KASAN: slab-out-of-bounds Write in __register_sysctl_table
KASAN: use-after-free Write in skb_release_data
KASAN: invalid-free in ptlock_free
Kernel BUG at lib/list_debug.c:LINE!
INFO: trying to register non-static key in __handle_mm_fault
KASAN: use-after-free Read in vhost-chr_write_iter
BUG: soft lockup in vmemdup_user
KASAN: use-after-free Read in rds_tcp_accept_one
WARNING in sg_rq_end_io
BUG: soft lockup in snd_virmidi_output_trigger
KASAN: null-ptr-deref Read in smc_ioctl
KASAN: null-ptr-deref Write in binderf_update_page_range
WARNING in port_delete
Reachable Warning
v4.17-rc1
net/
Reachable Warning
v4.17-rc1
net/sunrpc/
Null ptr deref
Heap overﬂow
Use-After-Free
Double free
v4.17-rc1
v4.17-rc1
v4.17-rc1
v4.17-rc1
net/ipv6/
net/ipv6/
net/core/
mm/
Reachable Assertion
v4.17-rc1
drivers/inﬁniband/
Reachable INFO
Use-After-Free
Soft lockup
Use-After-Free
v4.17-rc1
v4.17-rc1
v4.17-rc1
v4.17-rc1
mm/
drivers/vhost/
net/
net/rds/
Reachable Warning
v4.17-rc1
drivers/scsi/
Soft lockup
Null ptr deref
Null ptr deref
v4.18-rc3
v4.18-rc3
v4.18-rc3
Reachable Warning
v4.18-rc3
sound/core/seq/
net/smc/
drivers/android/