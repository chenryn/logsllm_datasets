10> DROP PROCEDURE pubuser.GetNewTxsCount;
11> DROP PROCEDURE pubuser.JobCleanup;
12> DROP PROCEDURE pubuser.JobCreateTxSet;
13> DROP PROCEDURE pubuser.LoadPubTableList;
14> DROP PROCEDURE pubuser.RemoveCleanupJob;
15> DROP PROCEDURE pubuser.RemoveCreateTxSetJob;
16> DROP TABLE pubuser.rrst_edb_dept;
17> DROP TABLE pubuser.rrst_edb_emp;
18> GO
For Postgres only: If any of the schemas _edb_replicator_pub,
_edb_replicator_sub, or _edb_scheduler still exist in the publication database,
drop the schema and all of its database objects. The following example shows a
connection established in psql to the publication database edb. The DROP SCHEMA
CASCADE statement is then used to drop the schemas.
edb=# \c edb enterprisedb
You are now connected to database "edb" as user "enterprisedb".
edb=# DROP SCHEMA _edb_replicator_pub CASCADE;
NOTICE: drop cascades to 51 other objects
DETAIL: drop cascades to sequence _edb_replicator_pub.rrep_common_seq
drop cascades to sequence _edb_replicator_pub.rrep_tx_seq
.
.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 657
EDB Postgres Replication Server User’s Guide
.
DROP SCHEMA
edb=# DROP SCHEMA _edb_replicator_sub CASCADE;
NOTICE: drop cascades to 9 other objects
DETAIL: drop cascades to sequence _edb_replicator_sub.rrep_common_seq
drop cascades to table _edb_replicator_sub.xdb_sub_database
.
.
.
DROP SCHEMA
edb=# DROP SCHEMA _edb_scheduler CASCADE;
NOTICE: drop cascades to 40 other objects
DETAIL: drop cascades to table _edb_scheduler.sch_pub_job_details
drop cascades to table _edb_scheduler.sch_pub_job_listeners
.
.
.
DROP SCHEMA
For synchronization replication with the trigger-based method, in the schema containing
the publication tables, drop the triggers and trigger functions associated with the
publication tables:
edb=# SET search_path TO edb;
SET
edb=# DROP FUNCTION rrpd_edb_dept_tgfunc() CASCADE;
NOTICE: drop cascades to trigger rrpd_edb_dept on table dept
DROP FUNCTION
edb=# DROP FUNCTION rrpi_edb_dept_tgfunc() CASCADE;
NOTICE: drop cascades to trigger rrpi_edb_dept on table dept
DROP FUNCTION
edb=# DROP FUNCTION rrpu_edb_dept_tgfunc() CASCADE;
NOTICE: drop cascades to trigger rrpu_edb_dept on table dept
DROP FUNCTION
edb=# DROP FUNCTION rrpd_edb_emp_tgfunc() CASCADE;
NOTICE: drop cascades to trigger rrpd_edb_emp on table emp
DROP FUNCTION
edb=# DROP FUNCTION rrpi_edb_emp_tgfunc() CASCADE;
NOTICE: drop cascades to trigger rrpi_edb_emp on table emp
DROP FUNCTION
edb=# DROP FUNCTION rrpu_edb_emp_tgfunc() CASCADE;
NOTICE: drop cascades to trigger rrpu_edb_emp on table emp
DROP FUNCTION
Step 8: Repeat this step for every subscription database to delete its control schema and
control schema object.
For single-master replication systems, the subscription database contains a single control
schema object in the form of a table named rrep_txset_health.
Delete this table in all subscription databases. For SQL Server and Postgres subscription
databases, delete the parent schema _edb_replicator_sub as well. For Oracle
subscription databases, the parent schema is not generated by xDB Replication Server, so
it your decision as to whether to keep or delete the parent schema.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 658
EDB Postgres Replication Server User’s Guide
For Oracle only: The RREP_TXSET_HEALTH table is created in the subscription
database user’s schema. Drop this table.
SQL> CONNECT subuser/password
Connected.
SQL> DROP TABLE rrep_txset_health;
Table dropped.
For SQL Server only: The rrep_txset_health table is created in the schema named
_edb_replicator_sub. Drop this table and schema.
1> USE subdb;
2> GO
Changed database context to 'subdb'.
1> DROP TABLE _edb_replicator_sub.rrep_txset_health;
2> GO
1> DROP SCHEMA _edb_replicator_sub;
2> GO
For Postgres only: The rrep_txset_health table is created in the schema named
_edb_replicator_sub. Drop this table and schema.
edb=# \c subdb enterprisedb
You are now connected to database "subdb" as user "enterprisedb".
subdb=# DROP SCHEMA _edb_replicator_sub CASCADE;
NOTICE: drop cascades to table _edb_replicator_sub.rrep_txset_health
DROP SCHEMA
Step 9: In the xDB Replication Configuration file, delete the lines containing the
following parameters: user, password, host, port, database, and type.
Keep the lines with the following parameters: admin_user, admin_password, and
license_key (if it exists).
See Section 2.3.1.3 for information on the xDB Replication Configuration file. See
Section 3.5 for the file system location of the xDB Replication Configuration file.
The absence of these parameters prevents the publication server and subscription server
from attempting to connect to this database upon publication and subscription server
startup.
The xDB Replication Configuration file should appear as follows without the controller
database connection and authentication information:
#xDB Replication Server Configuration Properties
#Fri Jan 30 17:34:06 GMT-05:00 2015
admin_password=ygJ9AxoJEX854elcVIJPTw\=\=
admin_user=enterprisedb
Step 10: Start the publication server.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 659
EDB Postgres Replication Server User’s Guide
Step 11: Start the subscription server.
Step 12: In the replication tree you should see the following:
Figure 10-5 - Replication tree after removal of all control schema objects
All the nodes under the SMR and MMR type nodes beneath the Publication Server node,
and under the Subscription Server node no longer appear.
Step 13: You will need to recreate the replication system as described in sections 5.2
onward for a single-master replication system. See sections 6.2 onward for a multi-master
replication system.
10.3.4.4 Dropping Replication Slots for Log-Based Synchronization
Replication
As described in Section 2.2.10.2 logical replication slots are used for the log-based
method of synchronization replication. While a log-based replication system is in use,
these replication slots remain connected to the Postgres databases. When the replication
system is removed, these replication slots are also deleted.
There may be circumstances where it is desired to drop a Postgres database used in a
replication system, but the replication system could not be removed according to the
normal procedure of using the xDB Replication Console or the xDB Replication Server
CLI.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 660
EDB Postgres Replication Server User’s Guide
In such cases, it is assumed that the replication system has somehow become corrupted,
and it is simply desired to delete the replication system components including some of the
databases used in the replication system.
When the log-based method is used, certain additional procedures may be required to
remove the replication slots before dropping the databases.
Postgres does not permit a database to be dropped if a replication slot is connected to it.
The following describes how the replication slots can be removed in order to drop a
database.
Warning: Do not attempt this if any replication systems are running in production.
All replication systems will become inoperable.
Replication slots can be displayed by the following query on the database server
containing the databases to be dropped:
edb=# SELECT slot_name, slot_type, database, active, active_pid FROM
pg_replication_slots;
slot_name | slot_type | database | active | active_pid
-------------+-----------+----------+--------+------------
xdb_14793_5 | logical | edb | t | 5288
xdb_79910_5 | logical | mmrnode | t | 5327
(2 rows)
The active column indicates whether or not the replication slot is active.
To deactivate an active replication slot, first stop the publication server. If the active
column of the replication slot now displays f for false then you can remove the
replication slot.
If the replication slot is still active, then you can deactivate it by terminating the process
shown in the active_pid column with the following command:
edb=# SELECT pg_terminate_backend(5327);
pg_terminate_backend
----------------------
t
(1 row)
The following now shows that replication slot xdb_79910_5 for database mmrnode has
been deactivated:
edb=# SELECT slot_name, slot_type, database, active, active_pid FROM
pg_replication_slots;
slot_name | slot_type | database | active | active_pid
-------------+-----------+----------+--------+------------
xdb_14793_5 | logical | edb | t | 5288
xdb_79910_5 | logical | mmrnode | f |
(2 rows)
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 661
EDB Postgres Replication Server User’s Guide
Drop the replication slot with the following command by specifying the slot name:
edb=# SELECT pg_drop_replication_slot('xdb_79910_5');
pg_drop_replication_slot
--------------------------
(1 row)
Now, the dropped replication slot does not appear when the pg_replication_slots
directory is queried:
edb=# SELECT slot_name, slot_type, database, active, active_pid FROM
pg_replication_slots;
slot_name | slot_type | database | active | active_pid
-------------+-----------+----------+--------+------------
xdb_14793_5 | logical | edb | t | 5288
(1 row)
The database can now be successfully dropped:
edb=# DROP DATABASE mmrnode;
DROP DATABASE
In addition, replication origins can be displayed with the following command:
edb=# SELECT * FROM pg_replication_origin;
roident | roname
---------+-----------------------
1 | xdb_mmrnode_emp_pub_1
2 | xdb_edb_emp_pub_6
(2 rows)
The following command can be used to remove a replication origin:
edb=# SELECT pg_replication_origin_drop('xdb_mmrnode_emp_pub_1');
pg_replication_origin_drop
----------------------------
(1 row)
The following shows this replication origin has been removed:
edb=# SELECT * FROM pg_replication_origin;
roident | roname
---------+-----------------------
2 | xdb_edb_emp_pub_6
(1 row)
For additional information on logical decoding functions see Section 9.26.6 “Replication
Functions” under Section 9.26 “System Administration Functions” in the PostgreSQL
Core Documentation located at:
https://www.postgresql.org/docs/current/static/functions-admin.html
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 662
EDB Postgres Replication Server User’s Guide
After performing this process, it is unlikely that removal of the entire replication system
can be done with the xDB Replication Console or the xDB Replication Server CLI.
Complete removal of the remaining replication system components must be done
manually. Part of this process is removing the control schema and control schema objects
from the publication databases. See Section 10.3.4.3 for information on this procedure.
10.4 Miscellaneous xDB Replication Server Processing Topics
This section contains various topics covering the following:
 Handling special characters in replication data
 Replicating Oracle partitioned tables
 Performing an offline snapshot and subsequent synchronization
 Generating an encrypted password
 Writing cron expressions
10.4.1 Publication and Subscription Server Configuration
Options
The publication server and the subscription server support various configuration options
for purposes such as the following:
 Optimize synchronization performance based on the types of transactions
affecting the publication. (See Section 5.8.2 for details on these particular
options.)
 Utilize alternate loading methods in snapshot replications. (See Section 5.8.1 for
details on these particular options.)
 Special configuration options for multi-master replication. (See Section 6.12 for
details on these particular options.)
 Adjust memory usage and transaction size for replications.
 Replicate certain Oracle partitioned table types.
 Replicate special characters found in publication data.
 Special configuration options for the log-based method of synchronization
replication. (See Section 10.4.1.15 for details on these particular options.)
Most options apply to the publication server only, although a few are used by the
subscription server.
The configuration options for the publication server are set and passed in a text file called
the publication server configuration file with file name xdb_pubserver.conf.
The configuration options for the subscription server are set and passed in a text file
called the subscription server configuration file with file name xdb_subserver.conf.
See Section 3.5 for the directory locations of these files.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 663
EDB Postgres Replication Server User’s Guide
Modified publication server configuration options take effect after the publication server
is restarted. Similarly, modified subscription server configuration options take effect after
the subscription server is restarted.
The configuration options that have been explicitly put into effect by overriding their
defaults in the configuration files are logged in the publication server log file and the
subscription server log file. Section 3.5 contains the directory locations of these log files.
The following is a description of how to set the configuration options. This is followed by
sections describing the purpose of each option.
Step 1: The publication and subscription server configuration files are created during
xDB Replication Server installation and already contain all of the configuration options
as comments with their default settings.
To change the setting of a configuration option, edit the publication server or subscription
server configuration file by removing the comment symbol (#) from the option and
substituting the desired value in place of the currently coded value.
The following example shows a portion of the publication server configuration file where
replacement of null characters in the publication data has been activated and the
replacement character has been set to the question mark character.
replaceNullChar = true
#Null Replacement Character
nullReplacementChar = ?
Step 2: Restart the publication or subscription server.
Use the following command for CentOS 7 or RHEL 7:
systemctl restart edb-xdbpubserver
Use the following command for previous Linux versions:
service edb-xdbpubserver restart
The following sections provide additional detail on the server configuration options.
10.4.1.1 Controlling Logging Level, Log File Sizes, and Rotation
Count
Note: The options described in this section apply to the publication server and the
subscription server unless otherwise specified.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 664
EDB Postgres Replication Server User’s Guide
The following options control various aspects of message logging in the publication
server log file, the subscription server log file, and the Migration Toolkit log file.
See Section 10.3.2.4 for additional information on the publication and subscription server
log files.
See Section 10.3.2.2 for additional information on the Migration Toolkit log file.
logging.level
Set the logging.level option to control the severity of messages written to the
publication server log file and the subscription server log file.
logging.level={OFF | SEVERE | WARNING | INFO | CONFIG | FINE
| FINER | FINEST | ALL}
The default value is WARNING.
logging.file.size
Set the logging.file.size option to control the maximum file size (in megabytes) of
the publication server log file and the subscription server log file.
Note: If logging.file.count is set to 0, the setting of logging.file.size is
ignored. The log file is allowed to grow without limit.
logging.file.size=n
The default value is 50 megabytes.
logging.file.count
Set the logging.file.count option to control the number of files in the log file
rotation history of the publication server log file and the subscription server log file.
logging.file.count=n
The default value for n is 20.
A non-zero value of n specifies the maximum number of log files that are to be created.
Note: In the remaining discussion the publication server log file named pubserver.log
is used as an example. For the subscription server, the log file is named
subserver.log.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 665
EDB Postgres Replication Server User’s Guide
 Specify a value of 0 to disable log file rotation and create a single, unlimited size
log file named pubserver.log. This log file will grow to an unlimited size
ignoring any setting of logging.file.size.
 Specify a value of 1 to disable log file rotation and create a single, limited size log