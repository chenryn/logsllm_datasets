Replica
Duringcrashrecovery, entriesarereplayedtorestorethedataondiskupto
aconsistentstate. Backuprecoveryworksinasimilarway,butitcanalsorestore
the database state up to the specified recovery target point using a  archive.
Thenumberofarchivedentriescanbequitehigh(forexample,theycanspan
severaldays),sotherecoveryperiodwillincludemultiplecheckpoints.Therefore,
theminimallevelisnotenough: itisimpossibletorepeatanoperationifitis
unlogged.Forbackuprecovery,filesmustincludealltheoperations.
Thesameistrueforreplication: unloggedcommandswillnotbesenttoareplica
andwillnotbereplayedonit.
Thingsgetevenmorecomplicatedifareplicaisusedforexecutingqueries. First
p. ofall,itneedstohavetheinformationonexclusivelocksacquiredontheprimary
serversincetheymayconflictwithqueriesonthereplica. Second,itmustbeable
p. tocapturesnapshots,whichrequirestheinformationonactivetransactions.When
wedealwithareplica,bothlocaltransactionsandthoserunningontheprimary
serverhavetobetakenintoaccount.
Theonlywaytosendthisdatatoareplicaistoperiodicallywriteitintofiles.1
Itisdonebythebgwriter2process,onceinseconds(theintervalishard-coded).
Theabilitytoperformdatarecoveryfromabackupandusephysicalreplicationis
guaranteedatthereplicalevel.
1 backend/storage/ipc/standby,LogStandbySnapshotfunction
2 backend/postmaster/bgwriter.c
218
11.3 WALLevels
Thereplicalevelisusedbydefault,sowecansimplyresettheparametersconfig- v.
uredaboveandrestarttheserver:
=> ALTER SYSTEM RESET wal_level;
=> ALTER SYSTEM RESET max_wal_senders;
postgres$ pg_ctl restart -l /home/postgres/logfile
Let’srepeatthesameworkflowasbefore(butnowwewillinsertonlyonerowto
getaneateroutput):
=> SELECT pg_current_wal_insert_lsn();
pg_current_wal_insert_lsn
−−−−−−−−−−−−−−−−−−−−−−−−−−−
0/461B8330
(1 row)
=> BEGIN;
=> TRUNCATE TABLE wal;
=> INSERT INTO wal VALUES (42);
=> COMMIT;
=> SELECT pg_current_wal_insert_lsn();
pg_current_wal_insert_lsn
−−−−−−−−−−−−−−−−−−−−−−−−−−−
0/461B85F0
(1 row)
Checkoutthegeneratedentries.
Apartfromwhatwehaveseenattheminimallevel,wehavealsogotthefollowing
entries:
• replication-related entries of the Standby resource manager: _
(activetransactions)and
• theentrythatlogsthe+operation,whichinitializesanewpageand
insertsanewrowintothispage
219
Chapter11 WALModes
postgres$ /usr/local/pgsql/bin/pg_waldump \
-p /usr/local/pgsql/data/pg_wal -s 0/461B8330 -e 0/461B85F0
rmgr: Standby len (rec/tot): 42/ 42, tx: 134968, lsn:
0/461B8330, prev 0/461B82B8, desc: LOCK xid 134968 db 16391 rel 16562
rmgr: Storage len (rec/tot): 42/ 42, tx: 134968, lsn:
0/461B8360, prev 0/461B8330, desc: CREATE base/16391/24786
rmgr: Heap len (rec/tot): 123/ 123, tx: 134968, lsn:
0/461B8390, prev 0/461B8360, desc: UPDATE off 49 xmax 134968 flags
0x60 ; new off 50 xmax 0, blkref #0: rel 1663/16391/1259 blk 0
rmgr: Btree len (rec/tot): 64/ 64, tx: 134968, lsn:
0/461B8410, prev 0/461B8390, desc: INSERT_LEAF off 178, blkref #0:
rel 1663/16391/2662 blk 2
rmgr: Btree len (rec/tot): 64/ 64, tx: 134968, lsn:
0/461B8450, prev 0/461B8410, desc: INSERT_LEAF off 149, blkref #0:
rel 1663/16391/2663 blk 2
rmgr: Btree len (rec/tot): 64/ 64, tx: 134968, lsn:
0/461B8490, prev 0/461B8450, desc: INSERT_LEAF off 256, blkref #0:
rel 1663/16391/3455 blk 4
rmgr: Heap len (rec/tot): 59/ 59, tx: 134968, lsn:
0/461B84D0, prev 0/461B8490, desc: INSERT+INIT off 1 flags 0x00,
blkref #0: rel 1663/16391/24786 blk 0
rmgr: Standby len (rec/tot): 42/ 42, tx: 0, lsn:
0/461B8510, prev 0/461B84D0, desc: LOCK xid 134968 db 16391 rel 16562
rmgr: Standby len (rec/tot): 54/ 54, tx: 0, lsn:
0/461B8540, prev 0/461B8510, desc: RUNNING_XACTS nextXid 134969
latestCompletedXid 134967 oldestRunningXid 134968; 1 xacts: 134968
rmgr: Transaction len (rec/tot): 114/ 114, tx: 134968, lsn:
0/461B8578, prev 0/461B8540, desc: COMMIT 2022−09−19 14:54:40.912861
MSK; rels: base/16391/24785; inval msgs: catcache 51 catcache 50
relcache 16562
Logical
Lastbutnotleast,thelogicallevelenableslogicaldecodingandlogicalreplication.
Ithastobeactivatedonthepublishingserver.
If we take a look at  entries,we will see that this level is almost the same as
replica: itaddstheentriesrelatedtoreplicationsourcesandsomearbitrarylogical
entriesthatmaybegeneratedbyapplications.Forthemostpart,logicaldecoding
dependsontheinformationaboutactivetransactions(_)becauseit
requirescapturingasnapshottotracksystemcatalogchanges.
220
Part III
Locks
12
Relation-Level Locks
12.1 About Locks
Lockscontrolconcurrentaccesstosharedresources.
Concurrent access implies that several processes try to get one and the same re-
source at the same time. It makes no difference whether these processes are ex-
ecuted in parallel (if the hardware permits) or sequentially in the time-sharing
mode.Ifthereisnoconcurrentaccess,thereisnoneedtoacquirelocks(forexam-
ple,sharedbuffercacherequireslocking,whilelocalcachecandowithoutit).
Beforeaccessingaresource,theprocessmustacquirealockonit;whentheoper-
ationiscomplete,thislockmustbereleased fortheresourcetobecomeavailable
tootherprocesses. Iflocksaremanagedbythedatabasesystem,theestablished
orderofoperationsismaintainedautomatically;iflocksarecontrolledbytheap-
plication,theprotocolmustbeenforcedbytheapplicationitself.
Atalowlevel,alockissimplyachunkofsharedmemorythatdefinesthelockstatus
(whether it is acquired or not); it can also provide some additional information,
suchastheprocessnumberoracquisitiontime.
As you can guess,a shared memorysegment is a resource in its own right. Concurrent
accesstosuchresourcesisregulatedbysynchronizationprimitives(suchassemaphoresor
mutexes)providedbytheoperatingsystem.Theyguaranteestrictlyconsecutiveexecution
ofthecodethataccessesasharedresource.Atthelowestlevel,theseprimitivesarebased
onatomicinstructions(suchastest-and-setorcompare-and-swap).
Ingeneral,wecanuselockstoprotectanyresourceaslongasitcanbeunambigu-
ouslyidentifiedandassignedaparticularlockaddress.
223
Chapter12 Relation-LevelLocks
Forexample,wecanlockadatabaseobject,suchasatable(identifiedbyoidinthe
system catalog), a data page (identified by a filename and a position within this
file),arowversion(identifiedbyapageandanoffsetwithinthispage).Wecanalso
lockamemorystructure,suchasahashtableorabuffer(identifiedbyanassigned
).Wecanevenlockanabstractresourcethathasnophysicalrepresentation.
But it is not always possible to acquire a lock at once: a resource can be already
lockedbysomeoneelse. Thentheprocesseitherjoinsthequeue(ifitisallowed
for this particular lock type) or tries again some time later. Either way,it has to
waitforthelocktobereleased.
Iwouldliketosingleouttwofactorsthatcangreatlyaffectlockingefficiency.
Granularity, orthe“grainsize”ofalock.Granularityisimportantifresourcesform
ahierarchy.
For example, a table consists of pages, which, in their turn, consist of tu-
ples.Alltheseobjectscanbeprotectedbylocks. Table-levellocksarecoarse-
grained; they forbid concurrent access even if the processes need to get to
differentpagesorrows.
Row-levellocksarefine-grained,sotheydonothavethisdrawback;however,
thenumberoflocksgrows.Toavoidusingtoomuchmemoryforlock-related
metadata,Postgrecanapplyvariousmethods,oneofthembeinglockes-
calation: ifthenumberoffine-grainedlocksexceedsacertainthreshold,they
arereplacedbyasinglelockofcoarsergranularity.
Asetofmodes inwhichalockcanbeacquired.
As a rule, only two modes are applied. The exclusive mode is incompatible
withalltheothermodes,includingitself. Thesharedmodeallowsaresource
tobelockedbyseveralprocessesatatime. Thesharedmodecanbeusedfor
reading,whiletheexclusivemodeisappliedforwriting.
Ingeneral,theremaybeothermodestoo. Namesofmodesareunimportant,
itistheircompatibilitymatrixthatmatters.
Finergranularityandsupportformultiplecompatiblemodesgivemoreopportu-
nitiesforconcurrentexecution.
224
12.2 HeavyweightLocks
Alllockscanbeclassifiedbytheirduration.
Long-term locksareacquiredforapotentiallylongtime(inmostcases,tilltheend
ofthetransaction);theytypicallyprotectsuchresourcesasrelationsandrows.
TheselocksareusuallymanagedbyPostgreautomatically,butauserstill
hassomecontroloverthisprocess.
Long-term locks offer multiple modes that enable various concurrent oper-
ations on data. They usually have extensive infrastructure (including such
features as wait queues, deadlock detection, and instrumentation) since its
maintenanceisanywaymuchcheaperthanoperationsonprotecteddata.
Short-term locksareacquiredforfractionsofasecondandrarelylastlongerthan
several  instructions; they usually protect data structures in the shared
memory.Postgremanagessuchlocksinafullyautomatedway.
Short-termlockstypicallyofferveryfewmodesandonlybasicinfrastructure,
whichmayhavenoinstrumentationatall.
Postgresupportsvarioustypesoflocks.1 Heavyweightlocks(whichareacquired
onrelationsandotherobjects)androw-levellocksareconsideredlong-term.Short- p.
term locks comprise various locks on memory structures. Besides, there is also a p.
distinctgroupofpredicatelocks,which,despitetheirname,arenotlocksatall. p.
12.2 Heavyweight Locks
Heavyweightlocksarelong-termones.Acquiredattheobjectlevel,theyaremainly
usedforrelations,butcanalsobeappliedtosomeothertypesofobjects. Heavy-
weightlockstypicallyprotectobjectsfromconcurrentupdatesorforbidtheirusage
duringrestructuring,buttheycanaddressotherneedstoo.Suchavaguedefinition
isdeliberate: locksofthistypeareusedforallkindsofpurposes. Theonlything
theyhaveincommonistheirinternalstructure.
Unlessexplicitlyspecifiedotherwise,thetermlockusuallyimpliesaheavyweight
lock.
1 backend/storage/lmgr/README
225
Chapter12 Relation-LevelLocks
Heavyweightlocksarelocatedintheserver’ssharedmemory1andcanbedisplayed
64 inthepg_locksview.Theirtotalnumberislimitedbythemax_locks_per_transaction
100 valuemultipliedbymax_connections.
Alltransactionsuseacommonpooloflocks,soonetransactioncanacquiremore
thanmax_locks_per_transactionlocks.Whatreallymattersisthatthetotalnumber
oflocksinthesystemdoesnotexceedthedefinedlimit.Sincethepoolisinitialized
whentheserverislaunched,changinganyofthesetwoparameterswillrequirea
serverrestart.
Ifaresourceisalreadylockedinanincompatiblemode,theprocesstryingtoac-
quireanotherlockjoinsthequeue.Waitingprocessesdonotwastetime: they
fallasleepuntilthelockisreleasedandtheoperatingsystemwakesthemup.
p. Twotransactionscanfindthemselvesinadeadlockifthefirsttransactionisunable
to continue its operation until it gets a resource locked by the other transaction,
which, in its turn, needs a resource locked by the first transaction. This case is
rathersimple;adeadlockcanalsoinvolvemorethantwotransactions.Sincedead-
lockscauseinfinitewaits,Postgredetectsthemautomaticallyandabortsone
oftheaffectedtransactionstoensurethatnormaloperationcancontinue.
Differenttypesofheavyweightlocksservedifferentpurposes,protectdifferentre-
sources,andsupportdifferentmodes,sowewillconsiderthemseparately.
Thefollowinglistprovidesthenamesoflocktypesastheyappearinthelocktype
columnofthepg_locksview:
p. transactionidandvirtualxid —alockonatransaction
p. relation —arelation-levellock
p. tuple —alockacquiredonatuple
p. object —alockonanobjectthatisnotarelation
p. extend —arelationextensionlock
p. page —apage-levellockusedbysomeindextypes
p. advisory —anadvisorylock
1 backend/storage/lmgr/lock.c
226
12.3 LocksonTransactionIDs
Almost all heavyweight locks are acquired automatically as needed and are re-
leased automatically when the corresponding transaction completes. There are
some exceptions though: for example, a relation-level lock can be set explicitly,
whileadvisorylocksarealwaysmanagedbyusers.
12.3 Locks on Transaction IDs
Eachtransactionalwaysholdsanexclusivelockonitsown(bothvirtualandreal, p.
ifavailable).
Postgreofferstwolockingmodesforthispurpose,exclusiveandshared.Their
compatibility matrix is very simple: the shared mode is compatible with itself,
whiletheexclusivemodecannotbecombinedwithanymode.
Shared Exclusive
Shared ×
Exclusive × ×
To track completion of a particular transaction, a process can request a lock on
thistransaction’s,inanymode. Sincethetransactionitselfisalreadyholding
anexclusivelockonitsown,anotherlockisimpossibletoacquire.Theprocess
requesting this lock joins the queue and falls asleep. Once the transaction com-
pletes,thelockisreleased,andthequeuedprocesswakesup. Clearly,itwillnot
managetoacquirethelockbecausethecorrespondingresourcehasalreadydisap-
peared,butthislockisnotwhatisactuallyneededanyway.
Let’s start a transaction in a separate session and get the process  () of the
backend:
=> BEGIN;
=> SELECT pg_backend_pid();
pg_backend_pid
−−−−−−−−−−−−−−−−
28991
(1 row)
Thestartedtransactionholdsanexclusivelockonitsownvirtual:
227
Chapter12 Relation-LevelLocks
=> SELECT locktype, virtualxid, mode, granted
FROM pg_locks WHERE pid = 28991;
locktype | virtualxid | mode | granted
−−−−−−−−−−−−+−−−−−−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−
virtualxid | 5/2 | ExclusiveLock | t
(1 row)
Herelocktypeisthetypeofthelock,virtualxidisthevirtualtransaction(which
identifies the locked resource), and mode is the locking mode (exclusive in this
case).Thegrantedflagshowswhethertherequestedlockhasbeenacquired.
Oncethetransactiongetsareal,thecorrespondinglockisaddedtothislist:
=> SELECT pg_current_xact_id();
pg_current_xact_id
−−−−−−−−−−−−−−−−−−−−
134971
(1 row)
=> SELECT locktype, virtualxid, transactionid AS xid, mode, granted
FROM pg_locks WHERE pid = 28991;
locktype | virtualxid | xid | mode | granted
−−−−−−−−−−−−−−−+−−−−−−−−−−−−+−−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−
virtualxid | 5/2 | | ExclusiveLock | t
transactionid | | 134971 | ExclusiveLock | t
(2 rows)
Nowthistransactionholdsexclusivelocksonbothitss.
12.4 Relation-Level Locks
Postgreprovidesasmanyaseightmodesinwhicharelation(atable,anindex,
or any other object) can be locked.1 Such a variety allows you to maximize the
numberofconcurrentcommandsthatcanberunonarelation.
The next page shows the compatibility matrix extended with examples of com-
mandsthatrequirethecorrespondinglockingmodes. Thereisnopointinmem-
orizing all these modes or trying to find the logic behind their naming, but it is
1 postgresql.org/docs/14/explicit-locking#LOCKING-TABLES.html
228
12.4 Relation-LevelLocks
definitely useful to look through this data, draw some general conclusions, and
refertothistableasrequired.
AS RS RE SUE S SRE E AE
AccessShare × SELECT
RowShare × × SELECTFORUPDATE/SHARE
RowExclusive × × × × INSERT,UPDATE,DELETE
ShareUpdateExclusive × × × × × VACUUM,CREATEINDEXCONCURRENTLY
Share × × × × × CREATEINDEX
ShareRowExclusive × × × × × × CREATETRIGGER
Exclusive × × × × × × × REFRESHMAT.VIEWCONCURRENTLY
AccessExclusive × × × × × × × × DROP,TRUNCATE,VACUUMFULL,
LOCKTABLE,REFRESHMAT.VIEW
The Access Share mode is the weakest one; it can be used with any other mode
exceptAccess Exclusive,whichisincompatiblewithallthemodes. Thus,a
commandcanberuninparallelwithalmostanyoperation,butitdoesnotletyou