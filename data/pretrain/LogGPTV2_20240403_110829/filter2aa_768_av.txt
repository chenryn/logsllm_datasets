### WMI DLL 文件及其功能

- **Wmicookr.dll**  
  功能：WMI 高性能计数器数据处理器（Cooker）。

- **Msiprov.dll**  
  功能：MSI（Microsoft Installer）提供器。

- **Wbemcntl.dll**  
  功能：WMISnapin 组件，用于配置 WMI 的 MMC（Microsoft Management Console）插件。

- **Repdrvfs.dll**  
  功能：包含管理 CIM 对象数据仓库的各个类。详见下文。

- **Scrcons.exe**  
  功能：为脚本（Active Scripting）使用的事件消耗器提供器。

- **Fastprox.dll**  
  功能：包含用于进程间调用和 RPC 通信的类和函数，也称为 Microsoft WBEM Call Context。

- **Wbemcons.dll**  
  功能：命令行的事件消耗器提供器。

- **Wmitimep.dll**  
  功能：当前时间提供器。

- **Esscli.dll**  
  功能：事件子系统的过滤器列集代理（filter marshaling proxy）。

- **Wbemess.dll**  
  功能：WMI 的事件子系统。

- **Fwdprov.dll**  
  功能：转寄（Forwarding）事件提供器和转寄事件消耗器提供器。

- **Wbemcons.dll**  
  功能：日志文件（Log File）和 NT 事件日志事件消耗器提供器。

- **Wmimsg.dll**  
  功能：消息服务，RPC 消息收发器（Receiver 和 Sender）。

- **Ntevt.dll**  
  功能：WMI 事件日志（Eventlog）事件提供器。

- **Tmplprov.dll**  
  功能：模板（Template）提供器。

- **Trnsprov.dll**  
  功能：Microsoft WBEM Transient Instance Provider。

- **Unsecapp.exe**  
  功能：非安全套间（Unsecured Apartment）进程，用于需要穿过防火墙的 RPC 通信时向 MMC 或客户端程序返回调用结果。

- **Updprov.dll**  
  功能：Microsoft WBEM Updating Consumer Provider。

- **Viewprov.dll**  
  功能：Microsoft WBEM View Provider。

- **Policman.dll**  
  功能：安全策略状态提供器。

- **Wmiprvsd.dll**  
  功能：WMI 提供器子系统 DLL。

- **Wmiprvse.exe**  
  功能：WMI 提供器子系统的宿主进程。

- **Wmidcprv.dll**  
  功能：提供器子系统的非耦合（Decoupled）提供器注册和事件管理。

### 31.3.3 CIM 对象管理器

CIM 对象管理器（CIM Object Manager，简称 CIMOM）是 WMI 的核心部件，负责管理和维护系统中的类和对象，并作为 WMI 管理程序（消费者）和 WMI 提供器之间的交互桥梁。从进程的角度来看，CIMOM 是在 WMI 服务器进程中运行的一系列动态链接库，它们通过 COM/DCOM 技术相互协作，并以 COM 接口的形式对外公开其服务。

CIM 标准并未规定 CIMOM 的具体实现方式，微软也未公开 WMI 中 CIMOM 的内部实现细节。所有文档中均将其视为一个整体，称为 CIMOM。由于 CIMOM 是 WMI 的核心，了解其工作原理有助于理解 WMI。基于此，笔者对 CIMOM 进行了深入探索，但这些内容未经微软确认，且可能因 Windows 版本不同而有所差异。

#### CWbemClass 类

`WBEMCORE.DLL` 中的 `CWbemClass` 类用于描述和管理 CIM 类对象，包括存取类的名称、属性、方法、修饰符，生成类实例，克隆（Clone）和派生类等。表 31-3 列出了 `CWbemClass` 类的一些重要方法和属性。

| 方法或属性 | 描述 |
| --- | --- |
| `GetClassNameW` | 获取类的名称。 |
| `GetPropertyCount` | 获取属性个数。 |
| `BeginMethodEnumeration, NextMethod, EndMethodEnumeration` | 用于枚举类的所有方法。 |
| `Clone, CloneEx` | 复制类。 |
| `GetProperty, GetMethod` | 获取类的属性和方法。 |
| `PutMethod` | 设置方法。 |
| `SetPropQualifier, SetMethodQualifier` | 设置属性和方法的修饰符。 |
| `SpawnInstance, SpawnKeyedInstance` | 生成当前类的实例。 |

#### CWbemInstance 类

`WBEMCORE.DLL` 中的 `CWbemInstance` 类用于描述和管理 CIM 类实例，包括读取实例的类名、修改或读取实例的属性值、复制实例数据等。`IWbemClassObject` 接口定义了操作 WMI 类和实例的基本方法，`CWbemClass` 和 `CWbemInstance` 类为实现该接口提供了支持。

#### CRepository 类

`REPDRVFS.DLL` 中的 `CRepository` 类是对 WMI 数据仓库（CIM Repository）的抽象，负责管理和维护 WMI 数据仓库。它实现了一系列方法来完成有关 WMI 数据仓库的各种操作，包括初始化、读取、锁定、解锁、关闭、备份、恢复等。表 31-3 列出了 `CRepository` 类的一些重要方法和属性。

| 方法或属性 | 描述 |
| --- | --- |
| `Initialize` | 初始化 WMI 数据仓库。 |
| `GetRepositoryVersions` | 读取 WMI 数据仓库的版本。 |
| `GetRepositoryDirectory` | 从注册表中读取 WMI 数据仓库文件的路径。 |
| `GetNamespaceHandle` | 获取命名空间句柄。 |
| `GetStatistics` | 读取统计信息。 |
| `Backup, Restore` | 备份和恢复数据仓库。 |
| `Logon` | 登录数据仓库。 |
| `Shutdown` | 关闭 WMI 数据仓库。 |
| `LockRepository, UnlockRepository` | 锁定和解除锁定。 |
| `ReadOperationNotification, WriteOperationNotification` | 在读写数据仓库时产生事件通知。 |
| `FlushCache` | 将缓存在内存中的数据写入文件。 |
| `m_ulReadCount, m_ulWriteCount` | 读写次数计数。 |
| `m_threadCount` | 工作线程数。 |

`WBEMCORE.DLL` 中也有一个 `CRepository` 类，它是对 CIM 数据仓库的顶层抽象，对于需要底层操作的任务，它会转交给 `REPDRVFS.DLL` 中的 `CRepository` 类来完成。

#### CNamespaceHandle 类

`REPDRVFS.DLL` 中的 `CNamespaceHandle` 类是对 CIM 命名空间（CIM Namespace）物理特性的抽象，封装了关于命名空间的各种底层操作，如初始化命名空间、添加或删除类、实例和关系等。表 31-4 列出了 `CNamespaceHandle` 类的主要方法。

| 方法或属性 | 描述 |
| --- | --- |
| `Initialize, Initialize2` | 初始化命名空间。 |
| `DeleteInstance` | 删除实例。 |
| `PutInstance` | 添加实例。 |
| `DeleteDerivedClasses` | 删除派生类。 |
| `EraseClassRelationships` | 删除类关系。 |
| `GetInstanceByKey` | 根据键值获取实例。 |
| `FireEvent` | 激发事件。 |
| `DeleteObjectByPath` | 根据路径删除对象。 |
| `PutObject` | 保存或添加对象。 |
| `PutClass` | 保存或添加类。 |
| `DeleteClass` | 删除类。 |
| `DeleteClassInstances` | 删除类实例。 |
| `EnumerateClasses` | 枚举命名空间中的类。 |
| `ExecQuery` | 查询功能的总入口函数。 |
| `ExecInstanceQuery` | 查询实例。 |
| `GetObjectW` | 读取对象。 |
| `ExecClassQuery` | 查询类。 |

#### CSession 类

`REPDRVFS.DLL` 中的 `CSession` 类是外界与 WMI 数据仓库对话的主要媒介。通常，数据仓库的使用者只需调用 `CSession` 类封装好的方法，而不必关心数据仓库内部的操作细节。`CSession` 类接收到调用后通常再转发给内部的其他类来真正完成各种操作。

清单 31-3 显示了一个典型的查询操作的执行过程，`wbemcore.dll` 中的 `CRepository` 的 `ExecQuery` 方法调用 `repdrvfs.dll` 中的 `CSession` 类的 `ExecQuery` 方法。随后，`CSession` 类的 `ExecQuery` 再分发给 `CNamespaceHandle` 类的 `ExecQuery` 方法。

```plaintext
0:022> k 
ChildEBP RetAddr   
011cfbdc 752146c9 repdrvfs!CNamespaceHandle::ExecQuery 
011cfc1c 762d11e0 repdrvfs!CSession::ExecQuery+0xb6
```

希望这些优化后的文本能够帮助你更好地理解和使用 WMI 相关的 DLL 文件及其功能。