在这个样例中，有括号的区域为满足条件的位置。
题解
虽然题目要求的是满足向下流能到达两个大洋的位置，如果我们对所有的位置进行搜索，那
么在不剪枝的情况下复杂度会很高。因此我们可以反过来想，从两个大洋开始向上流，这样我们
只需要对矩形四条边进行搜索。搜索完成后，只需遍历一遍矩阵，满足条件的位置即为两个大洋
向上流都能到达的位置。
vector direction{-1, 0, 1, 0, -1};
//主函数
vector> pacificAtlantic(vector>& matrix){
if (matrix.empty() 11 matrix[0].empty()) {
return };
vector> ans;
int m = matrix.size(), n = matrix[o] .size() ;
vector> can_reach_p(m, vector(n, false));
vector> can_reach_a(m, vector(n, false));
---
## Page 34
6.3回渊法
29/143 -
for (int i = 0; i {i, j});
return ans;
//辅函数
void dfs(const vector>& matrix, vector>& can_reach,
int r,int c){
if (can_reach[r][c]) {
return;
can_reach[r][c] = true;
int x, y;
for （int i = 0;i = 0 && x = 0 && y > permute(vector& nums){
vector> ans;
backtracking(nums, 0, ans) ;
return ans;
//辅函数
void backtracking(vector &nums, int level, vector> &ans) {
if (level == nums.size() - 1) {
ans.push_back (nume) ;
return;
for (int i - level; i > combine(int n, int k) {
vector> ans;
vector comb(k, 0);
int count = 0;
backtracking(ans, comb, count, 1, n, k);
return ans;
//辅函数
void backtracking(vector>& ans, vector& comb, int& count, int
pos,int n, int k) {
if (count == k) {
ans .push_back (comb) ;
return;
for (int i = pos; i >& board, string word) {
if (board.empty()) return false;
int m = board.size(), n = board[o] .size();
vector> visited(m, vector(n, false));
bool find - false;
for (int i = 0; i >& board, string& word, bool
& find, vector>& visited, int pos) {
if (i = board.size() 11 j = board[0] .size()) {
return;
if (visited[i] [j] l1 find ll board[i] [j] != vord[pos]){
return;
if (pos == word.size() - 1) {
find - true;
return;
visited[i][j]-true；//修改当前节点状态
//递归子节点
backtracking(i + 1, j, board, word, find, visited, pog + 1);
backtracking(i - 1, j, board, word, find, visited, pos + 1);
backtracking(i, j + 1, board, word, find, visited, pos + 1);
backtracking(i, J - 1, board, word, find, visited, pos + 1);
visited[i][j]-false;//回改当前节点状态
51. N-Queens (Hard)
---
## Page 38
6.3回法
33/143 -
题目描述
给定一个大小为n的正方形国际象棋棋盘，求有多少种方式可以放置n个皇后并使得她们互
不攻击，即每一行、列、左斜、右斜最多只有一个皇后。
P
C
P
电
6
h
图6.1：题目51-八皇后的一种解法
输人输出样例
输入是一个整数n，输出是一个二维字符申数组，表示所有的棋盘表示方法
Input: 4
Output: [
[".Q..*, // Solution 1
". ..Q",
"Q...",
"..Q."]，
["..Q.*, // Solution 2
"Q...",
"...Q",
".Q.."]
在这个样例中，点代表空白位置，Q代表皇后。
题解
类似于在矩阵中寻找字符中，本题也是通过修改状态矩阵来进行回溯。不同的是，我们需要
对每一行、列、左斜、右斜建立访问数组，来记录它们是否存在皇后。
本题有一个隐藏的条件，即满足条件的结果中每一行或列有且仅有一个皇后。这是因为我们
一共只有n行和n列。所以如果我们通过对每一行遍历来插入皇后，我们就不需要对行建立访问
数组了。
//主函数
vector> solveNQueens(int n)(
vector> ans;
if (n == 0) {
return ans;
---
## Page 39
6.4广度优先搜索
34/143 -
vector board(n, string(n,*,));
vector column(n, false), 1diag(2*n-1, false), rdiag(2*n-1, false);
backtracking(ans, board, column, ldiag, rdiag, O, n);
return ans;
//辅函数
void backtracking(vector> &ans, vector &board, vector &column, vector &ldiag, vector &rdiag, int rov, int n) {
if (rou == n) {
ans .push_back (board) ;
return;
for (int i = 0; i [2->3]->[4]，其中
方括号代表每一层的元素。
/
3
4
这里要注意，深度优先搜索和广度优先搜索都可以处理可达性问题，即从一个节点开始是否
能达到另一个节点。因为深度优先搜索可以利用递归快速实现，很多人会习惯使用深度优先搜索
刷此类题目。实际软件工程中，笔者很少见到递归的写法，因为一方面难以理解，另一方面可能
产生栈溢出的情况：面用栈实现的深度优先搜索和用队列实现的广度优先搜索在写法上并没有太
大差异，因此使用哪一种搜索方式需要根据实际的功能需求来判断。
---
## Page 40
6.4广度优先搜索
35/143 -
934. Shortest Bridge (Medium)
题目描述
给定一个二维0-1矩阵，其中1表示陆地，0表示海洋，每个位置与上下左右相连。已知矩
阵中有且只有两个岛屿，求最少要填海造陆多少个位置才可以将两个岛屿相连。
输人输出样例
输入是一个二维整数数组，输出是一个非负整数，表示需要填海造陆的位置数。
Input:
[[1,1,1,1,1] ,
[1,0,0,0,1],
[1,0,1,0,1],
[1,0,0,0,1],
[1,1,1,1,1]]
Output: 1
题解
本题实际上是求两个岛屿间的最短距离，因此我们可以先通过任意搜索方法找到其中一个岛
屿，然后利用广度优先搜索，查找其与另一个岛屿的最短距离。
vector direction{1, 0, 1, 0, -1};
//主函数
int shortestBridge(vector>& grid) {
int m = grid.size(), n = grid[o] .size();
queue> points;
//dfe寻找第一个岛屿，并把1全部赋值为2
bool flipped = false;
for (int i = 0; i = 0 && y >= 0 && x < m && y < n) {
---
## Page 41