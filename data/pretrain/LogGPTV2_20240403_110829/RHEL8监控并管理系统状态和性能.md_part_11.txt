    # {PackageManagerCommand} install pcp
    ```
2.  在主机机器上启用并启动 `pmcd`{.literal} 服务：
    ``` screen
    # systemctl enable pmcd
    # systemctl start pmcd
    ```
:::
::: itemizedlist
**验证步骤**
-   验证 `pmcd`{.literal} 进程是否在主机上运行：
    ``` screen
    # pcp
    Performance Co-Pilot configuration on workstation:
    platform: Linux workstation 4.18.0-80.el8.x86_64 #1 SMP Wed Mar 13 12:02:46 UTC 2019 x86_64
    hardware: 12 cpus, 2 disks, 1 node, 36023MB RAM
    timezone: CEST-2
    services: pmcd
    pmcd: Version 4.3.0-1, 8 agents
    pmda: root pmcd proc xfs linux mmv kvm jbd2
    ```
:::
::: itemizedlist
**其它资源**
-   `pmcd(1)`{.literal} man page
-   [PCP
    发布的工具](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/setting-up-pcp_monitoring-and-managing-system-status-and-performance#tools-distributed-with-pcp_setting-up-pcp){.link}
:::
:::
::: section
::: titlepage
# []{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#deploying-a-minimal-pcp-setup_setting-up-pcp}部署最小 PCP 设置 {.title}
:::
最小 PCP 设置收集红帽企业 Linux
的性能统计信息。设置涉及在生产系统上添加收集数据以便进一步分析所需的最少软件包数量。
您可以使用各种 PCP 工具分析生成的 `tar.gz`{.literal} 文件和
`pmlogger`{.literal} 输出的存档，并将它们与其他性能信息来源进行比较。
::: itemizedlist
**先决条件**
-   已安装 PCP。如需更多信息，请参阅 [安装和启用
    PCP](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/setting-up-pcp_monitoring-and-managing-system-status-and-performance#installing-and-enabling-pcp_setting-up-pcp){.link}。
:::
::: orderedlist
**流程**
1.  更新 `pmlogger`{.literal} 配置：
    ``` screen
    # pmlogconf -r /var/lib/pcp/config/pmlogger/config.default
    ```
2.  启动 `pmcd`{.literal} 和 `pmlogger`{.literal} 服务：
    ``` screen
    # systemctl start pmcd.service
    # systemctl start pmlogger.service
    ```
3.  执行所需的操作，以记录性能数据。
4.  停止 `pmcd`{.literal} 和 `pmlogger`{.literal} 服务：
    ``` screen
    # systemctl stop pmcd.service
    # systemctl stop pmlogger.service
    ```
5.  保存输出并将其保存到基于主机名和当前日期和时间名为 的
    `tar.gz`{.literal} 文件中：
    ``` screen
    # cd /var/log/pcp/pmlogger/
    # tar -czf $(hostname).$(date +%F-%Hh%M).pcp.tar.gz $(hostname)
    ```
    使用 PCP 工具提取此文件并分析数据。
:::
::: itemizedlist
**其它资源**
-   `pmlogconf(1)、`{.literal} `pmlogger(1)和`{.literal}
    `pmcd(1)`{.literal} man page
-   [PCP
    发布的工具](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/setting-up-pcp_monitoring-and-managing-system-status-and-performance#tools-distributed-with-pcp_setting-up-pcp){.link}
-   [使用 PCP
    分发的系统服务](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/performance-analysis-of-xfs-with-pcp_monitoring-and-managing-system-status-and-performance#system-services-distributed-with-pcp_setting-up-pcp){.link}
:::
:::
::: section
::: titlepage
# []{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#system-services-distributed-with-pcp_setting-up-pcp}使用 PCP 分发的系统服务 {.title}
:::
下表描述了通过 PCP 分发的各种系统服务的角色。
::: table
[]{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#idm139675532415968}
**表 6.1. 使用 PCP 分发的系统服务的角色**
::: table-contents
  ---------------------- --------------------------------------------------------
  Name                   Description
  `pmcd`{.literal}       Performance Metric Collector Daemon(PMCD)。
  `pmie`{.literal}       性能指标参考引擎.
  `pmlogger`{.literal}   性能指标日志记录器。
  `pmproxy`{.literal}    实时和历史性能指标代理、时间序列查询和 REST API 服务。
  ---------------------- --------------------------------------------------------
:::
:::
:::
::: section
::: titlepage
# []{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#tools-distributed-with-pcp_setting-up-pcp}PCP 发布的工具 {.title}
:::
下表描述了各种工具的用法，这些工具随 PCP 一起分发。
::: table
[]{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#idm139675571711120}
**表 6.2. 使用 PCP 发布的工具**
::: table-contents
  -------------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  Name                       Description
  `pcp`{.literal}            显示 Performance Co-Pilot 安装的当前状态。
  `pcp-atop`{.literal}       从性能角度显示最重要的硬件资源的系统级别：CPU、内存、磁盘和网络。
  `pcp-atopsar`{.literal}    根据各种系统资源利用率生成系统级活动报告。这个报告是从之前使用 pmlogger 或 pcp-atop 的 -w 选项记录的原始日志文件生成的。
  `pcp-dmcache`{.literal}    显示关于配置的设备映射器缓存目标的信息，例如：设备 IOP、缓存和元数据设备使用率，以及每个缓存设备的读写率和命中率和比率。
  `pcp-dstat`{.literal}      一次显示一个系统的指标。要显示多个系统的指标，请使用 `--host`{.literal} 选项。
  `pcp-free`{.literal}       报告系统中的可用内存和使用的内存。
  `pcp-htop`{.literal}       以与 `top`{.literal} 命令类似的方式显示系统上运行的所有进程及其命令行参数，但允许您纵向和水平滚动，以及使用鼠标进行交互。您还可以查看树格式的进程，同时选择并对多个进程执行操作。
  `pcp-ipcs`{.literal}       显示有关调用进程具有读取访问权限的进程间通信(IPC)功能的信息。
  `pcp-numastat`{.literal}   显示内核内存分配器的 NUMA 分配统计信息。
  `pcp-pidstat`{.literal}    显示关于系统中运行的单独任务或进程的信息，例如：CPU 百分比、内存和堆栈使用情况、调度和优先级。默认情况下，报告本地主机的实时数据。
  `pcp-ss`{.literal}         显示 pmdasockets 性能指标域代理(PMDA)收集的套接字统计信息。
  `pcp-uptime`{.literal}     显示系统运行的时长、当前登录的用户数量，以及过去 1 分钟、5 分钟和 15 分钟的系统负载平均值。
  `pcp-vmstat`{.literal}     每 5 秒提供高级别系统性能概述.显示有关进程、内存、分页、块 IO、陷阱和 CPU 活动的信息。
  `pmchart`{.literal}        绘制 Performance Co-Pilot 工具提供的性能指标值。
  `pmclient`{.literal}       使用性能指标应用程序编程接口(PMAPI)显示高级别系统性能指标。
  `pmconfig`{.literal}       显示配置参数的值。
  `pmdbg`{.literal}          显示可用的 Performance Co-Pilot 调试控制标志及其值。
  `pmdiff`{.literal}         比较给定时间窗口中一个或多个存档中每个指标的平均值，以了解在搜索性能回归时可能感兴趣的更改。
  `pmdumplog`{.literal}      显示 Performance Co-Pilot 归档文件中的控制、元数据、索引和状态信息。
  `pmdumptext`{.literal}     输出实时或从 Performance Co-Pilot 归档收集的性能指标值。
  `pmerr`{.literal}          显示可用的 Performance Co-Pilot 错误代码及其对应的错误消息。
  `pmfind`{.literal}         查找网络上的 PCP 服务。
  `pmie`{.literal}           定期评估一组算术、逻辑和规则表达式的推理引擎。指标从实时系统或从 Performance Co-Pilot 归档文件收集。
  `pmieconf`{.literal}       显示或设置可配置的 pmie 变量.
  `pmiectl`{.literal}        管理 pmie 的非主实例。
  `pminfo`{.literal}         显示性能指标信息。指标从实时系统或从 Performance Co-Pilot 归档文件收集。
  `pmiostat`{.literal}       报告 SCSI 设备（默认）或设备映射器设备的 I/O 统计信息（使用 -x dm 选项）。
  `pmlc`{.literal}           以交互方式配置活跃的 pmlogger 实例。
  `pmlogcheck`{.literal}     在 Performance Co-Pilot 归档文件中识别无效的数据。
  `pmlogconf`{.literal}      创建并修改 pmlogger 配置文件。
  `pmlogctl`{.literal}       管理 pmlogger 的非主实例。
  `pmloglabel`{.literal}     验证、修改或修复 Performance Co-Pilot 存档文件的标签。
  `pmlogsummary`{.literal}   计算 Performance Co-Pilot 存档文件中存储的性能指标的统计信息。
  `pmprobe`{.literal}        决定性能指标的可用性。
  `pmrep`{.literal}          报告所选、易于定制的性能指标值。
  `pmsocks`{.literal}        允许通过防火墙访问 Performance Co-Pilot 主机。
  `pmstat`{.literal}         定期显示系统性能的简短摘要。
  `pmstore`{.literal}        修改性能指标的值。
  `pmtrace`{.literal}        为 trace PMDA 提供命令行界面。
  `pmval`{.literal}          显示性能指标的当前值。
  -------------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
:::
:::
:::
::: section
::: titlepage
# []{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#pcp-deployment-architectures_setting-up-pcp}PCP 部署架构 {.title}
:::
Performance
Co-Pilot(PCP)提供了许多选项来完成高级设置。从巨大的各种架构中，本节论述了如何根据红帽推荐的部署设置、大小调整和配置选项来扩展您的
PCP 部署。
PCP 根据 PCP 部署的规模，支持多种部署架构。
可用的扩展部署设置变体：
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
由于 Red Hat Enterprise Linux 8.4 以及之前的 Red Hat Enterprise Linux 8
次要版本不提供 PCP 版本 5.3.0，因此红帽推荐使用 localhost 和 pmlogger
场架构。
有关 PCP 5.3.0 版本 pmproxy 中已知内存泄漏的更多信息，请参阅 PCP [中
pmproxy
中的内存泄漏。](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/8.4_release_notes/index#BZ-1991659){.link}
:::
::: variablelist
[`localhost`{.literal}]{.term}
:   每一服务在受监控的计算机本地运行。当您在不更改任何配置更改的情况下启动服务时，这是默认的部署。在这种情况下，无法扩展到单个节点。
    默认情况下，Redis 的部署设置是独立 localhost。但是，Redis
    可以选择以高可用性和高度可扩展的集群方式执行，其中数据在多个主机之间共享。另一个可行选择是在云中部署
    Redis 集群，或者从云供应商利用受管 Redis 集群。
[`分散`{.literal}]{.term}
:   本地主机和分散设置的唯一区别是集中式 Redis
    服务。在此模型中，主机在每个被监控的主机上执行 `pmlogger`{.literal}
    服务，并从本地 `pmcd`{.literal} 实例检索指标。本地
    `pmproxy`{.literal} 服务然后将性能指标导出到中央 Redis 实例。
    ::: figure
    []{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#idm139675569366944}
    **图 6.1. 分散日志记录**
    ::: figure-contents
    ::: mediaobject
    ![分散日志记录](images/173_RHEL_instaling_PCP_0721_decentralized.png)
    :::
    :::
    :::
[`集中式日志记录 - pmlogger 场`{.literal}]{.term}
:   当被监控主机上的资源使用量受限时，另一个部署选项是
    `pmlogger`{.literal}
    场，也称为集中式日志记录。在这个设置中，一个日志记录器主机执行多个
    `pmlogger`{.literal} 进程，每个进程配置为从不同的远程
    `pmcd`{.literal} 主机检索性能指标。集中式日志记录器主机也配置为执行
    `pmproxy`{.literal} 服务，它会发现生成的 PCP
    存档日志，并将指标数据加载到 Redis 实例中。
    ::: figure
    []{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#idm139675538562224}
    **图 6.2. 集中式日志记录 - pmlogger 场**
    ::: figure-contents
    ::: mediaobject
    ![集中式日志记录 - pmlogger
    场](images/173_RHEL_instaling_PCP_0721_centralized.png)
    :::
    :::
    :::
[`Federated - 多个 pmlogger 场`{.literal}]{.term}
:   对于大规模部署，红帽建议以联合方式部署多个 `pmlogger`{.literal}
    场。例如，每个机架或数据中心都有一个 `pmlogger`{.literal} 场。每个
    `pmlogger`{.literal} 场将指标加载到中央 Redis 实例中。
    ::: figure
    []{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#idm139675533464992}
    **图 6.3. Federated - 多个 pmlogger 场**
    ::: figure-contents
    ::: mediaobject
    ![Federated - 多个 pmlogger
    场](images/173_RHEL_instaling_PCP_0721_federated.png)
    :::
    :::
    :::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
默认情况下，Redis 的部署设置是独立 localhost。但是，Redis
可以选择以高可用性和高度可扩展的集群方式执行，其中数据在多个主机之间共享。另一个可行选择是在云中部署
Redis 集群，或者从云供应商利用受管 Redis 集群。
:::
::: itemizedlist
**其它资源**
-   `pcp(1)、`{.literal} `pmlogger(1)、`{.literal}
    `pmproxy(1)`{.literal} 和 `pmcd(1)`{.literal} man page
-   [推荐的部署架构](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/index#recommended-deployment-architecture_setting-up-pcp){.link}
:::
:::
::: section
::: titlepage
# []{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#recommended-deployment-architecture_setting-up-pcp}推荐的部署架构 {.title}
:::
下表描述了根据受监控的主机数量推荐的部署架构。
::: table
[]{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#idm139675498370128}
**表 6.3. 推荐的部署架构**
::: table-contents
  主机数量(N)                   1-10                              10-100                 100-1000
  ----------------------------- --------------------------------- ---------------------- ---------------
  `pmcd`{.literal} 服务器       N                                 N                      N
  `pmlogger`{.literal} 服务器   1 到 N                            N/10 到 N              N/100 到 N
  `pmproxy`{.literal} 服务器    1 到 N                            1 到 N                 N/100 到 N
  Redis 服务器                  1 到 N                            1 到 N/10              N/100 到 N/10
  Redis cluster                 否                                可能                   是
  推荐的部署设置                localhost、分散或集中式日志记录   分散、集中记录或联合   分散或联合
:::