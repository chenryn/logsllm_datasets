### Organization and Protocol Simplicity
The relative simplicity of the protocol, along with the availability of implementations, reinforces the organization. 

### Query Optimization
Due to the simplicity of query operations and the need to optimize this common operation, we provide an optimized interface for lookups. The IKS client maps query requests into HTTP requests for static XML documents using a URL-safe encoding [39] of the queried object’s name. The response XML format is similar to the SOAP formats used by the registration server, but without the SOAP envelope.

### 5.6. Authenticating Key-Signing Keys
As mentioned in Section 4.3, query response messages are signed by one of the domain's key-signing keys (KSK). To verify this signature, the client must fetch the KSK from IKS as well as its commitment from DNSSEC.

A named KSK \( K \) for domain \( D \) must be a DSA key published in IKS. The hash of the key is stored in a DNS text record with the name `sha1_K.D`. This record contains a hexadecimal representation of the SHA-1 hash. Recent cryptanalytic results against SHA-1 suggest re-evaluating the use of SHA-1 as a secure hash function [8, 49].

To verify the results of a query, the client first obtains the KSK by requesting the key named in the query response. Subsequently, the client retrieves the commitment of that KSK from DNSSEC and confirms that the retrieved key matches the commitment. Finally, the KSK is used to verify the query results.

### 6. The Riverside Internet Key Server
We have built a prototype implementation of IKS, the Riverside Internet Key Server (RIKS). In this section, we will describe the issues, design choices, and our preliminary experience with this system.

#### 6.1. Architecture
The RIKS server consists of three components:
1. **Query Handler**: Manages query requests.
2. **Registration Handler**: Handles registration and revocation requests.
3. **Update Process**: Generates KSK-signed query responses.

These components communicate through a relational database.

#### 6.2. Signature Generation Strategies
We have identified three distinct signature generation strategies, which differ in the time at which the KSK is needed and which processes have access to it:
- **On-line**: The key-registration handler signs keys with the KSK immediately upon their acceptance by the system.
- **On-demand**: The key-lookup handler checks the database for a response object. If it exists and is signed, it is returned. Otherwise, it is immediately signed and returned to the requesting client.
- **Off-line**: All signatures are generated by an off-line process that runs periodically. This method has the advantage that the key-signing key can be kept offline during operation.

RIKS currently supports only the off-line method of signature generation. However, it would be straightforward to add the other signature methods, and for RIKS deployments to select one as a configuration option.

#### 6.3. Implementation
RIKS is implemented in Python, using the Zolera SOAP Infrastructure (ZSI) [40] and mod_python [46] to allow the Apache web server to host the server processes. The M2Crypto [43] wrapper provides Python access to the cryptographic functionality in the OpenSSL library. The server uses SQLite [45], an embeddable SQL’92 compliant RDBMS engine, and pysqlite [37], a Python interface layer, for underlying data storage.

#### 6.4. Performance
Our current, proof-of-concept, RIKS implementation is not yet fully optimized, but we ran a series of tests to measure the registration, update, and query performance of our RIKS prototype. These tests were run on a single CPU (1.5 GHz Pentium 4M) laptop machine with 512 MB of RAM. The tests were run with a moderate-sized (≈300 MB) database, containing about 50,000 entries (10 keys registered to each user). Table 1 summarizes RIKS performance.

| Operation        | Transactions/second |
|------------------|---------------------|
| Registration     | 6.1                 |
| Query            | 295                 |
| Update           | 68                  |

Our query handler handled 295 lookup requests per second. Key lookup performance is likely to be similar to serving static web content, as IKS simply returns pre-generated query responses. Our design also allows RIKS to be parallelized to improve performance.

The registration handler was able to complete 6.1 registration requests per second. Most of its time was spent parsing incoming requests, serializing responses, and sending them to the client. Approximately 12% of the registration handler’s time was spent authenticating requests, storing new keys in the database, and signing responses.

The update activity identifies keys that must be registered, re-signed, expired, or purged, and then processes them. The update process took 70 seconds to identify entries requiring processing, with the database on disk. Once the database was loaded into memory, this same operation took 2.5 seconds. After constructing the worklist, the update process completed generating and signing query responses at a rate of 68 per second.

A successful registration of a 1024-bit DSA key requires about 4 KB of SOAP messages to be sent between the client and server. XML query responses were about 1.8 KB each.

#### 6.5. RIKS Client Library
Currently, the only complete client library available for RIKS is a Python module. While this client library is functional, it is not appropriate for inclusion in most client applications. We are re-implementing our client library in ANSI C, and expect this effort to be completed shortly.

We have taken measures to limit the complexity of the client library so that any cryptographically aware application can reasonably include it to publish and lookup keys in IKS. Aside from the cryptographic operations provided by the OpenSSL toolkit, most IKS operations are handled by libraries included with languages such as Python, Java, C, and C++.

### 7. Conclusions & Future Work
Powerful cryptographic tools exist to address security and privacy concerns, but they have not been widely used due to the lack of a convenient infrastructure for authenticated key distribution. IKS is intended to accelerate the adoption of cryptographically-enabled applications. IKS is a simple, scalable public key distribution service, and its protocols have been designed specifically to meet the requirements of this domain, conforming to current industry best practices and standards for remote service location and invocation.

We rely on DNSSEC to provide authenticated delegation, while keeping the functional overhead of key distribution outside the critical DNS infrastructure. This strategy allows us to use the name service infrastructure to guarantee authenticity, while avoiding the scalability, efficiency, and administrative pitfalls of earlier DNS-based mechanisms. Furthermore, we use DNS names directly, and not a namespace orthogonal to it, facilitating its integration into the existing Internet infrastructure.

We have presented RIKS, the Riverside Internet Key Server, a prototype implementation of IKS. RIKS consists of approximately 4,000 lines of Python code and demonstrates performance adequate to justify confidence in our approach. The RIKS client library API provides a simple interface to IKS, making it easier to incorporate key authentication into existing collaborative tools.

**Future Work:**
- Develop an IKS standard specification to incorporate input from the community and motivate deployment in tandem with DNSSEC.
- Continue to improve RIKS performance, security, and manageability, making it suitable for use in large ISPs.
- Verify the ease with which existing applications can be extended to use IKS by deploying a secure application.
- As DNSSEC gains adoption and penetration, IKS will facilitate authenticated public key distribution, improving the security of existing network applications and protocols, and enabling new developments.

In the future, when Alice needs to locate Bob’s key, she can turn to IKS.

### References
[References listed here as provided in the original document]

This revised version aims to enhance clarity, coherence, and professionalism while maintaining the technical details and structure of the original text.