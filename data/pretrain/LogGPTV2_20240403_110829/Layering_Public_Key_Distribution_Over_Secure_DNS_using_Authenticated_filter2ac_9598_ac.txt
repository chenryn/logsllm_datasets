organization. This is reinforced by the relative simplicity of
the protocol, as well as the availability of implementations.
Query Optimization. Due to the relative simplicity of
query operations, and the need to optimize this common op-
eration, we provide an optimized interface to lookup. Query
requests are mapped, by the IKS client, into HTTP requests
for static XML documents using a URL-safe encoding [39]
of the queried object’s name. The response XML format is
similar to the SOAP formats used by the registration server
sans the SOAP envelope.
5.6. Authenticating Key-Signing Keys
As mentioned in Section 4.3, query response messages
are signed by one of the domain’s key-signing keys (KSK).
To verify this signature, the client must fetch the KSK from
IKS as well as its commitment from DNSSEC.
A named KSK K for domain D must be a DSA key pub-
lished in IKS. The hash of the key is stored in a DNS text
record with the name sha1 K.D. This record contains a
hexadecimal representation of the SHA-1 hash.
(Recent
cryptanalytic results against SHA-1 mandate re-evaluating
the use of SHA-1 as a secure hash function [8, 49].)
To verify the results of a query, the client ﬁrst obtains
the KSK by requesting the key named in the query response
Subsequently, the client retrieves the commitment of that
KSK from DNSSEC and conﬁrms that the retrieved key
matches the commitment. Finally, the KSK is used to verify
the query results.
6. The Riverside Internet Key Server
We have built a prototype implementation of IKS, the
Riverside Internet Key Server (RIKS). In this section, we
will describe the issues, the design choices, and our prelim-
inary experience with this system.
The RIKS server is composed of three components, one
to handle query requests, one to handle registration and re-
vocation requests, and a separate update process to generate
the KSK-signed query responses. The components of the
server communicate through a relational database.
We have identiﬁed three distinct signature generation
strategies, which differ in the time at which the KSK is
needed and which processes have access to it.
On-line: The key-registration handler signs keys with the
KSK immediately upon their acceptance by the sys-
tem.
On-demand: The key-lookup handler checks the database
for a response object. If it exists and is signed, it is
returned. Otherwise, it is immediately signed and re-
turned to the requesting client.
Off-line: All signatures are generated by an off-line pro-
cess that runs periodically. This method has the advan-
tag that the key-signing key can be kept ofﬂine during
operation.
RIKS currently supports only the off-line method of sig-
nature generation. However, it would be very easy to add
the other signature methods, and for RIKS deployments to
select one as a conﬁguration option. RIKS is designed to
make key lookups efﬁcient; all valid keys are stored in a
database as pre-signed XML responses. A lookup is sim-
ply a retrieval from the database. The update process peri-
odically ensures that these responses are current. Figure 2
shows the current RIKS Architecture.
Figure 2. RIKS Architecture using off-line sig-
nature generation.
RIKS is implemented in Python, using the Zolera SOAP
Infrastructure (ZSI) [40], and mod python [46] to allow
the Apache web server to host the server processes. The
M2Crypto [43] wrapper provides Python access to the
cryptographic functionality in the OpenSSL library. The
server uses SQLite [45], an embeddable SQL’92 compliant
RDBMS engine, and pysqlite [37], a Python interface layer,
for underlying data storage.
6.1. Registration Handler
Key-registration and key-revocation requests are sent to
the Registration handler. These requests must be authen-
ticated and authorized before execution. The server’s re-
sponse is signed by a response-signing key (RSK), as con-
ﬁrmation to the client that its request was received.
6.2. Update Process
Before the effects of registration and revocation opera-
tions performed by the registration handler are made visible
to querying clients, the corresponding signed key-query re-
sponse messages must be generated by the update process,
which is granted access to one of the domain’s KSKs. Ad-
ditionally, as query response messages expire, replacement
signatures must be generated.
6.3. Query Handler
When a request for keys registered under a given name
arrives, the query handler simply looks in the database for a
pre-signed message, with this information already placed
there by the update process.
If no such object is found
the query handler returns a failure response signed with the
RSK.
Apache Web ServerApache Web ServerKey StoreRegistration HandlerQuery HandlerInternetUpdate ProcessKey-SigningKey6.4. Performance
7. Conclusions & Future Work
Our current, proof-of-concept, RIKS implementation is
not yet properly optimized, but we ran a series of tests to
measure the registration, update, and query performance of
our RIKS prototype. These tests were run on a single CPU
(1.5 GHz Pentium 4M) laptop machine with 512 MB of
RAM. The tests were run with a moderate-sized (∼300 MB)
database, containing about 50,000 entries (10 keys regis-
tered to each user). Table 1 summarizes RIKS performance.
Operation
Registration Query Update
Transactions/sec
6.1
295
68
Table 1. RIKS Performance Summary
Our query handler handled 295 lookup requests/second.
Key lookup performance will likely be similar to that of
serving static web content, since IKS simply returns pre-
generated query responses. Our design also allows RIKS to
be parallelized to improve performance.
The registration handler was able to complete 6.1 regis-
tration requests per second. The bulk of its time was spent
parsing incoming requests, serializing responses and send-
ing them to the client. Approximately 12% of the registra-
tion handler’s time was spent authenticating requests, stor-
ing the new keys in the database, and signing responses.
The update activity identiﬁes keys that must be regis-
tered, re-signed, expired, or purged, and then process them.
The update process took 70 seconds to identify entries re-
quiring processing, with the database on disk. Once the
database was loaded into memory this same operation took
2.5 seconds. After constructing this worklist, the update
process completed generating and signing query responses
at a rate of 68 per second.
A successful registration of a 1024-bit DSA key requires
about 4 KB of SOAP messages to be sent between the client
and server. XML query responses were about 1.8 KB each.
6.5. RIKS Client Library
Currently, the only complete client library available for
RIKS is a Python module. While this client library is func-
tional, it is not appropriate for inclusion in most client appli-
cations. We are re-implementing our client library in ANSI
C, and expect this effort to be completed shortly.
We have taken measures to limit the complexity of the
client library so that we can reasonably expect any crypto-
graphically aware application to include it in order to pub-
lish and lookup keys in IKS. Aside from the cryptographic
operations provided by the OpenSSL toolkit most IKS op-
erations are handled by libraries included with languages
such as Python, Java, C, and C++.
Powerful cryptographic tools exist to address security
and privacy concerns, but have not been widely used since
no convenient infrastructure is available for authenticated
key distribution. IKS is intended to accelerate the adoption
of cryptographically-enabled applications. IKS is a simple,
scalable public key distribution service, and its protocols
have been designed speciﬁcally to meet the requirements of
this domain, conforming to current industry best practices
and standards for remote service location and invocation.
We rely on DNSSEC to provide authenticated delega-
tion, while keeping the functional overhead of key distri-
bution outside the critical DNS infrastructure. This strategy
allows us to use the name service infrastructure to guarantee
authenticity, while avoiding the scalability, efﬁciency, and
administrative pitfalls of earlier DNS-based mechanisms.
Furthermore, we use DNS names directly, and not a names-
pace orthogonal to it, facilitating its integration into the ex-
isting Internet infrastructure.
We have presented RIKS, the Riverside Internet Key
Server, a prototype implementation of IKS. RIKS consists
of approximately 4000 lines of Python code, and demon-
strates performance adequate to justify conﬁdence in our
approach. The RIKS client library API provides a simple
interface to IKS, making it easier to incorporate key authen-
tication into existing collaborative tools.
Future Work. We hope to develop an IKS standard speci-
ﬁcation, to incorporate input from the community, and mo-
tivate deployment in tandem with DNSSEC. We will con-
tinue to improve RIKS performance, security, and manage-
ability, and make it suitable for use in large ISPs.
To verify the ease with which existing applications can
be extended to use IKS, we are planning the deployment of
a secure application. While distributed applications, such
as email and VoIP, will beneﬁt most from IKS in the longer
term, it should be straightforward to deploy IKS within a
single domain, even with the current deployment status of
DNSSEC. Centralized applications, including certain In-
stant Messaging applications, could easily be secured using
IKS today.
As DNSSEC gains adoption and penetration, we believe
IKS will facilitate authenticated public key distribution, im-
proving the security of existing network applications and
protocols, and enabling new developments.
In the future, when Alice must locate Bob’s key, she can
turn to IKS.
References
[1] H. Abelson, R. Anderson, S. Bellovin, J. Benaloh, M. Blaze,
W. Difﬁe, J. Gilmore, P. Neumann, R. Rivest, J. Schiller, and
B. Schneier. The Risks of Key Recovery, Key Escrow, and
Trusted Third-Party Encryption, 1998.
[2] D. Akin. Arrests key win for NSA hackers. The Globe And
Mail, April 2004.
[3] R. Arends, R. Austein, M. Larson, D. Massey, and S. Rose.
DNS Security Introduction and Requirements. IETF draft:
dnsext-dnssec-intro-09, February 2004.
[4] R. Arends, M. Larson, R. Austein, D. Massey, and S. Rose.
Protocol Modiﬁcations for the DNS Security Extensions.
IETF draft: dnsext-dnssec-protocol-06, May 2004. Updates
RFC 2535.
[5] D. Atkins and R. Austein. Threat Analysis of the Domain
IETF draft: dnsext-dns-threats-07, April
Name System.
2004.
[6] R. Atkinson. Key Exchange Delegation Records for the
DNS. RFC 2230, November 1997.
[7] S. Bellovin. Using the Domain Name System for System
Break-ins. In Proc. Fifth USENIX Security Symposium, June
1995.
[8] E. Biham and R. Chen. Near-Collisions of SHA-0. In Proc.
of CRYPTO 04, 2004.
[9] S. Boeyen, T. Howes, and P. Richard. Internet X.509 Public
Key Infrastructure LDAPv2 Schema. RFC 2587, June 1999.
[10] D. Boneh and M. Franklin. Identity-based Encryption from
the Weil Paring. In Proc. of CRYPTO 01, pages 213–229,
2001.
[11] ClickZ Stats. Population Explosion!, April 2004.
[12] M. Delany. Domain-based Email Authentication Using
IETF
Public-Keys Advertised in the DNS (DomainKeys).
draft: delany-domainkeys-base-00, May 2004.
[13] T. Dierks and C. Allen. The TLS Protocol Version 1.0. RFC
2246, January 1999.
[14] D. Eastlake. Domain Name System Security Extensions.
RFC 2535, March 1999.
[15] D. Eastlake. DSA KEYs and SIGs in the Domain Name
System (DNS). RFC 2536, March 1999.
[16] D. Eastlake. Storage of Difﬁe-Hellman Keys in the Domain
Name System (DNS). RFC 2539, March 1999.
[17] D. Eastlake. RSA/SHA-1 SIGs and RSA KEYs in the Do-
main Name System (DNS). RFC 3110, May 2001.
[18] D. Eastlake and O. Gudmunsdsson. Storing Certiﬁcates in
the Domain Name System (DNS). RFC 2538, March 1999.
[19] C. Ellison, B. Frantz, B. Lampson, R. Rivest, B. Thomas,
and T. Yolen. SPKI Certiﬁcate Theory. RFC 2693, Septem-
ber 1999.
[20] P. Eronen. Applying Decentralized Trust Management to
In Proc. Third NordU/USENIX
DNS Dynamic Updates.
Conference, 2001.
[21] FreeS/WAN Project. FreeS/WAN. www.freeswan.org.
[22] A. Freier, P. Karlton, and P. Kocher. The SSL Protocol Ver-
sion 3.0, November 1996.
[23] J. Galvin. Public Key Distribution with Secure DNS.
In
Proc. Sixth USENIX Security Symposium, 1996.
[24] R. Gieben. DNSSEC in NL, January 2004.
[25] Gnu Privacy Guard Project. www.gnupg.org.
[26] M. Gudgin, M. Hadley, N. Mendelsohn, J. Moreau, and
H. Nielsen. SOAP Version 1.2 Part 1: Messaging Frame-
work, June 23.
[27] O. Gudmundsson. Delegation Signer (DS) Resource Record
(RR). RFC 3658, November 2003.
[28] A. Gulbrandsen, P. Vixie, and L. Esibov. A DNS RR For
Specifying the Location of Services (DNS SRV). RFC 2782,
March 1999.
[29] IETF S/MIME Working Group. S/MIME Mail Security
Charter.
[30] Internet Software Consortium. Internet Domain Survey Host
Count, May 2004.
[31] ISO and CCITT, editors. Recommendation X.500: The Di-
rectory: Overview of Concepts, Models and Services. ITU,
1993.
[32] J. Linn. Privacy Enhancement for Internet Electronic Mail:
Part I: Message Encryption and Authentication Procedures.
RFC 1421, February 1993.
[33] D. Massey and S. Rose. Limiting the Scope of the KEY
Resource Record (RR). RFC 3445, December 2002.
[34] P. McDaniel and S. Jamin. A Scalable Key Distribution Hi-
erarchy. Technical Report CSE-TR-366-98, E.E. & C.S. De-
partment, University of Michigan, March 1998.
[35] N. Mitra. SOAP Version 1.2 Part 0: Primer, June 23.
[36] P. Mockapetris. Domain Names – Concepts and Facilities.
RFC 882, November 1983. Superceded by RFC 1034.
[37] M. Owens and G. H¨aring.
PySQLite.
pysqlite.
sourceforge.net.
[38] R. L. Rivest and B. Lampson. SDSI – A Simple Distributed
Security Infrastructure, April 1996.
[39] E. S. Joseffson. The Base16, Base32, and Base64 Data En-
codings. RFC 3548, July 2003.
[40] R. Salz.
Zolera Soap Infrastructure.
pywebsvcs.
sourceforge.net.
[41] J. Schlyter and W. Grifﬁn. Using DNS to Securely Publish
SSH Key Fingerprints. IETF draft: secsh-dns-05, September
2003.
[42] B. Schneier. Applied Cryptography: Protocols, Algorithms,
and Source Code in C. John Wiley & Sons, second edition,
October 1995.
[43] N. P. Siong. M2Crypto. sandbox.rulemaker.net/
ngps/m2.
[44] D. K. Smetters and G. Durfee. Domain-Based Adminis-
tration of Identity-Based Cryptosystems for Secure Email
and IPSEC. In Proc. Twelfth USENIX Security Symposium,
pages 215–230, August 2003.
[45] SQLite.org. SQLite. www.sqlite.org.
[46] G. Trubetskoy. mod python: Apache/Python Integration.
www.modpython.org.
[47] P. Vixie. DNS and BIND Security Issues.
In Proc. Fifth
USENIX Security Symposium, June 1995.
[48] X. Wang, Y. Huang, Y. Desmedt, and D. Rine. Enabling Se-
cure On-line DNS Dynamic Update. In Proc. Annual Com-
puter Security Applications Conference, December 2000.
[49] X. Wang, Y. Yin, and H. Yu. Collision Search Attacks on
SHA1, February 2005.
[50] T. Ylonen and D. Moffat. SSH Protocol Architecture. IETF
draft: secsh-architecture-15, October 2003.