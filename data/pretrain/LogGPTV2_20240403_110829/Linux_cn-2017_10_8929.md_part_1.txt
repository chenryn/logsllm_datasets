---
author: Mi Blog Lah!
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 8021
date: '2017-10-04 09:29:00'
editorchoice: false
excerpt: 在这篇文章中，我们将看到如何为名为 timg 的实用程序制作对应的 snap 包。
fromurl: https://blog.simos.info/how-to-create-a-snap-for-timg-with-snapcraft-on-ubuntu/
id: 8929
islctt: true
largepic: /data/attachment/album/201710/04/005358bmfkk33gzwmfwtkf.jpg
permalink: /article-8929-1.html
pic: /data/attachment/album/201710/04/005358bmfkk33gzwmfwtkf.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 在这篇文章中，我们将看到如何为名为 timg 的实用程序制作对应的 snap 包。
tags:
- Snap
thumb: false
title: 详解 Ubuntu snap 包的制作过程
titlepic: true
translator: Snapcrafter
updated: '2017-10-04 09:29:00'
---
> 
> 如果你看过译者以前翻译的 snappy 文章，不知有没有感觉相关主题都是浅尝辄止，讲得不够透彻，看得也不太过瘾？如果有的话，相信这篇详细讲解如何从零开始制作一个 snap 包的文章应该不会让你失望。
> 
> 
> 
![](/data/attachment/album/201710/04/005358bmfkk33gzwmfwtkf.jpg)
在这篇文章中，我们将看到如何为名为 [timg](https://github.com/hzeller/timg) 的实用程序制作对应的 snap 包。如果这是你第一次听说 snap 安装包，你可以先看看 [如何创建你的第一个 snap 包](https://tutorials.ubuntu.com/tutorial/create-your-first-snap)。
今天我们将学习以下有关使用 snapcraft 制作 snap 包的内容：
* [timg](https://github.com/hzeller/timg) 源码中的 Makefile 文件是手工编写，我们需要修改一些 [make 插件参数](https://snapcraft.io/docs/reference/plugins/make)。
* 这个程序是用 C++ 语言写的，依赖几个额外的库文件。我们需要把相关的代码添加到 snap 包中。
* [严格限制还是传统限制](https://snapcraft.io/docs/reference/confinement)？我们将会讨论如何在它们之间进行选择。
首先，我们了解下 [timg](https://github.com/hzeller/timg) 有什么用？
### 背景
Linux 终端模拟器已经变得非常炫酷，并且还能显示颜色！
![1.png-19.9kB](/data/attachment/album/201710/04/005427sz50aoivjjctwxuh.png)
除了标准的颜色，大多数终端模拟器（如上图显示的 GNOME 终端）都支持真彩色（1600 万种颜色）。
![图片.png-61.9kB](/data/attachment/album/201710/04/005428jpmp2g9xdgwdgf12.png)
是的！终端模拟器已经支持真彩色了！从这个页面“ [多个终端和终端应用程序已经支持真彩色（1600 万种颜色）](https://gist.github.com/XVilka/8346728)” 可以获取 AWK 代码自己进行测试。你可以看到在代码中使用了一些 [转义序列](https://en.wikipedia.org/wiki/Escape_sequence) 来指定 RGB 的值（256 \* 256 \* 256 ~= 1600 万种颜色）。
### timg 是什么？
好了，言归正传，[timg](https://github.com/hzeller/timg) 有什么用？它能将输入的图片重新调整为终端窗口字符所能显示范围的大小（比如：80 x 25），然后在任何分辨率的终端窗口用彩色字符显示图像。
![图片.png-37.3kB](/data/attachment/album/201710/04/005428q9ixpu5if25pnqxp.png)
这幅图用彩色块字符显示了 [Ubuntu 的 logo](http://design.ubuntu.com/wp-content/uploads/ubuntu-logo112.png)，原图是一个 PNG 格式的文件。
![图片.png-165kB](/data/attachment/album/201710/04/005428h6yta595ykwsokz7.png)
这是 [@Doug8888 拍摄的花](https://www.flickr.com/photos/doug88888/5776072628/in/photolist-9WCiNQ-7U3Trc-7YUZBL-5DwkEQ-6e1iT8-a372aS-5F75aL-a1gbow-6eNayj-8gWK2H-5CtH7P-6jVqZv-86RpwN-a2nEnB-aiRmsc-6aKvwK-8hmXrN-5CWDNP-62hWM8-a9smn1-ahQqHw-a22p3w-a36csK-ahN4Pv-7VEmnt-ahMSiT-9NpTa7-5A3Pon-ai7DL7-9TKCqV-ahr7gN-a1boqP-83ZzpH-9Sqjmq-5xujdi-7UmDVb-6J2zQR-5wAGNR-5eERar-5KVDym-5dL8SZ-5S2Uut-7RVyHg-9Z6MAt-aiRiT4-5tLesw-aGLSv6-5ftp6j-5wAVBq-5T2KAP)。
如果你通过远程连接服务器来管理自己的业务，并想要查看图像文件，那么 [timg](https://github.com/hzeller/timg) 将会特别有用。
除了静态图片，[timg](https://github.com/hzeller/timg) 同样也可以显示 gif 动图。
那么让我们开始 snap 之旅吧！
### 熟悉 timg 的源码
[timg](https://github.com/hzeller/timg) 的源码可以在  找到。让我们试着手动编译它，以了解它有什么需求。
![图片.png-128.4kB](/data/attachment/album/201710/04/005429o3521zzmp9mcc950.png)
`Makefile` 在 `src/` 子文件夹中而不是项目的根文件夹中。在 github 页面上，他们说需要安装两个开发包（GraphicsMagic++ 和 WebP），然后使用 `make` 就能生成可执行文件。在截图中可以看到我已经将它们安装好了（在我读完相关的 Readme.md 文件后）。
因此，在编写 `snapcraft.yaml` 文件时已经有了四条腹稿：
1. `Makefile` 在 `src/` 子文件夹中而不是项目的根文件夹中。
2. 这个程序编译时需要两个开发库。
3. 为了让 timg 以 snap 包形式运行，我们需要将这两个库捆绑在 snap 包中（或者静态链接它们）。
4. [timg](https://github.com/hzeller/timg) 是用 C++ 编写的，所以需要安装 g++。在编译之前，让我们通过 `snapcraft.yaml` 文件来检查 `build-essential` 元包是否已经安装。
### 从 snapcraft 开始
让我们新建一个名为 `timg-snap/` 的文件夹，并在其中运行 `snapcraft init` 这条命令来创建 `snapcraft.yaml` 工作的框架。
```
ubuntu@snaps:~$ mkdir timg-snap
ubuntu@snaps:~$ cd timg-snap/
ubuntu@snaps:~/timg-snap$ snapcraft init
Created snap/snapcraft.yaml.
Edit the file to your liking or run `snapcraft` to get started
ubuntu@snaps:~/timg-snap$ cat snap/snapcraft.yaml 
name: my-snap-name # you probably want to 'snapcraft register '
version: '0.1' # just for humans, typically '1.2+git' or '1.3.2'
summary: Single-line elevator pitch for your amazing snap # 79 char long summary
description: |
  This is my-snap's description. You have a paragraph or two to tell the most important story about your snap. Keep it under 100 words though, we live in tweetspace and your description wants to look good in the snap store.
grade: devel # must be 'stable' to release into candidate/stable channels
confinement: devmode # use 'strict' once you have the right plugs and slots
parts:
  my-part:
    # See 'snapcraft plugins'
    plugin: nil
```
### 填充元数据
`snapcraft.yaml` 配置文件的上半部分是元数据。我们需要一个一个把它们填满，这算是比较容易的部分。元数据由以下字段组成：
1. `name` （名字）—— snap 包的名字，它将公开在 Ubuntu 商店中。
2. `version` （版本）—— snap 包的版本号。可以是源代码存储库中一个适当的分支或者标记，如果没有分支或标记的话，也可以是当前日期。
3. `summary` （摘要）—— 不超过 80 个字符的简短描述。
4. `description` （描述）—— 长一点的描述, 100 个字以下。
5. `grade` （等级）—— `stable` （稳定）或者 `devel` （开发）。因为我们想要在 Ubuntu 商店的稳定通道中发布这个 snap 包，所以在 snap 包能正常工作后，就把它设置成 `stable`。
6. `confinement` （限制）—— 我们首先设置为 `devmode` （开发模式），这样系统将不会以任何方式限制 snap 包。一旦它在 `devmode`下能正常工作，我们再考虑选择 `strict` （严格）还是 `classic` （传统）限制。
我们将使用 `timg` 这个名字：
```
ubuntu@snaps:~/timg-snap$ snapcraft register timg
Registering timg.
You already own the name 'timg'.
```
是的，这个名字我已经注册了 :-)。
接下来，我们应该选择哪个版本的 timg？
![图片.png-72.7kB](/data/attachment/album/201710/04/005429bf4787aa48787899.png)
当在仓库中寻找分支或标记时，我们会发现有一个 v0.9.5 标签，其中有 2016 年 6 月 27 日最新提交的代码。
![图片.png-71.4kB](/data/attachment/album/201710/04/005429isi8z381pkdsf1gs.png)
然而主分支（`master`）中有两个看起来很重要的提交。因此我们使用主分支而不用 `v0.9.5` 标签的那个。我们使用今天的日期—— `20170226` 做为版本号。
我们从仓库中搜集了摘要和描述。其中摘要的内容为 `A terminal image viewer`，描述的内容为 `A viewer that uses 24-Bit color capabilities and unicode character blocks to display images in the terminal`。
最后，将 `grade` （等级）设置为 `stable` （稳定），将 `confinement` 限制设置为 `devmode` （开发模式）（一直到 snap 包真正起作用）。
这是更新后的 `snapcraft.yaml`，带有所有的元数据：
```
ubuntu@snaps:~/timg-snap$ cat snap/snapcraft.yaml 
name: timg
version: '20170226'
summary: A terminal image viewer
description: |
  A viewer that uses 24-Bit color capabilities and unicode character blocks to display images in the terminal.
grade: stable 
confinement: devmode
parts:
  my-part:
    # See 'snapcraft plugins'
    plugin: nil
```
### 弄清楚 `parts:` 是什么
现在我们需要将上面已经存在的 `parts:` 部分替换成真实的 `parts:`。
![timg-git-url.png-8kB](/data/attachment/album/201710/04/005430rbpub2wbkpkqwksp.png)
*Git 仓库的 URL。*
![图片.png-28.7kB](/data/attachment/album/201710/04/005430j25sdioid56xz9kp.png)
*存在 Makefile，因此我们需要 make 插件。*
我们已经知道 git 仓库的 URL 链接，并且 timg 源码中已有了 `Makefile` 文件。至于 [snapcraft make 插件](https://snapcraft.io/docs/reference/plugins/make) 的 Makefile 命令，正如文档所言，这个插件总是会运行 `make` 后再运行 `make install`。为了确认 `make` 插件的用法，我查看了 [snapcraft 可用插件列表](https://snapcraft.io/docs/reference/plugins/)。
因此，我们将最初的配置：
```
parts:
  my-part:
    # See 'snapcraft plugins'
    plugin: nil
```
修改为：
```
parts:
  timg:
    source: https://github.com/hzeller/timg.git
    plugin: make
```
这是当前 `snapcraft.yaml` 文件的内容：
```
name: timg
version: '20170226'
summary: A terminal image viewer
description: |
  A viewer that uses 24-Bit color capabilities and unicode character blocks 
  to display images in the terminal.
grade: stable 
confinement: devmode
parts:
  timg:
    source: https://github.com/hzeller/timg.git
    plugin: make
```
让我们运行下 `snapcraft prime` 命令看看会发生什么：
```
ubuntu@snaps:~/timg-snap$ snapcraft prime
Preparing to pull timg 
Pulling timg 
Cloning into '/home/ubuntu/timg-snap/parts/timg/src'...
remote: Counting objects: 144, done.
remote: Total 144 (delta 0), reused 0 (delta 0), pack-reused 144
Receiving objects: 100% (144/144), 116.00 KiB | 0 bytes/s, done.
Resolving deltas: 100% (89/89), done.
Checking connectivity... done.
Preparing to build timg 
Building timg 
make -j4
make: *** No targets specified and no makefile found.  Stop.
Command '['/bin/sh', '/tmp/tmpem97fh9d', 'make', '-j4']' returned non-zero exit status 2
ubuntu@snaps:~/timg-snap$
```
我们可以看到 `snapcraft` 无法在源代码中找到 `Makefile` 文件，正如我们之前所暗示的，`Makefile` 位于 `src/` 子文件夹中。那么，我们可以让 `snapcraft` 使用 `src/` 文件夹中的 `Makefile` 文件吗？
每个 snapcraft 插件都有自己的选项，并且有一些通用选项是所有插件共享的。在本例中，我们希望研究那些[与源代码相关的 snapcraft 选项](https://snapcraft.io/docs/reference/plugins/source)。我们开始吧：