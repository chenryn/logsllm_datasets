    expthresh valueMeaning    
    -1Promote at whatever cutoff makes sense for optimal memory usage. ('auto' mode)    
    0Skip EXPLICIT representation in hierarchy.    
    1-18Promote at 2expthresh - 1 cardinality    
You can choose the `EXPLICIT` cutoff such that it will end up taking more memory than a `FULL` `hll` representation. This is allowed for those cases where perfect precision and accuracy are required up through some pre-set cardinality range, after which estimates of the cardinality are sufficient.    
**NOTE:** The restriction of `expthresh` to a maximum value of 18 (for the third case in the table above) is an implementation tradeoff between performance and general appeal. If you want access to higher `expthresh` values, let us know in the Issues section and we'll see what we can do.    
### `sparseon` ###    
Enables or disables the `SPARSE` representation. If both the `EXPLICIT` and `SPARSE` representations are disabled, an `EMPTY` set will be promoted directly to a `FULL` set. If `SPARSE` is enabled, the promotion from `SPARSE` to `FULL` will occur when the internal `SPARSE` representation's memory footprint would exceed that of the `FULL` version. Must be either either `0` (zero) or `1` (one). Zero means disabled, one is enabled.    
Defaults    
--------    
In all the examples above, the type `hll` has been used without adornment. This is a shortcut. In reality, the type can have up to 4 arguments. The defaults are shown as well.    
    hll(log2m=11, regwidth=5, expthresh=-1, sparseon=1)    
You can provide any prefix of the full list of arguments. The named arguments are the same as those mentioned in the 'Explanation of Parameters' section, above. If you'd like to change these (they're hardcoded in the source) look in `hll.c` for `DEFAULT_LOG2M` and that should get you there pretty quickly.    
Debugging    
---------    
`hll_print` is your friend! It will show you all the parameters of the `hll` as well as nicely-formatted representation of the contents.    
* * * * * * * * * * * * * * * * * * * * * * * * *    
Compatibility    
=============    
This module has been tested on:    
* **Postgres 9.4, 9.5, 9.6, 10, 11**    
If you end up needing to change something to get this running on another system, send us the diff and we'll try to work it in!    
Note: At the moment postgresql-hll does not work with 32bit systems.    
Build    
=====    
## With `rpmbuild` ##    
Specify versions:    
    export VER=2.12    
    export PGSHRT=11    
Make sure `Makefile` points to the correct `pg_config` for the specified version, since `rpmbuild` doesn't respect env variables:    
    PG_CONFIG = /usr/pgsql-11/bin/pg_config    
Create a tarball from the source tree:    
    tar cvfz postgresql${PGSHRT}-hll-${VER}.tar.gz postgresql-hll \    
        --transform="s/postgresql-hll/postgresql${PGSHRT}-hll/g"    
Execute rpmbuild:    
    rpmbuild -tb postgresql${PGSHRT}-hll-${VER}.tar.gz    
Install RPM:    
    rpm -Uv rpmbuild/RPMS/x86_64/postgresql11-hll-2.12.x86_64.rpm    
And if you want the debugging build:    
    rpm -Uv rpmbuild/RPMS/x86_64/postgresql11-hll-debuginfo-2.12.x86_64.rpm    
## From source ##    
If you aren't using the `pg_config` on your path (or don't have it on your path), specify the correct one to build against:    
        PG_CONFIG=/usr/pgsql-9.11/bin/pg_config make    
Or to build with what's on your path, just:    
        make    
If you wish to build with an alternate C/C++ compiler, say `gcc`, then you can specify it like so:    
        make CC=gcc CXX=gcc    
(This may be useful if an older `clang` is the default compiler.)    
Or for the debug build:    
        DEBUG=1 make    
Then install:    
        sudo make install    
Install    
=======    
After you've built and installed the artifacts, fire up `psql`:    
        postgres=# CREATE EXTENSION hll;    
        CREATE EXTENSION    
And then just verify it's there:    
        postgres=# \dx    
                            List of installed extensions    
          Name   | Version |   Schema   |            Description    
        ---------+---------+------------+-----------------------------------    
         hll     | 2.12    | public     | type for storing hyperloglog data    
         plpgsql | 1.0     | pg_catalog | PL/pgSQL procedural language    
        (2 rows)    
Tests    
=====    
Start a PostgreSQL server running in default port:    
    pg_ctl -D data -l logfile -c start    
    initdb -D data    
Run the tests:    
    make installcheck    
* * * * * * * * * * * * * * * * * * * * * * * * *    
The Importance of Hashing    
=========================    
In brief, it is absolutely crucial to hash inputs to the `hll`. A close approximation of uniform randomness in the inputs ensures that the error guarantees laid out in the original paper hold. In fact, the [canonical C++ implementation](http://code.google.com/p/smhasher/) of MurmurHash 3 is provided in this module to facilitate this input requirement. We've empirically determined that MurmurHash 3 is an excellent and fast hash function to use in conjunction with the `hll` module.    
The seed to the hash call must remain constant for all inputs to a given `hll`.  Similarly, if you plan to compute the union of two `hll`s, the input values must have been hashed using the same seed.    
For a good overview of the importance of hashing and hash functions when using probabilistic algorithms as well as an analysis of MurmurHash 3, see these four blog posts:    
* [K-Minimum Values: Sketching Error, Hash Functions, and You](http://blog.aggregateknowledge.com/2012/08/20/k-minimum-values-sketching-error-hash-functions-and-you/)    
* [Choosing a Good Hash Function, Part 1](http://blog.aggregateknowledge.com/2011/12/05/choosing-a-good-hash-function-part-1/)    
* [Choosing a Good Hash Function, Part 2](http://blog.aggregateknowledge.com/2011/12/29/choosing-a-good-hash-function-part-2/)    
* [Choosing a Good Hash Function, Part 3](http://blog.aggregateknowledge.com/2012/02/02/choosing-a-good-hash-function-part-3/)    
On Unions and Intersections    
===========================    
`hll`s have the useful property that the union of any number of `hll`s is equal to the `hll` that would have been populated by playing back all inputs to those N `hll`s into a single `hll`. Colloquially, we say that `hll`s have "lossless" unions because the same cardinality error guarantees that apply to a single `hll` apply to a union of `hll`s. This property combined with Postgres' aggregation functions (sliding window and so on) can power some pretty impressive analytics, like the number of unique visitors in a 30-day sliding window over the course of a year. See the `hll_union_agg` and `hll_union` functions.    
Using the [inclusion-exclusion principle](http://en.wikipedia.org/wiki/Inclusion%E2%80%93exclusion_principle) and the union function, you can also estimate the intersection of sets represented by `hll`s. Note, however, that error is proportional to the union of the two `hll`s, while the result can be significantly smaller than the union, leading to disproportionately large error relative to the actual intersection cardinality. For instance, if one `hll` has a cardinality of 1 billion, while the other has a cardinality of 10 million, with an overlap of 5 million, the intersection cardinality can easily be dwarfed by even a 1% error estimate in the larger `hll`s cardinality.    
For more information on `hll` intersections, see [this blog post](https://research.neustar.biz/2012/12/17/hll-intersections-2/).    
Storage formats    
===============    
`hll`s are stored in the database as byte arrays, which are packed according to the [storage specification, v1.0.0](https://github.com/aggregateknowledge/hll-storage-spec/blob/v1.0.0/STORAGE.md).    
It is a pretty trivial task to export these to and from Postgres and other applications by implementing a serializer/deserializer. We have provided several packages that provide such tools:    
* [java-hll](https://github.com/aggregateknowledge/java-hll)    
* [js-hll](https://github.com/aggregateknowledge/js-hll)    
* [go-hll](https://github.com/segmentio/go-hll)    
Acknowledgements    
================    
Original developers of `postgresql-hll` are [Ken Sedgwick](https://github.com/ksedgwic), Timon Karnezos, and [Rob Grzywinski](https://github.com/rgrzywinski).    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")