miss rate in 512-entry DRC is 4.5% and the average miss rate in 64-entry
DRC is 20.6%.
260260
0.01.02.03.04.05.0SpeedupApplication0.00.20.40.60.81.01.2Normalized IPCApplicationDRC 512DRC 128DRC 6402040DRC miss rate (%)ApplicationDRC 512DRC 64detection of ROP is proposed, where the attack is detected
by observing the behavior of programs and detecting the
gadget execution patterns [12]. Though not directly targetting
ROP exploits, there are solutions that attempt to use hardware
performance counters to detect malware and verify control ﬂow
integrity [13], [48].
Our work distinguishes from all the prior software based
and hardware based solutions. Our system tries to strengthen
control ﬂow diversity with native hardware support for im-
proved performance and instruction fetch efﬁciency by pre-
serving the instruction locality, while at the same time maxi-
mizing control ﬂow randomness.
IX. CONCLUSION
We have developed a micro-architectural solution to en-
hance dependability of software defending against code reuse
attack. Different from prior hardware based approaches for
mitigating the attacks, our approach is based on software
diversity and instruction location randomization. To address the
inefﬁciencies of memory system and instruction fetch caused
by instruction layout randomization, we propose a novel micro-
architecture design that can support native execution of ILR
software while at the same time preserve instruction fetch per-
formance. Using state-of-the-art architecture simulation frame-
work, XIOSim and a set of SPEC CPU2006 applications, we
show that our solution can achieve average speedup of 1.63
times over a straightforward hardware implementation of ILR.
Using our approach, direct execution of randomized binary
incurs only 2.1% IPC performance overhead. Currently, the
proposed idea is limited as single issue, in-order processor
which is widely used in the area of low-power consuming
embedded systems. However,
in the near future, we will
explore and extend the idea to the out-of-order superscalar
processor for the contemporary high performance computing
systems.
ACKNOWLEDGMENT
This work is supported in part by the National Science
Foundation (Grant No. CNS-1205708, DGE-1433817) and in
part by Memory Division, Samsung Electronics Co., Ltd.
REFERENCES
[1] H. Shacham, “The geometry of innocent ﬂesh on the bone: Return-
into-libc without function calls (on the x86),” in Proc. 14th ACM Conf.
Computer and Communications Security, 2007, pp. 552–561.
[2] E. Buchanan, R. Roemer, H. Shacham, and S. Savage, “When good in-
structions go bad: Generalizing return-oriented programming to RISC,”
in Proc. 15th ACM Conf. Computer and Communications Security,
2008, pp. 27–38.
[3] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi, H. Shacham,
and M. Winandy, “Return-oriented programming without returns,” in
Proc. 17th ACM Conf. Computer and Communications Security, 2010,
pp. 559–572.
[4] S. Checkoway, A. J. Feldman, B. Kantor, J. A. Halderman, E. W. Felten,
and H. Shacham, “Can DREs provide long-lasting security? the case
of return-oriented programming and the avc advantage,” in Proc. Conf.
on Electronic Voting Eechnology/Workshop on Trustworthy Elections,
2009, pp. 6–21.
[5] T. Dullien, T. Kornau, and R.-P. Weinmann, “A framework for auto-
mated architecture-independent gadget search,” in Proc. 4th USENIX
Conf. on Offensive Technologies, 2010, pp. 1–10.
[6] R. Hund, T. Holz, and F. C. Freiling, “Return-oriented rootkits: bypass-
ing kernel code integrity protection mechanisms,” in Proc. 18th Conf.
on USENIX Security Symp., 2009, pp. 383–398.
Fig. 15. Dynamic power overhead of DRC (128 entries) for SPEC CPU2006
benchmarks. Y-axis shows percentages of DRC dynamic power over CPU
dynamic power. Power modeling is based on XIOSim and integrated McPAT.
The average dynamic power overhead is 0.18% of the CPU dynamic power.
VIII. RELATED WORK
A. Software Based Approaches
Address Space Layout Randomization (ASLR) is a scheme
which hinders the original
location of code and data ob-
jects [34], [35], [36], [37]. Some of these approaches ran-
domize the base addresses of process images, and some of
them randomize even at the basic block level (e.g., the in
place randomization [10]). Some of them use virtual machine
monitor to scramble the instruction addresses [38], and some
of them use binary rewritters to achieve this [39]. Compared
with these software based ASLR methods, our proposed mech-
anism guarantees more efﬁcient randomization for the program
address space with the help of micro-architectural support.
Instruction Set Randomization (ISR) is also widely used
software approach to prevent code injection attack. In ISR, the
underlying system instructions [40], [8] are encrypted by use
of a random key set. The encrypted instructions are decrypted
only before the fetch stage of the processor pipeline. Although
ISR provides effective security solution for code injection
attack, leakage of the encryption key or succeed in guessing
procedure for the key may cause failure in the protection [41].
In addition, ISR is not designed to mitigate ROP attacks.
Randomization can be applied not only for instructions, but
also for the program data. For example, all pointers that are
resides in memory can be encrypted before they are used [42];
decryptions are performed only before the data is needed for
the processors. Recently, XORing the data with random mask
has been proposed to support probabilistic protection to cope
with the memory exploiting [43], [44].
Multi-variant system which is proposed by Cox et al. is
also based on software [45]. In their work, N-variant explores
diversiﬁcation to enhance the security. The adversary should
subvert all the running variants simultaneously which is hard
to achieve. In this system, different ISAs are employed and
synchronized at system call level while our solution random-
izes the instruction addresses.
B. Hardware Based Approach
While there is a considerate amount of research from
software approaches to achieve diversiﬁcation, less attention
has paid on the hardware approaches. Orthrus [46] is one of
the examples from hardware perspective. It protects software
integrity by exploiting multi-core architecture by executing
n versions using different processor cores. Kayaalp et al.
describe a hardware based protection mechanism that enforces
simple control ﬂow rules at the function granularity to disallow
arbitrary control ﬂow transfers from one function into the
middle of another function
[47], Also, a signature-based
261261
0.000.100.200.30Power overhead (%)Application[7] The metasploit project. [Online]. Available: http://www.metasploit.com/
[8] G. S. Kc, A. D. Keromytis, and V. Prevelakis, “Countering code-
injection attacks with instruction-set randomization,” in Proc. 10th ACM
Conf. Computer and Communications Security, 2003, pp. 272–280.
J. D. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. W. Davidson,
“ILR: Where’d my gadgets go?” in Proc. IEEE Symp. Security and
Privacy, 2012, pp. 571–585.
[9]
[10] V. Pappas, M. Polychronakis, and A. D. Keromytis, “Smashing the
gadgets: Hindering return-oriented programming using in-place code
randomization,” in Proc. IEEE Symp. on Security and Privacy, 2012,
pp. 601–615.
[11] M. Kayaalp, M. Ozsoy, N. Abu-Ghazaleh, and D. Ponomarev, “Branch
regulation: low-overhead protection from code reuse attacks,” SIGARCH
Comput. Archit. News, vol. 40, no. 3, pp. 94–105, 2012.
[12] M. Kayaalp, S. T, J. Nomani, N. Abu-Ghazaleh, and D. Ponomarev,
“Scrap: Architecture for signature-based protection from code reuse
attacks,” in Proc. IEEE Int’l Symp. on High Performance Computer
Architecture, 2013, pp. 258–269.
J. Demme, M. Maycock, J. Schmitz, A. Tang, A. Waksman, S. Sethu-
madhavan, and S. Stolfo, “On the feasibility of online malware detection
with performance counters,” in Proc. 40th Annual Int’l Symp. on
Computer Architecture, 2013, pp. 559–570.
[13]
[14] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh,
“On the effectiveness of address-space randomization,” in Proc. 11th
ACM Conf. on Computer and Communications Security, 2004, pp. 298–
307.
[15] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and
A.-R. Sadeghi, “Just-in-time code reuse: On the effectiveness of ﬁne-
grained address space layout randomization,” in Proc. of the 2013 IEEE
Symp. on Security and Privacy, 2013, pp. 574–588.
[16] S. Kanev, G.-Y. Wei, and D. Brooks, “Xiosim: power-performance
modeling of mobile x86 cores,” in Proc. 2012 ACM/IEEE Int’l Symp.
on Low Power Electronics and Design, 2012, pp. 267–272.
[17] G. Loh, S. Subramaniam, and Y. Xie, “Zesto: A cycle-level simulator
for highly detailed microarchitecture exploration,” in Proc. IEEE Int’l
Symp. on Performance Analysis of Systems and Software, 2009, pp.
53–64.
[18] Hex-rays.
[Online].
Available:
http://www.hex-
rays.com/products/ida/index.shtml
[19] B. De Sutter, B. De Bus, K. De Bosschere, P. Keyngnaert, and
B. Demoen, “On the static analysis of indirect control transfers in
binaries,” 2000, pp. 1013–1019.
[20] B. De Sutter, B. De Bus, and K. De Bosschere, “Link-time binary
rewriting techniques for program compaction,” ACM Transactions on
Programming Languages and Systems, vol. 27, no. 5, pp. 882–945,
2005.
[21] M.
Madou.
Birma:
architecture/matias
the
Avail-
http://lib.ugent.be/fulltxt/RUG01/000/777/296/RUG01-
[Online].
Binary
madou.
mips
able:
000777296 2010 0001 AC.pdf
rewriter
for
[22] C. de Dinechin, “C++ exception handling for ia64.” in Proc. First
Workshop on Industrial Experiences with Systems Software, 2000, pp.
67–76.
J.-C. Laprie, “Dependability - its attributes, impairments and means,”
in Predictably Dependable Computing Systems, ser. ESPRIT Basic
Research Series, B. Randell, J.-C. Laprie, H. Kopetz, and B. Littlewood,
Eds. Springer Berlin Heidelberg, 1995, pp. 3–18.
[23]
[24] Libtiff tifffetchshortpair remote buffer overﬂow vulnerability. [Online].
Available: http://www.securityfocus.com/bid/19283
J. Salwan.
storm.org/project/ROPgadget
(2012) ROPgadget.
[Online]. Available: http://shell-
[25]
[27]
[28]
[29]
[26] A. One, “Smashing the stack for fun and proﬁt,” Phrack, vol. 7, no. 49,
1996.
J. Pincus and B. Baker, “Beyond stack smashing: Recent advances in
exploiting buffer overruns,” IEEE Security & Privacy, vol. 2, no. 4, pp.
20–27, 2004.
J. Demme, R. Martin, A. Waksman, and S. Sethumadhavan, “A quan-
titative, experimental approach to measuring processor side-channel
security,” IEEE Micro, vol. 33, no. 3, pp. 68–77, 2013.
J. Demme, R. Martin, A. Waksman, and S. Sethumadhavan, “Side-
channel vulnerability factor: A metric for measuring information leak-
age,” in Proc. 39th Annual Int’l Symp. on Computer Architecture, 2012,
pp. 106–117.
[30] T. Zhang, F. Liu, S. Chen, and R. B. Lee, “Side channel vulnerability
metrics: The promise and the pitfalls,” in Proc. 2nd Int’l Workshop on
Hardware and Architectural Support for Security and Privacy, 2013,
pp. 2:1–2:8.
[31] Standard Performance Evaluation Corporation. Spec cpu2006. [Online].
Available: https://www.spec.org
[32] S. Li, J. H. Ahn, R. D. Strong, J. B. Brockman, D. M. Tullsen, and
N. P. Jouppi, “McPAT: An integrated power, area, and timing modeling
framework for multicore and manycore architectures,” in Proc. 42nd
Annual IEEE/ACM Int’l Symp. on Microarchitecture, 2009, pp. 469–
480.
[33] P. Rosenfeld, E. Cooper-Balis, and B. Jacob, “Dramsim2: A cycle ac-
curate memory system simulator,” IEEE Comput. Archit. Lett., vol. 10,
no. 1, pp. 16–19, 2011.
[34] PaX Team, “PaX address space layout randomization (ASLR),” 2003.
[35] S. Bhatkar, D. C. DuVarney, and R. Sekar, “Address obfuscation: An
efﬁcient approach to combat a broad range of memory error exploits,”
in Proc. 12th USENIX Security Symposium, 2003, pp. 105–120.
[36] S. Bhatkar, R. Sekar, and D. C. DuVarney, “Efﬁcient techniques for
comprehensive protection from memory error exploits,” in Proc. 14th
USENIX Security Symposium, 2005, pp. 255–270.
[37] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning, “Address Space Layout
Permutation (ASLP): Towards ﬁne-grained randomization of commod-
ity software,” in Proc. 22nd Annual Computer Security Applications
Conf., 2006, pp. 339–348.
[38] L. Davi, A.-R. Sadeghi, and M. Winandy, “Ropdefender: a detection tool
to defend against return-oriented programming attacks,” in Proc. 6th
ACM Symp. on Information, Computer and Communications Security,
2011, pp. 40–51.
[39] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin, “Binary stirring:
Self-randomizing instruction addresses of legacy x86 binary code,” in
Proc. ACM Conf. Computer and Communications Security, 2012, pp.
157–168.
[40] E. G. Barrantes, D. H. Ackley, T. S. Palmer, D. Stefanovic, and D. D.
Zovi, “Randomized instruction set emulation to disrupt binary code
injection attacks,” in Proc. 10th ACM Conf. Computer and Communi-
cations Security, 2003, pp. 281–289.
[41] A. N. Sovarel, D. Evans, and N. Paul, “Where’s the FEEB? the
effectiveness of instruction set randomization,” in Proc. 14th Conf. on
USENIX Security Symp., 2005, pp. 10–25.
[42] C. Cowan, S. Beattie, J. Johansen, and P. Wagle, “PointGuardTM:
Protecting pointers from buffer overﬂow vulnerabilities,” in Proc. 12th
USENIX Security Symp, 2003, pp. 91–104.
[43] C. Cadar, P. Akritidis, M. Costa, J.-P. Martin, and M. Castro, “Data
randomization,” Tech. Rep. MSR-TR-2008-120, 2008.
[44] S. Bhatkar and R. Sekar, “Data space randomization,” in Proc. Int. Conf.
Detection of Intrusions and Malware, and Vulnerability Assessment,
2008, pp. 1–22.
[45] B. Cox, D. Evans, A. Filipi, J. Rowanhill, W. Hu, J. Davidson, J. Knight,
A. Nguyen-Tuong, and J. Hiser, “N-variant systems: a secretless frame-
work for security through diversity,” in Proc. 15th Conf. on USENIX
Security Symposium, 2006, pp. 105–120.
[46] R. Huang, D. Y. Deng, and G. E. Suh, “Orthrus: Efﬁcient software
integrity protection on multi-cores,” SIGARCH Comput. Archit. News,
vol. 38, no. 1, pp. 371–384, 2010.
[47] M. Kayaalp, M. Ozsoy, N. Abu-Ghazaleh, and D. Ponomarev, “Branch
regulation: low-overhead protection from code reuse attacks,” in Proc.
39th Int’l Symp. on Computer Architecture, 2012, pp. 94–105.
[48] Y. Xia, Y. Liu, H. Chen, and B. Zang, “CFIMon: Detecting violation
of control ﬂow integrity using performance counters,” in Proc. 42nd
Annual IEEE/IFIP Int’l Conf. on Dependable Systems and Networks,
2012, pp. 1–12.
262262