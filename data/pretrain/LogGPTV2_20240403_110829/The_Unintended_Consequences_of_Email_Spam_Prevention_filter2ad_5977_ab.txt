causing terms and is a valid SPF record. badspf contains 20 DNS query-causing
terms, and is therefore invalid. treespf contains 6 DNS query-causing terms, each
of which causes an additional 6 DNS queries, for a total of 42 induced queries,
but only 6 DNS query-causing terms. We describe each of these conﬁgurations in
more detail below. All three SPF conﬁgurations ultimately evaluate to fail so
that our email will not be delivered, but only after the entire SPF check ﬁnishes.
goodspf. This record, shown in the lower left of Fig. 1, contains ﬁve include
statements, that redirect to i.goodspf.emaildns.net for i from 1 through 5.
The SPF for record for all i.goodspf.emaildns.net is “v=spf1 -all”. An
include does not result in an immediate fail for the main query if the included
SPF check fails [15, Sect. 5.2]. These include terms can be thought of as SPF
“dead ends”. Each included check fails, but the main SPF check continues, check-
ing all include terms before making its ﬁnal decision.
The goodspf conﬁguration is meant to establish a baseline for SPF behavior,
ensuring that the record containing fewer than 10 DNS query-causing terms is
processed as we expect it to be: one DNS query for the main SPF record, and
one induced query for each of the ﬁve included SPF records.
badspf. This record has 20 include statements that each cause a single DNS
query (to i.badspf.emaildns.net for i from 1 through 20). Each of these
“sub-records” is “v=spf1 -all”. It is therefore non-compliant with the SPF
speciﬁcation, which restricts the number of DNS query-causing terms to 10. We
use the badspf record to check whether this limit of 10 queries is enforced at all
— if it is, we would expect to get 10 induced queries per badspf email sent, and
if it is not, then we would expect to get 20.
treespf. This record, shown graphically in Fig. 2, allows us to gain insights on
how the 10 DNS-query-causing statements is enforced. While the standard limits
the number of query-causing terms in an SPF record to 10, it does not limit the
total number of SPF DNS queries made, and therefore treespf is RFC-compliant.
The treespf conﬁguration is compliant the standard’s limitation of 10 query-
causing terms, but causes many more than 10 queries, by using recursively-
called nested includes. This record, shown graphically in Fig. 2, allows us to gain
insight on how the limit of 10 DNS query-causing statements is enforced. While
the standard limits the number of query-causing terms in an SPF record to 10, it
The Unintended Consequences of Email Spam Prevention
163
query:
treespf.emaildns.net
1
2
...
6
.treespf.emaildns.net
1a
1b
...
1f
2a
2b
...
2f
6a
6b
...
6f
.treespf.emaildns.net
Fig. 2. In treespf, one main query directly induces 6 subqueries, each of which induces
6 more subqueries, for a total of 42 induced subqueries.
does not limit the total number of DNS queries made. The treespf conﬁguration is
RFC-compliant, as it contains fewer than 10 DNS query-causing terms. However,
each of these terms causes more than one DNS query, by using an “include”
statement to cause a recursive evaluation of an entirely new SPF query. The
top level *.treespf.emaildns.net record contains includes to six other SPF
records: i.treespf.emaildns.net for i from 1 through 6. Then each of those
records contains includes to six additional records: 1a.treespf.emaildns.net
through 1f.treespf.emaildns.net, for example. A total of 42 DNS queries are
made within the SPF record, however, each individual record contains exactly
six (fewer than 10) query-causing statements.
3.4 Experimental Procedure
We next describe how we performed our measurement.
Scanning for MTAs. We used zmap [5] to perform a TCP SYN scan to ﬁnd
services listening on port 25 over IPv4. For each shard of 224 IP addresses, we
ﬁrst scanned the entire shard, collecting all IP addresses that responded to our
TCP SYN on port 25 and saving them to a ﬁle. This process took roughly ﬁve
minutes per shard. Note that we did not complete our entire IPv4 scan. Our
results are an initial ﬁnding that indicate how recursive SPF check works. (We
discuss our results and their limitations in Sect. 4.)
Finding valid recipient email addresses. This step uses a heuristic to get
email addresses that are likely serviced by the MTA. We used usernames such as
“noreply” or “postmaster”, and we learned potential domains through a whois
lookup and using a reverse DNS lookup. We also removed subdomains from each
of these domain guesses as additional possible options. We attempt to begin
delivery to each combination of these usernames and domains until we get one
that the MTA recognizes.
Sending emails and logging induced DNS queries. We encode the informa-
tion about the recipient MTA in our sender email address. For instance, if send-
ing to an MTA at IP address 1.2.3.4 and using the goodspf conﬁguration, we
would send our email from researcher@1-2-3-4.25.goodspf.emaildns.net.
(The “25” in the address represents the port number, and was included to allow
expanding our study to more ports). We then send an email to addresses we
guessed in that domain. If we do not receive a 250 OK SMTP status response,
then we try the next email address that our heuristic provides. Our email sender
handles in parallel addresses for 300 MTAs.
164
S. Scheﬄer et al.
Once we found a working email address for the MTA, we sent two additional
emails, so that in total an MTA receives three emails, one for each SPF con-
ﬁguration. Throughout this whole process, we log all DNS queries received on
emaildns.net’s authoritative name, and we retained all of our SMTP logs.
4 Analysis of Induced DNS Queries
We broke our scan into 256 shards, based on the 8 most signiﬁcant bits of the
IP address. The scan ran from September 11th, 2017 through September 22,
2017 and covered IP addresses from 0.0.0.0 through 34.255.255.255. Although
our results are partial, we believe that there are valuable insights to be gained
from the portion of the scanned address space.
4.1 SPF Deployment
We categorize the queries that our authoritative name server receives into three
bins: (1) “main queries”, which are TXT queries for a domain that we sent an email
from, for example, 1-2-3-4.25.badspf.emaildns.net; (2) “induced queries”,
which are queries induced by include statements within our main SPF record,
such as 16.badspf.emaildns.net; and (3) other, miscellaneous queries.
SPF as DoS vector. Checking an SPF record with many nested includes could
cause undue load on the SPF-validating MTA, causing it to make far more DNS
queries per email than it should. This could result in degraded performance or
complete denial of service. Since SPF places a limit on the number of query-
causing terms in an SPF record, rather than the total number of queries made,
an SPF record with many include statements can recursively cause queries to
any include statements in those records, and so on. treespf is a proof of concept
of this: it induces 42 queries even though it contains only 10 query-causing terms.
A more dangerous version of this would involve mutually recursive SPF
records, shown in Fig. 3. Attackers could “bounce between” recursive calls to
look up each SPF record, and each call would cause 9 additional include queries
to an unrelated victim nameserver. However, this was not tested as part of this
work.
SPF Conﬁguration Results. Our results are summarized in Table 1.
As our baseline measurement to ensure the SPF check does what we expect
when it sees a well-formed, typical SPF record, our goodspf record should
induce 5 queries. We received 4.87 induced queries per main goodspf query
(39583/8125), which is about what we expected.
To ensure that the SPF check correctly halts at 10 DNS-query causing terms
in a single record, our badspf record attempted to induce 20 queries, only 10 of
which should actually occur. Our badspf record on average induced 7.79 queries
per main query (136881/17562). We received approximately the same number
of goodspf and treespf queries, but double that number of badspf queries. We
believe that the error caused by querying badspf causes some MTA software to
The Unintended Consequences of Email Spam Prevention
165
query:
evilspf.emaildns.net
A
B
.evilspf.emaildns.net
a1
a2
...
a9
b1
b2
...
b9
.victim.com
Fig. 3. A mutually recursive chain of SPF include statements could cause an inﬁnite
number of queries to victim.com.
Table 1. Expected and actual ratios for the three diﬀerent SPF conﬁgurations used.
SPF conﬁguration Query response ratio Expected response ratio
goodspf
badspf
treespf
4.87 (39583/8125)
5.0
7.79 (136881/17562) 10.0
34.3 (280734/8192)
either 42.0 or 10.0
query the record again after a few minutes, indicating that an SPF permerror
may be incorrectly treated as a temperror by some implementations.
Our main result is the ratio of induced treespf queries. As described in
Sect. 3.3, the treespf conﬁguration contains only 6 DNS query-causing terms
(below the RFC-mandated limit of 10), but each of those terms is an include
statement that causes 6 additional DNS queries. If SPF performed a once-per-
email-address check that halted DNS queries after 10 total queries, then we would
expect to receive the same number of induced queries as in badspf. However, if
the check is performed separately on all recursively-checked include statements
rather than once per email address, we would expect to get 42 induced queries
per main query. This conforms to the SPF RFC, but goes against the RFC’s
stated goal of avoiding unreasonable load on the DNS. We received 34.3 induced
queries per main treespf query (280734/8192), clearly indicating that many SPF
conﬁgurations perform the check per-include rather than once per email address.
It was very common for the diﬀerent induced queries caused by the same
main query to come from diﬀerent resolvers. Because of this, it was infeasible
to tie induced queries (e.g., 3b.treespf.emaildns.net) with the exact main
query that caused it (e.g. 1-2-3-4.25.treespf.emaildns.net). Attempts at
approximating the relationship between induced queries and main queries based
on the timestamp and querying DNS server were very imprecise. We limit our