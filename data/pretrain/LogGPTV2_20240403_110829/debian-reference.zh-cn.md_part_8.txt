用了”strictatime”选项，即使简单的文件读操作都伴随着更新atime属性这个耗时的写操作。但是atime属性
除了mbox(5)文件以外却很少用到。详情请看mount(8)。
使用touch(1)命令修改已存在文件的时间戳。
对于时间戳，在非英语区域（“fr_FR.UTF-8”），ls命令输出本地化字符串。
Debian参考手册 12/233
$ LANG=C ls -l foo
-rw-rw-r-- 1 penguin penguin 0 Oct 16 21:35 foo
$ LANG=en_US.UTF-8 ls -l foo
-rw-rw-r-- 1 penguin penguin 0 Oct 16 21:35 foo
$ LANG=fr_FR.UTF-8 ls -l foo
-rw-rw-r-- 1 penguin penguin 0 oct. 16 21:35 foo
提示
参考第 9.3.4 节自定义“ls -l”输出。
1.2.7 链接
有两种方法把一个文件“foo”链接到一个不同的文件名“bar”。
• 硬链接
– 对现有文件重复名称
–“ln foo bar”
• 符号链接或symlink
– 通过名字指向另一个文件的特殊文件
–“ln -s foo bar”
请参阅下面的示例，rm命令结果中链接数的变化和细微的差别。
$ umask 002
$ echo ”Original Content” > foo
$ ls -li foo
1449840 -rw-rw-r-- 1 penguin penguin 17 Oct 16 21:42 foo
$ ln foo bar # hard link
$ ln -s foo baz # symlink
$ ls -li foo bar baz
1449840 -rw-rw-r-- 2 penguin penguin 17 Oct 16 21:42 bar
1450180 lrwxrwxrwx 1 penguin penguin 3 Oct 16 21:47 baz -> foo
1449840 -rw-rw-r-- 2 penguin penguin 17 Oct 16 21:42 foo
$ rm foo
$ echo ”New Content” > foo
$ ls -li foo bar baz
1449840 -rw-rw-r-- 1 penguin penguin 17 Oct 16 21:42 bar
1450180 lrwxrwxrwx 1 penguin penguin 3 Oct 16 21:47 baz -> foo
1450183 -rw-rw-r-- 1 penguin penguin 12 Oct 16 21:48 foo
$ cat bar
Original Content
$ cat baz
New Content
硬链接可以在同一个文件系统内创建，并共用同一个inode号，由 ls(1)带“-i”选项显示。
符号链接总是名义上具有“rwxrwxrwx”的文件访问权限，如上面例子所示，实际的有效访问权限由它所指向的文件
确定。
小心
除非你有非常好的理由，否则不要创建一个复杂的符号链接或硬链接通常是个好主意。符号链接的逻辑组合
可能导致文件系统噩梦般的无限循环。
Debian参考手册 13/233
注意
通常使用符号链接比使用硬链接更合适，除非你有一个好理由使用硬链接。
“.”目录链接到它所在的目录，因此任何新建目录的链接数从2开始。“..”目录链接到父目录，因此目录的链接数
随着新的子目录的创建而增加。
如果你刚从Windows迁移到Linux，你很快将清楚Unix的文件名链接相较于Windows最相近的“快捷方式”是多么
精心设计的。由于它是在文件系统中实现的，应用无法看到链接文件跟原始文件之间的区别。在硬链接这种情况，这
真的是毫无差别。
1.2.8 命名管道（先进先出）
命名管道是一个像管道一样的文件。你把内容放进了文件，它从另一端出来。因此，它被称为FIFO，即先进先出：你
从管道这端先放进去的东西会从另一端先出来。
如果对一个命名管道进行写入操作，写入的过程不会被终止，直到写入的信息从管道中被读取出来。读取过程将会持
续到没有信息可以读取为止。管道的大小始终是零，它不存储数据，它只是连接两个过程，像shell提供的” 1|2”语
法功能一样。然而，一旦管道有了名称，这两个进程就可以不必在同一个命令行，甚至由同一个用户运行。管道是
UNIX的一个非常有影响力的创新。
尝试下列例子
$ cd; mkfifo mypipe
$ echo ”hello” >mypipe & # put into background
[1] 8022
$ ls -l mypipe
prw-rw-r-- 1 penguin penguin 0 Oct 16 21:49 mypipe
$ cat mypipe
hello
[1]+ Done echo ”hello” >mypipe
$ ls mypipe
mypipe
$ rm mypipe
1.2.9 套接字
套接字被广泛应用于所有的互联网通信，数据库和操作系统本身。它类似于命名管道（FIFO）并且允许进程之间甚至
不同计算机之间进行信息交换。对于套接字，这些进程不需要在同一时间运行，也不需要是同一个父进程的子进程。
它是进程间通信（IPC）的一个节点。信息的交换可能会通过网络发生在不同主机之间。最常见的两种是互联网套接
字和UNIX域套接字。
提示
通过”netstat -an”命令可以很方便的查看系统已经打开了哪些套接字。
1.2.10 设备文件
设备文件包括系统的物理设备和虚拟设备，如硬盘、显卡、显示屏、键盘。虚拟设备的一个例子是控制台，用
“/dev/console”来描述。
设备文件有两种类型。
• 字符设备
– 每次访问一个字符
Debian参考手册 14/233
– 一个字符等于一个字节
– 如键盘、串口…
• 块设备
– 通过更大的单元–块，进行访问
– 一个块>一个字节
– 如硬盘等…
你可以读写块设备文件，尽管该文件可能包含二进制数据，读取后显示出无法理解的乱码。向文件写入数据，有时可
以帮助定位硬件连接故障。比如，你可以将文本文件导入打印机设备“/dev/lp0”，或者将调制解调命令发送到合适
的串口“/dev/ttyS0”。但是，除非这些操作都小心完成，否则可能会导致一场大灾难。所以要特别小心。
注意
常规访问打印机，使用 lp(1)。
设备的节点数可以通过执行 ls(1)得到，如下所示。
$ ls -l /dev/sda /dev/sr0 /dev/ttyS0 /dev/zero
brw-rw---T 1 root disk 8, 0 Oct 16 20:57 /dev/sda
brw-rw---T+ 1 root cdrom 11, 0 Oct 16 21:53 /dev/sr0
crw-rw---T 1 root dialout 4, 64 Oct 16 20:57 /dev/ttyS0
crw-rw-rw- 1 root root 1, 5 Oct 16 20:57 /dev/zero
• ”/dev/sda”的主设备号是8，次设备号是0。它可以被 disk群组的用户读写。
• ”/dev/sr0”的主设备号是11，次设备号是0。它可以被 cdrom群组的用户读写。
• ”/dev/ttyS0”的主设备号是4，次设备号是64。它可以被 dailout群组的用户读写。
• ”/dev/zero”的主设备号是1，次设备号是5。它可以被任意用户读写。
在现代Linux系统中，处在”/dev”之下的文件系统会自动被 udev()机制填充。
1.2.11 特殊设备文件
还有一些特殊的设备文件。
设备文件 操作 响应描述
/dev/null 读取 返回“文件结尾字符（EOF）“
/dev/null 写入 无返回（一个无底的数据转存深渊）
/dev/zero 读取 返回”\0空字符”（与ASCII中的数字0不同）
从真随机数产生器返回一个随机字符，供应真熵（缓
/dev/random 读取
慢）
/dev/urandom 读取 从能够安全加密的伪随机数产生器返回一个随机字符
/dev/full 写入 返回磁盘已满（ENOSPC）错误
Table1.10: 特殊设备文件列表
这些特别设备文件经常和shell数据重定向联合使用（参考第 1.5.8 节）。
Debian参考手册 15/233
1.2.12 procfs 和 sysfs
procfs和sysfs两个伪文件系统，分别加载于”/proc”和”/sys”之上，将内核中的数据结构暴露给用户空间。或者说，
这些条目是虚拟的，他们打开了深入了解操作系统运行的方便之门。
目录”/proc”为每个正在运行的进程提供了一个子目录，目录的名字就是进程标识符（PID）。需要读取进程信息的系
统工具，如 ps()，可以从这个目录结构获得信息。
”/proc/sys”之下的目录，包含了可以更改某些内核运行参数的接口。（你也可以使用专门的 sysctl()命令修改，
或者使用其预加载/配置文件”/etc/sysctl.conf”。）
当人们看到这个特别大的文件”/proc/kcore”时，常常会惊慌失措。这个文件于你的的电脑内存大小相差不多。它
被用来调试内核。它是一个虚拟文件，指向系统内存，所以不必担心它的大小。
”/sys”以下的目录包含了内核输出的数据结构，它们的属性，以及它们之间的链接。它同时也包含了改变某些内核
运行时参数的接口。
参考”proc.txt(.gz)”，”sysfs.txt(.gz)”，以及其他相关的Linux内核文档（”/usr/share/doc/linux-doc-*/Documentation/filesystems/*”），
这些文件由 linux-doc-*软件包提供。
1.2.13 tmpfs
tmpfs是一个临时文件系统，它的文件都保存在虚拟内存中。必要时，位于内存页缓存的tmpfs数据可能被交换到硬盘
中的交换分区。
系统启动早期阶段，”/run”目录挂载为tmpfs。这样即使”/”挂载为只读，它也是可以被写入的。它为过渡态文件提
供了新的存储空间，同时也替代了FilesystemHierarchyStandar2.3版中说明的目录位置：
• ”/var/run”→”/run”
• ”/var/lock”→”/run/lock”
• ”/dev/shm”→”/run/shm”
参考”tmpfs.txt(.gz)”,文件位于Linux内核文档（”/usr/share/doc/linux-doc-*/Documentation/filesystems/*”）
目录之下，由软件包 linux-doc-*提供。
1.3 Midnight Commander (MC)
MidnightCommander(MC)是一个Linux终端或其它终端环境下的GNU版”瑞士军刀”。它为新手们提供了一个菜单
式样的终端使用体验，这更易于学习运用标准的Unix命令。
你可能需要按照下面的命令来安装标题为” mc”的MidnightCommander包.
$ sudo apt-get install mc
使用mc(1)命令那个来浏览Debian系统。这是最好的学习方式。请使用光标键和回车键来翻看一些感兴趣的内容。
• ”/etc”及其子目录
• ” /var/log”及其子目录
• ” /usr/share/doc”及其子目录
• ” /usr/sbin”和” /usr/bin”
Debian参考手册 16/233
1.3.1 自定义 MC
为了在退出MC的时候更改目录并cd到其它目录，我建议修改”~/.bashrc”包含一个由mc包提供的脚本。
. /usr/lib/mc/mc.sh
查看 mc(1)(在”-P”选项里)的原因。(如果你不能理解我这里说所讲的，你可以稍后回头再看)
1.3.2 启动 MC
MC可以这样启动起来。
$ mc
MC通过菜单覆盖了所有的文件操作，因此而让用户更省心省力。只需要按F1就可以跳转到帮助界面。你只需要按光
标键和功能键就可以使用MC。
注意
某些终端比如 gnome-terminal(1)，功能键的按键触发消息可能会被终端程序截取。在 gnome-terminal 里，
可以通过”首选项”→“通用”->”快捷键”菜单设置来禁用这些特征。
如果你遇到字符编码问题，显示出来都是乱码，通过添加”-a”到MC命令行或许有助于避免此类问题。
如果这样不能解决MC中的显示问题，可以参考第 9.5.6 节.