### 1.2.6 访问时间和修改时间

使用 `strictatime` 选项时，即使简单的文件读操作也会伴随着更新访问时间（`atime`）属性的写操作。然而，除了 `mbox(5)` 文件外，`atime` 属性很少被使用。更多详情请参阅 `mount(8)`。

要修改现有文件的时间戳，可以使用 `touch(1)` 命令。

在非英语区域（例如 `fr_FR.UTF-8`），`ls` 命令会输出本地化的字符串表示时间戳。以下是在不同语言环境下的示例：

```bash
$ LANG=C ls -l foo
-rw-rw-r-- 1 penguin penguin 0 Oct 16 21:35 foo

$ LANG=en_US.UTF-8 ls -l foo
-rw-rw-r-- 1 penguin penguin 0 Oct 16 21:35 foo

$ LANG=fr_FR.UTF-8 ls -l foo
-rw-rw-r-- 1 penguin penguin 0 oct. 16 21:35 foo
```

提示：参考第 9.3.4 节自定义 `ls -l` 输出。

### 1.2.7 链接

有两种方法将一个文件 `foo` 链接到另一个文件名 `bar`：

- **硬链接**：对现有文件重复名称。
  - 命令：`ln foo bar`
  
- **符号链接（软链接）**：通过名字指向另一个文件的特殊文件。
  - 命令：`ln -s foo bar`

以下是示例，展示了 `rm` 命令结果中链接数的变化和细微差别：

```bash
$ umask 002
$ echo "Original Content" > foo
$ ls -li foo
1449840 -rw-rw-r-- 1 penguin penguin 17 Oct 16 21:42 foo

$ ln foo bar  # 硬链接
$ ln -s foo baz  # 符号链接
$ ls -li foo bar baz
1449840 -rw-rw-r-- 2 penguin penguin 17 Oct 16 21:42 bar
1450180 lrwxrwxrwx 1 penguin penguin 3 Oct 16 21:47 baz -> foo
1449840 -rw-rw-r-- 2 penguin penguin 17 Oct 16 21:42 foo

$ rm foo
$ echo "New Content" > foo
$ ls -li foo bar baz
1449840 -rw-rw-r-- 1 penguin penguin 17 Oct 16 21:42 bar
1450180 lrwxrwxrwx 1 penguin penguin 3 Oct 16 21:47 baz -> foo
1450183 -rw-rw-r-- 1 penguin penguin 12 Oct 16 21:48 foo

$ cat bar
Original Content
$ cat baz
New Content
```

硬链接可以在同一个文件系统内创建，并共用同一个 inode 号，由 `ls(1)` 的 `-i` 选项显示。符号链接总是名义上具有 `rwxrwxrwx` 的文件访问权限，实际的有效访问权限由它所指向的文件确定。

小心：除非有非常好的理由，否则不要创建复杂的符号链接或硬链接。符号链接的逻辑组合可能导致文件系统的无限循环。

注意：通常使用符号链接比使用硬链接更合适，除非有特别的理由使用硬链接。

`"."` 目录链接到它所在的目录，因此任何新建目录的链接数从 2 开始。`".."` 目录链接到父目录，因此目录的链接数随着新的子目录的创建而增加。

如果你刚从 Windows 迁移到 Linux，你会发现 Unix 的文件名链接相较于 Windows 的“快捷方式”更加精心设计。由于它是在文件系统中实现的，应用程序无法看到链接文件与原始文件之间的区别。在硬链接的情况下，这种区别是不存在的。

### 1.2.8 命名管道（FIFO）

命名管道是一个类似于管道的文件。你把内容放进去，它会从另一端出来。因此，它被称为 FIFO，即先进先出：你从管道这端先放进去的东西会从另一端先出来。

如果对一个命名管道进行写入操作，写入的过程不会被终止，直到写入的信息从管道中被读取出来。读取过程将会持续到没有信息可以读取为止。管道的大小始终为零，它不存储数据，只是连接两个进程，像 shell 提供的 `1|2` 语法功能一样。一旦管道有了名称，这两个进程就可以不必在同一命令行甚至由同一个用户运行。管道是 UNIX 的一个重要创新。

尝试以下示例：

```bash
$ cd; mkfifo mypipe
$ echo "hello" >mypipe &  # 放到后台
[1] 8022
$ ls -l mypipe
prw-rw-r-- 1 penguin penguin 0 Oct 16 21:49 mypipe
$ cat mypipe
hello
[1]+ Done echo "hello" >mypipe
$ ls mypipe
mypipe
$ rm mypipe
```

### 1.2.9 套接字

套接字广泛应用于所有互联网通信、数据库和操作系统本身。它类似于命名管道（FIFO），并允许进程之间甚至不同计算机之间的信息交换。对于套接字，这些进程不需要同时运行，也不需要是同一个父进程的子进程。它是进程间通信（IPC）的一个节点。信息的交换可能会通过网络发生在不同主机之间。最常见的两种是互联网套接字和 UNIX 域套接字。

提示：通过 `netstat -an` 命令可以方便地查看系统已经打开的套接字。

### 1.2.10 设备文件

设备文件包括系统的物理设备和虚拟设备，如硬盘、显卡、显示屏、键盘等。虚拟设备的一个例子是控制台，用 `/dev/console` 描述。

设备文件有两种类型：

- **字符设备**：每次访问一个字符，一个字符等于一个字节，例如键盘、串口等。
- **块设备**：通过更大的单元——块进行访问，一个块大于一个字节，例如硬盘等。

你可以读写块设备文件，尽管该文件可能包含二进制数据，读取后显示出无法理解的乱码。向文件写入数据有时可以帮助定位硬件连接故障。例如，你可以将文本文件导入打印机设备 `/dev/lp0`，或者将调制解调器命令发送到合适的串口 `/dev/ttyS0`。但是，除非这些操作都小心完成，否则可能会导致严重的问题。所以要特别小心。

注意：常规访问打印机，使用 `lp(1)`。

设备的节点数可以通过执行 `ls(1)` 得到，如下所示：

```bash
$ ls -l /dev/sda /dev/sr0 /dev/ttyS0 /dev/zero
brw-rw---T 1 root disk 8, 0 Oct 16 20:57 /dev/sda
brw-rw---T+ 1 root cdrom 11, 0 Oct 16 21:53 /dev/sr0
crw-rw---T 1 root dialout 4, 64 Oct 16 20:57 /dev/ttyS0
crw-rw-rw- 1 root root 1, 5 Oct 16 20:57 /dev/zero
```

- `/dev/sda` 的主设备号是 8，次设备号是 0。它可以被 `disk` 组的用户读写。
- `/dev/sr0` 的主设备号是 11，次设备号是 0。它可以被 `cdrom` 组的用户读写。
- `/dev/ttyS0` 的主设备号是 4，次设备号是 64。它可以被 `dialout` 组的用户读写。
- `/dev/zero` 的主设备号是 1，次设备号是 5。它可以被任意用户读写。

在现代 Linux 系统中，位于 `/dev` 下的文件系统会自动由 `udev` 机制填充。

### 1.2.11 特殊设备文件

还有一些特殊的设备文件，如下表所示：

| 设备文件 | 操作 | 响应描述 |
| --- | --- | --- |
| `/dev/null` | 读取 | 返回文件结尾字符（EOF） |
| `/dev/null` | 写入 | 无返回（一个无底的数据转存深渊） |
| `/dev/zero` | 读取 | 返回 `\0` 空字符（与 ASCII 中的数字 0 不同） |
| `/dev/random` | 读取 | 从真随机数生成器返回一个随机字符，供应真熵（缓慢） |
| `/dev/urandom` | 读取 | 从能够安全加密的伪随机数生成器返回一个随机字符 |
| `/dev/full` | 写入 | 返回磁盘已满（ENOSPC）错误 |

这些特殊设备文件经常与 shell 数据重定向联合使用（参考第 1.5.8 节）。

### 1.2.12 procfs 和 sysfs

`procfs` 和 `sysfs` 是两个伪文件系统，分别加载于 `/proc` 和 `/sys` 之上，将内核中的数据结构暴露给用户空间。或者说，这些条目是虚拟的，它们打开了深入了解操作系统运行的方便之门。

目录 `/proc` 为每个正在运行的进程提供了一个子目录，目录的名字就是进程标识符（PID）。需要读取进程信息的系统工具，如 `ps(1)`，可以从这个目录结构获得信息。

`/proc/sys` 下的目录包含了可以更改某些内核运行参数的接口。（你也可以使用专门的 `sysctl(8)` 命令修改，或者使用其预加载/配置文件 `/etc/sysctl.conf`。）

当人们看到这个特别大的文件 `/proc/kcore` 时，常常会惊慌失措。这个文件与你的电脑内存大小相差不多。它被用来调试内核。它是一个虚拟文件，指向系统内存，所以不必担心它的大小。

`/sys` 以下的目录包含了内核输出的数据结构，它们的属性以及它们之间的链接。它同时也包含了改变某些内核运行时参数的接口。

参考 `proc.txt(.gz)`、`sysfs.txt(.gz)` 以及其他相关的 Linux 内核文档（`/usr/share/doc/linux-doc-*/Documentation/filesystems/*`），这些文件由 `linux-doc-*` 软件包提供。

### 1.2.13 tmpfs

`tmpfs` 是一个临时文件系统，它的文件都保存在虚拟内存中。必要时，位于内存页缓存的 `tmpfs` 数据可能被交换到硬盘中的交换分区。

系统启动早期阶段，`/run` 目录挂载为 `tmpfs`。这样即使 `/` 挂载为只读，它也是可以被写入的。它为过渡态文件提供了新的存储空间，同时也替代了 Filesystem Hierarchy Standard 2.3 版中说明的目录位置：

- `/var/run` → `/run`
- `/var/lock` → `/run/lock`
- `/dev/shm` → `/run/shm`

参考 `tmpfs.txt(.gz)`，文件位于 Linux 内核文档（`/usr/share/doc/linux-doc-*/Documentation/filesystems/*`）目录之下，由软件包 `linux-doc-*` 提供。

### 1.3 Midnight Commander (MC)

Midnight Commander (MC) 是一个 Linux 终端或其他终端环境下的 GNU 版“瑞士军刀”。它为新手们提供了一个菜单式的终端使用体验，这更易于学习和运用标准的 Unix 命令。

你可能需要按照下面的命令来安装标题为 `mc` 的 Midnight Commander 包：

```bash
$ sudo apt-get install mc
```

使用 `mc(1)` 命令来浏览 Debian 系统。这是最好的学习方式。请使用光标键和回车键来翻看一些感兴趣的内容：

- `/etc` 及其子目录
- `/var/log` 及其子目录
- `/usr/share/doc` 及其子目录
- `/usr/sbin` 和 `/usr/bin`

#### 1.3.1 自定义 MC

为了在退出 MC 时更改目录并 `cd` 到其他目录，建议修改 `~/.bashrc` 以包含由 `mc` 包提供的脚本：

```bash
. /usr/lib/mc/mc.sh
```

查看 `mc(1)`（在 `-P` 选项里）的原因。（如果你不能理解这里所说的，可以稍后回头再看）

#### 1.3.2 启动 MC

MC 可以这样启动：

```bash
$ mc
```

MC 通过菜单覆盖了所有的文件操作，使用户更省心省力。只需要按 F1 就可以跳转到帮助界面。你只需要按光标键和功能键就可以使用 MC。

注意：某些终端（如 `gnome-terminal(1)`）的功能键按键触发消息可能会被终端程序截取。在 `gnome-terminal` 里，可以通过“首选项”→“通用”→“快捷键”菜单设置来禁用这些特征。

如果你遇到字符编码问题，显示出来都是乱码，通过添加 `-a` 到 MC 命令行或许有助于避免此类问题。如果这样不能解决 MC 中的显示问题，可以参考第 9.5.6 节。