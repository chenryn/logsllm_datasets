    20221102_10:12:01:  [    0.000010] sched_clock: 32 bits at 200MHz, resolution 5ns, wraps every 10737418237ns
    20221102_10:12:01:  [    0.008263] Calibrating delay loop... 531.66 BogoMIPS (lpj=2658304)
    20221102_10:12:01:  [    0.069297] pid_max: default: 32768 minimum: 301
    20221102_10:12:01:  [    0.074089] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes)
    20221102_10:12:01:  [    0.080513] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes)
    20221102_10:12:01:  [    0.089028] CCA is coherent, multi-core is fine
    20221102_10:12:01:  [    0.098030] [vmb_cpu_alloc]:[645] CPU vpet.cpu_status = 11
    ····
    ····
    ····
    20221102_10:12:04:  [    2.630752] Creating 7 MTD partitions on "spi32766.1":
    20221102_10:12:04:  [    2.635944] 0x000000000000-0x000000080000 : "uboot"
    20221102_10:12:04:  [    2.641983] 0x000000080000-0x0000000a0000 : "ubootconfigA"
    20221102_10:12:04:  [    2.647466] 0x0000000a0000-0x0000000c0000 : "ubootconfigB"
    20221102_10:12:04:  [    2.652796] 0x0000000c0000-0x000000100000 : "calibration"
    20221102_10:12:04:  [    2.658323] 0x000000100000-0x000000300000 : "kernel"
    20221102_10:12:04:  [    2.663127] 0x000000300000-0x000000f00000 : "rootfs"
    20221102_10:12:04:  [    2.668196] mtd: device 6 (rootfs) set to be root filesystem
    20221102_10:12:04:  [    2.672755] 1 squashfs-split partitions found on MTD device rootfs
    20221102_10:12:04:  [    2.678831] 0x000000d00000-0x000001000000 : "rootfs_data"
    20221102_10:12:04:  [    2.685523] 0x000000f00000-0x000001000000 : "res"
    20221102_10:12:04:  [    2.689973] Lantiq SoC SPI controller rev 9 (TXFS 32, RXFS 32, DMA 1)
    20221102_10:12:04:  [    2.705499] libphy: Fixed MDIO Bus: probed
    20221102_10:12:04:  [    2.713792] libphy: gswitch_mdio: probed
    20221102_10:12:04:  [    2.719788] libphy: gswitch_mdio: probed
    20221102_10:12:04:  [    2.723371] lro_sram_membase_res0 from DT: a2013000 
    20221102_10:12:04:  [    2.727580] ltq_toe_membase: e2000000 and lro_sram_membase_res0: e2013000
    20221102_10:12:04:  [    2.734666] TOE Init Done !!
然后等待一段时间，就会出现登录了，前提是路由器要接网线(被坑了一段时间)，否则不会出现登录，猜测的原因应该是未接网线时，应该在某个地方被阻塞了，并且Tenda路由器的一些产品，都是支持Telnet连接的，但是Telnet的服务需要我们自己去打开，两个登录过程都是一样的。
## Shell登录
无论是串口还是Telnet，都是需要密码的，username为root，但是password不知道，但是通过搜索可以知道，对于Tenda路由器部分设备，开启Telnet服务的访问方式是，[CVE-2018-5770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-5770)，并且对于密码，同样存在爆破得到密码其密码为Fireitup，CVE-2020-10988。
并且在/etc/shadow文件中，我们也能看到使用了md5加密的痕迹，想了解md5(unix)加密可以看看这篇文章[md5(unix)原理分析](https://www.jianshu.com/p/f007b81cb96f)。
我这里还是想了解下具体代码处理过程，login命令实际busybox程序处理的，于是将busybox拖到了ida中查看，发现处理过程的具体代码在sub_45A378。
先是获取用户名，然后根据这个用户名调用getpwnam函数去/etc/shadow寻找对应的名称，返回spwd结构体。
    struct spwd{
        char *sp_namp; /* 登录名 */ 
        char *sp_pwdp; /* 加密密码 */ 
        long sp_lstchg; /* 上次更改日期 */ 
        long sp_min; /* 更改密码的最少天数 */ 
        long sp_max; /* 更改密码的最大天数*/ 
        long sp_warn; /* 警告期 */ 
        long sp_inact; /* 最长不活动天数 */ 
        long sp_expire; /* 帐户到期日期 */ 
        unsigned long sp_flag; /* 未使用 */ 
    };
这里可以ida添加这个结构体，或许可以方便后面的分析，添加方式为View-->Open Subviews-->Local
Type，然后右键Insert，将结构体复制进去，点击ok即可，后面在对httpd文件分析的时候，也会用到Goahead里面的一些结构体。
LABEL_34:
查看验证函数，其中主要是打印Password:
字符串，并接受我们的输入，然后提取/etc/shadow中的salt，然后调用crypt()函数，将其进行md5加密，最后和密文进行比较。
然后再贴一下hashcat的爆破过程吧，hashcat -m 500 -a 0 ./shadow.txt ./pwd.txt --force
Telnet的连接实际上也是调用的这个login，Telnet服务开启会执行这样的命令。
    int __fastcall sub_41AE00(int a1)
    {
      system("/etc/init.d/telnet restart");
      sub_415368(a1, "load Telnet success.");
      return sub_415B54(a1, 200);
    }
去到对应文件查看，发现一连串下来，最后还是调用的，/bin/login
## 固件提取
其实除了从芯片中提取固件，还可以直接到官网下载，或者在串口获取shell后，使用一些命令，比如说nc，ftp，等命令将路由器的一些文件传出到主机中，前提是路由器的shell需要支持这些命令。
这里我采用最简单的nc命令来进行提取固件，这里我选择Telnet连接，方便一些。
首先查看系统磁盘分区信息，proc/mtd文件保存着系统的磁盘分区信息，然后使用dd命令获取Tenda Ax1的文件系统镜像。
然后关闭主机防火墙，确保路由器shell和主机之间能ping通，接着用nc命令将tenda.bin到主机中。
    nc -lp 1234 > tenda.bin
路由器shell连接上，进入tmp目录，nc连接主机，发送文件。
    cd /tmp
    nc 192.168.0.157 1234  官网文档：
**一些全局变量**
    //main.c
    static char_t       *rootWeb = T("web");            /* Root web directory */
    static char_t       *password = T("");              /* Security password */
    static int          port = 80;                      /* Server port */
    static int          retries = 5;                    /* Server port retries */
    static int          finished;                       /* Finished flag */
    //sock.c
    socket_t    **socketList;           /* List of open sockets */
    int         socketMax;              /* Maximum size of socket */
    int         socketHighestFd = -1;   /* Highest socket fd opened */
    //handler.c
    static websUrlHandlerType   *websUrlHandler;            /* URL handler list */
    static int                  websUrlHandlerMax;          /* Number of entries */
    static int                  urlHandlerOpenCount = 0;    /* count of apps */
rootWeb就是Web服务器的根目录，在Tenda Ax12中，实际上就是/www。
然后就是密码password，端口port为80端口，尝试次数retries为5，finished则是一个循环的标志。
socketList是一个结构体数组，保存所有的socket，socketMax是当前所有socket的数量值。
websUrlHandler是一个指针数组，指向websUrlHandlerType这个结构体，这个结构体后面会分析。websUrlHandlerMax就是当前url
handler的数量值。
**main.c**
    /*
     *  Main -- entry point from LINUX
     */
    int main(int argc, char** argv)
    {
    /*
     *  Initialize the memory allocator. Allow use of malloc and start 
     *  with a 60K heap.  For each page request approx 8KB is allocated.
     *  60KB allows for several concurrent page requests.  If more space
     *  is required, malloc will be used for the overflow.
     */
        bopen(NULL, (60 * 1024), B_USE_MALLOC);
        signal(SIGPIPE, SIG_IGN);
    /*
     *  Initialize the web server
     */
        if (initWebs() < 0) {
            return -1;
        }
    #ifdef WEBS_SSL_SUPPORT
        websSSLOpen();
    #endif
    /*
     *  Basic event loop. SocketReady returns true when a socket is ready for
     *  service. SocketSelect will block until an event occurs. SocketProcess
     *  will actually do the servicing.
     */
        while (!finished) {
            if (socketReady(-1) || socketSelect(-1, 1000)) {
                socketProcess(-1);
            }
            websCgiCleanup();
            emfSchedProcess();
        }
    #ifdef WEBS_SSL_SUPPORT
        websSSLClose();
    #endif
    #ifdef USER_MANAGEMENT_SUPPORT
        umClose();
    #endif
    /*
     *  Close the socket module, report memory leaks and close the memory allocator
     */
        websCloseServer();
        socketClose();
    #ifdef B_STATS
        memLeaks();
    #endif
        bclose();
        return 0;
    }
可以看到先是bopen()分配了内存，然后调用了initWebs()去初始化web服务，这个函数也是后面要重点分析的函数。
然后就是while循环，里面有下面几个函数
  * socketReady()，就是判断是否存在准备处理事件的套接字，有则会返回TRUE，其实现方式是遍历socketList，获取socket_t *sp的结构体成员信息进行if判断。
  * socketSelect()，此调用使用由 socketRegisterInterest 定义的感兴趣事件的掩码。它阻塞调用者，直到发生合适的 I/O 事件或超时。
  * socketProcess()，处理挂起的套接字 I/O 事件。
  * websCgiCleanup()，需要检查 cgiList 中的任何条目是否已完成，如果已完成，则处理其输出并清理。
  * emfSchedProcess()，以循环方式将任务从队列中取出。
后面部分就是关闭WebServer，关闭套接字，释放内存，分别由websCloseServer()，socketClose()，bclose()实现。
**initWebs()**
    static int initWebs()
    {
        struct hostent  *hp;
        struct in_addr  intaddr;
        char            host[128], dir[128], webdir[128];
        char            *cp;
        char_t          wbuf[128];
    /*
     *  Initialize the socket subsystem
     */
        socketOpen();
    #ifdef USER_MANAGEMENT_SUPPORT
    /*
     *  Initialize the User Management database
     */
        umOpen();
        umRestore(T("umconfig.txt"));
    #endif
    /*
     *  Define the local Ip address, host name, default home page and the 
     *  root web directory.
     */
        if (gethostname(host, sizeof(host)) < 0) {
            error(E_L, E_LOG, T("Can't get hostname"));
            return -1;
        }