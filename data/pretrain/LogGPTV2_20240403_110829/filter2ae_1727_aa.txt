原文来自安全客，作者：Leeqwind  
原文链接：  
作者博客：
CVE-2017-0263 是 Windows 操作系统 `win32k` 内核模块菜单管理组件中的一个
UAF（释放后重用）漏洞，据报道称该漏洞在之前与一个 EPS 漏洞被 APT28 组织组合攻击用来干涉法国大选。这篇文章将对用于这次攻击的样本的
CVE-2017-0263 漏洞部分进行一次简单的分析，以整理出该漏洞利用的运作原理和基本思路，并对 Windows
窗口管理器子系统的菜单管理组件进行简单的探究。分析的环境是 Windows 7 x86 SP1 基础环境的虚拟机。
在本分析中为了突出分析的重点，在对涉及的各个系统函数进行分析时，将与当前漏洞研究无关的调用语句进行忽略，只留意影响或可能影响漏洞触发逻辑的调用和赋值语句并对其进行分析和解释。
#### 0x0 前言
这篇文章分析了发生在窗口管理器（User）子系统的菜单管理组件中的 CVE-2017-0263 UAF（释放后重用）漏洞。在函数
`win32k!xxxMNEndMenuState` 中释放全局菜单状态对象的成员域 `pGlobalPopupMenu`
指向的根弹出菜单对象时，没有将该成员域置零，导致该成员域仍旧指向已被释放的内存区域成为野指针，在后续的代码逻辑中存在该成员域指向的内存被读写访问或被重复释放的可能性。
在释放成员域 `pGlobalPopupMenu` 指向对象之后，函数 `xxxMNEndMenuState` 还将当前线程关联的线程信息对象成员域
`pMenuState` 重置，这导致大部分追踪和操作弹出菜单的接口将无法达成漏洞触发的条件。但在重置成员域 `pMenuState`
之前，函数中存在对全局菜单状态对象的成员域 `uButtonDownHitArea`
的解锁和释放，这个成员域存储当前鼠标按下位置所属的窗口对象（如果当前存在鼠标按下状态）指针。
如果用户进程先前通过利用技巧构造了特殊关联和属性的菜单窗口对象，那么从函数 `xxxMNEndMenuState` 释放成员域
`pGlobalPopupMenu` 到重置成员域 `pMenuState`
之前的这段时间，执行流将回到用户进程中，用户进程中构造的利用代码将有足够的能力改变当前弹出菜单的状态，致使执行流重新执行
`xxxMNEndMenuState` 函数，并对根弹出菜单对象的内存进行重复释放，导致系统 BSOD 的发生。
在内核第一次释放成员域 `pGlobalPopupMenu`
指向内存之后执行流回到用户进程时，在用户进程中通过巧妙的内存布局，使系统重新分配相同大小的内存区域以占用成员域 `pGlobalPopupMenu`
指向的先前释放的内存块，伪造新的弹出菜单对象并构造相关成员域。借助代码逻辑，实现对特定窗口对象的成员标志位 `bServerSideWindowProc`
的修改，使系统能够在内核中直接执行位于用户进程地址空间中的自定义窗口消息处理函数，得以通过内核上下文执行用户进程构造的利用代码，实现内核提权的目的。
#### 0x1 原理
CVE-2017-0263 漏洞存在于 `win32k` 的窗口管理器（User）子系统中的菜单管理组件中。在内核函数
`xxxMNEndMenuState` 释放目标 `tagMENUSTATE` 结构体对象的成员域 `pGlobalPopupMenu`
指向对象的内存时，没有将该成员域置为空值。
在 `win32k` 模块中存在定义为 `tagMENUSTATE` 结构体类型的菜单状态 `gMenuState`
全局对象。在当前的操作系统环境下，该结构体的定义如下：
    kd> dt win32k!tagMENUSTATE
       +0x000 pGlobalPopupMenu : Ptr32 tagPOPUPMENU
       +0x004 flags            : Int4B
       +0x008 ptMouseLast      : tagPOINT
       +0x010 mnFocus          : Int4B
       +0x014 cmdLast          : Int4B
       +0x018 ptiMenuStateOwner : Ptr32 tagTHREADINFO
       +0x01c dwLockCount      : Uint4B
       +0x020 pmnsPrev         : Ptr32 tagMENUSTATE
       +0x024 ptButtonDown     : tagPOINT
       +0x02c uButtonDownHitArea : Uint4B
       +0x030 uButtonDownIndex : Uint4B
       +0x034 vkButtonDown     : Int4B
       +0x038 uDraggingHitArea : Uint4B
       +0x03c uDraggingIndex   : Uint4B
       +0x040 uDraggingFlags   : Uint4B
       +0x044 hdcWndAni        : Ptr32 HDC__
       +0x048 dwAniStartTime   : Uint4B
       +0x04c ixAni            : Int4B
       +0x050 iyAni            : Int4B
       +0x054 cxAni            : Int4B
       +0x058 cyAni            : Int4B
       +0x05c hbmAni           : Ptr32 HBITMAP__
       +0x060 hdcAni           : Ptr32 HDC__
_结构体 tagMENUSTATE 的定义_
菜单管理是 `win32k` 中最复杂的组件之一，菜单处理作为一个整体依赖于多种十分复杂的函数和结构体。例如，在创建弹出菜单时，应用程序调用
`TrackPopupMenuEx` 在菜单内容显示的位置创建菜单类的窗口。接着该菜单窗口通过一个系统定义的菜单窗口类过程
`xxxMenuWindowProc` 处理消息输入，用以处理各种菜单特有的信息。此外，为了追踪菜单如何被使用，`win32k` 也将一个菜单状态结构体
`tagMENUSTATE` 与当前活跃菜单关联起来。通过这种方式，函数能够知道菜单是否在拖拽操作中调用、是否在菜单循环中、是否即将销毁，等等。
菜单状态结构体用来存储与当前活跃菜单的状态相关的详细信息，包括上下文菜单弹出的坐标、关联的位图表面对象的指针、窗口设备上下文对象、之前的上下文菜单结构体的指针，以及其他的一些成员域。
在线程信息结构体 `tagTHREADINFO` 中也存在一个指向菜单状态结构体指针的 `pMenuState` 成员域：
    kd> dt win32k!tagTHREADINFO -d pMenuState
       +0x104 pMenuState : Ptr32 tagMENUSTATE
_结构体 tagTHREADINFO 存在 pMenuState 成员域_
当用户在操作系统中以点击鼠标右键或其他的方式弹出上下文菜单时，系统最终在内核中执行到 `xxxTrackPopupMenuEx` 函数。该函数调用
`xxxMNAllocMenuState` 函数来分配或初始化菜单状态结构体。
在函数 `xxxMNAllocMenuState` 中，系统将全局菜单状态对象 `gMenuState`
的所有成员域清空并对部分成员域进行初始化，然后将全局菜单状态对象的地址存储在当前线程信息对象的成员域 `pMenuState` 中。
      menuState = (tagMENUSTATE *)&gMenuState;
      [...]
      memset(menuState, 0, 0x60u);
      menuState->pGlobalPopupMenu = popupMenuRoot;
      menuState->ptiMenuStateOwner = ptiCurrent;
      menuState->pmnsPrev = ptiCurrent->pMenuState;
      ptiCurrent->pMenuState = menuState;
      if ( ptiNotify != ptiCurrent )
        ptiNotify->pMenuState = menuState;
      [...]
      return menuState;
_函数 xxxMNAllocMenuState 的代码片段_
函数初始化了菜单状态结构体中的 `pGlobalPopupMenu` / `ptiMenuStateOwner` 和 `pmnsPrev` 成员。成员域
`pGlobalPopupMenu` 指针指向通过参数传入作为根菜单的弹出菜单结构体 `tagPOPUPMENU`
对象。弹出菜单结构体存储关联的弹出菜单相关的各个内核对象的指针，与对应的菜单窗口对象关联，其结构体定义如下：
    kd> dt win32k!tagPOPUPMENU
       +0x000 flags            : Int4B
       +0x004 spwndNotify      : Ptr32 tagWND
       +0x008 spwndPopupMenu   : Ptr32 tagWND
       +0x00c spwndNextPopup   : Ptr32 tagWND
       +0x010 spwndPrevPopup   : Ptr32 tagWND
       +0x014 spmenu           : Ptr32 tagMENU
       +0x018 spmenuAlternate  : Ptr32 tagMENU
       +0x01c spwndActivePopup : Ptr32 tagWND
       +0x020 ppopupmenuRoot   : Ptr32 tagPOPUPMENU
       +0x024 ppmDelayedFree   : Ptr32 tagPOPUPMENU
       +0x028 posSelectedItem  : Uint4B
       +0x02c posDropped       : Uint4B
_结构体 tagPOPUPMENU 的定义_
菜单状态结构体对象的成员域 `ptiMenuStateOwner`
指向当前线程的线程信息结构体对象。线程信息结构体对象中已存在的菜单状态结构体指针被存储在当前菜单状态结构体对象的 `pmnsPrev` 成员域中。
随后函数将菜单状态结构体的地址放置在通过参数传入的当前线程（和通知线程）的线程信息结构体 `tagTHREADINFO` 对象的成员域
`pMenuState` 中，并将菜单状态结构体的地址作为返回值返回给上级调用者函数。
_当前线程信息对象和菜单状态对象的对应关系_
* * *
当用户通过键鼠选择菜单项、或点击菜单范围之外的屏幕区域时，系统将向当前上下文菜单的窗口对象发送相关鼠标按下或菜单终止的事件消息。在菜单对象的类型为模态的情况下，这导致之前调用
`xxxMNLoop` 函数的线程退出菜单循环等待状态，使函数继续向后执行。
系统调用 `xxxMNEndMenuState` 函数来清理菜单状态结构体存储的信息与释放相关的弹出菜单对象和窗口对象。
      ptiCurrent = gptiCurrent;
      menuState = gptiCurrent->pMenuState;
      if ( !menuState->dwLockCount )
      {
        MNEndMenuStateNotify(gptiCurrent->pMenuState);
        if ( menuState->pGlobalPopupMenu )
        {
          if ( fFreePopup )
            MNFreePopup(menuState->pGlobalPopupMenu);
          else
            *(_DWORD *)menuState->pGlobalPopupMenu &= 0xFFFEFFFF;
        }
        UnlockMFMWFPWindow(&menuState->uButtonDownHitArea);
        UnlockMFMWFPWindow(&menuState->uDraggingHitArea);
        ptiCurrent->pMenuState = menuState->pmnsPrev;
        [...]
      }
_函数 xxxMNEndMenuState 的代码片段_
在函数 `xxxMNEndMenuState` 中，系统从当前线程的线程信息对象中获取 `pMenuState`
成员域指向的菜单状态结构体对象。随后函数判断菜单信息结构体对象的成员域 `pGlobalPopupMenu` 是否为空，不为空则调用函数
`MNFreePopup` 释放该成员域指向的弹出菜单 `tagPOPUPMENU` 对象。在执行相应的预处理之后，函数 `MNFreePopup` 调用
`ExFreePoolWithTag` 释放传入的 `tagPOPUPMENU` 对象缓冲区。
      if ( popupMenu == popupMenu->ppopupmenuRoot )
        MNFlushDestroyedPopups(popupMenu, 1);
      pwnd = popupMenu->spwndPopupMenu;
      if ( pwnd && (pwnd->fnid & 0x3FFF) == 0x29C && popupMenu != &gpopupMenu )
        *((_DWORD *)pwnd + 0x2C) = 0;
      HMAssignmentUnlock(&popupMenu->spwndPopupMenu);
      HMAssignmentUnlock(&popupMenu->spwndNextPopup);
      HMAssignmentUnlock(&popupMenu->spwndPrevPopup);
      UnlockPopupMenu(popupMenu, &popupMenu->spmenu);
      UnlockPopupMenu(popupMenu, &popupMenu->spmenuAlternate);
      HMAssignmentUnlock(&popupMenu->spwndNotify);
      HMAssignmentUnlock(&popupMenu->spwndActivePopup);
      if ( popupMenu == &gpopupMenu )
        gdwPUDFlags &= 0xFF7FFFFF;
      else
        ExFreePoolWithTag(popupMenu, 0);
_函数 MNFreePopup 的代码片段_
这时问题就出现了：函数 `xxxMNEndMenuState` 在将菜单状态结构体对象的成员域 `pGlobalPopupMenu`
指向的弹出菜单对象释放之后，却没有将该成员域置为空值，这将导致该成员域指向的内存地址处于不可控的状态，并导致被复用的潜在问题。
#### 0x2 追踪
在 `user32.dll` 模块中存在导出函数 `TrackPopupMenuEx`
用于在屏幕指定位置显示弹出菜单并追踪选择的菜单项。当用户进程调用该函数时，系统在内核中最终调用到 `xxxTrackPopupMenuEx`
函数处理弹出菜单操作。
* * *
**菜单的对象**
在本分析中将涉及到与菜单相关的对象：菜单对象，菜单层叠窗口对象和弹出菜单对象。
其中，菜单对象是菜单的实体，在内核中以结构体 `tagMENU`
实例的形式存在，用来描述菜单实体的菜单项、项数、大小等静态信息，但其本身并不负责菜单在屏幕中的显示，当用户进程调用 `CreateMenu`
等接口函数时系统在内核中创建菜单对象，当调用函数 `DestroyMenu` 或进程结束时菜单对象被销毁。
当需要在屏幕中的位置显示某菜单时，例如，用户在某窗口区域点击鼠标右键，在内核中系统将调用相关服务函数根据目标菜单对象创建对应的类型为 `MENUCLASS`
的菜单层叠窗口对象。菜单层叠窗口对象是窗口结构体 `tagWND` 对象的特殊类型，通常以结构体 `tagMENUWND`
的形式表示，负责描述菜单在屏幕中的显示位置、样式等动态信息，其扩展区域关联对应的弹出菜单对象。
弹出菜单对象 `tagPOPUPMENU`
作为菜单窗口对象的扩展对象，用来描述所代表的菜单的弹出状态，以及与菜单窗口对象、菜单对象、子菜单或父级菜单的菜单窗口对象等用户对象相互关联。
当某个菜单在屏幕中弹出时，菜单窗口对象和关联的弹出菜单对象被创建，当菜单被选择或取消时，该菜单将不再需要在屏幕中显示，此时系统将在适当时机销毁菜单窗口对象和弹出菜单对象。
* * *
**弹出菜单**
内核函数 `xxxTrackPopupMenuEx` 负责菜单的弹出和追踪。在该函数执行期间，系统调用 `xxxCreateWindowEx`