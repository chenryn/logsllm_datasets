title:Improving Accuracy of Static Integer Overflow Detection in Binary
author:Yang Zhang and
Xiaoshan Sun and
Yi Deng and
Liang Cheng and
Shuke Zeng and
Yu Fu and
Dengguo Feng
Improving Accuracy of Static Integer Overﬂow
Detection in Binary
Yang Zhang, Xiaoshan Sun, Yi Deng, Liang Cheng(B), Shuke Zeng, Yu Fu,
and Dengguo Feng
Trusted Computing and Information Assurance Laboratory, Institute of Software,
{zhangyang,sunxs,dengyi,chengliang,skzeng,fuyu,feng}@tca.iscas.ac.cn
Chinese Academy of Sciences, Beijing, China
Abstract. Integer overﬂow presents a major source of security threats
to information systems. However, current solutions are less eﬀective in
detecting integer overﬂow vulnerabilities: they either produce unaccept-
ably high false positive rates or cannot generate concrete inputs towards
vulnerability exploration. This limits the usability of these solutions in
analyzing real-world applications, especially those in the format of binary
executables.
In this paper, we present a platform, called INDIO, for accurately
detecting integer overﬂow vulnerabilities in Windows binaries. INDIO
integrates the techniques of pattern-matching (for quick identiﬁcation
of potential vulnerabilities), vulnerability ranking (for economic elimi-
nation of false positives), and selective symbolic execution (for rigorous
elimination of false positives). As a result, INDIO can detect integer
overﬂow with low false positive and false negative rates.
We have applied INDIO to several real-world, large-size Windows bina-
ries, and the experimental results conﬁrmed the eﬀectiveness of INDIO (all
known and two previously unknown integer overﬂows vulnerabilities were
detected). The experiments also demonstrate that the vulnerability rank-
ing technique and other optimization techniques employed in INDIO can
signiﬁcantly reduce false positives with economic costs.
Keywords: Integer overﬂow detection· Static program analysis · Binary
analysis · Vulnerability ranking · Weakest precondition · Symbolic exe-
cution
1 Introduction
Integer overﬂow presents a major class of security vulnerabilities in information
systems, or more generally, software-regulated systems (e.g. embedded systems).
As reported by the Common Vulnerability and Exploit (CVE), integer overﬂow
has become the second most critical type of coding errors, after buﬀer overﬂow,
that causes severe security consequences1.
1 Vulnerability type distributions in cve. CVE (2007), http://cve.mitre.org/docs/
vuln-trends/vuln-trends.pdf.
c(cid:2) Springer International Publishing Switzerland 2015
H. Bos et al. (Eds.): RAID 2015, LNCS 9404, pp. 247–269, 2015.
DOI: 10.1007/978-3-319-26362-5 12
248
Y. Zhang et al.
Integer overﬂow emerges when an arithmetic operation attempts to create a
numeric value that is too large to be correctly represented in the available storage
space. We refer to such arithmetic operations as overﬂow points. Even though
overﬂow points do not directly compromise security, they can trigger other types
of vulnerabilities, such as buﬀer and heap overﬂow, and in turn cause signiﬁcant
security consequences.
Both the industry and academia have proposed a variety of solutions in recent
years to detecting and mitigating integer overﬂow vulnerabilities. These solutions
can be generally categorized as based on either static analysis (e.g. [15,25–27,
29]) or dynamic analysis (e.g. [7,10,16,24,28,31]). Unfortunately, both these two
categories of solutions have their limitations when applied in realistic analyses. In
addition to the high computational cost, static analysis solutions typically suﬀer
from high false positive rates. That is, in order to ensure zero omission of integer
overﬂow vulnerabilities, these solutions typically over-estimate the behavior of
the program under analysis, which leads to excessive spurious vulnerabilities
being reported. The analyst might have to spend signiﬁcant eﬀort in ruling out
false positives before being able to address a genuine vulnerability.
Dynamic analysis based solutions do not have the problem of excessive false
positives. In contrast, whenever they report an integer overﬂow, it is trusted to be
real and exploitable. However, the eﬀectiveness of these solutions heavily depends
on the set of inputs used to execute the program. It is often challenging to ﬁnd
inputs within reasonable eﬀort that trigger all vulnerabilities in the program.
Moreover, most of these solutions need to generate new input or modify the
original input at runtime to re-execute the program and explore its state space.
This restricts their applicability in checking GUI-based applications, because the
behavior of GUI-based applications is triggered by events (e.g., mouse-clicking),
whose input scope is hard to fully cover [30]. In fact, most existing dynamic
analysis solutions can only examine programs with speciﬁc input formats (such
as media players, network protocol parsers and ﬁle processors).
The limitations of existing solutions exacerbate when the program under
analysis is in binary code. The unique characteristics of binary code, including
the blur distinction between data and instructions, the prevailing use of indirect
addressing and jumps, and the lack of type information, make it a challenging
task to reconstruct the syntactic structure and semantics from binary code that,
unfortunately, constitutes the premise for existing solutions to proceed their
analysis with acceptable accuracy.
However, it is inevitable to detect and ﬁx integer overﬂow at the binary
level, since it is often impractical to do so at the source code level (e.g., due
to the unavailability of source code, incomplete code or missing library ﬁles).
To tackle the diﬃculties of analyzing binary code, and especially to address the
limitations of existing solutions, we propose a static analysis based framework
called INDIO (INtegrated Detection of Integer Overﬂow) to detect and validate
integer overﬂow vulnerabilities in Windows binaries.
INDIO decomposes the task of ﬁnding integer overﬂow in binaries into two
steps. Firstly, all suspicious program paths likely to contain integer overﬂow
Improving Accuracy of Static Integer Overﬂow Detection in Binary
249
are identiﬁed using pattern matching. We refer to these suspicious paths as
vulnerable paths. Priority ranking and weakest precondition (WP) calculation
are then employed to all vulnerable paths to ﬁlter out a signiﬁcant portion of
false positives with economic costs. The second step of detection is based on
selective symbolic execution [9], which checks if the vulnerabilities identiﬁed in
the ﬁrst step are genuine in a simulated runtime environment. Taint analysis and
path pruning are employed prior to symbolic execution to force computationally
expensive analysis be only spent on validating suspicious vulnerabilities that
are likely to be real. A byproduct of selective symbolic execution is that it
generates example program inputs exposing the genuine vulnerabilities. Given
that a vulnerability sometimes is embedded in program paths with hundreds of
instructions, this feature is particularly helpful to analysts to understand and
ﬁx integer overﬂow vulnerabilities.
We applied INDIO to several real-world windows binaries that have been
widely analyzed by existing solutions. INDIO found one previously unknown
bug and one ﬁxed but unpublished bug in the GUI library comctl32.dll, and
another previously unknown bug in libpng.dll. The two unknown bugs have
both been conﬁrmed by their vendors. Our experimental results also show that
INDIO is capable of detecting integer overﬂow with low false positive and false
negative rates.
In summary, this paper makes the following contributions:
– We developed an integrated framework, INDIO, to eﬀectively detect integer
overﬂow in Windows binaries. The framework incorporates pattern match-
ing, inter-procedural data- and control-ﬂow analysis, and symbolic execution
to quickly detect and validate integer overﬂow vulnerabilities in Windows
binaries. For the genuine vulnerabilities detected, the framework is able to
generate example inputs triggering them, in order to assist the understanding
and ﬁxing of these vulnerabilities.
– We implemented a collection of optimization techniques, including vulnera-
bility priority ranking, WP calculation, taint analysis and path pruning, to
improve the eﬃciency of integer overﬂow detection. These techniques enable
INDIO to signiﬁcantly reduce the number of false positives it reports while
keeps its false negative rate at a very low level.
– We applied INDIO to a set of widely used Windows binaries, in which INDIO
detected two previously unknown integer overﬂow vulnerabilities.
2 System Overview
INDIO takes x86 binaries (executables and DLLs) as input, and performs a two-
stage analysis to detect integer overﬂow in these binaries. At the end of analysis,
INDIO outputs the detected integer overﬂow vulnerabilities, as well as example
inputs to the binaries that expose these vulnerabilities. The detection in INDIO
is semi-automatic, and the only human intervention needed is to decide the
criteria on which suspicious vulnerabilities should pass to the second stage of
analysis.
250
Y. Zhang et al.
Fig. 1. Architecture of INDIO
The architecture of INDIO, as illustrated in Fig. 1, is consisted of two parts:
StaticTaint (Static Identiﬁcation of Integer Overﬂow and Taint Analysis), and
VIOSE (Validation of Integer Overﬂow using Symbolic Execution). StaticTaint
ﬁrst performs a quick search in the input binary to identify potentially vulnerable
paths by comparing them to known patterns of insecure integer operation and
usage; VIOSE conducts symbolic execution along the vulnerable paths identiﬁed
by StaticTaint and monitors their execution to validate whether they present
genuine security threats. If a potential vulnerability is genuine, VIOSE produces
example inputs to the binary that expose this vulnerability.
Next we use comctl32.dll as a running example to explain how INDIO oper-
ates to detect integer overﬂow. StaticTaint ﬁrst translates comctl32.dll into the
Intermediate Representation (IR) using its Code Leverage module (Sect. 3.1),
and then searches the IR for code fragments that match vulnerability patterns
deﬁned in the Vulnerability Pattern Library (Sect. 3.2). These code fragments
are identiﬁed as candidate vulnerabilities. For example, the arithmetic opera-
tion at 0x5d180c82 in the following code snippet is identiﬁed during the search,
because the result of multiplication is passed to the memory allocation function
ReAlloc at 0x5d180c8a as a parameter without any overﬂow check. For each
candidate vulnerability, StaticTaint records the address of its overﬂow points
and how the potentially overﬂowed integer value is used.
.text :5 d180c2c
.text :5 d180c2c
.text :5 d180c2c
.text :5 d180c2c
.text :5 d180c2c
...
.text :5 d180c82
.text :5 d180c86
.text :5 d180c87
.text :5 d180c8a
; int
; int i, const void *pitem)
stdcall DSA InsertItem(HDSA hdsa,
hdsa
i
Src
imul
push
push
call
= dword ptr
= dword ptr
= dword ptr
8
0 Ch
10 h
eax , [ esi +0 Ch ]
eax
dword ptr [ esi +4] ; hMem
\ _ R e A l l o c @ 8
;
; uBytes
; ReAlloc(x,x)
The pattern matching process in StaticTaint obviously can cause many false
positives, as the trade-oﬀ for fast vulnerability identiﬁcation. To address this,
Improving Accuracy of Static Integer Overﬂow Detection in Binary
251
its Vulnerability Filter utilizes two light-weight static analyses, namely priority
ranking (Sect. 3.3) and WP calculation (Sect. 3.4) to eliminate as many false
positives as possible:
1. The priority ranking algorithm calculates the possibility of a vulnerability
being exploited, referenced to as priority, based on how overﬂowed integers
are used by security-sensitive operations (also known as sinks). The higher
priority a candidate vulnerability has, the more likely it presents a genuine
vulnerability. For example, the vulnerability described above has a priority
higher than most of other candidate vulnerabilities in comctl32.dll, because
it uses the overﬂowed integer to decide the size of memory to be allocated
right after the overﬂowed integer is computed. One can specify a priority
threshold to ﬁlter out all candidate vulnerabilities with priorities lower than
the threshold.
2. The Vulnerability Filter further eliminates the candidate vulnerabilities that
are apparently unexploitable. It accomplishes this by using WP calculation
and value-range analysis to determine whether the program paths from the
program entry point to the sinks corresponding to these vulnerabilities are
feasible. Only vulnerabilities with feasible program paths are passed to VIOSE
for further validation. For the vulnerability in the above example, the path
segments from 0x5d180c2c to 0x5d180c82 and from 0x5d180c82 to 5d180c8a
are conﬁrmed as feasible by the WP calculation and value-range analysis,
respectively. Thus, it is passed to VIOSE.
Unfortunately, the WP calculation is sometimes incapable of dealing with
long or complex program paths: it either cannot terminate within the time limit
or generates intricate preconditions that the SMT solver cannot handle. Thus,
many false positives might still sneak through StaticTaint. To tackle this, VIOSE
validates the candidate vulnerabilities passing through StaticTaint using sym-
bolic execution, which is more accurate than the WP calculation in validating
suspicious program paths [25]. VIOSE also employs two heuristics to improve
the eﬃciency and scalability of symbolic execution:
1. It incorporates a taint analysis to reduce the number of symbolic variables
to be introduced during symbolic execution. For example, the taint analysis
reports that the ﬁrst parameter of ReAlloc in the above example has no
impact on the sink at 0x5d180c8a, and hence introduces no symbolic variable