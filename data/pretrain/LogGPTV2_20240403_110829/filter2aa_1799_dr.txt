WerFault then sends a copy of the two XML files and the minidump to Microsoft OCA server, which 
forwards the data to a server farm for automated analysis. The server farm’s automated analysis uses 
the same analysis engine that the Microsoft kernel debuggers use when you load a crash dump file into 
them. The analysis generates a bucket ID, which is a signature that identifies a particular crash type. 
Process hang detection
Windows Error reporting is also used when an application hangs and stops work because of some 
defect or bug in its code. An immediate effect of an application hanging is that it would not react to 
any user interaction. The algorithm used for detecting a hanging application depends on the applica-
tion type: the Modern application stack detects that a Centennial or UWP application is hung when 
a request sent from the HAM (Host Activity Manager) is not processed after a well-defined timeout 
(usually 30 seconds); the Task manager detects a hung application when an application does not reply 
552 
CHAPTER 10 Management, diagnostics, and tracing
to the WM_QUIT message; Win32 desktop applications are considered not responding and hung when 
a foreground window stops to process GDI messages for more than 5 seconds.
Describing all the hung detection algorithms is outside the scope of this book. Instead, we will con-
sider the most likely case of a classical Win32 desktop application that stopped to respond to any user 
input. The detection starts in the Win32k kernel driver, which, after the 5-second timeout, sends a mes-
sage to the DwmApiPort ALPC port created by the Desktop Windows Manager (DWM.exe). The DWM 
processes the message using a complex algorithm that ends up creating a “ghost” window on top of the 
hanging window. The ghost redraws the window’s original content, blurring it out and adding the (Not 
Responding) string in the title. The ghost window processes GDI messages through an internal message 
pump routine, which intercepts the close, exit, and activate messages by calling the ReportHang routine 
exported by the Windows User Mode Crash Reporting DLL (faultrep.dll). The ReportHang function simply 
builds a WERSVC_REPORT_HANG message and sends it to the WER service to wait for a reply.
The WER service processes the message and initializes the Hang reporting by reading settings values 
from the HKLM\Software\Microsoft\Windows\Windows Error Reporting\Hangs root registry key. In par-
ticular, the MaxHangrepInstances value is used to indicate how many hanging reports can be generated 
in the same time (the default number is eight if the value does not exist), while the TerminationTimeout 
value specifies the time that needs to pass after WER has tried to terminate the hanging process before 
considering the entire system to be in hanging situation (10 seconds by default). This situation can happen 
for various reasons—for example, an application has an active pending IRP that is never completed by 
a kernel driver. The WER service opens the hanging process and obtains its token, and some other basic 
information. It then creates a shared memory section object to store them (similar to user application 
crashes; in this case, the shared section has a name: Global\). 
A WerFault process is spawned in a suspended state using the faulting process’s token and the -h 
command-line switch (which is used to specify to generate a report for a hanging process). Unlike 
with user application crashes, a snapshot of the hanging process is taken from the WER service using 
a full SYSTEM token by invoking the the PssNtCaptureSnapshot API exported in Ntdll. The snapshot’s 
handle is duplicated in the suspended WerFault process, which is resumed after the snapshot has been 
successfully acquired. When the WerFault starts, it signals an event indicating that the report genera-
tion has started. From this stage, the original process can be terminated. Information for the report is 
grabbed from the cloned process.
The report for a hanging process is similar to the one acquired for a crashing process: The WerFault 
process starts by querying the value of the Debugger registry value located in the global HKLM\
Software\Microsoft\Windows\Windows Error Reporting\Hangs root registry key. If there is a valid 
debugger, it is launched and attached to the original hanging process. In case the Disable registry value 
is set to 1, the procedure is aborted and the WerFault process exits without generating any report. 
Otherwise, WerFault opens the shared memory section, validates it, and grabs all the information 
previously saved by the WER service. The report is initialized by using the WerReportCreate func-
tion exported in WER.dll and used also for crashing processes. The dialog box for a hanging process 
(shown in Figure 10-44) is always displayed independently on the WER configuration. Finally, the 
WerReportSubmit function (exported in WER.dll) is used to generate all the files for the report (includ-
ing the minidump file) similarly to user applications crashes (see the “Crash report generation” section 
earlier in this chapter). The report is finally sent to the Online Crash Analysis server.
CHAPTER 10 Management, diagnostics, and tracing
553
FIGURE 10-44 The Windows Error Reporting dialog box for hanging applications.
After the report generation is started and the WERSVC_HANG_REPORTING_STARTED message 
is returned to DWM, WER kills the hanging process using the TerminateProcess API. If the process 
is not terminated in an expected time frame (generally 10 seconds, but customizable through the 
TerminationTimeout setting as explained earlier), the WER service relaunches another WerFault instance 
running under a full SYSTEM token and waits another longer timeout (usually 60 seconds but custom-
izable through the LongTerminationTimeout setting). If the process is not terminated even by the end 
of the longer timeout, WER has no other chances than to write an ETW event on the Application event 
log, reporting the impossibility to terminate the process. The ETW event is shown in Figure 10-45. 
Note that the event description is misleading because WER hasn’t been able to terminate the hanging 
application.
FIGURE 10-45 ETW error event written to the Application log for a nonterminating hanging application.
554 
CHAPTER 10 Management, diagnostics, and tracing
Global flags
Windows has a set of flags stored in two systemwide global variables named NtGlobalFlag and 
NtGlobalFlag2 that enable various internal debugging, tracing, and validation support in the 
operating system. The two system variables are initialized from the registry key HKLM\SYSTEM\
CurrentControlSet\Control\Session Manager in the values GlobalFlag and GlobalFlag2 at system boot 
time (phase 0 of the NT kernel initialization). By default, both registry values are 0, so it’s likely that 
on your systems, you’re not using any global flags. In addition, each image has a set of global flags 
that also turn on internal tracing and validation code (although the bit layout of these flags is slightly 
different from the systemwide global flags).
Fortunately, the debugging tools contain a utility named Gflags.exe that you can use to view and 
change the system global flags (either in the registry or in the running system) as well as image global 
flags. Gflags has both a command-line and a GUI interface. To see the command-line flags, type 
gflags /?. If you run the utility without any switches, the dialog box shown in Figure 10-46 is displayed.
FIGURE 10-46 Setting system debugging options with GFlags.
CHAPTER 10 Management, diagnostics, and tracing
555
Flags belonging to the Windows Global flags variables can be split in different categories:
I 
Kernel flags are processed directly by various components of the NT kernel (the heap manager,
exceptions, interrupts handlers, and so on).
I 
User flags are processed by components running in user-mode applications (usually Ntdll).
I 
Boot-only flags are processed only when the system is starting.
I 
Per-image file global flags (which have a slightly different meaning than the others) are pro-
cessed by the loader, WER, and some other user-mode components, depending on the user-
mode process context in which they are running.
The names of the group pages shown by the GFlags tool is a little misleading. Kernel, boot-only, and 
user flags are mixed together in each page. The main difference is that the System Registry page allows 
the user to set global flags on the GlobalFlag and GlobalFlag2 registry values, parsed at system boot time. 
This implies that eventual new flags will be enabled only after the system is rebooted. The Kernel Flags 
page, despite its name, does not allow kernel flags to be applied on the fly to a live system. Only certain 
user-mode flags can be set or removed (the enable page heap flag is a good example) without requiring 
a system reboot: the Gflags tool sets those flags using the NtSetSystemInformation native API (with the 
SystemFlagsInformation information class). Only user-mode flags can be set in that way.
EXPERIMENT: Viewing and setting global flags
You can use the !gflag kernel debugger command to view and set the state of the NtGlobalFlag 
kernel variable. The !gflag command lists all the flags that are enabled. You can use !gflag -? to 
get the entire list of supported global flags. At the time of this writing, the !gflag extension has 
not been updated to display the content of the NtGlobalFlag2 variable.
The Image File page requires you to fill in the file name of an executable image. Use this option 
to change a set of global flags that apply to an individual image (rather than to the whole system). 
The page is shown in Figure 10-47. Notice that the flags are different from the operating system ones 
shown in Figure 10-46. Most of the flags and the setting available in the Image File and Silent Process 
Exit pages are applied by storing new values in a subkey with the same name as the image file (that is, 
notepad.exe for the case shown in Figure 10-47) under the HKLM\SOFTWARE\Microsoft\Windows NT\
CurrentVersion\Image File Execution Options registry key (also known as the IFEO key). In particular, 
the GlobalFlag (and GlobalFlag2) value represents a bitmask of all the available per-image global flags.
EXPERIMENT: Viewing and setting global flags
You can use the !gflag kernel debugger command to view and set the state of the NtGlobalFlag
kernel variable. The !gflag command lists all the flags that are enabled. You can use !gflag -? to 
get the entire list of supported global flags. At the time of this writing, the !gflag extension has 
not been updated to display the content of the NtGlobalFlag2 variable.
556 
CHAPTER 10 Management, diagnostics, and tracing
FIGURE 10-47 Setting per-image global flags with GFlags.
When the loader initializes a new process previously created and loads all the dependent librar-
ies of the main base executable (see Chapter 3 of Part 1 for more details about the birth of a process), 
the system processes the per-image global flags. The LdrpInitializeExecutionOptions internal function 
opens the IFEO key based on the name of the base image and parses all the per-image settings and 
flags. In particular, after the per-image global flags are retrieved from the registry, they are stored in 
the NtGlobalFlag (and NtGlobalFlag2) field of the process PEB. In this way, they can be easily accessed 
by any image mapped in the process (including Ntdll). 
Most of the available global flags are documented at https://docs.microsoft.com/en-us/
windows-hardware/drivers/debugger/gflags-flag-table.
EXPERIMENT: Troubleshooting Windows loader issues
In the “Watching the image loader” experiment in Chapter 3 of Part 1, you used the GFlags tool 
to display the Windows loader runtime information. That information can be useful for under-
standing why an application does not start at all (without returning any useful error informa-
tion). You can retry the same experiment on mspaint.exe by renaming the Msftedit.dll file (the 
Rich Text Edit Control library) located in %SystemRoot%\system32. Indeed, Paint depends on 
that DLL indirectly. The Msftedit library is loaded dynamically by MSCTF.dll. (It is not statically 
EXPERIMENT: Troubleshooting Windows loader issues
In the “Watching the image loader” experiment in Chapter 3 of Part 1, you used the GFlags tool 
to display the Windows loader runtime information. That information can be useful for under-
standing why an application does not start at all (without returning any useful error informa-
tion). You can retry the same experiment on mspaint.exe by renaming the Msftedit.dll file (the 
Rich Text Edit Control library) located in %SystemRoot%\system32. Indeed, Paint depends on 
that DLL indirectly. The Msftedit library is loaded dynamically by MSCTF.dll. (It is not statically 
CHAPTER 10 Management, diagnostics, and tracing
557
linked in the Paint executable.) Open an administrative command prompt window and type the 
following commands:
cd /d c:\windows\system32 
takeown /f msftedit.dll 
icacls msftedit.dll /grant Administrators:F  
ren msftedit.dll msftedit.disabled
Then enable the loader snaps using the Gflags tool, as specified in the “Watching the image 
loader” experiment. If you start mspaint.exe using Windbg, the loader snaps would be able to 
highlight the problem almost immediately, returning the following text:
142c:1e18 @ 00056578 - LdrpInitializeNode - INFO: Calling init routine 00007FFC79258820 for 
DLL "C:\Windows\System32\MSCTF.dll"142c:133c @ 00229625 - LdrpResolveDllName - ENTER: DLL 
name: .\MSFTEDIT.DLL 
142c:133c @ 00229625 - LdrpResolveDllName - RETURN: Status: 0xc0000135 
142c:133c @ 00229625 - LdrpResolveDllName - ENTER: DLL name: C:\Program Files\Debugging Tools 
for Windows (x64)\MSFTEDIT.DLL 
142c:133c @ 00229625 - LdrpResolveDllName - RETURN: Status: 0xc0000135 
142c:133c @ 00229625 - LdrpResolveDllName - ENTER: DLL name: C:\Windows\system32\MSFTEDIT.DLL 
142c:133c @ 00229625 - LdrpResolveDllName - RETURN: Status: 0xc0000135 
. . .  
C:\Users\test\AppData\Local\Microsoft\WindowsApps\MSFTEDIT.DLL 
142c:133c @ 00229625 - LdrpResolveDllName - RETURN: Status: 0xc0000135 
142c:133c @ 00229625 - LdrpSearchPath - RETURN: Status: 0xc0000135 
142c:133c @ 00229625 - LdrpProcessWork - ERROR: Unable to load DLL: "MSFTEDIT.DLL", Parent 
Module: "(null)", Status: 0xc0000135 
142c:133c @ 00229625 - LdrpLoadDllInternal - RETURN: Status: 0xc0000135 
142c:133c @ 00229625 - LdrLoadDll - RETURN: Status: 0xc0000135
Kernel shims
New releases of the Windows operating system can sometime bring issues with old drivers, which 
can have difficulties in operating in the new environment, producing system hangs or blue screens of 
death. To overcome the problem, Windows 8.1 introduced a Kernel Shim engine that’s able to dynami-
cally modify old drivers, which can continue to run in the new OS release. The Kernel Shim engine is 
implemented mainly in the NT kernel. Driver’s shims are registered through the Windows Registry and 
the Shim Database file. Drivers’ shims are provided by shim drivers. A shim driver uses the exported 
KseRegisterShimEx API to register a shim that can be applied to target drivers that need it. The Kernel 
Shim engine supports mainly two kinds of shims applied to devices or drivers.
Shim engine initialization
In early OS boot stages, the Windows Loader, while loading all the boot-loaded drivers, reads and 
maps the driver compatibility database file, located in %SystemRoot%\apppatch\Drvmain.sdb (and, if 
it exists, also in the Drvpatch.sdb file). In phase 1 of the NT kernel initialization, the I/O manager starts 
the two phases of the Kernel Shim engine initialization. The NT kernel copies the binary content of 
linked in the Paint executable.) Open an administrative command prompt window and type the 
following commands:
cd /d c:\windows\system32
takeown /f msftedit.dll
icacls msftedit.dll /grant Administrators:F 
ren msftedit.dll msftedit.disabled
Then enable the loader snaps using the Gflags tool, as specified in the “Watching the image 
loader” experiment. If you start mspaint.exe using Windbg, the loader snaps would be able to 
highlight the problem almost immediately, returning the following text:
142c:1e18 @ 00056578 - LdrpInitializeNode - INFO: Calling init routine 00007FFC79258820 for 
DLL "C:\Windows\System32\MSCTF.dll"142c:133c @ 00229625 - LdrpResolveDllName - ENTER: DLL 
name: .\MSFTEDIT.DLL
142c:133c @ 00229625 - LdrpResolveDllName - RETURN: Status: 0xc0000135
142c:133c @ 00229625 - LdrpResolveDllName - ENTER: DLL name: C:\Program Files\Debugging Tools 
for Windows (x64)\MSFTEDIT.DLL
142c:133c @ 00229625 - LdrpResolveDllName - RETURN: Status: 0xc0000135
142c:133c @ 00229625 - LdrpResolveDllName - ENTER: DLL name: C:\Windows\system32\MSFTEDIT.DLL
142c:133c @ 00229625 - LdrpResolveDllName - RETURN: Status: 0xc0000135
. . . 
C:\Users\test\AppData\Local\Microsoft\WindowsApps\MSFTEDIT.DLL
142c:133c @ 00229625 - LdrpResolveDllName - RETURN: Status: 0xc0000135
142c:133c @ 00229625 - LdrpSearchPath - RETURN: Status: 0xc0000135
142c:133c @ 00229625 - LdrpProcessWork - ERROR: Unable to load DLL: "MSFTEDIT.DLL", Parent 
Module: "(null)", Status: 0xc0000135
142c:133c @ 00229625 - LdrpLoadDllInternal - RETURN: Status: 0xc0000135
142c:133c @ 00229625 - LdrLoadDll - RETURN: Status: 0xc0000135
558 
CHAPTER 10 Management, diagnostics, and tracing
the database file(s) in a global buffer allocated from the paged pool (pointed by the internal global 
KsepShimDb variable). It then checks whether Kernel Shims are globally disabled. In case the system 
has booted in Safe or WinPE mode, or in case Driver verifier is enabled, the shim engine wouldn’t 
be enabled. The Kernel Shim engine is controllable also using system policies or through the HKLM\
System\CurrentControlSet\Control\Compatibility\DisableFlags registry value. The NT kernel then gath-
ers low-level system information needed when applying device shims, like the BIOS information and 
OEM ID, by checking the System Fixed ACPI Descriptor Table (FADT). The shim engine registers the first 
built-in shim provider, named DriverScope, using the KseRegisterShimEx API. Built-in shims provided by 
Windows are listed in Table 10-21. Some of them are indeed implemented in the NT kernel directly and 
not in any external driver. DriverScope is the only shim registered in phase 0.
TABLE 10-21 Windows built-in kernel shims
Shim Name
GUID
Purpose
Module
DriverScope
{BC04AB45-EA7E-4A11-A7BB-
977615F4CAAE}
The driver scope shim is used to collect 
health ETW events for a target driver. Its 
hooks do nothing other than writing an 
ETW event before or after calling the origi-
nal nonshimmed callbacks.
NT kernel
Version Lie
{3E28B2D1-E633-408C-8E9B-
2AFA6F47FCC3} (7.1)
(47712F55-BD93-43FC-9248-
B9A83710066E} (8)
{21C4FB58-D477-4839-A7EA-
AD6918FBC518} (8.1)
The version lie shim is available for 
Windows 7, 8, and 8.1. The shim commu-
nicates a previous version of the OS when 
required by a driver in which it is applied.
NT kernel
SkipDriverUnload
{3E8C2CA6-34E2-4DE6-8A1E-
9692DD3E316B}
The shim replaces the driver’s unload 
routine with one that doesn’t do anything 
except logging an ETW event.
NT kernel
ZeroPool
{6B847429-C430-4682-B55F-
FD11A7B55465}
Replace the ExAllocatePool API with a 
function that allocates the pool memory 
and zeroes it out.
NT kernel
ClearPCIDBits
{B4678DFF-BD3E-46C9-
923B-B5733483B0B3}
Clear the PCID bits when some antivirus 
drivers are mapping physical memory 
referred by CR3.
NT kernel
Kaspersky
{B4678DFF-CC3E-46C9-
923B-B5733483B0B3}
Shim created for specific Kaspersky filter 
drivers for masking the real value of the 
UseVtHardware registry value, which could 
have caused bug checks on old versions of 
the antivirus.
NT kernel
Memcpy
{8A2517C1-35D6-4CA8-9EC8-
98A12762891B}
Provides a safer (but slower) memory copy 
implementation that always zeroes out the 
destination buffer and can be used with 
device memory.
NT kernel
KernelPadSectionsOverride
{4F55C0DB-73D3-43F2-9723-