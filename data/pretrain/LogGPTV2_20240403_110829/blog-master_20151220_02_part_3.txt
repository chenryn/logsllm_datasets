```  
select dy_generate_test_ddl();  
```  
创建主键：  
```  
select dy_ddl('alter table digoal.userinfo add constraint pk_userinfo primary key (userid)');  
select dy_ddl('alter table digoal.session add constraint pk_session primary key (userid)');  
```  
生成用于run on any测试的小表数据（每个节点的数据量为50万）：  
```  
select dy_ddl('insert into digoal.tbl_small select generate_series(1,500000)');  
```  
在psql中观察进度：  
```  
select * from dy('select application_name::int,query,now()-query_start from pg_stat_activity where state=$$active$$ andid<>pg_backend_pid()') as t(c1 int,c2 text,c3 interval)  where c2 ~ 'dy_' order by 1;  
\watch 1  
```  
创建实体测试函数以及对应的代理函数：  
基于主键的查询, run on NR  
```  
select dy_ddl('  
CREATE OR REPLACE FUNCTION digoal.query_pk(IN i_userid int, OUT dbid int, OUT userid int, OUT info text)  
     RETURNS record  
     LANGUAGE plpgsql  
     STRICT  
    AS $function$  
      declare  
      begin  
        select t.dbid,t.userid,t.info into dbid,userid,info from digoal.userinfo t where t.userid=i_userid;  
        return;  
      end;  
    $function$  
');  
CREATE OR REPLACE FUNCTION query_pk(IN i_userid int, OUT dbid int, OUT userid int, OUT info text)                           
 RETURNS setof record  
 LANGUAGE plproxy  
 STRICT  
AS $function$  
  cluster 'rds_pg_cluster';  
  run on i_userid;  
  target digoal.query_pk;  
$function$;  
```  
插入, run on NR  
```  
select dy_ddl('  
CREATE OR REPLACE FUNCTION digoal.insert_log(IN i_userid int)  
     RETURNS void  
     LANGUAGE plpgsql  
     STRICT  
    AS $function$  
      declare  
      begin  
        set synchronous_commit=off;  
        insert into digoal.login_log (userid,db_user,client_addr,client_port,server_addr,server_port,login_time)  
   values (i_userid,current_user,inet_client_addr(),inet_client_port(),inet_server_addr(),inet_server_port(),now());  
      end;  
    $function$  
');  
CREATE OR REPLACE FUNCTION insert_log(IN i_userid int)                           
 RETURNS void  
 LANGUAGE plproxy  
 STRICT  
AS $function$  
  cluster 'rds_pg_cluster';  
  run on i_userid;  
  target digoal.insert_log;  
$function$;  
```  
基于主键的查询+插入, run on NR  
```  
select dy_ddl('  
CREATE OR REPLACE FUNCTION digoal.query_insert(IN i_userid int, OUT dbid int, OUT userid int, OUT info text)  
     RETURNS record  
     LANGUAGE plpgsql  
     STRICT  
    AS $function$  
      declare  
      begin  
        set synchronous_commit=off;  
        select t.dbid,t.userid,t.info into dbid,userid,info from digoal.userinfo t where t.userid=i_userid;  
        insert into digoal.login_log (userid,db_user,client_addr,client_port,server_addr,server_port,login_time)  
   values (i_userid,current_user,inet_client_addr(),inet_client_port(),inet_server_addr(),inet_server_port(),now());  
        return;  
      end;  
    $function$  
');  
CREATE OR REPLACE FUNCTION query_insert(IN i_userid int, OUT dbid int, OUT userid int, OUT info text)                           
 RETURNS setof record  
 LANGUAGE plproxy  
 STRICT  
AS $function$  
  cluster 'rds_pg_cluster';  
  run on i_userid;  
  target digoal.query_insert;  
$function$;  
```  
基于主键的更新, run on NR  
```  
select dy_ddl('  
CREATE OR REPLACE FUNCTION digoal.update_pk(IN i_userid int)  
     RETURNS void  
     LANGUAGE plpgsql  
     STRICT  
    AS $function$  
      declare  
      begin  
        set synchronous_commit=off;  
        update digoal.session t set last_login=now() where t.userid=i_userid;  
      end;  
    $function$  
');  
CREATE OR REPLACE FUNCTION update_pk(IN i_userid int)                           
 RETURNS void  
 LANGUAGE plproxy  
 STRICT  
AS $function$  
  cluster 'rds_pg_cluster';  
  run on i_userid;  
  target digoal.update_pk;  
$function$;  
```  
基于主键的查询+更新+插入, run on NR  
```  
select dy_ddl('  
CREATE OR REPLACE FUNCTION digoal.query_update_insert(IN i_userid int, OUT dbid int, OUT userid int, OUT info text)  
     RETURNS record  
     LANGUAGE plpgsql  
     STRICT  
    AS $function$  
      declare  
      begin  
        set synchronous_commit=off;  
        select t.dbid,t.userid,t.info into dbid,userid,info from digoal.userinfo t where t.userid=i_userid;  
        insert into digoal.login_log (userid,db_user,client_addr,client_port,server_addr,server_port,login_time)  
   values (i_userid,current_user,inet_client_addr(),inet_client_port(),inet_server_addr(),inet_server_port(),now());  
        update digoal.session t set last_login=now() where t.userid=i_userid;  
        return;  
      end;  
    $function$  
');  
CREATE OR REPLACE FUNCTION query_update_insert(IN i_userid int, OUT dbid int, OUT userid int, OUT info text)                           
 RETURNS setof record  
 LANGUAGE plproxy  
 STRICT  
AS $function$  
  cluster 'rds_pg_cluster';  
  run on i_userid;  
  target digoal.query_update_insert;  
$function$;  
```  
count汇聚, run on ALL  
```  
select sum(cnt) from (select cnt from dy('select count(*) from digoal.login_log') as t(cnt int8)) t;  
select sum(cnt) from (select cnt from dy('select count(*) from digoal.userinfo') as t(cnt int8)) t;  
```  
全量复制数据, run on ANY  
```  
select dy_ddl('  
CREATE OR REPLACE FUNCTION digoal.query_smalltbl(IN i_userid int, OUT userid int, OUT info text)  
     RETURNS record  
     LANGUAGE plpgsql  
     STRICT  
    AS $function$  
      declare  
      begin  
        select t.userid,t.info into userid,info from digoal.tbl_small t where t.userid=i_userid;  
        return;  
      end;  
    $function$  
');  
CREATE OR REPLACE FUNCTION query_smalltbl(IN i_userid int, OUT userid int, OUT info text)                           
 RETURNS setof record  
 LANGUAGE plproxy  
 STRICT  
AS $function$  
  cluster 'rds_pg_cluster';  
  run on ANY;  
  target digoal.query_smalltbl;  
$function$;  
```  
测试：  
```  
postgres=# select (query_pk(id)).* from generate_series(0,63) t(id) order by dbid;  
 dbid | userid | info   
------+--------+------  
    0 |     32 |   
    0 |      0 |   
    1 |     33 |   
    1 |      1 |   
    2 |      2 |   
    2 |     34 |   
......  
   31 |     31 |   
   31 |     63 |   
(64 rows)  
```  
测试基于主键的查询：  
```  
 vi test.sql  
\setrandom id 0 32000000  
select query_pk(:id);  
pgbench -M prepared -n -r -f ./test.sql -P 1 -c 45 -j 45 -T 30  
progress: 1.0 s, 10954.4 tps, lat 3.687 ms stddev 5.910  
progress: 2.0 s, 20403.0 tps, lat 2.008 ms stddev 0.553  
progress: 3.0 s, 20725.8 tps, lat 1.977 ms stddev 0.479  
progress: 4.0 s, 20365.1 tps, lat 2.012 ms stddev 0.527  
progress: 5.0 s, 20135.4 tps, lat 2.035 ms stddev 0.617  
progress: 6.0 s, 20722.6 tps, lat 1.977 ms stddev 0.450  
progress: 7.0 s, 20424.4 tps, lat 2.006 ms stddev 0.504  
progress: 8.0 s, 20631.0 tps, lat 1.985 ms stddev 0.507  
progress: 9.0 s, 20270.0 tps, lat 2.021 ms stddev 0.493  
progress: 10.0 s, 20190.1 tps, lat 2.030 ms stddev 0.492  
......  
```  
测试插入：  
```  
vi test.sql  
\setrandom id 0 32000000  
select insert_log(:id);  
pgbench -M prepared -n -r -f ./test.sql -P 1 -c 45 -j 45 -T 30  
progress: 1.0 s, 11763.3 tps, lat 3.505 ms stddev 5.379  
progress: 2.0 s, 21192.4 tps, lat 1.980 ms stddev 0.748  
progress: 3.0 s, 21406.8 tps, lat 1.961 ms stddev 0.492  
progress: 4.0 s, 21471.7 tps, lat 1.954 ms stddev 0.484  
progress: 5.0 s, 21095.4 tps, lat 1.989 ms stddev 0.718  
progress: 6.0 s, 21494.3 tps, lat 1.953 ms stddev 0.458  
progress: 7.0 s, 21553.9 tps, lat 1.947 ms stddev 0.480  
progress: 8.0 s, 21600.1 tps, lat 1.942 ms stddev 0.471  
progress: 9.0 s, 21665.0 tps, lat 1.937 ms stddev 0.465  
progress: 10.0 s, 21635.1 tps, lat 1.940 ms stddev 0.495  
......  
```  
测试基于主键的查询+插入  
```  
vi test.sql  
\setrandom id 0 32000000  
select query_insert(:id);  