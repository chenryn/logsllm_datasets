  dm rm --force $NODE_NAME
  dm create --driver virtualbox $NODE_NAME
done
alias dms="docker-machine ssh"
export IP=$(docker-machine ip node-1)
dms node-1 docker swarm init --advertise-addr $IP;
export JOIN_TOKEN=$(dms node-1 docker swarm join-token worker -q);
for NODE in `seq 2 5`; do
  NODE_NAME="node-${NODE}"
  dms $NODE_NAME docker swarm join --token $JOIN_TOKEN $IP:2377
done;
dms node-1 docker node promote node-2 node-3
```
前面的脚本首先删除(如果存在)，然后重新创建名为`node-1`到`node-5`的五个虚拟机，然后在`node-1`上初始化一个 Swarm。之后，剩余的四个虚拟机被添加到群中，最后，`node-2`和`node-3`被提升为经理状态，以使群高度可用。整个脚本执行不到 5 分钟，可以根据需要重复多次。完整的脚本可以在仓库中找到，在子文件夹`docker-swarm`中；它被称为`create-swarm.sh`
强烈建议始终编写脚本，从而实现操作自动化。
# 使用与多克一起玩(PWD)生成一个群
为了试验 Docker Swarm 而不必在我们的计算机上本地安装或配置任何东西，我们可以使用 PWD。PWD 是一个可以用浏览器访问的网站，它为我们提供了创建一个最多由五个节点组成的 Docker Swarm 的能力。顾名思义，它绝对是一个游乐场，我们可以使用它的时间仅限于每节课四个小时。我们可以打开任意多个会话，但每个会话会在四小时后自动结束。除此之外，这是一个功能齐全的 Docker 环境，非常适合修补 Docker 或演示一些功能。
让我们现在进入网站。在浏览器中，导航至网站[https://labs.play-with-docker.com](https://labs.play-with-docker.com)。您将看到一个欢迎和登录屏幕。使用您的 Docker 身份证登录。成功登录后，您将看到一个屏幕，如下图所示:
![](img/99773de2-d29a-4f48-b752-12429090c2fe.png)
Play with Docker window
我们可以立即看到，有一个大计时器从四个小时开始倒计时。这就是我们在这堂课还剩多少时间。此外，我们看到一个+ ADD NEW INSTANCE 链接。单击它以创建新的 Docker 主机。当您这样做时，您的屏幕应该如下图所示:
![](img/eddf6349-d213-4378-817c-3d53f79435a6.png)
PWD with one new node
在左侧，我们看到新创建的节点，它有自己的 IP 地址(`192.168.0.53`)和名称(`node1`)。在右侧，我们在屏幕的上半部分有一些关于这个新节点的附加信息，在下半部分有一个终端。是的，这个终端用于在我们刚刚创建的这个节点上执行命令。该节点安装了 Docker CLI，因此我们可以在其上执行所有熟悉的 Docker 命令，如`docker version`。试试看。
但是现在我们想创建一个 Docker Swarm。在浏览器的终端中执行以下命令:
```
$ docker swarm init --advertise-addr=eth0
```
由前面的命令生成的输出对应于我们之前在工作站上使用单节点集群和使用 VirtualBox 或 Hyper-V 的本地集群的试验中已经知道的内容。重要的信息再次是`join`命令，我们希望使用该命令将其他节点加入到我们刚刚创建的集群中。
您可能已经注意到，这次我们在群组`init`命令中指定了参数`--advertise-addr`。*为什么这里有这个必要？*原因是 PWD 生成的节点有多个关联的 IP 地址。通过在节点上执行命令`ip a`，可以很容易地验证这一点。该命令将向我们显示确实存在两个端点，`eth0`和`eth1`。因此，我们必须向新的群管理器明确指定我们想要使用哪一个。在我们的情况下，是`eth0`。
通过单击+添加新实例链接四次，在 PWD 创建另外四个节点。新节点将被称为`node2`、`node3`、`node4`和`node5`，并将全部列在左侧。如果单击左侧的某个节点，则右侧会显示相应节点的详细信息以及该节点的终端窗口。
选择每个节点(2 到 5)，并在各自的终端中执行从引导节点(`node1`)复制的`docker swarm join`命令:
![](img/2cb981b7-6ff9-4c84-a848-9615936bb6f7.png)
Joining a node to the swarm in PWD
一旦您将所有四个节点加入群，切换回`node1`并列出所有节点，不出所料，结果如下:
![](img/fb8434ae-4808-47ff-80b6-7af53de12fe9.png)
List of all the nodes of the swarm in PWD
还是在`node1`上，我们现在可以提升`node2`和`node3`，让蜂群高度可用:
```
$ docker node promote node2 node3
Node node2 promoted to a manager in the swarm.
Node node3 promoted to a manager in the swarm.
```
有了这些，我们在 PWD 的蜂群就可以接受工作量了。我们创建了一个高可用性的 Docker Swarm，它有三个管理节点，形成了一个 Raft 共识组和两个工作节点。
# 在云中创建 DockerSwarm
到目前为止，我们创建的所有 Docker 群集都非常适合用于开发、实验或演示目的。但是，如果我们想创建一个可以用作生产环境的群，在其中运行我们的任务关键型应用，那么我们需要创建一个，我很想说，真正的云中或内部的群。在本书中，我们将演示如何在亚马逊 AWS 中创建一个 Docker Swarm。
创建集群的一种方法是使用 **Docker 机器** ( **DM** )。DM 有一个针对亚马逊 AWS 的驱动。如果我们在 AWS 上有一个账户，我们需要 AWS 访问密钥 ID 和 AWS 机密访问密钥。我们可以将这两个值添加到名为`~/.aws/configuration`的文件中。它应该如下所示:
```
[default]
aws_access_key_id = AKID1234567890
aws_secret_access_key = MY-SECRET-KEY
```
每次我们运行`docker-machine create`，DM 都会在那个文件中查找那些值。关于如何获取 AWS 账号以及如何获取两个密钥的更深入的信息，请查阅此链接:[http://dockr.ly/2FFelyT](http://dockr.ly/2FFelyT)。
一旦我们有了一个 AWS 帐户，并且已经将访问密钥存储在配置文件中，我们就可以开始构建我们的群了。必要的代码看起来与我们在 VirtualBox 中本地机器上创建群时使用的代码完全相同。让我们从第一个节点开始:
```
$ docker-machine create --driver amazonec2 \
 --amazonec2-region us-east-1 aws-node-1
```
这将在请求的区域中创建一个名为`aws-node-1`的 EC2 实例(在我的例子中为`us-east-1`)。前面命令的输出如下图所示:
![](img/c1fe0cc1-842b-40a2-b207-cf76e1d589ff.png)
Creating a swarm node on AWS with Docker machine
它看起来非常类似于我们通过使用 VirtualBox 已经知道的输出。我们现在可以配置我们终端来远程访问 EC2 实例:
```
$ eval $(docker-machine env aws-node-1)
```
这将相应地配置 Docker CLI 使用的环境变量:
![](img/69f4ab33-b0b2-4507-ba75-d6670af671ab.png)
Environment variables used by Docker to enable remote access to the AWS EC2 node
出于安全原因，**传输层安全性** ( **TLS** )用于我们的命令行界面和远程节点之间的通信。DM 将必要的证书复制到我们分配给环境变量`DOCKER_CERT_PATH`的路径中。
我们现在在终端中执行的所有 Docker 命令都将在我们的 EC2 实例上的亚马逊 AWS 中远程执行。让我们尝试在此节点上运行 Nginx:
```
$ docker container run -d -p 8000:80 nginx:alpine
```
我们可以使用`docker container ls`来验证容器是否正在运行。如果是，那我们就用`curl`来测试一下:
```
$ curl -4 :8000
```
这里，``是 AWS 节点的公共 IP 地址；就我而言，应该是`35.172.240.127`。可悲的是，这不起作用；前面的命令超时:
![](img/ccac6a36-4ad5-4f82-8883-5773314d1b3b.png)
Accessing Nginx on the AWS node times out
原因是我们的节点是 AWS **安全组** ( **SG** )的一部分。默认情况下，拒绝访问该 SG 内的对象。因此，我们必须找出我们的实例属于哪个 SG，并显式配置访问。为此，我们通常使用 AWS 控制台。转到 EC2 仪表板，并选择左侧的实例。找到名为`aws-node-1`的 EC2 实例并选择它。在详细信息视图中的“安全组”下，单击链接 docker-machine，如下图所示:
![](img/17c7590a-30bf-4ffc-adfd-1a97e4b8bde4.png)
Locating the SG to which our swarm node belongs This will lead us to the SG page with the SG `docker-machine` pre-selected. In the details section under the tab Inbound, add a new rule for your IP address (the IP address of workstation):![](img/1a9c0b67-16cf-46da-9bf8-a10aabff2887.png) Open access to SG for our computer
在前面的截图中，IP 地址`70.113.114.234`恰好是分配给我个人工作站的那个。我已经启用了从这个 IP 地址到`docker-machine` SG 的所有入站流量。请注意，在生产系统中，您应该非常小心 SG 的哪些端口向公众开放。通常是端口`80`和`443`进行 HTTP 和 HTTPS 访问。其他一切都是对黑客的潜在邀请。
你可以通过像[https://www.whatismyip.com/](https://www.whatismyip.com/)这样的服务获得自己的 IP 地址。现在，如果我们再次执行 [`curl`](https://www.whatismyip.com/) 命令，将返回 Nginx 的问候页面。
在我们离开 SG 之前，我们应该给它添加另一个规则。群节点需要能够通过 TCP 和 UDP 在端口`7946`和`4789`上自由通信，并通过 TCP 在端口`2377`上自由通信。我们现在可以用这些需求添加五个规则，其中源是 SG 本身，或者我们只定义一个更粗糙的规则，允许 SG 内的所有入站流量(在我的例子中为`sg-c14f4db3`):
![](img/84f1abab-ea6d-4d38-b711-326011fd817c.png)
SG rule to enable intra-swarm communication
现在，让我们继续创建剩余的四个节点。同样，我们可以使用脚本来简化这个过程:
```
$ for NODE in `seq 2 5`; do
    docker-machine create --driver amazonec2 \
        --amazonec2-region us-east-1 aws-node-${NODE}
done
```
在完成节点的配置后，我们可以用 DM 列出所有节点。在我的例子中，我看到了这个:
![](img/625bed21-00fe-42de-af72-c366143176e9.png)