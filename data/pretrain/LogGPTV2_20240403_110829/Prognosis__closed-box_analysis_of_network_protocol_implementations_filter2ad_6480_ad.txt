Nondeterminism Check. As explained in Remark 3.1, the learn-
ing module typically expects deterministic behavior (i.e., the same
input trace should trigger the same output trace). In general, non-
determinism can arise in our system for two reasons: (1) the ab-
stract alphabet is so simplified that concrete traces corresponding
to different behaviors are collapsed into the same input trace, or
(2) the implementation is producing nondeterministic outputs in
cases where it should not. For every Learner query, Prognosis
expects a deterministic answer, as it is attempting to build a de-
terministic model. However, due to the nature of active-learning,
environmental events such as latency and packet loss could cause
non-determinism to be observed. To avoid this Prognosis will exe-
cute the query a specified minimum number of times, and if these
are not all the same, it will continue to do so until a specified per-
centage of certainty is achieved. If after a limit number of queries
nondeterministic is discovered, the learning process pauses, and
the Adapter verifies the cause of the nondeterminism. If reason
769
(1) is the cause, the user will see that the abstraction is too coarse
and can provide a richer abstraction. While it is possible to use
more complex learning algorithms that can handle nondetermin-
ism in the traces, we argue that, because of reason (2), detecting
sources of nondeterminism is a powerful analysis technique that
can shed light on some undesired behaviors. As we show in Sec-
tion 6.2.4, Prognosis was able to unveil a complex bug in a QUIC
implementation thanks to the nondeterminism check.
Learned Model Analysis. If learning succeeds, Prognosis can pro-
duce visualizations of the models which can help a user understand
whether an implementation works as expected. In addition, Prog-
nosis also exposes various algorithms and decision procedures to
check properties of the learned models. For example, Prognosis
can check equivalence of models of two different implementations
of the same protocol (whether they accept the same input/output
traces). For Mealy machines, there are algorithms for performing
this equivalence check efficiently [24]. Prognosis can produce con-
crete example traces that show the difference between the behaviors
of the two implementations. We show in Section 6.2.5 how Prog-
nosis is able to unveil a complex bug in a QUIC implementation
thanks to these equivalence checks, and the visualizations of the
differences were instrumental in communicating the problem to
the developers.
Prognosis also allows the user to specify temporal properties in
logics such as LTL or CTL, e.g., Packet numbers are always increasing,
and check whether the models satisfy such properties. For Mealy
machines, this procedure simply boils down to checking that the
traces of the model are a subset of those allowed by the property,
a decidable problem [24]. For extended machines with counters,
this problem is in general undecidable and we rely on randomised
testing to make the analysis practical.
6 RESULTS
We evaluate Prognosis using two case studies. First, we show that
Prognosis can replicate prior works on learning models of TCP im-
plementations [22] (Section 6.1). Second, we use Prognosis to learn
models of different implementations of the IETF QUIC protocol,
which is undergoing standardization after successful initial devel-
opment at Google (Section 6.2). Overall, we evaluate Prognosis‚Äô
effectiveness in identifying unintended behavior in real protocol
implementations, as well as its modularity and reusability.
Prognosis was implemented using several programming lan-
guages. The abstract learner is implemented in 3,500 lines of Java
and uses the automata learning library LearnLib [25]. The extended
Mealy machine synthesizer is implemented in 300 lines of Python
and uses the Z3 SMT Solver[16].
Prognosis: Closed-Box Analysis of Network Protocol Implementations
SIGCOMM ‚Äô21, August 23‚Äì27, 2021, Virtual Event, USA
We provide Prognosis with the same abstract alphabet(cid:98)Œ£ and
6.1 Learning a TCP Implementation
In this case study, we demonstrate how Prognosis can reproduce
results from previous work on learning models of TCP implementa-
tions [22]. We learn the Ubuntu 20.04.1 LTS TCP stack, particularly
kernel version 5.8.0-40-generic.
translation pair (ùõº, ùõæ) used in prior work [22]. Concretely, the ab-
stract alphabet models the TCP flags for the packet, leave the se-
quence and acknowledgement numbers unspecified, and provide
the payload length.
(cid:98)Œ£ = {SYN(?,?,0), SYN+ACK(?,?,0), ACK(?,?,0), ACK+PSH(?,?,1),
FIN+ACK(?,?,0), RST(?,?,0), ACK+RST(?,?,0)}
To implement the abstraction function ùõº and the concretization
function ùõæ we need a reference implementation. To illustrate the
flexibility of Prognosis, we use the mapper implementing the TCP
logic designed in [22] as reference and instrument it. Note that
we could have used any other TCP implementation for this task.
Modifying the reference implementation required only 300 lines of
code to integrate with Scapy [8] instead of the >3000 lines of code
required to implement a concretization function in [22].
The model learned by Prognosis has 6 states and 42 transitions
and took 4,726 membership queries to learn. This model is slightly
different to the one learned by FiterƒÉu-Bro≈ütean et al. [22] due to
major differences made to the implementations over time. Unfor-
tunately, despite multiple attempts, we were not able to run the
prior technique by FiterƒÉu-Bro≈ütean et al. [22] on the new TCP
implementation and we cannot see what model it will learn now.
This case study and the difficulty of adapting prior work to new
implementations showed that we could reproduce the level of de-
tail obtained in prior work with very minor effort thanks to the
modular components of Prognosis.
While we do not perform any analysis in this case study, we show
that our synthesis procedure can help us derive richer models than
those considered in prior work. In particular, using the technique
described in Section 4.3, we could synthesize a model describing the
behavior of extra parameters such as the dataOffset. Remarkably,
applying this richer analysis only required changing one line of code
in the implementation‚Äîsimply selecting which concrete values of
the TCP implementation we wish to synthesize over.
6.2 Learning QUIC Implementations
In this section, we analyze 4 implementations of the QUIC protocol.
tion for the translation pair (ùõº, ùõæ), and a set of properties from the
QUIC specification to analyze. We show how Prognosis detected
behavior that led to a change in the QUIC specification, as well as
identified bugs in real implementations of the QUIC protocol.
We devise the abstract alphabet(cid:98)Œ£, provide a reference implementa-
6.2.1 Background. The QUIC protocol [31] combines specific
features of independent protocols that are commonly used together,
reducing the overhead that arises from having to coordinate these
features. Specifically, QUIC is optimized for the Web, and as such,
collapses the services provided by HTTP, TLS, and TCP into a single
super protocol. Therefore, QUIC is extremely complex, and its design
has been carefully thought out to ensure these services that were
previously isolated can be communicated efficiently. QUIC achieves
770
this goal using encapsulation. In TCP, a single packet is enough
to communicate everything needed, from specific signals like SYN
or ACK to the payload of the application layer itself. In QUIC, both
signaling, and data transmission happen in frames. A packet serves
merely as a mean of safely transporting different types of frames.
In total, QUIC provides 7 packet types and 20 frame types, each
responsible for signaling a specific aspect of the protocol. We will
not be diving into the details here, due to their complex nature, and
instead, we will introduce specific frames and packets as needed
to explain key properties of the protocol and defer the reader to
the QUIC specification [31] for further details. We will consider the
following QUIC implementations:
Quiche is Cloudflare‚Äôs QUIC implementation [1] that allows QUIC
connections to any website protected by Cloudflare network. Cloud-
flare‚Äôs CDN supports > 25 million websites.
Google‚Äôs QUIC implementation [3] runs on Google servers and
on Chromium browsers. Since October 7 of 2020, 25% of Google
Chrome users had QUIC support enabled by default, with that
proportion increasing over the followed weeks.
Facebook‚Äôs mvfst QUIC implementation [2] is used mainly in the
Proxygen server implementation. This server implementation is
responsible for powering most public facing connections to face-
book.com, as well as API connections used by the Facebook and
Instagram mobile apps.
QUIC-Tracker is an implementation [28] designed to run testing
scenarios over other implementations, with the goal of testing what
technologies different implementations support.
Because these first three implementations account for a large por-
tion of the web traffic, identifying erroneous behaviors in any of
them is of critical importance.
6.2.2
Learning Models of QUIC Implementations. We use Prog-
nosis to learn models of the first three QUIC implementations
described above and analyze a subset of the properties from IETF‚Äôs
Draft 29 [31]‚Äîe.g., The sequence number on each newly-issued con-
nection id must increase by 1 and An endpoint must not send data
on a stream at or beyond the final size. Prognosis requires 3 things
from the user: An abstract input alphabet, a translation pair (ùõº, ùõæ)
to be able to convert between abstract and concrete alphabets, and
optionally, a set of properties Œ¶ that we would like to test. We use
an abstract input alphabet(cid:98)Œ£ with 7 symbols:
(cid:98)Œ£ = {INITIAL(?,?)[CRYPTO], INITIAL(?,?)[ACK,HANDSHAKE_DONE],
HANDSHAKE(?,?)[ACK,CRYPTO],
HANDSHAKE(?,?)[ACK,HANDSHAKE_DONE],
SHORT(?,?)[ACK,MAX_DATA,MAX_STREAM_DATA],
SHORT(?,?)[ACK,STREAM], SHORT(?,?)[ACK,HANDSHAKE_DONE]}
The first four symbols are used to open the connection, perform
the handshake, and transmit data, and the last three symbols al-
low us to model properties related to flow control. We focus on
this alphabet, as due to QUIC‚Äôs numerous packet and frame types,
choosing to learn the behavior of, for example, all packet types con-
taining up to 3 frames, would already give us an alphabet with over
30,000 symbols. Although, in theory, we could learn over such large
alphabets, the learning process would take an infeasible amount
of time. As we will show in the rest of the section, these seven
symbols are enough to capture the main connection establishment,
handshake, data transmission, and flow control behavior.
SIGCOMM ‚Äô21, August 23‚Äì27, 2021, Virtual Event, USA
Ferreira et al.
To build the translation pair (ùõº, ùõæ) in the Adapter, we use QUIC-
Tracker [28] as a reference implementation and instrument it to
convert between abstract and concrete symbols. Specifically, we
have implemented the format we picked for our abstract alphabet,
and whenever our Adapter receives an abstract request from the
learner, we use QUIC-Tracker‚Äôs state to determine if there is a valid
concrete packet matching the abstract packet that should be sent
from the current state. If so, we send this queued packet, if not,
we request that QUIC-Tracker sends a new packet matching our
abstract requests, filling in the concrete values required to make it
a valid packet under the current state. QUIC-tracker then encodes
and sends the created packet to the Implementation we are learning
a model for and waits for a response. Once this response is detected,
it is abstracted and sent back to the learner as a response.
The QUIC Adapter is comprised in total of over 10,000 lines of
Go for its reference implementation, however the instrumentation
requires only an additional 2,000 lines of code, which we believe is a
relatively low cost for Prognosis to handle a protocol as complex as
QUIC. Furthermore, the same instrumentation can be used to learn
models of all the QUIC implementations. When ran on these three
implementations Prognosis could learn models for two of the three
implementations (see Section 6.2.4 for explanation). The two models
had 12 and 8 states, and 84 and 56 transitions, respectively. Learning
took 24,301 queries for one implementation and 12,301 queries for
the other. Having these two models enables reasoning with much
fewer traces: for the alphabet(cid:98)Œ£ above there are 329,554,456 traces
of length up to 10, however we only need to check 1210 and 715
of those traces, respectively, for the two implementations. This
reduction is gained because the traces in the learned model are a
subset of all traces that can be made with the alphabet.
In the rest of the section, we describe what issues were unveiled
in the QUIC RFC and implementations using a number of formal
and informal analysis of the models generated by Prognosis. As
some of the problems we have identified introduce serious security
vulnerabilities that the developers of the protocols have not yet
addressed, we will not identify in which specific implementations
the issues were found.
Issue 1: RFC Imprecision.
6.2.3
Analysis technique and outcome: When comparing the mod-
els learned for different implementations, we discovered that these
models, as reported in Section 6.2.2, had vastly different sizes. We
manually explored the models to identify the key differences in
structure and found that different implementations were not con-
sistent on what to do if a client resets the Packet Number Spaces
when retrying a connection. We reported this anomaly to the IETF
QUIC Working Group who issued a fix [5] on the next version of
the specification to make the expected behavior clearer.
Underlying issue: As QUIC is a protocol undergoing standard-
ization, its RFC is a living document that is still being perfected. One
of the guiding principles for this document is the Robustness Princi-
ple [29] that was already employed in the development of TCP. The
principle states that a system should be strict about what it sends,
and liberal on what it receives. As such, the QUIC RFC is perhaps
a looser specification than those used for formal verification, and
certain aspects of the specification are ambiguous.
771
Our reported inconsistency unveiled an ambiguity in the behav-
ior of RETRY packets. RETRY packets are a special kind of packet
used by a server to verify the source address of the received packet.
It is called RETRY as the client should retry to open the connection
with the RETRY token received from the server. Most importantly,
our report led to a discussion on the topic by the RFC maintain-
ers, and a fix was issued to clarify that a server MAY abort the
connection when a client resets their Packet Number Spaces [5].
Issue 2: Nondeterminism in Connection Closure.
6.2.4
Analysis technique and outcome: As described in Section 5,
Prognosis ensures that the answer to every Learner query has
a deterministic response via the nondeterminism check. During
this check, we found that it was possible to have Facebook‚Äôs mvfst
close the connection and remain in a state where it will not always
respond with RESETs to subsequent packets.
Underlying Issue. For backwards compatibility reasons, QUIC
packets are carried over the UDP protocol. While TCP has been
vastly optimized in devices ranging from internet middle-boxes
such as switches and routers to endpoint devices such as servers
and clients, UDP has not received the same level of attention, mostly
due to TCP being the de facto protocol for the transport layer.
To understand this bug, we need to introduce a specific QUIC
frame: HANDSHAKE_DONE is a signaling frame sent by the server
(and only the server) to notify the client that the handshake is now
complete, and it can proceed to transmit its data. We include this
frame in the input alphabet used by the Learner, and as such the
learned model will depict what happens in case the client sends
this server-only frame at different states of the system. The ideal
response is that, as this frame should never be sent by a client, the
server would treat receiving this frame as a protocol violation error,
and immediately close the connection, and any further packets sent
on the same connection may be met with a RESET packet, a decision
that is up to the developer to make. The RESET packet type is a last
case resort that an endpoint can use to notify the other side that
this connection no longer exists, even when data transmissions
keys are no longer available.
Prognosis detected that if the client starts a connection as
usual with INITIAL(?,?)[CRYPTO], and instead of finishing the
handshake, sends a HANDSHAKE_DONE frame to the server with
the HANDSHAKE(?,?)[ACK,HANDSHAKE_DONE] abstract symbol, this
packet will be met with a CONNECTION_CLOSE frame, effectively
closing the connection. However, after testing the same packet se-
quence repeatedly, it found that if the client keeps sending packets,
it is only in 82% of the responses that following packets are met
with a RESET.
This behavior discovered in our analysis is erroneous: a specific
implementation may choose to use RESET packets, but it must be
consistent in the decision. It cannot nondeterministically switch
between sending and not sending packets. Furthermore, this RE-
SET behaviour has no back-off mechanism, meaning that a client
can exploit this bug to request new packets from the server on
demand. The client could keep sending the exact same packet, with
no computation needed, and the server would have to produce new
RESET packets every time it receives this unexpected packet. This
behavior, coupled with the fact that RESET packets are relatively
Prognosis: Closed-Box Analysis of Network Protocol Implementations
SIGCOMM ‚Äô21, August 23‚Äì27, 2021, Virtual Event, USA
small, means that system-level UDP optimizations are not triggered,