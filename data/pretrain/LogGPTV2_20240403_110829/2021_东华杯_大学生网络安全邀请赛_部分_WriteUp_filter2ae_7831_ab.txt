下面两个很明显是隔位来取值，于是比赛的时候就考虑了各种方法把这三个字符串的奇数位和偶数位分开，或者按不同顺序排列奇数位和偶数位。然而不管啥样都解析不出一个看得出来的东西……
赛后问了下其他师傅，说直接十六进制编辑器复制出来，奇偶位分开就完事了。
？？？？？？？
喵喵疑惑脸.jpg
然后拖进 010 editor 一看，草，IDA 解析锅了啊！！！
也就是说，不知道什么原因，这个 strings window 解析出来的字符串分段了，而且导出来也不完整。
而实际上这一长串字符串都是连在一起的。于是直接在 010 Editor 里整个复制出来。
然后奇偶位分别导出到两个文件。
    import base64
    with open('base64.dat', 'r', encoding='utf-8') as fin:
        s = fin.read()
    s1 = ''.join([s[i] for i in range(0, len(s), 2)])
    s2 = ''.join([s[i] for i in range(1, len(s), 2)])
    data1 = base64.b64decode(s1)
    data2 = base64.b64decode(s2)
    print(data1[:200])
    print('======')
    print(data2[:200])
    with open('data1.jpg', 'wb') as f1:
        f1.write(data1)
    with open('data2.png', 'wb') as f1:
        f1.write(data2)
    # b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00\x01\x00\x01\x00\x00\xff\xdb\x00C\x00\x05\x03\x04\x04\x04\x03\x05\x04\x04\x04\x05\x05\x05\x06\x07\x0c\x08\x07\x07\x07\x07\x0f\x0b\x0b\t\x0c\x11\x0f\x12\x12\x11\x0f\x11\x11\x13\x16\x1c\x17\x13\x14\x1a\x15\x11\x11\x18!\x18\x1a\x1d\x1d\x1f\x1f\x1f\x13\x17"$"\x1e$\x1c\x1e\x1f\x1e\xff\xdb\x00C\x01\x05\x05\x05\x07\x06\x07\x0e\x08\x08\x0e\x1e\x14\x11\x14\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\xff\xc0\x00\x11\x08\x048\x07\x80\x03\x01\x11\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x1d\x00\x00\x02\x02\x03\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02'
    # ======
    # b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x07\x80\x00\x00\x048\x08\x02\x00\x00\x00g\xb1V\x14\x00\x00 \x00IDATx\x01d\xc1A\x96,\xe7\x96\x9c\xd7\xcf\xec\xb8\'\x00R\xf3\x9f\x15\xd5"G\xc0Zj\xabA\xb2\xde\xcd\xf8\x8f\x19#\x1cH\xea\xd6\xd2\xde\xfa\xef\xff\xf5\xbf\xf4\x07\xd06I\xdb$\x92l_\xd753\xb6\x81\xb6\xbb\xcbC\x12\xbfI\x97\xb7\nl_b@\x80\xfc\xdd\xaa\xad>*\x93\x9c$m\x81\x8aGT\x0c*\xbe\x06P\xf9H\xd5v\xd3\xf6\x17\xb3\xbb\xb6\xff\xfc\xf3\x0fI\xaf\xd7+9\xb6\xff\xb8\xd5\xf6\x9c\xb3\xbb\x92\xae\xeb\x92\xc4[\xdd\x1f\x92lK\xb2\xdd6\x8f\xb6#\xf1\xc3\xba$\xf1\xe8#I\xdb\xfft{\xe5\x15\xc7.\x06T\x01G'
得到两张图，一张 jpg 一张 png。
进行一个 diff，SUB 很明显看出就是熟悉的经典盲水印。一张是原图，一张是加了盲水印的 png。
这里用到的是 [chishaxie 的
BlindWaterMark](https://github.com/chishaxie/BlindWaterMark)。
    python bwmforpy3.py decode data1.jpg data2.png out.png
呐，flag。
###  where_can_find_code
> [附件下载](https://pan.baidu.com/s/1RAB1x1sbx6apoLtaXm2MPw)
> 提取码（GAME）[备用下载](https://share.weiyun.com/CognzPmU)
给了个 `code.asc`，发现这个文件里有一堆的 `\0`.
尝试着拿去当 html 解析，效果长这样。
（好像也没啥用）
下面这段长得就很像 flag，应该是某种映射关系。然而直接拿去 quipquip 解的话出来都不对。
    format("Translate the letter J into I");
    dpeb{e58ca5e2-2c51-4eef-5f5e-33539364deoa}
再回到最开始的 `\0`，发现是用了 wbStego 隐写。
password 为空，解密出来得到
    20810842042108421
只含有 01248，是那个 云影密码。
实际上就是以 `0` 作为间隔，其他数隔开后十进制组合相加，转化为 1-26 对应的字母 A-Z.
直接抄个网上的脚本好了。
    def de_code(c):
        dic = [chr(i) for i in range(ord("A"), ord("Z") + 1)]
        flag = []
        c2 = [i for i in c.split("0")]
        for i in c2:
            c3 = 0
            for j in i:
                c3 += int(j)
            flag.append(dic[c3 - 1])
        return flag
    def encode(plaintext):
        dic = [chr(i) for i in range(ord("A"), ord("Z") + 1)]
        m = [i for i in plaintext]
        tmp = []
        flag = []
        for i in range(len(m)):
            for j in range(len(dic)):
                if m[i] == dic[j]:
                    tmp.append(j + 1)
        for i in tmp:
            res = ""
            if i >= 8:
                res += int(i/8)*"8"
            if i % 8 >= 4:
                res += int(i % 8/4)*"4"
            if i % 4 >= 2:
                res += int(i % 4/2)*"2"