```
root@anchore-cli:/# anchore-cli system status
```
输出应该如下所示:
```
Service analyzer (anchore-demo-anchore-engine-analyzer-5fd777cfb5-jtqp2, http://anchore-demo-anchore-engine-analyzer:8084): up
Service apiext (anchore-demo-anchore-engine-api-6dd475cf-n24xb, http://anchore-demo-anchore-engine-api:8228): up
Service policy_engine (anchore-demo-anchore-engine-policy-7b8f68fbc-q2dm2, http://anchore-demo-anchore-engine-policy:8087): up
Service simplequeue (anchore-demo-anchore-engine-simplequeue-6d4567c7f4-7sll5, http://anchore-demo-anchore-engine-simplequeue:8083): up
Service catalog (anchore-demo-anchore-engine-catalog-949bc68c9-np2pc, http://anchore-demo-anchore-engine-catalog:8082): up
Engine DB Version: 0.0.12
Engine Code Version: 0.6.1
```
`anchore-cli`能够与 Kubernetes 集群中的 Anchore Engine 进行对话。现在，让我们使用以下命令扫描映像:
```
root@anchore-cli:/# anchore-cli image add kaizheh/nginx-docker
```
输出应该如下所示:
```
Image Digest: sha256:416b695b09a79995b3f25501bf0c9b9620e82984132060bf7d66d877 6c1554b7
Parent Digest: sha256:416b695b09a79995b3f25501bf0c9b9620e82984132060bf7d66d877 6c1554b7
Analysis Status: analyzed
Image Type: docker
Analyzed At: 2020-03-22T05:48:14Z
Image ID: bcf644d78ccd89f36f5cce91d205643a47c8a5277742c5b311c9d9 6699a3af82
Dockerfile Mode: Guessed
Distro: debian
Distro Version: 10
Size: 1172316160
Architecture: amd64
Layer Count: 16
Full Tag: docker.io/kaizheh/nginx-docker:latest
Tag Detected At: 2020-03-22T05:44:38Z
```
您将从映像中获得映像摘要、完整标签等。Anchore Engine 可能需要一些时间来分析映像，具体取决于映像大小。分析后，您会看到`Analysis Status`字段已更新为`analyzed`。使用以下命令检查映像扫描状态:
```
root@anchore-cli:/# anchore-cli image get kaizheh/nginx-docker
```
输出应该如下所示:
```
Image Digest: sha256:416b695b09a79995b3f25501bf0c9b9620e82984132060bf7d66d877 6c1554b7
Parent Digest: sha256:416b695b09a79995b3f25501bf0c9b9620e82984132060bf7d66d877 6c1554b7
Analysis Status: analyzed
Image Type: docker
Analyzed At: 2020-03-22T05:48:14Z
Image ID: bcf644d78ccd89f36f5cce91d205643a47c8a5277742c5b311c9d96699a3a f82
Dockerfile Mode: Guessed
Distro: debian
Distro Version: 10
Size: 1172316160
Architecture: amd64
Layer Count: 16
Full Tag: docker.io/kaizheh/nginx-docker:latest
Tag Detected At: 2020-03-22T05:44:38Z
```
前面我们简单提到了锚定引擎策略；锚定引擎策略允许您定义规则，根据漏洞的严重性以不同的方式处理漏洞。在默认的 Anchore Engine 策略中，您会发现默认策略中的以下规则包含两个规则。第一条规则如下:
```
{
	"action": "WARN",
	"gate": "vulnerabilities",
	"id": "6063fdde-b1c5-46af-973a-915739451ac4",
	"params": [{
			"name": "package_type",
			"value": "all"
		},
		{
			"name": "severity_comparison",
			"value": "="
		},
		{
			"name": "severity",
			"value": "medium"
		}
	],
	"trigger": "package"
},
```
第一个规则定义任何有中级漏洞的包仍然会将策略评估结果设置为通过。第二条规则如下:
```
 {
 	"action": "STOP",
 	"gate": "vulnerabilities",
 	"id": "b30e8abc-444f-45b1-8a37-55be1b8c8bb5",
 	"params": [{
 			"name": "package_type",
 			"value": "all"
 		},
 		{
 			"name": "severity_comparison",
 			"value": ">"
 		},
 		{
 			"name": "severity",
 			"value": "medium"
 		}
 	],
 	"trigger": "package"
 },
```
第二个规则定义了任何具有高或关键漏洞的包都将策略评估结果设置为失败。分析映像后，使用以下命令检查策略:
```
root@anchore-cli:/# anchore-cli --json evaluate check sha256:416b695b09a79995b3f25501bf0c9b9620e82984132060bf7d66d877 6c1554b7 --tag docker.io/kaizheh/nginx-docker:latest
```
输出应该如下所示:
```
[
    {
        "sha256:416b695b09a79995b3f25501bf0c9b9620e82984132060 bf7d66d8776c1554b7": {
            "docker.io/kaizheh/nginx-docker:latest": [
                {
                    "detail": {},
                    "last_evaluation": "2020-03-22T06:19:44Z",
                    "policyId": "2c53a13c-1765-11e8-82ef-235277 61d060",
                    "status": "fail"
                }
            ]
        }
    }
]
```
所以映像`docker.io/kaizheh/nginx-docker:latest`没有通过默认策略评估。这个意味着一定有一些的高等级或者临界等级的漏洞。使用以下命令列出映像中的所有漏洞:
```
root@anchore-cli:/# anchore-cli image vuln docker.io/kaizheh/nginx-docker:latest all
```
输出应该如下所示:
```
Vulnerability ID        Package                                                Severity          Fix                              CVE Refs                Vulnerability URL
CVE-2019-9636           Python-2.7.16                                          Critical          None                             CVE-2019-9636           https://nvd.nist.gov/vuln/detail/CVE-2019-9636
CVE-2020-7598           minimist-0.0.8                                         Critical          None                             CVE-2020-7598           https://nvd.nist.gov/vuln/detail/CVE-2020-7598
CVE-2020-7598           minimist-1.2.0                                         Critical          None                             CVE-2020-7598           https://nvd.nist.gov/vuln/detail/CVE-2020-7598
CVE-2020-8116           dot-prop-4.2.0                                         Critical          None                             CVE-2020-8116           https://nvd.nist.gov/vuln/detail/CVE-2020-8116
CVE-2013-1753           Python-2.7.16                                          High              None                             CVE-2013-1753           https://nvd.nist.gov/vuln/detail/CVE-2013-1753
CVE-2015-5652           Python-2.7.16                                          High              None                             CVE-2015-5652           https://nvd.nist.gov/vuln/detail/CVE-2015-5652
CVE-2019-13404          Python-2.7.16                                          High              None                             CVE-2019-13404          https://nvd.nist.gov/vuln/detail/CVE-2019-13404
CVE-2016-8660           linux-compiler-gcc-8-x86-4.19.67-2+deb10u1             Low               None                             CVE-2016-8660           https://security-tracker.debian.org/tracker/CVE-2016-8660
CVE-2016-8660           linux-headers-4.19.0-6-amd64-4.19.67-2+deb10u1         Low               None                             CVE-2016-8660           https://security-tracker.debian.org/tracker/CVE-2016-8660
```
前面的列表显示了映像中的所有漏洞以及信息，包括 CVE 标识、软件包名称、严重性、是否有可用的修复程序以及参考。Anchore Engine 策略本质上帮助您过滤掉不太严重的漏洞，以便您可以专注于更严重的漏洞。然后，您可以开始与安全团队合作进行漏洞分析。
注意
有时，如果对包或库中的高级或关键级别漏洞没有可用的修复，您应该找到替代方法，而不是继续使用易受攻击的方法。
在下一节中，我们将讨论如何将映像 扫描集成到 CI/CD 管道中。
# 将映像扫描集成到 CI/CD 管道中
映像扫描可以在 DevOps 管道中的多个阶段触发，我们已经谈到了在管道的早期阶段扫描映像的优势。但是，新的漏洞会被发现，您的漏洞数据库应该不断更新。这表明，在构建阶段通过映像扫描并不意味着如果发现映像中也存在新的严重漏洞，它将在运行时阶段通过。当工作负载部署发生时，您应该停止它，并相应地应用缓解策略。在开始集成之前，我们先来看一下适用于映像扫描的 DevOps 阶段的大致定义:
*   **构建**:在 CI/CD 管道中构建映像时
*   **部署**:当映像即将部署在 Kubernetes 集群中时
*   **运行时**:在映像部署到 Kubernetes 集群并且容器启动并运行之后
虽然有许多不同的配置项/光盘管道和许多不同的映像扫描工具可供您选择，但概念是将映像扫描集成到配置项/光盘管道中可以保证 Kubernetes 工作负载以及 Kubernetes 集群。
## 构建阶段的扫描