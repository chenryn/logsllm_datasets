        "/accessDenied",
        "/adjuncts/",
        "/error",
        "/oops",
        "/signup",
        "/tcpSlaveAgentListener",
        "/federatedLoginService/",
        "/securityRealm",
        "/instance-identity"
    );
这也代表著一开始可选的入口限制更严格选择更少, 但如果能在一个白名单上的入口找到其他物件参考, 跳到非白名单上的成员岂不可以绕过前述的 URL 前缀限制?
可能有点难理解, 这里先来一个简单的范例来解释 Jenkins 的动态路由机制:
    http://jenkin.local/adjuncts/whatever/class/classLoader/resource/index.jsp/content
以上网址会依序执行下列方法
    jenkins.model.Jenkins.getAdjuncts("whatever") 
    .getClass()
    .getClassLoader()
    .getResource("index.jsp")
    .getContent()
上面的执行链一个串一个虽然看起来很流畅, 但难过的是无法取得回传内容, 因此严格来说不能算是一个风险, 但这个例子对于理解整个漏洞核心却有很大的帮助!
在了解原理后, 剩下的事就像是在解一个迷宫, 从
[jenkins.model.Jenkins](https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/model/Jenkins.java)
这个入口点开始, 物件中的每个成员又可以参考到一个新的物件, 接著要做的就是想办法把中间错综复杂各种物件与物件间的关联找出来, 一层一层的串下去直到迷宫出口
- 也就是危险的函数呼叫!
值得一提的是, 这个漏洞最可惜的地方应该是无法针对 SETTER 进行操作, 不然的话应该就又是另外一个有趣的 [Struts2
RCE](https://cwiki.apache.org/confluence/display/WW/S2-020) 或是 [Spring
Framework RCE](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1622)
了!
### 如何利用
所以该如何利用这个漏洞呢? 简单说, 这个漏洞所能做到的事情就只是透过物件间的参考去绕过 ACL 政策,
但在此之前我们必须先找到一个好的跳板好让我们可以更方便的在物件中跳来跳去, 这里我们选用了下面这个跳板:
    /securityRealm/user/[username]/descriptorByName/[descriptor_name]/
这个跳板会依序执行下面方法
    jenkins.model.Jenkins.getSecurityRealm()
    .getUser([username])
    .getDescriptorByName([descriptor_name])
在 Jenkins 中可以被操作的物件都会继承一个
[hudson.model.Descriptor](https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/Descriptor.java)
类别, 而继承这个类别的物件都可以透过
[hudson.model.DescriptorByNameOwner#getDescriptorByName(String)](https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/DescriptorByNameOwner.java#L51)
去存取, 所以总体来说, 可透过这个跳板取得在 Jenkins 中约 500 个 Despicable 的物件类别!
不过虽是如此, 由于 Jenkins 的设计模式, 大部分开发者在危险动作之前都会再做一次权限检查, 所以即使可呼叫到 [Script
Console](http://jenkins.local/script) 但在没有 `Jenkins.RUN_SCRIPTS` 权限的情况下也无法做任何事
:(
但这个漏洞依然不失成为一个很好的胶水去绕过第一层的 ACL 限制串起其他的漏洞, 为后续的利用开启了一道窗! 以下我们给出三个串出漏洞链的例子!
(虽然只介绍三种, 但由于这个漏洞玩法非常自由可串的绝不只如此, 推荐有兴趣的同学可在寻找更多的漏洞链!)
P.S. 值得注意的一点是, 在 `getUser([username])` 的实现中会呼叫到 `getOrCreateById(...)` 并且传入
`create=True` 导致在记忆体中创造出一个暂存使用者(会出现在使用者列表但无法进行登入操作), 虽然无用不过也被当成一个漏洞记录在
[SECURITY-1128](https://jenkins.io/security/advisory/2018-10-10/)
#### 1\. 免登入的使用者资讯泄漏
在测试 Jenkins 时, 最怕的就是要进行字典档攻击时却不知道该攻击哪个帐号, 毕竟帐号永远比密码难猜! 这时这个漏洞就很好用了XD
由于 Jenkins 对搜寻的功能并没有加上适当的权限检查, 因此在 `ANONYMOUS_READ=False` 的状况下可以透过修改 `keyword`
参数从 a 到 z 去列举出所有使用者!
##### PoC:
    http://jenkins.local/securityRealm/user/admin/search/index?q=[keyword]
除此之外也可搭配由 `Ananthapadmanabhan S R` 所回报的
[SECURITY-514](https://jenkins.io/security/advisory/2017-10-11/#user-remote-api-disclosed-users-email-addresses) 进一步取得使用者信箱, 如:
    http://jenkins.local/securityRealm/user/admin/api/xml
#### 2\. 与 CVE-2018-1000600 搭配成免登入且有完整回显的 SSRF
下一个要串的漏洞则是
[CVE-2018-1000600](https://jenkins.io/security/advisory/2018-06-25/#SECURITY-915),
这是一个由 [Orange Tsai](https://twitter.com/orange_8361)(对就是我XD) 所回报的漏洞,
关于这个漏洞官方的描述是:
> CSRF vulnerability and missing permission checks in GitHub Plugin allowed
> capturing credentials
在已知 Credentials ID 的情形下可以泄漏任意 Jenkins 储存的帐密, 但 Credentials ID 在没指定的情况下会是一组随机的
UUID 所以造成要利用这个漏洞似乎变得不太可能 (如果有人知道怎么取得 Credentials ID 请告诉我!)
虽然在不知道 Credentials ID 的情况下无法泄漏任何帐密, 但这个漏洞其实不只这样, 还有另一个玩法! 关于这个漏洞最大的危害其实不是
CSRF, 而是 SSRF!
不仅如此, 这个 SSRF 还是一个有回显的 SSRF! 没有回显的 SSRF 要利用起来有多困难我想大家都知道 :P 因此一个有回显的 SSRF
也就显得何其珍贵!
##### PoC:
    http://jenkins.local/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.github.config.GitHubTokenCredentialsCreator/createTokenByPassword
    ?apiUrl=http://169.254.169.254/%23
    &login=orange
    &password=tsai
#### 3\. 未认证的远端代码执行
> 所以废话少说, RCE 在哪?
为了最大程度的去利用这个漏洞, 我也挖了一个 **非常有趣** 的 RCE 可以与这个漏洞搭配使用成为一个真正意义上不用认证的 RCE!
但由于这个漏洞目前还在 Responsible Disclosure 的时程内, 就请先期待 Hacking Jenkins Part 2 啰!
(预计二月中释出!)
### TODO
这里是一些我想继续研究的方向, 可以让这个漏洞变得更完美! 如果你发现了下面任何一个的解法请务必告诉我, 我会很感激的XD
  * 在 `ANONYMOUS_READ=False` 的权限下拿到 `Plugin` 的物件参考, 如果拿到的可以绕过 [CVE-2018-1999002](https://jenkins.io/security/advisory/2018-07-18/#SECURITY-914) 与 [CVE-2018-6356](https://jenkins.io/security/advisory/2018-02-14/#SECURITY-705) 所需的最小权限限制, 成为一个真正意义上的免登入任意读档!
  * 在 `ANONYMOUS_READ=False` 的权限下找出另一组跳板去呼叫 `getDescriptorByName(String)`. 为了修复 [SECURITY-672](https://jenkins.io/security/advisory/2018-08-15/#SECURITY-672), Jenkins 从 2.138 开始对 [hudson.model.User](https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/User.java) 增加判断 `Jenkins.READ` 的[检查](https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/User.java#L1026), 导致原有的跳板失效!
### 致谢
最后, 感谢 Jenkins Security 团队尤其是 Daniel Beck 的沟通协调与漏洞修复! 这里是一个简单的回报时间轴:
  * May 30, 2018 - 回报漏洞给 Jenkins
  * Jun 15, 2018 - Jenkins 修补并分配 CVE-2018-1000600
  * Jul 18, 2018 - Jenkins 修补并分配 CVE-2018-1999002
  * Aug 15, 2018 - Jenkins 修复并分配 CVE-2018-1999046
  * Dec 05, 2018 - Jenkins 修补并分配 CVE-2018-1000861
  * Dec 20, 2018 - 回报 Groovy 漏洞给 Jenkins
  * Jan 08, 2019 - Jenkins 修复 Groovy 漏洞并分配 CVE-2019-1003000, CVE-2019-1003001, CVE-2019-1003002
* * *