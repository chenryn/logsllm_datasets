Cache         Context checkerPacketconverterModifiedcellular stackUECacheresolverIf contextviolation for NASnull If found in cacheif prefix mismatchrestart queryInconsistency       Resolver         Adapter346Core networkBase stationNAS Layer connectionRRC Layer connection1RRC         Learner72Deviceresetter5Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1087ID
Q1
Q2
Q3
Q4
Q5
Q6
Q7
Query
attach_accept enable_RRC_con.enable_attach
enable_attach enable_RRC_con enable_attach.auth_request
enable_RRC_con enable_attach RRC_release auth_request.enable_RRC_con
enable_RRC_con enable_attach, GUTI_reallocation.auth_request
enable_RRC_con enable_attach auth_request_replay.auth_request
enable_RRC_con enable_attach GUTI_reallocation.auth_request
attach_accept enable_RRC_con enable_attach.auth_request
ID
R1
R2
R3
R4
R5
R6
R7
R8
Table 1: Example queries and responses. "." divides the prefix and suffix of the queries and responses.
area to another, whereas triggering a service request (e.g., making a
phone call and text) warrants a user to tap on the call button of the
phone, dial numbers or enter texts. For side-stepping such physical
constraints and manual interventions, the converter crafts special-
ized packets without requiring any mobility or special hardware.
To illustrate, if the learner issues enable_tracking_area_update to begin
a handoff, the packet converter sends the special RRC connection
release message with cause "load re-balancing TAU required". For
triggering the service procedure without any manual interaction,
the controller crafts paging packets and send them to the SUL to
trigger a service request. Also, the responses received from the SUL
are converted back to the output symbols by the packet converter.
4.2.5 Optimizing queries during model validation with cache: In the
model validation stage, the learner can generate the same query
which has already been resolved in the hypothesis construction
phase. To avoid expensive OTA testing of these duplicate queries
in the SUL, the queries from the hypothesis construction phase are
cached in the database [11, 52]. In the model validation stage, if the
same query is found in the cache, the query is not run OTA again,
cutting down the overhead and time for the repeated queries. For
instance, let us assume Q6 is a query generated during the model
validation phase, and the previous queries are generated during the
hypothesis construction phase. Q6 is checked against queries Q1
- Q5, and as the same query is cached in Q3, Q6 will not be sent,
and the saved response R3 will be returned.
4.2.6 Resolving observational non-determinism with inconsistency
resolver: As discussed in Section 3.4, a prerequisite for deterministic
model learning is to observe consistent behavior of the SUL for the
same sequence of input messages. To maintain such consistency,
we leverage existing insight from the prior work [44] and develop
an inconsistency resolver that primarily performs two operations: (i)
It lets the adapter run each new query (i.e., not present in the cache)
twice. If both the responses are the same, it saves the query in the
database. Otherwise, it triggers the adapter to run the query again.
The inconsistency resolver applies a majority voting scheme [44]
on the results and stores the majority output as a response to the
query. (ii) It checks if the prefix of every response (a query and
response is divided into prefix and suffix as shown in Table 1) is
consistent with the previously learned results. To check this, the
inconsistency resolver compares the response prefix of each query
with the previously reported results saved in the cache. If there is a
mismatch, the adapter restarts this query from scratch. For instance,
for Q7 in Table 1, the response prefix of the query is not consistent
with the previously saved response of R1. In such occurrences, the
query Q7 is terminated and started again from scratch. When the
prefix of the new response R8 is consistent with the previous result
R1, the response is considered valid and saved in the cache.
4.2.7 Transparent reset without manual intervention or rebooting
the device: The device resetter resets the SUL to the initial state
and clears the security context from the non-volatile memory of
RRC_connection_setup attach_request null_action null_action.RRC_con_request
Output
null_action RRC_con_request.attach_request
null_action RRC_con_request attach_request.auth_response
RRC_con_request attach_request null_action.auth_response
RRC_con_request attach_request null_action.auth_response
RRC_con_request attach_request null_action.auth_response
null_action RRC_con_request null_action. (query terminated)
null_action RRC_con_request attach_request.auth_response
Figure 3: Equiva-
lence Checking to
Model Checking
Figure 4: FSMs for understanding
the challenge for identify diverse
deviation-inducing input sequences.
the device by only sending an OTA attach_reject message with EMM
cause#11 “PLMN not allowed". To further ensure that both UE
and adapter are synchronized with the same sequence number,
the resetter sends auth_request to the UE. Nevertheless, as the initial
connection has to be initiated by the UE under test, the resetter
has to trigger the UE to generate an initial connection request
(e.g., attach_request for NAS or RRC_connection_setup for RRC) without
any manual intervention. To achieve this without any modification
on the device, for Android devices key press events are simulated
through the ADB connection. For iPhones, libimobiledevice– a
library to communicate with iPhone to restart the device [4] is
used, and for USB devices, the device is toggled through the USB
connection. Finally, for development boards and LTE dongles, AT
commands [36] are injected through serial connections.
4.2.8 OTA packet encoding/decoding with modified cellular stack:
We modify an existing open-source cellular stack to set up the com-
ponents of a base station and a core network that DIKEUE controls.
We remove the original FSM implementations of both the NAS and
RRC layers from the open-source LTE stack and create direct inter-
faces with the packet converter to use it only for encoding/decoding
lower-layer payloads (e.g., PDCP, RLC, MAC, and PHY) of a packet.
The cellular stack receives the concrete values for some specific
fields of packets from the packet converter, and communicates with
UE through OTA-transmission.
5 FSM EQUIVALENCE CHECKER
The FSM equivalence checker module of DIKEUE takes as input two
protocol FSMs, in the form of Mealy Machines and automatically
identifies a diverse set of deviation-inducing input sequences, if
present. In what follows, we assume that the input FSMs have the
same input and output alphabet, denoted by Σ and Λ, respectively.
5.1 Reduction to Model Checking
We reduce this equivalence checking problem to a model checking
problem of a safety property in the following way (see Figure 3).
For this reduction, a symbolic model checker (e.g., nuXmV [14])
that is able to reason about safety-properties would suffice.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1088Reduction. Suppose the two FSMs under differential test are de-
noted by M1 and M2. The inputs to these two FSMS (downlink
messages they can receive) are denoted by I1 (for M1) and I2 (for
M2), respectively. Similarly, let us denote their outputs (messages
they can send) as O1 (for M1) and O2 (for M2), respectively. We then
construct a model M which contains M1 and M2 as sub-components.
M will take a single symbolic input I which will be fed to both I1
and I2 (i.e., the same input for both M1 and M2). M will have two
outputs O1 and O2, essentially outputs of M1 and M2, respectively.
The model M can be viewed as composing M1 and M2 with a paral-
lel composition. We then assert the following property of the model
M: It is always the case that O1 and O2 should be equal in each step
of the execution (precisely, in linear temporal logic □(O1 = O2)). We
want to emphasize that the input I (which is essentially I1 and I2)
is an environmental variable, i.e., we do not need to provide any
concrete inputs for I. The model checker aims to find a sequence
of I values for which the property is violated (i.e., O1 (cid:44) O2 in some
steps). A counterexample idenfied by the model checker suggests
essentially a deviation-inducing input.
5.2 Challenge of Obtaining Diverse Deviations
Note that, we are interested in discovering many diverse deviation-
inducing inputs. If we want the model checker to give us diverse
counterexamples, we have to somehow inform it of the concept of
diverse counterexamples. If we were to invoke the model checking
multiple times, it is highly likely that it will give the same coun-
terexample, the shortest in many cases. We indeed need the notion
of diversity, but it is unclear how to precisely define it. After getting
a counterexample c1, one may consider updating the original prop-
erty □(O1 = O2) by blocking c1. This will make the model checker
find a different counterexample if present. However, the obtained
counterexample may not match our intuitive notion of diversity.
To explain this situation, let us consider the following example.
Example. Suppose we have the two partial FSMs M1 (i.e., the top
one) and M2 (i.e., the bottom one), as shown in Figure 4. For this
example, let us only focus on the states a, b, and c of M1 and M2. The
xk/yo→ sj, which refers to a transition
transitions are denoted as si
that moves the current state from si to sj after receiving input xk,
and in the process generating output yo. In the example, M1 and M2
behave in the same way for all transitions except for b → c (shown
in red color). M1 and M2 generate two different output messages
(i.e., y6 and y7, respectively) when taking the transition b → c under
input x6. Using the above approach, if we were to ask the model
checker to find a counterexample, it would likely give us the input
sequence in which both FSMs traverse the following states: abc; as it
is the shortest one. Now when we block abc, the model checker may
give a counterexample where M1 and M2 traverse states abbc; being
the next counterexample closest to the previous one. This loop can
go on where it spits out a variant of the (a+b+)+c counterexample
(‘+’ signifies one or more occurrences). These counterexamples
show the same problem of the transition b → c.
One may consider removing the transition b → c altogether
from both M1 and M2. This may, however, result in a disconnected
model in which the rest of the states become unreachable making
it infeasible to find other noncompliance instances infeasible.
5.3 Identifying Diverse Deviations
To identify diverse deviation-inducing input sequences, we propose
the notion of diversity classes. We use this notion to identify different
noncompliance instances in a given pair of FSMs.
Definition 5.1 (Diversity Class of Deviation-inducing Input Se-
quences). Given a fixed set of output symbols Λ where |Λ| = n,
there are a total of n×(n−1) possible diversity classes for deviation-
inducing input sequences; one for each pair of distinct output
symbols (i.e., ⟨λr , λs⟩ where λr , λs ∈ Λ and λr (cid:44) λs). For any
pair of FSMs M1 and M2, a deviation-inducing input sequence
πi = σ1σ2σ3 . . . σm is an element of the ⟨λr , λs⟩-diversity class
iff when πi is executed on M1 and M2 to obtain output sequences
γ 1
1λ2
2λ2
3 . . . λ2
m, respectively, then
i
there exists a 1 ≤ k ≤ m such that λ1
= λr and λ2
k
k
m and γ 2
i
3 . . . λ1
= λ1
= λ2
= λs.
1λ1
2λ1
4 = 3.
4 = 4 and γ 2
As an example, suppose we are given two FSMs M1 and M2 for
which Σ = {a, b, c} and Λ = {1, 2, 3, 4}. Let us consider a deviation-
inducing input sequence π = abcc for M1 and M2 for which we ob-
tain the output sequences γ 1 = 1234 and γ 2 = 1243 after executing
π on M1 and M2, respectively. π is an element of the ⟨3, 4⟩-diversity
class as there exists a k = 3 for which γ 1
3 = 4. Note that,
π is also an element of ⟨4, 3⟩-diversity class as there exists k = 4
for which γ 1
3 = 3 and γ 2
We use the above notion of diversity classes to identify a diverse
set of deviation-inducing input sequences. Without loss of gener-
ality, we use an example to explain our approach. Suppose we are
given two FSMs M1 and M2 with Λ = {1, 2, 3}. Instead of asserting
the safety property □(O1 = O2) in the composed model M (as shown
in Figure 3), we would pose a series of model checking queries; one
for each of the following safety properties: (1) □¬(O1 = 1∧ O2 = 2)
(read, it is not the case that at any step of the execution the output
of M1 is 1 whereas the output of M2 is 2); (2) □¬(O1 = 1 ∧ O2 = 3);
(3) □¬(O1 = 2 ∧ O2 = 1); (4) □¬(O1 = 2 ∧ O2 = 3); (5) □¬(O1 =
3 ∧ O2 = 1); (6) □¬(O1 = 3 ∧ O2 = 2). Each of the queries aims to
find at least an element, if present, for each of the diversity classes.
As an example, any violation of property (1) above will result in an
input sequence that is part of the ⟨1, 2⟩-diversity class.
We go a step further by trying to identify multiple elements of
each diversity class. Finding other elements of a diversity class is
important as the same deviation can happen in different parts of
the FSMs. Once we have obtained an element of a given diversity
class, for identifying other elements of that diversity class, we use
the idea of removing the transition responsible for the deviation
from both FSMs (see Section 5.2), and posing the appropriate model
checking query again. Although removing the transition may re-
sult in disconnected FSMs, it is not as disruptive as the approach
discussed in Section 5.2 because this phenomenon is localized to
only a single equivalence class.
6 IMPLEMENTATION
The FSM inference module is implemented on top of LearnLib [35]
and srsLTE [6]–an open-source 4G LTE stack. For the learning
algorithm, we use TTT [34] as it requires fewer queries compared
to other algorithms [33], and for conformance testing, we use Wp-
method [17]. We implement our adapter in Java. We use srsLTE
v19.10 as the cellular stack to implement our modified core network
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1089Device
556
Motorola Nexus 6
1172
HTC One E9+
529
Samsung Galaxy S6
560
HTC Desire 10 Lifestyle
568
Huawei Nexus 6P
554
Samsung Galaxy S8+
548
Google Pixel 3 XL
114
Huawei Y5 Prime
725
Honor 8X
1054
Huawei P8lite
570
Xiaomi Mi A1
448
Apple iPhone XS
562
4G LTE USB Modem
430
Fibocom L860-GL
Table 2: M = Membership and E = Equivalence queries.
21300
42432
10612
21300
21300
20961
20501
44432
16813
7863
21045
22450
18332
20470
M
3129
8060
3097
3129
3129
2908
3110
8100
4623
6228
3105
2340
2905
2322
Time
(min)
37620
77757
21111
37676
37450
36762
36345