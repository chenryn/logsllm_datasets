同样的技术做同样的题，这是我知道的唯一
 数据集一共包括12道题,我做的第一件事就是计算学生在每道题上花费
你从中注意到的最明显的东西就是数据的变动幅度非常大。最快的学生
我花了一些时间研究这些数据。它们记录了几十个学生在同样的时间用
下面就是代码质量最高的前25%的学生的数据：
所有题目
TEX00
TAR0O
SHELL99
SHELL00
MAKE99
MAKE01
LEXHIST01
COMPRESS99
COMPRESS01
COMPRESSOO
CMDLINE99
21.44
21.22
12.39
20.38
17.95
22.98
22.12
22.03
17.39
27.47
25.78
33.83
14.84
平均小时数
4.00
6.00
6.77
最小小时数
6.00
4.00
4.50
10.00
8.25
5.50
6.67
10.00
11.58
4.67
一个这样的数据集。所有外界条
77.00
75.00
69.00
41.77
45.00
38.68
52.75
51.50
39.25
69.50
48.00
77.00
29.25
最大小时数
8.91
7.39
13.62
9.96
14.51
5.82
标准差
11.16
12.11
10.57
10.72
---
## Page 227
接近总体的标准差。
发一个Ziv-Lempel-Welch压缩器。我选择这道题的原因是因为它的标准差很
性。我选择的题目是COMPRESS01，那是一道2001年的题目，要求学生开
绩之间不存在明显的相关性。下面就是其中一道题目的散点图，很具有代表
准差完全一样。事实上，仔细审视这些数据你就会很清楚地看到，时间和成
看到了吗，几乎没有差别！前25%的数据得到的标准差，几乎与整体标
所有题目
TEX00
TAR00
SHELL99
SHELL01
SHELL00
MAKE99
MAKE01
LEXHIST01
COMPRESS99
COMPRESS01
COMPRESSOO
CMDLINE99
目
时间
2
60
20.49
16.58
11.96
20.98
16.20
23.13
22.54
22.02
14.32
20.95
23.76
37.40
13.89
平均小时数
0
℃
6.00
6.92
6.35
13.15
6.00
18.00
8.00
14.50
7.75
6.67
15.00
23.25
8.68.
最小小时数
麟
40
77.00
最大小时数
30.50
18.00
32.00
34.00
30.50
50.75
36.00
22.00
39.17
48.00
77.00
29.25
10.93
7.32
4.09
14.80
6.87
4.39
9.70
11.14
16.14
6.55
标准差
213
高
---
## Page 228
第六部分
开办软件公司
外的收益。人力与工时的互换真的是一个神话?。
之间就必须沟通和协调。这会花掉大量时间。开发团队越小，就越能获得额
就不需要额外的沟通和协调。如果同样的任务让5个程序员一起完成，他们
只会使它更加延误——这就是原因。一个优秀的程序员独自完成一项任务，
克斯法则（Brooks’Law）吗？—一向一个已经延误的软件项目增加人手,
个平庸的程序员代替1个优秀的程序员。显然，这是行不通的。还记得布鲁
扭曲，我依然相信这些数据说明了，程序员的生产率有5倍或10倍的差距。
些学生可能会少报，因为他们忘了记录时间。但是，就算存在这样对数据的
君好运！今天CS 323的作业同我在20世纪80年代上大学时是一样的。）另一
来做题的时间，希望以此博得一点同情，下次就会换来更容易的题目。（祝
更大。
近现实世界中的情况)，那么数据之间的极差（最大值与最小值的差）还会
些作业上的最长时间是有上限的。如果学生们有无限的时间做作业（这更接
换言之，部分因为布置作业和交作业之间的时间是有限的，所以学生花在这
批评，所以许多学生眼看时间要到了，就停下来将还没做完的作业交上来。
都规定交作业的时间（通常是在某一天的午夜之前)，迟交会受到很严厉的