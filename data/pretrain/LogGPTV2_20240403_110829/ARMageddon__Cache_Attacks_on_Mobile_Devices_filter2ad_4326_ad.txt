### 5.2 Attacking ART Binaries

Instead of targeting shared libraries, it is also feasible to apply this attack to ART (Android Runtime) executables [1] that are compiled ahead of time. We used this approach on the default AOSP keyboard and evaluated the number of accesses to every address in the optimized executable that responds to an input of a letter on the keyboard. It is possible to identify addresses that correspond to key presses and, more importantly, to distinguish between taps and key presses. Figure 9 shows the corresponding cache template matrix. We summarize the letter keys in one line (alphabet) as they did not vary significantly. These addresses can be used to monitor key presses on the keyboard. We identified an address that corresponds only to letters on the keyboard and hardly to the space bar or the return button. With this information, it is possible to precisely determine the length of single words entered using the default AOSP keyboard.

**Figure 9: Cache template matrix for the default AOSP keyboard.**

- **Addresses:**
  - 0
  - 0
  - 8
  - 3
  - 6
  - 6
  - x
  - 0

- **Time in seconds:**
  - 0
  - 2
  - 4
  - 6
  - 8

- **Events:**
  - Tap
  - Tap
  - Tap
  - Swipe
  - Swipe
  - Swipe

**Figure 10: Evict+Reload on 2 addresses in custpack@app@PI:EMAIL@classes.dex on the Alcatel One Touch Pop 2 while entering the sentence "this is a message".**

- **Key Presses:**
  - t h i s
  - Space
  - i s
  - Space
  - a
  - Space
  - m e s s a g e

- **Time in seconds:**
  - 0
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7

We illustrate the capability of detecting word lengths in Figure 10. The blue line shows the timing measurements for the address identified for keys in general, while the red dots represent measurements of the address for the space key. The plot clearly indicates that we can determine the length of entered words and monitor user input accurately over time.

### 5.3 Discussion and Impact

Our proof-of-concept attacks exploit shared libraries and binaries from Android APK files to infer keystrokes. The cache template attack technique we used is generic and can be applied to any library. For example, there are various libraries that handle different hardware modules and software events on the device, such as GPS, Bluetooth, camera, NFC, vibrator, audio and video decoding, web and PDF viewers. Each of these libraries contains code that is executed and data that is accessed when the device is in use. Thus, an attacker can perform a cache template attack on any of these libraries and spy on the corresponding device events. For instance, our attack can be used to monitor the activity of the GPS sensor, Bluetooth, or the camera. An attacker can record such user activities over time to learn more about the user.

We can establish inter-keystroke timings with an accuracy comparable to cache side-channel attacks on keystrokes on x86 systems with a physical keyboard. This means that inter-keystroke timings can be used to infer entered words, as demonstrated by Zhang et al. [61]. Our attack even has a higher resolution, achieving sub-microsecond accuracy. Furthermore, we can distinguish between keystrokes on the soft-keyboard and generic touch actions outside the soft-keyboard. This information can enhance sensor-based keyloggers that infer user input on mobile devices by exploiting, for example, the accelerometer and gyroscope [7,11,12,39,59] or the ambient-light sensor [49]. However, these attacks suffer from a lack of knowledge about when exactly a user touches the screen. Based on our attack, these sensor-based keyloggers can be improved as our attack allows us to infer (1) the exact time when the user touches the screen, and (2) whether the user touches the soft-keyboard or any other region of the display.

Our attacks require the user to install a malicious app on the smartphone. However, as shown by Oren et al. [42], Prime+Probe attacks can even be performed from within browser sandboxes through remote websites using JavaScript on Intel platforms. Gruss et al. [16] showed that JavaScript timing measurements in web browsers on ARM-based smartphones achieve a comparable accuracy to those on Intel platforms. Thus, it seems likely that Prime+Probe through a website works on ARM-based smartphones as well. We expect that such attacks will be demonstrated in future work. The possibility of attacking millions of users shifts the focus of cache attacks to a new range of potential malicious applications.

In our experiments with the predecessor of ART, the Dalvik VM, we found that just-in-time compilation effectively prevents Evict+Reload and Flush+Reload attacks. The just-in-time compiled code is not shared, and thus the requirements for these two attacks are not met. However, Prime+Probe attacks work on both ART binaries and just-in-time compiled Dalvik VM code.

### 6. Attack on Cryptographic Algorithms

In this section, we show how Flush+Reload, Evict+Reload, and Prime+Probe can be used to attack AES T-table implementations still in use on Android devices. Furthermore, we demonstrate the possibility of inferring activities within the ARM TrustZone by observing cache activity using Prime+Probe. We perform all attacks cross-core and in a synchronized setting, i.e., the attacker triggers the execution of cryptographic algorithms by the victim process. Although more sophisticated attacks are possible, our goal is to demonstrate that our work enables practical cache attacks on smartphones.

#### 6.1 AES T-Table Attacks

Many cache attacks against AES T-table implementations have been demonstrated, and appropriate countermeasures have already been proposed. Among these countermeasures are so-called bit-sliced implementations [29, 32, 46]. Furthermore, Intel addressed the problem by adding dedicated instructions for AES [20], and ARM followed the same direction with the ARMv8 instruction set [4]. However, our investigations showed that Bouncy Castle, a crypto library widely used in Android apps such as the WhatsApp messenger [2], still uses a T-table implementation. Moreover, the OpenSSL library, which is the default crypto provider on recent Android versions, uses T-table implementations until version 1.0.1.3. This version is still officially supported and commonly used on Android devices, e.g., the Alcatel One Touch Pop 2. T-tables contain precomputed AES round transformations, allowing encryptions and decryptions by simple XOR operations. For instance, let \( p_i \) denote the plaintext bytes, \( k_i \) the initial key bytes, and \( s_i = p_i \oplus k_i \) the initial state bytes. The initial state bytes are used to retrieve precomputed T-table elements for the next round. If an attacker knows a plaintext byte \( p_i \) and the accessed element of the T-table, it is possible to recover the key bytes \( k_i = s_i \oplus p_i \). However, it is only possible to derive the upper 4 bits of \( k_i \) through our cache attack on a device with a cache line size of 64 bytes. This way, the attacker can learn 64 key bits. In second-round and last-round attacks, the key space can be reduced further. For details about the basic attack strategy, we refer to the work of Osvik et al. [43, 54]. Although we successfully mounted an Evict+Reload attack on the Alcatel One Touch Pop 2 against the OpenSSL AES implementation, we do not provide further insights as we are more interested in performing the first cache attack on a Java implementation.

**Attack on Bouncy Castle:**

Bouncy Castle is implemented in Java and provides various cryptographic primitives, including AES. As Bouncy Castle 1.5 still employs AES T-table implementations by default, all Android devices that use this version are vulnerable to our presented attack. To the best of our knowledge, we are the first to show an attack on a Java implementation.

During the initialization of Bouncy Castle, the T-tables are copied to a local private memory area. Therefore, these copies are not shared among different processes. Nevertheless, we demonstrate that Flush+Reload and Evict+Reload are efficient attacks on such an implementation if shared memory is available. Further, we demonstrate a cross-core Prime+Probe attack without shared memory that is applicable in a real-world scenario.

**Figure 11: Attack on Bouncy Castle’s AES using Evict+Reload on the Alcatel One Touch Pop 2 (left) and Flush+Reload on the Samsung Galaxy S6 (right).**

- **Plaintext byte values:**
  - 0
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  - 8
  - 9
  - A
  - B
  - C
  - D
  - E
  - F

- **Execution time in CPU cycles:**
  - 0
  - 1,500
  - 2,000
  - 2,500
  - 3,000
  - 3,500

**Figure 12: Histogram of Prime+Probe timings depending on whether the victim accesses congruent memory on the ARM Cortex-A53.**

- **Victim access:**
  - Yes
  - No

- **Execution time in CPU cycles:**
  - 0
  - 2,000
  - 4,000
  - 6,000

These plots reveal the upper 4 key bits of \( k_0 \) [43, 51]. Thus, in our case, the key space is reduced to 64 bits after 256–512 encryptions. We consider a first-round attack only, because we aim to demonstrate the applicability of these attacks on ARM-based mobile devices. However, full-key recovery is possible with the same techniques by considering more sophisticated attacks targeting different rounds [47, 54], even for asynchronous attackers [22, 26].

We can exploit the fact that the T-tables are placed on a specific memory region, making them accessible to our attacks.