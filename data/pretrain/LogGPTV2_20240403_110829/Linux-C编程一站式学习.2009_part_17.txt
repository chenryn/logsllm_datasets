## Page 139
写的程序都只有打印输出，在这个程序中我们第一次碰到处理用户输入的情况。我们简单介绍一
机随机生成的0、1或2比胜负。这个程序的主体是一个死循环,
0、1、2三个整数分别是剪刀石头布在程序中的内部表示,
最后，综合本章的知识，我们来写一个最简单的小游戏－－剪刀石头布:
and I shall continue to be mystified. Show me your tables, and I won't usually need your
Programming).
提取出来，从而又一次达到了“提取公因式"的效果。这种方法称为数据驱动的编程（Data-driven 
符串组成的数组可以代替一堆case分支判断，
串"wednesday"能够保存到一行，末尾还能多出一个Null字符的位置，所以第二维的长度是10。
flowcharts; they'll be obvious."
次
个break就要出Bug。
，而且维护成本也低，
只要数据结构选择得正确，
例8.5.剪刀石头布
gesture: %s\n","
'cloth"
int main(void)
 写代码最重要的是选择正确的数据结构来组织信息，
。这个程序之所以简洁,
return 0;
char
像例4.1“switch语句"那样-
'"auos.'"xosstos. } = [otl[elarnsab 
 其它代码自然而然就变得容易理解和维护了，
else
result =,(man - computer + 4) % 3 - 1;
 printf("Your gesture: %s\tComputer's 
1
if 
(result
(ret
scanf("%d",
‘([anduos]ansab '[ueu]ansab 
printf("You lose!\n");
 printf("You win!\n");
return
是因为用数据代替了代码。具体来说,
这样就可以把每个case里重复的代码（printf调用）
 所以第一维的长度是8,
man
但是代码简洁多了。简洁的代码不仅可读性
&man）;
用户也要求输入0、1或2,
 需要按Ctrl-C退出程序。以往我们
 设计控制流程和算法尚在其
为了使最长的字符
，就像这里的printf自
如果漏写-
，通过下标访问字
 然后和计算
139
---
## Page 140
4.字符串
出0、1、2这三个数字在“剪刀石头布"意义上的大小的？
留给读者思考的问题是：（man
入字符串的例子。
的变量名,
小心，
使用户输入的是整数，
入合法（输入的确实是数字而不是别的字符)
是等待用户输入-
下scanf函数的用法,
上一页
1名，数组名前面不加&，
用户有可能输入任何数据，
，表示读进来的数保存到这个变量中，
一个整数并回车，
，到第2.9 节“格式化I/O函数"再详细解释。
 我们还需要进一步检查是不是在0~2的范围内，
因为数组类型做右值时自动转换成指针类型，
 computer 
他才不管游戏规则是什么。
全国嵌入式人才培训基地
+4)%3
起始页
上一级
&运算符的作用是得到一个指针类型，
 则scanf函数返回1,
－1这个神奇的表达式是如何比较
scanf("%d",
，表示成功读入-
 写程序时对用户输入要格外
，在第2节“断点"有scanf读
，则第二个参数应该是数
 αman)这个调用的功能
第9章编码风格
一个数据。但即
 到第1节
下一页
---
## Page 141
格之一
代码风格好不好就像字写得好不好看一样，
5. indent工具
4. 函数
3.标识符命名
2.注释
第 9 章 编码风格 请点评
5.多维数组
定
的Rationale是什么。我只是以Linux内核为例来讲解编码风格的概念，并没有说内核编码风格就-
整
是写给机器看的，
people to read,and only incidentally for machines to execute."代码主要是为了写给人看的，而不
过
1.缩进和空白
目录
上一页
是最好的编码风格，
这样一个文档。本章我们以内核的代码风格为基础来讲解好的编码风格都有哪些规定，
洁才能有效地表达。正因为如此，
没必要用高级语言了。
但是和你一个Team的其他程序员肯定受不了，
代码风格糟糕的程序员肯定也是不称职的。
只是顺便也能用机器执行而已，
但Linux内核项目如此成功，
在一
全国嵌入式人才培训基地
全国嵌入式人才培训基地
 都要遵守统一的风格,
一个软件项目中，
部分I.C语言入门
第9章编码风格
如果一
起始页
上一级
虽然编译器不会挑剔难看的代码，
如果是为了写给机器看那直接写机器指令就好
一个公司招聘秘书，
，就足以说明它的编码风格是最好的C语言编码风
你自己也受不了，写完代码几天之后再来看
代码风格一般都用文
，肯定不要字写得难看的，
档规定死了，
所以一定要写得清楚
照样能编译通
1.缩进和空白
这些规定
所有
下一页
同
参
楚足
---
## Page 142
2、双目运算符的两侧各插入一
应紧贴括号。例如：
1、关键字if、while、for与其后的控制表达式的(括号之间插入一个空格分隔，但括号内的表达式
没有特别规定，
这么短的代码还能凑合着看，
一是缺少空白字符，
很难看了：
代码可以写得很好看，也可以写得很难看。例如上一章例8.5“剪刀石头布"的代码如果写成这样就
我们知道C语言的语法对缩进和空白没有要求，
1.缩进和空白 请点评
上一页
例9.1.缺少缩进和空白的代码
while 
，因为基本上所有的C代码风格对于空白字符的规定都差不多，主要有以下几条。
printf("Your gesture: %s\tComputer's gesture:
cloth):\n"
printf(
Srand(time(NULL));
char gesture[3][10]={"scissor","stone","cloth"};
#include 
#include 
return 0;
ceturn 1;
int main(void)
(1);
，代码密度太大，
\nInput your gesture (0-scissor 1-stone 2-
一个空格分隔，
 如果代码超过一屏就完全没法看了
，看着很费劲。
'You
全国嵌入式人才培训基地
第9章编码风格
1.缩进和空白
单目运算符和操作数之间不加空格，
 空格、Tab、换行都可以随意写，
二是没有缩进，
[CodingStyle]中关于空白字符并
，看不出来哪个{和哪个}配对，
 实现同样功能的
例
14
下二
像
贝
---
## Page 143
字写在同一行，用空格隔开，而不是单独占一行。例如应该这样写：
内核代码风格规定只能用Tab做缩进，
内核代码风格关于缩进的规则有以下几条。
8、有的人喜欢在变量定义语句中用Tab字符，使变量名对齐，这样看起来很美观。
long sentence that it cannot be held within a line\n"o
C编译器会自动把相邻的多个字符串接在一起，以上两个字符串相当于一个字符串"rhis is such a
7、较长的字符串可以断成多个字符串然后分行书写，例如:
再比如：
行后用空格和上面的表达式或参数对齐，例如：
6、由于UNIX系统标准的字符终端是24行80列的，接近或大于80个字符的较长语句要折行写，折
更紧凑一些,
5、以上关于双目运算符和后缀运算符的规则并没有严格要求，有时候为了突出优先级也可以写得
4、,号和;号之后要加空格，这是英文的书写习惯，例
员a[i]。
3、后缀运算符和操作数之间也不加空格，例如取结构体成员s.a、函数调用foo(arg1）、取数组成
进
建议也设成8，这样大的缩进使代码看起来非常清晰。如果有的行用空格做缩进，
端上一个Tab看起来是8个空格的宽度,
1、要用缩进体现出语句块的层次关系，
一定不要误导了读代码的人，例如alb&αc很容易让人理解成错误的优先级。
 甚至空格和Tab混用，
foo(sqrt(x*x + 
if
(sqrt(x*x + y*y) > 5.0
&&
例如for（i=l；
double 
→int
K
0.0)
0.0
b[i-1]
，那么一旦改变了文本编辑器的Tab显示宽度就会看起来非常混乱，所以
→C;
→a,
b;
i
intfoo(int a,int b)
else if (...)
（···)
→语句列表
default:
→case 
+case 
+switch
→语句列表
→语句列表
→语句列表
语句列表
语句列表
'B'
'A'
“语句列表
→语句列表
语句列表
（c）
好处是不必占太多行，
，也就是说语句块里的case、default标号相对
使得一屏能显示更多代码。这两种写法用得都很
大
---
## Page 145
格要求，通常把变量定义组成一组，
第9章编码风格
一个函数的语句列表如果很长,
页
int main(void)
→return 0;
→语句组2
→语句列表
,语句组1
double
>int 
点声
后面加空行，return语句之前加空行，例如：
也可以根据相关性分成若干组，用空行分隔。辽
全国嵌入式人才培训基地
起始页
上一级
这条规定不是严
2.注释
145
---
## Page 146
之间不留空行，
缩进。例如内核源代码目录下的kernel/sched.c文件的开头：
也有更花哨的形式:
浓
2.注释 请点评
1、整个源文件的顶部注释。
使用注释的场合主要有以下几种。
单行注释应采用/*
、函数注释。说明此函数的功能、参数、返回值、错误码等，写在函数定义上侧，和此函数定义
二
页
Love.
suggestions
comment
Multi-line 
2004-04-02
2003-09-03
2002-01-04 
1998-11-19
1996-12-23
Copyright (C） 1991-2002 
 Kernel scheduler and related syscalls
kernel/sched.c
comment 
Multi-line
顶头写不缩进。
 make semaphores SMP_ safe
by Davide Libenzi, preemptible kernel bits by Robert 
 Modified by Dave Grothe to fix bugs in semaphores
 Interactivity tuning by Con Kolivas.
an array-:
hybrid priority-list 
 New ultra-scalable O(l) scheduler by Ingo Molnar:
by
 说明此模块的相关信息，
全国嵌入式人才培训基地
，用空格把界定符和文字分开。多行注释最常见的是这种形
 schedule_timeout() and related stuff
第9章编码风格
 Linus Torvalds
2.注释
and
，例如文件名、作者和版本历史等，顶头写不
 Cleanups and useful 
design
with
146
下一页
---
## Page 147
tree.c文件中的一个函数包含了上述三种注释：
World"讲过注释可以穿插在一行代码中间，
空格隔开,
4、代码行右侧的简短注释。对当前代码行做特别说明,
行
，与当前语句组的缩进一致。
相对独立的语句组注释。对这-
*/
一个源文件中所有的右侧注释最好能上下对齐。尽管例 2.1“带更多注释的Hello
BUG_ON(tag_get(node,
BUG_ON(tag_get(node)
node->slots[offset] = item;
BUG_ON(!node);
if (slot != NULL)
do
offset = 0;
slot 
*近
int offset;
struct radix_tree_node *node = NULL, 
Insert 
@item:
@index:
radix_tree_insert
int
 Make sure the tree is high enough.
nsigned
((!index &&
 error;
=
 root->rnode;
 an item into the radix tree at position @index.
 return -EEXIST;
height--;
shift
slot = node->slots[offset];
node
if (slot == NULL)
 slot;
一组语句做特别说明，写在语句组上侧，和此语句组之间不留空
} else
if (node)
/* Have
return error;
root
item to insert
 RADIX_TREE_MAP_SHIFT;
index
radix 
(!(slot
 1, offset));
(->rnode)
0，
key
tree root
但不建议这么写。
root->rnode = slot;
 node->count++;
node->slots[offset] = slot;
 insert into a radix tree
 shift） & RADIX_TREE_MAP_MASK;
radix