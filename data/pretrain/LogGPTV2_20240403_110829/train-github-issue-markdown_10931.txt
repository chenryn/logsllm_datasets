Hello,
Originally seen when using FunctionWrappers. @yuyichao was nice enough to
provide a MWE, that shows non-repeatably inefficient code. I am out of my
depth here for such julia internals, just relaying the message :)
    julia> using BenchmarkTools
    julia> f3(x, y) = x - x + 0.5
    f3 (generic function with 1 method)
    julia> g3(f, x, y) = f3(x, y)
    g3 (generic function with 1 method)
    julia> p3 = @cfunction(g3, Float64, (Ref{typeof(f3)}, Float64, Float64))
    Ptr{Nothing} @0x00007f8405b31650
    julia> @benchmark ccall($p3, Float64, (Ref{typeof(f3)}, Float64, Float64), f3, 1.0, 2.0)
    BenchmarkTools.Trial:
      memory estimate:  48 bytes
      allocs estimate:  3
      --------------
      minimum time:     66.488 ns (0.00% GC)
      median time:      68.980 ns (0.00% GC)
      mean time:        74.425 ns (0.45% GC)
      maximum time:     510.097 ns (73.69% GC)
      --------------
      samples:          10000
      evals/sample:     977
    julia> p3 = @cfunction(g3, Float64, (Ref{typeof(f3)}, Float64, Float64))
    Ptr{Nothing} @0x00007f8405b42ec0
    julia> @benchmark ccall($p3, Float64, (Ref{typeof(f3)}, Float64, Float64), f3, 1.0, 2.0)
    BenchmarkTools.Trial:
      memory estimate:  0 bytes
      allocs estimate:  0
      --------------
      minimum time:     4.527 ns (0.00% GC)
      median time:      4.554 ns (0.00% GC)
      mean time:        4.965 ns (0.00% GC)
      maximum time:     44.207 ns (0.00% GC)
      --------------
      samples:          10000
      evals/sample:     1000
Cheers!