# Web Browser Mitigations for Spectre and Meltdown Attacks

## Table 1: Web Browser Mitigations for Spectre and Meltdown Attacks
The table below summarizes the mitigations for Spectre and Meltdown attacks, both within and outside the attacker's process. The symbols indicate whether an attack is fully mitigated (✓), partially mitigated (✓✗), not mitigated (✗), or not applicable (-).

| Attack Type | Inside Process | Outside Process |
|-------------|----------------|-----------------|
| Spectre     | ✓              | ✗               |
| Meltdown-RW* | ✓             | -               |
| Meltdown-PK* | ✓             | -               |
| Meltdown-BR* | ✓             | -               |

* Only affects browsers that use these hardware features.

### Site Isolation
Site Isolation is a key mitigation strategy that effectively addresses same-process attacks, including those like Spectre-STL, which are difficult or costly for compilers to prevent [37]. For Meltdown attacks targeting same-process data (e.g., Meltdown-RW, which can transiently overwrite read-only data), Site Isolation is also effective. It is less clear whether Meltdown-PK and Meltdown-BR [8] are relevant in the browser context, but Site Isolation would mitigate them if browsers used protection keys [38] or hardware-based array bounds checks, respectively.

### Cross-Process and Kernel Data
Site Isolation does not address attacks targeting data in other processes or the kernel, such as the "Outside Process" variants in Table 1 and Microarchitectural Data Sampling (MDS) attacks [40, 57, 66]. These must be mitigated by combining Site Isolation with hardware and OS-level mitigations. For example, Page Table Isolation (PTI) is a widely used mitigation for Meltdown-US, eliminating kernel memory from the address space of each user process [15, 24]. Similarly, microcode updates and avoiding sibling Hyper-Threads for untrustworthy code may be useful for MDS attacks [40, 57, 66].

Ultimately, cross-process and user/kernel boundaries must be enforced by the OS and hardware, not left to applications. Within a process, however, the OS and hardware have limited visibility into where isolation is needed. Thus, applications running untrustworthy code (e.g., browsers) must align their architectures with OS-enforced abstractions to isolate these principals. As a result, Site Isolation has been chosen as the most effective mitigation strategy for Chrome. When enabled, Chrome re-enables SharedArrayBuffer and other precise timers and removes JavaScript compiler mitigations, restoring powerful functionality and performance.

## Performance Impact of Site Isolation

### Observed Workload
To evaluate the performance impact of Site Isolation, we measured its effect on memory overhead, latency, and CPU usage in real-world scenarios and microbenchmarks. We found that the new architecture has low enough overhead to be practical for deployment.

#### Process Count
With Site Isolation, the browser must create more renderer processes to keep sites isolated. Using periodic samples, we found that users had 6.0 unique sites open at the 50th percentile and 41.9 unique sites at the 99th percentile. This provides a lower bound for the number of renderer processes; each instance of a site might live in a separate process. If this were the case, our metrics give an upper bound estimate of 79.7 processes at the 99th percentile. However, thanks to process sharing heuristics, far fewer processes were used in practice. At the 50th percentile, the number of processes increased 43.5% from 4.4 without Site Isolation to 6.2 with Site Isolation. At the 99th percentile, the process count increased 50.6% from 35.0 to 52.7 processes.

#### Memory Overhead
The 50% increase in renderer process count is significant, but it does not necessarily translate to an equivalent increase in memory overhead or performance slowdowns. Site Isolation divides the existing workload across more processes, making each renderer process smaller and shorter-lived. In reported metrics, private memory use per renderer process decreased 51.5% (from 87.2 MB to 42.3 MB) at the 50th percentile and 28.6% (from 714.2 MB to 509.7 MB) at the 99th percentile. Renderer process lifetime decreased 4.3% at the 50th percentile and 55.5% at the 99th percentile.

Total private memory use across all processes (including browser, renderer, and utility processes) increased only 12.6% at the 25th percentile and 8.6% at the 99th percentile. This is significantly lower than the 50% increase in process count, indicating that the large number of extra processes has a relatively small impact on total memory use. Due to the severity of transient execution attacks and the drawbacks of other mitigation strategies, the Chrome team was willing to accept 9-13% memory overhead for the security benefits of enabling Site Isolation.

#### Latency
Site Isolation impacts latency in multiple ways, from page load time to input event responsiveness. More navigations need to create new processes, which can incur latency due to process startup time. There may also be greater contention for IPC messages and input event routing, leading to some delays. However, there is a significant amount of new parallelism possible now that the workload for a given page can be split across multiple independent threads of execution.

Site Isolation significantly increased the percentage of navigations that cross a process boundary, from 5.73% to 56.0%. However, by starting the renderer process in parallel with making the network request, combined with the increased parallelism of loading cross-site iframes in different processes, we see very little change in page load time. Across all navigations, the time from navigation start to the first paint of page content increased at most 2.25% at the 25th percentile (from 457 ms to 467 ms) and 1.58% at the 99th percentile (from 14.6 s to 14.8 s). This metric also benefits from the spare process optimization, which avoids process startup latency on many navigations. Without the spare process, the "First Contentful Paint" time increases 5.1% at the 25th percentile and 2.4% at the 99th percentile.

For back/forward navigations, which frequently load pages from the cache without waiting for the network, the time to First Contentful Paint increased 28.3% at the 25th percentile (from 177 ms to 227 ms) and 6.8% at the 99th percentile (from 4637 ms to 4952 ms). With the spare process, this is better than without, in which case we see increases of 40.7% and 12.5% at these percentiles, respectively.

#### CPU Usage
Finally, we studied the impact of Site Isolation on CPU usage. Average CPU usage in the browser process increased 8.2% (from 32.0% to 34.6%) at the 99th percentile. While there were more renderer processes, each renderer's average CPU usage dropped 33.5% (from 47.7% to 31.8%) at the 99th percentile, as the workload was distributed across more processes.

### Microbenchmarks
Microbenchmark results show the overhead of Site Isolation on individual web pages when loaded in a single tab, with nothing else running in the browser. This setup does not benefit from process consolidation across multiple tabs, so it is not representative of real-world workloads. However, these measurements establish a baseline and provide a reproducible reference point for future research.

To study a mix of popular and slightly less popular sites, we selected the top site and the 50th-ranked site in Alexa categories for news, sports, games, shopping, and home, as well as google.com as the top overall URL. This set provides pages with a range of cross-site iframe counts, showing how the browser scales with more processes per page.

We started Chrome version 69.0.3497.100 with a clean profile and loaded each site in a single tab, both with and without Site Isolation. We report the median of five trials for each data point to reduce variability and replayed recorded network data for all runs using WprGo [69]. Our experiments were performed on a Windows 10 desktop with an Intel Core i7-8700K 3.7 GHz 6-core CPU and 16 GB RAM. Our data collection script is available online [45].

Figure 4 (a) shows the total browser memory use for each site, sorted by the number of renderer processes (shown in parentheses) that each site utilizes when loaded with Site Isolation. As expected, the relative memory overhead generally increases with the number of processes, peaking at 89% for wowprogress.com with 10 processes. Sites that use more memory tend to have smaller relative overhead, as their memory usage outweighs the cost of extra processes. For example, a heavier amazon.com site has a 5% overhead compared to seatguru.com’s 31%, even though both require five processes. Google.com does not have any cross-site iframes and requires no extra processes, but it shows a 4% increase in memory use due to the spare process maintained with Site Isolation, as explained in Section 4.1.3.

The overhead seen in these results is significantly higher than the 9-13% overhead reported from real-world user workloads. This underscores the limitations of microbenchmarks: users tend to have multiple tabs (four at the 50th percentile) and a variety of open URLs. In practice, this helps reduce memory overhead via process consolidation, while iframe-heavy sites like wowprogress.com may represent only a small part of users' browsing sessions.

Figure 4 (b) shows the time to First Contentful Paint [22] for each site, to gauge the impact on page load time. Most paint times improve with Site Isolation because the spare process helps mask process startup costs, which play a larger role than network latency due to the benchmark's use of recorded network traffic. The speedups are not correlated with process counts; Site Isolation offloads some of the work from the main frame into iframe renderers, which may make the main frame more responsive regardless of process count.

## Compatibility
Site Isolation strives to avoid web-visible changes. For example, Cross-Origin Read Blocking (CORB) blocks less than 1% of responses, most of which are not observable. If it only relied on content type and not confirmation sniffing, it would block 20% of responses [17]. Additionally, since cross-origin frame interactions had been mostly asynchronous prior to our work, making these interactions cross-process is largely transparent. Overall, we found that enabling Site Isolation had a much smaller performance impact than expected due to the properties of the workload. Given the importance of mitigating the attacks in the threat model described in Section 2, the Chrome team has chosen to keep Site Isolation enabled for all users on desktop and laptop devices.