[Variable]
int rl_mark
The mark (saved position) in the current line. If set, the mark and point deﬁne a
region.
[Variable]
int rl_done
Setting this to a non-zero value causes Readline to return the current line immediately.
[Variable]
int rl_num_chars_to_read
Setting this to a positive value before calling readline() causes Readline to return
after accepting that many characters, rather than reading up to a character bound
to accept-line.
[Variable]
int rl_pending_input
Setting this to a value makes it the next keystroke read. This is a way to stuﬀ a single
character into the input stream.
[Variable]
int rl_dispatching
Set to a non-zero value if a function is being called from a key binding; zero otherwise.
Application functions can test this to discover whether they were called directly or
by Readline’s dispatching mechanism.
[Variable]
int rl_erase_empty_line
Setting this to a non-zero value causes Readline to completely erase the current
line, including any prompt, any time a newline is typed as the only character on
an otherwise-empty line. The cursor is moved to the beginning of the newly-blank
line.
Chapter 2: Programming with GNU Readline
24
[Variable]
char * rl_prompt
The prompt Readline uses. This is set from the argument to readline(), and should
not be assigned to directly. The rl_set_prompt() function (see Section 2.4.6 [Redis-
play], page 32) may be used to modify the prompt string after calling readline().
[Variable]
char * rl_display_prompt
The string displayed as the prompt. This is usually identical to rl prompt, but may
be changed temporarily by functions that use the prompt string as a message area,
such as incremental search.
[Variable]
int rl_already_prompted
If an application wishes to display the prompt itself, rather than have Readline do
it the ﬁrst time readline() is called, it should set this variable to a non-zero value
after displaying the prompt. The prompt must also be passed as the argument to
readline() so the redisplay functions can update the display properly. The calling
application is responsible for managing the value; Readline never sets it.
[Variable]
const char * rl_library_version
The version number of this revision of the library.
[Variable]
int rl_readline_version
An integer encoding the current version of the library. The encoding is of the form
0xMMmm, where MM is the two-digit major version number, and mm is the two-
digit minor version number. For example, for Readline-4.2, rl_readline_version
would have the value 0x0402.
[Variable]
int rl_gnu_readline_p
Always set to 1, denoting that this is gnu readline rather than some emulation.
[Variable]
const char * rl_terminal_name
The terminal type, used for initialization. If not set by the application, Readline sets
this to the value of the TERM environment variable the ﬁrst time it is called.
[Variable]
const char * rl_readline_name
This variable is set to a unique name by each application using Readline. The value
allows conditional parsing of the inputrc ﬁle (see Section 1.3.2 [Conditional Init Con-
structs], page 10).
[Variable]
FILE * rl_instream
The stdio stream from which Readline reads input. If NULL, Readline defaults to
stdin.
[Variable]
FILE * rl_outstream
The stdio stream to which Readline performs output. If NULL, Readline defaults to
stdout.
[Variable]
int rl_prefer_env_winsize
If non-zero, Readline gives values found in the LINES and COLUMNS environment vari-
ables greater precedence than values fetched from the kernel when computing the
screen dimensions.
Chapter 2: Programming with GNU Readline
25
[Variable]
rl_command_func_t * rl_last_func
The address of the last command function Readline executed. May be used to test
whether or not a function is being executed twice in succession, for example.
[Variable]
rl_hook_func_t * rl_startup_hook
If non-zero, this is the address of a function to call just before readline prints the
ﬁrst prompt.
[Variable]
rl_hook_func_t * rl_pre_input_hook
If non-zero, this is the address of a function to call after the ﬁrst prompt has been
printed and just before readline starts reading input characters.
[Variable]
rl_hook_func_t * rl_event_hook
If non-zero, this is the address of a function to call periodically when Readline is
waiting for terminal input. By default, this will be called at most ten times a second
if there is no keyboard input.
[Variable]
rl_getc_func_t * rl_getc_function
If non-zero, Readline will call indirectly through this pointer to get a character from
the input stream. By default, it is set to rl_getc, the default Readline character
input function (see Section 2.4.8 [Character Input], page 34).
[Variable]
rl_voidfunc_t * rl_redisplay_function
If non-zero, Readline will call indirectly through this pointer to update the display
with the current contents of the editing buﬀer. By default, it is set to rl_redisplay,
the default Readline redisplay function (see Section 2.4.6 [Redisplay], page 32).
[Variable]
rl_vintfunc_t * rl_prep_term_function
If non-zero, Readline will call indirectly through this pointer to initialize the terminal.
The function takes a single argument, an int ﬂag that says whether or not to use
eight-bit characters. By default, this is set to rl_prep_terminal (see Section 2.4.9
[Terminal Management], page 34).
[Variable]
rl_voidfunc_t * rl_deprep_term_function
If non-zero, Readline will call indirectly through this pointer to reset the terminal.
This function should undo the eﬀects of rl_prep_term_function. By default, this
is set to rl_deprep_terminal (see Section 2.4.9 [Terminal Management], page 34).
[Variable]
Keymap rl_executing_keymap
This variable is set to the keymap (see Section 2.4.2 [Keymaps], page 28) in which
the currently executing readline function was found.
[Variable]
Keymap rl_binding_keymap
This variable is set to the keymap (see Section 2.4.2 [Keymaps], page 28) in which
the last key binding occurred.
[Variable]
char * rl_executing_macro
This variable is set to the text of any currently-executing macro.
Chapter 2: Programming with GNU Readline
26
[Variable]
int rl_readline_state
A variable with bit values that encapsulate the current Readline state. A bit is set
with the RL_SETSTATE macro, and unset with the RL_UNSETSTATE macro. Use the
RL_ISSTATE macro to test whether a particular state bit is set. Current state bits
include:
RL_STATE_NONE
Readline has not yet been called, nor has it begun to intialize.
RL_STATE_INITIALIZING
Readline is initializing its internal data structures.
RL_STATE_INITIALIZED
Readline has completed its initialization.
RL_STATE_TERMPREPPED
Readline has modiﬁed the terminal modes to do its own input and redis-
play.
RL_STATE_READCMD
Readline is reading a command from the keyboard.
RL_STATE_METANEXT
Readline is reading more input after reading the meta-preﬁx character.
RL_STATE_DISPATCHING
Readline is dispatching to a command.
RL_STATE_MOREINPUT
Readline is reading more input while executing an editing command.
RL_STATE_ISEARCH
Readline is performing an incremental history search.
RL_STATE_NSEARCH
Readline is performing a non-incremental history search.
RL_STATE_SEARCH
Readline is searching backward or forward through the history for a string.
RL_STATE_NUMERICARG
Readline is reading a numeric argument.
RL_STATE_MACROINPUT
Readline is currently getting its input from a previously-deﬁned keyboard
macro.
RL_STATE_MACRODEF
Readline is currently reading characters deﬁning a keyboard macro.
RL_STATE_OVERWRITE
Readline is in overwrite mode.
RL_STATE_COMPLETING
Readline is performing word completion.
Chapter 2: Programming with GNU Readline
27
RL_STATE_SIGHANDLER
Readline is currently executing the readline signal handler.
RL_STATE_UNDOING
Readline is performing an undo.
RL_STATE_INPUTPENDING
Readline has input pending due to a call to rl_execute_next().
RL_STATE_TTYCSAVED
Readline has saved the values of the terminal’s special characters.
RL_STATE_CALLBACK
Readline is currently using the alternate (callback) interface (see Sec-
tion 2.4.12 [Alternate Interface], page 37).
RL_STATE_VIMOTION
Readline is reading the argument to a vi-mode "motion" command.
RL_STATE_MULTIKEY
Readline is reading a multiple-keystroke command.
RL_STATE_VICMDONCE
Readline has entered vi command (movement) mode at least one time
during the current call to readline().
RL_STATE_DONE
Readline has read a key sequence bound to accept-line and is about to
return the line to the caller.
[Variable]
int rl_explicit_arg
Set to a non-zero value if an explicit numeric argument was speciﬁed by the user.
Only valid in a bindable command function.
[Variable]
int rl_numeric_arg
Set to the value of any numeric argument explicitly speciﬁed by the user before
executing the current Readline function. Only valid in a bindable command function.
[Variable]
int rl_editing_mode
Set to a value denoting Readline’s current editing mode. A value of 1 means Readline
is currently in emacs mode; 0 means that vi mode is active.
2.4 Readline Convenience Functions
2.4.1 Naming a Function
The user can dynamically change the bindings of keys while using Readline. This is done by
representing the function with a descriptive name. The user is able to type the descriptive
name when referring to the function. Thus, in an init ﬁle, one might ﬁnd
Meta-Rubout:
backward-kill-word
This binds the keystroke Meta-Rubout to the function descriptively named backward-
kill-word. You, as the programmer, should bind the functions you write to descriptive
names as well. Readline provides a function for doing that:
Chapter 2: Programming with GNU Readline
28
[Function]
int rl_add_defun (const char *name, rl command func t *function, int
key)
Add name to the list of named functions. Make function be the function that gets
called. If key is not -1, then bind it to function using rl_bind_key().
Using this function alone is suﬃcient for most applications. It is the recommended way
to add a few functions to the default functions that Readline has built in. If you need to do
something other than adding a function to Readline, you may need to use the underlying
functions described below.
2.4.2 Selecting a Keymap
Key bindings take place on a keymap. The keymap is the association between the keys
that the user types and the functions that get run. You can make your own keymaps, copy
existing keymaps, and tell Readline which keymap to use.
[Function]
Keymap rl_make_bare_keymap (void)
Returns a new, empty keymap. The space for the keymap is allocated with malloc();
the caller should free it by calling rl_free_keymap() when done.
[Function]
Keymap rl_copy_keymap (Keymap map)
Return a new keymap which is a copy of map.
[Function]
Keymap rl_make_keymap (void)
Return a new keymap with the printing characters bound to rl insert, the lowercase
Meta characters bound to run their equivalents, and the Meta digits bound to produce
numeric arguments.
[Function]
void rl_discard_keymap (Keymap keymap)
Free the storage associated with the data in keymap. The caller should free keymap.
[Function]
void rl_free_keymap (Keymap keymap)
Free all storage associated with keymap. This calls rl_discard_keymap to free sub-
ordindate keymaps and macros.
Readline has several internal keymaps.
These functions allow you to change which
keymap is active.
[Function]
Keymap rl_get_keymap (void)
Returns the currently active keymap.
[Function]
void rl_set_keymap (Keymap keymap)
Makes keymap the currently active keymap.
[Function]
Keymap rl_get_keymap_by_name (const char *name)
Return the keymap matching name. name is one which would be supplied in a set
keymap inputrc line (see Section 1.3 [Readline Init File], page 4).
[Function]
char * rl_get_keymap_name (Keymap keymap)
Return the name matching keymap. name is one which would be supplied in a set
keymap inputrc line (see Section 1.3 [Readline Init File], page 4).
Chapter 2: Programming with GNU Readline
29
2.4.3 Binding Keys
Key sequences are associate with functions through the keymap. Readline has several in-
ternal keymaps: emacs_standard_keymap, emacs_meta_keymap, emacs_ctlx_keymap, vi_
movement_keymap, and vi_insertion_keymap.
emacs_standard_keymap is the default,
and the examples in this manual assume that.
Since readline() installs a set of default key bindings the ﬁrst time it is called, there is
always the danger that a custom binding installed before the ﬁrst call to readline() will
be overridden. An alternate mechanism is to install custom key bindings in an initialization
function assigned to the rl_startup_hook variable (see Section 2.3 [Readline Variables],
page 23).
These functions manage key bindings.
[Function]
int rl_bind_key (int key, rl command func t *function)
Binds key to function in the currently active keymap. Returns non-zero in the case
of an invalid key.
[Function]
int rl_bind_key_in_map (int key, rl command func t *function,
Keymap map)
Bind key to function in map. Returns non-zero in the case of an invalid key.