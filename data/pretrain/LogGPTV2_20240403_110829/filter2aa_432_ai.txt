       #include 
       int getrlimit (int resource, struct rlimit *rlim);
       int getrusage (int who, struct rusage *usage);
       int setrlimit (int resource, const struct rlimit *rlim);
其中，getrlimit 和 setrlimit 分别被用来取得和设定进程对资源的的限制。它们的参数是
相同的，第一个参数 resource 指定了调用操作的资源类型，可以指定的几种资源类型见表
3-1：
表 3-1  resource 参数的取值及其含义
RLIMIT_CPU
CPU 时间，以秒为单位。
RLIMIT_FSIZE
文件的最大尺寸，以字节为单位。
RLIMIT_DATA
数据区的最大尺寸，以字节为单位。
RLIMIT_STACK
堆栈区的最大尺寸，以字节为单位。
RLIMIT_CORE
最大的核心文件尺寸，以字节为单位。
RLIMIT_RSS
resident set 的最大尺寸。
RLIMIT_NPROC
最大的进程数目
RLIMIT_NOFILE
最多能打开的文件数目。
RLIMIT_MEMLOCK
最大的内存地址空间
第二个参数 rlim 用于取得/设定具体的限制。struct rlimit 的定义如下：
            struct rlimit
            {
                 int  rlim_cur;
                 int  rlim_max;
            };
rlim_cur 是目前所使用的资源数，rlim_max 是限制数。如果想取消某个资源的限制，
可以把 RLIM_INFINITY 赋给 rlim 参数。
第三章 进程控制
- 45 -
只有超级用户可以取消或者放大对资源的限制。普通用户只能缩小对资源的限制。
如果调用成功，函数返回 0，否则返回-1。
系统调用 getrusage()返回当前的资源使用情况。其有两个参数：
第一个参数 who 指定了查看的对象，可以是：
RUSAGE_SELF  查看进程自身的资源使用状况。
RUSAGE_CHILDREN  查看进程的子进程的资源使用状况。
第二个参数 usage 用于接收资源的使用状况，rusage 结构的定义如下：
            struct rusage
            {
                 struct timeval ru_utime; /* 使用的用户时间 */
                 struct timeval ru_stime; /* 使用的系统时间 */
                 long ru_maxrss;          /* 最大的保留集合尺寸 */
                 long ru_ixrss;      /* 内部共享内存尺寸*/
                 long ru_idrss;      /* 内部非共享数据尺寸 */
                 long ru_isrss;      /* 内部非共享栈尺寸 */
                 long ru_minflt;          /* 重复声明页 */
                 long ru_majflt;          /* 错误调用页数 */
                 long ru_nswap;      /* 交换区 */
                 long ru_inblock;         /* 阻塞的输入操作数 */
                 long ru_oublock;         /* 阻塞的输出操作数 */
                 long ru_msgsnd;          /* 发送的消息 */
                 long ru_msgrcv;          /* 接受的消息 */
                 long ru_nsignals;        /* 接受的信号 */
                 long ru_nvcsw;      /* 志愿上下文开关 */
                 long ru_nivcsw;          /* 非志愿上下文开关 */
            };
函数调用成功，返回 0，否则返回-1。
3.3.7  进程的优先级
系统以整型变量 nice 为基础，来决定一个特定进程可得到的 CPU 时间的比例。nice 之
值从 0 至其最大值。我们把 nice 值称为进程的优先数。进程的优先数越大，其优先权就越
低。普通进程可以使用系统调用 nice()来降低它的优先权，以把更多的资源分给其它进程。
具体的做法是给系统调用 nice 的参数定一个正数，nice()调用将其加到当前的 nice 值上。
例如：
#include 
nice(5);
这就使当前的优先数增加了 5,显然，其对应进程的优先权降低了。
超级用户可以用系统调用 nice()增加优先权，这时只需给 nice()一个负值的参数，如：
nice(-1);
- 46 -
Linux网络编程
3.4  守护进程
3.4.1  简介
守护进程是一种后台运行并且独立于所有终端控制之外的进程。UNIX/Linux 系统通常
有许多的守护进程，它们执行着各种系统服务和管理的任务。
为什么需要有独立于终端之外的进程呢？首先，处于安全性的考虑我们不希望这些进
程在执行中的信息在任何一个终端上显示。其次，我们也不希望这些进程被终端所产生的
中断信号所打断。最后，虽然我们可以通过&将程序转为后台执行，我们有时也会需要程
序能够自动将其转入后台执行。因此，我们需要守护进程。
3.4.2  守护进程的启动
要启动一个守护进程，可以采取以下的几种方式：
1．在系统期间通过系统的初始化脚本启动守护进程。这些脚本通常在目录 etc/rc.d 下，
通过它们所启动的守护进程具有超级用户的权限。系统的一些基本服务程序通常都是通过
这种方式启动的。
2．很多网络服务程序是由 inetd 守护程序启动的。在后面的章节中我们还会讲到它。
它监听各种网络请求，如 telnet、ftp 等，在请求到达时启动相应的服务器程序（telnet server、
ftp server 等）。
3．由 cron 定时启动的处理程序。这些程序在运行时实际上也是一个守护进程。
4．由 at 启动的处理程序。
5．守护程序也可以从终端启动，通常这种方式只用于守护进程的测试，或者是重起因
某种原因而停止的进程。
6．在终端上用 nohup 启动的进程。用这种方法可以把所有的程序都变为守护进程，但
在本节中我们不予讨论。
3.4.3  守护进程的错误输出
守护进程不属于任何的终端，所以当需要输出某些信息时，它无法像通常程序那样将
信息直接输出到标准输出和标准错误输出中。这就需要某些特殊的机制来处理它的输出。
为了解决这个问题，Linux 系统提供了 syslog()系统调用。通过它，守护进程可以向系统的
log 文件写入信息。它在 Linux 系统函数库 syslog.h 中的定义如下：
void syslog( int priority, char *format, ...);
该调用有两个参数：
priority 参数指明了进程要写入信息的等级和用途，可以的取值如表 3-2 所示：
表 3-2  priority 等级取值及其含义
等级
值
描述
LOG_EMERG
0
系统崩溃（最高优先级）
LOG_ALERT
1
必须立即处理的动作
LOG_CRIT
2
危急的情况
LOG_ERR
3
错误
LOG_WARNING
4
警告
LOG_NOTICE
5
正常但是值得注意的情况（缺省）
LOG_INFO
6
信息
第三章 进程控制
- 47 -
LOG_DEBUG
7
调试信息（最低优先级）
如果等级没有被指定，就自动取缺省值 LOG_NOTICE。
表 3-3 是用途的类型：
表 3-3  priority 用途的取值及其含义
用途
描述
LOG_AUTH
安全/管理信息
LOG_AUTHPRIV
安全/管理信息（私人）
LOG_CRON
cron 守护进程
LOG_DAEMON
系统守护进程
LOG_FTP
ftp 守护进程
LOG_KERN
内核守护进程
LOG_LOCAL0
local use
LOG_LOCAL1
local use
LOG_LOCAL2
local use
LOG_LOCAL3
local use
LOG_LOCAL4
local use
LOG_LOCAL5
local use
LOG_LOCAL6
local use
LOG_LOCAL7
local use
LOG_LPR
行打印机系统
LOG_MAIL
mail 系统
LOG_NEWS
network news 系统
LOG_SYSLOG
syslogd 进程产生的信息
LOG_USER
随机用户信息（缺省）
LOG_UUCP
UUCP 系统
如果没有指定用途，缺省的 LOG_USER 就自动被指定。
syslog()调用后面的参数用法和 printf()类似，message 是一个格式串，指定了记录输出
的格式。需要注意的是在这个串的最后需要指定一个%m，其对应着 errno 错误码。
下面是一个例子：
syslog(LOG_INFO|LOG_LOCAL2,”rename(%s,%s): %m”,file1,file2);
在 etc/syslog.conf 中指定了各种信息存放的位置。例如，在 syslog.conf 中下面的一项：
local7.debug
/var/log/temp/log
表示系统将所有 LOG_DEBUG|LOG_LOCAL7 的信息都储存到/var/log/temp/log 中，这
样可以方便信息的分类整理。
在一个进程使用 syslog()的时候，应该先使用 openlog()打开系统记录：
#include 
void openlog(const char *ident, int options, int facility);
参数 ident 是一个字符串，它将被加在所有用 syslog()写入的信息前。通常这个参数是
程序的名字。
参数 options 可以是表 3-4 这些参数或是它们的或（｜）的结果：
表 3-4  option 的取值及其含义
参数
描述
LOG_CONS
如果不能写入 log 信息，则直接将其发往主控台
LOG_NDELAY
直接建立与 syslogd 进程的连接而不是打开 log 文件
LOG_PERROR
将信息写入 log 的的同时也发送到标准错误输出
LOG_PID
在每个信息中加入 pid 信息。
- 48 -
Linux网络编程
参数 facility 指定了 syslog()调用的缺省用途值。
在使用完 log 之后，可以使用系统调用 closelog()来关闭它：
void closelog(void);
3.4.4  守护进程的建立
在介绍守护进程的建立之前，首先来看一下下面的这个例程 daemon_init() ，它演示了
建立一个守护进程的全部过程：
#include 
#include 
#include 
#include 
#define MAXFD 64
void daemon_init(const char *pname, int facility)
{
int i:
pid_t pid;
/* fork,终止父进程 */
if (pid=fork())
exit(0);
/* 第一子进程 */
setsid();
signal(SIGHUP,SIG_IGN);
/* fork,终止第一子进程 */
if (pid=fork())
exit(0);
/* 第二子进程 */
daemon_proc=1;
/* 将工作目录设定为"/" */
chdir("/");
/* 清除文件掩码 */
umask(0);
/* 关闭所有文件句柄 */
for (i=0;i<MAXFD;i++)
{
close(i);
}
/* 打开 log */
openlog(pname,LOG_PID,facility);