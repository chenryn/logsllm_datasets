信息。
(5) 根据所收集的信息，调度器将新建的Pod分发到合适的从属节点上。
在apiserver的存储库中，存储着Kubernetes的各种核心对象信息，它们是一个个注册表。下
面我们简要说明最重要的几个注册表。
 从属注册表。负责跟踪集群中的从属节点信息。Kubernetes将节点注册表的信息封装成
RESTful形式并提供API，通过这些API可以创建和删除从属节点，目前不支持从属节点的
修改。Scheduler根据从属的节点信息决定是否将新的Pod分配到该节点。
 Pod注册表。记录集群中的Pod信息以及Pod和从属节点的映射关系。通过REST接口，可
16.3 架构和组件 197
以对Pod进行创建（Create）、获取（Get）、列出（List）、更新（Update）和删除（Delete）
1
等操作。此外，可以通过watch接口监听Pod的事件，例如创建、删除等。
 服务注册表。负责跟踪集群中所有服务的信息。通过REST接口，可以对服务进行创建、 2
获取、列出、更新和删除等操作。此外，也可以通过watch接口设置事件监听，监听服务
的变更事件。
3
 控制器注册表。负责跟踪集群中所有的控制器，例如备份控制器（Replication Controller）
的信息。通过REST接口，可以对控制器进行创建、获取、列出、更新和删除等操作。此
4
外，还可以通过watch接口监听控制器的事件。
 端点注册表。负责收集服务的端点信息。一个服务可以和多个端点关联，每一个端点就
5
是集群中提供该服务的从属节点。通过REST接口，可以对该表项进行创建、获取、列出、
更新、删除和监视操作。
6
 绑定注册表。它是记录Pod和节点之间绑定关系的表，只有创建操作。
2. 调度器 7
它负责收集和分析当前Kubernetes集群中所有从属节点的资源使用情况，并为新建的Pod分配
9
资源。调度器会实时监控Kubernetes集群中未分发的Pod，同时实时追踪集群中所有运行的Pod，
根据这些Pod的资源使用状况，为尚未分发的Pod选择一个最为合适的从属节点。一旦将某个Pod
8
分配到某个从属节点，那就意味着这个节点的资源被占用，这部分资源就不可能再分配给其他
Pod，除非该Pod被回收。在将Pod分发到指定从属节点后，调度器会把Pod的相关信息写回到
apiserver。 10
3. 控制器管理器
10
目前，Kubernetes的控制器有端点控制器（Endpoint Controller）和备份控制器（Replication
Controller）。端点控制器主要保证服务和Pod之间的映射关系是最新的。例如当Pod失效时，则应
11
该及时更新服务与它的映射，将它从服务的映射列表中去除。当有新的符合条件的Pod加入到一
项服务时，需要更新服务的端点信息。备份控制器用于控制Pod的备份，解决Pod的扩容缩容问题。
13
分布式应用出于提升服务性能和容错性等考虑，需要复制多份资源并根据负载而动态增加或者减
少。当某项服务的某个Pod因为异常而宕机时，备份控制器在检测到该事件发生后，会立即新建
14
一个该服务的Pod，以保证服务质量。
备份控制器的主要用法如下所示。 15
 调度。备份控制器会保证指定Pod的指定副本数量在运行，当节点异常退出时，立即新建
16
Pod副本进行替换。
 扩容缩容。根据需要动态增加或减少Pod数量。
 逐步更新。某项服务需要更新时，可以对一个个的Pod进行升级更新。 17
 应用的多分支跟踪。一个应用可以有多个分支，并且在集群中可以同时运行多个分支，
18
而分支之间通过标签来识别。
198 第16章 Kubernetes
16.3.2 从属节点
从属节点是Kubernetes集群中真正工作的节点。除了包含Pod外，还有用于管理和通信的基础
设施，主要是kubelet组件和服务代理。
1. kubelet
kubelet主要负责管理Pod及容器，以及与apiserver通信。它接收来自主控节点的apiserver组件
发来的命令和任务，并与Etcd、http等服务交互。kubelet包含Docker客户端、根目录、Pod Worker、
Etcd客户端、Cadvisor客户端以及Health Checker组件。它的工作具体包括：
 通过Pod Worker给Pod分配任务；
 同步Pod的状态；
 从Cadvisor获取容器、Pod、宿主主机信息；
 管理Pod容器，包括运行一个指定的容器，创建网络容器，给容器绑定数据卷和端口，杀
死和删除容器以及在容器中运行命令。
2. 服务代理
在16.2.3节中说明“服务”的概念时，我们提及服务代理，本节的代理即为服务代理。每生成
一种服务，代理都会从Etcd中获取该服务的端点列表信息，然后根据配置设置iptables规则，对服
务请求进行重定向。
16.3.3 组件交互流程
在介绍完核心概念、架构和组件之后，接下来说明这些组件是如何串联起来为我们服务的。
这里我们介绍一下创建Pod、备份控制器和服务的流程。
1. 创建Pod的流程
图16-5展示的是创建Pod的时序图。首先用户发起一个创建Pod的请求，kubectl会将该请求发
送给主控节点的apiserver组件；apiserver收到请求后，会向Etcd服务器请求添加一个Pod对象。调
度器定时获取整个集群中从属节点和Pod的状态，收集其中的资源利用状况，然后决定将本次新
建的Pod分配到哪个从属节点。当从属节点和Pod绑定后，调度器会将该绑定信息返回给apiserver，
然后apiserver会将该绑定持久化到Etcd中。此后，从属节点上的kubelet会定时地向Etcd汇报该绑
定的状态。kubelet会根据Pod配置信息创建并启动容器。
16.3 架构和组件 199
1
2
3
4
5
6
7
图16-5 创建Pod的时序图 9
2. 创建备份控制器的流程
8
图16-6是创建备份控制器的时序图。用户通过kubectl创建控制器，kubectl会将该请求投递到
主控节点的apiserver组件上，apiserver会在Etcd上新建controller对象。控制器管理器定时从
10
apiserver查询控制器的状态，获取控制器相关Pod的状态。当apiserver收到查询Pod状态的请求后，
它需要向相关的从属节点发出Pod状态查询，从属节点上的kubelet组件收到该请求后，会进一步
10
向Pod中的容器发起查询，然后将状态返回给apiserver，进一步返回给控制器管理器。控制器管
理器同步好Pod状态信息后，如有需要，例如发现有些Pod已经异常退出了，那么它就需要创建Pod
11
的副本，以保证集群中始终保持设定数量的Pod在运行。
3. 创建服务的流程 13
图16-7是创建服务的时序图。用户先创建一个新的应用服务，apiserver会通知Etcd建立相应
的service对象。对于服务的定义，可以参见16.2.3节中的示例，其中有个标签选择器，通过它可 14
以知道哪些Pod是会提供该服务的。控制器管理器获取该Pod列表后，将这些Pod都设定为该服务
的端点，这些端点信息会保存在Etcd中。从属节点上的服务代理会定期从apiserver那里获取所有 15
服务的信息，发现有新的服务并确认自己属于服务的提供者之后，接着在本地创建套接字用于监
听该服务的请求，设置iptables的网络规则，用于服务的重定向。此外，代理会及时更新服务的端 16
口列表，以供服务响应。
17
18
200 第16章 Kubernetes
图16-6 创建备份控制器的流程
图16-7 创建服务的时序图
16.4 Kubernetes 实战
在这一节中，我们将通过实际操作来说明如何搭建一个Kubernetes集群，其中主要涉及环境
部署和应用操作。
16.4 Kubernetes实战 201
16.4.1 环境部署
1
在Kubernetes的官网中，有各种环境下的搭建方法，不过想要就此搭建一个Kubernetes集群并
2
不容易。目前，网上有多种搭建方法，在我们经过多种实践和对比之后，我们推荐由国内Docker
布道者之一刘天斯首先提出的一种搭建方法，该方法提供了翔实的步骤并且操作相对简单。
3
1. 平台环境
在开始搭建Kubernetes之前，我们需要说明一下平台环境，其中包含平台版本和平台角色。 4
平台版本说明如下。
5
 操作系统：CentOS 7.0
 Kubernetes版本：v0.7.2
6
 Etcd版本：0.4.6
 Docker版本：1.4.0
7
平台角色说明如表16-1所示。
9
表16-1 平台角色
角 色 IP 组件说明
8
主控节点 192.168.1.83 Kubernetes
Etcd 192.168.1.84 Etcd
从属节点 192.168.1.85 Kubernetes+Docker 10
从属节点 192.168.1.86 Kubernetes+Docker
10
2. 环境安装
环境安装包含系统环境安装以及软件的安装。在下面的安装过程中，读者需要特别注意不同 11
主机因为其角色不同安装内容也会不一样。
 系统环境安装（对所有主机） 13
这包含操作系统的安装、epel源的更新以及防火墙的重新设置。
14
(1) 系统安装
对所有主机安装CentOS 7.0。为了节省时间，建议选择“最小安装”，这样安装的CentOS没有 15
图形界面。
16
(2) 添加epel源并更新
通过以下代码安装一些基础工具，例如wget、时钟同步的ntpdate、DNS工具包bind-utils和
17
epel源：
# yum -y install wget ntpdate bind-utils 18
# wget http://mirror.centos.org/centos/7/extras/x86_64/Packages/epel-release-7-2.noarch.rpm
202 第16章 Kubernetes
#yum install epel-release-7-2.noarch.rpm
# yum update
(3) 更改防火墙
CentOS 7.0默认使用firewall为防火墙，这里我们将其更改为iptables，具体步骤如下。
1) 停用firewall并禁止开机启动，其操作为：
# systemctl stop firewalld.service
# systemctl disable firewalld.service
2) 安装iptables，其操作为：
# yum install iptables-services #安装
# systemctl start iptables.service #重启使配置生效
# systemctl enable iptables.service #设置开机启动
 安装和配置Etcd（192.168.1.84主机）
在192.168.1.84这台主机上安装Etcd，用于存储Kubernetes的动态信息。
(1) 获取和安装Etcd，其操作为：
# wget https://github.com/coreos/etcd/releases/download/v0.4.6/etcd-v0.4.6-linux-amd64.tar.gz
# tar -zxvf etcd-v0.4.6-linux-amd64.tar.gz
# cd etcd-v0.4.6-linux-amd64
# cp etcd* /bin/
# /bin/etcd -version
etcd version 0.4.6
(2) 启动Etcd服务，其操作为：
#mkdir /data/etcd
#/bin/etcd -name etcdserver -peer-addr 192.168.1.84:7001 -addr 192.168.1.84:4001 -data-dir /data/etcd
-peer-bind-addr 0.0.0.0:7001 -bind-addr 0.0.0.0:4001 &
参数-peer-addr指定与其他节点通信的地址，-addr指定服务监听地址，-data-dir指定数据
存储目录。
(3) 配置Etcd的防火墙，允许4001和7001端口的请求：
# iptables -I INPUT -s 192.168.1.0/24 -p tcp --dport 4001 -j ACCEPT
# iptables -I INPUT -s 192.168.1.0/24 -p tcp --dport 7001 -j ACCEPT
安装Kubernetes（主控节点和从属节点）
不管是主控节点还是从属节点，安装Kubernetes的步骤是一致的，主要有3种方式，一是通过
yum源，二是下载最新的二进制文件进行安装，三是通过编译源码然后进行安装。
通过yum源安装的操作如下：
# curl https://copr.fedoraproject.org/coprs/eparis/kubernetes-epel-7/repo/epel-7/eparis-kubern etes
16.4 Kubernetes实战 203
-epel-7-epel-7.repo -o /etc/yum.repos.d/eparis-kubernetes-epel-7-epel-7.repo
1
#yum -y install kubernetes
这种方式安装的并不是最新版本，如果需要使用最新版本，则按第二种方法进行安装或者
2
升级。
下载最新的二进制文件，安装最新版本。 3
可以访问https://github.com/GoogleCloudPlatform/kubernetes/releases查看当前最新的版本，下
载下来之后解压，然后复制/bin下的二进制文件到/usr/bin目录中。例如，当前为v0.7.2版本，具体 4
操作为：
5
#wget https://github.com/GoogleCloudPlatform/kubernetes/releases/download/v0.7.2/kuberne
tes.tar.gz
#tar -zxvf kubernetes.tar.gz 6
# tar -zxvf kubernetes/server/kubernetes-server-linux-amd64.tar.gz
# cp kubernetes/server/bin/kube* /usr/bin
7
源码编译安装。
和第二种方法一样，可以通过https://github.com/GoogleCloudPlatform/kubernetes/releases下载
9
最新的源代码。如果你不需要对Kubernetes进行开发，而只是将源码编译成二进制，就不需要配
置golang环境。具体操作为：
8
#git clone https://github.com/GoogleCloudPlatform/kubernetes.git
#cd kubernetes
10
#make release
然后将相关二进制文件复制到/usr/bin中。如无特别需求，推荐使用第二种方法进行安装。
10
通过上述3种方式的任何一种安装完毕后，还要检查安装是否正确，这可以通过检测版本信
息来验证，具体如下： 11
# /usr/bin/kubectl version
Client Version: version.Info{Major:"0", Minor:"6+", GitVersion:"v0.6.2", 13
GitCommit:"729fde276613eedcd99ecf5b93f095b8deb64eb4", GitTreeState:"clean"}
Server Version: &version.Info{Major:"0", Minor:"6+", GitVersion:"v0.6.2",
GitCommit:"729fde276613eedcd99ecf5b93f095b8deb64eb4", GitTreeState:"clean"} 14
 配置主控节点
15
前面说过，主控节点包含apiserver、调度器和控制器管理器这3个组件，相关配置也涉及这
三块。
16
下面简要说明一下如何启动主控节点的3大组件，并将其加入开机启动中。
(1) /etc/kubernetes/config文件的配置，具体为： 17
# Comma seperated list of nodes in the etcd cluster
KUBE_ETCD_SERVERS="--etcd_servers=http://192.168.1.84:4001" 18
# logging to stderr means we get it in the systemd journal
204 第16章 Kubernetes
KUBE_LOGTOSTDERR="--logtostderr=true"