In  case  of simple cache miss, clustered cache 
is checked with probability 
-
B
C
D
E
F
G
H
I
I
J
K
-
H
I
J
K
G
H
I
I
J
K
-
G
H
I
J
L
M
N
N
O
P
Q
R
S
S
T
U
-
R
S
T
V
W
X
Y
Z
-
-
[
\
]
]
^
_
`
a
b
b
c
d
-
-
[
\
]
]
^
_
`
a
b
b
c
d
-
a
b
c
d
-
l
l
a
m
S
e
g
r
a
L
No cache 
Simple cache 
Clustered cache 
Clustered-popular 
cache 
Uniform groups 
Popular groups 
Uniform groups 
Popular groups 
50 
50 
500 
500 
50 
6 
500 
101 
11 
~11 
109 
~109 
17 
6.7 
112 
68 
Table 1: Calculated average numbers of encryptions 
Clustered-popular  cache  performs  best  in  the 
large set and the popular-set group distribution.  Next 
section  shows  that  the  clustered-popular  approach 
outperforms  other  algorithms  as  the  size  of  the  cache 
increases.    The  actual  numbers  for  both  clustered 
algorithms should be lower than the theoretical values.  
This is because we did not account for the fact that for 
some  events,  not  all  clusters  will  have  interested 
subscribers.    This  was  done  to  simplify  derivation.  
Also,  the  values  for  simple  cache  should  be  higher 
because  of  our  assumption  of  smart  cache.    We  were 
not able to approach the smart cache because of the size 
of our sample in the simulations. 
5  Simulations 
We ran a number of simulations to confirm our 
theoretical  results  as  well  as  to  compare  the  simple, 
clustered,  and  clustered-popular  approaches  to  the 
build-up  cache  as  well  as  to  an  LKH-based  approach 
random groups - cache 10,000
600
500
400
300
200
100
e
g
a
s
s
e
m
r
e
p
s
n
o
i
t
p
y
r
c
n
e
0
0
250
200
150
100
50
0
0
200
400
num ber of subscribers
600
800
1000
popular set groups - cache 10,000
200
400
number of subscribers
600
800
1000
Fig. 6: Number of encryptions, cache size 10,000. 
e
g
a
s
s
e
m
r
e
p
s
n
o
i
t
p
y
r
c
n
e
simple
build-up
clustered
clustered-popular
LKH
simple
build-up
clustered
clustered-popular
LKH-int
e
g
a
s
s
e
m
r
e
p
s
n
o
i
t
p
y
r
c
n
e
250
200
150
100
50
0
0
200
Cache 20,000
LKH
clustered
clustered-popular
(random)
clustered-popular
(popular-set)
800
1000
400
number of subscribers
600
Fig. 7: Number of encryptions, cache size 20,000. 
results  (except  for  the  LKH-based  approach,  which  is 
based on simulation results) in this figure are based on 
the approximate formulas derived in section 4.  As we 
can see, clustered and clustered-popular approaches are 
similar  with  random  group  distribution,  but 
the 
clustered-popular  algorithm  clearly  outperforms  all 
other  solutions  when  the  popular-set  distribution  is 
used.  In order to make judgments about usefulness of 
any  of  these  algorithms,  we  need  to  relate  number  of 
encryptions to a performance measure like throughput.  
We claimed that algorithms that reduce the number of 
encryptions  required  are  desirable  because 
large 
number  of  encryptions  per  message  reduces  message 
throughput at the broker.  We measured throughput of 
the  DES  algorithm  depending  on  the  number  of 
encryptions  per  message  to  show  that this is the case.  
We ran a number of experiments encrypting an 8-byte 
piece of data.  We varied the number of different keys 
used.    We  used  the  DES  algorithm  on  a  550Mhz 
Pentium III running RedHat Linux operating system. 
presented  for  comparison.    The  LKH  based  approach 
works by creating a hierarchical tree of keys.  When an 
event  arrives  at  broker  and  is  matched  to  a  group  of 
subscribers G, the tree is searched, bottom-up, for keys 
that  are  common  to  as  many  as  possible  subscribers 
from G but are not know to subscribers not in G.  The 
LKH-based scheme corresponds to a fixed cache size – 
the key tree only changes with changes in the number 
of subscribers.  We ran a number of simulations testing 
different parameter settings.  Each simulation consisted 
of  15,000  events.    All  caches  were  warm.    We  show 
results  for  both,  random  and  popular-set,  group 
distributions.    The  number  of  clusters  used  by  the 
cluster-based  algorithms  depends  on  the  number  of 
clients.    When  solving  equation  4  for  the  number  of 
clusters K, we get the optimal number of clusters when 
2
  (NK  is  the  number  of  clients  per  clusters 
and CK is the cluster cache size).  We chose the largest 
K which gave 
.  We used the same method 
to  determine  number  of  clusters  for  the  clustered 
popular approach. 
CK =
CK ‡
2
K
N
K
N
Figure  6  shows  results  for cache size 10,000, 
and  figure  7  shows  results  for  cache  size  20,000.  
Figure 7 shows results for only the clustered, clustered-
popular, and LKH-based approaches.   
The  clustered-popular  is  the  only  algorithm 
that  performs  differently  with  popular-set  group 
distribution.    We  can  see  that  clustered,  clustered-
popular,  and  LKH-based  algorithms  outperform  the 
simple and build-up caches for random groups.  In the 
case  of  popular-set  distribution,  all  perform  similarly 
with LKH-based approach being the worst.  When the 
cache  size  is  increased  to  20,000,  the  clustered 
approaches 
the  LKH-based 
algorithm.    Figure  8  shows  the  effect  of  increasing 
cache  size  on  the  number  of  encryptions  required  by 
each  algorithm  for  different  group  distributions.    The 
clearly  outperform 
250
200
e
g
a
s
s
e
m
150
r
e
p
s
n
o
i
t
p
y
r
c
n
e
100
50
0
0
clustered
(random)
clustered-
popular
(random)
clustered-
popular
(popular-
set)
simple
(popular)
LKH
5
1
4
cache size (millions of entries)
2
3
Fig. 8: Effects of cache size on the number of encryptions. 
)
c
e
s
/
s
e
t
y
b
K
(
t
u
p
h
g
u
o
r
h
t
70.00
60.00
50.00
40.00
30.00
20.00
10.00
0.00
0
20
40
60
Fig. 9: Message throughput as a function of the number of 
80
100
120
140
160
180
200
220
encryptions per message
encryptions per message. 
The  results  of  our  experiment  are  showed  in 
fig. 9.  The adverse effect of number of encryptions on 
throughput is clearly visible.  Based on our results, we 
see  that  clustered-popular  has  higher  throughput  than 
LKH-based  approach  by  approximately  100%  in  the 
case of popular-set distribution and by about 33% in the 
case of random group distribution.  Clustered-popular is 
also  about  50%  better  than  clustered  algorithm  for 
popular-set  distribution,  it,  however,  underperforms 
clustered  algorithm  by  about  10-20%  in  the  case  of 
random distribution. The LKH-based approach also has 
approximately 40% lower throughput than the clustered 
algorithms. 
6  Discussion  
We  can  draw  the  following  conclusions  from 
the above results:  
clustering of users into an appropriate number 
of  subgroups  can  substantially  reduce  the 
number  of  encryptions  required  for  both  the 
random case and the popular case. 
caching added to clustering can further reduce 
the  number  of  encryptions substantially (with 
corresponding 
message 