### Optimized Text

#### 4. Theoretical Analysis and Simulation Results

In the case of a simple cache miss, the clustered cache is checked with a certain probability. Table 1 below summarizes the calculated average numbers of encryptions for different caching strategies.

| Cache Type | Group Distribution | Cache Size | Average Encryptions |
|------------|--------------------|------------|---------------------|
| No Cache   | -                  | -          | 50                  |
| Simple Cache | -                | -          | 50                  |
| Clustered Cache | Uniform Groups | 500        | 50                  |
| Clustered-popular Cache | Popular Groups | 500 | 6                   |
| Clustered Cache | Uniform Groups | 500        | 101                 |
| Clustered-popular Cache | Popular Groups | 500 | 11                  |
| Clustered Cache | Uniform Groups | 500        | 109                 |
| Clustered-popular Cache | Popular Groups | 500 | 17                  |
| Clustered Cache | Uniform Groups | 500        | 6.7                 |
| Clustered-popular Cache | Popular Groups | 500 | 112                 |
| Clustered Cache | Uniform Groups | 500        | 68                  |

**Table 1: Calculated Average Numbers of Encryptions**

The clustered-popular cache performs best in both large set and popular-set group distributions. As the size of the cache increases, the clustered-popular approach outperforms other algorithms. The actual numbers for both clustered algorithms should be lower than the theoretical values because not all clusters will have interested subscribers, which was simplified for derivation. Additionally, the values for the simple cache should be higher due to our assumption of a smart cache, which we could not fully implement due to the sample size in simulations.

#### 5. Simulations

We conducted several simulations to confirm our theoretical results and compare the simple, clustered, and clustered-popular approaches to the build-up cache and an LKH-based approach.

- **Cache Size 10,000:**
  - **Random Groups:**
    - Simple: 600
    - Build-up: 500
    - Clustered: 400
    - Clustered-popular: 300
    - LKH: 200
  - **Popular Set Groups:**
    - Simple: 200
    - Build-up: 400
    - Clustered: 600
    - Clustered-popular: 800
    - LKH: 1000

- **Cache Size 20,000:**
  - **Random Groups:**
    - Simple: 250
    - Build-up: 200
    - Clustered: 150
    - Clustered-popular (random): 100
    - Clustered-popular (popular-set): 50
    - LKH: 0

**Figure 6: Number of encryptions, cache size 10,000.**

**Figure 7: Number of encryptions, cache size 20,000.**

As shown in Figures 6 and 7, the clustered and clustered-popular approaches perform similarly with random group distribution, but the clustered-popular algorithm clearly outperforms all other solutions when the popular-set distribution is used. To evaluate the usefulness of these algorithms, we need to relate the number of encryptions to a performance measure like throughput. We claimed that algorithms that reduce the number of encryptions required are desirable because a large number of encryptions per message reduces message throughput at the broker.

We measured the throughput of the DES algorithm depending on the number of encryptions per message. We ran experiments encrypting an 8-byte piece of data using the DES algorithm on a 550Mhz Pentium III running RedHat Linux.

**Figure 8: Effects of cache size on the number of encryptions.**

**Figure 9: Message throughput as a function of the number of encryptions per message.**

The results of our experiment, shown in Figure 9, clearly demonstrate the adverse effect of the number of encryptions on throughput. The clustered-popular approach has higher throughput than the LKH-based approach by approximately 100% in the case of popular-set distribution and by about 33% in the case of random group distribution. It also outperforms the clustered algorithm by about 50% for popular-set distribution but underperforms by about 10-20% in the case of random distribution. The LKH-based approach has approximately 40% lower throughput than the clustered algorithms.

#### 6. Discussion

From the above results, we can draw the following conclusions:

1. Clustering users into an appropriate number of subgroups can substantially reduce the number of encryptions required for both random and popular cases.
2. Adding caching to clustering can further reduce the number of encryptions, leading to a corresponding increase in message throughput.

These findings highlight the effectiveness of the clustered-popular approach in optimizing encryption operations and improving overall system performance.