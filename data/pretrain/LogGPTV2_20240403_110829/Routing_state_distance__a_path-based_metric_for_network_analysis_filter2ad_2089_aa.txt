title:Routing state distance: a path-based metric for network analysis
author:Gonca G&quot;ursun and
Natali Ruchansky and
Evimaria Terzi and
Mark Crovella
Routing State Distance:
A Path-based Metric for Network Analysis
Gonca Gürsun, Natali Ruchansky, Evimaria Terzi, and Mark Crovella
Department of Computer Science
Boston University
ABSTRACT
Characterizing the set of routes used between domains is
an important and diﬃcult problem. The size and complex-
ity of the millions of BGP paths in use at any time can
hide important phenomena and hinder attempts to under-
stand the path selection behavior of ASes.
In this paper
we introduce a new approach to analysis of the interdomain
routing system designed to shed light on collective routing
policies. Our approach starts by deﬁning a new metric for
‘distance’ between preﬁxes, which we call routing state dis-
tance (RSD). We show that RSD has a number of properties
that make it attractive for use in visualizing and analyzing
the state of the BGP system. Further, since RSD is a met-
ric, it lends itself naturally to use in clustering preﬁxes or
ASes. In fact, the properties of RSD allow us to deﬁne a
natural clustering criterion, and we show that this criterion
admits to a simple clustering algorithm with provable ap-
proximation guarantees. We then show that by clustering
ASes using RSD, one can uncover macroscopic behavior in
BGP that was previously hidden. For example, we show
how to identify groups of ASes having similar routing poli-
cies with respect to certain destinations, which apparently
reﬂects shared sensitivity to economic or performance con-
siderations. These routing patterns represent a considerable
generalization and extension of the notion of BGP atoms to
the case where routing policies are only locally and approx-
imately similar across a set of preﬁxes.
Categories and Subject Descriptors
C.2.3 [Network Operations]: Network monitoring; C.2.5
[Local and Wide-Area Networks]: Internet — BGP
Keywords
BGP, Interdomain Routing
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’12, November 14–16, 2012, Boston, Massachusetts, USA.
Copyright 2012 ACM 978-1-4503-1705-4/12/11 ...$15.00.
1.
INTRODUCTION
One of the principal challenges in working with measure-
ments of Internet topology is to extract insight from mas-
sive, complex datasets. Many projects have collected ex-
tensive measurements of Internet topology at the router or
autonomous-system (AS) level, but comparatively few tools
have been developed to discover important patterns or struc-
tures in the resulting data. The lack of such tools makes it
diﬃcult to visualize the Internet topology, understand the
routing behavior of ASes, and detect signiﬁcant changes in
Internet routing.
In this paper, we deﬁne a new metric for analyzing routing
at the interdomain level, and we describe various kinds of
useful data analysis that the metric enables. The metric is
called routing state distance (RSD); it measures ‘closeness’
between two preﬁxes in terms of similarity of routing to the
preﬁxes.
The key idea behind RSD can be stated simply: the rout-
ing state distance between two preﬁxes is conceptually just
the number of ASes that disagree about the next hop to the
two preﬁxes. (Later we will make this notion precise and
deal with the practical issues that arise in applying it to
real BGP measurements.) The basic idea is illustrated in
Figure 1. Figures 1(a), (b), and (c) each show the next hops
from a set of ASes to diﬀerent destinations. The routing
state distance between the destinations in (a) and (b) is 3,
because there are three ASes that choose diﬀerent next hops
between (a) and (b). Likewise, the routing state distance
between the destinations in (b) and (c) is 5.
The key properties of RSD can be understood by contrast-
ing it with typical measures of distance between ASes. The
most common starting point is the AS graph – a graph in
which nodes are ASes – and distance is traditionally thought
of as some number of hops between ASes. In contrast, RSD
is not deﬁned in terms of a graph; rather, it is deﬁned in
terms of a set of paths. This has a number of advantages.
First of all, it is well-known that measurements of the AS
graph are highly incomplete (a recent review of this prob-
lem is [17]). By deﬁning RSD in terms of AS paths rather
than the AS graph, the problem of missing edges in the AS
graph does not arise. This is a crucial advantage, given the
large fraction of missing edges in AS graph measurements.
Second, as we will show later, the set of paths to a preﬁx is a
much richer characterization of the preﬁx’s location than is
its position in the AS graph. As a result, RSD can provide
much more nuanced information about the relative location
of two (or more) preﬁxes than can be provided by simply
noting their position in a graph.
239(a)
(b)
(c)
Figure 1: Example illustrating RSD. In each ﬁgure the ﬁlled node is the destination.
Having deﬁned RSD, we next explore its utility. We show
that it has a number of desirable properties. First, it is
a metric (it obeys the triangle inequality), which makes it
easy to reason about. Second, we show that it deﬁnes ﬁne-
grained neighborhoods — the number of preﬁxes that are
within distance d of a given preﬁx declines smoothly with
decreasing d. Third, we show that RSD generally exhibits
low eﬀective dimension, which means that 2-D visualiza-
tions can capture most of the information present in a set
of RSD measurements. And fourth, we show that RSD has
a natural clustering criterion, and that criterion has an as-
sociated clustering algorithm with provable approximation
guarantees.
Most importantly, these four properties together allow us
to develop an analytic toolkit that we use to uncover sur-
prising patterns and behaviors that have not previously been
documented in the interdomain routing system. Using the
RSD toolkit we demonstrate the existence of collective rout-
ing behavior that we call local atoms. Roughly, a local atom
is a set of preﬁxes that are routed similarly, but only in some
region of the Internet. We show the existence of local atoms
spanning a wide range of sizes, from macroscopic (Internet-
wide) to microscopic. Although detecting these sorts of pat-
terns in data is hard in general, we show that RSD and its
associated clustering tools are natural and eﬀective ways to
uncover local atoms in BGP data.
Finally, we note that RSD, as a measure of distance be-
tween ASes, was ﬁrst introduced by G¨ursun et al. [10]. How-
ever, that paper used RSD for a speciﬁc purpose (as an input
to a particular inference algorithm), and did not focus on
the exploration of the theoretical and practical properties of
RSD as a distance measure. In this paper, we ﬁll this gap by
studying the geometric properties of RSD and by deﬁning
notions of clustering appropriately tailored to this measure.
Finally, we provide a thorough experimental study, which
demonstrates the utility of RSD and the clusters identiﬁed
by our clustering framework. Although our present study
is motivated by the concept of RSD deﬁned in [10], none of
the results we present here were anticipated or discussed in
that previous paper.
2. ROUTING STATE DISTANCE
In this section we deﬁne RSD starting from a general def-
inition for arbitrary graphs. We then discuss how to cus-
tomize RSD to address the practical issues that arise when
applying it to BGP measurements.
2.1 Deﬁnition
To deﬁne RSD, we will assume a universe X of nodes,
with |X| = n.1 To ﬁx a set of paths, we require that for
each source-destination pair (x1, x2) there is a unique node
x3, which is the next hop on the path from x1 to x2. We
denote this by x3 = N(x1, x2). Note by following the nodes
on N(·, x2) recursively, one will eventually reach x2. We also
assume that the next hop of every node x is the node itself;
i.e., N(x, x) =x . Thus, N encodes a set of paths that leads
from each node to every other node, without any branches
or loops.
We generally treat the function N as an n×n matrix. That
is, we interpret N(x!, x) as a matrix element that stores the
next hop from node x! to node x. We also use N(x, :) (resp.
N(:, x)) to denote the x-th row (resp. column) of N. We call
N the nexthop matrix that encodes the paths over the set
X.
Using the nexthop matrix, we can deﬁne the Routing State
Distance (RSD) between two nodesx 1 and x2 as follows:
RSD(x1, x2) = |{xi | N(xi, x1) "= N(xi, x2)}| .
(1)
That is, RSD(x1, x2) is the number of positions where the
columns N(:, x1) and N(:, x2) diﬀer. Hence, by deﬁnition,
RSD is an integer that takes values in {0, . . . , n}. Referring
back to Figure 1, each of the subﬁgures (a), (b), and (c)
corresponds to a single column N(:, x) for diﬀerent values
of x. Intuitively, N(:, x) tells us what the ‘direction’ is to x
from each node in X. Two nodes that appear to most other
nodes to be in the same direction are considered close under
RSD.
We now show that RSD satisﬁes the triangle inequality.
Proposition 1. For
any nodes x1, x2,
and x3,
RSD(x1, x2) ≤ RSD(x1, x3) + RSD(x2, x3).
Proof. Assume the opposite, i.e., that RSD(x1, x2) >
RSD(x1, x3) +RSD (x2, x3). Then there must be a node x
for which N(x, x1) "= N(x, x2), but for which N(x, x1) =
N(x, x3) and N(x, x2) =N( x, x3), which is a contradic-
tion.
Oftentimes, we use rsd to refer to the normalized value
of RSD. That is, for every x1, x2 we deﬁne the normalized
RSD as follows:
rsd(x1, x2) =
RSD(x1, x2).
(2)
1
n
1Note that the deﬁnition given here is essentially equivalent
to that in [10], but has been recast in somewhat diﬀerent
terms for simplicity of discussion.
240By deﬁnition, rsd(x1, x2) ∈ [0, 1] and – given that it is a
rescaling of RSD – it also satisﬁes the triangle inequality.
Intuitively, the the rsd value between two nodes x1 and
x2 encodes the fraction of positions in which the columns
N(:, x1) and N(:, x2) diﬀer with each other.
2.2 Applying RSD to BGP Analysis
Having deﬁned RSD, we next seek to apply it to a dataset
of publicly available BGP paths so as to compute the RSD
between preﬁx pairs in the dataset. However, computing
RSD from BGP data raises some implementation consider-
ations.
The ﬁrst issue concerns the distinction between ASes
(which choose next hops, but are not themselves destina-
tions) and preﬁxes (which are destinations, but do not make
next-hop choices). In fact, our framework can adapt to this
situation easily. We slightly redeﬁne the matrix N: while
the columns of N correspond to preﬁxes, the rows of N cor-
respond to ASes. Thus, to analyze BGP, N(a, p) needs to
be deﬁned as the next hop from AS a on the path to preﬁx
p.
The next issue concerns the fact that publicly available
BGP data consists (essentially) of paths from a set of mon-
itor ASes to a large collection of preﬁxes. For any given
AS-preﬁx pair (a, p), these paths may not contain informa-
tion about N(a, p). We address this by approximating RSD.
We make the following observation: some ASes have a much
larger impact on RSD than others. For example, a stub AS
a has a highly uniform row N(a, :). If the stub AS a has
a small set of providers, then for many preﬁxes p1, p2, ...,
N(a, p1) =N( a, p2) =... . In the limit of a stub AS that
makes use of only a single provider, the row N(a, :) will be
constant. Note that a constant row in N has no eﬀect on
the RSD value of any preﬁx pairs. Since the majority of
ASes are stub ASes, most ASes contribute little information
to RSD.
Thus, we observe that we can approximate RSD using just
a subset of all ASes. In particular we should use the ASes
with many neighbors since these ASes have many next hop
choices and therefore can contribute the most information
to RSD. We call these ASes the basis set. We select the
basis set by identifying those ASes with the largest number
of neighbors in our data.2 Luckily, such ASes tend to appear
on many paths in the publicly available data; hence we can
often ﬁnd N(a, p) when a is in the basis set.
To address the case when N(a, p) is not available (for AS
a in the basis set), we performed extensive studies of the ef-
fect of missing nexthop information on RSD. We found that
proportional approximation yields results that work well in
practice. This approximation allows the matrix N to include
‘don’t know’ elements. We then approximate RSD by the
fraction of known positions in which N(:, p1) and N(:, p2)
diﬀer, times the number of ASes in the basis set. This en-
sures that the approximation to RSD always ranges between
zero and the size of the basis set.
One consequence of using proportional approximation to
RSD is that it can introduce minor violations of the triangle
inequality. However we ﬁnd that in practice, such violations
are quite small and do not impair our ability to reason about
RSD or use it as if it were a metric.
The last issue is that for some AS-preﬁx pairs there is
2Two nodes are neighbors if they appear consecutively on
any path.
1
0.8
0.6
0.4
0.2
F
D
C
0
0
50
100
RSD
150
200
250
Figure 2: Distribution of D for 1000 preﬁx pairs.
more than one next hop. This happens when an AS uses
detailed routing policies (such as hot-potato routing) that
are not strictly per-neighbor. That is, traﬃc destined for
the same preﬁx may take diﬀerent next hops depending on
where it enters the network. We address this problem the
same way as in [14], i.e., by introducing the notion of ‘quasi-
routers.’ Using the algorithm in [14] we divide each AS in
the basis set into a minimal set of quasi-routers such that
for each (quasi-router, preﬁx) pair there is a unique next
hop AS. Thus, the rows of N correspond either to ASes or
quasi-routers of ASes.
Having addressed these issues, we can compute our version
of RSD specialized for BGP, which we store in the n × n
matrix D. Clearly, the values of the cells of D depend on
the number of rows in N, i.e., the total number of ASes (or
quasi-routers of ASes). For the rest of the discussion we will
assume that we have m such ASes and therefore N is of size
the normalized rsd for BGP.
m × n and D(x, x!) ∈ {0, . . . , m}. We also use eD to denote
3. DATASETS
To evaluate our methods, we use a collection of BGP ta-
bles collected on midnight UTC on December 6, 2011 from
the Routeviews [18] and RIPE [16] repositories.
The full dataset is collected from 359 unique monitors; it
consists of over 48 million AS paths, and contains 454,804
unique destination preﬁxes. However, the dataset does not
contain paths from every monitors to every preﬁx. Rather,
there is a subset of preﬁxes that appear in most tables, i.e.,
to which most monitors have paths. We chose a subset of
135,369 preﬁxes on this basis; these preﬁxes are typically
present in most BGP tables in our dataset.
Next, we need to select a subset of monitors to serve as the
basis set, as described in Section 2.2. We select the basis set
by identifying 77 ASes with the largest number of neighbors
in our data. Finally, we expand the basis set with quasi-
routers to handle the cases where there is not a unique next
hop to certain preﬁxes. This expands the size of the basis
set from 77 to 243. Hence, our ﬁnal N matrix is of size 243
× 135,369.
From N we can compute D, our RSD metric based on
BGP paths applied to preﬁxes. To illustrate the distribution
241l
l
s
e
u
a
v
r
a
u
g
n
s
i
12 x 104
10
8
6
4