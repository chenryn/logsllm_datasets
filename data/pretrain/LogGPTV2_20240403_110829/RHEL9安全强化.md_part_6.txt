:::
个人计算机/智能卡(PC/SC)协议指定将智能卡及其读卡集成到计算系统中的标准。在
RHEL 中，`pcsc-lite`{.literal} 软件包提供了中间件来访问使用 PC/SC API
的智能卡。这个软件包的一部分是 `pcscd`{.literal} （PC/SC
智能卡）守护进程，确保系统可以使用 PC/SC 协议访问智能卡。
因为在智能卡中内置的访问控制机制（如 PIN、ININ pads 和
biometrics）并不涵盖所有可能的威胁，所以 RHEL 使用 `polkit`{.literal}
框架进行更强大的访问控制。`polkit`{.literal}
授权管理器可授予特权操作的访问权限。除了授予对磁盘的访问权限外，您还可以使用
`polkit`{.literal}
来指定保护智能卡的策略。例如，您可以定义哪个用户可以使用智能卡来执行哪些操作。
安装 `pcsc-lite`{.literal} 软件包并启动 `pcscd`{.literal}
守护进程后，系统强制执行在 `/usr/share/polkit-1/actions/`{.literal}
目录中定义的策略。默认系统范围的策略位于
`/usr/share/polkit-1/actions/org.debian.pcsc-lite.policy`{.literal}
文件中。polkit 策略文件使用 XML 格式，其语法包括在 `polkit(8)`{.literal}
man page 中。
`polkitd`{.literal} 服务监控 `/etc/polkit-1/rules.d/`{.literal} 和
`/usr/share/polkit-1/rules.d/`{.literal}
目录，以查看存储在这些目录中规则文件中的任何更改。文件包含 JavaScript
格式的授权规则。系统管理员可以在两个目录中添加自定义规则文件，并且
`polkitd`{.literal}
会根据其文件名以字典顺序读取它们。如果两个文件具有相同的名称，则首先读取
`/etc/polkit-1/rules.d/`{.literal} 中的文件。
::: itemizedlist
**其他资源**
-   `polkit(8)`{.literal}, `polkitd(8)`{.literal}, and
    `pcscd(8)`{.literal} man pages.
:::
:::
::: section
::: titlepage
# []{#assembly_controlling-access-to-smart-cards-using-polkit_security-hardening.html#ref_troubleshooting-problems-related-to-pc-sc-and-polkit_assembly_controlling-access-to-smart-cards-using-polkit}对 PC/SC 和 polkit 相关的问题进行故障排除 {.title}
:::
安装 `pcsc-lite`{.literal} 软件包后自动强制执行 polkit 策略，并且启动
`pcscd`{.literal}
守护进程可能会要求在用户会话中进行身份验证，即使用户不直接与智能卡进行交互。在
GNOME 中，您可以看到以下出错信息：
``` screen
Authentication is required to access the PC/SC daemon
```
请注意，当您安装其他与智能卡相关的软件包（如 `opensc`{.literal}
）时，系统可将 `pcsc-lite`{.literal} 软件包作为依赖项安装。
如果您的场景不需要与智能卡的任何交互，而您想要防止显示 PC/SC
守护进程的授权请求，您可以删除 `pcsc-lite`{.literal}
软件包。至少需要必要的软件包是任何一种良好的安全实践。
如果使用智能卡，请首先检查
`/usr/share/polkit-1/actions/org.debian.pcsc-lite.policy`{.literal}
中的系统范围策略文件中的规则进行故障排除。您可以将自定义规则文件添加到
`/etc/polkit-1/rules.d/`{.literal} 目录中的策略，例如：
`03-allow-pcscd.rules`{.literal}。请注意，规则文件使用 JavaScript
语法，策略文件采用 XML 格式。
要了解显示系统的授权请求，请检查 Journal 日志，例如：
``` screen
$ journalctl -b | grep pcsc
...
Process 3087 (user: 1001) is NOT authorized for action: access_pcsc
...
```
前面的日志条目表示用户无权通过策略执行操作。您可以通过在
`/etc/polkit-1/rules.d/`{.literal} 中添加对应的规则来解决这个问题。
您还可以搜索与 `polkitd`{.literal} 单元相关的日志条目，例如：
``` screen
$ journalctl -u polkit
...
polkitd[NNN]: Error compiling script /etc/polkit-1/rules.d/00-debug-pcscd.rules
...
polkitd[NNN]: Operator of unix-session:c2 FAILED to authenticate to gain authorization for action org.debian.pcsc-lite.access_pcsc for unix-process:4800:14441 [/usr/libexec/gsd-smartcard] (owned by unix-user:group)
...
```
在前面的输出中，第一个条目表示规则文件包含一些语法错误。第二个条目表示用户无法获取
`pcscd`{.literal} 的访问权限。
您还可以通过简短脚本列出使用 PC/SC
协议的所有应用程序。创建一个可执行文件，如
`pcsc-apps.sh`{.literal}，并插入以下代码：
``` screen
#!/bin/bash
cd /proc
for p in [0-9]*
do
	if grep libpcsclite.so.1.0.0 $p/maps &> /dev/null
	then
		echo -n "process: "
		cat $p/cmdline
		echo " ($p)"
	fi
done
```
以 `root`{.literal} 用户身份运行脚本：
``` screen
# ./pcsc-apps.sh
process: /usr/libexec/gsd-smartcard (3048)
enable-sync --auto-ssl-client-auth --enable-crashpad (4828)
...
```
::: itemizedlist
**其他资源**
-   `journalctl`{.literal}, `polkit(8)`{.literal},
    `polkitd(8)`{.literal}, and `pcscd(8)`{.literal} man pages.
:::
:::
::: section
::: titlepage
# []{#assembly_controlling-access-to-smart-cards-using-polkit_security-hardening.html#proc_displaying-more-detailed-information-about-polkit-authorization-to-pc-sc_assembly_controlling-access-to-smart-cards-using-polkit}向 PC/SC 显示关于 polkit 授权的更多详细信息 {.title}
:::
在默认配置中，`polkit`{.literal} 授权框架仅将有限信息发送到 Journal
日志中。您可以通过添加新规则来扩展与 PC/SC 协议相关的 `polkit`{.literal}
日志条目。
::: itemizedlist
**先决条件**
-   您已在系统中安装了 `pcsc-lite`{.literal} 软件包。
-   `pcscd`{.literal} 守护进程正在运行。
:::
::: orderedlist
**步骤**
1.  在 `/etc/polkit-1/rules.d/`{.literal} 目录中创建新文件：
    ``` screen
    # touch /etc/polkit-1/rules.d/00-test.rules
    ```
2.  在您选择的编辑器中编辑该文件，例如：
    ``` screen
    # vi /etc/polkit-1/rules.d/00-test.rules
    ```
3.  插入以下行：
    ``` screen
    polkit.addRule(function(action, subject) {
      if (action.id == "org.debian.pcsc-lite.access_pcsc" ||
      	action.id == "org.debian.pcsc-lite.access_card") {
    	polkit.log("action=" + action);
    	polkit.log("subject=" + subject);
      }
    });
    ```
    保存文件并退出编辑器。
4.  重启 `pcscd`{.literal} 和 `polkit`{.literal} 服务：
    ``` screen
    # systemctl restart pcscd.service pcscd.socket polkit.service
    ```
:::
::: orderedlist
**验证**
1.  为 `pcscd`{.literal} 发出授权请求。例如，打开 Firefox Web
    浏览器，或者使用 `opensc`{.literal} 软件包提供的
    `pkcs11-tool -L`{.literal} 命令。
2.  显示扩展日志条目，例如：
    ``` screen
    # journalctl -u polkit --since "1 hour ago"
    polkitd[1224]: :4: action=[Action id='org.debian.pcsc-lite.access_pcsc']
    polkitd[1224]: :5: subject=[Subject pid=2020481 user=user' groups=user,wheel,mock,wireshark seat=null session=null local=true active=true]
    ```
:::
::: itemizedlist
**其他资源**
-   `polkit(8)`{.literal} 和 `polkitd(8)`{.literal} man page。
:::
:::
::: section
::: titlepage
# []{#assembly_controlling-access-to-smart-cards-using-polkit_security-hardening.html#_additional_resources_2}其他资源 {.title}
:::
::: itemizedlist
-   [控制对智能卡的](https://www.redhat.com/en/blog/controlling-access-smart-cards){.link}
    访问红帽博客文章.
:::
:::
:::
[]{#using-shared-system-certificates_security-hardening.html}
::: chapter
::: titlepage
# []{#using-shared-system-certificates_security-hardening.html#using-shared-system-certificates_security-hardening}第 6 章 使用共享的系统证书 {.title}
:::
共享的系统证书存储使 NSS、GnuTLS、OpenSSL 和 Java
能够共享用于检索系统证书锚和块列表信息的默认源。默认情况下，信任存储包含
Mozilla CA 列表，包括正和负信任。系统允许更新核心 Mozilla CA
列表或选择其他证书列表。
::: section
::: titlepage
# []{#using-shared-system-certificates_security-hardening.html#the-system-wide-trust-store_using-shared-system-certificates}系统范围的信任存储 {.title}
:::
在 Red Hat Enterprise Linux 中，整合的系统范围的信任存储位于
`/etc/pki/ca-trust/`{.literal} 和
`/usr/share/pki/ca-trust-source/`{.literal} 目录中。对
`/usr/share/pki/ca-trust-source/`{.literal}
中信任设置的优先级的处理低于`/etc/pki/ca-trust/`{.literal} 中的设置。
证书文件的处理取决于它们安装到以下目录的子目录：
::: itemizedlist
-   对于信任锚
    ::: itemizedlist
    -   `/usr/share/pki/ca-trust-source/anchors/`{.literal} 或
    -   `/etc/pki/ca-trust/source/anchors/`{.literal}
    :::
-   对于不信任的证书
    ::: itemizedlist
    -   `/usr/share/pki/ca-trust-source/blacklist/`{.literal} 或
    -   `/etc/pki/ca-trust/source/blacklist/`{.literal}
    :::
-   对于扩展 BEGIN TRUSTED 文件格式的证书
    ::: itemizedlist
    -   `/usr/share/pki/ca-trust-source/`{.literal} 或
    -   `/etc/pki/ca-trust/source/`{.literal}
    :::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在分层加密系统中，信任锚是其他各方认为值得信任的权威实体。在 X.509
架构中，根证书是从中派生信任链的信任锚。要启用链验证，信任方必须首先能够访问信任锚。
:::
:::
::: section
::: titlepage
# []{#using-shared-system-certificates_security-hardening.html#adding-new-certificates_using-shared-system-certificates}添加新证书 {.title}
:::
要使用新的信任来源确认系统上的应用程序，请将相应的证书添加到系统范围的存储中，并使用
`update-ca-trust`{.literal} 命令。
::: itemizedlist
**先决条件**
-   `ca-certificates`{.literal} 软件包存在于系统中。
:::
::: orderedlist
**步骤**
1.  要在简单的 PEM 或 DER 文件格式中添加证书到系统中信任的 CA
    列表中,请将证书文件复制到
    `/usr/share/pki/ca-trust-source/anchors/`{.literal} 或
    `/etc/pki/ca-trust/source/anchors/`{.literal} 目录中，例如：
    ``` screen
    # cp ~/certificate-trust-examples/Cert-trust-test-ca.pem /usr/share/pki/ca-trust-source/anchors/
    ```
2.  要更新系统范围的信任存储配置，请使用 `update-ca-trust`{.literal}
    命令：
    ``` screen
    # update-ca-trust
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
虽然 Firefox 浏览器可以使用添加的证书，而不必执行
`update-ca-trust`{.literal}，但红帽建议在 CA 更改后使用
`update-ca-trust`{.literal} 命令。另请注意，浏览器，如 Firefox、Epiphany
或 Chromium
会缓存文件，您可能需要清除浏览器的缓存或重新启动浏览器来加载当前的系统证书配置。
:::
:::
::: section
::: titlepage