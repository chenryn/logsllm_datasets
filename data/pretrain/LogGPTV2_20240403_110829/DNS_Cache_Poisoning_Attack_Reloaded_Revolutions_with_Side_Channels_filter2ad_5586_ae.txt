and make sure that we never go above the per-IP rate limit (which
is 1pps in steady state). After a port is found open, we confirm
that it stays open for at least one second by repeatedly probing
the same port. If it does, we start injecting rogue responses. The
experiment is repeated 20 times and we report the success rate,
average time-to-succeed, and other statistics.
Results. Overall, the attack is very effective, with a success rate
of 100% out of the 20 experiments (we consider it a success if the
attack finishes within 30 minutes). The average time-to-succeed
is 271s, with a breakdown of 103s in Phase I and 168s in Phase
II. The standard deviation of Phase II is 109s with the maximum
of 739s and the minimum of 83s. The variance is large because
the attack time is mainly determined by the attack window size,
which is the timeout before a resolver decides to give up and return
SERVFAIL/NXDOMAIN, as mentioned in §5.1, and the timeout on
CloudFlares’ resolver varies a lot (from seconds to more than one
minute for unknown reasons). Also, the attack needs to scan 36,325
ports on average to succeed; the average port scan speed is 210pps,
which roughly matches the expected rate of 240pps when using
240 IPs to scan. Besides, the attack generates 78 MB of traffic.
7.2 Attacking a Production Resolver
Even though the attack can work in principle against a large fraction
of public DNS resolvers, due to obvious legal and ethical concerns,
we refrain from targeting any of them. Fortunately, we obtained au-
thorization to test the attack against a production resolver managed
by a collaborator.
Experiment Setup. The resolver processes about 70 million queries
daily with thousands of real users across multiple institutions and is
configured as an open resolver. Because of this, it will be noisy and
representing a challenging attack target. Another behavior note-
worthy is that it has two backend servers, both of which appear
to use connect() on the UDP sockets. Interestingly, we were told
that they are running Unbound, and we suspect that the connect()-
like behavior can be due to stateful UDP firewalls responsible for
filtering out-of-state packets. We are given an attack machine in
an adjacent network — 4 hops away from the resolver, which has a
1Gbps Ethernet and can perform IP spoofing.
Also, we setup a test domain and host it on an authoritative
server controlled by us so that we poison only our own test domain.
We configure the BIND software with a response rate limit at a low
rate of 10pps to minimize the impact on the network. Once the limit
As a comparison, we also simulated more realistic network con-
ditions by imposing additional delay, jitter, and loss on the same
attack machine. The exact numbers are presented in Table 3 where
the baseline represents the unmodified network condition and al-
tered represents the simulated condition. We take the numbers with
reference to recent Internet measurements [27][15]. We believe an
attacker is likely able to find networks with even better conditions.
To deal with increased false positives caused by the simulated net-
work condition, we used two IPs to launch the attack in the altered
experiment; this is to avoid halting the scan too frequently due to
the per-IP token being drained (see §4.3).
Finally, we are also interested in understanding the influence
of the parameter “name server mute level”, on the viability of the
attack and will conduct a controlled experiment varying the “mute
level” where all other parameters are the same as those in baseline.
Attack Process. The process similarly starts from the attacker gen-
erating queries asking for nonce.attacker.com. Since the resolver
has two backend server IPs, we launch the port scans on both IPs
simultaneously. At the same time, we mute all authoritative name
servers with queries at a rate of 20pps so that the resolver will
experience a constant loss rate of 80%. The experiment is repeated
20 times and 5 times for the baseline and altered respectively.
Results. As shown in Table 3, we achieved a perfect 100% success
rate for the first baseline experiment Base(D) (at daytime), with an
average time of 504s to succeed. The standard deviation is 399s
with the maximum being 1404s and the minimum being 13s (which
is simply due to luck). On average, only 69 MB of attack traffic is
generated, which is similar to that in the forwarder attack even
though resolver attacks take much longer to succeed. This is because
a forwarder attack is much more likely to enter the TxID bruteforce
phase (6 times vs. twice), which generates about 10 MB of traffic
every time. Specifically, strategy 2○ used in the forwarder attack
does not have a binary search phase and an open port is simply
confirmed twice before it enters the TxID bruteforce phase whereas
the binary search phase employed in the resolver attack checks
repeatedly the existence of an open port.
is reached, we allow 1 out of 5 responses — an effective loss rate
of 80%. This forms the setup of baseline experiments, and we have
conducted 20 rounds of them one in daytime and the other after
midnight local time (as shown in Table 3). In addition, to understand
the effect of response rate limit on the authoritative name server,
we vary the mute level by allowing a loss rate of 75%, 66.7%, to 50%
— the lower the loss rate, the more difficult the attack is.
After inspecting the detailed log, we found that even though
Base(D) experiment has a near perfect network condition, many
more packets were sent compared to the forwarder attack. This is
because of the frequent change of source ports caused by either
resolver retries (i.e., RTOs) or new queries initiated by the attacker
(if the resolver happens to receive a legitimate response), resulting
in many small and fragmented attack windows. In fact, we find
more than half of these fragmented attack windows to be smaller
than 1 second, making them undesirable. Interestingly, we do find a
decent fraction of large attack windows (10% of them with a 30s or
larger). Such long attack windows match the profile of an Unbound
resolver — 16 maximum allowed retransmissions, each doubling the
RTO. In §8, we demonstrate that a BIND attack with much smaller
Session 4E: Network Security CCS '20, November 9–13, 2020, Virtual Event, USA1346Table 3: Production Resolver Attack Results
RTT
range
Exp.
Base(D) 0.2-1.2ms ∼0%
Base(M) 0.2-1.2ms ∼0%
Mute Lv. 0.2-1.2ms ∼0%
Mute Lv. 0.2-1.2ms ∼0%
Mute Lv. 0.2-1.2ms ∼0%
Altered 37-43ms 0.20%
*: 1-hour threshold. #: 3-hour threshold. D: Day. M: Midnight
Probe loss Name sever
mute level
80%
80%
75%
66.7%
50%
80%
Average
time taken
504s
410s
1341s
2196s
8985s
930s
Success
rate
20/20∗
20/20∗
18/20∗
20/20#
9/20#
5/5∗
attack windows appears to be still feasible but taking much longer
time to succeed.
As shown in Table 3, the Base(M) experiment has the same exact
setup as the Base(D) except that it is conducted after midnight
where background traffic and noises will be generally lower. We
observe the same 100% success rate and the average time to succeed
decreasing from 504s to 410s. This is expected as our attack is
sensitive to noises.
In addition, for the mute level experiments shown in Table 3, all
but 50% mute level (i.e., loss rate) can still achieve a near perfect
success rate and can finish generally within an hour (note the
threshold of success being 3 hours for the 66.7% mute level). For 50%
mute level, the attack succeeded only 9 out of 20 cases. Moreover,
the average time taken is 8,985s or 2.5 hours.
Finally, for the altered experiment, we also achieved a perfect
100% success rate. Specifically, the time to succeed is 2005s, 538s,
792s, 1287s and 29s respectively. On average, the attack time is 930s
and 131 MB of traffic is generated. Note that the scan speed in the
altered experiment is higher than that in the baseline experiment.
This is because we used two IPs in the altered experiment, reducing
the frequency of halting during scans.
We also find that the increased loss rate and jitter causes more
false positives, where we incorrectly consider a port discovered
(as the verification packet successfully solicits an ICMP). This is
commonly caused by any loss of probing packets which can create
two problems: (1) we waste much time filtering these false positives
during the binary search stage, reducing the effective scanning
speed; (2) The scan can still be halted because of frequent draining
of the per-IP ICMP tokens even though we used two IPs.
8 DISCUSSION
Attack against Unbound vs. BIND. As mentioned previously, a
BIND attack would be much tougher than Unbound as most of
the fragmented attack windows will be generally smaller, as it is
more reluctant in doubling the RTO and have a tighter hard-stop
condition (as discussed in §6). To understand if is ever feasible to
attack a BIND resolver, we construct an extreme experiment with 4
name servers, and a default hard-stop condition of 10s wait time
on the BIND resolver, resulting in the resolver almost always stuck
in a small attack window of 0.8s, as querying 4 name servers for
3 rounds already take 9.6s (before the RTO backoff can kick in).
The experiment is conducted in a similar network environment
to baseline. Surprisingly, we run the experiment twice and both
succeeded (one in 0.54 hours and the other in 1.25 hours). We find
that it is indeed possible to succeed in scanning a port as well
as injecting rogue records all in a 0.8s window. One attack we
inspected showed that the port scan took 600ms and the record
injection took 200ms.
UDP source port inference on other operating systems. In
addition to Linux, we have verified that other major OS kernels
are vulnerable as well, albeit with lower global rate limit — 200 in
Windows and FreeBSD, and 250 in MacOS. It is concerning that
not a single OS is aware of the side channel potential of global
rate limits, despite the recent serious side channels specifically
leverage a challenge ACK global rate limit in TCP [11]. We argue
that all global rate limits in networking stacks need to be scrutinized
regardless of their original design goal. We believe this work can
serve as another valuable reference.
Other vulnerable protocols. Any protocols based on UDP are
affected by the source port inference. A prominent example is
QUIC [37] and HTTP/3 [48] which are poised to replace the tradi-
tional TCP-based web protocols with a much more efficient UDP-
based protocols. They are already widely deployed in Google’s web
services [56]. In addition, VoIP, video streaming, and delay-sensitive
online games may also use UDP, which are subject to port inference,
and even off-path packet injection attacks.
Best practices in configuring response rate limiting (RRL).
Even though response rate limit on authoritative name servers
is an important mitigation against DNS reflection/amplification
attacks, if not done carefully, it can allow the extension of attack
window in a DNS cache poisoning attack. We endorse the RRL
behavior (which was configurable but not always used) where a
server still responds with truncated messages when a rate limit is
reached [59] instead of being silent. This way, the amplification
factor is no longer favorable to a DDoS attacker. Yet, it sends a strong
signal to the resolver indicating something bad is going on, and the
resolver should immediately react, e.g., either switching the source
port and sending a new query, or falling back to TCP altogether (as
recommended in [59]). This strategy can reduce the susceptibility
of RRL being maliciously taken advantage of, compared to the cases
where a server is completely muted (with 100% loss). Unfortunately,
as we show in the resolver attack, even a 66.7% drop rate would
already make a server vulnerable, not to mention that a determined
attacker with more resources can simply flood the server with
expensive queries (e.g., to non-existing domains [44]).
8.1 Defenses
The proposed attack is fundamentally an off-path attack and there-
fore can be mitigated by additional randomness and cryptographic
solutions. Besides DNSSEC and 0x20 encoding, there is also an
emerging feature called DNS cookie that is standardized in RFC
7873 [1] in 2016. At a high level, it requires both client and server to
exchange some additional secrets unknown to an off-path attacker;
it therefore has the potential to defeat most (if not all) off-path DNS
attacks. Note that this feature requires both resolvers and authori-
tative name servers to upgrade in order to see benefits. As of now,
only BIND has implemented this feature and have it turned on by
default in 9.11.0 forward [28] (released in 2016). We find about 5%
of the open resolvers that we measured have enabled this feature
by default. However, as any other unproven technology (the lesson
Session 4E: Network Security CCS '20, November 9–13, 2020, Virtual Event, USA1347regarding 0x20 [16]), it remains to be seen if issues such as compat-
ibility will prevent it from being widely adopted. Interestingly, we
already found both DNSPod (operated by Tencent) and a resolver
in a private company drop queries with DNS cookie options, likely
for compatibility concerns.
In addition, our attack relies on the two fundamental compo-
nents: (1) inferring source port of a DNS query; (2) extending attack
window. Each of them can be a security threat on its own and
therefore we discuss how to address both.
For (1), the simplest mitigation is to disallow outgoing ICMP
replies altogether (as is done by many servers), at the potential cost
of losing some network troubleshooting and diagnostic features.
Otherwise, we need to address the global rate limit. As with patches
on TCP global counters [51], we suggest a randomized ICMP global
rate limit, including possibly randomizing the max allowable burst
(currently 50), minimum number of tokens recovered each time
(currently 20), minimum idle time to recover tokens (currently
20ms), and number of token recovered per time unit (currently
1 per millisecond). When the side channel is mitigated, we also
recommend resolvers adopt the use of connect() on their UDP
sockets so that their source ports will not be public-facing and
directly scannable.
For (2), we have discussed best practices to use RRL to prevent
an attacker from muting authoritative name servers easily. Other
simple mitigation strategies include: (1) setting the timeout of DNS
queries more aggressively (e.g., always below 1s). This way, the
source port will be short-lived and disappear before the attacker
can start injecting rogue responses. The downside, however, is the