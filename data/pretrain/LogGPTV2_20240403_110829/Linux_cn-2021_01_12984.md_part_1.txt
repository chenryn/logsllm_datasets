---
author: Jtolds
category: 软件开发
comments_data:
- date: '2021-01-06 16:50:57'
  message: golang:看我理你吧
  postip: 58.240.29.114
  username: 来自江苏南京的 Chrome 87.0|Windows 10 用户
- date: '2021-01-06 16:52:32'
  message: 自己用不习惯就来黑golang，不喜欢不要用啊，
  postip: 58.240.29.114
  username: 来自江苏南京的 Chrome 87.0|Windows 10 用户
count:
  commentnum: 2
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 6830
date: '2021-01-05 10:12:53'
editorchoice: false
excerpt: 如果你在大街上问一个有名的程序员，Go 有什么特别之处？ 她很可能会告诉你 Go 最出名的是通道和 goroutine。
fromurl: https://www.jtolio.com/2016/03/go-channels-are-bad-and-you-should-feel-bad
id: 12984
islctt: true
largepic: /data/attachment/album/202101/05/101049y2995vz8l9mdg4bz.jpg
permalink: /article-12984-1.html
pic: /data/attachment/album/202101/05/101049y2995vz8l9mdg4bz.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 如果你在大街上问一个有名的程序员，Go 有什么特别之处？ 她很可能会告诉你 Go 最出名的是通道和 goroutine。
tags:
- Go
thumb: false
title: Go 通道是糟糕的，你应该也觉得很糟糕
titlepic: true
translator: gxlct008
updated: '2021-01-05 10:12:53'
---
![](/data/attachment/album/202101/05/101049y2995vz8l9mdg4bz.jpg)
更新：如果你是从一篇题为 《[糟糕的 Go 语言](https://github.com/ksimka/go-is-not-good)》 的汇编文章看到这篇博文的话，那么我想表明的是，我很惭愧被列在这样的名单上。Go 绝对是我使用过的最不糟糕的的编程语言。在我写作本文时，我是想遏制我所看到的一种趋势，那就是过度使用 Go 的一些较复杂的部分。我仍然认为  通道   Channel 可以更好，但是总体而言，Go 很棒。这就像你最喜欢的工具箱中有 [这个工具](https://blog.codinghorror.com/content/images/uploads/2012/06/6a0120a85dcdae970b017742d249d5970d-800wi.jpg)；它可以有用途（甚至还可能有更多的用途），它仍然可以成为你最喜欢的工具箱！
更新 2：如果我没有指出这项对真实问题的优秀调查，那我将是失职的：《[理解 Go 中的实际并发错误](https://songlh.github.io/paper/go-study.pdf)》。这项调查的一个重要发现是...Go 通道会导致很多错误。
从 2010 年中后期开始，我就断断续续地在使用 Google 的 [Go 编程语言](https://golang.org/)，自 2012 年 1 月开始（在 Go 1.0 之前！），我就用 Go 为 [Space Monkey](http://www.spacemonkey.com/) 编写了合规的产品代码。我对 Go 的最初体验可以追溯到我在研究 Hoare 的 [通信顺序进程](https://en.wikipedia.org/wiki/Communicating_sequential_processes) 并发模型和 [Matt Might](http://matt.might.net) 的 [UCombinator 研究组](http://www.ucombinator.org/) 下的 [π-演算](https://en.wikipedia.org/wiki/%CE%A0-calculus) 时，作为我（[现在已重定向](https://www.jtolio.com/writing/2015/11/research-log-cell-states-and-microarrays/)）博士工作的一部分，以更好地支持多核开发。Go 就是在那时发布的（多么巧合啊！），我当即就开始学习尝试了。
它很快就成为了 Space Monkey 开发的核心部分。目前，我们在 Space Monkey 的生产系统有超过 42.5 万行的纯 Go 代码（*不* 包括我们所有的 vendored 库中的代码量，这将使它接近 150 万行），所以也并不是你见过的最多的 Go 代码，但是对于相对年轻的语言，我们是重度用户。我们之前 [写了我们的 Go 使用情况](https://www.jtolio.com/writing/2014/04/go-space-monkey/)。也开源了一些使用率很高的库；许多人似乎是我们的 [OpenSSL 绑定](https://godoc.org/github.com/spacemonkeygo/openssl)（比 [crypto/tls](https://golang.org/pkg/crypto/tls/) 更快，但请保持 openssl 本身是最新的！）、我们的 [错误处理库](https://godoc.org/github.com/spacemonkeygo/errors)、[日志库](https://godoc.org/github.com/spacemonkeygo/spacelog) 和 [度量标准收集库/zipkin 客户端](https://godoc.org/gopkg.in/spacemonkeygo/monitor.v1) 的粉丝。我们使用 Go、我们热爱 Go、我们认为它是目前为止我们使用过的最不糟糕的、符合我们需求的编程语言。
尽管我也不认为我能说服自己不要提及我的广泛避免使用 [goroutine-local-storage 库](https://github.com/jtolds/gls) （尽管它是一个你不应该使用的魔改技巧，但它是一个漂亮的魔改），希望我的其他经历足以证明我在解释我故意煽动性的帖子标题之前知道我在说什么。
![](/data/attachment/album/202101/05/101255fuq9vximbz7rbjvh.jpg)
### 等等，什么？
如果你在大街上问一个有名的程序员，Go 有什么特别之处？ 她很可能会告诉你 Go 最出名的是 通道   Channels  和 goroutine。 Go 的理论基础很大程度上是建立在 Hoare 的 CSP（ 通信顺序进程   Communicating Sequential Processes ）模型上的，该模型本身令人着迷且有趣，我坚信，到目前为止，它产生的收益远远超过了我们的预期。
CSP（和 π-演算）都使用通信作为核心同步原语，因此 Go 会有通道是有道理的。Rob Pike 对 CSP 着迷（有充分的理由）[相当深](https://en.wikipedia.org/wiki/Newsqueak) 已经有一段时间了。（[当时](https://en.wikipedia.org/wiki/Alef_%28programming_language%29) 和 [现在](https://en.wikipedia.org/wiki/Limbo_%28programming_language%29)）。
但是从务实的角度来看（也是 Go 引以为豪的），Go 把通道搞错了。在这一点上，通道的实现在我的书中几乎是一个坚实的反模式。为什么这么说呢？亲爱的读者，让我细数其中的方法。
#### 你可能最终不会只使用通道
Hoare 的 “通信顺序进程” 是一种计算模型，实际上，唯一的同步原语是在通道上发送或接收的。一旦使用  互斥量   mutex 、 信号量   semaphore  或  条件变量   condition variable 、bam，你就不再处于纯 CSP 领域。 Go 程序员经常通过高呼 “[通过交流共享内存](https://blog.golang.org/share-memory-by-communicating)” 的 [缓存的思想](https://lesswrong.com/lw/k5/cached_thoughts/) 来宣扬这种模式和哲学。
那么，让我们尝试在 Go 中仅使用 CSP 编写一个小程序！让我们成为高分接收者。我们要做的就是跟踪我们看到的最大的高分值。如此而已。
首先，我们将创建一个 `Game` 结构体。
```
type Game struct {
  bestScore int
  scores    chan int
}
```
`bestScore` 不会受到 互斥量   mutex 的保护！这很好，因为我们只需要一个 goroutine 来管理其状态并通过通道来接收新的分值即可。
```
func (g *Game) run() {
  for score := range g.scores {
    if g.bestScore < score {
      g.bestScore = score
    }
  }
}
```
好的，现在我们将创建一个有用的构造函数来开始 `Game`。
```
func NewGame() (g *Game) {
  g = &Game{
    bestScore: 0,
    scores:    make(chan int),
  }
  go g.run()
  return g
}
```
接下来，假设有人给了我们一个可以返回分数的 `Player`。它也可能会返回错误，因为可能传入的 TCP 流可能会死掉或发生某些故障，或者玩家退出。
```
type Player interface {
  NextScore() (score int, err error)
}
```
为了处理 `Player`，我们假设所有错误都是致命的，并将获得的比分向下传递到通道。
```
func (g *Game) HandlePlayer(p Player) error {
  for {
    score, err := p.NextScore()
    if err != nil {
      return err
    }
    g.scores <- score
  }
}
```
好极了！现在我们有了一个 `Game` 类型，可以以线程安全的方式跟踪 `Player` 获得的最高分数。
你圆满完成了自己的开发工作，并开始拥有客户。你将这个游戏服务器公开，就取得了令人难以置信的成功！你的游戏服务器上也许正在创建许多游戏。
很快，你发现人们有时会离开你的游戏。许多游戏不再有任何玩家在玩，但没有任何东西可以阻止游戏运行的循环。死掉的 `(*Game).run` goroutines 让你不知所措。
**挑战：** 在无需互斥量或 panics 的情况下修复上面的 goroutine 泄漏。实际上，可以滚动到上面的代码，并想出一个仅使用通道来解决此问题的方案。
我等着。
就其价值而言，它完全可以只通过通道来完成，但是请观察以下解决方案的简单性，它甚至没有这个问题：
```
type Game struct {
  mtx sync.Mutex
  bestScore int
}
func NewGame() *Game {
  return &Game{}
}
func (g *Game) HandlePlayer(p Player) error {
  for {
    score, err := p.NextScore()
    if err != nil {
      return err
    }
    g.mtx.Lock()
    if g.bestScore < score {
      g.bestScore = score