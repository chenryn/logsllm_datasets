### 优化后的文本

#### 6.4.4. 常见错误
**警告**  
在组合表达式中使用 `!=` 操作符，例如 `eth.addr`, `ip.addr`, `tcp.port`, `udp.port` 等元素时，可能会产生非预期的效果。  
经常有人使用 `ip.addr == 1.2.3.4` 表达式来选择所有包含 IP 地址为 `1.2.3.4` 的包。如果有人想用 `ip.addr != 1.2.3.4` 来排除 IP 地址为 `1.2.3.4` 的包，不幸的是，这个表达式不会像预期的那样工作。相反，该表达式为真的条件是源地址或目标地址中的任意一个不等于 `1.2.3.4`。因此，表达式 `ip.addr != 1.2.3.4` 可以被解读为：“该包包含的 IP 字段值必须不为 `1.2.3.4`”。因为一个 IP 数据报同时包含源地址和目标地址，只要两个地址中的任何一个不为 `1.2.3.4`，表达式就为真。

如果你确实想过滤掉 IP 地址包含 `1.2.3.4` 的包，正确的表达式应该是 `!(ip.addr == 1.2.3.4)`。这可以解读为：“显示所有 IP 地址字段值不为 `1.2.3.4` 的包”。

#### 6.5. “Filter Expression/过滤表达式”对话框
当你熟悉了 Wireshark 的过滤系统，并了解你可以使用的标签进行过滤后，你可以快速而简单地输入过滤字符。但如果你是一个 Wireshark 新手，或者处理一些相对陌生的协议，你可能很难通过直接输入字符进行过滤。过滤表达式对话框可以帮助你解决这些问题。

**提示**  
过滤表达式对话框是学习如何输入表达式的绝佳工具。

**图 6.6. 过滤表达式对话框**

打开上图的对话框后，将会显示一个按协议类型分组的树状列表和一个关系选择框。

- **Field Name（字段名）**  
  从协议字段树中选择协议字段。每个可过滤协议都放在第一级。点击“+”号展开列表，可以获得关于这些协议的可过滤字段。
- **Relation（关系）**  
  从可用的关系列表中选择关系。“is present”是一元关系，表示如果你选择的字段存在，表达式就为真值。其他关系都是二元关系，需要附加数据（例如：一个值来匹配）来完成。
- **Value（值）**  
  在此输入合适的配置值。输入的值必须符合所选字段名的属性值类型（例如字符串）。
- **Predefined values（预定义值）**  
  有些协议字段包含预设值，类似于 C 语言中的枚举变量。如果选择的协议有这样的值定义，你可以在此选择。
- **Range（范围）**  
  此处作者留空了。
- **OK**  
  如果已经建立好了表达式，点击 OK 即可创建你的过滤字符串。
- **Cancel**  
  你可以点击 Cancel 按钮不做任何修改离开 Add Expression 对话框。

#### 6.6. 定义和保存过滤器
你可以定义过滤器并给它们命名以便以后使用。这样可以省去回忆和重新输入某些你曾用过的复杂过滤器的时间。定义新的过滤器或修改已存在的过滤器有两种方法：
1. 在 Capture 菜单中选择 Capture Filters...；
2. 在 Analyze 菜单中选择 Display Filter...。Wireshark 将会弹出如图 6.7 所示的“捕捉过滤器”和“显示过滤器”对话框。

**注意**  
因为捕捉过滤器和显示过滤器的定义和保存方式几乎完全一样，所以这里放在一起讲，二者之间的不同点会做标记。

**警告**  
你必须使用 Save 来保存你的过滤器，OK 或 Apply 不会保存过滤器。关闭 Wireshark 时未保存的过滤器会随之消失。

**图 6.7. "捕捉过滤器"和"显示过滤器"对话框**

- **New**  
  增加一个新的过滤器到列表中。当前输入的 Filter name 和 Filter string 值将会被使用。如果这些都为空，将会被设置为 "new"。
- **Delete**  
  删除选中的过滤器。如果没有过滤器被选中，则按钮为灰色。
- **Filter name**  
  修改当前选择的过滤器的名称。
- **Filter string**  
  修改当前选中过滤器的内容。仅适用于显示过滤：在输入时进行语法检查。
- **Add Expression**  
  仅适用于显示过滤：打开增加表达式对话框，辅助创建过滤表达式。详见第 6.5 节 “‘Filter Expression/过滤表达式’对话框”。
- **OK**  
  仅适用于显示过滤：为当前显示应用选择的过滤器，关闭当前对话框。
- **Save**  
  保存当前对话框设置。文件位置和格式见???。
- **Close**  
  关闭当前对话框。将会放弃未保存的设置。

#### 6.7. 查找包
当你捕获了一些包，或者读取以前存储的包时，可以很容易地进行查找。从 Edit 菜单选择 Find Packet... 菜单项。Wireshark 将会弹出如图 6.8 所示的“Find Packet/查找包”对话框。

**6.7.1. 查找包对话框**

**图 6.8. "Find Packet/查找包"对话框**

首先你需要选择查找方式：

- **Display filter**  
  在 Filter: 输入字段，选择查找方向，点击 OK（过滤器方式）。例如：查找由 `192.168.0.1` 发起的三步握手建立连接，使用如下字符：`ip.addr == 1.2.3.4 and tcp.flags.syn`。显示过滤的详情参见第 6.3 节 “浏览时过滤包”。
- **Hex Value**  
  在包数据中搜索指定的序列。例如，使用 `00:00` 查找下一个包含两个空字节的包数据。
- **String**  
  在包中查找字符串，可以指定多种参数。输入的查找值将会进行语法检查。如果语法检查无误，输入框背景色会变成绿色，反之则是红色。

你可以指定查找的方向：

- **UP**  
  向上查找包列表（包编号递减方式）。
- **Down**  
  向下查找包列表（包编号递增方式）。

**6.7.2. "Find Next/查找下一个"命令**  
使用最后一次的查找设置继续查找。

**6.7.3. "Find Previous/查找上一个"命令**  
使用最后一次的设置修改查找方向，继续查找。

#### 6.8. 跳转到指定的包
通过 Go 菜单可以轻松跳转到指定的包。

**6.8.1. "Go Back" 返回命令**  
使用 Go back 返回包历史记录，工作方式类似于 Web 浏览器的页面历史记录。

**6.8.2. "Go Forward /向前"命令**  
前进到包的历史记录，工作方式类似于 Web 浏览器的页面历史记录。

**6.8.3. "Go to Packet/到指定的包"对话框**

**图 6.9. "Go to packet/转到指定包"对话框**

输入包的编号，点击 OK，跳转到指定的包。

**6.8.4. "Go to Corresponding Packet/到对应的包"命令**  
如果被选择的协议字段指向文件中的另一个包，该命令将会跳转到那个包。

**注意**  
该协议字段看起来有点像超链接（就像浏览器里的），双击该字段也可以跳转到对应的包。

**6.8.5. "Go to First Packet/到第一个包"命令**  
跳到第一个包。

**6.8.6. "Go to Last Packet/到最后一个包"命令**  
跳到最后一个包。

#### 6.9. 标记包
你可以在包列表面板对包进行标记。被标记的包背景色为黑色，无论原来的颜色是什么。标记包有助于在分析大型包文件时进行查找。

**警告**  
包标记并没有存储在捕获文件中或任何其他地方，关闭文件后所有标记将会丢失。

在保存、导出或打印包时，你可以使用包标记控制输出包。标记包以后，可以进行区间选择。详见第 5.8 节 “包范围选项”。

对标记包可以进行以下三项操作：

- **Mark packet (toggle)**：冻结或取消标记单个包。
- **Mark all packets**：标记所有包。
- **Unmark all packets**：取消所有标记。

这些标记功能出现在 Edit 菜单中，“Mark packet (toggle)” 功能在包列表面板的上下文菜单中同样可以找到。

#### 6.10. 时间显示格式及参考时间
在捕获包的过程中，每个包都带有时间戳。时间戳会被保存在捕获文件中，以备将来分析使用。

关于时间戳、时区及相关内容的描述，详见第 7.3 节 “时间戳”。

包列表的时间戳格式预设和精度可在浏览菜单中选择，详见第 3.5 节 “File 菜单”。

可用的预置格式如下：

- **Date and Time of Day**：`1970-01-01 01:02:03.123456`（包捕获的绝对日期和时间）
- **Time of Day**：`01:02:03.123456`（包捕获的绝对时间）
- **Seconds Since Beginning of Capture**：`123.123456`（相对于文件开始捕获的时间或第一个时间参考包的时间）
- **Seconds Since Previous Captured Packet**：`1.123456`（相对于前一个捕获包的时间）
- **Seconds Since Previous Displayed Packet**：`1.123456`（相对于前一个显示包的时间（过滤/显示））

可用精度（数字以十进制形式表示）有：

- **Automatic**：使用加载文件格式具有的时间戳精度（默认选项）。
- **Seconds, Deciseconds, Centiseconds, Milliseconds, Microseconds or Nanoseconds**：强制使用你指定的精度。如果实际精度比你指定的低，会在后面自动追加 0；如果实际精度比你指定的高，数据会被截尾。

**6.10.1. 包参考时间**
用户可以为包设置时间参考。时间参考是所有后续包的起算时间。如果你想知道到某一个特定包的时间间隔，这会非常有用。例如，在开始一个新请求时。可以在一个包里面设置多个参考时间。

**警告**  
时间参考不能保存到包文件中，关闭文件后就会丢失。

**注意**  
时间参考可能仅仅在时间格式为 "Seconds Since Beginning of Capture" 模式下比较有用。其他时间显示形式下可能要么不能工作，要么没有作用。

要使用时间参考，选择 Edit 菜单下的 “Time Reference” 项中的一个，详见第 3.6 节 “Edit 菜单”，或者从包列表的右键弹出项选择。

- **Set Time Reference (toggle)**：切换当前包时间参考状态开关。
- **Find Next**：在包列表面板查找下一个时间参考包。
- **Find Previous**：在包列表面板查找前一个时间参考包。

**图 6.10. 时间参考举例**

作为时间参考的包，在 time 列会有 *REF* 字符串作为标记（见上图第 10 个包）。所有后续包都会用最后一个时间参考来显示时间。

[16] 不甚了解下方的 16 进制转储怎么表达 190 的。

#### 第 7 章 高级

**7.1. 说明**
在本节将介绍 Wireshark 的一些高级特性。

**7.2. "Follow TCP Stream"**
如果你处理 TCP 协议，并且想要查看 TCP 流中的应用层数据，“Following TCP streams” 功能将会非常有用。无论你是想查看 Telnet 流中的密码，还是想尝试弄明白一个数据流，或者你只需要一个显示过滤来显示某个 TCP 流的包，这些都可以通过 Wireshark 的 “Following TCP streams” 功能来实现。