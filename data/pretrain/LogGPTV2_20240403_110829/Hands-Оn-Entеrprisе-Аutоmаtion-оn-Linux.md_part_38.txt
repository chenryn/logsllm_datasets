system are newer than the vulnerable versions. For both of these security policies, all checks
are run every time as they are in OVAL format—however, tests only report a failure if a
package is installed and is older than the version containing the fix for the given
vulnerability. Hence, you should not receive any false positives resulting from running
these scans.
Unlike the SSG policies, these policies are updated regularly—at the time of writing, the
Ubuntu package vulnerability scanning profile we downloaded using the preceding
commands was only one hour old! As a result, part of your auditing process must
involve downloading the latest package vulnerability OVAL policies and scanning against
these—possibly a good job for Ansible (though this is left as an exercise for you).
By now, you should have a good understanding of the types of policies you can download,
the formats you may come across them in, and what their intended purposes are. Hence, in
the next section, we will proceed to demonstrate how they can be used to scan your Linux
hosts and audit your compliance against your chosen security policies.
[ 411 ]
Auditing Security Policy with OpenSCAP Chapter 15
Scanning the enterprise with OpenSCAP
So far in this chapter, we have covered the various tools available from the OpenSCAP
project and the security policies you might wish to employ to scan your Enterprise Linux
environment. Now that we have completed that groundwork, it's time to take a look at how
to make use of these to actually scan your infrastructure. As we have discussed, there are
three key tools that you might use to scan your infrastructure. We will start off this process
by exploring the oscap command-line tool in the next section.
Scanning the Linux infrastructure with OSCAP
As we discussed earlier in this chapter, the oscap tool is a command-line utility designed
for scanning the local machine that it is installed on. The security policies that you wish to
audit the host against must also be on the filesystem of the host that it runs on. If you have
completed the steps in the section entitled Evaluating and selecting policies, then you should
already have everything you need.
With that said, if using the oscap tool to scan your infrastructure is going to be your way
forward, you may wish to consider Ansible as a tool to both install it and gather the results
when the scan is complete.
Before we come to this, let's look at how we might scan a single host:
1. Assuming that we are working on our Ubuntu 18.04 server and that we have
unpacked the latest upstream SSG into our current working directory so that we
have the required Ubuntu 18.04 support, we would use the oscap info
command to query the XCCDF policy file to see which policies are available to
us:
$ oscap info scap-security-guide-0.1.47/ssg-ubuntu1804-ds.xml
[ 412 ]
Auditing Security Policy with OpenSCAP Chapter 15
The output of the info command will yield something like that shown in the
following screenshot:
2. From here, we will choose the profile (or profiles—after all, you could always
run more than one scan) that you wish to audit against. In our case, we are
running a general-purpose server, so we will choose the profile with Id:
xccdf_org.ssgproject.content_profile_standard.
3. To run this scan, and save the output in a human-readable HTML report, you
would then run a command such as the following:
$ sudo oscap xccdf eval --profile
xccdf_org.ssgproject.content_profile_standard --report
/var/www/html/report.html ./scap-security-guide-0.1.47/ssg-
ubuntu1804-ds.xml
[ 413 ]
Auditing Security Policy with OpenSCAP Chapter 15
We must run this command using sudo, as it requires access to some core system
files that would not otherwise be accessible. The scan runs and produces a nice
human-readable output on the screen, an example of which is shown in the
following screenshot:
As you can see, the XCCDF policy produces a highly readable output, with a clear pass/fail
result for each test. Hence, even within these first few lines of the output, you can see that
our test system is not compliant in several areas.
Furthermore, the oscap command has also generated a nice HTML report that we have put
into the web root of this server. Of course, you wouldn't do this in a production
environment—the last thing you'd want to do is publicize any security issues with your
server! However, you could send this report to your IT Security team, and if you were
running OSCAP using an Ansible playbook, Ansible could copy the report from the remote
server to a known place where the reports can be collated.
[ 414 ]
Auditing Security Policy with OpenSCAP Chapter 15
A portion of this HTML report is shown in the following screenshot—you can see how
readable it is. Further, even at a quick glance, someone non-technical can see that this
system fails compliance tests and needs remedial steps:
Suddenly, it becomes apparent how powerful this tool is, and why you would wish to use
it to scan your infrastructure! In addition to this report, we can also check the patch status
of our test system using the com.ubuntu.bionic.cve.oval.xml policy that we
downloaded in the section entitled Installing other OpenSCAP policies. As we discussed,
OVAL policies do not produce reports that are as readable as XCCDF reports, but
nonetheless they are still incredibly valuable. To scan our Ubuntu system to see whether it
is missing any critical security patches, you would run this:
$ sudo oscap oval eval --report /var/www/html/report-patching.html
com.ubuntu.bionic.cve.oval.xml
[ 415 ]
Auditing Security Policy with OpenSCAP Chapter 15
As shown in the following screenshot, the output is not as readable as the XCCDF output
and needs a little more interpretation. In short, the false result means that the machine
being scanned does not fail the compliance test, and so infers that the requisite patch has
already been applied, whereas true means that a patch is missing from the system:
Once again, however, the HTML report comes to our rescue—to start with, it has a
summary section at the top, which shows that our system has a total of 432 detected
package vulnerabilities, but also 8,468 test passes. Hence, we urgently need to apply
patches to fix known security vulnerabilities, as we understood by the policy file we ran the
audit against:
[ 416 ]
Auditing Security Policy with OpenSCAP Chapter 15
Of course, it is highly important to download an updated copy of this policy regularly to
ensure that it is up to date. If you drill down into the report, you will see that, for each
check, there is a cross-reference CVE vulnerability report so you can find out which
vulnerabilities your system exhibits:
Just through these few examples, I'm sure you can see how valuable these reports are and
how they could be easily reviewed by an IT Security team without any specific Linux
command-line knowledge.
The process for running OSCAP-based scans on CentOS or RHEL is broadly similar:
1. Assuming that you are using the SSG policy packaged by your operating system
vendor and included with the OS, you would query the XCCDF profiles so that
you know which to run against:
$ oscap info /usr/share/xml/scap/ssg/content/ssg-centos7-xccdf.xml
2. You can then run an XCCDF-based scan in exactly the same way as we did on
Ubuntu—here, we are choosing the standard profile to scan our system with:
$ sudo oscap xccdf eval --fetch-remote-resources --report
/var/www/html/report.html --profile standard
/usr/share/xml/scap/ssg/content/ssg-centos7-xccdf.xml
[ 417 ]
Auditing Security Policy with OpenSCAP Chapter 15
You will observe the presence of the --fetch-remote-resources flag here too—this is
used because the CentOS 7 policy requires some additional content that it downloads
directly from Red Hat so that it is always working with the most up-to-date copy. The scan
runs in much the same way as before, producing the same human-readable report. One
thing you will see as the scan runs is that many of the tests return
notapplicable—unfortunately, the CentOS 7 security policy is very much a work in
progress and the version included with CentOS 7 at the time of writing does not include
complete support for this operating system. This demonstrates how pedantic OpenSCAP
policies can be—most CentOS 7 security requirements will apply equally to RHEL 7 and
vice versa, yet the policies are coded to work very specifically with certain operating
systems. The following screenshot shows the scan in progress and the aforementioned
notapplicable test results:
[ 418 ]
Auditing Security Policy with OpenSCAP Chapter 15
In spite of this, the audit still reveals some valuable insights—for example, as we can see
from the following screenshot of the HTML report, we have accidentally allowed accounts
with empty passwords to log in:
[ 419 ]
Auditing Security Policy with OpenSCAP Chapter 15
If you are running CentOS 7 specifically, you will not receive vendor support from Red
Hat, and so it is worth trying the upstream SSG policy as the support for operating systems
such as CentOS and Ubuntu is improving all the time (as we saw earlier in this section
when we audited our Ubuntu Server 18.04 host). Rerunning the exact same scan but using
SSG 0.1.47, our scan results look quite different:
This just highlights the importance of understanding the policy you are using and making
sure that you download the right version for your situation. If you are using RHEL 7, you
would be advised to make use of the packages supplied by Red Hat, whereas with CentOS
7 and Ubuntu Server 18.04, you would be better off trying the latest version from the
upstream GitHub repository. Indeed, the following screenshot shows the results of the
exact same scan on our CentOS 7 test system using the version 0.1.47 SSG, and we can see
that this time, we have run a total of 958 tests and have a much clearer understanding of the
security of our server:
[ 420 ]
Auditing Security Policy with OpenSCAP Chapter 15
On CentOS 7, you can also run the OVAL scan for package vulnerabilities in the same
manner that we did with Ubuntu Server, but using the com.redhat.rhsa-RHEL7.xml file
that we downloaded previously. Just as we did on Ubuntu Server, we would run this scan
with this command:
$ sudo oscap oval eval --report /var/www/html/report-patching.html
com.redhat.rhsa-RHEL7.xml
The report is interpreted in exactly the same way as on Ubuntu, and if we refer directly to
the HTML report, we can see that this system is fully patched against known package
vulnerabilities at this time:
This wraps up our look at the oscap command-line tool, but by now you should have all of
the information you need to run your own scans regularly. Automating this process is left
as an exercise for you, but here are some tips on what I would consider a good Ansible
solution:
Use the yum or apt modules to install the required OpenSCAP packages on the
server before performing any other tasks.
[ 421 ]
Auditing Security Policy with OpenSCAP Chapter 15
Use the get_url module to download SSG and/or the package vulnerability
OVAL definition file to ensure you have the most up-to-date copy (except on
RHEL 7, where you would use the version supplied by Red Hat). Use the
unarchive module to unzip the file you downloaded.
Run the OSCAP scan using the shell module.
Use the fetch module to grab a copy of the HTML report(s) for distribution and
analysis.
In the next section, we will look at running scheduled regular scans using the OpenSCAP
Daemon.
Running regular scans with the OpenSCAP
Daemon
As you have now understood the basis of scanning with the oscap command-line tool, it
will be easy to set up regular scanning with the OpenSCAP Daemon as the techniques
involved are the same. Assuming that you have already installed the daemon, as we
discussed earlier, it is fairly easy to create automated scans, although, at the time of writing,
the OpenSCAP Daemon does not run on Ubuntu Server 18.04. This is a result of a missing
CPE file, which, to date, has not been rectified, and although this did not impact our use of
the oscap command-line tool (though those of who are eagle-eyed will have noticed an
error relating to this file at the end of the scan), it does prevent the OpenSCAP Daemon
from starting.
As a result, the examples in this section will be based on CentOS 7 only—however, the
procedure would be broadly similar on Ubuntu Server 18.04 when the OpenSCAP
packages are fixed. In fact, this issue, which was first reported in October 2017 according to
the ComplianceAsCode GitHub project, seems to be relatively long-standing and so is an
excellent reason to make use of Ansible in conjunction with the oscap tool for your
scanning needs.
When this Ubuntu related issue is fixed, you will be able to schedule scans for both CentOS
and Ubuntu hosts from one central scanning host using the process outlined in this chapter.
Note that the SSG files for all of your hosts (be they CentOS, RHEL, or Ubuntu) must live
on the same host as the OpenSCAP Daemon – they are copied across to each host to be
scanned whenever a scan is run by the OpenSCAP Daemon, and so do not need to be
deployed on every host.
[ 422 ]
Auditing Security Policy with OpenSCAP Chapter 15
Nonetheless, if you want to set up a scheduled scan using the OpenSCAP Daemon, the
easiest way to do this is by using the oscapd-cli tool in interactive mode:
1. This is achieved by invoking oscapd-cli with the following parameters:
$ sudo oscapd-cli task-create -i
2. This launches a text-based guided configuration that you can easily
complete—the following screenshot shows an example of how I set up the
daemon to run a daily scan on my CentOS 7 test system:
Most of the steps in that interactive setup should be self-explanatory—however,
you will note a step that asks about Online remediation. The OpenSCAP
profiles include the capability to automatically rectify any compliance issues they
find as they go through the scan. It is up to you whether you wish to enable this
or not, as this will depend on whether you feel happy with an automated process
making changes to your systems, even for security purposes. You may want to
separate your audit tasks from your policy enforcement tasks, in which case you
would use Ansible for the remediation steps.
[ 423 ]
Auditing Security Policy with OpenSCAP Chapter 15
If you do enable remediation, be sure that you have tested this in an
isolated environment first to ensure that the remediation steps do not
break any of your existing applications. This testing must be performed
not only when your application code changes, but also when new versions
of SSG are downloaded as each new version might contain new
remediation steps. This is the same as the guidance we explored in
Chapter 13, Using CIS Benchmarks, only now applied to OpenSCAP SSG.
3. Once you have enabled the scan, you will find that, at the scheduled time, it
deposits the scan results in /var/lib/oscapd/results. Under this, you will
find a numbered subdirectory that corresponds to the task ID you were given
when you created the task (1, in the preceding screenshot), and then under
another numbered directory, which is the scan number. Hence, the results for the
first scan for task ID 1 will be found in /var/lib/oscapd/results/1/1.
4. When you examine the contents of this directory, you will notice that the results
are only stored in an XML file, which, while suited for further processing, is not
very readable. Fortunately, the oscap tool that we looked at previously can
easily convert scan results into human-readable HTML—for this result, we
would run the following command:
$ sudo oscap xccdf generate report --output /var/www/html/report-
oscapd.html /var/lib/oscapd/results/1/1/results.xml
Once this command has run, you can view the HTML report in your web browser just as
we did earlier in this chapter. Of course, if you aren't running a web server on this machine,
you can simply copy the HTML report to a host that has one (or even open it locally on
your computer).
The beauty of setting up the OpenSCAP Daemon is that, unlike the oscap tool, it can scan
remote hosts as well as the local one. This scanning is performed over SSH, and you must
ensure that you have set up passwordless SSH access from the server running the
OpenSCAP Daemon to the remote host. If you are using an unprivileged account to log in,
you should also ensure that the account has sudo access, again without requiring a
password. This should be quite easy for any experienced system administrator to set up.
[ 424 ]
Auditing Security Policy with OpenSCAP Chapter 15
On CentOS 7, the default SELinux policy prevented the remote scan from
running on my test system. I had to disable SELinux temporarily for the
remote scan to run. Obviously, this is not an ideal solution—if you
encounter this issue, it would be better to build an SELinux policy that
enables the remote scan to run.
Once you have set up the remote access, configuring the OpenSCAP Daemon through the
interactive task creation process is no more complex than for the local machine—the only
difference this time around is that you need to specify the remote connection in this format:
ssh+sudo://@
If you are logging in directly as root (not recommended), you can leave out the +sudo part
of the preceding string. Hence, to set up add another remote scan from my test server, I ran
through the commands shown in the following screenshot:
[ 425 ]
Auditing Security Policy with OpenSCAP Chapter 15
As you can see, this creates task number 2 for this purpose. The advantage of this setup is
that, once you have set up the SSH and sudo access, you can have one designated host that
is responsible for scanning your entire estate of Linux servers. Also, the hosts being
scanned only need the OpenSCAP libraries present—they do not need the OpenSCAP
Daemon or the security policy files—these are automatically transferred to the hosts as part
of the remote scanning process.
The results of the scheduled scan are stored in XML format in the
/var/lib/oscapd/results directory exactly as before and can be analyzed or converted
into HTML as required.
The OpenSCAP Daemon is almost certainly your quickest and easiest route to scanning
your infrastructure, and the fact that it collects and stores all of the results locally as well as
uses security policies stored on its own filesystem means it is fairly resistant to tampering.
For automated, ongoing SCAP-based scanning of your environment, the OpenSCAP
Daemon is almost certainly your best choice, and you could always create a cron job to
automatically convert the XML results into HTML and put them into your web server root
directory so that they can be viewed.
Last but not least, in the next section, we will look at the SCAP Workbench tool and see
how that can help you with your security auditing.
Scanning with SCAP Workbench
The SCAP Workbench tool is an interactive, GUI-based tool for running SCAP scans. It has
almost the same capabilities as the oscap command-line tool, except that it can scan both
remote hosts over SSH (similarly to the OpenSCAP Daemon). The high-level process for
using SCAP Workbench is the same as for oscap—you select your policy file from the
policy you downloaded, select the profile from within it, and then run the scan.
This time, however, the results are displayed in the GUI and are easily interpretable
without the need to generate an HTML report and load it in a browser. The following
screenshot shows the equivalent of running the following on the command line with
oscap:
$ sudo oscap xccdf eval --profile
xccdf_org.ssgproject.content_profile_standard ./scap-security-
guide-0.1.47/ssg-ubuntu1804-ds.xml
[ 426 ]
Auditing Security Policy with OpenSCAP Chapter 15
It is important to state that no report file is generated by the scan, but you can generate
either an HTML- or XML-based one by clicking on the Save Results button at the bottom of
the screen: