a third-party attestation of the CSP secSLA (e.g., through
a scheme such as the CSA Open Certiﬁcation Framework
(OCF) [7]). The audited secSLAs are then stored by the
CSPs in a trusted repository of SLAs (e.g., the CSA STAR
repository [8]) as shown in Figure 3. This trust assumption
relies on the fact that the certiﬁcations and the repository
are trusted, and that the published secSLAs were valid at
the time of issuing the corresponding certiﬁcation or publish-
ing the information in the repository. Stronger assurance
levels can be provided by mechanisms such as continuous
monitoring (e.g., the CSA STAR continuous monitoring de-
ﬁned at the level 3 of the OCF). The described trust model
is able to mitigate the risk of having malicious CSPs pub-
lishing false secSLA information with the goal of achieving
higher scores in the proposed evaluation system. Other mi-
nor risks (e.g., tampered evaluation systems’ software) can
be mitigated through traditional security controls and secure
software development techniques.
3.1 Stage A: Security Requirements Deﬁnition
During this stage, the customers create their set of secu-
rity requirements based on the same secSLA template used
by the CSPs to specify their oﬀered security services (as the
one shown in Figure 2). The output of this stage is a cus-
tomer secSLA which is then used, along with one or more
CSP secSLAs, as an input to the next stage.
3.2 Stage B: Dependency Management
Approach
The approach for managing service dependencies builds
on a dependency model, which is used to capture informa-
tion about security services and the dependencies that occur
between them. In order to model service dependencies, it is
important to ﬁrst derive the expected requirements that the
dependency model should support.
1. Support of diﬀerent dependency types. The depen-
dency model should support diﬀerent types of depen-
dencies as well as various dependency classiﬁcations
(e.g., Horizontal, vertical, unidirectional and bidirec-
tional dependencies).
2. Support of multiple dependencies. One security service
can have dependencies to several other security ser-
vices. These dependencies could be of the same or of
diﬀerent types.
3. Dependency model validation. It should be possible to
automatically validate the dependency model to avoid
inconsistencies and conﬂicts.
This dependency management approach is performed in two
phases as shown in Figure 3.
3.2.1 Phase 1: Dependency Model Creation
Handling all the dependencies in the secSLA is a very
time consuming and complex task. Therefore, a dependency
model is created for each secSLA to cover all identiﬁed de-
pendencies within the secSLA. This model is used to capture
information about services (each composed of a set of SLOs)
and the dependencies that occur between them. We model
a secSLA by a tuple secSLA = (S, l,−→S, K,−→K , v) where:
• S is a set of services s with associated hierarchy levels
l(s) ∈ {0, 1, . . . , n − 1}. In this paper the secSLA is
composed of four hierarchical levels as shown in Figure
2. A secSLA contains exactly one service s with l(s) =
0, which is the root service. Level n is the SLO level.
• −→S⊆ S × (S ∪ K)×{1, 2, 3} models service dependen-
cies where {1, 2, 3} shows the dependency importance
level w (cf., Table 1).
• We write s1
w−→S s2 if s1 (dependent service) depends
on s2 (antecedent service) with dependency impor-
tance level w, where w ∈ {1, 2, 3}. We write s −→S o
to express that s w−→S o for some w ∈ {1, 2, 3} (where
o is either a service or an SLO).
• K is a set of SLOs with associated hierarchy level
l(k) = n for all k ∈ K.
• −→K⊆ K×K×{1, 2, 3} models SLO dependencies. We
w−→K k2 if k1 (dependent SLO) depends on k2
have k1
(antecedent SLO) with importance level w.
• v : K (cid:55)→ V is an assignment of values in V to SLOs,
where V is the set of all metric values of each SLO in
K.
v
• Constraints on the SLO dependency relation are spec-
iﬁed using a constraint set C−→K
⊆ K × K × {=,(cid:54)=, ,≥}. A constraint (k1, k2,≡) ∈ C−→K
is satisﬁed
if the values of k1 and k2 are related by the given com-
parison, i.e., v(k1) ≡ v(k2). A dependency relation
k1 −→K k2 is called valid, written valid
(k1, k2), if
the relation satisﬁes all its constraints, i.e., ∀(k(cid:48)
2,≡
) ∈ C−→K
1, k(cid:48)
2) ⇒ v(k1) ≡ v(k2).
1 and k2 = k(cid:48)
.(k1 = k(cid:48)
v
−→K
C
v
v
• We write the transitive closure of −→S as →+
S , i.e.,
s1 →+
S s2 if s1 −→S s2 or ∃s3 ∈ S.s1 −→S s3 and s3 →+
s2. A dependency o1 → o2, where →∈ {−→S,−→K}, be-
S
tween two objects o1, o2 ∈ S ∪ K is called symmetric
if also o2 → o1. Otherwise, o1 → o2 is called non-
symmetric. In other words, o1 and o2 are symmetri-
cally dependent if o1 → o2 and o2 → o1.
Note that it is possible that o1 → o2 is symmetric while
the relation → is non-symmetric. We explain this us-
ing an example, let us consider →= {(o1, o2, w), (o2, o1,
w), (o1, o3, w)} which is a non-symmetric relation and
where we have that o1 → o2 is symmetric.
• A secSLA has to satisfy the following constraints:
i) Services do only depend on services of the same or
the next lower hierarchy level: ∀s1, s2 ∈ S.s1 −→S
s2 ⇒ l(s1) = l(s2) or l(s1) + 1 = l(s2)
ii) Only services of hierarchy level n − 1 depend on
SLOs: ∀s ∈ S∀k ∈ K.s −→S k ⇒ l(s) = n − 1
332iii) Services do not depend on themselves: ∀s ∈ S.¬s
iv) All services depend directly or indirectly on an
−→S s
SLO: ∀s ∈ S∃k ∈ K.s →+
Phase 2: SecSLA Validation
S k
3.2.2
A meta-model is developed based on the dependency def-
initions. This meta-model allows the description of SLOs
along with information on the secSLA drafted for it. The
meta-model is speciﬁed using a machine readable format (al-
lowing fully automatic validation) such as an XML data
structure using an XML Schema.
In this Schema, depen-
dency relations between services are modeled by including
the involved service SLOs and their roles as dependent or
antecedent as well as their values. Moreover, the constraint
comparison is extracted and modeled in the Schema. A brief
excerpt from the secSLA dependency model is presented in
Appendix A.
Following the development of the dependency model, the
secSLA SLOs are validated as depicted in Figure 4. The
validation is done by ﬁrst extracting the secSLA ID, depen-
dency model ID and dependency ID of each two dependent
SLOs (each dependency relation in the same dependency
model has a unique ID) deﬁned in the XML Schema. Fur-
thermore, for each dependent relation the antecedent and
dependent SLO’s values are extracted. This entails extract-
ing the constraint comparative (i.e., =,(cid:54)=,≤,≥) and check-
ing if the two dependent SLO values satisfy the constraint.
If the constraint between dependent SLOs is not satisﬁed,
the validation scheme shows a conﬂict between these two
SLOs. The dependency ID and dependent SLO ID of the
aﬀected SLOs are saved in a list, while the evaluation is
continued to determine further conﬂicts. At the end of this
phase a list of all conﬂicts found in the CSP’s secSLA with
the conﬂicts explanation is sent to the CSP in order to re-
solve these conﬂicts and resubmit his/her secSLA again to
be validated. Similarly, a list of all conﬂicts found in the cus-
tomer requirements (speciﬁed using the customer secSLA)
are resolved by the customer and validated again. If no prob-
lems are detected, both the validated CSPs secSLAs along
with the customer secSLA are used as an input to Stage (C).
Figure 4: Dependency based secSLA validation
stages
3.3 Stage C: Structuring SecSLA Services
In a secSLA, as the number of oﬀered services and SLOs
along with the dependencies between them increases, the
secSLA hierarchical structure (shown in Figure 2) quickly
becomes cluttered and a disorderly network of tangled arcs.
This makes it hard for (i) the customers to specify their
requirements and resolve the conﬂicts (which requires an
expert customer and is time consuming) and (ii) the CSPs
to check the dependency relations between their oﬀered ser-
vices to avoid any violation. Consequently, the objective of
this stage is to embody the secSLA hierarchical structure by
mapping the dependencies in a precise order where services
and SLOs are ordered according to their level of dependency.
This ordering makes the dependency relations explicit and
more traceable regardless of the size which allows customers
to (a) easily deﬁne their security requirements and (b) assess
and rank the CSPs according to their security requirements.
Furthermore, this provides CSPs with the guidance on the
security improvements that should be performed in order to
achieve the customer requested security level.
A variety of techniques exist for the analysis, management
and ordering of the secSLA services and SLOs other than
the graphs used in building the secSLA hierarchical struc-
ture. One of these techniques is the program evaluation and
review technique [28]. Although this technique incorporates
more information than the directed graphs, it is still inade-
quate for representing the vast majority of design procedures
where iteration4 task relationships are involved. Another
technique which has been widely used in documenting design
procedures is the structured analysis and design technique
[22]. This technique attempts to overcome the size limita-
tions by restricting the amount of information that can be
placed on each document. Unfortunately, loops remain an
unsolved problem [19].
A representation which overcomes the size and the itera-
tion tasks limitations of those discussed above is the Design
Structure Matrix (DSM) (also known as “Dependency Struc-
ture Matrix”) [26]. There are two main categories of DSMs:
static and time-based [2]. Static DSM represents system
elements existing simultaneously, such as components of a
product architecture or groups in an organization. In time-
based DSM, which is the type of DSM used in this paper, the
ordering of the rows and columns indicates a ﬂow through
time. The DSM embodies the structure of the underlying
design activity by mapping the relations between services in
a precise order which makes the secSLA clear and easy to
read; regardless of the size. To clarify, a secSLA of n ser-
vices is represented as an n × n matrix with identical row
and column labels. The matrix element aij is empty if the
ith column is independent on the jth row, and not empty
if they are dependent. This means, services and SLOs with
empty rows have all required information and do not depend
on others. Furthermore, the empty columns provide no in-
formation required by other services and SLOs.
To demonstrate the idea of DSM, the mapping of the secSLA
shown in Figure 2 into a DSM is presented in this section
and is depicted in Figure 5. As the dependencies of ser-
vices on themselves are not considered (as speciﬁed in the
dependency model constrains in Section 3.2), there are no
marks along the diagonal. The strength of the dependencies
is given using numerical values; these values provide more
detailed information on the relationships between the dif-
ferent system services [26]. In this paper we use the three
4A loop of information which occurs if there are bidirec-
tional relations between services, which means each service
is waiting for information from the other one.
secSLA ValidationGet antecedent SLOGet dependent SLOGet comparatorValidate the dataSLOs conflictsList of conflictsnoMore dependenciesyesyesnoEndDependency model333level scale dependency importance rating deﬁned in Table
1. Examining row 2 we note that s1 strongly depends on s2
and s1.1, and weakly depends on s1.2 and s1.3. Examining
row 10 we note that SLO k2 weakly depends on k3.
Figure 5: DSM mapping of the secSLA shown in
Figure 2
After mapping the secSLA into a DSM, we can start re-
ordering the DSM rows and columns in order to transform
the DSM into a lower triangular form (that is, the matrix
has no entries above the diagonal), this is called DSM par-
titioning [13] and is done in two steps:
Step 1: Services which have a minimum number of depen-
dencies (initially there will be none) are placed at
the top of the DSM. These services are identiﬁed
as services with minimum number of row values. If
there is more than one such service, the one with
maximum number of column values is selected.
Step 2: Services that deliver no information to others in the
matrix are placed at the bottom of the DSM. This
is easily identiﬁed by observing an empty column
in the DSM. Once a service is rearranged, it is re-
moved from the DSM and step 2 is repeated on the
remaining elements.
Figure 6 shows the result of partitioning the DSM depicted
in Figure 5. Bidirectional dependencies occur when the ma-
trix cannot be reordered to have all matrix elements sub-
diagonal. As shown in Figure 6, k2 and k3 are bidirectionally
dependent (indicated by shading); k2 needs the information
of k3 and k3 needs the information of k2. If k2 and k3 are
regarded as a single composite service, the cycle can be elim-
inated [24].
The output of this stage will be (a) one customer secSLA
and (b) one or more CSP secSLAs mapped as a DSM where
the services and the SLOs are progressively ordered starting
from the least dependent.
3.4 Stage D: Evaluation
The quantitative security level assessment of CSPs (for
their match to the customer requirements) is the primary
objective of the proposed framework developed in this stage.
The challenge is not only how to quantify diﬀerent SLOs in
the secSLAs, but also how to aggregate them with a mean-
ingful metric. To solve these issues, we use a ranking mech-
anism based on the Analytic Hierarchy Process (AHP) [23].
Figure 6: Final DSM after partitioning and schedul-
ing
AHP is a widely used method for solving problems related to
Multi Criteria Decision Making (MCDM) [31]. The advan-
tages of AHP over contemporary multi-criteria methods is
its ability to handle composite qualitative and quantitative
attributes, along with its ability to identify inconsistencies
across requirements [20]. AHP uses a pairwise comparisons
for evaluating the alternatives. As an overview of our eval-
uation framework, the secSLA assessment and the ranking
of CSPs are performed in the following progressive phases.
Figure 7: Dependent secSLA hierarchy
Phase 1. Hierarchical Structure
The DSM mapping of each secSLA (either the customer
secSLA or the CSPs secSLAs) is modeled as a hierarchi-
cal structure in this phase. In this structure the top level of
the hierarchical structure deﬁnes the main goal and aims to
ﬁnd the overall rank (i.e., the root level). The lowest level is
represented by the least dependent SLOs as shown in Fig-
ure 7. This hierarchical structure can be used by the basic
customers to specify their requirements at the lowest level
only (i.e., level0 in Figure 7). We explain the framework
presented in this section using a real-world case study in
Section 4. Note that Figure 7 outlines the hierarchical rep-
k5k3k4k6k7k8k9 k2k1WeightsWeightsWeightsWeightsWeightsBottom-up aggregation approachlevel0s2s1WeightsRoot11221s2.1s1.2s1.1s1.3WeightsWeightss2.2334resentation of the DSM shown in Figure 6 where the least
dependent SLOs are the SLOs with empty rows in Figure 6.
Phase 2. Weights Assignment
The dependency importance level of each dependency rela-
tion (strong, medium or weak dependency with numerical
scaling 3, 2 and 1, respectively; cf., Table 1) is speciﬁed as
a weight (w) during the assessment process. The weight of
each relation is used to show how diﬀerent dependency levels
aﬀect the overall security level.
Phase 3. Services Quantiﬁcation
In order to assess each CSP secSLA, a measurement model
for diﬀerent SLOs should be deﬁned. We use the relative
ranking model proposed in [27], which deﬁnes the most im-
portant requirements used and their quantitative values.
The ranking model is based on a pairwise relation of the
services (a) provided by diﬀerent CSPs, and (b) required by
customers’ such that:
CSP1,k/CSP2,k =
v1,k
v2,k
(1)
Where v1,k implies the SLO value provided by CSP1,k (cf.,
Deﬁnition 1) and CSP1,k/CSP2,k indicates the relative rank