使用PE模式在 Bochs 下启动一个进程时，你会注意到一个不同之处，即这时 IDA 不会显示警告对话框，提醒你在调试器控制下启动一个潜在恶意的进程的风险。出现这种情况，是因为这时IDA 只会创建 Bochs模拟器进程，且你调试的所有代码均被Bochs模拟器视为它所模拟的代码。IDA 甚至不会以你所调试的二进制文件创建任何本机进程。
26.2.3 Bochs 磁盘映像模式
Bochs 调试器的第三种运行模式称为磁盘映像模式。除可与 IDA 集成外，Bochs 本身也是一个成熟的 x86 系统模拟器。因此，你完全可以使用 Bochs 提供的bximage 工具创建磁盘映像，并使用Bochs 及任何所需的相关操作系统安装媒介在磁盘映像上安装一个操作系统，并最终使用Bochs 在模拟环境中运行你的客户操作系统。
如果你使用 IDA/Bochs 的主要目的是了解某个进程的行为，那么磁盘映像模式可能并不适合你。要隔离在完全模拟的操作系统中运行的进程并观察该进程的行为，并不是一个简单的任务，你需要深入了解该操作系统，以及它如何管理进程和内存。分析系统 BIOS 与启动代码是IDA/Bochs 的优势所在，因为这时操作系统代码还未接管控制权，分析它们会相对容易一些。
在磁盘映像模式下，你不会将可执行文件映像加载到 IDA 中。相反，IDA 附带有一个识别Bochs 配置文件（bochsrc）2
 的加载器。使用 Bochs 模拟整个系统时，bochsrc文件用于描述硬件执行环境。IDA 的默认bochsrc文件为/cfg/bochsrc.cfg。bochsrc文件主要用于指定系统BIOS、视频 ROM和磁盘映像文件的位置。IDA 的bochsrc加载器提供最少的加载服务，仅读取所加载的 Bochs 配置文件指定的第一个磁盘映像文件的第一部分，然后将Bochs 调试器用于新的数据库。Hex-Rays 博客3
 上讨论了如何在开发主启动记录时使用 IDA/Bochs 。
2. 参见http://bochs.sourceforge.net/doc/docbook/user/bochsrc.html
 ，了解有关bochsrc文件格式的信息。
3. 参见http://www.hexblog.com/?p=103
 。
26.3 Appcall
调试器的 Appcall特性有效地扩展了 IDC 或IDAPython 通过脚本调用活动进程中的任何函数的功能。上述功能的用途非常广泛，包括将额外的内存映射到进程地址空间中（通过调用VirtualAlloc
 或类似函数），以及将新库注入到所调试的进程中（通过调用LoadLibrary
 ，或通过调用进程中的函数来执行你宁愿手动执行的任务，如解码数据块或计算散列值）。
要使用Appcall，必须将你要调用的函数加载到所调试进程的地址空间中，并且 IDA 必须了解或获知该函数的原型，以便正确编列或解列参数。保存当前调试器线程的状态（与该线程有关的所有注册）后，你所作的任何 Appcall调用将置于该线程中。Appcall完成后，IDA 将恢复线程状态，调试器也将恢复执行，好像 Appcall从未发生一样。
下面我们来看一个示例，该示例使用Appcall将一个4096 字节的内存块分配到当前（Windows）进程地址空间中。在本例中，我们希望调用的 Windows API函数名为 VirtualAlloc
 ，其原型如下所示：
LPVOID WINAPI VirtualAlloc(LPVOID lpAddress, SIZE_T dwSize,  
                           DWORD flAllocationType, DWORD flProtect);
如果以C 语言编写代码，使用 Appcall调用VirtualAlloc
 函数的代码如下所示：
VirtualAlloc(NULL, 4096, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
解析所有常量后，此函数调用最终变为：
VirtualAlloc(0, 4096, 0x3000, 4);
如前所述，在调试 Windows 进程时，IDA 会将函数所属的库的名称作为每个库函数的名称的前缀。因此，激活调试器后，VirtualAlloc
 将被命名为 kernel32_VirtualAlloc
 ，如下面的代码所示：
kernel32.dll:766B2FB6 ; ====== S U B R O U T I N E ========  
kernel32.dll:766B2FB6  
kernel32.dll:766B2FB6 ; Attributes: bp-based frame  
kernel32.dll:766B2FB6  
kernel32.dll:766B2FB6 kernel32_VirtualAlloc proc near
由于IDA 的类型库对名为 kernel32_VirtualAlloc
 的函数一无所知，所以不会显示任何类型信息。由于 Appcall需要了解函数的类型签名，因此我们需要使用 Set Function Type
 命令将相关信息添加到数据库中。只要我们指定的签名允许 IDA 将参数正确传送给所调用的函数，就不需要具体的类型签名了。在本例中，我们提供了以下签名：
kernel32.dll:766B2FB6 ; Attributes: bp-based frame  
kernel32.dll:766B2FB6  
kernel32.dll:766B2FB6 ; int __stdcall kernel32_VirtualAlloc(int, int, int, int)  
kernel32.dll:766B2FB6 kernel32_VirtualAlloc proc near
现在，我们已经作好准备，可以使用 Appcall为我们的进程分配更多内存。使用 IDC 可以轻松完成这个任务，因为我们只需要调用 VirtualAlloc
 ，就像调用 IDC 函数一样。在 IDA 命令行中输入函数调用，并使用 Message
 函数显示结果，将生成以下输出：
IDC>Message("%x\n", kernel32_VirtualAlloc(0, 4096, 0x3000, 4));  
3c0000
结果，一个 4096 字节的新内存块分配给了地址 0x3c0000
 处的进程。要在 IDA 中显示这个新内存块，我们必须使用 Debugger ▶Refresh内存命令，或等候 IDA 执行刷新及其他调试器操作。
在Python 中执行Appcall的语法会略有不同，需要用到在 idaapi
 模块中定义的 Appcall 变量。但是，你仍然需要提供命名函数与类型签名。以 Python 编写的、使用 Appcall调用VirtualAlloc
 函数的代码如下所示：
Python>Message("%x\n" % Appcall.kernel32_VirtualAlloc(0, 4096, 0x3000, 4))  
3d0000
有关Appcall及其用法的其他信息与示例，请参阅 Hex-Rays 博客1
 。
1. 参见http://www.hexblog.com/?p=113
 。
26.4 小结
在Hex-Rays 开发团队与用户的共同努力下，IDA 调试器的功能越来越强大。Hex-Rays 博客（http://www.hexblog.com/
 ）是你了解这些最新功能的最佳场所，Hex-Rays 开发人员经常会在这里公布最新版本的 IDA 将提供的新功能。追踪用户作出的功能扩展可能需要你付出更多的努力。有时，IDA 支持论坛会公布一些有趣的 IDA 扩展，但你很可能会在各种逆向工程论坛（如 ）看到它们，在 Hex-Rays 的年度插件编写竞赛中看到它们，或者在网上搜索时偶然遇到它们。
IDA 调试器不但功能强大，而且易于扩展。通过本地与远程功能，以及可作为大量流行调试器（如gdb 和WinDbg）的前端，IDA 为各种流行平台提供了一致的调试界面。通过扩展脚本或构建已编译的调试器插件，调试器的功能得到不断扩展。与当前的其他调试器相比，IDA 调试器具有得天独厚的优势，因为它的所有核心开发人员本身也是逆向工程人员，他们的个人与专业兴趣相投，都希望调试器成为一个强大而实用的工具。
附录A 使用IDA 免费版本5.0
2010 年12月，Hex-Rays 对免费版本的 IDA 进行了重大升级，由版本 4.9升级到版本 5.0。免费版本的 IDA 是一个功能有限的应用程序。与最新版本的 IDA 相比，免费版本通常要落后好几个版本，而与相同版本的商业 IDA 相比，免费版本提供的功能要少得多。因此，免费版本不仅缺乏最新版本 IDA 所提供的任何新特性，其功能也比 IDA 5.0 的商业版本要少很多。
本附录旨在简单介绍 IDA 免费版本的功能，并指出免费版本与本书（针对最新版本的 IDA ）所描述的IDA 之间的主要区别。在开始介绍之前，需要注意的是，Hex-Rays 还提供 IDA 最新商业版本的一个演示版本。与免费版本一样，演示版本的功能也在许多方面进行了删减，并且无法保存你的工作。此外，演示版本会随时暂停（不保存你的工作），如果你希望恢复演示，就必须重新启动该版本。
A.1 IDA 免费版本的限制
如果你希望使用免费版本的 IDA ，必须遵守（可能还得忍受）以下限制并容忍功能上的删减。
免费版本只能用于非商业用途。
免费版本只提供 Windows GUI 版本。
免费版本缺乏最新版本的 IDA 引入的任何特性，包括版本5.1及更高版本提供的所有 SDK与脚本功能。
启动免费版本后，将显示一个介绍最新版本 IDA 功能的帮助页面。你可以禁用此特性，以免这个页面在随后启动免费版本时显示。
与商业版本相比，免费版本附带的插件要少得多。
免费版本只能反汇编 x86 代码（它只有一个处理器模块）。
免费版本只附带 8 个加载器模块，涵盖常用的 x86 文件类型，包括 PE、ELF 、Mach-O、MS-DOS、COFF 和a.out 。同时支持以二进制格式加载文件。
免费版本仅提供少数几个常用于 x86 二进制文件的类型库，包括那些用于GNU、Microsoft和Borland编译器的类型库。
免费版本自带的 IDC 脚本要远远少于 5.0版本，而且它不提供任何 Python 脚本，因为版本5.0的发布日期要早于集成 IDAPython 的日期。
免费版本也不提供 FLAIR 工具和SDK 。
免费版本只能用于调试本地 Windows 进程或二进制文件。该版本不提供远程调试功能。
IDA 免费版本的外观与所有商业版本的外观类似。至于免费版本的功能，其行为与本书（针对商业版本的 IDA ）所介绍的行为相似（即使不是完全相同）。因此，IDA 免费版本是你决定购买IDA 之前熟悉它的最佳途径。在非商业背景下（如学术环境中），如果x86 限制不会给你造成问题，你可以利用 IDA 免费版本学习反汇编与逆向工程的基础知识。
A.2 使用IDA 免费版本
就对常见的文件进行 x86 反汇编而言，IDA 免费版本可提供你所需的全部功能。而且，IDA 5.0是第一个提供集成化图形显示模式的 IDA 版本。仅这项特性就显著提高了免费版本的功能。只有在你需要 IDA 的高级功能时，免费版本才会显得“力不从心”。这种缺陷在创建 FLIRT 签名与创建并使用 IDA 插件方面表现得尤为突出。FLAIR 实用工具（参见第 12 章）和 IDA SDK （参见第16 章）仅供 IDA 商业版本的注册用户使用，免费版本的用户很难体验到这些功能。
如果你对 FLIRT 签名感兴趣，请注意，免费版本能够处理由 4.9及更高版本的 FLAIR 实用工具生成的签名（如果你能够接触这些实用工具，或让其他人帮助你生成签名）。使用 SDK 则更加困难一些。即使你设法获得 5.0版本的IDA SDK ，使用未修改的 5.0版本SDK 编译的插件并不能与IDA 免费版本兼容。这是因为，免费版本从核心IDA 库中导出函数的方法与 SDK 所采用的方法截然不同，因此需要一组不同的导入库才能正确进行链接。针对之前的免费版本（特别是IDA 4.9），许多逆向工程论坛1
 一直在讨论这一主题。之前的解决方案需要修订版本的 SDK ，而要获得此类SDK 并不容易。到本书截稿时，在为IDA 5.0 免费版本编译插件方面，人们尚未找到切实可行的方法。因此，希望试用各种常用插件（参见第 23 章）的用户可能需要联系这些插件的作者，看他们是否有办法为他们的插件生成与 IDA 免费版兼容的二进制版本。
1. 参见http://www.woodmann.com/forum/showthread.php?t=10756
 。
附录B IDC/SDK交叉引用
表B-1 将IDC 脚本函数与它们对应的 SDK 实现对应了起来。本表旨在帮助熟悉IDC 的程序员了解如何使用 SDK 函数执行类似的操作。你需要一个这样的表，是由于两个原因：1. IDC 函数与它们对应的 SDK 函数在名称上并不完全对应；2. 有时候，一个 IDC 函数由几个SDK操作构成。本表还提供了一些方法，说明SDK 如何利用网络节点
 在IDA 数据库中存储信息。具体来说，当我们检查用于操纵数组的 IDC 函数时，我们发现实现 IDC 数组时网络节点的使用方式很明显。
本表使SDK 方面的描述尽可能简单。为此，我们省略了检查错误的代码，以及许多 C++ 语法元素（如{}括号）。许多 SDK函数通过将数据复制到调用方提供的缓冲区中来返回结果。为了简化，我们并没有声明这些缓冲区。为保持一致，这样的缓冲区被命名为 buf，许多时候，它们的大小被假定为 1024 字节，这是 IDA 6.1 SDK 的MAXSTR 常量的值。最后，在变量的使用有助于我们了解示例的地方，我们使用了变量声明。未声明的变量通常为 IDC 函数输入参数，它们在IDA 内置的帮助系统中对应的参考页面内命名。
需要注意的是，这些年来，IDC 已经有了巨大的变化。最早的 IDC 版本的主要目的是，向脚本程序员提供 SDK 的一些常用功能。随着该语言的功能不断增强，其中增加了一些用于支持高级IDC 功能（如对象和异常）的 IDC 函数。所有 IDC 函数最终都需要由 SDK 函数提供支持，因此，就像是一种角色互换，新的 IDC 功能需要新增 SDK 功能。目前，最新版本的 SDK 包含许多旨在提供IDC 对象模型的低级实现的函数。多数情况下，用户不需要从已编译的模块内使用这些函数。但是，在你通过增加新函数开发扩展 IDC 语言的插件时，可能需要用到对象操作函数。
表 B-1
IDC 函数
SDK 实现
AddAutoStkPnt2
add_auto_stkpnt2(get_func(func_ea), ea, delta);
AddBpt
//macro for AddBptEx(ea, 0, BPT_SOFT);
AddBptEx
add_bpt(ea, size, bpttype);
AddCodeXref
add_cref(From, To, flowtype);
AddConstEx
add_const(enum_id, name, value, bmask);
AddEntryPoint
add_entry(ordinal, ea, name, makecode);
AddEnum
add_enum(idx, name, flag);
AddHotkey
add_idc_hotkey(hotkey, idcfunc);
AddSeg
segment_t s;
s.startEA = startea;
s.endEA = endEA; 
s.sel = setup_selector(base); 
s.bitness = use32; 
s.align = align; 
s.comb = comb; 
add_segm_ex(&s, NULL, NULL, ADDSEG_NOSREG); 
SourceFile
add_sourcefile(ea1, ea2, filename);
StrucEx
add_struc(index, name, is_union);
StrucMember
 typeinfo_t  mt;
//calls an internal function to initialize mt using typeid
add_struc_member(get_struc(id), name, offset, flag, &mt, nbytes);
AltOp
get_forced_operand(ea, n, buf, sizeof(buf)); 
return qstrdup(buf); 
Analysis
//macro for SetCharPrm(INF_AUTO, x)
AnalyzeArea
analyze_area(sEA, eEA);
Appcall
//nargs is the number of arguments following type
//args is idc_value_t[] of args following type
idc_value_t result;
if (type.vtype == VT_LONG && type.num == 0)
    appcall(ea, 0, NULL, NULL, nargs, args, &result);
else
    idc_value_t tval, fields;