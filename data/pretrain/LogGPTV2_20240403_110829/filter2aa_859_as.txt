7.1.3.2 通过传递软件成分清单应对上游风险
应对供应链安全，下游企业和最终用户不应将自身安全寄托在供应商负责程度上，应
当以零信任的态度谨慎供应商提供的产品，建立好企业资产管理和供应链产品物料清单管
理，结合应急预案，争取在安全风险曝光的第一时间排查影响，压缩攻击入侵时间窗口，
降低影响。
7.2 开源软件安全风险 Log4j2 漏洞事件
7.2.1 事件背景及影响
Apache Log4j2 是一个开源基础日志库，作为 Log4j 组件的升级版本广泛应用于软件项目
的开发、测试和生产，在 Maven Repository 中被接近 7000 个项目引用。Log4j2 具有 “Property 
Support”特性，该特性在打印日志时支持从配置文件、系统变量、环境变量、线程 Context
以及事件中存在的数据中引用所需的变量到日志中。而在支持该特性的 org.apache.logging.
log4j.core.lookup 包中提供了一系列的插件，允许用户从自定义渠道获取属性。而问题就在
于包中的 JndiLookup 插件允许用户通过 JNDI 进行变量的检索，但是未对查询地址做好过滤，
导致产生 JNDI 注入漏洞，从而造成代码执行、命令执行等风险。
对于开源组件，自身漏洞对整个软件供应链的影响最为直接、隐秘且长久。Log4j2 作为
一个堪比标准库的基础日志库，受众极其广泛，也就导致漏洞的影响范围极大，再加上此次
软件供应链安全技术白皮书
089
曝出的漏洞利用难度低（默认配置即可利用），在曝光伊始就吸引了整个行业的注意。
7.2.2 攻击流程分析
表 7.2 Log4j2 事件供应链攻击技术与脆弱性
生命周期
安全风险发生阶段
攻击技术
开源安全
开源代码安全
直接或间接包含的漏洞、缺陷代码
开源组件、框架稳健性
活跃度、维护能力、安全修复能力与应对意识
开发安全
开发环境安全
开发工具污染
开发环境污染
托管平台、代码存储平台污染
开发过程安全
使用开源组件引入漏洞风险
编译构建安全
包管理工具安全
Log4j2 漏洞（CVE-2021-44228/CVE-2021-45046）目前常见攻击形式有勒索、挖矿、僵
尸网络（以及 DDOS）。现有的在野攻击案例通常攻击链短、攻击手段粗暴直接，但考虑到
漏洞曝出时日尚短，不排除以该漏洞为切入点的大型供应链攻击出现的可能。
图 7.2 Log4j2 事件潜在攻击流程图
7.2.3 问题分析
Log4j2 漏洞是来自于开源组件的软件供应链威胁。与其他案例相比，Log4j2 漏洞相关攻
击事件的目标分布广泛且攻击链极短，究其原因在于该组件极广的应用范围与较低的漏洞利
用难度。
企业开源安全管控，既应涵盖直接依赖组件的漏洞，也应关注间接依赖组件漏洞。直接
依赖主要发生于组件的集成构建阶段，Log4j2 作为基础组件集成到一些核心业务组件中，核
心业务进而被感染，增加了攻击面。此阶段的依赖关系相对清晰，一旦发现漏洞，相对来说
090
典型供应链攻击案例复盘
容易排查。
而间接依赖的组件的情况则更为复杂，随着软件系统架构愈加庞大，组件之间依赖关系
也更难理清，因而漏洞曝出时系统自身的复杂性就会掩盖影响，导致来自间接依赖的攻击面
被忽略。此阶段往往需要进行大规模的分析排查，以抽丝剥茧的态度将各种依赖关系理清。
站在攻击、防御的角度也同样如此，通过 hook、fuzz 等方式测试组件的调用深度，定位被隐
藏的触发点。
由于次级供应商在单个上下游环节中可以视为消费者，在组件依赖关系不明确的情况下
只能将复杂系统看作黑盒，对其包含的组件风险一无所知，因而在处理漏洞时更为被动。此
时只能靠有责任心的软件提供商提供运维支持服务。若软件提供商响应不及时或漏洞应急流
程不完善，只能依靠社区建议及旁路的安全设备来进行临时缓解。
7.2.4 利用开源软件成分清单识别间接组件漏洞
Log4j2 漏洞之所以影响严重，是因为它在许多项目中以基础设施的身份存在。随着项目
结构体积逐渐庞大，引入组件的来源增多，项目结构、依赖关系也越加复杂，也就越难发现
隐藏较深的间接组件。相比针对开源机制的攻击手段，比如开发工具污染、依赖混淆等，
依靠企业现有技术手段很难规避这类间接组件漏洞风险，重点应放在应急响应上。在漏洞
曝出的第一时间，基于开源软件成分清单识别间接组件漏洞，对于快速研判影响、制定决
策至关重要。
企业应建立开源组件安全评估与风险响应能力，在代码构建时，通过 SCA 工具对项目的
第三方组件依赖进行漏洞分析，规避已知的漏洞风险；同时应留存更新的软件成分清单，当
出现安全事件时只需花少量时间、算力，就可以定位漏洞（问题组件）所在，加快排查速度，
辅助决策，减少损失。
监管层面，应建立开源组件安全监测管理，涵盖四个方面：外防输入、存量治理、内
控扩散、持续监测。外防输入即摒除带有漏洞的软件版本，严格控制外部引入风险；存量
治理，即制定差异化的策略，分批有序开展治理；内控扩散，建立组件的灰白黑名单机制，
按需管控；持续监测即持续监测漏洞情报，做好应急流程。概括起来就是要做到严格管理
软件风险、因地制宜制定策略、居安思危防范于未然这三点。在 Log4j2 事件中，考虑到该
组件的基础地位，以及应用范围之广，本应重视其安全监测管理，可惜业界没有保有足够
的警惕，既没有制定合适的治理策略，也未安排好应急流程，拖慢了应急响应的步伐，只
得自行承担后果。
8
软件供应链安全总结与展望
092
软件供应链安全总结与展望
美国引领了信息化时代的发展，长期主导全球信息技术发展方向，其软件供需模式与供
应链管理发展动向对全球软件产业发展具有重要影响。目前，美国正在政府和私营部门合作
伙伴之间建立完善软件供应链安全方法论和最佳实践。这将对我国软件产业发展有着巨大的
参考价值，结合此次西方阵营针对俄罗斯发动的大规模“断供”，其行为也为我国提供了充
足的研究案例，对建立健全我国软件供应链安全治理体系具有重要的参考意义。
软件供应链安全技术白皮书
093
附表 ：
软件供应链安全风险表
软件供应链安全生命周期
安全风险发生阶段
攻击技术
上游安全
上游企业安全问题
内部漏洞
外部攻击
关键数据泄露（如证书）
软件供应链中断
SaaS、PaaS 等服务中断
软件更新、维护服务中断
开源安全
开源代码安全
直接或间接包含的漏洞、缺陷代码，恶意代码注入，等
开源使用安全
恶意抢注攻击等
开源项目维护稳健性
活跃度、维护能力、安全修复能力与应对意识
知识产权
许可证授权风险
开发安全
开发环境安全
开发工具污染
开发环境污染
CI/CD 集成环境污染
托管平台、代码存储平台污染
开发过程安全
内部漏洞、缺陷
编码过程不符合规范
遭受外部攻击
使用开源组件引入风险
恶意代码植入
编译构建安全
依赖库路径抢注
编译工具植入后门
包管理工具安全
交付使用安全
下载过程安全
升级、更新劫持
捆绑下载
交付范围扩大
代码、编译信息泄漏
证书、私钥泄漏
使用安全
依赖网络基础设施安全
依赖云平台安全
094
参与单位
天元实验室
专注于新型实战化攻防对抗技术研究。
研究目标包括：漏洞利用技术、防御绕过技术、攻击隐匿技术、攻击持久化技术等蓝军技术，
以及攻击技战术、攻击框架的研究。涵盖 Web 安全、终端安全、AD 安全、云安全等多个技
术领域的攻击技术研究，以及工业互联网、车联网等业务场景的攻击技术研究。通过研究攻
击对抗技术，从攻击视角提供识别风险的方法和手段，为威胁对抗提供决策支撑。
天枢实验室
天枢实验室立足数据智能安全前沿研究，一方面运用大数据与人工智能技术提升攻击检
测和防护能力，另一方面致力于解决大数据和人工智能发展过程中的安全问题，提升以攻防
实战为核心的智能安全能力。