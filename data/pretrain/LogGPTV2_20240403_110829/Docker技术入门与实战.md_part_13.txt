### 第二部分 实战案例

#### 1. Docker 构建示例

在本节中，我们将通过一个具体的实战案例来演示如何使用 Docker 构建和运行一个包含 Apache 和 SSH 服务的容器。

##### 1.1 准备文件
- **sample**：包含自定义的 `index.html` 文件。
- **run.sh**：启动脚本。
- **Dockerfile**：用于构建镜像的配置文件。

##### 1.2 Dockerfile 内容
```dockerfile
# 使用 sshd:dockerfile 作为基础镜像
FROM sshd:dockerfile

# 设置环境变量
ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2
ENV APACHE_PID_FILE /var/run/apache2.pid
ENV APACHE_LOCK_DIR /var/lock/apache2
ENV APACHE_RUN_DIR /var/run/apache2
ENV APACHE_DOCUMENTROOT /var/www
ENV APACHE_SERVERNAME localhost
ENV APACHE_SERVERALIAS docker.localhost
ENV APACHE_SERVERADMIN admin@localhost

# 安装必要的软件包
RUN apt-get update && \
    apt-get install -y apache2 && \
    rm -rf /var/lib/apt/lists/*

# 添加自定义的 run.sh 脚本并设置权限
ADD run.sh /run.sh
RUN chmod +x /run.sh

# 挂载目录
VOLUME ["/etc/nginx/certs", "/etc/nginx/conf.d", "/var/lib/nginx", "/var/log/nginx"]

# 设置时区
RUN echo "Asia/Shanghai" > /etc/timezone && \
    dpkg-reconfigure -f noninteractive tzdata

# 定义工作目录
WORKDIR /app

# 定义启动命令
CMD ["/run.sh"]
```

##### 1.3 run.sh 脚本内容
```bash
#!/bin/bash
# 启动 SSH 服务
/usr/sbin/sshd &

# 启动 Apache 服务
exec apache2 -D FOREGROUND
```

##### 1.4 构建镜像
```sh
$ sudo docker build -t apache:ubuntu .
```

##### 1.5 运行容器
```sh
$ sudo docker run -d -P --name my-apache-app -v $(pwd)/www:/var/www:ro apache:ubuntu
```

##### 1.6 验证
在本地主机上用 `curl` 抓取网页来验证刚才创建的 sample 站点：
```sh
$ curl http://localhost:$(sudo docker port my-apache-app 80 | cut -d: -f2)
```

#### 2. Nginx 镜像生成

##### 2.1 Nginx Dockerfile 内容
```dockerfile
# 使用 sshd:dockerfile 作为基础镜像
FROM sshd:dockerfile

# 安装 Nginx 并设置非守护进程模式
RUN apt-get update && \
    apt-get install -y nginx && \
    echo "\ndaemon off;" >> /etc/nginx/nginx.conf && \
    rm -rf /var/lib/apt/lists/*

# 添加自定义的 run.sh 脚本并设置权限
ADD run.sh /run.sh
RUN chmod +x /run.sh

# 设置时区
RUN echo "Asia/Shanghai" > /etc/timezone && \
    dpkg-reconfigure -f noninteractive tzdata

# 定义工作目录
WORKDIR /etc/nginx

# 挂载目录
VOLUME ["/etc/nginx/certs", "/etc/nginx/conf.d", "/var/lib/nginx", "/var/log/nginx"]

# 定义输出端口
EXPOSE 80 443

# 定义启动命令
CMD ["/run.sh"]
```

##### 2.2 run.sh 脚本内容
```bash
#!/bin/bash
# 启动 SSH 服务
/usr/sbin/sshd &

# 启动 Nginx 服务
exec /usr/sbin/nginx -g "daemon off;"
```

##### 2.3 构建镜像
```sh
$ sudo docker build -t nginx:stable .
```

##### 2.4 运行容器
```sh
$ sudo docker run -d -P --name my-nginx-app -v $(pwd)/www:/var/www:ro nginx:stable
```

##### 2.5 验证
访问本地的映射端口：
```sh
$ curl http://localhost:$(sudo docker port my-nginx-app 80 | cut -d: -f2)
```

### 总结
通过以上步骤，我们成功地构建了包含 Apache 和 Nginx 的 Docker 镜像，并且能够通过 Docker 容器运行这些服务。希望这个实战案例能帮助你更好地理解和使用 Docker。