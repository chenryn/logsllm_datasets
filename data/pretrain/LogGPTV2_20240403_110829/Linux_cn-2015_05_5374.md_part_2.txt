### 心血漏洞（Heartbleed）
 心血漏洞   （    Heartbleed    ）  是一个于2014年4月公布的 OpenSSL 加密库的漏洞，它是一个被广泛使用的传输层安全（TLS）协议的实现。无论是服务器端还是客户端在 TLS 中使用了有缺陷的 OpenSSL，都可以被利用该缺陷。由于它是因 DTLS 心跳扩展（RFC 6520）中的输入验证不正确（缺少了边界检查）而导致的，所以该漏洞根据“心跳”而命名。这个漏洞是一种缓存区超读漏洞，它可以读取到本不应该读取的数据。
哪个版本的 OpenSSL 受到 心血漏洞   （    Heartbleed    ） 的影响？
各版本情况如下：
* OpenSSL 1.0.1 直到 1.0.1f （包括）**存在**该缺陷
* OpenSSL 1.0.1g **没有**该缺陷
* OpenSSL 1.0.0 分支**没有**该缺陷
* OpenSSL 0.9.8 分支**没有**该缺陷
这个缺陷是2011年12月引入到 OpenSSL 中的，并随着 2012年3月14日 OpenSSL 发布的 1.0.1 而泛滥。2014年4月7日发布的 OpenSSL 1.0.1g 修复了该漏洞。
升级你的 OpenSSL 就可以避免该缺陷。
### SSL 压缩（罪恶攻击 CRIME）
 罪恶攻击   （    CRIME    ） 使用 SSL 压缩来完成它的魔法，SSL 压缩在下述版本是默认关闭的： nginx 1.1.6及更高/1.0.9及更高（如果使用了 OpenSSL 1.0.0及更高）， nginx 1.3.2及更高/1.2.2及更高（如果使用较旧版本的 OpenSSL）。
如果你使用一个早期版本的 nginx 或 OpenSSL，而且你的发行版没有向后移植该选项，那么你需要重新编译没有一个 ZLIB 支持的 OpenSSL。这会禁止 OpenSSL 使用 DEFLATE 压缩方式。如果你禁用了这个，你仍然可以使用常规的 HTML DEFLATE 压缩。
### SSLv2 和 SSLv3
SSLv2 是不安全的，所以我们需要禁用它。我们也禁用 SSLv3，因为 TLS 1.0 在遭受到降级攻击时，会允许攻击者强制连接使用 SSLv3，从而禁用了 前向安全性   （    forward secrecy    ） 。
如下编辑配置文件：
```
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
```
### 卷毛狗攻击（POODLE）和 TLS-FALLBACK-SCSV
SSLv3 会受到[卷毛狗漏洞（POODLE）](https://raymii.org/s/articles/Check_servers_for_the_Poodle_bug.html)的攻击。这是禁用 SSLv3 的主要原因之一。
Google 提出了一个名为 [TLS\_FALLBACK\_SCSV](https://tools.ietf.org/html/draft-ietf-tls-downgrade-scsv-00) 的SSL/TLS 扩展，它用于防止强制 SSL 降级。如果你升级 到下述的 OpenSSL 版本会自动启用它。
* OpenSSL 1.0.1 带有 TLS\_FALLBACK\_SCSV 1.0.1j 及更高。
* OpenSSL 1.0.0 带有 TLS\_FALLBACK\_SCSV 1.0.0o 及更高。
* OpenSSL 0.9.8 带有 TLS\_FALLBACK\_SCSV 0.9.8zc 及更高。
[更多信息请参照 NGINX 文档](http://wiki.nginx.org/HttpSslModule#ssl_protocols)。
### 加密套件（cipher suite）
 前向安全性   （    Forward Secrecy    ） 用于在长期密钥被破解时确保会话密钥的完整性。 完备的前向安全性   （    PFS，Perfect Forward Secrecy    ） 是指强制在每个/每次会话中推导新的密钥。
这就是说，泄露的私钥并不能用来解密（之前）记录下来的 SSL 通讯。
提供 完备的前向安全性   （    PFS，Perfect Forward Secrecy    ） 功能的是那些使用了一种 Diffie-Hellman 密钥交换的短暂形式的加密套件。它们的缺点是系统开销较大，不过可以使用椭圆曲线的变体来改进。
以下两个加密套件是我推荐的，之后[Mozilla 基金会](https://wiki.mozilla.org/Security/Server_Side_TLS)也推荐了。
推荐的加密套件：
```
ssl_ciphers 'AES128+EECDH:AES128+EDH';
```
向后兼容的推荐的加密套件（IE6/WinXP）：
```
ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
```
如果你的 OpenSSL 版本比较旧，不可用的加密算法会自动丢弃。应该一直使用上述的完整套件，让 OpenSSL 选择一个它所支持的。
加密套件的顺序是非常重要的，因为其决定了优先选择哪个算法。上述优先推荐的算法中提供了PFS（完备的前向安全性）。
较旧版本的 OpenSSL 也许不能支持这个算法的完整列表，AES-GCM 和一些 ECDHE 算法是相当新的，在 Ubuntu 和 RHEL 中所带的绝大多数 OpenSSL 版本中不支持。
#### 优先顺序的逻辑
* ECDHE+AESGCM 加密是首选的。它们是 TLS 1.2 加密算法，现在还没有广泛支持。当前还没有对它们的已知攻击。
* PFS 加密套件好一些，首选 ECDHE，然后是 DHE。
* AES 128 要好于 AES 256。有一个关于 AES256 带来的安全提升程度是否值回成本的[讨论](http://www.mail-archive.com/PI:EMAIL/msg11247.html)，结果是显而易见的。目前，AES128 要更值一些，因为它提供了不错的安全水准，确实很快，而且看起来对时序攻击更有抵抗力。
* 在向后兼容的加密套件里面，AES 要优于 3DES。在 TLS 1.1及其以上，减轻了针对 AES 的 野兽攻击   （    BEAST    ） 的威胁，而在 TLS 1.0上则难以实现该攻击。在非向后兼容的加密套件里面，不支持 3DES。
* RC4 整个不支持了。3DES 用于向后兼容。参看 [#RC4\_weaknesses](https://wiki.mozilla.org/Security/Server_Side_TLS#RC4_weaknesses) 中的讨论。
#### 强制丢弃的算法
* aNULL 包含了非验证的 Diffie-Hellman 密钥交换，这会受到 中间人   （    MITM    ） 攻击
* eNULL 包含了无加密的算法（明文）
* EXPORT 是老旧的弱加密算法，是被美国法律标示为可出口的
* RC4 包含的加密算法使用了已弃用的 ARCFOUR 算法
* DES 包含的加密算法使用了弃用的数据加密标准（DES）
* SSLv2 包含了定义在旧版本 SSL 标准中的所有算法，现已弃用
* MD5 包含了使用已弃用的 MD5 作为哈希算法的所有算法
### 更多设置
确保你也添加了如下行：
```
ssl_prefer_server_ciphers on;
ssl_session_cache shared:SSL:10m;
```
在一个 SSLv3 或 TLSv1 握手过程中选择一个加密算法时，一般使用客户端的首选算法。如果设置了上述配置，则会替代地使用服务器端的首选算法。