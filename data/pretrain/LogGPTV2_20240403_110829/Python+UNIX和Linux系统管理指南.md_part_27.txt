drwxr-xr-x 2 ngift wheel 68 Mar 31 22:27 test_subdir2/
drwxr-xr-x 3 ngift wheel 102 Mar 31 22:27 test_subdir1/
In [2]: os.chdir("/tmp")
In[1]:import os
例6-2：使用shutil模块复制数据树
请参考Python标准库文档，查看不同的shutil copy方法之间的差别。
将用到shutil.copytree，而shutil还有许多其他的方法，能够完成一些不同的功能。
在IPython中尝试使用shutil模块是一个熟悉该工具的有效途径。在下面的示例中，我们
shutil模块具有复制、移动、重命名和删除数据的方法。但是它可以在整个数据树上执
我们再来学习一个高层模块shutil，该模块能够处理大规模数据。与OS模块十分相似，
既然在引言中已经提到了数据迁移，你现在也对如何使用OS模块有了一定认识，那么，
拷贝、移动、重命名和删除数据
用IPython的tab自动完成功能来查看OS模块的可用方法。
用到的，包括更改权限，创建符号连接等。请参考当前使用Python版本的文档，或者使
无论如何，我们都需要详细地看一下OS模块。OS模块中有许多方法是处理数据时可能
line[9]，对目录是否创建进行了验证，最后使用or.rmdir方法删除了创建的目录。
os.stat()，这与Bash中的stat命令非常相似()，之后在line[8]对目录重新命名。在
建了一个目录。在line[4]使用了os.listdir列出新创建目录的内容。接下来，执行了
可以看到，加载了OS模块之后，在line[2]获得了当前的工作目录。之后，在line[3]创
184
drwxr-xr-x 3 ngift wheel 102 Mar 31 22:27 test/
totalo
In [19]: ls -1R
In [5]: import shutil
./test/test_subdir1/test_subdir2:
./test/test_subdir1:
drwxr-xr-x 3ngift wheel102Mar3122:27 test/
In[4]:1s-1R
行操作。
/test:
cotal0
第6章
www.TopSage.com
---
## Page 199
drwxr-xr-x 3 ngift wheel 102 Mar 31 22:27 test_subdir1/
./test-copy-moved:
./test/test_subdir1/test_subdir2:
drwxr-x1-x 2 ngift wheel 68 Mar 31 22:27 test_subdir2/
drwxr-xr-x 3 ngift wheel 102 Mar 31 22:27 test_subdir1/
drwxr-xr-x 3 ngift wheel 102 Mar 31 22:27 test-copy-moved/
drwxr-xr-x 3 ngift wheel 102 Mar 31 22:27 test/
 In [2o]: shutil.move("test-copy", "test-copy-moved")
./test/test_subdir1:
例6-3：使用shuti移动数据树
树的移动，例6-4显示了数据树的删除。
shuti1模块不仅能够复制文件，它还有一些移动和删除数据树的方法。例6-3显示了数据
total0
totalo
total0
In[21]:ls -1R
或者直接将目录移动到具有快速I/O的磁盘上，便于回放未经压缩的HD胶片。
到已经达到指定的帧数目时，可以将该目录移动到另一个帧可以在其中被处理的目录，
total0
我们可以在cron任务中编写脚本查看目录中的帧数是整否达到了“x”.个。当cron任务看
./test:
才能将全部图像转换成序列进行编辑。
一个文件系统转移动另一个文件系统。在动画环境中，经常需要等最后一帧完成之后，
平台的数据移动脚本。我们能够想到的这类代码的直接用途，是在事件驱动下将数据从
很明显，本示例非常简单，但极为有用。可以非常容易地将这类代码封装成更复杂且跨
./test-copy/test_subdir1/test_subdir2:
drwxr-xr-x 2 ngift wheel 68 Mar 31 22:27 test_subdir2/
./test-copy/test_subdir1:
drwxr-xr-x 3 ngift wheel 102 Mar 31 22:27 test_subdir1/
total0
./test-copy:
./test/test_subdir1/test_subdir2:
drwxx-xr-x 2 ngift wheel 68 Mar 31 22:27 test_subdir2/
./test/test_subdir1:
drwxr-xr-x 3 ngift wheel 102 Mar 31 22:27 test_subdir1/
totalo
total0
./test:
www.TopSage.com
数据丨185
---
## Page 200
是，本章中正好有一个在Python中完成这类工作的示例。
络存储空间复制一个目录树，并创建一个时间戳记录，这类脚本会非常有用。幸运的
移动数据树要比删除数据树更令人激动，因为在删除之后不会有任何显示。多个这类简
In [23]: shutil.rmtree("test-copy")
 In [22]: shutil.rmtree("test-copy-moved")
In[24]:11
例6-4：使用shutil删除数据树
./test-copy-moved/test_subdir1/test_subdir2:
drwxr-xr-x 2 ngift wheel 68 Mar 31 22:27 test_subdir2/
录遍历脚本，具有返回明确的文件、目录和路径的功能。
的“连电池都包括在内”的特性。例6-5显示了如何创建一个额外的余（verbose）目
通常，Python的标准库有一些杀死工具，可以停止作业的执行。Python最出名的就是它
些能够实现这些操作的有趣方法。
具，该工具可以浏览目录，完成条件搜索，做一些有返回结果的操作。下面将要讨论一
使用路径、
total0
./test-copy-moved/test_subdir1:
import os
return file_collection
file_collection =[]
return path_collection
path_collection = []
例6-5：见余目录遍历脚本
不考虑路径、
186
for
第6章
目录和文件是无法处理数据的。每一名系统管理员都需要至少会写一个工
目录和文件
, filenames in os.walk(path):
www.TopSage.com
ODG
---
## Page 201
在一台Mac笔记本中，该脚本的输出结果如下所示：
for dir in enumeratedir(）:
return dir_collection
for dirpath, dirnames, filenames in os.walk(path):
dir_collection=[]
print dir
print file
print path
Recursive listing of all dirs in dir:
LitenDeplicationReport.csv
[ngift@Macintosh-7][H:12022][J:0]# python enumarate_file_dir_path.py
for dir in dirnames:
launch-h36okI
hsperfdata_ngift
.X11-unix:
sock
Listeners
Render
58920
liten.py
error.txt
com.hp.launchport
ARD_ABJMMRT
aksusb
Recursive listing of all files in dir:
Recursive listing of all paths in a dir:
/tmp/launchd-150.wDv0D1/sock
/tmp/ARD_ABJMMRT
name
tmp/launch-RTJzTw/:0
tmp/LitenDeplicationReport.csv
tmp/liten.py
tmp/error.txt
tmp/com.hp.launchport
tmp/.aksusb
dir_collection.append(dir)
main
www.TopSage.com
数据丨187
ODG
---
## Page 202
API返回文件、
再来多看一点有关generator的细节。让我们首先创建一个cleaner模块，该模块将通过
generatorsl)
generator对于系统编程非常有用。请访问David Beazely的网站（http://www.dabeaz.com/
这里不会介绍generator的细节，
递了值，你可以自行遍历目录树。
需要注意一点，os.walk返回的是一个generator对象，因此，如果在调用时向os.walk传
这是在IPython中运行示例的情形。
188
Out[3]:[generator object at ox508e18]
In [2]:import os
Out[3]: [generator object at ox508e18]
In [3]: os.walk("/tmp")
In[2]:import os
ssh-YcE2t6Pfno
launchd-150.wDvoD1
launch-RTJzTw
launch-qy159c
In [4]: path = os.walk("/tmp")
第6章
ssh-YcE2t6Pfn0'],
Out[
品
path._class
In [5]: path.
ngift.liten.log'])
liten.py'
error.txt',
com.hp.launchport',
'.aksusb',
launch-RTJzTw',
，在那里你可以找到需要了解的相关内容。
目录及路径。
delattr
，但需要知道os.walk返回的是一个generator对象。
www.TopSage.com
，注意，
iter_
，使用generator使我们能够调用path.next()。
path.gi_frame
path.throw
path.send
path.gi_running
---
## Page 203
importos
似问题的答案。
什么差别？系统中有多少个重复的文件存在？”在这一节中，你会找到这些问题或是类
数据比较对系统管理员非常重要。你或许会经常问自己，
数据比较
这个新模块的优点之一是可以将其载人到其他脚本中。
可以看到，进行少量修改之后，能够创建一个非常好的接口，以方便将来进一步修改。
def enumerateFiles(self):
class diskwalk(object):
例6-6：创建可复用的目录浏览模块
旦完成创建，就可以将其作为可复用的通用模块，使用起来非常简单方便。参见例6-6。
的模块，以便于加载和复用。也许需要花些工夫才能创建一个固定编码的模块，但是一
现在，我们遍历了一个非常基本的目录，接下来要考虑的是如何将其变成一个面向对象
return dir_collection
def
dir_collection=[]
return file_collection
for
return path_collection
for dir in dirnames:
for file
for
dir_collection.append(dir)
file_collection.append(file)
file in filenames:
filenames in os.walk(self.path):
, filenames in os.walk(self.path):
www.TopSage.com
“这两个目录中的文件到底有
数据丨189
---
## Page 204
要全面理解filecmp如何工作，需要创建三个新文件。先将目录切换到/tmp目录下，创
返回False。典型地，os.stat判断两个文件是否使用同一磁盘上相同的i节点，或者它
行os.stat，如果os.stat对两个文件的判断结果相同，则返回True，如果结果不同，则
filecomp模块包括执行快速有效的文件和目录比较函数。filecmp模块会在两个文件上执
使用filecmp模块
比较。Python标准库有许多模块支持比较操作，这里将介绍filecmp和OS.Listdir。
本节首先介绍一些轻量级的文件和目录进行比较的方法，最后介绍如何对文件进行校验
编写了一个会损坏关键生产数据的大数据块迁移脚本。
的。如果正要编写大块数据的迁移脚本，这会变得十分关键。一种非常糟糕的情况就是
在处理大批量的重要数据时，对目录树和文件进行比较以找到其中的差异是非常重要
可以看到，在对file0.txt和file00.txt进行比较时，cmp函数返回True。在对filel.txt和file0.
文件，并在该文件中写入数字“1”。最后，创建名为file00.txr的文件，并写入数字
建一个名为file0.txr的文件，并在文件中写入数字“o”。接下来，创建名为filel.txr的
们的大小是否相等，但实际上并没有比较文件的内容。
txt的文件，并且在其中放人数字“11”：
录，从先前的示例中复制文件到每一个目录中。在dirB中，我们创建了另一个名为filell.
都进行介绍，但是我们创建了一些非常有用的示例。例如，在目录/tmp中创建两个子目
dircmp函数有一些属性，这些属性可以报告目录树之间的差异。这里不会对每一个属性
txt进行比较时返回False。
1901
“0”。我们将在下面的示例代码中使用这几个文件。
In [2]: filecmp.cmp("fileo.txt", "file1.txt")
In [1]:import filecmp
In [4]: filecmp.dircmp("dirA", "dirB").same_files
In [3]: filecmp.dircmp("dirA", "dirB").diff_files
In [1]: import filecmp
Out[4]: ['file1.txt',
Out[2]: False
第6章
True
'file00.txt'，‘
www.TopSage.com
'fileo.txt']
---
## Page 205
目录之间差异并进行内容合并的方法。
0字节，而另一个同名的文件却有200G。在下一节中，我们将介绍一个更好的查找两个
但是，这个方法也有很大的局限性。当两个文件同名时会导致错误。例如一个文件只有
后对差异进行复制。我们在下一章中将讨论数据的合并。
地创建两个数据结构的合并，具体做法是：参照另一个目录减去一个目录的全路径，然
在line[6]中之所以结果为空，是因为dirA包含了dirB的全部内容。使用集合也可以方便
操作来查找差异。注意，line[7]之所以返回了filell.txt，是因为dirB是dirA的超集。而
这个示例中，我们使用了一个简洁的技巧来将两个列表转换为集合，然后对集合进行减
目录自身的差异。下面是一个示例，显示了在IPython中是如何实现的：
你可以通过将列表转换为一个集合后从一个集合中去掉另一个，使用os.listdir来查看
该命令返回找到的文件列表。因为Python支持许多可以对列表进行处理的有趣的方法，
另外一个轻量级的自录比较方法是使用os.listdir。你可以将os.listdir视为ls命令，
使用os.list
得全面的知识，以弥补本书中介绍的不足。
是对filecmp模块功能作了一个简单介绍，因此我们建议你查阅Python标准库文档从而获
告。最后，我们对上一示例生成了一个报告，包括了两个目录之间差异的细目。这里仅
接下来查看一下same_files的输出结果，注意，它仅对两个目录中的相同文件进行报
是diff_files没有匹配。原因是diff_files仅对文件名相同的文件进行比较。
你或许有点奇怪，尽管我们创建了filell.txt文件，且该文件中的信息是独一无二的，但
In [6]: dirA - dirB
Out[5]: set(I'file1.txt', 'fileo0.txt', 'file11.txt', 'file0.txt'])
In [5]: dirB
In [4]: dirB = set(os.listdir("/tmp/dirB"))
In [2]: dirA = set(os.listdir("/tmp/dirA"))
In [1]:import os
Only in dirB
In [5]: filecmp.dircmp("dirA", "dirB").report()
diff
dirA dirB
['file11.txt']
，'fileo0.txt'，‘file1.txt']
www.TopSage.com