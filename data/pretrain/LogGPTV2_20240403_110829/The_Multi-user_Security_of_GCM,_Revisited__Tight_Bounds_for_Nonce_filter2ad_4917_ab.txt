3For ease of comparison and to their advantage, we are replacing q(cid:96) used by BT, where (cid:96) is the maximal block
length of an encrypted/veriﬁed message, with σ.
5
An alternative construction, which reﬂects what is adopted in TLS 1.2, for example, is what we
refer to as CN. Here, for a parameter t  0, our bound is of the order
upσ
2k+n +
upq
2k+r .
We show a much stronger bound, crucially also taking into account veriﬁcation queries. As long
u2 + 40p
+
2k
n(p + σ)
2k
+
σB
2n +
σ2 + pq
2k+n
.
(1)
Public Salting. The XN and CN constructions reﬂect practical usage, and keep the value J secret.
However, as we discuss brieﬂy below in the paper, our result in the d-bounded model enables us to
give a much stronger result which does not require J to be secret at all, as long as nonces are not
chosen arbitrarily by the adversary.
For example, if each user encrypts using nonces Ji ⊕ 0, Ji ⊕ 1, Ji ⊕ 2, . . . and makes nonces
public (thus Ji is known to the adversary for each i), we can think of this as a particular adversary
attacking AE security of GCM and using such nonces. Then, our bound on GCM implies similar
security as that of RGCM without making J secret (thus saving on key length). In particular, our
bound holds even if the attacker attempts veriﬁcation queries with arbitrary repeating nonces.
The ideal-cipher model. This paper relies on ideal models, and in particular, the ideal-cipher
model, for its analyses. This is a common trait of most analyses in the mu regime–one issue is
that we are particularly concerned here with how local computation (approximated by the p ideal
cipher queries) aﬀects security, and classical assumptions on blockciphers (PRP security) are not
helpful in making this type of statements.
2 Preliminaries
Notation. Let ε denote the empty string. For a ﬁnite set S, we let x ←$ S denote the uniform
sampling from S and assigning the value to x. Let |x| denote the length of the string x, and
6
for 1 ≤ i  0.
7
A
Π[E]
Game Real
K1, K2,··· ←$ K; b(cid:48) ←$ AEnc,Vf,Prim; return b(cid:48)
procedure Enc(i, N, A, M )
return EKi(N, A, M )
procedure Vf(i, N, A, C)
V ← DKi(N, A, C); return (V (cid:54)= ⊥)
procedure Prim(J, X)
if X = (+, x) then return EJ (x)
if X = (−, y) then return E−1
J (y)
A
Π[E]
Game Rand
b(cid:48) ←$ AEnc,Vf,Prim; return (b(cid:48) = 1)
procedure Enc(i, N, A, M )
C ←$ {0, 1}|M|+λ; return C
procedure Vf(i, N, A, C)
return false
procedure Prim(J, X)
if X = (+, x) then return EJ (x)
if X = (−, y) then return E−1
J (y)
Figure 1: Games deﬁning the multi-user security of an AE scheme Π. This scheme is
based on a blockcipher E : {0, 1}k × {0, 1}n → {0, 1}n. We assume that under the scheme Π, the
ciphertext is always λ-bit longer than the message.
The H-coefficient technique. We now describe the H-coeﬃcient technique of Patarin [19, 8].
Generically, it considers a deterministic distinguisher A that tries to distinguish a “real” system Sreal
from an “ideal” system Sideal. The adversary’s interactions with those systems deﬁne transcripts
Treal and Tideal, respectively, and a bound on the distinguishing advantage of A is given by the
statistical distance SD(Treal,Tideal).
Lemma 2.1 [19, 8] Suppose we can partition the set of valid transcripts for the ideal system into
good and bad ones. Further, suppose that there exists  ≥ 0 such that 1 − pSreal
pSideal
good transcript τ . Then,
(τ ) ≤  for every
(τ )
SD(Tideal,Treal) ≤  + Pr[Tideal is bad] .
3 Multi-security of GCM
In this section, we consider the mu security of authenticated encryption (AE) construction CAU [5],
which includes GCM as a special case. CAU loosely follows the encrypt-then-MAC paradigm,
where the encryption scheme is the CTR mode on a blockcipher E : {0, 1}k × {0, 1}n → {0, 1}n,
and the MAC is the Carter-Wegman construction via an almost XOR-universal (AXU) hash. We
begin by recalling the deﬁnition of AXU hash functions.
AXU hash. Recall that for a string x, the block length |x|n of x is deﬁned as max{1,(cid:100)|x|/n(cid:101)}. We
call H : K×{0, 1}∗×{0, 1}∗ → {0, 1}n a c-AXU hash if for any (M, A) (cid:54)= (M(cid:48), A(cid:48)) in {0, 1}∗×{0, 1}∗,
and any z ∈ {0, 1}n,
K ←$ K[HK(M, A)⊕HK(M(cid:48), A(cid:48)) = z] ≤ c · max{|M|n + |A|n,|M(cid:48)|n + |A(cid:48)|n}
Pr
2n
.
3.1 The CAU Scheme
Let E : {0, 1}k × {0, 1}n → {0, 1}n be a blockcipher. Let H : {0, 1}n × ({0, 1}∗ × {0, 1}∗) → {0, 1}n
be a c-AXU hash. The nonce space N of CAU is {0, 1}r, for r < n, and its key space is {0, 1}k.
For a string Z ∈ N , we write pad(Z) to refer to the string Z0n−r−11. The message space is the set
of binary strings whose block length is strictly less than 2n−r − 1.
8
procedure CAU.Enc(K, N, A, M )
// 0 ≤ |M(cid:96)| < n, and |Mi| = n otherwise
Y ← pad(N ); M1 ··· M(cid:96) ← M
// Encrypt with CTR mode and IV Y + 1
for i = 1 to (cid:96) − 1 do Ci ← Mi⊕EK(Y + i)
V ← EK(Y + (cid:96)); C(cid:96) ← M(cid:96)⊕V [1 : |M(cid:96)|]
C ← C1 ··· C(cid:96)
// Use Carter-Wegman with H
L ← EK(0n); T ← HL(A, C)⊕EK(Y )
return T (cid:107) C
procedure CAU.Dec(K, N, A, T (cid:107) C)
L ← EK(0n); Y ← pad(N )
// 0 ≤ |C(cid:96)| < n, and |Ci| = n otherwise
C1 ··· C(cid:96) ← C; T (cid:48) ← HL(A, C)⊕EK(Y )
if T (cid:54)= T (cid:48) then return ⊥
// Decrypt with CTR mode and IV Y + 1
for i = 1 to (cid:96) − 1 do Mi ← Ci⊕EK(Y + i)
V ← EK(Y + (cid:96)); M(cid:96) ← C(cid:96)⊕V [1 : |C(cid:96)|]
M ← M1 ··· M(cid:96)
return M
Figure 2: The encryption (top) and decryption (bottom) of the authenticated encryp-
tion scheme CAU. The scheme is based on a blockcipher E and an AXU hash H.
On input (K, N, A, M ), the encryption scheme ﬁrst encrypts M via the CTR mode of EK
with IV pad(N ) + 1, to get a ciphertext core C (that does not include the IV). It then computes
a hash key L ← EK(0n), produces a tag T ← HL(A, C)⊕EK(pad(N )) and then outputs T (cid:107) C
as the ciphertext. On input (K, N, A, T (cid:107) C), the decryption scheme ﬁrst computes the hash key
L ← EK(0n). Next, if T (cid:54)= HL(A, C)⊕EK(pad(N )), it outputs ⊥. Otherwise, it uses the decryption
of CTR on EK with IV pad(N ) + 1 to decrypt C, and outputs the corresponding message M .
See Fig. 2 for the code of CAU. For GCM, the blockcipher E is instantiated by AES, and thus
n = 128 and k ∈ {128, 256}. The nonce length r is 96 bits. The hash H is instantiated by the
polynomial-based hash function GHASH, and thus one can pick c = 1.5. To see why, recall that in
the original GCM document [17], McGrew and Viega showed that for any two distinct pairs (M, A)
and (M(cid:48), A(cid:48)), and for any z ∈ {0, 1}n,
Pr
K ←$ {0,1}n
[GHASHK(M, A)⊕GHASHK(M(cid:48), A(cid:48)) = z] ≤ (cid:100)(1 + max{|M| + |A|,|M(cid:48)| + |A(cid:48)})/n(cid:101)
≤ 1 + max{|M|n + |A|n,|M(cid:48)|n + |A(cid:48)|n}
≤ 1.5 · max{|M|n + |A|n,|M(cid:48)|n + |A(cid:48)|n}
2n
2n
2n
.