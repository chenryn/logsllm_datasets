Thermostat
manualOff)
lightOn()
ightOf)
setTemperature()
Sprinkler
SecurityControl
waterOn(
walerOl)
Light
am()
onl)
disarm()
off()
看起来类好像不少，但接口各有差异。麻烦还不只是这样，这
些类以后还会越来越多。所以设计一个遥控器API变得很有挑
战性。让我们继续设计吧！
194
第6章
---
## Page 231
命令模式
办公室隔间对话
你的团队正在讨论如何设计这个遥控器AP
哈！有新的设计任务来了。根据我初
次观察的结果，目前有一个附着开和
Sue
人关按钮的筒单遥控器，还有一套五花
八门的厂高类。
Mary：是的，有许多的类都具备onO和off(方法，除此之外，还有一些
方法像是dimO、setTemperatureO、setVolumnO、setDirectionO。
Sue：还不只这样，听起来似乎将来还会有更多的厂商类，而且每个类
还会有各式各样的方法。
Mary：我认为要把它看成分离的关注点，这很重要：遥控器应该知道
如何解读按钮被按下的动作，然后发出正确的请求，但是遥控器不需知
道这些家电自动化的细节，或者如何打开热水器。
Sue：听起来好像是个不错的设计方式。但如果遥控器很笨，只知道如
何做出一般的要求，那又怎能设计出让这个遥控器能够调用一些诸如打
开电灯或车库门的动作呢？
Mary：我不确定该怎么做，但是我们不必让遥控器知道太多厂商类的
细节。
Sue：你的意思是..
Mary：我们不想让遥控器包含一大堆if语句，例如“if slotl==Light，
then light.onO，else if slot1==Hottub then hottob.jetsOnO”。大家都知i
道这样的设计很槽糕。
Suc：我同意你的说法。只要有新的厂商类进来，就必须修改代码，这
会造成潜在的错误，而且工作没完没了。
你现在的位置
195
---
## Page 232
命令模式可能行
嘿！我不小心听到了你们的
对话。从第I章开始，我就努
力地学习设计模式。有一个模式
就叫做“命令模式”，可能对你
们有帮助。
Mary：是吗？再多说一些来昕听。
子中，请求者可以是遥控器，而执行者对象就是厂商类其中之一的实例。
Sue：这怎么可能？怎么能将它们解耦？毕竞，当我按下按钮时，遥控器必须把电灯
打开。
Joe：在你的设计中采用“命令对象”就可以办到。利用命令对象，把请求（例如打
开电灯）封装成一个特定对象（例如客厅电灯对象）。所以，如果对每个按钮都存
储一个命令对象，那么当按钮被按下的时候，就可以请命令对象做相关的工作。遥
控器并不需要知道工作内容是什么，只要有个命令对象能和正确的对象沟通，把事
情做好就可以了。所以，看吧，遥控器和电灯对象解耦了。
Sue：的确听起来像是一个正确的方向。
Mary：我仍然无法理解这个模式怎么工作。
Joe：由于对象之间是如此的解耦，要描述这个模式实际的工作并不容易。
Mary：听听我的想法是否正确：使用这个模式，我们能够创建一个API，将这些命
令对象加载到按钮插槽，让遥控器的代码尽量保持简单。而把家电自动化的工作和
进行该工作的对象一起封装在命令对象中。
Joe：是的，我也这么认为。我也认为这个模式可以同时帮你设计“撤销按钮”，但
我还没研究到这部分。
Mary：听起来令人振奋，但我想应该还要好好学习这个模式。
Sue：我也是。
196
享9L
---
## Page 233
命令模式
同时，回到餐厅
·····或者该说是
回到命令模式的简单介绍
如同Joe所说的，仅仅通过听别人口述的方式来了解命令模式，确实
有点困难。但是别害怕，有一些朋友正准备帮助我们：还记得第1章
对象村餐厅
里出现的友好餐厅吗？距离上次和Alice、Flo及快餐厨师见面已经有
好一阵子了。现在我们有很好的理由回去（除了食物和很棒的对话
之外）：餐厅可以帮助我们了解命令模式。
所以，让我们再度回到餐厅，研究顾客、女招待、订单，以及快餐
厨师之间的交互。通过这样的互动，你将体会到命令模式所涉及的
希望你曾来过.·
对象，也会知道它们之间如何被解耦。之后，我们就可以解决遥控
器API了。
进人对象村餐厅.
我们都知道餐厅是怎么工作的：
2
）女招待拿了订单，
放在订单柜台，然
后喊了一声“订单
1
你，也就是顾客，把订单
来了！”
交给女招待。
PDG
3快餐厨师根据订单准备餐点。
你现在的位置
197
---
## Page 234
餐厅
让我们更详细地研究这个交互过程·····
.既然餐厅是在对象村，所以让我们也来思考对象和
方法的调用关系
订单包含一个订单表格，顾客订
我要一个芝士汉堡和
购的馨点项目写在上面。
杯表芽饮料。
createOrder)
订单
芝士汉堡
麦芽饮料
顾客知道他要的是
takeOrder()
什么，并创建一张
行单。
女招待拿走了订单，放在订单柜台，
然后调用orderUp(）方法，逐知厨师开
始准备馨点。
orderUp0)
快馨厨师根据指兮
准备馨点。
订单上有所有准备餐点的指示，
指导厨师用类似makeButse(这
样的方法来烹调。
makeBurger(),makeShake()
PDG
198
第6章
---
## Page 235
命令模式
对象村餐厅的角色和职责
ORDER
一张订单封装了准备餐点的请求。
把订单想象成一个用来请求准备餐点的对象，和一般的对
象一样，订单对象可以被传递：从女招待传递到订单柜台，
或者从女招待传递到接替下一班的女招待。订单的接口只
包含一个方法，也就是orderUp()。这个方法封装了准备餐
点所需的动作。订单内有一个到“需要进行准备工作的对
象”（也就是厨师）的引用。这一切都被封装起来，所以
女招待不需要知道订单上有什么，也不需要知道是谁来准
好吧，在真实的生活里，女招待可能
备餐点：她只需要将订单放到订单窗口，然后喊一声“订
需要关心汀单里写些什么和会由谁来
单来了”就可以了。
准备这一餐，但这里可是对象村…….
女招待的工作是接受订单，然后调用订单的
跟着做吧！
orderUp(）方法。
女招待的工作很简单：接下顾客的订单，继续帮助下一个顾
不要叫我下厨，我只
客，然后将一定数量的订单放到订单柜台，并调用orderUp()方
负贵接单，然后呵“
单亲了：
法，让人来准备餐点。如同在对象村讨论过的，女招待其实不
必担心订单的内容是什么，或者由谁来准备餐点。她只需要知
道，订单有一个orderUpO方法可以调用，这就够了。
现在，一天内，不同的顾客有不同的订单，这会使得女招待的
takeOrder(O方法被传人不同的参数。女招待知道所有的订单都
支持orderUpO方法，任何时候她需要准备餐点时，调用这个方
法就是了。
快餐厨师具备准备餐点的知识。
你地对可以设女招待
快餐厨师是一种对象，他真正知道如何准备餐点。一旦女招
和我之间是彻感的群属。
群托，丝善至不是我喜项
待调用orderUpO方法，快餐厨师就接手，实现需要创建餐点
的类型。
的所有方法。请注意，女招待和厨师之间是彻底的解耦：女
招待的订单封装了餐点的细节，她只要调用每个订单的方法
即可，而厨师看了订单就知道该做些什么餐点；厨师和女招
待之间从来不需要直接沟通。
你现在的位置，199
---
## Page 236
餐厅是命令模式的模型
好吧！这间餐厅的女招待
通过订单而和厨师之间解耦，
这又怎样？说重点！
O
耐心点，快到重点了
把餐厅想成是O0设计模式的一种模型，而这个模型允许将“发出请求
的对象”和“接受与执行这些请求的对象”分隔开来。比方说，对于
的厂商特定对象”。万一遥控器的每个插槽都持有一个像餐厅订单那
样的对象，会怎么样？那么，当一个按钮被按下，只要调用该对象的
orderUpO方法，电灯就开了，而遥控器不需要知道事情是怎么发生的，
也不需要知道涉及哪些对象。
现在我们就把餐厅的对话换成命令模式.
BRAIN
POWER
在继续下一页之前，花些时间研究两页前的这张
图，图中有餐厅的角色和职责。请务必了解对象
村餐厅的对象和他们之间的关系。完成之后，你
就可以准备将目光集中在命令模式上了！
200
第6章
---
## Page 237
命令模式
从餐厅到命令模式
好了，我们已经花了很多时间在对象村餐厅，也清楚地知道各种角色的
特性和他们的职责。现在我们要重新绘制餐厅图以反映出命令模式。所
有的角色依然不变，只有名字改变了。
动作和接收老在会今对象
中被绑在一起。
命今对象提供一个方法
execute(）。这个方法封装了
-act100
这些动作，调用这个方法
就全调用接收者的这些动
createCommandObject()
客户员责创建命今对象。命今对
象包含了接收老上的一组动作。
execute()
create
object()
Command
客户在调用老对象上调用
setCommand（）方法，并把它传入
Client
命今对象。该命今对象被储存在
其中，以后需爱用到。
setCommand(
②
加载调用者
and()
1
客户创建一个命令对象。
客户利用setCommand()
Invoker
将命令对象储存在调用
未来的某个时间点，调
者中。
用者将调用命今对象的
execsute(）方法….
稍后客户要求调用者
这导致接收
执行命令。请注意：就像
老的动作被调
在本章稍后会看到的：
execute
actionl()
action2()
用。
且命令被加载到调用者，
该命令可以被使用井丢弃，
或者可以被保留下来并使
action10,action20
Receiver
用许多次。
你现在的位置
201
---
## Page 238
连连看
请将餐厅的对象和方法对应到命令模式的相应名称。
餐厅
命令模式
女招待
Command
快餐厨师
execute()
orderUp()
client
订单
lnvoker
顾客
Receiver
takeOrder()
setCommand()
202
第6章
---
## Page 239
命令模式
第一个命令对象
是我们建立第一个命令对象的时候了！现在开始写一些遥控器的代码。虽然我
们还没搞清楚如何设计遥控器的API，但自下而上建造一些东西，可能会有帮
实现命令接口
首先，让所有的命令对象实现相同的包含一个方法的接口。在餐厅的例子中，
我们称此方法为orderUpO，然而，现在改为一般惯用的名称execute()。
这就是命令接口：
public interface Command {
public void execute();
简单：只需要一个方法：execate(）。
F
实现一个打开电灯的命令
现在，假设想实现一个打开电灯的命令。根据厂商所提供的类，。
Light
Light类有两个方法：on()和offO。下面是如何将它实现成一个命令：
on0
off
这是一个命今.所以需要实现
Command接口。
public class LightOnCommand implements Command (
Light light;
构造器被传入了某个电灯（比
方说：客厅的电灯），以便让
public LightOnCommand(Light 1ight){
this.light = light;
这个命今控制，然后记录在实
例变量中。一旦调用execute（）
public void execute(){
就由这个电灯对象成为接收者
light , on () ;
负责接受请求。
这个execute(）方法调用接收
对象（我们正在控制的电灯）
的on方法。
现在有了LightOnCommad类，让我们看看如何使用它.…
你现在的位置
203
---
## Page 240
使用命令对象
使用命令对象
好了，让我们把这一切简化：假设我们有一个遥控器，它只有一个按钮和对
应的插槽，可以控制一个装置：
有一个插楼持有命今，而这个命今
public class SimpleRemoteControl
控制着一个装责。
Command slot;
这个方法用来设置插槽控制的命
public SimpleRemoteControl() {}
今。如果这段代码的客户想要改
public void setCommand (Command command)
变遥控器按钮的行为，可以多次
slot - command;
调用这个方法。
）
public void buttonWasPressed()(
当按下按银时，这个方法就金被调用
slot.execute ();
使得当前会今衍接插楼，并调用它的
execate(）方法。
遥控器使用的简单测试
下面只有一点点代码，用来测试上面的简单遥控器。我们来看看这个代码，并
指出它和命令模式图的对应关系：
遥控器就是调用者，金传
这是命今模式的客户。