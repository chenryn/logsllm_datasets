mapping of the guest physical address, which is supposed
to contain network data before guest VM responding to the
request. Thus, some wrong memory pages will be sent back,
which leaks secrets to the adversary. SEV-SNP ﬁxed this
problem by restricting unauthorized NPT remapping.
Unprotected I/O. Li et al. [23] exploited unprotected I/O in
SEV and SEV-ES. More speciﬁcally, they showed that SEV
and SEV-ES rely on a shared region within a guest VM called
Software I/O Translation Lookaside Buffer (SWIOTLB) to
perform I/O behaviors. This design allows the hypervisor to
alter parts of I/O trafﬁc, which helps to construct encryption
and decryption oracles that can encrypt and decrypt arbitrary
memory with the victim’s VEK. Even SEV-SNP did not ﬁx
the unprotected I/O problem, the restriction of the hypervi-
sor’s write permission in SEV-SNP mitigates this attack.
ASID abuses. Li et al. [22] studied SEV’s “Security-by-
Crash” principle and Address Space Identify (ASID) man-
agement problem. They presented a series of attacks named
CROSSLINE attacks by exploiting these problems. ASID is
used as an index of encryption keys in AMD ﬁrmware as
well as TLB tags and cache tags. While the hypervisor is not
considered trusted, SEV still leaves the ASID management to
the hypervisor and relies on a “Security-by-Crash” principle
where incorrect ASIDs always cause VM crashes to protect
guest VM’s integrity and conﬁdentiality. In CROSSLINE at-
tacks, the authors showed that the adversary is able to extract
the guest VM’s memory blocks, which conforms to the PTE
format in a stealthy way. The CROSSLINE attack can work
as long as the target VM’s memory encryption key is not deac-
tivated by the hypervisor, even if the victim VM is terminated.
Figure 4: The RMP Check in AMD-SNP.
6.2 The CIPHERLEAKS attack on SEV-SNP
There are two key requirements of the CIPHERLEAKS attack:
• Mapping of plaintext-ciphertext pairs of the same ad-
dress does not change. When applying the CIPHERLEAKS
attack on SEV-SNP, the memory encryption mode in SEV-
SNP needs to preserve the mapping between the plaintext
and the ciphertext throughout the lifetime of the VM. Ac-
cording to [2], SEV-SNP still adopts the XEX mode of en-
cryption, which satisﬁes this requirement.
• The hypervisor must have read access to the ciphertext.
When applying the CIPHERLEAKS attack on SEV-SNP, the
adversary needs to have read access to the ciphertext of
guest VM’s memory. According to [4], even though RMP
limits the hypervisor’s write access towards VM’s private
memory, the hypervisor still has read access to the guest
VM’s memory, including the VMSA area.
AMD has conﬁrmed that SEV-SNP is also vulnerable to the
CIPHERLEAKS attack. A CVE number will be assigned the
discovered vulnerability for SEV-SNP and a hardware patch
will be available to protect the VMSA during VMEXITs.
7 Related Work
7.1 Known Attacks against SEV
With the assumption of an untrustworthy hypervisor, SEV has
faced numerous attacks caused by unencrypted VMCB [15,
31, 35], unauthenticated encryption [9, 11, 36], unprotected
NPT [15, 26, 27], unprotected I/O [23] and unauthorized key
use [22]. These attacks successfully break the conﬁdentiality
and/or the integrity of SEV design. AMD patched SEV with
additional features SEV-ES.
Unencrypted VMCB. The VMCB is not encrypted during
VMEXIT in SEV mode, which exposes SEV VM’s registers
state to the hypervisor. Hetzelt and Buhren [15] ﬁrst showed
that the untrusted hypervisor could manipulate guest VM’s
register during VMEXIT to perform return-oriented program-
ming (ROP) attacks [31]. Werner et al. also showed by con-
tinuously monitoring unencrypted VMCB, the adversary is
able to ﬁngerprint applications inside guest VM and partially
USENIX Association
30th USENIX Security Symposium    729
gCR3GuestVirtualaddressCheckgPA&OwnernCR3GuestPhysicaladdressRMPSystemPhysicaladdressGuestPageTableNestedPageTablegPASEV-SNP did not change its ASID management design, but
the ownership check restricts other software components from
accessing the target VM’s memory pages. Thus, CROSSLINE
attacks cannot work in SEV-SNP.
Side-channel attacks. Architectural side channels like cache
side channels [25, 38–41], performance counter tracking or
TLB side channels [13] are common attacks in cloud. SEV’s
design increases the difﬁculty of performing some kinds of
architectural side channels. For example, it is rather hard to
perform a Flush+Reload attack when SEV is enabled [38].
This is because cache lines are tagged with the VM’s ASID,
indicating to which VM this data belongs, thus preventing
the data from being misused by entities other than its owner.
Since the cache is now tagged with ASID, cache coherence of
the same physical address is not maintained if the two virtual
memory pages do not have the same ASID and C-bit. So
although the malicious hypervisor can access the guest VM’s
arbitrary physical address, she cannot directly tell whether the
guest VM has accessed particular memory by measuring the
time using the Flush+Reload method.
While resistant to some architectural side channels, SEV is
still vulnerable to page-fault side-channel attacks, in which the
adversary monitors the page faults of the SEV-enabled VM
to track its execution. In SEV mode, although the mapping
between the guest VM’s guest virtual address (gVA) to gPA
is maintained by the guest VM’s page table and encrypted by
the VM Encryption Key, the hypervisor could still manipulate
the NPT by clearing the P bit to trap the translation from gPAs
to system physical address (sPAs). Hetzelt et al. [15] relies on
this NPF side channel to identify memory pages containing
web data. Li et al. use the page fault side channels to locate
network buffer pages [23].
8 Conclusion
This paper describes the ciphertext side channel on SEV (in-
cluding SEV-ES and SEV-SNP) processors. The root causes
of the side channel are two-fold: First, SEV uses XEX mode
of encryption with a tweak function of the physical addresses,
so that the one-to-one mapping between the ciphertext and
plaintext of the same address is preserved. Second, the VM
memory is readable by the hypervisor, allowing it to monitor
the changes of the ciphertext blocks. The paper demonstrates
the CIPHERLEAKS attack that exploits the ciphertext side-
channel vulnerability to completely break the constant-time
cryptography of OpenSSL when executed in SEV-ES VMs.
References
[1] José Bacelar Almeida, Manuel Barbosa, Gilles Barthe,
François Dupressoir, and Michael Emmi. Verifying
constant-time implementations.
In 25th USENIX
Security Symposium, pages 53–70, 2016.
[2] AMD. AMD64 architecture programmer’s manual vol-
ume 2: System programming, 2019.
[3] AMD. SEV API version 0.22, 2019.
[4] AMD. AMD SEV-SNP: Strengthening VM isolation
with integrity protection and more. White paper, 2020.
[5] AMD. AMDSEV/SEV-ES branch. https://github.
com/AMDESE/AMDSEV/tree/sev-es, 2020.
[6] AMD. SEV secure nested paging ﬁrmware API speciﬁ-
cation. API Document, 2020.
[7] BearSSL. Why constant-time crypto? https://www.
bearssl.org/constanttime.html, 2021.
[8] David Brumley and Dan Boneh. Remote timing at-
tacks are practical. Computer Networks, 48(5):701–716,
2005.
[9] Robert Buhren, Shay Gueron, Jan Nordholz, Jean-Pierre
Seifert, and Julian Vetter. Fault attacks on encrypted
general purpose compute platforms.
In 7th ACM
on Conference on Data and Application Security and
Privacy. ACM, 2017.
[10] Victor Costan and Srinivas Devadas.
Intel SGX ex-
plained. IACR Cryptol. ePrint Arch., 2016(86):1–118,
2016.
[11] Zhao-Hui Du, Zhiwei Ying, Zhenke Ma, Yufei Mai,
Secure
arXiv preprint
Phoebe Wang, Jesse Liu, and Jesse Fang.
encrypted virtualization is unsecure.
arXiv:1712.05090, 2017.
[12] Zhao-Hui Du, Zhiwei Ying, Zhenke Ma, Yufei Mai,
Secure
arXiv preprint
Phoebe Wang, Jesse Liu, and Jesse Fang.
encrypted virtualization is unsecure.
arXiv:1712.05090, 2017.
[13] Ben Gras, Kaveh Razavi, Herbert Bos, and Cristiano
Giuffrida. Translation leak-aside buffer: Defeating
cache side-channel protections with TLB attacks. In
27th USENIX Security Symposium, pages 955–972,
2018.
[14] Daniel Gruss, Clémentine Maurice, Klaus Wagner, and
Stefan Mangard. Flush+ Flush: a fast and stealthy cache
attack.
In International Conference on Detection of
Intrusions and Malware, and Vulnerability Assessment,
pages 279–299. Springer, 2016.
[15] Felicitas Hetzelt and Robert Buhren. Security analy-
sis of encrypted virtual machines. In ACM SIGPLAN
Notices. ACM, 2017.
730    30th USENIX Security Symposium
USENIX Association
[16] Amr Hussam Ibrahim, Mohamed Bakr Abdelhalim,
Hanadi Hussein, and Ahmed Fahmy. An analysis of
x86-64 instruction set for optimization of system soft-
wares. Planning perspectives, page 152, 2011.
[28] Dag Arne Osvik, Adi Shamir, and Eran Tromer. Cache
attacks and countermeasures: the case of AES.
In
Cryptographers’ track at the RSA conference, pages 1–
20. Springer, 2006.
[17] David Kaplan. Protecting VM register state with SEV-
ES. White paper, 2017.
[18] David Kaplan.
Upcoming x86 technologies
https:
for malicious hypervisor protection.
//static.sched.com/hosted_files/lsseu2019/
65/SEV-SNP%20Slides%20Nov%201%202019.pdf,
2020.
[19] David Kaplan, Jeremy Powell, and Tom Woller. AMD
memory encryption. White paper, 2016.
[20] Paul C Kocher.
Timing attacks on implementa-
tions of Difﬁe-Hellman, RSA, DSS, and other systems.
In Annual International Cryptology Conference, pages
104–113. Springer, 1996.
[21] Adam Langley. Checking that functions are constant
time with valgrind. https://www.imperialviolet.
org/2010/04/01/ctgrind.html, 2010.
[22] Mengyuan Li, Yinqian Zhang, and Zhiqiang Lin.
Breaking”security-by-crash”based
arXiv preprint
CROSSLINE:
memory isolation in amd sev.
arXiv:2008.00146, 2020.
[23] Mengyuan Li, Yinqian Zhang, Zhiqiang Lin, and Yan
Solihin. Exploiting unprotected i/o operations in amd’s
secure encrypted virtualization.
In 28th USENIX
Security Symposium, pages 1257–1272, 2019.
[24] Moritz Lipp, Vedad Hadži´c, Michael Schwarz, Arthur
Perais, Clémentine Maurice, and Daniel Gruss. Take
a way: Exploring the security implications of AMD’s
cache way predictors. In 15th ACM ASIA Conference
on Computer and Communications Security (ACM
ASIACCS 2020), 2020.
[25] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and
Ruby B Lee. Last-level cache side-channel attacks are
practical.
In 2015 IEEE symposium on security and
privacy, pages 605–622. IEEE, 2015.
[26] Mathias Morbitzer, Manuel Huber, and Julian Horsch.
Extracting secrets from encrypted virtual machines. In
9th ACM Conference on Data and Application Security
and Privacy. ACM, 2019.
[27] Mathias Morbitzer, Manuel Huber, Julian Horsch, and
Sascha Wessel. SEVered: Subverting AMD’s virtual
machine encryption. In 11th European Workshop on
Systems Security. ACM, 2018.
[29] Cesar Pereida García, Billy Bob Brumley, and Yu-
val Yarom. Make sure DSA signing exponentia-
tions really are constant-time.
In Proceedings of the
2016 ACM SIGSAC Conference on Computer and
Communications Security, pages 1639–1650, 2016.
[30] Oscar Reparaz, Josep Balasch, and Ingrid Verbauwhede.
Dude, is my code constant time? In Design, Automation
& Test in Europe Conference & Exhibition (DATE),
2017, pages 1697–1702. IEEE, 2017.
[31] Hovav Shacham. The geometry of innocent ﬂesh on
the bone: Return-into-libc without function calls (on
the x86). In 14th ACM Conference on Computer and
Communications Security. ACM, 2007.
[32] Shweta Shinde, Zheng Leong Chua, Viswesh Narayanan,
and Prateek Saxena. Preventing page faults from telling
your secrets.
In Proceedings of the 11th ACM on
Asia Conference on Computer and Communications
Security, pages 317–328, 2016.
[33] David Suggs, Mahesh Subramony, and Dan Bouvier.
The AMD “Zen 2” processor. IEEE Micro, 40(2):45–
52, 2020.
[34] Jo Van Bulck, Frank Piessens, and Raoul Strackx. SGX-
Step: A practical attack framework for precise enclave
execution control. In Proceedings of the 2nd Workshop
on System Software for Trusted Execution, pages 1–6,
2017.
[35] Jan Werner, Joshua Mason, Manos Antonakakis,
Michalis Polychronakis, and Fabian Monrose. The
SEVerESt of them all: Inference attacks against se-
cure virtual enclaves.
In ACM Asia Conference on
Computer and Communications Security, pages 73–85.
ACM, 2019.
[36] Luca Wilke, Jan Wichelmann, Mathias Morbitzer, and
Thomas Eisenbarth. SEVurity: No security without
integrity: Breaking integrity-free memory encryption
with minimal assumptions. In 2020 IEEE Symposium
on Security and Privacy (SP), pages 1483–1496. IEEE,
2020.
[37] Yuanzhong Xu, Weidong Cui, and Marcus Peinado.
Controlled-channel attacks: Deterministic side chan-
nels for untrusted operating systems.
In 2015 IEEE
Symposium on Security and Privacy, pages 640–656.
IEEE, 2015.
USENIX Association
30th USENIX Security Symposium    731
[38] Yuval Yarom and Katrina Falkner. FLUSH+ RELOAD:
a high resolution, low noise, l3 cache side-channel attack.
In 23rd USENIX Security Symposium, pages 719–732,
2014.
[39] Yinqian Zhang. Cache side channels: State of the
art and research opportunities.
In Proceedings of
the 2017 ACM SIGSAC conference on Computer and
Communications Security, pages 2617–2619, 2017.
[40] Yinqian Zhang, Ari Juels, Michael K Reiter, and
Thomas Ristenpart. Cross-VM side channels and
their use to extract private keys.
In Proceedings of
the 2012 ACM SIGSAC conference on Computer and
Communications Security, pages 305–316, 2012.
[41] Yinqian Zhang, Ari Juels, Michael K Reiter, and
Thomas Ristenpart.
Cross-tenant side-channel at-
tacks in Paas clouds.
In Proceedings of the
2014 ACM SIGSAC Conference on Computer and
Communications Security, pages 990–1003, 2014.
732    30th USENIX Security Symposium
USENIX Association