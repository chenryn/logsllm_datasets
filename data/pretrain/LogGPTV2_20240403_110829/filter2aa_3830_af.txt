       1000:05f9 8a 46 fd        MOV        AL,byte ptr [BP + i]
       1000:05fc 98              CBW
       1000:05fd 8d 56 ce        LEA        DX,[BP + local_34]
       1000:0600 03 c2           ADD        AX,DX
       1000:0602 8b d8           MOV        BX,AX
       1000:0604 8a 07           MOV        AL,byte ptr [BX]
       1000:0606 50              PUSH       AX
       1000:0607 8a 46 fd        MOV        AL,byte ptr [BP + i]
       1000:060a 98              CBW
       1000:060b c4 5e f8        LES        BX,[BP + local_a]
       1000:060e 03 d8           ADD        BX,AX
       1000:0610 58              POP        AX
       1000:0611 26 32 07        XOR        AL,byte ptr ES:[BX]
       1000:0614 50              PUSH       AX
       1000:0615 8a 46 fd        MOV        AL,byte ptr [BP + i]
       1000:0618 98              CBW
       1000:0619 8d 96 4c ff     LEA        DX,[BP + flag]
       1000:061d 03 c2           ADD        AX,DX
       1000:061f 8b d8           MOV        BX,AX
       1000:0621 58              POP        AX
       1000:0622 88 07           MOV        byte ptr [BX],AL
       1000:0624 fe 46 fd        INC        byte ptr [BP + i]
```
The interesting locations to inspect are `local_34` and `local_a`.
`local_34` points in runtime to `ds:ffc4`:
![](images/local_34.png)
If we look closely, we can see that the last four letters are `ack}`, which are also part of the partial flag we get, and make sense in the context. This probably means that our key ends with `00 00 00 00`.
The string is XORed with `es:[local_a]`, which points in runtime to `es:64`:
![](images/local_a.png)
This points to the middle of a system error string ("Abnormal program termination") and continues with an indistinguishable byte array, following by the 4 NULL bytes we were expecting.
Let's align all three ingredients we have: The two strings which are being XORed, and the result:
```
23 3E 49 10 00 01 39 25 38 1A 30 26 3C 4E 64 79 AA 7E 79 75 D4 69 1E 6C 2A DF 61 9E EC 88 74 84 61 63 6B 7D #>I...9%8.0&
                             FUN_1000_01a9                                   XREF[1]:     entry:1000:0025(c)  
       1000:01a9 1e              PUSH       DS
       1000:01aa b8 00 35        MOV        AX,0x3500
       1000:01ad cd 21           INT        0x21
       1000:01af 89 1e 74 00     MOV        word ptr [s__1214_002f+69],BX                                                  = ""
       1000:01b3 8c 06 76 00     MOV        word ptr [DAT_1214_0076],ES
       1000:01b7 b8 04 35        MOV        AX,0x3504
       1000:01ba cd 21           INT        0x21
       1000:01bc 89 1e 78 00     MOV        word ptr [DAT_1214_0078],BX
       1000:01c0 8c 06 7a 00     MOV        word ptr [DAT_1214_007a],ES
       1000:01c4 b8 05 35        MOV        AX,0x3505
       1000:01c7 cd 21           INT        0x21
       1000:01c9 89 1e 7c 00     MOV        word ptr [DAT_1214_007c],BX
       1000:01cd 8c 06 7e 00     MOV        word ptr [DAT_1214_007e],ES
       1000:01d1 b8 06 35        MOV        AX,0x3506
       1000:01d4 cd 21           INT        0x21
       1000:01d6 89 1e 80 00     MOV        word ptr [DAT_1214_0080],BX
       1000:01da 8c 06 82 00     MOV        word ptr [DAT_1214_0082],ES
       1000:01de b8 00 25        MOV        AX,0x2500
       1000:01e1 8c ca           MOV        DX,CS
       1000:01e3 8e da           MOV        DS,DX
       1000:01e5 ba a0 01        MOV        DX,0x1a0
       1000:01e8 cd 21           INT        0x21
       1000:01ea 1f              POP        DS
       1000:01eb c3              RET
```
This function is calling `INT 21 35` (a.k.a. ["Get Interrupt Vector"](http://stanislavs.org/helppc/int_21-35.html)) for four interrupts: `INT 0`, `INT 4`, `INT 5` and `INT 6`. The return value (`ES:BX` = pointer to interrupt handler) is stored in the location used for our key. We must be getting different results compared to the challenge author.
For general knowledge, the interrupts are:
```
IVT Offset | INT #     | Description
-----------+-----------+-----------------------------------
0x0000     | 0x00      | Divide by 0
0x0010     | 0x04      | Overflow (INTO)
0x0014     | 0x05      | Bounds range exceeded (BOUND)
0x0018     | 0x06      | Invalid opcode (UD2)
```
We tried booting DOS 3.3 on VirtualBox and got different results. However, also there, it looked like some interrupt addresses ended with `00 F0`. Is it possible that only the higher address is different?
Let's take another look at the flag we already have:
```
BSidesTLV{DOS isB(Lw.nnlJÏan..ttack
```
Separate the corrupted part from the good part:
```
BSidesTLV{DOS is??????????????ttack
                B(Lw.nnlJÏan..
```
Assume that anything that is XORed with `00 F0` is good:
```
BSidesTLV{DOS is??????????????ttack
                B(Lw.nnlJÏan..
                ??????nl??an??
```
Add obvious spaces and complete the last word to "attack":
```
BSidesTLV{DOS is??????????????ttack
                B(Lw.nnlJÏan..
                ??????nl??an??
                 ?????nl? an a
```
Couldn't find a single English word that fits, but if we assume these are two words, "only" jumps to mind:
```
BSidesTLV{DOS is??????????????ttack
                B(Lw.nnlJÏan..
                ??????nl??an??
                 ?????nl? an a
                 ??? only an a
```
It's pretty easy to complete "DOS is ??? only an attack" - DOS (which is used these days "Denial of Service") is not only an attack, it's also an operating system.
We were lucky that the authors didn't use l33t or capitals :-)
![](images/dos_1st.png)
After a while, a clarification was posted by the authors:
> Due to a bug in the DoSaTTaCK challenge, the flag was displayed correctly only on DOS 6.2 despite the fact that the challenge requested specifically to use DOS version 3.30. The bug has been fixed and now the flag will be displayed properly only on DOS 3.30. Those who were brave and thorough enough to try it on several environments and solved the challenge with the bug will get 300 bonus points 
Looks like there's more than one way to get a flag.