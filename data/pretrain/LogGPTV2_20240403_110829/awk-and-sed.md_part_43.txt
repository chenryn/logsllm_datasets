。每个条目（除了“see”条目外）都由关键字
329.
，这就是索引程序将要做的工作。也可以建
第十二章
综合应用
---
## Page 312
合并有相同关键字的项、建立一个页码列表。
根据关键字、卷和页码对条目进行排序。
将题目的格式标准化并以此输入它们。
标准 UNIX实用工具 sort 来完成。
所有的这些程序除了一个外都是用awk编写的。要对索引条目排序，我们使用
程序或模块并形成一个管道。
须的 awk 程序来完成相应的工作。Masterindex程序的操作被分成五个单独的
允许用户指定一系列不同的命令行选项来定义生成什么类型的索引，并调用必
段主要用于处理编码过程中本质的与输入有关的问题。ShelI脚本 masterindex
在描述了程序的每个模块之后，
释来解释理解程序的每行起什么作用。
因为该索引应用程序较长且较复杂，
主索引程序
是带有页码和卷标识符的。
现在唯一重要的是，
对于多卷条目，最后生成的索引将是这样：
reserved names, I:43
list of,
objects; hierarchy of, I:44;
xView, 1:42; 11:55,69,75
input. idx | sort | pagenums. idx | combine.idx | format. idx 
packages,
combine. idx 
pagenums. idx 
sort
input. idx
1:43;11:56
1:43, 45
QQ群：
要知道作为 awk 程序输入的索引条目，是带有一个页码还
50192241
最后一个部分讨论剩余的几个细节。这些代码
，下面对每个程序的功能做了简要的概括：
330
我们描述了大的程序结构。利用程序的注
第十二章
综合应用
---
## Page 313
字段包含次关键字和第三关键字（如果给出）；第三个字段包含页码。
个程序产生的输出是由冒号分隔的3个字段。第一字段包含主关键字，第二个
Ipput.idx程序的输入有两个用制表符分隔的字段组成（在前面介绍过）。这
两部分”
Ipput.idx脚本寻找不同类型的条目，
标准化输入
我们将用单独的节来讨论每一步。
准备格式化索引，
将连续的页码组合成一个范围。
$1 ~ /-~/ & $1 !--~ /~~/ 
#$1“－/~[~~-]/#该正则表达式不工作，不知为什么
#1匹配包含一个~的需要交换的条目
BEGIN {FS = "\t"; OFS = "" }
#输入是"条目”制表符"页码"
# Version 1.1 7/10/90
# Author: Dale Dougherty
#input.idx－ 在排序之前标准化输入
#!/work/bin/nawk -f
下面是input.idx程序的代码:
format. idx 
QQ群：
以便显示或由 troff 处理。
50192241
- 331.
并将它们标准化以便于后续的程序访 
第十二章
综合应用
---
## Page 314
#4清楚条目
}# 3结束
gsub(/::/， "\\72", $1)
#将"::"替换成八进制值
$1~ /::/{
#3用"::"匹配字面上的":"条目
gsub(/~/， "~—"， $1)
#2匹配包好两个~
}#1结束
printf("%s:%s:%s\n", subfield[2], subfield[1], $2)
printf("%s %s::%s\n", subfield[1], subfield[2], $2)
#打印没有“-”的条目，
n = split($1, subfield, "~)
# 将第一字段分解到名为 subfield 的数组中
}#2结束
next
if (n == 2)
QQ群：
50192241
，然后交换
332
第十二章 
综合应用
---
## Page 315
#在"See"中插入分号
sub(/:， */，":"，$1)
# 对于 also 和 see,在
#如果逗号用做分隔符，将它转换成冒号.
#如果冒号后面有内容就删除空格
sub(/:;/， ";"， $1)
if (sub(/:.*:/，"&;"，$1)）
sub(/ *\(/，";("，$1)
if ($1 ~ /:[^;]+ *\([sS]ee/)
else 
else丨#否则只查找逗号
sub(/ *\(/， ":("，$1)
if (sub(/, *,*\(/，":&"， $1))
if（$1!~/:/）{
#寻找第二个冒号，可用于代替";"
sub(/， */, 
else
if ($1 ~ /\([sS]ee/） {
sub(/: */, ":"， $1)
“:"，$1）
QQ群：
50192241
“("前放置分隔符
333
第十二章 
综合应用
---
## Page 316
sub(/;/， ""， $1)
sub(/ *zz\(see also.*$/, "", $1)
#删除 See Also
print $1 ":"
#打印 See Also 条目的w/out 页码
#输出两个条目
else
print $O ":"
sub(/ *~zz/，";~zz"，$1)
if ($1 ~ /:[; ］+ *zz/)
#增加"~zz"用以排序
if （$2 == ""）{
sub(/\([Ss]ee +[Aa] lso/, "^zz(see also", $1)
$1 ~ / *\([Ss]ee +[Aa]lso/ 
#5 匹配 See Alsos 并且为最后排序做准备
next
#如果没有页码
}# 4结束
QQ群：
50192241
334
第十二章 
综合应用
---
## Page 317
if（$1~/八([sS]ee/）{
#如果是"See"
print $1 ":"
if（$1~/:/)
printerr ("No page number")
else#如果是See 条目，则产生一个错误
(NF == 1 II $2 == "" I| $1 ~ /\([sS]ee/)
print $1 ":" 
else
#6 处理没有页码的条目(See 条目)
}#5结束
print $1 "::" $2 
else
print $1 ":" $2
#打印普通条目
next
next
next
if（$1~ /:/)
QQ群：
条目
50192241
335
第十二章 
综合应用
---
## Page 318
讨论这个脚本是，
以和多个规则匹配，除非和某个规则相关的操作调用了next语句。
这个脚本有许多模式匹配规则用于识别不同类型的输入。注意，每个条目都可
（）的条目并产生连个输出记录。函数 split（）生成一个数组，命名为
printf("EROR:%s (%d) %s\n", message, NR, $O) >"/dev/tty"
#打印消息，记录号和记录
# Arg：将要显示的消息
# printerr 
#支持函数
}#8结束
print $1 "::" $2 
print $1 ":" $2
#输出#条目：页面
#7 如果用冒号作为分隔符
function printerr (message)
#
}#7结束
next
}#6结束
以主关键字匹配条目
QQ群：
我们将用数字表示每个规则。规则1交换包含一个代字符
打印错误消息和当前记录
50192241
336
第十二章
综合应用
---
## Page 319
是很重要的。
示
规则6匹配没有指定页码的条目。唯一没有页码的有效条目包含一个“see”引
空格。所有的这些工作都是由函数 sub（）完成的。
sub（）查找行中的第一个逗号并将它改为冒号。这个规则也用来标准化
它出现在最后输出的条目中。因此我们用八进制来表示冒
规则3和规则2所做的工作类似。可以用“：：”来输出索引中的一个“：
这个脚本中的规则1和规则2的顺序很重要。只有当过程将条目交换后，才能
代字符。
关键字。
subfield，其中包含组合条目的两部分。这两个部分按它们原始的顺序被打印
入
空
用。这个规则输出“see”条目且在末端添加“：”
道
目
“see”
键
在
（format.idx程序将反转这个替换。）
符
用
来
符
因为我们将代字符作为特殊字符，所以我们必须提供某种方法来输入这个字
的方法一
用户特殊的条目没有包含页码，
道的后端，在条目被排序后将删除“~2z”。
第二关键字定界符（这和以前利用逗号作为定界符的程序是兼容的）
建字定界符。如果没有将冒号指定为定界符，
“基本”的语法中，
而，
号。然而，因为我们把冒号作为输入分隔符将输入输送到程序，我们不允许
’“~”来代替“~~”
处理这种情况，但注意规则1确保了它所匹配的第一代字符后面不是另一个
。我们利用这个约定，
来，然后被交换顺序并成为第二个输出记录，在这个记录中次关键字变成主
，因此通过排序它们将被排在此关键字列表的末端。Pagenums.idx程序在管
”和“see also”条目。对于冒号分隔的条目，
为
了使程序编写
一不接受
受不能正确解释的项。但是，通知用户使他或她能更正条
群：
写更容
主关键字和此关键字用冒号分隔。次关键字和第三关
即将两个连续的代字符翻译成一个代字符。规则2）
容易，我们必须减少到几个基本形式。
50192241
，故将不能包含在输出中。这是一个标准化输
337
。
，那么也可以用逗号作为主关键
-为用户提供更大的灵活性。
，用以表示第三个字段为
，规则 4将删除冒号后面的
第十二章
冒号的ASCII
综合应用
化
函数
键
字
关
用
自
---
## Page 320
当我们用input.idx 来运行这个文件时，将产生如下结果：
下面是test文件内容的一部分。我们将利用它来生成本节的例子:
的条目。我们输出“：：”
最后，
规则7输出包含冒号定界符的条目。使用 next 可以避免到达规则 8。
XView:programs; initialization:45
$ input.idx test
Xlib.h^header file 89 
Xv_singlecolor^type  80
 $ cat test
Xlib, repainting canvas 88 
graphics: 
toolkit (See X Window System)
X Window
graphics,
X Window System:
graphics,
graphics:
Xv_object~type
XV_INIT_ARGS^macro  46 
XView:
规则8匹配只包含一个主关键字的条目。
 programs;
 System, X Window ID for paint window 87
(see also server 
 CANVAS_X_PAINT_WINDOW 86
XView model 83
(see also server image)
QQ群：
49
 events 84
 initialization 45
50192241
来表示第二个字段为空。
338
image)
，换句话说，也就是没有定界符
第十二章 
综合应用
---
## Page 321
删除所有的重复条目，这里使用unia程序来完成这个工作。
现在准备对input.idx产生的输出进行排序。对条目排序最简单的方法是利用
对条目排序
段
多卷的条目在输出中的唯一区别是每个输出条目带有包含卷标示符的第四个字
键字的条目，包含主关键字和此关键字的条目，以及那些包含主、次和第三关
每个项包含3个用冒号分隔的字段。在样本输出中，你可以找到只有一个主关
标准的UNIX sort程序而不是编写一个自定义脚本。
header file:Xlib. h:89
Xlib.h header file::89
Xlib:repainting canvas:88
graphics:^zz(see also server image) :
X Window System:X Window ID for paint window:87
graphics : CANVAS_X_PAINT_WINDOW: 86
X Window System:events:84
graphics:XView model:83
graphics:^zz(see also server image) :
type: Xv_sing lecolor :80
Xv_singlecolor type: :80
type: Xv_ob ject : 49
Xv_object type::49
macro: XV_INIT_ARGS: 46
XV_INIT_ARGS macro: :46
QQ群：
50192241