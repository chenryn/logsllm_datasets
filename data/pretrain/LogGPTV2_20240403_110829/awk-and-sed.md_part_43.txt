### 第十二章 综合应用

#### Page 312
每个条目（除了“see”条目外）都由关键字组成，索引程序将执行以下操作：
- 合并具有相同关键字的项，并建立页码列表。
- 根据关键字、卷和页码对条目进行排序。
- 将题目的格式标准化并输入它们。

这些任务主要通过标准的 UNIX 实用工具 `sort` 和 `awk` 脚本来完成。其中，`masterindex` 是一个 Shell 脚本，允许用户通过命令行选项指定生成不同类型的索引，并调用必要的 `awk` 程序来完成相应的工作。`masterindex` 的操作被分成五个独立的部分，以处理编码过程中与输入相关的问题。在描述了每个模块后，我们将提供详细的注释来解释每行代码的作用。

对于多卷条目，最终生成的索引如下所示：
```
reserved names, I:43
list of,
objects; hierarchy of, I:44;
xView, 1:42; 11:55,69,75
```

#### Page 313
`input.idx` 程序的输入由两个制表符分隔的字段组成：第一个字段是条目，第二个字段是页码。该脚本会识别不同类型的条目并将其标准化以便后续处理。以下是 `input.idx` 程序的代码示例：

```awk
#!/work/bin/nawk -f
BEGIN {FS = "\t"; OFS = ""}
# 输入是"条目" 制表符 "页码"
# Version 1.1 7/10/90
# Author: Dale Dougherty
# input.idx - 在排序之前标准化输入

# 规则1: 匹配包含一个~的需要交换的条目
$1 ~ /-~/ & $1 !--~ /~~/ {
    n = split($1, subfield, "~")
    if (n == 2) {
        printf("%s:%s:%s\n", subfield[2], subfield[1], $2)
        next
    }
}

# 规则2: 匹配包好两个~
$1 ~ /::/ {
    gsub(/::/, "\\72", $1)
    print $1 ":" $2
    next
}

# 规则3: 处理 See 条目
$1 ~ /\([sS]ee/ {
    sub(/:， */, ":", $1)
    sub(/:;/, ";", $1)
    if (sub(/:.*:/, "&;", $1)) {
        sub(/ *\(/, ":(", $1)
    } else {
        sub(/ *,*\(/, ":", $1)
    }
    if ($1 !~ /:/) {
        printerr("No page number")
    } else {
        print $1 ":"
    }
    next
}

# 规则4: 删除 See Also
$1 ~ / *zz\(see also.*$/ {
    sub(/ *zz\(see also.*$/, "", $1)
    print $1 ":"
    next
}

# 规则5: 处理没有页码的条目
NF == 1 || $2 == "" || $1 ~ /\([sS]ee/ {
    print $1 ":"
    next
}

# 规则6: 输出普通条目
print $1 "::" $2
next

# 支持函数
function printerr(message) {
    printf("ERROR:%s (%d) %s\n", message, NR, $0) > "/dev/tty"
}
```

#### Page 314
此脚本中的规则顺序非常重要。规则1和规则2的顺序确保了只有当条目被交换后才能匹配规则2。规则3处理“See”条目，规则4删除“See Also”，规则5处理没有页码的条目，规则6输出普通条目。

#### Page 315
为了使程序编写更简单，我们减少了几个基本形式：
- 主关键字和次关键字用冒号分隔。
- 次关键字和第三关键字用逗号分隔。
- 使用“~”来代替“~~”。

#### Page 316
下面是测试文件的一部分内容，我们将利用它来生成示例：

```
Xlib.h^header file 89 
Xv_singlecolor^type 80
Xlib, repainting canvas 88 
graphics: 
toolkit (See X Window System)
X Window
graphics,
X Window System:
graphics,
graphics:
Xv_object~type
XV_INIT_ARGS^macro 46 
XView:
programs;
 initialization 45
X Window System, X Window ID for paint window 87
(see also server image)
CANVAS_X_PAINT_WINDOW 86
XView model 83
(see also server image)
events 84
```

运行 `input.idx` 会产生如下结果：

```
Xlib.h:header file:89
Xv_singlecolor:type:80
Xlib:repainting canvas:88
graphics:^zz(see also server image):
X Window System:X Window ID for paint window:87
graphics:CANVAS_X_PAINT_WINDOW:86
X Window System:events:84
graphics:XView model:83
graphics:^zz(see also server image):
Xv_singlecolor:type:80
Xv_object:type:49
XV_INIT_ARGS:macro:46
```

#### Page 317
接下来，我们需要对 `input.idx` 产生的输出进行排序。最简单的方法是使用标准的 UNIX `sort` 程序。以下是排序后的输出示例：

```
header file:Xlib.h:89
Xlib:repainting canvas:88
graphics:^zz(see also server image):
X Window System:X Window ID for paint window:87
graphics:CANVAS_X_PAINT_WINDOW:86
X Window System:events:84
graphics:XView model:83
graphics:^zz(see also server image):
type:Xv_singlecolor:80
type:Xv_object:49
macro:XV_INIT_ARGS:46
```

最后，我们可以使用 `uniq` 工具删除所有重复的条目，从而得到最终的索引。