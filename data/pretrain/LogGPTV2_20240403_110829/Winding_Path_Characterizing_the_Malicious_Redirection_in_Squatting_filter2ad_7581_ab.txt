‘login.tmall.com’). Finally, we got a total of 2,302 distinct brand domain names.
Next, we asked for the resolver-to-client DNS traﬃc from a local Internet service
provider (ISP) for 8 consecutive days, ranging from 04/27/2019 to 05/04/2019.
These traﬃc records all DNS packets returned from local recursive DNS servers
to clients. We used these data to build a passive DNS (pDNS) database. Due
to the tremendous volume of data, we only reserved the A-type resource records
and ﬁltered the resource records with no resolved values (NXDomain) to allevi-
ate the storage overhead. Each entry in the database consists of four columns,
namely the client’s IP address, the queried domain name, the timestamp, and
the resolved IP addresses. In addition, to protect the privacy of users, we have
hashed the IP addresses of all clients. Eventually, we got a pDNS database with
more than fourteen billion entries, averaging about seventy million entries per
hour.
After the above preparations, according to the deﬁnition introduced in
Sect. 2.1, we generated a large number of squatting domains based on the 2,302
brand domain names and veriﬁed their survival in the DNS traﬃc. Due to space
limitation, we omit the description of generating candidate squatting domain
names here. The speciﬁc generation steps can refer to the references mentioned
in Sect. 2.1. In the end, we found 101,186 successfully resolved squatting domain
names from the pDNS database. Figure 2 shows a breakdown of the six squatting
types. Due to space limitation, ‘wrong-TLD’ and ‘homograph’ are abbreviated as
‘w-TLD’ and ‘h-graph’, respectively. The bars in this ﬁgure have been arranged
in the ascending order of domain amount. We can see that combo squatting
is absolutely dominant, accounting for more than 50.1% of all our collected
squatting domain names. Followed by typo and level squatting, accounting for
20.1% and 15.8% of the total, respectively. While the remaining three types add
up to only 14%. The above measurement results are basically consistent with
the description in [23,27], reﬂecting the representativeness of the DNS traﬃc we
use.
Winding Path
99
3.2 Crawling Strategy
In order to understand the abuse intention of these squatting domain names,
we need to further analyze the speciﬁc behaviors they conduct. To this end,
we crafted a dynamic crawler to automatically query these domain names and
accurately record all events triggered during each querying. Speciﬁcally, we use
Selenium [5], a Chrome-based tool, to build this crawler. Compared with the
traditional static crawlers that can only return the HTML content of the web-
site, Selenium is able to simulate all the operations that a user performs in the
browser, such as mouse clicks.
Here, we employed the headless mode of Selenium, which allows us to run it in
bulk on the backend of the server, and set its User-Agent to ‘iPhone 6/7/8 Plus’
to disguise as a mobile user. To prevent Selenium from crashing at runtime, we
performed the crawler task in groups of ﬁve samples. We restarted the tool and
cleared the cache right after each crawling (5 samples). In order to successfully
capture all events triggered during the page loading, we waited 30 s for each
sample. For each sample, we saved the HTML content, the screenshot, and the
performance log.
Table 3. Explanation of typical methods in the performance log.
Method
Explanation
requestWillBeSent
Initiate an HTTP request for a speciﬁc URL
responseReceived
HTTP response about a speciﬁc URL
frameScheduledNavigation Navigate to another document for certain reasons
frameAttached
Load the ‘iframe’ (or ‘frame’) in current document
navigatedWithinDocument Navigate to an anchor within current document
The performance log of Chrome is absolutely the treasure we found in this
work, which records all the events during the page loading with the dictionary
form, including the requests for page resources and the operations performed
by users. Compared with previous methods relying on the analysis of network
traﬃc and HTML content, directly analyzing the entries in performance log is
obviously much more eﬃcient. There are mainly ﬁve methods in the perfor-
mance log involving the request and receive of page resources, which are shown
in Table 3. Among them, ‘requestWillBeSent’ and ‘responseReceived’ appear in
pair, representing the request and response for speciﬁc page resources. The fol-
lowed two methods, ‘frameScheduledNavigation’ and ‘frameAttached’, are used
to reﬂect the request type of new document, where the former indicates the rea-
son of certain navigation, and the latter indicates that the requested URL is the
‘src’ of certain  tag. The last method does not involve any requests
for new resources, and it is only used to indicate the navigation to the target
anchor within current document. In most cases, the requested URLs are derived
from the ‘src’ ﬁeld of HTML tags. While there are some exceptions, such as
100
Y. Zeng et al.
the requests initiated via embedded JavaScript snippets. Fortunately, in addi-
tion to completely recording the browser events, the performance log provides
many assistant ﬁelds in each entry, which can precisely indicate the cause of this
request (e.g., script initiated), the type of the requested resource (e.g., Docu-
ment), and the most important, the initiator of this request (namely the parent
URL).
Moreover, we also maintained a dataset to record the start time, the end
time, the start URL, the end URL, and the title of ﬁnal page of each crawling.
After completing the crawling task, we extracted the entries involving resource
requests from the performance log of each sample and rebuilt the URL request
tree. Finally, we extracted the redirection chain from the rebuilt tree, that is, a
path between the root node (i.e., start URL) and the end node (i.e., end URL).
Note that, if an ‘iframe’ (or ‘frame’) occupies more than 80% of the current
screen area, we consider it as an additional redirection. The reason lies in the
fact that even though the URL in the address bar has not changed, ‘iframe’ is
essentially another document. Any interaction a user makes in an ‘iframe’ is not
restricted by the current document.
Next, we divided these samples into three equal parts and employed three
well-trained volunteers to label them. To ensure the objectivity of the labeling
results, each volunteer was responsible for two parts of the samples. They mainly
resorted to the following six features during the labeling, namely the start URL,
end URL, hop counts, and the title, screenshot, and HTML content of the ﬁnal
page. Due to the large number of samples, our labeling process lasted for more
than two weeks. The samples were classiﬁed into four categories, namely benign,
malicious, invalid, and other. Speciﬁcally, if a sample is ultimately navigated to
a malicious site, distributes illegal contents or involves the drive-by download,
we consider it to be malicious. Because pornography, gambling, lottery, and
surrogacy are all illegal in China, we also regard the relevant sites as malicious
sites here. If a sample returns an invalid page (e.g., 404 status code), we label
it as invalid. If three volunteers disagree on the labeling result of one sample,
we consider that sample as ‘other’. Additionally, we found that a large number
of samples were redirected to parked domain names. Even though we have not
found that these samples involve malicious activities, some prior works have
pointed out the potential threat of parked domain names [8,24]. Accordingly, in
a comprehensive consideration, we classiﬁed all such samples as ‘other’. Figure 3
shows the breakdown of labeling results, where the bars have been sorted based
on the domain amount. Unsurprisingly, the proportion of benign samples is the
least here. Some benign samples directly navigated users to the original task
domain names. The remaining benign samples were used to support their own
legitimate web services, which did not involve any illegal content. Besides, we can
clearly see that the ‘other’ type occupies the most share of samples, accounting
for about 36.4%. The vast majority of these ‘other’ samples were labeled due to
being navigated to parked domain names, while only a few were labeled for the
disagreements among volunteers. The ‘malicious’ type makes up 26.8% of the
total. According to our investigations, which will be expounded in Sect. 4, most
Winding Path
101
malicious samples participated in the distribution of pornographic or gambling
services. Moreover, these samples tend to embed illegal content into the ‘iframe’
to evade the general static analysis [12,17,26].
4 Malicious Redirection Analysis
After the collection and labeling of malicious squatting domain names, we need
to understand how these domains are leveraged to conduct malicious activities.
In this section, we shed light on the redirection behavior involved in our collected
squatting domain names. First, we compared the diﬀerences of URL redirection
in malicious samples and benign samples. Next, we investigated the URLs act-
ing as intermediaries in redirection chains. Finally, we analyzed the Internet
infrastructures that held these intermediaries.
4.1 Benign Redirection vs. Malicious Redirection
Based on the discussion in Sect. 3.2, we know that most malicious squatting
domain names will navigate users to illegal websites, while the benign ones tend
to redirect users back to original domain names. Thus, it is necessary to ﬁgure out
whether the redirection mode will change signiﬁcantly for diﬀerent destinations.
Table 4. Statistics of the samples conducting URL redirections.
Category Domain amount Redirection
Oversize iframe
Benign
13,278
Malicious 27,128
7,071 (53.3%)
36 (0.3%)
20,079 (74.0%) 11,158 (41.1%)
To this end, we extracted all the samples conducting URL redirections. Note
again that if an ‘iframe’ occupies more than 80% of the current window, we treat
it as one redirection. Table 4 lists the statistics of the samples. Obviously, URL
redirection is a widely abused technique in malicious squatting domain names,
accounting for up to 74%. Moreover, 41.1% of the malicious samples employ the
oversize ‘iframe’s to display illicit information. It is worth noting that more than
half of the benign samples performed redirections as well, which is absolutely a
high proportion, but only 0.3% of them employed the oversize ‘iframe’s. These
statistics are somewhat unexpected, that is, the disparity in the proportion of
redirection between benign samples and malicious samples, although 20.7% is
not a small gap, is not as signiﬁcant as supposed.
In order to mine more useful characteristics, we extracted the redirection
chain from each sample and further characterized the malicious redirection from
two aspects, namely the distribution of both hop counts and redirection method.
Table 5 shows the hop counts distribution of chains. Interestingly, even though
53.3% of the benign samples applied URL redirections, 87.5% of which had
102
Y. Zeng et al.
Table 5. Hop counts distribution of the samples conducting URL redirection.
Category Hop counts distribution
4
1
2
3
6
7
>10
87.5% 9.4% 2.5% 0.4% 0.1% 0.0% 0.0% 0.0% 0.0% 0.0% 0.0%
10
8
9
5
Benign
Malicious 31.1% 35.3% 13.7% 8.4% 4.5% 1.3% 0.7% 0.3% 0.2% 0.2% 4.3%
only one hop. However, some benign samples also reached ﬁve hops, which is
already a relatively high hop counts. We investigated the samples that suﬀered
ﬁve hops and found that these samples had a common characteristic, namely
verifying the identity of visitors. In this case, visitors will be redirected to the
login page or guest page if they are found to have no login account. In contrast,
the hop counts distribution of malicious samples is relatively ﬂat. Most malicious
samples experienced two hops, while the corresponding proportion is only 35.3%.
As shown in the last column of Table 5, 4.3% of the malicious samples were
redirected more than 10 times. It is worth noting that, several malicious samples
performed an astonishing 26 times of URL redirection and eventually landed on
the same illegal fundraising site.
Fig. 4. Distribution of diﬀerent redirection types.
Then, we measured the speciﬁc redirection methods used in the collected
chains. According to the introduction in Sect. 2.2, URL redirection can be
divided into three types based on the source of redirection command, namely
HTTP-based, JavaScript-based, and HTML-based. More speciﬁcally, the HTTP-
based redirection can be further subdivided into two cases: 30X-status-code-
based and refresh-ﬁeld-based (denoted as ‘30X-HTTP’ and ‘ref-HTTP’, respec-
tively). In addition, JavaScript-based redirection can also be subdivided into two
cases, inner and outer, in the light of the source of snippets. In particular, the
inner type (denoted as ‘i-script’) refers to the JavaScript codes that are hard-
coded inside the  tags, while the outer type (denoted as ‘o-script’) refers
to the JavaScript codes imported by assigning the ‘src’ ﬁeld of  tags.
Winding Path
103
Figure 4 exhibits the distribution of redirection types. One can ﬁnd that almost
all benign samples employed ‘30X-HTTP’ to perform URL redirection, account-
ing for 96.48% of the total. It is reasonable that legitimate web services tend
to solve problems on the server-side. Compared with other redirection methods,
‘30X-HTTP’ is able to minimize the computational overhead on the client. Here,
we once again examined the benign samples mentioned in the previous paragraph
that experienced ﬁve hops, and found that all the hops were performed based
on the 30X status code of HTTP response message. However, ‘30X-HTTP’ only
accounted for 31.07% of the malicious samples. Besides, as we can see from
Fig. 4, the redirection methods leveraged by adversaries are much more diverse.
There is almost no diﬀerence among the utilization frequency of ‘30X-HTTP’,
‘iframe’, and ‘o-script’ in malicious samples. Nevertheless, Fig. 4 still reveals the
adversary’s preference for JavaScript-based redirection [16,19,28]. Combining