### 5. EXPERIMENTS AND DISCUSSION

In this section, we present the details and experimental results of our attack schemes using the power traces provided by the DPA Contest v4.2 committee. Additionally, we compare our schemes with other available ones from the official website, focusing on both the attack process and performance overhead.

#### 5.1 Experiments and Official Evaluation

The official power traces were collected from an 8-bit AVR microcontroller (Atmega163) embedded in a smart card. The microcontroller features 16Kb of in-system programmable flash, 512 bytes of EEPROM, and 32 general-purpose working registers. Power trace acquisition was performed using a LeCroy WaveRunner 6100A oscilloscope with an EM probe, at a sampling rate of 500 MS/s and an acquisition bandwidth of 200 MHz.

The DPA Contest v4.2 committee provides two sets of data: one for public use and another for performance evaluation, which is kept secret. The public set includes 16 groups of power traces, each corresponding to a different AES-128 master key. Each group contains 5000 traces, with each trace consisting of 1704402 voltage sample values representing the power consumption during 10 rounds of RSM2.0 encryption. Additional information, such as plaintext, ciphertext, master key, shuffle0 array, shuffle10 array, and offset array, is also provided. This dataset is intended for attackers to perform data preprocessing, including SNR evaluation, interesting points selection, and template building, in preparation for the online attack against the private dataset.

The private dataset, on the other hand, is not accessible to attackers and uses Success Rate (SR) and Guessing Entropy (GE) as primary metrics for comparison under the same framework. According to the official evaluation parameters, up to 1000 private traces are used to estimate the efficiency of each attack, and the mean processing time per power trace is considered to assess the computational overhead. All evaluations are conducted on an Intel Xeon CPU E7-8837 at 2.67 GHz with 256 GB of RAM.

Based on the vulnerabilities described in Sections 3 and 4, we implemented two attack schemes and submitted them to the v4.2 committee for official evaluation.

We first divided the 16 public groups of traces into two sets: one for template learning and the other for accuracy validation. We then utilized both mask and offset fingerprints to recover the offset array using the classic template attack [6]. The identification experiment of the offset array was performed with 1200 real traces randomly selected from the validation dataset (200 traces per group), and the results are presented in Tables 8 and 9. Due to the varying leakage levels for each offset byte, only the accuracy for the smallest leakage byte is shown. The tables demonstrate that even in the worst case, both the mask and offset leakage fingerprints achieve 100% accuracy in identifying the full-length fingerprint, effectively reducing RSM2.0 to an unprotected AES-128 implementation.

After revealing the entire offset array without deviation, we bypassed the shuffle countermeasure by launching either CPA [4] or TA, targeting the intermediate values of the last round as described in Section 4.2. This approach transforms the attack into an equivalent scenario against an unprotected implementation, allowing us to easily recover the last round key and derive the master key due to the reversible key schedule process of AES-128.

**Table 8: Average Identification Accuracy for Single Mask Byte Using Mask Fingerprint**

| Length | Accur. |
|--------|--------|
| 1      | 17.5%  |
| 2      | 55%    |
| 3      | 66.8%  |
| 4      | 80%    |
| 5      | 84.8%  |
| 6      | 92.5%  |
| 7      | 99.8%  |
| 8      | 99.8%  |
| 9      | 100%   |
| 10     | 100%   |
| 11     | 100%   |

**Table 9: Average Identification Accuracy for Single Offset Byte Using Offset Fingerprint**

| Length | Accur. |
|--------|--------|
| 1      | 27%    |
| 2      | 63.7%  |
| 3      | 83.2%  |
| 4      | 87.3%  |
| 5      | 97%    |
| 6      | 97.8%  |
| 7      | 98.3%  |
| 8      | 98.8%  |
| 9      | 98.8%  |
| 10     | 100%   |
| 11     | 100%   |

Figure 6 shows the official evaluation results for our TA-CPA and TA schemes, focusing on the Global Success Rate (GSR). Both schemes successfully extract the master key, and their efficiency stands out among others. For the TA-CPA attack, 11 traces are needed to achieve an 80% GSR, and 8 traces are sufficient to reduce the maximum PGE below 10. For the TA scheme, only 4 traces are required to reach an 80% GSR, and 2 traces are enough to meet the target of a maximum PGE below 10.

From a running time perspective, our schemes require less than 200 and 100 microseconds, respectively, to crack the masking defense and complete the subsequent key recovery process in each trace, further verifying the feasibility and lightweight nature of our schemes.

#### 5.2 Comparison with Other Schemes

As of the submission of this article, five other attacks have been uploaded for the v4.2 competition and evaluated by the official committee. However, detailed explanations of these schemes are not available, and we can only glean information from the brief descriptions provided by each team on the official website [2].

All five schemes follow a similar process: first recovering the offset array and then extracting the master key. Three schemes, from two anonymous attackers and Yang Li et al., explicitly mention the need for additional shuffle0 recovery to utilize the attacking point of masked S-box output. Another scheme from Hideo Shimizu et al. does not specify whether the shuffle countermeasure is attacked, so it is not included in the discussion. The only scheme that clearly describes the shuffle bypass process is from Zdenek Martinasek. However, Figure 4 in their source code illustrates a shuffled ShiftRows operation, making it impossible to attack ShiftRows as expected. Their successful attack on RSM2.0 using 104 power traces may be due to exploiting the leakage from the MixColumns operation, as explained in Subsection 4.1.

In comparison, our scheme is unique and unusual, as it reveals the offset array using three fingerprints and bypasses the shuffle countermeasure in both the first and last rounds by exploiting several potential attacking points. From a performance evaluation perspective, our best scheme requires only 4 traces to reveal the secret key with an 80% GSR, surpassing all other mentioned schemes. Additionally, 2 traces are sufficient to reduce the Maximum Partial Guessing Entropy (Max PGE) to fewer than 10 candidates, resulting in a remaining key guessing space of less than \(10^{16}\) for the AES-128 master key.

### 6. CONCLUSIONS

The leakage fingerprint discussed in this article represents a significant security risk and should be taken seriously. Although we discuss it in the context of RSM2.0, the general framework proposed in Section 3 makes it a widespread threat against most mask schemes, especially LEMS, where masks in the limited subset are reused regularly, leading to exploitable fingerprints.

Furthermore, while S-box operations have long been considered a preferred attacking point for key recovery and are typically implemented with strict protection, our findings show that focusing solely on protecting S-box execution is insufficient due to the feasibility of bypassing attacks using additional attacking points.

Finally, although RSM2.0 primarily focuses on counteracting non-profiled attacks, this limitation has little impact on our attack framework. By applying CPA to directly measure the similarity between \(T_{fp}\) and \(G_{fp}\), our fingerprint identification framework still works, though it may result in some loss of identification accuracy.

### 7. ACKNOWLEDGEMENT

This work was partially supported by the National 863 Program (Award No. 2013AA01A214) and the National 973 Program of China (Award No. 2013CB338001). Additionally, the work was supported by a grant from the National Natural Science Foundation of China (No. 61402470).

### 8. REFERENCES

[1] Implementation of the DPA Contest v4.2 on the Atmel ATmega-163 Smart Card. http://www.dpacontest.org/v4/data/v4.2/smart_v42_2.zip.

[2] Other Attacks Submitted in the Official Website. http://www.dpacontest.org/v4/42_hall_of_fame.php.

[3] S. Bhasin, N. Bruneau, J.-L. Danger, S. Guilley, and Z. Najm. Analysis and Improvements of the DPA Contest v4 Implementation. In Security, Privacy, and Applied Cryptography Engineering, pages 201–218. Springer, 2014.

[4] E. Brier, C. Clavier, and F. Olivier. Correlation Power Analysis with a Leakage Model. In Cryptographic Hardware and Embedded Systems-CHES 2004, pages 16–29. Springer, 2004.

[5] C. Carlet and S. Guilley. Side-Channel Indistinguishability. In Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy, page 9. ACM, 2013.

[6] S. Chari, J. R. Rao, and P. Rohatgi. Template Attacks. In Cryptographic Hardware and Embedded Systems-CHES 2002, pages 13–28. Springer, 2003.

[7] J.-S. Coron and L. Goubin. On Boolean and Arithmetic Masking Against Differential Power Analysis. In Cryptographic Hardware and Embedded Systems-CHES 2000, pages 231–237. Springer, 2000.

[8] G. Fumaroli, A. Martinelli, E. Prouff, and M. Rivain. Affine Masking Against Higher-Order Side Channel Analysis. In Selected Areas in Cryptography, pages 262–280. Springer, 2011.

[9] C. Herbst, E. Oswald, and S. Mangard. An AES Smart Card Implementation Resistant to Power Analysis Attacks. In Applied Cryptography and Network Security, pages 239–252. Springer, 2006.

### APPENDIX A: 16 GUESSING FINGERPRINTS FOR MASK IDENTIFICATION

| r = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 |
|-------|---|---|---|---|---|---|---|---|---|----|----|----|----|----|----|
| 2     | 2 | 2 | 2 | 4 | 4 | 4 | 4 | 4 | 4 | 4  | 4  | 6  | 6  | 6  | 6  |
| 4     | 6 | 6 | 2 | 2 | 4 | 4 | 4 | 4 | 4 | 6  | 2  | 4  | 4  | 4  | 6  |
| 2     | 4 | 4 | 4 | 4 | 6 | 6 | 2 | 2 | 4 | 4  | 6  | 6  | 2  | 4  | 4  |
| 4     | 2 | 4 | 4 | 4 | 4 | 6 | 2 | 2 | 2 | 4  | 4  | 6  | 4  | 5  | 6  |
| 6     | 4 | 4 | 6 | 4 | 6 | 4 | 4 | 4 | 6 | 2  | 4  | 2  | 2  | 2  | 4  |