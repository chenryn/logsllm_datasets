title:Exploring and mitigating privacy threats of HTML5 geolocation API
author:Hyungsub Kim and
Sangho Lee and
Jong Kim
Exploring and Mitigating Privacy Threats of HTML5
Geolocation API ∗
Hyungsub Kim
Dept. of CSE, POSTECH
Pohang, Korea
PI:EMAIL
Sangho Lee
Dept. of CSE, POSTECH
Pohang, Korea
PI:EMAIL
Jong Kim
Dept. of CSE, POSTECH
Pohang, Korea
PI:EMAIL
ABSTRACT
The HTML5 Geolocation API realizes location-based services via
the Web by granting web sites the geographical location information
of user devices. However, the Geolocation API can violate a user’s
location privacy due to its coarse-grained permission and location
models. The API provides either exact location or nothing to web
sites even when they only require approximate location. In this paper,
we ﬁrst conduct case studies on numerous web browsers and web
sites to explore how they implement and utilize the Geolocation API.
We detect 14 vulnerable web browsers and 603 overprivileged web
sites that can violate a user’s location privacy. To mitigate the privacy
threats of the Geolocation API, we propose a novel scheme that
(1) supports ﬁne-grained permission and location models, and (2)
recommends appropriate privacy settings to each user by inspecting
the location sensitivity of each web page. Our scheme can accurately
estimate each web page’s necessary geolocation degree (estimation
accuracy: ∼93.5%). We further provide suggestions to improve the
Geolocation API.
1.
INTRODUCTION
Location-based services (LBSs) are popular personalized services
that are tightly associated with user privacy. Examples of LBSs
include navigation services, local search services, trafﬁc alert ser-
vices, and localized weather services, which are especially useful
for mobile device users. However, without assured privacy, users
may not trust LBSs. Therefore, following the seminal work of
Gruteser and Grunwald [13], numerous researchers propose various
schemes [5, 7–9, 20, 23, 31, 32] to ensure location privacy in LBSs.
LBSs via the Web have become necessary because the number
of mobile devices that access the Web has increased. The HTML5
speciﬁcation satisﬁes such requirements by deﬁning the Geoloca-
tion API [29] which grants permission to access the geographical
location information (geolocation) of devices to web sites. The
API consists of two methods: GetCurrentPosition(), which
retrieve current geolocation including latitude and longitude; and
watchPosition(), which tracks updated position according to
∗This work was supported by ICT R&D program of MSIP/IITP.
[14-824-09-013, Resilient Cyber-Physical Systems Research]
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$15.00.
user movements. The accuracy of the geolocation depends on the
type of user device. For example, smart mobile devices allow web
browsers to precisely estimate the device’s geolocation by using
various sources, such as the global positioning system (GPS), cell
towers, and Wi-Fi access points (APs).
However, we identify that the current speciﬁcation and implemen-
tations of the Geolocation API face four privacy threats, which are
especially harmful to mobile device users along with exact geoloca-
tion. (1) They employ no ﬁne-grained location model. Even if a web
site only wants to know which country a user is in, both the web site
and the user cannot decrease geolocation accuracy when requesting
or delivering it. Furthermore, the web site should perform geocod-
ing to obtain country information from the received geolocation. (2)
They employ no per-method permission model. A user must allow a
web site to track his or her movements even when the user only wants
to allow the site to retrieve the current geolocation. (3) They em-
ploy a per-domain permission model without a per-page permission
model. A user cannot allow a web page site.com/map.html
to access the geolocation while disallowing another web page under
the same domain site.com/mail.html to access the geoloca-
tion. (4) They employ no re-conﬁrm process for changed web pages.
A web site preserves its permissions to access the geolocation, even
though it modiﬁes or deletes the original web page that a user has
permitted. We must solve these privacy problems to ensure the
location privacy of users in LBSs via the Web.
In this paper, we ﬁrst explore real-world privacy problems of the
Geolocation API due to vulnerable web browsers and overprivileged
web sites. We analyze a number of web browsers for popular mobile
platforms (Android and iOS) to inspect (1) the number of web
browsers that support Geolocation API, (2) the number of vulnerable
web browsers that allow any web site to access the geolocation
without user permissions, and (3) their interfaces to grant or revoke
permissions. We have detected 14 vulnerable web browsers installed
on more than 16 million Android devices via Google Play Store, and
have reported the security problem to the browser developers.
We also analyze 1,196 web sites that use the Geolocation API to
identify their characteristics and the degree of geolocation that they
demand. We discover that approximately half of the web sites using
the Geolocation API are overprivileged, i.e., they are irrelevant to
precise geolocation, because their content does not much change
even when we provide completely different geolocation.
Next, we propose a novel scheme for mitigating the privacy prob-
lems of the Geolocation API by supporting ﬁne-grained permis-
sion/location models and measuring each web page’s location sen-
sitivity. We modify an open-source web browser for Android to
(1) grant different degrees of geolocation to different domains/web
pages, (2) separate permissions for location tracking, (3) support
both per-domain and per-page permission models, and (4) inspect
web page changes and re-conﬁrm permissions for changed web
pages. Furthermore, our web browser can estimate a web page’s
location sensitivity and use this estimate to recommend a privacy
setting to its user.
Evaluation results show that our scheme has low overhead while
precisely estimating each web page’s necessary geolocation degree
(∼93.5% of estimation accuracy).
This paper makes the following contributions:
• In-depth analysis. To the best of our knowledge, this is the
ﬁrst study that analyzes the privacy problems of the HTML5
Geolocation API in depth.
• New case study. We conduct the ﬁrst case studies on the
Geolocation API regarding various web browsers and web
sites, and discover a number of vulnerable web browsers and
overprivileged web sites.
• Effective countermeasure. We propose effective counter-
measures against the Geolocation API’s privacy problems
by modifying a web browser to support ﬁne-grained permis-
sion/location models and inspect a web page’s location sensi-
tivity while considering portability and compatibility.
• Reasonable suggestions. We offer some suggestions to im-
prove the Geolocation API, such as accuracy options, per-
method permissions, and per-page permissions.
The remainder of this paper is organized as follows. §2 explains the
HTML5 Geolocation API. §3 conducts case studies on web browsers
and web sites with the HTML5 Geolocation API. §4 introduces
the threat model and assumptions of this work. §5 explains our
countermeasure in details. §6 discusses the limitations of this work
and our suggestions to reduce the privacy threats of the Geolocation
API. §7 introduces related work. Lastly, §8 concludes this work.
2. BACKGROUND
In this section, we brieﬂy explain the current localization tech-
nologies, the Geolocation API of HTML5, and privacy concerns
residing in the speciﬁcation of the Geolocation API.
2.1 Localization Technologies
Smart mobile devices estimate their geographical location by
using the global positioning system (GPS), cell-tower triangula-
tion, and Wi-Fi access point (AP) triangulation [11, 14]. The GPS
provides highly accurate latitude, longitude, altitude, heading, and
speed information to the devices. Its accuracy can be up to several
meters. The GPS, however, has two problems: (1) it takes time to
initialize the communication between a GPS receiver and GPS satel-
lites; and (2) it usually does not work indoors because GPS signals
are difﬁcult to penetrate roofs, walls, and other objects [21]. To
overcome these problems, smart mobile devices also use cell-tower-
based or Wi-Fi-based triangulation, or both to estimate their latitude
and longitude information. Although the triangulation immediately
returns location information and supports indoor positioning, its
accuracy can be up to several hundreds (Wi-Fi) or thousands (cell
tower) of meters. Its coverage and accuracy also depend on whether
LBS providers (e.g., Google) correctly and widely collect the loca-
tion information of cell towers and Wi-Fi APs.
2.2 HTML5 Geolocation API
The HTML5 speciﬁcation deﬁnes the Geolocation API [29] that
allows web sites to access the geolocation of user devices. This API
consists of two methods. (1) getCurrentPosition() inspects
geolocation of user devices including latitude, longitude, accuracy,
altitude, heading, speed, and timestamp. (2) watchPosition()
continually retrieves the current geolocation of user devices accord-
ing to user movements. Both methods have a mandatory parameter
var map=document.getElementById("map");
function getLocation() {
 if (navigator.geolocation) {

navigator.geolocation.getCurrentPosition(
showPosition);
}
else {
map.innerHTML="This browser does not support
HTML5 Geolocation API.";
}
}
function showPosition(position) {
 var latlon=position.coords.latitude+","+
position.coords.longitude;
 var img_url="http://maps.googleapis.com/maps/
api/staticmap?center="+latlon+"&zoom=13&size
=500x400&maptype=hybrid&sensor=true";
 map.innerHTML="";
}
Figure 1: JavaScript code to obtain a Google map image based on
the current geolocation. It inspects whether a web browser supports
the Geolocation API (), obtains the geolocation (), parses the
geolocation (), receives a map-image URL from the Google map
(), and displays the map image ().
PositionCallback that speciﬁes a callback function to execute
when they successfully obtain the geolocation.
Figure 1 shows a JavaScript code that uses the getCurrentPo-
sition() method to check a user’s current geolocation on the
Google map (we refer [30].) The code ﬁrst inspects whether a web
browser supports the Geolocation API (). If the web browser sup-
ports the Geolocation API, the code calls the getCurrentPosi-
tion() method to obtain the current geolocation of the user ().
When the method successfully retrieves the geolocation, it calls a
callback function showPosition(). The callback function reads
the current geolocation in an argument position (), receives
a map-image URL from the Google map by using the geoloca-
tion (), and embeds the image URL in HTML content (). In
addition, if we use the watchPosition() method instead of
the getCurrentPosition() method, we can easily track the
geolocation changes of the user.
The methods of the Geolocation API have two optional param-
eters. (1) PositionErrorCallback speciﬁes a callback func-
tion to execute when they fail to obtain the geolocation. (2) Posi-
tionOptions represents a JavaScript object consisting of three at-
tributes: enableHighAccuracy represents whether a web page
prefers the best possible results (i.e., it demands GPS-based geolo-
cation,) timeout represents the amount of time that the web page
waits for receiving the geolocation, and maximumAge indicates
the validity period of cached geolocation data. The default value
of enableHighAccuracy is false to reduce power consump-
tion due to GPS receivers, and the default values of timeout and
maximumAge are “Inﬁnity”.
2.3 Privacy Concerns of Geolocation API
The Geolocation API speciﬁcation [29] regulates some require-
ments of both web browsers and web sites to preserve user privacy.
First, web browsers need to obtain permissions from users for each
web site when it attempts to utilize the Geolocation API. Web sites
can use the geolocation information only when the users grant per-
Table 1: How the 60 Android web browsers support the Geolocation
API.
Geolocation permission Number
Permanent & temporary
Permanent only
No permission check
Not available
18
7
14
21
Table 2: Vulnerable Android web browsers that do not ask for the
Geolocation permissions.
#Downloads
Version
4.1.0.3
10,000,000+
4.3.0.2000 5,000,000+
12.30z
Name
Baidu Browser
Maxthon Browser for Android
Angel Browser
500,000+
Maxthon Web Browser for Tablet 4.0.4.1000 500,000+
100,000+
Exsoul Web Browser
3.3.3
Full Screen Browser
100,000+
2.3
1.3.4
Harley Browser
100,000+
2.7.3.1000 100,000+
Maxthon Browser for Pioneer
100,000+
1.2.5
Safe Browser - The Web Filter
100,000+
1.3.0.2
Baidu Browser for Tablet
Habit Browser
1.1.25
100,000+
50,000+
2.6.1
Browser Omega
10,000+
1.1.4
Jelly Web Browser
10,000+
Zomi Mobile Browser