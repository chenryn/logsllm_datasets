#### UPDATE 触发器: for TABLE  
1\. before for each statement (触发器函数的返回值无意义)  
2\. before for each row (第一个被触发的触发器, 触发器函数的OLD值和NEW值取自SQL语句)  
返回值的流水 :   
2\.1 返回值传递给下一个被触发的before for each row触发器, 作为下一个触发器调用的触发器函数的NEW值. OLD值修改不影响下一个触发器函数.  
2\.2 如果下面没有before for each row触发器, 则进入UPDATE行的操作, 注意被更新的行不是通过触发器函数修改过的OLD值定位的, 所以before for each row函数中对OLD值的修改不会篡改删除行的操作. (注意它和INSERT触发器的分别, 已经存在的数据(DELETE)和不存在的数据(INSERT)).  
例如update t set info='new' where id=1; 如果在触发器中修改了OLD.id=2, 不会变成update t set info='new' where id=2; 修改的行依然是1;  
2\.3 如果返回值为空, 那么跳过本行操作, (如果SQL语句涉及多行, 则跳到下一行的第一个before for each row触发器; 如果SQL不涉及多行或者已经到达最后行, 则直接跳到语句结束或after for each statement的操作;)  
3\. before for each row(可选, 上一个before for each row触发器函数的返回值影响这个触发器函数的NEW值, 不影响OLD值)  
4\. 检查约束, 删除行的操作, NEW值来自最后一个before for each row触发器函数的返回值.  
5\. 以下触发器或returning语句的NEW值取自HeapTuple, 表示物理的数据行中的数据, 因此这里的触发器返回值没有意义, 不会作为NEW值传递给其他触发器.  
after for each row 触发器 (>=0个)  
returning 语句, 展示被更新的行的最终数据, 其实就是最后一个before for each row触发器函数的返回值.  
after for each statement 触发器 (>=0个)  
#### 视图触发器返回空测试  
-- 创建基表  
```  
digoal=> create table tbl (id int, info text, crt_time timestamp);  
CREATE TABLE  
```  
-- 创建视图  
```  
digoal=> create view v_tbl as select * from tbl;  
CREATE VIEW  
```  
-- 创建触发器函数  
```  
digoal=> create or replace function tg() returns trigger as $$  
declare  
begin  
  case TG_OP  
  when 'INSERT' then  
    raise notice '%, %, %, %, new:%', TG_OP, TG_NAME, TG_WHEN, TG_LEVEL, NEW;  
  when 'UPDATE' then   
    raise notice '%, %, %, %, new:%, old:%', TG_OP, TG_NAME, TG_WHEN, TG_LEVEL, NEW, OLD;  
  when 'DELETE' then  
    raise notice '%, %, %, %, old:%', TG_OP, TG_NAME, TG_WHEN, TG_LEVEL, OLD;  
  end case;  
  return null;  
end;  
$$ language plpgsql;  
CREATE FUNCTION  
```  
-- 创建触发器  
```  
digoal=> create trigger tg0 instead of insert or update or delete on v_tbl for each row execute procedure tg();  
CREATE TRIGGER  
digoal=> create trigger tg1 instead of insert or update or delete on v_tbl for each row execute procedure tg();  
CREATE TRIGGER  
```  
-- 插入数据  
```  
digoal=> insert into v_tbl values (1, 'digoal', now());  
NOTICE:  INSERT, tg0, INSTEAD OF, ROW, new:(1,digoal,"2013-03-11 08:33:54.457727")  
INSERT 0 0  
```  
-- ROW_COUNT为0.  
-- before for each row触发器返回空, 将导致后面的for each row 触发器不被触发(注意for each statement不会跳过), 同时跳过对该行的操作.   
-- 数据未插入  
```  
digoal=> select * from tbl;  
 id | info | crt_time   
----+------+----------  
(0 rows)  
```  
-- 视图触发器返回record测试, NEW 或者OLD record修改后会带来什么影响?  
-- 创建触发器函数  
```  
digoal=> create or replace function tg() returns trigger as $$  
declare  
begin  
  case TG_OP  
  when 'INSERT' then  
    NEW.id := NEW.id+1;  
    raise notice '%, %, %, %, new:%', TG_OP, TG_NAME, TG_WHEN, TG_LEVEL, NEW;  
    return NEW;  
  when 'UPDATE' then   
    NEW.id := NEW.id+1;  
    OLD.id := OLD.id+1;  
    raise notice '%, %, %, %, new:%, old:%', TG_OP, TG_NAME, TG_WHEN, TG_LEVEL, NEW, OLD;  
    return NEW;  
  when 'DELETE' then  
    OLD.id := OLD.id+1;  
    raise notice '%, %, %, %, old:%', TG_OP, TG_NAME, TG_WHEN, TG_LEVEL, OLD;  
    return OLD;  
  end case;  
end;  
$$ language plpgsql;  
```  
-- 插入测试, 视图的最后一个被触发的instead of for each row触发器的返回值将对ROW_COUNT和RETURNING带来影响. 如下 :   
```  
digoal=> insert into v_tbl values (1, 'digoal', now()) returning *;  
NOTICE:  INSERT, tg0, INSTEAD OF, ROW, new:(2,digoal,"2013-03-11 08:49:22.983877")  
NOTICE:  INSERT, tg1, INSTEAD OF, ROW, new:(3,digoal,"2013-03-11 08:49:22.983877")  
 id |  info  |          crt_time            
----+--------+----------------------------  
  3 | digoal | 2013-03-11 08:49:22.983877  
(1 row)  
INSERT 0 1  
```  
-- 最后一个触发器的返回值变成了returning的输出.  
-- 最后一个触发器如果不返回空, 则ROW_COUNT增1, 如果返回空, ROW_COUNT则不增加.  
```  
digoal=> select * from tbl;  
 id | info | crt_time   
----+------+----------  
(0 rows)  
```  
-- 需要注意OLD的修改不会传递给下一个instead for each row触发器函数, 也不会传递给操作行的C函数, 也不会传递给returning.   
-- 基表数据插入  
```  
digoal=> insert into tbl values (1, 'digoal', now());  
INSERT 0 1  
```  
-- 基表数据  
```  
digoal=> select * from tbl;  
 id |  info  |          crt_time            
----+--------+----------------------------  
  1 | digoal | 2013-03-11 08:56:20.326402  
(1 row)  
```  
-- 删除操作, 触发器函数的返回值为OLD. 但是显然没有传递给下一个触发器函数的OLD变量.  
-- 因为两次修改后的OLD.id都是2, 如果传递过去的话, 第二次修改后的OLD.id应该是3  
```  
digoal=> delete from v_tbl where id=1 returning *;  
NOTICE:  DELETE, tg0, INSTEAD OF, ROW, old:(2,digoal,"2013-03-11 08:56:20.326402")  
NOTICE:  DELETE, tg1, INSTEAD OF, ROW, old:(2,digoal,"2013-03-11 08:56:20.326402")  
 id |  info  |          crt_time            
----+--------+----------------------------  
  1 | digoal | 2013-03-11 08:56:20.326402  
(1 row)  
DELETE 1  
```  
-- 因为返回值不为空, 所以row_count变量增1, 同时returning的值来自真实的行数据. 而不是OLD的值.  
```  
digoal=> select * from tbl;  
 id |  info  |          crt_time            
----+--------+----------------------------  
  1 | digoal | 2013-03-11 08:56:20.326402  
(1 row)  
```  
-- 因为id=2不存在, 所以不会触发instead of for each row触发器.  
```  
digoal=> delete from v_tbl where id=2 returning *;  
 id | info | crt_time   
----+------+----------  
(0 rows)  
DELETE 0  
```  
-- 以上触发器函数修改一下, 可以实现修改视图, 并且想修改表一样可以正常返回ROW_COUNT和RETURNING.  
```  
create or replace function tg() returns trigger as $$  
declare  
begin  
  case TG_OP  
  when 'INSERT' then  
    insert into tbl values (NEW.*);  
    raise notice '%, %, %, %, new:%', TG_OP, TG_NAME, TG_WHEN, TG_LEVEL, NEW;  
    return NEW;  
  when 'UPDATE' then   
    delete from tbl where tbl.* = OLD.*;  
    insert into tbl values (NEW.*);  
    raise notice '%, %, %, %, new:%, old:%', TG_OP, TG_NAME, TG_WHEN, TG_LEVEL, NEW, OLD;  
    return NEW;  
  when 'DELETE' then  
    delete from tbl where tbl.* = OLD.*;  
    raise notice '%, %, %, %, old:%', TG_OP, TG_NAME, TG_WHEN, TG_LEVEL, OLD;  
    return OLD;  
  end case;  
end;  
$$ language plpgsql;  
```  
### 小结2  
1\. 给视图触发器函数添加返回值, 可以令视图的DML操作和操作表一样正常返回ROW_COUNT和RETURNING值.  
2\. 当一个视图上创建了多个instead of for each row触发器时, 触发器函数的返回值将传递给下一个被调用的instead of for each row触发器函数的NEW变量, (OLD不传递).  
### 小结3  
1\. 哪些触发器函数的返回值没有意义?  
for each statement的触发器函数的返回值没有意义, 不会造成任何影响. 不管是返回NULL还是HeapTuple都无意义, 所以返回NULL就可以了.  
after for each row 的触发器函数的返回值也没有意义, 不会造成任何影响. 不管是返回NULL还是HeapTuple都无意义, 所以返回NULL就可以了.  
因此有意义的就是before for each row的触发器函数的返回值.   
before for each row触发器函数返回NULL将造成跳过该行的操作, 同时跳过后面所有的for each row触发器.  
before for each row触发器函数返回HeapTuple时, 返回值将传递给下一个before for each row的触发器函数的NEW, 或者行操作的C函数.  
注意OLD不会传递给下一个触发器函数或操作行的C函数.  
## 6. 触发器函数的返回值与返回行数的关系, 与变量FOUND, ROW_COUNT, RETURNING的关系.  
FOUND和ROW_COUNT在plpgsql函数中使用 :   
如果表的before for each row触发器函数返回空, 将导致跳过该行处理, 因此如果整个SQL的行都跳过处理那么最终的FOUND=false, ROW_COUNT=0;  
视图的instead of for each row触发器函数返回空, 一样, 如果整个SQL的行都跳过处理那么最终的FOUND=false, ROW_COUNT=0;  
表的returning 取真正被操作的行的最终数据.  
视图的returning 取最后一个instead of for each row触发器函数的返回值.  
FOUND和ROW_COUNT的用法如下 :   
```  
There are several ways to determine the effect of a command. The first method is to use the GET DIAGNOSTICS command, which has the form:  
GET [ CURRENT ] DIAGNOSTICS variable = item [ , ... ];  
This command allows retrieval of system status indicators.   
Each item is a key word identifying a status value to be assigned to the specified variable (which should be of the right data type to receive it).   
The currently available status items are ROW_COUNT, the number of rows processed by the last SQL command sent to the SQL engine, and RESULT_OID, the OID of the last row inserted by the most recent SQL command.   
Note that RESULT_OID is only useful after an INSERT command into a table containing OIDs.  
An example:  
GET DIAGNOSTICS integer_var = ROW_COUNT;  
The second method to determine the effects of a command is to check the special variable named FOUND, which is of type boolean. FOUND starts out false within each PL/pgSQLfunction call.   
It is set by each of the following types of statements:  
A SELECT INTO statement sets FOUND true if a row is assigned, false if no row is returned.  
A PERFORM statement sets FOUND true if it produces (and discards) one or more rows, false if no row is produced.  
UPDATE, INSERT, and DELETE statements set FOUND true if at least one row is affected, false if no row is affected.  
A FETCH statement sets FOUND true if it returns a row, false if no row is returned.  
A MOVE statement sets FOUND true if it successfully repositions the cursor, false otherwise.  
A FOR or FOREACH statement sets FOUND true if it iterates one or more times, else false. FOUND is set this way when the loop exits; inside the execution of the loop, FOUND is not modified by the loop statement, although it might be changed by the execution of other statements within the loop body.  
RETURN QUERY and RETURN QUERY EXECUTE statements set FOUND true if the query returns at least one row, false if no row is returned.  
Other PL/pgSQL statements do not change the state of FOUND. Note in particular that EXECUTE changes the output of GET DIAGNOSTICS, but does not change FOUND.  
FOUND is a local variable within each PL/pgSQL function; any changes to it affect only the current function.  
```  
参见  
http://www.postgresql.org/docs/9.2/static/plpgsql-statements.html  
## 7. 触发器的延时属性和状态.  
当触发器为约束触发器时, 可以增加延时属性, 约束触发器必须创建为after for each row触发器.  
延时触发指放在事务结束时触发.  
非延时触发指放在SQL语句结束时触发.  
```  
When the CONSTRAINT option is specified, this command creates a constraint trigger.   
This is the same as a regular trigger except that the timing of the trigger firing can be adjusted using SET CONSTRAINTS.   
Constraint triggers must be AFTER ROW triggers. They can be fired either at the end of the statement causing the triggering event, or at the end of the containing transaction;   
in the latter case they are said to be deferred. A pending deferred-trigger firing can also be forced to happen immediately by using SET CONSTRAINTS.   
Constraint triggers are expected to raise an exception when the constraints they implement are violated.  
Note that for constraint triggers, evaluation of the WHEN condition is not deferred, but occurs immediately after the row update operation is performed.   
If the condition does not evaluate to true then the trigger is not queued for deferred execution.  
```  