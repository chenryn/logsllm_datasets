MySQL的数字类型包括整数、定点数、
不过MySQL会根据这些值的实际存储方式来区别对待。每种数据类型都有以下几个特点。
每一个数据库里的表都由一个或者多个列构成。在用CREATE TABLE 语句来创建表时，
口是
口MySQL会如何比较这种类型的值，如何对它进行排序。
口
口
口
是否可以对这种类型进行索引，如何索引。
同的值会占用不同数量的存储空间）。
值的长度是固定的（即该类型的每个值都将占用同样数量的存储空间），还是可变的（不
这种类型的值要占用多少存储空间。
它可以表示何种类型的值。
MySQL数据类型
BINARY
数据类型概述
VARCHAR
CHAR
类型名称
BIT
DOUBLE
FLOAT
DECIMAL
BIGINT
MEDIUMINT
SMALLINT
TINYINT
类型名称
表3-3字符串数据类型
表3-2数字数据类型
固定长度的二进制串
可变长度的非二进制串
固定长度的非二进制（字符）字符串
、浮点数和位值，如表3-2所示。除BIT之外，其他
含
位域
双精度浮点数
单精度浮点数
定点数
大整数
标准的整数
中等大小的整数
小整数
非常小的整数
3.2MySQL数据类型
义
137
长
---
## Page 158
号（"）来代替。
用反引号（）可以将标识符引起来。如果启用了SQL的ANSI_QUOTES 模式，则可以使用双引
把保留字用作标识符。但是每次在引用它的时候，都会稍微麻烦一点，即使用引号括起来。
DELETE 和CREATE）通常都是保留字，不得用作列名。在标识符内，允许包含其他字符，或者
包括英文字母、数字、下划线（二）、美元符号（s），以及Unicode扩展字符。关键字（如 SELECT、
名规则，可参考2.2节。
一个名为mytbl的表，该表由3个列构成，
3.2.2
期时，还可以使用专用于表示年的类型。
表示）、时间戳（一种专门用来记载某个行最近一次修改时间的类型)。此外，在不需要完整日
纪、年
138
col_type表示列类型，即表明这一列可以用来容纳何种类型的值。有些类型说明符会表明
CREATE TABLE mytbl
想要创建表，可以调用CREATE TABLE 语句，并列出表中所有的列。下面这个示例会创建
col_name col_type [type_attrs] [general_ attrs]
每个列都有一个名字、一个类型，
i
h
TINYINT UNSIGNED NULL
CHAR(15) NOT NULL DEFAULT 'none',
FLOAT(10,4）,
第3章数据类型
表定义里的特殊列类型
SET
ENUM
LONGTEXT
MEDIUMTEXT
TEXT
TINYTEXT
LONGBLOB
MEDIUMBLOB
BLOB
TINYBLOB
VARBINARY
类型名称
YEAR
TIMESTAMP
DATETIME
TIME
DATE
类型名称
，总是放在列定义的最前面，并且必须是合法的标识符。关于标识符的命
简单来讲，列标识符的长度可以多达64个字符，并且可以包含的字符
，以及一些可能有的可选属性。列定义的语法如下：
表3-4时态数据类型
集合。每个列的取值可以为零个或者多个集合元素
枚举集合。每个列的取值将是这个枚举集合中的某一个元素
大型非二进制串
中等大小的非二进制串
小型非二进制串
非常小型的非二进制串
大型BLOB
中型BLOB
小型BLOB
非常小型的BLOB（二进制大对象）
可变长度的二进制串
，分别为f、c和i：
年份值，格式为CCYY或YY
时间戳值，格式为CCYY-MM-DDhh:mm:ss
日期加时间值，格式为CCYY-MM-DDhh:mm:ss
时间值，格式为：hh：mm：ss
日期值，格式为CCYY-MV-DD
含
舍
义
续
表
使
---
## Page 159
以及它们的默认值是什么。
有
建它时也不会带有DEFAULT子句。也就是说，它没有默认值。在往表里插入新的行时，如果没
NULL。否则，如果该列不允许为NULL 值，并且在定义里没有显示包含DEFAULT子句，那么在创
的默认值def_value必须是一个常量。它不能为表达式，也不能引l用其他列。
那么该列将被赋值为默认值def_value。除了TIMESTAMP列和DATETIME列有限制以外，这里
指定 DEFAULT def_value
3.2.3
NULL）的前面。
的做法是，将数据类型特有的属性（如UNSIGNED或ZEROFILL）放在通用属性（如NULL和NOT
影响。
这些属性的作用是对该类型做进一步的修饰和限定，它们会对MySQL处理这个列的方式产
符有多少个)。对于定点类型和浮点类型，还可以指定有效位数和小数位。
列的最大长度为255个字符。有些类型说明符允许你指定一个最大显示宽度（用于显示值的字
名称里。例如，CHAR(10）显式地指定了一个具有10个字符的长度；而TINYTEXT 则隐含表示
存储在列里的值所允许的最大长度。而对于其他的类型说明符，所允许的长度则隐含在它们的
为列指定具体值，这会影响MySQL对列的处理。
如果某个列定义没有显式包含DEFAULT子句，并且该列允许为 NULL值，那么其默认值为
在列的数据类型后面，除了指定多个通用属性外，还可以指定一些类型特有的可选属性。
使用 SHOW CREATE TABLE tbl_name语句，可以查看到表里的哪些列带有 DEFAULT子句，
列的隐含默认值取决于它的数据类型。
除了BLOB与TEXT 类型、空间类型，或者具有AUTO_INCREMENT 属性的列以外，你还可以
口对于数字列（不包括那些具有AUTO_INCREMENT属性的列），其默认值为O。对于
口如果没有后
如果存在多个列属性，那么它们的先后顺序必须遵从一定的规则。
口通用属性可用于任何一种数据类型，除少数例外。例如，可以指定NULL或NOT NULL
口所允许的类型特有属性取决于具体的数据类型。例如，只有数字类型才有UNSIGNED 和
口
口
个空集，不过它等价于空串。
为枚举集里的第一个元素。对于 SET 列，如果不允许包含 NULL值，那么默认值将是一
对于字符串类型（不包括ENUM类型）列，其默认值为空串。对于ENUM列，其默认值
初始化规则比较特殊。更多相关信息请参考3.2.6.6节。
‘0000-00-00·）。对于TIMESTAMP列（以及MySQL5.6里的DATETIME列），其自动
对于大多数时态类型列，其默认值为该类型的“零”值（如DATE类型的“零”值是
AUTO_INCREMENT 列，其默认值是下一个列序号。
息请参考2.12节。
需要参考哪一种严格模式在起作用。更多相关细节请参考3.3节。更多与事务有关的信
行，然后回滚。对于非事务性的表，如果这行是该语句插入的第一个行，那么会出现
在启用 SQL的严格模式之后，如果表是事务性的，就会出现错误。这条语句会中止执
隐含默认值将在稍后讨论。）
义列的默认值。有关默认值的处理方式请参考3.2.3节。
ZEROFILL属性；只有非二进制串类型才有CHARACTERSET和COLLATE属性。
中止执行，或者选择把这列设置为它的隐含默认值，同时发一条警告消息。具体的选择
一个错误，并且该语句会中止执行。如果插入的不是第一行，那么你可以选择让语
指定列的默认值
来表明某列是否允许NULL值。对于大部分的数据类型，
启用SQL的严格模式，那么该列将被设置成其数据类型的隐含默认值。（各种
子句，以此来表明：当在创建新的行时，如果没有显式地指定某个值，
，都可以通过DEFAULT子句来定
3.2MySQL数据类型
一般情况下，比较安全
139
句
生
---
## Page 160
类型的位数。对于那些带有小数部分的数据类型，D代表的是数学精确度（小数点后面的数字
间大小。M表示整型的最大显示宽度、浮点类型和DECIMAL类型的精度（有效位数），以及BIT
数值也可以赋给允许有小数部分的类型列，只不过它们的小数部分等于零。
3.2.4数字数据类型
140
BIT[(M]
DOUBLE[(M,D)]
FLOAT[(M,D)]
DECIMAL([ML,D]])
BIGINT[(M)]
INT[(M)]
MEDIUMINT[ (M)]
SMALLINT[(M)]
TINYINT[(M)]
表3-5列出了每种数字类型的名称和取值范围。表3-6列出了各种数字类型所要求的存储空
带小数部分的值可以赋值给一个整型列，但会使用“四舍五入”规则近似成整数：如果小
口BIT类型，用于存储位域值。
口
口精确值类型，它包括整数类型和DECIMAL。整数类型用来存放没有小数部分的数字，
MySQL的数字数据类型分为以下3大类。
星球距离等类型的数据都很适合使用浮点值来表示。
如3.9E+4或-0.1E-100。如果对数值精确度的要求不太严格，或者因为数值很大，
也可以用来存放带有小数部分的数字，但它们存储的是可能发生四舍五入的近似值
浮点类型，它细分为单精度（FLOAT)和双精度（DOUBLE）。这些类型和 DECIMAL一样，
且关于它们的计算也是精确的。
类的数据。整数和DECIMAL类型的值都会被精确地保存起来，不会进行四舍五入；并
部分的精确值，如3.14159、－.00273或-4.78。这种类型非常适合用来保存像币值之
人口数或者库存量），都可以用一个整型列来保存。DECIMAL 类型可以保存带有小数
如43、-3、0或-798432。只要是能用整数来表示的数据（如精确到磅的重量值、家
第3章数据类型
于DECIMAL类型无法表示，那么浮点类型则是个不错的选择。诸如粮食平均亩产、
类型名称
(scale)。
最大非零值：±1.7976931348623157E+308
有符号值：-9223372036854775808-9223372036854775807(-2~2-1)）
无符号值：0~16777215（0~2-1）
无符号值：0~65535（0~21-1）
有符号值：-128~127（-2”~27-1）
表3-5数字数据类型的取值范围
0~2M-1，1≤M≤64
最小非零值：±2.2250738585072014E-308
最大非零值：±3.402823466E+38
最小非零值：±1.175494351E-38
由M和的值决定
无符号值：0~18446744073709551615（0~2-1）
无
有符号值：
有符号值：-8388608~8388607（-223~2-1)
有符号值：-32768~32767（-21~2-1)
无符号值：0~255（0~2-1）
符号值：0
0~4294967295 (0~23-1)
-2147683648~2147683647 (-23~23-1)
取值范围
以
庭
---
## Page 161
值为10。换句话说，
位数)。其中，M的取值范围是1~65；D的取值范围是0~30，且不超过M。
为 UNSIGNED 不会扩大该类型的取值范围，而只会“砍掉”整个负数部分。
值不会像浮点数那样存在四舍五入的问题一
定值的正常显示要求超过了M个字符，那么 MySQL会把该值完整显示出来。
不会把这列里的最大值限定为999。此外，显示值也不会被强行截断为M个字符。如果某个特
神奇地缩小一牛
个字节的存储空间。即使把它定义为BIGINT（4），但 BIGINT列所需要占用的存储空间也不会
所需要
个默认的宽度。
决定着MySQL 将用多少个字符来显示该列里的值。例如，MEDIUMINT（4)会指定一个显示宽度
列定义为UNSIGNED，！