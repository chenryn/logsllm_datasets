is because we only use 64 and 32 eviction set size when K
is 14 and 15, and these eviction sets are not large enough to
evict a whole cache set.
From this set of experiments, we suspect that virtual mem-
ory address bits 12 to 24 are used in calculating the PTE cache
set index and that each PTE cache set has 128 entries (i.e., a
128-way cache).
Discovering prefetching behavior. Our guess above uses
13 bits as the index into the PTE cache and assumes that
the PTE cache has 8192 sets. If this guess is correct,
then an eviction set whose (VPN%8192) is different from
(VictimVPN%8192) should fall completely into a different
cache set from the victim’s. To verify this assumption, we
perform another set of attacks to the VictimVPN 0. In the
nth attack, we construct its eviction set using VPNs where
(VPN%8192 = n), and we change n from 0 to 8191.
Figure 3 plots the accuracy of the ﬁrst 64 attacks (the rest of
698    28th USENIX Security Symposium
USENIX Association
Figure 2: Effect of Number of In-
dex Bits.
Figure 3: Effect of Eviction Set Off-
set. X axis represents the ﬁrst VPN in
an eviction set (i.e., the “offset” of an
eviction set”).
Figure 4: Effect of Secondary In-
dex. Error bars show the standard devi-
ation across 1000 VictimVPNs.
the attacks have the same pattern and we omit them from the
ﬁgure). The black solid line shows the result of VictimVPN
0. Surprisingly, not only the 0th attack (VPN%8192 = 0) has
high accuracy, but also the 1st to the 7th attacks. To further un-
derstand this effect, we perform the same set of attacks on an-
other two VictimVPNs, 20 and 50. With these VictimVPNs, the
accuracy is high from 16th to 23rd attacks and 48th to 55th at-
tacks respectively. These results imply that evicting any VPN
within an eight-VPN range of (VictimVPN− VictimVPN%8)
to (VictimVPN− VictimVPN%8 + 7) has the same effect.
We suspect that the RNIC prefetches eight VPNs at a time.
This ﬁnding implies that instead of using 13 bits as cache
index bits as in PythiaPTEStraw, only the higher 10 bits (bits
[15:24]) are used for index and the lower 3 bits (bits [12:14])
are used for prefetching. The RNIC cache thus only has 210 =
1024 sets.
Discovering secondary index. Our attack strategies so far
work well (> 90% accuracy) with the VictimVPNs we tested
(e.g., 0, 20, 50). However, when we test the same attack strat-
egy on some other VictimVPNs (e.g., 6195, 30950), the accu-
racy can sometimes drop to around 75%. A dropped accuracy
means that our eviction set cannot evict the VictimVPN, i.e.,
the VictimVPN is in another cache set whose index is not the
same as the index calculated using bits [15:24].
We thus suspect that there exists another 10 bits that are
used to calculate where out of the 1024 sets a VictimVPN can
fall into. To answer this question, we use a moving window
of 10 bits, from bits [15:24] to bits [29:48], in the victim’s
virtual memory address. We randomly pick 1000 VictimVPNs
and attack each of them by forming an eviction set with an
index calculated with the moving window of 10 bits and an
index calculated with bits [15:24] (64 operations under each
index). We use two indices in this experiment because our
alternative experiment of using just the index calculated by
the moving window does not yield good accuracy. Figure 4
plots the average attack accuracy across 1000 VictimVPNs
and their standard deviation (in error bars). Bits [24:33] yields
the best average accuracy and smallest deviation. Thus, we
believe that these bits are used as a second index into the PTE
cache. Note that when the moving window is bits [15:24], the
accuracy deviation is high, indicating that using bits [15:24]
alone is not good enough.
Figure 5: Reverse-Engineered PTE Cache Organization.
Complete algorithm.
Figure 5 presents the ﬁnal PTE
cache architecture we speculate RNICs use based on our
reverse engineering results. The PTE cache has 1024 sets and
128 ways. A PTE can be cached at one of the two cache sets.
Two groups of bits are used to calculate the index of these
two cache sets. The ﬁrst group is bits [15:24], and the second
group is bits [24:33]. We call them low index bits and high
index bits. From our observation, both the high and the low
index bits can decide which cache set will be used to cache a
PTE. A PTE will be cached in either the cache set calculated
by the high index bits or the cache set indicated by the low
index bits. Every time when a PTE is accessed, its neighbor-
ing PTEs will also be fetched to the same set and bits [12:14]
determine the 8 PTEs that will be prefetched.
Based on this reverse-engineered architecture, we present
the ﬁnal PTE-based EVICT+RELOAD attack, PythiaPTEFull.
We form half of the eviction set of a VictimVPN with VPNs
that have the same low index bits as the VictimVPN and an-
other half with VPNs that have the same high index bits as
the VictimVPN. Algorithm 5 presents the complete algorithm.
4.5 Evaluation Results
We now present our evaluation results with the attacks de-
scribed above.
4.5.1
We performed a set of experiments with three machines as de-
scribed in the beginning of this section in our lab environment
Isolated Environment
USENIX Association
28th USENIX Security Symposium    699
Number of Index Bits03691215Accuracy (%)020406080100Doubling eviction−set−sizeFixed eviction−set−sizeVPN Offset016324864Accuracy (%)020406080100VictimVPN 0VictimVPN 20VictimVPN 50High Index Start Bit1517192123252729Accuracy (%)70809010033:2414:1211:0Page OﬀsetPrefetchLow IndexHigh Index24:15virtual memory addressvirtual page number (VPN)Eviction set for victim VPN 0x10000000000XXX128 waysindex201…1024:VictimVPN, eviction set size
Algorithm 5: Forming Eviction Set - Full
Input
Output :an eviction set targeting the victim virtual memory address
eviction_set ← {}; prefetch_bits ← 3;
low_index ← (VictimVPN >> prefetch_bits)&(1 > high_index_start)&(1 << index_bits− 1); mask_high ← high_index << prefetch_bits;
for i = 0 to evict_set_size/2 do
VPN ← i << (index_bits + prefetch_bits) + mask_low;
if VPN (cid:54)= VictimVPN then
index_bits ← 10; high_index_start ← 12;
insert VPN into eviction_set;
end
end
for i = 0 to evict_set_size/2 do
VPN ← i << (index_bits + high_index_start) + mask_high;
if VPN (cid:54)= VictimVPN then
insert VPN into eviction_set;
end
end
output eviction_set;
Figure 6: Timing Differences. Each
line presents the timing differences of
each case over 1000 trials.
Figure 7: Accuracy of Attacks. Er-
ror bars show the standard deviation
across 1000 VictimVPNs.
Figure 8: Latency of Attacks.
without any other network trafﬁc.
Timing differences. Our side channels are based on timing
differences between consecutive loads of the same memory
address. To measure miss latency, we evict the RNIC SRAM
using either MRs or PTEs and then issue an RDMA operation.
To measure hit latency, we simply repeatedly issue the same
RDMA operation. The measurements in Figure 6 show a
clear timing difference between hit and miss latency. When
we use MRs to evict SRAM, both the victim’s MR and all the
PTEs under this MR will be evicted. An RDMA operation
afterwards will need to fetch both the PTE and the metadata
for the MR containing the page from host main memory
through the PCIe bus. On the other hand, using PTEs to evict
will only evict the victim’s PTE and reloading will only fetch
the PTE. This explains why the miss latency of MR-based
eviction is higher than that of PTE-based eviction.
Attack accuracy and latency.
Figures 7 and 8 plot the
accuracy and latency of four attack strategies: PythiaMR,
PythiaPTEBasic, PythiaPTEStraw, and PythiaPTEFull, as we
change the eviction set size. As expected, with the same evic-
tion set size, the time to perform these four attacks is similar,
since they all use the same amount of RDMA operations.
With bigger eviction sets, all attacks become slower.
PythiaPTEFull’s accuracy is the highest: it can achieve 97%
accuracy with only 57 µs per attack (when the eviction set
size is 256). PythiaMR and PythiaPTEBasic have low accu-
racy, although we do observe PythiaMR’s accuracy improves
signiﬁcantly as the eviction set size increases (PythiaMR’s
accuracy reaches 90% with 215 eviction set size). This re-
sult demonstrates the beneﬁt of using our reverse engineering
ﬁndings.
Another observation is that the accuracy of PythiaPTEFull
peaks when the eviction set size is 256 and remains the same
when increasing the size further. This implies that the PTE
cache has 128 ways, since we construct two cache sets with
256 entries in total.
Evaluation with different RNICs. All our experiments
so far are performed with the Mellanox ConnectX-4 RNIC
(most RDMA deployments in real datacenters use ConnectX-
4 [32, 47]). We further validate our attacks on Mellanox
ConnectX-5 [49] and ConnectX-3 [46] RNICs. ConnectX-5 is
the latest generation of RNICs from Mellanox and ConnectX-
700    28th USENIX Security Symposium
USENIX Association
Latency (us)012345678Percentile0204060HitMiss−PTEMiss−MREviction Set Size2  62  72  82  92   10Accuracy (%)020406080100PTE−FullPTE−StrawMRPTE−BasicEviction Set Size2  62  72  82  92   10Latency (us)050100150200250MRPTE−FullPTE−StrawPTE−BasicFigure 9: Timing Differences in
ConnectX-5. Each line presents the
timing differences of each case over 1000
trials.
Figure 10: Accuracy of Attacks in
ConnectX-5. Error bars show the stan-
dard dev of 1000 VictimVPNs.
Figure 11: Timing Differences in
ConnectX-3. Each line presents the
timing differences of each case over 1000
trials.
Figure 12: Timing Differences in
CloudLab. Each line presents the tim-
ing differences of each case over 1000
trials.
Figure 13: Accuracy of Attacks in
CloudLab. Error bars show the stan-
dard deviation across 1000 VictimVPNs.
Figure 14: Latency of Attacks in
CloudLab.
3 is the previous generation of ConnectX-4.
Figure 9 plots the timing results of SRAM hits and misses
(due to eviction by MRs and by PTEs) on ConnectX-5.
ConnectX-5’s performance is better than ConnectX-4 on all
cases. A clear timing difference between misses and hits re-
mains, and misses caused by MR-based eviction are slower
than by PTE-based eviction. Figure 10 plots the accuracy of
the four types of attacks. The accuracy results are similar to
ConnectX-4. Attack latency is also similar to ConnectX-4
and we omit the latency ﬁgure. Thus, we can conﬁrm that
ConnectX-5 uses a similar SRAM architecture as ConnectX-
4, and it has the same side channels as ConnectX-4. We can
launch the same attacks on ConnectX-5 with high accuracy
and low latency.
We then perform the same set of experiments on ConnectX-
3, see Figure 11. The hit latency with ConnectX-3 is longer
than ConnectX-4. As hardware evolves, its internal perfor-
mance often improves, which can explain why hit latency
improves over generations of Mellanox RNICs. Surprisingly,
the miss latency due to MR-based eviction is shorter on
ConnectX-3 than on ConnectX-4 and ConnectX-5. Misses in
RNIC SRAM involve the RNIC fetching metadata from the
host main memory. We suspect the reason why miss perfor-
mance drops in newer generations is because RNICs add more
metadata for each data entry in newer generations, requiring
longer time to fetch more metadata. As a result, the timing
difference between miss and hit for ConnectX-3 is small.
Comparing ConnectX-3, ConnectX-4, and ConnectX-5, the
three generations of RNICs from Mellanox, we found that as
hardware RNICs evolve, their performance improves quickly,
while the PCIe bus and host memory speed improve very
slowly. As a result, the discrepancy between hit performance
and miss performance becomes larger and we believe that this
trend will continue in the future.
4.5.2 Public Cloud Environment
CloudLab [65] is a public cloud that has close to 15,000 cores
distributed across three sites in the United States. We eval-
uated our attacks on a cluster that is connected with RoCE
switches. Each machine in this cluster equips two Mellanox
ConnectX-4 25 Gbps adapters. These RNICs are of the same
product generation as our lab’s ConnectX-4 RNICs, with the
difference that our RNICs are 100 Gbps adapters. Both types
of adapters can be conﬁgured for Ethernet (RoCE) and for
InﬁniBand. We conﬁgure ours for InﬁniBand, and Cloud-
Lab’s are conﬁgured for RoCE. Apart from RNIC differences,
CloudLab is used concurrently by many different users; it has
a more complex, hierarchical network topology; and it uses a
RoCE network instead of InﬁniBand. At the time of our test,
129 out of 199 physical machines in the cluster were in use.
We repeat the same set of experiments as Section 4.5.1.
Similar to our lab’s experiments, we use three machines, a
server, a victim client, and an attacker client. Figure 12 plots
the timing difference of RNIC SRAM hit and misses (due
to MR-based eviction and PTE-based eviction). Similar to
our isolated environment results, misses caused by MR-based
eviction are slower than misses caused by PTE-based eviction,
and both types of misses are slower than hits. In CloudLab’s
shared network and shared machine environments, the laten-
cies of all accesses are longer than in our lab environment,
USENIX Association
28th USENIX Security Symposium    701
Latency (us)012345678Percentile010203040HitMiss−PTEMiss−MREviction Set Size2  62  72  82  92   10Accuracy (%)020406080100PTE−FullPTE−StrawMRPTE−BasicLatency (us)0123456Percentile010203040HitMiss−PTEMiss−MRLatency (us)012345678Percentile010203040HitMiss−PTEMiss−MREviction Set Size2  62  72  82  92   10Accuracy (%)020406080100PTE−FullPTE−StrawMRPTE−BasicEviction Set Size2  62  72  82  92   10Latency (us)0100200300400MRPTE−FullPTE−StrawPTE−Basicbut the timing differences are still clear.
Figures 13 and 14 plot the accuracy and latency of the four
types of attacks in CloudLab. Similar to the results in Fig-
ures 7 and 8, With the same eviction set size (and thus similar
latency), PythiaPTEFull and PythiaPTEStraw have higher ac-
curacy than PythiaMR and PythiaPTEBasic. However, these
attacks have larger variation in accuracy compared to attacks
in our lab’s environment because of the more dynamic envi-
ronment in CloudLab.
5 Attacking Real RDMA-Based Systems
To demonstrate the feasibility of launching side-channel at-
tacks on real RDMA-based applications, we design and per-
form a set of attacks on Crail [7, 70], an open-source RDMA-
based key-value store written in Java. A Crail system consists
of several roles: a server which stores key-value pairs, a na-
menode which stores metadata and manages the control path,
and clients which issue key-value pair gets and sets to the
server via a Crail-provided API. We install each component
on a separate machine and connect all of them with RDMA.
This section presents our design and evaluation of attacks on
Crail.
5.1 Attacks
Based on the attack primitives described in Section 4, we
designed three attacks on Crail. All these attacks have the
same goal: knowing whether or not the victim Crail client
accesses a speciﬁc key-value pair.
MR-based attack (PythiaCrailMR). Our ﬁrst attack uses
MR-based eviction as described in Section 4.3.1. This attack
requires three attacker processes. The ﬁrst is a Crail client
process (Pc). The second and the third processes run our attack
code, with the second one running on the Crail server machine
(Ps) and the third one running on any other machine (Pa) (it
can be the same machine as the one where Pc runs). In the
preparation phase, Ps registers a large number of MRs. In
the eviction phase, Pa issues one-sided RDMA reads to these
MRs. Finally, Pc performs a Crail get operation to reload
the victim key-value pair. PythiaCrailMR requires Ps and Pa