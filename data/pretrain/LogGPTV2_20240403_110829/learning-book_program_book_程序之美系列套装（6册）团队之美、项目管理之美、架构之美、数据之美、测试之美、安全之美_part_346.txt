功能，假设这20个测试用例提供60%的代码覆盖，那么在余下的40%
代码模块中所做的任何更改，用现有的测试套件是无法测试的。因
此，我们可以进行随机测试，希望这样可以测试和验证所作的改
动，或者写一个新的测试用例。
示例二
我们看一看Firefox浏览器加检和执行测试用例的例子
https://wiki.mozilla.org/QA:CodeCoverage。
在加检模块上，执行专为该模块设计的测试用例，我们就能够了解
给定模块的测试所能提供的代码覆盖范围。这项工作让我们了解了
代码有测试覆盖的部分，以及模块中没有测试覆盖的部分。
通过定期执行测试套件生成代码覆盖率报告，我们可以监测源代码
覆盖面的差距的变化。[2]
示例三
源文件file1.cpp、file2.cpp和file3.cpp都在过去24小时内被改动过，并
签入源代码控制系统中。
一个每天定时执行的批处理文件或定时作业，在源树上用diff命令与
昨大的版本进行比较，生成一个文本报告，列出被改动的源文件，
以及被改动了的代码行。
有了这个数据，我们就可以如在“示例四”中所说的那样，找到可以
验证这一改变的测试用例的清单。
1975
---
## Page 1977
我们学到了什么
我们知道如何用Valgrind的工具套件，通过动态二进制分析，生成可
执行程序中函数的调用和被调用关系。
我们也通过Callgrind插件确定了测试用例与源文件的映射关系。要
做到这一点，我们需要用带有编译符号的调试或优化版程序，以建
立调用关系图。
我们已经用KCachegrind工具分辨了源代码中的源函数、同步函数和
管道函数。
我们用gcov生成了加检的可执行文件。
通过执行所有的测试，我们也有了累积的代码覆盖范围，以了解被
覆盖的代码区和还存在的差距。
从源代码控制系统，我们可以得到过去24小时内修改过的文件名
单，以及被改动代码的细节。
有了这些数据，我们就可以构造一个有效的、以变化为中心的测试
套件，能以最高的概率测试到代码库的变化。
示例四
源文件file1.cpp、file2.cpp和file3.cpp都在过去24小时内被改动过，并
签入到源代码控制系统中。
一个每天定时执行的批处理文件或定时作业，在源树上用diff命令与
昨大的版本进行比较，生成一个文本报告，列出被改动的源文件，
以及被改动了的代码行。
我们有以下代码覆盖率数据：
filel.cpp有80%的覆盖率
file2.cpp有30%的覆盖率
file3.cpp有100%的覆盖率
情景一
1976
---
## Page 1978
file1.cpp中的函数1改变了。这是一个源函数，有5个其他函数调用了
这个函数。这些数据是从我们早些时候生成的调用图中得到的。
我们有与filel.cpp对应的测试用例。源代码覆盖的细节表明，该测试
覆盖了函数1中的代码块。
我们现有的测试套件可以用于验证主要的代码更改。我们还找到了
覆盖调用函数1的其他5个函数源文件的测试用例。我们确认对应到
源文件的测试用例是否确实覆盖了这些函数，并标出没有被覆盖到
的函数，以备以后测试开发。之后，我们对调用这5个受到间接影响
的函数的其他函数重复这个过程。
情景二
ile2.cpp中的函数2被修改，这是一个同步函数。这个数据也是从我
们早些时候生成的调用图中得到的。
这个文件的代码覆盖率很低，只有30%。而且产生代码覆盖的测试
都与函数2没有关联。虽然我们没有已有测试用例可以验证这一变
化，失误的风险却仅限于这个函数。但我们要把这个情况作上标
记，以使根据项目任务的优先级尽快开发验证这一改变的测试用
例。
情景三
file3.cpp中的函数3被修改，这是一个管道函数。它调用了3个函数，
同时被其他4个函数调用。
我们有涉及filel.cpp的测试用例。源文件覆盖的细节表明，该测试覆
盖了属于函数1的代码块。
我们用现有的测试套件验证此代码更改。我们又找出与包含那4个调
用函数的源文件相关的测试用例，确认这些测试用例是否覆盖这几
个特定的函数，标记出没有被覆盖的函数，以备日后的测试开发，
之后，我们对调用这4个受到间接影响的函数的其他函数重复这个过
程。
这样，我们有了可以测试更改的测试用例。我们也找出了测试套件
中潜在的差距，知道哪些部分的改变还无法测试到，这是只有用这
个方法才能得到的信息。
1977
---
## Page 1979
像往常一样，这种以变化为中心的测试清单，要与一个固定的有限
功能测试用例清单一起运行。这个固定测试集是为了测试应用程序
的整体行为。
[11有关如何执行Callgrind和KCachegrind工具的详细信息，请参阅下
列资料：http://valgrind.org/，http://kcachegrind.sourceforge.net/cgi-
bin/show.cgi/KcacheGrindCalltree
Format,http://kcachegrind.sourceforge.net/cgi-
bin/show.cgi/KcacheGrindlndex,http:/kcachegrind.sourceforge.net/cgi
bin/show.cgi/KcacheGrindInstallation，及
http:/www.stanford.edu/class/cme212/profiling.pdf.
[2]Mozilla用脚本将代码覆盖率HTML报告转换为CSV文件，以便用
程序进行分析。见http://wiki.mozilla.org/Firefly。
结论
以变化为中心的测试并不是一项难以完成的任务。一旦很好地了解
了现有的测试套件所提供的覆盖范围、可执行文件依赖关系的调用
图，以及给定时间区域源代码所作改动的细节，那么生成能够测试
代码改动的动态测试清单就只是一项简单的工作。在大型代码库上
的试验表明，被测试遗漏的错误清单变短了，项目节省了大量的测
试时间。这种方法，对于需要数小时以上“在每天晚上运行全部测
试"的情况特别有益。采用以变化为中心的测试方法，每大晚上需要
运行的测试套件的数量会大为减少。
此外，利用以变化为中心的测试方法，可以洞察对应代码库每日的
变化，以及代码覆盖面存在的差距。这为进行针对性的测试开发提
供了基础。
但是，这种方法并不主张停止定期运行全方位的系统测试。全方位
的系统测试需要以较长的间隔定期执行，而不是每天或每夜运行。
第12章软件以用为本
Karen N.Johnson
没有人的时候再哭吧，我不想添乱，这儿已经够混乱了。我不知道
刚刚发生了什么，但我知道一旦泪水流出来，就再也止不住。
1978
---
## Page 1980
于是我深深地吸一口气控制住自己的情绪。母亲正躺在医院的病床
上，身上插满了各式仪器。她的眼晴紧紧地闭着，好像睡得很熟。
我离她这么近，却感觉她在很远很远的地方。
母亲不幸摔倒，48小时之内引发了脑部损伤，在神经外科刚刚进行
了急救。现在正是医生和护士所说的术后昏迷状态。她的病情不明
朗，状态也不稳定。
波士顿布莱根妇女医院的神经外科重症监护室呈弧形，每个病人拥
有自已的一间回形的病房。指定给每个病人的护士就在儿英尺不远
处全天候地守着病人。那天，各种各样的人，像医生、专家、病人
家属，在弧形的走廊里不断穿梭，进出于一个个凹形病房。空气里
弥漫着急救的气息。我想每间病房不仅有病人，还有他们的家人和
接下来要发生的事情。每间ICU都有一个故事，一个正在讲述的故
事，以及处于等待和痛苦深渊中的亲人。
ICU允许一名家属留在忙碌的病房当中，于是我独自陪着母亲。周围
布满了各种仪器、试管、电线和不知名的设备。所有的设备看起来
让人心惊胆战。为了分散注意力，我并始浏览设备上的标签。希望
阅读能帮助我控制情绪，不那么紧张。标签上印着公司的名字，像
AbbottLabs、Hospira和Baxter。慢慢地，我意识到我知道这些公司的
名字，我知道曾经在这些公司工作过的人们。噢，我也曾经在这些
公司工作过。记忆的闸门慢慢地打开，做过的项目和同事们在脑海
中浮现出来，多么美好的回忆！
这时，一支特别的试管吸引了我的视线，是一支饲管。我痛苦地看
到母亲的名字写在上面。她曾经说过，万一她需要用饲管，我们就
应该....不，我不愿想。挂在四极柱上的无菌袋流出的液体婉蜓地
输人母亲的身体。我靠近那只试管，那上面写着“总肠外营养”
（TPN）。我也曾经为类似的医疗设备和相应的电脑软件工作过，
软件用于为病人构建正确的液体组成成分。如果液体剂量或混合出
错，病人就会死亡。
我意识到这正是我曾经测试过的软件。
与工作的关系
三周之后，母亲的状况稳定了，我该回位于芝加哥的家了。她的病
情好转了许多，于是从ICU转移到普通病房，之后又转移到康复中
1979
---
## Page 1981
心。虽然她恢复得很快，但离完全恢复还有很长的一段时间。一旦
回到芝加哥，我就要再次找工作了。有时候工作找我，有时候我找
工作。自从3年前我离开全职工作岗位开始独立顾问职业生涯以来，
一直就是这样。
在家庭办公室安定下来之后，我联系了一些朋友，并询问工作机
会，直到接了一个意外的电话。电话从一个本地公司打来，有时候
我会在这家公司做合同工。他们问我是否可以作验证工作，并且是
他们的客户指定，询问我是否可以做，因为我有做过医疗软件的经
验。是谁在找我？什么样的工作呢？我有一个很好的预感。
试具有足够健壮性的测试人员。你是否感兴趣？”
签过工作合同之后，我和一位药剂师一起评审TPN产品的软件测
试。这个产品就是我母亲现在赖以生存的产品。在医院或康复中
心，人们很难知道哪一天要用哪个设备，特别是这个设备不在患者
身边，而是在指派给患者之前，用于医学实验室或医院实验室重新
构建医疗方案的时候。
所以我不能肯定我在这个领域测试的软件是否正是用于构建母亲赖
以生存的医疗方案。可是看到过母亲用同样软件驱动的设备，这无
疑对我是一种激励。
如果你没有测试过医疗软件或没有为医疗设备工作过，你可能认为
测试和开发过程比其他任何软硬件都严格。但并非如此。
事实是没有太多的区别。确实，在医疗软件测试当中，有海量的文
档、内部审核以及来自食品和药物管理局（FDA）的最终审批结
论。但是当你透过现象看本质时，医疗软件的测试就像其他软件或
产品一样，最大限度地依赖于人和人的能力。没有特别的魔法，任
何产品的质量都来自于团队成员的天资和能力。
我回首早期测试医疗软件的经验，团队中总有儿个人，他们的个人
信念、团队意识和纯释正直的品格使得团队与众不同。我那时是一
个团队成员，有幸目睹了正直品格的力量，那无疑是众多优秀品格
之一。在我20年的软件工作中，经历了各种技术的成功与失败，是
“人"才使产品与众不同。这种优秀品质，虽然不能由画布中感知，
也不能由交响乐中听到，但无损于其优秀。我相信这正是我的故事
的真谛。
1980
---