### evasi0n7 Jailbreak

The evasi0n7 jailbreak, developed by the evad3rs team, was the second major jailbreak released by this group. It targeted iOS versions 7.0 through 7.1 beta 3, excluding the Apple TV. Similar to its predecessor, evasi0n7 employed a series of sophisticated techniques to bypass userland mitigations on the device.

#### Key Techniques
- **afcd Exploitation**: The jailbreak coerced afcd into accessing the root filesystem, circumventing the service's sandbox profile by injecting a dynamic library. This library utilized a code-signing bypass (CVE-2014-1273) to neutralize the relevant sandbox functions.
- **CrashHouseKeeping Vulnerability (CVE-2014-1272)**: This vulnerability was exploited to change the permissions on `/dev/rdisk0s1s1`, granting write access to the root filesystem by directly writing to the block device.
- **ptmx_get_ioctl Vulnerability (CVE-2014-1278)**: An out-of-bounds array access vulnerability in the ptmx_get_ioctl Input/Output Control (IOCTL) was used to elevate privileges after achieving userland code execution.

#### Analysis and Documentation
- **Geohot's Analysis**: A detailed analysis of the userland portion of the jailbreak can be found [here](http://geohot.com/e7writeup.html).
- **Further Analysis**: Braden Thomas and p0sixninja provided additional insights into the userland and kernel exploits, respectively. Their work is documented on [The iPhone Wiki](http://theiphonewiki.com/wiki/Evasi0n7).

### Building a Test Environment

After jailbreaking your device, you will likely want to set up an environment for building, testing, and exploring iOS applications. This section outlines the tools and steps necessary to create a basic test environment.

#### Accessing the Device
To log into your jailbroken device and explore its applications, follow these steps:

1. **Install OpenSSH**:
   - Install the OpenSSH package from the Cydia repository: [OpenSSH](http://cydia.saurik.com/package/openssh/).
   - This installation will start the OpenSSH service, listening on all interfaces.

2. **Connect to the Device**:
   - **Wi-Fi Connection**: Connect the device to your Wi-Fi network and SSH directly to it using the Wi-Fi interface.
   - **USB Connection**: Use the USB multiplexing daemon to connect over USB. If your host operating system is not macOS, you need to install the `usbmuxd` service. For Linux, use `iproxy`.

   **Example Commands**:
   - Using `tcprelay.py` to forward local port 2222 to port 22 on the iOS device:
     ```bash
     $ ./tcprelay.py 22:2222
     Forwarding local port 2222 to remote port 22
     ```
   - Using `iproxy` to forward local port 2222 to port 22 on the iOS device:
     ```bash
     $ iproxy 2222 22
     ```

   **SSH Command**:
   ```bash
   $ ssh -p 2222 root@localhost
   ```

   **Default Passwords**: The default password for the `root` and `mobile` user accounts is "alpine". Change these passwords immediately after your first logon to secure your device.

#### Building a Basic Toolkit

Tools are essential for any security professional, especially when assessing iOS applications. Here are some key tools and how to install them:

##### Cydia
- **Description**: Cydia is an alternative to Apple’s App Store for jailbroken devices, providing a graphical user interface to the Advanced Packaging Tool (APT).
- **Installation**: Cydia comes pre-installed with many jailbreak applications. You can configure repositories and install packages using the Cydia app.

##### BigBoss Recommended Tools
- **Description**: This package installs essential command-line utilities such as those included in the coreutils, system-cmds, and adv-cmds packages.
- **Installation**: Download the BigBoss recommended tools package from [BigBoss Hackers](http://apt.thebigboss.org/onepackage.php?bundleid=bigbosshackertools).

##### Apple’s CC Tools
- **Description**: The CC Tools project provides an open-source toolkit for parsing, assembling, and linking Mach-O binaries.
- **Installation**: Available at [Apple Open Source](http://www.opensource.apple.com/source/cctools/). These tools are part of the iOS and OS X development toolchain and can also be compiled under Linux.

##### Commonly Used Tools
- **otool**: A versatile tool for analyzing Mach-O binaries. Examples include:
  - Inspect Objective-C segment: `otool -oV MAHHApp`
  - List libraries: `otool -L MAHHApp`
  - List symbols: `otool -IV MAHHApp`
  - Display header information: `otool -hV MAHHApp`
  - Display load commands: `otool -l MAHHApp`

- **nm**: Displays the symbol table of a binary or object file. Example: `nm MAHHApp`

- **lipo**: Manipulates architectures in a binary. Examples:
  - Print architectures: `lipo -info MAHHApp`
  - Remove architectures: `lipo -thin armv7 -output MAHHApp-v7 MAHHApp`

- **Debuggers**:
  - **gdb**: Custom compiled versions are available from alternate repositories like [radare](http://cydia.radare.org).
  - **lldb**: Apple’s preferred debugger, distributed with Xcode. For 32-bit devices, retrieve a copy from a previous version of Xcode.

- **Code Signing Tools**:
  - **codesign**: Signs or replaces existing signatures. Example: `codesign -v -fs "CodeSignIdentity" MAHHApp.app/`
  - **ldid**: A pseudo-signing alternative developed by saurik. Example: `ldid –S MAHHApp`

- **Installipa**:
  - **Description**: Installs IPA packages that are not code-signed or have invalid signatures.
  - **Requirements**: Install AppSync from [Cydia](http://cydia.appaddict.org) to disable code signing within the `installd` service.
  - **Usage**: `ipainstaller Lab1.1a.ipa`

By following these steps and using the outlined tools, you can effectively set up and manage a test environment for iOS application assessments.