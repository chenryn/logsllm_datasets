#### MAX OSX
**相关工具**
- [osxpmem](https://github.com/google/rekall/)
    ```bash
    sudo chown -R root:wheel pmem.kext
    sudo chown chmod -R 755 pmem.kext
    sudo kextload -v pmem.kext
    ./osxpmem -f raw mem.bin
    ```
- MacMemoryReader
- Recon for Mac OSX
- Blackbag MacQuisition
---
#### Linux
**相关工具**
- 对整个操作系统运行中的物理内存进行镜像 Dump
    - [504ensicsLabs/LiME](https://github.com/504ensicslabs/lime) - LiME 是一个用于获取各种取证数据的命令行工具。
        ```bash
        # 编译 LiME
        yum install -y gcc make gcc-c++
        yum install -y kernel-devel
        ls -lisa /usr/src/kernels/
        git clone https://github.com/504ensicslabs/lime
        cd lime/src
        make    # 如果编译失败有可能是 /lib/modules/xxx/ 的 build 链接错误,重新连接即可
        # 在这个过程的最后，它被编译成一个可下载的 Linux 版本的内核对象。使用 insmod 命令运行 LiME。此步骤将获取 LiME 格式的内存样本,现在我们已经准备好接收内存镜像了。我想在 usb 上打印，所以我给出了 usb 内存的路径。我必须在这里提醒你一些事情。存储器图像的尺寸并不小，所以要确保在你要拍摄图像的设备中有足够的空间,最后，你可以使用 rmmod 删除模块。
        insmod ./lime-3.10.0-1062.18.1.el7.x86_64.ko path=/media/usbaaa/ESD-USB/linux64.mem format=raw
        rmmod lime
        ```
    - [halpomeranz/lmg](https://github.com/halpomeranz/lmg) - 配合 LiME 获取镜像，简化操作
        ```
        将 lmg-master 内文件放入 LiME 的 src 文件夹，运行 ./lmg 搞定。
        ```
    - linpmem
    - [Draugr](https://code.google.com/archive/p/draugr/)
    - [Volatilitux](https://code.google.com/archive/p/volatilitux/)
    - [Memfetch](https://lcamtuf.coredump.cx/)
    - Memdump
    - [fmem](https://github.com/NateBrune/fmem)
        ```bash
        git clone https://github.com/NateBrune/fmem
        cd fmem
            # ubuntu install dwarfdump
            apt-get install -y dwarfdump
            # centos install dwarfdump
            yum install -y gcc make gcc-c++
            yum install -y elfutils-devel
            yum install -y kernel-devel
            wget https://www.prevanders.net/libdwarf-20201201.tar.gz
            tar -zxvf libdwarf-20201201.tar.gz
            cd libdwarf-20201201
            ./configure
            make
            make install
            cd ../
        make    # 如果编译失败有可能是 /lib/modules/xxx/ 的 build 链接错误,重新连接即可
        ./run.sh
        dd if=/dev/fmem of=/root/cyq.vmem bs=1MB count=2048    # 将内存里的数据拷贝到 root 目录下的 cyq.vmem 文件
        ```
- 针对单个进程的内存进行 Dump
    - [Sysinternals/ProcDump-for-Linux](https://github.com/Sysinternals/ProcDump-for-Linux)
---
#### Vmware
VMWare 虚拟机在暂停或挂起时, 内存状态信息会保存在以. Vmss 为扩展名的文件中; 在建立系统快照时, 包括内存在内的系统状态信息会保存在以. Vmsn 为扩展名的文件中; 而虚拟客户机的所有内存信息会保存在以. Vmem 为扩展名的文件中
**相关工具**
- [vmss2core](https://flings.vmware.com/vmss2core) - 快照文件转换为内存转储,开发人员可以使用此工具将虚拟机检查点转换为核心转储文件，从而对客户机操作系统和应用程序进行调试。检查点可以是快照或挂起文件。
    ```bash
    # vmss 是挂起,vmsn 是快照,vmem 是虚拟机内存转储
    vmss2core.exe -W virtual_machine_name.vmss virtual_machine_name.vmem
        # 注意："2195" for Win32, "6000" for Win64
        vmss2core.exe -W2195 virtual_machine_name.vmss virtual_machine_name.vmem
        vmss2core.exe -W6000 virtual_machine_name.vmss virtual_machine_name.vmem
        # 注意：如果你使用的是 Microsoft Windows 8/8.1、Windows Server 2012、Windows Server 2016 或 Windows Server 2019
        vmss2core.exe -W8 virtual_machine_name.vmss virtual_machine_name.vmem
    # 注意：如果使用的是 Linux，请运行如下命令：
    ./vmss2core-Linux64 -N virtual_machine_name.vmss
    # 要在虚拟机位于 ESX/ESXi 主机上时创建内存转储
    # 启动与主机的 SSH 会话。
    vm-support -x               # 确定虚拟机的域 ID
        # 注意：对于 ESXi 6.7，请使用命令 esxcli vm process list
    vm-support -Z [world_ID]    # 挂起虚拟机
    # 将 virtual_machine_name.vmss 文件复制到你的 vmss2core 工具所在的位置
    vmss2core -W virtual_machine_name.vmss  # 运行 vmss2core 工具
    ```
- Bin2Dmp
    ```bash
    # 将 vmem 文件转为 dmp 文件
    Bin2Dmp.exe vmware.vmem vmware.dmp
    ```
- Volatility
    ```bash
    # 需要指定 profile
    volatility_standalone.exe -f vmware.vmem --profile=Win7SP1x64 raw2dmp -O vmware.dmp
    ```
**爆破密码**
- [axcheron/pyvmx-cracker](https://github.com/axcheron/pyvmx-cracker)
    ```bash
    git clone https://github.com/axcheron/pyvmx-cracker.git
    cd pyvmx-cracker
    pip3 install -r requirements.txt
    pip3 pip install pyCrypto
    python3 pyvmx-cracker.py -v sample.vmx -d wordlist.txt
    ```
---
#### VirtualBox
**相关工具**
- vboxmanage + [vboxelf2raw.sh](https://gist.github.com/kost/606145346d47c5ed0469d4e9ac415927) + Volatility
    ```bash
    vboxmanage debugvm "win7test" dumpvmcore --filename testvbox.elf
    # VirtualBox 内存转储采用 ELF 格式，其中 load1 段保存原始内存转储。
    ./vboxelf2raw.sh testvbox.elf
    volatility_standalone.exe -f testvbox.elf.raw --profile=Win7SP1x64 raw2dmp -O testvbox.dmp
    ```
---
## 内存分析
**内存分析工具**
- [Volatility](../../安全工具/Volatility.md) - Volatility Framwork 是一款开源的基于 Python 开发的内存分析框架，它自带的分析插件支持分析内存镜像中所保留的历史网络连接信息、历史进程、历史命令记录等等。
- [Elcomsoft Forensic Disk Decryptor](https://cn.elcomsoft.com/efdd.html) - 即时访问保存在加密的 BitLocker，FileVault 2，PGP，TrueCrypt 和 VeraCrypt 存储中的数据。该工具从 RAM 捕获数据，休眠和页面文件中提取加密密钥，或使用纯文本密码或托管密钥来解密存储在加密容器中的文件和文件夹，或者将加密卷装载为新的驱动器号，以便进行实时访问。
- [gleeda/memtriage](https://github.com/gleeda/memtriage) - 集成了 Winpmem 和 Volatility 的工具
- WinHex
- 取证大师
- [makomk/aeskeyfind](https://github.com/makomk/aeskeyfind) - 该工具用于在内存转储中寻找 AES 密钥
- Passware Kit Forensic - 用于从内存、磁盘中恢复密码
- [CrowdStrike/SuperMem](https://github.com/CrowdStrike/SuperMem) - 内存样本处理工具
- windbg - windbg 是专门针对 windows 的一款调试器，支持各种 Windows API，不仅支持用户态/内核态程序调试，还能分析进程内存 Dump 文件。常见的 Windows 蓝屏问题分析，使用的就是该工具。