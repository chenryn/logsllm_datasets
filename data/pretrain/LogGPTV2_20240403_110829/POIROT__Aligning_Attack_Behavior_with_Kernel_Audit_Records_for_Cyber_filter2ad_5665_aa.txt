title:POIROT: Aligning Attack Behavior with Kernel Audit Records for Cyber
Threat Hunting
author:Sadegh M. Milajerdi and
Birhanu Eshete and
Rigel Gjomemo and
V. N. Venkatakrishnan
Poirot: Aligning Attack Behavior with Kernel Audit Records for
Cyber Threat Hunting
Sadegh M. Milajerdi
PI:EMAIL
University of Illinois at Chicago
Birhanu Eshete
PI:EMAIL
University of Michigan-Dearborn
Rigel Gjomemo
PI:EMAIL
University of Illinois at Chicago
ABSTRACT
Cyber threat intelligence (CTI) is being used to search for indicators
of attacks that might have compromised an enterprise network for
a long time without being discovered. To have a more effective
analysis, CTI open standards have incorporated descriptive rela-
tionships showing how the indicators or observables are related
to each other. However, these relationships are either completely
overlooked in information gathering or not used for threat hunting.
In this paper, we propose a system, called Poirot, which uses these
correlations to uncover the steps of a successful attack campaign.
We use kernel audits as a reliable source that covers all causal re-
lations and information flows among system entities and model
threat hunting as an inexact graph pattern matching problem. Our
technical approach is based on a novel similarity metric which as-
sesses an alignment between a query graph constructed out of CTI
correlations and a provenance graph constructed out of kernel audit
log records. We evaluate Poirot on publicly released real-world
incident reports as well as reports of an adversarial engagement de-
signed by DARPA, including ten distinct attack campaigns against
different OS platforms such as Linux, FreeBSD, and Windows. Our
evaluation results show that Poirot is capable of searching inside
graphs containing millions of nodes and pinpoint the attacks in a
few minutes, and the results serve to illustrate that CTI correlations
could be used as robust and reliable artifacts for threat hunting.
KEYWORDS
Cyber Threat Hunting, Cyber Threat Intelligence, Indicator of Com-
promise, Graph Alignment, Graph Pattern Matching
ACM Reference Format:
Sadegh M. Milajerdi, Birhanu Eshete, Rigel Gjomemo, and V.N. Venkatakr-
ishnan. 2019. Poirot: Aligning Attack Behavior with Kernel Audit Records
for Cyber Threat Hunting. In 2019 ACM SIGSAC Conference on Computer
and Communications Security (CCS ’19), November 11–15, 2019, London,
United Kingdom. ACM, New York, NY, USA, 18 pages. https://doi.org/10.
1145/3319535.3363217
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3363217
V.N. Venkatakrishnan
PI:EMAIL
University of Illinois at Chicago
1 INTRODUCTION
When Indicators of Compromise (IOCs) related to an advanced per-
sistent threat (APT) detected inside an organization are released, a
common question that emerges among enterprise security analysts
is if their enterprise has been the target of that APT. This process is
commonly known as Threat Hunting. Answering this question with
a high level of confidence often requires lengthy and complicated
searches and analysis over host and network logs of the enterprise,
recognizing entities that appear in the IOC descriptions among
those logs and finally assessing the likelihood that the specific APT
successfully infiltrated the enterprise.
In general, threat hunting inside an enterprise presents several
challenges:
• Search at scale: To remain under the radar, an attacker often
performs the attack steps over long periods (weeks, or in some
cases, months). Hence, it is necessary to design an approach
that can link related IOCs together even if they are conducted
over a long period of time. To this end, the system should be
capable of searching among millions of log events (99.9% of
which often correspond to benign activities).
• Robust identification and linking of threat-relevant entities: Threat
hunting must be sound in identifying whether an attack cam-
paign has affected a system, even though the attacker might
have mutated the artifacts like file hashes and IP addresses
to evade detection. Therefore, a robust approach should not
merely look for matching IOCs in isolation, but uncover the
entire threat scenario, which is harder for an attacker to mutate.
• Efficient Matching: For a cyber analyst to understand and react
to a threat incident in a timely fashion, the approach must effi-
ciently conduct the search and not produce many false positives
so that appropriate cyber-response operations can be initiated
in a timely fashion.
Commonly, knowledge about the malware employed in APT
campaigns is published in cyber threat intelligence (CTI) reports
and is presented in a variety of forms such as natural language,
structured, and semi-structured form. To facilitate the smooth ex-
change of CTI in the form of IOCs and enable characterization of
adversarial techniques, tactics, and procedures (TTPs), the security
community has adopted open standards such as OpenIOC [14],
STIX [49], and MISP [48]. To provide a better overview of attacks,
these standards often incorporate descriptive relationships showing
how indicators or observables are related to each other [28].
Session 6D: Cyber Thread CCS ’19, November 11–15, 2019, London, United Kingdom1795However, a vast majority of the current threat hunting approaches
operates only over fragmented views of cyber threats[15, 64], such
as signatures (e.g., hashes of artifacts), suspicious file/process names,
and IP addresses (domain names), or by using heuristics such as
timestamps to correlate suspicious events [54]. These approaches
are useful but have limitations, such as (i) lacking the precision
to reveal the complete picture as to how the threat unfolded es-
pecially over long periods (weeks, or in some cases, months), (ii)
being susceptible to false signals when adversaries use legitimate-
looking names (like svchost in Windows) to make their attacks
indistinguishable from benign system activities, and (iii) relying on
low-level signatures, which makes them ineffective when attackers
update or re-purpose [63, 68] their tools or change their signatures
(IP addresses or hash values) to evade detection. To overcome these
limitations and build a robust detection system, the correlation
among IOCs must be taken into account. In fact, the relationships
between IOC artifacts contain essential clues on the behavior of
the attacks inside a compromised system, which is tied to attacker
goals and is, therefore, more difficult to change [36, 77].
This paper formalizes the threat hunting problem from CTI re-
ports and IOC descriptions, develops a rigorous approach for de-
riving the confidence score that indicates the likelihood of success
of an attack campaign, and describes a system called Poirot that
implements this approach. In a nutshell, given a graph-based rep-
resentation of IOCs and relationships among them that expresses
the overall behavior of an APT, which we call a query graph, our
approach efficiently finds an embedding of this query graph in a
much larger provenance graph, which contains a representation
of kernel audit logs over a long period of time. Kernel audit logs
are free of unauthorized tampering as long as system’s kernel is
not compromised, and reliably contain relationships between sys-
tem entities (e.g., processes, files, sockets, etc.), in contrast to its
alternatives (e.g., firewall, network monitoring, and file access logs)
which provide partial information. We assume that to maintain the
integrity of kernel audit logs, a real-time kernel audit storage on a
separate and secure log server is used as a precaution against log
tampering.
More precisely, we formulate threat hunting as a graph pattern
matching (GPM) problem searching for causal dependencies or
information flows among system entities that are similar to those
described in the query graph. To be robust against evasive attacks
(e.g., mimicry attacks [52, 70]) which aim to influence the matching,
we prioritize flows based on the cost they have for an attacker
to produce. Given the NP-completeness of the graph matching
problem [10], we propose an approximation function and a novel
similarity metric to assess an alignment between the query and
provenance graph.
We test Poirot’s effectiveness and efficiency using three differ-
ent datasets, particularly, red-team/blue-team adversarial engage-
ments performed by DARPA Transparent Computing (TC) program
[31], publicly available real-world incident reports, and attack-free
activities generated by ordinary users. In addition, we simulate sev-
eral attacks from real-world scenarios in a controlled environment
and compare Poirot with other tools that are currently used to do
threat hunting. We show that Poirot outperforms these tools. We
have implemented different kernel log parsers for Linux, FreeBSD,
and Windows, and our evaluation results show that Poirot can
search inside graphs containing millions of nodes and pinpoint the
attacks in a few minutes.
This paper is organized as follows: Related work appears in
section 2. We present an overall architecture of Poirot in section 3.
In section 4, we provide the formal details of the graph alignment
algorithm. Section 5 discusses the evaluation, and we conclude in
section 6.
2 RELATED WORK
Log-based Attack Analytics. Opera et al. [51] leverage DNS or
web proxy logs for detecting early-stage infection in an enterprise.
Disclosure [4] extracts statistical features from NetFlow logs to
detect botnet C&C channels. DNS logs have also been extensively
used [1, 2] for detecting malicious domains. Hercule [54] uses
community detection to reconstruct attack stages by correlating
logs coming from multiple sources. Similar to Poirot, a large body
of work uses system audit logs to perform forensic analysis and
attack reconstruction[20, 21, 42, 56].
Provenance Graph Explorations. The idea to construct a prove-
nance graph from kernel audit logs was introduced by King et al.
[33, 35]. The large size and coarse granularity of these graphs have
limited their practical use. However, recent advancements have
paved the way for more efficient and effective use of provenance
graphs. Several approaches have introduced compression, summa-
rization, and log reduction techniques [26, 40, 74] to differentiate
worthy events from uninformative ones and consequently reduce
the storage size. Dividing processes into smaller units is one of the
approaches to add more granularity into the provenance graphs,
and to this end, researchers have utilized different methods, such
as dynamic binary analysis [39, 46], source code annotation [45],
or modeling-based inference [38, 43, 44]. Additionally, record-and-
replay [29, 30] and parallel execution methods [37] are proposed for
more precise tracking. Recent studies have leveraged provenance
graphs for different objectives, such as alert triage [24], zero-day
attack path identification [61], attack detection and reconstruction
[25, 47]. However, the scope of Poirot is different from these re-
cent works, since it is focused on threat hunting and not real-time
detection or forensic analysis.
Query Processing Systems. Prior works have incorporated
novel optimization techniques, graph indexing, and query process-
ing methods [19, 62, 71] to support timely attack investigations.
SAQL [17] is an anomaly query engine that queries specified anom-
alies to identify abnormal behaviors among system events. AIQL
[18] can be used as a forensic query system that has a domain-
specific language for investigating attack campaigns from histor-
ical audit logs. Pasquier et al. [53] propose a query framework,
called CamQuery, that supports real-time analysis on provenance
graphs, to address problems such as data loss prevention, intrusion
detection, and regulatory compliance. Shu et al. [57] also propose a
human-assisted query system equipping threat hunters with a suite
of potent new tools. These works are orthogonal to Poirot and can
be used as a foundation to implement our search algorithm.
Behavior Discovery. Extracting malicious behaviors such as in-
formation flows and causal dependencies and searching for them as
robust indicators have been investigated in prior works. Christodor-
escu et al. [9] have proposed an approach for mining malware be-
havior from dynamic traces of that malware’s samples. Similarly,
Session 6D: Cyber Thread CCS ’19, November 11–15, 2019, London, United Kingdom1796Kolbitsch et al. [36] automatically generate behavior models of mal-
ware using symbolic execution. They represent this behavior as a
graph and search for it among the runtime behavior of unknown
programs. On the contrary, Poirot does not rely on symbolic ex-
pressions but looks for correlations and information flows on the
whole system. TGMiner [77] is a method to mine discriminative
graph patterns from training audit logs and search for their ex-
istence in test data. The focus of this work is query formulation
instead of pattern query processing, and the authors have used
a subsequence matching solution [76] for their search, which is
different from our graph pattern matching approach.
Graph Pattern Matching. Graph Pattern Matching (GPM) has
proved useful in a variety of applications [16]. GPM can be defined
as a search problem inside a large graph for a subgraph containing
similar connections conjunctively specified in a small query graph.
This problem is NP-complete in the general case [10]. Fan et. al.
[12] proposed a polynomial time approach assuming that each
connection in the pattern could only be mapped to a path with
a predefined number of hops. Other works [8, 78] have tackled
the problem by using a sequence of join functions in the vector
space. NeMa [32] is a neighborhood-based subgraph matching
technique based on the proximity of nodes. In contrast, G-Ray
and later Mage[55, 69] take into account the shape of the query
graph and edge attributes and are more similar to our approach,
where similar information flows and causal dependencies play a
crucial role. However, these approaches work based on random-
walk, which is not reliable against attackers (with knowledge of
the threat-hunting method) who generate fake events (as explained
in section 4.1). While our graph alignment notions are similar to
these works, the graph characteristics Poirot analyzes present
new challenges such as being labeled, directed, typed, in the order
of millions of nodes, and constructed in an adversarial setting.
Moreover, many of these related works are looking for a subgraph
that contains exactly one alignment for each node and each edge
of the query graph and cannot operate in a setting where there
might not be an alignment for certain nodes or edges. As a result,
we develop a new best-effort matching technique aimed at tackling
these challenges.
3 APPROACH OVERVIEW
A high-level view of our approach is shown in Fig. 1. We provide
a brief overview of the components of Poirot next, with more
detailed discussions relegated to section 4.
3.1 Provenance Graph Construction
To determine if the actions of the APT appear in the system, we
model the kernel audit logs as a labeled, typed, and directed graph,
which we call provenance graph (Gp). This is a common represen-
tation of kernel audit logs, which allows tracking causality and
information flow efficiently [17, 18, 25, 33, 34]. In this graph, nodes
represent system entities involved in the kernel audit logs, which
have different types such as files and processes, while edges rep-
resent information flow and causality among those nodes taking
into account the direction. Poirot currently supports consuming
Fig. 1: Poirot Approach Overview.
kernel audit logs1 from Microsoft Windows, Linux, and FreeBSD
and constructs a provenance graph in memory, similar to prior
work in this area [25]. To support efficient searching on this graph,
we leverage additional methods such as fast hashing techniques
and reverse indexing for mapping process/file names to unique
node IDs.
3.2 Query Graph Construction
We extract IOCs together with the relationships among them from