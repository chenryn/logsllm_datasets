    XMLReader reader = XMLReaderFactory.createXMLReader();
    reader.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
    reader.setContentHandler(customHandler);
    reader.parse(new InputSource(inputStream));
**禁用DTD的解决方案:**  
通过禁用DTD，大多数的xxe攻击都可以被避免
    XMLReader reader = XMLReaderFactory.createXMLReader();
    reader.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
    reader.setContentHandler(customHandler);
    reader.parse(new InputSource(inputStream));
引用：  
[CWE-611: Improper Restriction of XML External Entity Reference
('XXE')](http://cwe.mitre.org/data/definitions/611.html)  
[CERT: IDS10-J. Prevent XML external entity
attacks](https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260)  
[OWASP.org: XML External Entity (XXE)
Processing](https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing)  
[WS-Attacks.org: XML Entity Expansion](http://www.ws-attacks.org/index.php/XML_Entity_Expansion)  
[WS-Attacks.org: XML External Entity DOS](http://www.ws-attacks.org/index.php/XML_External_Entity_DOS)  
[WS-Attacks.org: XML Entity Reference Attack](http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack)  
[Identifying Xml eXternal Entity vulnerability
(XXE)](http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html)  
[Xerces complete features
list](http://xerces.apache.org/xerces-j/features.html)
# xml解析导致xxe漏洞(DocumentBuilder)
漏洞特征：XXE_DOCUMENT  
当xml解析程序收到不信任的输入且如果xml解析程序支持外部实体解析的时候，那么造成xml实体解析攻击（xxe）  
危害1：探测本地文件内容（xxe：xml 外部实体）
     ]>
    &xxe;
危害2：拒绝服务攻击 （xee：xml 外部实体膨胀）
    [...]
    ]>
    &lol9;
解决方法：  
为了避免解析xml带来的攻击，你应该按照下面的示例代码修改你的代码  
有漏洞的代码：
    DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
    Document doc = db.parse(input);
下面的两个片段展示了可能的解决方案。你可以使用其中一个，或者两个都使用
**使用"Secure processing" 模式的解决方案:**  
这个设置能保护你能避免拒绝服务攻击和ssrf漏洞
    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
    dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
    DocumentBuilder db = dbf.newDocumentBuilder();
    Document doc = db.parse(input);
**禁用DTD的解决方案:**  
通过禁用DTD，大多数的xxe攻击都可以被避免
    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
    dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
    DocumentBuilder db = dbf.newDocumentBuilder();
    Document doc = db.parse(input);
引用：  
[CWE-611: Improper Restriction of XML External Entity Reference
('XXE')](http://cwe.mitre.org/data/definitions/611.html)  
[CERT: IDS10-J. Prevent XML external entity
attacks](https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260)  
[OWASP.org: XML External Entity (XXE)
Processing](https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing)  
[WS-Attacks.org: XML Entity Expansion](http://www.ws-attacks.org/index.php/XML_Entity_Expansion)  
[WS-Attacks.org: XML External Entity DOS](http://www.ws-attacks.org/index.php/XML_External_Entity_DOS)  
[WS-Attacks.org: XML Entity Reference Attack](http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack)  
[Identifying Xml eXternal Entity vulnerability
(XXE)](http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html)  
[Xerces complete features
list](http://xerces.apache.org/xerces-j/features.html)
# xml解析导致xxe漏洞(TransformerFactory)
漏洞特征：XXE_DTD_TRANSFORM_FACTORY  
当xml解析程序收到不信任的输入且如果xml解析程序支持外部实体解析的时候，那么造成xml实体解析攻击（xxe）  
危害1：探测本地文件内容（xxe：xml 外部实体）
     ]>
    &xxe;
危害2：拒绝服务攻击 （xee：xml 外部实体膨胀）
    [...]
    ]>
    &lol9;
解决方法：  
为了避免解析xml带来的攻击，你应该按照下面的示例代码修改你的代码  
有漏洞的代码：
    Transformer transformer = TransformerFactory.newInstance().newTransformer();
    transformer.transform(input, result);
下面的两个片段展示了可能的解决方案。你可以使用其中一个，或者两个都使用
**使用"Secure processing" 模式的解决方案:**  
这个设置能保护你能避免拒绝服务攻击和ssrf漏洞
    TransformerFactory factory = TransformerFactory.newInstance();
    factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "all");
    factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "all");
    Transformer transformer = factory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT, "yes");
    transformer.transform(input, result);
**禁用DTD的解决方案:**  
通过禁用DTD，大多数的xxe攻击都可以被避免
    TransformerFactory factory = TransformerFactory.newInstance();
    factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
    Transformer transformer = factory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT, "yes");
    transformer.transform(input, result);
引用：  
[CWE-611: Improper Restriction of XML External Entity Reference
('XXE')](http://cwe.mitre.org/data/definitions/611.html)  
[CERT: IDS10-J. Prevent XML external entity
attacks](https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260)  
[OWASP.org: XML External Entity (XXE)
Processing](https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing)  
[WS-Attacks.org: XML Entity Expansion](http://www.ws-attacks.org/index.php/XML_Entity_Expansion)  
[WS-Attacks.org: XML External Entity DOS](http://www.ws-attacks.org/index.php/XML_External_Entity_DOS)  
[WS-Attacks.org: XML Entity Reference Attack](http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack)  
[Identifying Xml eXternal Entity vulnerability
(XXE)](http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html)
# XSLT解析导致xxe漏洞(TransformerFactory)
漏洞特征：XXE_XSLT_TRANSFORM_FACTORY  
当xml解析程序收到不信任的输入且如果xml解析程序支持外部实体解析的时候，那么造成xml实体解析攻击（xxe）  
危害1：探测本地文件内容（xxe：xml 外部实体）
解决方法：  
为了避免解析xml带来的攻击，你应该按照下面的示例代码修改你的代码  
有漏洞的代码：
    Transformer transformer = TransformerFactory.newInstance().newTransformer();
    transformer.transform(input, result);
下面的两个片段展示了可能的解决方案。你可以使用其中一个，或者两个都使用
**使用"Secure processing" 模式的解决方案:**  
这个设置能保护你能避免ssrf漏洞但是不能避免拒绝服务攻击
    TransformerFactory factory = TransformerFactory.newInstance();
    factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "all");
    factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "all");
    Transformer transformer = factory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT, "yes");
    transformer.transform(input, result);
**禁用DTD的解决方案:**  
这个设置能保护你能避免ssrf漏洞但是不能避免拒绝服务攻击
    TransformerFactory factory = TransformerFactory.newInstance();
    factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
    Transformer transformer = factory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT, "yes");
    transformer.transform(input, result);
引用：  
[CWE-611: Improper Restriction of XML External Entity Reference
('XXE')](http://cwe.mitre.org/data/definitions/611.html)  
[CERT: IDS10-J. Prevent XML external entity
attacks](https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260)  
[OWASP.org: XML External Entity (XXE)
Processing](https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing)  
[WS-Attacks.org: XML Entity Expansion](http://www.ws-attacks.org/index.php/XML_Entity_Expansion)  
[WS-Attacks.org: XML External Entity DOS](http://www.ws-attacks.org/index.php/XML_External_Entity_DOS)  
[WS-Attacks.org: XML Entity Reference Attack](http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack)  
[Identifying Xml eXternal Entity vulnerability
(XXE)](http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html)
# 潜在的XPath注入
漏洞特征： XPATH_INJECTION  
XPath注入的危险程度就像sql注入一样。如果XPath查询包含不信任的用户输入，那么数据库就会被完全暴露。这样就可以让攻击者访问未授权的数据或者在目标xml数据库中放入恶意数据。
引用：  
[WASC-39: XPath
Injection](http://projects.webappsec.org/w/page/13246963/SQL%20Injection)  
[OWASP: Top 10
2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)  
[CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath
Injection')](http://cwe.mitre.org/data/definitions/643.html)  
[CERT: IDS09-J. Prevent XPath Injection
(archive)](https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61407250)  
[Black Hat Europe 2012: Hacking XPath 2.0](http://media.blackhat.com/bh-eu-12/Siddharth/bh-eu-12-Siddharth-Xpath-WP.pdf)  
[Balisage: XQuery
Injection](http://www.balisage.net/Proceedings/vol7/html/Vlist02/BalisageVol7-Vlist02.html)
# 发现Struts 1 服务器端
漏洞特征： STRUTS1_ENDPOINT  
这个类是Struts 1 的Action  
曾清一个请求被路由到一个控制器中，Form对象将会被自动的实例化为http参数的对象。这些参数应该被严格检查，以保证它们是安全的。
# 发现Struts 2 服务器端
漏洞特征：STRUTS2_ENDPOINT  
在Struts 2中，服务器端是简单的Java对象 (POJOs)，这就意味着没有接口/类 需要被实现/拓展
当一个请求被路由到它的控制器的时候（像这些被选择的类），http提供的参数会被自动的映射到类中的setters中。所以，所有类中的setters都应该被看成来自不被信任源的输入，即使form中没有包含那些值。一个攻击者都被在请求中插入一些额外的值，他们会被当成对象，只要对象具有这样的setter。这些参数应该被严格检查，以保证它们是安全的。
# 发现Spring 服务器端