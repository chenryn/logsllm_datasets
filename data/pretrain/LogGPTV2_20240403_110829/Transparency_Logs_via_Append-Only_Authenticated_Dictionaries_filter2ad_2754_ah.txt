15:
16:
17:
18: function ProveRootAccs(Si, π ) → π
19:
20:
return b, (ℓ, π, (χr )r∈roots(Fi ), (ψr )r∈roots(Fi ) )
π (r ) ← (⊥, ar , ˆar , ⊥)
▷ Overwrites π (w ) set by previous ProvePath call (if any)
π (w ) ← (⊥, aw , ˆaw , π w ), ∀w ∈ path[u, r )
▷ Only sets π (sibling(w )) if not already set from previous ProvePath call!
for w ∈ path[u, r ) where sibling(w ) (cid:60) Dom(π ) do
return π
π (r ) ← (⊥, ar , ˆar , ⊥), ∀r ∈ roots(Fi ),
π (r |c ) ← (hr |c, ⊥, ⊥, ⊥), ∀r ∈ roots(Fi ), ∀c ∈ {0, 1}
π (sibling(w )) ← (hsibling(w ), ⊥, ⊥, ⊥)
▷ Precondition: r is a root in Fi
For each root r in Fi, ProveAppendOnly(·) sends a Merkle path
to an ancestor root in Fj, if any. The Merkle path contains subset
proofs between all BPT accumulators along the path. It also contains
the root BPT accumulators from Fi, which the client will verify
against his digest di.
Client algorithms. VerAppendOnly(·) first ensures that di and
dj are digests at version i and j respectively (Lines 7 to 8). Before
checking subset proofs, VerAppendOnly(·) validates the old root
BPT accumulators in πi, j against the Merkle roots in di (Lines 11
to 13). Then, checks that each root r from Fi is a subset of some root
in Fj by checking subset proofs (Line 16) via VerPath(·) (see Algo-
rithm 5). VerAppendOnly(·) enforces fork-consistency implicitly
when verifying Merkle hashes.
Algorithm 4 Creates and verifies append-only proofs
1: function ProveAppendOnly(pp, Si, Sj ) → π
if roots(Fi ) ⊂ roots(Fj ) then return ⊥
2:
Let R = {roots ∈ Fi but (cid:60) Fj } and r′ ∈ roots(Fj ) be their ancestor root
3:
π ← ProvePath(Sj, r, r′, π ), ∀r ∈ R π ← ProveRootAccs(Si, π )
4:
5:
return π
6: function VerAppendOnly(V K, di, i, dj, j, πi, j ) → {T , F }
assert di (r ) (cid:44) ⊥ ⇔ r ∈ roots(Fi )
7:
assert dj (r ) (cid:44) ⊥ ⇔ r ∈ roots(Fj )
8:
assert ∀r ∈ roots(Fi ) ∩ roots(Fj ), di (r ) = dj (r )
9:
Let R = {roots ∈ Fi but (cid:60) Fj }
10:
▷ i.e., old roots with paths to new root
for all r ∈ roots(Fi ) do ▷ Check proof gives correct old root accumulators
11:
12:
13:
14:
15:
16:
∀r ∈ R, fetch hr from di (r ) and update πi, j (r ) with it
assert πi, j is well-formed Merkle proof for all roots in R
assert ∀r ∈ R, VerPath(dj, r, πi, j )
(·, ar , ·, ·) ← π (r )
assert di (r ) = H (r |hr |0|ar |hr |1)
(hr |b, ·, ·, ·) ← π (r |b ), ∀b ∈ {0, 1}
▷ Is valid version i digest?
▷ Is valid version j digest?
If k is stored at leaf ℓ in the AAS, VerMemb(·) reconstructs ℓ’s ac-
cumulator from k. Then, checks if there’s a valid Merkle path from ℓ
to some root, verifying subset proofs along the path via VerPath(·)
(see Algorithm 5). If k is not in the AAS, VerMemb(·) verifies fron-
tier proofs for k in each BFT in the forest via VerFrontier(·) (see
Algorithm 6).
Session 6C: Secure Computing VICCS ’19, November 11–15, 2019, London, United Kingdom1313else
▷ This is a membership proof being verified
hℓ ← H (ℓ|⊥|aℓ |⊥)
(·, aℓ, ˆaℓ ) ← Accum(P ({k }))
Update π (ℓ) with hℓ and accumulators aℓ and ˆaℓ
assert π is well-formed Merkle proof for leaf ℓ ∧ VerPath(di, ℓ, π )
for all r ∈ roots(Fi ) do
(·, ar , ·, ·) ← π (r )
(or , ·) ← χr (ε )
(hr |b, ·, ·, ·) ← π (r |b ), ∀b ∈ {0, 1}
assert di (r ) = H (r |hr |0|ar |hr |1)
assert e (ar , yr )e (or , zr ) = e (д, д) ∧ VerFrontier(k, χr )
▷ This is a non-membership proof being verified
▷ Check BFTs
Parse πk as ℓ, π, (χr )r∈roots(Fi ), (yr , zr )r∈roots(Fi )
if b = 1 then
Algorithm 5 Verifies a (non)membership proof
1: function VerMemb(V K, di, k, b, πk ) → {T , F }
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13: function VerPath(dk, w, π ) → {T , F }
14:
15:
16:
17:
18:
19:
20:
assert dk (r ) = MerkleHash(π, r )
assert e (ar , дτ ) = e ( ˆar , д)
21:
22: function MerkleHash(π, w) → hw
(hw , aw , ·, ·) ← π (w )
23:
if hw = ⊥ then
24:
25:
26:
else
27:
return H (w |MerkleHash(π, w |0)|aw |MerkleHash(π, w |1))
return hw
Let r ∈ roots(Fk ) denote the ancestor root of w
▷ Walk path invariant: u is not a root node (but parent(u ) might be)
for u ← w; u (cid:44) r; u ← parent(u ) do
p ← parent(u )
(·, au, ˆau, πu ) ← π (u )
assert e (au, πu ) = e (ap, д) ∧ e (au, дτ ) = e ( ˆau, д)
▷ Check subset proof and extractability (below)
(·, ap, ˆap, ·) ← π (p )
▷ Invariant: u equals r now
▷ Is root accumulator extractable?
▷ Precondition: π is well-formed proof
Frontier algorithms. CreateFrontier(·) creates a BFT level by
level, starting from the leaves, given a set of frontier prefixes F.
Given a key k (cid:60) Si and a root r, ProveFrontier(·) returns a frontier
proof for k in the BFT at root r. VerFrontier(·) verifies a frontier
proof for one of k’s prefixes against a specific root BFT accumulator.
▷ Then, build BFT level by level
u ← binlevelSize (0)
▷ Merge sibling accumulators on level i
p ← parent(u ) Sp ← Su ∪ Ssibling(u )
(ϕp, o, ˆo) ← Accum(Sp ) σ (p ) ← (o, ˆo) u ← binlevelSize (j )
j ← j + 2
▷ Copy root BFT accumulator
▷ Copy path to ρ’s BFT leaf
▷ First, build BFT leaves, with дs−HF (ρ ) for each prefix ρ
(i )
Sw ← ρ
return (ϕε , σ )
levelSize ← 2i
Sw ← ∅, ∀w
for i ← ⌈log |F |⌉; i (cid:44) 0; i ← i − 1 do
i ← 0
for ρ ∈ F do
w ← bin|F |
i ← i + 1
(ϕw , o, ˆo) ← Accum(Sw ) σ (w ) ← (o, ˆo)
j ← 0
while Su (cid:44) ∅ do
Algorithm 6 Manages BFT of a set
1: function CreateFrontier(F ) → (ϕ, σ )
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12: function ProveFrontier(Si, r, k) → χ
13:
14:
15:
16:
17:
18:
χ (sibling(w )) ← σ r (sibling(w ))
19:
20:
χ (sibling(w )) ← (д, дτ )
21:
22:
23: function VerFrontier(k, χ ) → {T , F }
24:
25:
26:
27:
28:
29:
30:
Let ρ be the smallest prefix of k that is not in P (Sr )
Let ℓ denote the leaf where σ r (ℓ) = д (s−HF (ρ ))
χ (ε ) ← σ r (ε )
for w ∈ path[ℓ, ε ) do
χ (w ) ← σ r (w )
if σ r (sibling(w )) (cid:44) ⊥ then
else
▷ Find leaf ℓ in χ with a prefix ρ for k, or fail.
assert ∃ℓ, ∃ρ s.t. ρ ∈ P ({k }) ∧ д (s−HF (ρ )) = χ (ℓ)
assert e (o, дτ ) = e ( ˆow , д) where (o, ˆo) ← χ (ε )
for w ∈ path[ℓ, ε ) do
(cw , ˆcw ) ← χ (w )
(sw , ·) ← χ (sibling(w ))
(pw , ·) ← χ (parent(w ))
assert e (cw , sw ) = e (pw , д) ∧ e (cw , дτ ) = e ( ˆcw , д)
return χ
▷ Verify ρ’s membership in the BFT
Theorem B.1. Under the q-SBDH and q-PKE assumptions, and
assuming that H is a secure CRHF, our construction is a secure
AAS as per Definition 3.1.
We prove Theorem B.1 in Appendix C.
C AAS SECURITY PROOFS
Membership and append-only correctness follow from close inspec-
tion of the algorithms. Here, we prove our AAS construction offers
membership and append-only security, as well as fork-consistency.
Membership security. Assume there exists a polynomial-time ad-
versary A that produces digest d, element k and inconsistent proofs
π , π′ such that VerMemb(V K, d, k, 1, π ) and VerMemb(V K, d, k, 0, π′)
both accept. We will now describe how A can either find a collision
in H (used to hash the BPTs) or break the q-SBDH assumption.
First, let us focus on the membership proof π, which consists of
a path to k’s leaf in some BPT of size 2ℓ leaves. Let a0, a1, . . . , aℓ
(cid:81)
be the accumulators along this path (part of π), where a0 is the leaf
accumulator for element k with characteristic polynomial A0 (x ) =
c∈P (k ) (x − HF (c)). Let π0, . . . , πℓ−1 denote the corresponding
subset proofs, such that e (aj , д) = e (aj−1, πj−1),∀j ∈ [ℓ].
Second, let us consider the other (contradictory) non-membership
proof π′, which consists of a path to a BFT leaf storing a prefix
ρ of k. Let o0, o1, . . . , oℓ′ be the frontier accumulators along this
path, where o0 is the leaf accumulator for ρ with characteristic
polynomial O0(x ) = x − HF (ρ). Note that this BFT is of size 2ℓ′
and might differ from 2ℓ, the size of π’s BPT. Let a∗
ℓ be the root
accumulator for this BFT’s corresponding BPT, as contained in π′
(see Algorithm 3).
When verifying π and π′, both aℓ and a∗
ℓ are hashed (together
with the two claimed hash values of their children) and the result
is checked against the hash from digest d. Since verification of π
and π′ succeeds, if aℓ (cid:44) a∗