---
author: Avishek Kumar
category: 技术
comments_data:
- date: '2015-06-11 17:39:17'
  message: "那么 !! 和 !-1 是一样的么？\r\n\r\n好危险的命令！"
  postip: 124.254.61.170
  username: soli
- date: '2015-06-12 00:36:29'
  message: 很有用的技巧，之前只知道 ！+编号 和 ！！ 这种用法，没想到还有这么多有用的纠正错误输入的手段。
  postip: 114.255.40.44
  username: Sephiroth
- date: '2015-06-17 22:47:36'
  message: "7 运行一个影响所有除了![FILE_NAME]的文件命令&nbsp; &nbsp;\r\n没有测试成功\r\n[root@node1
    test]# ll\r\ntotal 0\r\n-rw-r--r-- 1 root root 0 Jun 17 22:31 1\r\n-rw-r--r-- 1 root root 0 Jun 17 22:30 1.sh\r\n-rw-r--r-- 1 root root
    0 Jun 17 22:31 2\r\n-rw-r--r-- 1 root root 0 Jun 17 22:30 2.sh\r\n-rw-r--r--
    1 root root 0 Jun 17 22:31 3\r\n-rw-r--r-- 1 root root 0 Jun 17 22:30 3.sh\r\n-rw-r--r-- 1 root root 0 Jun 17 22:31 4\r\n-rw-r--r-- 1 root root
    0 Jun 17 22:30 4.sh\r\n-rw-r--r-- 1 root root 0 Jun 17 22:31 5\r\n[root@node1
    test]# rm !(*.sh)\r\n-bash: !: event not found"
  postip: 222.242.3.51
  username: yuanwow
- date: '2015-06-18 12:29:23'
  message: 这个确实的原文没有说清楚。根据我的研究，这个需要打开 bash 里面 extglob 模式，使用 shopt -s extglob 来打开后，才支持
    ?(pattern-list) ，*(pattern-list) ，+(pattern-list) ，@(pattern-list) 和 !(pattern-list)
    。关于这个，我找找有无详尽的资料来介绍一下，或者也欢迎有研究过的投稿。:&gt;
  postip: 106.120.220.78
  username: linux
count:
  commentnum: 4
  favtimes: 12
  likes: 0
  sharetimes: 0
  viewnum: 17963
date: '2015-06-11 14:02:00'
editorchoice: false
excerpt: '''!''符号在Linux中不但可以用作否定符号，还可以用来从历史命令记录中取出命令或不加修改的执行之前运行的命令。下面的所有命令都已经在Bash
  Shell中经过确切地检验。尽管我没有试过，但大多都不能在别的Shell中运行。这里我们介绍下Linux命令行中符号''!''那惊人和奇妙的用法。  1. 使用数字从历史命令列表中找一条命令来执行
  您也许没有意识到您可以从历史命令列表（之前已经执行的命令集）中找出一条来运行。首先，通过&quot;history&quot;命令查找之前命令的序号。 $ history   使用history命令找到最后执行的命令
  现在，只需要使用历史命令输出中'
fromurl: http://www.tecmint.com/mysterious-uses-of-symbol-or-operator-in-linux-commands/
id: 5608
islctt: true
largepic: /data/attachment/album/201506/11/140239tazxmmzbpxuqtkyq.png
permalink: /article-5608-1.html
pic: /data/attachment/album/201506/11/140239tazxmmzbpxuqtkyq.png.thumb.jpg
related:
- displayorder: 0
  raid: 5658
reviewer: ''
selector: ''
summary: '''!''符号在Linux中不但可以用作否定符号，还可以用来从历史命令记录中取出命令或不加修改的执行之前运行的命令。下面的所有命令都已经在Bash
  Shell中经过确切地检验。尽管我没有试过，但大多都不能在别的Shell中运行。这里我们介绍下Linux命令行中符号''!''那惊人和奇妙的用法。  1. 使用数字从历史命令列表中找一条命令来执行
  您也许没有意识到您可以从历史命令列表（之前已经执行的命令集）中找出一条来运行。首先，通过&quot;history&quot;命令查找之前命令的序号。 $ history   使用history命令找到最后执行的命令
  现在，只需要使用历史命令输出中'
tags:
- 脚本
- 惊叹号
thumb: false
title: 在Linux命令行下令人惊叹的惊叹号（!）
titlepic: false
translator: wwy-hust
updated: '2015-06-11 14:02:00'
---
`'!'`符号在Linux中不但可以用作否定符号，还可以用来从历史命令记录中取出命令或不加修改的执行之前运行的命令。下面的所有命令都已经在Bash Shell中经过确切地检验。尽管我没有试过，但大多都不能在别的Shell中运行。这里我们介绍下Linux命令行中符号`'!'`那惊人和奇妙的用法。
![](/data/attachment/album/201506/11/140239tazxmmzbpxuqtkyq.png)
### 1. 使用数字从历史命令列表中找一条命令来执行
您也许没有意识到您可以从历史命令列表（之前已经执行的命令集）中找出一条来运行。首先，通过"history"命令查找之前命令的序号。
```
$ history
```
![使用history命令找到最后执行的命令](/data/attachment/album/201506/11/140241esssmlz1bllwtv9c.gif)
*使用history命令找到最后执行的命令*
现在，只需要使用历史命令输出中显示在该命令前面的数字便可以运行这个命令。例如，运行一个在`history`输出中编号是1551的命令。
```
$ !1551
```
![使用命令ID来执行最后运行的命令](/data/attachment/album/201506/11/140242qgtv17zhghhvhhar.gif)
*使用命令ID来执行最后运行的命令*
这样，编号为1551的命令（上面的例子是[top命令](http://www.tecmint.com/12-top-command-examples-in-linux/)）便运行了。这种通过ID号来执行之前的命令的方式很有用，尤其是在这些命令都很长的情况下。您只需要使用**![history命令输出的序号]**便可以调用它。
### 2. 运行之前的倒数第二个、第七个命令等
您可以以另一种方式来运行之前执行的命令，通过使用-1代表最后的命令，-2代表倒数第二个命令，-7代表倒数第七个命令等。
首先使用history命令来获得执行过的命令的列表。**history命令的执行很有必要**，因为您可以通过它来确保没有`rm command > file`或其他会导致危险的命令。接下来执行倒数第六个、第八个、第十个命令。
```
$ history
$ !-6
$ !-8
$ !-10
```
![通过负数序号运行之前执行的命令](/data/attachment/album/201506/11/140244lcmlciihh1hwetlh.gif)
*通过负数序号运行之前执行的命令*
### 3. 传递最后执行的命令的参数，以方便的运行新的命令
我需要显示`/home/$USER/Binary/firefox`文件夹的内容，因此我执行：
```
$ ls /home/$USER/Binary/firefox
```
接下来，我意识到我应该执行'ls -l'来查看哪个文件是可执行文件。因此我应该重新输入整个命令么？不，我不需要。我仅需要在新的命令中带上最后的参数，类似：
```
$ ls -l !$
```
这里`!$`将把最后执行的命令的参数传递到这个新的命令中。
![将上一个命令的参数传递给新命令](/data/attachment/album/201506/11/140247mp2kjz719gk1yhrj.gif)
*将上一个命令的参数传递给新命令*
### 4. 如何使用!来处理两个或更多的参数
比如说我在桌面创建了一个文本文件file1.txt。
```
$ touch /home/avi/Desktop/1.txt
```
然后在cp命令中使用绝对路径将它拷贝到`/home/avi/Downloads`。
```
$ cp /home/avi/Desktop/1.txt /home/avi/downloads
```
这里，我们给cp命令传递了两个参数。第一个是`/home/avi/Desktop/1.txt`，第二个是`/home/avi/Downloads`。让我们分别处理他们，使用`echo [参数]`来打印两个不同的参数。
```
$ echo "1st Argument is : !^"
$ echo "2nd Argument is : !cp:2"
```
注意第一个参数可以使用`"!^"`进行打印，其余的命令可以通过`"![命令名]:[参数编号]"`打印。
在上面的例子中，第一个命令是`cp`，第二个参数也需要被打印。因此是`"!cp:2"`，如果任何命令比如xyz运行时有5个参数，而您需要获得第四个参数，您可以使用`"!xyz:4"`。所有的参数都可以通过`"!*"`来获得。
![处理两个或更多的参数](/data/attachment/album/201506/11/140247pz7aabxa4c4zzn7m.gif)
*处理两个或更多的参数*
### 5. 以关键字为基础执行上个的命令
我们可以以关键字为基础执行上次执行的命令。可以从下面的例子中理解：
```
$ ls /home > /dev/null                      [命令1]
$ ls -l /home/avi/Desktop > /dev/null                       [命令2]   
$ ls -la /home/avi/Downloads > /dev/null                    [命令3]
$ ls -lA /usr/bin > /dev/null                       [命令4]
```
上面我们使用了同样的命令（ls），但有不同的开关和不同的操作文件夹。而且，我们还将输出传递到`/dev/null`，我们并未显示输出，因而终端依旧很干净。
现在以关键字为基础执行上个的命令。
```
$ ! ls                  [命令1]
$ ! ls -l               [命令2]   