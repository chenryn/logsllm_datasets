title:An opportunistic authority evaluation scheme for data security in
crisis management scenarios
author:Enrico Scalavino and
Giovanni Russello and
Rudi Ball and
Vaibhav Gowadia and
Emil C. Lupu
Secure Cross-Domain Data Sharing Architecture
for Crisis Management
Vaibhav Gowadia, Enrico Scalavino, Emil C. Lupu
Imperial College London
{vgowadia, escala, e.c.lupu}@imperial.ac.uk
Dmitry Starostin, Alexey Orlov
European Microsoft Innovation Center, Aachen
{dmitrys, alexeyo}@microsoft.com
Abstract
Crisis management requires rapid sharing of data among organizations
responding to the crisis. Existing crisis management practices rely on ad
hoc or centralized data sharing based on agreements written in natural lan-
guage. The ambiguity of natural language speciﬁcations often leads to errors
and can hinder data availability. Therefore, it is desirable to develop auto-
matic data sharing systems. The need to share data during crises presents
additional challenges, such as evaluation of security constraints in different
administrative domains and in situations with intermittent network connec-
tivity. We compare two different architectural approaches to develop secure
data sharing solutions. The ﬁrst approach assumes reliable network connec-
tivity, while the second approach works in ad hoc networks. We then suggest
a uniﬁed architecture that caters for both scenarios.
1 Introduction
Crisis management is the process of organizing response to incidents that seriously
threaten people’s lives or the environment. Examples of such incidents include
road accidents, ﬁres, etc. These incidents may evolve rapidly and need a quick
and efﬁcient response to limit the damages. Crisis management often requires ac-
cess to sensitive data from many organizations or different administrative domains.
For example, responders from different administrative domains may need to know
the number of casualties, or the imminent dangers for the surrounding area, and
medical records must be shared to provide care for the victims.
In the rest of this paper, we will indicate the organization where data originates
as the data provider and the recipient organization as the data consumer. Sensi-
tive data must be protected according to the security policies of the data provider
1
even after it has been disseminated to users in other organizations or different ad-
ministrative domains. This usually requires mutual trust between the data provider
and consumer. The data provider must ensure that its data will be protected after
dissemination, while the data consumer needs to know what data it will be able to
access. Organizations form Data Sharing Agreements (DSA) [26] to achieve these
goals. A DSA is a signed contract stating each partner’s obligations, which allows
the partners to seek remedy (e.g. through legal means) for breaches of the contract.
Establishment of a DSA allows the data provider to trust data consumers to enforce
the agreed policies in their administrative domain.
In practice, DSAs are expressed in natural language (e.g., see [13]) and include
the authorization policies for the shared data. Common practices of ﬁrst-aid and
public-safety agencies indicate that the evaluation and enforcement of DSAs are
not automated and data is often shared informally [27].
Informal data sharing
requires manual decision making. However, a manual process can cause delays and
errors, which can in turn lead to deterioration of the crisis at hand. Effective and
scalable crisis management requires an automated and efﬁcient DSA evaluation
and enforcement system.
Existing dissemination control architectures [18, 16, 2, 5, 10, 14, 15] are unable
to address the requirements of cross-domain data sharing during crisis situations.
First, they require recipients to contact the data provider or a pre-deﬁned central
policy evaluation authority to obtain access rights. However, responders may not
be able to connect with the central authority while lending support in the crisis
area.
If, for example, the incident happens in a tunnel. The incident response
command centers located in response vehicles may use long range communication
equipment to exchange data with the outside world, while responders with mobile
devices may have to depend on ad hoc links using short range communication of
their devices. Ad hoc networks provide intermittent connectivity as the network
nodes (responders) are always in motion. A remote policy evaluation authority
could be unreachable from the responder’s location if the network is temporarily
partitioned. This limitation can be fatal in crisis management scenarios. It is there-
fore necessary to cater for situations when data may be shared through an ad hoc
network among rescuers, or manually using portable media such as data sticks. To
effectively respond to crises, data must be protected in ways that do not require
communication with entities outside the responder’s reach.
Another limitation of the existing dissemination control architectures is that
policies are unilaterally deﬁned by the data provider who may have poor or no
knowledge of user credentials and contextual information available in the data
consumer’s administrative domain. This severely restricts the expressiveness of
the policies that can be enforced in practice.
2
Example 1.1 Consider a crisis scenario where a leakage of a toxic chemical is
threatening a neighborhood and the Police coordinates the evacuation of people
living nearby. Responders collect sensitive personal and medical information of
the evacuees, and need to share it with employees of the Local Government to
coordinate medical support for the evacuees. It is responsibility of the Police to
protect the collected sensitive data. Following the need to know principle, the Po-
lice should give access to only those members of the Government staff that are
assigned to the incident at hand. To specify such an access policy the data provider
(Police) must know how to identify personnel assigned to the incident in the Lo-
cal Government’s administrative domain. The data consumer (Local Government)
must understand the conditions required by the data provider’s policy and be able
to provide matching credentials. In other words, the data sharing partners must
agree on a common/shared vocabulary as part of their DSA.
2
This paper presents a data sharing architecture based on the concept of DSAs
that caters for data access with intermittent connectivity. We identify a policy
evaluation and key distribution scheme suitable for ad hoc / opportunistic networks
[19, 28, 9] that allows users to obtain permissions without communicating with a
central policy evaluation authority. We discuss how the architecture enables usage
control [17]; i.e., continuous control over data access.
The remainder of this paper is organized as follows: Section 2 discusses related
works and their limitations. In Section 3 we introduce the concepts of DSA and
usage control policy. Section 4 discusses the design options for a cross-domain
data sharing architecture. We also propose a uniﬁed architecture that addresses the
requirements of data sharing in crisis scenarios. Section 5 describes the deployed
components and their behavior. We give an overview of our implementation in
Section 6. In Section 7, we discuss further design options and features. Finally,
we conclude in Section 8 where we also discuss how the proposed architecture
addresses the stated requirements.
2 Related Work
Dissemination control systems are also known as Digital Rights Management (DRM)
and Enterprise Rights Management (ERM) systems [5, 15, 25] and share many
common design principles and functionalities. The sensitive data is cryptograph-
ically protected and associated with access policies. These policies are evaluated
by a central trusted authority (TA), who is often the originator itself. The TA eval-
uates recipients rights and issues the decryption keys to them (see Figure 1). This
kind of architecture suffers from limitations that make its use inappropriate in cri-
sis management scenarios: 1) The TA is statically deﬁned and any change requires
3
manual intervention; 2) if the TA is not available, the users cannot access the data;
3) cross-domain evaluation is hard to achieve due to the limited knowledge of the
data consumer’s domain.
Figure 1: Deployment of Centralized Rights Distribution Architectures
Park et al. [18] presented an analysis of possible dissemination control archi-
tectures based on three elements: virtual machine (enforcement layer), control set
(list of access rights and usage rules), and distribution scheme (push or pull). They
also identiﬁed three types of control sets: ﬁxed, embedded, and external. A ﬁxed
control set is hard coded into the virtual machine. An embedded control set is sent
with the protected data and an external control set resides at a remote location.
However, they do not explain how rights can be determined during cross-domain
evaluations.
Adam et al. [1] proposed a data sharing architecture that uses an intermediate
coordinator service in each organization. Data can be shared with other organi-
zations in push or pull mode. In push mode, data can be shared at inter-agency
level between the coordinator services, and at intra-agency level between a coordi-
nator service and recipients within its organization. Whereas in pull mode data is
shared only at inter-agency level. In their architecture, after the coordinators have
exchanged data the originator does not retain any control over it. Moreover, the
proposed solution is unusable when connectivity is absent.
Since it is not feasible to use a central policy evaluation authority in crisis
management, it is necessary to explore other rights distribution architectures that
do not require communication with a central server.
Access Hierarchy based Encryption (AHE) [4] deﬁnes a hierarchy of access-
levels. Each access-level is associated with a secret key and a public label. while
each edge is assigned a public value. The secret key of a node in the hierarchy can
be derived in an ofﬂine mode if the secret key of its parent node is known.
Attribute Based Encryption (ABE) [20] can be considered as an evolution of
Identity Based Encryption (IBE) [7], where documents are encrypted using an at-
4
tribute based policy and a TA’s public key. The TA generates a secret key for
each user based on the user’s attributes so that they are able to decrypt data only
if their attributes satisfy the attribute based policy used for the encryption. Again,
attribute-based keys must be disseminated before any access request.
The Policy-based Authority Evaluation Scheme (PAES) [22] allows a data orig-
inator to specify a hierarchy of authorities trusted to correctly evaluate its policies.
The set of authorities trusted to evaluate the usage control policies is not statically
deﬁned, but designated by a trust policy evaluated by a higher level authority. The
set of higher level authorities is recursively deﬁned by policies. The recursion ter-
minates by a set of statically deﬁned authorities at the root-level of the hierarchy.
As a result this protocol allows recipients to choose a trusted authority in a more
ﬂexible manner.
3 Deﬁnitions
The core ingredients of a DSA are 1) the scope of the agreement, 2) the attribute
vocabulary, 3) the security policies, and 4) the penalties for violating the agree-
ment.
Deﬁnition 3.1 (Data Sharing Agreement)
A Data Sharing Agreement dsa is a 6-tuple (id,A,S,T,P,V ) where id is a unique
identiﬁer, A is an attribute vocabulary describing subject, data, and context at-
tributes, S is the scope of the agreement, T is a set of authorities trusted for provid-
ing user and context attributes, P is a set of usage policies that must be enforced,
and V is a set of violation procedures applicable whenever P is violated. The scope
of the agreement is deﬁned as a 4-tuple (E,O,ts,te) where E is the set of entities
signing the DSA, O is a sets of conditions over data attributes that must be satisﬁed
by all data items to which this agreement is applicable, ts and te are the dates and
times at which the agreement becomes effective and expires respectively.
When an entity agrees to a DSA it promises to enforce policies equivalent
to P for the data provided by the partner entities. This ensures that the security
requirements of the data provider are satisﬁed.
DSAs may include additional speciﬁcations, such as procedures to resolve dis-
putes, to revise the agreement etc. Discussion of these components and violation
procedures are outside the scope of this paper.
Park et al. [17] described a formal model for usage control based on authoriza-
tions, obligations, and conditions. Conditions describe constraints over subject,
data, and contextual attributes. To provide continuity of control the usage control
policy must be reevaluated if any of the attributes change. This requires monitoring
5
of the attributes used in access conditions. However, monitoring all attributes for
a large set of documents can consume signiﬁcant computing and energy resources.
We therefore observe that attributes may be either long-lived (persistent) or short-
lived (volatile). For example, a user’s id or group may be considered long-lived,
whereas a user’s location is short-lived as it may change frequently during an ac-
cess session. Thus, in our deﬁnition of usage control policy, we allow the policy
author to clearly separate the long and short lived access conditions so that only
the latter are monitored.
Deﬁnition 3.2 (Usage Control Policy)
A usage control policy p is a 5-tuple (s,o,a,c,cm) representing a permission given
to subject s to perform action a on object o, when the conditions c and cm are
satisﬁed. To allow access c must be satisﬁed at the moment of the access request,
whereas condition cm must hold for the entire duration of the usage. This means
cm must be monitored after access is granted and the usage must be interrupted as
soon as cm becomes false.
Although the DSA partners agree on a common vocabulary, the attributes used
in the DSA may still not match with the credentials issued by the organizations.
Thus, the architecture should either translate the usage policies of each DSA to
a domain-speciﬁc enforceable version, or translate the credentials for each access
request depending on the applicable DSA. We take the ﬁrst approach because the
translation needs to be done only once for each DSA.