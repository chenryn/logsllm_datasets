scanners. As a result, they generally are not as well appreciated or understood,
and therefore they are of great interest to an attacker.
This chapter describes the kinds of logic fl aws that often exist in web applica-
tions and the practical steps you can take to probe and attack an application’s
logic. We will present a series of real-world examples, each of which manifests a
different kind of logical defect. Together, they illustrate the variety of assumptions
405
cc1111..iinndddd 440055 88//1199//22001111 1122::1111::4444 PPMM
Stuttard c11.indd V2 - 07/26/2011 Page 406
406 Chapter 11 n Attacking Application Logic
that designers and developers make that can lead directly to faulty logic and
expose an application to security vulnerabilities.
The Nature of Logic Flaws
Logic fl aws in web applications are extremely varied. They range from simple
bugs manifested in a handful of lines of code, to complex vulnerabilities arising
from the interoperation of several core components of the application. In some
instances, they may be obvious and easy to detect; in other cases, they may be
exceptionally subtle and liable to elude even the most rigorous code review or
penetration test.
Unlike other coding fl aws such as SQL injection or cross-site scripting, no
common “signature” is associated with logic fl aws. The defi ning characteristic, of
course, is that the logic implemented within the application is defective in some
way. In many cases, the defect can be represented in terms of a specifi c assumption
that the designer or developer made, either explicitly or implicitly, that turns out
to be fl awed. In general terms, a programmer may have reasoned something like
“If A happens, then B must be the case, so I will do C.” The programmer did not
ask the entirely different question “But what if X occurs?” and therefore failed to
consider a scenario that violates the assumption. Depending on the circumstances,
this fl awed assumption may open a signifi cant security vulnerability.
As awareness of common web application vulnerabilities has increased in
recent years, the incidence and severity of some categories of vulnerabilities have
declined noticeably. However, because of the nature of logic fl aws, it is unlikely
that they will ever be eliminated via standards for secure development, use of
code-auditing tools, or normal penetration testing. The diverse nature of logic
fl aws, and the fact that detecting and preventing them often requires a good
measure of lateral thinking, suggests that they will be prevalent for a good
while to come. Any serious attacker, therefore, needs to pay serious attention
to the logic employed in the application being targeted to try to fi gure out the
assumptions that designers and developers probably made. Then he should
think imaginatively about how those assumptions may be violated.
Real-World Logic Flaws
The best way to learn about logic fl aws is not by theorizing, but by becoming
acquainted with some actual examples. Although individual instances of logic
fl aws differ hugely, they share many common themes, and they demonstrate
the kinds of mistakes that human developers will always be prone to making.
cc1111..iinndddd 440066 88//1199//22001111 1122::1111::4444 PPMM
06 Stuttard c11.indd V2 - 07/26/2011 Page 407
Chapter 11 n Attacking Application Logic 407
Hence, insights gathered from studying a sample of logic fl aws should help you
uncover new fl aws in entirely different situations.
Example 1: Asking the Oracle
The authors have found instances of the “encryption oracle” fl aw within many
different types of applications. They have used it in numerous attacks, from
decrypting domain credentials in printing software to breaking cloud comput-
ing. The following is a classic example of the fl aw found in a software sales site.
The Functionality
The application implemented a “remember me” function whereby a user could
avoid logging in to the application on each visit by allowing the application to
set a permanent cookie within the browser. This cookie was protected from
tampering or disclosure by an encryption algorithm that was run over a string
composed of the name, user ID, and volatile data to ensure that the resultant
value was unique and could not be predicted. To ensure that it could not be
replayed by an attacker who gained access to it, data specifi c to the machine
was also collected, including the IP address.
This cookie was justifi ably considered a robust solution for protecting a
potentially vulnerable piece of required business functionality.
As well as a “remember me” function, the application had functionality to
store the user’s screen name within a cookie named ScreenName. That way, the
user could receive a personalized greeting in the corner of the site whenever
she next visited the site. Deciding that this name was also a piece of security
information, it was deemed that this should also be encrypted.
The Assumption
The developers decided that because the ScreenName cookie was of considerably
less value to an attacker than the RememberMe cookie, they may as well use the
same encryption algorithm to protect it. What they did not consider was that a
user can specify his screen name and view it onscreen. This inadvertently gave
users access to the encryption function (and encryption key) used to protect the
persistent authentication token RememberMe.
The Attack
In a simple attack, a user supplied the encrypted value of his or her RememberMe
cookie in place of the encrypted ScreenName cookie. When displaying the screen
name back to the user, the application would decrypt the value, check that
cc1111..iinndddd 440077 88//1199//22001111 1122::1111::4444 PPMM
Stuttard c11.indd V2 - 07/26/2011 Page 408
408 Chapter 11 n Attacking Application Logic
decryption had worked, and then print the result on-screen. This resulted in
the following message:
Welcome, marcus|734|192.168.4.282750184
Although this was interesting, it was not necessarily a high-risk issue. It
simply meant that given an encrypted RememberMe cookie, an attacker could
list the contents, including a username, user ID, and IP address. Because no
password was stored in the cookie, there was no immediate way to act on the
information obtained.
The real issue arose from the fact that users could specify their screen names.
As a result, a user could choose this screen name, for example:
admin|1|192.168.4.282750184
When the user logged out and logged back in, the application encrypted this
value and stored it in the user’s browser as the encrypted ScreenName cookie.
If an attacker submitted this encrypted token as the value of the RememberMe
cookie, the application decrypted it, read the user ID, and logged in the attacker
as the administrator! Even though the encryption was Triple DES, using a strong
key and protected against replay attacks, the application could be harnessed as
an “encryption oracle” to decrypt and encrypt arbitrary values.
HACK STEPS
Manifestations of this type of vulnerability can be found in diverse locations.
Examples include account recovery tokens, token-based access to authenti-
cated resources, and any other value being sent to the client side that needs
to be either tamper-proof or unreadable to the user.
1. Look for locations where encryption (not hashing) is used in the applica-
tion. Determine any locations where the application encrypts or decrypts
values supplied by a user, and attempt to substitute any other encrypted
values encountered within the application. Try to cause an error within
the application that reveals the decrypted value or where the decrypted
value is purposely displayed on-screen.
2. Look for an “oracle reveal” vulnerability by determining where an
encrypted value can be supplied that results in the correspond-
ing decrypted value’s being displayed in the application’s response.
Determine whether this leads to the disclosure of sensitive information,
such as a password or credit card.
3. Look for an “oracle encrypt” vulnerability by determining where supply-
ing a cleartext value causes the application to return a corresponding
encrypted value. Determine where this can be abused by specifying arbi-
trary values, or malicious payloads that the application will process.
cc1111..iinndddd 440088 88//1199//22001111 1122::1111::4444 PPMM
08 Stuttard c11.indd V2 - 07/26/2011 Page 409
Chapter 11 n Attacking Application Logic 409
Example 2: Fooling a Password Change Function
The authors have encountered this logic fl aw in a web application implemented
by a fi nancial services company and also in the AOL AIM Enterprise Gateway
application.
The Functionality
The application implemented a password change function for end users. It
required the user to fi ll out fi elds for username, existing password, new pass-
word, and confi rm new password.
There was also a password change function for use by administrators. This
allowed them to change the password of any user without supplying the existing
password. The two functions were implemented within the same server-side
script.
The Assumption
The client-side interface presented to users and administrators differed in one
respect: the administrator’s interface did not contain a fi eld for the existing
password. When the server-side application processed a password change
request, it used the presence or absence of the existing password parameter to
indicate whether the request was from an administrator or an ordinary user. In
other words, it assumed that ordinary users would always supply an existing
password parameter.
The code responsible looked something like this:
String existingPassword = request.getParameter(“existingPassword”);
if (null == existingPassword)
{
trace(“Old password not supplied, must be an administrator”);
return true;
}
else
{
trace(“Verifying user’s old password”);
...
The Attack
When the assumption is explicitly stated in this way, the logic fl aw becomes
obvious. Of course, an ordinary user could issue a request that did not contain
an existing password parameter, because users controlled every aspect of the
requests they issued.
cc1111..iinndddd 440099 88//1199//22001111 1122::1111::4455 PPMM
Stuttard c11.indd V2 - 07/26/2011 Page 410
410 Chapter 11 n Attacking Application Logic
This logic fl aw was devastating for the application. It enabled an attacker to
reset the password of any other user and take full control of that person’s account.
HACK STEPS
1. When probing key functionality for logic flaws, try removing in turn each
parameter submitted in requests, including cookies, query string fields,
and items of POST data.
2. Be sure to delete the actual name of the parameter as well as its value.
Do not just submit an empty string, because typically the server handles
this differently.
3. Attack only one parameter at a time to ensure that all relevant code paths
within the application are reached.
4. If the request you are manipulating is part of a multistage process, follow
the process through to completion, because some later logic may process
data that was supplied in earlier steps and stored within the session.
Example 3: Proceeding to Checkout
The authors encountered this logic fl aw in the web application employed by
an online retailer.
The Functionality
The process of placing an order involved the following stages:
1. Browse the product catalog, and add items to the shopping basket.
2. Return to the shopping basket, and fi nalize the order.
3. Enter payment information.
4. Enter delivery information.
The Assumption
The developers assumed that users would always access the stages in the intended
sequence, because this was the order in which the stages are delivered to the
user by the navigational links and forms presented to the user’s browser. Hence,
any user who completed the ordering process must have submitted satisfactory
payment details along the way.
The Attack
The developers’ assumption was fl awed for fairly obvious reasons. Users con-
trolled every request they made to the application and therefore could access
cc1111..iinndddd 441100 88//1199//22001111 1122::1111::4455 PPMM
10 Stuttard c11.indd V2 - 07/26/2011 Page 411
Chapter 11 n Attacking Application Logic 411
any stage of the ordering process in any sequence. By proceeding directly from
stage 2 to stage 4, an attacker could generate an order that was fi nalized for
delivery but that had not actually been paid for.
HACK STEPS
The technique for fi nding and exploiting fl aws of this kind is known as forced
browsing. It involves circumventing any controls imposed by in-browser navi-
gation on the sequence in which application functions may be accessed:
1. When a multistage process involves a defined sequence of requests,
attempt to submit these requests out of the expected sequence. Try skip-
ping certain stages, accessing a single stage more than once, and access-
ing earlier stages after later ones.
2. The sequence of stages may be accessed via a series of GET or POST
requests for distinct URLs, or they may involve submitting different sets of
parameters to the same URL. The stage being requested may be specified
by submitting a function name or index within a request parameter. Be
sure to understand fully the mechanisms that the application is employing
to deliver access to distinct stages.
3. From the context of the functionality that is implemented, try to under-
stand what assumptions the developers may have made and where the
key attack surface lies. Try to identify ways of violating those assumptions
to cause undesirable behavior within the application.
4. When multistage functions are accessed out of sequence, it is common
to encounter a variety of anomalous conditions within the application,
such as variables with null or uninitialized values, a partially defined or
inconsistent state, and other unpredictable behavior. In this situation, the
application may return an interesting error message and debug output,
which you can use to better understand its internal workings and thereby
fine-tune the current or a different attack (see Chapter 15). Sometimes,
the application may get into a state entirely unanticipated by developers,
which may lead to serious security flaws.
NOTE Many types of access control vulnerability are similar in nature to this
logic fl aw. When a privileged function involves multiple stages that normally
are accessed in a defi ned sequence, the application may assume that users
will always proceed through the functionality in this sequence. The applica-
tion may enforce strict access control on the initial stages of the process and
assume that any user who reaches the later stages therefore must be autho-
rized. If a low-privileged user proceeds directly to a later stage, she may be
able to access it without any restrictions. See Chapter 8 for more details on
fi nding and exploiting vulnerabilities of this kind.
cc1111..iinndddd 441111 88//1199//22001111 1122::1111::4455 PPMM
Stuttard c11.indd V2 - 07/26/2011 Page 412
412 Chapter 11 n Attacking Application Logic
Example 4: Rolling Your Own Insurance
The authors encountered this logic fl aw in a web application deployed by a
fi nancial services company.
The Functionality
The application enabled users to obtain quotes for insurance and, if desired,
complete and submit an insurance application online. The process was spread
across a dozen stages:
n At the fi rst stage, the applicant submitted some basic information and
specifi ed either a preferred monthly premium or the value he wanted
insurance for. The application offered a quote, computing whichever
value the applicant did not specify.
n Across several stages, the applicant supplied various other personal details,
including health, occupation, and pastimes.
n Finally, the application was transmitted to an underwriter working for
the insurance company. Using the same web application, the underwriter
reviewed the details and decided whether to accept the application as is
or modify the initial quote to refl ect any additional risks.
Through each of the stages described, the application employed a shared com-
ponent to process each parameter of user data submitted to it. This component
parsed all the data in each POST request into name/value pairs and updated its
state information with each item of data received.
The Assumption
The component that processed user-supplied data assumed that each request
would contain only the parameters that had been requested from the user in
the relevant HTML form. Developers did not consider what would happen if a
user submitted parameters he was not asked to supply.
The Attack
Of course, the assumption was fl awed, because users could submit arbitrary
parameter names and values with every request. As a result, the application’s
core functionality was broken in various ways:
n An attacker could exploit the shared component to bypass all server-side
input validation. At each stage of the quotation process, the application
performed strict validation of the data expected at that stage and rejected
any data that failed this validation. But the shared component updated
cc1111..iinndddd 441122 88//1199//22001111 1122::1111::4455 PPMM
12 Stuttard c11.indd V2 - 07/26/2011 Page 413
Chapter 11 n Attacking Application Logic 413
the application’s state with every parameter supplied by the user. Hence,
if an attacker submitted data out of sequence by supplying a name/value
pair that the application expected at an earlier stage, that data would be
accepted and processed, with no validation having been performed. As it
happened, this possibility paved the way for a stored cross-site scripting
attack targeting the underwriter, which allowed a malicious user to access
the personal information of other applicants (see Chapter 12).
n An attacker could buy insurance at an arbitrary price. At the fi rst stage of
the quotation process, the applicant specifi ed either her preferred monthly
premium or the value she wanted to insure, and the application computed
the other item accordingly. However, if a user supplied new values for
either or both of these items at a later stage, the application’s state was
updated with these values. By submitting these parameters out of sequence,
an attacker could obtain a quote for insurance at an arbitrary value and
arbitrary monthly premium.
n There were no access controls regarding which parameters a given type of
user could supply. When an underwriter reviewed a completed applica-
tion, he updated various items of data, including the acceptance decision.