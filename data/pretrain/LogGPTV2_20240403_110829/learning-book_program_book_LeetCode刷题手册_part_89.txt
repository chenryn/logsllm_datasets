表当前需要组成1首歌，有2种方式可以得到，由1-1首歌的列表中添加一首列表中不存在
的新歌曲，或者由1-1首歌的列表中添加一首列表中已经存在的歌曲。即，dp[i][j]可以由
dp[i-1][j-1]得到，也可以由dp[i-1][j]得到。如果是第一种情况，添加一首新
歌，那么新歌有N-（j-1）首，如果是第二种情况，添加一首已经存在的歌，歌有j首，所以状态
-]+（（-）-）-=]
。但是这个方程是在不考虑K的限制条件下得到的，距离满足题意还差一步。接下来需要考虑加
入K这个限制条件以后，状态转移方程该如何推导。
·如果是添加一首新歌，是不受K限制的，所以dp[i-1][j-1]*（N-（j-1））这
里不需要变化。如果是添加一首存在的歌曲，这个时候就会受到K的限制了。如果当前播放列表
里面的歌曲有j首，并且j>K，那么选择歌曲只能从j-K里面选，因为不能选择j-1
到j-k的这些歌，选择了就不满足重复的歌之间间隔不能小于K的限制条件了。那j≤K呢？
这个时候一首歌都不能选，因为歌曲数都没有超过K，当然不能再选择重复的歌曲。（选择了就再
次不满足重复的歌之间间隔不能小于K的限制条件了）。经过上述分析，可以得到最终的状态转移
方程：
K{
dp[i][j] = (dp[i][j] + (dp[i-1][j]*(j-k))%mod) % mod
3
return dp[L][N]
---
## Page 884
921.MinimumAddtoMakeParenthesesValid
题目
Given a string S of ( and )' parentheses, we add the minimum number of parentheses ( '′' or ')',
and in any positions ) so that the resulting parentheses string is validl.
Formally, a parentheses string is valid if and only if:
●It is the empty string, or
●It can be written as AB (A concatenated with B), where A and B are valid strings, or
●It can be written as (A), where A is a valid string.
Given a parentheses string, return the minimum number of parentheses we must adld to
make the resulting string valid.
Example 1:
Input: "())"
output: 1
Example 2:
Input: "((("
Output: 3
Example 3:
Input: ")"
Output:0
Example 4:
Input: "())) (("
output: 4
Note:
1. S.length  0 && stack[len(stack)-1] ==‘(′{
stack = stack[:len(stack)-1]
}else{
stack = append(stack,v)
3
return len(stack)
922.SortArrayByParityll
题目
Given an array A of non-negative integers, half of the integers in A are odld, and half of the
integers are even.
Sort the array so that whenever A[i] is odd, i is odd; and whenever A[i] is even, i is even.
You may return any answer array that satisfies this condition.
Example 1:
---
## Page 886
Input: [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would a1so have been accepted.
Note:
●2  {> 1 seu ypns x ↑ ′ sajdn jo jaqwnu au unau jaje jaasui ue pue  Aeue yagaui ue uaaig
ae] == [x] + [ + [ pue 
As the answer can be very large, return it modulo 10^9 + 7.
Example 1:
Input: A = [1,1,2,2,3,3,4,4,5,5], target = 8
Output: 20
Exp1anation:
Enumerating by the values (A[i], A[j], A[k]) :
(1, 2, 5) occurs 8 times;
(1, 3, 4) occurs 8 times;
(2,2, 4) occurs 2 times;
(2, 3， 3) occurs 2 times.
Example 2:
Input: A = [1,1,2,2,2,2], target = 5
Output: 12
Exp1anation:
 s  =[] =[]  =[]
We choose one 1 from [1,1] in 2 ways,
and two 2s from [2,2,2,2] in 6 ways.
Note:
●3 =3 {
res += ni = (ni - 1)  (ni - 2) / 6
for j:=i+1;jl {
res += ni # (ni - 1) / 2 * nj
：
if (uniqNums[j]2+uniqNums[i] == target) && counter[uniqNums[j]] > 1 {
res += nj * (nj - 1) / 2 * ni
C := target - uniqNums[i] - uniqNums[j]
if c>uniqNums[j] && counter[c]>0{
res += ni α nj * counter[c]
1
return res % mod
924.MinimizeMalwareSpread
题目
---
## Page 889
graph[i][j] = 1.
Some nodes initial are initially infected by malware. Whenever two nodes are directly
connected and at least one of those two nodes is infected by malware, both nodes will be
infected by malware. This spread of malware will continue until no more nodes can be infected in
this manner.
Suppose M(ini tia1) is the final number of nodes infected with malware in the entire network,
after the spread of malware stops.
We will remove one node from the initial list. Return the node that if removed, would minimize
M(initia1) . if multiple nodes could be removed to minimize M(initia1) , return such a node
with the smallest index.
Note that if a node was removed from the ini tiaT list of infected nodes, it may still be infected
later as a result of the malware spread.
Example 1:
Input: graph = [[1,1,0], [1,1,0],[0,0,1]], initial = [0,1]
output: 0
Example 2:
Input: graph = [[1,0,0], [0,1,0], [0,0,1]], initial = [0,2]
output: 0
Example 3
Input: graph = [[1,1,1], [1,1,1], [1,1,1]], initial = [1,2]
output: 1
Note:
1.1  yua[o]yde = yuayde > ●
●0 v{
minIndex = V
if count 0 && j <len(typed) && name[i-1] == typed[j] {
j++
i --
}else {
return false
上
return true
927.ThreeEqualParts
题目
Given an array A of 0 s and 1 s, divide the array into 3 non-empty parts such that all of these
parts represent the same binary value.
If it is possible, return any [i, j] with i+1 < j, such that:
●A[o], A[1], ..., A[i] is the first part;
●A[i+1], A[i+2], ..., A[j-1] is the second part, and
●A[j], A[j+1], ..., A[A.length - 1] is the third part
● All three parts have equal binary value.
If it is not possible, return [-1, -1]-
Note that the entire part is used when considering what binary value it represents. For example,
pe [t't'o]os pamoe ae soaz upeal osi e ou ewpap ui g suasada [o't']
[1, 1] represent the same value.
Example 1:
Input: [1,0, 1,0,1]
output: [0,3]
---
## Page 894
Example 2:
Input: [1,1,0,1,1]
Output: [-1, -1]
Note:
1. 3 <= A.1ength <= 30000
2. A[i] == 0 or A[i] == 1
题目大意
给定一个由0和1组成的数组A，将数组分成3个非空的部分，使得所有这些部分表示相同的二进制
值。如果可以做到，请返回任何[.]，其中i+1<]，这样一来：
·A[0],A[1],.,A[i]组成第一部分；
●A[i+1],A[i+2],,A[j-1] 作为第二部分；
●A[j], A[j+1], , A[A.length - 1] 是第三部分。
·这三个部分所表示的二进制值相等。
如果无法做到，就返回[-1,-1]。
注意，在考虑每个部分所表示的二进制时，应当将其看作一个整体。例如，[1,1.0]表示十进制中的6，
而不会是3。此外，前导零也是被允许的，所以[0,1,1]和[1,1]表示相同的值。
提示：
1. 3 <= A.length <= 30000
2. A[i] == 0 或 A[i] == 1