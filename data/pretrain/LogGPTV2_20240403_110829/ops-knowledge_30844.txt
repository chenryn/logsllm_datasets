User: I'm currently running into soft memory errors on my Google App Engine app because of high memory usage.  A number of large objects are driving memory usage sky high.  
I thought perhaps if I set and recalled them from memcache maybe that might reduce overall memory usage.  Reading through the docs this doesn't seem to be the case, and that the benefit of memcache is to reduce HRD queries.
Does memcache impact overall memory positively or negatively?
Edit: I know I can upgrade the instance class to F2 but I'm trying to see if I can remain on the least expensive while reducing memory.
Assistant: Moving objects to and from Memcache will have no impact on your memory unless you destroy these objects in your Java code or empty collections.
A bigger problem is that memcache entities are limited to 1MB, and memcache is not guaranteed. The first of these limitations means that you cannot push very large objects into Memcache.
The second limitations means that you cannot easily replace, for example, a HashMap with memcache - it's impossible to tell if getValue() returns null because an object is not present or because it was bumped out of memcache. So you will have to make an extra call each time to a datastore to see if an object is really not present.