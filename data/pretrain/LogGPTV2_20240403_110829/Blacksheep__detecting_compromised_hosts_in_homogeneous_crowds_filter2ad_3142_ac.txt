general case, however, as many kernel modules (for example, mod-
ules from third-party providers such as hardware manufacturers or
security companies) do not provide this information. Nevertheless,
one extremely common structure is the standard doubly-linked list.
This structure is extensively used for various purposes in the Win-
dows kernel, and is easily recognizable in memory due to the lay-
out of the list pointers: the list comprises identically-sized doubly-
linked list elements starting and ending at a standard list header.
Thus, Blacksheep detects and treats doubly-linked lists in a distinct
way.
Because doubly-linked lists are often used to keep track of simi-
lar data (for example, a process list), Blacksheep treats all elements
of the list in aggregate. That is, Blacksheep keeps track of a single,
representative, element for the entire list, assigning a category and
subcategory to each dword that best describes dwords at that loca-
tion in every element of the list (that is, it picks the most general
type). For example, if a list has two elements, A and B, and the ﬁrst
dword of A is classiﬁed as VALUE whereas the ﬁrst dword of B is
classiﬁed as ZERO, Blacksheep will classify the ﬁrst dword of the
representative element as VALUE. Blacksheep uses the size of the
dynamically allocated pools that the list elements are located in to
determine the size of the list elements.
Naming. After generating a list of reachable memory locations
(dwords) and their categories, Blacksheep assigns canonical names
to each location to facilitate comparisons against other memory
dumps. The names are assigned as follows:
For statically allocated data, Blacksheep generates a name con-
sisting of the name of the module and the relative offset of the
data element within that module. For example, a statically-
allocated dword within a ntoskrnl.exe’s data segment (say,
102,088 bytes from the start of the driver) would be named
“(ntoskrnl.exe+102,088)”.
For doubly-linked list headers, Blacksheep generates a name con-
sisting of the offset of the list header within its page in mem-
ory, the pool tag of the list header’s pool (if available), the
size of each element in the list, and the offset of the forward-
link ﬁeld within each list element. For example, a list header
at offset 2,034 bytes into a pool tagged “NTKL,” with ele-
ments of size 24, which have the forward link ﬁeld at offset
8, would be named “(NTKL+2,034, 24, 8)”.
For data in a linked list element, Blacksheep generates a name con-
sisting of the offset of the list header name, and the offset
within the element. Note that this is done only for the rep-
resentative list element. For example, the dword at offset
of 4 bytes into an element of the list “(NTKL+2,034, 24,
8)” would receive a canonical name of “(NTKL+2,034, 24,
8)+4”.
Blacksheep considers changes in the category or subcategory
of identically-named dwords between two memory dumps to be
differences. For example, if “(ntoskrnl.exe+102,088)” is in cate-
gory ZERO in one dump and POINTER in another, Blacksheep will
count this dword as differing. We chose this granularity of compar-
ison because more speciﬁc comparisons (for example, comparing
the actual values of integers) resulted in unmanageable amounts of
noise (benign differences) in the analysis. Likewise, any more gen-
eral analysis quickly becomes meaningless.
The distance metric for data analysis is determined by the to-
tal number of dwords whose classiﬁcation differs between the two
dumps being compared. The differences that rootkits make to the
data structures in memory cause such malicious dumps to stand out
in this analysis.
4.4 Kernel Entry Points
Several mechanisms are used by Windows to switch execution
from user-mode to kernel-mode and to handle hardware interrupts.
346When an event triggers such a transition, a handler function pointer
is loaded, and the kernel-mode execution begins at the location
pointed to by that function pointer. We call these function point-
ers kernel entry points, since they are addresses where user-mode
code “enters” the kernel.
The analysis of these pointers is useful for in rootkit detection
tools, since rootkits frequently modify their values to allow rootkit
functionality to be executed when a speciﬁc event occurs. This
technique allows rootkits to subvert kernel behavior, in essence ﬁl-
tering kernel function invocations. Blacksheep checks the follow-
ing kernel entry points.
Interrupt Description Table (IDT). The IDT is a hardware mech-
anism offered by an x86-compatible processor to allow the operat-
ing system to respond to interrupts. Windows only uses a limited
set of interrupts, mapped the remaining interrupts to generic func-
tions (named nt!KiUnexpectedlnterruptXX, where XX is a number
corresponding to the interrupt). In a non-infected system, all inter-
rupts are mapped to kernel functions inside ntoskrnl.exe or hal.dll
modules.
Interrupt 0x2E is used to switch to kernel-mode when a system
call is performed. Even though Windows uses the SYSENTER in-
struction as opposed to the IDT to switch to kernel mode on modern
processors, this IDT entry is still set to nt!KiSystemService.
SYSENTER. The SYSENTER assembler instruction is used to
quickly switch from user-mode to kernel-mode execution on mod-
ern x86 machines. When this instruction is called, the execution
moves to an address that is stored in particular machine-speciﬁc
registers (MSR). Windows sets these registers in such a way that
whenever the SYSENTER instruction is executed, the kernel func-
tion named nt!KiFastCallEntry is called. This function, in turn,
calls the requested system call according to the value stored in the
EAX register and the currently active thread.
System Service Dispatch Table (SSDT). The SSDT is an ar-
ray of virtual addresses, where each address is the entry point of
a kernel function. When a kernel function is invoked, the function
nt!KiSystemService reads this table and jumps to the required entry.
The address where the SSDT is located is speciﬁed on a per-
thread basis in the KTHREAD data structure. Moreover, a thread
can use more than one SSDT.
Usually, all threads share the same two SSDTs (KiSystemSer-
vice for native Windows APIs, implemented by ntoskrl.exe, and
W32pServiceTable for user and Graphical Display Interface func-
tions, implemented by win32k.sys). However, a rootkit can create
a new SSDT and modify a KTHREAD structure to make the asso-
ciated thread use the new SSDT. Using this method, a rootkit can
avoid being detected by tools checking only the two canonical SS-
DTs.
Call Gates. Call Gates are yet another mechanism to transfer
control between x86 privilege levels. Call Gate descriptors are
speciﬁed in the Global Descriptor Table (GDT), a data structure
used by x86 processors that deﬁnes the characteristics of various
memory areas.
Even though Call Gates are not normally used by modern oper-
ating systems, they can still be utilized by rootkits as a backdoor to
enable the calling of kernel-mode functions from user-mode pro-
grams without the need of a persistent rootkit kernel module.
I/O request packet handlers. I/O request packets (IRPs) are
kernel data structures used by Windows kernel modules to commu-
nicate with each other and with user-mode code. When a kernel
module is loaded, an array of function pointers (one for each IRP
type the module can handle) is initialized. Each of these functions
is invoked when the corresponding I/O request is received by the
kernel module.
Kernel entry point differences. Kernel entry points are com-
puted by comparing the target addresses between the dumps. Black-
sheep checks that each entry point points to the same offset within
the same driver in both dumps. If the entry point points into dynamically-
allocated memory, Blacksheep adds these memory sections to its
code analysis. The distance metric that is calculated for the entry
point analysis is the total number of such differences found between
two dumps.
4.5 Clustering
In the clustering step, Blacksheep calculates a distance between
every pair of dumps, creates hierarchical clusters based on this dis-
tance, and uses these clusters to classify the dumps.
4.5.1 Combined Distance
Blacksheep uses the four analyses previously described to calcu-
late four differences between each memory dump pair. Our four
analyses measure different things, which results in very different
ranges of distance values. To combine our analyses results, Black-
sheep ﬁrst scales the distance values to a unit range (between 0 and
1). To this end, we ﬁnd, for each of the four distances, the maxi-
mum distance value between any pairs of dumps. This maximum
is used as the respective normalization factor. Once normalized,
the four distance values are simply summed up, for a ﬁnal distance
value between each pair of memory dumps. While simple, this
approach allows each analysis to contribute equally to the ﬁnal dis-
tance, and our experiments show that it works well.
4.5.2 Clusters
Utilizing the distance metric, Blacksheep divides the memory
dumps into clusters, using a standard, hierarchical clustering ap-
proach. We use the implementation provided by SciPy, with a "dis-
tance" linkage function. The threshold for the clustering step were
derived manually, based on small scale experiments (we found that,
overall, the distances between clean and infected dumps are typi-
cally noticeably larger than between two clean dumps).
Any generated clusters that contain less than a set threshold of
memory dumps are marked as infected. This threshold is selected
based on the size of the analyzed set, under the assumption that no
more than a certain fraction of the dumps would be infected simul-
taneously. With modern attack patters, we feel that this assumption
is a valid one. Speciﬁcally, a characteristic of APTs (Advanced Per-
sistent Threats) is the compromise of a small amount of machines
by an attacker in a stealthy manner. For example, in the Stuxnet
attack on Irani nuclear reactors, malware was distributed over USB
drives to a small amount of machines. Likewise, many examples
of APTs starting with a spear-phishing campaign to infect a single
machine have been documented. While Blacksheep would not be
effective against a network worm that propels a rootkit throughout
a crowd of machines, it would be effective against a compromise
seeking to establish a foothold inside an organization.
Examining the clusters that Blacksheep produces can be informa-
tive for further analyses, as certain rootkit families reliably cluster
together. This can provide valuable insight into tracking infections
throughout an enterprise.
5.
IMPLEMENTATION
We initially implemented Blacksheep for the analysis of memory
acquired through either QEMU [3] introspection or through the use
of a memory dumping driver. This allows Blacksheep to be used in
both cloud computing and physical deployment scenarios.
The implementation of the Blacksheep approach consists of sev-
eral phases. First, memory is acquired (by one of several meth-
347ods as described in Section 5.1) and transferred over the network
to our analysis server. Then, the analysis server submits jobs to
distributed comparison workers, which generate comparisons be-
tween each pair of memory dumps. Finally, the clustering engine
processes the comparison reports and generates clusters, and detect
infections.
5.1 Memory acquisition
A variety of methods exist to acquire a dump of the physical
memory (and, if applicable, a copy of the swap ﬁle) from a running
machine. The method of choice affects the integrity and complete-
ness of the dump and the possibility of evasion by rootkits. We will
present a brief summary of these methods, and discuss their ad-
vantages and disadvantages. While the acquisition method affects
the results, Blacksheep supports dumps acquired with any of these
methods.
Software memory acquisition. Several tools exist with the pur-
pose of acquiring physical memory dumps from Windows XP and
Windows 7 operating systems. Such tools usually rely on access-
ing the physical memory via the \\Device\PhysicalMemory device
present on these versions of Windows. Since the contents of phys-
ical memory are highly sensitive from a security perspective, mod-
ern versions of Windows restrict access to this device to kernel
drivers only. This necessitates the creation and loading of kernel
drivers to accomplish this task.
Additionally, acquiring the swap ﬁle of the system is another
tricky task. Two software-based methods exist: (i) ﬁnding and
cloning the handle to the swap ﬁle that Windows creates on startup
(so that the handle can be later passed to userspace and the swap
ﬁle read using standard Windows APIs), and (ii) parsing ﬁlesystem
structures on the disk to copy the raw data directly. We chose the
former approach, since it is independent of the underlying ﬁlesys-
tem settings.
Memory dumps acquired in this way tend to contain a large
amount of inconsistencies, for several reasons. First, the dumping
driver and application itself must be loaded into memory, thereby
modifying it. More importantly, however, is the fact that dump-
ing memory by software is not an atomic operation, so the memory
itself continues to be modiﬁed while the dumping procedure is per-
formed. Additionally, such software can be easily tampered with
by rootkits, as it runs with the same privilege levels and in the same
memory space as the rootkit itself.
Despite the disadvantages, since all that is required is a software
installation, this method is the easiest to deploy on a large scale.
Crash dumps and hibernation ﬁles. When a Windows system
crashes or it is hibernated, the operating system saves a snapshot
of the physical memory to disk. Once this occurs, the memory and
swap can easily be read from the disk and utilized by Blacksheep.
Even if these methods are effective in creating memory dumps,
they are not feasible for a widespread usage due to the fact that they
require the system to be interrupted.
Physical devices. Hardware solutions have been proposed for
dumping physical memory, exploiting the fact that external periph-
erals can utilize DMA to achieve direct access to system memory.
In particular, hardware devices working on Firewire, PCI, PCIe,
and ExpressCard interfaces are available.
This method does not need any running software on the target
system, but some inconsistencies in the dumped memory are still
possible if the system is not suspended while dumping the memory.
Additionally, some speciﬁc memory locations, and the swap ﬁle,
cannot be accessed by this method.
Techniques to avoid the dumping of some memory regions by
hardware devices have been studied [28]. Such techniques depend
mov ecx, [ebp+68h]
cmp ecx, 
Figure 1: The value of the MSR 0x176 register is stored in the
KiTrap01 kernel function in Windows XP SP3.
on the speciﬁc hardware methods being used, and do not appear
to have been utilized by rootkits as of yet. However, a software
method might be helpful along with a hardware approach, to make
sure that the dumps generated by the hardware device have not been
tampered with.
This method is difﬁcult to deploy on a wide scale due to the
hardware requirement.
Virtual machine introspection. When a system is running in-
side a virtual machine, the virtualization software running on the
host operating system can easily image the memory of the guest
system. For instance, in QEMU, this is achieved through the use
of the pmemsave command. While the dump is being captured, the
virtual disk can be parsed to recover the swap ﬁle.
Dump artifacts are minimized because the dump is taken while
the guest operating system is suspended. Minor inconsistencies are,
however, still possible due to in-progress memory writes, especially
in multi-processor systems.
Using virtual machine introspection, the dumping process can-
not be tampered with by rootkits running on guest operating sys-
tem, since the process runs on the host. However, a rootkit could
use virtual machine detection techniques to modify or terminate its
behavior when running inside a virtual machine, evading detection.
5.2 Dump Comparison
We utilize Volatility as a library to process Windows memory
dumps in the comparison step. This allows us to support sev-
eral different versions of Windows (speciﬁcally, Volatility supports
32-bit versions of Windows from Windows XP SP2 through Win-
dows 7 SP1, and 64-bit support is planned as well), and abstracts
away minute changes between Windows service packs and major
releases. We have implemented parts of Blacksheep as Volatility
plugins to be able to process swap memory, because this function-
ality was not available in Volatility.
Additionally, the SYSENTER target address described in Sec-
tion 4.4 and utilized in the kernel entry point analysis is actually
stored in the MSR 0x176 x86 CPU register. This is problematic
due to the fact that for certain memory acquisition methods, such as
the dumping of memory over DMA through the use of a hardware
device, hardware registers (including MSR 0x176) are not saved.
To surmount this obstacle, we have identiﬁed a location in memory
where the Windows kernel stores an updated value of this register.
For example, Windows XP SP3 keeps this value in the KiTrap01
kernel function, as seen in Figure 1. However, this is system spe-
ciﬁc, and care has to be taken with regards to system upgrades when
using such an acquisition method.
6. EVALUATION
We evaluated Blacksheep on two sets of memory dumps. The
ﬁrst was acquired from a set of Windows 7 virtual machines using
QEMU VM introspection. Our virtual machines were images of
Windows 7 on the same QEMU host system (so, we expect the
operating system code to be identical in terms of hardware drivers
and kernel modules). As we discussed in Section 5, the acquisition
of memory images in this fashion from a virtual machine produces
a very small amount of memory artifacts, and thus, this is the ideal
setting for Blacksheep.
348non-infected
non-infected
non-infected
non-infected
non-infected
non-infected
non-infected
non-infected
non-infected
non-infected
non-infected