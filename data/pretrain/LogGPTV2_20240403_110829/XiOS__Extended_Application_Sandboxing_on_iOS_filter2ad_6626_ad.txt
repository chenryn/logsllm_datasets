### 5.4 Developer-Defined Policies

XiOS supports the creation and integration of developer-defined policies. While the first step is highly dependent on the specific application, we have implemented a straightforward method for adding policies in the second step. Specifically, developers provide XiOS with two predefined functions: `pre_external_call` and `post_external_call`, which are executed before and after each external function call, respectively. These functions must be implemented in C and must be self-contained, meaning they cannot use other external functions like `memcpy`, as this would create an interception loop. To assist developers, we provide a set of predefined functions, such as `xios_memcpy`, which can be used instead of `memcpy`.

Within the `pre_external_call` and `post_external_call` functions, developers have access to the function name, arguments, and return value. Note that the return value can be either a simple value or a pointer to internal buffers; XiOS can handle both cases. However, since each external function has a different number of arguments and return types, developers must be aware of the function signatures they aim to handle. Additionally, XiOS allows for the modification of return values and arguments.

The following code snippet demonstrates an example where an external call to the `NSLog` function is disallowed:

```c
int pre_external_call(const char *function_name, const unsigned long regs[]) {
    char nslg[6] = "NSLog";
    if (xios_strcmp(function_name, nslg) == 0)
        return FAIL;
}
```

It is important to note that the reference monitor does not differentiate between C function invocations and Objective-C methods, as Objective-C dispatches all method calls through a generic C function called `objc_msgSend`. Both can be analyzed in the same manner within the two predefined functions.

Developing self-contained policies in C can be cumbersome. Therefore, we are currently working on a service where developers can submit their app and use a simple interface to define rules, triggering XiOS's hardening mechanism. This will enable more convenient definition of custom policies.

### 6. Evaluation

In this section, we present a detailed evaluation of XiOS in terms of its effectiveness and efficiency. First, we analyze the effectiveness of our hardening process against previous and new attacks (see Sections 2.2 and 3). Next, we evaluate the performance impact of our changes on the application and measure the overhead imposed on a randomly selected set of both C and Objective-C functions. Finally, we test our hardening mechanism on several real-world applications.

#### 6.1 Effectiveness

To test the effectiveness of XiOS, we use a malicious sample application introduced in Section 3. We modified this application to include both attack types: (1) exploiting the runtime address of a public API ([19, 35] and Section 2.2), and (2) exploiting the runtime address of the dynamic loader function to resolve lazy symbols (Section 3).

First, we apply XiOS to our sample malicious application and deploy the hardened application on a test iOS device (iPhone 4 running iOS 7.0).

**Previous Attacks:**
We tested XiOS against previous attacks by letting the malicious application de-reference the runtime address of a public API. Specifically, we invoked the `CGImageSourceCreateWithURL` public API from the ImageIO framework, which contains references to `load-library` and `load-address`. Since the runtime address of the public API is lazily resolved on-demand, it is stored in the lazy symbol section after the initial call. However, XiOS overwrites the original lazy and non-lazy symbol sections with zeroes, making the de-referenced value always zero. The runtime address of the public API is stored in the shadow table, accessible only to the XiOS reference monitor, effectively preventing the first attack step [19, 35].

**Our New Attack:**
Our improved attack does not require knowledge of a public API runtime address. Instead, it attempts to access the runtime address of the dynamic loader function `dyld_stub_binder`, which is present in the non-lazy symbol section of every iOS application. XiOS prevents this attack by overwriting the non-lazy symbol section with zeroes and maintaining the runtime addresses in the protected shadow table.

In summary, XiOS prevents the malicious application from determining critical runtime addresses of function pointers that could be exploited to invoke private APIs. To further enhance security, we use policies to inspect the return information of public APIs and zeroize or replace any sensitive pointer data. 

An adversary might try to leak function addresses by inspecting return buffers, return values, and return register values. However, this requires exact knowledge of all mapped memory pages, and consecutive read operations from main application code to shared library code can be detected as anomalies. A current limitation of XiOS is that it does not prevent attacks through the address of a global external variable stored in the non-lazy symbol section, which can be used to retrieve the address of dynamic loader functions. This issue is due to the ASLR scheme in iOS not randomizing the offset between the data and code sections. We leave this as future work.

#### 6.2 Efficiency

Our hardening mechanism is deployed by the reference monitor for each function call. The overhead is constant, irrespective of the type of function called, and depends on the number of policies. As described in Section 4.3, we intercept only calls to external functions, so the main application code and instructions from shared libraries execute with native performance.

To determine the overhead per external call, we selected a variety of functions and evaluated their execution time. We implemented an application that calls only the tested function and implanted sets of 1, 10, and 100 policies using XiOS. We measured the execution time with and without policy enforcement, running each function 10,000 times. The selected policies only perform a sanity check (i.e., verify the functionâ€™s name and print its arguments) and do not prohibit function execution.

The results are presented in Table 1. The overhead for running Objective-C functions 10,000 times is, at most, 0.33 seconds, while the overhead for native-C functions is 0.14 seconds in the case of 100 policies. Negative numbers for `mmap` and `NSUserName` indicate that the hardened application was faster than the vanilla version, likely due to the operating system scheduler's behavior.

During our tests, we found that normal use (clicks, accessing resources) involves no more than 1,000 function calls per second. If an app were to use only the functions listed in Table 1, the overhead would be at most 0.033 seconds, less than 5%.

We also applied our enforcements to a popular iOS benchmark tool called Gensystek [1]. Figure 5 shows the results for eight different benchmarks with varying numbers of threads (1, 2, and 4) and policy checks (1, 10, and 100). The computation of an MD5 hash displayed the most noticeable slowdown of 3.9x. However, heavy CPU computations such as Floating Point Unit/Arithmetic Logical Unit (FPU/ALU) showed an overhead of only 1.5% with 100 policy checks. The overhead for taking and saving a screenshot to disk was 4.3%. XiOS induces less overhead than previous work, such as MoCFI, which adds up to 500% overhead for PI calculation [15].

In terms of memory, our experiments show that no additional space is required for storing the reference monitor inside the executable. The reference monitor requires only 1KB and can be stored in unused space of the binary, such as the `__TEXT` segment. The shadow table requires 4KB and is allocated dynamically when the application is executed. Less than 1KB was required for one policy, but complex policies may require more space, necessitating the addition of new code sections and memory pages.

#### 6.3 Study of Real-World Apps

To demonstrate the effectiveness of our approach, we tested XiOS on several real-world applications, including Facebook, Twitter, Gmail, and YouTube. In our experiences with the hardened applications, we encountered no significant overhead. We also used our hardening service to apply policies to applications such as System Monitor, Frotz, WhatsApp, MusicNotes, and Gensystek. For testing, we sequentially used 1, 10, and 100 policies and measured the number of external function calls with and without XiOS in a 30-second timeframe. Policies were configured to allow all external calls.

To access the application's binary (as iOS stores them encrypted), we used a well-established tool, Clutch [14]. We compared "vanilla" application runs against hardened application runs. The results, shown in Table 2, indicate the percentage of loss in the number of external calls. Remarkably, XiOS does not reduce the number of external calls made within a given timeframe. A noticeable overhead of 21% was observed only when XiOS was configured with 100 policies for each external function call, representing a worst-case scenario. The MusicNotes application, which allows users to play different sounds via a screen-keyboard, did not exhibit any noticeable delay during our tests.

#### 6.4 Access Control on Public Applications

XiOS enables enterprises to create and apply their own policies on any application available on the App Store. To demonstrate this, we chose the widely used instant messaging app, WhatsApp [3]. One feature of WhatsApp is that it uses the phone number for user identification and copies the full address book to the developer servers upon installation. XiOS allows filtering of contacts to prevent WhatsApp from retrieving all user contacts.

To create these filtering policies, we first identified the relevant functions using a script provided by XiOS. Specifically, WhatsApp uses `ABAddressBookGetPersonWithRecordID` within the AddressBook framework to extract contacts. The developer can then check the function's signature and implement the necessary policies to filter the contacts.