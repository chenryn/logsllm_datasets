## PostgreSQL 数组里面的元素，模糊搜索，模糊查询，like，前后百分号，正则查询，倒排索引   
### 作者                                                                                                  
digoal                                                                                                  
### 日期                                                                                                  
2019-03-20                                                                                                  
### 标签                                                                                                  
PostgreSQL , 数组 , 元素模糊匹配 , 倒排索引 , gin                                                   
----                                                                                            
## 背景    
PostgreSQL通过倒排索引，支持模糊查询。  
[《PostgreSQL 模糊查询最佳实践 - (含单字、双字、多字模糊查询方法)》](../201704/20170426_01.md)    
如果你使用了数组类型，那么在数组里面的元素如何实现模糊查询呢？  
同样可以使用PG的GIN倒排索引。  
## 例子  
1、新建一个数据库，为了支持中文模糊查询，请务必不要使用lc_ctype='C'的数据库，这个无法改，不能支持中文模糊查询。  
```  
db4=# create database newdb1 with template template0 encoding 'UTF8' lc_collate 'C' lc_ctype 'en_US.utf8';  
CREATE DATABASE  
```  
2、创建pg_trgm插件，支持模糊查询。  
```  
db4=# \c newdb1  
You are now connected to database "newdb1" as user "postgres".  
newdb1=# create extension pg_trgm;  
CREATE EXTENSION  
```  
3、新建测试表，文本数组  
```  
newdb1=# create table t (i text[]);  
CREATE TABLE  
```  
4、新建immutable函数，将数组转换为文本类型（因为表达式索引的表达式、函数、操作符等都必须是immutable的）  
```  
newdb1=# create or replace function imm_array_to_string (anyarray,text) returns text as $$  
  select array_to_string($1,$2);  
$$ language sql strict immutable;  
CREATE FUNCTION  
```  
5、创建索引  
```  
newdb1=# create index idx_t_1 on t using gin ( imm_array_to_string(i,',')  gin_trgm_ops);  
CREATE INDEX  
```  
6、模糊查询语法测试，已支持索引检索。  
```  
newdb1=# explain select * from t where imm_array_to_string(i,',') like '你好PostgreSQL%';  
                                     QUERY PLAN                                       
------------------------------------------------------------------------------------  
 Bitmap Heap Scan on t  (cost=14.35..22.33 rows=7 width=32)  
   Recheck Cond: (imm_array_to_string(i, ','::text) ~~ '你好PostgreSQL%'::text)  
   ->  Bitmap Index Scan on idx_t_1  (cost=0.00..14.35 rows=7 width=0)  
         Index Cond: (imm_array_to_string(i, ','::text) ~~ '你好PostgreSQL%'::text)  
(4 rows)  
newdb1=# explain select * from t where imm_array_to_string(i,',') like '你好PostgreSQL%';  
                                     QUERY PLAN                                       
------------------------------------------------------------------------------------  
 Bitmap Heap Scan on t  (cost=668.78..1051.63 rows=282 width=312)  
   Recheck Cond: (imm_array_to_string(i, ','::text) ~~ '你好PostgreSQL%'::text)  
   ->  Bitmap Index Scan on idx_t_1  (cost=0.00..668.71 rows=282 width=0)  
         Index Cond: (imm_array_to_string(i, ','::text) ~~ '你好PostgreSQL%'::text)  
(4 rows)  
Time: 0.462 ms  
newdb1=# explain select * from t where imm_array_to_string(i,',') like '%你好PostgreSQL%';  
                                     QUERY PLAN                                        
-------------------------------------------------------------------------------------  
 Bitmap Heap Scan on t  (cost=557.68..940.53 rows=282 width=312)  
   Recheck Cond: (imm_array_to_string(i, ','::text) ~~ '%你好PostgreSQL%'::text)  
   ->  Bitmap Index Scan on idx_t_1  (cost=0.00..557.61 rows=282 width=0)  
         Index Cond: (imm_array_to_string(i, ','::text) ~~ '%你好PostgreSQL%'::text)  
(4 rows)  
Time: 0.484 ms  
newdb1=# explain select * from t where imm_array_to_string(i,',') like '%你好PostgreSQL';  
                                     QUERY PLAN                                       
------------------------------------------------------------------------------------  
 Bitmap Heap Scan on t  (cost=612.68..995.53 rows=282 width=312)  
   Recheck Cond: (imm_array_to_string(i, ','::text) ~~ '%你好PostgreSQL'::text)  
   ->  Bitmap Index Scan on idx_t_1  (cost=0.00..612.61 rows=282 width=0)  
         Index Cond: (imm_array_to_string(i, ','::text) ~~ '%你好PostgreSQL'::text)  
(4 rows)  
Time: 0.473 ms  
newdb1=# explain select * from t where imm_array_to_string(i,',') ilike '%你好PostgreSQL';  
                                     QUERY PLAN                                        
-------------------------------------------------------------------------------------  
 Bitmap Heap Scan on t  (cost=612.68..995.53 rows=282 width=312)  
   Recheck Cond: (imm_array_to_string(i, ','::text) ~~* '%你好PostgreSQL'::text)  
   ->  Bitmap Index Scan on idx_t_1  (cost=0.00..612.61 rows=282 width=0)  
         Index Cond: (imm_array_to_string(i, ','::text) ~~* '%你好PostgreSQL'::text)  
(4 rows)  
Time: 0.918 ms  
newdb1=# explain select * from t where imm_array_to_string(i,',') ilike '你好PostgreSQL';  
                                     QUERY PLAN                                       
------------------------------------------------------------------------------------  
 Bitmap Heap Scan on t  (cost=723.78..1106.63 rows=282 width=312)  
   Recheck Cond: (imm_array_to_string(i, ','::text) ~~* '你好PostgreSQL'::text)  
   ->  Bitmap Index Scan on idx_t_1  (cost=0.00..723.71 rows=282 width=0)  
         Index Cond: (imm_array_to_string(i, ','::text) ~~* '你好PostgreSQL'::text)  
(4 rows)  
Time: 0.816 ms  
newdb1=# explain select * from t where imm_array_to_string(i,',') ilike '你好%PostgreSQL';  
                                     QUERY PLAN                                        
-------------------------------------------------------------------------------------  
 Bitmap Heap Scan on t  (cost=612.68..995.53 rows=282 width=312)  
   Recheck Cond: (imm_array_to_string(i, ','::text) ~~* '你好%PostgreSQL'::text)  
   ->  Bitmap Index Scan on idx_t_1  (cost=0.00..612.61 rows=282 width=0)  
         Index Cond: (imm_array_to_string(i, ','::text) ~~* '你好%PostgreSQL'::text)  
(4 rows)  
Time: 0.796 ms  
```  
### 包含任意元素：元素以xx开头  
```  
select * from t where imm_array_to_string(i,',') ~ '[,|^]d0dc1' limit 5;  
不区分大小写  
select * from t where imm_array_to_string(i,',') ~* '[,|^]d0dc1' limit 5;  
```  
### 包含任意元素：元素以xx结尾  
```  
select * from t where imm_array_to_string(i,',') ~ '19d0b[,|$]' limit 5;  
不区分大小写  
select * from t where imm_array_to_string(i,',') ~* '19d0b[,|$]' limit 5;  
```  
### 包含任意元素：元素内包含xx  
```  
select * from t where imm_array_to_string(i,',') ~ 'abce' limit 5;  
不区分大小写  
select * from t where imm_array_to_string(i,',') ~ 'abce' limit 5;  
```  
## 性能测试  
1、创建函数，生成随机字符串数组  
```  
create or replace function gen_rand_arr(int) returns text[] as $$  
  select array(select md5(random()::text) from generate_series(1,$1));  
$$ language sql strict;  
```  
```  
newdb1=# select gen_rand_arr(5);  
-[ RECORD 1 ]+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------  
gen_rand_arr | {9d193327808319b0d66c12e29eaa33f6,5d761dad5b6e886eb87480d86d8640fb,07856d9f11b156bde20b527192c00361,35895b270c7665afd34d62f58220a83a,309b4d117f07974cb938bab890a7f327}  
```  
2、写入大量数据  
```  
vi test.sql  
insert into t select gen_rand_arr(8) from generate_series(1,100);  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 8 -j 8 -T 120 newdb1  
```  
3、记录数  
```  
newdb1=# select count(*) from t;  
  count    
---------  
 2816900  
(1 row)  
```  
4、收集统计信息，将索引的pending list合并。  
```  
newdb1=# vacuum (analyze,verbose) t;  
```  