    cd /Users/rai4over/Desktop/weblogic/weblogic_jars/Oracle/Middleware
    mkdir test
    find ./ -name "*.jar" -exec cp {} ./test/ \;
    find ./ -name "*.war" -exec cp {} ./test/ \;
`/Users/rai4over/Desktop/weblogic/weblogic_jars/Oracle/Middleware/wlserver_10.3`作为IDEA项目打开，设置JDK为拷贝出来的，然后添加包含`test`目录到项目的`Libraries`。
设置`DEBUG`模式为`Remote`，端口为与`docker`映射出去相同的`8453`
运行`DEBUG`，没有问题则调试端口连接成功，控制台应该输出：
    Connected to the target VM, address: 'localhost:8453', transport: 'socket'
在`Servlet`中设置好断点，发送`Payload`，应该能成功断下。
weblogic.wsee.jaxws.WLSServletAdapter#handle
# CVE-2017-10271
## 简介
Weblogic的WLS
Security组件中的`servlet`存在`XMLEncoder`反序列化漏洞，精心构造恶意`Soap`请求，完成任意代码执行。
受影响版本：
  * WebLogic 10.3.6.0.0
  * WebLogic 12.1.3.0.0
  * WebLogic 12.2.1.1.0
  * WebLogic 12.2.1.2.0
CVE-2017-3506和CVE-2017-10271均是`XMLDecoder`反序列化漏洞，CVE-2017-3506修补方案为禁用`object`标签。
CVE-2017-10271是通过`void`、`new`标签对CVE-2017-3506补丁的绕过。
## 分析
Oracle/Middleware/test/wls-wsat.war!/WEB-INF/web.xml
查看`web.xml`，可以发现存在漏洞的`wls-wsat`组件中包含不同的路由，均能触发漏洞。
weblogic.wsee.jaxws.workcontext.WorkContextServerTube#processRequest
从此出开始分析，var1为POST的恶意数据，var2为数据中的headers，从var2
获取`WorkAreaConstants.WORK_AREA_HEADER`后赋值给var3且不为null，跳入if分支将var3传入`readHeaderOld`函数。
weblogic.wsee.jaxws.workcontext.WorkContextTube#readHeaderOld
通过`XMLStreamWriterFactory.create`函数获取恶意的`Payload`到`var4`中，`var4`的字节数组输入流传入`WorkContextXmlInputAdapter`的构造函数。
weblogic.wsee.workarea.WorkContextXmlInputAdapter#WorkContextXmlInputAdapter(java.io.InputStream)
包含恶意`XML`的输入流作为参数传入`XMLDecoder`的构造函数，将`XMLDecoder`对象存储在`WorkContextXmlInputAdapter`对象的`xmlDecoder`成员中。返回一个`WorkContextXmlInputAdapter`实例对象到上层的`var6`，`var6`作为参数传入`receive`函数。
weblogic.wsee.jaxws.workcontext.WorkContextServerTube#receive
`WorkContextXmlInputAdapter`对象又被传入了`WorkContextMapImpl`类的`receiveRequest`方法。
weblogic.workarea.WorkContextMapImpl#receiveRequest
`WorkContextXmlInputAdapter`对象作为参数再次被传递到`WorkContextLocalMap`类的`receiveRequest`方法。
weblogic.workarea.WorkContextLocalMap#receiveRequest
`WorkContextXmlInputAdapter`对象被再次传入`WorkContextEntryImpl.readEntry`。
weblogic.workarea.spi.WorkContextEntryImpl#readEntry
`WorkContextXmlInputAdapter`对象的`readUTF`函数被调用。
weblogic.wsee.workarea.WorkContextXmlInputAdapter#readUTF
存储的`this.xmlDecoder`进行反序列化，完成代码执行，此时的调用栈为：
    readObject:203, XMLDecoder (java.beans)
    readUTF:111, WorkContextXmlInputAdapter (weblogic.wsee.workarea)
    readEntry:92, WorkContextEntryImpl (weblogic.workarea.spi)
    receiveRequest:179, WorkContextLocalMap (weblogic.workarea)
    receiveRequest:163, WorkContextMapImpl (weblogic.workarea)
    receive:71, WorkContextServerTube (weblogic.wsee.jaxws.workcontext)
    readHeaderOld:107, WorkContextTube (weblogic.wsee.jaxws.workcontext)
    processRequest:43, WorkContextServerTube (weblogic.wsee.jaxws.workcontext)
    __doRun:866, Fiber (com.sun.xml.ws.api.pipe)
    _doRun:815, Fiber (com.sun.xml.ws.api.pipe)
    doRun:778, Fiber (com.sun.xml.ws.api.pipe)
    runSync:680, Fiber (com.sun.xml.ws.api.pipe)
    process:403, WSEndpointImpl$2 (com.sun.xml.ws.server)
    handle:539, HttpAdapter$HttpToolkit (com.sun.xml.ws.transport.http)
    handle:253, HttpAdapter (com.sun.xml.ws.transport.http)
    handle:140, ServletAdapter (com.sun.xml.ws.transport.http.servlet)
    handle:171, WLSServletAdapter (weblogic.wsee.jaxws)
    run:708, HttpServletAdapter$AuthorizedInvoke (weblogic.wsee.jaxws)
    doAs:363, AuthenticatedSubject (weblogic.security.acl.internal)
    runAs:146, SecurityManager (weblogic.security.service)
    authenticatedInvoke:103, ServerSecurityHelper (weblogic.wsee.util)
    run:311, HttpServletAdapter$3 (weblogic.wsee.jaxws)
    post:336, HttpServletAdapter (weblogic.wsee.jaxws)
    doRequest:99, JAXWSServlet (weblogic.wsee.jaxws)
    service:99, AbstractAsyncServlet (weblogic.servlet.http)
    service:820, HttpServlet (javax.servlet.http)
    run:227, StubSecurityHelper$ServletServiceAction (weblogic.servlet.internal)
    invokeServlet:125, StubSecurityHelper (weblogic.servlet.internal)
    execute:301, ServletStubImpl (weblogic.servlet.internal)
    execute:184, ServletStubImpl (weblogic.servlet.internal)
    wrapRun:3732, WebAppServletContext$ServletInvocationAction (weblogic.servlet.internal)
    run:3696, WebAppServletContext$ServletInvocationAction (weblogic.servlet.internal)
    doAs:321, AuthenticatedSubject (weblogic.security.acl.internal)
    runAs:120, SecurityManager (weblogic.security.service)
    securedExecute:2273, WebAppServletContext (weblogic.servlet.internal)
    execute:2179, WebAppServletContext (weblogic.servlet.internal)
    run:1490, ServletRequestImpl (weblogic.servlet.internal)
    execute:256, ExecuteThread (weblogic.work)
    run:221, ExecuteThread (weblogic.work)
## 补丁
CVE-2017-10271的修复补丁为：
    private void validate(InputStream is) {
       WebLogicSAXParserFactory factory = new WebLogicSAXParserFactory();
       try {
          SAXParser parser = factory.newSAXParser();
          parser.parse(is, new DefaultHandler() {
             private int overallarraylength = 0;
             public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
                if(qName.equalsIgnoreCase("object")) {
                   throw new IllegalStateException("Invalid element qName:object");
                } else if(qName.equalsIgnoreCase("new")) {
                   throw new IllegalStateException("Invalid element qName:new");
                } else if(qName.equalsIgnoreCase("method")) {
                   throw new IllegalStateException("Invalid element qName:method");
                } else {
                   if(qName.equalsIgnoreCase("void")) {
                      for(int attClass = 0; attClass 
            xx
            xx
                                /bin/bash
                                -c
                                touch /tmp/rai4over
## 补丁绕过
对于打了补丁的Weblogic，不能够调用函数，但可以利用危险构造函数。
oracle.toplink.internal.sessions.UnitOfWorkChangeSet#UnitOfWorkChangeSet(byte[])
10.3.6版本可用，进行第二次反序列化，几个较好的利用方式：
  * 利用ysoserial-jdk7u21-RCE
  * 利用FileSystemXmlApplicationContext-RCE
  * 利用JtaTransactionManager链进行JNDI注入
org.springframework.transaction.jta.JtaTransactionManager#readObject
跟进initUserTransactionAndTransactionManager
org.springframework.transaction.jta.JtaTransactionManager#initUserTransactionAndTransactionManager
跟进lookupUserTransaction函数
org.springframework.transaction.jta.JtaTransactionManager#lookupUserTransaction
进行JNDI注入
# 参考