CHAPTER 2
Secure API development
The single quote you included in your input has ended up causing a syntax error in
the SQL expression. What the database sees is the string 'test', followed by some
extra characters (“space”) and then another single quote. Because this is not valid
SQL syntax, it complains and aborts the transaction. But what if your input ends up
being valid SQL? In that case the database will execute it without complaint. Let’s try
running the following command instead:
$ curl -i -d "{\"name\": \"test\",\"owner\": 
➥  \"'); DROP TABLE spaces; --\"}" http://localhost:4567/spaces
HTTP/1.1 201 Created
Date: Wed, 30 Jan 2019 16:51:06 GMT
Location: /spaces/9
Content-Type: application/json
Transfer-Encoding: chunked
Server: Jetty(9.4.8.v20171121)
{"name":"', ''); DROP TABLE spaces; --","uri":"/spaces/9"}
The operation completed successfully with no errors, but let’s see what happens when
you try to create another space:
$ curl -d '{"name": "test space", "owner": "demo"}' 
➥ http://localhost:4567/spaces
{"error":"internal server error"}
If you look in the logs again, you find the following:
org.h2.jdbc.JdbcSQLException: Table "SPACES" not found;
Oh dear. It seems that by passing in carefully crafted input your user has managed to
delete the spaces table entirely, and your whole social network with it! Figure 2.5
shows what the database saw when you executed the first curl command with the
funny owner name. Because the user input values are concatenated into the SQL as
strings, the database ends up seeing a single string that appears to contain two different
statements: the INSERT statement we intended, and a DROP TABLE statement that the
INSERT INTO spaces(space_id, name, owner) VALUES(
, ‘
‘, ‘
‘);
12
test
‘); DROP TABLE spaces; --
spaceId
name
owner
INSERT INTO spaces(space_id, name, owner) VALUES(12, ‘test’, ‘’); DROP TABLE spaces; -- ‘);
Becomes
Figure 2.5
A SQL injection attack occurs when user input is mixed into a SQL statement without 
the database being able to tell them apart. To the database, this SQL command with a funny 
owner name ends up looking like two separate statements followed by a comment.
43
Injection attacks
attacker has managed to inject. The first character of the owner name is a single quote
character, which closes the open quote inserted by our code. The next two characters
are a close parenthesis and a semicolon, which together ensure that the INSERT state-
ment is properly terminated. The DROP TABLE statement is then inserted (injected)
after the INSERT statement. Finally, the attacker adds another semicolon and two
hyphen characters, which starts a comment in SQL. This ensures that the final close
quote and parenthesis inserted by the code are ignored by the database and do not
cause a syntax error.
 When these elements are put together, the result is that the database sees two valid
SQL statements: one that inserts a dummy row into the spaces table, and then another
that destroys that table completely. Figure 2.6 is a famous cartoon from the XKCD web
comic that illustrates the real-world problems that SQL injection can cause.
2.4.1
Preventing injection attacks
There are a few techniques that you can use to prevent injection attacks. You could try
escaping any special characters in the input to prevent them having an effect. In this
case, for example, perhaps you could escape or remove the single-quote characters.
This approach is often ineffective because different databases treat different charac-
ters specially and use different approaches to escape them. Even worse, the set of spe-
cial characters can change from release to release, so what is safe at one point in time
might not be so safe after an upgrade.
 A better approach is to strictly validate all inputs to ensure that they only contain
characters that you know to be safe. This is a good idea, but it’s not always possible to
eliminate all invalid characters. For example, when inserting names, you can’t avoid
single quotes, otherwise you might forbid genuine names such as Mary O’Neill.
 The best approach is to ensure that user input is always clearly separated from
dynamic code by using APIs that support prepared statements. A prepared statement
allows you to write the command or query that you want to execute with placeholders
Figure 2.6
The consequences of failing to handle SQL injection attacks. (Credit: XKCD, “Exploits of a Mom,” 
https://www.xkcd.com/327/.)
44
CHAPTER 2
Secure API development
in it for user input, as shown in figure 2.7. You then separately pass the user input val-
ues and the database API ensures they are never treated as statements to be executed.
DEFINITION
A prepared statement is a SQL statement with all user input replaced
with placeholders. When the statement is executed the input values are sup-
plied separately, ensuring the database can never be tricked into executing
user input as code.
Listing 2.6 shows the createSpace code updated to use a prepared statement. Dales-
bred has built-in support for prepared statements by simply writing the statement with
placeholder values and then including the user input as extra arguments to the update-
Unique method call. Open the SpaceController.java file in your text editor and find
the createSpace method. Update the code to match the code in listing 2.6, using a
prepared statement rather than manually concatenating strings together. Save the file
once you are happy with the new code.
public JSONObject createSpace(Request request, Response response)
      throws SQLException {
    var json = new JSONObject(request.body());
    var spaceName = json.getString("name");
    var owner = json.getString("owner");
    return database.withTransaction(tx -> {
      var spaceId = database.findUniqueLong(
          "SELECT NEXT VALUE FOR space_id_seq;");
Listing 2.6
Using prepared statements
INSERT INTO spaces(space_id, name, owner) VALUES(?, ?, ?);
test
12
‘); DROP TABLE spaces; --
Prepared statement
with placeholder values
Actual parameter values
are always kept separate
1
2
3
Placeholders
Figure 2.7
A prepared statement ensures that user input values are 
always kept separate from the SQL statement itself. The SQL statement 
only contains placeholders (represented as question marks) and is parsed 
and compiled in this form. The actual parameter values are passed to the 
database separately, so it can never be confused into treating user input 
as SQL code to be executed.
45
Injection attacks
      database.updateUnique(
          "INSERT INTO spaces(space_id, name, owner) " +        
              "VALUES(?, ?, ?);", spaceId, spaceName, owner);   
      response.status(201);
      response.header("Location", "/spaces/" + spaceId);
      return new JSONObject()
          .put("name", spaceName)
          .put("uri", "/spaces/" + spaceId);
    });
Now when your statement is executed, the database will be sent the user input sepa-
rately from the query, making it impossible for user input to influence the commands
that get executed. Let’s see what happens when you run your malicious API call. This
time the space gets created correctly—albeit with a funny name!
$ curl -i -d "{\"name\": \"', ''); DROP TABLE spaces; --\", 
➥ \"owner\": \"\"}" http://localhost:4567/spaces
HTTP/1.1 201 Created
Date: Wed, 30 Jan 2019 16:51:06 GMT
Location: /spaces/10
Content-Type: application/json
Transfer-Encoding: chunked
Server: Jetty(9.4.8.v20171121)
{"name":"', ''); DROP TABLE spaces; --","uri":"/spaces/10"}
Prepared statements in SQL eliminate the possibility of SQL injection attacks if used
consistently. They also can have a performance advantage because the database can
compile the query or statement once and then reuse the compiled code for many dif-
ferent inputs; there is no excuse not to use them. If you’re using an object-relational
mapper (ORM) or other abstraction layer over raw SQL commands, check the docu-
mentation to make sure that it’s using prepared statements under the hood. If you’re
using a non-SQL database, check to see whether the database API supports parameter-
ized calls that you can use to avoid building commands through string concatenation.
2.4.2
Mitigating SQL injection with permissions
While prepared statements should be your number one defense against SQL injection
attacks, another aspect of the attack worth mentioning is that the database user didn’t
need to have permissions to delete tables in the first place. This is not an operation
that you would ever require your API to be able to perform, so we should not have
granted it the ability to do so in the first place. In the H2 database you are using, and
in most databases, the user that creates a database schema inherits full permissions to
alter the tables and other objects in that database. The principle of least authority says
that you should only grant users and processes the fewest permissions that they need
to get their job done and no more. Your API does not ever need to drop database
tables, so you should not grant it the ability to do so. Changing the permissions will
Use placeholders 
in the SQL 
statement and 
pass the values as 
additional 
arguments.
46
CHAPTER 2
Secure API development
not prevent SQL injection attacks, but it means that if an SQL injection attack is ever
found, then the consequences will be contained to only those actions you have explic-
itly allowed.
PRINCIPLE
The principle of least authority (POLA), also known as the principle of
least privilege, says that all users and processes in a system should be given only
those permissions that they need to do their job—no more, and no less.
To reduce the permissions that your API runs with, you could try and remove permis-
sions that you do not need (using the SQL REVOKE command). This runs the risk that
you might accidentally forget to revoke some powerful permissions. A safer alternative
is to create a new user and only grant it exactly the permissions that it needs. To do
this, we can use the SQL standard CREATE USER and GRANT commands, as shown in list-
ing 2.7. Open the schema.sql file that you created earlier in your text editor and add
the commands shown in the listing to the bottom of the file. The listing first creates a
new database user and then grants it just the ability to perform SELECT and INSERT
statements on our two database tables.
CREATE USER natter_api_user PASSWORD 'password';     
GRANT SELECT, INSERT ON spaces, messages TO natter_api_user;   
We then need to update our Main class to switch to using this restricted user after the
database schema has been loaded. Note that we cannot do this before the database
schema is loaded, otherwise we would not have enough permissions to create the data-
base! We can do this by simply reloading the JDBC DataSource object after we have
created the schema, switching to the new user in the process. Locate and open the
Main.java file in your editor again and navigate to the start of the main method where
you initialize the database. Change the few lines that create and initialize the database
to the following lines instead:
var datasource = JdbcConnectionPool.create(          
    "jdbc:h2:mem:natter", "natter", "password");     
var database = Database.forDataSource(datasource);   
createTables(database);                              
datasource = JdbcConnectionPool.create(                      
    "jdbc:h2:mem:natter", "natter_api_user", "password");    
  database = Database.forDataSource(datasource);             
Here you create and initialize the database using the “natter” user as before, but you
then recreate the JDBC connection pool DataSource passing in the username and
password of your newly created user. In a real project, you should be using more
secure passwords than password, and you’ll see how to inject more secure connection
passwords in chapter 10.
Listing 2.7
Creating a restricted database user
Create the new 
database user.
Grant just the
permissions it needs.
Initialize the 
database schema as 
the privileged user.
Switch to the natter_ 
api_user and recreate 
the database objects.
47
Input validation
 If you want to see the difference this makes, you can temporarily revert the
changes you made previously to use prepared statements. If you then try to carry out
the SQL injection attack as before, you will see a 500 error. But this time when you
check the logs, you will see that the attack was not successful because the DROP TABLE
command was denied due to insufficient permissions:
Caused by: org.h2.jdbc.JdbcSQLException: Not enough rights for object 
"PUBLIC.SPACES"; SQL statement:
 DROP TABLE spaces; --'); [90096-197]
2.5
Input validation
Security flaws often occur when an attacker can submit inputs that violate your
assumptions about how the code should operate. For example, you might assume that
an input can never be more than a certain size. If you’re using a language like C or
Pop quiz
1
Which one of the following is not in the 2017 OWASP Top 10?
a
Injection
b
Broken Access Control
c
Security Misconfiguration
d
Cross-Site Scripting (XSS)
e
Cross-Site Request Forgery (CSRF)
f
Using Components with Known Vulnerabilities
2
Given the following insecure SQL query string:
  String query = 
    "SELECT msg_text FROM messages WHERE author = '" 
    + author + "'"
and the following author input value supplied by an attacker:
  john' UNION SELECT password FROM users; --
what will be the output of running the query (assuming that the users table exists
with a password column)?
a
Nothing
b
A syntax error
c
John’s password
d
The passwords of all users
e
An integrity constraint error
f
The messages written by John
g
Any messages written by John and the passwords of all users
The answers are at the end of the chapter.
48
CHAPTER 2
Secure API development
C++ that lacks memory safety, then failing to check this assumption can lead to a seri-
ous class of attacks known as buffer overflow attacks. Even in a memory-safe language,
failing to check that the inputs to an API match the developer’s assumptions can
result in unwanted behavior.
DEFINITION
A buffer overflow or buffer overrun occurs when an attacker can sup-
ply input that exceeds the size of the memory region allocated to hold that
input. If the program, or the language runtime, fails to check this case then
the attacker may be able to overwrite adjacent memory.
A buffer overflow might seem harmless enough; it just corrupts some memory, so
maybe we get an invalid value in a variable, right? However, the memory that is over-
written may not always be simple data and, in some cases, that memory may be inter-
preted as code, resulting in a remote code execution vulnerability. Such vulnerabilities are
extremely serious, as the attacker can usually then run code in your process with the
full permissions of your legitimate code.
DEFINITION
Remote code execution (RCE) occurs when an attacker can inject
code into a remotely running API and cause it to execute. This can allow the
attacker to perform actions that would not normally be allowed.
In the Natter API code, the input to the API call is presented as structured JSON. As
Java is a memory-safe language, you don’t need to worry too much about buffer over-
flow attacks. You’re also using a well-tested and mature JSON library to parse the
input, which eliminates a lot of problems that can occur. You should always use well-
established formats and libraries for processing all input to your API where possible.
JSON is much better than the complex XML formats it replaced, but there are still
often significant differences in how different libraries parse the same JSON.
LEARN MORE
Input parsing is a very common source of security vulnerabilities,
and many widely used input formats are poorly specified, resulting in differ-
ences in how they are parsed by different libraries. The LANGSEC movement
(http://langsec.org) argues for the use of simple and unambiguous input for-
mats and automatically generated parsers to avoid these issues.
Insecure deserialization
Although Java is a memory-safe language and so less prone to buffer overflow
attacks, that does not mean it is immune from RCE attacks. Some serialization librar-
ies that convert arbitrary Java objects to and from string or binary formats have turned
out to be vulnerable to RCE attacks, known as an insecure deserialization vulnerability
in the OWASP Top 10. This affects Java’s built-in Serializable framework, but also
parsers for supposedly safe formats like JSON have been vulnerable, such as the
popular Jackson Databind.a The problem occurs because Java will execute code
within the default constructor of any object being deserialized by these frameworks.
49
Input validation
Although the API is using a safe JSON parser, it’s still trusting the input in other
regards. For example, it doesn’t check whether the supplied username is less than the
30-character maximum configured in the database schema. What happens you pass in
a longer username?
$ curl -d '{"name":"test", "owner":"a really long username
➥ that is more than 30 characters long"}'  
➥ http://localhost:4567/spaces -i
HTTP/1.1 500 Server Error
Date: Fri, 01 Feb 2019 13:28:22 GMT
Content-Type: application/json
Transfer-Encoding: chunked
Server: Jetty(9.4.8.v20171121)
{"error":"internal server error"}
If you look in the server logs, you see that the database constraint caught the problem:
Value too long for column "OWNER VARCHAR(30) NOT NULL"
But you shouldn’t rely on the database to catch all errors. A database is a valuable asset
that your API should be protecting from invalid requests. Sending requests to the
database that contain basic errors just ties up resources that you would rather use pro-
cessing genuine requests. Furthermore, there may be additional constraints that are
harder to express in a database schema. For example, you might require that the user
exists in the corporate LDAP directory. In listing 2.8, you’ll add some basic input vali-
dation to ensure that usernames are at most 30 characters long, and space names up
Some classes included with popular Java libraries perform dangerous operations in
their constructors, including reading and writing files and performing other actions.
Some classes can even be used to load and execute attacker-supplied bytecode
directly. Attackers can exploit this behavior by sending a carefully crafted message
that causes the vulnerable class to be loaded and executed.
The solution to these problems is to allowlist a known set of safe classes and refuse
to deserialize any other class. Avoid frameworks that do not allow you to control which
classes are deserialized. Consult the OWASP Deserialization Cheat Sheet for advice
on avoid insecure deserialization vulnerabilities in several programming languages:
https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html.
You should take extra care when using a complex input format such as XML, because
there are several specific attacks against such formats. OWASP maintains cheat
sheets for secure processing of XML and other attacks, which you can find linked
from the deserialization cheat sheet.
a
See https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/ for a
description of the vulnerability. The vulnerability relies on a feature of Jackson that is dis-
abled by default.
50
CHAPTER 2
Secure API development
to 255 characters. You’ll also ensure that usernames contain only alphanumeric char-
acters, using a regular expression. 
PRINCIPLE
Always define acceptable inputs rather than unacceptable ones when val-
idating untrusted input. An allow list describes exactly which inputs are con-
sidered valid and rejects anything else.1 A blocklist (or deny list), on the other
hand, tries to describe which inputs are invalid and accepts anything else.
Blocklists can lead to security flaws if you fail to anticipate every possible mali-
cious input. Where the range of inputs may be large and complex, such as
Unicode text, consider listing general classes of acceptable inputs like “deci-
mal digit” rather than individual input values.
Open the SpaceController.java file in your editor and find the createSpace method
again. After each variable is extracted from the input JSON, you will add some basic
validation. First, you’ll ensure that the spaceName is shorter than 255 characters, and
then you’ll validate the owner username matches the following regular expression:
[a-zA-Z][a-zA-Z0-9]{1,29}
That is, an uppercase or lowercase letter followed by between 1 and 29 letters or dig-
its. This is a safe basic alphabet for usernames, but you may need to be more flexible if