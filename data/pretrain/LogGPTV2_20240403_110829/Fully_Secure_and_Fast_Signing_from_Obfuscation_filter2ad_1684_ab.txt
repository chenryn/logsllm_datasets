corresponding to that message.
Setup The challenger runs the algorithm Setup(1λ) to obtain (VK, SK). The challenger sends VK to the
adversary.
Queries Proceeding adaptively, the adversary requests a signature on any message M ∈ M and the chal-
lenger responds with σ ← Sign(SK, M). Let Q be the set of messages queried by the adversary.
Output Eventually the adversary outputs a pair (M∗, σ∗) and is said to win the game if M (cid:54)∈ Q and
Verify(VK, M∗, σ∗) = 1.
We deﬁne Adveuf-cma
to be the probability that adversary A wins in the above game.
A,Π
Deﬁnition 1. A signature scheme (Setup, Sign, Verify) is existentially unforgeable with respect to adaptive
chosen message attacks if for all PPT algorithms A
Adveuf-cma
A,Π ≤ negl(λ)
3 Obfuscation Preliminaries
Deﬁnition 2 (Indistinguishability Obfuscation). A uniform PPT machine iO is called an indistinguishability
obfuscator for a circuit class {Cλ}λ∈N if it satisﬁes the following conditions:
4
• Functionality preserving For all security parameters λ ∈ N, for all C ∈ Cλ, for all inputs x, we
• Indistinguishability of obfuscation For any not necessarily uniform PPT distinguisher (Samp, D),
if for all security parameters
have that C(cid:48)(x) = C(x) where C(cid:48) ← iO(λ, C).
there exists a negligible function negl(·) such that the following holds:
λ ∈ N
Pr[∀x, C0(x) = C1(x) : (C0; C1; τ) ← Samp(1λ)] > 1 − negl(λ),
then
| Pr[D(τ, iO(λ, C0)) = 1 : (C0; C1; τ) ← Samp(1λ)]−
Pr[D(τ, iO(λ, C1)) = 1 : (C0; C1; τ) ← Samp(1λ)]| ≤ negl(λ).
3.1 Puncturable PRFs
A pseudorandom function (PRF) is a function F : K × M → Y such that the function F (K,·) is indistin-
guishable from random when K $← K.
A constrained PRF [BW13] is a PRFF (K,·) with the functionality to enable evaluation of the PRF
at certain portions of the input space and nowhere else. A puncturable PRF [BW13, SW14] is a type of
contrained PRF that enables evaluation at the complement of a single arbitrary polynomial-sized subset of
the input space. That is, PRF F (K,·) is equipped with additional PPT algorithms (EvalF , PunctureF ) such
that the following properties hold
• Functionality preserved under puncturing For every PPT algorithm A which on input 1λ outputs
a set S ⊆ {0, 1}n, for all x ∈ {0, 1}n\S, we have
Pr[EvalF (K{S}, x) = F (K, x) : K $← K, K{S} ← PunctureF (K, S)] = 1
• Pseudorandom at punctured points For every pair of PPT algorithms (A1,A2) and polynomial
m(λ) such that A1(1λ) outputs a set S ⊆ {0, 1}n of cardinality m(λ) and a state σ it holds that
| Pr[A2(σ, K{S}, F (K, S)) = 1 : (S, σ) ← A1(1λ), K{S} ← PunctureF (K, S)]−
Pr[A2(σ, K{S}, Y ) = 1 : (S, σ) ← A1(1λ), K{S} ← PunctureF (K, S), Y $← {0, 1}m·|S|]| ≤ negl(λ)
For notational convenience we will denote the output of PunctureF (K, S) by K{S}, with the former
occasionally suppressed.
4 Our Adaptively Secure Signature Scheme
In this section we describe our adaptively secure signature scheme. Our signature scheme consists of two
main pieces. Our ﬁrst piece is a one-time like signature scheme. We generate a tag t of λ bits. The security
property is that an adversary on seeing a signature for a message M that uses tag t, cannot construct a
signature on M∗ (cid:54)= M, that uses the same tag t. Our signature piece is s1 = ⊕l
i=1F1(K1, t(cid:107)i(cid:107)M(i)), where
F1(K1,·) is a puncturable PRF with appropriate input length. Our veriﬁcation key is an obfuscated circuit
that on input (M, (t, s1)) checks that s1 is of the correct form. To argue security, the simulator guesses the
position ˆi where M∗(ˆi) (cid:54)= M(ˆi) and the bit ˆb = M∗(ˆi). The simulator punctures K1 on τ = t(cid:107)ˆi(cid:107)ˆb, and
generates an equivalent one-time veriﬁcation circuit using the punctured key, making use of an (injective)
one-way function to hide the punctured value. Now suppose an adversary produces a valid forgery (t, s∗
1).
1 xor-ed with {F1(K1{τ}, t(cid:107)i(cid:107)M∗(i)) : i (cid:54)= ˆi}. This
Then the simulator can extract the punctured value as s∗
can be shown to break the security of the one-way function.
Our second piece is the ability to sign the tag t according to the [HW09] preﬁx-guessing technique.
j=1. The challenger sends
The security property is as follows. The attacker commits to a list of tags (tj)q
5
2 xor-ed with {F2,i(K2,i, t(i)) : i (cid:54)= i(cid:48)}, again breaking the one-way function.
veriﬁcation key VK, as well as signatures (σj)q
j=1 corresponding to the above tags. The attacker should not
be able to construct a signature on a tag t∗ not contained in the queried list. Let F2,i for i = 1, . . . , (cid:96) be
puncturable PRFs taking in inputs of i bits. The second signature piece is s2 = ⊕λ
i=1F2,i(K2,i, t(i)), where
the length-i preﬁx of t is denoted t(i). A veriﬁcation key is an obfuscated circuit that on input (t, s2), checks
that s2 is of the above form. To argue security, the simulator guesses the tag tj(cid:48) and position i(cid:48) such that t∗
and tj(cid:48) have common preﬁx of length i(cid:48)−1. The simulator punctures K2,i(cid:48) on diﬀering preﬁx p and generates
an equivalent verﬁcation circuit using the punctured key, the one way function is used to hide the punctured
value. Suppose the adversary now submits a valid forgery s∗
2. Then the simulator can extract the punctured
value as s∗
To combines these pieces, the signatures s1 and s2 are xor-ed together. A signature is simply (t, s). The
verﬁcation circuit on input (M, (t, s)) computes s1 and s2 as above and checks that s = s1 ⊕ s2. In the proof
of security, the simulator will deal with the case that a forgery tag t is repeated, or not, separately. In the
former case, the simulator will extract a punctured value as s∗ ⊕ s∗
2 ⊕i(cid:54)=ˆi F1(K1{τ}, t(cid:107)i(cid:107)M∗(i)), where s∗
2
is computed using non-punctured PRF key K2. In the case of the no repeat, the simulator will extract a
punctured value as s∗ ⊕ s∗
1 is computed using non-punctured PRF key K1. To
complete the proof of security, the simulator guesses ahead of time which case it will have to deal with it,
reducing its success probability by at most one half, hence remaining non-negligible. Our complete scheme
follows.
1 ⊕i(cid:54)=i(cid:48) F2,i(K2,i, t(i)), where s∗
4.1 The Scheme
The message space of the signature scheme is {0, 1}l. For l-bit message M, let M(i) denote the i-th bit of
M. For λ-bit string t, let t(i) denote the ﬁrst i bits of t. Let F1(K1,·) be a puncturable PRF mapping lt-bit
inputs to λ-bit outputs. Here lt = λ +(cid:100)lg l(cid:101) + 1. Let F2,i(K2,i,·) be a puncturable PRF mapping i-bit inputs
to λ-bit outputs, for each i ∈ [1, λ]. Let f be an injective one way function mapping λ-bit inputs to w-bit
outputs. Our signature scheme is as follows.
: i ∈ [1, λ]. The secret key is
i=1). Let the veriﬁcation key VK be an indistinguishability obfuscation of the program SigCheck
$← K1 and K2,i
$← K2,i
Setup(1λ) : Pick puncturable PRF keys K1
(K1, (K2,i)λ
deﬁned below.
Sign(SK, M) : Choose t $← {0, 1}λ. Let s1 = ⊕l
pute s = s1 ⊕ s2. Output σ = (t, s).
Verify(VK, M, σ) : Output VK(M, σ).
i=1F1(K1, t(cid:107)i(cid:107)M(i)). Let s2 = ⊕λ
i=1F2,i(K2,i, t(i)). Com-
SigCheck :
Inputs : M, σ
Constants : PRF keys K1 and (K2,i)λ
(t, s) ← σ
s1 ← ⊕l
s2 ← ⊕λ
if s = s1 ⊕ s2 then output 1 else output ⊥
i=1F1(K1, t(cid:107)i(cid:107)M(i))
i=1F2,i(K2,i, t(i))
i=1
Theorem 1. The above signature scheme is existentially unforgeable with respect to chosen message attacks
as speciﬁed in Deﬁnition 1, assuming the existence of secure indistinguishability obfuscators and secure
puncturable PRFs.
Proof. Suppose that A is a PPT adversary that outputs a valid forgery (M∗, σ∗) with non-negligible proba-
bility . We will construct an adversary B that inverts the one way function f with non-neligible probability.
We may split the forgery submitted by A into two cases. Let σ∗ = (t∗, s∗). The ﬁrst case is that t∗ = tj
for some signature σj returned by the challenger in response to the jth message query Mj ∈ Q. The other
6
case is that t∗ (cid:54)= tj for all signatures σj returned by the challenger on Mj ∈ Q, where j ranges from 1 to
n. We will call the ﬁrst case a type I forgery and the second case, where t∗ (cid:54)= tj for all tj, a type II forgery.
We prove that in both cases, there exists PPT B which uses A to invert f. In practice simulator B guesses
ahead of time which type of forgery A will make and errs with probability at most one half. In what follows
we will let |Q| = n. Also deﬁne ei = 0i−11.
Lemma 1. Suppose that adversary A in the adaptive security game makes a type I forgery with probability
I. Then we can construct B that inverts the one way function f with probability I /(2nl) − negl(λ).
Proof. To prove this lemma, we deﬁne the following sequence of hybrids.
Game 1 This is the original security game in which the attacker receives the veriﬁcation key, and then
queries for signatures on messages adaptively. Let Q be the set of queried messages. In the ﬁnal step an
attacker outputs (M∗, σ∗). Here σ∗ = (t∗, s∗) and t∗ = tj for some signature σj on Mj ∈ Q.
$← {0, 1}λ for all j ∈ [1, n].
1. Let tj
2. Pick K1
3. Let VK = iO(λ, SigCheck). Here the circuit SigCheck is padded if necessary, such that its size is equal
$← K1 and K2
$← K2.
to that of later inputs to the obfuscator.
4. Output VK.
5. While Mj ∈ Q is received:
i=1F1(K1, tj(cid:107)i(cid:107)M(i)) and s2j = ⊕λ
(a) Let s1j = ⊕l
(b) Compute sj = s1j ⊕ s2j. Let σj = (tj, sj).
(c) Output σj.
6. Receive (M∗, σ∗).
i=1F2,i(K2,i, t(i)
j ).
A succeeds if M∗ (cid:54)∈ Q and VK(M∗, σ∗) = 1.
Game 2 In this hybrid we change the winning condition. First the challenger choose indices (ˆi, ˆj) in
[1, l] × [1, n] and a bit ˆb in {0, 1} at random. Suppose an attacker in the ﬁnal step outputs (M∗, σ∗). The
winning condition enforces an additional check that t∗ = tˆj and M∗(ˆi) = ˆb and ˆb (cid:54)= Mˆj(ˆi).
$← {0, 1}λ for all j ∈ [1, n].
1. Let tj
2. Choose (ˆi, ˆj) in [1, l] × [1, n] and ˆb in {0, 1} at random. Let τ = tˆj(cid:107)ˆi(cid:107)ˆb).
3. Pick K1
4. Let VK = iO(λ, SigCheck). Here the circuit SigCheck is padded if necessary, such that its size is equal
$← K2,i : i ∈ [1, λ].
$← K1 and K2,i
to that of later inputs to the obfuscator.
5. Output VK.
6. While Mj ∈ Q is received:
i=1F1(K1, tj(cid:107)i(cid:107)M(i)) and s2j = ⊕λ
(a) Let s1j = ⊕l
(b) Compute sj = s1j ⊕ s2j. Let σj = (tj, sj).
(c) Output σj.
7. Receive (M∗, σ∗).
i=1F2,i(K2,i, t(i)
j ).
A succeeds if M∗ (cid:54)∈ Q and VK(M∗, σ∗) = 1 and if t∗ = tˆj and M∗(ˆi) = ˆb and ˆb (cid:54)= Mˆj(ˆi).
7
Game 3 In this game the challenger creates the veriﬁcation key as an obfuscation of an alternate veriﬁcation
circuit SigCheckA. First the challenger computes a puncturing of the secret key K1 at string τ. Let y =
F1(K1, τ). The challenger uses the punctured key K1{τ}, punctured value y and the injective OWF f to
generate SigCheckA.
$← {0, 1}λ for all j ∈ [1, n].
$← K1 and K2,i
1. Let tj
2. Choose (ˆi, ˆj) in [1, l] × [1, n] and ˆb in {0, 1} at random. Let τ = (tˆj,ˆi, ˆb).
3. Pick K1
z = f(y).
4. Let VK = iO(λ, SigCheckA).