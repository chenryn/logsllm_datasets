---
**作者**: Nived V  
**分类**: 容器与云  
**评论数据**: 无  
**统计**:
  - 评论数: 0
  - 收藏次数: 2
  - 点赞数: 0
  - 分享次数: 0
  - 浏览量: 6577
**日期**: 2021-09-11 11:01:13  
**编辑推荐**: 否  
**摘要**: 通过深入了解容器运行时，理解容器环境是如何建立的。  
**原文链接**: https://opensource.com/article/21/9/container-runtimes  
**ID**: 13772  
**是否原创翻译**: 是  
**大图**: /data/attachment/album/202109/11/110104vzgjs0v9c9o04s78.jpg  
**永久链接**: /article-13772-1.html  
**图片**: /data/attachment/album/202109/11/110104vzgjs0v9c9o04s78.jpg.thumb.jpg  
**相关文章**:
  - 排序: 0, 文章ID: 13766
  - 排序: 0, 文章ID: 13792
**审阅者**: wxy  
**选择者**: lujun9972  
**总结**: 通过深入了解容器运行时，理解容器环境是如何建立的。  
**标签**:
  - 容器  
**缩略图**: 否  
**标题**: 什么是容器运行时？  
**标题图片**: 是  
**翻译者**: geekpi  
**更新时间**: 2021-09-11 11:01:13  
---

> 通过深入了解容器运行时，理解容器环境是如何建立的。

![Ships at sea on the web](/data/attachment/album/202109/11/110104vzgjs0v9c9o04s78.jpg)

在学习[容器镜像](https://opensource.com/article/21/8/container-fundamentals-2)时，我们讨论了容器的基本原理。现在，我们将深入探讨容器运行时，以了解容器环境是如何构建的。本文的部分信息摘自开放容器计划（Open Container Initiative, OCI）的[官方文档](https://github.com/opencontainers)，因此无论使用何种容器引擎，这些信息都是一致的。

### 容器运行机制

当你运行 `podman run` 或 `docker run` 命令时，后台究竟发生了什么？以下是分步概述：

1. 如果本地没有镜像，则从镜像登记仓库拉取镜像。
2. 镜像被提取到一个写时复制（Copy-on-Write, COW）的文件系统上，所有容器层相互堆叠以形成一个合并的文件系统。
3. 为容器准备一个挂载点。
4. 从容器镜像中设置元数据，包括覆盖 `CMD`、来自用户输入的 `ENTRYPOINT`、设置 SECCOMP 规则等，以确保容器按预期运行。
5. 提醒内核为该容器分配某种隔离，如进程、网络和文件系统（命名空间, namespace）。
6. 提醒内核为该容器分配一些资源限制，如 CPU 或内存限制（控制组, cgroup）。
7. 传递一个系统调用给内核用于启动容器。
8. 设置 SELinux/AppArmor。

容器运行时负责上述所有工作。当我们提到容器运行时时，可能会想到 runc、lxc、containerd、rkt、cri-o 等。这些都是容器引擎和容器运行时，每一种都是为不同情况而设计的。容器运行时更侧重于运行容器，为容器设置命名空间和控制组（cgroup），也被称为底层容器运行时。高层容器运行时或容器引擎专注于格式、解包、管理和镜像共享，并为开发者提供 API。

### 开放容器计划（OCI）

开放容器计划（Open Container Initiative, OCI）是一个 Linux 基金会项目，旨在设计某些开放标准或围绕如何与容器运行时和容器镜像格式工作的结构。它由 Docker、rkt、CoreOS 和其他行业领导者于 2015 年 6 月成立。

它通过两个规范来完成以下任务：

#### 1. 镜像规范

该规范的目标是创建可互操作的工具，用于构建、传输和准备运行的容器镜像。该规范的高级组件包括：

- [镜像清单](https://github.com/opencontainers/image-spec/blob/master/manifest.md) — 描述构成容器镜像的元素的文件。
- [镜像索引](https://github.com/opencontainers/image-spec/blob/master/image-index.md) — 镜像清单的注释索引。
- [镜像布局](https://github.com/opencontainers/image-spec/blob/master/image-layout.md) — 镜像内容的文件系统布局。
- [文件系统布局](https://github.com/opencontainers/image-spec/blob/master/layer.md) — 描述容器文件系统的变更集。
- [镜像配置](https://github.com/opencontainers/image-spec/blob/master/config.md) — 确定镜像层顺序和配置的文件，以便转换成 [运行时捆包](https://github.com/opencontainers/runtime-spec)。
- [转换](https://github.com/opencontainers/image-spec/blob/master/conversion.md) — 解释应该如何进行转换的文件。
- [描述符](https://github.com/opencontainers/image-spec/blob/master/descriptor.md) — 一个描述被引用内容的类型、元数据和内容地址的参考资料。

#### 2. 运行时规范

该规范用于定义容器的配置、执行环境和生命周期。`config.json` 文件为所有支持的平台提供了容器配置，并详细定义了用于创建容器的字段。在详细定义执行环境时，也描述了为容器的生命周期定义的通用操作，以确保在容器内运行的应用在不同的运行时环境之间有一个一致的环境。

Linux 容器规范使用了各种内核特性，包括命名空间、控制组、权能、LSM 和文件系统隔离等来实现该规范。

### 小结

容器运行时通过 OCI 规范管理，以提供一致性和互操作性。许多人在使用容器时不需要了解它们是如何工作的，但当你需要排除故障或优化时，了解容器是一个宝贵的优势。

本文基于 [techbeatly](https://medium.com/techbeatly/container-runtimes-deep-dive-77eb0e511939) 的文章，并经授权改编。

---
**来源**: 
**作者**: [Nived V](https://opensource.com/users/nivedv)  
**选题**: [lujun9972](https://github.com/lujun9972)  
**译者**: [geekpi](https://github.com/geekpi)  
**校对**: [turbokernel](https://github.com/turbokernel)  
**原创编译**: LCTT  
**荣誉推出**: Linux中国  
---