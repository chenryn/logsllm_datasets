the app marketplace, the user’s organization and the device
owner, allowing the organization to automatically enforce
BYOD security policies on mobile devices. The enforce-
ment of a policy usually requires modiﬁcations to the app
(e.g., to instrument it). The modiﬁcations are performed
by the meta-market, and have the side eﬀect of invalidating
the developer’s signature. This requires the meta-market to
re-sign the app before it can be installed on mobile devices.
The meta-market model has been recently adopted out-
side the BYOD context. For instance, Cassandra [17] is a
meta-market architecture that veriﬁes whether Android ap-
plications comply with the user’s privacy policy. Cassandra
allows users to restrict installed applications to those that
comply with a particular security policy. Users do not need
to trust the meta-market because applications carry their
own proof of compliance.
Code Rewriting.
The current literature includes sev-
eral paradigms for program transformation. Among them,
Aspect-Oriented Programming [14] (AOP) and reﬂection [26]
are probably the most commonly used. Informally, an as-
pect consists of a fragment of code and a rewriting rule.
When aspects are deﬁned, a program can be modiﬁed by
inserting invocations to the aspects’ code. Also, using As-
pect Weaving [5] the fragments carried by the aspects are
directly injected in the application code. Instead, reﬂection
allows programs to manipulate their own elements (e.g., pro-
cedures and classes) through speciﬁc APIs and data struc-
tures. Both AOP and reﬂection are compatible with our ap-
proach, and can be used for implementing a program trans-
formation framework similar to FLEX. However, we believe
that code annotations contained within comments are easier
to understand and use under our assumptions of program-
ming under a contract (see below).
The idea of using comments for annotating programs has
been proposed before. For instance, the Java modeling lan-
guage [16] (JML) allows a developer to attach speciﬁcations
to her code as comments. A speciﬁcation can serve for many
purposes, such as automatic veriﬁcation, and contract-based
software design. Extending JML with the syntax of our an-
notation language is feasible and allows the integration of
FLEX with a state-of-the-art speciﬁcation language. How-
ever, since we target mobile code, BML [8] is a better choice,
as it implements JML speciﬁcations at the byte-code level.
Redactable and Sanitizable Signatures. Redactable
signatures [13] allow an authorized semi-trusted party to
obtain a valid signature from a redacted document with-
out any interaction with the original signer. Unfortunately,
redactable signatures are not a viable tool for adding code
to signed applications. In fact, redactable signatures only
support removal of document components.
A more promising approach consists in using sanitizable
signatures [3, 7]. Sanitizable signatures allow authorized
semi-trusted parties to modify parts of a signed message
in a limited fashion. In our scenario, this includes adding
and removing code from the mobile app without invalidat-
ing the original signature. Although this approach might
sound appealing, it has two critical drawbacks: (i) by us-
ing sanitizable signatures, the developer is able to indicate
what parts of the code can be modiﬁed, but cannot impose
any restriction on the modiﬁcations. Because the language
the protocol participants) or external. In the former case,
we consider a malicious meta-market. This meta-market is
willing to covertly perform modiﬁcations to the mobile appli-
cation in violation of the developer’s contract. In the latter,
we consider an adversary who relays messages between par-
ties, and can therefore modify them in transit. Although
this can be addressed, in some cases, by using tools such as
TLS/SSL, there are scenarios in which this is not possible.
For example, the meta-market might store applications on a
cloud server that is used for distributing applications. If the
adversary is able to subvert the cloud server, it can perform
arbitrary modiﬁcations to the apps or to the contract before
they are retrieved by the user.
Internal Adversaries.
We allow a malicious meta-
market to arbitrarily deviate from the intended behavior
by implementing any feasible (i.e., polynomial-time) strat-
egy. The goal of the meta-market is to construct a tuple
Mi = (appi, contracti, modsi, γMi ) such that checkuser(Mi,
pkdev, pkmm) returns 1, and Di = (appi, contracti, γDi ) was
never issued by the developer. In other words, the malicious
meta-market wants to surreptitiously construct a valid ap-
plication, contract, and set of modiﬁcations such that either
the applications or the contract (or both) have not been gen-
erated by the developer, or the modiﬁcations do not match
with the contract and the application.
To formally deﬁne internal adversaries, we introduce the
Forging Application Attack (FAA):
Experiment FAAA(κ)
1. A receives pkdev and (skmm, pkmm), and adaptively
requests arbitrary tuples Di = (appi, contracti, γDi ) to
the honest developer.
2. Eventually, A outputs M∗ = (app∗, contract∗, mods∗,
γM∗ ). The experiment outputs 1 if and only if
checkuser(M∗, pkdev, pkmm) = 1 and D∗ = (app∗,
contract∗, γD∗ ) was never issued by the developer. Oth-
erwise, the experiment outputs 0.
Definition 1
(FAA-security). A FLEX instantiation
is secure under Forging Application Attack if there exists a
for any PPT A,
negligible function negl
Pr[FAAA(κ) = 1] ≤ negl(κ).
such that
In this scenario, an external ma-
External Adversaries.
licious party is allowed to perform arbitrary modiﬁcations
to the messages exchanged by the protocol participants. In-
formally, the goal of the malicious party is to provide a tuple
Mi = (appi, contracti, modsi, γMi ) to the user such that ei-
ther Di = (appi, contracti, γDi ) was not issued by the devel-
oper, or modsi was not issued by the meta-market, or both,
and such that checkuser(Mi, pkdev, pkmm) = 1. To formalize
external adversaries, we introduce the Application Poisoning
Attack (APA):
Experiment APAA(κ)
1. A receives pkdev and pkmm.
It then adaptively re-
quests arbitrary tuples Di = (appi, contracti, γDi ) to
the developer, and sends tuples Dj = (appj, contractj,
γDj ) and modiﬁcations modsj to the meta-market,
which returns Mj = (appj, contractj, modsj, γMj ) if
checkmm(Dj, pkdev) = 1, and ⊥ otherwise.
Figure 2: Parties and their interaction.
used by the developer (and therefore by the meta-market)
is Turing-complete, arbitrary code injection performed by
the meta-market implies virtually no restrictions on the re-
sulting modiﬁed code; and (ii) the user cannot reliably and
securely determine the exact modiﬁcations implemented by
the meta-market. Hence, there can be no end-to-end trust
between the developer and the user.
4. SYSTEM AND ADVERSARY MODEL
In this section, we present the components of our system,
and discuss their interaction. Our system includes a devel-
oper, a meta-market, and a user (see Figure 2). The devel-
oper creates an annotated source code in AMJ, and compiles
it using the FLEX compiler. The result of this process is a
standard (signed) smartphone application, and a contract.
The contract is automatically generated from the code an-
notations, and speciﬁes which parts of the application can
be modiﬁed by the meta-market, and how. (The language
of our code annotations is discussed in Section 5.4).
The meta-market is in charge of implementing modiﬁca-
tions to the developer’s app, and to distribute the result-
ing code to the users. App modiﬁcations, also written using
AMJ, are distributed in source format, and are signed by the
meta-market. After receiving the original app, the contract
and the list of modiﬁcations from the meta-market, the user
veriﬁes all signatures, and checks if the meta-market’s modi-
ﬁcations comply with the contract. If they do, the user runs a
small tool that compiles the modiﬁcations and merges them
with the original app.
Integrity and authenticity of the contract, the app, and
the modiﬁcations are guaranteed using a standard signature
scheme. The developer and the meta market have access
to their respective private (signing) keys skdev and skmm,
while all parties have access to all public keys.
More formally, let app be an application, contract a con-
tract that lists valid modiﬁcations to app, and mods a set
of modiﬁcations that can be applied to app. The developer
issues tuple D = (app, contract, γD), where γD is auxiliary
information on D (e.g., a signature on app and contract),
while the meta-market generates tuple M = (app, contract,
mods, γM ) where γM is auxiliary information on M . The
meta-market runs algorithm checkmm(D, pkdev), which re-
turns 1 if the application and the contract are valid and have
been constructed by a honest developer (i.e., all signatures
verify), and 0 otherwise. The user has access to algorithm
checkuser(M, pkdev, pkmm), which returns 1 if checkmm(D,
pkdev) = 1 and if the modiﬁcations in M are valid with re-
spect to app and contract, and have been produced by the
meta-market—and 0 otherwise.
We assume that the adversary can be internal (i.e., one of
Developer!Meta-market!User!Contract!App!Contract!Modiﬁcations!App!Table 1: Syntax of MJ
L ::= class C extends D { C f; K M }
K ::= C (C x) { s }
M ::= C m (C x) { s }
e ::= null | x | e . f | e . m (e) | new C (e) |
s ::= skip ; | if ( e1 == e2 ) { s1 } else { s2 } |
( C ) e | /* @ER@ */ e
e . f = e(cid:48) ; | x = e ; | C x in { s } |
s1 s2 | return e ; | /* @SR@ */ s |
/* @CR@ */ s
Abbreviations:
true (cid:44) null
false (cid:44) new Object()
if (e) {s1} else {s2} (cid:44) if (e == null) {s1} else {s2}
if (!e) {s1} else {s2} (cid:44) if (e) {s2} else {s1}
if (. . .) {s} (cid:44) if (. . .) {s} else {skip;}
s1 . . . sk (cid:44) s1 (s2 (· · · sk) · · · )
{s} (cid:44) C x in {s} (where x (cid:54)∈ f v(s))
C x; C y in {s} (cid:44) C x in { C y in {s}} (with x (cid:54)= y)
2. Eventually, A outputs M∗ = (app∗, contract∗, mods∗,
γM∗ ). The experiment outputs 1 iﬀ checkuser(M∗,
pkdev, pkmm) = 1 and D∗ = (app∗, contract∗, γD∗ )
was never issued by the developer, or M∗ was never
issued by the meta-market, and 0 otherwise.
Definition 2
(APA-security). A FLEX instantiation
is secure under Application Poisoning Attack if there ex-
ists a negligible function negl such that for any PPT A,
Pr[APAA(κ) = 1] ≤ negl(κ).
In the rest of the paper we deﬁne how contract, mods, γM ,
and γD are constructed, and how checkuser and checkmm
are computed in order to guarantee that the aforementioned
security properties hold.
5. PROGRAMMING MODEL
In this section we present our programming framework for
developing annotated applications.
5.1 Annotated Middleweight Java
Middleweight Java (MJ) is an object-oriented imperative
programming language proposed by Bierman et al. [4]. The
main goal of MJ is to provide a compact—yet expressive—
subset of the features of Java. With FLEX we introduce an
extension of the syntax of MJ, called AMJ, in which some
elements of the language can be also annotated with patterns
for term rewriting. The syntax of MJ is given in Table 1.
With AMJ, a new class C is deﬁned by specializing an
existing class D (Object is the predeﬁned, empty class).
Each class deﬁnition consists of three elements: (i) a list
of typed ﬁelds C f; (ii) a constructor K; and (iii) a list of
methods M. The constructor of a class C consists of a list
of typed parameters C x and a statement s. Each method
has a name m, a return type C, a list of parameters (e.g.,
constructors) and a statement s. An expression can be
the constant null, a variable x, a ﬁeld e.f, a method in-
vocation e.m(e), an object constructor new C(e), a class
cast (C)e or an annotated expression /*@ER@*/e. A state-
ment is either: an eﬀect-free command skip;, a conditional
branch if (e1 == e2) {s1} else {s2}, a ﬁeld assignment
(cid:48)
;, a variable assignment x = e;, a block C x {s},
e.f = e
a sequence s1 s2, a return instruction return e;, or an an-
notated statement /*@SR@*/s and /*@CR@*/s.
Annotations for expressions and statements are discussed
in Section 5.4. In the rest of this section, the reader can con-
sider annotations as code comments, which have no eﬀects
on the execution of programs.
To improve the readability, we introduce some syntactic
sugar. We write void in method signature when its return
type is irrelevant. Also we use expression e.m(e) as a state-
ment in place of C x in {x = e.m(e);}.
Example 1. A subset of the class Message can be deﬁned
as follows.
class Message extends Object {
Object v ;
Message ( Object u ) { this . v = u ;}
Object isACK () {
if ( this . v == null )
{ return null ;}
else
{ return new Object ();}
}
}
A Message has a payload represented by v. The method
isACK returns null when the payload is null. Otherwise it
returns a new Object(). (Recall that we treat null as the
boolean value true.)
5.2 Operational Semantics
The operational semantics of AMJ is deﬁned in terms of
transitions between conﬁgurations, which represent the cur-
rent state of a running program.
Definition 3. A conﬁguration is a tuple (E, H, F ) where
• E : V (cid:42) O ∪ {null}
is a variable environment map-
ping variables into object identiﬁers (o, o(cid:48)), or null;
• H : O (cid:42) (C, E)
is a heap function mapping object
identiﬁers into object records;
• F ::= s | e | o | null | •
is a term.
We write E(x) = ⊥ when x (cid:54)∈ dom(E). E|x is the environ-
ment that assigns ⊥ to x and otherwise behaves as E.
A terminal conﬁguration is a conﬁguration (E, H, u) where
u is either a value (i.e., a pointer o or null), or the void
element •.
The operational semantics of expressions and statements
is presented in Appendix B. An expression null is reduced
to the constant null (rule (EE-Null)), a variable x is evalu-
ated to the value v provided by the variable environment E
(rule (EE-Var)), while a ﬁeld access e.f results in a value
v if e can be evaluated to a pointer o, associated to a record
(C, E) such that (i) C is a class declaring a ﬁeld f and (ii)
E assigns v to f. As a side eﬀect, the evaluation of e might
result in a new heap H(cid:48).
A method invocation (EE-Mth) e.m(¯e) consists in evalu-
ating whether e (or a value o which e evaluates to) points to
a record (C, E) such that C declares a method m, with formal
parameters ¯x and body s.3 Then, the n expressions of ¯e (i.e.,
3Additionally, we require that the number of actual param-
eters is the same as that of the formal parameters, which
amounts to require that ¯x and ¯e have the same length.
e1, . . . , en) are evaluated to obtain the corresponding values
v1, . . . , vn. Each evaluation can result in a transformation
of the heap, therefore leading to the chain H1 . . . Hn. The
body of m is evaluated after adding the mappings between
the parameters’ names ¯x and values ¯v to E. The resulting
conﬁguration (E(cid:48)
o, H(cid:48), v) deﬁnes the heap H(cid:48) and the value
v of the result of the application of rule (EE-Mth). After
applying the rule, the environment E(cid:48)
o is dropped, and is
replaced by the external environment E.