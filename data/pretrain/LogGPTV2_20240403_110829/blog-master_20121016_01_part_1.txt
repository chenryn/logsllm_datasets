## PostgreSQL XLOG fsync simple introduce  
### 作者                                                                                   
digoal                                                                           
### 日期                                                                                                                                               
2012-10-16                                                                         
### 标签                                                                            
PostgreSQL , redo , xlog , wal , fsync机制       
----                                                                                                                                            
## 背景               
## 一、where is the tuples? datafile, blocks.  
从上到下的顺序查找.  
1\. PostgreSQL shared buffer  
2\. OS FileSystem cache  
3\. storage cache(raid card or controller's cache)  
4\. disk cache (almost disabled)  
5\. disk  
## 二、How point to tuples?  
```  
Index(optional)  ->  Heap page -> itemid -> item(tuple).  
```  
## 三、which tuples can be saw by client? must satisfied two factors below at the same time.  
1\. xmin , xmax in tuple. -- client can see the tuples xid before the client's xid or database's current xid.  
2\. transaction (xmin or xmax) status (t_infomask). -- client can see tuples has been commited success.  
后面将举例使用pageinspect来举例说明这两点.  
## 四、transaction Durable(ACID - Durable) :   
async commit & sync commit  
1\. the transaction's redo info (xlog buffer) fsynced to disk .   
后面将举例使用strace 跟踪系统接口write和fsync的调用.  
## 五、which process does "wal fsync"?  
1\. wal writer process  
2\. backend process  
后面将举例使用strace 跟踪系统接口write和fsync的调用.  
## 六、WAL fsync parameters  
http://www.postgresql.org/docs/9.2/static/runtime-config-wal.html#RUNTIME-CONFIG-WAL-SETTINGS  
## 举例  
1\. pageinspect的例子, 观察xmin, xmax, t_infomask的值. t_infomask的值见参考部分.  
安装postgresql, 这里使用PostgreSQL 9.3, 从github上下载.  
```  
useradd pgdev  
vi /home/pgdev/.bash_profile  
export PS1="$USER@`/bin/hostname -s`-> "  
export PGPORT=9300  
export PGUSER=postgres  
export PGDATA=/data04/pgdev/pg_root  
export LANG=en_US.utf8  
export PGHOME=/home/pgdev/pgsql9.3  
export PGHOST=$PGDATA  
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib  
export DATE=`date +"%Y%m%d%H%M"`  
export PATH=$PGHOME/bin:$PATH:.  
export MANPATH=$PGHOME/share/man:$MANPATH  
alias rm='rm -i'  
alias ll='ls -lh'  
wget https://nodeload.github.com/postgres/postgres/zipball/master  
unzip postgresql-snapshot.zip  
cd postgresql  
./configure --prefix=/home/pgdev/pgsql9.3 --with-pgport=9300 --with-perl --with-python --with-tcl --with-openssl --with-pam--without-ldap --with-libxml --with-libxslt --enable-thread-safety --with-wal-blocksize=16 --enable-debug && gmake  
gmake install  
cd postgresql/contrib/pageinspect  
. /home/pgdev/.bash_profile  
gmake  
gmake install  
su - pgdev  
initdb  
```  
创建测试库, 表.  
```  
postgres=# create role digoal nosuperuser nocreatedb nocreaterole noinherit login encrypted password 'DIGOAL';  
CREATE ROLE  
postgres=# create database digoal with owner digoal;  
CREATE DATABASE  
postgres=# \c digoal postgres  
You are now connected to database "digoal" as user "postgres".  
digoal=# create extension pageinspect;  
CREATE EXTENSION  
digoal=# \c digoal digoal  
You are now connected to database "digoal" as user "digoal".  
digoal=> create schema digoal ;  
CREATE SCHEMA  
digoal=> create table t (id serial primary key, info text);  
CREATE TABLE  
```  
使用pageinspect对heap信息讲解 :   
```  
digoal=> insert into t(info) values ('digoal');  
INSERT 0 1  
digoal=> select ctid,* from t;  
 ctid  | id |  info    
-------+----+--------  
 (0,1) |  1 | digoal  
(1 row)  
digoal=> \c digoal postgres  
You are now connected to database "digoal" as user "postgres".  
digoal=# select * from heap_page_items(get_raw_page('digoal.t',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     35 |   1746 |      0 |        0 | (0,1)  |           2 |       2306 |     24 |        |        
(1 row)  
```  
信息 :   
lp = 1 ( 对应 ctid(0,1) 里面的 1 )  
```  
t_infomask = 2306 ( = 0x0902 = 0x0002 + 0x0100 + 0x0800 )  
HEAP_HASVARWIDTH 0x0002  
HEAP_XMIN_COMMITTED 0x0100  
HEAP_XMAX_INVALID 0x0800  
t_xmin = 1746  
t_xmax = 0  
```  
解释 :   
这条记录的t_infomax由3个值相加得到, 分别是HEAP_HASVARWIDTH,HEAP_XMIN_COMMITTED,HEAP_XMAX_INVALID. 表示这条记录的xmin已经提交, 同时xmax无效, 表示是新插入的记录. HEAP_HASVARWIDTH表示这条记录有变长字段.  
所以这条记录能被后起的会话(分配了更新的xid的会话)看见. 如下(xid = 1747, 较t_xmin=1746 更新) :   
```  
digoal=# select txid_current();  
 txid_current   
--------------  
         1747  
(1 row)  
digoal=# select * from digoal.t;  
 id |  info    
----+--------  
  1 | digoal  
(1 row)  
```  
接下来举一个插入并回滚的例子 :   
session 1:  
```  
digoal=# begin;  
BEGIN  
digoal=# insert into digoal.t(info) values('rollback');  
INSERT 0 1  
```  
session 2:  
```  
digoal=# select txid_current();  
 txid_current   
--------------  
         1749  
(1 row)  
digoal=# select * from heap_page_items(get_raw_page('digoal.t',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     35 |   1746 |      0 |        0 | (0,1)  |           2 |       2306 |     24 |        |        
  2 |   8112 |        1 |     37 |   1748 |      0 |        0 | (0,2)  |           2 |       2050 |     24 |        |        
(2 rows)  
```  
注意, 使用pageinspect分析的是块信息, 所以能见度较高, 无视xmin,xmax. 这里看到了会话1新插入的行. 信息如下 :   
lp = 2 ( 对应 ctid(0,2) 里面的 2 )  
```  
t_infomask = 2050 ( = 0x0802 = 0x0002 + 0x0800 )  
HEAP_HASVARWIDTH 0x0002  
HEAP_XMAX_INVALID 0x0800  
t_xmin = 1748  
t_xmax = 0  
```  
从以上信息可以分析, 这条记录的事务号是1748. 当前这个tuple的事务还未提交, 因为少了HEAP_XMIN_COMMITTED标记.  
所以即使会话2的txid比会话1更新, 也看不到这条记录 (这个和事务隔离级别有关, PostgreSQL最低事务隔离级别=read committed)  
所以在会话2中现在看不到这条记录.  
```  
digoal=# select * from digoal.t;  
 id |  info    
----+--------  
  1 | digoal  
(1 row)  
```  
session 1:  
回滚 :   
```  
digoal=# rollback;  
ROLLBACK  
```  
session 2:  
```  
digoal=# select * from heap_page_items(get_raw_page('digoal.t',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  