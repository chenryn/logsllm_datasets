# 【技术分享】浅谈动态爬虫与去重
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
**作者：**[ **Fr1day@0keeTeam**
****](http://bobao.360.cn/member/contribute?uid=2515404114)
**预估稿费：600RMB（不服你也来投稿啊！）**
******投稿方式：发送邮件至**[ **linwei#360.cn**](mailto:PI:EMAIL) **，或登陆**[
**网页版**](http://bobao.360.cn/contribute/index) **在线投稿******
**  
**
**0x01 简介**
随着Web
2.0的发展，页面中的AJAX也越来越多。由于传统爬虫依靠静态分析，不能准确的抓取到页面中的AJAX请求以及动态更新的内容，已经越来越不能满足需求。基于动态解析的Web
2.0爬虫应运而生，通过浏览器内核解析页面源码，模拟用户操作，能有效解决上述问题。本文将详细分析利用PhantomJS + Python
编写爬虫并进行去重的思路。
**0x02 PhantomJS**
[PhantomJS](http://phantomjs.org/) 是无界面的 Webkit 解析器，提供了 JavaScript API
。由于去除了可视化界面，速度比一般 Webkit 浏览器要快很多。同时提供了很多监控和事件接口，可以方便的操作 DOM 节点，模拟用户操作等。
接下来我们通过一个简单的例子，来展示下动态爬虫和传统爬虫的区别。目标：加载一个页面（[那么，一起玩吧](http://named.cn/.mine)），并且获取其中所有的
****标签。
    // example.js
    var page = require('webpage').create();
    page.onAlert = function (message) {
        console.log(message);
        return true;
    };
    page.onCallback = function() {
        page.evaluate(function(){
            atags = document.getElementsByTagName("a");
            for(var i=0;i**
标签都是动态更新到页面中的。静态分析对这种情况无能为力，而基于浏览器内核的动态分析，可以轻松的处理这些情况。
但也可以明显看出动态分析的缺点：系统资源占用较多，且占用时间较长，还会有一些莫名其妙的坑，编写起来也更复杂更花时间（需要对前端编程有一定的了解）。
当然除了 PhantomJS 还有一些其他的动态解析器，比如同样基于 Webkit 内核的
PyQt（PhantomJS的最新版本也是基于pyqt来实现）、基于 PhantomJS 封装的 CasperJS、基于的 Firefox Gecko
内核的SlimerJS等。由于并没有一个统一的标准，各个动态解析器的API实现程度也参差不齐，也会有各种各样的坑，并没有一个 “最佳” 的解决方案。
**0x03 触发事件及页面监听**
上面的例子，介绍了爬虫中常见的一个场景：在页面加载完成后，通过AJAX加载数据。但现实中的场景，往往会更复杂，需要与用户进行交互后才会触发，比如在点击了某个按钮后跳转到某个页面、滚动到页面尾部后加载下一页的数据等。我们需要新的解决方案，去模拟正常用户的操作。那么，应该如何将用户交互抽象为代码？
用户操作的本质，实际上是触发了绑定在DOM节点的事件。所以模拟用户操作的问题，可以简化为触发节点事件。事件执行的结果也是多种多样的，但对于爬虫来说，我们需要关注的结果只有两种：1.
是否添加了新的节点（ ****、 ****等等） 2.
是否发起了新的请求（包括AJAX请求、跳转等）。简化后，我们需要解决的问题有：
1\. 如何获取绑定事件？
2\. 如何触发事件？
3\. 如何获取事件触发的结果？
最后我们的解决方案如下：
1\. 如何获取绑定事件？JavaScript中绑定事件，都会调用 **addEventListener**
函数。在页面里的代码执行前（[onInitialized |
PhantomJS](http://phantomjs.org/api/webpage/handler/on-initialized.html)），hook
addEventListener函数，就可以捕获到哪些DOM节点绑定了事件。
    _addEventListener = Element.prototype.addEventListener;
    Element.prototype.addEventListener = function(a,b,c) {
        EVENT_LIST.push({"event": event, "element": this})
        _addEventListener.apply(this, arguments);
    };
2\. 如何触发事件？JavaScript中提供了 **dispatchEvent**
函数，可以触发指定DOM节点的指定事件，也就是上一个问题中，我们收集的 **EVENT_LIST** 。
    for(var i in EVENT_LIST){
        var evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(EVENT_LIST[i]["event"], true, true, null);
        EVENT_LIST[i]["element"].dispatchEvent(evt);
    }
除了通过addEventListener绑定事件，还有一些inline-script，是无法通过hook addEventListener来获取的。比如：
解决方法是遍历节点，执行所有的onxxxx属性的值。
    function trigger_inline(){
        var nodes = document.all;
        for (var i = 0; i < nodes.length; i++) {
            var attrs = nodes[i].attributes;
            for (var j = 0; j < attrs.length; j++) {
                attr_name = attrs[j].nodeName;
                attr_value = attrs[j].nodeValue;
                if (attr_name.substr(0, 2) == "on") {
                    console.log(attrs[j].nodeName + ' : ' + attr_value);
                    eval(attr_value);
                }
                if (attr_name in {"src": 1, "href": 1} && attrs[j].nodeValue.substr(0, 11) == "javascript:") {
                    console.log(attrs[j].nodeName + ' : ' + attr_value);
                    eval(attr_value.substr(11));
                }
            }
        }
    }
3\. 如何获取事件触发的结果？HTML5中的 **MutationObserver**
方法，可以检查页面中的DOM是否发生变化。但是PhantomJS并不支持（摊手 [Support for Mutation
Observers](https://github.com/ariya/phantomjs/issues/10715)），解决方案是监听了
**DOMNodeInserted**
事件。AJAX请求的捕获，解决方案有两种：[onResourceRequested](http://phantomjs.org/api/webpage/handler/on-resource-requested.html) 可以捕获非主框架的请求，但需要通过正则表达式匹配筛选出有效请求；hook