connector virtual machine. The platform is responsible 
for  the  management  of  the  available  connectors  and 
their  connection  between  clients  and  WS  providers 
to 
the 
(Management  Service).  The  Heath  Monitoring 
service is another core member of the IWSD platform. 
It  collects  all  error  reports  captured  during  the 
execution of connectors. 
The IWSD platform must be highly dependable and 
conventional techniques, as in [6], can be used to this 
aim,  this  being  out  of  the  scope  of  this  paper.  Our 
implementation  was  based  on  a  duplex  HW  &  SW 
architecture for the experiments carried out. 
3.  Replication and equivalent services 
The  recovery  mechanisms  rely  on  service  replicas 
available on the Net. Several replicas of a given Web 
Service can be found, for instance the Web Service of 
Amazon  has  6  replicas  (in  the  US,  Japan,  France, 
Canada, Germany and UK.). Finding identical replicas 
is  not  always  possible.  Nevertheless,  similar  services 
can  be  identified  and  used  to  perform  recovery,  or  at 
least to provide a degraded mode of operation.  
redundancy  of 
Clearly, Internet offers now new opportunities with 
respect 
resources.  Their 
identification  and  classification  is  the  purpose  of 
current  research  on  Ontologies  [7,  8].  The  approach, 
called  “Web  Semantic”  will  be  able  to  seek  and  to 
identify more easily identical or equivalent resources.  
We thus consider two types of services that can be 
used  to  implement  recovery  mechanisms.  First  of  all, 
Identical  services  correspond  to  a  unique  WSDL 
document,  but  the  access  point  is  different  (e.g. 
replicas for Amazon). The fact that they derive from a 
unique WSDL does not mean that their implementation 
is  identical.  They  just  obey  to  the  same  input-output 
request  format.  Their  implementation  of  the  service 
can  be  different  and,  to  some  extent,  help  tolerating 
transient  faults  of  the  WS  runtime  support  but  also 
design faults of the WS. A simple switch to a different 
WS  replica  can  be  done  in  this  case  when  one  WS 
replica fails to deliver proper service. 
More  importantly  we  have  to  consider  so-called 
Equivalent  Services: 
the  WSDL  documents  are 
different  but  can  be  considered  as  fulfilling  a  similar 
specification of the original service (a degraded version 
maybe). To take advantage of Equivalent Services, we 
introduce the notion of Abstract Web Service (AWS). 
3.1.  Definition of Abstract Web Service 
An AWS does not have any functional reality but it 
has  an  attached  WSDL  document;  it  is  an  abstraction 
of several similar services. The connector associated to 
an  Abstract  Web  Service  must  convert  so-called 
“abstract requests” to concrete requests and vice-versa 
regarding  responses.  The  interface  of  each  abstract 
operation is defined with two requirements in mind: 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007• 
•  minimizing the data required to call real services; 
•  maximizing the data obtained from real services.  
contains 
To  formally  define  the  notion  of  AWS  and  create 
the  corresponding  connectors,  some  definitions  and 
notations must be introduced first: 
•  Concrete operation: A concrete operation « Op » is 
a  real  WS  operation  in  which  a  valid  request 
« Req » is associated with a response « Resp ». 
Interface  of  an  operation:  The  interface  of  an 
operation has a set of input/output parameters. The 
« Input_Interface(Op) » 
input 
parameters,  the  « Output_Interface(Op) »  contains 
the output parameters for the operation « Op ». 
From  the  basic  definitions  given  above,  we  can 
infer  the  notion  of  “abstract  operation”  that  is  the 
basis for defining abstract services. An abstract service 
is  a  collection  of  abstract  operations.  Then,  specific 
translation  functions  are  necessary  to  map  abstract 
operations to concrete ones. 
•  Abstract 
operation 
« OpAbs »  is  a  virtual  WS  operation  in  which  a 
valid abstract request « ReqAbs » is associated to a 
response « RespAbs » in a such a way that: 
− Any parameter of a concrete operation belonging 
to a target service replica can be obtained from an 
abstract request; 
operation:  An 
abstract 
the 
− From  all 
responses  of  concrete  operations 
provided  by  replicas,  all  the  parameters  of  the 
abstract response can be obtained. 
•  Mapping function: A mapping function translates a 
request  targeting  an  abstract  operation  into  a 
request  targeting  a  concrete  operation  and  vice-
versa  for  responses.  We  denote  by  ReqMap  a 
function  that  translates  an  abstract  request  into  a 
concrete request, respectively RespMap translating 
a concrete response into an abstract response. 
According  to  these  definitions,  any  request  to  an 
abstract  operation  can  be  mapped  to  a  concrete 
operation,  and  conversely  a  concrete  response  can  be 
mapped to an abstract response.  
The  creation  of  an  abstract  operation  depends  on 
equivalence  relations  that  can  be  found  between 
operations and parameters of several similar real Web 
Services.  The  corresponding  interfaces  are  generated 
from the equivalence relations. 
3.2.  Definition of equivalence relations  
An  equivalence  relation  R  is  a  semantic  relation 
between two sets of parameters. Although syntactically 
different,  two  parameters  can  represent  the  same 
information  from  a  semantic  viewpoint.  Equivalence 
relations  are  established  when 
the  semantics  of 
concrete  parameters  of  operation  Op1  can  be  derived 
from  concrete  parameters  of  operation  Op2.  Figure  4 
shows  equivalence  relations  with  an  example.  The 
three  proposed  concrete  input  interfaces  enable  a 
computer  to  be  purchased  online.  Each  one  performs 
the selection with three different criteria. 
•  service  A  selects  a  computer  with  qualitative 
parameters  such  as,  kind  of  computer  (home 
computer, parallel computer, storage server,… etc), 
price range, size and type of the screen.  
•  service B performs the search only according to the 
computers  brands  (HP,  Sony,  Compaq,…etc.)  and 
of the precise type of the computer.  
•  service  C  performs  the  search  according  to  the 
composition  of  the  computer,  parts  and  basic 
devices that are included into the computer. 
The minimal input interface of an abstract operation 
for  the  selection  operation  is  composed  of:  (i)  the 
brand, (ii) the type, (iii) the type of screen, and (iv) the 
identification (required for authentication). Indeed, it is 
possible  to  generate  requests  to  all  the  concrete 
interfaces from these four parameters: 
• 
the  brand  and  the  type  of  the  computer  can  be 
directly used to call service B,  
the  equivalence  relations  n°1,  n°2  and  n°4  can  be 
used to generate the parameters for service A  
the equivalence relation n°3 can be used to generate 
the input data for service C. 
In  this  example,  the  “identification”  parameter  of 
service  A  is  said  “private”:  this  parameter  cannot  be 
reached  by  any  equivalence  relation,  so  it  is  de  facto 
member of the input interface of the abstract operation. 
• 
• 
Figure 4. Notion of Abstract Web Service 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 20073.3.  Generation of Abstract Operations 
interfaces, 
The  aim  here  is  to  automate  the  creation  of  the 
abstract  operations  (  Input_Interface  (OpAbs)  and 
Output_Interface(OpAbs) ) from equivalence relations 
defined  by  the  user.  During  the  definition  of  the 
abstract 
avoid 
inconsistencies  that  can  occur  when  an  equivalence 
relation  leads  again  to  a  parameter  already  obtained 
using  a  previous  relation.  To  this  aim,  as  soon  as  an 
equivalence relation generates a set of parameters, we 
avoid using other equivalence relations that generates a 
parameter belonging to this set. 
important 
to 
is 
it 
Figure 5. Example of 3 concrete operations 
Figure  5  represents  three  input/output  interfaces  of 
relations 
the  various 
to  hyper-arcs  between 
concrete  operations.  The 
correspond 
interfaces.  
equivalence 
Let  RootSet  be  the  set  of  parameters  that  cannot  be 
reached  by  any  of  the  equivalence  relations  (i.e. 
RootSet = {b,d} in the example).  
Let ResultSet be the set of parameters belonging to the 
Input Interface of an Abstract Web Service (AWS). 
For any parameter p in the RootSet do: 
1) initialise ResultSet with RootSet 
2) with the equivalence relation starting from p do: 
a) compute the transitive closure, i.e. all parameters 
that  can  be  reached  with  available  relations,  except 
those that lead to parameters already obtained 
added to the ResultSet. 
At the end of the loop, the ResultSet correspond to the 
parameters of the Input Interface of the AWS. 
b)The  parameters  that  have  not  been  reached  are 
Figure 6. Algorithm for Abstract Interface 
generation 
Given  a  set  of  equivalence  relations,  the  algorithm 
given  in  Figure  6  enables  a  minimal  input  abstract 
interface  to  be  obtained,  from  which  several  concrete 
or 
interfaces  can  be  invoked.  Depending  on  the  order  in 
which  parameters  are  used  in  the  RootSet,  various 
ResultSet  can be obtained.  Several valid interfaces of 
an abstract operation can thus be obtained from a set of 
equivalence relations. 
In  the  example  of  Figure  6,  the  ResultSet  is 
initialized  to  {b,d}.  Starting  from  {b},  parameters  {c, 
e} can be reached, by transitivity from c, {f,g,a} can be 
reached.  The  two  missing  parameters  are  {d,h}.  The 
relation  from  {d}  that  generates  {h}  cannot  be  used 
because  it  generates  also  {g}  that  is  already  in  the 
ResultSet.  No  more  relation  can  be  used  and  thus, 
since {d}  is  already  in the ResultSet, {h}  is added  to 
the ResultSet. The final set is thus {b,d,h} in this case. 
The  same  algorithm  starting  from  {d}  in  the 
RootSet  leads  to  {b,d,f}  as  a  ResultSet,  thus  to  a 
second  valid  minimal  input  interface.  All  parameters 
required  to call any  concrete service operation  can be 
obtained from these two sets, {b,d,f} and {b,d,h}. 
[9-11]  by 
incompatibilities 
Recent  works  have  also  addressed  the  matching 
searching  dynamically 
between  WS 
similarities 
between  WS 
operations.  Such  works  can  help  the  user  finding 
equivalence  relation  between  parameters  and  simplify 
the creation of abstract web service interfaces. 
4.  Recovery strategies 
The recovery strategies are defined using the built-in 
functions, 
implementing  both  passive  and  active 
replication  strategies  for  either  stateless  or  stateful 
services.  The  section  entitled  RecoveryStrategy  of  the 
connector  enables  the  user  to  select  an  appropriate 
replication strategy for a target service. Their selection 
depends first on the  assumptions we  can make on the 