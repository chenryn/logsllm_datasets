# Supply-Chain Attack and .NET Malware Analysis

## Executing a Supply-Chain Attack

To perform a supply-chain attack, one can leverage the way the `csc.exe` compiler searches for referenced files. The compiler looks in the following locations:

1. The working directory
2. The `csc.exe` directory
3. Directories specified by the `/lib` switch
4. Directories specified by the `LIB` environment variable

This makes it relatively easy to inject malicious code by placing a modified file in one of these directories.

### Steps to Create and Sign an Assembly

1. **Generate a Key Pair:**
   ```sh
   sn.exe -k AlexandreBorges.snk
   ```

2. **Extract the Public Key:**
   ```sh
   sn.exe -p AlexandreBorges.snk AlexandreBorges.PublicKey sha256
   ```

3. **View the Public Key:**
   ```sh
   sn.exe -tp AlexandreBorges.PublicKey
   ```

4. **Compile the Code with Delay Signing:**
   ```sh
   csc.exe /out:malware.dll /t:exe /keyfile:AlexandreBorges.PublicKey /delaysign Program.cs
   ```

5. **Verify the Assembly:**
   ```sh
   sn.exe -Vr malware.dll
   ```

## ILAsm Directives and Instructions

Several malware samples have been modified or written directly in ILAsm to bypass common tools. Here are some key directives and instructions:

### Assembly and Module Directives

- **.assembly DefCon { }**: Identifies the current assembly as "DefCon".
- **.assembly extern**: Determines the external managed assembly used by the program.
- **.module malware.dll**: Identifies the current module.
- **.namespace Conference**: Specifies the namespace, but it does not represent metadata.

### Class Directives

- **.class public auto ansi Hacker extends [mscorlib]System.Object**:
  - **.class**: Identifies the current class (Hacker).
  - **public**: Specifies the visibility.
  - **auto**: Determines the class layout style.
  - **ansi**: String encoding while communicating with unmanaged code.
  - **extends**: Determines its base class.

### Additional Class Flags

- **private**: Used with private classes, not visible outside the current assembly.
- **sealed**: The class cannot be derived from.
- **abstract**: The class cannot be instantiated (it holds abstract methods).
- **explicit**: The loader preserves the order of fields in memory.
- **sequential**: The loader preserves the order of instance fields as specified in the class.
- **nested family**: The class is visible from descendants of the current class only.
- **nested assembly**: The class is visible only from the current assembly.
- **nested famandassem**: The class is visible from descendants of the current class, but residing in the same assembly only.
- **windowsruntime**: The class is a Windows runtime type.

### Constructor Directives

- **.ctor( )**: Instance constructor, related to instance fields.
- **.cctor( )**: Class constructor (type initializer), related to static fields.

### Method Directives

- **.method**: Specifies the method declaration.
  - **public / static**: Similar meaning as specified in "field" explanation above.
  - **cil managed**: The method is represented in managed code.
  - **newslot**: Creates a new slot in the virtual table of the class to prevent an existing method from being overridden in a derived class.
  - **native unmanaged**: The method is represented in native code.
  - **abstract**: No implementation is provided.
  - **final**: The method cannot be overridden.
  - **virtual**: The method can be redefined in derived classes.
  - **strict**: The method can only be overridden if it is accessible from the class that is overriding it.
  - **noinline**: Calls to this method cannot be replaced by an inline version.
  - **pinvokeimpl**: Declares an unmanaged method from managed code (P/Invoke mechanism).

### Example Methods

- **.method public hidebysig static pinvokeimpl("user32.dll" winapi) int32 FindWindow(string, string) cil managed preservesig**:
  - **preservesig**: Return of the method must be preserved.
  - **FindWindow(string, string)**: Function invoked from "user32.dll" and returns an int32 value.

- **.entrypoint**: Identifies the method as the entry point of the assembly.
- **.maxstack**: Defines the maximum stack depth used by the function code.
- **.locals int**: Defines local variables of the current method.

### Data and Control Flow

- **.data**: Defines a data segment.
- **stloc**: Stores a value into a local variable.
- **ldarg.0**: Loads argument 0 onto the stack.
- **ldloc**: Copies the value of a local variable onto the stack.
- **ldstr**: Loads the reference to a string onto the stack.
- **ldsflda**: Loads the reference of a static field onto the stack.
- **ldsfld**: Loads the value of a static field onto the stack.
- **ldc.i4 8**: Loads the constant value 8 onto the stack.
- **br Borges**: Unconditional jump similar to "jmp" in native assembly.
- **brtrue DefCon**: Jumps to "DefCon" branch if the top of the stack is non-zero.
- **brfalse Alex**: Jumps to "Alex" branch if the top of the stack is zero.

### Other Directives

- **.this**: Reference to the current class.
- **.base**: Reference to the parent of the current class.
- **.typedef**: Creates an alias to a type.
- **.try / catch**: Exception handling blocks.

## Advanced Topics

### Managed Assembly and Native Image

- A managed assembly can be compiled into a native image using `Ngen.exe`, but the managed assembly is still necessary.
- DLLs loaded from the Global Assembly Cache (GAC) should be monitored for strange behavior using tools like `Fuslogvw.exe` and `Process Monitor`.

### Modifying .NET Runtime Libraries

- Modifying a .NET runtime library can be lethal to many applications.
- Hooking or replacing a runtime library allows the threat to break strict rules.
- Changing the Just-In-Time (JIT) compiler can cause similar problems but is more difficult.

### Registry Manipulation

- The GAC continues to be associated with the original assembly, while its associated native image is changed to the modified version.
- Registry keys such as `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Fusion\NativeImagesIndex\v2.0.50727_64\IL` and `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Fusion\NativeImagesIndex\v2.0.50727_64\NI` hold information about the original and modified assemblies.

### Common Attack Vectors

- .NET malware often targets the `System.Reflection` namespace to remove checks or introduce hooking points.
- Malware may also target the `System.ServiceProcess.ServiceBase` class and its associated methods like `OnStart()`, `OnStop()`, `Run()`, and `ServiceMain()`.

### Conclusion

Understanding the intricacies of .NET and ILAsm is crucial for both developing and analyzing malware. By leveraging these techniques, attackers can create sophisticated and hard-to-detect threats. Therefore, continuous monitoring and robust security measures are essential to protect against such attacks.

---

**ALEXANDRE BORGES â€“ MALWARE AND SECURITY RESEARCHER**  
**DEF CON USA 2019**