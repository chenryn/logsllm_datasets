### 问题描述

我有一个使用 Apache2 作为前端服务器的设置，后端有多个由 Gunicorn 服务的 Python 应用。我的 Apache2 配置使用了 `mod_proxy`，配置如下：

```apache
<VirtualHost *:80>
    ServerName example.com
    UseCanonicalName On
    ServerAdmin webmaster@localhost

    LogLevel warn
    CustomLog /var/log/apache2/example.com/access.log combined
    ErrorLog /var/log/apache2/example.com/error.log
    ServerSignature On

    Alias /media/ /home/example/example.com/pysrc/project/media/

    ProxyPass /media/ !
    ProxyPass / http://127.0.0.1:4711/
    ProxyPassReverse / http://127.0.0.1:4711/
    ProxyPreserveHost On
    ProxyErrorOverride Off
</VirtualHost>
```

这个配置通常工作得很好，但当我重启 Gunicorn 进程（需要 2-5 秒）并且在此期间有请求通过 Apache 时，该请求会返回 503 错误。这是可以理解的。然而，即使 Gunicorn 进程已经重新启动并恢复正常运行，Apache 仍然继续返回 503 错误。只有在完全重启 Apache 后，它才会恢复从代理服务器提供内容。

### 解决方案

为了使 Apache 在 Gunicorn 重新启动后立即恢复正常服务，可以在 `ProxyPass` 指令中添加 `retry=0` 参数。这样可以确保 Apache 总是重试处于错误状态的工作进程，而不会等待超时。

修改后的配置如下：

```apache
<VirtualHost *:80>
    ServerName example.com
    UseCanonicalName On
    ServerAdmin webmaster@localhost

    LogLevel warn
    CustomLog /var/log/apache2/example.com/access.log combined
    ErrorLog /var/log/apache2/example.com/error.log
    ServerSignature On

    Alias /media/ /home/example/example.com/pysrc/project/media/

    ProxyPass /media/ !
    ProxyPass / http://127.0.0.1:4711/ retry=0
    ProxyPassReverse / http://127.0.0.1:4711/
    ProxyPreserveHost On
    ProxyErrorOverride Off
</VirtualHost>
```

### 说明

根据 `mod_proxy` 的文档，`retry` 参数用于设置连接池工作进程的重试超时时间（以秒为单位）。如果连接池工作进程处于错误状态，Apache 将不会将任何请求转发到该后端服务器，直到超时时间到期。这允许您关闭后端服务器进行维护，并在稍后重新上线。将 `retry` 设置为 `0` 表示总是重试处于错误状态的工作进程，没有超时。

通过这种方式，您可以避免因 Gunicorn 重启导致的长时间 503 错误。