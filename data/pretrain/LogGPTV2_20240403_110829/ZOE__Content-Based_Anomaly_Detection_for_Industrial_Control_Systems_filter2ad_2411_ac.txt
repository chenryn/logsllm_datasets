TABLE I
P1
2000
(cid:2)
(cid:2)
P2
2069
(cid:2)
(cid:2)
Generation
P3
4241
(cid:2)
(cid:2)
(cid:2)
P4
2010
(cid:2)
(cid:2)
(cid:2)
P5
2070
(cid:2)
(cid:2)
(cid:2)
Mining
PROFINET IO
P6
((cid:2))
(cid:2)
2,542 MiB
7,032,323 msgs
219 MiB
310,205 msgs
18,506 MiB
13,046,151 msgs
2,506 MiB
16,024,175 packets
1.6 MiB
33,329 packets
1,878 MiB
13,957,589 packets
Protocol
TCP
UDP
Binary
Text
Size
Count
message is explicitly avoided. To a certain extent this takes
away the ﬂexibility of the model but most importantly also
signiﬁcantly raises the bar for an attacker to perform mimicry
attacks (cf. Section V-E).
IV. DATASETS
For evaluating our approach under realistic conditions, we
have partnered with a large European energy producer. In
particular, we have collected roughly 210 GiB of raw network
data during 6 days at a large power plant (total 1,900 MW),
and the operation of a coal mining facility. At the power plant
we have recorded network trafﬁc at the control level of a power
unit producing 500 MW. Our recording period covers a ramp-
up phase as well as normal operation of the unit. From this
we have extracted the ﬁve most prominent protocols, all of
which are proprietary and publically undocumented1. Through
manual analysis we however were able to attribute these to a
large plant manufacturer. In order to provide a comprehensive
study on protocols that occur in industrial networks the data
recording at the coal mining facility targets PROFINET IO at the
ﬁeld level. In total we have recorded communication between
92,700 unique devices in an authentic production environment.
Table I summarizes the gathered data.
Protocols P1–P3 build on TCP while P4 & P5 use UDP
for direct communication. PROFINET IO, on the other hand,
is situated somewhat differently: While TCP/IP is used for
the parameterization and conﬁguration, real-time messages are
exchanged on a separate channel that does not use the Internet
protocol at all. Although PROFINET IO trafﬁc can be easily
parsed and therefore reliably ﬁltered, there are no protocol
parsers publicly available for the remaining trafﬁc from the
power plant. For these protocols we hence resort to ﬁltering
the network trafﬁc based on IP ports, but explicitly consider
relations between communicating entities to sanitize the data.
For TCP trafﬁc we additionally reassemble network streams,
such that we are able to evaluate ZOE based on complete
“messages” (approximated as consecutive, unidirectional trafﬁc)
for P1–P3, datagrams for P4 & P5, and PROFINET IO packets.
All in all, this gives us 46.7 GiB of raw data for our evaluation.
Furthermore, these different protocols show highly diverse
structure. While protocols P1 and P2 seem to exclusively use
1Consequently, publicly available tools such as Wireshark are not capable
of parsing these protocol beyond the TCP/UDP packet structure.
either text-based or binary-based data for their communication,
protocols P3–P5 use a mixture of both. The latter appear to
mainly consist of binary structures that additionally transmit
string-based (printable) data. As these strings exhibit strong
structure that may be interpreted as another protocol on top
of the base protocol we assign these to both sub-groups.
PROFINET IO then again is strictly based on binary data.
Additionally, server and client communication often vary
signiﬁcantly for these protocols. To account for this difference
in composition and structure we thus split the individual
protocol subsets in incoming and outgoing trafﬁc and analyze
these individually in our evaluation. UDP and PROFINET IO
trafﬁc is not effected by this pre-processing step.
A. Attack Datasets
Effective anomaly detection can only succeed with a carefully
chosen parametrization of the detector. This requires benign
trafﬁc for building the content model, but also attack samples to
validate the chosen settings and estimate the expected detection
performance [54]. As recordings of such attacks in industrial
environments and for proprietary protocols in particular are
naturally rare, we have developed a tool for the automatic
generation of network attacks against unknown protocols. This
tool provides us with a total number of 3,899 unique attacks for
each protocol P1–P6, where we limit the payloads to 256 bytes
in size. By restricting the length of the attack strings, we ensure
that these do not outweigh the benign content and hence better
blend in.
In particular, the tool mimics a protocol based on observed
network trafﬁc as close as possible and injects attack strings,
that range from program code (e.g., shellcodes, ROP chains,
PLC instructions), over scripts fragments (e.g., Perl scripts)
to random data, at positions containing variable input. To this
end, we ﬁrst group similar network messages using clustering
and then derive generic rules that describe the structure of the
messages in each cluster (Section IV-A1). Second, we generate
attack strings with different encodings and obfuscations to
populate variable ﬁelds of the derived rules (Section IV-A2).
1) Inferring Protocol Rules: For industrial facilities we
usually do not have the speciﬁcation of the used network
protocols on hand and neither does the operator, as vendors
normally do not share product details. Consequently, we are
required to automatically infer protocol models based on
132
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:26:43 UTC from IEEE Xplore.  Restrictions apply. 
network trafﬁc only [10, 21, 32, 34]. To this end we build
upon work by Krueger et al. [32] and Gascon et al. [21] to
derive rules for individual messages.
In a ﬁrst step, we identify messages that have the same
structures using off-the-shelf k-means clustering. Similarly
to the method described in Section III-A network messages
cannot be directly used at this point, but are embedded into
vector space ﬁrst. We thus again operate on an input set
X = {x1, . . . xN} yield by the feature map φ with a binary
embedding of substrings s ∈ S. However, as inferring protocol
models is much more involved than simply deriving states,
additional statistical tests are applied to ﬁlter relevant from
irrelevant substrings/features and to avoid an overly populated
vector space that might hinder the clustering process. We
hence subdivide the feature space in constant, mutable, and
volatile parts by applying a binomial test to each feature [31].
A value close to 0 indicates volatile features while a frequency
of 1 refers to constant features. Neither volatile nor constant
features are particular valuable for discriminating messages
in a protocol—think of a protocol’s magic values or nonces.
We hence reject all features that do not meet a statistical
signiﬁcance level of α = 0.05 [25] before clustering the inputs.
Subsequently, we derive rules that describe all messages in a
cluster which can then be used to generate new messages that
comply with the format of that cluster. To do so we consider
the original messages in each cluster, rather than the reduced
representation in feature space and pair-wise align these using
an extended version of the Needleman-Wunsch algorithm [40].
The resulting rules consist of ﬁxed bytes that appear at the same
position in each message of the cluster and variable ﬁelds that
may contain different byte sequences from message to message.
Table II shows an example for a set of simple messages found
in our datasets.
RULE INFERENCE FOR A SET OF SIMPLE MESSAGES.
TABLE II
Message 1
Message 2
...
Message n
Rule
\x00\x1a GetVal "N2HAJ22CT000 XH24"\xff
\x00\x1a GetVal "N2HAJ22DT500 XR01"\x00
...
\x00\x1a GetVal "N2HAJ31AA100 XB02"\xff
\x00\x1a GetVal "N2HAJ
00 X
"
It is clear to see that our approach is not capable of learning
the exact protocol speciﬁcation but approximates it based on
the network trafﬁc on hand. The depicted cluster contains
messages that apparently transmit a command string GetVal to
retrieve sensor values from a particular device. Furthermore, it
contains the length of the transmitted string as 2 byte integer
in the front and another unspeciﬁed ﬂag (presumably a high
and low value) at the end. Within this cluster only individual
parts of the device identiﬁer and the binary ﬂag at the end
change such that the remaining parts are considered constant
by the algorithm. For populating a valid network message with
attack payloads this however is sufﬁcient.
133
2) Generation of Attack Messages: With the inferred rules
as detailed descriptions of protocol messages at our disposal
we can now produce authentic network trafﬁc that contains
arbitrary attack payloads. For a wide range of different
attacks we query Metasploit for payloads and encoders—simple
obfuscations that, for instance, encrypt scripts with a simple
xor operation, or map program code to printable characters.
To generate attack messages we proceed as follows: For each
attack string we randomly choose an existing network message.
The corresponding rule then allows us to replace variable
ﬁelds within this message at will. For our experiments we
choose exactly one at random and inject the attack payload.
The remaining (constant and variable) ﬁelds remain unchanged.
Figure 3 depicts this simple scheme.
Attack Payload
\x03\x00\x00\x16\x11\xe0...\xc0\x01\x0a
Generated Message
\x00\x1a GetVal "N2HAJ 31AA1 00 X ...
" \xff
Encoder/ Obfuscation
Fig. 3. Schematic depiction of the generation of network attacks.
V. EVALUATION
We empirically evaluate ZOE based on the six industrial
protocols described in the previous section and conduct a
number of experiments that examine the different aspects of
our method: First, we demonstrate the overall detection perfor-
mance of our method as proposed in the paper (Section V-A).
Second, the inﬂuence of ZOE’s de-noising capabilities as
well as the impact of message-speciﬁc prototype models is
studied (Section V-B & V-C). Third, we compare our method
with related approaches (Section V-D) before, as a ﬁnal
experiment, we investigate the feasibility of evasion attacks
in the form of polymorphic blending attacks against ZOE
(Section V-E).
In the course of this evaluation we describe detection per-
formances with the aid of the receiver operator characteristics
(ROC) and corresponding ROC curves. These curves plot the
true-positive rate over the false-positive rate of a detector for
different thresholds [6, 16]. Additionally, we use the area under
the ROC curve (AUC) as a single continuous measure for the
detection performance that yields a minimal and maximal value
of 0.0 and 1.0, respectively.
Figure 4 illustrates a ROC curve that shows the full scale
of false-positives in the interval [0.0, 1.0] on the x-axis or
0 % to 100 %. The AUC can hence be interpreted as a measure
of how steep the curve increase towards higher true-positive
rates. As measuring the AUC for the full range often is of
little expressiveness (performances for low false-positives are
poorly represented) we use the bounded AUC. That is the area
under the ROC curve up to a threshold b of false-positives
and normalized to that value: AUC(b). For the ﬁeld of attack
detection it is particular important to push forward detection
with few false-positives.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:26:43 UTC from IEEE Xplore.  Restrictions apply. 
B. De-noising Content Models
Next, we evaluate the impact of different thresholds t used
with ZOE to demonstrate its de-noising capabilities. We hence
parametrize ZOE(1, t) with thresholds t ∈ [20, 100] with a
granularity of 5. Figure 6 shows the results for protocol P3. At
a threshold t = 35 the detector reaches its peak performance
with an AUC(0.0001) of 0.8 (light gray line) and a true-positive
rate of 0.978, meaning that 97.8 % of the attack patterns are
detected with at most 1 false positive out of 10,000 network
messages. In comparison to no de-noising (t = 0) we record an
tremendous improvement that clearly shows that pre-ﬁltering
the features used for detection is of the essence for effective
attack detection in binary protocols.
Fig. 6. Detection performance of ZOE(1, t) for varying thresholds t. The
dashed line indicates the threshold yielding the highest detection performance
(t = 35).
Moreover, it is interesting to see that the detection per-
thresholds of 20 to 25, peaks at
formance shoots up at
t = 35 and ﬂattens out towards higher values. This underlines
the importance of a thorough evaluation with the aid of a
comprehensive set of attack samples.
C. Message-speciﬁc Prototype Models