library code and rewrite interactions accordingly. Nevertheless, we
can combine virtualization techniques either directly with ARTist,
as suggested in the paper [11], or with one of the alternative ap-
proaches mentioned above, i.e., application rewriting frameworks.
By using systems such as Boxify [10] or NJAS [15], we can therefore
avoid the requirement for elevated privileges.
6.3.2
System-centric Deployment Strategy. Consider the use case
of a custom ROM that ships a modified Android operating system.
From the perspective of a ROM developer, application layer-only
focus and preserving app signatures are of no concern anymore
since CompARTist can be fully embedded into the firmware itself.
Replacing Android’s default dex2oat compiler with an ARTist ver-
sion that runs our CompARTist Module already suffices because
each application is automatically retrofitted to use the remote ver-
sion of its advertisement libraries. This alternative deployment path
might be beneficial for, e.g., security-focused ROMs employing a
hardened version of Android.
6.4 Limitations
We discuss those limitations inherent to our approach, as well as
those of our prototypical implementation.
6.4.1 Approach Limitations. As a result of design decisions dur-
ing the creation of our system, we have to deal with some limitations
that are inherent to our approach. While we created CompART-
ist with the idea in mind that we could compartmentalize arbitrary
Android libraries, it might be infeasible to apply our approach
to more strongly-coupled and deeply-integrated libraries such as,
e.g., Guava [8]. In contrast to advertisement libraries that have
a well-defined interface to the app and only communicate rarely,
reconnecting a deeply-integrated library through IPC might re-
quire proxying a large number of classes, consequently raising the
performance overhead significantly and possibly impairing user
experience. While this paper presents a new and robust approach
to sandbox libraries in general, it is more suited towards isolating
loosely-coupled components, such as advertisement code.
6.4.2
Implementation Limitations. Beside limitations in our pro-
totypical implementations, CompARTist also inherits implementa-
tion shortcomings of the ARTist system that is utilizes.
Session E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1047ARTist. Even though dex2oat is available since Android 5 Lol-
lipop, ARTist utilizes the Android 6 version of the Optimizing
backend, hence only later versions (currently Marshmallow and
Nougat) can be supported. In particular, CompARTist is built on top
of the Android 7 version of ARTist. A further downside resulting
from utilizing ARTist is the requirement for root or in general ele-
vated privileges. However, as discussed above, depending on the
use case there are alternative deployment strategies with relaxed
requirements available.
CompARTist. One shortcoming of CompARTist itself is that it
works with a whitelist of supported advertisement libraries, hence
it cannot support new libraries out of the box. Even though our
current design allows for the fast creation of the required remote
advertisement library package, it still requires an expert to explicitly
add support for additional libraries. While the advertisement market
is not strongly fragmented at the time of this writing, new libraries
might pop up in the future and the above mentioned extra effort
can be done and shared by, e.g., the community. Another missing
feature is the support for multidex files, as already hinted at in the
evaluation section. Without proper support for apps with multiple
dex files, larger applications cannot be recompiled with our current
prototype.
6.5 Future Work
We outline possible improvements to our existing prototype and
indicate future research directions.
6.5.1
Improvements. We list some possible improvements to
CompARTist as well as for the evaluation pipeline.
Obfuscation Support. In order to replace existing intra-app ad
library calls with calls to AdHelper, our ARTist Module scans the tar-
get application’s code for the invocation of library methods. While
obfuscation hides the real method name (that could be obtained
from the library documentation), the structural information, such
as inheritance and package structures, are still available. Hence,
the robustness of our library call detection can be improved by
incorporating techniques such as those suggested in [9].
UI Testing Automation. While our evaluation infrastructure takes
measures to avoid a lot of common pitfalls in automated on-device
testing, one of its weaknesses is Android’s own monkey tool that
is utilized to exercise the UI of applications. Even though monkey
is sufficient to show the feasibility of our approach, the fact that
touch events break out of the boundary of the application under test
can result in undesired or even undefined behavior8. For example,
we observed the interruption of our experiments triggered by the
monkey disabling the usb debugging option in the developer setting
or even going as far as factory-resetting the testing device. Those
incidents clearly show that in order to provide a reliable test infras-
tructure, a superior UI exerciser tool is required. Possible candidates
for replacing monkey could be DroidMate [23] or Brahmastra [14].
Library Detection. LibScout [9] has shown the problem of iden-
tifying libraries inside their host applications to be solvable with
high probability. While we currently assume the advertisement
8In theory the monkey should be able to restrict touch events to activities of the app
under test. However, this feature seems to be flawed.
library in the host application to be known beforehand, extending
CompARTist with such a library detection would greatly improve
its usability.
Callee-side Rewriting. The current implementation of CompART-
ist scans for invocations of advertisement library APIs and replaces
them with Proxy methods from our support library. However, caller-
side rewriting of method calls misses invocations triggered by re-
flection or from native code. Shifting our approach to callee-side
rewriting, i.e., rewriting the call sites of APIs by replacing their
logic with a redirection to our proxies, is a promising approach to
solve this problem.
6.5.2 Research Prospects. We do not only consider CompART-
ist to be a standalone tool but also a foundation for further inter-
esting research projects.
Library Hotpatching. The predominance of well-established ad-
vertisement networks, such as Google Play Service Ads, results
in lots of code duplication among applications since many ship
the same statically-linked advertisement library. At the same time,
updating the advertisement library is left as a task to the developers
that, as related work has shown [9], are statistically speaking likely
to delay those updates or in extreme cases omit them altogether.
By utilizing CompARTist, it is possible to enforce dynamic linking
of advertisement libraries by having exactly one adapted instance
of each library (version) running in a dedicated application con-
text and replacing statically-packaged libraries with references to
the remote one. While we show in this paper that CompARTist is
already capable of applying this transformation, a system-centric
repository of advertisement libraries needs to be created and main-
tained. Such a system allows for centralized, system-wide updates
of advertisement libraries that are completely transparent to the
app developer, effectively taking them out of the loop. While library
updates are not always backwards compatible, this system can be
utilized to apply, e.g., security patches that do not change the public
API.
Beyond Advertisements. We already discussed that compartmen-
talization of advertisement libraries is possible since they only use a
well-defined set of techniques to integrate into host apps, which is
not true for deeply wired libraries like Guava. However, there might
be other types of libraries in-between that could be susceptible to
our approach, including all the above mentioned opportunities such
as the possibility for system-centric updates and the compartmen-
talization of untrusted code.
7 CONCLUSION
This work introduces CompARTist, a compiler-based library com-
partmentalization solution to remedy the unsatisfactory situation
of privacy and security threats induced by advertisement libraries.
Our solution splits the original app into host and advertisement
library components and moves the library to a dedicated app to
create a strong security barrier. We apply inter-process communi-
cation and lifecycle synchronization to seamlessly reintegrate both
components without impairing user experience. Our evaluation
proves the robustness of our approach by successfully applying our
transformation routines to 3257 apps from Google Play Store. In
Session E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1048conclusion, we introduce a new approach to library compartmen-
talization that abstains from system or app modifications.
ACKNOWLEDGMENT
This work was supported by the German Federal Ministry of Educa-
tion and Research (BMBF) via funding for the Center for IT-Security,
Privacy and Accountability (CISPA) (FKZ: 16KIS0345, 16KIS0656).
REFERENCES
[1] 2016. UI/Application Exerciser Monkey. https://developer.android.com/studio/
test/monkey.html. (2016). Accessed: 2017-08-28.
[2] 2017. AdAway. https://adaway.org/. (2017). Accessed: 2017-08-28.
[3] 2017. AdblockBrowser. https://adblockbrowser.org/. (2017). Accessed: 2017-08-28.
[4] 2017. AdblockPlus. https://adblockplus.org/. (2017). Accessed: 2017-08-28.
[5] 2017. AdGuard. https://adguard.com/en/welcome.html. (2017). Accessed: 2017-
08-28.
[6] 2017. Google Play Services: Interstitials.
https://developers.google.com/
mobile-ads-sdk/docs/dfp/android/interstitial. (2017). Accessed: 2017-08-28.
[7] 2017. Google Play Services: Setup. https://developers.google.com/android/guides/
setup. (2017). Accessed: 2017-08-28.
[8] 2017. Guava. https://github.com/google/guava. (2017). Accessed: 2017-08-28.
[9] Michael Backes, Sven Bugiel, and Erik Derr. 2016. Reliable third-party library
[12] Michael Backes, Sven Bugiel, Philipp von Styp-Rekowsky, and Marvin Wißfeld.
detection in Android and its security applications. In CCS’16. ACM, 356–367.
[10] Michael Backes, Sven Bugiel, Christian Hammer, Oliver Schranz, and Philipp von
Styp-Rekowsky. 2015. Boxify: Full-fledged App Sandboxing for Stock Android.
In USENIX Security’15. 691–706.
[11] Michael Backes, Sven Bugiel, Oliver Schranz, Philipp von Styp-Rekowsky, and
Sebastian Weisgerber. 2017. ARTist: The Android runtime instrumentation and
security toolkit. In EuroS&P’17. IEEE, 481–495.
2017. Seamless In-App Ad Blocking on Stock Android. In MoST’17. IEEE.
[13] Michael Backes, Sebastian Gerling, Christian Hammer, Matteo Maffei, and Philipp
von Styp-Rekowsky. 2013. Appguard–enforcing user requirements on android
apps. In TACAS’13. Springer, 543–548.
[14] Ravi Bhoraskar, Seungyeop Han, Jinseong Jeon, Tanzirul Azim, Shuo Chen,
Jaeyeon Jung, Suman Nath, Rui Wang, and David Wetherall. 2014. Brahmas-
tra: Driving Apps to Test the Security of Third-Party Components. In USENIX
Security’14. 1021–1036.
[15] Antonio Bianchi, Yanick Fratantonio, Christopher Kruegel, and Giovanni Vigna.
2015. NJAS: Sandboxing unmodified applications in non-rooted devices running
stock android. In SPSM’15. ACM, 27–38.
[16] Drew Davidson, Yaohui Chen, Franklin George, Long Lu, and Somesh Jha. 2017.
Secure Integration of Web Content and Applications on Commodity Mobile
Operating Systems. In ASIACCS’17. ACM, 652–665.
In MobiSys’13. ACM, 181–192.
[18] Benjamin Davis, Ben Sanders, Armen Khodaverdian, and Hao Chen. 2012. I-
arm-droid: A rewriting framework for in-app reference monitors for android
applications. MoST’12 2012, 2 (2012), 17.
[19] Soteris Demetriou, Whitney Merrill, Wei Yang, Aston Zhang, and Carl A Gunter.
2016. Free for all! assessing user data exposure to advertising libraries on android.
NDSS’16 (2016).
cessed: 2017-08-28.
[20] Erik Derr. 2017. https://projects.cispa.uni-saarland.de/derr/libscout. (2017). Ac-
[17] Benjamin Davis and Hao Chen. 2013. RetroSkeleton: retrofitting android apps.
[21] Úlfar Erlingsson. 2003. The inlined reference monitor approach to security policy
enforcement. Technical Report. Cornell University.
[22] Michael C. Grace, Wu Zhou, Xuxian Jiang, and Ahmad-Reza Sadeghi. 2012. Unsafe
Exposure Analysis of Mobile In-app Advertisements. In WISEC’12. ACM, 101–
112.
[23] Konrad Jamrozik and Andreas Zeller. 2016. DroidMate: a robust and extensible
[26] Wei Meng, Ren Ding, Simon P Chung, Steven Han, and Wenke Lee. 2016. The
[25] Bin Liu, Bin Liu, Hongxia Jin, and Ramesh Govindan. 2015. Efficient privilege
test generator for Android. In MOBILESoft’16. IEEE, 293–294.
[24] Jinseong Jeon, Kristopher K Micinski, Jeffrey A Vaughan, Ari Fogel, Nikhilesh
Reddy, Jeffrey S Foster, and Todd Millstein. 2012. Dr. Android and Mr. Hide:
fine-grained permissions in android applications. In SPSM’12. ACM, 3–14.
de-escalation for ad libraries in mobile apps. In MobiSys’15. ACM, 89–103.
price of free: Privacy leakage in personalized mobile in-app ads. NDSS’16.
[27] Paul Pearce, Adrienne Porter Felt, Gabriel Nunez, and David Wagner. 2012. Ad-
droid: Privilege separation for applications and advertisers in android. In ASI-
ACCS’12. ACM, 71–72.
[28] Sebastian Poeplau, Yanick Fratantonio, Antonio Bianchi, Christopher Kruegel,
and Giovanni Vigna. 2014. Execute This! Analyzing Unsafe and Malicious Dy-
namic Code Loading in Android Applications. In NDSS’14, Vol. 14. 23–26.
[29] Siegfried Rasthofer, Steven Arzt, Enrico Lovat, and Eric Bodden. 2014. Droidforce:
Enforcing complex, data-centric, system-wide policies in android. In ARES’14.
IEEE, 40–49.
[30] Thorsten Schreiber. 2011. Android binder. http://www.nds.rub.de/media/
attachments/files/2012/03/binder.pdf. (2011).
[31] Jaebaek Seo, Daehyeok Kim, Donghyun Cho, Taesoo Kim, and Insik Shin. 2016.
[33] Stephen Smalley and Robert Craig. 2013. Security Enhanced (SE) Android: Bring-
[35] Ryan Stevens, Clint Gibler, Jon Crussell, Jeremy Erickson, and Hao Chen. 2012.
[34] Sooel Son, Daehyeok Kim, and Vitaly Shmatikov. 2016. What mobile ads know
[36] Mengtao Sun and Gang Tan. 2014. Nativeguard: Protecting android applications
[32] Shashi Shekhar, Michael Dietz, and Dan S Wallach. 2012. AdSplit: Separating
FlexDroid: Enforcing in-app privilege separation in android. In NDSS’16.
Smartphone Advertising from Applications. In USENIX Security’12, Vol. 2012.
ing Flexible MAC to Android. In NDSS’13, Vol. 310. 20–38.
about mobile users. In NDSS’16.
Investigating user privacy in android ad libraries. In MoST’12, Vol. 10.
from third-party native libraries. In WiSec’14. ACM, 165–176.
enforcement for android applications. In USENIX Security’12, Vol. 2012.
[38] Wenbo Yang, Juanru Li, Yuanyuan Zhang, Yong Li, Junliang Shu, and Dawu
Gu. 2014. APKLancet: tumor payload diagnosis and purification for android
applications. In ASIACCS’14. ACM, 483–494.
ments from mobile applications in android. In ACSAC’13. ACM, 9–18.
[40] Yajin Zhou, Kunal Patel, Lei Wu, Zhi Wang, and Xuxian Jiang. 2015. Hybrid
user-level sandboxing of third-party android apps. In ASIACCS’15. ACM, 19–30.
[37] Rubin Xu, Hassen Saïdi, and Ross J Anderson. 2012. Aurasium: practical policy
[39] Xiao Zhang, Amit Ahlawat, and Wenliang Du. 2013. Aframe: Isolating advertise-
APPENDIX
A APIS OF OUR COMMUNICATION
CHANNEL
Listings of our communication channel API, noted in AIDL.
Listing 1: Callback API
String method );
1 void invokeListenerCallbackHelper ( int objectId ,
2 void invokeListenerCallbackHelper_1 ( int objectId ,
3 void invokeListenerCallbackHelper_2 ( int objectId ,
String method , in WrapClass param );
String method , in WrapClass param_1 , in
WrapClass param_2 );
4 void invokeListenerCallbackHelper_3 ( int objectId ,
String method , in WrapClass param_1 , in
WrapClass param_2 , in WrapClass param_3 );
5 void invokeListenerCallbackHelper_4 ( int objectId ,
String method , in WrapClass param_1 , in
WrapClass param_2 , in WrapClass param_3 , in
WrapClass param_4 );
Listing 2: Advertisement Invocation API
field );
1 WrapClass getStaticFieldService ( String ctype , String
2 WrapClass invokeStaticMethodService_2 ( String ctype ,
3 WrapClass invokeStaticMethodService ( String ctype ,
4 WrapClass invokeVirtualMethodService_2 ( String ctype ,
String method , in WrapClass [] params );
String method );
String method , in WrapClass object , in
WrapClass [] params );
String method , in WrapClass object );
5 WrapClass invokeVirtualMethodService ( String ctype ,
6 WrapClass newInstanceService_2 ( String ctype , in
7 WrapClass newInstanceService ( String ctype );
WrapClass [] params );
Listing 3: Lifecycle API
1 void removeWindow ( int viewId , boolean destroy );
2 void createWindow ( int viewId , in Rect rect );
3 void updateWindow ( int viewId , in Rect rect );
Session E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1049