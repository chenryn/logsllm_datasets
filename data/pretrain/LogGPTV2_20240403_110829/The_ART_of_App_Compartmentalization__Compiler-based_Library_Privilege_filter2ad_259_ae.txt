### 6.3.2 System-centric Deployment Strategy

Consider the use case of a custom ROM that ships with a modified Android operating system. From the perspective of a ROM developer, concerns such as application-layer focus and preserving app signatures are no longer relevant, as CompARTist can be fully integrated into the firmware. Replacing Android’s default `dex2oat` compiler with an ARTist version that includes our CompARTist module is sufficient. This ensures that each application automatically uses the remote version of its advertisement libraries. This alternative deployment strategy may be particularly beneficial for security-focused ROMs that employ a hardened version of Android.

### 6.4 Limitations

We discuss the limitations inherent to our approach, as well as those specific to our prototypical implementation.

#### 6.4.1 Approach Limitations

Our system design includes some inherent limitations. While CompARTist was created with the intention of compartmentalizing arbitrary Android libraries, it may be infeasible to apply this approach to more tightly-coupled and deeply-integrated libraries, such as Guava [8]. Unlike advertisement libraries, which have a well-defined interface and communicate infrequently with the app, reconnecting a deeply-integrated library through IPC might require proxying a large number of classes, leading to significant performance overhead and potentially degrading user experience. Although this paper presents a robust new approach to sandboxing libraries, it is more suitable for isolating loosely-coupled components, such as advertisement code.

#### 6.4.2 Implementation Limitations

In addition to the limitations of our prototypical implementation, CompARTist also inherits the implementation shortcomings of the ARTist system it utilizes.

- **ARTist**: Even though `dex2oat` has been available since Android 5 Lollipop, ARTist uses the Android 6 (Marshmallow) version of the Optimizing backend. Therefore, only later versions (currently Marshmallow and Nougat) are supported. Specifically, CompARTist is built on top of the Android 7 (Nougat) version of ARTist. Another downside is the requirement for root or elevated privileges. However, as discussed above, there are alternative deployment strategies that can relax these requirements depending on the use case.
  
- **CompARTist**: One limitation of CompARTist is that it works with a whitelist of supported advertisement libraries, meaning it cannot support new libraries out of the box. While our current design allows for the rapid creation of the required remote advertisement library package, it still requires an expert to explicitly add support for additional libraries. Although the advertisement market is not highly fragmented at present, new libraries may emerge in the future, and the community can share the effort of adding support. Another missing feature is the support for multidex files, as mentioned in the evaluation section. Without proper support for apps with multiple dex files, larger applications cannot be recompiled with our current prototype.

### 6.5 Future Work

We outline possible improvements to our existing prototype and indicate future research directions.

#### 6.5.1 Improvements

We list some potential enhancements to CompARTist and the evaluation pipeline.

- **Obfuscation Support**: To replace existing intra-app ad library calls with calls to AdHelper, our ARTist Module scans the target application’s code for the invocation of library methods. While obfuscation hides the real method names, structural information such as inheritance and package structures remains available. The robustness of our library call detection can be improved by incorporating techniques such as those suggested in [9].

- **UI Testing Automation**: Our evaluation infrastructure takes measures to avoid common pitfalls in automated on-device testing, but one of its weaknesses is the use of Android’s own monkey tool to exercise the UI of applications. Although monkey is sufficient to demonstrate the feasibility of our approach, it can result in undesired or undefined behavior, such as disabling USB debugging or factory-resetting the testing device. To provide a reliable test infrastructure, a superior UI exerciser tool is required. Possible candidates include DroidMate [23] or Brahmastra [14].

- **Library Detection**: LibScout [9] has shown that identifying libraries within host applications is solvable with high probability. While we currently assume the advertisement library in the host application is known beforehand, extending CompARTist with such a library detection feature would greatly improve its usability.

- **Callee-side Rewriting**: The current implementation of CompARTist scans for invocations of advertisement library APIs and replaces them with Proxy methods from our support library. However, caller-side rewriting of method calls misses invocations triggered by reflection or from native code. Shifting our approach to callee-side rewriting, i.e., rewriting the call sites of APIs by replacing their logic with a redirection to our proxies, is a promising solution to this problem.

#### 6.5.2 Research Prospects

We consider CompARTist not only as a standalone tool but also as a foundation for further interesting research projects.

- **Library Hotpatching**: The prevalence of well-established advertisement networks, such as Google Play Service Ads, results in code duplication among applications, as many ship the same statically-linked advertisement library. Updating the advertisement library is left to developers, who, as related work has shown [9], often delay or omit these updates. By using CompARTist, dynamic linking of advertisement libraries can be enforced, with exactly one adapted instance of each library (version) running in a dedicated application context. This allows for centralized, system-wide updates of advertisement libraries that are transparent to the app developer. While library updates are not always backward-compatible, this system can be used to apply, for example, security patches that do not change the public API.

- **Beyond Advertisements**: We have discussed that compartmentalization of advertisement libraries is feasible because they use a well-defined set of techniques to integrate into host apps. This is not true for deeply integrated libraries like Guava. However, there may be other types of libraries that could benefit from our approach, including the opportunities for system-centric updates and the compartmentalization of untrusted code.

### 7 Conclusion

This work introduces CompARTist, a compiler-based library compartmentalization solution to address the privacy and security threats posed by advertisement libraries. Our solution splits the original app into host and advertisement library components, moving the library to a dedicated app to create a strong security barrier. We use inter-process communication and lifecycle synchronization to seamlessly reintegrate both components without impairing user experience. Our evaluation demonstrates the robustness of our approach by successfully applying our transformation routines to 3257 apps from the Google Play Store. In conclusion, we introduce a new approach to library compartmentalization that does not require system or app modifications.

### Acknowledgment

This work was supported by the German Federal Ministry of Education and Research (BMBF) via funding for the Center for IT-Security, Privacy and Accountability (CISPA) (FKZ: 16KIS0345, 16KIS0656).

### References

[References listed as provided, with no changes needed.]

### Appendix

#### A. APIs of Our Communication Channel

Listings of our communication channel API, noted in AIDL.

**Listing 1: Callback API**

```java
1 void invokeListenerCallbackHelper(int objectId, String method);
2 void invokeListenerCallbackHelper_1(int objectId, String method, WrapClass param);
3 void invokeListenerCallbackHelper_2(int objectId, String method, WrapClass param_1, WrapClass param_2);
4 void invokeListenerCallbackHelper_3(int objectId, String method, WrapClass param_1, WrapClass param_2, WrapClass param_3);
5 void invokeListenerCallbackHelper_4(int objectId, String method, WrapClass param_1, WrapClass param_2, WrapClass param_3, WrapClass param_4);
```

**Listing 2: Advertisement Invocation API**

```java
1 WrapClass getStaticFieldService(String ctype, String field);
2 WrapClass invokeStaticMethodService_2(String ctype, String method, WrapClass[] params);
3 WrapClass invokeStaticMethodService(String ctype, String method);
4 WrapClass invokeVirtualMethodService_2(String ctype, String method, WrapClass object, WrapClass[] params);
5 WrapClass invokeVirtualMethodService(String ctype, String method, WrapClass object);
6 WrapClass newInstanceService_2(String ctype, WrapClass[] params);
7 WrapClass newInstanceService(String ctype);
```

**Listing 3: Lifecycle API**

```java
1 void removeWindow(int viewId, boolean destroy);
2 void createWindow(int viewId, Rect rect);
3 void updateWindow(int viewId, Rect rect);
```

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.