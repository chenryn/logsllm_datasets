the seed value h0 for her nymbles with a one-way function
F (x0, SP). She iteratively applies a second one-way function
f to h0 a total of Tcur times to compute the ﬁrst nymble seed
in her chain. From here (assuming the nymble format has the
ZK-pseudonym property), U computes each of her nymbles
according to the established protocols and issues ZKPs to
prove that she has done so.
B. Performance measurements
We implemented key components of the distributed (t, s)-
threshold Verinym Issuer construction in order to obtain per-
formance measurements. Our implementations were written
in C++ using NTL to handle multiprecision arithmetic. The
performance measurements were obtained on a 2.83 GHz
Intel Core 2 Quad Q9550 running Ubuntu 9.10 64-bit. All
code is single-threaded and all experiments used a single
core.
Table I summarizes performance measurements for U and
the VIs in the Verinym Acquisition Protocol. The protocol
was executed on a single machine using a (3, 7)-threshold
construction with η = 17 and each trial used a new
pseudorandomly generated 12-bit e with hamming weight
3. Thus, the performance measurements contained herein
represent the combined computational expense for all three
VIs (indeed, these could easily be run in parallel) and do
not account for the expected latency due to communication
between U and the VIs (no inter-VI communication is
required). Note, however, that such communication costs
will be low; in particular, each VI sends just four values
to U (the verinym share Xij , the veriﬁcation values cij and
gij , and the expiration VVP Kij ). Both Xij and gij are about
the same size as n, while cij and Kij are (much) smaller.
Our implementation uses a value of κ1 = 30 for the security
parameter (as recommended by Fouque and Stern [14]). For
each bit length of n, we repeated the experiment 100 times
and report here the mean execution time (± the standard
deviation) in milliseconds.
Table II summarizes performance measurements for U
and the NI in the Verinym Showing Protocol. For each of
the 100 experiments of the Verinym Acquisition Protocol,
we used the resulting verinym to perform a trial of this
experiment. Thus, each measurement also used η = 17,
a pseudorandomly generated 12-bit e value with hamming
h0 = F (x0, SP)
K0
K∗
∗
x0 = xη
K
∗ = xη
Kexp−K∗
Kexp
xK
verinym valid
(cid:4)
K
Kcur
Tcur
J
(cid:22)(cid:23)
(cid:24)
(cid:21)
nymble requested
T
∗
K
∗
Kexp
Kmax
hcur = f Tcur(h0)
Figure 3. Verinym showing procedure: This ﬁgure outlines our threshold verinym construction. The upper timeline displays VVPs
(cid:2) through Kexp). The
while the lower displays time periods. The light grey bar is the range of VVPs for which the verinym is valid (K
∗). U proceeds as follows: she ﬁrst computes
dark grey bar is the range of time periods for which U is requesting nymbles (Tcur through T
xK∗ by raising xKexp to the power ηKexp−K∗
. Next, U computes x0 from xK∗ (together with a proof of correct computation) by raising
xK∗ to the power ηK∗
; this convinces the NI that U’s verinym is valid for the required VVP. The seed value for nymble construction is
then computed via F (x0, SP), and the one-way function f is applied iteratively (Tcur times) to obtain the seed for time period Tcur. (The
functions F and f are part of the underlying scheme.)
528
PERFORMANCE MEASUREMENTS FOR U AND THE VI IN THE VERINYM ACQUISITION PROTOCOL.
Table I
Operation
Issue
verinym
Host
VI
Obtain
verinym
U
Bit length
of modulus
1024
1280
1536
1792
2048
1024
1280
1536
1792
2048
Mean execution time ±
standard deviation (ms)
8.3 ms ± 0.34 ms
14.3 ms ± 0.35 ms
23.3 ms ± 0.43 ms
35.3 ms ± 0.53 ms
56.1 ms ± 0.60 ms
19.5 ms ± 0.42 ms
33.0 ms ± 0.64 ms
53.4 ms ± 0.56 ms
79.7 ms ± 0.89 ms
118.0 ms ± 1.58 ms
)
s
m
(
e
m
T
=
i
t
120
90
60
30
0
1024
Verinym Acquisition Protocol
t = 6×10-5b2 - 0.0902b + 48.923 ms
R² = 0.9994
t = 4×10-5b2 - 0.0628b + 36.046 ms
R² = 0.9973
Obtain 
(U)
Issue 
(VIs)
Issue 
(per VI)
t = 1×10-5b2 - 0.0209b + 12.015 ms
R² = 0.9973
1280
1536
1792
2048
b = Bit length of public modulus
Computed using pseudorandomly chosen 12-bit e values with hamming weight 3, η = 17 and 12 VVPs in a (3, 7)-threshold scheme. Issuing times
represent combined computational expense for all three VIs. Each experiment was repeated 100 times; the mean execution time (± the standard deviation)
across all trials is reported here. Error bars are displayed but are so small as to be only barely visible.
PERFORMANCE MEASUREMENTS FOR U AND THE NI IN THE VERINYM SHOWING PROTOCOL.
Table II
Operation
Show
verinym
Host
U
Validate
verinym
NI
Bit length
of modulus
1024
1280
1536
1792
2048
1024
1280
1536
1792
2048
Mean execution time ±
standard deviation (ms)
295.4 ms ± 25.91 ms
495.7 ms ± 27.80 ms
780.7 ms ± 24.28 ms
1184.2 ms ± 28.68 ms
1901.2 ms ± 28.97 ms
196.6 ms ± 11.48 ms
338.2 ms ± 12.09 ms
546.4 ms ± 12.27 ms
831.5 ms ± 19.71 ms
1338.2 ms ± 15.33 ms
)
s
m
(
e
m
T
=
i
t
Verinym Showing Protocol
t = 0.0013b2 - 2.3327b + 1388.4 ms
R² = 0.9965
Show 
(U)
Verify 
(NI)
t = 0.0009b2 - 1.6178b + 944.38 ms
R² = 0.9968
2200
2000
1800
1600
1400
1200
1000
800
600
400
200
1024
1280
1536
1792
2048
b = Bit length of public modulus
Computed using pseudorandomly chosen 12-bit e values with hamming weight 3, η = 17 and 12 VVPs. Each trial shows the verinym with a random
VVP between 1 and 12 (inclusive) as the expiration time. Each experiment was repeated 100 times; the mean execution time (± the standard deviation)
across all trials is reported here. Error bars are displayed but are so small as to be only barely visible.
weight 3, and at most 12 VVPs. For each trial, the client
chose a random VVP j between 1 and 12 (inclusive) to use
in the showing protocol.
Distributed key generation in our implementation has been
simulated using the dealer-based version of the protocol
from [9, §3]; we therefore omit timing measurements for
this portion of the protocol. We reiterate that distributed key
generation only needs to occur once (or, at the very worst,
infrequently), during the initial setup of the protocol. Thus,
performance measurements associated with this portion of
the protocol are not critical to the system’s overall perfor-
mance.
C. Improving efﬁciency
The exponentiation proofs (i.e., the fourth and ﬁfth lines
∗ such that
of ΠxK∗ , in which U proves that she knows xK
K∗
(xη
∗ )e = Y ) dominate the cost of the Verinym Showing
K
Protocol. Our implementation uses the naive square-and-
multiply algorithm for this proof. It outputs commitments to,
and a ZKP of correct multiplication for, each intermediate
result in the computation. Of course, a more sophisticated
algorithm might be able to reduce the number of steps in
the exponentiation. Alternatively, because a small number of
exponents are reused a large number of times, the VI or the
NI could compute (and publish) short addition chains for
each exponent. Batch ZKPs of correct multiplication would
likely further reduce the cost. (This works just like the batch
proof of knowledge of discrete logarithms with common
exponent from [1], [27].)
j
The strategy that our implementation uses is to ﬁx η = 17
and to choose each public exponent e with a short bit
length and low hamming weight.5 We then compute xe·η
i for 0 < i ≤ j,
in j + 1 stages: U computes xi−1 = xη
th power. This reduces the number
then raises x0 to the e
of multiplication steps in square-and-multiply to just j + 2.
(e is computed with two multiplies, and each power of
η uses one additional multiply, as the high-order bit does
not require a multiply.) The number of squaring steps is
j·(cid:11)lg η(cid:12)+(cid:11)lg e(cid:12). Our measurements indicate that computing
xe·η
in j + 1 stages reduces the cost of the Verinym
j
Showing Protocol by a factor of about two over a naive
j
j
5Of course, e must still satisfy gcd(e, ϕ(n)) = gcd(e, s!) = 1 and so
cannot be chosen to be arbitrarily small.
529
computation. We also sacriﬁce the unconditional hiding of
Pedersen commitments to further halve the cost of the
exponentiation proof for U (and reduce it by about one third
for the VI). The exponentiation algorithm therefore uses
discrete logarithm commitments [13] instead of Pedersen
commitments, to reduce the cost. To maintain unlinkability,
U chooses a random group element b modulo N, computes
B = b4 mod N, and sends (b, Bxj ) along with proof that xj
is the same value previously committed to. The remainder
of the algorithm then runs as usual.
Where Pedersen commitments are used, the NI’s cost may
be reduced by having δ = logαn (βn) mod N known to the
NI but kept secret from U. Then, multi-exponentiations of
n can be reduced to single exponentiations of
the form αx
nβγ
the form αx+δγ
n
by the NI.
III. LONG-TERM REVOCATION
Blacklisting U is intended to be preventative, not retribu-
tive; thus, the duration of the block should somehow reﬂect
the probability that, and cost to the SP if, the offensive
behaviour is repeated [36]. SPs typically forgive disruptive
behaviour after a brief time (say, around 24 hours); this is
usually sufﬁcient to put an end to edit wars on Wikipedia or
ﬂame wars on IRC, for example. Less frequently, U’s misbe-
haviour warrants a long-term revocation; we call revocation
that spans two or more linkability windows inter-window
revocation. Our method of providing this feature does not
increase the computational cost for the SP or adversely affect
user privacy.
Supporting inter-window revocations requires each SP to
maintain a blacklist for each prior linkability window from
which some user is still blocked. The VIs then issue U with
the verinym for the past few linkability windows.6,7 When
U wishes to obtain a set of nymbles for an SP, she uses the
appropriate verinym to prove that her SP-speciﬁc pseudonym
from a past linkability window is not on the associated black-
list. This is reminiscent of the BLAC [32]–[34] and EPID [6]
approach to blacklisting, which, as discussed elsewhere [19],
raises performance and scalability concerns. However, ﬁve
important distinctions with our approach warrant mention:
term, most
revoked users will not appear on a long-term blacklist.
This signiﬁcantly reduces the expected size of the
blacklist against which a user must generate a proof.
2) U only forms a proof once, during the Nymble Acqui-
sition Protocol; the SP need not verify any expensive
1) Since most IP address bans are short
6The number of linkability windows is a system parameter. It should be
carefully chosen to provide a good balance between privacy (if U learns a
verinym, she can recognize blacklist entries corresponding to past owners of
her unique resource) and functionality (the number of linkability windows
determines the maximum duration of an inter-window revocation).
7This is not possible in schemes like Jack [22] and BNymble [23]
that base verinyms on user-chosen randomness;
this seems to be an
inherent limitation that comes with the unconditional unlinkability of such
verinyms. Of course, these schemes could be adapted to use the approach
of this section by sacriﬁcing unconditional unlinkability in exchange for
computational unlinkability with an honest-majority assumption using, e.g.,
our (t, n)-threshold verinym construction.
ZKPs and the proof will not affect
interaction latency between U and the SP.
the observed
3) The values that appear on the blacklist need not
contain the trapdoor information that is stored in a
nymble. All
that is required is collision resistance
among users. Thus, we reduce the blacklist entries
modulo a sufﬁciently large prime to reduce compu-
tational costs in the protocols.8
√
4) An idea due to Brands et al. [4], [5] enables the user to
perform this non-membership proof using a number of