T在第一位置判断了10次发现字符串不匹配
T在第二位置两次判新了10次发现字特单不召配
图 5-6-6
直到最后第41个位置，因为全部匹配相等，所以不需要再继续进行下去，如图
5-6-7所示。如果最终没有可匹配的子串，比如是T=“0000000002”，到了第41位
置判断不匹配后同样不需要继续比对下去。因此最坏情况的时间复杂度为0（（n一m
+1)*m)
134
---
## Page 159
第5章串
50位字符
40位字符
000
10位字符
Y
T在第41个位置判断了10次发现字符串终于匹配成功。
期间进行了（50-10+1】×10次判断操作
陷 5-6-7
不要以为我这只是危言耸听，在实际运用中，对于计算机来说，处理的都是二进
位的0和1的串，一个字符的ASCII码也可以看成是8位的二进位01串，当然，汉
字等所有的字符也都可以看成是多个0和1串。再比如像计算机图形也可以理解为是
由许许多多个0和1的串组成。所以在计算机的运算当中，模式匹配操作可说是随处
可见，而刚才的这个算法，就显得太低效了。
5.7KMP模式匹配算法
你们可以忍受朴素模式匹配算法的低效吗？也许不可以、也许无所谓。但在很多
年前我们的科学家们，觉得像这种有多个0和1重复字符的字符串，却需要挨个遍历
的算法是非常糟糕的事情。于是有三位前辈，D.E.Knuth、JH.Morris和VR.Pratt（其
中Knuth和Prat共同研究，Morris独立研究）发表一个模式匹配算法，可以大大避
免重复遍历的情况，我们把它称之为克努特一莫里斯一普拉特算法，简称KMP算
法。
5.7.1KMP模式匹配算法原理
为了能讲清楚KMP算法，我们不直接讲代码，那样很容易造成理解困难，还是从
这个算法的研究角度来理解为什么它比朴素算法要好。
如果主串S=“abcdefgab”，其实还可以更长一些，我们就省略掉只保留前9位，
我们要匹配的T=“abcdex"，那么如果用前面的朴素算法的话，前5个字母，两个串
完全相等，直到第6个字母，“f与“x”不等，如图5-7-1的①所示。
135
---
## Page 160
大语数据结构
①abcdefsab.
2abcdergab…
abcdex
abcdox
④abcdcfsab
abcdex
sabcdecgab…
abcd。cgab…
abcdex
abcdex
图 5-7-1
接下来，按照朴素模式匹配算法，应该是如图5-7-1的流程②③④5。即主串S
中当i=2、3、4、5、6时，首字符与子串T的首字符均不等。
似乎这也是理所当然，原来的算法就是这样设计的。可仔细观察发现。对于要匹
等。也就是说，既然“a”不与自已后面的子串中任何一字符相等，那么对于图5-7-1
的①来说，前五位字符分别相等，意味着子串T的首字符“a”不可能与S串的第2
位到第5位的字符相等。在图5-7-1中，②③④的判断都是多余。
注意这里是理解KMP算法的关键。如果我们知道T串中首字符“a与T中后面
的字符均不相等（注意这是前提，如何判断后面再讲）。而T串的第二位的“b”与S
串中第二位的“b”在图5-7-1的①中已经判断是相等的，那么也就意味着，T串中首
字符“a”与S串中的第二位“b”是不需要判断也知道它们是不可能相等了，这样图
5-7-1的②这一步判断是可以省略的，如图5-7-2所示。
a
b
b
h
b
ab
T[1]-a,T[2]-b,S[2]=b
因此T[1]=S[2]
因此当T位于第二位置的
显然T[1]T[2]，T[2]=S[2]
判断就根本不需要进行了
图 5-7-2
136
---
## Page 161
第5章串
同样道理，在我们知道T串中首字符“a”与T中后面的字符均不相等的前提
下，T串的“a”与S串后面的“c"、“d”、“e”也都可以在①之后就可以确定是不相
等的，所以这个算法当中②③④③没有必要，只保留①即可，如图5-7-3所示。
oabcdcrgabm
r
abcdex
adcdex
6
图5-7-3
T[6]，但也不能断定T[1]一定不等于S[6]，因此需要保留这一步。
我们来看下面一个例子，假设S=“abcabcabc”，T=“abcabx”。对于开始的判
断，前5个字符完全相等，第6个字符不等，如图5-7-4的①。此时，根据刚才的经
验，T的首字符“a”与T的第二位字符“b”、第三位字符“e”均不等，所以不需要
做判断，图5-7-4的朴素算法步骤②③都是多余。
abcabx
abcabx
abcabx
abcabx
abcabx
图5-7-4
等。面在①时，第四位的“a”与第五位的“b”已经与主串S中的相应位置比较过
了，是相等的，因此可以断定，T的首字符“a”、第二位的字符“b”与S的第四位字
137
---
## Page 162
大话数据结构
符和第五位字符也不需要比较了，肯定也是相等的—之前比较过了，还判断什么，
所以④这两个比较得出字符相等的步骤也可以省略。
也就是说，对于在子串中有与首字符相等的字符，也是可以省略一部分不必要的
判断步骤。如图5-7-5所示，省略掉右图的T串前两位“a与“b”同S串中的4、5
位置字符匹配操作。
a6caba6ca…
abcabx
公cabx
J3
图5-7-5
对比这两个例子，我们会发现在①时，我们的1值，也就是主串当前位置的下标
是6，②③④，1值是2、3、4、5，到了，1值才又回到了6。即我们在朴素的模
式匹配算法中，主串的1值是不断地回溯来完成的。而我们的分析发现，这种回溯其
实是可以不需要的一正所谓好马不吃回头草，我们的KMP模式匹配算法就是为了
让这没必要的回溯不发生。
既然i值不回溯，也就是不可以变小，那么要考虑的变化就是1值了。通过观察也
可发现，我们屡屡提到了T串的首字符与自身后面字符的比较，发现如果有相等字
符，j值的变化就会不相同。也就是说，这个j值的变化与主串其实没什么关系，关键
就取决于T串的结构中是否有重复的问题。
比如图5-7-3中，由于T=abcdex”，当中没有任何重复的字符，所以j就由6变
成了1。面图5-7-4中，由于T=”abcabx"，前缀的“ab”与最后“x”之前串的后缀
“ab”是相等的。因此1就由6变成了3。因此，我们可以得出规律，j值的多少取决
于当前字符之前的串的前后级的相似度。
我们把T串各个位置的j值的变化定义为一个数组next，那么next的长度就是T
串的长度。于是我们可以得到下面的函数定义：
0.当=1时
1，其他情况
138
---
## Page 163
第5章串
5.7.2next数组值推导
具体如何推导出一个串的next数组值呢，我们来看一些例子。
1.T="abcdex”（如表5-7-1所示）
表5-7-1
模式串Tabcdex
123456
next[]011111
1）当j=1时，next[1]=0；
2）当j=2时，i由1到j-1就只有字符“a"，属于其他情况next[2]=1；
3）当j=3时，i由1到j-1串是“ab”，显然“a”与“b”不相等，属其他情
况，next[3]=1;
4）以后同理，所以最终此T串的next[]为011111。
2.T="abcabx（如表5-7-2所示）
表5-7-2
模式申Tabcabx
123456
next[]011123
1）当j=1 时，next[1]=0；
2）当j=2时，同上例说明，next[2]=1；
3）当j=3时，同上，next[3]=1；
4）当j=4时，同上，next[4]=1；
与申-甲1‘s=（s
“a”相等（前级用下划线表示，后级用斜体表示），因此可推算出k值为2
（由‘ppk-1=‘pi-k+1P-1'，得到p=pa）因此next[5]=2；
与q，本士甲‘qoe，晋申1-1甲“9=（9
相等，所以next[6]=3。
我们可以根据经验得到如果前后级一个字符相等，k值是2，两个字符k值是3，
n个相等k值就是n+1。
3.T=“ababaaaba”（如表5-7-3所示）
139
---
## Page 164
大语数据结构
表5-7-3
123456789
模式串Tababaaaba
next[]011234223
1）当j=1时，next[1]=0；
2）当j=2时，同上next[2]=1；
3）当j=3时，同上next[3]=1；
e.与e.q晋申-甲1“=（
等，next[4]=2;
qe与qe甲qoqe，中-甲s=（s
相等，所以next[5]=3；
与eqe，甲“Dqqe晋申I-甲（‘9=（9
“aba”相等，所以next[6]=4；
与。qe，本士甲‘qe，晋申1-甲“=（
“aa”并不相等，只有“a”相等，所以next[7]=2；
8）当j=8时，j由1到j-1的串是“ababaaa”，只有“a”相等，所以
next[8]=2;
与qe，士甲‘qeeqeqe晋申I-甲！“6=（6
“ab”相等，所以next[9]=3。
4.T="aaaaaaaab”（如表5-7-4所示）
表5-7-4
123456789
模式串Taaaaaaaab
next[j]012345678
1）当j=1时，next[1]=0；
2）当j=2时，同上next[2]=1；
.本“D，申I-甲=（E
等，next[3]=2；
ee，与，本士甲‘oDe.晋申1-I甲1‘=（+
等，所以next[4]=3；
140
---
## Page 165
5)
与eeeeee，本士甲‘oDDDDDE，晋申-I甲[‘阳6=（9
级“aaaaaaa”相等，所以next[9]=8。
5.7.3KMP模式匹配算法实现
说了这么多，我们可以来看看代码了。
/·通过计算返回子事T的next数组。*/
void get_next（String T,int *next)
int i,j;
1-1;
j=0;
next[1]-0;
while（iT[01)
return o;
加粗的为相对于朴素匹配算法增加的代码，改动不算大，关键就是去掉了1值回
溯的部分。对于getnext函数来说，若T的长度为m，因只涉及到简单的单循环，其