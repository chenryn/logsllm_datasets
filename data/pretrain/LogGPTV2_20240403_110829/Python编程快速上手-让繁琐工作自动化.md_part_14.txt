>>> size, color, disposition, name = cat
Traceback (most recent call last):
File "", line 1, in 
size, color, disposition, name = cat
ValueError: need more than 3 values to unpack
4.3 增强的赋值操作
在对变量赋值时，常常会用到变量本身。例如，将42赋给变量spam之后，用
下面的代码让spam的值增加1：
>>> spam = 42
>>> spam = spam + 1
>>> spam
43
Python编程快速上手——让繁琐工作自动化
作为一种快捷方式，可以用增强的赋值操作符+=来完成同样的事：
>>> spam = 42
>>> spam += 1
>>> spam
43
针对+、-、*、/和%操作符，都有增强的赋值操作符，如表4-1所示。
表4-1 增强的赋值操作符
增强的赋值语句 等价的赋值语句
spam += 1 spam = spam + 1
spam -= 1 spam = spam - 1
spam *= 1 spam = spam * 1
spam /= 1 spam = spam / 1
spam %= 1 spam = spam % 1
+=操作符也可以完成字符串和列表的连接，*=操作符可以完成字符串和列表的
复制。在交互式环境中输入以下代码：
>>> spam = 'Hello'
>>> spam += ' world!'
>>> spam
'Hello world!'
>>> bacon = ['Zophie']
>>> bacon *= 3
>>> bacon
['Zophie', 'Zophie', 'Zophie']
4.4 方法
方法和函数是一回事，只是它是调用在一个值上。例如，如果一个列表值存储
在 spam 中，你可以在这个列表上调用 index()列表方法（稍后我会解释），就像
spam.index('hello')一样。方法部分跟在这个值后面，以一个句点分隔。
每种数据类型都有它自己的一组方法。例如，列表数据类型有一些有用的方法，
用来查找、添加、删除或操作列表中的值。
4.4.1 用index()方法在列表中查找值
列表值有一个 index()方法，可以传入一个值，如果该值存在于列表中，就返回它
的下标。如果该值不在列表中，Python就报ValueError。在交互式环境中输入以下代码：
>>> spam = ['hello', 'hi', 'howdy', 'heyas']
>>> spam.index('hello')
0
>>> spam.index('heyas')
3
>>> spam.index('howdy howdy howdy')
第4章 列表
Traceback (most recent call last):
File "", line 1, in 
spam.index('howdy howdy howdy')
ValueError: 'howdy howdy howdy' is not in list
如果列表中存在重复的值，就返回它第一次出现的下标。在交互式环境中输入
以下代码，注意index()返回1，而不是3：
>>> spam = ['Zophie', 'Pooka', 'Fat-tail', 'Pooka']
>>> spam.index('Pooka')
1
4.4.2 用append()和 insert()方法在列表中添加值
要在列表中添加新值，就使用append()和 insert()方法。在交互式环境中输入以
下代码，对变量spam中的列表调用append()方法：
>>> spam = ['cat', 'dog', 'bat']
>>> spam.append('moose')
>>> spam
['cat', 'dog', 'bat', 'moose']
前面的 append()方法调用，将参数添加到列表末尾。insert()方法可以在列表任
意下标处插入一个值。insert()方法的第一个参数是新值的下标，第二个参数是要插
入的新值。在交互式环境中输入以下代码：
>>> spam = ['cat', 'dog', 'bat']
>>> spam.insert(1, 'chicken')
>>> spam
['cat', 'chicken', 'dog', 'bat']
请注意，代码是 spam.append('moose')和 spam.insert(1, 'chicken')，而不是 spam =
spam.append('moose')和 spam = spam.insert(1, 'chicken')。append()和 insert()都不会将
spam 的新值作为其返回值（实际上，append()和 insert()的返回值是 None，所以你
肯定不希望将它保存为变量的新值）。但是，列表被“当场”修改了。在4.6.1节“可
变和不变数据类型”中，将更详细地介绍当场修改一个列表。
方法属于单个数据类型。append()和 insert()方法是列表方法，只能在列表上调
用，不能在其他值上调用，例如字符串和整型。在交互式环境中输入以下代码，注
意产生的AttributeError错误信息：
>>> eggs = 'hello'
>>> eggs.append('world')
Traceback (most recent call last):
File "", line 1, in 
eggs.append('world')
AttributeError: 'str' object has no attribute 'append'
>>> bacon = 42
>>> bacon.insert(1, 'world')
Traceback (most recent call last):
File "", line 1, in 
bacon.insert(1, 'world')
AttributeError: 'int' object has no attribute 'insert'
Python编程快速上手——让繁琐工作自动化
4.4.3 用remove()方法从列表中删除值
给 remove()方法传入一个值，它将从被调用的列表中删除。在交互式环境中输
入以下代码：
>>> spam = ['cat', 'bat', 'rat', 'elephant']
>>> spam.remove('bat')
>>> spam
['cat', 'rat', 'elephant']
试图删除列表中不存在的值，将导致ValueError错误。例如，在交互式环境中
输入以下代码，注意显示的错误：
>>> spam = ['cat', 'bat', 'rat', 'elephant']
>>> spam.remove('chicken')
Traceback (most recent call last):
File "", line 1, in 
spam.remove('chicken')
ValueError: list.remove(x): x not in list
如果该值在列表中出现多次，只有第一次出现的值会被删除。在交互式环境中
输入以下代码：
>>> spam = ['cat', 'bat', 'rat', 'cat', 'hat', 'cat']
>>> spam.remove('cat')
>>> spam
['bat', 'rat', 'cat', 'hat', 'cat']
如果知道想要删除的值在列表中的下标，del 语句就很好用。如果知道想要从
列表中删除的值，remove()方法就很好用。
4.4.4 用sort()方法将列表中的值排序
数值的列表或字符串的列表，能用 sort()方法排序。例如，在交互式环境中输
入以下代码：
>>> spam = [2, 5, 3.14, 1, -7]
>>> spam.sort()
>>> spam
[-7, 1, 2, 3.14, 5]
>>> spam = ['ants', 'cats', 'dogs', 'badgers', 'elephants']
>>> spam.sort()
>>> spam
['ants', 'badgers', 'cats', 'dogs', 'elephants']
也可以指定reverse关键字参数为True，让sort()按逆序排序。在交互式环境中
输入以下代码：
>>> spam.sort(reverse=True)
>>> spam
['elephants', 'dogs', 'cats', 'badgers', 'ants']
关于 sort()方法，你应该注意 3 件事。首先，sort()方法当场对列表排序。不要
第4章 列表
写出spam = spam.sort()这样的代码，试图记录返回值。
其次，不能对既有数字又有字符串值的列表排序，因为Python不知道如何比较
它们。在交互式环境中输入以下代码，注意TypeError错误：
>>> spam = [1, 3, 2, 4, 'Alice', 'Bob']
>>> spam.sort()
Traceback (most recent call last):
File "", line 1, in 
spam.sort()
TypeError: unorderable types: str() >> spam = ['Alice', 'ants', 'Bob', 'badgers', 'Carol', 'cats']
>>> spam.sort()
>>> spam
['Alice', 'Bob', 'Carol', 'ants', 'badgers', 'cats']
如果需要按照普通的字典顺序来排序，就在 sort()方法调用时，将关键字参数
key设置为str.lower。
>>> spam = ['a', 'z', 'A', 'Z']
>>> spam.sort(key=str.lower)
>>> spam
['a', 'A', 'z', 'Z']
这将导致 sort()方法将列表中所有的表项当成小写，但实际上并不会改变它们
在列表中的值。
4.5 例子程序：神奇 8 球和列表
前一章我们写过神奇8球程序。利用列表，可以写出更优雅的版本。不是用一
些几乎一样的 elif语句，而是创建一个列表，针对它编码。打开一个新的文件编辑
器窗口，输入以下代码，并保存为magic8Ball2.py：
import random
messages = ['It is certain',
'It is decidedly so',
'Yes definitely',
'Reply hazy try again',
'Ask again later',
'Concentrate and ask again',
'My reply is no',
'Outlook not so good',
'Very doubtful']
print(messages[random.randint(0, len(messages) - 1)])
Python编程快速上手——让繁琐工作自动化
Python中缩进规则的例外
在大多数情况下，代码行的缩进告诉 Python 它属于哪一个代码块。但是，
这个规则有几个例外。例如在源代码文件中，列表实际上可以跨越几行。这些行
的缩进并不重要。Python知道，没有看到结束方括号，列表就没有结束。例如，
代码可以看起来像这样：
spam = ['apples',
'oranges',
'bananas',
'cats']
print(spam)
当然，从实践的角度来说，大部分人会利用 Python 的行为，让他们的列表
看起来漂亮且可读，就像神奇8球程序中的消息列表一样。
也可以在行末使用续行字符\，将一条指令写成多行。可以把\看成是“这条
指令在下一行继续”。\续行字符之后的一行中，缩进并不重要。例如，下面是有
效的Python代码：
print('Four score and seven ' + \
'years ago...')
如果希望将一长行的Python代码安排得更为可读，这些技巧是有用的。
运行这个程序，你会看到它与前面的magic8Ball.py程序效果一样。
请注意用作messages下标的表达式：random.randint(0, len(messages) - 1)。这产
生了一个随机数作为下标，不论messages的大小是多少。也就是说，你会得到0与
len(messages) - 1之间的一个随机数。这种方法的好处在于，很容易向列表添加或删
除字符串，而不必改变其他行的代码。如果稍后更新代码，就可以少改几行代码，
引入缺陷的可能性也更小。
4.6 类似列表的类型：字符串和元组
列表并不是唯一表示序列值的数据类型。例如，字符串和列表实际上很相似，
只要你认为字符串是单个文本字符的列表。对列表的许多操作，也可以作用于字符
串：按下标取值、切片、用于for循环、用于len()，以及用于in和not in操作符。
为了看到这种效果，在交互式环境中输入以下代码：
>>> name = 'Zophie'
>>> name[0]
'Z'
>>> name[-2]
'i'
>>> name[0:4]