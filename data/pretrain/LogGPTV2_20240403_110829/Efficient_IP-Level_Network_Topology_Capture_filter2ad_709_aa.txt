title:Efficient IP-Level Network Topology Capture
author:Thomas Bourgeau and
Timur Friedman
Eﬃcient IP-Level Network Topology Capture
Thomas Bourgeau and Timur Friedman
LIP6-CNRS and LINCS Laboratories, UPMC Sorbonne Universit´es
Abstract. Large-scale distributed network route tracing systems obtain
the IP-level internet topology and can be used to monitor and understand
network behavior. However, existing approaches require one or more days
to obtain a full graph of the public IPv4 internet, which is too slow to cap-
ture important network dynamics. This paper presents a new approach
to topology capture that aims at obtaining the graph rather than full
routes, and that employs partial rather than full route tracing to achieve
this aim. Our NTC (Network Topology Capture) heuristics use infor-
mation from previous tracing rounds to guide probing in future rounds.
Through simulations based upon two months of traces that we obtained,
we ﬁnd that the heuristics improve signiﬁcantly on the state of the art
for reducing probing overhead while maintaining good graph coverage.
We also conduct the ﬁrst study of how such a distributed tracing system
performs in its ability to capture network dynamics.
1
Introduction
A few large-scale distributed route tracing systems, Ark [1], DIMES [2], and
iPlane [3], are in continuous operation, each mapping a signiﬁcant portion of
the public IPv4 internet. Each takes at least a day to complete a single prob-
ing round. The data that they produce are widely used for understanding the
structure of the internet. However, as Bourgeau (co-author on the present paper)
has described [4], looking at this timescale leaves out important aspects of net-
work dynamism. Those who wish to study network dynamics either turn towards
systems that conduct a narrower range of measurements at a higher frequency,
such as RIPE’s TTM [5] or our own TopHat TDMI [6], or they create their own
system, such as Latapy et al.’s (non-distributed) Radar for the Internet [7].
The three big distributed route tracing systems consist of tens (Ark) to thou-
sands (DIMES) of agents, continuously probing towards destinations in each of
the 9.1 million /24 IPv4 address preﬁxes. Implicit in these numbers is a net-
work discovery probe packet budget that is hard to compress. Lakhina et al.
demonstrated that measuring from too few sources can introduce biases in the
discovered graph [8] and Shavitt et al. have shown how a broad distribution of
sources and destinations yields good estimates of graph properties [9].
There is a small body of prior work on how to increase the eﬃciency of dis-
tributed route tracing systems while maintaining all sources and destinations.
The Doubletree algorithm, by Donnet et al. [10] (including a present co-author),
introduces cooperation between agents so that one can avoid probing where the
M. Roughan and R. Chang (Eds.) PAM 2013, LNCS 7799, pp. 11–20, 2013.
c(cid:2) Springer-Verlag Berlin Heidelberg 2013
12
T. Bourgeau and T. Friedman
others have already probed. Gonen and Shavitt [11] examine what the minimum
set of source-destination pairs for route traces might be in order to fully cover
the network graph.
Our essential insight is that, the graph of the internet being an object of con-
siderable interest in its own right, a system can aim to obtain the network graph
rather than full end-to-end route traces. By conducting partial route traces, cho-
sen, on the basis of knowledge from the system’s own prior probing rounds, to
reduce redundancy, signiﬁcant savings can potentially be realized in the probing
budget.
The Network Topology Capture (NTC) heuristics presented in this paper are
the ﬁrst realization of such an approach. Emulating NTC on a measurement
dataset that we collected using TDMI on the PlanetLab [12], NTC consumes
as little as 6% of the probing budget of a classic system conducting end-to-
end traceroutes. In so doing, it still covers 95% of the network topology. This
outperforms the state of the art Doubletree approach, which (on another, similar,
dataset) required 25% of a classic probing budget and discovered 93% of the
network topology.
With such a reduced probing budget, it should be possible to speed up trac-
ing systems by an order of magnitude. This might make them more useful for
such tasks as network monitoring (e.g., [13]). It might also open the way for de-
velopment of accurate IP-level network dynamics emulators, to complement the
topology generators (e.g., [14]) that researchers use today. The present paper is
the ﬁrst to evaluate the ability of a distributed route tracing system to capture
network dynamics.
2 A Generic Distributed Tracing (GDT) Framework
Distributed network tracing systems tend to be similar to each other. Each has
a number of lightweight agents and a heavier weight central server. Probing is
conducted in rounds, with each agent working from a ﬁxed set of instructions
for a round. Results from the agents are sent back from time to time to the
central server. We formalize these notions into a Generic Distributed Tracing
(GDT) framework. The framework leaves room for many diﬀerent speciﬁc prob-
ing heuristics to be applied. The following section describes related work in the
context of this framework, and the section after that describes our own NTC
(Network Topology Capture) heuristics.
The actors in the generic framework are a server and a set of agents. Tracing
is conducted in a series of rounds, with three phases to each round: dispatch,
in which instructions are sent from the server to the agents; probing by the
agents; and update, in which the probing results are sent back to the server,
which uses them to prepare the next round. Let us further detail each phase.
Dispatch Phase: The information classically provided to agents in a dis-
tributed tracing system is simply a list of destinations that each one should probe,
Eﬃcient IP-Level Network Topology Capture
13
using full route traces. Once this information has been provided to the agents
for a ﬁrst round, it tends not to change much in subsequent rounds. However,
the two changes that we introduce to tracing methodology – conducting partial
route traces and using previously detected features to guide probing – require
agents to receive fuller information and round-by-round updates. For the partial
traces, the server must communicate not only the destination, but also the hop
counts for a trace. And for the previously detected features, the server must
inform an agent about what to expect to see in each partial trace.
We formalize a partial trace instruction as a query, in the sense that the
agent will ‘query’ the network regarding the existence of a single edge of the
network graph. We must clarify what we mean by an edge because of the well-
known phenomenon of unresponsive interfaces, commonly called ‘stars’, that
often appear in route traces, as well as the less frequently seen non-public or
otherwise illegal IP addresses. For our purposes, an edge consists of two legal
IP addresses: v1, seen at a hop count h in a route trace from source s (the agent)
to destination d; and v2, seen at hop count h + (cid:2), where (cid:2) is a positive integer.
If (cid:2) > 1, this means that there are intermediate hops consisting of stars and/or
illegal IP addresses, which we exclude from our graph of the network topology.
In order to try to revisit the edge e = (v1, v2), the query q = (s, d, h, (cid:2)) instructs
agent s to probe towards d, starting at h and ending at h + (cid:2).
We formalize the notion that the agent is launching query q explicitly to visit
edge e as an expected view c = (q, e). By knowing the expected view, the agent
can autonomously undertake additional probing if e should not be present. Not
all probing can be based on prior experience, however. Typically, an agent’s ﬁrst
probing round will consist of full route traces towards a set of destinations. There
might be a reason to introduce full traces in other rounds as well, for instance
to promote additional exploration. So the full instructions that a server provides
to an agent consist in a set C of expected views complemented with a set D of
destinations for full traces.
Probing Phase: Agents carry out their instructions in the probing phase,
recording the results to send back to the server. Agents might take autonomous
action beyond their direct instructions, conducting more or less probing in re-
sponse to what they, and possibly other agents, are seeing in the current round.
A result might simply be that an expected edge has been seen. If it has not
been seen, or if additional probing was conducted, then the trace information
(destination, hop count, interface seen, for each hop) must be communicated. If
probing is less than instructed, then a reason might be communicated.
Update Phase: In the update phase, the server collects the results from each
agent and updates its database of expected views. If history extends back only
one round, all new information overwrites the old. A more sophisticated approach
stores information from all rounds, allowing the next dispatch phase to be based
on the fullest record possible.
14
T. Bourgeau and T. Friedman
3 Related Work
This paper situates itself in the context of the small body of work on improving
the eﬃciency of distributed route tracing systems. The distributed work builds
on earlier work on the eﬃciency of single-agent systems. The essential distin-
guishing feature of the distributed problem is that the work can be divided
among agents. (See Donnet et al. [10] for single-agent references.) There are two
prior approaches to the distributed problem: Donnet et al.’s Doubletree [10] and
Gonen and Shavitt’s work [11].
Seen within the GDT framework described above, Doubletree innovates in
the probing phase. It divides the destination set into as many subsets as there
are agents, and it divides the probing phase of each round into that many sub-
rounds. During each sub-round, an agent works on its own unique subset of
the destination set. When it passes that subset on to the next agent for the
next sub-round, it also passes along information about the IP addresses that it
has seen when probing towards each destination in the subset. Those address-
destination pairs form a tracing “stop set”, allowing the next agent to avoid
redundant probing. With each sub-round, each agent adds its own information
to the stop set. The stop sets are not kept beyond the end of the probing phase,
and each round begins anew.
Again, as seen within the GDT framework, Gonen and Shavitt have in-
novated in the dispatch phase. Their server designates destination sets for each
agent that are subsets of the full destination set. Based upon knowledge of the
route traces from a prior round, these instructions are aimed at reducing prob-
ing redundancy as much as possible while still maintaining 100% coverage in the
current round.
Both approaches function within the paradigm of the production route tracing
systems, in which route traces are full end-to-end traces from each agent to every
destination in a speciﬁed set. Doubletree allows partial traces to be conducted,
but only on the condition that other information is available from which all full
traces can be reconstituted (subject to some, hopefully small, error). Gonen and
Shavitt dispense with the aim of being able to reconstitute traces from each
agent to every destination in the set, focusing instead on obtaining the network
graph topology that results from the complete set of traces. They allow a subset
of the complete set of traces to be conducted.
Our NTC (Network Topology Capture) approach is the ﬁrst to fully embrace
the graph-based perspective. As with Gonen and Shavitt, we aim at obtaining
the fullest possible graph, and are ready to dispense with some routing path
knowledge in order to do so eﬃciently. We are also ready, however, to dispense
with full route traces as the means to obtaining the graph, thereby opening up
the possibilities for much greater eﬃciency.
Previous work has looked, as we also do, at the eﬀect of more eﬃcient dis-
tributed tracing on network graph coverage. However, ours is the ﬁrst work to
look at the impact on the ability of such systems to eﬀectively capture network
topology dynamics.
Eﬃcient IP-Level Network Topology Capture
15
4 Network Topology Capture (NTC) Heuristics
Within the GDT framework described above, we employ two heuristics (see
Fig. 1 and below) that, together, we call our Network Topology Capture (NTC)
approach to distributed tracing.
(a) Redundancy aware probing
(b) Dynamism aware probing
Fig. 1. Network Topology Capture (NTC) heuristics
Redundancy Aware Probing: We know from the Doubletree work [10] that
a considerable amount of probing redundancy is due to a small proportion of
discovered edges (80% of the probes sent discover just 10% of the edges in their
case). Our redundancy aware probing heuristic looks at prior rounds’ probing
results and counts the number of diﬀerent queries capable of seeing each edge.
These include both multiple queries from a single agent to various destinations
(“intra-monitor redundancy” in Doubletree terms) and queries from multiple
agents (which goes beyond Doubletree’s “inter-monitor redundancy” because
there is no constraint that the traces must be towards the same destination).
The heuristic intervenes at the dispatch phase by globally capping the number
of queries per edge, across all agents, in a round at a value α. These expected
views are chosen at random.
The dispatch phase of the ﬁrst round is an exception. Since there is no prior
history, full traces are conducted from all agents towards all destinations. The full
results are collected in the update phase, which provides the basis for subsequent
dispatch phases. Since not all expected views are queried in each probing round,
the question arises as to how to age these views. NTC keeps them, replacing
them only when measurement indicates that they are no longer valid.
In Fig. 1(a), prior probing has show that four queries, two from S1 and S2
towards D1 and D2, yield the edge (B, C). With α = 1, redundancy aware probing
dispatches only a single expected view for (B, C), tracing from S1 towards D2 at
the appropriate hop counts. In practice, because network dynamics might cause
queries to fail, we might explicitly allow introduce edge redundancy by using an
α value greater than 1.
Dynamism aware probing: When a query fails to yield the expected edge,
this is a sign that routing has changed. An agent could content itself with
16
T. Bourgeau and T. Friedman
reporting back just the interfaces that it has seen, but to do so would be to forgo
the possibility of discovering more information surrounding the change. Our
dynamism aware probing heuristic intervenes at the probing phase, in which the
agent continues probing forwards and backwards from the expected view until
it has discovered a number β of legitimate IP addresses in both directions (or
until tracing terminates for the normal reasons of reaching source or destination
or a maximum hop count).
Fig. 1(b) shows that an expected view from round r of (B, C), when tracing
from S1 towards D2, fails in round r + 1, yielding (E, C) instead. Based on β = 1,
agent S1 continues probing backwards until it discovers one additional legitimate
IP address, A. It also continues probing forwards, but just rediscovers D2. Note
that A has not been seen before, and we do not know what it connects to. The
higher the value of β, the more chances we have to connect newly-found vertices
and edges to the known topology.
5 Performance Evaluation
This section evaluates how well the NTC heuristics just described do at covering
the graph of the network in each probing round and how well they do at captur-
ing the graph dynamics between probing rounds. There is a trade-oﬀ between
the discovery budget, on the one hand, and the degrees of coverage and captured
dynamics on the other. We explore this trade-oﬀ through the two tunable pa-
rameters that we have introduced: α, governing how many diﬀerent ways we try
to reprobe each edge, and β, governing how far we search for previously-seen IP
addresses when we encounter unexpected IP addresses in our reprobing. Higher
α and higher β both mean a greater discovery budget, and, as we see below, both
bring gains of diﬀerent sorts for coverage and capture. The maximum values that
we have used (α = 10 and β = 30) correspond to a probing budget of roughly
25% of a full trace probing budget, which is the budget reported for the state of
the art Doubletree algorithm [10].
Our evaluation is based upon a real dataset that we have captured, with full
traces from every source to every destination, on which we simulate how discov-
ery would have proceeded if we had been conducting selected partial traces based
on the NTC heuristics. Existing datasets [1,2,3] were not suitable to our purposes
for a couple of reasons. First, their time granularity is coarser than we would wish
for a study of network dynamics. An individual probing round taking on the or-
der of days for Ark [1] and DIMES [2], and one day for iPlane [3]. Second, we were
concerned that traces that did not employ Paris Traceroute [15] would introduce
false dynamics due to the interaction between per-ﬂow load-balancing routers
and the way in which classic Traceroute modiﬁes the ﬂow identiﬁer for each probe
packet that it sends. Among the big three distributed probing systems, only Ark
has deployed Paris Traceroute. We collected our measurements1 over the course
of two months, from 25 May to 25 July 2010, using the TDMI measurement
1 Our dataset and algorithm description are available at http://ntc.top-hat.info
Eﬃcient IP-Level Network Topology Capture
17
%
35