# Efficient IP-Level Network Topology Capture

## Authors
Thomas Bourgeau and Timur Friedman

## Abstract
Large-scale distributed network route tracing systems can map the IP-level internet topology, which is crucial for monitoring and understanding network behavior. However, current methods often take one or more days to generate a complete graph of the public IPv4 internet, making it challenging to capture dynamic network changes. This paper introduces a new approach to topology capture that focuses on obtaining the network graph rather than full routes, using partial route tracing to achieve this goal. Our Network Topology Capture (NTC) heuristics leverage information from previous tracing rounds to guide future probing. Simulations based on two months of trace data show that our heuristics significantly reduce probing overhead while maintaining good graph coverage. We also conduct the first study on the performance of a distributed tracing system in capturing network dynamics.

## 1. Introduction
Several large-scale distributed route tracing systems, such as Ark [1], DIMES [2], and iPlane [3], continuously map significant portions of the public IPv4 internet. Each system takes at least a day to complete a single probing round, and the data they produce are widely used to understand the structure of the internet. However, these timescales miss important aspects of network dynamism. Researchers who need to study network dynamics often turn to systems that perform more frequent, but narrower, measurements, such as RIPE’s TTM [5] or our own TopHat TDMI [6], or they develop custom systems like Latapy et al.’s Radar for the Internet [7].

These distributed route tracing systems consist of tens (Ark) to thousands (DIMES) of agents, continuously probing destinations in each of the 9.1 million /24 IPv4 address prefixes. The probe budget required for these operations is substantial and difficult to compress. Lakhina et al. [8] demonstrated that measuring from too few sources can introduce biases in the discovered graph, while Shavitt et al. [9] showed that a broad distribution of sources and destinations yields better estimates of graph properties.

There is limited prior work on increasing the efficiency of distributed route tracing systems while maintaining all sources and destinations. The Doubletree algorithm by Donnet et al. [10] (including a co-author of this paper) introduces cooperation between agents to avoid redundant probing. Gonen and Shavitt [11] explore the minimum set of source-destination pairs needed to fully cover the network graph.

Our key insight is that, since the graph of the internet is of considerable interest, a system can aim to obtain the network graph rather than full end-to-end route traces. By conducting partial route traces, chosen based on knowledge from previous probing rounds, we can significantly reduce the probing budget. The NTC heuristics presented in this paper are the first to implement this approach. Using a dataset collected with TDMI on PlanetLab [12], NTC consumes as little as 6% of the probing budget of a classic system conducting end-to-end traceroutes, while still covering 95% of the network topology. This outperforms the state-of-the-art Doubletree approach, which required 25% of a classic probing budget and discovered 93% of the network topology.

With such a reduced probing budget, it should be possible to speed up tracing systems by an order of magnitude, making them more useful for tasks like network monitoring [13]. It might also enable the development of accurate IP-level network dynamics emulators, complementing the topology generators [14] currently used by researchers. This paper is the first to evaluate the ability of a distributed route tracing system to capture network dynamics.

## 2. A Generic Distributed Tracing (GDT) Framework
Distributed network tracing systems typically have lightweight agents and a central server. Probing is conducted in rounds, with agents following fixed instructions and sending results back to the server. We formalize these concepts into a Generic Distributed Tracing (GDT) framework, which allows for various specific probing heuristics. The next section describes related work in this context, followed by a description of our NTC heuristics.

The GDT framework includes a server and a set of agents. Tracing occurs in rounds, each consisting of three phases: dispatch, probing, and update.

### Dispatch Phase
In traditional systems, agents receive a list of destinations to probe using full route traces. This information rarely changes in subsequent rounds. However, our NTC heuristics require agents to receive more detailed and frequently updated information. For partial traces, the server must provide the destination and hop counts. For previously detected features, the server must inform the agent about what to expect in each partial trace.

A partial trace instruction is a query, where the agent checks the existence of a single edge in the network graph. An edge consists of two legal IP addresses: \( v_1 \), seen at hop count \( h \) in a route trace from source \( s \) to destination \( d \); and \( v_2 \), seen at hop count \( h + \delta \), where \( \delta \) is a positive integer. If \( \delta > 1 \), intermediate hops are excluded. To revisit edge \( e = (v_1, v_2) \), the query \( q = (s, d, h, \delta) \) instructs agent \( s \) to probe towards \( d \), starting at \( h \) and ending at \( h + \delta \).

The expected view \( c = (q, e) \) indicates that the agent is launching query \( q \) to visit edge \( e \). If \( e \) is not present, the agent can autonomously conduct additional probing. Full traces are typically used in the first round, and may be introduced in later rounds for exploration. The server provides a set \( C \) of expected views and a set \( D \) of destinations for full traces.

### Probing Phase
Agents execute their instructions, recording results to send back to the server. They may take autonomous actions, such as conducting more or less probing based on current observations. Results include whether an expected edge was seen, and if not, the trace information (destination, hop count, interface seen, for each hop). If probing is less than instructed, a reason is provided.

### Update Phase
In the update phase, the server collects results from each agent and updates its database of expected views. If history extends only one round, new information overwrites the old. A more sophisticated approach stores information from all rounds, allowing the next dispatch phase to be based on the fullest record possible.

## 3. Related Work
This paper builds on the small body of work aimed at improving the efficiency of distributed route tracing systems. The essential feature of the distributed problem is the division of work among agents. There are two prior approaches: Doubletree [10] and Gonen and Shavitt’s work [11].

Within the GDT framework, Doubletree innovates in the probing phase by dividing the destination set into subsets for each agent and using a "stop set" to avoid redundant probing. Gonen and Shavitt innovate in the dispatch phase by designating destination sets for each agent to reduce redundancy while maintaining full coverage.

Both approaches function within the paradigm of full end-to-end traces. Doubletree allows partial traces but requires reconstituting full traces, while Gonen and Shavitt focus on obtaining the network graph topology. Our NTC approach fully embraces the graph-based perspective, aiming for the fullest possible graph and dispensing with full route traces for greater efficiency.

Previous work has examined the effect of more efficient distributed tracing on network graph coverage. Our work is the first to evaluate the impact on the ability to capture network topology dynamics.

## 4. Network Topology Capture (NTC) Heuristics
Within the GDT framework, we employ two heuristics: Redundancy Aware Probing and Dynamism Aware Probing.

### Redundancy Aware Probing
We know from the Doubletree work [10] that a small proportion of edges account for a large amount of probing redundancy. Our heuristic looks at prior rounds’ results and caps the number of queries per edge, across all agents, at a value \( \alpha \). These expected views are chosen randomly.

In the first round, full traces are conducted from all agents to all destinations. Subsequent dispatch phases use the collected results to guide future probing. Expected views are kept and replaced only when measurements indicate they are no longer valid.

### Dynamism Aware Probing
When a query fails to yield the expected edge, it indicates a routing change. Our heuristic instructs the agent to continue probing forwards and backwards until it discovers \( \beta \) legitimate IP addresses in both directions. This helps in discovering more information surrounding the change.

## 5. Performance Evaluation
This section evaluates the NTC heuristics' performance in covering the network graph and capturing graph dynamics. There is a trade-off between the discovery budget and the degrees of coverage and captured dynamics, controlled by parameters \( \alpha \) and \( \beta \). Higher values of \( \alpha \) and \( \beta \) increase the discovery budget, bringing gains in coverage and capture.

Our evaluation is based on a real dataset collected with full traces from every source to every destination, simulating how discovery would proceed with selected partial traces based on the NTC heuristics. Existing datasets [1, 2, 3] were unsuitable due to coarse time granularity and potential false dynamics. We collected our measurements over two months, from May 25 to July 25, 2010, using TDMI [12].

For more details, including the dataset and algorithm description, visit [http://ntc.top-hat.info](http://ntc.top-hat.info).

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and intent.