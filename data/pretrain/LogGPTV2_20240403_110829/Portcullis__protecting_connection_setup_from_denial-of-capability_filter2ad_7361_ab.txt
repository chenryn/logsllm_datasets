increase in incoming trafﬁc, it uses the speak-up system to encour-
age legitimate senders to signiﬁcantly increase their sending rates.
While their results demonstrate that each endhost will then receive
service proportional to its bandwidth, the analysis is focused en-
tirely on protecting end-host resources, not network links, and as-
sumes the network is uncongested. Other fundamental problems
with using bandwidth as a currency exist. First, requiring hosts to
compete on the basis of bandwidth necessarily imposes substantial
negative side-effects on the network as a whole, since hosts send-
ing to destinations other than the victim may experience congestion
because of the increase in trafﬁc from legitimate senders. Second,
large disparities can exist in the amount of bandwidth available to
legitimate users. A user with a 100Mbps connection has over 1500
times more bandwidth than a user connecting at modem rates. This
leads to signiﬁcant inequalities between legitimate users.
(cid:2)
g = min
(cid:4)
rg,γcg
C
Per-Computation Fairness. As an alternative to per-bandwidth
fairness, we base our notion of fairness on computational effort.
With per-computation fairness, the probability of request packet
delivery is directly proportional to the amount of computational ef-
(cid:5)
fort expended by a sender. Thus, a legitimate sender should achieve
, where cg represents the
an outbound rate of r
sender’s computational effort, and C represents the computational
effort expended by other senders using the same link.
If every
sender has equal computational power, then per-computation fair-
ness is equivalent to per-source fairness, but without the problems
of shared or spoofed identiﬁers mentioned above. In the real world,
computational disparities do exist, but they are not nearly as pro-
nounced as the disparities in available bandwidth. As detailed in
Section 7.1, a well-provisioned PC and a smartphone have only a
38x disparity for computational puzzles. Additionally, researchers
have proposed the use of memory bound functions that can de-
crease computational disparities below 10x [1, 11, 12]. Finally, by
shifting the playing ﬁeld from bandwidth to computation, fewer ex-
ternalities exist because the impact of the work is limited to a single
machine, making per-computation a signiﬁcantly more network-
friendly approach.
3. PORTCULLIS ARCHITECTURE
Portcullis aims to provide a strong defense against large-scale
DDoS attacks: even when under attack, a legitimate sender can
successfully initiate a connection with the receiver and communi-
cate with low packet loss. Portcullis augments a standard capability
mechanism [3,31,32] with our new puzzle-based protection for ca-
pability request packets. Hence, the goal of the remainder of this
paper is to design a DoC-resistant request channel for a capability
system. This design is based on computational puzzles, which we
prove can provide optimal fairness for the request channel (see Sec-
tion 4). As a result, Portcullis strictly bounds the delay a collection
of attackers can impose on legitimate clients.
To achieve per-computation fairness we leverage a novel puzzle-
based mechanism, which enables all routers to easily verify puzzle
solutions and uses the existing DNS infrastructure to disseminate
trustworthy and veriﬁably fresh puzzle challenges (Section 3.4). By
enforcing per-computation fairness in the request channel, Portcullis
severely limits the attacker’s ﬂooding rate.
zle system needs the following properties:
of a puzzle challenge and the correctness of the solution.
In order to provide per-computation fairness, the Portcullis puz-
• Authenticity: Any host or router can verify the authenticity
• Availability: The puzzle distribution service must be dis-
• Freshness: A solution to a puzzle must indicate recent com-
• Efﬁciency: Routers must be able to quickly verify the cor-
• Granularity: The puzzles should allow clients to demon-
rectness, authenticity, and freshness of a puzzle solution.
tributed and highly robust.
putational effort.
strate various levels of computational effort.
3.1 Assumptions and Threat Model
We assume space in the request packet header to encode capa-
bilities, puzzles, and puzzle solutions. Because request packets
represent a tiny fraction of data trafﬁc, puzzle data represents a
negligible amount of overhead.
In our threat model, we assume endhosts may be compromised
and collude with each other. We also assume that malicious routers
may assist the DoC attack, though we note that a malicious router
on the path between a legitimate sender and receiver can always
Release
H
hn
H
H
h2
H
h1
h0
Compute
Figure 1: Hash Chain. The seed generator repeatedly hashes a
random value h0 to create a series of seed values. The hash-chain
anchor, hn, is signed and released. As time advances, additional
seeds are released in reverse order. An authentic hn can be used
to authenticate later seeds hi by repeatedly hashing the hi value.
If this process produces hn, then the hi value is authentic.
simply drop packets. We do not assume trust relationships between
routers and receivers, nor among the routers themselves. Thus,
each router makes decisions independent of other routers.
3.2 Design Overview
The seed generator is a trusted entity that periodically releases
seeds that senders can use to create puzzles. Senders obtain seeds
from a seed distribution service, which need not be trusted. The
puzzle generation algorithm is a public function for generating a
puzzle based on the most recent puzzle seed and ﬂow-speciﬁc in-
formation. Each puzzle solution is associated with a puzzle level.
The puzzle level represents the expected amount of computation
required to ﬁnd a solution to the puzzle.
When a sender wishes to set up a prioritized ﬂow, it obtains the
latest seed from the seed distribution service and generates a puzzle
using the puzzle generation algorithm. The sender then computes
the solution to the puzzle. It includes the puzzle and solution in the
header of the request packet. The routers verify the authenticity of
the puzzle and the solution, and give priority to requests containing
higher-level puzzles.
3.3 Seed Generation
The seed generator periodically releases a new seed for senders
to use in creating puzzles. The seeds are released through the seed
distribution service described in Section 3.4. The seeds must be
unpredictable (i.e., it is computationally infeasible to guess future
seeds based on previous seeds), and efﬁciently veriﬁable (i.e., one
can easily conﬁrm that a seed is from the seed generator).
Unpredictable and efﬁciently veriﬁable seeds can be implemented
as follows. The seed generator randomly picks a number h0, and
uses a public hash function H to compute a hash chain of length
n starting at h0, i.e., hk+1 = H(hk||k) (see Figure 1). To prevent
attacks against the hash chain, H should be a cryptographic hash
function providing pre-image resistance and second pre-image col-
lision resistance. The seed generator digitally signs the hash-chain
anchor (the last value on the hash chain) hn and releases the sig-
nature, SIGN(hn). Since hash chains can be of arbitrary length and
yet stored efﬁciently, hash-chain anchors are released infrequently,
e.g., once a year.
Every t minutes, the seed generator makes a new seed available
in the form of a value from the hash chain in reverse order (that is,
value hi+1 is released before hi). Senders obtain the current seed
from the seed distribution service and include it in their capability
requests. The authenticity of the newly released seed can be veri-
ﬁed by hashing it and comparing the result with the seed released
in the previous time slot. For example, during the ﬁrst time slot a
sender would include seed hn−1 in a packet. Any router can verify
the authenticity of hn−1 by checking that H(hn−1||n− 1) equals the
hash-chain anchor hn.
3.4 Seed Distribution Service
The seed generator provides puzzle seeds to the seed distribu-
tion service, which makes them available to clients. A client con-
tacts the seed distribution service to obtain the latest seed hi. This
seed is used to create puzzles (using the algorithm described in Sec-
tion 3.5) for connections made during the next t minutes.
The seed distribution service also allows routers and senders to
obtain the hash-chain anchor hn needed to verify subsequent seeds.
This yearly operation is the only time that routers need to contact
the seed distribution service. To simplify routers, an ISP could
have one or more non-router hosts contact the seed distribution ser-
vice once a year and participate in an intradomain routing protocol.
These hosts verify the authenticity of the signature on hn, and then
use the routing protocol to disseminate hn to all of the ISP’s routers.
Because the anchor is small (approximately 80 bits), it could easily
ﬁt within a special ﬁeld of a routing update.
In general, puzzle seed distribution could be handled by any dis-
tributed and well-provisioned set of servers. While using a pri-
vately operated content distribution network (CDN) is one viable
approach, the simple nature of the puzzle seed and hash root data
makes the existing DNS infrastructure an attractive choice.
Seed Distribution Via DNS.
In our DNS-based puzzle distribu-
tion design, one or more sets of global top-level domain (gTLD)
servers store a DNS record for both the most recent puzzle seed as
well as the signed root hash value. gTLD servers (e.g., the resolvers
for the .com domain) are already highly provisioned and widely
replicated because a successful DoS attack against these servers
would make many network services unavailable.
Taking the example of the .com gTLD servers, in addition to stor-
ing all NS records for domains within .com, each server could have
records for the special domains puzzleseed.com and anchor.com.
These records would be of type TXT and would contain text-encoded
values of the latest puzzle seed and hash-chain anchor (with signa-
ture). Both values are small enough to ﬁt into a single UDP data-
gram. Use of the text record means local DNS servers require no
modiﬁcations to query for or cache this data.
Figure 2 illustrates a sample implementation. Once a year, the
seed generator run by a trusted party (e.g., ICANN) computes a
hash chain and publishes the hash-chain anchor, as well as a signa-
ture on the hash-chain anchor, as a DNS record (see Figure 2(a)).
Hosts and routers can perform a standard DNS query to retrieve this
record, verify the signature, and store the hash-chain anchor value
for the following year.
Once every t minutes, the seed generator inserts a new puzzle
seed into DNS. To obtain the latest seed hi, a client performs a
standard DNS query, shown in Figure 2(b). Based on the seed,
the client computes a puzzle (as discussed in Section 3.5), solves
the puzzle, and includes the puzzle seed and solution in its ca-
pability setup packet. Note that a single seed hi can be used to
create puzzles for connections to multiple servers (e.g., download-
ing web content from multiple hosts would only require a single
DNS query for the latest puzzle seed), though for each server under
DDoS attack, the client must generate and solve a different puzzle.
Routers receiving the setup packet can verify the authenticity of hi
using hn (or the most recently authenticated seed value, e.g., h j for
i < j ≤ n), and verify the puzzle solution using Equation 1.
If a body like ICANN is in charge of seed generation, it could
easily include the task of puzzle distribution as part of the contracts
it already establishes to run gTLD servers for domains like .com.
Since providers of large and distributed DNS infrastructures such
as Akamai often contain records for popular sites with TTLs of
only a few minutes, updating this infrastructure to release a fresh
puzzle seed on the order of 2–10 minutes would be quite feasible.
hn, SignS(hn)
S
DNS
anchor.com
anchor.com
hn, SignS(hn)
hn, SignS(hn)
C
R
hi
S
DNS
puzzleseed.com
hi
C
hi, r, l , x
R
(a) Yearly Setup
(b) Connection Establishment
Figure 2: Puzzle Distribution Via DNS. (a) Once a year, a trusted seed generator (S) publishes the anchor value hn of a hash chain,
along with a signature on hn, as a DNS record. By performing a DNS lookup on a well-known name, clients and routers can obtain this
record. (b) To establish a capability, the client performs another DNS request. The resulting DNS record contains the current puzzle
seed, hi. The client creates a puzzle based on hi and includes the puzzle solution (x) it its setup packet. The router ﬁrst veriﬁes the puzzle
seed hi by repeatedly hashing it to get hn. In most cases, the router will have already seen hi and hashing will be unnecessary. Finally,
the router uses Equation 1 to verify the puzzle solution.
DNS TTLs allow ISPs to correctly cache the seeds if possible
and answer client requests with no additional complexity. While
recent work suggests that approximately 14% of local DNS servers
violate the DNS standard by ignoring TTL values [23], adding an
expiration time to the puzzle seed record allows clients to detect
stale data and query the gTLD server directly for a fresh record.
Portcullis should not signiﬁcantly increase the load on the DNS
infrastructure for two reasons. First, we expect legitimate senders
to request puzzle seeds only when contacting a destination under
DoS attack. Second, studies of the behavior of local DNS resolvers
from a moderately-sized academic institution [18] show that such
local servers contact root and gTLD servers over 600,000 times per
week. In contrast, even if puzzle seeds changes every 5 minutes
and sources in a domain experience constant DDoS attacks for the
entire duration of the week, the puzzle queries would increase the
number of gTLD DNS queries from that domain by only 2,000
(e.g., less than 0.34%).
Additionally, a DoS attack on DNS does not affect Portcullis
unless a simultaneous DoS attack is launched against a particu-
lar destination. An adversary able to deny DNS access to clients
can already paralyze communication, and systems such as Con-
ﬁDNS [24] can allow users to quickly and securely circumvent at-
tacks on local DNS resolvers. Note that a DNS-based implementa-
tion does not require secure DNS, nor does it require DNS servers
to perform any cryptographic operations or in any other way devi-
ate from normal operation. The hash-chain anchor is authenticated
by the signature accompanying it, and subsequent puzzle seeds are
authenticated based on the hash-chain anchor.
3.5 Puzzle Generation Algorithm
When an endhost decides to establish a connection, it acquires
the latest random seed hi from the seed distribution service. The
sender then chooses a random 64-bit nonce r and computes a ﬂow-
speciﬁc puzzle as follows:
p = H(x||r||hi||dest IP||(cid:2))
(1)
To solve the puzzle at difﬁculty level (cid:2), the sender ﬁnds a 64-bit
value x such that the last (cid:2) bits of p are all zero. The sender in-
cludes r, hi, (cid:2), and a puzzle solution x in each request packet. It
need not include p, since the router will regenerate it during puzzle
veriﬁcation. Assuming the publicly-known hash function H is pre-
image resistant and has a good distribution over its range, a sender
must resort to a brute-force approach by trying random values of x
to ﬁnd a solution for the chosen level.
We intentionally do not make hash puzzles depend on the source
IP address. Including the source address causes problems for hosts
behind NATs or proxies, yet does little to prevent attackers from
sharing puzzles because an attacker can simply spoof its IP ad-
dress. To limit puzzle sharing, routers drop duplicate puzzles (we
discuss how Portcullis is effective despite attackers sharing puzzles
in Section 5.1). Since routers drop duplicate puzzles, senders are
motivated to choose r at random. However, the input to the hash
does include the destination IP address, which prevents an attacker
from reusing the same puzzle to attack multiple destinations (unlike
source information, the destination address cannot be spoofed). We
also include the difﬁculty level of the puzzle in the hash computa-
tion to prevent an adversary from reusing computation for a hard
puzzle as a solution for an easy puzzle. In other words, if the ad-
versary attempts to solve a level 7 puzzle, she may discover viable
solutions for puzzles at level 1-6. If we did not include (cid:2), an at-
tacker could expend the computational effort to ﬁnd a solution to
a level 7 puzzle, and receive solutions to lower-level puzzles “for
free”. Committing to (cid:2) by including it in the hash prevents this.
3.6 Puzzle Veriﬁcation by the Router
Because puzzle seeds are included in each packet and can be ver-
iﬁed with the hash-chain, routers only need to update their hash ver-
iﬁcation state when a new hash-chain begins (e.g., yearly). When a
router receives a packet that includes a puzzle solution, it ﬁrst ver-
iﬁes the authenticity of the seed hi for the puzzle. The authenticity
of hi can be veriﬁed by computing H(hi||i) and comparing it with
the seed released in the last time slot (hi+1). If trafﬁc arrives spo-
radically at a router, the router may need to hash hi several times
and compare each value with a previous seed seen by the router
to verify its authenticity. However, since each seed is valid for t
minutes, a new seed need only be veriﬁed a single time, and veriﬁ-
cation can consist of a simple equality check for the remainder of
the period.
To verify the puzzle solution, the router computes the same hash
shown in Equation 1, using the nonce r, the seed hi, the sender-
supplied solution x, and the destination IP in the request packet.
The router accepts the puzzle solution if the last (cid:2) bits of p are
zero. With Portcullis, the router only needs to compute a single
hash to verify the solution to a puzzle.
3.7 Router Scheduling Algorithm
The router’s request channel scheduling algorithm should: 1)
limit reuse of puzzle solutions, and 2) give preference to senders
who have solved higher-level puzzles.
When requests arrive at a router, the associated puzzle is ﬁrst