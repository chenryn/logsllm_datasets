    using System.ServiceModel;
    using System.Windows;
    using Wrox.ProCSharp.WCF.Contracts;
    namespace RoomReservationClientSharedAssembly
    {
      public partial class MainWindow : Window
      {
        private RoomReservation _roomReservation;
        public MainWindow()
        {
        InitializeComponent();
        _roomReservation = new RoomReservation
        {
          StartTime = DateTime.Now,
          EndTime = DateTime.Now.AddHours(1)
        };
        this.DataContext = _roomReservation;
        }
        private void OnReserveRoom(object sender, RoutedEventArgs e)
        {
        var binding = new BasicHttpBinding();
        var address = new EndpointAddress(
          "http://localhost:9000/RoomReservation");
        var factory = new ChannelFactory(binding, address);
        IRoomService channel = factory.CreateChannel();
        if (channel.ReserveRoom(_roomReservation))
        {
          MessageBox.Show("success");
        }
        }
      }
    }
44.3 协定
协定定义了服务提供的功能和客户端可以使用的功能。协定可以完全独立于服务的实
现。
由WCF定义的协定可以分为4种不同的类型：数据协定、服务协定、消息协定和错误
协定。协定可以用.NET特性来指定：
● 数据协定——数据协定定义了从服务中接收和返回的数据。用于收发消息的类关联
了数据协定特性。
● 服务协定——服务协定用于定义描述了服务的WSDL。这个协定用接口或类定义。
● 操作协定——操作协定定义了服务的操作，在服务协定中定义。
● 消息协定——如果需要完全控制SOAP消息，那么消息协定就可以指定应放在SOAP
标题中的数据以及放在SOAP正文中的数据。
● 错误协定——错误协定定义了发送给客户端的错误消息。
下面几节将详细探讨这些协定类型，并进一步讨论定义协定时应考虑的版本问题。
44.3.1 数据协定
在数据协定中，把CLR类型映射到XML架构。数据协定不同于其他.NET序列化机
制。在运行库序列化中，所有字段都会序列化（包括私有字段），而在XML序列化中，
只序列化公共字段和属性。数据协定要求用DataMember特性显式标记要序列化的字段。
无论字段是私有或公共的，还是应用于属性，都可以使用这个特性。
    [DataContract(Namespace="http://www.cninnovation.com/Services/2016"]
    public class RoomReservation
    {
      [DataMember] public string Room { get; set; }
      [DataMember] public DateTime StartTime { get; set; }
      [DataMember] public DateTime EndTime { get; set; }
      [DataMember] public string Contact { get; set; }
      [DataMember] public string Text { get; set; }
    }
为了独立于平台和版本，如果要求用新版本修改数据，且不破坏旧客户端和服务，则
使用数据协定是指定要发送哪些数据的最佳方式。还可以使用XML序列化和运行库序列
化。XML序列化是ASP.NET Web服务使用的机制，.NET Remoting使用运行库序列化。
使用DataMember特性，可以指定表44-1中的属性。
表44-1
用DataMember指定的
属性
说明
Name
序列化元素的名称默认与应用了[DataMember]特性的字段或
属性同名。使用Name属性可以修改该名称
Order
Order属性指定了数据成员的序列化顺序
IsRequired
使用IsRequired属性，可以指定元素必须经过序列化才能接
收。这个属性可以用于解决版本问题。如果在已有的协定中
添加了成员，则协定不会被破坏，因为在默认情况下字段是
可选的（IsRequired=false）。将IsRequired属性设置为true，
就可以破坏已有的协定
EmitDefaultValue
EmitDefaultValue属性指定有默认值的成员是否应序列化。
如果把EmitDefaultValue属性设置为true，则具有该类型的默
认值的成员就不序列化
44.3.2 版本问题
创建数据协定的新版本时，要注意更改的种类，如果应同时支持新旧客户端和新旧服
务，则应执行相应的操作。
在定义协定时，应使用DataContractAttribute的Namespace属性添加XML名称空间信
息。如果创建了数据协定的新版本，破坏了兼容性，就应改变这个名称空间。如果只添加
了可选的成员，就没有破坏协定——这就是一个可兼容的改变。旧客户端仍可以给新服务
发送消息，因为不需要其他数据。新客户端可以给旧服务发送消息，因为旧服务仅忽略额
外的数据。
删除字段或添加需要的字段会破坏协定。此时还应改变XML名称空间。名称空间的
名称可以包含年份和月份，如http://www.cninnovation.com/Services/2016/08。每次做了破
坏性的修改时，都要改变名称空间，如把年份和月份改为实际值。
44.3.3 服务协定和操作协定
服务协定定义了服务可以执行的操作。ServiceContract特性与接口或类一起使用来定
义服务协定。由服务提供的方法通过IRoomService接口应用OperationContract特性，如下
所示：
    [ServiceContract]
    public interface IRoomService
    {
      [OperationContract]
      bool ReserveRoom(RoomReservation roomReservation);
    }
可能用ServiceContract特性设置的属性如表44-2所示。
表44-2
用ServiceContract设置
的属性
说明
ConfigurationName
这个属性定义了配置文件中服务配置的名称
CallbackContract
当服务用于双工消息传递时，CallbackContract属性定义了在
客户端实现的协定
Name
Name属性定义了WSDL中元素的名称
Namespace
Namespace属性定义了WSDL中元素的XML名称
空间
SessionMode
使用SessionMode属性，可以定义调用这个协定的操作时是
否需要会话。其值用SessionMode枚举定义，包括Allowed、
NotAllowed和Required
ProtectionLevel
ProtectionLevel属性指定了绑定是否必须支持保护通信。其
值用ProtectionLevel枚举定义，包括None、Sign和
EncryptAndSign
使用OperationContract特性可以指定如表44-3所示的属性。
表44-3
用OperationContract指
定的属性
说明
Action
WCF使用SOAP请求的Action属性把该请求映射到相应的方
法上。Action属性的默认值是协定XML名称空间、协定名和
操作名的组合。该消息如果是一条响应消息，就把Response
添加到Action字符串中。指定Action属性可以重写Action
值。如果指定值“*”，服务操作就会处理所有消息
ReplyAction
Action属性设置了入站SOAP请求的Action名，而
ReplyAction属性设置了回应消息的Action名
AsyncPattern
如果使用异步模式来实现操作，则把AsyncPattern属性设置
为true。异步模式详见第15章
IsInitiating
IsTerminating
如果协定由一系列操作组成，且初始化操作本应把
IsInitiating属性赋予它，则该系列的最后一个操作就需要指
定IsTerminating属性。初始化操作启动一个新会话，服务器
用终止操作来关闭会话
IsOneWay
设置IsOneWay属性，客户端就不会等待回应消息。在发送
请求消息后，单向操作的调用者无法直接检测失败
Name
操作的默认名称是指定了操作协定的方法名。使用Name属
性可以修改该操作的名称
ProtectionLevel
使用ProtectionLevel属性可以指定消息是应只签名，还是应
加密后签名
在服务协定中，也可以用[DeliveryRequirements]特性定义服务的传输要求。
RequireOrdered-Delivery属性指定所发送的消息必须以相同的顺序到达。使用
QueuedDeliveryRequirements属性可以指定消息以断开连接的模式发送，例如使用消息队
列。
44.3.4 消息协定
如果需要完全控制SOAP消息，就可以使用消息协定。在消息协定中，可以指定消息
的哪些部分要放在SOAP标题中，哪些部分要放在SOAP正文中。下面的例子显示了
ProcessPersonRequest-Message类的一个消息协定。该消息协定用MessageContract特性指
定。SOAP消息的标题和正文用MessageHeader和MessageBodyMember特性指定。指定
Position属性，可以确定正文中的元素顺序。还可以为标题和正文字段指定保护级别。
    [MessageContract]
    public class ProcessPersonRequestMessage
    {
      [MessageHeader]
      public int employeeId;
      [MessageBodyMember(Position=0)]
      public Person person;
    }
ProcessPersonRequestMessage类与用IProcessPerson接口定义的服务协定一起使用：
    [ServiceContract]
    public interface IProcessPerson
    {
      [OperationContract]
      public PersonResponseMessage ProcessPerson(
        ProcessPersonRequestMessage message);
    }
与WCF服务相关的另一个重要协定是错误协定，这个协定参见44.3.5节。
44.3.5 错误协定
默认情况下，在服务中出现的详细异常消息不返回给客户应用程序。其原因是安全
性。不应通过服务把详细的异常消息提供给第三方。异常应记录到服务上（为此可以使用
跟踪和事件日志功能），包含有用信息的错误应返回给调用者。
可以抛出一个FaultException异常来返回SOAP错误。抛出FaultException异常会创建一
个非类型化的SOAP错误。返回错误的首选方式是生成强类型化的SOAP错误。
应与强类型化的SOAP错误一起传递的信息用数据协定定义，如下面的
RoomReservationFault类所示（代码文件
RoomReservation/RoomReservationContracts/RoomReservationFault.cs）：
    [DataContract]
    public class RoomReservationFault
    {
      [DataMember]
      public string Message { get; set; }
    }
SOAP错误的类型必须用FaultContractAttribute和操作协定定义：
    [FaultContract(typeof(RoomReservationFault))]
    [OperationContract]
    bool ReserveRoom(RoomReservation roomReservation);
在实现代码中，抛出一个FaultException异常。在构造函数中，可以指定一
个新的TDetail对象，在本例中就是StateFault。另外，FaultReason中的错误信息可以赋予
构造函数。FaultReason支持多种语言的错误信息。
    FaultReasonText[] text = new FaultReasonText[2];
    text[0] = new FaultReasonText("Sample Error", new CultureInfo("en"));
    text[1] = new FaultReasonText("Beispiel Fehler", new CultureInfo("de"));
    FaultReason reason = new FaultReason(text);
    throw new FaultException(
      new RoomReservationFault() { Message = m }, reason);
在客户应用程序中，可以捕获FaultException类型的异常。出
现该异常的原因由Message属性定义。RoomReservationFault用Detail属性访问。
    try
    {
      // etc.
    }
    catch (FaultException ex)
    {
      WriteLine(ex.Message);
      StateFault detail = ex.Detail;
      WriteLine(detail.Message);
    }
除了捕获强类型化的SOAP错误之外，客户应用程序还可以捕获
FaultException的基类的异常：FaultException异常和CommunicationException异
常。通过捕获CommunicationException异常还可以捕获与WCF通信相关的其他异常。
  注意： 在开发过程中，可以把异常返回给客户端。为了传播异常，需要使用
serviceDebug元素配置一个服务行为配置。serviceDebug元素的IncludeException-
DetailInFaults特性可以设置为true来返回异常信息。
44.4 服务的行为
服务的实现代码用ServiceBehavior特性标记，如下面的RoomReservationService类所
示：
    [ServiceBehavior]
    public class RoomReservationService: IRoomService
    {
      public bool ReserveRoom(RoomReservation roomReservation)
      {
        // implementation
      }
    }
ServiceBehavior特性用于描述WCF服务提供的操作，以截获所需功能的代码，如表
44-4所示。
表44-4
用ServiceBehavior指定的属性
说明
TransactionAutoComplete-
OnSessionClose
当前会话正确完成时，就自动提交该事务。这类似
于Enterprise Services中的AutoComplete特性
TransactionIsolationLevel
要定义服务中事务的隔离级别，可以把
TransactionIsolationLevel属性设置为IsolationLevel
枚举的一个值
ReleaseServiceInstanceOn-
TransactionComplete
完成事务处理后，可回收服务的实例
AutomaticSessionShutdown
如果在客户端关闭连接时没有关闭会话，就可以把
AutomaticSessionShutdown属性设置为false。在默
认情况下，会关闭会话
InstanceContextMode
使用InstanceContextMode属性，可以确定应使用有
状态的对象还是无状态的对象。默认设置为
InstanceContextMode.PerCall，用每个方法调用创建
一个新对象。其他可能的设置有PerSession和
Single。这两个设置都使用有状态的对象。但是，
PerSession会为每个客户端创建一个新对象，而
Single允许在多个客户端共享同一个对象
ConcurrencyMode
因为有状态的对象可以由多个客户端（或同一个客
户端的多个线程）使用，所以必须注意这种对象类
型的并发问题。如果把ConcurrencyMode属性设置
为Multiple，则多个线程可以访问对象，但必须处
理同步问题。如果把该属性设置为Single，则一次
只有一个线程能访问对象，但不必处理同步问题；
如果客户端较多，则可能出现可伸缩性问题。
Reentrant值表示只有从调用返回的线程才能访问对
象。对于无状态的对象，这个设置没有任何意义，
因为每个方法调用都会实例化一个新对象，所以不
共享状态
UseSynchronizationContext
在用户界面代码中，控件的成员都只能从创建者线
程中调用。如果服务位于Windows应用程序中，其
服务方法调用控件成员，则把
UseSynchronizationContext属性设置为true。这样，