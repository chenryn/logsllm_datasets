---
## Page 377
第91章
编译器的智能短板
智能知
Inte1 C+10.1（在 Linux x86平台上编译Oracle RDBMS 11.2的编译器）有时候会生成两个连续的 JZ
指令，实际上第二条JZ指令不会被执行、没有实际意义。
指令清单91.1kdli.o fromlibserver11.a
-text:08114CF1
1oc_8114CF1: : C0DE XR&F: __PG0SF539_kdlinenSer+89A
7_PG0SF539_kd1imenSer+3994
-text:08114CF4 0F B6 50 14
.text:08114CF1
18B 45 0B
nOVEX
A0U
edx, byte ptr [eax+14h]
[0"6ae+dqe] *xea
-text:08114CF8 r6 C2 01
.text:08114CFB 0r 85 17 08 00 00
test
d1,1
-text:08114D01 85 C9
test
jnz
1oc_8115518
-text:08114D03 0F 84 8A 00 00 00
eCX, 9Cx
-text:08114009 0F 84 09 08 00 00
1oc_8114093
-text:0811400F 8B 53 0B
1oc_8115518
-text:08114012 89 55 FC
mOV
[8+xqa] *xpe
[ebp*var_4], edx
-text:08114D15 31 C0
xor
.text:08114D17 89 45 F4
eax, eax
,text:0811401A 50
push
MOV
dga]
o+var_C], eax
-text:08114018 52
.text:08114D1C 88 03 54 00 00
push
ca11
esp, 8
80 $0 c8 120118013x93*
add
8 *deo
上述文件中，另有一处也存在这种问题。
指令清单 91.2from the same code
.text:0811A2A5
1oc_811A2A5: : co0E XREF: kd1iSerLengths+11C
.text:0811A2A5 8B 7D 08
,text :0811A2A5
: kdLiSerlengths+1C1
.text:0811A2A8 8B 7F 10
BoV
edl, [edi+10h]
[0°bxe+dqa]*1pa
-text:0811A2AB 0F B6 57 14
0v
-text:0811A2AF F6 C2 01
movzX
edx, byte ptr [edi+14h]
test
d1, 1
.text:0811A282 75 3E
Jnz
short 1oe_811A2P2
-text:0811A284 83 E0 01
-text:0811A2B7 74 1F
anid
eax, 1
short 1oc_811A208
-text:0811A288 6A 00
.text:0811A2B9 74 37
push
short 1oc_811A2F2
-text:0811A2BD EF 71 08
push
[g+x]xdprop
D
-text:0811A2C0 E8 5F FE FF FF
cal1
1en2nbytes
这些问题可能属于编译器的bug。但是它们生成的程序不会受到该bug的影响，所以可能被测试人员
遗漏了下来。本书的19.2.4节、39.3节、47.7节、18.7节、12.4.1节、19.5.2节中都演示了这种问题。
本文演示了这些编译器问题，以证明编译器确实可能出现汇爽所思的奇怪行为。如果遇到了这种现象，
读者不必绞尽脑汁地去琢磨“编译器为什么生成这种逾异代码”。
---
## Page 378
第92章
OpenMP
OpenMP是一种相对简单的、实现多线程并发功能的编程API。
本章将以加密学意义上的非重复随机数nonce为例，演示OpenMP的应用方法。下面这段代码把nonce
和不加密的明文进行串联（即添加），以进行非可逆加密，从而增加截获、破解密文的难度。此外，Bitcion
协议约定，在某个阶段中通过nonce使消息块的hash包含特定长度的、连续的零，这种机制又叫作“prove
制证明它已经采取了精密面耗时的计算。
虽然下面这段代码和 Bitcoin 没有直接关系，但是功能颜为类似。它会向字符串“hello，word!_”添加
一个数字，使得“hello，word！_”的SHA512hash包含三个或三个以上的0字节。
假设穷举的区间为[0,INT32最大数1]（即0~0x7FFFFFFE/2147483646)。
整个算法并不复杂：
include 
finclude 
include 
W*ztseue, epntous#
#include 
int found=0;
Lnt32_t checked=0;
Int32_t* _nin,
[nt32_t* _nax)
time_t atart)
tifdef _GNUc_
fdefine min (X, Y)
)((X)  (Y)? (X):  (Y))
fendif
roid check_nonce (1nt32_t nonce)
ulnt8_t buf[32];
struct sha512_ctx ctxJ
uint8_t res[64];
Int t=onp_get_thread_nun()1
stestiers asepdn //
if (_nin[t]-·-1)
if (nax[t]*-1)
_nin[t]=nonce;
_aax[t]=nonce)
_min[t]nin[_min[t],。 nonce)
max[t]=max[_sax[t], nonce) 
if (found)
// 1dle 1f valid nonce found
return,
---
## Page 379
第92章OpenMP
855
nemset (buf, 0, sizeof (buf)))
sprintf (buf, *sello, vorld!_td°, nonce)
sha512_init_ctx (sctx)
sha512_process_bytes (buf, strlen (buf), sctx):
sha512_finish_ctx [6ctx, 6res]:
f (res[0]=0 ss res[1]=0 ss res[2]==0]
printf (*found (thread sd) : [ts] . seconds spent=td’n*, t, buf, tise (NULL)=atart))
found=1
pragna onp atonic
checked++
pragma onp critical
if ((checked  100000)==0)
pzintf (*checked-id\n*, checked);
Lnt nain ()
int threads=onp_get_nax_threads [) )
int32_t 17
printt (*threads=id’in*, threads);
_min=(int32_t*)salloe(threads*slzeof (int32_t1)
for (i=0; i<threads: 1++)
_max=(1nt32_t*)malloc(threads*s1zeof (1nt32_t)1)
_nin[i]=_sax[1]=1
start=tine (NULL) :
pragaa omp parallel for
for (1=0; 1<INT32_MX; 1++)
check_nence (1);
for (1=0; 1<threads; 1++)
printt (*_=in[$d]=0xs08x _nax[4d]=xk08xn*, 1, _min[5], , _max[5.]];
free (_min); free(_nax);
1F
函数check_nonceO有3个作用：向字符串添加数字、使用 SHA512算法计算新字符串的hash、检查
hash 中是否有3个为0的字节。
这段代码中较为重要的部分是：
lpragna onp parallel for
for (1=0; 1<INT32_MX; 1++)
check_nonce (1)}
这个程序确实不复杂，如果没有pragma，程序会从0依次穷举到INT32的最大值（0x7册r，即2147483647），
依次用check_nonce()函数验证，加上ipragma之后，编译器会添加特定的代码把整个区间划分为若干子区
间，充分利用CPU的多核进行并行运算。
我们可以通过下述指令，使用MSVC2012进行编译°：
cl opennp_example.c sha512.cb)/openmp /01 /Z1 /Faopermp_exanple.asm
GCC对应的编译指令为：
①本例仅为示范性说明。在实际情况下，使用OpenMP技术往往更为图难、复杂。
②sha512.（ch）和u64.h的源文件可照覆OpcnSSL的库文件：hmp/lww.opensl.orgource/，
---
## Page 380
856
逆向工程权威指南（下册）
gec fopennp 2,c sha512,c =S -masn=inte1
92.1MSVC
MSVC2012生成的主循环的指令如下所示
指令清单92.1MSVC2012
push
Push
push
ca11
x20gdacox
add
esp, 16
： 000000108
所有以vcomp开头的函数都是与OpenMP有关的函数，通过vcomp*.dll进行加载。它将发起一组线程
进行并行计算。
具体来说，_mainSompS1的汇编代码如下所示。
指令清单92.2MSVC2012
8= = L$
; 8ize = 4
$T2 - -4
 size = 4
_nain$onp$1 PROC
 COMDAT
push
mov
ebp
ebp
push
eCX
esp
push
push
ecx
lea
es1
push
esx,
DHORD PTR $T2 [ebp]
Lea
eax,
eax
push
ebx
DWCRD PTR $T1[ebp]
push
push
1 
push
push
2147483646
:7ffffffek
ca11
esl,
_vconp_for_static_simple_init
add
nov
CWORD PTR ST1[ebp]
ep，24
TSduoguTew9NTs L8OHS
：00000018H
SLL2erain$onp$1:
jmp
push
ca11
es1
pop
_check_nonce
ecx
$186Beain$onp511
es1
SHO8T SLL28mainSomp$1
es1, DWORD PTR $T2[ebp]
ca11
_vconp_foz_static_end
pop
leave
T89
_sainSomp$1 ENDP
ret
0
这个函数会启动n个并发线程，其中n就是CPU核芯（cores）的总数。函数vcomp_for_static_simple_inin0
计算当前线程里for0结构体的区间，而区间的间隔则由当前线程的总数决定。循环计数器的起始值和结束
值分别存储于局部变量ST1和ST2.细心的读者可能注意到函数vcomp_for_static_simple_initO的一个参数为
0x7ffeh（即2147483646）—它是整个循环体的选代次数，最终会被=整除。
接下来程序发起了调用函数check_nonce0的循环，完成余下的工作。
我在源代码的check_nonceO函数中有意添加了统计代码，用来统计参数被调用的次数。
---
## Page 381
第92章OpenMP
857
整个程序的运行结果如下：
threads=4
checked=2800000
checked=3200000
checked=3000000
checked=3300000
found (thread 3): [he11o, vor1d1_1611446522]. secoeds spent=3
_xin[0]-Ox0ooo _msx[0]-0x1fffffff
_xin[1]=0x2000000 _nax[1]=0x3tftttf
_min[3]-0x600o000 _nax[3]=0x7Efffffe
_xLn[2]=0x40000000
_max[2]=0x5fffffff
计算结果的前3个字节确实是零：
C:..-Lsha512sum test
df6e3fe6019f5764fe9975e505a7395fed780fee50eb38d54c0279cb114672e2 *test
000000f4a8fac5a4ed38794da4c1e39f54279ad5d9bb3c5465cdf57adaf60403
在笔者的4核 Intel Xeon E3-1220 3.10Ghz CPU上运行这个程序，总耗时大约2~3秒。我们可以在任
务管理器中看到5个线程：1个主线程和4个子线程。虽然理论上它还有精简的空间，但是我没有对程序
源代码进行深度优化。深度优化应当可以大幅度提升它的运行效率。另外，因为我的CPU有4个内核，所
以它发起了4个子线程—这完全符合OpenMP规范。
通过程序输出的统计数据，我们可以清楚地观察到整个穷举空间被划分为大致相等的四个部分。严格
地说，考虑到最后一个比特位，这四个区间确实并非完全相等。
OpenMP 还提供了保障模块crtomic（原子性）的Pnugms 指令。顾名思义，被标记为原子性的代码不
会被拆分为多个子线程运行。我们来看看这段代码：
#pragna onp atonic
checked++/
pragma omp critica1
if ((checked s 100000)0)
printf (*checked=id\n*, checked);
经MSVC2012编译，上述代码对应的汇编指令如下所示。
指令清单92.3MSVC2012
push
push
ed1
; Line
ca11
55
vconp_atonic_add_14
push
OFPSST _SvconpScritsectS
TTeo
add
_vcong_enter_critsect
: Line 56
esp, 12
0000000cH
A0%
ecx,
DMORD PTR _checked
cdg
eax, ecK
es1, 100000
：000186a0H
ATPT
test
T99
SHORT $INI8check_nonc
edx, edx
Jne
push
push
OFFSET 77_Ce_0M8NPNHL.1008checked7$087$CFd767$AA8
ecx
ca11
_printf
pop
ecx
pop
ecx
---
## Page 382
858
逆向工程权威指南（下册）
push
DMORD PTR _Svcomp$critsect$
ca11
_vcomp_leave_critsect
pop
ecx
函数 vcomp_enter_critsect) 调用的是 Win32 API函数 EnterCriticalSection)°。
92.2
GCC
经GCC4.8.1生成的程序，其统计结果和上面的程序一样。所以GCC分割区间的方法与MSVC相同。
指令清单92.4GCC4.8.1
IOV
edi, oFFSET FLAT:main._onp_fn.0
ca11
mov
GoMP_parallel_start
ca11
edl, 0
maLn._omp_fn,0
ca11
pua"t9treaed'gx00
由GCC编译生成的程序，会发起3个新的线程，原有线程扮演第4进程的角色。所以，总体上GCC的进
程数是4.MSVC的进程数是5.
其中，函数main_omp_fn.0的代码如下所示。
指令清单92.5GCC4.8.1
na:in._omp_fn,01
push
rbp
mov
push
rbp,
rbx
rsp
sub
A0S
ap.40
Q80RD PTR [rbp=40], rdi
ca11
ebx, eax
onp_.et_num_thread8
ca11
mov
onp_get_thread_nut
0V
AOU
eax, 2147483647 : 0x777
cdq
idiv
ecx, eax
ebx
AOU
Mov
eax, 2147483647 : 0x7F
cdq
1d1v
mOv
eax,
ebx
edx
onp
esi, eax
.L181
31
STT·
1mu1
MOv
es1, ecx
add
edx, es1
lea
eax,
[x03+xe3]
edx
cnp
ebx,
)ge
'xea
-L14
ebx
MOV
D8CRD PTR [rbp-20], eax
.L17:
eax, DwoRD PTR [rbp-20]
ca11
A0W
edi, eax