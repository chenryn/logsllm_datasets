### 文件 I/O 操作

#### 2.3.1 `write()` 调用
```c
ssize_t ret, nr;
while (len != 0 && (ret = write(fd, buf, len)) != 0) {
    if (ret == -1) {
        if (errno == EINTR)
            continue;
        perror("write");
        break;
    }
    len -= ret;
    buf += ret;
}
```

#### 2.3.2 追加模式
当文件描述符 `fd` 以追加模式（`O_APPEND`）打开时，写操作将数据追加到文件末尾。多个进程同时对同一个文件进行写操作时，每个进程的写入内容将按顺序附加到文件末尾。这种模式确保了写操作的原子性，即每次写操作都是一个完整的更新。

#### 2.3.3 非阻塞写
当文件描述符 `fd` 设置为非阻塞模式（`O_NONBLOCK`）时，如果 `write()` 调用无法立即完成写操作，则会返回 `-1` 并设置 `errno` 为 `EAGAIN`。此时需要处理文件的重新写入。

#### 2.3.4 其他错误码
- **EBADF**: 给定的文件描述符无效或未以写方式打开。
- **EFAULT**: 缓冲区 `buf` 不在进程的地址空间内。
- **EFBIG**: 写操作将使文件大小超过系统限制。
- **EINVAL**: 给定的文件描述符不支持写操作。
- **EIO**: 发生了I/O错误。
- **ENOSPC**: 文件系统没有足够的空间。
- **EPIPE**: 对端已关闭管道或套接字的读取端，进程将收到 `SIGPIPE` 信号。

#### 2.3.5 `write()` 大小限制
`write()` 调用的最大写入量受 `SSIZE_MAX` 限制。如果 `count` 为零，`write()` 调用将立即返回 `0`。

#### 2.3.6 `write()` 的行为
`write()` 调用会将数据从用户空间复制到内核缓冲区，然后由内核负责将数据写入磁盘。实际的写操作可能会延迟，直到内核决定将缓冲区中的数据刷新到磁盘。这种机制提高了效率，但可能导致写操作不是立即完成。

#### 2.4 同步 I/O
同步 I/O 确保写操作完成后才返回。这可以提高性能，但会增加写操作的时间。

##### 2.4.1 `fsync()` 和 `fdatasync()`
- **`fsync()`**:
  ```c
  #include <unistd.h>
  int fsync(int fd);
  ```
  `fsync()` 将所有修改同步到磁盘，包括数据和元数据。

- **`fdatasync()`**:
  ```c
  #include <unistd.h>
  int fdatasync(int fd);
  ```
  `fdatasync()` 只同步数据，不包括元数据。这在某些情况下可以提高性能。

##### 2.4.2 返回值和错误码
- 成功时返回 `0`，失败时返回 `-1` 并设置 `errno`。
  - **EBADF**: 文件描述符无效。
  - **EINVAL**: 文件描述符不支持同步操作。
  - **EIO**: 同步操作中发生I/O错误。

##### 2.4.3 `sync()`
`sync()` 函数将所有脏数据页和元数据页同步到磁盘。
```c
#include <unistd.h>
void sync(void);
```

##### 2.4.4 `O_SYNC` 标志
`O_SYNC` 标志在 `open()` 时使用，确保文件上的所有I/O操作是同步的。
```c
int fd;
fd = open(file, O_WRONLY | O_SYNC);
if (fd == -1) {
    perror("open");
    return -1;
}
```

##### 2.4.5 `O_DSYNC` 和 `O_RSYNC`
- **`O_DSYNC`**: 确保数据同步，但不包括元数据。
- **`O_RSYNC`**: 读写操作都同步。Linux 上通常等同于 `O_SYNC`。

#### 2.5 直接 I/O
直接I/O绕过内核缓存，直接在内存和设备之间传输数据。这可以提高性能，但需要手动管理缓存。
```c
int fd = open(file, O_DIRECT);
```

#### 2.6 关闭文件
`close()` 函数关闭文件描述符并释放相关资源。
```c
#include <unistd.h>
int close(int fd);
```

#### 2.7 使用 `lseek()` 查找
`lseek()` 函数用于移动文件指针。
```c
#include <unistd.h>
off_t lseek(int fd, off_t offset, int whence);
```
- **`SEEK_SET`**: 从文件开头偏移。
- **`SEEK_CUR`**: 从当前位置偏移。
- **`SEEK_END`**: 从文件末尾偏移。

#### 2.8 定位读写
`pread()` 和 `pwrite()` 函数允许在指定位置读写文件。
```c
#include <fcntl.h>
ssize_t pread(int fd, void *buf, size_t count, off_t offset);
ssize_t pwrite(int fd, const void *buf, size_t count, off_t offset);
```

#### 2.9 截短文件
`ftruncate()` 和 `truncate()` 函数用于截断文件。
```c
#include <sys/types.h>
#include <unistd.h>
int ftruncate(int fd, off_t length);
int truncate(const char *path, off_t length);
```

示例：
```c
#include <unistd.h>
#include <fcntl.h>

int main() {
    int ret;
    ret = truncate("./pirate.txt", 45);
    if (ret == -1) {
        perror("truncate");
    }
    return 0;
}
```

这些函数和标志提供了对文件I/O操作的灵活控制，可以根据具体需求选择合适的选项。