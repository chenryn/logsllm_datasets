真的写的
。的处 write() 调能
调进写（。
的示
ssize_t ret, nr;
while (len != 0 && (ret = write (fd, buf, len))
!= 0) {
if (ret == -1) {
if (errno == EINTR)
continue;
perror (”write”);
break;
}
len -= ret;
buf += ret;
}
– 35 –
 2 
文件 I/O
2.3.2 追加模式
 fd 式时（ O APPEND 写操作文
件的文件。
设进程同文件写。式的
进程文件写进程进程的文件
将文件将文件进程写的的
方。进程进式的同步能进写操作
们存件。
式的。文件文件
的写操作的即写。以写的文件
更新操作原子操作。文件更新写的。
write() 调更新文件自的能的原
 read() 调。
式更新文件方
处。
2.3.3 非阻塞写
 fd 式时（设 O NONBLOCK )的
写操作时 write() 调 -1设 errno  EAGAIN。
新。处理文件时出。
2.3.4 其他错误码
的
EBADF
给的文件或以写方式的。
EFAULT buf 进程空间内。
item [EFBIG] 写操作将文件小超进程的文件或内
实的。
item [EINVAL] 给的文件对的对能进写操作。
item [EIO]  I/O 。
item [ENOSPC] 文件的文件的空间。
item [EPIPE] 给文件的或的读。进程
– 36 –
 2 
文件 I/O
将 SIGPIPE 。 SIGPIPE 的
的进程。进程能或处理时
。
2.3.5 write() 大小限制
 count  SSIZE MAX  write() 调的的。 count 
零的 write() 调将即 0。
2.3.6 write() 的行为
 write() 调时内将提的内
写的文件。 write 调对的
实。处理的异。
空间 write() 调时 Linux 内进然
将。内集的” 
将们写上（程写。 write 调
上调。内以将写操作空段将写操
作处理。
写 POSIX 的。 read 调
读写写的将
读上的。实上提效率 read
内存存读。读写
然提写
即对程写操作写
。
写的对写的能性。
能的写以们将写出性能方的
内将的新。时
将写。绝的实上写
。
写的 I/O 的。何写出的
I/O 方理给写的
进程。实上进程的。进程能更新同
– 37 –
 2 
文件 I/O
的进程能写出。
能写操作的进程
内将写的小。时写内
存时效将的存们超给时效写。
以 /proc/sys/vm/dirty expire centiseconds 。以
（。
文件存写以的以将的写操作同步。将
的同步 I/O。
内内将 Linux 内的写子。
2.4 同步 I/O
同步 I/O 的写相的。
写提的性能进以子的
实写。然写的时间。对
 Linux 内提性能同步操作。
2.4.1 fsync() 和 fdatasync()
单的写的方 fsync() 调 POSIX.1b
#include 
int fsync (int fd);
调 fsync() 以 fd 对文件的写上。文件 fd 
以写方式的。调写以及的时间 inode 的属性
。写。
将写存时 fsync() 能上
。能写能的存上。
的存的将写。
Linux 提 fdatasync() 调
#include 
– 38 –
 2 
文件 I/O
int fdatasync (int fd);
调的 fsync() , 写。调
同步上能。。
相同的单
int ret;
ret = fsync (fd);
if (ret == -1)
/* error */
调何更新的文件的同步
上。文件更文件能写
相的上文件。何对的更
新同步上对调 fsync() 进同步。
2.4.2 返回值和错误码
时调 0。时 -1将 errno 设以
EBADF
给的文件以写的。
EINVAL 给的文件对的对同步。
EIO
同步时 I/O 。示真的 I/O 
处。
即相文件上实 fdatasync() 实 fsync(), 调
 fsync() 时。的能 fsync()  EINVAL 时
fdatasync()示
if (fsync (fd) == -1) {
/*
* We prefer fsync(), but let’s try fdatasync(
)
* if fsync( ) fails, just in case.
– 39 –
 2 
文件 I/O
*/
if (errno == EINVAL) {
if (fdatasync (fd) == -1)
perror (”fdatasync”);
} else
perror (”fsync”);
}
 POSIX  fsync() 的 fdatasync() 的 fsync() 
的、文件的 Linux 文件实。然文件
（能同步的文件或的文件或
实 fdatasync()。
2.4.3 sync()
sync() 调以对上的进同步, 效率
然
#include 
void sync (void);
。的
能写。∗
 sync() 写
调将将写的程即。同步
以的的写。然对 Linux  sync() 
的写。调 sync() 。
sync() 真上的方工 sync 的实。程 fsync()
 fdatasync() 将文件的同步。的能
的上 sync() 操作能的时间。
∗以, 以能, 内写
上实上们存。
– 40 –
 2 
文件 I/O
2.4.4 O SYNC 标志
O SYNC  open() 文件上的 I/O 操作同步。
int fd;
fd = open (file, O_WRONLY | O_SYNC);
if (fd == -1) {
perror (”open”);
return -1;
}
读同步的。同步将读的效
性。然的 write() 调同步的。调
写间。 O SYNC 将
write() 调进 I/O 同步。
O SYNC  write() 操作式 fsync()。
上的 Linux 内实的 O SYNC 更效。
O SYNC 将写操作及内时间（内空
间的时间。写文件的小能的时间进
程的 I/O 时间 ( I/O 的时间) 上时的 O SYNC 时
。时间的以同步 I/O 
的。
写的以 fsync() 或 fdata-
sync()。的调（性的操作相对
 O SYNC 更。
2.4.5 O DSYNC 和 O RSYNC
POSIX  open()        同 步 相  的   O DSYNC 
O RSYNC。 Linux 上 O SYNC 同们相同的。
O DSYNC 写操作同步同
步。写式调 fdatasync() 。 O SYNC 提
更的以 O DSYNC 时能
– 41 –
 2 
文件 I/O
O SYNC 更的性能。
O RSYNC 读写进同步。能
O SYNC 或 O DSYNC 。文读操作同步的
给的时。 O RSYNC 何读操作的作
同步的。读操作更新调写
。实 read() 调文件时间更
新上的 inode 。 Linux 将 O RSYNC 设
O SYNC （ O SYNC  O DSYNC 的同。 Linux 
 O RSYNC 的对的方式 read() 调调
fdatasync()。实上操作。
2.5 直接 I/O
操作内 Linux 内实的存、
以及设备间的 I/O 理的（内内。
性能能的进的 I/O 理。 I/O
实实上操作的工工
更的性能。然们自的存以能的
操作的。
 open()  O DIRECT 内小 I/O 理的。
时 I/O 操作将页存对空间设备进
。的 I/O 将同步的操作。
 I/O 时对文件设备
小 ( 512 ) 的。 2.6 内更 2.4 
的东对文件小（ 4KB。性
对更的（更的小。
2.6 关闭文件
程对文件的操作以 close() 调将文件
对的文件。
#include 
– 42 –
 2 
文件 I/O
int close (int fd);
close() 调的文件的离进程文件的
。给的文件效内以将作的 open() 或 creat()
调的新。 close() 调时 0。时 -1设
 errno 相。单
if (close (fd) == -1)
perror (”close”);
的文件文件写。
文件写同步 I/O的同步。
然文件的作。文件的文件
内示文件的。时文件的
inode 的内存。 inode 能内存
（能内存内效率存 inode能
。文件上
 inode 内存真的。对 close() 的调能
的文件上。
2.6.1 错误码
的 close() 的。处理能
的。操作的原能出 close() 
。
以出时能出的 errno 。 EBADF（给的文件
的 EIO能实的 close
操作相的 I/O 。出的文件的
的的。
 POSIX  close() 绝 EINTR。 Linux 内们能
的实。
– 43 –
 2 
文件 I/O
2.7 用 lseek() 查找
的文件的 I/O 性的读写的文件的式更新
的。然文件。 lseek() 
调能对给文件的文件设。更新文件
的何何 I/O。
#include 
#include 
off_t lseek (int fd, off_t pos, int origin);
lseek() 的以以
SEEK CUR 文件 fd 设上 pos pos 以零或
。零的 pos 文件。
SEEK END 文件 fd 设文件上 pos pos 以零
或。零的 pos 设文件。
SEEK SET 文件 fd 设 pos。零的 pos 设文件
。
调时新文件。时 -1 设的 errno 。
设文件 fd  1825
off_t ret;
ret = lseek (fd, (off_t) 1825, SEEK_SET);
if (ret == (off_t) -1)
/* error */
或设文件 fd 文件
off_t ret;
ret = lseek (fd, 0, SEEK_END);
if (ret == (off_t) -1)
/* error */
– 44 –
 2 
文件 I/O
 lseek() 更新的文件以 SEEK CUR 零文件
int pos;
pos = lseek (fd, 0, SEEK_CUR);
if (pos == (off_t) -1)
/* error */
else
/* ’pos’ is the current position of fd */
然 lseek() 的文件的或
文件的文件。
2.7.1 文件末尾之后进行查找
lseek() 以文件超文件进的。
的将 fd 对的文件 1688 。
int ret;
ret = lseek (fd, (off_t) 1688, SEEK_END);
if (ret == (off_t) -1)
/* error */
对文件文件
的读 EOF。然对写新
间新的空间零。
零方式空（hole。 Unix 的文件上空
何理上的空间。示文件上文件的小
以超的理小。空的文件文件（sparse file。文
件以的空间提效率操作空何理 I/O。
对文件空的读将相的进零。
– 45 –
 2 
文件 I/O
2.7.2 错误码
出时 lseek()  -1将 errno 设
EBADF
给出的文件何的文件。
EINVAL
origin 的 SEEK SET SEEK CUR 或 SEEK END 
或的文件。实上出 EIN-
VAL 的的。时的
能的时。
EOVERFLOW 的文件能 off t 示。 32 
上。文件示能
。
ESPIPE
给出的文件能操作的对上
 FIFO 或。
2.7.3 限制
文件的上 off t 的小。 C
的 long  Linux 上（存的小。内实
内将存 C 的 long long 。处理方 64 上
 32 上作相时能 EOVERFLOW 。
2.8 定位读写
Linux 提 read()  write() 的 lseek()调以
读写的文件。时文件。
读式的调 pread()
#define _XOPEN_SOURCE 500
#include 
ssize_t pread (int fd, void *buf, size_t count,
off_t pos);
调文件 fd 的 pos 文件读 count  buf 。
– 46 –
 2 
文件 I/O
写式的调 pwrite()
#define _XOPEN_SOURCE 500
#include 
ssize_t pwrite (int fd, const void *buf, size_t
count, off_t pos);
调文件 fd 的 pos 文件写 count  buf 。
们文件调的 read()、 wirte() 
们 pos 提的。调时们
文件。何的 read()  write() 调能读写的
。
读写调能以进操作的文件。
相调 read() 或 write()  lseek() 进
: 调更单文件
性的操作时更。, 操作时文件。
的何 lseek() 时能出的。
程文件能程调 lseek() 进读写操作
程文件。我们以 pread()  pwrite() 
的。
2.8.1 错误码
时调读或写的。 pread() 零示 EOF对
pwrite()零调写何东。出时 -1 设
 errno 相。对 pread() 何对 read() 或 lseek() 的 errno 能
出的。对 pwrite() 何 write() 或 lseek() 的 errno 能出的。
2.9 截短文件
Linux 提调文件 POSIX 
（同程的实。们
– 47 –
 2 
文件 I/O
#include 
#include 
int ftruncate (int fd, off_t len);
#include 
#include 
int truncate (const char *path, off_t len);
调将文件 len 的。 ftruncate() 调操作
的写的文件 fd。 truncate() 调操作 path 的
写文件。时 0。时 -1设 errno 相。
调的将文件原文件小。
时文件 len。 len 间的将
读。
们以将文件原更文件
上写操作的。扩展出的将零。
操作文件。
内的 74 小的文件 pirate.txt
Edward Teach was a notorious English pirate.
He was nicknamed Blackbeard.
同的程:
#include 
#include 
int main( )
{
int ret;
– 48 –
 2 
文件 I/O
ret = truncate (”./pirate.txt”, 45);
if (ret == -1) {