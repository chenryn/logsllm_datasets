### 优化后的文本

#### 图8：内存探测和锁定测试的性能下降分布
- **性能下降**：0, 0.8, 1, 1.2, 1.4, 1.5, 1.6, 1.8, 2
- **数值范围**：10, 8, 6, 4, 2, 0

图8展示了在Azure平台上使用40对节点进行内存探测和锁定测试时，性能下降的分布情况。其中，NC表示非共驻（non-coresident），C表示共驻（co-resident）对。请注意，x轴表示性能下降。

在AMD机器上，由于其具有更多关联的缓存（48路 vs. Intel的20路）或对锁定指令的不同处理方式，阈值设为1.5足以避免误报。我们通过手动检查实例并观察到至少50%的一致性能下降来验证这一点。如果任一测试中的性能下降超过该阈值，则确定这对虚拟机是共驻的。我们在任何运行中均未检测到跨架构（误报）的共驻情况。

#### 共驻检测测试的扩展
共驻检测测试在大规模环境中非常耗时，并且随着实例数量的增加呈二次增长。例如，检查40个虚拟机实例需要进行780次配对测试。即使每次完整的共驻测试仅需10秒，顺序执行所有配对测试也需要2小时。并行化可以加速测试，但并发测试可能会相互干扰。

为了并行化测试，我们将所有虚拟机配对集分成若干组，每组中没有重复的虚拟机；然后依次运行这些组，并记录可能共驻的配对。最后，我们对候选共驻配对进行顺序测试。这种方法显著减少了测试所有共驻配对所需的时间。例如，在某个云提供商上的并行版本测试每个配对只需2.4秒，而串行版本则需要46.3秒（提速20倍）。尽管有更快的并行化方法，但我们选择此方法以保持简单性。

#### 测试准确性
注意，性能下降1.5倍、2倍和4倍分别对应于50%、100%和300%的性能下降。如此高的性能下降（即使是50%）也是明确的信号，表明由于资源共享导致共驻。此外，我们对检测到的实例配对进行了多次独立测试，并观察到一致的隐蔽通道信号。因此，我们的方法未检测到任何误报，这对我们的研究来说比漏报更为重要。虽然这里的“共驻”意味着共享内存通道，但这并不总是意味着共享核心或其他每核心硬件资源。

### 4.3 不合作受害者的共驻检测
到目前为止，我们描述了一种检测与合作受害者共驻的方法。在本节中，我们将探讨一种更现实的情况，即攻击者希望检测与仅限于公共接口（如HTTP或键值存储的put-get接口）访问的受害者虚拟机的共驻情况。我们展示了基本的合作共驻检测方法也可以用于检测不合作受害者的共驻情况。

#### 攻击设置
与之前的攻击场景不同，我们假设攻击者除了互联网用户允许的访问外，对受害者虚拟机及其应用程序没有任何其他访问权限。也就是说，受害者应用程序暴露了一个众所周知的公共接口（如HTTP、FTP、键值存储协议），允许传入请求，这也是攻击者唯一能访问受害者的入口点。这个前端服务可以是从缓存或数据存储服务（如memcached、cassandra）到通用web服务器的各种服务。我们还假设可能有多个此类前端服务实例运行在负载均衡器后面。在这种情况下，攻击者希望检测与一个或多个前端受害者虚拟机的共驻情况。

#### 共驻测试
我们通过在攻击者实例中运行内存锁定发送器来适应上一节中使用的内存测试。对于接收器，我们使用受害者公开的接口，通过生成大量请求来使受害者虚拟机命中内存总线。这可以通过循环发送大小接近或大于LLC大小的请求来实现。这创建了一个性能侧信道，泄露了共驻信息。接收器在一个独立的、由攻击者控制的虚拟机中运行，我们称之为共驻检测器。

#### 实验设置
为了评估这种方法的有效性，我们使用了Olio多层web应用程序[12]，该应用程序旨在模拟社交网络应用。我们从CloudSuite[22]中使用了该工作负载的一个实例。尽管Olio支持多个层级（如使用memcached缓存数据库查询结果），但我们将其配置为两个层级，每个web服务器和数据库服务器分别运行在一个t2.small类型的Amazon EC2实例中。多个这样的web服务器实例配置在一个基于HAProxy的负载均衡器后面，该负载均衡器运行在一个m3.medium实例中（以获得更好的网络性能）。负载均衡器遵循标准配置，使用轮询负载均衡算法并通过cookie实现粘性会话。我们认为这种受害者web应用程序及其配置是现实世界中云应用的合理概括。

对于攻击者，我们使用现成的HTTP性能测量工具HTTPerf[28]作为共驻检测测试中的接收器。该接收器在一个t2.micro实例中运行（免费）。我们使用了一组212个请求，包括网页和网页对象（图像、PDF文件）。我们通过手动导航web应用程序并记录访问日志来收集这些请求。

#### 评估方法
我们首先使用合作共驻检测方法确定一对已知共驻的虚拟机。我们将其中一个虚拟机配置为受害者web服务器虚拟机，并启动另外四个虚拟机：两个web服务器、一个数据库服务器和一个负载均衡器，这些虚拟机均不与攻击者虚拟机共驻。

共驻检测开始时，我们测量共驻检测器内部接收器在基准（空闲攻击者）和竞争（攻击者运行内存锁定发送器）情况下的平均请求延迟。在多个样本中，基准和竞争情况之间的显著性能下降揭示了其中一个受害者虚拟机与攻击者虚拟机共驻。在Amazon EC2上，使用上述设置，我们在基准情况下观察到平均请求延迟为4.66毫秒，在内存锁定情况下为10.6毫秒，即性能下降约为2.3倍。

#### 背景噪声
上述测试是在受害者web应用程序空闲时进行的。实际上，任何云中的受害者都可能经历持续或变化的背景负载。当受害者服务器负载激增时，可能会出现误报或漏报。在这种情况下，我们使用与第4.2节相同的方法——交替测量空闲和竞争情况。

为了评估在持续背景负载下的测试效果，我们重复了上述实验，并增加了受害者上的负载。实验结果总结在图9中。出乎意料的是，我们发现背景服务器上的持续负载加剧了性能下降差距，从而导致更清晰的共驻信号。这是因为共驻攻击者运行内存锁定会增加所有请求的服务时间，因为大多数请求依赖于内存带宽。这增加了系统中的排队延迟，从而增加了整体请求延迟。有趣的是，当系统负载达到750到1000个并发用户时，性能差距停止扩大，因为系统达到了瓶颈（在我们的案例中是负载均衡器的网络瓶颈），即使不运行内存锁定发送器也是如此。因此，使用此测试检测高度负载和瓶颈的应用程序中的共驻情况将很困难。

我们还尝试了增加负载均衡器后面的受害者web服务器数量（图10）。正如预期的那样，随着受害者数量的增加，共驻信号变弱，当有9个web服务器时，性能下降过低，无法有效检测共驻。

### 5 安置漏洞研究
在本节中，我们评估了三个公共云平台（Amazon EC2、Google Compute Engine和Microsoft Azure）的安置漏洞，并回答以下问题：
1. 攻击者可以采用哪些策略来增加与一个或多个受害者虚拟机共驻的机会？
2. 每种策略的成功概率和成本是多少？
3. 这些策略与第3节中介绍的参考安置策略相比如何？

#### 5.1 实验方法
在展示结果之前，我们先描述所采用的实验设置和方法。

##### 实验设置
回想一下，虚拟机安置取决于几个安置变量（见图1）。我们为这些安置变量分配了合理的值，并列举了几种启动策略。一次运行对应一种启动策略，涉及从两个不同的账户（即Azure中的订阅和GCE中的项目）启动多个虚拟机，并检查所有虚拟机对之间的共驻情况。一个账户被指定为代表受害者，另一个代表攻击者。我们用v × a表示运行配置，其中v是受害者实例的数量，a是攻击者实例的数量。我们改变了v和a的所有组合，其中v, a ∈ {10, 20, 30}，并限制它们满足v ≤ a，以增加共驻的可能性。

其他属于运行配置的安置变量包括：受害者启动时间（包括一天中的时间、一周中的日期）、受害者和攻击者虚拟机启动之间的延迟、受害者和攻击者实例类型以及虚拟机启动的数据中心位置或区域。我们在所有三个云平台上多次重复每个运行。重复实验特别需要控制某些环境变量（如一天中的时间）的影响。我们在一天中的不同时间和一周中的不同日期重复每个运行配置的实验。除非另有说明，我们将虚拟机实例类型固定为小型实例（EC2上的t2.small、GCE上的g1.small和Azure上的small或Standard-A1），数据中心区域分别为us-east（EC2）、us-central1-a（GCE）和east-us（Azure）。所有这些实验在2014年12月至2015年2月的三个月内进行。

我们使用一台具有8个SMT核心的Intel Core i7-2600本地机器来启动虚拟机实例、记录实例信息并运行共驻检测测试套件。

##### 实现和云API
为了自动化实验，我们使用Python和libcloud2库[3]与EC2和GCE接口。不幸的是，libcloud不支持Azure。Linux平台上唯一的Azure云API是一个node.js库和一个跨平台命令行界面（CLI）。我们为此CLI构建了一个包装器。不同云API之间没有显著差异，只是Azure没有显式接口来同时启动多个虚拟机。

如实验设置所述，我们实验了受害者和攻击者虚拟机启动之间的各种延迟（0、1、2、4...小时）。为了节省资金，我们在较长时间的运行中重用了同一组受害者实例。例如，对于10x10配置下0、1、2和4小时的延迟，我们在实验开始时只启动一次受害者虚拟机。在运行第一组虚拟机对的共驻测试后，我们终止所有攻击者实例，并在适当延迟（例如1小时）后重新启动攻击者虚拟机实例，然后使用相同的受害者虚拟机再次运行测试。我们重复这一过程，直到完成该配置所需的所有延迟实验。我们称此方法为“蛙跳法”。需要注意的是，零延迟在这里是指从我们的测试机器并行启动虚拟机（而不是从一个账户顺序启动虚拟机），除非另有说明。

在下面的部分中，我们将详细研究在所有云提供商中改变一个安置变量而保持其他变量不变的效果。在每种情况下，我们使用三个指标来衡量共驻程度：多次运行中至少有一个共驻实例的概率（或成功率）、多次运行中平均共驻实例数和平均覆盖率。

##### 图11：GCE上的共驻对数分布
- **延迟（小时）**：0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
- **配置平均值**：
  - 10x10: 0.11, 0.2
  - 10x20: 0.5
  - 10x30: 0.43
  - 20x20
  - 20x30: 1.67, 1.6
  - 30x30: 0.25
- **10x10**: 0.33
- **10x20**
- **10x30**: 1.6, 1.27
- **20x20**
- **20x30**: 2.44
- **30x30**: 3
- **标准差 最小值 中位数 最大值**
  - 0.33, 0.42, 0.71, 0.65, 1.22, 1.65
  - 0.46, 0.5, 1.07, 1.22, 1.51, 1.12
  - 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, 0, 2, 1, 3, 3

- **标准差 最小值 中位数 最大值**
  - 0, 1, 1, 2, 2, 4, 5, 1, 1, 3, 4, 4, 5, 0, 2, 3, 4

图11展示了GCE上共驻对数的分布情况。区域：us-central1-a。