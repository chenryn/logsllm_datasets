### Targets to be Aligned Instructions: RockJIT's Defense

RockJIT successfully defends against our attack by ensuring that targets are aligned. It is important to note that, in addition to being fine-grained, the completeness of Control Flow Integrity (CFI) schemes is equally crucial. Even a single unchecked or incorrectly checked jump target can provide an attacker with an opportunity to mount a successful attack. Specifically, with arbitrary four-byte gadgets, an attacker can use unaligned instructions, thereby bypassing any additional CFI checks. This scenario may not apply to Athanasakis' attack, which requires aligning multiple shorter gadgets to create a useful one.

In summary, complete CFI schemes are a powerful defense and may become a viable long-term solution. However, special attention must be paid to the completeness and precision of the sandbox. Past sandbox-escaping attacks have demonstrated that orthogonal defenses, such as ours, provide a valuable additional layer of security.

### Protecting JIT Compilers

In addition to general code reuse defenses, researchers have proposed specific protections for JIT compilers against exploitation. For instance, in JITDefender, Chen et al. [10] suggested removing executable rights from JIT-compiled code pages until they are called by the compiler. Similarly, these rights are removed after the function returns, causing the program to crash if control flow is diverted to the sprayed code. Although this defense can be effective in some scenarios, an attacker can prolong the time a code page remains executable, for example, by continuously calling a JavaScript function using a separate thread.

Chen et al. also proposed JITSafe [11], an extended version of JITDefender. JITSafe incorporates a technique similar to that suggested by Wu et al. with RIM [53], which replaces invalid instructions with long chains of NOP sleds. While this approach is effective in preventing code spraying with long NOP sleds, it fails to protect against more fine-grained code injections, such as those used in our attack.

Homescu et al. [29] and Wei et al. [52] introduced librando and INSeRT, respectively. These techniques, similar to those deployed in modern browsers, randomize JIT-compiled code by inserting either NOP (librando) or illegal (INSeRT) instructions. Both techniques also employ some form of constant blinding, such as using XOR (INSeRT) or LEA (librando) instructions to encrypt constants. Our evaluation of popular browsers has shown that implementing constant blinding correctly is challenging. To support future research, we provide DACHSHUND as a framework to evaluate the completeness of constant blinding implementations.

### JavaScript Rewriting

While aiming at different goals, other researchers have used JavaScript rewriting to ensure various security aspects. For example, Doupe et al. proposed deDacota, a Web rewriting framework that separates code (JavaScript) from data (HTML) to defend against cross-site scripting (XSS) attacks [16]. Reis et al. rewrite Web documents to instrument and validate dynamic content, such as script code, against security policies [44]. Similarly, Yu et al. provided a provably correct JavaScript code rewriting methodology to defend against threats like XSS [54]. These approaches share the concept of identifying JavaScript code in a Web site but do not focus on the security of JIT compilers.

### Conclusion

DACHSHUND has revealed that constant blinding implementations in many popular browsers are incomplete and inherently insecure. This has significant implications for browser security, as:
1. The assumed guarantees of constant blinding are not met in practice.
2. We demonstrate how easily an attacker can inject arbitrary gadgets (up to four bytes) to form ROP chains.
3. The issues with constant blinding are deeper than previously believed.

Our JavaScript-based rewriting approach is a first step toward removing the risk of attacker-induced constants and ensuring the guarantees of constant blinding without the need to rewrite browser software. In the long term, more fundamental changes, such as enforcing CFI schemes on JIT-compiled code or exploring provably-secure gadget-free JIT compilers, may be required to guarantee browser security.

### Acknowledgment

The authors would like to thank the anonymous reviewers for their valuable comments. Additionally, we thank Michael Brengel for his feedback during the writing process of the paper.

This work was supported by the German Federal Ministry of Education and Research (BMBF) through funding for the Center for IT-Security, Privacy and Accountability (CISPA) and for the BMBF project 13N13250.

### References

[References remain unchanged as they are already well-formatted and detailed.]