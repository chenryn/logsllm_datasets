targets to be aligned instructions, RockJIT thus successfully
defends against our attack. Note that, apart from being ﬁne-
grained, the completeness of CFI schemes is equally important,
i.e., even in the presence of a single unchecked (or wrongly
checked) jump target, the attacker will be able to mount a suc-
cessful attack. In particular, with arbitrary four-byte gadgets,
the attacker only uses unaligned instructions, and therefore
no additional CFI checks will be executed in between. Note
that this may not be the case for Athanasakis’ attack that
requires to align multiple shorter gadgets to obtain a useful
one. Summarizing, complete CFI schemes are a powerful
defense, and may become a viable solution in the long run.
However, special attention must be paid to the completeness
and to the precision of the sandbox. In the past, sandbox
escaping attacks demonstrated that orthogonal defenses, like
ours, present a useful additional layer of security.
C. Protecting JIT Compilers
Next to general code reuse defenses, researchers have also
suggested to speciﬁcally protect JIT compilers against ex-
ploitation. In JITDefender, Chen et al. [10] proposed defending
against JIT spraying by removing executable rights from JIT-
compiled code pages, until they are called by the compiler.
Similarly, executable rights will be stripped after the function
returned. This way, diverting the control ﬂow to the sprayed
code will crash the program. Although this defense may work
in some situations, the attacker can extend the time a code
pages is executable, e.g., by using a thread that continuously
calls a JavaScript function.
Chen et al. proposed JITSafe [11]. JITSafe is an extended
version of JITDefender, incorporating a similar technique as
suggested by Wu et al. with RIM [53],
invalid
instructions into long chains of NOP sleds. While this defense
is successful to prevent code spraying with long NOP sleds, it
cannot protect against more ﬁne-grained code injections (such
as injecting single gadgets, as in our attack).
to inject
Homescu et al. [29] and Wei et al. [52] propose librando
and INSeRT, respectively. These techniques are similar to
techniques deployed in modern browsers. For example, both
of these techniques randomize the JIT-compiled code by
randomly inserting either NOP (librando) or illegal (INSeRT)
instructions into the code. Moreover, both of these techniques
deploy some form of constant blinding, e.g., by using an
XOR (INSeRT) or LEA (librando) instruction to encrypt the
constants. Our evaluation on popular browsers has proven that
such constant blinding schemes are actually hard to get right.
To foster future research in this direction, we thus provide
DACHSHUND as framework to evaluate the completeness of
constant blinding implementations.
D. JavaScript Rewriting
While with totally different goals in mind, other researchers
also used JavaScript rewriting as technique to guarantee vari-
ous other security aspects. For example, Doupe et al. suggest
a Web rewriting framework called deDacota that separates
code (JavaScript) from data (HTML) to defend against cross-
site scripting (XSS) attacks [16]. Reis et al. rewrite Web
documents in such a way that also dynamic contents (e.g.,
script code) is instrumented and can be validated against
security policies [44]. Similarly, Yu et al. provide a prov-
ably correct JavaScript code rewriting methodology to defend
against
threats like XSS [54]. These ideas follow similar
concepts to identify JavaScript code in a Web site, however,
do not focus on the security of JIT compilers.
VIII. CONCLUSION
DACHSHUND has uncovered that constant blinding im-
plementations in many popular browsers are incomplete and
inherently insecure. This has severe implications on the se-
curity of browsers, as (i) the guarantees that are assumed to
be given by constant blinding are not met in practice, (ii) we
demonstrate how easy an attacker can inject arbitrary gadgets
(up to four bytes) to form ROP chains, and (iii) as the problems
of constant blinding are far deeper than it was previously
believed. Our JavaScript-based rewriting approach is a ﬁrst
step to remove the risk of attacker-induced constants and to
13
safe the guarantees of constant blinding, without any need
to rewrite browser software. In the long run, we presume
that more fundamental changes are required to guarantee
browser security, such as enforcing Control Flow Integrity
schemes even on JIT-compiled code, or exploring provably-
secure gadget-free JIT compilers.
ACKNOWLEDGMENT
The authors would like to thank the anonymous reviewers
for their valuable comments. Moreover, we would like to thank
Michael Brengel for his feedback during the writing process
of the paper.
This work was supported by the German Federal Ministry
of Education and Research (BMBF) through funding for the
Center for IT-Security, Privacy and Accountability (CISPA)
and for the BMBF project 13N13250.
REFERENCES
[1]
J. Ansel, P. Marchenko, ´U. Erlingsson, E. Taylor, B. Chen, D. L. Schuff,
D. Sehr, C. L. Bifﬂe, and B. Yee, “Language-independent sandboxing
of just-in-time compilation and self-modifying code,” ACM SIGPLAN
Notices, vol. 46, no. 6, pp. 355–366, 2011.
[2] M. Athanasakis, E. Athanasopoulos, M. Polychronakis, G. Portokalidis,
and S. Ioannidis, “The Devil is in the Constants: Bypassing Defenses in
Browser JIT Engines,” in Proceedings of the Network and Distributed
System Security (NDSS) Symposium, February 2015.
[3] M. Backes, T. Holz, B. Kollenda, P. Koppe, S. N¨urnberger, and
J. Pewny, “You Can Run but You Can’T Read: Preventing Disclosure
Exploits in Executable Code,” in Proceedings of
the 2014 ACM
SIGSAC Conference on Computer and Communications Security, ser.
CCS ’14. New York, NY, USA: ACM, 2014, pp. 1342–1353.
[Online]. Available: http://doi.acm.org/10.1145/2660267.2660378
“Baracuda networks.” [Online]. Available: https://campus.barracuda.
com/product/websecuritygateway/article/BWF/UsingSSLInspection/
[4]
[5] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazi`eres, and D. Boneh,
“Hacking Blind,” in Proceedings of the 2014 IEEE Symposium on
Security and Privacy, ser. SP ’14, Washington, DC, USA, 2014, pp.
227–242.
[6] D. Blazakis, “Interpreter Exploitation,” in Proceedings of
the 4th
USENIX Conference on Offensive Technologies, ser. WOOT’10, 2010.
“Blue
https://www.bluecoat.com/
products-and-solutions/ssl-visibility-appliance
[Online]. Available:
coat.”
[7]
[8] K. Braden, S. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen,
and A.-R. Sadeghi, “Leakage-resilient layout randomization for mobile
devices,” in 23rd Annual Network & Distributed System Security
Symposium (NDSS), Feb. 2016.
[9] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi, H. Shacham,
and M. Winandy, “Return-oriented Programming Without Returns,”
in Proceedings of
the 17th ACM Conference on Computer and
Communications Security, ser. CCS ’10. New York, NY, USA: ACM,
2010, pp. 559–572. [Online]. Available: http://doi.acm.org/10.1145/
1866307.1866370
[10] P. Chen, Y. Fang, B. Mao, and L. Xie, “JITDefender: A Defense
against JIT Spraying Attacks,” in Future Challenges in Security and
Privacy for Academia and Industry, ser. IFIP Advances in Information
and Communication Technology, J. Camenisch, S. Fischer-Hbner,
Y. Murayama, A. Portmann, and C. Rieder, Eds.
Springer Berlin
Heidelberg, 2011, vol. 354, pp. 142–153.
[Online]. Available:
http://dx.doi.org/10.1007/978-3-642-21424-0\ 12
[11] P. Chen, R. Wu, and B. Mao, “JITSafe: a Framework against
Just-in-time Spraying Attacks,” IET Information Security, vol. 7, no. 4,
pp. 283–292, 2013. [Online]. Available: http://dx.doi.org/10.1049/
iet-ifs.2012.0142
[12] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi,
S. Brunthaler, and M. Franz, “Readactor: Practical Code Randomization
Resilient to Memory Disclosure,” in 36th IEEE Symposium on Security
and Privacy (Oakland), May 2015.
[13] S. Crane, S. Volckaert, F. Schuster, C. Liebchen, P. Larsen, L. Davi, A.-
R. Sadeghi, T. Holz, B. D. Sutter, and M. Franz, “It’s a TRAP: Table
Randomization and Protection against Function Reuse Attacks,” in Pro-
ceedings of 22nd ACM Conference on Computer and Communications
Security (CCS), 2015.
[14] L. Davi, A. Dmitrienko, M. Egele, T. Fischer, T. Holz, R. Hund,
S. N¨urnberger, and A.-R. Sadeghi, “Mocﬁ: A framework to mitigate
control-ﬂow attacks on smartphones.” in NDSS, 2012.
[15] L. Davi, A.-R. Sadeghi, D. Lehmann, and F. Monrose, “Stitching the
gadgets: On the ineffectiveness of coarse-grained control-ﬂow integrity
protection,” in 23rd USENIX Security Symposium, 2014.
[16] A. Doup´e, W. Cui, M. H. Jakubowski, M. Peinado, C. Kruegel, and
G. Vigna, “dedacota: toward preventing server-side xss via automatic
code and data separation,” in Proceedings of the 2013 ACM SIGSAC
conference on Computer & communications security. ACM, 2013, pp.
1205–1216.
[17] T. Durden, “Bypassing PaX ASLR protection.” [Online]. Available:
[18]
[19]
[20]
[21]
[22]
[23]
[24]
traversal functions from esmangle project.”
http://phrack.org/issues/59/9.html
“Escodegen: Ecmascript code generator from mozilla’s parser api ast.”
[Online]. Available: https://github.com/estools/escodegen
“Esprima: Ecmascript parsing infrastructure for multipurpose analysis.”
[Online]. Available: http://esprima.org/
“Estraverse: Ecmascript
[Online]. Available: https://github.com/estools/estraverse
“Forcepoint.” [Online]. Available: https://www.websense.com/content/
support/library/web/v81/wcg\ help/ssl\ enable.aspx
“Forefront
//technet.microsoft.com/en-us/library/dd441073.aspx
“Fortigate.”
[Online]. Available:
why-you-should-use-ssl-inspection/
J. Gionta, W. Enck, and P. Ning, “Hidem: Protecting the contents
of userspace memory in the face of disclosure vulnerabilities,” in
Proceedings of the 5th ACM Conference on Data and Application
Security and Privacy, ser. CODASPY ’15. New York, NY, USA:
ACM, 2015, pp. 325–336. [Online]. Available: http://doi.acm.org/10.
1145/2699026.2699107
threat management gateway.” [Online]. Available: https:
http://cookbook.fortinet.com/
[25] E. Goktas, E. Athanasopoulos, H. Bos, and G. Portokalidis, “Out of
control: Overcoming control-ﬂow integrity,” in Security and Privacy
(SP), 2014 IEEE Symposium on.
IEEE, 2014, pp. 575–589.
[26] C. Grier, L. Ballard, J. Caballero, N. Chachra, C. J. Dietrich,
K. Levchenko, P. Mavrommatis, D. McCoy, A. Nappa, A. Pitsillidis,
N. Provos, M. Z. Raﬁque, M. A. Rajab, C. Rossow, K. Thomas,
V. Paxson, S. Savage, and G. M. Voelker, “Manufacturing compromise:
The emergence of exploit-as-a-service,” in Proceedings of the 2012
ACM Conference on Computer and Communications Security, ser.
CCS ’12. New York, NY, USA: ACM, 2012, pp. 821–832. [Online].
Available: http://doi.acm.org/10.1145/2382196.2382283
J. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. W. Davidson,
“ILR: Where’D My Gadgets Go?” in Proceedings of the 2012 IEEE
Symposium on Security and Privacy, ser. SP ’12, Washington, DC,
USA, 2012, pp. 571–585. [Online]. Available: http://dx.doi.org/10.
1109/SP.2012.39
[27]
[28] C. Holler, K. Herzig, and A. Zeller, “Fuzzing with code fragments,” in
Proceedings of the 21st USENIX Conference on Security Symposium,
Berkeley, CA, USA, 2012.
[30]
[29] A. Homescu, S. Brunthaler, P. Larsen, and M. Franz, “Librando: Trans-
parent Code Randomization for Just-in-time Compilers,” in Proceedings
of the 2013 ACM SIGSAC conference on Computer & communications
security, ser. CCS ’13, 2013.
“Http mitm proxy.” [Online]. Available: https://github.com/joeferner/
node-http-mitm-proxy
a. huku, “Exploiting VLC. A Case Study on Jemalloc Heap Overﬂows.”
[Online]. Available: http://www.phrack.org/issues/68/13.html
“Javascript obfuscation.” [Online]. Available: http://patriciopalladino.
com/blog/2012/08/09/non-alphanumeric-javascript.html
[31]
[32]
[33] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning, “Address Space
Layout Permutation (ASLP): Towards Fine-Grained Randomization of
Commodity Software,” in Proceedings of the 22Nd Annual Computer
Security Applications Conference, ser. ACSAC ’06, Washington, DC,
2006. [Online]. Available: http://dx.doi.org/10.1109/ACSAC.2006.9
14
[34] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz, “SoK: Automated
Software Diversity,” in Proceedings of the 2014 IEEE Symposium on
Security and Privacy, ser. SP ’14, Washington, DC, USA, 2014, pp.
276–291. [Online]. Available: http://dx.doi.org/10.1109/SP.2014.25
[35] K. Lu, S. Nrnberger, M. Backes, and W. Lee, “How to make aslr win
the clone wars: Runtime re-randomization,” in Network and Distributed
System Security Symposium. Symposium on Network and Distributed
System Security (NDSS), K. Lu, S. Nrnberger, M. Backes, and W. Lee,
Eds.
Internet Society, 2015.
[36] G. Maisuradze, M. Backes, and C. Rossow, “What cannot be read,
cannot be leveraged? revisiting assumptions of jit-rop defenses,” in
25th USENIX Security Symposium (USENIX Security 16). Austin, TX:
USENIX Association, Aug. 2016, pp. 139–156. [Online]. Available:
https://www.usenix.org/conference/usenixsecurity16/technical-sessions/
presentation/maisuradze
[37] V. Mohan, P. Larsen, S. Brunthaler, K. W. Hamlen, and M. Franz,
“Opaque control-ﬂow integrity.” in NDSS, 2015.
[52] T. Wei, T. Wang, L. Duan, and J. Luo, “INSeRT: Protect Dynamic Code
Generation against Spraying,” in Information Science and Technology
(ICIST), 2011 International Conference on, March 2011, pp. 323–328.
[53] R. Wu, P. Chen, B. Mao, and L. Xie, “RIM: A Method to Defend
from JIT Spraying Attack,” in Proceedings of
the 2012 Seventh
International Conference on Availability, Reliability and Security, ser.
ARES ’12, Washington, DC, USA, 2012, pp. 143–148. [Online].
Available: http://dx.doi.org/10.1109/ARES.2012.11
[54] D. Yu, A. Chander, N. Islam, and I. Serikov, “Javascript instrumentation
for browser security,” in ACM SIGPLAN Notices, vol. 42, no. 1. ACM,
2007, pp. 237–249.
[55] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant,
D. Song, and W. Zou, “Practical control ﬂow integrity and randomiza-
tion for binary executables,” in Security and Privacy (SP), 2013 IEEE
Symposium on.
IEEE, 2013, pp. 559–573.
[56] M. Zhang and R. Sekar, “Control ﬂow integrity for cots binaries.” in
Usenix Security, vol. 13, 2013.
“Zscaler.”
ssl-inspection
[38] Nergal. The Advanced Return-into-lib(c) Exploits. [Online]. Available:
[57]
[Online]. Available: https://www.zscaler.com/products/
[39]
[40]
http://phrack.org/issues/58/4.html
“Node.js: A javascript runtime built on chrome’s v8 javascript engine.”
[Online]. Available: https://nodejs.org/
“Octane: The javascript benchmark suite for
[Online]. Available: https://developers.google.com/octane/
the modern web.”
[41] K. Onarlioglu, L. Bilge, A. Lanzi, D. Balzarotti, and E. Kirda,
“G-Free: Defeating Return-oriented Programming Through Gadget-
less Binaries,” in Proceedings of
the 26th Annual Computer
Security Applications Conference, ser. ACSAC ’10. New York,
NY, USA: ACM, 2010, pp. 49–58.
[Online]. Available: http:
//doi.acm.org/10.1145/1920261.1920269
“Palo
[Online].
paloaltonetworks.com/documentation/60/pan-os/pan-os/decryption
https://www.
Available:
[42]
alto
networks.”
[43] V. Pappas, M. Polychronakis, and A. D. Keromytis, “Smashing
the Gadgets: Hindering Return-Oriented Programming Using In-place
Code Randomization,” in Proceedings of the 2012 IEEE Symposium
on Security and Privacy, ser. SP ’12, Washington, DC, USA, 2012.
[Online]. Available: http://dx.doi.org/10.1109/SP.2012.41
[44] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Esmeir,
“Browsershield: Vulnerability-driven ﬁltering of dynamic html,” ACM
Transactions on the Web (TWEB), vol. 1, no. 3, p. 11, 2007.
J. Ruderman, “Introducing jsfunfuzz.” [Online]. Available: http:
//www.squarefree.com/2007/08/02/introducing-jsfunfuzz/
[45]
[46] E. J. Schwartz, T. Avgerinos, and D. Brumley, “Q: Exploit Hardening
Made Easy,” in Proceedings of
the 20th USENIX Conference on
Security, ser. SEC’11. Berkeley, CA, USA: USENIX Association,
2011, pp. 25–25. [Online]. Available: http://dl.acm.org/citation.cfm?
id=2028067.2028092
[47] H. Shacham, “The Geometry of Innocent Flesh on the Bone: Return-
into-libc Without Function Calls (on the x86),” in Proceedings of the
14th ACM Conference on Computer and Communications Security,
ser. CCS ’07. New York, NY, USA: ACM, 2007, pp. 552–561.
[Online]. Available: http://doi.acm.org/10.1145/1315245.1315313
[48] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh,
“On the Effectiveness of Address-space Randomization,” in Proceedings
of
the 11th ACM Conference on Computer and Communications
Security, ser. CCS ’04. New York, NY, USA: ACM, 2004, pp. 298–
307. [Online]. Available: http://doi.acm.org/10.1145/1030083.1030124
[49] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and
A.-R. Sadeghi, “Just-In-Time Code Reuse: On the Effectiveness of
Fine-Grained Address Space Layout Randomization,” in Proceedings
of
the 2013 IEEE Symposium on Security and Privacy, ser. SP
’13, Washington, DC, USA, 2013, pp. 574–588. [Online]. Available:
http://dx.doi.org/10.1109/SP.2013.45
[50] P. Team, “Address Space Layout Randomization (ASLR).” [Online].
Available: http://pax.grsecurity.net/docs/aslr.txt
[51] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin, “Binary
Stirring: Self-randomizing Instruction Addresses of Legacy x86
the 2012 ACM Conference on
Binary Code,” in Proceedings of
Computer and Communications Security,
ser. CCS ’12. New
York, NY, USA: ACM, 2012, pp. 157–168.
[Online]. Available:
http://doi.acm.org/10.1145/2382196.2382216
15