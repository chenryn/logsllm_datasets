6
0
1
)
s
m
(
y
c
n
e
t
a
l
)
s
m
(
y
c
n
e
t
a
l
0
200
400
600
800
(a) Probe results without trafﬁc pattern (Node K)
time (s)
0
200
400
600
800
time (s)
(b) False negative (Node E)
Figure 3. Results without positive correlation
Pattern present
Pattern absent
n
o
i
t
l
a
e
r
r
o
C
f
o
g
o
L
0
.
2
5
.
1
0
.
1
5
.
0
0
.
0
5
.
0
−
A B C D E
F G H
I
J
K
L M
Target Node
Figure 4. Summary of correlation
rect observer, but also make sure that it confuses indirect
measurements as presented in this paper. When designing
such a cover trafﬁc strategy it is also important to keep in
mind Wei Dai’s attack [5]: an adversary can try to ﬁll the
victim node with their own trafﬁc, trying to eliminate all
the cover trafﬁc. This is very similar to the indirect mea-
surement of trafﬁc load that we have performed, and shows
that Tor would have to use cover trafﬁc all the time, and not
simply when there is not enough genuine trafﬁc to ﬁll all
the links.
The interference between the timing characteristics of
different streams is both a beneﬁt for anonymity and at
the same time, a vehicle for attack. One would hope that
streams on the same Tor node would interfere with each
other to such a degree that it is impossible to differenti-
ate them from each other, therefore making it difﬁcult for
an attacker to know which one to trace, which is not the
case. This perfect interference should create ‘echos’ of the
traced stream throughout the network and cause any trafﬁc-
analysis to produce a lot of false positives. Nevertheless,
streams relayed by the same Tor node interfere with each
other just enough to leak information to an adversary con-
trolled stream and thus allow the measurement of the load
of the node. In some sense, Tor exhibits the worst possi-
ble behaviour: not enough interference to destroy individ-
ual stream characteristics, yet enough to allow the remote
measurement of the node’s load.
Two strategies could be employed to protect Tor: per-
fect interference and non-interference. Perfect interference
amongst all streams relayed through the same node means
that the output streams all have the same shape. This means
that the adversary will have a very difﬁcult time determin-
ing which output stream corresponds to the input stream to
be traced. Since Tor relies on a sequence of relays, it would
be interesting to study how long paths would need to be
so that streams would interfere with each other in such a
way that all the outputs of the network would have the same
characteristic. Note, that since the vehicle of this entan-
glement is trafﬁc streams, one needs to assess how many
other streams have been touched, by being relayed through
the same node, and therefore might become indistinguish-
able with. A second strategy for implementing perfect in-
terference is to shape the stream trafﬁc into another random
shape, either the same for all streams or different for each of
them, yet unlinkable to any particular input stream. Causal-
ity means that this shaping can only be done by delaying
the packets (you cannot send a packet received at time t out
in the network at time t − 1). Therefore any trafﬁc shaping
strategy will inevitably increase the latency of the commu-
nication.
Non-interference between streams can also be used to
protect against our attacks. This would eliminate the covert
channel we use to remotely infer the timing of streams on
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
Tor nodes. This property could be very difﬁcult to imple-
ment in practice. All streams share a lot of common re-
sources:
the Tor packet scheduler, the TCP/IP stack, the
physical network and the CPU of the Tor node. There is
an established methodology for discovering and eliminat-
ing covert channels [22], and it is recognised as a difﬁcult
problem. Even hardened systems exhibit covert channels
of >1 bit/s. These might be tolerable for multilevel se-
cure systems, but would be devastating for anonymous com-
munication systems – in a few seconds an adversary could
distinguish the victim’s communication amongst all of the
streams. This is, because there are inherently fewer actors to
identify in an anonymous communication system than pos-
sible cryptographic keys or possible documents in a multi-
level system.
5.1 Linkability attack
A variant of our attack can also be used to determine
whether two streams coming out of the same Tor node be-
long to the same initiator. Remember that Tor uses the same
connection to route many streams from the same initiator –
we can use this property to test whether two streams com-
ing out of the Tor network and accessing two corrupt servers
belong to the same user. We determine, using the main at-
tack presented, the Tor nodes that route the two streams.
While the probability that two different initiators use the
same exit node is 1/N , the probability that the full path of
three nodes is the same, given that each node was chosen
randomly, is only about 1/N 3. Therefore the fact that two
streams use the same path strongly indicates that they be-
long to the same initiator. Testing whether a second stream
belongs to the same initiator as an already traced stream, is
cheaper than performing the analysis to start with. The at-
tacker already knows the two nodes on the path of the ﬁrst
stream and can just test them to conﬁrm that the second
stream belongs to the same connection and initiator.
This attack is especially interesting since it shows that
Tor makes it easier to link two events to the same initiator
than a simple proxy. These events exhibit a particular sig-
nature, that a simple proxy does not have, namely their path
through Tor, which can be uncovered using our attacks. If
our attacks are not eliminated, augmenting the length of the
Tor path, conventionally thought to increase security, would
make it even more vulnerable to this attack. The longer the
common chain of Tor nodes two connections share, the less
likely it is that they belong to different users. The same is
true for the total number of nodes: it is conventionally be-
lieved that more nodes is better for anonymity, but a larger
population of nodes makes common chains less common
and allows for more precise identiﬁcation. The fact that
empty connections are short lived, and that a stream can exit
at any node in the path might make such attacks slightly less
reliable, but does not solve the underlying problem.
5.2 Variants of our attack
The attack we have presented so far relies on a probe
stream being routed through a Tor node to detect the tim-
ing of a modulated communication stream from a corrupt
server. Using the principle that timing information leaks
from one stream to the other, we could conceive quite a few
variants of this attack.
Firstly, we could modulate the probe trafﬁc that is sent to
the victim Tor node in a loop and try to detect the effects on
requests sent by the initiator of the anonymous communica-
tions. In cases where the trafﬁc is mainly from the victim
to the server, the corrupt server does not have much oppor-
tunity to signiﬁcantly modulate the trafﬁc load, so this may
be the only option. The difﬁculty with this approach is that
the normal method of probing all Tor nodes in the network
simultaneously is problematic, since the modulation of the
victim stream will be the combination of the load induced
on all three of the Tor nodes along the path.
An alternative would be to probe each Tor node in turn,
but for a given stream lifetime, this would reduce the probe
duration and thus accuracy.
Instead, the attacker could
probe all nodes, but using a different, “orthogonal” pattern
for each node, so the resulting combination observed can
be decomposed into the original components. An adaptive
attack could be mounted by, for example, probing all nodes
in the network brieﬂy and observing the result. While this
short test will have a poor accuracy, it could be used to elim-
inate some nodes known not to be on the path. The remain-
ing nodes could be probed again (possibly with a longer
pattern) further eliminating more nodes. This process is re-
peated until only three nodes remain. Another option is to
probe some fraction of the nodes at one time; if the resulting
stream is affected then at least one node on the path must be
in that fraction, if not then all nodes in that group can be
eliminated from consideration. The above techniques could
be combined together.
If the attacker does not have total control over the cor-
rupt server and can only monitor the link but not modify
the load, then there are still variants of our attack that can
be used. One is to use the probe-modulation variant above.
Another is to take advantage of a known trafﬁc pattern ob-
served on the corrupt server. Since this pattern cannot be
optimised, the attack may take longer to reach a result, but
the trafﬁc may still be suitable for inducing an observable
effect on the intermediary Tor nodes. One could mount at-
tacks without any monitoring if the trafﬁc being sought has
known characteristics, which can be observed on the Tor
nodes it is being sent through.
If an attacker can neither directly observe nor change the
trafﬁc on the corrupt server, it may be possible to infer the
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
load by the attacker using the server and observing the re-
sponse time, in a similar way to how the Tor nodes are moni-
tored. An attacker could also alter the load of the destination
server by modulating a denial of service (DoS) attack on it.
When the DoS attack is running, the load of the victim con-
nection should be decreased and so decrease the load of the
Tor nodes on the path it is travelling. Recent research [25]
has shown that by exploiting the TCP back-off algorithm,
it is possible to mount an effective and difﬁcult to trace de-
nial of service attack without large resources. Techniques
similar to this could also be used in the probe-modulation
variant and to design better patterns for the corrupt server
to send, so the inﬂuence on other Tor connections through
each node is maximised.
The above attacks allow the nodes used to relay a particu-
lar stream to be identiﬁed, which already severely degrades
anonymity.
In order to identify the initiator, the attacker
must look at incoming connections to all three nodes. If re-
sources are limited, then it would be desirable to identify
the entry node, to target monitoring. This could be done by
estimating how much the induced trafﬁc pattern is shifted as
it travels through the network. We did not perform this be-
cause our probe sampling frequency was too low (every 0.2
seconds) to show effects on the scale of typical Tor latency.
However, once an attacker has found the three nodes on the
connection path, he could probe these at higher frequency,
to watch for the precise timing of the pattern. Another pos-
sibility is to look at the distortion of the induced pattern. As
it progresses through the network, noise will be added, so
it is likely the node showing the 3rd best correlation is the
entry node.
5.3 Attack costs
Our attack is feasible for the adversary anticipated by
the Tor designers and can be mounted without direct access
to the communication links of the Tor nodes. To reliably
perform the attacks, each Tor node in the network should
be observed all the time. Assuming there are N Tor nodes,
we therefore require N probe streams going through them
– a set of machines, or a single machine connected to the
Internet with a low-latency connection sufﬁces. This means
that the cost of the attack is O(N) since it increases linearly
with the number of nodes in the Tor network.
Note that higher volumes of trafﬁc in the Tor network
would make the quality of the observation poorer and de-
grade the performance of the attack. Therefore, there is a
hidden cost that has yet to be estimated, which rises with
the number of streams relayed by each node. At the same
time, any increase in latency that might hinder the attacker,
by making the remote measurements less precise, will in-
evitably also increase the latency of genuine Tor trafﬁc.
Therefore we are again confronted with the choice of in-
creasing the security of the system, versus keeping the la-
tency as low as possible.
Aside from observing the nodes, an adversary is assumed
to have the ability to modulate the replies of a dishonest ac-
cessed server. The simplest way of doing this is by deceiv-
ing anonymous users and making them access an attacker
controlled server. This way, arbitrary data streams can be
sent back and forth, and get detected. Where Tor is used
to access an HTTP [19] (web) service, the attacks can be
mounted much more simply, by including trafﬁc-analysis
bugs within the page, in the same way as web bugs [3, 12]
are embedded today. These initiate a request for an invis-
ible resource that, due to the HTTP architecture, can have
an unconstrained trafﬁc shape and characteristic. The at-
tacker can then simply try to detect them, using our attack
as described.
5.4 Understanding the trafﬁc artifacts
As described earlier, our attack is based on the fact that
the trafﬁc characteristics of streams are hardly affected by
Tor, and that these characteristics leak into other streams
sufﬁciently so that they can be remotely estimated.
It is
interesting to study how these processes are taking place in
practice.
Streams interfere with each other at all levels. At the
highest level, Tor routers relay a set of streams using a non-
blocking polling strategy presented in Figure 5. Each of the
relayed streams is polled to see if any data is available to
be relayed. If data is available, it is processed, otherwise
the next stream is considered. This strategy in itself ensures
that a different stream being relayed will delay the probe
stream, and leak information about the latency of the node.
Aside from the polling strategy, streams relayed by Tor
share the operating-system resources, the TCP/IP stack, the
network and the hardware of the Tor node. The operating-
system scheduler could inﬂuence the timing of the streams
by allocating more resources when the node relays more
trafﬁc, or less when then node is mostly waiting for more in-
put. Memory management operations could also take more
time if data is being routed. The TCP protocol would back-
off if the link is congested. Finally the network has a ﬁxed
capacity, and has to be shared amongst connections. All
of these contribute to the latency of the probe data being
inﬂuenced by the volume of data relayed by the Tor node.
Figure 2 illustrates this. It is clear that the probe data (top)
can be used to infer the volume of the actual trafﬁc sent
(bottom).
Other trafﬁc patterns have been observed in the measure-
ment data that are not yet fully explained. These could be
artifacts of the measurement technique, that by its indirect
nature can only act as an estimate of the load, or genuine
latency introduced by the remote Tor node. We present here
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
0
100
200
300
400
500
600
700
time (s)
(a) Horizontal line artifacts
)
s
m