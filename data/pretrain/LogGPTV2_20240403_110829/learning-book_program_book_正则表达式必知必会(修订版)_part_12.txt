### 优化后的文本

#### 转换为大写
原文本：
```
We1come to my Homepage
Content is divided into two sections:
Information about Macromedia ColdFusion.
Co1dFus1on
Information about Bluetooth, 8e2.11, and more.
Wire1ess
This is not valid HTML
```

正则表达式：
```
() ( . *7) ()
```

替换规则：
```
$11U$21E$3
```

转换结果：
```
Content is divided into two sections:
WELCOME TO MY HOMEPAGE
Information about Macromedia ColdFusion.
COLD FUSION
Information about Bluetooth, 8e2.11, and more.
WIRELESS
This is not valid HTML
```

---

#### 分析
模式 `()` (.*?) () 将一级标题分为三个子表达式：开始标签、标题文字和结束标签。第二个模式将这些文本重新组合起来：`$1` 包含开始标签，`\U$2\E` 将第二个子表达式（标题文字）转换为大写，`$3` 包含结束标签。

**8.4 小结**
- 子表达式用于定义字符或表达式的集合。
- 除了在重复匹配操作中使用外（详见第7章），子表达式还可以在模式内部被引用，这种引用称为回溯引用。
- 回溯引用的语法在不同的正则表达式实现中有很大差异。
- 回溯引用在文本匹配和文本替换操作中非常有用。

---

### 第9章 前后查找
到目前为止，我们见过的正则表达式都是用来匹配文本的，但有时还需要用正则表达式标记要匹配的文本的位置（而不仅仅是文本本身）。这就引出了前后查找（lookaround）的概念，即对某一位置的前、后内容进行查找。我们将在这一章对此做专题讨论。

#### 9.1 前后查找
先来看一个例子：从Web页面中提取页面标题。HTML页面标题是出现在 `<title>` 和 `</title>` 标签之间的文字，这对标签又必须嵌在HTML代码的 `<head>` 部分里。例如：
```
Ben Forta’s Homepage
```

正则表达式：
```
<title>(.*?)</title>
```

结果：
```
Ben Forta’s Homepage
```

分析：
- `.*?` 匹配 `<title>` 和 `</title>` 标签之间的任何文字。
- 这个模式的效果与预期基本相符，但不够理想，因为它还包含了 `<title>` 和 `</title>` 标签。

#### 9.2 向前查找
向前查找指定了一个必须匹配但不在结果中返回的模式。向前查找实际就是一个子表达式，格式上以 `?=开头` 的子表达式，需要匹配的文本跟在 `=` 的后面。

提示：有些正则表达式文档使用术语“消费”来表示“匹配和返回文本”的含义。在向前查找里，被匹配的文本不包含在最终返回的匹配结果里，这被称为“不消费”。

示例：
原始文本是一些URL地址，任务是提取协议名部分。
```
http://www.forta.com/
https: //mail. forta. com/
ftp://ftp.forta.com/
```

正则表达式：
```
.+?(?=://)
```

结果：
```
http
https
ftp
```

分析：
- 模式 `.+?` 匹配任意文本（第一个匹配是 `http`）。
- 子表达式 `(?=://)` 匹配 `://`，但不包括在最终结果中。

为了更好地理解 `?=` 的作用，再来看一个相同的例子，但不使用向前查找元字符：
```
http://www.forta.com/
https: //mail. forta. com/
ftp://ftp.forta.com/
```

正则表达式：
```
.+?(:)
```

结果：
```
http://
https://
ftp://
```

分析：
- 子表达式 `(:)` 正确地匹配到了 `:` 并将其包含在最终结果中。
- 使用向前查找时，正则表达式分析器将向前查找并处理 `:`，但不会将其包含在最终结果中。

注意：向前查找（和向后查找）匹配本身是有返回结果的，只是这个结果的字节长度永远是0，因此，前后查找操作有时也被称为零宽度（zero-width）匹配操作。

提示：任何一个子表达式都可以转换为一个向前查找表达式，只要给它加上一个 `?=前缀` 即可。在一个搜索模式里可以使用多个向前查找表达式，它们可以出现在模式里的任意位置。

#### 9.3 向后查找
正如你刚看到的那样，`?=将向前查找`（查找出现在被匹配文本之后的字符，但不消费那个字符）。因此，`?=被称为向前查找操作符`。许多正则表达式实现还支持向后查找，即查找出现在被匹配文本之前的字符（但不消费它），向后查找操作符是 `?<=`。

示例：
```
ABC01: $23.45
CFMX1:$899.00
HGG42:$5.31
XTC99:$69.96
Total items found:4
```

正则表达式：
```
(?<=: )\$.+
```

结果：
```
$23.45
$899.00
$5.31
$69.96
```

分析：
- `(?<=: )` 是一个向后查找操作，查找 `:` 后面的空格。
- `\$.+` 匹配 `$` 开头的金额部分。

问题迎刃而解。（`(?<=: )` 是一个向后查找操作，查找 `:` 后面的空格。）

希望这些优化后的文本能更清晰、连贯和专业。