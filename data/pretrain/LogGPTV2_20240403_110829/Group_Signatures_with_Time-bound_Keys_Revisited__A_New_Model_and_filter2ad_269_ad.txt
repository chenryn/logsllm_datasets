× e(g1, vkA)rα e(g1,bg)rδ e(ψ2,bg)−rξ
R2 = e(h0,bg)rζ′ e(h1,bg)ru e(g2, vkB)rα
× e(g2,bg)rδ′ e(ψ3,bg)−rξ′
R5 =eh
rξ
1 f −rδ , R4 = ψ
rx+rβ
rβ
t
6
rξ′
1 f −rδ′
, R6 = ψ
R3 = ψ
• Compute c ← H(ψ1, . . . , ψ7, R1, . . . , R6, m).
• Compute sα = rα +cα, sβ = rβ +cβ, sζ = rζ +cζ,
sξ = rξ + cξ, sζ ′ = rζ ′ + cζ ′, sξ′ = rξ′ + cξ′,
su = ru + cu, sx = rx + cxi, sδ = rδ + cδ, and
sδ′ = rδ′ + cδ′.
Output σ = (ψ1, . . . , ψ7, c, sα, sβ, sζ, sξ, sζ ′ , sξ′ , su, sx,
sδ, sδ′ ).
R′
put invalid. Otherwise, compute
Verify(gpk, t, σ, m, RLt): Parse RLt = (eht,bht, {grti,t}i∈RUt ).
Veriﬁcation Check: If e(ψ6,bg) 6= e(eg, ψ7), then out-
1 = e(h0,bg)sζ e(h1,bg)su e(h2,bg)sx e(g1, vkA)sα
× e(g1,bg)sδ e(ψ2,bg)−sξ (
2 = e(h0,bg)sζ′ e(h1,bg)su e(g2, vkB)sα e(g2,bg)sδ′
× e(ψ3,bg)−sξ′ (
5 =eh
e(g,bg)
e(g,bg)e(h2,bg)t )−c
sξ
1 f −sδ , R′
sβ
t ψ−c
4 , R′
sξ′
1 f −sδ′
sx+sβ
ψ−c
6
e(ψ3, vkB)
e(ψ2, vkA)
3 = ψ
6 = ψ
4 = ψ
)−c
R′
R′
R′
5
If c 6= H(ψ1, . . . , ψ7, R′
invalid.
1, . . . , R′
6, m), then output
Revocation Check: If there exists grti,t such that
e(grti,tψ4, ψ7) = e(ψ5,bht) holds, then output invalid.
Otherwise, output valid.
Open(gpk, msk, t, reg, σ, m, RLt): If invalid ← Verify(gpk, t, σ,
m, RLt), then output ⊥. Otherwise, parse σ = (ψ1, . . . ,
ψ7, c, sα, sβ, sζ, sξ, sζ ′ , sξ′ , su, sx, sδ, sδ′ ) and msk = (γA,
γB, γO). Compute A = ψ2/ψγO
reg[i] contains A, and output i.
exists, then output ⊥.
1 , search i such that
If no such an entry
Security Analysis. Here, we show that the proposed scheme
is BU-anonymous, traceable, and non-frameable.
Theorem 4.1. The proposed GS-TBK scheme satisﬁes
BU-anonymity if the DDH1 assumption and the DLIN as-
sumption hold in the random oracle model.
We deﬁne the following games.
Game 0: This is the same as the deﬁnition of BU-anonymity.
Game 1: This game is the same as Game 0 except for the
challenge signature is computed by programming of
the random oracle H.
Game 2: This game is the same as Game 0 except for the
7 , c∗,
6 , ψ∗
challenge signature σ∗ = (ψ∗
x, s∗
α, s∗
s∗
u, s∗
1 , ψ∗
δ , s∗
β, s∗
ζ , s∗
ξ , s∗
ζ ′ , s∗
ξ′ , s∗
3 , ψ∗
2 , ψ∗
δ′ ), ψ∗
4 , ψ∗
2 , ψ∗
3
5 , ψ∗
$← G1.
Game 3: This game is the same as Game 1 except for the
7 , c∗,
6 , ψ∗
5 , ψ∗
challenge signature σ∗ = (ψ∗
x, s∗
α, s∗
s∗
u, s∗
1 , ψ∗
δ , s∗
β, s∗
ζ , s∗
ξ , s∗
ζ ′ , s∗
ξ′ , s∗
2 , ψ∗
3 , ψ∗
δ′ ), ψ∗
5
4 , ψ∗
$← G1.
Let Si be the event that A successfully guesses b in Game i.
Lemma 4.1. | Pr[S0] − Pr[S1]| ≤ (1 − qh/p) where qh the
number of hash queries.
e(g,bg)
)−c, R′
1 , . . . , ψ∗
Proof. In Game 1, for computing the challenge signature,
ﬁrst compute ψ∗
7 as in the scheme. Next, randomly
$← Zp, and com-
choose c, sα, sβ, sζ, sξ, sζ ′ , sξ′ , su, sx, sδ, sδ′
pute R′
e(ψ2,bg)−sξ ( e(ψ2,vkA)
e(g2,bg)sδ′ e(ψ3,bg)−sξ′ (
5 =eh
1 = e(h0,bg)sζ e(h1,bg)su e(h2,bg)sx e(g1, vkA)sα e(g1,bg)sδ
2 = e(h0,bg)sζ′ e(h1,bg)su e(g2, vkB)sα
e(ψ3,vkB )
e(g,bg)e(h2,bg)t )−c, R′
4 , and R′
sξ
1 f −sδ , R′
4 =
sξ′
1 f −sδ′ , R′
ψ
5 . Next, pro-
gramming the random oracle H such that c := H(ψ1, . . . , ψ7,
R′
6, m), and send σ = (ψ1, . . . , ψ7, c, sα, sβ, sζ, sξ, sζ ′ ,
sξ′ , su, sx, sδ, sδ′ ) to A. If programming is failure (i.e., c col-
ludes with a value returned by H), output a random bit and
aborts. If programming is not failure, Pr[S0] = Pr[S1] holds.
Since c is randomly chosen from Zp, the failed probability is
at most qh/p.
3 = ψ
ψ−c
1, . . . , R′
sβ
t ψ−c
sx+sβ
6
6 = ψ
Lemma 4.2. | Pr[S1] − Pr[S2]| ≤ AdvDDH1(λ) where qh
the number of hash queries.
Proof. Let ((G1, G2, GT , e, f, bf ), f a, f b, Z) be a DDH1 in-
stance. We construct an algorithm B that distinguishes
Z = f ab or not. B implicitly sets α := a and γO := b (thus,
g1 = f γO = f b). B chooses r $← Zp, and sets g2 := f r.
B chooses all values, except f , g1, and g2. Since B has all
secret values, B can respond all queries issued by A. In the
challenge phase, B selects (A, Bt∗ ) according to the scheme.
3 := Bt∗ Z r. B computes
B sets ψ∗
other components, except s∗
α is computed by programming
of the random oracle H. If Z = f ab, then B correctly simu-
lates Game 1, and if Z is a random value, then B correctly
simulates Game 2.
2 := AZ, and ψ∗
1 := f a, ψ∗
Lemma 4.3. | Pr[S1] − Pr[S2]| ≤ AdvDLIN(λ)(1/qAqR −
qsqh/p) where qA, qR, qs, and qh are the number of AddU,
Revoke, GSign, and hash queries respectively.
Proof. Let ((G1, G2, GT , e,eg,bg), g′,bg′, h,bh,ega, g′b, Z) be a
DLIN instance. We construct an algorithm B that distin-
guishes Z = ha+b or not. B guesses when the challenge user,
say i∗, is added in the group with the probability 1/qA, and
guesses the challenge time t∗ with the probability 1/qR. We
$← Zp,
assume that the guesses are correct. B chooses y′
t∗
and implicitly sets xi∗ := a, β∗ := b, and yt∗ := y′
t∗ c where
784g′ := egc and bg′ := bgc for some c ∈ Zp. B chooses yt
for t 6= t∗. Then, B can compute (eht,bht) as follows.
$← Zp
(eht,bht) =(cid:26) (egyt ,bgyt )
t∗ , (bg′)y′
((g′)y′
t∗ )
(t 6= t∗)
(t = t∗)
Since B has all secret keys of signers, except i∗’s one, B
can respond all queries issued by A if these are not re-
lated to i∗. Hence, we show the simulation of revocation
queries Revoke(RUt) where i∗ ∈ RUt, and signing queries
GSign(i∗, m).
For revocation queries, B can revoke i∗ by computing
4
4
t∗ c)
ψ1/yt∗
t∗ c)β)1/y′
ponents are computed by programming of the random oracle
H.
For signing queries at t = t∗, B randomly chooses ψ1, . . . , ψ3
t∗ . Then
to compute grti∗,t∗ since i∗ is not revoked at the challenge
time t∗. This leads to backward unlinkability.
grti∗,t = (ega)yt when t 6= t∗. Remark that B is not required
$← G1 and β, d $← Zp, and computes ψ4 = ehβ
= ((egy′
t∗ c = egβ hold. B computes ψ5 =
(egaegβ)d, ψ6 = egd, and ψ7 = bgd. Now, the revocation check
t∗ c) = e((egaψ1/yt∗
relation e(ψ5,bht∗ ) = e((egaegβ)d,bgy′
)d,bgy′
= e((egy′
t∗ c)xi∗ ψ4,bgd) = e(grti∗,t∗ ψ4, ψ7) holds. Other com-
$← G1 and d $← Zp, and computes ψ5 := (ega · ψ1/yt
ψ6 = egd, and ψ7 = bgd. Then, the revocation check re-
lation e(ψ5,bht) = e((ega · ψ1/yt
)d,bgyt ) = e((ega)yt ψ4,bgd) =
t∗ = (egcb)y′
ψ∗
3
t∗ , and sets ψ∗
nents are computed by programming of the random oracle
H. If Z = ha+b, then B correctly simulates Game 2, and
if Z is a random value, then B correctly simulates Game 3.
For signing queries at t 6= t∗, B randomly chooses ψ1, . . . ,
)d,
For computing the challenge signature, B chooses ψ∗
$← G1, computes ψ∗
e(grti∗,tψ4, ψ7) holds. Other components are computed by
programming of the random oracle H.
7 = bh. Other compo-
t∗ = (egy′
1 , ψ∗
2 ,
t∗ c)b =
6 = h, and ψ∗
4 = (g′b)y′
5 = Z, ψ∗
ehβ∗
ψ4
4
4
Since now the challenge signature does not depend on the
challenge bit, Pr[S3] = 1/2. This concludes the proof.
Theorem 4.2. The proposed GS-TBK scheme satisﬁes
traceability in the random oracle model under the q-SDH as-
sumption and the knowledge of secret key (KOSK) assump-
tion.
As in the Ohara et al. scheme, we introduce the KOSK
assumption [51] where the adversary is required to reveal
the secret key of the honest users. The reason why we need
to introduce the assumption is explained as follows. In the
Join algorithm, a user sends Xi = hxi
2
The group manager signs xi by using the signing key of the
(and eXi = egxi also).
ξj +γA .
BBS+ signature scheme such that Aj = (gh
Due to the form of the BBS+ signature scheme, the group
manager can sign xi without knowing xi. On the other hand,
in the security proof, the simulator needs to send a signed
message xi in order to send a signing query to the signing
oracle of the underlying BBS+ signature scheme. So, we use
the KOSK assumption.
uj
1 Xi)
ζj
0 h
1
We can construct an algorithm that extracts a BBS+ sig-
nature by applying the Forking lemma [50]. More precisely,
from the winning condition i 6∈ CU \ RUt∗ , an adversary
needs to produce a forged group certiﬁcate A that is not
issued via the SndToI oracle, or needs to produce a forged
certiﬁcate of non-revoked signers B that is not generated
when the Revoke oracle is called. Since the signature output
by the adversary is valid, forged BBS+ signatures are ex-
tracted from the signature. Unforgeability of expiry time of
signing keys is also reduced to unforgeability of the BBS+
signature scheme. That is, if an adversary can produce a
valid signature though an expiry time τi has passed, i.e.,
τi < t∗, then there exists a BBS+ signature B which is valid
and is not contained in RLt∗ . So, we can construct an algo-