### Section VI-C: Detection of Return Instructions

To facilitate subsequent analyses (whether human or automated), it is essential to identify as many return (`ret`) instructions as possible. This reduces the need for further reasoning about these instructions. We consider two sets of programs for this purpose:

1. Five samples from Section VI-B, obfuscated using the source-to-source obfuscator Tigress [35].
2. Five randomly selected coreutils without any obfuscation.

The five samples from Section VI-B were obfuscated with the AntiBranchAnalysis transformation, which replaces all conditional branches with calls and `ret` instructions. The obfuscator uses the following schemes:
- `push; call; ret; ret` (the last `ret` jumps to the pushed value)
- `push; ret` (similarly, the `ret` jumps to the pushed value)

#### Results

The results are summarized in Table VI. The five obfuscated samples contain a total of 218 different `ret` instructions, of which 77 are genuine and 141 are violated (including 132 single-target). Our detection method achieved a perfect score with no false positives or false negatives. For the five coreutils, BB-DSE did not produce any false positives, and most of the `ret` instructions were proven to be genuine (149 out of 156). The few remaining unproven `ret` instructions are due to unhandled libc side-effects.

**Table VI: Stack Tampering Results**

| Sample        | #ret | Genuine | Proved Genuine | Violated | Proved Single-Target |
|---------------|------|---------|----------------|----------|----------------------|
| simple-if     | 6    | 6/0     | 6/0            | 0/0      | 0/0                  |
| bin-search    | 15   | 15/0    | 15/0           | 0/0      | 0/0                  |
| bubble-sort   | 6    | 6/0     | 6/0            | 0/0      | 0/0                  |
| mat-mult      | 31   | 31/0    | 31/0           | 0/0      | 0/0                  |
| huffman       | 19   | 19/0    | 19/0           | 0/0      | 0/0                  |
| ls            | 30   | 30/0    | 30/0           | 0/0      | 0/0                  |
| dir           | 35   | 35/0    | 35/0           | 0/0      | 0/0                  |
| mktemp        | 21   | 20/0    | 20/0           | 0/0      | 0/0                  |
| od            | 21   | 21/0    | 21/0           | 0/0      | 0/0                  |
| vdir          | 49   | 43/0    | 43/0           | 0/0      | 0/0                  |

- Each `ret` is counted only once.
- `a/d`: aligned, disaligned (cf. Section VI-C)

### Conclusion

BB-DSE performs exceptionally well, with no false positives and a perfect score on obfuscated samples. The technique successfully recovers both genuine `ret` instructions and single-target tampered `ret` instructions. Notably, no tampered `ret` instructions were found in the randomly selected coreutils, supporting the idea that such tampering is not common in legitimate programs.

### Section D: Conclusion

These controlled experiments clearly demonstrate that BB-DSE is a highly precise approach for addressing various infeasibility questions. They also show that finding a suitable bound \( k \) is not a practical issue. Finally, the approach appears to be scalable, a point that will be definitively proven in Sections VII and VIII.

### Section VII: Large-Scale Evaluation on Packers

To validate the scalability of BB-DSE on representative codes, we conducted a large-scale experiment on packers using the two detection algorithms from Section VI.

#### Context

Packers are programs that embed other programs and decompress/decipher them at runtime. Since packers are used for software protection, they often contain multiple obfuscation schemes, including self-modification. Packers are also widely used by malware and are often the primary line of defense. Therefore, packers are very representative for our study, both in terms of malware protections and size, as packed programs tend to have extensive execution traces.

#### Protocol

We aimed to check if BB-DSE can detect opaque predicates or call stack tampering on packed programs. A large and representative set of packers was chosen, ranging from free to commercial tools. A stub binary (hostname) was packed by each packer, and analyses were triggered on these packed programs in a black-box manner, without prior knowledge of the internal workings of the packers. Trace lengths were limited to 10 million instructions, and packers reaching this limit were not analyzed.

#### Results

Table VII shows partial results for 10 packers. The complete results are provided in Table XVI in the Appendix. First, BB-DSE is efficient and robust enough to handle most packed programs, involving very long traces (â‰¥ million instructions) and advanced protections like self-modification. Second, across 32 packers, 420 opaque predicates and 149 call/stack tampering instances were detected, and many `ret` instructions were proven to be genuine. All manually checked results were true positives.

**Table VII: Packer Experiment, Opaque Predicates & Stack Tampering**

| Packers              | Static Size | Dynamic Information | Opaque Pred. | Stack Tampering |
|----------------------|-------------|---------------------|--------------|-----------------|
| ACProtect v2.0       | 101K        | 1.8M                | 74           | 32              |
| ASPack v2.12         | 10K         | 377K                | 263          | 42              |
| Crypter v1.12        | 45K         | 1.1M                | 41           | 53              |
| Expressor            | 13K         | 635K                | 21           | 0               |
| nPack v1.1.300       | 11K         | 138K                | 11           | 11              |
| PE Lock              | 21K         | 2.3M                | 159          | 24              |
| RLPack               | 6K          | 941K                | 24           | 8               |
| TELock v0.51         | 12K         | 406K                | 2             | 90              |
| Upack v0.39          | 4K          | 711K                | 2             | 2               |
| UPX v2.90            | 5K          | 62K                 | 1             | 1               |

#### Other Discoveries

- **Opaque Predicates**: Interesting patterns were revealed, such as ACProtect adding opaque predicates by chaining mutually exclusive conditional jumps. For example, `jl 0x100404c; jge 0x100404c` where the second jump is necessarily opaque. Many variants of this pattern were found, such as `jp/jnp`, `jo/jno`, etc. The well-known opaque predicate pattern `xor ecx, ecx; jnz` was detected in ARMADILLO.
- **Call/Stack Tampering**: Various violations were detected according to the taxonomy in Section V. For instance, the two patterns found in ACProtect (Figures 9 and 10) were detected as [violated], [disaligned], [single] and [violated], [aligned], [single]. More details can be found in the Appendix. In Aspack, stack tampering detection allowed us to precisely locate the moment in the trace where the packer payload (i.e., the original unpacked program) is likely decompressed in memory.

#### Conclusion

By detecting opaque predicates and call/stack tampering on packers with very long trace lengths, this experiment clearly demonstrates BB-DSE's ability to scale to realistic obfuscated examples (without any prior knowledge of the protection schemes) and its usefulness. This study also provides valuable insights into the inner workings of the considered packers, such as types of protections and the location of the jump to the entrypoint of the original unpacked program.

### Section VIII: Real-World Malware: X-Tunnel

#### Context & Goal

As an application of the previous techniques, we focus on the heavily obfuscated X-TUNNEL malware. X-TUNNEL is a ciphering proxy component that allows the X-AGENT malware to reach the command and control (C&C) server if it cannot do so directly. This is often the case for machines behind firewalls or with restricted network access.

#### Analysis

- **Context**: X-TUNNEL is a critical component for the X-AGENT malware, enabling it to communicate with the C&C server.
- **Goal**: To analyze and understand the obfuscation techniques used in X-TUNNEL and to apply BB-DSE to detect and mitigate these techniques.

This section will detail the specific findings and methods used to analyze X-TUNNEL, leveraging the techniques and insights gained from the previous sections.