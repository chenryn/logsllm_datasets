(cf. Section VI-C) as many ret as possible, so that latter
analyses (human or automated) do not have to reason about
them anymore. We consider two sets of programs: (1) the
4http://github.com/Z3Prover/z3
5 samples used Section VI-B, obfuscated with the source-
to-source obfuscator Tigress [35]; (2) 5 (randomly selected)
coreutils without any obfuscation. The 5 samples from
Section VI-B have been obfuscated with the AntiBranchAnal-
ysis transformation that replaces all conditional branches with
calls and rets. The two schemes used by the obfuscator are:
• push; call; ret; ret (the last ret jumps on pushed value)
• push; ret (idem)
Results. Results are given in Table VI. The 5 obfuscated
samples sums up 218 different ret. Among them 77 are
genuine and 141 violated (including 132 single-target). Our
detection method achieves here a perfect score, with no false
positive nor false negative. On the 5 coreutils, BB-DSE
does not yield any false positive and most of the ret are
proved genuine (149/156). The few remaining unproved ret
come from unhandled libc side-effects.
TABLE VI: Stack tampering results
runtime genuine
†
proved
genuine
proved
runtime violation
†
proved
proved
single
Sample
#ret
obfuscated programs
6
simple-if
bin-search
15
bubble-sort
6
31
mat-mult
huffman
19
non-obfuscated programs
ls
dir
mktemp
od
vdir
30
35
21
21
49
6
15
6
31
19
30
35
20
21
43
a/d
6/0
15/0
6/0
31/0
19/0
30/0
35/0
20/0
21/0
43/0
#ret
9
25
15
69
23
0
0
0
0
0
a/d
0/0
0/0
0/1
0/0
0/3
-
-
-
-
-
8
24
13
68
19
-
-
-
-
-
†each ret is counted only once – a: aligned, d: disaligned (cf. Sect. VI-C)
Conclusion. BB-DSE performs very well here, with no false
positive and a perfect score on obfuscated samples. The tech-
nique recovers both genuine ret and single-target tampered
ret. Interestingly, no tampered ret were found on the few
(randomly selected) coreutils, supporting the idea that
such tampering is not meant to occur in legitimate programs.
D. Conclusion
These different controlled experiments demonstrate clearly
that BB-DSE is a very precise approach for solving different
kinds of infeasibility questions. They also demonstrate that
ﬁnding a suitable bound k is not a problem in practice. Finally,
the approach seems to be scalable. This last point will be
deﬁnitely proved in Sections VII and VIII.
VII. LARGE-SCALE EVALUATION ON PACKERS
To validate the scalability of BB-DSE on representative codes,
in terms of both size and protection, we perform a large
scale experiment on packers with the two detection algorithms
already used in Section VI.
Context. Packers are programs embedding other programs and
decompressing/deciphering them at runtime. Since packers are
641
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:31 UTC from IEEE Xplore.  Restrictions apply. 
used for software protection, most of them contain several
obfuscation schemes (including self-modiﬁcation). As a matter
of fact, packers are also widely used by malware, and actually
in many cases they are the only line of defense. Hence, packers
are very representative for our study, both in terms of malware
protections and size, as packed programs tend to have huge
execution traces.
Protocol. We want to check if BB-DSE is able to detect opaque
predicates or call stack tampering on packed programs. For
that, a large and representative set of packers was chosen,
ranging from free to commercial tools. Then a stub binary
(hostname) was packed by each packer. Analyses are then
triggered on these packed programs in a black-box manner, that
is to say, without any prior knowledge of the internal working
of the packers – we do not know which obfuscation are used.
For homogeneity, trace length are limited to 10M instructions
and packers reaching this limit were not analysed.
A. Results
Table VII shows the partial results on 10 packers. The
complete results are given in Table XVI in Appendix. First,
BB-DSE is efﬁcient and robust enough to pass on most of
the packed programs, involving very long traces (≥ million of
instructions) and advanced protections such as self-modiﬁcation.
Second, over the 32 packers, 420 opaque predicates and 149
call/stack tampering have been found, and many ret have
been proved genuine. All the results that have been manually
checked appeared to be true positive (we did not checked them
all because of time constraints).
B. Other Discoveries
Opaque predicates. Results revealed interesting patterns,
for instance ACProtect tends to add opaque predicates by
chaining conditional jumps that are mutually exclusive like:
jl 0x100404c ; jge 0x100404c. In this example the
second jump is necessarily opaque since the ﬁrst
jump
strengthens the path predicate, enforcing the value to be lower.
This example shows that our approach can detect both invariant
and contextual opaque predicates. Many other variants of this
pattern were found: jp/jnp, jo/jno, etc. Similarly, the well-
known opaque predicate pattern xor ecx, ecx; jnz was
detected in ARMADILLO. Because of the xor, the non-zero
branch of jnz is never taken.
The dynamic aspect of BB-DSE allowed to bypass some
tricks that would misled a reverser into ﬂagging a predicate
as opaque. A good example is a predicate found in ASPack
seemingly opaque but that turned not to be opaque due to a
self-modiﬁcation (Figure. 8). Statically, the predicate is opaque
since BL is necessarily 0 but it turns out that the second opcode
bytes of the MOV BL, 0X0 is being patched to 1 in one branch
in order to take the other branch when looping back later on.
Call/stack tampering. According to the taxonomy of Section
V, many different kinds of violations are detected. For instance,
the two patterns found in ACProtect (Figures 9 and 10) are
detected as [violated], [disaligned], [single] and
(cid:62)(cid:17)(cid:17)(cid:17)(cid:17)(cid:64)
(cid:91)(cid:19)
(cid:20)(cid:19)(cid:19)(cid:23)(cid:19)(cid:73)(cid:72)(cid:29)(cid:3)(cid:3)(cid:80)(cid:82)(cid:89)(cid:3)(cid:69)(cid:79)(cid:15)(cid:3)(cid:19)(cid:91)(cid:19)
(cid:19)
(cid:20)(cid:19)(cid:19)(cid:23)(cid:20)(cid:70)(cid:19)(cid:29)(cid:3)(cid:70)(cid:80)(cid:83)(cid:3)(cid:69)(cid:79)(cid:15)(cid:3)(cid:19)(cid:91)(cid:19)
(cid:25)(cid:22)
(cid:20)(cid:19)(cid:19)(cid:23)(cid:20)(cid:19)(cid:22)(cid:29)(cid:3)(cid:77)(cid:81)(cid:93)(cid:3)(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:23)(cid:20)(cid:25)(cid:22)
(cid:19)(cid:91)(cid:20)
(cid:61)(cid:41)(cid:3)(cid:32)(cid:3)(cid:19)
(cid:20)(cid:19)(cid:19)(cid:23)(cid:20)(cid:25)(cid:22)(cid:29)(cid:3)(cid:77)(cid:80)(cid:83)(cid:3)(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:23)(cid:20)(cid:25)(cid:71)
(cid:62)(cid:17)(cid:17)(cid:17)(cid:64)
(cid:61)(cid:41)(cid:3)(cid:32)(cid:3)(cid:20)
(cid:61)(cid:41) (cid:32)
(cid:20) (cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:23)(cid:19)(cid:73)(cid:73)(cid:3)(cid:68)(cid:87)
(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:23)(cid:19)(cid:73)(cid:73)(cid:3)(cid:68)(cid:87)(cid:3)
(cid:85)(cid:88)(cid:81)(cid:87)(cid:76)(cid:80)(cid:72)
(cid:85)(cid:88)(cid:81)(cid:87)(cid:76)(cid:80)(cid:72)
(cid:20)(cid:19)(cid:19)(cid:23)(cid:20)(cid:19)(cid:24)(cid:29)(cid:3)(cid:76)(cid:81)(cid:70)(cid:3)(cid:62)(cid:72)(cid:69)(cid:83)(cid:14)(cid:19)(cid:91)(cid:72)(cid:70)(cid:64)
(cid:76)(cid:81)(cid:70)(cid:3)(cid:62)(cid:72)(cid:69)(cid:83)(cid:14)(cid:19)(cid:91)(cid:72)(cid:70)(cid:64)
(cid:62)(cid:17)(cid:17)(cid:17)(cid:64)
(cid:62) (cid:69)
(cid:19)
Fig. 8: ASPack opaque predicate decoy
[violated], [aligned], [single]. More details can
be found in Appendix. Especially, in Aspack, stack tampering
detection allows to ﬁnd precisely that moment in the trace,
where the packer payload (i.e., the original unpacked program)
is very likely decompressed in memory.
address
1004328
1004318
100431c
mnemonic
call 0x1004318
add [esp], 9
ret
comment
//push 0x100432d as return
//tamper the value in place
//return to 0x1004n336
Fig. 9: ACProtect violation 1/2
address
1001000
1001005
100100a
100100b
mnemonic
push 0x1004000
push 0x100100b
ret
ret
comment
jump on the ret below
jump on 0x1004000
Fig. 10: ACProtect violation 2/2
C. Conclusion
By detecting opaque predicates and call/stack tampering on
packers with very long trace length, this experiment clearly
demonstrates both the ability of BB-DSE to scale to realistic
obfuscated examples (without any prior-knowledge of the
protection schemes) and its usefulness. This study yields also
a few unexpected and valuable insights on the inner working
on the considered packers, such as some kinds of protections
or the location of the jump to the entrypoint of the original
unpacked program.
VIII. REAL-WORLD MALWARE: X-TUNNEL
A. Context & Goal
Context. As an application of the previous techniques we focus
in this section on the heavily obfuscated X-TUNNEL malware.
X-TUNNEL is a ciphering proxy component allowing the
X-AGENT malware to reach the command and control (CC) if it
cannot reach it directly [22]. It is usually the case for machines
642
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:31 UTC from IEEE Xplore.  Restrictions apply. 
TABLE VII: Packer experiment, OP & Stack tampering
Packers
ACProtect v2.0
ASPack v2.12
Crypter v1.12
Expressor
nPack v1.1.300
PE Lock
RLPack
TELock v0.51
Upack v0.39
UPX v2.90
Static
size
prog
101K
10K
45K
13K
11K
21K
6K
12K
4K
5K
Dynamic information
#tr.len
1.8M
377K
1.1M
635K
138K
2.3M
941K
406K
711K
62K
(tr.ok/host)
((cid:2),×)
((cid:2),(cid:2))
((cid:2),×)
((cid:2),(cid:2))
((cid:2),(cid:2))
((cid:2),(cid:2))
((cid:2),(cid:2))
(×,(cid:2))
((cid:2),(cid:2))
((cid:2),(cid:2))
#proc
1
1
1
1
1
1
1
1
1
1
#th
1
1
1
1
1
1
1
1
1
1
(self-mod.)
#layers
4
2
0
1
1
6
1
5
2
1
Obfuscation detection
Opaque Pred.
Stack tampering
Unk
74
32
263
42
41
53
21
0
11
11
OP
159
24
24
8
2
90
2
2
1
1
TO
0
0
0
0