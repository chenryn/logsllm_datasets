Automated Materialized View Selection in PostgreSQL
Brendan Fruin Shangfu Peng
DepartmentofComputerScience,UniversityofMaryland
CollegePark,MD20742USA
{brendan, shangfu}@cs.umd.edu
ABSTRACT Self-tuning or automatic tuning has been an elusive goal
fordatabasetechnologyforsometime. Itisawellresearched
Materialized views have been shown to greatly improve the
problem,[23,21,41],overthepastdecade. Thetotalcostof
performanceofqueriesincertaindatabases. Aproblemwith
ownershipforDBMS-basedITsolutionisdominatedbystaff
materialized views is that they are often difficult to define
for system administrator, management, and tuning. How-
orneedtobeupdatedfrequentlywithchangingquerywork-
ever, since the complexity of multi-tier application services
loads. This paper outlines an approach for generating and
increase quickly, and DBMS offers increasingly many tun-
selectingmaterializedviewsinPostgreSQLbymodifyingthe
ing knobs, it is hard and expensive for several experts to
database schema to have pseudo-materialized views. The
adjusttheseknobs. ThusDBMSshouldbeautonomic: self-
generated materialized views are analyzed by rewriting ex-
managing, self-monitoring,self-healing, and self-tuning.
isting queries from a sample workload and analyzing the
Althoughthispaperfocusesontheproblemofautomated
cost using built-in PostgreSQL cost analysis. We then run
physical database design, it is closely interrelated to the
thealgorithmonatestdatabaseandshowhowmaterialized
other self-tuning database technologies, such as statistics
views can increase the performance of queries.
management[26,20,4],monitoringanddiagnostics[22,33,
16, 24], automated memory [14, 25], and automated stor-
1. INTRODUCTION
age/data layout management. In order to automatically
Databasesareoftenassociatedwithhighmaintenancecost select a physical design, we need to recommend a set of
increationandupkeep,butthesecostsareoftenconsidered databasestatisticstoensurethattheoptimizerhasthenec-
warranted if it improves the query time to complete a pro- essary statistics to generate plans that leverage the recom-
cess. General metadata design and management has been mended indexes.
generally left to database administrators who control many
2.1.1 PhysicalDesign&Configuration
aspects of the database. This can be monetarily expensive
for a company that always needs to employ a database ad- The performance of a query depends on the execution
ministrator and these updates may force the database to plan. Execution plans chosen by the optimizer depend on
go offline which can be unacceptable in global companies. statistics created by the optimizer and physical design ob-
Self-tuningin databasesis the idea that both the metadata jects that exist. Physical design configuration includes two
creationandmaintenancecanbecontrolledbythedatabase aspects,indexesandmaterializedviews. Inordertogetthe
automatically. This allows the database to optimize based optimalsettings,it is requiredto formulizetheproblem. In
on the current users queries and with certain implementa- anyauto-tuningproblem,itisnotpossibletofindaparam-
tions this can be done while keeping the system accessible. eter setting that yields universally close-to-optimal perfor-
This paper will focus on research into self-tuning a mance. So the goal is usually to get the configuration from
database to choose optimal materialized views that will in- solvingthebelowfunctiongivenworkloadandperformance
crease query efficiency and be constrained to user defined goal [23]:
costs such as disk-space or maintenance time. Due to the workload∗config→performance metrics
limitedresearchonthisspecificproblem,generalself-tuning In physical design, the workload consists of queries and
practices are presented in Section 2.1 along with its use in updates; the configuration is a set of indexes, materialized
commercial systems in Section 2.1.2. Related works in the views and partitions from a search space. While the upper
principlesbehindmaterializedviewselectionareoutlinedin bound is based on storage space, the goal is to pick a con-
Section 2.2. A general overview of our approach is given figuration with the lowest cost for the given database and
in Section 3. Our candidate materialized view generation workload. However, early approaches before 1997 [38, 31,
algorithm is explained in Section 4 and Section 5 describes 27,28,36]didnotalwaysagreeonwhatconstitutesawork-
how materialized views are ultimately selected. The results load, or what should be measured as the cost for a given
of our experiments are in Section6 followed by futurework query and configuration. These papers stated that it is too
in Section 7. disruptive to estimate goodness of a physical design for a
workload by execution cost. The VLDB 1997 paper [18]
and the SIGMOD 1998 paper [19] from Microsoft build the
2. RELATEDWORK
“What-If”index architecture to recommend indexes for the
given workload. This architecture uses optimizer estimated
2.1 Self-Tuning
costs,andissufficienttofakeexistenceofphysicaldesign. It
isareasonablewaytomeasuregoodnessofadesign.“What- tohaveindependentadvisorsforeachphysicaldesignstruc-
If”architecturealsoextendstohandleotherphysicaldesign ture. The search step that produces the final integrated
structures like materialized views and partitioning. recommendation iteratively invokes each of the advisors in
While we can formalize the“goodness”of a design, the a staged manner. Besides, the selection algorithm is also
search algorithm is crucial in automated physical design. different. It gives some metrics to model like a knapsack
The introduction of materialized views and partitioning re- problem. Firstgenerateainitialsolution,theniterativeim-
sults in an explosion in the search space. There are three provement and randomly swaps.
techniques: pruning table and column sets, merging, and Oracle10gpurposesaadvisornamedSQLAccessAdvisor.
enumeration, which enable physical design tools to explore WecanknowitisalsobasedontheideaofMicrosoft. Oracle
this large space in a scalable manner. [5, 7, 9] describes also builds a new mode, it changes the regular optimizer to
the importance and methods in pruning. After we get all automatic tuning optimizer. This new optimizer includes
candidateselection,theunionofthese“best”configurations the component SQL Profile. Each SQL statement has its
may violate storage constraints and increase the mainte- own SQL Profile that store its auxiliary information. SQL
nance costs for update queries. Thus [7, 11] propose the Profile also generates some recommendation for each SQL
mergingalgorithmforthesecandidates. Sothesearchspace statement. Then SQL Access Advisor collects these advice,
is the union of the“locally best”and“merged”indexes and and consolidates them into a global advice for the entire
materialized views. Since the selection problem has been SQL workload. The big difference of oracle advisor is that
shown to be NP-Hard [15], the focus of related work has it builds a tuning life cycle. First Oracle only cares about
been on developing heuristic solutions that give high qual- high-loadSQLstatementsdetectedbyAutomaticDatabase
ity recommendations that are scalable. Broadly the search Diagnostic Engine (ADDM) and SQL statement defined by
strategies explored thus far can be categorized -s bottom- usersfromUSERcomponent. ThenAutomaticSQLTuning
up[18,35,43]ortop-down[8]search. Thebottom-upstrat- generates and stores the SQL Profile in SQL Tuning Base.
egybeginswithanemptysetandaddsstructuresinagreedy We say this is a loop. It is because after we improve the
manner. In contrast, the top-down approach begins with a execution plan of the set of SQL statements. Hence reduce
globally optimal configuration, but it would be infeasible if their impacts on the system. So in the next cycle, it will
it exceeds the storage bound. begin with a different set of high-load SQL statements.
These three commercial databases dominate this area.
2.1.2 CommercialTools But we cannot get their code or detail implementation.
This is the reason that we want to build a open source
Microsoft, IBM and Oracle database systems ship with
project for self-tuning. Learning from these three commer-
automated physical design tools. These include Database
cial databases, there are several common ideas. First they
Engine Tuning Advisor (DTA) [18, 19, 6] from Microsoft
all estimates cost by optimizer. Second, they all need to
SQL Server, DB2 Design Advisor [40, 43, 44] from IBM
modify optimizer to support“what-if”mode. Then define
DB2, and the SQL Access Advisor [24] from Oracle 10g.
metrics and find candidate indexes and materialized views.
In 1998, Microsoft SQL Server 7.0 was the first commer-
TheyallneedtoimplementacomponenttorewriteSQL.Fi-
cial DBMS to ship a physical database design tool, called
nally,theyallselectindexesandmaterializedviewstogether
the Index Tuning Wizard. Then in the release of Microsoft
to generate the final configuration.
SQL Server 2005, it was replaced by a full-fledged applica-
tion DTA that can provideintegratedrecommendationsfor 2.2 MaterializedViewSelection
indexes, indexed views, indexes on indexed views and hori-
zontal range partitioning. The most important attribution Materialized views in database systems have been shown
for Microsoft is to propose use optimizer estimated costs togreatlyimprovethequeryperformance[17]indataware-
and build a“what-if”component in optimizer. The“what- housesanddecisionsupportsystems. Therehasbeenmuch
if”component is very important. It supports Hypothetical research in the selection of optimal materialized views and
Configuration Mode to allow create indexes and MVs but when to calculate them given constraints on disk-size or
only statistics information, no physical strutures. The MV maintenance cost. These methods differ in whether the
candidatesareonlysingleblock,andgeneratedbysyntactic views are created in preprocessing in static view selection
structure. or as the data is processed in dynamic view selection.
IBM‘s DB2 shipped the DB2 Advisor in 1999 that could
2.2.1 StaticViewSelection
recommend indexes. Subsequently, the DB2Design Advisor
Tool in DB2 version 8.2 provides integrated recommenda- Static view selection (i.e. data warehouse configura-
tions for indexes, materialized views, shared-nothing parti- tion[39])selectsmaterializedviewsofflinebasedonagiven
tioning and multi-dimensional clustering. Some basic ideas workloadgivenconstraintsondisk-spaceorthemaintenance
are very similar to Microsoft. It also builds a new ‘EX- cost. The disk-space is the amount of space that the views
PLAIN’ mode to build hypothetical configuration. How- are allowed to take on the disk while the maintenance cost
ever The difference is that Candidate generation and selec- isthecostassociatedwithupdatingtheviews. Maintenance
tion. The candidate materialized views is just in the for- is expensive and in some cases requires the database to be
mat Select-From-Where-GroupBy. This is like Microsoft. temporarilyputofflineinorderfortheviewstobeupdated.
But DB2 generates more materialized views from logical Onceastaticmaterializedviewhasbeendetermined,itwill
viewsandthecommonsub-expressionsfindingfrommultiple not be changed, but may be updated when the data in the
query optimization (MQO). MQO is a special technique in underlying tables change.
DB2. ItistobuildagraphandfindthecommonsmallSQL Gupta et al. [30] and Theodoratos et al. [39] stressed the
statement. So DB2 considers multi-block queries. Compar- importance of materialized view selection in a data ware-
ing to Microsoft, DB2 supports back-joins. It is designed house in order to minimize total query time while limiting
thetotalcostofdisk-spaceormaintenance. Guptaetal. de- onlyadmittedintothecacheifitsadditionlowerstheoverall
velopedpolynomial-timeheuristicsfordeterminingORview cost of query execution.
graphsandANDviewgraphswithinaconstantfactorofthe For databases which are not static or where the requests
optimalsolutionforthedisk-spaceconstraint. Theyfurther maychangeovertime,itisimportanttoadaptyourmateri-
studiedviewselectionunderthemaintenancecostconstraint alizedviewsinordertoreflectchangesintheunderlyingdata
usinganexponentialA*heuristicswhichtheyfoundalmost andchangesintheusers’queries. Kotidisetal.[32]created
always returned the optimal solution. Theodoratos et al. thedynamicviewmanagementsystem,DynaMat,whichdy-
focused strictly on constraining to the maintenance cost of namically materializes views from incoming queries taking
materializedviews. Theyproposedhavingauxiliarymateri- intoaccountboththecostofthetimenecessaryforupdates
alizedviewsinadatawarehouseinordertoreducethecost and of the disk-space available. DynaMat uses dedicated
ofmaintainingtheothermaterializedviewsbyreducingthe disk storage in order to manage its materialized data that
numberofaccessestobaserelationswhenaccessingthedata supportsanyunderlyingstoragestructureaslongasthereis
warehouse for an update. anaccompanyingcostmodelforqueryingandupdatingthe
Baralis et al. [10] researched the selection of views in a materialized views. The authors found that DynaMat out-
multidimensionaldatabasewiththeintentionoffindingcan- performed optimal pre-computed static view solution, but
didate views that limit the total update cost. They define more importantly it is a self-tunable system that changes
the update cost associated with materializing a view to be its views based upon incoming queries.
the cost of updating the set of materialized views multi-
plied by the frequency of insertions to the fact table. They
3. OVERVIEWOFAPPROACH
select candidate views for materialization with the criteria
that they must be associated with some query in the work- In this section, we describe the data that was used and
load or that the addition of a view and the removal of two the processing on the data that resulted in the selection of
other views would decrease the total cost of the material- materializedviews. Wealsogiveabriefoverviewofhowwe
ized views. Baralis et al. prove that the addition of any incorporated materialized views into PostgreSQL.
non-materialized view will not decrease the total cost. A
3.1 Data&Preparation
heuristic reduction is then applied on the candidate views
toremoveanyviewthatisnotexpectedtocontributetothe For this research, we chose to use the TPC Bench-
optimal query solution. mark H(TPC-H) supportbenchmark[3]. TPC-H allows for
Maintenance of static materialized views is important in the creation of variable sized databases and auto-generates
ensuringthatthedatamaterializedinyourviewsiscurrent a sample workload given a query template with pseudo-
uptosomedegree. Mistryetal.[34]suggestedupdatingma- randomvalues. Weauto-generatedaonegigabytedatabase
terialized views by exploiting common subexpressions and withtheschemashowninFigure1. Wealsoauto-generated
whether to recompute or to incrementally update when the our sample query workload from twenty-two unique query
underlyingdatahaschanged. Zhouetal.[42]presentedthe templates. We consider both the data and the query work-
ideaoflazilyupdatingviewsonlywhenthesystemhasfree load to be static as is often the case in data warehouses
cycles or a query directly references a view. Chaudhari et where materialized views are often used.