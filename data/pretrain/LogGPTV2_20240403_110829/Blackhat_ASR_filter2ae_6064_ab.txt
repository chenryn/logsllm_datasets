    Safepoints (size = 8)
    RelocInfo (size = 0)
    --- End code ---    
假设如上所示，funcX函数有6个参数，V8在ia32架构下编译此代码时，前5个参数是通过寄存器传递，第6个参数是通过栈传递。所有的参数都可以通过JavaScript设置为任意值。
    /*Disassembly code of JS_TO_WASM function */
    --- Code ---             
    kind = JS_TO_WASM_FUNCTION
    name = js-to-wasm#0
    compiler = turbofan
    Instructions (size = 170)
    0x4be08f20 0 55 push ebp
    0x4be08f21 1 89e5 mov ebp,esp
    0x4be08f23 3 56 push esi              
    0x4be08f24 4 57 push edi
    0x4be08f25 5 83ec08 sub esp,0x8
    0x4be08f28 8 8b4508 mov eax,[ebp+0x8]
    0x4be08f2b b e8702e2bde call 0x2a0bbda0 (ToNumber) ;; code: BUILTIN
    0x4be08f30 10 a801 test al,0x1
    0x4be08f32 12 0f852a000000 jnz 0x4be08f62 
当JavaScript调用WebAssembly函数的时候，V8编译器在内部创建JS_TO_WASM函数，编译完成后，JavaScript会调用JS_TO_WASM，然后JS_TO_WASM会调用WebAssembly函数。然而JS_TO_WASM函数调用使用不同的约定，它的第一个函数通过栈传递。假如我们将”call
funcX”改为 “call JS_TO_WASM”，将会发生什么呢？如下所示：
JS_TO_WASM
函数将funcX函数的第6个参数作为第1个参数，并且将参数作为对象指针，因此当参数传入ToNumber函数时，将会导致类型混淆。由于参数值可以通过JS设置，所以可以将任何值作为对象指针传给ToNumber。
这样一来，我们可以在某些地址如double array中伪造一个ArrayBuffer，然后将此地址传入ToNumber，利用OOB
访问泄露ArrayBuffer对象。
V8中OOB Access的利用比较交单直接，一般采用以下几个步骤：
  * 利用OOB泄露ArrayBuffer内容
  * 使用泄露的数据在double array中伪造ArrayBuffer
  * 将伪造的ArrayBuffer地址传入ToNumber
  * 在回调函数中修改ArrayBuffer的BackingStore和ByteLength属性
  * 实现任意地址读写
  * 将JIT代码覆盖成shellcode，完成代码执行
具体的利用方法，很多优秀的浏览器安全研究员在各种安全会议上都曾讲过，也发表过不少文章，这里就不再详细阐述了。
漏洞补丁，对WebAssembly代码进行了拷贝，这样在解析的时候，避免使用共享内存。
## system_server漏洞分析及利用
这一章节主要分为三个部分：
  * 分析利用链中第二个漏洞，CVE-2017-14904
  * 介绍一种沙箱逃逸方法，从而可以远程触发system_server漏洞
  * 分析如何利用该漏洞
### 分析漏洞CVE-2017-14904
该沙箱逃逸漏洞，是由于map和unmap不匹配导致的Use-After-Unmap问题，相应的漏洞代码出现在libgralloc模块的gralloc_map和gralloc_unmap函数，下面对这两个函数进行详细分析。
gralloc_map函数将graphic buffer映射到内存空间，graphic buffer
是由参数handle控制，而参数handle是由浏览器渲染进程控制。由于前面已经完成Chrome RCE，所以参数handle是可控的。
从上面代码可以看出，完成map操作之后，将映射地址mappedAddress加上hnd->offset
赋值给hnd->base，map出的内存空间将会在gralloc_map中被unmap。
从代码中可以看出，hnd->base直接传入系统调用unmap，而没有减去hnd->offset，在该函数里，hnd->offset根本没有被使用，很显然，这将会导致map和unmap不匹配。
然而hnd->offset是可以被Chrome渲染进程操控的，结果导致存在这样的可能性：从Chrome沙箱进程中unmap
system_server的任意内存页。
### 沙箱逃逸
前面已经完成了Chrome
RCE，如果想从Chrome沙箱进程中触发system_server的漏洞，就需要完成沙箱逃逸。接下来就会介绍一种巧妙的沙箱逃逸方式。
从上图可以看出Chrome是沙箱内进程，属于isolated_app
域。从下面isolated_app相应的sepolicy文件可以看出，从沙箱进程中，可以访问到一些服务，如activity_service。
尽管可以从沙箱进程中获取到activity_service，但是当启动Activity的时候，enforceNotIsolatedCaller函数将会被调用，而这个函数会检查调用者是否在isolate_app域。
    public final int startActivity(IApplicationThread caller, String callingPackage,
    Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,
    int startFlags, ProfilerInfo profilerInfo, Bundle bOptions) {
        return startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,
            resultWho, requestCode, startFlags, profilerInfo, bOptions,
            UserHandle.getCallingUserId());
    }
    public final int startActivityAsUser(IApplicationThread caller, String 
    callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, 
    int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId){
        enforceNotIsolatedCaller("startActivity");
        userId = mUserController.handleIncomingUser(Binder.getCallingPid(), 
    Binder.getCallingUid(), userId, false, ALLOW_FULL_ONLY, "startActivity", null);
    // TODO: Switch to user app stacks here.
    return mActivityStarter.startActivityMayWait(caller, -1, callingPackage, intent,
        resolvedType, null, null, resultTo, resultWho, requestCode, startFlags,
         profilerInfo, null, null, bOptions, false, userId, null, null);
    void enforceNotIsolatedCaller(String caller) {
       if (UserHandle.isIsolated(Binder.getCallingUid())) {
          throw new SecurityException("Isolated process not allowed to call " + caller);
       }
    }
由于SeLinux的限制，大部分系统服务已经无法从沙箱进程中访问，攻击面变得越来越窄。
尽管有各种不同的限制，仍然能够找到一种方法，使用Parcelable对象，通过binder call方式，是沙箱进程能访问到system_server。
Android中很多类实现了接口Parcelable，他们的成员函数createFromParcel是可以被沙箱进程使用binder call
方式调用的，GraphicBuffer类就是其中之一。
    public class GraphicBuffer implements Parcelable {
    …
    public GraphicBuffer createFromParcel(Parcel in) {…}
    }
后续分析的exploit，就是使用了GraphicBuffer。
    case CONVERT_TO_TRANSLUCENT_TRANSACTION: {
    data.enforceInterface(IActivityManager.descriptor);
    IBinder token = data.readStrongBinder();
    final Bundle bundle;
    if (data.readInt() == 0) {
        bundle = null;
    } else {
        bundle = data.readBundle();
    }
    final ActivityOptions options = ActivityOptions.fromBundle(bundle);
    boolean converted = convertToTranslucent(token, options);
    	……
    }
上述代码，即是从沙箱进程访问system_server的方式，通过binder
call，实现远程transact。从渲染进程中传入的bundle将会传入ActivityOptions对象的构造函数，如下代码所示：
    public static ActivityOptions fromBundle(Bundle bOptions) {
            return bOptions != null ? new ActivityOptions(bOptions) : null;
    }
    public ActivityOptions(Bundle opts) {
    opts.setDefusable(true);
    mPackageName = opts.getString(KEY_PACKAGE_NAME);
    try {
        mUsageTimeReport = opts.getParcelable(KEY_USAGE_TIME_REPORT);
    } catch (RuntimeException e) {
        Slog.w(TAG, e);
    }
从而，传入的bundle将会被system_server解析。
到此，也就找到了一条从Chrome沙箱进程中访问system_server的通道。调用createFromParcel创建bundle，将bundle封装到GraphicBuffer，通过binder
call方式调用convertToTranslucent方法，从而将恶意的bundle传入system_server。
### system_server漏洞利用
通过下面6个步骤，完成这个漏洞利用：
  1. 地址空间塑形，创建一些连续的ashmem映射空间
  2. 触发漏洞，unmap一部分堆和ashmem内存空间
  3. 使用ashmem内存填充unmap掉的空间
  4. 堆喷射，喷射的堆数据将会写入shamem空间
  5. 泄露某些模块基地址，覆盖GraphicBuffer对象的虚函数指针
  6. 触发GC，执行ROP
接下来逐一介绍每个步骤。
第一步，地址空间塑形，使一个堆块正好位于连续的ashmem映射空间之上，内存布局如下：
第二步，触发漏洞，unmap掉部分堆和ashmem空间，如下图：
Unmap 4KB堆内存空间，(2M-4KB)的ashmem空间，因此在堆块和ashmem29之间形成2M的间隙。
第三步，使用ashmem内存填充步骤2中unmap出的内存空间，如下：
2M的间隙，被ashmem1001填充。
第四步，堆喷射，使喷射的堆数据写入ashmem内存，如下所示：
堆喷时，堆管理程序认为内存空间0x7f547ff000 到
0x7f54800000仍然是可分配的，从而在这个区间分配内存，写入数据，导致将数据写入了ashmem空间。
第五步，在ashmem内存中创建GraphicBuffer对象，覆盖其虚拟函数指针，如下图：
由于步骤三中填充的ashmem内存，同时被system_server和渲染进程map，因此system_server进程的部分堆空间可以被渲染进程读写，通过binder
call，可以触发system_server在ashmem空间创建GraphicBuffer对象。
第六步，触发GC，执行ROP
GraphicBuffer继承RefBase类，从代码中可以看出，它有个虚函数成员
onLastStrongRef。完成了前面的步骤之后，可以从ashmem内存读取虚函数表地址，从而计算出onLastStrongRef地址。
从libui中可以找到了一些ROP，使用这些ROP覆盖函数地址，当GraphicBuffer对象被析构的时候，虚函数onLastStrongRef将会被调用，从而触发执行ROP。
## 总结
使用V8漏洞CVE-2017-5116攻破Chrome渲染进程
通过巧妙的方式，利用漏洞CVE-2017-14904，完成system_server远程提权
这两个漏洞均在2017年的12月安全更新中被修复