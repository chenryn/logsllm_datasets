**Clarified and Optimized Text:**

I am using Ubuntu 14.04 LTS, which comes with multiple pre-installed Python versions. Currently, when I type `python` in the terminal, it launches Python 2.7.11. However, the default version for Ubuntu 14.04 is 2.7.6, which can be accessed by typing `/usr/bin/python`. 

I have installed several libraries, such as Pygame and OpenCV (cv2), using `apt-get`, which are configured for the default Python version (2.7.6). Additionally, I have installed Anaconda, which includes Python 2.7.11, and I used `pip` to install packages for this version. As a result, `pip` and Anaconda are associated with Python 2.7.11. I am not using Python 3, and there are no Python versions installed in `/usr/local/bin`.

### Issues and Solutions

- **Problem:** The main issue is that some libraries are installed for Python 2.7.6, while others are installed for Python 2.7.11. This inconsistency causes conflicts.
- **Cause:** The problem stems from the aliasing of the `python` command. When I installed libraries like OpenCV and Pygame using `apt-get`, they were linked to the default Python version (2.7.6). However, when I installed Anaconda, it was set up for Python 2.7.11 because the `python` command was aliased to this version.

### Steps to Resolve the Issue

1. **Determine the Default Version:**
   - Decide which Python version you want to use as the default. For consistency, it's best to stick with one version, either 2.7.6 or 2.7.11.

2. **Update Aliases:**
   - If you choose to use Python 2.7.6 as the default, ensure that the `python` command is aliased to `/usr/bin/python` (which points to 2.7.6).
   - To do this, you can add the following line to your `.bashrc` or `.bash_profile`:
     ```sh
     alias python='/usr/bin/python'
     ```
   - Alternatively, if you prefer Python 2.7.11, update the alias to point to the appropriate executable:
     ```sh
     alias python='/path/to/python2.7.11'
     ```

3. **Reinstall Libraries:**
   - After setting the correct alias, reinstall any libraries you need. For example, if you chose Python 2.7.6, you can reinstall Anaconda and other packages using:
     ```sh
     conda create --name myenv python=2.7.6
     conda activate myenv
     conda install pygame opencv
     ```

4. **Verify Installation:**
   - Ensure that all libraries are correctly installed for the chosen Python version. You can check this by running:
     ```sh
     python -c "import pygame; print(pygame.__version__)"
     python -c "import cv2; print(cv2.__version__)"
     ```

5. **Future Configuration:**
   - To avoid similar issues in the future, always verify the Python version being used before installing new packages. Use `which python` to check the current `python` alias, and use `python --version` to confirm the version.
   - Consider using virtual environments (e.g., `venv` or `conda`) to manage different sets of dependencies for different projects.

By following these steps, you should be able to resolve the current issues and configure your system to avoid similar problems in the future.