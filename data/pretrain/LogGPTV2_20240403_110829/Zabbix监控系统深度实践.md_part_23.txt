---
## Page 193
### 178°

用户不允许直接使用某些特定的LDAP配置。例如，对于OpenLDAP，可以使用“uid=ldap_search,ou=system”形式；而对于Microsoft Active Directory，则应使用“sAMAccountName”。在Active Directory中，基础DN（Base DN）通常为“DC=company,DC=com”。根据不同的LDAP系统，设置也会有所不同：对于OpenLDAP，Base DN可能是“ou=Users,ou=system”。

- **LDAP Host**：LDAP服务器地址，如`ldap://ldap.zabbix.com`。如果使用安全连接（类似于HTTPS），则应使用`ldaps://ldap.zabbix.com`。
- **Port**：默认情况下，LDAP使用389端口，而LDAPS使用636端口。
- **Base DN**：基础DN是LDAP中用于标识唯一实体的名称引用。
- **Search Attribute**：在LDAP中搜索的属性。对于OpenLDAP，使用“uid”，而对于Microsoft Active Directory，使用“sAMAccountName”。
- **Bind DN**：绑定DN，用于在LDAP服务器上搜索账户。例如，在OpenLDAP中，这可能是一个具有足够权限的账户。
- **Bind Password**：与Bind DN对应的密码。

Zabbix不仅支持内置登录系统，还支持通过LDAP和HTTP进行身份验证。下面将介绍如何为Zabbix配置LDAP登录，如图10-49所示。

![图10-49](#)

---
## Page 194
### 179°

在Zabbix中，用户认证可以通过多种方式进行，包括LDAP、HTTP以及内部认证。接下来，我们将探讨前端访问（Frontend access）和调试模式（Debug mode）的含义。

- **Frontend Access**：
  - **System default**：这是默认设置，即Zabbix在“Administration”→“Authentication”中设定的登录方式。
  - **Internal**：无论Zabbix设置为何种登录方式，都可以使用该用户登录。
  - **Disabled**：禁止该用户访问Zabbix前端。

- **Debug Mode**：启用后，Zabbix前端将显示详细的调试信息，帮助诊断问题。

当用户组（User group）被赋予了前端访问权限时，即使启用了LDAP认证，也可以通过该用户组访问Zabbix。需要注意的是，如果当前用户无法通过LDAP认证，则无法使用该用户登录。

为了测试LDAP设置是否成功，可以使用以下参数：
- **Test authentication**：返回测试用户登录LDAP的信息。
- **Login**：默认使用当前登录的用户名进行测试。
- **User password**：用于测试的用户密码。

总体而言，Zabbix配置LDAP相对简单，但在配置界面中使用的参数可能会引起混淆。例如，“Test authentication”、“Login”和“Password to test LDAP”等术语容易误导用户。建议在设计页面时，对这些参数进行更清晰的命名。

![图10-50](#)

---
## Page 195
### 180°

在Zabbix中，用户组（User group）和用户（User）的设置较为直观。用户组主要涉及一些基本属性，而用户部分则更为详细。在调试模式下，Zabbix会显示两种类型的调试信息：
- **API调用**：显示Zabbix API调用的参数和结果。
- **SQL查询**：显示执行的SQL语句及其结果。

例如，以下是API调用的一个示例：
```php
Array
(
    [output] => extend
    [usrgrpids] => 7
    [debug_mode] => 1
    [users_status] => 0
    [gui_access] => 0
    [name] => Zabbix administrators
    [usrgrpid] => 7
)
```

而SQL查询则可能如下所示：
```sql
SET NAMES utf8
```

调试信息还包括PHP方法调用链，例如：
```php
usergrps.php:22 → require_once() → ZBase->run() → ZBase->initDB() → DBconnect() → DBexecute() in /var/www/html/zabbix/include/db.inc.php:61
```

通过这些调试信息，可以更好地理解Zabbix的工作流程，并进行故障排除。

---
## Page 196
### 181°

在Zabbix的监控板块中，可以在主机（Host）的相关位置执行远程命令。例如，在Action中设置直接发送给某个Media的操作，如图10-50所示。此外，还可以通过Scripts栏目定义和执行脚本，如图10-51所示。

- **Used in actions**：如果在某个Action中设置了直接发给某个Media，这一列就会显示相关的Action。
- **Media types**：显示可用的媒体类型，如SMS、Jabber和Email。

![图10-51](#)

---
## Page 197
### 182°

在Scripts栏目中，可以定义和管理脚本。每个脚本需要以下配置：
- **Name**：脚本的名称，可以包含层级结构，例如“def/Detect operating system”。
- **Type**：脚本类型，可以是Script或IPMI。
- **Commands**：执行的命令，建议使用绝对路径。
- **Execute on**：选择在Zabbix server还是Zabbix agent上运行。
- **Host access**：用户对主机需要的权限，可以选择Read或Write。
- **Host group**：脚本可以在哪些主机组中执行。
- **User groups**：允许哪些用户组执行该脚本。
- **Required host permissions**：用户对主机需要的最低权限级别。
- **Enable confirmation**：在执行前弹出确认窗口。
- **Confirmation text**：确认窗口中的提示文本。

例如，一个脚本可能如下所示：
- **Name**：Detect operating system
- **Type**：Script
- **Commands**：`sudo /usr/bin/nmap -O {HOST.CONN} 2>&1`
- **Execute on**：Zabbix server
- **Host access**：Read
- **Host group**：All
- **User groups**：Zabbix administrators

![图10-52](#)

---
## Page 198
### 183°

在Audit栏目中，可以查看Zabbix中的各种操作和变更记录。默认情况下，Audit会记录以下内容：
- **Action状态**：
  - **In progress**：正在进行中。
  - **Sent**：通知已发出。
  - **Executed**：命令已执行。
  - **Not sent**：Action尚未完成。

在过滤器中，可以选择关注的用户、Action和资源。时间选择与Graph一致。确认文本支持以下宏：
- **{HOST.NAME}**
- **{HOST.HOST}**
- **{HOST.DNS}**
- **{HOST.IP}**
- **{HOST.CONN}**
- **User Macro**

![图10-53](#)

---
## Page 199
### 184°

Queue栏目显示Zabbix的队列堆积情况。队列堆积数据的数量是衡量Zabbix性能的重要指标。如果Zabbix运行良好，队列中不应有大量堆积的数据；反之，如果Zabbix遇到性能瓶颈，队列中的数据可能会堆积起来。

- **Producer-Queue-Consumer模型**：这种模型将消息的生产者和消费者解耦。在Zabbix中，从主机收集的监控数据会被放入队列中，由Zabbix server处理。

在右上角，可以选择不同的视图来查看队列的详细信息。点击“Details”按钮后，可以看到队列中具体堆积的数据。

![图10-54](#)

---
## Page 200
### 185°

Notification栏目显示一段时间内Zabbix发送的通知统计信息。在右上角，可以选择媒体类型和时间范围。

Queue栏目显示当前各个队列的堆积情况。在右上角，可以切换不同的视图以查看详细的队列数据。

![图10-55](#)

---

希望这些优化后的文本能够更加清晰、连贯和专业。如果有任何进一步的需求，请随时告知。