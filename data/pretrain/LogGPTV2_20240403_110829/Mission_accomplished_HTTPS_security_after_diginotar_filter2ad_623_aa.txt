title:Mission accomplished?: HTTPS security after diginotar
author:Johanna Amann and
Oliver Gasser and
Quirin Scheitle and
Lexi Brent and
Georg Carle and
Ralph Holz
Mission Accomplished? HTTPS Security after DigiNotar
Johanna Amann∗
ICSI / Corelight / LBNL
PI:EMAIL
Lexi Brent
The University of Sydney
PI:EMAIL
Oliver Gasser∗
Technical University of Munich
PI:EMAIL
Georg Carle
Technical University of Munich
PI:EMAIL
Quirin Scheitle∗
Technical University of Munich
PI:EMAIL
Ralph Holz
The University of Sydney
PI:EMAIL
ABSTRACT
Driven by CA compromises and the risk of man-in-the-middle
attacks, new security features have been added to TLS,
HTTPS, and the web PKI over the past five years. These
include Certificate Transparency (CT), for making the CA
system auditable; HSTS and HPKP headers, to harden the
HTTPS posture of a domain; the DNS-based extensions CAA
and TLSA, for control over certificate issuance and pinning;
and SCSV, for protocol downgrade protection.
This paper presents the first large scale investigation of
these improvements to the HTTPS ecosystem, explicitly ac-
counting for their combined usage. In addition to collecting
passive measurements at the Internet uplinks of large Uni-
versity networks on three continents, we perform the largest
domain-based active Internet scan to date, covering 193M
domains. Furthermore, we track the long-term deployment
history of new TLS security features by leveraging passive
observations dating back to 2012.
We find that while deployment of new security features has
picked up in general, only SCSV (49M domains) and CT (7M
domains) have gained enough momentum to improve the over-
all security of HTTPS. Features with higher complexity, such
as HPKP, are deployed scarcely and often incorrectly. Our em-
pirical findings are placed in the context of risk, deployment
effort, and benefit of these new technologies, and actionable
steps for improvement are proposed. We cross-correlate use
of features and find some techniques with significant correla-
tion in deployment. We support reproducible research and
publicly release data and code.
CCS CONCEPTS
• Security and privacy → Network security;
∗Joint first authorship.
Permission to make digital or hard copies of all or part of this work
for personal or classroom use is granted without fee provided that
copies are not made or distributed for profit or commercial advantage
and that copies bear this notice and the full citation on the first page.
Copyrights for components of this work owned by others than the au-
thor(s) must be honored. Abstracting with credit is permitted. To copy
otherwise, or republish, to post on servers or to redistribute to lists,
requires prior specific permission and/or a fee. Request permissions
from permissions@acm.org.
IMC ’17, November 1–3, 2017, London, United Kingdom
© 2017 Copyright held by the owner/author(s). Publication rights
licensed to Association for Computing Machinery.
ACM ISBN 978-1-4503-5118-8/17/11. . . $15.00
https://doi.org/10.1145/3131365.3131401
KEYWORDS
TLS, HTTPS, PKI, CT, HSTS, HPKP, CAA, SCSV, X.509
ACM Reference Format:
Johanna Amann, Oliver Gasser, Quirin Scheitle, Lexi Brent, Georg
Carle, and Ralph Holz. 2017. Mission Accomplished? HTTPS
Security after DigiNotar. In Proceedings of IMC ’17, London,
United Kingdom, November 1–3, 2017, 16 pages.
https://doi.org/10.1145/3131365.3131401
INTRODUCTION
1
The compromise of the DigiNotar CA in 2011 [57] was a
decisive event in the history of WWW security: for the first
time, a CA was removed from browser root stores, because
of poor infrastructure control and the subsequent issuance
of forged certificates [51]. In the same year, several studies
documented the poor state of the TLS/X.509 ecosystem in
general [8, 24, 39].
Since then, a number of improvements and additions have
been proposed to strengthen the X.509 PKI. They include
Certificate Transparency (CT) [44], which establishes a set of
publicly verifiable append-only certificate logs; HTTP Strict
Transport Security (HSTS) [36], which instructs browsers
to only connect through HTTPS; HPKP, which allows cer-
tificate pinning through HTTP headers [25]; SCSV, which
protects against protocol downgrading attacks [50]; DANE-
TLSA, which enables HTTPS certificate pinning using the
DNS [37]; and finally CAA [33], which allows control of cer-
tificate issuance through the DNS.
In this paper, we investigate the prevalence of these tech-
nologies, audit the correctness of their deployment, and ex-
amine the combined role they play in post-DigiNotar web
security. Our contributions are as follows: We combine active
and passive measurements to investigate the improvements
to TLS and the web PKI. Our measurements include hitherto
the largest active scans of the TLS/X.509 ecosystem. Rather
than performing an active scan of the IP address space, our
scans target a list of 193M domain names. This provides
a more complete view, as many HTTPS servers implement
the Server Name Indication (SNI) extension to serve dif-
ferent certificates and use different TLS configurations per
domain [71]. This domain-based approach also reduces bias
caused by the common presence of embedded devices that
happen to run web servers [16]. Our active scans originate
from two vantage points on opposite ends of the globe, using
both IPv4 and IPv6. We also perform passive measurements
IMC ’17, November 1–3, 2017, London, United Kingdom
Amann, Gasser, Scheitle, Brent, Carle, Holz
in North America, Europe, and Australia. To the best of our
knowledge, this is the first time that such a geographically
diverse passive TLS observation has been conducted. Our
data analysis uses a novel process in which active and passive
data share the same analysis pipeline.
We investigate each of the above technologies in depth,
particularly focusing on Certificate Transparency and new
TLS and HTTPS extensions. Importantly, we also investigate
how these technologies are used in combination, and which
protection level is thereby achieved. We paint an accurate pic-
ture to which degree these technologies are correctly deployed
and which mistakes are commonly made. We contextualize
our empirical findings and explore the correlation between
complexity, benefit, and risk of each technology. Additionally,
we examine the proliferation of different TLS versions by
drawing on a massive data set of global connection-level TLS
information collected since 2012.
We strive to support open science and release our active
scan dataset to the community. Along with parsed results,
we make packet-level data captures available, allowing for
precise reproduction and new uses. We also feed software
changes back to the community, and publish newly created
tools under a permissive open-source license. Data and code
can be found at https://mediatum.ub.tum.de/1377982.
The remainder of this paper is organized as follows. Sec-
tion 2 covers the technical background. Section 3 details
the related work. Section 4 describes our methodology. Sec-
tions 5, 6, 7, and 8 present our results for CT, HSTS and
HPKP, SCSV, and the DNS-based extensions CAA and
DANE-TLSA, respectively. Section 9 shows the evolution
of TLS version use over the last five years. We discuss our
findings and relate them to risk, cost, and benefit of the new
technologies in Section 10, and summarize them in Section 11.
2 BACKGROUND
This section describes the TLS, HTTP, and DNS based
HTTPS security extensions we investigate. For a general
web PKI introduction, we refer the reader to [18, 39].
CT: Certificate Transparency (CT) [44] aims to make un-
noticed attacks on the PKI near-impossible through public
disclosure of certificate issuance. Users or CAs submit certifi-
cate chains for inclusion in one or more semi-trusted public
logs, run by independent parties. Each log stores entries in an
append-only Merkle Hash Tree. Observers can detect tamper-
ing or holes in the dataset by requesting consistency proofs
from the log. A goal of CT is for browsers to display lower
security indicators if certificates are not logged; currently
Google Chrome is the only browser performing this step.
Upon submission of a certificate chain, a log server returns
a signed promise of inclusion called the Signed Certificate
Timestamp (SCT). The SCT can be verified using the log’s
public key. TLS servers deliver SCTs to the browser, either
embedded in the certificate as an X.509 extension, via a TLS
extension, or in an Online Certificate Status Protocol (OCSP)
response delivered as a TLS extension (OCSP stapling).
To embed SCTs in a certificate, the CA submits a signed
precertificate to the CT logs. This precertificate is a promise
that a CA is going to issue this exact certificate after receiv-
ing the SCT. The precertificate contains a poison extension
that prevents browsers from validating it; it cannot be used
in place of a real certificate. The log server signs the precer-
tificate and returns SCTs for it. These are embedded into an
X.509 extension of the final certificate. Browsers verify the
embedded SCTs by reconstructing the precertificate.
At the time of writing, Google Chrome is the only popu-
lar browser that verifies SCTs. It supports all transmission
methods, and requires valid SCTs for Extended Validation
(EV) certificates, removing the EV trust indicator otherwise.
HTTP-based extensions: HTTP Strict Transport Security
(HSTS) [36] and HTTP Public Key Pinning (HPKP) [25] are
HTTP extensions that aim to increase the security of the
HTTPS ecosystem by setting HTTP header values. HSTS
instructs the client to only access a domain via HTTPS.
HPKP enables the server to pin specific public keys to a
domain to mitigate man-in-the-middle attacks. Browsers must
abort a connection if none of the pins match the certificate
chain used by the domain. Both HSTS and HPKP directives
are shipped with web browsers in so-called preloading lists.
SCSV Downgrade Prevention: RFC 7507 [50] defines a Sig-
naling Cipher Suite Value (SCSV) that is used to prevent
downgrade attacks in which an attacker prevents connections
with strong TLS versions in order to exploit weaknesses in
older TLS versions. Clients commonly fall back to older TLS
versions if a connection attempt with a newer TLS version
is unsuccessful. In this fallback case, the client appends the
SCSV pseudo-cipher value to its list of supported ciphers.
When receiving this SCSV, the server must abort the connec-
tion if it supports a higher protocol version. One motivation
for SCSV was the infamous POODLE attack [49].
DNS-based Extensions: Both Certification Authority Autho-
rization (CAA) [33] and TLS Authentication (TLSA) [37] are
DNS record types introduced to aid certificate issuance and
verification, respectively. CAA indicates which CAs may
issue certificates for a domain. It also supports reporting
in cases where a CA is requested to issue a certificate for
a domain, but may not do so because of the CAA record.
CAA was accepted by the CA/Browser forum as a mandatory
step during certificate issuance [12] and became effective on
September 8, 2017.
In contrast to all other methods, the CAA record is only
required to be correct at the time a CA issues a certifi-
cate. Browsers must not match it against current certificates.
TLSA, which mandates DNSSEC, allows domain owners to
specify which certificate or public key is meant to be deployed
for a specific domain and port.
3 RELATED WORK
Our research stands in the line of a large body of work on
the TLS and HTTPS ecosystem. Past studies have analyzed
different segments of the ecosystem and highlighted its many
shortcomings, for example, focusing on the PKI [3, 7, 24, 39],
Mission Accomplished? HTTPS Security after DigiNotar
IMC ’17, November 1–3, 2017, London, United Kingdom
communication protocols [23, 38], certificate revocation [79–
81], cryptographic properties and weaknesses [2, 35, 40], and
implementation problems [10]. For a thorough explanation
and review of the web PKI and its weaknesses, we refer
to [18, 39].
Most closely related to our work, VanderSloot et al. [71]
examine the HTTPS ecosystem from several perspectives,
including active scans, passive monitoring and Certificate
Transparency logs. While they examine CT, they only fo-
cus on some of the differences observed in CT and other
scan methods. They do not examine the properties of CT
extensively, as we do in this work.
Several papers examine ways to enhance or optimize Certifi-
cate Transparency. Chuat et al. [15] explore ways to exchange
CT information via gossiping to defend against logs lying to
small groups of users. Ryan [62] extends CT to certificate
revocation and addresses end-to-end encrypted email.
Gustafsson et al. [32] present a study that analyzes the
content of CT logs. The authors focus on data directly ob-
tained from the logs and show differences between smaller
CA-owned logs and Google’s large logs filled from Internet
scans. They track how many of the domain names obtained
from monitoring their campus network match certificates in
logs. In contrast, this study is more extensive: it includes
data from active and passive observations and provides an
in-detail analysis of both SCTs and certificates.
Clark and van Oorshot [18] theoretically studied the effects
of HTTP extension headers in 2012. Kranch and Bonneau [42]
study the deployment of HSTS and HPKP based on both
the preload and the Alexa Top 1M lists. De los Santos et
al. [21] analyze the implementation of HSTS and HPKP for
several dozen domains using Shodan. Given the novelty of
both standards, we find the uptake of HSTS and HPKP to
have significantly changed since these early studies.
Although there is a large body of DNSSEC measurement
work [46, 53], interest in TLSA and CAA has been limited.
An early study in 2014 shows very low deployment of TLSA
records, reporting less than 1000 records in the .com and .net
zones [82]. Our study shows that no explosive growth has
taken place since then. Szalachowski and Perrig [68] count
deployment of CAA and TLSA among the Alexa Top 100k
domains which we compare against in Section 8.
4 METHODOLOGY
Our work combines active scans and passive measurements
from several sites. We collect the following data. For CT, we
extract Signed Certificate Timestamps (SCTs) from X.509
certificates as well as TLS and OCSP extensions. A modified
version of Google’s log monitor software [29, 31] is used to
retrieve certificates from logs accepted by the Google Chrome
browser (as of May 2017) [30].
For HSTS/HPKP, we parse and analyze the HTTP re-
sponses our scanner collects. For SCSV, we lower the TLS
version and set the Signaling Cipher Suite Value for Down-
grade Protection. This should cause clients to reject the con-
nection (see Section 2). We collect CAA and TLSA resource
records from DNS. Details are provided in each section.
We devise a novel way to unify the processing of data from
active scans and passive network monitoring to analyze CT
properties. We dump the raw network traffic of the active
scan into a pcap trace. This trace is then fed into our passive
measurement pipeline. By using the same analysis code paths
for active and passive data, we achieve full comparability.
This also enables us to share the raw data from active scans.
In contrast to earlier work, which shares processed data from
active scans, this packet-level information allows better re-
producibility and exposes information about exact packet
timing and timeout behavior.
4.1 Active Scans
We conduct active scans from the University of Sydney (IPv4),
and the Technical University of Munich (IPv4 & IPv6). As
discussed in Section 1, our scan is based on domain names
as opposed to IP addresses. This captures SNI-based servers
(cf. [16, 71]) and avoids accidentally connected devices.
We note that TLS scans based on domain names have
been carried out before, often using the Alexa Top 1 million
list of popular domains. In 2016, VanderSloot et al. [71] used
.com, .net, and .org domains to scan 153M domains. We
extend this approach by adding domains from .biz, .info,
.mobi, .sk, and .xxx from PremiumDrops [56]; .de and .au
from ViewDNS [74]; from the Alexa [4] and Umbrella [17]
Top 1M, all Alexa Country Top 50 [5], plus domains from
748 zones from ICANN’s Centralized Zone Data Service [41].
This yields a total of 193M domain names, about 58% of the
330.6M registered domains in March 2017 [72].
We resolve domains from both Munich (TUM) and Syd-
ney (USyd) using a modified version of massdns [11] and
an unmodified version of unbound [43]. From Munich, we
find 154M IPv4-enabled and 9.7M IPv6-enabled domains,
with a 9.5M intersection. From Sydney, we considered only
A records, as the university network does not support IPv6.
650k (0.4%) less domains could be resolved. This is within
expectations: Rijswijk-Deij et al. [70] show that daily devia-
tions of around 0.6% are expected for large-scale DNS scans.
IP addresses learned from our DNS scans are port-scanned
using a custom [83] IPv6 capable version of ZMap [24]. The
IPv6 response rate is in line with previous work [27]. We
perform TLS handshakes using Goscanner [26], a custom
highly-parallelized scanning tool. Goscanner connects to each
IP address, sending the domain name in the SNI extension,
one name per connection.
If we can establish a TLS connection, we send an HTTP
HEAD request to obtain HSTS and HPKP headers. In about
50% of cases, we receive an HTTP 200 (‘OK’) response code.
In the remaining cases, we receive mainly redirect codes, error
codes, or no HTTP response at all. For cases where the TLS
handshake succeeds, we immediately connect a second time,
offering a lower protocol version while sending the SCSV