.\"  -*- nroff -*-
.\"
.\" Author: Tatu Ylonen 
.\" Copyright (c) 1995 Tatu Ylonen , Espoo, Finland
.\"                    All rights reserved
.\"
.\" As far as I am concerned, the code I have written for this software
.\" can be used freely for any purpose.  Any derived versions of this
.\" software must be clearly marked as such, and if the derived work is
.\" incompatible with the protocol description in the RFC file, it must be
.\" called by a name other than "ssh" or "Secure Shell".
.\"
.\" Copyright (c) 1999,2000 Markus Friedl.  All rights reserved.
.\" Copyright (c) 1999 Aaron Campbell.  All rights reserved.
.\" Copyright (c) 1999 Theo de Raadt.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" $OpenBSD: ssh.1,v 1.168 2003/03/28 10:11:43 jmc Exp $
.Dd September 25, 1999
.Dt SSH 1
.Os
.Sh NAME
.Nm ssh
.Nd OpenSSH SSH 客户端 (远程登录程序)
.Sh "总览 (SYNOPSIS)"
.Nm ssh
.Op Fl l Ar login_name
.Ar hostname | user@hostname
.Op Ar command
.Pp
.Nm ssh
.Bk -words
.Op Fl afgknqstvxACNTX1246
.Op Fl b Ar bind_address
.Op Fl c Ar cipher_spec
.Op Fl e Ar escape_char
.Op Fl i Ar identity_file
.Op Fl l Ar login_name
.Op Fl m Ar mac_spec
.Op Fl o Ar option
.Op Fl p Ar port
.Op Fl F Ar configfile
.Oo Fl L Xo
.Sm off
.Ar port :
.Ar host :
.Ar hostport
.Sm on
.Xc
.Oc
.Ek
.Bk -words
.Oo Fl R Xo
.Sm off
.Ar port :
.Ar host :
.Ar hostport
.Sm on
.Xc
.Oc
.Op Fl D Ar port
.Ar hostname | user@hostname
.Op Ar command
.Ek
.Sh "描述 (DESCRIPTION)"
.Nm
(SSH 客户端) 用于登录远程主机, 并且在远程主机上执行命令.
它的目的是替换 rlogin 和 rsh, 同时在不安全的网络之上, 两个互不
信任的主机之间, 提供加密的, 安全的通信连接.
X11 连接和任意 TCP/IP 端口均可以通过此安全通道转发(forward).
.Pp
当用户通过
.Nm
连接并登录主机
.Ar hostname
后, 根据所用的协议版本, 用户必须通过下述方法之一向远程主机证明他/她的身份:
.Pp
.Ss "SSH 协议第一版"
.Pp
第一, 如果发出登录命令的本地主机已经列在远程主机的
.Pa /etc/hosts.equiv
或
.Pa /etc/ssh/shosts.equiv
文件中, 并且两端的用户名相同, 则立即允许该用户登录.
第二, 如果远程主机的用户根目录 (home 目录) 下存在
.Pa \&.rhosts
或
.Pa \&.shosts ,
并且其中有一行包含了客户机的名字和客户机上的用户名, 则允许该用户登录.
一般来说, 服务器不允许单独使用这种认证方式, 因为它不安全.
.Pp
第二种认证方法是
.Pa rhosts
或
.Pa hosts.equiv
文件结合基于 RSA 的主机认证. 这意味着如果
.Pa $HOME/.rhosts ,
.Pa $HOME/.shosts ,
.Pa /etc/hosts.equiv ,
或
.Pa /etc/ssh/shosts.equiv
允许登录, 并且如果服务器能够验证客户的主机密钥(host key)
(参见
.Sx "文件(FILE)"
节的
.Pa /etc/ssh/ssh_known_hosts
和
.Pa $HOME/.ssh/known_hosts
), 主机才允许客户登录.
这个认证方法关闭了因 IP 欺骗, DNS 欺骗和路由欺骗造成的安全漏洞.
[系统管理员注意: 一般说来
.Pa /etc/hosts.equiv ,
.Pa $HOME/.rhosts ,
和 rlogin/rsh 协议的本质是不可靠地, 要安全就应该关掉它们.]
.Pp
作为第三种认证方式, 
.Nm
支持基于 RSA 的认证. 
这种方案依托于公开密钥算法: 密码系统的加密和解密通过不同的密钥完成, 无法
通过加密密钥推导出解密密钥. RSA 就是这种密码系统.
每个用户创建一对公开/私密钥匙用于认证.
服务器知道用户的公钥, 只有用户知道他自己的私钥.
.Pa $HOME/.ssh/authorized_keys
文件列出允许登录的(用户的)公钥. 当用户开始登录,
.Nm
程序告诉服务器它准备使用哪对钥匙(公钥)做认证.
服务器检查这只密钥(公钥)是否获得许可, 如果许可, 服务器向用户
(实际上是用户面前运行的
.Nm
程序) 发出测试, 用用户的公钥加密一个随机数. 这个随机数只能用正确的私钥解密.
随后用户的客户程序用私钥解出测试数字, 即可证明他/她掌握私钥, 
而又无需(把私钥)暴露给服务器.
.Pp
.Nm
能够自动执行 RSA 认证协议. 用户通过运行
.Xr ssh-keygen 1
创建他/她的 RSA 密钥对. 私钥存放在用户根目录下的
.Pa $HOME/.ssh/identity
中, 而公钥存放在
.Pa $HOME/.ssh/identity.pub
中. 随后, 用户应该把
.Pa identity.pub
复制到远程服务器中, 作为
.Pa $HOME/.ssh/authorized_keys
存放到他/她的用户根目录下 (
.Pa authorized_keys
对应传统的
.Pa $HOME/.rhosts
文件, 每一行只有一只密钥, 尽管一行可以很长).
用户无须密码就可以直接登录. RSA 认证远比 rhosts 认证安全.
.Pp
RAS 认证最便捷的用法大概就是使用认证代理(authentication agent) 了. 详见
.Xr ssh-agent 1
手册页.
.Pp
如果这些认证方式都失败了,
.Nm
就提示用户输入口令(password), 然后把口令送到服务器做验证. 由于整个通信过程是
加密的, 因此别人不可能通过侦听网络获得这个口令.
.Pp
.Ss "SSH 协议第二版"
.Pp
当用户以协议第二版连接时, 类似的认证方法一样有效. 如果使用了
.Cm PreferredAuthentications
的默认内容, 客户端首先试着用基于主机的认证方法进行连接; 如果这个方法失败了
就用公开密钥方法作认证; 最后, 如果它也失败了, 就进入键盘操作, 试试
用户口令认证.
.Pp
这个公开密钥方法类似于上一节描述的 RAS 认证, 并且允许使用 RAS 或 DSA 算法:
客户端用他的私钥 (
.Pa $HOME/.ssh/id_dsa
或
.Pa $HOME/.ssh/id_rsa 
) 对会话标识符(session identifier)签名, 然后把结果送到服务器. 
服务器检查
.Pa $HOME/.ssh/authorized_keys
中是否有匹配的公钥, 如果密钥和签名都正确, 访问就可以继续进行.
会话标识符来自共享的 Diffie-Hellman 值, 只有客户端和服务器端才知道这个值.
.Pp
如果公钥认证失败或无效, 用户口令将会加密后送到远端主机来证明用户的身份.
.Pp
另外,
.Nm
支持基于主机或测试应答的认证方式.
.Pp
协议第二版提供附加机制增强保密性
(数据流用 3DES, Blowfish, CAST128 或 Arcfour 加密) 和完整性
(hmac-md5, hmac-sha1).
注意, 协议第一版缺少强有力的机制确保连接的完整性.
.Pp
.Ss 登录会话和远程执行
.Pp
服务器接受用户身份后, 服务器即可以执行给定的命令, 也可以让用户登录并给他
一个正常的 shell. 所有和远端命令或 shell 的通信被自动加密.
.Pp
如果分配了伪终端(pseudo-terminal)(普通的登录会话), 用户可以使用后面将
提到的 escape 字符.
.Pp
如果没有分配伪终端, 则会话是透明的(transparent), 能够可靠的传送二进制数据.
大多数系统上, 即使分配了终端, 把 escape 字符设为
.Dq none
也可以让会话透明.
.Pp
当远程主机上的命令或 shell 退出时, 会话即结束, 并关闭所有 X11 和 TCP/IP 连接.
远端程序的返回码做为
.Nm
的返回码返回.
.Pp
.Ss Escape 字符
.Pp
如果启用了伪终端, 
.Nm
能够通过 escape 字符支持一组功能.
.Pp
单独的波浪符可以用
.Ic ~~
送出去, 只要后面不跟下面列举的字符, 也可以把它直接送出去.
escape 字符必须接在换行(newline)后面, 这样才具有特别含义.
在配置文件中可以用
.Cm EscapeChar
命令更改 escape 字符, 在命令行上可以用
.Fl e
选项更改.
.Pp
已支持的 escape 命令 (假设是默认的
.Ql ~ )
有:
.Bl -tag -width Ds
.It Cm ~.
断开连接
.It Cm ~^Z
把 ssh 送到后台
.It Cm ~#
列出转发的连接 (forwarded connection)
.It Cm ~&
当等待转发的连接/X11会话结束时, ssh 在后台退出登录
.It Cm ~?
显示 escape 字符的列表
.It Cm ~C
打开命令行 (仅用于
.Fl L
和
.Fl R
选项增加端口转发)