title:Labeled PSI from Homomorphic Encryption with Reduced Computation
and Communication
author:Kelong Cong and
Radames Cruz Moreno and
Mariana Botelho da Gama and
Wei Dai and
Ilia Iliashenko and
Kim Laine and
Michael Rosenberg
Labeled PSI from Homomorphic Encryption with Reduced
Computation and Communication
Kelong Cong
imec-COSIC, KU Leuven
Leuven, Belgium
PI:EMAIL
Radames Cruz Moreno
Microsoft Research
Redmond, WA, USA
PI:EMAIL
PI:EMAIL
Mariana Botelho da Gama
imec-COSIC, KU Leuven
Leuven, Belgium
Wei Dai
Microsoft Research
Redmond, WA, USA
PI:EMAIL
Ilia Iliashenko
imec-COSIC, KU Leuven
Leuven, Belgium
PI:EMAIL
Michael Rosenberg
University of Maryland
College Park, MD, USA
PI:EMAIL
Kim Laine
Microsoft Research
Redmond, WA, USA
PI:EMAIL
ABSTRACT
It is known that fully homomorphic encryption (FHE) can be used
to build efficient (labeled) Private Set Intersection protocols in the
unbalanced setting, where one of the sets is much larger than the
other (Chen et al. (CCS’17, CCS’18)). In this paper we demonstrate
multiple algorithmic improvements upon these works. In partic-
ular, our protocol has an asymptotically better computation cost,
requiring only O(√︁|𝑋|) homomorphic multiplications, and com-
munication complexity sublinear in the larger set size |𝑋|.
We demonstrate that our protocol is significantly better than
that of Chen et al. (CCS’18) for many practical parameters, espe-
cially in terms of online communication cost. For example, when
intersecting 228 and 2048 item sets, our protocol reduces the online
computation time by more than 71% and communication by more
than 63%. When intersecting 224 and 4096 item sets, our protocol
reduces the online computation time by 27% and communication
by 63%. Our comparison to other state-of-the-art unbalanced PSI
protocols shows that our protocol has the best total communica-
tion complexity when |𝑋| ≥ 224. For labeled PSI our protocol also
outperforms Chen et al. (CCS’18). When intersecting 220 and 256
item sets, with the larger set having associated 288-byte labels, our
protocol reduces the online computation time by more than 67%
and communication by 34%.
Finally, we demonstrate a modification that results in nearly
constant communication cost in the larger set size |𝑋|, but imprac-
tically high computation complexity on today’s CPUs. For example,
to intersect a 210-item set with sets of size 222, 224, or 226, our
proof-of-concept implementation requires only 0.76 MB of online
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19,2021, Virtual Event, Republic of Korea
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484760
communication, which is more than a 24-fold improvement over
Chen et al. (CCS’18).
CCS CONCEPTS
• Security and privacy → Public key encryption.
KEYWORDS
private set intersection; fully homomorphic encryption; malicious
security
ACM Reference Format:
Kelong Cong, Radames Cruz Moreno, Mariana Botelho da Gama, Wei
Dai, Ilia Iliashenko, Kim Laine, and Michael Rosenberg. 2021. Labeled
PSI from Homomorphic Encryption with Reduced Computation and Com-
munication. In Proceedings of the 2021 ACM SIGSAC Conference on Com-
puter andCommunications Security (CCS ’21), November 15–19, 2021, Vir-
tual Event, Republicof Korea. ACM, New York, NY, USA, 16 pages. https:
//doi.org/10.1145/3460120.3484760
1 INTRODUCTION
Consider two parties, each with a private dataset of items. They
want to learn the intersection of their respective sets without leak-
ing any other information to each other. For example, two countries
want to trace criminal suspects by finding matching identities in
their police databases, while hiding other sensitive data from each
other, or two banks want to identify clients with obscure financial
transactions, without revealing any other data about their clients.
To solve the above problems, the two parties can engage in a Pri-
vate Set Intersection (PSI) protocol. PSI refers to an interactive cryp-
tographic protocol that takes two private sets as input, finds their
intersection, and outputs it to one or both of the participants. If one
party obtains the results of a PSI protocol (one-way PSI), we call this
party the receiver and the other party the sender. General two-way
PSI can be realized via two rounds of one-way PSI, where partic-
ipants swap the roles of the receiver and the sender. In practice,
one-way PSI stands on its own as an important primitive in various
privacy-preserving protocols, including private contact discovery
in mobile messengers (e.g., Signal or WhatsApp) [28, 42], checking
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1135for the presence of leaked password in a breach database [2, 37], and
contact tracing for containing the spread of infectious diseases [60].
In this work, we focus on a variant of one-way PSI where the
receiver’s set is much smaller than the sender’s. We also assume
that the receiver has limited resources for computation and storage
(e.g., a mobile phone or a wearable device), while the sender is
equipped with much more powerful machinery (e.g., a server in
a datacenter). This specific setting is referred to as unbalanced.
The goal in the unbalanced setting is thus to delegate as much
computation as possible to the sender and reduce communication
between the parties.
Let 𝑋 and 𝑌 denote the sender’s and the receiver’s sets, respec-
tively; in unbalanced PSI, we have |𝑌| ≪ |𝑋|. State-of-the-art proto-
cols for unbalanced PSI have eitherO(|𝑋|) communication cost [36]
or ˜O(|𝑋|) computation complexity [13]. We will focus on the latter
line of work, which allows to achieve a quasilogarithmic commu-
nication complexity. Our work uses leveled Fully Homomorphic
Encryption (FHE), i.e., randomized encryption that allows computa-
tion on arithmetic circuits of any fixed multiplicative depth in the
encrypted domain, without decryption. Leveled FHE schemes such
as BGV [7] and BFV [22] induce quasipolynomial overhead both in
communication and computation complexity with respect to the
multiplicative depth.
Following the outline of [13], we also consider labeled PSI, a
special type of PSI with computation. In this scenario, every element
in the sender’s set has associated data — a label — and the receiver
hopes to learn the labels of the elements in the intersection. This is a
generalization of the single-server Private Information Retrieval (PIR)
by keywords problem introduced by Chor et al. [16]. The practical
applications of labeled PSI include targeted price discrimination [45]
and key retrieval in mobile messengers [28, 42], where a user queries
the public key of people from her contact list.
1.1 Related work
Early PSI protocols from the 1980s [33, 43] were based on Diffie-
Hellman (DH) key-exchange [18]. In essence, Alice and Bob perform
a DH key-exchange for every element in their set; a match is found
if the resulting shared secrets match. Freedman et al. [24] intro-
duced a protocol based on oblivious polynomial evaluation and
homomorphic encryption. Ateniese et al. [4] introduced a construc-
tion based on RSA accumulator. Since PSI can be thought of as
a special case of secure two-party computation, it is possible to
use standard techniques such as garbled circuits to construct a PSI
protocol [32, 49, 51]. More recently many protocols [12, 19, 40, 46,
48, 52, 55] have been based on OT extension [34] and Oblivious
Pseudo-Random Functions (OPRF).
The aforementioned work are primarily designed for the bal-
anced setting, where the sender set is roughly the same as the re-
ceiver set. Below we zoom in on two of the most efficient paradigms
in the literature in the unbalanced setting, which is the focus of
this work.
1.1.1 Unbalanced PSI Based on OPRF. A PSI protocol based on
OPRF was first proposed in [23], where the OPRF was build from
the Naor-Reingold (NR) pseudorandom function [44]. With the
help of garbled circuits (GC) [61], later work introduced a PSI pro-
tocol from AES-based OPRF [50]. The current state-of-the-art pro-
tocol materialized in the work of Kales et al. [36], which is derived
from [39] and [54]. The protocol has two phases, the preprocessing
phase and the online phase. The authors introduced many opti-
mizations to push as much computation and communication cost to
the preprocessing phase as possible. Below we give an overview of
the protocol idea from this line of work. During the preprocessing
phase, the sender with a large set 𝑆 generates a PRF key 𝑘 and
computes PRF𝑘(𝑠) for every 𝑠 ∈ 𝑆. Then it inserts every PRF output
into a cuckoo filter [21] and sends it to the receiver. To compute the
intersection in the online phase, the receiver computes the OPRF
with the help of the sender. That is, the receiver obtains PRF𝑘(𝑟)
for every value 𝑟 in its set 𝑅 without the knowledge of 𝑘. Finally, the
receiver locally checks whether any of its items are in the cuckoo
filter.
The online phase is very efficient, and does not depend on the set
size of the sender. For a receiver with 210 items, the communication
overhead is only a little higher than 2 megabytes [36]. The com-
putation is also efficient since there are no expensive public-key
operations when using the GC version of the protocol.1 The biggest
bottleneck in this class of protocols is the bandwidth consumption
and storage requirement during the preprocessing phase. Namely,
the cuckoo filter that the sender must distribute to every receiver
is linear in the size of the sender’s set. When the sender set has 228
items, the cuckoo filter size is more than one gigabyte [36].
1.1.2 Unbalanced Protocols Based on FHE. On the other side of the
spectrum, Chen et al. [14] introduced an unbalanced PSI protocol
based on leveled FHE that has a communication overhead linear in
the (smaller) receiver’s set and logarithmic in the (larger) sender’s
set. Their work was later refined in [13], which strengthened the
security model using OPRF, allowed arbitrary-length items, and
extended the protocol to the labeled PSI setting with arbitrary-
length labels.
In both works [13, 14], the BFV scheme [22] is used, which has
˜O(𝐷2) memory and ˜O(𝐷3) running time overhead with 𝐷 being
the multiplicative depth of computation. The communication cost
of the PSI protocol is O(log |𝑋|) ciphertexts and its computation
complexity is O(|𝑋|) homomorphic multiplications with multi-
plicative depth 𝐷 ∈ O(log log |𝑋|). As a result, the dependency on
the sender’s set size is quantified as follows: the communication
complexity is ˜O(𝐶) with 𝐶 = log |𝑋|, whereas the computation
complexity is ˜O(|𝑋|).
we defer the detailed explanation to Section 3.
The working principal is the starting point of this work. Thus
1.2 Contributions
We introduce several optimizations and improvements to the pro-
tocols of Chen et al. [13, 14] that result in improved running time
and improved communication complexity in the sender’s set size.
Our contributions can be summarized as follows:
1Evaluating the GC-based OPRF requires OT, but it is possible to do this in the prepro-
cessing phase using random OT extension.
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1136• We show how to remove the slow extension field arithmetic
used in [13], while still supporting arbitrary-length items
and labels.
• We reduce the communication cost by using extremal postage
stamp bases [11] instead of the less efficient windowing tech-
nique of [13, 14].
• We show how to evaluate the intersection circuit in O(√︁|𝑋|)
ciphertext-ciphertext multiplications using the Paterson-
Stockmeyer algorithm [47], which is a quadratic improve-
ment over [13].
• We use the techniques of [56] to achieve a very fast hash-
to-curve implementation for the FourQ curve [17]. Hash-to-
curve is needed for an OMGDH-based OPRF protocol [13,
35, 54], which is a critical component of our protocol.2
• We improve the communication overhead by exploiting
depth-free homomorphic Frobenius automorphisms. This
operation allows to compute 𝑥𝑡, where 𝑡 is the plaintext
modulus of the FHE scheme, without ciphertext-ciphertext
multiplications. As a result, to compute the intersection cir-
cuit with depth O(log log |𝑋|) the sender needs only 𝑂(1)
ciphertexts. This reduces the communication complexity to
˜O(𝐶2) with 𝐶 = log log |𝑋| from ˜O(2𝐶𝐶2) given in prior
work [13, 14].
• We created an open-source reference implementation of our
protocol.
2 PRELIMINARIES
2.1 Notation
Throughout this paper we denote the set of integers {𝑖, 𝑖 + 1, ..., 𝑗}
by [𝑖, 𝑗], and [ 𝑗] is shorthand for the case 𝑖 = 1. The logarithm in
base 𝑏 is denoted by log𝑏 𝑥. For the binary logarithm of 𝑥, we omit
the base and write log 𝑥. Vectors are denoted by lowercase Latin
letters with the arrow, i.e., (cid:174)𝑎. For a given vector (cid:174)𝑎 = (𝑎1, . . . , 𝑎𝑑), its
1-norm is defined as |(cid:174)𝑎|1 =𝑑
𝑖=1 |𝑎𝑖|.
2.2 Unbalanced private set intersection
There are two parties — the receiver and the sender — having a set
𝑌 and a set 𝑋, respectively. We assume that |𝑋| ≫ |𝑌| and the set
sizes are public. Each set contains a pair of strings (𝑎𝑖, 𝐿𝑖) where 𝑎𝑖
is an element ID and 𝐿𝑖 is its label. The length 𝜎 of IDs and length
ℓ of labels are shared among all elements of 𝑋 ∪ 𝑌.
A (one-way) private set intersection (PSI) protocol is an in-
teractive protocol that outputs {𝑎𝑖
: ∀𝑎𝑖 ∈ 𝑋 ∩ 𝑌} to the re-
ceiver and nothing to the sender without leaking any other in-
formation about 𝑋 and 𝑌. In the labeled PSI, the protocol returns
{(𝑎𝑖, 𝐿𝑖) : ∀𝑎𝑖 ∈ 𝑋 ∩ 𝑌} to the receiver.
2.3 Fully homomorphic encryption
Fully homomorphic encryption (FHE) is a family of encryption
schemes that allow arbitrary operations to be performed on en-
crypted data without decryption. Most existing FHE schemes [6–
9, 15, 20, 22, 25, 27] are based on the LWE [53] or RLWE [41]
problems, which imply the presence of noise in encrypted messages.
2OPRF was used optionally by [13] to significantly strengthen the security model.
The noise associated with a ciphertext grows with each homomor-
phic operation (additively with additions and multiplicatively with
multiplications). Thus, in order to avoid decryption error, one must
take care to ensure that the noise does not become large enough to
interfere with the underlying plaintext. Such noise management is
realized with two frameworks.
The first framework consists of a somewhat homomorphic en-
cryption (SHE) scheme that is capable of homomorphically comput-
ing its own decryption circuit, or perform a so-called bootstrapping
operation that reduces the noise size. For such FHE schemes, encryp-
tion parameters can be fixed such that any circuit is computable
given the bootstrapping information. However, the bootstrapping
operation is much slower in comparison to other homomorphic
operations; thus, it is usually avoided in practice.
The idea of the second framework is to choose large enough
encryption parameters for computing a predetermined family of
circuits. In this case, bootstrapping is never used, but encryption
parameters grow with the depth of circuits. The SHE schemes whose
encryption parameters increase polynomially with the circuit depth
are called leveled FHE schemes. For shallow enough circuits, leveled
FHE schemes are more efficient in practice.
In this work, we use two leveled FHE schemes, BGV [7] and
BFV [22], implemented in the HElib [31] and SEAL [57] libraries, re-
spectively. Both schemes are defined over a ring 𝑅 = Z[𝑋]/⟨Φ𝑚(𝑋)⟩
where Φ𝑚(𝑋) is the cyclotomic polynomial of order 𝑚 and degree
𝑞 = (𝑅/⟨𝑞⟩)2 where 𝑞 is a positive
𝑛. Their ciphertext space is 𝑅2
integer. The size of each ciphertext is 2𝑛 log 𝑞.
The plaintext space of these schemes is defined analogously as 𝑅𝑡
for some positive integer 𝑡 ≪ 𝑞. The size of each plaintext is 𝑛 log 𝑡.
We assume that 𝑡 is a prime number. Let 𝑑 be the multiplicative
order of 𝑡 modulo 𝑚. In this case, Φ𝑚(𝑋) splits into 𝑘 factors of
degree 𝑑 modulo 𝑡. Hence, the Chinese remainder theorem yields the
isomorphism 𝑅𝑡 (cid:27) F𝑘
𝑡𝑑 . Each copy of F𝑡𝑑 is called a slot. Using this
isomorphism, one can encode and encrypt multiple data values from
F𝑡𝑑 into a single ciphertext, and have the homomorphic additions
and multiplications over 𝑅2
𝑞 correspond to slot-wise additions and
multiplications over the encoded values. Such encoding is called
the SIMD packing [59]. Abusing notation, we denote a ciphertext
encrypting a value 𝑎 ∈ F𝑡𝑑 in one of its slots by(cid:74)𝑎(cid:75).
The noise size is defined by the standard deviation of the noise
distribution, 𝜎𝑒, which is typically set to 3.19.
The parameters 𝑛, 𝑞 and 𝜎𝑒 define the security level of our schemes,
where 𝜎𝑒 denotes the standard deviation of the noise distribution,
and is ordinarily set to 3.19. The security level is estimated using
the LWE estimator [1].
Homomorphic operations and their cost. The basic homo-
morphic operations we use are addition and multiplication, which
can be performed on two ciphertexts or on a pair consisting of a
ciphertext and a plaintext. We will also use a Frobenius operation
which, given an encrypted message(cid:74)𝑦(cid:75) and a positive integer 𝑖,
returns(cid:74)𝑦𝑡𝑖(cid:75) (see [26] for more details).
The cost of every homomorphic operation is defined by its run-
ning time and the amount of noise added to its output. For the
cost analysis, we assume that both ciphertexts and plaintexts are
represented in the Double-CRT form [26] and ciphertext noise is
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1137√
𝑛).
measured by its infinity norm. We also assume that the hybrid
key-switching method is used (see [38] for more details).
Homomorphic addition is the last costly operation, taking only
O(𝑛 log 𝑞) integer additions. The output noise is the sum of the
input noises up to some small factor about O(𝑡).
Plaintext-ciphertext multiplications, which we call scalar mul-
tiplications, amount to O(log 𝑞) coefficient-wise multiplications
of 𝑛-dimensional vectors. Hence, this operation takes O(𝑛 log 𝑞)
integer multiplications. Scalar multiplication scales the input noise
by a factor of O(𝑡
Ciphertext-ciphertext non-scalar multiplication has two steps:
vector convolution and key-switching. The first step performs
O(𝑛 log 𝑛) integer multiplications and the second one performs
O(𝑛 log 𝑛 log 𝑞 + 𝑛(log 𝑞)2) integer multiplications. Thus, the run-
ning time of non-scalar multiplication is O(𝑛 log 𝑛 log 𝑞+𝑛(log 𝑞)2)
integer multiplications (see [38]). If the input ciphertexts have
noises of size 𝑉1 and 𝑉2, then the noise of their product is equal to
O(𝑛 · 𝑡 · max(𝑉1, 𝑉2)).
The Frobenius operation first permutes the Double-CRT form
of a ciphertext and then performs key-switching. The permutation
does not require integer multiplications. Hence, the Frobenius oper-
ation is faster than non-scalar multiplication and its running time
is dominated by key-switching; it takes O(𝑛 log 𝑛 log 𝑞 + 𝑛(log 𝑞)2)
integer multiplications. The noise introduced by the Frobenius op-
erations is also dominated by the one introduced by key-switching
(see, e.g., [29]), which adds a value about O(√