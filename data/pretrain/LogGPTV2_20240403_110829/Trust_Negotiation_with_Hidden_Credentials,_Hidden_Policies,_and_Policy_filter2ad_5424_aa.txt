# Trust Negotiation with Hidden Credentials, Hidden Policies, and Policy Cycles

**Authors:**
- Keith B. Frikken
- Jiangtao Li
- Mikhail J. Atallah

**Affiliation:**
Department of Computer Science, Purdue University, West Lafayette, Indiana

**Contact:**
{kbf, jtli, mja}@cs.purdue.edu

## Abstract

This paper presents a significant advancement in privacy-preserving trust negotiations. In open environments like the Internet, collaboration decisions (e.g., granting access to a resource) are often based on the characteristics of the requester rather than their identity, using digital credentials. Access is granted if Alice's credentials satisfy Bob's access policy. The literature highlights the importance of protecting both credentials and access control policies, and numerous protocols have been developed to achieve this. In many of these schemes, the server does not learn whether the client obtained access, which prevents "probing" attacks by the server. This paper introduces a protocol for negotiating trust between Alice and Bob without revealing either credentials or policies, even when each credential has its own associated access policy. Our protocol ensures that sensitive credentials are protected, even in the presence of deeply nested dependencies and policy cycles. This work is supported by grants from the National Science Foundation, the Office of Naval Research, and other sponsors.

## 1. Introduction

In the past, access decisions were based on the identity of the entity requesting a resource. However, in open systems like the Internet, this approach is ineffective when the resource owner and the requester belong to different security domains controlled by different authorities. An alternative is to use digital credentials to satisfy access control policies. Digital credentials are digitally signed assertions about the credential owner by a credential issuer, containing attributes such as citizenship, security clearance, employment, group membership, and credit status.

A typical scenario involves Alice sending a request to Bob, who responds with the policy governing access to the resource. If Alice's credentials satisfy Bob's policy, she sends the appropriate credentials to Bob. After verifying them, Bob grants Alice access. In this scenario, Alice learns Bob's policy, and Bob learns Alice's credentials. While straightforward, this approach is unacceptable if the credentials or policies are sensitive.

Protecting credentials and policies is crucial for several reasons:
- **Personal Privacy:** Revealing credentials can violate personal privacy.
- **System Integrity:** Hiding policies prevents users from gaming the system, especially for economically-motivated policies.
- **Commercial Secrets:** Policies may be commercial secrets, and revealing them could compromise business strategies.
- **Security and Liability:** Protecting credentials reduces the risk of insider threats and lowers liability insurance rates.

Recent work has focused on attribute-based access control while protecting credentials and policies. One assumption is that the resource owner does not learn whether the requester obtained access. However, this property may not hold in practice due to audit and accounting requirements or inferences from linked transactions. This can lead to the Sensitive Credential Leakage Problem (SCALP), where the server can probe the client for sensitive credentials.

Traditional trust negotiation has studied sensitive credential protection, but existing schemes do not handle policies for credentials. This paper combines hidden credentials with policies for sensitive credentials, ensuring that neither party learns information about the other's usable credentials.

## 2. Our Contributions

We introduce a protocol for privacy-preserving trust negotiation where both the client and server input a set of credentials and an access control policy for each. The protocol determines the set of usable credentials and processes the resource or service request based on the client's usable credentials. A credential is usable if its access control policy is satisfied by the other party. Our protocol addresses the following challenges:
1. **Sensitive Policies:** Policies for sensitive credentials are also sensitive and cannot be revealed.
2. **Client and Server Privacy:** Neither the client nor the server should learn information about the other's usable credentials to prevent probing attacks.

Our technical contributions include:
1. **New Protocol:** We develop a new privacy-preserving trust negotiation protocol and novel cryptographic protocols to implement it.
2. **Reverse Eager Strategy (RE):** We propose a reverse eager strategy that handles arbitrary policy cycles, unlike traditional strategies.

## 3. Trust Negotiation: Review and Discussion

### 3.1. Traditional Trust Negotiation

In traditional trust negotiation, the disclosure of a credential \( s \) is controlled by an access control policy \( p_s \) specifying prerequisite conditions. These conditions are typically a set of credentials \( C \subseteq C \), where \( C \) is the set of all credentials. Policies are modeled using propositional formulas, and a policy \( p_s \) takes the form \( s \leftarrow \phi_s(c_1, \ldots, c_k) \), where \( \phi_s \) is a normal formula consisting of literals, Boolean operators, and parentheses.

Given a set of credentials \( C' \subseteq C \) and a policy function \( \phi_s \), we denote \( \phi_s(C') \) as the value of the normal formula \( \phi_s(x_1, \ldots, x_k) \) where \( x_i = 1 \) if and only if \( c_i \in C' \). Policy \( p_s \) is satisfied by a set of credentials \( C' \subseteq C \) if and only if \( \phi_s(C') = 1 \).

### 3.2. New Definition: Cycle-Tolerant Trust Negotiation

We propose a new definition of trust negotiation that supports policy cycles:

**Definition 2 (Cycle-Tolerant Trust Negotiation):** Let \( C_S \) and \( P_S \) (resp. \( C_C \) and \( P_C \)) be the sets of credentials and policies possessed by the server (resp. client). The negotiation is initiated by a request for \( s \in C_S \) from the client. The negotiation succeeds if there exist usable credential sets \( U_S \subseteq C_S \) and \( U_C \subseteq C_C \) for the server and client, respectively, such that:
1. \( s \in U_S \)
2. \( \forall c \in U_S, \phi_c(U_C) = 1 \)
3. \( \forall c \in U_C, \phi_c(U_S) = 1 \)

Otherwise, the negotiation fails.

This definition allows for multiple possible solution pairs and does not enforce minimality, which is acceptable in our framework since nothing is revealed at the end of the negotiation.

## 4. Formal Approach to Trust Negotiation

We formally introduce our approach to trust negotiation, considering the complexities introduced by sensitive policies and the need to protect both parties' usable credentials.

## 5. Cryptographic Tools

We review the cryptographic tools used in our protocol, including zero-knowledge proofs and secure multi-party computation techniques.

## 6. Privacy-Preserving Trust Negotiation Protocol

We present our protocol for privacy-preserving trust negotiation, detailing the steps and cryptographic methods used to ensure that neither party learns more than necessary.

## 7. Efficiency Improvements

We discuss efficiency improvements for our base scheme, optimizing the protocol for practical use.

## 8. Security Proof

We provide a sketch of the proof of security for our protocol, demonstrating its robustness against various attacks.

## 9. Related Work

We review related work in the field of trust negotiation and compare our approach with existing solutions.

## 10. Conclusion

We conclude by summarizing our contributions and discussing future directions for research in privacy-preserving trust negotiation.