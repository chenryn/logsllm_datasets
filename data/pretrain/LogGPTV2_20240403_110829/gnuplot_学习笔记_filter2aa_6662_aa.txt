# gnuplot 学习笔记
> 官网 : http://www.gnuplot.info/
---
## 安装
**windows**
- 下载地址：https://sourceforge.net/projects/gnuplot/
    - 下载完，双击，一路下一步安装即可，安装完后在开始菜单栏里最近添加里可以看到刚刚安装的 gnuplot
---
## 常量、操作符和函数
### 数字
gnuplot 表示数字可分成整数、实数及复数三类：
- 整数：gnuplot 与 C 语言相同，采用 4 byte 储存整数。故能表示 -2147483647 至 +2147483647 之间的整数。
- 实数：能表示约 6 或 7 位的有效位数，指数部份为不大于 308 的数字。
- 复数：以 {,} 表示复数。其中为复数的实数部分，为虚数部分，此两部分均以实数型态表示。 如 3 + 2i 即以 {3,2} 表示。
gnuplot 储存数字的原则为，若能以整数方式储存则以整数储存数字，不然以实数方式储存，其次以复数方式储存。例如在 gnuplot 执行
```
print 1/3*3
print 1./3*3
```
分别得到 0 和 1.0 的结果。这是因前者使用整数计算，而后者采用实数计算的结果。
执行
```
print 1234.567
print 12345 + 0.56789
print 1.23e300 * 2e6
print 1.23e300 * 2e8
```
分别得到 1234.57、12345.6、2.46e+304 和 undefined value 的结果。这些例子是受到实数的有效位数和所能表现最大数字的限制。这是我们要注意的。
---
### 操作符
gnuplot 的操作符与 C 语言基本相同。 所有的操作均可做用在整数、实数或复数上。
| Symbol | Example | Explanation |
| - | - | - |
| `-` | `-a` | unary minus |
| `~` | `~a` | one's complement |
| `!` | `!a` | logical negation |
| `!` | `a!` | factorial |
| Symbol | Example | Explanation |
| - | - | - |
| `**` | `a**b` | exponentiation |
| `*`  | `a*b`  | multiplication |
| `/`  | `a/b`  | division |
| `%`  | `a%b`  | modulo |
| `+`  | `a+b`  | addition |
| `-`  | `a-b`  | subtraction |
| `==` | `a==b` | equality |
| `!=` | `a!=b` | inequality |
| `&`  | `a&b`   | bitwise AND |
| `^`  | `a^b`   | bitwise exclusive OR |
| `|`  | `a|b`   | bitwise inclusive OR |
| `&&` | `a&&b`  | logical AND |
| `||` | `a||b`  | logical OR |
| `?:` | `a?b:c` | ternary operation |
### 函数
在 gnuplot 中函数的参数可以是整数，实数或是复数。下表是 gnuplot 所提供的函数。
| Function | Auguments | Returns |
| - | - | - |
| abs(x)        | any               | absolute value of x, |x|; same type |
| abs(x)        | complex           | length of x, sqrt( real(x)^2 + imag(x)^2 ) |
| acos(x)       | any               | 1/cos(x) (inverse cosine) in radians |
| Acosh(x)      | any               | cosh−1 x (inverse hyperbolic cosine) in radians |
| arg(x)        | complex           | the phase of x in radians |
| asin(x)       | any               | 1/sin(x) (inverse sin) in radians |
| asinh(x)      | any               | sinh−1 x (inverse hyperbolic sin) in radians |
| atan(x)       | any               | 1/tan(x) (inverse tangent) in radians |
| atan2(y,x)    | int or real       | tan−1(y/x) (inverse tangent) |
| atanh(x)      | any               | tanh−1 x (inverse hyperbolic tangent) in radians |
| besj0(x)      | int or real       | J0 Bessel function of x |
| besj1(x)      | int or real       | J1 Bessel function of x |
| besy0(x)      | int or real       | Y0 Bessel function of x |
| besy1(x)      | int or real       | Y1 Bessel function of x |
| ceil(x)       | any               | smallest integer not less than x (real part) |
| cos(x)        | radians           | cos x, cosine of x |
| cosh(x)       | radians           | cosh x, hyperbolic cosine of x |
| erf(x)        | any               | Erf(real(x)), error function of real(x) |
| erfc(x)       | any               | Erfc(real(x)), 1.0 - error function of real(x) |
| exp(x)        | any               | exponential function of x |
| floor(x)      | any               | largest integer not greater than x (real part) |
| gamma(x)      | any               | Gamma(real(x)),  gamma function of real(x) |
| ibeta(p,q,x)  | any               | Ibeta(real(p,q,x)), ibeta function of real(p,q,x) |
| inverf(x)     | any               | inverse error function of real(x) |
| igamma(a,x)   | any               | Igamma(real(a,x)), igamma function of real(a,x) |
| imag(x)       | complex           | imaginary part of x as a real number |
| invnorm(x)    | any               | inverse normal distribution function of real(x) |
| int(x)        | real              | integer part of x, truncated toward zero |
| lambertw(x)   | real              | Lambert W function |
| lgamma(x)     | any               | Lgamma(real(x)),  lgamma function of real(x) |
| log(x)        | any               | ln(x), natural logarithm (base e) of x |
| log10(x)      | any               | log(x),  logarithm (base 10) of x |
| norm(x)       | any               | normal distribution (Gaussian) function of real(x) |
| rand(x)       | any               | normal distribution (Gaussian) function of real(x) |
| real(x)       | any               | Rand(real(x)),  pseudo random number generator |
| sgn(x)        | any               | real part of x |
| sin(x)        | any               | 1 if x>0, -1 if x (  {, {, ...}}) = 
```
而用户定义常数的语法如下：
```
 = 
```
例如:
```
# 常数 w 为 2。
w = 2
# 常数 q 为小于但最接近 tan(pi/2 - 0.1) 的整数。
q = floor(tan(pi/2 - 0.1))
# 函数 f(x) 为 sin(w*x)，其中 w 为常数。
f(x) = sin(w*x)
# 函数 sinc(x) 为 sin(pi*x)/(pi*x)。
sinc(x) = sin(pi*x)/(pi*x)
# 函数 delta(t) 为脉冲函数。
delta(t) = (t == 0)
# 函数 ramp(t) 当其小于零为零，当其大于零为斜率等于 1 的直线。
ramp(t) = (t > 0) ? t : 0
# 函数 min(a,b) 取两者中较小的数。
min(a,b) = (a  gnuplot 已定义的常数仅有 pi (pi = 3.14159)
---
## 简单使用
gnuplot 绘制数学函数或数值资料的步骤大体如：
- 定义常数及函数：定义常数及函数，使程式模组化及易于了解。
- 设定绘图环境：gnuplot 绘图之前已预先设定许多绘图参数。
- 绘图：在定义数学函数或设定绘图环境之后，接着就是绘出数学函数或数值资料的图形。gnuplot 提供操作方便的绘图指令——plot (2D) 或 splot (3D)。
- 产生输出结果：在终端上绘出结果后，可经由一些步骤而产生不同输出装置所需的输出。
依照上述过程，可快速地画出图形。剩下的步骤就是细心的调整绘图环境参数或修改函数方程式、常数等，即可得到满意的结果。
**以曲线绘出三角函数 sin(x)**
```
plot sin(x)
```
**从 -pi 到 +pi 的 sin(x) 和 cos(x)**
```
set xrange [-pi:pi]
replot cos(x) with points pointtype 2
或
plot [-pi:pi] sin(x), cos(x) with points pointtype 2
```
> replot 命令，它执行先前的 plot 命令。当你绘制曲线图且需要不断对该图进行修改以添加想要的特征时，此命令会非常有用。另外，replot 使你可以添加更多的图。尝试输入 replot cos(x)。依照语法，该命令等同于 plot sin(x), cos(x)。replot 就是获取先前的绘图字符串，添加必要的逗号，然后附加输入给它的其余部分。
**将数据文件中的数据画出**
```
plot sin(x), '1.txt'
```
其中 1.txt 为一数据文件，每一行描述一点坐标位置。 内容如下，其中 # 后面的内容为注释：
```
# $Id: 1.dat,v 1.1.1.1 1998/04/15 19:16:40 lhecking Exp $
-20.000000 -3.041676
-19.000000 -3.036427
-18.000000 -3.030596
-17.000000 -3.024081
-16.000000 -3.016755
-15.000000 -3.008456
……
```
> 注: 输入 `pwd` 查看当前路径,在当前路径下放入 1.txt
**命名图和坐标轴**
```
set title 'My first graph'
set xlabel 'Angle, in degrees'
set ylabel 'sin(angle)'
plot sin(x)
```
**改变轴上 tic 并设置网格**
```
set title "My first graph"
set xrange [-pi:pi]  # we want only one cycle
set xtics ('0' 0, '90' pi/2, '-90' -pi/2, '45' pi/4,'-45' -pi/4,'135' 3*pi/4,'-135' -3*pi/4)
set grid
set xlabel 'Angle, in degrees'
set ylabel 'sin(angle)'
plot sin(x)
```
**多条曲线**
```
plot sin(x) with linespoints pointtype 5, cos(x) w boxes lt 4
```
> with 子句使你可以详细而精确地指定线的样式。在本例中，我们说明两种有用的样式。第一种样式 linespoints 通常在对数据绘图时非常有用，它在涉及的每个示例或数据点处标记一个点，并使用线性插值法连接连续的点。这里我们另外指定点类型为 5，它选择终端允许的第五种点。第二种样式 boxes 更适合绘制直方图数据。注意我们如何在 cos(x) 曲线中将 with 缩写成 w。类似地，lt 是 linetype 的缩写，是另一个特定于终端的设置，它选择终端可以绘制的四种线。不必说，你可以使用 pt 代替冗长的 pointtype。如果想在多条线中使用相同的绘图样式（在一个 plot 命令中或在多个 plot 命令中），可以使用 set 命令设置绘图样式：set style function linespoints。要更改用于绘制与函数相对的数据集合的样式，使用 set style data linespoints。
> 当绘制两条或多条曲线时，我们需要关键字或图例来对它们进行区分。默认情况下，关键字在右上角；但是如果它妨碍了图，可以将关键字放到其他位置 。如果愿意，甚至可以放到图外。
**定制图的关键字或图例**
```
set key top left
set key box
plot [-pi:pi] sin(x) title 'sinusoid' with linespoints pointtype 5, cos(x) t 'cosine' w boxes lt 4
```
> 上面，我们在同一图中绘制了正弦和余弦曲线。gnuplot 使你还可以绘制多个图，这样它们可以并排显示在同一输出屏幕或文件中。在某些排版系统中，以一个文件的形式包含两个图形比分别包含两个图形要更容易。
**Multiplot 示例**
```
set xrange [-pi:pi]
# gnuplot recommends setting the size and origin before going to multiplot mode
# This sets up bounding boxes and may be required on some terminals
set size 1,1
set origin 0,0
# Done interactively, this takes gnuplot into multiplot mode
set multiplot
# plot the first graph so that it takes a quarter of the screen
set size 0.5,0.5
set origin 0,0.5
plot sin(x)
# plot the second graph so that it takes a quarter of the screen
set size 0.5,0.5
set origin 0,0
plot 1/sin(x)
# plot the third graph so that it takes a quarter of the screen
set size 0.5,0.5
set origin 0.5,0.5
plot cos(x)
# plot the fourth graph so that it takes a quarter of the screen
set size 0.5,0.5
set origin 0.5,0
plot 1/cos(x)
# On some terminals, nothing gets plotted until this command is issued
unset multiplot
# remove all customization
reset