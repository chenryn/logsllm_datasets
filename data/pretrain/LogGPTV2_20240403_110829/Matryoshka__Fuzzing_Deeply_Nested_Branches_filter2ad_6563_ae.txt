are commonly seen in parser logic, where a conditional statement
checks the internal state of the parser, while the current state de-
pends on the order of the branches reached.
6.2 Unsolved constraints
6.2.1 Unsatisfiable constraints. Some constraints are unsatisfiable.
Figure 7 shows an example in readpng. The program calls png_check
_chunk_name before calling png_format_buffer. png_check_chunk
_name checks if the character is alphanumerical on Line 7. If not,
it exits with an error. But later png_format_buffer checks the
character again on on Line 20, so the false branch of this line is
unsatisfiable.
6.2.2 Taint lost in propagation. Section 3.4 uses the results from
byte-level taint tracking to determine the taint flow dependency be-
tween nested conditional statements. Similar to Angora, Matryoshka
also extended DFSan [27] to implement byte-level taint tracking,
but neither of the two is able to track taint flows through external
6.3 Other limitations of Matryoshka
6.3.1 Design limitations. Matryoshka’s branch counting method
is derived from AFL’s, a coarse grained method that can only pro-
vide limited information about the program’s internal state. This is
to maintain compatibility with AFL and AFL-like fuzzers for syn-
chronization, but leads to issues such as those mentioned in Sec-
tion 6.2.5.
Implementation limitations. The current implementation of
6.3.2
Matryoshka requires source code because we use compile-time in-
strumentation. We could overcome this limitation by instrument-
ing the executables. Matryoshka’s taint tracking uses byte-level
granularity as a balance between efficiency and accuracy, as bit-
level taint tracking would require significantly more memory and
computing power. Section 6.2 described other implementation lim-
itations.
7 RELATED WORK
7.1 Solving complicated constraints
Symbolic execution has the potential to solve complex constraints [8,
10] and is used in fuzzing [18, 19, 11, 26, 4, 34, 28, 37, 41]. One ex-
ample is Driller, which uses symbolic execution only when the co-
running AFL cannot progress due to complicated constrains [34].
Steelix [26] and REDQUEEN [4] detect magic bytes checking and
infer their input offsets to solve them without taint analysis. T-Fuzz
ignores input checks in the original program and leverages sym-
bolic execution to filter false positives and reproduce true bugs [28].
TaintScopre fixs checksum values in the generated inputs using
symbolic execution [37]. In T-Fuzz and TaintScope, input checks
and checksum checks are complex constraints. However, symbolic
execution faces the challenges of path explosion and scalability [9,
33]. QSYM uses fast concolic execution to overcome the scalabil-
ity problem, but similar to Angora, it solves only the constraint of
the target conditional statement without considering any nesting
relationships between other conditional statements [41]. By con-
trast, Matryoshka finds all those nesting conditional statements
and searches for an input that satisfies all of them.
7.2 Using control flow to guide fuzzing
Run-time control flow can contain information useful for guiding
fuzzing [30, 28, 37, 13, 25, 6, 12, 40, 16]. VUzzer uses control flow
information to prioritize inputs that may explore deep code blocks
but that do not lead to error handling codes [30]. Angora prioritizes
fuzzing on unexplored branches [13]. AFLGo and Hawkeye mea-
sure the distance between the seed input and the target location in
the control flow graph, and minimizes the distance in fuzzing [6,
12]. T-Fuzz [28] and TaintScope [37] use control flow features to
find sanity checks and checksum checks, respectively. After that,
they remove these checks to cover more code.
FairFuzz identifies the “rare branches” exercised by few inputs
using control flow information and schedules the fuzzer to gener-
ate inputs targeting the “rare branches” [25]. If a path constraint
does not exhibit taint flow dependencies on the “rare branches”,
FairFuzz can solve them efficiently similar to QSYM and Angora.
Otherwise, the input bytes flowing into the path constraint will
not be included in the mutation mask, e.g. nested conditional state-
ments, and FairFuzz will experience difficulties while solving it.
Post dominator trees [1] were used to determine control flow
dependencies [15]. Xin et al.[38] proposed a method to capture
both intraprocedural and interprocedural control dependencies ef-
ficiently based on post-dominator trees. The method inserts code at
the point before each conditional statement(branching) and the
head of its immediate post dominator block(merging). Similarly,
Matryoshka proposes an equivalent approach without the injec-
tions at the merging, which is more efficient in our case of finding
all the prior conditional statements.
SYMFUZZ [11] uses control dependencies to infer input bit de-
pendencies and use it to find an optimal mutation ratio for fuzzing.
Under this method, nested conditional statements will introduce
more complex input bit dependencies. SYMFUZZ utilizes this in-
formation to reduce mutation ratio for fuzzing, which is incapable
of solving nested conditional statements efficiently.
7.3 Using taint tracking to guide fuzzing
Taint tracking can locate which input bytes flow into the security-
sensitive code that may trigger bugs [17, 5, 21]. VUzzer [30] is
an application-aware fuzzer that uses taint analysis to locate the
position of “magic bytes” in input files and assigns these “magic
bytes” to fixed positions in the input. VUzzer can find “magic bytes”
only when they appear continuously in the input. TIFF [22] is an
improvement over VUzzer, using in-memory data structure iden-
tification techniques and taint analysis to infer input types. An-
gora [13] tracks the flow of input bytes into conditional statements
and mutates only those bytes. Matryoshka uses the same technique
to identify relevant bytes in the input. Taintscope [37] uses taint
tracking to infer checksum-handling code and bypasses these chec-
ks using control flow alteration since these checks are hard to sat-
isfy when mutating the input. T-Fuzz [28] detects complex checks
without taint tracking. Both approaches use symbolic execution to
generate valid input that would solve target constraints. Checksum-
handling code is an classic example of nesting conditional state-
ments: the code that uses the value is nested under the conditional
statement that verifies the checksum. Matryoshka is able to handle
such code naturally.
DTA++ allows dynamic taint analysis to avoid under-tainting
when implicit flows occur in data transformations[23]. It locates
culprit implicit flows that cause the under-tainting through binary
search and generates rules to add additional taint for those con-
trol dependencies only. However, the method may result in over-
tainting. Matryoshka proposes an efficient approach that can avoid
over-tainting when determining taint flow dependencies among
conditional statements.
7.4 Using machine learning to guide fuzzing
Both Angora and Matryoshka view solving constraints as a search
problem and take advantage of commonly used search algorithms
in machine learning. Skyfire [36] learns a probabilistic context-
sensitive grammar (PCSG) from existing samples and leverages the
learned grammar to generate seed inputs. Learn & Fuzz [20] first at-
tempts to use a neural network to automatically generate an input
grammar from sample inputs. Instead of learning a grammar, Rajal
et al. use neural networks to learn a function to predict the promis-
ing input bytes in a seed file to perform mutations [29]. Konstantin
et al. formalizes fuzzing as a reinforcement learning problem using
the concept of Markov decision processes and constructs an algo-
rithm based on deep Q-learning that chooses high reward actions
given an input seed [7]. NEUZZ [32] uses a surrogate neural net-
work to smoothly approximate a target program’s branch behav-
ior and then generates new input by gradient-guided techniques
to uncover new branches.
7.5 Fuzzing without valid seed inputs
SLF [39] fuzzes programs without requiring valid inputs. It groups
input bytes into fields where a field consists of consecutive bytes
that affect the same set of checks. Then, it correlates checks whose
predicates are affected by the same field. Finally, it uses a gradient-
based method to mutate the fields to satisfy all the correlated checks.
At a high level, SLF’s approach is comparable to Matryoshka s strat-
egy of prioritizing satisfiability (Section 3.5.2). The differences be-
tween Matryoshka and SLF are as follows. First, Matryoshka uses
dynamic taint tracking to determine the bytes that flow into a pred-
icate, while SLF uses probing. During probing, the SLF must flip
each input byte individually, so if the input has n bytes, then the
program must run n times. In contrast, dynamic taint tracking runs
the program only once. Second, SLF determines the correlation
between two checks based on their common input fields. How-
ever, this ignores their control flow flow dependency and may find
unnecessary correlations. In contrast, Section 3.3 describes how
Matryoshka determines the prior checks that the current check
depends on by control flow. Third, SLF classifies some common
checks into several categories and applies category-specific strate-
gies effectively. For example, SLF can test offset/count of certain
fields. By contrast, Matryoshka needs no prior knowledge of the
types of checks and handles all checks uniformly. Finally, besides
the strategy of prioritizing satisfiability, which is comparable to
SLF’s strategy, Matryoshka also provides the strategies of priori-
tizing reachability and of joint optimization. Table 8 shows that
these three strategies are complementary: together they can solve
many more constraints than any single one of them can.
8 CONCLUSION
Deeply nested branches present a great challenge to coverage-based
fuzzers. We designed and implemented Matryoshka, a tool for fuzzing
deeply nested conditional statements. We proposed algorithms for
identifying nesting conditional statements that the target branch
depends on by control flow and taint flow, and proposed three
strategies for mutating the input to solve path constraints. Our
evaluation shows that Matryoshka solved more constraints and in-
creased line and branch coverage significantly. Matryoshka found
41 unique new bugs in 13 open source programs and obtained 12
CVEs.
9 ACKNOWLEDGMENT
We thank Dongyu Meng for helpful discussions.
This material is based upon work supported by the National Sci-
ence Foundation under Grant No. 1801751.
This research was partially sponsored by the Combat Capabili-
ties Development Command Army Research Laboratory and was
accomplished under Cooperative Agreement Number W911NF-13-
2-0045 (ARL Cyber Security CRA). The views and conclusions con-
tained in this document are those of the authors and should not be
interpreted as representing the official policies, either expressed or
implied, of the Combat Capabilities Development Command Army
Research Laboratory or the U.S. Government. The U.S. Govern-
ment is authorized to reproduce and distribute reprints for Gov-
ernment purposes not withstanding any copyright notation here
on.
REFERENCES
[1]
Frances E Allen. Control flow analysis. In ACM Sigplan No-
tices, volume 5 of number 7, pages 1–19, 1970.
[5]
[2] American fuzzy lop. url: http://lcamtuf.coredump.cx/afl/.
[3] Angora. url: https://github.com/AngoraFuzzer/Angora.
[4] Cornelius Aschermann, Sergej Schumilo, Tim Blazytko,
Robert Gawlik, and Thorsten Holz. Redqueen: fuzzing with
input-to-state correspondence. In Symposium on Network
and Distributed System Security (NDSS), 2019.
Sofia Bekrar, Chaouki Bekrar, Roland Groz,
and
Laurent Mounier. A taint based approach for smart fuzzing.
In IEEE International Conference on Software Testing,
Verification and Validation (ICST), 2012.
[6] Marcel Böhme, Van-Thuan Pham, Manh-Dung Nguyen, and
Abhik Roychoudhury. Directed greybox fuzzing. In ACM
Conference on Computer and Communications Security, 2017.
[7] Konstantin Böttinger, Patrice Godefroid, and Rishabh Singh.
Deep reinforcement fuzzing. arXiv:1801.04589, 2018.
[10]
[11]
[8] Cristian Cadar, Daniel Dunbar, and Dawson R Engler. KLEE:
unassisted and automatic generation of high-coverage tests
for complex systems programs. In OSDI, 2008.
[9] Cristian Cadar and Koushik Sen. Symbolic execution for
software testing: three decades later. Communications of
the ACM, 56(2):82–90, 2013.
Sang Kil Cha, Thanassis Avgerinos, Alexandre Rebert, and
David Brumley. Unleashing mayhem on binary code. In
IEEE Symposium on Security and Privacy, 2012.
Sang Kil Cha, Maverick Woo, and David Brumley. Program-
adaptive mutational fuzzing. In IEEE Symposium on Security
and Privacy (SP), 2015.
[13]
[12] Hongxu Chen, Yinxing Xue, Yuekang Li, Bihuan Chen, Xi-
aofei Xie, Xiuheng Wu, and Yang Liu. Hawkeye: towards
a desired directed grey-box fuzzer. In ACM Conference on
Computer and Communications Security, 2018.
Peng Chen and Hao Chen. Angora: efficient fuzzing by prin-
cipled search. In IEEE Symposium on Security and Privacy
(SP), San Francisco, CA, May 21–23, 2018.
[14] Brendan Dolan-Gavitt, Patrick Hulin, Engin Kirda,
Tim Leek, Andrea Mambretti, Wil Robertson, Frederick
Ulrich, and Ryan Whelan. LAVA: large-scale automated
vulnerability addition. In IEEE Symposium on Security and
Privacy (SP), 2016.
Jeanne Ferrante, Karl J Ottenstein, and Joe D Warren. The
program dependence graph and its use in optimization.
[15]
[36]
[34] Nick
[33] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick
Stephens, Mario Polino, Andrew Dutcher, John Grosen, Siji
Feng, Christophe Hauser, and Christopher Kruegel. SOK:
(state of) the art of war: offensive techniques in binary anal-
ysis. In IEEE Symposium on Security and Privacy (SP), 2016.
Salls,
Andrew Dutcher, Ruoyu Wang,
Jacopo Corbetta, Yan
Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna.
Driller: augmenting fuzzing through selective symbolic
execution.
In Network and Distributed System Security
Symposium, 2016.
John Grosen, Christopher
Stephens,
[35] Technical ”whitepaper” for afl-fuzz. url: http : / / lcamtuf .
coredump.cx/afl/technical_details.txt.
Junjie Wang, Bihuan Chen, Lei Wei, and Yang Liu. Skyfire:
data-driven seed generation for fuzzing. In IEEE Symposium
on Security and Privacy (SP), 2017.
[37] Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou. Taintscope:
a checksum-aware directed fuzzing tool for automatic soft-
ware vulnerability detection. In IEEE symposium on Security
and privacy (SP), 2010.
[38] Bin Xin and Xiangyu Zhang. Efficient online detection of
dynamic control dependence. In International symposium on
Software testing and analysis, 2007.
[39] Wei You, Xuwei Liu, Shiqing Ma, David Perry, Xiangyu
Zhang, and Bin Liang. SLF: fuzzing without valid seed
inputs. In International Conference on Software Engineering
(ICSE), Montreal, Quebec, Canada, 2019.
[40] Wei You, Xueqiang Wang, Shiqing Ma, Jianjun Huang, Xi-
angyu Zhang, XiaoFeng Wang, and Bin Liang. ProFuzzer:
on-the-fly input type probing for better zero-day vulnera-
bility discovery. In IEEE Symposium on Security and Privacy
(SP), 2019.
Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo
Kim. QSYM : a practical concolic execution engine tailored
for hybrid fuzzing. In USENIX Security Symposium, Balti-
more, MD, 2018.
Lei Zhao, Yue Duan, Heng Yin, and Jifeng Xuan. Send hard-
est problems my way: probabilistic path prioritization for
hybrid fuzzing. In Network and Distributed System Security
Symposium (NDSS), 2019.
[41]
[42]
[16]
ACM Transactions on Programming Languages and Systems
(TOPLAS), 9(3):319–349, 1987.
Shuitao Gan, Chao Zhang, Xiaojun Qin, Xuwen Tu, Kang
Li, Zhongyu Pei, and Zuoning Chen. CollAFL: path sensi-
tive fuzzing. In IEEE Symposium on Security and Privacy (SP),
2018.
[20]
[21]
[19]
[18]
[17] Vijay Ganesh, Tim Leek, and Martin Rinard. Taint-based di-
rected whitebox fuzzing. In International Conference on Soft-
ware Engineering, 2009.
Patrice Godefroid, Nils Klarlund, and Koushik Sen. DART:
directed automated random testing. In ACM SIGPLAN No-
tices, volume 40 of number 6, 2005.
Patrice Godefroid, Michael Y Levin, and David A Molnar.
Automated whitebox fuzz testing. In NDSS, 2008.
Patrice Godefroid, Hila Peleg, and Rishabh Singh. Learn &
fuzz: machine learning for input fuzzing. In IEEE/ACM In-
ternational Conference on Automated Software Engineering,
2017.
Istvan Haller, Asia Slowinska, Matthias Neugschwandtner,
and Herbert Bos. Dowsing for overflows: a guided fuzzer to
find buffer boundary violations. In USENIX security, 2013.
[22] Vivek Jain, Sanjay Rawat, Cristiano Giuffrida, and Herbert
Bos. TIFF: using input type inference to improve fuzzing.
In 34th Annual Computer Security Applications Conference,
2018.
[23] Min Gyung Kang, Stephen McCamant, Pongsin Poosankam,
and Dawn Song. DTA++: dynamic taint analysis with tar-
geted control-flow propagation. In Network and Distributed
System Security Symposium (NDSS), 2011.
[24] Chris Lattner and Vikram Adve. LLVM: a compilation
and
framework
transformation. In CGO, San Jose, CA, USA, March 2004.
program analysis
lifelong
[25] Caroline Lemieux and Koushik Sen. FairFuzz: targeting rare
branches to rapidly increase greybox fuzz testing coverage.
arXiv:1709.07101, 2017.
[26] Yuekang Li, Bihuan Chen, Mahinthan Chandramohan,
Shang-Wei Lin, Yang Liu, and Alwen Tiu. Steelix:
program-state based binary fuzzing. In Joint Meeting on
Foundations of Software Engineering, 2017.
LLVM dataflowsanitizer. url: https://clang.llvm.org/docs/
DataFlowSanitizer.html.
[28] Hui Peng, Yan Shoshitaishvili, and Mathias Payer. T-Fuzz:
fuzzing by program transformation. In IEEE Symposium on
Security and Privacy (SP), 2018.
[29] Mohit Rajpal, William Blum, and Rishabh Singh. Not
fuzzing.
all bytes are equal: neural byte sieve for
arXiv:1711.04596, 2017.
Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar,
Cristiano Giuffrida, and Herbert Bos. VUzzer: application-
aware evolutionary fuzzing. In NDSS, February 2017.
[31] Konstantin Serebryany, Derek Bruening, Alexander
Potapenko, and Dmitry Vyukov. AddressSanitizer: a fast
address sanity checker. In USENIX ATC, 2012.
[32] Dongdong She, Kexin Pei, Dave Epstein, Junfeng Yang,
Baishakhi Ray, and Suman Jana. NEUZZ: efficient fuzzing
with neural program learning, 2019.
[27]
[30]
for
APPENDIX
Table 10: IDs of bugs injected but unlisted by LAVA, because the LAVA authors were unable to trigger them when preparing
the data set. Matryoshka found these bugs.
Program IDs of bugs unlisted by LAVA-M but found by Matryoshka
uniq
base64
md5sum -
who
227
274, 521, 526, 527
2, 4, 6, 8, 12, 16, 20, 24, 55, 57, 59, 61, 63, 73, 77, 81, 85, 89, 117, 125, 165, 169, 173, 177, 181, 185, 189, 193,
197, 210, 214, 218, 222, 226, 294, 298, 303, 307, 312, 316, 321, 325, 327, 334, 336, 338, 346, 350, 355, 359, 450,
454, 459, 463, 468, 472, 477, 481, 483, 488, 492, 497, 501, 504, 506, 512, 514, 522, 526, 531, 535, 974, 975, 994,
995, 996, 1007, 1026, 1034, 1038, 1049, 1054, 1071, 1072, 1329, 1334, 1339, 1345, 1350, 1355, 1361, 1377, 1382,
1388, 1393, 1397, 1403, 1408, 1415, 1420, 1429, 1436, 1445, 1450, 1456, 1461, 1718, 1727, 1728, 1735, 1736,
1737, 1738, 1747, 1748, 1755, 1756, 1891, 1892, 1893, 1894, 1903, 1904, 1911, 1912, 1921, 1925, 1935, 1936,
1943, 1944, 1949, 1953, 1993, 1995, 1996, 2000, 2004, 2008, 2012, 2014, 2019, 2023, 2027, 2031, 2034, 2035,
2039, 2043, 2047, 2051, 2055, 2061, 2065, 2069, 2073, 2077, 2079, 2081, 2083, 2085, 2147, 2181, 2189, 2194,
2198, 2219, 2221, 2222, 2223, 2225, 2229, 2231, 2235, 2236, 2240, 2244, 2246, 2247, 2249, 2253, 2255, 2258,
2262, 2266, 2268, 2269, 2271, 2275, 2282, 2286, 2291, 2295, 2302, 2304, 2462, 2463, 2464, 2465, 2466, 2467,
2468, 2469, 2499, 2500, 2507, 2508, 2521, 2522, 2529, 2681, 2682, 2703, 2704, 2723, 2724, 2742, 2790, 2796,
2804, 2806, 2810, 2814, 2818, 2823, 2827, 2834, 2838, 2843, 2847, 2854, 2856, 2915, 2916, 2917, 2918, 2919,
2920, 2921, 2922, 2974, 2975, 2982, 2983, 2994, 2995, 3002, 3003, 3013, 3021, 3082, 3083, 3099, 3185, 3186,
3187, 3188, 3189, 3190, 3191, 3192, 3198, 3202, 3209, 3213, 3218, 3222, 3232, 3233, 3235, 3237, 3238, 3239,
3242, 3245, 3247, 3249, 3252, 3256, 3257, 3260, 3264, 3265, 3267, 3269, 3389, 3439, 3443, 3464, 3465, 3466,
3467, 3468, 3469, 3470, 3471, 3487, 3488, 3495, 3496, 3509, 3510, 3517, 3518, 3523, 3527, 3545, 3551, 3561,
3939, 4224, 4287, 4295