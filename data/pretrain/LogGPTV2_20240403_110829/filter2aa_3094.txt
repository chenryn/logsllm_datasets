1
P/Invoke和D/Invoke的区别
解释unmanaged code
P/Invoke
D/Invoke
D/Invoke的⼀些应⽤
Interoperating with unmanaged code
https://docs.microsoft.com/en-us/dotnet/framework/interop/
 p/Invoke是⼀项允许您从托管代码访问⾮托管库中的结构，回调和函数的技术。
⼤多数P/Invoke API包含在以下两个名称空间中：
System
System.Runtime.InteropServices
这两个名称空间为您提供了很多⼯具，帮助你⽅便快捷地本机组件进⾏通信。
解释unmanaged code
1 .NET Framework促进了与COM组件，COM+服务，外部类型库和许多操作系统服务的交互。 
托管和⾮托管对象模型之间的数据类型，⽅法签名和错误处理机制都不同。 
2 为了简化.NET Framework组件与⾮托管代码之间的互操作并简化迁移路径，公共语⾔运⾏
库对客户端和服务器隐藏了这些对象模型中的差异。
3
4 在运⾏时的控制下执⾏的代码称为托管代码。 
5 相反，在运⾏时之外运⾏的代码称为⾮托管代码。 
6 COM组件，ActiveX接⼝和Windows API函数是⾮托管代码的示例。
P/Invoke
 1 using System;
 2 using System.Runtime.InteropServices;
 3
 4 public class Program
2
第⼗⼀⾏9号P/Invoke⼯作的关键，它定义了⼀种托管⽅法，该⽅法具有与⾮托管⽅法完全相同的签名。
该声明有⼀个extern关键字，它告诉Runtime这是⼀个外部⽅法，并且在调⽤它时，让Runtime在
DllImportattribute中⾃动寻找对应⽅法调⽤。
在Mac上也可以⽤，但是调⽤的就是mac上的的库
 5 {
 6     // Import user32.dll (containing the function we need) and de
fine
 7     // the method corresponding to the native function.
 8     //加载⾮托管的DLL
 9     [DllImport("user32.dll", CharSet = CharSet.Unicode, SetLastEr
ror = true)]
10     
11     private static extern int MessageBox(IntPtr hWnd, string lpTe
xt, string lpCaption, uint uType);
12
13     public static void Main(string[] args)
14     {
15         // Invoke the function as a regular managed method.
16         MessageBox(IntPtr.Zero, "Command-line message box", "Atte
ntion!", 0);
17     }
18 }
 1 using System;
 2 using System.Runtime.InteropServices;
 3
 4 namespace PInvokeSamples
 5 {
 6     public static class Program
 7     {
 8         // Import the libSystem shared library and define the met
hod
 9         // corresponding to the native function.
10         [DllImport("libSystem.dylib")]
11         private static extern int getpid();
12
13         public static void Main(string[] args)
3
D/Invoke全称是Dynamic Invocation，出处应该是这⾥Emulating Covert Operations - Dynamic 
Invocation (Avoiding PInvoke & API Hooks)
作⽤就是避免被AV Hook、被怀疑进⾏恶意导⼊。
代码是在运⾏时加载DLL，使⽤指向在内存中位置对⽤的指针来调⽤该函数，⽽不是使⽤PInvoke直接静态
导⼊API调⽤。我们可以从内存中调⽤任意的⾮托管代码（同时可以传递参数），并以反射⽅式执⾏
payload。避免了导⼊地址表⾥⾯出现恶意函数！
详细介绍
https://thewover.github.io/Dynamic-Invoke/
原理
https://blog.xpnsec.com/weird-ways-to-execute-dotnet/
https://github.com/cobbr/SharpSploit 墙裂推荐
https://github.com/xpn/NautilusProject
https://github.com/med0x2e/NoAmci
https://offensivedefence.co.uk/posts/dinvoke-syscalls/
https://rastamouse.me/blog/process-injection-dinvoke/
14         {
15             // Invoke the function and get the process ID.
16             int pid = getpid();
17             Console.WriteLine(pid);
18         }
19     }
20 }
D/Invoke
D/Invoke的⼀些应⽤