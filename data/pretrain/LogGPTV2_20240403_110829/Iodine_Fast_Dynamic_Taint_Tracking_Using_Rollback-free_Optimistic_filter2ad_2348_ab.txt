rollback recovery is an acceptable solution for ofﬂine retro-
spective analyses such as debugging and forensic analyses.
However, a rollback to the beginning of the program is
intolerable for online security analyses on live executions, as
it would severely compromise availability of the system.
Bounding rollbacks is hard for arbitrary predicated whole-
program static analyses. Determining the latest point
in a
program execution up to which we need to rollback is an
unsolved problem. For many analyses, especially backward
data-ﬂow analysis, it may not be possible to bound the rollback
window. This unpredictable, and unbounded downtime caused
by rollback creates problems guaranteeing availability for live
executions.
Furthermore, support for rollback introduces signiﬁcant
additional overhead even for executions where the likely
invariants hold true. This overhead includes the cost of logging
for replay and periodic check-pointing. Therefore even when
the invariants are not violated, eliminating rollbacks altogether
would improve OHA by getting rid of these overheads. Plus,
there is a cost for rollback-replay in case of an invariant
violation. The last component is a minor cost as invariant
violations can be made to be rare with sufﬁcient proﬁling.
We address this problem by enabling forward recovery on
any invariant failure, and completely eliminating the need for
rollbacks.
C. Safe Elisions
Iodine uses a novel form of OHA called rollback-free
OHA, which eliminates the need for rollback on invariant
failure. Rollbacks are fundamentally caused by the dependence
between the current monitor being elided and potential future
invariant failures. Our idea is to distinguish safe elisions, which
do not have such dependencies, from unsafe elisions.
A predicated static analysis in OHA elides a monitor
as long as it can prove that it is unnecessary to guarantee
soundness of dynamic analysis in an execution where the
invariants hold. But an elided monitor is a safe elision only
if it can additionally prove that an invariant violation in an
execution would not affect the soundness of any preceding
elisions of that monitor.
Rollback-free OHA is realized by restricting its predicated
static analysis to only using safe elisions, and switching to a
conservatively optimized analysis on invariant violation.
D. Noop Monitor Elisions are Safe Elisions
Statically proving safe elisions is non-trivial for many
analyses. To make such an analysis practical and simple to
construct, we further observe that noop monitors are safe
elisions. A noop track monitor is one that does not change
the analysis metadata state. A noop check monitor is one
that always succeeds. For example, in Figure 1(c), monitors
for lines 5 and 6 are noop monitors, if we assume R is
unreachable. Monitor for line 2, however,
is not a noop
monitor, as its execution can modify the taint set even if
invariants hold true.
Eliding noop monitors is safe for the following reasons.
By construction, OHA instruments invariant checks such that
they detect any invariant violation before an execution violates
the invariant. For example, in Figure 1(c), OHA detects an
invariant violation before entering R. Given this, when a noop
monitor is elided before an invariant violation, it is guaranteed
that it would be a noop monitor even in the conservatively
optimized analysis, and therefore its elision is sound even when
there is a later invariant violation. Thus, noop monitor elisions
are safe elisions.
(cid:21)(cid:26)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:28 UTC from IEEE Xplore.  Restrictions apply. 
E. Elisions in Predicated Forward Analysis are Safe
In §II-B, we discussed forward and backward static taint
analysis. Forward static data-ﬂow taint analysis elides a mon-
itor for an instruction in an SSA intermediate representation
by proving that its source operands must not be tainted. The
taint for the destination operand of such an instruction remains
unchanged. Thus, all the monitors elided by predicated forward
taint analysis are noop monitors, and therefore safe elisions.
Figure 1(d) shows rollback-free OHA. Its predicated static
taint analysis is limited to forward taint analysis. Therefore,
it elides only the monitors for lines 5 and 6, which are both
noop safe elisions.
F. Elisions in Predicated Backward Analysis may not be Safe
Monitors elided by a predicated backward taint analysis are
not guaranteed to be safe elisions. A backward taint analysis
seeks to prove that an instruction’s destination taint does not
reach a sink, and if so it elides its monitor. Monitors elided
by this analysis are not guaranteed to be noops. For example,
the monitor for line 2 in Figure 1(d) is not a noop, because
it changes the taint of y . But a predicated backward analysis
can elide it by assuming R is unreachable. However, during an
execution, if that invariant fails, recovery must somehow pro-
duce the correct taint state of y , before proceeding forward.
Given that we use a whole-program analysis, it is unclear how
far the execution needs to be rolled-back and re-executed.
A more fundamental reason why elisions in backward-
analysis may not be safe is their dependence on invariants
holding true in the future. It may still be possible to construct
safe elisions through sophisticated optimizations. For example,
if we can somehow determine the set of all monitors elided
due to a particular invariant (R is unreachable), then hoisting
the invariant check before those elisions can make them safe
elisions. Such a transformation is non-trivial for a predicated
whole program analysis, and therefore we did not pursue this
avenue. Fortunately, we found the predicated forward taint
analysis to be quite effective by itself. Also, backward analysis
is not useful for certain information-ﬂow policies such as one
that monitors taints from sources to all possible locations in a
program.
G. Rollback-Free Optimistic Hybrid Taint Analysis
Iodine uses a predicated forward taint analysis along with
a conservative backward taint analysis. Optimized dynamic
analysis (fast-path) is executed until an invariant fails. As
the analysis only elides noop monitors, it tracks exactly the
same meta-data as a conservatively optimized analysis at all
program points. We instrument a conditional branch for every
invariant check, which switches the control to a conservatively
optimized analysis (slow-path) when any of those checks fail.
The execution then continues forward in the slow-path. Care
is taken to ensure a safe switch. At the time of the switch, the
return addresses on the stack would be pointing to fast-path
return sites. We address this problem by checking every return
site, and transferring control to either the fast or slow path
based on the current mode of execution.
Iodine conservatively disables all optimistic optimizations
upon an invariant violation. Given adequate proﬁles, which
is a reasonable assumption for a rigorously tested production
software, invariant failures are very rare. If there is indeed
an invariant failure in production, the program can be re-
optimized ofﬂine after removing the offending invariant from
the likely-invariant set. Thus,
invariant
violations would be extremely rare. Also, since it is common
for live systems to be periodically restarted [26], the execution
can switch back to the fast-path on a restart. Alternatively, only
the optimizations induced by the violated invariant could be
selectively disabled. However, there is no known method that
can be easily applied to realize this. Also, this approach would
require numerous variants of slow-paths.
in the steady-state,
IV. PROOF SKETCH
In this section, we formalize the notion of two analyses
being state-identical, and then prove the soundness of rollback-
free optimistic hybrid analysis by showing that
it’s state-
identical to a conservative hybrid analysis.
A. Notations and Notions
An analysis A is a transformation of a program P that only
generates additional metadata state σA and has no side-effect
on P ’s program state μP . We deﬁne outA to be the outcome
of all dynamically failed check monitors.
We will use the following notations to refer to analyses
instances:
UNOP is the unoptimized dynamic analysis that does not elide
any monitors.
CONS is the dynamic analysis optimized by conservative static
analysis.
OPTII is the dynamic analysis optimized by predicated static
analysis assuming the set of invariants I.
RFOPTII is the rollback-free dynamic analysis optimized by
forward-only predicated static analysis assuming the set of
invariants I.
σA(l) denotes the metadata state of dynamic analysis A at
the program location l. I-FAIL(i) denotes the point(s) in pro-
gram execution where the invariant assumption i dynamically
fails. I-CHECK(i) denotes the program location(s) where the
invariant validation checks are instrumented. A noop monitor
is either a track monitor that does not modify σA, or a check
monitor that succeeds.
Deﬁnition 1. Analysis equivalence : We say that dynamic
analysis A(cid:2)
is equivalent to dynamic analysis A, denoted by
A(cid:2) ≡ A, if for all executions, their analysis outcomes are the
same, i.e., outA(cid:2) = outA.
Deﬁnition 2. State-identical : We say that dynamic analysis A(cid:2)
is state-identical to dynamic analysis A, denoted by A(cid:2) = A,
if for all executions, their terminating metadata states σA and
σA(cid:2) are identical, i.e., σA(cid:2) = σA.
B. Axioms
Axiom 1. CONS is sound [19], i.e., CONS ≡ UNOP.
CONS only elides those monitors which can be proven to
not change the analysis outcome in all executions. ∴ CONS ≡
UNOP.
(cid:21)(cid:26)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:28 UTC from IEEE Xplore.  Restrictions apply. 
Axiom 2. OPTII is sound when the invariants hold [18], i.e.,
I |= OPTII ≡ CONS.
In addition to those elided by CONS, OPTII elides only
those monitors that can be proven to not change the anal-
ysis outcome in dynamic executions that satisfy I. ∴ I |=
= outCONS → I |= OPTII ≡ CONS.
outOPTII
Axiom 3.
Invariant violation is detected before a pro-
gram execution reaches a state that fails an invariant, i.e.,
I-CHECK(i) < I-FAIL(i).
By construction, our invariant checks are instrumented such
that this property holds.
Axiom 4. RFOPTII only elides monitors that are noops.
By construction in §III-C, RFOPTII
predicated static data-ﬂow analysis
monitors that it can prove are noops.
uses
forward
to elide only those
C. Soundness of Rollback-free OHA
We ﬁrst show that RFOPTII
is state-identical
to a
sound conservative hybrid analysis for executions where
the invariants hold. Next, we provide a simple program
transformation that makes the RFOPTII state-identical
to
CONS even at
the point of a dynamic invariant failure.
Finally, we show that the above property allows a forward
recovery of RFOPTII upon an invariant failure, and makes
the whole dynamic analysis sound for all executions.
Lemma 5. RFOPTII is state-identical to CONS when the
invariants hold, i.e., I |= RFOPTII = CONS.
RFOPTII
(I-FAIL(i)) = σCONS(I-FAIL(i)).
Proof: By Axiom 4, RFOPTII elides only those monitors
that can be proven to be noops in dynamic executions that
satisfy I. ∴ I |= σ
= σCONS → I |= RFOPTII =
CONS.
Lemma 6. RFOPTII is sound until an invariant fails, i.e.,
σ
RFOPTII
Proof: Consider the analysis RFOPTI{i} with a single
invariant i. ¬{i} (cid:4)|= RFOPTI{i} = CONS, i.e., we cannot
guarantee soundness for the entire program P if the invariant
fails in a dynamic execution.
Let I-FAIL(i) be the ﬁrst instance of an invariant failure in
the dynamic execution of P . Now, consider the program P (cid:2)
obtained by the following transformation (shown in Figure 3):
immediately after the location of each invariant check, we
instrument a HALT instruction conditional on the invariant i
having failed. The elided monitors are shown as equivalent
noops.
By Axiom 3,
the invariant check preceding I-FAIL(i)
will detect the invariant failure before the program execution
reaches a state that fails the invariant. Therefore, the modiﬁed
program P (cid:2)
will HALT after the failed I-CHECK(i), and before
I-FAIL(i). This is equivalent to a program executing without
an invariant failure.
By Lemma 5, RFOPTII = CONS for P (cid:2)
only differ in their termination behavior and P (cid:2)
. Since, P and
HALTs at
P (cid:2)
I-FAIL(i), we have that:
σ
RFOPTII
(I-FAIL(i)) = σCONS(I-FAIL(i)) for P .
l1: noop
I-CHECK(i): if (¬i)
HALT
I-FAIL(i):
l2: noop
···
···
···
···
Fig. 3: Transformed program P (cid:2)
Theorem 7. RFOPTII with forward-recovery is sound.
in Lemma 6, we have that
Proof: By the soundness of RFOPTII on the HALT-
transformed program P (cid:2)
the
metadata state σ
(I-FAIL(i)) at the location of invari-
RFOPTII
ant failure is state-identical to that in CONS. Therefore, the
forward-recovery mechanism can simply switch to CONS on
an invariant failure, and that analysis as a whole is analysis-
equivalent to CONS. ∴ by Axiom 1, RFOPTII with forward-
recovery is sound.
D. Insight Summary
Contrasting Axiom 2 and Lemma 5, the key difference is
that when I holds, OPTII ≡ CONS but RFOPTII = CONS.
While the generic OPTII aggressively elides monitors to only
preserve analysis-equivalence, RFOPTII only elides noop
monitors, thus being state-identical to CONS. This allows the
analysis to simply switch to conservative analysis CONS upon
invariant violation.
V.
IMPLEMENTATION
We built the Iodine tool, an instance of our rollback-free
optimistic hybrid analysis discussed in §III for taint track-
ing. The proﬁler, the proﬁle-driven predicated static analysis
and the dynamic analysis instrumenter are implemented in
the LLVM 3.9 compiler infrastructure [27], and we run our
analysis tool after all other compiler optimization passes. We
support programs written in the C language. To track taint
ﬂows through external libraries, we compile and statically link
all dependency libraries into a single object, except libc for
which we write stubs, and thereafter analyze them together.
Our analysis marks policy-determined inputs as tainted, fol-
lows how taints propagate through program execution, and
asserts checks on the usage of tainted data. To instrument the
ﬁnal optimized taint analysis code, we build upon LLVM’s
Data Flow Sanitizer[20] as our instrumentation backend. We
discuss the implementation details below.
A. Specifying Information-Flow Policies
To evaluate the effectiveness of optimistic analysis on taint
tracking, we design a conﬁgurable taint policy that
treats
all types of external inputs to the program as potential taint
sources. This includes most program interfaces such as termi-
nal, ﬁle, socket input functions, and command-line arguments.
Source functions can taint data in different ways, e.g. the
return value of getchar() becomes tainted, while the buffer
operand of read() becomes tainted. We allow the policy
to mark standard output interfaces, such as terminal, ﬁle and
socket outputs as taint sinks and assert that the appropriate
arguments to these functions should not be tainted.
(cid:21)(cid:26)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:28 UTC from IEEE Xplore.  Restrictions apply. 
We allow specifying conﬁgurable taint policies to identify
taint sources, sink locations, and untaint functions via a ﬂexible
interface of source-level annotations. The annotation language
can specify custom taint markings, e.g. taint(password)
= secret would attach a new taint marking secret to
the variable password; and specify custom taint checks.
Additionally, the source annotations specify untaint functions
to indicate when a particular taint marking should be re-
moved. This makes Iodine easily adaptable to employ useful
information-ﬂow policies, as we demonstrate in §VI-B.
B. Static Taint and Pointer Analysis
Static taint analysis computes how the taints of data prop-
agate through the program under a given selection of taint
sources, sinks, and propagation policies. We perform static
taint analysis using a whole-program context-sensitive ﬂow-
sensitive data-ﬂow may-analysis [2]. We do so by building a
deﬁnition-use graph (DUG) [28], each node representing an
instruction that deﬁnes the resultant data value, and an edge
connecting an instruction to those that use its deﬁnition. Our
taint analysis is a context-sensitive analysis, making it more
precise by distinguishing between different invocations of the
same function. The analysis ﬁrst creates local DUGs separately
for each function in the program which captures the intra-
procedural data ﬂows within each function. Then the analysis
traverses the call graph of the program, beginning at the main
function. For each function call, it creates a clone of the local
DUG of the callee function and connects the arguments and
return values of that replica to the call-site. If the function call
is recursive, the call is connected to the existing nodes in the
DUG representing that callee, otherwise a new set of nodes
is added for the call. It then recursively processes the callee
function until all calls are resolved, resulting in a complete
context-sensitive DUG of the program.
Once the DUG is constructed, the analysis can induce the
following two optimizations:
Forward optimizations: Taints are propagated through
the whole-program DUG using forward data-ﬂow until a
transitive closure is reached. Since our dataﬂow analysis is
a may analysis, the absence of taint ﬂow is a sound must
not assertion. Therefore, any instruction that does not have
tainted source operands can elide dynamic monitors for taint
tracking. This optimization is induced only using a forward
data-ﬂow analysis.
Backward optimizations: Taint ﬂows that do not eventually
reach a sink can be pruned out using a backward co-
these
reachability analysis on the DUG. We
optimizations only in the
analysis.
This optimization is induced using a backward data-ﬂow
analysis on the result of forward taint-ﬂows.
conservative
enable
static
Pointer Analysis: To track taint ﬂows via indirect memory
operations to aliased locations, we need to propagate taints to
all aliases of a pointer accessing a tainted value. To this end,
we perform a pointer analysis to compute the points-to set
of each pointer location and then use this information during
the static taint analysis to add taint-ﬂow edges to the DUG
from pointer deﬁnition to its aliasing uses. We use Andersen’s-
based [29] whole-program context-sensitive ﬂow-insensitive
inclusion-based pointer-analysis with heap cloning [30] and
well-known optimizations including HVN/HRU [31], online-
cycle-detection [32], and BDDs for points-to sets [33].
(cid:21)(cid:26)(cid:23)
C. Predicated Static Taint Analysis
We improve the precision of the forward-only static data-
ﬂow taint analysis by assuming proﬁled likely invariants to
increase its accuracy and efﬁciency. We use the following types
of invariants:
Likely unreachable code is a code region that is unlikely
to be executed. These can signiﬁcantly reduce the static
analysis’ search space by pruning away all nodes deﬁned by
and edges incident upon them in the analyses DUGs. This
invariant is proﬁled by instrumenting every basic block.
Likely callee set is the set of functions that are likely
to be invoked by an indirect function call. These invariants
effectively convert all indirect function calls in the DUG to
direct calls to the likely callee functions, thereby removing all
the imprecision due to unresolved indirect call destinations.
These are easily proﬁled by monitoring values of function
pointers in the program.
Likely unrealized call contexts is the set of calling
contexts that are unlikely to be realized for a function call.
These invariants reduce unnecessary replication of the local
DUGs for call contexts that are unlikely to occur, thereby
making context sensitive data-ﬂow analysis more precise and
scalable. These can be proﬁled by monitoring the state of call
stack at the time of entering a function call.
We consider only those likely invariants which are not
violated in any of our proﬁled executions. These invariant
assumptions are used to prune the static analysis DUGs in our
proﬁle-driven pointer analysis as well as the predicated static
data-ﬂow analysis. The set of used invariants is recorded, and
later used by the monitor instrumenter to add invariant checks.
We implement predicated versions of pointer analysis and
forward data-ﬂow analysis. The backward data-ﬂow analysis
is not predicated as required in §III-C, so Iodine uses a conser-
vative backward data-ﬂow analysis along with the predicated
forward data-ﬂow analysis.
By assuming these likely invariants, the DUG constructed
for static analysis is unsound, and therefore much smaller than
a DUG constructed for a traditional sound program analysis.
This smaller DUG improves scalability and accuracy of our
optimistic pointer and taint analyses, signiﬁcantly reducing the
aliasing-rate of pointers thereby improving accuracy and scala-
bility [18]. The improvement in scalability is so signiﬁcant that
it allows us to scalably apply context-sensitive points-to and
taint analysis for all our test programs, even further improving
accuracy.
D. Optimistic Hybrid Taint Analysis
The predicated static taint analysis identiﬁes the set of
instructions that need to be monitored. We then instrument
these monitors using LLVM DFSan [20] after the compiler
has ﬁnished all its optimization passes. DFSan is a purely
dynamic DIFT tool that provides a ﬂexible interface to specify
data labels and enforce custom information-ﬂow policies.
We modify DFSan’s instrumentation framework to selectively
process only those instructions which contribute to taint ﬂows
in our predicated static analysis, thereby effectively eliding
the noop monitors. We chose DFSan as our state-of-the-art
dynamic baseline due to its ease of integration with our LLVM
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:28 UTC from IEEE Xplore.  Restrictions apply. 
if((cid:3411)(cid:2191))
if((cid:3411)(cid:2191))
fast-path
slow-path
Fig. 4: Forward recovery switching mechanism: Each function
implements fast-path and slow-path in separate control ﬂow
domains, and execution switches from fast-path to slow-path
upon detecting an invariant violation.
static analysis framework. Iodine’s optimizations are largely
orthogonal to those of traditional dynamic DIFT tools, and
will also likely proportionally improve the overheads of other
competing dynamic tools such as libdft [34] and Minemu [14].
Metadata tracking: The runtime monitors track meta-
data for each program variable and memory locations at the
byte-granularity in separate taint data structures in a shadow
memory, and we only consider explicit taint ﬂows [12]. We
provide two options for tracking taints: (1) where each value
can be assigned a single taint type with taint propagations
being computed as logical or operations, and (2) where
we track multiple taint types per location and compute taint