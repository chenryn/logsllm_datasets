被抛出异常 java.lang.llegalMonitorStateException，
现在的线程如果没有这个对象的锁定时（没有监视器monitor时），执行时会
而清除中断状态，
从在这个对象上等待的线程中选择其中一个启动。
（timeout）之前的时间（以毫秒为单位）。wait(0)的话则不会终止休息。
---
## Page 494
 java.lang.Thread 类 (implements Runnable)
java.lang.Runnable 接口
● public Thread(String namc)
● public Thread(Runnable target)
● public Thread()
● public void run()
指定安装了 java.lang.Rumnable 接口的类的实例与名称，产生 java.lang.Thread，
指定安装丫 java.lang,Runnable 接[的类的实例，产生 java.lang.Thread 的实
指定名称，产生 java.lang.Thread 的实例。
例。
例，在:线程启动后，nun 方法就会被调用出，
在建立 java.lang.Thread 的实例时，如果使用拥有 Runnable 的接口的类的实
关于终止休息（Time-Out）请参照第4章。
会被抛出，而清除中断状态。
在wait 中其他的线程中断现在的线程时，异常java.lang.InterruptedException
常 java.lang.illegalMonitorStateException 会被抛出。
现在的线程如果没有这个对象的馈定时（没有监视器monitor 时），执行时异
java.lang.IllcgalArgumentExccption 会被抛山。
millis 若为负，或者nanos 不是在0以上999999 以下的话，执行时异常
不同了 sleep 方法，现在的线程所有的锁定会被释放。
的话则不会终止休息。
即为到终止休息（timeout）之前的时间（以十亿分之一秒为单位），wait(0,0)
让现在的线程（调用出wait方法的线程）全部wait。1000000*milis+nanos
关“终止休息（Timc-Out）请参照第4章。
会被抛出，而清除！断状态：
在等待中其他的线程中断现在的线程时，java.lang.InterruptedException异常
常 java.lang.IllegalMonitorStatcExceplion 会被抛出，
现在的线程如果没有这个对象的锁定时（没有监视器monitor时），执行时异
不问于 slcep 方法，现在的线程的所有的锁定会被释放。
线程相关的主要API
带D
---
## Page 495
482
● public final void join0 throws InterruptedException
● public boolean isInterruptedO
● public final boolean isAlive()
● public Thrcad(ThreadGroup group, Runnable target, String name)
指定线程群，产生 java.lang.Thread 的实例。
其他的线程中断现在的线程（调用出 join的线程）时，java.lang.InterruptedException
现在的线程（调用join方法的线程）会等待这个线程（this）的结束
的中断状态也不会改变（第5章）。
检查这个线程（this）是为中断的状态。即使调用这个方法，这个线程（this）
检查这个线程（this）是否为 daemon 线程。
public final boolean isDaemon()
的状态。调用这个方法时，现在的线程就不再是中断状态了（第5章）。
检查现在的线程（调用inteupted方法的线程）是否处于中断（interrupt）
程，这点请注意。
会中断对应于 this的线程，但不一-定中断对应于 Thread.currentThread()的线
中断这个线程（this）。
public void interrupt()
获得这个线程（this）的优先级
 public final int getPriority()
检查这个线程（this）是否活着。
public slatic boolean interrupted()
获得这个线程（this）的名称。
public final String getName()
获得对应于现在的线程（调用这个方法的线程）的java.lang.Thread的实例。
public static Thread currentThread()
代表线程能获取的最高优先级的数字。
public static final int MAX_PRIORITY
默认的线程优先级，
public static final int NORM_PRIORITY
代表线程能获取的最低优先级的数字，
public static final int MIN_PRIORITY
指定线程群与名称，产生 java.lang.Thread的实例，
public Thrcad( ThrcadGroup group, String name)
java.lang.Thread 的实例.
指定线程群、安装了 java.lang.Runnable 接口的类的实例以及名称，产生
---
## Page 496
 public final void setName ( String name)
● public final void setDaemon(boolcan on)
● public void resume()
● public final void join ( long millis, int nanos ) throws InterruptedException 
●p
java.lang.llegalArgumentException 会被抛出山。
优先级若不在 MIN_PRIORITY与 MAX_PRIORITY 的范围内，执行时异常
 public final void setPriority ( int newPriority )
设定优先级，
会被抛出，
现在的线程如1果不能改变这个线程（this），异常 java.lang.SecurtyException
改变这个线程（this）的名称。
会被抛出。
现在的线程如果不能改变这个线程（this），异常java.lang.SecurityException
这个线程已经启动的话，异常java.lang.IllegalThreadStateException 会被抛
on 如果为 true，就将这个线程（this）作为 daemon线程。
方法仆么都不做就会直接结束。
这个方法通常会被 java.lang.Thread 的子类 override。java.lang.Thread 类的 run
这个线程(this)启动，就会调用出这个方法（method)。
public void run()
不建议使用。要与suspend方法（也不建议使用此项）配套使用。
会被抛出：而清除中断状态（第5章），
在等待中，其他的线程中斯现在的线程时，异常 java.lang.InterruptedException
java.lang.IllegalArgumentException 会被抛出。
millis 若为负，或是 nanos 不是在0以上999999 以下的话，执行时异常
之一秒为单位），join(0,0)的话则不会终止休息（timeout）。
1000000*millis+nanos 即为到终止休息（timeout）之前的时间（以十亿分
等待这个线程（this）结束。
会被抛出，而清除中断状态（第5章）。
在等待中其他的线程中断现在的线程时，java.lang.InterruptedException 异常
millis 为负时，线程 java.lang.InterruptedException异常会被抛出。
会终止休息：
millis 是到终止休息（timeout）之前的时间（以毫秒为单位)。join()时，不
等待这个线程（this）结束。
public final void join(long millis) throws InterruptedException
异常会被抛出，而清除现在的线程的中断状态（第5章)。
线程相关的主要API
---
## Page 497
● public static void sleep (long millis ） throws InterruptedException
● public static void yield0
● public String toString()
将当前的线程（调用出这个方法的线程）暂停，启动其他线程。
符串．
可以从这个线程（this）的名称、优先级、线程群（Thrcad Group）中取得字
不建议使川：使用这个方法可能导致安全性的问题，
public final void suspend()
不建议使用，使川这个方法可能导致安全性的问题、
public final void stop(Throwable cbj)
一
10章。
不建议使用使用这个方法可能导致安全性的问题。详情请参照第5章和第
public final void stop()
会被抛出．
如果这个力法（this）经启动了，执行时异常java.lang.llegalThreadStateException
启动线程，新启动的线程会调用出 this 的run方法。
public void start()
详情请参照第5 章、
会被抛山：而清除中断状态（第5章），
停止时，其他的线程中断到现在的线程时，异常 java.lang.IntermuptedException
java.lang.llcgalArgumentException 会被抛出 ：
millis 为负时，或是nanos 不是在0以上999999 以下的话，执行时异常
lj wait方法不同，现在的线程的锁定没有被释放。
将"前的线程（调用出stccp 的线程）依指定的时间（以十亿分之-秒为单
会被抛出，而清除中断状态。
山时，其他的线程中断到现在的线程时，异常java.lang.InterruptedException
与wait方法不同，现在的线程的锁定没有被释放。
将当前的线程（调川出 sleep 的线程）按指定的时间（毫秒为单位）暂停。
会被抛出，
现作的线程如果不能改变这个线程（this），异常java.lang.SecurityException
位）暂停。
---
## Page 498
Java.lang.ThreadLocal 类（参照第11章）
 public void set ( Object obj)
● public object get()
设置实际，使能对应到当前的线程（调用出这个方法的线程）
Set 保存过的话，null就会成为返回值-
线程相关的主要API
---
## Page 500
参考文献
附录
---
## Page 501
要学Java 的语言规格
获得类链接库util.concurrent的方法
488
Java多线程程序的深入学习
会将该模式名称表小出来。文献中使用的表记方式会显示在口中。
http://java.str.com/docs/bocks/jls/
村上雅节译／株式会社PiersonEducation/ISBN4-89471-306-3
by Biil Joy. Guy Steele, James Goslirg, Gilad Bracha
我们可以获取多线程的类链接库util.concurrent。
http://g.oswego.cdu/dl/
“Leawer: Doug Lea's Home Page
●Worker Thread (Woker-Threads)
● Thread-Specific Storage( Thread-Specific Data)
Patterns, Secona Edizion" by Doug Led
本-5相关的 Web 网页如F所示。
木书在执笔时，参考了以下的文献数据。若文献中记载有本书中解说的模式，
《Java语言规格第2版》
[JLS] "The Java Larquage Specifica"icn,
● Producer-Consumer
● Immutabie
● Future(Futures)
● Baiking
●Active Object (Actor)
介绍的Pattern
完整介绍Java 的线程程序设计，内容详实而正确。
松野良藏监译/株式会社翔泳社/ISBN4-88135-918-5
《Java执行绪程式撰写并列式物件导间程式设计原理》
[Lea] "Concrrrent Programming :n Java,
http://www.hyuki.com/dp/dp2.htm
Thread-Per-Message
 Read- Write Lock(Readers and Writers)
Guarded Suspension (Guarded Waits)
 Second Edition"
jesign Frinciples and
---
## Page 502
ISBN4-87783-013-8
要学GoF以外的设计模式
用》（书名亦确定）。
繁体本为博硕文化出版。简体中文本为中铁道出版社《设计模式--Java语言中的应
要学Java 中GoF的设计模式
则为台湾培生出版：
要学 GoF 的 Design Pattern
要学Java虚拟机
原洁、宫本道夫、濑尾明志译/CUTT System Development Laboratory/身
htp:/, www.hyuk:.com/dp/
《使用了UML的Java设计模式--可重复使用的程序设计集》
Fat terns Illuai..a'ed wurh lMl" by Mark Grand
[G:and] "Patterus ir Java Velumel, A Catalog of Reusable Design
结城浩省/林式会社 Softbank Publishing/ISBN4-7973-1646-2
[Yukioi]Design Patterns 十 Java 语I.的实习]用
ht:p:, 'hiilside.ret'pa.terns/DPBock'DPBcok.heml 
《物件导向程式中重复使用的Design Pattern修订版》
by Erich Gamma, Rchard Heln, Ralph Jehnscn, and John Vlissides
Seflware"
Gor] "Desigr Partern: Elements cf Reusable Cbject-Oriented
ky Bsil Venrers / >skerre McGraw-Rill ′ IsBN0-0/-135093-4
iVer.ncrs9g: "znsixe thc Java 2 Vir-ual Machine, Second Edition"
lt-p://java.sun.een/daus 'beoks vmspee/
村1：雅章译／株式会社Pierson Education/ISBN4-89471-356-X
《Java虚拟机器规格第2版》
hy T'm Linihclm, Frark Yellin 
参考文献
489
---
## Page 503
要学习Java 的多线程
/ISBN4-7649-0283-4
要学GoF以外的古典的模式
省略了相当多的说明部分,因此阔读时需要泣意这点。
499
● Inmutable
● Guarded Suspension (Spin Lock)
●Balking
金泽典子，水野员之、樱片麻电、关富登志、千叶之译/近代科学社
● Active Object
介绍的Pattern
● Active Object
介绍的Pattern
Stal,hans Rohnert,Frask Buschmann/John Wiley & Sons/IsBN0-47-160695-2
[PosA2] "Pattern-vriented Software Arclitecrure, Volume2: Pattern
Rohnert, Peter Sommerlad, and Michael Stel
● Two-Phase Termination
●Read-Write Lock (Rcad/Write Lock)
● Guarded Suspension
● Balking
介绍的Pattern
关丁 Java 多线程的解说书籍。
[Holuboo] " Tamirg Java Threads"
for Conerrrent ard Netwerked Cbject" by Doug-as Schmidt, Michael
《软件架构》
System
[POSAl: 
?
● Immutable
Single Threaded Execution
Produccr-Consumer
of Patterns"hy Frank Buschmenn, Regire Meunier, Hars
"Pattern-orientea Software Arcritecture, Volumel: A
---
## Page 504
对象设计利多线程。
ISBN4-7973-1010-3（下册)
要学习 Java 的基础
版：
要学习从 Java 的基本到多线程
● Producer-Consumer
介绍的 Pattern
本书为Java 的入门书，上册撰写内容卷重于Java 的基础，F册则是针对面象
http:/'www.hyuki.com/jb/
● Guarded Suspension
● Single Thread ed Execution
结城浩
[Yuki99]《Java语言程式设计讲座》（上下 2册）
●Active Object（主动对象）
● Immutable
● Future (Future Object)
●Guarded Suspension（同步条件、Custom Lock)
●Single Thread ed Execution (临界|x间])
介绍的 Pattern
本书汇.整了Java 的是木、Pattern 以及多线程的精要。繁体木为博硕文化出
[Tomatsu02]（Java式设计第3版》
by Bii Lewia, Laniel ul.Berg'Prcntice Hall/IsBN0-l3-01700'-0
[lewisuo] "Mrlr-threaded Programmirg with Java Technslogyn
Georqe K. Thiruvathukal'Prertice Hall/IsBN0-13-0l6l64-0
Muitithreaded cnd Networked Prograrming" by Thomas Christopher,
● Worker Thread (Thread Pool)
●Thread-Pcr-Message (Thrcad-per-Method)
● Single Thrcad ed Exccution (Critical Section)
Producer-Consumer（牛r者/消费者）
[ThomasCo] "H=g-Perfcrmarce
Rcad-Write Lock (Read/Write Lock)
Java 
Platform
 Computing:
参考文献
---
## Page 505
参考网页
要学习Java的技巧
●Obscrver模式以及多线程
●Why Are Thread.stop, Thread susoend, Thread.resume and Runtime.nunFinalizersOnExit
● DesignPaiterns in Wiki
● Object Management Group
● Design Pattern Mailing List
● Pattern s Home Page
●本书相关网页
在第9章中记载了关于线程需要注意的地方，
Threads and Swing
柴山芳树译/株式会社. Pearson Education Japan/ISBN4-89471-436-1
《EfcctiveJava程序语言手册》
by Joshua Bloch
"apina abenbuer futuuerbotd eaer barioajiau [oota]
http://objectclub.esm.co.jp/observer-multithread/
ht.tp://c2.com/cgi/wiki?DesignPatterns
http://www.omg.org/
article.html
http: //www.asahi-net.or.jp/~dp8t-asm/java/articles/notes/01/
http://www.hyuki.com/dp/dpml.html
htlp://www.hillside.net/patterns/
htp://www.hyuki.com/dp/dp2.html
http://java.sun ,com/products/jfc/swingdoc-archive/threads.html
Inmutable Object
threadPrimitiveDeprecation.html
的理由（”述口文解释）
不推荐 Thread.stop、Thread-suspend、 Thread-resume 以及 Runtime-runFinalizerOnExit
rimitiveDeprecation .html
http://java.sun,com/products/jdk/1.3/docs/guide/misc/threadP
Deprecated?
---
## Page 506
·如果我是神的话：Java程序语言线程不正常问题解决的方案（上述I1文直译）
● JFC/Swing Event Handling (Tutorial)
● Using a Swing WorkerThread - New Ways to Perform Background Tasks
●Thrcads and Swing
?
http://java.sun .CoIn/proaucts/j fc/tsc/articles/threads/threads2.html
http://java.sun .com/products/jfc/tss'arricles/threads/threadsl.html
http://www-6.ibm.com/jp/developerwerks/java/010302j_j-king.html
http://www-106.ibr.com/develcperworks/java/library/j -king .html
problems
 http://java.sun .com/docs/bocks/tutorial/tiswing/overview/event.html
If I were king:A proposal for fixng the Java programming language's threading 
参考文献
493
---