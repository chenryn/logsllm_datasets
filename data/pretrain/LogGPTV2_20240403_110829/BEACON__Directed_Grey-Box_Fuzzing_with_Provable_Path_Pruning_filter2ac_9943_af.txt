prunes 29.1% more paths than BEACON˚ on average. In some
cases (e.g., CVE-2017-8397), BEACON˚ cannot even repro-
duce the vulnerability in 120 hours. This result demonstrates
the signiﬁcance and necessity of the precondition analysis,
which allows us to achieve notable performance improvement.
C. Impacts of Relation Preservation & Bounded Disjunction
To effectively prune paths during fuzzing, we proposed a
dedicated precondition analysis that is armed with two key
strategies, i.e., relationship preservation and bounded disjunc-
tion, to ensure both scalability and precision. To evaluate how
relationship preservation and bounded disjunction contribute to
the time reduction in BEACON, we also set up another variant
of BEACON, BEACON-rp and BEACON-bd, which disable
the bounded disjunction and the relationship preservation,
respectively. We then reran the experiments discussed before
using BEACON-rp and BEACON-bd.
The experimental results are shown in Figure 11, where we
can observe that BEACON is much faster (1.05x to 4.9x, 1.05x
to 5.34x) than BEACON-rp and BEACON-bd for reproducing
the vulnerabilities, respectively. This result demonstrates the
Figure 9: Reproduction time comparison among AFL,
AFL+BEACON, Mopt, Mopt+BEACON AFL++, and AFL++
+BEACON. The x-axis is the vulnerabilities in Table III.
The y-axis is the average reproduction time in 10 repeated
experiments. We used 120h as the timeout bound.
reported to be more effective than AFLGo. However, Hawkeye
is not open source. Thus, we tried to reproduce Hawkeye’s
experiments using AFLGo and BEACON. We then compared
the results with those reported in Hawkeye’s paper. The results
are shown in Table IV. BEACON outperformed AFLGo and
Hawkeye for reproducing all the vulnerabilities, with all p-
values less than 0.05. For CVE-2016-4491 and CVE-2016-
6131, in particular, BEACON can achieve a 3.6x and 5.7x
speedup compared to Hawkeye.
3) Compared to AFL, AFL++, and Mopt: Since the path-
pruning idea is orthogonal
to existing fuzzing techniques,
the idea of BEACON can be leveraged to speed up almost
all fuzzers for the thorough testing of a speciﬁc target in
a given program. To illustrate the generality of our idea,
we integrate BEACON with AFL, AFL++, and Mopt, three
non-directed fuzzers,
to help them prune paths for repro-
ducing vulnerabilities in Table III. The results in Figure 9
show the improvement brought about by BEACON for non-
directed fuzzing. On average, compared to the original tools,
AFL+BEACON AFL+++BEACON, and Mopt+BEACON can
achieve 6.31x, 11.86x and 10.92x speedup, respectively.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:18 UTC from IEEE Xplore.  Restrictions apply. 
46
Table VI: Runtime overhead comparison with pure instrumen-
tation from AFL and BEACON without ﬁlteration using the
same inputs generated from the deterministic stage of AFL.
Project Nexec
Ming
Binutils
Libxml
Lrzip
Libjpeg
Libpng
Libpoppler
Libav
25K
Torig
126K 4.52m
2.38M 2.48h
0.63h
1.07M 1.43h
2.97M 0.59h
1.41M 7.55h
1.21M 23.73h
7.62M 23.87h
TBeacon Overhead
4.80m
2.51h
0.65h
1.57h
0.61h
8.01h
25.27h
26.13h
6.2%
1.2%
3.2%
9.8%
3.4%
6.1%
6.5%
9.5%
1 int init(char* input) {
2
int type,length1,length2 = extract(input)
;
3
4
5
6
7
8
9
10
11
12
13 }
// assertion inserted by Beacon
assert(type==5&&length1+length2<42);
// an overly lengthy function
data=processing(input);
// crash on some condition
if(type==5&&length1+length2<42)
crash();
Figure 12: An example of a case study.
(Torig), and the time cost after our instrumentation (TBeacon).
We observe that BEACON introduces up to 9.8% runtime
overhead and 5.7% on average. We believe that such low
overhead is acceptable in practice, and the previous evaluation
has shown BEACON is much faster than the existing fuzzers.
E. Case Study
To provide a better understanding of why BEACON can
achieve good performance as discussed before, we provide
an example in Figure 12, which is simpliﬁed from a real
bug detected by us4. In the code snippet, a crash at Line 12
may happen on the branch condition at Line 11. Before the
crash, it exists an overly lengthy procedure at Line 8. Thus,
if we cannot determine if an input can reach the crash, we
have to waste a lot of time on the overly lengthy procedure.
BEACON can compute the precondition on which the crash
may happen and inserts the precondition before the overly
lengthy procedure at Line 5. In this manner, we can stop
early before Line 8 if the precondition is violated, whereas
conventional directed fuzzers cannot prune any path.
F. Discussion
Assisting other fuzzers: Conventionally,
input genera-
tion [15], [17] and seed prioritization [1], [2] are the two main
dimensions for improving the performance of directed fuzzing.
Nonetheless, fuzzers still have the possibility of failing to
reproduce the vulnerabilities without a provable guarantee.
Therefore, BEACON proposes another direction for directed
fuzzing, which prunes the infeasible paths away to minimize
the penalty brought about by the randomness.
4We cannot provide the original code since it is still reproducible in the
newest version of the program and may cause a malicious attack.
Figure 11: Reproduction time comparison of BEACON
BEACON-rp, and BEACON-bd. We use the results of BEACON
with only reachability pruning as the baseline. The x-axis is
the CVE-identiﬁed vulnerabilities listed in Table III. The y-
axis is the reproduction time compared with BEACON˚.
Table V: Different conﬁgurations of the bound used for
precondition inference and its time costs. We sample one CVE
from each project 10 times and record the average ﬁlteration
ratio with these preconditions till reproducing the CVEs. Tinf
denotes the time costs, F represents the ﬁltration ratios. oom
denotes the analysis used up the 30G memory budgets.
Project
Ming
Binutils
Libxml
Lrzip
Libjpeg
Libpng
Libpoppler
Libav
5
20
50
Tinf
27s
2560s
6418s
67s
103s
85s
4290s
14895s
F
Tinf
81.3% 101s
90.4% 20.11h
88.5% 13.17h
87.1% 464s
90.7% 423s
92.9% 441s
70.5% 4.91h
61.1% 14.94h
F
Tinf
82.5% 280s
90.8% oom
89.1% oom
89.2% 1806s
91.3% 1096s
93.7% 3836s
71.8% oom
64.3% oom
F
83.0%
n{a
n{a
90.0%
92.6%
93.8%
n{a
n{a
signiﬁcance and necessity of both strategies, as both of them
contribute to the precision of the precondition analysis, and
their combination allows us to achieve greater precision and
prune a lot more paths during the fuzz testing.
We also studied the inﬂuence brought about by the bound
threshold used in bounded disjunction. The results are shown
in Table V. The execution ﬁltration ratio improves slightly
from 0.9% to 3.2% when the bound threshold increase from
5 to 50. However, the time costs burst dramatically and even
used up the server memory. Therefore, BEACON uses 5 as the
threshold to get a sweet spot of efﬁciency and effectiveness.
Meanwhile, the distance calculated for picking the merging
states preserves the program semantics to prevent too much
precision loss.
D. Instrumentation Overhead
BEACON prunes the infeasible paths through instrumen-
tation, which may cause additional runtime overhead. To
evaluate the runtime overhead, we run the same inputs against
two versions of each benchmark program. One is the vanilla
version without any instrumentation, and the other is instru-
mented by BEACON, where we add precondition checks but
do not let the program exit early when a precondition check
fails. We do not exit the program early because this evaluation
needs to ensure that we run the same paths on the two versions.
The results are shown in Table VI, where we show the number
of executions of each program (Nexec), the original time cost
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:18 UTC from IEEE Xplore.  Restrictions apply. 
47
Threats to validity: The main concern is the random-
ness in input generation. Even though we have conducted
the experiments multiple times for fairness, different input
sequences might inﬂuence the outcomes in these projects. Still,
the results meet the expectation that BEACON achieves faster
crash reproduction than AFLGo by ﬁltering those infeasible
paths. Meanwhile, the integration with other fuzzers shows
the capability of BEACON in improving existing fuzzing.
Another issue is that we have not proved the capability
of BEACON to assist fuzzers relying on symbolic executions.
However, since the scalability issue is the major concern of
symbolic execution, how to efﬁciently handle the large-scale
programs chosen in the experiment could become another
challenge. Therefore, we attempt to tackle this in future work.
VI. RELATED WORK
In addition to the related work discussed in Section II, this
section surveys other related work.
A. Directed White-box Fuzzing
The idea of directed fuzzing begins with white-box
fuzzing [5], [11], [48], which mainly depends on symbolic
or concolic execution, such as Klee [49],
to generate an
exploitable input for bug reproduction. However,
the path
explosion problem and the notoriously expensive constraint
solving make them hard to scale for real-world programs.
Therefore, existing works attempt to leverage the prior knowl-
edge of the vulnerabilities to make symbolic execution focus
on the relevant program states.
One direction is to prioritize program paths for the symbolic
execution to explore. For example, Hercules [50] uses an un-
sound function summary to prioritize the reachable paths. Oth-
ers either rely on bug reports [51], critical system calls [10],
or changes in patches [52] to identify the potential bug trace.
However, these works usually require manual expertise to
ensure the quality of this prior knowledge, which may lead to a
varied performance on different programs. The other direction
is to accelerate the symbolic execution itself for approaching
the targets faster. For example, existing works preserve the ex-
ecution states either symbolically [53] or concretely [54] with
snapshot mechanisms to avoid redundant path explorations.
Chopper [55] adapts online static analysis to provide state
merging strategies while minimizing the number of analyzed
paths on the ﬂy. DiSE [56] identiﬁes the relations among the
branching conditions and solves them incrementally.
Even though lots of effort has been devoted to symbolic
execution, scalability is still a major concern in research
nowadays. This is also why we choose directed grey-box
fuzzing, which often exhibits promising scalability in practice.
B. Coverage-guided Fuzzing
Optimizations for conventional coverage-guided fuzzers
also have the potential to improve directed fuzzing. First, we
can optimize input generation with dynamic taint analysis. The
basic idea is to mutate the related input offsets to satisfy the
uncovered branch conditions. Other than random mutation,
Angora [57] adapts byte-level taint tracking to discover the
related input bytes of the target condition, and then applies a
gradient-descent-based search strategy. To make the gradient-
descent-based search more reasonable, Neuzz [58] proposes to
use the neural network to smooth the search progress. There
are also some techniques involving a lightweight program
analysis and transformation to improve the effectiveness of
the mutation. Fairfuzz [59] identiﬁes the input offsets where
it is not necessary to change the values, thus, minimizing the
input search space improves the efﬁciency of the mutation.
Mopt [13] proposes a novel mutation operator scheduling
strategy to adjust mutation strategies for different programs.
The second direction is to integrate fuzzers with con-
colic/symbolic execution, a.k.a., hybrid fuzzing, for tackling
complex and tight path constraints. Hybrid fuzzing combines
the advantages of efﬁcient mutation and precise constraint
solving to evaluate the programs, which could be the future
direction for white-box fuzzing. With the development of fuzz
testing, the majority of the path exploring the demand ofﬂoads
to the fuzzers to avoid the path explosion problem in sym-
bolic/concolic execution. In short, the state-of-the-art hybrid
fuzzing selectively solves the path constraints to improve the
performance. For example, Driller [60] proposes to solve those
uncovered paths for fuzzing rather than exploring all paths
with concolic execution. However, how to effectively integrate
concolic execution with fuzzing is always under consideration.
QSYM [61] solves part of the path constraint for a basis
seed and leverages the mutation for validated inputs satisfying
the actual condition. Intriguer [62] further replaces symbolic
emulation with dynamic taint analysis, which decreases the
overhead of modeling a large amount of mov-like instruc-
tions. Pangolin [63] proposes to preserve the constraint as
an abstraction and reuse it to guide further input generation.
Overall, these methods are orthogonal to BEACON and can be
integrated with BEACON for better performance.
VII. CONCLUSION
We have presented BEACON, which directs the grey-box
fuzzer in the sea of paths to avoid unnecessary program exe-
cution and, thus, saves a lot of time cost. Compared to existing
directed grey-box fuzzers, BEACON can prune infeasible paths
provably and more effectively, via the assistance of a dedicated
cheap, sound, and precise static analysis. We have provided
empirical evidence that BEACON is more effective than the
state-of-the-art (directed) fuzzers.
ACKNOWLEDGMENTS