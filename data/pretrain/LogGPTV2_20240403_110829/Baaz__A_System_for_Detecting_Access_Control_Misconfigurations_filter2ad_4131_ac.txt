what we mean by our algorithm reaching an internally
consistent state, as mentioned in Section 3.2.
Note that in ﬂagging these candidates, we may have
missed some misconﬁgurations. For example, it is cer-
tainly possible that users C and D (forming group G3)
should not have access to objects 15 and 16. But given
that there is no deﬁnition of correct policy, a complete
and correct list of misconﬁgurations cannot be expected.
However, Baaz does ensure that the permissions are con-
sistent across user-sets and the reference groups they
map to.
Baaz can use role mining algorithms in the Matrix Re-
duction step to ﬁnd possibly a larger number of sum-
mary statements. However, our deﬁnitions of miscon-
ﬁguration and our algorithms hinge on the property of
object-sets being disjoint, without which the system may
ﬁnd conﬂicting misconﬁguration candidates. For ex-
ample, if summary statement 3 included object 15, i.e.
{A, B, C, D} → {9, 10, 11, 12, 15}, the object 15 would
be common to the object-sets of summary statements 1
and 3. Then, from summary statement 3, Group Mapping
would suggest that D should not have access to object
15, but the exact Group Map for summary statement 1
indicates that D should have access to object 15. Hence,
while Baaz could use role mining algorithms, and lever-
age richer and larger numbers of user-sets, it would need
to include more logic to resolve such conﬂicts. Instead,
we go with the approach of using the simple Matrix Re-
duction algorithm that provides object-disjoint user-sets.
Say the Matrix Reduction step from Section 4 out-
puts a total of l summary statements and g reference
groups. The input to the Group Mapping step is the
set of user-sets U = {U1, U2, · · · , Ul} from the sum-
mary statements, and the set of reference groups G =
{G1, G2, · · · , Gg}. Our objective can now be expressed
in terms of ﬁnding a set cover for each user-set Ui using a
subset of the groups in G. A set cover, in its usual sense,
implies that the union of the covering subsets is exactly
equal to the set to be covered. But, we are interested in
ﬁnding an approximate set cover, where the cover need
not be exhaustive, and reference groups could include
members that are not in the user-set. The idea is to ﬁnd
a maximal overlap between the subject dataset user-sets
and the reference groups. This approximate set cover Ci
may contain a group Gj such that some users in Gj are
absent in Ui, as shown in Figure 7 with user-sets 2 and 5.
Also, it is not necessary that Ci covers every user in Ui,
as shown with user-sets 3 and 4. We refer to the set of un-
covered users in Ui as Ti, i.e., is Ti = Ui −S∀Gj∈Ci
Gj.
We choose an approximate set cover based on the min-
imum description length (MDL) principle [11], which en-
sures that the overlap is large, while the leftover set of
uncovered users is small. In other words, |Ci| + |Ti| is
minimum over all possible approximate set covers. The
minimum set cover problem is known to be NP-Hard, as
it can take running time that is exponential on the set of
users. By the same logic, the problem of ﬁnding approx-
imate set cover with minimum description length is also
NP-Hard. In practice, we have found that if the num-
ber of reference groups is less than 20, then it is fea-
sible to solve it exactly on our testbed computers. For
larger reference datasets, we use a well-known greedy
approximation algorithm [16], which picks the set that
has the maximal overlap, removes it from the reference
set, and repeats the process. This is known to work
within O(log m) of optimal, where m is the number of
GROUP MAPPING
Input: S {summary statements}, G {reference groups}
Output:
GAM {accessibility misconﬁgs [users,objects]},
GSM {security misconﬁgs [users,objects]}
1: GAM = φ ; GSM = φ
2: U = all user-sets in the extracted summary statements S
3: for all Ui ∈ U do
4:
5:
(Ci, Ti) = Map Groups (Ui, G)
for all Gj ∈ Ci do
|Gj−Ui|
if
|Ui| < 0.5 then
GAM = GAM S{[Gj − Ui, Oi]}
end if
6:
7:
8:
9:
10:
end for
|Ti|
|Ui| < 0.5 then
if
GSM = GSM S{[Ti, Oi]}
11:
12:
13: end for
14: return GAM, GSM
end if
MAP GROUPS (APPROXIMATE)
Input: Ui {set to be covered}, G {Groups}
Output: Ci {cover from G}, Ti {uncovered users in Ui}
1: Ci = φ ; Ti = φ ; G0 = φ ; U 0
2: for all G ∈ G do
3:
i = Ui
|Gj−Ui|
|Ui| < 0.5 then
if
end if
if M DL(Ui, Ci ∪ {G}) < M DLmin then
Gmin = G
M DLmin = M DL(Ui, Ci ∪ {Gmin})
G0 = G0 ∪ {G}
for all G ∈ G0 do
4:
5:
6: end for
7: repeat
8: M DLmin = M DL(Ui, Ci) ; Gmin = φ
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19: until U 0
i = φ
20: return Ci, φ
Ci = Ci S{Gmin} ; U 0
end for
if Gmin = φ then
return Ci, U 0
i − Gmin
i = U 0
end if
end if
i
Figure 8: Group Mapping Algorithm.
users in the user set, for the original minimum set cover
problem. We modify this algorithm suitably to gener-
ate the approximate set cover with minimum description
length.
Figure 8 shows the pseudocode for our Group Map-
ping algorithm. The main steps of the algorithm for a
given list of user-sets {U1, U2, · · · , Ul} can be summa-
rized as follows:
Step 1: For each user-set, ﬁrst eliminate all groups in
which more than half of the users are not members
of the user-set (lines 2–6 in MAP GROUPS, Fig-
ure 8). Since less than half of the users in these
reference group intersect with the user-set, this ref-
erence group will not ﬁgure in either security or ac-
cessibility misconﬁguration candidates as deﬁned in
Section 5.2.
Step 2: When the number of groups in G is less than
20, we exhaustively search for all set covers and
use the minimum. For larger G, we use a modi-
ﬁed version of the greedy set-cover algorithm to do
the matching, as shown in Figure 8. For each user-
set Ui, we pick a group G that overlaps maximally
with Ui (pick any one in case of ties). To apply
the minimum description length principle, we de-
ﬁne the description length for Ui in terms of G as
|Ui − G| + |G − Ui|. For example, in user-set 2,
two potential mappings are G1 as shown in the ex-
ample, or G3, which contains users C and D. In
the former case, |U2 − G1| is 0, and |G1 − U2| is
2, since G1 contains two extraneous users, H and
J . In the latter mapping, |U2 − G3| is 3, since G3
covers C and D and does not include E, F and G.
Also, |G3 − U2| is 0. Therefore the MDL metric for
the former cover is 2, while in the latter case it is 3.
Hence our algorithm picks G1 as the cover. Refer
to lines 8–14 in MAP GROUPS, Figure 8.
Add this selected group to the cover Ci. Remove
the covered users from Ui to get U 0
i and repeat until
all users are covered, and the ones that cannot be
covered by any group are output as Ti. Refer to
lines 15–19 in MAP GROUPS, Figure 8.
Using this mapping, we can ﬁnd both security and
accessibility misconﬁgurations for each user set Ui ex-
tracted from the summary statements (Ui → Oi), as
shown in lines 4–14 GROUP MAPPING, Figure 8. The
summary statement can be rewritten as:
{G
0
1 ∪ · · · ∪ G
0
c ∪ Ti} → Oi.
0
j = Gj ∩ Ui, ∀Gj ∈ Ci. Let ∆Gj be the
where G
users in Gj who are not in Ui. Note that Step 1 en-
|∆Gj|
|Gj| < 0.5, that is ∆Gj is a minority in Gj.
sures that
Based on the intuition provided in the previous section,
we infer that users in ∆Gj (if any) may require access
to the objects Oi. Hence, the intended access should be
{G1 ∪ · · · ∪ Gc ∪ Ti} → Oi and for each Gj ∈ Ci
such that corresponding ∆Gj 6= φ, the system reports
accessibility misconﬁguration candidate as:
users in ∆Gj MAY need access to Oi
Finding security misconﬁguration candidates is a
slightly different process. Again, for a given user-set Ui,
the users in Ti are those that do not match any of the ref-
erence groups but still have access to Oi. If these users
form a minority of the users in the user-set Ui, that is
|Ti|
|Ui| < 0.5 and Ti 6= φ, then the system infers that the in-
tended access should be {G1 ∪ · · · ∪ Gc} → Oi and all
users in Ti are reported to be security misconﬁguration
candidates as:
users in Ti MAY NOT need access to Oi
Note that while we use metrics based on simple ma-
jority and minority to detect misconﬁguration candi-
dates, our prototype implementation supports any thresh-
old value between 0 and 1. A higher threshold may ﬁnd
more valid misconﬁgurations but may also increase the
number of false alarms.
Complexity: The group mapping run time is bounded as
O(k2lg), where k is the maximum number of users in a
reference group, g is the number of reference groups and
l is the number of summary statements.
5.3 Misconﬁguration Prioritization
When Baaz presents the misconﬁguration report to the
administrator, it lists the candidates in a priority order.
Prioritization of candidate misconﬁgurations is impor-
tant because administrators may not have the time to vali-
date all misconﬁguration candidates that Baaz outputs, as
in Dataset 2 in Section 8. In such cases, a ranking func-
tion helps them focus their attention on the high-value
candidates.
The main intuition behind our ranking function is that
when the mismatches between a user-set and its covering
reference group is smaller, the possibility of the miscon-
ﬁguration candidate being a valid issue is higher. The
formula used for prioritization of both accessibility and
security candidates capture this measure of difference in
similarity between a user-set and its cover.
For accessibility misconﬁgurations, for a given Ui, the
system computes a priority over each reference group Gj
in Ci, as:
P(accessibility misconf ig) = 1 − Pc
j=1 |∆Gj|
^Ƶŵŵ ^ƚϱ͗
^Ƶŵŵ ^ƚϮ͗
͕͕͕&͕'͕,
͕͕͕&͕'
,
ϰ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
Ϯ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϯ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ




&
'
,
/
:
ϭ͕Ϯ͕ϯ͕ϰ͕ϱ
ϲ͕ϳ
ϲ͕ϳ
ϱ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϲ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϳ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
^Ƶŵŵ ^ƚϯ͗
^Ƶŵŵ ^ƚϰ͗
͕͕͕
͕͕͕͕/
ϵ͕ϭϬ͕ϭϭ͕ϭϮ
ϭϯ
ϭϯ
/
ϴ
ϵ
ϭ
ϭ
ϭ
ϭ
ϭϬ ϭϭ ϭϮ ϭϯ ϭϰ ϭϱ ϭϲ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
Figure 9: The result of the Object Clustering algorithm
on the example subject matrix.
6.1 Intuition
We ﬁrst present the intuition behind our Object Cluster-
ing algorithm. When the access permissions for a small
user-set is only slightly different from the access control
for a much larger user-set, this may indicate a misconﬁg-
uration.
Figure 9 explains this intuition using our example. Ob-
serve that the user-sets for summary statements 3 and 4
differ in one user – I – because I has access to object
13, but does not have access to any of 9, 10, 11 and 12.
On the other hand, users A, B, C and D have access to
objects 9, 10, 11, 12 and 13. Therefore, Baaz suggests a
security misconﬁguration candidate:
user I MAY NOT need access to object 13.
Similarly, summary statements 5 and 2 differ in only
one user – H – because H does not have access to objects
6 and 7. Users C, D, E, F and G have access to 1, 2,
3, 4, 5, 6 and 7. Therefore, as shown in the ﬁgure, Baaz
suggests an accessibility misconﬁguration candidate:
|Ui|
user H MAY need access to objects 6 and 7.
For security misconﬁguration candidates, we use the
fraction of potentially unauthorized users to prioritize as
follows. The smaller the fraction of uncovered users, the
higher the priority.
P(security misconf ig) = 1 −
|Ti|
|Ui|
6 Object Clustering
Our second technique for ﬁnding misconﬁguration can-
didates is Object Clustering. This procedure uses only
the summary statements as input and is therefore partic-
ularly useful in the absence of suitable reference groups.
The matrix in Figure 9 shows that if an administra-
tor or resource owner determines that these are indeed
valid misconﬁgurations and ﬁxes them, the matrix be-
comes more uniform. A future iteration of matrix reduc-
tion will output fewer summary statements. In this ex-
ample, C, D, E, F , G and H now have identical access
and hence the reduction will remove summary statement
2. Similarly, since user I will no longer have access to
object 13, statement 4 will not be found in future itera-
tions. This will lead to our algorithms ﬁnding the same
number, or fewer misconﬁguration candidates in the fu-
ture, if no changes are made to the input matrices. This
supports our claim of internal consistency in Section 3.2.
OBJECT CLUSTERING
Input: S {summary statements}
Output: OAM {accessibility misconﬁgurations [users, objects]},
OSM {security misconﬁgurations [users, objects]}
1: OAM = φ ; OSM = φ
2: for all pairs of summary statements in S, [U 1, O1] & [U2, O2]
|O2|
|O1| < 0.5 then
|U1−U2|
|U2−U1|
do
3:
if
if U1 − U2 6= φ then
|U1| < 0.5 and
|U1| < 0.5 and
OAM = OAM S{[U1 − U2, O2]}
OSM = OSM S{[U2 − U1, O2]}
end if
if U2 − U1 6= φ then
4:
5: