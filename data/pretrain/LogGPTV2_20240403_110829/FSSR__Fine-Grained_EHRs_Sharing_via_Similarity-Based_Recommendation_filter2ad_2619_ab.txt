from
, ..., gan
(g, gs, ga, ga2
non-
negligible advantage ε, where Y is randomly selected from
GT .
to
, e(gan+1
, gs))
, Y ) with
it
(PPT)
, gan+2
, gan+2
, ..., gan
, gan+2
, ..., ga2n
The
(n-DBDH)
k∈K φρ(k)uk = α.
Decisional
), where
and a, s
are
Assumption.
is difﬁcult
adversary
, ..., ga2n
, ..., ga2n
∑
[32]
a
2327-4662 (c) 2021 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:21:45 UTC from IEEE Xplore.  Restrictions apply. 
This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JIOT.2021.3063846, IEEE Internet of
Things Journal
IEEE, VOL., NO.,
4
Fig. 2: The system overview
4 FRAMEWORK AND SECURITY DEFINITIONS
4.1 System overview
Fig. 1 pictorially describes the system overview of the
proposed LABSE scheme. Speciﬁcally, LABSE involves four
types of entities, including the trusted authority (TA), the
cloud service provider (CSP), the data owner (DO) and
the data user (DU). TA is a fully trusted entity, which
ﬁrst runs the Setup algorithm to create the system, and
distributes the secret key for DUs by executing the SKGen
algorithm according to the attributes in their speciﬁed access
structure. The TA then executes the OSKGen algorithm
to generate the outsourcing key for the DU. The DO is
responsible for generating the ciphertext of the data to be
shared, then it uploads the ciphertext to the CSP. Notice
that the CSP is a semi-trusted entity, that is, it can honestly
execute these algorithms, but is curious to the sensitive
privacy information about the stored data. When a DU
requests for the data, it ﬁrst runs the TrapGen and TKGen
algorithms to generate the trapdoor and transformation key,
then forwards them to the CSP. The CSP searches for the
DU’s desired ciphertext by using the trapdoor, and checks
whether the attribute set of the ciphertext satisﬁes the DU’s
LSSS access structure. If so, it runs the Transform algorithm
to generate the transform ciphertext for the DU, and outputs
⊥ for otherwise. Finally, the DU recovers the data plaintext
by performing the Decrypt algorithm.
4.2 Algorithm deﬁnition
The proposed LABSE scheme consists of ten interactive
polynomial time algorithms among the above entities, they
are deﬁned as follows.
Setup(1ζ) → (M P K, M SK): This algorithm takes as
input the security parameter ζ, then outputs the public
parameter M P K and the master secret key M SK. It is
executed by the TA.
SKGen(M P K, M SK, (M, ρ)) → (SK(M,ρ)): This al-
gorithm takes as input the public parameter M P K, the
master secret key M SK and the speciﬁed LSSS access
structure (M, ρ), it ﬁnally outputs the secret key SK(M,ρ).
This algorithm is executed by the TA.
OffEnc(M P K) → (CT
′
′
′
′
. It is executed by the DO.
OnEnc(M P K, M sg, W, CT
): This algorithm takes as input
the public parameter M P K, and outputs the intermediate
ciphertext CT
, w) → (CT ): This algo-
rithm takes as input the public parameter M P K, the data
M sg, the intermediate ciphertext CT
, the attribute set W
and the keyword w, it then outputs the ciphertext CT . This
algorithm is executed by the DO.
OSKGen(M P K, M SK, SK(M,ρ)) → (OSK(M,ρ)
, U SK): This algorithm takes as input the public parameter
M P K, the master secret key M SK, and the secret key
SK(M,ρ), it outputs the outsourcing key OSK(M,ρ) and the
user secret key U SK. This algorithm is executed by the TA.
TrapGen(M P K, q, OSK(M,ρ)) → (T D): This algorith-
m takes as input the public parameter M P K, the query
q and the outsourcing key OSK(M,ρ), then outputs the
trapdoor T D. It is executed by the DU.
TKGen(OSK(M,ρ)) → (T K): It takes the outsourcing
key OSK(M,ρ) as input, and outputs the transformation key
T K. This algorithm is executed by the DU.
Search(M P K, CT, T D) → (CT ): It takes the public
parameter M P K, the ciphertext CT and the trapdoor T D
as input, and outputs the desired ciphertext CT . It is run by
the CSP.
Transform(CT, T K) → (K/ ⊥): Input the ciphertext
CT and the transformation key T K, this algorithm is exe-
cuted by the CSP, and outputs the transformed ciphertext K
or ⊥.
Decrypt(K, U SK) → (M sg): This algorithm takes as
input the transformed ciphertext K and the user secret key
U SK, then outputs the data plaintext M sg. It is performed
by the DU.
4.3 Security model
We formalize deﬁne the security model of the LABSE
scheme under the assumption of the adversary with speci-
ﬁed ability. Speciﬁcally, the indistinguishability against the
selectively chosen plaintext attack and the selectively cho-
sen keyword attack (IND-CPA-CKA) [40] is deﬁned as the
interactive game GameIND-CPA-CKA between the probabilistic
polynomial time (PPT) adversary A and challenger C as
follows.
2327-4662 (c) 2021 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:21:45 UTC from IEEE Xplore.  Restrictions apply. 
This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JIOT.2021.3063846, IEEE Internet of
Things Journal
IEEE, VOL., NO.,
W
challenger C.
Initialize. The adversary A assigns a target attribute set
∗ ⊆ U, where U is the attribute universe generated by the
Setup. The challenger C runs the Setup algorithm to
generate the public parameter M P K and the master secret
key M SK. Then, C forwards the public parameter M P K
to the adversary A, and keeps secret the master secret key
M SK.
Phase 1. On receiving the query from the adversary A,
the challenger C responds A’s query in the following way.
1). Secret key query. The adversary A issues the query on
the secret key about a LSSS structure (M, ρ), the challenger
C then runs the SKGen algorithm, and returns the secret
key SK(M,ρ) to A.
2). Outsourcing key query. The adversary A issues the
query on the outsourcing key about a LSSS structure (M, ρ),
the challenger C then runs the OSKGen algorithm, and
returns the outsourcing key OSK(M,ρ) and the user secret
key U SK to A.
3). Trapdoor query. The adversary A issues the query on
the trapdoor about a query q, the challenger C then runs the
TrapGen algorithm, and returns the trapdoor T D to A.
Challenge. The adversary A selects two equal-length
data M sg0, M sg1 and two keywords w0, w1, and forwards
them to the challenger C. The challenger ﬂips b ∈ [0, 1] and
c ∈ [0, 1], runs the OffEnc and OnEnc algorithm to generate
the ciphertext CT of M sgb and keyword wc, then returns
CT to the adversary A. Notice that the challenge ciphertext
CT is valid on the premise of the adversary A did not query
on the keywords q = w0 or q = w1 with the LSSS signing
predicate (M, ρ) which satisﬁes the attribute set W
Phase 2. The adversary A issues the queries the same
Guess. The adversary A returns the guess b
′ ∈ [0, 1]
′ ∈ [0, 1] of the value b and c, it wins the game
as Phase 1.
∗
.
and c
′
GameIND-CPA-CKA only if b
′
= b and c
= c.
Deﬁnition 1: The LABSE scheme satisﬁes the indistinguisha-
bility under the selectively chosen plaintext attack and the selec-
tively chosen keyword attack, if there is no PPT adversary who
can win the above GameIND-CPA-CKA game with a non-negligible
advantage.
4.4 Security requirements
Keyword secrecy. The LABSE scheme should be designed
to prevent the DU from extracting any information about the
keyword of the ciphertext before decrypting it. The keyword
secrecy also requires the semi-trusted CSP cannot reveal the
keyword from the trapdoor and its stored ciphertext.
Collusion attack resistance. Collusion attack indicates that
multiple users in an ABE scheme may combine their decryp-
tion key to recover the data, even if each of them cannot
decrypt it alone.
Trapdoor privacy and unlinkability [43]. The trapdoor
privacy indicates that our scheme should be designed to
prevent the CSP from extracting any information about the
queried keyword. Besides, the trapdoor unlinkability means
that the trapdoors of different DUs for the same query
are varied, and we require the CSP cannot distinguish the
relationship between two trapdoors.
5
5 THE CONCRETE CONSTRUCTION OF LABSE
We ﬁrst describe the notations in the LABSE scheme
as illustrated in TABLE 1 before elaborating its concrete
construction.
TABLE 1: Notations and descriptions
Notations
Descriptions
M P K; M SK; U SK public parameter, master secret key, user secret key
SK(M;(cid:26))
OSK(M;(cid:26))
T D; T K
′
secret key of the LSSS access structure (M; (cid:26))
outsourcing key of the LSSS access structure (M; (cid:26))
trapdoor, transformation key
CT
; CT
intermediate ciphertext, ciphertext
K; M sg
w; q
U; W
transformed ciphertext, data to be encrypted
keyword, query
attribute universe, attribute set
(M; (cid:26)); M; (cid:26)
LSSS access structure, LSSS matrix, labeling function
G; GT
g; e
H
multiplicative groups with prime order p
a generator of the group G, bilinear map
a collision-resistant hash function
Setup: On input the security parameter ζ, this algorith-
m performs the following steps.
′
= e(g, g)αβ.
1). Let G, GT be two multiplicative groups with prime
order p, and g is a generator of group G. On that basis,
here we deﬁne a bilinear map e : G × G → GT .
2). Randomly select t0, α, β ∈ Zp, and compute Z =
e(g, g)α, Z
3). Deﬁne an attribute universe U = {a1, ..., an} for
simplicity, and for each attribute ai ∈ U, randomly pick
ti ∈ G .
4). Select a collision-resistant hash function H :
{0, 1}∗ → G.
This algorithm outputs the public parameter M P K =
, H, t0,{ti}i∈[1,n]), and keeps secret the
′
(G, GT , g, e, p, Z, Z
master secret key M SK = (α, β).
SKGen: On input the public parameter M P K, the mas-
ter secret key M SK and the LSSS access structure (M, ρ),
where M is a l × m matrix , and ρ is a labeling function that
associates the k-th row ⃗Mk of the matrix M to an attribute
aρ(k), then this algorithm generates the secret key in the
following steps.
1). Generate a vector ⃗v = (α, v1, ..., vm) such that ⃗v ·
(1, 0, ..., 0) = α, then compute λρ(k) = ⃗Mk · ⃗v.
∈ Zp
2). For each k ∈ [1, l], it randomly picks rk, r
then computes
′
k
}ai∈U\{ρ(k)}
D1,k = gλ(cid:26)(k) (t0tρ(k))rk , D2,k = grk ,
{D3,k,i = trk
D4,k = gλ(cid:26)(k) (t0tρ(k))r
{D6,k,i = tr
′
k , D5,k = gr
}ai∈U\{ρ(k)}
′
k ,
′
k
i
i
(1)
It outputs SK(M,ρ) = ((M, ρ), D1,k, D2,k,{D3,k,i}
ai∈U\{ρ(k)}, D4,k, D5,k,{D6,k,i}ai∈U\{ρ(k)})k∈[1,l] as the se-
cret key.
OffEnc: On input the public parameter M P K, this
algorithm randomly selects s ∈ Zp, and computes C
′
1 = Z s,
2327-4662 (c) 2021 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:21:45 UTC from IEEE Xplore.  Restrictions apply. 
This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JIOT.2021.3063846, IEEE Internet of
IEEE, VOL., NO.,
Things Journal
′
2 = gs and C
C
intermediate ciphertext CT
′
4 = Z
′
′s. This algorithm ﬁnally outputs the
= (C
′
1, C
′
2, C
′
4).
′
OnEnc: This algorithm takes as input the intermediate
ciphertext CT
, the public parameter M P K as input, a
data M sg, the attribute set W and the keyword w, then
it computes
∑
2). Construct a set of constant {πk} ∈ Zp such that
k∈Ω λρ(k) · πk = (1, 0, ..., 0).
∏
3). Compute
∏
′
2,k)πk )
∏
6
e(C3,
′
k∈Ω(D
1,k
k∈Ω(D
ai∈W\{ρ(k)} D
′
3,k,i)πk )
e(C2,
K =
(5)
ai∈W D
′
5,k
∏
′
k
ai∈U\{ρ(k)} D
′