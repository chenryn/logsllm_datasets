① 0 号参数槽存储的是主函数 main()的唯一参数； 
② 1 号参数槽存储的是循环控制变量 limit，其值固定为 20；  
③ 2 号参数槽存储的是变量 f。 
④ 3 号参数槽存储的是变量 g。 
⑤ 4 号参数槽存储的是变量 i。 
可见，Java 编译器会按照源代码声明变量的顺序，在 LVA 中依次分配各变量的存储空间。 
当直接向第 0、1、2、3 号参数槽存储数据时，可使用专用的 istore_n 指令。然而当直接向 4 及更高编
号的参数槽存储数据时，就没有这样便利的专用操作指令了，需要使用带有参数的 istore 指令。如偏移量
为 8 的指令所示，后一种 istore 指令将操作数当作参数槽的编号进行存储操作。其实 iload 指令也是如此。
本文就不再解释偏移量为 10 的 iload 指令了。  
但是，像循环迭代上限 limit 这样的常量也占用了参数槽，难道它还经常更新数值吗？JVM JIT 编译器
能够充分优化这类事务，我们不必专们进行人工干预。 
54.12  switch()语句 
下列范例证明，switch()语句是由 tableswitch 指令实现的。 
        public static void f(int a) 
        { 
                switch (a) 
                { 
                case 0: System.out.println("zero"); break; 
                case 1: System.out.println("one\n"); break; 
                case 2: System.out.println("two\n"); break; 
                case 3: System.out.println("three\n"); break; 
                case 4: System.out.println("four\n"); break; 
                default: System.out.println("something unknown\n"); break; 
                }; 
        } 
上述程序的字节码与源程序几乎是逐一对应： 
  public static void f(int); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=2, locals=1, args_size=1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 
599 
         0: iload_0 
         1: tableswitch  
{ // 0 to 4 
                       0: 36 
                       1: 47 
                       2: 58 
                       3: 69 
                       4: 80 
                 default: 91 
            } 
        36: getstatic      #2  
// Field java/lang/System.out:Ljava/io/PrintStream; 
        39: ldc             #3  
// String zero 
        41: invokevirtual  #4  
// Method java/io/PrintStream.println:(Ljava/lang/String;)V 
        44: goto            99 
        47: getstatic      #2  
// Field java/lang/System.out:Ljava/io/PrintStream; 
        50: ldc             #5  
// String one\n 
        52: invokevirtual #4  
// Method java/io/PrintStream.println:(Ljava/lang /String;)V 
        55: goto            99 
        58: getstatic      #2  
// Field java/lang/System.out:Ljava/io/PrintStream; 
        61: ldc             #6  
// String two\n 
        63: invokevirtual #4  
// Method java/io/PrintStream.println:(Ljava/lang/String;)V 
        66: goto  
     99 
        69: getstatic      #2  
// Field java/lang/System.out:Ljava/io/PrintStream; 
        72: ldc             #7  
// String three\n 
        74: invokevirtual #4  
// Method java/io/PrintStream.println:(Ljava/lang/String;)V 
        77: goto  
     99 
        80: getstatic      #2  
// Field java/lang/System.out:Ljava/io/PrintStream; 
        83: ldc             #8  
// String four\n 
        85: invokevirtual #4  
// Method java/io/PrintStream.println:(Ljava/lang/String;)V 
        88: goto  
     99 
        91: getstatic      #2  
// Field java/lang/System.out:Ljava/io/PrintStream; 
        94: ldc             #9  
// String something unknown\n 
        96: invokevirtual #4  
// Method java/io/PrintStream.println:(Ljava/lang/String;)V 
        99: return 
如果输入值是 0，则显示为 zero；如果输入值是 1，则显示 one；如果输入值是 2，则显示 two；如果
输入值是 3，则显示 three；如果输入值是 4，则显示 four；如果不是以上的 5 种情况，则显示字符串 something 
unknown。 
54.13  数组 
54.13.1  简单的例子 
我们首先创建一个含有 10 个元素的整数型数组，然后逐次填入 0～9： 
程序如下： 
        public static void main(String[] args) 
        { 
                int a[]=new int[10]; 
                for (int i=0; i<10; i++) 
                        a[i]=i; 
                dump (a); 
        } 
  public static void main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=3, locals=3, args_size=1 
         0: bipush  
     10 
         2: newarray       int 
         4: astore_1 
         5: iconst_0 
         6: istore_2 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
600 
逆向工程权威指南（下册） 
         7: iload_2 
         8: bipush  
     10 
        10: if_icmpge      23 
        13: aload_1 
        14: iload_2 
        15: iload_2 
        16: iastore 
        17: iinc  
     2, 1 
        20: goto  
     7 
        23: aload_1 
        24: invokestatic  #4  
// Method dump:([I]V 
        27: return 
指令 newarray 创建一个可容纳 10 个整型（int）元素的数组。这个数组的大小是由 bipush 设定的，它
会被保存在栈顶 TOS；而数组的类型则是由 newarray 指令的操作数定义。我们看到 newarrary 的操作数是
int，因此它会创建整型数组。执行完指令 newarray 后，系统会给新建的数组分配一个引用指针（reference），
并且把这个引用指针存储到栈顶 TOS。其后的 astore_1 指令吧引用指针存储到 LVA 的第一个参数槽。主函
数 main()的第二部分是一个循环语句。这个循环执行的指令将变量 i 依次保存到相应的数值单元中。指令
aload_1 获取数组的引用指针，并且把它保存在栈中。而指令 iastore 的功能则把栈里的整型数据保存在数
组中，与此同时它会通过栈顶 TOS 获取数组的引用指针。而主函数 main()的第三部分的功能是执行函数
dump()。在偏移量为 23 的地方，我们可以看到 aload_1 指令。它负责制备 dump()的唯一参数。 
下面我们来继续看看函数 dump()的功能： 
        public static void dump(int a[]) 
        { 
                for (int i=0; i<a.length; i++) 
                        System.out.println(a[i]); 
        } 
该函数执行的功能是循环显示目标数组中的值。 
程序如下所示。 
  public static void dump(int[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=3, locals=2, args_size=1 
         0: iconst_0 
         1: istore_1 
         2: iload_1 
         3: aload_0 
         4: arraylength 
         5: if_icmpge  
23 
         8: getstatic  
#2   
// Field java/lang/System.out:Ljava/io/PrintStream; 
        11: aload_0 
        12: iload_1 
        13: iaload 
        14: invokevirtual #3   
// Method java/io/PrintStream.println:(I)V 
        17: iinc  
1, 1 
        20: goto  
2 
        23: return 
函数会从第 0 号参数槽获取数组的引用指针/reference。而源代码中的 a.length 表达式被编译器转换成了
arraylength（数组长度）指令：它通过引用指针获取数组的信息，并把数组长度保存在栈顶 TOS 中。在偏移
量为 13 的指令 iaload 则负责加载既定的数组元素。在数组类型确定的情况下，对某个数组元素寻址需要知道
数组的首地址和即定元素的索引编号。前者由偏移量为 11 的指令 aload_0 完成；后者则通过偏移量为 12 的
指令 iload_1 实现。 
很多人会想当然的认为，在那些带有字母前缀 a 的指令里，a 大概是数组 array 的缩写。其实这种猜测
并不确切。此类指令是操作数据对象引用指针的指令。数组和字符串只是对象型数据的一种特例罢了。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 
601 
54.13.2  数组元素求和 
我们来看看另外一个例子，其功能是将一个输入的数组的各项数值相加求和。 
public class ArraySum 
{ 
        public static int f (int[] a) 
        { 
                int sum=0; 
                for (int i=0; i<a.length; i++) 
                        sum=sum+a[i]; 
                return sum; 
        } 
}   
  public static int f(int[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=3, locals=3, args_size=1 
         0: iconst_0 
         1: istore_1 
         2: iconst_0 
         3: istore_2 
         4: iload_2 
         5: aload_0 
         6: arraylength 
         7: if_icmpge  
22 
        10: iload_1 
        11: aload_0 
        12: iload_2 
        13: iaload 
        14: iadd 
        15: istore_1 
        16: iinc  
2, 1 
        19: goto  
4 
        22: iload_1 
        23: ireturn 
在这个成员函数的存储空间里，外来数组的引用指针存储于 LVA 的 0 号存储槽里，而局部变量 sum 则存
储在 LVA 的 1 号存储槽里。 
54.13.3  输入变量为数组的主函数 main() 
下面展示的是一个单参数的 main()函数。这个外来参数是一个字符串。 
public class UseArgument 
{ 
        public static void main(String[] args) 
        { 
                System.out.print("Hi, "); 
                System.out.print(args[1]); 
                System.out.println(". How are you?"); 
        } 
}  
第 0 个参数是程序名（就像在 C/C++等中的一样），因此程序员指定的第一个参数存放于第一个参数槽。 
  public static void main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=3, locals=1, args_size=1 
         0: getstatic  
#2   
// Field java/lang/System.out:Ljava/io/PrintStream; 
         3: ldc   
#3   
// String Hi, 
         5: invokevirtual  #4   
// Method java/io/PrintStream.print:(Ljava/lang/String;)V 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
602 
逆向工程权威指南（下册） 
         8: getstatic  
#2   
// Field java/lang/System.out:Ljava/io/PrintStream; 
        11: aload_0 
        12: iconst_1 
        13: aaload 
        14: invokevirtual #4   
// Method java/io/PrintStream.print:(Ljava/lang/String;)V 
        17: getstatic  
#2   
// Field java/lang/System.out:Ljava/io/PrintStream; 
        20: ldc   
#5   
// String . How are you? 
        22: invokevirtual  #6   
// Method java/io/PrintStream.println:(Ljava/lang/String;)V 
        25: return 
偏移量为 11 的指令 aload_0 加载了 LVA（局部变量数组）的第 0 个存储单元。而函数 main()的唯一一
个指定参数则通过偏移量为 12 和 13 的 iconst_1 和 aaload 指令的作用是获取数组的第一个元素的引用指针
（也就是索引号为 0 的元素首地址）。偏移量为 14 的指令通过 TOS 向被调用方函数传递字符串的引用指针，
这个引用指针就是此后 println 方法的输入变量。 
54.13.4  预设初始值的数组 
class Month 
{ 
        public static String[] months = 
        { 
                "January", 
                "February", 
                "March", 
                "April", 
                "May", 
                "June", 
                "July", 
                "August", 
                "September", 
                "October", 
                "November", 
                "December" 
        }; 
        public String get_month (int i) 
        { 
                return months[i]; 
        }; 
}  
我们在这里列举一个有预设值的数组，它的元素是字符串型的，其值是从一月到十二月的英文单词，分别
是 January、February、March、April、May、June、July、August、September、October、November 和 December。 
函数 get_month 的功能比较简单，它是输入一个整型的数，从而能在数组的对应位置输出相应月份的
字符串。 
  public java.lang.String get_month(int); 
    flags: ACC_PUBLIC 
    Code: 
      stack=2, locals=2, args_size=2 
         0: getstatic  
#2   
// Field months:[Ljava/lang/String; 
         3: iload_1 
         4: aaload 
         5: areturn 
aaload 指令从栈里 POP 出数组的引用指针和元素的索引编号，并将指定元素推送入栈。在 Java 的概念
里，字符串是对象型数据。在操作对象型数据（确切的说是引用指针）时应当使用带有 a 前缀的指令。同
理，后面的 areturn 指令从侧面印证了返回指是字符串对象的引用指针。 
另外一个问题是：数组 months[]是如何被初始化的呢？也就是说，这个数组的初始值 1 到 12 月份的英
文字符串是如何被相应地赋值到数组的相关位置的？ 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 
603 
  static {}; 
    flags: ACC_STATIC 
    Code: 
      stack=4, locals=0, args_size=0 
         0: bipush  