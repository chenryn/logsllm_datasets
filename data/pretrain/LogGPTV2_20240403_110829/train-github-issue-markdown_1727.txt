在 Go 语言中，定义函数类型时出现了如下代码：

```go
package p

type F1 func(i int) int
type F2 func(i, j int) int
type F3 func(i int) (int, int)
```

使用 `6g` 编译器编译这段代码时，会针对 `F2` 和 `F3` 的定义抛出 "duplicate argument i" 的错误信息，而 `F1` 的定义则不会引发任何错误。我认为，在这种情况下，要么所有这些情况都应该产生错误，要么都不应该。

根据我的理解，Go 语言规范并未对函数类型的参数命名做出明确限制，这意味着参数名仅作为注释存在，并不参与实际的语义检查。因此，按照这一逻辑，`F2` 和 `F3` 不应该因为重复的参数名称 `i` 而报错；正确的做法是修改编译器的行为，使得对于函数类型定义中的参数名冲突不再视为错误。

然而，另一种可接受的方法是更新语言规范，要求即使是在函数类型声明中也禁止出现相同的参数名，这样一来，`F1` 也将被视为非法。当然，在实际的函数声明（而非类型声明）中，所有三种情况确实都会因参数重名而触发编译错误。

为了保持一致性并提高代码的可读性，建议选择上述两种解决方案之一进行实现。