title:SECRET: On the Feasibility of a Secure, Efficient, and Collaborative
Real-Time Web Editor
author:Dennis Felsch and
Christian Mainka and
Vladislav Mladenov and
J&quot;org Schwenk
SECRET: On the Feasibility of a Secure, Efﬁcient, and
Collaborative Real-Time Web Editor
Dennis Felsch
Horst Görtz Institute
for IT-Security, Chair for
Network and Data Security
Ruhr-University Bochum
PI:EMAIL
Christian Mainka
Horst Görtz Institute
for IT-Security, Chair for
Network and Data Security
Ruhr-University Bochum
PI:EMAIL
Vladislav Mladenov
Horst Görtz Institute
for IT-Security, Chair for
Network and Data Security
Ruhr-University Bochum
PI:EMAIL
Jörg Schwenk
Horst Görtz Institute
for IT-Security, Chair for
Network and Data Security
Ruhr-University Bochum
PI:EMAIL
ABSTRACT
Real-time editing tools like Google Docs, Microsoft Oﬃce
Online, or Etherpad have changed the way of collabora-
tion. Many of these tools are based on Operational Trans-
forms (OT), which guarantee that the views of diﬀerent
clients onto a document remain consistent over time. Usu-
ally, documents and operations are exposed to the server in
plaintext – and thus to administrators, governments, and
potentially cyber criminals. Therefore, it is highly desirable
to work collaboratively on encrypted documents.
Previous implementations do not unleash the full potential
of this idea: They either require large storage, network, and
computation overhead, are not real-time collaborative, or do
not take the structure of the document into account. The
latter simpliﬁes the approach since only OT algorithms for
byte sequences are required, but the resulting ciphertexts are
almost four times the size of the corresponding plaintexts.
We present SECRET, the ﬁrst secure, eﬃcient, and col-
laborative real-time editor. In contrast to all previous works,
SECRET is the ﬁrst tool that (1.) allows the encryption of
whole documents or arbitrary sub-parts thereof, (2.) uses a
novel combination of tree-based OT with a structure pre-
serving encryption, and (3.) requires only a modern browser
without any extra software installation or browser extension.
We evaluate our implementation and show that its en-
cryption overhead is three times smaller in comparison to all
previous approaches. SECRET can even be used by multi-
ple users in a low-bandwidth scenario. The source code of
SECRET is published on GitHub as an open-source project:
https://github.com/RUB-NDS/SECRET/
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02 - 06, 2017, Abu Dhabi, United Arab Emirates
c(cid:13) 2017 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3052982
Keywords
Collaborative Editing; XML Encryption; JSON; Operational
Transforms; Structure Preserving Encryption
1.
INTRODUCTION
Services like Google Docs, Microsoft Oﬃce Online, or
Etherpad use Operational Transforms (OT) [11] as funda-
mental technology to resolve editing conﬂicts by many con-
current users automatically. They are thus able to cope
with arbitrary simultaneous and conﬂicting edit operations.
These services have simpliﬁed our working life, and will fur-
ther gain in importance.
However, they have a signiﬁcant drawback: All documents
are stored on a cloud server as plaintext, thus anyone with
access to the server (system administrators, hackers, gov-
ernments, etc.) may read and modify the documents.
In
their seminal paper, Feldman et al. [12] showed a direct way
how to apply OT to encrypted documents: Their proposed
system encrypts each edit operation separately on the client
and sends them to a server that saves and distributes these
edits to all other clients. Each client then has to reconstruct
the document from these encrypted operations. Other pro-
posals (cf. e. g. [17]) encrypt each plaintext byte separately
on a client and use byte stream OT on the ciphertext blocks
to synchronize them with a server. The general question
if encrypted collaborative editing is possible was answered
in the aﬃrmative, and later improved by several publica-
tions [1, 8, 9, 27, 37].
Both approaches are generic, but also come with a generic
penalty: The data the server has to store and transmit is
signiﬁcantly increased compared to the plaintext. Those pa-
pers that evaluated this overhead require an expansion factor
of at least 3.75. In addition to data expansion, all previous
approaches do not ﬁt into the Software-as-a-Service (SaaS)
model used by Google Docs and others, because they require
additional software like Java applets or browser add-ons to
execute cryptographic operations.
Another problem with previous approaches [1, 8, 9, 12,
17, 27, 37] is that if a new user has been granted edit rights
on a document, he also would get history information. This
835can include sensitive data that was accidentally written (or
pasted) by other users, e. g., comments or to-do annotations.
To prevent this kind of information leakage, Micciancio [26]
introduced the concept of obliviousness. While oblivious-
ness can easily be achieved by creating a fresh copy of the
document, this requires to re-encrypt all data and is ineﬃ-
cient for larger documents. Thus, a more scientiﬁc goal is
to design a system oﬀering this property directly.
In this paper, we explore the following questions with re-
spect to a real-time and encrypted collaborative web editor:
(cid:73) Can we eliminate the generic data expansion?
(cid:73) Can we create a SaaS relying on a browser only?
(cid:73) Can we achieve obliviousness?
To answer these questions, we created SECRET, a Secure,
Eﬃcient, and Collaborative Real-Time Editor. SECRET
uses a novel combination of structure-preserving encryption
and tree-based OT [10] to enable overcome the generic data
expansion and to achieve obliviousness. SECRET only re-
quires a browser oﬀering state-of-the-art web technologies
(e. g., WebSockets [13] and WebCrypto API [34]), thus be-
ing the ﬁrst to eliminate all external software dependencies.
The design and implementation of SECRET is more than
just combining existing technologies. We solved several chal-
lenges that lead to new insights of underlying concepts.
(1.) The W3C Web Cryptography API (WebCrypto API)
enables cryptographic operations (symmetric / asym-
metric encryption, digital signatures / MACs, genera-
tion of ephemeral keys), but it does not allow to handle
long-lived, persistent keys. We require this in our ap-
proach.
(2.) We built our system upon ShareJS, a JSON-based col-
laborative cleartext web editing system. Since JSON
Encryption does not support structure preserving en-
cryption of document parts, we had to build an adap-
tation layer which maps XML and XML Encryption to
JSON. This was challenging because of subtle diﬀer-
ences in the document tree structures of both concepts.
(3.) Every edit in the plaintext (e. g., of an encrypted doc-
ument), even if only a single byte is modiﬁed, results
in a completely diﬀerent ciphertext block, which has
to be synchronized among all clients. In order to make
real-time editing applicable and performant, we had to
ﬁnd an eﬃcient (i. e. not too often, but often enough
to avoid too many editing conﬂicts) way to trigger an
encryption and synchronization event from changes in
the DOM of the cleartext document in the browser.
Contributions.
(cid:73) We describe a novel approach to combine structure-
preserving encryption with tree-based OT, surpassing
generic limitations of previous approaches (Section 4).
(cid:73) We provide a comprehensive list of existing approaches,
comparing and discussing their features and limita-
tions (Section 5).
(cid:73) We deﬁne requirements necessary for the creation of a
secure, collaborative, real-time web editor and discuss
challenges and solutions (Sections 6 and 7).
(cid:73) We present SECRET, the ﬁrst working prototype of
a fully collaborative editing tool on encrypted doc-
uments (Section 8).
In contrast to all previous ap-
proaches, SECRET is independent of external software
and achieves obliviousness.
(cid:73) We design and implement two complementary key man-
agement approaches:
(1.) using a trusted keyserver
and (2.) without relying on a trusted party by using
the password-to-key functionality of the WebCrypto
API (Section 8).
(cid:73) We show the feasibility of SECRET by performing
extensive evaluations and reveal that SECRET’s en-
cryption overhead is signiﬁcantly smaller (92%) com-
pared to all previous approaches ([8, with 382%], [17,
with 275%]). We additionally compare SECRET with
Google Docs and show that the overhead caused by
the encryption is acceptable (Section 10).
The source code of SECRET is published on GitHub:
https://github.com/RUB-NDS/SECRET/
2. FOUNDATIONS
Collaboration is appreciated in modern IT systems, and
through appropriate tools the eﬃciency of such collabora-
tion can be greatly enhanced. A widely adopted solution to
coordinate software development projects are Version Con-
trol Systems (VCSs). Examples for VCSs are Subversion
(SVN), Git, Mercurial, etc. The basic idea of a VCS is to
record changes of a project’s state. A set of changes is called
a revision.
It is common that a VCS allows reverting to
older revisions or viewing the diﬀerences between them. In
a VCS, changes are not created in real-time, but have to be
triggered by a user explicitly, which is comparable to using
a save-button. If conﬂicts between a user’s local copy and
the VCS arise, these usually have to be resolved manually.
Transferring this concept to create a real-time collabora-
tion tool does not work for multiple reasons: The feature
of a VCS to revert to an old revision gives a new user ac-
cess to every intermediate state the document was in since
it was created, which is unacceptable if the history of the
document contains conﬁdential information (e. g., trade se-
crets). Furthermore, changes simultaneously submitted to
the server lead to merging problems. For instance, if the
server created a new revision while a client is merging an
older revision with its current local copy, the server would
reject the merge and force the client to repeat the merge
with the current revision. Real-time collaboration therefore
requires a concept allowing the merge even if the views of the
clients on the document diverge. In other words, a technique
is required that can tolerate messages arriving in wrong or-
der or messages getting lost.
It has to guarantee that all
clients end up in a consistent state.
2.1 Operational Transforms (OT)
Operational Transforms (OT) is a technique to automati-
cally maintain a consistent view on a document even if many
users are editing this document simultaneously. The idea
behind OT is simple: Each user changes the document by
performing a sequence of basic edit operations. If the docu-
ment is modeled as a large sequence of bytes, each operation
can be modeled as follows:
(cid:73) INS(sub, r): insert substring sub at position r.
(cid:73) DEL(r, s): delete all bytes from position r to s.
These operations are sent to a server that informs other
users about the changes so that their local copies can be up-
836dated. However, simply forwarding the received basic oper-
ations will not work: If another user simultaneously inserted
or deleted text before the actual position r of an operation,
then diﬀerent bytes will be deleted or sub will be inserted
at a diﬀerent position than intended.
Therefore, the task of the server is to transform the basic
operations for each user if necessary, and to forward these
transformed operations. Consider the following simple ex-
ample originally taken from Nichols et al. [28]:
Alice and Bob are editing the same string: ABCDE. Al-
ice executes DEL(4,4) and locally gets ABCE. At the same
time, Bob applies DEL(2,2) to get ACDE. If these operations
are simply exchanged, Alice executes DEL(2,2) to get ACE,
while Bob applies DEL(4,4) and gets ACD. An inconsistent
state appears. To avoid this problem, the server applies a
transformation T on the second operations and T will change
Bob’s second operation from DEL(4,4) to DEL(3,3). For a
detailed description of T, we refer to Nichols et al. [28].
If the document is modeled diﬀerently, then the operations
and the necessary transforms may be diﬀerent. Note that T
may also be computed on the client.
2.2 XML and JSON
The eXtensible Markup Language (XML) is a platform-
independent text format that deﬁnes rules to encode doc-
uments [6]. XML documents form a tree structure, start-
ing at the document root and consists of Elements with
an opening tag () and a matching closing tag ().
Elements are nested and can additionally contain text con-
tents (e. g., text) and attributes as key/value pairs
(e. g., ).
The JavaScript Object Notation (JSON) [5] is an open
standard that deﬁnes an alternative to XML. Like XML,
JSON is platform-independent and describes a tree struc-
ture. Basically, it can be used to describe the same data
structures as XML, but uses a shorter notation. JSON uses
curly brackets to declare objects and name/value pairs to
deﬁne data (e. g., {"x": "text"}). JSON can also be used
to describe tree like structures (e. g., {"x": 1, { "y": 2 }}).
2.3 Encryption
Collaborative editing requires fast symmetric encryption
and decryption. Cryptography implemented in pure Java-
Script has proven to be slow (see e. g. [8, 12]). As an eﬃcient
alternative, modern browsers oﬀer the Web Cryptography
API [34]. The WebCrypto API is a W3C recommendation
that describes a JavaScript Application Programming Inter-
face (API) for basic cryptographic operations in web appli-
cations. It oﬀers interfaces to generate keys, to encrypt and
decrypt as well as to sign, verify, and hash data. We imple-
ment SECRET by using the block cipher AES with a key
length of 128 bit in Galois Counter Mode (GCM).
An interesting aspect on the WebCrypto API is, that it
does not oﬀer a speciﬁc mechanism to store keys in the
browser persistently (cf. [34, sect. 5.2]). This means, that
the WebCrypto API does not oﬀer a real key management.
A key is technically a JavaScript object that is created when-
ever the API is used to generate or import a key. The key
material itself can be protected by setting the export prop-
erty to false. In this manner, the key can be used by its
object reference, but the key bytes cannot be exported.
3. FORMAL MODEL
We designed SECRET using the following formal model.
3.1 Computational Model
Let U = {U1, ..., Un} be the set of users of SECRET, and
let S = {S1, ..., Sp} be the set of storage servers. We deﬁne
a session of SECRET to be a tuple σj = (Mj, Si, kj), where
M ⊆ U , Si ∈ S and kj is a randomly chosen, symmetric
masterkey used with SECRET.
In each session σj, the set of users Mj use SECRET and
j and a partially en-
j), where t indicates the
kj to compute a plaintext document mt
crypted document ct
t-th snapshot of the documents.
j = Enckj (mt
Each plaintext document mt