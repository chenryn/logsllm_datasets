any decentralized blockchain-based smart contract system
must require fees of some kind to reimburse miners for per-
forming and verifying computation.
Let bal(W) denote the balance of an Ethereum wallet W.
Deﬁnition 1 (K-Gas Sustainability). A service with wallet
W and blockchain functions f1, . . . , fn is K-gas sustainable
If bal(W) ≥ K prior to execution
if the following holds.
of any fi and the service behaves honestly, then after each
execution of an fi initiated by W, bal(W) ≥ K.
Recall that a call made in Ethereum with insuﬃcient gas
will abort, but spend all provided gas. While Ethereum
trivially guarantees 0-gas sustainability, if a transaction is
submitted by a wallet with insuﬃcient funds, the wallet’s
balance will drop to 0. Therefore, to be K-gas sustainable
for K > 0, each blockchain call made by the service must re-
imburse gas expenditures. Moreover, the service must have
suﬃcient gas for each call or such reimbursement will be
reverted with the rest of the transaction.
The need for gas sustainability (with K > 0, as required
by TC) informs our protocol design in Section 6. We prove
that TC achieves this property in Section 7.
5.2 Hybrid TCB Minimization
TOﬀ: abstraction for oﬀ-chain TCB
Initialize(void):
(pk, sk) := Σ.KeyGen(1λ)
Output pk
Resume(req):
Assert OAuth(req)
resp := f (req)
σ := Σ.Sign(sk, (req, resp))
Output ((req, resp), σ)
TOn: abstraction for on-chain TCB
Request(req):
Send (req) to TOﬀ
Deliver(req, resp, σ):
Σ.Verify((req, resp), σ)
// can now use resp as trusted
Figure 4: Systems like TC have a hybrid TCB. Au-
thentication between two components can greatly
increase TCB complexity of implemented naively.
We propose techniques to eliminate the most ex-
pensive operations (highlighted in red).
In a system involving a smart contract interacting with
an oﬀ-chain trusted computing environment (e.g. SGX),
the TCB is a hybrid of two components with distinct prop-
erties. Computation in the smart contract is slow, costly,
and completely transparent, meaning it cannot rely on se-
crets. An SGX enclave is computationally powerful and exe-
cutes privately, but all external interaction—notably includ-
ing communication with the contract—must go through an
untrusted intermediary. While this hybrid TCB is powerful
and useful well beyond TC, it presents a challenge: estab-
lishing secure communication between the components while
minimizing the code in the TCB.
We deﬁne abstractions for both TCB components in Fig. 4.
To distinguish these abstractions from formal ideal function-
alities, we use T (for trusted component), rather than F. We
model the authentication of on-chain messages by an oracle
OAuth, which returns true if an input is a valid blockchain
transaction. Since Ethereum blocks are self-authenticated
using Merkle trees [14, 37], in principle we can realize OAuth
by including an Ethereum client in the TCB. Doing so dras-
tically increases the code footprint, however, as the core
Ethereum implementation is about 50k lines of C++. Simi-
larly, a smart contract could authenticate messages from an
SGX by checking attestations, but implementing this veri-
275ﬁcation in a smart contract would be error-prone and com-
putationally (and thus ﬁnancially) expensive.
Instead we propose two general techniques to avoid these
calls and thereby minimize code size in the TCB. The ﬁrst
applies to any hybrid system where one TCB component
is a blockchain contract. The second applies to any hybrid
system where the TCB components communicate only to
make and respond to requests.
Binding TOﬀ to WTC . Due to the speed and cost of compu-
tation in the on-chain TCB, we wish to avoid implementing
signature veriﬁcation (e.g. Intel’s EPID). There does exist
a precompiled Ethereum contract to verify ECDSA signa-
tures [37], but the operation requires a high gas cost. In-
stead, we describe here how to bind the identity of TOﬀ to an
Ethereum wallet, which allows TOn to simply check the mes-
sage sender, which is already veriﬁed as part of Ethereum’s
transaction protocol.
The key observation is that information can only be in-
serted into the Ethereum blockchain as a transaction from
a wallet. Thus, the only way the Relay can relay messages
from TOﬀ to TOn is through a wallet WTC . Since Ethereum
itself already veriﬁes signatures on transactions (i.e., users
interact with Ethereum through an authenticated channel),
we can piggyback veriﬁcation of TOﬀ signatures on top of the
existing transaction signature veriﬁcation mechanism. Sim-
ply put, the TOﬀ creates WTC with a fresh public key pkOﬀ
whose secret is known only to TOﬀ.
To make this idea work fully, the public key pkOﬀ must
be hardcoded into TOn. A client creating or relying on a
contract that uses TOn is responsible for ensuring that this
hardcoded pkOﬀ has an appropriate SGX attestation before
interacting with TOn. Letting Verify denote a veriﬁcation
algorithm for EPID signatures, Fig. 5 gives the protocol
for a client to check that TOn is backed by a valid TOﬀ in-
stance. (We omit the modeling here of IAS online revocation
checks.)
In summary, by assuming that relying clients have veriﬁed
an attestation of TOﬀ, we can assume that datagrams sent
from WTC are trusted to originate from TOﬀ. This eliminates
the need to do costly EPID signature veriﬁcation in TOn.
Additionally, SGX can seal pkOﬀ in non-volatile storage
while protecting integrity and conﬁdentiality [8,21], allowing
us to maintain the same binding through server restarts.
User: oﬄine veriﬁcation of SGX attestation
Inputs: pksgx, pkOﬀ, TOﬀ, σatt
Verify:
Assert TOﬀ is the expected enclave code
Assert Σsgx.Verify(pksgx, σatt, (TOﬀ, pkOﬀ))
Assert TOn is correct and parametrized with pkOﬀ
// now okay to rely on TOn
Figure 5: A client checks an SGX attestation of the
enclave’s code TOﬀ and public key pkOﬀ. The client
also checks that pkOﬀ is hardcoded into blockchain
contract TOn before using TOn.
Eliminating OAuth. To eliminate the need to call OAuth
from TOﬀ, we leverage the fact that all messages from TOﬀ
to TOn are responses to existing requests.
Instead of veri-
fying request parameters in TOﬀ, we can verify in TOn that
TOﬀ responded to the correct request. For each request, TOn
stores the parameters of that request. In each response, TOﬀ
includes the parameters it used to fulﬁll the request. TOn
can then check that the parameters in a response match the
stored parameters and, if not, and simply reject. Storing
parameters and checking equality are simple operations, so
this vastly simpler than calling OAuth inside TOﬀ.
This approach may appear to open new attacks (e.g., the
Relay can send bogus requests to which the TOﬀ respond).
As we prove in Section 7, however, all such attacks reduce
to DoS attacks from the network or the Relay—attacks to
which hybrid TCB systems are inherently susceptible and
which we do not aim to protect against in TC.
6. TOWN CRIER PROTOCOL
We now present some preliminaries followed by the TC
protocol. For simplicity, we assume a single instance of
progencl, although our architecture could scale up to mul-
tiple enclaves and even multiple hosts.
To ensure gas sustainability, we require that requesters
make gas payments up front as Ether. CTC then reimburses
the gas costs of TC. By having a trusted component perform
the reimbursement, we are also able to guarantee that a
malicious TC cannot steal an honest user’s money without
delivering valid data.
Notation. We use msg.mi to label messages corresponding
to those in Fig. 2. For payment, let $g denote gas and $f
to denote non-gas currency. In both cases $ is a type an-
notation and the letter denotes the numerical amount. For
simplicity, we assume that gas and currency adopt the same
units (allowing us to avoid explicit conversions). We use the
following identiﬁers to denote currency and gas amounts.
$f
$greq
$gdvr
$gcncl
$gclbk
Currency a requester deposits to refund Town
Crier’s gas expenditure to deliver a datagram
GASLIMIT when invoking Request, Deliver, or
Cancel, respectively
GASLIMIT for callback while executing Deliver, set
to the max value that can be reimbursed
$Gmin Gas required for Deliver excluding callback
$Gmax Maximum gas TC can provide to invoke Deliver
$Gcncl Gas needed to invoke Cancel
$G∅
Gas needed for Deliver on a canceled request
$Gmin, $Gmax, $Gcncl, and $G∅ are system constants, $f
is chosen by the requester (and may be malicious if the re-
quester is dishonest), and $gdvr is chosen by the TC Enclave
when calling Deliver. Though $greq and $gcncl are set by
the requester, a user-initiated transaction will abort if they
are too small, so we need not worry about the values.
Initialization. TC deposits at least $Gmax into the WTC .
The TC Contract CTC . The TC Contract accepts a data-
gram request with fee $f from CU , assigns it a unique id,
and records it. The Town Crier Relay R monitors requests
and forwards them to the Enclave. As we discussed in Sec-
tion 5.2, upon receipt of a response from WTC , CTC veriﬁes
that params(cid:48) = params to ensure validity. If the request is
valid, CTC forwards the resulting datagram data by calling
the callback speciﬁed in the initial request. To ensure that all
gas spent can be reimbursed, CTC sets $gclbk := $f − $Gmin
276for this sub-call. CTC is speciﬁed fully in Fig. 6. Here, Call
denotes a call to a contact entry point.
Town Crier blockchain contract CTC with fees
Initialize: Counter := 0
Program for Town Crier Relay R
Initialize:
Send init to Fsgx[progencl,R]
On recv (pkTC , σatt) from Fsgx[progencl,R]:
Publish (pkTC , σatt)
Request: On recv (params, callback, $f, $greq) from some
Handle(id, params):
, T )
Parse params as ( ,
Wait until clock() ≥ T.min
Send (resume, id, params) to Fsgx[progencl,R]
On recv ((id, params, data, $gdvr), σ) from
Fsgx[progencl,R]:
AuthSend (id, params, data, $gdvr) to CTC as WTC
// msg.m3
Main:
Loop Forever:
Wait for CTC to records request (id, params,
Fork a process of Handle(id, params)
,
, ):
End
Figure 7: The Town Crier Relay R.
Then progencl fetches the requested datagram and returns it
to R along with params, id, and a GASLIMIT $gdvr := $Gmax,
all digitally signed with skTC . Fig. 8 shows the protocol for
progencl.
Program for Town Crier Enclave (progencl)
Initialize (void)
// Subroutine call from Fsgx, which attests to
// progencl and pkTC . See Figure 3.
(pkTC , skTC ) := Σ.KeyGen(1λ)
Output pkTC
Resume (id, params)
Parse params as (url, spec, T ):
Assert clock() ≥ T.min
Contact url via HTTPS, obtaining cert
Verify cert is valid for time clock()
Obtain webpage w from url
Assert clock() ≤ T.max
Parse w to extract data with speciﬁcation spec
$gdvr := $Gmax
σ := Σ.Sign(skTC , (id, params, data, $gdvr))
Output ((id, params, data, $gdvr), σ)
CU :
Assert $Gmin ≤ $f ≤ $Gmax
id := Counter; Counter := Counter + 1
Store (id, params, callback, $f,CU )
// $f held by contract
// msg.m1
Deliver: On recv (id, params, data, $gdvr) from WTC :
(1) If isCanceled[id] and not isDelivered[id]
(2)
Set isDelivered[id]
Send $G∅ to WTC
Return
Retrieve stored (id, params(cid:48), callback, $f, )
Assert params = params(cid:48) and $f ≤ $gdvr
// abort if not found
and isDelivered[id] not set
(3) Send $f to WTC
Set isDelievered[id]
Set $gclbk := $f − $Gmin
(4) Call callback(data) with gas $gclbk // msg.m4
Cancel: On recv (id, $gcncl) from CU :
, $f,C(cid:48)
U )
U and $f ≥ $G∅
and isDelivered[id] not set
and isCanceled[id] not set
Retrieve stored (id,
Assert CU = C(cid:48)
// abort if not found
,
Set isCanceled[id]
(5) Send ($f − $G∅) to CU // hold $G∅
Figure 6: TC contract CTC reﬂecting fees. The last
argument of each function is the GASLIMIT provided.
The Relay R. As noted in Section 3, R bridges the gap
between the Enclave and the blockchain in three ways.
1. It scrapes the blockchain and monitors CTC for new re-
quests (id, params).
2. It boots the Enclave with progencl.Initialize() and calls
progencl.Resume(id, params) on incoming requests.
3. It forwards datagrams from the Enclave to the blockchain.
Recall that it forwards already-signed transacations to the
blockchain as WTC . The program for R is shown in Fig. 7.
The function AuthSend inserts a transaction to blockchain
(“as WTC ” means the transaction is already signed with
skTC ). An honest Relay will invoke progencl.Resume ex-
actly once with the parameters of each valid request and
never otherwise.
The Enclave progencl. When initialized through Initial-
ize(), progencl ingests the current wall-clock time; by storing
this time and setting a clock reference point, it calibrates its
absolute clock. It generates an ECDSA keypair (pkTC , skTC )
(parameterized as in Ethereum), where pkTC is bound to the
progencl instance through insertion into attestations.
Upon a call to Resume(id, params), progencl contacts the
data source speciﬁed by params via HTTPS and checks that
the corresponding certiﬁcate cert is valid. (We discuss cer-
tiﬁcate checking in the appendix of the online version [39].)
Figure 8: The Town Crier Enclave progencl.
The Requester Contract CU . An honest requester ﬁrst
follows the protocol in Fig. 5 to verify the SGX attestation.
Then she prepares params and callback, sets $greq to the cost
of Request with params, sets $f to $Gmin plus the cost of ex-
ecuting callback, and invokes Request(params, callback, $f)
with GASLIMIT $greq.
If callback is not executed, she can invoke Cancel(id) with
GASLIMIT $Gcncl to receive a partial refund. An honest re-
quester will invoke Cancel at most once for each of her
requests and never for any other user’s request.
6.1 Private and Custom Datagrams
In addition to ordinary datagrams, TC supports private
datagrams, which are requests where params includes ci-
277Wallets
User WU
Contracts
User Contract
CU
Request
($greq, $f)
Deliver
$gclbk
WTC
$gdvr
$f
TC Contract
CTC
$f
Figure 9: Money Flow for a Delivered Request. Red