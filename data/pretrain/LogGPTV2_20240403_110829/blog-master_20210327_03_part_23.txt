         Filter: (val = 1)  
   ->  Seq Scan on p1_c3_c2 p1_9  
         Filter: (val = 1)  
(19 rows)  
/*+ IndexOnlyScan(p1 p1_.*val2.*)*/  
EXPLAIN (COSTS false) SELECT val FROM p1 WHERE val = 1;  
LOG:  available indexes for IndexOnlyScan(p1):  
LOG:  available indexes for IndexOnlyScan(p1_c1):  
LOG:  available indexes for IndexOnlyScan(p1_c2):  
LOG:  available indexes for IndexOnlyScan(p1_c3):  
LOG:  available indexes for IndexOnlyScan(p1_c4):  
LOG:  available indexes for IndexOnlyScan(p1_c1_c1):  
LOG:  available indexes for IndexOnlyScan(p1_c1_c2):  
LOG:  available indexes for IndexOnlyScan(p1_c3_c1):  
LOG:  available indexes for IndexOnlyScan(p1_c3_c2):  
LOG:  pg_hint_plan:  
used hint:  
IndexOnlyScan(p1 p1_.*val2.*)  
not used hint:  
duplication hint:  
error hint:  
           QUERY PLAN              
---------------------------------  
 Append  
   ->  Seq Scan on p1 p1_1  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c1 p1_2  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c2 p1_3  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c3 p1_4  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c4 p1_5  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c1_c1 p1_6  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c1_c2 p1_7  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c3_c1 p1_8  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c3_c2 p1_9  
         Filter: (val = 1)  
(19 rows)  
/*+ BitmapScanRegexp(p1 p1_.*[^0-9]$)*/  
EXPLAIN (COSTS false) SELECT val FROM p1 WHERE val = 1;  
LOG:  available indexes for BitmapScanRegexp(p1): p1_pkey  
LOG:  available indexes for BitmapScanRegexp(p1_c1): p1_c1_pkey  
LOG:  available indexes for BitmapScanRegexp(p1_c2): p1_c2_pkey  
LOG:  available indexes for BitmapScanRegexp(p1_c3): p1_c3_pkey  
LOG:  available indexes for BitmapScanRegexp(p1_c4): p1_c4_pkey  
LOG:  available indexes for BitmapScanRegexp(p1_c1_c1): p1_c1_c1_pkey  
LOG:  available indexes for BitmapScanRegexp(p1_c1_c2): p1_c1_c2_pkey  
LOG:  available indexes for BitmapScanRegexp(p1_c3_c1): p1_c3_c1_pkey  
LOG:  available indexes for BitmapScanRegexp(p1_c3_c2): p1_c3_c2_pkey  
LOG:  pg_hint_plan:  
used hint:  
BitmapScanRegexp(p1 p1_.*[^0-9]$)  
not used hint:  
duplication hint:  
error hint:  
           QUERY PLAN              
---------------------------------  
 Append  
   ->  Seq Scan on p1 p1_1  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c1 p1_2  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c2 p1_3  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c3 p1_4  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c4 p1_5  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c1_c1 p1_6  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c1_c2 p1_7  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c3_c1 p1_8  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c3_c2 p1_9  
         Filter: (val = 1)  
(19 rows)  
/*+ BitmapScanRegexp(p1 p1_.*val2.*)*/  
EXPLAIN (COSTS false) SELECT val FROM p1 WHERE val = 1;  
LOG:  available indexes for BitmapScanRegexp(p1): p1_val2  
LOG:  available indexes for BitmapScanRegexp(p1_c1): p1_c1_val2  
LOG:  available indexes for BitmapScanRegexp(p1_c2): p1_c2_val2  
LOG:  available indexes for BitmapScanRegexp(p1_c3): p1_c3_val2  
LOG:  available indexes for BitmapScanRegexp(p1_c4): p1_c4_val2  
LOG:  available indexes for BitmapScanRegexp(p1_c1_c1): p1_c1_c1_val2  
LOG:  available indexes for BitmapScanRegexp(p1_c1_c2): p1_c1_c2_val2  
LOG:  available indexes for BitmapScanRegexp(p1_c3_c1): p1_c3_c1_val2  
LOG:  available indexes for BitmapScanRegexp(p1_c3_c2): p1_c3_c2_val2  
LOG:  pg_hint_plan:  
used hint:  
BitmapScanRegexp(p1 p1_.*val2.*)  
not used hint:  
duplication hint:  
error hint:  
                   QUERY PLAN                     
------------------------------------------------  
 Append  
   ->  Bitmap Heap Scan on p1 p1_1  
         Recheck Cond: (val = 1)  
         ->  Bitmap Index Scan on p1_val2  
               Index Cond: (val = 1)  
   ->  Bitmap Heap Scan on p1_c1 p1_2  
         Recheck Cond: (val = 1)  
         ->  Bitmap Index Scan on p1_c1_val2  
               Index Cond: (val = 1)  
   ->  Bitmap Heap Scan on p1_c2 p1_3  
         Recheck Cond: (val = 1)  
         ->  Bitmap Index Scan on p1_c2_val2  
               Index Cond: (val = 1)  
   ->  Bitmap Heap Scan on p1_c3 p1_4  
         Recheck Cond: (val = 1)  
         ->  Bitmap Index Scan on p1_c3_val2  
               Index Cond: (val = 1)  
   ->  Bitmap Heap Scan on p1_c4 p1_5  
         Recheck Cond: (val = 1)  
         ->  Bitmap Index Scan on p1_c4_val2  
               Index Cond: (val = 1)  
   ->  Bitmap Heap Scan on p1_c1_c1 p1_6  
         Recheck Cond: (val = 1)  
         ->  Bitmap Index Scan on p1_c1_c1_val2  
               Index Cond: (val = 1)  
   ->  Bitmap Heap Scan on p1_c1_c2 p1_7  
         Recheck Cond: (val = 1)  
         ->  Bitmap Index Scan on p1_c1_c2_val2  
               Index Cond: (val = 1)  
   ->  Bitmap Heap Scan on p1_c3_c1 p1_8  
         Recheck Cond: (val = 1)  
         ->  Bitmap Index Scan on p1_c3_c1_val2  
               Index Cond: (val = 1)  
   ->  Bitmap Heap Scan on p1_c3_c2 p1_9  
         Recheck Cond: (val = 1)  
         ->  Bitmap Index Scan on p1_c3_c2_val2  
               Index Cond: (val = 1)  
(37 rows)  
/*+ BitmapScanRegexp(p1 p1[^_].*)*/  
EXPLAIN (COSTS false) SELECT val FROM p1 WHERE val = 1;  
LOG:  available indexes for BitmapScanRegexp(p1):  
LOG:  available indexes for BitmapScanRegexp(p1_c1):  
LOG:  available indexes for BitmapScanRegexp(p1_c2):  
LOG:  available indexes for BitmapScanRegexp(p1_c3):  
LOG:  available indexes for BitmapScanRegexp(p1_c4):  
LOG:  available indexes for BitmapScanRegexp(p1_c1_c1):  
LOG:  available indexes for BitmapScanRegexp(p1_c1_c2):  
LOG:  available indexes for BitmapScanRegexp(p1_c3_c1):  
LOG:  available indexes for BitmapScanRegexp(p1_c3_c2):  
LOG:  pg_hint_plan:  
used hint:  
BitmapScanRegexp(p1 p1[^_].*)  
not used hint:  
duplication hint:  
error hint:  
           QUERY PLAN              
---------------------------------  
 Append  
   ->  Seq Scan on p1 p1_1  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c1 p1_2  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c2 p1_3  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c3 p1_4  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c4 p1_5  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c1_c1 p1_6  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c1_c2 p1_7  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c3_c1 p1_8  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c3_c2 p1_9  
         Filter: (val = 1)  
(19 rows)  
/*+ BitmapScan(p1 p1_.*val2.*)*/  
EXPLAIN (COSTS false) SELECT val FROM p1 WHERE val = 1;  
LOG:  available indexes for BitmapScan(p1):  
LOG:  available indexes for BitmapScan(p1_c1):  
LOG:  available indexes for BitmapScan(p1_c2):  
LOG:  available indexes for BitmapScan(p1_c3):  
LOG:  available indexes for BitmapScan(p1_c4):  
LOG:  available indexes for BitmapScan(p1_c1_c1):  
LOG:  available indexes for BitmapScan(p1_c1_c2):  
LOG:  available indexes for BitmapScan(p1_c3_c1):  
LOG:  available indexes for BitmapScan(p1_c3_c2):  
LOG:  pg_hint_plan:  
used hint:  
BitmapScan(p1 p1_.*val2.*)  
not used hint:  
duplication hint:  
error hint:  
           QUERY PLAN              
---------------------------------  
 Append  
   ->  Seq Scan on p1 p1_1  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c1 p1_2  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c2 p1_3  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c3 p1_4  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c4 p1_5  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c1_c1 p1_6  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c1_c2 p1_7  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c3_c1 p1_8  
         Filter: (val = 1)  
   ->  Seq Scan on p1_c3_c2 p1_9  
         Filter: (val = 1)  
(19 rows)  
-- search from hint table  
INSERT INTO hint_plan.hints (norm_query_string, application_name, hints) VALUES ('EXPLAIN (COSTS false) SELECT * FROM t1 WHERE t1.id = ?;', '', 'SeqScan(t1)');  
INSERT INTO hint_plan.hints (norm_query_string, application_name, hints) VALUES ('EXPLAIN (COSTS false) SELECT id FROM t1 WHERE t1.id = ?;', '', 'IndexScan(t1)');  
INSERT INTO hint_plan.hints (norm_query_string, application_name, hints) VALUES ('EXPLAIN SELECT * FROM t1 WHERE t1.id = ?;', '', 'BitmapScan(t1)');  
SELECT * FROM hint_plan.hints ORDER BY id;  
 id |                    norm_query_string                     | application_name |     hints        
----+----------------------------------------------------------+------------------+----------------  
  1 | EXPLAIN (COSTS false) SELECT * FROM t1 WHERE t1.id = ?;  |                  | SeqScan(t1)  
  2 | EXPLAIN (COSTS false) SELECT id FROM t1 WHERE t1.id = ?; |                  | IndexScan(t1)  
  3 | EXPLAIN SELECT * FROM t1 WHERE t1.id = ?;                |                  | BitmapScan(t1)  
(3 rows)  
SET pg_hint_plan.enable_hint_table = on;  
EXPLAIN (COSTS false) SELECT * FROM t1 WHERE t1.id = 1;  
LOG:  pg_hint_plan:  
used hint:  
SeqScan(t1)  
not used hint:  
duplication hint:  
error hint:  
     QUERY PLAN       
--------------------  
 Seq Scan on t1  
   Filter: (id = 1)  
(2 rows)  
SET pg_hint_plan.enable_hint_table = off;  
EXPLAIN (COSTS false) SELECT * FROM t1 WHERE t1.id = 1;  
           QUERY PLAN             
--------------------------------  
 Index Scan using t1_pkey on t1  
   Index Cond: (id = 1)  
(2 rows)  
TRUNCATE hint_plan.hints;  
VACUUM ANALYZE hint_plan.hints;  
-- plpgsql test  
EXPLAIN (COSTS false) SELECT id FROM t1 WHERE t1.id = 1;  
             QUERY PLAN                
-------------------------------------  
 Index Only Scan using t1_pkey on t1  
   Index Cond: (id = 1)  
(2 rows)  
-- static function  
CREATE FUNCTION testfunc() RETURNS RECORD AS $$  
DECLARE  
  ret record;  
BEGIN  
  SELECT /*+ SeqScan(t1) */ * INTO ret FROM t1 LIMIT 1;  
  RETURN ret;  
END;  
$$ LANGUAGE plpgsql;  
SELECT testfunc();  
LOG:  pg_hint_plan:  
used hint:  
SeqScan(t1)  
not used hint:  
duplication hint:  
error hint:  
CONTEXT:  SQL statement "SELECT /*+ SeqScan(t1) */ *          FROM t1 LIMIT 1"  
PL/pgSQL function testfunc() line 5 at SQL statement  
 testfunc   
----------  
 (1,1)  
(1 row)  
-- dynamic function  
DROP FUNCTION testfunc();  
CREATE FUNCTION testfunc() RETURNS void AS $$  
BEGIN  
  EXECUTE format('/*+ SeqScan(t1) */ SELECT * FROM t1');  
END;  
$$ LANGUAGE plpgsql;  
SELECT testfunc();  
LOG:  pg_hint_plan:  
used hint:  
SeqScan(t1)  
not used hint:  
duplication hint:  
error hint:  
CONTEXT:  SQL statement "/*+ SeqScan(t1) */ SELECT * FROM t1"  
PL/pgSQL function testfunc() line 3 at EXECUTE  
 testfunc   
----------  
(1 row)  
-- This should not use SeqScan(t1)  
/*+ IndexScan(t1) */ SELECT * from t1 LIMIT 1;  
LOG:  pg_hint_plan:  
used hint:  
IndexScan(t1)  
not used hint:  
duplication hint:  
error hint:  
 id | val   
----+-----  
  1 |   1  
(1 row)  
-- Perform  
DROP FUNCTION testfunc();  
CREATE FUNCTION testfunc() RETURNS void AS $$  
BEGIN  
  PERFORM  1, /*+ SeqScan(t1) */ * from t1;  
END;  
$$ LANGUAGE plpgsql;  
SELECT testfunc();  
LOG:  pg_hint_plan:  
used hint:  
SeqScan(t1)  
not used hint:  
duplication hint:  
error hint:  
CONTEXT:  SQL statement "SELECT 1, /*+ SeqScan(t1) */ * from t1"  
PL/pgSQL function testfunc() line 3 at PERFORM  
 testfunc   
----------  
(1 row)  