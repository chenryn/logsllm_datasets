### 影响范围
  * Oracle WebLogic Server 12.2.1.0
  * Oracle WebLogic Server 12.1.3.0
  * Oracle WebLogic Server 12.1.2.0
  * Oracle WebLogic Server 10.3.6.0
### 演示环境
  * Oracle WebLogic Server 10.3.6.0
  * Windows 10.0.18362.356
  * JDK 160_29
### 漏洞概述
CVE-2016-3510漏洞是对CVE-2015-4852漏洞修复的绕过，攻击者在可以通过该漏洞实现远程命令执行。
### 补丁回顾
这里对CVE-2015-4852漏洞补丁做一个简易的分析：  
Step 1：下载补丁程序  
链接：  
提取码：69ph
Step 2：执行以下命令来检测当前Weblogic系统是否存在CVE-2015-4852漏洞，如果存在会在目录下生成a.txt
    java -jar  Test.jar weblogic 127.0.0.1 7001 C:\Users\Hepta\Desktop\zip\a.txt
Step 3：之后切换到C:\Oracle\Middleware\utils\bsu目录下执行以下命令来确定当前Weblogic版本等信息：
    bsu.cmd  -prod_dir=C:\Oracle\Middleware\wlserver_10.3 -status=applied -verbose –view
Step
4：将补丁包p20780171_1036_Generic.zip解压到C:\Oracle\Middleware\utils\bsu\cache_dir目录，修改pom文件名称  
Step 5：之后执行以下命令打补丁
    bsu.cmd -install -patch_download_dir=C:\Oracle\Middleware\utils\bsu\cache_dir -patchlist=EJUW  -prod_dir=C:\Oracle\Middleware\wlserver_10.3 –verbose
Step 6：与上述操作类似，之后打第二个补丁
    bsu.cmd -install -patch_download_dir=C:\Oracle\Middleware\utils\bsu\cache_dir -patchlist=ZLNA  -prod_dir=C:\Oracle\Middleware\wlserver_10.3 –verbose
Setp 7 ：查看已打补丁信息
    bsu.cmd -view -verbose -prod_dir=C:\Oracle\Middleware\wlserver_10.3 -status=applied
Step 8：之后重启Weblogic  
Step 9：在我们的攻击主机中再次执行载荷发现已经无效了(此处的test.ser为通过ysoserial生成的cc1链calc序列化数据文件)
    python2 weblogic_t3.py 192.168.174.144 7001 test.ser
在目标主机中只会显示以下结果：  
之后查看日志记录获取详细信息：
    java.io.InvalidClassException: Unauthorized deserialization attempt; org.apache.commons.collections.functors.ChainedTransformer
        at weblogic.rjvm.InboundMsgAbbrev$ServerChannelInputStream.resolveClass(InboundMsgAbbrev.java:116)
        at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1574)
        at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1495)
        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1731)
        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)
        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1946)
        at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:479)
        at org.apache.commons.collections.map.LazyMap.readObject(LazyMap.java:149)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:974)
        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1848)
        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1752)
        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)
        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1946)
        at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:479)
        at sun.reflect.annotation.AnnotationInvocationHandler.readObject(AnnotationInvocationHandler.java:312)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:974)
        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1848)
        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1752)
        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)
        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1946)
        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1870)
        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1752)
        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)
        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1946)
        at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:479)
        at sun.reflect.annotation.AnnotationInvocationHandler.readObject(AnnotationInvocationHandler.java:312)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:974)
        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1848)
        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1752)
        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)
        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:350)
        at weblogic.rjvm.InboundMsgAbbrev.readObject(InboundMsgAbbrev.java:69)
        at weblogic.rjvm.InboundMsgAbbrev.read(InboundMsgAbbrev.java:41)
        at weblogic.rjvm.MsgAbbrevJVMConnection.readMsgAbbrevs(MsgAbbrevJVMConnection.java:283)
        at weblogic.rjvm.MsgAbbrevInputStream.init(MsgAbbrevInputStream.java:215)
        at weblogic.rjvm.MsgAbbrevJVMConnection.dispatch(MsgAbbrevJVMConnection.java:498)
        at weblogic.rjvm.t3.MuxableSocketT3.dispatch(MuxableSocketT3.java:330)
        at weblogic.socket.BaseAbstractMuxableSocket.dispatch(BaseAbstractMuxableSocket.java:394)
        at weblogic.socket.NTSocketMuxer.processSockets(NTSocketMuxer.java:105)
        at weblogic.socket.SocketReaderRequest.run(SocketReaderRequest.java:29)
        at weblogic.socket.SocketReaderRequest.execute(SocketReaderRequest.java:42)
        at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:145)
        at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:117)
之后添加patch_jars目录下的jar包到Libraries目录下：  
之后以日志记录中的关键字"Unauthorized deserialization
attempt"为信息查看BUG22248372_1036.jar，发现位于：  
BUG22248372_1036.jar!\weblogic\rjvm\InboundMsgAbbrev.class  
之后在关键词出下断点，然后再次执行载荷：  
发现断点会断在com.bea.core.weblogic.rmi.client_1.11.0.0.jar!/weblogic/rjvm/InboundMsgAbbrev.class  
之后继续跟进发现会有BLACK_LIST.contains(className)的检查，很明显这里是对类名做了安全检查，下面显示了过滤的黑明单类：  
最终在org.apache.commons.collections.functors处被匹配到：  
### 漏洞思考
CVE-2015-4852采用黑名单的方式来修复漏洞，从BUG.jar中可以看出该修复方法主要作用在wlthint3client.jar包中以下三个位置：
    weblogic.rjvm.InboundMsgAbbrev.class::ServerChannelInputStream
    weblogic.rjvm.MsgAbbrevInputStream.class
    weblogic.iiop.Utils.class
既然是黑名单修复方式，那么自然而然不可避免的就是带来被绕过的情况，在这里如果我们可以找到在readObject中创建自己的InputStream的对象，并且不使用黑名单中的ServerChannelInputStream和MsgAbbrevInputStream类的readObject进行反序列化，之后再通过调用readObject()方法进行反序列化的数据的读取，这样一来我们就可以反序列化，CVE-2016-0638正是基于这样的思路找到了weblogic.jms.common.StreamMessageImpl类来实现反序列化操作，而这里我们去讨论一个更加有趣一些的洞——CVE-2016-3510，该漏洞可以是对CVE-2015-4852的绕过，也是对CVE-2016-0638更深入研究得出的一种更加巧妙绕很名单的方式，下面进行详细分析~
### 漏洞原理
该漏洞实现反序列化的思路是将反序列化的对象封装进weblogic.corba.utils.MarshalledObject，然后再对MarshalledObject进行序列化，生成payload字节码，反序列化时MarshalledObject不在WebLogic黑名单中，所以可正常进行反序列化，而在反序列化时MarshalledObject对象再调用readObject时对MarshalledObject封装的序列化对象再次反序列化，从而逃过了黑名单的检查。
### 漏洞分析
下载 ，之后使用IDEA打开，配置运行参数：
    -H "192.168.174.144" -C "calc" -B -os win
之后修改一下payload类型为"marshall"：  
下面跟踪看一下weblogic_cmd构造EXP的流程，首先在Main.java的executeBlind(host,
port);处下断点进行Debug调试分析：  
之后跟进executeBlind()函数：  
之后继续跟进bindeExecute()函数：  
之后跟进SerialBindDatas()函数，该函数用于序列化绑定的dada信息(待执行的命令)：  
之后继续跟进blindExecutePayloadTransformerChain(execArgs)函数：  
之后继续跟进serialData，可以看到这里使用的依旧是CC1链：  
此处的handler是构造的cc1对象，之后我们跟进BypassPayloadSelector.selectBypass()，可以看到此处根据Type的类型来确定如何构造payload，这里我们的type为"marshall":  
之后跟进marshalledObject(payload)，可以看到此处将payload封装进了marshalledObject对象：  
MarshalledObject(payload)实现如下所示：  