### 影响范围
- Oracle WebLogic Server 12.2.1.0
- Oracle WebLogic Server 12.1.3.0
- Oracle WebLogic Server 12.1.2.0
- Oracle WebLogic Server 10.3.6.0

### 演示环境
- Oracle WebLogic Server 10.3.6.0
- Windows 10.0.18362.356
- JDK 1.6.0_29

### 漏洞概述
CVE-2016-3510 是对 CVE-2015-4852 漏洞修复的绕过。攻击者可以通过此漏洞实现远程命令执行。

### 补丁回顾
以下是 CVE-2015-4852 漏洞补丁的简易分析步骤：

1. **下载补丁程序**
   - 链接：[补丁下载链接]
   - 提取码：69ph

2. **检测当前 WebLogic 系统是否存在 CVE-2015-4852 漏洞**
   ```sh
   java -jar Test.jar weblogic 127.0.0.1 7001 C:\Users\Hepta\Desktop\zip\a.txt
   ```
   如果存在漏洞，会在指定目录下生成 `a.txt` 文件。

3. **获取当前 WebLogic 版本等信息**
   ```sh
   bsu.cmd -prod_dir=C:\Oracle\Middleware\wlserver_10.3 -status=applied -verbose –view
   ```

4. **解压补丁包并修改文件名**
   - 将补丁包 `p20780171_1036_Generic.zip` 解压到 `C:\Oracle\Middleware\utils\bsu\cache_dir` 目录。
   - 修改 `pom` 文件名称。

5. **安装第一个补丁**
   ```sh
   bsu.cmd -install -patch_download_dir=C:\Oracle\Middleware\utils\bsu\cache_dir -patchlist=EJUW -prod_dir=C:\Oracle\Middleware\wlserver_10.3 –verbose
   ```

6. **安装第二个补丁**
   ```sh
   bsu.cmd -install -patch_download_dir=C:\Oracle\Middleware\utils\bsu\cache_dir -patchlist=ZLNA -prod_dir=C:\Oracle\Middleware\wlserver_10.3 –verbose
   ```

7. **查看已安装的补丁信息**
   ```sh
   bsu.cmd -view -verbose -prod_dir=C:\Oracle\Middleware\wlserver_10.3 -status=applied
   ```

8. **重启 WebLogic**

9. **验证补丁效果**
   - 在攻击主机中再次执行载荷：
     ```sh
     python2 weblogic_t3.py 192.168.174.144 7001 test.ser
     ```
   - 目标主机将显示以下结果：
     ```java
     java.io.InvalidClassException: Unauthorized deserialization attempt; org.apache.commons.collections.functors.ChainedTransformer
         at weblogic.rjvm.InboundMsgAbbrev$ServerChannelInputStream.resolveClass(InboundMsgAbbrev.java:116)
         ...
     ```

### 漏洞思考
CVE-2015-4852 采用黑名单的方式来修复漏洞，主要作用在 `wlthint3client.jar` 包中的以下三个位置：
- `weblogic.rjvm.InboundMsgAbbrev.class::ServerChannelInputStream`
- `weblogic.rjvm.MsgAbbrevInputStream.class`
- `weblogic.iiop.Utils.class`

由于是黑名单修复方式，不可避免地会存在被绕过的情况。如果找到一个不使用黑名单中的 `ServerChannelInputStream` 和 `MsgAbbrevInputStream` 类进行反序列化的对象，并通过调用 `readObject()` 方法进行反序列化操作，就可以绕过黑名单检查。CVE-2016-0638 正是基于这一思路找到了 `weblogic.jms.common.StreamMessageImpl` 类来实现反序列化操作。而 CVE-2016-3510 则是对 CVE-2015-4852 的绕过，也是对 CVE-2016-0638 更深入研究得出的一种更加巧妙的绕过黑名单的方法。

### 漏洞原理
该漏洞通过将反序列化的对象封装进 `weblogic.corba.utils.MarshalledObject`，然后再对 `MarshalledObject` 进行序列化，生成 payload 字节码。反序列化时，`MarshalledObject` 不在 WebLogic 黑名单中，因此可以正常进行反序列化。而在反序列化时，`MarshalledObject` 对象再调用 `readObject` 时对封装的序列化对象进行反序列化，从而逃过了黑名单的检查。

### 漏洞分析
1. **下载并配置运行参数**
   - 下载相关工具和补丁。
   - 使用 IDEA 打开项目，配置运行参数：
     ```sh
     -H "192.168.174.144" -C "calc" -B -os win
     ```

2. **修改 payload 类型**
   - 将 payload 类型修改为 "marshall"。

3. **跟踪调试**
   - 在 `Main.java` 的 `executeBlind(host, port);` 处下断点进行 Debug 调试。
   - 跟进 `executeBlind()` 函数。
   - 继续跟进 `bindExecute()` 函数。
   - 跟进 `SerialBindDatas()` 函数，用于序列化绑定的数据信息（待执行的命令）。
   - 继续跟进 `blindExecutePayloadTransformerChain(execArgs)` 函数。
   - 跟进 `serialData`，可以看到这里使用的依旧是 CC1 链。
   - 跟进 `BypassPayloadSelector.selectBypass()`，根据 Type 的类型来确定如何构造 payload，这里的 type 为 "marshall"。
   - 跟进 `marshalledObject(payload)`，可以看到此处将 payload 封装进了 `marshalledObject` 对象。

```java
public MarshalledObject marshalledObject(Object payload) {
    return new MarshalledObject<>(payload);
}
```

通过这种方式，攻击者可以绕过黑名单检查，成功实现远程命令执行。