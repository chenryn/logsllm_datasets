### Security Context of an App at Install-Time

At the time of installation, applications are assigned a security type based on specific criteria, such as the requested permissions. This mapping from application metadata to security types is defined in the SE Android policy. Additionally, SE Android provides limited support for MAC (Mandatory Access Control) policy enforcement at the Android middleware layer (MMAC). We will discuss these features in Section 7.2 and provide a comparison with our FlaskDroid architecture.

## 3. Requirements Analysis for Android Security Architectures

### 3.1 Adversary Model

We consider a strong adversary whose goal is to gain access to sensitive data and compromise system or third-party applications. This adversary is capable of launching software attacks on different layers of the Android software stack.

#### 3.1.1 Middleware Layer

Recent reports have highlighted various attacks operating at the Android middleware layer:

- **Overprivileged Third-Party Apps and Libraries**: These apps and libraries threaten user privacy by adopting questionable practices (e.g., WhatsApp [6] or Path [23]). Additionally, advertisement libraries included in third-party apps often exploit the permissions of their host app to collect user information [25].

- **Malicious Third-Party Apps**: These apps leverage dangerous permissions to cause financial harm to users (e.g., sending premium SMS) and exfiltrate private information [57, 40].

- **Confused Deputy Attacks**: Malicious apps exploit unprotected interfaces of benign system [20, 41] and third-party [16, 56] apps (referred to as deputies) to escalate their privileges.

- **Collusion Attacks**: Malicious apps collude using covert or overt channels [8, 34] to gain permission sets not approved by the user (e.g., the Soundcomber attack [46]).

- **Sensory Malware**: These malware use onboard sensors, such as accelerometers, to derive privacy-sensitive information, like user input [53, 12].

#### 3.1.2 Root Exploits

In addition to middleware-layer attacks, various privilege escalation attacks on lower layers of the Android software stack have been reported [55, 40]. These attacks grant the attacker root (i.e., administrative) privileges, allowing them to bypass the Android permission framework. For example, an attacker can bypass ContactsProvider permission checks by directly accessing the contacts database file. Processes executing with root privileges also inherit all available permissions at the middleware layer.

It is important to note that attacks targeting Linux kernel vulnerabilities are out of the scope of this paper, as SE Android is a building block in our architecture (see Section 4) and is part of the kernel, making it susceptible to kernel exploits.

### 3.2 Requirements

Based on our adversary model, we derive the necessary requirements for an efficient and flexible access control architecture for mobile devices, focusing on the Android OS.

- **Access Control on Multiple Layers**: Mandatory access control solutions at the kernel level, such as SE Android [48] or Tomoyo [27], help defend against or constrain privilege escalation attacks on lower levels of the OS [48]. However, kernel-level MAC provides insufficient protection against security flaws in the middleware and application layers and lacks the necessary high-level semantics for fine-grained filtering at those layers [48, 47]. Access control solutions at the middleware level [28, 15, 39, 9, 8] address these shortcomings but are susceptible to low-level privilege escalation attacks. Therefore, a first requirement is to provide simultaneous MAC defenses at both layers. Ideally, these two layers should be dynamically synchronized at runtime over mutual interfaces. At a minimum, the kernel MAC should preserve security invariants, ensuring that any access to sensitive resources or functionality is always first mediated by the middleware MAC.

- **Multiple Stakeholder Policies**: Mobile systems involve multiple stakeholders, such as end-users, device manufacturers, app developers, and other third parties (e.g., the end-user's employer). These stakeholders store sensitive data on the device. Related work [39, 9] has proposed specialized solutions to address the security requirements and specific problems of these parties. The assets of different stakeholders are subject to different security requirements, which may not always align and might conflict. Thus, a generic MAC framework must handle policies of multiple stakeholders and support (basic) policy reconciliation mechanisms [43, 35].

- **Context-Awareness**: The security requirements of different stakeholders may depend on the current context of the device. Our architecture should support context-aware security policies.

- **Support for Different Use-Cases**: Our architecture should serve as a basis for different security solutions applicable in a variety of use cases. By modifying the underlying policy, our solution should be able to support different use cases, such as selective and fine-grained protection of app interfaces [39] or privacy-enhanced system Services and Content Providers.

## 4. FlaskDroid Architecture

### 4.1 Overview

The high-level idea of FlaskDroid is inspired by the Flask security architecture [50], where various Object Managers at the middleware and kernel levels are responsible for assigning security contexts to their objects. Objects can include kernel resources such as files or IPC, and middleware resources such as Service interfaces, Intents, or ContentProvider data. When subjects (i.e., apps) attempt to access these objects to perform a particular operation, the managers enforce an access control decision requested from a security server at their respective layer. Our approach implements a user-space security server. Access control in FlaskDroid, similar to SE Android (cf. Section 2), is implemented as type enforcement. However, in contrast to SE Android, we extend our policy language with new features tailored to the Android middleware semantics (cf. Section 4.3). Moreover, to enable more dynamic policies, the policy checks in FlaskDroid depend on the System State, which determines the actual security context of the objects and subjects at runtime. Each security server is also responsible for policy management for multiple stakeholders, such as app developers, end-users, or third parties. A key feature is that the policies on the two layers are synchronized at runtime. For example, a change in enforcement at the middleware must be supported/ reflected at the kernel level. By decoupling policy management and decision-making from enforcement points and consolidating both layers, the goal of FlaskDroidâ€™s design is to provide fine-grained and highly flexible access control over operations at both middleware and kernel levels.

### 4.2 Architecture Components

Figure 1 provides an overview of our architecture. In the following, we will explain the individual components that comprise the FlaskDroid architecture.

#### 4.2.1 SE Android Module

At the kernel level, we employ stock SE Android [48] as a building block primarily for the following purposes: First, it hardens the Linux kernel [48], preventing malicious apps from easily escalating their privileges by exploiting vulnerabilities in privileged (system) services. Even if an attack, usually with the intent of gaining root user privileges, is successful, SE Android can constrain the file-system privileges of the app by restricting the privileges of the root account itself. Second, it complements the policy enforcement at the middleware level by preventing apps from bypassing the middleware enforcement points (in Flask terminology defined as Userspace Object Managers (USOMs)), for example, accessing the contacts database file directly instead of going through the ContactsProvider app.

**Dynamic Policies**: Using the dynamic policy support of SELinux (cf. Section 2.3), it is possible to reconfigure the access control rules at runtime depending on the current system state. Our Userspace Security Server (cf. Section 4.2.2) is the trusted user space agent that controls the SELinux dynamic policies and can map system states and contexts to SELinux boolean variables (cf. Section 4.3). To this end, SE Android provides user space support (in particular android.os.SELinux).

#### 4.2.2 Userspace Security Server

In our architecture, the Userspace Security Server is the central policy decision point for all user-space access control decisions, while the SE Android kernel-space security server is responsible for all kernel-space policy decisions. This approach provides a clear separation of security issues between the user-space and kernel-space components. Furthermore, it enables the use of a more dynamic policy schema at the middleware level (different from the more static SELinux policy language) that takes advantage of the rich semantics (e.g., contextual information) at that layer. Access control is implemented as type enforcement based on (1) the subject type (usually the type associated with the calling app), (2) the object type (e.g., contacts_email or the type associated with the callee app UID), (3) the object class (e.g., contacts_data or Intent), and (4) the operation on the object (e.g., query).

#### 4.2.3 Userspace Object Managers

In FlaskDroid, middleware services and apps act as Userspace Object Managers (USOMs) for their respective objects. These services and apps can be distinguished into system components and third-party components. The former, i.e., pre-installed services and apps, must be USOMs to achieve the desired system security and privacy, while the latter can use interfaces provided by the Userspace Security Server to optionally act as USOMs.

Table 4 in Appendix B provides an overview of exemplary system USOMs in FlaskDroid and shows some typical operations each object manager controls. Currently, the USOMs implemented in FlaskDroid comprise 136 policy enforcement points. In the following, we explain how we instrumented selected components as Userspace Object Managers.

- **PackageManagerService**: Responsible for (un)installation of application packages and finding a preferred component for performing a task at runtime. As a Userspace Object Manager, we extend the PackageManagerService to assign consolidated middleware- and kernel-level app types to all apps during installation using criteria defined in the policy (cf. Section 4.3). This is motivated by the fact that at the time a policy is written, one cannot predict which third-party apps will be installed in the future. Pre-installed apps are labeled during the phoneâ€™s boot cycle based on the same criteria. More explicitly, we assign app types to the (shared) UIDs of apps, since (shared) UIDs are the smallest identifiable unit for application sandboxes. In addition, pre-defined UIDs in the system are reserved for particular system components, and we map these UIDs to pre-defined types (e.g., aid_root_t or aid_audio_t). Furthermore, we extend the logic for finding a preferred component to only consider apps allowed by the policy to perform the requested task.

- **ActivityManagerService**: Responsible for managing the stack of Activities of different apps, Activity lifecycle management, and providing the Intent broadcast system. As a USOM, the ActivityManagerService is responsible for labeling Activity and Intent objects and enforcing access control on them. Activities are labeled according to the apps they belong to, i.e., the UID of the application process that created the Activity. Subsequently, access control on the Activity objects is enforced in the ActivityStack subsystem of the ActivityManagerService. During operations that manipulate Activities, such as moving Activities to the foreground/background or destroying them, the ActivityStack queries the USSS to verify that the particular operations are permitted to proceed depending on the subject type (i.e., the calling app) and object type (i.e., the app owning the Activity being modified).

- **Content Providers**: The primary means for apps to share data, accessible over a well-defined, SQL-like interface. As Userspace Object Managers, ContentProviders are responsible for assigning labels to the data entries they manage during insertion/creation of data and for performing access control on update, query, or deletion of entries. Two approaches for access control are supported: 1) at the API level by controlling access to the provider as a whole, or 2) integrating it into the storage back-end (e.g., SQLite database) for more fine-grained per-data access control.

  - **Approach 2)**: We implemented a design pattern for SQLite-based ContentProviders. Upon insertion or update of entries, we verify that the subject type of the calling app is permitted to perform this operation on the particular object type. To filter queries to the database, we create one SQL View for each subject type and redirect the query of each calling app to the respective View for its type. Each View implements a filtering of data based on an access control table managed by the USSS, which represents the access control matrix for subject/object types. This approach is well-suited for any SQLite-based ContentProvider and scales well to multiple stakeholders by using nested Views.

- **Service Components**: Provide a particular functionality to other (possibly remote) components, which access the Service interface via ICC. To instantiate a Service as a Userspace Object Manager, we add access control checks when a (remote) component connects to the Service and on each call to Service functions exposed by the Service API. The developer of the Service can set the types of the service and its functions by adding type-tags to their definitions. Service interfaces are exposed as Binder IPC objects generated based on an interface specification described in the Android Interface Definition Language (AIDL). We extended the lexer and parser of Androidâ€™s AIDL tool to recognize (developer-defined) type tags on Service interfaces and function declarations. The AIDL code generator was extended to automatically insert policy checks for these types in the auto-generated Service code. Since the AIDL tool is used during system build and as part of the SDK for app development, this solution applies to both system Services and third-party app Services in the same way.

#### 4.2.4 Context Providers

A context is an abstract term representing the current security requirements of the device. It can be derived from different criteria, such as physical criteria (e.g., the location of the device) or the state of apps and the system (e.g., the app currently shown on the screen). To allow for flexible control of contexts and their definitions, our design employs Context Providers. These providers come in the form of plugins to our Userspace Security Server (see Figure 1) and can be arbitrarily complex (e.g., using machine learning) and leverage available information such as the network state or geolocation of the device to determine which contexts apply. Context Providers register Listener threads in the system to detect context changes, similar to the approach taken in [15]. Each Context Provider is responsible for a distinct set of contexts, which it activates/deactivates in the USSS. Decoupling the context monitoring and definition from our policy ensures that context definitions do not affect our policy language except for very simple declarations (as we will show in Section 4.3.1). Moreover, the USSS provides feedback to Context Providers about the performed access control decisions. This is particularly useful when instantiating security models like [8, 15], where access control decisions depend on previous decisions.

### 4.3 Policy

#### 4.3.1 Policy Language and Extensions

We extend SELinuxâ€™s policy semantics for type enforcement (cf. Section 2.3) with new default classes and constructs for expressing policies on both middleware and kernel levels. A recapitulation of the SELinux policy language is out of the scope of this paper, and we focus here on our extensions.

- **New Default Classes**: Similar to classes at the kernel level, like file or socket, we introduce new default classes and their corresponding operations to represent common objects at the middleware level, such as Activity, Service, ContentProvider, and Intent. Operations for these classes include, for example, querying a ContentProvider or receiving an Intent.

- **Application and Intent Types**: Another extension is the ability to define criteria by which applications and Intents are labeled with a security type (cf. Listing 1). The criteria for apps can be, for instance, the application package name, the requested permissions, or the developer signature. Criteria for assigning a type to Intent objects can be the Intent action string, category, or receiving component. If no matching criteria are found, the default types (defaultAppType and defaultIntentType) are assigned.

```java
// Listing 1: Assigning types to apps and Intents
defaultAppType untrustedApp_t;
defaultIntentType untrustedIntent_t;

appType app_telephony_t {
    Package:package_name=com.android.phone;
}

intentType intentLaunchHome_t {
    Action:action_string=android.intent.action.MAIN;
    Categories:category=android.intent.category.HOME;
}
```

- **Linking Booleans with Contexts**: We also extend the policy language to link SELinux booleans with contexts (cf. Listing 2). This allows for dynamic policy enforcement based on the current context of the device.

```java
// Listing 2: Linking booleans with contexts
bool phoneBooth_b = false;
kbool allowIPTablesExec_b = true;

switchBoolean {
    context=phoneBooth_con;
    auto_reverse=true;
    phoneBooth_b=true;
}
```

By extending the SELinux policy language with these new constructs, we enable more flexible and context-aware access control policies in FlaskDroid.