as rotation events between portrait and landscape orientation or
create/pause/resume/destroy events, the proxy View forwards them
via our inter-application communication channel and AdService to
the floating window. This allows the floating window to stay in sync
with the host app’s proxy View. As a result, while the advertisement
is safely compartmentalized in the service app, the user perceives
the advertisement as a part of the host app’s layout because the
occupied space and the lifecycles are synchronized.
The required layout information and lifecycle events are gathered
through two user interface callbacks: OnLayoutChangeListener
and ActivityLifecycleCallbacks. Since the proxy View is inte-
grated into the host layout and instantiated in the host app’s context,
it obtains the exact position the advertisement should have on-
screen through implementation of the OnLayoutChangeListener
and synchronizes this information with the remote side. By imple-
menting ActivityLifecycleCallbacks for the proxy View, it is
also straightforward to have synchronized displaying, hiding, and
finishing events in the remote advertisement View.
Advertisement view inflation. Usually, an advertisement view can
either be defined explicitly in a layout file and inflated automatically
by the system, or it can be instantiated manually at runtime. While
we can handle the runtime case with our rewriting framework,
supporting view replacement in case the advertisement instanti-
ation is done by the Android framework itself is more intricate.
Modifying the layout file directly is a possible solution, but it would
again require to repackage the app and break the app signature. To
support view substitution in both cases, at runtime and via layout
files while still maintaining the app signature, we use reflection
to additionally hook into the inflation mechanism at runtime and
inflate our proxy View instead of the original advertisement View.
Using this approach, the layout integration technique in Table 1
can be supported.
5.4.2 Multiplexing host apps. There are two approaches to achieve
advertisement pairing while multiplex host apps exist. One ad lib
app per app approach, where library runs in its own remote app,
can easily enforce per app privileges on the ad lib. This approach,
however, is not resource efficient. A centralized advertisement app,
which contains all advertisement libraries and serves all rewritten
host apps would be more efficient. Since our inter-application com-
munication channel between client and ad service app is built on
Session E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1044Figure 6: Intermediate representation of advertisement loading code before and after the CompARTist transformation.
particular means that, as discussed in the beginning of Section 5, we
tailored our solution towards fulfilling most of the goals outlined
in Table 2. While our ad service app can be installed as a regular
application, the deployment of the host-side instrumentation part
of CompARTist is more intricate.
Requirements. As described in Section 5.3, our app rewriting so-
lution is based on the ARTist framework that works on top of a mod-
ified compiler. However, with the above mentioned requirements
in mind, we have to abstain from replacing the system compiler
since this has several drawbacks: It requires modification of the
firmware and, in addition, every app installed will automatically
be instrumented by our approach. However, we want to allow for
selective recompilation of apps, i.e., the user should be able to pick
a subset of apps that she wants to have instrumented.
ArtistGui. We achieve this goal by utilizing the freely available
ArtistGui5 Android app that was created to provide a seamless way
to make use of ARTist Modules from the application layer without
requiring firmware modifications. It allows to ship the compiled
version of our app modification logic as a binary asset and makes
its instrumentation capabilities available through an easy-to-use
graphical interface. After applying our modification routines, the
instrumentation is completely transparent to the user as she can
still start the application from the launcher or other apps as usual.
Dependencies. While the chosen approach abstains from modify-
ing the Android operating system, it still requires at least elevated
privileges to be able to convince Android to execute instrumented
apps instead of the original ones. We will discuss this requirement
and possible solutions as well as alternative deployment strategies
for our rewriting part in Section 6.3.
6 DISCUSSION
We discuss our system in terms of the robustness of transformed
apps, the performance overhead our changes induce, and its lim-
itations. Further, we identify potential improvements and future
research directions.
5ArtistGui
(https://github.com/Project-ARTist).
is open source software available under Apache 2.0 license
Figure 7: Synchronization Management
top of service connections using Binder, the ad service can identify
the current caller app using Binder.getCallingUid() together
with information provided by the PackageManager. By using those
client-specific profiles, libraries can be shared between different
clients. However, this approach requires a strong domain isolation
within the single user-level advertisement app to privilege ad exe-
cutions according to their host apps(similar to AdDroid’s [27] ad
system service). Each approach has its own merits and both of them
can be adopted to CompARTist, since it’s just a matter of redirecting
the IPC calls.
To prevent a malicious host app from stealing ad revenue through
our CompARTist by continuously sending synchronization mes-
sages that instruct AdService to overlay any other app with the
malicious app’s advertisement, the ad service app must be able to
make synchronization events plausible. In our current solution, we
rely on the simple heuristic that only the host app that is on top of
the system’s Activity stack, i.e., in foreground on screen (excluding
the floating window overlay), is able to send valid synchronization
events, since it essentially instructs the AdService to be overlayed
or finish its own overlay, thus not affecting any other app. The
information about the current top Activity can be retrieved by third
party applications (like our ad service app) on older Android ver-
sions via the ActivityManager and on newer Android versions via
the UsageStatsManager.
5.5 Deployment
Our current design is mainly focused on the idea of providing
an application layer-only solution that completely abstains from
firmware modification while still providing robust isolation. This in
3:   InstanceFieldGet, args: (0)5:   LoadClass: Lcom/google/android/gms/ads/AdRequest$Builder7:   NewInstance: Lcom/google/android/gms/ads/AdRequest$Builder, args: (5)8:   InvokeStaticOrDirect: com.google.android.gms.ads.AdRequest$Builder., args: (7)9:   InvokeVirtual: com.google.android.gms.ads.AdRequest$Builder.build, args: (7)11: InvokeVirtual: com.google.android.gms.ads.AdView.loadAd, args: (3, 9)12: ReturnVoid 14: LoadClass: Lcom/hostsupport/localsupport/AdHelper, args: (4)15: ClinitCheck, args: (14)16: StaticFieldGet, args: (15)17: NullCheck, args: (16)3:   InstanceFieldGet, args: (0)21: LoadString: 'Lcom/google/android/gms/ads/AdRequest$Builder', args: (4)22: InvokeVirtual: com.hostsupport.localsupport.AdHelper.createObjectHelper, args: (17, 21)24: LoadString: 'build', args: (4)25: InvokeVirtual: com.hostsupport.localsupport.AdHelper.invokeMethodHelper, args: (17, 21, 24, 22)18: LoadString: 'Lcom/google/android/gms/ads/AdView', args: (4)19: LoadString: 'loadAd'(4), uses: [20]20: InvokeVirtual: com.hostsupport.localsupport.AdHelper.invokeMethodHelper, args: (17, 18, 19, 3, 25)12: ReturnVoidBefore InstrumentationAfter InstrumentationAdView adView;....public void showBanner() {    AdRequest.Builder adRequestBuilder = new AdRequest.Builder();    AdRequest adRequest = adRequestBuilder.build();    adView.loadAd(adRequest);}Source  CodeThe original viewof an app. Should not be changed after advertisementremoval.BannerAdEmpty Viewfloating windowORIGINAL APPAD APPHOST APPSizePosition...Banner AdInter-applicationCommunicationChannelThe original viewof an app. Should not be changed after advertisementremoval.Session E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA10456.1 Robustness Evaluation
The applicability of our approach largely depends on its capability
to neatly re-integrate the split application and advertisement code
across process and sandbox borders. In order to show the robustness
of our system, we conducted a large-scale evaluation on free apps
from the Google Play Store that contain advertisements by testing
them after applying our transformation.
6.1.1 Target Apps. We evaluate the robustness of our approach
against a list of applications that contain the Google Play Service
Ads library. As it dominates a large fraction of the mobile advertis-
ing market, evaluating with this library can indicate compatibility
with a major fraction of the market share of apps incorporating
advertisements. We started by creating a list of candidate apps from
Google Play Store. For generating this list, we utilized the freely
available LibScout project [9], which can tell apart the different
libraries used in apps. Starting off with top apps from the Google
Play Store that incorporate Google Play Service Ads, we filtered out
apps that did not meet the prerequisites for testing, e.g., could not
be downloaded, were published dysfunctional (i.e., crashed after
installation), or are multidex6.
6.1.2 Testing Setup. Scaling the evaluation of a dynamic ap-
proach to thousands of apps is only achievable through automation.
For pre-filtering, compiling, and testing all target apps on real
7, an app testing framework de-
devices, we utilize monkey-troop
signed to evaluate ARTist Modules. After filtering, apps are installed
on the device, transformed using CompARTist, and automatically
tested using Android’s monkey tool [1]. Experiments are conducted
on Google Pixel C devices running rooted stock Android 7 Nougat,
each having CompARTist and our ad service lib installed and con-
figured.
6.1.3 Automated UI Testing. Achieving meaningful code cover-
age by using automated UI testing tools is still an open problem. We
currently utilize Google’s monkey tool [1] to apply random touch
gestures to application activities. However, with this strategy the
monkey rarely makes it beyond the first few activities, let alone
those with input-validated fields. In addition, it can be prevented
to start other activities, but it often leaves the app by returning
to the homescreen or randomly changes quick settings. Still, we
use the monkey in our evaluation for the following reasons: First,
it provides reproducible executions since it provides us with the
seed for its random generator. This allows for applying the same
testing in the filter and test phase, respectively, to prevent mis-
matches there. Second, code coverage is not crucial here, since we
already execute a lot of code at application start (cf. Section 5.2)
and therefore starting the app to ensure it does not crash already
suffices in most cases. So triggering at least some functionality is
not considered mandatory, but a plus.
6.1.4 Results. We used the described testing infrastructure to
test 3861 apps on real devices, out of which 325 apps were removed
because they did not meet the above mentioned criteria for testing.
Figure 8 shows the results of our large-scale robustness evaluation.
6Our implementation does not support multidex apps (apps packaging more than one
dex file).
7monkey-troop is open source software available under Apache 2.0 license
(https://github.com/Project-ARTist).
Figure 8: Breakdown of our robustness evaluation on appli-
cations using the Google Play Services Ads library.
Table 3: Performance evaluation results for the app compart-
mentalization transformation (averaged over 50 runs).
Baseline (ms) Transformed (ms)
149.44
2101.50
2084.44
125.40
2209.84
Application Start
Banner
Interstitial (Loading)
Interstitial (Displaying)
Interstitial (Overall)
6.52
2025.35
1923.05
117.13
2040.18
Out of 3536 apps, 3257 were checked, installed, tested, instrumented
and retested successfully, yielding a success rate of 92.11% that
indicates the robustness of our approach and the compatibility with
a large fraction of the current ad-using app landscape.
The topmost row provides some more insight into the drawbacks
of our current evaluation design. Although we successfully instru-
mented 92.11% of the tested applications, only 2416 out of 3257
(74.18%) reached a state that actually requested an advertisement
during testing. As discussed in Section 6.1.3, the monkey is a limiting
factor here since not all applications show advertisements in the
first few Activities that are within reach. However, please note
that even for those apps that did not request an advertisement, the
application successfully established a connection to the remote ad-
vertisement library, which already involves heavy rewriting. Hence
we expect a large fraction of those apps that did not reach ad re-
quest code during testing to nevertheless be compatible with our
approach.
6.2 Performance Evaluation
We analyze the performance of our design by comparing the modi-
fied version of the app, which connects to and interacts with the
remote advertisement library, to the unchanged version of the app
under test. We apply microbenchmarking to analyze the three sce-
narios we are particularly interested in: Application Start, Banner
Advertisments and Interstitial Advertisements.
6.2.1 Testing Setup. For our microbenchmarks, we again focus
on apps utilizing Google Play Services advertisements. In order
to measure the immediate impact of our modification, we create
a sample application that integrates banner and interstitial ads
according to Google’s developer manual [7]. At the same time, we
embed benchmarking code into the application itself, so that it can
measure the precise time required to invoke certain functionality.
With this approach, we can precisely compute the overhead by
repeatedly invoking the app in its regular and also transformed state,
3,8613253,5362793,2578412,416Candidate apps    Unsupported    Supported    Failed    Success    No ad shown    Ad shown    Session E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1046and compare the results. Experiments are conducted on Google
Nexus 6 device running rooted stock Android 7 Nougat.
6.2.2 Results. Table 3 shows the performance overhead mea-
sured during our tests for the different scenarios.
Application Start. As explained in Section 5.2, we need a connec-
tion to our remote advertisement service from the very beginning,
hence we block the application until we obtain the service handle.
More precisely, we wait for a fixed amount of 100 ms before scan-
ning the message queue to ensure the service Binder is available.
After establishing a connection, the host side spends some time on
client-specific initializations before returning, hence also blocking
the app. The combined one-time overhead of service Binder scan-
ning, IPC roundtrips, and client-specific initialization is depicted in
Table 3.
Banner Advertisements. Since loading and displaying banner ad-
vertisements is a synchronous task, the microbenchmark starts
when the advertisement is requested and ends as soon as the ban-
ner reports that it was successfully loaded, effectively providing
an end-to-end measurement. For banners, our modifications to the
application introduce an acceptable overhead of 3.62%.
Interstitial Advertisement. Due to the increased size of intersti-
tials and in contrast to, e.g., banner advertisements, the developer
documentation [6] suggests to preload the advertisement as early
as possible to ensure it is available when the app decides to display
it. The implications of this decoupling are twofold: First, only the
loading phase involves network communication. After the adver-
tisement has been downloaded, the displaying phase is completely
independent of the network and can therefore provide reliable test
results that are more likely to be reproducible. Second, if we as-
sume that the majority of application developers using the Google
Service Play Ads follow this advice, loading will be handled asyn-
chronously in the background and therefore small deviations will
not impede the user experience. Taking those implications into
account, we decided to separately measure and report microbench-
mark results for interstitial advertisement loading and displaying
time. As depicted in Table 3, the overall measurement is dominated
by the loading part. Since those results are heavily influenced by
the network operations involved, we take the measured overhead
of 7.74 % with a grain of salt. However, the measurements at least
indicate that our instrumentation does not have a major impact on
the loading performance. For the advertisement displaying bench-
mark, as expected, we can see a small overhead of 6.59 % added by
our approach due to additional computations and IPC roundtrips,
which is still within a range that is hardly perceivable by end users.
6.3 Deployment Alternatives
We discuss alternative deployment strategies in terms of their short-
comings and the specific use cases motivating them.
6.3.1 Host-side Alternatives. Depending on the concrete use
cases, CompARTist can be retrofitted to achieve a different subset
of the goals from Table 2. We present alternative implementation
strategies that replace or combine the host part of CompARTist with
existing work.
Instrumentation Frameworks. In terms of instrumentation capa-
bilities, ARTist is on par with long-established Android app in-
strumentation frameworks, most prominently bytecode rewriting
approaches. Hence, in case of the concrete use case does not require
preservation of application signatures, the host-side rewriting can
be fully implemented in one of the existing instrumentation frame-
works [13, 17, 18, 24, 29, 37] without affecting the communication
channel or library side.
Virtualization Techniques. Filesystem virtualization alone, as pro-
vided by existing virtualization solutions [10, 15], is not sufficient
when it comes to retrofitting the host app to utilize our commu-
nication channel, because it essentially treats the application as a
black box. While those solutions operate at application granularity
and therefore only see the app interacting with the middleware
or kernel, modifying applications to utilize our AdHelper needs
instruction-granularity so we can distinguish between host and