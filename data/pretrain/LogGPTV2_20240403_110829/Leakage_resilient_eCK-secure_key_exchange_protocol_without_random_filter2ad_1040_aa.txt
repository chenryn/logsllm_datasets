title:Leakage resilient eCK-secure key exchange protocol without random
oracles
author:Daisuke Moriyama and
Tatsuaki Okamoto
Strongly Authenticated Key Exchange Protocol
from Bilinear Groups without Random Oracles
Zheng Yang and J¨org Schwenk
Horst G¨ortz Institute for IT Security
Ruhr-University Bochum, Germany
PI:EMAIL
Abstract. Malicious insider security of authenticated key exchange
(AKE) protocol addresses the situation that an AKE protocol is se-
cure even with existing dishonest parties established by adversary in
corresponding security experiment. In the eCK model, the EstablishParty
query is used to model the malicious insider setting. However such strong
query is not clearly formalized so far. We show that the proof of posses-
sion assumptions for registering public keys are of prime importance to
malicious insider security. In contrast to previous schemes, we present
an eCK secure protocol in the standard model, without assuming im-
practical, strong, concurrent zero-knowledge proofs of knowledge of se-
cret keys done to the CA at key registration. The security proof of our
scheme is based on standard pairing assumption, collision resistant hash
functions, bilinear decision Diﬃe-Hellman (BDDH) and decision linear
Diﬃe-Hellman (DLIN) assumptions, and pseudo-random functions with
pairwise independent random source πPRF [12].
Keywords: one-round authenticated key exchange, pairing,
security.
insider
1
Introduction
Many critical applications rely on the existence of a conﬁdential channel estab-
lished by authenticated Key Exchange (AKE) protocols over open networks.
In contrast to the most prominent key exchange protocol is the Diﬃe-Hellman
protocol [7] which is vulnerable to the existence of an active adversary (i.e.
man-in-the-middle attacks), a secure AKE should be secure against an active
adversaries. Over the last decade, the security of AKE against active attacks
has been developed increasingly in stronger models. In this paper, we consider
PKI-based two party AKE protocol in presence of adversary with strong capa-
bilities. LaMacchia, Lauter and Mityagin [8] recently presented strong security
deﬁnitions for two-pass key exchange protocol, which is referred as eCK security
model. Since the introducing of eCK model, many protocols (e.g. [12,18,10,11])
have been proposed to provide eCK security. But most of those protocols are
proven under random oracle model.
T. Takagi et al. (Eds.): ProvSec 2012, LNCS 7496, pp. 264–275, 2012.
c(cid:2) Springer-Verlag Berlin Heidelberg 2012
Strongly Authenticated Key Exchange Protocol
265
Public Key Registration and EstablishParty Query. In the original
eCK model [8], the public key registration was considered from three situations:
(i) honest key registration, (ii) proof of knowledge (POK) key registration, and
(iii) arbitrary key registration. In the security experiment, the above cases are
simulated diﬀerently by the challenger. As for the honest key registration, all
public keys are generated honestly by challenger, and for the other two cases
the public keys might be chosen by adversary. In the latter literatures, the
EstablishParty query was introduced to model such chosen public key attacks,
that might relate to attacks like unknown key share (UKS) attacks [4], etc. In
the security experiment, each registered corrupted party by EstablishParty query
is controlled by the adversary, which can be used to interact with honest parties
in sessions.
We notice that the EstablishParty query has not been clearly formalized so
far, where no POK assumption for key registration is addressed by this query.
In particular, diﬀerent POK assumptions would result in diﬀerent type of ad-
versaries in the security experiment, that would impact the proof simulation,
in particular for the proof without random oracles. General speaking, there are
two major POK assumptions: knowledge of secret key (KOSK) assumption and
plain public key (PPK) assumption. The KOSK assumption (e.g. used in [9]),
that requires each party provides the certiﬁcation authority (CA) with a proof
of knowledge of its secret key before the CA certiﬁes the corresponding public
key. While implementing the (KOSK) assumption, it is assumed that there ex-
ists either eﬃcient knowledge extractor (satisfying requirement in [1]), or the
adversary simply hands the challenger corresponding secret keys. The another
assumption is the plain public key (PPK) assumption (following the real-world
standards PKCS#10 [13]) that nothing more is required than in any usage of
public-key cryptography, where the proof of possession might be implemented
by having the user send the CA a signature (under the public key it is attempt-
ing to get certiﬁed) of some message that includes the public key and the user
identity. On the contrary, the private keys, of dishonest parties registered under
PPK assumption, might be only known by adversary, nor by the challenger. As
pointed out by Mihir Bellare and Gregory Neven in [2], the KOSK assumption
can’t be implemented by the proof based on plain public key (PPK) assump-
tion, and the PPK assumption is much cheaper and more realistic than KOSK
assumption.
While designing and analysing eCK protocol against chosen public key at-
tacks, corresponding POK assumption should be explicitly modeled by
EstablishParty query. Recently Moriyama and Okamoto (MO) presented an eCK-
secure key exchange protocol [11] in the standard model. However, as a negative
example, an appropriate POK assumption is never clearly made in the proof
of MO protocol. In particular, the MO protocol can’t be proven secure with-
out KOSK assumption. Since under PPK assumption, if the long-term keys of
test oracle (e.g. owned by party ˆA) are not corrupted and set in terms of a
DDH challenge instance, then the challenger is unable to simulate the session
key of other oracles of ˆA which have dishonest peer (e.g. party ˆC) established by
266
Z. Yang and J. Schwenk
adversary. Because computing the long-term shared key involving parties ˆA and
ˆC is a CDH hard problem for the challenger. Also, it still left out the task of for-
mally justifying a claim on how to implement the abstract KOSK assumption for
MO protocol. Therefore we are motivated to clearly formalize the EstablishParty
query and strive to seek eCK secure protocol against chosen public key attacks
without KOSK assumption and NAXOS tricks in the standard model.
Potential Threat on leakage of Secret Exponent. Besides the leak-
age of long-term and ephemeral private keys modeled by eCK model, a ‘well’
designed protocol should resist with the compromise of other session key related
secret information, even though such compromise is not normally expected. A
noteworthy instance is the leakage of ephemeral intermediate exponent (e.g., the
a1 + a3α in MO protocol), due to the up-to-date side-channel attacks. Such kind
of leakage has been studied by Sarr et al. [15,14] based on HMQV protocol.
In particular, as pointed by Yoneyama et al. [20], the leakage of intermediate
exponent of Okamoto protocol [12] and MO protocol (in two diﬀerent sessions)
would result in exposure of long-term keys. Therefore one should take care of
those intermediate exponents while designing protocols, even though it is hard
to prove the security on resilience of such leakage (as claimed in [20]). Moreover,
the ephemeral secrets that can be revealed in the eCK model, should be clearly
speciﬁed by each protocol based on appropriate implementation scenario. Note
that if the protocol is executed in a computer infected with malware, then all
secret session states (including those intermediate exponents mentioned above)
might be exposed.
1.1 Contribution
In this paper, we clarify the EstablishParty query in terms of diﬀerent type of POK
assumptions. We present an eCK secure AKE protocol in the standard model,
that is able to resist with chosen public key attacks based on only plain public
key registration assumption and without NAXOS trick. The security of pro-
posed protocol is based on standard pairing assumption, collision resistant hash
functions, bilinear decision Diﬃe-Hellman (BDDH) and decision linear Diﬃe-
Hellman (DLIN) assumptions, and pseudo-random functions with pairwise in-
dependent random source πPRF [12]. Not surprisingly, one must pay a small
price for added security with one paring operation. However our protocol can be
implemented in a group where DDH problem is easy.
We show that the internal computation algorithm really matters for the secu-
rity of a protocol. From our construction approach, we illustrate an example on
how to mitigate the threat due to leakage of intermediate exponents, for which
exponents involve only long-term secrets. In order to relieve the consequences
of such leakage, we adapt a generic strategy: ﬁrst blind those intermediate ex-
ponents using uniform random value (e.g. the ephemeral private keys) and next
remove the random value after completing corresponding exponential operation.1
1 This would mitigate the attacks described in [14,20], when the secret intermediate
exponent is exposed somehow.
Strongly Authenticated Key Exchange Protocol
267
Our approach can also be applied to improve the MO protocol [11] or Okamoto
protocol [12] in a similar way.
1.2 Related Work
In the ﬁrst eCK security model introduced by LaMacchia, Lauter and Mitya-
gin [8], they model the insider security by allowing adversary to register arbitrary
public keys without proving knowledge of the corresponding secret key, which
was formalized by EstablishParty query in later literatures.
Since then many eCK secure protocols, e.g. [8,12,10,15,14], have been correctly
proven under the malicious insider setting. But most of them are only provable
secure with the help of random oracles. Although the protocol [12] by Okamoto
is eCK secure in the standard model without KOSK assumption, this protocol
heavily relies on the NAXOS trick. Even though the NAXOS trick hides the
exponent of the ephemeral public key, it might be leaked because of the up-
to-date side-channel attacks. Therefore, a lot of works [11,18] are motivated to
propose eCK-secure key exchange protocols without the NAXOS tricks.
Sarr et al. [15], recently described some potential threats on HMQV due to the
leakage of secret intermediate exponent (i.e. the x+aD, where D = H( ˆA, ˆB, X)).
Namely, if such intermediate exponents in diﬀerent sessions are identical, the ad-
versary can obtain the secret signature in the target session. In the later, Sarr et
al. [14] strengthened the eCK model by allowing the adversary to learn certain
intermediate results while computing the session key, under speciﬁc implemen-
tation environment wherein a tamper-proof device is involved to store long-term
keys while session keys are used on an untrusted host machine. The seCK model
was further studied by Yoneyama et al., in recent work [20]. They pointed out
errors in the security proofs of SMQV and FHMQV [14] on leakage of inter-
mediate computations. Unfortunately, their results also showed that there is no
scheme has been provably secure in the seCK model.
2 Preliminaries
Notations. We let κ denote the security parameter and 1κ the string that consists
of κ ones. Each party has a long-term authentication key which is used to prove
the identity of the party in an AKE protocol. We let a ‘hat’ on top of a capital
letter denotes an identiﬁer of a participant, without the hat the letter denotes the
public key of that party, and the same letter in lower case denotes a private key.
For example, a party ˆA is supposed to register its public key A = ga at certiﬁcate
authority (CA) and keeps corresponding long-term secret key skA = a privately.
Let [n] = {1, . . . , n} ⊂ N be the set of integers between 1 and n. If S is a set, then
a ∈R S denotes the action of sampling a uniformly random element from S.
To construct our scheme, we need standard security notions of pseudo-random
functions (PRF), pseudo-random functions with pairwise independent random
sources (πPRF), collision resistant hash functions, the Bilinear Decision Diﬃe-
Hellman (BDDH) and Decision Linear Diﬃe-Hellman (DLIN) assumptions. These
are detailed in the full version [19].
268
Z. Yang and J. Schwenk
3 AKE Security
In this section we present the formal security model for two party PKI-based
authenticated key exchange (AKE) protocol. While modeling the active adver-
saries, we provide with an ’execution environment’ following an important line
of research [5,8,17] dates back to Bellare and Rogaway [3]. We will use the frame-
work as in [17] with slight modiﬁcation.
Execution Environment. Assume there exist a ﬁxed number of parties {P1, . . . , P(cid:3)}
for (cid:5) ∈ N, where each party Pi ∈ {P1, . . . , P(cid:3)} is a potential protocol participant
and each party has a long-term key pair (pki, ski) ∈ (PK,SK) corresponds to its
identity i, where {PK,SK} are keyspaces of long-term keys. To model several se-
quential and parallel executions of the protocol, each party Pi is modeled by a col-
i for d ∈ N. Each oracle πs
lection of oracles π1
i represents one single process
that executes an instance of the protocol. All oracles π1
i representing party
Pi have access to the same long-term key pair (pki, ski) of Pi and to all public keys
pk1, . . . , pk(cid:3). Moreover, each oracle πs
i maintains a separate internal state
i , . . . , πd
i , . . . , πd
– a variable Φ storing the identity j of an intended communication partner Pj ,
– a variable Ψ ∈ {accept, reject},
– a variable K ∈ K storing the session key used for symmetric encryption
i and party PΦ, where K is the keyspace of the protocol.
between πs
– and some additional temporary state variable st (which may, for instance,
be used to store ephemeral Diﬃe-Hellman exponents or other intermediate
values).
The internal state of each oracle is initialized to (Φ, Ψ, K, st) = (∅,∅,∅,∅). At
some point during the protocol execution each party would generate the ses-
sion key according to the key exchange protocol speciﬁcation when turning to
state (Ψ, K) = (accept, K) for some K, and at some point with internal state
(Ψ, K) = (reject,∅) where ∅ denotes the empty string. We will always assume
(for simplicity) that K (cid:5)= ∅ if an oracle has reached accept state.
An adversary may interact with these oracles by issuing the following queries.
– Send(πs
i , m): The adversary can use this query to send any message m of his
own choice to oracle πs
i . The oracle will respond according to the protocol
speciﬁcation, depending on its internal state. If the ﬁrst message m = ((cid:6), ˜j)
consists of a special symbol (cid:6) and a value ˜j which is either ∅ or identity
j, then πs
i will set Φ = ˜j and respond with the ﬁrst protocol message. If
˜j = ∅ then Φ will be set as identity j at some point according to protocol
speciﬁcation. 2
i ): Oracle πs
i responds to a RevealKey-query with the contents
– RevealKey(πs
of variable K.
– StateReveal(πs
i ): Oracle πs
i responds the contents secret state stored in vari-
able st.
2 A protocol might be run in either pre- or post-speciﬁed peer model here [6].
Strongly Authenticated Key Exchange Protocol
269
– EstablishParty(pkm, skm, Pm) This query registers an identity m((cid:5) < m < N)
and a static public/private key pair (pkm, skm) on behalf of a party Pm,
if one of the following conditions is held: (i) skm = ∅ and pkm ∈ PK, (ii)
skm ∈ SK and skm is the correct private key for public key pkm; otherwise
a failure symbol ⊥ is returned. Parties established by this query are called
corrupted or adversary controlled.
i responds with the long-term secret key ski of party Pi.
i can still be asked queries using the compromised
– Corrupt(Pi): Oracle π1
After this query, oracles πs
key ski.
– Test(πs
i ): This query may only be asked once throughout the game. Oracle
πs
i handles this query as follows: If the oracle has state Ψ = reject or
K = ∅, then it returns some failure symbol ⊥. Otherwise it ﬂips a fair coin
$← K, sets K1 = K to the ’real’ session key,
b, samples a random element K0
and returns Kb.
We note that the exact meaning of the StateReveal must be deﬁned for each
protocol separately, namely the content stored in the variable st during protocol
execution. In EstablishParty query, the private key skm corresponds to the proof
of knowledge assumptions for public key registration, which should be speciﬁed
in the security proof of each protocol. If skm = ∅ then the plain public key or
arbitrary key registration assumption is modeled, otherwise the knowledge of
secret key assumption is modeled.
Secure AKE Protocols. We ﬁrst deﬁne the partnering of two oracles via matching
conversations that was ﬁrst introduced by Bellare and Rogaway [3] in order to
deﬁne correctness and security of an AKE protocol precisely, and reﬁned latter in
[17]. In the following let T s
i denote the transcript of messages sent and received