original thread’s priority, ensures that future visible actions
and holes happen at the same points in time.
Purging the actions of a thread but not the thread itself
results in this thread stopping early immediately when it
is released. The scheduler will thus select the idle thread
whenever in the original schedule output returns −.
3.2 Information Flow by Altering
Thread Scheduling Behaviour
Varying the blocking and running behaviour of a high-
priority thread directly inﬂuences the times when low pri-
ority threads run.
In the following, we investigate how a
higher prioritised thread can signal information indirectly
by directly inﬂuencing low-priority threads and how delay-
ing preemptions may be exploited to leak information.
Surprisingly, information may be signalled indirectly
Indirect Inﬂuence
through low-priority threads in spite of their trustworthiness
not to forward timestamps in their messages.
3.2.1
A higher prioritised thread τh can make use of a lower pri-
oritised thread τl to signal another thread τx (τx can have
a higher or a lower priority than τh), provided τl is autho-
rised to communicate to τx. This is because the messages
sent by τl may carry timestamps and these can be directly
inﬂuenced by τh blocking or running.
Even if we would trust τl not to send timestamps, timing
information may be leaked from τh to τx because τh is able
to inﬂuence the ordering in which messages arrive at τx.
Figure 2: The high-priority thread τh causes a dif-
ferent execution order of the threads τl,1 and τl,2 de-
pending on whether it blocks or runs. Even tough
we trust τl,1 and τl,2 not to send explicit timing in-
formation, information about τh’s behaviour can be
deduced from the order in which messages arrive.
Figure 2 shows an example in which τh inﬂuences the ex-
ecution order of the threads τl,1 and τl,2. Assume in a given
period τl,1 blocks for one unit of time, then executes for one
unit.
If τh blocks at time 0, τl,2’s messages arrive at the
receiver τx (not shown in the Figure) before τl,1’s messages;
if τh runs at time 0, the messages arrive in reverse order.
This scenario shows that despite τl,1 and τl,2 being trusted
not to send timestamps in their messages, information may
be leaked from τh as long as the communication channel
used by the low threads reveal the order in which messages
arrive.
3.2.2
Uniprocessor operating systems typically synchronise
Inﬂuence through Delaying Preemptions
short critical sections by temporarily disabling device in-
terrupts and other causes of preemptions. However, when
preemptions are delayed, the thread causing the preemption
remains blocked until interrupts are re-enabled.
To isolate the eﬀect of malicious and erroneous threads we
have to enforce a maximum duration in which preemptions
are disabled, for example, similar to delayed preemption as
implemented in the L4 microkernel [13, 3]. Let max delay i
be the maximum time by which a thread τi may delay a
single preemption.
A running low-priority thread τl knowing when a high-
priority thread τh unblocks can alter delaying and not de-
laying this preemption to signal information to τh. The
high-priority thread τh can, in turn, detect these delays by
reading the system clock immediately after it gets the CPU.
Preemptions of even lower prioritised threads remain unaf-
fected as they are deferred until τl stops running anyway.
4. A NONINTERFERENCE-SECURE
SCHEDULER
To prevent unauthorised leakage of information, we mod-
ify the operating-system scheduler to treat active threads
that are blocked or that ﬁnished execution without exhaust-
ing their worst-case budgets as if they were ready. Each time
the currently running thread blocks, becomes inactive or
is preempted, our scheduling algorithm selects the highest-
priority active thread
1. that is either ready
or that could potentially cause unauthorised information
ﬂows and
2. that is blocked
3. or that has ﬁnished without exhausting its worst-case
execution budget or total worst-case budget.
In the ﬁrst case, the scheduler switches to the selected
thread.
In the second and third case, the scheduler can-
not switch to the selected thread because it is not ready.
Instead, we introduce a countermeasure to prevent infor-
mation leakage: the scheduler switches to the system’s idle
thread, which we trust not to send any messages and which
we can therefore assign the ultimately highest security class
>. The time the system idles because of this countermeasure
is accounted to the thread selected by the scheduler.
Figure 3: To prevent information leakage, our mod-
iﬁed scheduler prevents τl from running during the
times τh blocks or ﬁnishes early.
Figure 3 illustrates this algorithm. The system idles while
τh is active and not running. As a consequence, the lower
prioritised thread τl can no longer distinguish whether it
did not run because the high-priority thread τh did run or
because τh did block or stop early and the scheduler switched
to the idle thread. The view of τl on τh therefore remains
unchanged in spite of alterations in τh’s behaviour.
In the following, we state more precisely the predicate
when this countermeasure must be applied. To minimise
the scheduling overhead, we prefer predicates that can be
2231100TimeTimePriorityPriorityl,2l,1hτττl,2l,1hτττblockrunτhτlτlτhtimepriorityidleactiveinactivewct≤dom(   )  dom(    )  checked statically while the system is oﬀ-line or during the
admission. With static predicates, our modiﬁed scheduler
achieves a near zero scheduling overhead compared to an un-
modiﬁed ﬁxed-priority scheduler which enforces worst-case
times. This is because the check for the second case degener-
ates to checking an additional ﬂag that can be stored in the
thread-control block. The scheduler will then either switch
to the selected thread or to the idle thread depending on
this ﬂag
4.1 Transitive Policies
As we have argued in Section 3.2, an active high-priority
thread τh can directly inﬂuence a lower prioritised thread
τl that is active at some point in time when τh is active or
by inﬂuencing some intermediate-priority thread τx that is
active when τl is active and which communicates with τh.
In the latter case, information is only leaked if τl wants to
run and can do so because τh (respectively τx) blocks. How-
ever, we cannot consider thread actions because we search
for a predicate that can be statically determined.
Therefore we choose the conservative but statically com-
putable predicate ptrans (τh) that is true if and only if there
is a lower prioritised thread τl to which τh is not authorised
to send2. More formally:
Deﬁnition 2. Predicate for Transitive Policies.
ptrans (τh) := ∃ τl ∈ Tlow (τh).
dom(τh) (cid:2) dom(τl)
It is easy to see how the countermeasure with this predicate
prevents information leakage to low-priority threads τl:
if
such a thread exists, no lower prioritised thread than τh
(except the idle thread) is scheduled until τh’s budgets are
depleted or the deadline passes. To see how ptrans prevents
a thread τh from indirectly inﬂuencing another thread τx,
we have to consider two cases: ptrans (τh) and ¬ptrans (τh).
Case ptrans (τh): No thread τl with prio(τl) < prio(τh) may
be inﬂuenced directly by τh. Therefore, the times-
tamps these threads τl may report to τx are indepen-
dent of τh’s behaviour.
Case ¬ptrans (τh): τh may directly inﬂuence all lower pri-
oritised threads (e.g., τl) and indirectly those threads
to which these lower prioritised threads are authorised
to send (e.g., τx with dom(τl) ≤ dom(τx)). But then
dom(τh) ≤ dom(τx) holds because of ¬ptrans (τh) ⇒
dom(τh) ≤ dom(τl) and the transitivity of ≤.
Intransitive Policies
4.2
In intransitive policies, c1 ≤ c2 ∧ c2 ≤ c3 ⇒ c1 ≤ c3 does
not necessarily hold for all security classes ci ∈ C. The intu-
ition of intransitive information-ﬂow policies is to authorise
communication between two threads only if this communi-
cation happens through a dedicated third thread. It is up to
this third thread to appropriately ﬁlter the information ﬂow.
An example for such a third thread is a crypto-gateway, that
is, a server we trust to encrypt messages from the sender
before relaying them to the receiver, thereby protecting the
conﬁdentiality of these messages.
2We do not claim our predicates to be minimal in the sense
that they are the least restrictive predicates that can be
statically computed. Further predicates remain to be inves-
tigated.
The static predicate ptrans (τh) is not suﬃcient to prevent
indirect inﬂuences of other threads when the security policy
is intransitive. Consider the case ¬ptrans (τh) in Section 4.1.
In this case τh is authorised to send to all lower prioritised
threads. Assume τl is the crypto gateway to a thread τx
with which τh must not communicate directly. Because of
¬ptrans (τh), τh may directly inﬂuence τl’s timing. As we have
seen in Section 3.2.1, this direct inﬂuence of τh is suﬃcient
to signal information to τx even if we trust τl not to leak
timestamps with its messages. In fact, τl has no means to
prevent this information leakage.
One possibility to address intransitive information ﬂow
policies is to choose a more restrictive predicate. For exam-
ple,
Deﬁnition 3. Predicate for Intransitive Policies.
pintrans (τh) := ∃τ ∈ T. dom(τh) (cid:2) dom(τ )
However, this predicate would result a system in which the
scheduler applies the countermeasure to all but those threads
having the lowest security class (dom(τ ) = ⊥). The result-
ing system would, in practice, be no better than time parti-
tioning.
Figure 4: The crypto gateway decomposed into two
threads with security levels c2a, c2b. The intransitive
security policy c1 ≤ c2 ∧ c2 ⇒ c3 is split into the tran-
sitive policy with c1 ≤ c2a and c2b ≤ c3.
For this reason, we propose an alternative solution. No-
tice that the threads which mediate the communication in
an intransitive policy must be trusted not to relay informa-
tion arbitrarily. Thus, it is likely that the code executed
by these gateway threads is suﬃciently manageable to un-
dergo a stringent security evaluation. This manageability
gives us conﬁdence that the following restructuring into a
multi-threaded server is feasible.
Instead of accepting and relaying messages in the same
thread, which would ultimately be subject to a direct inﬂu-
ence by τh if this thread has a lower priority, we split this
functionality into two threads and assign them distinct se-
curity levels. Figure 4 illustrates this approach. The two
server threads are assigned distinct security levels c2a and
c2b instead of c2 from the original information ﬂow policy.
Consequently, the information ﬂow policy becomes transi-
tive at this point and the predicate ptrans (τh) would hold for
the message relaying thread since dom(τh) (cid:2) c2b, provided
this relaying thread has a lower priority than τh. Obvi-
ously, to prevent illegal information ﬂows, the internal com-
munication between the two server threads has to be imple-
132312a2bcrypto gatewaycccccccmented carefully, e.g., exploiting previous results from the
NRL Pump [8].
4.3 Delayed Preemption Leaks
Figure 5: Countermeasure to prevent information
leakage from delaying preemptions.
To prevent information leakage from delaying preemp-
tions, a second modiﬁcation to the scheduler is required.
When delaying a higher prioritised thread’s preemption
could possibly leak information, the modiﬁed scheduler de-
lays all preemptions caused by this higher prioritised thread
τh by max delay low (τh):
Deﬁnition 4. Maximum Preemption Delay.
max delay low (τh) := max
τl∈Tlow (τh)
(max delay(τl))
The following static predicate determines when this coun-
termeasure has to be applied.
• A real-system implementation would maintain a linked
lists of ready threads — the ready queue — to avoid
searching the array of existing threads.
Otherwise, a real-system implementation has to perform the
same state-transitions.
Notice that while the enforcement of worst case execu-
tion budgets wcet is relevant for preserving the real-time
guarantees, with regards to information leakage only the en-
forcement of the total worst case budgets wct is relevant.
A thread which exceeds its wcet and which is unconstrained
by our countermeasure may prevent lower prioritised threads
from executing for a longer time but this prevention can le-
gitimately be seen. On the other hand, threads constrained
by the countermeasure will prevent this execution anyhow
until wct is depleted because the idle thread runs whenever
the original thread does not. For this reason we omit wcet
from the proof of noninterference and consider only wct bud-
gets.
The state-transformers are:
deadline step set a thread to inactive when the deadline
has passed or the budget is depleted
release step activate a thread τi at every release point πi,k
and reﬁll the budget to wct i,k
end action determine whether the current action of the
thread has stopped
next action adjust the thread state according to the
Deﬁnition 5. Predicate for Delayed Preemption.
thread’s next action.
pdelay (τh) := ∃ τl ∈ Tlow (τh).
dom(τl) (cid:2) dom(τh)
Because the high-priority thread τh controls how often it
blocks and because each time it blocks may lead to delaying
τh, we have to account the time between the high-priority
preemption occurring and τh running to this high-priority
thread. Figure 5 illustrates this countermeasure.
5. PROOF OF NONINTERFERENCE
In the following section, we sketch the formal proof of the
noninterference property (Deﬁnition 1). The countermea-
sure to prevent information ﬂow due to nonpreemptibility
has not yet been included in the proof.
We formalised our system in PVS [17]. The sources are
available at [26]. However, to illustrate our proof we use
a more mathematical notation. Let s.actions denote the
element actions of a record s. We write s \ actions := x
to update this ﬁeld in the record with x, leaving the not
mentioned ﬁelds unchanged.
We model the scheduler as a sequence of state-transfor-
mers that perform the individual transitions of a ﬁxed-prio-
rity scheduler at each clock tick. When no such transition
occurs at an individual clock tick the thread state remains
the same and only the ticks in the remaining budgets are
adjusted.
The model deviates from an implementation in a real sys-
tem in two points:
• Instead of checking at each clock tick whether a budget
has depleted, a real-system implementation would pro-
gram a timer interrupt to trigger when the scheduler
is to be invoked next.
More formally, let s be the record state which contains be-
sides the above scheduling parameters for each thread τ a
dynamic state comprised of its current release s.release(τ ) =
k and for this release the remaining time s.rem time(τ )
that the time the current action lasts, the remaining worst
case budget s.rem wct(τ ), a list of actions which remain to
be executed in this release period srem actions(τ ) and a
thread state s.ts(τ ) ∈ {blocked , ready, cm blocked , inactive}
(a thread τ is in cm blocked if it is blocked and ptrans (τ )
holds).
s.actions which records for each release k ∈ N the trace (list)
of actions this thread will perform. In the proof we consider
arbitrary action sequences and compare for each thread τ
the output of this system with the output of an identical
system in which this action list is purged for all threads
from which τ must not receive. Consequently purge is:
We obtain the actions from the per thread function
Deﬁnition 6. Purge.
 hi
purge(s, τ ) := s \ actions := λk ∈ N, τ0 ∈ T.
if dom(τ0) (cid:2) dom(τ )
s.actions(k, τ0) otherwise
where hi denotes the empty list.
We deﬁne output by adding to the state a ﬁeld s.event which
records for each clock tick t the highest priority thread which
executes during this tick. Thus output is:
Deﬁnition 7. Output.
 s.event(t)
output(s, τ, t) :=
−