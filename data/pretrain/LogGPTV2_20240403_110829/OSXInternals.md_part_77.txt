Mac OS X uses only kernel-level RPC between local tasks, the concept is similar even if RPC participants
are on different machines. In a typical RPC scenario, execution (control flow) temporarily moves to
another location (that corresponding to the remote procedure) and later returns to the original locationakin
to a system call. The caller (client) marshals any parameters together into a message and sends the
message to the service provider (server). The service provider unmarshals the messagethat is, separates it
into its original pieces and processes it as a local operation.
7.2.6.2. Activation and Shuttle
Prior to Mac OS X 10.4, a kernel thread was divided into two logical parts: the activation and the shuttle.
The motivation behind the division is to have one part that provides explicit control over the thread (the
activation) and another part that is used by the scheduler (the shuttle). The thread activation represents the
execution context of a thread. It remains attached to its task and thus always has a fixed, valid task
pointer. Until the activation is terminated, it remains on the task's activation stack.[11] The thread shuttle is
the scheduled entity corresponding to a thread. At a given time, a shuttle operates within some activation.
However, a shuttle may migrate during RPC because of resource contention. It contains scheduling,
accounting, and timing information. It also contains messaging support. While a shuttle uses an activation,
it holds a reference on the activation.
[11] A thread, as a logical flow of control, is represented by a stack of activations in a task.
Note that the activation is closer to the popular notion of a threadit is the externally visible thread handle.
For example, a thread's programmer-visible kernel port internally translates to a pointer to its activation.
In contrast, the shuttle is the internal part of a thread. Within the kernel, current_act() returns a pointer
to the current activation, whereas current_thread() returns a pointer to the shuttle.
The shuttle/activation dual abstraction has undergone implementation changes across various Mac OS X
versions. In Mac OS X 10.0, a thread's implementation consisted of two primary data structures: the
tHRead_shuttle structure and the tHRead_activation structure, with the thread data type (tHRead_t)
being a pointer to the tHRead_shuttle structure. The activation could be accessed from the shuttle, and
thus a thread_t represented a thread in its entirety. Figure 712 shows the structures in Mac OS X 10.0.
Figure 712. The shuttle and thread data structures in Mac OS X 10.0
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 23 of 107
In later versions of Mac OS X, the thread data structure subsumed both the shuttle and the activationfrom
a syntactic standpointinto a single structure. This is shown in Figure 713.
Figure 713. The shuttle and the thread within a single structure in Mac OS X 10.3
In Mac OS X 10.4, the distinction between shuttle and activation is not present. Figure 714 shows the
implementation of current_thread() and current_act() in Mac OS X 10.3 and 10.4. In the x86
version of Mac OS X, a pointer to the current (active) thread is stored as a field of the per-cpu data
structure[12] (struct cpu_data [osfmk/i386/cpu_data.h]).
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 24 of 107
[12] The GS segment register is set up such that it is based at the per-cpu data structure.
Figure 714. Retrieving the current thread (shuttle) and the current activation on Mac OS X 10.3 and 10.4
// osfmk/ppc/cpu_data.h (Mac OS X 10.3)
extern __inline__ thread_act_t current_act(void)
{
thread_act_t act;
__asm__ volatile("mfsprg %0,1" : "=r" (act));
return act;
};
...
#define current_thread() current_act()->thread
// osfmk/ppc/cpu_data.h (Mac OS X 10.4)
extern __inline__ thread_t current_thread(void)
{
thread_t result;
__asm__ volatile("mfsprg %0,1" : "=r" (result));
return (result);
}
// osfmk/ppc/machine_routines_asm.s (Mac OS X 10.4)
/*
* thread_t current_thread(void)
* thread_t current_act(void)
*
* Return the current thread for outside components.
*/
align 5
.globl EXT(current_thread)
.globl EXT(current_act)
LEXT(current_thread)
LEXT(current_act)
mfsprg r3,1
blr
7.2.6.3. Thread Migration
In the preceding discussion of the shuttle and the activation, we alluded to the concept of thread
migration. The migrating threads model was developed at the University of Utah. The term migration
refers to the way control is transferred between a client and a server during an RPC. For example, in the
case of static threads, an RPC between a client and a server involves a client thread and an unrelated,
independent server thread. The sequence of events after the client initiates an RPC involves multiple
context switches, among other things. With the split thread model, rather than blocking the client thread
on its RPC kernel call, the kernel can migrate it so that it resumes execution in the server's code. Although
some context switch is still required (in particular, that of the address space, the stack pointer, and perhaps
a subset of the register state), no longer are two entire threads involved. There also is no context switch
from a scheduling standpoint. Moreover, the client uses its own processor time while it executes in the
server's codein this sense, thread migration is a priority inheritance mechanism.
This can be compared to the Unix system call model, where a user thread (or process) migrates into the
kernel during a system call, without a full-fledged context switch.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 25 of 107
Procedural IPC
Mach's original RPC model is based on message-passing facilities, wherein distinct threads
read messages and write replies. We have seen that access rights are communicated in Mach
through messaging as well. Operating systems have supported procedural IPC in several
forms: gates in Multics, lightweight RPC (LRPC) in TaOS, doors in Solaris, and event pairs
in Windows NT are examples of cross-domain procedure call mechanisms. The thread model
in Sun's Spring system had the concept of a shuttle, which was the true kernel-schedulable
entity that supported a chain of application-visible threadsanalogous to the activations we
discussed.
7.2.6.4. Continuations
The Mac OS X kernel uses a per-thread kernel stack size of 16KB (KERNEL_STACK_SIZE, defined in
osfmk/mach/ppc/vm_param.h). As the number of threads in a running system increases, the memory
consumed by kernel stacks alone can become unreasonable, depending on available resources. Some
operating systems multiplex several user threads onto one kernel thread, albeit at the cost of concurrency,
since those user threads cannot be scheduled independently of each other. Recall that a Mach thread (or an
activation, when a thread is divided into a shuttle and an activation) is bound to its task for the lifetime of
the thread, and that each nontrivial task has at least one thread. Therefore, the number of threads in the
system will at least be as many as the number of tasks.
Operating systems have historically used one of two models for kernel execution: the process model or the
interrupt model. In the process model, the kernel maintains a stack for every thread. When a thread
executes within the kernelsay, because of a system call or an exceptionits dedicated kernel stack is used to
track its execution state. If the thread blocks in the kernel, no explicit state saving is required, as the state
is captured in the thread's kernel stack. The simplifying effect of this approach is offset by its higher
resource requirement and the fact that machine state is harder to evaluate if one were to analyze it for
optimizing transfer control between threads. In the interrupt model, the kernel treats system calls and
exceptions as interrupts. A per-processor kernel stack is used for all threads' kernel execution. This
requires kernel-blocking threads to explicitly save their execution state somewhere. When resuming the
thread at a later point, the kernel will use the saved state.
The typical UNIX kernel used the process model, and so did early versions of Mach. The concept of
continuations was used in Mach 3 as a middle-ground approach that gives a blocking thread an option to
use either the interrupt or the process model. Mac OS X continues to use continuations. Consequently, a
blocking thread in the Mac OS X kernel can choose how to block. The tHRead_block() function
[osfmk/kern/sched_prim.c] takes a single argument, which can be either THREAD_CONTINUE_NULL
[osfmk/kern/kern_types.h] or a continuation function.
// osfmk/kern/kern_types.h
typedef void (*thread_continue_t)(void *, wait_result_t);
#define THREAD_CONTINUE_NULL ((thread_continue_t) 0)
...
tHRead_block() calls tHRead_block_reason() [osfmk/kern/sched_prim.c], which calls
thread_invoke() [osfmk/kern/sched_prim.c] to perform a context switch and start executing a new
thread selected for the current processor to run. thread_invoke() checks whether a valid continuation
was specified. If so, it will attempt[13] to hand off the old thread's kernel stack to the new thread.
Therefore, as the old thread blocks, its stack-based context is discarded. When the original thread
resumes, it will be given a new kernel stack, on which the continuation function will execute. The
thread_block_parameter() [osfmk/kern/sched_prim.c] variant accepts a single parameter that
thread_block_reason() stores in the tHRead structure, from where it is retrieved and passed to the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 26 of 107
continuation function when the latter runs.
[13] A thread with a real-time scheduling policy does not hand off its stack.
Threading code must be explicitly written to use continuations. Consider the example shown in Figure
715: someFunc() needs to block for some event, after which it calls someOtherFunc() with an argument.
In the interrupt model, the thread must save the argument somewhereperhaps in a structure that will
persist as the thread blocks and resumes (the tHRead structure itself can be used for this purpose in some
cases) and will block using a continuation. Note that a thread uses the assert_wait() primitive to
declare the event it wishes to wait on and then calls thread_block() to actually wait.
Figure 715. Blocking with and without continuations
someOtherFunc(someArg)
{
...
return;
}
#ifdef USE_PROCESS_MODEL
someFunc(someArg)
{
...
// Assert that the current thread is about to block until the
// specified event occurs
assert_wait(...);
// Pause to let whoever catch up
// Relinquish the processor by blocking "normally"
thread_block(THREAD_CONTINUE_NULL);
// Call someOtherFunc() to do some more work
someOtherFunc(someArg);
return;
}
#else // interrupt model, use continuations
someFunc(someArg)
{
...
// Assert that the current thread is about to block until the
// specified event occurs
assert_wait(...);
// "someArg", and any other state that someOtherFunc() will require, must
// be saved somewhere, since this thread's kernel stack will be discarded
// Pause to let whoever catch up
// Relinquish the processor using a continuation
// someOtherFunc() will be called when the thread resumes
thread_block(someOtherFunc);
/* NOTREACHED */
}
#endif
A function specified as a continuation cannot return normally. It may call only other functions or
continuations. Moreover, a thread that uses a continuation must save any state that might be needed after
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 27 of 107
resuming. This state may be saved in a dedicated space that the thread structure or an associated structure
might have, or the blocking thread may have to allocate additional memory for this purpose. The
continuation function must know how the blocking thread stores this state. Let us consider two examples
of continuations being used in the kernel.
The implementation of the select() system call on Mac OS X uses continuations. Each BSD threadthat
is, a thread belonging to a task with an associated BSD proc structurehas an associated uthread structure,
which is akin to the traditional u-area. The uthread structure stores miscellaneous information, including
system call parameters and results. It also has space for storing saved state for the select() system call.
Figure 716 shows this structure's relevant aspects.
Figure 716. Continuation-related aspects of the BSD uthread structure
// bsd/sys/user.h
struct uthread {
...
// saved state for select()
struct _select {
u_int32_t *ibits, *obits; // bits to select on
uint nbytes; // number of bytes in ibits and obits
...
} uu_select;
union {
// saved state for nfsd
int uu_nfs_myiods;
// saved state for kevent_scan()
struct _kevent_scan {
kevent_callback_t call; // per-event callback
kevent_continue_t cont; // whole call continuation
uint64_t deadline; // computed deadline for operation
void *data; // caller's private data
} ss_kevent_scan;
// saved state for kevent()
struct _kevent {
...
int fd; // file descriptor for kq
register_t *retval; // for storing the return value
...
} ss_kevent;
} uu_state;
int (* uu_continuation)(int);
...
};
When a thread calls select() [bsd/kern/sys_generic.c] for the first time, select() allocates space
for the descriptor set bit fields. On subsequent invocations, it may reallocate this space if it is not
sufficient for the current request. It then calls selprocess() [bsd/kern/sys_generic.c], which,
depending on the conditions, calls tsleep1() [bsd/kern/kern_synch.c], with selcontinue()
[bsd/kern/sys_generic.c] specified as the continuation function. Figure 717 shows how the select()
implementation uses continuations.
Figure 717. The use of continuations in the implementation of the select() system call
// bsd/kern/sys_generic.c
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 28 of 107
int
select(struct proc *p, struct select_args *uap, register_t *retval)
{
...
thread_t th_act;
struct uthread *uth
struct _select *sel;
...
th_act = current_thread();
uth = get_bsdthread_info(th_act);
sel = &uth->uu_select;
...
// if this is the first select by the thread, allocate space for bits
if (sel->nbytes == 0) {
// allocate memory for sel->ibits and sel->obits
}
// if the previously allocated space for the bits is smaller than
// is requested, reallocate
if (sel->nbytes abstime, selcontinue);
...
}
tsleep1() [bsd/kern/kern_synch.c] calls _sleep() [bsd/kern/kern_synch.c], which saves the
relevant state in the utHRead structure and blocks using the _sleep_continue() continuation. The latter
retrieves the saved state from the utHRead structure.
// bsd/kern/kern_synch.c
static int
_sleep(caddr_t chan,
int pri,
char *wmsg,
u_int64_t abstime,
int (* continuation)(int),
lck_mtx_t *mtx)
{
...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 29 of 107
if ((thread_continue_t)continuation !=
THREAD_CONTINUE_NULL) {
ut->uu_continuation = continuation;
ut->uu_pri = pri;
ut->uu_timo = abstime ? 1 : 0;
ut->uu_mtx = mtx;
(void)thread_block(_sleep_continue);
/* NOTREACHED */
}
...
}
Let us look at another examplethat of nfsiod, which implements a throughput-improving optimization for
NFS clients. nfsiod is a local NFS asynchronous I/O server that runs on an NFS client machine to service
asynchronous I/O requests to its server. It is a user-space program, with the skeletal structure shown in