    #define last(b)      ((b)->bk)
此时的bin是smallbin的链表头，那么last(bin)实际上就是获得链表的最后一个chunk，而这里的检查也是判断该链表是否为空，如果不空，则进入到下面的代码。假设链表不为空，再进行一次判断，如果victim为0，则代表smallbin还没有初始化，调用malloc_consolidate进行初始化。如果不为0，说明已经初始化完成，那么后面接着往下走进入else，再对链表的完整性进行检查。此时因为smallbin的检查都通过了，那么根据大小索引出的链表，我们可以从中取出一个chunk，设置下一个chunk的PREV_INUSE的bit位，然后解链，取出该链表的最后一个chunk，在设置取出chunk的bit位，进行检查后返回内存指针。到此时。那么，如果不属于smallbin的大小的话，那就是属于largebin的大小，进入到else处的代码
    if ( in_smallbin_range( nb ) )
    {
        ... ...
    }else   {
        idx = largebin_index( nb );
        if ( have_fastchunks( av ) )
            malloc_consolidate( av );
    }
这里则是通过largebin_index获取idx后，首先检查了fastbin里是否有空闲的chunk，有的话先对fastbin里面的chunk进行合并。做完这些后，进入一个大的for循环
    int iters = 0;
    while ( (victim = unsorted_chunks( av )->bk) != unsorted_chunks( av ) )
    {
        bck = victim->bk;
        if ( __builtin_expect( victim->size size > av->system_mem, 0 ) )
            malloc_printerr( check_action, "malloc(): memory corruption",
                     chunk2mem( victim ) );
        size = chunksize( victim );
        if ( in_smallbin_range( nb ) &&
             bck == unsorted_chunks( av ) &&
             victim == av->last_remainder &&
             (unsigned long) (size) > (unsigned long) (nb + MINSIZE) )
        {
            /* split and reattach remainder */
            remainder_size            = size - nb;
            remainder            = chunk_at_offset( victim, nb );
            unsorted_chunks( av )->bk    = unsorted_chunks( av )->fd = remainder;
            av->last_remainder        = remainder;
            remainder->bk            = remainder->fd = unsorted_chunks( av );
            if ( !in_smallbin_range( remainder_size ) )
            {
                remainder->fd_nextsize    = NULL;
                remainder->bk_nextsize    = NULL;
            }
            set_head( victim, nb | PREV_INUSE |
                  (av != &main_arena ? NON_MAIN_ARENA : 0) );
            set_head( remainder, remainder_size | PREV_INUSE );
            set_foot( remainder, remainder_size );
            check_malloced_chunk( av, victim, nb );
            void *p = chunk2mem( victim );
            alloc_perturb( p, bytes );
            return(p);
        }
        /* remove from unsorted list */
        unsorted_chunks( av )->bk    = bck;
        bck->fd                = unsorted_chunks( av );
        /* Take now instead of binning if exact fit */
        if ( size == nb )
        {
            set_inuse_bit_at_offset( victim, size );
            if ( av != &main_arena )
                victim->size |= NON_MAIN_ARENA;
            check_malloced_chunk( av, victim, nb );
            void *p = chunk2mem( victim );
            alloc_perturb( p, bytes );
            return(p);
        }
这段的话就进入到了遍历unsortedbin的阶段（注：该出代码省略了最外圈的for循环，这里依然是一个遍历过程），从unsortedbin的最后面的chunk开始往前遍历，通过检查以后，获得当前chunk的size，如果大小是在smallbin的范围内，并且unsortedbin里面只有一个chunk，还为last_reamainder的话，而且他的大小可以满足要求，那就对该chunk进行切割，并且设置好bit位，再把剩余的部分作为新的last_remainder链接到unsortedbin，如果剩下的部分超过了512字节也就是属于largebin部分，把fd_nextsize和bk_nextsize进行置空，然后把切割下来的那部分作为chunk返回，同时设置好相关的bit位，进行检查。当然，如果不满足条件则进行跳过该部分，将我们得到的unsortedbin的chunk进行解链，如果我们进行解链的chunk的size刚好符合nb，那就设置标志位，直接返回该victim。所以这里是一边寻找一边整理chunk。
    int iters = 0;
      while ((victim = unsorted_chunks (av)->bk) != unsorted_chunks (av))
        {
          bck = victim->bk;
          if (__builtin_expect (victim->size size > av->system_mem, 0))
            malloc_printerr (check_action, "malloc(): memory corruption",
                             chunk2mem (victim));
          size = chunksize (victim);
                ......
                ......
                ......
          /* place chunk in bin */
          if (in_smallbin_range (size))
            {
              victim_index = smallbin_index (size);
              bck = bin_at (av, victim_index);
              fwd = bck->fd;
            }
          else
            {
              victim_index = largebin_index (size);
              bck = bin_at (av, victim_index);
              fwd = bck->fd;
              /* maintain large bins in sorted order */
              if (fwd != bck)
                {
                  /* Or with inuse bit to speed comparisons */
                  size |= PREV_INUSE;
                  /* if smaller than smallest, bypass loop below */
                  assert ((bck->bk->size & NON_MAIN_ARENA) == 0);
                  if ((unsigned long) (size) bk->size))
                    {
                      fwd = bck;
                      bck = bck->bk;
                      victim->fd_nextsize = fwd->fd;
                      victim->bk_nextsize = fwd->fd->bk_nextsize;
                      fwd->fd->bk_nextsize = victim->bk_nextsize->fd_nextsize = victim;
                    }
                  else
                    {
                      assert ((fwd->size & NON_MAIN_ARENA) == 0);
                      while ((unsigned long) size size)
                        {
                          fwd = fwd->fd_nextsize;
                          assert ((fwd->size & NON_MAIN_ARENA) == 0);
                        }
                      if ((unsigned long) size == (unsigned long) fwd->size)
                        /* Always insert in the second position.  */
                        fwd = fwd->fd;
                      else
                        {
                          victim->fd_nextsize = fwd;
                          victim->bk_nextsize = fwd->bk_nextsize;
                          fwd->bk_nextsize = victim;
                          victim->bk_nextsize->fd_nextsize = victim;
                        }
                      bck = fwd->bk;
                    }
                }
              else
                victim->fd_nextsize = victim->bk_nextsize = victim;
            }
          mark_bin (av, victim_index);
          victim->bk = bck;
          victim->fd = fwd;
          fwd->bk = victim;
          bck->fd = victim;
    #define MAX_ITERS       10000
          if (++iters >= MAX_ITERS)
            break;
        }
如果我们取出来的chunk大小不符合要求，就进行合并，那么进行合并，我们就需要判断其大小属于哪个范围，首先判断如果是属于smallbin的范围，一样的，获取索引，将链表指针赋值给bck、fwd为该链表的第一个chunk跳过else部分，看后面的插入操作，也就是
      mark_bin (av, victim_index);
      victim->bk = bck;
      victim->fd = fwd;
      fwd->bk = victim;
      bck->fd = victim;
    #define MAX_ITERS       10000
      if (++iters >= MAX_ITERS)
        break;
这部分代码，此处的mak_bin是用来标识chunk的，在binmap中，用bit位来标识该chunk是否空闲。这里的插入操作根据代码来看，首先把我们从unsortedbin中获得的chunk的bk指向链表指针，fd指向原本的第一个chunk，再把链表指针的fd和原本第一个chunk的bk指针指向victim，这里是插入到了链表的头部。到这是属于smallbin的，那么如果是属于largebin的呢？我们回到else的代码部分，在这个部分里，用largebin_index获取对应的索引，然后通过索引获得对应的链表指针，如果fwd和bck相等了，则说明此时的链表为空，直接进入到后面的插入操作。并且将fd_nextsize和bk_nextsize指向自己。如果不为空，则直接获得最小size的chunk，也就是从bck->
bk指向最后面的chunk，如果该chunk的size比最小的还要小，就不用遍历，直接更新fwd和bck，把链表指针赋值给fwd，bck指向最小的chunk，下面就是将chunk链接进去的操作，将fd_nextsize指向最大的chunk，再把最大chunk的bk_nextsize指向该chunk，形成循环。如果比最小的chunk大的话，用while循环，找到应该插入的位置，在largebin中，如果大小相同的chunk，用最先释放进去的chunk作为堆头，通过fd_nextsisze和bk_nextsize和其他堆头进行链接，后续还有大小一致的chunk的话，就插入到堆头的后面，不去修改堆头。所以该处有个大小的判断，如果找到了，那就总是插入到第二个chunk的位置处。如果没有一样大小的话，那就是把这个chunk作为新的堆头，下面的else里面就是对fd_nextsize和bk_nextsize进行设置。同时最后是由插入操作的，所以需要更新下bck的值。注意，这里的链表是有顺序的，也就是除了头部和尾部的chunk，fd_nextsize要永远指向比自己小的chunk，bk_nextsize要永远指向比自己大的chunk。此时关于我们从unsortedbin中取出的chunk的整理完了。接下来继续我们的分配
    if (!in_smallbin_range (nb))
        {
          bin = bin_at (av, idx);
          /* skip scan if empty or largest chunk is too small */
          if ((victim = first (bin)) != bin &&
              (unsigned long) (victim->size) >= (unsigned long) (nb))
            {
              victim = victim->bk_nextsize;
              while (((unsigned long) (size = chunksize (victim)) bk_nextsize;
              /* Avoid removing the first entry for a size so that the skip
                 list does not have to be rerouted.  */
              if (victim != last (bin) && victim->size == victim->fd->size)
                victim = victim->fd;
              remainder_size = size - nb;
              unlink (victim, bck, fwd);
              /* Exhaust */
              if (remainder_size size |= NON_MAIN_ARENA;
                }
              /* Split */
              else
                {
                  remainder = chunk_at_offset (victim, nb);
                  /* We cannot assume the unsorted list is empty and therefore
                     have to perform a complete insert here.  */
                  bck = unsorted_chunks (av);
                  fwd = bck->fd;
      if (__glibc_unlikely (fwd->bk != bck))
                    {
                      errstr = "malloc(): corrupted unsorted chunks";
                      goto errout;
                    }
                  remainder->bk = bck;
                  remainder->fd = fwd;
                  bck->fd = remainder;
                  fwd->bk = remainder;
                  if (!in_smallbin_range (remainder_size))
                    {
                      remainder->fd_nextsize = NULL;
                      remainder->bk_nextsize = NULL;
                    }
                  set_head (victim, nb | PREV_INUSE |
                            (av != &main_arena ? NON_MAIN_ARENA : 0));
                  set_head (remainder, remainder_size | PREV_INUSE);
                  set_foot (remainder, remainder_size);
                }
              check_malloced_chunk (av, victim, nb);
              void *p = chunk2mem (victim);
              alloc_perturb (p, bytes);
              return p;
            }
        }
这里的话就是要从largebin中取出chunk了，一样的，用idx获得索引，用索引获得对应的链表指针，看这个if的判断条件，first的宏定义
    #define first(b)     ((b)->fd)
判断这里的是否为空，或者最大的chunk都不能满足请求的size，那就进入else的部分，而这里的一样的使用了remainder这个chunk，区别就是不能断定此时的unsortedbin里面是否是空的，插入操作需要注意一下。回到if哪里，如果条件可以满足，那就获得最小的那个chunk，然后往前遍历，找到size大于nb的第一个chunk，同样，避免修改堆头的指针，找到以后，因为不是恰好满足，所以需要分割，第一部分返回给用户，第二部分分两种情况，如果size小于MINSIZE，就不能当做最小的chunk了，那就一整个的返回给用户，如果可以，那就把剩余的部分当做remainder插入进去unsortedbin中。再继续往下看
    ++idx;
    bin    = bin_at( av, idx );
    block    = idx2block( idx );
    map    = av->binmap[block];
    bit    = idx2bit( idx );
    for (;; )
    {
        /* Skip rest of block if there are no more set bits in this block.  */
        if ( bit > map || bit == 0 )
        {
            do