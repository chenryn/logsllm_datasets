ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
45"
00401040
 call + $5 
00401045
 pop ecx
00401046
 inc ecx 
00401047
 inc ecx 
00401048
 add ecx, 4 
00401049
 add ecx, 4   
0040104A
 push ecx 
0040104B
 ret 
0040104C
 sub ecx, 6 
0040104D  
 dec ecx 
0040104E
 dec ecx 
0040104F
 jmp 0x401320 
v Call stack manipulation:  
ü  Do you know what’s 
happening here?   J 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
"METASM 
(keystone + capstone + unicorn) 
DEF"CON"CHINA"1.0"(2019)"
46"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
47"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
sub!eax,!B9!
add!eax,ecx!
add!eax,!B9!
sub!eax,!B9!
sub!eax,!86!
add!eax,ecx!
add!eax,!86!
push!edx!
mov!edx,!42!
inc!edx!
dec!edx!
add!edx,!77!
add!eax,!edx!
pop!edx!
push!ebx!
mov!ebx,!B9!
sub!eax,!ebx!
pop!ebx!
sub!eax,!55!
sub!eax,!32!
add!eax,!ecx!
add!eax,!50!
add!eax,!37!
push!edx!
push!ecx!
mov!ecx,!49!
mov!edx,!ecx!
pop!ecx!
inc!edx!
add!edx,!70!
dec!edx!
add!eax,!edx!
pop!edx!
add!eax,!ecx!!
1!
2!
3!
4!
How to reverse the obfuscation and, from stage 4, to return 
to the stage 1?  J 
DEF"CON"CHINA"1.0"(2019)"
48"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  METASM works as disassembler, assembler, debugger, compiler and linker.  
ü  Key features:  
ü  Written in Ruby 
ü  C compiler and decompiler 
ü  Automatic backtracking 
ü  Live process manipulation 
ü  Supports the following architecture: 
ü  Intel IA32 (16/32/64 bits) 
ü  PPC 
ü  MIPS 
ü  Supports the following file format: 
ü  MZ and PE/COFF 
ü  ELF 
ü  Mach-O 
ü  Raw (shellcode) 
ü  root@kali:~/programs# git clone https://github.com/jjyg/metasm.git 
ü  root@kali:~/programs# cd metasm/ 
ü  root@kali:~/programs/metasm# make 
ü  root@kali:~/programs/metasm# make all 
ü Include the following line into .bashrc file to indicate the Metasm directory installation: 
ü export RUBYLIB=$RUBYLIB:~/programs/metasm 
DEF"CON"CHINA"1.0"(2019)"
49"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
This instruction was inserted to make 
the  
eax register evaluation easier. J 
v  based on metasm.rb file 
and Bruce Dang code. 
DEF"CON"CHINA"1.0"(2019)"
50"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
initialize and disassemble 
code since beginning (start). 
list the assembly code. 
determines which is the final 
instruction to walk back from there. J  
initialize the backtracking engine.  
DEF"CON"CHINA"1.0"(2019)"
51"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Backtracking from the last instruction.  
Show only the effective instructions, 
which really can alter the final result.  
logs the sequence of 
backtracked 
instructions. 
DEF"CON"CHINA"1.0"(2019)"
52"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Remember:!this!is!our!obfuscated!code.!J!
DEF"CON"CHINA"1.0"(2019)"
53"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
54"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Game!over.!
J
DEF"CON"CHINA"1.0"(2019)"
55"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Output"originated"from"backtracing_log.select"
command"(in"reverse)"
DEF"CON"CHINA"1.0"(2019)"
56"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  Emulation is always an excellent method to solve practical reverse engineering problems 
and , fortunately, we have the uEmu and also could use the Keystone Engine assembler 
and Capstone Engine disassembler. J 
ü  Keystone Engine acts an assembler and:  
ü  Supports x86, Mips, Arm and many other architectures.  
ü  It is implemented in C/C++ and has bindings to Python, Ruby, Powershell and C# 
(among other languages).  
ü  Installing Keystone:  
ü  root@kali:~/Desktop# wget https://github.com/keystone-engine/keystone/archive/0.9.1.tar.gz 
ü  root@kali:~/programs# cp /root/Desktop/keystone-0.9.1.tar.gz . 
ü  root@kali:~/programs# tar -zxvf keystone-0.9.1.tar.gz  
ü  root@kali:~/programs/keystone-0.9.1# apt-get install cmake 
ü  root@kali:~/programs/keystone-0.9.1# mkdir build ; cd build 
ü  root@kali:~/programs/keystone-0.9.1/build# apt-get install time 
ü  root@kali:~/programs/keystone-0.9.1/build# ../make-share.sh 
ü  root@kali:~/programs/keystone-0.9.1/build# make install 
ü  root@kali:~/programs/keystone-0.9.1/build# ldconfig 
ü  root@kali:~/programs/keystone-0.9.1/build# tail -3 /root/.bashrc  
ü  export PATH=$PATH:/root/programs/phantomjs-2.1.1-linux-x86_64/bin:/usr/local/bin/kstool 
ü  export RUBYLIB=$RUBYLIB:~/programs/metasm 
ü  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib 
DEF"CON"CHINA"1.0"(2019)"
57"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
instructions from the 
original obsfuscated 
code 
Creating a keystone engine 
Assembling our instructions 
using keystone engine. 
Freeing memory 
and closing 
engine.  
DEF"CON"CHINA"1.0"(2019)"
58"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
59"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
To install Capstone:  apt-get install libcapstone3 libcapstone-dev   J 
DEF"CON"CHINA"1.0"(2019)"
60"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Original!code!disassembled!
by!Capstone.!J!
DEF"CON"CHINA"1.0"(2019)"
61"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
IDA!Pro!confirms!our!
disassembly!task.!J!
DEF"CON"CHINA"1.0"(2019)"
62"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
set up before  
running uEmu 
This result confirms our previous 
conclusion.  
ü  Download uEmu from https://github.com/alexhude/
uEmu 
ü  Install Unicorn: pip install unicorn. 
ü  Load uEmu in IDA using ALT+F7 hot key.  
ü  Right click the code and choose the uEmu sub-menu. 
DEF"CON"CHINA"1.0"(2019)"
63"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  # git clone https://github.com/unicorn-engine/unicorn.git 
ü  # cd unicorn ; ./make.sh  
ü  # ./make.sh install 
DEF"CON"CHINA"1.0"(2019)"
64"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
65"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
66"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
67"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
68"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
69"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
"MIASM 
DEF"CON"CHINA"1.0"(2019)"
70"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
71"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  MIASM is one of most impressive framework for reverse engineering, which is able to 
analyze, generate and modify several different types of programs.   
ü  MIASM supports assembling and disassembling programs from different platforms such 
as ARM, x86, MIPS and so on,  and it also is able to emulate by using JIT.  
ü  Therefore, MIASM is excellent to de-obfuscation.  
ü  Installing MIASM:  
ü  git clone https://github.com/serpilliere/elfesteem.git elfesteem 
ü  cd elfesteem/ 
ü  python setup.py build 
ü  python setup.py install 
ü  apt-get install clang texinfo texi2html 
ü  apt-get remove libtcc-dev 
ü  apt-get install llvm 
ü  cd .. 
ü  git clone http://repo.or.cz/tinycc.git 
ü  cd tinycc/ 
ü  git checkout release_0_9_26 
ü  ./configure --disable-static 
ü  make 
ü  make install 
DEF"CON"CHINA"1.0"(2019)"
72"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  pip install llvmlite 
ü  apt-get install z3 
ü  apt-get install python-pycparser 
ü  git clone https://github.com/cea-sec/miasm.git 
ü  root@kali:~/programs/miasm# python setup.py build 
ü  root@kali:~/programs/miasm# python setup.py install 
ü  root@kali:~/programs/miasm/test# python test_all.py 
ü  apt-get install graphviz 
ü  apt-get install xdot 
ü  (testing MIASM) root@kali:~/programs# python /root/programs/miasm/example/disasm/
full.py -m x86_32 /root/programs/shellcode 
INFO : Load binary 
INFO : ok 
INFO : import machine... 
INFO : ok 
INFO : func ok 0000000000001070 (0) 
INFO : generate graph file 
INFO : generate intervals 
[0x1070 0x10A2] 
INFO : total lines 0 
ü  (testing MIASM) xdot graph_execflow.dot 
DEF"CON"CHINA"1.0"(2019)"
73"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
74"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Opens our file. The Container provides 
the byte source to the disasm engine.  
Instantiates the assemble engine using  
the x86 32-bits architecture.  
Runs the recursive transversal 
disassembling since beginning.  
Generates a dot graph. 
Set “llvm” as Jit engine to 
emulation and initialize the 
stack.   
Set the virtual start 
address, register values 
and memory protection.   
Adds a breakpoint at 
the last line of code.  
Run the emulation. 
DEF"CON"CHINA"1.0"(2019)"
75"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Disassembling our code (again) J 
DEF"CON"CHINA"1.0"(2019)"
76"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
77"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Our proposed code. 
J 
DEF"CON"CHINA"1.0"(2019)"
78"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Get the IRA converter.  
Initialize and run the 
Symbolic Execution Engine.  
DEF"CON"CHINA"1.0"(2019)"
79"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
80"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
The same conclusion from 
our previous tests. J 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
"TRITON 
DEF"CON"CHINA"1.0"(2019)"
81"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
82"
q  TRITON"
"
ü It"can"be"downloaded"from"https://triton.quarkslab.com/"
ü Based"on"Intel"Pin"instrumentation"tool:"https://software.intel.com/en-us/
articles/pin-a-dynamic-binary-instrumentation-tool"
ü Triton"offers"a"C/C++/Python"interface"provides:"
""
ü dynamic"symbolic"execution"
ü run"time"registry"information"and"memory"modification"
ü taint"engine"
ü Z3"interface"to"handle"contraints"
ü snapshot"engine"(it"is"not"necessary"to"restart"the"program"every"time,"
but"only"restores"memory"and"register"states)"
ü access"to"Pin"funtions"
ü symbolic"fuzzing"
ü gather"code"coverage""
ü Supports"x86"and"x64"architecture.""
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
83"
ü Triton"supports:""
ü symbolic"execution"mode:"
ü emulates"instruction"effects."
ü allows"us"to"emulate"only"part"of"the"program"(excellent"for"
analyzing"branches)."
"
ü concolic"execution"mode:"
ü "allows"us"to"analyze"the"program"only"from"start."
"