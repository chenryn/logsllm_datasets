title:VScape: Assessing and Escaping Virtual Call Protections
author:Kaixiang Chen and
Chao Zhang and
Tingting Yin and
Xingman Chen and
Lei Zhao
VScape: Assessing and Escaping Virtual Call Protections
Kaixiang Chen, Institute for Network Science and Cyberspace, Tsinghua University; 
Chao Zhang, Institute for Network Science and Cyberspace, Tsinghua University/ 
Beijing National Research Center for Information Science and Technology/ 
Tsinghua University-QI-ANXIN Group JCNS; Tingting Yin and Xingman Chen, 
Institute for Network Science and Cyberspace, Tsinghua University; Lei Zhao, 
School of Cyber Science and Engineering, Wuhan University
https://www.usenix.org/conference/usenixsecurity21/presentation/chen-kaixiang
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.VScape: Assessing and Escaping Virtual Call Protections
Kaixiang Chen1, Chao Zhang1;2;3(cid:12), Tingting Yin1, Xingman Chen1, Lei Zhao4
1Institute for Network Science and Cyberspace, Tsinghua University
2Beijing National Research Center for Information Science and Technology
3Tsinghua University-QI-ANXIN Group JCNS
4School of Cyber Science and Engineering, Wuhan University
{ckx18,ytt18,cxm16}@mails.tsinghua.edu.cn, PI:EMAIL, PI:EMAIL
Abstract
Many control-ﬂow integrity (CFI) solutions have been pro-
posed to protect indirect control transfers (ICT), including
C++ virtual calls. Assessing the security guarantees of these
defenses is thus important but hard. In practice, for a (strong)
defense, it usually requires great manual efforts to assess
whether it could be bypassed, when given a speciﬁc (weak)
vulnerability. Existing automated exploit generation solu-
tions, which are proposed to assess the exploitability of vul-
nerabilities, have not addressed this issue yet.
In this paper, we point out that a wide range of virtual
call protections, which do not break the C++ ABI (applica-
tion binary interface), are vulnerable to an advanced attack
COOPLUS, even if the given vulnerabilities are weak. Then,
we present a solution VScape to assess the effectiveness of
virtual call protections against this attack. We developed a
prototype of VScape, and utilized it to assess 11 CFI solu-
tions and 14 C++ applications (including Firefox and PyQt)
with known vulnerabilities. Results showed that real-world
applications have a large set of exploitable virtual calls, and
VScape could be utilized to generate working exploits to by-
pass deployed defenses via weak vulnerabilities.
1 Introduction
To mitigate control ﬂow hijacking attacks, many control-ﬂow
integrity (CFI) solutions [1, 2] have been proposed. In prin-
ciple, CFI solutions validate the transfer targets of each in-
direct control transfer (ICT) instruction, including indirect
call/jump and return instructions, enforcing them fall into a
corresponding equivalence class (EC). Virtual functions in
C++ programs are lowered to indirect call instructions in bi-
nary code, and thus beneﬁt from CFI solutions as well.
Early CFI solutions [3, 4] did not take C++ semantics
into consideration, and thus allowed virtual calls (denoted as
vcalls) to transfer to a large number of targets. Researchers
pointed out their weaknesses and proposed the COOP [5] at-
tack to bypass these defenses at virtual call sites. Some other
CFI solutions [6, 7] are C++ semantics aware, and provide
ﬁne-grained defenses for virtual calls, defeating the COOP
attack. Recent CFI solutions [2, 8] take runtime information
(e.g., data origin) to further reduce the size of EC for virtual
calls and provide a stronger defense.
Despite a considerable amount of efforts to defeat attacks,
it is still not clear whether these defenses are strong enough
to protect virtual calls from advanced attacks, given the con-
tinuously evolving arm-race between offense and defense.
For example, according to the C++ language speciﬁcation,
a virtual function call site, which expects a virtual function
from a statically declared base class, by design is allowed
to jump to all variant virtual functions overridden in derived
classes. Thus, the EC set is still large.
In practice, it re-
quires great manual efforts to assess the exploitability of (po-
tentially weak) vulnerabilities, especially when some (poten-
tially strong) defenses are deployed.
In general, analysts
have to comprehend the application and the vulnerability,
and search for proper exploit primitives in the target applica-
tion which may have a large code base, then assemble these
primitives to exploit the target vulnerability. This process is
time-consuming and needs automated solutions.
To automatically assess the exploitability of vulnerabil-
ities, several automated exploit generation (AEG) solu-
tions [9–11] have been proposed. However, none of them
have taken modern defenses into consideration, and thus fail
to assess their security guarantees. For instance, AEG so-
lutions targeting heap vulnerabilities, e.g., Revery [11] and
Gollum [12], only work well when the defense ASLR [13]
is disabled. AEG solutions targeting stack-based buffer over-
ﬂow, e.g., Q [14], CRAX [15] and PolyAEG [16], cannot
bypass stack canary [17]. Thus, developing an AEG solution
to assess the security of a defense solution is necessary.
In this paper, we assess the effectiveness of virtual calls
defenses and proposed a solution VScape to facilitate the as-
sessment. We point out that, each virtual call protection is
vulnerable to an advanced attack COOPLUS, as long as it (1)
does not break the application-binary interface (ABI) of vir-
tual calls, (2) cannot guarantee the integrity of C++ objects’
VTable pointers, and (3) allows multiple transfer targets at
virtual call sites. COOPLUS is essentially a code reuse
USENIX Association
30th USENIX Security Symposium    1719
attack, which invokes type-conformant (but out-of-context)
virtual functions at victim virtual call sites. Such invocations
are allowed by C++ semantic aware CFI solutions, but op-
erate on out-of-context objects, and thus could cause further
consequences, e.g., control ﬂow hijacking.
VScape could facilitate this exploitation process. Specif-
ically, it analyzes the target application, scans all vcall sites
and ﬁnds compatible classes, then ﬁlters virtual functions
that could cause memory safety violations, and ﬁnally com-
piles proper exploit primitives to generate ﬁnal exploits. To
the best of our knowledge, VScape is the ﬁrst solution to
generate exploits to bypass virtual call protections. It shows
following intriguing features which previous researches have
not exhibited. It is able to assess the security of a large num-
ber of defenses for virtual calls and assist in generating ex-
ploits to bypass them. It could assess the exploitability of
many types of vulnerabilities, even some types of vulnera-
bilities that are hard to exploit in practice. Further, it could
yield a massive number of exploit primitives, which could
greatly facilitate manual exploit generation.
We implemented a prototype of VScape based on
Clang [18] and Angr [19], and evaluated it on 14 real world
C++ applications including Firefox and PyQt, which are
hardened with 11 CFI solutions. Results showed there is a
large attack surface of exploitable virtual call sites in real
world applications. Most virtual call protections can be by-
passed by COOPLUS, and VScape could be utilized to gen-
erate working COOPLUS exploits when given known vulner-
abilities. We pointed out that, to fully mitigate COOPLUS, a
solution which protects the integrity of vptr with a low per-
formance overhead and good compatibility is demanded.
In summary, we made the following contributions:
• We pointed out an advanced attack COOPLUS, able to
bypass a wide range of virtual call protections, even when
only weak vulnerabilities are given.
• We presented a solution VScape to assess the effectiveness
of virtual call protections against COOPLUS, including
the available attack surface and exploit primitives, and to
assist in generating working exploits.
• We implemented a prototype of VScape and evaluated it
on real world applications Firefox and PyQt hardened with
virtual call protections. Results showed that the attack sur-
face is large and bypassing virtual call protections is feasi-
ble in practice.
2 Background
2.1 VTables and Virtual Calls
In C++ applications, a virtual function in a base class can
be overridden in a derived class. When a virtual function
claimed in a base class is invoked at a virtual call site, the
actual function invoked at runtime may belong to a derived
class, depending on the runtime object’s type.
To support this polymorphism feature, compilers employ
a dynamic dispatch mechanism, in which polymorphic func-
tions are invoked via indirect call instructions. As presented
in the Itanium and MSVC C++ ABI, which are followed
by major compilers including GCC, Clang and Microsoft
MSVC, pointers to all polymorphic virtual functions (de-
noted as vfptr) of each class are kept in a separate Virtual
Function Table (VTable) bound to this class, and a pointer
vptr to the VTable is attached to each object of this class.
Since C++ supports multiple types of inheritances, including
single, multiple, and virtual inheritance, an object may have
multiple vptr located at different offsets.
A typical virtual call is shown as below, which comprises
of 3 steps: (1) dereference the this pointer of the runtime ob-
ject to get its vptr, i.e., address of the VTable; (2) ﬁnd the
vfptr in target VTable, by adding a ﬁxed offset, and (3) re-
trieve the vfptr and invoke the virtual function.
mov rax, qword ptr [rcx]; load vptr
add rax, 16;
find vfptr
invoke vf
call [rax];
Note that, vptr is retrieved from an object in the heap. There-
fore, given a proper vulnerability, an adversary could exploit
it to tamper with vptr, hijack the followed virtual call. This
is the common and well known VTable hijacking [20] attack.
2.2 Virtual Call Protections
To defend against VTable hijacking attacks, researchers have
proposed multiple protection techniques.
As tampering with vptr is the entry to launch VTable hi-
jacking attacks, a straightforward solution is to guarantee
the integrity of vptr. Generic data ﬂow integrity (DFI) tech-
niques [21, 22] can serve this purpose. VPS [23] directly
provides DFI to vptr for binary programs, but suffers from
precision issues in binary analysis. This type of defense can
protect vptr from being overwritten, but in general has high
runtime overheads and is rarely deployed in practice.
Another type of defenses breaks the C++ ABI to protect
virtual calls. For instance, CFIXX [24] places vptr in a sep-
arate metadata table, and leverages the Intel Memory Protec-
tion Extensions (MPX) hardware feature to protect the meta-
data table’s integrity. VTrust [7] replaces each vptr with an
index to a protected table, and enforces users to use VTable
pointers in the table. However, it does not protect the in-
tegrity of the vptr , leaving potential attack surfaces.vptr, In
general, this type of protection breaks the C++ ABI to block
attackers, but at the same time, it leads to a severe compati-
bility issue and hinders the broad deployment.
The third type of protection technique checks the validity
of each virtual call’s target. Most CFI solutions fall into this
category. Some recent CFI solutions, e.g., OS-CFI [2] and
µCFI [8], utilize runtime data ﬂow information to reduce the
size of EC (even to 1). If a virtual call is only allowed to
one target, then it is guaranteed to be safe. However, runtime
data collection in general is hard to deploy in practice.
Most CFI solutions aim at both security and practical-
1720    30th USENIX Security Symposium
USENIX Association
ity. Coarse-grained CFI solutions, e.g., BinCFI [3] and CC-
FIR [4], do not take type information or C++ semantics into
consideration, and thus allow virtual calls to transfer to a
large number of targets. Fine-grained CFI solutions, on the
other hand, utilize such information to provide stronger de-
fenses. For instance, LLVM-CFI [6] and TypeArmor [25]
utilize type information, while VTrust [7] and vfGuard [26]
utilize C++ semantics, to provide stronger defenses for vir-
tual calls. As this type of defenses is popular and practical,
we focus on assessing their effectiveness in this paper.
2.3 The COOP Attack
Multiple studies [27, 28] have demonstrated that coarse-
grained CFI solutions are too permissive and can be by-
passed. Speciﬁcally, for virtual calls, researchers proposed
the counterfeit object-oriented programming (COOP) [5] at-
tack to bypass coarse-grained defenses at virtual call sites.
COOP is, in essence, a code reuse attack, which utilizes
the fact that all existing virtual functions (even arbitrary
address-taken functions) are allowed at virtual calls if CFI so-
lutions do not precisely consider C++ semantics. COOP ex-
ploits two key factors: (F1) a set of virtual call sites (denoted
as vfgadget) which invoke existing but out-of-context virtual
functions, and (F2) a special vfgadget which can orchestrate
other vfgadgets, and accordingly prepares a set of counterfeit
C++ objects to chain vfgadgets and launch attacks.
However, the factor F2 is rare in applications, while the
factor F1 relies on the assumption that deployed defenses
have not considered C++ semantics. As the COOP paper [5]
claimed, COOP’s control ﬂow can be reliably prevented
when precise C++ semantics are considered from source
code. Thus, COOP cannot bypass many CFI solutions, e.g.,
LLVM-CFI [6] and VTrust [7].
3 COOPLUS Attack
Different from the claim made in [5], we pointed out COOP
is more powerful than that realized by its authors.
In this
section, we present a variant of COOP, named COOPLUS,
which is able to bypass C++ semantics aware CFI defenses.
3.1 Assumptions
We assume that widely deployed mitigations like includ-
ing DEP (Data Execution Prevention [29]), ASLR (Address
Space Layout Randomization [13]) and stack canary [17],
are enabled on the target. We also assume that the target vir-
tual call protection to assess is C++ semantics aware but does
not break the C++ ABI nor protect the integrity of vptr.
On the other hand, we assume a weak vulnerability (e.g.,
one-byte heap overﬂow) is given1. Existing literature on at-
tacks usually assumes the target application has a strong vul-
nerability, e.g., which allows writing arbitrary values to arbi-
trary addresses. In this paper, we only assume the target ap-
plication has one memory corruption vulnerability that can
1But weaker vulnerabilities have lower probabilities to be exploited.
Figure 1: An example COOPLUS attack.
be exploited to tamper with one C++ object’s vptr. This as-
sumption makes our attack more realistic and reasonable.
We only focus on escaping virtual call protections, but
other defenses in use may also hinder end-to-end exploits.
Thus, we assume the adversary has necessary capabilities,
e.g., information leaks and heap spraying, to bypass other
defenses (e.g., ASLR). Automated escaping those defenses
is out of the scope of this paper.
3.2 Principle of COOPLUS
COOPLUS is, in essence, a code reuse attack. More speciﬁ-
cally, it is a variant of the proposed COOP attack. As COOP
bypasses coarse-grained CFI defenses by invoking existing
virtual functions at virtual call sites, COOPLUS invokes
only type-compatible virtual functions to bypass stronger de-
fenses, e.g., CFI solutions that are C++ semantics aware.
As shown in Figure 1, a virtual call site in the function foo
expects a virtual function declared in the Base class. By de-
sign, this vcall site could invoke any overridden virtual func-
tion in derived classes (e.g., Sub1 and Sub2 in the ﬁgure),
according to the C++ speciﬁcation. In other words, virtual
call protection has to allow virtual calls to invoke a large set2
of compatible virtual functions.
COOPLUS works as follows. The adversary ﬁrst picks a
vcall (e.g., a invocation of Base::func1) to hijack, then uti-
lizes the given (weak) vulnerability to corrupt a victim ob-
ject (e.g., of class S1, denoted as victim class) used at the
vcall. Speciﬁcally, she/he could replace the victim object’s
vptr with a VTable pointer of another class (e.g., class S2,
denoted as counterfeit class) derived from the base. Further
vcalls of this victim object (e.g., S1::func1) will invoke a
different virtual function (e.g., S2::func1, denoted as coun-
terfeit function). But ABI-conformant vcall protections will
not block this out-of-context invocation. Since objects of dif-
ferent classes have different layouts, the counterfeit function
may access ﬁelds (e.g., memberM) outside the victim object,
which may corrupt the relay object following this victim ob-