# DNS Rebinding and Protection Bypasses

## Overview
This document provides a detailed overview of DNS rebinding, common protection mechanisms, and how they can be bypassed. It also covers the Singularity tool, which can be used to exploit DNS rebinding vulnerabilities.

## Platforms and Latency
- **macOS, Ubuntu, Windows:**
  - **FS+Cache Flooding:** 15-40 seconds
  - **DNS Resolution Time:** 1 second
  - **Applicable to:** Any platform

- **iOS:**
  - **FS+Cache Flooding:** 5 seconds
  - **DNS Resolution Time:** 1 second
  - **Applicable to:** Any platform

## Protection Bypasses
### DNS Rebinding Protections
Singularity can bypass all known DNS rebinding protections, including:
- Unbound
- Dnsmasq
- pfSense
- OpenWRT
- OpenDNS (Cisco Umbrella)

### Common DNS Protections
#### Approaches:
- **Block RFC 1918 IP Addresses:**
  - 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16
- **Block Localhost (127.0.0.0/8)**
- **Block Local (Internal) Networks**
- **Block 0.0.0.0/8**

#### Tools:
- **Dnsmasq & Unbound:**
  - Widely used in pfSense, OpenWRT, and home routers (e.g., FRITZ!Box, ASUS)
- **Public DNS Services:**
  - OpenDNS: "Block internal IP addresses" feature blocks RFC 1918 IP addresses

### Dnsmasq Configuration
- `--stop-dns-rebind`: Rejects private IP ranges
- `--rebind-localhost-ok`: Exempts 127.0.0.0/8 from rebinding checks
- This configuration blocks RFC1918 addresses, 0.0.0.0/8, and 127.0.0.0/8, but does not block localhost.

### Unbound Configuration
- `private-address`: Configures specific internal IP address ranges to be blocked
- This configuration blocks RFC1918 IP addresses but does not block 0.0.0.0, 127.0.0.1, or localhost.

## DNS Rebinding Bypass Techniques
### Bypass #1: 0.0.0.0
- **Wikipedia Definition:** "0.0.0.0 is a non-routable meta-address used to designate an invalid, unknown, or non-applicable target."
- **Fact:** 0.0.0.0 works well on Linux and macOS to access the localhost.
- **Bypass Mechanism:** This technique bypasses protections that block DNS responses of 127.0.0.1.
- **Example:**
  ```sh
  $ dig s-1.2.3.4-0.0.0.0-474794-fs-e.d.rebind.it
  ;; QUESTION SECTION:
  ;s-1.2.3.4-0.0.0.0-474794-fs-e.d.rebind.it. IN A
  ;; ANSWER SECTION:
  s-1.2.3.4-0.0.0.0-474794-fs-e.d.rebind.it. 0 IN A 0.0.0.0
  ```

### Bypass #2: CNAME
- **CNAME Records:** Map one domain name to another.
- **Bypass Mechanism:** This technique bypasses protections that block DNS responses of private IP addresses by returning a CNAME record instead of an internal IP address.
- **Example:**
  ```sh
  $ dig s-1.2.3.4-wiki.nccgroup.com-123-fs-e.d.rebind.it
  ;; QUESTION SECTION:
  ;s-1.2.3.4-wiki.nccgroup.com-123-fs-e.d.rebind.it. IN A
  ;; ANSWER SECTION:
  s-1.2.3.4-wiki.nccgroup.com-123-fs-e.d.rebind.it. 9 IN CNAME wiki.nccgroup.com.
  ```

### Bypass #2a: localhost
- **Bypass Mechanism:** This technique bypasses protections that block DNS responses of 127.0.0.1 by returning a CNAME record of "localhost."
- **Example:**
  ```sh
  $ dig s-1.2.3.4-localhost-123-fs-e.d.rebind.it
  ;; QUESTION SECTION:
  ;s-1.2.3.4-localhost-123-fs-e.d.rebind.it. IN A
  ;; ANSWER SECTION:
  s-1.2.3.4-localhost-123-fs-e.d.rebind.it. 0 IN CNAME localhost.
  ```

## Hook and Control
### Interactive Browsing of Victim's Internal Network
- **Experimenting with Proxying without an HTTP Proxy:**
  - Tools like BeEF (Browser Exploitation Framework) and FireDrill can use a hooked browser via XSS or DNS rebinding as a gateway to otherwise unreachable networks.
  - **BeEF Requirement:** Configure the attacker's browser or operating system to use the BeEF HTTP proxy.
  - **Singularity Implementation:** Browses services via a hooked browser without requiring the attacker to set up an HTTP proxy.

### Proxy Architecture
- **Attacker Browser:**
  - Websocket: Connect and wait for instructions
- **Singularity:**
  - Manages the connection and communication
- **Hooked Target Browser:**
  - HTTP: Connect and select the hooked target browser
- **Target Service:**
  - HTTP: Fetch and respond

### Customized Golang’s RoundTripper
- **Implementation:**
  - Uses WS plain text protocol to package fetch() requests and responses.
  - Inflates the size of data in transit using base64 encoding (len ≈ 4/3 of len(message)).

### Dealing with Split Brains
- **Syncing State Between Attacker and Target Browsers:**
  - **Cookies:**
    - **Non-HttoOnly Cookies:**
      - Read from the target browser and transmit to the Singularity server.
      - Singularity sets them on the attacker browser for the target domain.
    - **HttpOnly Cookies:**
      - Cannot be read by JavaScript, so they are handled by the target browser.
  - **Credentials:**
    - Use `{credentials: 'include'}` to read cookies from a response to a fetch() request.
    - If the application requires HTTP authorization, pass credentials without being challenged for authentication.

### Demo 2: Hook & Control
- **Scanning for Vulnerable Hosts and Services:**
  - **Old World and Cool Hacks:**
    - Attempts to replicate nmap behavior without raw sockets.
    - Often unreliable or too complex for our purposes.
  - **Leveraging Modern APIs:**
    - Wrap in a web worker and distribute scan targets across 4 web workers.
    - Use fetch() with a timeout (300 ms) to check resource headers.
    - Pro-tip: Use lower timeouts for LAN and fast HTTP services, higher timeouts for different networks (e.g., across a VPN).

### Automation: Service Detection & Exploitation
- **Autoattack.html:**
  - Customizable automation and orchestration sample file.
  - Leverages all features of Singularity, including specific exploitation payloads, target selection, port scanning, and DNS strategy selection.

### Choosing the Right Targets
- **Mix and Match Different Specifications:**
  - Use 0.0.0.0, "localhost", and CNAMES for reliability, security controls bypass, and speed.
  - Find and use the external IP address to exploit routers/WiFi APs’ internal network-facing administration interfaces.
  - Use OSINT to determine local corporate domains and specify them as CNAMES.

### Service Detection
- **Singularity Payloads:**
  - Comes with attack payloads targeting services like Chrome DevTools Remote Debugger, Amazon AWS instance metadata, Ruby on Rails, etc.
  - Augmented with service detection routines to automatically detect and deliver the appropriate attack.

### Concluding Remarks
- **Protecting from DNS Rebinding:**
  - Use TLS on all services, including internal and localhost.
  - Always use authentication.
  - Validate the Host header of HTTP requests for correct values (e.g., 127.0.0.1).
  - Future: Consider using CORS for RFC 1918.

### Demo 3: Automation
1. **Portscan**
2. **Rebind in 3s**
3. **Auto-detect Services**
4. **Exploit**

### Additional Resources
- **Get the Slides+Notes at:** [https://bit.ly/Singularity_Defcon27](https://bit.ly/Singularity_Defcon27)
- **Get Singularity of Origin at:** [https://github.com/nccgroup/singularity](https://github.com/nccgroup/singularity)
  - **Features:**
    - DNS server to rebind DNS names to IP addresses.
    - HTTP server to serve HTML pages and JavaScript code.
    - Sample attack payloads: Chrome DevTools, Jenkins, and more.
    - Supports DNS CNAME to evade DNS filtering solutions.
    - Fast and efficient HTTP port scanner.
    - Attack automation: completely automate the scanning and exploitation.
    - Hook & control to exploit victim browser as an HTTP proxy.

### Contact Us
- **PI:EMAIL**
- **PI:EMAIL**