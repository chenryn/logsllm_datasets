Proposed 
Network 
Backdoor 
Figure 1: Windows Network Architecture 
NDIS operates below TDI.  Its primary purpose is to abstract the 
physical network hardware from network drivers.  It is possible for 
a  firewall  to  intercept  NDIS  functions  to  filter  traffic  at  a  lower 
level than TDI based driver.  Windows provides several methods of 
hooking  NDIS  functions  including  development  of  an  NDIS 
Intermediate  Driver,  developing  a  Filter  Hook  Driver  (Windows 
firewall  hook  driver),  and  registering  a  new  protocol  to  NDIS  to 
force  the  NDIS  protocol  characteristics  table  to  hook  the  TCPIP 
protocol  NDIS  functions.    Although  it  is  more  powerful,  NDIS 
based firewall solutions are more complex and will have difficulty 
associating  opened  ports  with  application 
layer  processes.  
Malware may also intercept NDIS functions in an effort to bypass 
host-based firewalls or intrusion detection systems.  One approach 
is  to  simply  replace  the  firewall  hooks  with  their  own  malicious 
hooks.    This  technique  was  demonstrated  in  the  “DeepDoor” 
rootkit  by  Joanna  Rutkowska  [5]  and  the  “Peligroso”  rootkit  by 
Greg  Hoglund  [6].    Such  changes,  however,  may  be  detected  by 
more advanced firewalls which validate the presence of their hooks 
and the integrity of their handlers. 
As mentioned, TDI and NDIS hooking techniques are used both by 
firewall  &  IDS  developers  as  well  as  malware  authors  in  an 
elaborate  game  of  cat  and  mouse.    The  general  trend  that  can  be 
observed, however, is that the lower (e.g. closer to the hardware) 
one goes, the greater their power and stealth.  Both TDI and NDIS 
hooking as used by malware authors may be viewed as a form of 
“man  in  the  middle”  attack.    Extending  this  form  of  attack  to  its 
logical conclusion would be the development of a stealthy network 
exfiltration  backdoor  that  exists  as  low  as  is  physically  possible 
(directly above the physical hardware).  While relatively rare due to 
their complexity, there has been some prior research into hardware 
level rootkits.  John Heasman discussed the development of proof 
of concept BIOS and PCI rootkits on Windows NT systems [24].  
The  remainder  of  this  paper  discusses  the  feasibility  and 
development of a proof of concept chipset level network backdoor.  
This  backdoor  successfully  evades  all  firewall  and  intrusion 
detection tools that we tested it against.  We provide the details of 
our  implementation  and  experimentation  on  2  popular  network 
cards in the following  sections  and  provide  recommendations  for 
mitigating this form of malware attack. 
3.  DESIGN & IMPLEMENTATION 
In  this  section,  we  discuss  our  development  of  a  chipset  level 
network backdoor capable of both receiving remote commands and 
exfiltrating  information  across  the  boundary  of  most  host-based 
commercial  firewalls  and 
intrusion  detection  systems.  Our 
backdoor resides below both the NDIS and TDI Operating System 
interfaces at the physical hardware layer of the network card. Thus, 
it is capable of bypassing any malicious code detection / prevention 
software  running  at  an  abstracted  level  above  the  hardware.  We 
chose  to  develop  and  install  our  proof  of  concept  code  as  a 
Windows  kernel  driver  to  simplify  testing  and  debugging. 
Unfortunately,  we  must  sacrifice  hardware  dependence  for  OS 
independence  and  increased  stealth.  As  a  result,  our  current 
implementation is limited to cards compatible with the Intel 8255x 
chipset.  It  is  neither  necessary  nor  desirable  for  us  to  extend  our 
implementation  to  support  a  larger  number  of  chipsets.  Our 
intention is to provide a proof of concept that addresses a critical 
hole in existing security technology, not provide the blueprints for 
malware  authors 
tool. 
Nevertheless, it remains that the Intel 8255x chipset is compatible 
with many existing Intel ethernet cards. 
to  develop  a  fully  featured  attack 
We break the details of our implementation down into 2 subtasks: 
data exfiltration and data infiltration.  
Offset 
Upper Word 
Lower Word 
0x00 
SCB Command Word 
SCB Status Word 
0x04 
SCB General Pointer 
Figure 2: 8255x System Control Block (SCB) 
127 
3.1.  Data Exfiltration 
Data exfiltration refers to the process involved in sending data out 
from  the  compromised  host.    We  send  data  out  by  interacting 
directly with the LAN controller hardware over the PCI bus.  The 
LAN controller acts as both a master and a slave on the PCI bus. In 
the  role  of  master,  it  interacts  with  system  memory  to  access 
transmit  and  receive  data  buffers.    As  a  slave,  the  host  processor 
accesses the LAN controller’s internal structures to read and write 
information to its on-chip registers.  These registers may be either 
I/O mapped or memory mapped.  The method to use is determined 
by system  software.      First,  we  give  a  brief  overview  of  the  Intel 
8255x frame transmission and reception architecture. 
The  Intel  8255x  chipset  consists  of  2  primary  components:  the 
Command Unit (CU) and the Receive Unit (RU).  Software issues 
commands to control these components through a memory mapped 
data structure referred to as the System Control Block (SCB).  The 
layout  for  this  structure  is  shown  in  Figure  2.    The  System 
Command Block consists of a command word, a status word, and a 
general  pointer.    Because  the  8255x  can  interrupt  the  CPU  for 
multiple events, the status word is checked to determine the cause 
of interrupts.  The command word is used to mask device interrupts 
and  send  commands  to  the  device  while  the  value  of  the  general 
pointer varies depending on the command being sent to the device.  
Various commands cause the device to activate, suspend, resume, 
or  idle.    The  CU  is  primarily  involved  with  frame  transmission 
while the RU is primarily involved with receiving frames.   
COMMAND BLOCK LIST 
(shared system memory) 
SCB 
Cmd 
Block 
Cmd 
Block 
Cmd 
Block 
Figure 3: 8255x Command Block List 
The CU’s frame transmission function operates upon another data 
structure  called  the  Command  Block  List  (CBL).  The  CBL  is  a 
linked  list  data  structure  in  shared  system  memory  consisting  of 
Command  Blocks  containing  command  parameters  and  status 
information.  These  blocks  include  diagnostic  and  configuration 
commands in addition to the transmit command.  Figure 3 shows 
the layout of the command block list. 
Transmitting  a  packet  is,  in  fact,  a  fairly  straightforward  process. 
We must first construct 2 essential data structures: the data packet 
and  the  Transmit  Command  Block  (TCB),  a  special  type  of 
Comand Block for the transmit command.  The steps are outlined 
below and illustrated in Figure 4. 
1.  First, we (on an infected computer, “we” refers to the rootkit 
program)  construct  the  data  packet.    Because  we  don’t  have 
access  to  the  upper  level  NDIS  or  TDI  drivers,  this  process 
must be performed manually.  For simplicity, we chose to use 
the  UDP  protocol  in  our  proof  of  concept  implementation. 
Thus, the basic packet structure consists of an Ethernet header 
followed by an IP header, followed by a UDP header followed 
by the payload.   
2.  Second,  we  build  a  Transmit  Command  Block.    The  exact 
format  of  this  data  structure  is  contained  in  the  Intel  82558 
chipset  documentation.    Typically,  the  Transmit  Command 
Block is followed in memory by the transmit data buffer.  
3.  After  the  data  packet  and  Transmit  Command  Block  are 
defined, we check the LAN controller to ensure that it is in an 
idle state and load its System Control Block’s General Pointer 
field  with  the  physical  address  of  the  Transmit  Command 
Block.   
4.  Finally we initiate execution of the LAN controller by sending 
it a CU Start command.  This causes it to begin executing the 
Transmit Command Block that will send the data packet out 
over the network.  
Data exfiltration is highly stealthy because it does not require any 
long term detectable changes to any of the host Operating System 
networking  components  or  data  structures.    Furthermore,  there  is 
no easy way to monitor the LAN controller on the x86 architecture 
because  the  8255x  data  structures  are  addressed  in  physical 
memory.    The  x86  is  capable  of  monitoring  virtual  memory 
accesses, but not physical memory accesses. 
1
CU Start 
SCB 
2 
Transmit 
Control 
Block 
Frame 
Data 
3 
4 
Figure 4: Frame transmission  
3.2.  Data Infiltration 
In contrast to exfiltration, data infiltration refers to the process of 
receiving incoming data from an external source.   
Packet  reception  on  the  8255x  is  based  upon  the  concept  of  a 
Receive Frame Area (RFA). The layout of RFA is shown in Figure 
5. The RFA is a region of physical memory that is shared between 
the NIC and the CPU.  It is subdivided into blocks called Receive 
Frame Descriptors (RFDs).  The Receive Frame Descriptor is a data 
structure consisting of two parts: a header followed by a data buffer 
capable of holding the maximum Ethernet packet size.  Every frame 
received by the NIC controller is described by one RFD. The RFD 
layout  is  shown  in  Figure  6.  The  NIC’s  RFA  can  be  located  by 
reading the “general pointer” field from the NIC’s Status Control 
Block. The last RFD in the list is indicated by setting the EL bit.    
Frame reception occurs when the device detects a frame on the link 
with  an  address  that  matches  either  the  individual  address,  a 
multicast address, or broadcast address.  It transfers the frame to the 
receive FIFO which in turn causes the NIC’s receive DMA unit to 
transfer the frame to main memory on the host machine.  Successful 
frame reception, in turn, causes the NIC to raise a Frame Receive 
(FR)  interrupt  on  the  host  machine.    The  FR  interrupt  handler  is 
responsible  for  extracting  the  RFD  data,  setting  the  appropriate 
128 
Before 
After 
APIC 
APIC 
(CPU) 
IDT 
0x73 
0x22 
0x73 
NDIS 
Hook 
NDIS 
Figure 7: Interception of Packet Receive using IOAPIC Interrupt Redirection 
status  bits  in  the  RFD  header,  and  ensuring  that  it  is  passed  to 
kernel and user components higher in the networking stack. 
On Windows, during normal operating, the RFA is  cooperatively 
managed  between  the  Windows  NDIS  driver  and  the  Intel  Bus 
Driver  (e100b325.sys).    A  malicious  driver  can  circumvent  the 
normal operation of packet arrival by  inserting  itself  between  the 
physical hardware interface and the Operating System.  This is in 
contrast  to  previous  stealthy  network  backdoors  like  Joanna’s 
DeepDoor rootkit [5] which inserted themselves in NDIS, deep in 
the  OS  networking  stack,  yet  still  above  the  physical  hardware 
interface.  Our backdoor operates one level lower.  By intercepting 
the NIC’s FR interrupt that indicates packet arrival, we can inspect 
arriving frames prior to the OS or any firewall software running on 
the host machine. 
SCB 
RECEIVE FRAME AREA 
(shared system memory) 
RFD 
Frame 
Data 
RFD 
Frame 
Data 
RFD 
Frame 
Data 
Figure 5: 8255x Receive frame area 
Offset 
Command Word 
Status Word 
0x00 
0x04 
0x08 
E
L 
S 
000000
00 
H  SF 