目完成或取消（许多开发项目都以此结束，I2L），但很少有人从中
吸取经验。大多数组织中的经理人似乎很少奖赏那些寻找这类知识
的人。也许是害怕他们找出来的东西（害怕必须为此负责），或者
也可能对此缺乏兴趣。当我们花费时间来开展新项目时，没有人愿
意回顾痛苦或令人沮丧的经验。
Henry Petroski在其 《To Engineer Is Humman:The Role of Failure is
SuccessfiulDesign》（VintageBooks出版，1992年）一书中提及：许
多工程的突破都来源于失败的结果。产生这种现象的部分原因在
于，失败会使我们集中注意力，重新检查我们忘却的假设（当原型
出现问题时，很难假装一切正常）。正如KarlPopperl-所说的，只
存在两种理论：错误的理论和不完整的理论。如果没有失败，我们
461
---
## Page 463
就会变得骄傲，忘记了我们对事物的了解实际上并不像我们所想像
的那样周全。
因此，窍门就是尽可能从他人的失败中学习。我们应该利用他人的
经验来应对未来的挑战。虽然失败的表象对于不同项目有很大的差
异，但引发这些问题的根本原因或团队行动也许可以借鉴（并且是
可避免的）。即使是我们自己的项目，也要避免逃避失败的习惯。
相反，我们应该视之为学习机会。失败的因素是什么？哪些因素可
能很容易减少或消除？根据Petroski的说法，只要我们有勇气仔细检
查发生过的事情，从实际失败中学得的实践知识将是我们取得进步
的最有力的源泉。
也许这就是为什么波音公司——全球最大的飞机设计和制造公司之
一，会留着一本黑皮书，来记载从过去的设计和制造失败中获取的
经验教训[L。自从波音公司成立之后，就一直保存着这份文件，用
来帮助现代设计师，从过去的经历中吸取经验。任何这样做的组
织，都可以增加项目成功的几率，同时也有助于建立一种可以公并
讨论、面对失败的环境，而非否认和隐藏失败。看起来，软件开发
人员也需要保存他们自己的黑皮书。
Web开发、厨房及急诊室
历史的一个问题就是并不总是能和现实产生关联。要把几十年前的
经验用到如今差别似乎很大的事情上，又要维持同理性，的确很
滩。另一种做法是，对当代几种有趣的项目进行比较。虽然没有工
程史的庄严感，不过，却让人可以亲身体验和观察。通常，亲眼所
见是能给人充分信息的唯一办法，只有通过这些信息，才能在众多
概念间建立联系。
例如，我知道有位Web并发人员，他认为自己的工作和宇宙史上的
任何事物都不一样。他之所以会这么觉得，是因为Web并发需要他
作复杂的工程决策，其中包括各种设计和协调工作，以及在几个小
时甚至几分钟内就得完成的验证修改是否正确、然后就对世界发布
的工作。因此，他认为他的项目及任务管理不同于以前看到的事
物。对那些他所精通的CSS、XHTML、Flash、Java以及其他技术朗
朗上口，他觉得很自豪，认为自己强过50年前那些最聪明的人。我
确信，在你的经历中一定遇到过这样的人。或者，你曾经在这样的
环境下工作，好像宇宙中任何人都没有能力来处理像你现在正在解
决的、如此复杂的问题。
462
---
## Page 464
我建议这位开发人员朋友，在餐馆忙碌的一天，去餐馆的后厨看
看。走进厨房是很有趣的（请参考AnthonyBourdain所写的好书
《KitchenConfidential》，Ecco出版，2001年），这有很多种原因，
但是，我的关注点是工作效率。任何人在第一次看到发生在忙碌的
专业厨房中所采取的快速的任务管理和协调后，都可能会重新思考
自己的工作到底有多难。烹饪时，通常要同时应付数个油炸中的平
底锅，它们有着不同的先后次序和完成状态；同时，还得在厨房各
角落的炉火间四处穿梭；此外，侍者进进出出，传达客户更改的菜
单和各类问题。
这一切都发生在窄小拥挤的厨房内，头顶是刺眼的日光灯。尽管每
隔几秒就出一道菜，但新菜单进来的速度同样很快。有时候，出菜
后会被退回，或者像软件项目那样，要做点定制工作和最后一分钟
的改变（比如，1号桌不喜欢乳糖，2号桌要一些酱汁等）。大型忙
碌的厨房看起来实在令人惊讶。乍看起来似乎一团混乱，但是“伟
大的”厨房却以一种紧张而精确的方式运作着，大多数并发团队都
做不到。
主厨和副厨就是烹饪的项目经理，或者如Bourdain所说的，他们是
空中交通管理员（另一个自省时可考虑的职业）。虽然厨房员工的
工作规模比较小，也不及软件开发团队经理那样受人称赞，但是，
就每日工作的紧张程度而言，二者无从比较。如果怀疑我的说法，
那么下一次你可以到一个忙碌的午餐地点，询问服务员是不是可以
看看厨房。他也许不会同意，但是如果他同意，你将不会失望（某
些时尚的餐馆和酒吧有并放式的厨房。如果你发现这种地方，尽可
能坐在靠厨房近一些的位置。然后，盯着某人看几分钟。注意查看
怎么下菜单、怎么跟踪菜单、怎么烹饪菜肴以及怎么上菜。如果你
选择忙碌的一天去，那么对于如何发现、如何跟踪以及如何修复软
件Bug这些问题，你就会有不同的想法）。
关于项目管理的另一个有趣的领域经验来自于医院的急诊室。我看
其中，由专业医生、护士以及专家组成的项目组协同工作，处理来
到医院的各式各样、有时是异乎寻常的医疗病例。正是医疗这一专
业发明了优先分配的过程，这一点也不奇怪，软件项目经常使用优
先分配这一术语，来按优先级分类问题和缺陷（第15章会再次讨
论）。
463
---
## Page 465
对于团队合作、高压下的决策制定以及每天影响到许多人的项目成
果，医疗环境（尤其是外伤的情况）为其提供了很好的比较（关于
这种环境与其他工作环境的比较，请参见图1-1）。这正如Atul
Gawande在其著作《Complications：ASurgeon’sNotes on an Imperfect
Science》（PicadorUSA出版，2003年）中所说的那样。
我们希望医学是关于知识和过程的有条理的专业。但实际并非如
此，医学是不完美的科学，是由不断更新的知识、不确定的信息以
及容易犯错的个人共同组成的，同时又要按规则操作。是的，我们
所做的事情有科学的做法，但同时也有习惯、直觉以及偶尔单纯的
经验猜测。我们所知道的与我们持续追求的目标之间存在着差距，
该差距把我们所做的一切都复杂化了。
电影
前期制作
拍摄
危期制作
软件开发
需求
设计
编码
谢试
Web开发
前期工作
开发
维护
评估
急诊室
诊断
治疗
评估
厨房
点菜
上菜
图1-1：从抽象层次看，许多领域都有相似的过程，都把时间用在计
划、执行以及改进（但是，你绝不会去厨房求医或者到急诊室找吃
的东西）
这一点，以及在Gawande的那本引人醒悟的书中所谈到的许多其他
事情，对软件开发一样有效。FredBrooks在其软件工程经典著作
《TheMythicalMan-Month》（Addison-Wesley出版，1995年）中
同样也通过外科医生团队和程序员团队进行类似的比较。尽管在并
发网站或数据库时，很少有生命危险的情况出现，但是，这些不同
团队的人员都必须面对许多相似的挑战。
项目管理的角色
464
---
## Page 466
项目管理可视为一种专业、一种工作、一种角色或一项活动。有些
公司有项目经理，其职责是管理200人的整个项目。其他公司把这
个职位当成高级经理，每位项目经理负责大项目中的一小部分。根
据组织的结构、文化以及项目目标，项目管理可以是非正式的角色
（“一有需要，就找人来做”），或者也可以是明确定义的角色
（“Vincent、Claude以及Raphael都是全职项目经理”）。
本书中，我主要使用“项目经理”（或PM）这个词汇来指那些涉及项
导整个团队以了解项目工作（计划、进度安排以及收集需求）、带
领项目进行设计和并发工作（沟通、决策以及中期策略），以及驱
动完成整个项目（领导力、风险管理以及终局策略）。
如果这类工作在你所处的环境中没有那幺正式，就把项目经理或
PM看作是“负责项目管理任务的人，即使这不是他的主要工作”，或
者将其视作“整体考虑项目的人”。我看到，不同的团队有着不同的
方式来组织项目管理活动，但是，本书的建议对他们没有什么大的
差异。本书不关注工作职称和形式，而是在意怎样把事情做好，让
事情进展。不过为了表达方使，我还是会使用项目经理或PM这个
词汇。
有时，没有专职的项目经理也工作得很好。程序员和他们的老板会
控制进度和工程计划（如果有的话），业务分析师或市场营销人员
做项目计划和需求工作。任何可视为项目管理的工作，都被分散在
整个团队人员身上。也许团队成员应聘更重要的原因是兴趣，而不
只是编写代码。他们也许不在意早期计划、用户界面设计或者业务
策略。以这种方式工作，也会达到很好的效果。只要每个成员都愿
意承担工作职责之外的、协调整个项目的额外责任，分担应该由专
职项目经理为团队承担的任务，团队就不需要增加人员，而且保持
效率和简单都很好。
但是，有时没有项目经理会造成困难。如果没有人专职控制整体项
目，个人的偏见和利益考虑会影响团队的方向。技术人员和业务人
员之间会形成很大的矛盾，使得进度落后，并影响每个参与人员的
心情。
考虑一下医院的急诊室，医生会负责病人的治疗过程。这样可以迅
速并展各项工作，使外伤团队中每个角色都能明确自己的职责。对
于项目管理类型的事情，如果没有这种清晰的授权，并发团队将陷
465
---
## Page 467
入麻烦。如果没有明确的人负责专门分类Bug，或者没有专人检查
项目进度和标识的重要问题，这些任务可能会被危险地延迟，落后
于以编程为中心的活动。
我想，很多优秀程序员对项目管理都非常了解，会自行这样做，他
们也能体会到由优秀的专职人员来承担项目经理角色所带来的独特
价值。
微软的程序和项目管理
在20世纪80年代后期，微软遇到了问题，每个部门都不知道如何将
工程方面的成果与市场、业务之间进行协调（有人可能会说，这仍
然是微软和许多其他公司面临的问题）。有个叫JabeBlumenthal的
聪明人，意识到可以设立一个同时参与这两种功能的特殊职位，这
是个同时扮演领导和协调人的角色。他从项目并始计划的那一天参
与进来，直到测试的最后一天。这个人不但需要有一定的技术能
力，使得他可以与程序员共事并获得尊敬；同时，他还要具有很好
的能力和兴趣，来参与产品的并发过程。
为了让这个角色有效工作，他必须乐于把时间花在各种任务上，例
如编写规格说明书、检查市场计划、制定项目进度表、领导团队、
作策略计划、进行Bug分类、培养团队士气以及做好任何需要做但
没有人正在做的事情。微软把这个新角色称为程序经理（program
manager）。团队中的人员并非都直接报告给他，但程序经理被赋予