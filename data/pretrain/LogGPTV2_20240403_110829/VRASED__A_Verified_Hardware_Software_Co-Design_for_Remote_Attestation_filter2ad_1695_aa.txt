# VRASED: A Verified Hardware/Software Co-Design for Remote Attestation

**Authors:**
- Ivan De Oliveira Nunes, University of California, Irvine
- Karim Eldefrawy, SRI International
- Norrathep Rattanavipanon, University of California, Irvine
- Michael Steiner, Intel
- Gene Tsudik, University of California, Irvine

**Publication:**
- [Proceedings of the 28th USENIX Security Symposium](https://www.usenix.org/conference/usenixsecurity19/presentation/de-oliveira-nunes)
- August 14–16, 2019, Santa Clara, CA, USA
- ISBN: 978-1-939133-06-9
- Open access sponsored by USENIX

## Abstract

Remote Attestation (RA) is a distinct security service that allows a trusted verifier (Vrf) to measure the software state of an untrusted remote prover (Prv). If correctly implemented, RA enables Vrf to remotely detect if Prv is in an illegal or compromised state. Although several RA approaches have been explored (including hardware-based, software-based, and hybrid), little attention has been devoted to formal verification. No RA designs or implementations have been formally verified with respect to claimed security properties.

In this work, we take the first step towards formal verification of RA by designing and verifying an architecture called VRASED: Verifiable Remote Attestation for Simple Embedded Devices. VRASED is a hybrid (HW/SW) RA co-design aimed at low-end embedded systems, such as simple IoT devices. It provides a level of security comparable to hardware-based approaches while minimizing additional hardware costs. Since security properties must be jointly guaranteed by hardware and software, verification is a challenging task, which has never been attempted before in the context of RA. To the best of our knowledge, VRASED is the first formally verified RA scheme and the first formal verification of a HW/SW co-design implementation of any security service. We demonstrate VRASED's practicality and low overhead by instantiating and evaluating it on a commodity platform (TI MSP430). VRASED was deployed using the Basys3 Artix-7 FPGA, and its implementation is publicly available.

## 1. Introduction

The number and variety of special-purpose computing devices are increasing dramatically, including embedded devices, cyber-physical systems (CPS), and Internet-of-Things (IoT) gadgets. These devices are utilized in various "smart" settings, such as homes, offices, factories, automotive systems, and public venues. As society becomes increasingly dependent on these devices, their security becomes extremely important. For actuation-capable devices, malware can impact both security and safety, as demonstrated by Stuxnet. For sensing devices, malware can undermine privacy by obtaining ambient information. Additionally, clever malware can turn vulnerable IoT devices into zombies for DDoS attacks, as seen with the Mirai Botnet in 2016.

Unfortunately, security is typically not a key priority for low-end device manufacturers due to cost, size, or power constraints. It is unrealistic to expect such devices to prevent current and future malware attacks. The next best thing is detection of malware presence, which typically requires some form of Remote Attestation (RA). RA is especially applicable to low-end embedded devices that cannot defend themselves against malware infection. In contrast, more powerful devices can use sophisticated anti-malware protection. RA involves verifying the current internal state (i.e., RAM and/or flash) of an untrusted remote hardware platform (prover or Prv) by a trusted entity (verifier or Vrf). If Vrf detects malware, Prv’s software can be reset or rolled back, and out-of-band measures can be taken to prevent similar infections. Hybrid RA, implemented as a HW/SW co-design, is a promising approach for low-end embedded devices, aiming to provide the same security guarantees as hardware-based approaches while minimizing hardware modifications.

Despite numerous RA techniques with different assumptions, security guarantees, and designs, a major missing aspect is high-assurance and rigor derived from computer-aided formal verification. Our efforts revealed that previous hybrid RA designs, such as SMART and Trustlite, had subtle issues that could compromise security. Formal specification and verification of RA properties significantly increase confidence that such issues are not overlooked.

In this paper, we take a "verifiable-by-design" approach and develop, from scratch, an architecture for Verifiable Remote Attestation for Simple Embedded Devices (VRASED). VRASED is the first formally specified and verified RA architecture, accompanied by a formally verified implementation. Verification is carried out for all trusted components, including hardware, software, and their composition, up to end-to-end notions for RA soundness and security. The resulting verified implementation, along with its computer proofs, is publicly available. Formally reasoning about and verifying VRASED involves overcoming major challenges, including:

1. **Formal Definitions:** End-to-end notions for RA soundness and security, a realistic machine model for low-end embedded systems, and VRASED’s guarantees. These definitions must be made in a single formal system, such as Linear Temporal Logic (LTL), to reason about their interplay.
2. **Automatic End-to-End Verification:** Complex systems like VRASED present computability challenges due to the large state space. We use a "divide-and-conquer" approach, dividing the end goal into smaller sub-properties, each verified using a Model Checker. VRASED’s SW relies on an F* verified implementation, also specified in LTL.
3. **Composition of Sub-Properties:** All proven sub-properties must be composed to reason about the overall RA security and soundness. We use a theorem prover to show that the sub-properties, when composed, imply the end-to-end definitions of RA soundness and security.

### 1.1 Scope of Low-End Devices

This work focuses on low-end devices based on low-power single-core microcontrollers with a few KBytes of program and data memory. A representative example is the Texas Instrument’s MSP430 microcontroller family, which has a 16-bit word size, ≈ 64 KBytes of addressable memory, and SRAM for data memory. MSP430 is widely used in many application domains, including the automotive industry and consumer devices. Our choice is motivated by the availability of a well-maintained open-source MSP430 hardware design from Open Cores. Our machine model is applicable to other low-end MCUs in the same class as MSP430 (e.g., Atmel AVR ATMega).

### 1.2 Organization

- **Section 2:** Provides relevant background on RA and formal verification.
- **Section 3:** Details the VRASED architecture and an overview of the verification approach.
- **Section 4:** Contains formal definitions of end-to-end RA soundness and security, and the formalization of necessary sub-properties, along with the implementation of verified components.
- **Appendix A:** Discusses the proofs for end-to-end soundness and security derived from the sub-properties.
- **Section 5:** Discusses alternative designs to guarantee the same required properties and their trade-offs with the standard design.
- **Section 6:** Presents experimental results demonstrating the minimal overhead of the formally verified and synthesized components.
- **Section 7:** Discusses related work.
- **Section 8:** Concludes with a summary of our results.
- **Appendices A to C:** Include end-to-end proofs of soundness and security, optional parts of the design, VRASED’s API, and discussion on VRASED’s prototype.

## 2. Background

### 2.1 RA for Low-End Devices

RA is a security service that facilitates the detection of malware presence on a remote device. It allows a trusted verifier (Vrf) to remotely measure the software state of an untrusted remote device (Prv). The typical RA protocol involves:

1. **Request:** Vrf sends an attestation request containing a challenge (Chal) to Prv. This request might also contain a token derived from a secret that allows Prv to authenticate Vrf.
2. **Authenticated Integrity Check:** Prv receives the attestation request and computes an authenticated integrity check over its memory and Chal. The memory region might be pre-defined or explicitly specified in the request.
3. **Report:** Prv returns the result to Vrf.
4. **Verification:** Vrf receives the result from Prv and checks whether it corresponds to a valid memory state.

Prior RA approaches can be divided into three groups: software-based, hardware-based, and hybrid. Software-based RA is the only viable approach for legacy devices with no hardware security features but is unsuitable for multi-hop and jitter-prone communication. Hardware-based RA relies on dedicated hardware, such as Trusted Platform Modules (TPMs) or modifications to CPU semantics, which are too expensive for low-end devices. Hybrid RA, based on HW/SW co-design, aims to provide the same security guarantees as hardware-based techniques with minimal hardware support. Despite much progress, a major missing aspect in RA research is high-assurance and rigor obtained by using formal methods to guarantee security. This serves as the main motivation for our efforts to develop the first formally verified RA architecture.