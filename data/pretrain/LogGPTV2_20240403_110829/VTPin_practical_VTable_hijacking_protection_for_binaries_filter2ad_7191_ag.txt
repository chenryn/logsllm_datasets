### 5.5 Collecting Pinned VTables

To further investigate our garbage collection performance, we evaluated the time required for VTPin to scan memory and collect pinned pointers. Table 5 lists the time needed to scan the heap (which dominates the scanning time) of Mozilla Firefox for collecting 10K, 100K, and 1M pinned pointers. All pinned pointers are stored in one of two C++ `unordered_map` containers, as provided by the Standard Template Library (STL). During the heap scan, one buffer is freed while the other continues to fill via new free calls. This strategy eliminates the need to block other threads during the heap scan.

Our results show that, even for large heap sizes (several MBs), such as those in Mozilla Firefox, the scanning process can complete in a few seconds (up to 10 seconds for scanning 10M pinned pointers on a single thread). Additionally, our results confirm that our garbage collection strategy is highly parallelizable, with a scan being up to 3 times faster when using 4 threads on different cores compared to a single-threaded scenario. Since such scans occur infrequently (every 100 MB of pinned pointers by default), the overall performance of the protected program is not significantly affected in practice. This is also reflected in the performance overhead results presented earlier for our benchmarks.

### 6. Related Work

Many techniques have been proposed to defend against various exploitation approaches. Control-Flow Integrity (CFI) [10] is a generic concept for ensuring that an attacker cannot tamper with the control flow of a running process. In the case of VTable hijacking, CFI can protect the vulnerable program by constraining VTable pointers, preventing them from pointing to any foreign VTable introduced at runtime [53]. However, CFI requires perfect knowledge of the Control Flow Graph (CFG) and, in practice, can only be realized as an approximation. Specifically, all coarse-grained forms of CFI [60, 61] suffer from inherent limitations and have been shown to be bypassable [26].

The research community has focused on applying narrow-scoped CFI specifically for protecting VTables [24, 32, 43, 53, 59]. Techniques that work with binaries [24, 43, 59] have been demonstrated to be imperfect, as recovering all the semantics related to the C++ class hierarchy without access to source code remains an open problem [47]. For techniques that work at the source level [32, 53], their robustness is still questionable. Compared to all CFI-based solutions for protecting VTables, VTPin can work directly with binaries without suffering from problems related to the C++ class hierarchy [47] and offers a sound solution.

VTPin protects VTables from use-after-free vulnerabilities, a type of vulnerability addressed by many studies [15, 33, 57]. However, unlike VTPin, these proposals require access to source code. Another option is to provide a custom memory allocator that carefully reuses memory [11, 13, 38], but this requires replacing the program's allocator. VTPin aims to be as transparent as possible and is not offered as an allocator replacement. It can be used in conjunction with any custom allocator, even those that protect against use-after-free bugs, as it handles only deallocations associated with virtual objects. For example, Cling [11] protects against use-after-free exploitation, but it is possible for an object of the same type to be allocated at a previously occupied memory area. VTPin can prevent this specific instance of use-after-free vulnerability at a low cost, without disabling Cling.

There are also memory analyzers [28, 39, 49] that offer managed memory allocation, but their overhead is dramatically high, making them suitable only for debugging. In contrast, VTPin experiences low overheads: 1%–4.1% when running popular web browser benchmarks and 0.4%–4.9% when running the SPEC CPU2006 suite.

### 7. Conclusion

In this paper, we proposed VTPin: a system for protecting C++ binaries from VTable hijacking. Compared to existing protection mechanisms, VTPin exhibits several characteristics that make it suitable for practical and immediate deployment in production software. First, VTPin protects binaries directly without requiring access to the source code or relying on complex binary analysis and rewriting techniques. Second, VTPin is not an allocator replacement and does not interfere with the allocator's strategies and policies; it intervenes in the deallocation process only when a virtual object is to be freed, preserving the VTable pointer. Third, VTPin is fast, with Mozilla Firefox experiencing an overhead ranging from 1% to 4.1% on popular browser benchmarks and 0.4% to 4.9% on the SPEC CPU2006 suite.

### Availability

Our prototype implementation of VTPin is freely available at: https://github.com/uberspot/VTPin.

### Acknowledgments

We thank the anonymous reviewers for their valuable comments. This work was supported by the European Commission through project H2020 ICT-32-2014 “SHARCS” under Grant Agreement No. 644571.

### References

[1] Advanced Exploitation of Mozilla Firefox Use-after-free Vulnerability (MFSA 2012-22). http://...