# 从qemu逃逸到逃跑
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 在现在CTF比赛中qemu逃逸题目已经越来越常见，希望能通过这篇文章让大家对最近qemu逃逸题目学习有一点帮助
## 2021 HWS FastCP
###  漏洞分析
    void __fastcall FastCP_class_init(ObjectClass_0 *a1, void *data)
    {
      PCIDeviceClass *v2; // rbx
      PCIDeviceClass *v3; // rax
      v2 = (PCIDeviceClass *)object_class_dynamic_cast_assert(
                               a1,
                               "device",
                               "/root/source/qemu/hw/misc/fastcp.c",
                               293,
                               "FastCP_class_init");
      v3 = (PCIDeviceClass *)object_class_dynamic_cast_assert(
                               a1,
                               (const char *)&dev,
                               "/root/source/qemu/hw/misc/fastcp.c",
                               294,
                               "FastCP_class_init");
      *(_DWORD *)&v3->vendor_id = 0xBEEFDEAD;
      v3->revision = 1;
      v3->realize = pci_FastCP_realize;
      v3->exit = pci_FastCP_uninit;
      v3->class_id = 0xFF;
      v2->parent_class.categories[0] |= 0x80uLL;
    }
注册了`verdor_id=0xBEEFDEAD`和`class_id = 0xff`。
    00000000 FastCPState     struc ; (sizeof=0x1A30, align=0x10, copyof_4530)
    00000000 pdev            PCIDevice_0 ?
    000008F0 mmio            MemoryRegion_0 ?
    000009E0 cp_state        CP_state ?
    000009F8 handling        db ?
    000009F9                 db ? ; undefined
    000009FA                 db ? ; undefined
    000009FB                 db ? ; undefined
    000009FC irq_status      dd ?
    00000A00 CP_buffer       db 4096 dup(?)
    00001A00 cp_timer        QEMUTimer_0 ?
    00001A30 FastCPState     ends
    00000000 CP_state        struc ; (sizeof=0x18, align=0x8, copyof_4529)
    00000000                                         ; XREF: FastCPState/r
    00000000 CP_list_src     dq ?
    00000008 CP_list_cnt     dq ?
    00000010 cmd             dq ?
    00000018 CP_state        ends
`FastCPState`结构体如上所示，其中可以看到`CP_buffer`的大小为`0x1000`，其紧邻`cp_timer`函数指针。`CP_state`结构体有`CP_list_src`、`CP_list_cnt`和`cmd`。
    uint64_t __fastcall fastcp_mmio_read(FastCPState *opaque, hwaddr addr, unsigned int size)
    {
      if ( size != 8 && addr  0x1F )
        return -1LL;
      if ( addr == 8 )
        return opaque->cp_state.CP_list_src;
      if ( addr handling;
        return -1LL;
      }
      if ( addr != 16 )
      {
        if ( addr == 24 )
          return opaque->cp_state.cmd;
        return -1LL;
      }
      return opaque->cp_state.CP_list_cnt;
    }
`fastcp_mmio_read`函数，主要是返回`FastCPState`变量的值。
    void __fastcall fastcp_mmio_write(FastCPState *opaque, hwaddr addr, uint64_t val, unsigned int size)
    {
      int64_t v4; // rax
      if ( (size == 8 || addr > 0x1F) && addr handling != 1 )
            opaque->cp_state.CP_list_cnt = val;
        }
        else if ( addr == 24 )
        {
          if ( opaque->handling != 1 )
          {
            opaque->cp_state.cmd = val;
            v4 = qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL);
            timer_mod(&opaque->cp_timer, v4 / 1000000 + 100);
          }
        }
        else if ( addr == 8 && opaque->handling != 1 )
        {
          opaque->cp_state.CP_list_src = val;
        }
      }
    }
`fastcp_mmio_write`函数的功能主要是设置`CP_list_cnt`、`CP_list_src`以及执行`opaque->cp_timer`函数指针
    void __fastcall fastcp_cp_timer(FastCPState *opaque)
    {
      uint64_t v1; // rax
      uint64_t v2; // rdx
      __int64 v3; // rbp
      uint64_t v4; // r12
      uint64_t v5; // rax
      uint64_t cmd; // rax
      bool v7; // zf
      uint64_t v8; // rbp
      __int64 v9; // rdx
      FastCP_CP_INFO cp_info; // [rsp+0h] [rbp-68h] BYREF
      char buf[8]; // [rsp+20h] [rbp-48h] BYREF
      unsigned __int64 v12; // [rsp+28h] [rbp-40h]
      unsigned __int64 v13; // [rsp+38h] [rbp-30h]
      v13 = __readfsqword(0x28u);
      v1 = opaque->cp_state.cmd;
      cp_info.CP_src = 0LL;
      cp_info.CP_cnt = 0LL;
      cp_info.CP_dst = 0LL;
      switch ( v1 )
      {
        case 2uLL:
          v7 = opaque->cp_state.CP_list_cnt == 1;
          opaque->handling = 1;
          if ( v7 )
          {
            cpu_physical_memory_rw(opaque->cp_state.CP_list_src, &cp_info, 
            0x18uLL, 0);
            if ( cp_info.CP_cnt CP_buffer, cp_info.CP_cnt, 0);// write
            cmd = opaque->cp_state.cmd & 0xFFFFFFFFFFFFFFFCLL;
            opaque->cp_state.cmd = cmd;
            goto LABEL_11;
          }
          break;
        case 4uLL:
          v7 = opaque->cp_state.CP_list_cnt == 1;
          opaque->handling = 1;
          if ( v7 )
          {
            cpu_physical_memory_rw(opaque->cp_state.CP_list_src, &cp_info, 0x18uLL, 0);
            cpu_physical_memory_rw(cp_info.CP_dst, opaque->CP_buffer, cp_info.CP_cnt, 1);// read
            cmd = opaque->cp_state.cmd & 0xFFFFFFFFFFFFFFF8LL;
            opaque->cp_state.cmd = cmd;
    LABEL_11:
            if ( (cmd & 8) != 0 )
            {
              opaque->irq_status |= 0x100u;
              if ( msi_enabled(&opaque->pdev) )
                msi_notify(&opaque->pdev, 0);
              else
                pci_set_irq(&opaque->pdev, 1);
            }
            goto LABEL_16;
                  }
          break;
        case 1uLL:
          v2 = opaque->cp_state.CP_list_cnt;
          opaque->handling = 1;
          if ( v2 > 0x10 )
          {
    LABEL_22:
            v8 = 0LL;
            do
            {
              v9 = 3 * v8++;
              cpu_physical_memory_rw(opaque->cp_state.CP_list_src + 8 * v9, &cp_info, 0x18uLL, 0);
              cpu_physical_memory_rw(cp_info.CP_src, opaque->CP_buffer, cp_info.CP_cnt, 0);
              cpu_physical_memory_rw(cp_info.CP_dst, opaque->CP_buffer, cp_info.CP_cnt, 1);
            }
            while ( opaque->cp_state.CP_list_cnt > v8 );
          }
          else
          {
            if ( !v2 )
            {
    LABEL_10:
              cmd = v1 & 0xFFFFFFFFFFFFFFFELL;
              opaque->cp_state.cmd = cmd;
              goto LABEL_11;
            }
            v3 = 0LL;
            v4 = 0LL;
            while ( 1 )
            {
              cpu_physical_memory_rw(v3 + opaque->cp_state.CP_list_src, buf, 0x18uLL, 0);
              if ( v12 > 0x1000 )
                break;
              v5 = opaque->cp_state.CP_list_cnt;
              ++v4;
              v3 += 24LL;
              if ( v4 >= v5 )
              {
                if ( !v5 )
                  break;
                goto LABEL_22;
              }
            }
          }
          v1 = opaque->cp_state.cmd;
          goto LABEL_10;
        default:
          return;
      }
      opaque->cp_state.cmd = 0LL;
    LABEL_16:
      opaque->handling = 0;
    }
重点需要关注`fastcp_cp_timer`函数：
`case
2`：从`opaque->cp_state.CP_list_src`读取到`cp_info`，然后将`cp_info.CP_src`写入到`opaque->CP_buffer`，长度为`cp_info.CP_cnt`，计算`(opaque->cp_state.cmd
& 0xFFFFFFFFFFFFFFFCLL)&8`判断执行`pci_set_irq`；
`case
4`：先从`opaque->cp_state.CP_list_src`读取`cp_info`，然后将`opaque->CP_buffer`读取到`cp_info.CP_dst`，长度为`cp_info.CP_cnt`。
`case
1`：如果`opaque->cp_state.CP_list_cnt`大小大于`0x10`，则会根据`cp_state.CP_list_cnt`的大小循环从`opaque->cp_state.CP_list_src`读取结构体到`cp_info`，然后依次将`CP_src`中的数据写入到`CP_buffer`，然后从`CP_buffer`中读取数据到`CP_dst`，长度由`CP_cnt`指定。  
这里需要注意除了`case 2`对`cnt`长度进行了检查，其他操作都没有检查`cnt`的长度，也就是存在一个数组越界的漏洞。
###  漏洞利用
这道题的利用思路其实不难，但是一直卡在一个关键的地方，花了一天多时间才搞定。
####  泄漏地址
前面已经说到`case 4`是有一个越界读，而在`buffer`缓冲区下面紧邻的是`cp_timer`函数指针。
    00000000 QEMUTimer_0     struc ; (sizeof=0x30, align=0x8, copyof_1181)
    00000000                                         ; XREF: FastCPState/r
    00000000 expire_time     dq ?
    00000008 timer_list      dq ?                    ; offset
    00000010 cb              dq ?                    ; offset
    00000018 opaque          dq ?                    ; offset
    00000020 next            dq ?                    ; offset
    00000028 attributes      dd ?
    0000002C scale           dd ?
    00000030 QEMUTimer_0     ends
那么我们直接利用这个越界读，读取`cb`指针，就能泄漏`qemu`地址。那么就需要越界读取`0x1010`处的地址。
我这里刚开始的思路是直接申请一个`0x2000`的缓冲区`userbuf`获得其物理地址`phy_userbuf`，然后用来读取数据。但是经过调试我读取完之后，在`0x1010`的数据并非我泄漏的数据。就是这个问题，困扰了我一天。
知道后面我才想到，如果一个物理页大小为`0x1000`，我就算使用`mmap`直接申请`0x2000`大小的缓冲区，虽然获得了连续的虚拟地址，但是这两个虚拟页对应的物理页并不一定是连续的。也就是说我最终读取了`0x1010`的数据到
`phy_userbuf+0x1010`的地址，然后我通过访问虚拟地址`userbuf+0x1010`得到的数据并不对应`phy_userbuf+0x1010`的数据。  
所以这里我就需要去申请两个连续的物理页，这样的申请就需要不断去分配尝试，分配的两个虚拟页获得其物理地址，然后判断其对应的物理地址，看是否是连续的，然后来判断是否对应两个连续的物理页。
**当我们能够获得两个连续的物理页地址时**
，再去泄漏地址，就能保证访问`userbuf+0x1010`对应的数据是`phy_userbuf+0x1010`的数据。
#### **getshell**
能够泄漏地址后，就能够得到`system`地址。
我们只需要修改`QEMUTimer_0.cb`的函数指针为`system_plt`地址，修改`QEMUTimer_0.opaque`为`buffer`地址，在`buffer`中构造`cat
/root/flag`，最终通过`fastcp_mmio_write`中的`case 0x18`去触发即可。
###  EXP
    #include 
    #include 
    #include 