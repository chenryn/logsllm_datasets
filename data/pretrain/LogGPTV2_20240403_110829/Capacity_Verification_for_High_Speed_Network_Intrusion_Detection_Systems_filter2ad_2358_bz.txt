# Introduction to Reference Flow Control

Reference Flow Control (RFC) is a security mechanism that regulates the combination of operations based on their reference requirements and effects. A security policy in this context is defined by specifying reference bags, which are sets of references required for specific operations. For instance, reading the contents of `/etc/shadow` requires specific references, while reading the screen coordinates of the mouse cursor does not. The definition of reference bags allows for the detection of potential attacks, though implementing any possible security policy using reference bags remains an open issue.

## 2.1 Reference Requirements and Operations

Operations can create or destroy objects and their corresponding references. For example, the `open` operation creates a file descriptor object with read and write methods. When an operation is executed in a domain, its consequences must be allowed in the same domain. Therefore, newly created references are inserted into the same reference bag that allowed the operation's execution. This ensures that any operation depends on a reference bag for legality and may modify this bag by creating or deleting references.

### Definition
Let \(\Omega\) be an operation and \(S\) a reference bag such that \(\Omega\) is legal in \(S\). We denote \(\Omega_S\) as the execution of \(\Omega\) allowed by references from \(S\), and \(Ref(\Omega_S)\) as the resulting reference bag after \(\Omega_S\).

For example:
\[ Ref(close(fd)_S) = S \setminus \{R_S(fd.read), R_S(fd.write)\} \]
This means that executing `close(fd)` using references from bag \(S\) will remove the references \(R_S(fd.read)\) and \(R_S(fd.write)\) from \(S\).

## 2.2 Reference Flow

The focus of RFC is to handle situations where an attacker aims to extend their rights to perform operations with illegal consequences. If an operation \(\Omega_2\) is a consequence of \(\Omega_1\) (denoted \(\Omega_1 \Rightarrow \Omega_2\)), it must obey the same security restrictions as \(\Omega_1\). The decision whether \(\Omega_1 \Rightarrow \Omega_2\) can be based on system internals, logical dependencies, or a combination of both.

In practice, an operation \(\Omega_1\) transmits the reference bag that made it possible to its consequence \(\Omega_2\). If \(\Omega_2\) is executed by another process, references flow to that process, allowing it to execute new operations. This mechanism enforces access control rules throughout sequences of causally dependent operations.

### Example
Consider the operation \(\Omega_S^2\) executing `fd2 = open(File, O_RDONLY)`. If the file was written by \(\Omega_Q^1\), then:
\[ Ref(\Omega_S^2) = Ref(\Omega_Q^1) \cup \{R_Q(fd2.read)\} \]
This ensures that the file content is read within the same domain it was written in, preserving security restrictions.

For overwriting a file, the rule is:
\[ Ref(\Omega_S^3) = S \cup \{R_S(fd2.write)\} \]
where \(\Omega_S^3\) executes `fd2 = open(File, O_WRONLY | O_TRUNC)`.

## 2.3 Implementation on Existing Systems

Implementing discretionary access control using references is straightforward. User identities are used for authentication, and the `login(u)` operation sets the default reference bags for the user \(u\). Access Control Lists (ACLs) are the set of user identities whose default reference bags include the required references for a given object method call. An ACL change modifies the user's default reference bags and can be broadcast to all processes if immediate effect is needed.

## 3. Application to Intrusion Detection

We present a proof-of-concept intrusion detection scheme for a generic Unix-like operating system. The goal is to provide a known environment and backward compatibility. We focus on intrusions where an attacker aims to gain unauthorized privileges through complex series of steps involving multiple subject identities.

### 3.1 Model of a Unix-Like Operating Environment

A security policy in a Unix-like environment should:
- Authorize operations on objects according to discretionary access control.
- Require authentication for subject identities.
- Ensure no Unix subject can exploit a privilege that does not correspond to its identity.

Each user identity is modeled by a reference bag containing read, write, and execute references. The default reference bags for each process include the user's uid, group memberships, and the "other" bag.

### 3.2 Detecting Intrusion Symptoms

An attacker's goal is to execute operations not authorized by the user's reference bags. For example, if no reference bag \(S\) contains \(R_S(/etc/shadow.openread)\) for user `bob`, then any attempt by `bob` to read `/etc/shadow` is an intrusion symptom. The intrusion detector can raise an alarm upon such attempts, providing different responses:
- Prohibit the operation.
- Authorize the operation to catch the attacker.
- Report the attempt for forensic analysis.

## 4. Experimental Implementation

Our prototype performs non-runtime security policy checking using execution logs. The logs are generated by a Linux kernel module that hooks into the kernel API and reports system calls. The logs are parsed by a reference propagation simulator that implements reference propagation rules matching Unix information flow.

### 4.2 Examples of Attack Detections

Two examples of attack detections are presented as a proof of concept. These include detecting unauthorized access to sensitive files and enforcing proper reference flow during authentication and authorization. A thorough evaluation of the approach and its practical performance will be the subject of future work.