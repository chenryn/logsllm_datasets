hypervisor  [22] [23].  Our technique is based on the fact that 
the  address  space  change  is  visible  to  the  hypervisor 
although  a  guest  process  or  a  task  is  not.  For  example,  on 
x86  architectures,  a  new  value  being  loaded  onto  a  cr3 
register  (page  directory)  indicates  loading  of  a  new  address 
space  and  this  action  is  done  by  the  hypervisor.  When  the 
guest installs a new value into the cr3 register, Xen validates 
this entry. This indicates the creation of a new guest process 
to  the  hypervisor.  Similarly,  when  the  guest  process 
terminates, its address space is torn down and the pages are 
unmarked and returned to the guest operating system. This is 
also  tracked  by  the  hypervisor.  In  practice,  this  simple 
method  works  well   [22] [23]  for  tracking  the  identity  of  a 
user-space process. 
IV.  OUR APPROACHES 
In 
this 
section,  we 
introduce  our 
incremental 
checkpointing approaches. In addition to hypervisor-assisted 
page-tracking  based  approach  (PTxen),  we  also  introduce  a 
new  concept  of  emulation-based  approaches.  Emulation-
based approaches for checkpointing have not been studied in 
earlier literature and both hypervisor-assisted (Emulxen) and 
user-level (Emul) emulation techniques are introduced in this 
paper.  Additionally,  motivated  by  live  migration  techniques 
in  Xen   [17],  we  present  a  page-table  scanning  based 
approach that we call Scanxen.  
Table  1  below  gives  a  high-level  categorization  of  our 
approaches  and  existing  approaches  (prior  work  in  italics). 
Hypervisor-assisted  approaches  implement  most  of  their 
functionality  in  the  hypervisor  while  user-space  approaches 
do  so  in  pure  user  space.    Scan-based  approaches  need  full 
support  from  the  hypervisor  and  do  not  have  an  equivalent 
implementation in user-space.  
Page-tracking 
Emulation-
Scan-based 
Pure user 
Page-tracking (PT) 
based 
based 
Emul 
space 
Hypervisor-
PTxen 
Emulxen 
Scanxen 
assisted 
Table 1: Categorization of checkpoint approaches 
A.  Page-tracking based hypervisor-assisted: PTxen 
PTxen  is  a  page-tracking  based  approach  similar  to  the 
PT  technique  presented  in  Section   II.B,  but  implemented 
mostly  inside  the  hypervisor.  At  the  beginning,  when  the 
application  declares  its  critical  data  area,  the  hypervisor 
installs  the  address  ranges  for  the  critical  data  area  in  an 
internal data structure. At the start of each checkpoint cycle, 
the hypervisor write-protects all the pages in the critical data 
area  for  the  application.  The  hypervisor  also  overrides  the 
standard  page-fault  handler  to  trap  any  writes  to  the  pages. 
When the application writes to a page, the page fault handler 
User 
OS 
Hypervisor 
Page  
unprotect 
Page fault 
TLB flush 
Figure 5: Page fault handling with PTxen 
Figure  5  shows  the  operation  of  PTxen.  As  seen  in  the 
figure,  the  page-fault  is  trapped  by  the  hypervisor  and 
operated  on  in  that  layer,  instead  of  propagating  it  to  the 
user-space  application.  The  simple  call  flow  eliminates  a 
number of overheads associated with a single write operation. 
As  compared  to  the  call  flow  in  Figure  3(b),  the  numerous 
context  switches  between  user-space,  guest  OS  and  the 
hypervisor  (as  experienced  in  the  standard  PT  case)  are 
eliminated. These are replaced by the majority of work being 
done  in  the  hypervisor,  thereby  reducing  the  context-switch 
and  scheduling  overhead  and  multiple  calls 
to  page 
protection by the application. Additionally, in comparison to 
Figure  3(a),  we  see  that  the  hypervisor-assisted  model  does 
page protection at a lower layer (hypervisor) than the native 
case  (application  layer)  allowing  for  the  possibility  that  its 
performance can be even better than native performance. 
PTxen  can  work  in  parallel  with  other  techniques  like 
live  migration 
 [17].  Since  both  pieces  of  code  are 
implemented  in  the  hypervisor  and  override  the  page  fault 
handler, they can be combined to coexist in the hypervisor. 
B.  Emulation-based: Emul 
The  page-tracking  approach  discussed  above  dealt  with 
changes  at  the  granularity  of  pages.  An  emulation-based 
technique deals with changes being maintained at the word-
level granularity.  
At a high level, emulation-based approaches also depend 
on  a  page-fault  mechanism  for  tracking  changes.  Once  a 
page-fault  is  detected  they  operate  at  the  granularity  of  a 
word.  They  write-protect  the  critical  data  area  at  the 
beginning. A separate unprotected mapping (e.g. via mmap) 
is  maintained  for  the  CDA.  When  the  application  writes  to 
the  protected  area,  the  system  generates  a  protection 
violation  which  is  then  communicated  to  the  application. 
Within  the  signal  handler,  the  application  detects  the  word 
that is written to, makes a copy of the changed word and then 
writes  to  the  critical  data  area  using  the  alternate  mapping 
without unprotecting the page. In x86 architectures, the write 
is  emulated  using  the  x86  ‘MOV’  instruction  so  the  data  is 
written  one-word  at  a  time.    At  the  end  of  the  checkpoint 
cycle, the application has a list of all the changed words and 
can  use  this  list  to  build  a  checkpoint.  Since  the  list  is 
maintained  at  the  word  level,  only  the  data  that  has  really 
been  modified  needs  to  be  migrated  to  the  backup,  thereby 
saving bandwidth and compute power.  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:59 UTC from IEEE Xplore.  Restrictions apply. 
375Four  key  parameters  were  used 
benchmarks:  
to  parameterize 
the 
•  Size of the critical data area (CDA) 
•  Writes-per-page  (WPP):  Average  number  of  write 
operations on a page within a transaction.  
•  Pages-per-transaction  (PPT):  Average  number  of 
transaction 
in  each 
unique  pages  written 
(checkpoint cycle).   
to 
•  Transaction  count  (Tcount):  Total  number  of 
transactions (checkpoint cycles) in the experiment.  
Total  size of  a transaction (Tsize)  is  defined  as  the total 
number  of  writes  in  a  transaction  which  is  the  product  of 
writes-per-page (WPP) and pages-per-transaction (PPT):  
Tsize = WPP*PPT. 
The results in this section show the time taken for Tcount = 
100000 transactions. 
In  this  section,  we  assess  the  impact  of  the  above 
parameters  on  the  performance  of  our  approaches.  The 
evaluation  is  useful  in  understanding  which  approaches  are 
better fitted to certain types of transactions.  The experiments 
have  been  performed  with  Xen  4.1-unstable.  The  Dom0 
kernel  was  64-bit  Linux  2.6.32-15  and the  guest  kernel  was 
paravirtualized  32-bit  Linux  2.6.18-164.  Both  Dom0  and 
guest kernels were patched with pvops kernel patches  [24].   
A.  PT-based approaches 
Figure 6 shows the performance of the two page-tracking 
based  approaches  (PT  and  PTxen)  with  varying  PPT  and 
WPP. Note that the three runs with different WPPs (4, 8, and 
16) all have the same result for a given approach. This is to 
be expected since varying the WPP for each approach has no 
impact on the performance of the approach. Varying the PPT 
has a direct impact on the performance of the approach. This 
is because page-tracking based approaches incur an overhead 
each time a page is dirtied for the first time with a transaction.  
Once  the  page  is  unprotected  and  written  to,  there  is  no 
additional  cost  for  subsequent  writes  into  the  page.  Hence 
there is a linear increase in overhead with PPT. An important 
result  from  this  experiment  is  that  PTxen  shows  a  tenfold 
improvement 
the 
hypervisor-assisted approach. 
thereby  validating 
in  performance, 
C.  Emulation-based hypervisor-assisted: Emulxen 
is 
Emulxen 
the  hypervisor-assisted  version  of 
the 
emulation approach discussed above in Subsection  B. When 
the  application  declares  its  critical  data  area,  the  hypervisor 
write-protects all the pages in the critical data area. Similar to 
the  PTxen  case,  the  hypervisor  overwrites  the  page  fault 
handler to  trap all page  faults  locally.  When the application 
writes to the critical data area, the system generates a page-
fault  which  is  trapped  by  the  page-fault  handler  in  the 
hypervisor. The page fault handler notes the address and the 
value  of  the  dirty  words  and  records  them  in  a  buffer 
provided  by  the  application.  It  then  emulates  the  write  as 
with  Emul.  At  the  end  of  the  checkpoint  cycle,  the 
hypervisor has the full list of changed words and the values 
of the changed words in the buffer in application space.  
D.  Scan-based hypervisor-assisted: Scanxen  
The  scan-based  approach  is  motivated  by  live  migration 
in  Xen   [17].  Instead  of  protecting  and  unprotecting  pages 
explicitly,  the  technique  is  based  on  scanning  page  table’s 
dirty  bits  to  obtain  a  list  of  modified  pages.  When  the 
application  declares  its  critical  data  areas,  the  hypervisor 
keeps  the  critical  data  areas  in  its  list  of  pages  to  track. 
Whenever  the  application  writes  to  a  page,  the  hardware 
tracks  the  write  by  setting  the  dirty  bit  in  the  page  table. 
However, in normal systems, the dirty bit would be reset as 
soon  as  the  page  is  swapped  to  disk.  Xen  supports  the 
concept  of  shadow-page  tables  where  the  guest  OS  uses  a 
copy  of  the  page  tables  that  is  independent  of  the  hardware 
page tables. Xen propagates the changes made to the shadow 
page  tables  to  the  hardware  page  tables  and  vice  versa. 
Scanxen uses the dirty bits in the shadow-page tables to track 
the  modified  pages.  (In  contrast,  PT-based  and  Emulation-
based do not rely on shadow-page tables, but maintain their 
own  dirty  pages.)  At  the  end  of  the  checkpoint  cycle, 
Scanxen parses the guest OS shadow page table to determine 
the  set  of  dirty  bits  in  the  critical  data  area  for  a  given 
application.  It  builds  a  list  of  changed  pages  from  this  and 
passes it to the application. For performance reasons, in our 
implementation,  we  did  not  use  the  “log  dirty  bit”  facility 
from  Xen  live  migration  for  maintaining  the  dirty  bits,  but 
constructed them directly from the shadow page tables.  
Note that for each checkpoint cycle, Scanxen has to walk 
through  the  guest  OS page  table and access  all the  pages  in 
the  critical  data  area.  The  cost  of  Scanxen  depends  on  the 
size of the critical data area, and not on the number of dirty 
pages/words  in  a  transaction.  This  can  be  expensive  if  the 
critical data area buffer is large.  
V.  MICROBENCHMARK 
In order to evaluate the performance of each approach we 
built  a  microbenchmark.  Memory-write  operations  have  a 
direct  impact  on  the  checkpoint  performance;  hence  the 
microbenchmark  first  allocates  a  critical  data  area  and  then 
performs  a  number  of  memory  write  operations.  It 
transactionalizes each write or a group of writes in the CDA 
by containing them between checkpoint begin and end calls. 
Figure 6: PT vs. PTxen with varying PPT 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:59 UTC from IEEE Xplore.  Restrictions apply. 
376B.  Emulation-based approaches 
Figure  7  shows  that  the  emulation-based  approaches  get 
impacted mainly by transaction size (WPP*PPT) rather than 
individual values of WPP or PPT. This is because emulation-
based  approaches  emulate  every  write  into  a  page,  be  it  the 
first write or a subsequent write. So the performance doesn’t 
depend  on  pages  modified  per  transaction  but  more  on  the 
total  number  of  writes  within  a  transaction.  This  has 
advantages if the transaction has high PPT and low WPP. If 
WPP  is  low,  emulation-based  approaches  can  eliminate 
unnecessary page-table manipulations and have the potential 
to outperform page-tracking based approaches. 
    (a) User level               (b) hypervisor-assisted 
Figure 8: Emulation vs. Page-tracking  
D.  Scanxen 
As  discussed  in  the  earlier  sections,  Scanxen  is  mostly 
dependent  on  the  size  of  the  critical  data  area.  The  main 
overhead of Scanxen comes from scanning the page tables to 
get the dirty bits. 
Figure 7: Emul vs. Emulxen with varying Tsize 
Applications  with  simple  operations  that  have  a  small 
number of writes within a transaction, such as list deletions, 
are a good candidate for emulation-based approaches.  
As shown in the figure, a comparison between Emul and 
Emulxen  shows  a  fourfold  improvement  from  Emul  to 
Emulxen,  further  validating  the  efficacy  of  the  hypervisor-
assisted model.  
C.  Emulation vs Page-tracking 
As  discussed  earlier,  emulation  is  good  for  small 
transactions or transactions with small number of writes per 
page.  In  this  subsection  we  investigate the  break-even point 