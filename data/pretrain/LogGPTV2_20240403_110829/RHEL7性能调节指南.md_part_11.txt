## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Considerations-File_systems}5.1.3. 文件系统 {.title}
:::
::: para
欲了解红帽企业版 Linux 7
中支持文件系统的细节、推荐用例、通常情况下的文件系统可用的格式和挂载选项，请阅读此章节。为这些文件系统的调整推荐，请参见〈[第 5.3.7 节
"为性能配置文件系统"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_tools-Configuring_file_systems_for_performance){.xref}〉。
:::
::: variablelist
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-File_systems-XFS}[XFS]{.term}
:   ::: para
    XFS 是一个可靠的、且可高度缩放的 64 位文件系统。它是红帽企业版
    Linux 7 中默认文件系统。XFS
    使用基于分区的分配，具有一些分配方案，包括预先分配和延迟的分配，这两种都会减少碎片和辅助性能。它也支持促进故障恢复的元数据日志。当挂载并激活时，能够对
    XFS 进行碎片整理和放大，红帽企业版 Linux 7 支持几种 XFS
    特定的备份和还原工具程序。
    :::
    ::: para
    自红帽企业版 Linux 7.0 GA 起，XFS 支持最大容量可达 500 TB
    的文件系统，以及最大容量为 8 EB 的文件偏移量（稀疏文件）。管理 XFS
    的细节，请参见《*红帽企业版 Linux 7
    存储管理指南*》。可在下列网站中查找
    。如有调整
    XFS 的特殊需求而需要协助，请参见〈[第 5.3.7.1 节 "调整
    XFS"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuring_file_systems_for_performance-Tuning_XFS){.xref}〉。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-File_systems-Ext4}[Ext4]{.term}
:   ::: para
    Ext4 是 ext3
    文件系统的可缩放扩展。它的默认行为对大部分工作负载是最佳的。然而，它只支持最大容量为
    50 TB的文件系统以及最大容量为 16 TB 的文件。管理 ext4
    的细节，请参见《*红帽企业版 Linux 7
    存储管理指南*》，可在下列网站中查找
    ，如有调整 ex4 的特殊需求而需要协助，请参见〈[第 5.3.7.2 节 "调整
    ext4"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuring_file_systems_for_performance-Tuning_ext4){.xref}〉。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-File_systems-Btrfs_Technology_Preview}[Btrfs（技术预览）]{.term}
:   ::: para
    Btrfs 是提供缩放性、容错和方便管理的
    copy-on-write（写时复制）文件系统。它包括内置快照和 RAID
    支持，通过数据和元数据校验来提供数据的完整性。它也通过数据压缩提高性能及使用空间的效率。Btrfs
    作为一种技术预览，支持最大容量可达 50 TB 的文件系统。
    :::
    ::: para
    Btrfs
    是最适合桌面存储和云存储的。最初格式化设备时，最好按照预期使用而调整
    btrfs。
    :::
    ::: para
    红帽企业版 Linux 7 提供 Brtfs
    作为技术预览。技术预览特征的细节，请参见
    。
    :::
    ::: para
    管理 brtfs
    的细节，请参见《*红帽企业版Linux 7存储管理手册*》，可在下列网站中查找
    。如有调整
    btrfs 的特殊需求而需要协助，请参见〈[第 5.3.7.3 节 "调整
    btrfs"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuring_file_systems_for_performance-Tuning_btrfs){.xref}〉。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-File_systems-GFS2}[GFS2]{.term}
:   ::: para
    GFS2 是具有极高可用性附加装置的一部分，为红帽企业版 Linux 7
    提供簇文件系统支持。GFS2
    集群提供所有服务器一致的文件系统图像，允许服务器在一个单独共享文件系统中读取和写入。
    :::
    ::: para
    GFS2 支持最大容量可达 250 TB 的文件系统。
    :::
    ::: para
    管理 GFS2 的细节，请参见《*红帽企业版 Linux 7
    存储管理指南*》。可在下列网站中查找
    。如有调整
    GFS2 的特殊需求而需要协助，请参见〈[第 5.3.7.4 节 "调整
    GFS2"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuring_file_systems_for_performance-Tuning_GFS2){.xref}〉。
    :::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Considerations-Generic_tuning_considerations_for_file_systems}5.1.4. 文件系统的一般调整注意事项 {.title}
:::
::: para
此章节涵盖普遍适用于所有文件系统的调整注意事项。特定文件系统的调整推荐，请参见〈[第 5.3.7 节
"为性能配置文件系统"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_tools-Configuring_file_systems_for_performance){.xref}〉。
:::
::: section
::: titlepage
### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Generic_tuning_considerations_for_file_systems-Considerations_at_format_time}5.1.4.1. 格式时间注意事项 {.title}
:::
::: para
在设备格式化后，文件系统配置的部分决定不能改变。此章节包含格式化存储设备前必须要做的决定的可用选项。
:::
::: variablelist
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Considerations_at_format_time-Size}[大小]{.term}
:   ::: para
    按照工作负载创建合理大小的文件系统。按相应比例，较小的文件系统的备份次数也较少，且文件系统检查所需时间和内存也更少。然而，如果您的文件系统太小，性能将因大量碎片而降低。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Considerations_at_format_time-Block_size}[块大小]{.term}
:   ::: para
    块是文件系统中工作的单位。块大小决定单个块能存储多少数据，也因而决定能够同时读写的数据最小量。
    :::
    ::: para
    默认块大小适用于大部分用例。然而，如果块大小（或者多个块大小）和通常同时读写的数据数量一样大，或者略大时，文件系统将执行得更好、存储数据更加有效率。小文件仍将使用一个完整的块。文件分布在多个块中，但这会造成额外的运行时间开销。另外，一些文件系统受限于一定数量的块，转而限制文件系统最大尺寸。
    :::
    ::: para
    使用 `mkfs`{.command}
    指令格式化设备时，块大小作为文件系统选项的一部分而被指定。指定块大小的参数随文件系统变化，文件系统的细节，请参见
    `mkfs`{.command} 手册页。例如，查看格式化 XFS
    文件系统时可用的选项，执行下列命令：
    :::
    ``` screen
    $ man mkfs.xfs
    ```
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Considerations_at_format_time-Geometry}[几何]{.term}
:   ::: para
    文件系统几何与文件系统中数据的分布相关。如果系统使用带状存储器，例如
    RAID，可在格式化设备时，通过重新排列数据和底层存储几何的元数据提高性能。
    :::
    ::: para
    很多数据导出的推荐几何在使用特定文件系统格式化设备时会被自动设置。如果设备没有导出这些推荐几何，或您想要变更推荐设置，那么您在使用
    [**mkfs**]{.application} 格式化设备时，需要手动指定几何 。
    :::
    ::: para
    指定文件系统几何的参数随文件系统而变化；文件系统细节请参见
    `mkfs`{.command} 手册页。例如，查看格式化 ext4
    系统时可用的选项，执行下列命令：
    :::
    ``` screen
    $ man mkfs.ext4
    ```
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Considerations_at_format_time-External_journals}[外部日记]{.term}
:   ::: para
    日志文件系统会在执行写操作之前，将写操作期间发生的变化记录到日志文件中。
    这会降低系统发生故障、电源故障时日志的存储设备损坏的可能性，并加速恢复过程。
    :::
    ::: para
    元数据密集工作负载涉及日志的频繁更新。大型日志使用更多内存，但会减少写操作的频繁性。此外，可通过将设备日志置于和主要存储一样快或者更快的专用存储上，提高带有元数据密集工作负载的设备的寻道时间。
    :::
    ::: {.warning xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **警告**
    :::
    ::: admonition
    ::: para
    确保外部日志的可靠性。失去外部日志，设备将导致文件系统损坏。
    :::
    :::
    :::
    ::: para
    外部日志必须在格式化时便创建，并在挂载期间指定日志设备。细节请参见
    `mkfs`{.command} 和 `mount`{.command} 手册页。
    :::
    ``` screen
    $ man mkfs
    ```
    ``` screen
    $ man mount
    ```
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Generic_tuning_considerations_for_file_systems-Considerations_at_mount_time}5.1.4.2. 挂载时间注意事项 {.title}
:::
::: para
此章节包含适用于大部分文件系统的调整决定，且可在挂载设备时指定。
:::
::: variablelist
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Considerations_at_mount_time-Barriers}[Barrier（屏障）]{.term}
:   ::: para
    文件系统 barrier 确保文件系统元数据正确写入到永久存储并排序，使用
    `fsync`{.methodname} 传输的数据在断电下得以存留。以前红帽企业版
    Linux 版本中，启用文件系统 barrier 会明显放慢严重依赖
    `fsync`{.methodname} 的应用程序，或者创建和删除很多小文件。
    :::
    ::: para
    红帽企业版 Linux 7 中，文件系统 barrier
    性能的得到的改善使禁用的文件系统 barrier
    的性能影响变得极小（小于3%）。
    :::
    ::: para
    更多信息，请参见《*红帽企业版 Linux 7
    存储管理指南*》，可在下列网站中查找
    。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Considerations_at_mount_time-Access_Time}[访问时间]{.term}
:   ::: para
    每次读取文件，它的元数据随访问时间（`atime`{.systemitem}）更新。这涉及额外的写入
    I/O。在大多数情况下，这样的开销是最小的，因为在默认设置下，前次访问时间早于上次修改时间（`mtime`{.systemitem}）
    或者状态变化（`ctime`{.systemitem}），红帽企业版 Linux 7 只更新
    `atime`{.systemitem} 字段。
    :::
    ::: para
    然而，如果更新元数据耗时，且并不对准确访问时间做要求，您可以使用
    `noatime`{.option}
    挂载选项挂载文件系统。读取文件时会禁用元数据的更新。它也会启用
    `nodiratime`{.option} 行为，读取目录时，该行为禁用元数据的更新。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Considerations_at_mount_time-Read_ahead}[预读]{.term}
:   ::: para
    预读行为通过预取可能立即需要的数据，并且将其加载到可比在磁盘上更快检索的页面缓存中加速文件访问。预读值越高，系统预取数据越早。
    :::
    ::: para
    红帽企业版 Linux
    根据对于文件系统的检测，尝试设置一个合适的预读值。然而，检测不可能总是准确的。例如，如果存储数组将自己作为单一
    LUN 展示给系统，系统会检测单一 LUN，但不会为数组设置合适的预读值。
    :::
    ::: para
    涉及大量数据流的量数据流的顺序 I/O
    的工作负载常常受益于高预读值。红帽企业版 Linux 7
    提供的相关存储调整配置文件提高预读值，和使用 LVM
    条带化一样，但这些调整对于所有工作负载而言并不总是足够的。
    :::
    ::: para
    定义预写行为的参数随着文件系统而变化；请参见手册页。
    :::
    ``` screen
    $ man mount
    ```
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Generic_tuning_considerations_for_file_systems-Maintenance}5.1.4.3. 维护 {.title}
:::
::: para
定期丢弃文件系统不用的块是对于固态硬盘和精简配置存储的建议做法。有两种丢弃不使用的块的做法：batch
discard（批量丢弃）和 online discard（网络丢弃）。
:::
::: variablelist
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Storage_and_File_Systems.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Maintenance-Batch_discard}[batch discard（批量丢弃）]{.term}
:   ::: para