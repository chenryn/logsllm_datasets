282
208
141
3085
2017
1310
928.3
684.7
464.2
lays we inserted using the comcast17 tool in Table 3. These
results show that it is possible to run the CV on-premises at
the tenant site at the cost of a reduction in quote checking
rate (and therefore detection latency) and several Mbit/s
of bandwidth. As such, we recommend the highest perfor-
mance and lowest cost option is to run the CV in the cloud
alongside the nodes it will verify.
6. RELATED WORK
Many of the challenges that exist in traditional enterprise
networks exist in cloud computing environments as well.
However, there are new challenges and threats including
shared tenancy and additional reliance on the cloud provider
to provide a secure foundation [4, 16]. To address some of
the challenges, many have proposed trusted computing.
The existing speciﬁcations for trusted computing rely on
trusted hardware, and assume a single owner of the system.
With the advent of cloud computing, this assumption is no
longer valid. While both the standards community [41] and
prior work [2] is beginning the process of supporting virtu-
alization, no end-to-end solution exists. For example, the
cTPM system [5] assumes a trustworthy cloud provider and
requires modiﬁcations to trusted computing standards. An-
other proposal for higher-level validation of services provides
a cryptographically signed audit trail that the hypervisor
provides to auditors [12]. The audit trail captures the exe-
cution of the applications within the virtual machine. This
proposal does not provide a trusted foundation for the audit
trail, and assumes a benign hypervisor. Bleikertz, et al., pro-
pose to use trusted computing to provide cryptographic ser-
vices for cloud tenants[3]. Their Cryptography-as-a-Service
(CaaS) system relies on trusted computing, but does not ad-
dress bootstrapping and requires hypervisor modiﬁcations
17https://github.com/tylertreat/Comcast
that cloud providers are unlikely to support.
To address the issues of scalability, several proposals ex-
ist to monitor a cloud infrastructure, and allow for valida-
tion of the virtual machines controlled by the tenants of the
cloud [34, 32, 33, 35]. The cloud veriﬁer pattern proposed
by Schiﬀman, et al., allows a single veriﬁer to validate trust
in the cloud infrastructure, and in turn the cloud veriﬁer
“vouches” for the integrity of the cloud nodes. This removes
the need for tenants to validate the integrity of the hyper-
visor hosts prior to instantiating cloud nodes on them and
avoids the need for nodes to mutually attest each other be-
fore communicating. The tenant simply provides their in-
tegrity veriﬁcation criteria to the veriﬁer, and the veriﬁer en-
sures that the tenant’s integrity criteria are satisﬁed as part
of scheduling resources. We utilize the cloud veriﬁer pat-
tern in our work, with some important diﬀerences. First we
extend it to support secure system bootstrapping for both
bare metal and virtualized IaaS environments. Second, we
do not host any tenant-owned parts of the integrity mea-
surement infrastructure in the provider’s control as they do.
This means that our solution is substantially less invasive
to the cloud provider’s infrastructure (e.g., they required
nearly 5,000 lines of code to be added to OpenStack) and
is less prone to compromise. For example, keylime relies
upon the vTPM integrity measurements inside tenant nodes
rather than enabling the cloud provider to have explicit vir-
tual machine introspection (i.e., secret stealing) capabilities.
Excalibur works to address the scalability problems of
trusted computing by leveraging ciphertext policy attribute-
based encryption (CPABE) [31]. This encryption scheme
allows data to be encrypted using keys that represent at-
tributes of the hypervisor hosts in the IaaS environment
(e.g., software version, country, zone). Using Excalibur,
clients can encrypt sensitive data, and be assured that a
hypervisor will only be given access to the data if the policy
(the speciﬁed set of attributes) is satisﬁed. Excalibur only
addresses trusted bootstrapping for the underlying cloud
platform. Therefore, a compromised tenant node would be
neither detected nor prevented. The Excalibur monitor is
a provider-owned (but attested) component that holds the
encryption keys that allow a node to boot on a particu-
lar hypervisor. keylime uses secret sharing to avoid having
bootstrap key stored (and therefore vulnerable) in any cloud
systems except for in the cloud node for which they are in-
tended.
The CloudProxy Tao system provides building blocks to
establish trusted services in a layered cloud environment [25].
The Tao environment relies on the TPM to establish iden-
tity and load-time integrity of the nodes and software in
the system. Their system does not support system integrity
monitoring as they assume that all interactions will only be
with other trusted programs running in the Tao environ-
ment. Tao relies upon mutual attestation for all communi-
cating nodes, but is unable to use TPM-based keys because
they are not fast enough to support mutual attestation. Us-
ing the out-of-band CV, we avoid mutual attestation while
maintaining rapid detection of integrity violations. The Key
Server in Tao holds all the secret keys to the system, must
interact with hosts to load new applications, and must be
fully trusted. The Key Server does not oﬀer compatible de-
ployment options for IaaS environments, especially for small
tenants who cannot aﬀord secure facilities or hardware se-
curity modules. Furthermore, CloudProxy Tao does not de-
tail the secure bootstrapping of their Key Server or Privacy
CA component for TPM initialization. keylime explicitly
describes bootstrapping of all relevant components and en-
ables multiple realistic secure deployment options for CV
and registrar hosting.
7. CONCLUSION
In this paper, we have shown that keylime provides a
fully integrated solution to bootstrap and maintain hardware-
rooted trust in elastically provisioned IaaS clouds. We have
demonstrated that we can bootstrap hardware-rooted cryp-
tographic identities into both physical and virtual cloud
nodes, and leverage those identities in higher-level security
services, without requiring each service to become trusted
computing-aware. keylime uses a novel key derivation pro-
tocol that incorporates a tenant’s intent to provision new
cloud resources with integrity measurement. Finally, we
have demonstrated and evaluated several deployment sce-
narios for our system’s critical component, the cloud ver-
iﬁer. keylime can securely derive a key in less than two
seconds during the provisioning and bootstrapping process,
and requires as little as 110ms to respond to an integrity
violation. Furthermore, we have shown that keylime can
scale to support thousands of IaaS nodes while maintaining
quick response to integrity violations.
8. REFERENCES
[1] S. Balfe and A. Mohammed. Final fantasy – securing
on-line gaming with trusted computing. In B. Xiao,
L. Yang, J. Ma, C. Muller-Schloer, and Y. Hua,
editors, Autonomic and Trusted Computing, volume
4610 of Lecture Notes in Computer Science, pages
123–134. Springer Berlin Heidelberg, 2007.
[2] S. Berger, R. C´aceres, K. A. Goldman, R. Perez,
R. Sailer, and L. van Doorn. vtpm: Virtualizing the
trusted platform module. In Proceedings of the 15th
Conference on USENIX Security Symposium - Volume
15, USENIX-SS’06, Berkeley, CA, USA, 2006.
USENIX Association.
[3] S. Bleikertz, S. Bugiel, H. Ideler, S. N¨urnberger, and
A.-R. Sadeghi. Client-controlled
cryptography-as-a-service in the cloud. In
M. Jacobson, M. Locasto, P. Mohassel, and
R. Safavi-Naini, editors, Applied Cryptography and
Network Security, volume 7954 of Lecture Notes in
Computer Science, pages 19–36. Springer Berlin
Heidelberg, 2013.
[4] S. Bouchenak, G. Chockler, H. Chockler,
G. Gheorghe, N. Santos, and A. Shraer. Verifying
cloud services: Present and future. SIGOPS Oper.
Syst. Rev., 47(2):6–19, July 2013.
[5] C. Chen, H. Raj, S. Saroiu, and A. Wolman. ctpm: A
cloud tpm for cross-device trusted applications. In
11th USENIX Symposium on Networked Systems
Design and Implementation (NSDI 14), Seattle, WA,
Apr. 2014. USENIX Association.
[6] X. Chen, T. Garﬁnkel, E. C. Lewis, P. Subrahmanyam,
C. A. Waldspurger, D. Boneh, J. Dwoskin, and D. R.
Ports. Overshadow: A virtualization-based approach
to retroﬁtting protection in commodity operating
systems. SIGPLAN Not., 43(3):2–13, Mar. 2008.
75
[7] J. Criswell, N. Dautenhahn, and V. Adve. Virtual
ghost: Protecting applications from hostile operating
systems. SIGARCH Comput. Archit. News,
42(1):81–96, Feb. 2014.
[8] L. Davi, A.-R. Sadeghi, and M. Winandy. Dynamic
integrity measurement and attestation: towards
defense against return-oriented programming attacks.
In Proceedings of the 2009 ACM workshop on Scalable
trusted computing, pages 49–54. ACM, 2009.
[9] A. Dinaburg, P. Royal, M. Sharif, and W. Lee. Ether:
Malware analysis via hardware virtualization
extensions. In Proceedings of the 15th ACM
Conference on Computer and Communications
Security, CCS ’08, pages 51–62, New York, NY, USA,
2008. ACM.
[10] M. Fioravante and D. D. Graaf. vTPM.
http://xenbits.xen.org/docs/unstable/misc/vtpm.txt,
November 2012.
Symposium on USENIX Security Symposium, SS’07,
pages 16:1–16:9, Berkeley, CA, USA, 2007. USENIX
Association.
[23] R. Kotla, T. Rodeheﬀer, I. Roy, P. Stuedi, and
B. Wester. Pasture: Secure oﬄine data access using
commodity trusted hardware. In Presented as part of
the 10th USENIX Symposium on Operating Systems
Design and Implementation (OSDI 12), pages
321–334, Hollywood, CA, 2012. USENIX.
[24] P. A. Loscocco, P. W. Wilson, J. A. Pendergrass, and
C. D. McDonell. Linux kernel integrity measurement
using contextual inspection. In Proceedings of the 2007
ACM Workshop on Scalable Trusted Computing, STC
’07, pages 21–29, New York, NY, USA, 2007. ACM.
[25] J. Manferdelli, T. Roeder, and F. Schneider. The
cloudproxy tao for trusted computing. Technical
Report UCB/EECS-2013-135, EECS Department,
University of California, Berkeley, Jul 2013.
[11] D. D. Graaf and Q. Xu. vTPM manager.
[26] P. Maniatis, D. Akhawe, K. Fall, E. Shi, S. McCamant,
http://xenbits.xen.org/docs/unstable/misc/vtpmmgr.txt.
[12] A. Haeberlen, P. Aditya, R. Rodrigues, and
P. Druschel. Accountable virtual machines. In
Proceedings of the 9th USENIX Conference on
Operating Systems Design and Implementation,
OSDI’10, pages 1–16, Berkeley, CA, USA, 2010.
USENIX Association.
and D. Song. Do you know where your data are?:
Secure data capsules for deployable data protection. In
Proceedings of the 13th USENIX Conference on Hot
Topics in Operating Systems, HotOS’13, pages 22–22,
Berkeley, CA, USA, 2011. USENIX Association.
[27] D. A. McGrew and J. Viega. The galois/counter mode
of operation (gcm). NIST, 2005.
[13] J. Hennessey, C. Hill, I. Denhardt, V. Venugopal,
[28] T. Moyer, K. Butler, J. Schiﬀman, P. McDaniel, and
G. Silvis, O. Krieger, and P. Desnoyers. Hardware as a
service - enabling dynamic, user-level bare metal
provisioning of pools of data center resources. In 2014
IEEE High Performance Extreme Computing
Conference, Waltham, MA, USA, Sept. 2014.
[14] P. Hintjens. Curvezmq authentication and encryption
protocol. http://rfc.zeromq.org/spec:26, 2013.
[15] O. S. Hofmann, S. Kim, A. M. Dunn, M. Z. Lee, and
E. Witchel. Inktag: Secure applications on an
untrusted operating system. SIGPLAN Not.,
48(4):265–278, Mar. 2013.
[16] W. Huang, A. Ganjali, B. H. Kim, S. Oh, and D. Lie.
The state of public infrastructure-as-a-service cloud
security. ACM Comput. Surv., 47(4):68:1–68:31, June
2015.
[17] IBM. Ibm and intel bring new security features to the
cloud. http://www.softlayer.com/press/
ibm-and-intel-bring-new-security-features-cloud,
September 2004.
[18] IBM. Software trusted platform module.
http://sourceforge.net/projects/ibmswtpm/, April
2014.
[19] Intel. Intel Trusted Boot (tboot).
https://software.intel.com/en-us/articles/
intel-trusted-execution-technology.
[20] Intel. Cloud integrity technology. http://www.intel.
com/p/en US/support/highlights/sftwr-prod/cit,
2015.
[21] T. Jaeger, R. Sailer, and U. Shankar. Prima:
Policy-reduced integrity measurement architecture. In
Proceedings of the Eleventh ACM Symposium on
Access Control Models and Technologies, SACMAT
’06, pages 19–28, New York, NY, USA, 2006. ACM.
[22] B. Kauer. Oslo: Improving the security of trusted
computing. In Proceedings of 16th USENIX Security
T. Jaeger. Scalable web content attestation. IEEE
Transactions on Computers, Mar 2011.
[29] S. Munetoh. GRUB TCG Patch to Support Trusted
Boot. http://trousers.sourceforge.net/grub.html.
[30] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn.
Design and implementation of a tcg-based integrity
measurement architecture. In Proceedings of the 13th
Conference on USENIX Security Symposium - Volume
13, SSYM’04, pages 16–16, Berkeley, CA, USA, 2004.
USENIX Association.
[31] N. Santos, R. Rodrigues, K. P. Gummadi, and
S. Saroiu. Policy-sealed data: A new abstraction for
building trusted cloud services. In Presented as part of
the 21st USENIX Security Symposium (USENIX
Security 12), pages 175–188, Bellevue, WA, 2012.
USENIX.
[32] J. Schiﬀman, T. Moyer, C. Shal, T. Jaeger, and
P. McDaniel. Justifying integrity using a virtual
machine veriﬁer. In Computer Security Applications
Conference, 2009. ACSAC ’09. Annual, pages 83–92,
Dec 2009.
[33] J. Schiﬀman, T. Moyer, H. Vijayakumar, T. Jaeger,
and P. McDaniel. Seeding clouds with trust anchors.
In Proceedings of the 2010 ACM Workshop on Cloud
Computing Security Workshop, CCSW ’10, pages
43–46, New York, NY, USA, 2010. ACM.
[34] J. Schiﬀman, Y. Sun, H. Vijayakumar, and T. Jaeger.
Cloud veriﬁer: Veriﬁable auditing service for iaas
clouds. In Services (SERVICES), 2013 IEEE Ninth
World Congress on, pages 239–246, June 2013.
[35] J. Schiﬀman, H. Vijayakumar, and T. Jaeger.
Verifying system integrity by proxy. In Proceedings of
the 5th International Conference on Trust and
Trustworthy Computing, TRUST’12, pages 179–200,
Berlin, Heidelberg, 2012. Springer-Verlag.
76
[36] A. Segall. Using the tpm: Machine authentication and
attestation. http://opensecuritytraining.info/
IntroToTrustedComputing ﬁles/Day2-1-auth-and-att.
pdf, Oct 2012.
[37] E. G. Sirer, W. de Bruijn, P. Reynolds, A. Shieh,
K. Walsh, D. Williams, and F. B. Schneider. Logical
attestation: An authorization architecture for
trustworthy computing. In Proceedings of the
Twenty-Third ACM Symposium on Operating Systems
Principles, SOSP ’11, pages 249–264, New York, NY,
USA, 2011. ACM.
[38] Trusted Computing Group. TCG Infrastructure
Working Group A CMC Proﬁle for AIK Certiﬁcate
Enrollment. http:
//www.trustedcomputinggroup.org/ﬁles/resource
ﬁles/738DF0BB-1A4B-B294-D0AF6AF9CC023163/
IWG CMC Proﬁle Cert Enrollment v1 r7.pdf.
[39] Trusted Computing Group. Trusted Network
Communications.
http://www.trustedcomputinggroup.org/developers/
trusted network communications.
[40] Trusted Computing Group. Trusted Platform Module.
http://www.trustedcomputinggroup.org/developers/
trusted platform module.
[41] Trusted Computing Group. Virtualized Platform.
http://www.trustedcomputinggroup.org/developers/
virtualized platform.
77