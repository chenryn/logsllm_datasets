Julia 0.4 gets subtype relation wrong inside a function scope with tuple
types:
    immutable FakeMethod
        sig::Type{Tuple}  # no error below if leaving the type declaration off!
    end
    fmm = methods(sin, (Complex{Float16},))[1]
    _sin(::String) = Float64()
    tmm = methods(_sin, (String,))[1]
    @assert !( tmm.sig<:fmm.sig)
    tm = FakeMethod(tmm.sig)
    fm = FakeMethod(fmm.sig)
    # In global scope all works:
    @show tmm.sig, fmm.sig
    @show tm.sig, fm.sig
    @show tm.sig<:fm.sig # true
    @show fm.sig<:tm.sig # true
    @show fm.sig==tm.sig  # false
    @show fm.sig===tm.sig # false
    @assert !( tm.sig<:fm.sig )
    function f(tmm, fmm)
        println("\nInside function:")
        tm = FakeMethod(tmm.sig)
        fm = FakeMethod(fmm.sig)
        @show tmm.sig, fmm.sig
        @show tm.sig, fm.sig
        @show tm.sig<:fm.sig # true!!!!!!!!!
        @show fm.sig<:tm.sig # true!!!!!!!!!
        @show fm.sig==tm.sig  # false (true before #10380)
        @show fm.sig===tm.sig # false
        @assert !( tm.sig<:fm.sig ) # throws an error here
    end
    f(tmm,fmm)
Note that it works fine if the type is declared as:
    immutable FakeMethod
        sig
    end