并发版本系统
CVS 的新型替代品
swat
否
Samba 网络管理工具
基于 Samba 管理的网络
sys1og
是
系统登录
项必要的服务，控制整个系统上的所有登录.
tmdns
否
多点传送DNS响应器
用于零配置环境
ultrabayed
否
ThinkPad 工具
此服务为你的 IBM ThindPad 探测 ultrabay，
并在适当情况下启动/关闭IDE接口
upsd
否
NUT精灵进程及驱动器
个不间断地电源监控及报告工具
此服务向中心地址报告，产生关于UPS统计的数据库
upsmon
否
UPS 监控工具
此服务监控UPS的状况，在其运行低下时关系
系统
vncserver
否
虚拟网络计算服务器
在项目中应用VNC时非常有用
Webmin
否
远程管理工具
发行配套软件Agnostic远程管理工具.在机
器不能总是直接访问，如网络服务器集群时有用
winbind
否
Sanba名称服务器
Samba网络运行所必需.此服务将用户与
群数据从 windows 网络映射到Linux 工作站中.
wine
否
Wine并非竞争者
此服务使MS Windows 可在Linux 上执
行, WINE 是商业产品 Crossover Office 的限制版本.
w1an
否
控制精灵进程
由于服务通常由init进程控制，此控制服务
不常用
xinetd
是
监控并控制其它服务器的服务器
这是一项必需的服务，它实
际上减少了服务器上CPU的负载.如果你需要SSH，ftp等但并不总是需要，x?inetd版本将在请求，甚
至是远程需求时启动它们.此服务让它们生效，但如果它们一天/周只使用几次的话，又释放了时钟周
期
xfs
是
X字体服务器
你任何时间需要使用图形用户界面（GUI），就
需要此服务。
ypbind
否
SUN的YP服务器名称服务器
此服务用于基于GLIBC的
NIS/YP 网络服务
---
## Page 105
十三、环境管理
1、环境变量
在linux系统下，如果你下载并安装了应用程序，很有可能在键入它的名称时出现“commandnot
found”的提示内容。如果每次都到安装目标文件夹内，找到可执行文件来进行操作就太繁琐了。这涉
及到环境变量PATH的设置问题，而PATH的设置也是在1inux下定制环境变量的一个组成部分。
环境变量可以让子程序继续引用的原因，是因为：
1.当启动一个shell，操作系统分配一记忆区块给shel1使用，此区域之变量可以让子程序存
取：
2.利用export功能，可以让变量的内容写到上述的记忆区块当中（环境变量）：
当加载另一个shel1时（亦即启动子程序，面离开原本的父程序了），子shel13.可以将父
shel1的环境变量所在的记忆区块导入自己的环境变量区块当中。
所以环境变量是和Shel1紧密相关的，用户登录系统后就启动了一个Shel1。对于Linux来说一般
是bash，但世可以重新设定或切换到其它的She11（使用chsh 备令）
根据发行版本的情况，bash有两个基本的系统级配置文件：/etc/bashrc和/etc/profile。这些配
置文件包含两组不同的变量：shel1变量和环境变量。前者只是在特定的shel1中固定（如bash），后
者在不同she11中固定。很明显，she11变量是局部的，而环境变量是全局的。环境变量是通过Shell
命令来设置的，设置好的环境变量又可以被所有当前用户所运行的程序所使用。对于bash这个Shel1
程序来说，可以通过变量名来访间相应的环境变量，通过export来设置环境变量。
注：Linux的环境变量名称一般使用大写字母
1.1、Linux环境变量的种类
按环境变量的生存周期来划分，Linux的环境变量可分为两类：
①永久的：需要修改配置文件，变量永久生效。
②临时的：使用export命令行声明即可，变量在关闭shell时失效。
1.2、设置变量的三种方法
①在/etc/profile文件中添加变量对所有用户生效（永久的）
用VI在文件/etc/profile文件中增加变量，该变量将会对Linux下所有用户有效，并且是“永久
生效”
例如：编辑/etc/profile文件，添加 CLASSPATH 变量
# vi /etc/profile
export CLASSPATH=. /JAVA_HOME/1ib; $JAVA_HOME/jre/lib
注1：profile文件在系统启动时将被运行。大家可以在里面加入其他命令，但是一定要加正确，不然
的话系统会启动不起来的。
②在用户目录下的.bash_profile文件中增加变量对单一用户生效（永久的）
用VI在用户目录下的.bash_profile文件中增加变量，改变量仅会对当前用户有效，并且是“永
久的”
例如：编辑 guok 用户目录（/home/guok）下的. bash_profile
# vi /home/guok/. bash. profile
---
## Page 106
添加如下内容：
export CLASSPATH=, /JAVA_HOME/1ib;$JAVA_HOME/ jre/1ib
注2：如果修改了/etc/profile，那么编辑结束后执行source profile或执行点命令./profile,PATH
的值就会立即生效了。这个方法的原理就是再执行一次/etc/profileshel1脚本，注意如果用sh
/etc/profile是不行的，因为sh是在子shel1进程中执行的，即使PATH改变了也不会反应到当前环
境中，但是source是在当前shel1进程中执行的，所以我们能看到PATH的改变。
注3：变量重复定义时，以后面的设置为先。
例如：在peofile文件默认对 PATH变量都有设置PATH=￥YYYYY￥，在以后可能在对PATH设
置，一般都加在profile文件的最后PATH=·"""（打个比方）。而系统之中认定的
PATH=**"**YYYYYYYYY，也就是说相同名字的环境变量，后写入的先起作用（通俗地讲）。
注4、特殊字符介绍。
例如在profile中有如下内容，通过以下内容说明特殊符号的用法。
export A=/q/,jing:aaa/cc/1d
export B=. :/1iheng/wang export A=/cd/cdr:$A
：表示并列含义，例如A变量值有多个，用：符号进行分离。
，表示你操作的当前目录。例如pap命令会查找B环境变量。
在/home键入B命令，系统首先在/home目录下（即当前路径）查找关于B的内容，如果没有在
/liheng/wang目录下查找关于B的内容。$表示该变量本次定义之前的值，例如sA代表
/q/jing:aaa/cc/1d。 也就是说 A=/cd/cdr:/q/jing:aaa/cc/1d
注5、常见的环境变量
PATH：决定了she11将到哪些目录中寻找命令或程序
HOME：当前用户主目录
MAIL：是指当前用户的邮件存放目录。
SHELL：是指当前用户用的是哪种She11。
HISTSIZE：是指保存历史命令记录的条数。
LOGNAME：是指当前用户的登录名。
HOSTNAME：是指主机的名称，许多应用程序如果要用到主机名的话，通常是从这个环境变量中来取得的。
LANG/LANGUGE：是和语言相关的环境变量，使用多种语言的用户可以修改此环境变量。
PS1：是基本提示符，对于root用户是#，对于普通用户是$。
PS2：是附属提示符，默认是“>”。可以通过修改此环境变量来修改当前的命令符，比如下列命令
会将提示符修改成字符串“Hello,My NewPrompt：）”。
# PS1= He1lo, My NewPrompt :) a
直接运行export命令定义变量【只对当前shel1（BASH）有效（临时的）】
在shel1的命令行下直接使用[export变量名=变量值]定义变量，该变量只在当前的 shel1（BASH）或
其子shel1（BASH）下是有效的，shel1关闭了，变量也就失效了，再打开新shel1时就没有这个变量，
需要使用的话还蓄要重新定义。
1.3、环境变量设置命令
①echo$（变量名）//显示某个环境变量
env//environment（环境）的简写，列出来所有的环境变量
---
## Page 107
set//显示所有本地定义的Shel1变量，这个命令除了会将环境变量列出来之外，其它我们
的自定义的变量，都会被列出来。因此，想要观察目前shel1环境下的所有变量，就用set即可！
①export命令
功能说明：设置或显示环境变量。
语
法：export[-fnp][变量名称]=[变量设置值]
补充说明：在shel1中执行程序时，shel1会提供一组环境变量。export可新增，修改或删除环
境变量，供后续执行的程序使用。export的效力仅及于该此登陆操作。
参
数：
-f代表[变量名称]中为函数名称。
-n删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。
-P列出所有的shel1赋予程序的环境变量。
一个变量创建时，它不会自动地为在它之后创建的shell进程所知。而命令export可以向后面
的shel1传递变量的值。当一个shel1脚本调用并执行时，它不会自动得到原为脚本（调用者）
里定义的变量的访问权，除非这些变量已经被显式地设置为可用。export命令可以用于传递一
个或多个变量的值到任何后继脚本。
unset清除环境变量，如果未指定值，则该变量值将被设为NULL
@readonly设置只读变量，只读变量设置后不能用unset清除，除非重启shell
declare、typeset这两个命令是完全一样的，他们允许指定变量的具体类型，在某些特定的语言
中，
这是一种指定类型的很弱的形式，declare 命令是在Bash 版本2或之后的版本才被加入的，typeset
命令也可以工作在ksh脚本中。
[root@linux ~]# declare [aixr]  variable
参数：
-a：将后面的variable定义成为数组（array)
-i：将后面接的variable定义成为整数数字（integer)
-x：用法与export一样，就是将后面的variable 变成环境变量：
T：将一个variable 的变量设定成为readonly，该变量不可被更改内容，也不能unset
范例一：让变量sum进行100+300+50的加总结果
[root@1inux ]# sum=100+300+50
[root@linux ^]# echo $sum
09+00g+00t=mns [ a.re oap # xnunte4oo.1]
[rootelinux ~]# echo $sum
450
范例二：将sum变成环境变量
[rootelinux ~]# declare x sum
范例三：让sum变成只读属性，不可更动！
[rootelinux ~]# declare -r sum
[rootelinux ~]# sum=tesgting
---
## Page 108
bash: sum: readonly variable
十四、网络管理
网卡在Linmux 操作系统中用ethX，是由O开始的正整数，比如ethO、ethl......ethX。而普通猫和
ADSL 的接口是 pppX，比如 pppO 等
7.1、ifconfig
1、关于网络接口及配置工具说明：
在Linmux操作系统中配置网络接口，一般是通过网络配置工具实现的，但最终目的还是通过网络配
置工具来达到修改与网络相关的配置文件而起作用的。由此说来，我们配置网络可以直接修改配置文件。
比如网络网络接口（网卡）的IP地址、子掩码、网关，在Slackware 中只需修改一个配置文件就
行了/etc/rc.d/rc.inet1，而在 Redhat/Fedora 等或以Redhat/Fedora 为基础的发行版中，一般要
涉及到好儿个文件，比如包括/etc/sysconfig/network-scripts/ifcfg-etho 在内等。
了解Linux网络配置文件是极为重要的，我们通过工具修改了什么，是怎么生效的，只有了解网络
配置文件才能搞清楚。做个不恰当的比喻：Linux系统是一个透明的盒子，至于盒子里装的是什么都是
一目了然的。而闭源操作系统，我们没有机会知道这些，更不知道他是怎么实现的。
对于复杂的网络模型，Linux操作系统是有极大的优势，可能在我们看看man和help，修改修改
配置文件，在几分钟就可以搞定。但闭源图形界面的操作系统就没有这么幸运了，反复的点鼠标
点了几十次上百次也解决不了一个问题，这是极为常见的。由于Linux操作系统存在很多的发行
和版本，大多发行版本都有自己的专用配置工具。主要是为了方使用户配置网络：但也有通用的配置工
具,比如 Linux ifconfig、ifup、ifdown;
2关于网络硬件设备的驱动：
我在以前的文档中有写过，网络硬件，比如网卡（包括有线、无线），猫包括普通猫和ADSL猫等
都是需要内核支持的，所以我们音先得知道自己的网络设备是不是已经被硬内核支持了。如果不支持，
我们得找驱动（或通过内核编译）来支持它：请参考：
3、Linuxifconfig配置网络接口的工具介绍：
Linuxifconfig是一个用来查看、配置、启用或禁用网络接口的工具，这个工具极为常用的。比
如我们可以用这个工具来临时性的配置网卡的IP地址、掩码、广播地址、网关等。也可以把它写入一
个文件中（比如/etc/rc.d/rc.local），这样系统引导后，会读取这个文件，为网卡设置IP地址：
不过这样做目前看来没有太大的必要。主要是各个发行版本都有自己的配置工具，无论如何也能把
主机加入到网络中：下面我们看看Linuxifconfig用法：
---
## Page 109
3.1Linuxifconfig查看网络接口状态：
Linuxifconfig如果不接任何参数，就会输出当前网络接口的情况：
1.[rootelocalhost ~]# Linux ifconfig
2.eth0Link encap:Ethernet HWaddr 00:C0:9F:94:78:0E
3.inet addr: 192. 168. 1. 88 Bcast:192. 168. 1. 255 Mask:255. 255. 255. 0
4. inet6 addr: fe80: :2c0:9fff:fe94: 780e/64 Scope:Link
5. UP BR0ADCAST RUNNING MULTICAST MTU:1500 Metric:1
6. RX packets:850 errors:0 dropped:0 overruns:0 frame:0
7. TX packets:628 errors:0 dropped:0 overruns:0 carrier:0
8. collisions:0 txqueuelen:1000
9.RX bytes:369135 (360. 4 KiB)TX bytes:75945 (74. 1 KiB)
10. Interrupt:10 Base address:0x3000
11.
12. 1o  Link encap:Local Loopback
13. inet addr:127. 0. 0. 1 Mask:255. 0. 0. 0
14. inet6 addr: ::1/128 Scope:Host
15. UP L00PBACK RUNNING MTU: 16436  Metric:1
16. RX packets:57 errors:0 dropped:0 overruns:0 frame:0
17. TX packets:57 errors:0 dropped:0 overruns:0 carrier:0
18. collisions:0 txqueuelen:0
19. RX bytes:8121 (7. 9 KiB) TX bytes:8121 (7. 9 KiB)
解说：eth0表示第一块网卡，其中HWaddr表示网卡的物理地址，我们可以看到目前这个网卡的
物理地址（MAC地址）是00:C0:9F：94:78:0E：inetaddr用来表示网卡的IP地址，此网卡的IP地
址是 192.168.1.88， 广播地址， Bcast:192.168.1.255，掩码地址 Mask:255.255.255.0
10是表示主机的回坏地址，这个一般是用来测试一个网络程序，但文不想让局域网或外网的用户
能够查者，只能在此台主机上运行和查者所用的网络接口。比如我们把HTTPD服务器的指定到回坏地址，
在浏览器输入127.0.0.1就能看到你所架WEB网站了。但只是您能看得到，局域网的其它主机或用户
无从知道：
如果我们想知道主机所有网络接口的情况，请用下面的命令：[rootélocalhost“]#Linux
ifconfig-a如果我们想查看某个端口，比如我们想查看eth0的状态，就可以用下面的方法：
rootelocalhost J# Linux ifconfig eth0
3.2Linuxifconfig配置网络接口；
Linuxifconfig可以用来配置网络接口的IP地址、掩码、网关、物理地址等：值得一说的是用
Linuxifconfig为网卡指定IP地址，这只是用来调试网络用的，并不会更改系统关于网卡的配置文件。
---
## Page 110
如果您想把网络接口的IP地址固定下来，目前有三个方法：一是通过各个发行和版本专用的工具
来修改IP地址：二是直接修改网络接口的配置文件：三是修改特定的文件，加入Linuxifconfig指
令来指定网卡的 IP地址，比如在redhat 或Fedora 中，把Linux ifconfig 的语名写入
/etc/rc. d/rc. local 文件中：
Linux ifconfig配置网络端口的方法：Linux ifconfig工具配置网络接口的方法是通过指令的
参数来达到目的的，我们只说最常用的参数：Linux ifconfig网络端口IP地址huMAC
地址netmask掩码地址broadcast广播地址[up/down]
买例一：
比如我们用Linuxifconfig来调试etho网卡的地址
1.[rootelocalhost ^]# Linux ifconfig eth0 down
2.[root@localhost J# Linux ifconfig eth0  192. 168. 1. 99 broadcast 192. 168. 1. 255 netma
sk 255. 255. 255. 0
3.[rootelocalhost ]# Linux ifconfig eth0 up
4.[rootelocalhost ~]# Linux ifconfig eth0
5.eth0 Link encap:Ethernet Haddr 00:11:00:00:11:11
6.inet addr: 192. 168. 1. 99  Bcast: 192. 168. 1. 255  Mask:255. 255. 255. 0
7. UP BR0ADCAST MULTICAST MTU:1500 Metric:1