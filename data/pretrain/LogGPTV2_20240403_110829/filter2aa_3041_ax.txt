以下是优化后的文本，使其更加清晰、连贯和专业：

```go
package main

import (
	"fmt"
	"sync"
	"time"
)

// wg 用于等待所有 goroutine 完成
var wg sync.WaitGroup

// main 是 Go 程序的入口点
func main() {
	// 创建一个无缓冲的通道来传递接力棒
	baton := make(chan int)

	// 为最后一位跑步者增加 WaitGroup 计数
	wg.Add(1)

	// 启动第一位跑步者
	go Runner(baton)

	// 开始比赛
	baton <- 1

	// 等待所有跑步者完成
	wg.Wait()
}

// Runner 模拟接力比赛中的一位跑步者
func Runner(baton chan int) {
	var newRunner int

	// 等待接力棒
	runner := <-baton

	// 开始绕着跑道跑步
	fmt.Printf("Runner %d Running With Baton\n", runner)

	// 创建下一位跑步者
	if runner != 4 {
		newRunner = runner + 1
		fmt.Printf("Runner %d To The Line\n", newRunner)
		go Runner(baton)
	}

	// 围绕跑道跑
	time.Sleep(100 * time.Millisecond)

	// 检查比赛是否结束
	if runner == 4 {
		fmt.Printf("Runner %d Finished, Race Over\n", runner)
		wg.Done()
		return
	}

	// 将接力棒交给下一位跑步者
	fmt.Printf("Runner %d Exchange With Runner %d\n", runner, newRunner)
	baton <- newRunner
}
```

### 代码解释

1. **导入包**：
   ```go
   import (
       "fmt"
       "sync"
       "time"
   )
   ```

2. **WaitGroup 初始化**：
   ```go
   var wg sync.WaitGroup
   ```

3. **main 函数**：
   - 创建一个无缓冲的 `int` 类型通道 `baton` 来同步传递接力棒。
   - 使用 `wg.Add(1)` 增加 WaitGroup 计数，确保 `main` 函数会等待最后一位跑步者完成。
   - 启动第一个 `Runner` goroutine。
   - 将接力棒传递给第一位跑步者，开始比赛。
   - 使用 `wg.Wait()` 阻塞 `main` 函数，直到所有跑步者完成。

4. **Runner 函数**：
   - 接收接力棒并打印当前跑步者的信息。
   - 如果当前跑步者不是最后一位，则创建下一个跑步者并启动新的 `Runner` goroutine。
   - 模拟跑步过程，使用 `time.Sleep(100 * time.Millisecond)` 休眠 100 毫秒。
   - 检查是否是最后一位跑步者，如果是则调用 `wg.Done()` 并返回。
   - 将接力棒传递给下一个跑步者，并继续比赛。

### 输出示例
运行上述程序将产生如下输出：
```
Runner 1 Running With Baton
Runner 1 To The Line
Runner 1 Exchange With Runner 2
Runner 2 Running With Baton
Runner 2 To The Line
Runner 2 Exchange With Runner 3
Runner 3 Running With Baton
Runner 3 To The Line
Runner 3 Exchange With Runner 4
Runner 4 Running With Baton
Runner 4 Finished, Race Over
```

### 有缓冲的通道

#### 介绍
有缓冲的通道可以在接收前存储一个或多个值。这种类型的通道不要求发送和接收操作同时完成。只有在通道中没有可接收的值时，接收操作才会阻塞；只有在通道没有可用缓冲区容纳被发送的值时，发送操作才会阻塞。这与无缓冲通道不同，后者保证发送和接收操作在同一时间进行数据交换。

#### 示例
以下是一个使用有缓冲通道管理一组 goroutine 来处理工作的示例：

```go
package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

const (
	numberGoroutines = 4  // 要使用的 goroutine 数量
	taskLoad         = 10 // 要处理的工作数量
)

var wg sync.WaitGroup

func init() {
	rand.Seed(time.Now().Unix())
}

func main() {
	tasks := make(chan string, taskLoad)

	wg.Add(numberGoroutines)
	for gr := 1; gr <= numberGoroutines; gr++ {
		go worker(tasks, gr)
	}

	for post := 1; post <= taskLoad; post++ {
		tasks <- fmt.Sprintf("Task : %d", post)
	}

	close(tasks)
	wg.Wait()
}

func worker(tasks chan string, worker int) {
	defer wg.Done()

	for {
		task, ok := <-tasks
		if !ok {
			fmt.Printf("Worker: %d : Shutting Down\n", worker)
			return
		}

		fmt.Printf("Worker: %d : Started %s\n", worker, task)
		sleep := rand.Int63n(100)
		time.Sleep(time.Duration(sleep) * time.Millisecond)
		fmt.Printf("Worker: %d : Completed %s\n", worker, task)
	}
}
```

### 输出示例
运行上述程序将产生如下输出：
```
Worker: 1 : Started Task : 1
Worker: 2 : Started Task : 2
Worker: 3 : Started Task : 3
Worker: 4 : Started Task : 4
Worker: 1 : Completed Task : 1
Worker: 1 : Started Task : 5
Worker: 4 : Completed Task : 4
Worker: 4 : Started Task : 6
Worker: 1 : Completed Task : 5
Worker: 1 : Started Task : 7
Worker: 2 : Completed Task : 2
Worker: 2 : Started Task : 8
Worker: 3 : Completed Task : 3
Worker: 3 : Started Task : 9
Worker: 1 : Completed Task : 7
Worker: 1 : Started Task : 10
Worker: 4 : Completed Task : 6
Worker: 4 : Shutting Down
Worker: 3 : Completed Task : 9
Worker: 3 : Shutting Down
```

通过这些示例，你可以看到如何使用无缓冲和有缓冲的通道来同步和协调 goroutine 的执行。