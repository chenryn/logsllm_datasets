title:On the prevalence and characteristics of MPLS deployments in the
open internet
author:Joel Sommers and
Paul Barford and
Brian Eriksson
On the Prevalence and Characteristics of MPLS
Deployments in the Open Internet
Joel Sommers
Colgate University
PI:EMAIL
Brian Eriksson
Boston University
PI:EMAIL
Paul Barford
University of
Wisconsin-Madison and
Qualys, Inc.
PI:EMAIL
ABSTRACT
Multi-Protocol Label Switching (MPLS) is a mechanism that en-
ables service providers to specify virtual paths through IP networks.
The use of MPLS in the open Internet (i.e., public end-to-end paths)
has important implications for users and network neutrality since
MPLS is frequently used in trafﬁc engineering applications today.
In this paper we present a longitudinal study of the prevalence and
characteristics of MPLS deployments in the open Internet. We
use path measurement data collected over the past 3.5 years by
the CAIDA Archipelago project (Ark), which consist of over 10
billion individual traceroutes between hosts throughout the Inter-
net. We use two different techniques for identifying MPLS paths
in Ark data: direct observation via ICMP extensions that include
MPLS label information, and inference using a Bayesian data fu-
sion methodology. Our direct observation method can only identify
uniform-mode tunnels, which very likely underestimates MPLS de-
ployments. Nonetheless, our results show that the total number of
tunnels observed in a given measurement period has varied widely
over time with the largest deployments in tier-1 providers. About
7% of all autonomous systems deploy MPLS and this level of de-
ployment has been consistent over the past three years. The average
length of an MPLS tunnel has decreased from 4 hops in 2008 to 3
hops in 2011, and the path length distribution is heavily skewed.
About 25% of all paths in 2011 cross at least one MPLS tunnel,
while 4% cross more than one. Finally, data observed in MPLS
headers suggest that many ASes employ some types of trafﬁc clas-
siﬁcation and engineering in their tunnels.
Categories and Subject Descriptors
C.2.3 [Network Operations]: Network management, Network mon-
itoring; C.2.5 [Local and Wide-Area Networks]: Internet (e.g.,
TCP/IP; C.4 [Performance of Systems]: Measurement Techniques
General Terms
Algorithms, Design, Experimentation, Measurement, Performance
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’11, November 2–4, 2011, Berlin, Germany.
Copyright 2011 ACM 978-1-4503-1013-0/11/11 ...$10.00.
Keywords
MPLS, traceroute, trafﬁc engineering, tunnels
1.
INTRODUCTION
In the late 1990’s, the limitations and inﬂexibility in IP routing
and forwarding coupled with the on-going quest to improve switch-
ing performance led to the development of Multiprotocol Label
Switching (MPLS). Label switching1 was envisioned and designed
as a simple mechanism that would operate between layers 2 and 3
in the standard Internet protocol stack, and enable efﬁcient lookups
at each hop on a designated path. Standardization efforts in the
IETF began in 1997 [14] and have resulted in an assortment of
drafts and RFCs that deﬁne and specify the protocol. Today, MPLS
is a standard feature in routers and is available on a wide variety of
platforms from many different vendors.
Along with improved switching speeds, MPLS was quickly rec-
ognized as a highly useful protocol for trafﬁc engineering [10].
MPLS affords the ability to conﬁgure multi-hop tunnels that su-
persede shortest path routes for deﬁnable trafﬁc aggregates. It en-
ables service providers to operate their infrastructures in a fashion
that more directly addresses their business and operational require-
ments. Anecdotal reports suggest that MPLS is currently used by
service providers in a variety of ways including facilitating trafﬁc
engineering, implementation of multi-service networks (including
virtual private networks), and improving robustness [34]. Despite
its appeal and implications of its broad use, to the best of our knowl-
edge there are no studies to date that provide a systematic empirical
assessment of MPLS deployments in the Internet.
In this paper, we present a longitudinal analysis of MPLS de-
ployments in the open Internet (i.e., paths that are not part of vir-
tual private networks). The goal of our work is to establish a broad
empirical baseline for MPLS since tunnels have a direct impact
on trafﬁc behavior and measurement, and have signiﬁcant implica-
tions for network neutrality, which is an increasingly active topic
of conversation. We seek to answer questions such as: How many
networks use MPLS? Has the use of MPLS grown over time? What
are the characteristics of individual MPLS tunnels? How likely is
it that my trafﬁc will encounter an MPLS tunnel? To address these
questions, we require measurements of a large set of Internet paths
conducted over a period of years.
Studies of Internet-wide phenomena related to end-to-end, router-
level path properties typically rely on active probe-based measure-
ment tools such as traceroute for gathering data. At ﬁrst glance,
MPLS appears to present an insurmountable challenge to standard
TTL-limited active probing methods that rely on layer 3 messaging
1Originally it was called "tag switching" [30] and had roots in Ip-
silon’s ﬂow management protocol [29].
445since MPLS is not a layer 3 protocol. However, relatively recent
extensions to the ICMP protocol [12] that enable it to include the
entire MPLS label stack overcome this challenge (as long as the
measurement tool and target routers implement the extensions and
the router is not conﬁgured to hide the tunnel). Traceroute-style
path measurements that include MPLS label stacks are the starting
point for our work.
We use data collected by the Ark project [22], which, since
2008 includes MPLS label stacks wherever they are in use and
visible on an end-to-end path. Network operators can conﬁgure
MPLS tunnels in such a way as to hide them from traceroute.
Thus, our work relies on tunnels that are conﬁgured in uniform
(visible) mode, which we describe below. The Ark infrastructure
and methodologies have been designed to efﬁciently measure all
routable /24’s in the Internet. Since its inception, Ark has con-
ducted over 10B individual traceroute measurements, and as
such offers are a compelling source of data for our longitudinal
study.
Our analysis of MPLS labels in Ark path measurement data re-
veals a broad set of characteristics about the deployment and use of
the protocol. In particular, we ﬁnd that the total number of tunnels
observed in any measurement period has varied widely over time
from a low of about 200K in ’09 to a recent high of around 350K.
Curiously, we ﬁnd that the variability of tunnel deployments cor-
relates closely with key economic indicators. Roughly 7% of all
autonomous systems use MPLS on some subset of their paths with
the largest deployments in tier-1 providers. This level of deploy-
ment has been relatively stable over the past three years. We also
ﬁnd that the average length of an MPLS tunnel has decreased from
4 hops in 2008 to 3 hops in 2011. The tunnel length distribution is
heavily skewed with over 90% of tunnels at 7 hops or less, however
some tunnels extend beyond 15 hops. Approximately 25% of all
paths in 2011 cross at least one MPLS tunnel, while 4% cross more
than one, and data observed in MPLS headers suggest that many
ASes employ some kinds of trafﬁc classiﬁcation and engineering
in their tunnels.
While label-based analysis enables a compelling characteriza-
tion of MPLS path properties, it precludes analysis of other path
measurement data archives (e.g., Skitter [13]) that do not include
labels. Analysis of data sets that lack the ICMP extension infor-
mation could expand our perspective and enable a more compre-
hensive longitudinal analysis. To address this problem we develop
an MPLS tunnel identiﬁcation method that is based on analysis of
round trip time measurements instead of labels. The observation
is that with some MPLS conﬁgurations, when a packet’s TTL ex-
pires, the ICMP time exceeded message will be encapsulated in an
MPLS header and forwarded to the end of the tunnel prior to be-
ing sent back to the source host. This observation is the basis for a
Bayesian inference method that we show to be effective for identi-
fying MPLS tunnels. Applying this method to additional data sets
to gain a broader view of MPLS deployments over time is a goal
for future work.
A summary of the key ﬁndings our work are as follows. First,
the increasing trend in deployments over the past three years and
the wide use by tier-1 providers means that it is increasingly likely
that packets will encounter an MPLS tunnel. Second, tunnels are
likely to span the entire edge-to-edge distance of a transit provider,
with typical transit times on the order of 10s of milliseconds. Third,
our examination of the use of trafﬁc classiﬁers indicates that while
multiple classes are not uncommon, the diversity of classes has not
changed over the past three years.
The remainder of this paper is organized as follows.
In Sec-
tion 2, we provide an overview of MPLS, how MPLS interacts with
traceroute, and our label-based method for identifying MPLS
hops on an end-to-end path. In Section 3, we provide details on the
Ark data set and report the details of our label-based MPLS deploy-
ment study. In Section 4, we describe our inference-based method
for identifying MPLS paths and report our ﬁndings on applying this
method to the Ark data. We summarize our work and describe next
steps in our study in Section 6.
2. MPLS AND TRACEROUTE
MPLS is typically thought of as a protocol that exists between
layers 2 and 3 of the Internet protocol stack. Fundamentally, it
is path-based encapsulation and forwarding protocol that adds a
32-bit header to packets as they enter an MPLS tunnel, or label-
switched path (LSP). We use the terms tunnel and LSP interchange-
ably in this paper. The MPLS header consists of a 20-bit label, 8-bit
time-to-live (TTL) ﬁeld, 3-bit trafﬁc class ﬁeld, and a 1-bit end of
label stack ﬁeld.
Speciﬁc labels are applied to packets based on forwarding equiv-
alence class (FEC), which is a generalization of longest-preﬁx
match. As packets traverse an MPLS tunnel, forwarding decisions
are made based on exact matching of the MPLS label. Labels are
only locally signiﬁcant between a pair of routers, so as packets tra-
verse a tunnel, labels are swapped (overwritten) prior to forward-
ing. Hierarchies of tunnels can also be created (i.e., an already-
tunneled packet can enter a new tunnel); stacks of MPLS headers
can be used for this purpose.
MPLS tunnels must be conﬁgured (and labels distributed) on
each label switch router (LSR) along a designated path (series of
LSRs), and supersede layer 3 routes. The ﬂexibility to deﬁne paths
through a network not simply based on shortest paths makes MPLS
highly attractive for trafﬁc engineering tasks. Details on MPLS can
be found in [31], and several other IETF RFCs.
Our work relies on recent modiﬁcations to routers and
traceroute programs that implement extensions to ICMP spec-
iﬁed in RFC 4950. These extensions permit the inclusion of the
entire MPLS label stack (i.e., all MPLS header information) in the
ICMP message that is returned to a source host [12]. Thus, it is
this information included in ICMP time exceeded messages that
are generated as part of the traceroute process that allows us to
positively identify a router as participating in an MPLS tunnel.
There are two basic ways in which the IP time-to-live (TTL) ﬁeld
is processed in the presence of an MPLS tunnel. These are referred
to as uniform mode and pipe mode [9], and they determine whether
an MPLS tunnel is visible to a public user of traceroute or not2.
Figure 1 illustrates these two modes of operation.
In pipe mode, the MPLS tunnel is not exposed to a traceroute
user. At LSR B in Figure 1, the IP TTL is decremented by one and
inspected upon router ingress. After that, the packet is encapsulated
in an MPLS header and forwarded to the next LSR along the path.
The MPLS header that is constructed at the ﬁrst LSR is initialized
with a prespeciﬁed TTL value, typically 255. Upon egress from a
pipe mode tunnel, the MPLS header is removed and the TTL value
in the IP header is unchanged. Thus, the MPLS TTL ﬁeld has no
relationship to the IP TTL in a pipe-mode tunnel, and the IP TTL
is only decremented by one regardless of the number of LSRs that
switch the packet through the tunnel.
Note that with the pipe model, the ﬁrst router of an MPLS tunnel
is visible, but the ICMP time exceeded response generated from the
2Note that the uniform and pipe modes more commonly refer to
tunneling models to support differentiated services in MPLS net-
works [19]. We use these terms similar to the way in which they
are used to describe TTL processing in MPLS networks in RFC
3443 [9].
446Pipe Mode (hidden to traceroute)
TTL in IP 
header
A
TTL in 
outermost 
protocol 
header
n
n
(New TTL in MPLS 
header)
n-1
k hops inside the MPLS tunnel
...
B
C
D
E
n-1
n-2
(IP TTL copied to 
MPLS header)
n-k
(TTL in MPLS header 
copied back to IP header)
Uniform Mode (visible to traceroute)
Figure 1: Two modes of IP header TTL processing in the presence of an MPLS tunnel: pipe and uniform.
router (if the IP TTL is decremented to zero) does not indicate that
the packet expired at the edge of a tunnel, since it has not actually
entered one yet. Thus, there is no indication to a traceroute
user that an MPLS tunnel is traversed, and only the ingress router
is visible at all. (Note that penultimate hop-popping (PHP) does
not affect this picture from the standpoint of traceroute [9]. We
discuss PHP further in § 3.3.) The upshot is that identifying pipe
mode tunnels with end-to-end measurements remains a signiﬁcant
measurement challenge and one that we do not address in this pa-
per.
In uniform mode, the LSRs along an MPLS tunnel are visible to
a traceroute user. At the ﬁrst LSR (B in the ﬁgure), the IP TTL
is decremented by one and inspected upon router ingress, just as in
the pipe model. Upon encapsulation in an MPLS header, however,
the IP TTL is copied into the MPLS header. At each LSR along the
tunnel, the TTL in the MPLS header is decremented by one. Upon
egress from a uniform mode tunnel, the MPLS TTL ﬁeld is copied
back to the IP header. If the TTL falls to zero at any router along
the tunnel, an ICMP time exceeded message will be generated and
sent back to the source of the original packet. Thus, all routers
in the tunnel are visible to a user of traceroute. Importantly,
only if the router implements MPLS extensions for ICMP [12] will
a traceroute user be able to clearly identify the fact that the
packet’s TTL expired while inside an MPLS tunnel.
Interestingly, uniform mode is the default mode of operation for
Cisco and Juniper routers (among others) [4, 5]. This behavior is
likely due to language in the MPLS architectural RFC (3031) that
speciﬁes that the total number of hops through a tunnel SHOULD be
reﬂected in the IP TTL when the packet emerges from the tunnel.
Also, it is important to note that pipe and uniform mode TTL pro-
cessing can be conﬁgured on a per-LSP basis. Even nested tunnels
can have different visibility characteristics (i.e., while the inner-
most tunnel may be visible via traceroute, a nested tunnel may
not be). From a practical perspective, this means that network oper-
ators must explicitly conﬁgure routers not to propagate the IP TTL
to the MPLS header, thus hiding tunnels from the public’s eye.
Another important impact that MPLS tunnels can have is on de-
lay measurements of individual traceroute packets. When the
TTL of a packet is decremented to zero inside an MPLS tunnel
(in uniform mode, since that is the only way that an outsider can
observe an MPLS tunnel), the ICMP time exceeded message may
need to be re-encapsulated in an MPLS header and forwarded to
the end of the tunnel [8]. If the LSR at which the ICMP packet
is generated does not have sufﬁcient information (e.g., routes im-
ported via BGP), the packet will be re-encapsulated and traverse
the entire length of the tunnel. At the end of the tunnel, the ICMP
message can be routed back to the source host. The result is that
the traceroute output will show roughly equivalent delay for the
series of hops along the MPLS tunnel. In that case, we would mea-
sure the latency across the tunnel to be approximately zero. This
observation is the starting point for our tunnel inference method
described in Section 4.
While we focus on measurement of MPLS tunnels from outside
a service provider’s network, internal network operators can use
other mechanisms for measuring and troubleshooting MPLS LSPs.
For example RFC 4379 describes MPLS-based versions of ping
and traceroute for this purpose [24].
3. ARK DATA ANALYSIS
In this section we present our analysis of MPLS tunnels and
their characteristics as observed in the CAIDA IPv4 Routed /24
AS Links Dataset [22]. Our focus in this section is on characteris-
tics of MPLS tunnels that can be directly observed through ICMP
extension information.
3.1 Data and Limitations
Since we do not have insight into the ways in which labels have
been assigned, or generally how MPLS has been conﬁgured in a
given provider network, we use a pragmatic deﬁnition of tunnel in
our data analysis. Our goal in the present work is not to try to iden-
tify how different MPLS tunnels have been conﬁgured, but rather to
report and analyze their observed characteristics. Our working def-