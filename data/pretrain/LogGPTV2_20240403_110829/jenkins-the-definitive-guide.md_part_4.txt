has to offer.
Matthew wrote the section on integrating Git with Jenkins in Chapter 5, Setting Up Your Build
Jobs.
• Juven Xu is a software engineer from China who works for Sonatype. An active member of the open
source community and recognized Maven expert, Juven was responsible for the Chinese translation
of Maven: The Definitive Guide as well as an original Chinese reference book on Maven. He is
also currently working on the Chinese translation of the present book.
Juven wrote the section on IRC notifications in Chapter 8, Notification.
• Rene Groeschke is a software engineer at Cassidian Systems, formerly known as EADS
Deutschland GmbH, as well as an open source enthusiast. A certified ScrumMaster with about 7
years experience as a programmer in several enterprise Java projects, he is especially focused on
Agile methodologies like Continuous Integration and Test-Driven Development. Besides his daily
business, the University of Corporate Education in Friedrichshafen allows him to spread the word
about scrum and scrum related topics by giving lectures for the bachelor students of information
technology.
Rene contributed the section on building projects with Gradle in Chapter 5, Setting Up Your Build
Jobs.
7. The Review Team
The technical review process for this book was a little different to the approach taken for most books.
Rather than having one or two technical reviewers read the entire book near the end of the book writing
process, a team of volunteers from the Jenkins community, including many key Jenkins developers,
were able to read chapters as they were written. This review team was made up of the following
people: Alan Harder, Andrew Bayer, Carlo Bonamico, Chris Graham, Eric Smalling, Gregory Boissinot,
Harald Soevik, Julien Simpson, Juven Xu, Kohsuke Kawaguchi, Martijn Verberg, Ross Rowe, and Tyler
Ballance.
8. Book Sponsors
This book would not have been possible without the help of several organizations who were willing to
assist with and fund the book-writing process.
8.1. Wakaleo Consulting
Wakaleo Consulting3 is a consulting company that helps organizations optimize their software
development process. Lead by John Ferguson Smart, author of this book and Java Power Tools4,
3 http://www.wakaleo.com
xxvi
Wakaleo Consulting provides consulting, training and mentoring services in Agile Java Development
and Testing Practices, Software Development Life Cycle optimization, and Agile Methodologies.
Wakaleo helps companies with training and assistance in areas such as Continuous Integration, Build
Automation, Test-Driven Development, Automated Web Testing and Clean Code, using open source
tools such as Maven, Jenkins, Selenium 2, and Nexus. Wakaleo Consulting also runs public and on-site
training around Continuous Integration and Continuous Deployment, Build Automation, Clean Code
practices, Test-Driven Development and Behavior-Driven Development, including Certified Scrum
Developer (CSD) courses.
8.2. CloudBees
CloudBees5 is the only cloud company focused on servicing the complete develop-to-deploy life cycle
of Java web applications in the cloud. The company is also the world’s premier expert on the Jenkins/
Hudson continuous integration tool.
Jenkins/Hudson creator Kohsuke Kawaguchi leads a CloudBees team of experts from around the world.
They’ve created Nectar, a supported and enhanced version of Jenkins that is available on-premise by
subscription. If you depend on Jenkins for mission-critical software processes, Nectar provides a highly-
tested, stable, and fully-supported version of Jenkins. It also includes Nectar-only functionality such as
automatic scaling to VMWare virtual machines.
If you’re ready to explore the power of continuous integration in the cloud, CloudBees makes Jenkins/
Hudson available as part of its DEV@cloud build platform. You can get started with Jenkins instantly
and can scale as needed—no big up-front investment in build servers, no more limited capacity for
builds, and no maintenance hassles. Once an application is ready to go live, you can deploy on
CloudBees’s RUN@cloud Platform as a Service in just a few clicks.
With CloudBees’s DEV@cloud and RUN@cloud services, you don’t have to worry about servers,
virtual machines or IT staff. And with Nectar, you enjoy the most powerful, stable, supported Jenkins
available.
8.3. Odd-e
Odd-e6 is an Asian-based company that builds products in innovative ways and helps others achieve
the same. The team consists of experienced coaches and product developers who work according to
the values of scrum, agile, lean, and craftsmanship, and the company is structured the same way. For
example, Odd-e doesn’t have an organizational hierarchy or managers making decisions for others.
Instead, individuals self-organize and use all their skills to continuously improve their competence. The
company provides training and follow-up coaching to help others collaboratively seek and develop a
better way of working.
4 http://oreilly.com/catalog/9780596527938
5 http://www.cloudbees.com
6 http://www.odd-e.com
xxvii
It is not the job but the values that binds Odd-e together. Its members love building software, value
learning and contribution over maximizing profit, and are committed to supporting open source
development in Asia.
9. Using Code Examples
This book is an open source book, published under the Creative Commons License. The book was
written in DocBook, using XmlMind. The book’s source code can be found on GitHub at http://
www.github.org/wakaleo/jenkins-the-definitive-guide.
The sample Jenkins projects used in this book are open source and freely available online—see the
book’s web page at http://www.wakaleo.com/books/jenkins-the-definitive-guide for more details.
This book is here to help you get your job done. In general, you may use the code in this book in your
programs and documentation. You do not need to contact us for permission unless you’re reproducing
a significant portion of the code. For example, writing a program that uses several chunks of code from
this book does not require permission. Selling or distributing a CD-ROM of examples from O’Reilly
books does require permission. Answering a question by citing this book and quoting example code
does not require permission. Incorporating a significant amount of example code from this book into
your product’s documentation does require permission.
We appreciate, but do not require, attribution. An attribution usually includes the title, author, publisher,
and ISBN. For example: “Jenkins: The Definitive Guide by John Ferguson Smart (O’Reilly). Copyright
2011 John Ferguson Smart, 978-1-449-30535-2.”
If you feel your use of code examples falls outside fair use or the permission given above, feel free to
contact us at .
10. Safari® Books Online
Note
Safari Books Online is an on-demand digital library that lets you easily search over 7,500
technology and creative reference books and videos to find the answers you need quickly.
With a subscription, you can read any page and watch any video from our library online. Read books
on your cell phone and mobile devices. Access new titles before they are available for print, and get
exclusive access to manuscripts in development and post feedback for the authors. Copy and paste code
samples, organize your favorites, download chapters, bookmark key sections, create notes, print out
pages, and benefit from tons of other time-saving features.
7 http://my.safaribooksonline.com/?portal=oreilly
xxviii
O’Reilly Media has uploaded this book to the Safari Books Online service. To have full digital access
to this book and others on similar topics from O’Reilly and other publishers, sign up for free at http://
my.safaribooksonline.com7.
11. How to Contact Us
Please address comments and questions concerning this book to the publisher:
O’Reilly Media, Inc.
1005 Gravenstein Highway North
Sebastopol, CA 95472
800-998-9938 (in the United States or Canada)
707-829-0515 (international or local)
707-829-0104 (fax)
We have a web page for this book, where we list errata, examples, and any additional information. You
can access this page at:
http://www.oreilly.com/catalog/9781449305352
To comment or ask technical questions about this book, send email to:
For more information about our books, courses, conferences, and news, see our website at http://
www.oreilly.com.
Find us on Facebook: http://facebook.com/oreilly
Follow us on Twitter: http://twitter.com/oreillymedia
Watch us on YouTube: http://www.youtube.com/oreillymedia
12. Acknowledgments
First and foremost, my wonderful wife, Chantal, and boys, James and William, without whose love,
support, and tolerance this book would not have been possible.
I would like to thank Mike Loukides for working with me once again on this book project, and the whole
O’Reilly team for their high standards of work.
Thank you to Kohsuke Kawaguchi for having created Jenkins, and for still being the driving force behind
this brilliant product. Thanks also to Francois Dechery, Sacha Labourey, Harpreet Singh, and the rest
of the CloudBees team for their help and support.
I am also very grateful to those who took the time and energy to contribute work to the book: Evgeny
Goldin, Matthew McCullough, Juven Xu, and Rene Groeschke.
xxix
A great thanks goes out to the following reviewers, who provided valuable feedback throughout the
whole writing process: Alan Harder, Andrew Bayer, Carlo Bonamico, Chris Graham, Eric Smalling,
Gregory Boissinot, Harald Soevik, Julien Simpson, Juven Xu, Kohsuke Kawaguchi, Martijn Verberg,
Ross Rowe, and Tyler Ballance.
Thank you to Andrew Bayer, Martijn Verburg, Matthew McCullough, Rob Purcell, Ray King, Andrew
Walker, and many others, whose discussions and feedback provided me with inspiration and the ideas
that made this book what it is.
And many other people have helped in various ways to make this book much richer and more complete
than it would have been otherwise: Geoff and Alex Bullen, Pete Thomas, Gordon Weir, Jay Zimmerman,
Tim O’Brien, Russ Miles, Richard Paul, Julien Simpson, John Stevenson, Michael Neale, Arnaud
Héritier, and Manfred Moser.
And finally a great thank you to the Hudson/Jenkins developer and user community for the ongoing
encouragement and support.
xxx
Chapter 1. Introducing Jenkins
1.1. Introduction
Continuous Integration, also know as CI, is a cornerstone of modern software development. In fact it is
a real game changer—when Continuous Integration is introduced into an organization, it radically alters
the way teams think about the whole development process. It has the potential to enable and trigger
a series of incremental process improvements, going from a simple scheduled automated build right
through to continuous delivery into production. A good CI infrastructure can streamline the development
process right through to deployment, help detect and fix bugs faster, provide a useful project dashboard
for both developers and non-developers, and ultimately, help teams deliver more real business value to
the end user. Every professional development team, no matter how small, should be practicing CI.
1.2. Continuous Integration Fundamentals
Back in the days of waterfall projects and Gantt charts, before the introduction of CI practices,
development team time and energy was regularly drained in the period leading up to a release by what
was known as the Integration Phase. During this phase, the code changes made by individual developers
or small teams were brought together piecemeal and forged into a working product. This was hard work,
sometimes involving the integration of months of conflicting changes. It was very hard to anticipate the
types of issues that would crop up, and even harder to fix them, as it could involve reworking code that
had been written weeks or months before. This painful process, fraught with risk and danger, often lead
to significant delivery delays, unplanned costs and, as a result, unhappy clients. Continuous Integration
was born to address these issues.
Continuous Integration, in its simplest form, involves a tool that monitors your version control system
for changes. Whenever a change is detected, this tool automatically compiles and tests your application.
If something goes wrong, the tool immediately notifies the developers so that they can fix the issue
immediately.
But Continuous Integration can do much more than this. Continuous Integration can also help you keep
tabs on the health of your code base, automatically monitoring code quality and code coverage metrics,
and helping keep technical debt down and maintenance costs low. The publicly-visible code quality
metrics can also encourage developers to take pride in the quality of their code and strive to improve
it. Combined with automated end-to-end acceptance tests, CI can also act as a communication tool,
publishing a clear picture of the current state of development efforts. And it can simplify and accelerate
delivery by helping you automate the deployment process, letting you deploy the latest version of your
application either automatically or as a one-click process.
In essence, Continuous Integration is about reducing risk by providing faster feedback. First and
foremost, it is designed to help identify and fix integration and regression issues faster, resulting in
smoother, quicker delivery, and fewer bugs. By providing better visibility for both technical and non-
technical team members on the state of the project, Continuous Integration can open and facilitate
communication channels between team members and encourage collaborative problem solving and
process improvement. And, by automating the deployment process, Continuous Integration helps you
get your software into the hands of the testers and the end users faster, more reliably, and with less effort.
This idea of automated deployment is important. Indeed, if you take automating the deployment process
to its logical conclusion, you could push every build that passes the necessary automated tests into
production. The practice of automatically deploying every successful build directly into production is
generally known as Continuous Deployment.
However, a pure Continuous Deployment approach is not always appropriate for everyone. For example,
many users would not appreciate new versions falling into their laps several times a week, and prefer a
more predictable (and transparent) release cycle. Commercial and marketing considerations might also
play a role in when a new release should actually be deployed.
The notion of Continuous Delivery is a slight variation on the idea of Continuous Deployment that takes
into account these considerations. With Continuous Delivery, any and every successful build that has
passed all the relevant automated tests and quality gates can potentially be deployed into production
via a fully automated one-click process, and be in the hands of the end-user within minutes. However,
the process is not automatic: it is the business, rather than IT, that decides the best time to deliver the
latest changes.
So Continuous Integration techniques, and in particular Continuous Deployment and Continuous
Delivery, are very much about providing value to the end user faster. How long does it take your team
to get a small code change out to production? How much of this process involves problems that could
have been fixed earlier, had you known about the code changes that Joe down the corridor was making?
How much is taken up by labor-intensive manual testing by QA teams? How much involves manual
deployment steps, the secrets of which are known only to a select few? CI is not a silver bullet by any
means, but it can certainly help streamline many of these problems.
But Continuous Integration is a mindset as much as a toolset. To get the most out of CI, a team needs to
adopt a CI mentality. For example, your projects must have a reliable, repeatable, and automated build
process, involving no human intervention. Fixing broken builds should take an absolute priority, and
not be left to stagnate. The deployment process should be automated, with no manual steps involved.
And since the trust you place in your CI server depends to a great extent on the quality of your tests, the
team needs to place a very strong emphasis on high quality tests and testing practices.
In this book we will be looking at how to implement a robust and comprehensive Continuous Integration
solution using Jenkins or Hudson.
1.3. Introducing Jenkins (née Hudson)
Jenkins, originally called Hudson, is an open source Continuous Integration tool written in Java.
Boasting a dominant market share, Jenkins is used by teams of all sizes, for projects in a wide variety
2
of languages and technologies, including .NET, Ruby, Groovy, Grails, PHP and more, as well as Java.
So what has made Jenkins such a success? And why use Jenkins for your CI infrastructure?
Firstly, Jenkins is easy to use. The user interface is simple, intuitive, and visually appealing, and Jenkins
as a whole has a very low learning curve. As we will see in the next chapter, you can get started with
Jenkins in a matter of minutes.
However Jenkins does not sacrifice power or extensibility: it is also extremely flexible and easy to adapt
to your own purposes. Hundreds of open source plugins are available, with more coming out every week.
These plugins cover everything from version control systems, build tools, code quality metrics, build
notifiers, integration with external systems, UI customization, games, and much more. And installing
them is quick and easy.
Last, but certainly not least, much of Jenkins’s popularity comes from the size and vibrancy of
its community. The Jenkins community is a large, dynamic, reactive and welcoming bunch, with
passionate champions, active mailing lists, IRC channels and a very vocal blog and twitter account. The
development pace is fast, with releases coming out weekly with the latest new features, bug fixes, and
plugin updates.
However Jenkins also caters to users who are not comfortable with upgrading on a weekly basis. For
those who prefer a less-hectic release pace, there is also a Long-term Support, or LTS, release line that
lags behind the latest release in favor of more stability and a slower rate of change. New LTS releases
come out every three months or so, with important bug fixes being backported. This concept is similar
to the Ubuntu LTS releases.
1.4. From Hudson to Jenkins—A Short History
Jenkins is the result of one visionary developer, Kohsuke Kawaguchi, who started the project as a hobby
project under the name of Hudson in late 2004 whilst working at Sun. As Hudson evolved over the
years, it was adopted by more and more teams within Sun for their own projects. By early 2008, Sun
recognized the quality and value of the tool, and ask Kohsuke to work on Hudson full-time, starting to
provide professional services and support around Hudson. By 2010, Hudson had become the leading
Continuous Integration solution with a market share of over 70%.
In 2009, Oracle purchased Sun. Towards the end of 2010, tensions arose between the Hudson developer
community and Oracle, initially triggered by problems with the Java.net infrastructure, and aggravated
by issues related to Oracle’s claim to the Hudson trademark. These tensions also reflected strong
underlying disagreements about the way the project was being managed by Oracle. Indeed, Oracle
wanted to move towards a more strictly controlled development process with a slower release schedule,
whereas most of the core Hudson developers, led by Kohsuke, preferred to continue with the open,
flexible, and fast-paced community-focused model that had worked so well for Hudson in the past.
1 https://github.com/jenkinsci
3
In January 2011, the Hudson developer community decisively voted to rename the project to Jenkins.
They subsequently migrated the original Hudson code base to a new GitHub project1 and continued
their work there. The vast majority of core and plugin developers upped camp and followed Kohsuke
Kawaguchi and other core contributors to the Jenkins camp, where the bulk of the development activity
can be seen today.
After the fork, a majority of users also followed the Jenkins developer community and switched to
Jenkins. At the time of writing, polls show that some 75% of Hudson users had switched to Jenkins,
while 13% were still using Hudson, and another 12% were using both Hudson and Jenkins or in the
process of migrating to Jenkins.
Nevertheless, Oracle and Sonatype (the company behind Maven and Nexus) have continued to work
on the Hudson code base (now also hosted on GitHub at https://github.com/hudson), but with a very