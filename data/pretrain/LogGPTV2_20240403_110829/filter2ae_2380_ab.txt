        kauth_cred_unref(&context.vc_ucred);
        /* Image not claimed by any activator? */
        if (error == -1)
            error = ENOEXEC;
        if (error == 0) {
            exec_resettextvp(p, imgp);
            error = check_for_signature(p, imgp);
        }    
        if (imgp->ip_vp != NULLVP)
            vnode_put(imgp->ip_vp);
        if (imgp->ip_strings)
            execargs_free(imgp);
    #if CONFIG_MACF
        if (imgp->ip_execlabelp)
            mac_cred_label_free(imgp->ip_execlabelp);
        if (imgp->ip_scriptlabelp)
            mac_vnode_label_free(imgp->ip_scriptlabelp);
    #endif
        if (!error) {
            struct uthread    *uthread;
            /* Sever any extant thread affinity */
            thread_affinity_exec(current_thread());
            DTRACE_PROC(exec__success);
            uthread = get_bsdthread_info(current_thread());
            if (uthread->uu_flag & UT_VFORK) {
                vfork_return(p, retval, p->p_pid);
                (void)thread_resume(imgp->ip_new_thread);
            }
        } else {
            DTRACE_PROC1(exec__failure, int, error);
        }
    exit_with_error:
        if (bufp != NULL) {
            FREE(bufp, M_TEMP);
        }
        return(error);
    }
当进程启动时，在其生命周期中很早就会加载`libSystem.B`。因为所有的`APIs`都依赖于它。在执行过程中的某个时刻，`libSystem.B.initializer`将落入`_libsecinit_setup_secinitd_client`，后者将落入`xpc_copy_attribulements_for_pid`以从程序二进制文件中获取权限，然后它将权限以及应用程序是否应该通过`XPC`消息被`sandboxed`发送到位于`/usr/libexec/secinitd`中的`secinitd`守护进程。此消息传输发生在`xpc_pipe_route`级别，相同的函数将处理从`secinitd`守护进程接收的消息，该守护进程将解析从进程接收的`XPC`消息。
`secinitd`
守护进程将承认这样一个事实:如果存在权限，沙盒应该被强制执行,那么它将调用`AppSandbox.Framework`来创建沙盒配置文件。创建概要文件之后，`secinitd`将返回一条`XPC
message`，其中包含`CONTAINER_ID_KEY、CONTAINER_ROOT_PATH_KEY、SANDBOX_PROFILE_DATA_KEY`和其他数据。该信息将由`_libsecinit_setup_app_sandbox`解析，然后该`sandbox`落入`__sandbox_ms`中，从而创建程序的沙盒并在运行时将其包含。
流程如下：
### 0x06 实验:跟踪运行时创建的程序沙盒
使用`LLDB`可以调试一个沙盒程序，并查看到底发生了什么，包括从进程传递到`secinitd`守护进程的`XPC`消息。即将深入了解`Terminal`和`LLDB`，下面的清单可能很难理解。为了更容易理解发生了什么，最好尝试遵循重要的逻辑，比如传递的消息和回溯，以查看执行的函数调用。  
起初，打开终端并调用`lldb`。如果没有安装`LLDB`，请安装`Xcode`，因为它附带了您需要的所有调试工具。首先在`xpc_pipe_routine`和`__sandbox_ms`处下断点。
    Last login: Thu Dec 27 16:44:59 on ttys000
    Isabella:~ geosn0w$ lldb /Applications/iHex.app/Contents/MacOS/iHex 
    (lldb) target create "/Applications/iHex.app/Contents/MacOS/iHex"
    Traceback (most recent call last):
      File "", line 1, in 
      File "/Applications/Xcode.app/Contents/SharedFrameworks/LLDB.framework/Resources/Python/lldb/__init__.py", line 98, in 
        import six
    ImportError: No module named six
    Traceback (most recent call last):
      File "", line 1, in 
    NameError: name 'run_one_line' is not defined
    Traceback (most recent call last):
      File "", line 1, in 
    Current executable set to '/Applications/iHex.app/Contents/MacOS/iHex' (x86_64).
    (lldb) b xpc_pipe_routine
    Breakpoint 1: where = libxpc.dylib`xpc_pipe_routine, address = 0x0000000000005c40
    (lldb) b __sandbox_ms
    Breakpoint 2: where = libsystem_kernel.dylib`__mac_syscall, address = 0x000000000001c648
    (lldb) run
    Process 12594 stopped
    * thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
        frame #0: 0x00007fff6a75ec40 libxpc.dylib`xpc_pipe_routine
    libxpc.dylib`xpc_pipe_routine:
    ->  0x7fff6a75ec40 : pushq  %rbp
        0x7fff6a75ec41 : movq   %rsp, %rbp
        0x7fff6a75ec44 : pushq  %r15
        0x7fff6a75ec46 : pushq  %r14
    Target 0: (iHex) stopped.
    (lldb) c
    Process 12594 resuming
    Process 12594 stopped
    * thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
        frame #0: 0x00007fff6a75ec40 libxpc.dylib`xpc_pipe_routine
    libxpc.dylib`xpc_pipe_routine:
    ->  0x7fff6a75ec40 : pushq  %rbp
        0x7fff6a75ec41 : movq   %rsp, %rbp
        0x7fff6a75ec44 : pushq  %r15
        0x7fff6a75ec46 : pushq  %r14
    Target 0: (iHex) stopped.
然后在`libxpc.dylib`中停在`xpc_pipe_.routine`。做一个`backtrace`来看看发生了什么，可以通过`bt`命令来实现这一点。
    (lldb) bt
    * thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
      * frame #0: 0x00007fff6a75ec40 libxpc.dylib`xpc_pipe_routine
        frame #1: 0x00007fff6a75eaad libxpc.dylib`_xpc_interface_routine + 167
        frame #2: 0x00007fff6a7650b5 libxpc.dylib`_xpc_uncork_domain + 529
        frame #3: 0x00007fff6a75ad85 libxpc.dylib`_libxpc_initializer + 1053
        frame #4: 0x00007fff680aa9c8 libSystem.B.dylib`libSystem_initializer + 126
        frame #5: 0x0000000100582ac6 dyld`ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&) + 420
        frame #6: 0x0000000100582cf6 dyld`ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&) + 40
        ...
        frame #18: 0x000000010056d3d4 dyld`dyldbootstrap::start(macho_header const*, int, char const**, long, macho_header const*, unsigned long*) + 453
        frame #19: 0x000000010056d1d2 dyld`_dyld_start + 54
    (lldb) c
    Process 12594 resuming
    Process 12594 stopped
    * thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
        frame #0: 0x00007fff6a75ec40 libxpc.dylib`xpc_pipe_routine
    libxpc.dylib`xpc_pipe_routine:
    ->  0x7fff6a75ec40 : pushq  %rbp
        0x7fff6a75ec41 : movq   %rsp, %rbp
        0x7fff6a75ec44 : pushq  %r15
        0x7fff6a75ec46 : pushq  %r14
    Target 0: (iHex) stopped.
很明显这个不是我们所需要的，这是`libxpc.dylib`的`_xpc_uncork_domain`函数。我们需要`xpc_pipe_create，`按c继续并再次回溯。
    (lldb) bt
    * thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
      * frame #0: 0x00007fff6a75ec40 libxpc.dylib`xpc_pipe_routine
        frame #1: 0x00007fff6a75eaad libxpc.dylib`_xpc_interface_routine + 167
        frame #2: 0x00007fff6a75e5d3 libxpc.dylib`bootstrap_look_up3 + 185
        frame #3: 0x00007fff6a75e4ff libxpc.dylib`bootstrap_look_up2 + 41
        frame #4: 0x00007fff6a7609d7 libxpc.dylib`xpc_pipe_create + 60