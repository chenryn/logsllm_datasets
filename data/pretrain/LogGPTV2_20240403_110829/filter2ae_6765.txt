# 【技术分享】macOS High Sierra补充更新的逆向分析

#### 译文声明
本文为翻译文章，原文来自 [cocoaengineering.com](http://cocoaengineering.com)。译文仅供参考，具体内容以原文为准。
- 译者：[shan66](http://bobao.360.cn/member/contribute?uid=2522399780)
- 预估稿费：200 RMB
- 投稿方式：发送邮件至 linwei#360.cn 或通过网页版在线投稿

## macOS 出现 Bug 导致密码明文显示

不久前，巴西软件开发者 Matheus Mariano 发现了苹果最新操作系统 **High Sierra** 中的一个严重编程错误。该系统中的磁盘工具将加密 **APFS** 卷的密码以明文形式显示出来，而不是应有的密码提示。这一严重的安全问题迅速成为各大技术网站的头条新闻。

### 密码提示 Bug 的示例
下图展示了这个令人担忧的密码提示 Bug：其中 "dontdisplaythis" 实际上就是密码。

![Password Prompt Bug Example](image_url)

随后，苹果公司通过 App Store 向用户推送了 macOS High Sierra 的补充更新，并确保所有版本的 High Sierra 系统都包含了此更新。

## 通过逆向工程分析 Bug 成因

在本篇文章中，我们将利用二进制文件对比技术来研究此次更新，深入剖析引起该 Bug 的根本原因，并从中吸取教训，防止未来出现类似的问题。

### 比较更新前后的变化

通过检查大小为 51MB 的更新包，我们发现 Disk Utility 和 Keychain Access 应用程序以及相关框架和命令行工具都发生了变化。由于本文主要关注密码提示 Bug，因此我们首先提取 `Applications/Utilities/Disk Utility.app/Contents/MacOS/Disk Utility`，并将其与之前的 macOS 10.13 High Sierra 版本进行比较。

为了实现这一目标，我编写了一个 Emacs 扩展，每当加载 Mach-O 文件时，它会启动 IDA Pro 生成一个包含反编译函数的 SQL 数据库，然后加载修补后的二进制文件，最后展示由 Diaphora 生成的差异报告。

这种方法对于解构次要补丁更新的二进制文件非常有用，因为通常只有少量变动，并且常用的试探法也很有效。

经过反编译后，两个版本的 Disk Utility 二进制文件之间没有显著区别。这通常意味着重大变化可能发生在某些链接的框架中。在这次调查中，最有可能的目标是 StorageKit，这是一个私有的 Apple 框架，用于将 APFS 功能暴露给 Disk Utility。

StorageKit 包含两部分：客户端库和守护进程 storagekitd。客户端使用 Apple 标准的 XPC 机制连接到守护进程，而守护进程则执行客户端请求的各种操作（即 NSOperation 的子类）。Disk Utility 中对 StorageKit 的使用如下：

```objective-c
[SKHelperClient addChildVolumeToAPFSContainer:name:caseSensitive:minSize:maxSize:password:passwordHint:progressBlock:completionBlock:]
```

这是在从 Disk Utility 界面添加新的 APFS 卷时运行的代码的一部分（具体来说，负责管理新卷表的控制器）。

### 揭示实际的 Bug

通过比较 StorageKit，我们可以得到更多有趣的结果。`addChildVolumeToAPFSContainer` 函数是补充更新修改的函数之一。检查反编译的差异对比，可以帮助我们揭示实际的 Bug：

![](image_url)

在上图中，原始带有 Bug 的 StorageKit 与更新后的版本明显不同。删除的行以红色显示，添加的行用绿色显示，黄色表示发生变化的内容。上述函数的作用是创建一个 `NSMutableDictionary`（Cocoa 的哈希表）实例，并填充有关该卷的信息。这个字典作为 `optionsDictionary` 参数传递给 `addChildVolumeToAPFSContainer:optionsDictionary:handlingProgressForOperationUUID:completionBlock:`。

这个字典中最有趣的键是 `kSKAPFSDiskPasswordOption` 和 `kSKAPFSDiskPasswordHintOption`，它们分别存储密码和密码提示。这里的 Bug 是将包含密码的同一个变量（在反编译中表示为相同的虚拟寄存器 v50）用作字典中两个键的值，这意味着明文密码通过 XPC 作为密码提示错误地发送出去。通过重建 Objective-C 代码，该 Bug 大致如下所示：

```objective-c
NSMutableDictionary *optionsDictionary = [NSMutableDictionary alloc] init];
...
optionsDictionary[kSKAPFSDiskPasswordOption] = password;
optionsDictionary[kSKAPFSDiskPasswordHintOption] = password;
```

以下是补充更新中经过纠正后的函数：

```objective-c
NSMutableDictionary *optionsDictionary = [NSMutableDictionary alloc] init];
...
optionsDictionary[kSKAPFSDiskPasswordOption] = password;
optionsDictionary[kSKAPFSDiskPasswordHintOption] = passwordHint;
```

请注意，这里为密码和密码提示设置了不同的变量。

这是一种常见的 Bug：复制和粘贴使用了公共结构的代码后，开发人员忘记进行必要的修改，从而导致代码行为发生致命的变化。如果对这方面内容感兴趣的话，这篇博客文章提供了更多开源软件中“Last Line Effect”错误的示例。

需要重点强调的是，虽然这个特定的字典没有被存储在任何地方（它只是用来打包发送到 storagekitd 的信息），但误将密码作为密码提示发送的事实意味着 storagekitd 信任客户端，并将其存储为明文，认为这是一个密码提示。

## 为什么在使用命令行时不会出现该 Bug？

这是一个非常常见的问题。显然，Disk Utility 和命令行 `diskutil` 使用了不同的代码路径。StorageKit 对 `diskutil` 没有直接依赖关系或间接依赖关系。下面是 `otool -L` 的输出结果：

```
/usr/lib/libcsfde.dylib (compatibility version 1.0.0, current version 1.0.0)
/usr/lib/libCoreStorage.dylib (compatibility version 1.0.0, current version 1.0.0)
/System/Library/Frameworks/Foundation.framework/Versions/C/Foundation (compatibility version 300.0.0, current version 1443.14.0)
...
```

这种复制或多或少具有相同的功能，虽然有时是正当的，但肯定会增加出错的机会。

## 如何防止这种类型的 Bug？

有两个工程实践可以帮助我们应对这类 Bug（但不能完全根除它们）：

### 单元测试

单元测试是一种生成软件测试的实践方法，每次测试都是针对计算机程序中的单个单元，其中“单元”通常是类或模块。有效的单元测试需要可靠地检测输出是否与预期输出相符。在这个特定的 Bug 中，需要用到与 XPC 服务的通信，因此将创建字典的逻辑与服务通信的部分分开将会有所帮助。当软件设计不容易测试时，如果公司过度依赖手动测试，那么这不是一种非常有效的测试方式，由于现代软件中典型的组合数量很多，人工难免会出现纰漏。

### 代码审查

代码审查是在软件项目中将代码纳入主要开发分支之前或之后审查代码的做法。代码审查的审查对象应该尽量较小，以便于审查人员可以集中注意力，从而提出更好的改进建议，甚至发现本文中提到的这种 Bug。如果一次审查大量代码的话，那么“last line” Bug 就很容易成为漏网之鱼。

## 小结

当苹果备受瞩目的 High Sierra 首次亮相时，竟然出现了一个惊人的 Bug，确实有点尴尬。在本文中，我们对这个 Bug 进行了深入剖析，通过分析其根本原因，帮助读者弄清楚其中到底发生了什么。最后，我们给出了两种有效的软件开发实践（包括可测试的设计和严格的代码审查），以帮助我们尽量少犯同样的错误。