configuration, insecure communication channels, logging, and others will be explored. Some of these
mechanisms may be simple configuration changes and others require changes at the code level.
Principle of Least Exposure
The fewer entry points there are into an application, the smaller the attack surface is. To minimize an
application's attack surface, the application developer needs to perform the following tasks iteratively:
1. Consider all entry points into the application. This involves finding every single portion of the application
code that is exposed in some way to input from outside sources.
2. Remove any entry points that can be. An application that has minimal entry points has already reduced its
risk exposure.
3. If an entry point has to be exposed, perform security checks at the entry points before running any other
code.
Application Components
An application should reduce its exported application components down to the essentials. The fewer exported
components, the better. In the following application only its main activity is exported so that it can be launched.
No other components are exposed:
dz> run app.package.attacksurface com.myapp.secure
Attack Surface:
1 activities exported
0 broadcast receivers exported
0 content providers exported
0 services exported
This exposure level would be considered an ideal case and can be achieved only if the application does not
provide any integration opportunities at all to other applications on the device.
Data Storage
If the storage of any application data is not absolutely necessary, simply don't store it. This includes storing data
in the application's private data directory or on the SD card.
Interacting with Untrusted Sources
An application that retrieves information from the SD card, the Internet, Wi-Fi, Bluetooth, or any other source
that is not directly under the control of the application should be scrutinized for authenticity. Authentication
could be in the form of signature checks on the information, some sort of encryption that confirms the identity
of the source who sent this information, or some other validation scheme. Be careful of classloading or running
executables from untrusted locations. Consider where they have been loaded from and whether they are stored
securely. Having a way to cryptographically verify that the code is legitimate before using it is best.
Requesting Minimal Permissions
Request the fewest permissions necessary for your application to function correctly. Performing a task in a way
that does not require an extra permission would generally be considered the most secure option. In addition to
this, requesting as few permissions as possible helps put more security-minded users at ease. Doing so also
reduces the impact of someone exploiting your application. For an example of this theory, refer to Chapter 8
where applications that held the INSTALL_PACKAGES permissions were exploited to devastating effect. This
recommendation is also relevant for requesting the use of powerful shared users such as android.uid.system.
Shared users should only be used if absolutely necessary.
Bundling Files Inside the APK
Before releasing your app to the world, take the time to unzip the APK and check what is inside because you
might find other files unintentionally included inside your APK. You wouldn't want someone to be able to
inadvertently obtain a file containing SSH credentials for your testing server that was part of the project during
development or other sensitive files.
Essential Security Mechanisms
This section presents a set of essential security mechanisms that you should put in place to ensure that an
application is safe for general use.
Reviewing Entry Points into Application Components
You should review each entry point into application code that is accessible over the IPC sandbox to ensure that
the maximum possible level of security is provided. The easiest way to review your own code is to trace the
functions that handle code from other applications inside each exported component. Table 9.1 details the
methods that are relevant for each of the application components.
Table 9.1 Methods per application component that receive data from other applications
COMPONENT METHOD
Activity onCreate()
Broadcast Receiver onReceive()
Content Provider query() insert() update() delete()openFile()
Service onStartCommand()onBind()
When an application component is exported, the functionality that is defined in each method is available to
other applications. Ensure that any code paths that exist in these functions are deliberate and cannot lead to
unintended consequences.
To maintain a high level of security, your application should make appropriate use of permission protection on
all defined application components, including activities, broadcast receivers, services, and content providers that
are exported. No components should be available to other applications on the same device that are not protected
by a custom-defined permission, unless this component is intended for public use and great care has been taken
in its implementation. This also goes for broadcast receivers registered at runtime and broadcasts sent to other
trusted applications.
You can enforce permissions by setting the android:permission attribute of a defined component in the
manifest. To ensure that all components are protected by the same permission at a top level, set the
android:permission attribute in the  tag. This applies the stated permission to all application
components defined in the manifest.
The most important aspect of securing a custom permission is ensuring that the correct protection level is set
on it. The signature protection level ensures that only applications signed with the same certificate are able to
request the permission. Setting a protection level of normal or dangerous means that another application can
request this permission and the system will grant it. This will allow a malicious application to interact with any
components that require this permission to be held by the caller and could inadvertently expose application data
or the component to further attack. Here is an example of a custom permission with the signature protection
level:
The use of permissions is a general recommendation that goes a long way toward securing an application. The
remainder of this section explores additional recommendations that are specific to each of the application
components.
Securing Activities
In addition to all standard application component security measures, you should consider the following for
activities.
Task Manager Snooping
Two configurations enable you to avoid having the contents of your application's activities from appearing in the
recent application list: You can choose to show a blank screen in the Recent list, or remove the entry from the
list altogether. To make an activity show as a blank screen, implement the following code inside the
onCreate()method of the activity:
getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);
The FLAG_SECURE parameter ensures that the contents will not appear in screenshots.
To disallow the task from being shown in the Recent Apps list altogether, opt to exclude it by setting the
android:excludeFromRecents attribute to true in each activity in the application manifest. You can also perform
this action within code when starting a new activity by adding the FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS flag set
as follows:
intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
Tapjacking
To ensure that performing tapjacking attacks on sensitive activities within your application is not possible, you
can apply attributes to a View. You can set the following attribute in the layout file of your activity on each item
that inherits from a View:
android:filterTouchesWhenObscured="true"
To prevent touches from being sent through all elements on the activity, apply that attribute to the top-level
layout of the activity. You can also accomplish this programmatically by using the
setFilterTouchesWhenObscured method as follows:
view.setFilterTouchesWhenObscured(true);
This ensures that touches cannot be sent to your activity when another application's View overlays your activity.
Disabling Additions to the Android Dictionary
In normal input boxes on Android, unknown words are automatically added to the user's dictionary. This is
useful for everyday applications. However, sensitive applications may contain input boxes where the text that
users type should not be entered into the dictionary for a number of reasons, such as transmission of codes,
encryption keys, passwords that do not need masking, and so on. If an attacker gains access to a device through
a malicious application or by compromising an installed application, he might be in a position to retrieve the
contents of the dictionary.
To stop any unwanted words or numbers from being added to the Android dictionary, set the
android:inputType="textVisiblePassword" attribute on an EditText box.
Protecting Against Fragment Attacks
On Android versions 4.3 and lower, explicitly protecting against fragment attacks is not possible. The only
available protection is to not expose the vulnerable component. This means that no activity that extends
PreferenceActivity should be exported to other applications.
Since Android 4.4, protecting against fragment attacks is possible through the use of a new method in the
PreferenceActivity class named isValidFragment. You must explicitly override this method to allow the
fragment to be loaded within the activity. The following code provides a whitelist of fragments that can be
loaded within this activity:
@Override
protected boolean isValidFragment(String fragmentName)
{
String[] validFragments = {"com.myapp.pref.frag1",
"com.myapp.pref.frag2"};
return Arrays.asList(validFragments).contains(fragmentName);
}
Ensuring Secure Trust Boundaries
If your application contains a login screen or any other form of trust boundary, then take care as to how it is
handled. If your login activity contains a way to start activities that were only intended for trusted users, the
authentication model of the application may be defeated.
Thus, making sure that no way exists to open an activity that is intended for authenticated users from an
unauthenticated area of the application such as a login activity is important. A more involved solution to this
may be to implement an application-wide variable for tracking whether a user is authenticated. Authenticated
activities should be available only after the user has passed the authentication check, which should be
performed when the activity is first started. If the user has not authenticated, the activity should be closed
immediately.
Masking Password Displays
Any passwords that a user has to type in should be masked. You do this using an EditText box with the attribute
android:inputType="textPassword". This is sufficient to protect user passwords from prying eyes.
If the default way that Android masks passwords is insufficient for your implementation then you can code your
own TransformationMethod that handles the way that the password displays. You can set it as follows:
passwordBox.setTransformationMethod(new CustomTransformationMethod());
Scrutinizing Browsable Activities
If you make use of activities that have an intent filter that contain the BROWSABLE category then you should be
aware that it is possible to interact with this activity from a web browser. As seen in Chapter 8, making an
activity BROWSABLE makes it a high value target for an attacker and exploitation of issues inside the activity are
generally trivial.
If your activity does not explicitly require being BROWSABLE then it should be removed. However, if you have
legitimate reasons for using it then you must consider all possible intents that could cause actions to take place
automatically inside your activity. If an attacker is able to send an intent that abuses some logic flaw or
functionality inside your application, then you may be opening up the device owner to an unnecessary level of
risk.
Securing Content Providers
This section explores code injection and manifest misconfiguration vulnerabilities that are commonly
discovered in content providers.
Default Export Behavior
The default export behavior of content providers prior to API version 17 has been covered in Chapter 7; however,
this section serves as a reminder. To ensure that a content provider is consistently not exported across all
versions of Android explicitly, set it as android:exported=”false” in its manifest declaration as shown in the
following example:
SQL Injection
Content providers making use of SQLite in their implementation may be prone to SQL injection attacks if user
input is directly used inside a SQL statement. This may be because a developer has used the rawQuery() method
from SQLiteDatabase by concatenating SQL queries directly with user input.
To protect against SQL injection attacks on Android you can use prepared statements as you would to protect
inputs from web applications. The following example shows the use of a rawQuery() with prepared statements.
The database variable is of type SQLiteDatabase.
String[] userInput = new String[] {"book", "wiley"};
Cursor c = database.rawQuery("SELECT * FROM Products WHERE type=?
AND brand=?", userInput);
You can do this in a similar fashion using the query()method where the selection can contain the questions
marks and be replaced with content in selectionArgs.
String[] userInput = new String[] {"book", "wiley"};
Cursor c = database.query("Products", null, "type=? AND brand=?",
userInput, null, null, null);
For actions other than querying, using the SQLiteStatement class to execute a prepared statement is possible, as
shown here:
SQLiteStatement statement = database.compileStatement("INSERT INTO
Products (type, brand) values (?, ?)");
statement.bindString(1, "book");
statement.bindString(1, "wiley");
statement.execute();
Making use of prepared statements ensures that user input is properly escaped and does not become part of the
SQL query itself.
Directory Traversal
The basis of checking whether another application is attempting a directory traversal attack against a content
provider is to test the resulting folder against a known good value. This comes down to checks that a file being
requested resides in an “allowed” folder.
You accomplish this by using the getCanonicalPath()method of the File class. This translates a path into one
that has the resulting . and .. characters removed and worked into the resultant path. Perform this check and
then compare it against a list of allowed files in a certain directory or against the location of the directory itself
to prevent against this attack. The following code limits other applications to only reading files within the
/files/ directory inside your application's private data directory:
@Override
public ParcelFileDescriptor openFile (Uri uri, String mode)
{
try
{
String baseFolder = getContext().getFilesDir().getPath();
File requestedFile = new File(uri.getPath());
//Only allow the retrieval of files from the /files/
//directory in the private data directory
if (requestedFile.getCanonicalPath().startsWith(baseFolder))
return ParcelFileDescriptor.open(requestedFile,
ParcelFileDescriptor.MODE_READ_ONLY);
else
return null;
}
catch (FileNotFoundException e)
{
return null;
}
catch (IOException e)
{
return null;
}
}
Pattern Matching
When performing any pattern-matching checks against a requested content URI, always be careful about the
implications of using a literal pattern match in the  tag in the form of the android:path
attribute.
There may be other valid forms of the requested data that are not covered by your logic, so rather use a check
that a certain prefix is present, or if possible, create a regular expression for the comparison. Here is an example
of using a prefix for the comparison and enforcement of a path-permission:
Instead of the android:pathPrefix used in this example, you could use a regular expression as follows:
android:pathPattern="/Data.*"
Securing Broadcast Receivers
In addition to all standard application component security measures, the only outlier is the use of secret codes.
Despite their name, these codes can easily be enumerated using a number of tools available on the Play Store. A
user or attacker who knows your implemented secret code should not be able to have any control over the
application other than that provided when launching the application in the normal way. Secret codes should be
used only for convenience or testing purposes. Ideally, if you use them for testing or debugging purposes then
remove them before releasing the application into production. Scrutinize the code inside the broadcast receiver
to ensure that an unintended action cannot be performed by simply invoking the secret code. On some devices
and older versions of Android, invoking these codes from the browser by visiting a crafted website is possible.
This means that performing an action automatically upon receipt of the broadcast from the dialer is especially
dangerous.
Storing Files Securely
The storage of any information on the device by an application, must be done in a secure manner. The Android
sandbox for application data is not enough to create a truly secure application. We've shown multiple times how
to defeat this sandbox through misconfiguration and exploitation of the system. Therefore, the assumption that
an attacker cannot reach files sitting in a private data directory is somewhat naive.
Creating Files and Folders Securely
When creating a file, explicitly stating the file permissions is better than relying on the umask set by the system.
The following is an example of explicitly stating the permissions so that only the application that created it can
access and modify the file:
FileOutputStream secretFile = openFileOutput("secret",
Context.MODE_PRIVATE);