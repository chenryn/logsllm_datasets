title:Quantifying the Accuracy of High-Level Fault Injection Techniques
for Hardware Faults
author:Jiesheng Wei and
Anna Thomas and
Guanpeng Li and
Karthik Pattabiraman
Quantifying the Accuracy of High-Level Fault
Injection Techniques for Hardware Faults
Jiesheng Wei, Anna Thomas, Guanpeng Li, and Karthik Pattabiraman
Department of Electrical and Computer Engineering, University of British Columbia
{jwei, annat, gpli, karthikp}@ece.ubc.ca
Abstract—Hardware errors are on the rise with reducing
feature sizes, however tolerating them in hardware is expensive.
Researchers have explored software-based techniques for build-
ing error resilient applications. Many of these techniques leverage
application-speciﬁc resilience characteristics to keep overheads
low. Understanding application-speciﬁc resilience characteristics
requires software fault-injection mechanisms that are both accu-
rate and capable of operating at a high-level of abstraction to
allow developers to reason about error resilience.
In this paper, we quantify the accuracy of high-level software
fault injection mechanisms vis-a-vis those that operate at the
assembly or machine code levels. To represent high-level injection
mechanisms, we built a fault injector tool based on the LLVM
compiler, called LLFI. LLFI performs fault injection at the
LLVM intermediate code level of the application, which is close to
the source code. We quantitatively evaluate the accuracy of LLFI
with respect to assembly level fault injection, and understand the
reasons for the differences.
Keywords: Fault injection, LLVM, PIN, comparison
I. INTRODUCTION
Hardware faults are increasing due to shrinking feature
sizes and manufacturing variations. Simultaneously, dimin-
ishing design margins and stringent power constraints are
making it harder to provide sufﬁcient redundancy for masking
faults from software. Researchers have predicted that computer
systems in the future will expose (some) hardware faults to
the software layer, and will expect the software to tolerate
such faults [1], [2], [3], [4], [5]. Thus, there is a compelling
need to build error resilient software that can tolerate hardware
faults. To build error resilient software however, one needs
to understand the effects of hardware faults on software and
provide customized error detection and recovery support. This
is because generic error resilience techniques such as full
duplication, which duplicates every instruction in the program,
incur very high performance and power overheads [6].
To evaluate the error resilience of a program, one would
typically inject faults into the program, and observe the
program’s behaviour under the fault. Hardware faults can be
injected either by modifying the hardware, or by emulating
them in software. Because hardware modiﬁcations are often
costly and impractical, researchers have emulated hardware
faults through Software-Implemented Fault Injection (SWiFI)
techniques [7], [8], [9]. SWiFI techniques typically operate at
the assembly or machine code levels of the program as it is
easier to emulate hardware faults at that level. However, it
is challenging to map the results of the injection back to the
program’s source code, which is needed for understanding and
improving the error resilience of programs.
To alleviate the difﬁculty associated with mapping fault-
injection results from the assembly code to the source code, re-
searchers have proposed high level fault-injection mechanisms
that operate at, or close to the source code [10], [5], [11], [2],
[12]. These techniques allow faults to be injected directly into
program variables or statements. The main advantage of high-
level fault-injection mechanisms is that the mapping from the
fault injection results to the code is straightforward. Further,
these mechanisms allow programmers ﬁne grained control
over where to inject faults in the program.
However, an open question with high-level fault injection
techniques is how accurate they are in representing hardware
errors. This is because hardware errors can occur anywhere
in the program, and in any part of its state. Unfortunately,
many elements of the program state are not represented at the
source level (e.g., code for stack pointer manipulation), and
hence high level techniques will not be able to inject faults into
these elements. Furthermore, instructions (or data) at the high
levels may correspond to multiple instructions (data) at the low
levels, and hence a single fault in a high-level instruction(data),
may correspond to multiple faults at the low level. Finally,
there may be some operations in the high level that have no
counterpart at the low levels (e.g., type cast operations), and
hence a high level technique may inject spurious faults that
do not occur at the low levels.
In this paper, we quantify the accuracy of high-level SWiFI
mechanisms vis-a-vis low level mechanisms for hardware
faults. We build a SWiFI mechanism at the LLVM compiler’s
intermediate code level, LLFI 1 to represent high-level injec-
tors. LLVM is a widely used, open source compiler infrastruc-
ture, that supports a wide variety of program languages and
features [13]. Most prior work on high-level fault injection also
uses the LLVM compiler [5], [11], [2], [12] (see Section VIII),
and hence we choose LLVM for building LLFI to represent
high-level injectors.
To represent low level injectors, we build PINFI 2, a fault
injector at the assembly code level using the PIN tool from
Intel [14]. PIN is a dynamic binary instrumentation and analy-
sis framework for tracing and modifying the behaviour of x86
binaries. We then compare these two injectors through fault-
injection experiments on a set of six benchmark applications.
We also attempt to understand the reasons for the differences,
to improve the accuracy of high-level injectors.
Prior work has compared the accuracy of assembly code
level fault injection to that of high-level fault injection for
software faults [15], [16]. Unlike our work which focuses on
emulating hardware errors, they focus on emulating software
faults at the assembly/machine code levels and quantifying
the inaccuracy. Other work has emphasized the importance
of modelling hardware faults at the assembly code level to
capture corner cases in safety-critical applications [17], [18].
1LLFI is available at https://github.com/DependableSystemsLab/LLFI
2PINFI is available at https://github.com/DependableSystemsLab/PINFI
However, they do not quantify the inaccuracy in modelling
hardware faults at the high-level for non-safety critical ap-
plications. To the best of our knowledge, we are the ﬁrst to
quantitatively compare the accuracy of fault-injection at the
assembly code level with that of fault injection at the high
level, for hardware faults.
In summary, this paper makes the following contributions:
• Builds a LLVM-based fault injector, LLFI, that is capable
of injecting faults at the LLVM compiler’s intermediate
code level, to represent high-level injectors,
• Builds a PIN-based fault injector, PINFI, that is capable
of injecting faults at the x86 assembly code level, to
represent low-level injectors,
• Compares the results of injecting faults with both LLFI
and PINFI on a set of standard benchmark programs to
quantify the differences between them,
• Identiﬁes the sources of discrepancy between the two
injectors, and suggests directions for improving the ac-
curacy of high-level fault injectors.
Our results show that LLFI is accurate for emulating
hardware errors that cause Silent Data Corruptions (SDCs),
but not crashes. When compared to PINFI which does fault in-
jections at the assembly code level, LLFI has nearly the same
SDC percentages for the benchmarks programs considered.
This result holds for fault injections across all instructions,
and also for speciﬁc instruction types. For crashes however,
the differences between LLFI and PINFI are as much as
40%, showing that fault-injections at the high level does not
accurately emulate crash causing errors.
II. FAULT MODEL AND BACKGROUND
In this section, we ﬁrst describe our fault model and the
general notion of error resilience. We then brieﬂy describe the
two systems, LLVM and PIN, that are used in this paper.
A. Fault Model
We consider transient hardware faults that occur in the
processor. These are usually caused by cosmic ray or alpha
particle strikes affecting ﬂip ﬂops and logic elements. We
consider faults that occur in the processor’s computation units,
i.e., the ALU and the address computation for loads and stores.
However, faults in the memory components such as caches are
not considered, since these components are usually protected at
the architectural level using ECC or parity. We do not consider
faults in the control logic of the processor as this is a small
portion of the processor area, nor do we consider faults in
the instructions’ encoding, as these can be handled through
control-ﬂow checking techniques [19]. Related work has made
similar assumptions [2], [20], [12], [5], [11].
B. Error Resilience
We deﬁne the resilience of an application as its ability
to withstand hardware faults if they occur, without leading
to an incorrect output. Incorrect outputs are also known as
Silent Data Corruptions (SDCs) and are among the most
insidious of failures to recover from, as there is no external
indication that the application has malfunctioned (unlike a
crash or a hang, where either an exception is raised or a
timeout occurs). We are primarily interested in evaluating the
resilience of applications using Software Implemented Fault
Injection (SWiFI). Therefore, we only inject faults into the
program’s data or instructions that are visible at the assembly
2
code or higher levels, rather than into the micro-architectural
structures where the faults will occur. Further, we consider
only activated faults (i.e., faults that are read by the program),
as we are not interested in fault masking at the hardware level.
C. LLVM
LLVM [13] is a compiler infrastructure for lifelong program
analysis and optimization. Like most compilers, LLVM con-
sists of a front-end to translate code from a high-level language
such as C/C++ to an intermediate representation (IR), and a
backend to translate the IR code to machine code for speciﬁc
platforms such as x86 processors, ARM etc. The IR code is
transformed by multiple optimization passes, including user-
written ones, before being converted to the machine code by
the backend.
The LLVM IR is a typed language, in which source-level
constructs can be easily represented. In particular, it preserves
the variable and function names, making source mapping
feasible. Further, LLVM has extensive support for program
analysis and transformations which makes it easier to study
the effect of fault injection at a higher level than the assembly
language.
D. PIN
PIN is a dynamic binary instrumentation and analysis
framework from Intel used for tracing and modifying the
behaviour of x86 binaries. PIN performs instrumentation at
runtime on x86 binaries, and hence requires no recompilation
of the program [14]. PIN consists of three parts: (1) a virtual
machine to perform dynamic binary translation, (2) code cache
to keep translated code and use it for speeding up the analysis,
and (3) Rich API that third-party tools (such as ours) can tap
into to analyze and instrument the translated binary. The API
abstracts away the details of the platform and architecture and
allows tool developers to focus on the core logic of their tools.
Further, PIN takes care of saving and restoring the register
state whenever the third-party tool is invoked.
III. LLVM FAULT INJECTOR: LLFI
LLFI is a fault injection tool that works at the LLVM
compiler’s IR level, and allows fault-injections to be performed
at speciﬁc program points, and into speciﬁc instructions. LLFI
supports various fault injection customizations, and enables
tracing the propagation of the fault among instructions in the
program.
Figure 1 shows the working of LLFI, which consists of
three steps. In Step 1, LLFI takes the program IR as input,
and applies custom fault injection instruction and operand(s)
selector to determine which instructions/operands are fault
injection candidates. In Step 2, LLFI instruments the fault
injection instructions/operands with calls to fault
injection
functions. The fault injection functions are designed to perturb
the speciﬁc instruction operand according to the speciﬁed
fault type at runtime (e.g. ﬂip one bit of the operand for
bit-ﬂip faults). In Step 3, the compiled program is executed
at runtime, and LLFI randomly selects one runtime instance
of the instrumented instructions to trigger the fault injection
function and inject into the selected instruction operand value.
Because hardware faults occur randomly at runtime, LLFI
picks a random instruction from the set of all dynamically
executed instructions at runtime to inject into. This is possible
because the fault injection function is invoked at runtime, and
TABLE I: Difference between LLVM IR code and Assembly Lan-
guage, and the mapping between them
LLVM Instruction
the
load
The
GetElementPtr
(GEP) instruction does
computation
address
supplied
which
is
and
to
store instructions
for
memory access.
The PHINode instruc-
tion is inserted when
choosing between val-
ues merging from dif-
ferent basic blocks.
Function call
Conditional branch in-
structions
There are many type
cast instructions since
LLVM IR is strictly
typed.
Assembly Language
Instruction
A set of add and mul-
tiply instructions that
computes the address,
and offset memory ac-
cess in computation.
Some value merging
operations at assembly
level introduces regis-
ter spilling, there will
be register to stack and
stack to memory data
movement instructions.
PUSH/POP
for
instructions
saved
Caller/Callee
registers before
and
after a function call,
and
pointer
stores return address
instructions
Jump
where
is
speciﬁed in a register
There are also type
cast
instructions, but
far less than LLVM IR.
target
Stack
the
Mapping (if possible)
add
instructions
translate
GEP
multiple
or multiply
instructions, but some GEP
instructions cannot be mapped
to an assembly instruction if
they are translated to offset
memory access.
Some PHINode instructions
can be translated to memory
data movement if they intro-
duce register spilling.
None, since these instructions
do not exist in the LLVM IR
code.
None, since branch targets are
basic block labels in LLVM
type-cast instructions for in-
teger/ﬂoating point conversion
correspond to assembly code
level instructions, but not for
other types
of LLFI, the LLVM compiler will automatically identify the
def-use chain of an instruction, and so we can avoid injecting
faults into instructions whose value is not used. However, this
analysis is much more complicated at the assembly language
level where PINFI operates. In particular, we did the following
to ensure high fault activation in PINFI.
• In X86 assembly, branch condition instructions set the
ﬂag register, and different conditional jump instructions
read different bits in the ﬂag register to decide their
branch target (Figure 2(a)). To ensure fault activation,
we ﬁrst ﬁnd the dependent ﬂag register bit(s) of the
conditional jumps, and only inject faults into the de-
pendent bit(s) before the conditional jump instructions.
For example, in Figure 2(a), the cmp instruction sets
the ﬂag register, while the jl instruction only reads the
OF (bit 11) of ﬂag register to decide the branch target.
So we only inject into this bit.
• For ﬂoating point operations, X86 instructions usually use
XMM registers as the destination register, and hence all
128 bits of XMM register are fault injection candidate
bits. However, double-precision ﬂoating-point operations
only use the lower 64 bits for computation (Figure 2(b)),
and hence we prune the target injection space to the lower
64 bits for double-precision ﬂoating point operations.
(a) Flag register
(b) Floating point operation
Fig. 2: Examples of PINFI heuristics to increase fault activation
V. EXPERIMENTAL SETUP
We perform fault
injection experiments to compare the
accuracy of LLFI vis-a-vis PINFI for different failure types,
3
Fig. 1: LLFI work ﬂow
can hence choose which invocation of an instruction to inject
into (this is done by ﬁrst proﬁling the program to obtain the
total count of executed instructions). Further, by instrumenting
the program once with the set of all fault-injection functions,
and injecting the fault at runtime, LLFI ensures that the same
executable ﬁle (with the instrumentation in it) is used in all the
fault injection runs. Finally, this method makes it unnecessary
recompile the code for each fault injection. Other work on
high-level fault injection has followed a similar approach [10],
[11], [12].
Customizability and Analysis: LLFI has features for easy
customization and for analyzing error propagation. We do
not consider these features further in this paper as we are
primarily interested in the accuracy of LLFI, rather than ease
of customization or use. However, these features are the main
reason one would prefer to use higher-level fault injection
techniques [10].
Accuracy of LLFI: One of the main reasons for the
inaccuracy of LLFI is that it operates at the LLVM IR code
level, which does not correspond one-to-one with assembly
code. In this section, we qualitatively assess the correspon-
dence between the LLVM IR code and the assembly code
for fault-injection purposes. We quantify the effect of these
differences in Section VI. The differences are presented in
Table I, along with the mapping between them. We partially
mitigate the effects of these differences by injecting only into
type-cast instructions that correspond to integer and ﬂoating
point conversion (row 5 of Table I).
IV. PIN FAULT INJECTOR: PINFI
To evaluate the accuracy of LLFI compared with assembly-
level fault injection, we develop PINFI. PINFI is built with
Intel Pin [14], an assembly-level
instrumentation tool for
X86-architecture processors. PINFI is built as a PIN tool
and uses the API exposed by Pin to inject faults. The work
ﬂow of PINFI is similar to LLFI except: (1) LLFI performs
instrumentation at compile time, while PINFI does the instru-
mentation at runtime (when the program is loaded), and (2)