tography, which could be considered as less traditional and
requiring more advanced knowledge of cryptography. It is
desirable to have a signature scheme with an associated COP
that are provably secure and use standard (textbook) cryp-
tography. We show that, for a credential system based on
RSA signature, a secure COP can be obtained based on the
GQ identiﬁcation protocol [21]. GQ, as an identiﬁcation
protocol, is proved to be secure against impersonation un-
der concurrent attacks [5]. It is also widely known that GQ
can be used to prove knowledge of RSA-FDH signatures, al-
though adequate formalization of this does not seem to exist
in the literature. We prove that the COP protocol based on
GQ is secure in our model under concurrent attacks.
Combining RSA-FDH signature scheme of [6] with the
GQ based COP, results in a very eﬃcient and provably-
secure credential system that can be easily implemented us-
ing commonly used cryptographic libraries. Security of the
system relies, in the random oracle model, on security of GQ
as an identiﬁcation protocol, which is, in turn, proved in [5]
assuming one-more RSA inversion [4] is hard. An interest-
ing open question is construction of secure COPs for other
traditional signature schemes.
The paper is organized as follows.
In Section 2 we in-
troduce the notations used through the paper. Section 3
formalizes the proposed security model for COPs. We pro-
pose our IBE-based and IBI-based constructions in Sections
4 and 5. Then, in Section 6, an eﬃcient RSA-based scheme
based on GQ is proposed, and ﬁnally, Section 7 concludes
the paper.
2. NOTATION
The notation we use throughout the paper is summarized
in Table 1. We also denote the internal state information of
algorithm X by StX, the set of all algorithms poly-time in k
by Poly (k), and the empty string by ε.
3. DEFINITIONS
A credential system consists of users and organizations.
Organizations issue credentials to users. Users can later
show their credentials to (the same or) other organizations
to enjoy the privileges they are entitled to. A credential is
of the form (m, σ), where m is the text of the credential and
σ is the issuer’s signature on m, generated using the stan-
dard signature scheme SS = SS. (KeyGen, Sign, Verify). To
prove ownership of such a credential, we associate an inter-
active proof protocol with the signature scheme SS, through
which the credential-holder (prover) convinces the veriﬁer
that she owns a credential signed by an issuer that employs
the signature SS.
Deﬁnition 1. Associated with a standard signature SS,
we deﬁne a credential ownership proof (equiv. COP) pro-
tocol SS-COP = SS-COP. (P, V), consisting of a pair of al-
gorithms: the prover SS-COP.P and the veriﬁer SS-COP.V.
Prover’s private input is a signature σ and protocol’s public
inputs are the signature veriﬁcation key pk and a message
m. After the interaction with the prover, the veriﬁer outputs
a binary decision b. The protocol’s output is the veriﬁer’s
output and the protocol run is denoted by:
b ← [SS-COP.P (σ) ↔ SS-COP.V] (pk, m) .
163
Sans Serif
Small Caps
Calligraphic
x ← a
x N← a
x $← X
y ← [X (x) ↔ Y] (a)
Table 1: Notation used in the paper
algorithm
security notion
oracle
x ← XO (a)
a−−−(cid:16) B
A
X with access to O and
input a is run and outputs x
a is sent from A to B
a is assigned to x
X (a)
algorithm description:
a mod N is assigned to x
x is chosen randomly from X
description X takes a as input
x ←|
and returns x as output
interactive protocol between X with private input x and Y is run
with public input a, and y is the output of Y (
4
= output of the protocol)
complete and decides on an impersonation target message
(denoted ˙m). This target message and the state information
of the cheating veriﬁer is given to the cheating prover in the
beginning of the second phase.
In the second phase, the target message is given to an
honest veriﬁer along with the public key, and an interaction
between the cheating prover and the honest veriﬁer is initi-
ated. During this interaction, the cheating prover has access
to the same oracles as did the cheating veriﬁer during the
ﬁrst phase. The adversary is said to win if at the end of this
interaction the honest veriﬁer is convinced that the adver-
sary is in possession of a signature on the target message,
given the condition that the target message have not been
queried to the signing oracle.
Deﬁnition 3. For an adversary A and a protocol SS-COP,
we deﬁne the following experiment:
Exptcop-imp-ca
SS-COP
(A, k)
(pk, ˙m)
i
b ←|
A.ˆP
(pk, sk) ← SS.KeyGen (k)
O
( ˙m, StA) ← A.ˆV
(k, pk)
Sign(·)
(StA) ↔ SS-COP.V
b ←h
=(cid:0)Interact (·,·,·) ,Sign (·)(cid:1)
Then St [m, sid] ←(cid:0)pk, SS.Sign (sk, m)(cid:1)
If (m, sid) new
(Mout, St [m, sid]) ← P (Min, St [m, sid])
Mout ←|
O 4
Interact (m, sid, Min)
Sign (m)
4
= SS.Sign (sk, m)
Moreover, the advantage of A in a cop-imp-ca attack on
SS-COP is deﬁned as:
Adv
cop-imp-ca
SS-COP,A
(k)
4
= Pr
cop-imp-ca
SS-COP,A
(k) = 1
Expt
Finally, we deﬁne the cop-imp-ca insecurity of SS-COP as
the maximum advantage a poly-time cop-imp-ca adversary
can achieve, i.e.
Insec
cop-imp-ca
SS-COP
(k)
4
= max
A∈Poly(k)
cop-imp-ca
SS-COP,A
(cid:2)Adv
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
no
Sign ( ˙m)
query
(k)(cid:3) .
= 1 .
where
h
The working scenario for SS-COP would be as follows: ﬁrst
the signer issues a credential (m, σ), which is given to the
credential holder, using SS.KeyGen and SS.Sign algorithms.
When the credential-holder wants to ‘securely’ show her cre-
dential to a veriﬁer, she ﬁrst sends to the veriﬁer the identity
of the issuer, from which the veriﬁer can securely obtain the
issuer’s public key (for example through PKI), and the text
of the credential (i.e. the message) m, on which she claims
to have the issuer’s signature. The credential-holder and
the veriﬁer then interact with each other running SS-COP.P
and SS-COP.V, respectively. At the end of this interaction,
either the veriﬁer accepts the prover’s claim of credential
ownership or not. This is reﬂected in the protocol’s output
b as a 1 if the veriﬁer is convinced, and a 0 otherwise.
We require that an honest credential-holder can always
convince the veriﬁer, i.e. it must be guaranteed that if the
signature σ is a valid signature on m with respect to pk,
then the COP protocol run must return 1. Hence, we deﬁne
the completeness of the COP protocol as follows.
Deﬁnition 2. We say that the above credential ownership
proof SS-COP is complete iﬀ
b = 1 : b ← [SS-COP.P (σ) ↔ SS-COP.V] (pk, m)
Pr
(cid:12)(cid:12)(cid:12) SS.Verify (pk, m, σ)
i
3.1 Deﬁning COP Security
A cop-imp-ca adversary A = A.(cid:0)ˆV, ˆP(cid:1) is a pair of ran-
domized poly-time algorithms: the cheating veriﬁer and the
cheating prover, respectively. The attack is mounted in two
phases. Throughout both phases, the adversary is provided
with a signing oracle, which enables it to have a signature
on any message of its choice.
At the beginning of the ﬁrst phase, the cheating veriﬁer is
given the public key, which has been generated through the
signature key generation. Then it starts requesting interac-
tions with clones of honest provers who own a signature on
messages of its choice in an arbitrary interleaved way (i.e.
concurrent way). When an interaction with a new clone is
requested, the message provided by the adversary is signed,
the signature is given to a new honest prover clone, and
an interaction between the honest prover and the cheating
veriﬁer is initialized. On the other hand, if the adversary
asks for the next round of interaction with an already exist-
ing honest prover clone, the appropriate clone is provoked.
Multiple clones are allowed to exist simultaneously. At some
point, the cheating veriﬁer declares that the ﬁrst phase is
164
for signature schemes and associated COPs provably-secure
based on standard assumptions such as BDH, in the stan-
dard model (i.e. not in the random oracle model ).
4.1 IBE and Its Security
An identity-based encryption scheme IBE consists of four
algorithms IBE = IBE. (Set, Ext, Enc, Dec) [7], where The
setup algorithm IBE.Set takes input the security parameter
k and returns the system parameters par and the master
key mk, denoted (par, mk) ← IBE.Set (k), the extraction al-
gorithm IBE.Ext is given input par, mk, and an identity ID
and outputs the decryption key dk corresponding to ID, de-
noted dk ← IBE.Ext (par, mk, ID), the encryption algorithm
IBE.Enc on input par, ID, and some plaintext P outputs the
ciphertext C, denoted C ← IBE.Enc (par, ID, P ), and ﬁnally,
the decryption algorithm IBE.Dec takes inputs par, dk, and
C and outputs P , denoted P ← IBE.Dec (par, dk, C).
We introduce a new notion of security for IBE schemes in
analogy with the notions in [7] and [8]. Boneh and Franklin
deﬁne three notions of security for IBEs: owe-id, ind-id-
cpa, and ind-id-cca. The resources of the adversary is the
same in the ﬁrst two notions: having access to an extraction
oracle. On the other hand, the goal of the adversary is the
same in the last two notions: distinguishing the ciphertexts
of two chosen plaintexts. We introduce a new notion owe-
id-cca in which the resources of the adversary is the same
as the last notion: having access to both extraction and
decryption oracles, and the goal of the adversary is the same
as the ﬁrst notion: decrypting a challenge ciphertext. It is
clear that the security level guaranteed by this notion is
higher than owe-id, but lower than ind-id-cca.
Deﬁnition 4. An IBE is called owe-id-cca if the value
P = R :
Pr
(cid:16) ˙ID, StA
(par, mk) ← IBE.Set (k)
(cid:17) ← AExt(·),Dec1(·,·) (par)
(cid:16)
(cid:17)
P $← {0, 1}∗
C ← IBE.Enc
R ← AExt(·),Dec2(·,·) (C, StA)
˙ID, P
par,
(cid:17)
(cid:16) ˙ID
(cid:16) ˙ID, C
(cid:17)
is negligible in k for any poly-time adversary A given that
there is neither a Ext
query by
the adversary, where Ext (·), Dec1 (·,·), and Dec2 (·,·) are
the extraction oracle, decryption oracle in phase 1, and de-
cryption oracle in phase 2, respectively.
nor a Dec2
4.2 IBE-Based Signature and IBE-Based COP
Given an IBE scheme, a signature scheme IBESig can be
constructed [7, p. 226]. The key generation and signing
algorithms are as follows:
IBESig.KeyGen (k)
(par, mk) ← IBE.Set (k)
pk ← par
sk ← (par, mk)
(pk, sk) ←|
IBESig.Sign (sk, m)
dk ← IBE.Ext (par, mk, m)
σ ← dk
σ ←|
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
We say that SS-COP is cop-imp-ca-secure if its cop-imp-ca
insecurity is negligible in k.
Credential-Holder Protection. The cop-imp-ca se-
curity guarantees that an adversary interacting with many
diﬀerent credential-holders is not able to impersonate one
of them in a COP protocol and prove ownership of one of
their credentials to another entity. This property is reﬂected
in the deﬁned experiment as the case where the adversary
interacts with a clone holding the credential on the target
message during the attack. It is also worth to mention that
cop-imp-ca security is stronger than both notions of secu-
rity in [1], i.e. imp-1 and imp-2, aiming to capture credential-
holder protection. In fact, cop-imp-ca security can be seen
as an extension of these two notions, in which the adversary
has extra capabilities of corrupting credential-holders of its
choice (i.e. access to the signing oracle), interacting with
credential-holders of its choice, arbitrarily interleaving such
interactions (i.e. concurrent attack), and deciding on the
credential text that it will claim ownership of the signature
on.
Credential-Issuer Protection. The credential-issuer
is protected in the deﬁnition as the adversary who can have
the signatures on arbitrary messages of its choice and can in-
teract with arbitrary credential-holders of its choice, cannot
even prove ownership of a new credential, let alone forging
one. This property is reﬂected in the deﬁned experiment,
as the case where the adversary does not interact with a
clone holding the credential on the target message during
the attack and the target message presents a new creden-
tial. We note that cop-imp-ca security implies existen-