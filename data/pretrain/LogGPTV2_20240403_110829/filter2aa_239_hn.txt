服务就运行在SynchronizationContext属性定义的线
程中
IncludeExceptionDetailInFaults
在.NET中，错误被看作异常。SOAP指定SOAP错
误返回给客户端，以防服务器出问题。出于安全考
虑，最好不要把服务器端异常的细节返回给客户
端。因此，异常默认转换为未知错误。要返回特定
的错误，可抛出FaultException类型的异常。为了便
于调试，返回真实的异常信息很有帮助。此时应把
IncludeExceptionDetailInFaults属性的设置改为
true。这里抛出FaultException异常，其中
原始异常包含详细信息
MaxItemsInObjectGraph
使用MaxItemsInObjectGraph属性，可以限制要序列
化的对象数。如果序列化一个对象树型结构，则默
认的限制过低
ValidateMustUnderstand
把ValidateMustUnderstand属性设置为true表示必须
理解SOAP标题（默认）
为了演示服务行为，IStateService接口定义了一个服务协定，其中的两个操作用于获
取和设置状态。有状态的服务协定需要一个会话。这就是把服务协定的SessionMode属性
设置为SessionMode.Required的原因。服务协定还将IsInitiating和IsTerminating属性应用于
操作协定，以定义启动和关闭会话的方法。
    [ServiceContract(SessionMode=SessionMode.Required)]
    public interface IStateService
    {
      [OperationContract(IsInitiating=true)]
      void Init(int i);
      [OperationContract]
      void SetState(int i);
      [OperationContract]
      int GetState();
      [OperationContract(IsTerminating=true)]
      void Close();
    }
服务协定由StateService类实现。服务的实现代码定义了
InstanceContextMode.PerSession，使状态与实例保持同步。
    [ServiceBehavior(InstanceContextMode=InstanceContextMode.PerSession)]
    public class StateService: IStateService
    {
      int _i = 0;
      public void Init(int i)
      {
        _i = i;
      }
      public void SetState(int i)
      {
        _i = i;
      }
      public int GetState()
      {
        return _i;
      }
      public void Close()
      {
      }
    }
现在必须定义对地址和协议的绑定。其中，将basicHttpBinding赋予服务的端点：
如果用定义的配置启动服务宿主，就会抛出一个InvalidOperationException类型的异
常。该异常的错误消息是“协定需要会话，但绑定BasicHttpBinding不支持它或者没有正确
配置为支持它”。
并不是所有绑定都支持所有服务。因为服务协定需要用
[ServiceContract（ServiceMode=ServiceMode.Required）]特性指定一个会话，所以主机会
因为所配置的绑定不支持会话而失败。
只要修改对绑定的配置，使之支持会话（如wsHttpBinding），服务器就会成功启
动。
在服务的实现代码中，可以通过OperationBehavior特性将表44-5所示的属性应用于服
务方法。
表44-5
通过OperationBehavior应用的属
性
说明
AutoDisposeParameters
默认情况下，所有可释放的参数都自动释放。如果
参数不应释放，那么可以把AutoDisposeParameters
属性设置为false。接着，发送方将负责释放该参数
Impersonation
使用Impersonation属性，可以模拟调用者，以调用
者的身份运行方法
ReleaseInstanceMode
InstanceContextMode使用服务行为设置定义对象实
例的生命周期。使用操作行为设置，可以根据操作
重写设置。ReleaseInstanceMode用
ReleaseInstanceMode枚举定义实例发布模式。其
None值使用实例上下文模式设置。BeforeCall、
AfterCall和BeforeAndAfterCall值用于定义操作的循
环次数
TransactionScopeRequired
使用TransactionScopeRequired属性可以指定操作是
否需要一个事务。如果需要一个事务，且调用者已
经发出一个事务，就使用同一个事务。如果调用者
没有发出事务，就创建一个新的事务
TransactionAutoComplete
TransactionAutoComplete属性指定事务是否自动完
成。如果把该属性设置为true，则在抛出异常的情
况下终止事务。如果这是一个根事务，且没有抛出
异常，则提交事务
44.5 绑定
绑定描述了服务的通信方式。使用绑定可以指定如下特性：
● 传输协议
● 安全性
● 编码格式
● 事务流
● 可靠性
● 形状变化
● 传输升级
44.5.1 标准绑定
绑定包含多个绑定元素，它们描述了所有绑定要求。可以创建自定义绑定，也可以使
用表44-6中的某个预定义绑定：
表44-6
标准绑定
说明
BasicHttpBinding
BasicHttpBinding绑定用于最广泛的互操作，针对
第一代Web服务。所使用的传输协议是HTTP或
HTTPS，其安全性仅由传输协议保证
WSHttpBinding
WSHttpBinding绑定用于下一代Web服务，它们用
SOAP扩展确保安全性、可靠性和事务处理。所使
用的传输协议是HTTP或HTTPS；为了确保安全，
实现了WS-Security规范；使用WS-Coordination、
WS-AtomicTransaction和WS-BusinessActivity规范
支持事务；通过WS-ReliableMessaging的实现支持
可靠的消息传送。WS-Profile也支持用于发送附件
的MTOM（Message Transmission Optimization
Protocol，消息传输优化协议）编码。WS-*标准的
规范可参见http://www.oasis-open.org
WS2007HttpBinding
WS2007HttpBinding派生自基类WSHttpBinding，支
持OASIS（Organization for the Advancement of
Structured Information Standards，结构化信息标准
促进组织）定义的安全性、可靠性和事务规范。这
个类提供了更新的SOAP标准
WSHttpContextBinding
WSHttpContextBinding派生自基类
WSHttpBinding，开始支持没有使用cookie的上下
文。这个绑定会添加ContextBindingElement来交换
上下文信息。Windows Workflow Foundation 3.0需
要上下文绑定元素
WebHttpBinding
这个绑定用于通过HTTP请求（而不是SOAP请求）
提供的服务，它对于脚本客户端很有用，如
ASP.NET AJAX
WSFederationHttpBinding
WSFederationHttpBinding是一种安全、可交互操作
的绑定，支持在多个系统上共享身份，以进行身份
验证和授权
WSDualHttpBinding
与WSHttpBinding相反，WSDualHttpBinding绑定支
持双工的消息传送
NetTcpBinding
所有用Net作为前缀的标准绑定都使用二进制编码
在.NET应用程序之间通信。这个编码比WSxxx绑
定使用的文本编码快。NetTcpBinding绑定使用
TCP/IP协议
NetTcpContextBinding
类似于WSHttpContextBinding,
NetTcpContextBinding会添加
ContextBindingElement，与SOAP标题交换上下文
信息
NetHttpBinding
这是.NET 4.5新增的绑定，支持WebSocket传输协
议
NetPeerTcpBinding
NetPeerTcpBinding为对等通信提供绑定
NetNamedPipeBinding
NetNamedPipeBinding为同一系统上的不同进程之
间的通信进行了优化
NetMsmqBinding
NetMsmqBinding为WCF引入了排队通信。这里消
息会被发送到消息队列中
MsmqIntegrationBinding
MsmqIntegrationBinding是用于使用消息队列的已
有应用程序的绑定，而NetMsmqBinding绑定需要
位于客户端和服务器上的WCF应用程序
CustomBinding
使用CustomBinding，可以完全定制传输协议和安
全要求
44.5.2 标准绑定的功能
不同的绑定支持不同的功能。以WS开头的绑定独立于平台，支持Web服务规范。以
Net开头的绑定使用二进制格式，使.NET应用程序之间的通信有很高的性能。其他功能包
括支持会话、可靠的会话、事务和双工通信。表44-7列出了支持这些功能的绑定。
表44-7
功能
绑定
会话
WSHttpBinding、WSDualHttpBinding、
WSFederationHttpBinding、NetTcpBinding、
NetNamedPipeBinding
可靠的会话
WSHttpBinding、WSDualHttpBinding、
WSFederationHttpBinding、NetTcpBinding
事务
WSHttpBinding、WSDualHttpBinding、
WSFederationHttpBinding、NetTcpBinding、
NetNamedPipeBinding、NetMsmqBinding、
MsmqIntegrationBinding
双工通信
WSDualHttpBinding、NetTcpBinding、
NetNamedPipeBinding、NetPeerTcpBinding
除了定义绑定之外，服务还必须定义端点。端点依赖于协定、服务的地址和绑定。在
下面的代码示例中，实例化了一个ServiceHost对象，将地址
http://localhost:8080/RoomReservation、一个WSHttpBinding实例和协定添加到服务的一个
端点上。
    static ServiceHost s_host;
    static void StartService()
    {
      var baseAddress = new Uri("http://localhost:8080/RoomReservation");
      s_host = new ServiceHost(typeof(RoomReservationService));
      var binding1 = new WSHttpBinding();
      s_host.AddServiceEndpoint(typeof(IRoomService), binding1, baseAddress);
      s_host.Open();
    }
除了以编程方式定义绑定之外，还可以在应用程序配置文件中定义它。WCF的配置
放在元素中，元素定义了所提供的服务。同样，如代码所
示，服务需要一个端点，该端点包含地址、绑定和协定信息。wsHttpBinding的默认绑定
配置用XML特性bindingConfiguration修改，该特性引用了绑定配置wsHttpBinding。这个绑
定配置在部分，它用于修改wsHttpBinding配置，以启用reliableSession。
44.5.3 WebSocket
WebSocket是基于TCP的一个新通信协议。HTTP协议是无状态的。服务器利用
HTTP，可以在每次回应请求后关闭连接。如果客户端需要从服务器连续接收信息，使用
HTTP协议就总是会有一些问题。
因为HTTP连接是保持的，所以解决这个问题的一种方式是让一个服务运行在客户
端，服务器连接到该客户端，并发送回应。如果在客户端和服务器之间有防火墙，这种方
式通常无效，因为防火墙阻塞了入站的请求。
解决这个问题的另一种方式是使用另一个协议替代HTTP协议。这样连接可以保持活
跃。使用其他协议的问题是端口需要用防火墙打开。防火墙总是一个问题，但需要用防火
墙来禁止坏人进入。
这个问题的通常的解决方法是每次都实例化来自客户端的请求。客户端向服务器询
问，是否有新的信息。这是有效的，但其缺点是要么客户端询问了很多次，都没有得到新
信息，因此增加了网络通信量，要么客户端获得了旧信息。
新的解决方案是使用WebSocket协议。这个协议由W3C定义
（http://www.w3.org/TR/websockets），开始于一个HTTP请求。客户端首先发出一个
HTTP请求，防火墙通常允许发送该请求。客户端发出一个GET请求时，在HTTP头中包含