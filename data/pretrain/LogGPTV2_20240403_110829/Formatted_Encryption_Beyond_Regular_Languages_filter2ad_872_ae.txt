### 优化后的文本

#### 图5：结果展示
图5展示了C99语法（上行）、C992语法（中行）和GD语法（下行）的结果，使用切片大小 n = 1000, 1100, ..., 4000。各列分别表示：
- **左列**：初始化时间，即首次执行NS(n)（使用算法3中的NS，其中A = S）所需的时间。
- **中列**：通过/proc接口估算的内存占用。
- **右列**：排名和取消排名的时间，这些操作在算法1和算法2中进行。

#### 结果分析
- **初始化时间**：第一列显示了初始化时间。
- **内存占用**：第二列显示了内存占用情况。
- **排名和取消排名时间**：最后一列显示了排名和取消排名的时间，单位为毫秒。这些操作非常快速。

我们还精确计算了中间集合的大小，发现它们可以近似为：
- C99: \( |I| \approx 10^{1.87 \times n} \)
- C992: \( |I| \approx 10^{1.67 \times n} \)
- GD: \( |I| \approx 10^{0.83 \times n} \)

因此，在所有情况下，中间集合I的大小随切片大小n呈指数增长。

#### 模糊性分析
尽管C99语法是模糊的，但在将重复次数C从100增加到10000次的情况下，我们的实验未检测到任何外部字符串。原因是模糊字符串的密度非常低。

为了更好地理解这一点，考虑图6中的较小但仍然模糊的语法GA。词法标记ID表示标识符，NUM表示整数常量；两者都可以具有任意长度。GA允许经典的模糊示例：语句 `if(a) if(b) c; else d;` 可以有两种解析方式：`if(a) { if(b) c; else d; }` 或 `if(a) { if(b) c; } else d;`。

```plaintext
StatementList: S | S StatementList
S : AS | IF '(' E ')' S | IF '(' E ')' S ELSE S | '{' S '}'
AS : E ';' | ID '=' E ';'
E : ID | NUM
```

图6：一个模糊语法GA的例子

我们特意设计了语法GA使其模糊，并且只有少数几种不模糊的语句。然而，在切片大小为1000，试验次数C = 10,000的情况下，我们没有检测到任何外部字符串。一种直观的解释是，模糊字符串需要包含`if..if..else`结构。关键字使用了8个字节（总切片大小为1000字节）。我们可以移除关键字并用标识符或常量填充这8个字节，从而产生许多更多的非模糊字符串，导致模糊字符串的密度很低。

为了验证这一解释，我们减少了可能的词法标记数量，并将ID和NUM的正则表达式改为只匹配一个值。这应该会增加模糊字符串的密度。确实，在这种情况下，我们在C = 100次试验中检测到了U = 9个外部字符串，并估计β ≈ C / (C - U) ≈ 1.1。我们通过限制ID和NUM可以匹配的元素数量重复了实验，结果如表1所示。

#### 表1：GA的外部字符串计数
| 限制 | 试验次数 | 测量值 | 推断值 |
|------|----------|--------|--------|
| |L(ID)| |L(NUM)| U | β |
| 9    | 1257     | 9      | 1.1    |
| 111  | 33       | 422    | 1.14   |
| 20   | 14       | 2      | 1.01   |
| 422  | 2        | 0      | 1.003  |
| 2    | 2        | 0      | 1.004  |
| 2    | 3        | 0      | 1.002  |
| 3    | 3        | 0      | 1.001  |
| 4    | 4        | 0      | 1.001  |
| 4    | 10       | 0      | 1.001  |
| 15   | 1        | 0      | 1.001  |

表1显示了结果，支持了假设：至少在这种情况下，词法标记可以取的值越多，模糊字符串的百分比就越低（因为模糊字符串需要固定的关键字）。

#### 讨论
实验表明，基于CFG的松弛排名方法既可用又高效。一旦完成记忆化，排名和取消排名操作非常快速，即使对于像C99这样的复杂语言，也能在不到一秒钟内处理高达4000字节的切片。虽然理论上模糊性是一个障碍，但实际上它对常用语法来说并不是问题。即使我们使用了一个高度模糊的语法，除非人为地将词法标记可以取的值的数量限制得非常小，否则我们无法检测到任何外部字符串。即使在极端情况下，每个标记只能取一个值时，测得的模糊因子也小于2。这意味着，例如，在第2节中的方案中，FPE的预期循环步数最多为2。因此，加密和解密将非常快速。

#### 致谢
感谢审稿人的宝贵意见。本研究部分得到了美国国家科学基金会（NSF）的支持，资助项目包括CNS-1228782、CNS-1228620、CNS-1064944、CNS-1330308、CNS-1065134、CNS-1253870、CNS-0845610和CNS-1319061。

#### 参考文献
[1] The GNU Multiple Precision Arithmetic Library. http://gmplib.org/.

[2] M. Bellare, T. Ristenpart, P. Rogaway, and T. Stegers. Format-Preserving Encryption. In Selected Areas in Cryptography, pages 295–312. Springer-Verlag, 2009.

[3] J. Black and P. Rogaway. Ciphers with Arbitrary Finite Domains. In Topics in Cryptology–CT-RSA 2002, pages 114–130. Springer Berlin Heidelberg, 2002.

[4] M. Brightwell and H. Smith. Using Datatype-Preserving Encryption to Enhance Data Warehouse Security. In 20th National Information Systems Security Conference Proceedings (NISSC), pages 141–149, 1997.

[5] ANSI C99 Grammar YACC Specification. http://www.quut.com/c/ANSI-C-grammar-y-1999.html.

[6] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The Second-Generation Onion Router. In Proceedings of the 13th conference on USENIX Security Symposium - Volume 13, pages 21–21, Berkeley, CA, USA, 2004. USENIX Association.

[7] K. P. Dyer, S. E. Coull, T. Ristenpart, and T. Shrimpton. Protocol Misidentification Made Easy with Format-Transforming Encryption. In Proceedings of the 20th ACM Conference on Computer and Communications Security (CCS 2013), November 2013.

[8] A. Goldberg and M. Sipser. Compression and Ranking. In Proceedings of the seventeenth annual ACM symposium on Theory of computing, STOC ’85, pages 440–448, New York, NY, USA, 1985. ACM.

[9] M. Holzer and M. Kutrib. Descriptional Complexity of (Un)ambiguous Finite State Machines and Pushdown Automata. In Proceedings of the 4th international conference on Reachability problems, RP’10, pages 1–23, Berlin, Heidelberg, 2010. Springer-Verlag.

[10] O. H. Ibarra and B. Ravikumar. On Sparseness, Ambiguity and Other Decision Problems for Acceptors and Transducers. In 3rd annual symposium on theoretical aspects of computer science on STACS 86, pages 171–179, New York, NY, USA, 1985. Springer-Verlag New York, Inc.

[11] S. Kannan, Z. Sweedyk, and S. Mahaney. Counting and Random Generation of Strings in Regular Languages. In Proceedings of the sixth annual ACM-SIAM symposium on Discrete algorithms, SODA ’95, pages 551–557, Philadelphia, PA, USA, 1995. Society for Industrial and Applied Mathematics.

[12] L. Lee. Fast Context-Free Grammar Parsing Requires Fast Boolean Matrix Multiplication. J. ACM, 49(1):1–15, Jan. 2002.

[13] J. Levine, T. Mason, and D. Brown. Lex & Yacc, 2nd Edition. O’Reilly, second edition, 1992.

[14] D. Luchaup, K. P. Dyer, S. Jha, T. Ristenpart, and T. Shrimpton. Libfte: A User-Friendly Toolkit for Constructing Practical Format-Abiding Encryption Schemes. In Proceedings of the 14th conference on USENIX Security Symposium, 2014.

[15] E. Mäkinen. Ranking and Unranking Left Szilard Languages. Technical report, ISO/IEC JTC1/SC29/WG11/N2467, Atlantic City, 1997.

[16] A. Nijenhuis and H. S. Wilf. Combinatorial Algorithms. New York : Academic Press, 1975.

[17] B. Ravikumar and O. H. Ibarra. Relating the Type of Ambiguity of Finite Automata to the Succinctness of Their Representation. SIAM J. Comput., 18(6):1263–1282, Dec. 1989.

[18] R. Schroeppel and H. Orman. The Hasty Pudding Cipher. AES candidate submitted to NIST, page M1, 1998.

[19] M. Sipser. Introduction to the Theory of Computation. Cengage Learning, 2012.