[AUTH(IDI , sign(sk I , hash(m1 | nR | mac(km, IDI ))))]ke
[AUTH(IDR, sign(sk R, hash(m2 | nI | mac(k
(cid:2)
m, IDR))))]k(cid:3)
(km, k
e
e) = kdf(gxy, nI | nR)
(cid:2)
IDI , sign(sk I , H(m1, nR, IDI ,−))
(cid:2)(m2, nI , IDR,−))
IDR, sign(sk R, H
mode = (SAR, IDI , IDR)
complete = true
mode = (SAR, IDI , IDR)
complete = true
(a) IKEv2 protocol with mutual signatures.
(b) IKEv2 sub-protocol with mutual signatures.
Fig. 5: IKEv2 protocol and sub-protocol for signature-based authentication
Init. I
MitM
Resp. R
SA_INIT(nI , [SA14, SA1], (G14, go), infoI )
INVALID_KE(G1)
m1 = SA_INIT(nI , [SA14, SA1], (G1, gx), infoI )
m2 = SA_INIT(nR, SA1, (G1, gy), infoR)
(km, k
(cid:2)
m, ke, k
e) = kdf(gxy, nI | nR)
(cid:2)
(km, k
y = dlog(G1, gy)
e) = kdf(gxy, nI | nR)
(cid:2)
(cid:2)
m, ke, k
(cid:2)
1 = SA_INIT(nI , [SA1], (G1, gx), infoI )
m
[AUTH(IDI , sign(sk I , hash(m1 | nR | mac(km, IDI ))))]ke
[AUTH(IDR, sign(sk R, hash(m2 | nI | mac(k
[AUTH(IDM , sign(sk M , hash(m
(cid:2)
m, IDR))))]k(cid:3)
e
[Data1]ke
(cid:2)
2]k(cid:3)
[Data
e
(cid:2)
1]ke
[Data
[Data2]k(cid:3)
e
(km, k
(cid:2)
m, ke, k
e) = kdf(gxy, nI | nR)
(cid:2)
1 | nR | mac(km, IDM ))))]ke
(cid:2)
Fig. 6: Man-in-the-middle downgrade on IKEv2 with mutual signatures and weak Difﬁe-Hellman groups
an extra INVALID_KE message to the client. This does not
present any difﬁculty since this message is unauthenticated.
The attack described above is reminiscent of Logjam [2]
and is arguably feasible with modern computing power, or
will be in the coming years. There are other downgrade attacks
with a similar impact on IKEv2: the man-in-the-middle could
downgrade the security association to use weak encryption or
authentication algorithms.
IKEv2 with EAP client authentication: We now consider
the downgrade protection sub-protocol in case the initiator is
authenticated using some EAP method, whereas the responder
still uses a certiﬁcate and a signature (see Figures 7a and 7b).
In this variant, in the third message, the initiator sends
its identity without any signature. Instead, after verifying the
server’s signature, it engages in an application-level ‘embed-
ded’ authentication protocol that generates a shared key. Its
use of EAP is asymmetric, in that EAP authenticates the
initiator (IDI) but does not re-authenticate the responder. The
resulting shared key is used to MAC the initiator’s view of the
negotiation: the full ﬁrst message, including the client’s offered
security associations, the responder’s nonce, and a MAC over
the initiator’s identity with the session key.
Enabling EAP actually weakens downgrade protection: the
responder (still) does not sign the initiator’s proposals, and
also does not sign the chosen client AUTH method (signature
or EAP), and this opens the possibility of cross-authentication
attacks between different AUTH methods.
For example, consider the attack in Fig. 8. Suppose the ini-
tiator disables EAP, but the responder supports it. The attacker
can then replace the initiator’s signature message with an EAP
authentication message, forward the responder’s signature, and
thereby downgrade the SA used by the initiator, to use a weak
encryption algorithm, for instance. In comparison with the ﬁrst
attack on IKEv2 discussed above, this attack does not require
breaking the Difﬁe-Hellman exchange to gain control of the
key used to MAC the signature payloads.
This would be a powerful downgrade, and it would allow
ofﬂine decryption of the initiator’s subsequent messages, but
it is still difﬁcult to implement in practice because the au-
thentication messages are themselves encrypted-and-MACed.
Hence, the attack requires that the attacker should be able to
break the (downgraded) authenticated encryption mechanism
in the SA.
For example,
it can be mounted if the encryption and
integrity algorithms are downgraded to NULL, an allowed
(but not recommended) option in IKEv2. In particular, the
speciﬁcation says: “Though the security of negotiated Child
SAs does not depend on the strength of the encryption and
integrity protection negotiated in the IKE SA, implementations
MUST NOT negotiate NONE as the IKE integrity protection
516516
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
Init. I
Resp. R
m1 = SA_INIT(nI , [SA1, . . . , SAn], (G, gx), infoI )
m2 = SA_INIT(nR, SAR, (G, gy), infoR)
(km, k
(cid:2)
m, ke, k
e) = kdf(gxy, nI | nR)
(cid:2)
(km, k
(cid:2)
m, ke, k
e) = kdf(gxy, nI | nR)
(cid:2)
Init. I
Resp. R
m1 = (nI , F (cfg I ))
uid = (nI , nR)
SAR = nego(F (cfg I ), cfg R)
m2 = (nR, SAR)
[AUTH(IDR, sign(sk R, hash(m2 | nI | mac(k
[AUTH(IDI )]ke
(cid:2)
m, IDR))))]k(cid:3)
e
[AUTH(eap1(. . .))]ke
[AUTH(eap2(. . .))]k(cid:3)
e
uid = (nI , nR)
Check (cfg I , SAR)
IDI
IDR, sign(sk R, H(m2, nI , IDR,−))
(cid:2)(m1, nR, IDI ,−))
mac(msk , H
mac(msk , H(m2, nI , IDR,−))
msk = EAP shared key
msk = EAP shared key
[AUTH(mac(msk , m1 | nR | mac(km, IDI )))]ke
[AUTH(mac(msk , m2 | nI | mac(k
(cid:2)
m, IDR)))]k(cid:3)
e
mode = (SAR, IDI , IDR)
complete = true
mode = (SAR, IDI , IDR)
complete = true
(a) IKEv2 protocol with EAP client authentication.
(b) IKEv2 sub-protocol with EAP client authentication.
Fig. 7: IKEv2 protocol and sub-protocol for EAP-based authentication
Init. I
MitM
m1 = SA_INIT(nI , [SAstrong , SAnull ], (G, gx), infoI )
m2 = SA_INIT(nR, SAnull , (G, gy), infoR)
(cid:2)
1 = SA_INIT(nI , [SAnull ], (G, gx), infoI )
m
Resp. R
(km, k
(cid:2)
m, ke, k
e) = kdf(gxy, nI | nR)
(cid:2)
Encryption and Integrity set to null
(km, k
(cid:2)
m, ke, k
e) = kdf(gxy, nI | nR)
(cid:2)
AUTH(IDI , sign(sk I , hash(m1 | nR | mac(km, IDI ))))
AUTH(IDR, sign(sk R, hash(m2 | nI | mac(k
Data
AUTH(IDI )
(cid:2)
m, IDR))))
Fig. 8: Man-in-the-middle cross-protocol downgrade on IKEv2 mixing signatures and EAP authentication
algorithm or ENCR NULL as the IKE encryption algorithm.”
[27, Section 5]. Our attack shows that this assumption is
wrong: the downgrade security of IKEv2 crucially depends
on the strength of the encryption and integrity algorithms,
especially when both signatures and EAP are enabled.
We also note that in case the initiator also supports EAP, any
subsequent initiator authentication makes no difference since
the initiator is now talking to the attacker and does not seek
to re-authenticate the responder.
While these attacks can be mitigated by disabling weak al-
gorithms, or by relying on subsequent key exchanges in Child
SAs, a simple protocol-level ﬁx would be for the responder to
include the client’s ﬁrst message and authentication mode in
its signature (at the cost of losing deniability). We could then
obtain downgrade protection simply by relying on the strength
of the responder’s signature, irrespective of weak groups and
broken encryption algorithms.
C. Version downgrade attacks from IKEv2 to IKEv1
IKE does not include a version negotiation protocol. Ini-
tiators ﬁrst try to connect with IKEv2 and if that fails they
fall back to IKEv1. This allows a simple downgrade attack
between this versions, since IKEv1 has no way of authenti-
cating the highest supported version. The IKEv2 speciﬁcation
acknowledges this version downgrade possibility to IKEv1,
517517
but sets up a ﬂag to prevent future downgrade attacks from
IKEv(n > 2) to IKEv2: “Note that IKEv1 does not follow
these rules, because there is no way in v1 of noting that
you are capable of speaking a higher version number. So an
active attacker can trick two v2-capable nodes into speaking
v1. When a v2-capable node negotiates down to v1, it should
note that fact in its logs” [27, Section 2.5].
VI. Z REAL-TIME PROTOCOL
ZRTP [46] is a specialized protocol used to establish key
material for encrypted voice-over-IP (VoIP) communications.
Unlike TLS, ZRTP does not rely on public-key infrastructure
or certiﬁcates for authentication. Instead, participants authen-
ticate each other by comparing a “short authentication string”
derived from the session key, also known as a SAS, via some
trusted channel. For our purposes in this analysis, we assume
in our model that the SAS comparison is conducted via an
ideal, trusted channel that is not susceptible to tampering.
Because the SAS is short, the protocol offers a more limited
form of protection. If the SAS length is (cid:4) bits,
then the
probability of an attacker subverting the authentication is at
least 2−(cid:4) with each execution of the handshake. In most
implementations (cid:4) is typically a small value, e.g. 16. The
use of a short authentication string presents challenges for
both key exchange and downgrade security. For example, if
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
the SAS employed a full-length collision-resistant hash, it
would sufﬁce for the parties to exchange a hash of the full
protocol transcript. However, even when constructed using
a (truncated) collision-resistant hash function,
the SAS is
too short to provide the necessary protection, and additional
measures must be taken.
A. ZRTP does not prevent downgrade attacks
The ZRTP protocol is presented in Figure 9a. The down-
grade protection sub-protocol is presented in Figure 9b.
The ciphersuite negotiation is conducted within the ﬁrst two
(“Hello”) messages exchanged by the Initiator and the Respon-
der. The chosen ciphersuite ai is determined by selecting a
ciphersuite in the intersection of the available algorithms pre-
sented by each party. Ciphersuites consist of a key exchange
algorithm, a cipher and MAC algorithm for subsequent data
exchange, and a SAS algorithm determining the length and
format of the SAS string. Additionally, the protocol negotiates
options such as a “trusted” PBX ﬂag and an optional signature
on the SAS.
Following the initial negotiation messages, the parties deter-
mine who will play the role of the Initiator, engage in a key
exchange, and derive session keys. Transcript correctness is
enforced by incorporating a hash of most of the transcript into
the key derivation function, which produces both session keys
and a SAS. A ﬁnal mechanism tries to authenticate each of the
handshake messages by computing a MAC over each message,
using a key that is revealed in the subsequent message. To bind
these messages together, ZRTP uses a hash chain.1
Downgrading protocol versions: ZRTP includes a negotiation
mechanism for protocol versions and options that is not in-
corporated into the calculation of the shared secrets and SAS.
When the parties support multiple versions of the protocol and
protocol options, a MitM can substitute the protocol versions
vI , vR to downgrade both parties to a previous version of
the protocol, as illustrated in Figure 10. Moreover, since the
ﬁrst (Initiator Hello) message is not authenticated, the attacker
can also change the options ﬂags oI. This second proce-
dure requires the attacker to defeat the hash chain security
mechanism. Unfortunately this may be done by capturing and
delaying subsequent messages until the authentication key for
earlier messages has been revealed, allowing the attacker to
change messages arbitrarily. The ﬁx for this vulnerability is
straightforward: all negotiation messages should be included
in the calculation of the session key and SAS.
Downgrade from DH to PSK: ZRTP supports both Difﬁe-
Hellman key exchange and a pre-shared key mode. The latter
is analogous to the session resumption handshake in TLS, in
that it provides an inexpensive (symmetric-key only) hand-
shake, which operates under the assumption that the parties
1Speciﬁcally, each participant computes an initial nonce H0 and hashes it
to obtain the sequence H3 = hash(H2 = hash(H1 = hash(H0))). At each
message in the handshake, the party reveals Hi and uses Hi−1 as a MAC
key to authenticate the current message. Veriﬁcation is only possible when
the next message is received. The initial value H0 is revealed only within the
encrypted conﬁrmation message at the conclusion of the protocol.
have previously completed a full Difﬁe-Hellman handshake
to establish a pre-shared key. The corresponding negotiation
sub-protocol is shown in Fig. 11.
The limitation of this pre-shared mode is that it does not
force the parties to commit to their protocol inputs before
revealing them, which admits an ofﬂine attack in which a
MitM may identify protocol inputs that result in a chosen
SAS. The attack begins with the establishment of a shared key
(via Difﬁe-Hellman) before restarting with the PSK mode. We
describe the attack in detail in the full version [14]. In practice,
most ZRTP implementations do not
implement pre-shared
mode, and those that do only allow SAS authentication after
DH exchanges. Nevertheless, this protocol-level attack should
serve as a cautionary tale for future ZRTP implementations
and extensions.
VII. TRANSPORT LAYER SECURITY
The Transport Layer Security protocol (TLS) is used to
provide secure channels for a variety of Internet applications.
It offers a number of key exchange mechanisms, authentication
methods, and encryption schemes, so that users can pick and
choose mechanisms best suited to their needs.