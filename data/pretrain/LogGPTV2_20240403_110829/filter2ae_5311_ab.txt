    #ifdef __cplusplus
    extern "C" {
    #endif
    typedef enum {
        NOOP    = 0,
        IADD    = 1,   // int add
        ISUB    = 2,
        IMUL    = 3,
        ILT     = 4,   // int less than
        IEQ     = 5,   // int equal
        BR      = 6,   // branch
        BRT     = 7,   // branch if true
        BRF     = 8,   // branch if false
        ICONST  = 9,   // push constant integer
        LOAD    = 10,  // load from local context
        GLOAD   = 11,  // load from global memory
        STORE   = 12,  // store in local context
        GSTORE  = 13,  // store in global memory
        PRINT   = 14,  // print stack top
        POP     = 15,  // throw away top of stack
        HALT    = 16    //over
    } VM_CODE;
    void vm_exec(int *code, int count, int startip, int nglobals, int trace);
    #ifdef __cplusplus
    }
    #endif
    #endif
vm.c
    #include 
    #include 
    #include "vm.h"
    #define DEFAULT_STACK_SIZE 1000
    #define FALSE 0
    #define TRUE 1
    typedef struct {
        char name[8];
        int nargs;
    } VM_INSTRUCTION;
    VM_INSTRUCTION vm_instructions[] = {
        { "noop",   0 },
        { "iadd",   0 },
        { "isub",   0 },
        { "imul",   0 },
        { "ilt",    0 },
        { "ieq",    0 },
        { "ret",    0 },
        { "br",     1 },
        { "brt",    1 },
        { "brf",    1 },
        { "iconst", 1 },
        { "load",   1 },
        { "gload",  1 },
        { "store",  1 },
        { "gstore", 1 },
        { "print",  0 },
        { "pop",    0 },
        { "halt",   0 }
    };
    static void vm_print_instr(int *code, int ip);
    static void vm_print_stack(int *stack, int count);
    static void vm_print_data(int *globals, int count);
    void vm_exec(int *code, int count, int startip, int nglobals, int trace)
    {
        // registers
        int ip = 0;         // instruction pointer register
        int sp = -1;          // stack pointer register
        int fp = -1;        // frame pointer register
        int opcode = code[ip];
        int a = 0;
        int b = 0;
        int addr = 0;
        int offset = 0;
        // global variable space
        int globals[nglobals];
        // Operand stack, grows upwards
        int stack[DEFAULT_STACK_SIZE];
        while (opcode != HALT && ip nargs) {
        case 0:
            printf("%04d:  %-20s", ip, inst->name);
            break;
        case 1:
            printf("%04d:  %-10s%-10d", ip, inst->name, code[ip + 1]);
            break;
        }
    }
    static void vm_print_stack(int *stack, int count)
    {
        printf("stack=[");
        for (int i = 0; i 
    #include 
    #include "vm.h"
    int loop2[] = {
    // .GLOBALS 2; N, I
    // N = 10                      ADDRESS
            ICONST, 3,            // 0
            GSTORE, 0,             // 2
    // I = 0
            ICONST, 0,             // 4
            GSTORE, 1,             // 6
    // SUM = 0
            ICONST,0,               //8
            GSTORE,2,               //10
    // WHILE I<N:
    // START (8):
            GLOAD, 1,              // 12
            GLOAD, 0,              // 14
            ILT,                   // 16
            BRF, 35,               // 17
    //     I = I + 1
            GLOAD, 1,              // 19
            ICONST, 1,             // 21
            IADD,                  // 23
            GSTORE, 1,             // 24
    //sum = sum +i
            GLOAD,2,                //26
            GLOAD,1,                //28
            IADD,                   //30
            GSTORE,2,               //31
            BR, 12,                 // 33
            GLOAD,2,                //35
            PRINT,                  //37
    // DONE (24):
    // PRINT "LOOPED "+N+" TIMES."
            HALT                   // 38
    };
    int main(int argc, char *argv[])
    {
        //     vm_exec(hello, sizeof(hello), 0, 0, 1);
        vm_exec(loop2, sizeof(loop2), 0, 2, 0);
        return 0;
    }