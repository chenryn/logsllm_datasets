leader node assembles the pending and validated transactions
inside a block proposal and gossips it together with its sortition
proof of being elected a leader (see Fig. 1-(b)). After block
proposals are broadcast, each node collects incoming block
proposals for a ﬁxed duration, selecting and retaining the one
valid block with the highest priority sortition proof.
Each user then (asynchronously) initializes the BA(cid:2) proto-
col with the highest-priority block they have received. The
BA(cid:2) protocol enables all nodes in the network to reach
consensus on a single block. The BA(cid:2) protocol comprises
of two sequential phases, the Reduction phase (Fig. 1-(c))
followed by the BinaryBA(cid:2) phase (Fig. 1-(d)), with each phase
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:36:15 UTC from IEEE Xplore.  Restrictions apply. 
454
consisting of a sequence of steps. At a high level, in each step
ﬁrst a random or unpredictable group of nodes referred to as
committee members is elected. Then the elected committee
members vote on a speciﬁc block, based on votes received
from the previous step, and broadcast their new votes in voting
messages. Readers should recall that all voting messages also
contain a sortition proof which proves the validity of the
broadcaster as a committee member.
• Reduction Phase (Fig. 1-(c)): This ﬁrst phase of the
BA(cid:2) protocol comprises of exactly two steps. In the ﬁrst step,
each committee member votes on (the hash of) the blocks
proposed for consideration. In the second step, committee
members vote for the block hash that received votes over
a certain threshold. If no block hash receives enough votes,
committee members vote for the hash of the default empty
block. Reduction phase concludes with either at most one non-
empty block hash (the one that received the maximum number
of votes above the threshold) or hash of an empty block (if
no block hashes received enough votes). This output of the
reduction phase is passed as input to the BinaryBA(cid:2) phase.
• BinaryBA(cid:2) Phase (Fig. 1-(d)): The goal of
the
BinaryBA(cid:2) Phase is to reach agreement or consensus on the
majority voted non-empty block (hash) from the reduction
phase or, in case there is no consensus, on the empty (default)
block. In the common case, when the network is strongly
synchronous and the block proposer or leader is honest,
BinaryBA(cid:2) phase will start with the same block hash for most
users, and will reach consensus in the ﬁrst step, since most
committee members vote for the same block hash value. If the
network is not strongly synchronous, BinaryBA(cid:2) may return
consensus on two different blocks (i.e., the block received from
the reduction phase and the empty block). The outcome of the
BinaryBA(cid:2) phase is used by the BA(cid:2) algorithm to arrive at
either a ﬁnal or a tentative consensus. Final consensus means
that BA(cid:2) will not reach consensus on any other block for that
round, while tentative consensus means that BA(cid:2) is unable
to guarantee the safety goal in this round, either because of
network asynchrony or due to a malicious block proposer.
4) Cryptographic Sortition: Each node in the network
employs a cryptographic sortition algorithm to determine if it
is selected as a leader (or block proposer) at the beginning of
each round, and later, if it is selected as a committee member
at the beginning of each step (of both the Reduction and
BinaryBA(cid:2) phases). The sortition algorithm is implemented
using Veriﬁable Random Functions (VRF) [33] which allow
users to produce veriﬁable proofs using their private keys that
can be publicly veriﬁed using the corresponding public key.
Speciﬁcally, in order to generate a sortition proof for step s
in round r, a user i computes sigi(r, s, Qr−1), where sigi is
a digital signature computed using the user i’s private key,
and Qr−1 is a random seed (predetermined at the end of the
previous round, i.e., r − 1). This sortition proof is included
by the nodes in their block proposals and voting messages in
order to prove their roles as leader and committee members,
respectively. The recipients of these messages ﬁrst validate the
signature (using the public key) and then compute the hash of
TABLE I: List of Symbols in Algorand Analysis
Symbol
Ri
Fi
P F
i
Bi
α
β
γ
cf ix
cL
cM
cK
rL
i
rM
i
rK
i
sj
SL
SM
SK
SN
ulj
i
umj
i
ukj
i
Deﬁnition
Foundation reward in round ti
Summation of transaction fees in round ti
Reward pool level in round ti
The shared rewards in round ti
Fraction of rewards shared between leaders
Fraction of rewards shared between committee members
Fraction of rewards shared between remaining online nodes
Common costs of Algorand nodes
Costs for Algorand leaders
Costs for committee members
Costs for Algorand remaining online nodes
Rewards per each unit of stake for a leader
Rewards per each unit of stake for a committee member
Rewards per unit of stake for a remaining online node
Stake of node j ∈ {lj , mj , kj}; slj is reward for leader lj
slj
Summation of all stakes for leaders; i.e. SL =
Summation of all stakes for committee members
Summation of all stakes for other nodes
Summation of all stakes, i.e., SN = SL + SM + SK
Payoff for leader lj in round ti
Payoff for committee member mj in round ti
Payoff for remanding node kj in round ti
j∈L
(cid:2)
the sortition proof to verify a certain sortition condition that
determines the validity of the claimed role. The possibility that
the condition is veriﬁed is directly proportional to the stake
of the node (to which the proof belongs to) and depends on
a constant role parameter ﬁxed in the protocol. Due to space
restrictions, we will not further elaborate on this and interested
readers can ﬁnd more technical details in [18], [22], [33].
III. PROBLEM FORMULATION AND MOTIVATION
Similar to any other permissionless blockchain protocol,
Algorand must also provide enough incentives to foster coop-
eration among its participants, whether they are leaders, com-
mittee members, or online nodes, in order to enable effective
consensus (on the set of transactions), i.e., to achieve the safety
and liveness goals. In this section, we ﬁrst summarize all the
processing costs in the Algorand consensus protocol, followed
by a discussion of how rewards could be distributed among the
various protocol participants. Next, we empirically show that if
rewards are not appropriately distributed, rational participants
have an incentive to not cooperate (in the consensus protocol
tasks), resulting in no new blocks being added. Our goal here
is to highlight the need for designing an incentive-compatible
reward sharing mechanism for achieving cooperation in Algo-
rand. Table I presents the notations used throughout the paper.
A. Algorand Costs
From the operational details of Algorand, as outlined earlier,
it is clear that each participant or user, irrespective of their role,
is expected to perform some processing and communication
tasks during each phase of the protocol which incurs some
measurable cost, say, in terms of consumed energy. These
costs for each processing task can be further quantiﬁed using
monetary values (e.g., Dollars or Algos) by using the current
energy costs. Below we present a brief description of each of
these tasks that incur some signiﬁcant cost, which are also
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:36:15 UTC from IEEE Xplore.  Restrictions apply. 
455
TABLE II: Algorand tasks and costs given the role of nodes.
Task
Symbol
Transaction Veriﬁcation
Seed Generation
Sortition Algorithm
Verify Sortition Proof
Block Proposition
Gossiping
Block Selection
Vote
Vote Counting
cve
cse
cso
cvs
cbl
cgo
cbs
cvo
cvc
Leader
lj
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
Committee Others
mj
(cid:2)
(cid:2)
(cid:2)
(cid:2)
kj
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
summarized in Table II. We would like to stress that our
goal here is not to precisely quantify the cost associated with
each task - we simply argue that each of these tasks incurs a
signiﬁcant cost which cannot be ignored by the user. Rather
than precisely quantifying each of these costs, we abstract each
as a ﬁxed parameter within our model.
Transaction Veriﬁcation Cost (cve): This cost is incurred
by an Algorand node to check the validity of a transaction.
For each transaction validity check, the node must verify the
signature and also check whether the sending user has enough
Algos in its account for a successful transaction. A leader
assembles a set of transactions into a block, and all Algorand
nodes check the validity of transactions inside a block.
Seed Generation Cost (cse): Algorand requires a random
and publicly known seed as an input to the sortition algorithm.
Thus, a new seed is published in each round of Algorand. This
seed is a random number generated by VRF [33] from the
previous seed value and the current round number. Also, for
security reasons Algorand refreshes the seed every R rounds
[22]. We parameterize the cumulative cost of generating a new
seed in each round as cse.
Sortition Algorithm Cost (cso): As outlined in the previous
section, the sortition algorithm employs a VRF function [33] to
generate a membership proof which is included by leaders and
committee members in their messages to prove their role (as a
leader or committee member). The per-node cost of executing
the sortition algorithm is parameterized as cso.
Block proposition Cost (cbl): The cost of assembling a set
of outstanding, but valid, transactions (including the sortition
proof) into a block and broadcasting it to the neighboring
nodes in the network is borne by each (selected) leader node
in each round. We parameterize this cost as cbl.
Gossiping Cost (cgo): During each round, each node in
the Algorand network supports the network by forwarding
(gossiping) network messages, including transactions, blocks,
and votes. This expected gossiping cost for each round for
each node is parameterized as cgo.
Block Selection Cost (cbs): In each round of the Algorand
protocol, the sortition algorithm will select multiple (up to 70)
nodes as leaders, with each leader proposing its own block.
Each committee member in each round, speciﬁcally, during
the reduction phase of the BinaryBA(cid:2) protocol, needs to select
(and vote) for the block with the highest priority. This block
selection cost borne by a subset of committee members in each
round, which includes the veriﬁcation of sortition proofs, is
parameterized as cbs.
Vote Cost (cvo): Each selected committee member during
each step of the BinaryBA(cid:2) protocol should validate and check
incoming messages (including, votes from previous steps)
before submitting its own vote in that step. This cost, which
also includes the cost to append the sortition proof to the
outgoing vote and broadcast to neighbors, is parameterized
as cvo. The timeout to submit a vote is deﬁned by Algorand
and is equal to 20 seconds. It should be noted that cvo does
not include the cost of vote counting and is outlined next.
Vote Counting Cost (cvc): After all committee members
have submitted their votes, each Algorand node should vali-
date voting messages by checking their sortition proofs. cvc
represents all associated costs of sortition proofs and signature
veriﬁcations incurred when counting and tallying the votes
inside each received vote message.
Given the above task-speciﬁc costs,
let us now outline
the overall costs incurred by each node. Each node incurs a
cumulation of two types of costs: (i) a ﬁxed cost, and (ii) a
role-based cost. The ﬁxed cost (cf ix) represents the required
costs borne by each node irrespective of its role and is equal
to cve +cse +cso +cgo +cvs +cvc. In addition to the ﬁxed cost
cf ix in each round, each node incurs a cost based on its role(s)
(i.e., Leader, Committee Member or None) in that round and
is represented as follows:
⎧⎪⎨
⎪⎩
cj =
cf ix + cbl
cf ix + cbs + cvo
cf ix
j ∈ L
j ∈ M
j ∈ K,
(1)
where L, M, and K are the sets of leaders, committee members
and all other users without particular role, in round i.
B. Reward Sharing in Algorand
Given these costs, it is clear that rational users (which
we assume our users are) will fully participate in Algorand’s
distributed consensus protocol if and only if they have enough
incentive to do it. As Algorand is a cryptocurrency,
the
mechanism for providing incentives is straightforward - pay
users in Algos for their participation efforts and costs. For
instance, Bitcoin has an incentive model where the winner
of the PoW puzzle receives incentives/rewards in the form of
block rewards and transaction fees (paid out as Bitcoins) to
be engaged in the PoW and block addition process. A similar
question arises in Algorand: which users should be paid, and
how much, in order to enable their continued participation in
the distributed consensus process?
Recently the Algorand Foundation, dedicated to fulﬁlling
the global promise of blockchain technology by leveraging
the Algorand protocol, has suggested a tentative version of
reward sharing in their protocol [34], [35], as shown in Fig. 2.
The proposed mechanism assumes creation and maintenance
of two reward pools: (i) Foundation Reward Pool, and (ii)
Transaction Reward Pool. These pools are nothing but public
keys controlled by the Foundation. These public keys act
as a central (foundation-controlled) storage where reward
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:36:15 UTC from IEEE Xplore.  Restrictions apply. 
456
(cid:5)(cid:21)(cid:25)(cid:20)(cid:16)(cid:14)(cid:24)(cid:18)(cid:21)(cid:20)(cid:1)
(cid:11)(cid:17)(cid:26)(cid:14)(cid:22)(cid:16)(cid:23)
(cid:11)(cid:18)
(cid:6)(cid:14)(cid:1)(cid:17)(cid:13)(cid:1)
(cid:21)(cid:20)(cid:23)(cid:22)(cid:3)(cid:1)(cid:2)(cid:12)(cid:11)(cid:13)(cid:16)
(cid:5)
(cid:21)
(cid:25)
(cid:20)