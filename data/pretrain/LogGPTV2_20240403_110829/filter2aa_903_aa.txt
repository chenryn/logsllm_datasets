# Go With the Flow: Enforcing Program Behavior Through Syscall Sequences and Origins

## Presenter
**Claudio Canella (@cc0x1f)**
- **PhD Candidate at Graz University of Technology**
- **Contact**: PI:EMAIL

## Presentation Date
**August 11, 2022**

## Introduction
### Who am I?
- Claudio Canella, PhD Candidate at Graz University of Technology
- Contact: @cc0x1f, PI:EMAIL

### Vulnerability Trends
- **Yearly Vulnerabilities (Source: http://www.cvedetails.com/vulnerabilities-by-types.php)**
  - 2002: 2,156
  - 2004: 1,527
  - 2006: 2,451
  - 2008: 4,935
  - 2010: 6,610
  - 2012: 6,520
  - 2014: 5,632
  - 2016: 5,736
  - 2018: 4,653
  - 2020: 4,155
  - 2022: 5,297

## What to Do?
### Key Strategies
1. **Eliminate Bugs**
2. **Limit Post-Exploitation Impact**

## Control-Flow Integrity (CFI)
### Overview
- **Control Flow Diagram**
  - Allow: 3 → [5,6]
  - Deny: 3 → ![5,6]
  - CFI Check
  - Malicious Flow

## Linux Seccomp
### Overview
- **Kernel and Application Interaction**
  - Filter Installation
  - System Call Filtering
  - Termination on Disallowed System Calls
  - Return on Allowed System Calls

## Sample Syscall Sequence
- **Syscalls**: 0, 1, 2, 3, 16, 19, 20, 60, 72, 202, 231

## Syscall-Flow-Integrity Protection (SFIP)
### Components
- **State Machine**
- **Origins**
- **Enforcement**

## SysFlow
### Components
- **Compiler: Extraction**
- **Library: Setup**
- **Kernel: Enforcement**

## Syscall and CFG Extraction
### Example Code
```c
void foo(int test) {
    scanf(...);
    if (test) {
        printf(...);
    } else {
        syscall(read, ...);
    }
    int ret = bar(...);
    if (!ret) {
        exit(0);
    }
    return ret;
}
```
### Extracted Function Info
```json
{
    "Transitions": {
        "L03": [L04, L06],
        "L04": [L07],
        "L06": [L07],
        "L08": [L09, L10]
    },
    "Call Targets": {
        "L02": ["scanf"],
        "L04": ["printf"],
        "L07": ["bar"],
        "L09": ["exit"]
    },
    "Syscalls": {
        "L06": ["read"]
    }
}
```

## Syscall Offset Extraction
### Translation Unit 1
```c
void func() {
    asm("syscall" : : "a"(39));
    ...
    syscall_cp(close, 0);
}
```
### Translation Unit 2
```assembly
syscall_cp:
    ...
    mov %rcx, %rsi
    mov 8(%rsp), %r8
    syscall
    ...
```
### Extraction Results
- **Translation Unit 1**
  ```json
  {
      "Offsets": {
          "func": {
              "39": [L02]
          }
      },
      "Unknown Offsets": {
          "syscall_cp": [3]
      }
  }
  ```
- **Translation Unit 2**
  ```json
  {
      "Unknown Syscalls": {
          "syscall_cp": [L08]
      }
  }
  ```
- **Merged Results**
  ```json
  {
      "Offsets": {
          "func": {
              "39": [L02]
          },
          "syscall_cp": {
              "3": [L08]
          }
      }
  }
  ```

## State Machine Generation
### Example
- **Main Function**
  - Call Targets: `foo1`, `foo2`
  - Last Syscalls: None
- **Foo1 Function**
  - Call Targets: `bar1`
  - Syscalls: `open`
  - Last Syscalls: `open`
- **Bar1 Function**
  - Syscalls: `read`
  - Last Syscalls: `open -> read`

### State Machine
- **Main**
  - **Foo1**
    - **Bar1**
      - **Syscall Sequence**: `open -> read`

This presentation provides a comprehensive overview of the methods and tools used to enforce program behavior through syscall sequences and origins, ensuring robust security and integrity in software applications.