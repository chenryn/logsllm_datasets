Go With the Flow
Enforcing Program Behavior Through Syscall Sequences and Origins
Claudio Canella (@cc0x1f)
August 11, 2022
Graz University of Technology
Who am I?
Claudio Canella
PhD Candidate @ Graz University of Technology
 @cc0x1f
 PI:EMAIL
1
Claudio Canella (@cc0x1f)
2002 2004 2006 2008 2010 2012 2014 2016 2018 2020 2022
0
0.5
1
1.5
2
·104
2,1561,527
2,451
4,935
6,6106,520
5,6325,736
4,6534,155
5,2975,191
7,939
6,5046,454
14,714
16,55717,344
18,325
20,149
15,044
Year
Vulnerabilities1
1Source: http://www.cvedetails.com/vulnerabilities-by-types.php
2
Claudio Canella (@cc0x1f)
What to do?
Eliminate bugs
3
Claudio Canella (@cc0x1f)
What to do?
Eliminate bugs
Limit Post-Exploitation Impact
3
Claudio Canella (@cc0x1f)
What to do?
Eliminate bugs
Limit Post-Exploitation Impact
3
Claudio Canella (@cc0x1f)
Control-Flow Integrity
1
2
3
4
5
6
control ﬂow
4
Claudio Canella (@cc0x1f)
Control-Flow Integrity
1
2
3
4
5
6
Allow: 3 → [5,6]
Deny: 3 → ![5,6]
control ﬂow
CFI check
4
Claudio Canella (@cc0x1f)
Control-Flow Integrity
1
2
3
4
5
6
Allow: 3 → [5,6]
Deny: 3 → ![5,6]
control ﬂow
CFI check
malicious ﬂow
4
Claudio Canella (@cc0x1f)
Control-Flow Integrity
1
2
3
4
5
6
Allow: 3 → [5,6]
Deny: 3 → ![5,6]
control ﬂow
CFI check
malicious ﬂow
4
Claudio Canella (@cc0x1f)
Linux Seccomp
Kernel
App.
5
Claudio Canella (@cc0x1f)
Linux Seccomp
Kernel
App.
Filter
install
5
Claudio Canella (@cc0x1f)
Linux Seccomp
Kernel
App.
Filter
System Call
5
Claudio Canella (@cc0x1f)
Linux Seccomp
no
Kernel
App.
Filter
terminate
System Call
5
Claudio Canella (@cc0x1f)
Linux Seccomp
no
Kernel
App.
Filter
terminate
System Call
System Call
5
Claudio Canella (@cc0x1f)
Linux Seccomp
no
Kernel
App.
Filter
terminate
System Call
System Call
return
5
Claudio Canella (@cc0x1f)
Sample
6
Claudio Canella (@cc0x1f)
Sample
Syscalls: 0 1 2 3 16 19 20 60 72 202 231
6
Claudio Canella (@cc0x1f)
Syscall-Flow-Integrity Protection
7
Claudio Canella (@cc0x1f)
Syscall-Flow-Integrity Protection
State Machine
7
Claudio Canella (@cc0x1f)
Syscall-Flow-Integrity Protection
State Machine
Origins
7
Claudio Canella (@cc0x1f)
Syscall-Flow-Integrity Protection
State Machine
Origins
Enforcement
7
Claudio Canella (@cc0x1f)
Syscall-Flow-Integrity Protection
State Machine
Origins
Enforcement
SFIP
7
Claudio Canella (@cc0x1f)
SysFlow
Compiler: Extraction
8
Claudio Canella (@cc0x1f)
SysFlow
Compiler: Extraction
Library: Setup
8
Claudio Canella (@cc0x1f)
SysFlow
Compiler: Extraction
Library: Setup
Kernel: Enforcement
8
Claudio Canella (@cc0x1f)
Syscall and CFG Extraction
Source Code
L01 :
void
foo ( i n t
t e s t ) {
L02 :
s c an f ( . . . ) ;
L03 :
i f ( t e s t )
L04 :
p r i n t f ( . . . )
L05 :
e l s e
L06 :
s y s c a l l ( read ,
. . . ) ;
L07 :
i n t
r e t = bar ( . . . ) ;
L08 :
i f ( ! r e t )
L09 :
e x i t (0) ;
L10 :
return
r e t ;
L11 :
}
9
Claudio Canella (@cc0x1f)
Syscall and CFG Extraction
Source Code
L01 :
void
foo ( i n t
t e s t ) {
L02 :
s c an f ( . . . ) ;
L03 :
i f ( t e s t )
L04 :
p r i n t f ( . . . )
L05 :
e l s e
L06 :
s y s c a l l ( read ,
. . . ) ;
L07 :
i n t
r e t = bar ( . . . ) ;
L08 :
i f ( ! r e t )
L09 :
e x i t (0) ;
L10 :
return
r e t ;
L11 :
}
Extracted Function Info
{
” T r a n s i t i o n s ” :
{
”L03” :
[ L04 , L06 ] ,
”L04” :
[ L07 ] ,
”L06” :
[ L07 ]
”L08” :
[ L09 , L10 ]
}
” C a l l
Targets ” :
{
”L02” :
[ ” s c a n f ” ] ,
”L04” :
[ ” p r i n t f ” ] ,
”L07” :
[ ” bar ” ] ,
”L09” :
[ ” e x i t ” ] ,
}
” S y s c a l l s ” :
{
”L06”
:
[ read ]
}
}
extract
9
Claudio Canella (@cc0x1f)
Syscall Oﬀset Extraction
Translation Unit 1
L01 :
void
func ()
{
.func:39:
L02 :
asm( ” s y s c a l l ” : : ”a” (39) ) ;
. . .
.syscall cp:3:
L08 :
s y s c a l l c p ( close , 0 ) ;
L09 :
}
10
Claudio Canella (@cc0x1f)
Syscall Oﬀset Extraction
Translation Unit 1
L01 :
void
func ()
{
.func:39:
L02 :
asm( ” s y s c a l l ” : : ”a” (39) ) ;
. . .
.syscall cp:3:
L08 :
s y s c a l l c p ( close , 0 ) ;
L09 :
}
Extraction TU 1
” O f f s e t s ” :
{
” func ” :
{
”39” :
[ L02 ]
}
}
”Unknown
O f f s e t s ” :
{
” s y s c a l l c p ” :
[ 3 ]
}
extract
10
Claudio Canella (@cc0x1f)
Syscall Oﬀset Extraction
Translation Unit 1
L01 :
void
func ()
{
.func:39:
L02 :
asm( ” s y s c a l l ” : : ”a” (39) ) ;
. . .
.syscall cp:3:
L08 :
s y s c a l l c p ( close , 0 ) ;
L09 :
}
Translation Unit 2
L01 :
s y s c a l l c p :
. . .
L06 :
mov %rcx ,% r s i
L07 :
mov 8(% rsp ) ,%r8
.syscall cp:-1:
L08 :
s y s c a l l
. . .
Extraction TU 1
” O f f s e t s ” :
{
” func ” :
{
”39” :
[ L02 ]
}
}
”Unknown
O f f s e t s ” :
{
” s y s c a l l c p ” :
[ 3 ]
}
extract
10
Claudio Canella (@cc0x1f)
Syscall Oﬀset Extraction
Translation Unit 1
L01 :
void
func ()
{
.func:39:
L02 :
asm( ” s y s c a l l ” : : ”a” (39) ) ;
. . .
.syscall cp:3:
L08 :
s y s c a l l c p ( close , 0 ) ;
L09 :
}
Translation Unit 2
L01 :
s y s c a l l c p :
. . .
L06 :
mov %rcx ,% r s i
L07 :
mov 8(% rsp ) ,%r8
.syscall cp:-1:
L08 :
s y s c a l l
. . .
Extraction TU 1
” O f f s e t s ” :
{
” func ” :
{
”39” :
[ L02 ]
}
}
”Unknown
O f f s e t s ” :
{
” s y s c a l l c p ” :
[ 3 ]
}
Extraction TU 2
”Unknown
S y s c a l l s ” :
{
” s y s c a l l c p ” :
[ L08 ]
}
extract
10
Claudio Canella (@cc0x1f)
Syscall Oﬀset Extraction
Translation Unit 1
L01 :
void
func ()
{
.func:39:
L02 :
asm( ” s y s c a l l ” : : ”a” (39) ) ;
. . .
.syscall cp:3:
L08 :
s y s c a l l c p ( close , 0 ) ;
L09 :
}
Translation Unit 2
L01 :
s y s c a l l c p :
. . .
L06 :
mov %rcx ,% r s i
L07 :
mov 8(% rsp ) ,%r8
.syscall cp:-1:
L08 :
s y s c a l l
. . .
Extraction TU 1
” O f f s e t s ” :
{
” func ” :
{
”39” :
[ L02 ]
}
}
”Unknown
O f f s e t s ” :
{
” s y s c a l l c p ” :
[ 3 ]
}
Extraction TU 2
”Unknown
S y s c a l l s ” :
{
” s y s c a l l c p ” :
[ L08 ]
}
Linker
” O f f s e t s ” :
{
” func ” :
{
”39” :
[ L02 ]
} ,
” s y s c a l l c p ” :
{
”3” :
[ L08 ]
}
}
extract
merge
10
Claudio Canella (@cc0x1f)
State Machine Generation
11
Claudio Canella (@cc0x1f)
State Machine Generation
11
Claudio Canella (@cc0x1f)
State Machine Generation
merge
11
Claudio Canella (@cc0x1f)
State Machine Generation
main
Info main
C a l l
Targets :
{
”L56” :
[ foo1 ] ,
”L59” :
[ foo2 ]
}
Last Syscalls
State Machine
11
Claudio Canella (@cc0x1f)
State Machine Generation
main
foo1
Info foo1
C a l l
Targets :
{
”L03” :
[ bar1 ]
}
S y s c a l l s :
{
”L02” :
[ open ]
}
Last Syscalls
State Machine
11
Claudio Canella (@cc0x1f)
State Machine Generation
main
foo1
Info foo1
C a l l
Targets :
{
”L03” :
[ bar1 ]
}
S y s c a l l s :
{
}
Last Syscalls
open
State Machine
11
Claudio Canella (@cc0x1f)
State Machine Generation
main
foo1
bar1
Info bar1
S y s c a l l s :
{
”L12” :
[ read ]
}
Last Syscalls
open
State Machine
11
Claudio Canella (@cc0x1f)
State Machine Generation
main
foo1
bar1
Info bar1
S y s c a l l s :
{
”L12” :
[ read ]
}
Last Syscalls
open
State Machine
open: [read]
11
Claudio Canella (@cc0x1f)
State Machine Generation
main
foo1
bar1
Info bar1