### Best Practices for Installing Multiple Versions of Python on Snow Leopard

You mentioned that you have already set up Python 2.7.1 via Homebrew, which is a straightforward and effective method. Now, you need to set up Python 2.5 for an App Engine project and are encountering PATH issues when using a virtual environment with the system's Python 2.5.

Here are some best practices and recommendations:

1. **Leverage Existing System Python**:
   - Snow Leopard comes with Python 2.5 and Python 2.6 pre-installed. You can use these versions without additional installation.
   - To check the available Python versions, you can run `man python` in the terminal. This will also provide information on how to use the 32-bit or 64-bit versions, which might be necessary for certain C modules.

2. **Isolate Environments**:
   - If you need to manage multiple Python versions and environments, consider using tools like `pyenv` and `virtualenv`.
   - **pyenv**: This tool allows you to easily switch between multiple versions of Python. It can manage different Python installations and handle version switching seamlessly.
     ```sh
     brew install pyenv
     ```
   - **virtualenv**: Once you have `pyenv` set up, you can create isolated virtual environments for your projects.
     ```sh
     pyenv install 2.5.0
     pyenv local 2.5.0
     pip install virtualenv
     virtualenv myenv
     source myenv/bin/activate
     ```

3. **Custom Installation**:
   - If you need specific modifications or configurations, you can compile and install Python in a custom directory, such as `/opt/your-pythonx.y`, to avoid conflicts with the system Python.
   - Download the desired Python version from the official Python website.
   - Compile and install it in the custom directory.
     ```sh
     ./configure --prefix=/opt/your-pythonx.y
     make
     make install
     ```

4. **Manage PATH Issues**:
   - Ensure that the correct Python version is being used by setting the `PATH` environment variable appropriately.
   - For example, if you installed Python 2.5 in `/opt/python2.5`, you can add it to your `PATH` in your shell configuration file (e.g., `.bashrc` or `.zshrc`).
     ```sh
     export PATH="/opt/python2.5/bin:$PATH"
     ```

By following these steps, you can effectively manage multiple Python versions and avoid PATH-related issues. Using `pyenv` and `virtualenv` will provide a more robust and flexible setup for your development needs.