d: 0208
DirBase: 3ec2d2e0 ObjectTable: 8a6a59f8 HandleCount: 192.
Image: dllhost.exe
PROCESS 85cc7c48 SessionId: 0 Cid: 0790 Peb: 7ffd8000 ParentCi
d: 0278
DirBase: 3ec2d300 ObjectTable: 8a78a190 HandleCount: 191.
Image: WmiPrvSE.exe
PROCESS 85cdc658 SessionId: 0 Cid: 07d8 Peb: 7ffd5000 ParentCi
d: 0208
DirBase: 3ec2d340 ObjectTable: 916705d8 HandleCount: 191.
Image: dllhost.exe
PROCESS 85d3fa30 SessionId: 0 Cid: 0190 Peb: 7ffdf000 ParentCi
d: 0208
DirBase: 3ec2d320 ObjectTable: 9175c2c8 HandleCount: 152.
Image: msdtc.exe
PROCESS 85075cb0 SessionId: 0 Cid: 0528 Peb: 7ffdc000 ParentCi
d: 0208
DirBase: 3ec2d360 ObjectTable: 916c0a70 HandleCount: 110.
Image: VSSVC.exe
PROCESS 84e9b030 SessionId: 0 Cid: 0784 Peb: 7ffd4000 ParentCi
d: 0278
DirBase: 3ec2d380 ObjectTable: 917d4938 HandleCount: 318.
Image: WmiPrvSE.exe
323
从零开始学IDA逆向 50 Kernel Debugging
PROCESS 8570d538 SessionId: 1 Cid: 0858 Peb: 7ffdc000 ParentCi
d: 0208
DirBase: 3ec2d3e0 ObjectTable: 96b75ba0 HandleCount: 156.
Image: taskhost.exe
PROCESS 85e58030 SessionId: 0 Cid: 08f4 Peb: 7ffdc000 ParentCi
d: 0208
DirBase: 3ec2d440 ObjectTable: 91d3ddd8 HandleCount: 166.
Image: sppsvc.exe
PROCESS 85af2b08 SessionId: 1 Cid: 0974 Peb: 7ffdc000 ParentCi
d: 0378
DirBase: 3ec2d180 ObjectTable: 9175b340 HandleCount: 68.
Image: dwm.exe
PROCESS 85e626f0 SessionId: 1 Cid: 0980 Peb: 7ffdb000 ParentCi
d: 096c
DirBase: 3ec2d460 ObjectTable: 81ef1540 HandleCount: 600.
Image: explorer.exe
PROCESS 85ea28f8 SessionId: 1 Cid: 09e0 Peb: 7ffd5000 ParentCi
d: 0980
DirBase: 3ec2d420 ObjectTable: 9482bc18 HandleCount: 33.
Image: jusched.exe
PROCESS 85ea9030 SessionId: 1 Cid: 09e8 Peb: 7ffd5000 ParentCi
d: 0980
DirBase: 3ec2d400 ObjectTable: 94823c00 HandleCount: 225.
Image: vmtoolsd.exe
PROCESS 84061298 SessionId: 0 Cid: 0a88 Peb: 7ffdf000 ParentCi
d: 0208
DirBase: 3ec2d4a0 ObjectTable: 91f99d78 HandleCount: 630.
Image: SearchIndexer.exe
PROCESS 840685a0 SessionId: 0 Cid: 0aec Peb: 7ffd6000 ParentCi
d: 0a88
DirBase: 3ec2d480 ObjectTable: 91f65210 HandleCount: 312.
324
从零开始学IDA逆向 50 Kernel Debugging
Image: SearchProtocolHost.exe
PROCESS 840758b8 SessionId: 0 Cid: 0b00 Peb: 7ffd5000 ParentCi
d: 0a88
DirBase: 3ec2d4c0 ObjectTable: 949d8b40 HandleCount: 78.
Image: SearchFilterHost.exe
PROCESS 84ea7030 SessionId: 0 Cid: 0c14 Peb: 7ffdb000 ParentCi
d: 0208
DirBase: 3ec2d3c0 ObjectTable: 954c8948 HandleCount: 312.
Image: svchost.exe
PROCESS 840d3d40 SessionId: 0 Cid: 0e00 Peb: 7ffdf000 ParentCi
d: 0208
DirBase: 3ec2d3a0 ObjectTable: 94822518 HandleCount: 117.
Image: WmiApSrv.exe
这就是所有进程的清单。如果想要转到某个进程中设置断点可以（例如转到
explorer也就是PROCESS右侧是85e626f0的进程）：
kd> .process /i 85e626f0
You need to continue execution (press 'g' ) for the context
to be switched. When the debugger breaks in again, you will be in
the new process context.
按G键进行转换。
kd> g
Break instruction exception - code 80000003 (first chance)
nt!RtlpBreakWithStatusInstruction:
82676394 cc
查看当前所在进程。
kd> !process -1 0
PROCESS 85e626f0 SessionId: 1 Cid: 0980 Peb: 7ffdb000 ParentCi
d: 096c
DirBase: 3ec2d460 ObjectTable: 81ef1540 HandleCount: 600.
325
从零开始学IDA逆向 50 Kernel Debugging
Image: explorer.exe
50.4 加载符号文件
如果读者觉得有点浪费时间的话，这次可以跳过同步符号文件这个过程，需
要一点耐心。读者可以从点画线结束的地方继续。
---------------------------------------------------------
输入.reload / f重新加载所有符号。
这会花很长时间，有些能够下载因为它们在符号服务器上，而有些则没有符
号，总之在符号路径下将会填充一些内容。
图 50-19 重载符号
可以看到左下角的BUSY和downloading symbols，第一次下载会花很
长时间因为所有的文件都需要下载，但第二次就没有这个问题了。
如果加载符号有问题的话，可以在加载之前使用!Sym noisy命令。
在.reload之前输入!Sym noisy会追查加载符号时的所有问题。
---------------------------------------------------------
-
326
从零开始学IDA逆向 50 Kernel Debugging
很多人会质疑这是一个 IDA 的教程，但是作者并没有在开始的时候直接使
用IDA的Windbg插件，不过这也是完全可行的。
而使用 Windbg 来转到关键点位只是因为作者被 IDA 的问题所困扰，有时
候IDA会崩溃导致所有事情都中断。所以最好是到达感兴趣的点之后再使用ID
A进行调试，使用WINDBG来跳过一些不重要的位置，这种方式在这种远程内核
调试中更加可靠。所以在作者能控制得任何时候任何位置，都可以关掉 Windb
g，暂时冻结系统，然后再使用IDA中得Windbg插件附加来继续调试，这不会
有任何问题。作者后面会演示这个操作。
加载完符号之后，使用lm命令可以查看模块和它们的符号。
kd> lm
start end module name
00550000 007d0000 Explorer (pdb symbols) c:\symbols\exp
lorer.pdb\A289F16DBCB94B618103DE843592AB182\explorer.pdb
6bd50000 6bda2000 zipfldr (pdb symbols) c:\symbols\zipf
ldr.pdb\0CFC61030167490C9ABF25C441E651D11\zipfldr.pdb
6bdb0000 6bddb000 provsvc (pdb symbols) c:\symbols\prov
svc.pdb\222401C8EF0749BA9E532D6AA6666F601\provsvc.pdb
6bde0000 6be2f000 hgcpl (pdb symbols) c:\symbols\hgcp
l.pdb\4EA31C513A1C47F78EAAC3A5CD54D59A1\hgcpl.pdb
6be90000 6bf73000 FXSRESM (no symbols)
6bf80000 6bfe4000 imapi2 (pdb symbols) c:\symbols\imap
i2.pdb\4F52351C2B514C3699D1B47D48BCFA322\imapi2.pdb
6bff0000 6c02a000 FXSAPI (pdb symbols) c:\symbols\FXSA
PI.pdb\C5C8AC671FA34D9EB1CDD55364F6E39E2\FXSAPI.pdb
6c030000 6c102000 fxsst (pdb symbols) c:\symbols\FXSS
T.pdb\DDFADEC7308347E9AD60E0617335C84D2\FXSST.pdb
6c110000 6c31e000 SyncCenter (pdb symbols) c:\symbols\S
yncCenter.pdb\23C05D457D6F4BA8AAB78F8293F398C92\SyncCenter.pdb
6c320000 6cd9c000 ieframe (pdb symbols) c:\symbols\iefr
ame.pdb\BAAAEB87C2F8485C80589CCF7E3A82BE2\ieframe.pdb
6cda0000 6ce50000 bthprops (pdb symbols) c:\symbols\bth
props.pdb\97B2FBEB35D64296B802DD2387D5E1CF1\bthprops.pdb
6ce50000 6ce98000 wwanapi (pdb symbols) c:\symbols\wwan
api.pdb\9862E0172237487BBFEF6C1B3EBEE58A1\wwanapi.pdb
6cf70000 6d02a000 Actioncenter (pdb symbols) c:\symbols
327
从零开始学IDA逆向 50 Kernel Debugging
\ActionCenter.pdb\98A49FC8D39C471996BEB3EF01EAA4831\ActionCenter.
pdb
6d340000 6d4ee000 pnidui (pdb symbols) c:\symbols\pnid
ui.pdb\50126007BD354C589514BA7F546EA17A2\pnidui.pdb
6d4f0000 6d755000 netshell (pdb symbols) c:\symbols\net
shell.pdb\083CF46E903F426AA06FF633605370E32\netshell.pdb
6d8c0000 6d8ee000 QAgent (pdb symbols) c:\symbols\qage
nt.pdb\ABAFFF300B6A48789369D4A90AD2DC222\qagent.pdb
6da60000 6da76000 Wlanapi (pdb symbols) c:\symbols\wlan
api.pdb\48EE3C9420F24448833370695E2AF4772\wlanapi.pdb
6df90000 6df9a000 wwapi (pdb symbols) c:\symbols\wwap
i.pdb\84C82A03729E48E0A883E55B56B7A0161\wwapi.pdb
6e1e0000 6e1eb000 CSCAPI (pdb symbols) c:\symbols\csca
pi.pdb\3D7C1EEDC26B43C6B4CFD2BBF8EE08CB2\cscapi.pdb
现在所有的符号文件都在符号文件夹中，所以基本上配置完成。
50.5 创建驱动并调试
作者在主机上编写了一个简单的输出HELLO WORLD驱动程序。
在一个路径和名称都没有空格的文件夹下面创建一个文本文件，然后输入以
下代码。
#include 
void DriverUnload(
PDRIVER_OBJECT pDriverObject)
{
DbgPrint("Driver unloading\n");
}
NTSTATUS DriverEntry(
PDRIVER_OBJECT DriverObject,
PUNICODE_STRING RegistryPath)
{
DriverObject->DriverUnload = DriverUnload;
DbgPrint("Hello, World\n");
return STATUS_SUCCESS;
328
从零开始学IDA逆向 50 Kernel Debugging
}
将文件重命名为HelloWorldDriver.c。
图 50-20 开始菜单
然后再创建一个叫SOURCES的文本文件，内容是：
TARGETNAME = HelloWorldDriver
TARGETPATH = obj
TARGETTYPE = DRIVER
INCLUDES = %BUILD%\inc
LIBS = %BUILD%\lib
SOURCES = HelloWorldDriver.c
最后一个是创建makefile.def文件，内容是：
329
从零开始学IDA逆向 50 Kernel Debugging
!INCLUDE $(NTMAKEENV)\makefile.def
转到主机开始菜单已安装程序，使用wdk 7.1进行编译，如图 50-20。
然后启动x86 FREE BUILD ENVIRONMENT from Windows 7。
图 50-21 x86 FREE BUILD ENVIRONMENT from Windows 7
然后将路径设置为刚刚新建的3个文件的文件夹下：
图 50-22 设置路径
然后执行build命令。
330
从零开始学IDA逆向 50 Kernel Debugging
图 50-23 执行build命令
图 50-24 编译结果
编译结果如图 50-24。
为了验证是否能运行，将 sys 文件复制到远程机器中（如果系统在 windb
g中暂停，按G键使其继续运行），于此同时使用管理员身份运行OSRLOADER，
XP版本在Windows 7中也能使用。
331
从零开始学IDA逆向 50 Kernel Debugging
图 50-25 OSRLOADER
图 50-26 加载程序
查找文件并打开。
然后点击REGISTER SERVICE。
332
从零开始学IDA逆向 50 Kernel Debugging
图 50-27 REGISTER SERVICE
然后点击START SERVICE，如果没有蓝屏死机而且其它一切正常的话，就
没有问题，如果要查看输出的话，必须要以管理员身份运行DEBUG VIEW。
333
从零开始学IDA逆向 50 Kernel Debugging
图 50-28 运行DEBUG VIEW
当启动和停止驱动的时候。
图 50-29 驱动输出
DEBUG VIEW显示了驱动的输出，显然这是无法通过命令行实现的。
而在WINDBG中也可以观察到：
图 50-30 Windbg输出
点击START SERVICE，观察windbg的输出。
kd> !process -1 0
PROCESS 83fc4a20 SessionId: none Cid: 0004 Peb: 00000000 Paren
tCid: 0000
334
从零开始学IDA逆向 50 Kernel Debugging
DirBase: 00185000 ObjectTable: 87c01a88 HandleCount: 475.
Image: System
通过! Process 0 0查看所有进程清单，而在清单当中：
PROCESS 840dd830 SessionId: 1 Cid: 0b28 Peb: 7ffd5000 ParentCi
d: 0980
DirBase: 3ec2d4c0 ObjectTable: 95585948 HandleCount: 253.
Image: OSRLOADER.exe
然后转换进程：
kd> .process /i 840dd830
You need to continue execution (press 'g' ) for the context
to be switched. When the debugger breaks in again, you will be in th
e new process context.
然后按G键
kd> g
Break instruction exception - code 80000003 (first chance)
nt!RtlpBreakWithStatusInstruction:
82676394 cc int 3