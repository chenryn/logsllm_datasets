child to finish, and returns the status value in \f(CW$?\fR.
.Sp
The filename passed to 2\-argument (or 1\-argument) form of \fIopen()\fR will
have leading and trailing whitespace deleted, and the normal
redirection characters honored.  This property, known as \*(L"magic open\*(R",
can often be used to good effect.  A user could specify a filename of
\&\fI\*(L"rsh cat file |\*(R"\fR, or you could change certain filenames as needed:
.Sp
.Vb 2
\&    $filename =~ s/(.*\e.gz)\es*$/gzip -dc ;
.Ve
.Sp
Using the constructor from the \f(CW\*(C`IO::Handle\*(C'\fR package (or one of its
subclasses, such as \f(CW\*(C`IO::File\*(C'\fR or \f(CW\*(C`IO::Socket\*(C'\fR), you can generate anonymous
filehandles that have the scope of whatever variables hold references to
them, and automatically close whenever and however you leave that scope:
.Sp
.Vb 12
\&    use IO::File;
\&    #...
\&    sub read_myfile_munged {
\&        my $ALL = shift;
\&        my $handle = new IO::File;
\&        open($handle, "myfile") or die "myfile: $!";
\&        $first = 
\&            or return ();     # Automatically closed here.
\&        mung $first or die "mung failed";       # Or here.
\&        return $first,  if $ALL;       # Or here.
\&        $first;                                 # Or here.
\&    }
.Ve
.Sp
See \*(L"seek\*(R" for some details about mixing reading and writing.
.IP "opendir \s-1DIRHANDLE\s0,EXPR" 8
.IX Item "opendir DIRHANDLE,EXPR"
Opens a directory named \s-1EXPR\s0 for processing by \f(CW\*(C`readdir\*(C'\fR, \f(CW\*(C`telldir\*(C'\fR,
\&\f(CW\*(C`seekdir\*(C'\fR, \f(CW\*(C`rewinddir\*(C'\fR, and \f(CW\*(C`closedir\*(C'\fR.  Returns true if successful.
\&\s-1DIRHANDLE\s0 may be an expression whose value can be used as an indirect
dirhandle, usually the real dirhandle name.  If \s-1DIRHANDLE\s0 is an undefined
scalar variable (or array or hash element), the variable is assigned a
reference to a new anonymous dirhandle.
DIRHANDLEs have their own namespace separate from FILEHANDLEs.
.IP "ord \s-1EXPR\s0" 8
.IX Item "ord EXPR"
.PD 0
.IP "ord" 8
.IX Item "ord"
.PD
Returns the numeric (the native 8\-bit encoding, like \s-1ASCII\s0 or \s-1EBCDIC\s0,
or Unicode) value of the first character of \s-1EXPR\s0.  If \s-1EXPR\s0 is omitted,
uses \f(CW$_\fR.
.Sp
For the reverse, see \*(L"chr\*(R".
See perlunicode and encoding for more about Unicode.
.IP "our \s-1EXPR\s0" 8
.IX Item "our EXPR"
.PD 0
.IP "our \s-1EXPR\s0 \s-1TYPE\s0" 8
.IX Item "our EXPR TYPE"
.IP "our \s-1EXPR\s0 : \s-1ATTRS\s0" 8
.IX Item "our EXPR : ATTRS"
.IP "our \s-1TYPE\s0 \s-1EXPR\s0 : \s-1ATTRS\s0" 8
.IX Item "our TYPE EXPR : ATTRS"
.PD
An \f(CW\*(C`our\*(C'\fR declares the listed variables to be valid globals within
the enclosing block, file, or \f(CW\*(C`eval\*(C'\fR.  That is, it has the same
scoping rules as a \*(L"my\*(R" declaration, but does not create a local
variable.  If more than one value is listed, the list must be placed
in parentheses.  The \f(CW\*(C`our\*(C'\fR declaration has no semantic effect unless
\&\*(L"use strict vars\*(R" is in effect, in which case it lets you use the
declared global variable without qualifying it with a package name.
(But only within the lexical scope of the \f(CW\*(C`our\*(C'\fR declaration.  In this
it differs from \*(L"use vars\*(R", which is package scoped.)
.Sp
An \f(CW\*(C`our\*(C'\fR declaration declares a global variable that will be visible
across its entire lexical scope, even across package boundaries.  The
package in which the variable is entered is determined at the point
of the declaration, not at the point of use.  This means the following
behavior holds:
.Sp
.Vb 3
\&    package Foo;
\&    our $bar;           # declares $Foo::bar for rest of lexical scope
\&    $bar = 20;
.Ve
.Sp
.Vb 2
\&    package Bar;
\&    print $bar;         # prints 20
.Ve
.Sp
Multiple \f(CW\*(C`our\*(C'\fR declarations in the same lexical scope are allowed
if they are in different packages.  If they happened to be in the same
package, Perl will emit warnings if you have asked for them.
.Sp
.Vb 4
\&    use warnings;
\&    package Foo;
\&    our $bar;           # declares $Foo::bar for rest of lexical scope
\&    $bar = 20;
.Ve
.Sp
.Vb 3
\&    package Bar;
\&    our $bar = 30;      # declares $Bar::bar for rest of lexical scope
\&    print $bar;         # prints 30
.Ve
.Sp
.Vb 1
\&    our $bar;           # emits warning
.Ve
.Sp
An \f(CW\*(C`our\*(C'\fR declaration may also have a list of attributes associated
with it.
.Sp
The exact semantics and interface of \s-1TYPE\s0 and \s-1ATTRS\s0 are still
evolving.  \s-1TYPE\s0 is currently bound to the use of \f(CW\*(C`fields\*(C'\fR pragma,
and attributes are handled using the \f(CW\*(C`attributes\*(C'\fR pragma, or starting
from Perl 5.8.0 also via the \f(CW\*(C`Attribute::Handlers\*(C'\fR module.  See
\&\*(L"Private Variables via \fImy()\fR\*(R" in perlsub for details, and fields,
attributes, and Attribute::Handlers.
.Sp
The only currently recognized \f(CW\*(C`our()\*(C'\fR attribute is \f(CW\*(C`unique\*(C'\fR which
indicates that a single copy of the global is to be used by all
interpreters should the program happen to be running in a
multi-interpreter environment. (The default behaviour would be for
each interpreter to have its own copy of the global.)  Examples:
.Sp
.Vb 3
\&    our @EXPORT : unique = qw(foo);
\&    our %EXPORT_TAGS : unique = (bar => [qw(aa bb cc)]);
\&    our $VERSION : unique = "1.00";
.Ve
.Sp
Note that this attribute also has the effect of making the global
readonly when the first new interpreter is cloned (for example,
when the first new thread is created).
.Sp
Multi-interpreter environments can come to being either through the
\&\fIfork()\fR emulation on Windows platforms, or by embedding perl in a
multi-threaded application.  The \f(CW\*(C`unique\*(C'\fR attribute does nothing in
all other environments.
.IP "pack \s-1TEMPLATE\s0,LIST" 8
.IX Item "pack TEMPLATE,LIST"
Takes a \s-1LIST\s0 of values and converts it into a string using the rules
given by the \s-1TEMPLATE\s0.  The resulting string is the concatenation of
the converted values.  Typically, each converted value looks
like its machine-level representation.  For example, on 32\-bit machines
a converted integer may be represented by a sequence of 4 bytes.
.Sp
The \s-1TEMPLATE\s0 is a sequence of characters that give the order and type
of values, as follows:
.Sp
.Vb 3
\&    a   A string with arbitrary binary data, will be null padded.
\&    A   A text (ASCII) string, will be space padded.
\&    Z   A null terminated (ASCIZ) string, will be null padded.
.Ve
.Sp
.Vb 4
\&    b   A bit string (ascending bit order inside each byte, like vec()).
\&    B   A bit string (descending bit order inside each byte).
\&    h   A hex string (low nybble first).
\&    H   A hex string (high nybble first).
.Ve
.Sp
.Vb 2
\&    c   A signed char value.
\&    C   An unsigned char value.  Only does bytes.  See U for Unicode.
.Ve
.Sp
.Vb 5
\&    s   A signed short value.
\&    S   An unsigned short value.
\&          (This 'short' is _exactly_ 16 bits, which may differ from
\&           what a local C compiler calls 'short'.  If you want
\&           native-length shorts, use the '!' suffix.)
.Ve
.Sp
.Vb 6
\&    i   A signed integer value.
\&    I   An unsigned integer value.
\&          (This 'integer' is _at_least_ 32 bits wide.  Its exact
\&           size depends on what a local C compiler calls 'int',
\&           and may even be larger than the 'long' described in
\&           the next item.)
.Ve
.Sp
.Vb 5
\&    l   A signed long value.
\&    L   An unsigned long value.
\&          (This 'long' is _exactly_ 32 bits, which may differ from
\&           what a local C compiler calls 'long'.  If you want
\&           native-length longs, use the '!' suffix.)
.Ve
.Sp
.Vb 6
\&    n   An unsigned short in "network" (big-endian) order.
\&    N   An unsigned long in "network" (big-endian) order.
\&    v   An unsigned short in "VAX" (little-endian) order.
\&    V   An unsigned long in "VAX" (little-endian) order.
\&          (These 'shorts' and 'longs' are _exactly_ 16 bits and
\&           _exactly_ 32 bits, respectively.)
.Ve
.Sp
.Vb 5
\&    q   A signed quad (64-bit) value.
\&    Q   An unsigned quad value.
\&          (Quads are available only if your system supports 64-bit
\&           integer values _and_ if Perl has been compiled to support those.
\&           Causes a fatal error otherwise.)
.Ve
.Sp
.Vb 2
\&    j   A signed integer value (a Perl internal integer, IV).
\&    J   An unsigned integer value (a Perl internal unsigned integer, UV).
.Ve
.Sp
.Vb 2