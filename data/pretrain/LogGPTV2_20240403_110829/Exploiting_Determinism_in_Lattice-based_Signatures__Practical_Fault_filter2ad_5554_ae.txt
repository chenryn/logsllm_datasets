iterations within the signing procedure owing to the rejection sam-
pling approach used to sample for y ∈ S ℓ
γ1−1. We make two crucial
observations over the reference implementation of the Dilithium
scheme which aids us in locating the addition operation.
• Observation-1: The earliest rejection of the signature oc-
curs during the infinity norm check of z. This operation is
performed just after our target addition operation.
• Observation-2: Almost all operations preceding our target
addition operation are repeating for a certain number of
times depending on the number of polynomials (k, ℓ) in the
module.
We collect multiple fault-free EM traces ti for i = 1, . . . , N cor-
responding to the signing procedures for corresponding message
inputs mi and further partition the traces into segments correspond-
ing to the individual iterations as stated above. Based on Observa-
tion 1, we know that the offset of addition operation in zgen will
5We advice the reader to zoom into Figure 8 to identify the repeating patterns. It is
possible that the picture might pixelate upon printing.
(a)
(b)
(c)
Figure 8: First order Pattern Recognition (a) Identification
of multiple iterations of signing procedure on EM trace (b)
Zoomed in view of multiple iterations (c) Identifying repeat-
ing patterns in a single iteration and mapping them to the
corresponding operations in the reference implementation
be lesser than the length of the shortest segment (lenshort_seg) and
the addition operation will be approximately located near the end
of the smallest segment, that is (locadd (m) ≲ lenshort_seg). Based
on Observation 2 and knowledge of the implementation, we fur-
ther perform a second order pattern recognition to further look
for repeating patterns within a given segment. With the apriori
knowledge of the order of execution of operations and their corre-
sponding repetition counts, the attacker can look for patterns in
the same order and same repetition counts. Refer to Figure 8(c) for
the EM trace corresponding to a single iteration / segment. We can
see that we are able to distinguish the repeating patterns within
the segment and identify our target addition operation within a
certain approximation. We earmark the repeating patterns on the
trace in Figure 8(c) with the corresponding functions (with the
corresponding repetition count in brackets) used in the reference
implementation [19].
For a given message m to be signed, the identified loclast_iter(m)
is added to the estimated offset of the addition operation locadd(m)
(i.e) tadd (m) = loclast_iter(m) + locadd(m) to estimate the location of
the target addition operation from the start of the signing procedure.
Considering the trigger-delay of about 130 nsec of our EM pulse
generator, we identify a suitable time-window of sufficient length
around tadd(m) and simply sweep the fault injection process over
the window until we are able to fault the individual coefficients of
the signature component z.
Session 5B: Fault Attacks and Side Channel AnalysisAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand4366.4 Fault Injection results
Considering all the three implementation variants, our attack re-
quires to realize two different faults - skip-STR and skip-ADD faults.
We scanned the entire top layer of the chip and could identify a
precise location (close to the center of the chip near the ARM logo),
where we could achieve a 100% repeatability in skipping the store
instruction. With this achieved fault model, we were able to attack
both the Variant-1 and Variant-2 implementations of Dilithium. But,
we were not able to achieve practical faults to skip the ADD in-
struction required to attack Variant-3. Though we were not able to
demonstrate a practical fault attack over Variant-3, we do not state
this as a countermeasure against our attack since a more powerful
fault attacker with enhanced capabilities like enhanced precision
and multiple laser injection might still be able to mount a successful
fault attack on the Variant-3 implementation [29].
7 ZERO COST MITIGATION
There are certain generic countermeasures which provide pro-
tection against our attack. For example, double computation and
verification-after-sign countermeasures provide preliminary pro-
tection against our attack but at a considerable increase in compu-
tational cost [9]. Use of additional randomness for sampling y can
easily thwart our attack since it removes the deterministic assump-
tion. But, the subsequent non-deterministic version of Dilithium is
no longer secure in the quantum random oracle model [19]. Thus,
in this section, we present a zero-cost mitigation strategy against
our skip-addition fault attacks that only requires simple re-ordering
of operations within the signing procedure.
We observe that the vulnerable addition operation is the last
operation performed to generate the signature component z. Tar-
geting the addition operation thus ensures that the attacker can
directly observe the effect of the injected fault from the faulty z.
Moreover, given that the addition is a point-wise operation in Rq,
a single fault does not cause enough perturbation to be detected.
These aspects enable the attacker to directly derive a relation be-
tween the faulty signatures and the primary secret s1, thus in-turn
enabling the attack. We investigate the possibility of embedding
the vulnerable addition operation deep enough inside the signing
procedure to ensure that succeeding operations propagate the in-
jected fault strong enough so that the faulty signatures never pass
the rejection checks in the signing procedure.
7.1 Utilizing the Number Theoretic Transform
to improve Fault Propagation
We observe that multiplication of polynomials in Rq in Dilithium
is computed efficiently using the Number Theoretic Transform
(NTT). The NTT operation is a deterministic linear transforma-
tion of a given polynomial from a normal domain to NTT do-
main in the same ring, NTT : Rq → Rq. There is also an asso-
ciated inverse NTT transformation (INTT) mapping polynomials
back from NTT domain to normal domain. In the reference im-
plementation of Dilithium, we observe that the addition operation
within zgen occurs in the normal domain. We know that ring Rq ex-
hibits an isomorphism with itself under the NTT transform, that is
NTT(a +b) = NTT(a) +NTT(b)∀a, b ∈ Rq. Moreover, we also take
note of an interesting property of the NTT (resp. INTT) transform
that every coefficient of the output is a unique linear combination
of all the input coefficients, which we term as the diffusion property
of the NTT transform. We thus examine the prospect of performing
the addition in the NTT domain and further invert the result into
the normal domain using the INTT transform.
z = INTT(NTT(s1c) + NTT(y))
We henceforth denote the NTT representation of a polynomial x
as x, that is x = NTT(x). In the above case, the INTT operation is
performed after the addition of polynomials in the NTT domain. A
detailed description of the NTT operation is provided in Appendix
C. Lets say an attacker successfully faulted the addition operation
in the NTT domain introducing a perturbation of δt > 0 at the
tth coefficient. On applying the INTT transformation, its diffusion
property ensures that the fault δt is effectively propagated to all the
coefficients of the output polynomial, which in our case is ˆz. This
ensures that the coefficients of the faulty ˆz in the normal domain
are all uniformly distributed in the range [0, q − 1]. Since valid
signatures are expected to satisfy the condition of ∥z∥∞ < γ1 − β,
the faulted signatures are rejected by the signing procedure with
a very high probability. The probability of acceptance of a faulty
signature is estimated to be ≈ 2−4320 for recommended parameters
of Dilithium.
But, we observe that there is one case when the addition op-
eration is not faulted even on injection of a successful skipping
fault, that is addition with a zero coefficient which results in δt = 0.
Here, we observe that our NTT-protected implementation is still
attackable through a slight modification in the attack approach.
Faulty signatures are never output due to the fault propagation by
the INTT transform, hence the attacker should look for safe errors
(valid-signatures) upon successful fault injection. On identification
of a safe error in coefficient t, the attacker can construct a corre-
sponding equation of the form (s1c)t = 0 (Case-1) or (s1c)t = (z)t
for Case-2 (∵ (s1c)t = 0). Both equations are again linear equa-
tions in N variables with the unknowns being the coefficients of
the primary secret s1. Thus, collecting N such equations will lead
to successful recovery of the primary secret. Given that the co-
efficients of y and s1c are uniformly distributed in [0, q − 1], the
probability to observe a zero coefficient in either y or s1c is about
1/q, which equals about 2−23 for Dilithium and thus observation
of n safe errors for key recovery will require to run the signing
procedure q × ℓ × n times which amounts to about 233 signing
procedures for the recommended parameter set of Dilithium, while
our proposed attack on the previous cases only required about ℓ×n
signatures, that is, ≈ 210 signing procedures for recommended pa-
rameters. Though the theoretical increase is only about q, the large
size of q ≈ 223 exponentially increases the attacker’s complexity.
7.2 Evaluation of our Mitigation Approach
We performed fault simulations of our NTT-protected implemen-
tation for about 225 runs of the signing procedure and estimated
that about 230 signatures are required to collect enough informa-
tion to construct the ℓ × n equations for recovery of the primary
secret of Dilithium. Referring to the results from Table 2, we can
infer that attacking our NTT-protected implementation requires
around 20 years of signing time, under the same attack model, just
to observe enough safe-errors to recover the primary secret s1 of
Session 5B: Fault Attacks and Side Channel AnalysisAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand437Table 2: Efficacy of our Zero-cost mitigation technique
against skip-addition fault attack. We provide the the num-
bers for recommended parameters of Dilithium assuming
faults injected with 100% repeatability.
Implementation Type No. of Faulted Signatures Estimated Total Signing Time6
621.26 secs
6.44 × 108 secs (≈20 years)
Reference
NTT-Protected
1024
≈ 230
Dilithium. This underlines an increase in attacker’s complexity of
220 in terms of both computational time and effort.
Implementing the mitigation comes at zero-cost since it involves
only simple re-ordering of instructions within the zgen step. To the
best of our knowledge, we present the first use case of the NTT
transform being used as a countermeasure against fault attacks.
We thus propose our algorithm-level mitigation technique as a
concrete countermeasure against attacks that possibly target the
vulnerable secret-dependent addition operation in lattice-based
signature schemes.
8 CONCLUSION
In this work, we have extended the practicality and applicability of
skip-addition fault attacks to deterministic lattice-based signature
schemes. We demonstrate practical fault attacks against determin-
istic variants of Dilithium and qTESLA signature schemes, which
require only single-targeted faults in the signing procedure that
allows key recovery and subsequently an existential forgery attack.
We further demonstrate the efficacy of our attack against two well-
known countermeasures used to protect against the skip-addition
fault attack. We perform experimental validation of our attack us-
ing Electromagnetic fault injection over implementations from the
pqm4 library on the ARM Cortex-M4 microcontroller. Finally, we
also propose a zero-cost mitigation strategy using the NTT op-
eration that exponentially increases the attacker’s complexity to
protect against skip-addition fault attacks and possibly against at-
tacks that target the vulnerable addition operation in lattice-based
signature schemes.
[3] Shi Bai and Steven D Galbraith. 2014. An Improved Compression Technique for
REFERENCES
[1] Sedat Akleylek, Nina Bindel, Johannes Buchmann, Juliane Krämer, and Gior-
gia Azzurra Marson. 2016. An efficient lattice-based signature scheme with
provably secure instantiation. In International Conference on Cryptology in Africa.
Springer, 44–60.
[2] Christopher Ambrose, Joppe W Bos, Björn Fay, Marc Joye, Manfred Lochter,
and Bruce Murray. 2018. Differential attacks on deterministic signatures. In
Cryptographers’ Track at the RSA Conference. Springer, 339–353.
Signatures Based on Learning with Errors.. In CT-RSA, Vol. 8366. 28–47.
[4] Rami Barends, Julian Kelly, Anthony Megrant, Andrzej Veitia, Daniel Sank, Evan
Jeffrey, Ted C White, Josh Mutus, Austin G Fowler, Brooks Campbell, et al. 2014.
Superconducting quantum circuits at the surface code threshold for fault toler-
ance. Nature 508, 7497 (2014), 500–503.
[5] Alessandro Barenghi and Gerardo Pelosi. 2016. A note on fault attacks against
deterministic signature schemes (short paper). In International Workshop on
Security. Springer, 182–192.
[6] Daniel J Bernstein, Niels Duif, Tanja Lange, Peter Schwabe, and Bo-Yin Yang.
2012. High-speed high-security signatures. Journal of Cryptographic Engineering
2, 2 (2012), 77–89.
[7] Nina Bindel, Sedat Akleylek, Erdem Alkim, Paulo S. L. M. Barreto, Johannes
Buchmann, Edward Eaton, Gus Gutoski, Juliane Kramer, Patrick Longa, Harun
6The average signing time of the reference implementation is observed to be about
0.6067 secs on ARM Cortex-M4 running at 24 MHz.
Polat, Jefferson E. Ricardini, and Gustavo Zanon. 2017. qTESLA. Technical
Report. National Institute of Standards and Technology.
available at https:
//csrc.nist.gov/projects/post-quantum-cryptography/round-1-submissions.
[8] Nina Bindel, Johannes Buchmann, and Juliane Krämer. 2016. Lattice-based
signature schemes and their sensitivity to fault attacks. In Fault Diagnosis and
Tolerance in Cryptography (FDTC), 2016 Workshop on. IEEE, 63–77.
[9] Nina Bindel, Juliane Kramer, and Johannes Schreiber. 2017. Special session:
hampering fault attacks against lattice-based signature schemes-countermeasures
and their efficiency. In Hardware/Software Codesign and System Synthesis (CODES+
ISSS), 2017 International Conference on. IEEE, 1–3.
[10] Leon Groot Bruinderink, Andreas Hülsing, Tanja Lange, and Yuval Yarom. 2016.
Flush, Gauss, and Reload–a cache attack on the BLISS lattice-based signature
scheme. In International Conference on Cryptographic Hardware and Embedded
Systems. Springer, 323–345.
[11] Leon Groot Bruinderink and Peter Pessl. 2018. Differential Fault Attacks on
Deterministic Lattice Signatures. IACR Transactions on Cryptographic Hardware
and Embedded Systems 2018, 3 (2018). https://eprint.iacr.org/2018/355.pdf.
[12] Léo Ducas, Alain Durmus, Tancrède Lepoint, and Vadim Lyubashevsky. 2013.
Lattice signatures and bimodal Gaussians. In Advances in Cryptology–CRYPTO
2013. Springer, 40–56.
[13] Thomas Espitau, Pierre-Alain Fouque, Benoît Gérard, and Mehdi Tibouchi. 2016.
Loop-abort faults on lattice-based Fiat-Shamir and hash-and-sign signatures. In
International Conference on Selected Areas in Cryptography. Springer, 140–158.
[14] Thomas Espitau, Pierre-Alain Fouque, Benoît Gérard, and Mehdi Tibouchi. 2017.
Side-channel attacks on BLISS lattice-based signatures: Exploiting branch tracing
against strongswan and electromagnetic emanations in microcontrollers. In
Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications
Security. ACM, 1857–1874.
[15] Thomas Espitau, Pierre-Alain Fouque, Benoit Gerard, and Mehdi Tibouchi. 2018.
Loop-Abort Faults on Lattice-Based Signatures and Key Exchange Protocols. IEEE
Trans. Comput. (2018).
[16] Tim Güneysu, Vadim Lyubashevsky, and Thomas Pöppelmann. 2012. Practical
lattice-based cryptography: A signature scheme for embedded systems. In Inter-
national Conference on Cryptographic Hardware and Embedded Systems. Springer,
530–547.
[17] Matthias J. Kannwischer, Joost Rijneveld, Peter Schwabe, and Ko Stoffelen. [n.
https:
d.]. PQM4: Post-quantum crypto library for the ARM Cortex-M4.
//github.com/mupq/pqm4.
[18] Vadim Lyubashevsky. 2009. Fiat-Shamir with aborts: Applications to lattice
and factoring-based signatures. In International Conference on the Theory and
Application of Cryptology and Information Security. Springer, 598–616.
[19] Vadim Lyubashevsky, Leo Ducas, Eike Kiltz, Tancrede Lepoint, Peter Schwabe,
Gregor Seiler, and Damien Stehle. 2017. CRYSTALS-Dilithium. Technical Report.
National Institute of Standards and Technology. available at https://csrc.nist.
gov/projects/post-quantum-cryptography/round-1-submissions.
[20] Vadim Lyubashevsky, Chris Peikert, and Oded Regev. 2013. On Ideal Lattices and
[21] Daniele Micciancio. 2007. Generalized compact knapsacks, cyclic lattices, and
Learning with Errors over Rings. J. ACM 60, 6 (2013), 43.
efficient one-way functions. computational complexity 16, 4 (2007), 365–411.
Project. http://csrc.nist.gov/groups/ST/post-quantum-crypto/.
[22] National Institute of Standards and Technology. 2016. Post-Quantum Crypto
[23] National Institute of Standards and Technology. 2019. Round 2 Submissions,
Post-Quantum Cryptography. Technical Report. available at https://csrc.nist.gov/
projects/post-quantum-cryptography/round-2-submissions.
Submission Requirements and Evaluation Criteria for
the Post-Quantum Cryptography Standardization Process.
https:
//csrc.nist.gov/csrc/media/projects/post-quantum-cryptography/documents/
call-for-proposals-final-dec-2016.pdf.
[24] NIST. 2016.